# HG changeset patch
# User tenny
# Date 1026416015 0
#      Thu Jul 11 19:33:35 2002 +0000
# Node ID 258c1d15ad78f970efa156bc87b9dab9bb3d1a83
# Parent  7cb85d5c7aad8b54d86a8e3a96f0345349f6ef33
[project @ 2002-07-11 19:33:35 by tenny]


changed real to double precision

diff --git a/libcruft/odessa/odessa.f b/libcruft/odessa/odessa.f
--- a/libcruft/odessa/odessa.f
+++ b/libcruft/odessa/odessa.f
@@ -1463,17 +1463,17 @@ C CHECK RTOL AND ATOL FOR LEGALITY. ----
       IF (ISTATE .EQ. 1) GO TO 100
 C IF ISTATE = 3, SET FLAG TO SIGNAL PARAMETER CHANGES TO ODESSA_STODE. -
       JSTART = -1
       IF (NQ .LE. MAXORD) GO TO 90
 C MAXORD WAS REDUCED BELOW NQ.  COPY YH(*,MAXORD+2) INTO SAVF. ---------
       DO 80 I = 1,N
  80     RWORK(I+LSAVF-1) = RWORK(I+LWM-1)
 C RELOAD WM(1) = RWORK(LWM), SINCE LWM MAY HAVE CHANGED. ---------------
- 90   IF (MITER .GT. 0) RWORK(LWM) = SQRT(UROUND)
+ 90   IF (MITER .GT. 0) RWORK(LWM) = DSQRT(UROUND)
       GO TO 200
 C-----------------------------------------------------------------------
 C BLOCK C.
 C THE NEXT BLOCK IS FOR THE INITIAL CALL ONLY (ISTATE = 1).
 C IT CONTAINS ALL REMAINING INITIALIZATIONS, THE INITIAL CALL TO F,
 C THE INITIAL CALL TO ODESSA_SPRIME IF ISOPT = 1,
 C AND THE CALCULATION OF THE INITIAL STEP SIZE.
 C THE ERROR WEIGHTS IN EWT ARE INVERTED AFTER BEING LOADED.
@@ -1481,17 +1481,17 @@ C---------------------------------------
  100  UROUND = D1MACH(4)
       TN = T
       IF (ITASK .NE. 4 .AND. ITASK .NE. 5) GO TO 105
       TCRIT = RWORK(1)
       IF ((TCRIT - TOUT)*(TOUT - T) .LT. ZERO) GO TO 625
       IF (H0 .NE. ZERO .AND. (T + H0 - TCRIT)*H0 .GT. ZERO)
      1   H0 = TCRIT - T
  105  JSTART = 0
-      IF (MITER .GT. 0) RWORK(LWM) = SQRT(UROUND)
+      IF (MITER .GT. 0) RWORK(LWM) = DSQRT(UROUND)
       NHNIL = 0
       NST = 0
       NJE = 0
       NSLAST = 0
       HU = ZERO
       NQU = 0
       CCMAX = 0.3D0
       MAXCOR = 3
@@ -1542,39 +1542,39 @@ C                                     NE
 C  H0**2 = TOL / ( W0**-2 + (1/NEQ) * SUM ( F(I)/YWT(I) )**2  )
 C                                      1
 C WHERE  W0     = MAX ( ABS(T), ABS(TOUT) ),
 C        F(I)   = I-TH COMPONENT OF INITIAL VALUE OF F,
 C        YWT(I) = EWT(I)/TOL  (A WEIGHT FOR Y(I)).
 C THE SIGN OF H0 IS INFERRED FROM THE INITIAL VALUES OF TOUT AND T.
 C-----------------------------------------------------------------------
  125  IF (H0 .NE. ZERO) GO TO 180
-      TDIST = ABS(TOUT - T)
-      W0 = MAX(ABS(T),ABS(TOUT))
+      TDIST = DABS(TOUT - T)
+      W0 = DMAX1(DABS(T),DABS(TOUT))
       IF (TDIST .LT. TWO*UROUND*W0) GO TO 622
       TOL = RTOL(1)
       IF (ITOL .LE. 2) GO TO 140
       DO 130 I = 1,N
- 130    TOL = MAX(TOL,RTOL(I))
+ 130    TOL = DMAX1(TOL,RTOL(I))
  140   IF (TOL .GT. ZERO) GO TO 160
       ATOLI = ATOL(1)
       DO 150 I = 1,N
         IF (ITOL .EQ. 2 .OR. ITOL .EQ. 4) ATOLI = ATOL(I)
-        AYI = ABS(Y(I))
-        IF (AYI .NE. ZERO) TOL = MAX(TOL,ATOLI/AYI)
+        AYI = DABS(Y(I))
+        IF (AYI .NE. ZERO) TOL = DMAX1(TOL,ATOLI/AYI)
  150    CONTINUE
- 160   TOL = MAX(TOL,100.0D0*UROUND)
-      TOL = MIN(TOL,0.001D0)
+ 160   TOL = DMAX1(TOL,100.0D0*UROUND)
+      TOL = DMIN1(TOL,0.001D0)
       SUM = ODESSA_VNORM (N, RWORK(LF0), RWORK(LEWT))
       SUM = ONE/(TOL*W0*W0) + TOL*SUM**2
-      H0 = ONE/SQRT(SUM)
+      H0 = ONE/DSQRT(SUM)
       H0 = MIN(H0,TDIST)
-      H0 = SIGN(H0,TOUT-T)
+      H0 = DSIGN(H0,TOUT-T)
 C ADJUST H0 IF NECESSARY TO MEET HMAX BOUND. ---------------------------
- 180   RH = ABS(H0)*HMXI
+ 180   RH = DABS(H0)*HMXI
       IF (RH .GT. ONE) H0 = H0/RH
 C LOAD H WITH H0 AND SCALE YH(*,2) BY H0. ------------------------------
       H = H0
       DO 190 I = 1,NYH
  190    RWORK(I+LF0-1) = H0*RWORK(I+LF0-1)
       GO TO 270
 C-----------------------------------------------------------------------
 C BLOCK D.
@@ -1597,18 +1597,18 @@ C---------------------------------------
       IF ((TCRIT - TOUT)*H .LT. ZERO) GO TO 625
       IF ((TN - TOUT)*H .LT. ZERO) GO TO 245
       CALL ODESSA_INTDY (TOUT, 0, RWORK(LYH), NYH, Y, IFLAG)
       IF (IFLAG .NE. 0) GO TO 627
       T = TOUT
       GO TO 420
  240   TCRIT = RWORK(1)
       IF ((TN - TCRIT)*H .GT. ZERO) GO TO 624
- 245   HMX = ABS(TN) + ABS(H)
-      IHIT = ABS(TN - TCRIT) .LE. 100.0D0*UROUND*HMX
+ 245   HMX = DABS(TN) + DABS(H)
+      IHIT = DABS(TN - TCRIT) .LE. 100.0D0*UROUND*HMX
       IF (IHIT) GO TO 400
       TNEXT = TN + H*(ONE + FOUR*UROUND)
       IF ((TNEXT - TCRIT)*H .LE. ZERO) GO TO 250
       H = (TCRIT - TN)*(ONE - FOUR*UROUND)
       IF (ISTATE .EQ. 2) JSTART = -2
 C-----------------------------------------------------------------------
 C BLOCK E.
 C THE NEXT BLOCK IS NORMALLY EXECUTED FOR ALL CALLS AND CONTAINS
@@ -1672,27 +1672,27 @@ C ITASK = 1.  IF TOUT HAS BEEN REACHED, 
 C ITASK = 3.  JUMP TO EXIT IF TOUT WAS REACHED. ------------------------
  330   IF ((TN - TOUT)*H .GE. ZERO) GO TO 400
       GO TO 250
 C ITASK = 4.  SEE IF TOUT OR TCRIT WAS REACHED.  ADJUST H IF NECESSARY.
  340   IF ((TN - TOUT)*H .LT. ZERO) GO TO 345
       CALL ODESSA_INTDY (TOUT, 0, RWORK(LYH), NYH, Y, IFLAG)
       T = TOUT
       GO TO 420
- 345   HMX = ABS(TN) + ABS(H)
-      IHIT = ABS(TN - TCRIT) .LE. 100.0D0*UROUND*HMX
+ 345   HMX = DABS(TN) + DABS(H)
+      IHIT = DABS(TN - TCRIT) .LE. 100.0D0*UROUND*HMX
       IF (IHIT) GO TO 400
       TNEXT = TN + H*(ONE + FOUR*UROUND)
       IF ((TNEXT - TCRIT)*H .LE. ZERO) GO TO 250
       H = (TCRIT - TN)*(ONE - FOUR*UROUND)
       JSTART = -2
       GO TO 250
 C ITASK = 5.  SEE IF TCRIT WAS REACHED AND JUMP TO EXIT. ---------------
- 350   HMX = ABS(TN) + ABS(H)
-      IHIT = ABS(TN - TCRIT) .LE. 100.0D0*UROUND*HMX
+ 350   HMX = DABS(TN) + DABS(H)
+      IHIT = DABS(TN - TCRIT) .LE. 100.0D0*UROUND*HMX
 C-----------------------------------------------------------------------
 C BLOCK G.
 C THE FOLLOWING BLOCK HANDLES ALL SUCCESSFUL RETURNS FROM ODESSA.
 C IF ITASK .NE. 1, Y IS LOADED FROM YH AND T IS SET ACCORDINGLY.
 C ISTATE IS SET TO 2, THE ILLEGAL INPUT COUNTER IS ZEROED, AND THE
 C OPTIONAL OUTPUTS ARE LOADED INTO THE WORK ARRAYS BEFORE RETURNING.
 C IF ISTATE = 1 AND TOUT = T, THERE IS A RETURN WITH NO ACTION TAKEN,
 C EXCEPT THAT IF THIS HAS HAPPENED REPEATEDLY, THE RUN IS TERMINATED.
@@ -1765,17 +1765,17 @@ C KFLAG = -2.  CONVERGENCE FAILED REPEAT
      1   205, 1, 0, 0, 0, 0, ZERO,ZERO)
       CALL XERR ('OR WITH ABS(H) = HMIN',
      1   205, 1, 0, 0, 0, 2, TN, H)
       ISTATE = -5
 C COMPUTE IMXER IF RELEVANT. -------------------------------------------
  560   BIG = ZERO
       IMXER = 1
       DO 570 I = 1,NYH
-        SIZE = ABS(RWORK(I+LACOR-1)*RWORK(I+LEWT-1))
+        SIZE = DABS(RWORK(I+LACOR-1)*RWORK(I+LEWT-1))
         IF (BIG .GE. SIZE) GO TO 570
         BIG = SIZE
         IMXER = I
  570    CONTINUE
       IWORK(16) = IMXER
 C SET Y VECTOR, T, ILLIN, AND OPTIONAL OUTPUTS. ------------------------
  580   DO 590 I = 1,NYH
  590    Y(I) = RWORK(I+LYH-1)
diff --git a/libcruft/odessa/odessa_cfode.f b/libcruft/odessa/odessa_cfode.f
--- a/libcruft/odessa/odessa_cfode.f
+++ b/libcruft/odessa/odessa_cfode.f
@@ -42,67 +42,67 @@ C
       RQFAC = ONE
       DO 140 NQ = 2,12
 C-----------------------------------------------------------------------
 C THE PC ARRAY WILL CONTAIN THE COEFFICIENTS OF THE POLYNOMIAL
 C    P(X) = (X+1)*(X+2)*...*(X+NQ-1).
 C INITIALLY, P(X) = 1.
 C-----------------------------------------------------------------------
         RQ1FAC = RQFAC
-        RQFAC = RQFAC/REAL(NQ)
+        RQFAC = RQFAC/DBLE(NQ)
         NQM1 = NQ - 1
-        FNQM1 = REAL(NQM1)
+        FNQM1 = DBLE(NQM1)
         NQP1 = NQ + 1
 C FORM COEFFICIENTS OF P(X)*(X+NQ-1). ----------------------------------
         PC(NQ) = ZERO
         DO 110 IB = 1,NQM1
           I = NQP1 - IB
  110      PC(I) = PC(I-1) + FNQM1*PC(I)
         PC(1) = FNQM1*PC(1)
 C COMPUTE INTEGRAL, -1 TO 0, OF P(X) AND X*P(X). -----------------------
         PINT = PC(1)
         XPIN = PC(1)/2.0D0
         TSIGN = ONE
         DO 120 I = 2,NQ
           TSIGN = -TSIGN
-          PINT = PINT + TSIGN*PC(I)/REAL(I)
- 120      XPIN = XPIN + TSIGN*PC(I)/REAL(I+1)
+          PINT = PINT + TSIGN*PC(I)/DBLE(I)
+ 120      XPIN = XPIN + TSIGN*PC(I)/DBLE(I+1)
 C STORE COEFFICIENTS IN ELCO AND TESCO. --------------------------------
         ELCO(1,NQ) = PINT*RQ1FAC
         ELCO(2,NQ) = ONE
         DO 130 I = 2,NQ
- 130      ELCO(I+1,NQ) = RQ1FAC*PC(I)/REAL(I)
+ 130      ELCO(I+1,NQ) = RQ1FAC*PC(I)/DBLE(I)
         AGAMQ = RQFAC*XPIN
         RAGQ = ONE/AGAMQ
         TESCO(2,NQ) = RAGQ
-        IF (NQ .LT. 12) TESCO(1,NQP1) = RAGQ*RQFAC/REAL(NQP1)
+        IF (NQ .LT. 12) TESCO(1,NQP1) = RAGQ*RQFAC/DBLE(NQP1)
         TESCO(3,NQM1) = RAGQ
  140    CONTINUE
       RETURN
 C
  200   PC(1) = ONE
       RQ1FAC = ONE
       DO 230 NQ = 1,5
 C-----------------------------------------------------------------------
 C THE PC ARRAY WILL CONTAIN THE COEFFICIENTS OF THE POLYNOMIAL
 C    P(X) = (X+1)*(X+2)*...*(X+NQ).
 C INITIALLY, P(X) = 1.
 C-----------------------------------------------------------------------
-        FNQ = REAL(NQ)
+        FNQ = DBLE(NQ)
         NQP1 = NQ + 1
 C FORM COEFFICIENTS OF P(X)*(X+NQ). ------------------------------------
         PC(NQP1) = ZERO
         DO 210 IB = 1,NQ
           I = NQ + 2 - IB
  210      PC(I) = PC(I-1) + FNQ*PC(I)
         PC(1) = FNQ*PC(1)
 C STORE COEFFICIENTS IN ELCO AND TESCO. --------------------------------
         DO 220 I = 1,NQP1
  220      ELCO(I,NQ) = PC(I)/PC(2)
         ELCO(2,NQ) = ONE
         TESCO(1,NQ) = RQ1FAC
-        TESCO(2,NQ) = REAL(NQP1)/ELCO(1,NQ)
-        TESCO(3,NQ) = REAL(NQ+2)/ELCO(1,NQ)
+        TESCO(2,NQ) = DBLE(NQP1)/ELCO(1,NQ)
+        TESCO(3,NQ) = DBLE(NQ+2)/ELCO(1,NQ)
         RQ1FAC = RQ1FAC/FNQ
  230    CONTINUE
       RETURN
 C----------------------- END OF SUBROUTINE ODESSA_CFODE -----------------------
       END
diff --git a/libcruft/odessa/odessa_ewset.f b/libcruft/odessa/odessa_ewset.f
--- a/libcruft/odessa/odessa_ewset.f
+++ b/libcruft/odessa/odessa_ewset.f
@@ -7,13 +7,13 @@ C DEPENDING ON THE VALUE OF ITOL.
 C-----------------------------------------------------------------------
       IMPLICIT DOUBLE PRECISION (A-H,O-Z)
       DIMENSION RTOL(*), ATOL(*), YCUR(N), EWT(N)
       RTOLI = RTOL(1)
       ATOLI = ATOL(1)
       DO 10 I = 1,N
         IF (ITOL .GE. 3) RTOLI = RTOL(I)
         IF (ITOL .EQ. 2 .OR. ITOL .EQ. 4) ATOLI = ATOL(I)
-        EWT(I) = RTOLI*ABS(YCUR(I)) + ATOLI
+        EWT(I) = RTOLI*DABS(YCUR(I)) + ATOLI
  10     CONTINUE
       RETURN
 C----------------------- END OF SUBROUTINE ODESSA_EWSET -----------------------
       END
diff --git a/libcruft/odessa/odessa_intdy.f b/libcruft/odessa/odessa_intdy.f
--- a/libcruft/odessa/odessa_intdy.f
+++ b/libcruft/odessa/odessa_intdy.f
@@ -32,30 +32,30 @@ C---------------------------------------
       IF ((T-TP)*(T-TN) .GT. 0.0D0) GO TO 90
 C
       S = (T - TN)/H
       IC = 1
       IF (K .EQ. 0) GO TO 15
       JJ1 = L - K
       DO 10 JJ = JJ1,NQ
  10     IC = IC*JJ
- 15   C = REAL(IC)
+ 15   C = DBLE(IC)
       DO 20 I = 1,NYH
  20     DKY(I) = C*YH(I,L)
       IF (K .EQ. NQ) GO TO 55
       JB2 = NQ - K
       DO 50 JB = 1,JB2
         J = NQ - JB
         JP1 = J + 1
         IC = 1
         IF (K .EQ. 0) GO TO 35
         JJ1 = JP1 - K
         DO 30 JJ = JJ1,J
  30       IC = IC*JJ
- 35     C = REAL(IC)
+ 35     C = DBLE(IC)
         DO 40 I = 1,NYH
  40       DKY(I) = C*YH(I,JP1) + S*DKY(I)
  50     CONTINUE
       IF (K .EQ. 0) RETURN
  55   R = H**(-K)
       DO 60 I = 1,NYH
  60     DKY(I) = R*DKY(I)
       RETURN
diff --git a/libcruft/odessa/odessa_prepd.f b/libcruft/odessa/odessa_prepd.f
--- a/libcruft/odessa/odessa_prepd.f
+++ b/libcruft/odessa/odessa_prepd.f
@@ -31,24 +31,33 @@ C         APPROPRIATE SOLUTION VECTOR CO
 C THIS ROUTINE ALSO USES THE COMMON VARIABLES TN, MITER, N, NFE, NDFE,
 C AND IDF.
 C-----------------------------------------------------------------------
       NDFE = NDFE + 1
       IDF1 = IDF + 1
       GO TO (100, 200), IDF1
 C IDF = 0, CALL F TO APPROXIMATE DFDP. ---------------------------------
  100  RPAR = PAR(JPAR)
-      R = MAX(SRUR*ABS(RPAR),SRUR)
+      R = DMAX1(SRUR*DABS(RPAR),SRUR)
       PAR(JPAR) = RPAR + R
       FAC = 1.0D0/R
       CALL F (NEQ, TN, Y, PAR, FTEM)
       DO 110 I = 1,N
  110    DFDP(I) = (FTEM(I) - SAVF(I))*FAC
       PAR(JPAR) = RPAR
       NFE = NFE + 1
       RETURN
 C IDF = 1, CALL USER SUPPLIED DF. --------------------------------------
  200  DO 210 I = 1,N
  210    DFDP(I) = 0.0D0
       CALL DF (NEQ, TN, Y, PAR, DFDP, JPAR)
       RETURN
 C -------------------- END OF SUBROUTINE ODESSA_PREPDF ------------------------
       END
+
+
+
+
+
+
+
+
+
diff --git a/libcruft/odessa/odessa_prepj.f b/libcruft/odessa/odessa_prepj.f
--- a/libcruft/odessa/odessa_prepj.f
+++ b/libcruft/odessa/odessa_prepj.f
@@ -58,23 +58,23 @@ C IF MITER = 1, CALL JAC AND MULTIPLY BY
       CALL JAC (NEQ, TN, Y, PAR, 0, 0, WM(3), N)
       IF (JOPT .EQ. 1) RETURN
       CON = -HL0
       DO 120 I = 1,LENP
  120    WM(I+2) = WM(I+2)*CON
       GO TO 240
 C IF MITER = 2, MAKE N CALLS TO F TO APPROXIMATE J. --------------------
  200   FAC = ODESSA_VNORM (N, SAVF, EWT)
-      R0 = 1000.0D0*ABS(H)*UROUND*REAL(N)*FAC
+      R0 = 1000.0D0*DABS(H)*UROUND*DBLE(N)*FAC
       IF (R0 .EQ. ZERO) R0 = ONE
       SRUR = WM(1)
       J1 = 2
       DO 230 J = 1,N
         YJ = Y(J)
-        R = MAX(SRUR*ABS(YJ),R0/EWT(J))
+        R = DMAX1(SRUR*DABS(YJ),R0/EWT(J))
         Y(J) = Y(J) + R
         FAC = -HL0/R
         CALL F (NEQ, TN, Y, PAR, FTEM)
         DO 220 I = 1,N
  220      WM(I+J1) = (FTEM(I) - SAVF(I))*FAC
         Y(J) = YJ
         J1 = J1 + N
  230    CONTINUE
@@ -95,18 +95,18 @@ C IF MITER = 3, CONSTRUCT A DIAGONAL APP
       DO 310 I = 1,N
  310    Y(I) = Y(I) + R*(H*SAVF(I) - YH(I,2))
       CALL F (NEQ, TN, Y, PAR, WM(3))
       NFE = NFE + 1
       DO 320 I = 1,N
         R0 = H*SAVF(I) - YH(I,2)
         DI = 0.1D0*R0 - H*(WM(I+2) - SAVF(I))
         WM(I+2) = 1.0D0
-        IF (ABS(R0) .LT. UROUND/EWT(I)) GO TO 320
-        IF (ABS(DI) .EQ. ZERO) GO TO 330
+        IF (DABS(R0) .LT. UROUND/EWT(I)) GO TO 320
+        IF (DABS(DI) .EQ. ZERO) GO TO 330
         WM(I+2) = 0.1D0*R0/DI
  320    CONTINUE
       RETURN
  330   IERPJ = 1
       RETURN
 C IF MITER = 4, CALL JAC AND MULTIPLY BY SCALAR. -----------------------
  400   ML = IWM(1)
       MU = IWM(2)
@@ -121,36 +121,36 @@ C IF MITER = 4, CALL JAC AND MULTIPLY BY
       CON = -HL0
       DO 420 I = 1,LENP
  420    WM(I+2) = WM(I+2)*CON
       GO TO 570
 C IF MITER = 5, MAKE MBAND CALLS TO F TO APPROXIMATE J. ----------------
  500   ML = IWM(1)
       MU = IWM(2)
       MBAND = ML + MU + 1
-      MBA = MIN(MBAND,N)
+      MBA = MIN0(MBAND,N)
       MEBAND = MBAND + ML
       MEB1 = MEBAND - 1
       SRUR = WM(1)
       FAC = ODESSA_VNORM (N, SAVF, EWT)
-      R0 = 1000.0D0*ABS(H)*UROUND*REAL(N)*FAC
+      R0 = 1000.0D0*DABS(H)*UROUND*DBLE(N)*FAC
       IF (R0 .EQ. ZERO) R0 = ONE
       DO 560 J = 1,MBA
         DO 530 I = J,N,MBAND
           YI = Y(I)
-          R = MAX(SRUR*ABS(YI),R0/EWT(I))
+          R = DMAX1(SRUR*DABS(YI),R0/EWT(I))
  530      Y(I) = Y(I) + R
         CALL F (NEQ, TN, Y, PAR, FTEM)
         DO 550 JJ = J,N,MBAND
           Y(JJ) = YH(JJ,1)
           YJJ = Y(JJ)
-          R = MAX(SRUR*ABS(YJJ),R0/EWT(JJ))
+          R = DMAX1(SRUR*DABS(YJJ),R0/EWT(JJ))
           FAC = -HL0/R
-          I1 = MAX(JJ-MU,1)
-          I2 = MIN(JJ+ML,N)
+          I1 = MAX0(JJ-MU,1)
+          I2 = MIN0(JJ+ML,N)
           II = JJ*MEB1 - ML + 2
           DO 540 I = I1,I2
  540        WM(II+I) = (FTEM(I) - SAVF(I))*FAC
  550      CONTINUE
  560    CONTINUE
       NFE = NFE + MBA
       IF (JOPT .EQ. 1) RETURN
 C ADD IDENTITY MATRIX. -------------------------------------------------
diff --git a/libcruft/odessa/odessa_solsy.f b/libcruft/odessa/odessa_solsy.f
--- a/libcruft/odessa/odessa_solsy.f
+++ b/libcruft/odessa/odessa_solsy.f
@@ -38,17 +38,17 @@ C---------------------------------------
 C
  300   PHL0 = WM(2)
       HL0 = H*EL0
       WM(2) = HL0
       IF (HL0 .EQ. PHL0) GO TO 330
       R = HL0/PHL0
       DO 320 I = 1,N
         DI = ONE - R*(ONE - ONE/WM(I+2))
-        IF (ABS(DI) .EQ. ZERO) GO TO 390
+        IF (DABS(DI) .EQ. ZERO) GO TO 390
  320    WM(I+2) = ONE/DI
  330   DO 340 I = 1,N
  340    X(I) = WM(I+2)*X(I)
       RETURN
  390   IERSL = 1
       RETURN
 C
  400   ML = IWM(1)
diff --git a/libcruft/odessa/odessa_stesa.f b/libcruft/odessa/odessa_stesa.f
--- a/libcruft/odessa/odessa_stesa.f
+++ b/libcruft/odessa/odessa_stesa.f
@@ -105,18 +105,18 @@ C---------------------------------------
 C LOCAL ERROR TEST PASSED. SET KFLAGS TO 0 TO INDICATE THIS.
 C IF IALTH = 1, COMPUTE DSMS, DDNS, AND DUPS (IF L .LT. LMAX).
 C-----------------------------------------------------------------------
         KFLAGS = 0
         IF (IALTH .GT. 1) GO TO 100
         IF (L .EQ. LMAX) GO TO 70
         DO 60 I= 1,N
  60       Y(I,J) = ACOR(I,J) - YH(I,J,LMAX)
-        DUPS = MAX(DUPS,ODESSA_VNORM(N,Y(1,J),EWT(1,J))*TI3)
- 70     DSMS = MAX(DSMS,ERR)
+        DUPS = DMAX1(DUPS,ODESSA_VNORM(N,Y(1,J),EWT(1,J))*TI3)
+ 70     DSMS = DMAX1(DSMS,ERR)
  100  CONTINUE
       RETURN
 C-----------------------------------------------------------------------
 C THIS SECTION IS REACHED IF THE ERROR TOLERANCE FOR SENSITIVITY
 C SOLUTION VECTOR JPAR HAS BEEN VIOLATED. KFLAGS IS MADE NEGATIVE TO
 C INDICATE THIS. IF KFLAGS = -1, SET KFLAG EQUAL TO ZERO SO THAT KFLAG
 C IS SET TO -1 ON RETURN TO ODESSA_STODE BEFORE REPEATING THE STEP.
 C INCREMENT NRS(1) (= TOTAL NUMBER OF REPEATED STEPS DUE TO ALL
diff --git a/libcruft/odessa/odessa_stode.f b/libcruft/odessa/odessa_stode.f
--- a/libcruft/odessa/odessa_stode.f
+++ b/libcruft/odessa/odessa_stode.f
@@ -159,53 +159,53 @@ C---------------------------------------
  110   IF (NQ .LE. MAXORD) GO TO 160
  120   NQ = MAXORD
       L = LMAX
       DO 125 I = 1,L
  125    EL(I) = ELCO(I,NQ)
       NQNYH = NQ*NYH
       RC = RC*EL(1)/EL0
       EL0 = EL(1)
-      CONIT = 0.5D0/REAL(NQ+2)
+      CONIT = 0.5D0/DBLE(NQ+2)
       DDN = ODESSA_VNORM (N, SAVF, EWT)/TESCO(1,L)
-      EXDN = ONE/REAL(L)
+      EXDN = ONE/DBLE(L)
       RHDN = ONE/(1.3D0*DDN**EXDN + 0.0000013D0)
-      RH = MIN(RHDN,ONE)
+      RH = DMIN1(RHDN,ONE)
       IREDO = 3
       IF (H .EQ. HOLD) GO TO 170
-      RH = MIN(RH,ABS(H/HOLD))
+      RH = DMIN1(RH,DABS(H/HOLD))
       H = HOLD
       GO TO 175
 C-----------------------------------------------------------------------
 C ODESSA_CFODE IS CALLED TO GET ALL THE INTEGRATION COEFFICIENTS FOR THE
 C CURRENT METH.  THEN THE EL VECTOR AND RELATED CONSTANTS ARE RESET
 C WHENEVER THE ORDER NQ IS CHANGED, OR AT THE START OF THE PROBLEM.
 C-----------------------------------------------------------------------
  140   CALL ODESSA_CFODE (METH, ELCO, TESCO)
  150   DO 155 I = 1,L
  155    EL(I) = ELCO(I,NQ)
       NQNYH = NQ*NYH
       RC = RC*EL(1)/EL0
       EL0 = EL(1)
-      CONIT = 0.5D0/REAL(NQ+2)
+      CONIT = 0.5D0/DBLE(NQ+2)
       GO TO (160, 170, 200), IRET
 C-----------------------------------------------------------------------
 C IF H IS BEING CHANGED, THE H RATIO RH IS CHECKED AGAINST
 C RMAX, HMIN, AND HMXI, AND THE YH ARRAY RESCALED.  IALTH IS SET TO
 C L = NQ + 1 TO PREVENT A CHANGE OF H FOR THAT MANY STEPS, UNLESS
 C FORCED BY A CONVERGENCE OR ERROR TEST FAILURE.
 C-----------------------------------------------------------------------
  160  IF (H .EQ. HOLD) GO TO 200
       RH = H/HOLD
       H = HOLD
       IREDO = 3
       GO TO 175
- 170   RH = MAX(RH,HMIN/ABS(H))
- 175   RH = MIN(RH,RMAX)
-      RH = RH/MAX(ONE,ABS(H)*HMXI*RH)
+ 170   RH = DMAX1(RH,HMIN/DABS(H))
+ 175   RH = DMIN1(RH,RMAX)
+      RH = RH/DMAX1(ONE,DABS(H)*HMXI*RH)
       R = ONE
       DO 180 J = 2,L
         R = R*RH
         DO 180 I = 1,NYH
  180      YH(I,J) = YH(I,J)*R
       H = H*RH
       RC = RC*RH
       IALTH = L
@@ -214,17 +214,17 @@ C---------------------------------------
 C THIS SECTION COMPUTES THE PREDICTED VALUES BY EFFECTIVELY
 C MULTIPLYING THE YH ARRAY BY THE PASCAL TRIANGLE MATRIX.
 C RC IS THE RATIO OF NEW TO OLD VALUES OF THE COEFFICIENT  H*EL(1).
 C WHEN RC DIFFERS FROM 1 BY MORE THAN CCMAX, IPUP IS SET TO MITER
 C TO FORCE PJAC TO BE CALLED, IF A JACOBIAN IS INVOLVED.
 C IN ANY CASE, PJAC IS CALLED AT LEAST EVERY MSBP STEPS FOR ISOPT = 0,
 C AND AT LEAST ONCE EVERY STEP FOR ISOPT = 1.
 C-----------------------------------------------------------------------
- 200  IF (ABS(RC-ONE) .GT. CCMAX) IPUP = MITER
+ 200  IF (DABS(RC-ONE) .GT. CCMAX) IPUP = MITER
       IF (NST .GE. NSLP+MSBP) IPUP = MITER
       TN = TN + H
       I1 = NQNYH + 1
       DO 215 JB = 1,NQ
         I1 = I1 - NYH
         DO 210 I = I1,NQNYH
  210      YH1(I) = YH1(I) + YH1(I+NYH)
  215    CONTINUE
@@ -283,18 +283,18 @@ C---------------------------------------
       DEL = ODESSA_VNORM (N, Y, EWT)
       DO 380 I = 1,N
         ACOR(I) = ACOR(I) + Y(I)
  380    Y(I) = YH(I,1) + EL(1)*ACOR(I)
 C-----------------------------------------------------------------------
 C TEST FOR CONVERGENCE.  IF M.GT.0, AN ESTIMATE OF THE CONVERGENCE
 C RATE CONSTANT IS STORED IN CRATE, AND THIS IS USED IN THE TEST.
 C-----------------------------------------------------------------------
- 400   IF (M .NE. 0) CRATE = MAX(0.2D0*CRATE,DEL/DELP)
-      DCON = DEL*MIN(ONE,1.5D0*CRATE)/(TESCO(2,NQ)*CONIT)
+ 400   IF (M .NE. 0) CRATE = DMAX1(0.2D0*CRATE,DEL/DELP)
+      DCON = DEL*DMIN1(ONE,1.5D0*CRATE)/(TESCO(2,NQ)*CONIT)
       IF (DCON .LE. ONE) GO TO 450
       M = M + 1
       IF (M .EQ. MAXCOR) GO TO 410
       IF (M .GE. 2 .AND. DEL .GT. 2.0D0*DELP) GO TO 410
       DELP = DEL
       CALL F (NEQ, TN, Y, PAR, SAVF)
       NFE = NFE + 1
       GO TO 270
@@ -315,17 +315,17 @@ C---------------------------------------
       TN = TOLD
       I1 = NQNYH + 1
       DO 445 JB = 1,NQ
         I1 = I1 - NYH
         DO 440 I = I1,NQNYH
  440      YH1(I) = YH1(I) - YH1(I+NYH)
  445    CONTINUE
       IF (IERPJ .LT. 0 .OR. IERSL .LT. 0) GO TO 680
-      IF (ABS(H) .LE. HMIN*1.00001D0) GO TO 670
+      IF (DABS(H) .LE. HMIN*1.00001D0) GO TO 670
       IF (NCF .EQ. MXNCF) GO TO 670
       RH = 0.25D0
       IPUP = MITER
       IREDO = 1
       GO TO 170
 C-----------------------------------------------------------------------
 C THE CORRECTOR HAS CONVERGED.
 C THE LOCAL ERROR TEST IS MADE AND CONTROL PASSES TO STATEMENT 500
@@ -388,17 +388,17 @@ C---------------------------------------
       TN = TOLD
       I1 = NQNYH + 1
       DO 515 JB = 1,NQ
         I1 = I1 - NYH
         DO 510 I = I1,NQNYH
  510      YH1(I) = YH1(I) - YH1(I+NYH)
  515    CONTINUE
       RMAX = 2.0D0
-      IF (ABS(H) .LE. HMIN*1.00001D0) GO TO 660
+      IF (DABS(H) .LE. HMIN*1.00001D0) GO TO 660
       IF (KFLAG .LE. -3) GO TO 640
       IREDO = 2
       RHUP = ZERO
       GO TO 540
 C-----------------------------------------------------------------------
 *
 C REGARDLESS OF THE SUCCESS OR FAILURE OF THE STEP, FACTORS
 C RHDN, RHSM, AND RHUP ARE COMPUTED, BY WHICH H COULD BE MULTIPLIED
@@ -410,56 +410,56 @@ C ADDITIONAL SCALED DERIVATIVE.
 C FOR ISOPT = 1, DUPS AND DSMS ARE LOADED WITH THE LARGEST RMS-NORMS
 C OBTAINED BY CONSIDERING SEPARATELY THE SENSITIVITY SOLUTION VECTORS.
 C-----------------------------------------------------------------------
  520   RHUP = ZERO
       IF (L .EQ. LMAX) GO TO 540
       DO 530 I = 1,N
  530    SAVF(I) = ACOR(I) - YH(I,LMAX)
       DUP = ODESSA_VNORM (N, SAVF, EWT)/TESCO(3,NQ)
-      DUP = MAX(DUP,DUPS)
-      EXUP = ONE/REAL(L+1)
+      DUP = DMAX1(DUP,DUPS)
+      EXUP = ONE/DBLE(L+1)
       RHUP = ONE/(1.4D0*DUP**EXUP + 0.0000014D0)
- 540   EXSM = ONE/REAL(L)
-      DSM = MAX(DSM,DSMS)
+ 540   EXSM = ONE/DBLE(L)
+      DSM = DMAX1(DSM,DSMS)
       RHSM = ONE/(1.2D0*DSM**EXSM + 0.0000012D0)
       RHDN = ZERO
       IF (NQ .EQ. 1) GO TO 560
       JPOINT = 1
       DO 550 J = 1,NSV
         DDN = ODESSA_VNORM (N, YH(JPOINT,L), EWT(JPOINT))/TESCO(1,NQ)
-        DDNS = MAX(DDNS,DDN)
+        DDNS = DMAX1(DDNS,DDN)
         JPOINT = JPOINT + N
  550  CONTINUE
       DDN = DDNS
       DDNS = ZERO
-      EXDN = ONE/REAL(NQ)
+      EXDN = ONE/DBLE(NQ)
       RHDN = ONE/(1.3D0*DDN**EXDN + 0.0000013D0)
  560   IF (RHSM .GE. RHUP) GO TO 570
       IF (RHUP .GT. RHDN) GO TO 590
       GO TO 580
  570   IF (RHSM .LT. RHDN) GO TO 580
       NEWQ = NQ
       RH = RHSM
       GO TO 620
  580   NEWQ = NQ - 1
       RH = RHDN
       IF (KFLAG .LT. 0 .AND. RH .GT. ONE) RH = ONE
       GO TO 620
  590   NEWQ = L
       RH = RHUP
       IF (RH .LT. 1.1D0) GO TO 610
-      R = EL(L)/REAL(L)
+      R = EL(L)/DBLE(L)
       DO 600 I = 1,NYH
  600    YH(I,NEWQ+1) = ACOR(I)*R
       GO TO 630
  610   IALTH = 3
       GO TO 700
  620   IF ((KFLAG .EQ. 0) .AND. (RH .LT. 1.1D0)) GO TO 610
-      IF (KFLAG .LE. -2) RH = MIN(RH,0.2D0)
+      IF (KFLAG .LE. -2) RH = DMIN1(RH,0.2D0)
 C-----------------------------------------------------------------------
 C IF THERE IS A CHANGE OF ORDER, RESET NQ, L, AND THE COEFFICIENTS.
 C IN ANY CASE H IS RESET ACCORDING TO RH AND THE YH ARRAY IS RESCALED.
 C THEN EXIT FROM 690 IF THE STEP WAS OK, OR REDO THE STEP OTHERWISE.
 C-----------------------------------------------------------------------
       IF (NEWQ .EQ. NQ) GO TO 170
  630   NQ = NEWQ
       L = NQ + 1
@@ -471,17 +471,17 @@ C IF 10 FAILURES HAVE OCCURRED, EXIT WIT
 C IT IS ASSUMED THAT THE DERIVATIVES THAT HAVE ACCUMULATED IN THE
 C YH ARRAY HAVE ERRORS OF THE WRONG ORDER.  HENCE THE FIRST
 C DERIVATIVE IS RECOMPUTED, AND THE ORDER IS SET TO 1.  THEN
 C H IS REDUCED BY A FACTOR OF 10, AND THE STEP IS RETRIED,
 C UNTIL IT SUCCEEDS OR H REACHES HMIN.
 C-----------------------------------------------------------------------
  640   IF (KFLAG .EQ. -10) GO TO 660
       RH = 0.1D0
-      RH = MAX(HMIN/ABS(H),RH)
+      RH = DMAX1(HMIN/DABS(H),RH)
       H = H*RH
       DO 645 I = 1,NYH
  645    Y(I) = YH(I,1)
       CALL F (NEQ, TN, Y, PAR, SAVF)
       NFE = NFE + 1
       IF (ISOPT .EQ. 0) GO TO 649
       CALL ODESSA_SPRIME (NEQ, Y, YH, NYH, N, NSV, WM, IWM, EWT, SAVF, 
      1   ACOR, ACOR(N+1), PAR, F, JAC, DF, PJAC, PDF)
diff --git a/libcruft/odessa/odessa_vnorm.f b/libcruft/odessa/odessa_vnorm.f
--- a/libcruft/odessa/odessa_vnorm.f
+++ b/libcruft/odessa/odessa_vnorm.f
@@ -29,44 +29,44 @@ C---------------------------------------
       DATA CUTLO,CUTHI /8.232D-11,1.304D19/
       DATA ZERO,ONE/0.0D0,1.0D0/
 C  BLAS ALGORITHM
       NEXT = 1
       SUM = ZERO
       I = 1
 20    SX = V(I)*W(I)
       GO TO (30,40,70,80),NEXT
-30    IF (ABS(SX).GT.CUTLO) GO TO 110
+30    IF (DABS(SX).GT.CUTLO) GO TO 110
       NEXT = 2
       XMAX = ZERO
 40    IF (SX.EQ.ZERO) GO TO 130
-      IF (ABS(SX).GT.CUTLO) GO TO 110
+      IF (DABS(SX).GT.CUTLO) GO TO 110
       NEXT = 3
       GO TO 60
 50    I=J
       NEXT = 4
       SUM = (SUM/SX)/SX
-60    XMAX = ABS(SX)
+60    XMAX = DABS(SX)
       GO TO 90
-70    IF(ABS(SX).GT.CUTLO) GO TO 100
-80    IF(ABS(SX).LE.XMAX) GO TO 90
+70    IF(DABS(SX).GT.CUTLO) GO TO 100
+80    IF(DABS(SX).LE.XMAX) GO TO 90
       SUM = ONE + SUM * (XMAX/SX)**2
-      XMAX = ABS(SX)
+      XMAX = DABS(SX)
       GO TO 130
 90    SUM = SUM + (SX/XMAX)**2
       GO TO 130
 100   SUM = (SUM*XMAX)*XMAX
-110   HITEST = CUTHI/REAL(N)
+110   HITEST = CUTHI/DBLE(N)
       DO 120 J = I,N
          SX = V(J)*W(J)
-         IF(ABS(SX).GE.HITEST) GO TO 50
+         IF(DABS(SX).GE.HITEST) GO TO 50
          SUM = SUM + SX**2
 120   CONTINUE
-      ODESSA_VNORM = SQRT(SUM)
+      ODESSA_VNORM = DSQRT(SUM)
       GO TO 140
 130   CONTINUE
       I = I + 1
       IF (I.LE.N) GO TO 20
-      ODESSA_VNORM = XMAX * SQRT(SUM)
+      ODESSA_VNORM = XMAX * DSQRT(SUM)
 140   CONTINUE
       RETURN
 C----------------------- END OF FUNCTION ODESSA_VNORM -------------------------
       END
