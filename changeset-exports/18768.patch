# HG changeset patch
# User Rik <rik@octave.org>
# Date 1400356571 25200
#      Sat May 17 12:56:11 2014 -0700
# Node ID 75f8926deef1d8f907171971d81f13dab8279adc
# Parent  10082673a8f0739997a4b342843969e3978e4af7
Fix Z-order stacking of patches and axes grid lines (bug #40722).

* gl-render.h (set_polygon_offset): Change function prototype for offset
argument to float.

* gl-render.cc (set_polygon_offset): Change offset argument to type float.
Now matches OpenGL prototype for glPolygonOffset.
* gl-render.cc (patch_tesselator::patch_tesselator): Change constructor
variable idx to a float, from int.
* gl-render.cc (patch_tesselator::begin): Pass index directly to
set_polygon_offset.
* gl-render.cc (opengl_renderer::draw_patch): Call patch_tesselator with index
of 1.0 for filled portion of patch to push it down below outline of patch.

* patch.m: For 2-D patches, set zlim to [-1,1] so that axes 'layer' property
works.

diff --git a/libinterp/corefcn/gl-render.cc b/libinterp/corefcn/gl-render.cc
--- a/libinterp/corefcn/gl-render.cc
+++ b/libinterp/corefcn/gl-render.cc
@@ -396,17 +396,17 @@ public:
 
   vertex_data_rep *get_rep (void) const { return rep; }
 };
 
 class
 opengl_renderer::patch_tesselator : public opengl_tesselator
 {
 public:
-  patch_tesselator (opengl_renderer *r, int cmode, int lmode, int idx = 0)
+  patch_tesselator (opengl_renderer *r, int cmode, int lmode, float idx = 0.0)
     : opengl_tesselator (), renderer (r),
       color_mode (cmode), light_mode (lmode), index (idx),
       first (true), tmp_vdata ()
   { }
 
 protected:
   void begin (GLenum type)
   {
@@ -414,17 +414,17 @@ protected:
     first = true;
 
     if (color_mode == 2 || light_mode == 2)
       glShadeModel (GL_SMOOTH);
     else
       glShadeModel (GL_FLAT);
 
     if (is_filled ())
-      renderer->set_polygon_offset (true, 1+index);
+      renderer->set_polygon_offset (true, index);
 
     glBegin (type);
   }
 
   void end (void)
   {
     //printf ("patch_tesselator::end\n");
     glEnd ();
@@ -432,19 +432,18 @@ protected:
   }
 
   void vertex (void *data)
   {
     vertex_data::vertex_data_rep *v
       = reinterpret_cast<vertex_data::vertex_data_rep *> (data);
     //printf ("patch_tesselator::vertex (%g, %g, %g)\n", v->coords(0), v->coords(1), v->coords(2));
 
-    // NOTE: OpenGL can re-order vertices so "first" is basically meaningless
-    // in this callback routine.  For "flat" coloring of FaceColor the first
-    // vertex must be identified in the draw_patch routine.
+    // NOTE: OpenGL can re-order vertices.  For "flat" coloring of FaceColor
+    // the first vertex must be identified in the draw_patch routine.
 
     if (color_mode == 2 || (color_mode == 1 && ! is_filled ()))
       {
         Matrix col = v->color;
 
         if (col.numel () == 3)
           {
             glColor3dv (col.data ());
@@ -2333,21 +2332,21 @@ opengl_renderer::draw_patch (const patch
                     cb[i] = ds * fcolor(i);
                   glMaterialfv (LIGHT_MODE, GL_DIFFUSE, cb);
                 }
             }
 
           if (fl_mode > 0)
             glEnable (GL_LIGHTING);
 
-          // FIXME: use __index__ property from patch object
-          // -1.25 chosen to provide sufficient Z-offset for
-          // 'layer' property of 2-D plots and not to provoke
-          // Z-fighting with tesselator outline.
-          patch_tesselator tess (this, fc_mode, fl_mode, -1.25);
+          // NOTE: Push filled part of patch backwards to avoid Z-fighting with
+          // tesselator outline.  A value of 1.0 seems to work fine.  Value
+          // can't be too large or the patch will be pushed below the axes
+          // planes at +2.5.
+          patch_tesselator tess (this, fc_mode, fl_mode, 1.0);
 
           for (int i = 0; i < nf; i++)
             {
               if (clip_f(i))
                 continue;
 
               tess.begin_polygon (true);
               tess.begin_contour ();
@@ -2426,19 +2425,21 @@ opengl_renderer::draw_patch (const patch
             }
 
           if (el_mode > 0)
             glEnable (GL_LIGHTING);
 
           set_linestyle (props.get_linestyle (), false);
           set_linewidth (props.get_linewidth ());
 
-
-          // FIXME: use __index__ property from patch object;
-          //        should we offset patch contour as well?
+          // NOTE: patch contour cannot be offset.  Offset must occur with the
+          // filled portion of the patch above.  The tesselator uses
+          // GLU_TESS_BOUNDARY_ONLY to get the outline of the patch and OpenGL
+          // automatically sets the glType to GL_LINE_LOOP.  This primitive is
+          // not supported by glPolygonOffset which is used to do Z offsets. 
           patch_tesselator tess (this, ec_mode, el_mode);
 
           for (int i = 0; i < nf; i++)
             {
               if (clip_f(i))
                 {
                   // This is an unclosed contour. Draw it as a line.
                   bool flag = false;
@@ -2814,23 +2815,23 @@ opengl_renderer::set_font (const base_pr
   text_renderer.set_font (props.get ("fontname").string_value (),
                           props.get ("fontweight").string_value (),
                           props.get ("fontangle").string_value (),
                           props.get ("fontsize").double_value ());
 #endif
 }
 
 void
-opengl_renderer::set_polygon_offset (bool on, double offset)
+opengl_renderer::set_polygon_offset (bool on, float offset)
 {
   if (on)
     {
-      glPolygonOffset (offset, offset);
       glEnable (GL_POLYGON_OFFSET_FILL);
       glEnable (GL_POLYGON_OFFSET_LINE);
+      glPolygonOffset (offset, offset);
     }
   else
     {
       glDisable (GL_POLYGON_OFFSET_FILL);
       glDisable (GL_POLYGON_OFFSET_LINE);
     }
 }
 
diff --git a/libinterp/corefcn/gl-render.h b/libinterp/corefcn/gl-render.h
--- a/libinterp/corefcn/gl-render.h
+++ b/libinterp/corefcn/gl-render.h
@@ -88,17 +88,17 @@ protected:
   virtual void draw_image (const image::properties& props);
   virtual void draw_uipanel (const uipanel::properties& props,
                              const graphics_object& go);
 
   virtual void init_gl_context (bool enhanced, const Matrix& backgroundColor);
   virtual void setup_opengl_transformation (const axes::properties& props);
 
   virtual void set_color (const Matrix& c);
-  virtual void set_polygon_offset (bool on, double offset = 0.0);
+  virtual void set_polygon_offset (bool on, float offset = 0.0);
   virtual void set_linewidth (float w);
   virtual void set_linestyle (const std::string& s, bool stipple = false);
   virtual void set_clipbox (double x1, double x2, double y1, double y2,
                             double z1, double z2);
   virtual void set_clipping (bool on);
   virtual void set_font (const base_properties& props);
 
   virtual void init_marker (const std::string& m, double size, float width);
diff --git a/scripts/plot/draw/patch.m b/scripts/plot/draw/patch.m
--- a/scripts/plot/draw/patch.m
+++ b/scripts/plot/draw/patch.m
@@ -83,16 +83,25 @@ function h = patch (varargin)
   endif
   
   [htmp, failed] = __patch__ (hax, varargin{:});
 
   if (failed)
     print_usage ();
   endif
 
+  ## FIXME: This is a hack to get 'layer' command to work for 2D patches
+  ##        Alternative is much more complicated surgery in graphics.cc.
+  ##        of get_children_limits() for 'z' axis and 'patch' object type.
+  if (! ishold ())
+    if (isempty (get (htmp, "zdata")))
+      set (hax, "zlim", [-1 1]);
+    endif
+  endif
+
   if (nargout > 0)
     h = htmp;
   endif
 
 endfunction
 
 
 %!demo
