# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1273132176 -7200
#      Thu May 06 09:49:36 2010 +0200
# Node ID f7501986e42d347225169708652f78df9eb1fede
# Parent  ec34c7acd0576a901099a5cdc93d80a37f361e0e
make schur more Matlab compatible

diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,16 @@
+2010-05-06  Jaroslav Hajek  <highegg@gmail.com>
+
+	* dbleSCHUR.cc (SCHUR::init): Handle empty matrix case.
+	Use clear rather than resize to realloc matrix.
+	* floatSCHUR.cc (FloatSCHUR::init): Ditto.
+	* CmplxSCHUR.cc (ComplexSCHUR::init): Ditto.
+	* fCmplxSCHUR.cc (FloatComplexSCHUR::init): Ditto.
+
 2010-05-04  John W. Eaton  <jwe@octave.org>
 
 	* CollocWt.cc (diff, jcobi, dfopr): New functions, based on
 	Fortran functions in libcruft/villad.
 	(jcobi): Handle iteration failure at large N.
 	(CollocWt::init): Call them instead of Fortran code.
 	* CollocWt.h (CollocWt::initialized): Declare as bool, not int.
 	Change all uses.
diff --git a/liboctave/CmplxSCHUR.cc b/liboctave/CmplxSCHUR.cc
--- a/liboctave/CmplxSCHUR.cc
+++ b/liboctave/CmplxSCHUR.cc
@@ -65,16 +65,22 @@ ComplexSCHUR::init (const ComplexMatrix&
   octave_idx_type a_nc = a.cols ();
 
   if (a_nr != a_nc)
     {
       (*current_liboctave_error_handler)
         ("ComplexSCHUR requires square matrix");
       return -1;
     }
+  else if (a_nr == 0)
+    {
+      schur_mat.clear ();
+      unitary_mat.clear ();
+      return 0;
+    }
 
   // Workspace requirements may need to be fixed if any of the
   // following change.
 
   char jobvs;
   char sense = 'N';
   char sort = 'N';
 
@@ -99,17 +105,17 @@ ComplexSCHUR::init (const ComplexMatrix&
   octave_idx_type lwork = 8 * n;
   octave_idx_type info;
   octave_idx_type sdim;
   double rconde;
   double rcondv;
 
   schur_mat = a;
   if (calc_unitary)
-    unitary_mat.resize (n, n);
+    unitary_mat.clear (n, n);
 
   Complex *s = schur_mat.fortran_vec ();
   Complex *q = unitary_mat.fortran_vec ();
 
   Array<double> rwork (n, 1);
   double *prwork = rwork.fortran_vec ();
 
   Array<Complex> w (n, 1);
diff --git a/liboctave/dbleSCHUR.cc b/liboctave/dbleSCHUR.cc
--- a/liboctave/dbleSCHUR.cc
+++ b/liboctave/dbleSCHUR.cc
@@ -65,16 +65,22 @@ SCHUR::init (const Matrix& a, const std:
   octave_idx_type a_nr = a.rows ();
   octave_idx_type a_nc = a.cols ();
 
   if (a_nr != a_nc)
     {
       (*current_liboctave_error_handler) ("SCHUR requires square matrix");
       return -1;
     }
+  else if (a_nr == 0)
+    {
+      schur_mat.clear ();
+      unitary_mat.clear ();
+      return 0;
+    }
 
   // Workspace requirements may need to be fixed if any of the
   // following change.
 
   char jobvs;
   char sense = 'N';
   char sort = 'N';
 
@@ -101,17 +107,17 @@ SCHUR::init (const Matrix& a, const std:
   octave_idx_type info;
   octave_idx_type sdim;
   double rconde;
   double rcondv;
 
   schur_mat = a;
 
   if (calc_unitary)
-    unitary_mat.resize (n, n);
+    unitary_mat.clear (n, n);
 
   double *s = schur_mat.fortran_vec ();
   double *q = unitary_mat.fortran_vec ();
 
   Array<double> wr (n, 1);
   double *pwr = wr.fortran_vec ();
 
   Array<double> wi (n, 1);
diff --git a/liboctave/fCmplxSCHUR.cc b/liboctave/fCmplxSCHUR.cc
--- a/liboctave/fCmplxSCHUR.cc
+++ b/liboctave/fCmplxSCHUR.cc
@@ -65,16 +65,22 @@ FloatComplexSCHUR::init (const FloatComp
   octave_idx_type a_nc = a.cols ();
 
   if (a_nr != a_nc)
     {
       (*current_liboctave_error_handler)
         ("FloatComplexSCHUR requires square matrix");
       return -1;
     }
+  else if (a_nr == 0)
+    {
+      schur_mat.clear ();
+      unitary_mat.clear ();
+      return 0;
+    }
 
   // Workspace requirements may need to be fixed if any of the
   // following change.
 
   char jobvs;
   char sense = 'N';
   char sort = 'N';
 
@@ -99,17 +105,17 @@ FloatComplexSCHUR::init (const FloatComp
   octave_idx_type lwork = 8 * n;
   octave_idx_type info;
   octave_idx_type sdim;
   float rconde;
   float rcondv;
 
   schur_mat = a;
   if (calc_unitary)
-    unitary_mat.resize (n, n);
+    unitary_mat.clear (n, n);
 
   FloatComplex *s = schur_mat.fortran_vec ();
   FloatComplex *q = unitary_mat.fortran_vec ();
 
   Array<float> rwork (n, 1);
   float *prwork = rwork.fortran_vec ();
 
   Array<FloatComplex> w (n, 1);
diff --git a/liboctave/floatSCHUR.cc b/liboctave/floatSCHUR.cc
--- a/liboctave/floatSCHUR.cc
+++ b/liboctave/floatSCHUR.cc
@@ -65,16 +65,22 @@ FloatSCHUR::init (const FloatMatrix& a, 
   octave_idx_type a_nr = a.rows ();
   octave_idx_type a_nc = a.cols ();
 
   if (a_nr != a_nc)
     {
       (*current_liboctave_error_handler) ("FloatSCHUR requires square matrix");
       return -1;
     }
+  else if (a_nr == 0)
+    {
+      schur_mat.clear ();
+      unitary_mat.clear ();
+      return 0;
+    }
 
   // Workspace requirements may need to be fixed if any of the
   // following change.
 
   char jobvs;
   char sense = 'N';
   char sort = 'N';
 
@@ -101,17 +107,17 @@ FloatSCHUR::init (const FloatMatrix& a, 
   octave_idx_type info;
   octave_idx_type sdim;
   float rconde;
   float rcondv;
 
   schur_mat = a;
 
   if (calc_unitary)
-    unitary_mat.resize (n, n);
+    unitary_mat.clear (n, n);
 
   float *s = schur_mat.fortran_vec ();
   float *q = unitary_mat.fortran_vec ();
 
   Array<float> wr (n, 1);
   float *pwr = wr.fortran_vec ();
 
   Array<float> wi (n, 1);
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,14 @@
+2010-05-06  Jaroslav Hajek  <highegg@gmail.com>
+
+	* DLD-FUNCTIONS/schur.cc (Fschur): Recognize "complex" option for
+	Matlab compatibility. Simplify argument handling and improve error
+	messages.
+
 2010-05-05  John W. Eaton  <jwe@octave.org>
 
 	* utils.cc (reset_warning_state): New function.
 	(Fisindex): Temporarily set warning state for
 	Octave:allow-noninteger-ranges-as-indices to "error".
 	* error.cc (set_warning_state): New function.
 	(initialize_default_warning_state): Set default warning state
 	for Octave:allow-noninteger-ranges-as-indices to "error".
diff --git a/src/DLD-FUNCTIONS/schur.cc b/src/DLD-FUNCTIONS/schur.cc
--- a/src/DLD-FUNCTIONS/schur.cc
+++ b/src/DLD-FUNCTIONS/schur.cc
@@ -36,16 +36,17 @@ along with Octave; see the file COPYING.
 #include "error.h"
 #include "gripes.h"
 #include "oct-obj.h"
 #include "utils.h"
 
 DEFUN_DLD (schur, args, nargout,
   "-*- texinfo -*-\n\
 @deftypefn {Loadable Function} {@var{s} =} schur (@var{a})\n\
+@deftypefnx {Loadable Function} {@var{s} =} schur (@var{a}, \"complex\")\n\
 @deftypefnx {Loadable Function} {[@var{u}, @var{s}] =} schur (@var{a}, @var{opt})\n\
 @cindex Schur decomposition\n\
 The Schur decomposition is used to compute eigenvalues of a\n\
 square matrix, and has applications in the solution of algebraic\n\
 Riccati equations in control (see @code{are} and @code{dare}).\n\
 @code{schur} always returns\n\
 @tex\n\
 $S = U^T A U$\n\
@@ -143,16 +144,18 @@ appropriate) are the eigenvalues of\n\
 and\n\
 @tex\n\
 $S$.\n\
 @end tex\n\
 @ifnottex\n\
 @code{s}.\n\
 @end ifnottex\n\
 \n\
+A complex decomposition may be forced by passing \"complex\" as @var{opt}.\n\
+\n\
 The eigenvalues are optionally ordered along the diagonal according to\n\
 the value of @code{opt}.  @code{opt = \"a\"} indicates that all\n\
 eigenvalues with negative real parts should be moved to the leading\n\
 block of\n\
 @tex\n\
 $S$\n\
 @end tex\n\
 @ifnottex\n\
@@ -224,45 +227,50 @@ leading eigenvalues of\n\
 
       if (error_state)
         {
           error ("schur: expecting string as second argument");
           return retval;
         }
     }
 
-  char ord_char = ord.empty () ? 'U' : ord[0];
+  bool force_complex = false;
 
-  if (ord_char != 'U' && ord_char != 'A' && ord_char != 'D'
-      && ord_char != 'u' && ord_char != 'a' && ord_char != 'd')
+  if (ord == "complex")
+    {
+      force_complex = true;
+      ord = std::string ();
+    }
+  else
     {
-      warning ("schur: incorrect ordered schur argument `%c'",
-               ord.c_str ());
-      return retval;
+      char ord_char = ord.empty () ? 'U' : ord[0];
+
+      if (ord_char != 'U' && ord_char != 'A' && ord_char != 'D'
+          && ord_char != 'u' && ord_char != 'a' && ord_char != 'd')
+        {
+          warning ("schur: incorrect ordered schur argument `%c'",
+                   ord.c_str ());
+          return retval;
+        }
     }
 
   octave_idx_type nr = arg.rows ();
   octave_idx_type nc = arg.columns ();
 
-  int arg_is_empty = empty_arg ("schur", nr, nc);
-
-  if (arg_is_empty < 0)
-    return retval;
-  else if (arg_is_empty > 0)
-    return octave_value_list (2, Matrix ());
-
   if (nr != nc)
     {
       gripe_square_matrix_required ("schur");
       return retval;
     }
 
-  if (arg.is_single_type ())
+  if (! arg.is_numeric_type ())
+    gripe_wrong_type_arg ("schur", arg);
+  else if (arg.is_single_type ())
     {
-      if (arg.is_real_type ())
+      if (! force_complex && arg.is_real_type ())
         {
           FloatMatrix tmp = arg.float_matrix_value ();
 
           if (! error_state)
             {
               if (nargout == 0 || nargout == 1)
                 {
                   FloatSCHUR result (tmp, ord, false);
@@ -271,17 +279,17 @@ leading eigenvalues of\n\
               else
                 {
                   FloatSCHUR result (tmp, ord, true);
                   retval(1) = result.schur_matrix ();
                   retval(0) = result.unitary_matrix ();
                 }
             }
         }
-      else if (arg.is_complex_type ())
+      else
         {
           FloatComplexMatrix ctmp = arg.float_complex_matrix_value ();
 
           if (! error_state)
             {
  
               if (nargout == 0 || nargout == 1)
                 {
@@ -294,17 +302,17 @@ leading eigenvalues of\n\
                   retval(1) = result.schur_matrix ();
                   retval(0) = result.unitary_matrix ();
                 }
             }
         }
     }
   else
     {
-      if (arg.is_real_type ())
+      if (! force_complex && arg.is_real_type ())
         {
           Matrix tmp = arg.matrix_value ();
 
           if (! error_state)
             {
               if (nargout == 0 || nargout == 1)
                 {
                   SCHUR result (tmp, ord, false);
@@ -313,17 +321,17 @@ leading eigenvalues of\n\
               else
                 {
                   SCHUR result (tmp, ord, true);
                   retval(1) = result.schur_matrix ();
                   retval(0) = result.unitary_matrix ();
                 }
             }
         }
-      else if (arg.is_complex_type ())
+      else
         {
           ComplexMatrix ctmp = arg.complex_matrix_value ();
 
           if (! error_state)
             {
  
               if (nargout == 0 || nargout == 1)
                 {
@@ -333,20 +341,16 @@ leading eigenvalues of\n\
               else
                 {
                   ComplexSCHUR result (ctmp, ord, true);
                   retval(1) = result.schur_matrix ();
                   retval(0) = result.unitary_matrix ();
                 }
             }
         }
-      else
-        {
-          gripe_wrong_type_arg ("schur", arg);
-        }
     }
  
   return retval; 
 }
 
 /*
 
 %!test
