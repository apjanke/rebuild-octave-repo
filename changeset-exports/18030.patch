# HG changeset patch
# User Rik <rik@octave.org>
# Date 1385686979 28800
#      Thu Nov 28 17:02:59 2013 -0800
# Branch stable
# Node ID f0427ca399ccebe1d1fc21169c715d8fa6202641
# Parent  2ef2043a0601f7c13db4b701687d0a5a915a9361
configure.ac: Remove unused JAVA_HOME_NATIVE variable.

* configure.ac: Remove unused JAVA_HOME_NATIVE variable.

diff --git a/configure.ac b/configure.ac
--- a/configure.ac
+++ b/configure.ac
@@ -2471,32 +2471,26 @@ do
 
   if test -z "$JAVA_HOME"; then
     ## Find JAVA_HOME for JRE by running java and querying properties.
     JAVA_TMP_HOME=`"$JAVA" -classpath ${srcdir}/build-aux OctJavaQry JAVA_HOME`
     ## Strip directory back to top-level installation dir (JAVA_HOME for JDK).
     JAVA_HOME=`echo $JAVA_TMP_HOME | $SED -e 's|[[/\\]]bin[[/\\]]\?$||' | $SED -e 's|[[/\\]]jre[[/\\]]\?$||'`
   fi
 
-  case $host_os in
+  case $build_os in
     mingw* | msdosmsvc)
       ## Under Win32 platform, we want JAVA_HOME to be in MSYS format, that is
       ## without colon and backslashes, as it is also used as path separator.
       ## Use quoted paths as Java may be installed in a path with whitespaces
       ## (e.g. C:\Program Files\Java\...).
       if test -n "$JAVA_HOME"; then
         JAVA_HOME=`cd "$JAVA_HOME" && pwd`
-        ## Maybe this will be useful in the future, as native Java won't
-        ## understand MSYS paths.
-        JAVA_HOME_NATIVE=`cd "$JAVA_HOME" && pwd -W`
       fi
     ;;
-    *)
-      JAVA_HOME_NATIVE="$JAVA_HOME"
-    ;;
   esac
 
   ## Amend search path for JAVAC and JAR.
   if test -z "$JAVA_HOME"; then
     JAVA_PATH="$PATH"
   else
     JAVA_PATH="${JAVA_HOME}$PATH_SEPARATOR${JAVA_HOME}/bin$PATH_SEPARATOR${JAVA_HOME}/../bin$PATH_SEPARATOR${PATH}"
   fi
