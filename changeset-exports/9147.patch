# HG changeset patch
# User rtshort@bristlecone.phaselocked.com
# Date 1240425206 14400
#      Wed Apr 22 14:33:26 2009 -0400
# Node ID 5579998f8acfa700f062269e75ec21106192d488
# Parent  a48c500e48e1c933e652aafe241b5e429db10c00
Update to OOP facilities.
* scripts/general/isa.m: Fixed isa so that multiple layers of
  class hierarchy are reported correctly.
* src/variables.cc: Make exist('obj') for objects report correctly.
* src/ov-base.h: Added an assign method so ov-class is able to
  assign structure elements properly.
* src/ov-class.h: Assign map elements.
* src/ov-class.cc:
  - Made sure that there are no duplicate classes in parent tree.
  - Simplified search algorithm for parent classes.
  - Fixed subsasgn so cls = method(cls,value) works when properly
    when method is a parent-class method.
  - Added __isa_parent__ so isa works correctly.

diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,8 +1,12 @@
+2009-04-22  Robert T. Short  <octave@phaselockedsystems.com>
+
+	* general/isa.m: Correctly report multiple layers of class hierarchy.
+
 2009-04-20  John W. Eaton  <jwe@octave.org>
 
 	* special-matrix/vander.m: Update tests.
 
 2009-04-20  Jaroslav Hajek  <highegg@gmail.com>
 
 	* special-matrix/vander.m: Allow second argument.
 	* special-matrix/polyfit.m: Simplify.
diff --git a/scripts/general/isa.m b/scripts/general/isa.m
--- a/scripts/general/isa.m
+++ b/scripts/general/isa.m
@@ -39,20 +39,17 @@ function retval = isa (x, cname)
   if (strcmp (cname, "float"))
     retval = any (strcmp (class (x), float_classes));
   elseif (strcmp (cname, "numeric"))
     retval = any (strcmp (class (x), fnum_classes));
   else
     class_of_x = class (x);
     retval = strcmp (class_of_x, cname);
     if (! retval && isobject (x))
-      parent_classes_of_x = __parent_classes__ (x);
-      if (! isempty (parent_classes_of_x))
-	retval = any (strcmp (parent_classes_of_x, cname));
-      endif
+      retval = __isa_parent__ (x, cname);
     endif
   endif
 
 endfunction
 
 %!assert (isa ("char", "float"), false)
 %!assert (isa (double (13), "float"), true)
 %!assert (isa (single (13), "float"), true)
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,21 @@
+2009-04-22  Robert T. Short  <octave@phaselockedsystems.com>
+
+	* variables.cc (symbol_exist): Also return 1 for objects.
+	* ov-base.h (octave_base_value::assign): New virtual function.
+	* ov-class.h (octave_class::assign): New function.
+	* ov-class.cc (octave_class::find_parent_class): Simplify.
+	(octave_class::octave_class): Don't allow duplicate parent classes.
+	(octave_class::subsasgn): Allow cls = method (cls, value) to work
+	properly when method is a parent-class method.
+	(get_method_class): New static function.
+	(octave_class:subsasgn, octave_class::dotref): Use it.
+	(F__isa_parent__): New function.
+
 2009-04-22  Jaroslav Hajek  <highegg@gmail.com>
 
 	* ov-range.cc (octave_range::char_array_value): New virtual function
 	override.
 	* ov-range.h: Declare it.
 
 2009-04-22  Jaroslav Hajek  <highegg@gmail.com>
 
diff --git a/src/ov-base.h b/src/ov-base.h
--- a/src/ov-base.h
+++ b/src/ov-base.h
@@ -166,16 +166,18 @@ public:
            bool auto_add);
 
   virtual octave_value
   do_index_op (const octave_value_list& idx, bool resize_ok = false);
 
   virtual octave_value_list
   do_multi_index_op (int nargout, const octave_value_list& idx);
 
+  virtual void assign (const std::string&, const octave_value&) { }
+
   virtual octave_value
   subsasgn (const std::string& type,
 	    const std::list<octave_value_list>& idx,
 	    const octave_value& rhs);
 
   virtual idx_vector index_vector (void) const;
 
   virtual dim_vector dims (void) const { return dim_vector (-1, -1); }
diff --git a/src/ov-class.cc b/src/ov-class.cc
--- a/src/ov-class.cc
+++ b/src/ov-class.cc
@@ -73,91 +73,85 @@ octave_class::octave_class (const Octave
       octave_value parent = parents(idx);
 
       if (! parent.is_object ())
 	error ("parents must be objects");
       else
 	{
 	  std::string cnm = parent.class_name ();
 
-	  parent_list.push_back (cnm);
+	  if (find_parent_class (cnm))
+	    error ("duplicate class in parent tree");
+	  else
+	    {
+	      parent_list.push_back (cnm);
 
-	  map.assign (cnm, parent);
+	      map.assign (cnm, parent);
+	    }
 	}
     }
 
-  load_path::add_to_parent_map (id, parent_list);
+  if (! error_state)
+    load_path::add_to_parent_map (id, parent_list);
 }
 
 octave_base_value *
 octave_class::find_parent_class (const std::string& parent_class_name)
 {
   octave_base_value* retval = 0;
-  std::string dbg_clsnm = class_name ();
 
   if (parent_class_name == class_name ())
     retval = this;
   else
     {
-      // Search in the list of immediate parents first, then in the
-      // ancestor tree.
-
-      std::list<std::string>::iterator 
-	p = find (parent_list.begin (), parent_list.end (), parent_class_name);
-
-      if (p != parent_list.end ())
+      for (std::list<std::string>::iterator pit = parent_list.begin ();
+	   pit != parent_list.end ();
+	   pit++)
 	{
-	  Octave_map::const_iterator pmap = map.seek (parent_class_name);
+	  Octave_map::const_iterator smap = map.seek (*pit);
 
-	  if (pmap != map.end ())
-	    {
-	      const Cell& tmp = pmap->second;
-
-	      octave_value vtmp = tmp(0);
+	  const Cell& tmp = smap->second;
 
-	      retval = vtmp.internal_rep ();
-	    }
-	}
-      else
-	{
-	  for (std::list<std::string>::iterator pit = parent_list.begin ();
-	       pit != parent_list.end ();
-	       pit++)
-	    {
-	      Octave_map::const_iterator smap = map.seek (*pit);
+	  octave_value vtmp = tmp(0);
+
+	  octave_base_value *obvp = vtmp.internal_rep ();
 
-	      const Cell& tmp = smap->second;
-
-	      octave_value vtmp = tmp(0);
-
-	      octave_base_value *obvp = vtmp.internal_rep ();
+	  retval = obvp->find_parent_class (parent_class_name);
 
-	      retval = obvp->find_parent_class (parent_class_name);
-
-	      if (retval)
-		break;
-	    }
+	  if (retval)
+	    break;
 	}
     }
 
   return retval;
 }
 
+static std::string
+get_current_method_class (void)
+{
+  // FIXME -- is there a better way to do this?
+  octave_function *fcn = octave_call_stack::current ();
+
+  std::string my_dir = fcn->dir_name ();
+
+  size_t ipos = my_dir.find_last_of ("@");
+
+  assert (ipos != std::string::npos);
+
+  return my_dir.substr (ipos+1);
+}
+
 Cell
 octave_class::dotref (const octave_value_list& idx)
 {
   Cell retval;
 
   assert (idx.length () == 1);
 
-  // FIXME -- Is there a "proper" way to do this?
-  octave_function* fcn = octave_call_stack::current ();
-  std::string my_dir = fcn->dir_name ();
-  int ipos = my_dir.find_last_of ("@");
-  std::string method_class = my_dir.substr (ipos+1);
+  std::string method_class = get_current_method_class ();
 
   // Find the class in which this method resides before attempting to access
   // the requested field.
 
   octave_base_value *obvp = find_parent_class (method_class);
 
   Octave_map my_map;
 
@@ -623,25 +617,37 @@ octave_class::subsasgn (const std::strin
 	case '.':
 	  {
 	    octave_value_list key_idx = idx.front ();
 
 	    assert (key_idx.length () == 1);
 
 	    std::string key = key_idx(0).string_value ();
 
-	    map.assign (key, t_rhs);
+	    // Find the class in which this method resides before 
+	    // attempting to access the requested field.
+
+	    std::string method_class = get_current_method_class ();
+
+	    octave_base_value *obvp = find_parent_class (method_class);
 
-	    if (! error_state)
+	    if (obvp)
 	      {
-		count++;
-		retval = octave_value (this);
+		obvp->assign (key, t_rhs);
+
+		if (! error_state)
+		  {
+		    count++;
+		    retval = octave_value (this);
+		  }
+		else
+		  gripe_failed_assignment ();
 	      }
 	    else
-	      gripe_failed_assignment ();
+	      error ("malformed class");
 	  }
 	  break;
 
 	case '{':
 	  gripe_invalid_index_type (type_name (), type[0]);
 	  break;
 
 	default:
@@ -1308,16 +1314,43 @@ derived.\n\
 	}
       else
 	error ("class: expecting structure as first argument");
     }
 
   return retval;
 }
 
+DEFUN (__isa_parent__, args, ,
+  "-*- texinfo -*-\n\
+@deftypefn {Built-in Function} {} __isa_parent__ (@var{class}, @var{name})\n\
+Undocumented internal function.\n\
+@end deftypefn")
+{
+  octave_value retval = false;
+
+  if (args.length () == 2)
+    {
+      octave_value cls = args(0);
+      octave_value nm = args(1);
+
+      if (! error_state)
+	{
+	  if (cls.find_parent_class (nm.string_value ()))
+	    retval = true;
+	}
+      else
+	error ("__isa_parent__: expecting arguments to be character strings");
+    }
+  else
+    print_usage ();
+
+  return retval;
+}
+
 DEFUN (__parent_classes__, args, ,
   "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} __parent_classes__ (@var{x})\n\
 Undocumented internal function.\n\
 @end deftypefn")
 {
   octave_value retval = Cell ();
 
diff --git a/src/ov-class.h b/src/ov-class.h
--- a/src/ov-class.h
+++ b/src/ov-class.h
@@ -81,16 +81,19 @@ public:
 
   octave_value_list subsref (const std::string& type,
 			     const std::list<octave_value_list>& idx,
 			     int nargout);
 
   static octave_value numeric_conv (const Cell& val,
 				    const std::string& type);
 
+  void assign(const std::string& k, const octave_value& rhs)
+  { map.assign (k, rhs); };
+
   octave_value subsasgn (const std::string& type,
 			 const std::list<octave_value_list>& idx,
 			 const octave_value& rhs);
 
   idx_vector index_vector (void) const;
 
   dim_vector dims (void) const { return map.dims (); }
 
diff --git a/src/variables.cc b/src/variables.cc
--- a/src/variables.cc
+++ b/src/variables.cc
@@ -403,17 +403,17 @@ symbol_exist (const std::string& name, c
   if (val.is_defined ())
     {
       bool not_a_struct = struct_elts.empty ();
       bool var_ok = not_a_struct /* || val.is_map_element (struct_elts) */;
 
       if (! retval
 	  && var_ok
 	  && (type == "any" || type == "var")
-	  && val.is_constant ())
+	  && (val.is_constant () || val.is_object ()))
 	{
 	  retval = 1;
 	}
 
       if (! retval
 	  && (type == "any" || type == "builtin"))
 	{
 	  if (not_a_struct && val.is_builtin_function ())
