# HG changeset patch
# User jwe
# Date 822368054 0
#      Tue Jan 23 03:34:14 1996 +0000
# Node ID e8e76be43e79e5c149ddc6f3af74e55572b3db90
# Parent  a51354c34beaacf8883678f5e6686cb7c92a47dd
[project @ 1996-01-23 03:33:34 by jwe]

diff --git a/src/dirfns.cc b/src/dirfns.cc
--- a/src/dirfns.cc
+++ b/src/dirfns.cc
@@ -48,24 +48,24 @@ Free Software Foundation, Inc.
 
 #include <strstream.h>
 
 #include "str-vec.h"
 
 #include "defun.h"
 #include "dirfns.h"
 #include "error.h"
+#include "file-ops.h"
 #include "gripes.h"
 #include "help.h"
 #include "oct-obj.h"
 #include "pager.h"
 #include "pathlen.h"
 #include "procstream.h"
 #include "pt-plot.h"
-#include "statdefs.h"
 #include "sysdep.h"
 #include "sysdir.h"
 #include "toplev.h"
 #include "unwind-prot.h"
 #include "utils.h"
 #include "variables.h"
 
 // Non-zero means follow symbolic links that point to directories just
@@ -539,19 +539,17 @@ otherwise prints an error message.")
   if (args.length () == 1)
     {
       string dirname = args(0).string_value ();
 
       if (error_state)
 	gripe_wrong_type_arg ("mkdir", args(0));
       else
 	{
-	  string tmp = oct_tilde_expand (dirname);
-
-	  int mkdir_retval = mkdir (tmp.c_str (), 0777);
+	  int mkdir_retval = xmkdir (oct_tilde_expand (dirname), 0777);
 
 	  if (mkdir_retval < 0)
 	    {
 	      status = -1;
 	      error ("%s", strerror (errno));
 	    }
 	}
     }
@@ -577,19 +575,17 @@ otherwise prints an error message.")
   if (args.length () == 1)
     {
       string dirname = args(0).string_value ();
 
       if (error_state)
 	gripe_wrong_type_arg ("rmdir", args(0));
       else
 	{
-	  string tmp = oct_tilde_expand (dirname);
-
-	  int rmdir_retval = rmdir (tmp.c_str ());
+	  int rmdir_retval = xrmdir (oct_tilde_expand (dirname));
 
 	  if (rmdir_retval < 0)
 	    {
 	      status = -1;
 	      error ("%s", strerror (errno));
 	    }
 	}
     }
@@ -619,17 +615,17 @@ otherwise prints an error message and re
       if (error_state)
 	gripe_wrong_type_arg ("rename", args(0));
       else
 	{
 	  string to = args(1).string_value ();
 
 	  if (error_state)
 	    gripe_wrong_type_arg ("rename", args(1));
-	  else if (rename (from.c_str (), to.c_str ()) < 0)
+	  else if (xrename (from, to) < 0)
 	    {
 	      status = -1;
 	      error ("%s", strerror (errno));
 	    }
 	}
     }
   else
     print_usage ("rename");
diff --git a/src/file-io.cc b/src/file-io.cc
--- a/src/file-io.cc
+++ b/src/file-io.cc
@@ -54,31 +54,29 @@ Software Foundation, 59 Temple Place - S
 #include <SLStack.h>
 
 #include "dMatrix.h"
 
 #include "defun.h"
 #include "error.h"
 #include "file-info.h"
 #include "file-io.h"
+#include "file-ops.h"
 #include "help.h"
 #include "input.h"
 #include "mappers.h"
 #include "oct-map.h"
 #include "oct-hist.h"
 #include "oct-obj.h"
 #include "pager.h"
-#include "statdefs.h"
 #include "sysdep.h"
 #include "syswait.h"
 #include "utils.h"
 #include "variables.h"
 
-extern "C" void mode_string ();
-
 // keeps a count of args sent to printf or scanf
 static int fmt_arg_count = 0;
 
 // double linked list containing relevant information about open files
 static DLList <file_info> file_list;
 
 // stack for next available file number
 static SLStack <int> next_available_file_number;
@@ -190,30 +188,32 @@ file_io_get_file (const tree_constant& a
   Pix p = return_valid_file (arg);
 
   if (! p)
     {
       if (arg.is_string ())
 	{
 	  string name = arg.string_value ();
 
-	  struct stat buffer;
-	  int status = stat (name.c_str (), &buffer);
-
-	  if (status == 0)
+	  file_stat fs (name);
+
+	  if (fs)
 	    {
-	      if ((buffer.st_mode & S_IFREG) == S_IFREG)
+	      if (fs.is_reg ())
 		p = fopen_file_for_user (name, mode, warn_for);
 	      else
 		error ("%s: invalid file type", warn_for);
 	    }
-	  else if (status < 0 && *mode != 'r')
-	    p = fopen_file_for_user (name, mode, warn_for);
 	  else
-	    error ("%s: can't stat file `%s'", warn_for, name.c_str ());
+	    {
+	      if (*mode != 'r')
+		p = fopen_file_for_user (name, mode, warn_for);
+	      else
+		error ("%s: can't stat file `%s'", warn_for, name.c_str ());
+	    }
 	}
       else
 	error ("%s: invalid file specifier", warn_for);
     }
 
   return p;
 }
 
@@ -484,19 +484,19 @@ fopen_internal (const Octave_object& arg
   string mode = args(1).string_value ();
 
   if (! valid_mode (mode))
     {
       error ("fopen: invalid mode");
       return retval;
     }
 
-  struct stat buffer;
-  if (stat (name.c_str (), &buffer) == 0
-      && (buffer.st_mode & S_IFDIR) == S_IFDIR)
+  file_stat fs (name);
+
+  if (fs && fs.is_dir ())
     {
       error ("fopen: can't open directory");
       return retval;
     }
 
   FILE *file_ptr = fopen (name.c_str (), mode.c_str ());
 
   if (! file_ptr)
@@ -1955,19 +1955,19 @@ popen_internal (const Octave_object& arg
   string mode = args(1).string_value ();
 
   if (mode.length () > 1 || (mode[0] != 'w' && mode[0] != 'r'))
     {
       error ("popen: invalid mode, must be either \"r\" or \"w\".");
       return retval;
     }
 
-  struct stat buffer;
-  if (stat (name.c_str (), &buffer) == 0
-      && (buffer.st_mode & S_IFDIR) == S_IFDIR)
+  file_stat fs (name);
+
+  if (fs && fs.is_dir ())
     {
       error ("popen: can't open directory");
       return retval;
     }
 
   FILE *file_ptr = popen (name.c_str (), mode.c_str ());
 
   if (! file_ptr)
@@ -2340,17 +2340,17 @@ mkfifo_internal (const Octave_object& ar
   if (! args(1).is_scalar_type ())
     {
       error ("mkfifo:  MODE must be an integer");
       return retval;
     }
 
   long mode = (long) args(1).double_value ();
 
-  retval (0) = (double) mkfifo (name.c_str (), mode);
+  retval (0) = (double) xmkfifo (name, mode);
 
   return retval;
 }
 
 DEFUN ("mkfifo", Fmkfifo, Smkfifo, 10,
   "STATUS = mkfifo (NAME, MODE)\n\
 \n\
   Create a FIFO special file named NAME with file mode MODE\n\
@@ -2409,42 +2409,38 @@ DEFUN ("unlink", Funlink, Sunlink, 10,
     print_usage ("unlink");
   else
     retval = unlink_internal (args);
 
   return retval;
 }
 
 static Octave_map
-mk_stat_map (struct stat& st)
+mk_stat_map (const file_stat& fs)
 {
   Octave_map m;
 
-  char mode_as_string[11];
-  mode_string (st.st_mode, mode_as_string);
-  mode_as_string[10] = '\0';
-
-  m["dev"] = (double) st.st_dev;
-  m["ino"] = (double) st.st_ino;
-  m["modestr"] = mode_as_string;
-  m["nlink"] = (double) st.st_nlink;
-  m["uid"] = (double) st.st_uid;
-  m["gid"] = (double) st.st_gid;
+  m["dev"] = (double) fs.dev ();
+  m["ino"] = (double) fs.ino ();
+  m["modestr"] = fs.mode_as_string ();
+  m["nlink"] = (double) fs.nlink ();
+  m["uid"] = (double) fs.uid ();
+  m["gid"] = (double) fs.gid ();
 #if defined (HAVE_ST_RDEV)
-  m["rdev"] = (double) st.st_rdev;
+  m["rdev"] = (double) fs.rdev ();
 #endif
-  m["size"] = (double) st.st_size;
-  m["atime"] = (double) st.st_atime;
-  m["mtime"] = (double) st.st_mtime;
-  m["ctime"] = (double) st.st_ctime;
+  m["size"] = (double) fs.size ();
+  m["atime"] = (double) fs.atime ();
+  m["mtime"] = (double) fs.mtime ();
+  m["ctime"] = (double) fs.ctime ();
 #if defined (HAVE_ST_BLKSIZE)
-  m["blksize"] = (double) st.st_blksize;
+  m["blksize"] = (double) fs.blksize ();
 #endif
 #if defined (HAVE_ST_BLOCKS)
-  m["blocks"] = (double) st.st_blocks;
+  m["blocks"] = (double) fs.blocks ();
 #endif
 
   return m;
 }
 
 DEFUN ("stat", Fstat, Sstat, 10,
   "stat (NAME)\n\
 \n\
@@ -2470,22 +2466,22 @@ DEFUN ("stat", Fstat, Sstat, 10,
   Octave_object retval;
 
   if (args.length () == 1)
     {
       string fname = oct_tilde_expand (args(0).string_value ());
 
       if (! error_state)
 	{
-	  struct stat buf;
-
-	  if (stat (fname.c_str (), &buf) < 0)
+	  file_stat fs (fname);
+
+	  if (fs)
+	    retval = tree_constant (mk_stat_map (fs));
+	  else
 	    retval = -1.0;
-	  else
-	    retval = tree_constant (mk_stat_map (buf));
 	}
     }
   else
     print_usage ("stat");
 
   return retval;
 }
 
@@ -2498,22 +2494,22 @@ DEFUN ("lstat", Flstat, Slstat, 10,
   Octave_object retval;
 
   if (args.length () == 1)
     {
       string fname = oct_tilde_expand (args(0).string_value ());
 
       if (! error_state)
 	{
-	  struct stat buf;
-
-	  if (lstat (fname.c_str (), &buf) < 0)
+	  file_stat fs (fname);
+
+	  if (fs)
+	    retval = tree_constant (mk_stat_map (fs));
+	  else
 	    retval = -1.0;
-	  else
-	    retval = tree_constant (mk_stat_map (buf));
 	}
     }
   else
     print_usage ("stat");
 
   return retval;
 }
 
@@ -2577,19 +2573,17 @@ printed.")
 	      status = -1;
 	      error ("umask: MASK must be a positive integer value");
 	    }
 	  else
 	    {
 	      int oct_mask = convert (mask, 8, 10);
 
 	      if (! error_state)
-#if defined (HAVE_UMASK)
-		status = convert (umask (oct_mask), 10, 8);
-#endif
+		status = convert (xumask (oct_mask), 10, 8);
 	    }
 	}
     }
   else
     print_usage ("umask");
 
   if (status >= 0)
     retval(0) = (double) status;
diff --git a/src/oct-hist.cc b/src/oct-hist.cc
--- a/src/oct-hist.cc
+++ b/src/oct-hist.cc
@@ -49,22 +49,22 @@ Software Foundation, Inc.
 #include <fcntl.h>
 
 #include <readline/history.h>
 
 #include "str-vec.h"
 
 #include "defun.h"
 #include "error.h"
+#include "file-ops.h"
 #include "input.h"
 #include "oct-hist.h"
 #include "oct-obj.h"
 #include "pager.h"
 #include "sighandlers.h"
-#include "statdefs.h"
 #include "sysdep.h"
 #include "toplev.h"
 #include "unwind-prot.h"
 #include "user-prefs.h"
 #include "utils.h"
 
 // Nonzero means input is coming from temporary history file.
 int input_from_tmp_history_file = 0;
@@ -190,19 +190,19 @@ do_history (int argc, const string_vecto
 	    case 'a':		// Append `new' lines to file.
 	      {
 		if (history_lines_this_session)
 		  {
 		    if (history_lines_this_session < where_history ())
 		      {
 			// Create file if it doesn't already exist.
 
-			struct stat buf;
+			file_stat fs (file);
 
-			if (stat (file.c_str (), &buf) == -1)
+			if (! fs)
 			  {
 			    int tem;
 
 			    tem = open (file.c_str (), O_CREAT, 0666);
 			    close (tem);
 			  }
 
 			result
diff --git a/src/octave.cc b/src/octave.cc
--- a/src/octave.cc
+++ b/src/octave.cc
@@ -50,27 +50,27 @@ Software Foundation, 59 Temple Place - S
 #include "lo-error.h"
 
 #include "builtins.h"
 #include "defaults.h"
 #include "defun.h"
 #include "dynamic-ld.h"
 #include "error.h"
 #include "file-io.h"
+#include "file-ops.h"
 #include "help.h"
 #include "input.h"
 #include "lex.h"
 #include "oct-hist.h"
 #include "toplev.h"
 #include "pager.h"
 #include "parse.h"
 #include "pathsearch.h"
 #include "procstream.h"
 #include "sighandlers.h"
-#include "statdefs.h"
 #include "sysdep.h"
 #include "pt-const.h"
 #include "pt-misc.h"
 #include "pt-plot.h"
 #include "unwind-prot.h"
 #include "user-prefs.h"
 #include "utils.h"
 #include "variables.h"
@@ -236,24 +236,25 @@ execute_startup_files (void)
   if (! home_directory.empty ())
     {
       home_rc = home_directory;
       home_rc.append ("/.octaverc");
       parse_and_execute (home_rc, 0, verbose);
 
       // Names alone are not enough.
 
-      struct stat home_rc_statbuf;
-      stat (home_rc.c_str (), &home_rc_statbuf);
+      file_stat fs_home_rc (home_rc);
 
-      struct stat dot_rc_statbuf;
-      stat ("./.octaverc", &dot_rc_statbuf);
+      if (fs_home_rc)
+	{
+	  file_stat fs_dot_rc ("./.octaverc");
 
-      if (home_rc_statbuf.st_ino == dot_rc_statbuf.st_ino)
-	home_rc_already_executed = 1;
+	  if (fs_dot_rc && fs_home_rc.ino () == fs_dot_rc.ino ())
+	    home_rc_already_executed = 1;
+	}
     }
 
   if (! home_rc_already_executed)
     parse_and_execute ("./.octaverc", 0, verbose);
 
   run_unwind_frame ("execute_startup_files");
 }
 
diff --git a/src/toplev.cc b/src/toplev.cc
--- a/src/toplev.cc
+++ b/src/toplev.cc
@@ -59,17 +59,16 @@ Software Foundation, 59 Temple Place - S
 #include "pager.h"
 #include "parse.h"
 #include "pathsearch.h"
 #include "procstream.h"
 #include "pt-const.h"
 #include "pt-misc.h"
 #include "pt-plot.h"
 #include "sighandlers.h"
-#include "statdefs.h"
 #include "sysdep.h"
 #include "toplev.h"
 #include "unwind-prot.h"
 #include "user-prefs.h"
 #include "utils.h"
 #include "variables.h"
 #include "version.h"
 
diff --git a/src/variables.cc b/src/variables.cc
--- a/src/variables.cc
+++ b/src/variables.cc
@@ -44,25 +44,25 @@ Software Foundation, 59 Temple Place - S
 
 #include "str-vec.h"
 
 #include "defaults.h"
 #include "defun.h"
 #include "dirfns.h"
 #include "dynamic-ld.h"
 #include "error.h"
+#include "file-ops.h"
 #include "help.h"
 #include "input.h"
 #include "lex.h"
 #include "mappers.h"
 #include "oct-hist.h"
 #include "toplev.h"
 #include "pager.h"
 #include "parse.h"
-#include "statdefs.h"
 #include "symtab.h"
 #include "sysdep.h"
 #include "pt-const.h"
 #include "oct-obj.h"
 #include "pt-exp.h"
 #include "pt-fvc.h"
 #include "unwind-prot.h"
 #include "user-prefs.h"
@@ -278,18 +278,19 @@ returns:\n\
 	  path = oct_file_in_path (name);
 
 	  if (path.length () > 0)
 	    {
 	      retval = 3.0;
 	    }
 	  else
 	    {
-	      struct stat buf;
-	      if (stat (name.c_str (), &buf) == 0 && S_ISREG (buf.st_mode))
+	      file_stat fs (name);
+
+	      if (fs && fs.is_reg ())
 		retval = 2.0;
 	    }
 	}
     }
 
   return retval;
 }
 
