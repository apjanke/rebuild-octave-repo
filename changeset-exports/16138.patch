# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1361988458 18000
#      Wed Feb 27 13:07:38 2013 -0500
# Node ID 284e2ca86ef784016a59339b185787cfe5ddf762
# Parent  a885686b732a4402d5c72bf0036e1f7632e81b33
execute parser using member function of octave_parser class

* parse.h, oct-parse.yy (octave_parser::run): New function.
(octave_parse_input): Delete.
* toplev.cc (main_loop): Call octave_parser::run for curr_parser
instead of calling octave_parse_input.
* input.cc (get_debug_input): Likewise.
* oct-parse.yy (eval_string, parse_fcn_file): Likewise.

diff --git a/libinterp/interpfcn/input.cc b/libinterp/interpfcn/input.cc
--- a/libinterp/interpfcn/input.cc
+++ b/libinterp/interpfcn/input.cc
@@ -699,17 +699,17 @@ get_debug_input (const std::string& prom
 
       global_command = 0;
 
       // Do this with an unwind-protect cleanup function so that the
       // forced variables will be unmarked in the event of an interrupt.
       symbol_table::scope_id scope = symbol_table::top_scope ();
       middle_frame.add_fcn (symbol_table::unmark_forced_variables, scope);
 
-      int retval = octave_parse_input ();
+      int retval = curr_parser->run ();
 
       if (retval == 0 && global_command)
         {
           unwind_protect inner_frame;
 
           // Use an unwind-protect cleanup function so that the
           // global_command list will be deleted in the event of an
           // interrupt.
diff --git a/libinterp/interpfcn/toplev.cc b/libinterp/interpfcn/toplev.cc
--- a/libinterp/interpfcn/toplev.cc
+++ b/libinterp/interpfcn/toplev.cc
@@ -588,17 +588,17 @@ main_loop (void)
           // interrupt.
           symbol_table::scope_id scope = symbol_table::top_scope ();
           frame.add_fcn (symbol_table::unmark_forced_variables, scope);
 
           frame.protect_var (global_command);
 
           global_command = 0;
 
-          retval = octave_parse_input ();
+          retval = curr_parser->run ();
 
           if (retval == 0)
             {
               if (global_command)
                 {
                   // Use an unwind-protect cleanup function so that the
                   // global_command list will be deleted in the event of
                   // an interrupt.
diff --git a/libinterp/parse-tree/oct-parse.yy b/libinterp/parse-tree/oct-parse.yy
--- a/libinterp/parse-tree/oct-parse.yy
+++ b/libinterp/parse-tree/oct-parse.yy
@@ -1535,16 +1535,22 @@ yyerror (const char *s)
 
   output_buf << "\n";
 
   std::string msg = output_buf.str ();
 
   parse_error ("%s", msg.c_str ());
 }
 
+int
+octave_parser::run (void)
+{
+  return octave_parse ();
+}
+
 // Error mesages for mismatched end tokens.
 
 void
 octave_parser::end_error (const char *type, token::end_tok_type ettype,
                           int l, int c)
 {
   static const char *fmt
     = "'%s' command matched by '%s' near line %d column %d";
@@ -3419,17 +3425,17 @@ parse_fcn_file (const std::string& ff, c
             curr_lexer->prep_for_function_file ();
 
           curr_lexer->parsing_class_method = ! dispatch_type.empty ();
 
           frame.protect_var (global_command);
 
           global_command = 0;
 
-          int status = octave_parse_input ();
+          int status = curr_parser->run ();
 
           // Use an unwind-protect cleanup function so that the
           // global_command list will be deleted in the event of an
           // interrupt.
 
           frame.add_fcn (cleanup_statement_list, &global_command);
 
           fcn_ptr = primary_fcn_ptr;
@@ -4191,17 +4197,17 @@ eval_string (const std::string& s, bool 
       global_command = 0;
 
       // Do this with an unwind-protect cleanup function so that the
       // forced variables will be unmarked in the event of an
       // interrupt.
       symbol_table::scope_id scope = symbol_table::top_scope ();
       frame.add_fcn (symbol_table::unmark_forced_variables, scope);
 
-      parse_status = octave_parse_input ();
+      parse_status = curr_parser->run ();
 
       tree_statement_list *command_list = global_command;
 
       // Unmark forced variables.
       // Restore previous value of global_command.
       frame.run (2);
 
       if (parse_status == 0)
@@ -4300,22 +4306,16 @@ cleanup_statement_list (tree_statement_l
 {
   if (*lst)
     {
       delete *lst;
       *lst = 0;
     }
 }
 
-int
-octave_parse_input (void)
-{
-  return octave_parse ();
-}
-
 DEFUN (eval, args, nargout,
   "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {} eval (@var{try})\n\
 @deftypefnx {Built-in Function} {} eval (@var{try}, @var{catch})\n\
 Parse the string @var{try} and evaluate it as if it were an Octave\n\
 program.  If that fails, evaluate the optional string @var{catch}.\n\
 The string @var{try} is evaluated in the current context,\n\
 so any results remain available after @code{eval} returns.\n\
diff --git a/libinterp/parse-tree/parse.h b/libinterp/parse-tree/parse.h
--- a/libinterp/parse-tree/parse.h
+++ b/libinterp/parse-tree/parse.h
@@ -126,27 +126,27 @@ feval (const octave_value_list& args, in
 extern OCTINTERP_API octave_value_list
 eval_string (const std::string&, bool silent, int& parse_status, int hargout);
 
 extern OCTINTERP_API octave_value
 eval_string (const std::string&, bool silent, int& parse_status);
 
 extern OCTINTERP_API void cleanup_statement_list (tree_statement_list **lst);
 
-extern OCTINTERP_API int octave_parse_input (void);
-
 class
 octave_parser
 {
 public:
 
   octave_parser (void) { }
 
   ~octave_parser (void) { }
 
+  int run (void);
+
   // Error mesages for mismatched end tokens.
   void end_error (const char *type, token::end_tok_type ettype, int l, int c);
 
   // Check to see that end tokens are properly matched.
   bool end_token_ok (token *tok, token::end_tok_type expected);
 
   // Maybe print a warning if an assignment expression is used as the
   // test in a logical expression.
