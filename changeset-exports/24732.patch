# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1518323524 18000
#      Sat Feb 10 23:32:04 2018 -0500
# Node ID f079a08563213a17f041b3257430a2cd047df70f
# Parent  a01472d4a1702af95714565e42ecb87ef3f9952d
move internal input reader classes out of header file

* input.cc (class terminal_reader, class file_reader,
class eval_string_reader): Move declarations and definitions here from
input.h.
(input_reader::input_reader): Move definitinos here from input.h.

diff --git a/libinterp/corefcn/input.cc b/libinterp/corefcn/input.cc
--- a/libinterp/corefcn/input.cc
+++ b/libinterp/corefcn/input.cc
@@ -182,18 +182,17 @@ interactive_input (const std::string& s,
         return "\n";
     }
 
   return gnu_readline (s, eof);
 }
 
 namespace octave
 {
-  std::string
-  base_reader::octave_gets (bool& eof)
+  std::string base_reader::octave_gets (bool& eof)
   {
     octave_quit ();
 
     eof = false;
 
     std::string retval;
 
     // Process pre input event hook function prior to flushing output and
@@ -266,33 +265,105 @@ namespace octave
     // list has been updated.
 
     if (application::interactive ())
       octave_link::post_input_event ();
 
     return retval;
   }
 
-  bool
-  base_reader::reading_fcn_file (void) const
+  bool base_reader::reading_fcn_file (void) const
   {
     return lexer ? lexer->reading_fcn_file : false;
   }
 
-  bool
-  base_reader::reading_classdef_file (void) const
+  bool base_reader::reading_classdef_file (void) const
   {
     return lexer ? lexer->reading_classdef_file : false;
   }
 
-  bool
-  base_reader::reading_script_file (void) const
+  bool base_reader::reading_script_file (void) const
   {
     return lexer ? lexer->reading_script_file : false;
   }
+
+  class
+  terminal_reader : public base_reader
+  {
+  public:
+
+    terminal_reader (base_lexer *lxr = nullptr)
+      : base_reader (lxr)
+    { }
+
+    std::string get_input (bool& eof);
+
+    std::string input_source (void) const { return in_src; }
+
+    bool input_from_terminal (void) const { return true; }
+
+  private:
+
+    static const std::string in_src;
+  };
+
+  class
+  file_reader : public base_reader
+  {
+  public:
+
+    file_reader (FILE *f_arg, base_lexer *lxr = nullptr)
+      : base_reader (lxr), file (f_arg) { }
+
+    std::string get_input (bool& eof);
+
+    std::string input_source (void) const { return in_src; }
+
+    bool input_from_file (void) const { return true; }
+
+  private:
+
+    FILE *file;
+
+    static const std::string in_src;
+  };
+
+  class
+  eval_string_reader : public base_reader
+  {
+  public:
+
+    eval_string_reader (const std::string& str, base_lexer *lxr = nullptr)
+      : base_reader (lxr), eval_string (str)
+    { }
+
+    std::string get_input (bool& eof);
+
+    std::string input_source (void) const { return in_src; }
+
+    bool input_from_eval_string (void) const { return true; }
+
+  private:
+
+    std::string eval_string;
+
+    static const std::string in_src;
+  };
+
+  input_reader::input_reader (base_lexer *lxr)
+    : rep (new terminal_reader (lxr))
+  { }
+
+  input_reader::input_reader (FILE *file, base_lexer *lxr)
+    : rep (new file_reader (file, lxr))
+  { }
+
+  input_reader::input_reader (const std::string& str, base_lexer *lxr)
+    : rep (new eval_string_reader (str, lxr))
+  { }
 }
 
 // Fix things up so that input can come from the standard input.  This
 // may need to become much more complicated, which is why it's in a
 // separate function.
 
 FILE *
 get_input_from_stdin (void)
diff --git a/libinterp/corefcn/input.h b/libinterp/corefcn/input.h
--- a/libinterp/corefcn/input.h
+++ b/libinterp/corefcn/input.h
@@ -131,94 +131,25 @@ namespace octave
     int pflag;
 
     base_lexer *lexer;
 
     static const std::string in_src;
   };
 
   class
-  terminal_reader : public base_reader
-  {
-  public:
-
-    terminal_reader (base_lexer *lxr = nullptr)
-      : base_reader (lxr)
-    { }
-
-    std::string get_input (bool& eof);
-
-    std::string input_source (void) const { return in_src; }
-
-    bool input_from_terminal (void) const { return true; }
-
-  private:
-
-    static const std::string in_src;
-  };
-
-  class
-  file_reader : public base_reader
+  input_reader
   {
   public:
 
-    file_reader (FILE *f_arg, base_lexer *lxr = nullptr)
-      : base_reader (lxr), file (f_arg) { }
-
-    std::string get_input (bool& eof);
-
-    std::string input_source (void) const { return in_src; }
-
-    bool input_from_file (void) const { return true; }
-
-  private:
-
-    FILE *file;
-
-    static const std::string in_src;
-  };
-
-  class
-  eval_string_reader : public base_reader
-  {
-  public:
-
-    eval_string_reader (const std::string& str,
-                               base_lexer *lxr = nullptr)
-      : base_reader (lxr), eval_string (str)
-    { }
+    input_reader (base_lexer *lxr = nullptr);
 
-    std::string get_input (bool& eof);
-
-    std::string input_source (void) const { return in_src; }
-
-    bool input_from_eval_string (void) const { return true; }
-
-  private:
-
-    std::string eval_string;
-
-    static const std::string in_src;
-  };
+    input_reader (FILE *file, base_lexer *lxr = nullptr);
 
-  class
-  input_reader
-  {
-  public:
-    input_reader (base_lexer *lxr = nullptr)
-      : rep (new terminal_reader (lxr))
-    { }
-
-    input_reader (FILE *file, base_lexer *lxr = nullptr)
-      : rep (new file_reader (file, lxr))
-    { }
-
-    input_reader (const std::string& str, base_lexer *lxr = nullptr)
-      : rep (new eval_string_reader (str, lxr))
-    { }
+    input_reader (const std::string& str, base_lexer *lxr = nullptr);
 
     input_reader (const input_reader& ir)
     {
       rep = ir.rep;
       rep->count++;
     }
 
     input_reader& operator = (const input_reader& ir)
