# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1267712363 -3600
#      Thu Mar 04 15:19:23 2010 +0100
# Node ID b4e5dcf023c9bbe154e29624a84fbdea1c94427b
# Parent  59e34bcdff134cc01e90a9a41fdcf07fb75e2f5d
fix fminbnd termination tolerances

diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,8 +1,12 @@
+2010-03-04  Jaroslav Hajek  <highegg@gmail.com>
+
+	* optimization/fminbnd.m: Fix termination tolerances.
+
 2010-03-02  Jaroslav Hajek  <highegg@gmail.com>
 
 	* polynomial/convn.m: Remove.
 	* polynomial/module.mk: Update.
 
 2010-02-28  John W. Eaton  <jwe@octave.org>
 
 	* set/unique.m: If the argument is sparse and we are not
diff --git a/scripts/optimization/fminbnd.m b/scripts/optimization/fminbnd.m
--- a/scripts/optimization/fminbnd.m
+++ b/scripts/optimization/fminbnd.m
@@ -78,29 +78,32 @@ function [x, fval, info, output] = fminb
     ## Replace fun with a guarded version.
     fun = @(x) guarded_eval (fun, x);
   endif
 
   ## The default exit flag if exceeded number of iterations.
   info = 0;
   niter = 0;
   nfev = 0;
-  eps = eps (class (xmin + xmax));
+  sqrteps = eps (class (xmin + xmax));
 
   c = 0.5*(3-sqrt(5));
   a = xmin; b = xmax;
   v = a + c*(b-a);
   w = x = v;
   e = 0;
   fv = fw = fval = fun (x);
   nfev++;
 
   while (niter < maxiter && nfev < maxfev)
     xm = 0.5*(a+b);
-    tol = 2 * eps * abs (x) + tolx / 3;
+    ## FIXME: the golden section search can actually get closer than sqrt(eps)...
+    ## sometimes. Sometimes not, it depends on the function. This is the strategy
+    ## from the Netlib code. Something yet smarter would be good.
+    tol = 2 * sqrteps * abs (x) + tolx / 3;
     if (abs (x - xm) <= (2*tol - 0.5*(b-a)))
       info = 1;
       break;
     endif
 
     if (abs (e) > tol)
       dogs = false;
       ## Try inverse parabolic step.
@@ -114,17 +117,17 @@ function [x, fval, info, output] = fminb
       e = d;
 
       if (abs (p) < abs (0.5*q*r) && p > q*(a-x) && p < q*(b-x))
         ## The parabolic step is acceptable.
         d = p / q;
         u = x + d;
 
         ## f must not be evaluated too close to ax or bx.
-        if ((u-a) < 2*tol && (b-u) < 2*tol)
+        if (min (u-a, b-u) < 2*tol)
           d = tol * (sign (xm - x) + (xm == x));
         endif
       else
         dogs = true;
       endif
     else
       dogs = true;
     endif
