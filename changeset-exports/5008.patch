# HG changeset patch
# User jwe
# Date 1095432339 0
#      Fri Sep 17 14:45:39 2004 +0000
# Node ID c2bb27ada496b190db379ffafdeab1dc46cded33
# Parent  f8c27dad3643214387b36b8a3e2ae7a6a8c07890
[project @ 2004-09-17 14:45:39 by jwe]

diff --git a/PROJECTS b/PROJECTS
--- a/PROJECTS
+++ b/PROJECTS
@@ -160,24 +160,18 @@ Strings:
 
   * Consider making ["test", []] ==> "test", for compatibility with
     Matlab, at least when some set of preferences are set.
 
 ----------------
 Other Data Types:
 ----------------
 
-  * New types (char, short, etc.).
-
-  * 3d matrix stuff.
-
   * Template functions for mixed-type ops.
 
-  * Stuff for arithmetic using charMatrix, intMatrix, etc.
-
 ------------------------
 Graphical User Interface:
 ------------------------
 
   * In an X11 or other windowing environment, allow the user to pop up
     windows for menus and other purposes.  A good place to start might
     be Tk, as long as Tcl is avoided.
 
@@ -187,17 +181,17 @@ Graphical User Interface:
 Input/Output:
 ------------
 
   * Make fread and fwrite work for complex data.  Iostreams based
     versions of these functions would also be nice, and if you are
     working on them, it would be good to support other size
     specifications (integer*2, etc.).
 
-  * Make load and save work for structures.
+  * Make fread and fopen look in LOADPATH for files.
 
   * Make load and save look for <file>.mat if only given <file>.
 
     Potential sticky points:
 
       - For load, if both foo and foo.mat exist, should it prefer foo
         or foo.mat?  Should the preference depend on the arguments to
         load?  I think it should only prefer .mat files if the
@@ -234,16 +228,18 @@ Interpreter:
 
   * For the keyboard function, parse return (or quit) more
     intelligently so that something like
 
       debug> x = 1; return
 
     will work as expected.
 
+  * Handle multi-line input at the keyboard/debug prompt correctly.
+
   * Fix the parser so that
 
       if (expr) 'this is a string' end
 
     is parsed as IF expr STRING END.
 
   * Consider grouping all preference variables in a structure instead
     of further polluting the namespace.  Maybe `Octave_options.xxx'?
diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,15 @@
+2004-09-17  David Bateman  <dbateman@free.fr>
+
+	* CmplxSCHUR.cc (CmplxSCHUR::init): New arg, calc_unitary to make the
+	calculation of the unitary matrix optional.
+	* dbleSCHUR.cc (SCHUR::init): Ditto.
+	* CmplxSCHUR.h, dbleSCHUR.h: Update decls.
+
 2004-09-15  David Bateman  <dbateman@free.fr>
 
 	* oct-sort.h (octave_sort<T>::set_compare (bool (*comp) (T, T))):
 	New function to set the comparison function for the sort.
 
 2004-09-10  John W. Eaton  <jwe@octave.org>
 
 	* lo-mappers.cc (xround): Fix typo.
diff --git a/liboctave/CmplxSCHUR.cc b/liboctave/CmplxSCHUR.cc
--- a/liboctave/CmplxSCHUR.cc
+++ b/liboctave/CmplxSCHUR.cc
@@ -56,35 +56,41 @@ select_ana (const Complex& a)
 
 static int
 select_dig (const Complex& a)
 {
   return (abs (a) < 1.0);
 }
 
 int
-ComplexSCHUR::init (const ComplexMatrix& a, const std::string& ord)
+ComplexSCHUR::init (const ComplexMatrix& a, const std::string& ord, 
+		    bool calc_unitary)
 {
   int a_nr = a.rows ();
   int a_nc = a.cols ();
 
   if (a_nr != a_nc)
     {
       (*current_liboctave_error_handler)
 	("ComplexSCHUR requires square matrix");
       return -1;
     }
 
   // Workspace requirements may need to be fixed if any of the
   // following change.
 
-  char jobvs = 'V';
+  char jobvs;
   char sense = 'N';
   char sort = 'N';
 
+  if (calc_unitary)
+    jobvs = 'V';
+  else
+    jobvs = 'N';
+
   char ord_char = ord.empty () ? 'U' : ord[0];
 
   if (ord_char == 'A' || ord_char == 'D' || ord_char == 'a' || ord_char == 'd')
     sort = 'S';
 
   if (ord_char == 'A' || ord_char == 'a')
     selector = select_ana;
   else if (ord_char == 'D' || ord_char == 'd')
@@ -95,17 +101,18 @@ ComplexSCHUR::init (const ComplexMatrix&
   int n = a_nc;
   int lwork = 8 * n;
   int info;
   int sdim;
   double rconde;
   double rcondv;
 
   schur_mat = a;
-  unitary_mat.resize (n, n);
+  if (calc_unitary)
+    unitary_mat.resize (n, n);
 
   Complex *s = schur_mat.fortran_vec ();
   Complex *q = unitary_mat.fortran_vec ();
 
   Array<double> rwork (n);
   double *prwork = rwork.fortran_vec ();
 
   Array<Complex> w (n);
diff --git a/liboctave/CmplxSCHUR.h b/liboctave/CmplxSCHUR.h
--- a/liboctave/CmplxSCHUR.h
+++ b/liboctave/CmplxSCHUR.h
@@ -35,27 +35,23 @@ Software Foundation, 59 Temple Place - S
 class
 ComplexSCHUR
 {
 public:
 
   ComplexSCHUR (void)
     : schur_mat (), unitary_mat () { }
 
-  ComplexSCHUR (const ComplexMatrix& a, const std::string& ord)
-    : schur_mat (), unitary_mat ()
-      {
-        init (a, ord);
-      }
+  ComplexSCHUR (const ComplexMatrix& a, const std::string& ord,
+		bool calc_unitary = true)
+    : schur_mat (), unitary_mat () { init (a, ord, calc_unitary); }
 
-  ComplexSCHUR (const ComplexMatrix& a, const std::string& ord, int& info)
-    : schur_mat (), unitary_mat ()
-      {
-        info = init (a,ord);
-      }
+  ComplexSCHUR (const ComplexMatrix& a, const std::string& ord, int& info,
+		bool calc_unitary = true)
+    : schur_mat (), unitary_mat () { info = init (a, ord, calc_unitary); }
 
   ComplexSCHUR (const ComplexSCHUR& a)
     : schur_mat (a.schur_mat), unitary_mat (a.unitary_mat) { }
 
   ComplexSCHUR& operator = (const ComplexSCHUR& a)
     {
       if (this != &a)
 	{
@@ -77,17 +73,17 @@ public:
 
 private:
 
   ComplexMatrix schur_mat;
   ComplexMatrix unitary_mat;
 
   select_function selector;
 
-  int init (const ComplexMatrix& a, const std::string& ord);
+  int init (const ComplexMatrix& a, const std::string& ord, bool calc_unitary);
 };
 
 #endif
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
diff --git a/liboctave/dbleSCHUR.cc b/liboctave/dbleSCHUR.cc
--- a/liboctave/dbleSCHUR.cc
+++ b/liboctave/dbleSCHUR.cc
@@ -58,34 +58,39 @@ select_ana (const double& a, const doubl
 
 static int
 select_dig (const double& a, const double& b)
 {
   return (hypot (a, b) < 1.0);
 }
 
 int
-SCHUR::init (const Matrix& a, const std::string& ord)
+SCHUR::init (const Matrix& a, const std::string& ord, bool calc_unitary)
 {
   int a_nr = a.rows ();
   int a_nc = a.cols ();
 
   if (a_nr != a_nc)
     {
       (*current_liboctave_error_handler) ("SCHUR requires square matrix");
       return -1;
     }
 
   // Workspace requirements may need to be fixed if any of the
   // following change.
 
-  char jobvs = 'V';
+  char jobvs;
   char sense = 'N';
   char sort = 'N';
 
+  if (calc_unitary)
+    jobvs = 'V';
+  else
+    jobvs = 'N';
+
   char ord_char = ord.empty () ? 'U' : ord[0];
 
   if (ord_char == 'A' || ord_char == 'D' || ord_char == 'a' || ord_char == 'd')
     sort = 'S';
 
   if (ord_char == 'A' || ord_char == 'a')
     selector = select_ana;
   else if (ord_char == 'D' || ord_char == 'd')
@@ -97,17 +102,19 @@ SCHUR::init (const Matrix& a, const std:
   int lwork = 8 * n;
   int liwork = 1;
   int info;
   int sdim;
   double rconde;
   double rcondv;
 
   schur_mat = a;
-  unitary_mat.resize (n, n);
+
+  if (calc_unitary)
+    unitary_mat.resize (n, n);
 
   double *s = schur_mat.fortran_vec ();
   double *q = unitary_mat.fortran_vec ();
 
   Array<double> wr (n);
   double *pwr = wr.fortran_vec ();
 
   Array<double> wi (n);
diff --git a/liboctave/dbleSCHUR.h b/liboctave/dbleSCHUR.h
--- a/liboctave/dbleSCHUR.h
+++ b/liboctave/dbleSCHUR.h
@@ -35,27 +35,22 @@ Software Foundation, 59 Temple Place - S
 class
 SCHUR
 {
 public:
 
   SCHUR (void)
     : schur_mat (), unitary_mat () { }
 
-  SCHUR (const Matrix& a, const std::string& ord)
-    : schur_mat (), unitary_mat ()
-      {
-        init (a, ord);
-      }
+  SCHUR (const Matrix& a, const std::string& ord, bool calc_unitary = true)
+    : schur_mat (), unitary_mat () { init (a, ord, calc_unitary); }
 
-  SCHUR (const Matrix& a, const std::string& ord, int& info)
-    : schur_mat (), unitary_mat ()
-      {
-        info = init (a, ord);
-      }
+  SCHUR (const Matrix& a, const std::string& ord, int& info, 
+	 bool calc_unitary = true)
+    : schur_mat (), unitary_mat () { info = init (a, ord, calc_unitary); }
 
   SCHUR (const SCHUR& a)
     : schur_mat (a.schur_mat), unitary_mat (a.unitary_mat) { }
 
   SCHUR& operator = (const SCHUR& a)
     {
       if (this != &a)
 	{
@@ -77,17 +72,17 @@ public:
 
 private:
 
   Matrix schur_mat;
   Matrix unitary_mat;
 
   select_function selector;
 
-  int init (const Matrix& a, const std::string& ord);
+  int init (const Matrix& a, const std::string& ord, bool calc_unitary);
 };
 
 #endif
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,16 @@
+2004-09-17  David Bateman  <dbateman@free.fr>
+
+	* DLD-FUNCTIONS/det.cc (Fdet): Only compute estimate of the
+	condition number if requested as output.
+
+	* DLD-FUNCTIONS/schur.cc (Fschur): Only compute unitary matrix if
+	requested as output.
+
 2004-09-17  John W. Eaton  <jwe@octave.org>
 
 	* ov-fcn-inline.cc (octave_fcn_inline::octave_fcn_inline):
 	Call eval_string instead of feval ("eval", ...).
 	Construct anonymous function handle to avoid going through the
 	symbol table.
 
 	* ov-fcn-handle.h (octave_fcn_handle::fcn_val): New function.
diff --git a/src/DLD-FUNCTIONS/det.cc b/src/DLD-FUNCTIONS/det.cc
--- a/src/DLD-FUNCTIONS/det.cc
+++ b/src/DLD-FUNCTIONS/det.cc
@@ -77,39 +77,50 @@ of the reciprocal condition number if re
     {
       Matrix m = arg.matrix_value ();
 
       if (! error_state)
 	{
 	  int info;
 	  double rcond = 0.0;
 
-	  DET det = m.determinant (info, rcond);
 
 	  if (nargout > 1)
-	    retval(1) = rcond;
-
-	  retval(0) = (info == -1 ? 0.0 : det.value ());
+	    {
+	      DET det = m.determinant (info, rcond);
+	      retval(1) = rcond;
+	      retval(0) = (info == -1 ? 0.0 : det.value ());
+	    }
+	  else
+	    {
+	      DET det = m.determinant (info);
+	      retval(0) = (info == -1 ? 0.0 : det.value ());
+	    }
 	}
     }
   else if (arg.is_complex_type ())
     {
       ComplexMatrix m = arg.complex_matrix_value ();
 
       if (! error_state)
 	{
 	  int info;
 	  double rcond = 0.0;
 
-	  ComplexDET det = m.determinant (info, rcond);
-
 	  if (nargout > 1)
-	    retval(1) = rcond;
-
-	  retval(0) = (info == -1 ? Complex (0.0) : det.value ());
+	    {
+	      ComplexDET det = m.determinant (info, rcond);
+	      retval(1) = rcond;
+	      retval(0) = (info == -1 ? Complex (0.0) : det.value ());
+	    }
+	  else
+	    {
+	      ComplexDET det = m.determinant (info);
+	      retval(0) = (info == -1 ? Complex (0.0) : det.value ());
+	    }
 	}
     }
   else
     {
       gripe_wrong_type_arg ("det", arg);
     }
 
   return retval;
diff --git a/src/DLD-FUNCTIONS/schur.cc b/src/DLD-FUNCTIONS/schur.cc
--- a/src/DLD-FUNCTIONS/schur.cc
+++ b/src/DLD-FUNCTIONS/schur.cc
@@ -295,43 +295,44 @@ leading eigenvalues of\n\
     }
 
   if (arg.is_real_type ())
     {
       Matrix tmp = arg.matrix_value ();
 
       if (! error_state)
 	{
-	  SCHUR result (tmp, ord);
-
 	  if (nargout == 0 || nargout == 1)
 	    {
+	      SCHUR result (tmp, ord, false);
 	      retval(0) = result.schur_matrix ();
 	    }
 	  else
 	    {
+	      SCHUR result (tmp, ord, true);
 	      retval(1) = result.schur_matrix ();
 	      retval(0) = result.unitary_matrix ();
 	    }
 	}
     }
   else if (arg.is_complex_type ())
     {
       ComplexMatrix ctmp = arg.complex_matrix_value ();
 
       if (! error_state)
 	{
-	  ComplexSCHUR result (ctmp, ord);
  
 	  if (nargout == 0 || nargout == 1)
 	    {
+	      ComplexSCHUR result (ctmp, ord, false);
 	      retval(0) = result.schur_matrix ();
 	    }
 	  else
 	    {
+	      ComplexSCHUR result (ctmp, ord, true);
 	      retval(1) = result.schur_matrix ();
 	      retval(0) = result.unitary_matrix ();
 	    }
 	}
     }    
   else
     {
       gripe_wrong_type_arg ("schur", arg);
