# HG changeset patch
# User Rik <rik@octave.org>
# Date 1516378161 28800
#      Fri Jan 19 08:09:21 2018 -0800
# Node ID c241918d4c9249bc0e7e4f3b8488502521d04fa7
# Parent  89b0a53258b767ae15640aa580b0ffdebebcc8f5
# Parent  c99163d188df4de95eaf1562df9887bee6e26f0b
maint: merge stable to default.

diff --git a/libinterp/corefcn/data.cc b/libinterp/corefcn/data.cc
--- a/libinterp/corefcn/data.cc
+++ b/libinterp/corefcn/data.cc
@@ -5765,49 +5765,49 @@ unary_op_defun_body (octave_value::unary
   return do_unary_op (op, args(0));
 }
 
 DEFUN (not, args, ,
        doc: /* -*- texinfo -*-
 @deftypefn {} {@var{z} =} not (@var{x})
 Return the logical NOT of @var{x}.
 
-This function is equivalent to the operator syntax @w{@code{! x}}.
+This function is equivalent to the operator syntax @w{@code{! @var{x}}}.
 @seealso{and, or, xor}
 @end deftypefn */)
 {
   return unary_op_defun_body (octave_value::op_not, args);
 }
 
 DEFUN (uplus, args, ,
        doc: /* -*- texinfo -*-
 @deftypefn {} {} uplus (@var{x})
-This function and @w{@tcode{+ x}} are equivalent.
+This function and @w{@tcode{+ @var{x}}} are equivalent.
 @seealso{uminus, plus, minus}
 @end deftypefn */)
 {
   return unary_op_defun_body (octave_value::op_uplus, args);
 }
 
 DEFUN (uminus, args, ,
        doc: /* -*- texinfo -*-
 @deftypefn {} {} uminus (@var{x})
-This function and @w{@tcode{- x}} are equivalent.
+This function and @w{@tcode{- @var{x}}} are equivalent.
 @seealso{uplus, minus}
 @end deftypefn */)
 {
   return unary_op_defun_body (octave_value::op_uminus, args);
 }
 
 DEFUN (transpose, args, ,
        doc: /* -*- texinfo -*-
 @deftypefn {} {} transpose (@var{x})
 Return the transpose of @var{x}.
 
-This function and @tcode{x.'} are equivalent.
+This function and @tcode{@var{x}.'} are equivalent.
 @seealso{ctranspose}
 @end deftypefn */)
 {
   return unary_op_defun_body (octave_value::op_transpose, args);
 }
 
 /*
 %!assert (2.', 2)
@@ -5829,17 +5829,17 @@ This function and @tcode{x.'} are equiva
 %!assert (transpose (single ([1,2;3,4])), single ([1,3;2,4]))
 */
 
 DEFUN (ctranspose, args, ,
        doc: /* -*- texinfo -*-
 @deftypefn {} {} ctranspose (@var{x})
 Return the complex conjugate transpose of @var{x}.
 
-This function and @tcode{x'} are equivalent.
+This function and @tcode{@var{x}'} are equivalent.
 @seealso{transpose}
 @end deftypefn */)
 {
   return unary_op_defun_body (octave_value::op_hermitian, args);
 }
 
 /*
 %!assert (2', 2)
@@ -5897,263 +5897,264 @@ binary_assoc_op_defun_body (octave_value
 
   return retval;
 }
 
 DEFUN (plus, args, ,
        doc: /* -*- texinfo -*-
 @deftypefn  {} {} plus (@var{x}, @var{y})
 @deftypefnx {} {} plus (@var{x1}, @var{x2}, @dots{})
-This function and @w{@tcode{x + y}} are equivalent.
+This function and @w{@tcode{@var{x} + @var{y}}} are equivalent.
 
 If more arguments are given, the summation is applied
 cumulatively from left to right:
 
 @example
-(@dots{}((x1 + x2) + x3) + @dots{})
+(@dots{}((@var{x1} + @var{x2}) + @var{x3}) + @dots{})
 @end example
 
 At least one argument is required.
 @seealso{minus, uplus}
 @end deftypefn */)
 {
   return binary_assoc_op_defun_body (octave_value::op_add,
                                      octave_value::op_add_eq, args);
 }
 
 DEFUN (minus, args, ,
        doc: /* -*- texinfo -*-
 @deftypefn {} {} minus (@var{x}, @var{y})
-This function and @w{@tcode{x - y}} are equivalent.
+This function and @w{@tcode{@var{x} - @var{y}}} are equivalent.
 @seealso{plus, uminus}
 @end deftypefn */)
 {
   return binary_op_defun_body (octave_value::op_sub, args);
 }
 
 DEFUN (mtimes, args, ,
        doc: /* -*- texinfo -*-
 @deftypefn  {} {} mtimes (@var{x}, @var{y})
 @deftypefnx {} {} mtimes (@var{x1}, @var{x2}, @dots{})
 Return the matrix multiplication product of inputs.
 
-This function and @w{@tcode{x * y}} are equivalent.
+This function and @w{@tcode{@var{x} * @var{y}}} are equivalent.
 If more arguments are given, the multiplication is applied
 cumulatively from left to right:
 
 @example
-(@dots{}((x1 * x2) * x3) * @dots{})
+(@dots{}((@var{x1} * @var{x2}) * @var{x3}) * @dots{})
 @end example
 
 At least one argument is required.
 @seealso{times, plus, minus, rdivide, mrdivide, mldivide, mpower}
 @end deftypefn */)
 {
   return binary_assoc_op_defun_body (octave_value::op_mul,
                                      octave_value::op_mul_eq, args);
 }
 
 DEFUN (mrdivide, args, ,
        doc: /* -*- texinfo -*-
 @deftypefn {} {} mrdivide (@var{x}, @var{y})
 Return the matrix right division of @var{x} and @var{y}.
 
-This function and @w{@tcode{x / y}} are equivalent.
+This function and @w{@tcode{@var{x} / @var{y}}} are equivalent.
 @seealso{mldivide, rdivide, plus, minus}
 @end deftypefn */)
 {
   return binary_op_defun_body (octave_value::op_div, args);
 }
 
 DEFUN (mpower, args, ,
        doc: /* -*- texinfo -*-
 @deftypefn {} {} mpower (@var{x}, @var{y})
 Return the matrix power operation of @var{x} raised to the @var{y} power.
 
-This function and @w{@tcode{x ^ y}} are equivalent.
+This function and @w{@tcode{@var{x} ^ @var{y}}} are equivalent.
 @seealso{power, mtimes, plus, minus}
 @end deftypefn */)
 {
   return binary_op_defun_body (octave_value::op_pow, args);
 }
 
 DEFUN (mldivide, args, ,
        doc: /* -*- texinfo -*-
 @deftypefn {} {} mldivide (@var{x}, @var{y})
 Return the matrix left division of @var{x} and @var{y}.
 
-This function and @w{@tcode{x @xbackslashchar{} y}} are equivalent.
+This function and @w{@tcode{@var{x} @xbackslashchar{} @var{y}}} are equivalent.
 @seealso{mrdivide, ldivide, rdivide}
 @end deftypefn */)
 {
   return binary_op_defun_body (octave_value::op_ldiv, args);
 }
 
 DEFUN (lt, args, ,
        doc: /* -*- texinfo -*-
 @deftypefn {} {} lt (@var{x}, @var{y})
-This function is equivalent to @w{@code{x < y}}.
+This function is equivalent to @w{@code{@var{x} < @var{y}}}.
 @seealso{le, eq, ge, gt, ne}
 @end deftypefn */)
 {
   return binary_op_defun_body (octave_value::op_lt, args);
 }
 
 DEFUN (le, args, ,
        doc: /* -*- texinfo -*-
 @deftypefn {} {} le (@var{x}, @var{y})
-This function is equivalent to @w{@code{x <= y}}.
+This function is equivalent to @w{@code{@var{x} <= @var{y}}}.
 @seealso{eq, ge, gt, ne, lt}
 @end deftypefn */)
 {
   return binary_op_defun_body (octave_value::op_le, args);
 }
 
 DEFUN (eq, args, ,
        doc: /* -*- texinfo -*-
 @deftypefn {} {} eq (@var{x}, @var{y})
 Return true if the two inputs are equal.
 
-This function is equivalent to @w{@code{x == y}}.
+This function is equivalent to @w{@code{@var{x} == @var{y}}}.
 @seealso{ne, isequal, le, ge, gt, ne, lt}
 @end deftypefn */)
 {
   return binary_op_defun_body (octave_value::op_eq, args);
 }
 
 DEFUN (ge, args, ,
        doc: /* -*- texinfo -*-
 @deftypefn {} {} ge (@var{x}, @var{y})
-This function is equivalent to @w{@code{x >= y}}.
+This function is equivalent to @w{@code{@var{x} >= @var{y}}}.
 @seealso{le, eq, gt, ne, lt}
 @end deftypefn */)
 {
   return binary_op_defun_body (octave_value::op_ge, args);
 }
 
 DEFUN (gt, args, ,
        doc: /* -*- texinfo -*-
 @deftypefn {} {} gt (@var{x}, @var{y})
-This function is equivalent to @w{@code{x > y}}.
+This function is equivalent to @w{@code{@var{x} > @var{y}}}.
 @seealso{le, eq, ge, ne, lt}
 @end deftypefn */)
 {
   return binary_op_defun_body (octave_value::op_gt, args);
 }
 
 DEFUN (ne, args, ,
        doc: /* -*- texinfo -*-
 @deftypefn {} {} ne (@var{x}, @var{y})
 Return true if the two inputs are not equal.
 
-This function is equivalent to @w{@code{x != y}}.
+This function is equivalent to @w{@code{@var{x} != @var{y}}}.
 @seealso{eq, isequal, le, ge, lt}
 @end deftypefn */)
 {
   return binary_op_defun_body (octave_value::op_ne, args);
 }
 
 DEFUN (times, args, ,
        doc: /* -*- texinfo -*-
 @deftypefn  {} {} times (@var{x}, @var{y})
 @deftypefnx {} {} times (@var{x1}, @var{x2}, @dots{})
 Return the element-by-element multiplication product of inputs.
 
-This function and @w{@tcode{x .* y}} are equivalent.
+This function and @w{@tcode{@var{x} .* @var{y}}} are equivalent.
 If more arguments are given, the multiplication is applied
 cumulatively from left to right:
 
 @example
-(@dots{}((x1 .* x2) .* x3) .* @dots{})
+(@dots{}((@var{x1} .* @var{x2}) .* @var{x3}) .* @dots{})
 @end example
 
 At least one argument is required.
 @seealso{mtimes, rdivide}
 @end deftypefn */)
 {
   return binary_assoc_op_defun_body (octave_value::op_el_mul,
                                      octave_value::op_el_mul_eq, args);
 }
 
 DEFUN (rdivide, args, ,
        doc: /* -*- texinfo -*-
 @deftypefn {} {} rdivide (@var{x}, @var{y})
 Return the element-by-element right division of @var{x} and @var{y}.
 
-This function and @w{@tcode{x ./ y}} are equivalent.
+This function and @w{@tcode{@var{x} ./ @var{y}}} are equivalent.
 @seealso{ldivide, mrdivide, times, plus}
 @end deftypefn */)
 {
   return binary_op_defun_body (octave_value::op_el_div, args);
 }
 
 DEFUN (power, args, ,
        doc: /* -*- texinfo -*-
 @deftypefn {} {} power (@var{x}, @var{y})
 Return the element-by-element operation of @var{x} raised to the
 @var{y} power.
 
-This function and @w{@tcode{x .^ y}} are equivalent.
+This function and @w{@tcode{@var{x} .^ @var{y}}} are equivalent.
 
 If several complex results are possible, returns the one with smallest
 non-negative argument (angle).  Use @code{realpow}, @code{realsqrt},
 @code{cbrt}, or @code{nthroot} if a real result is preferred.
 
 @seealso{mpower, realpow, realsqrt, cbrt, nthroot}
 @end deftypefn */)
 {
   return binary_op_defun_body (octave_value::op_el_pow, args);
 }
 
 DEFUN (ldivide, args, ,
        doc: /* -*- texinfo -*-
 @deftypefn {} {} ldivide (@var{x}, @var{y})
 Return the element-by-element left division of @var{x} and @var{y}.
 
-This function and @w{@tcode{x .@xbackslashchar{} y}} are equivalent.
+This function and @w{@tcode{@var{x} .@xbackslashchar{} @var{y}}} are
+equivalent.
 @seealso{rdivide, mldivide, times, plus}
 @end deftypefn */)
 {
   return binary_op_defun_body (octave_value::op_el_ldiv, args);
 }
 
 DEFUN (and, args, ,
        doc: /* -*- texinfo -*-
 @deftypefn  {} {@var{z} =} and (@var{x}, @var{y})
 @deftypefnx {} {@var{z} =} and (@var{x1}, @var{x2}, @dots{})
 Return the logical AND of @var{x} and @var{y}.
 
-This function is equivalent to the operator syntax @w{@code{x & y}}.  If
-more than two arguments are given, the logical AND is applied cumulatively
-from left to right:
+This function is equivalent to the operator syntax
+@w{@code{@var{x} & @var{y}}}.  If more than two arguments are given, the
+logical AND is applied cumulatively from left to right:
 
 @example
-(@dots{}((x1 & x2) & x3) & @dots{})
+(@dots{}((@var{x1} & @var{x2}) & @var{x3}) & @dots{})
 @end example
 
 At least one argument is required.
 @seealso{or, not, xor}
 @end deftypefn */)
 {
   return binary_assoc_op_defun_body (octave_value::op_el_and,
                                      octave_value::op_el_and_eq, args);
 }
 
 DEFUN (or, args, ,
        doc: /* -*- texinfo -*-
 @deftypefn  {} {@var{z} =} or (@var{x}, @var{y})
 @deftypefnx {} {@var{z} =} or (@var{x1}, @var{x2}, @dots{})
 Return the logical OR of @var{x} and @var{y}.
 
-This function is equivalent to the operator syntax @w{@code{x | y}}.  If
-more than two arguments are given, the logical OR is applied cumulatively
-from left to right:
+This function is equivalent to the operator syntax
+@w{@code{@var{x} | @var{y}}}.  If more than two arguments are given, the
+logical OR is applied cumulatively from left to right:
 
 @example
-(@dots{}((x1 | x2) | x3) | @dots{})
+(@dots{}((@var{x1} | @var{x2}) | @var{x3}) | @dots{})
 @end example
 
 At least one argument is required.
 @seealso{and, not, xor}
 @end deftypefn */)
 {
   return binary_assoc_op_defun_body (octave_value::op_el_or,
                                      octave_value::op_el_or_eq, args);
@@ -6161,18 +6162,19 @@ At least one argument is required.
 
 DEFUN (colon, args, ,
        doc: /* -*- texinfo -*-
 @deftypefn  {} {@var{r} =} colon (@var{base}, @var{limit})
 @deftypefnx {} {@var{r} =} colon (@var{base}, @var{increment}, @var{limit})
 Return the result of the colon expression corresponding to @var{base},
 @var{limit}, and optionally, @var{increment}.
 
-This function is equivalent to the operator syntax @w{@code{base : limit}}
-or @w{@code{base : increment : limit}}.
+This function is equivalent to the operator syntax
+@w{@code{@var{base} : @var{limit}}} or
+@w{@code{@var{base} : @var{increment} : @var{limit}}}.
 @seealso{linspace}
 @end deftypefn */)
 {
   int nargin = args.length ();
 
   if (nargin < 2 || nargin > 3)
     print_usage ();
 
