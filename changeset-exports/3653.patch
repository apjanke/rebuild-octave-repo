# HG changeset patch
# User jwe
# Date 954545606 0
#      Fri Mar 31 23:33:26 2000 +0000
# Node ID 84b2f30007d5f4155e4f55c7deab71455888cda6
# Parent  25e84fcef38a3cbfe347cf1c86f4ac2c9171ddb5
[project @ 2000-03-31 23:33:25 by jwe]

diff --git a/scripts/statistics/distributions/beta_inv.m b/scripts/statistics/distributions/beta_inv.m
--- a/scripts/statistics/distributions/beta_inv.m
+++ b/scripts/statistics/distributions/beta_inv.m
@@ -63,17 +63,17 @@ function inv = beta_inv (x, a, b)
       y(l) = sqrt (eps) * ones (length (l), 1);
     endif
     l = find (y > 1 - eps);
     if (any (l))
       y(l) = 1 - sqrt (eps) * ones (length (l), 1);
     endif
 
     y_old = y;
-    for i = 1 : 100
+    for i = 1 : 10000
       h     = (beta_cdf (y_old, a, b) - x) ./ beta_pdf (y_old, a, b);
       y_new = y_old - h;
       ind   = find (y_new <= eps);
       if (any (ind))
         y_new (ind) = y_old (ind) / 10;
       endif
       ind = find (y_new >= 1 - eps);
       if (any (ind))
diff --git a/scripts/statistics/distributions/f_inv.m b/scripts/statistics/distributions/f_inv.m
--- a/scripts/statistics/distributions/f_inv.m
+++ b/scripts/statistics/distributions/f_inv.m
@@ -49,17 +49,21 @@ function inv = f_inv (x, m, n)
 
   k = find ((x == 1) & (m > 0) & (n > 0));
   if (any (k))
     inv(k) = Inf * ones (1, length (k));
   endif
 
   k = find ((x > 0) & (x < 1) & (m > 0) & (n > 0));
   if (any (k))
-    inv(k) = ((1 ./ beta_inv (1 - x(k), n(k) / 2, m(k) / 2) - 1)
+    fprintf (stderr, "n1: %f\n", n(k));
+    fprintf (stderr, "n2: %f\n", m(k));
+    t = beta_inv (1 - x(k), n(k) / 2, m(k) / 2)
+    fprintf (stderr, "qbeta: %f\n", t);
+    inv(k) = ((1 ./ t - 1)
 	      .* n(k) ./ m(k));
   endif
 
   ## should we really only allow for positive integer m, n?
   k = find ((m != round (m)) | (n != round (n)));
   if (any (k))
     warning ("f_inv: m and n should be positive integers");
     inv(k) = NaN * ones (1, length (k));
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,10 +1,14 @@
 2000-03-31  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
+	* oct-stream.cc (printf_value_cache::string_value): Return string
+	matrices in a Matlab-compatible way.
+	(printf_value_cache): Redesign the way list_exhausted works.
+
 	* oct-fstrm.cc (octave_fstream::do_close): New function.
 	* oct-stdstrm.cc (octave_istdiostream::do_close): Ditto.
 	(octave_ostdiostream::do_close): Ditto.
 	* c-file-ptr-stream.cc (c_file_ptr_buf::close): Ditto.
 	(i_c_file_ptr_stream::close): Ditto.
 	(o_c_file_ptr_stream::close): Ditto.
 	* oct-prcstrm.cc (octave_iprocstream::do_close): Ditto.
 	(octave_oprocstream::do_close): Ditto.
diff --git a/src/oct-stream.cc b/src/oct-stream.cc
--- a/src/oct-stream.cc
+++ b/src/oct-stream.cc
@@ -1965,17 +1965,17 @@ octave_base_stream::write (const octave_
   return retval;
 }
 
 class
 printf_value_cache
 {
 public:
 
-  enum state { ok, list_exhausted, conversion_error };
+  enum state { ok, conversion_error };
 
   printf_value_cache (const octave_value_list& args)
     : values (args), val_idx (0), elt_idx (0),
       n_vals (values.length ()), n_elts (0), data (0),
       curr_state (ok) { }
 
   ~printf_value_cache (void) { }
 
@@ -1985,18 +1985,17 @@ public:
   // Get the current value as an int and advance the internal pointer.
   int int_value (void);
 
   // Get the current value as a string and advance the internal pointer.
   std::string string_value (void);
 
   operator bool () const { return (curr_state == ok); }
 
-  bool exhausted (void)
-    { return (curr_state == list_exhausted || val_idx >= n_vals); }
+  bool exhausted (void) { return (val_idx >= n_vals); }
 
   bool looking_at_string (void);
 
 private:
 
   const octave_value_list values;
   int val_idx;
   int elt_idx;
@@ -2017,36 +2016,20 @@ private:
   printf_value_cache& operator = (const printf_value_cache&);
 };
 
 bool
 printf_value_cache::looking_at_string (void)
 {
   bool retval = false;
 
-  int idx = -1;
-
-  if (elt_idx == 0)
-    idx = val_idx;
-  else if (elt_idx >= n_elts)
-    idx = val_idx + 1;
+  int idx = (elt_idx == 0) ? val_idx : -1;
 
   if (idx >= 0 && idx < n_vals)
-    {
-      octave_value tmp_val = values (idx);
-
-      // An empty string has zero rows and zero columns.
-
-      if (tmp_val.is_string ())
-	{
-	  int nr = tmp_val.rows ();
-
-	  retval = (nr == 1 || (nr == 0 && tmp_val.columns () == 0));
-	}
-    }
+    retval = values(idx).is_string ();
 
   return retval;
 }
 
 double
 printf_value_cache::double_value (void)
 {
   double retval = 0.0;
@@ -2069,29 +2052,35 @@ printf_value_cache::double_value (void)
 	    {
 	      curr_state = conversion_error;
 	      break;
 	    }
 	}
 
       if (elt_idx < n_elts)
 	{
-	  return data[elt_idx++];
+	  retval = data[elt_idx++];
+
+	  if (elt_idx >= n_elts)
+	    {
+	      elt_idx = 0;
+	      val_idx++;
+	      data = 0;
+	    }
+
 	  break;
 	}
       else
 	{
 	  val_idx++;
 	  data = 0;
 	  continue;
 	}
     }
 
-  curr_state = list_exhausted;
-
   return retval;
 }
 
 int
 printf_value_cache::int_value (void)
 {
   int retval = 0;
 
@@ -2110,24 +2099,37 @@ printf_value_cache::int_value (void)
 
 std::string
 printf_value_cache::string_value (void)
 {
   std::string retval;
 
   if (looking_at_string ())
     {
-      if (elt_idx != 0)
+      octave_value tval = values (val_idx++);
+
+      if (tval.rows () == 1)
+	retval = tval.string_value ();
+      else
 	{
-	  val_idx++;
-	  elt_idx = 0;
-	  data = 0;
+	  // In the name of Matlab compatibility.
+
+	  charMatrix chm = tval.char_matrix_value ();
+
+	  int nr = chm.rows ();
+	  int nc = chm.columns ();
+
+	  int k = 0;
+
+	  retval.resize (nr * nc, '\0');
+
+	  for (int j = 0; j < nc; j++)
+	    for (int i = 0; i < nr; i++)
+	      retval[k++] = chm(i,j);
 	}
-
-      retval = values (val_idx++).string_value ();
     }
   else
     curr_state = conversion_error;
 
   return retval;
 }
 
 // Ugh again and again.
