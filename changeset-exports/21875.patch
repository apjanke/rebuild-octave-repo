# HG changeset patch
# User Rik <rik@octave.org>
# Date 1465703976 25200
#      Sat Jun 11 20:59:36 2016 -0700
# Node ID 6c09e42b7ac4efa6b86bc93759e966127330e768
# Parent  7508f3a8e234a12659e4cd6d8f9fb368b1ab640e
debug.[cc|h]: Use C++ for-range syntax.

* Cell.cc, debug.cc, debug.h:
Use C++ for-range syntax to simplify loops.

diff --git a/libinterp/corefcn/Cell.cc b/libinterp/corefcn/Cell.cc
--- a/libinterp/corefcn/Cell.cc
+++ b/libinterp/corefcn/Cell.cc
@@ -68,21 +68,18 @@ Cell::Cell (const std::list<std::string>
   size_t n = lst.size ();
 
   if (n > 0)
     {
       resize (dim_vector (n, 1));
 
       octave_idx_type i = 0;
 
-      for (std::list<std::string>::const_iterator it = lst.begin ();
-           it != lst.end (); it++)
-        {
-          elem(i++,0) = *it;
-        }
+      for (const auto& str : lst)
+        elem(i++,0) = str;
     }
 }
 
 Cell::Cell (const Array<std::string>& sa)
   : Array<octave_value> (sa.dims ())
 {
   octave_idx_type n = sa.numel ();
 
diff --git a/libinterp/corefcn/debug.cc b/libinterp/corefcn/debug.cc
--- a/libinterp/corefcn/debug.cc
+++ b/libinterp/corefcn/debug.cc
@@ -579,22 +579,22 @@ bp_table::do_add_breakpoint_1 (octave_us
   tree_statement_list *cmds = fcn->body ();
 
   std::string file = fcn->fcn_file_name ();
 
   if (cmds)
     {
       retval = cmds->add_breakpoint (file, line, condition);
 
-      for (intmap_iterator p = retval.begin (); p != retval.end (); p++)
+      for (auto& idx_line_p : retval)
         {
-          if (p->second != 0)
+          if (idx_line_p.second != 0)
             {
-              // normalise to store only the file name.
-              // otherwise, there can be an entry for both file>subfunction and
+              // Normalize to store only the file name.
+              // Otherwise, there can be an entry for both file>subfunction and
               // file, which causes a crash on dbclear all
               const char *s = strchr (fname.c_str (), Vfilemarker);
               if (s)
                 bp_set.insert (fname.substr (0, s - fname.c_str ()));
               else
                 bp_set.insert (fname);
               found = true;
               break;
@@ -652,22 +652,21 @@ find_fcn_by_line (octave_user_code *main
 {
   octave_user_code *retval = 0;
   octave_user_code *next_fcn = 0;  // 1st function starting after lineno
 
   // Find innermost nested (or parent) function containing lineno.
   int earliest_end = std::numeric_limits<int>::max ();
 
   std::map<std::string, octave_value> subfcns = main_fcn->subfunctions ();
-  for (std::map<std::string,octave_value>::const_iterator q = subfcns.begin ();
-       q != subfcns.end (); q++)
+  for (const auto& str_val_p : subfcns)
     {
-      if (q->second.is_user_function ())
+      if (str_val_p.second.is_user_function ())
         {
-          octave_user_function *dbg_subfcn = q->second.user_function_value ();
+          auto *dbg_subfcn = str_val_p.second.user_function_value ();
 
           // Check if lineno is within dbg_subfcn.
           // FIXME: we could break when beginning_line() > lineno,
           // but that makes the code "fragile"
           // if the order of walking subfcns changes,
           // for a minor speed improvement in non-critical code.
           if (dbg_subfcn->ending_line () < earliest_end
               && dbg_subfcn->ending_line () >= lineno
@@ -826,21 +825,20 @@ bp_table::do_remove_breakpoint (const st
       // Search subfunctions in the order they appear in the file.
 
       const std::list<std::string> subfcn_names
         = dbg_fcn->subfunction_names ();
 
       std::map<std::string, octave_value> subfcns
         = dbg_fcn->subfunctions ();
 
-      for (std::list<std::string>::const_iterator p = subfcn_names.begin ();
-           p != subfcn_names.end (); p++)
+      for (const auto& subf_nm : subfcn_names)
         {
           std::map<std::string, octave_value>::const_iterator
-            q = subfcns.find (*p);
+            q = subfcns.find (subf_nm);
 
           if (q != subfcns.end ())
             {
               octave_user_code *dbg_subfcn = q->second.user_code_value ();
 
               retval += do_remove_breakpoint_1 (dbg_subfcn, fname, line);
             }
         }
@@ -919,60 +917,59 @@ do_find_bkpt_list (octave_value_list sli
 bp_table::fname_bp_map
 bp_table::do_get_breakpoint_list (const octave_value_list& fname_list)
 {
   fname_bp_map retval;
 
   // make copy since changes may invalidate iters of bp_set.
   std::set<std::string> tmp_bp_set = bp_set;
 
-  for (bp_set_iterator it = tmp_bp_set.begin (); it != tmp_bp_set.end (); it++)
+  for (auto& bp_fname : tmp_bp_set)
     {
       if (fname_list.length () == 0
-          || do_find_bkpt_list (fname_list, *it) != "")
+          || do_find_bkpt_list (fname_list, bp_fname) != "")
         {
-          octave_user_code *f = get_user_code (*it);
+          octave_user_code *f = get_user_code (bp_fname);
 
           if (f)
             {
               tree_statement_list *cmds = f->body ();
 
               // FIXME: move the operation on cmds to the
               //        tree_statement_list class?
               if (cmds)
                 {
                   std::list<bp_type> bkpts = cmds->breakpoints_and_conds ();
 
                   if (! bkpts.empty ())
-                    retval[*it] = bkpts;
+                    retval[bp_fname] = bkpts;
                 }
 
               // look for breakpoints in subfunctions
               const std::list<std::string> subf_nm = f->subfunction_names ();
 
               std::map<std::string, octave_value> subf = f->subfunctions ();
 
-              for (std::list<std::string>::const_iterator p = subf_nm.begin ();
-                   p != subf_nm.end (); p++)
+              for (const auto& subfcn_nm : subf_nm)
                 {
                   std::map<std::string, octave_value>::const_iterator
-                    q = subf.find (*p);
+                    q = subf.find (subfcn_nm);
 
                   if (q != subf.end ())
                     {
                       octave_user_code *ff = q->second.user_code_value ();
 
                       cmds = ff->body ();
                       if (cmds)
                         {
                           std::list<bp_type> bkpts
                                              = cmds->breakpoints_and_conds ();
 
                           if (! bkpts.empty ())
-                            retval[*it + Vfilemarker + ff->name ()] = bkpts;
+                            retval[bp_fname + Vfilemarker + ff->name ()] = bkpts;
                         }
                     }
                 }
             }
         }
     }
 
   return retval;
@@ -1257,26 +1254,24 @@ bp_table::stop_on_err_warn_status (bool 
           else
             retval.assign ("errs", octave_value(""));
         }
       else
         {
           Cell errs (dim_vector (bp_table::errors_that_stop.size (), 1));
           int i = 0;
 
-          for (std::set<std::string>::const_iterator e
-                                  = errors_that_stop.begin ();
-               e != errors_that_stop.end (); e++)
+          for (const auto& e : errors_that_stop)
             {
               if (to_screen)
-                octave_stdout << "stop if error " << *e << "\n";
+                octave_stdout << "stop if error " << e << "\n";
               else
-                errs (i++) = *e;
+                errs(i++) = e;
             }
-          if (!to_screen)
+          if (! to_screen)
             retval.assign ("errs", octave_value (errs));
         }
     }
 
   // print dbstop if caught error information
   if (Vdebug_on_caught)
     {
       if (caught_that_stop.empty ())
@@ -1286,26 +1281,24 @@ bp_table::stop_on_err_warn_status (bool 
           else
             retval.assign ("caught", octave_value(""));
         }
       else
         {
           Cell errs (dim_vector (caught_that_stop.size (), 1));
           int i = 0;
 
-          for (std::set<std::string>::const_iterator e
-                                  = caught_that_stop.begin ();
-               e != caught_that_stop.end (); e++)
+          for (const auto& e : caught_that_stop)
             {
               if (to_screen)
-                octave_stdout << "stop if caught error " << *e << "\n";
+                octave_stdout << "stop if caught error " << e << "\n";
               else
-                errs (i++) = *e;
+                errs(i++) = e;
             }
-          if (!to_screen)
+          if (! to_screen)
             retval.assign ("caught", octave_value (errs));
         }
     }
 
   // print dbstop if warning information
   if (Vdebug_on_warning)
     {
       if (warnings_that_stop.empty ())
@@ -1315,26 +1308,24 @@ bp_table::stop_on_err_warn_status (bool 
           else
             retval.assign ("warn", octave_value(""));
         }
       else
         {
           Cell warn (dim_vector (warnings_that_stop.size (), 1));
           int i = 0;
 
-          for (std::set<std::string>::const_iterator w
-                                  = warnings_that_stop.begin ();
-               w != warnings_that_stop.end (); w++)
+          for (const auto& w : warnings_that_stop)
             {
               if (to_screen)
-                octave_stdout << "stop if warning " << *w << "\n";
+                octave_stdout << "stop if warning " << w << "\n";
               else
-                warn (i++) = *w;
+                warn(i++) = w;
             }
-          if (!to_screen)
+          if (! to_screen)
             retval.assign ("warn", octave_value (warn));
         }
     }
 
   // print dbstop if interrupt information
   if (Vdebug_on_interrupt)
     {
       if (to_screen)
@@ -1425,115 +1416,105 @@ The @qcode{\"warn\"} field is set simila
 
       bp_list = bp_table::get_breakpoint_list (fcn_list);
     }
 
   if (nargout == 0)
     {
       // Print out the breakpoint information.
 
-      for (bp_table::fname_bp_map_iterator it = bp_list.begin ();
-           it != bp_list.end (); it++)
+      for (auto& fnm_bp_p: bp_list)
         {
-          std::list<bp_type> m = it->second;
+          std::list<bp_type> m = fnm_bp_p.second;
 
           // print unconditional breakpoints, if any, on a single line
 
           // first, check to see if there are any
           int have_unconditional = 0;
-          for (std::list<bp_type>::const_iterator j = m.begin ();
-               j != m.end (); j++)
+          for (const auto& bp : m)
             {
-              if (j->cond == "")
+              if (bp.cond == "")
                 {
                   if (have_unconditional++)
                     break;                   // stop once we know its plural
                 }
             }
           // If we actually have some, print line numbers only
           if (have_unconditional)
             {
               const char *_s_ = (have_unconditional > 1) ? "s" : "";
-              octave_stdout << "breakpoint" << _s_ <<" in " << it->first
+              octave_stdout << "breakpoint" << _s_ <<" in " << fnm_bp_p.first
                             << " at line" << _s_ << " ";
 
               for (std::list<bp_type>::const_iterator j = m.begin ();
                    j != m.end (); j++)
                 {
                   if (j->cond == "")
                     octave_stdout << j->line << " ";
                 }
               octave_stdout << std::endl;
             }
 
           // print conditional breakpoints, one per line, with conditions
-          for (std::list<bp_type>::const_iterator j = m.begin ();
-               j != m.end (); j++)
+          for (const auto& bp : m)
             {
-              if (j->cond != "")
-                octave_stdout << "breakpoint in " << it->first
-                              << " at line " << j->line
-                              << " if " << j->cond << "\n";
+              if (bp.cond != "")
+                octave_stdout << "breakpoint in " << fnm_bp_p.first
+                              << " at line " << bp.line
+                              << " if " << bp.cond << "\n";
             }
         }
 
       bp_table::stop_on_err_warn_status (true);
 
       return ovl ();
     }
   else
     {
       // Fill in an array for return.
       int i = 0;
       octave_map retmap;
       octave_value retval;
 
-      // count how many breakpoints there are
+      // count the number of breakpoints in all files
       int count = 0;
-      for (bp_table::const_fname_bp_map_iterator it = bp_list.begin ();
-           it != bp_list.end (); it++)
-        {
-          for (std::list<bp_type>::const_iterator j = it->second.begin ();
-               j != it->second.end (); j++)
-            count++;
-        }
+      for (const auto& fnm_bp_p : bp_list)
+        count += fnm_bp_p.second.size ();
 
       Cell names (dim_vector (count, 1));
       Cell file  (dim_vector (count, 1));
       Cell line  (dim_vector (count, 1));
       Cell cond  (dim_vector (count, 1));
 
-      for (bp_table::const_fname_bp_map_iterator it = bp_list.begin ();
-           it != bp_list.end (); it++)
+      for (const auto& fnm_bp_p : bp_list)
         {
-          std::string filename = it->first;
+          std::string filename = fnm_bp_p.first;
           const char *sub_fun = strchr (filename.c_str (), Vfilemarker);
           if (sub_fun)
             filename = filename.substr(0, sub_fun - filename.c_str ());
           octave_value path_name;
           path_name = octave::sys::canonicalize_file_name (do_which (filename));
 
-          for (std::list<bp_type>::const_iterator j = it->second.begin ();
-               j != it->second.end (); j++)
+          for (const auto& bp : fnm_bp_p.second)
             {
-              names(i) = it->first;
+              names(i) = fnm_bp_p.first;
               file(i) = path_name;
-              line(i) = octave_value (j->line);
-              cond(i) = octave_value (j->cond);
+              line(i) = octave_value (bp.line);
+              cond(i) = octave_value (bp.cond);
               i++;
             }
         }
 
       retmap.assign ("name", names);
       retmap.assign ("file", file);
       retmap.assign ("line", line);
       retmap.assign ("cond", cond);
 
       octave_map ew = bp_table::stop_on_err_warn_status (false);
-      if (ew.numel () == 0)
+      if (ew.is_empty ())
         {
           retval = octave_value (retmap);
         }
       else
         {
           octave_map outer (dim_vector (3,1));
           outer.assign ("bkpt", Cell (retmap));
           for (octave_map::const_iterator f = ew.begin (); f != ew.end (); f++)
diff --git a/libinterp/corefcn/debug.h b/libinterp/corefcn/debug.h
--- a/libinterp/corefcn/debug.h
+++ b/libinterp/corefcn/debug.h
@@ -34,21 +34,21 @@ class octave_value_list;
 class octave_user_code;
 static std::string bp_empty_string ("");
 
 struct
 bp_type
 {
   int line;
   std::string cond;
-  bp_type (int l, const std::string& c) : line (l), cond (c)
-    { }
+
+  bp_type (int l, const std::string& c) : line (l), cond (c) { }
 };
 
-// Interface to breakpoints,.
+// Interface to breakpoints.
 class
 OCTINTERP_API
 bp_table
 {
 private:
 
   bp_table (void) : bp_set () { }
 
