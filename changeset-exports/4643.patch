# HG changeset patch
# User jwe
# Date 1069503945 0
#      Sat Nov 22 12:25:45 2003 +0000
# Node ID ef3a14fb6847290a27ef2b9b90aa652543059cc8
# Parent  7a83d52d2aed1b5bf710ebbef538260152d182f5
[project @ 2003-11-22 12:25:44 by jwe]

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,66 @@
+2003-11-22  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* ov-dld-fcn.h (octave_dld_function::octave_dld_function): 
+	Make public, but abort if called.
+	* ov-builtin.h (octave_builtin::octave_builtin): Likewise.
+	* ov-fcn.h (octave_function::octave_function): Likewise.
+
+	* ov-typeinfo.cc (octave_value_typeinfo::register_type,
+	octave_value_typeinfo::do_register_type): New arg, val.
+	(octave_value_typeinfo::lookup_type,
+	octave_value_typeinfo::do_lookup_type): New functions.
+	* ov-typeinfo.h: Provide decl.
+
+	* ov.h (DEFINE_OV_TYPEID_FUNCTIONS_AND_DATA): Pass
+
+	* ov.h (DEFINE_OV_TYPEID_FUNCTIONS_AND_DATA): Define register_type
+	here.  Also pass an empty object of the to-be-registered type to
+	register_type.
+	(DECLARE_OV_TYPEID_FUNCTIONS_AND_DATA): Declare register type
+	here, but don't define it.
+
+2003-11-21  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* ov-fcn-handle.h (octave_fcn_handle::octave_fcn_handle (void)):
+	New constructor.
+
+	* ov-usr-fcn.h (octave_user_function::octave_user_function):
+	Delete decl for private constructor.
+
+	* ov-str-mat.cc (octave_char_matrix_str::matrix_value):
+	Conversion to matrix is an error unless explicitly forced.
+
+	* ov-str-mat.cc (octave_char_matrix_str::double_value): New function.
+	* ov-str-mat.h: Provide decl.
+
+	* ov-file.cc (print_raw): Use parens around ?: conditional used on
+	RHS of << output operator.
+
+	* c-file-ptr-stream.cc (c_file_ptr_buf::seekoff,
+	c_file_ptr_buf::seekpos): Can't use fseek here, so just fail (by
+	returning -1) until we have a better solution.
+
+	* oct-stream.cc (octave_stream::tell): Return std::streamoff, not long.
+	* oct-iostrm.cc (octave_base_iostream::tell): Likewise.
+	* oct-stdstrm.cc (octave_stdiostream::tell): Likewise.
+	* oct-strstrm.cc (octave_base_strstream::tell): Likewise.
+	* oct-stream.h, oct-iostrm.h, oct-stdstrm.h, oct-strstrm.h:
+	Fix decls to match.
+
+2003-11-20  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* ls-mat-ascii.cc (get_lines_and_columns): Delete second arg in
+	call to istream::seekg.
+
+	* ov-mapper.cc (MAPPER_LOOP_2, any_element_less_than,
+	any_element_greater_than, octave_mapper::apply):
+	Handle N-d arrays.
+
 2003-11-19  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* ls-mat5.cc (read_mat5_binary_element, save_mat5_binary_element):
 	Handle N-d arrays.
 
 	* lex.l (next_token_is_index_op): New function.
 	(handle_close_bracket): Use it.
 
diff --git a/src/Makefile.in b/src/Makefile.in
--- a/src/Makefile.in
+++ b/src/Makefile.in
@@ -64,19 +64,19 @@ ifeq ($(ENABLE_DYNAMIC_LINKING), true)
   endif
 else
   DLD_STATIC_OBJ := $(DLD_OBJ)
 endif
 
 OV_INCLUDES := ov-re-mat.h ov-cx-mat.h ov-ch-mat.h ov-cs-list.h ov-list.h \
 	ov-struct.h ov-scalar.h ov-range.h ov-complex.h ov-va-args.h \
 	ov-colon.h ov-base.h ov-base-mat.h ov-base-scalar.h \
-	ov-str-mat.h ov-bool-mat.h ov-bool.h ov-file.h ov-cell.h ov.h \
-	ov-fcn.h ov-builtin.h ov-dld-fcn.h ov-mapper.h ov-usr-fcn.h \
-	ov-fcn-handle.h ov-typeinfo.h
+	ov-streamoff.h ov-str-mat.h ov-bool-mat.h ov-bool.h \
+	ov-file.h ov-cell.h ov.h ov-fcn.h ov-builtin.h ov-dld-fcn.h \
+	ov-mapper.h ov-usr-fcn.h ov-fcn-handle.h ov-typeinfo.h
 
 PT_INCLUDES := pt.h pt-all.h pt-arg-list.h pt-assign.h pt-binop.h \
         pt-bp.h	pt-cell.h pt-check.h pt-cmd.h pt-colon.h pt-const.h \
 	pt-decl.h pt-except.h pt-exp.h pt-fcn-handle.h pt-id.h pt-idx.h \
 	pt-jump.h pt-loop.h pt-mat.h pt-misc.h pt-plot.h \
 	pt-pr-code.h pt-select.h pt-stmt.h pt-unop.h pt-walk.h \
 
 INCLUDES := Cell.h base-list.h c-file-ptr-stream.h comment-list.h \
@@ -98,24 +98,24 @@ TI_SRC := $(addprefix TEMPLATE-INST/, $(
 OP_XSRC := op-b-b.cc op-bm-b.cc op-bm-bm.cc op-cell.cc \
 	op-chm.cc op-cm-cm.cc op-cm-cs.cc op-cm-m.cc \
 	op-cm-s.cc op-cs-cm.cc op-cs-cs.cc op-cs-m.cc \
 	op-cs-s.cc op-fil-b.cc op-fil-bm.cc op-fil-cm.cc \
 	op-fil-cs.cc op-fil-m.cc op-fil-s.cc op-fil-lis.cc \
 	op-fil-rec.cc op-fil-str.cc op-list.cc op-m-cm.cc \
 	op-m-cs.cc op-m-m.cc op-m-s.cc op-range.cc op-s-cm.cc \
 	op-s-cs.cc op-s-m.cc op-s-s.cc op-str-m.cc \
-	op-str-s.cc op-str-str.cc
+	op-str-s.cc op-str-str.cc op-streamoff.cc
 
 OP_SRC := $(addprefix OPERATORS/, $(OP_XSRC))
 
 OV_SRC := ov-base.cc ov-base-mat.cc ov-base-scalar.cc ov-ch-mat.cc \
 	ov-cs-list.cc ov-list.cc ov-re-mat.cc ov-cx-mat.cc \
-	ov-range.cc ov-scalar.cc \
-	ov-complex.cc ov-str-mat.cc ov-struct.cc ov-va-args.cc \
+	ov-range.cc ov-scalar.cc ov-complex.cc ov-str-mat.cc \
+	ov-streamoff.cc ov-struct.cc ov-va-args.cc \
 	ov-colon.cc ov-bool-mat.cc ov-bool.cc ov-file.cc ov-cell.cc \
 	ov.cc ov-fcn.cc ov-builtin.cc ov-dld-fcn.cc ov-mapper.cc \
 	ov-usr-fcn.cc ov-fcn-handle.cc ov-typeinfo.cc
 
 PT_SRC := pt.cc pt-arg-list.cc pt-assign.cc pt-bp.cc pt-binop.cc \
 	pt-cell.cc pt-check.cc pt-cmd.cc pt-colon.cc pt-const.cc \
 	pt-decl.cc pt-except.cc pt-exp.cc pt-fcn-handle.cc pt-id.cc \
 	pt-idx.cc pt-jump.cc pt-loop.cc pt-mat.cc pt-misc.cc \
diff --git a/src/c-file-ptr-stream.cc b/src/c-file-ptr-stream.cc
--- a/src/c-file-ptr-stream.cc
+++ b/src/c-file-ptr-stream.cc
@@ -127,41 +127,45 @@ seekdir_to_whence (std::ios::seekdir dir
 	  (dir == std::ios::end) ? SEEK_END :
 	  dir);
 }
 
 std::streampos
 c_file_ptr_buf::seekoff (std::streamoff offset, std::ios::seekdir dir,
 			 std::ios::openmode)
 {
-  // XXX FIXME XXX -- is this the right thing to do?
-
+  // XXX FIXME XXX
+#if 0
   if (f)
     {
       fseek (f, offset, seekdir_to_whence (dir));
 
       return ftell (f);
     }
   else
     return 0;
+#endif
+  return -1;
 }
 
 std::streampos
 c_file_ptr_buf::seekpos (std::streampos offset, std::ios::openmode)
 {
-  // XXX FIXME XXX -- is this the right thing to do?
-
+  // XXX FIXME XXX
+#if 0  
   if (f)
     {
       fseek (f, offset, SEEK_SET);
 
       return ftell (f);
     }
   else
     return 0;
+#endif
+  return -1;
 }
 
 int
 c_file_ptr_buf::sync (void)
 {
   flush ();
 
   return 0;
diff --git a/src/file-io.cc b/src/file-io.cc
--- a/src/file-io.cc
+++ b/src/file-io.cc
@@ -58,16 +58,17 @@ Software Foundation, 59 Temple Place - S
 #include "lo-ieee.h"
 #include "oct-fstrm.h"
 #include "oct-iostrm.h"
 #include "oct-map.h"
 #include "oct-obj.h"
 #include "oct-prcstrm.h"
 #include "oct-stream.h"
 #include "oct-strstrm.h"
+#include "ov-streamoff.h"
 #include "pager.h"
 #include "pt-plot.h"
 #include "sysdep.h"
 #include "utils.h"
 #include "variables.h"
 
 static octave_value stdin_file;
 static octave_value stdout_file;
@@ -627,26 +628,26 @@ offset must be zero, or a value returned
 
 DEFUN (ftell, args, ,
   "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} ftell (@var{fid})\n\
 Return the position of the file pointer as the number of characters\n\
 from the beginning of the file @var{fid}.\n\
 @end deftypefn")
 {
-  octave_value retval = -1;
+  octave_value retval = streamoff_array (dim_vector (1, 1), -1);
 
   int nargin = args.length ();
 
   if (nargin == 1)
     {
       octave_stream os = octave_stream_list::lookup (args(0), "ftell");
 
       if (! error_state)
-	retval = os.tell ();
+	retval = streamoff_array (dim_vector (1, 1), os.tell ());
     }
   else
     print_usage ("ftell");
 
   return retval;
 }
 
 DEFUN (fprintf, args, nargout,
diff --git a/src/ls-mat-ascii.cc b/src/ls-mat-ascii.cc
--- a/src/ls-mat-ascii.cc
+++ b/src/ls-mat-ascii.cc
@@ -176,17 +176,17 @@ get_lines_and_columns (std::istream& is,
 		   filename.c_str (), file_line_number);
 	}
     }
 
   if (nr == 0 || nc == 0)
     error ("load: file `%s' seems to be empty!", filename.c_str ());
 
   is.clear ();
-  is.seekg (pos, std::ios::beg);
+  is.seekg (pos);
 }
 
 // Extract a matrix from a file of numbers only.
 //
 // Comments are not allowed.  The file should only have numeric values.
 //
 // Reads the file twice.  Once to find the number of rows and columns,
 // and once to extract the matrix.
diff --git a/src/oct-fstrm.cc b/src/oct-fstrm.cc
--- a/src/oct-fstrm.cc
+++ b/src/oct-fstrm.cc
@@ -83,25 +83,26 @@ octave_fstream::seek (std::streamoff off
 	}
     }
 
   return retval;
 }
 
 // Return current stream position.
 
-long
+std::streamoff
 octave_fstream::tell (void) const
 {
-  long retval = -1;
+  std::streamoff retval = -1;
 
   if (fs)
     {
       std::filebuf *fb = fs.rdbuf ();
-      retval = static_cast<long> (fb->pubseekoff (0, std::ios::cur));
+
+      retval = std::streamoff (fb->pubseekoff (0, std::ios::cur));
     }
 
   return retval;
 }
 
 // Return non-zero if EOF has been reached on this stream.
 
 bool
diff --git a/src/oct-fstrm.h b/src/oct-fstrm.h
--- a/src/oct-fstrm.h
+++ b/src/oct-fstrm.h
@@ -44,17 +44,17 @@ public:
 	  oct_mach_info::float_format flt_fmt = oct_mach_info::flt_fmt_native);
 
   // Position a stream at OFFSET relative to ORIGIN.
 
   int seek (std::streamoff offset, std::ios::seekdir origin);
 
   // Return current stream position.
 
-  long tell (void) const;
+  std::streamoff tell (void) const;
 
   // Return non-zero if EOF has been reached on this stream.
 
   bool eof (void) const;
 
   void do_close (void);
 
   // The name of the file.
diff --git a/src/oct-iostrm.cc b/src/oct-iostrm.cc
--- a/src/oct-iostrm.cc
+++ b/src/oct-iostrm.cc
@@ -33,17 +33,17 @@ int
 octave_base_iostream::seek (std::streamoff, std::ios::seekdir)
 {
   invalid_operation ();
   return -1;
 }
 
 // Return current stream position.
 
-long
+std::streamoff
 octave_base_iostream::tell (void) const
 {
   invalid_operation ();
   return -1;
 }
 
 // Return non-zero if EOF has been reached on this stream.
 
diff --git a/src/oct-iostrm.h b/src/oct-iostrm.h
--- a/src/oct-iostrm.h
+++ b/src/oct-iostrm.h
@@ -39,17 +39,17 @@ public:
     : octave_base_stream (m, ff), nm (n) { }
 
   // Position a stream at OFFSET relative to ORIGIN.
 
   int seek (std::streamoff offset, std::ios::seekdir origin);
 
   // Return current stream position.
 
-  long tell (void) const;
+  std::streamoff tell (void) const;
 
   // Return non-zero if EOF has been reached on this stream.
 
   bool eof (void) const;
 
   // The name of the file.
 
   std::string name (void) const { return nm; }
diff --git a/src/oct-stdstrm.cc b/src/oct-stdstrm.cc
--- a/src/oct-stdstrm.cc
+++ b/src/oct-stdstrm.cc
@@ -48,28 +48,28 @@ octave_stdiostream::seek (std::streamoff
 	}
     }
 
   return retval;
 }
 
 // Return current stream position.
 
-long
+std::streamoff
 octave_stdiostream::tell (void) const
 {
-  long retval = -1;
+  std::streamoff retval = -1;
 
   if (! bad ())
     {
       c_file_ptr_buf *sb = rdbuf ();
 
       if (sb)
 	{
-	  retval = static_cast<long> (sb->pubseekoff (0, std::ios::cur));
+	  retval = std::streamoff (sb->pubseekoff (0, std::ios::cur));
 
 	  if (bad ())
 	    retval = -1;
 	}
     }
 
   return retval;
 }
diff --git a/src/oct-stdstrm.h b/src/oct-stdstrm.h
--- a/src/oct-stdstrm.h
+++ b/src/oct-stdstrm.h
@@ -52,17 +52,17 @@ public:
   }
 
   // Position a stream at OFFSET relative to ORIGIN.
 
   int seek (std::streamoff offset, std::ios::seekdir origin);
 
   // Return current stream position.
 
-  long tell (void) const;
+  std::streamoff tell (void) const;
 
   // Return non-zero if EOF has been reached on this stream.
 
   bool eof (void) const { return s ? s->eof () : true; }
 
   // The name of the file.
 
   std::string name (void) const { return nm; }
diff --git a/src/oct-stream.cc b/src/oct-stream.cc
--- a/src/oct-stream.cc
+++ b/src/oct-stream.cc
@@ -2741,20 +2741,20 @@ octave_stream::seek (const octave_value&
 	error ("fseek: invalid value for origin");
     }
   else
     error ("fseek: invalid value for offset");
 
   return retval;
 }
 
-long
+std::streamoff
 octave_stream::tell (void) const
 {
-  long retval = -1;
+  std::streamoff retval = -1;
 
   if (stream_ok ("tell"))
     retval = rep->tell ();
 
   return retval;
 }
 
 int
diff --git a/src/oct-stream.h b/src/oct-stream.h
--- a/src/oct-stream.h
+++ b/src/oct-stream.h
@@ -333,17 +333,17 @@ public:
   // and must be provided by the derived classes.
 
   // Position a stream at OFFSET relative to ORIGIN.
 
   virtual int seek (std::streamoff offset, std::ios::seekdir origin) = 0;
 
   // Return current stream position.
 
-  virtual long tell (void) const = 0;
+  virtual std::streamoff tell (void) const = 0;
 
   // Return TRUE if EOF has been reached on this stream.
 
   virtual bool eof (void) const = 0;
 
   // The name of the file.
 
   virtual std::string name (void) const = 0;
@@ -500,17 +500,17 @@ public:
 
   std::string gets (int max_len, bool& err, const std::string& who /* = "gets" */);
   std::string gets (const octave_value& max_len, bool& err,
 		    const std::string& who /* = "gets" */);
 
   int seek (std::streamoff offset, std::ios::seekdir origin);
   int seek (const octave_value& offset, const octave_value& origin);
 
-  long tell (void) const;
+  std::streamoff tell (void) const;
 
   int rewind (void);
 
   bool is_open (void) const;
 
   void close (void);
 
   octave_value read (const Array<double>& size, oct_data_conv::data_type dt,
diff --git a/src/oct-strstrm.cc b/src/oct-strstrm.cc
--- a/src/oct-strstrm.cc
+++ b/src/oct-strstrm.cc
@@ -46,30 +46,30 @@ octave_base_strstream::seek (std::stream
 	}
     }
 
   return retval;
 }
 
 // Return current stream position.
 
-long
+std::streamoff
 octave_base_strstream::tell (void) const
 {
-  long retval = -1;
+  std::streamoff retval = -1;
 
   if (! bad ())
     {
       // XXX FIXME XXX -- shouldn't have to do this!
 
       std::streambuf *sb = (const_cast<octave_base_strstream *>(this))->rdbuf ();
 
       if (sb)
 	{
-	  retval = static_cast<long> (sb->pubseekoff (0, std::ios::cur));
+	  retval = std::streamoff (sb->pubseekoff (0, std::ios::cur));
 
 	  if (bad ())
 	    retval = -1;
 	}
     }
 
   return retval;
 }
diff --git a/src/oct-strstrm.h b/src/oct-strstrm.h
--- a/src/oct-strstrm.h
+++ b/src/oct-strstrm.h
@@ -40,17 +40,17 @@ public:
     : octave_base_stream (m, ff) { }
 
   // Position a stream at OFFSET relative to ORIGIN.
 
   int seek (std::streamoff offset, std::ios::seekdir origin);
 
   // Return current stream position.
 
-  long tell (void) const;
+  std::streamoff tell (void) const;
 
   // The name of the file.
 
   std::string name (void) const { return std::string (); }
 
   virtual std::streambuf *rdbuf (void) = 0;
 
   virtual bool bad (void) const = 0;
diff --git a/src/ov-base-mat.cc b/src/ov-base-mat.cc
--- a/src/ov-base-mat.cc
+++ b/src/ov-base-mat.cc
@@ -129,17 +129,18 @@ octave_base_matrix<MT>::do_index_op (con
       {
 	int nd = matrix.ndims ();
 
 	if (nd == 2)
 	  {
 	    idx_vector i = idx (0).index_vector ();
 	    idx_vector j = idx (1).index_vector ();
 
-	    retval = MT (matrix.index (i, j, resize_ok, MT::resize_fill_value ()));
+	    retval = MT (matrix.index (i, j, resize_ok,
+				       MT::resize_fill_value ()));
 	  }
 	else
 	  error ("invalid number of indices (= 2) for %d-dimensional array",
 		 nd);
       }
       break;
 
     case 1:
@@ -215,25 +216,16 @@ void
 octave_base_matrix<MT>::print (std::ostream& os, bool pr_as_read_syntax) const
 {
   print_raw (os, pr_as_read_syntax);
   newline (os);
 }
 
 template <class MT>
 void
-octave_base_matrix<MT>::print_raw (std::ostream& os,
-				   bool pr_as_read_syntax) const
-{
-  octave_print_internal (os, matrix, pr_as_read_syntax,
-			 current_print_indent_level ());
-}
-
-template <class MT>
-void
 octave_base_matrix<MT>::print_info (std::ostream& os,
 				    const std::string& prefix) const
 {
   matrix.print_info (os, prefix);
 }
 
 /*
 ;;; Local Variables: ***
diff --git a/src/ov-base-mat.h b/src/ov-base-mat.h
--- a/src/ov-base-mat.h
+++ b/src/ov-base-mat.h
@@ -110,18 +110,16 @@ public:
   bool is_constant (void) const { return true; }
 
   bool is_true (void) const;
 
   bool print_as_scalar (void) const;
 
   void print (std::ostream& os, bool pr_as_read_syntax = false) const;
 
-  void print_raw (std::ostream& os, bool pr_as_read_syntax = false) const;
-
   void print_info (std::ostream& os, const std::string& prefix) const;
 
 protected:
 
   MT matrix;
 };
 
 #endif
diff --git a/src/ov-base.cc b/src/ov-base.cc
--- a/src/ov-base.cc
+++ b/src/ov-base.cc
@@ -45,16 +45,17 @@ Software Foundation, 59 Temple Place - S
 #include "ov-ch-mat.h"
 #include "ov-complex.h"
 #include "ov-cx-mat.h"
 #include "ov-list.h"
 #include "ov-range.h"
 #include "ov-re-mat.h"
 #include "ov-scalar.h"
 #include "ov-str-mat.h"
+#include "ov-streamoff.h"
 #include "ov-fcn-handle.h"
 #include "variables.h"
 
 DEFINE_OV_TYPEID_FUNCTIONS_AND_DATA (octave_base_value,
 				     "<unknown type>", "unknown");
 
 octave_value
 octave_base_value::squeeze (void) const
@@ -460,16 +461,24 @@ octave_base_value::map_keys (void) const
 octave_stream
 octave_base_value::stream_value (void) const
 {
   octave_stream retval;
   gripe_wrong_type_arg ("octave_base_value::stream_value()", type_name ());
   return retval;
 }
 
+streamoff_array
+octave_base_value::streamoff_value (void) const
+{
+  streamoff_array retval;
+  gripe_wrong_type_arg ("octave_base_value::streamoff_value()", type_name ());
+  return retval;
+}
+
 int
 octave_base_value::stream_number (void) const
 {
   int retval = -1;
   gripe_wrong_type_arg ("octave_base_value::stream_number()", type_name ());
   return retval;
 }
 
diff --git a/src/ov-base.h b/src/ov-base.h
--- a/src/ov-base.h
+++ b/src/ov-base.h
@@ -121,16 +121,18 @@ public:
   bool is_string (void) const { return false; }
 
   bool is_range (void) const { return false; }
 
   bool is_map (void) const { return false; }
 
   bool is_stream (void) const { return false; }
 
+  bool is_streamoff (void) const { return false; }
+
   bool is_cs_list (void) const { return false; }
 
   bool is_list (void) const { return false; }
 
   bool is_magic_colon (void) const { return false; }
 
   bool is_all_va_args (void) const { return false; }
 
@@ -219,16 +221,18 @@ public:
   Octave_map map_value (void) const;
 
   string_vector map_keys (void) const;
 
   octave_stream stream_value (void) const;
 
   int stream_number (void) const;
 
+  streamoff_array streamoff_value (void) const;
+
   octave_function *function_value (bool silent);
 
   octave_fcn_handle *fcn_handle_value (bool silent);
 
   octave_value_list list_value (void) const;
 
   octave_value convert_to_str_internal (bool pad, bool force) const;
 
diff --git a/src/ov-bool-mat.cc b/src/ov-bool-mat.cc
--- a/src/ov-bool-mat.cc
+++ b/src/ov-bool-mat.cc
@@ -135,13 +135,21 @@ octave_bool_matrix::complex_value (bool)
 
 octave_value
 octave_bool_matrix::convert_to_str_internal (bool pad, bool force) const
 {
   octave_value tmp = octave_value (matrix_value ());
   return tmp.convert_to_str (pad, force);
 }
 
+void
+octave_bool_matrix::print_raw (std::ostream& os,
+			       bool pr_as_read_syntax) const
+{
+  octave_print_internal (os, matrix, pr_as_read_syntax,
+			 current_print_indent_level ());
+}
+
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
diff --git a/src/ov-bool-mat.h b/src/ov-bool-mat.h
--- a/src/ov-bool-mat.h
+++ b/src/ov-bool-mat.h
@@ -110,16 +110,18 @@ public:
   boolMatrix bool_matrix_value (void) const
     { return matrix.matrix_value (); }
 
   boolNDArray bool_array_value (void) const
     { return matrix; }
 
   octave_value convert_to_str_internal (bool pad, bool force) const;
 
+  void print_raw (std::ostream& os, bool pr_as_read_syntax = false) const;
+
 protected:
 
   DECLARE_OCTAVE_ALLOCATOR
 
   DECLARE_OV_TYPEID_FUNCTIONS_AND_DATA
 };
 
 #endif
diff --git a/src/ov-ch-mat.cc b/src/ov-ch-mat.cc
--- a/src/ov-ch-mat.cc
+++ b/src/ov-ch-mat.cc
@@ -92,13 +92,21 @@ octave_char_matrix::complex_value (bool)
       retval = matrix (0, 0);
     }
   else
     gripe_invalid_conversion ("character matrix", "complex scalar");
 
   return retval;
 }
 
+void
+octave_char_matrix::print_raw (std::ostream& os,
+			       bool pr_as_read_syntax) const
+{
+  octave_print_internal (os, matrix, pr_as_read_syntax,
+			 current_print_indent_level ());
+}
+
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
diff --git a/src/ov-ch-mat.h b/src/ov-ch-mat.h
--- a/src/ov-ch-mat.h
+++ b/src/ov-ch-mat.h
@@ -107,16 +107,18 @@ public:
     { return matrix.matrix_value (); }
 
   charNDArray char_array_value (bool = false) const
     { return matrix; }
 
   octave_value convert_to_str_internal (bool, bool) const
     { return octave_value (matrix.matrix_value (), true); }
 
+  void print_raw (std::ostream& os, bool pr_as_read_syntax = false) const;
+
 protected:
 
   DECLARE_OCTAVE_ALLOCATOR
 
   DECLARE_OV_TYPEID_FUNCTIONS_AND_DATA
 };
 
 #endif
diff --git a/src/ov-cx-mat.cc b/src/ov-cx-mat.cc
--- a/src/ov-cx-mat.cc
+++ b/src/ov-cx-mat.cc
@@ -167,13 +167,21 @@ octave_complex_matrix::complex_value (bo
 }
 
 ComplexMatrix
 octave_complex_matrix::complex_matrix_value (bool) const
 {
   return matrix.matrix_value ();
 }
 
+void
+octave_complex_matrix::print_raw (std::ostream& os,
+				  bool pr_as_read_syntax) const
+{
+  octave_print_internal (os, matrix, pr_as_read_syntax,
+			 current_print_indent_level ());
+}
+
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
diff --git a/src/ov-cx-mat.h b/src/ov-cx-mat.h
--- a/src/ov-cx-mat.h
+++ b/src/ov-cx-mat.h
@@ -103,16 +103,18 @@ public:
   ComplexMatrix complex_matrix_value (bool = false) const;
 
   ComplexNDArray complex_array_value (bool = false) const { return matrix; }
 
   void increment (void) { matrix += Complex (1.0); }
 
   void decrement (void) { matrix -= Complex (1.0); }
 
+  void print_raw (std::ostream& os, bool pr_as_read_syntax = false) const;
+
 private:
 
   DECLARE_OCTAVE_ALLOCATOR
 
   DECLARE_OV_TYPEID_FUNCTIONS_AND_DATA
 };
 
 #endif
diff --git a/src/ov-fcn.h b/src/ov-fcn.h
--- a/src/ov-fcn.h
+++ b/src/ov-fcn.h
@@ -22,16 +22,18 @@ Software Foundation, 59 Temple Place - S
 
 #if !defined (octave_function_h)
 #define octave_function_h 1
 
 #if defined (__GNUG__) && defined (USE_PRAGMA_INTERFACE_IMPLEMENTATION)
 #pragma interface
 #endif
 
+#include <cstdlib>
+
 #include <string>
 
 #include "oct-time.h"
 #include "str-vec.h"
 
 #include "oct-alloc.h"
 #include "ov-base.h"
 #include "ov-typeinfo.h"
@@ -40,16 +42,18 @@ class tree_walker;
 
 // Functions.
 
 class
 octave_function : public octave_base_value
 {
 public:
 
+  octave_function (void) { abort (); }
+
   octave_function (const octave_function& f)
     : octave_base_value (), my_name (f.my_name), doc (f.doc) { }
 
   ~octave_function (void) { }
 
   octave_value *clone (void) const;
   octave_value *empty_clone (void) const;
 
@@ -89,18 +93,16 @@ protected:
   // The name of this function.
   std::string my_name;
 
   // The help text for this function.
   std::string doc;
 
 private:
 
-  octave_function (void);
-
   DECLARE_OCTAVE_ALLOCATOR
 };
 
 #endif
 
 /*
 ;; Local Variables: ***
 ;; mode: C++ ***
diff --git a/src/ov-file.cc b/src/ov-file.cc
--- a/src/ov-file.cc
+++ b/src/ov-file.cc
@@ -82,17 +82,17 @@ octave_file::print_raw (std::ostream& os
   newline (os);
 
   indent (os);
   os << "arch = "
      << oct_mach_info::float_format_as_string (stream.float_format ());
   newline (os);
 
   indent (os);
-  os << "status = " << stream.is_open () ? "open" : "closed";
+  os << "status = " << (stream.is_open () ? "open" : "closed");
   newline (os);
 
   decrement_indent_level ();
 
   indent (os); os << "}";
 }
 
 bool
diff --git a/src/ov-mapper.cc b/src/ov-mapper.cc
--- a/src/ov-mapper.cc
+++ b/src/ov-mapper.cc
@@ -38,76 +38,69 @@ Software Foundation, 59 Temple Place - S
 
 DEFINE_OCTAVE_ALLOCATOR (octave_mapper);
 
 DEFINE_OV_TYPEID_FUNCTIONS_AND_DATA (octave_mapper,
 				     "built-in mapper function",
 				     "built-in mapper function");
 
 static bool
-any_element_less_than (const Matrix& a, double val)
+any_element_less_than (const NDArray& a, double val)
 {
-  int nr = a.rows ();
-  int nc = a.columns ();
+  int len = a.length ();
 
-  for (int j = 0; j < nc; j++)
-    for (int i = 0; i < nr; i++)
-      {
-	OCTAVE_QUIT;
+  for (int i = 0; i < len; i++)
+    {
+      OCTAVE_QUIT;
 
-	if (a (i, j) < val)
-	  return true;
-      }
+      if (a(i) < val)
+	return true;
+    }
 
   return false;
 }
 
 static bool
-any_element_greater_than (const Matrix& a, double val)
+any_element_greater_than (const NDArray& a, double val)
 {
-  int nr = a.rows ();
-  int nc = a.columns ();
+  int len = a.length ();
 
-  for (int j = 0; j < nc; j++)
-    for (int i = 0; i < nr; i++)
-      {
-	OCTAVE_QUIT;
+  for (int i = 0; i < len; i++)
+    {
+      OCTAVE_QUIT;
 
-	if (a (i, j) > val)
-	  return true;
-      }
+      if (a(i) > val)
+	return true;
+    }
 
   return false;
 }
 
-// In most cases, we could use the map member function from the Matrix
+// In most cases, we could use the map member function from the NDArray
 // classes, but as currently implemented, they don't allow us to
 // detect errors and abort properly.  So use these macros to do the
 // looping here instead.
 
 #define MAPPER_LOOP_2(T, F, M, CONV, R) \
   do \
     { \
-      int nr = M.rows (); \
-      int nc = M.cols (); \
+      int len = M.length (); \
  \
-      T result (nr, nc); \
+      T result (M.dims ()); \
  \
-      for (int j = 0; j < nc; j++) \
+      for (int i = 0; i < len; i++) \
 	{ \
-	   for (int i = 0; i < nr; i++) \
-	     { \
-                OCTAVE_QUIT; \
+          OCTAVE_QUIT; \
+ \
+	  result(i) = CONV (F (M(i))); \
  \
-		result (i, j) = CONV (F (M (i, j))); \
+	  if (error_state) \
+	    return retval; \
+	} \
  \
-		if (error_state) \
-		  return retval; \
-	     } \
-	} \
       retval = R; \
     } \
   while (0)
 
 #define MAPPER_LOOP_1(T, F, M, CONV) \
   MAPPER_LOOP_2 (T, F, M, CONV, result)
 
 #define MAPPER_LOOP(T, F, M) \
@@ -140,35 +133,35 @@ octave_mapper::apply (const octave_value
 	  else if (d_b_map_fcn)
 	    retval = d_b_map_fcn (d);
 	  else
 	    error ("%s: unable to handle real arguments",
 		   name().c_str ());
 	}
       else
 	{
-	  Matrix m = arg.matrix_value ();
+	  NDArray m = arg.array_value ();
 
 	  if (error_state)
 	    return retval;
 
 	  if (can_ret_cmplx_for_real
 	      && (any_element_less_than (m, lower_limit)
 		  || any_element_greater_than (m, upper_limit)))
 	    {
 	      if (c_c_map_fcn)
-		MAPPER_LOOP (ComplexMatrix, c_c_map_fcn, m);
+		MAPPER_LOOP (ComplexNDArray, c_c_map_fcn, m);
 	      else
 		error ("%s: unable to handle real arguments",
 		       name().c_str ());
 	    }
 	  else if (d_d_map_fcn)
-	    MAPPER_LOOP (Matrix, d_d_map_fcn, m);
+	    MAPPER_LOOP (NDArray, d_d_map_fcn, m);
 	  else if (d_b_map_fcn)
-	    MAPPER_LOOP (boolMatrix, d_b_map_fcn, m);
+	    MAPPER_LOOP (boolNDArray, d_b_map_fcn, m);
 	  else
 	    error ("%s: unable to handle real arguments",
 		   name().c_str ());
 	}
     }
   else if (arg.is_complex_type ())
     {
       if (arg.is_scalar_type ())
@@ -182,56 +175,56 @@ octave_mapper::apply (const octave_value
 	  else if (c_b_map_fcn)
 	    retval = c_b_map_fcn (c);
 	  else
 	    error ("%s: unable to handle complex arguments",
 		   name().c_str ());
 	}
       else
 	{
-	  ComplexMatrix cm = arg.complex_matrix_value ();
+	  ComplexNDArray cm = arg.complex_array_value ();
 
 	  if (error_state)
 	    return retval;
 
 	  if (d_c_map_fcn)
-	    MAPPER_LOOP (Matrix, d_c_map_fcn, cm);
+	    MAPPER_LOOP (NDArray, d_c_map_fcn, cm);
 	  else if (c_c_map_fcn)
-	    MAPPER_LOOP (ComplexMatrix, c_c_map_fcn, cm);
+	    MAPPER_LOOP (ComplexNDArray, c_c_map_fcn, cm);
 	  else if (c_b_map_fcn)
-	    MAPPER_LOOP (boolMatrix, c_b_map_fcn, cm);
+	    MAPPER_LOOP (boolNDArray, c_b_map_fcn, cm);
 	  else
 	    error ("%s: unable to handle complex arguments",
 		   name().c_str ());
 	}
     }
   else if (ch_map_fcn)
     {
       // XXX FIXME XXX -- this could be done in a better way...
 
       octave_value tmp = arg.convert_to_str ();
 
       if (! error_state)
 	{
-	  charMatrix chm = tmp.char_matrix_value ();
+	  charNDArray chm = tmp.char_array_value ();
 
 	  if (! error_state)
 	    {
 	      switch (ch_map_flag)
 		{
 		case 0:
-		  MAPPER_LOOP_1 (boolMatrix, ch_map_fcn, chm, bool);
+		  MAPPER_LOOP_1 (boolNDArray, ch_map_fcn, chm, bool);
 		  break;
 
 		case 1:
-		  MAPPER_LOOP (Matrix, ch_map_fcn, chm);
+		  MAPPER_LOOP (NDArray, ch_map_fcn, chm);
 		  break;
 
 		case 2:
-		  MAPPER_LOOP_2 (charMatrix, ch_map_fcn, chm, ,
+		  MAPPER_LOOP_2 (charNDArray, ch_map_fcn, chm, ,
 				 octave_value (result, true));
 		  break;
 
 		default:
 		  panic_impossible ();
 		  break;
 		}
 	    }
diff --git a/src/ov-re-mat.cc b/src/ov-re-mat.cc
--- a/src/ov-re-mat.cc
+++ b/src/ov-re-mat.cc
@@ -199,13 +199,21 @@ octave_matrix::convert_to_str_internal (
 
 	  retval = octave_value (chm, 1);
 	}
     }
 
   return retval;
 }
 
+void
+octave_matrix::print_raw (std::ostream& os,
+			  bool pr_as_read_syntax) const
+{
+  octave_print_internal (os, matrix, pr_as_read_syntax,
+			 current_print_indent_level ());
+}
+
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
diff --git a/src/ov-re-mat.h b/src/ov-re-mat.h
--- a/src/ov-re-mat.h
+++ b/src/ov-re-mat.h
@@ -104,16 +104,18 @@ public:
   NDArray array_value (bool = false) const { return matrix; }
 
   void increment (void) { matrix += 1.0; }
 
   void decrement (void) { matrix -= 1.0; }
 
   octave_value convert_to_str_internal (bool pad, bool force) const;
 
+  void print_raw (std::ostream& os, bool pr_as_read_syntax = false) const;
+
 private:
 
   DECLARE_OCTAVE_ALLOCATOR
 
   DECLARE_OV_TYPEID_FUNCTIONS_AND_DATA
 };
 
 #endif
diff --git a/src/ov-str-mat.cc b/src/ov-str-mat.cc
--- a/src/ov-str-mat.cc
+++ b/src/ov-str-mat.cc
@@ -45,17 +45,17 @@ DEFINE_OCTAVE_ALLOCATOR (octave_char_mat
 
 DEFINE_OV_TYPEID_FUNCTIONS_AND_DATA (octave_char_matrix_str, "string", "char");
 
 static octave_value *
 default_numeric_conversion_function (const octave_value& a)
 {
   CAST_CONV_ARG (const octave_char_matrix_str&);
 
-  Matrix m = v.matrix_value ();
+  Matrix m = v.matrix_value (true);
 
   return error_state ? 0 : new octave_matrix (m);
 }
 
 type_conv_fcn
 octave_char_matrix_str::numeric_conversion_function (void) const
 {
   return default_numeric_conversion_function;
@@ -126,25 +126,48 @@ octave_char_matrix_str::assign (const oc
 bool
 octave_char_matrix_str::valid_as_scalar_index (void) const
 {
   bool retval = false;
   error ("octave_char_matrix_str::valid_as_scalar_index(): not implemented");
   return retval;
 }
 
+double
+octave_char_matrix_str::double_value (bool force_string_conv) const
+{
+  double retval = 0;
+
+  if (! force_string_conv)
+    gripe_invalid_conversion ("string", "real scalar");
+  else
+    {
+      if (Vwarn_str_to_num)
+	gripe_implicit_conversion ("string", "real scalar");
+
+      retval = octave_char_matrix::double_value ();
+    }
+
+  return retval;
+}
+
 Matrix
 octave_char_matrix_str::matrix_value (bool force_string_conv) const
 {
   Matrix retval;
 
-  if (! force_string_conv && Vwarn_str_to_num)
-    gripe_implicit_conversion ("string", "real matrix");
+  if (! force_string_conv)
+    gripe_invalid_conversion ("string", "real matrix");
+  else
+    {
+      if (Vwarn_str_to_num)
+	gripe_implicit_conversion ("string", "real matrix");
 
-  retval = Matrix (matrix.matrix_value ());
+      retval = octave_char_matrix::matrix_value ();
+    }
 
   return retval;
 }
 
 string_vector
 octave_char_matrix_str::all_strings (bool, bool) const
 {
   string_vector retval;
diff --git a/src/ov-str-mat.h b/src/ov-str-mat.h
--- a/src/ov-str-mat.h
+++ b/src/ov-str-mat.h
@@ -99,16 +99,18 @@ public:
   bool is_real_type (void) const { return false; }
 
   bool is_matrix_type (void) const { return false; }
 
   bool is_numeric_type (void) const { return false; }
 
   bool valid_as_scalar_index (void) const;
 
+  double double_value (bool = false) const;
+
   Matrix matrix_value (bool = false) const;
 
   string_vector all_strings (bool pad = false, bool force = false) const;
 
   std::string string_value (bool force = false) const;
 
   bool print_as_scalar (void) const { return (rows () <= 1); }
 
diff --git a/src/ov.cc b/src/ov.cc
--- a/src/ov.cc
+++ b/src/ov.cc
@@ -42,16 +42,17 @@ Software Foundation, 59 Temple Place - S
 #include "ov-re-mat.h"
 #include "ov-complex.h"
 #include "ov-cx-mat.h"
 #include "ov-ch-mat.h"
 #include "ov-str-mat.h"
 #include "ov-range.h"
 #include "ov-struct.h"
 #include "ov-file.h"
+#include "ov-streamoff.h"
 #include "ov-list.h"
 #include "ov-cs-list.h"
 #include "ov-colon.h"
 #include "ov-va-args.h"
 #include "ov-builtin.h"
 #include "ov-mapper.h"
 #include "ov-usr-fcn.h"
 #include "ov-fcn-handle.h"
@@ -587,16 +588,22 @@ octave_value::octave_value (const Octave
 }
 
 octave_value::octave_value (const octave_stream& s, int n)
   : rep (new octave_file (s, n))
 {
   rep->count = 1;
 }
 
+octave_value::octave_value (const streamoff_array& off)
+  : rep (new octave_streamoff (off))
+{
+  rep->count = 1;
+}
+
 octave_value::octave_value (octave_function *f)
   : rep (f)
 {
   rep->count = 1;
 }
 
 octave_value::octave_value (const octave_fcn_handle& fh)
   : rep (new octave_fcn_handle (fh))
@@ -918,16 +925,22 @@ octave_value::stream_value (void) const
 }
 
 int
 octave_value::stream_number (void) const
 {
   return rep->stream_number ();
 }
 
+streamoff_array
+octave_value::streamoff_value (void) const
+{
+  return rep->streamoff_value ();
+}
+
 octave_function *
 octave_value::function_value (bool silent)
 {
   return rep->function_value (silent);
 }
 
 octave_fcn_handle *
 octave_value::fcn_handle_value (bool silent)
@@ -1874,16 +1887,18 @@ install_types (void)
   octave_file::register_type ();
   octave_list::register_type ();
   octave_cs_list::register_type ();
   octave_all_va_args::register_type ();
   octave_magic_colon::register_type ();
   octave_builtin::register_type ();
   octave_mapper::register_type ();
   octave_user_function::register_type ();
+  octave_fcn_handle::register_type ();
+  octave_streamoff::register_type ();
 }
 
 static int
 warn_fortran_indexing (void)
 {
   Vwarn_fortran_indexing = check_preference ("warn_fortran_indexing");
 
   liboctave_wfi_flag = Vwarn_fortran_indexing;
diff --git a/src/ov.h b/src/ov.h
--- a/src/ov.h
+++ b/src/ov.h
@@ -37,18 +37,20 @@ Software Foundation, 59 Temple Place - S
 #include "Range.h"
 #include "idx-vector.h"
 #include "mx-base.h"
 #include "oct-alloc.h"
 #include "oct-time.h"
 #include "str-vec.h"
 
 class Cell;
+class streamoff_array;
 class Octave_map;
 class octave_stream;
+class octave_streamoff;
 class octave_function;
 class octave_fcn_handle;
 class octave_value_list;
 class octave_lvalue;
 
 // Constants.
 
 // This just provides a way to avoid infinite recursion when building
@@ -204,16 +206,17 @@ public:
   octave_value (const std::string& s);
   octave_value (const string_vector& s);
   octave_value (const charMatrix& chm, bool is_string = false);
   octave_value (const charNDArray& chnda, bool is_string = false);
   octave_value (double base, double limit, double inc);
   octave_value (const Range& r);
   octave_value (const Octave_map& m);
   octave_value (const octave_stream& s, int n);
+  octave_value (const streamoff_array& off);
   octave_value (octave_function *f);
   octave_value (const octave_fcn_handle& fh);
   octave_value (const octave_value_list& m, bool is_cs_list = false);
   octave_value (octave_value::magic_colon);
   octave_value (octave_value::all_va_args);
 
   octave_value (octave_value *new_rep, int count = 1);
 
@@ -382,16 +385,19 @@ public:
     { return rep->is_range (); }
 
   virtual bool is_map (void) const
     { return rep->is_map (); }
 
   virtual bool is_stream (void) const
     { return rep->is_stream (); }
 
+  virtual bool is_streamoff (void) const
+    { return rep->is_streamoff (); }
+
   virtual bool is_cs_list (void) const
     { return rep->is_cs_list (); }
 
   virtual bool is_list (void) const
     { return rep->is_list (); }
 
   virtual bool is_magic_colon (void) const
     { return rep->is_magic_colon (); }
@@ -537,16 +543,18 @@ public:
 
   virtual string_vector map_keys (void) const
     { return rep->map_keys (); }
 
   virtual octave_stream stream_value (void) const;
 
   virtual int stream_number (void) const;
 
+  virtual streamoff_array streamoff_value (void) const;
+
   virtual octave_function *function_value (bool silent = false);
 
   virtual octave_fcn_handle *fcn_handle_value (bool silent = false);
 
   virtual octave_value_list list_value (void) const;
 
   ColumnVector column_vector_value (bool frc_str_conv = false,
 			     bool frc_vec_conv = false) const;
