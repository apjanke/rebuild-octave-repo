# HG changeset patch
# User Rik <rik@octave.org>
# Date 1545953922 28800
#      Thu Dec 27 15:38:42 2018 -0800
# Branch stable
# Node ID 3592ad04b0c642b33d329dba24ad1ec2a5968690
# Parent  44670b45ff3b0a67032342fa72bea28a0748c955
Fix unexpected "xlim" error when re-parenting hggroup (bug #55308).

* graphics.cc (axes::update_axis_limits (string, graphics_handle): Declare
limits to be a 1x2 Matrix.  Re-define FIX_LIMITS macro to work with only two
elements since axes object does not maintain a 1x4 vector for axes limits.
Remove resize calls on "limits" matrix.
* graphics.cc (axes::update_axis_limits (string)): Add FIXME about unneccessary
calls to this function degrading graphics performance.

* test/bug-55308/bug-55308.tst: Add fixed test for re-parenting.

* test/bug-55308/module.mk: Add fixed test to build system.

diff --git a/libinterp/corefcn/graphics.cc b/libinterp/corefcn/graphics.cc
--- a/libinterp/corefcn/graphics.cc
+++ b/libinterp/corefcn/graphics.cc
@@ -8170,43 +8170,26 @@ axes::update_axis_limits (const std::str
 
   double min_val = octave::numeric_limits<double>::Inf ();
   double max_val = -octave::numeric_limits<double>::Inf ();
   double min_pos = octave::numeric_limits<double>::Inf ();
   double max_neg = -octave::numeric_limits<double>::Inf ();
 
   char update_type = 0;
 
-  Matrix limits;
+  Matrix limits (1, 2);
   double val;
 
-#define FIX_LIMITS                              \
-  if (limits.numel () == 4)                     \
-    {                                           \
-      val = limits(0);                          \
-      if (octave::math::isfinite (val))         \
-        min_val = val;                          \
-      val = limits(1);                          \
-      if (octave::math::isfinite (val))         \
-        max_val = val;                          \
-      val = limits(2);                          \
-      if (octave::math::isfinite (val))         \
-        min_pos = val;                          \
-      val = limits(3);                          \
-      if (octave::math::isfinite (val))         \
-        max_neg = val;                          \
-    }                                           \
-  else                                          \
-    {                                           \
-      limits.resize (4, 1);                     \
-      limits(0) = min_val;                      \
-      limits(1) = max_val;                      \
-      limits(2) = min_pos;                      \
-      limits(3) = max_neg;                      \
-    }
+#define FIX_LIMITS                          \
+  val = limits(0);                          \
+  if (octave::math::isfinite (val))         \
+    min_val = val;                          \
+  val = limits(1);                          \
+  if (octave::math::isfinite (val))         \
+    max_val = val;
 
   if (axis_type == "xdata" || axis_type == "xscale"
       || axis_type == "xlimmode" || axis_type == "xliminclude"
       || axis_type == "xlim")
     {
       limits = xproperties.get_xlim ().matrix_value ();
       FIX_LIMITS;
 
@@ -8262,17 +8245,17 @@ axes::update_axis_limits (const std::str
 
           limits = xproperties.get_axis_limits (min_val, max_val,
                                                 min_pos, max_neg,
                                                 xproperties.zscale_is ("log"));
         }
       else
         {
           // FIXME: get_children_limits is only needed here in order to know
-          // if there are 3D children. Is there a way to avoid this call?
+          // if there are 3D children.  Is there a way to avoid this call?
           get_children_limits (min_val, max_val, min_pos, max_neg, kids, 'z');
 
           xproperties.set_has3Dkids ((max_val - min_val) >
                                       std::numeric_limits<double>::epsilon ());
 
           xproperties.check_axis_limits (limits, kids,
                                          xproperties.zscale_is ("log"),
                                          update_type);
@@ -8295,24 +8278,21 @@ axes::update_axis_limits (const std::str
               max_val = 1;
             }
           else if (min_val == max_val)
             {
               max_val = min_val + 1;
               min_val -= 1;
             }
 
-          limits.resize (1, 2);
-
           limits(0) = min_val;
           limits(1) = max_val;
 
           update_type = 'c';
         }
-
     }
   else if (axis_type == "alphadata" || axis_type == "alimmode"
            || axis_type == "alphadatamapping" || axis_type == "aliminclude"
            || axis_type == "alim")
     {
       if (xproperties.alimmode_is ("auto"))
         {
           limits = xproperties.get_alim ().matrix_value ();
@@ -8323,24 +8303,21 @@ axes::update_axis_limits (const std::str
           if (min_val > max_val)
             {
               min_val = min_pos = 0;
               max_val = 1;
             }
           else if (min_val == max_val)
             max_val = min_val + 1;
 
-          limits.resize (1, 2);
-
           limits(0) = min_val;
           limits(1) = max_val;
 
           update_type = 'a';
         }
-
     }
 
 #undef FIX_LIMITS
 
   octave::unwind_protect frame;
   frame.protect_var (updating_axis_limits);
 
   updating_axis_limits.insert (get_handle ().value ());
@@ -8384,16 +8361,19 @@ axes::update_axis_limits (const std::str
 
     default:
       break;
     }
 
   xproperties.update_transform ();
 }
 
+// FIXME: This function is called repeatedly while the axes are being set up.
+// There is probably some way to make this more efficient.
+
 void
 axes::update_axis_limits (const std::string& axis_type)
 {
   if ((updating_axis_limits.find (get_handle ().value ())
        != updating_axis_limits.end ())
       || (updating_aspectratios.find (get_handle ().value ())
           != updating_aspectratios.end ()))
     return;
diff --git a/test/bug-55308/bug-55308.tst b/test/bug-55308/bug-55308.tst
new file mode 100644
--- /dev/null
+++ b/test/bug-55308/bug-55308.tst
@@ -0,0 +1,28 @@
+## Copyright (C) 2018 Rik Wehbring
+##
+## This file is part of Octave.
+##
+## Octave is free software: you can redistribute it and/or modify it
+## under the terms of the GNU General Public License as published by
+## the Free Software Foundation, either version 3 of the License, or
+## (at your option) any later version.
+##
+## Octave is distributed in the hope that it will be useful, but
+## WITHOUT ANY WARRANTY; without even the implied warranty of
+## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+## GNU General Public License for more details.
+##
+## You should have received a copy of the GNU General Public License
+## along with Octave; see the file COPYING.  If not, see
+## <https://www.gnu.org/licenses/>.
+
+%!test
+%! hf = figure ("visible", "off");
+%! unwind_protect
+%!   hg = hggroup ();
+%!   axis ([-2, 2, -2, 2]);
+%!   hl = line ([0;1], [0;0], "color", "r");
+%!   set (hl, "parent", hg);
+%! unwind_protect_cleanup
+%!   close (hf);
+%! end_unwind_protect
diff --git a/test/bug-55308/module.mk b/test/bug-55308/module.mk
new file mode 100644
--- /dev/null
+++ b/test/bug-55308/module.mk
@@ -0,0 +1,4 @@
+bug_55308_TEST_FILES = \
+  %reldir%/bug-55308.tst
+
+TEST_FILES += $(bug_55308_TEST_FILES)
