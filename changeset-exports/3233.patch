# HG changeset patch
# User jwe
# Date 917468626 0
#      Wed Jan 27 20:23:46 1999 +0000
# Node ID 98d0ee053ba44a94b5b11ec0b3e9ac2d3708c28c
# Parent  3f6ae91e86b06d1c89d17b36b6b30db8fdb7d446
[project @ 1999-01-27 20:23:40 by jwe]

diff --git a/ChangeLog b/ChangeLog
--- a/ChangeLog
+++ b/ChangeLog
@@ -1,8 +1,33 @@
+Wed Jan 20 12:56:02 1999  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* configure.in: Don't put -O in FFLAGS for powerpc-apple-machten*.
+
+Wed Dec  9 14:02:45 1998  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* Makeconf.in (RDYNAMIC_FLAG): Substitute RDYNAMIC_FLAG here.
+	* configure.in: Check for G++ compiler flag -rdynamic if setting
+	up to support dynamic linking, and substitute RDYNAMIC_FLAG if
+	-rdynamic is accepted.
+	* aclocal.m4 (OCTAVE_CC_FLAG, OCTAVE_CXX_FLAG): Clarify usage comment.
+
+Mon Dec  7 19:49:26 1998  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* configure.in: Check for -lm just after compiler tests.
+	Remove -lm from other macro calls.  Don't check for -lm on NeXT
+	systems.  Eric Norum <eric@skatter.usask.ca> says /lib/libsys_s.a
+	has all the routines that are traditionally in libc.a and libm.a
+	on *NIX systems.  NeXT also supplies a libm.a, but it seems to be
+	horribly buggy.
+
+Sat Dec  5 10:48:40 1998  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* mkoctfile.in: Correctly handle -?.
+
 Fri Dec  4 18:05:51 1998  Kurt Hornik  <Kurt.Hornik@ci.tuwien.ac.at>
 
 	* emacs/octave-mod.el (octave-abbrev-start): Use the correct name
 	of the abbrev table, and provide support for XEmacs.
 	(octave-xemacs-p): New variable.
 
 Tue Nov 24 23:31:50 1998  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
diff --git a/Makeconf.in b/Makeconf.in
--- a/Makeconf.in
+++ b/Makeconf.in
@@ -124,16 +124,18 @@ LD_STATIC_FLAG = @LD_STATIC_FLAG@
 ALL_LDFLAGS = $(LIBFLAGS) $(FORTRAN_MAIN_FLAG) \
 	$(LD_STATIC_FLAG) $(CPICFLAG) $(LDFLAGS)
 
 SH_LD = @SH_LD@
 SH_LDFLAGS = @SH_LDFLAGS@
 
 SONAME_FLAGS = @SONAME_FLAGS@
 
+RDYNAMIC_FLAG = @RDYNAMIC_FLAG@
+
 RLD_FLAG = @RLD_FLAG@
 
 FLIBS = @FLIBS@
 
 TERMLIBS = @TERMLIBS@
 LIBDLFCN = @LIBDLFCN@
 LIBGLOB = @LIBGLOB@
 LIBPLPLOT = @LIBPLPLOT@
diff --git a/aclocal.m4 b/aclocal.m4
--- a/aclocal.m4
+++ b/aclocal.m4
@@ -670,18 +670,20 @@ EOB
     AC_LANG_RESTORE
   ])
   AC_MSG_RESULT($octave_cv_cxx_new_friend_template_decl)
   if test $octave_cv_cxx_new_friend_template_decl = yes; then
     AC_DEFINE(CXX_NEW_FRIEND_TEMPLATE_DECL)
   fi
 ])
 dnl
-dnl Check to see if C compiler handles FLAG command line option and
-dnl add it to CFLAGS if it does.
+dnl Check to see if C compiler handles FLAG command line option.  If
+dnl two arguments are specified, execute the second arg as shell
+dnl commands.  Otherwise, add FLAG to CFLAGS if the compiler accepts
+dnl the flag.
 dnl
 dnl OCTAVE_CC_FLAG
 AC_DEFUN(OCTAVE_CC_FLAG, [
   ac_safe=`echo "$1" | sed 'y%./+-%__p_%'`
   AC_MSG_CHECKING(whether ${CC-cc} accepts $1)
   AC_CACHE_VAL(octave_cv_cc_flag_$ac_safe, [
     AC_LANG_SAVE
     AC_LANG_C
@@ -699,18 +701,20 @@ AC_DEFUN(OCTAVE_CC_FLAG, [
       CFLAGS="$CFLAGS $1"
       AC_MSG_RESULT([adding $1 to CFLAGS])], [$2])
   else
     AC_MSG_RESULT(no)
     ifelse([$3], , , [$3])
   fi
 ])
 dnl
-dnl Check to see if C++ compiler handles FLAG command line option and
-dnl add it to CXXFLAGS if it does.
+dnl Check to see if C++ compiler handles FLAG command line option.  If
+dnl two arguments are specified, execute the second arg as shell
+dnl commands.  Otherwise, add FLAG to CXXFLAGS if the compiler accepts
+dnl the flag.
 dnl
 dnl OCTAVE_CXX_FLAG
 AC_DEFUN(OCTAVE_CXX_FLAG, [
   ac_safe=`echo "$1" | sed 'y%./+-%__p_%'`
   AC_MSG_CHECKING(whether ${CXX-g++} accepts $1)
   AC_CACHE_VAL(octave_cv_cxx_flag_$ac_safe, [
     AC_LANG_SAVE
     AC_LANG_CPLUSPLUS
diff --git a/configure.in b/configure.in
--- a/configure.in
+++ b/configure.in
@@ -16,17 +16,17 @@ dnl Copyright (C) 1996, 1997 John W. Eat
 ### FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
 ### for more details.
 ### 
 ### You should have received a copy of the GNU General Public License
 ### along with Octave; see the file COPYING.  If not, write to the Free
 ### Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ### 02111-1307, USA. 
 
-AC_REVISION($Revision: 1.314 $)
+AC_REVISION($Revision: 1.315 $)
 AC_PREREQ(2.9)
 AC_INIT(src/octave.cc)
 AC_CONFIG_HEADER(config.h)
 
 AC_DEFINE(OCTAVE_SOURCE, 1)
 
 OCTAVE_HOST_TYPE
 
@@ -388,16 +388,19 @@ else
         alpha*-*-*)
           if test "$octave_cv_f77_is_g77" = yes \
 	      || test -z "$ieee_fp_flag" ; then
             true
 	  else
 	    FFLAGS="-fpe1 $FFLAGS"
 	  fi
         ;;
+	powerpc-apple-machten*)
+	  FFLAGS=
+	;;
       esac
       if test -n "$FFLAGS"; then
         AC_MSG_RESULT([defining FFLAGS to be $FFLAGS])
       fi
     fi
   fi
   if test -n "$F77"; then
     have_fortran_compiler=true
diff --git a/doc/interpreter/control.texi b/doc/interpreter/control.texi
--- a/doc/interpreter/control.texi
+++ b/doc/interpreter/control.texi
@@ -1,17 +1,17 @@
 @c Copyright (C) 1996, 1997 John W. Eaton
 @c This is part of the Octave manual.
 @c For copying conditions, see the file gpl.texi.
 
 @node Control Theory, Signal Processing, Polynomial Manipulations, Top
 @chapter Control Theory
 
 The Octave Control Systems Toolbox (OCST) was initially developed
-by Dr.\ A.\ Scottedward Hodel 
+by Dr.@: A. Scottedward Hodel 
 @email{a.s.hodel@@eng.auburn.edu} with the assistance
 of his students
 @itemize @bullet
 @item R. Bruce Tenison @email{btenison@@dibbs.net}, 
 @item David C. Clem,
 @item John E. Ingram @email{John.Ingram@@sea.siemans.com}, and 
 @item Kristi McGowan.  
 @end itemize
@@ -2026,17 +2026,17 @@ Actual system gain lies in the interval 
 @end table
 
  References:
  Doyle, Glover, Khargonekar, Francis, "State space solutions to standard
     H2 and Hinf control problems", IEEE TAC August 1989
  Iglesias and Glover, "State-Space approach to discrete-time Hinf control,"
     Int. J. Control, vol 54, #5, 1991
  Zhou, Doyle, Glover, "Robust and Optimal Control," Prentice-Hall, 1996
- $Revision: 1.8 $
+ $Revision: 1.9 $
 @end deftypefn
 
 @deftypefn {Function File } { @var{Qb} =} obsv (@var{sys}@{, @var{c}@})
 Build observability matrix
 @example
 @group
      | C        |
      | CA       |
@@ -3331,17 +3331,17 @@ Written by: Jose Daniel Munoz Frias.
    @var{axdata} nx2 matrix of data [x,y]
 
 @strong{Outputs}
    @var{axvec} vector of axis limits appropriate for call to axis() function
 @end deftypefn
 
 @deftypefn {Function File } { outputs =} mb ( inputs ) 
 @format
- $Revision: 1.8 $
+ $Revision: 1.9 $
 
 
 @end format
 @end deftypefn
 
 @deftypefn {Function File } { outputs =} moddemo ( inputs ) 
 @format
  Octave Controls toolbox demo: Model Manipulations demo
diff --git a/doc/interpreter/io.texi b/doc/interpreter/io.texi
--- a/doc/interpreter/io.texi
+++ b/doc/interpreter/io.texi
@@ -140,18 +140,18 @@ Note that the output from @code{disp} al
 
 @deffn {Command} format options
 Control the format of the output produced by @code{disp} and Octave's
 normal echoing mechanism.  Valid options are listed in the following
 table.
 
 @table @code
 @item short
-This is the default format.  Octave will try to print numbers with at
-least 5 significant figures within a field that is a maximum of 10
+Octave will try to print numbers with at
+least 3 significant figures within a field that is a maximum of 8
 characters wide.
 
 If Octave is unable to format a matrix so that columns line up on the
 decimal point and all the numbers fit within the maximum field width,
 it switches to an @samp{e} format.
 
 @item long
 Octave will try to print numbers with at least 15 significant figures
@@ -208,16 +208,26 @@ 01010100010001000010110100011000
 @end group
 @end example
 
 (shown here in two 32 bit sections for typesetting purposes) when
 printed in bit format on a workstation which stores 8 byte real values
 in IEEE format with the least significant byte first.  This format only
 works for numeric types.
 @end table
+
+By default, Octave will try to print numbers with at least 5 significant
+figures within a field that is a maximum of 10 characters wide.
+
+If Octave is unable to format a matrix so that columns line up on the
+decimal point and all the numbers fit within the maximum field width,
+it switches to an @samp{e} format.
+
+If @code{format} is invoked without any options, the default format
+state is restored.
 @end deffn
 
 @defvr {Built-in Variable} print_answer_id_name
 If the value of @code{print_answer_id_name} is nonzero, variable
 names are printed along with the result.  Otherwise, only the result
 values are printed.  The default value is 1.
 @end defvr
 
diff --git a/liboctave/CMatrix.cc b/liboctave/CMatrix.cc
--- a/liboctave/CMatrix.cc
+++ b/liboctave/CMatrix.cc
@@ -1690,35 +1690,31 @@ operator * (const ComplexColumnVector& a
 }
 
 ComplexMatrix
 operator * (const ComplexColumnVector& v, const ComplexRowVector& a)
 {
   ComplexMatrix retval;
 
   int len = v.length ();
-  int a_len = a.length ();
-
-  if (len != a_len)
-    gripe_nonconformant ("operator *", len, 1, 1, a_len);
-  else
+
+  if (len != 0)
     {
-      if (len != 0)
-	{
-	  retval.resize (len, a_len);
-	  Complex *c = retval.fortran_vec ();
-
-	  F77_XFCN (zgemm, ZGEMM, ("N", "N", len, a_len, 1, 1.0,
-				   v.data (), len, a.data (), 1, 0.0,
-				   c, len, 1L, 1L)); 
-
-	  if (f77_exception_encountered)
-	    (*current_liboctave_error_handler)
-	      ("unrecoverable error in zgemm");
-	}
+      int a_len = a.length ();
+
+      retval.resize (len, a_len);
+      Complex *c = retval.fortran_vec ();
+
+      F77_XFCN (zgemm, ZGEMM, ("N", "N", len, a_len, 1, 1.0,
+			       v.data (), len, a.data (), 1, 0.0,
+			       c, len, 1L, 1L)); 
+
+      if (f77_exception_encountered)
+	(*current_liboctave_error_handler)
+	  ("unrecoverable error in zgemm");
     }
 
   return retval;
 }
 
 // matrix by diagonal matrix -> matrix operations
 
 ComplexMatrix&
diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,15 @@
+Tue Jan 19 09:34:55 1999  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* dMatrix.cc (operator * (const ColumnVector& v, const RowVector& a)):
+	Don't require lengths to be equal.
+	* CMatrix.cc (operator * (const ComplexColumnVector& v, const
+	ComplexRowVector& a)): Likewise
+
 Tue Nov 24 23:38:19 1998  Eric Norum <eric@skatter.USask.Ca>
 
 	* statdefs.h: Only define mode_t if not already defined.
 
 Tue Nov 24 17:24:52 1998  john <john@arrows.demon.co.uk>
 
 	* lo-specfun.cc (airy, biry): Set imaginary part of result to zero
 	when appropriate.
diff --git a/liboctave/dMatrix.cc b/liboctave/dMatrix.cc
--- a/liboctave/dMatrix.cc
+++ b/liboctave/dMatrix.cc
@@ -1522,35 +1522,31 @@ Matrix::operator ! (void) const
 // column vector by row vector -> matrix operations
 
 Matrix
 operator * (const ColumnVector& v, const RowVector& a)
 {
   Matrix retval;
 
   int len = v.length ();
-  int a_len = a.length ();
-
-  if (len != a_len)
-    gripe_nonconformant ("operator *", len, 1, 1, a_len);
-  else
+
+  if (len != 0)
     {
-      if (len != 0)
-	{
-	  retval.resize (len, a_len);
-	  double *c = retval.fortran_vec ();
-
-	  F77_XFCN (dgemm, DGEMM, ("N", "N", len, a_len, 1, 1.0,
-				   v.data (), len, a.data (), 1, 0.0,
-				   c, len, 1L, 1L));
-
-	  if (f77_exception_encountered)
-	    (*current_liboctave_error_handler)
-	      ("unrecoverable error in dgemm");
-	}
+      int a_len = a.length ();
+
+      retval.resize (len, a_len);
+      double *c = retval.fortran_vec ();
+	  
+      F77_XFCN (dgemm, DGEMM, ("N", "N", len, a_len, 1, 1.0,
+			       v.data (), len, a.data (), 1, 0.0,
+			       c, len, 1L, 1L));
+
+      if (f77_exception_encountered)
+	(*current_liboctave_error_handler)
+	  ("unrecoverable error in dgemm");
     }
 
   return retval;
 }
 
 // other operations.
 
 Matrix
diff --git a/mkoctfile.in b/mkoctfile.in
--- a/mkoctfile.in
+++ b/mkoctfile.in
@@ -71,23 +71,23 @@ while [ $# -gt 0 ]; do
     ;;
     *.o)
       file=$1
       objfiles="$objfiles $file"
     ;;
     -d | --debug | -v | --verbose)
       dbg=echo
     ;;
-    -h | -? | --help)
+    -h | -\? | --help)
       echo $usage_msg
       cat << EOF
 
 Options:
 
-  -h, -? --help           Print this message.
+  -h, -?, --help          Print this message.
   -IDIR                   Add -IDIR to compile commands.
   -DDEF                   Add -DDEF to compile commands.
   -lLIB                   Add library LIB to link command.
   -LDIR                   Add -LDIR to link command.
   -o FILE, --output FILE  Output file name.  Default extension is .oct.
   -s, --strip             Strip output file.
   -v, --verbose           Echo commands as they are executed.
 
diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,11 +1,31 @@
+Tue Jan 12 10:31:15 1999  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* plot/__pltopt1__.m: Accept "k" to mean black.
+
+Fri Dec 11 10:43:19 1998  A Scott Hodel <hodel@edalf1.msfc.nasa.gov>
+
+	* linear-algebra/krylov.m: Force empty_list_elements_ok for this
+	function.
+
+Thu Dec 10 11:07:00 1998  A Scott Hodel <hodel@edalf1.msfc.nasa.gov>
+
+	* control/ss2sys.m: Fix typo.
+
+Wed Dec  9 12:42:19 1998  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* plot/subplot.m, plot/oneplot.m: Don't call clearplot.
+
+	* control: Update from A. S. Hodel <a.s.hodel@eng.auburn.edu> for
+	signal names as lists of strings instead of string arrays.
+
 Fri Dec  4 16:08:42 1998  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
-	* quaternion: New directory of functions from A. S. Hodel,
+	* quaternion: New directory of functions from A. S. Hodel
 	<a.s.hodel@eng.auburn.edu>.
 	* Makefile.in (SUBDIRS): Add it to the list.
 	* quaternion/Makefile.in: New file.
 	* configure.in (AC_OUTPUT): Add quaternion/Makefile.
 
 Tue Nov 24 21:41:31 1998  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* image/saveimage.m: Make it work again for black and white colormaps.
diff --git a/scripts/linear-algebra/krylov.m b/scripts/linear-algebra/krylov.m
--- a/scripts/linear-algebra/krylov.m
+++ b/scripts/linear-algebra/krylov.m
@@ -36,16 +36,19 @@ function [U,H,k1] = krylov(A,v,k,eps1,pf
   #      (pflg=1): Workspace; does not satisfy above equation.
   # k1: dimension of span of krylov subspace (based on eps1)
   # if k > m-1, krylov returns the Hessenberg decompostion of A.
 
   # Written by A. S. Hodel 1992
   # $Revision: 1.2 $
   # $Log$
 
+  save_empty_list_elements_ok = empty_list_elements_ok;
+  empty_list_elements_ok = 1;
+
   if    (nargin > 5)   usage("[U,H,k1] = krylov(A,v,k{,eps1,pflg})");
   elseif(nargin < 5)   pflg = 0;
   elseif(nargin < 4)   eps1 = 1e-12; endif
   na = is_square(A);
   if(!na) error("krylov: A(%dx%d) must be square",na,na); endif
   [m,n] = size(v);
   if(!is_vector(v)) error("krylov: v(%dx%d) must be a vector",m,n);
   elseif(length(v) != na)
@@ -149,9 +152,11 @@ function [U,H,k1] = krylov(A,v,k,eps1,pf
     U = U(ipermvec,:);
   endif
 
   # check for spurious nonzero entries
   if( max(max( abs(U(zidx,:)) )) > eps1 )
     warning("krylov: trivial null space corrupted; set pflg=1 or eps1>%e",eps1);
   endif
 
+  empty_list_elements_ok = save_empty_list_elements_ok;
+
 endfunction
diff --git a/scripts/plot/__pltopt1__.m b/scripts/plot/__pltopt1__.m
--- a/scripts/plot/__pltopt1__.m
+++ b/scripts/plot/__pltopt1__.m
@@ -113,17 +113,17 @@ function fmt = __pltopt1__ (caller, opt)
       set_color = 1;
       color = "3";
     elseif (strcmp (char, "m"))
       set_color = 1;
       color = "4";
     elseif (strcmp (char, "c"))
       set_color = 1;
       color = "5";
-    elseif (strcmp (char, "w"))
+    elseif (strcmp (char, "w") || strcmp (char, "k"))
       set_color = 1;
       color = "6";
     elseif (strcmp (char, "*"))
       set_points = 1;
       set_symbol = 1;
       symbol = "6";
     elseif (strcmp (char, "+"))
       set_points = 1;
diff --git a/scripts/plot/oneplot.m b/scripts/plot/oneplot.m
--- a/scripts/plot/oneplot.m
+++ b/scripts/plot/oneplot.m
@@ -36,14 +36,13 @@ function oneplot ()
     global __multiplot_mode__ = 0;
 
     if (__multiplot_mode__)
       gset nomultiplot;
       gset size 1, 1;
       gset origin 0, 0;
       __multiplot_mode__ = 0;
       gnuplot_command_replot = "rep";
-      clearplot;
     endif
 
   endif
 
 endfunction
diff --git a/scripts/plot/subplot.m b/scripts/plot/subplot.m
--- a/scripts/plot/subplot.m
+++ b/scripts/plot/subplot.m
@@ -147,13 +147,11 @@ function subplot (rows, columns, index)
 
     ## set the origin
 
     xo = (xp - 1.0) * __multiplot_xsize__;
     yo = (rows - yp) * __multiplot_ysize__;
 
     eval (sprintf ("gset origin %g, %g", xo, yo));
 
-    clearplot;
-
   endif
 
 endfunction
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,54 @@
+Wed Jan 27 14:18:29 1999  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* Makefile.in (DEFFUN_PATTERN, DEFVAR_PATTERN): Use egrep again.
+	Make the patterns work with stupid egreps that don't like empty
+	elements in alternation patterns.
+
+Fri Jan 22 04:41:48 1999  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* load-save.cc (save_ascii_data): Check for string type first,
+	then range, then the rest.
+	(save_binary_data): Ditto.
+
+	* pager.cc (more_than_a_screenful): Accept length as second arg.
+	Handle long lines properly, assuming the terminal wraps long lines.
+	(octave_pager_buf::do_sync): Accept length of data as second arg.
+	Use write instead of << to put characters on output stream.
+	(octave_pager_buf::sync): Don't assume data ends at first NUL.
+	(octave_diary_buf::sync): Ditto.
+
+Thu Jan 21 22:15:23 1999  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* load-save.cc (save_mat_binary_data): Check for string type
+	first, then range, then the rest.
+
+Wed Jan 20 12:01:14 1999  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* oct-stream.cc (octave_base_stream::do_scanf): Handle short and
+	long ints correctly.
+
+Fri Jan 15 13:04:58 1999  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* parse.y (end_error): Handle case of endswitch too.
+
+	* Makefile.in: Use basic regular expressions and grep instead of
+	egrep to find files that contain DEFVAR, DEFCONST, or DEFUN.
+
+Wed Dec  9 14:14:11 1998  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* Makefile.in (octave): Add $(RDYNAMIC_FLAG) to link command.
+
+Fri Dec  4 20:26:33 1998  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* DLD-FUNCTIONS/time.cc (Fstrftime): Make it work even when not
+	using the GNU version of strftime, which allows passing NULL for
+	the buffer to determine the required size of the buffer.
+
 Wed Dec  2 22:38:40 1998  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* utils.cc (file_in_loadpath): Expect argc == 2, not 3.
 
 Tue Nov 24 23:38:19 1998  Eric Norum <eric@skatter.USask.Ca>
 
 	* mkbuiltins: Also strip off leading `./' from file names.
 	* mkops: Ditto.
diff --git a/src/DLD-FUNCTIONS/time.cc b/src/DLD-FUNCTIONS/time.cc
--- a/src/DLD-FUNCTIONS/time.cc
+++ b/src/DLD-FUNCTIONS/time.cc
@@ -210,16 +210,20 @@ DEFUN_DLD (mktime, args, ,
 	retval = static_cast<double> (mktime (tm)) + fraction;
     }
   else
     print_usage ("mktime");
 
   return retval;
 }
 
+#if !defined STRFTIME_BUF_INITIAL_SIZE
+#define STRFTIME_BUF_INITIAL_SIZE 128
+#endif
+
 DEFUN_DLD (strftime, args, ,
   "strftime (FMT, TMSTRUCT)\n\
 \n\
 Performs `%' substitutions similar to those in printf.  Except where\n\
 noted, substituted fields have a fixed size; numeric fields are\n\
 padded if necessary.  Padding is with zeros by default; for fields\n\
 that display a single number, padding can be changed or inhibited by\n\
 following the `%' with one of the modifiers described below.\n\
@@ -288,23 +292,30 @@ Date fields:\n\
       double fraction;
 
       struct tm *tm = extract_tm (map, fraction);
 
       if (! error_state)
 	{
 	  const char *fmt_str = fmt.c_str ();
 
-	  size_t bufsize = strftime (0, (size_t) UINT_MAX, fmt_str, tm);
-
-	  char *buf = new char [++bufsize];
+	  char *buf = 0;
+	  size_t bufsize = STRFTIME_BUF_INITIAL_SIZE;
+	  size_t chars_written = 0;
 
-	  buf[0] = '\0';
+	  while (chars_written == 0)
+	    {
+	      delete [] buf;
+	      buf = new char[bufsize];
+	      buf[0] = '\0';
 
-	  strftime (buf, bufsize, fmt_str, tm);
+	      chars_written = strftime (buf, bufsize, fmt_str, tm);
+
+	      bufsize *= 2;
+	    }
 
 	  retval = buf;
 
 	  delete [] buf;
 	}
     }
   else
     print_usage ("strftime");
diff --git a/src/Makefile.in b/src/Makefile.in
--- a/src/Makefile.in
+++ b/src/Makefile.in
@@ -148,26 +148,30 @@ endif
 
 DEP_5 := $(SOURCES) $(DLD_SRC) builtins.cc ops.cc octave.cc
 DEP_4 := $(notdir $(DEP_5))
 DEP_3 := $(patsubst %.l, %.cc, $(DEP_4))
 DEP_2 := $(patsubst %.y, %.cc, $(DEP_3))
 DEP_1 := $(patsubst %.c, %.d, $(DEP_2))
 MAKEDEPS := $(patsubst %.cc, %.d, $(DEP_1))
 
-DEFUN_PATTERN = "^DEFUN(|_DLD|_TEXT)[ \t]*\\("
+# Some stupid egreps don't like empty elements in alternation patterns,
+# so we have to repeat ourselves because some stupid egreps don't like
+# empty elements in alternation patterns.
+
+DEFUN_PATTERN = "^[ \t]*DEFU(N|N_DLD|N_TEXT)[ \t]*\\("
 
 DEF_5 := $(SOURCES) $(DLD_SRC)
 DEF_4 := $(addprefix $(srcdir)/, $(DEF_5))
 DEF_3 := $(notdir $(shell egrep -l $(DEFUN_PATTERN) $(DEF_4)))
 DEF_2 := $(patsubst %.y, %.df, $(DEF_3))
 DEF_1 := $(patsubst %.l, %.df, $(DEF_2))
 DEF_FILES := $(patsubst %.cc, %.df, $(DEF_1))
 
-DEFVAR_PATTERN = "^[\t ]*DEF(VAR|CONST)[ \t]*\\("
+DEFVAR_PATTERN = "^[ \t]*DEF(VAR|CONST)[ \t]*\\("
 
 VAR_5 := $(SOURCES) $(DLD_SRC)
 VAR_4 := $(addprefix $(srcdir)/, $(VAR_5))
 VAR_3 := $(notdir $(shell egrep -l $(DEFVAR_PATTERN) $(VAR_4)))
 VAR_2 := $(patsubst %.y, %, $(VAR_3))
 VAR_1 := $(patsubst %.l, %, $(VAR_2))
 VAR_FILES := $(patsubst %.cc, %, $(VAR_1))
 
@@ -199,17 +203,18 @@ stamp-oct-links: $(OCT_FILES)
 	  $(srcdir)/mk-oct-links . $(addprefix $(srcdir)/, $(DLD_SRC)); \
 	fi
 	touch stamp-oct-links
 
 stamp-prereq: defaults.h oct-conf.h
 	touch stamp-prereq
 
 octave: octave.o builtins.o ops.o $(DLD_STATIC_OBJ) libraries
-	$(CXX) $(CPPFLAGS) $(ALL_CXXFLAGS) $(ALL_LDFLAGS) -o octave \
+	$(CXX) $(CPPFLAGS) $(ALL_CXXFLAGS) $(RDYNAMIC_FLAG) \
+	$(ALL_LDFLAGS) -o octave \
 	octave.o builtins.o ops.o $(DLD_STATIC_OBJ) \
 	$(OCTAVE_LFLAGS) \
 	$(OCTAVE_LIBS) \
 	$(FLIBS) $(LEXLIB) $(TERMLIBS) $(LIBS)
 
 pic:
 	@if [ -d pic ]; then \
 	  true; \
diff --git a/src/load-save.cc b/src/load-save.cc
--- a/src/load-save.cc
+++ b/src/load-save.cc
@@ -1901,17 +1901,47 @@ save_binary_data (ostream& os, const oct
   os.write (&doc_len, 4);
   os << doc;
 
   char tmp;
 
   tmp = mark_as_global;
   os.write (&tmp, 1);
 
-  if (tc.is_real_scalar ())
+  if (tc.is_string ())
+    {
+      tmp = 7;
+      os.write (&tmp, 1);
+      FOUR_BYTE_INT nr = tc.rows ();
+      os.write (&nr, 4);
+      charMatrix chm = tc.char_matrix_value ();
+      for (int i = 0; i < nr; i++)
+	{
+	  FOUR_BYTE_INT len = chm.cols ();
+	  os.write (&len, 4);
+	  string tstr = chm.row_as_string (i);
+	  const char *tmp = tstr.data ();
+	  os.write (tmp, len);
+	}
+    }
+  else if (tc.is_range ())
+    {
+      tmp = 6;
+      os.write (&tmp, 1);
+      tmp = (char) LS_DOUBLE;
+      os.write (&tmp, 1);
+      Range r = tc.range_value ();
+      double bas = r.base ();
+      double lim = r.limit ();
+      double inc = r.inc ();
+      os.write (&bas, 8);
+      os.write (&lim, 8);
+      os.write (&inc, 8);
+    }
+  else if (tc.is_real_scalar ())
     {
       tmp = 1;
       os.write (&tmp, 1);
       tmp = (char) LS_DOUBLE;
       os.write (&tmp, 1);
       double tmp = tc.double_value ();
       os.write (&tmp, 8);
     }
@@ -1979,46 +2009,16 @@ save_binary_data (ostream& os, const oct
 	{
 	  double max_val, min_val;
 	  if (m.all_integers (max_val, min_val))
 	    st = get_save_type (max_val, min_val);
 	}
       const Complex *mtmp = m.data ();
       write_doubles (os, X_CAST (const double *, mtmp), st, 2*len);
     }
-  else if (tc.is_string ())
-    {
-      tmp = 7;
-      os.write (&tmp, 1);
-      FOUR_BYTE_INT nr = tc.rows ();
-      os.write (&nr, 4);
-      charMatrix chm = tc.char_matrix_value ();
-      for (int i = 0; i < nr; i++)
-	{
-	  FOUR_BYTE_INT len = chm.cols ();
-	  os.write (&len, 4);
-	  string tstr = chm.row_as_string (i);
-	  const char *tmp = tstr.data ();
-	  os.write (tmp, len);
-	}
-    }
-  else if (tc.is_range ())
-    {
-      tmp = 6;
-      os.write (&tmp, 1);
-      tmp = (char) LS_DOUBLE;
-      os.write (&tmp, 1);
-      Range r = tc.range_value ();
-      double bas = r.base ();
-      double lim = r.limit ();
-      double inc = r.inc ();
-      os.write (&bas, 8);
-      os.write (&lim, 8);
-      os.write (&inc, 8);
-    }
   else
     gripe_wrong_type_arg ("save", tc, false);
 
   return os;
 }
 
 // Save the data from TC along with the corresponding NAME on stream OS 
 // in the MatLab binary format.
@@ -2052,17 +2052,38 @@ save_mat_binary_data (ostream& os, const
   // LEN includes the terminating character, and the file is also
   // supposed to include it.
 
   FOUR_BYTE_INT name_len = name.length () + 1;
 
   os.write (&name_len, 4);
   os << name << '\0';
 
-  if (tc.is_real_scalar ())
+  if (tc.is_string ())
+    {
+      unwind_protect::begin_frame ("save_mat_binary_data");
+      unwind_protect_int (Vimplicit_str_to_num_ok);
+      Vimplicit_str_to_num_ok = true;
+      Matrix m = tc.matrix_value ();
+      os.write (m.data (), 8 * len);
+      unwind_protect::run_frame ("save_mat_binary_data");
+    }
+  else if (tc.is_range ())
+    {
+      Range r = tc.range_value ();
+      double base = r.base ();
+      double inc = r.inc ();
+      int nel = r.nelem ();
+      for (int i = 0; i < nel; i++)
+	{
+	  double x = base + i * inc;
+	  os.write (&x, 8);
+	}
+    }
+  else if (tc.is_real_scalar ())
     {
       double tmp = tc.double_value ();
       os.write (&tmp, 8);
     }
   else if (tc.is_real_matrix ())
     {
       Matrix m = tc.matrix_value ();
       os.write (m.data (), 8 * len);
@@ -2075,37 +2096,16 @@ save_mat_binary_data (ostream& os, const
   else if (tc.is_complex_matrix ())
     {
       ComplexMatrix m_cmplx = tc.complex_matrix_value ();
       Matrix m = ::real(m_cmplx);
       os.write (m.data (), 8 * len);
       m = ::imag(m_cmplx);
       os.write (m.data (), 8 * len);
     }
-  else if (tc.is_string ())
-    {
-      unwind_protect::begin_frame ("save_mat_binary_data");
-      unwind_protect_int (Vimplicit_str_to_num_ok);
-      Vimplicit_str_to_num_ok = true;
-      Matrix m = tc.matrix_value ();
-      os.write (m.data (), 8 * len);
-      unwind_protect::run_frame ("save_mat_binary_data");
-    }
-  else if (tc.is_range ())
-    {
-      Range r = tc.range_value ();
-      double base = r.base ();
-      double inc = r.inc ();
-      int nel = r.nelem ();
-      for (int i = 0; i < nel; i++)
-	{
-	  double x = base + i * inc;
-	  os.write (&x, 8);
-	}
-    }
   else
     gripe_wrong_type_arg ("save", tc, false);
 
   return os;
 }
 
 static void
 ascii_save_type (ostream& os, const char *type, bool mark_as_global)
@@ -2214,17 +2214,42 @@ save_ascii_data (ostream& os, const octa
     precision = Vsave_precision;
 
   if (! name.empty ())
     os << "# name: " << name << "\n";
 
   long old_precision = os.precision ();
   os.precision (precision);
 
-  if (tc.is_real_scalar ())
+  if (tc.is_string ())
+    {
+      ascii_save_type (os, "string array", mark_as_global);
+      charMatrix chm = tc.char_matrix_value ();
+      int elements = chm.rows ();
+      os << "# elements: " << elements << "\n";
+      for (int i = 0; i < elements; i++)
+	{
+	  int len = chm.cols ();
+	  os << "# length: " << len << "\n";
+	  string tstr = chm.row_as_string (i);
+	  const char *tmp = tstr.data ();
+	  os.write (tmp, len);
+	  os << "\n";
+	}
+    }
+  else if (tc.is_range ())
+    {
+      ascii_save_type (os, "range", mark_as_global);
+      Range tmp = tc.range_value ();
+      os << "# base, limit, increment\n"
+	 << tmp.base () << " "
+	 << tmp.limit () << " "
+	 << tmp.inc () << "\n";
+    }
+  else if (tc.is_real_scalar ())
     {
       ascii_save_type (os, "scalar", mark_as_global);
 
       double d = tc.double_value ();
       if (strip_nan_and_inf)
 	{
 	  if (xisnan (d))
 	    {
@@ -2287,41 +2312,16 @@ save_ascii_data (ostream& os, const octa
 	 << "# columns: " << tc.columns () << "\n";
 
       ComplexMatrix tmp = tc.complex_matrix_value ();
       if (strip_nan_and_inf)
 	tmp = strip_infnan (tmp);
 
       os << tmp;
     }
-  else if (tc.is_string ())
-    {
-      ascii_save_type (os, "string array", mark_as_global);
-      charMatrix chm = tc.char_matrix_value ();
-      int elements = chm.rows ();
-      os << "# elements: " << elements << "\n";
-      for (int i = 0; i < elements; i++)
-	{
-	  int len = chm.cols ();
-	  os << "# length: " << len << "\n";
-	  string tstr = chm.row_as_string (i);
-	  const char *tmp = tstr.data ();
-	  os.write (tmp, len);
-	  os << "\n";
-	}
-    }
-  else if (tc.is_range ())
-    {
-      ascii_save_type (os, "range", mark_as_global);
-      Range tmp = tc.range_value ();
-      os << "# base, limit, increment\n"
-	 << tmp.base () << " "
-	 << tmp.limit () << " "
-	 << tmp.inc () << "\n";
-    }
   else
     gripe_wrong_type_arg ("save", tc, false);
 
   os.precision (old_precision);
 
   return (os && success);
 }
 
diff --git a/src/oct-stream.cc b/src/oct-stream.cc
--- a/src/oct-stream.cc
+++ b/src/oct-stream.cc
@@ -284,17 +284,16 @@ scanf_format_list::process_conversion (c
 		  c = s[i++];
 		  width = width * 10 + c - '0';
 		  *buf << c;
 		}
 	    }
 	  break;
 
 	case 'h': case 'l': case 'L':
-	  // We accept these but we don't actually use them.
 	  if (modifier != '\0')
 	    nconv = -1;
 	  else
 	    modifier = s[i++];
 	  break;
 
 	case 'd': case 'i': case 'o': case 'u': case 'x':
 	  if (modifier == 'L')
@@ -922,16 +921,24 @@ do_scanf_conv (istream& is, const char *
 	data[idx++] = *(valptr);
     }
 }
 
 template void
 do_scanf_conv (istream&, const char*, int*, Matrix&, double*, int&,
 	       int, int, bool);
 
+template void
+do_scanf_conv (istream&, const char*, long int*, Matrix&, double*, int&,
+	       int, int, bool);
+
+template void
+do_scanf_conv (istream&, const char*, short int*, Matrix&, double*, int&,
+	       int, int, bool);
+
 #if 0
 template void
 do_scanf_conv (istream&, const char*, float*, Matrix&, double*, int&,
 	       int, int, bool);
 #endif
 
 template void
 do_scanf_conv (istream&, const char*, double*, Matrix&, double*, int&,
@@ -1028,20 +1035,42 @@ octave_base_stream::do_scanf (scanf_form
 		    int dummy;
 
 		    is.scan (fmt, &dummy);
 		  }
 		break;
 
 		case 'd': case 'i': case 'o': case 'u': case 'x':
 		  {
-		    int tmp;
-
-		    do_scanf_conv (is, fmt, &tmp, mval, data, count,
-				   nr, max_size, discard);
+		    switch (elt->modifier)
+		      {
+		      case 'h':
+			{
+			  short int tmp;
+			  do_scanf_conv (is, fmt, &tmp, mval, data, count,
+					 nr, max_size, discard);
+			}
+		      break;
+
+		      case 'l':
+			{
+			  long int tmp;
+			  do_scanf_conv (is, fmt, &tmp, mval, data, count,
+					 nr, max_size, discard);
+			}
+		      break;
+
+		      default:
+			{
+			  int tmp;
+			  do_scanf_conv (is, fmt, &tmp, mval, data, count,
+					 nr, max_size, discard);
+			}
+		      break;
+		      }
 		  }
 		break;
 
 		case 'e': case 'f': case 'g':
 		  {
 		    double tmp;
 
 		    do_scanf_conv (is, fmt, &tmp, mval, data, count,
diff --git a/src/pager.cc b/src/pager.cc
--- a/src/pager.cc
+++ b/src/pager.cc
@@ -111,23 +111,23 @@ pager_death_handler (pid_t pid, int stat
 	  cerr << "warning: connection to external pager (pid = "
 	       << pid << ") lost --\n"
 	       << "warning: attempting to finish pending computations...\n";
 	}
     }
 }
 
 static void
-do_sync (const char *msg, bool bypass_pager)
+do_sync (const char *msg, int len, bool bypass_pager)
 {
-  if (msg && *msg)
+  if (msg && len > 0)
     {
       if (bypass_pager)
 	{
-	  cout << msg;
+	  cout.write (msg, len);
 	  cout.flush ();
 	}
       else
 	{
 	  if (! external_pager)
 	    {
 	      string pgr = Vpager_binary;
 
@@ -147,17 +147,17 @@ do_sync (const char *msg, bool bypass_pa
 		    }
 		}
 	    }
 
 	  if (external_pager)
 	    {
 	      if (octave_pager_pid > 0 && external_pager->good ())
 		{
-		  *external_pager << msg;
+		  external_pager->write (msg, len);
 
 		  // These checks are needed if a signal handler
 		  // invoked since the last set of checks attempts
 		  // to flush output and then returns
 
 		  if (octave_pager_pid > 0
 		      && external_pager
 		      && external_pager->good ())
@@ -173,83 +173,98 @@ do_sync (const char *msg, bool bypass_pa
 		    {
 		      octave_set_interrupt_handler (saved_interrupt_handler);
 		      interrupt_handler_saved = false;
 		    }
 		}
 	    }
 	  else
 	    {
-	      cout << msg;
+	      cout.write (msg, len);
 	      cout.flush ();
 	    }
 	}
     }
 }
 
+// Assume our terminal wraps long lines.
+
 static bool
-more_than_a_screenful (const char *s)
+more_than_a_screenful (const char *s, int len)
 {
   if (s)
     {
       int available_rows = command_editor::terminal_rows () - 2;
 
+      int cols = command_editor::terminal_cols ();
+
       int count = 0;
 
-      char c;
+      int chars_this_line = 0;
 
-      while ((c = *s++) != '\0')
-	if (c == '\n')
-	  {
-	    count++;
+      for (int i = 0; i < len; i++)
+	{
+	  if (*s++ == '\n')
+	    {
+	      count += chars_this_line / cols + 1;
+	      chars_this_line = 0;
+	    }
+	  else
+	    chars_this_line++;
+	}
 
-	    if (count > available_rows)
-	      return true;
-	  }
+      if (count > available_rows)
+ 	return true;
     }
 
   return false;
 }
 
 int
 octave_pager_buf::sync (void)
 {
   if (! interactive
       || really_flush_to_pager
       || (Vpage_screen_output && Vpage_output_immediately)
       || ! Vpage_screen_output)
     {
-      sputc ('\0');
+      char *buf = eback ();
 
-      char *buf = eback ();
+      int len = pptr () - buf;
 
       bool bypass_pager = (! interactive
 			   || ! Vpage_screen_output
 			   || (really_flush_to_pager
 			       && Vpage_screen_output
 			       && ! Vpage_output_immediately
-			       && ! more_than_a_screenful (buf)));
-
-      seekoff (0, ios::beg);
+			       && ! more_than_a_screenful (buf, len)));
 
-      do_sync (buf, bypass_pager);
+      if (len > 0)
+	{
+	  do_sync (buf, len, bypass_pager);
 
-      octave_diary << buf;
+	  seekoff (0, ios::beg);
+
+	  octave_diary.write (buf, len);
+	}
     }
 
   return 0;
 }
 
 int
 octave_diary_buf::sync (void)
 {
-  sputc ('\0');
+  if (write_to_diary_file && external_diary_file)
+    {
+      int len = pptr () - eback ();
 
-  if (write_to_diary_file && external_diary_file)
-    external_diary_file << eback ();
+      if (len > 0)
+	external_diary_file.write (eback (), len);
+    }
 
   seekoff (0, ios::beg);
 
   return 0;
 }
 
 octave_pager_stream *octave_pager_stream::instance = 0;
 
diff --git a/src/parse.y b/src/parse.y
--- a/src/parse.y
+++ b/src/parse.y
@@ -1418,16 +1418,20 @@ end_error (const char *type, token::end_
     case token::function_end:
       error (fmt, type, "endfunction", l, c);
       break;
 
     case token::if_end:
       error (fmt, type, "endif", l, c);
       break;
 
+    case token::switch_end:
+      error (fmt, type, "endswitch", l, c); 
+      break;
+
     case token::while_end:
       error (fmt, type, "endwhile", l, c); 
       break;
 
     case token::unwind_protect_end:
       error (fmt, type, "end_unwind_protect", l, c); 
       break;
 
diff --git a/src/version.h b/src/version.h
--- a/src/version.h
+++ b/src/version.h
@@ -18,17 +18,17 @@ You should have received a copy of the G
 along with Octave; see the file COPYING.  If not, write to the Free
 Software Foundation, 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 
 */
 
 #if !defined (octave_version_h)
 #define octave_version_h 1
 
-#define OCTAVE_VERSION "2.1.11"
+#define OCTAVE_VERSION "2.1.13"
 
 #define OCTAVE_COPYRIGHT \
   "Copyright (C) 1996, 1997, 1998 John W. Eaton."
 
 #define OCTAVE_NAME_AND_VERSION \
   "Octave, version " OCTAVE_VERSION " (" TARGET_HOST_TYPE ")"
 
 #define OCTAVE_NAME_VERSION_AND_COPYRIGHT \
diff --git a/test/ChangeLog b/test/ChangeLog
--- a/test/ChangeLog
+++ b/test/ChangeLog
@@ -1,8 +1,13 @@
+Fri Dec  4 20:55:47 1998  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* octave.test/system/clock-1.m: Use standard format specifiers %d
+	and %H instead of %e and %k.
+
 Fri Oct 23 15:53:01 1998  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* octave.test/arith/exp-5.m: New test.
 
 	* octave.test/stats/mean-3.m: New version of mean accepts a second
 	optional arg.
 
 	* octave.test/system/date-1.m: Correct test for new Y2K-compliant
diff --git a/test/octave.test/system/clock-1.m b/test/octave.test/system/clock-1.m
--- a/test/octave.test/system/clock-1.m
+++ b/test/octave.test/system/clock-1.m
@@ -1,3 +1,3 @@
 t1 = clock;
-t2 = str2num (strftime ("[%Y, %m, %e, %k, %M, %S]", localtime (time ())));
+t2 = str2num (strftime ("[%Y, %m, %d, %H, %M, %S]", localtime (time ())));
 etime (t1, t2) < 1
