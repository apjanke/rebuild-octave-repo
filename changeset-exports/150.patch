# HG changeset patch
# User jwe
# Date 750262168 0
#      Sun Oct 10 14:09:28 1993 +0000
# Node ID 5167d307c1c9ca524fd9f86a16047ba266b1b66d
# Parent  471912bc76c40960afc4eb3d0423113c4628e41e
[project @ 1993-10-10 14:09:28 by jwe]
(do_matrix_assignment): Handle resizing	correctly when indices are
(:,range), (:,matrix), (range,:), or (matrix,:) and the lhs is empty
or undefined.

diff --git a/src/tc-assign.cc b/src/tc-assign.cc
--- a/src/tc-assign.cc
+++ b/src/tc-assign.cc
@@ -706,16 +706,17 @@ tree_constant_rep::do_matrix_assignment 
       {
 	Range rj = tmp_j.range_value ();
 	if (! indexed_assign_conforms (1, rj.nelem (), rhs_nr, rhs_nc))
 	  {
 	    error ("A(int,range) = X: X must be a row vector with the\
  same number of elements as range"); 
 	    return;
 	  }
+
 	if (columns () == 2 && is_zero_one (rj) && rhs_nc == 1)
 	  {
 	    do_matrix_assignment (rhs, i, 1);
 	  }
 	else
 	  {
 	    int jmax;
 	    if (index_check (rj, jmax, "column") < 0)
@@ -816,16 +817,17 @@ tree_constant_rep::do_matrix_assignment 
 	if (! indexed_assign_conforms (iv.capacity (), rj.nelem (),
 				       rhs_nr, rhs_nc))
 	  {
 	    error ("A(matrix,range) = X: the number of rows in X must\
  match the number of elements in matrix and the number of columns in X\
  must match the number of elements in range");  
 	    return;
 	  }
+
 	if (columns () == 2 && is_zero_one (rj) && rhs_nc == 1)
 	  {
 	    do_matrix_assignment (rhs, iv, 1);
 	  }
 	else
 	  {
 	    int jmax;
 	    if (index_check (rj, jmax, "column") < 0)
@@ -833,24 +835,29 @@ tree_constant_rep::do_matrix_assignment 
 	    maybe_resize (iv.max (), jmax);
 	    do_matrix_assignment (rhs, iv, rj);
 	  }
       }
       break;
     case magic_colon:
       {
 	int nc = columns ();
-	if (! indexed_assign_conforms (iv.capacity (), nc, rhs_nr, rhs_nc))
+	int new_nc = nc;
+	if (nc == 0 || rows () == 0)
+	  new_nc = rhs_nc;
+
+	if (! indexed_assign_conforms (iv.capacity (), new_nc,
+				       rhs_nr, rhs_nc))
 	  {
 	    error ("A(matrix,:) = X: the number of rows in X must\
  match the number of elements in matrix, and the number of columns in\
  X must match the number of columns in A");
 	    return;
 	  }
-	maybe_resize (iv.max (), nc-1);
+	maybe_resize (iv.max (), new_nc-1);
 	do_matrix_assignment (rhs, iv, magic_colon);
       }
       break;
     default:
       panic_impossible ();
       break;
     }
 }
@@ -912,16 +919,17 @@ tree_constant_rep::do_matrix_assignment 
 	if (! indexed_assign_conforms (ri.nelem (), rj.nelem (),
 				       rhs_nr, rhs_nc))
 	  {
 	    error ("A(r_range,c_range) = X: the number of rows in X\
  must match the number of elements in r_range and the number of\
  columns in X must match the number of elements in c_range\n");
 	    return;
 	  }
+
 	if (columns () == 2 && is_zero_one (rj) && rhs_nc == 1)
 	  {
 	    do_matrix_assignment (rhs, ri, 1);
 	  }
 	else
 	  {
 	    int jmax;
 	    if (index_check (rj, jmax, "column") < 0)
@@ -929,24 +937,28 @@ tree_constant_rep::do_matrix_assignment 
 	    maybe_resize (imax, jmax);
 	    do_matrix_assignment (rhs, ri, rj);
 	  }
       }
       break;
     case magic_colon:
       {
 	int nc = columns ();
-	if (! indexed_assign_conforms (ri.nelem (), nc, rhs_nr, rhs_nc))
+	int new_nc = nc;
+	if (nc == 0 || rows () == 0)
+	  new_nc = rhs_nc;
+
+	if (! indexed_assign_conforms (ri.nelem (), new_nc, rhs_nr, rhs_nc))
 	  {
 	    error ("A(range,:) = X: the number of rows in X must match\
  the number of elements in range, and the number of columns in X must\
  match the number of columns in A");  
 	    return;
 	  }
-	maybe_resize (imax, nc-1);
+	maybe_resize (imax, new_nc-1);
 	do_matrix_assignment (rhs, ri, magic_colon);
       }
       break;
     default:
       panic_impossible ();
       break;
     }
 }
@@ -1000,51 +1012,61 @@ tree_constant_rep::do_matrix_assignment 
       break;
     case complex_matrix_constant:
     case matrix_constant:
       {
 	Matrix mj = tmp_j.matrix_value ();
 	idx_vector jv (mj, user_pref.do_fortran_indexing, "column",
 		       columns ());
 	int nr = rows ();
-	if (! indexed_assign_conforms (nr, jv.capacity (), rhs_nr, rhs_nc))
+	int new_nr = nr;
+	if (nr == 0 || columns () == 0)
+	  new_nr = rhs_nr;
+
+	if (! indexed_assign_conforms (new_nr, jv.capacity (),
+				       rhs_nr, rhs_nc))
 	  {
 	    error ("A(:,matrix) = X: the number of rows in X must\
  match the number of rows in A, and the number of columns in X must\
  match the number of elements in matrix");   
 	    return;
 	  }
-	maybe_resize (nr-1, jv.max ());
+	maybe_resize (new_nr-1, jv.max ());
 	do_matrix_assignment (rhs, magic_colon, jv);
       }
       break;
     case string_constant:
       gripe_string_invalid ();
       break;
     case range_constant:
       {
 	Range rj = tmp_j.range_value ();
 	int nr = rows ();
-	if (! indexed_assign_conforms (nr, rj.nelem (), rhs_nr, rhs_nc))
+	int new_nr = nr;
+	if (nr == 0 || columns () == 0)
+	  new_nr = rhs_nr;
+
+	if (! indexed_assign_conforms (new_nr, rj.nelem (), rhs_nr, rhs_nc))
 	  {
 	    error ("A(:,range) = X: the number of rows in X must match\
  the number of rows in A, and the number of columns in X must match\
  the number of elements in range");
 	    return;
 	  }
+
 	if (columns () == 2 && is_zero_one (rj) && rhs_nc == 1)
 	  {
 	    do_matrix_assignment (rhs, magic_colon, 1);
 	  }
 	else
 	  {
 	    int jmax;
 	    if (index_check (rj, jmax, "column") < 0)
 	      return;
-	    maybe_resize (nr-1, jmax);
+	    maybe_resize (new_nr-1, jmax);
 	    do_matrix_assignment (rhs, magic_colon, rj);
 	  }
       }
       break;
     case magic_colon:
 // a(:,:) = foo is equivalent to a = foo.
       do_matrix_assignment (rhs, magic_colon, magic_colon);
       break;
@@ -1411,9 +1433,8 @@ tree_constant_rep::do_matrix_assignment 
 }
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; page-delimiter: "^/\\*" ***
 ;;; End: ***
 */
-
