# HG changeset patch
# User Rik <rik@octave.org>
# Date 1452991803 28800
#      Sat Jan 16 16:50:03 2016 -0800
# Node ID 83ce7b8fb91cc865a53c7ac9adec1d8c6b3bcf3b
# Parent  8c9755d29d2a7ed882e0d9f51258abcaa04e7c4e
maint: rename glps_renderer class to gl2ps_renderer to match filename.

* gl2ps-renderer.cc, gl2ps-renderer.h, __osmesa_print__.cc:
Replace all "glps_renderer" with "gl2ps_renderer".
In error messages, use name of class "gl2ps_renderer" rather than
filename "gl2ps-renderer".

diff --git a/libinterp/corefcn/gl2ps-renderer.cc b/libinterp/corefcn/gl2ps-renderer.cc
--- a/libinterp/corefcn/gl2ps-renderer.cc
+++ b/libinterp/corefcn/gl2ps-renderer.cc
@@ -36,17 +36,17 @@ along with Octave; see the file COPYING.
 #include "oct-locbuf.h"
 #include "unwind-prot.h"
 
 #include "gl2ps.h"
 #include "sysdep.h"
 #include "unistd.h"
 
 void
-glps_renderer::draw (const graphics_object& go, const std::string& print_cmd)
+gl2ps_renderer::draw (const graphics_object& go, const std::string& print_cmd)
 {
   static bool in_draw = false;
   static std::string old_print_cmd;
 
   if (! in_draw)
     {
       unwind_protect frame;
 
@@ -63,34 +63,34 @@ glps_renderer::draw (const graphics_obje
         gl2ps_term = GL2PS_PS;
       else if (term.find ("svg") != std::string::npos)
         gl2ps_term = GL2PS_SVG;
       else if (term.find ("pgf") != std::string::npos)
         gl2ps_term = GL2PS_PGF;
       else if (term.find ("tex") != std::string::npos)
         gl2ps_term = GL2PS_TEX;
       else
-        error ("gl2ps-renderer::draw: Unknown terminal %s", term.c_str ());
+        error ("gl2ps_renderer::draw: Unknown terminal %s", term.c_str ());
 
       GLint gl2ps_text = 0;
       if (term.find ("notxt") != std::string::npos)
         gl2ps_text = GL2PS_NO_TEXT;
 
       // Default sort order optimizes for 3D plots
       GLint gl2ps_sort = GL2PS_BSP_SORT;
 
       // For 2D plots we can use a simpler Z-depth sorting algorithm
       if (term.find ("is2D") != std::string::npos)
         gl2ps_sort = GL2PS_SIMPLE_SORT;
 
       // Use a temporary file in case an overflow happens
       FILE* tmpf = gnulib::tmpfile ();
 
       if (! tmpf)
-        error ("glps_renderer::draw: couldn't open temporary file for printing");
+        error ("gl2ps_renderer::draw: couldn't open temporary file for printing");
 
       GLint buffsize = 2*1024*1024;
       buffer_overflow = true;
 
       while (buffer_overflow)
         {
           buffer_overflow = false;
           buffsize *= 2;
@@ -119,40 +119,40 @@ glps_renderer::draw (const graphics_obje
               size_t n_end = include_graph.find_last_not_of (" ");
               include_graph = include_graph.substr (n_begin,
                                                     n_end - n_begin + 1);
             }
           else
             include_graph = "foobar-inc";
 
           // GL2PS_SILENT was removed to allow gl2ps printing errors on stderr
-          GLint ret = gl2psBeginPage ("glps_renderer figure", "Octave", 0,
+          GLint ret = gl2psBeginPage ("gl2ps_renderer figure", "Octave", 0,
                                       gl2ps_term, gl2ps_sort,
                                       (GL2PS_NO_BLENDING
                                        | GL2PS_OCCLUSION_CULL
                                        | GL2PS_BEST_ROOT
                                        | gl2ps_text
                                        | GL2PS_NO_PS3_SHADING
                                        | GL2PS_USE_CURRENT_VIEWPORT),
                                       GL_RGBA, 0, 0, 0, 0, 0,
                                       buffsize, tmpf, include_graph.c_str ());
           if (ret == GL2PS_ERROR)
             {
               old_print_cmd.clear ();
-              error ("gl2ps-renderer::draw: gl2psBeginPage returned GL2PS_ERROR");
+              error ("gl2ps_renderer::draw: gl2psBeginPage returned GL2PS_ERROR");
             }
 
           opengl_renderer::draw (go);
 
           if (! buffer_overflow)
             old_print_cmd = print_cmd;
 
           // Don't check return value of gl2psEndPage, it is not meaningful.
           // Errors and warnings are checked after gl2psEndViewport in 
-          // glps_renderer::draw_axes instead.
+          // gl2ps_renderer::draw_axes instead.
           gl2psEndPage ();
         }
 
       // Copy temporary file to pipe
       gnulib::fseek (tmpf, 0, SEEK_SET);
       char str[256];
       int nread = 1;
       while (! feof (tmpf) && nread)
@@ -162,17 +162,17 @@ glps_renderer::draw (const graphics_obje
             gnulib::fwrite (str, 1, nread, fp);
         }
     }
   else
     opengl_renderer::draw (go);
 }
 
 int
-glps_renderer::alignment_to_mode (int ha, int va) const
+gl2ps_renderer::alignment_to_mode (int ha, int va) const
 {
   int gl2psa = GL2PS_TEXT_BL;
 
   if (ha == 0)
     {
       if (va == 0 || va == 3)
         gl2psa=GL2PS_TEXT_BL;
       else if (va == 2)
@@ -198,17 +198,17 @@ glps_renderer::alignment_to_mode (int ha
       else if (va == 1)
         gl2psa=GL2PS_TEXT_C;
     }
 
   return gl2psa;
 }
 
 void
-glps_renderer::fix_strlist_position (double x, double y, double z,
+gl2ps_renderer::fix_strlist_position (double x, double y, double z,
                                      Matrix box, double rotation,
                                      std::list<ft_render::ft_string>& lst)
 {
   for (std::list<ft_render::ft_string>::iterator p = lst.begin ();
        p != lst.end (); p++)
     {
       // Get pixel coordinates
       ColumnVector coord_pix = get_transform ().transform (x, y, z, false);
@@ -437,17 +437,17 @@ escape_character (const std::string chr,
   while (idx != std::string::npos)
     {
       str.insert (idx, "\\");
       idx = str.find (chr, idx + 2);
     }
 }
 
 Matrix
-glps_renderer::render_text (const std::string& txt,
+gl2ps_renderer::render_text (const std::string& txt,
                             double x, double y, double z,
                             int ha, int va, double rotation)
 {
   std::string saved_font = fontname;
 
   if (txt.empty ())
     return Matrix (1, 4, 0.0);
 
@@ -534,17 +534,17 @@ glps_renderer::render_text (const std::s
                     GL2PS_TEXT_BL, rotation);
     }
 
   fontname = saved_font;
   return bbox;
 }
 
 void
-glps_renderer::set_font (const base_properties& props)
+gl2ps_renderer::set_font (const base_properties& props)
 {
   opengl_renderer::set_font (props);
 
   // Set the interpreter so that text_to_pixels can parse strings properly
   if (props.has_property ("interpreter"))
     set_interpreter (props.get ("interpreter").string_value ());
 
   fontsize = props.get ("fontsize_points").double_value ();
@@ -567,31 +567,31 @@ draw_pixels (GLsizei w, GLsizei h, GLenu
   // Convert to GL_FLOAT as it is the only type gl2ps accepts.
   for (int i = 0; i < 3*w*h; i++)
     a[i] = data[i] / maxval;
 
   gl2psDrawPixels (w, h, 0, 0, format, GL_FLOAT, a);
 }
 
 void
-glps_renderer::draw_pixels (GLsizei w, GLsizei h, GLenum format,
+gl2ps_renderer::draw_pixels (GLsizei w, GLsizei h, GLenum format,
                             GLenum type, const GLvoid *data)
 {
   // gl2psDrawPixels only supports the GL_FLOAT type.
   // Other formats, such as uint8, must be converted first.
   if (type == GL_UNSIGNED_BYTE)
     ::draw_pixels (w, h, format, static_cast<const GLubyte *> (data), 255.0f);
   else if (type == GL_UNSIGNED_SHORT)
     ::draw_pixels (w, h, format, static_cast<const GLushort *> (data), 65535.0f);
   else
     gl2psDrawPixels (w, h, 0, 0, format, type, data);
 }
 
 void
-glps_renderer::draw_text (const text::properties& props)
+gl2ps_renderer::draw_text (const text::properties& props)
 {
   if (props.get_string ().is_empty ())
     return;
 
   // First set font properties: freetype will use them to compute
   // coordinates and gl2ps will retrieve the color directly from the
   // feedback buffer
   set_font (props);
@@ -644,17 +644,17 @@ gl2ps_print (const graphics_object& fig,
 
   if (! fp)
     error ("print: failed to open pipe for gl2ps renderer");
 
   unwind_protect frame;
 
   frame.add_fcn (safe_pclose, fp);
 
-  glps_renderer rend (fp, term);
+  gl2ps_renderer rend (fp, term);
 
   rend.draw (fig, cmd);
 
 #else
 
   error ("print: printing not available without gl2ps library");
 
 #endif
diff --git a/libinterp/corefcn/gl2ps-renderer.h b/libinterp/corefcn/gl2ps-renderer.h
--- a/libinterp/corefcn/gl2ps-renderer.h
+++ b/libinterp/corefcn/gl2ps-renderer.h
@@ -27,24 +27,24 @@ along with Octave; see the file COPYING.
 
 #ifdef HAVE_GL2PS_H
 
 #include "gl-render.h"
 #include <gl2ps.h>
 
 class
 OCTINTERP_API
-glps_renderer : public opengl_renderer
+gl2ps_renderer : public opengl_renderer
 {
 public:
-  glps_renderer (FILE *_fp, const std::string& _term)
+  gl2ps_renderer (FILE *_fp, const std::string& _term)
     : opengl_renderer () , fp (_fp), term (_term), fontsize (),
     fontname (), buffer_overflow (false) { }
 
-  ~glps_renderer (void) { }
+  ~gl2ps_renderer (void) { }
 
   void draw (const graphics_object& go, const std::string& print_cmd);
 
 protected:
 
   Matrix render_text (const std::string& txt,
                       double x, double y, double z,
                       int halign, int valign, double rotation = 0.0);
@@ -61,19 +61,19 @@ protected:
     // Draw and  glFinish () or there may primitives missing in the
     // gl2ps output.
     opengl_renderer::draw_axes (props);
     glFinish ();
 
     // Finalize viewport
     GLint state = gl2psEndViewport ();
     if (state == GL2PS_NO_FEEDBACK)
-      warning ("glps_renderer::draw_axes: empty feedback buffer and/or nothing else to print");
+      warning ("gl2ps_renderer::draw_axes: empty feedback buffer and/or nothing else to print");
     else if (state == GL2PS_ERROR)
-      error ("glps_renderer::draw_axes: gl2psEndPage returned GL2PS_ERROR");
+      error ("gl2ps_renderer::draw_axes: gl2psEndPage returned GL2PS_ERROR");
     
     buffer_overflow |= (state == GL2PS_OVERFLOW);
   }
 
   void draw_text (const text::properties& props);
   void draw_pixels (GLsizei w, GLsizei h, GLenum format,
                     GLenum type, const GLvoid *data);
 
diff --git a/libinterp/dldfcn/__osmesa_print__.cc b/libinterp/dldfcn/__osmesa_print__.cc
--- a/libinterp/dldfcn/__osmesa_print__.cc
+++ b/libinterp/dldfcn/__osmesa_print__.cc
@@ -185,17 +185,17 @@ instead.\n\
 
           if (! filep)
             error ("__osmesa_print__: Couldn't create file \"%s\"", file.c_str ());
 
           unwind_protect frame;
 
           frame.add_fcn (close_fcn, filep);
 
-          glps_renderer rend (filep, term);
+          gl2ps_renderer rend (filep, term);
           rend.draw (fobj, "");
 
           // Make sure buffered commands are finished!!!
           glFinish ();
         }
 #endif
     }
   else
