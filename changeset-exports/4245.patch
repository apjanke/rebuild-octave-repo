# HG changeset patch
# User jwe
# Date 1041048151 0
#      Sat Dec 28 04:02:31 2002 +0000
# Node ID 610671be879265d01fa1ccc5a624eea4793141e6
# Parent  189df16144fc95e830f5b03b1fad05491801bff2
[project @ 2002-12-28 04:02:31 by jwe]

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,18 @@
+2002-12-27  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* parse.y (Fevalin): New function.
+
+	* variables.cc (curr_caller_sym_tab): New global variable.
+	* variables.h: Provide decl.
+	(initialize_symbol_tables): Initialize it.
+	* ov-usr-fcn.cc (octave_user_function::do_multi_index_op):
+	Protect	and set it here.
+
 2002-12-26  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* utils.cc (search_path_for_file): Second arg now string_vector.
 	Use find_first_of, not find.
 	(search_path_for_all_files): Second arg now string_vector.
 	Use find_all_first_of, not find_all.
 	(Ffile_in_path): Accept cell array of strings as first argument.
 	(Ffile_in_loadpath): Likewise.
diff --git a/src/ov-usr-fcn.cc b/src/ov-usr-fcn.cc
--- a/src/ov-usr-fcn.cc
+++ b/src/ov-usr-fcn.cc
@@ -395,16 +395,19 @@ octave_user_function::do_multi_index_op 
 
   // Force symbols to be undefined again when this function exits.
 
   unwind_protect::add (clear_symbol_table, sym_tab);
 
   // Save old and set current symbol table context, for
   // eval_undefined_error().
 
+  unwind_protect_ptr (curr_caller_sym_tab);
+  curr_caller_sym_tab = curr_sym_tab;
+
   unwind_protect_ptr (curr_sym_tab);
   curr_sym_tab = sym_tab;
 
   unwind_protect_ptr (curr_function);
   curr_function = this;
 
   if (! is_nested_function ())
     {
diff --git a/src/parse.y b/src/parse.y
--- a/src/parse.y
+++ b/src/parse.y
@@ -3727,16 +3727,85 @@ variable @code{default_eval_print_flag}.
       unwind_protect::run_frame ("Feval");
     }
   else
     print_usage ("eval");
 
   return retval;
 }
 
+DEFUN (evalin, args, nargout,
+  "-*- texinfo -*-\n\
+@deftypefn {Built-in Function} {} evalin (@var{context}, @var{try}, @var{catch})\n\
+Like @code{eval}, except that the expressions are evaluated in the\n\
+context @var{context}, which may be either @code{\"caller\"} or\n\
+@code{\"base\"}.
+@end deftypefn")
+{
+  octave_value_list retval;
+
+  int nargin = args.length ();
+
+  if (nargin > 1)
+    {
+      std::string context = args(0).string_value ();
+
+      if (! error_state)
+        {
+	  unwind_protect::begin_frame ("Fevalin");
+
+	  unwind_protect_ptr (curr_sym_tab);
+
+	  if (context == "caller")
+	    curr_sym_tab = curr_caller_sym_tab;
+	  else if (context == "base")
+	    curr_sym_tab = top_level_sym_tab;
+	  else
+	    error ("evalin: context must be \"caller\" or \"base\"");
+
+	  if (nargin > 2)
+	    {
+	      unwind_protect_bool (buffer_error_messages);
+	      buffer_error_messages = true;
+	    }
+
+	  int parse_status = 0;
+
+	  retval = eval_string (args(1), ! Vdefault_eval_print_flag,
+				parse_status, nargout);
+
+	  if (nargin > 2 && (parse_status != 0 || error_state))
+	    {
+	      error_state = 0;
+
+	      // Set up for letting the user print any messages from
+	      // errors that occurred in the first part of this eval().
+
+	      buffer_error_messages = false;
+
+	      bind_global_error_variable ();
+
+	      unwind_protect::add (clear_global_error_variable, 0);
+
+	      eval_string (args(2), 0, parse_status, nargout);
+
+	      retval = octave_value_list ();
+	    }
+
+	  unwind_protect::run_frame ("Fevalin");
+	}
+      else
+        error ("evalin: expecting string as first argument");
+    }
+  else
+    print_usage ("evalin");
+
+  return retval;
+}
+
 static int
 default_eval_print_flag (void)
 {
   Vdefault_eval_print_flag = check_preference ("default_eval_print_flag");
 
   return 0;
 }
 
diff --git a/src/variables.cc b/src/variables.cc
--- a/src/variables.cc
+++ b/src/variables.cc
@@ -60,16 +60,19 @@ Software Foundation, 59 Temple Place - S
 static int Vignore_function_time_stamp;
 
 // Symbol table for symbols at the top level.
 symbol_table *top_level_sym_tab = 0;
 
 // Symbol table for the current scope.
 symbol_table *curr_sym_tab = 0;
 
+// Symbol table for the current caller scope.
+symbol_table *curr_caller_sym_tab = 0;
+
 // Symbol table for global symbols.
 symbol_table *global_sym_tab = 0;
 
 // Symbol table for functions and built-in symbols.
 symbol_table *fbi_sym_tab = 0;
 
 static inline bool
 at_top_level (void)
@@ -89,17 +92,17 @@ initialize_symbol_tables (void)
     fbi_sym_tab = new symbol_table (2048, "FBI");
 
   if (! global_sym_tab)
     global_sym_tab = new symbol_table (2048, "GLOBAL");
 
   if (! top_level_sym_tab)
     top_level_sym_tab = new symbol_table (4096, "TOP");
 
-  curr_sym_tab = top_level_sym_tab;
+  curr_caller_sym_tab = curr_sym_tab = top_level_sym_tab;
 }
 
 // Attributes of variables and functions.
 
 // Is this variable a builtin?
 
 bool
 is_builtin_variable (const std::string& name)
diff --git a/src/variables.h b/src/variables.h
--- a/src/variables.h
+++ b/src/variables.h
@@ -111,16 +111,19 @@ symbol_exist (const std::string& name,
 	      const std::string& type = std::string ());
 
 // Symbol table for symbols at the top level.
 extern symbol_table *top_level_sym_tab;
 
 // Symbol table for the current scope.
 extern symbol_table *curr_sym_tab;
 
+// Symbol table for the current caller scope.
+extern symbol_table *curr_caller_sym_tab;
+
 // Symbol table for global symbols.
 extern symbol_table *global_sym_tab;
 
 // Symbol table for functions and built-in symbols.
 extern symbol_table *fbi_sym_tab;
 
 #endif
 
