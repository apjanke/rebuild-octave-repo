# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1238022135 14400
#      Wed Mar 25 19:02:15 2009 -0400
# Node ID 12ca81f1fa9951c06c895f1ad7fe4b170fdbe006
# Parent  9057df9bb8a1364744da1b5dabba9df9d7335216
compatibility fix for find called for empty arguments

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,10 +1,13 @@
 2009-03-25  John W. Eaton  <jwe@octave.org>
 
+	* DLD-FUNCTIONS/find.cc (find_nonzero_elem_idx): Also return
+	[](0x0) if the array has 0 rows and it is not a column vector.
+
 	* oct-stream.cc (octave_stream::write (const Array<T>&,
 	octave_idx_type, oct_data_conv::data_type, octave_idx_type,
 	oct_mach_info::float_format)): Seek to skip if still inside bounds
 	of existing file.  Otherwise, write NUL to skip.
 
 	* Makefile.in (%.df : %.cc): Write source file name to output,
 	wrapped in XDEFUN_FILE_NAME macro.
 	* mkbuiltins: Provide definition for XDEFUN_FILE_NAME.
diff --git a/src/DLD-FUNCTIONS/find.cc b/src/DLD-FUNCTIONS/find.cc
--- a/src/DLD-FUNCTIONS/find.cc
+++ b/src/DLD-FUNCTIONS/find.cc
@@ -84,24 +84,33 @@ find_nonzero_elem_idx (const Array<T>& n
 
   // If the original argument was a row vector, force a row vector of
   // the overall indices to be returned.  But see below for scalar
   // case...
 
   octave_idx_type result_nr = count;
   octave_idx_type result_nc = 1;
 
+  bool column_vector_arg = false;
   bool scalar_arg = false;
 
-  if (nda.ndims () == 2 && nda.rows () == 1)
+  if (nda.ndims () == 2)
     {
-      result_nr = 1;
-      result_nc = count;
+      octave_idx_type nr = nda.rows ();
+      octave_idx_type nc = nda.columns ();
 
-      scalar_arg = (nda.columns () == 1);
+      if (nr == 1)
+	{
+	  result_nr = 1;
+	  result_nc = count;
+
+	  scalar_arg = (nc == 1);
+	}
+      else if (nc == 1)
+	column_vector_arg = true;
     }
 
   Matrix idx (result_nr, result_nc);
 
   Matrix i_idx (result_nr, result_nc);
   Matrix j_idx (result_nr, result_nc);
 
   ArrayN<T> val (dim_vector (result_nr, result_nc));
@@ -136,17 +145,17 @@ find_nonzero_elem_idx (const Array<T>& n
 	      val(count) = nda(k);
 
 	      count++;
 	    }
 
 	  i++;
 	}
     }
-  else if (scalar_arg)
+  else if (scalar_arg || (nda.rows () == 0 && ! column_vector_arg))
     {
       idx.resize (0, 0);
 
       i_idx.resize (0, 0);
       j_idx.resize (0, 0);
 
       val.resize (dim_vector (0, 0));
     }
