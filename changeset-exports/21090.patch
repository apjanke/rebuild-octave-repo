# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1452888808 18000
#      Fri Jan 15 15:13:28 2016 -0500
# Node ID 93d2945112778b41df60542895f45e97e1ac510e
# Parent  2d7f658daa580ad323756ebf7b785dc687413997
don't use setjmp/longjmp to handle error in glpk

* __glpk__.cc (glpk, F__glpk__): Don't use setjmp/longjmp for
non-local exit from glpk.  Eliminate volatile from local variable
declarations.

diff --git a/libinterp/dldfcn/__glpk__.cc b/libinterp/dldfcn/__glpk__.cc
--- a/libinterp/dldfcn/__glpk__.cc
+++ b/libinterp/dldfcn/__glpk__.cc
@@ -21,17 +21,16 @@ along with Octave; see the file COPYING.
 
 */
 
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
 #include <cfloat>
-#include <csetjmp>
 #include <ctime>
 
 #include "lo-ieee.h"
 
 #include "defun-dld.h"
 #include "error.h"
 #include "gripes.h"
 #include "oct-map.h"
@@ -66,18 +65,16 @@ struct control_params
   double toldj;
   double tolpiv;
   double objll;
   double objul;
   double tolint;
   double tolobj;
 };
 
-static jmp_buf mark;  // Address for long jump to jump to
-
 int
 glpk (int sense, int n, int m, double *c, int nz, int *rn, int *cn,
       double *a, double *b, char *ctype, int *freeLB, double *lb,
       int *freeUB, double *ub, int *vartype, int isMIP, int lpsolver,
       int save_pb, int scale, const control_params *par,
       double *xmin, double *fmin, int *status,
       double *lambda, double *redcosts, double *time)
 {
@@ -163,23 +160,18 @@ glpk (int sense, int n, int m, double *c
 
     }
 
   glp_load_matrix (lp, nz, rn, cn, a);
 
   if (save_pb)
     {
       static char tmp[] = "outpb.lp";
-      if (glp_write_lp (lp, NULL, tmp) != 0)
-        {
-          // FIXME: This doesn't work anymore now that error does not return.
-          //        Should longjmp just be deleted?
-          error ("__glpk__: unable to write problem");
-          longjmp (mark, -1);
-        }
+      if (glp_write_lp (lp, 0, tmp) != 0)
+        error ("__glpk__: unable to write problem");
     }
 
   // scale the problem data
   if (! par->presol || lpsolver != 1)
     glp_scale_prob (lp, scale);
 
   // build advanced initial basis (if required)
   if (lpsolver == 1 && ! par->presol)
@@ -337,26 +329,26 @@ Undocumented internal function.\n\
 {
 #if defined (HAVE_GLPK)
 
   // FIXME: Should we even need checking for an internal function?
   if (args.length () != 9)
     print_usage ();
 
   // 1nd Input.  A column array containing the objective function coefficients.
-  volatile int mrowsc = args(0).rows ();
+  int mrowsc = args(0).rows ();
 
   Matrix C = args(0).xmatrix_value ("__glpk__: invalid value of C");
 
   double *c = C.fortran_vec ();
   Array<int> rn;
   Array<int> cn;
   ColumnVector a;
-  volatile int mrowsA;
-  volatile int nz = 0;
+  int mrowsA;
+  int nz = 0;
 
   // 2nd Input.  A matrix containing the constraints coefficients.
   // If matrix A is NOT a sparse matrix
   if (args(1).is_sparse_type ())
     {
       SparseMatrix A = args(1).xsparse_matrix_value ("__glpk__: invalid value of A");
 
       mrowsA = A.rows ();
@@ -457,31 +449,31 @@ Undocumented internal function.\n\
   charMatrix CTYPE = args(5).char_matrix_value ("__glpk__: invalid value of CTYPE");
 
   char *ctype = CTYPE.fortran_vec ();
 
   // 7th Input. A column array containing the types of the variables.
   charMatrix VTYPE = args(6).char_matrix_value ("__glpk__: invalid value of VARTYPE");
 
   Array<int> vartype (dim_vector (mrowsc, 1));
-  volatile int isMIP = 0;
+  int isMIP = 0;
   for (int i = 0; i < mrowsc ; i++)
     {
       if (VTYPE(i,0) == 'I')
         {
           isMIP = 1;
           vartype(i) = GLP_IV;
         }
       else
         vartype(i) = GLP_CV;
     }
 
   // 8th Input. Sense of optimization.
-  volatile int sense;
-  double SENSE = args(7).scalar_value ("__glpk__: invalid value of SENSE");
+  int sense;
+  double SENSE = args(7).xscalar_value ("__glpk__: invalid value of SENSE");
 
   if (SENSE >= 0)
     sense = 1;
   else
     sense = -1;
 
   // 9th Input. A structure containing the control parameters.
   octave_scalar_map PARAM = args(8).xscalar_map_value ("__glpk__: invalid value of PARAM");
@@ -492,17 +484,17 @@ Undocumented internal function.\n\
 
   // Level of messages output by the solver
   par.msglev = 1;
   OCTAVE_GLPK_GET_INT_PARAM ("msglev", par.msglev);
   if (par.msglev < 0 || par.msglev > 3)
     error ("__glpk__: PARAM.msglev must be 0 (no output) or 1 (error and warning messages only [default]) or 2 (normal output) or 3 (full output)");
 
   // scaling option
-  volatile int scale = 16;
+  int scale = 16;
   OCTAVE_GLPK_GET_INT_PARAM ("scale", scale);
   if (scale < 0 || scale > 128)
     error ("__glpk__: PARAM.scale must either be 128 (automatic selection of scaling options), or a bitwise or of: 1 (geometric mean scaling), 16 (equilibration scaling), 32 (round scale factors to power of two), 64 (skip if problem is well scaled");
 
   // Dual simplex option
   par.dual = 1;
   OCTAVE_GLPK_GET_INT_PARAM ("dual", par.dual);
   if (par.dual < 1 || par.dual > 3)
@@ -536,17 +528,17 @@ Undocumented internal function.\n\
 
   // Presolver option
   par.presol = 1;
   OCTAVE_GLPK_GET_INT_PARAM ("presol", par.presol);
   if (par.presol < 0 || par.presol > 1)
     error ("__glpk__: PARAM.presol must be 0 (do NOT use LP presolver) or 1 (use LP presolver [default])");
 
   // LPsolver option
-  volatile int lpsolver = 1;
+  int lpsolver = 1;
   OCTAVE_GLPK_GET_INT_PARAM ("lpsolver", lpsolver);
   if (lpsolver < 1 || lpsolver > 2)
     error ("__glpk__: PARAM.lpsolver must be 1 (simplex method) or 2 (interior point method)");
 
   // Ratio test option
   par.rtest = 34;
   OCTAVE_GLPK_GET_INT_PARAM ("rtest", par.rtest);
   if (par.rtest != 17 && par.rtest != 34)
@@ -554,17 +546,17 @@ Undocumented internal function.\n\
 
   par.tmlim = std::numeric_limits<int>::max ();
   OCTAVE_GLPK_GET_INT_PARAM ("tmlim", par.tmlim);
 
   par.outdly = 0;
   OCTAVE_GLPK_GET_INT_PARAM ("outdly", par.outdly);
 
   // Save option
-  volatile int save_pb = 0;
+  int save_pb = 0;
   OCTAVE_GLPK_GET_INT_PARAM ("save", save_pb);
   save_pb = save_pb != 0;
 
   // Real parameters
 
   // Relative tolerance used to check if the current basic solution
   // is primal feasible
   par.tolbnd = 1e-7;
@@ -594,27 +586,23 @@ Undocumented internal function.\n\
 
   // Assign pointers to the output parameters
   ColumnVector xmin (mrowsc, octave_NA);
   double fmin = octave_NA;
   ColumnVector lambda (mrowsA, octave_NA);
   ColumnVector redcosts (mrowsc, octave_NA);
   double time;
   int status;
-  volatile int errnum = 0;
 
-  int jmpret = setjmp (mark);
-
-  if (jmpret == 0)
-    errnum = glpk (sense, mrowsc, mrowsA, c, nz, rn.fortran_vec (),
-                   cn.fortran_vec (), a.fortran_vec (), b, ctype,
-                   freeLB.fortran_vec (), lb, freeUB.fortran_vec (), ub,
-                   vartype.fortran_vec (), isMIP, lpsolver, save_pb, scale,
-                   &par, xmin.fortran_vec (), &fmin, &status,
-                   lambda.fortran_vec (), redcosts.fortran_vec (), &time);
+  int errnum = glpk (sense, mrowsc, mrowsA, c, nz, rn.fortran_vec (),
+                     cn.fortran_vec (), a.fortran_vec (), b, ctype,
+                     freeLB.fortran_vec (), lb, freeUB.fortran_vec (), ub,
+                     vartype.fortran_vec (), isMIP, lpsolver, save_pb, scale,
+                     &par, xmin.fortran_vec (), &fmin, &status,
+                     lambda.fortran_vec (), redcosts.fortran_vec (), &time);
 
   octave_scalar_map extra;
 
   if (! isMIP)
     {
       extra.assign ("lambda", lambda);
       extra.assign ("redcosts", redcosts);
     }
