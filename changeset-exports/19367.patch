# HG changeset patch
# User Rik <rik@octave.org>
# Date 1417191771 28800
#      Fri Nov 28 08:22:51 2014 -0800
# Branch gui-release
# Node ID 7467c3e773fdc45079066596d41b5af4c00d0eda
# Parent  f550bf908f475797c0068a6a101a93b7f01bec8c
# Parent  c490eac28bbba43ae46ad767664b1b06c05b2413
maint: Periodic merge of stable to gui-release.

diff --git a/libinterp/corefcn/pr-output.cc b/libinterp/corefcn/pr-output.cc
--- a/libinterp/corefcn/pr-output.cc
+++ b/libinterp/corefcn/pr-output.cc
@@ -380,18 +380,17 @@ rational_approx (double val, int len)
       while (1)
         {
           double flip = 1. / frac;
           double step = xround (flip);
           double nextn = n;
           double nextd = d;
 
           // Have we converged to 1/intmax ?
-          if (m > 100
-              || fabs (frac) < 1 / static_cast<double> (std::numeric_limits<int>::max ()))
+          if (fabs (frac) < 1 / static_cast<double> (std::numeric_limits<int>::max ()))
             {
               lastn = n;
               lastd = d;
               break;
             }
 
           frac = flip - step;
           n = n * step + lastn;
@@ -403,22 +402,24 @@ rational_approx (double val, int len)
           buf.flags (std::ios::fixed);
           buf << std::setprecision (0) << static_cast<int>(n)
               << "/" << static_cast<int>(d);
           m++;
 
           if (n < 0 && d < 0)
             {
               // Double negative, string can be two characters longer..
-              if (buf.str ().length () > static_cast<unsigned int>(len + 2) &&
-                  m > 1)
+              if (buf.str ().length () > static_cast<unsigned int>(len + 2))
                 break;
             }
-          else if (buf.str ().length () > static_cast<unsigned int>(len) &&
-                   m > 1)
+          else if (buf.str ().length () > static_cast<unsigned int>(len))
+            break;
+
+          if (fabs (n) > std::numeric_limits<int>::max ()
+              || fabs (d) > std::numeric_limits<int>::max ())
             break;
 
           s = buf.str ();
         }
 
       if (lastd < 0.)
         {
           // Move sign to the top
@@ -430,16 +431,30 @@ rational_approx (double val, int len)
               << "/" << static_cast<int>(lastd);
           s = buf.str ();
         }
     }
 
   return s;
 }
 
+/*
+%!assert (rats (2.0005, 9), "4001/2000")
+%!assert (rats (-2.0005, 10), "-4001/2000")
+%!assert (strtrim (rats (2.0005, 30)), "4001/2000")
+%!assert (pi - str2num (rats (pi, 30)), 0, 4 * eps)
+%!assert (e - str2num (rats (e, 30)), 0, 4 * eps)
+%!assert (rats (123, 2), " *")
+
+%!test
+%! v = 1 / double (intmax);
+%! err = v - str2num (rats(v, 12));
+%! assert (err, 0, 4 * eps);
+*/
+
 class
 pr_rational_float
 {
 public:
 
   const float_format& f;
 
   double val;
@@ -3403,16 +3418,19 @@ You can convert the string back into a m
 @group\n\
 r = rats (hilb (4));\n\
 x = str2num (r)\n\
 @end group\n\
 @end example\n\
 \n\
 The optional second argument defines the maximum length of the string\n\
 representing the elements of @var{x}.  By default @var{len} is 9.\n\
+\n\
+If the length of the smallest possible rational approximation exceeds\n\
+@var{len}, an asterisk (*) padded with spaces will be returned instead.\n\
 @seealso{format, rat}\n\
 @end deftypefn")
 {
   octave_value retval;
 
   int nargin = args.length ();
 
   if (nargin < 1 || nargin > 2 || nargout > 1)
