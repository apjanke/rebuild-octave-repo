# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1495034262 14400
#      Wed May 17 11:17:42 2017 -0400
# Node ID 1ee4b394a687e3bef0b04792fbb589975b3fafc1
# Parent  34963c0768795cc28cdb8400f95776fae9bf1b3c
use feval instead of do_multi_index_op

* ov-class.cc, ov-classdef.cc, ov-fcn-handle.cc, ov-oncleanup.cc,
pt-eval.cc: Use feval instead of do_multi_index_op.

diff --git a/libinterp/octave-value/ov-class.cc b/libinterp/octave-value/ov-class.cc
--- a/libinterp/octave-value/ov-class.cc
+++ b/libinterp/octave-value/ov-class.cc
@@ -1049,17 +1049,17 @@ octave_class::reconstruct_exemplar (void
           interpreter_try (frame);
 
           bool execution_error = false;
 
           octave_value_list result;
 
           try
             {
-              result = ctor.do_multi_index_op (1, octave_value_list ());
+              result = octave::feval (ctor, ovl (), 1);
             }
           catch (const octave::execution_exception&)
             {
               octave::interpreter::recover_from_exception ();
 
               execution_error = true;
             }
 
diff --git a/libinterp/octave-value/ov-classdef.cc b/libinterp/octave-value/ov-classdef.cc
--- a/libinterp/octave-value/ov-classdef.cc
+++ b/libinterp/octave-value/ov-classdef.cc
@@ -3311,18 +3311,17 @@ cdef_package::cdef_package_rep::meta_sub
             // "end" that makes it impossible to execute the
             // function call at this stage.
 
             if (type.size () > 1
                 && ! fcn->is_postfix_index_handled (type[1]))
               {
                 octave_value_list tmp_args;
 
-                retval = o.do_multi_index_op (nargout,
-                                              tmp_args);
+                retval = octave::feval (o, tmp_args, nargout);
               }
             else
               retval(0) = o;
 
             if (type.size () > 1 && idx.size () > 1)
               retval = retval(0).next_subsref (nargout, type,
                                                idx, 1);
           }
diff --git a/libinterp/octave-value/ov-fcn-handle.cc b/libinterp/octave-value/ov-fcn-handle.cc
--- a/libinterp/octave-value/ov-fcn-handle.cc
+++ b/libinterp/octave-value/ov-fcn-handle.cc
@@ -190,28 +190,28 @@ octave_fcn_handle::do_multi_index_op (in
           else
             {
               out_of_date_check (it->second, dispatch_type, false);
               ov_fcn = it->second;
             }
         }
 
       if (ov_fcn.is_defined ())
-        retval = ov_fcn.do_multi_index_op (nargout, args);
+        retval = octave::feval (ov_fcn, args, nargout);
       else if (fcn.is_defined ())
-        retval = fcn.do_multi_index_op (nargout, args);
+        retval = octave::feval (fcn, args, nargout);
       else
         error ("%s: no method for class %s",
                nm.c_str (), dispatch_type.c_str ());
     }
   else
     {
       // Non-overloaded function (anonymous, subfunction, private function).
       if (fcn.is_defined ())
-        retval = fcn.do_multi_index_op (nargout, args);
+        retval = octave::feval (fcn, args, nargout);
       else
         error ("%s: no longer valid function handle", nm.c_str ());
     }
 
   return retval;
 }
 
 dim_vector
@@ -2080,17 +2080,17 @@ octave_fcn_binder::do_multi_index_op (in
           int j = arg_mask[i];
           if (j >= 0)
             arg_template(i) = args(j); // May force a copy...
         }
 
       // Make a shallow copy of arg_template, to ensure consistency throughout
       // the following call even if we happen to get back here.
       octave_value_list tmp (arg_template);
-      retval = root_handle.do_multi_index_op (nargout, tmp);
+      retval = octave::feval (root_handle, tmp, nargout);
     }
   else
     retval = octave_fcn_handle::do_multi_index_op (nargout, args);
 
   return retval;
 }
 
 /*
diff --git a/libinterp/octave-value/ov-oncleanup.cc b/libinterp/octave-value/ov-oncleanup.cc
--- a/libinterp/octave-value/ov-oncleanup.cc
+++ b/libinterp/octave-value/ov-oncleanup.cc
@@ -24,16 +24,17 @@ along with Octave; see the file COPYING.
 #  include "config.h"
 #endif
 
 #include "defun.h"
 #include "interpreter.h"
 #include "ov-oncleanup.h"
 #include "ov-fcn.h"
 #include "ov-usr-fcn.h"
+#include "parse.h"
 #include "pt-misc.h"
 
 DEFINE_OV_TYPEID_FUNCTIONS_AND_DATA (octave_oncleanup, "onCleanup",
                                      "onCleanup");
 
 octave_oncleanup::octave_oncleanup (const octave_value& f)
   : fcn (f)
 {
@@ -76,17 +77,17 @@ octave_oncleanup::~octave_oncleanup (voi
   frame.protect_var (quit_allowed);
   quit_allowed = false;
 
   interpreter_try (frame);
 
   try
     {
       // Run the actual code.
-      fcn.do_multi_index_op (0, octave_value_list ());
+      octave::feval (fcn);
     }
   catch (const octave::interrupt_exception&)
     {
       octave::interpreter::recover_from_exception ();
 
       warning ("onCleanup: interrupt occurred in cleanup action");
     }
   catch (const octave::execution_exception&)
diff --git a/libinterp/parse-tree/pt-eval.cc b/libinterp/parse-tree/pt-eval.cc
--- a/libinterp/parse-tree/pt-eval.cc
+++ b/libinterp/parse-tree/pt-eval.cc
@@ -360,17 +360,17 @@ namespace octave
             tmp1(0) = ov_base;
           }
 
         octave_value fcn = symbol_table::find_function ("colon", tmp1);
 
         if (! fcn.is_defined ())
           error ("can not find overloaded colon function");
 
-        octave_value_list tmp2 = fcn.do_multi_index_op (1, tmp1);
+        octave_value_list tmp2 = octave::feval (fcn, tmp1, 1);
 
         val = tmp2 (0);
       }
     else
       {
         octave_value ov_increment = 1.0;
 
         if (op_increment)
