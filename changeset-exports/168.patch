# HG changeset patch
# User jwe
# Date 751008479 0
#      Tue Oct 19 05:27:59 1993 +0000
# Node ID a500c60e8f2351daee62bf1474978acc228d2df5
# Parent  43074bfdc8c5ef2ef9ed78a5b10381bead60ebe1
[project @ 1993-10-19 05:24:44 by jwe]

diff --git a/src/oct-hist.cc b/src/oct-hist.cc
--- a/src/oct-hist.cc
+++ b/src/oct-hist.cc
@@ -53,16 +53,19 @@ Software Foundation, Inc.
 #include "octave-hist.h"
 #include "sighandlers.h"
 
 extern "C"
 {
 #include <readline/history.h>
 }
 
+// Nonzero means input is coming from temporary history file.
+int input_from_tmp_history_file = 0;
+
 // Nonzero means we are saving history lines.
 int saving_history = 1;
 
 // The number of lines to save in the history file.
 static int octave_hist_size = 1024;
 
 // The name of the history file.
 static char *octave_hist_file;
@@ -507,17 +510,17 @@ mk_tmp_hist_file (int argc, char **argv,
   else
     {
       for (int i = hist_beg; i <= hist_end; i++)
 	file << histline (i) << "\n";
     }
 
   file.close ();
 
-  return name;
+  return strsave (name);
 }
 
 void
 do_edit_history (int argc, char **argv)
 {
   char *name = mk_tmp_hist_file (argc, argv, 0, "edit_history");
 
   if (name == (char *) NULL)
@@ -564,50 +567,58 @@ do_edit_history (int argc, char **argv)
     }
 
   file.close ();
 
 // Turn on command echo, so the output from this will make better sense.
 
   begin_unwind_frame ("do_edit_history");
   unwind_protect_int (echo_input);
+  unwind_protect_int (input_from_tmp_history_file);
   echo_input = 1;
+  input_from_tmp_history_file = 1;
 
   parse_and_execute (name, 1);
 
   run_unwind_frame ("do_edit_history");
 
 // Delete the temporary file.  Should probably be done with an
 // unwind_protect.
 
   unlink (name);
+
+  delete [] name;
 }
 
 void
 do_run_history (int argc, char **argv)
 {
   char *name = mk_tmp_hist_file (argc, argv, 1, "run_history");
 
   if (name == (char *) NULL)
     return;
 
 // Turn on command echo, so the output from this will make better sense.
 
   begin_unwind_frame ("do_run_history");
   unwind_protect_int (echo_input);
+  unwind_protect_int (input_from_tmp_history_file);
   echo_input = 1;
+  input_from_tmp_history_file = 1;
 
   parse_and_execute (name, 1);
 
   run_unwind_frame ("do_run_history");
 
 // Delete the temporary file.  Should probably be done with an
 // unwind_protect.
 
   unlink (name);
+
+  delete [] name;
 }
 
 int
 current_history_number (void)
 {
   using_history ();
 
   if (octave_hist_size > 0)
diff --git a/src/oct-hist.h b/src/oct-hist.h
--- a/src/oct-hist.h
+++ b/src/oct-hist.h
@@ -31,16 +31,19 @@ Software Foundation, 675 Mass Ave, Cambr
 extern void initialize_history (void);
 extern void clean_up_history (void);
 extern void maybe_save_history (char*);
 extern void do_history (int, char**);
 extern void do_edit_history (int, char**);
 extern void do_run_history (int, char**);
 extern int current_history_number (void);
 
+// Nonzero means input is coming from temporary history file.
+extern int input_from_tmp_history_file;
+
 // Nonzero means we are saving history lines.
 extern int saving_history;
 
 #endif
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
diff --git a/src/parse.y b/src/parse.y
--- a/src/parse.y
+++ b/src/parse.y
@@ -29,16 +29,17 @@ Software Foundation, 675 Mass Ave, Cambr
 #define YYDEBUG 1
 
 #include "SLStack.h"
 
 #include "Matrix.h"
 
 #include "error.h"
 #include "variables.h"
+#include "octave-hist.h"
 #include "user-prefs.h"
 #include "input.h"
 #include "utils.h"
 #include "tree.h"
 #include "symtab.h"
 #include "builtins.h"
 #include "octave.h"
 #include "parse.h"
@@ -481,17 +482,17 @@ global_decl1	: NAME
 		  { force_global ($1->sym_rec()->name ()); }
 		| NAME '=' expression
 		  {
 		    symbol_record *sr = force_global ($1->sym_rec()->name ());
 		    tree_identifier *id = new tree_identifier
 		      (sr, $1->line (), $1->column ());
 		    tree_simple_assignment_expression *expr =
 		      new tree_simple_assignment_expression
-			(id, $3, $2->line () , $2->column ());
+			(id, $3, $2->line (), $2->column ());
 		    expr->eval (0);
 		  }
 		| global_decl1 optcomma NAME
 		  { force_global ($3->sym_rec()->name ()); }
 		| global_decl1 optcomma NAME '=' expression
 		  {
 		    symbol_record *sr = force_global ($3->sym_rec()->name ());
 		    tree_identifier *id = new tree_identifier
@@ -903,17 +904,18 @@ func_def2	: identifier safe local_symtab
 			  warning ("function name `%s' does not agree\
  with M-file name `%s.m'", id_name, curr_m_file_name);
 
 			id_to_define->define ($4);
 			id_to_define->document (help_buf);
 		      }
 		    else
 		      {
-			if (reading_script_file
+			if (! input_from_tmp_history_file
+			    && reading_script_file
 			    && strcmp (curr_m_file_name, id_name) == 0)
 			  warning ("function `%s' defined within\
  script file `%s.m'", id_name, curr_m_file_name);
 
 			$1->define ($4);
 			$1->document (help_buf);
 			top_level_sym_tab->clear (id_name);
 		      }
