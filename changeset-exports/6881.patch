# HG changeset patch
# User jwe
# Date 1189201690 0
#      Fri Sep 07 21:48:10 2007 +0000
# Node ID cd2c6a69a70d18ecb3156c0c556ae47c8a8db24e
# Parent  e00a8f661f06f359dd4a3d33417fcab0e228aa47
[project @ 2007-09-07 21:48:09 by jwe]

diff --git a/liboctave/Array.cc b/liboctave/Array.cc
--- a/liboctave/Array.cc
+++ b/liboctave/Array.cc
@@ -1212,21 +1212,18 @@ Array<T>::transpose (void) const
       return Array<T> (*this, dim_vector (nc, nr));
     }
 }
 
 template <class T>
 T *
 Array<T>::fortran_vec (void)
 {
-  if (rep->count > 1)
-    {
-      --rep->count;
-      rep = new typename Array<T>::ArrayRep (*rep);
-    }
+  make_unique ();
+
   return rep->data;
 }
 
 template <class T>
 void
 Array<T>::maybe_delete_dims (void)
 {
   int nd = dimensions.length ();
@@ -1251,26 +1248,26 @@ Array<T>::maybe_delete_dims (void)
     }
 
   if (nd != new_dims.length ())
     dimensions = new_dims;
 }
 
 template <class T>
 void
-Array<T>::clear_index (void)
+Array<T>::clear_index (void) const
 {
   delete [] idx;
   idx = 0;
   idx_count = 0;
 }
 
 template <class T>
 void
-Array<T>::set_index (const idx_vector& idx_arg)
+Array<T>::set_index (const idx_vector& idx_arg) const
 {
   int nd = ndims ();
 
   if (! idx && nd > 0)
     idx = new idx_vector [nd];
 
   if (idx_count < nd)
     {
@@ -2007,17 +2004,17 @@ Array<T>::maybe_delete_elements (Array<i
 	  (*current_liboctave_error_handler)
 	    ("a null assignment can have only one non-colon index");
 	}
     }
 }
 
 template <class T>
 Array<T>
-Array<T>::value (void)
+Array<T>::value (void) const
 {
   Array<T> retval;
 
   int n_idx = index_count ();
 
   if (n_idx == 2)
     {
       idx_vector *tmp = get_idx ();
diff --git a/liboctave/Array.h b/liboctave/Array.h
--- a/liboctave/Array.h
+++ b/liboctave/Array.h
@@ -138,18 +138,18 @@ public:
   // should not access these data members directly!
 
   typename Array<T>::ArrayRep *rep;
 
   dim_vector dimensions;
 
 protected:
 
-  idx_vector *idx;
-  int idx_count;
+  mutable idx_vector *idx;
+  mutable int idx_count;
 
   Array (T *d, octave_idx_type n)
     : rep (new typename Array<T>::ArrayRep (d, n)), dimensions (n),
       idx (0), idx_count (0) { }
 
   Array (T *d, const dim_vector& dv)
     : rep (new typename Array<T>::ArrayRep (d, get_size (dv))),
       dimensions (dv), idx (0), idx_count (0) { }
@@ -488,19 +488,19 @@ public:
 
       return *this;
     }
 
   int ndims (void) const { return dimensions.length (); }
 
   void maybe_delete_dims (void);
 
-  void clear_index (void);
+  void clear_index (void) const;
 
-  void set_index (const idx_vector& i);
+  void set_index (const idx_vector& i) const;
 
   int index_count (void) const { return idx_count; }
 
   idx_vector *get_idx (void) const { return idx; }
 
   void maybe_delete_elements (idx_vector& i);
 
   void maybe_delete_elements_1 (idx_vector& i);
@@ -508,17 +508,17 @@ public:
   void maybe_delete_elements_2 (idx_vector& i);
 
   void maybe_delete_elements (idx_vector& i, idx_vector& j);
 
   void maybe_delete_elements (idx_vector& i, idx_vector& j, idx_vector& k);
 
   void maybe_delete_elements (Array<idx_vector>& ra_idx, const T& rfv);
 
-  Array<T> value (void);
+  Array<T> value (void) const;
 
   Array<T> index (idx_vector& i, int resize_ok = 0,
 		  const T& rfv = resize_fill_value (T ())) const;
 
   Array<T> index1 (idx_vector& i, int resize_ok = 0,
 		   const T& rfv = resize_fill_value (T ())) const;
 
   Array<T> index2 (idx_vector& i, int resize_ok = 0,
diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,17 @@
+2007-09-07  John W. Eaton  <jwe@octave.org>
+
+	* Array.cc (Array<T>::fortran_vec): Call make_unique instead of
+	manipulating rep directly.
+
+	* Array.h (idx, idx_count): Declare mutable.
+	(Array<T>::set_index, Array<T>::clear_index, Array<T>::value):
+	Now const.
+
 2007-09-06  David Bateman  <dbateman@free.fr>
 
         * Array-util.cc (increment_index): dimensions can have singleton
         trailing dimensions.
         * Array.h (range_error, xelem, checkelem, elem, operator ()):
         Modify use of Array<int> to Array<octave_idx_type> and adjust
         where necessary.
         * Array.cc (range_error): ditto.
diff --git a/src/DLD-FUNCTIONS/bsxfun.cc b/src/DLD-FUNCTIONS/bsxfun.cc
--- a/src/DLD-FUNCTIONS/bsxfun.cc
+++ b/src/DLD-FUNCTIONS/bsxfun.cc
@@ -128,18 +128,18 @@ DEFUN_DLD (bsxfun, args, nargout,
   " -*- texinfo -*-\n\
 @deftypefn {Lodable Function} {} bsxfun (@var{f}, @var{a}, @var{b})\n\
 Applies a binary function @var{f} element-wise to two matrix arguments\n\
 @var{a} and @var{b}. The function @var{f} must be capable of accepting\n\
 two column vector arguments of equal length, or one column vector\n\
 argument and a scalar.\n\
 \n\
 The dimensions of @var{a} and @var{b} must be equal or singleton. The\n\
-singleton dimensions a the matirces will be expanded to the same\n\
-dimensioanlity as the other matrix.\n\
+singleton dimensions of the matirces will be expanded to the same\n\
+dimensionality as the other matrix.\n\
 \n\
 @seealso{arrayfun, cellfun}\n\
 @end deftypefn")
 {
   int nargin = args.length ();
   octave_value_list retval;
 
   if (nargin != 3)
