# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1518504856 18000
#      Tue Feb 13 01:54:16 2018 -0500
# Node ID d2467914ce331b52e555cd8c8c0bfe802519f39a
# Parent  c1820e83f309ba4cdfabdd1e4438283579dc3473
enable (or improve) display for more types in the variable editor

* pr-output.h, pr-output.cc (make_format): Provide versions for Range,
FloatNDArray, FloatComplexNDArray, intNDArray, double, float, Complex,
FloatComplex, and octave_int types.  Use format when printing scalar
integer values.

* ov-base-diag.cc, ov-base-diag.h
(octave_base_diag<DMT, MT>::get_edit_display_format,
octave_base_diag<DMT, MT>::edit_display): Pass format to
octave_print_internal.

* ov-base-int.cc, ov-base-int.h
(octave_base_int_matrix<T>::edit_display,
octave_base_int_scalar<ST>::edit_display): New functions.

* ov-base-scalar.cc, ov-base-scalar.h
(octave_base_scalar<ST>::get_edit_display_format): New function.
(octave_base_scalar<ST>::edit_display): Pass format to
octave_print_internal.

* ov-base-sparse.cc, ov-base-sparse.h
(octave_base_sparse<MT>::get_edit_display_format,
octave_base_sparse<MT>::edit_display): New functions.

* ov-perm.cc, ov-perm.h (octave_perm_matrix::get_edit_display_format,
octave_perm_matrix::edit_display): Pass format to
octave_print_internal.

* ov-range.cc, ov-range.h (octave_range::get_edit_display_format,
octave_range::edit_display): New functions.

diff --git a/libinterp/corefcn/pr-output.cc b/libinterp/corefcn/pr-output.cc
--- a/libinterp/corefcn/pr-output.cc
+++ b/libinterp/corefcn/pr-output.cc
@@ -1597,33 +1597,152 @@ pr_plus_format (std::ostream& os, const 
   else if (val < T (0))
     os << plus_format_chars[1];
   else
     os << plus_format_chars[2];
 }
 
 template <>
 float_display_format
+make_format (const Range& rng)
+{
+  int fw = 0;
+  double scale = 0;
+  return make_format (rng, fw, scale);
+}
+
+template <>
+float_display_format
 make_format (const NDArray& nda)
 {
   int fw = 0;
   double scale = 0;
   return make_format (Matrix (nda), fw, scale);
 }
 
 template <>
 float_display_format
+make_format (const FloatNDArray& nda)
+{
+  int fw = 0;
+  double scale = 0;
+  return make_format (FloatMatrix (nda), fw, scale);
+}
+
+template <>
+float_display_format
 make_format (const ComplexNDArray& nda)
 {
   int r_fw = 0;
   int i_fw = 0;
   double scale = 0;
   return make_format (ComplexMatrix (nda), r_fw, i_fw, scale);
 }
 
+template <>
+float_display_format
+make_format (const FloatComplexNDArray& nda)
+{
+  int r_fw = 0;
+  int i_fw = 0;
+  double scale = 0;
+  return make_format (FloatComplexMatrix (nda), r_fw, i_fw, scale);
+}
+
+#define MAKE_INT_MATRIX_FORMAT(TYPE)                                    \
+  template <>                                                           \
+  float_display_format                                                  \
+  make_format (const intNDArray<TYPE>& nda)                             \
+  {                                                                     \
+    bool isneg = false;                                                 \
+    int digits = 0;                                                     \
+                                                                        \
+    for (octave_idx_type i = 0; i < nda.numel (); i++)                  \
+      {                                                                 \
+        int new_digits                                                  \
+          = static_cast<int>                                            \
+          (std::floor (log10 (double (abs (nda(i).value ()))) + 1.0));  \
+                                                                        \
+        if (new_digits > digits)                                        \
+          digits = new_digits;                                          \
+                                                                        \
+        if (! isneg)                                                    \
+          isneg = (abs (nda(i).value ()) != nda(i).value ());           \
+      }                                                                 \
+                                                                        \
+    return float_display_format (float_format (digits + isneg, 0, 0));  \
+  }
+
+MAKE_INT_MATRIX_FORMAT (octave_int8)
+MAKE_INT_MATRIX_FORMAT (octave_uint8)
+MAKE_INT_MATRIX_FORMAT (octave_int16)
+MAKE_INT_MATRIX_FORMAT (octave_uint16)
+MAKE_INT_MATRIX_FORMAT (octave_int32)
+MAKE_INT_MATRIX_FORMAT (octave_uint32)
+MAKE_INT_MATRIX_FORMAT (octave_int64)
+MAKE_INT_MATRIX_FORMAT (octave_uint64)
+
+template <>
+float_display_format
+make_format (const double& d)
+{
+  int fw = 0;
+  return make_format (d, fw);
+}
+
+template <>
+float_display_format
+make_format (const float& f)
+{
+  int fw = 0;
+  return make_format (f, fw);
+}
+
+template <>
+float_display_format
+make_format (const Complex& c)
+{
+  int r_fw = 0;
+  int i_fw = 0;
+  return make_format (c, r_fw, i_fw);
+}
+
+template <>
+float_display_format
+make_format (const FloatComplex& c)
+{
+  int r_fw = 0;
+  int i_fw = 0;
+  return make_format (c, r_fw, i_fw);
+}
+
+#define MAKE_INT_SCALAR_FORMAT(TYPE)                                    \
+  template <>                                                           \
+  float_display_format                                                  \
+  make_format (const octave_int<TYPE>& val)                             \
+  {                                                                     \
+    bool isneg = false;                                                 \
+    int digits                                                          \
+      = static_cast<int>                                                \
+      (std::floor (log10 (double (abs (val.value ()))) + 1.0));         \
+                                                                        \
+    isneg = (abs (val.value ()) != val.value ());                       \
+                                                                        \
+    return float_display_format (float_format (digits + isneg, 0, 0));  \
+  }
+
+MAKE_INT_SCALAR_FORMAT (int8_t)
+MAKE_INT_SCALAR_FORMAT (uint8_t)
+MAKE_INT_SCALAR_FORMAT (int16_t)
+MAKE_INT_SCALAR_FORMAT (uint16_t)
+MAKE_INT_SCALAR_FORMAT (int32_t)
+MAKE_INT_SCALAR_FORMAT (uint32_t)
+MAKE_INT_SCALAR_FORMAT (int64_t)
+MAKE_INT_SCALAR_FORMAT (uint64_t)
+
 void
 octave_print_internal (std::ostream&, char, bool)
 {
   panic_impossible ();
 }
 
 void
 octave_print_internal (std::ostream& os, double d,
@@ -3028,37 +3147,44 @@ pr_int (std::ostream&, const octave_uint
 template void
 pr_int (std::ostream&, const octave_uint32&, int);
 
 template void
 pr_int (std::ostream&, const octave_uint64&, int);
 
 template <typename T>
 void
-octave_print_internal_template (std::ostream& os, const octave_int<T>& val,
-                                bool)
+octave_print_internal_template (std::ostream& os,
+                                const float_display_format& fmt,
+                                const octave_int<T>& val, bool)
 {
   if (plus_format)
     {
       pr_plus_format (os, val);
     }
   else
     {
       if (free_format)
         os << typename octave_print_conv<octave_int<T>>::print_conv_type (val);
       else
-        pr_int (os, val);
+        {
+          float_format r_fmt = fmt.real_format ();
+
+          pr_int (os, val, r_fmt.fw);
+        }
     }
 }
 
 #define PRINT_INT_SCALAR_INTERNAL(TYPE)                                 \
   OCTINTERP_API void                                                    \
-  octave_print_internal (std::ostream& os, const octave_int<TYPE>& val, bool dummy) \
+  octave_print_internal (std::ostream& os,                              \
+                         const float_display_format& fmt,               \
+                         const octave_int<TYPE>& val, bool dummy)       \
   {                                                                     \
-    octave_print_internal_template (os, val, dummy);                    \
+    octave_print_internal_template (os, fmt, val, dummy);               \
   }
 
 PRINT_INT_SCALAR_INTERNAL (int8_t)
 PRINT_INT_SCALAR_INTERNAL (uint8_t)
 PRINT_INT_SCALAR_INTERNAL (int16_t)
 PRINT_INT_SCALAR_INTERNAL (uint16_t)
 PRINT_INT_SCALAR_INTERNAL (int32_t)
 PRINT_INT_SCALAR_INTERNAL (uint32_t)
@@ -3071,17 +3197,18 @@ octave_print_internal_template (std::ost
                                 bool pr_as_read_syntax, int extra_indent)
 {
   // FIXME: this mostly duplicates the code in the print_nd_array<>
   // function.  Can fix this with std::is_same from C++11.
 
   if (nda.isempty ())
     print_empty_nd_array (os, nda.dims (), pr_as_read_syntax);
   else if (nda.numel () == 1)
-    octave_print_internal_template (os, nda(0), pr_as_read_syntax);
+    octave_print_internal_template (os, float_display_format (), nda(0),
+                                    pr_as_read_syntax);
   else if (plus_format && ! pr_as_read_syntax)
     {
       int ndims = nda.ndims ();
 
       Array<octave_idx_type> ra_idx (dim_vector (ndims, 1), 0);
 
       dim_vector dims = nda.dims ();
 
diff --git a/libinterp/corefcn/pr-output.h b/libinterp/corefcn/pr-output.h
--- a/libinterp/corefcn/pr-output.h
+++ b/libinterp/corefcn/pr-output.h
@@ -255,110 +255,109 @@ octave_print_internal (std::ostream& os,
                        bool pr_as_read_syntax = false,
                        int extra_indent = 0);
 
 extern OCTINTERP_API void
 octave_print_internal (std::ostream& os, const intNDArray<octave_uint64>& sa,
                        bool pr_as_read_syntax = false,
                        int extra_indent = 0);
 
-extern OCTINTERP_API void
-octave_print_internal (std::ostream& os, const octave_int<int8_t>& sa,
-                       bool pr_as_read_syntax = false);
-
-inline void
+extern void
 octave_print_internal (std::ostream& os, const float_display_format&,
                        const octave_int<int8_t>& sa,
+                       bool pr_as_read_syntax = false);
+inline OCTINTERP_API void
+octave_print_internal (std::ostream& os, const octave_int<int8_t>& sa,
                        bool pr_as_read_syntax = false)
 {
-  octave_print_internal (os, sa, pr_as_read_syntax);
+  octave_print_internal (os, float_display_format (), sa, pr_as_read_syntax);
 }
 
-extern OCTINTERP_API void
-octave_print_internal (std::ostream& os, const octave_int<uint8_t>& sa,
+extern void
+octave_print_internal (std::ostream& os, const float_display_format&,
+                       const octave_int<uint8_t>& sa,
                        bool pr_as_read_syntax = false);
 
-inline void
-octave_print_internal (std::ostream& os, const float_display_format&,
-                       const octave_int<uint8_t>& sa,
+inline OCTINTERP_API void
+octave_print_internal (std::ostream& os, const octave_int<uint8_t>& sa,
                        bool pr_as_read_syntax = false)
 {
-  octave_print_internal (os, sa, pr_as_read_syntax);
+  octave_print_internal (os, float_display_format (), sa, pr_as_read_syntax);
 }
 
-extern OCTINTERP_API void
-octave_print_internal (std::ostream& os, const octave_int<int16_t>& sa,
-                       bool pr_as_read_syntax = false);
-
-inline void
+extern void
 octave_print_internal (std::ostream& os, const float_display_format&,
                        const octave_int<int16_t>& sa,
+                       bool pr_as_read_syntax = false);
+
+inline OCTINTERP_API void
+octave_print_internal (std::ostream& os, const octave_int<int16_t>& sa,
                        bool pr_as_read_syntax = false)
 {
-  octave_print_internal (os, sa, pr_as_read_syntax);
+  octave_print_internal (os, float_display_format (), sa, pr_as_read_syntax);
 }
 
-extern OCTINTERP_API void
-octave_print_internal (std::ostream& os, const octave_int<uint16_t>& sa,
+extern void
+octave_print_internal (std::ostream& os, const float_display_format&,
+                       const octave_int<uint16_t>& sa,
                        bool pr_as_read_syntax = false);
 
-inline void
-octave_print_internal (std::ostream& os, const float_display_format&,
-                       const octave_int<uint16_t>& sa,
+inline OCTINTERP_API void
+octave_print_internal (std::ostream& os, const octave_int<uint16_t>& sa,
                        bool pr_as_read_syntax = false)
 {
-  octave_print_internal (os, sa, pr_as_read_syntax);
+  octave_print_internal (os, float_display_format (), sa, pr_as_read_syntax);
 }
 
-extern OCTINTERP_API void
-octave_print_internal (std::ostream& os, const octave_int<int32_t>& sa,
-                       bool pr_as_read_syntax = false);
-
-inline void
+extern void
 octave_print_internal (std::ostream& os, const float_display_format&,
                        const octave_int<int32_t>& sa,
+                       bool pr_as_read_syntax = false);
+
+inline OCTINTERP_API void
+octave_print_internal (std::ostream& os, const octave_int<int32_t>& sa,
                        bool pr_as_read_syntax = false)
 {
-  octave_print_internal (os, sa, pr_as_read_syntax);
+  octave_print_internal (os, float_display_format (), sa, pr_as_read_syntax);
 }
 
-extern OCTINTERP_API void
-octave_print_internal (std::ostream& os, const octave_int<uint32_t>& sa,
+extern void
+octave_print_internal (std::ostream& os, const float_display_format&,
+                       const octave_int<uint32_t>& sa,
                        bool pr_as_read_syntax = false);
 
-inline void
-octave_print_internal (std::ostream& os, const float_display_format&,
-                       const octave_int<uint32_t>& sa,
+inline OCTINTERP_API void
+octave_print_internal (std::ostream& os, const octave_int<uint32_t>& sa,
                        bool pr_as_read_syntax = false)
 {
-  octave_print_internal (os, sa, pr_as_read_syntax);
+  octave_print_internal (os, float_display_format (), sa, pr_as_read_syntax);
 }
 
-extern OCTINTERP_API void
-octave_print_internal (std::ostream& os, const octave_int<int64_t>& sa,
+extern void
+octave_print_internal (std::ostream& os, const float_display_format&,
+                       const octave_int<int64_t>& sa,
                        bool pr_as_read_syntax = false);
 
-inline void
-octave_print_internal (std::ostream& os, const float_display_format&,
-                       const octave_int<int64_t>& sa,
+inline OCTINTERP_API void
+octave_print_internal (std::ostream& os, const octave_int<int64_t>& sa,
                        bool pr_as_read_syntax = false)
 {
-  octave_print_internal (os, sa, pr_as_read_syntax);
+  octave_print_internal (os, float_display_format (), sa, pr_as_read_syntax);
 }
 
-extern OCTINTERP_API void
-octave_print_internal (std::ostream& os, const octave_int<uint64_t>& sa,
+extern void
+octave_print_internal (std::ostream& os, const float_display_format&,
+                       const octave_int<uint64_t>& sa,
                        bool pr_as_read_syntax = false);
 
-inline void
-octave_print_internal (std::ostream& os, const float_display_format&,
-                       const octave_int<uint64_t>& sa,
+inline OCTINTERP_API void
+octave_print_internal (std::ostream& os, const octave_int<uint64_t>& sa,
                        bool pr_as_read_syntax = false)
 {
-  octave_print_internal (os, sa, pr_as_read_syntax);
+  octave_print_internal (os, float_display_format (), sa, pr_as_read_syntax);
 }
 
 extern OCTINTERP_API void
 octave_print_internal (std::ostream& os, const Cell& cell,
                        bool pr_as_read_syntax = false,
                        int extra_indent = 0,
                        bool pr_as_string = false);
 
@@ -392,16 +391,116 @@ make_format (const Range& r, int& fw, do
 
 template <typename MT>
 float_display_format
 make_format (const MT&)
 {
   return float_display_format ();
 }
 
+template <>
+float_display_format
+make_format (const Range& r);
+
+template <>
+float_display_format
+make_format (const NDArray& nda);
+
+template <>
+float_display_format
+make_format (const FloatNDArray& nda);
+
+template <>
+float_display_format
+make_format (const ComplexNDArray& nda);
+
+template <>
+float_display_format
+make_format (const FloatComplexNDArray& nda);
+
+template <>
+float_display_format
+make_format (const intNDArray<octave_int8>& nda);
+
+template <>
+float_display_format
+make_format (const intNDArray<octave_int16>& nda);
+
+template <>
+float_display_format
+make_format (const intNDArray<octave_int32>& nda);
+
+template <>
+float_display_format
+make_format (const intNDArray<octave_int64>& nda);
+
+template <>
+float_display_format
+make_format (const intNDArray<octave_uint8>& nda);
+
+template <>
+float_display_format
+make_format (const intNDArray<octave_uint16>& nda);
+
+template <>
+float_display_format
+make_format (const intNDArray<octave_uint32>& nda);
+
+template <>
+float_display_format
+make_format (const intNDArray<octave_uint64>& nda);
+
+template <>
+float_display_format
+make_format (const double& d);
+
+template <>
+float_display_format
+make_format (const float& f);
+
+template <>
+float_display_format
+make_format (const Complex& c);
+
+template <>
+float_display_format
+make_format (const FloatComplex& c);
+
+template <>
+float_display_format
+make_format (const octave_int8& nda);
+
+template <>
+float_display_format
+make_format (const octave_int16& nda);
+
+template <>
+float_display_format
+make_format (const octave_int32& nda);
+
+template <>
+float_display_format
+make_format (const octave_int64& nda);
+
+template <>
+float_display_format
+make_format (const octave_uint8& nda);
+
+template <>
+float_display_format
+make_format (const octave_uint16& nda);
+
+template <>
+float_display_format
+make_format (const octave_uint32& nda);
+
+template <>
+float_display_format
+make_format (const octave_uint64& nda);
+
 class
 pr_engineering_float
 {
 public:
 
   const float_format m_ff;
 
   double m_val;
diff --git a/libinterp/octave-value/ov-base-diag.cc b/libinterp/octave-value/ov-base-diag.cc
--- a/libinterp/octave-value/ov-base-diag.cc
+++ b/libinterp/octave-value/ov-base-diag.cc
@@ -461,16 +461,35 @@ template <typename DMT, typename MT>
 octave_value
 octave_base_diag<DMT, MT>::convert_to_str_internal (bool pad, bool force,
                                                     char type) const
 {
   return to_dense ().convert_to_str_internal (pad, force, type);
 }
 
 template <typename DMT, typename MT>
+float_display_format
+octave_base_diag<DMT, MT>::get_edit_display_format (void) const
+{
+  // FIXME
+  return float_display_format ();
+}
+
+template <typename DMT, typename MT>
+std::string
+octave_base_diag<DMT, MT>::edit_display (const float_display_format& fmt,
+                                         octave_idx_type i,
+                                         octave_idx_type j) const
+{
+  std::ostringstream buf;
+  octave_print_internal (buf, fmt, matrix(i,j));
+  return buf.str ();
+}
+
+template <typename DMT, typename MT>
 bool
 octave_base_diag<DMT, MT>::save_ascii (std::ostream& os)
 {
   os << "# rows: " << matrix.rows () << "\n"
      << "# columns: " << matrix.columns () << "\n";
 
   os << matrix.extract_diag ();
 
@@ -609,27 +628,16 @@ octave_base_diag<DMT, MT>::short_disp (s
       if (nel <= max_elts)
         os << ']';
     }
   else
     os << "...";
 }
 
 template <typename DMT, typename MT>
-std::string
-octave_base_diag<DMT, MT>::edit_display (const float_display_format&,
-                                         octave_idx_type i,
-                                         octave_idx_type j) const
-{
-  std::ostringstream buf;
-  octave_print_internal (buf, matrix(i,j));
-  return buf.str ();
-}
-
-template <typename DMT, typename MT>
 octave_value
 octave_base_diag<DMT, MT>::fast_elem_extract (octave_idx_type n) const
 {
   if (n < matrix.numel ())
     {
       octave_idx_type nr = matrix.rows ();
 
       octave_idx_type r = n % nr;
diff --git a/libinterp/octave-value/ov-base-diag.h b/libinterp/octave-value/ov-base-diag.h
--- a/libinterp/octave-value/ov-base-diag.h
+++ b/libinterp/octave-value/ov-base-diag.h
@@ -193,16 +193,21 @@ public:
 
   uint64NDArray
   uint64_array_value (void) const { return to_dense ().uint64_array_value (); }
 
   octave_value convert_to_str_internal (bool pad, bool force, char type) const;
 
   void print_raw (std::ostream& os, bool pr_as_read_syntax = false) const;
 
+  float_display_format get_edit_display_format (void) const;
+
+  std::string edit_display (const float_display_format& fmt,
+                            octave_idx_type i, octave_idx_type j) const;
+
   bool save_ascii (std::ostream& os);
 
   bool load_ascii (std::istream& is);
 
   int write (octave::stream& os, int block_size,
              oct_data_conv::data_type output_type, int skip,
              octave::mach_info::float_format flt_fmt) const;
 
@@ -211,19 +216,16 @@ public:
   bool print_as_scalar (void) const;
 
   void print (std::ostream& os, bool pr_as_read_syntax = false);
 
   void print_info (std::ostream& os, const std::string& prefix) const;
 
   void short_disp (std::ostream& os) const;
 
-  std::string edit_display (const float_display_format& fmt,
-                            octave_idx_type i, octave_idx_type j) const;
-
   octave_value fast_elem_extract (octave_idx_type n) const;
 
 protected:
 
   DMT matrix;
 
   octave_value to_dense (void) const;
 
diff --git a/libinterp/octave-value/ov-base-int.cc b/libinterp/octave-value/ov-base-int.cc
--- a/libinterp/octave-value/ov-base-int.cc
+++ b/libinterp/octave-value/ov-base-int.cc
@@ -260,16 +260,27 @@ octave_base_int_matrix<MT>::as_uint32 (v
 template <typename MT>
 octave_value
 octave_base_int_matrix<MT>::as_uint64 (void) const
 {
   return uint64NDArray (this->matrix);
 }
 
 template <typename T>
+std::string
+octave_base_int_matrix<T>::edit_display (const float_display_format& fmt,
+                                         octave_idx_type i,
+                                         octave_idx_type j) const
+{
+  std::ostringstream buf;
+  octave_print_internal (buf, fmt, this->matrix(i,j));
+  return buf.str ();
+}
+
+template <typename T>
 bool
 octave_base_int_matrix<T>::save_ascii (std::ostream& os)
 {
   dim_vector dv = this->dims ();
 
   os << "# ndims: " << dv.ndims () << "\n";
 
   for (int i = 0; i < dv.ndims (); i++)
@@ -641,16 +652,27 @@ octave_base_int_scalar<T>::as_uint32 (vo
 
 template <typename T>
 octave_value
 octave_base_int_scalar<T>::as_uint64 (void) const
 {
   return octave_uint64 (this->scalar);
 }
 
+template <typename ST>
+std::string
+octave_base_int_scalar<ST>::edit_display (const float_display_format& fmt,
+                                          octave_idx_type,
+                                          octave_idx_type) const
+{
+  std::ostringstream buf;
+  octave_print_internal (buf, fmt, this->scalar);
+  return buf.str ();
+}
+
 template <typename T>
 bool
 octave_base_int_scalar<T>::save_ascii (std::ostream& os)
 {
   os << this->scalar << "\n";
   return true;
 }
 
diff --git a/libinterp/octave-value/ov-base-int.h b/libinterp/octave-value/ov-base-int.h
--- a/libinterp/octave-value/ov-base-int.h
+++ b/libinterp/octave-value/ov-base-int.h
@@ -79,16 +79,19 @@ public:
   octave_value as_int32 (void) const;
   octave_value as_int64 (void) const;
 
   octave_value as_uint8 (void) const;
   octave_value as_uint16 (void) const;
   octave_value as_uint32 (void) const;
   octave_value as_uint64 (void) const;
 
+  std::string edit_display (const float_display_format& fmt,
+                            octave_idx_type i, octave_idx_type j) const;
+
   bool save_ascii (std::ostream& os);
 
   bool load_ascii (std::istream& is);
 
   bool save_binary (std::ostream& os, bool&);
 
   bool load_binary (std::istream& is, bool swap,
                     octave::mach_info::float_format);
@@ -141,16 +144,19 @@ public:
   octave_value as_int32 (void) const;
   octave_value as_int64 (void) const;
 
   octave_value as_uint8 (void) const;
   octave_value as_uint16 (void) const;
   octave_value as_uint32 (void) const;
   octave_value as_uint64 (void) const;
 
+  std::string edit_display (const float_display_format& fmt,
+                            octave_idx_type i, octave_idx_type j) const;
+
   bool save_ascii (std::ostream& os);
 
   bool load_ascii (std::istream& is);
 
   bool save_binary (std::ostream& os, bool&);
 
   bool load_binary (std::istream& is, bool swap,
                     octave::mach_info::float_format);
diff --git a/libinterp/octave-value/ov-base-scalar.cc b/libinterp/octave-value/ov-base-scalar.cc
--- a/libinterp/octave-value/ov-base-scalar.cc
+++ b/libinterp/octave-value/ov-base-scalar.cc
@@ -184,22 +184,29 @@ octave_base_scalar<ST>::short_disp (std:
   size_t pos = tmp.find_first_not_of (' ');
   if (pos != std::string::npos)
     os << tmp.substr (pos);
   else if (! tmp.empty ())
     os << tmp[0];
 }
 
 template <typename ST>
+float_display_format
+octave_base_scalar<ST>::get_edit_display_format (void) const
+{
+  return make_format (scalar);
+}
+
+template <typename ST>
 std::string
-octave_base_scalar<ST>::edit_display (const float_display_format&,
+octave_base_scalar<ST>::edit_display (const float_display_format& fmt,
                                       octave_idx_type, octave_idx_type) const
 {
   std::ostringstream buf;
-  octave_print_internal (buf, scalar);
+  octave_print_internal (buf, fmt, scalar);
   return buf.str ();
 }
 
 template <typename ST>
 octave_value
 octave_base_scalar<ST>::fast_elem_extract (octave_idx_type n) const
 {
   return (n == 0) ? octave_value (scalar) : octave_value ();
diff --git a/libinterp/octave-value/ov-base-scalar.h b/libinterp/octave-value/ov-base-scalar.h
--- a/libinterp/octave-value/ov-base-scalar.h
+++ b/libinterp/octave-value/ov-base-scalar.h
@@ -133,16 +133,18 @@ public:
   void print (std::ostream& os, bool pr_as_read_syntax = false);
 
   void print_raw (std::ostream& os, bool pr_as_read_syntax = false) const;
 
   bool print_name_tag (std::ostream& os, const std::string& name) const;
 
   void short_disp (std::ostream& os) const;
 
+  float_display_format get_edit_display_format (void) const;
+
   std::string edit_display (const float_display_format& fmt,
                             octave_idx_type i, octave_idx_type j) const;
 
   // Unsafe.  This function exists to support the MEX interface.
   // You should not use it anywhere else.
   void * mex_get_data (void) const { return const_cast<ST *> (&scalar); }
 
   const ST& scalar_ref (void) const { return scalar; }
diff --git a/libinterp/octave-value/ov-base-sparse.cc b/libinterp/octave-value/ov-base-sparse.cc
--- a/libinterp/octave-value/ov-base-sparse.cc
+++ b/libinterp/octave-value/ov-base-sparse.cc
@@ -422,16 +422,35 @@ octave_base_sparse<T>::print_raw (std::o
               os << "  (" << matrix.ridx (i)+1 << ", "  << j+1 << ") -> ";
 
               octave_print_internal (os, matrix.data (i), pr_as_read_syntax);
             }
         }
     }
 }
 
+template <typename MT>
+float_display_format
+octave_base_sparse<MT>::get_edit_display_format (void) const
+{
+  return float_display_format ();
+  //  return make_format (this->matrix);
+}
+
+template <typename MT>
+std::string
+octave_base_sparse<MT>::edit_display (const float_display_format& fmt,
+                                      octave_idx_type i,
+                                      octave_idx_type j) const
+{
+  std::ostringstream buf;
+  octave_print_internal (buf, fmt, this->matrix(i,j));
+  return buf.str ();
+}
+
 template <typename T>
 bool
 octave_base_sparse<T>::save_ascii (std::ostream& os)
 {
   dim_vector dv = this->dims ();
 
   // Ensure that additional memory is deallocated
   matrix.maybe_compress ();
diff --git a/libinterp/octave-value/ov-base-sparse.h b/libinterp/octave-value/ov-base-sparse.h
--- a/libinterp/octave-value/ov-base-sparse.h
+++ b/libinterp/octave-value/ov-base-sparse.h
@@ -160,16 +160,21 @@ public:
   void print_info (std::ostream& os, const std::string& prefix) const;
 
   void print_raw (std::ostream& os, bool pr_as_read_syntax = false) const;
 
   bool save_ascii (std::ostream& os);
 
   bool load_ascii (std::istream& is);
 
+  float_display_format get_edit_display_format (void) const;
+
+  std::string edit_display (const float_display_format& fmt,
+                            octave_idx_type i, octave_idx_type j) const;
+
   // Unsafe.  These functions exists to support the MEX interface.
   // You should not use them anywhere else.
   void * mex_get_data (void) const { return matrix.mex_get_data (); }
 
   octave_idx_type * mex_get_ir (void) const { return matrix.mex_get_ir (); }
 
   octave_idx_type * mex_get_jc (void) const { return matrix.mex_get_jc (); }
 
diff --git a/libinterp/octave-value/ov-perm.cc b/libinterp/octave-value/ov-perm.cc
--- a/libinterp/octave-value/ov-perm.cc
+++ b/libinterp/octave-value/ov-perm.cc
@@ -305,16 +305,32 @@ octave_perm_matrix::as_uint32 (void) con
 }
 
 octave_value
 octave_perm_matrix::as_uint64 (void) const
 {
   return uint64_array_value ();
 }
 
+float_display_format
+octave_perm_matrix::get_edit_display_format (void) const
+{
+  return float_display_format (float_format (1, 0, 0));
+}
+
+std::string
+octave_perm_matrix::edit_display (const float_display_format& fmt,
+                                  octave_idx_type i,
+                                  octave_idx_type j) const
+{
+  std::ostringstream buf;
+  octave_print_internal (buf, fmt, octave_int<octave_idx_type> (matrix(i,j)));
+  return buf.str ();
+}
+
 bool
 octave_perm_matrix::save_ascii (std::ostream& os)
 {
   os << "# size: " << matrix.rows () << "\n";
   os << "# orient: c\n";
 
   Array<octave_idx_type> pvec = matrix.col_perm_vec ();
   octave_idx_type n = pvec.numel ();
@@ -538,28 +554,16 @@ octave_perm_matrix::try_narrowing_conver
   octave_base_value *retval = nullptr;
 
   if (matrix.numel () == 1)
     retval = new octave_scalar (matrix (0, 0));
 
   return retval;
 }
 
-std::string
-octave_perm_matrix::edit_display (const float_display_format&,
-                                  octave_idx_type i, octave_idx_type j) const
-{
-  // FIXME: maybe we should have octave_print_internal functions for
-  // standard int types, not just octave_int<T> types.
-
-  std::ostringstream buf;
-  octave_print_internal (buf, octave_int<octave_idx_type> (matrix(i,j)));
-  return buf.str ();
-}
-
 octave_value
 octave_perm_matrix::fast_elem_extract (octave_idx_type n) const
 {
   if (n < matrix.numel ())
     {
       octave_idx_type nr = matrix.rows ();
 
       octave_idx_type r = n % nr;
diff --git a/libinterp/octave-value/ov-perm.h b/libinterp/octave-value/ov-perm.h
--- a/libinterp/octave-value/ov-perm.h
+++ b/libinterp/octave-value/ov-perm.h
@@ -204,16 +204,21 @@ public:
 
   octave_value as_uint8 (void) const;
   octave_value as_uint16 (void) const;
   octave_value as_uint32 (void) const;
   octave_value as_uint64 (void) const;
 
   void print_raw (std::ostream& os, bool pr_as_read_syntax = false) const;
 
+  float_display_format get_edit_display_format (void) const;
+
+  std::string edit_display (const float_display_format& fmt,
+                            octave_idx_type i, octave_idx_type j) const;
+
   bool save_ascii (std::ostream& os);
 
   bool load_ascii (std::istream& is);
 
   bool save_binary (std::ostream& os, bool& save_as_floats);
 
   bool load_binary (std::istream& is, bool swap,
                     octave::mach_info::float_format fmt);
@@ -227,19 +232,16 @@ public:
   bool print_as_scalar (void) const;
 
   void print (std::ostream& os, bool pr_as_read_syntax = false);
 
   void print_info (std::ostream& os, const std::string& prefix) const;
 
   void short_disp (std::ostream& os) const;
 
-  std::string edit_display (const float_display_format& fmt,
-                            octave_idx_type i, octave_idx_type j) const;
-
   octave_value map (unary_mapper_t umap) const
   { return to_dense ().map (umap); }
 
   octave_value fast_elem_extract (octave_idx_type n) const;
 
 protected:
 
   PermMatrix matrix;
diff --git a/libinterp/octave-value/ov-range.cc b/libinterp/octave-value/ov-range.cc
--- a/libinterp/octave-value/ov-range.cc
+++ b/libinterp/octave-value/ov-range.cc
@@ -496,16 +496,31 @@ skip_comments (std::istream& is)
         ; // Skip whitespace on way to beginning of next line.
       else
         break;
     }
 
   skip_until_newline (is, false);
 }
 
+float_display_format
+octave_range::get_edit_display_format (void) const
+{
+  return make_format (range_value ());
+}
+
+std::string
+octave_range::edit_display (const float_display_format& fmt,
+                            octave_idx_type, octave_idx_type j) const
+{
+  std::ostringstream buf;
+  octave_print_internal (buf, fmt, range.elem (j));
+  return buf.str ();
+}
+
 bool
 octave_range::save_ascii (std::ostream& os)
 {
   Range r = range_value ();
   double base = r.base ();
   double limit = r.limit ();
   double inc = r.inc ();
   octave_idx_type len = r.numel ();
diff --git a/libinterp/octave-value/ov-range.h b/libinterp/octave-value/ov-range.h
--- a/libinterp/octave-value/ov-range.h
+++ b/libinterp/octave-value/ov-range.h
@@ -263,16 +263,21 @@ public:
   void print (std::ostream& os, bool pr_as_read_syntax = false);
 
   void print_raw (std::ostream& os, bool pr_as_read_syntax = false) const;
 
   bool print_name_tag (std::ostream& os, const std::string& name) const;
 
   void short_disp (std::ostream& os) const;
 
+  float_display_format get_edit_display_format (void) const;
+
+  std::string edit_display (const float_display_format& fmt,
+                            octave_idx_type i, octave_idx_type j) const;
+
   bool save_ascii (std::ostream& os);
 
   bool load_ascii (std::istream& is);
 
   bool save_binary (std::ostream& os, bool& save_as_floats);
 
   bool load_binary (std::istream& is, bool swap,
                     octave::mach_info::float_format fmt);
