# HG changeset patch
# User ttl <ttl@justmail.de>
# Date 1311364897 -7200
#      Fri Jul 22 22:01:37 2011 +0200
# Node ID 8c7390b78911770465e0a535e8b5a52d58ac19cc
# Parent  8e87f3ba3bebd4cdea33a9aa315a5490b2380fa9
gui-editor: open new editor window via interface menu

diff --git a/gui/src/FileEditorMdiSubWindow.cpp b/gui/src/FileEditorMdiSubWindow.cpp
--- a/gui/src/FileEditorMdiSubWindow.cpp
+++ b/gui/src/FileEditorMdiSubWindow.cpp
@@ -47,16 +47,35 @@ FileEditorMdiSubWindow::closeEvent(QClos
     }
   else
     {
       event->accept();
     }
 }
 
 void
+FileEditorMdiSubWindow::openFile ()
+{
+    if (checkFileModified ("Open File")==QMessageBox::Cancel)
+      {
+        return; // existing file not saved and opening another file canceled by user
+      }
+    QString openFileName =
+        QFileDialog::getOpenFileName (this, "Open File", QDir::homePath(), SAVE_FILE_FILTER);
+    if (openFileName.isEmpty ())
+      {
+        return;
+      }
+    else
+      {
+        loadFile(openFileName);
+      }
+}
+
+void
 FileEditorMdiSubWindow::loadFile (QString fileName)
 {
   QFile file (fileName);
   if (!file.open (QFile::ReadOnly))
     {
       QMessageBox::warning (this, tr ("File Editor"),
 			    tr ("Cannot read file %1:\n%2.").arg (fileName).
 			    arg (file.errorString ()));
@@ -132,17 +151,17 @@ FileEditorMdiSubWindow::saveFile (QStrin
       saveFileAs();
       return;
     }
 
   // check for a valid file name to save the contents
   QString saveFileName;
   if (fileName.isEmpty ())
     {
-      saveFileName = QFileDialog::getSaveFileName (this, "Save File", fileName);
+      saveFileName = QFileDialog::getSaveFileName (this, "Save File", fileName,SAVE_FILE_FILTER);
       if (saveFileName.isEmpty ())
         return;
     }
   else
     {
     saveFileName = fileName;
     }
 
@@ -173,66 +192,52 @@ FileEditorMdiSubWindow::saveFileAs ()
   QString saveDir(m_fileName);
   if (saveDir==UNNAMED_FILE)
     saveDir = QDir::homePath();
   QString saveFileName = QFileDialog::getSaveFileName(
         this, "Save File", saveDir,SAVE_FILE_FILTER);
   if(saveFileName.isEmpty())
     return;
   saveFile(saveFileName);
-/*	QFile file(saveFileName);
-  if (!file.open (QFile::WriteOnly))
-    {
-      QMessageBox::warning (this, tr ("File Editor"),
-          tr ("Cannot write file %1:\n%2.").
-          arg (m_fileName).arg (file.errorString ()));
-      return;
-    }
-
-				   if(file.write(m_simpleEditor->toPlainText().toLocal8Bit()) == -1) {
-				   QMessageBox::warning(this,
-				   "Error Saving File",
-				   QString("The file could not be saved: %1.").arg(file.errorString()));
-				   } else {
-				   m_simpleEditor->document()->setModified(false);
-				   m_fileName = saveFileName;
-				   setWindowTitle(m_fileName);
-				   }
-
-				   file.close(); */
 }
 
 void
 FileEditorMdiSubWindow::showToolTipNew ()
 {
-  m_statusBar->showMessage ("Create a new file.", 2000);
+  m_statusBar->showMessage ("Create a new file", 2000);
+}
+
+void
+FileEditorMdiSubWindow::showToolTipOpen ()
+{
+  m_statusBar->showMessage ("Open a file", 2000);
 }
 
 void
 FileEditorMdiSubWindow::showToolTipSave ()
 {
-  m_statusBar->showMessage ("Save the file.", 2000);
+  m_statusBar->showMessage ("Save the file", 2000);
 }
 
 void
 FileEditorMdiSubWindow::showToolTipSaveAs ()
 {
-  m_statusBar->showMessage ("Save the file as.", 2000);
+  m_statusBar->showMessage ("Save the file as", 2000);
 }
 
 void
 FileEditorMdiSubWindow::showToolTipUndo ()
 {
-  m_statusBar->showMessage ("Revert previous changes.", 2000);
+  m_statusBar->showMessage ("Revert previous changes", 2000);
 }
 
 void
 FileEditorMdiSubWindow::showToolTipRedo ()
 {
-  m_statusBar->showMessage ("Append previous changes.", 2000);
+  m_statusBar->showMessage ("Append previous changes", 2000);
 }
 
 void
 FileEditorMdiSubWindow::registerModified (bool modified)
 {
   m_modified = modified;
 }
 
@@ -264,49 +269,54 @@ FileEditorMdiSubWindow::construct ()
   m_editor->setBraceMatching (QsciScintilla::SloppyBraceMatch);
   m_editor->setAutoIndent (true);
   m_editor->setIndentationWidth (2);
   m_editor->setIndentationsUseTabs (false);
   m_editor->setAutoCompletionThreshold (2);
 
   QAction *newAction = new QAction (style->standardIcon (QStyle::SP_FileIcon),
 				    "", m_toolBar);
+  QAction *openAction = new QAction (style->standardIcon (QStyle::SP_DirOpenIcon),
+            "", m_toolBar);
   QAction *saveAction =
     new QAction (style->standardIcon (QStyle::SP_DriveHDIcon),
 		 "", m_toolBar);
   QAction *saveActionAs =
     new QAction (style->standardIcon (QStyle::SP_DriveFDIcon),
 		 "", m_toolBar);
   QAction *undoAction =
     new QAction (style->standardIcon (QStyle::SP_ArrowLeft),
 		 "", m_toolBar);
   QAction *redoAction =
     new QAction (style->standardIcon (QStyle::SP_ArrowRight),
 		 "", m_toolBar);
 
   m_toolBar->addAction (newAction);
+  m_toolBar->addAction (openAction);
   m_toolBar->addAction (saveAction);
   m_toolBar->addAction (saveActionAs);
   m_toolBar->addAction (undoAction);
   m_toolBar->addAction (redoAction);
 
   QVBoxLayout *layout = new QVBoxLayout ();
   layout->addWidget (m_toolBar);
   layout->addWidget (m_editor);
   layout->addWidget (m_statusBar);
   layout->setMargin (2);
   widget ()->setLayout (layout);
 
   connect (newAction, SIGNAL (triggered ()), this, SLOT (newFile ()));
+  connect (openAction, SIGNAL (triggered ()), this, SLOT (openFile ()));
   connect (undoAction, SIGNAL (triggered ()), m_editor, SLOT (undo ()));
   connect (redoAction, SIGNAL (triggered ()), m_editor, SLOT (redo ()));
   connect (saveAction, SIGNAL (triggered ()), this, SLOT (saveFile ()));
   connect (saveActionAs, SIGNAL (triggered ()), this, SLOT (saveFileAs ()));
 
   connect (newAction, SIGNAL (hovered ()), this, SLOT (showToolTipNew ()));
+  connect (openAction, SIGNAL (hovered ()), this, SLOT (showToolTipOpen ()));
   connect (undoAction, SIGNAL (hovered ()), this, SLOT (showToolTipUndo ()));
   connect (redoAction, SIGNAL (hovered ()), this, SLOT (showToolTipRedo ()));
   connect (saveAction, SIGNAL (hovered ()), this, SLOT (showToolTipSave ()));
   connect (saveActionAs, SIGNAL (hovered ()), this,
 	   SLOT (showToolTipSaveAs ()));
 
   m_fileName = "";
   setWindowTitle (m_fileName);
diff --git a/gui/src/FileEditorMdiSubWindow.h b/gui/src/FileEditorMdiSubWindow.h
--- a/gui/src/FileEditorMdiSubWindow.h
+++ b/gui/src/FileEditorMdiSubWindow.h
@@ -36,21 +36,23 @@ class FileEditorMdiSubWindow:public QMdi
 Q_OBJECT public:
   FileEditorMdiSubWindow (QWidget * parent = 0);
   ~FileEditorMdiSubWindow ();
   void loadFile (QString fileName);
 
   public slots:
 
   void newFile ();
+  void openFile ();
   void saveFile ();
   void saveFile (QString fileName);
   void saveFileAs ();
 
   void showToolTipNew ();
+  void showToolTipOpen ();
   void showToolTipSave ();
   void showToolTipSaveAs ();
   void showToolTipUndo ();
   void showToolTipRedo ();
 
   void registerModified (bool modified);
 
 protected:
diff --git a/gui/src/MainWindow.cpp b/gui/src/MainWindow.cpp
--- a/gui/src/MainWindow.cpp
+++ b/gui/src/MainWindow.cpp
@@ -53,18 +53,17 @@ MainWindow::handleOpenFileRequest (QStri
     {
 //        ImageViewerMdiSubWindow *subWindow = new ImageViewerMdiSubWindow(pixmap, this);
 //        subWindow->setAttribute(Qt::WA_DeleteOnClose);
 //        m_centralMdiArea->addSubWindow(subWindow);
 //        subWindow->setWindowTitle(fileName);
     }
   else
     {
-      FileEditorMdiSubWindow *subWindow =
-	new FileEditorMdiSubWindow (m_centralMdiArea);
+      FileEditorMdiSubWindow *subWindow = new FileEditorMdiSubWindow (m_centralMdiArea);
       subWindow->setAttribute (Qt::WA_DeleteOnClose);
       subWindow->loadFile (fileName);
     }
 }
 
 void
 MainWindow::reportStatusMessage (QString statusMessage)
 {
@@ -121,16 +120,24 @@ MainWindow::handleCommandDoubleClicked (
 
 void
 MainWindow::alignMdiWindows ()
 {
   m_centralMdiArea->tileSubWindows ();
 }
 
 void
+MainWindow::openEditor ()
+{
+  FileEditorMdiSubWindow *subWindow = new FileEditorMdiSubWindow (m_centralMdiArea);
+  subWindow->setAttribute (Qt::WA_DeleteOnClose);
+  subWindow->newFile ();
+}
+
+void
 MainWindow::openBugTrackerPage ()
 {
   QDesktopServices::
     openUrl (QUrl ("http://savannah.gnu.org/bugs/?group=octave"));
 }
 
 void
 MainWindow::processSettingsDialogRequest ()
@@ -224,31 +231,35 @@ MainWindow::construct ()
   QMenu *controlMenu = menuBar ()->addMenu (tr ("Octave"));
   QAction *settingsAction = controlMenu->addAction (tr ("Settings"));
   controlMenu->addSeparator ();
   QAction *exitAction = controlMenu->addAction (tr ("Exit"));
 
   QMenu *interfaceMenu = menuBar ()->addMenu (tr ("Interface"));
   QAction *alignWindowsAction =
     interfaceMenu->addAction (tr ("Align Windows"));
+  QAction *openEditorAction =
+    interfaceMenu->addAction (tr ("Open New Editor Window"));
 
   QMenu *workspaceMenu = menuBar ()->addMenu (tr ("Workspace"));
   QAction *loadWorkspaceAction = workspaceMenu->addAction (tr ("Load"));
   QAction *saveWorkspaceAction = workspaceMenu->addAction (tr ("Save"));
   workspaceMenu->addSeparator ();
   QAction *clearWorkspaceAction = workspaceMenu->addAction (tr ("Clear"));
 
   QMenu *communityMenu = menuBar ()->addMenu (tr ("Community"));
   QAction *reportBugAction = communityMenu->addAction (tr ("Report Bug"));
 
   connect (settingsAction, SIGNAL (triggered ()), this,
 	   SLOT (processSettingsDialogRequest ()));
   connect (exitAction, SIGNAL (triggered ()), this, SLOT (close ()));
   connect (alignWindowsAction, SIGNAL (triggered ()), this,
 	   SLOT (alignMdiWindows ()));
+  connect (openEditorAction, SIGNAL (triggered ()), this,
+     SLOT (openEditor ()));
   connect (reportBugAction, SIGNAL (triggered ()), this,
 	   SLOT (openBugTrackerPage ()));
 
   setWindowTitle (QString ("Octave GUI (0.1.1)"));
 
   setCentralWidget (m_centralMdiArea);
   addDockWidget (Qt::LeftDockWidgetArea, m_variablesDockWidget);
   addDockWidget (Qt::LeftDockWidgetArea, m_historyDockWidget);
diff --git a/gui/src/MainWindow.h b/gui/src/MainWindow.h
--- a/gui/src/MainWindow.h
+++ b/gui/src/MainWindow.h
@@ -72,16 +72,17 @@ Q_OBJECT public:
   public slots:void handleOpenFileRequest (QString fileName);
   void reportStatusMessage (QString statusMessage);
   void openWebPage (QString url);
   void handleSaveWorkspaceRequest ();
   void handleLoadWorkspaceRequest ();
   void handleClearWorkspaceRequest ();
   void handleCommandDoubleClicked (QString command);
   void alignMdiWindows ();
+  void openEditor ();
   void openBugTrackerPage ();
   void processSettingsDialogRequest ();
 
 protected:
   void closeEvent (QCloseEvent * closeEvent);
   void readSettings ();
   void writeSettings ();
 
