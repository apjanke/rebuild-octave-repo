# HG changeset patch
# User Hartmut Gimpel <hg_code@gmx.de>
# Date 1445800681 0
#      Sun Oct 25 19:18:01 2015 +0000
# Node ID 175aed5acb852ada8a53784b560ff06a1fa8ae6a
# Parent  96653365eb66a41cdf598eabae9b1a435fbf6e40
ntsc2rgb.m: scale output values to the [0 1] range (patch #8709)

diff --git a/scripts/image/ntsc2rgb.m b/scripts/image/ntsc2rgb.m
--- a/scripts/image/ntsc2rgb.m
+++ b/scripts/image/ntsc2rgb.m
@@ -53,32 +53,44 @@ function rgb = ntsc2rgb (yiq)
   ## is slightly different.  We prefer this matrix so that
   ## x == ntsc2rgb (rgb2ntsc (x)) rather than maintaining strict compatibility
   ## with Matlab.
   trans = [ 1.0,      1.0,      1.0;
             0.95617, -0.27269, -1.10374;
             0.62143, -0.64681,  1.70062 ];
   rgb = yiq * trans;
 
+  ## truncating / scaling of double rgb values for Matlab compatibility
+  ## (Other input types are not supported by Matlab. We deal with
+  ## them anyways, but do not truncate or scale those.)
+  if (cls == "double")
+    rgb = max (0,rgb);
+    idx = find (any (rgb'>1));
+    rgb(idx,:) = rgb(idx,:) ./ (max (rgb(idx,:), [], 2) * ones (1,3));
+  endif
+
   rgb = colorspace_conversion_revert (rgb, cls, sz, is_im, is_nd, is_int);
 endfunction
 
 ## Test pure R, G, B colors
 %!assert (ntsc2rgb ([.299  .596  .211]), [1 0 0], 1e-5)
 %!assert (ntsc2rgb ([.587 -.274 -.523]), [0 1 0], 1e-5)
 %!assert (ntsc2rgb ([.114 -.322  .312]), [0 0 1], 1e-5)
 
 %!test
 %! rgb_map = rand (64, 3);
 %! assert (ntsc2rgb (rgb2ntsc (rgb_map)), rgb_map, 1e-3);
 
 %!test
 %! rgb_img = rand (64, 64, 3);
 %! assert (ntsc2rgb (rgb2ntsc (rgb_img)), rgb_img, 1e-3);
 
+## test cropping of rgb output
+%!assert (ntsc2rgb ([1.5 0 0]), [1   1   1]);
+
 ## Test input validation
 %!error ntsc2rgb ()
 %!error ntsc2rgb (1,2)
 %!error <YIQ must be a colormap or YIQ image> ntsc2rgb (uint8 (1))
 %!error <YIQ must be a colormap or YIQ image> ntsc2rgb (ones (2,2))
 
 ## Test ND input
 %!test
