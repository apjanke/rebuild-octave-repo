# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1455831762 18000
#      Thu Feb 18 16:42:42 2016 -0500
# Node ID 8376de2eaf003d7fc5c914a1d9631581885523d6
# Parent  40de9f8f23a686774d8509e64d8caf1b07b01ca7
define OCTAVE_HAVE_FAST_INT_OPS in octave-config.h

* acinclude.m4 (OCTAVE_FAST_INT_OPS): Define OCTAVE_HAVE_FAST_INT_OPS
instead of HAVE_FAST_INT_OPS.
* oct-inttypes.cc, oct-inttypes.h: Use new macro name.
* mk-octave-config-h.sh: Emit definition of OCTAVE_HAVE_FAST_INT_OPS.
* build-env-features.sh: Also include symbols beginning with
"OCTAVE_HAVE_".

diff --git a/build-aux/mk-octave-config-h.sh b/build-aux/mk-octave-config-h.sh
--- a/build-aux/mk-octave-config-h.sh
+++ b/build-aux/mk-octave-config-h.sh
@@ -116,17 +116,17 @@ since all of Octave's header files alrea
 #  define OCTAVE_EXPORT __declspec(dllexport)
 #  define OCTAVE_IMPORT __declspec(dllimport)
 #else
    /* All other compilers, at least for now. */
 #  define OCTAVE_EXPORT
 #  define OCTAVE_IMPORT
 #endif
 
-#define OCTAVE_API OCTAVE_IMPORT
+n#define OCTAVE_API OCTAVE_IMPORT
 #define OCTINTERP_API OCTAVE_IMPORT
 
 #include <stdint.h>
 EOF
 
 octave_idx_type="`sed -n 's/#define OCTAVE_IDX_TYPE \([_a-zA-Z][_a-zA-Z0-9]*\)/\1/p' $config_h_file`"
 
 if test -z "$octave_idx_type"; then
@@ -146,16 +146,18 @@ else
   echo "#define OCTAVE_FLOAT_TRUNCATE"
 fi
 
 grep "#\(undef\|define\) OCTAVE_ENABLE_64" $config_h_file
 grep "#\(undef\|define\) OCTAVE_ENABLE_ATOMIC_REFCOUNT" $config_h_file
 grep "#\(undef\|define\) OCTAVE_ENABLE_BOUNDS_CHECK" $config_h_file
 grep "#\(undef\|define\) OCTAVE_ENABLE_OPENMP" $config_h_file
 
+grep "#\(undef\|define\) OCTAVE_HAVE_FAST_INT_OPS" $config_h_file
+
 if grep "#undef HAVE_DEV_T" $config_h_file > /dev/null; then
   cat << EOF
 
 typedef short dev_t;
 
 EOF
 else
   cat << EOF
diff --git a/libinterp/build-env-features.sh b/libinterp/build-env-features.sh
--- a/libinterp/build-env-features.sh
+++ b/libinterp/build-env-features.sh
@@ -8,18 +8,18 @@ set -e
 
 AWK=${AWK:-awk}
 
 conffile=$1
 
 cat << EOF
 // DO NOT EDIT!  Generated automatically from $conffile by Make."
 
-#ifdef HAVE_CONFIG_H
-#include "config.h"
+#if defined (HAVE_CONFIG_H)
+#  include "config.h"
 #endif
 
 #include "build-env.h"
 #include "ov.h"
 
 namespace octave
 {
   namespace build_env
@@ -31,22 +31,22 @@ namespace octave
 
       static octave_scalar_map m;
 
       if (! initialized)
         {
 EOF
 
 $AWK \
-  '/#define HAVE_/ {
-     sub (/HAVE_/, "", $2);
+  '/#define \(OCTAVE_\|\)HAVE_/ {
+     sub (/\(OCTAVE_\|\)HAVE_/, "", $2);
      printf ("          m.assign (\"%s\", octave_value (true));\n", $2);
    }
-   /\/\* #undef HAVE_/ {
-     sub (/HAVE_/, "", $3);
+   /\/\* #undef \(OCTAVE_\|\)HAVE_/ {
+     sub (/\(OCTAVE_\|\)HAVE_/, "", $3);
      printf ("          m.assign (\"%s\", octave_value (false));\n", $3);
    } {
    }' $conffile | sort
 
 cat << EOF
 
           initialized = true;
         }
diff --git a/liboctave/util/oct-inttypes.cc b/liboctave/util/oct-inttypes.cc
--- a/liboctave/util/oct-inttypes.cc
+++ b/liboctave/util/oct-inttypes.cc
@@ -328,17 +328,17 @@ int64_t
 octave_int_arith_base<int64_t, true>::mul_internal (int64_t x, int64_t y)
 {
   // The signed case is far worse. The problem is that
   // even if neither integer fits into signed 32-bit range, the result may
   // still be OK. Uh oh.
 
   // Essentially, what we do is compute sign, multiply absolute values
   // (as above) and impose the sign.
-  // FIXME: can we do something faster if we HAVE_FAST_INT_OPS?
+  // FIXME: can we do something faster if we OCTAVE_HAVE_FAST_INT_OPS?
 
   uint64_t usx = octave_int_abs (x);
   uint64_t usy = octave_int_abs (y);
   bool positive = (x < 0) == (y < 0);
 
   // Get upper words
   uint64_t ux = usx >> 32;
   uint64_t uy = usy >> 32;
diff --git a/liboctave/util/oct-inttypes.h b/liboctave/util/oct-inttypes.h
--- a/liboctave/util/oct-inttypes.h
+++ b/liboctave/util/oct-inttypes.h
@@ -494,58 +494,64 @@ octave_int_arith_base<uint64_t, false>::
 
 // Special handler for 64-bit integer multiply.
 template <>
 OCTAVE_API uint64_t
 octave_int_arith_base<uint64_t, false>::mul_internal (uint64_t, uint64_t);
 
 #endif
 
-// Signed integer arithmetics.
-// Rationale: If HAVE_FAST_INT_OPS is defined, the following conditions
-// should hold:
-// 1. Signed numbers are represented by twos complement
-//    (see <http://en.wikipedia.org/wiki/Two%27s_complement>)
-// 2. static_cast to unsigned int counterpart works like interpreting
-//    the signed bit pattern as unsigned (and is thus zero-cost).
-// 3. Signed addition and subtraction yield the same bit results as unsigned.
-//    (We use casts to prevent optimization interference, so there is no
-//     need for things like -ftrapv).
-// 4. Bit operations on signed integers work like on unsigned integers,
-//    except for the shifts. Shifts are arithmetic.
+// Signed integer arithmetic.
+//
+// Rationale: If OCTAVE_HAVE_FAST_INT_OPS is defined, the following
+// conditions should hold:
+//
+//   1. Signed numbers are represented by twos complement (see
+//      <http://en.wikipedia.org/wiki/Two%27s_complement>)
+//
+//   2. static_cast to unsigned int counterpart works like
+//      interpreting the signed bit pattern as unsigned (and is thus
+//      zero-cost).
+//
+//   3. Signed addition and subtraction yield the same bit results as
+//      unsigned.  (We use casts to prevent optimization interference,
+//      so there is no need for things like -ftrapv).
+//
+//   4. Bit operations on signed integers work like on unsigned
+//      integers, except for the shifts. Shifts are arithmetic.
 //
 // The above conditions are satisfied by most modern platforms. If
-// HAVE_FAST_INT_OPS is defined, bit tricks and wraparound arithmetics are used
-// to avoid conditional jumps as much as possible, thus being friendly to
-// modern pipeline processor architectures.
-// Otherwise, we fall back to a bullet-proof code that only uses assumptions
-// guaranteed by the standard.
+// OCTAVE_HAVE_FAST_INT_OPS is defined, bit tricks and wraparound
+// arithmetics are used to avoid conditional jumps as much as
+// possible, thus being friendly to modern pipeline processor
+// architectures.  Otherwise, we fall back to a bullet-proof code that
+// only uses assumptions guaranteed by the standard.
 
 template <typename T>
 class octave_int_arith_base<T, true> : octave_int_base<T>
 {
   // The corresponding unsigned type.
   typedef typename query_integer_type<sizeof (T), false>::type UT;
 public:
 
   // Returns 1 for negative number, 0 otherwise.
   static T
   __signbit (T x)
   {
-#ifdef HAVE_FAST_INT_OPS
+#if defined (OCTAVE_HAVE_FAST_INT_OPS)
     return static_cast<UT> (x) >> std::numeric_limits<T>::digits;
 #else
     return (x < 0) ? 1 : 0;
 #endif
   }
 
   static T
   abs (T x)
   {
-#ifdef HAVE_FAST_INT_OPS
+#if defined (OCTAVE_HAVE_FAST_INT_OPS)
     // This is close to how GCC does std::abs, but we can't just use std::abs,
     // because its behaviour for INT_MIN is undefined and the compiler could
     // discard the following test.
     T m = x >> std::numeric_limits<T>::digits;
     T y = (x ^ m) - m;
     if (y < 0)
       {
         y = octave_int_base<T>::max_val ();
@@ -584,17 +590,17 @@ public:
 
   static T
   lshift (T x, int n) { return x << n; }
 
   // Minus has problems similar to abs.
   static T
   minus (T x)
   {
-#ifdef HAVE_FAST_INT_OPS
+#if defined (OCTAVE_HAVE_FAST_INT_OPS)
     T y = -x;
     if (y == octave_int_base<T>::min_val ())
       {
         --y;
       }
     return y;
 #else
     T y;
@@ -607,17 +613,17 @@ public:
       y = -x;
     return y;
 #endif
   }
 
   static T
   add (T x, T y)
   {
-#ifdef HAVE_FAST_INT_OPS
+#if defined (OCTAVE_HAVE_FAST_INT_OPS)
     // The typecasts do nothing, but they are here to prevent an optimizing
     // compiler from interfering. Also, the signed operations on small types
     // actually return int.
     T u = static_cast<UT> (x) + static_cast<UT> (y);
     T ux = u ^ x;
     T uy = u ^ y;
     if ((ux & uy) < 0)
       {
@@ -649,17 +655,17 @@ public:
     return u;
 #endif
   }
 
   // This is very similar to addition.
   static T
   sub (T x, T y)
   {
-#ifdef HAVE_FAST_INT_OPS
+#if defined (OCTAVE_HAVE_FAST_INT_OPS)
     // The typecasts do nothing, but they are here to prevent an optimizing
     // compiler from interfering. Also, the signed operations on small types
     // actually return int.
     T u = static_cast<UT> (x) - static_cast<UT> (y);
     T ux = u ^ x;
     T uy = u ^ ~y;
     if ((ux & uy) < 0)
       {
@@ -784,19 +790,19 @@ octave_external_int64_int64_mul (int64_t
 template <>
 inline int64_t
 octave_int_arith_base<int64_t, true>::mul_internal (int64_t x, int64_t y)
 {
   int64_t retval;
 
   long double p = static_cast<long double> (x) * static_cast<long double> (y);
 
-  // NOTE: We could maybe do it with a single branch if HAVE_FAST_INT_OPS,
-  // but it would require one more runtime conversion, so the question is
-  // whether it would really be faster.
+  // NOTE: We could maybe do it with a single branch if
+  // OCTAVE_HAVE_FAST_INT_OPS, but it would require one more runtime
+  // conversion, so the question is whether it would really be faster.
   if (p > static_cast<long double> (octave_int_base<int64_t>::max_val ()))
     retval = octave_int_base<int64_t>::max_val ();
   else if (p < static_cast<long double> (octave_int_base<int64_t>::min_val ()))
     retval = octave_int_base<int64_t>::min_val ();
   else
     retval = static_cast<int64_t> (p);
 
   return retval;
diff --git a/m4/acinclude.m4 b/m4/acinclude.m4
--- a/m4/acinclude.m4
+++ b/m4/acinclude.m4
@@ -1490,28 +1490,34 @@ AC_DEFUN([OCTAVE_F77_FLAG], [
       [FFLAGS="$FFLAGS $1"
       AC_MSG_RESULT([adding $1 to FFLAGS])], [$2])
   else
     AC_MSG_RESULT([no])
     ifelse([$3], , , [$3])
   fi
 ])
 dnl
-dnl Check whether fast signed integer arithmetics using bit tricks
-dnl can be used in oct-inttypes.h.  Defines HAVE_FAST_INT_OPS if
-dnl the following conditions hold:
-dnl 1. Signed numbers are represented by twos complement
-dnl    (see <http://en.wikipedia.org/wiki/Two%27s_complement>)
-dnl 2. static_cast to unsigned int counterpart works like interpreting
-dnl    the signed bit pattern as unsigned (and is thus zero-cost).
-dnl 3. Signed addition and subtraction yield the same bit results as unsigned.
-dnl    (We use casts to prevent optimization interference, so there is no
-dnl     need for things like -ftrapv).
-dnl 4. Bit operations on signed integers work like on unsigned integers,
-dnl    except for the shifts.  Shifts are arithmetic.
+dnl Check whether fast signed integer arithmetic using bit tricks
+dnl can be used in oct-inttypes.h.
+dnl
+dnl Defines OCTAVE_HAVE_FAST_INT_OPS if the following conditions hold:
+dnl
+dnl   1. Signed numbers are represented by twos complement (see
+dnl      <http://en.wikipedia.org/wiki/Two%27s_complement>)
+dnl
+dnl   2. static_cast to unsigned int counterpart works like
+dnl      interpreting the signed bit pattern as unsigned (and is thus
+dnl      zero-cost). 
+dnl
+dnl   3. Signed addition and subtraction yield the same bit results
+dnl      as unsigned.  (We use casts to prevent optimization
+dnl      interference, so there is no need for things like -ftrapv).
+dnl
+dnl   4. Bit operations on signed integers work like on unsigned
+dnl      integers, except for the shifts.  Shifts are arithmetic.
 dnl
 AC_DEFUN([OCTAVE_FAST_INT_OPS], [
   AC_CACHE_CHECK([whether fast integer arithmetics is usable],
     [octave_cv_fast_int_ops],
     [AC_LANG_PUSH(C++)
     AC_RUN_IFELSE([AC_LANG_PROGRAM([[
         #include <limits>
         template<class UT, class ST>
@@ -1558,17 +1564,17 @@ AC_DEFUN([OCTAVE_FAST_INT_OPS], [
         #endif
       ]])],
       octave_cv_fast_int_ops=yes,
       octave_cv_fast_int_ops=no,
       octave_cv_fast_int_ops=yes)
     AC_LANG_POP(C++)
   ])
   if test $octave_cv_fast_int_ops = yes; then
-    AC_DEFINE(HAVE_FAST_INT_OPS, 1,
+    AC_DEFINE(OCTAVE_HAVE_FAST_INT_OPS, 1,
       [Define to 1 if signed integers use two's complement.])
   fi
 ])
 dnl
 dnl Check to see if the compiler and the linker can handle the flags
 dnl "-framework $1" for the given prologue $2 and the given body $3 of
 dnl a source file.  Arguments 2 and 3 optionally can also be empty.
 dnl Add options (lower case letters $1) "--with-framework-$1" and
