# HG changeset patch
# User jwe
# Date 1090852625 0
#      Mon Jul 26 14:37:05 2004 +0000
# Node ID c45f14873b5e028234b896ad386c29866704a773
# Parent  c638c144d4da483d0c3e25fa41c0d4b78a61bb91
[project @ 2004-07-26 14:35:12 by jwe]

diff --git a/liboctave/Array.cc b/liboctave/Array.cc
--- a/liboctave/Array.cc
+++ b/liboctave/Array.cc
@@ -415,16 +415,18 @@ Array<T>::reshape (const dim_vector& new
 
   if (dimensions != new_dims)
     {
       if (dimensions.numel () == new_dims.numel ())
 	retval = Array<T> (*this, new_dims);
       else
 	(*current_liboctave_error_handler) ("reshape: size mismatch");
     }
+  else
+    retval = *this;
 
   return retval;
 }
 
 template <class T>
 Array<T>
 Array<T>::permute (const Array<int>& perm_vec, bool inv) const
 {
diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,12 @@
+2004-07-23  John W. Eaton  <jwe@octave.org>
+
+	* Array.cc (Array<T>::reshape): Return *this if no change in size.
+
 2004-07-23  David Bateman  <dbateman@free.fr>
 
 	* Array.cc, Array.h (cat_ra): Delete.
 	* Array.h, Array-C.cc, Array-d.cc, Array-ch.cc, Array-i.cc 
 	(INSTANTIATE_ARRAY_CAT): Delete.
 
 	* dNDArray.cc, dNDArray.h, CNDArray.cc, CNDArray.h, chNDArray.cc, 
 	chNDArray.h, intNDArray.cc, intNDArray.h (cat): Delete.
diff --git a/scripts/general/bitcmp.m b/scripts/general/bitcmp.m
new file mode 100644
--- /dev/null
+++ b/scripts/general/bitcmp.m
@@ -0,0 +1,65 @@
+## Copyright (C) 2004 David Bateman
+##
+## This program is free software; you can redistribute it and/or modify
+## it under the terms of the GNU General Public License as published by
+## the Free Software Foundation; either version 2 of the License, or
+## (at your option) any later version.
+##
+## This program is distributed in the hope that it will be useful,
+## but WITHOUT ANY WARRANTY; without even the implied warranty of
+## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+## GNU General Public License for more details.
+##
+## You should have received a copy of the GNU General Public License
+## along with this program; if not, write to the Free Software
+## Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+
+## -*- texinfo -*-
+## @deftypefn {Function File} {@var{X} =} bitcmp (@var{a},@var{k})
+## returns the @var{k}-bit complement of integers in @var{a}. If
+## @var{k} is omitted @code{k = log2(bitmax) + 1} is assumed.
+##
+## @example
+## bitcmp(7,4)
+## @result{} 8
+## dec2bin(11)
+## @result{} 1011
+## dec2bin(bitcmp(11))
+## @result{} 11111111111111111111111111110100
+## @end example
+##
+## @seealso{bitand,bitor,bitxor,bitset,bitget,bitcmp,bitshift,bitmax}
+## @end deftypefn
+
+## Liberally based of the version by Kai Habel from octave-forge
+
+function X = bitcmp (A, n)
+  
+  if (nargin < 1 || nargin > 2)
+    usage ("bitcmp(A,n)");
+  endif
+
+  cname = class(A);
+  if (strcmp (cname, "double"))
+    Bmax = bitmax;
+    Amax = log2 (Bmax) + 1;
+  elseif strcmp("uint",substr(cname,1,4))
+    Bmax = intmax(cname);
+    Amax = eval([cname, " (log2 (double (intmax (cname))) + 1);"]);
+  else
+    Bmax = eval([cname, " (-1);"]);
+    Amax = eval([cname, " (log2 (double (intmax (cname))) + 2);"]);
+  endif
+
+  Aone = eval([ cname, "(1);"]);
+  if (nargin == 2)
+    m = eval([cname, " (n(:));"]);
+    if (any(m < Aone) || any( m > Amax))
+      error ("n must be in the range [1,%d]", Amax);
+    endif
+    X = bitxor(A, bitshift(Bmax, -n));
+  else
+    X = bitxor(A, Bmax);
+  endif
+
+endfunction
diff --git a/scripts/general/bitget.m b/scripts/general/bitget.m
new file mode 100644
--- /dev/null
+++ b/scripts/general/bitget.m
@@ -0,0 +1,53 @@
+## Copyright (C) 2004 David BAteman
+##
+## This program is free software; you can redistribute it and/or modify
+## it under the terms of the GNU General Public License as published by
+## the Free Software Foundation; either version 2 of the License, or
+## (at your option) any later version.
+##
+## This program is distributed in the hope that it will be useful,
+## but WITHOUT ANY WARRANTY; without even the implied warranty of
+## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+## GNU General Public License for more details.
+##
+## You should have received a copy of the GNU General Public License
+## along with this program; if not, write to the Free Software
+## Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+
+## -*- texinfo -*-
+## @deftypefn {Function File} {@var{X} =} bitget (@var{a},@var{n})
+## returns the status of bit(s) @var{n} of unsigned integers in @var{a}
+## the lowest significant bit is @var{n} = 1.
+##
+## @example
+## bitget(100,8:-1:1)
+## @result{} 0  1  1  0  0  1  0  0 
+## @end example
+## @seealso{bitand,bitor,bitxor,bitset,bitcmp,bitshift,bitmax}
+## @end deftypefn
+
+## Liberally based of the version by Kai Habel from octave-forge
+
+function X = bitget (A, n)
+  if (nargin != 2)
+    usage ("bitget(A,n)");
+  endif
+
+  cname = class(A);
+  if (strcmp (cname, "double"))
+    Amax = log2 (bitmax) + 1;
+  elseif strcmp("uint",substr(cname,1,4))
+    Amax = eval([cname, " (log2 (double (intmax (cname))) + 1);"]);
+  else
+    Amax = eval([cname, " (log2 (double (intmax (cname))) + 2);"]);
+  endif
+
+  Aone = eval([ cname, "(1);"]);
+  m = eval([cname, " (n(:));"]);
+  if (any(m < Aone) || any( m > Amax))
+    error ("n must be in the range [1,%d]", Amax);
+  endif
+
+  X = eval (["bitand (A, ", cname, " (2) .^ (", cname, " (n) - Aone)) != ", cname, "(0);"]);
+
+endfunction
diff --git a/scripts/general/bitset.m b/scripts/general/bitset.m
new file mode 100644
--- /dev/null
+++ b/scripts/general/bitset.m
@@ -0,0 +1,68 @@
+## Copyright (C) 2004 David BAteman
+##
+## This program is free software; you can redistribute it and/or modify
+## it under the terms of the GNU General Public License as published by
+## the Free Software Foundation; either version 2 of the License, or
+## (at your option) any later version.
+##
+## This program is distributed in the hope that it will be useful,
+## but WITHOUT ANY WARRANTY; without even the implied warranty of
+## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+## GNU General Public License for more details.
+##
+## You should have received a copy of the GNU General Public License
+## along with this program; if not, write to the Free Software
+## Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+
+## -*- texinfo -*-
+## @deftypefn {Function File} {@var{X} =} bitset (@var{a},@var{n})
+## @deftypefnx {Function File} {@var{X} =} bitset (@var{a},@var{n},@var{v})
+## sets or resets bit(s) @var{N} of unsigned integers in @var{A}.
+## @var{v} = 0 resets and @var{v} = 1 sets the bits.
+## The lowest significant bit is: @var{n} = 1
+##
+## @example
+## dec2bin (bitset(10,1))
+## @result{} 1011
+## @end example
+##
+## @seealso{bitand,bitor,bitxor,bitget,bitcmp,bitshift,bitmax}
+## @end deftypefn
+
+## Liberally based of the version by Kai Habel from octave-forge
+
+function X = bitset (A, n, value)
+  if (nargin < 2 || nargin > 3)
+    usage ("bitset (A, n, v)");
+  endif
+
+  if (nargin == 2)
+    value = 1;
+  endif
+  
+  cname = class(A);
+  if (strcmp (cname, "double"))
+    Bmax = bitmax;
+    Amax = log2 (Bmax) + 1;
+  elseif strcmp("uint",substr(cname,1,4))
+    Bmax = intmax(cname);
+    Amax = eval([cname, " (log2 (double (intmax (cname))) + 1);"]);
+  else
+    Bmax = eval([cname, " (-1);"]);
+    Amax = eval([cname, " (log2 (double (intmax (cname))) + 2);"]);
+  endif
+
+  Aone = eval([ cname, "(1);"]);
+  m = eval([cname, " (n(:));"]);
+  if (any(m < Aone) || any( m > Amax))
+    error ("n must be in the range [1,%d]", Amax);
+  endif
+
+  ## XXX FIXME XXX Need extra cast to cname due to bad return value of .^
+  X = eval (["bitand (A, Bmax - ", cname, " (", cname, " (2) .^ (", cname, " (n) - Aone)));"]);
+
+  if (value)
+    X = eval (["bitor (A, ", cname, " (2) .^ (", cname, " (n) - Aone));"]);
+  endif
+
+endfunction
