# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1364611021 14400
#      Fri Mar 29 22:37:01 2013 -0400
# Node ID fc491da603f66e6da64ab8929f0a6e2e64d89973
# Parent  a53f56e1662713dc35f4ba4e2accf1d871042c6d
also provide a hook for exiting debugger

* file-editor-interface.h
(file_editor_interface::insert_debugger_pointer_request): Rename from
file_editor_interface::handle_update_debug_pointer_request
(file_editor_interface::delete_debugger_pointer_request): New function.

* file-editor-tab.h, file-editor-tab.cc
(file_editor_tab::insert_debugger_pointer): Rename from
file_editor_tab::set_debugger_position.  Change all uses.
(file_editor_tab::delete_debugger_pointer): New function.

* file-editor.h, file-editor.cc
(file_editor::handle_insert_debugger_pointer_request): Renamem from
file_editor::handle_update_debug_pointer_request.  Change all uses.
(file_editor::handle_delete_debugger_pointer_request): New function.
(file_editor::add_file_editor_tab): Connect
fetab_delete_debugger_pointer signal to delete_debugger_pointer.
(file_editor::fetab_insert_debugger_pointer): Rename from
file_editor::fetab_set_debugger_position.  Change all uses.
(file_editor::fetab_delete_debugger_pointer): New signal.

* main-window.h, main-window.cc
(main_window::handle_insert_debugger_pointer_request): Rename from
main_window::handle_update_debug_pointer_request.
(main_window::handle_delete_debugger_pointer_request): New function.
(main_window::construct): Connect delete_debugger_pointer_signal to
handle_delete_debugger_pointer_request.

* octave-event-listener.h (event_listener::insert_debugger_pointer):
Rename from event_listener::update_debug_pointer):
(event_listener::delete_debugger_pointer): New function

* octave-link.h, octave-link.cc
(octave_link::do_insert_debugger_pointer): Rename from
octave_link::do_update_debug_pointer.  Change all uses.
(octave_link::do_delete_debugger_pointer): New function.
(octave_link::do_enter_debugger_event_hook_fcn): Rename from
octave_link::do_debug_input_event_hook_fcn.
(octave_link::do_exit_debugger_event_hook_fcn): New function.
(enter_debugger_event_hook_fcn): Rename form
debug_input_event_hook_fcn.  Change all uses.
(octave_link::exit_debugger_event_hook_fcn): New function.

* octave-main-thread.h, octave-main-thread.cc
(enter_debugger_event_hook_fcn): Rename from
debug_input_event_hook_fcn.
(exit_debugger_event_hook_fcn): New function.
(octave_main_thread::run): Install exit_debugger_event_hook_fcn hook
function.

* octave-qt-event-listener.h, octave-qt-event-listener.cc
(octave_qt_event_listener::insert_debugger_pointer): Rename from
octave_qt_event_listener::update_debug_pointer.  Change all uses.
(octave_qt_event_listener::delete_debugger_pointer): New function.

* octave-qt-event-listener.h
(octave_qt_event_listener::update_debug_pointer_signal): Rename from
octave_qt_event_listener::insert_debugger_pointer_signal.  Change all
uses.
(octave_qt_event_listner::delete_debugger_pointer_signal): New signal.

* input.cc (enter_debugger_event_hook_functions): Rename from
debug_input_event_hook_functions.  Change all uses.
(exit_debugger_event_hook_functions): New static variable.
(exit_debugger_cleanup): new function.
(get_debug_input): Use unwind-protect to run
exit_debugger_event_hook_functions on return.
(Fadd_enter_debugger_event_hook): Rename from
Fadd_debug_input_event_hook.  Change all uses.
(Fremove_enter_debugger_event_hook): Rename from
Fremove_debug_input_event_hook.  Change all uses.
(Fadd_exit_debugger_event_hook, Fremove_exit_debugger_event_hook):
New functions.

diff --git a/libgui/src/m-editor/file-editor-interface.h b/libgui/src/m-editor/file-editor-interface.h
--- a/libgui/src/m-editor/file-editor-interface.h
+++ b/libgui/src/m-editor/file-editor-interface.h
@@ -41,18 +41,22 @@ class file_editor_interface : public oct
   virtual ~file_editor_interface () { }
 
   virtual QMenu *get_mru_menu ( ) = 0;
   virtual QMenu *debug_menu () = 0;
   virtual QToolBar *toolbar () = 0;
 
   virtual void handle_entered_debug_mode () = 0;
   virtual void handle_quit_debug_mode () = 0;
-  virtual void handle_update_debug_pointer_request (const QString& file,
-                                                    int line) = 0;
+
+  virtual void
+  handle_insert_debugger_pointer_request (const QString& file, int line) = 0;
+
+  virtual void
+  handle_delete_debugger_pointer_request (const QString& file, int line) = 0;
 
   virtual void handle_update_dbstop_marker_request (bool insert,
                                                     const QString& file,
                                                     int line) = 0;
   virtual void set_focus () = 0;
 
 public slots:
   virtual void request_new_file () = 0;
diff --git a/libgui/src/m-editor/file-editor-tab.cc b/libgui/src/m-editor/file-editor-tab.cc
--- a/libgui/src/m-editor/file-editor-tab.cc
+++ b/libgui/src/m-editor/file-editor-tab.cc
@@ -1128,30 +1128,39 @@ file_editor_tab::handle_file_resave_answ
       // is posted. If the user cancels the close in this dialog the tab is
       // left open with a non-existing file.
       _edit_area->setModified (false);
       close ();
     }
 }
 
 void
-file_editor_tab::set_debugger_position (const QWidget *ID, int line)
+file_editor_tab::insert_debugger_pointer (const QWidget *ID, int line)
 {
   if (ID != this || ID == 0)
     return;
 
-  _edit_area->markerDeleteAll (debugger_position);
   if (line > 0)
     {
       _edit_area->markerAdd (line, debugger_position);
       center_current_line ();
     }
 }
 
 void
+file_editor_tab::delete_debugger_pointer (const QWidget *ID, int line)
+{
+  if (ID != this || ID == 0)
+    return;
+
+  if (line > 0)
+    _edit_area->markerDelete (line, debugger_position);
+}
+
+void
 file_editor_tab::do_dbstop_marker (bool insert, const QWidget *ID, int line)
 {
   if (ID != this || ID == 0)
     return;
 
   if (line > 0)
     {
       if (insert)
diff --git a/libgui/src/m-editor/file-editor-tab.h b/libgui/src/m-editor/file-editor-tab.h
--- a/libgui/src/m-editor/file-editor-tab.h
+++ b/libgui/src/m-editor/file-editor-tab.h
@@ -72,17 +72,19 @@ public slots:
   void previous_breakpoint (const QWidget* ID);
   void remove_all_breakpoints (const QWidget* ID);
 
   void comment_selected_text (const QWidget* ID);
   void uncomment_selected_text (const QWidget* ID);
   void find (const QWidget* ID);
   void goto_line (const QWidget* ID, int line = -1);
 
-  void set_debugger_position (const QWidget *ID, int line = -1);
+  void insert_debugger_pointer (const QWidget *ID, int line = -1);
+  void delete_debugger_pointer (const QWidget *ID, int line = -1);
+
   void do_dbstop_marker (bool insert, const QWidget *ID, int line = -1);
 
   void set_modified (bool modified = true);
 
   QString load_file (const QString& fileName);
   void new_file ();
 
   void file_has_changed (const QString& fileName);
diff --git a/libgui/src/m-editor/file-editor.cc b/libgui/src/m-editor/file-editor.cc
--- a/libgui/src/m-editor/file-editor.cc
+++ b/libgui/src/m-editor/file-editor.cc
@@ -168,17 +168,17 @@ file_editor::request_open_file (const QS
         {
           _tab_widget->setCurrentWidget (p->second);
 
           if (line > 0)
             {
               emit fetab_goto_line (p->second, line);
 
               if (debug_pointer)
-                emit fetab_set_debugger_position (p->second, line-1);
+                emit fetab_insert_debugger_pointer (p->second, line-1);
 
               if (dbstop_marker)
                 emit fetab_do_dbstop_marker (insert, p->second, line-1);
             }
 
           emit fetab_set_focus (p->second);
         }
       else
@@ -196,17 +196,17 @@ file_editor::request_open_file (const QS
                   // file already loaded, add file to mru list here
                   handle_mru_add_file(QDir::cleanPath (openFileName));
 
                   if (line > 0)
                     {
                       emit fetab_goto_line (fileEditorTab, line);
 
                       if (debug_pointer)
-                        emit fetab_set_debugger_position (fileEditorTab, line-1);
+                        emit fetab_insert_debugger_pointer (fileEditorTab, line-1);
                       if (dbstop_marker)
                         emit fetab_do_dbstop_marker
                           (insert, fileEditorTab, line-1);
                     }
                 }
               else
                 {
                   delete fileEditorTab;
@@ -294,22 +294,45 @@ file_editor::check_conflict_save (const 
       return;
     }
 
   // Can save without conflict, have the file editor tab do so.
   emit fetab_save_file (saveFileWidget, saveFileName, remove_on_success);
 }
 
 void
-file_editor::handle_update_debug_pointer_request (const QString& file, int line)
+file_editor::handle_insert_debugger_pointer_request (const QString& file, int line)
 {
   request_open_file (file, line, true);
 }
 
 void
+file_editor::handle_delete_debugger_pointer_request (const QString& file, int line)
+{
+  if (! file.isEmpty ())
+    {
+      // Have all file editor tabs signal what their file names are.
+      editor_tab_map.clear ();
+      emit fetab_file_name_query (0);
+
+      // Check whether this file is already open in the editor.
+      std::map<QString, QWidget *>::const_iterator p = editor_tab_map.find (file);
+      if (p != editor_tab_map.end ())
+        {
+          _tab_widget->setCurrentWidget (p->second);
+
+          if (line > 0)
+            emit fetab_delete_debugger_pointer (p->second, line-1);
+
+          emit fetab_set_focus (p->second);
+        }
+    }
+}
+
+void
 file_editor::handle_update_dbstop_marker_request (bool insert,
                                                   const QString& file, int line)
 {
   request_open_file (file, line, false, true, insert);
 }
 
 void
 file_editor::request_undo ()
@@ -879,17 +902,19 @@ file_editor::add_file_editor_tab (file_e
   connect (this, SIGNAL (fetab_uncomment_selected_text (const QWidget*)),
            f, SLOT (uncomment_selected_text (const QWidget*)));
   connect (this, SIGNAL (fetab_find (const QWidget*)),
            f, SLOT (find (const QWidget*)));
   connect (this, SIGNAL (fetab_goto_line (const QWidget *, int)),
            f, SLOT (goto_line (const QWidget *, int)));
   connect (this, SIGNAL (fetab_set_focus (const QWidget*)),
            f, SLOT (set_focus (const QWidget*)));
-  connect (this, SIGNAL (fetab_set_debugger_position (const QWidget *, int)),
-           f, SLOT (set_debugger_position (const QWidget *, int)));
+  connect (this, SIGNAL (fetab_insert_debugger_pointer (const QWidget *, int)),
+           f, SLOT (insert_debugger_pointer (const QWidget *, int)));
+  connect (this, SIGNAL (fetab_delete_debugger_pointer (const QWidget *, int)),
+           f, SLOT (delete_debugger_pointer (const QWidget *, int)));
   connect (this, SIGNAL (fetab_do_dbstop_marker (bool, const QWidget *, int)),
            f, SLOT (do_dbstop_marker (bool, const QWidget *, int)));
 
   _tab_widget->setCurrentWidget (f);
 }
 
 #endif
diff --git a/libgui/src/m-editor/file-editor.h b/libgui/src/m-editor/file-editor.h
--- a/libgui/src/m-editor/file-editor.h
+++ b/libgui/src/m-editor/file-editor.h
@@ -83,17 +83,18 @@ signals:
   void fetab_toggle_breakpoint (const QWidget* ID);
   void fetab_next_breakpoint (const QWidget* ID);
   void fetab_previous_breakpoint (const QWidget* ID);
   void fetab_remove_all_breakpoints (const QWidget* ID);
   void fetab_comment_selected_text (const QWidget* ID);
   void fetab_uncomment_selected_text (const QWidget* ID);
   void fetab_find (const QWidget* ID);
   void fetab_goto_line (const QWidget* ID, int line = -1);
-  void fetab_set_debugger_position (const QWidget* ID, int line = -1);
+  void fetab_insert_debugger_pointer (const QWidget* ID, int line = -1);
+  void fetab_delete_debugger_pointer (const QWidget* ID, int line = -1);
   void fetab_do_dbstop_marker (bool insert, const QWidget* ID, int line = -1);
   void fetab_set_focus (const QWidget* ID);
 
 public slots:
   void request_new_file ();
   void request_open_file ();
   void request_mru_open_file ();
 
@@ -125,17 +126,18 @@ public slots:
   void handle_tab_close_request (int index);
   void handle_tab_remove_request ();
   void handle_add_filename_to_list (const QString& fileName, QWidget *ID);
   void active_tab_changed (int index);
   void handle_editor_state_changed (bool enableCopy, const QString& fileName);
   void handle_mru_add_file (const QString& file_name);
   void check_conflict_save (const QString& fileName, bool remove_on_success);
 
-  void handle_update_debug_pointer_request (const QString& file, int line);
+  void handle_insert_debugger_pointer_request (const QString& file, int line);
+  void handle_delete_debugger_pointer_request (const QString& file, int line);
   void handle_update_dbstop_marker_request (bool insert, const QString& file,
                                             int line);
 
   /** Tells the editor to react on changed settings. */
   void notice_settings ();
 
 private slots:
   void request_open_file (const QString& fileName, int line = -1,
diff --git a/libgui/src/main-window.cc b/libgui/src/main-window.cc
--- a/libgui/src/main-window.cc
+++ b/libgui/src/main-window.cc
@@ -506,20 +506,28 @@ main_window::handle_quit_debug_mode ()
   _debug_step_out->setEnabled (false);
   _debug_quit->setEnabled (false);
 #ifdef HAVE_QSCINTILLA
   _file_editor->handle_quit_debug_mode ();
 #endif
 }
 
 void
-main_window::handle_update_debug_pointer_request (const QString& file, int line)
+main_window::handle_insert_debugger_pointer_request (const QString& file, int line)
 {
 #ifdef HAVE_QSCINTILLA
-  _file_editor->handle_update_debug_pointer_request (file, line);
+  _file_editor->handle_insert_debugger_pointer_request (file, line);
+#endif
+}
+
+void
+main_window::handle_delete_debugger_pointer_request (const QString& file, int line)
+{
+#ifdef HAVE_QSCINTILLA
+  _file_editor->handle_delete_debugger_pointer_request (file, line);
 #endif
 }
 
 void
 main_window::handle_update_dbstop_marker_request (bool insert,
                                                   const QString& file, int line)
 {
 #ifdef HAVE_QSCINTILLA
@@ -1179,18 +1187,22 @@ main_window::construct ()
            SLOT(handle_entered_debug_mode ()));
 
   connect (_octave_qt_event_listener,
            SIGNAL (quit_debug_mode_signal ()),
            this,
            SLOT (handle_quit_debug_mode ()));
 
   connect (_octave_qt_event_listener,
-           SIGNAL (update_debug_pointer_signal (const QString&, int)), this,
-           SLOT (handle_update_debug_pointer_request (const QString&, int)));
+           SIGNAL (insert_debugger_pointer_signal (const QString&, int)), this,
+           SLOT (handle_insert_debugger_pointer_request (const QString&, int)));
+
+  connect (_octave_qt_event_listener,
+           SIGNAL (delete_debugger_pointer_signal (const QString&, int)), this,
+           SLOT (handle_delete_debugger_pointer_request (const QString&, int)));
 
   connect (_octave_qt_event_listener,
            SIGNAL (update_dbstop_marker_signal (bool, const QString&, int)),
            this,
            SLOT (handle_update_dbstop_marker_request (bool, const QString&, int)));
 }
 
 void
diff --git a/libgui/src/main-window.h b/libgui/src/main-window.h
--- a/libgui/src/main-window.h
+++ b/libgui/src/main-window.h
@@ -113,17 +113,18 @@ public slots:
   void handle_command_history_visible (bool);
   void handle_current_directory_visible (bool);
   void handle_workspace_visible (bool);
   void handle_editor_visible (bool);
   void handle_documentation_visible (bool);
 
   void handle_entered_debug_mode ();
   void handle_quit_debug_mode ();
-  void handle_update_debug_pointer_request (const QString& file, int line);
+  void handle_insert_debugger_pointer_request (const QString& file, int line);
+  void handle_delete_debugger_pointer_request (const QString& file, int line);
   void handle_update_dbstop_marker_request (bool insert, const QString& file, int line);
   void debug_continue ();
   void debug_step_into ();
   void debug_step_over ();
   void debug_step_out ();
   void debug_quit ();
 
   void read_settings ();
diff --git a/libgui/src/octave-adapter/octave-event-listener.h b/libgui/src/octave-adapter/octave-event-listener.h
--- a/libgui/src/octave-adapter/octave-event-listener.h
+++ b/libgui/src/octave-adapter/octave-event-listener.h
@@ -35,17 +35,21 @@ class octave_event_listener
     current_directory_has_changed (const std::string& directory) = 0;
 
     virtual void
     update_workspace (void) = 0;
 
     virtual void
     update_history (void) = 0;
 
-    virtual void update_debug_pointer (const std::string& file, int line) = 0;
+    virtual void
+    insert_debugger_pointer (const std::string& file, int line) = 0;
+
+    virtual void
+    delete_debugger_pointer (const std::string& file, int line) = 0;
 
     virtual void
     update_dbstop_marker (bool insert, const std::string& file, int line) = 0;
 
     virtual void about_to_exit () = 0;
 
     virtual void entered_debug_mode () = 0;
     virtual void quit_debug_mode () = 0;
diff --git a/libgui/src/octave-adapter/octave-link.cc b/libgui/src/octave-adapter/octave-link.cc
--- a/libgui/src/octave-adapter/octave-link.cc
+++ b/libgui/src/octave-adapter/octave-link.cc
@@ -152,17 +152,17 @@ octave_link::do_update_history (void)
     {
       event_listener->update_history ();
 
       do_process_events ();
     }
 }
 
 void
-octave_link::do_update_debug_pointer (const octave_value_list& args)
+octave_link::do_insert_debugger_pointer (const octave_value_list& args)
 {
   if (event_listener)
     {
       if (args.length () == 1)
         {
           octave_scalar_map m = args(0).scalar_map_value ();
 
           if (! error_state)
@@ -170,17 +170,51 @@ octave_link::do_update_debug_pointer (co
               octave_value ov_file = m.getfield ("file");
               octave_value ov_line = m.getfield ("line");
 
               std::string file = ov_file.string_value ();
               int line = ov_line.int_value ();
 
               if (! error_state)
                 {
-                  event_listener->update_debug_pointer (file, line);
+                  event_listener->insert_debugger_pointer (file, line);
+
+                  do_process_events ();
+                }
+              else
+                ::error ("invalid struct in debug pointer callback");
+            }
+          else
+            ::error ("expecting struct in debug pointer callback");
+        }
+      else
+        ::error ("invalid call to debug pointer callback");
+    }
+}
+
+void
+octave_link::do_delete_debugger_pointer (const octave_value_list& args)
+{
+  if (event_listener)
+    {
+      if (args.length () == 1)
+        {
+          octave_scalar_map m = args(0).scalar_map_value ();
+
+          if (! error_state)
+            {
+              octave_value ov_file = m.getfield ("file");
+              octave_value ov_line = m.getfield ("line");
+
+              std::string file = ov_file.string_value ();
+              int line = ov_line.int_value ();
+
+              if (! error_state)
+                {
+                  event_listener->delete_debugger_pointer (file, line);
 
                   do_process_events ();
                 }
               else
                 ::error ("invalid struct in debug pointer callback");
             }
           else
             ::error ("expecting struct in debug pointer callback");
@@ -198,19 +232,25 @@ octave_link::do_pre_input_event_hook_fcn
 
 void
 octave_link::do_post_input_event_hook_fcn (void)
 {
   do_update_history ();
 }
 
 void
-octave_link::do_debug_input_event_hook_fcn (const octave_value_list& args)
+octave_link::do_enter_debugger_event_hook_fcn (const octave_value_list& args)
 {
-  do_update_debug_pointer (args);
+  do_insert_debugger_pointer (args);
+}
+
+void
+octave_link::do_exit_debugger_event_hook_fcn (const octave_value_list& args)
+{
+  do_delete_debugger_pointer (args);
 }
 
 void
 octave_link::do_update_breakpoint_hook_fcn
   (bool insert, const octave_value_list& args)
 {
   if (event_listener)
     {
diff --git a/libgui/src/octave-adapter/octave-link.h b/libgui/src/octave-adapter/octave-link.h
--- a/libgui/src/octave-adapter/octave-link.h
+++ b/libgui/src/octave-adapter/octave-link.h
@@ -141,20 +141,26 @@ public:
   }
 
   static void post_input_event_hook_fcn (void)
   {
     if (instance_ok ())
       instance->do_post_input_event_hook_fcn ();
   }
 
-  static void debug_input_event_hook_fcn (const octave_value_list& args)
+  static void enter_debugger_event_hook_fcn (const octave_value_list& args)
   {
     if (instance_ok ())
-      instance->do_debug_input_event_hook_fcn (args);
+      instance->do_enter_debugger_event_hook_fcn (args);
+  }
+
+  static void exit_debugger_event_hook_fcn (const octave_value_list& args)
+  {
+    if (instance_ok ())
+      instance->do_exit_debugger_event_hook_fcn (args);
   }
 
   static void
   update_breakpoint_hook_fcn (bool insert, const octave_value_list& args)
   {
     if (instance_ok ())
       instance->do_update_breakpoint_hook_fcn (insert, args);
   }
@@ -216,18 +222,20 @@ private:
   void do_about_to_exit (void);
 
   void do_entered_readline_hook (void) { }
   void do_finished_readline_hook (void) { }
 
   std::string do_last_working_directory (void);
   void do_update_workspace (void);
   void do_update_history (void);
-  void do_update_debug_pointer (const octave_value_list& args);
+  void do_insert_debugger_pointer (const octave_value_list& args);
+  void do_delete_debugger_pointer (const octave_value_list& args);
 
   void do_pre_input_event_hook_fcn (void);
   void do_post_input_event_hook_fcn (void);
-  void do_debug_input_event_hook_fcn (const octave_value_list& args);
+  void do_enter_debugger_event_hook_fcn (const octave_value_list& args);
+  void do_exit_debugger_event_hook_fcn (const octave_value_list& args);
   void do_update_breakpoint_hook_fcn (bool insert,
                                       const octave_value_list& args);
 };
 
 #endif // OCTAVELINK_H
diff --git a/libgui/src/octave-adapter/octave-main-thread.cc b/libgui/src/octave-adapter/octave-main-thread.cc
--- a/libgui/src/octave-adapter/octave-main-thread.cc
+++ b/libgui/src/octave-adapter/octave-main-thread.cc
@@ -51,21 +51,31 @@ post_input_event_hook_fcn (const octave_
   octave_value_list retval;
 
   octave_link::post_input_event_hook_fcn ();
 
   return retval;
 }
 
 static octave_value_list
-debug_input_event_hook_fcn (const octave_value_list& args, int)
+enter_debugger_event_hook_fcn (const octave_value_list& args, int)
 {
   octave_value_list retval;
 
-  octave_link::debug_input_event_hook_fcn (args);
+  octave_link::enter_debugger_event_hook_fcn (args);
+
+  return retval;
+}
+
+static octave_value_list
+exit_debugger_event_hook_fcn (const octave_value_list& args, int)
+{
+  octave_value_list retval;
+
+  octave_link::exit_debugger_event_hook_fcn (args);
 
   return retval;
 }
 
 static octave_value_list
 dbstop_hook_fcn (const octave_value_list& args, int)
 {
   octave_value_list retval;
@@ -103,19 +113,23 @@ octave_main_thread::run ()
   octave_value pre_fcn (new octave_builtin (pre_input_event_hook_fcn));
   octave_value pre_fcn_handle (new octave_fcn_handle (pre_fcn));
   Fadd_pre_input_event_hook (pre_fcn_handle);
 
   octave_value post_fcn (new octave_builtin (post_input_event_hook_fcn));
   octave_value post_fcn_handle (new octave_fcn_handle (post_fcn));
   Fadd_post_input_event_hook (post_fcn_handle);
 
-  octave_value debug_fcn (new octave_builtin (debug_input_event_hook_fcn));
-  octave_value debug_fcn_handle (new octave_fcn_handle (debug_fcn));
-  Fadd_debug_input_event_hook (debug_fcn_handle);
+  octave_value enter_debugger_fcn (new octave_builtin (enter_debugger_event_hook_fcn));
+  octave_value enter_debugger_fcn_handle (new octave_fcn_handle (enter_debugger_fcn));
+  Fadd_enter_debugger_event_hook (enter_debugger_fcn_handle);
+
+  octave_value exit_debugger_fcn (new octave_builtin (exit_debugger_event_hook_fcn));
+  octave_value exit_debugger_fcn_handle (new octave_fcn_handle (exit_debugger_fcn));
+  Fadd_exit_debugger_event_hook (exit_debugger_fcn_handle);
 
   octave_value dbstop_fcn (new octave_builtin (dbstop_hook_fcn));
   octave_value dbstop_fcn_handle (new octave_fcn_handle (dbstop_fcn));
   Fadd_dbstop_hook (dbstop_fcn_handle);
 
   octave_value dbclear_fcn (new octave_builtin (dbclear_hook_fcn));
   octave_value dbclear_fcn_handle (new octave_fcn_handle (dbclear_fcn));
   Fadd_dbclear_hook (dbclear_fcn_handle);
diff --git a/libgui/src/octave-qt-event-listener.cc b/libgui/src/octave-qt-event-listener.cc
--- a/libgui/src/octave-qt-event-listener.cc
+++ b/libgui/src/octave-qt-event-listener.cc
@@ -49,20 +49,27 @@ octave_qt_event_listener::update_workspa
 
 void
 octave_qt_event_listener::update_history (void)
 {
   emit update_history_signal ();
 }
 
 void
-octave_qt_event_listener::update_debug_pointer (const std::string& file,
-                                                int line)
+octave_qt_event_listener::insert_debugger_pointer (const std::string& file,
+                                                   int line)
 {
-  emit update_debug_pointer_signal (QString::fromStdString (file), line);
+  emit insert_debugger_pointer_signal (QString::fromStdString (file), line);
+}
+
+void
+octave_qt_event_listener::delete_debugger_pointer (const std::string& file,
+                                                   int line)
+{
+  emit delete_debugger_pointer_signal (QString::fromStdString (file), line);
 }
 
 void
 octave_qt_event_listener::update_dbstop_marker (bool insert,
                                                 const std::string& file,
                                                 int line)
 {
   emit update_dbstop_marker_signal (insert, QString::fromStdString (file),
diff --git a/libgui/src/octave-qt-event-listener.h b/libgui/src/octave-qt-event-listener.h
--- a/libgui/src/octave-qt-event-listener.h
+++ b/libgui/src/octave-qt-event-listener.h
@@ -32,26 +32,28 @@ class octave_qt_event_listener
 {
   Q_OBJECT
   public:
   octave_qt_event_listener (QObject *parent = 0);
 
   void current_directory_has_changed (const std::string& directory);
   void update_workspace (void);
   void update_history (void);
-  void update_debug_pointer (const std::string& file, int line);
+  void insert_debugger_pointer (const std::string& file, int line);
+  void delete_debugger_pointer (const std::string& file, int line);
   void update_dbstop_marker (bool insert, const std::string& file, int line);
   void about_to_exit ();
 
   void entered_debug_mode ();
   void quit_debug_mode ();
 
 signals:
   void current_directory_has_changed_signal (const QString& directory);
   void update_workspace_signal (void);
   void update_history_signal (void);
-  void update_debug_pointer_signal (const QString& file, int line);
+  void insert_debugger_pointer_signal (const QString& file, int line);
+  void delete_debugger_pointer_signal (const QString& file, int line);
   void update_dbstop_marker_signal (bool insert, const QString& file, int line);
   void entered_debug_mode_signal ();
   void quit_debug_mode_signal ();
 };
 
 #endif // OCTAVEQTEVENTLISTENER_H
diff --git a/libinterp/interpfcn/input.cc b/libinterp/interpfcn/input.cc
--- a/libinterp/interpfcn/input.cc
+++ b/libinterp/interpfcn/input.cc
@@ -120,17 +120,18 @@ static std::string last_debugging_comman
 static bool Vgud_mode = false;
 
 // The filemarker used to separate filenames from subfunction names
 char Vfilemarker = '>';
 
 static hook_function_list pre_input_event_hook_functions;
 static hook_function_list input_event_hook_functions;
 static hook_function_list post_input_event_hook_functions;
-static hook_function_list debug_input_event_hook_functions;
+static hook_function_list enter_debugger_event_hook_functions;
+static hook_function_list exit_debugger_event_hook_functions;
 
 // For octave_quit.
 void
 remove_input_event_hook_functions (void)
 {
   input_event_hook_functions.clear ();
 }
 
@@ -452,18 +453,26 @@ initialize_command_input (void)
   command_editor::set_completer_quote_characters ("'\"");
 
   command_editor::set_completion_function (generate_completion);
 
   command_editor::set_quoting_function (quoting_filename);
 }
 
 static void
+exit_debugger_cleanup (const octave_value& loc_info)
+{
+  exit_debugger_event_hook_functions.run (loc_info);
+}
+
+static void
 get_debug_input (const std::string& prompt)
 {
+  unwind_protect frame;
+
   octave_user_code *caller = octave_call_stack::caller_user_code ();
   std::string nm;
 
   int curr_debug_line = octave_call_stack::current_line ();
 
   bool have_file = false;
 
   if (caller)
@@ -496,35 +505,36 @@ get_debug_input (const std::string& prom
 
           buf << "stopped in " << nm;
 
           if (curr_debug_line > 0)
             buf << " at line " << curr_debug_line;
 
           if (have_file)
             {
-              debug_input_event_hook_functions.run
-                (location_info (nm, curr_debug_line));
+              octave_value loc_info = location_info (nm, curr_debug_line);
+
+              enter_debugger_event_hook_functions.run (loc_info);
+
+              frame.add_fcn (exit_debugger_cleanup, loc_info);
 
               std::string line_buf
                 = get_file_line (nm, curr_debug_line);
 
               if (! line_buf.empty ())
                 buf << "\n" << curr_debug_line << ": " << line_buf;
             }
         }
     }
 
   std::string msg = buf.str ();
 
   if (! msg.empty ())
     std::cerr << msg << std::endl;
 
-  unwind_protect frame;
-
   frame.protect_var (VPS1);
   VPS1 = prompt;
 
   if (! (interactive || forced_interactive)
       || LEXER->reading_fcn_file
       || LEXER->reading_classdef_file
       || LEXER->reading_script_file
       || LEXER->input_from_eval_string ())
@@ -1357,20 +1367,20 @@ interactive user input.\n\
         error ("remove_post_input_event_hook: argument not valid as a hook function name or id");
     }
   else
     print_usage ();
 
   return retval;
 }
 
-DEFUN (add_debug_input_event_hook, args, ,
+DEFUN (add_enter_debugger_event_hook, args, ,
   "-*- texinfo -*-\n\
-@deftypefn  {Built-in Function} {@var{id} =} add_debug_input_event_hook (@var{fcn})\n\
-@deftypefnx {Built-in Function} {@var{id} =} add_debug_input_event_hook (@var{fcn}, @var{data})\n\
+@deftypefn  {Built-in Function} {@var{id} =} add_enter_debugger_event_hook (@var{fcn})\n\
+@deftypefnx {Built-in Function} {@var{id} =} add_enter_debugger_event_hook (@var{fcn}, @var{data})\n\
 Add the named function or function handle @var{fcn} to the list of\n\
 functions to call when a debugger breakpoint is reached.  The function\n\
 should have the form\n\
 \n\
 @example\n\
 @var{fcn} (@var{location}, @var{data})\n\
 @end example\n\
 \n\
@@ -1383,17 +1393,17 @@ The name of the file where the breakpoin
 The line number corresponding to the breakpoint.\n\
 @end table\n\
 \n\
 If @var{data} is omitted when the hook function is added, the hook\n\
 function is called with a single argument.\n\
 \n\
 The returned identifier may be used to remove the function handle from\n\
 the list of input hook functions.\n\
-@seealso{remove_debug_input_event_hook}\n\
+@seealso{remove_enter_debugger_event_hook}\n\
 @end deftypefn")
 {
   octave_value retval;
 
   int nargin = args.length ();
 
   if (nargin == 1 || nargin == 2)
     {
@@ -1401,62 +1411,159 @@ the list of input hook functions.\n\
 
       if (nargin == 2)
         user_data = args(1);
 
       hook_function hook_fcn (args(0), user_data);
 
       if (! error_state)
         {
-          debug_input_event_hook_functions.insert (hook_fcn.id (), hook_fcn);
+          enter_debugger_event_hook_functions.insert (hook_fcn.id (), hook_fcn);
 
           retval = hook_fcn.id ();
         }
       else
-        error ("add_debug_input_event_hook: expecting string as first arg");
+        error ("add_enter_debugger_event_hook: expecting string as first arg");
     }
   else
     print_usage ();
 
   return retval;
 }
 
-DEFUN (remove_debug_input_event_hook, args, ,
+DEFUN (remove_enter_debugger_event_hook, args, ,
   "-*- texinfo -*-\n\
-@deftypefn {Built-in Function} {} remove_debug_input_event_hook (@var{name})\n\
-@deftypefnx {Built-in Function} {} remove_debug_input_event_hook (@var{fcn_id})\n\
+@deftypefn {Built-in Function} {} remove_enter_debugger_event_hook (@var{name})\n\
+@deftypefnx {Built-in Function} {} remove_enter_debugger_event_hook (@var{fcn_id})\n\
 Remove the named function or function handle with the given identifier\n\
 from the list of functions to call immediately after accepting\n\
 interactive user input.\n\
-@seealso{add_debug_input_event_hook}\n\
+@seealso{add_enter_debugger_event_hook}\n\
 @end deftypefn")
 {
   octave_value_list retval;
 
   int nargin = args.length ();
 
   if (nargin == 1 || nargin == 2)
     {
       std::string hook_fcn_id = args(0).string_value ();
 
       bool warn = (nargin < 2);
 
       if (! error_state)
         {
           hook_function_list::iterator p
-            = debug_input_event_hook_functions.find (hook_fcn_id);
+            = enter_debugger_event_hook_functions.find (hook_fcn_id);
 
-          if (p != debug_input_event_hook_functions.end ())
-            debug_input_event_hook_functions.erase (p);
+          if (p != enter_debugger_event_hook_functions.end ())
+            enter_debugger_event_hook_functions.erase (p);
           else if (warn)
-            warning ("remove_debug_input_event_hook: %s not found in list",
+            warning ("remove_enter_debugger_event_hook: %s not found in list",
                      hook_fcn_id.c_str ());
         }
       else
-        error ("remove_debug_input_event_hook: argument not valid as a hook function name or id");
+        error ("remove_enter_debugger_event_hook: argument not valid as a hook function name or id");
+    }
+  else
+    print_usage ();
+
+  return retval;
+}
+
+DEFUN (add_exit_debugger_event_hook, args, ,
+  "-*- texinfo -*-\n\
+@deftypefn  {Built-in Function} {@var{id} =} add_exit_debugger_event_hook (@var{fcn})\n\
+@deftypefnx {Built-in Function} {@var{id} =} add_exit_debugger_event_hook (@var{fcn}, @var{data})\n\
+Add the named function or function handle @var{fcn} to the list of\n\
+functions to call when continuing execution after a debugger breakpoint.\n\
+The function should have the form\n\
+\n\
+@example\n\
+@var{fcn} (@var{location}, @var{data})\n\
+@end example\n\
+\n\
+in which @var{location} is a structure containing the following elements:\n\
+\n\
+@table @code\n\
+@item file\n\
+The name of the file where the breakpoint is located.\n\
+@item line\n\
+The line number corresponding to the breakpoint.\n\
+@end table\n\
+\n\
+If @var{data} is omitted when the hook function is added, the hook\n\
+function is called with a single argument.\n\
+\n\
+The returned identifier may be used to remove the function handle from\n\
+the list of input hook functions.\n\
+@seealso{remove_exit_debugger_event_hook}\n\
+@end deftypefn")
+{
+  octave_value retval;
+
+  int nargin = args.length ();
+
+  if (nargin == 1 || nargin == 2)
+    {
+      octave_value user_data;
+
+      if (nargin == 2)
+        user_data = args(1);
+
+      hook_function hook_fcn (args(0), user_data);
+
+      if (! error_state)
+        {
+          exit_debugger_event_hook_functions.insert (hook_fcn.id (), hook_fcn);
+
+          retval = hook_fcn.id ();
+        }
+      else
+        error ("add_exit_debugger_event_hook: expecting string as first arg");
+    }
+  else
+    print_usage ();
+
+  return retval;
+}
+
+DEFUN (remove_exit_debugger_event_hook, args, ,
+  "-*- texinfo -*-\n\
+@deftypefn {Built-in Function} {} remove_exit_debugger_event_hook (@var{name})\n\
+@deftypefnx {Built-in Function} {} remove_exit_debugger_event_hook (@var{fcn_id})\n\
+Remove the named function or function handle with the given identifier\n\
+from the list of functions to call immediately after accepting\n\
+interactive user input.\n\
+@seealso{add_exit_debugger_event_hook}\n\
+@end deftypefn")
+{
+  octave_value_list retval;
+
+  int nargin = args.length ();
+
+  if (nargin == 1 || nargin == 2)
+    {
+      std::string hook_fcn_id = args(0).string_value ();
+
+      bool warn = (nargin < 2);
+
+      if (! error_state)
+        {
+          hook_function_list::iterator p
+            = exit_debugger_event_hook_functions.find (hook_fcn_id);
+
+          if (p != exit_debugger_event_hook_functions.end ())
+            exit_debugger_event_hook_functions.erase (p);
+          else if (warn)
+            warning ("remove_exit_debugger_event_hook: %s not found in list",
+                     hook_fcn_id.c_str ());
+        }
+      else
+        error ("remove_exit_debugger_event_hook: argument not valid as a hook function name or id");
     }
   else
     print_usage ();
 
   return retval;
 }
 
 DEFUN (PS1, args, nargout,
