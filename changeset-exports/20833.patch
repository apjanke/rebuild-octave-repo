# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1449689524 18000
#      Wed Dec 09 14:32:04 2015 -0500
# Node ID 9c4c87679985dddd03431e2655e664ab8e419308
# Parent  3951d420556cd0b232481da9916f17b661fe9860
restructure calls to error

* op-bm-bm.cc, op-cell.cc, op-class.cc, op-cm-cm.cc, op-fcm-fcm.cc,
op-fm-fm.cc, op-m-m.cc, op-str-str.cc, op-struct.cc:
Restructure calls to error to avoid excess indentation.

diff --git a/libinterp/operators/op-bm-bm.cc b/libinterp/operators/op-bm-bm.cc
--- a/libinterp/operators/op-bm-bm.cc
+++ b/libinterp/operators/op-bm-bm.cc
@@ -56,22 +56,19 @@ DEFNDUNOP_OP (uminus, bool_matrix, array
 
 DEFNCUNOP_METHOD (invert, bool_matrix, invert)
 
 DEFUNOP (transpose, bool_matrix)
 {
   CAST_UNOP_ARG (const octave_bool_matrix&);
 
   if (v.ndims () > 2)
-    {
-      error ("transpose not defined for N-d objects");
-      return octave_value ();
-    }
-  else
-    return octave_value (v.bool_matrix_value ().transpose ());
+    error ("transpose not defined for N-d objects");
+
+  return octave_value (v.bool_matrix_value ().transpose ());
 }
 
 // bool matrix by bool matrix ops.
 
 DEFNDBINOP_FN (eq, bool_matrix, bool_matrix, bool_array, bool_array, mx_el_eq)
 DEFNDBINOP_FN (ne, bool_matrix, bool_matrix, bool_array, bool_array, mx_el_ne)
 
 DEFNDBINOP_FN (el_and, bool_matrix, bool_matrix, bool_array, bool_array,
diff --git a/libinterp/operators/op-cell.cc b/libinterp/operators/op-cell.cc
--- a/libinterp/operators/op-cell.cc
+++ b/libinterp/operators/op-cell.cc
@@ -36,22 +36,19 @@ along with Octave; see the file COPYING.
 
 // cell ops.
 
 DEFUNOP (transpose, cell)
 {
   CAST_UNOP_ARG (const octave_cell&);
 
   if (v.ndims () > 2)
-    {
-      error ("transpose not defined for N-d objects");
-      return octave_value ();
-    }
-  else
-    return octave_value (Cell (v.cell_value ().transpose ()));
+    error ("transpose not defined for N-d objects");
+
+  return octave_value (Cell (v.cell_value ().transpose ()));
 }
 
 DEFCATOP_FN (c_c, cell, cell, concat)
 
 DEFASSIGNANYOP_FN (assign, cell, assign);
 
 DEFNULLASSIGNOP_FN (null_assign, cell, delete_elements)
 
diff --git a/libinterp/operators/op-class.cc b/libinterp/operators/op-class.cc
--- a/libinterp/operators/op-class.cc
+++ b/libinterp/operators/op-class.cc
@@ -43,30 +43,28 @@ along with Octave; see the file COPYING.
   oct_unop_ ## name (const octave_value& a) \
   { \
     octave_value retval; \
  \
     std::string class_name = a.class_name (); \
  \
     octave_value meth = symbol_table::find_method (#name, class_name); \
  \
-    if (meth.is_defined ()) \
-      { \
-        octave_value_list args; \
+    if (meth.is_undefined ()) \
+      error ("%s method not defined for %s class", #name, \
+             class_name.c_str ()); \
  \
-        args(0) = a; \
+    octave_value_list args; \
  \
-        octave_value_list tmp = feval (meth.function_value (), args, 1); \
+    args(0) = a; \
  \
-        if (tmp.length () > 0) \
-          retval = tmp(0); \
-      } \
-    else \
-      error ("%s method not defined for %s class", \
-             #name, class_name.c_str ()); \
+    octave_value_list tmp = feval (meth.function_value (), args, 1); \
+ \
+    if (tmp.length () > 0) \
+      retval = tmp(0); \
  \
     return retval; \
   }
 
 DEF_CLASS_UNOP (not)
 DEF_CLASS_UNOP (uplus)
 DEF_CLASS_UNOP (uminus)
 DEF_CLASS_UNOP (transpose)
@@ -80,31 +78,29 @@ DEF_CLASS_UNOP (ctranspose)
   { \
     octave_value retval; \
  \
     std::string dispatch_type \
       = a1.is_object () ? a1.class_name () : a2.class_name (); \
  \
     octave_value meth = symbol_table::find_method (#name, dispatch_type); \
  \
-    if (meth.is_defined ()) \
-      { \
-        octave_value_list args; \
+    if (meth.is_undefined ()) \
+      error ("%s method not defined for %s class", #name, \
+             dispatch_type.c_str ()); \
  \
-        args(1) = a2; \
-        args(0) = a1; \
+    octave_value_list args; \
  \
-        octave_value_list tmp = feval (meth.function_value (), args, 1); \
+    args(1) = a2; \
+    args(0) = a1; \
  \
-        if (tmp.length () > 0) \
-          retval = tmp(0); \
-      } \
-    else \
-      error ("%s method not defined for %s class", \
-             #name, dispatch_type.c_str ()); \
+    octave_value_list tmp = feval (meth.function_value (), args, 1); \
+ \
+    if (tmp.length () > 0) \
+      retval = tmp(0); \
  \
     return retval; \
   }
 
 DEF_CLASS_BINOP (plus)
 DEF_CLASS_BINOP (minus)
 DEF_CLASS_BINOP (mtimes)
 DEF_CLASS_BINOP (mrdivide)
diff --git a/libinterp/operators/op-cm-cm.cc b/libinterp/operators/op-cm-cm.cc
--- a/libinterp/operators/op-cm-cm.cc
+++ b/libinterp/operators/op-cm-cm.cc
@@ -41,35 +41,29 @@ DEFNDUNOP_OP (not, complex_matrix, compl
 DEFNDUNOP_OP (uplus, complex_matrix, complex_array, /* no-op */)
 DEFNDUNOP_OP (uminus, complex_matrix, complex_array, -)
 
 DEFUNOP (transpose, complex_matrix)
 {
   CAST_UNOP_ARG (const octave_complex_matrix&);
 
   if (v.ndims () > 2)
-    {
-      error ("transpose not defined for N-d objects");
-      return octave_value ();
-    }
-  else
-    return octave_value (v.complex_matrix_value ().transpose ());
+    error ("transpose not defined for N-d objects");
+
+  return octave_value (v.complex_matrix_value ().transpose ());
 }
 
 DEFUNOP (hermitian, complex_matrix)
 {
   CAST_UNOP_ARG (const octave_complex_matrix&);
 
   if (v.ndims () > 2)
-    {
-      error ("complex-conjugate transpose not defined for N-d objects");
-      return octave_value ();
-    }
-  else
-    return octave_value (v.complex_matrix_value ().hermitian ());
+    error ("complex-conjugate transpose not defined for N-d objects");
+
+  return octave_value (v.complex_matrix_value ().hermitian ());
 }
 
 DEFNCUNOP_METHOD (incr, complex_matrix, increment)
 DEFNCUNOP_METHOD (decr, complex_matrix, decrement)
 DEFNCUNOP_METHOD (changesign, complex_matrix, changesign)
 
 // complex matrix by complex matrix ops.
 
diff --git a/libinterp/operators/op-fcm-fcm.cc b/libinterp/operators/op-fcm-fcm.cc
--- a/libinterp/operators/op-fcm-fcm.cc
+++ b/libinterp/operators/op-fcm-fcm.cc
@@ -41,35 +41,29 @@ DEFNDUNOP_OP (not, float_complex_matrix,
 DEFNDUNOP_OP (uplus, float_complex_matrix, float_complex_array, /* no-op */)
 DEFNDUNOP_OP (uminus, float_complex_matrix, float_complex_array, -)
 
 DEFUNOP (transpose, float_complex_matrix)
 {
   CAST_UNOP_ARG (const octave_float_complex_matrix&);
 
   if (v.ndims () > 2)
-    {
-      error ("transpose not defined for N-d objects");
-      return octave_value ();
-    }
-  else
-    return octave_value (v.float_complex_matrix_value ().transpose ());
+    error ("transpose not defined for N-d objects");
+
+  return octave_value (v.float_complex_matrix_value ().transpose ());
 }
 
 DEFUNOP (hermitian, float_complex_matrix)
 {
   CAST_UNOP_ARG (const octave_float_complex_matrix&);
 
   if (v.ndims () > 2)
-    {
-      error ("complex-conjugate transpose not defined for N-d objects");
-      return octave_value ();
-    }
-  else
-    return octave_value (v.float_complex_matrix_value ().hermitian ());
+    error ("complex-conjugate transpose not defined for N-d objects");
+
+  return octave_value (v.float_complex_matrix_value ().hermitian ());
 }
 
 DEFNCUNOP_METHOD (incr, float_complex_matrix, increment)
 DEFNCUNOP_METHOD (decr, float_complex_matrix, decrement)
 DEFNCUNOP_METHOD (changesign, float_complex_matrix, changesign)
 
 // complex matrix by complex matrix ops.
 
diff --git a/libinterp/operators/op-fm-fm.cc b/libinterp/operators/op-fm-fm.cc
--- a/libinterp/operators/op-fm-fm.cc
+++ b/libinterp/operators/op-fm-fm.cc
@@ -41,22 +41,19 @@ DEFNDUNOP_OP (not, float_matrix, float_a
 DEFNDUNOP_OP (uplus, float_matrix, float_array, /* no-op */)
 DEFNDUNOP_OP (uminus, float_matrix, float_array, -)
 
 DEFUNOP (transpose, float_matrix)
 {
   CAST_UNOP_ARG (const octave_float_matrix&);
 
   if (v.ndims () > 2)
-    {
-      error ("transpose not defined for N-d objects");
-      return octave_value ();
-    }
-  else
-    return octave_value (v.float_matrix_value ().transpose ());
+    error ("transpose not defined for N-d objects");
+
+  return octave_value (v.float_matrix_value ().transpose ());
 }
 
 DEFNCUNOP_METHOD (incr, float_matrix, increment)
 DEFNCUNOP_METHOD (decr, float_matrix, decrement)
 DEFNCUNOP_METHOD (changesign, float_matrix, changesign)
 
 // matrix by matrix ops.
 
diff --git a/libinterp/operators/op-m-m.cc b/libinterp/operators/op-m-m.cc
--- a/libinterp/operators/op-m-m.cc
+++ b/libinterp/operators/op-m-m.cc
@@ -41,22 +41,19 @@ DEFNDUNOP_OP (not, matrix, array, !)
 DEFNDUNOP_OP (uplus, matrix, array, /* no-op */)
 DEFNDUNOP_OP (uminus, matrix, array, -)
 
 DEFUNOP (transpose, matrix)
 {
   CAST_UNOP_ARG (const octave_matrix&);
 
   if (v.ndims () > 2)
-    {
-      error ("transpose not defined for N-d objects");
-      return octave_value ();
-    }
-  else
-    return octave_value (v.matrix_value ().transpose ());
+    error ("transpose not defined for N-d objects");
+
+  return octave_value (v.matrix_value ().transpose ());
 }
 
 DEFNCUNOP_METHOD (incr, matrix, increment)
 DEFNCUNOP_METHOD (decr, matrix, decrement)
 DEFNCUNOP_METHOD (changesign, matrix, changesign)
 
 // matrix by matrix ops.
 
diff --git a/libinterp/operators/op-str-str.cc b/libinterp/operators/op-str-str.cc
--- a/libinterp/operators/op-str-str.cc
+++ b/libinterp/operators/op-str-str.cc
@@ -34,23 +34,20 @@ along with Octave; see the file COPYING.
 
 // string unary ops.
 
 DEFUNOP (transpose, char_matrix_str)
 {
   CAST_UNOP_ARG (const octave_char_matrix_str&);
 
   if (v.ndims () > 2)
-    {
-      error ("transpose not defined for N-d objects");
-      return octave_value ();
-    }
-  else
-    return octave_value (v.char_matrix_value ().transpose (),
-                         a.is_sq_string () ? '\'' : '"');
+    error ("transpose not defined for N-d objects");
+
+  return octave_value (v.char_matrix_value ().transpose (),
+                       a.is_sq_string () ? '\'' : '"');
 }
 
 // string by string ops.
 
 #define DEFCHARNDBINOP_FN(name, op, t1, t2, e1, e2, f)  \
   BINOPDECL (name, a1, a2) \
   { \
     dim_vector a1_dims = a1.dims (); \
diff --git a/libinterp/operators/op-struct.cc b/libinterp/operators/op-struct.cc
--- a/libinterp/operators/op-struct.cc
+++ b/libinterp/operators/op-struct.cc
@@ -34,22 +34,19 @@ along with Octave; see the file COPYING.
 
 // struct ops.
 
 DEFUNOP (transpose, struct)
 {
   CAST_UNOP_ARG (const octave_struct&);
 
   if (v.ndims () > 2)
-    {
-      error ("transpose not defined for N-d objects");
-      return octave_value ();
-    }
-  else
-    return octave_value (v.map_value ().transpose ());
+    error ("transpose not defined for N-d objects");
+
+  return octave_value (v.map_value ().transpose ());
 }
 
 DEFUNOP (scalar_transpose, scalar_struct)
 {
   CAST_UNOP_ARG (const octave_scalar_struct&);
 
   return octave_value (v.scalar_map_value ());
 }
@@ -58,40 +55,40 @@ DEFNDCATOP_FN (s_s_concat, struct, struc
 DEFNDCATOP_FN (s_ss_concat, struct, scalar_struct, map, map, concat)
 DEFNDCATOP_FN (ss_s_concat, scalar_struct, struct, map, map, concat)
 DEFNDCATOP_FN (ss_ss_concat, scalar_struct, scalar_struct, map, map, concat)
 
 static octave_value
 oct_catop_struct_matrix (octave_base_value& a1, const octave_base_value& a2,
                          const Array<octave_idx_type>&)
 {
-  octave_value retval;
   CAST_BINOP_ARGS (const octave_struct&, const octave_matrix&);
+
   NDArray tmp = v2.array_value ();
   dim_vector dv = tmp.dims ();
-  if (dv.all_zero ())
-    retval = octave_value (v1.map_value ());
-  else
+
+  if (! dv.all_zero ())
     error ("invalid concatenation of structure with matrix");
-  return retval;
+
+  return octave_value (v1.map_value ());
 }
 
 static octave_value
 oct_catop_matrix_struct (octave_base_value& a1, const octave_base_value& a2,
                          const Array<octave_idx_type>&)
 {
-  octave_value retval;
   CAST_BINOP_ARGS (const octave_matrix&, const octave_struct&);
+
   NDArray tmp = v1.array_value ();
   dim_vector dv = tmp.dims ();
-  if (dv.all_zero ())
-    retval = octave_value (v2.map_value ());
-  else
+
+  if (! dv.all_zero ())
     error ("invalid concatenation of structure with matrix");
-  return retval;
+
+  return octave_value (v2.map_value ());
 }
 
 void
 install_struct_ops (void)
 {
   INSTALL_UNOP (op_transpose, octave_struct, transpose);
   INSTALL_UNOP (op_hermitian, octave_struct, transpose);
 
