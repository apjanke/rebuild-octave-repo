# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1254341774 14400
#      Wed Sep 30 16:16:14 2009 -0400
# Node ID ef45d191d8337f092107d72f52b9a5541a9e0af9
# Parent  4cf195710ae80122224e9d0a835670033a508c93
error: improve compatibility for calls with no arguments or empty format

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,14 @@
+2009-09-30  John W. Eaton  <jwe@octave.org>
+
+	* error.cc (error_1, pr_where_2, handle_message):
+	Don't do anything if fmt is empty.
+	(Ferror): Call print_usage if nargin == 0.
+
 2009-09-29  Jaroslav Hajek  <highegg@gmail.com>
 
 	* DLD-FUNCTIONS/typecast.cc (Ftypecast): Rewrite.
 	(Fbitpack, Fbitunpack): New DEFUNs.
 
 2009-09-28  Shai Ayal  <shaiay@users.sourceforge.net>
 
 	* DLD-FUNCTIONS/fltk_backend.cc (plot_window::handle): Redraw the
diff --git a/src/error.cc b/src/error.cc
--- a/src/error.cc
+++ b/src/error.cc
@@ -278,38 +278,44 @@ error_1 (std::ostream& os, const char *n
 	 const char *fmt, va_list args)
 {
   if (error_state != -2)
     {
       if (fmt)
 	{
 	  if (*fmt)
 	    {
-	      int len = strlen (fmt);
-	      if (fmt[len - 1] == '\n')
+	      size_t len = strlen (fmt);
+
+	      if (len > 0)
 		{
-		  if (len > 1)
+		  if (fmt[len - 1] == '\n')
 		    {
-		      char *tmp_fmt = strsave (fmt);
-		      tmp_fmt[len - 1] = '\0';
-		      verror (true, os, name, id, tmp_fmt, args);
-		      delete [] tmp_fmt;
+		      if (len > 1)
+			{
+			  char *tmp_fmt = strsave (fmt);
+			  tmp_fmt[len - 1] = '\0';
+			  verror (true, os, name, id, tmp_fmt, args);
+			  delete [] tmp_fmt;
+			}
+
+		      error_state = -2;
 		    }
+		  else
+		    {
+		      verror (true, os, name, id, fmt, args);
 
-		  error_state = -2;
+		      if (! error_state)
+			error_state = 1;
+		    }
 		}
-	      else
-		verror (true, os, name, id, fmt, args);
 	    }
 	}
       else
 	panic ("error_1: invalid format");
-
-      if (! error_state)
-	error_state = 1;
     }
 }
 
 void
 vmessage (const char *name, const char *fmt, va_list args)
 {
   verror (false, std::cerr, name, "", fmt, args);
 }
@@ -378,29 +384,33 @@ usage_with_id (const char *id, const cha
 
 static void
 pr_where_2 (const char *fmt, va_list args)
 {
   if (fmt)
     {
       if (*fmt)
 	{
-	  int len = strlen (fmt);
-	  if (fmt[len - 1] == '\n')
+	  size_t len = strlen (fmt);
+
+	  if (len > 0)
 	    {
-	      if (len > 1)
+	      if (fmt[len - 1] == '\n')
 		{
-		  char *tmp_fmt = strsave (fmt);
-		  tmp_fmt[len - 1] = '\0';
-		  verror (false, std::cerr, 0, "", tmp_fmt, args);
-		  delete [] tmp_fmt;
+		  if (len > 1)
+		    {
+		      char *tmp_fmt = strsave (fmt);
+		      tmp_fmt[len - 1] = '\0';
+		      verror (false, std::cerr, 0, "", tmp_fmt, args);
+		      delete [] tmp_fmt;
+		    }
 		}
+	      else
+		verror (false, std::cerr, 0, "", fmt, args);
 	    }
-	  else
-	    verror (false, std::cerr, 0, "", fmt, args);
 	}
     }
   else
     panic ("pr_where_2: invalid format");
 }
 
 static void
 pr_where_1 (const char *fmt, ...)
@@ -758,32 +768,36 @@ handle_message (error_fun f, const char 
 	    }
 	  else if (arg.is_empty ())
 	    return retval;
 	}
     }
 
 // Ugh.
 
-  int len = strlen (msg);
-  if (msg[len - 1] == '\n')
+  size_t len = strlen (msg);
+
+  if (len > 0)
     {
-      if (len > 1)
+      if (msg[len - 1] == '\n')
 	{
-	  char *tmp_msg = strsave (msg);
-	  tmp_msg[len - 1] = '\0';
-	  f (id, "%s\n", tmp_msg);
-	  retval = tmp_msg;
-	  delete [] tmp_msg;
+	  if (len > 1)
+	    {
+	      char *tmp_msg = strsave (msg);
+	      tmp_msg[len - 1] = '\0';
+	      f (id, "%s\n", tmp_msg);
+	      retval = tmp_msg;
+	      delete [] tmp_msg;
+	    }
 	}
-    }
-  else
-    {
-      f (id, "%s", msg);
-      retval = msg;
+      else
+	{
+	  f (id, "%s", msg);
+	  retval = msg;
+	}
     }
 
   return retval;
 }
 
 DEFUN (rethrow, args, ,
   "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} rethrow (@var{err})\n\
@@ -980,66 +994,71 @@ error: nargin != 1\n\
   octave_value retval;
 
   int nargin = args.length ();
 
   octave_value_list nargs = args;
 
   std::string id;
 
-  if (nargin > 1)
+  if (nargin == 0)
+    print_usage ();
+  else
     {
-      std::string arg1 = args(0).string_value ();
+      if (nargin > 1)
+	{
+	  std::string arg1 = args(0).string_value ();
+
+	  if (! error_state)
+	    {
+	      if (arg1.find ('%') == std::string::npos)
+		{
+		  id = arg1;
 
-      if (! error_state)
+		  nargs.resize (nargin-1);
+
+		  for (int i = 1; i < nargin; i++)
+		    nargs(i-1) = args(i);
+		}
+	    }
+	  else
+	    return retval;
+	}
+      else if (nargin == 1 && args(0).is_map ())
 	{
-	  if (arg1.find ('%') == std::string::npos)
+	  octave_value_list tmp;
+
+	  Octave_map m = args(0).map_value ();
+
+	  if (m.numel () == 1)
 	    {
-	      id = arg1;
+	      if (m.contains ("message"))
+		{
+		  Cell c = m.contents ("message");
 
-	      nargs.resize (nargin-1);
+		  if (! c.is_empty () && c(0).is_string ())
+		    nargs(0) = c(0).string_value ();
+		}
+
+	      if (m.contains ("identifier"))
+		{
+		  Cell c = m.contents ("identifier");
 
-	      for (int i = 1; i < nargin; i++)
-		nargs(i-1) = args(i);
+		  if (! c.is_empty () && c(0).is_string ())
+		    id = c(0).string_value ();
+		}
+
+	      // FIXME -- also need to handle "stack" field in error
+	      // structure, but that will require some more significant
+	      // surgery on handle_message, error_with_id, etc.
 	    }
 	}
-      else
-	return retval;
+
+      handle_message (error_with_id, id.c_str (), "unspecified error", nargs);
     }
-  else if (nargin == 1 && args(0).is_map ())
-    {
-      octave_value_list tmp;
-
-      Octave_map m = args(0).map_value ();
-
-      if (m.numel () == 1)
-	{
-	  if (m.contains ("message"))
-	    {
-	      Cell c = m.contents ("message");
-
-	      if (! c.is_empty () && c(0).is_string ())
-		nargs(0) = c(0).string_value ();
-	    }
-
-	  if (m.contains ("identifier"))
-	    {
-	      Cell c = m.contents ("identifier");
-
-	      if (! c.is_empty () && c(0).is_string ())
-		id = c(0).string_value ();
-	    }
-
-	  // FIXME -- also need to handle "stack" field in error
-	  // structure, but that will require some more significant
-	  // surgery on handle_message, error_with_id, etc.
-	}
-    }
-
-  handle_message (error_with_id, id.c_str (), "unspecified error", nargs);
 
   return retval;
 }
 
 DEFUN (warning, args, nargout,
   "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} warning (@var{template}, @dots{})\n\
 @deftypefnx {Built-in Function} {} warning (@var{id}, @var{template}, @dots{})\n\
