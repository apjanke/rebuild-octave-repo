# HG changeset patch
# User Max Brister <max@2bass.com>
# Date 1337894706 21600
#      Thu May 24 15:25:06 2012 -0600
# Node ID 13465aab507f4773b7eb3a0f6a2fc7721d97d5eb
# Parent  232d8ab07932c0ac00a65a4440a0f3f95156bfe2
Removed dead functions

* src/pt-jit.cc (jit_typeinfo::do_to_generic, jit_typeinfo::do_to_octave_value)
(jit_typeinfo::do_reset_generic): Removed

* src/pt-jit.h (jit_typeinfo::to_generic, jit_typeinfo::to_octave_value)
(jit_typeinfo::reset_generic): Removed

diff --git a/src/pt-jit.cc b/src/pt-jit.cc
--- a/src/pt-jit.cc
+++ b/src/pt-jit.cc
@@ -42,17 +42,16 @@ along with Octave; see the file COPYING.
 #include <llvm/Analysis/Verifier.h>
 #include <llvm/Analysis/CallGraph.h>
 #include <llvm/Analysis/Passes.h>
 #include <llvm/Target/TargetData.h>
 #include <llvm/Transforms/Scalar.h>
 #include <llvm/Transforms/IPO.h>
 #include <llvm/Support/TargetSelect.h>
 #include <llvm/Support/raw_os_ostream.h>
-#include <llvm/ExecutionEngine/GenericValue.h>
 
 #include "octave.h"
 #include "ov-fcn-handle.h"
 #include "ov-usr-fcn.h"
 #include "ov-scalar.h"
 #include "pt-all.h"
 
 // FIXME: Remove eventually
@@ -556,84 +555,16 @@ jit_typeinfo::do_type_of (const octave_v
     return get_scalar ();
 
   if (ov.is_range ())
     return get_range ();
 
   return get_any ();
 }
 
-void
-jit_typeinfo::do_to_generic (jit_type *type, llvm::GenericValue& gv)
-{
-  if (type == any)
-    do_to_generic (type, gv, octave_value ());
-  else if (type == scalar)
-    do_to_generic (type, gv, octave_value (0));
-  else if (type == range)
-    do_to_generic (type, gv, octave_value (Range ()));
-  else
-    assert (false && "Type not supported yet");
-}
-
-void
-jit_typeinfo::do_to_generic (jit_type *type, llvm::GenericValue& gv, octave_value ov)
-{
-  if (type == any)
-    {
-      octave_base_value *obv = ov.internal_rep ();
-      obv->grab ();
-      ov_out.push_back (obv);
-      gv.PointerVal = &ov_out.back ();
-    }
-  else if (type == scalar)
-    {
-      scalar_out.push_back (ov.double_value ());
-      gv.PointerVal = &scalar_out.back ();
-    }
-  else if (type == range)
-    {
-      range_out.push_back (ov.range_value ());
-      gv.PointerVal = &range_out.back ();
-    }
-  else
-    assert (false && "Type not supported yet");
-}
-
-octave_value
-jit_typeinfo::do_to_octave_value (jit_type *type, llvm::GenericValue& gv)
-{
-  if (type == any)
-    {
-      octave_base_value **ptr = reinterpret_cast<octave_base_value **>(gv.PointerVal);
-      return octave_value (*ptr);
-    }
-  else if (type == scalar)
-    {
-      double *ptr = reinterpret_cast<double *>(gv.PointerVal);
-      return octave_value (*ptr);
-    }
-  else if (type == range)
-    {
-      jit_range *ptr = reinterpret_cast<jit_range *>(gv.PointerVal);
-      Range rng = *ptr;
-      return octave_value (rng);
-    }
-  else
-    assert (false && "Type not supported yet");
-}
-
-void
-jit_typeinfo::do_reset_generic (void)
-{
-  scalar_out.clear ();
-  ov_out.clear ();
-  range_out.clear ();
-}
-
 jit_type*
 jit_typeinfo::new_type (const std::string& name, jit_type *parent,
                         llvm::Type *llvm_type)
 {
   jit_type *ret = new jit_type (name, parent, llvm_type, next_id++);
   id_to_type.push_back (ret);
   return ret;
 }
diff --git a/src/pt-jit.h b/src/pt-jit.h
--- a/src/pt-jit.h
+++ b/src/pt-jit.h
@@ -76,17 +76,16 @@ namespace llvm
   class Module;
   class FunctionPassManager;
   class PassManager;
   class ExecutionEngine;
   class Function;
   class BasicBlock;
   class LLVMContext;
   class Type;
-  class GenericValue;
   class Twine;
 }
 
 class octave_base_value;
 class octave_value;
 class tree;
 
 // jit_range is compatable with the llvm range structure
@@ -304,36 +303,16 @@ public:
   {
     return instance->do_cast (result);
   }
 
   static const jit_function::overload& cast (jit_type *to, jit_type *from)
   {
     return instance->do_cast (to, from);
   }
-
-  static void to_generic (jit_type *type, llvm::GenericValue& gv)
-  {
-    return instance->do_to_generic (type, gv);
-  }
-
-  static void to_generic (jit_type *type, llvm::GenericValue& gv, octave_value ov)
-  {
-    return instance->do_to_generic (type, gv, ov);
-  }
-
-  static octave_value to_octave_value (jit_type *type, llvm::GenericValue& gv)
-  {
-    return instance->do_to_octave_value (type, gv);
-  }
-
-  static void reset_generic (void)
-  {
-    instance->do_reset_generic ();
-  }
 private:
   jit_typeinfo (llvm::Module *m, llvm::ExecutionEngine *e);
 
   // FIXME: Do these methods really need to be in jit_typeinfo?
   jit_type *do_union (jit_type *lhs, jit_type *rhs)
   {
     // FIXME: Actually introduce a union type
 
@@ -375,24 +354,16 @@ private:
   jit_type *do_type_of (const octave_value &ov) const;
   
   const jit_function& do_binary_op (int op) const
   {
     assert (static_cast<size_t>(op) < binary_ops.size ());
     return binary_ops[op];
   }
 
-  void do_to_generic (jit_type *type, llvm::GenericValue& gv);
-
-  void do_to_generic (jit_type *type, llvm::GenericValue& gv, octave_value ov);
-
-  octave_value do_to_octave_value (jit_type *type, llvm::GenericValue& gv);
-
-  void do_reset_generic (void);
-
   const jit_function& do_cast (jit_type *to)
   {
     static jit_function null_function;
     if (! to)
       return null_function;
 
     size_t id = to->type_id ();
     if (id >= casts.size ())
@@ -495,20 +466,16 @@ private:
   jit_function simple_for_index;
   jit_function logically_true;
 
   // type id -> cast function TO that type
   std::vector<jit_function> casts;
 
   // type id -> identity function
   std::vector<llvm::Function *> identities;
-
-  std::list<double> scalar_out;
-  std::list<octave_base_value *> ov_out;
-  std::list<jit_range> range_out;
 };
 
 // The low level octave jit ir
 // this ir is close to llvm, but contains information for doing type inference.
 // We convert the octave parse tree to this IR directly.
 
 #define JIT_VISIT_IR_CLASSES                    \
   JIT_METH(const_string);                       \
