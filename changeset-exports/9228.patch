# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1242893619 -7200
#      Thu May 21 10:13:39 2009 +0200
# Node ID ab40ef1e232fc8e90e118cd60a64988e95c6eeee
# Parent  8145f2255276b5d271f27d5c233f4ffa09dd93da
fix tests within eigs-base.cc

diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,21 @@
+2009-05-20  Jaroslav Hajek  <highegg@gmail.com>
+
+	* eigs-base.cc (
+	EigsRealSymmetricMatrix,
+	EigsRealSymmetricMatrixShift,
+	EigsRealSymmetricFunc,
+	EigsRealNonSymmetricMatrix,
+	EigsRealNonSymmetricMatrixShift,
+	EigsRealNonSymmetricFunc,
+	EigsComplexNonSymmetricMatrix,
+	EigsComplexNonSymmetricMatrixShift,
+	EigsComplexNonSymmetricFunc): Update tests.
+
 2009-05-21  Jaroslav Hajek  <highegg@gmail.com>
 
 
 	* CMatrix.cc 
 	(ComplexMatrix::all, ComplexMatrix::any, ComplexMatrix::cumprod,
 	ComplexMatrix::cumsum, ComplexMatrix::prod, ComplexMatrix::sum,
 	ComplexMatrix::sumsq): Use explicit template qualifications
 	to workaround bugs in Intel C++ and MSVC++ compilers.
diff --git a/liboctave/eigs-base.cc b/liboctave/eigs-base.cc
--- a/liboctave/eigs-base.cc
+++ b/liboctave/eigs-base.cc
@@ -779,38 +779,46 @@ EigsRealSymmetricMatrix (const M& m, con
   if (resid.is_empty())
     {
       std::string rand_dist = octave_rand::distribution();
       octave_rand::distribution("uniform");
       resid = ColumnVector (octave_rand::vector(n));
       octave_rand::distribution(rand_dist);
     }
 
+  if (n < 3)
+    {
+      (*current_liboctave_error_handler)
+	("eigs: n must be at least 3");
+      return -1;
+    }
+
   if (p < 0)
     {
       p = k * 2;
 
       if (p < 20)
 	p = 20;
       
       if (p > n - 1)
 	p = n - 1 ;
     }
-  else if (p <= k || p > n)
+  
+  if (k < 1 || k > n - 2)
     {
       (*current_liboctave_error_handler) 
-	("eigs: opts.p must be between k and n");
+	("eigs: Invalid number of eigenvalues to extract (must be 0 < k < n-1-1).\n"
+	 "      Use 'eig(full(A))' instead");
       return -1;
     }
 
-  if (k > n )
+  if (p <= k || p >= n)
     {
       (*current_liboctave_error_handler) 
-	("eigs: Too many eigenvalues to extract (k >= n).\n"
-	 "      Use 'eig(full(A))' instead");
+	("eigs: opts.p must be greater than k and less than n");
       return -1;
     }
 
   if (have_b && cholB && permB.length() != 0) 
     {
       // Check the we really have a permutation vector
       if (permB.length() != n)
 	{
@@ -1095,38 +1103,46 @@ EigsRealSymmetricMatrixShift (const M& m
   if (resid.is_empty())
     {
       std::string rand_dist = octave_rand::distribution();
       octave_rand::distribution("uniform");
       resid = ColumnVector (octave_rand::vector(n));
       octave_rand::distribution(rand_dist);
     }
 
+  if (n < 3)
+    {
+      (*current_liboctave_error_handler)
+	("eigs: n must be at least 3");
+      return -1;
+    }
+
+  if (k <= 0 || k >= n - 1)
+    {
+      (*current_liboctave_error_handler) 
+	("eigs: Invalid number of eigenvalues to extract (must be 0 < k < n-1-1).\n"
+	     "      Use 'eig(full(A))' instead");
+      return -1;
+    }
+
   if (p < 0)
     {
       p = k * 2;
 
       if (p < 20)
 	p = 20;
       
       if (p > n - 1)
 	p = n - 1 ;
     }
-  else if (p <= k || p > n)
+  
+  if (p <= k || p >= n)
     {
       (*current_liboctave_error_handler) 
-	("eigs: opts.p must be between k and n");
-      return -1;
-    }
-
-  if (k > n )
-    {
-      (*current_liboctave_error_handler) 
-	("eigs: Too many eigenvalues to extract (k >= n).\n"
-	     "      Use 'eig(full(A))' instead");
+	("eigs: opts.p must be greater than k and less than n");
       return -1;
     }
 
   if (have_b && cholB && permB.length() != 0) 
     {
       // Check the we really have a permutation vector
       if (permB.length() != n)
 	{
@@ -1396,38 +1412,46 @@ EigsRealSymmetricFunc (EigsFunc fun, oct
   if (resid.is_empty())
     {
       std::string rand_dist = octave_rand::distribution();
       octave_rand::distribution("uniform");
       resid = ColumnVector (octave_rand::vector(n));
       octave_rand::distribution(rand_dist);
     }
 
+  if (n < 3)
+    {
+      (*current_liboctave_error_handler)
+	("eigs: n must be at least 3");
+      return -1;
+    }
+
   if (p < 0)
     {
       p = k * 2;
 
       if (p < 20)
 	p = 20;
       
       if (p > n - 1)
 	p = n - 1 ;
     }
-  else if (p <= k || p > n)
+  
+  if (k <= 0 || k >= n - 1)
     {
       (*current_liboctave_error_handler)
-	("eigs: opts.p must be between k and n");
+	("eigs: Invalid number of eigenvalues to extract (must be 0 < k < n-1).\n"
+	     "      Use 'eig(full(A))' instead");
       return -1;
     }
 
-  if (k > n )
+  if (p <= k || p >= n)
     {
       (*current_liboctave_error_handler)
-	("eigs: Too many eigenvalues to extract (k >= n).\n"
-	     "      Use 'eig(full(A))' instead");
+	("eigs: opts.p must be greater than k and less than n");
       return -1;
     }
 
   if (! have_sigma)
     {
       if (typ != "LM" && typ != "SM" && typ != "LA" && typ != "SA" && 
 	  typ != "BE" && typ != "LR" && typ != "SR" && typ != "LI" &&
 	  typ != "SI")
@@ -1669,38 +1693,46 @@ EigsRealNonSymmetricMatrix (const M& m, 
   if (resid.is_empty())
     {
       std::string rand_dist = octave_rand::distribution();
       octave_rand::distribution("uniform");
       resid = ColumnVector (octave_rand::vector(n));
       octave_rand::distribution(rand_dist);
     }
 
+  if (n < 3)
+    {
+      (*current_liboctave_error_handler)
+	("eigs: n must be at least 3");
+      return -1;
+    }
+
   if (p < 0)
     {
       p = k * 2 + 1;
 
       if (p < 20)
 	p = 20;
       
       if (p > n - 1)
 	p = n - 1 ;
     }
-  else if (p < k || p > n)
+
+  if (k <= 0 || k >= n - 1)
     {
       (*current_liboctave_error_handler) 
-	("eigs: opts.p must be between k+1 and n");
+	("eigs: Invalid number of eigenvalues to extract (must be 0 < k < n-1).\n"
+	 "      Use 'eig(full(A))' instead");
       return -1;
     }
 
-  if (k > n - 1)
+  if (p <= k || p >= n)
     {
       (*current_liboctave_error_handler) 
-	("eigs: Too many eigenvalues to extract (k >= n-1).\n"
-	 "      Use 'eig(full(A))' instead");
+	("eigs: opts.p must be greater than k and less than n");
       return -1;
     }
 
   if (have_b && cholB && permB.length() != 0) 
     {
       // Check the we really have a permutation vector
       if (permB.length() != n)
 	{
@@ -2027,38 +2059,46 @@ EigsRealNonSymmetricMatrixShift (const M
   if (resid.is_empty())
     {
       std::string rand_dist = octave_rand::distribution();
       octave_rand::distribution("uniform");
       resid = ColumnVector (octave_rand::vector(n));
       octave_rand::distribution(rand_dist);
     }
 
+  if (n < 3)
+    {
+      (*current_liboctave_error_handler)
+	("eigs: n must be at least 3");
+      return -1;
+    }
+
   if (p < 0)
     {
       p = k * 2 + 1;
 
       if (p < 20)
 	p = 20;
       
       if (p > n - 1)
 	p = n - 1 ;
     }
-  else if (p < k || p > n)
+
+  if (k <= 0 || k >= n - 1)
     {
       (*current_liboctave_error_handler) 
-	("eigs: opts.p must be between k+1 and n");
+	("eigs: Invalid number of eigenvalues to extract (must be 0 < k < n-1).\n"
+	     "      Use 'eig(full(A))' instead");
       return -1;
     }
 
-  if (k > n - 1)
+  if (p <= k || p >= n)
     {
       (*current_liboctave_error_handler) 
-	("eigs: Too many eigenvalues to extract (k >= n-1).\n"
-	     "      Use 'eig(full(A))' instead");
+	("eigs: opts.p must be greater than k and less than n");
       return -1;
     }
 
   if (have_b && cholB && permB.length() != 0) 
     {
       // Check that we really have a permutation vector
       if (permB.length() != n)
 	{
@@ -2375,38 +2415,46 @@ EigsRealNonSymmetricFunc (EigsFunc fun, 
   if (resid.is_empty())
     {
       std::string rand_dist = octave_rand::distribution();
       octave_rand::distribution("uniform");
       resid = ColumnVector (octave_rand::vector(n));
       octave_rand::distribution(rand_dist);
     }
 
+  if (n < 3)
+    {
+      (*current_liboctave_error_handler)
+	("eigs: n must be at least 3");
+      return -1;
+    }
+
   if (p < 0)
     {
       p = k * 2 + 1;
 
       if (p < 20)
 	p = 20;
       
       if (p > n - 1)
 	p = n - 1 ;
     }
-  else if (p < k || p > n)
+
+  if (k <= 0 || k >= n - 1)
     {
       (*current_liboctave_error_handler)
-	("eigs: opts.p must be between k+1 and n");
+	("eigs: Invalid number of eigenvalues to extract (must be 0 < k < n-1).\n"
+	     "      Use 'eig(full(A))' instead");
       return -1;
     }
 
-  if (k > n - 1)
+  if (p <= k || p >= n)
     {
       (*current_liboctave_error_handler)
-	("eigs: Too many eigenvalues to extract (k >= n-1).\n"
-	     "      Use 'eig(full(A))' instead");
+	("eigs: opts.p must be greater than k and less than n");
       return -1;
     }
 
 
   if (! have_sigma)
     {
       if (typ != "LM" && typ != "SM" && typ != "LA" && typ != "SA" && 
 	  typ != "BE" && typ != "LR" && typ != "SR" && typ != "LI" &&
@@ -2692,38 +2740,46 @@ EigsComplexNonSymmetricMatrix (const M& 
       Array<double> rr (octave_rand::vector(n));
       Array<double> ri (octave_rand::vector(n));
       cresid = ComplexColumnVector (n);
       for (octave_idx_type i = 0; i < n; i++)
 	cresid(i) = Complex(rr(i),ri(i));
       octave_rand::distribution(rand_dist);
     }
 
+  if (n < 3)
+    {
+      (*current_liboctave_error_handler)
+	("eigs: n must be at least 3");
+      return -1;
+    }
+
   if (p < 0)
     {
       p = k * 2 + 1;
 
       if (p < 20)
 	p = 20;
       
       if (p > n - 1)
 	p = n - 1 ;
     }
-  else if (p < k || p > n)
+
+  if (k <= 0 || k >= n - 1)
     {
       (*current_liboctave_error_handler) 
-	("eigs: opts.p must be between k+1 and n");
+	("eigs: Invalid number of eigenvalues to extract (must be 0 < k < n-1).\n"
+	 "      Use 'eig(full(A))' instead");
       return -1;
     }
 
-  if (k > n - 1)
+  if (p <= k || p >= n)
     {
       (*current_liboctave_error_handler) 
-	("eigs: Too many eigenvalues to extract (k >= n-1).\n"
-	 "      Use 'eig(full(A))' instead");
+	("eigs: opts.p must be greater than k and less than n");
       return -1;
     }
 
   if (have_b && cholB && permB.length() != 0) 
     {
       // Check the we really have a permutation vector
       if (permB.length() != n)
 	{
@@ -3009,38 +3065,46 @@ EigsComplexNonSymmetricMatrixShift (cons
       Array<double> rr (octave_rand::vector(n));
       Array<double> ri (octave_rand::vector(n));
       cresid = ComplexColumnVector (n);
       for (octave_idx_type i = 0; i < n; i++)
 	cresid(i) = Complex(rr(i),ri(i));
       octave_rand::distribution(rand_dist);
     }
 
+  if (n < 3)
+    {
+      (*current_liboctave_error_handler)
+	("eigs: n must be at least 3");
+      return -1;
+    }
+
   if (p < 0)
     {
       p = k * 2 + 1;
 
       if (p < 20)
 	p = 20;
       
       if (p > n - 1)
 	p = n - 1 ;
     }
-  else if (p < k || p > n)
+
+  if (k <= 0 || k >= n - 1)
     {
       (*current_liboctave_error_handler) 
-	("eigs: opts.p must be between k+1 and n");
+	("eigs: Invalid number of eigenvalues to extract (must be 0 < k < n-1).\n"
+	     "      Use 'eig(full(A))' instead");
       return -1;
     }
 
-  if (k > n - 1)
+  if (p <= k || p >= n)
     {
       (*current_liboctave_error_handler) 
-	("eigs: Too many eigenvalues to extract (k >= n-1).\n"
-	     "      Use 'eig(full(A))' instead");
+	("eigs: opts.p must be greater than k and less than n");
       return -1;
     }
 
   if (have_b && cholB && permB.length() != 0) 
     {
       // Check that we really have a permutation vector
       if (permB.length() != n)
 	{
@@ -3318,38 +3382,46 @@ EigsComplexNonSymmetricFunc (EigsComplex
       Array<double> rr (octave_rand::vector(n));
       Array<double> ri (octave_rand::vector(n));
       cresid = ComplexColumnVector (n);
       for (octave_idx_type i = 0; i < n; i++)
 	cresid(i) = Complex(rr(i),ri(i));
       octave_rand::distribution(rand_dist);
     }
 
+  if (n < 3)
+    {
+      (*current_liboctave_error_handler)
+	("eigs: n must be at least 3");
+      return -1;
+    }
+
   if (p < 0)
     {
       p = k * 2 + 1;
 
       if (p < 20)
 	p = 20;
       
       if (p > n - 1)
 	p = n - 1 ;
     }
-  else if (p < k || p > n)
+
+  if (k <= 0 || k >= n - 1)
     {
       (*current_liboctave_error_handler)
-	("eigs: opts.p must be between k+1 and n");
+	("eigs: Invalid number of eigenvalues to extract (must be 0 < k < n-1).\n"
+	     "      Use 'eig(full(A))' instead");
       return -1;
     }
 
-  if (k > n - 1)
+  if (p <= k || p >= n)
     {
       (*current_liboctave_error_handler)
-	("eigs: Too many eigenvalues to extract (k >= n-1).\n"
-	     "      Use 'eig(full(A))' instead");
+	("eigs: opts.p must be greater than k and less than n");
       return -1;
     }
 
   if (! have_sigma)
     {
       if (typ != "LM" && typ != "SM" && typ != "LA" && typ != "SA" && 
 	  typ != "BE" && typ != "LR" && typ != "SR" && typ != "LI" &&
 	  typ != "SI")
