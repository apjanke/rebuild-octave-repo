# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1383024486 14400
#      Tue Oct 29 01:28:06 2013 -0400
# Node ID 4155838569715b2bfd242246c8ddf797d68e8a41
# Parent  175b392e91fe2a2b6f90a9b6c30cf1755f3c120f
undo 7b305b36b87e to avoid Windows putenv/setenv failure (bug #40381)

This change may reintroduce a memory leak issue, but at least it
works.

* bootstrap.conf (gnulib_modules): Remove setenv from the list.
* lo-utils.cc (octave_putenv): Use gnulib::putenv instead of
gnulib::setenv.

diff --git a/bootstrap.conf b/bootstrap.conf
--- a/bootstrap.conf
+++ b/bootstrap.conf
@@ -65,17 +65,16 @@ gnulib_modules="
   readdir
   readlink
   realloc-gnu
   rename
   rmdir
   round
   roundf
   select
-  setenv
   sigaction
   signal
   sigprocmask
   sleep
   stat
   stddef
   stdint
   stdio
diff --git a/liboctave/util/lo-utils.cc b/liboctave/util/lo-utils.cc
--- a/liboctave/util/lo-utils.cc
+++ b/liboctave/util/lo-utils.cc
@@ -21,17 +21,16 @@ along with Octave; see the file COPYING.
 
 */
 
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
 #include <cctype>
-#include <cerrno>
 #include <cstdlib>
 #include <cstdio>
 #include <cstring>
 #include <cfloat>
 
 #include <limits>
 #include <string>
 
@@ -83,22 +82,36 @@ strsave (const char *s)
     return 0;
 
   int len = strlen (s);
   char *tmp = new char [len+1];
   tmp = strcpy (tmp, s);
   return tmp;
 }
 
+// This function was adapted from xputenv from Karl Berry's kpathsearch
+// library.
+
+// FIXME -- make this do the right thing if we don't have a
+// SMART_PUTENV.
+
 void
 octave_putenv (const std::string& name, const std::string& value)
 {
-  if (gnulib::setenv (name.c_str (), value.c_str (), true) < 0)
-    (*current_liboctave_error_handler) ("putenv: %s",
-                                        gnulib::strerror (errno));
+  int new_len = name.length () + value.length () + 2;
+
+  char *new_item = static_cast<char*> (gnulib::malloc (new_len));
+
+  sprintf (new_item, "%s=%s", name.c_str (), value.c_str ());
+
+  // As far as I can see there's no way to distinguish between the
+  // various errors; putenv doesn't have errno values.
+
+  if (gnulib::putenv (new_item) < 0)
+    (*current_liboctave_error_handler) ("putenv (%s) failed", new_item);
 }
 
 std::string
 octave_fgets (FILE *f)
 {
   bool eof;
   return octave_fgets (f, eof);
 }
