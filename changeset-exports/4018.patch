# HG changeset patch
# User jwe
# Date 1028517445 0
#      Mon Aug 05 03:17:25 2002 +0000
# Node ID a8621d87fbf54d874f2ee078ef49bea2623d8160
# Parent  0eb247b9cc9b2b9ae3174175a69340544ee3ced7
[project @ 2002-08-05 03:17:25 by jwe]

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,20 @@
+2002-08-04  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* ov.h (octave_value::assign_op): New enum values, op_pow_eq and
+	op_el_pow_eq.
+	* ov.cc (octave_value::assign_op_as_string): Handle them here.
+	(ocatave_value::op_eq_to_binary_op): And here.
+	* parse.y (POW_EQ, EPOW_EQ): New tokens.
+	(assign_expr): Handle them here too.
+	(make_assign_op): And here.
+
+	* lex.l: Recognize {POW}= and {EPOW}=.
+
 2002-08-02  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* ov-base-scalar.h (octave_base_scalar::all): New int arg.
 	(octave_base_scalar::any): Likewise.
 	* ov-range.h (octave_range::all): Likewise.
 	(octave_range::any): Likewise.
 
 	* Makefile.in (doc-files): Use mv, not move-if-change here.
diff --git a/src/lex.l b/src/lex.l
--- a/src/lex.l
+++ b/src/lex.l
@@ -702,16 +702,18 @@ NUMBER	(({D}+\.?{D}*{EXPON}?)|(\.{D}+{EX
 "*="	{ BIN_OP_RETURN (MUL_EQ, false); }
 "/="	{ BIN_OP_RETURN (DIV_EQ, false); }
 "\\="	{ BIN_OP_RETURN (LEFTDIV_EQ, false); }
 ".+="	{ BIN_OP_RETURN (ADD_EQ, false); }
 ".-="	{ BIN_OP_RETURN (SUB_EQ, false); }
 ".*="	{ BIN_OP_RETURN (EMUL_EQ, false); }
 "./="	{ BIN_OP_RETURN (EDIV_EQ, false); }
 ".\\="	{ BIN_OP_RETURN (ELEFTDIV_EQ, false); }
+{POW}=  { BIN_OP_RETURN (POW_EQ, false); }
+{EPOW}= { BIN_OP_RETURN (EPOW_EQ, false); }
 "&="	{ BIN_OP_RETURN (AND_EQ, false); }
 "|="	{ BIN_OP_RETURN (OR_EQ, false); }
 "<<="	{ BIN_OP_RETURN (LSHIFT_EQ, false); }
 ">>="	{ BIN_OP_RETURN (RSHIFT_EQ, false); }
 
 "{" {
     nesting_level.brace ();
     promptflag--;
diff --git a/src/ov.cc b/src/ov.cc
--- a/src/ov.cc
+++ b/src/ov.cc
@@ -288,16 +288,20 @@ octave_value::assign_op_as_string (assig
     case op_div_eq:
       retval = "/=";
       break;
 
     case op_ldiv_eq:
       retval = "\\=";
       break;
 
+    case op_pow_eq:
+      retval = "^=";
+      break;
+
     case op_lshift_eq:
       retval = "<<=";
       break;
 
     case op_rshift_eq:
       retval = ">>=";
       break;
 
@@ -308,16 +312,20 @@ octave_value::assign_op_as_string (assig
     case op_el_div_eq:
       retval = "./=";
       break;
 
     case op_el_ldiv_eq:
       retval = ".\\=";
       break;
 
+    case op_el_pow_eq:
+      retval = ".^=";
+      break;
+
     case op_el_and_eq:
       retval = "&=";
       break;
 
     case op_el_or_eq:
       retval = "|=";
       break;
 
@@ -1449,16 +1457,20 @@ octave_value::op_eq_to_binary_op (assign
     case op_div_eq:
       binop = op_div;
       break;
 
     case op_ldiv_eq:
       binop = op_ldiv;
       break;
 
+    case op_pow_eq:
+      binop = op_pow;
+      break;
+
     case op_lshift_eq:
       binop = op_lshift;
       break;
 
     case op_rshift_eq:
       binop = op_rshift;
       break;
 
@@ -1469,16 +1481,20 @@ octave_value::op_eq_to_binary_op (assign
     case op_el_div_eq:
       binop = op_el_div;
       break;
 
     case op_el_ldiv_eq:
       binop = op_el_ldiv;
       break;
 
+    case op_el_pow_eq:
+      binop = op_el_pow;
+      break;
+
     case op_el_and_eq:
       binop = op_el_and;
       break;
 
     case op_el_or_eq:
       binop = op_el_or;
       break;
 
diff --git a/src/ov.h b/src/ov.h
--- a/src/ov.h
+++ b/src/ov.h
@@ -127,21 +127,23 @@ public:
   enum assign_op
   {
     op_asn_eq,
     op_add_eq,
     op_sub_eq,
     op_mul_eq,
     op_div_eq,
     op_ldiv_eq,
+    op_pow_eq,
     op_lshift_eq,
     op_rshift_eq,
     op_el_mul_eq,
     op_el_div_eq,
     op_el_ldiv_eq,
+    op_el_pow_eq,
     op_el_and_eq,
     op_el_or_eq,
     num_assign_ops,
     unknown_assign_op
   };
 
   static std::string unary_op_as_string (unary_op);
 
diff --git a/src/parse.y b/src/parse.y
--- a/src/parse.y
+++ b/src/parse.y
@@ -368,18 +368,18 @@ set_stmt_print_flag (tree_statement_list
   subplot_using *subplot_using_type;
   subplot_style *subplot_style_type;
   subplot_axes *subplot_axes_type;
   octave_user_function *octave_user_function_type;
 }
 
 // Tokens with line and column information.
 %token <tok_val> '=' ':' '-' '+' '*' '/'
-%token <tok_val> ADD_EQ SUB_EQ MUL_EQ DIV_EQ LEFTDIV_EQ 
-%token <tok_val> EMUL_EQ EDIV_EQ ELEFTDIV_EQ AND_EQ OR_EQ
+%token <tok_val> ADD_EQ SUB_EQ MUL_EQ DIV_EQ LEFTDIV_EQ POW_EQ
+%token <tok_val> EMUL_EQ EDIV_EQ ELEFTDIV_EQ EPOW_EQ AND_EQ OR_EQ
 %token <tok_val> LSHIFT_EQ RSHIFT_EQ LSHIFT RSHIFT
 %token <tok_val> EXPR_AND_AND EXPR_OR_OR
 %token <tok_val> EXPR_AND EXPR_OR EXPR_NOT
 %token <tok_val> EXPR_LT EXPR_LE EXPR_EQ EXPR_NE EXPR_GE EXPR_GT
 %token <tok_val> LEFTDIV EMUL EDIV ELEFTDIV EPLUS EMINUS
 %token <tok_val> QUOTE TRANSPOSE
 %token <tok_val> PLUS_PLUS MINUS_MINUS POW EPOW
 %token <tok_val> NUM IMAG_NUM
@@ -439,17 +439,17 @@ set_stmt_print_flag (tree_statement_list
 %type <plot_limits_type> ranges
 %type <plot_range_type> ranges1 
 %type <subplot_using_type> using using1 
 %type <subplot_style_type> style
 %type <subplot_axes_type> axes
 
 // Precedence and associativity.
 %left ';' ',' '\n'
-%right '=' ADD_EQ SUB_EQ MUL_EQ DIV_EQ LEFTDIV_EQ EMUL_EQ EDIV_EQ ELEFTDIV_EQ OR_EQ AND_EQ LSHIFT_EQ RSHIFT_EQ
+%right '=' ADD_EQ SUB_EQ MUL_EQ DIV_EQ LEFTDIV_EQ POW_EQ EMUL_EQ EDIV_EQ ELEFTDIV_EQ EPOW_EQ OR_EQ AND_EQ LSHIFT_EQ RSHIFT_EQ
 %left EXPR_AND_AND EXPR_OR_OR
 %left EXPR_AND EXPR_OR
 %left EXPR_LT EXPR_LE EXPR_EQ EXPR_NE EXPR_GE EXPR_GT
 %left LSHIFT RSHIFT
 %left ':'
 %left '-' '+' EPLUS EMINUS
 %left '*' '/' LEFTDIV EMUL EDIV ELEFTDIV
 %left QUOTE TRANSPOSE
@@ -818,26 +818,30 @@ assign_expr	: assign_lhs '=' expression
 		| assign_lhs SUB_EQ expression
 		  { $$ = make_assign_op (SUB_EQ, $1, $2, $3); }
 		| assign_lhs MUL_EQ expression
 		  { $$ = make_assign_op (MUL_EQ, $1, $2, $3); }
 		| assign_lhs DIV_EQ expression
 		  { $$ = make_assign_op (DIV_EQ, $1, $2, $3); }
 		| assign_lhs LEFTDIV_EQ expression
 		  { $$ = make_assign_op (LEFTDIV_EQ, $1, $2, $3); }
+		| assign_lhs POW_EQ expression
+		  { $$ = make_assign_op (POW_EQ, $1, $2, $3); }
 		| assign_lhs LSHIFT_EQ expression
 		  { $$ = make_assign_op (LSHIFT_EQ, $1, $2, $3); }
 		| assign_lhs RSHIFT_EQ expression
 		  { $$ = make_assign_op (RSHIFT_EQ, $1, $2, $3); }
 		| assign_lhs EMUL_EQ expression
 		  { $$ = make_assign_op (EMUL_EQ, $1, $2, $3); }
 		| assign_lhs EDIV_EQ expression
 		  { $$ = make_assign_op (EDIV_EQ, $1, $2, $3); }
 		| assign_lhs ELEFTDIV_EQ expression
 		  { $$ = make_assign_op (ELEFTDIV_EQ, $1, $2, $3); }
+		| assign_lhs EPOW_EQ expression
+		  { $$ = make_assign_op (EPOW_EQ, $1, $2, $3); }
 		| assign_lhs AND_EQ expression
 		  { $$ = make_assign_op (AND_EQ, $1, $2, $3); }
 		| assign_lhs OR_EQ expression
 		  { $$ = make_assign_op (OR_EQ, $1, $2, $3); }
 		;
 
 word_list_cmd	: identifier word_list
 		  { $$ = make_index_expression ($1, $2, '('); }
@@ -2379,16 +2383,20 @@ make_assign_op (int op, tree_argument_li
     case DIV_EQ:
       t = octave_value::op_div_eq;
       break;
 
     case LEFTDIV_EQ:
       t = octave_value::op_ldiv_eq;
       break;
 
+    case POW_EQ:
+      t = octave_value::op_pow_eq;
+      break;
+
     case LSHIFT_EQ:
       t = octave_value::op_lshift_eq;
       break;
 
     case RSHIFT_EQ:
       t = octave_value::op_rshift_eq;
       break;
 
@@ -2399,16 +2407,20 @@ make_assign_op (int op, tree_argument_li
     case EDIV_EQ:
       t = octave_value::op_el_div_eq;
       break;
 
     case ELEFTDIV_EQ:
       t = octave_value::op_el_ldiv_eq;
       break;
 
+    case EPOW_EQ:
+      t = octave_value::op_el_pow_eq;
+      break;
+
     case AND_EQ:
       t = octave_value::op_el_and_eq;
       break;
 
     case OR_EQ:
       t = octave_value::op_el_or_eq;
       break;
 
