# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1254474902 -7200
#      Fri Oct 02 11:15:02 2009 +0200
# Node ID 5e433877634fe256469ee05c7db0d8956f20eb4b
# Parent  e793865ede6310232e3ba230eef97b962eb16dc4
don't store MatrixType with scalars

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,14 @@
+2009-10-02  Jaroslav Hajek  <highegg@gmail.com>
+
+	* ov-base-scalar.h (octave_base_scalar::matrix_type): Always
+	return MatrixType::Diagonal.
+	(octave_base_scalar::typ): Remove.
+
 2009-10-02  Jaroslav Hajek  <highegg@gmail.com>
 
 	* ov.h: Define also diag matrix extractors.
 	(octave_type_traits, octave_array_type_traits): Remove.
 	(octave_value::builtin_type): New method.
 	* oct-stream.cc (do_read): Update.
 	* data.cc (identity_matrix): Update.
 	* ov-base.h (builtin_type_t): New enum.
diff --git a/src/ov-base-scalar.h b/src/ov-base-scalar.h
--- a/src/ov-base-scalar.h
+++ b/src/ov-base-scalar.h
@@ -42,23 +42,23 @@ along with Octave; see the file COPYING.
 
 template <class ST>
 class
 octave_base_scalar : public octave_base_value
 {
 public:
 
   octave_base_scalar (void)
-    : octave_base_value (), typ (MatrixType ()) { }
+    : octave_base_value () { }
 
-  octave_base_scalar (const ST& s, const MatrixType& t = MatrixType ())
-    : octave_base_value (), scalar (s), typ (t) { }
+  octave_base_scalar (const ST& s)
+    : octave_base_value (), scalar (s) { }
 
   octave_base_scalar (const octave_base_scalar& s)
-    : octave_base_value (), scalar (s.scalar), typ (s.typ) { }
+    : octave_base_value (), scalar (s.scalar) { }
 
   ~octave_base_scalar (void) { }
 
   octave_base_value *clone (void) const { return new octave_base_scalar (*this); }
   octave_base_value *empty_clone (void) const { return new octave_base_scalar (); }
 
   octave_value squeeze (void) const { return scalar; }
 
@@ -112,19 +112,19 @@ public:
     { return mode ? mode : ASCENDING; }
 
   Array<octave_idx_type> sort_rows_idx (sortmode) const
     { return Array<octave_idx_type> (1, 0); }
 
   sortmode is_sorted_rows (sortmode mode = UNSORTED) const
     { return mode ? mode : ASCENDING; }
 
-  MatrixType matrix_type (void) const { return typ; }
-  MatrixType matrix_type (const MatrixType& _typ) const
-    { MatrixType ret = typ; typ = _typ; return ret; }
+  MatrixType matrix_type (void) const { return MatrixType::Diagonal; }
+  MatrixType matrix_type (const MatrixType&) const
+    { return matrix_type (); }
 
   bool is_scalar_type (void) const { return true; }
 
   bool is_numeric_type (void) const { return true; }
 
   bool is_true (void) const;
 
   void print (std::ostream& os, bool pr_as_read_syntax = false) const;
@@ -136,18 +136,16 @@ public:
   // Unsafe.  This function exists to support the MEX interface.
   // You should not use it anywhere else.
   void *mex_get_data (void) const { return const_cast<ST *> (&scalar); }
 
 protected:
 
   // The value of this scalar.
   ST scalar;
-
-  mutable MatrixType typ;
 };
 
 #endif
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
