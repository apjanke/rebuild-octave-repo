# HG changeset patch
# User Rik <rik@octave.org>
# Date 1420069926 28800
#      Wed Dec 31 15:52:06 2014 -0800
# Node ID 05eb8eaf63d35826be6638a549c6a349b90c1af5
# Parent  e5a78897be9ef8b9d0fb229b9e6472d672f9d0a8
doc: Add puts as a safe alternative to display a string with bare '%' chars (bug #42345).

* io.txi: Add puts as a safe alternative to display a string with bare '%'
chars.

diff --git a/doc/interpreter/io.txi b/doc/interpreter/io.txi
--- a/doc/interpreter/io.txi
+++ b/doc/interpreter/io.txi
@@ -616,22 +616,25 @@ Print a literal @samp{%} character.  @xr
 @end table
 
 If the syntax of a conversion specification is invalid, unpredictable
 things will happen, so don't do this.  In particular, @sc{matlab} allows
 a bare percentage sign @samp{%} with no subsequent conversion character.
 Octave will emit an error and stop if it sees such code.  When the string
 variable to be processed cannot be guaranteed to be free of potential format
 codes it is better to use the two argument form of any of the @code{printf}
-functions and set the format string to @code{%s}.
+functions and set the format string to @code{%s}.  Alternatively, for code
+which is not required to be backwards-compatible with @sc{matlab} the
+Octave function @code{puts} or @code{disp} can be used.
 
 @example
 @group
 printf (strvar);        # Unsafe if strvar contains format codes
 printf ("%s", strvar);  # Safe
+puts (strvar);          # Safe
 @end group
 @end example
 
 If there aren't enough function arguments provided to supply values for all
 the conversion specifications in the template string, or if the arguments are
 not of the correct types, the results are unpredictable.  If you supply more
 arguments than conversion specifications, the extra argument values are
 simply ignored; this is sometimes useful.
