# HG changeset patch
# User jwe
# Date 1116865196 0
#      Mon May 23 16:19:56 2005 +0000
# Node ID 33adb987c0330c24e57f9abf958329fc07c52cc3
# Parent  17e40a1331b01d80cb566cac393fb6ba5bce23b2
[project @ 2005-05-23 16:19:56 by jwe]

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,10 +1,23 @@
+2005-05-23  John W. Eaton  <jwe@octave.org>
+
+	* debug.cc (Fdbwhere, get_user_function): Look at
+	curr_caller_function, not curr_function, since function is now set
+	inside mapper, built-in (and thereford dld) functions too.
+
 2005-05-21  John W. Eaton  <jwe@octave.org>
 
+	* pr-output.cc, pr-output.h (Vprint_empty_dimensions): Now extern.
+	* ov-cell.cc (octave_cell::print_raw): Conditionally print
+	dimensions of empty 2-d cell arrays.
+
+	* DLD-FUNCTIONS/sort.cc (mx_sort, mx_sort_indexed): Return empty
+	values for empty args.
+
 	* lex.l (handle_string): If single-quote string, \ and . have no
 	special meaning.
 
 2005-05-18  John W. Eaton  <jwe@octave.org>
 
 	* pt-colon.cc (tree_colon_expression::make_range): Don't require
 	scalars values as range components.
 
diff --git a/src/DLD-FUNCTIONS/sort.cc b/src/DLD-FUNCTIONS/sort.cc
--- a/src/DLD-FUNCTIONS/sort.cc
+++ b/src/DLD-FUNCTIONS/sort.cc
@@ -82,17 +82,17 @@ descending_compare (vec_index<T> *a, vec
 
 template <class T>
 static octave_value
 mx_sort (ArrayN<T> &m, int dim, sortmode mode = UNDEFINED)
 {
   octave_value retval;
 
   if (m.length () < 1)
-    return retval;
+    return ArrayN<T> ();
 
   dim_vector dv = m.dims ();
   octave_idx_type ns = dv(dim);
   octave_idx_type iter = dv.numel () / ns;
   octave_idx_type stride = 1;
   for (int i = 0; i < dim; i++)
     stride *= dv(i);
 
@@ -143,17 +143,21 @@ mx_sort (ArrayN<T> &m, int dim, sortmode
 
 template <class T>
 static octave_value_list
 mx_sort_indexed (ArrayN<T> &m, int dim, sortmode mode = UNDEFINED)
 {
   octave_value_list retval;
 
   if (m.length () < 1)
-    return retval;
+    {
+      retval(1) = NDArray ();
+      retval(0) = ArrayN<T> ();
+      return retval;
+    }
 
   dim_vector dv = m.dims ();
   octave_idx_type ns = dv(dim);
   octave_idx_type iter = dv.numel () / ns;
   octave_idx_type stride = 1;
   for (int i = 0; i < dim; i++)
     stride *= dv(i);
 
@@ -291,17 +295,17 @@ template class octave_sort<vec_index<uns
 
 template <>
 octave_value
 mx_sort (ArrayN<double> &m, int dim, sortmode mode)
 {
   octave_value retval;
 
   if (m.length () < 1)
-    return retval;
+    return ArrayN<double> ();
 
   dim_vector dv = m.dims ();
   octave_idx_type ns = dv(dim);
   octave_idx_type iter = dv.numel () / ns;
   octave_idx_type stride = 1;
   for (int i = 0; i < dim; i++)
     stride *= dv(i);
 
@@ -428,17 +432,21 @@ mx_sort (ArrayN<double> &m, int dim, sor
 // Should other overloaded functions have their static keywords removed?
 template <>
 octave_value_list
 mx_sort_indexed (ArrayN<double> &m, int dim, sortmode mode)
 {
   octave_value_list retval;
 
   if (m.length () < 1)
-    return retval;
+    {
+      retval(1) = ArrayN<double> ();
+      retval(0) = NDArray ();
+      return retval;
+    }
 
   dim_vector dv = m.dims ();
   octave_idx_type ns = dv(dim);
   octave_idx_type iter = dv.numel () / ns;
   octave_idx_type stride = 1;
   for (int i = 0; i < dim; i++)
     stride *= dv(i);
 
diff --git a/src/debug.cc b/src/debug.cc
--- a/src/debug.cc
+++ b/src/debug.cc
@@ -69,18 +69,18 @@ get_user_function (std::string str = "")
 	
 	  if (ptr && ptr->is_user_function ())
 	    {
 	      octave_value tmp = ptr->def ();
 	      dbg_fcn = dynamic_cast<octave_user_function *> (tmp.function_value ());
 	    }
 	}
     }
-  else if (curr_function && curr_function->is_user_function ())
-    dbg_fcn = dynamic_cast<octave_user_function *> (curr_function);
+  else if (curr_caller_function && curr_caller_function->is_user_function ())
+    dbg_fcn = dynamic_cast<octave_user_function *> (curr_caller_function);
 
   return dbg_fcn;
 }
 
 
 DEFCMD (dbstop, args, ,
   "-*- texinfo -*-\n\
 @deftypefn {Loadable Function} {rline =} dbstop (func, line)\n\
@@ -280,18 +280,18 @@ DEFCMD (dbwhere, , ,
 Show where we are in the code\n\
 @end deftypefn\n\
 @seealso{dbclear, dbstatus, dbstop}")
 {
   octave_value retval;
 
   octave_user_function *dbg_fcn = 0;
 
-  if (curr_function && curr_function->is_user_function ())
-    dbg_fcn = dynamic_cast<octave_user_function *> (curr_function);
+  if (curr_caller_function && curr_caller_function->is_user_function ())
+    dbg_fcn = dynamic_cast<octave_user_function *> (curr_caller_function);
 
   if (dbg_fcn)
     {
       std::string name = dbg_fcn->name ();
 
       octave_stdout << name << ":";
 
       const tree *dbg_stmt = tree::break_statement;
diff --git a/src/ov-cell.cc b/src/ov-cell.cc
--- a/src/ov-cell.cc
+++ b/src/ov-cell.cc
@@ -23,33 +23,35 @@ 02110-1301, USA.
 
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
 #include <iostream>
 #include <vector>
 
+#include "Array-util.h"
+#include "byte-swap.h"
 #include "lo-sstream.h"
 #include "lo-utils.h"
 #include "quit.h"
 
 #include "defun.h"
 #include "error.h"
 #include "ov-cell.h"
 #include "oct-obj.h"
 #include "unwind-prot.h"
 #include "utils.h"
 #include "ov-base-mat.h"
 #include "ov-base-mat.cc"
 #include "ov-re-mat.h"
 #include "ov-scalar.h"
-#include "Array-util.h"
+#include "pr-output.h"
+#include "ov-scalar.h"
 
-#include "byte-swap.h"
 #include "ls-oct-ascii.h"
 #include "ls-oct-binary.h"
 #include "ls-hdf5.h"
 #include "ls-utils.h"
 
 template class octave_base_matrix<Cell>;
 
 DEFINE_OCTAVE_ALLOCATOR (octave_cell);
@@ -397,17 +399,17 @@ octave_cell::print_raw (std::ostream& os
 
 	  indent (os);
 	  os << "}";
 	  newline (os);
 	}
       else
 	{
 	  os << "{}";
-	  if (nr > 0 || nc > 0)
+	  if (Vprint_empty_dimensions)
 	    os << "(" << nr << "x" << nc << ")";
 	  os << "\n";
 	}
     }
   else
     {
       indent (os);
       dim_vector dv = matrix.dims ();
diff --git a/src/pr-output.cc b/src/pr-output.cc
--- a/src/pr-output.cc
+++ b/src/pr-output.cc
@@ -65,19 +65,19 @@ static bool Vfixed_point_format;
 // The maximum field width for a number printed by the default output
 // routines.
 static int Voutput_max_field_width;
 
 // The precision of the numbers printed by the default output
 // routines.
 static int Voutput_precision;
 
-// TRUE means that the dimensions of empty matrices should be printed
+// TRUE means that the dimensions of empty objects should be printed
 // like this: x = [](2x0).
-static bool Vprint_empty_dimensions;
+bool Vprint_empty_dimensions;
 
 // TRUE means that the rows of big matrices should be split into
 // smaller slices that fit on the screen.
 static bool Vsplit_long_rows;
 
 // TRUE means don't do any fancy formatting.
 static bool free_format = false;
 
diff --git a/src/pr-output.h b/src/pr-output.h
--- a/src/pr-output.h
+++ b/src/pr-output.h
@@ -120,15 +120,19 @@ octave_print_internal (std::ostream& os,
 		       bool pr_as_read_syntax = false);
 
 extern void
 octave_print_internal (std::ostream& os, const Cell& cell,
 		       bool pr_as_read_syntax = false,
 		       int extra_indent = 0,
 		       bool pr_as_string = false);
 
+// TRUE means that the dimensions of empty objects should be printed
+// like this: x = [](2x0).
+extern bool Vprint_empty_dimensions;
+
 #endif
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
