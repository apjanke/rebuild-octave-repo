# HG changeset patch
# User jwe
# Date 837808092 0
#      Fri Jul 19 20:28:12 1996 +0000
# Node ID 18953de8c30884f959b90b64fa714d00e039139a
# Parent  cdf7ba6b3c9c718637143b74f78f6e754acfbff1
[project @ 1996-07-19 20:28:11 by jwe]

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,13 @@
+Fri Jul 19 15:24:36 1996  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* pt-const.cc: When creating octave_value_reps from ComplexMatrix
+	values, check to see if all the elements are actually real.
+
 Tue Jul 16 10:53:42 1996  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* input.cc (decode_prompt_string): Swap meanings of \h anbd \H.
 
 Mon Jul 15 16:01:51 1996  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* toplev.cc (run_command_and_return_output): Renamed from do_system.
 	(Fsystem): Make `system ("emacs")' work as one would expect.
diff --git a/src/pt-const.cc b/src/pt-const.cc
--- a/src/pt-const.cc
+++ b/src/pt-const.cc
@@ -149,30 +149,68 @@ increment_struct_indent (void)
 }
 
 static void
 decrement_struct_indent (void)
 {
   struct_indent -= 2;
 }
 
+// XXX FIXME XXX -- these should be member functions.
+
 static bool
 any_element_is_complex (const ComplexMatrix& a)
 {
   int nr = a.rows ();
   int nc = a.columns ();
 
   for (int j = 0; j < nc; j++)
     for (int i = 0; i < nr; i++)
       if (imag (a (i, j)) != 0.0)
 	return true;
 
   return false;
 }
 
+static bool
+any_element_is_complex (const ComplexDiagMatrix& d)
+{
+  int len = d.length ();
+
+  for (int i = 0; i < len; i++)
+    if (imag (d (i, i)) != 0.0)
+      return true;
+
+  return false;
+}
+
+static bool
+any_element_is_complex (const ComplexRowVector& v)
+{
+  int len = v.length ();
+
+  for (int i = 0; i < len; i++)
+    if (imag (v (i)) != 0.0)
+      return true;
+
+  return false;
+}
+
+static bool
+any_element_is_complex (const ComplexColumnVector& v)
+{
+  int len = v.length ();
+
+  for (int i = 0; i < len; i++)
+    if (imag (v (i)) != 0.0)
+      return true;
+
+  return false;
+}
+
 // The following three variables could be made static members of the
 // octave_value class.
 
 // Pointer to the blocks of memory we manage.
 static octave_value *tc_newlist = 0;
 
 // Multiplier for allocating new blocks.
 static const int tc_newlist_grow_size = 128;
@@ -476,16 +514,20 @@ OCT_VAL_REP::octave_value_rep (void)
 }
 
 OCT_VAL_REP::octave_value_rep (double d)
 {
   scalar = d;
   type_tag = scalar_constant;
 }
 
+// XXX FIXME XXX -- perhaps these constructors should just do the
+// obvious thing and then call maybe_mutate() instead of duplicating
+// most of that logic several times here...
+
 OCT_VAL_REP::octave_value_rep (const Matrix& m)
 {
   if (m.rows () == 1 && m.columns () == 1)
     {
       scalar = m (0, 0);
       type_tag = scalar_constant;
     }
   else
@@ -601,16 +643,21 @@ OCT_VAL_REP::octave_value_rep (const Com
 	  type_tag = scalar_constant;
 	}
       else
 	{
 	  complex_scalar = new Complex (c);
 	  type_tag = complex_scalar_constant;
 	}
     }
+  else if (! any_element_is_complex (*complex_matrix))
+    {
+      matrix = new Matrix (::real (m));
+      type_tag = matrix_constant;
+    }
   else
     {
       complex_matrix = new ComplexMatrix (m);
       type_tag = complex_matrix_constant;
     }
 }
 
 OCT_VAL_REP::octave_value_rep (const ComplexDiagMatrix& d)
@@ -625,16 +672,21 @@ OCT_VAL_REP::octave_value_rep (const Com
 	  type_tag = scalar_constant;
 	}
       else
 	{
 	  complex_scalar = new Complex (c);
 	  type_tag = complex_scalar_constant;
 	}
     }
+  else if (! any_element_is_complex (d))
+    {
+      matrix = new Matrix (::real (d));
+      type_tag = matrix_constant;
+    }
   else
     {
       complex_matrix = new ComplexMatrix (d);
       type_tag = complex_matrix_constant;
     }
 }
 
 OCT_VAL_REP::octave_value_rep (const ComplexRowVector& v,
@@ -659,29 +711,51 @@ OCT_VAL_REP::octave_value_rep (const Com
   else
     {
       int pcv = (prefer_column_vector < 0)
 	? Vprefer_column_vectors
 	  : prefer_column_vector;
 
       if (pcv)
 	{
-	  ComplexMatrix m (len, 1);
-	  for (int i = 0; i < len; i++)
-	    m (i, 0) = v (i);
-	  complex_matrix = new ComplexMatrix (m);
-	  type_tag = complex_matrix_constant;
+	  if (! any_element_is_complex (v))
+	    {
+	      Matrix m (len, 1);
+	      for (int i = 0; i < len; i++)
+		m (i, 0) = ::real (v (i));
+	      matrix = new Matrix (m);
+	      type_tag = matrix_constant;
+	    }
+	  else
+	    {
+	      ComplexMatrix m (len, 1);
+	      for (int i = 0; i < len; i++)
+		m (i, 0) = v (i);
+	      complex_matrix = new ComplexMatrix (m);
+	      type_tag = complex_matrix_constant;
+	    }
 	}
       else
 	{
-	  ComplexMatrix m (1, len);
-	  for (int i = 0; i < len; i++)
-	    m (0, i) = v (i);
-	  complex_matrix = new ComplexMatrix (m);
-	  type_tag = complex_matrix_constant;
+	  if (! any_element_is_complex (v))
+	    {
+	      Matrix m (len, 1);
+	      for (int i = 0; i < len; i++)
+		m (0, i) = ::real (v (i));
+	      matrix = new Matrix (m);
+	      type_tag = matrix_constant;
+	    }
+	  else
+	    {
+	      ComplexMatrix m (1, len);
+	      for (int i = 0; i < len; i++)
+		m (0, i) = v (i);
+	      complex_matrix = new ComplexMatrix (m);
+	      type_tag = complex_matrix_constant;
+	    }
 	}
     }
 }
 
 OCT_VAL_REP::octave_value_rep (const ComplexColumnVector& v, int
 			   prefer_column_vector)
 {
   int len = v.capacity ();
@@ -703,29 +777,51 @@ OCT_VAL_REP::octave_value_rep (const Com
   else
     {
       int pcv = (prefer_column_vector < 0)
 	? Vprefer_column_vectors
 	  : prefer_column_vector;
 
       if (pcv)
 	{
-	  ComplexMatrix m (len, 1);
-	  for (int i = 0; i < len; i++)
-	    m (i, 0) = v (i);
-	  complex_matrix = new ComplexMatrix (m);
-	  type_tag = complex_matrix_constant;
+	  if (! any_element_is_complex (v))
+	    {
+	      Matrix m (len, 1);
+	      for (int i = 0; i < len; i++)
+		m (i, 0) = ::real (v (i));
+	      matrix = new Matrix (m);
+	      type_tag = matrix_constant;
+	    }
+	  else
+	    {
+	      ComplexMatrix m (len, 1);
+	      for (int i = 0; i < len; i++)
+		m (i, 0) = v (i);
+	      complex_matrix = new ComplexMatrix (m);
+	      type_tag = complex_matrix_constant;
+	    }
 	}
       else
 	{
-	  ComplexMatrix m (1, len);
-	  for (int i = 0; i < len; i++)
-	    m (0, i) = v (i);
-	  complex_matrix = new ComplexMatrix (m);
-	  type_tag = complex_matrix_constant;
+	  if (! any_element_is_complex (v))
+	    {
+	      Matrix m (len, 1);
+	      for (int i = 0; i < len; i++)
+		m (0, i) = ::real (v (i));
+	      matrix = new Matrix (m);
+	      type_tag = matrix_constant;
+	    }
+	  else
+	    {
+	      ComplexMatrix m (1, len);
+	      for (int i = 0; i < len; i++)
+		m (0, i) = v (i);
+	      complex_matrix = new ComplexMatrix (m);
+	      type_tag = complex_matrix_constant;
+	    }
 	}
     }
 }
 
 OCT_VAL_REP::octave_value_rep (const char *s)
 {
   char_matrix = new charMatrix (s);
   type_tag = char_matrix_constant_str;
