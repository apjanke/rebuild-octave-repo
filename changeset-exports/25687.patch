# HG changeset patch
# User Guillaume Flandin <guillaume.offline@gmail.com>
# Date 1532641476 25200
#      Thu Jul 26 14:44:36 2018 -0700
# Node ID b6f3e8ce681567d988d089e566593a67c67d3615
# Parent  af0b81f2ffe6eda2f1d2644dd169323b885db87e
camlight.m: Allow an axes handle as first input (bug #54372).

* camlight.m: Add additional calling form to documentation.
Check "type" of graphics handle first argument to distinguish
between a "light" object and an "axes" opbject.  If variable
hax has not been initialized, use gca.  Change calls to get() and
light() to use axes handle hax.  Add BIST test for new behavior.
Modify existing BIST test to pass with new behavior.

diff --git a/scripts/plot/draw/camlight.m b/scripts/plot/draw/camlight.m
--- a/scripts/plot/draw/camlight.m
+++ b/scripts/plot/draw/camlight.m
@@ -19,16 +19,17 @@
 ## -*- texinfo -*-
 ## @deftypefn  {} {} camlight {}
 ## @deftypefnx {} {} camlight right
 ## @deftypefnx {} {} camlight left
 ## @deftypefnx {} {} camlight headlight
 ## @deftypefnx {} {} camlight (@var{az}, @var{el})
 ## @deftypefnx {} {} camlight (@dots{}, @var{style})
 ## @deftypefnx {} {} camlight (@var{hl}, @dots{})
+## @deftypefnx {} {} camlight (@var{hax}, @dots{})
 ## @deftypefnx {} {@var{h} =} camlight (@dots{})
 ## Add a light object to a figure using a simple interface.
 ##
 ## When called with no arguments, a light object is added to the current plot
 ## and is placed slightly above and to the right of the camera's current
 ## position: this is equivalent to @code{camlight right}.  The commands
 ## @code{camlight left} and @code{camlight headlight} behave similarly with
 ## the placement being either left of the camera position or centered on the
@@ -40,16 +41,19 @@
 ##
 ## The optional string @var{style} specifies whether the light is a local point
 ## source (@qcode{"local"}, the default) or placed at infinite distance
 ## (@qcode{"infinite"}).
 ##
 ## If the first argument @var{hl} is a handle to a light object, then act on
 ## this light object rather than creating a new object.
 ##
+## If the first argument @var{hax} is an axes handle, then create a new light
+## object in this axes, rather than the current axes returned by @code{gca}.
+##
 ## The optional return value @var{h} is a graphics handle to the light object.
 ## This can be used to move or further change properties of the light object.
 ##
 ## Examples:
 ##
 ## Add a light object to a plot
 ##
 ## @example
@@ -95,24 +99,31 @@ function h = camlight (varargin)
     print_usage ();
   endif
 
   ## Note: There is a very small chance of a collision between a numeric double
   ## specifying azimuth and a light handle object (also a numeric double).
   ## We don't worry about that.
   if (numel (varargin) > 0 && numel (varargin{1}) == 1
       && ishghandle (varargin{1}))
-    hl = varargin{1};
-    if (! isgraphics (hl, "light"))
-      error ("camlight: HL must be a handle to a light object");
+    typ = get (varargin{1}, "type");
+    if (strcmp (typ, "light"))
+      hl  = varargin{1};
+      hax = get (hl, "parent");
+    elseif (strcmp (typ, "axes"))
+      hax = varargin{1};
+      hl  = [];
+    else
+      error ("camlight: HL must be a handle to an axes or light object");
     endif
     varargin(1) = [];
     nargin = nargin - 1;
   else
-    hl = [];
+    hl  = [];
+    hax = [];
   endif
 
   style = "local";
   where = "";
 
   if (nargin == 0)
     where = "right";
 
@@ -163,35 +174,38 @@ function h = camlight (varargin)
         el = 0;
 
       otherwise
         error ("camlight: invalid light position '%s'", where);
 
     endswitch
   endif
 
-  cam_up = get (gca (), "cameraupvector");
-  cam_pos = get (gca (), "cameraposition");
-  cam_target = get (gca (), "cameratarget");
+  if (isempty (hax))
+    hax = gca ();
+  endif
+  cam_up = get (hax, "cameraupvector");
+  cam_pos = get (hax, "cameraposition");
+  cam_target = get (hax, "cameratarget");
 
   view_ax = cam_target - cam_pos;
   view_ax /= norm (view_ax);
   ## Orthogonalize the camup vector
   yaw_ax = cam_up - view_ax*dot (cam_up, view_ax);
   pitch_ax = cross (cam_up, view_ax);
 
   ## First pitch up by 'el', then yaw by 'az'
   ## (order matters, this matches experiments with Matlab).
   pos = num2cell (cam_pos);
   [pos{:}] = __rotate_around_axis__ (pos{:}, el, pitch_ax, cam_target);
   [pos{:}] = __rotate_around_axis__ (pos{:}, az, yaw_ax, cam_target);
   pos = [pos{:}];
 
   if (isempty (hl))
-    hl = light ("Position", pos, "style", style);
+    hl = light (hax, "Position", pos, "style", style);
   else
     set (hl, "Position", pos, "style", style);
   endif
 
   if (nargout > 0)
     h = hl;
   endif
 
@@ -291,15 +305,29 @@ endfunction
 %!   h2 = camlight (h, "local");
 %!   p2 = get (h2, "position");
 %!   assert (h, h2);
 %!   assert (p1, p2);
 %! unwind_protect_cleanup
 %!   close (hf);
 %! end_unwind_protect
 
+## Test an axes handle as first argument
+%!test
+%! hf = figure ("visible", "off");
+%! unwind_protect
+%!   hax1 = subplot (1, 2, 1);
+%!   hax2 = subplot (1, 2, 2);
+%!   hl1  = camlight ();
+%!   hl2  = camlight (hax1);
+%!   assert (get (hl1, "Parent"), hax2);
+%!   assert (get (hl2, "Parent"), hax1);
+%! unwind_protect_cleanup
+%!   close (hf);
+%! end_unwind_protect
+
 ## Test input validation
 %!error camlight (1,2,3,4,5)
-%!error <HL must be a handle to a light object> camlight (0, "left")
+%!error <HL must be a handle to an axes or light object> camlight (0, "left")
 %!error <Invalid call> camlight ({1}, {2})
 %!error <Invalid call> camlight (rand (), 1, 2, 3)
 %!error <invalid light position 'foobar'> camlight ("foobar")
 %!error <invalid light position 'foobar'> camlight ("foobar", "local")
