# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1223305674 14400
#      Mon Oct 06 11:07:54 2008 -0400
# Node ID 1ebcb9872ced9eb5d5508a75a981bfeb59e36681
# Parent  da48d2ca096fe014bf42bd08b9674e1d80fd2b61
fix sparse-matrix bool/cmp op instantiation problem

diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,12 +1,19 @@
 2008-10-06  Jaroslav Hajek  <highegg@gmail.com>
 
 	* oct-lookup.h: Mark functions inline. Add missing std:: qualifiers.
 
+2008-10-06  John W. Eaton  <jwe@octave.org>
+
+	* Sparse.h (Sparse<T>::elt_type): New typedef.
+	* Sparse-op-defs.h (SPARSE_SMSM_BOOL_OP, SPARSE_MSM_CMP_OP):
+	Use it to call sparse-matrix/scalar operator instead of attempting
+	to instantiate mixed-type sparse-matrix/scalar operators.
+
 2008-10-03  Jaroslav Hajek  <highegg@gmail.com>
 
 	* Array.h (Array<T>::maybe_delete_elements): Remove rfv argument from
 	declaration.
 	* Array.cc (Array<T>::maybe_delete_elements): Remove all usages of
 	rfv.
 
 2008-10-03  Jaroslav Hajek  <highegg@gmail.com>
diff --git a/liboctave/Sparse-op-defs.h b/liboctave/Sparse-op-defs.h
--- a/liboctave/Sparse-op-defs.h
+++ b/liboctave/Sparse-op-defs.h
@@ -744,25 +744,21 @@ along with Octave; see the file COPYING.
     octave_idx_type m1_nr = m1.rows (); \
     octave_idx_type m1_nc = m1.cols (); \
     \
     octave_idx_type m2_nr = m2.rows (); \
     octave_idx_type m2_nc = m2.cols (); \
     \
     if (m1_nr == 1 && m1_nc == 1) \
       { \
-        extern OCTAVE_API SparseBoolMatrix F (const double&, const M2&); \
-        extern OCTAVE_API SparseBoolMatrix F (const Complex&, const M2&); \
-        r = F (m1.elem(0,0), m2); \
+        r = F (m1.elem(0,0) != M1::elt_type (), m2); \
       } \
     else if (m2_nr == 1 && m2_nc == 1) \
       { \
-        extern OCTAVE_API SparseBoolMatrix F (const M1&, const double&); \
-        extern OCTAVE_API SparseBoolMatrix F (const M1&, const Complex&); \
-        r = F (m1, m2.elem(0,0)); \
+        r = F (m1, m2.elem(0,0) != M2::elt_type ()); \
       } \
     else if (m1_nr == m2_nr && m1_nc == m2_nc) \
       { \
 	if (m1_nr != 0 || m1_nc != 0) \
 	  { \
             if (C1 (Z1) OP C2 (Z2)) \
 	      { \
                 r = SparseBoolMatrix (m1_nr, m1_nc, true); \
@@ -878,25 +874,21 @@ along with Octave; see the file COPYING.
     octave_idx_type m1_nr = m1.rows (); \
     octave_idx_type m1_nc = m1.cols (); \
     \
     octave_idx_type m2_nr = m2.rows (); \
     octave_idx_type m2_nc = m2.cols (); \
     \
     if (m1_nr == 1 && m1_nc == 1) \
       { \
-        extern OCTAVE_API SparseBoolMatrix F (const double&, const M2&); \
-        extern OCTAVE_API SparseBoolMatrix F (const Complex&, const M2&); \
-        r = F (m1.elem(0,0), m2); \
+        r = F (m1.elem(0,0) != M1::elt_type (), m2); \
       } \
     else if (m2_nr == 1 && m2_nc == 1) \
       { \
-        extern OCTAVE_API SparseBoolMatrix F (const M1&, const double&); \
-        extern OCTAVE_API SparseBoolMatrix F (const M1&, const Complex&); \
-        r = F (m1, m2.elem(0,0)); \
+        r = F (m1, m2.elem(0,0) != M2::elt_type ()); \
       } \
     else if (m1_nr == m2_nr && m1_nc == m2_nc) \
       { \
 	if (m1_nr != 0 || m1_nc != 0) \
 	  { \
             r = SparseBoolMatrix (m1_nr, m1_nc, m1.nnz () + m2.nnz ()); \
             r.cidx (0) = static_cast<octave_idx_type> (0); \
             octave_idx_type nel = 0; \
diff --git a/liboctave/Sparse.h b/liboctave/Sparse.h
--- a/liboctave/Sparse.h
+++ b/liboctave/Sparse.h
@@ -41,16 +41,20 @@ class idx_vector;
 
 // Two dimensional sparse class.  Handles the reference counting for
 // all the derived classes.
 
 template <class T>
 class
 Sparse
 {
+public:
+
+  typedef T elt_type;
+
 protected:
   //--------------------------------------------------------------------
   // The real representation of all Sparse arrays.
   //--------------------------------------------------------------------
 
   class OCTAVE_API SparseRep
   {
   public:
