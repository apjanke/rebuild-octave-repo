# HG changeset patch
# User Rik <rik@octave.org>
# Date 1389579527 28800
#      Sun Jan 12 18:18:47 2014 -0800
# Branch gui-release
# Node ID bc139ccccef9498f41d0386601c8caca58dd0d2a
# Parent  545a77c3206e2b7fe12f71acc4cc6b6eb980463e
Don't echo scripts not executed from the cmd line when using 'echo on'(bug #41202)

* toplev.h (octave_call_stack::all_scripts): New function returns TRUE if all
elements an the call stack are scripts.  Add prototype for do_all_scripts().

toplev.cc (octave_call_stack::do_all_scripts): New function to search call
stack scripts only.

* pt-eval.cc (tree_evaluator::visit_statement): Check
octave_call_stack::all_scripts() and don't echo scripts if script is called
from a function.

diff --git a/libinterp/corefcn/toplev.cc b/libinterp/corefcn/toplev.cc
--- a/libinterp/corefcn/toplev.cc
+++ b/libinterp/corefcn/toplev.cc
@@ -258,16 +258,39 @@ octave_call_stack::do_caller_user_code (
               break;
             }
         }
     }
 
   return retval;
 }
 
+bool
+octave_call_stack::do_all_scripts (void) const
+{
+  bool retval = true;
+
+  const_iterator p = cs.end ();
+
+  while (p != cs.begin ())
+    {
+      const call_stack_elt& elt = *(--p);
+
+      octave_function *f = elt.fcn;
+
+      if (f && ! f->is_user_script ())
+        {
+          retval = false;
+          break;
+        }
+    }
+
+  return retval;
+}
+
 // Use static fields for the best efficiency.
 // NOTE: C++0x will allow these two to be merged into one.
 static const char *bt_fieldnames[] = { "file", "name", "line",
                                        "column", "scope", "context", 0
                                      };
 static const octave_fields bt_fields (bt_fieldnames);
 
 octave_map
diff --git a/libinterp/corefcn/toplev.h b/libinterp/corefcn/toplev.h
--- a/libinterp/corefcn/toplev.h
+++ b/libinterp/corefcn/toplev.h
@@ -201,16 +201,22 @@ public:
   }
 
   // First user-defined function on the stack.
   static octave_user_code *caller_user_code (size_t nskip = 0)
   {
     return instance_ok () ? instance->do_caller_user_code (nskip) : 0;
   }
 
+  // Return TRUE if all elements on the call stack are scripts.
+  static bool all_scripts (void)
+  {
+    return instance_ok () ? instance->do_all_scripts () : false;
+  }
+
   static void
   push (octave_function *f,
         symbol_table::scope_id scope = symbol_table::current_scope (),
         symbol_table::context_id context = symbol_table::current_context ())
   {
     if (instance_ok ())
       instance->do_push (f, scope, context);
   }
@@ -347,16 +353,18 @@ private:
         retval = elt.fcn;
       }
 
     return retval;
   }
 
   octave_user_code *do_caller_user_code (size_t nskip) const;
 
+  bool do_all_scripts (void) const;
+
   void do_push (octave_function *f, symbol_table::scope_id scope,
                 symbol_table::context_id context)
   {
     size_t prev_frame = curr_frame;
     curr_frame = cs.size ();
     cs.push_back (call_stack_elt (f, scope, context, prev_frame));
     symbol_table::set_scope_and_context (scope, context);
   }
diff --git a/libinterp/parse-tree/pt-eval.cc b/libinterp/parse-tree/pt-eval.cc
--- a/libinterp/parse-tree/pt-eval.cc
+++ b/libinterp/parse-tree/pt-eval.cc
@@ -700,23 +700,22 @@ tree_evaluator::visit_statement (tree_st
       if (statement_context == function || statement_context == script)
         {
           // Skip commands issued at a debug> prompt to avoid disturbing
           // the state of the program we are debugging.
 
           if (! Vdebugging)
             octave_call_stack::set_location (stmt.line (), stmt.column ());
 
-          // FIXME: we need to distinguish functions from scripts
-          //        to get this right.
           if ((statement_context == script
-               && ((Vecho_executing_commands & ECHO_SCRIPTS)
-                   || (Vecho_executing_commands & ECHO_FUNCTIONS)))
+               && ((Vecho_executing_commands & ECHO_SCRIPTS
+                   && octave_call_stack::all_scripts ())
+                   || Vecho_executing_commands & ECHO_FUNCTIONS))
               || (statement_context == function
-                  && (Vecho_executing_commands & ECHO_FUNCTIONS)))
+                  && Vecho_executing_commands & ECHO_FUNCTIONS))
             stmt.echo_code ();
         }
 
       try
         {
           if (cmd)
             cmd->accept (*this);
           else
