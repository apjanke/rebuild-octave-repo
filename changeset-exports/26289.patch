# HG changeset patch
# User Rik <rik@octave.org>
# Date 1545432356 28800
#      Fri Dec 21 14:45:56 2018 -0800
# Branch stable
# Node ID 0d755097d73f55cdbf35c4940ace7036936b72d1
# Parent  d41d137af059082f368986b9d681a3847a5d6eb7
issymetric.m, ishermitian.m: Don't error on logical matrices (bug #42487).

* ishermitian.m, issymmetric.m: When logical input is detected, convert input
to class single so that norm() can operate correctly.  Add BIST test for
behavior.

diff --git a/scripts/linear-algebra/ishermitian.m b/scripts/linear-algebra/ishermitian.m
--- a/scripts/linear-algebra/ishermitian.m
+++ b/scripts/linear-algebra/ishermitian.m
@@ -79,40 +79,50 @@ function retval = ishermitian (A, skewop
   endif
 
   ## Calculate Hermitian-ness
   if (strcmp (skewopt, "nonskew"))
     if (tol == 0)
       ## check for exact symmetry
       retval = ! any ((A != A')(:));
     else
+      if (islogical (A))
+        ## Hack to allow norm to work.  Choose single to minimize memory.
+        A = single (A);
+      endif
       norm_x = norm (A, Inf);
       retval = norm_x == 0 || norm (A - A', Inf) / norm_x <= tol;
     endif
   else
     ## skew-Hermitian
     if (tol == 0)
       retval = ! any ((A != -A')(:));
     else
+      if (islogical (A))
+        ## Hack to allow norm to work.  Choose single to minimize memory.
+        A = single (A);
+      endif
       norm_x = norm (A, Inf);
       retval = norm_x == 0 || norm (A + A', Inf) / norm_x <= tol;
     endif
   endif
 
 endfunction
 
 
 %!assert (ishermitian (1))
 %!assert (! ishermitian ([1, 2]))
 %!assert (ishermitian ([]))
 %!assert (ishermitian ([1, 2; 2, 1]))
 %!assert (ishermitian ([1, 2.1; 2, 1.1], 0.2))
 %!assert (ishermitian ([1, -2i; 2i, 1]))
 %!assert (ishermitian (speye (100)))
 %!assert (ishermitian (logical (eye (2))))
+%!assert (! ishermitian (logical ([1 1; 0 1])))
+%!assert (ishermitian (logical ([1 1; 0 1]), 0.5))
 %!assert (ishermitian ([0, 2i; 2i, 0], "skew"))
 %!assert (! ishermitian ([0, 2; -2, eps], "skew"))
 %!assert (ishermitian ([0, 2; -2, eps], "skew", eps))
 
 %!assert (! (ishermitian ("test")))
 %!assert (! (ishermitian ("t")))
 %!assert (! (ishermitian (["te"; "et"])))
 %!assert (! ishermitian ({1}))
diff --git a/scripts/linear-algebra/issymmetric.m b/scripts/linear-algebra/issymmetric.m
--- a/scripts/linear-algebra/issymmetric.m
+++ b/scripts/linear-algebra/issymmetric.m
@@ -78,40 +78,50 @@ function retval = issymmetric (A, skewop
   endif
 
   ## Calculate symmetry
   if (strcmp (skewopt, "nonskew"))
     if (tol == 0)
       ## check for exact symmetry
       retval = ! any ((A != A.')(:));
     else
+      if (islogical (A))
+        ## Hack to allow norm to work.  Choose single to minimize memory.
+        A = single (A);
+      endif
       norm_x = norm (A, Inf);
       retval = norm_x == 0 || norm (A - A.', Inf) / norm_x <= tol;
     endif
   else
     ## skew symmetry
     if (tol == 0)
       retval = ! any ((A != -A.')(:));
     else
+      if (islogical (A))
+        ## Hack to allow norm to work.  Choose single to minimize memory.
+        A = single (A);
+      endif
       norm_x = norm (A, Inf);
       retval = norm_x == 0 || norm (A + A.', Inf) / norm_x <= tol;
     endif
   endif
 
 endfunction
 
 
 %!assert (issymmetric (1))
 %!assert (! issymmetric ([1, 2]))
 %!assert (issymmetric ([]))
 %!assert (issymmetric ([1, 2; 2, 1]))
 %!assert (issymmetric ([1, 2.1; 2, 1.1], 0.2))
 %!assert (issymmetric ([1, 2i; 2i, 1]))
 %!assert (issymmetric (speye (100)))
 %!assert (issymmetric (logical (eye (2))))
+%!assert (! issymmetric (logical ([1 1; 0 1])))
+%!assert (issymmetric (logical ([1 1; 0 1]), 0.5))
 %!assert (issymmetric ([0, 2; -2, 0], "skew"))
 %!assert (! issymmetric ([0, 2; -2, eps], "skew"))
 %!assert (issymmetric ([0, 2; -2, eps], "skew", eps))
 
 %!assert (! (issymmetric ("test")))
 %!assert (! (issymmetric ("t")))
 %!assert (! (issymmetric (["te"; "et"])))
 %!assert (! issymmetric ({1}))
