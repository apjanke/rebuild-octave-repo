# HG changeset patch
# User jwe
# Date 781818697 0
#      Mon Oct 10 19:51:37 1994 +0000
# Node ID 4fcd2e68dd3be7ba26bd7775919b6cd6b4951878
# Parent  efdb7d3eddd8924262207e459f8bc4bc55b4a37d
[project @ 1994-10-10 19:51:37 by jwe]

diff --git a/scripts/linear-algebra/null.m b/scripts/linear-algebra/null.m
--- a/scripts/linear-algebra/null.m
+++ b/scripts/linear-algebra/null.m
@@ -5,17 +5,17 @@ function retval = null (A, tol)
 #
 # Returns an orthonormal basis of the null space of A.
 #
 # The dimension of the null space is taken as the number of singular
 # values of A not greater than tol;  the default for tol is
 # max (size (A)) * sigma_max (A) * eps, where sigma_max (A) is the
 # maximal singular value of A. 
 
-# written by KH (Kurt.Hornik@neuro.tuwien.ac.at) on Dec 24, 1993
+# written by KH (Kurt.Hornik@ci.tuwien.ac.at) on Dec 24, 1993
 # copyright Dept of Probability Theory and Statistics TU Wien
 
   [U, S, V] = svd (A);
 
   [rows, cols] = size (A);
 
   s = diag (S);
 
diff --git a/scripts/linear-algebra/orth.m b/scripts/linear-algebra/orth.m
--- a/scripts/linear-algebra/orth.m
+++ b/scripts/linear-algebra/orth.m
@@ -5,17 +5,17 @@ function retval = orth (A, tol)
 #
 # Returns an orthonormal basis of the range of A.
 #
 # The dimension of the range space is taken as the number of singular
 # values of A greater than tol; the default for tol is
 # max (size (A)) * sigma_max (A) * eps, where sigma_max (A) is the
 # maximal singular value of A.
 
-# written by KH (Kurt.Hornik@neuro.tuwien.ac.at) on Dec 24, 1993
+# written by KH (Kurt.Hornik@ci.tuwien.ac.at) on Dec 24, 1993
 # copyright Dept of Probability Theory and Statistics TU Wien
 
   [U, S, V] = svd (A);
 
   [rows, cols] = size (A);
 
   s = diag (S);
 
diff --git a/scripts/polynomial/conv-tuwien.m b/scripts/polynomial/conv-tuwien.m
--- a/scripts/polynomial/conv-tuwien.m
+++ b/scripts/polynomial/conv-tuwien.m
@@ -2,17 +2,17 @@ function c=conv(a,b)
 #
 # usage: conv(a,b)
 #
 # Returns the convolution of vectors a and b. The resulting vector
 # is of length(a)+length(b)-1. If a and b are polynomial coefficients
 # conv(a,b) is equivalent to polynomial multiplication.
 
 # written by Gerhard Kircher on Aug 27, 1993
-# modified by KH (Kurt.Hornik@neuro.tuwien.ac.at) on Dec 23, 1993.
+# modified by KH (Kurt.Hornik@ci.tuwien.ac.at) on Dec 23, 1993.
 
   l_a = length(a);
   l_b = length(b);  
   return_row = 0;
   if (l_a > l_b)
     if (rows(a) == 1)
       return_row = 1;
     endif
diff --git a/scripts/polynomial/deconv-tuwien.m b/scripts/polynomial/deconv-tuwien.m
--- a/scripts/polynomial/deconv-tuwien.m
+++ b/scripts/polynomial/deconv-tuwien.m
@@ -1,16 +1,16 @@
 function [x, r] = deconv(a, b)
 #
 # Returns x and r such that a = conv(b, x) + r.
 # If a and b are vectors of polynomial coefficients, x and r are the
 # vectors of coefficients of quotient and remainder in the polynomial
 # division of a by b. 
 
-# written by KH (Kurt.Hornik@neuro.tuwien.ac.at) on Dec 27, 1993
+# written by KH (Kurt.Hornik@ci.tuwien.ac.at) on Dec 27, 1993
 # copyright Dept of Probability Theory and Statistics TU Wien
   
   if !(nargin == 2)
     error("usage:  deconv(a, b)");
   endif
   f = find(b);
   l_b = length(f);
   if (l_b == 0)
diff --git a/scripts/polynomial/poly-tuwien.m b/scripts/polynomial/poly-tuwien.m
--- a/scripts/polynomial/poly-tuwien.m
+++ b/scripts/polynomial/poly-tuwien.m
@@ -1,16 +1,16 @@
 function y = poly (x)
 #
 # If A is a square matrix, poly (A) is the row vector of coefficients of
 # the characteristic polynomial det (z * eye(A) - A).
 # If x is a vector, poly (x) is a vector of coefficients of the polynomial
 # whose roots are the elements of x.
 
-# written by KH (Kurt.Hornik@neuro.tuwien.ac.at) on Dec 24, 1993
+# written by KH (Kurt.Hornik@ci.tuwien.ac.at) on Dec 24, 1993
 # copyright Dept of Probability Theory and Statistics TU Wien
 
   m = min(size(x));
   n = max(size(x));
   if (m == 0)
     y = 1;
   elseif (m == 1)
     v = x;
diff --git a/scripts/polynomial/roots-tuwien.m b/scripts/polynomial/roots-tuwien.m
--- a/scripts/polynomial/roots-tuwien.m
+++ b/scripts/polynomial/roots-tuwien.m
@@ -1,14 +1,14 @@
 function r = roots(v)
 #
 # For a vector v with n components, return the roots of the polynomial
 # v(1)*z^(n-1) + ... + v(n-1) * z + v(n).
   
-# written by KH (Kurt.Hornik@neuro.tuwien.ac.at) on Dec 24, 1993
+# written by KH (Kurt.Hornik@ci.tuwien.ac.at) on Dec 24, 1993
 # copyright Dept of Probability Theory and Statistics TU Wien
 # modified by KH on Jan 10, 1994
   
   [nr, nc] = size(v);
   if !((nr == 1 && nc > 1) || (nc == 1 && nr > 1))
     error("usage:  roots(v), where v is a nonzero vector");
   endif
   n = nr + nc - 1;
diff --git a/scripts/statistics/corrcoef.m b/scripts/statistics/corrcoef.m
--- a/scripts/statistics/corrcoef.m
+++ b/scripts/statistics/corrcoef.m
@@ -20,17 +20,17 @@ function retval = corrcoef (X, Y)
 
 # usage: corrcoef (X [, Y])
 #
 # If each row of X and Y is an observation and each column is a variable,
 # the (i,j)-th entry of corrcoef(X, Y) is the correlation between the
 # i-th variable in X and the j-th variable in Y.
 # corrcoef(X) is corrcoef(X, X).
 
-# Written by Kurt Hornik (hornik@neuro.tuwien.ac.at) March 1993.
+# Written by Kurt Hornik (hornik@ci.tuwien.ac.at) March 1993.
 # Dept of Probability Theory and Statistics TU Wien, Austria.
 
   if (nargin < 1 || nargin > 2)
     error ("usage: corrcoef (X [, Y])");
   endif
 
   if (nargin == 2)
     C = cov (X, Y);
diff --git a/scripts/statistics/cov.m b/scripts/statistics/cov.m
--- a/scripts/statistics/cov.m
+++ b/scripts/statistics/cov.m
@@ -20,17 +20,17 @@ function retval = cov (X, Y)
 
 # usage: cov (X [, Y])
 #
 # If each row of X and Y is an observation and each column is a
 # variable, the (i,j)-th entry of cov(X, Y) is the covariance
 # between the i-th variable in X and the j-th variable in Y.
 # cov(X) is cov(X, X).
 
-# Written by Kurt Hornik (hornik@neuro.tuwien.ac.at) March 1993.
+# Written by Kurt Hornik (hornik@ci.tuwien.ac.at) March 1993.
 # Dept of Probability Theory and Statistics TU Wien, Austria.
 
   if (nargin < 1 || nargin > 2)
     error ("usage: cov (X [, Y])");
   endif
 
   [Tx, kx] = size (X);
   if (nargin == 2)
diff --git a/scripts/statistics/gls.m b/scripts/statistics/gls.m
--- a/scripts/statistics/gls.m
+++ b/scripts/statistics/gls.m
@@ -29,17 +29,17 @@ function [BETA, v, R] = gls (Y, X, O)
 #      B ...  k x p
 #      E ...  T x p
 #      O ... Tp x Tp.
 #
 # BETA is the GLS estimator for B.
 # v is the GLS estimator for s^2.
 # R = Y - X*BETA is the matrix of GLS residuals.
 
-# Written by Teresa Twaroch (twaroch@neuro.tuwien.ac.at) May 1993.
+# Written by Teresa Twaroch (twaroch@ci.tuwien.ac.at) May 1993.
 # Dept of Probability Theory and Statistics TU Wien, Austria.
 
   if (nargin != 3)
     error ("usage: [BETA, v [, R]] = gls (Y, X, O)");
   endif
 
   [rx, cx] = size (X);
   [ry, cy] = size (Y);
diff --git a/scripts/statistics/mahalanobis.m b/scripts/statistics/mahalanobis.m
--- a/scripts/statistics/mahalanobis.m
+++ b/scripts/statistics/mahalanobis.m
@@ -19,17 +19,17 @@
 function retval = mahalanobis (X, Y)
 
 # usage: mahalanobis (X, Y)
 #
 # Returns Mahalanobis' D-square distance between the multivariate
 # samples X and Y, which must have the same number of components
 # (columns), but may have a different number of observations (rows).
 
-# Written by Friedrich Leisch (leisch@neuro.tuwien.ac.at) July 1993.
+# Written by Friedrich Leisch (leisch@ci.tuwien.ac.at) July 1993.
 # Dept of Probability Theory and Statistics TU Wien, Austria.
 
   if (nargin != 2)
     error ("usage: mahalanobis (X, Y)");
   endif
 
   [xr, xc] = size (X);
   [yr, yc] = size (Y);
diff --git a/scripts/statistics/ols.m b/scripts/statistics/ols.m
--- a/scripts/statistics/ols.m
+++ b/scripts/statistics/ols.m
@@ -35,17 +35,17 @@ function [BETA, SIGMA, R] = ols (Y, X)
 #
 # where pinv(X) denotes the pseudoinverse of X.
 # SIGMA is the OLS estimator for the matrix S, i.e.
 #
 #   SIGMA = (Y - X*BETA)'*(Y - X*BETA) / (T - rank(X)).
 #
 # R = Y - X*BETA is the matrix of OLS residuals.
 
-# Written by Teresa Twaroch (twaroch@neuro.tuwien.ac.at) May 1993.
+# Written by Teresa Twaroch (twaroch@ci.tuwien.ac.at) May 1993.
 # Dept of Probability Theory and Statistics TU Wien, Austria.
 
   if (nargin != 2)
     error("usage : [BETA, SIGMA [, R]] = ols (Y, X)");
   endif
 
   [nr, nc] = size (X);
   [ry, cy] = size (Y);
