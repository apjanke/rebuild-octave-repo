# HG changeset patch
# User Mike Miller <mtmiller@ieee.org>
# Date 1422690135 18000
#      Sat Jan 31 02:42:15 2015 -0500
# Node ID 408361a8c72fb7d636dca4e6434b55aa8cb93450
# Parent  ebd27d8c63fdadbe1a08dc57a582720420ecb00d
Don't register gnuplot toolkit if gnuplot is not available (bug #35391)

* __init_gnuplot__.cc (F__have_gnuplot__, have_gnuplot_binary): New functions
to test for existence of gnuplot external program. (PKG_ADD): Don't register
gnuplot toolkit unless gnuplot binary is available. (F__init_gnuplot): Error
if gnuplot binary is not available.
* graphics.cc (gtk_manager::do_get_toolkit): Provide better error message if
no graphics toolkits are available.

diff --git a/libinterp/corefcn/graphics.cc b/libinterp/corefcn/graphics.cc
--- a/libinterp/corefcn/graphics.cc
+++ b/libinterp/corefcn/graphics.cc
@@ -10646,42 +10646,47 @@ gtk_manager::create_instance (void)
     singleton_cleanup_list::add (cleanup_instance);
 }
 
 graphics_toolkit
 gtk_manager::do_get_toolkit (void) const
 {
   graphics_toolkit retval;
 
-  const_loaded_toolkits_iterator pl = loaded_toolkits.find (dtk);
-
-  if (pl == loaded_toolkits.end ())
-    {
-      const_available_toolkits_iterator pa = available_toolkits.find (dtk);
-
-      if (pa != available_toolkits.end ())
-        {
-          octave_value_list args;
-          args(0) = dtk;
-          feval ("graphics_toolkit", args);
-
-          if (! error_state)
-            pl = loaded_toolkits.find (dtk);
-
-          if (error_state || pl == loaded_toolkits.end ())
-            error ("failed to load %s graphics toolkit", dtk.c_str ());
+  if (! dtk.empty ())
+    {
+      const_loaded_toolkits_iterator pl = loaded_toolkits.find (dtk);
+
+      if (pl == loaded_toolkits.end ())
+        {
+          const_available_toolkits_iterator pa = available_toolkits.find (dtk);
+
+          if (pa != available_toolkits.end ())
+            {
+              octave_value_list args;
+              args(0) = dtk;
+              feval ("graphics_toolkit", args);
+
+              if (! error_state)
+                pl = loaded_toolkits.find (dtk);
+
+              if (error_state || pl == loaded_toolkits.end ())
+                error ("failed to load %s graphics toolkit", dtk.c_str ());
+              else
+                retval = pl->second;
+            }
           else
-            retval = pl->second;
+            error ("default graphics toolkit '%s' is not available!",
+                   dtk.c_str ());
         }
       else
-        error ("default graphics toolkit '%s' is not available!",
-               dtk.c_str ());
-    }
-  else
-    retval = pl->second;
+        retval = pl->second;
+    }
+  else
+    error ("no graphics toolkits are available!");
 
   return retval;
 }
 
 void
 gtk_manager::do_register_toolkit (const std::string& name)
 {
   if (dtk.empty () || name == "qt"
diff --git a/libinterp/dldfcn/__init_gnuplot__.cc b/libinterp/dldfcn/__init_gnuplot__.cc
--- a/libinterp/dldfcn/__init_gnuplot__.cc
+++ b/libinterp/dldfcn/__init_gnuplot__.cc
@@ -31,21 +31,24 @@ To initialize:
 
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
 #include "builtins.h"
 #include "defun-dld.h"
 #include "error.h"
+#include "file-stat.h"
 #include "graphics.h"
+#include "oct-env.h"
 #include "parse.h"
+#include "utils.h"
 #include "variables.h"
 
-// PKG_ADD: register_graphics_toolkit ("gnuplot");
+// PKG_ADD: if (__have_gnuplot__ ()) register_graphics_toolkit ("gnuplot"); endif
 
 static bool toolkit_loaded = false;
 
 class gnuplot_graphics_toolkit : public base_graphics_toolkit
 {
 public:
   gnuplot_graphics_toolkit (void)
     : base_graphics_toolkit ("gnuplot") { }
@@ -161,27 +164,58 @@ private:
                 if (fids.numel () > 2)
                   Fwaitpid (ovl (fids(2)));
               }
           }
       }
   }
 };
 
-// Initialize the fltk graphics toolkit.
+static bool
+have_gnuplot_binary (void)
+{
+  octave_value_list tmp = feval ("gnuplot_binary", octave_value_list ());
+  std::string gnuplot_binary = tmp(0).string_value ();
+
+  std::string path = octave_env::getenv ("PATH");
+
+  string_vector args (gnuplot_binary);
+  std::string gnuplot_path = search_path_for_file (path, args);
+
+  file_stat fs (gnuplot_path);
+
+  return fs.exists ();
+}
+
+// Initialize the gnuplot graphics toolkit.
 
 DEFUN_DLD (__init_gnuplot__, , , "")
 {
   octave_value retval;
 
-  if (! toolkit_loaded)
+  if (! have_gnuplot_binary ())
+    error ("__init_gnuplot__: the gnuplot program is not available, see 'gnuplot_binary'");
+  else if (! toolkit_loaded)
     {
       mlock ();
 
       graphics_toolkit tk (new gnuplot_graphics_toolkit ());
       gtk_manager::load_toolkit (tk);
 
       toolkit_loaded = true;
     }
 
   return retval;
 }
 
+DEFUN_DLD (__have_gnuplot__, , ,
+           "-*- texinfo -*-\n\
+@deftypefn {Loadable Function} {@var{gnuplot_available} =} __have_gnuplot__ ()\n\
+Undocumented internal function.\n\
+@end deftypefn")
+{
+  octave_value retval;
+
+  retval = have_gnuplot_binary ();
+
+  return retval;
+}
+
