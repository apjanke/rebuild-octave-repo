# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1526422144 14400
#      Tue May 15 18:09:04 2018 -0400
# Node ID d3a035528c9a7ed2d03e1b98c09a2c33e3147b7d
# Parent  749d9e858553513366d0332f8d5b5b6a468e2e53
use reference to tree_evaluator instead of pointer

Always use a reference to the evaluator instead of a pointer because
it is required to and will always exist everywhere it is used.

Files affected: ov-fcn-handle.cc, ov-fcn-handle.h, pt-decl.h,
pt-eval.cc, pt-exp.cc, pt-exp.h, pt-id.cc, pt-id.h, pt-idx.cc,
pt-idx.h, pt-tm-const.cc, pt-tm-const.h.

diff --git a/libinterp/octave-value/ov-fcn-handle.cc b/libinterp/octave-value/ov-fcn-handle.cc
--- a/libinterp/octave-value/ov-fcn-handle.cc
+++ b/libinterp/octave-value/ov-fcn-handle.cc
@@ -1934,17 +1934,17 @@ octave_fcn_binder::octave_fcn_binder (co
                                       const std::vector<int>& mask,
                                       int exp_nargin)
   : octave_fcn_handle (f), root_handle (root), arg_template (templ),
     arg_mask (mask), expected_nargin (exp_nargin)
 { }
 
 octave_fcn_handle *
 octave_fcn_binder::maybe_binder (const octave_value& f,
-                                 octave::tree_evaluator *tw)
+                                 octave::tree_evaluator& tw)
 {
   octave_fcn_handle *retval = nullptr;
 
   octave_user_function *usr_fcn = f.user_function_value (false);
   octave::tree_parameter_list *param_list = (usr_fcn ? usr_fcn->parameter_list ()
                                                      : nullptr);
 
   octave::tree_statement_list *cmd_list = nullptr;
@@ -1993,17 +1993,17 @@ octave_fcn_binder::maybe_binder (const o
                   octave::tree_identifier *id = (elt ? elt->ident () : nullptr);
                   if (id && ! id->is_black_hole ())
                     arginmap[id->name ()] = npar;
                 }
             }
 
           if (arg_list && arg_list->length () > 0)
             {
-              octave::symbol_scope scope = tw->get_current_scope ();
+              octave::symbol_scope scope = tw.get_current_scope ();
 
               octave::symbol_record::context_id context
                 = scope.current_context ();
 
               bool bad = false;
               int nargs = arg_list->length ();
               octave_value_list arg_template (nargs);
               std::vector<int> arg_mask (nargs);
@@ -2012,30 +2012,30 @@ octave_fcn_binder::maybe_binder (const o
               // or a defined identifier.
               int iarg = 0;
               for (auto it = arg_list->begin ();
                    it != arg_list->end (); ++it, ++iarg)
                 {
                   octave::tree_expression *elt = *it;
                   if (elt && elt->is_constant ())
                     {
-                      arg_template(iarg) = tw->evaluate (elt);
+                      arg_template(iarg) = tw.evaluate (elt);
                       arg_mask[iarg] = -1;
                     }
                   else if (elt && elt->is_identifier ())
                     {
                       octave::tree_identifier *elt_id =
                         dynamic_cast<octave::tree_identifier *> (elt);
                       if (arginmap.find (elt_id->name ()) != arginmap.end ())
                         {
                           arg_mask[iarg] = arginmap[elt_id->name ()];
                         }
                       else if (elt_id->is_defined (context))
                         {
-                          arg_template(iarg) = tw->evaluate (elt_id);
+                          arg_template(iarg) = tw.evaluate (elt_id);
                           arg_mask[iarg] = -1;
                         }
                       else
                         {
                           bad = true;
                           break;
                         }
                     }
@@ -2047,17 +2047,17 @@ octave_fcn_binder::maybe_binder (const o
                 }
 
               octave_value root_val;
 
               if (! bad)
                 {
                   // If the head is a value, use it as root.
                   if (head_id->is_defined (context))
-                    root_val = tw->evaluate (head_id);
+                    root_val = tw.evaluate (head_id);
                   else
                     {
                       // It's a name.
                       std::string head_name = head_id->name ();
 
                       if (head_name == "eval" || head_name == "feval")
                         bad = true;
                       else
diff --git a/libinterp/octave-value/ov-fcn-handle.h b/libinterp/octave-value/ov-fcn-handle.h
--- a/libinterp/octave-value/ov-fcn-handle.h
+++ b/libinterp/octave-value/ov-fcn-handle.h
@@ -193,17 +193,17 @@ private:
   octave_fcn_binder (const octave_value& f, const octave_value& root,
                      const octave_value_list& templ,
                      const std::vector<int>& mask, int exp_nargin);
 
 public:
 
   // Factory method.
   static octave_fcn_handle * maybe_binder (const octave_value& f,
-                                           octave::tree_evaluator *tw);
+                                           octave::tree_evaluator& tw);
 
 protected:
 
   octave_value_list call (int nargout, const octave_value_list& args);
 
   octave_value root_handle;
   octave_value_list arg_template;
   std::vector<int> arg_mask;
diff --git a/libinterp/parse-tree/pt-decl.h b/libinterp/parse-tree/pt-decl.h
--- a/libinterp/parse-tree/pt-decl.h
+++ b/libinterp/parse-tree/pt-decl.h
@@ -79,17 +79,17 @@ namespace octave
     void mark_as_formal_parameter (void)
     {
       if (m_id)
         m_id->mark_as_formal_parameter ();
     }
 
     bool lvalue_ok (void) { return m_id ? m_id->lvalue_ok () : false; }
 
-    octave_lvalue lvalue (tree_evaluator *tw)
+    octave_lvalue lvalue (tree_evaluator& tw)
     {
       return m_id ? m_id->lvalue (tw) : octave_lvalue ();
     }
 
     void mark_global (void) { type = global; }
     bool is_global (void) const { return type == global; }
 
     void mark_persistent (void) { type = persistent; }
diff --git a/libinterp/parse-tree/pt-eval.cc b/libinterp/parse-tree/pt-eval.cc
--- a/libinterp/parse-tree/pt-eval.cc
+++ b/libinterp/parse-tree/pt-eval.cc
@@ -143,17 +143,17 @@ namespace octave
     af->mark_as_anonymous_function ();
 
     // FIXME: these should probably come from ANON_FH.
     //    af->stash_fcn_file_name (expr.file_name ());
     //    af->stash_fcn_location (expr.line (), expr.column ());
 
     octave_value ov_fcn (af);
 
-    octave_value fh (octave_fcn_binder::maybe_binder (ov_fcn, this));
+    octave_value fh (octave_fcn_binder::maybe_binder (ov_fcn, *this));
 
     push_result (fh);
   }
 
   void
   tree_evaluator::visit_argument_list (tree_argument_list&)
   {
     panic_impossible ();
@@ -551,17 +551,17 @@ namespace octave
     (tree_parameter_list *param_list, const octave_value_list& args)
   {
     int i = -1;
 
     for (tree_decl_elt *elt : *param_list)
       {
         i++;
 
-        octave_lvalue ref = elt->lvalue (this);
+        octave_lvalue ref = elt->lvalue (*this);
 
         if (i < args.length ())
           {
             if (args(i).is_defined () && args(i).is_magic_colon ())
               {
                 if (! eval_decl_elt (elt))
                   error ("no default value for argument %d", i+1);
               }
@@ -573,17 +573,17 @@ namespace octave
       }
   }
 
   void
   tree_evaluator::undefine_parameter_list (tree_parameter_list *param_list)
   {
     for (tree_decl_elt *elt : *param_list)
       {
-        octave_lvalue ref = elt->lvalue (this);
+        octave_lvalue ref = elt->lvalue (*this);
 
         ref.assign (octave_value::op_asn_eq, octave_value ());
       }
   }
 }
 
 // END is documented in op-kw-docs.
 DEFCONSTMETHOD (end, interp, , ,
@@ -786,17 +786,17 @@ namespace octave
   {
     bool retval = false;
 
     tree_identifier *id = elt->ident ();
     tree_expression *expr = elt->expression ();
 
     if (id && expr)
       {
-        octave_lvalue ult = id->lvalue (this);
+        octave_lvalue ult = id->lvalue (*this);
 
         octave_value init_val = evaluate (expr);
 
         ult.assign (octave_value::op_asn_eq, init_val);
 
         retval = true;
       }
 
@@ -922,17 +922,17 @@ namespace octave
 
             id->link_to_global (symtab.global_scope (), global_sym);
           }
         else if (elt.is_persistent ())
           id->mark_persistent ();
         else
           error ("declaration list element not global or persistent");
 
-        octave_lvalue ult = id->lvalue (this);
+        octave_lvalue ult = id->lvalue (*this);
 
         if (ult.is_undefined ())
           {
             tree_expression *expr = elt.expression ();
 
             octave_value init_val;
 
             if (expr)
@@ -998,17 +998,17 @@ namespace octave
       return;
 #endif
 
     if (rhs.is_undefined ())
       return;
 
     tree_expression *lhs = cmd.left_hand_side ();
 
-    octave_lvalue ult = lhs->lvalue (this);
+    octave_lvalue ult = lhs->lvalue (*this);
 
     tree_statement_list *loop_body = cmd.body ();
 
     if (rhs.is_range ())
       {
         Range rng = rhs.range_value ();
 
         octave_idx_type steps = rng.numel ();
@@ -1139,21 +1139,21 @@ namespace octave
     // structure element.
 
     tree_argument_list *lhs = cmd.left_hand_side ();
 
     auto p = lhs->begin ();
 
     tree_expression *elt = *p++;
 
-    octave_lvalue val_ref = elt->lvalue (this);
+    octave_lvalue val_ref = elt->lvalue (*this);
 
     elt = *p;
 
-    octave_lvalue key_ref = elt->lvalue (this);
+    octave_lvalue key_ref = elt->lvalue (*this);
 
     const octave_map tmp_val = rhs.map_value ();
 
     tree_statement_list *loop_body = cmd.body ();
 
     string_vector keys = tmp_val.keys ();
 
     octave_idx_type nel = keys.numel ();
@@ -1601,17 +1601,17 @@ namespace octave
             break;
 
           case '{':
             idx.push_back (make_value_list (*p_args, *p_arg_nm, &partial_expr_val));
             break;
 
           case '.':
             idx.push_back (octave_value
-                           (idx_expr.get_struct_index (this, p_arg_nm, p_dyn_field)));
+                           (idx_expr.get_struct_index (*this, p_arg_nm, p_dyn_field)));
             break;
 
           default:
             panic_impossible ();
           }
 
         p_args++;
         p_arg_nm++;
@@ -1703,17 +1703,17 @@ namespace octave
     bool all_sq_strings_p = false;
     bool all_dq_strings_p = false;
     bool all_empty_p = false;
     bool all_real_p = false;
     bool any_sparse_p = false;
     bool any_class_p = false;
     bool frc_str_conv = false;
 
-    tm_const tmp (expr, this);
+    tm_const tmp (expr, *this);
 
     if (tmp && ! tmp.empty ())
       {
         dim_vector dv = tmp.dims ();
         all_strings_p = tmp.all_strings_p ();
         all_sq_strings_p = tmp.all_sq_strings_p ();
         all_dq_strings_p = tmp.all_dq_strings_p ();
         all_empty_p = tmp.all_empty_p ();
@@ -2201,17 +2201,17 @@ namespace octave
     tree_expression *op = expr.operand ();
 
     if (op)
       {
         octave_value::unary_op etype = expr.op_type ();
 
         if (etype == octave_value::op_incr || etype == octave_value::op_decr)
           {
-            octave_lvalue ref = op->lvalue (this);
+            octave_lvalue ref = op->lvalue (*this);
 
             val = ref.value ();
 
             profiler::enter<tree_postfix_expression> block (m_profiler, expr);
 
             ref.do_unary_op (etype);
           }
         else
@@ -2241,17 +2241,17 @@ namespace octave
     tree_expression *op = expr.operand ();
 
     if (op)
       {
         octave_value::unary_op etype = expr.op_type ();
 
         if (etype == octave_value::op_incr || etype == octave_value::op_decr)
           {
-            octave_lvalue op_ref = op->lvalue (this);
+            octave_lvalue op_ref = op->lvalue (*this);
 
             profiler::enter<tree_prefix_expression> block (m_profiler, expr);
 
             op_ref.do_unary_op (etype);
 
             val = op_ref.value ();
           }
         else
@@ -2337,17 +2337,17 @@ namespace octave
           }
 
         tree_expression *lhs = expr.left_hand_side ();
 
         try
           {
             unwind_protect frame;
 
-            octave_lvalue ult = lhs->lvalue (this);
+            octave_lvalue ult = lhs->lvalue (*this);
 
             std::list<octave_lvalue> lvalue_list;
             lvalue_list.push_back (ult);
 
             m_lvalue_list_stack.push (&lvalue_list);
 
             frame.add_method (m_lvalue_list_stack,
                               &value_stack<const std::list<octave_lvalue>*>::pop);
@@ -2641,17 +2641,17 @@ namespace octave
       {
         tree_statement_list *catch_code = cmd.cleanup ();
         if (catch_code)
           {
             tree_identifier *expr_id = cmd.identifier ();
 
             if (expr_id)
               {
-                octave_lvalue ult = expr_id->lvalue (this);
+                octave_lvalue ult = expr_id->lvalue (*this);
 
                 octave_scalar_map err;
 
                 err.assign ("message", last_error_message ());
                 err.assign ("identifier", last_error_id ());
                 err.assign ("stack", last_error_stack ());
 
                 ult.assign (octave_value::op_asn_eq, err);
@@ -3077,17 +3077,17 @@ namespace octave
   }
 
   std::list<octave_lvalue>
   tree_evaluator::make_lvalue_list (tree_argument_list *lhs)
   {
     std::list<octave_lvalue> retval;
 
     for (tree_expression *elt : *lhs)
-      retval.push_back (elt->lvalue (this));
+      retval.push_back (elt->lvalue (*this));
 
     return retval;
   }
 
   octave_value
   tree_evaluator::max_recursion_depth (const octave_value_list& args,
                                        int nargout)
   {
diff --git a/libinterp/parse-tree/pt-exp.cc b/libinterp/parse-tree/pt-exp.cc
--- a/libinterp/parse-tree/pt-exp.cc
+++ b/libinterp/parse-tree/pt-exp.cc
@@ -33,17 +33,17 @@ along with Octave; see the file COPYING.
 #include "ov.h"
 #include "pt-exp.h"
 
 namespace octave
 {
   // Expressions.
 
   octave_lvalue
-  tree_expression::lvalue (tree_evaluator *)
+  tree_expression::lvalue (tree_evaluator&)
   {
     error ("invalid lvalue function called in expression");
   }
 
   std::string
   tree_expression::original_text (void) const
   {
     return "";
diff --git a/libinterp/parse-tree/pt-exp.h b/libinterp/parse-tree/pt-exp.h
--- a/libinterp/parse-tree/pt-exp.h
+++ b/libinterp/parse-tree/pt-exp.h
@@ -79,17 +79,17 @@ namespace octave
     virtual bool is_binary_expression (void) const { return false; }
 
     virtual bool is_boolean_expression (void) const { return false; }
 
     virtual bool lvalue_ok (void) const { return false; }
 
     virtual bool rvalue_ok (void) const { return false; }
 
-    virtual octave_lvalue lvalue (tree_evaluator *);
+    virtual octave_lvalue lvalue (tree_evaluator&);
 
     int paren_count (void) const { return num_parens; }
 
     bool is_postfix_indexed (void) const { return (postfix_index_type != '\0'); }
 
     char postfix_index (void) const { return postfix_index_type; }
 
     // Check if the result of the expression should be printed.
diff --git a/libinterp/parse-tree/pt-id.cc b/libinterp/parse-tree/pt-id.cc
--- a/libinterp/parse-tree/pt-id.cc
+++ b/libinterp/parse-tree/pt-id.cc
@@ -60,22 +60,22 @@ namespace octave
                      "'%s' undefined", name ().c_str ());
     else
       error_with_id ("Octave:undefined-function",
                      "'%s' undefined near line %d column %d",
                      name ().c_str (), l, c);
   }
 
   octave_lvalue
-  tree_identifier::lvalue (tree_evaluator *tw)
+  tree_identifier::lvalue (tree_evaluator& tw)
   {
     if (m_sym.is_added_static ())
       static_workspace_error ();
 
-    symbol_scope scope = tw->get_current_scope ();
+    symbol_scope scope = tw.get_current_scope ();
 
     return octave_lvalue (m_sym, scope.current_context ());
   }
 
   tree_identifier *
   tree_identifier::dup (symbol_scope& scope) const
   {
     // The new tree_identifier object contains a symbol_record
diff --git a/libinterp/parse-tree/pt-id.h b/libinterp/parse-tree/pt-id.h
--- a/libinterp/parse-tree/pt-id.h
+++ b/libinterp/parse-tree/pt-id.h
@@ -112,17 +112,17 @@ namespace octave
 
     void mark_as_formal_parameter (void) { m_sym.mark_formal (); }
 
     // We really need to know whether this symbol referst to a variable
     // or a function, but we may not know that yet.
 
     bool lvalue_ok (void) const { return true; }
 
-    octave_lvalue lvalue (tree_evaluator *);
+    octave_lvalue lvalue (tree_evaluator&);
 
     void eval_undefined_error (void);
 
     void static_workspace_error (void)
     {
       error (R"(can not add variable "%s" to a static workspace)",
              name ().c_str ());
     }
@@ -155,17 +155,17 @@ namespace octave
 
     bool is_black_hole (void) { return true; }
 
     tree_black_hole * dup (symbol_scope&) const
     {
       return new tree_black_hole;
     }
 
-    octave_lvalue lvalue (tree_evaluator *)
+    octave_lvalue lvalue (tree_evaluator&)
     {
       octave_lvalue retval;
       retval.mark_black_hole ();
       return retval;
     }
   };
 }
 
diff --git a/libinterp/parse-tree/pt-idx.cc b/libinterp/parse-tree/pt-idx.cc
--- a/libinterp/parse-tree/pt-idx.cc
+++ b/libinterp/parse-tree/pt-idx.cc
@@ -140,55 +140,55 @@ namespace octave
 
   std::string
   tree_index_expression::name (void) const
   {
     return m_expr->name ();
   }
 
   static inline octave_value_list
-  make_value_list (tree_evaluator *tw,
+  make_value_list (tree_evaluator& tw,
                    tree_argument_list *m_args,
                    const string_vector& m_arg_nm, const octave_value *object,
                    bool rvalue = true)
   {
     octave_value_list retval;
 
     if (m_args)
       {
         if (rvalue && object && m_args->has_magic_end ()
             && object->is_undefined ())
           err_invalid_inquiry_subscript ();
 
-        retval = tw->convert_to_const_vector (m_args, object);
+        retval = tw.convert_to_const_vector (m_args, object);
       }
 
     octave_idx_type n = retval.length ();
 
     if (n > 0)
       retval.stash_name_tags (m_arg_nm);
 
     return retval;
   }
 
   std::string
   tree_index_expression::get_struct_index
-  (tree_evaluator *tw,
+  (tree_evaluator& tw,
    std::list<string_vector>::const_iterator p_arg_nm,
    std::list<tree_expression *>::const_iterator p_dyn_field) const
   {
     std::string fn = (*p_arg_nm)(0);
 
     if (fn.empty ())
       {
         tree_expression *df = *p_dyn_field;
 
         if (df)
           {
-            octave_value t = tw->evaluate (df);
+            octave_value t = tw.evaluate (df);
 
             fn = t.xstring_value ("dynamic structure field names must be strings");
           }
         else
           panic_impossible ();
       }
 
     return fn;
@@ -226,17 +226,17 @@ namespace octave
       }
 
     std::string msg = e.message () + extra_message;
 
     error_with_id (e.err_id (), msg.c_str ());
   }
 
   octave_lvalue
-  tree_index_expression::lvalue (tree_evaluator *tw)
+  tree_index_expression::lvalue (tree_evaluator& tw)
   {
     octave_lvalue retval;
 
     std::list<octave_value_list> idx;
     std::string tmp_type;
 
     int n = m_args.size ();
 
diff --git a/libinterp/parse-tree/pt-idx.h b/libinterp/parse-tree/pt-idx.h
--- a/libinterp/parse-tree/pt-idx.h
+++ b/libinterp/parse-tree/pt-idx.h
@@ -88,28 +88,28 @@ namespace octave
     std::list<string_vector> arg_names (void) { return m_arg_nm; }
 
     std::list<tree_expression *> dyn_fields (void) { return m_dyn_field; }
 
     bool lvalue_ok (void) const { return m_expr->lvalue_ok (); }
 
     bool rvalue_ok (void) const { return true; }
 
-    octave_lvalue lvalue (tree_evaluator *tw);
+    octave_lvalue lvalue (tree_evaluator& tw);
 
     tree_index_expression * dup (symbol_scope& scope) const;
 
     void accept (tree_walker& tw)
     {
       tw.visit_index_expression (*this);
     }
 
     std::string
     get_struct_index
-    (tree_evaluator *tw, std::list<string_vector>::const_iterator p_arg_nm,
+    (tree_evaluator& tw, std::list<string_vector>::const_iterator p_arg_nm,
      std::list<tree_expression *>::const_iterator p_dyn_field) const;
 
   private:
 
     // The LHS of this index expression.
     tree_expression *m_expr;
 
     // The indices (only valid if type == paren || type == brace).
diff --git a/libinterp/parse-tree/pt-tm-const.cc b/libinterp/parse-tree/pt-tm-const.cc
--- a/libinterp/parse-tree/pt-tm-const.cc
+++ b/libinterp/parse-tree/pt-tm-const.cc
@@ -115,34 +115,34 @@ namespace octave
       m_any_class = true;
 
     // Special treatment of sparse matrices to avoid out-of-memory error
     m_all_1x1 = m_all_1x1 && ! val.issparse () && val.numel () == 1;
   }
 
   void
   tm_row_const::tm_row_const_rep::init (const tree_argument_list& row,
-                                        tree_evaluator *tw)
+                                        tree_evaluator& tw)
   {
     m_all_str = true;
     m_all_sq_str = true;
     m_all_dq_str = true;
     m_all_real = true;
     m_all_cmplx = true;
     m_any_cell = false;
     m_any_sparse = false;
     m_any_class = false;
 
     bool first_elem = true;
 
     for (tree_expression* elt : row)
       {
         octave_quit ();
 
-        octave_value tmp = tw->evaluate (elt);
+        octave_value tmp = tw.evaluate (elt);
 
         if (tmp.is_undefined ())
           {
             m_ok = true;
             return;
           }
         else
           {
@@ -230,17 +230,17 @@ namespace octave
                 else if (! m_dv.hvcat (this_elt_dv, 1))
                   eval_error ("horizontal dimensions mismatch", m_dv, this_elt_dv);
               }
           }
       }
   }
 
   void
-  tm_const::init (const tree_matrix& tm, tree_evaluator *tw)
+  tm_const::init (const tree_matrix& tm, tree_evaluator& tw)
   {
     m_all_str = true;
     m_all_sq_str = true;
     m_all_dq_str = true;
     m_all_real = true;
     m_all_cmplx = true;
     m_any_cell = false;
     m_any_sparse = false;
diff --git a/libinterp/parse-tree/pt-tm-const.h b/libinterp/parse-tree/pt-tm-const.h
--- a/libinterp/parse-tree/pt-tm-const.h
+++ b/libinterp/parse-tree/pt-tm-const.h
@@ -63,17 +63,17 @@ namespace octave
         : m_count (1), m_dv (0, 0), m_all_str (false),
           m_all_sq_str (false), m_all_dq_str (false),
           m_some_str (false), m_all_real (false), m_all_cmplx (false),
           m_all_mt (true), m_any_cell (false), m_any_sparse (false),
           m_any_class (false), m_all_1x1 (false),
           m_first_elem_is_struct (false), m_class_nm (), m_ok (false)
       { }
 
-      tm_row_const_rep (const tree_argument_list& row, tree_evaluator *tw)
+      tm_row_const_rep (const tree_argument_list& row, tree_evaluator& tw)
         : m_count (1), m_dv (0, 0), m_all_str (false), m_all_sq_str (false),
           m_some_str (false), m_all_real (false), m_all_cmplx (false),
           m_all_mt (true), m_any_cell (false), m_any_sparse (false),
           m_any_class (false), m_all_1x1 (! row.empty ()),
           m_first_elem_is_struct (false), m_class_nm (), m_ok (false)
       { init (row, tw); }
 
       ~tm_row_const_rep (void) = default;
@@ -96,17 +96,17 @@ namespace octave
       bool m_first_elem_is_struct;
 
       std::string m_class_nm;
 
       bool m_ok;
 
       void do_init_element (const octave_value&, bool&);
 
-      void init (const tree_argument_list&, tree_evaluator *tw);
+      void init (const tree_argument_list&, tree_evaluator& tw);
 
       void cellify (void);
 
     private:
 
       tm_row_const_rep (const tm_row_const_rep&);
 
       tm_row_const_rep& operator = (const tm_row_const_rep&);
@@ -116,17 +116,17 @@ namespace octave
   public:
 
     typedef tm_row_const_rep::iterator iterator;
     typedef tm_row_const_rep::const_iterator const_iterator;
 
     tm_row_const (void)
       : m_rep (nullptr) { }
 
-    tm_row_const (const tree_argument_list& row, tree_evaluator *tw)
+    tm_row_const (const tree_argument_list& row, tree_evaluator& tw)
       : m_rep (new tm_row_const_rep (row, tw)) { }
 
     tm_row_const (const tm_row_const& x)
       : m_rep (x.m_rep)
     {
       if (m_rep)
         m_rep->m_count++;
     }
@@ -192,17 +192,17 @@ namespace octave
     tm_row_const_rep *m_rep;
   };
 
   class
   tm_const : public base_list<tm_row_const>
   {
   public:
 
-    tm_const (const tree_matrix& tm, tree_evaluator *tw = nullptr)
+    tm_const (const tree_matrix& tm, tree_evaluator& tw)
       : m_dv (0, 0), m_all_str (false), m_all_sq_str (false),
         m_all_dq_str (false),
         m_some_str (false), m_all_real (false), m_all_cmplx (false),
         m_all_mt (true), m_any_cell (false), m_any_sparse (false),
         m_any_class (false), m_class_nm (), m_ok (false)
     { init (tm, tw); }
 
     ~tm_const (void) = default;
@@ -249,17 +249,17 @@ namespace octave
     bool m_ok;
 
     tm_const (void);
 
     tm_const (const tm_const&);
 
     tm_const& operator = (const tm_const&);
 
-    void init (const tree_matrix& tm, tree_evaluator *tw);
+    void init (const tree_matrix& tm, tree_evaluator& tw);
   };
 
   template <typename TYPE, typename T>
   void
   single_type_concat (Array<T>& result, tm_const& tmp)
   {
     octave_idx_type r = 0;
     octave_idx_type c = 0;
