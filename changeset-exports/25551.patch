# HG changeset patch
# User Markus MÃ¼tzel <markus.muetzel@gmx.de>
# Date 1530731972 -7200
#      Wed Jul 04 21:19:32 2018 +0200
# Node ID 64715551b5156fbc63955db0773b9ae21375278b
# Parent  8cc9e21b15a7b366f7e4b4fe290cb30402228614
Call get_ASCII_filename for HDF5 functions (bug #49118).

* load-save.cc, ls-hdf5.cc: Call get_ASCII_filename for filename argument of
HDF5 functions to circumvent the necessity for the wide char WinAPI.

diff --git a/libinterp/corefcn/load-save.cc b/libinterp/corefcn/load-save.cc
--- a/libinterp/corefcn/load-save.cc
+++ b/libinterp/corefcn/load-save.cc
@@ -310,17 +310,17 @@ get_file_format (std::istream& file, con
 static load_save_format
 get_file_format (const std::string& fname, const std::string& orig_fname,
                  bool& use_zlib, bool quiet = false)
 {
   load_save_format retval = LS_UNKNOWN;
 
 #if defined (HAVE_HDF5)
   // check this before we open the file
-  if (H5Fis_hdf5 (fname.c_str ()) > 0)
+  if (H5Fis_hdf5 (octave::sys::get_ASCII_filename (fname).c_str ()) > 0)
     return LS_HDF5;
 #endif
 
 #if defined (HAVE_ZLIB)
   use_zlib = check_gzip_magic (fname);
 #else
   use_zlib = false;
 #endif
@@ -1696,17 +1696,18 @@ file @file{data} in Octave's binary form
 #if defined (HAVE_HDF5)
       if (format == LS_HDF5)
         {
           // FIXME: It should be possible to append to HDF5 files.
           if (append)
             error ("save: appending to HDF5 files is not implemented");
 
           bool write_header_info
-            = ! (append && H5Fis_hdf5 (fname.c_str ()) > 0);
+            = ! (append && H5Fis_hdf5 (
+                 octave::sys::get_ASCII_filename (fname).c_str ()) > 0);
 
           hdf5_ofstream hdf5_file (fname.c_str (), mode);
 
           if (hdf5_file.file_id == -1)
             err_file_open ("save", fname);
 
           save_vars (argv, i, argc, hdf5_file, format,
                      save_as_floats, write_header_info);
diff --git a/libinterp/corefcn/ls-hdf5.cc b/libinterp/corefcn/ls-hdf5.cc
--- a/libinterp/corefcn/ls-hdf5.cc
+++ b/libinterp/corefcn/ls-hdf5.cc
@@ -84,23 +84,29 @@ check_hdf5_id_value (octave_hdf5_id id, 
 
 #endif
 
 hdf5_fstreambase::hdf5_fstreambase (const char *name, int mode, int /* prot */)
   : file_id (-1), current_item (-1)
 {
 #if defined (HAVE_HDF5)
 
+  const char *s_name = 
+     octave::sys::get_ASCII_filename (std::string (name)).c_str ();
+
   if (mode & std::ios::in)
-    file_id = H5Fopen (name, H5F_ACC_RDONLY, octave_H5P_DEFAULT);
+    file_id = H5Fopen (s_name, H5F_ACC_RDONLY, octave_H5P_DEFAULT);
   else if (mode & std::ios::out)
     {
-      if (mode & std::ios::app && H5Fis_hdf5 (name) > 0)
-        file_id = H5Fopen (name, H5F_ACC_RDWR, octave_H5P_DEFAULT);
+      if (mode & std::ios::app && H5Fis_hdf5 (s_name) > 0)
+        file_id = H5Fopen (s_name, H5F_ACC_RDWR, octave_H5P_DEFAULT);
       else
+        // FIXME: For Windows, create a file with an ASCII name in an
+        //        accessible folder, close the file move and rename using
+        //        wide character API and re-open.
         file_id = H5Fcreate (name, H5F_ACC_TRUNC, octave_H5P_DEFAULT,
                              octave_H5P_DEFAULT);
     }
   if (file_id < 0)
     std::ios::setstate (std::ios::badbit);
 
   current_item = 0;
 
@@ -131,23 +137,28 @@ hdf5_fstreambase::close (void)
 
 void
 hdf5_fstreambase::open (const char *name, int mode, int)
 {
 #if defined (HAVE_HDF5)
 
   clear ();
 
+  const char *s_name = octave::sys::get_ASCII_filename (std::string (name)).c_str ();
+
   if (mode & std::ios::in)
-    file_id = H5Fopen (name, H5F_ACC_RDONLY, octave_H5P_DEFAULT);
+    file_id = H5Fopen (s_name, H5F_ACC_RDONLY, octave_H5P_DEFAULT);
   else if (mode & std::ios::out)
     {
-      if (mode & std::ios::app && H5Fis_hdf5 (name) > 0)
-        file_id = H5Fopen (name, H5F_ACC_RDWR, octave_H5P_DEFAULT);
+      if (mode & std::ios::app && H5Fis_hdf5 (s_name) > 0)
+        file_id = H5Fopen (s_name, H5F_ACC_RDWR, octave_H5P_DEFAULT);
       else
+        // FIXME: For Windows, create a file with an ASCII name in an
+        //        accessible folder, close the file move and rename using
+        //        wide character API and re-open.
         file_id = H5Fcreate (name, H5F_ACC_TRUNC, octave_H5P_DEFAULT,
                              octave_H5P_DEFAULT);
     }
   if (file_id < 0)
     std::ios::setstate (std::ios::badbit);
 
   current_item = 0;
 
