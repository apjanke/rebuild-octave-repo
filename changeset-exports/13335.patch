# HG changeset patch
# User Jacob Dawid <jacob.dawid@googlemail.com>
# Date 1302029127 -7200
#      Tue Apr 05 20:45:27 2011 +0200
# Node ID 609facb07bad8febd90cbce304ad2479e3456644
# Parent  677d14fe5d8e8431a9e00a17d98336d02626eed1
Refactored code, split clients into their own threads.

diff --git a/gui//client.cpp b/gui//client.cpp
--- a/gui//client.cpp
+++ b/gui//client.cpp
@@ -1,39 +1,33 @@
 #include "client.h"
 
 Client::Client(QString command)
-    : m_command(command) {
+    : QObject(),
+      m_command(command) {
+    m_thread.start();
+    moveToThread(&m_thread);
+
     m_process.start(m_command, QProcess::ReadWrite);
-    connect(&m_process, SIGNAL(readyReadStandardOutput()), this, SLOT(reemitDataAvailable()));
     connect(&m_process, SIGNAL(stateChanged(QProcess::ProcessState)), this, SLOT(handleProcessStatusChange(QProcess::ProcessState)));
     connect(&m_process, SIGNAL(finished(int,QProcess::ExitStatus)), this, SLOT(handleProcessFinished(int,QProcess::ExitStatus)));
+    connect(&m_process, SIGNAL(readyReadStandardOutput()), this, SLOT(reemitDataAvailable()));
     connect(&m_process, SIGNAL(readyReadStandardError()), this, SLOT(reemitErrorAvailable()));
 }
 
 void Client::send(QString content) {
     m_process.write(content.toLocal8Bit());
 }
 
-QString Client::fetch() {
-    QString fetchedInput(m_process.readAllStandardOutput());
-    return fetchedInput;
-}
-
-QString Client::errorMessage() {
-    QString error(m_process.readAllStandardError());
-    return error;
-}
-
 void Client::reemitDataAvailable() {
-    emit dataAvailable();
+    emit dataAvailable(m_process.readAllStandardOutput());
 }
 
 void Client::reemitErrorAvailable() {
-    emit errorAvailable();
+    emit errorAvailable(m_process.readAllStandardError());
 }
 
 void Client::handleProcessFinished(int exitCode, QProcess::ExitStatus exitStatus) {
     m_process.start(m_command, QProcess::ReadWrite);
 }
 
 void Client::handleProcessStatusChange(QProcess::ProcessState processState) {
     switch(processState) {
diff --git a/gui//client.h b/gui//client.h
--- a/gui//client.h
+++ b/gui//client.h
@@ -1,38 +1,36 @@
 #ifndef CLIENT_H
 #define CLIENT_H
 
 #include "clientmanager.h"
 #include <QProcess>
 #include <QObject>
-#include <QMutex>
+#include <QThread>
 
 class Client : public QObject {
     Q_OBJECT
     friend class ClientManager;
 
-public:
+public slots:
     void send(QString content);
-    QString fetch();
-    QString errorMessage();
 
 signals:
-    void dataAvailable();
-    void errorAvailable();
+    void dataAvailable(QString data);
+    void errorAvailable(QString error);
     void lostConnection();
 
 protected:
     Client(QString command);
 
 private slots:
     void reemitDataAvailable();
     void reemitErrorAvailable();
     void handleProcessFinished(int exitCode, QProcess::ExitStatus exitStatus);
     void handleProcessStatusChange(QProcess::ProcessState processState);
 
 private:
     QString m_command;
     QProcess m_process;
-    QMutex m_clientInRequest;
+    QThread m_thread;
 };
 
 #endif // CLIENT_H
diff --git a/gui//mainwindow.cpp b/gui//mainwindow.cpp
--- a/gui//mainwindow.cpp
+++ b/gui//mainwindow.cpp
@@ -1,16 +1,17 @@
-#include "mainwindow.h"
-#include "octaveterminal.h"
 
 #include <QMenuBar>
 #include <QMenu>
 #include <QAction>
 #include <QtWebKit/QWebView>
 
+#include "mainwindow.h"
+#include "octaveterminal.h"
+
 MainWindow::MainWindow(QWidget *parent)
     : QMainWindow(parent) {
     showMaximized();
     m_mdiArea = new QMdiArea();
     setCentralWidget(m_mdiArea);
 
     addOctaveTerminal();
     loadWebPage("Online Manual", "http://www.gnu.org/software/octave/doc/interpreter/");
diff --git a/gui//octaveterminal.cpp b/gui//octaveterminal.cpp
--- a/gui//octaveterminal.cpp
+++ b/gui//octaveterminal.cpp
@@ -31,43 +31,43 @@ OctaveTerminal::OctaveTerminal(QWidget *
     m_terminalHighlighter = new TerminalHighlighter(m_octaveOutput->document());
 }
 
 void OctaveTerminal::sendCommand() {
     QString command = m_commandLine->text();
     m_octaveOutput->setFontUnderline(true);
     m_octaveOutput->append(command);
     command.append("\n");
-    m_client->send(command);
+
+    QMetaObject::invokeMethod(m_client, "send", Q_ARG(QString, command));
+
     m_commandLine->clear();
 }
 
 void OctaveTerminal::blockUserInput() {
     m_commandLine->setEnabled(false);
 }
 
 void OctaveTerminal::allowUserInput() {
     m_commandLine->setEnabled(true);
     m_commandLine->setFocus();
 }
 
 void OctaveTerminal::assignClient(Client *client) {
     m_client = client;
-    connect(client, SIGNAL(dataAvailable()), this, SLOT(fetchDataFromClient()));
-    connect(client, SIGNAL(errorAvailable()), this, SLOT(fetchErrorFromClient()));
+    connect(client, SIGNAL(dataAvailable(QString)), this, SLOT(handleDataFromClient(QString)));
+    connect(client, SIGNAL(errorAvailable(QString)), this, SLOT(handleErrorFromClient(QString)));
     allowUserInput();
 }
 
 void OctaveTerminal::showEnvironment() {
     m_client->send("who\n");
 }
 
-void OctaveTerminal::fetchDataFromClient() {
-    QString fetchedData = m_client->fetch();
+void OctaveTerminal::handleDataFromClient(QString data) {
     m_octaveOutput->setFontUnderline(false);
-    m_octaveOutput->append(fetchedData);
+    m_octaveOutput->append(data);
 }
 
-void OctaveTerminal::fetchErrorFromClient() {
-    QString error = m_client->errorMessage();
+void OctaveTerminal::handleErrorFromClient(QString error) {
     m_octaveOutput->setFontUnderline(false);
     m_octaveOutput->append(error);
 }
diff --git a/gui//octaveterminal.h b/gui//octaveterminal.h
--- a/gui//octaveterminal.h
+++ b/gui//octaveterminal.h
@@ -23,18 +23,18 @@ public slots:
     void sendCommand();
     void blockUserInput();
     void allowUserInput();
 
     void assignClient(Client* client);
     void showEnvironment();
 
 protected slots:
-    void fetchDataFromClient();
-    void fetchErrorFromClient();
+    void handleDataFromClient(QString data);
+    void handleErrorFromClient(QString error);
 
 private:
     QToolBar *m_mainToolBar;
     QTextBrowser *m_octaveOutput;
     QLineEdit *m_commandLine;
     Client *m_client;
     TerminalHighlighter *m_terminalHighlighter;
 };
