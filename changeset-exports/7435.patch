# HG changeset patch
# User jwe
# Date 1201848468 0
#      Fri Feb 01 06:47:48 2008 +0000
# Node ID 464a55f1a5c2858d4aaa63093cc5beb625afecdd
# Parent  600a3af7963e58204f6ff551e87e72ba9d12b118
[project @ 2008-02-01 06:47:48 by jwe]

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,21 @@
+2008-01-30  Michael Goffioul  <michael.goffioul@gmail.com>
+
+	* graphics.h.in (axes::properties::get_transform_matrix,
+	axes::properties::get_inverse_transform_matrix,
+	axes::properties::get_opengl_matrix_1,
+	axes::properties::get_opengl_matrix_2,
+	axes::properties::get_transform_zlim): New accessors.
+	(base_properties::is_clipping): New accessor.
+	(class graphics_xform): New class encapsulating axes transformation.
+	(axes::properties::get_transform): New method returning a
+	graphics_xform object.
+	* graphics.cc (class graphics_xform): New class.
+
 2008-01-31  David Bateman  <dbateman@free.fr>
 
 	* ov.cc (octave_value::octave_value (const ArrayN<bool>&),
 	octave_value::octave_value (const Sparse<bool>&, const MatrixType &),
 	octave_value::octave_value (const ArrayN<std::streamoff>&)): New 
 	constructors.
 	* ov.h: (octave_value (const ArrayN<bool>&),
 	octave_value (const Sparse<bool>&, const MatrixType &),
diff --git a/src/graphics.cc b/src/graphics.cc
--- a/src/graphics.cc
+++ b/src/graphics.cc
@@ -2063,16 +2063,54 @@ axes::properties::get_boundingbox (void)
   pos = convert_position (get_position ().matrix_value (), get_units (),
 			  "pixels", b.get_canvas_size (__myhandle__), b);
   pos(0)--;
   pos(1)--;
 
   return pos;
 }
 
+ColumnVector
+graphics_xform::xform_vector (double x, double y, double z)
+{ return ::xform_vector (x, y, z); }
+
+Matrix
+graphics_xform::xform_eye (void)
+{ return ::xform_matrix (); }
+
+ColumnVector
+graphics_xform::transform (double x, double y, double z,
+			   bool use_scale) const
+{
+  if (use_scale)
+    {
+      x = sx.scale (x);
+      y = sy.scale (y);
+      z = sz.scale (z);
+    }
+
+  return ::transform (xform, x, y, z);
+}
+
+ColumnVector
+graphics_xform::untransform (double x, double y, double z,
+			     bool use_scale) const
+{
+  ColumnVector v = ::transform (xform_inv, x, y, z);
+
+  if (use_scale)
+    {
+      v(0) = sx.unscale (v(0));
+      v(1) = sy.unscale (v(1));
+      v(2) = sz.unscale (v(2));
+    }
+
+  return v;
+}
+
 octave_value
 axes::get_default (const caseless_str& name) const
 {
   octave_value retval = default_properties.lookup (name);
 
   if (retval.is_undefined ())
     {
       graphics_handle parent = get_parent ();
diff --git a/src/graphics.h.in b/src/graphics.h.in
--- a/src/graphics.h.in
+++ b/src/graphics.h.in
@@ -1269,16 +1269,17 @@ public:
   bool is_modified (void) const { return __modified__.is_on (); }
  
   graphics_handle get___myhandle__ (void) const { return __myhandle__; }
   
   std::string get_busyaction (void) const { return busyaction.current_value (); }
 
   octave_value get_buttondownfcn (void) const { return buttondownfcn.get (); }
 
+  bool is_clipping (void) const { return clipping.is_on (); }
   std::string get_clipping (void) const { return clipping.current_value (); }
 
   void execute_createfcn (const octave_value& data = octave_value ()) const
     { createfcn.execute (data); }
 
   octave_value get_createfcn (void) const { return createfcn.get (); }
 
   void execute_deletefcn (const octave_value& data = octave_value ()) const
@@ -2161,16 +2162,66 @@ public:
   bool valid_object (void) const { return true; }
 
 private:
   property_list default_properties;
 };
 
 // ---------------------------------------------------------------------
 
+class OCTINTERP_API graphics_xform
+{
+public:
+  graphics_xform (void)
+      : xform (xform_eye ()), xform_inv (xform_eye ())
+    {
+      sx = sy = sz = "linear";
+    }
+
+  graphics_xform (const Matrix& xm, const Matrix& xim,
+		  const scaler& x, const scaler& y, const scaler& z)
+      : xform (xm), xform_inv (xim), sx (x), sy (y), sz (z) { }
+
+  graphics_xform (const graphics_xform& g)
+      : xform (g.xform), xform_inv (g.xform_inv), sx (g.sx),
+        sy (g.sy), sz (g.sz) { }
+
+  ~graphics_xform (void) { }
+
+  graphics_xform& operator = (const graphics_xform& g)
+    {
+      xform = g.xform;
+      xform_inv = g.xform_inv;
+      sx = g.sx;
+      sy = g.sy;
+      sz = g.sz;
+
+      return *this;
+    }
+
+  static ColumnVector xform_vector (double x, double y, double z);
+
+  static Matrix xform_eye (void);
+
+  ColumnVector transform (double x, double y, double z,
+			  bool scale = true) const;
+  
+  ColumnVector untransform (double x, double y, double z,
+			    bool scale = true) const;
+
+  Matrix xscale (const Matrix& m) const { return sx.scale (m); }
+  Matrix yscale (const Matrix& m) const { return sy.scale (m); }
+  Matrix zscale (const Matrix& m) const { return sz.scale (m); }
+
+private:
+  Matrix xform;
+  Matrix xform_inv;
+  scaler sx, sy, sz;
+};
+
 class OCTINTERP_API axes : public base_graphics_object
 {
 public:
   class properties : public base_properties
   {
   public:
     void set_defaults (base_graphics_object& obj, const std::string& mode);
 
@@ -2187,16 +2238,25 @@ public:
     void update_camera (void);
     void update_aspectratios (void);
     void update_transform (void)
       {
 	update_aspectratios ();
 	update_camera ();
       }
 
+    graphics_xform get_transform (void) const
+      { return graphics_xform (x_render, x_render_inv, sx, sy, sz); }
+
+    Matrix get_transform_matrix (void) const { return x_render; }
+    Matrix get_inverse_transform_matrix (void) const { return x_render_inv; }
+    Matrix get_opengl_matrix_1 (void) const { return x_gl_mat1; }
+    Matrix get_opengl_matrix_2 (void) const { return x_gl_mat2; }
+    Matrix get_transform_zlim (void) const { return x_zlim; }
+
   private:
     scaler sx, sy, sz;
     Matrix x_render, x_render_inv;
     Matrix x_gl_mat1, x_gl_mat2;
     Matrix x_zlim;
 
     // See the genprops.awk script for an explanation of the
     // properties declarations.
