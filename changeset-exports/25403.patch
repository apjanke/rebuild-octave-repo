# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1527009829 14400
#      Tue May 22 13:23:49 2018 -0400
# Node ID 2b7d7a3f5f57357b9a0d99397aa56431f48a48f0
# Parent  ef2b9d4abf4a53ee185084d8399c81aa41b4bc2e
move returning, breaking, and continuing flags to evaluator

* pt-jump.cc: Delete.
* libinterp/parse-tree/module.mk: Update.

* pt-eval.h, pt-eval.cc (tree_evaluator::m_breaking,
tree_evaluator::m_continuing, tree_evaluator::m_returning,
tree_evaluator::breaking, tree_evaluator::continuing,
tree_evaluator::returning): New data members and functions.
* pt-jump.h (tree_break_command::breaking,
tree_continue_command::continuing, tree_return_command:returning):
Delete.  Change all uses to the corresponding evaluator variables.

(tree_evaluator::quit_loop_now): Now a private member function instead
of file-scope static function.

diff --git a/libinterp/corefcn/interpreter.cc b/libinterp/corefcn/interpreter.cc
--- a/libinterp/corefcn/interpreter.cc
+++ b/libinterp/corefcn/interpreter.cc
@@ -947,24 +947,24 @@ namespace octave
                 if (parser.m_stmt_list)
                   {
                     parser.m_stmt_list->accept (m_evaluator);
 
                     octave_quit ();
 
                     if (! application::interactive ())
                       {
-                        bool quit = (tree_return_command::returning
-                                     || tree_break_command::breaking);
+                        bool quit = (m_evaluator.returning ()
+                                     || m_evaluator.breaking ());
 
-                        if (tree_return_command::returning)
-                          tree_return_command::returning = 0;
+                        if (m_evaluator.returning ())
+                          m_evaluator.returning (0);
 
-                        if (tree_break_command::breaking)
-                          tree_break_command::breaking--;
+                        if (m_evaluator.breaking ())
+                          m_evaluator.breaking (m_evaluator.breaking () - 1)
 
                         if (quit)
                           break;
                       }
 
                     if (octave_completion_matches_called)
                       octave_completion_matches_called = false;
                     else
diff --git a/libinterp/parse-tree/module.mk b/libinterp/parse-tree/module.mk
--- a/libinterp/parse-tree/module.mk
+++ b/libinterp/parse-tree/module.mk
@@ -74,17 +74,16 @@ PARSE_TREE_SRC = \
   %reldir%/pt-eval.cc \
   %reldir%/pt-except.cc \
   %reldir%/pt-exp.cc \
   %reldir%/pt-fcn-handle.cc \
   %reldir%/pt-funcall.cc \
   %reldir%/pt-id.cc \
   %reldir%/pt-idx.cc \
   %reldir%/pt-jit.cc \
-  %reldir%/pt-jump.cc \
   %reldir%/pt-loop.cc \
   %reldir%/pt-mat.cc \
   %reldir%/pt-misc.cc \
   %reldir%/pt-pr-code.cc \
   %reldir%/pt-select.cc \
   %reldir%/pt-stmt.cc \
   %reldir%/pt-tm-const.cc \
   %reldir%/pt-unop.cc \
diff --git a/libinterp/parse-tree/oct-parse.in.yy b/libinterp/parse-tree/oct-parse.in.yy
--- a/libinterp/parse-tree/oct-parse.in.yy
+++ b/libinterp/parse-tree/oct-parse.in.yy
@@ -5440,19 +5440,17 @@ namespace octave
                     if (nargout == 0)
                       retval = octave_value_list ();
                   }
                 else if (nargout == 0)
                   parser.m_stmt_list->accept (tw);
                 else
                   error ("eval: invalid use of statement list");
 
-                if (tree_return_command::returning
-                    || tree_break_command::breaking
-                    || tree_continue_command::continuing)
+                if (tw.returning () || tw.breaking () || tw.continuing ())
                   break;
               }
             else if (parser.m_lexer.m_end_of_input)
               break;
           }
       }
     while (parse_status == 0);
 
diff --git a/libinterp/parse-tree/pt-eval.cc b/libinterp/parse-tree/pt-eval.cc
--- a/libinterp/parse-tree/pt-eval.cc
+++ b/libinterp/parse-tree/pt-eval.cc
@@ -327,17 +327,17 @@ namespace octave
         echo_code (line);
         m_echo_file_pos = line + 1;
       }
 
     if (m_debug_mode)
       do_breakpoint (cmd.is_breakpoint (true));
 
     if (m_in_loop_command)
-      tree_break_command::breaking = 1;
+      m_breaking = 1;
     else
       error ("break must appear in a loop in the same file as loop command");
   }
 
   void
   tree_evaluator::visit_colon_expression (tree_colon_expression& expr)
   {
     octave_value val;
@@ -409,17 +409,17 @@ namespace octave
         echo_code (line);
         m_echo_file_pos = line + 1;
       }
 
     if (m_debug_mode)
       do_breakpoint (cmd.is_breakpoint (true));
 
     if (m_in_loop_command)
-      tree_continue_command::continuing = 1;
+      m_continuing = 1;
   }
 
   bool
   tree_evaluator::statement_printing_enabled (void)
   {
     return ! (m_silent_functions && (m_statement_context == SC_FUNCTION
                                      || m_statement_context == SC_SCRIPT));
   }
@@ -932,37 +932,16 @@ namespace octave
             else
               init_val = Matrix ();
 
             ult.assign (octave_value::op_asn_eq, init_val);
           }
       }
   }
 
-  // Decide if it's time to quit a for or while loop.
-  static inline bool
-  quit_loop_now (void)
-  {
-    octave_quit ();
-
-    // Maybe handle 'continue N' someday...
-
-    if (tree_continue_command::continuing)
-      tree_continue_command::continuing--;
-
-    bool quit = (tree_return_command::returning
-                 || tree_break_command::breaking
-                 || tree_continue_command::continuing);
-
-    if (tree_break_command::breaking)
-      tree_break_command::breaking--;
-
-    return quit;
-  }
-
   void
   tree_evaluator::visit_simple_for_command (tree_simple_for_command& cmd)
   {
     size_t line = cmd.line ();
 
     if (m_echo_state)
       {
         echo_code (line);
@@ -1229,21 +1208,21 @@ namespace octave
     frame.add_method (script_scope, &symbol_scope::unbind_script_symbols);
     script_scope.bind_script_symbols (get_current_scope ());
 
     if (echo ())
       push_echo_state (frame, tree_evaluator::ECHO_SCRIPTS, file_name);
 
     cmd_list->accept (*this);
 
-    if (tree_return_command::returning)
-      tree_return_command::returning = 0;
-
-    if (tree_break_command::breaking)
-      tree_break_command::breaking--;
+    if (m_returning)
+      m_returning = 0;
+
+    if (m_breaking)
+      m_breaking--;
 
     return retval;
   }
 
   void
   tree_evaluator::visit_octave_user_function (octave_user_function&)
   {
     // ??
@@ -1414,21 +1393,21 @@ namespace octave
 
               retval = evaluate_n (expr, nargout);
             }
         }
       else
         cmd_list->accept (*this);
     }
 
-    if (tree_return_command::returning)
-      tree_return_command::returning = 0;
-
-    if (tree_break_command::breaking)
-      tree_break_command::breaking--;
+    if (m_returning)
+      m_returning = 0;
+
+    if (m_breaking)
+      m_breaking--;
 
     // Copy return values out.
 
     if (ret_list && ! user_function.is_special_expr ())
       {
         Cell varargout;
 
         if (ret_list->takes_varargs ())
@@ -2359,17 +2338,17 @@ namespace octave
       {
         Vdebugging = false;
 
         reset_debug_state ();
       }
     else if (m_statement_context == SC_FUNCTION
              || m_statement_context == SC_SCRIPT
              || m_in_loop_command)
-      tree_return_command::returning = 1;
+      m_returning = 1;
   }
 
   void
   tree_evaluator::visit_return_list (tree_return_list&)
   {
     panic_impossible ();
   }
 
@@ -2562,21 +2541,20 @@ namespace octave
 
             if (! elt)
               error ("invalid statement found in statement list!");
 
             octave_quit ();
 
             elt->accept (*this);
 
-            if (tree_break_command::breaking
-                || tree_continue_command::continuing)
+            if (m_breaking || m_continuing)
               break;
 
-            if (tree_return_command::returning)
+            if (m_returning)
               break;
 
             if (p == lst.end ())
               break;
             else
               {
                 // Clear previous values before next statement is
                 // evaluated so that we aren't holding an extra
@@ -2742,32 +2720,32 @@ namespace octave
     frame.add_method (m_call_stack, &call_stack::set_column,
                       m_call_stack.current_column ());
 
     // Similarly, if we have seen a return or break statement, allow all
     // the cleanup code to run before returning or handling the break.
     // We don't have to worry about continue statements because they can
     // only occur in loops.
 
-    frame.protect_var (tree_return_command::returning);
-    tree_return_command::returning = 0;
-
-    frame.protect_var (tree_break_command::breaking);
-    tree_break_command::breaking = 0;
+    frame.protect_var (m_returning);
+    m_returning = 0;
+
+    frame.protect_var (m_breaking);
+    m_breaking = 0;
 
     try
       {
         if (list)
           list->accept (*this);
       }
     catch (const execution_exception&)
       {
         interpreter::recover_from_exception ();
 
-        if (tree_break_command::breaking || tree_return_command::returning)
+        if (m_breaking || m_returning)
           frame.discard (2);
         else
           frame.run (2);
 
         frame.discard (2);
 
         throw;
       }
@@ -2794,17 +2772,17 @@ namespace octave
     //   endfunction
     //
     // If we reset the value of the breaking flag, both the returning
     // flag and the breaking flag will be set, and we shouldn't have
     // both.  So, use the most recent one.  If there is no return or
     // break in the cleanup block, the values should be reset to
     // whatever they were when the cleanup block was entered.
 
-    if (tree_break_command::breaking || tree_return_command::returning)
+    if (m_breaking || m_returning)
       frame.discard (2);
     else
       frame.run (2);
   }
 
   void
   tree_evaluator::visit_unwind_protect_command (tree_unwind_protect_command& cmd)
   {
@@ -3461,16 +3439,34 @@ namespace octave
                 = " (note: variable '" + var + "' shadows function)";
           }
       }
 
     std::string msg = e.message () + extra_message;
 
     error_with_id (e.err_id (), msg.c_str ());
   }
+
+  // Decide if it's time to quit a for or while loop.
+  bool tree_evaluator::quit_loop_now (void)
+  {
+    octave_quit ();
+
+    // Maybe handle 'continue N' someday...
+
+    if (m_continuing)
+      m_continuing--;
+
+    bool quit = (m_returning || m_breaking || m_continuing);
+
+    if (m_breaking)
+      m_breaking--;
+
+    return quit;
+  }
 }
 
 DEFMETHOD (max_recursion_depth, interp, args, nargout,
            doc: /* -*- texinfo -*-
 @deftypefn  {} {@var{val} =} max_recursion_depth ()
 @deftypefnx {} {@var{old_val} =} max_recursion_depth (@var{new_val})
 @deftypefnx {} {} max_recursion_depth (@var{new_val}, "local")
 Query or set the internal limit on the number of times a function may
diff --git a/libinterp/parse-tree/pt-eval.h b/libinterp/parse-tree/pt-eval.h
--- a/libinterp/parse-tree/pt-eval.h
+++ b/libinterp/parse-tree/pt-eval.h
@@ -131,16 +131,17 @@ namespace octave
         m_expr_result_value_list (), m_lvalue_list_stack (),
         m_nargout_stack (), m_bp_table (*this), m_call_stack (interp),
         m_profiler (), m_current_frame (0), m_debug_mode (false),
         m_quiet_breakpoint_flag (false), m_max_recursion_depth (256),
         m_silent_functions (false), m_string_fill_char (' '),
         m_PS4 ("+ "), m_dbstep_flag (0), m_echo (ECHO_OFF),
         m_echo_state (false), m_echo_file_name (), m_echo_file_pos (1),
         m_echo_files (), m_in_loop_command (false),
+        m_breaking (0), m_continuing (0), m_returning (0),
         m_indexed_object (nullptr), m_index_position (0), m_num_indices (0)
     { }
 
     // No copying!
 
     tree_evaluator (const tree_evaluator&) = delete;
 
     tree_evaluator& operator = (const tree_evaluator&) = delete;
@@ -458,16 +459,22 @@ namespace octave
     {
       return m_indexed_object;
     }
 
     int index_position (void) const { return m_index_position; }
 
     int num_indices (void) const { return m_num_indices; }
 
+    int breaking (void) const { return m_breaking; }
+
+    int continuing (void) const { return m_continuing; }
+
+    int returning (void) const { return m_returning; }
+
     octave_value echo (const octave_value_list& args, int nargout);
 
     int echo (void) const { return m_echo; }
 
     int echo (int val)
     {
       int old_val = m_echo;
       m_echo = val;
@@ -523,16 +530,18 @@ namespace octave
     }
 
     bool echo_this_file (const std::string& file, int type) const;
 
     void echo_code (size_t line);
 
     void final_index_error (index_exception& e, const tree_expression *expr);
 
+    bool quit_loop_now (void);
+
     interpreter& m_interpreter;
 
     // The context for the current evaluation.
     stmt_list_type m_statement_context;
 
     result_type m_result_type;
     octave_value m_expr_result_value;
     octave_value_list m_expr_result_value_list;
@@ -591,16 +600,25 @@ namespace octave
     // Next line to echo, counting from 1.
     size_t m_echo_file_pos;
 
     std::map<std::string, bool> m_echo_files;
 
     // TRUE means we are evaluating some kind of looping construct.
     bool m_in_loop_command;
 
+    // Nonzero means we're breaking out of a loop or function body.
+    int m_breaking;
+
+    // Nonzero means we're jumping to the end of a loop.
+    int m_continuing;
+
+    // Nonzero means we're returning from a function.
+    int m_returning;
+
     // Used by END function.
     const octave_value *m_indexed_object;
     int m_index_position;
     int m_num_indices;
   };
 }
 
 #if defined (OCTAVE_USE_DEPRECATED_FUNCTIONS)
diff --git a/libinterp/parse-tree/pt-jump.cc b/libinterp/parse-tree/pt-jump.cc
deleted file mode 100644
--- a/libinterp/parse-tree/pt-jump.cc
+++ /dev/null
@@ -1,47 +0,0 @@
-/*
-
-Copyright (C) 1996-2018 John W. Eaton
-
-This file is part of Octave.
-
-Octave is free software: you can redistribute it and/or modify it
-under the terms of the GNU General Public License as published by
-the Free Software Foundation, either version 3 of the License, or
-(at your option) any later version.
-
-Octave is distributed in the hope that it will be useful, but
-WITHOUT ANY WARRANTY; without even the implied warranty of
-MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-GNU General Public License for more details.
-
-You should have received a copy of the GNU General Public License
-along with Octave; see the file COPYING.  If not, see
-<https://www.gnu.org/licenses/>.
-
-*/
-
-#if defined (HAVE_CONFIG_H)
-#  include "config.h"
-#endif
-
-#include "pt-jump.h"
-
-class octave_value_list;
-
-namespace octave
-{
-  // Break.
-
-  // Nonzero means we're breaking out of a loop or function body.
-  int tree_break_command::breaking = 0;
-
-  // Continue.
-
-  // Nonzero means we're jumping to the end of a loop.
-  int tree_continue_command::continuing = 0;
-
-  // Return.
-
-  // Nonzero means we're returning from a function.
-  int tree_return_command::returning = 0;
-}
diff --git a/libinterp/parse-tree/pt-jump.h b/libinterp/parse-tree/pt-jump.h
--- a/libinterp/parse-tree/pt-jump.h
+++ b/libinterp/parse-tree/pt-jump.h
@@ -46,18 +46,16 @@ namespace octave
     tree_break_command& operator = (const tree_break_command&) = delete;
 
     ~tree_break_command (void) = default;
 
     void accept (tree_walker& tw)
     {
       tw.visit_break_command (*this);
     }
-
-    static int breaking;
   };
 
   // Continue.
 
   class tree_continue_command : public tree_command
   {
   public:
 
@@ -71,18 +69,16 @@ namespace octave
     tree_continue_command& operator = (const tree_continue_command&) = delete;
 
     ~tree_continue_command (void) = default;
 
     void accept (tree_walker& tw)
     {
       tw.visit_continue_command (*this);
     }
-
-    static int continuing;
   };
 
   // Return.
 
   class tree_return_command : public tree_command
   {
   public:
 
@@ -96,18 +92,16 @@ namespace octave
     tree_return_command& operator = (const tree_return_command&) = delete;
 
     ~tree_return_command (void) = default;
 
     void accept (tree_walker& tw)
     {
       tw.visit_return_command (*this);
     }
-
-    static int returning;
   };
 }
 
 #if defined (OCTAVE_USE_DEPRECATED_FUNCTIONS)
 
 OCTAVE_DEPRECATED (4.4, "use 'octave::tree_break_command' instead")
 typedef octave::tree_break_command tree_break_command;
 
