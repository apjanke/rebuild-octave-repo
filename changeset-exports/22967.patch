# HG changeset patch
# User Markus Muetzel <markus.muetzel@gmx.de>
# Date 1468253305 -7200
#      Mon Jul 11 18:08:25 2016 +0200
# Node ID 3c896180df16cd0212c337700fcc188504a35042
# Parent  6d83c2ae0a093d9d8ea3c1c3291583baad2665f6
Pass additional arguments for fminsearch to called function (bug #41888).

* fminsearch.m: Pass additional arguments to called function.  Add additional
calling form to docstring.

diff --git a/scripts/optimization/fminsearch.m b/scripts/optimization/fminsearch.m
--- a/scripts/optimization/fminsearch.m
+++ b/scripts/optimization/fminsearch.m
@@ -15,32 +15,37 @@
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {} {@var{x} =} fminsearch (@var{fun}, @var{x0})
 ## @deftypefnx {} {@var{x} =} fminsearch (@var{fun}, @var{x0}, @var{options})
+## @deftypefnx {} {@var{x} =} fminsearch (@var{fun}, @var{x0}, @var{options}, @var{fun_arg1}, @var{fun_arg2}, @dots{})
 ## @deftypefnx {} {[@var{x}, @var{fval}] =} fminsearch (@dots{})
 ##
 ## Find a value of @var{x} which minimizes the function @var{fun}.
 ##
 ## The search begins at the point @var{x0} and iterates using the
 ## @nospell{Nelder & Mead} Simplex algorithm (a derivative-free method).  This
 ## algorithm is better-suited to functions which have discontinuities or for
 ## which a gradient-based search such as @code{fminunc} fails.
 ##
 ## Options for the search are provided in the parameter @var{options} using the
 ## function @code{optimset}.  Currently, @code{fminsearch} accepts the options:
 ## @qcode{"TolX"}, @qcode{"MaxFunEvals"}, @qcode{"MaxIter"}, @qcode{"Display"}.
 ## For a description of these options, see @code{optimset}.
 ##
+## Additional inputs for the function @var{fun} can be passed as the fourth
+## and higher arguments.  To pass function arguments while using the default
+## @var{options} values, use @code{[]} for @var{options}.
+##
 ## On exit, the function returns @var{x}, the minimum point, and @var{fval},
-## the function value thereof.
+## the function value at the minimum.
 ##
 ## Example usages:
 ##
 ## @example
 ## @group
 ## fminsearch (@@(x) (x(1)-5).^2+(x(2)-8).^4, [0;0])
 ##
 ## fminsearch (inline ("(x(1)-5).^2+(x(2)-8).^4", "x"), [0;0])
@@ -53,32 +58,36 @@
 ## PKG_ADD: [~] = __all_opts__ ("fminsearch");
 
 ## FIXME: Add support for "exitflag" output variable.
 ## FIXME: Add support for "output" output variable.
 ## FIXME: For Display option, add 'final' and 'notify' options.  Not too hard.
 ## FIXME: Add support for OutputFcn.  See fminunc for a template.
 ## FIXME: Add support for exiting based on TolFun.  See fminunc for an idea.
 
-function [x, fval] = fminsearch (fun, x0, options = struct ())
+function [x, fval] = fminsearch (fun, x0, options, varargin)
 
   ## Get default options if requested.
   if (nargin == 1 && ischar (fun) && strcmp (fun, "defaults"))
     x = optimset ("Display", "notify", "FunValCheck", "off",
                   "MaxFunEvals", 400, "MaxIter", 400,
                   "OutputFcn", [],
                   "TolFun", 1e-7, "TolX", 1e-4);
     return;
   endif
 
-  if (nargin < 2 || nargin > 3)
+  if (nargin < 2)
     print_usage ();
   endif
+  
+  if (nargin < 3 || isempty (options))
+    options = struct ();
+  endif
 
-  x = nmsmax (fun, x0, options);
+  x = nmsmax (fun, x0, options, varargin{:});
 
   if (isargout (2))
     fval = feval (fun, x);
   endif
 
 endfunction
 
 ##NMSMAX  Nelder-Mead simplex method for direct search optimization.
@@ -116,17 +125,17 @@ endfunction
 ##    and Applied Mathematics, Philadelphia, PA, 1999.
 
 ## From Matrix Toolbox
 ## Copyright (C) 2002, 2013 N.J.Higham
 ## www.maths.man.ac.uk/~higham/mctoolbox
 ##
 ## Modifications for Octave by A.Adler 2003
 
-function [stopit, savit, dirn, trace, tol, maxiter] = parse_options (options, x )
+function [stopit, savit, dirn, trace, tol, maxiter] = parse_options (options, x)
 
   ## Tolerance for cgce test based on relative size of simplex.
   stopit(1) = tol = optimget (options, "TolX", 1e-4);
 
   ## Max no. of f-evaluations.
   stopit(2) = optimget (options, "MaxFunEvals", length (x) * 200);
 
   ## Max no. of iterations
@@ -150,17 +159,17 @@ function [stopit, savit, dirn, trace, to
   ## Use function to minimize, not maximize
   stopit(6) = dirn = -1;
 
   ## Filename for snapshots.
   savit = [];  # FIXME: expose this parameter to the outside
 
 endfunction
 
-function [x, fmax, nf] = nmsmax (fun, x, options, savit, varargin)
+function [x, fmax, nf] = nmsmax (fun, x, options, varargin)
 
   [stopit, savit, dirn, trace, tol, maxiter] = parse_options (options, x);
 
   if (strcmpi (optimget (options, "FunValCheck", "off"), "on"))
     ## Replace fcn with a guarded version.
     fun = @(x) guarded_eval (fun, x);
   endif
 
@@ -345,16 +354,25 @@ endfunction
 %! x0 = [0;0];
 %! [xmin, fval] = fminsearch (fcn, x0)
 
 %!assert (fminsearch (@sin, 3, optimset ("MaxIter", 30)), 3*pi/2, 1e-4)
 %!test
 %! c = 1.5;
 %! assert (fminsearch (@(x) x(1).^2+c*x(2).^2,[1;1]), [0;0], 1e-4);
 
+## Additional argument
+%!test
+%! x1 = fminsearch (@(x, c) x(1).^2 + c*x(2).^2, [1;1], [], 1.5);
+%! assert (x1, [0;0], 1e-4);
+%! x1 = fminsearch (@(x, c) x(1).^2 + c*x(2).^2, [1;1], ...
+%!                  optimset ("Display", "none"), 1.5);
+%! assert (x1, [0;0], 1e-4);
+
+## Test input validation
 %!error fminsearch ()
 %!error fminsearch (1)
 
 ## Tests for guarded_eval
 %!error <non-real value encountered>
 %! fminsearch (@(x) ([0 2i]), 0, optimset ("FunValCheck", "on"));
 %!error <NaN value encountered>
 %! fminsearch (@(x) (NaN), 0, optimset ("FunValCheck", "on"));
