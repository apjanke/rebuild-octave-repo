# HG changeset patch
# User Joe Winegarden <joewino19@gmail.com>
# Date 1516745113 18000
#      Tue Jan 23 17:05:13 2018 -0500
# Node ID 2ce26c4cb323dc93437d05a6fb8ac658bba7043c
# Parent  800876b7132c24dd6cd977f022a765f91515aad9
More descriptive error message for assignment to empty structure (bug #36003).

* errwarn.cc (err_invalid_structure_assignment): New error message function

* errwarn.h (err_invalid_structure_assignment): New error message function

* pt-eval.cc (tree_evaluator::visit_simple_assignment): Call new error message
function instead of misleading error message

diff --git a/libinterp/corefcn/errwarn.cc b/libinterp/corefcn/errwarn.cc
--- a/libinterp/corefcn/errwarn.cc
+++ b/libinterp/corefcn/errwarn.cc
@@ -72,16 +72,22 @@ err_invalid_conversion (const std::strin
 
 void
 err_invalid_inquiry_subscript (void)
 {
   error ("invalid dimension inquiry of a non-existent value");
 }
 
 void
+err_invalid_structure_assignment (void)
+{
+  error ("invalid dot name structure assignment because the structure array is empty.  Specify a subscript on the structure array to resolve.");
+}
+
+void
 err_nonbraced_cs_list_assignment (void)
 {
   error ("invalid assignment to cs-list outside multiple assignment");
 }
 
 void
 err_nonconformant (void)
 {
diff --git a/libinterp/corefcn/errwarn.h b/libinterp/corefcn/errwarn.h
--- a/libinterp/corefcn/errwarn.h
+++ b/libinterp/corefcn/errwarn.h
@@ -54,16 +54,19 @@ err_indexed_cs_list (void);
 
 OCTAVE_NORETURN OCTINTERP_API extern void
 err_invalid_conversion (const std::string& from, const std::string& to);
 
 OCTAVE_NORETURN OCTINTERP_API extern void
 err_invalid_inquiry_subscript (void);
 
 OCTAVE_NORETURN OCTINTERP_API extern void
+err_invalid_structure_assignment (void);
+
+OCTAVE_NORETURN OCTINTERP_API extern void
 err_nonbraced_cs_list_assignment (void);
 
 OCTAVE_NORETURN OCTINTERP_API extern void
 err_nonconformant (void);
 
 OCTAVE_NORETURN OCTINTERP_API extern void
 err_nonconformant (octave_idx_type r1, octave_idx_type c1,
                    octave_idx_type r2, octave_idx_type c2);
diff --git a/libinterp/parse-tree/pt-eval.cc b/libinterp/parse-tree/pt-eval.cc
--- a/libinterp/parse-tree/pt-eval.cc
+++ b/libinterp/parse-tree/pt-eval.cc
@@ -2206,17 +2206,17 @@ namespace octave
             lvalue_list.push_back (ult);
 
             m_lvalue_list_stack.push (&lvalue_list);
 
             frame.add_method (m_lvalue_list_stack,
                               &value_stack<const std::list<octave_lvalue>*>::pop);
 
             if (ult.numel () != 1)
-              err_nonbraced_cs_list_assignment ();
+              err_invalid_structure_assignment ();
 
             octave_value::assign_op etype = expr.op_type ();
 
             ult.assign (etype, rhs_val);
 
             if (etype == octave_value::op_asn_eq)
               val = rhs_val;
             else
diff --git a/test/struct.tst b/test/struct.tst
--- a/test/struct.tst
+++ b/test/struct.tst
@@ -159,17 +159,17 @@
 %!error id=Octave:index-out-of-bounds
 %! a(1).x.x = 1;
 %! a(2).x;
 
 %!error <invalid number of output arguments for constant expression>
 %! a = struct ("value", {1, 2, 3, 4, 5});
 %! [a(2:4).value] = 1;
 
-%!error <invalid assignment to cs-list outside multiple assignment>
+%!error <invalid dot name structure assignment>
 %! c(4, 4, 4, 4).name  = "a";
 %! c(3, 3, 3, 3).value = 1;
 %! c([1, 3], 2, :, [3, 4]).value = 1;
 
 ## test lazy copying in structs: nested assignment to self
 %!test
 %! a.a = 1;
 %! a.b = a;
