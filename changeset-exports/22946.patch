# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1482798581 18000
#      Mon Dec 26 19:29:41 2016 -0500
# Node ID 32ec45de162f6a627772939de7669205d12d9931
# Parent  eb01d01781887b694923d55a6593f89ea23fd927
use F77_INT instead of octave_idx_type for liboctave hess class

* hess.h, hess.cc: Use F77_INT instead of octave_idx_type for integer
data passed to Fortran subroutines.  Use octave_f77_int_type in
public header file.

diff --git a/liboctave/numeric/hess.cc b/liboctave/numeric/hess.cc
--- a/liboctave/numeric/hess.cc
+++ b/liboctave/numeric/hess.cc
@@ -35,30 +35,30 @@ along with Octave; see the file COPYING.
 namespace octave
 {
   namespace math
   {
     template <>
     octave_idx_type
     hess<Matrix>::init (const Matrix& a)
     {
-      octave_idx_type a_nr = a.rows ();
-      octave_idx_type a_nc = a.cols ();
+      F77_INT a_nr = to_f77_int (a.rows ());
+      F77_INT a_nc = to_f77_int (a.cols ());
 
       if (a_nr != a_nc)
         (*current_liboctave_error_handler) ("hess: requires square matrix");
 
       char job = 'N';
       char side = 'R';
 
-      octave_idx_type n = a_nc;
-      octave_idx_type lwork = 32 * n;
-      octave_idx_type info;
-      octave_idx_type ilo;
-      octave_idx_type ihi;
+      F77_INT n = a_nc;
+      F77_INT lwork = 32 * n;
+      F77_INT info;
+      F77_INT ilo;
+      F77_INT ihi;
 
       hess_mat = a;
       double *h = hess_mat.fortran_vec ();
 
       Array<double> scale (dim_vector (n, 1));
       double *pscale = scale.fortran_vec ();
 
       F77_XFCN (dgebal, DGEBAL, (F77_CONST_CHAR_ARG2 (&job, 1),
@@ -87,41 +87,41 @@ namespace octave
                                  F77_CHAR_ARG_LEN (1)
                                  F77_CHAR_ARG_LEN (1)));
 
       // If someone thinks of a more graceful way of doing
       // this (or faster for that matter :-)), please let
       // me know!
 
       if (n > 2)
-        for (octave_idx_type j = 0; j < a_nc; j++)
-          for (octave_idx_type i = j+2; i < a_nr; i++)
+        for (F77_INT j = 0; j < a_nc; j++)
+          for (F77_INT i = j+2; i < a_nr; i++)
             hess_mat.elem (i, j) = 0;
 
       return info;
     }
 
     template <>
     octave_idx_type
     hess<FloatMatrix>::init (const FloatMatrix& a)
     {
-      octave_idx_type a_nr = a.rows ();
-      octave_idx_type a_nc = a.cols ();
+      F77_INT a_nr = to_f77_int (a.rows ());
+      F77_INT a_nc = to_f77_int (a.cols ());
 
       if (a_nr != a_nc)
         (*current_liboctave_error_handler) ("hess: requires square matrix");
 
       char job = 'N';
       char side = 'R';
 
-      octave_idx_type n = a_nc;
-      octave_idx_type lwork = 32 * n;
-      octave_idx_type info;
-      octave_idx_type ilo;
-      octave_idx_type ihi;
+      F77_INT n = a_nc;
+      F77_INT lwork = 32 * n;
+      F77_INT info;
+      F77_INT ilo;
+      F77_INT ihi;
 
       hess_mat = a;
       float *h = hess_mat.fortran_vec ();
 
       Array<float> scale (dim_vector (n, 1));
       float *pscale = scale.fortran_vec ();
 
       F77_XFCN (sgebal, SGEBAL, (F77_CONST_CHAR_ARG2 (&job, 1),
@@ -150,41 +150,41 @@ namespace octave
                                  F77_CHAR_ARG_LEN (1)
                                  F77_CHAR_ARG_LEN (1)));
 
       // If someone thinks of a more graceful way of doing
       // this (or faster for that matter :-)), please let
       // me know!
 
       if (n > 2)
-        for (octave_idx_type j = 0; j < a_nc; j++)
-          for (octave_idx_type i = j+2; i < a_nr; i++)
+        for (F77_INT j = 0; j < a_nc; j++)
+          for (F77_INT i = j+2; i < a_nr; i++)
             hess_mat.elem (i, j) = 0;
 
       return info;
     }
 
     template <>
     octave_idx_type
     hess<ComplexMatrix>::init (const ComplexMatrix& a)
     {
-      octave_idx_type a_nr = a.rows ();
-      octave_idx_type a_nc = a.cols ();
+      F77_INT a_nr = to_f77_int (a.rows ());
+      F77_INT a_nc = to_f77_int (a.cols ());
 
       if (a_nr != a_nc)
         (*current_liboctave_error_handler) ("hess: requires square matrix");
 
       char job = 'N';
       char side = 'R';
 
-      octave_idx_type n = a_nc;
-      octave_idx_type lwork = 32 * n;
-      octave_idx_type info;
-      octave_idx_type ilo;
-      octave_idx_type ihi;
+      F77_INT n = a_nc;
+      F77_INT lwork = 32 * n;
+      F77_INT info;
+      F77_INT ilo;
+      F77_INT ihi;
 
       hess_mat = a;
       Complex *h = hess_mat.fortran_vec ();
 
       Array<double> scale (dim_vector (n, 1));
       double *pscale = scale.fortran_vec ();
 
       F77_XFCN (zgebal, ZGEBAL, (F77_CONST_CHAR_ARG2 (&job, 1),
@@ -213,44 +213,44 @@ namespace octave
                                  F77_CHAR_ARG_LEN (1)
                                  F77_CHAR_ARG_LEN (1)));
 
       // If someone thinks of a more graceful way of
       // doing this (or faster for that matter :-)),
       // please let me know!
 
       if (n > 2)
-        for (octave_idx_type j = 0; j < a_nc; j++)
-          for (octave_idx_type i = j+2; i < a_nr; i++)
+        for (F77_INT j = 0; j < a_nc; j++)
+          for (F77_INT i = j+2; i < a_nr; i++)
             hess_mat.elem (i, j) = 0;
 
       return info;
     }
 
     template <>
     octave_idx_type
     hess<FloatComplexMatrix>::init (const FloatComplexMatrix& a)
     {
-      octave_idx_type a_nr = a.rows ();
-      octave_idx_type a_nc = a.cols ();
+      F77_INT a_nr = to_f77_int (a.rows ());
+      F77_INT a_nc = to_f77_int (a.cols ());
 
       if (a_nr != a_nc)
         {
           (*current_liboctave_error_handler) ("hess: requires square matrix");
           return -1;
         }
 
       char job = 'N';
       char side = 'R';
 
-      octave_idx_type n = a_nc;
-      octave_idx_type lwork = 32 * n;
-      octave_idx_type info;
-      octave_idx_type ilo;
-      octave_idx_type ihi;
+      F77_INT n = a_nc;
+      F77_INT lwork = 32 * n;
+      F77_INT info;
+      F77_INT ilo;
+      F77_INT ihi;
 
       hess_mat = a;
       FloatComplex *h = hess_mat.fortran_vec ();
 
       Array<float> scale (dim_vector (n, 1));
       float *pscale = scale.fortran_vec ();
 
       F77_XFCN (cgebal, CGEBAL, (F77_CONST_CHAR_ARG2 (&job, 1),
@@ -279,17 +279,17 @@ namespace octave
                                  F77_CHAR_ARG_LEN (1)
                                  F77_CHAR_ARG_LEN (1)));
 
       // If someone thinks of a more graceful way of
       // doing this (or faster for that matter :-)),
       // please let me know!
 
       if (n > 2)
-        for (octave_idx_type j = 0; j < a_nc; j++)
-          for (octave_idx_type i = j+2; i < a_nr; i++)
+        for (F77_INT j = 0; j < a_nc; j++)
+          for (F77_INT i = j+2; i < a_nr; i++)
             hess_mat.elem (i, j) = 0;
 
       return info;
     }
   }
 }
 
