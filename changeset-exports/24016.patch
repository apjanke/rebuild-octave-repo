# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1504724452 14400
#      Wed Sep 06 15:00:52 2017 -0400
# Node ID e327adeae7a047df4420196dc2074beabcfcd271
# Parent  5ecefb7425e3d7098e4b05a68b090bb45a9d2d84
hide mutex and wait condition data members in GUI objects

* dialog.h, dialog.cc (class QUIWidgetCreator): Make mutex and
waitcondition data members private.  Provide lock, unlock, wait, and
wake_all functions.  Change all uses.

* octave-qt-link.h, octave-qt-link.cc (class octave_qt_link):
Likewise.

diff --git a/libgui/src/dialog.cc b/libgui/src/dialog.cc
--- a/libgui/src/dialog.cc
+++ b/libgui/src/dialog.cc
@@ -56,80 +56,80 @@ QUIWidgetCreator::~QUIWidgetCreator (voi
   delete m_list_index;
   delete m_path_name;
 }
 
 void
 QUIWidgetCreator::dialog_button_clicked (QAbstractButton *button)
 {
   // Wait for link thread to go to sleep state.
-  mutex.lock ();
+  lock ();
 
   // Store the value so that builtin functions can retrieve.
   if (button)
     m_dialog_button = button->text ();
 
   // The value should always be 1 for the Octave functions.
   m_dialog_result = 1;
 
-  mutex.unlock ();
+  unlock ();
 
   // Wake up Octave process so that it continues.
-  waitcondition.wakeAll ();
+  wake_all ();
 }
 
 void
 QUIWidgetCreator::list_select_finished (const QIntList& selected,
                                         int button_pressed)
 {
   // Wait for link thread to go to sleep state.
-  mutex.lock ();
+  lock ();
 
   // Store the value so that builtin functions can retrieve.
   *m_list_index = selected;
   m_dialog_result = button_pressed;
 
-  mutex.unlock ();
+  unlock ();
 
   // Wake up Octave process so that it continues.
-  waitcondition.wakeAll ();
+  wake_all ();
 }
 
 void
 QUIWidgetCreator::input_finished (const QStringList& input, int button_pressed)
 {
   // Wait for link thread to go to sleep state.
-  mutex.lock ();
+  lock ();
 
   // Store the value so that builtin functions can retrieve.
   *m_string_list = input;
   m_dialog_result = button_pressed;
 
-  mutex.unlock ();
+  unlock ();
 
   // Wake up Octave process so that it continues.
-  waitcondition.wakeAll ();
+  wake_all ();
 }
 
 void
 QUIWidgetCreator::filedialog_finished (const QStringList& files,
                                        const QString& path, int filterindex)
 {
   // Wait for link thread to go to sleep state.
-  mutex.lock ();
+  lock ();
 
   // Store the value so that builtin functions can retrieve.
   *m_string_list = files;
   m_dialog_result = filterindex;
   *m_path_name = path;
 
-  mutex.unlock ();
+  unlock ();
 
   // Wake up Octave process so that it continues.
-  waitcondition.wakeAll ();
+  wake_all ();
 }
 
 MessageDialog::MessageDialog (const QString& message,
                               const QString& title,
                               const QString& qsicon,
                               const QStringList& qsbutton,
                               const QString& defbutton,
                               const QStringList& role)
diff --git a/libgui/src/dialog.h b/libgui/src/dialog.h
--- a/libgui/src/dialog.h
+++ b/libgui/src/dialog.h
@@ -109,21 +109,20 @@ public:
                           const QString& multimode)
   {
     emit create_filedialog (filters, title, filename, dirname, multimode);
     return true;
   }
 
   const QString * get_dialog_path (void) { return m_path_name; }
 
-  // GUI objects cannot be accessed in the non-GUI thread.  However,
-  // signals can be sent to slots across threads with proper
-  // synchronization.  Hence, the use of QWaitCondition.
-  QMutex mutex;
-  QWaitCondition waitcondition;
+  void lock (void) { m_mutex.lock (); }
+  void wait (void) { m_waitcondition.wait (&m_mutex); }
+  void unlock (void) { m_mutex.unlock (); }
+  void wake_all (void) { m_waitcondition.wakeAll (); }
 
 signals:
 
   void create_dialog (const QString&, const QString&, const QString&,
                       const QStringList&, const QString&, const QStringList&);
 
   void create_listview (const QStringList&, const QString&, int, int,
                         const QIntList&, const QString&, const QStringList&,
@@ -153,16 +152,22 @@ private:
   QString m_dialog_button;
 
   // The list could conceivably be big.  Not sure how things are
   // stored internally, so keep off of the stack.
   QStringList *m_string_list;
   QIntList *m_list_index;
 
   QString *m_path_name;
+
+  // GUI objects cannot be accessed in the non-GUI thread.  However,
+  // signals can be sent to slots across threads with proper
+  // synchronization.  Hence, the use of QWaitCondition.
+  QMutex m_mutex;
+  QWaitCondition m_waitcondition;
 };
 
 extern QUIWidgetCreator uiwidget_creator;
 
 class MessageDialog : public QMessageBox
 {
   Q_OBJECT
 
diff --git a/libgui/src/main-window.cc b/libgui/src/main-window.cc
--- a/libgui/src/main-window.cc
+++ b/libgui/src/main-window.cc
@@ -932,25 +932,24 @@ main_window::confirm_shutdown_octave (vo
 
 #if defined (HAVE_QSCINTILLA)
       if (closenow)
         closenow = editor_window->check_closing ();
 #endif
     }
 
   // Wait for link thread to go to sleep state.
-  _octave_qt_link->mutex.lock ();
+  _octave_qt_link->lock ();
 
   _octave_qt_link->shutdown_confirmation (closenow);
 
-  _octave_qt_link->mutex.unlock ();
+  _octave_qt_link->unlock ();
 
   // Awake the worker thread so that it continues shutting down (or not).
-  _octave_qt_link->waitcondition.wakeAll ();
-
+  _octave_qt_link->wake_all ();
 }
 
 void
 main_window::prepare_to_exit (void)
 {
   // Find files dialog is constructed dynamically, not at time of main_window
   // construction.  Connecting it to qApp aboutToQuit signal would have
   // caused it to run after QSettings deleted.
diff --git a/libgui/src/octave-qt-link.cc b/libgui/src/octave-qt-link.cc
--- a/libgui/src/octave-qt-link.cc
+++ b/libgui/src/octave-qt-link.cc
@@ -53,26 +53,26 @@ octave_qt_link::octave_qt_link (QWidget 
   m_current_directory = "";
   m_new_dir = true;
 }
 
 bool
 octave_qt_link::do_confirm_shutdown (void)
 {
   // Lock the mutex before emitting signal.
-  mutex.lock ();
+  lock ();
 
   emit confirm_shutdown_signal ();
 
   // Wait while the GUI shuts down.
-  waitcondition.wait (&mutex);
+  wait ();
 
   // The GUI has sent a signal and the thread has been awakened.
 
-  mutex.unlock ();
+  unlock ();
 
   return m_shutdown_confirm_result;
 }
 
 bool
 octave_qt_link::do_copy_image_to_clipboard (const std::string& file)
 {
   emit copy_image_to_clipboard_signal (QString::fromStdString (file), true);
@@ -98,58 +98,58 @@ octave_qt_link::do_prompt_new_edit_file 
 
   QFileInfo file_info (QString::fromStdString (file));
   QStringList btn;
   QStringList role;
   role << "YesRole" << "RejectRole";
   btn << tr ("Create") << tr ("Cancel");
 
   // Lock mutex before signaling.
-  uiwidget_creator.mutex.lock ();
+  uiwidget_creator.lock ();
 
   uiwidget_creator.signal_dialog (
     tr ("File\n%1\ndoes not exist. Do you want to create it?").
     arg (QDir::currentPath () + QDir::separator ()
          + QString::fromStdString (file)),
     tr ("Octave Editor"), "quest", btn, tr ("Create"), role);
 
   // Wait while the user is responding to message box.
-  uiwidget_creator.waitcondition.wait (&uiwidget_creator.mutex);
+  uiwidget_creator.wait ();
 
   // The GUI has sent a signal and the thread has been awakened.
 
   QString answer = uiwidget_creator.get_dialog_button ();
 
-  uiwidget_creator.mutex.unlock ();
+  uiwidget_creator.unlock ();
 
   return (answer == tr ("Create"));
 }
 
 int
 octave_qt_link::do_message_dialog (const std::string& dlg,
                                    const std::string& msg,
                                    const std::string& title)
 {
   // Lock mutex before signaling.
-  uiwidget_creator.mutex.lock ();
+  uiwidget_creator.lock ();
 
   uiwidget_creator.signal_dialog (QString::fromStdString (msg),
                                   QString::fromStdString (title),
                                   QString::fromStdString (dlg),
                                   QStringList (), QString (),
                                   QStringList ());
 
   // Wait while the user is responding to message box.
-  uiwidget_creator.waitcondition.wait (&uiwidget_creator.mutex);
+  uiwidget_creator.wait ();
 
   // The GUI has sent a signal and the thread has been awakened.
 
   int answer = uiwidget_creator.get_dialog_result ();
 
-  uiwidget_creator.mutex.unlock ();
+  uiwidget_creator.unlock ();
 
   return answer;
 }
 
 std::string
 octave_qt_link::do_question_dialog (const std::string& msg,
                                     const std::string& title,
                                     const std::string& btn1,
@@ -164,33 +164,33 @@ octave_qt_link::do_question_dialog (cons
   btn << QString::fromStdString (btn1);
   if (btn2 == "")
     role.removeAt (0);
   else
     btn << QString::fromStdString (btn2);
   btn << QString::fromStdString (btn3);
 
   // Lock mutex before signaling.
-  uiwidget_creator.mutex.lock ();
+  uiwidget_creator.lock ();
 
   uiwidget_creator.signal_dialog (QString::fromStdString (msg),
                                   QString::fromStdString (title),
                                   "quest",
                                   btn,
                                   QString::fromStdString (btndef),
                                   role);
 
   // Wait while the user is responding to message box.
-  uiwidget_creator.waitcondition.wait (&uiwidget_creator.mutex);
+  uiwidget_creator.wait ();
 
   // The GUI has sent a signal and the thread has been awakened.
 
   std::string answer = uiwidget_creator.get_dialog_button ().toStdString ();
 
-  uiwidget_creator.mutex.unlock ();
+  uiwidget_creator.unlock ();
 
   return answer;
 }
 
 static QStringList
 make_qstring_list (const std::list<std::string>& lst)
 {
   QStringList retval;
@@ -244,66 +244,66 @@ octave_qt_link::do_list_dialog (const st
                                 int width, int height,
                                 const std::list<int>& initial,
                                 const std::string& name,
                                 const std::list<std::string>& prompt,
                                 const std::string& ok_string,
                                 const std::string& cancel_string)
 {
   // Lock mutex before signaling.
-  uiwidget_creator.mutex.lock ();
+  uiwidget_creator.lock ();
 
   uiwidget_creator.signal_listview (make_qstring_list (list),
                                     QString::fromStdString (mode),
                                     width, height,
                                     QList<int>::fromStdList (initial),
                                     QString::fromStdString (name),
                                     make_qstring_list (prompt),
                                     QString::fromStdString (ok_string),
                                     QString::fromStdString (cancel_string));
 
   // Wait while the user is responding to message box.
-  uiwidget_creator.waitcondition.wait (&uiwidget_creator.mutex);
+  uiwidget_creator.wait ();
 
   // The GUI has sent a signal and the thread has been awakened.
 
   const QIntList *selected = uiwidget_creator.get_list_index ();
   int ok = uiwidget_creator.get_dialog_result ();
 
-  uiwidget_creator.mutex.unlock ();
+  uiwidget_creator.unlock ();
 
   return std::pair<std::list<int>, int> (selected->toStdList (), ok);
 }
 
 std::list<std::string>
 octave_qt_link::do_input_dialog (const std::list<std::string>& prompt,
                                  const std::string& title,
                                  const std::list<float>& nr,
                                  const std::list<float>& nc,
                                  const std::list<std::string>& defaults)
 {
   std::list<std::string> retval;
 
   // Lock mutex before signaling.
-  uiwidget_creator.mutex.lock ();
+  uiwidget_creator.lock ();
 
   uiwidget_creator.signal_inputlayout (make_qstring_list (prompt),
                                        QString::fromStdString (title),
                                        QFloatList::fromStdList (nr),
                                        QFloatList::fromStdList (nc),
                                        make_qstring_list (defaults));
 
   // Wait while the user is responding to message box.
-  uiwidget_creator.waitcondition.wait (&uiwidget_creator.mutex);
+  uiwidget_creator.wait ();
 
   // The GUI has sent a signal and the thread has been awakened.
 
   const QStringList *inputLine = uiwidget_creator.get_string_list ();
 
-  uiwidget_creator.mutex.unlock ();
+  uiwidget_creator.unlock ();
 
   for (QStringList::const_iterator it = inputLine->begin ();
        it != inputLine->end (); it++)
     {
       retval.push_back (it->toStdString ());
     }
 
   return retval;
@@ -314,41 +314,41 @@ octave_qt_link::do_file_dialog (const fi
                                 const std::string& title,
                                 const std::string& filename,
                                 const std::string& dirname,
                                 const std::string& multimode)
 {
   std::list<std::string> retval;
 
   // Lock mutex before signaling.
-  uiwidget_creator.mutex.lock ();
+  uiwidget_creator.lock ();
 
   uiwidget_creator.signal_filedialog (make_filter_list (filter),
                                       QString::fromStdString (title),
                                       QString::fromStdString (filename),
                                       QString::fromStdString (dirname),
                                       QString::fromStdString (multimode));
 
   // Wait while the user is responding to dialog.
-  uiwidget_creator.waitcondition.wait (&uiwidget_creator.mutex);
+  uiwidget_creator.wait ();
 
   // The GUI has sent a signal and the thread has been awakened.
 
   // Add all the file dialog results to a string list.
   const QStringList *inputLine = uiwidget_creator.get_string_list ();
 
   for (QStringList::const_iterator it = inputLine->begin ();
        it != inputLine->end (); it++)
     retval.push_back (it->toStdString ());
 
   retval.push_back (uiwidget_creator.get_dialog_path ()->toStdString ());
   retval.push_back ((QString ("%1").arg (
                        uiwidget_creator.get_dialog_result ())).toStdString ());
 
-  uiwidget_creator.mutex.unlock ();
+  uiwidget_creator.unlock ();
 
   return retval;
 }
 
 // Prompt to allow file to be run by setting cwd (or if addpath_option==true,
 // alternatively setting the path).
 // This uses a QMessageBox unlike other functions in this file,
 // because uiwidget_creator.waitcondition.wait hangs when called from
@@ -381,28 +381,28 @@ octave_qt_link::do_debug_cd_or_addpath_e
     {
       btn << addpath_txt;
       role << "AcceptRole";
     }
   btn << cancel_txt;
   role << "RejectRole";
 
   // Lock mutex before signaling.
-  uiwidget_creator.mutex.lock ();
+  uiwidget_creator.lock ();
 
   uiwidget_creator.signal_dialog (msg, title, "quest", btn, cancel_txt, role);
 
   // Wait while the user is responding to message box.
-  uiwidget_creator.waitcondition.wait (&uiwidget_creator.mutex);
+  uiwidget_creator.wait ();
 
   // The GUI has sent a signal and the thread has been awakened.
 
   QString result = uiwidget_creator.get_dialog_button ();
 
-  uiwidget_creator.mutex.unlock ();
+  uiwidget_creator.unlock ();
 
   if (result == cd_txt)
     retval = 1;
   else if (result == addpath_txt)
     retval = 2;
 
   return retval;
 }
diff --git a/libgui/src/octave-qt-link.h b/libgui/src/octave-qt-link.h
--- a/libgui/src/octave-qt-link.h
+++ b/libgui/src/octave-qt-link.h
@@ -140,31 +140,36 @@ public:
   void do_show_preferences (void);
 
   void do_show_doc (const std::string& file);
 
   void do_openvar (const std::string &name);
 
   void shutdown_confirmation (bool sd) { m_shutdown_confirm_result = sd; }
 
-  QMutex mutex;
-  QWaitCondition waitcondition;
+  void lock (void) { m_mutex.lock (); }
+  void wait (void) { m_waitcondition.wait (&m_mutex); }
+  void unlock (void) { m_mutex.unlock (); }
+  void wake_all (void) { m_waitcondition.wakeAll (); }
 
 private:
 
   void do_insert_debugger_pointer (const std::string& file, int line);
   void do_delete_debugger_pointer (const std::string& file, int line);
 
   octave::gui_application *m_app_context;
 
   bool m_shutdown_confirm_result;
 
   QString m_current_directory;
   bool m_new_dir;
 
+  QMutex m_mutex;
+  QWaitCondition m_waitcondition;
+
 signals:
 
   void copy_image_to_clipboard_signal (const QString& file, bool remove_file);
 
   void edit_file_signal (const QString& file);
 
   void change_directory_signal (const QString& dir);
 
