# HG changeset patch
# User jwe
# Date 1107936245 0
#      Wed Feb 09 08:04:05 2005 +0000
# Node ID 100f9c190be4d0e214d395ee767b6d0ebb9d2b90
# Parent  8eaef366ab4339a5d38ecb10bed50de716dda2a5
[project @ 2005-02-09 08:02:58 by jwe]

diff --git a/liboctave/Array-util.cc b/liboctave/Array-util.cc
--- a/liboctave/Array-util.cc
+++ b/liboctave/Array-util.cc
@@ -203,18 +203,21 @@ freeze (Array<idx_vector>& ra_idx, const
   dim_vector retval;
 
   int n = ra_idx.length ();
 
   assert (n == dimensions.length ());
 
   retval.resize (n);
 
+  static const char *tag[3] = { "row", "column", 0 };
+
   for (int i = 0; i < n; i++)
-    retval(i) = ra_idx(i).freeze (dimensions(i), "XXX FIXME XXX", resize_ok);
+    retval(i) = ra_idx(i).freeze (dimensions(i), tag[i < 2 ? i : 3],
+				  resize_ok);
 
   return retval;
 }
 
 bool
 vector_equivalent (const Array<int>& ra_idx)
 {
   int n = ra_idx.length ();
diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,12 @@
+2005-02-08  John W. Eaton  <jwe@octave.org>
+
+	* Array-util.cc (freeze): Improve error message.
+
 2005-01-26  David Bateman <dbateman@free.fr>
 
 	* Array.cc (Array<T>::insert): Handle generic case, not just
 	special case for fast concatenation.
 
 2005-01-18  John W. Eaton  <jwe@octave.org>
 
 	* mx-inlines.cc (MX_ND_REDUCTION): Delete RET_ELT_TYPE arg.
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,12 @@
+2005-02-08  Walter Landry  <landry@osc.edu>
+
+	* symtab.h (symbol_record::mark_as_command): Avoid AIX compiler error.
+
 2005-02-07  John W. Eaton  <jwe@octave.org>
 
 	* DLD-FUNCTIONS/find.cc (find_nonzero_elem_idx): Return [] instead
 	of [](1x0) for scalar arg of zero.
 
 2005-02-06  John W. Eaton  <jwe@octave.org>
 
 	* DLD-FUNCTIONS/gplot.l (tmp_files): Delete.
diff --git a/src/symtab.h b/src/symtab.h
--- a/src/symtab.h
+++ b/src/symtab.h
@@ -111,18 +111,19 @@ private:
 	return (symbol_type & symbol_record::USER_FUNCTION
 		|| symbol_type & symbol_record::DLD_FUNCTION
 		|| symbol_type & symbol_record::BUILTIN_FUNCTION);
       }
 
     bool is_user_variable (void) const
       { return (symbol_type & symbol_record::USER_VARIABLE); }
 
+    // Don't use |= here to avoid error with AIX compiler.
     void mark_as_command (void)
-      { symbol_type |= symbol_record::COMMAND; }
+      { symbol_type = symbol_type | symbol_record::COMMAND; }
 
     void unmark_command (void)
       { symbol_type &= ~symbol_record::COMMAND; }
 
     bool is_command (void) const
       { return (symbol_type & symbol_record::COMMAND); }
 
     void mark_as_rawcommand (void)
