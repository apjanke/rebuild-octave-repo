# HG changeset patch
# User Rik <rik@octave.org>
# Date 1375908169 25200
#      Wed Aug 07 13:42:49 2013 -0700
# Node ID 9deb214ae9d5352edf5d9c3f147662c0e7ca81f2
# Parent  81f3b09e3e6e32cc8087f2337b2853c75c6b3d43
Use 2-D, not 2D, in error messages.

* libinterp/corefcn/cellfun.cc, libinterp/corefcn/ls-oct-ascii.cc,
libinterp/octave-value/ov-bool-sparse.cc,
libinterp/octave-value/ov-cx-sparse.cc, libinterp/octave-value/ov-re-sparse.cc,
scripts/plot/private/__go_draw_axes__.m,
scripts/polynomial/private/__splinefit__.m, scripts/sparse/svds.m,
scripts/special-matrix/gallery.m: Use 2-D, not 2D, in error messages.

diff --git a/libinterp/corefcn/cellfun.cc b/libinterp/corefcn/cellfun.cc
--- a/libinterp/corefcn/cellfun.cc
+++ b/libinterp/corefcn/cellfun.cc
@@ -2224,17 +2224,17 @@ mat2cell (reshape (1:16,4,4), [3,1], [3,
           if (error_state)
             return retval;
         }
 
       octave_value a = args(0);
       bool sparse = a.is_sparse_type ();
       if (sparse && nargin > 3)
         {
-          error ("mat2cell: sparse arguments only support 2D indexing");
+          error ("mat2cell: sparse arguments only support 2-D indexing");
           return retval;
         }
 
       switch (a.builtin_type ())
         {
         case btyp_double:
           {
             if (sparse)
diff --git a/libinterp/corefcn/ls-oct-ascii.cc b/libinterp/corefcn/ls-oct-ascii.cc
--- a/libinterp/corefcn/ls-oct-ascii.cc
+++ b/libinterp/corefcn/ls-oct-ascii.cc
@@ -362,17 +362,17 @@ save_three_d (std::ostream& os, const oc
 {
   bool fail = false;
 
   octave_idx_type nr = tc.rows ();
   octave_idx_type nc = tc.columns ();
 
   if (tc.is_real_matrix ())
     {
-      os << "# 3D data...\n"
+      os << "# 3-D data...\n"
          << "# type: matrix\n"
          << "# total rows: " << nr << "\n"
          << "# total columns: " << nc << "\n";
 
       long old_precision = os.precision ();
       os.precision (6);
 
       if (parametric)
@@ -403,17 +403,17 @@ save_three_d (std::ostream& os, const oc
                 os << "\n";
             }
         }
 
       os.precision (old_precision);
     }
   else
     {
-      ::error ("for now, I can only save real matrices in 3D format");
+      ::error ("for now, I can only save real matrices in 3-D format");
       fail = true;
     }
 
   return (os && ! fail);
 }
 
 DEFUN (save_precision, args, nargout,
     "-*- texinfo -*-\n\
diff --git a/libinterp/octave-value/ov-bool-sparse.cc b/libinterp/octave-value/ov-bool-sparse.cc
--- a/libinterp/octave-value/ov-bool-sparse.cc
+++ b/libinterp/octave-value/ov-bool-sparse.cc
@@ -268,17 +268,17 @@ octave_sparse_bool_matrix::load_binary (
   int32_t nz, nc, nr, tmp;
   if (! is.read (reinterpret_cast<char *> (&tmp), 4))
     return false;
 
   if (swap)
     swap_bytes<4> (&tmp);
 
   if (tmp != -2) {
-    error ("load: only 2D sparse matrices are supported");
+    error ("load: only 2-D sparse matrices are supported");
     return false;
   }
 
   if (! is.read (reinterpret_cast<char *> (&nr), 4))
     return false;
   if (! is.read (reinterpret_cast<char *> (&nc), 4))
     return false;
   if (! is.read (reinterpret_cast<char *> (&nz), 4))
diff --git a/libinterp/octave-value/ov-cx-sparse.cc b/libinterp/octave-value/ov-cx-sparse.cc
--- a/libinterp/octave-value/ov-cx-sparse.cc
+++ b/libinterp/octave-value/ov-cx-sparse.cc
@@ -300,17 +300,17 @@ octave_sparse_complex_matrix::load_binar
 
   if (! is.read (reinterpret_cast<char *> (&tmp), 4))
     return false;
 
   if (swap)
     swap_bytes<4> (&tmp);
 
   if (tmp != -2) {
-    error ("load: only 2D sparse matrices are supported");
+    error ("load: only 2-D sparse matrices are supported");
     return false;
   }
 
   if (! is.read (reinterpret_cast<char *> (&nr), 4))
     return false;
   if (! is.read (reinterpret_cast<char *> (&nc), 4))
     return false;
   if (! is.read (reinterpret_cast<char *> (&nz), 4))
diff --git a/libinterp/octave-value/ov-re-sparse.cc b/libinterp/octave-value/ov-re-sparse.cc
--- a/libinterp/octave-value/ov-re-sparse.cc
+++ b/libinterp/octave-value/ov-re-sparse.cc
@@ -333,17 +333,17 @@ octave_sparse_matrix::load_binary (std::
 
   if (! is.read (reinterpret_cast<char *> (&tmp), 4))
     return false;
 
   if (swap)
     swap_bytes<4> (&tmp);
 
   if (tmp != -2) {
-    error ("load: only 2D sparse matrices are supported");
+    error ("load: only 2-D sparse matrices are supported");
     return false;
   }
 
   if (! is.read (reinterpret_cast<char *> (&nr), 4))
     return false;
   if (! is.read (reinterpret_cast<char *> (&nc), 4))
     return false;
   if (! is.read (reinterpret_cast<char *> (&nz), 4))
diff --git a/scripts/plot/private/__go_draw_axes__.m b/scripts/plot/private/__go_draw_axes__.m
--- a/scripts/plot/private/__go_draw_axes__.m
+++ b/scripts/plot/private/__go_draw_axes__.m
@@ -647,17 +647,17 @@ function __go_draw_axes__ (h, plot_strea
              hidden_removal = false;
            else
 
              if (isnan (hidden_removal))
                hidden_removal = true;
              endif
              if (nd == 3)
                if (numel (xcol) > 3)
-                 error ("__go_draw_axes__: gnuplot (as of v4.2) only supports 3D filled triangular patches");
+                 error ("__go_draw_axes__: gnuplot (as of v4.2) only supports 3-D filled triangular patches");
                else
                  if (isnan (data_3d_idx))
                    data_idx++;
                    data_3d_idx = data_idx;
                    is_image_data(data_idx) = false;
                    parametric(data_idx) = false;
                    have_cdata(data_idx) = true;
                    have_3d_patch(data_idx) = true;
diff --git a/scripts/polynomial/private/__splinefit__.m b/scripts/polynomial/private/__splinefit__.m
--- a/scripts/polynomial/private/__splinefit__.m
+++ b/scripts/polynomial/private/__splinefit__.m
@@ -382,17 +382,17 @@ else
     % Reshape array
     yc = reshape(yc,pdim,nx);
 end
 
 % Check cc
 if isempty(cc)
     cc = ones(size(xc));
 elseif numel(size(cc)) ~= 2
-    error('arguments:ccsize1','Constraint coefficients cc must be 2D.')
+    error('arguments:ccsize1','Constraint coefficients cc must be 2-D.')
 elseif size(cc,2) ~= nx
     mess = 'Last dimension of cc must equal length of xc.';
     error('arguments:ccsize2',mess)
 end
 
 % Check high order derivatives
 if size(cc,1) >= n
     if any(any(cc(n:end,:)))
diff --git a/scripts/sparse/svds.m b/scripts/sparse/svds.m
--- a/scripts/sparse/svds.m
+++ b/scripts/sparse/svds.m
@@ -94,17 +94,17 @@ function [u, s, v, flag] = svds (A, k, s
 
   persistent root2 = sqrt (2);
 
   if (nargin < 1 || nargin > 4)
     print_usage ();
   endif
 
   if (ndims (A) > 2)
-    error ("svds: A must be a 2D matrix");
+    error ("svds: A must be a 2-D matrix");
   endif
 
   if (nargin < 4)
     opts.tol = 0;   ## use ARPACK default
     opts.disp = 0;
     opts.maxit = 300;
   else
     if (!isstruct (opts))
diff --git a/scripts/special-matrix/gallery.m b/scripts/special-matrix/gallery.m
--- a/scripts/special-matrix/gallery.m
+++ b/scripts/special-matrix/gallery.m
@@ -797,17 +797,17 @@ function C = compar (A, k = 0)
   ##
   ##         Reference (e.g.):
   ##         N.J. Higham, A survey of condition number estimation for
   ##         triangular matrices, SIAM Review, 29 (1987), pp. 575-596.
 
   if (nargin < 1 || nargin > 2)
     error ("gallery: 1 or 2 arguments are required for compar matrix.");
   elseif (! isnumeric (A) || ndims (A) != 2)
-    error ("gallery: A must be a 2D matrix for compar matrix.");
+    error ("gallery: A must be a 2-D matrix for compar matrix.");
   elseif (! isnumeric (k) || ! isscalar (k))
     error ("gallery: K must be a numeric scalar for compar matrix.");
   endif
 
   [m, n] = size (A);
   p = min (m, n);
 
   if (k == 0)
@@ -1625,17 +1625,17 @@ function B = krylov (A, x, j)
   ##
   ##           Reference:
   ##           G.H. Golub and C.F. Van Loan, Matrix Computations, second edition,
   ##           Johns Hopkins University Press, Baltimore, Maryland, 1989, p. 369.
 
   if (nargin < 1 || nargin > 3)
     error ("gallery: 1 to 3 arguments are required for krylov matrix.");
   elseif (! isnumeric (A) || ! issquare (A) || ndims (A) != 2)
-    error ("gallery: A must be a square 2D matrix for krylov matrix.");
+    error ("gallery: A must be a square 2-D matrix for krylov matrix.");
   endif
 
   n = length (A);
   if (isscalar (A))
     n = A;
     A = randn (n);
   endif
 
