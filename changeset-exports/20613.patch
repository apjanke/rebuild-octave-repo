# HG changeset patch
# User Carlo de Falco <carlo.defalco@polimi.it>
# Date 1444685309 -7200
#      Mon Oct 12 23:28:29 2015 +0200
# Node ID 27c091f4b66dc3d462eb18c947d4d752254a40f4
# Parent  05c77bc1d20473ad7d5edc0089b4b84dfcda9fb0
allow first argument in ode45 to be a string

* scripts/ode/ode45.m: allow first argument to be a string

diff --git a/scripts/ode/ode45.m b/scripts/ode/ode45.m
--- a/scripts/ode/ode45.m
+++ b/scripts/ode/ode45.m
@@ -126,17 +126,20 @@ function varargout = ode45 (vfun, vtrang
   vtrange = vtrange(:);
 
   if (! isvector (vinit) || ! isnumeric (vinit))
     error ("OdePkg:InvalidArgument",
            "third input argument must be a valid numerical value");
   endif
   vinit = vinit(:);
 
-  if (! (isa (vfun, "function_handle")))
+  if (ischar (vfun))
+    try; vfun = str2func (vfun); catch; warning (lasterr); end_try_catch
+  endif
+  if (! (isa (vfun, "function_handle")))        
     error ("OdePkg:InvalidArgument",
            "first input argument must be a valid function handle");
   endif
 
   ## Start preprocessing, have a look which options are set in vodeoptions,
   ## check if an invalid or unused option is set
   if (isempty (vodeoptions.TimeStepNumber)
       && isempty (vodeoptions.TimeStepSize))
@@ -504,28 +507,34 @@ endfunction
 %!
 %! ## Turn off output of warning messages for all tests, turn them on
 %! ## again if the last test is called
 %!error  # ouput argument
 %! warning ("off", "OdePkg:InvalidArgument");
 %! B = ode45 (1, [0 25], [3 15 1]);
 %!error  # input argument number one
 %! [vt, vy] = ode45 (1, [0 25], [3 15 1]);
+%!error  # input argument number one as name of non existing function
+%! [vt, vy] = ode45 ("non-existing-function"", [0 25], [3 15 1]);
 %!error  # input argument number two
 %! [vt, vy] = ode45 (@fpol, 1, [3 15 1]);
 %!test  # two output arguments
 %! [vt, vy] = ode45 (@fpol, [0 2], [2 0]);
 %! assert ([vt(end), vy(end,:)], [2, fref], 1e-2);
 %!test  # not too many steps
 %! [vt, vy] = ode45 (@fpol, [0 2], [2 0]);
 %! assert (size (vt) < 20);
 %!test  # anonymous function instead of real function
 %! fvdb = @(vt,vy) [vy(2); (1 - vy(1)^2) * vy(2) - vy(1)];
 %! [vt, vy] = ode45 (fvdb, [0 2], [2 0]);
 %! assert ([vt(end), vy(end,:)], [2, fref], 1e-2);
+%!test  # string instead of function
+%! fvdb = @(vt,vy) [vy(2); (1 - vy(1)^2) * vy(2) - vy(1)];
+%! [vt, vy] = ode45 ("atan2", [0 2], [2 0]);
+%! assert ([vt(end), vy(end,:)], [2, fref], 1e-2);
 %!test  # extra input arguments passed through
 %! [vt, vy] = ode45 (@fpol, [0 2], [2 0], 12, 13, "KL");
 %! assert ([vt(end), vy(end,:)], [2, fref], 1e-2);
 %!test  # empty OdePkg structure *but* extra input arguments
 %! vopt = odeset;
 %! [vt, vy] = ode45 (@fpol, [0 2], [2 0], vopt, 12, 13, "KL");
 %! assert ([vt(end), vy(end,:)], [2, fref], 1e-2);
 %!error  # strange OdePkg structure
@@ -653,15 +662,14 @@ endfunction
 %!test  # Mass option as function and MStateDependence
 %! vopt = odeset ("Mass", @fmas, "MStateDependence", "strong");
 %! vsol = ode45 (@fpol, [0 2], [2 0], vopt);
 %! assert ([vsol.x(end), vsol.y(end,:)], [2, fref], 1e-3);
 %!test  # Set BDF option to something else than default
 %! vopt = odeset ("BDF", "on");
 %! [vt, vy] = ode45 (@fpol, [0 2], [2 0], vopt);
 %! assert ([vt(end), vy(end,:)], [2, fref], 1e-3);
-%!
+%!test  #
 %!## test for MvPattern option is missing
 %!## test for InitialSlope option is missing
 %!## test for MaxOrder option is missing
 %!
 %! warning ("on", "OdePkg:InvalidArgument");
-
