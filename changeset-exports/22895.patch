# HG changeset patch
# User Rik <rik@octave.org>
# Date 1481850310 28800
#      Thu Dec 15 17:05:10 2016 -0800
# Node ID 0ab9eecbb16588620f26d1f5bbd7444e3b20c4f0
# Parent  5ff6716cf157069fb0aab590c3bc2376029a7bb9
Concatenate empty matrices/cells in cat() the same as the parser (bug #49759).

* data.cc (do_cat): Strip out empty matrices when doing cell concatenation.
* data.cc (Fcat): New BIST tests.

diff --git a/libinterp/corefcn/data.cc b/libinterp/corefcn/data.cc
--- a/libinterp/corefcn/data.cc
+++ b/libinterp/corefcn/data.cc
@@ -1807,21 +1807,31 @@ do_cat (const octave_value_list& xargs, 
           if (! any_cell_p && args(i).is_cell ())
             any_cell_p = true;
           if (! any_class_p && args(i).is_object ())
             any_class_p = true;
         }
 
       if (any_cell_p && ! any_class_p && ! first_elem_is_struct)
         {
+          int j = 0;
           for (int i = 0; i < n_args; i++)
             {
-              if (! args(i).is_cell ())
-                args(i) = Cell (args(i));
+              if (args(i).is_cell ())
+                args(j++) = args(i);
+              else
+                {
+                  if (args(i).is_empty ())
+                    continue;  // Delete empty non-cell arg
+                  else
+                    args(j++) = Cell (args(i));
+                }
             }
+          n_args = j;
+          args.resize (n_args);
         }
 
       if (any_class_p)
         {
           retval = do_class_concat (args, fname, dim);
         }
       else if (result_type == "double")
         {
@@ -2407,16 +2417,22 @@ cat (4, ones (2, 2), zeros (2, 2))
 
 %!assert (cat (3, [], [], 1, 2), cat (3, 1, 2))
 %!assert (cat (3, [], [], [1,2;3,4]), [1,2;3,4])
 %!assert (cat (4, [], [], [1,2;3,4]), [1,2;3,4])
 
 %!assert ([zeros(3,2,2); ones(1,2,2)], repmat ([0;0;0;1],[1,2,2]))
 %!assert ([zeros(3,2,2); ones(1,2,2)], vertcat (zeros (3,2,2), ones (1,2,2)))
 
+%!test <49759>
+%! A = [];
+%! B = {1; 2};
+%! assert (cat (1, A, B), {1; 2});
+%! assert (cat (2, A, B), {1; 2});
+
 %!error <dimension mismatch> cat (3, cat (3, [], []), [1,2;3,4])
 %!error <dimension mismatch> cat (3, zeros (0, 0, 2), [1,2;3,4])
 */
 
 static octave_value
 do_permute (const octave_value_list& args, bool inv)
 {
   if (args.length () != 2 || args(1).length () < args(1).ndims ())
