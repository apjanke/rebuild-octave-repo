# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1368389868 14400
#      Sun May 12 16:17:48 2013 -0400
# Node ID 64f9a3e301d3fdb47e56ebe9f679df2adf3b046d
# Parent  0ee7b4d1b940e2778daca8b169457ed0e5ce2a98
don't store default values in resource manager class

* QTerminal.h, QTerminal.cc (QTerminal::default_colors,
QTerminal::color_names): New functions.
(QTerminal::notice_settings): Call default_colors.
* workspace-model.h, workspace-model.cc
(workspace_model::storage_class_default_colors,
workspace_model::storage_class_names): New functions.
* resource-manager.cc (resource_manager::storage_class_names,
resource_manager::storage_class_default_colors): Get values from
workspace_model.
(resource_manager::terminal_color_names,
resource_manager::terminal_default_colors): Get values from QTerminal.

diff --git a/libgui/qterminal/libqterminal/QTerminal.cc b/libgui/qterminal/libqterminal/QTerminal.cc
--- a/libgui/qterminal/libqterminal/QTerminal.cc
+++ b/libgui/qterminal/libqterminal/QTerminal.cc
@@ -33,16 +33,48 @@ QTerminal::create (QWidget *xparent)
 {
 #if defined (Q_OS_WIN32)
   return new QWinTerminalImpl (xparent);
 #else
   return new QUnixTerminalImpl (xparent);
 #endif
 }
 
+QList<QColor>
+QTerminal::default_colors (void)
+{
+  static QList<QColor> colors;
+
+  if (colors.isEmpty ())
+    {
+      colors << QColor(0,0,0)
+             << QColor(255,255,255)
+             << QColor(192,192,192)
+             << QColor(128,128,128);
+    }
+
+  return colors;
+}
+
+QStringList
+QTerminal::color_names (void)
+{
+  static QStringList names;
+
+  if (names.isEmpty ())
+    {
+      names << QObject::tr ("foreground")
+            << QObject::tr ("background")
+            << QObject::tr ("selection")
+            << QObject::tr ("cursor");
+    }
+
+  return names;
+}
+
 void
 QTerminal::notice_settings (const QSettings *settings)
 {
   // QSettings pointer is checked before emitting.
 
   // Set terminal font:
   QFont term_font = QFont ();
   term_font.setFamily
@@ -63,34 +95,27 @@ QTerminal::notice_settings (const QSetti
   else if (cursorType == "block")
     setCursorType (QTerminal::BlockCursor, cursorBlinking);
   else if (cursorType == "underline")
     setCursorType (QTerminal::UnderlineCursor, cursorBlinking);
 
   bool cursorUseForegroundColor
     = settings->value ("terminal/cursorUseForegroundColor", true).toBool ();
 
-  // FIXME -- we shouldn't duplicate this information here and in the
-  // resource manager.
-  QList<QColor> default_colors;
-
-  default_colors << QColor(0,0,0)
-                 << QColor(255,255,255)
-                 << QColor(192,192,192)
-                 << QColor(128,128,128);
+  QList<QColor> colors = default_colors ();
 
   setForegroundColor
     (settings->value ("terminal/color_f",
-                      QVariant (default_colors.at (0))).value<QColor> ());
+                      QVariant (colors.at (0))).value<QColor> ());
 
   setBackgroundColor
     (settings->value ("terminal/color_b",
-                      QVariant (default_colors.at (1))).value<QColor> ());
+                      QVariant (colors.at (1))).value<QColor> ());
 
   setSelectionColor
     (settings->value ("terminal/color_s",
-                      QVariant (default_colors.at (2))).value<QColor> ());
+                      QVariant (colors.at (2))).value<QColor> ());
 
   setCursorColor
     (cursorUseForegroundColor,
      settings->value ("terminal/color_c",
-                      QVariant (default_colors.at (3))).value<QColor> ());
+                      QVariant (colors.at (3))).value<QColor> ());
 }
diff --git a/libgui/qterminal/libqterminal/QTerminal.h b/libgui/qterminal/libqterminal/QTerminal.h
--- a/libgui/qterminal/libqterminal/QTerminal.h
+++ b/libgui/qterminal/libqterminal/QTerminal.h
@@ -21,27 +21,33 @@ along with Foobar.  If not, see <http://
 */
 
 #ifndef QTERMINAL_H
 #define QTERMINAL_H
 
 #include <QSettings>
 #include <QtGlobal>
 #include <QWidget>
+#include <QStringList>
 #include <QColor>
+#include <QList>
 #include <QMenu>
 
 class QTerminal : public QWidget
 {
   Q_OBJECT
 
 public:
 
   static QTerminal *create (QWidget *xparent = 0);
 
+  static QList<QColor> default_colors (void);
+
+  static QStringList color_names (void);
+
   virtual ~QTerminal (void) { }
 
   virtual void setTerminalFont(const QFont& font) = 0;
 
   virtual void setSize(int h, int v) = 0;
 
   virtual void sendText(const QString& text) = 0;
 
diff --git a/libgui/src/resource-manager.cc b/libgui/src/resource-manager.cc
--- a/libgui/src/resource-manager.cc
+++ b/libgui/src/resource-manager.cc
@@ -28,21 +28,24 @@ along with Octave; see the file COPYING.
 
 #include <QFile>
 #include <QDir>
 #include <QNetworkProxy>
  #include <QLibraryInfo>
 
 #include "error.h"
 #include "file-ops.h"
+#include "help.h"
 #include "oct-env.h"
 #include "singleton-cleanup.h"
 
 #include "defaults.h"
 
+#include "QTerminal.h"
+#include "workspace-model.h"
 #include "resource-manager.h"
 
 resource_manager *resource_manager::instance = 0;
 
 static QString
 default_qt_settings_file (void)
 {
   std::string dsf = octave_env::getenv ("OCTAVE_DEFAULT_QT_SETTINGS");
@@ -193,51 +196,35 @@ resource_manager::do_update_network_sett
   proxy.setPassword (settings->value ("proxyPassword").toString ());
 
   QNetworkProxy::setApplicationProxy (proxy);
 }
 
 QStringList 
 resource_manager::storage_class_names (void)
 {
-  return QStringList () << QObject::tr ("automatic")
-                        << QObject::tr ("function")
-                        << QObject::tr ("global")
-                        << QObject::tr ("hidden")
-                        << QObject::tr ("inherited")
-                        << QObject::tr ("persistent");
+  return workspace_model::storage_class_names ();
 }
 
 QList<QColor>
 resource_manager::storage_class_default_colors (void)
 {
-  return QList<QColor> () << QColor(190,255,255)
-                          << QColor(220,255,220)
-                          << QColor(220,220,255)
-                          << QColor(255,255,190)
-                          << QColor(255,220,220)
-                          << QColor(255,190,255);
+  return workspace_model::storage_class_default_colors ();
 }
 
 QStringList 
 resource_manager::terminal_color_names (void)
 {
-  return QStringList () << QObject::tr ("foreground")
-                        << QObject::tr ("background")
-                        << QObject::tr ("selection")
-                        << QObject::tr ("cursor");
+  return QTerminal::color_names ();
 }
 
 QList<QColor>
 resource_manager::terminal_default_colors (void)
 {
-  return QList<QColor> () << QColor(0,0,0)
-                          << QColor(255,255,255)
-                          << QColor(192,192,192)
-                          << QColor(128,128,128);
+  return QTerminal::default_colors ();
 }
 
 const char*
 resource_manager::octave_keywords (void)
 {
   return
       ".nargin. "
       "EDITOR "
diff --git a/libgui/src/workspace-model.cc b/libgui/src/workspace-model.cc
--- a/libgui/src/workspace-model.cc
+++ b/libgui/src/workspace-model.cc
@@ -41,16 +41,53 @@ workspace_model::workspace_model (QObjec
   _columnNames.append (tr ("Value"));
   _columnNames.append (tr ("Storage Class"));
 
   for (int i = 0; i < resource_manager::storage_class_chars ().length (); i++)
     _storage_class_colors.append (QColor (Qt::white));
 
 }
 
+QList<QColor>
+workspace_model::storage_class_default_colors (void)
+{
+  QList<QColor> colors;
+
+  if (colors.isEmpty ())
+    {
+      colors << QColor (190,255,255)
+             << QColor (220,255,220)
+             << QColor (220,220,255)
+             << QColor (255,255,190)
+             << QColor (255,220,220)
+             << QColor (255,190,255);
+    }
+
+  return colors;
+}
+
+
+QStringList
+workspace_model::storage_class_names (void)
+{
+  QStringList names;
+
+  if (names.isEmpty ())
+    {
+      names << QObject::tr ("automatic")
+            << QObject::tr ("function")
+            << QObject::tr ("global")
+            << QObject::tr ("hidden")
+            << QObject::tr ("inherited")
+            << QObject::tr ("persistent");
+    }
+
+  return names;
+}
+
 int
 workspace_model::rowCount (const QModelIndex&) const
 {
   return _symbols.size ();
 }
 
 int
 workspace_model::columnCount (const QModelIndex&) const
diff --git a/libgui/src/workspace-model.h b/libgui/src/workspace-model.h
--- a/libgui/src/workspace-model.h
+++ b/libgui/src/workspace-model.h
@@ -24,30 +24,35 @@ along with Octave; see the file COPYING.
 #if !defined (workspace_model_h)
 #define workspace_model_h 1
 
 #include <QAbstractTableModel>
 #include <QVector>
 #include <QSemaphore>
 #include <QStringList>
 #include <QChar>
+#include <QList>
 #include <QColor>
 #include <QSettings>
 
 class workspace_model
   : public QAbstractTableModel
 {
   Q_OBJECT
 
 public:
 
   workspace_model (QObject *parent = 0);
 
   ~workspace_model (void) { }
 
+  static QList<QColor> storage_class_default_colors (void);
+
+  static QStringList storage_class_names (void);
+
   QVariant data (const QModelIndex& index, int role) const;
 
   bool setData (const QModelIndex& index, const QVariant& value,
                 int role = Qt::EditRole);
 
   Qt::ItemFlags flags (const QModelIndex& index) const;
 
   QVariant headerData (int section, Qt::Orientation orientation,
