# HG changeset patch
# User Rik <octave@nomad.inbox5.com>
# Date 1295049345 28800
#      Fri Jan 14 15:55:45 2011 -0800
# Node ID 702dbd0c53f5bc8ffb671213cd9ee81e5822cc83
# Parent  440a6b54e6f18a267c88f55412c93b901fb5bed0
Add undocumented ppder, ppint, ppjumps functions to documentation.

diff --git a/doc/ChangeLog b/doc/ChangeLog
--- a/doc/ChangeLog
+++ b/doc/ChangeLog
@@ -1,8 +1,13 @@
+2011-01-14  Rik  <octave@nomad.inbox5.com>
+
+	* interpreter/poly.txi: Add undocumented ppder, ppint, ppjumps
+	functions to documentation.
+
 2011-01-14  Rik  <octave@nomad.inbox5.com>
 
 	* interpreter/system.txi: Add undocumented matlabroot to documentation.
 
 2011-01-14  Rik  <octave@nomad.inbox5.com>
 
 	* interpreter/linalg.txi: Add undocumented svd_driver to documentation.
 
diff --git a/doc/interpreter/poly.txi b/doc/interpreter/poly.txi
--- a/doc/interpreter/poly.txi
+++ b/doc/interpreter/poly.txi
@@ -130,23 +130,23 @@ area = polyval(integral, 3) - polyval(in
 @section Polynomial Interpolation
 
 Octave comes with good support for various kinds of interpolation,
 most of which are described in @ref{Interpolation}.  One simple alternative
 to the functions described in the aforementioned chapter, is to fit
 a single polynomial to some given data points.  To avoid a highly
 fluctuating polynomial, one most often wants to fit a low-order polynomial
 to data.  This usually means that it is necessary to fit the polynomial
-in a least-squares sense, which is what the @code{polyfit} function does.
+in a least-squares sense, which just is what the @code{polyfit} function does.
 
 @DOCSTRING(polyfit)
 
 In situations where a single polynomial isn't good enough, a solution
 is to use several polynomials pieced together.  The function @code{mkpp}
-creates a piece-wise polynomial, @code{ppval} evaluates the function 
+creates a piecewise polynomial, @code{ppval} evaluates the function 
 created by @code{mkpp}, and @code{unmkpp} returns detailed information
 about the function.
 
 The following example shows how to combine two linear functions and a
 quadratic into one function.  Each of these functions is expressed
 on adjoined intervals.
 
 @example
@@ -157,22 +157,28 @@ p = [ 0,  1, 0;
       0, -1, 1 ];
 pp = mkpp(x, p);
 xi = linspace(-2, 2, 50);
 yi = ppval(pp, xi);
 plot(xi, yi);
 @end group
 @end example
 
-@DOCSTRING(ppval)
-
 @DOCSTRING(mkpp)
 
 @DOCSTRING(unmkpp)
 
+@DOCSTRING(ppval)
+
+@DOCSTRING(ppder)
+
+@DOCSTRING(ppint)
+
+@DOCSTRING(ppjumps)
+
 @node Miscellaneous Functions
 @section Miscellaneous Functions
 
 @DOCSTRING(poly)
 
 @DOCSTRING(polyout)
 
 @DOCSTRING(polyreduce)
diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,8 +1,15 @@
+2011-01-14  Rik  <octave@nomad.inbox5.com>
+
+	* general/interp1.m, general/interp2.m, polynomial/mkpp.m,
+	polynomial/pchip.m, polynomial/ppder.m, polynomial/ppint.m,
+	polynomial/ppjumps.m, polynomial/ppval.m, polynomial/spline.m,
+	polynomial/unmkpp.m: Improve docstrings
+
 2011-01-14  Rik  <octave@nomad.inbox5.com>
 
 	* miscellaneous/flops.m: Delete function which was unimplemented
 	in Octave and has been removed from Matlab since version 5.
 
 2011-01-14  Rik  <octave@nomad.inbox5.com>
 
 	* specfun/nthroot.m: Add Seealso references to docstring.
diff --git a/scripts/general/interp1.m b/scripts/general/interp1.m
--- a/scripts/general/interp1.m
+++ b/scripts/general/interp1.m
@@ -35,17 +35,17 @@
 ## @table @asis
 ## @item 'nearest'
 ## Return the nearest neighbor.
 ##
 ## @item 'linear'
 ## Linear interpolation from nearest neighbors
 ##
 ## @item 'pchip'
-## Piece-wise cubic Hermite interpolating polynomial
+## Piecewise cubic Hermite interpolating polynomial
 ##
 ## @item 'cubic'
 ## Cubic interpolation from four nearest neighbors
 ##
 ## @item 'spline'
 ## Cubic spline interpolation--smooth first and second derivatives
 ## throughout the curve
 ## @end table
@@ -55,17 +55,17 @@
 ## (1)} and @code{@var{x} (2)} are referenced.  This is usually faster,
 ## and is never slower.  The default method is 'linear'.
 ##
 ## If @var{extrap} is the string 'extrap', then extrapolate values beyond
 ## the endpoints.  If @var{extrap} is a number, replace values beyond the
 ## endpoints with that number.  If @var{extrap} is missing, assume NA.
 ##
 ## If the string argument 'pp' is specified, then @var{xi} should not be
-## supplied and @code{interp1} returns the piece-wise polynomial that
+## supplied and @code{interp1} returns the piecewise polynomial that
 ## can later be used with @code{ppval} to evaluate the interpolation.
 ## There is an equivalence, such that @code{ppval (interp1 (@var{x},
 ## @var{y}, @var{method}, 'pp'), @var{xi}) == interp1 (@var{x}, @var{y},
 ## @var{xi}, @var{method}, 'extrap')}.
 ##
 ## Duplicate points in @var{x} specify a discontinuous interpolant.  There
 ## should be at most 2 consecutive points with the same value.
 ## The discontinuous interpolant is right-continuous if @var{x} is increasing,
diff --git a/scripts/general/interp2.m b/scripts/general/interp2.m
--- a/scripts/general/interp2.m
+++ b/scripts/general/interp2.m
@@ -54,17 +54,17 @@
 ## @table @asis
 ## @item 'nearest'
 ## Return the nearest neighbor.
 ##
 ## @item 'linear'
 ## Linear interpolation from nearest neighbors.
 ##
 ## @item 'pchip'
-## Piece-wise cubic Hermite interpolating polynomial.
+## Piecewise cubic Hermite interpolating polynomial.
 ##
 ## @item 'cubic'
 ## Cubic interpolation from four nearest neighbors.
 ##
 ## @item 'spline'
 ## Cubic spline interpolation--smooth first and second derivatives
 ## throughout the curve.
 ## @end table
diff --git a/scripts/polynomial/mkpp.m b/scripts/polynomial/mkpp.m
--- a/scripts/polynomial/mkpp.m
+++ b/scripts/polynomial/mkpp.m
@@ -15,17 +15,17 @@
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {@var{pp} =} mkpp (@var{x}, @var{p})
 ## @deftypefnx {Function File} {@var{pp} =} mkpp (@var{x}, @var{p}, @var{d})
 ## 
-## Construct a piece-wise polynomial structure from sample points
+## Construct a piecewise polynomial structure from sample points
 ## @var{x} and coefficients @var{p}.  The i-th row of @var{p},
 ## @code{@var{p} (@var{i},:)}, contains the coefficients for the polynomial
 ## over the @var{i}-th interval, ordered from highest to 
 ## lowest.  There must be one row for each interval in @var{x}, so 
 ## @code{rows (@var{p}) == length (@var{x}) - 1}.  
 ##
 ## @var{p} may also be a multi-dimensional array, specifying a vector-valued
 ## or array-valued polynomial.  The shape is determined by @var{d}.  If @var{d}
diff --git a/scripts/polynomial/pchip.m b/scripts/polynomial/pchip.m
--- a/scripts/polynomial/pchip.m
+++ b/scripts/polynomial/pchip.m
@@ -16,17 +16,17 @@
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {@var{pp} =} pchip (@var{x}, @var{y})
 ## @deftypefnx {Function File} {@var{yi} =} pchip (@var{x}, @var{y}, @var{xi})
 ##
 ## Piecewise Cubic Hermite interpolating polynomial.  Called with two
-## arguments, the piece-wise polynomial @var{pp} is returned, that may
+## arguments, the piecewise polynomial @var{pp} is returned, that may
 ## later be used with @code{ppval} to evaluate the polynomial at
 ## specific points.
 ##
 ## The variable @var{x} must be a strictly monotonic vector (either
 ## increasing or decreasing).  While @var{y} can be either a vector or
 ## array.  In the case where @var{y} is a vector, it must have a length
 ## of @var{n}.  If @var{y} is an array, then the size of @var{y} must
 ## have the form
@@ -44,17 +44,17 @@
 ## @ifnottex
 ## @code{@var{s1} * @var{s2} * @dots{} * @var{sk}}
 ## @end ifnottex
 ## and each row in this matrix is then treated separately.  Note that this
 ## is exactly the opposite treatment than @code{interp1} and is done
 ## for compatibility.
 ##
 ## Called with a third input argument, @code{pchip} evaluates the 
-## piece-wise polynomial at the points @var{xi}.  There is an equivalence
+## piecewise polynomial at the points @var{xi}.  There is an equivalence
 ## between @code{ppval (pchip (@var{x}, @var{y}), @var{xi})} and
 ## @code{pchip (@var{x}, @var{y}, @var{xi})}.
 ##
 ## @seealso{spline, ppval, mkpp, unmkpp}
 ## @end deftypefn
 
 ## Author:  Kai Habel <kai.habel@gmx.de>
 ## Date: 9. mar 2001
diff --git a/scripts/polynomial/ppder.m b/scripts/polynomial/ppder.m
--- a/scripts/polynomial/ppder.m
+++ b/scripts/polynomial/ppder.m
@@ -13,18 +13,18 @@
 ## GNU General Public License for more details.
 ## 
 ## You should have received a copy of the GNU General Public License
 ## along with this software; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {@var{ppd} =} ppder (@var{pp})
-## Computes the piecewise derivative of a piecewise polynomial struct @var{pp}.
-## @seealso{mkpp,ppval}
+## Compute the piecewise derivative of the piecewise polynomial struct @var{pp}.
+## @seealso{mkpp,ppval,ppint}
 ## @end deftypefn
 
 function ppd = ppder (pp)
   if (nargin != 1)
     print_usage ();
   endif
   if (! isstruct (pp))
     error ("ppder: PP must be a structure");
diff --git a/scripts/polynomial/ppint.m b/scripts/polynomial/ppint.m
--- a/scripts/polynomial/ppint.m
+++ b/scripts/polynomial/ppint.m
@@ -12,20 +12,21 @@
 ## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 ## GNU General Public License for more details.
 ## 
 ## You should have received a copy of the GNU General Public License
 ## along with this software; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
-## @deftypefn {Function File} {@var{ppi} =} ppint (@var{pp}, @var{c})
-## Computes the antiderivative of a piecewise polynomial struct @var{pp}.
+## @deftypefn  {Function File} {@var{ppi} =} ppint (@var{pp})
+## @deftypefnx {Function File} {@var{ppi} =} ppint (@var{pp}, @var{c})
+## Compute the integral of the piecewise polynomial struct @var{pp}.
 ## @var{c}, if given, is the constant of integration.
-## @seealso{mkpp,ppval}
+## @seealso{mkpp,ppval,ppder}
 ## @end deftypefn
 
 function ppi = ppint (pp, c)
   if (nargin < 1 || nargin > 2)
     print_usage ();
   endif
   if (! isstruct (pp))
     error ("ppint: PP must be a structure");
diff --git a/scripts/polynomial/ppjumps.m b/scripts/polynomial/ppjumps.m
--- a/scripts/polynomial/ppjumps.m
+++ b/scripts/polynomial/ppjumps.m
@@ -13,19 +13,20 @@
 ## GNU General Public License for more details.
 ## 
 ## You should have received a copy of the GNU General Public License
 ## along with this software; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {@var{jumps} =} ppjumps (@var{pp})
-## Evaluates the boundary jumps of a piecewise polynomial.
-## If there are n intervals, and the dimensionality of pp is d,
-## the resulting array has dimensions @code{[d, n-1]}.
+## Evaluate the boundary jumps of a piecewise polynomial.
+## If there are @math{n} intervals, and the dimensionality of @var{pp} is
+## @math{d}, the resulting array has dimensions @code{[d, n-1]}.
+## @seealso{mkpp}
 ## @end deftypefn
 
 function jumps = ppjumps (pp)
   if (nargin != 1)
     print_usage ();
   endif
   if (! isstruct (pp))
     error ("ppjumps: PP must be a structure");
@@ -48,9 +49,8 @@ function jumps = ppjumps (pp)
     llim += P(:,1:n-1,i);
   endfor
 
   rlim = P(:,2:n,k); # limits from the right
   jumps = reshape (rlim - llim, [d, n-1]);
 
 endfunction
 
-
diff --git a/scripts/polynomial/ppval.m b/scripts/polynomial/ppval.m
--- a/scripts/polynomial/ppval.m
+++ b/scripts/polynomial/ppval.m
@@ -13,17 +13,17 @@
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {@var{yi} =} ppval (@var{pp}, @var{xi})
-## Evaluate piece-wise polynomial @var{pp} at the points @var{xi}.  
+## Evaluate piecewise polynomial @var{pp} at the points @var{xi}.  
 ## If @var{pp} is scalar-valued, the result is an array of the same shape as
 ## @var{xi}.
 ## Otherwise, the size of the result is @code{[pp.d, length(@var{xi})]} if
 ## @var{xi} is a vector, or @code{[pp.d, size(@var{xi})]} if it is a
 ## multi-dimensional array.  If pp.orient is 1, the dimensions are permuted as
 ## in interp1, to
 ## @code{[pp.d, length(@var{xi})]} and @code{[pp.d, size(@var{xi})]}
 ## respectively.
diff --git a/scripts/polynomial/spline.m b/scripts/polynomial/spline.m
--- a/scripts/polynomial/spline.m
+++ b/scripts/polynomial/spline.m
@@ -17,17 +17,17 @@
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {@var{pp} =} spline (@var{x}, @var{y})
 ## @deftypefnx {Function File} {@var{yi} =} spline (@var{x}, @var{y}, @var{xi})
 ##
 ## Return the cubic spline interpolant of @var{y} at points @var{x}. 
-## If called with two arguments, @code{spline} returns the piece-wise
+## If called with two arguments, @code{spline} returns the piecewise
 ## polynomial @var{pp} that may later be used with @code{ppval} to
 ## evaluate the polynomial at specific points.
 ## If called with a third input argument, @code{spline} evaluates the 
 ## spline at the points @var{xi}.  There is an equivalence
 ## between @code{ppval (spline (@var{x}, @var{y}), @var{xi})} and
 ## @code{spline (@var{x}, @var{y}, @var{xi})}.
 ##
 ## The variable @var{x} must be a vector of length @var{n}, and @var{y}
diff --git a/scripts/polynomial/unmkpp.m b/scripts/polynomial/unmkpp.m
--- a/scripts/polynomial/unmkpp.m
+++ b/scripts/polynomial/unmkpp.m
@@ -14,17 +14,17 @@
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {[@var{x}, @var{p}, @var{n}, @var{k}, @var{d}] =} unmkpp (@var{pp})
 ##
-## Extract the components of a piece-wise polynomial structure @var{pp}.
+## Extract the components of a piecewise polynomial structure @var{pp}.
 ## These are as follows:
 ##
 ## @table @asis
 ## @item @var{x}
 ## Sample points.
 ##
 ## @item @var{p}
 ## Polynomial coefficients for points in sample interval.  @code{@var{p}
