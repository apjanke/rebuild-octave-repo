# HG changeset patch
# User Rik <rik@octave.org>
# Date 1459547713 25200
#      Fri Apr 01 14:55:13 2016 -0700
# Node ID 683a1beee538fda9347183877d54c60442f0897b
# Parent  31823239207e898db6adf51e7f5b4867555b1ad3
maint: Use "FIXME:" for all code blocks needing further attention.

* files-dock-widget.cc, file-editor-tab.cc, file-editor-tab.h,
file-editor.cc, octave-qscintilla.cc, octave-qt-link.cc, __ilu__.cc, debug.h,
oct-stream.cc, pt-jit.cc, __magick_read__.cc, ov-classdef.cc, pt-stmt.cc,
oct-sort.cc, inputParser.m, validateattributes.m, fminunc.m, fsolve.m, fzero.m,
__scatter__.m, print.m:
Use "FIXME:" for all code blocks needing further attention.

diff --git a/bootstrap b/bootstrap
--- a/bootstrap
+++ b/bootstrap
@@ -939,18 +939,19 @@ find "$m4_base" "$source_base" \
   -type l -xtype l -delete > /dev/null 2>&1
 
 # Invoke autoreconf with --force --install to ensure upgrades of tools
 # such as ylwrap.
 AUTORECONFFLAGS="--verbose --install --force -I $m4_base $ACLOCAL_FLAGS"
 
 # Some systems (RHEL 5) are using ancient autotools, for which the
 # --no-recursive option had not been invented.  Detect that lack and
-# omit the option when it's not supported.  FIXME in 2017: remove this
-# hack when RHEL 5 autotools are updated, or when they become irrelevant.
+# omit the option when it's not supported.
+# FIXME: in 2017, remove this hack when RHEL 5 autotools are updated,
+# or when they become irrelevant.
 case $($AUTORECONF --help) in
   *--no-recursive*) AUTORECONFFLAGS="$AUTORECONFFLAGS --no-recursive";;
 esac
 
 # Tell autoreconf not to invoke autopoint or libtoolize; they were run above.
 echo "running: AUTOPOINT=true LIBTOOLIZE=true $AUTORECONF $AUTORECONFFLAGS"
 AUTOPOINT=true LIBTOOLIZE=true $AUTORECONF $AUTORECONFFLAGS \
   || die "autoreconf failed"
diff --git a/libgui/src/files-dock-widget.cc b/libgui/src/files-dock-widget.cc
--- a/libgui/src/files-dock-widget.cc
+++ b/libgui/src/files-dock-widget.cc
@@ -246,18 +246,18 @@ files_dock_widget::files_dock_widget (QW
   QVBoxLayout *vbox_layout = new QVBoxLayout ();
   vbox_layout->setSpacing (0);
   vbox_layout->addWidget (_navigation_tool_bar);
   vbox_layout->addWidget (_file_tree_view);
   vbox_layout->setMargin (1);
 
   container->setLayout (vbox_layout);
 
-  // TODO: Add right-click contextual menus for copying, pasting,
-  //       deleting files (and others).
+  // FIXME: Add right-click contextual menus for copying, pasting,
+  //        deleting files (and others).
 
   connect (_current_directory->lineEdit (), SIGNAL (returnPressed ()),
            this, SLOT (accept_directory_line_edit ()));
 
   connect (_current_directory, SIGNAL (activated (const QString &)),
            this, SLOT (set_current_directory (const QString &)));
 
   connect (this, SIGNAL (run_file_signal (const QFileInfo&)),
diff --git a/libgui/src/m-editor/file-editor-tab.cc b/libgui/src/m-editor/file-editor-tab.cc
--- a/libgui/src/m-editor/file-editor-tab.cc
+++ b/libgui/src/m-editor/file-editor-tab.cc
@@ -330,33 +330,33 @@ file_editor_tab::handle_context_menu_bre
   // Ensure editor line numbers match Octave core's line numbers.
   // Give users the option to save modifications if necessary.
   if (! unchanged_or_saved ())
     return;
 
   QString cond;
   bp_info info (_file_name, linenr+1); // Get function name & dir from filename.
 
-  // Search for previous condition.  FIXME -- is there a more direct way?
+  // Search for previous condition.  FIXME: is there a more direct way?
   if (_edit_area->markersAtLine (linenr) & (1 << marker::cond_break))
     {
       emit report_marker_linenr (_bp_lines, _bp_conditions);
       for (int i = 0; i < _bp_lines.length (); i++)
         if (_bp_lines.value (i) == linenr)
           {
             cond = _bp_conditions.value (i);
             break;
           }
       _bp_lines.clear ();
     }
 
   // If text selected by the mouse, default to that instead
   // If both present, use the OR of them, to avoid accidental overwriting
-  // FIXME If both are present, show old condition unselected and
-  //       the selection (in edit area) selected (in the dialog).
+  // FIXME: If both are present, show old condition unselected and
+  //        the selection (in edit area) selected (in the dialog).
   if (_edit_area->hasSelectedText ())
     {
       if (cond == "")
         cond = _edit_area->selectedText ();
       else
         cond = "(" + cond + ") || (" + _edit_area->selectedText () + ")";
     }
 
@@ -1272,17 +1272,17 @@ file_editor_tab::show_auto_completion (c
       case QsciScintilla::AcsNone:
         break;
     }
 }
 
 void
 file_editor_tab::do_indent_selected_text (bool indent)
 {
-  // TODO
+  // FIXME:
   _edit_area->beginUndoAction ();
 
   if (_edit_area->hasSelectedText ())
     {
       int lineFrom, lineTo, colFrom, colTo;
       _edit_area->getSelection (&lineFrom, &colFrom, &lineTo, &colTo);
 
       if (colTo == 0)  // the beginning of last line is not selected
@@ -1550,17 +1550,17 @@ file_editor_tab::load_file (const QStrin
 
   _copy_available = false;     // no selection yet available
   set_file_name (file_to_load);
   update_window_title (false); // window title (no modification)
   _edit_area->setModified (false); // loaded file is not modified yet
 
   update_eol_indicator ();
 
-  // TODO: (BREAKPOINTS) At this point it would be nice to put any set
+  // FIXME: (BREAKPOINTS) At this point it would be nice to put any set
   // breakpoints on the margin.  In order to do this, somehow the
   // "dbstatus" command needs to be accessed.  All it would require is a
   // routine that does "res = feval("dbstatus") and signals that result
   // to some slot.
   //
   // See patch #8016 for a general way to get Octave results from
   // commands processed in the background.
 
@@ -1635,17 +1635,17 @@ file_editor_tab::update_eol_indicator ()
         _eol_indicator->setText ("CR");
         break;
       case QsciScintilla::EolUnix:
         _eol_indicator->setText ("LF");
         break;
     }
 }
 
-// TODO: See patch #8016 for a general way to get Octave results from
+// FIXME: See patch #8016 for a general way to get Octave results from
 // commands processed in the background, e.g., dbstatus.
 void
 file_editor_tab::handle_octave_result (QObject *requester, QString& command,
                                        octave_value_list&)
 {
   // Check if this object initiated the command.
   if (requester == this)
     {
diff --git a/libgui/src/m-editor/file-editor-tab.h b/libgui/src/m-editor/file-editor-tab.h
--- a/libgui/src/m-editor/file-editor-tab.h
+++ b/libgui/src/m-editor/file-editor-tab.h
@@ -169,17 +169,17 @@ signals:
   void remove_all_breakpoints (void);
   void find_translated_line_number (int original_linenr,
                                     int& translated_linenr, marker*&);
   void find_linenr_just_before (int linenr, int& original_linenr,
                                 int& editor_linenr);
   void report_marker_linenr (QIntList& lines, QStringList& conditions);
   void remove_position_via_debugger_linenr (int debugger_linenr);
   void remove_all_positions (void);
-  // TODO: The following is similar to "process_octave_code" signal.  However,
+  // FIXME: The following is similar to "process_octave_code" signal.  However,
   // currently that signal is connected to something that simply focuses a
   // window and not actually communicate with Octave.
   // void evaluate_octave_command (const QString& command);
 
 protected:
 
   void closeEvent (QCloseEvent *event);
   void set_file_name (const QString& fileName);
diff --git a/libgui/src/m-editor/file-editor.cc b/libgui/src/m-editor/file-editor.cc
--- a/libgui/src/m-editor/file-editor.cc
+++ b/libgui/src/m-editor/file-editor.cc
@@ -900,17 +900,17 @@ file_editor::request_previous_bookmark (
 }
 
 void
 file_editor::request_remove_bookmark (bool)
 {
   emit fetab_remove_bookmark (_tab_widget->currentWidget ());
 }
 
-// FIXME What should this do with conditional breakpoints?
+// FIXME: What should this do with conditional breakpoints?
 void
 file_editor::request_toggle_breakpoint (bool)
 {
   emit fetab_toggle_breakpoint (_tab_widget->currentWidget ());
 }
 
 void
 file_editor::request_next_breakpoint (bool)
diff --git a/libgui/src/m-editor/octave-qscintilla.cc b/libgui/src/m-editor/octave-qscintilla.cc
--- a/libgui/src/m-editor/octave-qscintilla.cc
+++ b/libgui/src/m-editor/octave-qscintilla.cc
@@ -300,17 +300,17 @@ octave_qscintilla::contextmenu_run (bool
   QStringList commands = selectedText ().split (QRegExp("[\r\n]"),
                                                 QString::SkipEmptyParts);
   for (int i = 0; i < commands.size (); i++)
     emit execute_command_in_terminal_signal (commands.at (i));
 }
 
 // wrappers for dbstop related context menu items
 
-// FIXME Why can't the data be sent as the argument to the function???
+// FIXME: Why can't the data be sent as the argument to the function???
 void
 octave_qscintilla::contextmenu_break_condition (bool)
 {
 #ifdef HAVE_QSCI_VERSION_2_6_0
   QAction *action = qobject_cast<QAction *>(sender());
   QPoint local_pos = action->data ().value<QPoint> ();
 
   // pick point just right of margins, so lineAt doesn't give -1
diff --git a/libgui/src/octave-qt-link.cc b/libgui/src/octave-qt-link.cc
--- a/libgui/src/octave-qt-link.cc
+++ b/libgui/src/octave-qt-link.cc
@@ -377,17 +377,17 @@ octave_qt_link::do_file_dialog (const fi
 
   return retval;
 }
 
 // Prompt to allow file to be run by setting cwd (or if addpath_option==true,
 // alternatively setting the path).
 // This uses a QMessageBox unlike other functions in this file,
 // because uiwidget_creator.waitcondition.wait hangs when called from
-// file_editor_tab::handle_context_menu_break_condition().  (FIXME -- why hang?)
+// file_editor_tab::handle_context_menu_break_condition().  (FIXME: why hang?)
 int
 octave_qt_link::do_debug_cd_or_addpath_error (const std::string& file,
                                               const std::string& dir,
                                               bool addpath_option)
 {
   int retval = -1;
 
   QString qdir = QString::fromStdString (dir);
diff --git a/libinterp/corefcn/__ilu__.cc b/libinterp/corefcn/__ilu__.cc
--- a/libinterp/corefcn/__ilu__.cc
+++ b/libinterp/corefcn/__ilu__.cc
@@ -375,17 +375,17 @@ void ilu_crout (octave_matrix_t& sm_l, o
       cidx_u[k+1] = cidx_u[k] - cidx_u[0] + w_len_u;
       cidx_l[k+1] = cidx_l[k] - cidx_l[0] + w_len_l;
 
       // The tricky part of the algorithm.  The arrays pointing to the first
       // working element of each column in the next iteration (Lfirst) or
       // the first working element of each row (Ufirst) are updated.  Also the
       // arrays working as lists cols_list and rows_list are filled with
       // indices pointing to Ufirst and Lfirst respectively.
-      // TODO: Maybe the -1 indicating in Ufirst and Lfirst, that no elements
+      // FIXME: Maybe the -1 indicating in Ufirst and Lfirst, that no elements
       // have to be considered in a certain column or row in next iteration,
       // can be removed.  It feels safer to me using such an indicator.
       if (k < (n - 1))
         {
           if (w_len_u > 0)
             Ufirst[k] = cidx_u[k];
           else
             Ufirst[k] = -1;
diff --git a/libinterp/corefcn/debug.h b/libinterp/corefcn/debug.h
--- a/libinterp/corefcn/debug.h
+++ b/libinterp/corefcn/debug.h
@@ -51,17 +51,17 @@ bp_table
 private:
 
   bp_table (void) : bp_set () { }
 
   ~bp_table (void) { }
 
 public:
 
-  // mapping from (arbitrary index?? FIXME) to line number of breakpoint
+  // mapping from (FIXME: arbitrary index??) to line number of breakpoint
   typedef std::map<int, int> intmap;
 
   typedef intmap::const_iterator const_intmap_iterator;
   typedef intmap::iterator intmap_iterator;
 
   typedef std::map <std::string, intmap> fname_line_map;
 
   typedef fname_line_map::const_iterator const_fname_line_map_iterator;
diff --git a/libinterp/corefcn/oct-stream.cc b/libinterp/corefcn/oct-stream.cc
--- a/libinterp/corefcn/oct-stream.cc
+++ b/libinterp/corefcn/oct-stream.cc
@@ -1468,17 +1468,17 @@ delimited_stream::refresh_buf (void)
       if (last < buf)
         delimited = false;
 
       retval = 0;
     }
 
   // Ensure fast peek doesn't give valid char
   if (retval == std::istream::traits_type::eof ())
-    *idx = '\0';      // FIXME - check that no TreatAsEmpty etc starts w. \0?
+    *idx = '\0';    // FIXME: check that no TreatAsEmpty etc starts w. \0?
 
   return retval;
 }
 
 // Return a pointer to a block of data of size size, assuming that a
 // sufficiently large buffer is available in buffer, if required.
 // If called when delimited == true, and size is no greater than
 // longest_lookahead then this will not call refresh_buf, so seekg
@@ -1530,17 +1530,17 @@ delimited_stream::read (char *buffer, in
             {
               retval = idx;
               memset (eob, 0, size + (idx - buf));
               idx += size;
             }
           else  // Reading more than the whole buf; return it in buffer
             {
               retval = buffer;
-              // FIXME -- read bufsize at a time
+              // FIXME: read bufsize at a time
               int i;
               for (i = 0; i < size && ! eof (); i++)
                 *buffer++ = get_undelim ();
               if (eof ())
                 memset (buffer, 0, size - i);
             }
         }
     }
@@ -2593,17 +2593,17 @@ textscan::do_scan (std::istream& isp, te
       buf_size = std::max (buf_size, ntimes);
     }
   // Finally, create the stream.
   delimited_stream is (isp,
                        (delim_table.empty () ? whitespace + "\r\n" : delims),
                        max_lookahead, buf_size);
 
   // Grow retval dynamically.  "size" is half the initial size
-  // (FIXME -- Should we start smaller if ntimes is large?)
+  // (FIXME: Should we start smaller if ntimes is large?)
   octave_idx_type size = ((ntimes < 8 && ntimes >= 0) ? ntimes : 1);
   Array<octave_idx_type> row_idx (dim_vector (1,2));
   row_idx(1) = 0;
 
   int err = 0;
   octave_idx_type row = 0;
 
   if (multiple_delims_as_one)           // bug #44750?
@@ -2692,17 +2692,17 @@ textscan::do_scan (std::istream& isp, te
       isp.setstate (isp.eofbit);
       uneven_columns = (last_char != eol1 && last_char != eol2);
     }
 
   // convert return value to Cell array
   Array<octave_idx_type> ra_idx (dim_vector (1,2));
 
   // (err & 1) means "error, and no columns read this row
-  // FIXME -- This may redundant now that done_after=0 says the same
+  // FIXME: This may redundant now that done_after=0 says the same
   if (err & 1)
     done_after = out.size () + 1;
 
   int valid_rows = (row == ntimes) ? ntimes
                    : (((err & 1) && (err & 8)) ? row : row+1);
   dim_vector dv (valid_rows, 1);
 
   ra_idx(0) = 0;
@@ -2820,22 +2820,22 @@ textscan::read_double (delimited_stream&
   // Read fractional part, up to specified precision
   if (ch == '.' && width_left)
     {
       double multiplier = 1;
       int precision = fmt.prec;
       int i;
 
       if (width_left)
-        width_left--;                  // Consider width of '.'
+        width_left--;                // Consider width of '.'
 
       if (precision == -1)
-        precision = 1<<30;           // FIXME Should be MAXINT
-
-      if (! valid)                    // if there was nothing before '.'...
+        precision = 1<<30;           // FIXME: Should be MAXINT
+
+      if (! valid)                   // if there was nothing before '.'...
         is.get ();                   // ...ch was a "peek", not "get".
 
       for (i = 0; i < precision; i++)
         {
           if (width_left-- && is && (ch = is.get ()) >= '0' && ch <= '9')
             retval += (ch - '0') * (multiplier *= 0.1);
           else
             {
@@ -3026,17 +3026,17 @@ textscan::scan_complex (delimited_stream
               // treat_as_empty strings may be different sizes.
               // Read ahead longest, put it all back, then re-read the string
               // that matches.
               std::string look_buf (treat_as_empty_len, '\0');
               char *look = is.read (&look_buf[0], look_buf.size (), pos);
 
               is.clear (state);
               is.seekg (pos);        // reset to position before look-ahead
-                                     // FIXME -- is.read could invalidate pos
+                                     // FIXME: is.read could invalidate pos
 
               for (int i = 0; i < treat_as_empty.numel (); i++)
                 {
                   std::string s = treat_as_empty (i).string_value ();
                   if (! strncmp (s.c_str (), look, s.size ()))
                     {
                       as_empty = true;
                                      // read just the right amount
@@ -3120,17 +3120,17 @@ textscan::read_until (delimited_stream& 
                      const std::string& ends) const
 {
   std::string retval ("");
   bool done = false;
   do
     {                               // find sequence ending with an ending char
       std::string next;
       scan_caret (is, ends.c_str (), next);
-      retval = retval + next;   // FIXME -- could use repeated doubling of size
+      retval = retval + next;   // FIXME: could use repeated doubling of size
 
       int last = (! is.eof ()
                   ? is.get_undelim () : std::istream::traits_type::eof ());
 
       if (last != std::istream::traits_type::eof ())
         {
           retval = retval + static_cast<char> (last);
           for (int i = 0; i < delimiters.numel (); i++)
@@ -3434,17 +3434,17 @@ textscan::scan_one (delimited_stream& is
           scan_caret   (is, fmt.char_class.c_str (), vv);
           break;
         }
 
       if (! fmt.discard)
         ov.internal_rep ()->fast_elem_insert (row (0),
                                               Cell (octave_value (vv)));
 
-      // FIXME -- why does failbit get set at EOF, instead of eofbit?
+      // FIXME: why does failbit get set at EOF, instead of eofbit?
       if (! vv.empty ())
         is.clear (is.rdstate () & ~std::ios_base::failbit);
     }
 
   is.field_done ();
 }
 
 // Read data corresponding to the entire format string once, placing the
@@ -3514,17 +3514,17 @@ textscan::read_format_once (delimited_st
         }
 
       if (! elem->discard)
         out++;
 
       elem = fmt_list.next ();
       char *pos = is.tellg ();
 
-      // FIXME -- these conversions "ignore delimiters".  Should they include
+      // FIXME: these conversions "ignore delimiters".  Should they include
       // delimiters at the start of the conversion, or can those be skipped?
       if (elem->type != textscan_format_elt::literal_conversion
           // && elem->type != '[' && elem->type != '^' && elem->type != 'c'
          )
         skip_delim (is);
 
       if (is.eof ())
         {
@@ -3664,17 +3664,17 @@ textscan::parse_options (const octave_va
                     if (k > treat_as_empty_len)
                       treat_as_empty_len = k;
                   }
             }
           if (invalid)
             error ("%s: TreatAsEmpty must be either a string or cell array of one or two strings",
                    who.c_str ());
 
-          // FIXME Ensure none is a prefix of a later one. Sort by length?
+          // FIXME: Ensure none is a prefix of a later one.  Sort by length?
         }
       else if (param == "collectoutput")
         {
           collect_output = args(i+1).xbool_value ("%s: CollectOutput must be logical or numeric", who.c_str ());
         }
       else if (param == "emptyvalue")
         {
           empty_value = args(i+1).xscalar_value ("%s: EmptyValue must be numeric", who.c_str ());
diff --git a/libinterp/corefcn/pt-jit.cc b/libinterp/corefcn/pt-jit.cc
--- a/libinterp/corefcn/pt-jit.cc
+++ b/libinterp/corefcn/pt-jit.cc
@@ -2322,17 +2322,17 @@ jit_function_info::jit_function_info (tr
 
 bool
 jit_function_info::execute (const octave_value_list& ov_args,
                             octave_value_list& retval) const
 {
   if (! function)
     return false;
 
-  // TODO figure out a way to delete ov_args so we avoid duplicating refcount
+  // FIXME: figure out a way to delete ov_args so we avoid duplicating refcount
   size_t nargs = ov_args.length ();
   std::vector<octave_base_value *> args (nargs);
   for (size_t i = 0; i < nargs; ++i)
     {
       octave_base_value *obv = ov_args(i).internal_rep ();
       obv->grab ();
       args[i] = obv;
     }
diff --git a/libinterp/dldfcn/__magick_read__.cc b/libinterp/dldfcn/__magick_read__.cc
--- a/libinterp/dldfcn/__magick_read__.cc
+++ b/libinterp/dldfcn/__magick_read__.cc
@@ -344,18 +344,18 @@ read_images (std::vector<Magick::Image>&
   // about image types but in some cases seems to be doing something else.
   // See bug #39249).
   // Finally, we must do the division ourselves (set a divisor) instead of
   // using quantumOperator for the cases where we will be returning floating
   // point and want things in the range [0 1]. This is the same reason why
   // the divisor is of type double.
   // uint64_t is used in expression because default 32-bit value overflows
   // when depth() is 32.
-  // TODO in the next release of GraphicsMagick, MaxRGB should be replaced
-  //      with QuantumRange since MaxRGB is already deprecated in ImageMagick.
+  // FIXME: in the next release of GraphicsMagick, MaxRGB should be replaced
+  //        with QuantumRange since MaxRGB is already deprecated in ImageMagick.
   double divisor;
   if (imvec[def_elem].depth () == 32)
     divisor = std::numeric_limits<uint32_t>::max ();
   else
     divisor = MaxRGB / ((uint64_t (1) << imvec[def_elem].depth ()) - 1);
 
   // FIXME: this workaround should probably be fixed in GM by creating a
   //        new ImageType BilevelMatteType
diff --git a/libinterp/octave-value/ov-classdef.cc b/libinterp/octave-value/ov-classdef.cc
--- a/libinterp/octave-value/ov-classdef.cc
+++ b/libinterp/octave-value/ov-classdef.cc
@@ -2734,30 +2734,30 @@ cdef_class::make_meta_class (tree_classd
             }
         }
 
       if (is_at_folder)
         {
           // Look for all external methods visible on octave path at the
           // time of loading of the class.
           //
-          // TODO: This is an "extension" to Matlab behavior, which only
+          // FIXME: This is an "extension" to Matlab behavior, which only
           // looks in the @-folder containing the original classdef
           // file. However, this is easier to implement it that way at
           // the moment.
 
           std::list<std::string> external_methods =
             load_path::methods (full_class_name);
 
           for (std::list<std::string>::const_iterator
                it = external_methods.begin ();
                it != external_methods.end ();
                ++it)
             {
-              // TODO: should we issue a warning if the method is already
+              // FIXME: should we issue a warning if the method is already
               // defined in the classdef file?
 
               if (*it != class_name
                   && ! retval.find_method (*it, true).ok ())
                 {
                   // Create a dummy method that is used until the actual
                   // method is loaded.
 
diff --git a/libinterp/parse-tree/pt-stmt.cc b/libinterp/parse-tree/pt-stmt.cc
--- a/libinterp/parse-tree/pt-stmt.cc
+++ b/libinterp/parse-tree/pt-stmt.cc
@@ -183,17 +183,17 @@ tree_statement::dup (symbol_table::scope
 
 void
 tree_statement::accept (tree_walker& tw)
 {
   tw.visit_statement (*this);
 }
 
 // Create a "breakpoint" tree-walker, and get it to "walk" this statement list
-// (TODO:  What does that do???)
+// (FIXME: What does that do???)
 int
 tree_statement_list::set_breakpoint (int line, const std::string& condition)
 {
   tree_breakpoint tbp (line, tree_breakpoint::set, condition);
   accept (tbp);
 
   return tbp.get_line ();
 }
@@ -247,17 +247,17 @@ tree_statement_list::breakpoints_and_con
     }
 
   return retval;
 }
 
 // Add breakpoints to  file  at multiple lines (the second arguments of  line),
 // to stop only if  condition  is true.
 // Updates GUI via  octave_link::update_breakpoint.
-// TODO COME BACK TO ME
+// FIXME: COME BACK TO ME.
 bp_table::intmap
 tree_statement_list::add_breakpoint (const std::string& file,
                                      const bp_table::intmap& line,
                                      const std::string& condition)
 {
   bp_table::intmap retval;
 
   octave_idx_type len = line.size ();
diff --git a/liboctave/util/oct-sort.cc b/liboctave/util/oct-sort.cc
--- a/liboctave/util/oct-sort.cc
+++ b/liboctave/util/oct-sort.cc
@@ -1798,17 +1798,17 @@ octave_sort<T>::lookup (const T *data, o
 template <typename T>
 template <typename Comp>
 void
 octave_sort<T>::lookup (const T *data, octave_idx_type nel,
                         const T *values, octave_idx_type nvalues,
                         octave_idx_type *idx, Comp comp)
 {
   // Use a sequence of binary lookups.
-  // TODO: Can this be sped up generally? The sorted merge case is dealt with
+  // FIXME: Can this be sped up generally?  The sorted merge case is dealt with
   // elsewhere.
   for (octave_idx_type j = 0; j < nvalues; j++)
     idx[j] = lookup (data, nel, values[j], comp);
 }
 
 template <typename T>
 void
 octave_sort<T>::lookup (const T *data, octave_idx_type nel,
diff --git a/scripts/general/inputParser.m b/scripts/general/inputParser.m
--- a/scripts/general/inputParser.m
+++ b/scripts/general/inputParser.m
@@ -240,22 +240,22 @@
 ## accessor.  See @command{help inputParser} for a more complete description.
 ##
 ## @end deftypefn
 
 ## Author: Carnë Draug <carandraug@octave.org>
 
 classdef inputParser < handle
   properties
-    ## TODO set input checking for this properties
+    ## FIXME: set input checking for these properties
     CaseSensitive = false;
     FunctionName  = "";
     KeepUnmatched = false;
-    # PartialMatching = true;   # TODO unimplemented
-    # StructExpand    = true;   # TODO unimplemented
+    # PartialMatching = true;   # FIXME: unimplemented
+    # StructExpand    = true;   # FIXME: unimplemented
   endproperties
 
   properties (SetAccess = protected)
     Parameters    = cell ();
     Results       = struct ();
     Unmatched     = struct ();
     UsingDefaults = cell ();
   endproperties
diff --git a/scripts/general/validateattributes.m b/scripts/general/validateattributes.m
--- a/scripts/general/validateattributes.m
+++ b/scripts/general/validateattributes.m
@@ -237,17 +237,17 @@ function validateattributes (A, cls, att
   ## attribute). The reasoning is that this will be a function mostly used
   ## by developers with fairly static input so any problem would be caught
   ## immediately during that functino development, it's no dependent on the
   ## final user input. In addition, it can be called so many times at the
   ## start of every function, we want it to run specially fast.
   idx = 1;
   problem = false; # becomes true when one of the tests fails
   while (idx <= numel (attr))
-    ## TODO: once we use this in Octave core, it might be worthy to find
+    ## FIXME: once we use this in Octave core, it might be worthy to find
     ## which attributes are checked more often, and place them in that
     ## order inside the switch block.
     switch (tolower (attr{idx++}))
       case "2d",            problem = ndims (A) != 2;
       case "3d",            problem = ndims (A) > 3;
       case "column",        problem = ! iscolumn (A);
       case "row",           problem = ! isrow (A);
       case "scalar",        problem = ! isscalar (A);
diff --git a/scripts/optimization/fminunc.m b/scripts/optimization/fminunc.m
--- a/scripts/optimization/fminunc.m
+++ b/scripts/optimization/fminunc.m
@@ -428,18 +428,18 @@ endfunction
 %!error <NaN value> fminunc (@(x) x + NaN, 1, optimset ("FunValCheck", "on"))
 %!error <Inf value> fminunc (@(x) x + Inf, 1, optimset ("FunValCheck", "on"))
 
 
 ## Solve the double dogleg trust-region minimization problem:
 ## Minimize 1/2*norm(r*x)^2  subject to the constraint norm(d.*x) <= delta,
 ## x being a convex combination of the gauss-newton and scaled gradient.
 
-## TODO: error checks
-## TODO: handle singularity, or leave it up to mldivide?
+## FIXME: error checks
+## FIXME: handle singularity, or leave it up to mldivide?
 
 function x = __doglegm__ (r, g, d, delta)
   ## Get Gauss-Newton direction.
   b = r' \ g;
   x = r \ b;
   xn = norm (d .* x);
   if (xn > delta)
     ## GN is too big, get scaled gradient.
diff --git a/scripts/optimization/fsolve.m b/scripts/optimization/fsolve.m
--- a/scripts/optimization/fsolve.m
+++ b/scripts/optimization/fsolve.m
@@ -578,18 +578,18 @@ endfunction
 %! tol = 1e-5;
 %! assert (norm (f) < tol);
 %! assert (norm (x - x_opt, Inf) < tol);
 
 ## Solve the double dogleg trust-region least-squares problem:
 ## Minimize norm(r*x-b) subject to the constraint norm(d.*x) <= delta,
 ## x being a convex combination of the gauss-newton and scaled gradient.
 
-## TODO: error checks
-## TODO: handle singularity, or leave it up to mldivide?
+## FIXME: error checks
+## FIXME: handle singularity, or leave it up to mldivide?
 
 function x = __dogleg__ (r, b, d, delta)
   ## Get Gauss-Newton direction.
   x = r \ b;
   xn = norm (d .* x);
   if (xn > delta)
     ## GN is too big, get scaled gradient.
     s = (r' * b) ./ d;
diff --git a/scripts/optimization/fzero.m b/scripts/optimization/fzero.m
--- a/scripts/optimization/fzero.m
+++ b/scripts/optimization/fzero.m
@@ -113,17 +113,17 @@ function [x, fval, info, output] = fzero
   if (nargin < 2 || nargin > 3)
     print_usage ();
   endif
 
   if (ischar (fun))
     fun = str2func (fun, "global");
   endif
 
-  ## TODO
+  ## FIXME:
   ## displev = optimget (options, "Display", "notify");
   funvalchk = strcmpi (optimget (options, "FunValCheck", "off"), "on");
   outfcn = optimget (options, "OutputFcn");
   tolx = optimget (options, "TolX", eps);
   maxiter = optimget (options, "MaxIter", Inf);
   maxfev = optimget (options, "MaxFunEvals", Inf);
 
   persistent mu = 0.5;
diff --git a/scripts/plot/draw/private/__scatter__.m b/scripts/plot/draw/private/__scatter__.m
--- a/scripts/plot/draw/private/__scatter__.m
+++ b/scripts/plot/draw/private/__scatter__.m
@@ -285,18 +285,18 @@ endfunction
 
 function render_size_color (hg, vert, s, c, marker, filled, isflat)
   if (isscalar (s))
     x = vert(:,1);
     y = vert(:,2);
     z = vert(:,3:end);
     toolkit = get (ancestor (hg, "figure"), "__graphics_toolkit__");
     ## Does gnuplot only support triangles with different vertex colors ?
-    ## TODO: Verify gnuplot can only support one color.  If RGB triplets
-    ##       can be assigned to each vertex, then fix __gnuplot_draw_axes__.m
+    ## FIXME: Verify gnuplot can only support one color.  If RGB triplets
+    ##        can be assigned to each vertex, then fix __gnuplot_draw_axes__.m
     gnuplot_hack = (numel (x) > 1 && columns (c) == 3
                     && strcmp (toolkit, "gnuplot"));
     if (ischar (c) || ! isflat || gnuplot_hack)
       if (filled)
         __go_patch__ (hg, "xdata", x, "ydata", y, "zdata", z,
                           "faces", 1:numel (x), "vertices", vert,
                           "facecolor", "none", "edgecolor", "none",
                           "marker", marker,
diff --git a/scripts/plot/util/print.m b/scripts/plot/util/print.m
--- a/scripts/plot/util/print.m
+++ b/scripts/plot/util/print.m
@@ -738,17 +738,17 @@ function latex_standalone (opts)
   fid = fopen (latexfile, "r");
   if (fid >= 0)
     latex = fscanf (fid, "%c", Inf);
     status = fclose (fid);
     if (status != 0)
       error ("print:errorclosingfile",
              "print.m: error closing file '%s'", latexfile);
     endif
-    ## TODO - should this be fixed in GL2PS?
+    ## FIXME: should this be fixed in GL2PS?
     latex = strrep (latex, "\\includegraphics{}",
                     sprintf ("\\includegraphics{%s}", graphicsfile));
   else
     error ("print:erroropeningfile",
            "print.m: error opening file '%s'", latexfile);
   endif
   fid = fopen (latexfile, "w");
   if (fid >= 0)
