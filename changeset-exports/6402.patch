# HG changeset patch
# User jwe
# Date 1173752731 0
#      Tue Mar 13 02:25:31 2007 +0000
# Node ID fe9817a6ee98d0cb8286e14166ebfc64db1f79d3
# Parent  f8cbc0871ed641d490c5120287a76f11885ec058
[project @ 2007-03-13 02:25:31 by jwe]

diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,15 @@
+2007-03-12  John W. Eaton  <jwe@octave.org>
+
+	* oct-inttypes.h (octave_int::octave_int (double)):
+	New Specialization.  Round arg.
+	(operator / (const octave_int<T1>&, const octave_int<T2>&)):
+	Round result before converting type.
+
 2007-03-07  John W. Eaton  <jwe@octave.org>
 
 	* Array.cc (assign1): Avoid resizing if there is an error.
 
 	* dMatrix.cc, CMatrix.cc (operator *): Only check
 	f77_exception_encountered immediately after calls that use F77_XFCN.
 
 	* Array.cc (assign1 (Array<LT>&, const Array<RT>&, const LT&)):
diff --git a/liboctave/oct-inttypes.h b/liboctave/oct-inttypes.h
--- a/liboctave/oct-inttypes.h
+++ b/liboctave/oct-inttypes.h
@@ -206,16 +206,18 @@ public:
 
   typedef T val_type;
 
   octave_int (void) : ival () { }
 
   template <class U>
   octave_int (U i) : ival (OCTAVE_INT_FIT_TO_RANGE (i, T)) { }
 
+  octave_int (double d) : ival (OCTAVE_INT_FIT_TO_RANGE (xround (d), T)) { }
+
   octave_int (bool b) : ival (b) { }
 
   template <class U>
   octave_int (const octave_int<U>& i)
     : ival (OCTAVE_INT_FIT_TO_RANGE (i.value (), T)) { }
 
   octave_int (const octave_int<T>& i) : ival (i.ival) { }
 
@@ -419,17 +421,17 @@ OCTAVE_INT_BIN_OP(-)
 OCTAVE_INT_BIN_OP(*)
 
 template <class T1, class T2>
 octave_int<typename octave_int_binop_traits<T1, T2>::TR>
 operator / (const octave_int<T1>& x, const octave_int<T2>& y)
 {
   double tx = static_cast<double> (x.value ());
   double ty = static_cast<double> (y.value ());
-  double r = (tx == 0 && ty == 0) ? 0 : tx / ty;
+  double r = (tx == 0 && ty == 0) ? 0 : xround (tx / ty);
   return OCTAVE_INT_FIT_TO_RANGE2 (r, T1, T2);
 }
 
 #define OCTAVE_INT_DOUBLE_BIN_OP(OP) \
   template <class T> \
   octave_int<T> \
   operator OP (const octave_int<T>& x, double y) \
   { \
