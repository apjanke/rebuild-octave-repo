# HG changeset patch
# User dbateman
# Date 1172168544 0
#      Thu Feb 22 18:22:24 2007 +0000
# Node ID 20c48710b2c747c879b776f7434a8fd632e5e0a4
# Parent  ec88b4ab6d1036fe2e2c6b6fc7eafd60c9bb99f6
[project @ 2007-02-22 18:22:24 by dbateman]
ChangeLog

diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,8 +1,12 @@
+2007-02-22  David Bateman  <dbateman@free.fr>
+
+	* pkg/pkg.m (fix_depends): Support > and < operators as well. 
+
 2007-02-22  John W. Eaton  <jwe@octave.org>
 
 	* plot/__uiobject_draw_axes__.m: If not using gnuplot for images,
 	cache data and display after xlim and ylim have been determined.
 
 2007-02-22  Daniel J Sebald  <daniel.sebald@ieee.org>
 
 	* plot/__uiobject_draw_axes__.m:
diff --git a/scripts/miscellaneous/doc.m b/scripts/miscellaneous/doc.m
--- a/scripts/miscellaneous/doc.m
+++ b/scripts/miscellaneous/doc.m
@@ -46,17 +46,17 @@ function retval = doc (fname)
       else
 	error ("doc: expecting argument to be a character string");
       endif
     else
       fname = "";
     endif
 
     if (ftype == 2 || ftype == 3)
-      ffile = file_in_loadpath (strcat (fname, "."));
+      ffile = which (fname);
     else
       ffile = "";
     endif
 
     if (isempty (ffile))
       info_dir = octave_config_info ("infodir");
     else
       info_dir = fileparts (ffile);
diff --git a/scripts/sparse/treeplot.m b/scripts/sparse/treeplot.m
--- a/scripts/sparse/treeplot.m
+++ b/scripts/sparse/treeplot.m
@@ -147,18 +147,16 @@ function treeplot (Tree, NodeS, EdgeS)
 	plot (XCoordinate(Skelet(istart:istop)),
 	      YCoordinate(Skelet(istart:istop)), EdgeStyle)
       endfor
       
       hold ("off");
       
     endif
   endif
-  St;
-  Skelet;
 endfunction
 
 %!demo
 %! % Plot a simple tree plot 
 %! treeplot([2 4 2 0 6 4 6])
 
 %!demo
 %! % Plot a simple tree plot defining the edge and node styles
diff --git a/scripts/statistics/distributions/betarnd.m b/scripts/statistics/distributions/betarnd.m
--- a/scripts/statistics/distributions/betarnd.m
+++ b/scripts/statistics/distributions/betarnd.m
@@ -74,25 +74,27 @@ function rnd = betarnd (a, b, r, c)
   else
     print_usage ();
   endif
 
   if (isscalar(a) && isscalar(b))
     if (find (!(a > 0) | !(a < Inf) | !(b > 0) | !(b < Inf)))
       rnd = NaN * ones (sz);
     else
-      rnd = betainv (rand(sz), a, b);
+      r1 = randg(a,sz); 
+      rnd = r1 ./ (r1 + randg(b,sz));
     endif
   else
     rnd = zeros (sz);
 
     k = find (!(a > 0) | !(a < Inf) | !(b > 0) | !(b < Inf));
     if (any (k))
       rnd(k) = NaN * ones (size (k));
     endif
 
     k = find ((a > 0) & (a < Inf) & (b > 0) & (b < Inf));
     if (any (k))
-      rnd(k) = betainv (rand (size (k)), a(k), b(k));
+      r1 = randg(a(k),size(k)); 
+      rnd(k) = r1 ./ (r1 + randg(b(k),size(k)));
     endif
   endif
 
 endfunction
diff --git a/scripts/statistics/distributions/chi2rnd.m b/scripts/statistics/distributions/chi2rnd.m
--- a/scripts/statistics/distributions/chi2rnd.m
+++ b/scripts/statistics/distributions/chi2rnd.m
@@ -64,29 +64,29 @@ function rnd = chi2rnd (n, r, c)
   else
     print_usage ();
   endif
 
   if (isscalar (n))
      if (find (!(n > 0) | !(n < Inf)))
        rnd = NaN * ones (sz);
      else
-       rnd =  chi2inv (rand (sz), n);
+       rnd = 2 * randg(n/2, sz)
      endif
   else
     [retval, n, dummy] = common_size (n, ones (sz));
     if (retval > 0)
       error ("chi2rnd: a and b must be of common size or scalar");
     endif
 
     rnd = zeros (sz);
     k = find (!(n > 0) | !(n < Inf));
     if (any (k))
       rnd(k) = NaN;
     endif
 
     k = find ((n > 0) & (n < Inf));
     if (any (k))
-      rnd(k) = chi2inv (rand (size (k)), n(k));
+      rnd(k) = 2 * randg(n(k)/2, size(k))
     endif
   endif
 
 endfunction
diff --git a/scripts/statistics/distributions/exprnd.m b/scripts/statistics/distributions/exprnd.m
--- a/scripts/statistics/distributions/exprnd.m
+++ b/scripts/statistics/distributions/exprnd.m
@@ -64,25 +64,25 @@ function rnd = exprnd (l, r, c)
     sz = size (l);
   else
     print_usage ();
   endif
 
 
   if (isscalar (l))
     if ((l > 0) && (l < Inf))
-      rnd = - log (1 - rand (sz)) ./ l;
+      rnd = rande(sz) / l;
     else
       rnd = NaN * ones (sz);
     endif
   else
     rnd = zeros (sz);
     k = find (!(l > 0) | !(l < Inf));
     if (any (k))
       rnd(k) = NaN;
     endif
     k = find ((l > 0) & (l < Inf));
     if (any (k))
-      rnd(k) = - log (1 - rand (size (k))) ./ l(k);
+      rnd(k) = rande(size(k)) / l(k);
     endif
   endif
 
 endfunction
diff --git a/scripts/statistics/distributions/frnd.m b/scripts/statistics/distributions/frnd.m
--- a/scripts/statistics/distributions/frnd.m
+++ b/scripts/statistics/distributions/frnd.m
@@ -75,29 +75,29 @@ function rnd = frnd (m, n, r, c)
     sz = size(a);
   else
     print_usage ();
   endif
 
 
   if (isscalar (m) && isscalar (n))
     if ((m > 0) && (m < Inf) && (n > 0) && (n < Inf))
-      rnd =  finv (rand (sz), m, n);
+      rnd = n ./ m .* randg(m/2,sz) ./ randg(n/2,sz);
     else
       rnd = NaN * ones (sz);
     endif
   else
     rnd = zeros (sz);
 
     k = find (!(m > 0) | !(m < Inf) |
               !(n > 0) | !(n < Inf));
     if (any (k))
       rnd(k) = NaN;
     endif
 
     k = find ((m > 0) & (m < Inf) &
               (n > 0) & (n < Inf));
     if (any (k))
-      rnd(k) = finv (rand (size (k)), m(k), n(k));
+      rnd(k) = n(k) ./ m(k) .* randg(m(k)./2,size(k)) ./ randg(n(k)./2,size(k));
     endif
   endif
 
 endfunction
diff --git a/scripts/statistics/distributions/gamrnd.m b/scripts/statistics/distributions/gamrnd.m
--- a/scripts/statistics/distributions/gamrnd.m
+++ b/scripts/statistics/distributions/gamrnd.m
@@ -77,22 +77,22 @@ function rnd = gamrnd (a, b, r, c)
   endif
 
   rnd = zeros (sz);
 
   if (isscalar (a) && isscalar(b))
     if (find (!(a > 0) | !(a < Inf) | !(b > 0) | !(b < Inf)))
       rnd = NaN * ones (sz);
     else
-      rnd =  gaminv (rand (sz), a, b);
+      rnd = randg(a,sz)/b;
     endif
   else 
     k = find (!(a > 0) | !(a < Inf) | !(b > 0) | !(b < Inf));
     if (any (k))
       rnd(k) = NaN;
     endif
     k = find ((a > 0) & (a < Inf) & (b > 0) & (b < Inf));
     if (any (k))
-      rnd(k) = gaminv (rand (size (k)), a(k), b(k));
+      rnd(k) = randg(a(k),size(k))/b(k);
     endif
   endif
 
 endfunction
diff --git a/scripts/statistics/distributions/poissrnd.m b/scripts/statistics/distributions/poissrnd.m
--- a/scripts/statistics/distributions/poissrnd.m
+++ b/scripts/statistics/distributions/poissrnd.m
@@ -64,51 +64,27 @@ function rnd = poissrnd (l, r, c)
     print_usage ();
   endif
 
   if (isscalar (l))
 
     if (!(l >= 0) | !(l < Inf))
       rnd = NaN * ones (sz);
     elseif ((l > 0) & (l < Inf))
-      num = zeros (sz);
-      sum = - log (1 - rand (sz)) ./ l;
-      while (1)
-	ind = find (sum < 1);
-	if (any (ind))
-          sum(ind) = (sum(ind) - log (1 - rand (size (ind))) / l);
-          num(ind) = num(ind) + 1;
-	else
-          break;
-	endif
-      endwhile
-      rnd = num;
+      rnd = randp(l, sz);
     else
       rnd = zeros (sz);
     endif
   else
     rnd = zeros (sz);
 
     k = find (!(l >= 0) | !(l < Inf));
     if (any (k))
       rnd(k) = NaN;
     endif
 
     k = find ((l > 0) & (l < Inf));
     if (any (k))
-      l = l(k);
-      num = zeros (size (k));
-      sum = - log (1 - rand (size (k))) ./ l;
-      while (1)
-	ind = find (sum < 1);
-	if (any (ind))
-          sum(ind) = (sum(ind)
-                      - log (1 - rand (size (ind))) ./ l(ind));
-          num(ind) = num(ind) + 1;
-	else
-          break;
-	endif
-      endwhile
-      rnd(k) = num;
+      rnd(k) = randp(l(k), size(k));
     endif
   endif
 
 endfunction
diff --git a/scripts/statistics/distributions/trnd.m b/scripts/statistics/distributions/trnd.m
--- a/scripts/statistics/distributions/trnd.m
+++ b/scripts/statistics/distributions/trnd.m
@@ -65,27 +65,27 @@ function rnd = trnd (n, r, c)
   else
     print_usage ();
   endif
 
   if (isscalar (n))
     if (!(n > 0) || !(n < Inf))
       rnd = NaN * ones (sz);
     elseif ((n > 0) && (n < Inf))
-      rnd = tinv (rand (sz), n);
+      rnd = randn(sz) ./ sqrt(2*randg(n/2,sz)./n); 
     else
       rnd = zeros (size (n));
     endif
   else
     rnd = zeros (size (n));
 
     k = find (!(n > 0) | !(n < Inf));
     if (any (k))
       rnd(k) = NaN;
     endif
 
     k = find ((n > 0) & (n < Inf));
     if (any (k))
-      rnd(k) = tinv (rand (size (k)), n(k));
+      rnd(k) = randn(size(k)) ./ sqrt(2*randg(n(k)/2,size(k))./n(k)); 
     endif
   endif
 
 endfunction
