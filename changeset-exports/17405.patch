# HG changeset patch
# User Rik <rik@octave.org>
# Date 1378863099 25200
#      Tue Sep 10 18:31:39 2013 -0700
# Node ID 3f0ed69d21c6d22b00a9259b9096df196c119858
# Parent  5e552cd9315a1cc4fba53d6f5a7d6bc844cc89cc
Replace unnecessary instances of strncmp with strcmp.

* scripts/optimization/optimget.m, scripts/plot/__gnuplot_drawnow__.m,
scripts/plot/fill.m, scripts/plot/private/__go_draw_axes__.m,
scripts/plot/private/__pie__.m, scripts/plot/private/__print_parse_opts__.m,
scripts/plot/private/__quiver__.m, scripts/plot/private/__tight_eps_bbox__.m,
scripts/plot/stairs.m, scripts/plot/uigetfile.m, scripts/strings/strsplit.m,
scripts/strings/validatestring.m: Replace unnecessary instances of strncmp with
strcmp.

diff --git a/scripts/optimization/optimget.m b/scripts/optimization/optimget.m
--- a/scripts/optimization/optimget.m
+++ b/scripts/optimization/optimget.m
@@ -28,17 +28,17 @@
 
 function retval = optimget (options, parname, default)
 
   if (nargin < 2 || nargin > 4 || ! isstruct (options) || ! ischar (parname))
     print_usage ();
   endif
 
   opts = __all_opts__ ();
-  idx = strncmpi (opts, parname, numel (parname));
+  idx = strncmpi (opts, parname, length (parname));
 
   nmatch = sum (idx);
 
   if (nmatch == 1)
     parname = opts{idx};
   elseif (nmatch == 0)
     warning ("unrecognized option: %s", parname);
   else
diff --git a/scripts/plot/__gnuplot_drawnow__.m b/scripts/plot/__gnuplot_drawnow__.m
--- a/scripts/plot/__gnuplot_drawnow__.m
+++ b/scripts/plot/__gnuplot_drawnow__.m
@@ -220,17 +220,17 @@ function enhanced = gnuplot_set_term (pl
               endif
             case {"aqua", "fig", "corel"}
               size_str = sprintf ("size %g %g", gnuplot_size);
             case "dxf"
               size_str = "";
             otherwise
               size_str = "";
           endswitch
-          if ((strncmpi (term, "x11", 3)
+          if ((strcmp (term, "x11")
                && __gnuplot_has_feature__ ("x11_figure_position"))
               || (strcmpi (term, "windows")
                   && __gnuplot_has_feature__ ("windows_figure_position")))
             ## X11/Windows allows the window to be positioned as well.
             units = get (0, "units");
             unwind_protect
               set (0, "units", "pixels");
               screen_size = get (0, "screensize")(3:4);
diff --git a/scripts/plot/fill.m b/scripts/plot/fill.m
--- a/scripts/plot/fill.m
+++ b/scripts/plot/fill.m
@@ -89,17 +89,17 @@ function h = fill (varargin)
       endif
       [htmp, fail] = __patch__ (hax, args{:});
       if (fail)
         print_usage ();
       endif
       hlist(end + 1, 1) = htmp;
     endfor
 
-    if (strncmp (old_nxtplt, "replace", 7))
+    if (strcmp (old_nxtplt, "replace"))
       set (hax, "nextplot", old_nxtplt);
     endif
 
   unwind_protect_cleanup
     if (! isempty (oldfig))
       set (0, "currentfigure", oldfig);
     endif
   end_unwind_protect
diff --git a/scripts/plot/private/__go_draw_axes__.m b/scripts/plot/private/__go_draw_axes__.m
--- a/scripts/plot/private/__go_draw_axes__.m
+++ b/scripts/plot/private/__go_draw_axes__.m
@@ -475,17 +475,17 @@ function __go_draw_axes__ (h, plot_strea
     endif
     if (zlogscale && isfield (obj, "zdata"))
       obj.zdata = axis_obj.zsgn * obj.zdata;
       obj.zdata(obj.zdata<=0) = NaN;
     endif
 
     ## Check for facecolor interpolation for surfaces.
     doing_interp_color = ...
-       isfield (obj, "facecolor") && strncmp (obj.facecolor, "interp", 6);
+       isfield (obj, "facecolor") && strcmp (obj.facecolor, "interp");
 
     switch (obj.type)
       case "image"
         img_data = obj.cdata;
         img_xdata = obj.xdata;
         img_ydata = obj.ydata;
 
         if (ndims (img_data) == 3)
@@ -542,20 +542,20 @@ function __go_draw_axes__ (h, plot_strea
         endif
 
         titlespec{data_idx} = "title \"\"";
         usingclause{data_idx} = sprintf ("binary array=%dx%d scan=yx origin=(%.15g,%.15g) dx=%.15g dy=%.15g using %s",
             x_dim, y_dim, x_origin, y_origin, dx, dy, format);
         withclause{data_idx} = sprintf ("with %s;", imagetype);
 
       case "line"
-        if (strncmp (obj.linestyle, "none", 4)
+        if (strcmp (obj.linestyle, "none")
             && (! isfield (obj, "marker")
                 || (isfield (obj, "marker")
-                    && strncmp (obj.marker, "none", 4))))
+                    && strcmp (obj.marker, "none"))))
           continue;
         endif
         data_idx++;
         is_image_data(data_idx) = false;
         parametric(data_idx) = true;
         have_cdata(data_idx) = false;
         have_3d_patch(data_idx) = false;
         if (isempty (obj.displayname))
@@ -638,17 +638,17 @@ function __go_draw_axes__ (h, plot_strea
              zcol = obj.zdata(:,i);
            else
              zcol = zeros (size (xcol));
            endif
          endif
 
          if (! isnan (xcol) && ! isnan (ycol))
            ## Is the patch closed or not
-           if (strncmp (obj.facecolor, "none", 4))
+           if (strncmp (obj.facecolor, "none"))
              hidden_removal = false;
            else
 
              if (isnan (hidden_removal))
                hidden_removal = true;
              endif
              if (nd == 3)
                if (numel (xcol) > 3)
@@ -679,51 +679,51 @@ function __go_draw_axes__ (h, plot_strea
 
              if (i > 1 || isempty (obj.displayname))
                titlespec{local_idx} = "title \"\"";
              else
                tmp = undo_string_escapes (__maybe_munge_text__ (enhanced, obj, "displayname"));
                titlespec{local_idx} = ['title "' tmp '"'];
              endif
              if (isfield (obj, "facecolor"))
-               if ((strncmp (obj.facecolor, "flat", 4)
-                   || strncmp (obj.facecolor, "interp", 6))
+               if ((strcmp (obj.facecolor, "flat")
+                   || strcmp (obj.facecolor, "interp"))
                    && isfield (obj, "cdata"))
                  if (ndims (obj.cdata) == 2
                      && (columns (obj.cdata) == nc
                          && (rows (obj.cdata) == 1
                              || rows (obj.cdata) == 3)))
                    ccol = cdat (:, i);
                  elseif (ndims (obj.cdata) == 2
                      && (rows (obj.cdata) == nc
                          && (columns (obj.cdata) == 1
                              || columns (obj.cdata) == 3)))
                    ccol = cdat (i, :);
                  elseif (ndims (obj.cdata) == 3)
                    ccol = permute (cdat (:, i, :), [1, 3, 2]);
                  else
                    ccol = cdat;
                  endif
-                 if (strncmp (obj.facecolor, "flat", 4))
+                 if (strcmp (obj.facecolor, "flat"))
                    if (isequal (size (ccol), [1, 3]))
                      ## RGB Triplet
                      color = ccol;
                    elseif (nd == 3 && numel (xcol) == 3)
                      ccdat = ccol;
                    else
                      if (cdatadirect)
                        r = round (ccol);
                      else
                        r = 1 + round ((rows (cmap) - 1)
                                       * (ccol - clim(1))/(clim(2) - clim(1)));
                      endif
                      r = max (1, min (r, rows (cmap)));
                      color = cmap(r, :);
                    endif
-                 elseif (strncmp (obj.facecolor, "interp", 6))
+                 elseif (strcmp (obj.facecolor, "interp"))
                    if (nd == 3 && numel (xcol) == 3)
                      ccdat = ccol;
                      if (! isvector (ccdat))
                        tmp = rows (cmap) + rows (addedcmap) + ...
                             [1 : rows(ccdat)];
                        addedcmap = [addedcmap; ccdat];
                        ccdat = tmp(:);
                      else
@@ -777,20 +777,20 @@ function __go_draw_axes__ (h, plot_strea
                data{data_idx} = [xcol, ycol]';
                usingclause{data_idx} = sprintf ("record=%d using ($1):($2)",
                                                 numel (xcol));
              endif
            endif
          endif
 
          ## patch outline
-         if (!(strncmp (obj.edgecolor, "none", 4)
-                && (strncmp (obj.marker, "none", 4)
-                    || (strncmp (obj.markeredgecolor, "none", 4)
-                        && strncmp (obj.markerfacecolor, "none", 4)))))
+         if (!(strcmp (obj.edgecolor, "none")
+                && (strcmp (obj.marker, "none")
+                    || (strcmp (obj.markeredgecolor, "none")
+                        && strcmp (obj.markerfacecolor, "none")))))
 
            data_idx++;
            is_image_data(data_idx) = false;
            parametric(data_idx) = false;
            have_cdata(data_idx) = false;
            have_3d_patch(data_idx) = false;
            titlespec{data_idx} = "title \"\"";
            usingclause{data_idx} = sprintf ("record=%d", numel (obj.xdata));
@@ -801,55 +801,55 @@ function __go_draw_axes__ (h, plot_strea
 
            if (isfield (obj, "edgecolor"))
              ## FIXME
              ## This is the wrong thing to do as edgecolor, markeredgecolor
              ## and markerfacecolor can have different values and we should
              ## treat them seperately. However, the below allow the scatter
              ## functions to work as expected, where only one of these values
              ## is set
-             if (strncmp (obj.edgecolor, "none", 4))
-               if (strncmp (obj.markeredgecolor, "none", 4))
+             if (strcmp (obj.edgecolor, "none"))
+               if (strcmp (obj.markeredgecolor, "none"))
                  ec = obj.markerfacecolor;
                else
                  ec = obj.markeredgecolor;
                endif
              else
                ec = obj.edgecolor;
              endif
 
-             if ((strncmp (ec, "flat", 4)
-                  || strncmp (ec, "interp", 6))
+             if ((strcmp (ec, "flat")
+                  || strcmp (ec, "interp"))
                  && isfield (obj, "cdata"))
                if (ndims (obj.cdata) == 2
                    && (columns (obj.cdata) == nc
                        && (rows (obj.cdata) == 1
                            || rows (obj.cdata) == 3)))
                  ccol = cdat (:, i);
                elseif (ndims (obj.cdata) == 2
                        && (rows (obj.cdata) == nc
                            && (columns (obj.cdata) == 1
                                || columns (obj.cdata) == 3)))
                  ccol = cdat (i, :);
                elseif (ndims (obj.cdata) == 3)
                  ccol = permute (cdat (:, i, :), [1, 3, 2]);
                else
                  ccol = cdat;
                endif
-               if (strncmp (ec, "flat", 4))
+               if (strcmp (ec, "flat"))
                  if (numel (ccol) == 3)
                    color = ccol;
                  else
                    if (isscalar (ccol))
                      ccol = repmat (ccol, numel (xcol), 1);
                    endif
                    color = "flat";
                    have_cdata(data_idx) = true;
                  endif
-               elseif (strncmp (ec, "interp", 6))
+               elseif (strcmp (ec, "interp"))
                  if (numel (ccol) == 3)
                    warning ("\"interp\" not supported, using 1st entry of cdata");
                    color = ccol(1,:);
                  else
                    if (isscalar (ccol))
                      ccol = repmat (ccol, numel (xcol), 1);
                    endif
                    color = "interp";
@@ -914,18 +914,18 @@ function __go_draw_axes__ (h, plot_strea
              style = "";
            else
              style = "lines";
            endif
            tmpwith = {};
 
            facesame = true;
            if (! isequal (pt, pt2) && isfield (obj, "markerfacecolor")
-               && !strncmp (obj.markerfacecolor, "none", 4))
-             if (strncmp (obj.markerfacecolor, "auto", 4)
+               && !strcmp (obj.markerfacecolor, "none"))
+             if (strcmp (obj.markerfacecolor, "auto")
                  || ! isnumeric (obj.markerfacecolor)
                  || (isnumeric (obj.markerfacecolor)
                      && isequal (color, obj.markerfacecolor)))
                style = strcat (style, "points");
                if (isfield (obj, "markersize"))
                  if (length (mdat) == nc)
                    m = mdat(i);
                  else
@@ -964,19 +964,19 @@ function __go_draw_axes__ (h, plot_strea
                endif
                tmpwith{sidx} = sprintf ("with %s %s %s %s %s %s",
                                         style, lw, pt2, lt, ps,
                                         colorspec);
              endif
            endif
 
            if (isfield (obj, "markeredgecolor")
-               && !strncmp (obj.markeredgecolor, "none", 4))
+               && !strcmp (obj.markeredgecolor, "none"))
              if (facesame && !isempty (pt)
-                 && (strncmp (obj.markeredgecolor, "auto", 4)
+                 && (strcmp (obj.markeredgecolor, "auto")
                      || ! isnumeric (obj.markeredgecolor)
                      || (isnumeric (obj.markeredgecolor)
                          && isequal (color, obj.markeredgecolor))))
                if (sidx == 1 && ((length (style) == 5
                         && strncmp (style, "lines", 5))
                        || isempty (style)))
                  style = strcat (style, "points");
                  if (isfield (obj, "markersize"))
@@ -1000,17 +1000,17 @@ function __go_draw_axes__ (h, plot_strea
                                             style, lw, lt,
                                             colorspec);
                  endif
                  sidx ++;
                endif
 
                if (!isempty (pt))
                  if (! mono)
-                   if (strncmp (obj.markeredgecolor, "auto", 4))
+                   if (strcmp (obj.markeredgecolor, "auto"))
                      colorspec = sprintf ("lc rgb \"#%02x%02x%02x\"",
                                           round (255*color));
                    elseif (isnumeric (obj.markeredgecolor) && ! mono)
                      colorspec = sprintf ("lc rgb \"#%02x%02x%02x\"",
                                           round (255*obj.markeredgecolor));
                    endif
                  endif
                  style = "points";
@@ -1097,18 +1097,18 @@ function __go_draw_axes__ (h, plot_strea
              data{data_idx} = data{data_idx - 1};
              withclause{data_idx} = tmpwith{3};
            endif
          endif
        endfor
 
       case "surface"
         view_map = true;
-        if (! (strncmp (obj.edgecolor, "none", 4)
-               && strncmp (obj.facecolor, "none", 4)))
+        if (! (strcmp (obj.edgecolor, "none")
+               && strcmp (obj.facecolor, "none")))
           data_idx++;
           is_image_data(data_idx) = false;
           parametric(data_idx) = false;
           have_cdata(data_idx) = true;
           have_3d_patch(data_idx) = false;
           style = do_linestyle_command (obj, obj.edgecolor,
                                         data_idx, mono,
                                         plot_stream);
@@ -1170,22 +1170,22 @@ function __go_draw_axes__ (h, plot_strea
           if (doing_interp_color)
             interp_str = "interpolate 0, 0";
           else
             ## No interpolation of facecolors.
             interp_str = "";
           endif
           usingclause{data_idx} = sprintf ("record=%dx%d using ($1):($2):($3):($4)", ylen, xlen);
 
-          flat_interp_face = (strncmp (obj.facecolor, "flat", 4)
-                              || strncmp (obj.facecolor, "interp", 6));
-          flat_interp_edge = (strncmp (obj.edgecolor, "flat", 4)
-                              || strncmp (obj.edgecolor, "interp", 6));
+          flat_interp_face = (strcmp (obj.facecolor, "flat")
+                              || strcmp (obj.facecolor, "interp"));
+          flat_interp_edge = (strcmp (obj.edgecolor, "flat")
+                              || strcmp (obj.edgecolor, "interp"));
 
-          facecolor_none_or_white = (strncmp (obj.facecolor, "none", 4)
+          facecolor_none_or_white = (strcmp (obj.facecolor, "none")
                                      || (isnumeric (obj.facecolor)
                                          && all (obj.facecolor == 1)));
           hidden_removal = false;
           fputs (plot_stream, "set style increment default;\n");
           if (flat_interp_edge && facecolor_none_or_white)
             withpm3d = false;
             withclause{data_idx} = sprintf ("with %s palette", style {1});
             fputs (plot_stream, "unset pm3d\n");
@@ -1206,21 +1206,21 @@ function __go_draw_axes__ (h, plot_strea
 
           if (doing_interp_color)
             ## "depthorder" interferes with interpolation of colors.
             dord = "scansautomatic";
           else
             dord = "depthorder";
           endif
 
-          if (flat_interp_face && strncmp (obj.edgecolor, "flat", 4))
+          if (flat_interp_face && strcmp (obj.edgecolor, "flat"))
             fprintf (plot_stream, "set pm3d explicit at s %s %s corners2color c3;\n",
                      interp_str, dord);
           elseif (!facecolor_none_or_white)
-            if (strncmp (obj.edgecolor, "none", 4))
+            if (strcmp (obj.edgecolor, "none"))
               if (__gnuplot_has_feature__ ("transparent_surface")
                   && isscalar (obj.facealpha))
                 fprintf (plot_stream,
                          "set style fill transparent solid %f;\n",
                          obj.facealpha);
               endif
               fprintf (plot_stream, "set pm3d explicit at s %s corners2color c3;\n",
                        interp_str, dord);
@@ -1269,17 +1269,17 @@ function __go_draw_axes__ (h, plot_strea
             have_cdata(data_idx) = false;
             have_3d_patch(data_idx) = have_3d_patch(data_idx - 1);
             titlespec{data_idx} = "title \"\"";
             usingclause{data_idx} = sprintf ("record=%dx%d using ($1):($2):($3)", ylen, xlen);
             data{data_idx} = zz;
             withclause{data_idx} = sprintf ("with %s linestyle %d",
                                             style{3}, data_idx);
           endif
-          if (withpm3d && strncmp (style {1}, "linespoints", 11))
+          if (withpm3d && strcmp (style{1}, "linespoints"))
             if (isempty (zz))
               len = 3 * xlen;
               zz = zeros (ylen, len);
               k = 1;
               for kk = 1:3:len
                 zz(:,kk)   = xdat(:,k);
                 zz(:,kk+1) = ydat(:,k);
                 zz(:,kk+2) = zdat(:,k);
@@ -1826,18 +1826,18 @@ function style = do_linestyle_command (o
     if (isempty (lt))
       style {sidx} = "";
     else
       style {sidx} = "lines";
     endif
 
     facesame = true;
     if (! isequal (pt, pt2) && isfield (obj, "markerfacecolor")
-        && !strncmp (obj.markerfacecolor, "none", 4))
-      if (strncmp (obj.markerfacecolor, "auto", 4)
+        && !strcmp (obj.markerfacecolor, "none"))
+      if (strcmp (obj.markerfacecolor, "auto")
           || ! isnumeric (obj.markerfacecolor)
           || (isnumeric (obj.markerfacecolor)
               && isequal (color, obj.markerfacecolor)))
         if (! isempty (pt2))
           fprintf (plot_stream, " pointtype %s", pt2);
           style {sidx} = strcat (style{sidx}, "points");
         endif
         if (isfield (obj, "markersize"))
@@ -1866,24 +1866,24 @@ function style = do_linestyle_command (o
           fprintf (plot_stream, " pointtype %s", pt2);
         endif
         if (isfield (obj, "markersize"))
           fprintf (plot_stream, " pointsize %f", obj.markersize / 3);
         endif
       endif
     endif
     if (isfield (obj, "markeredgecolor")
-        && !strncmp (obj.markeredgecolor, "none", 4))
+        && !strcmp (obj.markeredgecolor, "none"))
       if (facesame && !isempty (pt)
-          && (strncmp (obj.markeredgecolor, "auto", 4)
+          && (strcmp (obj.markeredgecolor, "auto")
               || ! isnumeric (obj.markeredgecolor)
               || (isnumeric (obj.markeredgecolor)
                   && isequal (color, obj.markeredgecolor))))
         if (sidx == 1 && ((length (style {sidx}) == 5
-            && strncmp (style {sidx}, "lines", 5)) || isempty (style {sidx})))
+            && strncmp (style{sidx}, "lines", 5)) || isempty (style {sidx})))
           if (! isempty (pt))
             style {sidx} = strcat (style{sidx}, "points");
             fprintf (plot_stream, " pointtype %s", pt);
           endif
           if (isfield (obj, "markersize"))
             fprintf (plot_stream, " pointsize %f", obj.markersize / 3);
           endif
         endif
@@ -1896,17 +1896,17 @@ function style = do_linestyle_command (o
           sidx ++;
           idx ++;
         else
           fputs (plot_stream, ";\n");
         endif
         fprintf (plot_stream, "set style line %d default;\n", idx);
         fprintf (plot_stream, "set style line %d", idx);
         if (! mono)
-          if (strncmp (obj.markeredgecolor, "auto", 4))
+          if (strcmp (obj.markeredgecolor, "auto"))
             fprintf (plot_stream, " linecolor rgb \"#%02x%02x%02x\"",
                      round (255*color));
           elseif (isnumeric (obj.markeredgecolor) && ! mono)
             fprintf (plot_stream, " linecolor rgb \"#%02x%02x%02x\"",
                      round (255*obj.markeredgecolor));
           endif
         endif
         if (! isempty (pt))
@@ -1940,17 +1940,17 @@ function [pt, pt2, obj] = gnuplot_pointt
         pt = "6";
         pt2 = "7";
       case "*"
         pt = pt2 = "3";
       case "."
         pt = "6";
         pt2 = "7";
         if (isfield (obj, "markerfacecolor")
-            || strncmp (obj.markerfacecolor, "none", 4))
+            || strcmp (obj.markerfacecolor, "none"))
           obj.markerfacecolor = "auto";
         endif
         if (isfield (obj, "markersize"))
           obj.markersize /= 3;
         else
           obj.markersize = 5;
         endif
       case "x"
diff --git a/scripts/plot/private/__pie__.m b/scripts/plot/private/__pie__.m
--- a/scripts/plot/private/__pie__.m
+++ b/scripts/plot/private/__pie__.m
@@ -109,51 +109,51 @@ function hlist = __pie__ (caller, vararg
     yt = 1.2 * cosd (xn2);
 
     if (len == 1)
       set (h, "clim", [1, 2]);
     else
       set (h, "clim", [1, len]);
     endif
 
-    if (strncmp (caller, "pie3", 4))
+    if (strcmp (caller, "pie3"))
       ln = length (xn);
       zlvl = 0.35;
       sx = repmat (xoff + [0, -sind(xn), 0], [2, 1]);
       sy = repmat (yoff + [0, cosd(xn), 0], [2, 1]);
       sz = [zeros(1, ln + 2); zlvl * ones(1, ln + 2)];
       sc = i * ones (size (sz));
 
       hlist = [hlist;
         patch(xoff + [0, -sind(xn)], yoff + [0, cosd(xn)], zeros (1, ln + 1), i);
         surface(sx, sy, sz, sc);
         patch(xoff + [0, -sind(xn)], yoff + [0, cosd(xn)], zlvl * ones (1, ln + 1), i);
         text(xt, yt, zlvl, labels{i})];
 
-    elseif (strncmp (caller, "pie", 3))
+    elseif (strcmp (caller, "pie"))
       if (xt > 0)
         align = "left";
       else
         align = "right";
       endif
 
       hlist = [hlist; patch(xoff + [0, -sind(xn)], yoff + [0, cosd(xn)], i);
                text(xt, yt, labels{i}, "horizontalalignment", align)];
 
     else
       error ("__pie__: unknown caller '%s'", caller);
     endif
   endfor
 
   addlistener (gca, "view", {@update_text_pos, hlist});
 
-  if (strncmp (caller, "pie3", 4))
+  if (strcmp (caller, "pie3"))
     axis ([-1.25, 1.25, -1.25, 1.25, -0.05, 0.4], "equal", "off");
     view (-37.5, 30);
-  elseif (strncmp (caller, "pie", 3))
+  elseif (strcmp (caller, "pie"))
     axis ([-1.5, 1.5, -1.5, 1.5], "square", "off");
   endif
 endfunction
 
 function update_text_pos (all_handles)
   ## Text objects in the foreground should be at the base level.
   ## Text objects in the background should be at the top level.
   ## Text objects on the right side should be aligned to the right
diff --git a/scripts/plot/private/__print_parse_opts__.m b/scripts/plot/private/__print_parse_opts__.m
--- a/scripts/plot/private/__print_parse_opts__.m
+++ b/scripts/plot/private/__print_parse_opts__.m
@@ -85,19 +85,19 @@ function arg_st = __print_parse_opts__ (
       elseif (strcmp (arg, "-append"))
         arg_st.append_to_file = true;
       elseif (strcmp (arg, "-mono"))
         arg_st.use_color = -1;
       elseif (strcmp (arg, "-solid"))
         arg_st.force_solid = 1;
       elseif (strcmp (arg, "-dashed"))
         arg_st.force_solid = -1;
-      elseif (strncmp (arg, "-portrait", numel (arg)))
+      elseif (strncmp (arg, "-portrait", length (arg)))
         arg_st.orientation = "portrait";
-      elseif (strncmp (arg, "-landscape", numel (arg)))
+      elseif (strncmp (arg, "-landscape", length (arg)))
         arg_st.orientation = "landscape";
       elseif (strcmp (arg, "-loose"))
         arg_st.loose = true;
         arg_st.tight_flag = false;
       elseif (strcmp (arg, "-tight"))
         arg_st.loose = false;
         arg_st.tight_flag = true;
       elseif (strcmp (arg, "-textspecial"))
@@ -117,24 +117,24 @@ function arg_st = __print_parse_opts__ (
       elseif (strncmp (arg, "-EPSTOOL:", 9))
         arg_st.epstool_binary = arg{10:end};
       elseif (strncmp (arg, "-FIG2DEV:", 9))
         arg_st.fig2dev_binary = arg{10:end};
       elseif (strncmp (arg, "-PSTOEDIT:", 9))
         arg_st.pstoedit_binary = arg{10:end};
       elseif (strncmpi (arg, "-textalphabits=", 15))
         n = find (arg == "=");
-        if (! isempty (n) && n == numel (arg) - 1 && ismember (arg(end), "124"))
+        if (! isempty (n) && n == numel (arg) - 1 && any (arg(end) == "124"))
           arg_st.ghostscript.antialiasing_textalphabits = str2num (arg(end));
         else
           error ("print: improper syntax, or value, for TextAlphaBits");
         endif
       elseif (strncmpi (arg, "-graphicsalphabits=", 19))
         n = find (arg == "=");
-        if (! isempty (n) && n == numel (arg) - 1 && ismember (arg(end), "124"))
+        if (! isempty (n) && n == numel (arg) - 1 && any (arg(end) == "124"))
           arg_st.ghostscript.antialiasing_graphicsalphabits = str2num (arg(end));
         else
           error ("print: improper syntax, or value, for GraphicsAlphaBits");
         endif
       elseif ((length (arg) > 2) && arg(1:2) == "-G")
         arg_st.ghostscript.binary = file_in_path (getenv ("PATH"), arg(3:end));
         if (isempty (arg_st.ghostscript.binary))
           error ("print: Ghostscript binary ""%s"" could not be located",
diff --git a/scripts/plot/private/__quiver__.m b/scripts/plot/private/__quiver__.m
--- a/scripts/plot/private/__quiver__.m
+++ b/scripts/plot/private/__quiver__.m
@@ -76,24 +76,24 @@ function hg = __quiver__ (varargin)
     endif
   endif
 
   have_filled = false;
   have_line_spec = false;
   args = {};
   while (ioff <= nargin)
     arg = varargin{ioff++};
-    if (ischar (arg) && strncmpi (arg, "filled", 6))
+    if (ischar (arg) && strcmpi (arg, "filled"))
       have_filled = true;
     elseif ((ischar (arg) || iscell (arg))
             && ! have_line_spec)
       [linespec, valid] = __pltopt__ ("quiver", arg, false);
       if (valid)
         have_line_spec = true;
-        if (strncmp (linespec.linestyle, "none", 4))
+        if (strcmp (linespec.linestyle, "none"))
           linespec.linestyle = "-";
         endif
       else
         args {end + 1} = arg;
         if (ioff <= nargin)
           args {end + 1} = varargin{ioff++};
         endif
       endif
@@ -223,17 +223,17 @@ function hg = __quiver__ (varargin)
       xarrw1 = xtmp + (y - yend) * arrowsize / 3;
       xarrw2 = xtmp - (y - yend) * arrowsize / 3;
       yarrw1 = ytmp - (x - xend) * arrowsize / 3;
       yarrw2 = ytmp + (x - xend) * arrowsize / 3;
     endif
 
     if (have_line_spec)
       if (isfield (linespec, "marker")
-          && ! strncmp (linespec.marker, "none", 4))
+          && ! strcmp (linespec.marker, "none"))
         if (is3d)
           h2 = plot3 ([xarrw1.'; xend.'; xarrw2.'; NaN(1, length (x))](:),
                       [yarrw1.'; yend.'; yarrw2.'; NaN(1, length (y))](:),
                       [zarrw1.'; zend.'; zarrw2.'; NaN(1, length (z))](:),
                       "linestyle", "none", "parent", hg);
         else
           h2 = plot ([xarrw1.'; xend.'; xarrw2.'; NaN(1, length (x))](:),
                      [yarrw1.'; yend.'; yarrw2.'; NaN(1, length (y))](:),
@@ -261,17 +261,17 @@ function hg = __quiver__ (varargin)
     else
       h2 = plot ([xarrw1.'; xend.'; xarrw2.'; NaN(1, length (x))](:),
                  [yarrw1.'; yend.'; yarrw2.'; NaN(1, length (y))](:),
                  "parent", hg);
     endif
 
     if (! have_line_spec
         || (isfield (linespec, "marker")
-            && strncmp (linespec.marker, "none", 4)))
+            && strcmp (linespec.marker, "none")))
       if (is3d)
         h3 = plot3 (x, y, z, "linestyle", "none", "marker", "none",
                     "parent", hg);
       else
         h3 = plot (x, y, "linestyle", "none", "marker", "none", "parent", hg);
       endif
     else
       if (is3d)
diff --git a/scripts/plot/private/__tight_eps_bbox__.m b/scripts/plot/private/__tight_eps_bbox__.m
--- a/scripts/plot/private/__tight_eps_bbox__.m
+++ b/scripts/plot/private/__tight_eps_bbox__.m
@@ -53,17 +53,17 @@ function bb = __tight_eps_bbox__ (opts, 
 
   ## Attempt to fix the bbox in place.
   fid = fopen (eps_file_name, "r+");
   unwind_protect
     bbox_replaced = false;
     looking_for_bbox = true;
     while (looking_for_bbox)
       current_line = fgetl (fid);
-      if (strncmpi (current_line, box_string, numel (box_string)))
+      if (strncmpi (current_line, box_string, length (box_string)))
         line_length = numel (current_line);
         num_spaces = line_length - numel (tight_bbox_line);
         if (numel (current_line) >= numel (tight_bbox_line))
           new_line = tight_bbox_line;
           new_line(end+1:numel (current_line)) = " ";
           bbox_replaced = true;
           ## Back up to the beginning of the line (include EOL characters).
           if (ispc ())
diff --git a/scripts/plot/uigetfile.m b/scripts/plot/uigetfile.m
--- a/scripts/plot/uigetfile.m
+++ b/scripts/plot/uigetfile.m
@@ -98,19 +98,19 @@ function [retfile, retpath, retindex] = 
   endfor
 
   idx1 = idx2 = [];
   if (length (varargin) > 0)
     for i = 1 : length (varargin)
       val = varargin{i};
       if (ischar (val))
         val = tolower (val);
-        if (strncmp (val, "multiselect", 11))
+        if (strcmp (val, "multiselect"))
           idx1 = i;
-        elseif (strncmp (val, "position", 8))
+        elseif (strcmp (val, "position"))
           idx2 = i;
         endif
       endif
     endfor
   endif
 
   stridx = [idx1, idx2, 0];
   if (length (stridx) > 1)
@@ -163,23 +163,23 @@ function [retfile, retpath, retindex] = 
     ## check for even number of remaining arguments, prop/value pair(s)
     if (rem (nargin - stridx + 1, 2))
       error ("uigetfile: expecting property/value pairs");
     endif
 
     for i = stridx : 2 : nargin
       prop = varargin{i};
       val = varargin{i + 1};
-      if (strncmp (tolower (prop), "position", 8))
+      if (strcmpi (prop, "position"))
         if (ismatrix (val) && length (val) == 2)
           outargs{4} = val;
         else
           error ("uigetfile: expecting 2-element vector for position argument");
         endif
-      elseif (strncmp (tolower (prop), "multiselect", 11))
+      elseif (strcmpi (prop, "multiselect", 11))
         if (ischar (val))
           outargs{5} = tolower (val);
         else
           error ("uigetfile: expecting string argument (on/off) for multiselect");
         endif
       else
         error ("uigetfile: unknown argument");
       endif
diff --git a/scripts/strings/strsplit.m b/scripts/strings/strsplit.m
--- a/scripts/strings/strsplit.m
+++ b/scripts/strings/strsplit.m
@@ -155,25 +155,25 @@ function [result, matches] = strsplit (s
     endif
   endfor
 
   if (strcmpi (args.delimitertype, "default"))
     args.delimitertype = "simple";
   endif
 
   ## Save the length of the "delimitertype" parameter
-  length_deltype = numel (args.delimitertype);
+  length_deltype = length (args.delimitertype);
 
   if (nargin == 1 || (nargin > 1 && (islogical (del) || isnumeric (del))))
     if (nargin > 1)
       ## Second input is the "collapsedelimiters" parameter
       args.collapsedelimiters = del;
     endif
     ## Set proper default for the delimiter type
-    if (strncmpi (args.delimitertype, "simple", numel (args.delimitertype)))
+    if (strncmpi (args.delimitertype, "simple", length (args.delimitertype)))
       del = {" ","\f","\n","\r","\t","\v"};
     else
       del = "\\s";
     endif
   endif
 
   if (! ischar (str) || (! ischar (del) && ! iscellstr (del)))
     error ("strsplit: S and DEL must be string values");
diff --git a/scripts/strings/validatestring.m b/scripts/strings/validatestring.m
--- a/scripts/strings/validatestring.m
+++ b/scripts/strings/validatestring.m
@@ -47,17 +47,17 @@
 ## validatestring ("r", @{"red", "green", "blue"@})
 ## @result{} "red"
 ##
 ## validatestring ("b", @{"red", "green", "blue", "black"@})
 ## @result{} error: validatestring: multiple unique matches were found for 'b':
 ##    blue, black
 ## @end group
 ## @end smallexample
-## 
+##
 ## @seealso{strcmp, strcmpi}
 ## @end deftypefn
 
 ## Author: Bill Denney <bill@denney.ws>
 
 function str = validatestring (str, strarray, varargin)
 
   if (nargin < 2 || nargin > 5)
@@ -65,17 +65,17 @@ function str = validatestring (str, stra
   endif
 
   position = 0;
   ## Process input arguments
   if (! isempty (varargin) && isnumeric (varargin{end}))
     position = varargin{end};
     varargin(end) = [];
   endif
-  
+
   funcname = varname = "";
   char_idx = cellfun ("isclass", varargin, "char");
   n_chararg = sum (char_idx);
   if (n_chararg > 2)
     error ("validatestring: invalid number of character inputs (3)");
   elseif (n_chararg == 2)
     [funcname, varname] = deal (varargin{char_idx});
   elseif (n_chararg == 1)
@@ -107,31 +107,31 @@ function str = validatestring (str, stra
   endif
   if (position > 0)
     errstr = sprintf ("%sArgument position %d ", errstr, position);
   endif
   if (! isempty (errstr))
     errstr(end:end+1) = ":\n";
   endif
 
-  matches = strncmpi (str, strarray(:), numel (str));
+  matches = strncmpi (str, strarray(:), length (str));
   nmatches = sum (matches);
   if (nmatches == 0)
     error ("validatestring: %s'%s' does not match any of\n%s", errstr, str,
            sprintf ("%s, ", strarray{:})(1:end-2));
   elseif (nmatches == 1)
     str = strarray{matches};
   else
     ## Are the matches substrings of each other?
     ## If true, choose the shortest.  If not, raise an error.
     match_idx = find (matches);
     match_len = cellfun ("length", strarray(match_idx));
-    [min_len, min_idx] = min (match_len); 
+    [min_len, min_idx] = min (match_len);
     short_str = strarray{match_idx(min_idx)};
-    submatch = strncmpi (short_str, strarray(match_idx), min_len);    
+    submatch = strncmpi (short_str, strarray(match_idx), min_len);
     if (all (submatch))
       str = short_str;
     else
       error ("validatestring: %smultiple unique matches were found for '%s':\n%s",
              errstr, str, sprintf ("%s, ", strarray{match_idx})(1:end-2));
     endif
   endif
 
