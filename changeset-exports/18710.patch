# HG changeset patch
# User Torsten <ttl@justmail.de>
# Date 1398939128 -7200
#      Thu May 01 12:12:08 2014 +0200
# Branch gui-release
# Node ID 584b20e9112c3ebf08f69bef402622413bc5650c
# Parent  d6b962aa2e7611def16b5e273fe1d6a379931192
use shortcut manager for the main help menu

* main_window.cc (add_action): new parameter for the signal receiver;
 (construct_help_menu): use add_action for the actions of the menu;
 (construct_documentation_menu): use add_action for the actions of the menu;
 (set_global_shortcuts): set/unset shortcuts

* main-window.h: actions are class variables, add_action with new parameter

* shortcut-manager.cc (do_init_data): initialize the shortcuts in the help menu

diff --git a/libgui/src/main-window.cc b/libgui/src/main-window.cc
--- a/libgui/src/main-window.cc
+++ b/libgui/src/main-window.cc
@@ -1424,19 +1424,25 @@ main_window::construct_menu_bar (void)
 
   construct_help_menu (menu_bar);
 
   construct_news_menu (menu_bar);
 }
 
 QAction*
 main_window::add_action (QMenu *menu, const QIcon &icon, const QString &text,
-                         const char *member)
+                         const char *member, const QWidget *receiver)
 {
-  QAction *a = menu->addAction (icon, text, this, member);
+  QAction *a;
+
+  if (receiver)
+    a = menu->addAction (icon, text, receiver, member);
+  else
+    a = menu->addAction (icon, text, this, member);
+
   addAction (a);  // important for shortcut context
   a->setShortcutContext (Qt::ApplicationShortcut);
   return a;
 }
 
 void
 main_window::construct_file_menu (QMenuBar *p)
 {
@@ -1713,71 +1719,47 @@ void
 main_window::construct_help_menu (QMenuBar *p)
 {
   QMenu *help_menu = p->addMenu (tr ("&Help"));
 
   construct_documentation_menu (help_menu);
 
   help_menu->addSeparator ();
 
-  QAction *report_bug_action
-    = help_menu->addAction (tr ("Report Bug"));
-
-  QAction *octave_packages_action
-    = help_menu->addAction (tr ("Octave Packages"));
-
-  QAction *agora_action
-    = help_menu->addAction (tr ("Share Code"));
-
-  QAction *contribute_action
-    = help_menu->addAction (tr ("Contribute to Octave"));
-
-  QAction *developer_action
-    = help_menu->addAction (tr ("Octave Developer Resources"));
+  _report_bug_action = add_action (help_menu, QIcon (),
+            tr ("Report Bug"), SLOT (open_bug_tracker_page ()));
+
+  _octave_packages_action =  add_action (help_menu, QIcon (),
+            tr ("Octave Packages"), SLOT (open_octave_packages_page ()));
+
+  _agora_action = add_action (help_menu, QIcon (),
+            tr ("Share Code"), SLOT (open_agora_page ()));
+
+  _contribute_action = add_action (help_menu, QIcon (),
+            tr ("Contribute to Octave"), SLOT (open_contribute_page ()));
+
+  _developer_action = add_action (help_menu, QIcon (),
+            tr ("Octave Developer Resources"), SLOT (open_developer_page ()));
 
   help_menu->addSeparator ();
 
-  QAction *about_octave_action
-    = help_menu->addAction (tr ("About Octave"));
-
-  connect (report_bug_action, SIGNAL (triggered ()),
-           this, SLOT (open_bug_tracker_page ()));
-
-  connect (octave_packages_action, SIGNAL (triggered ()),
-           this, SLOT (open_octave_packages_page ()));
-
-  connect (agora_action, SIGNAL (triggered ()),
-           this, SLOT (open_agora_page ()));
-
-  connect (contribute_action, SIGNAL (triggered ()),
-           this, SLOT (open_contribute_page ()));
-
-  connect (developer_action, SIGNAL (triggered ()),
-           this, SLOT (open_developer_page ()));
-
-  connect (about_octave_action, SIGNAL (triggered ()),
-           this, SLOT (show_about_octave ()));
+  _about_octave_action = add_action (help_menu, QIcon (),
+            tr ("About Octave"), SLOT (show_about_octave ()));
 }
 
 void
 main_window::construct_documentation_menu (QMenu *p)
 {
-  QMenu *documentation_menu = p->addMenu (tr ("Documentation"));
-
-  QAction *ondisk_documentation_action
-    = documentation_menu->addAction (tr ("On Disk"));
-
-  QAction *online_documentation_action
-    = documentation_menu->addAction (tr ("Online"));
-
-  connect (ondisk_documentation_action, SIGNAL (triggered ()),
-           doc_browser_window, SLOT (focus ()));
-
-  connect (online_documentation_action, SIGNAL (triggered ()),
-           this, SLOT (open_online_documentation_page ()));
+  QMenu *doc_menu = p->addMenu (tr ("Documentation"));
+
+  _ondisk_doc_action = add_action (doc_menu, QIcon (),
+                     tr ("On Disk"), SLOT (focus ()), doc_browser_window);
+
+  _online_doc_action = add_action (doc_menu, QIcon (),
+                     tr ("Online"), SLOT (open_online_documentation_page ()));
 }
 
 void
 main_window::construct_news_menu (QMenuBar *p)
 {
   QMenu *news_menu = p->addMenu (tr ("&News"));
 
   QAction *release_notes_action
@@ -2275,16 +2257,27 @@ main_window::set_global_shortcuts (bool 
       shortcut_manager::set_shortcut (_show_documentation_action, "main_window:show_doc");
       shortcut_manager::set_shortcut (_command_window_action, "main_window:command");
       shortcut_manager::set_shortcut (_history_action, "main_window:history");
       shortcut_manager::set_shortcut (_workspace_action,  "main_window:workspace");
       shortcut_manager::set_shortcut (_file_browser_action,  "main_window:file_browser");
       shortcut_manager::set_shortcut (_editor_action, "main_window:editor");
       shortcut_manager::set_shortcut (_documentation_action, "main_window:doc");
       shortcut_manager::set_shortcut (_reset_windows_action, "main_window:reset");
+
+      // help menu
+      shortcut_manager::set_shortcut (_ondisk_doc_action, "main_help:ondisk_doc");
+      shortcut_manager::set_shortcut (_online_doc_action, "main_help:online_doc");
+      shortcut_manager::set_shortcut (_report_bug_action, "main_help:report_bug");
+      shortcut_manager::set_shortcut (_octave_packages_action, "main_help:packages");
+      shortcut_manager::set_shortcut (_agora_action, "main_help:agora");
+      shortcut_manager::set_shortcut (_contribute_action, "main_help:contribute");
+      shortcut_manager::set_shortcut (_developer_action, "main_help:developer");
+      shortcut_manager::set_shortcut (_about_octave_action, "main_help:about");
+
     }
   else
     {
 
       QKeySequence no_key = QKeySequence ();
 
       // file menu
       _open_action->setShortcut (no_key);
@@ -2301,16 +2294,26 @@ main_window::set_global_shortcuts (bool 
       _clear_clipboard_action->setShortcut (no_key);
       _find_files_action->setShortcut (no_key);
       _clear_command_history_action->setShortcut (no_key);
       _clear_command_window_action->setShortcut (no_key);
       _clear_workspace_action->setShortcut (no_key);
 
       // window menu
       _reset_windows_action->setShortcut (no_key);
+
+      // help menu
+      _ondisk_doc_action->setShortcut (no_key);
+      _online_doc_action->setShortcut (no_key);
+      _report_bug_action->setShortcut (no_key);
+      _octave_packages_action->setShortcut (no_key);
+      _agora_action->setShortcut (no_key);
+      _contribute_action->setShortcut (no_key);
+      _developer_action->setShortcut (no_key);
+      _about_octave_action->setShortcut (no_key);
     }
 
 }
 
 void
 main_window::handle_show_doc (const QString& file)
 {
   doc_browser_window->setVisible (true);
diff --git a/libgui/src/main-window.h b/libgui/src/main-window.h
--- a/libgui/src/main-window.h
+++ b/libgui/src/main-window.h
@@ -209,17 +209,17 @@ protected:
 
 private:
 
   void construct (void);
 
   void construct_octave_qt_link (void);
 
   QAction *add_action (QMenu *menu, const QIcon &icon, const QString &text,
-                       const char *member);
+                       const char *member, const QWidget *receiver = 0);
 
   void construct_menu_bar (void);
   void construct_file_menu (QMenuBar *p);
   void construct_new_menu (QMenu *p);
   void construct_edit_menu (QMenuBar *p);
   QAction *construct_debug_menu_item (const char *icon, const QString& item,
                                       const char* member);
   void construct_debug_menu (QMenuBar *p);
@@ -341,16 +341,25 @@ private:
   QAction *_command_window_action;
   QAction *_history_action;
   QAction *_workspace_action;
   QAction *_file_browser_action;
   QAction *_editor_action;
   QAction *_documentation_action;
   QAction *_reset_windows_action;
 
+  QAction *_ondisk_doc_action;
+  QAction *_online_doc_action;
+  QAction *_report_bug_action;
+  QAction *_octave_packages_action;
+  QAction *_agora_action;
+  QAction *_contribute_action;
+  QAction *_developer_action;
+  QAction *_about_octave_action;
+
   // Toolbars.
   QComboBox *_current_directory_combo_box;
   static const int current_directory_width = 300;
   static const int current_directory_max_visible = 16;
   static const int current_directory_max_count = 16;
   QLineEdit *_current_directory_line_edit;
 
   // Find files dialog
diff --git a/libgui/src/shortcut-manager.cc b/libgui/src/shortcut-manager.cc
--- a/libgui/src/shortcut-manager.cc
+++ b/libgui/src/shortcut-manager.cc
@@ -121,16 +121,26 @@ shortcut_manager::do_init_data ()
   init (tr ("Command Window"), "main_window:command", ctrl + Qt::Key_0);
   init (tr ("Command History"), "main_window:history", ctrl + Qt::Key_1);
   init (tr ("File Browser"), "main_window:file_browser", ctrl + Qt::Key_2);
   init (tr ("Workspace"), "main_window:workspace", ctrl + Qt::Key_3);
   init (tr ("Editor"), "main_window:editor", ctrl + Qt::Key_4);
   init (tr ("Documentation"), "main_window:doc", ctrl + Qt::Key_5);
   init (tr ("Reset Window Layout"), "main_window:reset", QKeySequence ());
 
+  // help
+  init (tr ("Show Ondisk Documentation"), "main_help:ondisk_doc", QKeySequence ());
+  init (tr ("Show Online Documentation"), "main_help:online_doc", QKeySequence ());
+  init (tr ("Report a Bug"), "main_help:report_bug", QKeySequence ());
+  init (tr ("Octave Packages"), "main_help:packages", QKeySequence ());
+  init (tr ("Share Code"), "main_help:agora", QKeySequence ());
+  init (tr ("Contribute to Octave"), "main_help:contribute", QKeySequence ());
+  init (tr ("Octave Developer Resources"), "main_help:developer", QKeySequence ());
+  init (tr ("About Octave"), "main_help:about", QKeySequence ());
+
   // actions of the editor
 
   // file
   init (tr ("Edit Function"), "editor_file:edit_function", QKeySequence (Qt::ControlModifier + Qt::Key_E) );
   init (tr ("Save File"), "editor_file:save", QKeySequence::Save );
   init (tr ("Save File As"), "editor_file:save_as", QKeySequence::SaveAs );
   init (tr ("Close"), "editor_file:close", QKeySequence::Close );
   init (tr ("Close All"), "editor_file:close_all", QKeySequence () );
