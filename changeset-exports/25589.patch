# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1531415424 14400
#      Thu Jul 12 13:10:24 2018 -0400
# Node ID c21edcb90cbf81b914bc9693b40f6d0eb7d0c9f0
# Parent  3ac397daf772f789796b4b4adb2ad68118c2160c
support for osmesa removed (bug #50479)

* configure.ac: Don't check for osmesa library.

* __osmesa_print__.cc: Delete.
* libinterp/dldfcn/module-files: Update.

* getframe.m, __opengl_print__.m: Don't use osmesa for printing.

* NEWS: Note change.

diff --git a/NEWS b/NEWS
--- a/NEWS
+++ b/NEWS
@@ -10,19 +10,23 @@ Summary of important user-visible change
     with Matlab.  Change all uses of "ascending" and "descending" in
     existing code to the new options.
 
  ** Figure graphic objects have a new property "Number" which is
     read-only and will return the handle (number) of the figure.
     However, if the property "IntegerHandle" has been set to "off" then
     the property will return an empty matrix ([]).
 
- ** We now require the FFTW library to perform FFT calculations.  The
+ ** The FFTW library is now required to perform FFT calculations.  The
     FFTPACK sources have been removed from Octave.
 
+ ** The OSMesa library is no longer used.  To print invisible figures
+    when using OpenGL graphics, the Qt QOFFSCREENSURFACE feature must be
+    available and you must use the qt graphics toolkit.
+
  ** Deprecated functions.
 
     The following functions have been deprecated in Octave 5.0 and will
     be removed from Octave 7 (or whatever version is the second major
     release after 5.0):
 
       Function             | Replacement
       ---------------------|------------------
diff --git a/configure.ac b/configure.ac
--- a/configure.ac
+++ b/configure.ac
@@ -1907,86 +1907,16 @@ case $host_os in
   *)
     DEFAULT_TERMINAL_FONT="Courier"
   ;;
 esac
 DEFAULT_TERMINAL_FONT_SIZE=10
 AC_SUBST(DEFAULT_TERMINAL_FONT)
 AC_SUBST(DEFAULT_TERMINAL_FONT_SIZE)
 
-### Check for OSMesa.
-## Library is needed for offscreen rendering with Qt < 5.1 or FLTK.
-use_osmesa=auto
-AC_ARG_WITH([osmesa],
-  [AS_HELP_STRING([--with-osmesa],
-    [use OSMesa library for offscreen rendering of invisible figures])],
-  [if test x"$withval" = xyes; then
-     use_osmesa=yes
-   else
-     use_osmesa=no
-   fi])
-
-dnl If no argument given, only use OSMesa when Qt is too old
-if test $use_osmesa = auto; then
-  ## Quote $octave_cv_qt_opengl_os_ok because it will only be set if
-  ## Qt is found.
-  if test "$octave_cv_qt_opengl_os_ok" = yes; then
-    use_osmesa=no
-  else
-    use_osmesa=yes
-  fi
-fi
-
-if test $use_osmesa = yes; then
-  dnl Pre-declare warning message, and unset if library is found
-  ## Quote $octave_cv_qt_opengl_os_ok because it will only be set if
-  ## Qt is found.
-  if test "$octave_cv_qt_opengl_os_ok" = no; then
-    warn_osmesa="OSMesa library not found and Qt < 5.1.  Offscreen rendering with OpenGL will be disabled."
-  else
-    warn_osmesa="OSMesa library not found.  Offscreen rendering with FLTK will be disabled."
-  fi
-
-  OSMESA_LIBS="-lOSMesa"
-  save_CPPFLAGS="$CPPFLAGS"
-  save_LDFLAGS="$LDFLAGS"
-  save_LIBS="$LIBS"
-  CPPFLAGS="$OSMESA_CPPFLAGS $CPPFLAGS"
-  LDFLAGS="$OSMESA_LDFLAGS $LDFLAGS"
-  LIBS="$OSMESA_LIBS $LIBS"
-  AC_LANG_PUSH(C++)
-  ac_octave_osmesa_check_for_lib=no
-  AC_CHECK_HEADERS([osmesa.h GL/osmesa.h],
-                   [ac_octave_osmesa_check_for_lib=yes; break])
-  if test $ac_octave_osmesa_check_for_lib = yes; then
-    AC_CACHE_CHECK([for OSMesaCreateContext in OSMesa],
-      octave_cv_lib_osmesa,
-      [AC_LINK_IFELSE([AC_LANG_CALL([], [OSMesaCreateContext])],
-        [octave_cv_lib_osmesa=yes], [octave_cv_lib_osmesa=no])
-    ])
-    if test $octave_cv_lib_osmesa = yes; then
-      warn_osmesa=
-      AC_DEFINE(HAVE_OSMESA, 1, [Define to 1 if OSMesa is available.])
-    fi
-  fi
-  AC_LANG_POP(C++)
-  CPPFLAGS="$save_CPPFLAGS"
-  LDFLAGS="$save_LDFLAGS"
-  LIBS="$save_LIBS"
-
-  if test -n "$warn_osmesa"; then
-    OCTAVE_CONFIGURE_WARNING([warn_osmesa])
-    OSMESA_LIBS=
-  fi
-fi
-
-AC_SUBST(OSMESA_CPPFLAGS)
-AC_SUBST(OSMESA_LDFLAGS)
-AC_SUBST(OSMESA_LIBS)
-
 ### Check for FLTK library
 
 check_fltk=yes
 build_fltk_graphics=no
 
 AC_ARG_WITH([fltk],
   [AS_HELP_STRING([--without-fltk],
     [don't use FLTK libraries, disable OpenGL graphics with FLTK widgets])],
@@ -2633,17 +2563,17 @@ ENABLE_DOCS=yes
 AC_ARG_ENABLE([docs],
   [AS_HELP_STRING([--disable-docs], [don't build documentation files])],
   [if test "$enableval" = no; then
      ENABLE_DOCS=no
      warn_docs="building documentation disabled; make dist will fail."
      OCTAVE_CONFIGURE_WARNING([warn_docs])
    fi], [])
 if test $ENABLE_DOCS = yes; then
-  if test $opengl_graphics = no || { test "$have_qt_opengl_offscreen" = no && test -n "$warn_osmesa"; }; then
+  if test $opengl_graphics = no || test "$have_qt_opengl_offscreen" = no; then
     if test -n "$warn_gnuplot"; then
       ENABLE_DOCS=no
       warn_docs_graphics="building documentation disabled because no suitable graphics toolkit is available; make dist will fail."
       OCTAVE_CONFIGURE_WARNING([warn_docs_graphics])
     fi
   fi
   if test -n "$warn_makeinfo"; then
     ENABLE_DOCS=no
diff --git a/libinterp/dldfcn/__osmesa_print__.cc b/libinterp/dldfcn/__osmesa_print__.cc
deleted file mode 100644
--- a/libinterp/dldfcn/__osmesa_print__.cc
+++ /dev/null
@@ -1,257 +0,0 @@
-/*
-
-Copyright (C) 2016-2018 Andreas Weber <andy.weber.aw@gmail.com>
-
-This file is part of Octave.
-
-Octave is free software: you can redistribute it and/or modify it
-under the terms of the GNU General Public License as published by
-the Free Software Foundation, either version 3 of the License, or
-(at your option) any later version.
-
-Octave is distributed in the hope that it will be useful, but
-WITHOUT ANY WARRANTY; without even the implied warranty of
-MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-GNU General Public License for more details.
-
-You should have received a copy of the GNU General Public License
-along with Octave; see the file COPYING.  If not, see
-<https://www.gnu.org/licenses/>.
-
-This code is based on Brian Pauls' src/osdemos/osdemo.c
-from git://anongit.freedesktop.org/mesa/demos
-
-*/
-
-#if defined (HAVE_CONFIG_H)
-#  include "config.h"
-#endif
-
-#if defined (HAVE_OSMESA_H)
-#  include <osmesa.h>
-#elif defined (HAVE_GL_OSMESA_H)
-#  include <GL/osmesa.h>
-#endif
-
-#include <string>
-
-#include "Array.h"
-#include "dMatrix.h"
-#include "oct-locbuf.h"
-#include "uint8NDArray.h"
-#include "unwind-prot.h"
-
-#include "defun-dld.h"
-#include "error.h"
-#include "errwarn.h"
-#include "gl-render.h"
-#include "gl2ps-print.h"
-#include "graphics.h"
-#include "oct-opengl.h"
-#include "ov.h"
-#include "ovl.h"
-
-#if defined (HAVE_OSMESA)
-
-static void
-reset_visibility (figure::properties *fp)
-{
-  fp->set_visible ("on");
-}
-
-#endif
-
-DEFUN_DLD(__osmesa_print__, args, ,
-          doc: /* -*- texinfo -*-
-@deftypefn  {} {} __osmesa_print__ (@var{h}, @var{file}, @var{term})
-@deftypefnx {} {@var{img} =} __osmesa_print__ (@var{h})
-Print figure @var{h} using OSMesa and gl2ps for vector formats.
-
-This is a private internal function.
-
-The first method calls gl2ps with the appropriate @var{term} and writes
-the output of gl2ps to @var{file}.  If the first character of @var{file}
-is @code{|}, then a process is started and the output of gl2ps is piped
-to it.
-
-Valid options for @var{term}, which can be concatenated in one string, are:
-
-@table @asis
-@item @qcode{eps}, @qcode{pdf}, @qcode{ps}, @qcode{svg}, @qcode{pgf}, @qcode{tex}
-Select output format.
-
-@item @code{is2D}
-Use GL2PS_SIMPLE_SORT instead of GL2PS_BSP_SORT as Z-depth sorting
-algorithm.
-
-@item @code{notext}
-Don't render text.
-@end table
-
-The second method doesn't use gl2ps and returns a RGB image in @var{img}
-instead.
-
-@end deftypefn */)
-{
-#if defined (HAVE_OSMESA)
-
-  int nargin = args.length ();
-
-  if (nargin != 1 && nargin != 3)
-    print_usage ();
-
-  if (nargin == 3)
-    {
-      if (! (args(1).is_string () && args(2).is_string ()))
-        error ("__osmesa_print__: FILE and TERM must be strings");
-    }
-
-  octave_value_list retval;
-
-  int h = args(0).double_value ();
-  graphics_object fobj = gh_manager::get_object (h);
-  if (! (fobj && fobj.isa ("figure")))
-    error ("__osmesa_print__: H must be a valid figure handle");
-
-  figure::properties& fp =
-    dynamic_cast<figure::properties&> (fobj.get_properties ());
-
-  bool internal = true;
-  Matrix bb = fp.get_boundingbox (internal);
-
-  GLsizei Width = static_cast<GLsizei> (bb(2));
-  GLsizei Height = static_cast<GLsizei> (bb(3));
-
-  // Create an RGBA-mode context, specify Z=16, stencil=0, accum=0 sizes
-  OSMesaContext ctx = OSMesaCreateContextExt (OSMESA_RGBA, 16, 0, 0, nullptr);
-  if (! ctx)
-    error ("__osmesa_print__: OSMesaCreateContext failed!\n");
-
-  // Allocate the image buffer
-  OCTAVE_LOCAL_BUFFER (GLubyte, buffer, 4 * Width * Height);
-
-  // Bind the buffer to the context and make it current
-  if (! OSMesaMakeCurrent (ctx, buffer, GL_UNSIGNED_BYTE, Width, Height))
-    error ("__osmesa_print__: OSMesaMakeCurrent failed!\n");
-
-  // Test for a bug in OSMesa with version < 9.0
-  //
-  // Unfortunately the macros OSMESA_MAJOR_VERSION and OSMESA_MINOR_VERSION
-  // weren't updated between many releases and can't be used for detection.
-  // (Version 8.0 until 9.1.4 all return MAJOR 6, MINOR 5)
-  GLint z, s;
-  glGetIntegerv (GL_DEPTH_BITS, &z);
-  glGetIntegerv (GL_STENCIL_BITS, &s);
-  if (z != 16 || s != 0)
-    error ("__osmesa_print__: Depth and stencil doesn't match,"
-           " are you sure you are using OSMesa >= 9.0?");
-
-  octave::unwind_protect outer_frame;
-
-  bool v = fp.is_visible ();
-
-  if (v)
-    {
-      outer_frame.add_fcn (reset_visibility, &fp);
-
-      fp.set_visible ("off");
-    }
-
-  if (nargin == 3)
-    {
-      std::string file = args(1).string_value ();
-      std::string term = args(2).string_value ();
-
-      octave::gl2ps_print (fobj, file, term);
-    }
-  else
-    {
-      // return RGB image
-      octave::opengl_renderer rend;
-
-      // Draw and finish () or there may primitives missing in the
-      // output.
-      rend.draw (fobj);
-      rend.finish ();
-
-      dim_vector dv (4, Width, Height);
-
-      // FIXME: We expect that GLubyte is 1 Byte long.
-      // Adapt code if this isn't always true
-      assert (sizeof (GLubyte) == 1);
-      uint8NDArray img (dv);
-      unsigned char *p = reinterpret_cast<unsigned char *>(img.fortran_vec ());
-      memcpy (p, buffer, (4 * Width * Height));
-
-      Array<octave_idx_type> perm (dim_vector (3, 1));
-      perm(0) = 2;
-      perm(1) = 1;
-      perm(2) = 0;
-
-      Array<idx_vector> idx (dim_vector (3, 1));
-
-      // Flip Y
-      idx(0) = idx_vector::make_range (Height - 1, -1, Height);
-      idx(1) = idx_vector::colon;
-
-      // Remove alpha channel
-      idx(2) = idx_vector (0, 3);
-      retval(0) = octave_value (img.permute (perm).index(idx));
-    }
-
-  OSMesaDestroyContext (ctx);
-
-  return retval;
-
-#else
-
-  octave_unused_parameter (args);
-
-  err_disabled_feature ("__osmesa_print__", "offscreen rendering with OSMesa");
-
-#endif
-}
-
-/*
-## FIXME: osmesa does not work correctly on Windows platforms.
-##        This is not critical, since this facility will mostly be used in
-##        the future for generating the images in Octave's own documentation.
-##        For the moment, disable these tests on PC's and Macs.
-%!testif HAVE_OPENGL, HAVE_OSMESA, HAVE_GL2PS_H
-%! if (isunix ())
-%!   hf = figure ("visible", "off");
-%!   fn = tempname ();
-%!   unwind_protect
-%!     sombrero ();
-%!     __osmesa_print__ (hf, fn, "svg");
-%!     assert (stat (fn).size > 2e6);
-%!     img = __osmesa_print__ (hf);
-%!     assert (size (img), [get(hf, "position")([4, 3]), 3]);
-%!     ## Use pixel sum per RGB channel as fingerprint
-%!     img_fp = squeeze (sum (sum (img), 2));
-%!     assert (img_fp, [52942515; 54167797; 56158178], -0.05);
-%!   unwind_protect_cleanup
-%!     close (hf);
-%!     unlink (fn);
-%!   end_unwind_protect
-%! endif
-
-%!testif HAVE_OPENGL, HAVE_OSMESA, HAVE_GL2PS_H
-%! if (isunix ())
-%!   hf = figure ("visible", "off");
-%!   fn = tempname ();
-%!   unwind_protect
-%!     plot (sin (0:0.1:2*pi));
-%!     __osmesa_print__ (hf, fn, "svgis2d");
-%!     assert (stat (fn).size, 9022, -0.20);
-%!     img = __osmesa_print__ (hf);
-%!     assert (size (img), [get(hf, "position")([4, 3]), 3]);
-%!     ## Use pixel sum per RGB channel as fingerprint
-%!     img_fp = squeeze (sum (sum (img), 2));
-%!     assert (img_fp, [59281711; 59281711; 59482179], -0.05);
-%!   unwind_protect_cleanup
-%!     close (hf);
-%!     unlink (fn);
-%!   end_unwind_protect
-%! endif
-*/
diff --git a/libinterp/dldfcn/module-files b/libinterp/dldfcn/module-files
--- a/libinterp/dldfcn/module-files
+++ b/libinterp/dldfcn/module-files
@@ -1,17 +1,16 @@
 # FILE|CPPFLAGS|LDFLAGS|LIBRARIES
 __delaunayn__.cc|$(QHULL_CPPFLAGS)|$(QHULL_LDFLAGS)|$(QHULL_LIBS)
 __eigs__.cc|$(ARPACK_CPPFLAGS) $(SPARSE_XCPPFLAGS)|$(ARPACK_LDFLAGS) $(SPARSE_XLDFLAGS)|$(ARPACK_LIBS) $(SPARSE_XLIBS) $(LAPACK_LIBS) $(BLAS_LIBS)
 __fltk_uigetfile__.cc|$(FLTK_CPPFLAGS) $(FT2_CPPFLAGS)|$(FLTK_LDFLAGS) $(FT2_LDFLAGS)|$(FLTK_LIBS) $(FT2_LIBS)
 __glpk__.cc|$(GLPK_CPPFLAGS)|$(GLPK_LDFLAGS)|$(GLPK_LIBS)
 __init_fltk__.cc|$(FLTK_CPPFLAGS) $(FT2_CPPFLAGS) $(FONTCONFIG_CPPFLAGS)|$(FLTK_LDFLAGS) $(FT2_LDFLAGS)|$(FLTK_LIBS) $(FT2_LIBS) $(OPENGL_LIBS)
 __init_gnuplot__.cc|$(FT2_CPPFLAGS) $(FONTCONFIG_CPPFLAGS)||
 __ode15__.cc|$(SUNDIALS_XCPPFLAGS)|$(SUNDIALS_XLDFLAGS)|$(SUNDIALS_XLIBS)
-__osmesa_print__.cc|$(OSMESA_CPPFLAGS) $(FT2_CPPFLAGS)|$(OSMESA_LDFLAGS)|$(OSMESA_LIBS)
 __voronoi__.cc|$(QHULL_CPPFLAGS)|$(QHULL_LDFLAGS)|$(QHULL_LIBS)
 amd.cc|$(SPARSE_XCPPFLAGS)|$(SPARSE_XLDFLAGS)|$(SPARSE_XLIBS)
 audiodevinfo.cc|$(PORTAUDIO_CPPFLAGS)|$(PORTAUDIO_LDFLAGS)|$(PORTAUDIO_LIBS)
 audioread.cc|$(SNDFILE_CPPFLAGS)|$(SNDFILE_LDFLAGS)|$(SNDFILE_LIBS)
 ccolamd.cc|$(SPARSE_XCPPFLAGS)|$(SPARSE_XLDFLAGS)|$(SPARSE_XLIBS)
 chol.cc|$(SPARSE_XCPPFLAGS)|$(SPARSE_XLDFLAGS)|$(SPARSE_XLIBS)
 colamd.cc|$(SPARSE_XCPPFLAGS)|$(SPARSE_XLDFLAGS)|$(SPARSE_XLIBS)
 convhulln.cc|$(QHULL_CPPFLAGS)|$(QHULL_LDFLAGS)|$(QHULL_LIBS)
diff --git a/scripts/image/getframe.m b/scripts/image/getframe.m
--- a/scripts/image/getframe.m
+++ b/scripts/image/getframe.m
@@ -96,22 +96,17 @@ function frame = getframe (h = [], rect 
   endif
 
   if (strcmp (get (hf, "visible"), "on")
       || (strcmp (get (hf, "__graphics_toolkit__"), "qt")
           && (strcmp (get (hf, "__gl_window__"), "on")
               || __have_feature__ ("QT_OFFSCREEN"))))
     cdata = __get_frame__ (hf);
   else
-    ## Use OpenGL offscreen rendering with OSMesa for non-visible figures
-    try
-      cdata = __osmesa_print__ (hf);
-    catch
-      error ("getframe: couldn't render invisible figure. %s", lasterr ());
-    end_try_catch
+    error ("getframe: figure must be visible or qt toolkit must be used with __gl_window__ property 'on' or QT_OFFSCREEN feature available");
   endif
 
   i1 = max (floor (pos(1)), 1);
   i2 = min (ceil (pos(1)+pos(3)-1), columns (cdata));
   idxx = i1:i2;
   i1 = max (floor (pos(2)), 1);
   i2 = min (ceil (pos(2)+pos(4)-1), rows (cdata));
   idxy = fliplr (rows (cdata) - (i1:i2) + 1);
diff --git a/scripts/plot/util/private/__opengl_print__.m b/scripts/plot/util/private/__opengl_print__.m
--- a/scripts/plot/util/private/__opengl_print__.m
+++ b/scripts/plot/util/private/__opengl_print__.m
@@ -152,18 +152,17 @@ function opts = __opengl_print__ (opts)
 
     if (strcmp (get (opts.figure, "visible"), "on")
         || (strcmp (get (opts.figure, "__graphics_toolkit__"), "qt")
             && (strcmp (get (opts.figure, "__gl_window__"), "on")
                 || __have_feature__ ("QT_OFFSCREEN"))))
       ## Use toolkits "print_figure" method
       drawnow (gl2ps_device{n}, ['|' pipeline{n}]);
     else
-      ## Use OpenGL offscreen rendering with OSMesa
-      __osmesa_print__ (opts.figure, ['|' pipeline{n}], gl2ps_device{n});
+      error ("print: figure must be visible or qt toolkit must be used with __gl_window__ property 'on' or QT_OFFSCREEN feature available");
     endif
   endfor
 
   if (! isempty (strfind (opts.devopt, "standalone")))
     opts.latex_standalone (opts);
   endif
 
 endfunction
