# HG changeset patch
# User jwe
# Date 815181366 0
#      Tue Oct 31 23:16:06 1995 +0000
# Node ID 2790524e19321ac01e15243a720c912389bfc52c
# Parent  992d524aefb41edf15bf1fabdf3cd5445fc4a5d1
[project @ 1995-10-31 23:16:06 by jwe]

diff --git a/src/pt-const.cc b/src/pt-const.cc
--- a/src/pt-const.cc
+++ b/src/pt-const.cc
@@ -2919,18 +2919,24 @@ extern void assign (Array2<Complex>&, co
 extern void assign (Array2<double>&, const Array2<double>&);
 extern void assign (Array2<double>&, const Array2<char>&);
 
 extern void assign (Array2<char>&, const Array2<char>&);
 
 void
 TC_REP::assign (tree_constant& rhs, const Octave_object& args)
 {
+  // XXX FIXME XXX -- we should probably have special cases for rhs
+  // being a range type, since converting to a matrix can waste a lot
+  // of memory.
+
+  tree_constant rhs_tmp = rhs;
+
   if (! (is_string () && rhs.is_string ()))
-    tree_constant rhs_tmp = rhs.make_numeric ();
+    rhs_tmp.force_numeric ();
 
   if (error_state)
     return;
 
   // An assignment to a range will normally require a conversion to a
   // vector in the end anyway, since it will normally destroy the
   // equally-spaced property of the range elements.  This is not as
   // memory efficient as possible, but it is much simpler than writing
@@ -2938,69 +2944,69 @@ TC_REP::assign (tree_constant& rhs, cons
   // Ranges.
 
   if (is_defined () && ! (is_numeric_type () || is_string ()))
     force_numeric ();
 
   if (error_state)
     return;
 
-  maybe_widen (rhs.const_type ());
-
-  set_index (args, rhs.is_complex_type ());
+  maybe_widen (rhs_tmp.const_type ());
+
+  set_index (args, rhs_tmp.is_complex_type ());
 
   if (! error_state)
     {
       switch (type_tag)
 	{
 	case complex_matrix_constant:
 	  {
-	    switch (rhs.const_type ())
+	    switch (rhs_tmp.const_type ())
 	      {
 	      case complex_scalar_constant:
 	      case complex_matrix_constant:
-		::assign (*complex_matrix, rhs.complex_matrix_value ());
+		::assign (*complex_matrix, rhs_tmp.complex_matrix_value ());
 		break;
 
 	      case scalar_constant:
 	      case matrix_constant:
-		::assign (*complex_matrix, rhs.matrix_value ());
+		::assign (*complex_matrix, rhs_tmp.matrix_value ());
 		break;
 
 	      default:
 		panic_impossible ();;
 		break;
 	      }
 	  }
 	  break;
 
 	case scalar_constant:
 	case matrix_constant:
 	  {
-	    switch (rhs.const_type ())
+	    switch (rhs_tmp.const_type ())
 	      {
 	      case scalar_constant:
 	      case matrix_constant:
-		::assign (*matrix, rhs.matrix_value ());
+		::assign (*matrix, rhs_tmp.matrix_value ());
 		break;
 
 	      case char_matrix_constant:
-		::assign (*matrix, rhs.char_matrix_value ());
+		::assign (*matrix, rhs_tmp.char_matrix_value ());
 		break;
 
 	      default:
 		panic_impossible ();
 		break;
 	      }
 	  }
 	  break;
 
 	case char_matrix_constant:
 	case char_matrix_constant_str:
-	  ::assign (*char_matrix, rhs.char_matrix_value ());
+	  ::assign (*char_matrix, rhs_tmp.char_matrix_value ());
 	  break;
 
 	default:
 	  panic_impossible ();
 	  break;
 	}
     }
 }
