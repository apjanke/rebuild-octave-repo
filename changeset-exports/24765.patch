# HG changeset patch
# User Daniel J Sebald <daniel.sebald@ieee.org>
# Date 1518476097 21600
#      Mon Feb 12 16:54:57 2018 -0600
# Node ID cea7557d91ef0aa82d8cff99071b97187778fd07
# Parent  95142fc85564e5e26944724a6fb41430e12a1c1e
Range-check variable editor m_table_colors before using (bug #53137)

* variable-editor.cc (variable_editor::notice_settings):
Check that the index is less than the default_colors QList length or
the m_table_colors QList length before accessing those lists.
(variable_editor::update_colors): Check that m_table_colors has
sufficient length before indexing with value 0, 1, 2 or 3.

diff --git a/libgui/src/variable-editor.cc b/libgui/src/variable-editor.cc
--- a/libgui/src/variable-editor.cc
+++ b/libgui/src/variable-editor.cc
@@ -619,17 +619,17 @@ variable_editor::notice_settings (const 
                                      100).toInt ();
 
   m_default_height = settings->value ("variable_editor/row_height",
                                       10).toInt ();
 
   m_alternate_rows = settings->value ("variable_editor/alternate_rows",
                                       false).toBool ();
 
-  QList<QColor> _default_colors = resource_manager::varedit_default_colors ();
+  QList<QColor> default_colors = resource_manager::varedit_default_colors ();
 
   QString class_chars = resource_manager::varedit_color_chars ();
 
   m_use_terminal_font = settings->value ("variable_editor/use_terminal_font",
                                          true).toBool ();
 
   QString font_name;
   int font_size;
@@ -651,23 +651,28 @@ variable_editor::notice_settings (const 
   m_font = QFont (font_name, font_size);
 
   QFontMetrics fm (m_font);
 
   m_add_font_height = fm.height ();
 
   for (int i = 0; i < class_chars.length (); i++)
     {
-      QVariant default_var = _default_colors.at (i);
+      QVariant default_var;
+      if (i < default_colors.length ())
+        default_var = default_colors.at (i);
+      else
+        default_var = QColor ();
 
       QColor setting_color = settings->value ("variable_editor/color_"
                                               + class_chars.mid (i, 1),
                                               default_var).value<QColor> ();
 
-      m_table_colors.replace (i, setting_color);
+      if (i < m_table_colors.length ())
+        m_table_colors.replace (i, setting_color);
     }
 
   update_colors ();
 
   // Icon size in the toolbar.
 
   int icon_size_settings = settings->value ("toolbar_icon_size", 0).toInt ();
   QStyle *st = style ();
@@ -1454,27 +1459,31 @@ variable_editor::selected_to_octave (voi
 }
 
 // Also updates the font.
 
 void variable_editor::update_colors (void)
 {
   m_stylesheet = "";
 
-  m_stylesheet += "QTableView::item{ foreground-color: "
-    + m_table_colors[0].name () +" }";
+  if (m_table_colors.length () > 0)
+    m_stylesheet += "QTableView::item{ foreground-color: "
+      + m_table_colors[0].name () +" }";
 
-  m_stylesheet += "QTableView::item{ background-color: "
-    + m_table_colors[1].name () +" }";
+  if (m_table_colors.length () > 1)
+    m_stylesheet += "QTableView::item{ background-color: "
+      + m_table_colors[1].name () +" }";
 
-  m_stylesheet += "QTableView::item{ selection-color: "
-    + m_table_colors[2].name () +" }";
+  if (m_table_colors.length () > 2)
+    m_stylesheet += "QTableView::item{ selection-color: "
+      + m_table_colors[2].name () +" }";
 
-  m_stylesheet += "QTableView::item:selected{ background-color: "
-    + m_table_colors[3].name () +" }";
+  if (m_table_colors.length () > 3)
+    m_stylesheet += "QTableView::item:selected{ background-color: "
+      + m_table_colors[3].name () +" }";
 
   if (m_table_colors.length () > 4 && m_alternate_rows)
     {
       m_stylesheet
         += "QTableView::item:alternate{ background-color: "
         + m_table_colors[4].name () +" }";
 
       m_stylesheet
