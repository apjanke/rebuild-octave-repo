# HG changeset patch
# User Rik <rik@octave.org>
# Date 1398354040 25200
#      Thu Apr 24 08:40:40 2014 -0700
# Branch gui-release
# Node ID 8b566ad1f88afeefdebf80232c01e4593bff9450
# Parent  777281eeb3d459160ed96df4a2ff3b9362e6a37e
# Parent  01aa90ece9a4f15d861c53307bbb2c9e8161400e
maint: Periodic merge of stable to gui-release.

diff --git a/libgui/qterminal/libqterminal/unix/TerminalView.cpp b/libgui/qterminal/libqterminal/unix/TerminalView.cpp
--- a/libgui/qterminal/libqterminal/unix/TerminalView.cpp
+++ b/libgui/qterminal/libqterminal/unix/TerminalView.cpp
@@ -207,16 +207,19 @@ void TerminalView::setVTFont(const QFont
       if (!_antialiasText)
         font.setStyleStrategy( QFont::NoAntialias );
 
       // experimental optimization.  Konsole assumes that the terminal is using a
       // mono-spaced font, in which case kerning information should have an effect.
       // Disabling kerning saves some computation when rendering text.
       // font.setKerning(false);
 
+      font.setStyleStrategy (  QFont::StyleStrategy(font.styleStrategy()
+                             | QFont::ForceIntegerMetrics)  );
+
       QWidget::setFont(font);
       fontChange(font);
     }
 }
 
 void TerminalView::setFont(const QFont &)
 {
   // ignore font change request if not coming from konsole itself
diff --git a/libinterp/corefcn/dot.cc b/libinterp/corefcn/dot.cc
--- a/libinterp/corefcn/dot.cc
+++ b/libinterp/corefcn/dot.cc
@@ -137,17 +137,17 @@ but avoids forming a temporary array and
       if (! match && nargin == 2
           && dimx.is_vector () && dimy.is_vector ())
         {
           // Change to column vectors.
           dimx = dimx.redim (1);
           argx = argx.reshape (dimx);
           dimy = dimy.redim (1);
           argy = argy.reshape (dimy);
-          match = ! error_state;
+          match = ! error_state && (dimx == dimy);
         }
 
       if (match)
         {
           int dim;
           if (nargin == 2)
             dim = dimx.first_non_singleton ();
           else
@@ -257,16 +257,26 @@ but avoids forming a temporary array and
 
 %!test
 %! x = int8 ([1 2; 3 4]);
 %! y = int8 ([5 6; 7 8]);
 %! assert (dot (x, y), [26 44]);
 %! assert (dot (x, y, 2), [17; 53]);
 %! assert (dot (x, y, 3), [5 12; 21 32]);
 
+%% Test input validation
+%!error dot ()
+%!error dot (1)
+%!error dot (1,2,3,4)
+%!error <X and Y must be numeric> dot ({1,2}, [3,4])
+%!error <X and Y must be numeric> dot ([1,2], {3,4})
+%!error <sizes of X and Y must match> dot ([1 2], [1 2 3])
+%!error <sizes of X and Y must match> dot ([1 2]', [1 2 3]')
+%!error <sizes of X and Y must match> dot (ones (2,2), ones (2,3))
+%!error <DIM must be a valid dimension> dot ([1 2], [1 2], 0)
 */
 
 DEFUN (blkmm, args, ,
        "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} blkmm (@var{A}, @var{B})\n\
 Compute products of matrix blocks.  The blocks are given as\n\
 2-dimensional subarrays of the arrays @var{A}, @var{B}.\n\
 The size of @var{A} must have the form @code{[m,k,@dots{}]} and\n\
diff --git a/libinterp/corefcn/gl2ps-renderer.cc b/libinterp/corefcn/gl2ps-renderer.cc
--- a/libinterp/corefcn/gl2ps-renderer.cc
+++ b/libinterp/corefcn/gl2ps-renderer.cc
@@ -185,34 +185,37 @@ glps_renderer::set_font (const base_prop
   else
     fontname = "Helvetica";
 
   // FIXME: add support for bold and italic
 }
 
 template <typename T>
 static void
-draw_pixels (GLsizei w, GLsizei h, GLenum format, const T *data)
+draw_pixels (GLsizei w, GLsizei h, GLenum format, const T *data, float maxval)
 {
   OCTAVE_LOCAL_BUFFER (GLfloat, a, 3*w*h);
 
-  for (int i = 0; i < 3*w*h; i++)
-    a[i] = data[i];
-
+  // Convert to GL_FLOAT as it is the only type gl2ps accepts.
+  for (unsigned int i = 0; i < 3*w*h; i++)
+    a[i] = data[i] / maxval;
+  
   gl2psDrawPixels (w, h, 0, 0, format, GL_FLOAT, a);
 }
 
 void
 glps_renderer::draw_pixels (GLsizei w, GLsizei h, GLenum format,
                             GLenum type, const GLvoid *data)
 {
-  if (type == GL_UNSIGNED_SHORT)
-    ::draw_pixels (w, h, format, static_cast<const GLushort *> (data));
-  else if (type == GL_UNSIGNED_BYTE)
-    ::draw_pixels (w, h, format, static_cast<const GLubyte *> (data));
+  // gl2psDrawPixels only supports the GL_FLOAT type.
+  // Other formats, such as uint8, must be converted first.
+  if (type == GL_UNSIGNED_BYTE)
+    ::draw_pixels (w, h, format, static_cast<const GLubyte *> (data), 255.0f);
+  else if (type == GL_UNSIGNED_SHORT)
+    ::draw_pixels (w, h, format, static_cast<const GLushort *> (data), 65535.0f);
   else
     gl2psDrawPixels (w, h, 0, 0, format, type, data);
 }
 
 void
 glps_renderer::draw_text (const text::properties& props)
 {
   if (props.get_string ().is_empty ())
diff --git a/scripts/plot/appearance/axis.m b/scripts/plot/appearance/axis.m
--- a/scripts/plot/appearance/axis.m
+++ b/scripts/plot/appearance/axis.m
@@ -336,17 +336,17 @@ function lims = __get_tight_lims__ (ca, 
     
     scale = get (ca, strcat (ax, "scale"));
     if (! iscell (data))
       data = {data};
     endif
     
     ## Extend image data one pixel
     idx = strcmp (types, "image");
-    if (! isempty (idx) && (ax == "x" || ax == "y"))
+    if (any (idx) && (ax == "x" || ax == "y"))
       imdata = data(idx);
       px = arrayfun (@__image_pixel_size__, kids(idx), "uniformoutput", false);
       ipx = ifelse (ax == "x", 1, 2);
       imdata = cellfun (@(x,dx) [(min (x) - dx(ipx)), (max (x) + dx(ipx))],
                         imdata, px, "uniformoutput", false);
       data(idx) = imdata;
     endif
     
