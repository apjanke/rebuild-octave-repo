# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1207232658 14400
#      Thu Apr 03 10:24:18 2008 -0400
# Branch release-3-0-x
# Node ID de826649dfa23399c1846e69f58f4e1eb84927fa
# Parent  32b73579dd5cab4959661478061ed3e28e096286
fix to enable compiling with Intel C++

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,14 @@
+2008-04-03  Jaroslav Hajek <highegg@gmail.com>
+
+	* DLD-FUNCTIONS/sort.cc (xabs, ascending_compare, operator <,
+	descending_compare, operator >): Move definitions ahead of
+	#include "oct-sort.cc".
+
 2008-04-02  John W. Eaton  <jwe@octave.org>
 
 	* graphics.cc, graphics.h.in (class axes):
 	New properties, tickdir and tickdirmode.
 
 2008-03-27  John W. Eaton  <jwe@octave.org>
 
 	* DLD-FUNCTIONS/max.cc: Rename from minmax.cc.
diff --git a/src/DLD-FUNCTIONS/sort.cc b/src/DLD-FUNCTIONS/sort.cc
--- a/src/DLD-FUNCTIONS/sort.cc
+++ b/src/DLD-FUNCTIONS/sort.cc
@@ -33,17 +33,16 @@ along with Octave; see the file COPYING.
 #include "defun-dld.h"
 #include "error.h"
 #include "gripes.h"
 #include "oct-obj.h"
 #include "lo-ieee.h"
 #include "data-conv.h"
 #include "ov-cx-mat.h"
 #include "ov-cell.h"
-#include "oct-sort.cc"
 
 enum sortmode { UNDEFINED, ASCENDING, DESCENDING };
 
 template <class T>
 class
 vec_index
 {
 public:
@@ -74,16 +73,57 @@ ascending_compare (vec_index<T> *a, vec_
 
 template <class T>
 bool 
 descending_compare (vec_index<T> *a, vec_index<T> *b)
 {
   return (a->vec > b->vec);
 }
 
+// std::abs(Inf) returns NaN!!
+static inline double
+xabs (const Complex& x)
+{
+  return (xisinf (x.real ()) || xisinf (x.imag ())) ? octave_Inf : abs (x);
+}
+
+template <>
+bool
+ascending_compare (Complex a, Complex b)
+{
+  return (xisnan (b) || (xabs (a) < xabs (b))
+	  || ((xabs (a) == xabs (b)) && (arg (a) < arg (b))));
+}
+
+bool
+operator < (const Complex& a, const Complex& b)
+{
+  return (xisnan (b) || (xabs (a) < xabs (b))
+	  || ((xabs (a) == xabs (b)) && (arg (a) < arg (b))));
+}
+
+template <>
+bool
+descending_compare (Complex a, Complex b)
+{
+  return (xisnan (a) || (xabs (a) > xabs (b))
+	  || ((xabs (a) == xabs (b)) && (arg (a) > arg (b))));
+}
+
+bool
+operator > (const Complex& a, const Complex& b)
+{
+  return (xisnan (a) || (xabs (a) > xabs (b))
+	  || ((xabs (a) == xabs (b)) && (arg (a) > arg (b))));
+}
+
+// This file must be included after the < and > operators are
+// defined to avoid errors with the Intel C++ compiler.
+#include "oct-sort.cc"
+
 template <class T>
 static octave_value
 mx_sort (ArrayN<T> &m, int dim, sortmode mode = UNDEFINED)
 {
   octave_value retval;
 
   dim_vector dv = m.dims ();
 
@@ -786,53 +826,16 @@ descending_compare (double a, double b)
 
 template <>
 bool
 descending_compare (vec_index<double> *a, vec_index<double> *b)
 {
   return (xisnan (a->vec) || (a->vec > b->vec));
 }
 
-// std::abs(Inf) returns NaN!!
-static inline double
-xabs (const Complex& x)
-{
-  return (xisinf (x.real ()) || xisinf (x.imag ())) ? octave_Inf : abs (x);
-}
-
-template <>
-bool
-ascending_compare (Complex a, Complex b)
-{
-  return (xisnan (b) || (xabs (a) < xabs (b))
-	  || ((xabs (a) == xabs (b)) && (arg (a) < arg (b))));
-}
-
-bool
-operator < (const Complex& a, const Complex& b)
-{
-  return (xisnan (b) || (xabs (a) < xabs (b))
-	  || ((xabs (a) == xabs (b)) && (arg (a) < arg (b))));
-}
-
-template <>
-bool
-descending_compare (Complex a, Complex b)
-{
-  return (xisnan (a) || (xabs (a) > xabs (b))
-	  || ((xabs (a) == xabs (b)) && (arg (a) > arg (b))));
-}
-
-bool
-operator > (const Complex& a, const Complex& b)
-{
-  return (xisnan (a) || (xabs (a) > xabs (b))
-	  || ((xabs (a) == xabs (b)) && (arg (a) > arg (b))));
-}
-
 template <>
 bool
 ascending_compare (vec_index<Complex> *a, vec_index<Complex> *b)
 {
   return (xisnan (b->vec)
 	  || (xabs (a->vec) < xabs (b->vec))
 	  || ((xabs (a->vec) == xabs (b->vec))
 	      && (arg (a->vec) < arg (b->vec))));
