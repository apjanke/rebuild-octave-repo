# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1287691933 14400
#      Thu Oct 21 16:12:13 2010 -0400
# Node ID 7c573eb981eb8b6edd9d4135640dddbe165848cf
# Parent  0de5cc44e69068f9d7ac6705bcc3a47c1c7d22f7
consistently give error for operator not applied to NaN values

diff --git a/liboctave/Array-util.cc b/liboctave/Array-util.cc
--- a/liboctave/Array-util.cc
+++ b/liboctave/Array-util.cc
@@ -646,141 +646,8 @@ ind2sub (const dim_vector& dv, const idx
 int
 permute_vector_compare (const void *a, const void *b)
 {
   const permute_vector *pva = static_cast<const permute_vector *> (a);
   const permute_vector *pvb = static_cast<const permute_vector *> (b);
 
   return pva->pidx > pvb->pidx;
 }
-
-const char *error_id_nonconformant_args = "Octave:nonconformant-args";
-
-const char *error_id_index_out_of_bounds = "Octave:index-out-of-bounds";
-
-const char *error_id_invalid_index = "Octave:invalid-index";
-
-void
-gripe_nan_to_logical_conversion (void)
-{
-  (*current_liboctave_error_handler)
-    ("invalid conversion from NaN to logical");
-}
-
-void
-gripe_nan_to_character_conversion (void)
-{
-  (*current_liboctave_error_handler)
-    ("invalid conversion from NaN to character");
-}
-
-void
-gripe_nonconformant (const char *op, int op1_len, int op2_len)
-{
-  const char *err_id = error_id_nonconformant_args;
-
-  (*current_liboctave_error_with_id_handler)
-    (err_id, "%s: nonconformant arguments (op1 len: %d, op2 len: %d)",
-     op, op1_len, op2_len);
-}
-
-void
-gripe_nonconformant (const char *op, int op1_nr, int op1_nc,
-                     int op2_nr, int op2_nc)
-{
-  const char *err_id = error_id_nonconformant_args;
-
-  (*current_liboctave_error_with_id_handler)
-    (err_id, "%s: nonconformant arguments (op1 is %dx%d, op2 is %dx%d)",
-     op, op1_nr, op1_nc, op2_nr, op2_nc);
-}
-
-void
-gripe_nonconformant (const char *op, const dim_vector& op1_dims,
-                     const dim_vector& op2_dims)
-{
-  const char *err_id = error_id_nonconformant_args;
-
-  std::string op1_dims_str = op1_dims.str ();
-  std::string op2_dims_str = op2_dims.str ();
-
-  (*current_liboctave_error_with_id_handler)
-    (err_id, "%s: nonconformant arguments (op1 is %s, op2 is %s)",
-     op, op1_dims_str.c_str (), op2_dims_str.c_str ());
-}
-
-void
-gripe_index_out_of_range (int nd, int dim, octave_idx_type idx,
-                          octave_idx_type ext)
-{
-  const char *err_id = error_id_index_out_of_bounds;
-
-  switch (nd)
-    {
-    case 1:
-      (*current_liboctave_error_with_id_handler)
-        (err_id, "A(I): index out of bounds; value %d out of bound %d",
-         idx, ext);
-      break;
-
-    case 2:
-      (*current_liboctave_error_with_id_handler)
-        (err_id, "A(I,J): %s index out of bounds; value %d out of bound %d",
-         (dim == 1) ? "row" : "column", idx, ext);
-      break;
-
-    default:
-      (*current_liboctave_error_with_id_handler)
-        (err_id, "A(I,J,...): index to dimension %d out of bounds; value %d out of bound %d",
-         dim, idx, ext);
-      break;
-    }
-}
-
-void
-gripe_del_index_out_of_range (bool is1d, octave_idx_type idx,
-                              octave_idx_type ext)
-{
-  const char *err_id = error_id_index_out_of_bounds;
-
-  (*current_liboctave_error_with_id_handler)
-    (err_id, "A(%s) = []: index out of bounds; value %d out of bound %d",
-     is1d ? "I" : "..,I,..", idx, ext);
-}
-
-void
-gripe_invalid_index (void)
-{
-  const char *err_id = error_id_invalid_index;
-
-  (*current_liboctave_error_with_id_handler)
-    (err_id, "subscript indices must be either positive integers or logicals.");
-}
-
-// FIXME -- the following is a common error message to resize,
-// regardless of whether it's called from assign or elsewhere.  It
-// seems OK to me, but eventually the gripe can be specialized.
-// Anyway, propagating various error messages into procedure is, IMHO,
-// a nonsense.  If anything, we should change error handling here (and
-// throughout liboctave) to allow custom handling of errors
-
-void
-gripe_invalid_resize (void)
-{
-  (*current_liboctave_error_with_id_handler)
-    ("Octave:invalid-resize", 
-     "Invalid resizing operation or ambiguous assignment to an out-of-bounds array element.");
-}
-
-void 
-gripe_invalid_assignment_size (void)
-{
-  (*current_liboctave_error_handler)
-    ("A(I) = X: X must have the same size as I");
-}
-
-void
-gripe_assignment_dimension_mismatch (void)
-{
-  (*current_liboctave_error_handler)
-    ("A(I,J,...) = X: dimensions mismatch");
-}
-
diff --git a/liboctave/Array-util.h b/liboctave/Array-util.h
--- a/liboctave/Array-util.h
+++ b/liboctave/Array-util.h
@@ -18,22 +18,20 @@ You should have received a copy of the G
 along with Octave; see the file COPYING.  If not, see
 <http://www.gnu.org/licenses/>.
 
 */
 
 #if !defined (octave_Array_util_h)
 #define octave_Array_util_h 1
 
-#include <cassert>
-
 #include "Array.h"
 #include "dim-vector.h"
 #include "idx-vector.h"
-#include "lo-error.h"
+#include "lo-array-gripes.h"
 
 extern OCTAVE_API bool index_in_bounds (const Array<octave_idx_type>& ra_idx,
                              const dim_vector& dimensions);
 
 extern OCTAVE_API void increment_index (Array<octave_idx_type>& ra_idx,
                              const dim_vector& dimensions,
                              int start_dimension = 0);
 
@@ -99,42 +97,9 @@ struct
 permute_vector
 {
   octave_idx_type pidx;
   octave_idx_type iidx;
 };
 
 extern int OCTAVE_API permute_vector_compare (const void *a, const void *b);
 
-extern OCTAVE_API const char *error_id_nonconformant_args;
-
-extern OCTAVE_API const char *error_id_index_out_of_bounds;
-
-extern OCTAVE_API const char *error_id_invalid_index;
-
-extern void OCTAVE_API gripe_nan_to_logical_conversion (void);
-
-extern void OCTAVE_API gripe_nan_to_character_conversion (void);
-
-extern void OCTAVE_API gripe_nonconformant (const char *op, int op1_len, int op2_len);
-
-extern void OCTAVE_API gripe_nonconformant (const char *op, int op1_nr, int op1_nc,
-                                 int op2_nr, int op2_nc);
-
-
-extern void OCTAVE_API gripe_nonconformant (const char *op, const dim_vector& op1_dims,
-                                            const dim_vector& op2_dims);
-
-extern void OCTAVE_API gripe_index_out_of_range (int nd, int dim, 
-                                                 octave_idx_type iext, octave_idx_type ext);
-
-extern void OCTAVE_API gripe_del_index_out_of_range (bool is1d, octave_idx_type iext, 
-                                                     octave_idx_type ext);
-
-extern void OCTAVE_API gripe_invalid_index (void);
-
-extern void OCTAVE_API gripe_invalid_resize (void);
-
-extern void OCTAVE_API gripe_invalid_assignment_size (void);
-
-extern void OCTAVE_API gripe_assignment_dimension_mismatch (void);
-
 #endif
diff --git a/liboctave/CMatrix.cc b/liboctave/CMatrix.cc
--- a/liboctave/CMatrix.cc
+++ b/liboctave/CMatrix.cc
@@ -3039,16 +3039,19 @@ ComplexMatrix::operator -= (const Matrix
   return *this;
 }
 
 // unary operations
 
 boolMatrix
 ComplexMatrix::operator ! (void) const
 {
+  if (any_element_is_nan ())
+    gripe_nan_to_logical_conversion ();
+
   return do_mx_unary_op<bool, Complex> (*this, mx_inline_not);
 }
 
 // other operations
 
 bool
 ComplexMatrix::any_element_is_nan (void) const
 {
diff --git a/liboctave/CNDArray.cc b/liboctave/CNDArray.cc
--- a/liboctave/CNDArray.cc
+++ b/liboctave/CNDArray.cc
@@ -495,16 +495,19 @@ ComplexNDArray::ifourierNd (void) const
 
 #endif
 
 // unary operations
 
 boolNDArray
 ComplexNDArray::operator ! (void) const
 {
+  if (any_element_is_nan ())
+    gripe_nan_to_logical_conversion ();
+
   return do_mx_unary_op<bool, Complex> (*this, mx_inline_not);
 }
 
 // FIXME -- this is not quite the right thing.
 
 bool
 ComplexNDArray::any_element_is_nan (void) const
 {
diff --git a/liboctave/CSparse.cc b/liboctave/CSparse.cc
--- a/liboctave/CSparse.cc
+++ b/liboctave/CSparse.cc
@@ -7140,16 +7140,19 @@ SparseComplexMatrix::solve (const Comple
   ComplexMatrix tmp (b);
   return solve (tmp, info, rcond, sing_handler).column (static_cast<octave_idx_type> (0));
 }
 
 // unary operations
 SparseBoolMatrix
 SparseComplexMatrix::operator ! (void) const
 {
+  if (any_element_is_nan ())
+    gripe_nan_to_logical_conversion ();
+
   octave_idx_type nr = rows ();
   octave_idx_type nc = cols ();
   octave_idx_type nz1 = nnz ();
   octave_idx_type nz2 = nr*nc - nz1;
    
   SparseBoolMatrix r (nr, nc, nz2);
    
   octave_idx_type ii = 0;
diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,29 @@
+2010-10-21  John W. Eaton  <jwe@octave.org>
+
+	* Makefile.am (INCS): Include lo-array-gripes.h in the list.
+	(LIBOCTAVE_CXX_SOURCES): Include lo-array-gripes.cc in the list.
+
+	* lo-array-gripes.h: New file.  Move gripe function decls here
+	from Array-util.h.
+	* lo-array-gripes.c: New file.  Move gripe function definitions
+	here from Array-util.cc.
+
+	* CMatrix.cc (ComplexMatrix::operator !): Gripe if any element is NaN.
+	* CNDArray.cc (ComplexNDArray::operator !): Likewise.
+	* CSparse.cc (SparseComplexMatrix::operator !): Likewise.
+	* dMatrix.cc (Matrix::operator !): Likewise.
+	* dNDArray.cc (NDArray::operator !): Likewise.
+	* dSparse.cc (SparseMatrix::operator !): Likewise.
+	* fCMatrix.cc (FloatComplexMatrix::operator !): Likewise.
+	* fCNDArray.cc (FloatComplexNDArray::operator !): Likewise.
+	* fMatrix.cc (FloatMatrix::operator !): Likewise.
+	* fNDArray.cc (FloatNDArray::operator !): Likewise.
+
 2010-10-21  John W. Eaton  <jwe@octave.org>
 
 	* Array-util.cc (gripe_nan_to_character_conversion): New function.
 	* Array-util.h: Provide decl.
 
 2010-10-19  John W. Eaton  <jwe@octave.org>
 
 	* Makefile.am (INCS): Add caseless-str.h to the list.
diff --git a/liboctave/Makefile.am b/liboctave/Makefile.am
--- a/liboctave/Makefile.am
+++ b/liboctave/Makefile.am
@@ -197,16 +197,17 @@ INCS = \
   data-conv.h \
   dir-ops.h \
   file-ops.h \
   file-stat.h \
   functor.h \
   glob-match.h \
   idx-vector.h \
   kpse-xfns.h \
+  lo-array-gripes.h \
   lo-ieee.h \
   lo-macros.h \
   lo-mappers.h \
   lo-math.h \
   lo-specfun.h \
   lo-sysdep.h \
   lo-traits.h \
   lo-utils.h \
@@ -419,16 +420,17 @@ LIBOCTAVE_CXX_SOURCES = \
   Quad.cc \
   Range.cc \
   data-conv.cc \
   dir-ops.cc \
   file-ops.cc \
   file-stat.cc \
   glob-match.cc \
   idx-vector.cc \
+  lo-array-gripes.cc \
   lo-ieee.cc \
   lo-mappers.cc \
   lo-specfun.cc \
   lo-sysdep.cc \
   lo-utils.cc \
   mach-info.cc \
   oct-alloc.cc \
   oct-convn.cc \
diff --git a/liboctave/dMatrix.cc b/liboctave/dMatrix.cc
--- a/liboctave/dMatrix.cc
+++ b/liboctave/dMatrix.cc
@@ -2581,16 +2581,19 @@ Matrix::operator -= (const DiagMatrix& a
   return *this;
 }
 
 // unary operations
 
 boolMatrix
 Matrix::operator ! (void) const
 {
+  if (any_element_is_nan ())
+    gripe_nan_to_logical_conversion ();
+
   return do_mx_unary_op<bool, double> (*this, mx_inline_not);
 }
 
 // column vector by row vector -> matrix operations
 
 Matrix
 operator * (const ColumnVector& v, const RowVector& a)
 {
diff --git a/liboctave/dNDArray.cc b/liboctave/dNDArray.cc
--- a/liboctave/dNDArray.cc
+++ b/liboctave/dNDArray.cc
@@ -536,16 +536,19 @@ NDArray::ifourierNd (void) const
 
 #endif
 
 // unary operations
 
 boolNDArray
 NDArray::operator ! (void) const
 {
+  if (any_element_is_nan ())
+    gripe_nan_to_logical_conversion ();
+
   return do_mx_unary_op<bool, double> (*this, mx_inline_not);
 }
 
 bool
 NDArray::any_element_is_negative (bool neg_zero) const
 {
   return (neg_zero ? test_all (xnegative_sign)
           : do_mx_check<double> (*this, mx_inline_any_negative));
diff --git a/liboctave/dSparse.cc b/liboctave/dSparse.cc
--- a/liboctave/dSparse.cc
+++ b/liboctave/dSparse.cc
@@ -7437,16 +7437,19 @@ SparseMatrix::too_large_for_float (void)
     }
 
   return false;
 }
 
 SparseBoolMatrix 
 SparseMatrix::operator ! (void) const 
 { 
+  if (any_element_is_nan ())
+    gripe_nan_to_logical_conversion ();
+
   octave_idx_type nr = rows ();
   octave_idx_type nc = cols ();
   octave_idx_type nz1 = nnz ();
   octave_idx_type nz2 = nr*nc - nz1;
    
   SparseBoolMatrix r (nr, nc, nz2);
    
   octave_idx_type ii = 0;
diff --git a/liboctave/fCMatrix.cc b/liboctave/fCMatrix.cc
--- a/liboctave/fCMatrix.cc
+++ b/liboctave/fCMatrix.cc
@@ -3032,16 +3032,19 @@ FloatComplexMatrix::operator -= (const F
   return *this;
 }
 
 // unary operations
 
 boolMatrix
 FloatComplexMatrix::operator ! (void) const
 {
+  if (any_element_is_nan ())
+    gripe_nan_to_logical_conversion ();
+
   return do_mx_unary_op<bool, FloatComplex> (*this, mx_inline_not);
 }
 
 // other operations
 
 bool
 FloatComplexMatrix::any_element_is_nan (void) const
 {
diff --git a/liboctave/fCNDArray.cc b/liboctave/fCNDArray.cc
--- a/liboctave/fCNDArray.cc
+++ b/liboctave/fCNDArray.cc
@@ -490,16 +490,19 @@ FloatComplexNDArray::ifourierNd (void) c
 
 #endif
 
 // unary operations
 
 boolNDArray
 FloatComplexNDArray::operator ! (void) const
 {
+  if (any_element_is_nan ())
+    gripe_nan_to_logical_conversion ();
+
   return do_mx_unary_op<bool, FloatComplex> (*this, mx_inline_not);
 }
 
 // FIXME -- this is not quite the right thing.
 
 bool
 FloatComplexNDArray::any_element_is_nan (void) const
 {
diff --git a/liboctave/fMatrix.cc b/liboctave/fMatrix.cc
--- a/liboctave/fMatrix.cc
+++ b/liboctave/fMatrix.cc
@@ -2580,16 +2580,19 @@ FloatMatrix::operator -= (const FloatDia
   return *this;
 }
 
 // unary operations
 
 boolMatrix
 FloatMatrix::operator ! (void) const
 {
+  if (any_element_is_nan ())
+    gripe_nan_to_logical_conversion ();
+
   return do_mx_unary_op<bool, float> (*this, mx_inline_not);
 }
 
 // column vector by row vector -> matrix operations
 
 FloatMatrix
 operator * (const FloatColumnVector& v, const FloatRowVector& a)
 {
diff --git a/liboctave/fNDArray.cc b/liboctave/fNDArray.cc
--- a/liboctave/fNDArray.cc
+++ b/liboctave/fNDArray.cc
@@ -494,16 +494,19 @@ FloatNDArray::ifourierNd (void) const
 
 #endif
 
 // unary operations
 
 boolNDArray
 FloatNDArray::operator ! (void) const
 {
+  if (any_element_is_nan ())
+    gripe_nan_to_logical_conversion ();
+
   return do_mx_unary_op<bool, float> (*this, mx_inline_not);
 }
 
 bool
 FloatNDArray::any_element_is_negative (bool neg_zero) const
 {
   return (neg_zero ? test_all (xnegative_sign)
           : do_mx_check<float> (*this, mx_inline_any_negative));
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,12 @@
+2010-10-21  John W. Eaton  <jwe@octave.org>
+
+	* gripes.h: Include lo-array-gripes.h.
+
 2010-10-21  John W. Eaton  <jwe@octave.org>
 
 	* ov-float.cc, ov-flt-re-mat.cc, ov-re-mat.cc, ov-re-sparse.cc,
 	ov-scalar.cc: Use gripe_nan_to_character_conversion.
 
 	* ops.h, ov-base-mat.cc, ov-base-scalar.cc, ov-complex.h,
 	ov-cx-mat.cc, ov-cx-sparse.cc, ov-float.h, ov-flt-complex.h,
 	ov-flt-cx-mat.cc, ov-flt-re-mat.cc, ov-range.cc, ov-re-mat.cc,
diff --git a/src/gripes.h b/src/gripes.h
--- a/src/gripes.h
+++ b/src/gripes.h
@@ -21,16 +21,18 @@ along with Octave; see the file COPYING.
 
 */
 
 #if !defined (octave_gripes_h)
 #define octave_gripes_h 1
 
 #include <string>
 
+#include "lo-array-gripes.h"
+
 class octave_value;
 
 extern OCTINTERP_API void
 gripe_not_supported (const char *);
 
 extern OCTINTERP_API void
 gripe_not_implemented (const char *);
 
