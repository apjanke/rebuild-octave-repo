# HG changeset patch
# User Mike Miller <mtmiller@octave.org>
# Date 1548106048 28800
#      Mon Jan 21 13:27:28 2019 -0800
# Branch stable
# Node ID d673b506f382da5a2b4fd8cebc9735ec99e65c12
# Parent  ada14ef3067feca546cf8dc2543e924b58ae6165
test: use "format short" in tests depending on output format (bug #55539)

* pr-output.cc: Apply "format short" on evalc tests assuming short output
display format, restore original output format.
* oct-parse.yy: Likewise.

diff --git a/libinterp/corefcn/pr-output.cc b/libinterp/corefcn/pr-output.cc
--- a/libinterp/corefcn/pr-output.cc
+++ b/libinterp/corefcn/pr-output.cc
@@ -3382,22 +3382,36 @@ of properly displaying the object's name
   if (print_newlines)
     octave_stdout << std::endl;
 
   return ovl ();
 }
 
 /*
 %!test
-%! str = evalc ("x = 1.1; display (x)");
-%! assert (str, "x =  1.1000\n");
+%! [old_fmt, old_spacing] = format ();
+%! unwind_protect
+%!   format short;
+%!   str = evalc ("x = 1.1; display (x)");
+%!   assert (str, "x =  1.1000\n");
+%! unwind_protect_cleanup
+%!   format (old_fmt);
+%!   format (old_spacing);
+%! end_unwind_protect
 
 %!test
-%! str = evalc ("display (1.1)");
-%! assert (str, " 1.1000\n");
+%! [old_fmt, old_spacing] = format ();
+%! unwind_protect
+%!   format short;
+%!   str = evalc ("display (1.1)");
+%!   assert (str, " 1.1000\n");
+%! unwind_protect_cleanup
+%!   format (old_fmt);
+%!   format (old_spacing);
+%! end_unwind_protect
 
 ## Test input validation
 %!error display ()
 %!error display (1,2)
 */
 
 static inline void
 init_format_state (void)
diff --git a/libinterp/parse-tree/oct-parse.yy b/libinterp/parse-tree/oct-parse.yy
--- a/libinterp/parse-tree/oct-parse.yy
+++ b/libinterp/parse-tree/oct-parse.yy
@@ -5814,20 +5814,27 @@ s = evalc ("t = 42"), t
 %!function [a, b] = __f_evalc ()
 %!  printf ("foo");
 %!  fprintf (stdout, "bar");
 %!  disp (pi);
 %!  a = 1;
 %!  b = 2;
 %!endfunction
 %!test
-%! [s, a, b] = evalc ("__f_evalc ()");
-%! assert (s, "foobar 3.1416\n");
-%! assert (a, 1);
-%! assert (b, 2);
+%! [old_fmt, old_spacing] = format ();
+%! unwind_protect
+%!   format short;
+%!   [s, a, b] = evalc ("__f_evalc ()");
+%!   assert (s, "foobar 3.1416\n");
+%!   assert (a, 1);
+%!   assert (b, 2);
+%! unwind_protect_cleanup
+%!   format (old_fmt);
+%!   format (old_spacing);
+%! end_unwind_protect
 
 %!error <foo> (evalc ("error ('foo')"))
 %!error <bar> (evalc ("error ('foo')", "error ('bar')"))
 
 %!test
 %! warning ("off", "quiet", "local");
 %! assert (evalc ("warning ('foo')"), "warning: foo\n");
 
