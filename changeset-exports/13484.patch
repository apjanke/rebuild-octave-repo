# HG changeset patch
# User Jacob Dawid <jacob.dawid@googlemail.com>
# Date 1303891577 -7200
#      Wed Apr 27 10:06:17 2011 +0200
# Node ID 3bfe83d853ca56b419f57f1b72f848d7303eecb9
# Parent  799c03ea7004198dbeadd99209e790959b2c4f46
Cleaned up code.

diff --git a/gui//src/BlockArray.cpp b/gui//src/BlockArray.cpp
--- a/gui//src/BlockArray.cpp
+++ b/gui//src/BlockArray.cpp
@@ -23,20 +23,16 @@
 
 // System
 #include <assert.h>
 #include <sys/mman.h>
 #include <sys/param.h>
 #include <unistd.h>
 #include <stdio.h>
 
-// KDE
-//#include <kde_file.h>
-//#include <kdebug.h>
-
 #define KDE_fseek ::fseek
 #define KDE_lseek ::lseek
 
 static int blocksize = 0;
 
 BlockArray::BlockArray()
     : size(0),
       current(size_t(-1)),
diff --git a/gui//src/BlockArray.h b/gui//src/BlockArray.h
--- a/gui//src/BlockArray.h
+++ b/gui//src/BlockArray.h
@@ -18,18 +18,16 @@
     02110-1301  USA.
 */
 
 #ifndef BLOCKARRAY_H
 #define BLOCKARRAY_H
 
 #include <unistd.h>
 
-//#error Do not use in KDE 2.1
-
 #define BlockSize (1 << 12)
 #define ENTRIES   ((BlockSize - sizeof(size_t) ) / sizeof(unsigned char))
 
 struct Block {
     Block() { size = 0; }
     unsigned char data[ENTRIES];
     size_t size;
 };
diff --git a/gui//src/CharacterColor.h b/gui//src/CharacterColor.h
--- a/gui//src/CharacterColor.h
+++ b/gui//src/CharacterColor.h
@@ -21,19 +21,16 @@
 */
 
 #ifndef CHARACTERCOLOR_H
 #define CHARACTERCOLOR_H
 
 // Qt
 #include <QtGui/QColor>
 
-//#include <kdemacros.h>
-#define KDE_NO_EXPORT
-
 /** 
  * An entry in a terminal display's color palette. 
  *
  * A color palette is an array of 16 ColorEntry instances which map
  * system color indexes (from 0 to 15) into actual colors.
  *
  * Each entry can be set as bold, in which case any text
  * drawn using the color should be drawn in bold.  
@@ -110,17 +107,17 @@ public:
 #define TABLE_COLORS  (INTENSITIES*BASE_COLORS)
 
 #define DEFAULT_FORE_COLOR 0
 #define DEFAULT_BACK_COLOR 1
 
 //a standard set of colors using black text on a white background.
 //defined in TerminalDisplay.cpp
 
-extern const ColorEntry base_color_table[TABLE_COLORS] KDE_NO_EXPORT;
+extern const ColorEntry base_color_table[TABLE_COLORS];
 
 /* CharacterColor is a union of the various color spaces.
 
    Assignment is as follows:
 
    Type  - Space        - Values
 
    0     - Undefined   - u:  0,      v:0        w:0
diff --git a/gui//src/Emulation.cpp b/gui//src/Emulation.cpp
--- a/gui//src/Emulation.cpp
+++ b/gui//src/Emulation.cpp
@@ -34,19 +34,16 @@
 #include <QtCore/QHash>
 #include <QtGui/QKeyEvent>
 #include <QtCore/QRegExp>
 #include <QtCore/QTextStream>
 #include <QtCore/QThread>
 
 #include <QtCore/QTime>
 
-// KDE
-//#include <kdebug.h>
-
 // Konsole
 #include "KeyboardTranslator.h"
 #include "Screen.h"
 #include "TerminalCharacterDecoder.h"
 #include "ScreenWindow.h"
 
 Emulation::Emulation() :
   _currentScreen(0),
@@ -233,65 +230,16 @@ void Emulation::receiveData(const char* 
         if (text[i] == '\030')
         {
             if ((length-i-1 > 3) && (strncmp(text+i+1, "B00", 3) == 0))
                 emit zmodemDetected();
         }
     }
 }
 
-//OLDER VERSION
-//This version of onRcvBlock was commented out because
-//    a)  It decoded incoming characters one-by-one, which is slow in the current version of Qt (4.2 tech preview)
-//    b)  It messed up decoding of non-ASCII characters, with the result that (for example) chinese characters
-//        were not printed properly.
-//
-//There is something about stopping the _decoder if "we get a control code halfway a multi-byte sequence" (see below)
-//which hasn't been ported into the newer function (above).  Hopefully someone who understands this better
-//can find an alternative way of handling the check.  
-
-
-/*void Emulation::onRcvBlock(const char *s, int len)
-{
-  emit notifySessionState(NOTIFYACTIVITY);
-  
-  bufferedUpdate();
-  for (int i = 0; i < len; i++)
-  {
-
-    QString result = _decoder->toUnicode(&s[i],1);
-    int reslen = result.length();
-
-    // If we get a control code halfway a multi-byte sequence
-    // we flush the _decoder and continue with the control code.
-    if ((s[i] < 32) && (s[i] > 0))
-    {
-       // Flush _decoder
-       while(!result.length())
-          result = _decoder->toUnicode(&s[i],1);
-       reslen = 1;
-       result.resize(reslen);
-       result[0] = QChar(s[i]);
-    }
-
-    for (int j = 0; j < reslen; j++)
-    {
-      if (result[j].characterategory() == QChar::Mark_NonSpacing)
-         _currentScreen->compose(result.mid(j,1));
-      else
-         onRcvChar(result[j].unicode());
-    }
-    if (s[i] == '\030')
-    {
-      if ((len-i-1 > 3) && (strncmp(s+i+1, "B00", 3) == 0))
-          emit zmodemDetected();
-    }
-  }
-}*/
-
 void Emulation::writeToStream( TerminalCharacterDecoder* _decoder , 
                                int startLine ,
                                int endLine) 
 {
   _currentScreen->writeLinesToStream(_decoder,startLine,endLine);
 }
 
 int Emulation::lineCount() const
diff --git a/gui//src/Filter.cpp b/gui//src/Filter.cpp
--- a/gui//src/Filter.cpp
+++ b/gui//src/Filter.cpp
@@ -27,20 +27,16 @@
 #include <QtGui/QAction>
 #include <QtGui/QApplication>
 #include <QtGui/QClipboard>
 #include <QtCore/QString>
 #include <QtCore/QTextStream>
 #include <QtCore/QSharedData>
 #include <QtCore/QFile>
 
-// KDE
-//#include <KLocale>
-//#include <KRun>
-
 // Konsole
 #include "TerminalCharacterDecoder.h"
 #include "konsole_wcwidth.h"
 #include "konsole_export.h"
 
 FilterChain::~FilterChain()
 {
     QMutableListIterator<Filter*> iter(*this);
diff --git a/gui//src/ProcessInfo.cpp b/gui//src/ProcessInfo.cpp
--- a/gui//src/ProcessInfo.cpp
+++ b/gui//src/ProcessInfo.cpp
@@ -14,41 +14,34 @@
     You should have received a copy of the GNU General Public License
     along with this program; if not, write to the Free Software
     Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
     02110-1301  USA.
 */
 
 // Own
 #include "ProcessInfo.h"
-//#include <config-konsole.h>
 
 // Unix
 #include <sys/socket.h>
 #include <netinet/in.h>
 #include <arpa/inet.h>
 #include <unistd.h>
 #include <pwd.h>
 
 // Qt
-//#include <KDebug>
 #include <QtCore/QDir>
 #include <QtCore/QFileInfo>
 #include <QtCore/QRegExp>
 #include <QtCore/QTextStream>
 #include <QtCore/QStringList>
 #include <QtCore/QSet>
-//#include "kdebug.h"
 
 // KDE
 #include "konsole_export.h"
-//#include <KConfigGroup>
-//#include <KGlobal>
-//#include <KSharedConfig>
-//#include <KUser>
 
 #if defined(Q_OS_MAC)
 #include <sys/sysctl.h>
 #include <libproc.h>
 #ifdef HAVE_SYS_PROC_INFO_H
 #include <sys/proc_info.h>
 #endif
 #ifdef HAVE_SYS_PROC_H
@@ -134,17 +127,17 @@ QString ProcessInfo::format(const QStrin
       // Change User's Home Dir w/ ~ only at the beginning
       if (tempDir.startsWith(homeDir))
       {
          tempDir.remove(0, homeDir.length());
          tempDir.prepend('~');
       }
       output.replace("%D", tempDir);
    }
-   output.replace("%d",formatShortDir(dir));
+   output.replace("%d", dir);
    
    // remove any remaining %[LETTER] sequences
    // output.replace(QRegExp("%\\w"), QString());
 
    return output;
 }
 
 QString ProcessInfo::formatCommand(const QString& name, 
@@ -153,76 +146,16 @@ QString ProcessInfo::formatCommand(const
 {
     Q_UNUSED(name);
     Q_UNUSED(format);
 
     // TODO Implement me
     return QStringList(QList<QString>::fromVector(arguments)).join(" ");
 }
 
-QSet<QString> ProcessInfo::_commonDirNames;
-
-QSet<QString> ProcessInfo::commonDirNames() 
-{
-  // JPS: Don't know of a good replacement for this in QT
-  /*
-    if ( _commonDirNames.isEmpty() )
-    {
-        KSharedConfigPtr config = KGlobal::config();
-        KConfigGroup configGroup = config->group("ProcessInfo");
-
-        QStringList defaults = QStringList() 
-                             << "src" << "build" << "debug" << "release" 
-                             << "bin" << "lib"   << "libs"  << "tmp" 
-                             << "doc" << "docs"  << "data"  << "share"
-                             << "examples" << "icons" << "pics" << "plugins" 
-                             << "tests" << "media" << "l10n" << "include" 
-                             << "includes" << "locale" << "ui";
-
-        _commonDirNames = QSet<QString>::fromList(configGroup.readEntry("CommonDirNames",defaults));
-
-    }
-  */
-    return _commonDirNames;
-}
-
-QString ProcessInfo::formatShortDir(const QString& input) const
-{
-    QString result;
-
-    QStringList parts = input.split( QDir::separator() );
-
-    // temporarily hard-coded
-    QSet<QString> dirNamesToShorten = commonDirNames();
-
-    QListIterator<QString> iter(parts);
-    iter.toBack();
-
-    // go backwards through the list of the path's parts
-    // adding abbreviations of common directory names
-    // and stopping when we reach a dir name which is not
-    // in the commonDirNames set
-    while ( iter.hasPrevious() )
-    {
-        QString part = iter.previous();
-
-        if ( dirNamesToShorten.contains(part) )
-        {
-            result.prepend(QDir::separator() + part[0]);
-        }
-        else
-        {
-            result.prepend(part);
-            break;
-        }
-    }
-
-    return result;
-}
-
 QVector<QString> ProcessInfo::arguments(bool* ok) const
 {
     *ok = _fields & ARGUMENTS;
 
     return _arguments;
 }
 
 QMap<QString,QString> ProcessInfo::environment(bool* ok) const
diff --git a/gui//src/ProcessInfo.h b/gui//src/ProcessInfo.h
--- a/gui//src/ProcessInfo.h
+++ b/gui//src/ProcessInfo.h
@@ -267,21 +267,16 @@ protected:
      * environment()
      *
      * @param name The name of the environment variable, eg. "PATH"
      * @param value The value of the environment variable, eg. "/bin"
      */
     void addEnvironmentBinding(const QString& name , const QString& value);
 
 private:
-    // takes a full directory path and returns a
-    // shortened version suitable for display in 
-    // space-constrained UI elements (eg. tabs)
-    QString formatShortDir(const QString& dirPath) const;
-
     enum CommandFormat
     {
         ShortCommandFormat,
         LongCommandFormat
     };
     // takes a process name and its arguments and produces formatted output
     QString formatCommand(const QString& name , const QVector<QString>& arguments , 
                           CommandFormat format) const;
@@ -315,19 +310,16 @@ private:
 
     QString _name;
     QString _userName;
     QString _userHomeDir;
     QString _currentDir;
 
     QVector<QString> _arguments;
     QMap<QString,QString> _environment;
-
-    static QSet<QString> commonDirNames();
-    static QSet<QString> _commonDirNames;
 };
 
 /** 
  * Implementation of ProcessInfo which does nothing.
  * Used on platforms where a suitable ProcessInfo subclass is not 
  * available.
  *
  * isValid() will always return false for instances of NullProcessInfo
diff --git a/gui//src/Pty.cpp b/gui//src/Pty.cpp
--- a/gui//src/Pty.cpp
+++ b/gui//src/Pty.cpp
@@ -29,26 +29,16 @@
 #include <unistd.h>
 #include <errno.h>
 #include <termios.h>
 #include <signal.h>
 
 // Qt
 #include <QtCore/QStringList>
 
-// KDE
-//#include <KStandardDirs>
-//#include <KLocale>
-//#include <KDebug>
-//#include <KPty>
-//#include <KPtyDevice>
-//#include <kde_file.h>
-
-//#include "kdebug.h"
-
 #include "kpty.h"
 #include "kptydevice.h"
 
 
 void Pty::setWindowSize(int lines, int cols)
 {
   _windowColumns = cols;
   _windowLines = lines;
diff --git a/gui//src/Screen.cpp b/gui//src/Screen.cpp
--- a/gui//src/Screen.cpp
+++ b/gui//src/Screen.cpp
@@ -30,18 +30,16 @@
 #include <assert.h>
 #include <string.h>
 #include <ctype.h>
 
 // Qt
 #include <QtCore/QTextStream>
 #include <QtCore/QDate>
 
-// KDE
-//#include <kdebug.h>
 
 // Konsole
 #include "konsole_wcwidth.h"
 #include "TerminalCharacterDecoder.h"
 
 //FIXME: this is emulation specific. Use false for xterm, true for ANSI.
 //FIXME: see if we can get this from terminfo.
 #define BS_CLEARS false
diff --git a/gui//src/Session.cpp b/gui//src/Session.cpp
--- a/gui//src/Session.cpp
+++ b/gui//src/Session.cpp
@@ -31,45 +31,26 @@
 
 // Qt
 #include <QtGui/QApplication>
 #include <QtCore/QByteRef>
 #include <QtCore/QDir>
 #include <QtCore/QFile>
 #include <QtCore/QRegExp>
 #include <QtCore/QStringList>
-//#include <QtDBus/QtDBus>
 #include <QtCore/QDate>
 
-
-// KDE
-//#include <KDebug>
-//#include <KLocale>
-//#include <KMessageBox>
-//#include <KNotification>
-//#include <KProcess>
-//#include <KRun>
-//#include <kshell.h>
-//#include <KStandardDirs>
-//#include <KPtyDevice>
-//#include <KUrl>
 #include "kprocess.h"
 #include "kptydevice.h"
-//#include "kdebug.h"
-
-// Konsole
-//#include <config-konsole.h>
-//#include <sessionadaptor.h>
 
 #include "ProcessInfo.h"
 #include "Pty.h"
 #include "TerminalDisplay.h"
 #include "ShellCommand.h"
 #include "Vt102Emulation.h"
-//#include "ZModemDialog.h"
 
 int Session::lastSessionId = 0;
 
 // HACK This is copied out of QUuid::createUuid with reseeding forced.
 // Required because color schemes repeatedly seed the RNG...
 // ...with a constant.
 QUuid createUuid()
 {
@@ -358,30 +339,16 @@ QString Session::checkProgram(const QStr
       return QString();
 
   // if 'exec' is not specified, fall back to default shell.  if that 
   // is not set then fall back to /bin/sh
   if ( exec.isEmpty() )
       exec = qgetenv("SHELL");
   if ( exec.isEmpty() )
         exec = "/bin/sh";
-
-  // JPS: commented out to get rid of KShell and KRun
-  /*
-  exec = KRun::binaryName(exec, false);
-  exec = KShell::tildeExpand(exec);
-  QString pexec = KGlobal::dirs()->findExe(exec);
-  if ( pexec.isEmpty() ) 
-  {
-      kError() << i18n("Could not find binary: ") << exec;
-    return QString();
-  }
-
-  return exec;
-  */
   return program;
 }
 
 void Session::terminalWarning(const QString& message)
 {
   static const QByteArray warningText = QByteArray("@info:shell Alert the user with red color text");
     QByteArray messageText = message.toLocal8Bit();
 
diff --git a/gui//src/SyntaxHighlighter.cpp b/gui//src/SyntaxHighlighter.cpp
--- a/gui//src/SyntaxHighlighter.cpp
+++ b/gui//src/SyntaxHighlighter.cpp
@@ -13,18 +13,16 @@
  * You should have received a copy of the GNU General Public License
  * along with this program; if not, write to the Free Software
  * Foundation, Inc., 59 Temple Place, Suite 330,
  * Boston, MA 02111-1307, USA.
  */
 
 
 #include "SyntaxHighlighter.h"
-
-
 #include <QXmlStreamReader>
 #include <QStack>
 #include <QFile>
 #include <stdio.h>
 
 SyntaxHighlighter::SyntaxHighlighter(QObject * parent):QSyntaxHighlighter(parent)
 {
 }
diff --git a/gui//src/TerminalCharacterDecoder.cpp b/gui//src/TerminalCharacterDecoder.cpp
--- a/gui//src/TerminalCharacterDecoder.cpp
+++ b/gui//src/TerminalCharacterDecoder.cpp
@@ -20,19 +20,16 @@
 */
 
 // Own
 #include "TerminalCharacterDecoder.h"
 
 // Qt
 #include <QtCore/QTextStream>
 
-// KDE
-//#include <kdebug.h>
-
 // Konsole
 #include "konsole_wcwidth.h"
 
 PlainTextDecoder::PlainTextDecoder()
  : _output(0)
  , _includeTrailingWhitespace(true)
  , _recordLinePositions(false)
 {
diff --git a/gui//src/TerminalDisplay.cpp b/gui//src/TerminalDisplay.cpp
--- a/gui//src/TerminalDisplay.cpp
+++ b/gui//src/TerminalDisplay.cpp
@@ -37,31 +37,16 @@
 #include <QtGui/QPainter>
 #include <QtGui/QPixmap>
 #include <QtGui/QScrollBar>
 #include <QtGui/QStyle>
 #include <QtCore/QTimer>
 #include <QtGui/QToolTip>
 #include <QtCore/QTextStream>
 
-// KDE
-//#include <kshell.h>
-//#include <KColorScheme>
-//#include <KCursor>
-//#include <kdebug.h>
-//#include <KLocale>
-//#include <KMenu>
-//#include <KNotification>
-//#include <KGlobalSettings>
-//#include <KShortcut>
-//#include <KIO/NetAccess>
-//#include "kdebug.h"
-
-// Konsole
-//#include <config-apps.h>
 #include "Filter.h"
 #include "konsole_wcwidth.h"
 #include "ScreenWindow.h"
 #include "TerminalCharacterDecoder.h"
 
 #ifndef loc
 #define loc(X,Y) ((Y)*_columns+(X))
 #endif
diff --git a/gui//src/Vt102Emulation.cpp b/gui//src/Vt102Emulation.cpp
--- a/gui//src/Vt102Emulation.cpp
+++ b/gui//src/Vt102Emulation.cpp
@@ -18,18 +18,16 @@
     along with this program; if not, write to the Free Software
     Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
     02110-1301  USA.
 */
 
 // Own
 #include "Vt102Emulation.h"
 
-// XKB
-//#include <config-konsole.h>
 
 // this allows konsole to be compiled without XKB and XTEST extensions
 // even though it might be available on a particular system.
 #if defined(AVOID_XKB)
     #undef HAVE_XKB
 #endif
 
 #if defined(HAVE_XKB)
@@ -42,20 +40,16 @@
 #include <unistd.h>
 #include <assert.h>
 
 // Qt
 #include <QtCore/QEvent>
 #include <QtGui/QKeyEvent>
 #include <QtCore/QByteRef>
 
-// KDE
-//#include <kdebug.h>
-//#include <klocale.h>
-
 // Konsole
 #include "KeyboardTranslator.h"
 #include "Screen.h"
 
 Vt102Emulation::Vt102Emulation() 
     : Emulation(),
      _titleUpdateTimer(new QTimer(this))
 {
diff --git a/gui//src/kprocess.cpp b/gui//src/kprocess.cpp
--- a/gui//src/kprocess.cpp
+++ b/gui//src/kprocess.cpp
@@ -16,22 +16,16 @@
     You should have received a copy of the GNU Library General Public License
     along with this library; see the file COPYING.LIB.  If not, write to
     the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
     Boston, MA 02110-1301, USA.
 */
 
 #include "kprocess_p.h"
 
-//#include <kstandarddirs.h>
-//#include <kshell.h>
-//#ifdef Q_OS_WIN
-//# include <kshell_p.h>
-//#endif
-
 #include <qfile.h>
 
 #ifdef Q_OS_WIN
 # include <windows.h>
 #else
 # include <unistd.h>
 # include <errno.h>
 #endif
@@ -260,84 +254,19 @@ void KProcess::clearProgram()
 #ifdef Q_OS_WIN
     setNativeArguments(QString());
 #endif
 }
 
 void KProcess::setShellCommand(const QString &cmd)
 {
     Q_D(KProcess);
-
-    // JPS: commented out because I didn't want to pull in KShell also.  It
-    // seems this is mostly for handling program arguments, which I won't be
-    // using.
-    /*
-    KShell::Errors err;
-    d->args = KShell::splitArgs(
-            cmd, KShell::AbortOnMeta | KShell::TildeExpand, &err);
-    if (err == KShell::NoError && !d->args.isEmpty()) {
-        d->prog = KStandardDirs::findExe(d->args[0]);
-        if (!d->prog.isEmpty()) {
-            d->args.removeFirst();
-#ifdef Q_OS_WIN
-            setNativeArguments(QString());
-#endif
-            return;
-        }
-    }
-    */
-
     d->args.clear();
-
-#ifdef Q_OS_UNIX
-// #ifdef NON_FREE // ... as they ship non-POSIX /bin/sh
-# if !defined(__linux__) && !defined(__FreeBSD__) && !defined(__NetBSD__) && !defined(__OpenBSD__) && !defined(__DragonFly__) && !defined(__GNU__)
-    // If /bin/sh is a symlink, we can be pretty sure that it points to a
-    // POSIX shell - the original bourne shell is about the only non-POSIX
-    // shell still in use and it is always installed natively as /bin/sh.
-    /*
-    d->prog = QFile::symLinkTarget(QString::fromLatin1("/bin/sh"));
-    if (d->prog.isEmpty()) {
-        // Try some known POSIX shells.
-        d->prog = KStandardDirs::findExe(QString::fromLatin1("ksh"));
-        if (d->prog.isEmpty()) {
-            d->prog = KStandardDirs::findExe(QString::fromLatin1("ash"));
-            if (d->prog.isEmpty()) {
-                d->prog = KStandardDirs::findExe(QString::fromLatin1("bash"));
-                if (d->prog.isEmpty()) {
-                    d->prog = KStandardDirs::findExe(QString::fromLatin1("zsh"));
-                    if (d->prog.isEmpty())
-                        // We're pretty much screwed, to be honest ...
-                        d->prog = QString::fromLatin1("/bin/sh");
-                }
-            }
-        }
-     }
-*/
-# else
     d->prog = QString::fromLatin1("/bin/sh");
-# endif
-
     d->args << QString::fromLatin1("-c") << cmd;
-#else // Q_OS_UNIX
-    // KMacroExpander::expandMacrosShellQuote(), KShell::quoteArg() and
-    // KShell::joinArgs() may generate these for security reasons.
-    setEnv(PERCENT_VARIABLE, QLatin1String("%"));
-
-#ifndef _WIN32_WCE
-    WCHAR sysdir[MAX_PATH + 1];
-    UINT size = GetSystemDirectoryW(sysdir, MAX_PATH + 1);
-    d->prog = QString::fromUtf16((const ushort *) sysdir, size);
-    d->prog += QLatin1String("\\cmd.exe");
-    setNativeArguments(QLatin1String("/V:OFF /S /C \"") + cmd + QLatin1Char('"'));
-#else
-    d->prog = QLatin1String("\\windows\\cmd.exe");
-    setNativeArguments(QLatin1String("/S /C \"") + cmd + QLatin1Char('"'));
-#endif
-#endif
 }
 
 QStringList KProcess::program() const
 {
     Q_D(const KProcess);
 
     QStringList argv = d->args;
     argv.prepend(d->prog);
diff --git a/gui//src/kpty.cpp b/gui//src/kpty.cpp
--- a/gui//src/kpty.cpp
+++ b/gui//src/kpty.cpp
@@ -19,18 +19,16 @@
    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
 */
 
 #include "kpty_p.h"
 
-//#include <config.h>
-
 #ifdef __sgi
 #define __svr4__
 #endif
 
 #ifdef __osf__
 #define _OSF_SOURCE
 #include <float.h>
 #endif
@@ -127,20 +125,16 @@ extern "C" {
 #else
 # if defined(_HPUX_SOURCE) || defined(__CYGWIN__) || defined(__sun)
 #  define _tcsetattr(fd, ttmode) tcsetattr(fd, TCSANOW, ttmode)
 # else
 #  define _tcsetattr(fd, ttmode) ioctl(fd, TCSETS, (char *)ttmode)
 # endif
 #endif
 
-//#include <kdebug.h>
-//#include <kstandarddirs.h>	// findExe
-//#include <kde_file.h>
-
 #include <QtCore/Q_PID>
 
 #define TTY_GROUP "tty"
 
 #ifndef PATH_MAX
 # ifdef MAXPATHLEN
 #  define PATH_MAX MAXPATHLEN
 # else
diff --git a/gui//src/kpty_p.h b/gui//src/kpty_p.h
--- a/gui//src/kpty_p.h
+++ b/gui//src/kpty_p.h
@@ -18,17 +18,16 @@
     Boston, MA 02110-1301, USA.
 */
 
 #ifndef kpty_p_h
 #define kpty_p_h
 
 #include "kpty.h"
 
-//#include <config-pty.h>
 #if defined(Q_OS_MAC)
 #define HAVE_UTIL_H
 #define HAVE_UTMPX
 #define _UTMPX_COMPAT
 #define HAVE_PTSNAME
 #define HAVE_SYS_TIME_H
 #else
 #define HAVE_PTY_H
diff --git a/gui//src/kptydevice.cpp b/gui//src/kptydevice.cpp
--- a/gui//src/kptydevice.cpp
+++ b/gui//src/kptydevice.cpp
@@ -18,26 +18,20 @@
    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
 */
 
 #include "kptydevice.h"
 #include "kpty_p.h"
-
-//#include <config.h>
-//#include <config-pty.h>
-
 #define i18n
 
 #include <QtCore/QSocketNotifier>
 
-//#include <klocale.h>
-
 #include <unistd.h>
 #include <errno.h>
 #include <signal.h>
 #include <termios.h>
 #include <fcntl.h>
 #include <sys/ioctl.h>
 #ifdef HAVE_SYS_FILIO_H
 # include <sys/filio.h>
diff --git a/gui//src/kptyprocess.cpp b/gui//src/kptyprocess.cpp
--- a/gui//src/kptyprocess.cpp
+++ b/gui//src/kptyprocess.cpp
@@ -17,28 +17,25 @@
     You should have received a copy of the GNU Library General Public License
     along with this library; see the file COPYING.LIB.  If not, write to
     the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
     Boston, MA 02110-1301, USA.
 */
 #include "kptyprocess.h"
 #include "kprocess.h"
 
-//#include <kuser.h>
 #include "kptydevice.h"
 
 #include <stdlib.h>
 #include <unistd.h>
 
 //////////////////
 // private data //
 //////////////////
 
-
-
 KPtyProcess::KPtyProcess(QObject *parent) :
     KProcess(new KPtyProcessPrivate, parent)
 {
     Q_D(KPtyProcess);
 
     d->pty = new KPtyDevice(this);
     d->pty->open();
     connect(this, SIGNAL(stateChanged(QProcess::ProcessState)),
