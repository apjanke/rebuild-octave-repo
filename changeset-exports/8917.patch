# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1236343344 -3600
#      Fri Mar 06 13:42:24 2009 +0100
# Node ID d707aa3bbc36ebbbb85ec7d5ee867d18971f4fb4
# Parent  a2878ba31a9e94e76389ccfd77100080fc2cc375
manual improvements

diff --git a/doc/ChangeLog b/doc/ChangeLog
--- a/doc/ChangeLog
+++ b/doc/ChangeLog
@@ -1,8 +1,12 @@
+2009-03-06  Jaroslav Hajek  <highegg@gmail.com>
+
+	* interpreter/diagperm.txi: Various improvements.
+
 2009-02-27  John W. Eaton  <jwe@octave.org>
 
 	* interpreter/set.txi (Sets): Don't document create_set.
 
 2009-02-26  John W. Eaton  <jwe@octave.org>
 
 	* interpreter/strings.txi (Manipulating Strings):
 	Document strsplit, not split.
diff --git a/doc/interpreter/diagperm.txi b/doc/interpreter/diagperm.txi
--- a/doc/interpreter/diagperm.txi
+++ b/doc/interpreter/diagperm.txi
@@ -23,36 +23,40 @@
 * Basic Usage::          Creation and Manipulation of Diagonal and Permutation Matrices
 * Matrix Algebra::   	 Linear Algebra with Diagonal and Permutation Matrices
 * Function Support::     Functions That Are Aware of These Matrices
 * Example Codes::        Some Examples of Usage
 * Zeros Treatment::      The Differences in Treatment of Zero Elements
 @end menu
 
 @node Basic Usage
-@section The Creation and Manipulation of Diagonal and Permutation Matrices
+@section Creating and Manipulating Diagonal and Permutation Matrices
 
 A diagonal matrix is defined as a matrix that has zero entries outside the main diagonal;
 that is, 
 @iftex
+@tex
 $D_{ij} = 0$ if $i \neq j$
+@end tex
 @end iftex
 @ifnottex
 @code{D(i,j) == 0} if @code{i != j}.
 @end ifnottex
 Most often, square diagonal matrices are considered; however, the definition can equally
 be applied to nonsquare matrices, in which case we usually speak of a rectangular diagonal 
 matrix.
 
 A permutation matrix is defined as a square matrix that has a single element equal to unity
 in each row and each column; all other elements are zero. That is, there exists a 
 permutation (vector) 
 @iftex
+@tex
 $p$ such that $P_{ij}=1$ if $j = p_i$ and
 $P_{ij}=0$ otherwise.  
+@end tex
 @end iftex
 @ifnottex
 @code{p} such that @code{P(i,j) == 1} if @code{j == p(i)} and 
 @code{P(i,j) == 0} otherwise.  
 @end ifnottex
 
 Octave provides special treatment of real and complex rectangular diagonal matrices,
 as well as permutation matrices. They are stored as special objects, using efficient 
@@ -64,70 +68,134 @@ expressions in the Octave language.
 * Creating Permutation Matrices::
 * Explicit and Implicit Conversions::
 @end menu
 
 @node Creating Diagonal Matrices
 @subsection Creating Diagonal Matrices
 
 The most common and easiest way to create a diagonal matrix is using the built-in
-function @dfn{diag}. The expression @code{diag (@var{v})}, with @var{v} a vector,
+function @dfn{diag}. The expression @code{diag (v)}, with @var{v} a vector,
 will create a square diagonal matrix with elements on the main diagonal given
 by the elements of @var{v}, and size equal to the length of @var{v}.
-@code{diag (@var{v}, m, n)} can be used to construct a rectangular diagonal matrix.
+@code{diag (v, m, n)} can be used to construct a rectangular diagonal matrix.
 The result of these expressions will be a special diagonal matrix object, rather
 than a general matrix object.
 
+Diagonal matrix with unit elements can be created using @dfn{eye}.
 Some other built-in functions can also return diagonal matrices. Examples include
 @dfn{balance} or @dfn{inv}.
 
+Example:
+@example
+  diag (1:4)
+@result{}
+Diagonal Matrix
+
+   1   0   0   0
+   0   2   0   0
+   0   0   3   0
+   0   0   0   4
+
+  diag(1:3,5,3)
+
+@result{}
+Diagonal Matrix
+
+   1   0   0
+   0   2   0
+   0   0   3
+   0   0   0
+   0   0   0
+@end example  
+
 @node Creating Permutation Matrices
 @subsection Creating Permutation Matrices
 
 For creating permutation matrices, Octave does not introduce a new function, but
 rather overrides an existing syntax: permutation matrices can be conveniently
 created by indexing an identity matrix by permutation vectors.
 That is, if @var{q} is a permutation vector of length @var{n}, the expression
 @example
-  @var{P} = eye (@var{n}) (:, @var{q});
+  P = eye (n) (:, q);
 @end example
 will create a permutation matrix - a special matrix object.
 @example
-eye (@var{n}) (@var{q}, :) 
+eye (n) (q, :) 
 @end example
 will also work (and create a row permutation matrix), as well as 
 @example
-eye (@var{n}) (@var{q1}, @var{q2}).
+eye (n) (q1, q2).
+@end example
+
+For example:
+@example
+  eye (4) ([1,3,2,4],:)
+@result{}
+Permutation Matrix
+
+   1   0   0   0
+   0   0   1   0
+   0   1   0   0
+   0   0   0   1
+
+  eye (4) (:,[1,3,2,4])
+@result{}
+Permutation Matrix
+
+   1   0   0   0
+   0   0   1   0
+   0   1   0   0
+   0   0   0   1
 @end example
 
 Mathematically, an identity matrix is both diagonal and permutation matrix.
-In Octave, @code{eye (@var{n})} returns a diagonal matrix, because a matrix
+In Octave, @code{eye (n)} returns a diagonal matrix, because a matrix
 can only have one class. You can convert this diagonal matrix to a permutation
-matrix by indexing it by an identity permutation, as shown above.
+matrix by indexing it by an identity permutation, as shown below.
 This is a special property of the identity matrix; indexing other diagonal
-matrices generall produces a full matrix.
+matrices generally produces a full matrix.
+
+@example
+  eye (3)
+@result{}
+Diagonal Matrix
+
+   1   0   0
+   0   1   0
+   0   0   1
+
+  eye(3)(1:3,:)
+@result{}
+Permutation Matrix
+
+   1   0   0
+   0   1   0
+   0   0   1
+@end example
 
 Some other built-in functions can also return permutation matrices. Examples include
 @dfn{inv} or @dfn{lu}.
 
 @node Explicit and Implicit Conversions
 @subsection Explicit and Implicit Conversions
 
 The diagonal and permutation matrices are special objects in their own right. A number
-of operations and built-in functions, are defined for these matrices to use special,
+of operations and built-in functions are defined for these matrices to use special,
 more efficient code than would be used for a full matrix in the same place. Examples
 are given in further sections.
 
 To facilitate smooth mixing with full matrices, backward compatibility, and
 compatibility with Matlab, the diagonal and permutation matrices should allow
-any operation that works on full matrices, and will either treat is specially,
+any operation that works on full matrices, and will either treat it specially,
 or implicitly convert themselves to full matrices.
 
-Instances include matrix indexing (except for extracting a single element),
-indexed assignment, or applying most mapper functions, such as @dfn{exp}.
+Instances include matrix indexing, except for extracting a single element or
+a leading submatrix, indexed assignment, or applying most mapper functions,
+such as @dfn{exp}.
 
 An explicit conversion to a full matrix can be requested using the built-in
 function @dfn{full}. It should also be noted that the diagonal and permutation
 matrix objects will cache the result of the conversion after it is first
 requested (explicitly or implicitly), so that subsequent conversions will
 be very cheap.
 
 @node Matrix Algebra
@@ -142,21 +210,23 @@ are treated specially when performed on 
 * Expressions Involving Diagonal Matrices::
 * Expressions Involving Permutation Matrices::
 @end menu
 
 @node Expressions Involving Diagonal Matrices
 @subsection Expressions Involving Diagonal Matrices
 
 Assume @var{D} is a diagonal matrix. If @var{M} is a full matrix,
-then @code{@var{D}*@var{M}} will scale the rows of @var{M}. That means,
-if @code{@var{S} = @var{D}*@var{M}}, then for each pair of indices
+then @code{D*M} will scale the rows of @var{M}. That means,
+if @code{S = D*M}, then for each pair of indices
 i,j it holds 
 @iftex
+@tex
 $$S_{ij} = D_{ii} M_{ij}$$
+@end tex
 @end iftex
 @ifnottex
 @example
 S(i,j) = D(i,i) * M(i,j).
 @end example
 @end ifnottex
 Similarly, @code{M*D} will do a column scaling.
 
@@ -173,48 +243,55 @@ then @code{D*M} is equivalent to
 i.e. null rows are appended to the result.
 The situation for right-multiplication @code{M*D} is analogous.
 
 The expressions @code{D \ M} and @code{M / D} perform inverse scaling.
 They are equivalent to solving a diagonal (or rectangular diagonal)
 in a least-squares minimum-norm sense. In exact arithmetics, this is
 equivalent to multiplying by a pseudoinverse. The pseudoinverse of
 a rectangular diagonal matrix is again a rectangular diagonal matrix
-of the same dimensions, where each nonzero diagonal element is replaced
+with swapped dimensions, where each nonzero diagonal element is replaced
 by its reciprocal.
 The matrix division algorithms do, in fact, use division rather than 
 multiplication by reciprocals for better numerical accuracy; otherwise, they
 honor the above definition.  Note that a diagonal matrix is never truncated due
 to ill-conditioning; otherwise, it would not be much useful for scaling. This
 is typically consistent with linear algebra needs. A full matrix that only
 happens to be diagonal (an is thus not a special object) is of course treated
 normally.
 
 If @var{D1} and @var{D2} are both diagonal matrices, then the expressions
 @example
-@var{D1} + @var{D2}
-@var{D1} - @var{D2} 
-@var{D1} * @var{D2} 
-@var{D1} / @var{D2} 
-@var{D1} \ @var{D2}
+D1 + D2
+D1 - D2 
+D1 * D2 
+D1 / D2 
+D1 \ D2
 @end example
 again produce diagonal matrices, provided that normal
 dimension matching rules are obeyed. The relations used are same as described above.
 
 Also, a diagonal matrix @var{D} can be multiplied or divided by a scalar, or raised
 to a scalar power if it is square, producing diagonal matrix result in all cases. 
 
 A diagonal matrix can also be transposed or conjugate-transposed, giving the expected
-result. Extracting a leading submatrix of a diagonal matrix, i.e. @code{@var{D}(1:m,1:n)},
+result. Extracting a leading submatrix of a diagonal matrix, i.e. @code{D(1:m,1:n)},
 will produce a diagonal matrix, other indexing expressions will implicitly convert to
 full matrix.
 
-When involved in expressions with the element-by-element operators @code{.*},
+Adding a diagonal matrix to a full matrix only operates on the diagonal elements. Thus,
+@example
+A = A + eps * eye (n)
+@end example
+is an efficient method of augmenting the diagonal of a matrix. Subtraction works
+analogically.
+
+When involved in expressions with other element-by-element operators, @code{.*},
 @code{./}, @code{.\} or @code{.^}, an implicit conversion to full matrix will
-also take place. This is not always strictly necessary but chosen to facilitate
+take place. This is not always strictly necessary but chosen to facilitate
 better consistency with Matlab.
 
 @node Expressions Involving Permutation Matrices
 @subsection Expressions Involving Permutation Matrices
 
 If @var{P} is a permutation matrix and @var{M} a matrix, the expression
 @code{P*M} will permute the rows of @var{M}. Similarly, @code{M*P} will
 yield a column permutation. 
@@ -290,45 +367,49 @@ A permutation matrix can also be returne
 
 The following can be used to solve a linear system @code{A*x = b}
 using the pivoted LU factorization:
 @example
   [L, U, P] = lu (A); ## now L*U = P*A
   x = U \ L \ P*b;
 @end example
 
+@noindent
 This is how you normalize columns of a matrix @var{X} to unit norm:
 @example
   s = norm (X, "columns");
   X = diag (s) \ X;
 @end example
 
+@noindent
 The following expression is a way to efficiently calculate the sign of a
 permutation, given by a permutation vector @var{p}. It will also work
 in earlier versions of Octave, but slowly.
 @example
   det (eye (length (p))(p, :))
 @end example
 
+@noindent
 Finally, here's how you solve a linear system @code{A*x = b} 
 with Tikhonov regularization (ridge regression) using SVD (a skeleton only):
 @example
   m = rows (A); n = columns (A);
   [U, S, V] = svd (A);
   ## determine the regularization factor alpha
   ## alpha = ...
   ## transform to orthogonal basis
-  x = U'*b;
-  ## Use the standard formula, replacing A with S. We work with 
-  ## diagonal matrices, so this will be plausibly efficient.
-  x = (S'*S + alpha^2 * eye (n)) \ (S' * x);
+  b = U'*b;
+  ## Use the standard formula, replacing A with S.
+  ## S is diagonal, so the following will be very fast and accurate.
+  x = (S'*S + alpha^2 * eye (n)) \ (S' * b);
   ## transform to solution basis
   x = V*x;
 @end example
 
+
 @node Zeros Treatment
 @section The Differences in Treatment of Zero Elements
 
 Making diagonal and permutation matrices special matrix objects in their own
 right and the consequent usage of smarter algorithms for certain operations
 implies, as a side effect, small differences in treating zeros.
 The contents of this section applies also to sparse matrices, discussed in
 the following chapter.
@@ -342,18 +423,19 @@ and an "assumed zero".
 A "numerical zero" is a zero value occuring in a place where any floating-point
 value could occur. It is normally stored somewhere in memory as an explicit
 value. 
 An "assumed zero", on the contrary, is a zero matrix element implied by the
 matrix structure (diagonal, triangular) or a sparsity pattern; its value is
 usually not stored explicitly anywhere, but is implied by the underlying
 data structure.
 
-The primary distinction is that an assumed zero, when multiplied or divided
-by any number, yields *always* a zero, even when, e.g., multiplied by @code{Inf}
+The primary distinction is that an assumed zero, when multiplied 
+by any number, or divided by any nonzero number,
+yields *always* a zero, even when, e.g., multiplied by @code{Inf}
 or divided by @code{NaN}.
 The reason for this behavior is that the numerical multiplication is not
 actually performed anywhere by the underlying algorithm; the result is
 just assumed to be zero. Equivalently, one can say that the part of the
 computation involving assumed zeros is performed symbolically, not numerically.
 
 This behavior not only facilitates the most straightforward and efficient
 implementation of algorithms, but also preserves certain useful invariants,
