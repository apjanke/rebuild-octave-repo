# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1319604639 14400
#      Wed Oct 26 00:50:39 2011 -0400
# Node ID e652ff4d15225c06da1c3ea833a0a76dd9d906b8
# Parent  ab4238b0b09b9ffa0a5b9dfa8c7f5ba9a482a19e
don't crash when concatenating structs with no fields

* oct-map.cc (octave_map::cat (int, octave_idx_type, const
octave_scalar_map*)): Quick return for N == 1.
(octave_map::cat (int, octave_idx_type, const octave_map*)):
Quick return for N == 1.  Only call permute_to_correct_order if there
are fields.  Use dim_vector::concat to compute result dimensions if
there are no fields.
New tests for concatentation of structs with no fields.
* pt-mat.cc (tm_const::init (const tree_matrix&)): Initialize all_1x1
to true if tree_matrix argument is not empty.

diff --git a/src/oct-map.cc b/src/oct-map.cc
--- a/src/oct-map.cc
+++ b/src/oct-map.cc
@@ -659,24 +659,27 @@ permute_to_correct_order (octave_idx_typ
     }
 }
 
 
 octave_map
 octave_map::cat (int dim, octave_idx_type n, const octave_scalar_map *map_list)
 {
   octave_map retval;
+
   // Allow dim = -1, -2 for compatibility, though it makes no difference here.
   if (dim == -1 || dim == -2)
     dim = -dim - 1;
   else if (dim < 0)
     (*current_liboctave_error_handler)
       ("cat: invalid dimension");
 
-  if (n > 0)
+  if (n == 1)
+    retval = map_list[0];
+  else if (n > 1)
     {
       octave_idx_type idx, nf = 0;
       for (idx = 0; idx < n; idx++)
         {
           nf = map_list[idx].nfields ();
           if (nf > 0)
             {
               retval.xkeys = map_list[idx].xkeys;
@@ -721,19 +724,30 @@ octave_map::cat (int dim, octave_idx_typ
 
   return retval;
 }
 
 octave_map
 octave_map::cat (int dim, octave_idx_type n, const octave_map *map_list)
 {
   octave_map retval;
-  if (n > 0)
+
+  // Allow dim = -1, -2 for compatibility, though it makes no difference here.
+  if (dim == -1 || dim == -2)
+    dim = -dim - 1;
+  else if (dim < 0)
+    (*current_liboctave_error_handler)
+      ("cat: invalid dimension");
+
+  if (n == 1)
+    retval = map_list[0];
+  else if (n > 1)
     {
       octave_idx_type idx, nf = 0;
+
       for (idx = 0; idx < n; idx++)
         {
           nf = map_list[idx].nfields ();
           if (nf > 0)
             {
               retval.xkeys = map_list[idx].xkeys;
               break;
             }
@@ -747,45 +761,66 @@ octave_map::cat (int dim, octave_idx_typ
           if (! all_same)
             break;
         }
 
       if (all_same)
         do_cat (dim, n, map_list, retval);
       else
         {
-          // permute all structures to correct order.
-          OCTAVE_LOCAL_BUFFER (octave_map, new_map_list, n);
+          if (nf > 0)
+            {
+              // permute all structures to correct order.
+              OCTAVE_LOCAL_BUFFER (octave_map, new_map_list, n);
 
-          permute_to_correct_order (n, nf, idx, map_list, new_map_list);
+              permute_to_correct_order (n, nf, idx, map_list, new_map_list);
 
-          if (nf > 0)
-            do_cat (dim, n, new_map_list, retval);
+              do_cat (dim, n, new_map_list, retval);
+            }
           else
             {
-              // Use dummy arrays. FIXME: Need(?) a better solution.
-              OCTAVE_LOCAL_BUFFER (Array<char>, dummy, n);
-              for (octave_idx_type i = 0; i < n; i++)
-                dummy[i].clear (map_list[i].dimensions);
-              Array<char>::cat (dim, n, dummy);
+              dim_vector dv = map_list[0].dimensions;
+
+              for (octave_idx_type i = 1; i < n; i++)
+                {
+                  if (! dv.concat (map_list[i].dimensions, dim))
+                    {
+                      error ("dimension mismatch in struct concatenation");
+                      return retval;
+                    }
+                }
+
+              retval.dimensions = dv;
             }
         }
 
       retval.optimize_dimensions ();
     }
 
   return retval;
 }
 
 /*
 %!# test preservation of key order by concatenation
 %!test
 %!  x(1, 1).d = 10; x(4, 6).a = "b"; x(2, 4).f = 27;
 %!  y(1, 6).f = 11; y(1, 6).a = "c"; y(1, 6).d = 33;
 %!  assert (fieldnames ([x; y]), {"d"; "a"; "f"});
+
+%!test
+%!  s = struct ();
+%!  sr = [s,s];
+%!  sc = [s;s];
+%!  sm = [s,s;s,s];
+%!  assert (nfields (sr), 0);
+%!  assert (nfields (sc), 0);
+%!  assert (nfields (sm), 0);
+%!  assert (size (sr), [1, 2]);
+%!  assert (size (sc), [2, 1]);
+%!  assert (size (sm), [2, 2]);
 */
 
 octave_map
 octave_map::index (const idx_vector& i, bool resize_ok) const
 {
   octave_map retval (xkeys);
   octave_idx_type nf = nfields ();
 
diff --git a/src/pt-mat.cc b/src/pt-mat.cc
--- a/src/pt-mat.cc
+++ b/src/pt-mat.cc
@@ -541,17 +541,17 @@ tm_const::init (const tree_matrix& tm)
   all_str = true;
   all_sq_str = true;
   all_dq_str = true;
   all_real = true;
   all_cmplx = true;
   any_cell = false;
   any_sparse = false;
   any_class = false;
-  all_1x1 = ! empty ();
+  all_1x1 = ! tm.empty ();
 
   bool first_elem = true;
   bool first_elem_is_struct = false;
 
   // Just eval and figure out if what we have is complex or all
   // strings.  We can't check columns until we know that this is a
   // numeric matrix -- collections of strings can have elements of
   // different lengths.
