# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1533832656 14400
#      Thu Aug 09 12:37:36 2018 -0400
# Node ID 19b2e75069e252d53106567906192192bcb28034
# Parent  e4f670d9df5ccacd9d111aa5d05fbb54631adf6c
# Parent  b5dc88246c02467ec58900d30b3db3806b72d9fa
maint: Merge stable to default.

diff --git a/libinterp/parse-tree/oct-parse.yy b/libinterp/parse-tree/oct-parse.yy
--- a/libinterp/parse-tree/oct-parse.yy
+++ b/libinterp/parse-tree/oct-parse.yy
@@ -2638,17 +2638,17 @@ namespace octave
       default:
         panic_impossible ();
         break;
       }
 
     int l = tok_val->line ();
     int c = tok_val->column ();
 
-    return maybe_compound_binary_expression (op1, op2, l, c, t);
+    return new tree_binary_expression (op1, op2, l, c, t);
   }
 
   // Build a boolean expression.
 
   tree_expression *
   base_parser::make_boolean_op (int op, tree_expression *op1,
                                 token *tok_val, tree_expression *op2)
   {
diff --git a/test/parser.tst b/test/parser.tst
--- a/test/parser.tst
+++ b/test/parser.tst
@@ -332,8 +332,23 @@
 %! assert (f (1), 1);
 %! assert (f (1, 2), 2);
 
 ## FIXME: We need a sequence of concatenation tests since this seems
 ##        to be a frequently reported source of incompatibilities w/Matlab
 ## Check concatenation of empty char matrices (bug #52542)
 %!assert (double ([char(ones(0,3)); 'A']), 65)
 %!assert (double ([char(ones(0,3)); char(ones(2,0)); 'A']), 65)
+
+%!test <*54465>
+%! x = 0;
+%! if (! 0 || (x = 1))
+%! endif
+%! assert (x == 0);
+
+%!function x = matlab_short_circuit ()
+%!  x = 0;
+%!  if (! 0 | (x = 1))
+%!  endif
+%!endfunction
+%!test <*54465>
+%! fail ("x = matlab_short_circuit ()", "warning", "Matlab-style short-circuit operation performed for operator |");
+%! assert (x == 0);
