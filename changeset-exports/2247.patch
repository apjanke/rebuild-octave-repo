# HG changeset patch
# User jwe
# Date 832750769 0
#      Wed May 22 07:39:29 1996 +0000
# Node ID 108d848901b4c481d9af57553128834586c3ae6c
# Parent  a6791c6486fa94f1cc016e785e9012b28123bae0
[project @ 1996-05-22 07:39:29 by jwe]

diff --git a/src/input.cc b/src/input.cc
--- a/src/input.cc
+++ b/src/input.cc
@@ -630,23 +630,21 @@ get_input_from_file (const string& name,
 
 FILE *
 get_input_from_stdin (void)
 {
   rl_instream = stdin;
   return rl_instream;
 }
 
-// XXX FIXME XXX -- this should return a string_vector.
-
-static const char **
+static string_vector
 generate_struct_completions (const char *text, char *& prefix,
 			     char *& hint)
 {
-  const char **names = 0;
+  string_vector names;
 
   assert (text);
 
   char *id = strsave (text);
   char *ptr = strchr (id, '.');
   *ptr = '\0';
 
   char *elts = ptr + 1;
@@ -672,78 +670,53 @@ generate_struct_completions (const char 
       tree_fvc *tmp_fvc = sr->def ();
 
       octave_value *def = 0;
       if (tmp_fvc->is_constant ())
 	def = (octave_value *) tmp_fvc;
 
       if (def && def->is_map ())
 	{
-	  string_vector tmp_names;
-
 	  if (elts && *elts)
 	    {
 	      octave_value ult = def->lookup_map_element (elts, 0, 1);
 
 	      if (ult.is_map ())
 		{
 		  Octave_map m = ult.map_value ();
-		  tmp_names = m.make_name_list ();
+		  names = m.make_name_list ();
 		}
 	    }
 	  else
 	    {
 	      Octave_map m = def->map_value ();
-	      tmp_names = m.make_name_list ();
-	    }
-
-	  int n = tmp_names.length ();
-
-	  if (n > 0)
-	    {
-	      names = new const char * [n+1];
-	      for (int i = 0; i < n; i++)
-		names[i] = strsave (tmp_names[i].c_str ());
-	      names[n] = 0;
+	      names = m.make_name_list ();
 	    }
 	}
     }
 
   delete [] id;
 
   return names;
 }
 
 // XXX FIXME XXX -- make this generate file names when appropriate.
-// XXX FIXME XXX -- this should return a string_vector.
 
-static const char **
+static string_vector
 generate_possible_completions (const char *text, char *& prefix,
 			       char *& hint)
 {
-  const char **names = 0;
+  string_vector names;
 
   prefix = 0;
 
   if (text && *text && *text != '.' && strrchr (text, '.'))
     names = generate_struct_completions (text, prefix, hint);
   else
-    {
-      string_vector tmp_names = make_name_list ();
-
-      int n = tmp_names.length ();
-
-      if (n > 0)
-	{
-	  names = new const char * [n+1];
-	  for (int i = 0; i < n; i++)
-	    names[i] = strsave (tmp_names[i].c_str ());
-	  names[n] = 0;
-	}
-    }
+    names = make_name_list ();
 
   return names;
 }
 
 static int
 looks_like_struct (const char *nm)
 {
   int retval = 0;
@@ -799,68 +772,59 @@ command_generator (const char *text, int
 {
   static char *prefix = 0;
   static char *hint = 0;
 
   static int prefix_len = 0;
   static int hint_len = 0;
 
   static int list_index = 0;
-  static const char **name_list = 0;
+  static int list_length = 0;
+  static string_vector name_list;
 
   static int matches = 0;
 
   if (state == 0)
     {
       list_index = 0;
 
-      if (name_list)
-	{
-	  const char **ptr = name_list;
-
-	  while (ptr && *ptr)
-	    delete [] *ptr++;
-
-	  delete [] name_list;
-
-	  name_list = 0;
-	}
-
       delete [] prefix;
       prefix = 0;
 
       delete [] hint;
       hint = strsave (text);
 
       name_list = generate_possible_completions (text, prefix, hint);
 
       prefix_len = 0;
       if (prefix)
 	prefix_len = strlen (prefix);
 	
       assert (hint);
       hint_len = strlen (hint);
 
       matches = 0;
-      if (name_list)
-	{
-	  int i = 0;
-	  while (name_list[i])
-	    if (strncmp (name_list[i++], hint, hint_len) == 0)
-	      matches++;
-	}
+
+      list_length = name_list.length ();
+
+      for (int i = 0; i < list_length; i++)
+	if (name_list[i].compare (hint, 0, hint_len))
+	  matches++;
     }
 
-  if (name_list && matches)
+  if (list_length > 0 && matches > 0)
     {
       const char *name;
 
-      while ((name = name_list[list_index]) != 0)
+      while (list_index < list_length)
 	{
+	  name = name_list[list_index].c_str ();
+
 	  list_index++;
+
 	  if (strncmp (name, hint, hint_len) == 0)
 	    {
 	      int len = 2 + prefix_len + strlen (name);
 	      char *buf = (char *) malloc (len);
 
 	      if (prefix)
 		{
 		  strcpy (buf, prefix);
@@ -868,18 +832,17 @@ command_generator (const char *text, int
 		  strcat (buf, name);
 		}
 	      else
 		strcpy (buf, name);
 
 	      if (matches == 1 && looks_like_struct (buf))
 		rl_completion_append_character = '.';
 	      else
-		rl_completion_append_character
-		  = Vcompletion_append_char;
+		rl_completion_append_character = Vcompletion_append_char;
 
 	      return buf;
 	    }
 	}
     }
 
   return 0;
 }
