# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1498516720 14400
#      Mon Jun 26 18:38:40 2017 -0400
# Node ID 6eb5f6199a5a4bcceb3140dabd3c03a16d3eb831
# Parent  d396b5fd9199ddfa72cec15aa5a339aef4b83c2d
move mlock, munlock, and mislocked to interpreter class

* interpreter.h, interpreter.cc (interperter::mlock,
interperter::munlock, interperter::mislocked): New functions.
* variables (mlock, munlock, mislocked): Deprecate.  Forward to
interpreter methods.  Change all uses.

diff --git a/examples/code/make_int.cc b/examples/code/make_int.cc
--- a/examples/code/make_int.cc
+++ b/examples/code/make_int.cc
@@ -232,27 +232,27 @@ DEFBINOP (el_ldiv, integer, integer)
     gripe_divide_by_zero ();
 
   return new octave_integer (v2.integer_value () / d);
 }
 
 DEFBINOP_OP (el_and, integer, integer, &&)
 DEFBINOP_OP (el_or, integer, integer, ||)
 
-DEFUN_DLD (make_int, args, ,
-           "int_val = make_int (val)\n\
+DEFMETHOD_DLD (make_int, interp, args, ,
+               "int_val = make_int (val)\n\
 \n\
 Creates an integer variable from VAL.")
 {
   static bool type_loaded = false;
 
   if (! type_loaded)
     {
       octave_integer::register_type ();
-      mlock ();
+      interp.mlock ();
 
       octave_stdout << "installing integer type at type-id = "
                     << octave_integer::static_type_id () << "\n";
 
       INSTALL_UNOP (op_not, octave_integer, gnot);
       INSTALL_UNOP (op_uminus, octave_integer, uminus);
       INSTALL_UNOP (op_transpose, octave_integer, transpose);
       INSTALL_UNOP (op_hermitian, octave_integer, hermitian);
diff --git a/libinterp/corefcn/interpreter.cc b/libinterp/corefcn/interpreter.cc
--- a/libinterp/corefcn/interpreter.cc
+++ b/libinterp/corefcn/interpreter.cc
@@ -1184,16 +1184,58 @@ namespace octave
     return scope;
   }
 
   call_stack& interpreter::get_call_stack (void)
   {
     return m_evaluator.get_call_stack ();
   }
 
+  void interpreter::mlock (void)
+  {
+    call_stack& cs = get_call_stack ();
+
+    octave_function *fcn = cs.current ();
+
+    if (! fcn)
+      error ("mlock: invalid use outside a function");
+
+    fcn->lock ();
+  }
+
+  void interpreter::munlock (const std::string& nm)
+  {
+    octave_value val = m_symbol_table.find_function (nm);
+
+    if (val.is_defined ())
+      {
+        octave_function *fcn = val.function_value ();
+
+        if (fcn)
+          fcn->unlock ();
+      }
+  }
+
+  bool interpreter::mislocked (const std::string& nm)
+  {
+    bool retval = false;
+
+    octave_value val = m_symbol_table.find_function (nm);
+
+    if (val.is_defined ())
+      {
+        octave_function *fcn = val.function_value ();
+
+        if (fcn)
+          retval = fcn->islocked ();
+      }
+
+    return retval;
+  }
+
   void interpreter::recover_from_exception (void)
   {
     can_interrupt = true;
     octave_interrupt_immediately = 0;
     octave_interrupt_state = 0;
     octave_signal_caught = 0;
     octave_exception_state = octave_no_exception;
     octave_restore_signal_mask ();
diff --git a/libinterp/corefcn/interpreter.h b/libinterp/corefcn/interpreter.h
--- a/libinterp/corefcn/interpreter.h
+++ b/libinterp/corefcn/interpreter.h
@@ -159,16 +159,22 @@ namespace octave
 
     tree_evaluator& get_evaluator (void);
 
     cdef_manager& get_cdef_manager (void)
     {
       return m_cdef_manager;
     }
 
+    void mlock (void);
+
+    void munlock (const std::string& nm);
+
+    bool mislocked (const std::string& nm);
+
     static void recover_from_exception (void);
 
     static void add_atexit_function (const std::string& fname);
 
     static bool remove_atexit_function (const std::string& fname);
 
     static interpreter * the_interpreter (void) { return instance; }
 
diff --git a/libinterp/corefcn/mex.cc b/libinterp/corefcn/mex.cc
--- a/libinterp/corefcn/mex.cc
+++ b/libinterp/corefcn/mex.cc
@@ -3563,17 +3563,19 @@ int
 mexIsLocked (void)
 {
   int retval = 0;
 
   if (mex_context)
     {
       const char *fname = mexFunctionName ();
 
-      retval = mislocked (fname);
+      octave::interpreter& interp = octave::__get_interpreter__ ("mexIsLocked");
+
+      retval = interp.mislocked (fname);
     }
 
   return retval;
 }
 
 std::map<std::string,int> mex_lock_count;
 
 void
@@ -3583,17 +3585,19 @@ mexLock (void)
     {
       const char *fname = mexFunctionName ();
 
       if (mex_lock_count.find (fname) == mex_lock_count.end ())
         mex_lock_count[fname] = 1;
       else
         mex_lock_count[fname]++;
 
-      mlock ();
+      octave::interpreter& interp = octave::__get_interpreter__ ("mexLock");
+
+      interp.mlock ();
     }
 }
 
 int
 mexSet (double handle, const char *property, mxArray *val)
 {
   bool ret =
     set_property_in_handle (handle, property, mxArray::as_octave_value (val),
@@ -3611,15 +3615,18 @@ mexUnlock (void)
       std::map<std::string,int>::iterator p = mex_lock_count.find (fname);
 
       if (p != mex_lock_count.end ())
         {
           int count = --mex_lock_count[fname];
 
           if (count == 0)
             {
-              munlock (fname);
+              octave::interpreter& interp
+                = octave::__get_interpreter__ ("mexUnLock");
+
+              interp.munlock (fname);
 
               mex_lock_count.erase (p);
             }
         }
     }
 }
diff --git a/libinterp/corefcn/variables.cc b/libinterp/corefcn/variables.cc
--- a/libinterp/corefcn/variables.cc
+++ b/libinterp/corefcn/variables.cc
@@ -1898,65 +1898,16 @@ complex, nesting, persistent.
 {
   int argc = args.length () + 1;
 
   string_vector argv = args.make_argv ("whos");
 
   return do_who (interp, argc, argv, nargout == 1, true);
 }
 
-oid
-mlock (void)
-{
-  octave::call_stack& cs = octave::__get_call_stack__ ("mlock");
-
-  octave_function *fcn = cs.current ();
-
-  if (! fcn)
-    error ("mlock: invalid use outside a function");
-
-  fcn->lock ();
-}
-
-void
-munlock (const std::string& nm)
-{
-  octave::symbol_table& symtab = octave::__get_symbol_table__ ("munlock");
-
-  octave_value val = symtab.find_function (nm);
-
-  if (val.is_defined ())
-    {
-      octave_function *fcn = val.function_value ();
-
-      if (fcn)
-        fcn->unlock ();
-    }
-}
-
-bool
-mislocked (const std::string& nm)
-{
-  bool retval = false;
-
-  octave::symbol_table& symtab = octave::__get_symbol_table__ ("mislocked");
-
-  octave_value val = symtab.find_function (nm);
-
-  if (val.is_defined ())
-    {
-      octave_function *fcn = val.function_value ();
-
-      if (fcn)
-        retval = fcn->islocked ();
-    }
-
-  return retval;
-}
-
 DEFMETHOD (mlock, interp, args, ,
            doc: /* -*- texinfo -*-
 @deftypefn {} {} mlock ()
 Lock the current function into memory so that it can't be cleared.
 @seealso{munlock, mislocked, persistent}
 @end deftypefn */)
 {
   if (args.length () != 0)
@@ -1988,17 +1939,17 @@ If no function is named then unlock the 
 
   if (nargin > 1)
     print_usage ();
 
   if (nargin == 1)
     {
       std::string name = args(0).xstring_value ("munlock: FCN must be a string");
 
-      munlock (name);
+      interp.munlock (name);
     }
   else
     {
       octave::call_stack& cs = interp.get_call_stack ();
 
       octave_function *fcn = cs.caller ();
 
       if (! fcn)
@@ -2026,17 +1977,17 @@ If no function is named then return true
     print_usage ();
 
   octave_value retval;
 
   if (nargin == 1)
     {
       std::string name = args(0).xstring_value ("mislocked: FCN must be a string");
 
-      retval = mislocked (name);
+      retval = interp.mislocked (name);
     }
   else
     {
       octave::call_stack& cs = interp.get_call_stack ();
 
       octave_function *fcn = cs.caller ();
 
       if (! fcn)
@@ -2669,16 +2620,40 @@ should return an error message to be dis
 @end deftypefn */)
 {
   return SET_INTERNAL_VARIABLE (missing_component_hook);
 }
 
 // The following functions are deprecated.
 
 void
+mlock (void)
+{
+  octave::interpreter& interp = octave::__get_interpreter__ ("mlock");
+
+  interp.mlock ();
+}
+
+void
+munlock (const std::string& nm)
+{
+  octave::interpreter& interp = octave::__get_interpreter__ ("mlock");
+
+  return interp.munlock (nm);
+}
+
+bool
+mislocked (const std::string& nm)
+{
+  octave::interpreter& interp = octave::__get_interpreter__ ("mlock");
+
+  return interp.mislocked (nm);
+}
+
+void
 bind_ans (const octave_value& val, bool print)
 {
   octave::tree_evaluator& tw = octave::__get_evaluator__ ("bind_ans");
 
   tw.bind_ans (val, print);
 }
 
 void
diff --git a/libinterp/corefcn/variables.h b/libinterp/corefcn/variables.h
--- a/libinterp/corefcn/variables.h
+++ b/libinterp/corefcn/variables.h
@@ -113,22 +113,27 @@ set_internal_variable (int& var, const o
 
 #define SET_INTERNAL_VARIABLE_WITH_LIMITS(NM, MINVAL, MAXVAL)           \
   set_internal_variable (V ## NM, args, nargout, #NM, MINVAL, MAXVAL)
 
 // in the following, CHOICES must be a C string array terminated by null.
 #define SET_INTERNAL_VARIABLE_CHOICES(NM, CHOICES)              \
   set_internal_variable (V ## NM, args, nargout, #NM, CHOICES)
 
+extern OCTINTERP_API void maybe_missing_function_hook (const std::string& name);
+
+OCTAVE_DEPRECATED (4.4, "use 'interpreter::mlock' instead")
 extern OCTINTERP_API void mlock (void);
+
+OCTAVE_DEPRECATED (4.4, "use 'interpreter::munlock' instead")
 extern OCTINTERP_API void munlock (const std::string&);
+
+OCTAVE_DEPRECATED (4.4, "use 'interpreter::mislocked' instead")
 extern OCTINTERP_API bool mislocked (const std::string&);
 
-extern OCTINTERP_API void maybe_missing_function_hook (const std::string& name);
-
 OCTAVE_DEPRECATED (4.4, "use 'tree_evaluator::bind_ans' instead")
 extern OCTINTERP_API void bind_ans (const octave_value& val, bool print);
 
 OCTAVE_DEPRECATED (4.4, "use 'symbol_table::clear_mex_functions' instead")
 extern OCTINTERP_API void clear_mex_functions (void);
 
 OCTAVE_DEPRECATED (4.4, "use 'symbol_table::clear_function' instead")
 extern OCTINTERP_API void clear_function (const std::string& nm);
diff --git a/libinterp/dldfcn/__init_fltk__.cc b/libinterp/dldfcn/__init_fltk__.cc
--- a/libinterp/dldfcn/__init_fltk__.cc
+++ b/libinterp/dldfcn/__init_fltk__.cc
@@ -2243,19 +2243,19 @@ std::string figure_manager::fltk_idx_hea
 int figure_manager::curr_index = 1;
 
 static bool toolkit_loaded = false;
 
 class fltk_graphics_toolkit : public base_graphics_toolkit
 {
 public:
 
-  fltk_graphics_toolkit (void)
+  fltk_graphics_toolkit (octave::interpreter& interp)
     : base_graphics_toolkit (FLTK_GRAPHICS_TOOLKIT_NAME),
-      input_event_hook_fcn_id ()
+      m_interpreter (interp), input_event_hook_fcn_id ()
   {
     Fl::visual (FL_RGB);
   }
 
   ~fltk_graphics_toolkit (void) = default;
 
   bool is_valid (void) const { return true; }
 
@@ -2431,33 +2431,36 @@ public:
     sz(1) = Fl::h ();
     return sz;
   }
 
   void close (void)
   {
     if (toolkit_loaded)
       {
-        munlock ("__init_fltk__");
+        m_interpreter.munlock ("__init_fltk__");
 
         octave_value_list args = input_event_hook_fcn_id;
         args.append (false);
         Fremove_input_event_hook (args, 0);
         input_event_hook_fcn_id = octave_value_list ();
 
         figure_manager::close_all ();
       }
   }
 
   void set_input_event_hook_id (const octave_value_list& id)
   {
     input_event_hook_fcn_id = id;
   }
 
 private:
+
+  octave::interpreter& m_interpreter;
+
   octave_value_list input_event_hook_fcn_id;
 };
 
 #endif
 
 DEFUN_DLD (__fltk_check__, , ,
            doc: /* -*- texinfo -*-
 @deftypefn {} {} __fltk_check__ ()
@@ -2473,30 +2476,30 @@ Undocumented internal function.  Calls F
   return octave_value_list ();
 #else
   err_disabled_feature ("__fltk_check__", "OpenGL and FLTK");
 #endif
 }
 
 // Initialize the fltk graphics toolkit.
 
-DEFUN_DLD (__init_fltk__, , ,
-           doc: /* -*- texinfo -*-
+DEFMETHOD_DLD (__init_fltk__, interp, , ,
+               doc: /* -*- texinfo -*-
 @deftypefn {} {} __init_fltk__ ()
 Undocumented internal function.
 @end deftypefn */)
 {
 #if defined (HAVE_FLTK)
   if (! display_info::display_available ())
     error ("__init_fltk__: no graphics DISPLAY available");
   else if (! toolkit_loaded)
     {
-      mlock ();
-
-      fltk_graphics_toolkit *fltk = new fltk_graphics_toolkit ();
+      interp.mlock ();
+
+      fltk_graphics_toolkit *fltk = new fltk_graphics_toolkit (interp);
       graphics_toolkit tk (fltk);
       gtk_manager::load_toolkit (tk);
       toolkit_loaded = true;
 
       octave_value fcn (new octave_builtin (F__fltk_check__));
       octave_value fcn_handle (new octave_fcn_handle (fcn, "@__fltk_check__"));
       octave_value_list id = Fadd_input_event_hook (fcn_handle, 1);
 
diff --git a/libinterp/dldfcn/__init_gnuplot__.cc b/libinterp/dldfcn/__init_gnuplot__.cc
--- a/libinterp/dldfcn/__init_gnuplot__.cc
+++ b/libinterp/dldfcn/__init_gnuplot__.cc
@@ -52,18 +52,18 @@ To initialize:
 
 // PKG_ADD: if (__have_gnuplot__ ()) register_graphics_toolkit ("gnuplot"); endif
 
 static bool toolkit_loaded = false;
 
 class gnuplot_graphics_toolkit : public base_graphics_toolkit
 {
 public:
-  gnuplot_graphics_toolkit (void)
-    : base_graphics_toolkit ("gnuplot") { }
+  gnuplot_graphics_toolkit (octave::interpreter& interp)
+    : base_graphics_toolkit ("gnuplot"), m_interpreter (interp) { }
 
   ~gnuplot_graphics_toolkit (void) = default;
 
   bool is_valid (void) const { return true; }
 
   bool initialize (const graphics_object& go)
   {
     return go.isa ("figure");
@@ -134,17 +134,17 @@ public:
 
   Matrix get_screen_size (void) const
   { return Matrix (1, 2, 0.0); }
 
   void close (void)
   {
     if (toolkit_loaded)
       {
-        munlock ("__init_gnuplot__");
+        m_interpreter.munlock ("__init_gnuplot__");
 
         gtk_manager::unload_toolkit ("gnuplot");
 
         toolkit_loaded = false;
       }
   }
 
 private:
@@ -165,16 +165,18 @@ private:
           {
             Fpclose (ovl (fids(1)));
 
             if (fids.numel () > 2)
               Fwaitpid (ovl (fids(2)));
           }
       }
   }
+
+  octave::interpreter& m_interpreter;
 };
 
 static bool
 have_gnuplot_binary (void)
 {
   const std::string exeext = octave::build_env::EXEEXT;
   const std::string path = octave::sys::env::getenv ("PATH");
   bool retval = false;
@@ -208,29 +210,29 @@ have_gnuplot_binary (void)
   catch (octave::execution_exception&)
     { }
 
   return retval;
 }
 
 // Initialize the gnuplot graphics toolkit.
 
-DEFUN_DLD (__init_gnuplot__, , ,
-           doc: /* -*- texinfo -*-
+DEFMETHOD_DLD (__init_gnuplot__, interp, , ,
+               doc: /* -*- texinfo -*-
 @deftypefn {} {} __init_gnuplot__ ()
 Undocumented internal function.
 @end deftypefn */)
 {
   if (! have_gnuplot_binary ())
     error ("__init_gnuplot__: the gnuplot program is not available, see 'gnuplot_binary'");
   else if (! toolkit_loaded)
     {
-      mlock ();
+      interp.mlock ();
 
-      graphics_toolkit tk (new gnuplot_graphics_toolkit ());
+      graphics_toolkit tk (new gnuplot_graphics_toolkit (interp));
       gtk_manager::load_toolkit (tk);
 
       toolkit_loaded = true;
     }
 
   return octave_value_list ();
 }
 
