# HG changeset patch
# User David Bateman <dbateman@free.fr>
# Date 1271406727 -7200
#      Fri Apr 16 10:32:07 2010 +0200
# Node ID 3306cfcb856e3824b7bdb9e87e8b9719ade07f7d
# Parent  1c6ff93c025a16a972dae03c9b6efea0535417a8
Replace constructs like "NaN * one()" with "NaN()" and  "Inf * ones ()" with "Inf()"

diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,13 +1,18 @@
-2010-04-13  David Bateman  <dbateman@free.fr>
-
-	* statistics/discrete_pdf.m: Reimplement using lookup.
-	* statistics/discrete_inv.m: Reimplement using lookup.
-	* statistics/discrete_cdf.m: typo in last patch.
+2010-04-16  David Bateman  <dbateman@free.fr>
+
+	* statistics/distributions/*: Replace constructs like "NaN * one()"
+	with "NaN()" and  "Inf * ones ()" with "Inf()".
+
+2010-04-15  David Bateman  <dbateman@free.fr>
+
+	* statistics/distributions/discrete_pdf.m: Reimplement using lookup.
+	* statistics/distributions/discrete_inv.m: Reimplement using lookup.
+	* statistics/distributions/discrete_cdf.m: typo in last patch.
 
 2010-04-15  Jaroslav Hajek  <highegg@gmail.com>
 
 	* statistics/distributions/stdnormal_cdf.m: Calculate using erfc.
 
 2010-04-13  David Bateman  <dbateman@free.fr>
 
 	* statistics/discrete_cdf.m: Reimplement using lookup.
diff --git a/scripts/statistics/distributions/betarnd.m b/scripts/statistics/distributions/betarnd.m
--- a/scripts/statistics/distributions/betarnd.m
+++ b/scripts/statistics/distributions/betarnd.m
@@ -71,27 +71,27 @@ function rnd = betarnd (a, b, r, c)
   elseif (nargin == 2)
     sz = size(a);
   else
     print_usage ();
   endif
 
   if (isscalar(a) && isscalar(b))
     if (find (!(a > 0) | !(a < Inf) | !(b > 0) | !(b < Inf)))
-      rnd = NaN * ones (sz);
+      rnd = NaN (sz);
     else
       r1 = randg(a,sz); 
       rnd = r1 ./ (r1 + randg(b,sz));
     endif
   else
     rnd = zeros (sz);
 
     k = find (!(a > 0) | !(a < Inf) | !(b > 0) | !(b < Inf));
     if (any (k))
-      rnd(k) = NaN * ones (size (k));
+      rnd(k) = NaN (size (k));
     endif
 
     k = find ((a > 0) & (a < Inf) & (b > 0) & (b < Inf));
     if (any (k))
       r1 = randg(a(k),size(k)); 
       rnd(k) = r1 ./ (r1 + randg(b(k),size(k)));
     endif
   endif
diff --git a/scripts/statistics/distributions/binornd.m b/scripts/statistics/distributions/binornd.m
--- a/scripts/statistics/distributions/binornd.m
+++ b/scripts/statistics/distributions/binornd.m
@@ -72,17 +72,17 @@ function rnd = binornd (n, p, r, c)
     sz = size(n);
   else
     print_usage ();
   endif
 
   if (isscalar (n) && isscalar (p))
     if (find (!(n >= 0) | !(n < Inf) | !(n == round (n)) |
               !(p >= 0) | !(p <= 1)))
-      rnd = NaN * ones (sz);
+      rnd = NaN (sz);
     elseif (n == 0)
       rnd = zeros (sz);
     else
       nel = prod (sz);
       tmp = rand (n, nel);
       rnd = sum(tmp < ones (n, nel) * p, 1);
       rnd = reshape(rnd, sz);
     endif
diff --git a/scripts/statistics/distributions/cauchy_cdf.m b/scripts/statistics/distributions/cauchy_cdf.m
--- a/scripts/statistics/distributions/cauchy_cdf.m
+++ b/scripts/statistics/distributions/cauchy_cdf.m
@@ -42,17 +42,17 @@ function cdf = cauchy_cdf (x, location, 
   if (!isscalar (location) || !isscalar (scale)) 
     [retval, x, location, scale] = common_size (x, location, scale);
     if (retval > 0)
       error ("cauchy_cdf: x, lambda and sigma must be of common size or scalar");
     endif
   endif
 
   sz = size (x);
-  cdf = NaN * ones (sz);
+  cdf = NaN (sz);
 
   k = find ((x > -Inf) & (x < Inf) & (location > -Inf) &
             (location < Inf) & (scale > 0) & (scale < Inf));
   if (any (k))
     if (isscalar (location) && isscalar (scale)) 
       cdf(k) = 0.5 + atan ((x(k) - location) ./ scale) / pi;
     else
       cdf(k) = 0.5 + atan ((x(k) - location(k)) ./ scale(k)) / pi;
diff --git a/scripts/statistics/distributions/cauchy_inv.m b/scripts/statistics/distributions/cauchy_inv.m
--- a/scripts/statistics/distributions/cauchy_inv.m
+++ b/scripts/statistics/distributions/cauchy_inv.m
@@ -42,17 +42,17 @@ function inv = cauchy_inv (x, location, 
   if (!isscalar (location) || !isscalar (scale)) 
     [retval, x, location, scale] = common_size (x, location, scale);
     if (retval > 0)
       error ("cauchy_inv: x, lambda and sigma must be of common size or scalar");
     endif
   endif
 
   sz = size (x);
-  inv = NaN * ones (sz);
+  inv = NaN (sz);
 
   ok = ((location > -Inf) & (location < Inf) &
        (scale > 0) & (scale < Inf));
 
   k = find ((x == 0) & ok);
   if (any (k))
     inv(k) = -Inf;
   endif
diff --git a/scripts/statistics/distributions/cauchy_pdf.m b/scripts/statistics/distributions/cauchy_pdf.m
--- a/scripts/statistics/distributions/cauchy_pdf.m
+++ b/scripts/statistics/distributions/cauchy_pdf.m
@@ -42,17 +42,17 @@ function pdf = cauchy_pdf (x, location, 
   if (!isscalar (location) || !isscalar (scale)) 
     [retval, x, location, scale] = common_size (x, location, scale);
     if (retval > 0)
       error ("cauchy_pdf: x, lambda and sigma must be of common size or scalar");
     endif
   endif
 
   sz = size (x);
-  pdf = NaN * ones (sz);
+  pdf = NaN (sz);
 
   k = find ((x > -Inf) & (x < Inf) & (location > -Inf) &
             (location < Inf) & (scale > 0) & (scale < Inf));
   if (any (k))
     if (isscalar (location) && isscalar (scale)) 
       pdf(k) = ((1 ./ (1 + ((x(k) - location) ./ scale) .^ 2))
 		/ pi ./ scale);
     else
diff --git a/scripts/statistics/distributions/cauchy_rnd.m b/scripts/statistics/distributions/cauchy_rnd.m
--- a/scripts/statistics/distributions/cauchy_rnd.m
+++ b/scripts/statistics/distributions/cauchy_rnd.m
@@ -71,21 +71,21 @@ function rnd = cauchy_rnd (l, scale, r, 
   elseif (nargin == 2)
     sz = size(l);
   else
     print_usage ();
   endif
 
   if (isscalar (l) && isscalar (scale)) 
     if (find (!(l > -Inf) | !(l < Inf) | !(scale > 0) | !(scale < Inf)))
-      rnd = NaN * ones (sz);
+      rnd = NaN (sz);
     else
       rnd = l - cot (pi * rand (sz)) .* scale;
     endif
   else
-    rnd = NaN * ones (sz);
+    rnd = NaN (sz);
     k = find ((l > -Inf) & (l < Inf) & (scale > 0) & (scale < Inf));
     if (any (k))
       rnd(k) = l(k)(:) - cot (pi * rand (size (k))) .* scale(k)(:);
     endif
   endif
 
 endfunction
diff --git a/scripts/statistics/distributions/chi2rnd.m b/scripts/statistics/distributions/chi2rnd.m
--- a/scripts/statistics/distributions/chi2rnd.m
+++ b/scripts/statistics/distributions/chi2rnd.m
@@ -61,17 +61,17 @@ function rnd = chi2rnd (n, r, c)
   elseif (nargin == 1)
     sz = size(n);
   else
     print_usage ();
   endif
 
   if (isscalar (n))
      if (find (!(n > 0) | !(n < Inf)))
-       rnd = NaN * ones (sz);
+       rnd = NaN (sz);
      else
        rnd = 2 * randg(n/2, sz);
      endif
   else
     [retval, n, dummy] = common_size (n, ones (sz));
     if (retval > 0)
       error ("chi2rnd: a and b must be of common size or scalar");
     endif
diff --git a/scripts/statistics/distributions/exprnd.m b/scripts/statistics/distributions/exprnd.m
--- a/scripts/statistics/distributions/exprnd.m
+++ b/scripts/statistics/distributions/exprnd.m
@@ -65,17 +65,17 @@ function rnd = exprnd (l, r, c)
     print_usage ();
   endif
 
 
   if (isscalar (l))
     if ((l > 0) && (l < Inf))
       rnd = rande(sz) * l;
     else
-      rnd = NaN * ones (sz);
+      rnd = NaN (sz);
     endif
   else
     rnd = zeros (sz);
     k = find (!(l > 0) | !(l < Inf));
     if (any (k))
       rnd(k) = NaN;
     endif
     k = find ((l > 0) & (l < Inf));
diff --git a/scripts/statistics/distributions/frnd.m b/scripts/statistics/distributions/frnd.m
--- a/scripts/statistics/distributions/frnd.m
+++ b/scripts/statistics/distributions/frnd.m
@@ -85,17 +85,17 @@ function rnd = frnd (m, n, r, c)
 	rnd = 2 ./ m .* randg(m / 2, sz);
       endif
       if (! isinf (n))
 	rnd = 0.5 .* n .* rnd ./ randg (n / 2, sz); 
       endif
     elseif ((m > 0) && (m < Inf) && (n > 0) && (n < Inf))
       rnd = n ./ m .* randg (m / 2, sz) ./ randg (n / 2, sz);
     else
-      rnd = NaN * ones (sz);
+      rnd = NaN (sz);
     endif
   else
     rnd = zeros (sz);
 
     k = find (isinf(m) | isinf(n));
     if (any (k))
       rnd (k) = 1;
       k2 = find (!isinf(m) & isinf(n));
diff --git a/scripts/statistics/distributions/gamrnd.m b/scripts/statistics/distributions/gamrnd.m
--- a/scripts/statistics/distributions/gamrnd.m
+++ b/scripts/statistics/distributions/gamrnd.m
@@ -74,17 +74,17 @@ function rnd = gamrnd (a, b, r, c)
   else
     print_usage ();
   endif
 
   rnd = zeros (sz);
 
   if (isscalar (a) && isscalar(b))
     if (find (!(a > 0) | !(a < Inf) | !(b > 0) | !(b < Inf)))
-      rnd = NaN * ones (sz);
+      rnd = NaN (sz);
     else
       rnd = b .* randg(a, sz);
     endif
   else 
     k = find (!(a > 0) | !(a < Inf) | !(b > 0) | !(b < Inf));
     if (any (k))
       rnd(k) = NaN;
     endif
diff --git a/scripts/statistics/distributions/geornd.m b/scripts/statistics/distributions/geornd.m
--- a/scripts/statistics/distributions/geornd.m
+++ b/scripts/statistics/distributions/geornd.m
@@ -63,31 +63,31 @@ function rnd = geornd (p, r, c)
     sz = size(n);
   elseif (nargin != 1)
     print_usage ();
   endif
 
 
   if (isscalar (p))
     if (!(p >= 0) || !(p <= 1))
-      rnd = NaN * ones (sz);
+      rnd = NaN (sz);
     elseif (p == 0)
-      rnd = Inf * ones (sz);
+      rnd = Inf (sz);
     elseif ((p > 0) & (p < 1));
       rnd = floor (- rande(sz) ./ log (1 - p));
     else
       rnd = zeros (sz);
     endif
   else
     rnd = floor (- rande(sz) ./ log (1 - p));
 
     k = find (!(p >= 0) | !(p <= 1));
     if (any (k))
-      rnd(k) = NaN * ones (1, length (k));
+      rnd(k) = NaN (1, length (k));
     endif
 
     k = find (p == 0);
     if (any (k))
-      rnd(k) = Inf * ones (1, length (k));
+      rnd(k) = Inf (1, length (k));
     endif
   endif
 
 endfunction
diff --git a/scripts/statistics/distributions/hygecdf.m b/scripts/statistics/distributions/hygecdf.m
--- a/scripts/statistics/distributions/hygecdf.m
+++ b/scripts/statistics/distributions/hygecdf.m
@@ -39,14 +39,14 @@ function cdf = hygecdf (x, t, m, n)
   endif
 
   if (!isscalar (t) || !isscalar (m) || !isscalar (n))
     error ("hygecdf: t, m and n must all be positive integers");
   endif
 
   if ((t < 0) | (m < 0) | (n <= 0) | (t != round (t)) |
       (m != round (m)) | (n != round (n)) | (m > t) | (n > t))
-    cdf = NaN * ones (size (x))
+    cdf = NaN (size (x))
   else
     cdf = discrete_cdf (x, 0 : n, hygepdf (0 : n, t, m, n));
   endif
 
 endfunction
diff --git a/scripts/statistics/distributions/hygeinv.m b/scripts/statistics/distributions/hygeinv.m
--- a/scripts/statistics/distributions/hygeinv.m
+++ b/scripts/statistics/distributions/hygeinv.m
@@ -36,14 +36,14 @@ function inv = hygeinv (x, t, m, n)
   endif
 
   if (!isscalar (t) || !isscalar (m) || !isscalar (n))
     error ("hygeinv: t, m and n must all be positive integers");
   endif
 
   if ((t < 0) | (m < 0) | (n <= 0) | (t != round (t)) |
       (m != round (m)) | (n != round (n)) | (m > t) | (n > t))
-    inv = NaN * ones (size (x))
+    inv = NaN (size (x))
   else
     inv = discrete_inv (x, 0 : n, hygepdf (0 : n, t, m, n));
   endif
 
 endfunction
diff --git a/scripts/statistics/distributions/hygepdf.m b/scripts/statistics/distributions/hygepdf.m
--- a/scripts/statistics/distributions/hygepdf.m
+++ b/scripts/statistics/distributions/hygepdf.m
@@ -48,17 +48,17 @@ function pdf = hygepdf (x, t, m, n)
   ## everything in i1 gives NaN
   i1 = ((t < 0) | (m < 0) | (n <= 0) | (t != round (t)) |
         (m != round (m)) | (n != round (n)) | (m > t) | (n > t));
   ## everything in i2 gives 0 unless in i1
   i2 = ((x != round (x)) | (x < 0) | (x > m) | (n < x) | (n-x > t-m));
   k = find (i1);
   if (any (k))
     if (isscalar (t) && isscalar (m) && isscalar (n))
-      pdf = NaN * ones (size (x));
+      pdf = NaN (size (x));
     else
       pdf (k) = NaN;
     endif
   endif
   k = find (!i1 & !i2);
   if (any (k))
     if (isscalar (t) && isscalar (m) && isscalar (n))
       pdf (k) = (bincoeff (m, x(k)) .* bincoeff (t-m, n-x(k))
diff --git a/scripts/statistics/distributions/hygernd.m b/scripts/statistics/distributions/hygernd.m
--- a/scripts/statistics/distributions/hygernd.m
+++ b/scripts/statistics/distributions/hygernd.m
@@ -81,17 +81,17 @@ function rnd = hygernd (t, m, n, r, c)
     rn = rand (sz);
     for i = find (! ne)
       v = 0 : n(i);
       p = hygepdf (v, t(i), m(i), n(i));
       rnd(i) = v(lookup (cumsum (p(1 : end-1)) / sum (p), rn(i)) + 1);
     endfor
   else
     if (ne)
-      rnd = NaN * ones (sz);
+      rnd = NaN (sz);
     else
       v = 0:n;
       p = hygepdf (v, t, m, n);
       rnd = v(lookup (cumsum (p(1:end-1)) / sum (p), rand (sz)) + 1);
     endif
   endif
 
 endfunction
diff --git a/scripts/statistics/distributions/laplace_inv.m b/scripts/statistics/distributions/laplace_inv.m
--- a/scripts/statistics/distributions/laplace_inv.m
+++ b/scripts/statistics/distributions/laplace_inv.m
@@ -27,17 +27,17 @@
 ## Description: Quantile function of the Laplace distribution
 
 function inv = laplace_inv (x)
 
   if (nargin != 1)
     print_usage ();
   endif
 
-  inv = (-Inf) * ones (size (x));
+  inv = -Inf (size (x));
 
   k = find (isnan (x) | (x < 0) | (x > 1));
   if (any (k))
     inv(k) = NaN;
   endif
 
   k = find (x == 1);
   if (any (k))
diff --git a/scripts/statistics/distributions/lognrnd.m b/scripts/statistics/distributions/lognrnd.m
--- a/scripts/statistics/distributions/lognrnd.m
+++ b/scripts/statistics/distributions/lognrnd.m
@@ -72,17 +72,17 @@ function rnd = lognrnd (mu, sigma, r, c)
   elseif (nargin == 2)
     sz = size(mu);
   else
     print_usage ();
   endif
 
   if (isscalar (mu) && isscalar (sigma))
     if  (!(sigma > 0) || !(sigma < Inf))
-      rnd = NaN * ones (sz);
+      rnd = NaN (sz);
     else
       rnd = exp(mu + sigma .* randn (sz)); 
     endif
   else
     rnd = exp (mu + sigma .* randn (sz));
     k = find ((sigma < 0) | (sigma == Inf));
     if (any (k))
       rnd(k) = NaN;
diff --git a/scripts/statistics/distributions/nbinrnd.m b/scripts/statistics/distributions/nbinrnd.m
--- a/scripts/statistics/distributions/nbinrnd.m
+++ b/scripts/statistics/distributions/nbinrnd.m
@@ -72,17 +72,17 @@ function rnd = nbinrnd (n, p, r, c)
   elseif (nargin == 2)
     sz = size(n);
   else
     print_usage ();
   endif
 
   if (isscalar (n) && isscalar (p))
     if ((n < 1) || (n == Inf) || (n != round (n)) || (p <= 0) || (p > 1));
-      rnd = NaN * ones (sz);
+      rnd = NaN (sz);
     elseif ((n > 0) && (n < Inf) && (n == round (n)) && 
 	    (p > 0) && (p <= 1))
       rnd = randp ((1 - p) ./ p .* randg (n, sz));
     else
       rnd = zeros (sz);
     endif
   else
     rnd = zeros (sz);
diff --git a/scripts/statistics/distributions/normcdf.m b/scripts/statistics/distributions/normcdf.m
--- a/scripts/statistics/distributions/normcdf.m
+++ b/scripts/statistics/distributions/normcdf.m
@@ -46,17 +46,17 @@ function cdf = normcdf (x, m, s)
     endif
   endif
 
   sz = size (x);
   cdf = zeros (sz);
 
   if (isscalar (m) && isscalar(s))
     if (find (isinf (m) | isnan (m) | !(s >= 0) | !(s < Inf)))
-      cdf = NaN * ones (sz);
+      cdf = NaN (sz);
     else
       cdf =  stdnormal_cdf ((x - m) ./ s);
     endif
   else
     k = find (isinf (m) | isnan (m) | !(s >= 0) | !(s < Inf));
     if (any (k))
       cdf(k) = NaN;
     endif
diff --git a/scripts/statistics/distributions/norminv.m b/scripts/statistics/distributions/norminv.m
--- a/scripts/statistics/distributions/norminv.m
+++ b/scripts/statistics/distributions/norminv.m
@@ -46,17 +46,17 @@ function inv = norminv (x, m, s)
     endif
   endif
 
   sz = size (x);
   inv = zeros (sz);
 
   if (isscalar (m) && isscalar (s))
     if (find (isinf (m) | isnan (m) | !(s > 0) | !(s < Inf)))
-      inv = NaN * ones (sz);
+      inv = NaN (sz);
     else
       inv =  m + s .* stdnormal_inv (x);
     endif
   else
     k = find (isinf (m) | isnan (m) | !(s > 0) | !(s < Inf));
     if (any (k))
       inv(k) = NaN;
     endif
diff --git a/scripts/statistics/distributions/normpdf.m b/scripts/statistics/distributions/normpdf.m
--- a/scripts/statistics/distributions/normpdf.m
+++ b/scripts/statistics/distributions/normpdf.m
@@ -46,17 +46,17 @@ function pdf = normpdf (x, m, s)
     endif
   endif
 
   sz = size (x);
   pdf = zeros (sz);
 
   if (isscalar (m) && isscalar (s))
     if (find (isinf (m) | isnan (m) | !(s >= 0) | !(s < Inf)))
-      pdf = NaN * ones (sz);
+      pdf = NaN (sz);
     else
       pdf = stdnormal_pdf ((x - m) ./ s) ./ s;
     endif
   else
     k = find (isinf (m) | isnan (m) | !(s >= 0) | !(s < Inf));
     if (any (k))
       pdf(k) = NaN;
     endif
diff --git a/scripts/statistics/distributions/normrnd.m b/scripts/statistics/distributions/normrnd.m
--- a/scripts/statistics/distributions/normrnd.m
+++ b/scripts/statistics/distributions/normrnd.m
@@ -71,17 +71,17 @@ function rnd = normrnd (m, s, r, c)
   elseif (nargin == 2)
     sz = size(m);
   else
     print_usage ();
   endif
 
   if (isscalar (m) && isscalar (s))
     if (find (isnan (m) | isinf (m) | !(s > 0) | !(s < Inf)))
-      rnd = NaN * ones (sz);
+      rnd = NaN (sz);
     else
       rnd =  m + s .* randn (sz);
     endif
   else
     rnd = m + s .* randn (sz);
     k = find (isnan (m) | isinf (m) | !(s > 0) | !(s < Inf));
     if (any (k))
       rnd(k) = NaN;
diff --git a/scripts/statistics/distributions/poissrnd.m b/scripts/statistics/distributions/poissrnd.m
--- a/scripts/statistics/distributions/poissrnd.m
+++ b/scripts/statistics/distributions/poissrnd.m
@@ -61,17 +61,17 @@ function rnd = poissrnd (l, r, c)
     sz = size (l);
   else
     print_usage ();
   endif
 
   if (isscalar (l))
 
     if (!(l >= 0) | !(l < Inf))
-      rnd = NaN * ones (sz);
+      rnd = NaN (sz);
     elseif ((l > 0) & (l < Inf))
       rnd = randp(l, sz);
     else
       rnd = zeros (sz);
     endif
   else
     rnd = zeros (sz);
 
diff --git a/scripts/statistics/distributions/trnd.m b/scripts/statistics/distributions/trnd.m
--- a/scripts/statistics/distributions/trnd.m
+++ b/scripts/statistics/distributions/trnd.m
@@ -62,17 +62,17 @@ function rnd = trnd (n, r, c)
   elseif (nargin == 1)
     sz = size (n);
   else
     print_usage ();
   endif
 
   if (isscalar (n))
     if (!(n > 0) || !(n < Inf))
-      rnd = NaN * ones (sz);
+      rnd = NaN (sz);
     elseif ((n > 0) && (n < Inf))
       rnd = randn(sz) ./ sqrt(2*randg(n/2,sz)./n); 
     else
       rnd = zeros (size (n));
     endif
   else
     rnd = zeros (size (n));
 
diff --git a/scripts/statistics/distributions/unifrnd.m b/scripts/statistics/distributions/unifrnd.m
--- a/scripts/statistics/distributions/unifrnd.m
+++ b/scripts/statistics/distributions/unifrnd.m
@@ -70,17 +70,17 @@ function rnd = unifrnd (a, b, r, c)
   elseif (nargin == 2)
     sz = size(a);
   else
     print_usage ();
   endif
 
   if (isscalar(a) && isscalar(b))
     if (find (!(-Inf < a) | !(a < b) | !(b < Inf)))
-      rnd = NaN * ones(sz);
+      rnd = NaN(sz);
     else
       rnd =  a + (b - a) .* rand (sz);
     endif
   else
     rnd =  a + (b - a) .* rand (sz);
 
     k = find (!(-Inf < a) | !(a < b) | !(b < Inf));
     if (any (k))
diff --git a/scripts/statistics/distributions/wblcdf.m b/scripts/statistics/distributions/wblcdf.m
--- a/scripts/statistics/distributions/wblcdf.m
+++ b/scripts/statistics/distributions/wblcdf.m
@@ -53,17 +53,17 @@ function cdf = wblcdf (x, scale, shape)
 
   if (!isscalar (shape) || !isscalar (scale))
     [retval, x, shape, scale] = common_size (x, shape, scale);
     if (retval > 0)
       error ("wblcdf: x, scale and shape must be of common size or scalar");
     endif
   endif
 
-  cdf = NaN * ones (size (x));
+  cdf = NaN (size (x));
 
   ok = ((shape > 0) & (shape < Inf) & (scale > 0) & (scale < Inf));
 
   k = find ((x <= 0) & ok);
   if (any (k))
     cdf(k) = 0;
   endif
 
diff --git a/scripts/statistics/distributions/wblinv.m b/scripts/statistics/distributions/wblinv.m
--- a/scripts/statistics/distributions/wblinv.m
+++ b/scripts/statistics/distributions/wblinv.m
@@ -42,17 +42,17 @@ function inv = wblinv (x, scale, shape)
 
   if (!isscalar (shape) || !isscalar (scale))
     [retval, x, shape, scale] = common_size (x, shape, scale);
     if (retval > 0)
       error ("wblinv: x, scale and shape must be of common size or scalar");
     endif
   endif
 
-  inv = NaN * ones (size (x));
+  inv = NaN (size (x));
 
   ok = ((shape > 0) & (shape < Inf) & (scale > 0) & (scale < Inf));
 
   k = find ((x == 0) & ok);
   if (any (k))
     inv(k) = -Inf;
   endif
 
diff --git a/scripts/statistics/distributions/wblpdf.m b/scripts/statistics/distributions/wblpdf.m
--- a/scripts/statistics/distributions/wblpdf.m
+++ b/scripts/statistics/distributions/wblpdf.m
@@ -54,17 +54,17 @@ function pdf = wblpdf (x, scale, shape)
 
   if (!isscalar (shape) || !isscalar (scale))
     [retval, x, shape, scale] = common_size (x, shape, scale);
     if (retval > 0)
       error ("wblpdf: x, scale and shape must be of common size or scalar");
     endif
   endif
 
-  pdf = NaN * ones (size (x));
+  pdf = NaN (size (x));
   ok = ((shape > 0) & (shape < Inf) & (scale > 0) & (scale < Inf));
 
   k = find ((x > -Inf) & (x <= 0) & ok);
   if (any (k))
     pdf(k) = 0;
   endif
 
   k = find ((x > 0) & (x < Inf) & ok);
diff --git a/scripts/statistics/distributions/wblrnd.m b/scripts/statistics/distributions/wblrnd.m
--- a/scripts/statistics/distributions/wblrnd.m
+++ b/scripts/statistics/distributions/wblrnd.m
@@ -75,17 +75,17 @@ function rnd = wblrnd (scale, shape, r, 
   else
     print_usage ();
   endif
 
   if (isscalar (shape) && isscalar (scale))
     if ((shape > 0) & (shape < Inf) & (scale > 0) & (scale < Inf))
       rnd = scale .* rande(sz) .^ (1./shape);
     else
-      rnd = NaN * ones (sz);
+      rnd = NaN (sz);
     endif
   else
     rnd = scale .* rande(sz) .^ (1./shape);
     k = find ((shape <= 0) | (shape == Inf) | ((scale <= 0) & (scale == Inf)));
     if (any(k))
       rnd(k) = NaN;
     endif
   endif
