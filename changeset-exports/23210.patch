# HG changeset patch
# User Pantxo Diribarne <pantxo.diribarne@gmail.com>
# Date 1487504279 -3600
#      Sun Feb 19 12:37:59 2017 +0100
# Node ID 3a298e07002c865f498b000fc5f74fb666f91a48
# Parent  5d9d756724cc5875ecd9f356dcf68b4743d3b75a
Deprecate "light" and "demi" values for "fontweight" property (bug #50353).

* NEWS: announce deprecation.

* graphics.in.h (text::properties::update_fontweight
                 uicontrol::properties::update_fontweight): emit a warning when
   value is "demi" or "light".
* graphics.in.h (uipanel::properties::update_fontweight
                 uibuttongroup::properties::update_fontweight): new updater,
   emit a warning when value is "demi" or "light".

* genpropdoc.m: provide templates for font* properties doc.  Remove "demi" and
   "light" from fontweight docstrings.

* deprecate-prop.tst: add test for deprecated values and instructions on how to
   remove them in 4.7+.

* QtHandlesUtils.cc (computeFont): fix typo in "bold" case.

diff --git a/NEWS b/NEWS
--- a/NEWS
+++ b/NEWS
@@ -28,31 +28,35 @@ Summary of important user-visible change
     be removed from Octave 4.8 (or whatever version is the second major
     release after 4.4):
 
       Function             | Replacement
       ---------------------|------------------
 
  ** Deprecated graphics properties.
 
-    The following properties have been deprecated in Octave 4.4 and will
-    be removed from Octave 4.8 (or whatever version is the second major
-    release after 4.4):
+    The following properties or allowed corresponding values have been 
+    deprecated in Octave 4.4 and will be removed from Octave 4.8 (or whatever 
+    version is the second major release after 4.4):
 
-      Object               | Property
-      ---------------------|------------------
-      figure               | doublebuffer
-                           | mincolormap
-                           | wvisual
-                           | wvisualmode
-                           | xdisplay
-                           | xvisual
-                           | xvisualmode
-      axes                 | drawmode
-      annotation           | edgecolor ("rectangle")
+      Object               | Property                | Value   
+      ---------------------|-------------------------|-------------------
+      figure               | doublebuffer            |
+                           | mincolormap             |
+                           | wvisual                 |
+                           | wvisualmode             |
+                           | xdisplay                |
+                           | xvisual                 |
+                           | xvisualmode             |
+      axes                 | drawmode                |
+      annotation           | edgecolor ("rectangle") |
+      text                 | fontweight              | "demi" and "light"
+      uicontrol            | fontweight              | "demi" and "light"
+      uipanel              | fontweight              | "demi" and "light"
+      uibuttongroup        | fontweight              | "demi" and "light"
 
  ** The following functions were deprecated in Octave 4.0 and have been
     removed from Octave 4.4.
 
       allow_noninteger_range_as_index
       bicubic
       delaunay3
       do_braindead_shortcircuit_evaluation
diff --git a/doc/interpreter/genpropdoc.m b/doc/interpreter/genpropdoc.m
--- a/doc/interpreter/genpropdoc.m
+++ b/doc/interpreter/genpropdoc.m
@@ -105,16 +105,27 @@ function s = getdoc (objname, field, bas
   valid_4elvec = "four-element vector";
   valid_vecmat = packopt ({"vector", "matrix"});
   valid_scalmat = packopt ({"scalar", "matrix"});
 
   doc_notimpl = "%s is not yet implemented for __objname__ objects.  \
 __prop__ is unused.";
   doc_unused =  "__prop__ is unused.";
 
+  doc_fontangle = "Control whether the font is italic or normal.";
+  doc_fontsize = "Size of the font used for text rendering.  \
+@xref{XREF__objname__fontunits, , fontunits property}.";
+  doc_fontname = "Name of font used for text rendering.  When setting \
+this property, the text rendering engine will search for a matching \
+font in your system.  If none is found then text is rendered using a \
+default sans serif font (same as the default @qcode{\"*\"} value).";
+  doc_fontunits = "Units used to interpret the @qcode{\"fontsize\"} property.";
+  doc_fontweight = "Control the variant of the base font used for \
+text rendering.";
+  
   ## Initialize structure
   if (isfield (base, field))
     s = base.(field);
   else
     s = struct ("valid", "", "default", "", "doc", "", "printdefault", true);
   endif
 
   ## Base properties: Write generic documentation because it will be included
@@ -620,34 +631,35 @@ perpendicular to the screen.";
 displayed in the axes.  Setting @code{dataaspectratio} to \
 @w{@code{[1, 2]}} causes the length of one unit as displayed on the x-axis \
 to be the same as the length of 2 units on the y-axis.  \
 @xref{XREFdaspect, , daspect function}.  __modemsg__.";
         s.valid = valid_3elvec;
 
       case "dataaspectratiomode"
       case "fontangle"
-        s.doc = "Control whether the font is italic or normal.";
+        s.doc = doc_fontangle;
+        
       case "fontname"
-        s.doc = "Name of the font used for axes annotations.";
+        s.doc = doc_fontname;
         s.valid = valid_string;
 
       case "fontsize"
-        s.doc = "Size of the font used for axes annotations.  \
-@xref{XREFaxesfontunits, , @w{fontunits property}}.";
+        s.doc = doc_fontsize;
         s.valid = "scalar";
 
       case "fontunits"
-        s.doc = "Unit used to interpret @code{fontsize} property.";
+        s.doc = doc_fontunits;
 
       case "fontsmoothing"
         s.doc = doc_unused;
 
       case "fontweight"
-        s.doc = "Control variant of base font used: bold, demi, light, normal.";
+        s.doc = doc_fontweight;
+        
       case "gridalpha"
         s.doc = sprintf (doc_notimpl, "Transparency");
 
       case "gridalphamode"
         s.doc = doc_unused;
 
       case "gridcolor"
         s.doc = doc_unused;
@@ -1006,36 +1018,34 @@ z data.";
 
       case "editing"
         s.doc = doc_unused;
 
       case "extent"
         s.doc = "Vector @code{[x0 y0 width height]} indicating the size \
 and location of the text string.";
         s.valid = valid_4elvec;
-        
+      
       case "fontangle"
-        s.doc = "Control whether the font is italic or normal.  \
-@code{fontangle} is currently unused.";
-
+        s.doc = doc_fontangle;
+        
       case "fontname"
-        s.doc = "The font used for the text.";
+        s.doc = doc_fontname;
         s.valid = valid_string;
 
       case "fontsize"
-        s.doc = "The font size of the text as measured in \
-@code{fontunits}.";
+        s.doc = doc_fontsize;
         s.valid = "scalar";
 
       case "fontunits"
-        s.doc = "The units used to interpret @code{fontsize} property.";
+        s.doc = doc_fontunits;
 
       case "fontweight"
-        s.doc = "Control variant of base font used: bold, light, normal, etc.";
-
+        s.doc = doc_fontweight;
+        
       case "horizontalalignment"
       case "interpreter"
         s.doc = "Control the way the @qcode{\"string\"} property is \
 interpreted.\n\
 @xref{XREFinterpreterusage, , @w{Use of the interpreter property}}.";
 
       case "linestyle"
         s.doc = sprintf (doc_notimpl, "Background area");
@@ -1420,20 +1430,32 @@ point source (@qcode{\"local\"}).";
     switch (field)
       ## Overridden shared properties
 
       ## Specific properties
       case "backgroundcolor"
       case "bordertype"
       case "borderwidth"
       case "fontangle"
+        s.doc = doc_fontangle;
+        
       case "fontname"
+        s.doc = doc_fontname;
+        s.valid = valid_string;
+
       case "fontsize"
+        s.doc = doc_fontsize;
+        s.valid = "scalar";
+
       case "fontunits"
+        s.doc = doc_fontunits;
+
       case "fontweight"
+        s.doc = doc_fontweight;
+        
       case "foregroundcolor"
       case "highlightcolor"
       case "position"
       case "resizefcn"
       case "shadowcolor"
       case "title"
       case "titleposition"
       case "units"
@@ -1441,53 +1463,77 @@ point source (@qcode{\"local\"}).";
     endswitch
 
   ## uibuttongroup properties
   elseif (strcmp (objname, "uibuttongroup"))
     switch (field)
       ## Overridden shared properties
 
       ## Specific properties
-        case "backgroundcolor"
-        case "bordertype"
-        case "borderwidth"
-        case "fontangle"
-        case "fontname"
-        case "fontsize"
-        case "fontunits"
-        case "fontweight"
-        case "foregroundcolor"
-        case "highlightcolor"
-        case "position"
-        case "resizefcn"
-        case "selectedobject"
-        case "selectionchangedfcn"
-        case "shadowcolor"
-        case "title"
-        case "titleposition"
-        case "units"
+      case "backgroundcolor"
+      case "bordertype"
+      case "borderwidth"
+      case "fontangle"
+        s.doc = doc_fontangle;
+        
+      case "fontname"
+        s.doc = doc_fontname;
+        s.valid = valid_string;
+
+      case "fontsize"
+        s.doc = doc_fontsize;
+        s.valid = "scalar";
+
+      case "fontunits"
+        s.doc = doc_fontunits;
+
+      case "fontweight"
+        s.doc = doc_fontweight;
+        
+      case "foregroundcolor"
+      case "highlightcolor"
+      case "position"
+      case "resizefcn"
+      case "selectedobject"
+      case "selectionchangedfcn"
+      case "shadowcolor"
+      case "title"
+      case "titleposition"
+      case "units"
 
     endswitch
 
   ## uicontrol properties
   elseif (strcmp (objname, "uicontrol"))
     switch (field)
       ## Overridden shared properties
 
       ## Specific properties
       case "backgroundcolor"
       case "callback"
       case "cdata"
       case "enable"
       case "extent"
       case "fontangle"
+        s.doc = doc_fontangle;
+        
       case "fontname"
+        s.doc = doc_fontname;
+        s.valid = valid_string;
+
       case "fontsize"
+        s.doc = doc_fontsize;
+        s.valid = "scalar";
+
       case "fontunits"
+        s.doc = doc_fontunits;
+
       case "fontweight"
+        s.doc = doc_fontweight;
+        
       case "foregroundcolor"
       case "horizontalalignment"
       case "keypressfcn"
       case "listboxtop"
       case "max"
       case "min"
       case "position"
       case "sliderstep"
diff --git a/libgui/graphics/QtHandlesUtils.cc b/libgui/graphics/QtHandlesUtils.cc
--- a/libgui/graphics/QtHandlesUtils.cc
+++ b/libgui/graphics/QtHandlesUtils.cc
@@ -110,17 +110,17 @@ namespace QtHandles
       static std::map<std::string, QFont::Style> angleMap;
       static bool mapsInitialized = false;
 
       if (! mapsInitialized)
         {
           weightMap[std::string ("normal")] = QFont::Normal;
           weightMap[std::string ("light")] = QFont::Light;
           weightMap[std::string ("demi")] = QFont::DemiBold;
-          weightMap[std::string ("bold")] = QFont::Normal;
+          weightMap[std::string ("bold")] = QFont::Bold;
 
           angleMap[std::string ("normal")] = QFont::StyleNormal;
           angleMap[std::string ("italic")] = QFont::StyleItalic;
           angleMap[std::string ("oblique")] = QFont::StyleOblique;
 
           mapsInitialized = true;
         }
 
diff --git a/libinterp/corefcn/graphics.in.h b/libinterp/corefcn/graphics.in.h
--- a/libinterp/corefcn/graphics.in.h
+++ b/libinterp/corefcn/graphics.in.h
@@ -4770,17 +4770,28 @@ public:
 
     void update_font (void);
     void update_string (void) { request_autopos (); update_text_extent (); }
     void update_rotation (void) { update_text_extent (); }
     void update_color (void) { update_font (); update_text_extent (); }
     void update_fontname (void) { update_font (); update_text_extent (); }
     void update_fontsize (void) { update_font (); update_text_extent (); }
     void update_fontangle (void) { update_font (); update_text_extent (); }
-    void update_fontweight (void) { update_font (); update_text_extent (); }
+
+    void update_fontweight (void) 
+    { 
+      update_font (); 
+      update_text_extent ();
+      // FIXME: Remove warning with demi and light in 4.7+
+      if (fontweight.is ("demi") || fontweight.is ("light"))
+        warning_with_id ("Octave:deprecated-property",
+                         "Setting 'fontweight' to '%s' is deprecated, \
+use 'normal' or 'bold'.", fontweight.current_value ().c_str ());
+    }
+
     void update_interpreter (void) { update_text_extent (); }
     void update_horizontalalignment (void) { update_text_extent (); }
     void update_verticalalignment (void) { update_text_extent (); }
 
     void update_units (void);
     void update_fontunits (const caseless_str& old_fontunits);
 
   private:
@@ -5768,17 +5779,27 @@ public:
     }
 
     void update_text_extent (void);
 
     void update_string (void) { update_text_extent (); }
     void update_fontname (void) { update_text_extent (); }
     void update_fontsize (void) { update_text_extent (); }
     void update_fontangle (void) { update_text_extent (); }
-    void update_fontweight (void) { update_text_extent (); }
+
+    void update_fontweight (void) 
+    { 
+      update_text_extent (); 
+      // FIXME: Remove warning with demi and light in 4.7+
+      if (fontweight.is ("demi") || fontweight.is ("light"))
+        warning_with_id ("Octave:deprecated-property",
+                         "Setting 'fontweight' to '%s' is deprecated, \
+use 'normal' or 'bold'.", fontweight.current_value ().c_str ());
+    }
+
     void update_fontunits (const caseless_str& old_units);
 
     void update_units (void);
 
   };
 
 private:
   properties xproperties;
@@ -5827,17 +5848,17 @@ public:
       color_property backgroundcolor , color_values (1, 1, 1)
       radio_property bordertype , "none|{etchedin}|etchedout|beveledin|beveledout|line"
       double_property borderwidth , 1
       bool_property clipping , "on"
       radio_property fontangle , "{normal}|italic|oblique"
       string_property fontname , OCTAVE_DEFAULT_FONTNAME
       double_property fontsize , 10
       radio_property fontunits S , "inches|centimeters|normalized|{points}|pixels"
-      radio_property fontweight , "light|{normal}|demi|bold"
+      radio_property fontweight u , "light|{normal}|demi|bold"
       color_property foregroundcolor , color_values (0, 0, 0)
       color_property highlightcolor , color_values (1, 1, 1)
       array_property position , default_panel_position ()
       callback_property resizefcn , Matrix ()
       handle_property selectedobject S , graphics_handle()
       callback_property selectionchangedfcn , Matrix()
       color_property shadowcolor , color_values (0, 0, 0)
       callback_property sizechangedfcn , Matrix ()
@@ -5854,17 +5875,25 @@ public:
       fontsize.add_constraint ("min", 0.0, false);
     }
 
     // void update_text_extent (void);
     // void update_string (void) { update_text_extent (); }
     // void update_fontname (void) { update_text_extent (); }
     // void update_fontsize (void) { update_text_extent (); }
     // void update_fontangle (void) { update_text_extent (); }
-    // void update_fontweight (void) { update_text_extent (); }
+
+    void update_fontweight (void) 
+    { 
+      // FIXME: Remove this warning in 4.7+
+      if (fontweight.is ("demi") || fontweight.is ("light"))
+        warning_with_id ("Octave:deprecated-property",
+                         "Setting 'fontweight' to '%s' is deprecated, \
+use 'normal' or 'bold'.", fontweight.current_value ().c_str ());
+    }
 
     void update_units (const caseless_str& old_units);
     void update_fontunits (const caseless_str& old_units);
 
   };
 
 private:
   properties xproperties;
@@ -5913,17 +5942,17 @@ public:
       any_property __object__ h , Matrix ()
       color_property backgroundcolor , color_values (1, 1, 1)
       radio_property bordertype , "none|{etchedin}|etchedout|beveledin|beveledout|line"
       double_property borderwidth , 1
       radio_property fontangle , "{normal}|italic|oblique"
       string_property fontname , OCTAVE_DEFAULT_FONTNAME
       double_property fontsize , 10
       radio_property fontunits S , "inches|centimeters|normalized|{points}|pixels"
-      radio_property fontweight , "light|{normal}|demi|bold"
+      radio_property fontweight u , "light|{normal}|demi|bold"
       color_property foregroundcolor , color_values (0, 0, 0)
       color_property highlightcolor , color_values (1, 1, 1)
       array_property position , default_panel_position ()
       callback_property resizefcn , Matrix ()
       color_property shadowcolor , color_values (0, 0, 0)
       string_property title , ""
       radio_property titleposition , "{lefttop}|centertop|righttop|leftbottom|centerbottom|rightbottom"
       radio_property units S , "{normalized}|inches|centimeters|points|pixels|characters"
@@ -5935,16 +5964,24 @@ public:
       borderwidth.add_constraint ("min", 0.0, true);
       fontsize.add_constraint ("min", 0.0, false);
       position.add_constraint (dim_vector (1, 4));
     }
 
     void update_units (const caseless_str& old_units);
     void update_fontunits (const caseless_str& old_units);
 
+    void update_fontweight (void) 
+    { 
+      // FIXME: Remove this warning in 4.7+
+      if (fontweight.is ("demi") || fontweight.is ("light"))
+        warning_with_id ("Octave:deprecated-property",
+                         "Setting 'fontweight' to '%s' is deprecated, \
+use 'normal' or 'bold'.", fontweight.current_value ().c_str ());
+    }
   };
 
 private:
   properties xproperties;
 
 public:
   uipanel (const graphics_handle& mh, const graphics_handle& p)
     : base_graphics_object (), xproperties (mh, p)
diff --git a/test/deprecate-props.tst b/test/deprecate-props.tst
--- a/test/deprecate-props.tst
+++ b/test/deprecate-props.tst
@@ -93,8 +93,32 @@
 %!test
 %! hf = figure ("visible", "off");
 %! unwind_protect
 %!   hax = axes ();
 %!   testprop (hax, "drawmode", "4.6");
 %! unwind_protect_cleanup
 %!   close (hf);
 %! end_unwind_protect
+
+## text/uicontrol/uipanel/uibuttongroup  "demi" and "light" values for
+## "fontweight" property are deprecated in 4.4, remove from 4.7.+:
+##   * remove "demi" and "light" options in graphics.in.h,
+##   QtHandlesUtils.cc and ft-text-renderer.cc
+##   * remove warnings from update_fontweight in graphics.in.h
+%!test
+%! hf = figure ("visible", "off");
+%! unwind_protect
+%!   ht = text ();
+%!   testprop (ht, "fontweight", "4.6", "demi");
+%!   testprop (ht, "fontweight", "4.6", "light");
+%!   hui = uicontrol ();
+%!   testprop (hui, "fontweight", "4.6", "demi");
+%!   testprop (hui, "fontweight", "4.6", "light");
+%!   hui = uipanel ();
+%!   testprop (hui, "fontweight", "4.6", "demi");
+%!   testprop (hui, "fontweight", "4.6", "light");
+%!   hui = uibuttongroup ();
+%!   testprop (hui, "fontweight", "4.6", "demi");
+%!   testprop (hui, "fontweight", "4.6", "light");
+%! unwind_protect_cleanup
+%!   close (hf);
+%! end_unwind_protect
