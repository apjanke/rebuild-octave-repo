# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1491570356 14400
#      Fri Apr 07 09:05:56 2017 -0400
# Node ID 7fbf0d4e48c99d7837d20da39b2c7853d4f5f919
# Parent  dd6ce1e09a4c7de587a92160d2ed4e4273a0673c
skip some audio tests if no audio devices are available

* audioplayer.m, audiorecorder.m: Skip tests that require audio
  devices if devices are not available.

diff --git a/scripts/audio/@audioplayer/audioplayer.m b/scripts/audio/@audioplayer/audioplayer.m
--- a/scripts/audio/@audioplayer/audioplayer.m
+++ b/scripts/audio/@audioplayer/audioplayer.m
@@ -118,52 +118,52 @@ endfunction
 %! pause (player);
 %! pause (1);
 %! resume (player);
 %! pause (1);
 %! stop (player);
 
 ## Tests of audioplayer must not actually play anything.
 
-%!testif HAVE_PORTAUDIO
+%!testif HAVE_PORTAUDIO; audiodevinfo (0) > 0
 %! mono = 0.25 * randn (1, 44100);
 %! stereo = 0.25 * randn (2, 44100);
 %! fs = 44100;
 %! player1 = audioplayer (mono, fs);
 %! player2 = audioplayer (stereo, fs);
 %! assert (player1.NumberOfChannels, 1);
 %! assert (player2.NumberOfChannels, 2);
 %! assert (player1.SampleRate, 44100);
 %! assert (player2.SampleRate, 44100);
 %! assert (player1.TotalSamples, 44100);
 %! assert (player2.TotalSamples, 44100);
 
-%!testif HAVE_PORTAUDIO
+%!testif HAVE_PORTAUDIO; audiodevinfo (0) > 0
 %! audio = 0.25 * randn (2, 44100);
 %! fs = 44100;
 %! player = audioplayer (audio, fs);
 %! set (player, {"SampleRate", "Tag", "UserData"}, {8000, "tag", [1, 2; 3, 4]});
 %! assert (player.SampleRate, 8000);
 %! assert (player.Tag, "tag");
 %! assert (player.UserData, [1, 2; 3, 4]);
 
-%!testif HAVE_PORTAUDIO
+%!testif HAVE_PORTAUDIO; audiodevinfo (0) > 0
 %! audio = 0.25 * randn (2, 44100);
 %! fs = 44100;
 %! player = audioplayer (audio, fs);
 %! settable = set (player);
 %! settable.SampleRate = 8000;
 %! settable.Tag = "tag";
 %! settable.UserData = [1, 2; 3, 4];
 %! set (player, settable);
 %! assert (player.SampleRate, 8000);
 %! assert (player.Tag, "tag");
 %! assert (player.UserData, [1, 2; 3, 4]);
 
-%!testif HAVE_PORTAUDIO
+%!testif HAVE_PORTAUDIO; audiodevinfo (0) > 0
 %! audio = 0.25 * randn (2, 44100);
 %! fs = 44100;
 %! player = audioplayer (audio, fs);
 %! player.SampleRate = 8000;
 %! player.Tag = "tag";
 %! player.UserData = [1, 2; 3, 4];
 %! properties = get (player, {"SampleRate", "Tag", "UserData"});
 %! assert (properties, {8000, "tag", [1, 2; 3, 4]});
diff --git a/scripts/audio/@audiorecorder/audiorecorder.m b/scripts/audio/@audiorecorder/audiorecorder.m
--- a/scripts/audio/@audiorecorder/audiorecorder.m
+++ b/scripts/audio/@audiorecorder/audiorecorder.m
@@ -64,46 +64,46 @@ endfunction
 %! pause (2);
 %! play (player2);
 %! pause (2);
 %! stop (player1);
 %! stop (player2);
 
 ## Tests of audiorecorder must not actually record anything.
 
-%!testif HAVE_PORTAUDIO
+%!testif HAVE_PORTAUDIO; audiodevinfo (1) > 0
 %! recorder = audiorecorder (44100, 16, 2);
 %! data = getaudiodata (recorder, "int16");
 %! assert (strcmp (class (data), "int16"));
 %! data = getaudiodata (recorder, "int8");
 %! assert (strcmp (class (data), "int8"));
 %! data = getaudiodata (recorder, "uint8");
 %! assert (strcmp (class (data), "uint8"));
 %! assert (size (data)(1), recorder.TotalSamples);
 %! assert (size (data)(2), 2);
 
-%!testif HAVE_PORTAUDIO
+%!testif HAVE_PORTAUDIO; audiodevinfo (1) > 0
 %! recorder = audiorecorder;
 %! set (recorder, {"SampleRate", "Tag", "UserData"}, {8000, "tag", [1, 2; 3, 4]});
 %! assert (recorder.SampleRate, 8000);
 %! assert (recorder.Tag, "tag");
 %! assert (recorder.UserData, [1, 2; 3, 4]);
 
-%!testif HAVE_PORTAUDIO
+%!testif HAVE_PORTAUDIO; audiodevinfo (1) > 0
 %! recorder = audiorecorder;
 %! settable = set (recorder);
 %! settable.SampleRate = 8000;
 %! settable.Tag = "tag";
 %! settable.UserData = [1, 2; 3, 4];
 %! set (recorder, settable);
 %! assert (recorder.SampleRate, 8000);
 %! assert (recorder.Tag, "tag");
 %! assert (recorder.UserData, [1, 2; 3, 4]);
 
-%!testif HAVE_PORTAUDIO
+%!testif HAVE_PORTAUDIO; audiodevinfo (1) > 0
 %! recorder = audiorecorder;
 %! recorder.SampleRate = 8000;
 %! recorder.Tag = "tag";
 %! recorder.UserData = [1, 2; 3, 4];
 %! properties = get (recorder, {"SampleRate", "Tag", "UserData"});
 %! assert (properties, {8000, "tag", [1, 2; 3, 4]});
 
 #%!function status = callback_record (sound)
