# HG changeset patch
# User jwe
# Date 1188581395 0
#      Fri Aug 31 17:29:55 2007 +0000
# Node ID 9398f6a81bdf84611836bc639824bddebb27a412
# Parent  c118ea1823f15dd4eff351782f7bdf8852ccc9c9
[project @ 2007-08-31 17:29:22 by jwe]

diff --git a/doc/ChangeLog b/doc/ChangeLog
--- a/doc/ChangeLog
+++ b/doc/ChangeLog
@@ -1,8 +1,15 @@
+2007-08-31  Søren Hauberg  <hauberg@gmail.com>
+
+        * interpreter/nonlin.txi: Extended the example.
+
+        * interpreter/poly.txi: Sectioning and documentation.
+        * interpreter/octave.texi: Adapt to changes in poly.txi.
+
 2007-08-30  David Bateman  <dbateman@free.fr>
 
 	* interpreter/geometryimages.m: Add inpolygon example
 	* interpreter/Makefile.in (GEOMETRYIMAGES): Add inpolygon example.
 	* interpret/geometry.txi: Document inpolygon.
 
 2007-08-27  David Bateman  <dbateman@free.fr>
 
diff --git a/doc/interpreter/interp.txi b/doc/interpreter/interp.txi
--- a/doc/interpreter/interp.txi
+++ b/doc/interpreter/interp.txi
@@ -8,16 +8,20 @@
 @menu
 * One-dimensional Interpolation::
 * Multi-dimensional Interpolation::
 @end menu
 
 @node One-dimensional Interpolation
 @section One-dimensional Interpolation
 
+Octave supports several methods for one-dimensional interpolation, most
+of which are described in this section.  @ref{Polynomial Interpolation}
+and @ref{Interpolation on Scattered Data} describes further methods.
+
 @DOCSTRING(interp1)
 
 There are some important differences between the various interpolation
 methods. The 'spline' method enforces that both the first and second
 derivatives of the interpolated values have a continuous derivative,
 whereas the other methods do not. This means that the results of the
 'spline' method are generally smoother. If the function to be
 interpolated is in fact smooth, then 'spline' will give excellent
@@ -114,17 +118,18 @@ the points of the original data that are
 of interest.
 
 @DOCSTRING(lookup)
 
 @node Multi-dimensional Interpolation
 @section Multi-dimensional Interpolation
 
 There are three multi-dimensional interpolation function in Octave, with
-similar capabilities.
+similar capabilities.  Methods using Delaunay tessellation are described
+in @ref{Interpolation on Scattered Data}.
 
 @DOCSTRING(interp2)
 
 @DOCSTRING(interp3)
 
 @DOCSTRING(interpn)
 
 A significant difference between @code{interpn} and the other two
diff --git a/doc/interpreter/nonlin.txi b/doc/interpreter/nonlin.txi
--- a/doc/interpreter/nonlin.txi
+++ b/doc/interpreter/nonlin.txi
@@ -10,26 +10,28 @@
 Octave can solve sets of nonlinear equations of the form
 @iftex
 @tex
 $$
  f (x) = 0
 $$
 @end tex
 @end iftex
-@ifinfo
+@ifnottex
 
 @example
 F (x) = 0
 @end example
-@end ifinfo
+@end ifnottex
 
 @noindent
 using the function @code{fsolve}, which is based on the @sc{Minpack}
-subroutine @code{hybrd}.
+subroutine @code{hybrd}.  This is an iterative technique so a starting
+point will have to be provided.  This also has the consequence that
+convergence is not guarantied even if a solution exists.
 
 @DOCSTRING(fsolve)
 
 @DOCSTRING(fsolve_options)
 
 Here is a complete example.  To solve the set of equations
 @iftex
 @tex
@@ -58,36 +60,76 @@ function y = f (x)
 endfunction
 @end example
 
 Then, call @code{fsolve} with a specified initial condition to find the
 roots of the system of equations.  For example, given the function
 @code{f} defined above,
 
 @example
-[x, info] = fsolve ("f", [1; 2])
+[x, info] = fsolve (@@f, [1; 2])
 @end example
 
 @noindent
 results in the solution
 
 @example
 x =
 
   0.57983
   2.54621
 
 info = 1
 @end example
 
+@noindent
 A value of @code{info = 1} indicates that the solution has converged.
 
 The function @code{perror} may be used to print English messages
 corresponding to the numeric error codes.  For example,
 
 @example
 @group
 perror ("fsolve", 1)
      @print{} solution converged to requested tolerance
 @end group
 @end example
 
+When no Jacobian is supplied (as in the example above) it is approximated
+numerically.  This requires more function evaluations, and hence is
+less efficient.  In the example above we could compute the Jacobian 
+analytically as
 
+@iftex
+@tex
+$$
+\left[\matrix{ {\partial f_1 \over \partial x_1} &
+               {\partial f_1 \over \partial x_2} \cr
+               {\partial f_2 \over \partial x_1} &
+               {\partial f_2 \over \partial x_2} \cr}\right] =
+\left[\matrix{ 3 x_2 - 4 x_1                  &
+               4 \cos(x_2) + 3 x_1            \cr
+               -2 x_2^2 - 3 \sin(x_1) + 6 x_1 &
+               -4 x_1 x_2                     \cr }\right]
+$$
+@end tex
+which is computed with the following Octave function
+@end iftex
+
+@example
+function J = jacobian(x)
+  J(1,1) =  3*x(2) - 4*x(1);
+  J(1,2) =  4*cos(x(2)) + 3*x(1);
+  J(2,1) = -2*x(2)^2 - 3*sin(x(1)) + 6*x(1);
+  J(2,2) = -4*x(1)*x(2);
+endfunction
+@end example
+
+@noindent
+Using this Jacobian is done with the following code
+
+@example
+[x, info] = fsolve (@{@@f, @@jacobian@}, [1; 2]);
+@end example
+
+@noindent
+which gives the same solution as before.
+
diff --git a/doc/interpreter/octave.texi b/doc/interpreter/octave.texi
--- a/doc/interpreter/octave.texi
+++ b/doc/interpreter/octave.texi
@@ -438,16 +438,25 @@ Statistics
 * Models::                      
 * Distributions::     
 * Random Number Generation::          
 
 Sets
 
 * Set Operations::
 
+Polynomial Manipulations
+
+* Evaluating Polynomials::
+* Finding Roots::
+* Products of Polynomials::
+* Derivatives and Integrals::
+* Polynomial Interpolation::
+* Miscellaneous Functions::
+
 Interpolation
 
 * One-dimensional Interpolation::
 * Multi-dimensional Interpolation::
 
 Geometry
 
 * Delaunay Triangulation::
diff --git a/doc/interpreter/poly.txi b/doc/interpreter/poly.txi
--- a/doc/interpreter/poly.txi
+++ b/doc/interpreter/poly.txi
@@ -1,76 +1,157 @@
 @c Copyright (C) 1996, 1997, 2007 John W. Eaton
 @c This is part of the Octave manual.
 @c For copying conditions, see the file gpl.texi.
 
 @node Polynomial Manipulations
 @chapter Polynomial Manipulations
 
 In Octave, a polynomial is represented by its coefficients (arranged
-in descending order).  For example, a vector
-@iftex
-@end iftex
-@ifinfo
- $c$
-@end ifinfo
-of length
-@iftex
-@tex
- $N+1$
-@end tex
-@ifinfo
- @var{N+1}
-@end ifinfo
- corresponds to the following polynomial of order
+in descending order).  For example, a vector @var{c} of length
+@math{N+1} corresponds to the following polynomial of order
 @iftex
 @tex
  $N$
 $$
- p (x) = c_1 x^N + ... + c_N x + c_{N+1}.
+ p (x) = c_1 x^N + \ldots + c_N x + c_{N+1}.
 $$
 @end tex
 @end iftex
 @ifinfo
  @var{N}
 
 @example
 p(x) = @var{c}(1) x^@var{N} + ... + @var{c}(@var{N}) x + @var{c}(@var{N}+1).
 @end example
 @end ifinfo
 
+@menu
+* Evaluating Polynomials::
+* Finding Roots::
+* Products of Polynomials::
+* Derivatives and Integrals::
+* Polynomial Interpolation::
+* Miscellaneous Functions::
+@end menu
+
+@node Evaluating Polynomials
+@section Evaluating Polynomials
+
+The value of a polynomial represented by the vector @var{c} can be evaluated
+at the point @var{x} very easily, as the following example shows.
+
+@example
+N = length(c)-1;
+val = dot( x.^(N:-1:0), c );
+@end example
+
+@noindent
+While the above example shows how easy it is to compute the value of a
+polynomial, it isn't the most stable algorithm.  With larger polynomials
+you should use more elegant algorithms, such as Horner's Method, which
+is exactly what the Octave function @code{polyval} does.
+
+In the case where @var{x} is a square matrix, the polynomial given by
+@var{c} is still well-defined.  As when @var{x} is a scalar the obvious
+implementation is easily expressed in Octave, but also in this case
+more elegant algorithms perform better.  The @code{polyvalm} function
+provides such an algorithm.
+
+@DOCSTRING(polyval)
+
+@DOCSTRING(polyvalm)
+
+@node Finding Roots
+@section Finding Roots
+
+Octave can find the roots of a given polynomial.  This is done by computing
+the companion matrix of the polynomial (see the @code{compan} function
+for a definition), and then finding its eigenvalues.
+
+@DOCSTRING(roots)
+
 @DOCSTRING(compan)
 
+@node Products of Polynomials
+@section Products of Polynomials
+
 @DOCSTRING(conv)
 
 @DOCSTRING(deconv)
 
 @DOCSTRING(conv2)
 
-@DOCSTRING(poly)
+@DOCSTRING(polygcd)
+
+@DOCSTRING(residue)
+
+@node Derivatives and Integrals
+@section Derivatives and Integrals
+
+Octave comes with functions for computing the derivative and the integral
+of a polynomial.  The functions @code{polyderiv} and @code{polyinteg}
+both return new polynomials describing the result.  As an example we'll
+compute the definite integral of @math{p(x) = x^2 + 1} from 0 to 3.
+
+@example
+c = [1, 0, 1];
+integral = polyinteg(c);
+area = polyval(integral, 3) - polyval(integral, 0)
+@result{} 12
+@end example
 
 @DOCSTRING(polyderiv)
 
 @DOCSTRING(polyder)
 
-@DOCSTRING(polyfit)
-
-@DOCSTRING(polygcd)
-
 @DOCSTRING(polyinteg)
 
-@DOCSTRING(polyreduce)
+@node Polynomial Interpolation
+@section Polynomial Interpolation
 
-@DOCSTRING(polyval)
+Octave comes with good support for various kinds of interpolation,
+most of which are described in @ref{Interpolation}.  One simple alternative
+to the functions described in the aforementioned chapter, is to fit
+a single polynomial to some given data points.  To avoid a highly
+fluctuating polynomial, one most often wants to fit a low-order polynomial
+to data.  This usually means that it is necessary to fit the polynomial
+in a least-squares sense, which is what the @code{polyfit} function does.
 
-@DOCSTRING(polyvalm)
+@DOCSTRING(polyfit)
 
-@DOCSTRING(residue)
+In situations where a single polynomial isn't good enough, a solution
+is to use several polynomials pieced together.  The function @code{mkpp}
+creates a piece-wise polynomial, @code{ppval} evaluates the function 
+created by @code{mkpp}, and @code{unmkpp} returns detailed information
+about the function.
+
+The following example shows how to combine two linear functions and a
+quadratic into one function.  Each of these functions are expressed
+on adjoined intervals.
 
-@DOCSTRING(roots)
-
-@DOCSTRING(polyout)
+@example
+x = [-2, -1, 1, 2];
+p = [ 0,  1, 0;
+      1, -2, 1;
+      0, -1, 1 ];
+pp = mkpp(x, p);
+xi = linspace(-2, 2, 50);
+yi = ppval(pp, xi);
+plot(xi, yi);
+@end example
 
 @DOCSTRING(ppval)
 
 @DOCSTRING(mkpp)
 
 @DOCSTRING(unmkpp)
+
+@node Miscellaneous Functions
+@section Miscellaneous Functions
+
+@DOCSTRING(poly)
+
+@DOCSTRING(polyout)
+
+@DOCSTRING(polyreduce)
+
+
diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,8 +1,16 @@
+2007-08-31  Søren Hauberg  <hauberg@gmail.com>
+
+        * polynomial/polygcd.m: Better layout of example.
+        * polynomial/compan.m: Remove unnecessary check.
+        * polynomial/roots.m: Added example to help text.
+        * polynomial/polyderiv.m: Change 'polyder' to 'polyderiv' in help text.
+        * polynomial/poly.m: Added example to help text.
+
 2007-08-30  John W. Eaton  <jwe@octave.org>
 
 	* optimization/qp.m: Increase maxit to 200.
 
 2007-08-30  David Bateman  <dbateman@free.fr>
 
 	* geometry/inpolygon.m: New file.
 	* geometry/Makefile.in (SOURCES): Add inpolygon.m.
diff --git a/scripts/polynomial/compan.m b/scripts/polynomial/compan.m
--- a/scripts/polynomial/compan.m
+++ b/scripts/polynomial/compan.m
@@ -30,29 +30,29 @@
 ##  -c_2/c_1 & -c_3/c_1 & \cdots & -c_N/c_1 & -c_{N+1}/c_1\cr
 ##      1    &     0    & \cdots &     0    &         0   \cr
 ##      0    &     1    & \cdots &     0    &         0   \cr
 ##   \vdots  &   \vdots & \ddots &  \vdots  &      \vdots \cr
 ##      0    &     0    & \cdots &     1    &         0}\right].
 ## $$
 ## @end tex
 ## @end iftex
-## @ifinfo
+## @ifnottex
 ##
 ## @smallexample
 ##      _                                                        _
 ##     |  -c(2)/c(1)   -c(3)/c(1)  ...  -c(N)/c(1)  -c(N+1)/c(1)  |
 ##     |       1            0      ...       0             0      |
 ##     |       0            1      ...       0             0      |
 ## A = |       .            .   .            .             .      |
 ##     |       .            .       .        .             .      |
 ##     |       .            .           .    .             .      |
 ##     |_      0            0      ...       1             0     _|
 ## @end smallexample
-## @end ifinfo
+## @end ifnottex
 ##
 ## The eigenvalues of the companion matrix are equal to the roots of the
 ## polynomial.
 ## @seealso{poly, roots, residue, conv, deconv, polyval, polyderiv,
 ## polyinteg}
 ## @end deftypefn
 
 ## Author: Tony Richardson <arichard@stark.cc.oh.us>
@@ -64,22 +64,16 @@ function A = compan (c)
   if (nargin != 1)
     print_usage ();
   endif
 
   if (! isvector (c))
     error ("compan: expecting a vector argument");
   endif
 
-  ## Ensure that c is a row vector.
-
-  if (rows (c) > 1)
-    c = c.';
-  endif
-
   n = length (c);
 
   if (n == 1)
     A = [];
   else
     A = diag (ones (n-2, 1), -1);
     A(1,:) = -c(2:n) / c(1);
   endif
diff --git a/scripts/polynomial/poly.m b/scripts/polynomial/poly.m
--- a/scripts/polynomial/poly.m
+++ b/scripts/polynomial/poly.m
@@ -16,19 +16,34 @@
 ## along with Octave; see the file COPYING.  If not, write to the Free
 ## Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
 ## 02110-1301, USA.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} poly (@var{a})
 ## If @var{a} is a square @math{N}-by-@math{N} matrix, @code{poly (@var{a})}
 ## is the row vector of the coefficients of @code{det (z * eye (N) - a)},
-## the characteristic polynomial of @var{a}.  If @var{x} is a vector,
-## @code{poly (@var{x})} is a vector of coefficients of the polynomial
-## whose roots are the elements of @var{x}.
+## the characteristic polynomial of @var{a}.  As an example we can use
+## this to find the eigenvalues of @var{a} as the roots of @code{poly (@var{a})}.
+## @example
+## roots(poly(eye(3)))
+## @result{} 1.00000 + 0.00000i
+## @result{} 1.00000 - 0.00000i
+## @result{} 1.00000 + 0.00000i
+## @end example
+## In real-life examples you should, however, use the @code{eig} function
+## for computing eigenvalues.
+##
+## If @var{x} is a vector, @code{poly (@var{x})} is a vector of coefficients
+## of the polynomial whose roots are the elements of @var{x}.  That is,
+## of @var{c} is a polynomial, then the elements of 
+## @code{@var{d} = roots (poly (@var{c}))} are contained in @var{c}.
+## The vectors @var{c} and @var{d} are, however, not equal due to sorting
+## and numerical errors.
+## @seealso{eig, roots}
 ## @end deftypefn
 
 ## Author: KH <Kurt.Hornik@wu-wien.ac.at>
 ## Created: 24 December 1993
 ## Adapted-By: jwe
 
 function y = poly (x)
 
diff --git a/scripts/polynomial/polyderiv.m b/scripts/polynomial/polyderiv.m
--- a/scripts/polynomial/polyderiv.m
+++ b/scripts/polynomial/polyderiv.m
@@ -14,18 +14,18 @@
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, write to the Free
 ## Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
 ## 02110-1301, USA.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} polyderiv (@var{c})
-## @deftypefnx {Function File} {[@var{q}] =} polyder (@var{b}, @var{a})
-## @deftypefnx {Function File} {[@var{q}, @var{r}] =} polyder (@var{b}, @var{a})
+## @deftypefnx {Function File} {[@var{q}] =} polyderiv (@var{b}, @var{a})
+## @deftypefnx {Function File} {[@var{q}, @var{r}] =} polyderiv (@var{b}, @var{a})
 ## Return the coefficients of the derivative of the polynomial whose
 ## coefficients are given by vector @var{c}.  If a pair of polynomials
 ## is given @var{b} and @var{a}, the derivative of the product is
 ## returned in @var{q}, or the quotient numerator in @var{q} and the
 ## quotient denominator in @var{r}.
 ## @seealso{poly, polyinteg, polyreduce, roots, conv, deconv, residue,
 ## filter, polygcd, polyval, polyvalm}
 ## @end deftypefn
diff --git a/scripts/polynomial/polygcd.m b/scripts/polynomial/polygcd.m
--- a/scripts/polynomial/polygcd.m
+++ b/scripts/polynomial/polygcd.m
@@ -26,17 +26,19 @@
 ## sqrt(eps).
 ## @end example
 ##  Note that this is an unstable
 ## algorithm, so don't try it on large polynomials.
 ##
 ## Example
 ## @example
 ## polygcd (poly(1:8), poly(3:12)) - poly(3:8)
-##          deconv (poly(1:8), polygcd (poly(1:8), poly(3:12))) - poly(1:2)
+## @result{} [ 0, 0, 0, 0, 0, 0, 0 ]
+## deconv (poly(1:8), polygcd (poly(1:8), poly(3:12))) - poly(1:2)
+## @result{} [ 0, 0, 0 ]
 ## @end example
 ## @seealso{poly, polyinteg, polyderiv, polyreduce, roots, conv, deconv,
 ## residue, filter, polyval, and polyvalm}
 ## @end deftypefn
 
 function x = polygcd (b, a, tol)
 
   if (nargin == 2 || nargin == 3)
diff --git a/scripts/polynomial/roots.m b/scripts/polynomial/roots.m
--- a/scripts/polynomial/roots.m
+++ b/scripts/polynomial/roots.m
@@ -24,22 +24,60 @@
 ## the roots of the polynomial
 ## @iftex
 ## @tex
 ## $$
 ## v_1 z^{N-1} + \cdots + v_{N-1} z + v_N.
 ## $$
 ## @end tex
 ## @end iftex
-## @ifinfo
+## @ifnottex
 ##
 ## @example
 ## v(1) * z^(N-1) + ... + v(N-1) * z + v(N)
 ## @end example
-## @end ifinfo
+## @end ifnottex
+##
+## As an example, the following code finds the roots of the quadratic
+## polynomial
+## @iftex
+## @tex
+## $$ p(x) = x^2 - 5. $$
+## @end tex
+## @end iftex
+## @ifnottex
+## @example
+## p(x) = x^2 - 5.
+## @end example
+## @end ifnottex
+## @example
+## c = [1, 0, -5];
+## roots(c)
+## @result{}  2.2361
+## @result{} -2.2361
+## @end example
+## Note that the true result is
+## @iftex
+## @tex
+## $\pm \sqrt{5}$
+## @end tex
+## @end iftex
+## @ifnottex
+## @math{+/- sqrt(5)}
+## @end ifnottex
+## which is roughly
+## @iftex
+## @tex
+## $\pm 2.2361$.
+## @end tex
+## @end iftex
+## @ifnottex
+## @math{+/- 2.2361}.
+## @end ifnottex
+## @seealso{compan}
 ## @end deftypefn
 
 ## Author: KH <Kurt.Hornik@wu-wien.ac.at>
 ## Created: 24 December 1993
 ## Adapted-By: jwe
 
 function r = roots (v)
 
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,13 @@
+2007-08-31  Michael Goffioul <michael.goffioul@gmail.com>
+
+	* load-path.cc (load_path::do_find_file): Do not assume paths
+	use forward slashes.
+
 2007-08-30  John W. Eaton  <jwe@octave.org>
 
 	* sysdep.cc (Fpause): Doc fix.
 
 2007-08-30  Gabriele Pannocchia  <g.pannocchia@ing.unipi.it>
 
 	* DLD-FUNCTIONS/__qp__.cc (qp): Resize Wact to n_act-neq, not n_act.
 
diff --git a/src/load-path.cc b/src/load-path.cc
--- a/src/load-path.cc
+++ b/src/load-path.cc
@@ -738,17 +738,17 @@ load_path::do_find_fcn (const std::strin
   return retval;
 }
 
 std::string
 load_path::do_find_file (const std::string& file) const
 {
   std::string retval;
 
-  if (file.find ('/') != NPOS)
+  if (file.find_first_of (file_ops::dir_sep_chars) != NPOS)
     {
       if (octave_env::absolute_pathname (file)
 	  || octave_env::rooted_relative_pathname (file))
 	{
 	  file_stat fs (file);
 
 	  if (fs.exists ())
 	    return file;
