# HG changeset patch
# User Rik <rik@octave.org>
# Date 1549672856 28800
#      Fri Feb 08 16:40:56 2019 -0800
# Node ID 775643b5eae4b09f012464ee0c8a5f43dd32ef98
# Parent  63b5a17ba30fd683b8f02bdd7979c352ad0596a7
maint: Fix typos in comments where "intial" instead of "initial" used.

* interpreter.h, octave-link.cc, lex.h, perl.m:
Fix typos in comments where "intial" instead of "initial" used.

diff --git a/libinterp/corefcn/interpreter.h b/libinterp/corefcn/interpreter.h
--- a/libinterp/corefcn/interpreter.h
+++ b/libinterp/corefcn/interpreter.h
@@ -93,29 +93,29 @@ namespace octave
 
     // If creating an embedded interpreter, you may inhibit reading
     // the command history file by calling initialize_history with
     // read_history_file = false prior to calling initialize.
 
     void initialize_history (bool read_history_file = false);
 
     // If creating an embedded interpreter, you may inhibit setting
-    // the default compiled-in path by calling intialize_load_path
+    // the default compiled-in path by calling initialize_load_path
     // with set_initial_path = false prior calling initialize.  After
     // that, you can add directories to the load path to set up a
     // custom path.
 
     void initialize_load_path (bool set_initial_path = true);
 
     // Load command line history, set the load path.
 
     void initialize (void);
 
     // Initialize the interpreter (if not already done by an explicit
-    // call to intialize), execute startup files, --eval option code,
+    // call to initialize), execute startup files, --eval option code,
     // script files, and/or interactive commands.
 
     int execute (void);
 
     bool interactive (void) const
     {
       return m_interactive;
     }
diff --git a/libinterp/corefcn/octave-link.cc b/libinterp/corefcn/octave-link.cc
--- a/libinterp/corefcn/octave-link.cc
+++ b/libinterp/corefcn/octave-link.cc
@@ -242,17 +242,17 @@ Undocumented internal function.
       retval = ovl (items, *it++, atoi (it->c_str ()));
     }
 
   return retval;
 }
 
 DEFUN (__octave_link_list_dialog__, args, ,
        doc: /* -*- texinfo -*-
-@deftypefn {} {} __octave_link_list_dialog__ (@var{list}, @var{mode}, @var{size}, @var{intial}, @var{name}, @var{prompt}, @var{ok_string}, @var{cancel_string})
+@deftypefn {} {} __octave_link_list_dialog__ (@var{list}, @var{mode}, @var{size}, @var{initial}, @var{name}, @var{prompt}, @var{ok_string}, @var{cancel_string})
 Undocumented internal function.
 @end deftypefn */)
 {
   if (args.length () != 8)
     return ovl ();
 
   Cell list = args(0).cell_value ();
   const Array<std::string> tlist = list.cellstr_value ();
diff --git a/libinterp/parse-tree/lex.h b/libinterp/parse-tree/lex.h
--- a/libinterp/parse-tree/lex.h
+++ b/libinterp/parse-tree/lex.h
@@ -499,17 +499,17 @@ namespace octave
     bbp_nesting_level m_nesting_level;
 
     // Tokens generated by the lexer.
     token_cache m_tokens;
   };
 
   // base_lexer inherits from lexical_feedback because we will
   // eventually have several different constructors and it is easier to
-  // intialize if everything is grouped in a parent class rather than
+  // initialize if everything is grouped in a parent class rather than
   // listing all the members in the base_lexer class.
 
   class
   base_lexer : public lexical_feedback
   {
   public:
 
     // Handle buffering of input for lexer.
diff --git a/scripts/miscellaneous/perl.m b/scripts/miscellaneous/perl.m
--- a/scripts/miscellaneous/perl.m
+++ b/scripts/miscellaneous/perl.m
@@ -26,17 +26,17 @@
 ## Return output in @var{output} and optional status in @var{status}.  If
 ## @var{scriptfile} is not an absolute filename it is searched for in the
 ## current directory and then in the Octave loadpath.
 ## @seealso{system, python}
 ## @end deftypefn
 
 function [output, status] = perl (scriptfile = "-e ''", varargin)
 
-  ## VARARGIN is intialized to {}(1x0) if no additional arguments are
+  ## VARARGIN is initialized to {}(1x0) if no additional arguments are
   ## supplied, so there is no need to check for it, or provide an
   ## initial value in the argument list of the function definition.
 
   if (ischar (scriptfile)
       && (   (nargin == 1 && ! isempty (scriptfile))
           || (nargin != 1 && iscellstr (varargin))))
     if (! strcmp (scriptfile(1:2), "-e"))
       ## Attempt to find file in loadpath.  No effect for absolute filenames.
