# HG changeset patch
# User Jacob Dawid <jacob.dawid@googlemail.com>
# Date 1313570997 -7200
#      Wed Aug 17 10:49:57 2011 +0200
# Node ID 8728061cd0ec016bd991002efebf2ee06b2f52bb
# Parent  7d893674a427b395afa5c6d47bda1c209502fc20
Icons are now maintained by the ResourceManager.

diff --git a/gui/src/IRCWidget.cpp b/gui/src/IRCWidget.cpp
--- a/gui/src/IRCWidget.cpp
+++ b/gui/src/IRCWidget.cpp
@@ -251,20 +251,25 @@ IRCWidget::joinOctaveChannel (const QStr
   showStatusMessage (QString ("Joining channel #octave."));
   m_octaveChannel->sendJoinRequest ();
 }
 
 void
 IRCWidget::showMessage (const QString& channel, const QString& sender, const QString& message)
 {
   Q_UNUSED (channel);
-  if (!hasFocus()
-      && !m_chatMessageTextEdit->hasFocus ()
-      && !m_nickButton->hasFocus ()
-      && !m_chatWindow->hasFocus ())
+
+  // TODO: This doesn't work properly!
+  // Every message makes it emit unreadMessage (true),
+  // though it should inly be emitted when this window
+  // does not have focus, ie. is not the active window.
+  if (!(hasFocus()
+      || m_chatMessageTextEdit->hasFocus ()
+      || m_nickButton->hasFocus ()
+      || m_chatWindow->hasFocus () ))
     {
       emit unreadMessages (true);
     }
 
   QString output;
   QString htmlMessage = message;
   htmlMessage.replace ("<", "&lt;");
   htmlMessage.replace (">", "&gt;");
diff --git a/gui/src/MainWindow.cpp b/gui/src/MainWindow.cpp
--- a/gui/src/MainWindow.cpp
+++ b/gui/src/MainWindow.cpp
@@ -150,21 +150,25 @@ MainWindow::handleCommandDoubleClicked (
   m_octaveTerminal->setFocus ();
 }
 
 void
 MainWindow::handleUnreadMessages (bool yes)
 {
   if (yes)
     {
-      m_ircWidgetSubWindow->setWindowIcon (QIcon ("../media/jabber_protocol.png"));
+      m_ircWidgetSubWindow
+        ->setWindowIcon
+          (ResourceManager::instance ()->icon (ResourceManager::ChatNewMessage));
     }
   else
     {
-      m_ircWidgetSubWindow->setWindowIcon (QIcon ("../media/chat.png"));
+      m_ircWidgetSubWindow
+        ->setWindowIcon
+          (ResourceManager::instance ()->icon (ResourceManager::Chat));
     }
 }
 
 void
 MainWindow::alignMdiWindows ()
 {
   m_centralMdiArea->tileSubWindows ();
 }
@@ -254,21 +258,17 @@ MainWindow::writeSettings ()
   settings->setValue ("MainWindow/geometry", saveGeometry ());
   settings->setValue ("MainWindow/windowState", saveState ());
   settings->setValue ("MdiArea/geometry", m_centralMdiArea->saveGeometry ());
 }
 
 void
 MainWindow::construct ()
 {
-
-  if (QFile::exists ("../media/logo.png"))
-    setWindowIcon (QIcon ("../media/logo.png"));
-  else
-    setWindowIcon (QIcon ("/usr/share/octave/quint/media/logo.png"));
+  setWindowIcon (ResourceManager::instance ()->icon (ResourceManager::Octave));
 
   // Initialize MDI area.
   m_centralMdiArea = new QMdiArea (this);
   m_centralMdiArea->setObjectName ("CentralMdiArea");
   m_centralMdiArea->setViewMode (QMdiArea::TabbedView);
 
   // Setup dockable widgets and the status bar.
   m_variablesDockWidget = new VariablesDockWidget (this);
@@ -284,44 +284,47 @@ MainWindow::construct ()
   m_documentationWidget = new BrowserWidget (this);
   m_ircWidget = new IRCWidget (this);
 
   m_octaveTerminal->openTerminal ();
 
   // Octave Terminal subwindow.
   m_octaveTerminalSubWindow =
     m_centralMdiArea->addSubWindow (m_octaveTerminal,
-				    Qt::WindowTitleHint | Qt::
+                                    Qt::WindowTitleHint | Qt::
 				    WindowMinMaxButtonsHint);
   m_octaveTerminalSubWindow->setObjectName ("OctaveTerminalSubWindow");
   m_octaveTerminalSubWindow->setWindowTitle (tr ("Terminal"));
-  m_octaveTerminalSubWindow->setWindowIcon (QIcon ("../media/terminal.png"));
+  m_octaveTerminalSubWindow
+      ->setWindowIcon (ResourceManager::instance ()->icon (ResourceManager::Terminal));
   m_octaveTerminalSubWindow->setFocusProxy (m_octaveTerminal);
   m_octaveTerminalSubWindow->setStatusTip (tr ("Enter your commands into the Octave terminal."));
 
   // Documentation subwindow.
   m_documentationWidgetSubWindow =
     m_centralMdiArea->addSubWindow (m_documentationWidget,
                                     Qt::WindowTitleHint | Qt::
                                     WindowMinMaxButtonsHint);
   m_documentationWidgetSubWindow->setObjectName ("DocumentationWidgetSubWindow");
   m_documentationWidgetSubWindow->setWindowTitle (tr ("Documentation"));
-  m_documentationWidgetSubWindow->setWindowIcon (QIcon ("../media/help_index.png"));
+  m_documentationWidgetSubWindow
+      ->setWindowIcon (ResourceManager::instance ()->icon (ResourceManager::Documentation));
   m_documentationWidgetSubWindow->setFocusProxy (m_documentationWidget);
   m_documentationWidgetSubWindow->setStatusTip (tr ("Browse the Octave documentation for help."));
 
   // Chat subwindow.
   m_ircWidgetSubWindow = m_centralMdiArea->addSubWindow (m_ircWidget,
                                                          Qt::
                                                          WindowTitleHint |
                                                          Qt::
                                                          WindowMinMaxButtonsHint);
   m_ircWidgetSubWindow->setObjectName ("ChatWidgetSubWindow");
   m_ircWidgetSubWindow->setWindowTitle (tr ("Chat"));
-  m_ircWidgetSubWindow->setWindowIcon (QIcon ("../media/chat.png"));
+  m_ircWidgetSubWindow
+      ->setWindowIcon (ResourceManager::instance ()->icon (ResourceManager::Chat));
   m_ircWidgetSubWindow->setStatusTip(tr ("Instantly chat with other Octave users for help."));
   m_ircWidgetSubWindow->setFocusProxy (m_ircWidget);
   connect (m_ircWidget, SIGNAL (unreadMessages (bool)), this, SLOT (handleUnreadMessages (bool)));
 
   m_lexer = NULL;  // initialise the empty lexer for the edtiors
 
   QMenu *controlMenu = menuBar ()->addMenu (tr ("Octave"));
   QAction *settingsAction = controlMenu->addAction (tr ("Settings"));
diff --git a/gui/src/OctaveGUI.cpp b/gui/src/OctaveGUI.cpp
--- a/gui/src/OctaveGUI.cpp
+++ b/gui/src/OctaveGUI.cpp
@@ -35,12 +35,14 @@ main (int argc, char *argv[])
   QString language = settings->value ("language").toString ();
 
   QString translatorFile = ResourceManager::instance ()->findTranslatorFile (language);
   QTranslator translator;
   translator.load (translatorFile);
   application.installTranslator (&translator);
 
   ResourceManager::instance ()->updateNetworkSettings ();
+  ResourceManager::instance ()->loadIcons ();
+
   MainWindow w;
   w.show ();
   return application.exec ();
 }
diff --git a/gui/src/ResourceManager.cpp b/gui/src/ResourceManager.cpp
--- a/gui/src/ResourceManager.cpp
+++ b/gui/src/ResourceManager.cpp
@@ -60,16 +60,26 @@ ResourceManager::setSettings (QString fi
 
 QString
 ResourceManager::findTranslatorFile (QString language)
 {
   // TODO: Quick hack to be able to test language files.
   return QString("../languages/%1.qm").arg(language);
 }
 
+QIcon
+ResourceManager::icon (Icon icon)
+{
+  if (m_icons.contains (icon))
+    {
+      return m_icons [icon];
+    }
+  return QIcon ();
+}
+
 void
 ResourceManager::updateNetworkSettings ()
 {
   QNetworkProxy::ProxyType proxyType = QNetworkProxy::NoProxy;
   if (m_settings->value ("useProxyServer").toBool ())
     {
       QString proxyTypeString = m_settings->value ("proxyType").toString ();
       if (proxyTypeString == "Socks5Proxy")
@@ -85,8 +95,18 @@ ResourceManager::updateNetworkSettings (
   QNetworkProxy proxy;
   proxy.setType (proxyType);
   proxy.setHostName (m_settings->value ("proxyHostName").toString ());
   proxy.setPort (m_settings->value ("proxyPort").toInt ());
   proxy.setUser (m_settings->value ("proxyUserName").toString ());
   proxy.setPassword (m_settings->value ("proxyPassword").toString ());
   QNetworkProxy::setApplicationProxy (proxy);
 }
+
+void
+ResourceManager::loadIcons ()
+{
+  m_icons [ResourceManager::Octave] = QIcon ("../media/logo.png");
+  m_icons [ResourceManager::Terminal] = QIcon ("../media/terminal.png");
+  m_icons [ResourceManager::Documentation] = QIcon ("../media/help_index.png");
+  m_icons [ResourceManager::Chat] = QIcon ("../media/chat.png");
+  m_icons [ResourceManager::ChatNewMessage] = QIcon ("../media/jabber_protocol.png");
+}
diff --git a/gui/src/ResourceManager.h b/gui/src/ResourceManager.h
--- a/gui/src/ResourceManager.h
+++ b/gui/src/ResourceManager.h
@@ -16,35 +16,49 @@
  * along with this program.  If not, see <http://www.gnu.org/licenses/>.
  */
 
 #ifndef RESOURCEMANAGER_H
 #define RESOURCEMANAGER_H
 
 #include <QSettings>
 #include <QDesktopServices>
+#include <QMap>
+#include <QIcon>
 
 class ResourceManager
 {
 public:
+  enum Icon
+  {
+    Octave,
+    Terminal,
+    Documentation,
+    Chat,
+    ChatNewMessage
+  };
+
   ~ResourceManager ();
 
   static ResourceManager *
   instance ()
   {
     return &m_singleton;
   }
 
   QSettings *settings ();
   QString homePath ();
   void setSettings (QString file);
   QString findTranslatorFile (QString language);
   void updateNetworkSettings ();
+  void loadIcons ();
+  QIcon icon (Icon icon);
 
 private:
   ResourceManager ();
 
   QSettings *m_settings;
   QString m_homePath;
+  QMap <Icon, QIcon> m_icons;
   static ResourceManager m_singleton;
 };
 
 #endif // RESOURCEMANAGER_H
