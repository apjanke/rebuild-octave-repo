# HG changeset patch
# User jwe
# Date 1177516499 0
#      Wed Apr 25 15:54:59 2007 +0000
# Node ID f72d6d4b735a1dbb9ef0d9e177335f33b85e469b
# Parent  f14a0d35f90b7330fdac0fd1865b9f290d9abbe2
[project @ 2007-04-25 15:54:59 by jwe]

diff --git a/ChangeLog b/ChangeLog
--- a/ChangeLog
+++ b/ChangeLog
@@ -1,15 +1,18 @@
 2007-04-25  John W. Eaton  <jwe@octave.org>
 
+	* Makeconf.in (do-subst-texinfo-vals): Also substitute top_srcdir.
+
 	* examples/addtwomatrices.cc, examples/celldemo.cc,
 	examples/fortdemo.cc, examples/funcdemo.cc,
 	examples/globaldemo.cc, examples/helloworld.cc,
 	examples/stringdemo.cc, examples/structdemo.cc,
-	examples/unwinddemo.cc, examples/fortsub.f: New files.
+	examples/unwinddemo.cc, examples/fortsub.f,
+	examples/firstmexdemo.c: New files.
 	* examples/Makefile.in (SOURCES): Add them to the list.
 
 2007-04-20  John W. Eaton  <jwe@octave.org>
 
 	* configure.in: Don't check for ARPACK.
 
 2007-03-29  Rafael Laboissiere  <rafael@debian.org>
 
diff --git a/Makeconf.in b/Makeconf.in
--- a/Makeconf.in
+++ b/Makeconf.in
@@ -569,16 +569,17 @@ echo "making $@ from $<"
   -e "s|%OCTAVE_RELEASE%|\"${OCTAVE_RELEASE}\"|" \
   -e "s|%OCTAVE_VERSION%|\"${version}\"|"
 $(simple-move-if-change-rule)
 endef
 
 define do-subst-texinfo-vals
 echo "making $@ from $<"
 $(SED) < $< \
+  -e "s|%top_srcdir%|${top_srcdir}|" \
   -e "s|%OCTAVE_HOME%|${prefix}|" \
   -e "s|%OCTAVE_VERSION%|${version}|" \
   -e "s|%TEXINFO_COLAMD%|${TEXINFO_COLAMD}|" \
   -e "s|%TEXINFO_CHOLMOD%|${TEXINFO_CHOLMOD}|" \
   -e "s|%TEXINFO_UMFPACK%|${TEXINFO_UMFPACK}|" | \
   $(SED) -e "s|%OCTAVE_CONF_DEFS%|\"${UGLY_DEFS}\"|" > $@-t
 $(simple-move-if-change-rule)
 endef
diff --git a/doc/ChangeLog b/doc/ChangeLog
--- a/doc/ChangeLog
+++ b/doc/ChangeLog
@@ -1,10 +1,19 @@
 2007-04-25  John W. Eaton  <jwe@octave.org>
 
+	* interpreter/dynamic.txi: Use @verbatiminclude for example code.
+
+	* interpreter/Makefile.in (EXAMPLE_FILES_NODIR, EXAMPLE_FILES):
+	New variables.
+	(octave.info, octave.dvi, octave.pdf, HTML/index.html):
+	Depend on $(EXAMPLE_FILES).
+
+	* conf.texi.in: Also set top_srcdir with substitution.
+
 	* interpreter/tips.txi: Update with new text and examples.
 	Move documentation section to the end.
 
 2007-04-24  David Bateman  <dbateman@free.fr>
 
 	* interpreter/octave.texi: Include dynamic.texi as appendix and
 	update menus.
 
diff --git a/doc/conf.texi.in b/doc/conf.texi.in
--- a/doc/conf.texi.in
+++ b/doc/conf.texi.in
@@ -1,10 +1,11 @@
 @c Copyright (C) 1996, 1997 John W. Eaton
 @c This is part of the Octave manual.
 @c For copying conditions, see the file gpl.texi.
 
 @set OCTAVE_MANUAL
+@set top_srcdir %top_srcdir%
 @set OCTAVEHOME %OCTAVE_HOME%
 @set VERSION %OCTAVE_VERSION%
 %TEXINFO_COLAMD%
 %TEXINFO_CHOLMOD%
 %TEXINFO_UMFPACK%
diff --git a/doc/interpreter/Makefile.in b/doc/interpreter/Makefile.in
--- a/doc/interpreter/Makefile.in
+++ b/doc/interpreter/Makefile.in
@@ -15,16 +15,31 @@ VPATH = @srcdir@
 include $(TOPDIR)/Makeconf
 
 INSTALL = @INSTALL@
 INSTALL_PROGRAM = @INSTALL_PROGRAM@
 INSTALL_DATA = @INSTALL_DATA@
 
 SCRIPT_SOURCES = sparseimages.m
 
+EXAMPLE_FILES_NODIR = \
+  addtwomatrices.cc \
+  celldemo.cc \
+  firstmexdemo.c \
+  fortdemo.cc \
+  fortsub.f \
+  funcdemo.cc \
+  globaldemo.cc \
+  helloworld.cc \
+  stringdemo.cc \
+  structdemo.cc \
+  unwinddemo.cc
+
+EXAMPLE_FILES = $(addprefix $(top_srcdir)/examples/, $(EXAMPLE_FILES_NODIR))
+
 SPARSEIMAGES_1 = gplot grid spmatrix spchol spcholperm
 
 SPARSEIMAGES_EPS = $(addsuffix .eps, $(SPARSEIMAGES_1))
 SPARSEIMAGES_PDF = $(addsuffix .pdf, $(SPARSEIMAGES_1))
 SPARSEIMAGES_PNG = $(addsuffix .png, $(SPARSEIMAGES_1))
 SPARSEIMAGES_TXT = $(addsuffix .txt, $(SPARSEIMAGES_1))
 
 IMAGES_EPS = $(SPARSEIMAGES_EPS)
@@ -105,27 +120,27 @@ contributors.texi: contributors.in
 
 $(SUB_TEXINFO) : %.texi : %.txi
 	@echo making $@ from $<
 	@./munge-texi \
 	  -d $(TOPDIR)/src/DOCSTRINGS \
 	  -d $(TOPDIR)/scripts/DOCSTRINGS < $< > $@-t
 	@$(simple-move-if-change-rule)
 
-octave.info: $(IMAGES_TXT) $(TEXINFO)
+octave.info: $(IMAGES_TXT) $(TEXINFO) $(EXAMPLE_FILES)
 	-$(MAKEINFO) -I.. -I$(srcdir) -I$(srcdir)/.. $(MAIN_TEXINFO)
 
-octave.dvi: $(IMAGES_EPS) $(TEXINFO)
+octave.dvi: $(IMAGES_EPS) $(TEXINFO) $(EXAMPLE_FILES)
 	-TEXINPUTS="..:$(srcdir):$(srcdir)/..:$(TEXINPUTS):" \
 	  $(UNSETCOMSPEC) $(TEXI2DVI) $(MAIN_TEXINFO)
 
 octave.ps: octave.dvi
 	-dvips -o $@ $<
 
-octave.pdf: $(IMAGES_PDF) $(TEXINFO)
+octave.pdf: $(IMAGES_PDF) $(TEXINFO) $(EXAMPLE_FILES)
 	-TEXINPUTS="..:$(srcdir):$(srcdir)/..:$(TEXINPUTS):" \
 	  $(UNSETCOMSPEC) $(TEXI2PDF) $(MAIN_TEXINFO)
 
 ../../INSTALL.OCTAVE: install.texi
 	rm -f INSTALL
 	-$(MAKEINFO) -D INSTALLONLY \
 	  --no-validate --no-headers --no-split --output INSTALL \
 	  -I.. -I$(srcdir) -I$(srcdir)/.. $<
@@ -133,17 +148,17 @@ octave.pdf: $(IMAGES_PDF) $(TEXINFO)
 
 ../../BUGS: bugs.texi
 	rm -f BUGS
 	-$(MAKEINFO) -D BUGSONLY \
 	  --no-validate --no-headers --no-split --output BUGS \
 	  -I.. -I$(srcdir) -I$(srcdir)/.. $<
 	mv BUGS ../../BUGS
 
-HTML/index.html: $(HTML_IMAGES_PNG) $(TEXINFO)
+HTML/index.html: $(HTML_IMAGES_PNG) $(TEXINFO) $(EXAMPLE_FILES)
 	-$(MAKEINFO) --html --ifinfo --output=HTML -I.. -I$(srcdir) -I$(srcdir)/.. $(MAIN_TEXINFO)
 
 $(HTML_IMAGES_PNG): HTML/%.png : %.png
 	@if [ -d HTML ]; then \
 	  true; \
 	else \
 	  echo "creating HTML directory"; \
 	  mkdir HTML; \
diff --git a/doc/interpreter/dynamic.txi b/doc/interpreter/dynamic.txi
--- a/doc/interpreter/dynamic.txi
+++ b/doc/interpreter/dynamic.txi
@@ -76,27 +76,17 @@ The basic command to build oct-files is 
 call from within octave or from the command line.
 
 @DOCSTRING(mkoctfile)
 
 Consider the short example
 
 @example
 @group
-#include <octave/oct.h>
-
-DEFUN_DLD (helloworld, args, nargout,
-  "Hello World Help String")
-@{
-  int nargin = args.length ();
-  octave_stdout << "Hello World has " << nargin
-        << " input arguments and "
-        << nargout << " output arguments.\n";
-  return octave_value_list ();
-@}
+@verbatiminclude @value{top_srcdir}/examples/helloworld.cc
 @end group
 @end example
 
 This example although short introduces the basics of writing a C++
 function that can be dynamically linked to Octave.  The easiest way to
 make available most of the definitions that might be necessary for an
 oct-file in Octave is to use the @code{#include <octave/oct.h>}
 header.
@@ -272,32 +262,17 @@ majority of the above types.  In additio
 that are of interest only for matrices such as @code{transpose},
 @code{hermitian}, @code{solve}, etc.
 
 The typical way to extract a matrix or array from the input arguments of
 @code{DEFUN_DLD} function is as follows
 
 @example
 @group
-#include <octave/oct.h>
-
-DEFUN_DLD (addtwomatrices, args, , "Add A to B")
-@{
-  int nargin = args.length ();
-  if (nargin != 2)
-    print_usage ();
-  else
-    @{
-      NDArray A = args(0).array_value ();
-      NDArray B = args(1).array_value ();
-      if (! error_state)
-        return octave_value (A + B);
-    @}
-  return octave_value_list ();
-@}
+@verbatiminclude @value{top_srcdir}/examples/addtwomatrices.cc
 @end group
 @end example
 
 To avoid segmentation faults causing Octave to abort, this function
 explicitly checks that there are sufficient arguments available before
 accessing these arguments.  It then obtains two multi-dimensional arrays
 of type @code{NDArray} and adds these together.  Note that the array_value
 method is called without using the @code{is_matrix_type} type, and instead the
@@ -350,48 +325,17 @@ listed below.
 @node Character Strings in Oct-Files
 @subsection Character Strings in Oct-Files
 
 In Octave a character string is just a special @code{Array} class.
 Consider the example 
 
 @example
 @group
-#include <octave/oct.h>
-
-DEFUN_DLD (stringdemo, args, , "String Demo")
-@{
-  int nargin = args.length ();
-  octave_value_list retval;
-
-  if (nargin != 1)
-    print_usage ();
-  else
-    @{
-      charMatrix ch = args(0).char_matrix_value ();
-
-      if (! error_state)
-        @{
-          if (args(0).is_sq_string ())
-            retval(1) = octave_value (ch, true);
-          else
-            retval(1) = octave_value (ch, true, '\'');
-
-          octave_idx_type nr = ch.rows();
-          for (octave_idx_type i = 0; i < nr / 2; i++)
-            @{
-              std::string tmp = ch.row_as_string (i);
-              ch.insert (ch.row_as_string(nr-i-1).c_str(), i, 0);
-              ch.insert (tmp.c_str(), nr-i-1, 0);
-            @}
-          retval(0) = octave_value (ch, true);
-        @}
-    @}
-  return retval;
-@}
+@verbatiminclude @value{top_srcdir}/examples/stringdemo.cc
 @end group
 @end example
 
 An example of the of the use of this function is
 
 @example
 @group
 s0 = ["First String"; "Second String"];
@@ -426,50 +370,35 @@ Note however, that both types of strings
 @code{charNDArray} type, and so when assigning to an
 @code{octave_value}, the type of string should be specified.  For example
 
 @example
 @group
 octave_value_list retval;
 charNDArray c;
 @dots{}
-retval(0) = octave_value (ch, true); // Create a double quoted string
-retval(1) = octave_value (ch, true, '\''); // Create single quoted string
+// Create single quoted string
+retval(1) = octave_value (ch, true, '\'');
+
+// Create a double quoted string
+retval(0) = octave_value (ch, true);
 @end group
 @end example
 
 @node Cell Arrays in Oct-Files
 @subsection Cell Arrays in Oct-Files
 
 Octave's cell type is equally accessible within an oct-files.  A cell
 array is just an array of @code{octave_value}s, and so each element of the cell
 array can then be treated just like any other @code{octave_value}.  A simple
 example is
 
 @example
 @group
-#include <octave/oct.h>
-#include <octave/Cell.h>
-
-DEFUN_DLD (celldemo, args, , "Cell Demo")
-@{
-  octave_value_list retval;
-  int nargin = args.length();
-
-  if (nargin != 1)
-    print_usage ();
-  else
-    @{
-      Cell c = args (0).cell_value ();
-      if (! error_state)
-        for (octave_idx_type i = 0; i < c.nelem (); i++)
-          retval(i) = c.elem (i);
-    @}
-  return retval;
-@}
+@verbatiminclude @value{top_srcdir}/examples/celldemo.cc
 @end group
 @end example
 
 Note that cell arrays are used less often in standard oct-files and so
 the @file{Cell.h} header file must be explicitly included.  The rest of this
 example extracts the @code{octave_value}s one by one from the cell array and
 returns be as individual return arguments.  For example consider
 
@@ -493,52 +422,17 @@ A structure in Octave is map between a n
 their values.  The Standard Template Library @code{map} class is used,
 with the pair consisting of a @code{std::string} and an octave
 @code{Cell} variable.
 
 A simple example demonstrating the use of structures within oct-files is
 
 @example
 @group
-#include <octave/oct.h>
-#include <octave/ov-struct.h>
-
-DEFUN_DLD (structdemo, args, , "Struct demo.")
-@{
-  int nargin = args.length ();
-  octave_value retval;
-
-  if (nargin != 2)
-    print_usage ();
-  else
-    @{
-      Octave_map arg0 = args(0).map_value ();
-      std::string arg1 = args(1).string_value ();
-
-      if (! error_state && arg0.contains (arg1))
-        @{
-          // The following two lines might be written as
-          //    octave_value tmp;
-          //    for (Octave_map::iterator p0 = arg0.begin() ;
-          //        p0 != arg0.end(); p0++ )
-          //      if (arg0.key (p0) == arg1)
-          //        @{
-          //          tmp = arg0.contents (p0) (0);
-          //          break;
-          //        @}
-          // though using seek is more concise.
-          Octave_map::const_iterator p1 = arg0.seek (arg1);
-          octave_value tmp =  arg0.contents( p1 ) (0);
-          Octave_map st;
-          st.assign ("selected", tmp);
-          retval = octave_value (st);
-        @}
-    @}
-  return retval;
-@}
+@verbatiminclude @value{top_srcdir}/examples/structdemo.cc
 @end group
 @end example
 
 An example of its use is
 
 @example
 @group
 x.a = 1; x.b = "test"; x.c = [1, 2];
@@ -600,19 +494,21 @@ similar to Octave's @code{Matrix} class 
 
 @node Array and Sparse Differences
 @subsubsection The Differences between the Array and Sparse Classes
 
 The number of elements in a sparse matrix is considered to be the number
 of non-zero elements rather than the product of the dimensions.  Therefore
 
 @example
-  SparseMatrix sm;
-  @dots{}
-  int nel = sm.nelem ();
+@group
+SparseMatrix sm;
+@dots{}
+int nel = sm.nelem ();
+@end group
 @end example
 
 returns the number of non-zero elements.  If the user really requires the
 number of elements in the matrix, including the non-zero elements, they
 should use @code{numel} rather than @code{nelem}.  Note that for very
 large matrices, where the product of the two dimensions is large that
 the representation of the an unsigned int, then @code{numel} can overflow.
 An example is @code{speye(1e6)} which will create a matrix with a million
@@ -625,42 +521,46 @@ it won't overflow.
 Extreme care must be take with the elem method and the "()" operator,
 which perform basically the same function.  The reason is that if a
 sparse object is non-const, then Octave will assume that a
 request for a zero element in a sparse matrix is in fact a request
 to create this element so it can be filled.  Therefore a piece of
 code like
 
 @example
-  SparseMatrix sm;
-  @dots{}
-  for (int j = 0; j < nc; j++)
-    for (int i = 0; i < nr; i++)
-      std::cerr << " (" << i << "," << j << "): " << sm(i,j)
-                << std::endl;
+@group
+SparseMatrix sm;
+@dots{}
+for (int j = 0; j < nc; j++)
+  for (int i = 0; i < nr; i++)
+    std::cerr << " (" << i << "," << j << "): " << sm(i,j)
+              << std::endl;
+@end group
 @end example
 
 is a great way of turning the sparse matrix into a dense one, and a
 very slow way at that since it reallocates the sparse object at each
 zero element in the matrix.
 
 An easy way of preventing the above from happening is to create a temporary
 constant version of the sparse matrix.  Note that only the container for
 the sparse matrix will be copied, while the actual representation of the
 data will be shared between the two versions of the sparse matrix.  So this
 is not a costly operation.  For example, the above would become
 
 @example
-  SparseMatrix sm;
-  @dots{}
-  const SparseMatrix tmp (sm);
-  for (int j = 0; j < nc; j++)
-    for (int i = 0; i < nr; i++)
-      std::cerr << " (" << i << "," << j << "): " << tmp(i,j)
-                << std::endl;
+@group
+SparseMatrix sm;
+@dots{}
+const SparseMatrix tmp (sm);
+for (int j = 0; j < nc; j++)
+  for (int i = 0; i < nr; i++)
+    std::cerr << " (" << i << "," << j << "): " << tmp(i,j)
+              << std::endl;
+@end group
 @end example
 
 Finally, as the sparse types aren't just represented as a contiguous
 block of memory, the @code{fortran_vec} method of the @code{Array<T>}
 is not available.  It is however replaced by three separate methods
 @code{ridx}, @code{cidx} and @code{data}, that access the raw compressed
 column format that the Octave sparse matrices are stored in.
 Additionally, these methods can be used in a manner similar to @code{elem},
@@ -677,26 +577,29 @@ row and column indexes and the data, and
 Or alternatively, you can create a sparse matrix with the appropriate
 amount of space and then fill in the values.  Both techniques have their
 advantages and disadvantages.
 
 Here is an example of how to create a small sparse matrix with the first
 technique
 
 @example
-  int nz = 4, nr = 3, nc = 4;
-  ColumnVector ridx (nz);
-  ColumnVector cidx (nz);
-  ColumnVector data (nz);
+@group
+int nz = 4, nr = 3, nc = 4;
+
+ColumnVector ridx (nz);
+ColumnVector cidx (nz);
+ColumnVector data (nz);
 
-  ridx(0) = 0; ridx(1) = 0; ridx(2) = 1; ridx(3) = 2;
-  cidx(0) = 0; cidx(1) = 1; cidx(2) = 3; cidx(3) = 3;
-  data(0) = 1; data(1) = 2; data(2) = 3; data(3) = 4;
+ridx(0) = 0; ridx(1) = 0; ridx(2) = 1; ridx(3) = 2;
+cidx(0) = 0; cidx(1) = 1; cidx(2) = 3; cidx(3) = 3;
+data(0) = 1; data(1) = 2; data(2) = 3; data(3) = 4;
 
-  SparseMatrix sm (data, ridx, cidx, nr, nc);
+SparseMatrix sm (data, ridx, cidx, nr, nc);
+@end group
 @end example
 
 @noindent
 which creates the matrix given in section @ref{Storage}.  Note that
 the compressed matrix format is not used at the time of the creation
 of the matrix itself, however it is used internally.
 
 As previously mentioned, the values of the sparse matrix are stored
@@ -709,37 +612,41 @@ that there is a brief time where two cop
 for extremely memory constrained problems this might not be the right
 technique to create the sparse matrix.
 
 The alternative is to first create the sparse matrix with the desired
 number of non-zero elements and then later fill those elements in.  The
 easiest way to do this is
 
 @example
-  int nz = 4, nr = 3, nc = 4;
-  SparseMatrix sm (nr, nc, nz);
-  sm(0,0) = 1; sm(0,1) = 2; sm(1,3) = 3; sm(2,3) = 4;
+@group
+int nz = 4, nr = 3, nc = 4;
+SparseMatrix sm (nr, nc, nz);
+sm(0,0) = 1; sm(0,1) = 2; sm(1,3) = 3; sm(2,3) = 4;
+@end group
 @end example
 
 That creates the same matrix as previously.  Again, although it is not
 strictly necessary, it is significantly faster if the sparse matrix is
 created in this manner that the elements are added in column-major
 ordering.  The reason for this is that if the elements are inserted
 at the end of the current list of known elements then no element
 in the matrix needs to be moved to allow the new element to be
 inserted.  Only the column indexes need to be updated.
 
 There are a few further points to note about this technique of creating
 a sparse matrix.  Firstly, it is possible to create a sparse matrix
 with fewer elements than are actually inserted in the matrix.  Therefore
 
 @example
-  int nz = 4, nr = 3, nc = 4;
-  SparseMatrix sm (nr, nc, 0);
-  sm(0,0) = 1; sm(0,1) = 2; sm(1,3) = 3; sm(2,3) = 4;
+@group
+int nz = 4, nr = 3, nc = 4;
+SparseMatrix sm (nr, nc, 0);
+sm(0,0) = 1; sm(0,1) = 2; sm(1,3) = 3; sm(2,3) = 4;
+@end group
 @end example
 
 @noindent 
 is perfectly valid.  However it is a very bad idea.  The reason is that
 as each new element is added to the sparse matrix the space allocated
 to it is increased by reallocating the memory.  This is an expensive
 operation, that will significantly slow this means of creating a sparse
 matrix.  Furthermore, it is possible to create a sparse matrix with
@@ -755,105 +662,108 @@ deallocate the unused storage, but it ca
 from the matrix.  The removal of zero elements from the matrix is
 controlled by setting the argument of the @dfn{maybe_compress} function
 to be @samp{true}.  However, the cost of removing the zeros is high because it
 implies resorting the elements.  Therefore, if possible it is better
 is the user doesn't add the zeros in the first place.  An example of
 the use of @dfn{maybe_compress} is
 
 @example
+@group
   int nz = 6, nr = 3, nc = 4;
+
   SparseMatrix sm1 (nr, nc, nz);
   sm1(0,0) = 1; sm1(0,1) = 2; sm1(1,3) = 3; sm1(2,3) = 4;
   sm1.maybe_compress ();  // No zero elements were added
 
   SparseMatrix sm2 (nr, nc, nz);
   sm2(0,0) = 1; sm2(0,1) = 2; sm(0,2) = 0; sm(1,2) = 0;
   sm1(1,3) = 3; sm1(2,3) = 4;
   sm2.maybe_compress (true);  // Zero elements were added
+@end group
 @end example
 
 The use of the @dfn{maybe_compress} function should be avoided if
 possible, as it will slow the creation of the matrices.
 
 A third means of creating a sparse matrix is to work directly with
 the data in compressed row format.  An example of this technique might
 be
 
 @c Note the @verbatim environment is a relatively new addition to texinfo.
 @c Therefore use the @example environment and replace @, with @@,
 @c { with @{, etc
 
 @example
-  octave_value arg;
-
-  @dots{}
-
-  int nz = 6, nr = 3, nc = 4;   // Assume we know the max no nz
-  SparseMatrix sm (nr, nc, nz);
-  Matrix m = arg.matrix_value ();
+@group
+octave_value arg;
+@dots{}
+int nz = 6, nr = 3, nc = 4;   // Assume we know the max no nz
+SparseMatrix sm (nr, nc, nz);
+Matrix m = arg.matrix_value ();
 
-  int ii = 0;
-  sm.cidx (0) = 0;
-  for (int j = 1; j < nc; j++)
-    @{
-      for (int i = 0; i < nr; i++)
-        @{
-          double tmp = foo (m(i,j));
-          if (tmp != 0.)
-            @{
-              sm.data(ii) = tmp;
-              sm.ridx(ii) = i;
-              ii++;
-            @}
-        @}
-      sm.cidx(j+1) = ii;
-   @}
-  sm.maybe_compress ();  // If don't know a-priori the final no of nz.
+int ii = 0;
+sm.cidx (0) = 0;
+for (int j = 1; j < nc; j++)
+  @{
+    for (int i = 0; i < nr; i++)
+      @{
+        double tmp = foo (m(i,j));
+        if (tmp != 0.)
+          @{
+            sm.data(ii) = tmp;
+            sm.ridx(ii) = i;
+            ii++;
+          @}
+      @}
+    sm.cidx(j+1) = ii;
+ @}
+sm.maybe_compress ();  // If don't know a-priori the final no of nz.
+@end group
 @end example
 
 @noindent
 which is probably the most efficient means of creating the sparse matrix.
 
 Finally, it might sometimes arise that the amount of storage initially
 created is insufficient to completely store the sparse matrix.  Therefore,
 the method @code{change_capacity} exists to reallocate the sparse memory.
 The above example would then be modified as
 
 @example
-  octave_value arg;
-
-  @dots{}
-
-  int nz = 6, nr = 3, nc = 4;   // Assume we know the max no nz
-  SparseMatrix sm (nr, nc, nz);
-  Matrix m = arg.matrix_value ();
+@group
+octave_value arg;
+@dots{}
+int nz = 6, nr = 3, nc = 4;   // Assume we know the max no nz
+SparseMatrix sm (nr, nc, nz);
+Matrix m = arg.matrix_value ();
 
-  int ii = 0;
-  sm.cidx (0) = 0;
-  for (int j = 1; j < nc; j++)
-    @{
-      for (int i = 0; i < nr; i++)
-        @{
-          double tmp = foo (m(i,j));
-          if (tmp != 0.)
-            @{
-              if (ii == nz)
-                @{
-                  nz += 2;   // Add 2 more elements
-                  sm.change_capacity (nz);
-                @}
-              sm.data(ii) = tmp;
-              sm.ridx(ii) = i;
-              ii++;
-            @}
-        @}
-      sm.cidx(j+1) = ii;
-   @}
-  sm.maybe_mutate ();  // If don't know a-priori the final no of nz.
+int ii = 0;
+sm.cidx (0) = 0;
+for (int j = 1; j < nc; j++)
+  @{
+    for (int i = 0; i < nr; i++)
+      @{
+        double tmp = foo (m(i,j));
+        if (tmp != 0.)
+          @{
+            if (ii == nz)
+              @{
+                nz += 2;   // Add 2 more elements
+                sm.change_capacity (nz);
+              @}
+            sm.data(ii) = tmp;
+            sm.ridx(ii) = i;
+            ii++;
+          @}
+      @}
+    sm.cidx(j+1) = ii;
+ @}
+sm.maybe_mutate ();  // If don't know a-priori the final no of nz.
+@end group
 @end example
 
 Note that both increasing and decreasing the number of non-zero elements in
 a sparse matrix is expensive, as it involves memory reallocation.  Also as
 parts of the matrix, though not its entirety, exist as the old and new copy
 at the same time, additional memory is needed.  Therefore if possible this
 should be avoided.
 
@@ -862,27 +772,27 @@ should be avoided.
 
 Most of the same operators and functions on sparse matrices that are
 available from the Octave are equally available with oct-files.
 The basic means of extracting a sparse matrix from an @code{octave_value}
 and returning them as an @code{octave_value}, can be seen in the
 following example
 
 @example
-   octave_value_list retval;
-
-   SparseMatrix sm = args(0).sparse_matrix_value ();
-   SparseComplexMatrix scm = args(1).sparse_complex_matrix_value ();
-   SparseBoolMatrix sbm = args(2).sparse_bool_matrix_value ();
+@group
+octave_value_list retval;
 
-   @dots{}
-
-   retval(2) = sbm;
-   retval(1) = scm;
-   retval(0) = sm;
+SparseMatrix sm = args(0).sparse_matrix_value ();
+SparseComplexMatrix scm = args(1).sparse_complex_matrix_value ();
+SparseBoolMatrix sbm = args(2).sparse_bool_matrix_value ();
+@dots{}
+retval(2) = sbm;
+retval(1) = scm;
+retval(0) = sm;
+@end group
 @end example
 
 The conversion to an octave-value is handled by the sparse
 @code{octave_value} constructors, and so no special care is needed.
 
 @node Accessing Global Variables in Oct-Files
 @subsection Accessing Global Variables in Oct-Files
 
@@ -892,41 +802,17 @@ the support functions @code{get_global_v
 @code{set_global_value}.  @code{get_global_value} takes two arguments,
 the first is a string representing the variable name to obtain.  The
 second argument is a boolean argument specifying what to do in the case
 that no global variable of the desired name is found.  An example of the
 use of these two functions is
 
 @example
 @group
-#include <octave/oct.h>
-
-DEFUN_DLD (globaldemo, args, , "Global demo.")
-@{
-  int nargin = args.length();
-  octave_value retval;
-
-  if (nargin != 1)
-    print_usage ();
-  else
-    @{
-      std::string s = args(0).string_value ();
-      if (! error_state)
-        @{
-          octave_value tmp = get_global_value (s, true);
-          if (tmp.is_defined ())
-            retval = tmp;
-          else
-            retval = "Global variable not found";
-
-          set_global_value ("a", 42.0);
-        @}
-    @}
-  return retval;
-@}
+@verbatiminclude @value{top_srcdir}/examples/globaldemo.cc
 @end group
 @end example
 
 An example of its use is
 
 @example
 @group
 global a b
@@ -959,49 +845,17 @@ be passed as one of
 @item String
 @end enumerate
 
 The example below demonstrates an example that accepts all four means of
 passing a function to an oct-file.
 
 @example
 @group
-#include <octave/oct.h>
-#include <octave/parse.h>
-
-DEFUN_DLD (funcdemo, args, nargout, "Function Demo")
-@{
-  int nargin = args.length();
-  octave_value_list retval;
-
-  if (nargin < 2)
-    print_usage ();
-  else
-    @{
-      octave_value_list newargs;
-      for (octave_idx_type i = nargin - 1; i > 0; i--)
-        newargs (i - 1) = args(i);
-      if (args(0).is_function_handle () ||
-          args(0).is_inline_function ())
-        @{
-          octave_function *fcn = args(0).function_value ();
-          if (! error_state)
-            retval = feval (fcn, newargs, nargout);
-        @}
-      else if (args(0).is_string ())
-        @{
-          std::string fcn = args (0).string_value ();
-          if (! error_state)
-            retval = feval (fcn, newargs, nargout);
-        @}
-      else
-        error ("funcdemo: expected string, inline or function handle");
-    @}
-  return retval;
-@}
+@verbatiminclude @value{top_srcdir}/examples/funcdemo.cc
 @end group
 @end example
 
 The first argument to this demonstration is the user supplied function
 and the following arguments are all passed to the user function.
 
 @example
 @group
@@ -1020,25 +874,25 @@ funcdemo (@@atan2, 1, 1)
 
 When the user function is passed as a string, the treatment of the
 function is different.  In some cases it is necessary to always have the
 user supplied function as an @code{octave_function} object.  In that
 case the string argument can be used to create a temporary function like
 
 @example
 @group
-  std::octave fcn_name = unique_symbol_name ("__fcn__");
-  std::string fname = "function y = ";
-  fname.append (fcn_name);
-  fname.append ("(x) y = ");
-  fcn = extract_function (args(0), "funcdemo", fcn_name,
-                          fname, "; endfunction");
-  @dots{}
-  if (fcn_name.length ())
-    clear_function (fcn_name);
+std::octave fcn_name = unique_symbol_name ("__fcn__");
+std::string fname = "function y = ";
+fname.append (fcn_name);
+fname.append ("(x) y = ");
+fcn = extract_function (args(0), "funcdemo", fcn_name,
+                        fname, "; endfunction");
+@dots{}
+if (fcn_name.length ())
+  clear_function (fcn_name);
 @end group
 @end example
 
 There are two important things to know in this case.  The number of input
 arguments to the user function is fixed, and in the above is a single
 argument, and secondly to avoid leaving the temporary function in the
 Octave symbol table it should be cleared after use.
 
@@ -1090,83 +944,26 @@ there is potentially an overhead in doin
 is used with code that calls @code{XSTOP}, Octave can generate a
 segmentation fault.
 
 An example of the inclusion of a Fortran function in an oct-file is
 given in the following example, where the C++ wrapper is
 
 @example
 @group
-#include <octave/oct.h>
-#include <octave/f77-fcn.h>
-
-extern "C"
-@{
-  F77_RET_T
-  F77_FUNC (fortsub, FORTSUB)
-        (const int&, double*, F77_CHAR_ARG_DECL
-         F77_CHAR_ARG_LEN_DECL);
-@}
-
-DEFUN_DLD (fortdemo, args, , "Fortran Demo.")
-@{
-  octave_value_list retval;
-  int nargin = args.length();
-  if (nargin != 1)
-    print_usage ();
-  else
-    @{
-      NDArray a = args(0).array_value ();
-      if (! error_state)
-        @{
-          double *av = a.fortran_vec ();
-          octave_idx_type na = a.nelem ();
-          OCTAVE_LOCAL_BUFFER (char, ctmp, 128);
-
-          F77_XFCN (fortsub, FORTSUB, (na, av, ctmp F77_CHAR_ARG_LEN (128)));
-
-          if (f77_exception_encountered)
-            error ("fortdemo: error in fortran");
-          else
-            @{
-              retval(1) = std::string (ctmp);
-              retval(0) = a;
-            @}
-        @}
-    @}
-  return retval;
-@}
+@verbatiminclude @value{top_srcdir}/examples/fortdemo.cc
 @end group
 @end example
 
 @noindent
 and the fortran function is
 
 @example
 @group
-      subroutine fortsub (n, a, s)
-      implicit none
-      character*(*) s
-      real*8 a(*)
-      integer*4 i, n, ioerr
-      do i = 1, n
-         if (a (i) .eq. 0d0) then
-            call xstopx ('fortsub:divide by zero')
-         else
-            a (i) = 1d0 / a (i)
-         end if
-      end do
-      write (unit = s, fmt = '(a,i3,a,a)', iostat = ioerr)
-     $       'There are ', n, ' values in the input vector',
-     $       char(0)
-      if (ioerr .ne. 0) then
-         call xstopx ('fortsub: error writing string')
-      end if
-      return
-      end
+@verbatiminclude @value{top_srcdir}/examples/fortsub.f
 @end group
 @end example
 
 This example demonstrates most of the features needed to link to an
 external Fortran function, including passing arrays and strings, as well
 as exception handling.  An example of the behavior of this function is
 
 @example
@@ -1210,21 +1007,21 @@ Another important feature of Octave is i
 typing @kbd{Control-C} even during calculations.  This ability is based on the
 C++ exception handler, where memory allocated by the C++ new/delete
 methods are automatically released when the exception is treated.  When
 writing an oct-file, to allow Octave to treat the user typing @kbd{Control-C},
 the @code{OCTAVE_QUIT} macro is supplied.  For example
 
 @example
 @group
-  for (octave_idx_type i = 0; i < a.nelem (); i++)
-    @{
-      OCTAVE_QUIT;
-      b.elem(i) = 2. * a.elem(i);
-    @}
+for (octave_idx_type i = 0; i < a.nelem (); i++)
+  @{
+    OCTAVE_QUIT;
+    b.elem(i) = 2. * a.elem(i);
+  @}
 @end group
 @end example
 
 The presence of the @code{OCTAVE_QUIT} macro in the inner loop allows Octave to
 treat the user request with the @kbd{Control-C}.  Without this macro, the user
 must either wait for the function to return before the interrupt is
 processed, or press @kbd{Control-C} three times to force Octave to exit.
 
@@ -1234,19 +1031,19 @@ loops that are known to be small it migh
 
 When creating an oct-file that uses an external libraries, the function
 might spend a significant portion of its time in the external
 library.  It is not generally possible to use the @code{OCTAVE_QUIT} macro in
 this case.  The alternative in this case is
 
 @example
 @group
-  BEGIN_INTERRUPT_IMMEDIATELY_IN_FOREIGN_CODE;
-  @dots{}  some code that calls a "foreign" function @dots{}
-  END_INTERRUPT_IMMEDIATELY_IN_FOREIGN_CODE;
+BEGIN_INTERRUPT_IMMEDIATELY_IN_FOREIGN_CODE;
+@dots{}  some code that calls a "foreign" function @dots{}
+END_INTERRUPT_IMMEDIATELY_IN_FOREIGN_CODE;
 @end group
 @end example
 
 The disadvantage of this is that if the foreign code allocates any
 memory internally, then this memory might be lost during an interrupt,
 without being deallocated.  Therefore, ideally Octave itself should
 allocate any memory that is needed by the foreign code, with either the
 fortran_vec method or the @code{OCTAVE_LOCAL_BUFFER} macro.
@@ -1254,47 +1051,17 @@ fortran_vec method or the @code{OCTAVE_L
 The Octave unwind_protect mechanism (@ref{The unwind_protect Statement})
 can also be used in oct-files.  In conjunction with the exception
 handling of Octave, it is important to enforce that certain code is run
 to allow variables, etc to be restored even if an exception occurs.  An
 example of the use of this mechanism is
 
 @example
 @group
-#include <octave/oct.h>
-#include <octave/unwind-prot.h>
-
-void
-err_hand (const char *fmt, ...)
-@{
-  // Do nothing!!
-@}
-
-DEFUN_DLD (unwinddemo, args, nargout, "Unwind Demo")
-@{
-  int nargin = args.length();
-  octave_value retval;
-  if (nargin < 2)
-    print_usage ();
-  else
-    @{
-      NDArray a = args(0).array_value ();
-      NDArray b = args(1).array_value ();
-
-      if (! error_state)
-        @{
-          unwind_protect::begin_frame ("Funwinddemo");
-          unwind_protect_ptr (current_liboctave_warning_handler);
-          set_liboctave_warning_handler (err_hand);
-          retval = octave_value (quotient (a, b));
-          unwind_protect::run_frame ("Funwinddemo");
-        @}
-    @}
-  return retval;
-@}
+@verbatiminclude @value{top_srcdir}/examples/unwinddemo.cc
 @end group
 @end example
 
 As can be seen in the example
 
 @example
 @group
 unwinddemo (1, 0)
@@ -1359,26 +1126,17 @@ with Octave is that the header file "mat
 through the inclusion of "mex.h".  This is to avoid a conflict with the
 Octave file "Matrix.h" with operating systems and compilers that don't
 distinguish between filenames in upper and lower case
 
 Consider the short example
 
 @example
 @group
-#include "mex.h"
-
-void
-mexFunction (int nlhs, mxArray *plhs[], int nrhs, const mxArray *prhs[])
-@{
-  mxArray *v = mxCreateDoubleMatrix (1, 1, mxREAL);
-  double *data = mxGetPr (v);
-  *data = 1.23456789;
-  plhs[0] = v;
-@}
+@verbatiminclude @value{top_srcdir}/examples/firstmexdemo.c
 @end group
 @end example
 
 This simple example demonstrates the basics of writing a mex-file.
 
 WRITE ME
 
 @node Structures with Mex-Files
diff --git a/examples/Makefile.in b/examples/Makefile.in
--- a/examples/Makefile.in
+++ b/examples/Makefile.in
@@ -22,16 +22,17 @@ INSTALL_PROGRAM = @INSTALL_PROGRAM@
 INSTALL_SCRIPT = @INSTALL_SCRIPT@
 INSTALL_DATA = @INSTALL_DATA@
 
 SCRIPTS = info-emacs-info info-emacs-octave-help
 
 SOURCES = \
   addtwomatrices.cc \
   celldemo.cc \
+  firstmexdemo.c \
   fortdemo.cc \
   fortsub.f \
   funcdemo.cc \
   globaldemo.cc \
   hello.cc \
   helloworld.cc \
   make_int.cc \
   octave.desktop.in \
diff --git a/examples/firstmexdemo.c b/examples/firstmexdemo.c
new file mode 100644
--- /dev/null
+++ b/examples/firstmexdemo.c
@@ -0,0 +1,10 @@
+#include "mex.h"
+
+void
+mexFunction (int nlhs, mxArray *plhs[], int nrhs, const mxArray *prhs[])
+{
+  mxArray *v = mxCreateDoubleMatrix (1, 1, mxREAL);
+  double *data = mxGetPr (v);
+  *data = 1.23456789;
+  plhs[0] = v;
+}
