# HG changeset patch
# User jwe
# Date 780160748 0
#      Wed Sep 21 15:19:08 1994 +0000
# Node ID 54a6858bc7e7206f0ebcd95600bd9e49feb817d9
# Parent  43fc5a13be237247048cc833c2b766deb8650db5
[project @ 1994-09-21 15:17:38 by jwe]

diff --git a/src/dynamic-ld.cc b/src/dynamic-ld.cc
--- a/src/dynamic-ld.cc
+++ b/src/dynamic-ld.cc
@@ -37,16 +37,17 @@ extern "C"
 #include <kpathsea/pathsearch.h>
 }
 
 #include "dynamic-ld.h"
 #include "tree-const.h"
 #include "user-prefs.h"
 #include "variables.h"
 #include "defaults.h"
+#include "dirfns.h"
 #include "octave.h"
 #include "utils.h"
 #include "error.h"
 
 typedef builtin_function * (*Octave_builtin_fcn_struct_fcn)(void);
 
 // XXX FIXME XXX -- should this list be in a user-level variable,
 // with default taken from the environment?
@@ -98,29 +99,35 @@ mangle_octave_oct_file_name (const char 
 
 static void
 octave_dld_init (void)
 {
   static int initialized = 0;
 
   if (! initialized)
     {
-      char *full_path = dld_find_executable (raw_prog_name);
+      static char *prog = make_absolute (raw_prog_name,
+					 the_current_working_directory);
+
+      char *full_path = dld_find_executable (prog);
 
       if (full_path)
 	{
 	  int status = dld_init (full_path);
 
 	  if (status != 0)
 	    error ("failed to load symbols from `%s'", full_path);
 	  else
 	    initialized = 1;
 	}
       else
-	error ("octave_dld_init: can't find full path to `%s'", prog_name);
+	{
+	  error ("octave_dld_init: can't find full path to `%s'",
+		 raw_prog_name);
+	}
     }
 }
 
 static void
 octave_list_undefined_symbols (ostream& os)
 {
   char **list = dld_list_undefined_sym ();
 
diff --git a/src/octave.cc b/src/octave.cc
--- a/src/octave.cc
+++ b/src/octave.cc
@@ -61,16 +61,17 @@ extern "C"
 #include "utils.h"
 #include "input.h"
 #include "pager.h"
 #include "lex.h"
 #include "help.h"
 #include "octave.h"
 #include "parse.h"
 #include "defaults.h"
+#include "user-prefs.h"
 #include "procstream.h"
 #include "unwind-prot.h"
 #include "octave-hist.h"
 #include "builtins.h"
 #include "version.h"
 #include "file-io.h"
 #include "sysdep.h"
 #include "defun.h"
@@ -414,39 +415,43 @@ clean_up_and_exit (int retval)
 
 static void
 print_version_and_exit (void)
 {
   cout << "octave, version " << version_string << "\n";
   exit (0);
 }
 
+static void
+initialize_error_handlers ()
+{
+  set_Complex_error_handler (octave_Complex_error_handler);
+
+  set_liboctave_error_handler (error);
+}
+
 // You guessed it.
 
 int
 main (int argc, char **argv)
 {
-// Allow for system dependent initialization.  See sysdep.cc for more
-// details.
+// The order of these calls is important, and initialize globals must
+// come before the options are processed because some command line
+// options override defaults.
+
+  init_user_prefs ();
+
+  initialize_pager ();
+
   sysdep_init ();
 
-// This is not really the right place to do this...
-  set_Complex_error_handler (octave_Complex_error_handler);
-
-// Or this, probably...
-  set_liboctave_error_handler (error);
+  initialize_error_handlers ();
 
-// Do this first, since some command line arguments may override the
-// defaults.
   initialize_globals (argv[0]);
 
-// Initialize dynamic linking.  This might not do anything.  Must
-// happen after initializing raw_prog_name.
-  init_dynamic_linker ();
-
   int optc;
   while ((optc = getopt_long (argc, argv, short_opts, long_opts, 0)) != EOF)
     {
       switch (optc)
 	{
 	case 'd':
 	  yydebug++;
 	  break;
@@ -485,30 +490,33 @@ main (int argc, char **argv)
 
 #if defined (HAVE_ATEXIT) || (HAVE_ON_EXIT)
 // Make sure we clean up when we exit.  If we don't have atexit or
 // on_exit, we're going to leave some junk files around if we exit
 // abnormally.
   atexit (cleanup_tmp_files);
 #endif
 
-  initialize_pager ();
+// These can come after command line args since none of them set any
+// defaults that might be changed by command line options.
 
   install_signal_handlers ();
 
   initialize_history ();
 
   initialize_file_io ();
 
   initialize_symbol_tables ();  
 
   install_builtins ();
 
   initialize_readline ();
 
+  init_dynamic_linker ();
+
   if (! inhibit_startup_message)
     cout << "Octave, version " << version_string
 	 << ".  Copyright (C) 1992, 1993, 1994 John W. Eaton.\n"
 	 << "This is free software with ABSOLUTELY NO WARRANTY.\n"
 	 << "For details, type `warranty'.\n" << endl;
 
   if (read_init_files)
     {
