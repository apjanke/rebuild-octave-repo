# HG changeset patch
# User Michael Goffioul <michael.goffioul@gmail.com>
# Date 1369095439 14400
#      Mon May 20 20:17:19 2013 -0400
# Branch classdef
# Node ID 50c8831878d288f1812a48671892519c6a57292c
# Parent  1c45e22fc444f84f9154930a6375589427724a62
Implement multilevel subsasgn for scalar objects.

* libinterp/octave-value/ov-classdef.cc (cdef_object_scalar::subsasgn):
Implement assignment for multilevel indexing.
* test/classdef/classdef.tst: Remove expected failure for multilevel
property indexing/assignment.

diff --git a/libinterp/octave-value/ov-classdef.cc b/libinterp/octave-value/ov-classdef.cc
--- a/libinterp/octave-value/ov-classdef.cc
+++ b/libinterp/octave-value/ov-classdef.cc
@@ -1120,33 +1120,57 @@ cdef_object_scalar::subsasgn (const std:
           std::string name = (idx.front ())(0).string_value ();
 
           if (! error_state)
             {
               cdef_property prop = cls.find_property (name);
 
               if (prop.ok ())
                 {
-                  if (type.length () == 1)
+                  if (prop.is_constant ())
+                    error ("subsasgn: cannot assign constant property: %s",
+                           name.c_str ());
+                  else
                     {
                       refcount++;
 
                       cdef_object obj (this);
 
-                      prop.set_value (obj, rhs, true, "subsasgn");
-
-                      if (! error_state)
-                        retval = to_ov (obj);
-                    }
-                  else
-                    {
-                    }
-
-                  if (! error_state)
-                    {
+                      if (type.length () == 1)
+                        {
+                          prop.set_value (obj, rhs, true, "subsasgn");
+
+                          if (! error_state)
+                            retval = to_ov (obj);
+                        }
+                      else
+                        {
+                          octave_value val = 
+                            prop.get_value (obj, true, "subsasgn");
+
+                          if (! error_state)
+                            {
+                              std::list<octave_value_list> args (idx);
+
+                              args.erase (args.begin ());
+
+                              val = val.assign (octave_value::op_asn_eq,
+                                                type.substr (1), args, rhs);
+
+                              if (! error_state)
+                                {
+                                  if (val.class_name () != "object"
+                                      || ! to_cdef (val).is_handle_object ())
+                                    prop.set_value (obj, val, true, "subsasgn");
+
+                                  if (! error_state)
+                                    retval = to_ov (obj);
+                                }
+                            }
+                        }
                     }
                 }
               else
                 error ("subsasgn: unknown property: %s", name.c_str ());
             }
         }
       break;
 
diff --git a/test/classdef/classdef.tst b/test/classdef/classdef.tst
--- a/test/classdef/classdef.tst
+++ b/test/classdef/classdef.tst
@@ -62,12 +62,12 @@
 %!error <property `frequency' is not constant> foo_static_method_constant_property.frequency
 %!error <method `cosine' is not static> foo_static_method_constant_property.cosine
 %!test
 %! obj = foo_static_method_constant_property;
 %! obj.frequency = 10;
 %! assert (obj.cosine (0.1), cos (2 * pi * 10 * 0.1), eps ())
 %! assert (obj.sine (0.1), sin (2 * pi * 10 * 0.1), eps ())
 
-%!xtest
+%!test
 %! obj = foo_method_changes_property_size (3);
 %! obj = obj.move_element_to_end (2);
 %! assert (obj.element, [1 3 2])
