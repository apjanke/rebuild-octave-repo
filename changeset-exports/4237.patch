# HG changeset patch
# User jwe
# Date 1040786078 0
#      Wed Dec 25 03:14:38 2002 +0000
# Node ID 9c8034434982735ae77851deb6e2ad9b4ca96043
# Parent  a01ea6c855a3d6eed14392984b11ddde9eaa91d7
[project @ 2002-12-25 03:14:37 by jwe]

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,10 +1,15 @@
 2002-12-24  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
+	* parse.y (begin_obj_idx): Increment
+	lexer_flags.looking_at_object_index.
+	(postfix_expr): Decrement it as appropriate here.
+	* lex.h (lexical_feedback::looking_at_object_index): Now int.
+
 	* parse.y (postfix_expr): Reset	lexer_flags.looking_at_object_index
 	in () and {} cases too.
 
 	* ov-usr-fcn.cc (clear_symbol_table): Clear variables only.
 
 2002-12-21  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* pt-arg-list.cc (indexed_object, indexed_position):
diff --git a/src/lex.h b/src/lex.h
--- a/src/lex.h
+++ b/src/lex.h
@@ -157,18 +157,18 @@ public:
 
   // TRUE means we're parsing the parameter list for a function.
   bool looking_at_parameter_list;
 
   // TRUE means we're parsing a matrix or the left hand side of
   // multi-value assignment statement.
   bool looking_at_matrix_or_assign_lhs;
 
-  // TRUE means we're parsing an indexing operation for an object.
-  bool looking_at_object_index;
+  // Nonzero means we're parsing an indexing operation for an object.
+  int looking_at_object_index;
 
   // GAG.  Stupid kludge so that [[1,2][3,4]] will work.
   bool do_comma_insert;
 
   // TRUE means we think we are looking at a set command.
   bool doing_set;
 
   // TRUE means we're looking at the range part of a plot command.
diff --git a/src/lex.l b/src/lex.l
--- a/src/lex.l
+++ b/src/lex.l
@@ -2541,17 +2541,17 @@ lexical_feedback::init (void)
   looking_at_return_list = false;
   looking_at_parameter_list = false;
 
   // Not parsing a matrix or the left hand side of multi-value
   // assignment statement.
   looking_at_matrix_or_assign_lhs = false;
 
   // Not parsing an object index.
-  looking_at_object_index = false;
+  looking_at_object_index = 0;
 
   // Next token can be identifier.
   cant_be_identifier = false;
 
   // No need to do comma insert or convert spaces to comma at
   // beginning of input. 
   convert_spaces_to_comma = true;
   do_comma_insert = false;
diff --git a/src/parse.y b/src/parse.y
--- a/src/parse.y
+++ b/src/parse.y
@@ -701,40 +701,40 @@ arg_list	: expression
 		  }
 		;
 
 indirect_ref_op	: '.'
 		  { lexer_flags.looking_at_indirect_ref = true; }
 		;
 
 begin_obj_idx	: // empty
-		  { lexer_flags.looking_at_object_index = true; }
+		  { lexer_flags.looking_at_object_index++; }
 		;
 
 postfix_expr	: primary_expr
 		  { $$ = $1; }
 		| postfix_expr '(' begin_obj_idx ')'
 		  {
 		    $$ = make_index_expression ($1, 0, '(');
-		    lexer_flags.looking_at_object_index = false;
+		    lexer_flags.looking_at_object_index--;
 		  }
 		| postfix_expr '(' begin_obj_idx arg_list ')'
 		  {
 		    $$ = make_index_expression ($1, $4, '(');
-		    lexer_flags.looking_at_object_index = false;
+		    lexer_flags.looking_at_object_index--;
 		  }
 		| postfix_expr '{' begin_obj_idx '}'
 		  {
 		    $$ = make_index_expression ($1, 0, '{');
-		    lexer_flags.looking_at_object_index = false;
+		    lexer_flags.looking_at_object_index--;
 		  }
 		| postfix_expr '{' begin_obj_idx arg_list '}'
 		  {
 		    $$ = make_index_expression ($1, $4, '{');
-		    lexer_flags.looking_at_object_index = false;
+		    lexer_flags.looking_at_object_index--;
 		  }
 		| postfix_expr PLUS_PLUS
 		  { $$ = make_postfix_op (PLUS_PLUS, $1, $2); }
 		| postfix_expr MINUS_MINUS
 		  { $$ = make_postfix_op (MINUS_MINUS, $1, $2); }
 		| postfix_expr QUOTE
 		  { $$ = make_postfix_op (QUOTE, $1, $2); }
 		| postfix_expr TRANSPOSE
