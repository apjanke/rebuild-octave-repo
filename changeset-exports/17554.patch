# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1380825211 14400
#      Thu Oct 03 14:33:31 2013 -0400
# Node ID f0d21e7d4653a0837566018c32e2be45898b637a
# Parent  2d01e20abd85929b31c98d69daf2357726175565
avoid Cell arrays in usr_transfer classes

* urlwrite.cc (Furlwrite, Furlread): Require property value pairs to
be passed as a cell array of character strings.  Extract as
Array<std::string>.
(base_url_transfer::base_url_transfer, curl_transfer::curl_transfer,
curl_transfer::form_query_string, url_transfer::url_transfer):
Accept Array<std::string> for parameters instead of Cell object.

diff --git a/libinterp/dldfcn/urlwrite.cc b/libinterp/dldfcn/urlwrite.cc
--- a/libinterp/dldfcn/urlwrite.cc
+++ b/libinterp/dldfcn/urlwrite.cc
@@ -77,17 +77,18 @@ public:
   base_url_transfer (const std::string& host_arg,
                      const std::string& /* user_arg */,
                      const std::string& /* passwd */)
     : count (1), host (host_arg), userpwd (), valid (false),
       ascii_mode (false), ok (true), errmsg () { }
 
   base_url_transfer (const std::string& /* url */,
                      const std::string& /* method */,
-                     const Cell& /* param */, std::ostream& /* os */)
+                     const Array<std::string>& /* param */,
+                     std::ostream& /* os */)
     : count (1), host (), userpwd (), valid (false), ascii_mode (false),
       ok (true), errmsg () { }
 
   virtual ~base_url_transfer (void) { }
 
   bool is_valid (void) const { return valid; }
 
   bool good (void) const { return valid && ok; }
@@ -406,17 +407,17 @@ public:
     std::string url ("ftp://" + host_arg);
     SETOPT (CURLOPT_URL, url.c_str ());
 
     // Setup the link, with no transfer.
     perform ();
   }
 
   curl_transfer (const std::string& url, const std::string& method,
-                 const Cell& param, std::ostream& os)
+                 const Array<std::string>& param, std::ostream& os)
     : base_url_transfer (url, method, param, os),
       curl (curl_easy_init ()), errnum ()
   {
     if (curl)
       valid = true;
     else
       {
         errmsg = "can not create curl object";
@@ -818,24 +819,24 @@ private:
 
     SETOPT (CURLOPT_NOPROGRESS, true);
     SETOPT (CURLOPT_FAILONERROR, true);
 
     SETOPT (CURLOPT_POSTQUOTE, 0);
     SETOPT (CURLOPT_QUOTE, 0);
   }
 
-  std::string form_query_string (const Cell& param)
+  std::string form_query_string (const Array<std::string>& param)
   {
     std::ostringstream query;
 
     for (int i = 0; i < param.numel (); i += 2)
       {
-        std::string name = param(i).string_value ();
-        std::string text = param(i+1).string_value ();
+        std::string name = param(i);
+        std::string text = param(i+1);
 
         // Encode strings.
         char *enc_name = curl_easy_escape (curl, name.c_str (),
                                            name.length ());
         char *enc_text = curl_easy_escape (curl, text.c_str (),
                                            text.length ());
 
         query << enc_name << "=" << enc_text;
@@ -887,17 +888,17 @@ public:
     : rep (new REP_CLASS (host, user, passwd))
   {
 #if !defined (HAVE_CURL)
     disabled_error ();
 #endif
   }
 
   url_transfer (const std::string& url, const std::string& method,
-                const Cell& param, std::ostream& os)
+                const Array<std::string>& param, std::ostream& os)
     : rep (new REP_CLASS (url, method, param, os))
   {
 #if !defined (HAVE_CURL)
     disabled_error ();
 #endif
   }
 
 #undef REP_CLASS
@@ -1290,17 +1291,17 @@ urlwrite (\"http://www.google.com/search
 
   if (error_state)
     {
       error ("urlwrite: LOCALFILE must be a character string");
       return retval;
     }
 
   std::string method;
-  Cell param; // empty cell array
+  Array<std::string> param;
 
   if (nargin == 4)
     {
       method = args(2).string_value ();
 
       if (error_state)
         {
           error ("urlwrite: METHOD must be \"get\" or \"post\"");
@@ -1308,21 +1309,21 @@ urlwrite (\"http://www.google.com/search
         }
 
       if (method != "get" && method != "post")
         {
           error ("urlwrite: METHOD must be \"get\" or \"post\"");
           return retval;
         }
 
-      param = args(3).cell_value ();
+      param = args(3).cellstr_value ();
 
       if (error_state)
         {
-          error ("urlwrite: parameters (PARAM) for get and post requests must be given as a cell");
+          error ("urlwrite: parameters (PARAM) for get and post requests must be given as a cell array of character strings");
           return retval;
         }
 
 
       if (param.numel () % 2 == 1 )
         {
           error ("urlwrite: number of elements in PARAM must be even");
           return retval;
@@ -1432,17 +1433,17 @@ s = urlread (\"http://www.google.com/sea
 
   if (error_state)
     {
       error ("urlread: URL must be a character string");
       return retval;
     }
 
   std::string method;
-  Cell param; // empty cell array
+  Array<std::string> param;
 
   if (nargin == 3)
     {
       method = args(1).string_value ();
 
       if (error_state)
         {
           error ("urlread: METHOD must be \"get\" or \"post\"");
@@ -1450,21 +1451,21 @@ s = urlread (\"http://www.google.com/sea
         }
 
       if (method != "get" && method != "post")
         {
           error ("urlread: METHOD must be \"get\" or \"post\"");
           return retval;
         }
 
-      param = args(2).cell_value ();
+      param = args(2).cellstr_value ();
 
       if (error_state)
         {
-          error ("urlread: parameters (PARAM) for get and post requests must be given as a cell");
+          error ("urlread: parameters (PARAM) for get and post requests must be given as a cell array of character strings");
           return retval;
         }
 
       if (param.numel () % 2 == 1 )
         {
           error ("urlread: number of elements in PARAM must be even");
           return retval;
         }
