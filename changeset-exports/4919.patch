# HG changeset patch
# User jwe
# Date 1090941771 0
#      Tue Jul 27 15:22:51 2004 +0000
# Node ID a1073eef650cb3dde97f4d10f7b397920e479f1d
# Parent  d2a7208f35d40f260728505a6ac74a4cfa2b7b2b
[project @ 2004-07-27 15:22:50 by jwe]

diff --git a/liboctave/oct-inttypes.h b/liboctave/oct-inttypes.h
--- a/liboctave/oct-inttypes.h
+++ b/liboctave/oct-inttypes.h
@@ -203,17 +203,17 @@ public:
     double tx = static_cast<double> (x.value ());
     ival = OCTAVE_INT_FIT_TO_RANGE (t - tx, T);
     return *this;
   }
 
   octave_int<T> min (void) const { return std::numeric_limits<T>::min (); }
   octave_int<T> max (void) const { return std::numeric_limits<T>::max (); }
 
-  int nbits (void) const { return sizeof (T) * CHAR_BIT; }
+  static int nbits (void) { return sizeof (T) * CHAR_BIT; }
 
 private:
 
   T ival;
 };
 
 template <class T>
 std::ostream&
diff --git a/scripts/general/num2str.m b/scripts/general/num2str.m
--- a/scripts/general/num2str.m
+++ b/scripts/general/num2str.m
@@ -39,17 +39,17 @@ function retval = num2str (x, arg)
     retval = x;
   endif
 
   if (iscomplex (x))
     if (nargin == 2)
       if (isstr (arg))
 	fmt = strcat (arg, "%-+", arg(2:end), "i");
       else
-	if (isnumeric (x) && round (x) == x && abs (x) < (10.^arg))
+	if (isnumeric (x) && round (x) == x && abs (x) < (10 .^ arg))
 	  fmt = sprintf ("%%%dd%%-+%ddi  ", arg, arg);
 	else
 	  fmt = sprintf ("%%%d.%dg%%-+%d.%dgi", arg+7, arg, arg+7, arg);
 	endif
       endif
     else
       ## Setup a suitable format string
       if (isnumeric (x) && round (x) == x && abs (x) < 1e10)
@@ -102,17 +102,17 @@ function retval = num2str (x, arg)
 
     tmp(length (tmp)) = "";
     retval = split (tmp, "\n");
   else
     if (nargin == 2)
       if (isstr (arg))
 	fmt = arg;
       else
-	if (isnumeric (x) && round (x) == x && abs (x) < (10.^ arg))
+	if (isnumeric (x) && round (x) == x && abs (x) < (10 .^ arg))
 	  fmt = sprintf ("%%%dd  ", arg);
 	else
 	  fmt = sprintf ("%%%d.%dg", arg+7, arg);
 	endif
       endif
     else
       if (isnumeric (x) && round (x) == x && abs (x) < 1e10)
 	if (max (abs (x(:))) == 0)
diff --git a/src/Cell.cc b/src/Cell.cc
--- a/src/Cell.cc
+++ b/src/Cell.cc
@@ -26,16 +26,17 @@ Software Foundation, 59 Temple Place - S
 
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
 #include "idx-vector.h"
 
 #include "Cell.h"
+#include "error.h"
 
 Cell::Cell (const string_vector& sv)
   : ArrayN<octave_value> ()
 {
   int n = sv.length ();
 
   if (n > 0)
     {
@@ -54,37 +55,49 @@ Cell::index (const octave_value_list& id
   int n = idx_arg.length ();
 
   switch (n)
     {
     case 1:
       {
 	idx_vector i = idx_arg(0).index_vector ();
 
-	retval = index (i, resize_ok);
+	if (! error_state)
+	  retval = index (i, resize_ok);
       }
       break;
 
     case 2:
       {
 	idx_vector i = idx_arg(0).index_vector ();
-	idx_vector j = idx_arg(1).index_vector ();
 
-	retval = index (i, j, resize_ok);
+	if (! error_state)
+	  {
+	    idx_vector j = idx_arg(1).index_vector ();
+
+	    if (! error_state)
+	      retval = index (i, j, resize_ok);
+	  }
       }
       break;
 
     default:
       {
 	Array<idx_vector> iv (n);
 
 	for (int i = 0; i < n; i++)
-	  iv(i) = idx_arg(i).index_vector ();
+	  {
+	    iv(i) = idx_arg(i).index_vector ();
 
-	retval = index (iv, resize_ok);
+	    if (error_state)
+	      break;
+	  }
+
+	if (!error_state)
+	  retval = index (iv, resize_ok);
       }
       break;
     }
 
   return retval;
 }
 
 Cell&
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,10 +1,19 @@
+2004-07-27  John W. Eaton  <jwe@octave.org>
+
+	* ov-struct.cc (Fisfield): Only print usage message if number of
+	arguments is incorrect.  Return false for invalid arguments.
+	From Andy Adler <adler@site.uottawa.ca>.
+
 2004-07-27  David Bateman  <dbateman@free.fr>
 
+	* Cell.cc (Cell::index): Quit early if an error occurs when
+	creating index vector object.
+
 	* ov-int8.cc, ov-int16.cc, ov-int32.cc, ov-int64.cc, ov-uint8.cc, 
 	ov-uint16.cc, ov-uint32.cc, ov-uint64.cc (HDF5_SAVE_TYPE): Define
 	for HDF5 native format for the type.
 
 	* ov-base-int.h (save_ascii, save_binary, load_binary, save_hdf5):
 	Delete unused arguments.
 
 	* ov-base-int.cc (octave_base_int_matrix::save_ascii,
diff --git a/src/bitfcns.cc b/src/bitfcns.cc
--- a/src/bitfcns.cc
+++ b/src/bitfcns.cc
@@ -81,182 +81,183 @@ Software Foundation, 59 Temple Place - S
 #define BITOP(OP, FNAME) \
  \
   octave_value retval; \
  \
   int nargin = args.length (); \
  \
   if (nargin == 2) \
     { \
-      if (args(0).type_id () == octave_matrix::static_type_id () || \
-	  args(0).type_id () == octave_scalar::static_type_id () || \
-	  args(1).type_id () == octave_matrix::static_type_id () || \
-	  args(1).type_id () == octave_scalar::static_type_id ()) \
+      if (args(0).type_id () == octave_matrix::static_type_id () \
+	  || args(0).type_id () == octave_scalar::static_type_id () \
+	  || args(1).type_id () == octave_matrix::static_type_id () \
+	  || args(1).type_id () == octave_scalar::static_type_id ()) \
 	{ \
 	  bool arg0_is_int = true; \
 	  bool arg1_is_int = true; \
  \
-	  if (args(0).type_id () == octave_matrix::static_type_id () || \
-	      args(0).type_id () == octave_scalar::static_type_id ())	\
+	  if (args(0).type_id () == octave_matrix::static_type_id () \
+	      || args(0).type_id () == octave_scalar::static_type_id ()) \
 	    arg0_is_int = false; \
  \
-	  if (args(1).type_id () == octave_matrix::static_type_id () || \
-	      args(1).type_id () == octave_scalar::static_type_id ())	\
+	  if (args(1).type_id () == octave_matrix::static_type_id () \
+	      || args(1).type_id () == octave_scalar::static_type_id ()) \
 	    arg1_is_int = false; \
  \
 	  if (!arg0_is_int && !arg1_is_int) \
 	    { \
-	      uint64NDArray x (args(0).array_value ());		\
+	      uint64NDArray x (args(0).array_value ()); \
 	      uint64NDArray y (args(1).array_value ());	\
-	      if (! error_state)				\
-		BITOPX (OP, FNAME, uint64NDArray);		\
-	      retval = retval.array_value ();			\
+	      if (! error_state) \
+		BITOPX (OP, FNAME, uint64NDArray); \
+	      retval = retval.array_value (); \
 	    } \
 	  else \
 	    { \
 	      int p = (arg0_is_int ? 1 : 0); \
 	      int q = (arg0_is_int ? 0 : 1); \
+ \
 	      NDArray dx = args(p).array_value (); \
  \
-	      if (args(q).type_id () == octave_uint64_matrix::static_type_id () || \
-		  args(q).type_id () == octave_uint64_scalar::static_type_id ()) \
-		{							\
-		  uint64NDArray x (dx);					\
-		  uint64NDArray y = args(q).uint64_array_value ();	\
-		  if (! error_state)					\
-		    BITOPX (OP, FNAME, uint64NDArray);			\
+	      if (args(q).type_id () == octave_uint64_matrix::static_type_id () \
+		  || args(q).type_id () == octave_uint64_scalar::static_type_id ()) \
+		{ \
+		  uint64NDArray x (dx); \
+		  uint64NDArray y = args(q).uint64_array_value (); \
+		  if (! error_state) \
+		    BITOPX (OP, FNAME, uint64NDArray); \
 		 } \
-	      else if (args(q).type_id () == octave_uint32_matrix::static_type_id () || \
-		       args(q).type_id () == octave_uint32_scalar::static_type_id ()) \
-		{							\
-		  uint32NDArray x (dx);					\
-		  uint32NDArray y = args(q).uint32_array_value ();	\
-		  if (! error_state)					\
-		    BITOPX (OP, FNAME, uint32NDArray);			\
+	      else if (args(q).type_id () == octave_uint32_matrix::static_type_id () \
+		       || args(q).type_id () == octave_uint32_scalar::static_type_id ()) \
+		{ \
+		  uint32NDArray x (dx); \
+		  uint32NDArray y = args(q).uint32_array_value (); \
+		  if (! error_state) \
+		    BITOPX (OP, FNAME, uint32NDArray); \
+		} \
+	      else if (args(q).type_id () == octave_uint16_matrix::static_type_id () \
+		       || args(q).type_id () == octave_uint16_scalar::static_type_id ()) \
+		{ \
+		  uint16NDArray x (dx); \
+		  uint16NDArray y = args(q).uint16_array_value (); \
+		  if (! error_state) \
+		    BITOPX (OP, FNAME, uint16NDArray); \
+		} \
+	      else if (args(q).type_id () == octave_uint8_matrix::static_type_id () \
+		       || args(q).type_id () == octave_uint8_scalar::static_type_id ()) \
+		{ \
+		  uint8NDArray x (dx); \
+		  uint8NDArray y = args(q).uint8_array_value (); \
+		  if (! error_state) \
+		    BITOPX (OP, FNAME, uint8NDArray); \
 		} \
-	      else if (args(q).type_id () == octave_uint16_matrix::static_type_id () || \
-		       args(q).type_id () == octave_uint16_scalar::static_type_id ()) \
-		{							\
-		  uint16NDArray x (dx);					\
-		  uint16NDArray y = args(q).uint16_array_value ();	\
-		  if (! error_state)					\
-		    BITOPX (OP, FNAME, uint16NDArray);			\
+	      else if (args(q).type_id () == octave_int64_matrix::static_type_id () \
+		       || args(q).type_id () == octave_int64_scalar::static_type_id ()) \
+		{ \
+		  int64NDArray x (dx); \
+		  int64NDArray y = args(q).int64_array_value (); \
+		  if (! error_state) \
+		    BITOPX (OP, FNAME, int64NDArray); \
+		} \
+	      else if (args(q).type_id () == octave_int32_matrix::static_type_id () \
+		       || args(q).type_id () == octave_int32_scalar::static_type_id ()) \
+		{ \
+		  int32NDArray x (dx); \
+		  int32NDArray y = args(q).int32_array_value (); \
+		  if (! error_state) \
+		    BITOPX (OP, FNAME, int32NDArray); \
+		} \
+	      else if (args(q).type_id () == octave_int16_matrix::static_type_id () \
+		       || args(q).type_id () == octave_int16_scalar::static_type_id ()) \
+		{ \
+		  int16NDArray x (dx); \
+		  int16NDArray y = args(q).int16_array_value (); \
+		  if (! error_state) \
+		    BITOPX (OP, FNAME, int16NDArray); \
+		} \
+	      else if (args(q).type_id () == octave_int8_matrix::static_type_id () \
+		       || args(q).type_id () == octave_int8_scalar::static_type_id ()) \
+		{ \
+		  int8NDArray x (dx); \
+		  int8NDArray y = args(q).int8_array_value (); \
+		  if (! error_state) \
+		    BITOPX (OP, FNAME, int8NDArray); \
 		} \
-	      else if (args(q).type_id () == octave_uint8_matrix::static_type_id () || \
-		       args(q).type_id () == octave_uint8_scalar::static_type_id ()) \
-		{							\
-		  uint8NDArray x (dx);					\
-		  uint8NDArray y = args(q).uint8_array_value ();	\
-		  if (! error_state)					\
-		    BITOPX (OP, FNAME, uint8NDArray);			\
-		}							\
-	      else if (args(q).type_id () == octave_int64_matrix::static_type_id () || \
-		       args(q).type_id () == octave_int64_scalar::static_type_id ()) \
-		{							\
-		  int64NDArray x (dx);					\
-		  int64NDArray y = args(q).int64_array_value ();	\
-		  if (! error_state)					\
-		    BITOPX (OP, FNAME, int64NDArray);			\
-		}							\
-	      else if (args(q).type_id () == octave_int32_matrix::static_type_id () || \
-		       args(q).type_id () == octave_int32_scalar::static_type_id ()) \
-		{							\
-		  int32NDArray x (dx);					\
-		  int32NDArray y = args(q).int32_array_value ();	\
-		  if (! error_state)					\
-		    BITOPX (OP, FNAME, int32NDArray);			\
-		}							\
-	      else if (args(q).type_id () == octave_int16_matrix::static_type_id () || \
-	      args(q).type_id () == octave_int16_scalar::static_type_id ()) \
-		{							\
-		  int16NDArray x (dx);					\
-		  int16NDArray y = args(q).int16_array_value ();	\
-		  if (! error_state)					\
-		    BITOPX (OP, FNAME, int16NDArray);			\
-		}							\
-	      else if (args(q).type_id () == octave_int8_matrix::static_type_id () || \
-		       args(q).type_id () == octave_int8_scalar::static_type_id ()) \
-		{							\
-		  int8NDArray x (dx);					\
-		  int8NDArray y = args(q).int8_array_value ();		\
-		  if (! error_state)					\
-		    BITOPX (OP, FNAME, int8NDArray);			\
-		}							\
-	      else							\
-		error ("%s: illegal operand type", FNAME);		\
-	    }								\
-	}								\
-      else if (args(0).type_id () == args(1).type_id ())		\
+	      else \
+		error ("%s: invalid operand type", FNAME); \
+	    } \
+	} \
+      else if (args(0).type_id () == args(1).type_id ()) \
 	{ \
-	  if (args(0).type_id () == octave_uint64_matrix::static_type_id () || \
-	      args(0).type_id () == octave_uint64_scalar::static_type_id ()) \
+	  if (args(0).type_id () == octave_uint64_matrix::static_type_id () \
+	      || args(0).type_id () == octave_uint64_scalar::static_type_id ()) \
+	    { \
+	      uint64NDArray x = args(0).uint64_array_value (); \
+	      uint64NDArray y = args(1).uint64_array_value (); \
+	      if (! error_state) \
+		BITOPX (OP, FNAME, uint64NDArray); \
+	    } \
+	  else if (args(0).type_id () == octave_uint32_matrix::static_type_id () \
+		   || args(0).type_id () == octave_uint32_scalar::static_type_id ()) \
 	    { \
-	      uint64NDArray x = args(0).uint64_array_value ();	\
-	      uint64NDArray y = args(1).uint64_array_value ();	\
-	      if (! error_state)				\
-		BITOPX (OP, FNAME, uint64NDArray);		\
+	      uint32NDArray x = args(0).uint32_array_value (); \
+	      uint32NDArray y = args(1).uint32_array_value (); \
+	      if (! error_state) \
+		BITOPX (OP, FNAME, uint32NDArray); \
+	    } \
+	  else if (args(0).type_id () == octave_uint16_matrix::static_type_id () \
+		   || args(0).type_id () == octave_uint16_scalar::static_type_id ()) \
+	    { \
+	      uint16NDArray x = args(0).uint16_array_value (); \
+	      uint16NDArray y = args(1).uint16_array_value (); \
+	      if (! error_state) \
+		BITOPX (OP, FNAME, uint16NDArray); \
 	    } \
-	  else if (args(0).type_id () == octave_uint32_matrix::static_type_id () || \
-	      args(0).type_id () == octave_uint32_scalar::static_type_id ()) \
-	    { \
-	      uint32NDArray x = args(0).uint32_array_value ();	\
-	      uint32NDArray y = args(1).uint32_array_value ();	\
-	      if (! error_state)				\
-		BITOPX (OP, FNAME, uint32NDArray);		\
-	    } \
-	  else if (args(0).type_id () == octave_uint16_matrix::static_type_id () || \
-	      args(0).type_id () == octave_uint16_scalar::static_type_id ()) \
+	  else if (args(0).type_id () == octave_uint8_matrix::static_type_id () \
+		   || args(0).type_id () == octave_uint8_scalar::static_type_id ()) \
 	    { \
-	      uint16NDArray x = args(0).uint16_array_value ();	\
-	      uint16NDArray y = args(1).uint16_array_value ();	\
-	      if (! error_state)				\
-		BITOPX (OP, FNAME, uint16NDArray);		\
+	      uint8NDArray x = args(0).uint8_array_value (); \
+	      uint8NDArray y = args(1).uint8_array_value (); \
+	      if (! error_state) \
+		BITOPX (OP, FNAME, uint8NDArray); \
 	    } \
-	  else if (args(0).type_id () == octave_uint8_matrix::static_type_id () || \
-	      args(0).type_id () == octave_uint8_scalar::static_type_id ()) \
+	  else if (args(0).type_id () == octave_int64_matrix::static_type_id () \
+		   || args(0).type_id () == octave_int64_scalar::static_type_id ()) \
 	    { \
-	      uint8NDArray x = args(0).uint8_array_value ();	\
-	      uint8NDArray y = args(1).uint8_array_value ();	\
-	      if (! error_state)				\
-		BITOPX (OP, FNAME, uint8NDArray);		\
+	      int64NDArray x = args(0).int64_array_value (); \
+	      int64NDArray y = args(1).int64_array_value (); \
+	      if (! error_state) \
+		BITOPX (OP, FNAME, int64NDArray); \
 	    } \
-	  else if (args(0).type_id () == octave_int64_matrix::static_type_id () || \
-	      args(0).type_id () == octave_int64_scalar::static_type_id ()) \
+	  else if (args(0).type_id () == octave_int32_matrix::static_type_id () \
+		   || args(0).type_id () == octave_int32_scalar::static_type_id ()) \
 	    { \
-	      int64NDArray x = args(0).int64_array_value ();	\
-	      int64NDArray y = args(1).int64_array_value ();	\
-	      if (! error_state)				\
-		BITOPX (OP, FNAME, int64NDArray);		\
-	    } \
-	  else if (args(0).type_id () == octave_int32_matrix::static_type_id () || \
-	      args(0).type_id () == octave_int32_scalar::static_type_id ()) \
-	    { \
-	      int32NDArray x = args(0).int32_array_value ();	\
-	      int32NDArray y = args(1).int32_array_value ();	\
-	      if (! error_state)				\
-		BITOPX (OP, FNAME, int32NDArray);		\
+	      int32NDArray x = args(0).int32_array_value (); \
+	      int32NDArray y = args(1).int32_array_value (); \
+	      if (! error_state) \
+		BITOPX (OP, FNAME, int32NDArray); \
 	    } \
-	  else if (args(0).type_id () == octave_int16_matrix::static_type_id () || \
-	      args(0).type_id () == octave_int16_scalar::static_type_id ()) \
+	  else if (args(0).type_id () == octave_int16_matrix::static_type_id () \
+		   || args(0).type_id () == octave_int16_scalar::static_type_id ()) \
 	    { \
-	      int16NDArray x = args(0).int16_array_value ();	\
-	      int16NDArray y = args(1).int16_array_value ();	\
-	      if (! error_state)				\
-		BITOPX (OP, FNAME, int16NDArray);		\
+	      int16NDArray x = args(0).int16_array_value (); \
+	      int16NDArray y = args(1).int16_array_value (); \
+	      if (! error_state) \
+		BITOPX (OP, FNAME, int16NDArray); \
 	    } \
-	  else if (args(0).type_id () == octave_int8_matrix::static_type_id () || \
-	      args(0).type_id () == octave_int8_scalar::static_type_id ()) \
+	  else if (args(0).type_id () == octave_int8_matrix::static_type_id () \
+		   || args(0).type_id () == octave_int8_scalar::static_type_id ()) \
 	    { \
-	      int8NDArray x = args(0).int8_array_value ();	\
-	      int8NDArray y = args(1).int8_array_value ();	\
-	      if (! error_state)				\
-		BITOPX (OP, FNAME, int8NDArray);		\
+	      int8NDArray x = args(0).int8_array_value (); \
+	      int8NDArray y = args(1).int8_array_value (); \
+	      if (! error_state) \
+		BITOPX (OP, FNAME, int8NDArray); \
 	    } \
 	  else \
-	    error ("%s: illegal operand type", FNAME); \
+	    error ("%s: invalid operand type", FNAME); \
 	} \
       else \
 	error ("%s: must have matching operand types", FNAME); \
     } \
   else \
     print_usage (FNAME); \
  \
   return retval
@@ -300,92 +301,94 @@ bitshift (const double& a, int n)
   if (n > 0)
     return static_cast<EIGHT_BYTE_INT> (a) << n;
   else if (n < 0)
     return static_cast<EIGHT_BYTE_INT> (a) >> -n;
   else
     return static_cast<EIGHT_BYTE_INT> (a);
 }
 
-// Note that the bitshift operators are undefined if shifted by more bits than
-// in the type. Therefore need to test for the size of the shift
+// Note that the bitshift operators are undefined if shifted by more
+// bits than in the type, so we need to test for the size of the
+// shift.
+
 #define DO_BITSHIFT(T) \
-      if (! error_state) \
-	{ \
-          double d1, d2; \
+  if (! error_state) \
+    { \
+      double d1, d2; \
  \
-          if (n.all_integers (d1, d2)) \
-            { \
-	      int m_nel = m.numel (); \
-	      int n_nel = n.numel (); \
- \
-	      bool is_scalar_op = (m_nel == 1 || n_nel == 1); \
+      if (n.all_integers (d1, d2)) \
+	{ \
+	  int m_nel = m.numel (); \
+	  int n_nel = n.numel (); \
  \
-	      dim_vector m_dv = m.dims (); \
-	      dim_vector n_dv = n.dims (); \
+	  bool is_scalar_op = (m_nel == 1 || n_nel == 1); \
  \
-	      bool is_array_op = (m_dv == n_dv); \
+	  dim_vector m_dv = m.dims (); \
+	  dim_vector n_dv = n.dims (); \
+ \
+	  bool is_array_op = (m_dv == n_dv); \
  \
-	      if (is_array_op || is_scalar_op) \
-		{ \
-		  T ## NDArray result; \
+	  if (is_array_op || is_scalar_op) \
+	    { \
+	      T ## NDArray result; \
  \
-		  if (m_nel != 1) \
-		    result.resize (m_dv); \
-		  else \
-		    result.resize (n_dv); \
+	      if (m_nel != 1) \
+		result.resize (m_dv); \
+	      else \
+		result.resize (n_dv); \
  \
-		  for (int i = 0; i < m_nel; i++) \
-		    if (is_scalar_op) \
-		      for (int k = 0; k < n_nel; k++) \
-			if (static_cast<int> (n(k)) >= bits_in_type) \
-			  result(i+k) = 0; \
-			else \
-			  result(i+k) = bitshift (m(i), static_cast<int> (n(k))) & mask; \
+	      for (int i = 0; i < m_nel; i++) \
+		if (is_scalar_op) \
+		  for (int k = 0; k < n_nel; k++) \
+		    if (static_cast<int> (n(k)) >= bits_in_type) \
+		      result(i+k) = 0; \
 		    else \
-		      if (static_cast<int> (n(i)) >= bits_in_type) \
-			result(i) = 0;					\
-		      else 						\
-			result(i) = bitshift (m(i), static_cast<int> (n(i))) & mask; \
+		      result(i+k) = bitshift (m(i), static_cast<int> (n(k))) & mask; \
+		else \
+		  if (static_cast<int> (n(i)) >= bits_in_type) \
+		    result(i) = 0;					\
+		  else 						\
+		    result(i) = bitshift (m(i), static_cast<int> (n(i))) & mask; \
  \
-		  retval = result; \
-		} \
-	      else \
-		error ("bitshift: size of A and N must match, or one operand must be a scalar"); \
+	      retval = result; \
 	    } \
-          else \
-            error ("bitshift: expecting second argument to be integer"); \
-        }
+	  else \
+	    error ("bitshift: size of A and N must match, or one operand must be a scalar"); \
+	} \
+      else \
+	error ("bitshift: expecting second argument to be integer"); \
+    }
 
-#define DO_UBITSHIFT(T, N)					\
-  do								\
-    {								\
-      int bits_in_type = sizeof (octave_ ## T) << 3;		\
-      T ## NDArray m = m_arg.T ## _array_value ();		\
-	octave_ ## T mask = ~0ULL;				\
-      if ((N) < static_cast<int>(sizeof (octave_ ## T) << 3))	\
-	mask = mask >> ((sizeof (octave_ ## T) << 3) - (N));	\
-      else if ((N) < 1)						\
-	mask = 0;						\
-      DO_BITSHIFT (T);						\
-    }								\
+#define DO_UBITSHIFT(T, N) \
+  do \
+    { \
+      int bits_in_type = sizeof (octave_ ## T) << 3; \
+      T ## NDArray m = m_arg.T ## _array_value (); \
+	octave_ ## T mask = ~0ULL; \
+      if ((N) < static_cast<int> (sizeof (octave_ ## T) << 3)) \
+	mask = mask >> ((sizeof (octave_ ## T) << 3) - (N)); \
+      else if ((N) < 1) \
+	mask = 0; \
+      DO_BITSHIFT (T); \
+    } \
   while (0)
 
-#define DO_SBITSHIFT(T, N)					\
-  do								\
-    {								\
-      int bits_in_type = sizeof (octave_ ## T) << 3;		\
-      T ## NDArray m = m_arg.T ## _array_value ();		\
-	octave_ ## T mask = -1;					\
-      if ((N) < static_cast<int>(sizeof (octave_ ## T) << 3))	\
-	mask = mask >> ((sizeof (octave_ ## T) << 3) - (N));	\
-      else if ((N) < 1)						\
-	mask = 0;						\
-      DO_BITSHIFT (T);						\
-    }								\
+#define DO_SBITSHIFT(T, N) \
+  do \
+    { \
+      int bits_in_type = sizeof (octave_ ## T) << 3; \
+      T ## NDArray m = m_arg.T ## _array_value (); \
+	octave_ ## T mask = -1; \
+      if ((N) < static_cast<int>(sizeof (octave_ ## T) << 3)) \
+	mask = mask >> ((sizeof (octave_ ## T) << 3) - (N)); \
+      else if ((N) < 1) \
+	mask = 0; \
+      DO_BITSHIFT (T); \
+    } \
   while (0)
 
 DEFUN (bitshift, args, ,
   "-*- texinfo -*-\n\
 @deftypefn {Function File} {} bitshift (@var{a}, @var{k})\n\
 @deftypefnx {Function File} {} bitshift (@var{a}, @var{k}, @var{n})\n\
 return a @var{k} bit shift of @var{n}- digit unsigned\n\
 integers in @var{a}. A positive @var{k} leads to a left shift.\n\
@@ -474,95 +477,95 @@ bitshift ([1, 10], 2, [3,4])\n\
 DEFUN (bitmax, args, ,
   "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} bitmax ()\n\
 Returns the largest integer that can be represented as a floating point\n\
 value. That is for IEEE-754 compatiable systems with @code{2^53 - 1}.\n\
 @end deftypefn")
 {
   octave_value retval;
-  if (args.length() != 0)
+  if (args.length () != 0)
     print_usage ("bitmax");
   else
-    retval = ((double)0x1FFFFFFFFFFFFFLL);
+    retval = (static_cast<double> (0x1FFFFFFFFFFFFFLL));
   return retval;
 }
 
 DEFUN (intmax, args, ,
   "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} intmax (@var{type})\n\
 @end deftypefn")
 {
   octave_value retval;
   std::string cname = "int32";
   int nargin = args.length ();
 
-  if (nargin == 1 && args(0).is_string())
+  if (nargin == 1 && args(0).is_string ())
     cname = args(0).string_value ();
   else if (nargin != 0)
     {
       print_usage ("intmax");
       return retval;
     }
 
   if (cname == "uint8")
-    retval = octave_uint8 (std::numeric_limits<octave_uint8_t>::max());
+    retval = octave_uint8 (std::numeric_limits<octave_uint8_t>::max ());
   else if (cname == "uint16")
-    retval = octave_uint16 (std::numeric_limits<octave_uint16_t>::max());
+    retval = octave_uint16 (std::numeric_limits<octave_uint16_t>::max ());
   else if (cname == "uint32")
-    retval = octave_uint32 (std::numeric_limits<octave_uint32_t>::max());
+    retval = octave_uint32 (std::numeric_limits<octave_uint32_t>::max ());
   else if (cname == "uint64")
-    retval = octave_uint64 (std::numeric_limits<octave_uint64_t>::max());
+    retval = octave_uint64 (std::numeric_limits<octave_uint64_t>::max ());
   else if (cname == "int8")
-    retval = octave_int8 (std::numeric_limits<octave_int8_t>::max());
+    retval = octave_int8 (std::numeric_limits<octave_int8_t>::max ());
   else if (cname == "int16")
-    retval = octave_int16 (std::numeric_limits<octave_int16_t>::max());
+    retval = octave_int16 (std::numeric_limits<octave_int16_t>::max ());
   else if (cname == "int32")
-    retval = octave_int32 (std::numeric_limits<octave_int32_t>::max());
+    retval = octave_int32 (std::numeric_limits<octave_int32_t>::max ());
   else if (cname == "int64")
-    retval = octave_int64 (std::numeric_limits<octave_int64_t>::max());
+    retval = octave_int64 (std::numeric_limits<octave_int64_t>::max ());
   else
     error ("intmax: not defined for '%s' objects", cname.c_str ());
 
   return retval;
 }
 
 DEFUN (intmin, args, ,
   "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} intmin (@var{type})\n\
 @end deftypefn")
 {
   octave_value retval;
   std::string cname = "int32";
   int nargin = args.length ();
 
-  if (nargin == 1 && args(0).is_string())
+  if (nargin == 1 && args(0).is_string ())
     cname = args(0).string_value ();
   else if (nargin != 0)
     {
       print_usage ("intmin");
       return retval;
     }
 
   if (cname == "uint8")
-    retval = octave_uint8 (std::numeric_limits<octave_uint8_t>::min());
+    retval = octave_uint8 (std::numeric_limits<octave_uint8_t>::min ());
   else if (cname == "uint16")
     retval = octave_uint16 (std::numeric_limits<octave_uint16_t>::min());
   else if (cname == "uint32")
-    retval = octave_uint32 (std::numeric_limits<octave_uint32_t>::min());
+    retval = octave_uint32 (std::numeric_limits<octave_uint32_t>::min ());
   else if (cname == "uint64")
-    retval = octave_uint64 (std::numeric_limits<octave_uint64_t>::min());
+    retval = octave_uint64 (std::numeric_limits<octave_uint64_t>::min ());
   else if (cname == "int8")
-    retval = octave_int8 (std::numeric_limits<octave_int8_t>::min());
+    retval = octave_int8 (std::numeric_limits<octave_int8_t>::min ());
   else if (cname == "int16")
-    retval = octave_int16 (std::numeric_limits<octave_int16_t>::min());
+    retval = octave_int16 (std::numeric_limits<octave_int16_t>::min ());
   else if (cname == "int32")
-    retval = octave_int32 (std::numeric_limits<octave_int32_t>::min());
+    retval = octave_int32 (std::numeric_limits<octave_int32_t>::min ());
   else if (cname == "int64")
-    retval = octave_int64 (std::numeric_limits<octave_int64_t>::min());
+    retval = octave_int64 (std::numeric_limits<octave_int64_t>::min ());
   else
     error ("intmin: not defined for '%s' objects", cname.c_str ());
 
   return retval;
 }
 
 /*
 ;;; Local Variables: ***
diff --git a/src/ov-struct.cc b/src/ov-struct.cc
--- a/src/ov-struct.cc
+++ b/src/ov-struct.cc
@@ -674,18 +674,16 @@ the second must be a string.\n\
       if (args(0).is_map () && args(1).is_string ())
 	{
 	  std::string key = args(1).string_value ();
 
 	  Octave_map m = args(0).map_value ();
 
 	  retval = m.contains (key) != 0;
 	}
-      else
-	print_usage ("isfield");
     }
   else
     print_usage ("isfield");
 
   return retval;
 }
 
 // Check that the dimensions of the input arguments are correct.
diff --git a/test/octave.test/struct/isfield-5.m b/test/octave.test/struct/isfield-5.m
--- a/test/octave.test/struct/isfield-5.m
+++ b/test/octave.test/struct/isfield-5.m
@@ -1,1 +1,1 @@
-isfield (1, "m")
+isfield (1, "m") == 0
diff --git a/test/octave.test/struct/isfield-6.m b/test/octave.test/struct/isfield-6.m
--- a/test/octave.test/struct/isfield-6.m
+++ b/test/octave.test/struct/isfield-6.m
@@ -1,2 +1,2 @@
 s.a = 2;
-isfield (s, 2)
+isfield (s, 2) == 0
diff --git a/test/octave.test/struct/struct.exp b/test/octave.test/struct/struct.exp
--- a/test/octave.test/struct/struct.exp
+++ b/test/octave.test/struct/struct.exp
@@ -30,21 +30,21 @@ set test isfield-3
 set prog_output "\n... isfield:.*"
 do_test isfield-3.m
 
 set test isfield-4
 set prog_output "\n... isfield:.*"
 do_test isfield-4.m
 
 set test isfield-5
-set prog_output "\n... isfield:.*"
+set prog_output "^ans = 1"
 do_test isfield-5.m
 
 set test isfield-6
-set prog_output "\n... isfield:.*"
+set prog_output "^ans = 1"
 do_test isfield-6.m
 
 set test isstruct-1
 set prog_output "^ans = 0"
 do_test isstruct-1.m
 
 set test isstruct-2
 set prog_output "^ans = 0"
