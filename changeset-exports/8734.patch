# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1234470552 18000
#      Thu Feb 12 15:29:12 2009 -0500
# Node ID 767ed8cc6634851b239e3b181fa18fd7984c2678
# Parent  3ef774603887655daf6bdd718446d092b669de8f
rename internal issorted and issorted_rows functions to is_sorted and is_sorted_rows

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,10 +1,15 @@
 2009-02-12  John W. Eaton  <jwe@octave.org>
 
+	* data.cc, ov-base-diag.h, ov-base-mat.h, ov-base-scalar.h,
+	ov-base-sparse.h, ov-base.cc, ov-base.h, ov-perm.h, ov-range.h,
+	ov.h: Rename internal issorted and issorted_rows functions to
+	is_sorted and is_sorted_rows.
+
 	* ov-base-diag.h, ov-base-mat.h, ov-base-scalar.h, ov-base.h,
 	ov-cell.h, ov-perm.h, ov-range.h, ov.h, data.cc, ov-base.cc,
 	ov-cell.cc: Rename all uses of sortrows_idx to sort_rows_idx.
 
 	* TEMPLATE-INST/Array-tc.cc: Don't instantiate sort functions for
 	Arrays of octave_value objects.
 	(octave_sort<octave_value>::ascending_compare,
 	octave_sort<octave_value>::descending_compare): Delete.
diff --git a/src/data.cc b/src/data.cc
--- a/src/data.cc
+++ b/src/data.cc
@@ -5640,31 +5640,31 @@ This function does not yet support spars
   octave_value retval;
 
   int nargin = args.length ();
 
   if (nargin == 1)
     {
       octave_value arg = args(0);
       if (arg.dims ().is_vector ())
-        retval = args(0).issorted () != UNSORTED;
+        retval = args(0).is_sorted () != UNSORTED;
       else
         error ("issorted: needs a vector");
     }
   else if (nargin == 2)
     {
       if (args(1).is_string () && args(1).string_value () == "rows")
         {
           octave_value arg = args(0);
           sortmode smode = ASCENDING;
 
           if (arg.is_sparse_type ())
             error ("issorted: sparse matrices not yet supported");
           if (arg.ndims () == 2)
-            retval = arg.issorted_rows (smode) != UNSORTED;
+            retval = arg.is_sorted_rows (smode) != UNSORTED;
           else
             error ("issorted: needs a 2-dimensional object");
         }
       else
         error ("issorted: second argument must be \"rows\"");
     }
   else
     print_usage ();
diff --git a/src/ov-base-diag.h b/src/ov-base-diag.h
--- a/src/ov-base-diag.h
+++ b/src/ov-base-diag.h
@@ -101,24 +101,24 @@ public:
     { return octave_value (matrix.diag (k)); }
 
   octave_value sort (octave_idx_type dim = 0, sortmode mode = ASCENDING) const
     { return to_dense ().sort (dim, mode); }
   octave_value sort (Array<octave_idx_type> &sidx, octave_idx_type dim = 0,
 		     sortmode mode = ASCENDING) const
     { return to_dense ().sort (sidx, dim, mode); }
 
-  sortmode issorted (sortmode mode = UNSORTED) const
-    { return to_dense ().issorted (mode); }
+  sortmode is_sorted (sortmode mode = UNSORTED) const
+    { return to_dense ().is_sorted (mode); }
 
   Array<octave_idx_type> sort_rows_idx (sortmode mode = ASCENDING) const
     { return to_dense ().sort_rows_idx (mode); }
 
-  sortmode issorted_rows (sortmode mode = UNSORTED) const
-    { return to_dense ().issorted_rows (mode); }
+  sortmode is_sorted_rows (sortmode mode = UNSORTED) const
+    { return to_dense ().is_sorted_rows (mode); }
 
   bool is_matrix_type (void) const { return true; }
 
   bool is_numeric_type (void) const { return true; }
 
   bool is_defined (void) const { return true; }
 
   bool is_constant (void) const { return true; }
diff --git a/src/ov-base-mat.h b/src/ov-base-mat.h
--- a/src/ov-base-mat.h
+++ b/src/ov-base-mat.h
@@ -119,23 +119,23 @@ public:
     { return octave_value (matrix.diag (k)); }
 
   octave_value sort (octave_idx_type dim = 0, sortmode mode = ASCENDING) const
     { return octave_value (matrix.sort (dim, mode)); }
   octave_value sort (Array<octave_idx_type> &sidx, octave_idx_type dim = 0,
 		     sortmode mode = ASCENDING) const
     { return octave_value (matrix.sort (sidx, dim, mode)); }
 
-  sortmode issorted (sortmode mode = UNSORTED) const
+  sortmode is_sorted (sortmode mode = UNSORTED) const
     { return matrix.is_sorted (mode); }
 
   Array<octave_idx_type> sort_rows_idx (sortmode mode = ASCENDING) const
     { return matrix.sort_rows_idx (mode); }
 
-  sortmode issorted_rows (sortmode mode = UNSORTED) const
+  sortmode is_sorted_rows (sortmode mode = UNSORTED) const
     { return matrix.is_sorted_rows (mode); }
 
   bool is_matrix_type (void) const { return true; }
 
   bool is_numeric_type (void) const { return true; }
 
   bool is_defined (void) const { return true; }
 
diff --git a/src/ov-base-scalar.h b/src/ov-base-scalar.h
--- a/src/ov-base-scalar.h
+++ b/src/ov-base-scalar.h
@@ -103,23 +103,23 @@ public:
   octave_value sort (Array<octave_idx_type> &sidx, octave_idx_type,
 		     sortmode) const
     { 
       sidx.resize (dim_vector (1, 1)); 
       sidx(0) = 0; 
       return octave_value (scalar); 
     }
 
-  sortmode issorted (sortmode mode = UNSORTED) const
+  sortmode is_sorted (sortmode mode = UNSORTED) const
     { return mode ? mode : ASCENDING; }
 
   Array<octave_idx_type> sort_rows_idx (sortmode) const
     { return Array<octave_idx_type> (1, 0); }
 
-  sortmode issorted_rows (sortmode mode = UNSORTED) const
+  sortmode is_sorted_rows (sortmode mode = UNSORTED) const
     { return mode ? mode : ASCENDING; }
 
   MatrixType matrix_type (void) const { return typ; }
   MatrixType matrix_type (const MatrixType& _typ) const
     { MatrixType ret = typ; typ = _typ; return ret; }
 
   bool is_scalar_type (void) const { return true; }
 
diff --git a/src/ov-base-sparse.h b/src/ov-base-sparse.h
--- a/src/ov-base-sparse.h
+++ b/src/ov-base-sparse.h
@@ -121,18 +121,18 @@ octave_base_sparse : public octave_base_
     { return octave_value (matrix.diag (k)); }
 
   octave_value sort (octave_idx_type dim = 0, sortmode mode = ASCENDING) const
     { return octave_value (matrix.sort (dim, mode)); }
   octave_value sort (Array<octave_idx_type> &sidx, octave_idx_type dim = 0,
 		     sortmode mode = ASCENDING) const
     { return octave_value (matrix.sort (sidx, dim, mode)); }
 
-  sortmode issorted (sortmode mode = UNSORTED) const
-    { return full_value ().issorted (mode); }
+  sortmode is_sorted (sortmode mode = UNSORTED) const
+    { return full_value ().is_sorted (mode); }
 
   MatrixType matrix_type (void) const { return typ; }
   MatrixType matrix_type (const MatrixType& _typ) const
     { MatrixType ret = typ; typ = _typ; return ret; }
 
   bool is_matrix_type (void) const { return true; }
 
   bool is_numeric_type (void) const { return true; }
diff --git a/src/ov-base.cc b/src/ov-base.cc
--- a/src/ov-base.cc
+++ b/src/ov-base.cc
@@ -983,35 +983,35 @@ octave_base_value::sort (Array<octave_id
 			 octave_idx_type, sortmode) const
 {
   gripe_wrong_type_arg ("octave_base_value::sort ()", type_name ());
 
   return octave_value();
 }
 
 sortmode
-octave_base_value::issorted (sortmode) const
+octave_base_value::is_sorted (sortmode) const
 {
-  gripe_wrong_type_arg ("octave_base_value::issorted ()", type_name ());
+  gripe_wrong_type_arg ("octave_base_value::is_sorted ()", type_name ());
 
   return UNSORTED;
 }
 
 Array<octave_idx_type>
 octave_base_value::sort_rows_idx (sortmode) const
 {
   gripe_wrong_type_arg ("octave_base_value::sort_rows_idx ()", type_name ());
 
   return Array<octave_idx_type> ();
 }
 
 sortmode
-octave_base_value::issorted_rows (sortmode) const
+octave_base_value::is_sorted_rows (sortmode) const
 {
-  gripe_wrong_type_arg ("octave_base_value::issorted_rows ()", type_name ());
+  gripe_wrong_type_arg ("octave_base_value::is_sorted_rows ()", type_name ());
 
   return UNSORTED;
 }
 
 #define UNDEFINED_MAPPER(F) \
   octave_value \
   octave_base_value::F (void) const \
   { \
diff --git a/src/ov-base.h b/src/ov-base.h
--- a/src/ov-base.h
+++ b/src/ov-base.h
@@ -512,22 +512,22 @@ public:
   virtual octave_value diag (octave_idx_type k = 0) const;
 
   virtual octave_value sort (octave_idx_type dim = 0, 
 			     sortmode mode = ASCENDING) const;
   virtual octave_value sort (Array<octave_idx_type> &sidx, 
 			     octave_idx_type dim = 0,
 			     sortmode mode = ASCENDING) const;
 
-  virtual sortmode issorted (sortmode mode = UNSORTED) const;
+  virtual sortmode is_sorted (sortmode mode = UNSORTED) const;
 
   virtual Array<octave_idx_type>
   sort_rows_idx (sortmode mode = ASCENDING) const;
 
-  virtual sortmode issorted_rows (sortmode mode = UNSORTED) const;
+  virtual sortmode is_sorted_rows (sortmode mode = UNSORTED) const;
 
   virtual void lock (void);
 
   virtual void unlock (void);
 
   virtual bool islocked (void) const { return false; }
 
   virtual void dump (std::ostream& os) const;
diff --git a/src/ov-perm.h b/src/ov-perm.h
--- a/src/ov-perm.h
+++ b/src/ov-perm.h
@@ -88,24 +88,24 @@ public:
     { return to_dense () .diag (k); }
 
   octave_value sort (octave_idx_type dim = 0, sortmode mode = ASCENDING) const
     { return to_dense ().sort (dim, mode); }
   octave_value sort (Array<octave_idx_type> &sidx, octave_idx_type dim = 0,
 		     sortmode mode = ASCENDING) const
     { return to_dense ().sort (sidx, dim, mode); }
 
-  sortmode issorted (sortmode mode = UNSORTED) const
-    { return to_dense ().issorted (mode); }
+  sortmode is_sorted (sortmode mode = UNSORTED) const
+    { return to_dense ().is_sorted (mode); }
 
   Array<octave_idx_type> sort_rows_idx (sortmode mode = ASCENDING) const
     { return to_dense ().sort_rows_idx (mode); }
 
-  sortmode issorted_rows (sortmode mode = UNSORTED) const
-    { return to_dense ().issorted_rows (mode); }
+  sortmode is_sorted_rows (sortmode mode = UNSORTED) const
+    { return to_dense ().is_sorted_rows (mode); }
 
   bool is_perm_matrix (void) const { return true; }
 
   bool is_matrix_type (void) const { return true; }
 
   bool is_numeric_type (void) const { return true; }
 
   bool is_defined (void) const { return true; }
diff --git a/src/ov-range.h b/src/ov-range.h
--- a/src/ov-range.h
+++ b/src/ov-range.h
@@ -135,23 +135,23 @@ public:
 
   octave_value sort (octave_idx_type dim = 0, sortmode mode = ASCENDING) const
     { return range.sort (dim, mode); }
 
   octave_value sort (Array<octave_idx_type>& sidx, octave_idx_type dim = 0,
 		     sortmode mode = ASCENDING) const
     { return range.sort (sidx, dim, mode); }
 
-  sortmode issorted (sortmode mode = UNSORTED) const
+  sortmode is_sorted (sortmode mode = UNSORTED) const
     { return range.is_sorted (mode); }
 
   Array<octave_idx_type> sort_rows_idx (sortmode) const
     { return Array<octave_idx_type> (1, 0); }
 
-  sortmode issorted_rows (sortmode mode = UNSORTED) const
+  sortmode is_sorted_rows (sortmode mode = UNSORTED) const
     { return mode ? mode : ASCENDING; }
 
   bool is_real_type (void) const { return true; }
 
   bool is_double_type (void) const { return true; }
 
   bool is_float_type (void) const { return true; }
 
diff --git a/src/ov.h b/src/ov.h
--- a/src/ov.h
+++ b/src/ov.h
@@ -994,24 +994,24 @@ public:
     { return rep->diag (k); }
 
   octave_value sort (octave_idx_type dim = 0, sortmode mode = ASCENDING) const
     { return rep->sort (dim, mode); } 
   octave_value sort (Array<octave_idx_type> &sidx, octave_idx_type dim = 0,
 		 sortmode mode = ASCENDING) const
     { return rep->sort (sidx, dim, mode); } 
 
-  sortmode issorted (sortmode mode = UNSORTED) const
-    { return rep->issorted (mode); }
+  sortmode is_sorted (sortmode mode = UNSORTED) const
+    { return rep->is_sorted (mode); }
 
   Array<octave_idx_type> sort_rows_idx (sortmode mode = ASCENDING) const
     { return rep->sort_rows_idx (mode); }
 
-  sortmode issorted_rows (sortmode mode = UNSORTED) const
-    { return rep->issorted_rows (mode); }
+  sortmode is_sorted_rows (sortmode mode = UNSORTED) const
+    { return rep->is_sorted_rows (mode); }
 
   void lock (void) { rep->lock (); }
 
   void unlock (void) { rep->unlock (); }
 
   bool islocked (void) const { return rep->islocked (); }
 
   void dump (std::ostream& os) const { rep->dump (os); }
