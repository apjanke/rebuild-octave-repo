# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1489668902 14400
#      Thu Mar 16 08:55:02 2017 -0400
# Node ID 953cb077757c8c084f2a2bd6761ebe516cab560c
# Parent  b7eaa87ffbe3b8fc47a1b223c1bb6cfc74655a94
use magnitude when computing eps for complex values (bug #50553)

* data.cc (Feps): Compute abs of complex arguments.

diff --git a/libinterp/corefcn/data.cc b/libinterp/corefcn/data.cc
--- a/libinterp/corefcn/data.cc
+++ b/libinterp/corefcn/data.cc
@@ -4480,19 +4480,24 @@ matrix dimensions.  The optional argumen
 type and may be either @qcode{"double"} or @qcode{"single"}.
 @seealso{realmax, realmin, intmax, flintmax}
 @end deftypefn */)
 {
   octave_value retval;
 
   if (args.length () == 1 && ! args(0).is_string ())
     {
-      if (args(0).is_single_type ())
+      octave_value arg0 = args(0);
+
+      if (arg0.is_complex_type ())
+        arg0 = arg0.abs ();
+
+      if (arg0.is_single_type ())
         {
-          Array<float> x = args(0).float_array_value ();
+          Array<float> x = arg0.float_array_value ();
 
           Array<float> epsval (x.dims ());
 
           for (octave_idx_type i = 0; i < x.numel (); i++)
             {
               float val = ::fabsf (x(i));
               if (octave::math::isnan (val) || octave::math::isinf (val))
                 epsval(i) = lo_ieee_nan_value ();
@@ -4506,17 +4511,17 @@ type and may be either @qcode{"double"} 
                                         static_cast<float> (expon - 24));
                 }
             }
 
           retval = epsval;
         }
       else
         {
-          Array<double> x = args(0).array_value ();
+          Array<double> x = arg0.array_value ();
 
           Array<double> epsval (x.dims ());
 
           for (octave_idx_type i = 0; i < x.numel (); i++)
             {
               double val = ::fabs (x(i));
               if (octave::math::isnan (val) || octave::math::isinf (val))
                 epsval(i) = lo_ieee_nan_value ();
