# HG changeset patch
# User Max Brister <max@2bass.com>
# Date 1337896090 21600
#      Thu May 24 15:48:10 2012 -0600
# Node ID f0499b0af64605ede75609f4cd4be264f4379cd2
# Parent  13465aab507f4773b7eb3a0f6a2fc7721d97d5eb
# Parent  22244a235fd09f9d17898508666bd2491a6aecf8
maint: Periodic merge of default to jit

diff --git a/.hgtags b/.hgtags
--- a/.hgtags
+++ b/.hgtags
@@ -60,8 +60,9 @@ 72aebe6196414e38ef802469ff6e238f914f04c9
 64d9f33313cc8c691974bcd123357e24bccbabdc rc-3-6-0-1
 704f7895eef03008dd79848eb9da4bfb40787d73 release-3.6.0
 95c43fc8dbe1a07a46fefb3372df5b2309d874fd rc-3-6-1-0
 0000000000000000000000000000000000000000 release-3-2-4
 e320928eeb3aa2370b792e83dafc3e0ddecdc871 release-3-2-4
 ba4d6343524b406b0d15aee34579f80783581c54 release-3-6-1
 704f7895eef03008dd79848eb9da4bfb40787d73 release-3-6-0
 f947d2922febf12dcd1fb6e21b356756ecb54e55 rc-3-6-2-0
+4460c4fb20e6a5d3b1972fa737d4e00eb921545a rc-3-6-2-2
diff --git a/build-aux/bootstrap.conf b/build-aux/bootstrap.conf
--- a/build-aux/bootstrap.conf
+++ b/build-aux/bootstrap.conf
@@ -35,32 +35,34 @@ gnulib_modules="
   gethostname
   getopt-gnu
   gettimeofday
   glob
   isatty
   link
   lstat
   mkdir
+  mkdir-p
   mkfifo
   mkostemp
   mkstemp
   mktime
   nanosleep
   nproc
   opendir
   pathmax
   progname
   readdir
   readlink
   rename
   rewinddir
   rmdir
   round
   roundf
+  savewd
   sigaction
   signal
   sigprocmask
   sleep
   sleep
   stat
   stdint
   stdio
diff --git a/liboctave/file-ops.cc b/liboctave/file-ops.cc
--- a/liboctave/file-ops.cc
+++ b/liboctave/file-ops.cc
@@ -43,16 +43,17 @@ along with Octave; see the file COPYING.
 #include "file-stat.h"
 #include "oct-env.h"
 #include "oct-locbuf.h"
 #include "oct-passwd.h"
 #include "pathlen.h"
 #include "quit.h"
 #include "singleton-cleanup.h"
 #include "str-vec.h"
+#include "lo-cutils.h"
 
 file_ops *file_ops::instance = 0;
 
 bool
 file_ops::instance_ok (void)
 {
   bool retval = true;
 
@@ -356,32 +357,42 @@ file_ops::concat (const std::string& dir
 {
   return dir.empty ()
     ? file
     : (is_dir_sep (dir[dir.length()-1])
        ? dir + file
        : dir + dir_sep_char () + file);
 }
 
+static int 
+make_ancestor (const char *, const char *component, void *options)
+{
+  mode_t* mode = reinterpret_cast<mode_t *>(options);
+  return gnulib::mkdir (component, *mode);
+}
 
 int
 octave_mkdir (const std::string& nm, mode_t md)
 {
   std::string msg;
-  return octave_mkdir (nm, md, msg);
+  return octave_mkdir (nm, md, msg, false);
 }
 
 int
-octave_mkdir (const std::string& name, mode_t mode, std::string& msg)
+octave_mkdir (const std::string& name, mode_t mode, std::string& msg, 
+              bool make_parents)
 {
   msg = std::string ();
 
   int status = -1;
 
-  status = gnulib::mkdir (name.c_str (), mode);
+  if (make_parents)
+    status = octave_mkdir_parents (name.c_str (), mode, make_ancestor);
+  else
+    status = gnulib::mkdir (name.c_str (), mode);
 
   if (status < 0)
     msg = gnulib::strerror (errno);
 
   return status;
 }
 
 int
diff --git a/liboctave/file-ops.h b/liboctave/file-ops.h
--- a/liboctave/file-ops.h
+++ b/liboctave/file-ops.h
@@ -117,17 +117,18 @@ private:
 // We don't have these in the file_ops class with their simple names
 // (i.e., mkdir instead of octave_mdir) because function names in
 // standard headers may be #defined.
 
 extern OCTAVE_API int
 octave_mkdir (const std::string& nm, mode_t md);
 
 extern OCTAVE_API int
-octave_mkdir (const std::string& nm, mode_t md, std::string& msg);
+octave_mkdir (const std::string& nm, mode_t md, std::string& msg,
+              bool make_parents = false);
 
 extern OCTAVE_API int
 octave_mkfifo (const std::string& nm, mode_t md);
 
 extern OCTAVE_API int
 octave_mkfifo (const std::string& nm, mode_t md, std::string& msg);
 
 extern OCTAVE_API int
diff --git a/liboctave/lo-cutils.c b/liboctave/lo-cutils.c
--- a/liboctave/lo-cutils.c
+++ b/liboctave/lo-cutils.c
@@ -27,25 +27,29 @@ along with Octave; see the file COPYING.
 /* This gives us a better chance of finding a prototype for strptime
    on some systems.  */
 
 #if ! defined (_XOPEN_SOURCE)
 #define _XOPEN_SOURCE
 #endif
 
 #include <sys/types.h>
+#include <sys/stat.h>
 #include <unistd.h>
 
 #include <stdlib.h>
 #include <string.h>
 #include <time.h>
 
 #include "lo-cutils.h"
 #include "syswait.h"
 
+#include "savewd.h"
+#include "mkdir-p.h"
+
 OCTAVE_API void
 octave_qsort (void *base, size_t n, size_t size,
               int (*cmp) (const void *, const void *))
 {
   qsort (base, n, size, cmp);
 }
 
 OCTAVE_API int
@@ -71,8 +75,51 @@ octave_w32_library_search (HINSTANCE han
 }
 #endif
 
 OCTAVE_API pid_t
 octave_waitpid (pid_t pid, int *status, int options)
 {
   return WAITPID (pid, status, options);
 }
+
+struct mkdir_options
+{
+  int (*make_ancestor_function) (const char *, const char *, void *);
+  mode_t ancestor_mode;
+  mode_t mode;
+  mode_t mode_bits;
+};
+
+static void
+announce_mkdir (const char *dir, void *options)
+{
+  /* Do nothing */
+}
+
+static int
+process_dir (char *dir, struct savewd *wd, void *options)
+{
+  struct mkdir_options const *o = options;
+  mode_t ancestor_mode = o->ancestor_mode;
+  return (make_dir_parents (dir, wd, o->make_ancestor_function, &ancestor_mode,
+                            o->mode, announce_mkdir, o->mode_bits, 
+                            (uid_t) -1, (gid_t) -1, false) ? 0 : -1);
+}
+
+OCTAVE_API int
+octave_mkdir_parents (const char *dir, mode_t mode,
+                      int (*make_ancestor) (const char *, const char *, void *))
+{
+  char *argv[1];
+  int retval;
+  char *dir2 = malloc (strlen (dir) + 1);
+  strcpy (dir2, dir); /* Make a copy to avoid passing a const char* as char* */
+  argv[0] = dir2;
+  struct mkdir_options o;
+  o.make_ancestor_function = make_ancestor;
+  o.ancestor_mode = mode | S_IWUSR | S_IXUSR; 
+  o.mode = mode | umask(0);
+  o.mode_bits = ~(mode & umask(0));
+  retval = (savewd_process_files (1, argv, process_dir, &o));
+  free (dir2);
+  return retval;
+}
diff --git a/liboctave/lo-cutils.h b/liboctave/lo-cutils.h
--- a/liboctave/lo-cutils.h
+++ b/liboctave/lo-cutils.h
@@ -45,13 +45,17 @@ octave_strncasecmp (const char *s1, cons
 #ifdef HAVE_LOADLIBRARY_API
 OCTAVE_API void *
 octave_w32_library_search (HINSTANCE handle, const char *name);
 #endif
 
 OCTAVE_API pid_t
 octave_waitpid (pid_t pid, int *status, int options);
 
+OCTAVE_API int
+octave_mkdir_parents (const char *dir, mode_t mode,
+                      int (*make_ancestor) (char const *, char const *, void *));
+
 #ifdef __cplusplus
 }
 #endif
 
 #endif
diff --git a/scripts/statistics/distributions/betarnd.m b/scripts/statistics/distributions/betarnd.m
--- a/scripts/statistics/distributions/betarnd.m
+++ b/scripts/statistics/distributions/betarnd.m
@@ -79,30 +79,27 @@ function rnd = betarnd (a, b, varargin)
   if (isa (a, "single") || isa (b, "single"))
     cls = "single";
   else
     cls = "double";
   endif
 
   if (isscalar (a) && isscalar (b))
     if ((a > 0) && (a < Inf) && (b > 0) && (b < Inf))
-      r = randg (a, sz);
-      rnd = r ./ (r + randg (b, sz));
-      if (strcmp (cls, "single"))
-        rnd = single (rnd);
-      endif
+      r = randg (a, sz, cls);
+      rnd = r ./ (r + randg (b, sz, cls));
     else
       rnd = NaN (sz, cls);
     endif
   else
     rnd = NaN (sz, cls);
 
     k = (a > 0) & (a < Inf) & (b > 0) & (b < Inf);
-    r = randg (a(k));
-    rnd(k) = r ./ (r + randg (b(k)));
+    r = randg (a(k), cls);
+    rnd(k) = r ./ (r + randg (b(k), cls));
   endif
 
 endfunction
 
 
 %!assert (size (betarnd (1,2)), [1, 1])
 %!assert (size (betarnd (ones (2,1), 2)), [2, 1])
 %!assert (size (betarnd (ones (2,2), 2)), [2, 2])
diff --git a/scripts/statistics/distributions/cauchy_rnd.m b/scripts/statistics/distributions/cauchy_rnd.m
--- a/scripts/statistics/distributions/cauchy_rnd.m
+++ b/scripts/statistics/distributions/cauchy_rnd.m
@@ -79,25 +79,25 @@ function rnd = cauchy_rnd (location, sca
   if (isa (location, "single") || isa (scale, "single"))
     cls = "single";
   else
     cls = "double";
   endif
 
   if (isscalar (location) && isscalar (scale))
     if (!isinf (location) && (scale > 0) && (scale < Inf))
-      rnd = location - cot (pi * rand (sz)) * scale;
+      rnd = location - cot (pi * rand (sz, cls)) * scale;
     else
       rnd = NaN (sz, cls);
     endif
   else
     rnd = NaN (sz, cls);
 
     k = !isinf (location) & (scale > 0) & (scale < Inf);
-    rnd(k) = location(k)(:) - cot (pi * rand (sum (k(:)), 1)) .* scale(k)(:);
+    rnd(k) = location(k)(:) - cot (pi * rand (sum (k(:)), 1, cls)) .* scale(k)(:);
   endif
 
 endfunction
 
 
 %!assert (size (cauchy_rnd (1,2)), [1, 1])
 %!assert (size (cauchy_rnd (ones (2,1), 2)), [2, 1])
 %!assert (size (cauchy_rnd (ones (2,2), 2)), [2, 2])
diff --git a/scripts/statistics/distributions/chi2rnd.m b/scripts/statistics/distributions/chi2rnd.m
--- a/scripts/statistics/distributions/chi2rnd.m
+++ b/scripts/statistics/distributions/chi2rnd.m
@@ -72,28 +72,25 @@ function rnd = chi2rnd (n, varargin)
   if (isa (n, "single"))
     cls = "single";
   else
     cls = "double";
   endif
 
   if (isscalar (n))
     if ((n > 0) && (n < Inf))
-      rnd = 2 * randg (n/2, sz);
-      if (strcmp (cls, "single"))
-        rnd = single (rnd);
-      endif
+      rnd = 2 * randg (n/2, sz, cls);
     else
       rnd = NaN (sz, cls);
     endif
   else
     rnd = NaN (sz, cls);
 
     k = (n > 0) | (n < Inf);
-    rnd(k) = 2 * randg (n(k)/2);
+    rnd(k) = 2 * randg (n(k)/2, cls);
   endif
 
 endfunction
 
 
 %!assert (size (chi2rnd (2)), [1, 1])
 %!assert (size (chi2rnd (ones (2,1))), [2, 1])
 %!assert (size (chi2rnd (ones (2,2))), [2, 2])
diff --git a/scripts/statistics/distributions/exprnd.m b/scripts/statistics/distributions/exprnd.m
--- a/scripts/statistics/distributions/exprnd.m
+++ b/scripts/statistics/distributions/exprnd.m
@@ -72,25 +72,25 @@ function rnd = exprnd (lambda, varargin)
   if (isa (lambda, "single"))
     cls = "single";
   else
     cls = "double";
   endif
 
   if (isscalar (lambda))
     if ((lambda > 0) && (lambda < Inf))
-      rnd = rande (sz) * lambda;
+      rnd = rande (sz, cls) * lambda;
     else
       rnd = NaN (sz, cls);
     endif
   else
     rnd = NaN (sz, cls);
 
     k = (lambda > 0) & (lambda < Inf);
-    rnd(k) = rande (sum (k(:)), 1) .* lambda(k)(:);
+    rnd(k) = rande (sum (k(:)), 1, cls) .* lambda(k)(:);
   endif
 
 endfunction
 
 
 %!assert (size (exprnd (2)), [1, 1])
 %!assert (size (exprnd (ones (2,1))), [2, 1])
 %!assert (size (exprnd (ones (2,2))), [2, 2])
diff --git a/scripts/statistics/distributions/frnd.m b/scripts/statistics/distributions/frnd.m
--- a/scripts/statistics/distributions/frnd.m
+++ b/scripts/statistics/distributions/frnd.m
@@ -79,25 +79,25 @@ function rnd = frnd (m, n, varargin)
   if (isa (m, "single") || isa (n, "single"))
     cls = "single";
   else
     cls = "double";
   endif
 
   if (isscalar (m) && isscalar (n))
     if ((m > 0) && (m < Inf) && (n > 0) && (n < Inf))
-      rnd = n/m * randg (m/2, sz) ./ randg (n/2, sz);
+      rnd = n/m * randg (m/2, sz, cls) ./ randg (n/2, sz, cls);
     else
       rnd = NaN (sz, cls);
     endif
   else
     rnd = NaN (sz, cls);
 
     k = (m > 0) & (m < Inf) & (n > 0) & (n < Inf);
-    rnd(k) = n(k) ./ m(k) .* randg (m(k)/2) ./ randg (n(k)/2);
+    rnd(k) = n(k) ./ m(k) .* randg (m(k)/2, cls) ./ randg (n(k)/2, cls);
   endif
 
 endfunction
 
 
 %!assert (size (frnd (1,2)), [1, 1])
 %!assert (size (frnd (ones (2,1), 2)), [2, 1])
 %!assert (size (frnd (ones (2,2), 2)), [2, 2])
diff --git a/scripts/statistics/distributions/gamrnd.m b/scripts/statistics/distributions/gamrnd.m
--- a/scripts/statistics/distributions/gamrnd.m
+++ b/scripts/statistics/distributions/gamrnd.m
@@ -79,28 +79,25 @@ function rnd = gamrnd (a, b, varargin)
   if (isa (a, "single") || isa (b, "single"))
     cls = "single";
   else
     cls = "double";
   endif
 
   if (isscalar (a) && isscalar (b))
     if ((a > 0) && (a < Inf) && (b > 0) && (b < Inf))
-      rnd = b * randg (a, sz);
-      if (strcmp (cls, "single"))
-        rnd = single (rnd);
-      endif
+      rnd = b * randg (a, sz, cls);
     else 
       rnd = NaN (sz, cls);
     endif
   else
     rnd = NaN (sz, cls);
 
     k = (a > 0) & (a < Inf) & (b > 0) & (b < Inf);
-    rnd(k) = b(k) .* randg (a(k));
+    rnd(k) = b(k) .* randg (a(k), cls);
   endif
 
 endfunction
 
 
 %!assert (size (gamrnd (1,2)), [1, 1])
 %!assert (size (gamrnd (ones (2,1), 2)), [2, 1])
 %!assert (size (gamrnd (ones (2,2), 2)), [2, 2])
diff --git a/scripts/statistics/distributions/geornd.m b/scripts/statistics/distributions/geornd.m
--- a/scripts/statistics/distributions/geornd.m
+++ b/scripts/statistics/distributions/geornd.m
@@ -72,29 +72,29 @@ function rnd = geornd (p, varargin)
   if (isa (p, "single"))
     cls = "single";
   else
     cls = "double";
   endif
 
   if (isscalar (p))
     if (p > 0 && p < 1);
-      rnd = floor (- rande (sz) ./ log (1 - p));
+      rnd = floor (- rande (sz, cls) ./ log (1 - p));
     elseif (p == 0)
       rnd = Inf (sz, cls);
     elseif (p == 1)
       rnd = zeros (sz, cls);
     elseif (p < 0 || p > 1)
       rnd = NaN (sz, cls);
     endif
   else
-    rnd = floor (- rande (sz) ./ log (1 - p));
+    rnd = floor (- rande (sz, cls) ./ log (1 - p));
 
     k = !(p >= 0) | !(p <= 1);
-  rnd(k) = NaN;
+    rnd(k) = NaN;
 
     k = (p == 0);
     rnd(k) = Inf;
   endif
 
 endfunction
 
 
diff --git a/scripts/statistics/distributions/lognrnd.m b/scripts/statistics/distributions/lognrnd.m
--- a/scripts/statistics/distributions/lognrnd.m
+++ b/scripts/statistics/distributions/lognrnd.m
@@ -79,22 +79,22 @@ function rnd = lognrnd (mu, sigma, varar
   if (isa (mu, "single") || isa (sigma, "single"))
     cls = "single";
   else
     cls = "double";
   endif
 
   if (isscalar (mu) && isscalar (sigma))
     if ((sigma > 0) && (sigma < Inf))
-      rnd = exp (mu + sigma * randn (sz));
+      rnd = exp (mu + sigma * randn (sz, cls));
     else
       rnd = NaN (sz, cls);
     endif
   else
-    rnd = exp (mu + sigma .* randn (sz));
+    rnd = exp (mu + sigma .* randn (sz, cls));
 
     k = (sigma < 0) | (sigma == Inf);
     rnd(k) = NaN;
   endif
 
 endfunction
 
 
diff --git a/scripts/statistics/distributions/nbinrnd.m b/scripts/statistics/distributions/nbinrnd.m
--- a/scripts/statistics/distributions/nbinrnd.m
+++ b/scripts/statistics/distributions/nbinrnd.m
@@ -79,33 +79,30 @@ function rnd = nbinrnd (n, p, varargin)
   if (isa (n, "single") || isa (p, "single"))
     cls = "single";
   else
     cls = "double";
   endif
 
   if (isscalar (n) && isscalar (p))
     if ((n > 0) && (n < Inf) && (p > 0) && (p <= 1))
-      rnd = randp ((1 - p) ./ p .* randg (n, sz));
-      if (strcmp (cls, "single"))
-        rnd = single (rnd);
-      endif
+      rnd = randp ((1 - p) ./ p .* randg (n, sz, cls), cls);
     elseif ((n > 0) && (n < Inf) && (p == 0))
       rnd = zeros (sz, cls);
     else
       rnd = NaN (sz, cls);
     endif
   else
     rnd = NaN (sz, cls);
 
     k = (n > 0) & (n < Inf) & (p == 0);
     rnd(k) = 0;
 
     k = (n > 0) & (n < Inf) & (p > 0) & (p <= 1);
-    rnd(k) = randp ((1 - p(k)) ./ p(k) .* randg (n(k)));
+    rnd(k) = randp ((1 - p(k)) ./ p(k) .* randg (n(k), cls));
   endif
 
 endfunction
 
 
 %!assert (size (nbinrnd (2, 1/2)), [1, 1])
 %!assert (size (nbinrnd (2*ones (2,1), 1/2)), [2, 1])
 %!assert (size (nbinrnd (2*ones (2,2), 1/2)), [2, 2])
diff --git a/scripts/statistics/distributions/normrnd.m b/scripts/statistics/distributions/normrnd.m
--- a/scripts/statistics/distributions/normrnd.m
+++ b/scripts/statistics/distributions/normrnd.m
@@ -79,22 +79,22 @@ function rnd = normrnd (mu, sigma, varar
   if (isa (mu, "single") || isa (sigma, "single"))
     cls = "single";
   else
     cls = "double";
   endif
 
   if (isscalar (mu) && isscalar (sigma))
     if (!isnan (mu) && !isinf (mu) && (sigma > 0) && (sigma < Inf))
-      rnd =  mu + sigma * randn (sz);
+      rnd =  mu + sigma * randn (sz, cls);
     else
       rnd = NaN (sz, cls);
     endif
   else
-    rnd = mu + sigma .* randn (sz);
+    rnd = mu + sigma .* randn (sz, cls);
     k = isnan (mu) | isinf (mu) | !(sigma > 0) | !(sigma < Inf);
     rnd(k) = NaN;
   endif
 
 endfunction
 
 
 %!assert (size (normrnd (1,2)), [1, 1])
diff --git a/scripts/statistics/distributions/poissrnd.m b/scripts/statistics/distributions/poissrnd.m
--- a/scripts/statistics/distributions/poissrnd.m
+++ b/scripts/statistics/distributions/poissrnd.m
@@ -72,28 +72,25 @@ function rnd = poissrnd (lambda, varargi
   if (isa (lambda, "single"))
     cls = "single";
   else
     cls = "double";
   endif
 
   if (isscalar (lambda))
     if (lambda >= 0 && lambda < Inf)
-      rnd = randp (lambda, sz);
-      if (strcmp (cls, "single"))
-        rnd = single (rnd);
-      endif
+      rnd = randp (lambda, sz, cls);
     else
       rnd = NaN (sz, cls);
     endif
   else
     rnd = NaN (sz, cls);
 
     k = (lambda >= 0) & (lambda < Inf);
-    rnd(k) = randp (lambda(k));
+    rnd(k) = randp (lambda(k), cls);
   endif
 
 endfunction
 
 
 %!assert (size (poissrnd (2)), [1, 1])
 %!assert (size (poissrnd (ones (2,1))), [2, 1])
 %!assert (size (poissrnd (ones (2,2))), [2, 2])
diff --git a/scripts/statistics/distributions/trnd.m b/scripts/statistics/distributions/trnd.m
--- a/scripts/statistics/distributions/trnd.m
+++ b/scripts/statistics/distributions/trnd.m
@@ -72,25 +72,25 @@ function rnd = trnd (n, varargin)
   if (isa (n, "single"))
     cls = "single";
   else
     cls = "double";
   endif
 
   if (isscalar (n))
     if ((n > 0) && (n < Inf))
-      rnd = randn (sz) ./ sqrt (2*randg (n/2, sz) / n);
+      rnd = randn (sz, cls) ./ sqrt (2*randg (n/2, sz, cls) / n);
     else
       rnd = NaN (sz, cls);
     endif
   else
     rnd = NaN (sz, cls);
 
     k = (n > 0) & (n < Inf);
-    rnd(k) = randn (sum (k(:)), 1) ./ sqrt (2*randg (n(k)/2) ./ n(k))(:);
+    rnd(k) = randn (sum (k(:)), 1, cls) ./ sqrt (2*randg (n(k)/2, cls) ./ n(k))(:);
   endif
 
 endfunction
 
 
 %!assert (size (trnd (2)), [1, 1])
 %!assert (size (trnd (ones (2,1))), [2, 1])
 %!assert (size (trnd (ones (2,2))), [2, 2])
diff --git a/scripts/statistics/distributions/unidrnd.m b/scripts/statistics/distributions/unidrnd.m
--- a/scripts/statistics/distributions/unidrnd.m
+++ b/scripts/statistics/distributions/unidrnd.m
@@ -72,22 +72,22 @@ function rnd = unidrnd (n, varargin)
   if (isa (n, "single"))
     cls = "single";
   else
     cls = "double";
   endif
 
   if (isscalar (n))
     if (n > 0 && n == fix (n))
-      rnd = ceil (rand (sz) * n);
+      rnd = ceil (rand (sz, cls) * n);
     else
       rnd = NaN (sz, cls);
     endif
   else
-    rnd = ceil (rand (sz) .* n);
+    rnd = ceil (rand (sz, cls) .* n);
 
     k = ! (n > 0 & n == fix (n));
     rnd(k) = NaN;
   endif
 
 endfunction
 
 
diff --git a/scripts/statistics/distributions/unifrnd.m b/scripts/statistics/distributions/unifrnd.m
--- a/scripts/statistics/distributions/unifrnd.m
+++ b/scripts/statistics/distributions/unifrnd.m
@@ -79,22 +79,22 @@ function rnd = unifrnd (a, b, varargin)
   if (isa (a, "single") || isa (b, "single"))
     cls = "single";
   else
     cls = "double";
   endif
 
   if (isscalar (a) && isscalar (b))
     if ((-Inf < a) && (a < b) && (b < Inf))
-      rnd =  a + (b - a) * rand (sz);
+      rnd =  a + (b - a) * rand (sz, cls);
     else
       rnd = NaN (sz, cls);
     endif
   else
-    rnd =  a + (b - a) .* rand (sz);
+    rnd =  a + (b - a) .* rand (sz, cls);
 
     k = !(-Inf < a) | !(a < b) | !(b < Inf);
     rnd(k) = NaN;
   endif
 
 endfunction
 
 
diff --git a/scripts/statistics/distributions/wblrnd.m b/scripts/statistics/distributions/wblrnd.m
--- a/scripts/statistics/distributions/wblrnd.m
+++ b/scripts/statistics/distributions/wblrnd.m
@@ -79,22 +79,22 @@ function rnd = wblrnd (scale, shape, var
   if (isa (scale, "single") || isa (shape, "single"))
     cls = "single";
   else
     cls = "double";
   endif
 
   if (isscalar (scale) && isscalar (shape))
     if ((scale > 0) && (scale < Inf) && (shape > 0) && (shape < Inf))
-      rnd = scale * rande (sz) .^ (1/shape);
+      rnd = scale * rande (sz, cls) .^ (1/shape);
     else
       rnd = NaN (sz, cls);
     endif
   else
-    rnd = scale .* rande (sz) .^ (1./shape);
+    rnd = scale .* rande (sz, cls) .^ (1./shape);
 
     k = (scale <= 0) | (scale == Inf) | (shape <= 0) | (shape == Inf);
     rnd(k) = NaN;
   endif
 
 endfunction
 
 
diff --git a/src/dirfns.cc b/src/dirfns.cc
--- a/src/dirfns.cc
+++ b/src/dirfns.cc
@@ -266,17 +266,17 @@ message identifier.\n\
           // directory already exists.
 
           retval(2) = "mkdir";
           retval(1) = "directory exists";
           retval(0) = true;
         }
       else
         {
-          int status = octave_mkdir (dirname, 0777, msg);
+          int status = octave_mkdir (dirname, 0777, msg, true);
 
           if (status < 0)
             {
               retval(2) = "mkdir";
               retval(1) = msg;
             }
           else
             retval(0) = true;
