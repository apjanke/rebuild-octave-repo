# HG changeset patch
# User Rik <rik@octave.org>
# Date 1523991917 25200
#      Tue Apr 17 12:05:17 2018 -0700
# Node ID 49a8d0a2d7aeb875e053dd52cd7aff598b18f282
# Parent  617fe022e96579a251115bfaf2f48f2933584b16
Move exclusion of saved graphics properties from hdl2struct to struct2hdl.
Re-architect where read-only or derived properties are excluded.
They are now stored in the struct, but discarded when restored to an active
handle.

* hdl2struct.m: Remove read-only properties associated with a specific handle
type from the list of properties to exclude.

* struct2hdl.m: Remove read-only properties based on graphics object type.

diff --git a/scripts/plot/util/hdl2struct.m b/scripts/plot/util/hdl2struct.m
--- a/scripts/plot/util/hdl2struct.m
+++ b/scripts/plot/util/hdl2struct.m
@@ -130,25 +130,22 @@ function hlist = getspecial (h)
 
 endfunction
 
 function propstruct = getprops (h)
 
   persistent excluded;
 
   if (isempty (excluded))
-    excluded = cell2struct (repmat ({[]}, 1, 21),
+    excluded = cell2struct (repmat ({[]}, 1, 15),
                             {"beingdeleted", "busyaction", "buttondownfcn", ...
                              "children", "clipping", "createfcn", ...
                              "deletefcn", "handlevisibility", "hittest", ...
                              "interruptible", "parent", "selected" , ...
-                             "selectionhighlight", "type", "uicontextmenu", ...
-                             "currentaxes", "currentcharacter", ...
-                             "currentobject", "tightinset", "currentpoint", ...
-                             "extent"}, 2);
+                             "selectionhighlight", "type", "uicontextmenu"}, 2);
   endif
 
   obj = get (h);
   ## get useful properties rejecting readonly, children, handles ...
   fields = fieldnames (obj);
   tf = isfield (excluded, fields);
   propstruct = rmfield (obj, fields(tf));
 
diff --git a/scripts/plot/util/struct2hdl.m b/scripts/plot/util/struct2hdl.m
--- a/scripts/plot/util/struct2hdl.m
+++ b/scripts/plot/util/struct2hdl.m
@@ -118,41 +118,46 @@ function [h, pout] = struct2hdl (s, p=[]
   ## Silence deprecation warnings
   warning ("off", "Octave:deprecated-property", "local");
 
   ## create object
   if (strcmp (s.type, "root"))
     h = 0;
     s.properties = rmfield (s.properties, ...
                               {"callbackobject", "commandwindowsize", ...
+                               "monitorpositions", "pointerwindow", ...
                                "screendepth", "screenpixelsperinch", ...
                                "screensize"});
   elseif (strcmp (s.type, "figure"))
     h = figure ();
+    s.properties = rmfield (s.properties, ...
+                              {"currentaxes", "currentcharacter", ...
+                               "currentobject", "currentpoint"});
   elseif (strcmp (s.type, "axes"))
-    ## legends and colorbars are "transformed" in normal axes
+    ## legends and colorbars are "transformed" in to normal axes
     ## if hilev is not requested
     if (! hilev)
       if (strcmp (s.properties.tag, "legend"))
         s.properties.tag = "";
         s.properties.userdata = [];
         par = gcf;
       elseif (strcmp (s.properties.tag, "colorbar"))
         s.properties.tag = "";
         s.properties.userdata = [];
         par = gcf;
       endif
     endif
-
+    s.properties = rmfield (s.properties, {"tightinset"});
     [h, s] = createaxes (s, p, par);
   elseif (strcmp (s.type, "line"))
     h = createline (s, par);
   elseif (strcmp (s.type, "patch"))
     [h, s] = createpatch (s, par);
   elseif (strcmp (s.type, "text"))
+    s.properties = rmfield (s.properties, "extent");
     h = createtext (s, par);
   elseif (strcmp (s.type, "image"))
     h = createimage (s, par);
   elseif (strcmp (s.type, "surface"))
     h = createsurface (s, par);
   elseif (strcmp (s.type, "hggroup"))
     [h, s, p] = createhg (s, p, par, hilev);
   else
@@ -574,36 +579,42 @@ function setprops (s, h, p, hilev)
       hdls = [specs.handle];
     endif
     nh = length (hdls);
     msg = "";
     if (! nh)
       set (h, s.properties);
     else
       ## Specials are objects that where automatically constructed with
-      ## current object.  Among them are "x(yz)labels", "title", high
-      ## level hggroup children
+      ## current object.  Among them are "x(yz)labels", "title", and
+      ## high level hggroup children
       fields = fieldnames (s.properties);
       vals = struct2cell (s.properties);
       idx = find (cellfun (@(x) valcomp(x, hdls) , vals));
       s.properties = rmfield (s.properties, fields(idx));
 
       ## set all properties but special handles
       set (h, s.properties);
 
       ## find props with val == (one of special handles)
       nf = length (idx);
       fields = fields(idx);
       vals = vals(idx);
       while (nf)
         field = fields{nf};
         idx = find (hdls == vals{nf});
         spec = specs(idx);
+        ## FIXME: Wouldn't it be better to call struct2hdl recursively
+        ##        for this handle?  That way the function could determine
+        ##        based on type what special actions to take.
+        try
+          spec.properties = rmfield (spec.properties, "extent");
+        end_try_catch
         if (isprop (h, field))
-          h2 = get (h , field);
+          h2 = get (h, field);
           addmissingprops (h2, spec.properties);
           set (h2, spec.properties);
         endif
         nf -= 1;
       endwhile
 
       ## If hggroup children were created by high level functions,
       ## copy only useful properties.
