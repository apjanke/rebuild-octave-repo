# HG changeset patch
# User Jason Riedy
# Date 1223800627 -7200
#      Sun Oct 12 10:37:07 2008 +0200
# Branch release-3-0-x
# Node ID b1122c225f6cedbbd9b02dc5653de296e564debb
# Parent  f53f57d2ee51e0de22bb8c214b8b7848cc7e789a
compilation fixes

diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -233,16 +233,21 @@ 2008-02-15  John W. Eaton  <jwe@octave.o
 
 2008-02-12  John W. Eaton  <jwe@octave.org>
 
 	* CMatrix.cc: Declare xilaenv instead of ilaenv.
 	(ComplexMatrix::lssolve): Call xilaenv instead of ilaenv.
 
 2008-02-12  Jason Riedy  <ejr@cs.berkeley.edu>
   
+	* Array.cc (ascending_compare, descending_compare): Remove
+	non-standard extern in the instantiations.
+
+	* oct-sort.cc: Include <cstring> and sprinkle with std:: as needed.
+
 	* dMatrix.cc (ILAENV): Declare LAPACK Fortran function.
 	(Matrix::lssolve): Use ILAENV to query smlsiz.  And add an ugly
 	workaround for DGELSD's broken lwork query.  The formula is from
 	LAPACK's dgelsd.f source and allocates enough workspace to use an
 	efficient algorithm in the short-and-fat case (n > m).
 	* CMatrix.cc (ILAENV): Declare LAPACK Fortran function.
 	(ComplexMatrix::lssolve): Use ILAENV to query smlsiz.  And add an
 	ugly workaround for ZGELSD's broken lwork query, as with double.
diff --git a/liboctave/oct-sort.cc b/liboctave/oct-sort.cc
--- a/liboctave/oct-sort.cc
+++ b/liboctave/oct-sort.cc
@@ -80,16 +80,17 @@ The Python license is
 */
 
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
 #include <cassert>
 #include <cstdlib>
+#include <cstring>
 
 #include "lo-mappers.h"
 #include "quit.h"
 #include "oct-sort.h"
 
 #define IFLT(a,b)  if (compare ? compare ((a), (b)) : ((a) < (b)))
 
 template <class T>
@@ -514,17 +515,17 @@ octave_sort<T>::merge_lo (T *pa, int na,
 {
   int k;
   T *dest;
   int result = -1;	/* guilty until proved innocent */
   int min_gallop = ms.min_gallop;
 
   if (MERGE_GETMEM (na) < 0)
     return -1;
-  memcpy (ms.a, pa, na * sizeof (T));
+  std::memcpy (ms.a, pa, na * sizeof (T));
   dest = pa;
   pa = ms.a;
 
   *dest++ = *pb++;
   --nb;
   if (nb == 0)
     goto Succeed;
   if (na == 1)
@@ -576,17 +577,17 @@ octave_sort<T>::merge_lo (T *pa, int na,
 	  min_gallop -= min_gallop > 1;
 	  ms.min_gallop = min_gallop;
 	  k = gallop_right (*pb, pa, na, 0);
 	  acount = k;
 	  if (k)
 	    {
 	      if (k < 0)
 		goto Fail;
-	      memcpy (dest, pa, k * sizeof (T));
+	      std::memcpy (dest, pa, k * sizeof (T));
 	      dest += k;
 	      pa += k;
 	      na -= k;
 	      if (na == 1)
 		goto CopyB;
 	      /* na==0 is impossible now if the comparison
 	       * function is consistent, but we can't assume
 	       * that it is.
@@ -600,17 +601,17 @@ octave_sort<T>::merge_lo (T *pa, int na,
 	    goto Succeed;
 
 	  k = gallop_left (*pa, pb, nb, 0);
 	  bcount = k;
 	  if (k)
 	    {
 	      if (k < 0)
 		goto Fail;
-	      memmove (dest, pb, k * sizeof (T));
+	      std::memmove (dest, pb, k * sizeof (T));
 	      dest += k;
 	      pb += k;
 	      nb -= k;
 	      if (nb == 0)
 		goto Succeed;
 	    }
 	  *dest++ = *pa++;
 	  --na;
@@ -623,22 +624,22 @@ octave_sort<T>::merge_lo (T *pa, int na,
       ms.min_gallop = min_gallop;
     }
 
  Succeed:
   result = 0;
 
  Fail:
   if (na)
-    memcpy (dest, pa, na * sizeof (T));
+    std::memcpy (dest, pa, na * sizeof (T));
   return result;
 
  CopyB:
   /* The last element of pa belongs at the end of the merge. */
-  memmove (dest, pb, nb * sizeof (T));
+  std::memmove (dest, pb, nb * sizeof (T));
   dest[nb] = *pa;
 
   return 0;
 }
 
 /* Merge the na elements starting at pa with the nb elements starting at pb
  * in a stable way, in-place.  na and nb must be > 0, and pa + na == pb.
  * Must also have that *pb < *pa, that pa[na-1] belongs at the end of the
@@ -654,17 +655,17 @@ octave_sort<T>::merge_hi (T *pa, int na,
   int result = -1;	/* guilty until proved innocent */
   T *basea;
   T *baseb;
   int min_gallop = ms.min_gallop;
 
   if (MERGE_GETMEM (nb) < 0)
     return -1;
   dest = pb + nb - 1;
-  memcpy (ms.a, pb, nb * sizeof (T));
+  std::memcpy (ms.a, pb, nb * sizeof (T));
   basea = pa;
   baseb = ms.a;
   pb = ms.a + nb - 1;
   pa += na - 1;
 
   *dest-- = *pa--;
   --na;
   if (na == 0)
@@ -720,17 +721,17 @@ octave_sort<T>::merge_hi (T *pa, int na,
 	  if (k < 0)
 	    goto Fail;
 	  k = na - k;
 	  acount = k;
 	  if (k) 
 	    {
 	      dest -= k;
 	      pa -= k;
-	      memmove (dest+1, pa+1, k * sizeof (T));
+	      std::memmove (dest+1, pa+1, k * sizeof (T));
 	      na -= k;
 	      if (na == 0)
 		goto Succeed;
 	    }
 	  *dest-- = *pb--;
 	  --nb;
 	  if (nb == 1)
 	    goto CopyA;
@@ -739,17 +740,17 @@ octave_sort<T>::merge_hi (T *pa, int na,
 	  if (k < 0)
 	    goto Fail;
 	  k = nb - k;
 	  bcount = k;
 	  if (k) 
 	    {
 	      dest -= k;
 	      pb -= k;
-	      memcpy (dest+1, pb+1, k * sizeof (T));
+	      std::memcpy (dest+1, pb+1, k * sizeof (T));
 	      nb -= k;
 	      if (nb == 1)
 		goto CopyA;
 	      /* nb==0 is impossible now if the comparison
 	       * function is consistent, but we can't assume
 	       * that it is.
 	       */
 	      if (nb == 0)
@@ -764,24 +765,24 @@ octave_sort<T>::merge_hi (T *pa, int na,
       ms.min_gallop = min_gallop;
     }
 
 Succeed:
   result = 0;
 
 Fail:
   if (nb)
-    memcpy (dest-(nb-1), baseb, nb * sizeof (T));
+    std::memcpy (dest-(nb-1), baseb, nb * sizeof (T));
   return result;
 
 CopyA:
   /* The first element of pb belongs at the front of the merge. */
   dest -= na;
   pa -= na;
-  memmove (dest+1, pa+1, na * sizeof (T));
+  std::memmove (dest+1, pa+1, na * sizeof (T));
   *dest = *pb;
 
   return 0;
 }
 
 /* Merge the two runs at stack indices i and i+1.
  * Returns 0 on success, -1 on error.
  */
