# HG changeset patch
# User jwe
# Date 774734571 0
#      Wed Jul 20 20:02:51 1994 +0000
# Node ID 883197c5ad75184b194a879380fec935f7bfca45
# Parent  2ca256b77602bf859fcf86a69f27e091de775c27
[project @ 1994-07-20 20:02:51 by jwe]

diff --git a/libcruft/misc/lo-error.cc b/libcruft/misc/lo-error.cc
--- a/libcruft/misc/lo-error.cc
+++ b/libcruft/misc/lo-error.cc
@@ -1,12 +1,12 @@
 // error.cc                                             -*- C++ -*-
 /*
 
-Copyright (C) 1992, 1993 John W. Eaton
+Copyright (C) 1992, 1993, 1994 John W. Eaton
 
 This file is part of Octave.
 
 Octave is free software; you can redistribute it and/or modify it
 under the terms of the GNU General Public License as published by the
 Free Software Foundation; either version 2, or (at your option) any
 later version.
 
@@ -31,17 +31,17 @@ Software Foundation, 675 Mass Ave, Cambr
 
 #include "lo-error.h"
 
 liboctave_error_handler current_liboctave_error_handler = liboctave_fatal;
 
 static void
 verror (const char *name, const char *fmt, va_list args)
 {
-  if (name != (char *) NULL)
+  if (name)
     fprintf (stderr, "%s: ", name);
 
   vfprintf (stderr, fmt, args);
   fprintf (stderr, "\n");
   fflush (stderr);
 }
 
 void
diff --git a/liboctave/CColVector.cc b/liboctave/CColVector.cc
--- a/liboctave/CColVector.cc
+++ b/liboctave/CColVector.cc
@@ -74,17 +74,17 @@ ComplexColumnVector::resize (int n)
 {
   if (n < 0)
     {
       (*current_liboctave_error_handler)
 	("can't resize to negative dimension");
       return *this;
     }
 
-  Complex *new_data = (Complex *) NULL;
+  Complex *new_data = 0;
   if (n > 0)
     {
       new_data = new Complex [n];
       int min_len = len < n ? len : n;
 
       for (int i = 0; i < min_len; i++)
 	new_data[i] = data[i];
     }
diff --git a/liboctave/CDiagMatrix.cc b/liboctave/CDiagMatrix.cc
--- a/liboctave/CDiagMatrix.cc
+++ b/liboctave/CDiagMatrix.cc
@@ -77,17 +77,17 @@ ComplexDiagMatrix::resize (int r, int c)
   if (r < 0 || c < 0)
     {
       (*current_liboctave_error_handler)
 	("can't resize to negative dimensions");
       return *this;
     }
 
   int new_len = r < c ? r : c;
-  Complex *new_data = (Complex *) NULL;
+  Complex *new_data = 0;
   if (new_len > 0)
     {
       new_data = new Complex [new_len];
 
       int min_len = new_len < len ? new_len : len;
 
       for (int i = 0; i < min_len; i++)
 	new_data[i] = data[i];
@@ -108,17 +108,17 @@ ComplexDiagMatrix::resize (int r, int c,
   if (r < 0 || c < 0)
     {
       (*current_liboctave_error_handler)
 	("can't resize to negative dimensions");
       return *this;
     }
 
   int new_len = r < c ? r : c;
-  Complex *new_data = (Complex *) NULL;
+  Complex *new_data = 0;
   if (new_len > 0)
     {
       new_data = new Complex [new_len];
 
       int min_len = new_len < len ? new_len : len;
 
       for (int i = 0; i < min_len; i++)
 	new_data[i] = data[i];
@@ -142,17 +142,17 @@ ComplexDiagMatrix::resize (int r, int c,
   if (r < 0 || c < 0)
     {
       (*current_liboctave_error_handler)
 	("can't resize to negative dimensions");
       return *this;
     }
 
   int new_len = r < c ? r : c;
-  Complex *new_data = (Complex *) NULL;
+  Complex *new_data = 0;
   if (new_len > 0)
     {
       new_data = new Complex [new_len];
 
       int min_len = new_len < len ? new_len : len;
 
       for (int i = 0; i < min_len; i++)
 	new_data[i] = data[i];
@@ -443,17 +443,17 @@ ComplexDiagMatrix::row (int i) const
     retval.elem (i) = elem (i, i);
 
   return retval;
 }
 
 ComplexRowVector
 ComplexDiagMatrix::row (char *s) const
 {
-  if (s == (char *) NULL)
+  if (! s)
     {
       (*current_liboctave_error_handler) ("invalid row selection");
       return ComplexRowVector (); 
     }
 
   char c = *s;
   if (c == 'f' || c == 'F')
     return row (0);
@@ -482,17 +482,17 @@ ComplexDiagMatrix::column (int i) const
     retval.elem (i) = elem (i, i);
 
   return retval;
 }
 
 ComplexColumnVector
 ComplexDiagMatrix::column (char *s) const
 {
-  if (s == (char *) NULL)
+  if (! s)
     {
       (*current_liboctave_error_handler) ("invalid column selection");
       return ColumnVector (); 
     }
 
   char c = *s;
   if (c == 'f' || c == 'F')
     return column (0);
diff --git a/liboctave/CMatrix.cc b/liboctave/CMatrix.cc
--- a/liboctave/CMatrix.cc
+++ b/liboctave/CMatrix.cc
@@ -122,17 +122,17 @@ ComplexMatrix::resize (int r, int c)
   if (r < 0 || c < 0)
     {
       (*current_liboctave_error_handler)
 	("can't resize to negative dimensions");
       return *this;
     }
 
   int new_len = r * c;
-  Complex* new_data = (Complex *) NULL;
+  Complex* new_data = 0;
   if (new_len > 0)
     {
       new_data = new Complex [new_len];
 
       int min_r = nr < r ? nr : r;
       int min_c = nc < c ? nc : c;
 
       for (int j = 0; j < min_c; j++)
@@ -155,17 +155,17 @@ ComplexMatrix::resize (int r, int c, dou
   if (r < 0 || c < 0)
     {
       (*current_liboctave_error_handler)
 	("can't resize to negative dimensions");
       return *this;
     }
 
   int new_len = r * c;
-  Complex *new_data = (Complex *) NULL;
+  Complex *new_data = 0;
   if (new_len > 0)
     {
       new_data = new Complex [new_len];
 
 // There may be faster or cleaner ways to do this.
 
       if (r > nr || c > nc)
 	copy (new_data, new_len, val);
@@ -193,17 +193,17 @@ ComplexMatrix::resize (int r, int c, con
   if (r < 0 || c < 0)
     {
       (*current_liboctave_error_handler)
 	("can't resize to negative dimensions");
       return *this;
     }
 
   int new_len = r * c;
-  Complex *new_data = (Complex *) NULL;
+  Complex *new_data = 0;
   if (new_len > 0)
     {
       new_data = new Complex [new_len];
 
 // There may be faster or cleaner ways to do this.
 
       if (r > nr || c > nc)
 	copy (new_data, new_len, val);
@@ -840,17 +840,17 @@ ComplexMatrix::row (int i) const
     retval.elem (j) = elem (i, j);
 
   return retval;
 }
 
 ComplexRowVector
 ComplexMatrix::row (char *s) const
 {
-  if (s == (char *) NULL)
+  if (! s)
     {
       (*current_liboctave_error_handler) ("invalid row selection");
       return ComplexRowVector ();
     }
 
   char c = *s;
   if (c == 'f' || c == 'F')
     return row (0);
@@ -878,17 +878,17 @@ ComplexMatrix::column (int i) const
     retval.elem (j) = elem (j, i);
 
   return retval;
 }
 
 ComplexColumnVector
 ComplexMatrix::column (char *s) const
 {
-  if (s == (char *) NULL)
+  if (! s)
     {
       (*current_liboctave_error_handler) ("invalid column selection");
       return ComplexColumnVector ();
     }
 
   char c = *s;
   if (c == 'f' || c == 'F')
     return column (0);
@@ -1698,17 +1698,17 @@ operator * (const ComplexMatrix& m, cons
 	("nonconformant matrix multiplication attempted");
       return ComplexMatrix ();
     }
 
   if (nr == 0 || nc == 0 || a_nc == 0)
     return ComplexMatrix (nr, nc, 0.0);
 
   Complex *c = new Complex [nr*a_nc];
-  Complex *ctmp = (Complex *) NULL;
+  Complex *ctmp = 0;
 
   for (int j = 0; j < a.length (); j++)
     {
       int idx = j * nr;
       ctmp = c + idx;
       if (a.elem (j, j) == 1.0)
 	{
 	  for (int i = 0; i < nr; i++)
@@ -1791,17 +1791,17 @@ operator * (const ComplexMatrix& m, cons
 	("nonconformant matrix multiplication attempted");
       return ComplexMatrix ();
     }
 
   if (nr == 0 || nc == 0 || a_nc == 0)
     return ComplexMatrix (nr, nc, 0.0);
 
   Complex *c = new Complex [nr*a_nc];
-  Complex *ctmp = (Complex *) NULL;
+  Complex *ctmp = 0;
 
   for (int j = 0; j < a.length (); j++)
     {
       int idx = j * nr;
       ctmp = c + idx;
       if (a.elem (j, j) == 1.0)
 	{
 	  for (int i = 0; i < nr; i++)
diff --git a/liboctave/CRowVector.cc b/liboctave/CRowVector.cc
--- a/liboctave/CRowVector.cc
+++ b/liboctave/CRowVector.cc
@@ -73,17 +73,17 @@ ComplexRowVector::resize (int n)
 {
   if (n < 0)
     {
       (*current_liboctave_error_handler)
 	("can't resize to negative dimension");
       return *this;
     }
 
-  Complex *new_data = (Complex *) NULL;
+  Complex *new_data = 0;
   if (n > 0)
     {
       new_data = new Complex [n];
       int min_len = len < n ? len : n;
 
       for (int i = 0; i < min_len; i++)
 	new_data[i] = data[i];
     }
diff --git a/liboctave/NPSOL.cc b/liboctave/NPSOL.cc
--- a/liboctave/NPSOL.cc
+++ b/liboctave/NPSOL.cc
@@ -92,17 +92,17 @@ npsol_objfun (int *mode, int *n, double 
 
 #if defined (sun) && defined (__GNUC__)
       assign_double (objf, value);
 #else
       *objf = value;
 #endif
     }
 
-  if ((*mode == 1 || *mode == 2) && user_grad != NULL)
+  if ((*mode == 1 || *mode == 2) && user_grad)
     {
       Vector tmp_grad (nn);
 
       tmp_grad = (*user_grad) (tmp_x);
 
       if (tmp_grad.length () == 0)
 	*mode = -1;
       else
@@ -134,17 +134,17 @@ npsol_confun (int *mode, int *ncnln, int
       return 0;
     }
   else
     {
       for (i = 0; i < nncnln; i++)
 	cons[i] = tmp_c.elem (i);
     }
 
-  if (user_jac != NULL)
+  if (user_jac)
     {
       Matrix tmp_jac (nncnln, nn);
 
       tmp_jac = (*user_jac) (tmp_x);
 
       if (tmp_jac.rows () == 0 || tmp_jac.columns () == 0)
 	*mode = -1;
       else
@@ -286,23 +286,23 @@ NPSOL::minimize (double& objf, int& info
 
   user_phi  = phi.objective_function ();
   user_grad = phi.gradient_function ();
   user_g    = nlc.function ();
   user_jac  = nlc.jacobian_function ();
 
   pass_options_to_npsol ();
 
-  if (user_jac == NULL && user_grad == NULL)
+  if (! user_jac && ! user_grad)
     F77_FCN (npoptn) ("Derivative Level 0", 18L);
-  else if (user_jac == NULL && user_grad != NULL)
+  else if (! user_jac && user_grad)
     F77_FCN (npoptn) ("Derivative Level 1", 18L);
-  else if (user_jac != NULL && user_grad == NULL)
+  else if (user_jac && ! user_grad)
     F77_FCN (npoptn) ("Derivative Level 2", 18L);
-  else if (user_jac != NULL && user_grad != NULL)
+  else if (user_jac && user_grad)
     F77_FCN (npoptn) ("Derivative Level 3", 18L);
 
   int attempt = 0;
   while (attempt++ < 5)
     {
 
       F77_FCN (npsol) (&n, &nclin, &ncnln, &nrowa, &nrowj, &nrowr, pclin,
 		       clow, cup, npsol_confun, npsol_objfun, &inform,
diff --git a/liboctave/dColVector.cc b/liboctave/dColVector.cc
--- a/liboctave/dColVector.cc
+++ b/liboctave/dColVector.cc
@@ -67,17 +67,17 @@ ColumnVector::resize (int n)
 {
   if (n < 0)
     {
       (*current_liboctave_error_handler)
 	("can't resize to negative dimension");
       return *this;
     }
 
-  double *new_data = (double *) NULL;
+  double *new_data = 0;
   if (n > 0)
     {
       new_data = new double [n];
       int min_len = len < n ? len : n;
 
       for (int i = 0; i < min_len; i++)
 	new_data[i] = data[i];
     }
diff --git a/liboctave/dDiagMatrix.cc b/liboctave/dDiagMatrix.cc
--- a/liboctave/dDiagMatrix.cc
+++ b/liboctave/dDiagMatrix.cc
@@ -56,17 +56,17 @@ DiagMatrix::resize (int r, int c)
   if (r < 0 || c < 0)
     {
       (*current_liboctave_error_handler)
 	("can't resize to negative dimensions");
       return *this;
     }
 
   int new_len = r < c ? r : c;
-  double *new_data = (double *) NULL;
+  double *new_data = 0;
   if (new_len > 0)
     {
       new_data = new double [new_len];
 
       int min_len = new_len < len ? new_len : len;
 
       for (int i = 0; i < min_len; i++)
 	new_data[i] = data[i];
@@ -87,17 +87,17 @@ DiagMatrix::resize (int r, int c, double
   if (r < 0 || c < 0)
     {
       (*current_liboctave_error_handler)
 	("can't resize to negative dimensions");
       return *this;
     }
 
   int new_len = r < c ? r : c;
-  double *new_data = (double *) NULL;
+  double *new_data = 0;
   if (new_len > 0)
     {
       new_data = new double [new_len];
 
       int min_len = new_len < len ? new_len : len;
 
       for (int i = 0; i < min_len; i++)
 	new_data[i] = data[i];
@@ -260,17 +260,17 @@ DiagMatrix::row (int i) const
     retval.elem (i) = elem (i, i);
 
   return retval;
 }
 
 RowVector
 DiagMatrix::row (char *s) const
 {
-  if (s == (char *) NULL)
+  if (! s)
     {
       (*current_liboctave_error_handler) ("invalid row selection");
       return RowVector (); 
     }
 
   char c = *s;
   if (c == 'f' || c == 'F')
     return row (0);
@@ -299,17 +299,17 @@ DiagMatrix::column (int i) const
     retval.elem (i) = elem (i, i);
 
   return retval;
 }
 
 ColumnVector
 DiagMatrix::column (char *s) const
 {
-  if (s == (char *) NULL)
+  if (! s)
     {
       (*current_liboctave_error_handler) ("invalid column selection");
       return ColumnVector (); 
     }
 
   char c = *s;
   if (c == 'f' || c == 'F')
     return column (0);
diff --git a/liboctave/dMatrix.cc b/liboctave/dMatrix.cc
--- a/liboctave/dMatrix.cc
+++ b/liboctave/dMatrix.cc
@@ -108,17 +108,17 @@ Matrix::resize (int r, int c)
   if (r < 0 || c < 0)
     {
       (*current_liboctave_error_handler)
 	("can't resize to negative dimensions");
       return *this;
     }
 
   int new_len = r * c;
-  double* new_data = (double *) NULL;
+  double* new_data = 0;
   if (new_len > 0)
     {
       new_data = new double [new_len];
 
       int min_r = nr < r ? nr : r;
       int min_c = nc < c ? nc : c;
 
       for (int j = 0; j < min_c; j++)
@@ -141,17 +141,17 @@ Matrix::resize (int r, int c, double val
   if (r < 0 || c < 0)
     {
       (*current_liboctave_error_handler)
 	("can't resize to negative dimensions");
       return *this;
     }
 
   int new_len = r * c;
-  double *new_data = (double *) NULL;
+  double *new_data = 0;
   if (new_len > 0)
     {
       new_data = new double [new_len];
 
 // There may be faster or cleaner ways to do this.
 
       if (r > nr || c > nc)
 	copy (new_data, new_len, val);
@@ -489,17 +489,17 @@ Matrix::row (int i) const
     retval.elem (j) = elem (i, j);
 
   return retval;
 }
 
 RowVector
 Matrix::row (char *s) const
 {
-  if (s == (char *) NULL)
+  if (! s)
     {
       (*current_liboctave_error_handler) ("invalid row selection");
       return RowVector ();
     }
 
   char c = *s;
   if (c == 'f' || c == 'F')
     return row (0);
@@ -527,17 +527,17 @@ Matrix::column (int i) const
     retval.elem (j) = elem (j, i);
 
   return retval;
 }
 
 ColumnVector
 Matrix::column (char *s) const
 {
-  if (s == (char *) NULL)
+  if (! s)
     {
       (*current_liboctave_error_handler) ("invalid column selection");
       return ColumnVector ();
     }
 
   char c = *s;
   if (c == 'f' || c == 'F')
     return column (0);
@@ -1324,17 +1324,17 @@ operator * (const Matrix& m, const DiagM
 	("nonconformant matrix multiplication attempted");
       return Matrix ();
     }
 
   if (nr == 0 || nc == 0 || a_nc == 0)
     return Matrix (nr, a_nc, 0.0);
 
   double *c = new double [nr*a_nc];
-  double *ctmp = (double *) NULL;
+  double *ctmp = 0;
 
   int a_len = a.length ();
   for (int j = 0; j < a_len; j++)
     {
       int idx = j * nr;
       ctmp = c + idx;
       if (a.elem (j, j) == 1.0)
 	{
@@ -1419,17 +1419,17 @@ operator * (const Matrix& m, const Compl
 	("nonconformant matrix multiplication attempted");
       return ComplexMatrix ();
     }
 
   if (nr == 0 || nc == 0 || a_nc == 0)
     return ComplexMatrix (nr, a_nc, 0.0);
 
   Complex *c = new Complex [nr*a_nc];
-  Complex *ctmp = (Complex *) NULL;
+  Complex *ctmp = 0;
 
   for (int j = 0; j < a.length (); j++)
     {
       int idx = j * nr;
       ctmp = c + idx;
       if (a.elem (j, j) == 1.0)
 	{
 	  for (int i = 0; i < nr; i++)
diff --git a/liboctave/dRowVector.cc b/liboctave/dRowVector.cc
--- a/liboctave/dRowVector.cc
+++ b/liboctave/dRowVector.cc
@@ -69,17 +69,17 @@ RowVector::resize (int n)
 {
   if (n < 0)
     {
       (*current_liboctave_error_handler)
 	("can't resize to negative dimension");
       return *this;
     }
 
-  double *new_data = (double *) NULL;
+  double *new_data = 0;
   if (n > 0)
     {
       new_data = new double [n];
       int min_len = len < n ? len : n;
 
       for (int i = 0; i < min_len; i++)
 	new_data[i] = data[i];
     }
diff --git a/liboctave/dbleSCHUR.cc b/liboctave/dbleSCHUR.cc
--- a/liboctave/dbleSCHUR.cc
+++ b/liboctave/dbleSCHUR.cc
@@ -89,18 +89,18 @@ SCHUR::init (const Matrix& a, const char
 
   double *wr = new double [n];
   double *wi = new double [n];
   double *q = new double [n*n];
   double *work = new double [lwork];
 
 // These are not referenced for the non-ordered Schur routine.
 
-  int *iwork = (int *) NULL;
-  int *bwork = (int *) NULL;
+  int *iwork = 0;
+  int *bwork = 0;
   if (*ord == 'A' || *ord == 'D' || *ord == 'a' || *ord == 'd')
     {
       iwork = new int [liwork];
       bwork = new int [n];
     }
 
   if (*ord == 'A' || *ord == 'a')
     {
