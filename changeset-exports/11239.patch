# HG changeset patch
# User Kai Habel <kai.habel@gmx.de>
# Date 1289484063 -3600
#      Thu Nov 11 15:01:03 2010 +0100
# Node ID 5fa7667f90e5337203d345e4329fcd5592bd8d16
# Parent  1783b360976f4268a823327e5730a59a26db6bb6
Add prefix ID_ to property ids to avoid name clash on windows

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,16 @@
+2010-11-11  Kai Habel  <kai.habel@gmx.de>
+
+	* fltk-backend.cc (plot_window::uimenu_update,
+	fltk_backend::update): Add prefix 'ID_' to property ids to avoid
+	name clash on windows systems.
+	* graphics.cc (gnuplot_backend::update): Dito.
+	* genprops.awk (emit_declarations, emit_source): Dito
+
 2010-11-11  John W. Eaton  <jwe@octave.org>
 
 	Bug #31165.
 
 	* symtab.h (symbol_table::parent_classes): New static function.
 	* symtab.cc (out_of_date_check): Also look for methods defined
 	in parent classes of dispatch_type.
 	(symbol_table::fcn_info::fcn_info_rep::load_class_method): Call
diff --git a/src/DLD-FUNCTIONS/fltk_backend.cc b/src/DLD-FUNCTIONS/fltk_backend.cc
--- a/src/DLD-FUNCTIONS/fltk_backend.cc
+++ b/src/DLD-FUNCTIONS/fltk_backend.cc
@@ -791,44 +791,44 @@ public:
           dynamic_cast<uimenu::properties&> (uimenu_obj.get_properties ());
         std::string fltk_label = uimenup.get_fltk_label();
         graphics_object fig = xget_ancestor(uimenu_obj,"figure");
         figure::properties& figp =
           dynamic_cast<figure::properties&> (fig.get_properties ());
         
         switch(id)
           {
-            case base_properties::BEINGDELETED:
+            case base_properties::ID_BEINGDELETED:
               uimenu->remove_from_menu (uimenup);
               break;
-            case base_properties::VISIBLE:
+            case base_properties::ID_VISIBLE:
               uimenu->update_visible (uimenup);
               break;
-            case uimenu::properties::ACCELERATOR:
+            case uimenu::properties::ID_ACCELERATOR:
               uimenu->update_accelerator (uimenup);
               break;
-            case uimenu::properties::CALLBACK:
+            case uimenu::properties::ID_CALLBACK:
               uimenu->update_callback (uimenup);
               break;
-            case uimenu::properties::CHECKED:
+            case uimenu::properties::ID_CHECKED:
               uimenu->add_to_menu (figp);//rebuilding entire menu
               break;
-            case uimenu::properties::ENABLE:
+            case uimenu::properties::ID_ENABLE:
               uimenu->update_enable (uimenup);
               break;
-            case uimenu::properties::FOREGROUNDCOLOR:
+            case uimenu::properties::ID_FOREGROUNDCOLOR:
               uimenu->update_foregroundcolor (uimenup);
               break;
-            case uimenu::properties::LABEL:
+            case uimenu::properties::ID_LABEL:
               uimenu->add_to_menu (figp);//rebuilding entire menu
               break;
-            case uimenu::properties::POSITION:
+            case uimenu::properties::ID_POSITION:
               uimenu->add_to_menu (figp);//rebuilding entire menu
               break;
-            case uimenu::properties::SEPARATOR:
+            case uimenu::properties::ID_SEPARATOR:
               uimenu->update_seperator (uimenup);
               break;
           }
           
           if (uimenu->items_to_show ())
             show_menubar ();
           else
             hide_menubar ();
@@ -1799,35 +1799,35 @@ public:
         
         if (! ov.is_empty ())
           {
             const figure::properties& fp =
               dynamic_cast<const figure::properties&> (go.get_properties ());
             
             switch (id)
               {
-                case base_properties::VISIBLE:
+                case base_properties::ID_VISIBLE:
                   figure_manager::toggle_window_visibility (ov.string_value (), fp.is_visible ());
                   break;
-                case figure::properties::MENUBAR:
+                case figure::properties::ID_MENUBAR:
 		  figure_manager::toggle_menubar_visibility (ov.string_value (), fp.menubar_is("figure"));
                   break;
-                case figure::properties::NAME:
-		case figure::properties::CURRENTAXES:
+                case figure::properties::ID_NAME:
+		case figure::properties::ID_CURRENTAXES:
                   figure_manager::update_canvas (go.get_handle (), fp.get_currentaxes ());
                   break;
-                case figure::properties::NUMBERTITLE:
+                case figure::properties::ID_NUMBERTITLE:
                   figure_manager::set_name (ov.string_value ());
                   break;
               }
           }
       }
     else if (go.isa ("uimenu"))
       {
-        if (id == uimenu::properties::LABEL)
+        if (id == uimenu::properties::ID_LABEL)
           uimenu_set_fltk_label (go);
         
         graphics_object fig = xget_ancestor(go,"figure");
         figure_manager::uimenu_update(fig.get_handle (), go.get_handle (), id);
       }
   }
 
   void redraw_figure (const graphics_object& go) const
diff --git a/src/genprops.awk b/src/genprops.awk
--- a/src/genprops.awk
+++ b/src/genprops.awk
@@ -278,17 +278,17 @@ function emit_declarations ()
   if (idx > 0)
     print "\npublic:\n";
   
   if (idx > 0)
   {
     printf ("  enum\n  {");
     for (i = 1; i <= idx; i++)
     {
-      printf ("%s\n    %s = %d", (i == 1 ? "" : ","), toupper(name[i]), pcount);
+      printf ("%s\n    ID_%s = %d", (i == 1 ? "" : ","), toupper(name[i]), pcount);
       pcount++;
     }
     printf ("\n  };\n\n");
     pcount = (int(pcount/1000)+1)*1000;
   }
 
   for (i = 1; i <= idx; i++)
   {
@@ -420,17 +420,17 @@ function emit_source ()
 
     printf ("{\n");
 
     for (i = 1; i <= idx; i++)
     {
 ##    printf ("  insert_static_property (\"%s\", %s);\n", name[i], name[i]);
       if (ptype[i])
       {
-        printf ("  %s.set_id (%s);\n", name[i], toupper(name[i]));
+        printf ("  %s.set_id (ID_%s);\n", name[i], toupper(name[i]));
         if (hidden[i])
           printf ("  %s.set_hidden (true);\n", name[i]);
       }
     }
 
     printf ("  init ();\n}\n\n");
 
     ## set method
diff --git a/src/graphics.cc b/src/graphics.cc
--- a/src/graphics.cc
+++ b/src/graphics.cc
@@ -2340,17 +2340,17 @@ public:
         {
           graphics_object obj (go);
 
           figure::properties& props =
               dynamic_cast<figure::properties&> (obj.get_properties ());
 
           switch (id)
             {
-            case base_properties::VISIBLE:
+            case base_properties::ID_VISIBLE:
               if (! props.is_visible ())
                 {
                   send_quit (props.get___plot_stream__ ());
                   props.set___plot_stream__ (Matrix ());
                   props.set___enhanced__ (false);
                 }
               break;
             }
