# HG changeset patch
# User jwe
# Date 1201853945 0
#      Fri Feb 01 08:19:05 2008 +0000
# Node ID 3e450caf93f2959920d25bb612312787af622763
# Parent  7d06a404b8f904d77a68a1c0c08555a609be01cf
[project @ 2008-02-01 08:19:05 by jwe]

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,13 @@
+2008-02-01  John W. Eaton  <jwe@octave.org>
+
+	* symtab.cc (Fset_variable, Fvariable_value):
+	New functions, but commented out for now.
+
 2008-01-30  Michael Goffioul  <michael.goffioul@gmail.com>
 
 	* graphics.h.in (axes::properties::get_transform_matrix,
 	axes::properties::get_inverse_transform_matrix,
 	axes::properties::get_opengl_matrix_1,
 	axes::properties::get_opengl_matrix_2,
 	axes::properties::get_transform_zlim): New accessors.
 	(base_properties::is_clipping): New accessor.
diff --git a/src/symtab.cc b/src/symtab.cc
--- a/src/symtab.cc
+++ b/src/symtab.cc
@@ -793,13 +793,62 @@ need to recompiled.\n\
 	error ("ignore_function_time_stamp: expecting argument to be character string");
     }
   else if (nargin > 1)
     print_usage ();
 
   return retval;
 }
 
+#if 0
+
+// FIXME -- should we have functions like this in Octave?
+
+DEFUN (set_variable, args, , "set_variable (NAME, VALUE)")
+{
+  octave_value retval;
+
+  if (args.length () == 2)
+    {
+      std::string name = args(0).string_value ();
+
+      if (! error_state)
+	symbol_table::varref (name) = args(1);
+      else
+	error ("set_variable: expecting variable name as first argument");
+    }
+  else
+    print_usage ();
+
+  return retval;
+}
+
+DEFUN (variable_value, args, , "VALUE = variable_value (NAME)")
+{
+  octave_value retval;
+
+  if (args.length () == 1)
+    {
+      std::string name = args(0).string_value ();
+
+      if (! error_state)
+	{
+	  retval = symbol_table::varval (name);
+
+	  if (retval.is_undefined ())
+	    error ("variable_value: `%s' is not a variable in the current scope",
+		   name.c_str ());
+	}
+      else
+	error ("variable_value: expecting variable name as first argument");
+    }
+  else
+    print_usage ();
+
+  return retval;
+}
+#endif
+
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
