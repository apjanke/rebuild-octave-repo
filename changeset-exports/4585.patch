# HG changeset patch
# User jwe
# Date 1068271865 0
#      Sat Nov 08 06:11:05 2003 +0000
# Node ID a1ac9ab474a1a086512079ce27d59534c9988bfd
# Parent  f7697d703481c2bf556f37d66f0c103603821336
[project @ 2003-11-08 06:07:33 by jwe]

diff --git a/liboctave/Array.cc b/liboctave/Array.cc
--- a/liboctave/Array.cc
+++ b/liboctave/Array.cc
@@ -1295,35 +1295,35 @@ template <class T>
 void
 Array<T>::maybe_delete_elements (idx_vector&, idx_vector&, idx_vector&)
 {
   assert (0);
 }
 
 template <class T>
 void
-Array<T>::maybe_delete_elements (Array<idx_vector>& idx, const T& rfv)
+Array<T>::maybe_delete_elements (Array<idx_vector>& ra_idx, const T& rfv)
 {
-  int n_idx = idx.length ();
+  int n_idx = ra_idx.length ();
 
   dim_vector lhs_dims = dims ();
 
   dim_vector idx_is_colon;
   idx_is_colon.resize (n_idx);
 
   dim_vector idx_is_colon_equiv;
   idx_is_colon_equiv.resize (n_idx);
 
   // Initialization of colon arrays.
 
   for (int i = 0; i < n_idx; i++)
     {
-      idx_is_colon_equiv(i) = idx(i).is_colon_equiv (lhs_dims(i), 1);
-
-      idx_is_colon(i) = idx(i).is_colon ();
+      idx_is_colon_equiv(i) = ra_idx(i).is_colon_equiv (lhs_dims(i), 1);
+
+      idx_is_colon(i) = ra_idx(i).is_colon ();
     }
 
   if (all_ones (idx_is_colon) || all_ones (idx_is_colon_equiv))
     {
       // A(:,:,:) -- we are deleting elements in all dimensions, so
       // the result is [](0x0x0).
 
       dim_vector zeros;
@@ -1372,19 +1372,19 @@ Array<T>::maybe_delete_elements (Array<i
 	  if (! idx_is_colon (i))
 	    non_col = i;
 	}
 
       // The length of the non-colon dimension.
 
       int non_col_dim = lhs_dims (non_col);
 
-      idx(non_col).sort (true);
-
-      int num_to_delete = idx(non_col).length (lhs_dims (non_col));
+      ra_idx(non_col).sort (true);
+
+      int num_to_delete = ra_idx(non_col).length (lhs_dims (non_col));
 
       if (num_to_delete > 0)
 	{
 	  int temp = num_ones (lhs_dims);
 
 	  if (non_col_dim == 1)
 	    temp--;
 
@@ -1402,17 +1402,17 @@ Array<T>::maybe_delete_elements (Array<i
 	      // New length of non-colon dimension
 	      // (calculated in the next for loop)
 
 	      int new_dim = non_col_dim;
 
 	      int iidx = 0;
 
 	      for (int j = 0; j < non_col_dim; j++)
-		if (j == idx(non_col).elem (iidx))
+		if (j == ra_idx(non_col).elem (iidx))
 		  {
 		    iidx++;
 
 		    new_dim--;
 
 		    if (iidx == num_to_delete)
 		      break;
 		  }
@@ -1453,30 +1453,30 @@ Array<T>::maybe_delete_elements (Array<i
 		  int numidx = 0;
 
 		  int n = length ();
 
 		  for (int i =0; i < lhs_dims.length (); i++)
 		    if (i != non_col)
 		      num_elem *= lhs_dims (i);
 
-		  num_elem *= idx(non_col).capacity ();
+		  num_elem *= ra_idx(non_col).capacity ();
 
 		  for (int i = 0; i < n; i++)
 		    {
 		      if (numidx < num_elem
-			  && is_in (result_idx(non_col), idx(non_col)))
+			  && is_in (result_idx(non_col), ra_idx(non_col)))
 			numidx++;
 
 		      else
 			{
 			  Array<int> temp_result_idx = result_idx;
 
-			  int num_lgt
-			    = how_many_lgt (result_idx(non_col), idx(non_col));
+			  int num_lgt = how_many_lgt (result_idx(non_col),
+						      ra_idx(non_col));
 
 			  temp_result_idx(non_col) -= num_lgt;
 
 			  int kidx
 			    = ::compute_index (temp_result_idx, new_lhs_dim);
 
 			  new_data[kidx] = elem (result_idx);
 			}
diff --git a/liboctave/Array.h b/liboctave/Array.h
--- a/liboctave/Array.h
+++ b/liboctave/Array.h
@@ -153,17 +153,17 @@ protected:
       idx (0), idx_count (0) { }
 
   Array (T *d, const dim_vector& dims)
     : rep (new typename Array<T>::ArrayRep (d, get_size (dims))),
       dimensions (dims), idx (0), idx_count (0) { }
 
 private:
 
-  Array<T>::ArrayRep *nil_rep (void) const
+  typename Array<T>::ArrayRep *nil_rep (void) const
     {
       static typename Array<T>::ArrayRep *nr
 	= new typename Array<T>::ArrayRep ();
 
       return nr;
     }
 
 public:
diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,18 @@
+2003-11-08  John Eaton  <osc0383@coe3.osc.edu>
+
+	* Array.h (Array<T>::nil_rep): Qualify return type with typename.
+
+	* mk-ops.awk: Delete elements of bool_headers array individually.
+
+2003-11-07  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* Array.cc (maybe_delete_elements): Rename arg idx to ra_idx.
+
 2003-10-31  Petter Risholm  <risholm@stud.ntnu.no>
 
 	* mx-inlines.cc (MX_ND_CUMULATIVE_OP): New macro.
 
 	* CNDArray.cc, CNDArray.h (ComplexNDArray::cumsum,
 	ComplexNDArray::cumprod): Return ComplexNDArray.  Handle N-d arrays.
 	* dNDArray.cc, dNDArray.h (NDArray::cumsum, NDArray::cumprod):
 	Return NDArray.  Handle N-d arrays.
diff --git a/liboctave/mk-ops.awk b/liboctave/mk-ops.awk
--- a/liboctave/mk-ops.awk
+++ b/liboctave/mk-ops.awk
@@ -59,17 +59,16 @@ BEGIN {
 	  if (lhs_conv == "NONE")
 	    lhs_conv = "";
 
 	  if (rhs_conv == "NONE")
 	    rhs_conv = "";
 
 	  zero_val = (NF > n) ? $(++n) : "";
 
-	  delete bool_headers;
 	  k = 0
 	  while (NF > n)
 	    bool_headers[k++] = $(++n);
 
 	  cc_file = sprintf ("%s-%s-%s.cc", prefix, lhs_tag, rhs_tag);
 	  h_file = sprintf ("%s-%s-%s.h", prefix, lhs_tag, rhs_tag);
 
 	  if (list_cc_files)
@@ -150,17 +149,20 @@ BEGIN {
 
 	  print "#ifdef HAVE_CONFIG_H" >> cc_file;
 	  print "#include <config.h>" >> cc_file;
 	  print "#endif" >> cc_file;
 
 	  printf ("#include \"%s\"\n", h_file) >> cc_file;
 
 	  for (i in bool_headers)
-	    printf ("#include \"%s\"\n", bool_headers[i]) >> cc_file;
+	    {
+	      printf ("#include \"%s\"\n", bool_headers[i]) >> cc_file;
+	      delete bool_headers[i];
+	    }
 
           if (result_header)
 	    printf ("#include \"%s\"\n", result_header) >> cc_file;
 
           if (lhs_header && ! (lhs_header == result_header))
 	    printf ("#include \"%s\"\n", lhs_header) >> cc_file;
 
           if (rhs_header && ! (rhs_header == lhs_header || rhs_header == result_header))
