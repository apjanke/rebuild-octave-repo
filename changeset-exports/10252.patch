# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1265186528 18000
#      Wed Feb 03 03:42:08 2010 -0500
# Node ID 2fcc927a87573a55d2eb9dcb7729665b101d7165
# Parent  28e5a5f826bcd99f748dbd67147ac2ce9f83464a
liboctave/file-ops.h: avoid gnulib #define for canonicalize_file_name

diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,13 @@
+2010-02-03  John W. Eaton  <jwe@octave.org>
+
+	* file-ops.h (octave_canonicalize_file_name): Rename from
+	file_ops::canonicalize_file_name.
+
 2010-02-03  John W. Eaton  <jwe@octave.org>
 
 	* file-ops.cc (canonicalize_file_name):
 	Don't pass current directory to octave_env::make_absolute.
 	* cmd-edit.cc (do_decode_prompt_string): Likewise.
 
 	* oct-env.h (octave_env::get_current_directory):
 	Rename from octave_env::getcwd.
diff --git a/liboctave/file-ops.cc b/liboctave/file-ops.cc
--- a/liboctave/file-ops.cc
+++ b/liboctave/file-ops.cc
@@ -354,141 +354,16 @@ file_ops::concat (const std::string& dir
   return dir.empty ()
     ? file
     : (is_dir_sep (dir[dir.length()-1])
        ? dir + file
        : dir + dir_sep_char () + file);
 }
 
 
-std::string
-file_ops::canonicalize_file_name (const std::string& name)
-{
-  std::string msg;
-  return canonicalize_file_name (name, msg);
-}
-
-std::string
-file_ops::canonicalize_file_name (const std::string& name, std::string& msg)
-{
-  msg = std::string ();
-
-  std::string retval;
-
-#if defined (HAVE_CANONICALIZE_FILE_NAME)
-
-  char *tmp = ::canonicalize_file_name (name.c_str ());
-
-  if (tmp)
-    {
-      retval = tmp;
-      free (tmp);
-    }
-
-#elif defined (HAVE_RESOLVEPATH)
-
-#if !defined (errno)
-extern int errno;
-#endif
-
-#if !defined (__set_errno)
-# define __set_errno(Val) errno = (Val)
-#endif
-
-  if (name.empty ())
-    {
-      __set_errno (ENOENT);
-      return retval;
-    }
-
-  // All known hosts with resolvepath (e.g. Solaris 7) don't turn
-  // relative names into absolute ones, so prepend the working
-  // directory if the path is not absolute.
-
-  std::string absolute_name = octave_env::make_absolute (name);
-
-  size_t resolved_size = absolute_name.length ();
-
-  while (true)
-    {
-      resolved_size = 2 * resolved_size + 1;
-
-      OCTAVE_LOCAL_BUFFER (char, resolved, resolved_size);
-
-      int resolved_len
-        = resolvepath (absolute_name.c_str (), resolved, resolved_size);
-
-      if (resolved_len < 0)
-        break;
-
-      if (resolved_len < resolved_size)
-        {
-          retval = resolved;
-          break;
-        }
-    }
-
-#elif defined (__WIN32__)
-
-  int n = 1024;
-
-  std::string win_path (n, '\0');
-
-  while (true)
-    {
-      int status = GetFullPathName (name.c_str (), n, &win_path[0], 0);
-
-      if (status == 0)
-        break;
-      else if (status < n)
-        {
-          win_path.resize (status);
-          retval = win_path;
-          break;
-        }
-      else
-        {
-          n *= 2;
-          win_path.resize (n);
-        }
-    }
-
-#elif defined (HAVE_REALPATH)
-
-#if !defined (__set_errno)
-# define __set_errno(Val) errno = (Val)
-#endif
-
-  if (name.empty ())
-    {
-      __set_errno (ENOENT);
-      return retval;
-    }
-
-  OCTAVE_LOCAL_BUFFER (char, buf, PATH_MAX);
-
-  if (::realpath (name.c_str (), buf))
-    retval = buf;
-
-#else
-
-  // FIXME -- provide replacement here...
-  retval = name;
-
-#endif
-
-  if (retval.empty ())
-    {
-      using namespace std;
-      msg = strerror (errno);
-    }
-
-  return retval;
-}
-
 int
 octave_mkdir (const std::string& nm, mode_t md)
 {
   std::string msg;
   return octave_mkdir (nm, md, msg);
 }
 
 int
@@ -817,8 +692,134 @@ octave_tempnam (const std::string& dir, 
   else
     {
       using namespace std;
       msg = strerror (errno);
     }
 
   return retval;
 }
+
+std::string
+octave_canonicalize_file_name (const std::string& name)
+{
+  std::string msg;
+  return octave_canonicalize_file_name (name, msg);
+}
+
+std::string
+octave_canonicalize_file_name (const std::string& name, std::string& msg)
+{
+  msg = std::string ();
+
+  std::string retval;
+
+#if defined (HAVE_CANONICALIZE_FILE_NAME)
+
+  char *tmp = ::canonicalize_file_name (name.c_str ());
+
+  if (tmp)
+    {
+      retval = tmp;
+      free (tmp);
+    }
+
+#elif defined (HAVE_RESOLVEPATH)
+
+#if !defined (errno)
+extern int errno;
+#endif
+
+#if !defined (__set_errno)
+# define __set_errno(Val) errno = (Val)
+#endif
+
+  if (name.empty ())
+    {
+      __set_errno (ENOENT);
+      return retval;
+    }
+
+  // All known hosts with resolvepath (e.g. Solaris 7) don't turn
+  // relative names into absolute ones, so prepend the working
+  // directory if the path is not absolute.
+
+  std::string absolute_name = octave_env::make_absolute (name);
+
+  size_t resolved_size = absolute_name.length ();
+
+  while (true)
+    {
+      resolved_size = 2 * resolved_size + 1;
+
+      OCTAVE_LOCAL_BUFFER (char, resolved, resolved_size);
+
+      int resolved_len
+        = resolvepath (absolute_name.c_str (), resolved, resolved_size);
+
+      if (resolved_len < 0)
+        break;
+
+      if (resolved_len < resolved_size)
+        {
+          retval = resolved;
+          break;
+        }
+    }
+
+#elif defined (__WIN32__)
+
+  int n = 1024;
+
+  std::string win_path (n, '\0');
+
+  while (true)
+    {
+      int status = GetFullPathName (name.c_str (), n, &win_path[0], 0);
+
+      if (status == 0)
+        break;
+      else if (status < n)
+        {
+          win_path.resize (status);
+          retval = win_path;
+          break;
+        }
+      else
+        {
+          n *= 2;
+          win_path.resize (n);
+        }
+    }
+
+#elif defined (HAVE_REALPATH)
+
+#if !defined (__set_errno)
+# define __set_errno(Val) errno = (Val)
+#endif
+
+  if (name.empty ())
+    {
+      __set_errno (ENOENT);
+      return retval;
+    }
+
+  OCTAVE_LOCAL_BUFFER (char, buf, PATH_MAX);
+
+  if (::realpath (name.c_str (), buf))
+    retval = buf;
+
+#else
+
+  // FIXME -- provide replacement here...
+  retval = name;
+
+#endif
+
+  if (retval.empty ())
+    {
+      using namespace std;
+      msg = strerror (errno);
+    }
+
+  return retval;
+}
+
diff --git a/liboctave/file-ops.h b/liboctave/file-ops.h
--- a/liboctave/file-ops.h
+++ b/liboctave/file-ops.h
@@ -90,20 +90,16 @@ public:
     if (ipos != std::string::npos)
       ipos++;
     else
       ipos = 0;
 
     return path.substr (ipos);
   }
 
-  static std::string canonicalize_file_name (const std::string&);
-
-  static std::string canonicalize_file_name (const std::string&, std::string&);
-
 private:
 
   static file_ops *instance;
 
   // No copying!
 
   file_ops (const file_ops&);
 
@@ -178,9 +174,15 @@ extern OCTAVE_API int
 octave_unlink (const std::string&, std::string&);
 
 extern OCTAVE_API std::string
 octave_tempnam (const std::string&, const std::string&);
 
 extern OCTAVE_API std::string
 octave_tempnam (const std::string&, const std::string&, std::string&);
 
+extern OCTAVE_API std::string
+octave_canonicalize_file_name (const std::string&);
+
+extern OCTAVE_API std::string
+octave_canonicalize_file_name (const std::string&, std::string&);
+
 #endif
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,14 @@
+2010-02-03  John W. Eaton  <jwe@octave.org>
+
+	* syscalls.cc (Fcanonicalize_file_name):
+	Call octave_canonicalize_file_name instead of
+	file_ops::canonicalize_file_name.
+
 2010-02-03  John W. Eaton  <jwe@octave.org>
 
 	* dirfns.cc (Fpwd): Call octave_env::get_current_directory, not
 	octave_env::getcwd.
 
 	* utils.cc (search_path_for_file, search_path_for_all_files,
 	make_absolute, Ffile_in_loadpath, Ffile_in_path, file_in_path,
 	contents_file_in_path, Fmake_absolute_filename):
diff --git a/src/syscalls.cc b/src/syscalls.cc
--- a/src/syscalls.cc
+++ b/src/syscalls.cc
@@ -1609,17 +1609,17 @@ Return the canonical name of file @var{n
   if (args.length () == 1)
     {
       std::string name = args(0).string_value ();
 
       if (! error_state)
 	{
 	  std::string msg;
 
-	  std::string result = file_ops::canonicalize_file_name (name, msg);
+	  std::string result = octave_canonicalize_file_name (name, msg);
 
 	  retval(2) = msg;
 	  retval(1) = msg.empty () ? 0 : -1;
 	  retval(0) = result;
 	}
       else
 	error ("canonicalize_file_name: argument must be a character string");
     }
