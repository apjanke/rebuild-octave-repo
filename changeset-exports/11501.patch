# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1294905891 18000
#      Thu Jan 13 03:04:51 2011 -0500
# Node ID 331fcc41ca234ad4a05ab958ec7029afcb2ccfcb
# Parent  7aeb4eb7403ff633ea39c9e46f4265e9a2d0880f
data member initialization fixes

diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,42 @@
+2011-01-13  John W. Eaton  <jwe@octave.org>
+
+	* kpse.cc (struct str_llist_elt, struct cache_entry):
+	Explicitly define constructor and destructor.
+
+	* Quad.h (Quad::Quad, IndefQuad::IndefQuad,
+	FloatIndefQuad::FloatIndefQuad): Initialize all data members in
+	initialization lists.
+	* CollocWt.h (CollocWt::CollocWt): Likewise.
+	* oct-time.h (octave_strptime::octave_strptime): Likewise.
+	* oct-time.cc (octave_time::octave_time): Likewise.
+	* pathsearch.h (dir_path::dir_path): Likewise.
+	* regex-match.h (regex_match::regex_match): Likewise.
+	* oct-sort.h (octave_sort::MergeState::MergeState): Likewise.
+	* oct-shlib.h, oct-shlib.cc (octave_shlib::shlib_rep::shlib_rep,
+	octave_shlib::octave_shlib): Likewise.
+	* oct-mutex.h, oct-mutex.cc (octave_mutex::octave_mutex): Likewise.
+	* MatrixType.cc (MatrixType::MatrixType): Likewise.
+	* oct-fftw.cc (octave_fftw_planner::octave_fftw_planner,
+	octave_float_fftw_planner::octave_float_fftw_planner): Likewise.
+
+	* mach-info.h, mach-info.cc (oct_mach_info::oct_mach_info):
+	Initialize all data members in initialization lists.
+	(ten_little_endians): Rename from oct_mach_info::ten_little_endians.
+	Now static instead of private member function
+	(get_float_format): Rename from oct_mach_info::init_float_format.
+	Now static instead of private member function.
+
+	* dir-ops.h, dir-ops.cc (dir_entry::copy): Delete.
+	(dir_entry::dir_entry): Initialize all data members in
+	initialization lists.
+	(dir_entry::operator =): Copy elements directly here instead of
+	calling copy.
+
 2011-01-13  John W. Eaton  <jwe@octave.org>
 
 	* cmd-hist.h, cmd-hist.cc: Sprinkle with const.
 
 2011-01-13  John W. Eaton  <jwe@octave.org>
 
 	* CmplxCHOL.h (ComplexCHOL::ComplexCHOL): Initialize all data
 	members in constructor initialization lists.
diff --git a/liboctave/CollocWt.h b/liboctave/CollocWt.h
--- a/liboctave/CollocWt.h
+++ b/liboctave/CollocWt.h
@@ -46,17 +46,17 @@ public:
   CollocWt (octave_idx_type nc, octave_idx_type il, octave_idx_type ir,
             double l, double rr)
     : n (nc), inc_left (il), inc_right (ir), lb (l), rb (rr),
       Alpha (0.0), Beta (0.0), r (), q (), A (), B (), initialized (false) { }
 
   CollocWt (octave_idx_type nc, double a, double b, octave_idx_type il,
             octave_idx_type ir)
     : n (nc), inc_left (il), inc_right (ir), lb (0.0), rb (1.0),
-      Alpha (a), Beta (b), initialized (false) { }
+      Alpha (a), Beta (b), r (), q (), A (), B (), initialized (false) { }
 
   CollocWt (octave_idx_type nc, double a, double b, octave_idx_type il,
             octave_idx_type ir,
                       double ll, double rr)  
     : n (nc), inc_left (il), inc_right (ir), lb (ll), rb (rr),
       Alpha (a), Beta (b), r (), q (), A (), B (), initialized (false) { }
 
   CollocWt (const CollocWt& a)
diff --git a/liboctave/MatrixType.cc b/liboctave/MatrixType.cc
--- a/liboctave/MatrixType.cc
+++ b/liboctave/MatrixType.cc
@@ -42,17 +42,17 @@ MatrixType::MatrixType (void)
   : typ (MatrixType::Unknown), 
     sp_bandden (octave_sparse_params::get_bandden()),
     bandden (0), upper_band (0), 
     lower_band (0), dense (false), full (false), nperm (0), perm (0) { }
 
 MatrixType::MatrixType (const MatrixType &a)
   : typ (a.typ), sp_bandden (a.sp_bandden), bandden (a.bandden), 
     upper_band (a.upper_band), lower_band (a.lower_band), 
-    dense (a.dense), full (a.full), nperm (a.nperm)
+    dense (a.dense), full (a.full), nperm (a.nperm), perm (0)
 { 
   if (nperm != 0)
     {
       perm = new octave_idx_type [nperm];
       for (octave_idx_type i = 0; i < nperm; i++)
         perm[i] = a.perm[i];
     }
 }
diff --git a/liboctave/Quad.h b/liboctave/Quad.h
--- a/liboctave/Quad.h
+++ b/liboctave/Quad.h
@@ -48,20 +48,20 @@ extern OCTAVE_API int quad_integration_e
 
 class
 OCTAVE_API
 Quad : public Quad_options
 {
  public:
 
   Quad (integrand_fcn fcn)
-    : Quad_options (), f (fcn) { }
+    : Quad_options (), f (fcn), ff () { }
 
   Quad (float_integrand_fcn fcn)
-    : Quad_options (), ff (fcn) { }
+    : Quad_options (), f (), ff (fcn) { }
 
   virtual ~Quad (void) { }
 
   virtual double integrate (void)
     {
       octave_idx_type ier, neval;
       double abserr;
       return do_integrate (ier, neval, abserr);
@@ -159,20 +159,20 @@ class
 OCTAVE_API
 IndefQuad : public Quad
 {
  public:
 
   enum IntegralType { bound_to_inf, neg_inf_to_bound, doubly_infinite };
 
   IndefQuad (integrand_fcn fcn)
-    : Quad (fcn), bound (0.0), type (bound_to_inf) { }
+    : Quad (fcn), bound (0.0), type (bound_to_inf), integration_error (0) { }
 
   IndefQuad (integrand_fcn fcn, double b, IntegralType t)
-    : Quad (fcn), bound (b), type (t) { }
+    : Quad (fcn), bound (b), type (t), integration_error (0) { }
 
   ~IndefQuad (void) { }
 
   double do_integrate (octave_idx_type& ier, octave_idx_type& neval, double& abserr);
 
   float do_integrate (octave_idx_type& ier, octave_idx_type& neval, float& abserr);
 
  private:
@@ -221,20 +221,20 @@ class
 OCTAVE_API
 FloatIndefQuad : public Quad
 {
  public:
 
   enum IntegralType { bound_to_inf, neg_inf_to_bound, doubly_infinite };
 
   FloatIndefQuad (float_integrand_fcn fcn)
-    : Quad (fcn), bound (0.0), type (bound_to_inf) { }
+    : Quad (fcn), bound (0.0), type (bound_to_inf), integration_error (0) { }
 
   FloatIndefQuad (float_integrand_fcn fcn, double b, IntegralType t)
-    : Quad (fcn), bound (b), type (t) { }
+    : Quad (fcn), bound (b), type (t), integration_error (0) { }
 
   ~FloatIndefQuad (void) { }
 
   double do_integrate (octave_idx_type& ier, octave_idx_type& neval, double& abserr);
 
   float do_integrate (octave_idx_type& ier, octave_idx_type& neval, float& abserr);
 
  private:
diff --git a/liboctave/dir-ops.cc b/liboctave/dir-ops.cc
--- a/liboctave/dir-ops.cc
+++ b/liboctave/dir-ops.cc
@@ -94,17 +94,8 @@ dir_entry::read (void)
 void
 dir_entry::close (void)
 {
   if (dir)
     gnulib::closedir (static_cast<DIR *> (dir));
 
   dir = 0;
 }
-
-void
-dir_entry::copy (const dir_entry& de)
-{
-  name = de.name;
-  dir = de.dir;
-  fail = de.fail;
-  errmsg = de.errmsg;
-}
diff --git a/liboctave/dir-ops.h b/liboctave/dir-ops.h
--- a/liboctave/dir-ops.h
+++ b/liboctave/dir-ops.h
@@ -28,28 +28,35 @@ along with Octave; see the file COPYING.
 #include "str-vec.h"
 
 class
 OCTAVE_API
 dir_entry
 {
 public:
 
-  dir_entry (const std::string& n = std::string ()) : name (n), dir (0)
+  dir_entry (const std::string& n = std::string ())
+    : name (n), dir (0), fail (false), errmsg ()
     {
       if (! name.empty ())
         open ();
     }
 
-  dir_entry (const dir_entry& d) { copy (d); }
+  dir_entry (const dir_entry& d)
+    : name (d.name), dir (d.dir), fail (d.fail), errmsg (d.errmsg) { }
 
   dir_entry& operator = (const dir_entry& d)
     {
       if (this != &d)
-        copy (d);
+        {
+          name = d.name;
+          dir = d.dir;
+          fail = d.fail;
+          errmsg = d.errmsg;
+        }
 
       return *this;
     }
 
   ~dir_entry (void) { close (); }
 
   bool open (const std::string& = std::string ());
 
@@ -73,13 +80,11 @@ private:
   // type DIR.
   void *dir;
 
   // TRUE means the open for this directory failed.
   bool fail;
 
   // If a failure occurs, this contains the system error text.
   std::string errmsg;
-
-  void copy (const dir_entry&);
 };
 
 #endif
diff --git a/liboctave/kpse.cc b/liboctave/kpse.cc
--- a/liboctave/kpse.cc
+++ b/liboctave/kpse.cc
@@ -307,16 +307,20 @@ static void xclosedir (DIR *d);
 
 /* It's a little bizarre to be using the same type for the list and the
    elements of the list, but no reason not to in this case, I think --
    we never need a NULL string in the middle of the list, and an extra
    NULL/NULL element always at the end is inconsequential.  */
 
 struct str_llist_elt
 {
+  str_llist_elt (void) : str (), moved (0), next (0) { }
+
+  ~str_llist_elt (void) { }
+
   std::string str;
   int moved;
   struct str_llist_elt *next;
 };
 
 typedef str_llist_elt str_llist_elt_type;
 typedef str_llist_elt *str_llist_type;
 
@@ -1688,16 +1692,23 @@ brace_gobbler (const std::string& text, 
    thing that is not part of this structure is the environment variable
    lists. They are used directly in tex-file.c. We could incorporate
    them here, but it would complicate the code a bit. We could also do
    it via variable expansion, but not now, maybe not ever:
    ${PKFONTS-${TEXFONTS-/usr/local/lib/texmf/fonts//}}.  */
 
 struct kpse_format_info_type
 {
+  kpse_format_info_type (void)
+    : type (), path (), raw_path (), path_source (), override_path (),
+      client_path (), cnf_path (), default_path (), suffix ()
+  { }
+
+  ~kpse_format_info_type (void) { }
+
   std::string type;          /* Human-readable description.  */
   std::string path;          /* The search path to use.  */
   std::string raw_path;      /* Pre-$~ (but post-default) expansion.  */
   std::string path_source;   /* Where the path started from.  */
   std::string override_path; /* From client environment variable.  */
   std::string client_path;   /* E.g., from dvips's config.ps.  */
   std::string cnf_path;      /* From texmf.cnf.  */
   std::string default_path;  /* If all else fails.  */
@@ -2076,16 +2087,20 @@ checked_dir_list_add (str_llist_type *l,
 /* The cache.  Typically, several paths have the same element; for
    example, /usr/local/lib/texmf/fonts//.  We don't want to compute the
    expansion of such a thing more than once.  Even though we also cache
    the dir_links call, that's not enough -- without this path element
    caching as well, the execution time doubles.  */
 
 struct cache_entry
 {
+  cache_entry (void) : key (), value (0) { }
+
+  ~cache_entry (void) { }
+
   std::string key;
   str_llist_type *value;
 };
 
 static cache_entry *the_cache = 0;
 static unsigned cache_length = 0;
 
 /* Associate KEY with VALUE.  We implement the cache as a simple linear
diff --git a/liboctave/mach-info.cc b/liboctave/mach-info.cc
--- a/liboctave/mach-info.cc
+++ b/liboctave/mach-info.cc
@@ -65,19 +65,21 @@ equiv_compare (const equiv *std, const e
 {
   int i;
   for (i = 0; i < len; i++)
     if (v[i].i[0] != std[i].i[0] || v[i].i[1] != std[i].i[1])
       return 0;
   return 1;
 }
 
-void
-oct_mach_info::init_float_format (void) const
+static oct_mach_info::float_format
+get_float_format (void)
 {
+  oct_mach_info::float_format retval = oct_mach_info::flt_fmt_unknown;
+
 #if defined (CRAY)
 
   // FIXME -- this should be determined automatically.
 
   native_float_fmt = oct_mach_info::flt_fmt_cray;
 
 #else
 
@@ -120,46 +122,46 @@ oct_mach_info::init_float_format (void) 
   mach_fp_par[2].d = F77_FUNC (d1mach, D1MACH) (3);
   mach_fp_par[3].d = F77_FUNC (d1mach, D1MACH) (4);
 
   int i = 0;
   do
     {
       if (equiv_compare (fp[i].fp_par, mach_fp_par, 4))
         {
-          native_float_fmt = fp[i].fp_fmt;
+          retval = fp[i].fp_fmt;
           break;
         }
     }
   while (fp[++i].fp_fmt != oct_mach_info::flt_fmt_unknown);
 
 #endif
+
+  return retval;
 }
 
-void
-oct_mach_info::ten_little_endians (void) const
+static bool
+ten_little_endians (void)
 {
   // Are we little or big endian?  From Harbison & Steele.
 
   union
   {
     long l;
     char c[sizeof (long)];
   } u;
 
   u.l = 1;
 
-  big_chief = (u.c[sizeof (long) - 1] == 1);
+  return (u.c[sizeof (long) - 1] == 1);
 }
 
 oct_mach_info::oct_mach_info (void)
-{
-  init_float_format ();
-  ten_little_endians ();
-}
+  : native_float_fmt (get_float_format ()),
+    big_chief (ten_little_endians ()) { }
 
 bool
 oct_mach_info::instance_ok (void)
 {
   bool retval = true;
 
   if (! instance)
     instance = new oct_mach_info ();
diff --git a/liboctave/mach-info.h b/liboctave/mach-info.h
--- a/liboctave/mach-info.h
+++ b/liboctave/mach-info.h
@@ -57,20 +57,16 @@ public:
   static float_format string_to_float_format (const std::string&);
 
   static std::string float_format_as_string (float_format);
 
 private:
 
   static oct_mach_info *instance;
 
-  void init_float_format (void) const;
-
-  void ten_little_endians (void) const;
-
   // The floating point format for the current machine.
   mutable float_format native_float_fmt;
 
   // TRUE if the byte order on this system is big endian.
   mutable bool big_chief;
 
   // No copying!
 
diff --git a/liboctave/oct-fftw.cc b/liboctave/oct-fftw.cc
--- a/liboctave/oct-fftw.cc
+++ b/liboctave/oct-fftw.cc
@@ -51,16 +51,18 @@ octave_fftw_planner *octave_fftw_planner
 // FIXME -- if we can ensure 16 byte alignment in Array<T>
 // (<T> *data) the FFTW3 can use SIMD instructions for further
 // acceleration.
 
 // Note that it is profitable to store the FFTW3 plans, for small
 // ffts.
 
 octave_fftw_planner::octave_fftw_planner (void)
+  : meth (), rplan (), rd (0), rs (0), rr (0), rh (0), rn (0),
+    rsimd_align (false)
 {
   meth = ESTIMATE;
 
   plan[0] = plan[1] = 0;
   d[0] = d[1] = s[0] = s[1] = r[0] = r[1] = h[0] = h[1] = 0;
   simd_align[0] = simd_align[1] = false;
   inplace[0] = inplace[1] = false;
   n[0] = n[1] = dim_vector ();
@@ -364,16 +366,18 @@ octave_fftw_planner::do_method (FftwMeth
   else
     ret = UNKNOWN;
   return ret;
 }
 
 octave_float_fftw_planner *octave_float_fftw_planner::instance = 0;
 
 octave_float_fftw_planner::octave_float_fftw_planner (void)
+  : meth (), rplan (), rd (0), rs (0), rr (0), rh (0), rn (0),
+    rsimd_align (false)
 {
   meth = ESTIMATE;
 
   plan[0] = plan[1] = 0;
   d[0] = d[1] = s[0] = s[1] = r[0] = r[1] = h[0] = h[1] = 0;
   simd_align[0] = simd_align[1] = false;
   inplace[0] = inplace[1] = false;
   n[0] = n[1] = dim_vector ();
diff --git a/liboctave/oct-mutex.cc b/liboctave/oct-mutex.cc
--- a/liboctave/oct-mutex.cc
+++ b/liboctave/oct-mutex.cc
@@ -78,17 +78,17 @@ private:
 
 #elif defined (HAVE_PTHREAD_H)
 
 class
 octave_pthread_mutex : public octave_base_mutex
 {
 public:
   octave_pthread_mutex (void)
-    : octave_base_mutex ()
+    : octave_base_mutex (), pm ()
   {
     pthread_mutexattr_t attr;
 
     pthread_mutexattr_init (&attr);
     pthread_mutexattr_settype (&attr, PTHREAD_MUTEX_RECURSIVE);
     pthread_mutex_init (&pm, &attr);
     pthread_mutexattr_destroy (&attr);
   }
@@ -109,18 +109,21 @@ public:
   }
 
 private:
   pthread_mutex_t pm;
 };
 
 #endif
 
-octave_mutex::octave_mutex (void)
+static octave_base_mutex *
+init_rep (void)
 {
 #if defined (__WIN32__) && ! defined (__CYGWIN__)
-  rep = new octave_w32_mutex ();
+  return new octave_w32_mutex ();
 #elif defined (HAVE_PTHREAD_H)
-  rep = new octave_pthread_mutex ();
+  return new octave_pthread_mutex ();
 #else
-  rep = new octave_base_mutex ();
+  return new octave_base_mutex ();
 #endif
 }
+
+octave_mutex::octave_mutex (void) : rep (init_rep ()) { }
diff --git a/liboctave/oct-mutex.h b/liboctave/oct-mutex.h
--- a/liboctave/oct-mutex.h
+++ b/liboctave/oct-mutex.h
@@ -46,18 +46,18 @@ private:
 class
 OCTAVE_API
 octave_mutex
 {
 public:
   octave_mutex (void);
 
   octave_mutex (const octave_mutex& m)
+    : rep (m.rep)
   {
-    rep = m.rep;
     rep->count++;
   }
 
   ~octave_mutex (void)
   {
     if (--rep->count == 0)
       delete rep;
   }
diff --git a/liboctave/oct-shlib.cc b/liboctave/oct-shlib.cc
--- a/liboctave/oct-shlib.cc
+++ b/liboctave/oct-shlib.cc
@@ -56,17 +56,17 @@ extern int dlclose (void *);
 }
 
 #include "file-stat.h"
 #include "lo-error.h"
 #include "oct-shlib.h"
 #include "str-vec.h"
 
 octave_shlib::shlib_rep::shlib_rep (const std::string& f)
-  : count (1), file (f), tm_loaded ()
+  : count (1), file (f), tm_loaded (), fcn_names ()
 {
   instances[f] = this;
 
   if (is_out_of_date ())
     (*current_liboctave_warning_with_id_handler)
       ("Octave:warn-future-time-stamp",
        "timestamp on file %s is in the future", file.c_str ());
 }
diff --git a/liboctave/oct-shlib.h b/liboctave/oct-shlib.h
--- a/liboctave/oct-shlib.h
+++ b/liboctave/oct-shlib.h
@@ -38,17 +38,17 @@ public: // FIXME: make this class privat
   typedef std::string (*name_mangler) (const std::string&);
   typedef void (*close_hook) (const std::string&);
 
   class shlib_rep
   {
   public:
 
     shlib_rep (void) 
-      : count (1), file (), tm_loaded (time_t ()) { }
+      : count (1), file (), tm_loaded (time_t ()), fcn_names () { }
 
   protected:
 
     shlib_rep (const std::string& f);
 
   public:
 
     virtual ~shlib_rep (void)
@@ -116,18 +116,18 @@ public:
 
   ~octave_shlib (void)
     {
       if (--rep->count == 0)
         delete rep;
     }
 
   octave_shlib (const octave_shlib& sl)
+    : rep (sl.rep)
     {
-      rep = sl.rep;
       rep->count++;
     }
 
   octave_shlib& operator = (const octave_shlib& sl)
     {
       if (rep != sl.rep)
         {
           if (--rep->count == 0)
diff --git a/liboctave/oct-sort.h b/liboctave/oct-sort.h
--- a/liboctave/oct-sort.h
+++ b/liboctave/oct-sort.h
@@ -177,18 +177,18 @@ private:
   
   struct s_slice 
   {
     octave_idx_type base, len;
   };
   
   struct MergeState 
   {
-    MergeState (void) 
-      : a (0), ia (0), alloced (0) 
+    MergeState (void)
+      : min_gallop (), a (0), ia (0), alloced (0), n (0)
       { reset (); }
     
     ~MergeState (void) 
       { delete [] a; delete [] ia; }
     
     void reset (void) 
       { min_gallop = MIN_GALLOP; n = 0; }
 
diff --git a/liboctave/oct-time.cc b/liboctave/oct-time.cc
--- a/liboctave/oct-time.cc
+++ b/liboctave/oct-time.cc
@@ -34,16 +34,17 @@ along with Octave; see the file COPYING.
 #include "strftime.h"
 
 #include "lo-error.h"
 #include "lo-math.h"
 #include "lo-utils.h"
 #include "oct-time.h"
 
 octave_time::octave_time (const octave_base_tm& tm)
+  : ot_unix_time (), ot_usec ()
 {
   struct tm t;
   
   t.tm_sec = tm.sec ();
   t.tm_min = tm.min ();
   t.tm_hour = tm.hour ();
   t.tm_mday = tm.mday ();
   t.tm_mon = tm.mon ();
diff --git a/liboctave/oct-time.h b/liboctave/oct-time.h
--- a/liboctave/oct-time.h
+++ b/liboctave/oct-time.h
@@ -328,20 +328,23 @@ private:
 
 class
 OCTAVE_API
 octave_strptime : public octave_base_tm
 {
 public:
 
   octave_strptime (const std::string& str, const std::string& fmt)
-    : octave_base_tm () { init (str, fmt); }
+    : octave_base_tm (), nchars (0)
+  {
+    init (str, fmt);
+  }
 
   octave_strptime (const octave_strptime& s)
-    : octave_base_tm (s) { nchars = s.nchars; }
+    : octave_base_tm (s), nchars (s.nchars) { }
 
   octave_strptime& operator = (const octave_strptime& s)
   {
     octave_base_tm::operator = (s);
     nchars = s.nchars;
     return *this;
   }
 
diff --git a/liboctave/pathsearch.h b/liboctave/pathsearch.h
--- a/liboctave/pathsearch.h
+++ b/liboctave/pathsearch.h
@@ -31,17 +31,17 @@ along with Octave; see the file COPYING.
 class
 OCTAVE_API
 dir_path
 {
 public:
 
   dir_path (const std::string& s = std::string (),
             const std::string& d = std::string ())
-    : p_orig (s), p_default (d), initialized (false)
+    : p_orig (s), p_default (d), initialized (false), p (), pv ()
     {
       if (! p_orig.empty ())
         init ();
     }
 
   dir_path (const dir_path& dp)
     : p_orig (dp.p_orig), p_default (dp.p_default),
       initialized (dp.initialized), p (dp.p), pv (dp.pv)
diff --git a/liboctave/regex-match.h b/liboctave/regex-match.h
--- a/liboctave/regex-match.h
+++ b/liboctave/regex-match.h
@@ -38,23 +38,41 @@ along with Octave; see the file COPYING.
 
 class
 OCTAVE_API
 regex_match
 {
 public:
 
   regex_match (const std::string& p, bool insen = false) 
-    : pat (p), case_insen (insen) { init (); }
+    : pat (p), case_insen (insen)
+#if HAVE_REGEX
+      , compiled (0)
+#endif
+    {
+      init ();
+    }
 
   regex_match (const string_vector& p = string_vector (), bool insen = false) 
-    : pat (p), case_insen (insen) { init (); }
+    : pat (p), case_insen (insen)
+#if HAVE_REGEX
+      , compiled (0)
+#endif
+    {
+      init ();
+    }
 
   regex_match (const regex_match& gm) 
-    : pat (gm.pat), case_insen (gm.case_insen) { init (); }
+    : pat (gm.pat), case_insen (gm.case_insen)
+#if HAVE_REGEX
+      , compiled (0)
+#endif
+    {
+      init ();
+    }
 
   regex_match& operator = (const regex_match& gm);
 
   ~regex_match (void);
 
   void set_pattern (const std::string& p);
 
   void set_pattern (const string_vector& p);
@@ -71,12 +89,11 @@ private:
   string_vector pat;
 
   // Should match be case insensitive
   bool case_insen;
 
 #if HAVE_REGEX
   regex_t *compiled;
 #endif
-
 };
 
 #endif
