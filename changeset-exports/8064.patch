# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1219783157 14400
#      Tue Aug 26 16:39:17 2008 -0400
# Node ID 4f1ebb704545e5dba92380e98c020d3fe293eef4
# Parent  41bc700ff64233575cf3fda78452488732c61e21
fix invalid scope use in assignin

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,12 @@
+2008-08-26  Jaroslav Hajek <highegg@gmail.com>
+
+	* parse.y (Fassignin): Use default  scope when calling varref.
+
 2008-08-26  Michael Goffioul  <michael.goffioul@gmail.com>
 
 	* genprops.awk (emit_declarations): Call updaters/listeners only when
 	'set' method returned true.
 	* graphics.h.in (base_property::set, base_property::do_set):
 	Return bool value.
 	(property::set): Likewise.
 	(string_property::do_set): Check value change and return bool value.
diff --git a/src/parse.y b/src/parse.y
--- a/src/parse.y
+++ b/src/parse.y
@@ -3972,35 +3972,33 @@ may be either @code{\"base\"} or @code{\
   int nargin = args.length ();
 
   if (nargin == 3)
     {
       std::string context = args(0).string_value ();
 
       if (! error_state)
         {
-	  symbol_table::scope_id scope = -1;
-
 	  if (context == "caller")
 	    octave_call_stack::goto_caller_frame ();
 	  else if (context == "base")
 	    octave_call_stack::goto_base_frame ();
 	  else
 	    error ("assignin: context must be \"caller\" or \"base\"");
 
 	  if (! error_state)
 	    {
 	      unwind_protect::add (octave_call_stack::unwind_pop);
 
 	      std::string nm = args(1).string_value ();
 
 	      if (! error_state)
 		{
 		  if (valid_identifier (nm))
-		    symbol_table::varref (nm, scope) = args(2);
+		    symbol_table::varref (nm) = args(2);
 		  else
 		    error ("assignin: invalid variable name");
 		}
 	      else
 		error ("assignin: expecting variable name as second argument");
 	    }
 	}
       else
