# HG changeset patch
# User Rik <rik@octave.org>
# Date 1404073404 25200
#      Sun Jun 29 13:23:24 2014 -0700
# Node ID ca0d9844dfd78fd26b82bf5bdda3fa999286c28e
# Parent  afab3a2f57e7a14f225baf3eadcd24d6ee963dd5
Fix input validation for exist() which did not error on non-string input.

* variables.cc (Fexist): Error out if NAME or TYPE fields are not strings.
Add warning if input TYPE is unimplemented "class" field.  Add warning to
docstring about "class" field being unimplemented.

diff --git a/libinterp/corefcn/variables.cc b/libinterp/corefcn/variables.cc
--- a/libinterp/corefcn/variables.cc
+++ b/libinterp/corefcn/variables.cc
@@ -560,17 +560,17 @@ Check only for built-in functions.\n\
 \n\
 @item @qcode{\"dir\"}\n\
 Check only for directories.\n\
 \n\
 @item @qcode{\"file\"}\n\
 Check only for files and directories.\n\
 \n\
 @item @qcode{\"class\"}\n\
-Check only for classes.\n\
+Check only for classes.  (Note: This option is accepted, but not currently implemented)\n\
 @end table\n\
 \n\
 If no type is given, and there are multiple possible matches for name,\n\
 @code{exist} will return a code according to the following priority list:\n\
 variable, built-in function, oct-file, directory, file, class. \n\
 \n\
 @code{exist} returns 2 if a regular file called @var{name} is present in\n\
 Octave's search path.  If you want information about other types of files\n\
@@ -581,26 +581,31 @@ not on the search path you should use so
 @end deftypefn")
 {
   octave_value retval = false;
 
   int nargin = args.length ();
 
   if (nargin == 1 || nargin == 2)
     {
-      std::string name = args(0).string_value ();
-
-      if (! error_state)
+      if (args(0).is_string ())
         {
+          std::string name = args(0).string_value ();
+
           if (nargin == 2)
             {
-              std::string type = args(1).string_value ();
-
-              if (! error_state)
-                retval = symbol_exist (name, type);
+              if (args(1).is_string ())
+                {
+                  std::string type = args(1).string_value ();
+
+                  if (type == "class")
+                    warning ("exist: \"class\" type argument is not implemented");
+
+                  retval = symbol_exist (name, type);
+                }
               else
                 error ("exist: TYPE must be a string");
             }
           else
             retval = symbol_exist (name);
         }
       else
         error ("exist: NAME must be a string");
@@ -647,16 +652,22 @@ not on the search path you should use so
 %!assert (exist ("sin"), 5)
 %!assert (exist ("sin", "builtin"), 5)
 %!assert (exist ("sin", "file"), 0)
 
 %!assert (exist (dirtmp), 7)
 %!assert (exist (dirtmp, "dir"), 7)
 %!assert (exist (dirtmp, "file"), 7)
 
+%!error exist ()
+%!error exist (1,2,3)
+%!warning <"class" type argument is not implemented> exist ("a", "class");
+%!error <TYPE must be a string> exist ("a", 1)
+%!error <NAME must be a string> exist (1)
+
 */
 
 octave_value
 lookup_function_handle (const std::string& nm)
 {
   octave_value val = symbol_table::varval (nm);
 
   return val.is_function_handle () ? val : octave_value ();
