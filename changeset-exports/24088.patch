# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1506115065 14400
#      Fri Sep 22 17:17:45 2017 -0400
# Node ID 0160a3199b2d66568f5a21b028a2f41ebd9a31aa
# Parent  88a593fa1388fd5cc05ad313552350925fc3330a
avoid warnings from GCC about ABI change with exception specifications

* data.cc (Fatan2): Use std::atan2 instead of ::atan2f and ::atan2.
(Fhypot): Use std::hypot instead of std::hypotf.

* mx-inlines.cc: Drop "throw ()" from function declarations, function
definitions, and function pointer declarations.

diff --git a/libinterp/corefcn/data.cc b/libinterp/corefcn/data.cc
--- a/libinterp/corefcn/data.cc
+++ b/libinterp/corefcn/data.cc
@@ -228,34 +228,34 @@ This function is equivalent to @code{arg
   if (args(0).is_single_type () || args(1).is_single_type ())
     {
       if (args(0).is_scalar_type () && args(1).is_scalar_type ())
         retval = atan2f (args(0).float_value (), args(1).float_value ());
       else
         {
           FloatNDArray a0 = args(0).float_array_value ();
           FloatNDArray a1 = args(1).float_array_value ();
-          retval = binmap<float> (a0, a1, ::atan2f, "atan2");
+          retval = binmap<float> (a0, a1, std::atan2, "atan2");
         }
     }
   else
     {
       if (args(0).is_scalar_type () && args(1).is_scalar_type ())
         retval = atan2 (args(0).scalar_value (), args(1).scalar_value ());
       else if (args(0).issparse ())
         {
           SparseMatrix m0 = args(0).sparse_matrix_value ();
           SparseMatrix m1 = args(1).sparse_matrix_value ();
-          retval = binmap<double> (m0, m1, ::atan2, "atan2");
+          retval = binmap<double> (m0, m1, std::atan2, "atan2");
         }
       else
         {
           NDArray a0 = args(0).array_value ();
           NDArray a1 = args(1).array_value ();
-          retval = binmap<double> (a0, a1, ::atan2, "atan2");
+          retval = binmap<double> (a0, a1, std::atan2, "atan2");
         }
     }
 
   return retval;
 }
 
 /*
 %!assert (size (atan2 (zeros (0, 2), zeros (0, 2))), [0, 2])
@@ -338,17 +338,17 @@ do_hypot (const octave_value& x, const o
   if (arg0.is_single_type () || arg1.is_single_type ())
     {
       if (arg0.is_scalar_type () && arg1.is_scalar_type ())
         retval = hypotf (arg0.float_value (), arg1.float_value ());
       else
         {
           FloatNDArray a0 = arg0.float_array_value ();
           FloatNDArray a1 = arg1.float_array_value ();
-          retval = binmap<float> (a0, a1, std::hypotf, "hypot");
+          retval = binmap<float> (a0, a1, std::hypot, "hypot");
         }
     }
   else
     {
       if (arg0.is_scalar_type () && arg1.is_scalar_type ())
         retval = hypot (arg0.scalar_value (), arg1.scalar_value ());
       else if (arg0.issparse () || arg1.issparse ())
         {
diff --git a/liboctave/operators/mx-inlines.cc b/liboctave/operators/mx-inlines.cc
--- a/liboctave/operators/mx-inlines.cc
+++ b/liboctave/operators/mx-inlines.cc
@@ -38,115 +38,115 @@ along with Octave; see the file COPYING.
 #include "bsxfun.h"
 #include "oct-cmplx.h"
 #include "oct-inttypes.h"
 #include "oct-locbuf.h"
 
 // Provides some commonly repeated, basic loop templates.
 
 template <typename R, typename S>
-inline void mx_inline_fill (size_t n, R *r, S s) throw ()
+inline void mx_inline_fill (size_t n, R *r, S s)
 {
   for (size_t i = 0; i < n; i++)
     r[i] = s;
 }
 
 template <typename R, typename X>
 inline void
-mx_inline_uminus (size_t n, R *r, const X *x) throw ()
+mx_inline_uminus (size_t n, R *r, const X *x)
 {
   for (size_t i = 0; i < n; i++)
     r[i] = -x[i];
 }
 
 template <typename R>
 inline void
-mx_inline_uminus2 (size_t n, R *r) throw ()
+mx_inline_uminus2 (size_t n, R *r)
 {
   for (size_t i = 0; i < n; i++)
     r[i] = -r[i];
 }
 
 template <typename X>
 inline void
-mx_inline_iszero (size_t n, bool *r, const X *x) throw ()
+mx_inline_iszero (size_t n, bool *r, const X *x)
 {
   const X zero = X ();
   for (size_t i = 0; i < n; i++)
     r[i] = x[i] == zero;
 }
 
 template <typename X>
 inline void
-mx_inline_notzero (size_t n, bool *r, const X *x) throw ()
+mx_inline_notzero (size_t n, bool *r, const X *x)
 {
   const X zero = X ();
   for (size_t i = 0; i < n; i++)
     r[i] = x[i] != zero;
 }
 
 #define DEFMXBINOP(F, OP)                                               \
   template <typename R, typename X, typename Y>                         \
-  inline void F (size_t n, R *r, const X *x, const Y *y) throw ()       \
+  inline void F (size_t n, R *r, const X *x, const Y *y)        \
   {                                                                     \
     for (size_t i = 0; i < n; i++)                                      \
       r[i] = x[i] OP y[i];                                              \
   }                                                                     \
   template <typename R, typename X, typename Y>                         \
-  inline void F (size_t n, R *r, const X *x, Y y) throw ()              \
+  inline void F (size_t n, R *r, const X *x, Y y)               \
   {                                                                     \
     for (size_t i = 0; i < n; i++)                                      \
       r[i] = x[i] OP y;                                                 \
   }                                                                     \
   template <typename R, typename X, typename Y>                         \
-  inline void F (size_t n, R *r, X x, const Y *y) throw ()              \
+  inline void F (size_t n, R *r, X x, const Y *y)               \
   {                                                                     \
     for (size_t i = 0; i < n; i++)                                      \
       r[i] = x OP y[i];                                                 \
   }
 
 DEFMXBINOP (mx_inline_add, +)
 DEFMXBINOP (mx_inline_sub, -)
 DEFMXBINOP (mx_inline_mul, *)
 DEFMXBINOP (mx_inline_div, /)
 
 #define DEFMXBINOPEQ(F, OP)                             \
   template <typename R, typename X>                     \
-  inline void F (size_t n, R *r, const X *x) throw ()   \
+  inline void F (size_t n, R *r, const X *x)    \
   {                                                     \
     for (size_t i = 0; i < n; i++)                      \
       r[i] OP x[i];                                     \
   }                                                     \
   template <typename R, typename X>                     \
-  inline void F (size_t n, R *r, X x) throw ()          \
+  inline void F (size_t n, R *r, X x)           \
   {                                                     \
     for (size_t i = 0; i < n; i++)                      \
       r[i] OP x;                                        \
   }
 
 DEFMXBINOPEQ (mx_inline_add2, +=)
 DEFMXBINOPEQ (mx_inline_sub2, -=)
 DEFMXBINOPEQ (mx_inline_mul2, *=)
 DEFMXBINOPEQ (mx_inline_div2, /=)
 
 #define DEFMXCMPOP(F, OP)                                               \
   template <typename X, typename Y>                                     \
-  inline void F (size_t n, bool *r, const X *x, const Y *y) throw ()    \
+  inline void F (size_t n, bool *r, const X *x, const Y *y)     \
   {                                                                     \
     for (size_t i = 0; i < n; i++)                                      \
       r[i] = x[i] OP y[i];                                              \
   }                                                                     \
   template <typename X, typename Y>                                     \
-  inline void F (size_t n, bool *r, const X *x, Y y) throw ()           \
+  inline void F (size_t n, bool *r, const X *x, Y y)            \
   {                                                                     \
     for (size_t i = 0; i < n; i++)                                      \
       r[i] = x[i] OP y;                                                 \
   }                                                                     \
   template <typename X, typename Y>                                     \
-  inline void F (size_t n, bool *r, X x, const Y *y) throw ()           \
+  inline void F (size_t n, bool *r, X x, const Y *y)            \
   {                                                                     \
     for (size_t i = 0; i < n; i++)                                      \
       r[i] = x OP y[i];                                                 \
   }
 
 DEFMXCMPOP (mx_inline_lt, <)
 DEFMXCMPOP (mx_inline_le, <=)
 DEFMXCMPOP (mx_inline_gt, >)
@@ -172,230 +172,230 @@ logical_value (const std::complex<T>& x)
 template <typename T>
 inline bool
 logical_value (const octave_int<T>& x)
 {
   return x.value ();
 }
 
 template <typename X>
-void mx_inline_not (size_t n, bool *r, const X *x) throw ()
+void mx_inline_not (size_t n, bool *r, const X *x)
 {
   for (size_t i = 0; i < n; i++)
     r[i] = ! logical_value (x[i]);
 }
 
-inline void mx_inline_not2 (size_t n, bool *r) throw ()
+inline void mx_inline_not2 (size_t n, bool *r)
 {
   for (size_t i = 0; i < n; i++)
     r[i] = ! r[i];
 }
 
 #define DEFMXBOOLOP(F, NOT1, OP, NOT2)                                  \
   template <typename X, typename Y>                                     \
-  inline void F (size_t n, bool *r, const X *x, const Y *y) throw ()    \
+  inline void F (size_t n, bool *r, const X *x, const Y *y)     \
   {                                                                     \
     for (size_t i = 0; i < n; i++)                                      \
       r[i] = ((NOT1 logical_value (x[i]))                               \
               OP (NOT2 logical_value (y[i])));                          \
   }                                                                     \
   template <typename X, typename Y>                                     \
-  inline void F (size_t n, bool *r, const X *x, Y y) throw ()           \
+  inline void F (size_t n, bool *r, const X *x, Y y)            \
   {                                                                     \
     const bool yy = (NOT2 logical_value (y));                           \
     for (size_t i = 0; i < n; i++)                                      \
       r[i] = (NOT1 logical_value (x[i])) OP yy;                         \
   }                                                                     \
   template <typename X, typename Y>                                     \
-  inline void F (size_t n, bool *r, X x, const Y *y) throw ()           \
+  inline void F (size_t n, bool *r, X x, const Y *y)            \
   {                                                                     \
     const bool xx = (NOT1 logical_value (x));                           \
     for (size_t i = 0; i < n; i++)                                      \
       r[i] = xx OP (NOT2 logical_value (y[i]));                         \
   }
 
 DEFMXBOOLOP (mx_inline_and, , &, )
 DEFMXBOOLOP (mx_inline_or, , |, )
 DEFMXBOOLOP (mx_inline_not_and, !, &, )
 DEFMXBOOLOP (mx_inline_not_or, !, |, )
 DEFMXBOOLOP (mx_inline_and_not, , &, !)
 DEFMXBOOLOP (mx_inline_or_not, , |, !)
 
 template <typename X>
 inline void
-mx_inline_and2 (size_t n, bool *r, const X *x) throw ()
+mx_inline_and2 (size_t n, bool *r, const X *x)
 {
   for (size_t i = 0; i < n; i++)
     r[i] &= logical_value (x[i]);
 }
 
 template <typename X>
 inline void
-mx_inline_and2 (size_t n, bool *r, X x) throw ()
+mx_inline_and2 (size_t n, bool *r, X x)
 {
   for (size_t i = 0; i < n; i++)
     r[i] &= x;
 }
 
 template <typename X>
 inline void
-mx_inline_or2 (size_t n, bool *r, const X *x) throw ()
+mx_inline_or2 (size_t n, bool *r, const X *x)
 {
   for (size_t i = 0; i < n; i++)
     r[i] |= logical_value (x[i]);
 }
 
 template <typename X>
 inline void
-mx_inline_or2 (size_t n, bool *r, X x) throw ()
+mx_inline_or2 (size_t n, bool *r, X x)
 {
   for (size_t i = 0; i < n; i++)
     r[i] |= x;
 }
 
 template <typename T>
 inline bool
-mx_inline_any_nan (size_t n, const T *x)  throw ()
+mx_inline_any_nan (size_t n, const T *x)
 {
   for (size_t i = 0; i < n; i++)
     {
       if (octave::math::isnan (x[i]))
         return true;
     }
 
   return false;
 }
 
 template <typename T>
 inline bool
-mx_inline_all_finite (size_t n, const T *x)  throw ()
+mx_inline_all_finite (size_t n, const T *x)
 {
   for (size_t i = 0; i < n; i++)
     {
       if (! octave::math::isfinite (x[i]))
         return false;
     }
 
   return true;
 }
 
 template <typename T>
 inline bool
-mx_inline_any_negative (size_t n, const T *x) throw ()
+mx_inline_any_negative (size_t n, const T *x)
 {
   for (size_t i = 0; i < n; i++)
     {
       if (x[i] < 0)
         return true;
     }
 
   return false;
 }
 
 template <typename T>
 inline bool
-mx_inline_any_positive (size_t n, const T *x) throw ()
+mx_inline_any_positive (size_t n, const T *x)
 {
   for (size_t i = 0; i < n; i++)
     {
       if (x[i] > 0)
         return true;
     }
 
   return false;
 }
 
 template <typename T>
 inline bool
-mx_inline_all_real (size_t n, const std::complex<T>* x) throw ()
+mx_inline_all_real (size_t n, const std::complex<T>* x)
 {
   for (size_t i = 0; i < n; i++)
     {
       if (x[i].imag () != 0)
         return false;
     }
 
   return true;
 }
 
 template <typename T>
-inline void mx_inline_real (size_t n, T *r, const std::complex<T>* x) throw ()
+inline void mx_inline_real (size_t n, T *r, const std::complex<T>* x)
 {
   for (size_t i = 0; i < n; i++)
     r[i] = x[i].real ();
 }
 
 template <typename T>
-inline void mx_inline_imag (size_t n, T *r, const std::complex<T>* x) throw ()
+inline void mx_inline_imag (size_t n, T *r, const std::complex<T>* x)
 {
   for (size_t i = 0; i < n; i++)
     r[i] = x[i].imag ();
 }
 
 template <typename T>
 inline void
-mx_inline_xmin (size_t n, T *r, const T *x, const T *y) throw ()
+mx_inline_xmin (size_t n, T *r, const T *x, const T *y)
 {
   for (size_t i = 0; i < n; i++)
     r[i] = octave::math::min (x[i], y[i]);
 }
 
 template <typename T>
 inline void
-mx_inline_xmin (size_t n, T *r, const T *x, T y) throw ()
+mx_inline_xmin (size_t n, T *r, const T *x, T y)
 {
   for (size_t i = 0; i < n; i++)
     r[i] = octave::math::min (x[i], y);
 }
 
 template <typename T>
 inline void
-mx_inline_xmin (size_t n, T *r, T x, const T *y) throw ()
+mx_inline_xmin (size_t n, T *r, T x, const T *y)
 {
   for (size_t i = 0; i < n; i++)
     r[i] = octave::math::min (x, y[i]);
 }
 
 template <typename T>
 inline void
-mx_inline_xmax (size_t n, T *r, const T *x, const T *y) throw ()
+mx_inline_xmax (size_t n, T *r, const T *x, const T *y)
 {
   for (size_t i = 0; i < n; i++)
     r[i] = octave::math::max (x[i], y[i]);
 }
 
 template <typename T>
 inline void
-mx_inline_xmax (size_t n, T *r, const T *x, T y) throw ()
+mx_inline_xmax (size_t n, T *r, const T *x, T y)
 {
   for (size_t i = 0; i < n; i++)
     r[i] = octave::math::max (x[i], y);
 }
 
 template <typename T>
 inline void
-mx_inline_xmax (size_t n, T *r, T x, const T *y) throw ()
+mx_inline_xmax (size_t n, T *r, T x, const T *y)
 {
   for (size_t i = 0; i < n; i++)
     r[i] = octave::math::max (x, y[i]);
 }
 
 // Specialize array-scalar max/min
 #define DEFMINMAXSPEC(T, F, OP)                                 \
   template <>                                                   \
-  inline void F<T> (size_t n, T *r, const T *x, T y) throw ()   \
+  inline void F<T> (size_t n, T *r, const T *x, T y)    \
   {                                                             \
     if (octave::math::isnan (y))                                \
       std::memcpy (r, x, n * sizeof (T));                       \
     else                                                        \
       for (size_t i = 0; i < n; i++)                            \
         r[i] = (x[i] OP y ? x[i] : y);                          \
   }                                                             \
   template <>                                                   \
-  inline void F<T> (size_t n, T *r, T x, const T *y) throw ()   \
+  inline void F<T> (size_t n, T *r, T x, const T *y)    \
   {                                                             \
     if (octave::math::isnan (x))                                \
       std::memcpy (r, y, n * sizeof (T));                       \
     else                                                        \
       for (size_t i = 0; i < n; i++)                            \
         r[i] = (y[i] OP x ? y[i] : x);                          \
   }
 
@@ -405,67 +405,67 @@ DEFMINMAXSPEC (float, mx_inline_xmin, <=
 DEFMINMAXSPEC (float, mx_inline_xmax, >=)
 
 // FIXME: Is this comment correct anymore?  It seems like std::pow is chosen.
 // Let the compiler decide which pow to use, whichever best matches the
 // arguments provided.
 
 template <typename R, typename X, typename Y>
 inline void
-mx_inline_pow (size_t n, R *r, const X *x, const Y *y) throw ()
+mx_inline_pow (size_t n, R *r, const X *x, const Y *y)
 {
   using std::pow;
 
   for (size_t i = 0; i < n; i++)
     r[i] = pow (x[i], y[i]);
 }
 
 template <typename R, typename X, typename Y>
 inline void
-mx_inline_pow (size_t n, R *r, const X *x, Y y) throw ()
+mx_inline_pow (size_t n, R *r, const X *x, Y y)
 {
   using std::pow;
 
   for (size_t i = 0; i < n; i++)
     r[i] = pow (x[i], y);
 }
 
 template <typename R, typename X, typename Y>
 inline void
-mx_inline_pow (size_t n, R *r, X x, const Y *y) throw ()
+mx_inline_pow (size_t n, R *r, X x, const Y *y)
 {
   using std::pow;
 
   for (size_t i = 0; i < n; i++)
     r[i] = pow (x, y[i]);
 }
 
 // Arbitrary function appliers.
 // The function is a template parameter to enable inlining.
 template <typename R, typename X, R fun (X x)>
-inline void mx_inline_map (size_t n, R *r, const X *x) throw ()
+inline void mx_inline_map (size_t n, R *r, const X *x)
 {
   for (size_t i = 0; i < n; i++)
     r[i] = fun (x[i]);
 }
 
 template <typename R, typename X, R fun (const X& x)>
-inline void mx_inline_map (size_t n, R *r, const X *x) throw ()
+inline void mx_inline_map (size_t n, R *r, const X *x)
 {
   for (size_t i = 0; i < n; i++)
     r[i] = fun (x[i]);
 }
 
 // Appliers.  Since these call the operation just once, we pass it as
 // a pointer, to allow the compiler reduce number of instances.
 
 template <typename R, typename X>
 inline Array<R>
 do_mx_unary_op (const Array<X>& x,
-                void (*op) (size_t, R *, const X *) throw ())
+                void (*op) (size_t, R *, const X *))
 {
   Array<R> r (x.dims ());
   op (r.numel (), r.fortran_vec (), x.data ());
   return r;
 }
 
 // Shortcuts for applying mx_inline_map.
 
@@ -481,28 +481,28 @@ inline Array<R>
 do_mx_unary_map (const Array<X>& x)
 {
   return do_mx_unary_op<R, X> (x, mx_inline_map<R, X, fun>);
 }
 
 template <typename R>
 inline Array<R>&
 do_mx_inplace_op (Array<R>& r,
-                  void (*op) (size_t, R *) throw ())
+                  void (*op) (size_t, R *))
 {
   op (r.numel (), r.fortran_vec ());
   return r;
 }
 
 template <typename R, typename X, typename Y>
 inline Array<R>
 do_mm_binary_op (const Array<X>& x, const Array<Y>& y,
-                 void (*op) (size_t, R *, const X *, const Y *) throw (),
-                 void (*op1) (size_t, R *, X, const Y *) throw (),
-                 void (*op2) (size_t, R *, const X *, Y) throw (),
+                 void (*op) (size_t, R *, const X *, const Y *),
+                 void (*op1) (size_t, R *, X, const Y *),
+                 void (*op2) (size_t, R *, const X *, Y),
                  const char *opname)
 {
   dim_vector dx = x.dims ();
   dim_vector dy = y.dims ();
   if (dx == dy)
     {
       Array<R> r (dx);
       op (r.numel (), r.fortran_vec (), x.data (), y.data ());
@@ -514,38 +514,38 @@ do_mm_binary_op (const Array<X>& x, cons
     }
   else
     octave::err_nonconformant (opname, dx, dy);
 }
 
 template <typename R, typename X, typename Y>
 inline Array<R>
 do_ms_binary_op (const Array<X>& x, const Y& y,
-                 void (*op) (size_t, R *, const X *, Y) throw ())
+                 void (*op) (size_t, R *, const X *, Y))
 {
   Array<R> r (x.dims ());
   op (r.numel (), r.fortran_vec (), x.data (), y);
   return r;
 }
 
 template <typename R, typename X, typename Y>
 inline Array<R>
 do_sm_binary_op (const X& x, const Array<Y>& y,
-                 void (*op) (size_t, R *, X, const Y *) throw ())
+                 void (*op) (size_t, R *, X, const Y *))
 {
   Array<R> r (y.dims ());
   op (r.numel (), r.fortran_vec (), x, y.data ());
   return r;
 }
 
 template <typename R, typename X>
 inline Array<R>&
 do_mm_inplace_op (Array<R>& r, const Array<X>& x,
-                  void (*op) (size_t, R *, const X *) throw (),
-                  void (*op1) (size_t, R *, X) throw (),
+                  void (*op) (size_t, R *, const X *) ,
+                  void (*op1) (size_t, R *, X) ,
                   const char *opname)
 {
   dim_vector dr = r.dims ();
   dim_vector dx = x.dims ();
   if (dr == dx)
     op (r.numel (), r.fortran_vec (), x.data ());
   else if (is_valid_inplace_bsxfun (opname, dr, dx))
     do_inplace_bsxfun_op (r, x, op, op1);
@@ -553,36 +553,36 @@ do_mm_inplace_op (Array<R>& r, const Arr
     octave::err_nonconformant (opname, dr, dx);
 
   return r;
 }
 
 template <typename R, typename X>
 inline Array<R>&
 do_ms_inplace_op (Array<R>& r, const X& x,
-                  void (*op) (size_t, R *, X) throw ())
+                  void (*op) (size_t, R *, X))
 {
   op (r.numel (), r.fortran_vec (), x);
   return r;
 }
 
 template <typename T1, typename T2>
 inline bool
-mx_inline_equal (size_t n, const T1 *x, const T2 *y) throw ()
+mx_inline_equal (size_t n, const T1 *x, const T2 *y)
 {
   for (size_t i = 0; i < n; i++)
     if (x[i] != y[i])
       return false;
   return true;
 }
 
 template <typename T>
 inline bool
 do_mx_check (const Array<T>& a,
-             bool (*op) (size_t, const T *) throw ())
+             bool (*op) (size_t, const T *))
 {
   return op (a.numel (), a.data ());
 }
 
 // NOTE: we don't use std::norm because it typically does some heavyweight
 // magic to avoid underflows, which we don't need here.
 template <typename T>
 inline T cabsq (const std::complex<T>& c)
