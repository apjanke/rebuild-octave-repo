# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1452767736 18000
#      Thu Jan 14 05:35:36 2016 -0500
# Node ID 202cfd2b45149719f1a87c209a4cb73498c1b6c2
# Parent  d9c1884d1aaab0322570e7f19c75d4724b4af106
store parser state in base class; use it in push and pull parsers

* parse.h, oct-parse.in.yy (octave_base_parser::parser_state): Move
here from octave_push_parser class.
(octave_base_parser::octave_base_parser): Initialize parser_state in
initializer list.
(octave_base_parser::~octave_base_parser): Delete parser_state.
(octave_base_parser::reset): Delete and re-create parser_state.
(octave_push_parser::init): Delete method and all uses.
(octave_push_parser::~octave_push_parser): Don't delete parser_state.

diff --git a/libinterp/parse-tree/oct-parse.in.yy b/libinterp/parse-tree/oct-parse.in.yy
--- a/libinterp/parse-tree/oct-parse.in.yy
+++ b/libinterp/parse-tree/oct-parse.in.yy
@@ -2024,21 +2024,40 @@ opt_sep         : // empty
 #undef lexer
 
 static void
 yyerror (octave_base_parser& parser, const char *s)
 {
   parser.bison_error (s);
 }
 
+octave_base_parser::octave_base_parser (octave_base_lexer& lxr)
+  : endfunction_found (false), autoloading (false),
+    fcn_file_from_relative_lookup (false), parsing_subfunctions (false),
+    max_fcn_depth (0), curr_fcn_depth (0), primary_fcn_scope (-1),
+    curr_class_name (), curr_package_name (), function_scopes (),
+    primary_fcn_ptr (0), subfunction_names (), classdef_object (0),
+    stmt_list (0), lexer (lxr), parser_state (yypstate_new ())
+{ }
+
 octave_base_parser::~octave_base_parser (void)
 {
   delete stmt_list;
 
   delete &lexer;
+
+  // FIXME: Deleting the internal Bison parser state structure does
+  // not clean up any partial parse trees in the event of an interrupt or
+  // error.  It's not clear how to safely do that with the C language
+  // parser that Bison generates.  The C++ language parser that Bison
+  // generates would do it for us automatically whenever an exception
+  // is thrown while parsing input, but there is currently no C++
+  // interface for a push parser.
+
+  yypstate_delete (static_cast<yypstate *> (parser_state));
 }
 
 void
 octave_base_parser::reset (void)
 {
   endfunction_found = false;
   autoloading = false;
   fcn_file_from_relative_lookup = false;
@@ -2051,16 +2070,19 @@ octave_base_parser::reset (void)
   function_scopes.clear ();
   primary_fcn_ptr  = 0;
   subfunction_names.clear ();
 
   delete stmt_list;
   stmt_list = 0;
 
   lexer.reset ();
+
+  yypstate_delete (static_cast<yypstate *> (parser_state));
+  parser_state = yypstate_new ();
 }
 
 // Error mesages for mismatched end tokens.
 
 void
 octave_base_parser::end_error (const char *type, token::end_tok_type ettype,
                                int l, int c)
 {
@@ -3999,27 +4021,16 @@ octave_base_parser::bison_error (const c
 }
 
 int
 octave_parser::run (void)
 {
   return octave_parse (*this);
 }
 
-octave_push_parser::~octave_push_parser (void)
-{
-  yypstate_delete (static_cast<yypstate *> (parser_state));
-}
-
-void
-octave_push_parser::init (void)
-{
-  parser_state = yypstate_new ();
-}
-
 // Parse input from INPUT.  Pass TRUE for EOF if the end of INPUT should
 // finish the parse.
 
 int
 octave_push_parser::run (const std::string& input, bool eof)
 {
   int status = -1;
 
diff --git a/libinterp/parse-tree/parse.h b/libinterp/parse-tree/parse.h
--- a/libinterp/parse-tree/parse.h
+++ b/libinterp/parse-tree/parse.h
@@ -140,32 +140,24 @@ extern OCTINTERP_API void cleanup_statem
 // FIXME: to be removed after more parser+lexer refactoring.
 extern octave_base_lexer *LEXER;
 
 class
 octave_base_parser
 {
 public:
 
-  octave_base_parser (octave_base_lexer& lxr)
-    : endfunction_found (false),
-      autoloading (false), fcn_file_from_relative_lookup (false),
-      parsing_subfunctions (false), max_fcn_depth (0),
-      curr_fcn_depth (0), primary_fcn_scope (-1),
-      curr_class_name (), curr_package_name (), function_scopes (),
-      primary_fcn_ptr (0), subfunction_names (), classdef_object (0),
-      stmt_list (0), lexer (lxr)
-  { }
+  octave_base_parser (octave_base_lexer& lxr);
 
   ~octave_base_parser (void);
 
   void reset (void);
 
   // Error mesages for mismatched end tokens.
-  void end_error (const char *type, token::end_tok_type ettype, int l, int c);
+  void end_error (const char *type, token::end_tok_type expected, int l, int c);
 
   // Check to see that end tokens are properly matched.
   bool end_token_ok (token *tok, token::end_tok_type expected);
 
   // Maybe print a warning if an assignment expression is used as the
   // test in a logical expression.
   void maybe_warn_assign_as_truth_value (tree_expression *expr);
 
@@ -453,16 +445,19 @@ public:
   tree_classdef *classdef_object;
 
   // Result of parsing input.
   tree_statement_list *stmt_list;
 
   // State of the lexer.
   octave_base_lexer& lexer;
 
+  // Internal state of the Bison parser.
+  void *parser_state;
+
 private:
 
   // No copying!
 
   octave_base_parser (const octave_base_parser&);
 
   octave_base_parser& operator = (const octave_base_parser&);
 };
@@ -502,32 +497,25 @@ private:
 };
 
 class
 octave_push_parser : public octave_base_parser
 {
 public:
 
   octave_push_parser (void)
-    : octave_base_parser (*(new octave_push_lexer ())), parser_state (0)
-  {
-    init ();
-  }
+    : octave_base_parser (*(new octave_push_lexer ()))
+  { }
 
-  ~octave_push_parser (void);
-
-  void init (void);
+  ~octave_push_parser (void) { }
 
   int run (const std::string& input, bool eof);
 
 private:
 
-  // Internal state of the Bison parser.
-  void *parser_state;
-
   // No copying!
 
   octave_push_parser (const octave_push_parser&);
 
   octave_push_parser& operator = (const octave_push_parser&);
 };
 
 #endif
