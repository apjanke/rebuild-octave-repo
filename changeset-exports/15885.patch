# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1357229800 18000
#      Thu Jan 03 11:16:40 2013 -0500
# Branch stable
# Node ID 065bc79443350b77397102c9febb5dab85a61c1a
# Parent  878623ca15e175010398b17d111461380b977f1e
fix incorrect results for convhulln in some cases (bug #38013)

* convhulln.cc (Fconvhulln): Skip check for non-simplicial facets for
2-dimensional hull.  New test.

diff --git a/src/DLD-FUNCTIONS/convhulln.cc b/src/DLD-FUNCTIONS/convhulln.cc
--- a/src/DLD-FUNCTIONS/convhulln.cc
+++ b/src/DLD-FUNCTIONS/convhulln.cc
@@ -174,17 +174,17 @@ convex hull is calculated.\n\n\
       facetT *facet;
 
       octave_idx_type i = 0;
 
       FORALLfacets
         {
           octave_idx_type j = 0;
 
-          if (! nonsimp_seen && ! facet->simplicial)
+          if (! (nonsimp_seen || facet->simplicial || qh hull_dim == 2))
             {
               nonsimp_seen = true;
 
               if (cmd.find ("QJ") != std::string::npos)
                 {
                   // Should never happen with QJ.
                   error ("convhulln: qhull failed: option 'QJ' returned non-simplicial facet");
                   return retval;
@@ -308,9 +308,14 @@ convex hull is calculated.\n\n\
 %! assert (v, 1.0, 1e6*eps);
 
 %!testif HAVE_QHULL
 %! tetrahedron = [1 1 1;-1 -1 1;-1 1 -1;1 -1 -1];
 %! [h, v] = convhulln (tetrahedron);
 %! h = sortrows (sort (h, 2), [1 2 3]);
 %! assert (h, [1 2 3;1 2 4; 1 3 4; 2 3 4]);
 %! assert (v, 8/3, 10*eps);
+
+%!testif HAVE_QHULL
+%! triangle=[0 0; 1 1; 1 0; 1 2];
+%! h = convhulln (triangle);
+%! assert (size (h), [3 2]);
 */
