# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1500657690 14400
#      Fri Jul 21 13:21:30 2017 -0400
# Node ID 96e36ba3be65a8002e076e0a705e653560a6788b
# Parent  7becd026c8bad68fbeae98a95f8c63bac57145cf
maint: Strip trailing whitespace from source files.

diff --git a/libinterp/parse-tree/pt-eval.cc b/libinterp/parse-tree/pt-eval.cc
--- a/libinterp/parse-tree/pt-eval.cc
+++ b/libinterp/parse-tree/pt-eval.cc
@@ -1331,17 +1331,17 @@ namespace octave
               }
           }
       }
 
     if (base_expr_val.is_undefined ())
       base_expr_val = evaluate (expr);
 
     bool indexing_object = base_expr_val.isobject () || base_expr_val.isjava ()
-                           || base_expr_val.is_classdef_meta(); 
+                           || base_expr_val.is_classdef_meta ();
                            // ^ this check is for static methods on class name
 
     std::list<octave_value_list> idx;
 
     octave_value partial_expr_val = base_expr_val;
 
     for (int i = beg; i < n; i++)
       {
diff --git a/liboctave/numeric/lo-mappers.h b/liboctave/numeric/lo-mappers.h
--- a/liboctave/numeric/lo-mappers.h
+++ b/liboctave/numeric/lo-mappers.h
@@ -76,17 +76,17 @@ namespace octave
 
     extern OCTAVE_API Complex asin (const Complex& x);
     extern OCTAVE_API FloatComplex asin (const FloatComplex& x);
 
     inline Complex atan (const Complex& x) { return std::atan (x); }
     inline FloatComplex atan (const FloatComplex& x) { return std::atan (x); }
 
     // The C++ standard would normally return a std::complex value for conj
-    // even when the input is fully real.  Octave overrides this. 
+    // even when the input is fully real.  Octave overrides this.
     inline double conj (double x) { return x; }
     inline float conj (float x) { return x; }
 
     template <typename T>
     std::complex<T>
     conj (const std::complex<T>& x)
     {
       return std::conj (x);
diff --git a/test/bug-51192/class_bug51192.m b/test/bug-51192/class_bug51192.m
--- a/test/bug-51192/class_bug51192.m
+++ b/test/bug-51192/class_bug51192.m
@@ -1,7 +1,7 @@
-classdef class_bug51192 
+classdef class_bug51192
   methods (Static)
     function foo (val)
       val;
     endfunction
   endmethods
 endclassdef
