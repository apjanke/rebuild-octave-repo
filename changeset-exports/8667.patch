# HG changeset patch
# User Ben Abbott <bpabbott@mac.com>
# Date 1233765469 18000
#      Wed Feb 04 11:37:49 2009 -0500
# Node ID a891981681758a896e7978d903c508c6924436a6
# Parent  34b7b93f91bcc0a42f17f7d2993a8bf189d8b07b
freqz.m: freqz.m: fix for long input

diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,8 +1,13 @@
+2009-02-04  Frederick Umminger  <Frederick_Umminger@playstation.sony.com>
+
+	* signal/freqz.m: Ensure causal phase response.
+	Handle long input correctly.
+
 2009-02-04  Petr Mikulik  <mikulik@physics.muni.cz>
 
 	* plot/__go_draw_axes__.m: Pass "interpolate 0, 0" to gnuplot
 	instead of "interpolate 4, 4".
 
 2009-02-04  John W. Eaton  <jwe@octave.org>
 
 	* audio/wavwrite.m, deprecated/splu.m, general/bitcmp.m,
diff --git a/scripts/signal/freqz.m b/scripts/signal/freqz.m
--- a/scripts/signal/freqz.m
+++ b/scripts/signal/freqz.m
@@ -122,29 +122,48 @@ function [h_r, f_r] = freqz (b, a, n, re
     w = f = n;
     if (nargin == 4)
       ## Sampling rate Fs was specified
       w = 2*pi*f/Fs;
     endif
     k = max (length (b), length (a));
     hb = polyval (postpad (b, k), exp (j*w));
     ha = polyval (postpad (a, k), exp (j*w));
-  elseif (strcmp (region, "whole"))
-    f = Fs * (0:n-1)' / n;
+  else
     ## polyval(fliplr(P),exp(jw)) is O(p n) and fft(x) is O(n log(n)),
     ## where p is the order of the polynomial P.  For small p it
     ## would be faster to use polyval but in practice the overhead for
     ## polyval is much higher and the little bit of time saved isn't
     ## worth the extra code.
-    hb = fft (postpad (b, n));
-    ha = fft (postpad (a, n));
-  else
-    f = Fs/2 * (0:n-1)' / n;
-    hb = fft (postpad (b, 2*n))(1:n);
-    ha = fft (postpad (a, 2*n))(1:n);
+    k = max (length (b), length (a));
+    if (k > n/2 && nargout == 0)
+      ## Ensure a causal phase response.
+      n = n * 2 .^ ceil (log2 (2*k/n));
+    endif
+
+    if (strcmp (region, "whole"))
+      N = n;
+    else
+      N = 2*n;
+    endif
+
+    f = Fs * (0:n-1).' / N;
+
+    pad_sz = N*ceil (k/N);
+    b = postpad (b, pad_sz);
+    a = postpad (a, pad_sz);
+
+    hb = zeros (n, 1);
+    ha = zeros (n, 1);
+
+    for i = 1:N:pad_sz
+      hb = hb + fft (postpad (b(i:i+N-1), N))(1:n);
+      ha = ha + fft (postpad (a(i:i+N-1), N))(1:n);
+    endfor
+
   endif
 
   h = hb ./ ha;
 
   if (nargout != 0)
     ## Return values and don't plot.
     h_r = h;
     f_r = f;
