# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1550598820 0
#      Tue Feb 19 17:53:40 2019 +0000
# Node ID bbc6b88aacc19c717a2c22500f80704eb5c8a812
# Parent  568565a70b589186d7dd619404a01f64772508e8
eliminate some useless functions

* ov-class.h, ov-class.cc (octave_class::print_name_tag,
octave_class::print_with_name): Delete virtual functions that simply
call the base class implementation.
* ov-classdef.h, ov-classdef.cc (octave_classdef::print_name_tag,
octave_classdef::print_with_name): Likewise.

diff --git a/libinterp/octave-value/ov-class.cc b/libinterp/octave-value/ov-class.cc
--- a/libinterp/octave-value/ov-class.cc
+++ b/libinterp/octave-value/ov-class.cc
@@ -1018,29 +1018,16 @@ octave_class::print_raw (std::ostream& o
 {
   octave::unwind_protect frame;
 
   indent (os);
   os << "  <class " << class_name () << '>';
   newline (os);
 }
 
-bool
-octave_class::print_name_tag (std::ostream& os, const std::string& name) const
-{
-  return octave_base_value::print_name_tag (os, name);
-}
-
-void
-octave_class::print_with_name (std::ostream& os, const std::string& name,
-                               bool print_padding)
-{
-  octave_base_value::print_with_name (os, name, print_padding);
-}
-
 // Loading a class properly requires an exemplar map entry for success.
 // If we don't have one, we attempt to create one by calling the constructor
 // with no arguments.
 bool
 octave_class::reconstruct_exemplar (void)
 {
   bool retval = false;
 
diff --git a/libinterp/octave-value/ov-class.h b/libinterp/octave-value/ov-class.h
--- a/libinterp/octave-value/ov-class.h
+++ b/libinterp/octave-value/ov-class.h
@@ -169,21 +169,16 @@ public:
   bool is_instance_of (const std::string&) const;
 
   string_vector string_vector_value (bool pad) const;
 
   void print (std::ostream& os, bool pr_as_read_syntax = false);
 
   void print_raw (std::ostream& os, bool pr_as_read_syntax = false) const;
 
-  bool print_name_tag (std::ostream& os, const std::string& name) const;
-
-  void print_with_name (std::ostream& os, const std::string& name,
-                        bool print_padding = true);
-
   bool reconstruct_exemplar (void);
 
   static void clear_exemplar_map (void);
 
   bool reconstruct_parents (void);
 
   bool save_ascii (std::ostream& os);
 
diff --git a/libinterp/octave-value/ov-classdef.cc b/libinterp/octave-value/ov-classdef.cc
--- a/libinterp/octave-value/ov-classdef.cc
+++ b/libinterp/octave-value/ov-classdef.cc
@@ -1022,30 +1022,16 @@ octave_classdef::print_raw (std::ostream
   os << "<object ";
   if (object.is_array ())
     os << "array ";
   os << class_name () << '>';
   newline (os);
 }
 
 bool
-octave_classdef::print_name_tag (std::ostream& os,
-                                 const std::string& name) const
-{
-  return octave_base_value::print_name_tag (os, name);
-}
-
-void
-octave_classdef::print_with_name (std::ostream& os, const std::string& name,
-                                  bool print_padding)
-{
-  octave_base_value::print_with_name (os, name, print_padding);
-}
-
-bool
 octave_classdef::is_instance_of (const std::string& cls_name) const
 {
   cdef_class cls = lookup_class (cls_name, false, false);
 
   if (cls.ok ())
     return is_superclass (cls, object.get_class ());
 
   return false;
diff --git a/libinterp/octave-value/ov-classdef.h b/libinterp/octave-value/ov-classdef.h
--- a/libinterp/octave-value/ov-classdef.h
+++ b/libinterp/octave-value/ov-classdef.h
@@ -1510,21 +1510,16 @@ public:
   bool isobject (void) const { return true; }
 
   bool is_classdef_object (void) const { return true; }
 
   void print (std::ostream& os, bool pr_as_read_syntax = false);
 
   void print_raw (std::ostream& os, bool pr_as_read_syntax = false) const;
 
-  bool print_name_tag (std::ostream& os, const std::string& name) const;
-
-  void print_with_name (std::ostream& os, const std::string& name,
-                        bool print_padding = true);
-
   bool is_instance_of (const std::string& cls_name) const;
 
   octave_value_list subsref (const std::string& type,
                              const std::list<octave_value_list>& idx,
                              int nargout);
 
   octave_value subsref (const std::string& type,
                         const std::list<octave_value_list>& idx)
