# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1231510543 -3600
#      Fri Jan 09 15:15:43 2009 +0100
# Node ID d6a349c7bd394775df34949f55baa87574bd454f
# Parent  6306ce1406f17cdd8ff29da51c3ca8bbca1565b9
fix {} assigment if error occurs on subsequent assignment component

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,13 @@
+2009-01-09  Jaroslav Hajek  <highegg@gmail.com>
+
+	* ov-cell.cc (octave_cell::subsasgn): Put erased copy back after
+	make_unique has been called.
+
 2009-01-09  Kai Habel <kai.habel@gmx.de>
 
         * graphics.cc: Calculate normals for surface boundaries, use
         more neighboring points to calculate interior normals
 
 2009-01-09  John W. Eaton  <jwe@octave.org>
 
 	* input.cc (get_user_input (void)): Don't increment input_line_number.
diff --git a/src/ov-cell.cc b/src/ov-cell.cc
--- a/src/ov-cell.cc
+++ b/src/ov-cell.cc
@@ -182,28 +182,32 @@ octave_cell::subsasgn (const std::string
 	    octave_value tmp = do_index_op (idx.front (), true);
 
 	    if (! error_state)
 	      {
 		if (tmp.dims ().numel () == 1)
 		  {
 		    tmp = tmp.cell_value ()(0,0);
 
-                    // Erase the reference to avoid copying.
-                    assign (idx.front (), octave_value ());
-
 		    std::list<octave_value_list> next_idx (idx);
 
 		    next_idx.erase (next_idx.begin ());
 
-                    // This should be a no-op.
-		    tmp.make_unique ();
-
 		    if (! tmp.is_defined () || tmp.is_zero_by_zero ())
 		      tmp = octave_value::empty_conv (type.substr (1), rhs);
+                    else
+                      {
+                        // This is a bit of black magic. tmp is a shallow copy
+                        // of an element inside this cell, and maybe more. To
+                        // prevent make_unique from always forcing a copy, we
+                        // temporarily delete the stored value.
+                        assign (idx.front (), octave_value ());
+                        tmp.make_unique ();
+                        assign (idx.front (), Cell (tmp));
+                      }
 
 		    if (! error_state)
 		      t_rhs = tmp.subsasgn (type.substr (1), next_idx, rhs);
 		  }
                 else
                   error ("scalar indices required for {} in assignment.");
 	      }
 	  }
