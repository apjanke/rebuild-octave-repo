# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1233040508 -3600
#      Tue Jan 27 08:15:08 2009 +0100
# Node ID 8833c0b18eb2f82cf1ec6b20366fb3a78ca8570e
# Parent  dee5d60257e47855bbe56bd00c385d79de04f572
enable default settings queries in optim funcs

diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,8 +1,15 @@
+2009-01-27  Jaroslav Hajek  <highegg@gmail.com>
+
+	* optimization/fsolve.m: Provide default values on request.
+	Adjust some defaults.
+	* optimization/fzero.m: Dtto.
+	* optimization/optimset.m: Query optimal values via the M*b way.
+
 2009-01-26  Jason Riedy  <jason@acm.org>
 
 	* miscellaneous/orderfields.m: Also avoid loop for non-empty structs.
 
 2009-01-17  Jaroslav Hajek  <highegg@gmail.com>
 
 	* optimization/fsolve.m: Disable Broyden updates for sparse jacobians.
 
diff --git a/scripts/optimization/fsolve.m b/scripts/optimization/fsolve.m
--- a/scripts/optimization/fsolve.m
+++ b/scripts/optimization/fsolve.m
@@ -34,19 +34,19 @@
 ## @code{"FunValCheck"}, @code{"OutputFcn"}, @code{"TolX"},
 ## @code{"TolFun"}, @code{"MaxIter"}, @code{"MaxFunEvals"}, 
 ## @code{"Jacobian"} and @code{"Updating"}. 
 ##
 ## If @code{"Jacobian"} is @code{"on"}, it specifies that @var{fcn},
 ## called with 2 output arguments, also returns the Jacobian matrix
 ## of right-hand sides at the requested point.  @code{"TolX"} specifies
 ## the termination tolerance in the unknown variables, while 
-## @code{"TolFun"} is a tolerance for equations. Default is @code{1e1*eps}
-## for @code{"TolX"} and @code{1e2*eps} for @code{"TolFun"}.
-## If @code{"Updating"} is true, the function will attempt to use Broyden
+## @code{"TolFun"} is a tolerance for equations. Default is @code{1e-7}
+## for both @code{"TolX"} and @code{"TolFun"}.
+## If @code{"Updating"} is "on", the function will attempt to use Broyden
 ## updates to update the Jacobian, in order to reduce the amount of jacobian
 ## calculations.
 ## If your user function always calculates the Jacobian (regardless of number
 ## of output arguments), this option provides no advantage and should be set to
 ## false.
 ## 
 ## For description of the other options, see @code{optimset}.
 ##
@@ -67,45 +67,57 @@
 ## The trust region radius became excessively small. 
 ## @end table
 ##
 ## Note: If you only have a single nonlinear equation of one variable, using 
 ## @code{fzero} is usually a much better idea.
 ## @seealso{fzero, optimset}
 ## @end deftypefn
 
-function [x, fvec, info, output, fjac] = fsolve (fcn, x0, options)
+function [x, fvec, info, output, fjac] = fsolve (fcn, x0, options = struct ())
 
-  if (nargin < 3)
-    options = struct ();
+  ## Get default options if requested.
+  if (nargin == 1 && ischar (fcn) && strcmp (fcn, 'defaults'))
+    x = optimset ("MaxIter", 400, "MaxFunEvals", Inf, \
+    "Jacobian", "off", "TolX", 1e-7, "TolF", 1e-7,
+    "OutputFcn", [], "Updating", "on", "FunValCheck", "off");
+    return;
+  endif
+
+  if (nargin < 2 || nargin > 3 || ! ismatrix (x0))
+    print_usage ();
+  endif    
+
+  if (ischar (fcn))
+    fcn = str2func (fcn);
   endif
 
   xsiz = size (x0);
   n = numel (x0);
 
   has_jac = strcmpi (optimget (options, "Jacobian", "off"), "on");
-  maxiter = optimget (options, "MaxIter", Inf);
+  maxiter = optimget (options, "MaxIter", 400);
   maxfev = optimget (options, "MaxFunEvals", Inf);
   outfcn = optimget (options, "OutputFcn");
-  updating = optimget (options, "Updating", true);
+  updating = strcmpi (optimget (options, "Updating", "on"), "on");
 
   funvalchk = strcmpi (optimget (options, "FunValCheck", "off"), "on");
 
   if (funvalchk)
     ## Replace fun with a guarded version.
     fun = @(x) guarded_eval (fun, x);
   endif
 
   ## These defaults are rather stringent. I think that normally, user
   ## prefers accuracy to performance.
 
   macheps = eps (class (x0));
 
-  tolx = optimget (options, "TolX", sqrt (macheps));
-  tolf = optimget (options, "TolFun", sqrt (macheps));
+  tolx = optimget (options, "TolX", 1e-7);
+  tolf = optimget (options, "TolFun", 1e-7);
 
   factor = 100;
   ## FIXME: TypicalX corresponds to user scaling (???)
   autodg = true;
 
   niter = 1;
   nfev = 0;
 
diff --git a/scripts/optimization/fzero.m b/scripts/optimization/fzero.m
--- a/scripts/optimization/fzero.m
+++ b/scripts/optimization/fzero.m
@@ -56,16 +56,23 @@
 ## FSM version using one interior point determination and one bracketing
 ## per iteration, thus reducing the number of temporary variables and
 ## simplifying the algorithm structure. Further, this approach reduces
 ## the need for external functions and error handling. The algorithm has
 ## also been slightly modified.
 
 function [x, fval, info, output] = fzero (fun, x0, options = struct ())
 
+  ## Get default options if requested.
+  if (nargin == 1 && ischar (fun) && strcmp (fun, 'defaults'))
+    x = optimset ("MaxIter", Inf, "MaxFunEvals", Inf, "TolX", 0, \
+    "OutputFcn", [], "FunValCheck", "off");
+    return;
+  endif
+
   if (nargin < 2 || nargin > 3)
     print_usage ();
   endif
 
   if (ischar (fun))
     fun = str2func (fun);
   endif
 
diff --git a/scripts/optimization/optimset.m b/scripts/optimization/optimset.m
--- a/scripts/optimization/optimset.m
+++ b/scripts/optimization/optimset.m
@@ -47,20 +47,19 @@ function retval = optimset (varargin)
     else
       ## Return empty structure.
       ## We're incompatible with Matlab at this point.
       retval = struct ();
     endif
   elseif (nargs == 1 && ischar (varargin{1}))
     ## Return defaults for named function.
     fcn = varargin{1};
-    optfcn = sprintf ("__%s_defopts__", fcn);
-    if (exist (optfcn))
-      retval = optimset (struct (), feval (optfcn));
-    else
+    try
+      retval = feval (fcn, 'defaults');
+    catch
       error ("no defaults for function `%s'", fcn);
     endif
   elseif (nargs == 2 && isstruct (varargin{1}) && isstruct (varargin{2}))
     ## Set slots in old from nonempties in new.  Should we be checking
     ## to ensure that the field names are expected?
     old = varargin{1};
     new = varargin{2};
     fnames = fieldnames (old);
