# HG changeset patch
# User jwe
# Date 824522591 0
#      Sat Feb 17 02:03:11 1996 +0000
# Node ID 01e3ed56c415a29678392d1c344212019f171059
# Parent  2ff7b73519db6644059e9cd537c8b02dc46e46d0
[project @ 1996-02-17 02:02:50 by jwe]

diff --git a/src/dirfns.cc b/src/dirfns.cc
--- a/src/dirfns.cc
+++ b/src/dirfns.cc
@@ -313,17 +313,17 @@ DEFUN_TEXT (cd, args, ,
 change current working directory\n\
 if no arguments are given, the current directory is changed to the\n\
 users home directory")
 {
   Octave_object retval;
 
   int argc = args.length () + 1;
 
-  string_vector argv = make_argv (args, "cd");
+  string_vector argv = args.make_argv ("cd");
 
   if (error_state)
     return retval;
 
   if (argc > 1)
     {
       string dirname = oct_tilde_expand (argv[1]);
 
@@ -348,26 +348,32 @@ users home directory")
 
   return retval;
 }
 
 DEFALIAS (chdir, cd);
 
 // Get a directory listing.
 
+static void
+cleanup_iprocstream (void *p)
+{
+  delete (iprocstream *) p;
+}
+
 DEFUN_TEXT (ls, args, ,
   "ls [options]\n\
 \n\
 print a directory listing")
 {
   Octave_object retval;
 
   int argc = args.length () + 1;
 
-  string_vector argv = make_argv (args, "ls");
+  string_vector argv = args.make_argv ("ls");
 
   if (error_state)
     return retval;
 
   ostrstream ls_buf;
 
   ls_buf << "ls -C ";
   for (int i = 1; i < argc; i++)
diff --git a/src/pager.cc b/src/pager.cc
--- a/src/pager.cc
+++ b/src/pager.cc
@@ -107,16 +107,22 @@ maybe_page_output (ostrstream& msg_buf)
 	  cout << message;
 	  cout.flush ();
 	}
 
       delete [] message;
     }
 }
 
+static void
+cleanup_oprocstream (void *p)
+{
+  delete (oprocstream *) p;
+}
+
 void
 flush_output_to_pager (void)
 {
   // Extract message from buffer, then delete the buffer so that any
   // new messages get sent separately.
 
   *pager_buf << ends;
   char *message = pager_buf->str ();
@@ -198,17 +204,17 @@ DEFUN_TEXT (diary, args, ,
 diary [file]\n\
 \n\
 redirect all input and screen output to a file.")
 {
   Octave_object retval;
 
   int argc = args.length () + 1;
 
-  string_vector argv = make_argv (args, "diary");
+  string_vector argv = args.make_argv ("diary");
 
   if (error_state)
     return retval;
 
   if (diary_file.empty ())
     diary_file = "diary";
 
   switch (argc)
@@ -250,17 +256,17 @@ DEFUN_TEXT (more, args, ,
 more off\n\
 \n\
 Turn output pagination on or off.")
 {
   Octave_object retval;
 
   int argc = args.length () + 1;
 
-  string_vector argv = make_argv (args, "more");
+  string_vector argv = args.make_argv ("more");
 
   if (error_state)
     return retval;
 
   if (argc == 2)
     {
       string arg = argv[1];
 
diff --git a/src/procstream.cc b/src/procstream.cc
--- a/src/procstream.cc
+++ b/src/procstream.cc
@@ -24,135 +24,49 @@ Software Foundation, 59 Temple Place - S
 #if defined (__GNUG__)
 #pragma implementation
 #endif
 
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
-#include <fstream.h>
-#include <procbuf.h>
-
 #include "procstream.h"
 
-iprocstream::iprocstream (const char *command, int mode)
+procstreambase::procstreambase (const char *command, int mode)
 {
-  pbuf = new procbuf ();
+  pb_init ();
 
-  init (pbuf);
-
-  if (! pbuf->open (command, mode))
+  if (! pb.open (command, mode))
     set (ios::badbit);
 }
 
-iprocstream::~iprocstream (void)
-{
-  delete pbuf;
-}
-
 void
-iprocstream::open (const char *command, int mode)
+procstreambase::open (const char *command, int mode)
 {
   clear ();
 
-  if (pbuf)
-    delete pbuf;
-
-  pbuf = new procbuf ();
-
-  init (pbuf);
-
-  if (! pbuf->open (command, mode))
+  if (! pb.open (command, mode))
     set (ios::badbit);
 }
 
 int
-iprocstream::is_open (void)
-{
-  return pbuf && pbuf->is_open ();
-}
-
-int
-iprocstream::close (void)
+procstreambase::close (void)
 {
   int status = 0;
 
   if (is_open ())
     {
-      status = pbuf->sys_close ();
+      status = pb.sys_close ();
 
-      if (! pbuf->close ())
+      if (! pb.close ())
 	set (ios::failbit);
     }
 
   return status;
 }
 
-void
-cleanup_iprocstream (void *buf)
-{
-  delete (iprocstream *) buf;
-}
-
-oprocstream::oprocstream (const char *command, int mode)
-{
-  pbuf = new procbuf ();
-
-  init (pbuf);
-
-  if (! pbuf->open (command, mode))
-    set (ios::badbit);
-}
-
-oprocstream::~oprocstream (void)
-{
-  delete pbuf;
-}
-
-void
-oprocstream::open (const char *command, int mode)
-{
-  clear ();
-
-  if (pbuf)
-    delete pbuf;
-    
-  pbuf = new procbuf ();
-
-  init (pbuf);
-
-  if (! pbuf->open (command, mode))
-    set (ios::badbit);
-}
-
-int
-oprocstream::is_open (void)
-{
-  return pbuf && pbuf->is_open ();
-}
-
-int
-oprocstream::close (void)
-{
-  int status = 0;
-
-  if (is_open ())
-    {
-      if (! pbuf->close ())
-	set (ios::failbit);
-    }
-
-  return status;
-}
-
-void
-cleanup_oprocstream (void *buf)
-{
-  delete (oprocstream *) buf;
-}
-
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; page-delimiter: "^/\\*" ***
 ;;; End: ***
 */
diff --git a/src/procstream.h b/src/procstream.h
--- a/src/procstream.h
+++ b/src/procstream.h
@@ -23,61 +23,119 @@ Software Foundation, 59 Temple Place - S
 
 #if !defined (octave_procstream_h)
 #define octave_procstream_h 1
 
 #if defined (__GNUG__)
 #pragma interface
 #endif
 
-#include <fstream.h>
-
-class procbuf;
+#include <iostream.h>
+#include <procbuf.h>
 
 class
-iprocstream : public ifstream
+procstreambase : virtual public ios
 {
 public:
-  iprocstream (void) { pbuf = 0; }
-  iprocstream (const char *command, int mode=ios::in);
+
+  procstreambase (void) { pb_init (); }
+
+  procstreambase (const char *name, int mode);
 
-  ~iprocstream (void);
+  ~procstreambase (void) { close (); }
 
-  void open (const char *command, int mode=ios::in);
+  void open (const char *name, int mode);
 
-  int is_open (void);
+  int is_open (void) const { return pb.is_open (); }
 
   int close (void);
 
 private:
-  procbuf *pbuf;
+
+  procbuf pb;
+
+  void pb_init (void) { init (&pb); }
+
+  procstreambase (const procstreambase&);
+
+  procstreambase& operator = (const procstreambase&);
 };
 
-extern void cleanup_iprocstream (void *);
+class
+iprocstream : public procstreambase, public istream
+{
+public:
+
+  iprocstream (void) : procstreambase () { }
+
+  iprocstream (const char *name, int mode=ios::in)
+    : procstreambase(name, mode) { }
+
+  ~iprocstream (void) { }
+
+  void open (const char *name, int mode=ios::in)
+    {
+      procstreambase::open (name, mode);
+    }
+
+private:
+
+  iprocstream (const iprocstream&);
+
+  iprocstream& operator = (const iprocstream&);
+};
 
 class
-oprocstream : public ofstream
+oprocstream : public procstreambase, public ostream
 {
 public:
-  oprocstream (void) { pbuf = 0; }
-  oprocstream (const char *command, int mode=ios::out);
+ 
+  oprocstream (void) : procstreambase () { }
 
-  ~oprocstream (void);
+  oprocstream (const char *name, int mode=ios::out)
+    : procstreambase(name, mode) { }
 
-  void open (const char *command, int mode=ios::out);
+  ~oprocstream (void) { }
 
-  int is_open (void);
-
-  int close (void);
+  void open (const char *name, int mode=ios::out)
+    {
+      procstreambase::open(name, mode);
+    }
 
 private:
-  procbuf *pbuf;
+
+  oprocstream (const oprocstream&);
+
+  oprocstream& operator = (const oprocstream&);
 };
 
-extern void cleanup_oprocstream (void *);
+class
+procstream : public procstreambase, public iostream
+{
+public:
+
+  procstream (void) : procstreambase () { }
+
+  procstream (const char *name, int mode)
+    : procstreambase(name, mode) { }
+
+
+  ~procstream (void) { }
+
+  void open (const char *name, int mode)
+    {
+      procstreambase::open(name, mode);
+    }
+
+private:
+
+  procstream (const procstream&);
+
+  procstream& operator = (const procstream&);
+};
 
 #endif
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; page-delimiter: "^/\\*" ***
 ;;; End: ***
diff --git a/src/toplev.cc b/src/toplev.cc
--- a/src/toplev.cc
+++ b/src/toplev.cc
@@ -327,17 +327,17 @@ clean_up_and_exit (int retval)
 
 DEFUN_TEXT (casesen, args, ,
   "casesen [on|off]")
 {
   Octave_object retval;
 
   int argc = args.length () + 1;
 
-  string_vector argv = make_argv (args, "casesen");
+  string_vector argv = args.make_argv ("casesen");
 
   if (error_state)
     return retval;
 
   if (argc == 1 || (argc > 1 && argv[1] == "off"))
     warning ("casesen: sorry, Octave is always case sensitive");
   else if (argc > 1 && argv[1] == "on")
     ; // ok.
@@ -593,16 +593,22 @@ string CATCH.")
   else
     print_usage ("eval");
 
   return retval;
 }
 
 // Execute a shell command.
 
+static void
+cleanup_iprocstream (void *p)
+{
+  delete (iprocstream *) p;
+}
+
 DEFUN (system, args, nargout,
   "system (string [, return_output]): execute shell commands")
 {
   Octave_object retval;
 
   int nargin = args.length ();
 
   if (nargin < 1 || nargin > 2)
