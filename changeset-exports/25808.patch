# HG changeset patch
# User Rik <rik@octave.org>
# Date 1534466136 25200
#      Thu Aug 16 17:35:36 2018 -0700
# Node ID dc47c9e48801d71f367a11487bc2081b91bbd337
# Parent  cb775c73866def96e135b5212dd2732d46288a46
Guarantee an integer for max of Range when base and increment are ints (bug #46859).

* Range.cc (range_internal): Check all_elements_are_ints() and round internal
limit to nearest integer if necessary.

* range.tst: Add BIST tests for bug #46859.

diff --git a/liboctave/array/Range.cc b/liboctave/array/Range.cc
--- a/liboctave/array/Range.cc
+++ b/liboctave/array/Range.cc
@@ -599,16 +599,20 @@ Range::limit_internal (void) const
 {
   double tmp_limit = rng_limit;
 
   if (rng_inc > 0)
     tmp_limit = max ();
   else
     tmp_limit = min ();
 
+  // If result must be an integer then force the limit to be one.
+  if (all_elements_are_ints ())
+    tmp_limit = std::round (tmp_limit);
+
   return (tmp_limit != rng_limit) ? tmp_limit : rng_limit;
 }
 
 void
 Range::init (void)
 {
   rng_numel = numel_internal ();
   rng_limit = limit_internal ();
diff --git a/test/range.tst b/test/range.tst
--- a/test/range.tst
+++ b/test/range.tst
@@ -103,15 +103,30 @@
 %!assert (max (rneg), -0)
 %!assert (signbit (max (rneg)), true)
 
 %!assert (sort (r, "descend"), [3 2 1 -0])
 %!assert (signbit (sort (r, "descend")), logical ([0 0 0 1]))
 %!assert (signbit (sort (rrev, "ascend")), logical ([1 0 0 0]))
 
 ## Test sorting of ranges (bug #45739)
-
 %!shared r, rrev
 %! r = 1:2:10;
 %! rrev = 10:-2:1;
 
-%!assert (sort (r, "descend"), [9 7 5 3 1])
-%!assert (sort (rrev, "ascend"), [2 4 6 8 10])
+%!assert <*45739> (sort (r, "descend"), [9 7 5 3 1])
+%!assert <*45739> (sort (rrev, "ascend"), [2 4 6 8 10])
+
+## Test final value within eps of an integer (bug #46859)
+%!test <*46859>
+%! rng = 1 : (1001/250)/(1/250);
+%! assert (rng(end), 1001);
+
+%!test <*46859>
+%! rng = 2000: -1 : (1001/250)/(1/250);
+%! assert (rng(end), 1001);
+
+## This is not Matlab compatible (stops at 1000 with 999 elements)
+## Octave prefers the more intuitive "pure math" approach where
+## (1001/250) / (1/250) => (1001/250)*(250/1) => 1001.
+%!test <*46859>
+%! rng = 1 : (1001/250)/(1/250);
+%! assert (numel (1000));
