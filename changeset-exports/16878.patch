# HG changeset patch
# User Rik <rik@octave.org>
# Date 1372632616 25200
#      Sun Jun 30 15:50:16 2013 -0700
# Node ID 011119bf48681afcaf53bba9015a1b67830b701c
# Parent  5482cd26311a7f275cc1a4a90cf623b531bcdaa5
doc: Add jit_enable() and debug_jit() to manual.

* doc/interpreter/octave.texi: Add @menu item JIT Compiler.
* doc/interpreter/vectorize.txi: Add JIT Compiler node with
explanation of JIT.  Add DOCSTRING entries for jit_enable and debug_jit.

diff --git a/doc/interpreter/octave.texi b/doc/interpreter/octave.texi
--- a/doc/interpreter/octave.texi
+++ b/doc/interpreter/octave.texi
@@ -595,16 +595,17 @@ Linear Algebra
 * Specialized Solvers::
 
 Vectorization and Faster Code Execution
 
 * Basic Vectorization::        Basic techniques for code optimization
 * Broadcasting::               Broadcasting operations
 * Function Application::       Applying functions to arrays, cells, and structs
 * Accumulation::               Accumulation functions
+* JIT Compiler::               Just-In-Time Compiler for loops
 * Miscellaneous Techniques::   Other techniques for speeding up code
 * Examples::
 
 Nonlinear Equations
 
 * Solvers::
 * Minimizers::          
 
diff --git a/doc/interpreter/vectorize.txi b/doc/interpreter/vectorize.txi
--- a/doc/interpreter/vectorize.txi
+++ b/doc/interpreter/vectorize.txi
@@ -37,16 +37,17 @@ Octave code will see a dramatic speed up
 This chapter discusses vectorization and other techniques for writing faster
 code.
 
 @menu
 * Basic Vectorization::        Basic techniques for code optimization
 * Broadcasting::               Broadcasting operations
 * Function Application::       Applying functions to arrays, cells, and structs
 * Accumulation::               Accumulation functions
+* JIT Compiler::               Just-In-Time Compiler for loops
 * Miscellaneous Techniques::   Other techniques for speeding up code
 * Examples::
 @end menu
 
 @node Basic Vectorization
 @section Basic Vectorization
 
 To a very good first approximation, the goal in vectorization is to
@@ -501,16 +502,45 @@ array, cell, or struct.
 Whenever it's possible to categorize according to indices the elements
 of an array when performing a computation, accumulation functions can be
 useful.
 
 @DOCSTRING(accumarray)
 
 @DOCSTRING(accumdim)
 
+@node JIT Compiler
+@section JIT Compiler
+
+Vectorization is the preferred technique for eliminating loops and speeding up
+code.  Nevertheless, it is not always possible to replace every loop.  In such
+situations it may be worth trying Octave's @strong{experimental} Just-In-Time
+(JIT) compiler.
+
+A JIT compiler works by analyzing the body of a loop, translating the Octave
+statements into another language, compiling the new code segment into an
+executable, and then running the executable and collecting any results.  The
+process is not simple and there is a significant amount of work to perform for
+each step.  It can still make sense, however, if the loop counter is a
+large number.  Because Octave is an interpreted language every time through a
+loop Octave must parse the statements in the loop body before executing them.
+With a JIT compiler this is done just once when the body is translated to
+another language.
+
+The JIT compiler is a very new feature in Octave and not all valid Octave
+statements can currently be accelerated.  However, if no other technique
+is available it may be worth benchmarking the code with JIT enabled.  The
+function @code{jit_enable} is used to turn compilation on or off.  The function
+@code{debug_jit} is not likely to be of use to anyone not working directly on
+the implementation of the JIT compiler.
+
+@DOCSTRING(jit_enable)
+
+@DOCSTRING(debug_jit)
+
 @node Miscellaneous Techniques
 @section Miscellaneous Techniques
 @cindex execution speed
 @cindex speedups
 @cindex optimization
 
 Here are some other ways of improving the execution speed of Octave
 programs.
