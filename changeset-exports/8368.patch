# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1228378517 -3600
#      Thu Dec 04 09:15:17 2008 +0100
# Node ID c72c1c9bccdcd58ecfaa031727d2c3eedab25553
# Parent  445d27d79f4e65c65faddd896d09584aa95c4fb6
call blocked permuted qr factorization routines from LAPACK

diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,15 @@
+2008-12-04  Jaroslav Hajek  <highegg@gmail.com>
+
+	* dbleQRP.cc (QRP::QRP): Call DGEQP3 rather than DGEQPF.
+	* floatQRP.cc (FloatQRP::FloatQRP): Call SGEQP3 rather than SGEQPF.
+	* CmplxQRP.cc (ComplexQRP::ComplexQRP): Call ZGEQP3 rather than ZGEQPF.
+	* fCmplxQRP.cc (FloatComplexQRP::FloatComplexQRP): Call CGEQP3 rather than CGEQPF.
+
 2008-12-03  Jaroslav Hajek  <highegg@gmail.com>
 
 	* PermMatrix.h, PermMatrix.cc: New sources.
 	* MDiagArray2.cc (MDiagArray2<T>::is_multiple_of_identity): New method.
 	* MDiagArray2.h (MDiagArray2<T>::is_multiple_of_identity): Declare it.
 	* idx-vector.cc (idx_vector::is_permutation): New method.
 	* idx-vector.h (idx_vector::is_permutation): Declare it.
 	* base-lu.cc (base_lu::getp): New method.
diff --git a/liboctave/CmplxQRP.cc b/liboctave/CmplxQRP.cc
--- a/liboctave/CmplxQRP.cc
+++ b/liboctave/CmplxQRP.cc
@@ -29,19 +29,19 @@ along with Octave; see the file COPYING.
 
 #include "CmplxQRP.h"
 #include "f77-fcn.h"
 #include "lo-error.h"
 
 extern "C"
 {
   F77_RET_T
-  F77_FUNC (zgeqpf, ZGEQPF) (const octave_idx_type&, const octave_idx_type&, Complex*,
+  F77_FUNC (zgeqp3, ZGEQP3) (const octave_idx_type&, const octave_idx_type&, Complex*,
 			     const octave_idx_type&, octave_idx_type*, Complex*, Complex*,
-			     double*, octave_idx_type&);
+			     const octave_idx_type&, double*, octave_idx_type&);
 
   F77_RET_T
   F77_FUNC (zungqr, ZUNGQR) (const octave_idx_type&, const octave_idx_type&, const octave_idx_type&,
 			     Complex*, const octave_idx_type&, Complex*,
 			     Complex*, const octave_idx_type&, octave_idx_type&);
 }
 
 // It would be best to share some of this code with ComplexQR class...
@@ -66,38 +66,43 @@ ComplexQRP::init (const ComplexMatrix& a
 	("ComplexQR must have non-empty matrix");
       return;
     }
 
   octave_idx_type min_mn = m < n ? m : n;
   Array<Complex> tau (min_mn);
   Complex *ptau = tau.fortran_vec ();
 
-  octave_idx_type lwork = 3*n > 32*m ? 3*n : 32*m;
-  Array<Complex> work (lwork);
-  Complex *pwork = work.fortran_vec ();
-
   octave_idx_type info = 0;
 
   ComplexMatrix A_fact = a;
   if (m > n && qr_type != QR::economy)
     A_fact.resize (m, m, 0.0);
 
   Complex *tmp_data = A_fact.fortran_vec ();
 
   Array<double> rwork (2*n);
   double *prwork = rwork.fortran_vec ();
 
   MArray<octave_idx_type> jpvt (n, 0);
   octave_idx_type *pjpvt = jpvt.fortran_vec ();
 
+  Complex rlwork = 0;
+  // Workspace query...
+  F77_XFCN (zgeqp3, ZGEQP3, (m, n, tmp_data, m, pjpvt, ptau, &rlwork,
+			     -1, prwork, info));
+
+  octave_idx_type lwork = rlwork.real ();
+  Array<Complex> work (lwork);
+  Complex *pwork = work.fortran_vec ();
+
   // Code to enforce a certain permutation could go here...
 
-  F77_XFCN (zgeqpf, ZGEQPF, (m, n, tmp_data, m, pjpvt, ptau, pwork,
-			     prwork, info));
+  F77_XFCN (zgeqp3, ZGEQP3, (m, n, tmp_data, m, pjpvt, ptau, pwork,
+			     lwork, prwork, info));
 
   // Form Permutation matrix (if economy is requested, return the
   // indices only!)
 
   jpvt -= 1;
   p = PermMatrix (jpvt, true);
 
   octave_idx_type n2 = (qr_type == QR::economy) ? min_mn : m;
diff --git a/liboctave/dbleQRP.cc b/liboctave/dbleQRP.cc
--- a/liboctave/dbleQRP.cc
+++ b/liboctave/dbleQRP.cc
@@ -29,18 +29,19 @@ along with Octave; see the file COPYING.
 
 #include "dbleQRP.h"
 #include "f77-fcn.h"
 #include "lo-error.h"
 
 extern "C"
 {
   F77_RET_T
-  F77_FUNC (dgeqpf, DGEQPF) (const octave_idx_type&, const octave_idx_type&, double*,
-			     const octave_idx_type&, octave_idx_type*, double*, double*, octave_idx_type&);
+  F77_FUNC (dgeqp3, DGEQP3) (const octave_idx_type&, const octave_idx_type&, double*,
+			     const octave_idx_type&, octave_idx_type*, double*, double*,
+                             const octave_idx_type&, octave_idx_type&);
 
   F77_RET_T
   F77_FUNC (dorgqr, DORGQR) (const octave_idx_type&, const octave_idx_type&, const octave_idx_type&,
 			     double*, const octave_idx_type&, double*, double*,
 			     const octave_idx_type&, octave_idx_type&);
 }
 
 // It would be best to share some of this code with QR class...
@@ -64,34 +65,38 @@ QRP::init (const Matrix& a, QR::type qr_
       (*current_liboctave_error_handler) ("QR must have non-empty matrix");
       return;
     }
 
   octave_idx_type min_mn = m < n ? m : n;
   Array<double> tau (min_mn);
   double *ptau = tau.fortran_vec ();
 
-  octave_idx_type lwork = 3*n > 32*m ? 3*n : 32*m;
-  Array<double> work (lwork);
-  double *pwork = work.fortran_vec ();
-
   octave_idx_type info = 0;
 
   Matrix A_fact = a;
   if (m > n && qr_type != QR::economy)
     A_fact.resize (m, m, 0.0);
 
   double *tmp_data = A_fact.fortran_vec ();
 
   MArray<octave_idx_type> jpvt (n, 0);
   octave_idx_type *pjpvt = jpvt.fortran_vec ();
 
+  double rlwork = 0;
+  // Workspace query...
+  F77_XFCN (dgeqp3, DGEQP3, (m, n, tmp_data, m, pjpvt, ptau, &rlwork, -1, info));
+
+  octave_idx_type lwork = rlwork;
+  Array<double> work (lwork);
+  double *pwork = work.fortran_vec ();
+
   // Code to enforce a certain permutation could go here...
 
-  F77_XFCN (dgeqpf, DGEQPF, (m, n, tmp_data, m, pjpvt, ptau, pwork, info));
+  F77_XFCN (dgeqp3, DGEQP3, (m, n, tmp_data, m, pjpvt, ptau, pwork, lwork, info));
 
   // Form Permutation matrix (if economy is requested, return the
   // indices only!)
 
   jpvt -= 1;
   p = PermMatrix (jpvt, true);
 
   octave_idx_type n2 = (qr_type == QR::economy) ? min_mn : m;
diff --git a/liboctave/fCmplxQRP.cc b/liboctave/fCmplxQRP.cc
--- a/liboctave/fCmplxQRP.cc
+++ b/liboctave/fCmplxQRP.cc
@@ -29,19 +29,19 @@ along with Octave; see the file COPYING.
 
 #include "fCmplxQRP.h"
 #include "f77-fcn.h"
 #include "lo-error.h"
 
 extern "C"
 {
   F77_RET_T
-  F77_FUNC (cgeqpf, CGEQPF) (const octave_idx_type&, const octave_idx_type&, FloatComplex*,
+  F77_FUNC (cgeqp3, CGEQP3) (const octave_idx_type&, const octave_idx_type&, FloatComplex*,
 			     const octave_idx_type&, octave_idx_type*, FloatComplex*, FloatComplex*,
-			     float*, octave_idx_type&);
+			     const octave_idx_type&, float*, octave_idx_type&);
 
   F77_RET_T
   F77_FUNC (cungqr, CUNGQR) (const octave_idx_type&, const octave_idx_type&, const octave_idx_type&,
 			     FloatComplex*, const octave_idx_type&, FloatComplex*,
 			     FloatComplex*, const octave_idx_type&, octave_idx_type&);
 }
 
 // It would be best to share some of this code with FloatComplexQR class...
@@ -66,38 +66,43 @@ FloatComplexQRP::init (const FloatComple
 	("FloatComplexQR must have non-empty matrix");
       return;
     }
 
   octave_idx_type min_mn = m < n ? m : n;
   Array<FloatComplex> tau (min_mn);
   FloatComplex *ptau = tau.fortran_vec ();
 
-  octave_idx_type lwork = 3*n > 32*m ? 3*n : 32*m;
-  Array<FloatComplex> work (lwork);
-  FloatComplex *pwork = work.fortran_vec ();
-
   octave_idx_type info = 0;
 
   FloatComplexMatrix A_fact = a;
   if (m > n && qr_type != QR::economy)
     A_fact.resize (m, m, 0.0);
 
   FloatComplex *tmp_data = A_fact.fortran_vec ();
 
   Array<float> rwork (2*n);
   float *prwork = rwork.fortran_vec ();
 
   MArray<octave_idx_type> jpvt (n, 0);
   octave_idx_type *pjpvt = jpvt.fortran_vec ();
 
+  FloatComplex rlwork = 0;
+  // Workspace query...
+  F77_XFCN (cgeqp3, CGEQP3, (m, n, tmp_data, m, pjpvt, ptau, &rlwork,
+			     -1, prwork, info));
+
+  octave_idx_type lwork = rlwork.real ();
+  Array<FloatComplex> work (lwork);
+  FloatComplex *pwork = work.fortran_vec ();
+
   // Code to enforce a certain permutation could go here...
 
-  F77_XFCN (cgeqpf, CGEQPF, (m, n, tmp_data, m, pjpvt, ptau, pwork,
-			     prwork, info));
+  F77_XFCN (cgeqp3, CGEQP3, (m, n, tmp_data, m, pjpvt, ptau, pwork,
+			     lwork, prwork, info));
 
   // Form Permutation matrix (if economy is requested, return the
   // indices only!)
 
   jpvt -= 1;
   p = PermMatrix (jpvt, true);
 
   octave_idx_type n2 = (qr_type == QR::economy) ? min_mn : m;
diff --git a/liboctave/floatQRP.cc b/liboctave/floatQRP.cc
--- a/liboctave/floatQRP.cc
+++ b/liboctave/floatQRP.cc
@@ -29,18 +29,19 @@ along with Octave; see the file COPYING.
 
 #include "floatQRP.h"
 #include "f77-fcn.h"
 #include "lo-error.h"
 
 extern "C"
 {
   F77_RET_T
-  F77_FUNC (sgeqpf, SGEQPF) (const octave_idx_type&, const octave_idx_type&, float*,
-			     const octave_idx_type&, octave_idx_type*, float*, float*, octave_idx_type&);
+  F77_FUNC (sgeqp3, SGEQP3) (const octave_idx_type&, const octave_idx_type&, float*,
+			     const octave_idx_type&, octave_idx_type*, float*, float*,
+                             const octave_idx_type&, octave_idx_type&);
 
   F77_RET_T
   F77_FUNC (sorgqr, SORGQR) (const octave_idx_type&, const octave_idx_type&, const octave_idx_type&,
 			     float*, const octave_idx_type&, float*, float*,
 			     const octave_idx_type&, octave_idx_type&);
 }
 
 // It would be best to share some of this code with QR class...
@@ -64,34 +65,38 @@ FloatQRP::init (const FloatMatrix& a, QR
       (*current_liboctave_error_handler) ("QR must have non-empty matrix");
       return;
     }
 
   octave_idx_type min_mn = m < n ? m : n;
   Array<float> tau (min_mn);
   float *ptau = tau.fortran_vec ();
 
-  octave_idx_type lwork = 3*n > 32*m ? 3*n : 32*m;
-  Array<float> work (lwork);
-  float *pwork = work.fortran_vec ();
-
   octave_idx_type info = 0;
 
   FloatMatrix A_fact = a;
   if (m > n && qr_type != QR::economy)
     A_fact.resize (m, m, 0.0);
 
   float *tmp_data = A_fact.fortran_vec ();
 
   MArray<octave_idx_type> jpvt (n, 0);
   octave_idx_type *pjpvt = jpvt.fortran_vec ();
 
+  float rlwork = 0;
+  // Workspace query...
+  F77_XFCN (sgeqp3, SGEQP3, (m, n, tmp_data, m, pjpvt, ptau, &rlwork, -1, info));
+
+  octave_idx_type lwork = rlwork;
+  Array<float> work (lwork);
+  float *pwork = work.fortran_vec ();
+
   // Code to enforce a certain permutation could go here...
 
-  F77_XFCN (sgeqpf, SGEQPF, (m, n, tmp_data, m, pjpvt, ptau, pwork, info));
+  F77_XFCN (sgeqp3, SGEQP3, (m, n, tmp_data, m, pjpvt, ptau, pwork, lwork, info));
 
   // Form Permutation matrix (if economy is requested, return the
   // indices only!)
 
   jpvt -= 1;
   p = PermMatrix (jpvt, true);
 
   octave_idx_type n2 = (qr_type == QR::economy) ? min_mn : m;
