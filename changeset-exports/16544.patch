# HG changeset patch
# User John Donoghue <john.donoghue@ieee.org>
# Date 1366157565 14400
#      Tue Apr 16 20:12:45 2013 -0400
# Node ID ced9b101723c66c5680315f4aafda8f63e4008e4
# Parent  c580690814397456489a06c2e307e19e1ba70b90
Updates to find-file-dialog usage

* libgui/src/find-files-dialog.h
  (find-files-dialog class): Added _browse_button.

* libgui/src/find-files-dialog.cc
  (find_files_dialog::find_files_dialog): setting browse button to
  _browse_button, added single selection to results table and alternating row
  colors. Using QDialogButtonBox closebutton type for close button, added group
  boxes around filename/location and comtent search options.
  (find_files_dialog::item_double_clicked): if column 1 clicked, signal for
  pathname folder.
  (find_files_dialog::stop_find, find_files_dialog::start_find): enable/disable
  browse button.

diff --git a/libgui/src/find-files-dialog.cc b/libgui/src/find-files-dialog.cc
--- a/libgui/src/find-files-dialog.cc
+++ b/libgui/src/find-files-dialog.cc
@@ -15,18 +15,18 @@ FITNESS FOR A PARTICULAR PURPOSE.  See t
 for more details.
 
 You should have received a copy of the GNU General Public License
 along with Octave; see the file COPYING.  If not, see
 <http://www.gnu.org/licenses/>.
 
 */
 
-#include  "find-files-dialog.h"
-#include  "find-files-model.h"
+#include "find-files-dialog.h"
+#include "find-files-model.h"
 #include "resource-manager.h"
 #include <QPushButton>
 #include <QDialogButtonBox>
 #include <QGridLayout>
 #include <QLabel>
 #include <QLineEdit>
 #include <QComboBox>
 #include <QCheckBox>
@@ -34,16 +34,17 @@ along with Octave; see the file COPYING.
 #include <QTableView>
 #include <QFileDialog>
 #include <QStatusBar>
 #include <QIcon>
 #include <QFileInfo>
 #include <QTimer>
 #include <QDirIterator>
 #include <QTextStream>
+#include <QGroupBox>
 
 find_files_dialog::find_files_dialog (QWidget * p)
  : QDialog (p)
 {
   setWindowTitle (tr("Find Files"));
   setWindowIcon (QIcon (":/actions/icons/search.png"));
 
   _dir_iterator = 0;
@@ -62,19 +63,19 @@ find_files_dialog::find_files_dialog (QW
 
   QLabel * start_dir_label = new QLabel (tr ("Start in:"));
 
   _start_dir_edit = new QLineEdit;
   _start_dir_edit->setText (settings->value ("findfiles/start_dir",QDir::currentPath()).toString());
   _start_dir_edit->setToolTip (tr ("Enter the start directory"));
   start_dir_label->setBuddy (_start_dir_edit);
 
-  QPushButton * browse_button = new QPushButton (tr ("Browse...")); 
-  browse_button->setToolTip (tr ("Browse for start directory"));
-  connect(browse_button, SIGNAL(clicked()), this, SLOT(browse_folders()));
+  _browse_button = new QPushButton (tr ("Browse..."));
+  _browse_button->setToolTip (tr ("Browse for start directory"));
+  connect(_browse_button, SIGNAL(clicked()), this, SLOT(browse_folders()));
 
   _recurse_dirs_check = new QCheckBox (tr ("Recurse directories"));
   _recurse_dirs_check->setChecked (settings->value ("findfiles/recurse_dirs", false).toBool());
   _recurse_dirs_check->setToolTip (tr ("Search recursively through directories for matching files"));
 
   _include_dirs_check = new QCheckBox (tr ("Include directories"));
   _include_dirs_check->setChecked (settings->value ("findfiles/include_dirs", false).toBool());
   _include_dirs_check->setToolTip (tr ("Include matching directories in search results"));
@@ -95,16 +96,19 @@ find_files_dialog::find_files_dialog (QW
   _content_case_check->setChecked (settings->value ("findfiles/content_case", false).toBool());
   _content_case_check->setToolTip (tr ("Set text content is case insensitive"));
   
   find_files_model * model = new find_files_model ();
   _file_list = new QTableView;
   _file_list->setWordWrap (false);
   _file_list->setModel (model);
   _file_list->setShowGrid (false);
+  _file_list->setSelectionBehavior(QAbstractItemView::SelectRows);
+  _file_list->setSelectionMode(QAbstractItemView::SingleSelection);
+  _file_list->setAlternatingRowColors(true);
   _file_list->setToolTip (tr ("Search results"));
   _file_list->horizontalHeader ()->restoreState (settings->value ("findfiles/column_state").toByteArray ());
   _file_list->sortByColumn (
               settings->value ("findfiles/sort_files_by_column",0).toInt (),
               static_cast<Qt::SortOrder>(settings->value ("findfiles/sort_files_by_order",Qt::AscendingOrder).toUInt ()));
 
   connect (_file_list, SIGNAL(doubleClicked(const QModelIndex&)),
            this,       SLOT(item_double_clicked(const QModelIndex &)));
@@ -116,50 +120,62 @@ find_files_dialog::find_files_dialog (QW
   _find_button->setToolTip (tr ("Start search for matching files"));
   connect (_find_button, SIGNAL(clicked()), this, SLOT(start_find()));
 
   _stop_button =  new QPushButton (tr("Stop"));
   _stop_button->setToolTip (tr ("Stop searching"));
   _stop_button->setEnabled (false);
   connect (_stop_button, SIGNAL(clicked()), this, SLOT(stop_find()));
 
-  _close_button =  new QPushButton (tr("Close"));
-  _close_button->setToolTip (tr ("Close the search window"));
-  connect (_close_button, SIGNAL(clicked()), this, SLOT(accept()));
-
   // layout everything
   QDialogButtonBox * button_box = new QDialogButtonBox (Qt::Vertical);
   button_box->addButton (_find_button, QDialogButtonBox::ActionRole);
   button_box->addButton (_stop_button, QDialogButtonBox::ActionRole);
-  button_box->addButton (_close_button, QDialogButtonBox::ActionRole);
- 
-  QGridLayout * left_layout = new QGridLayout;
-  left_layout->addWidget (file_name_label,1,1, 1,1);
-  left_layout->addWidget (_file_name_edit,1,2, 1,-1);
+
+  // add dialog close button
+  _close_button = button_box->addButton (QDialogButtonBox::Close);
+  connect (button_box,    SIGNAL (rejected ()),
+           this,          SLOT (close ()));
+
+  // name options
+  QGroupBox * name_group = new QGroupBox(tr("File name/location"));
+  QGridLayout * name_layout = new QGridLayout;
+  name_group->setLayout(name_layout);
+
+  name_layout->addWidget (file_name_label,1,1, 1,1);
+  name_layout->addWidget (_file_name_edit,1,2, 1,-1);
 
-  left_layout->addWidget (start_dir_label,2,1);
-  left_layout->addWidget (_start_dir_edit,2,2,1,3);
-  left_layout->addWidget (browse_button,2,5);
-  left_layout->setColumnStretch (2,1);
+  name_layout->addWidget (start_dir_label,2,1);
+  name_layout->addWidget (_start_dir_edit,2,2,1,3);
+  name_layout->addWidget (_browse_button,2,5);
+  name_layout->setColumnStretch (2,1);
+
+  name_layout->addWidget (_recurse_dirs_check,3,1);
+  name_layout->addWidget (_include_dirs_check,3,2);
+  name_layout->addWidget (_name_case_check,3,3);
 
-  left_layout->addWidget (_recurse_dirs_check,3,1);
-  left_layout->addWidget (_include_dirs_check,3,2);
-  left_layout->addWidget (_name_case_check,3,3);
+  // content options
+  QGroupBox * content_group = new QGroupBox(tr("File contents"));
+  QGridLayout * content_layout = new QGridLayout;
+  content_group->setLayout(content_layout);
+  content_layout->addWidget (_contains_text_check,4,1);
+  content_layout->addWidget (_contains_text_edit,4,2,1,3);
+  content_layout->setColumnStretch (2,1);
+  content_layout->addWidget (_content_case_check,5,1);
 
-  left_layout->addWidget (_contains_text_check,4,1);
-  left_layout->addWidget (_contains_text_edit,4,2,1,3);
-  left_layout->addWidget (_content_case_check,5,1);
 
   QGridLayout *main_layout = new QGridLayout;
   main_layout->setSizeConstraint (QLayout::SetFixedSize);
-  main_layout->addLayout (left_layout, 0, 0);
-  main_layout->addWidget (button_box, 0, 1);
-  main_layout->addWidget (_file_list,1,0);
-  main_layout->setRowStretch (1,1);
-  main_layout->addWidget (_status_bar,2,0,1,-1);
+  main_layout->addWidget (name_group, 0, 0);
+  main_layout->addWidget (content_group, 1, 0);
+  main_layout->addWidget (button_box, 0, 1,3,1);
+  main_layout->addWidget (_file_list,2,0);
+  main_layout->setRowStretch (2,1);
+  main_layout->addWidget (_status_bar,3,0,1,-1);
+
 
   setLayout (main_layout);
 
   connect (this, SIGNAL(finished(int)), this, SLOT(handle_done(int)));
 }
 
 find_files_dialog::~find_files_dialog ()
 {
@@ -222,16 +238,17 @@ find_files_dialog::start_find ()
   if (_dir_iterator) delete _dir_iterator;
 
   _dir_iterator = new QDirIterator (_start_dir_edit->text(), nameFilters, filters, flags);
   
   // enable/disable widgets 
   _find_button->setEnabled (false);
   _stop_button->setEnabled (true);
   _close_button->setEnabled (false);
+  _browse_button->setEnabled (false);
   _start_dir_edit->setEnabled (false);
   _file_name_edit->setEnabled (false);
   _recurse_dirs_check->setEnabled (false);
   _include_dirs_check->setEnabled (false);
   _name_case_check->setEnabled (false);
   _contains_text_check->setEnabled (false);
   _content_case_check->setEnabled (false);
   _contains_text_edit->setEnabled (false);
@@ -243,16 +260,17 @@ find_files_dialog::start_find ()
 void 
 find_files_dialog::stop_find ()
 {
   _timer->stop ();
 
   _find_button->setEnabled (true);
   _stop_button->setEnabled (false);
   _close_button->setEnabled (true);
+  _browse_button->setEnabled (true);
   _start_dir_edit->setEnabled (true);
   _file_name_edit->setEnabled (true);
   _recurse_dirs_check->setEnabled (true);
   _include_dirs_check->setEnabled (true);
   _name_case_check->setEnabled (true);
   _contains_text_check->setEnabled (true);
   _content_case_check->setEnabled (true);
   _contains_text_edit->setEnabled (true);
@@ -274,24 +292,33 @@ find_files_dialog::browse_folders ()
     {
       _start_dir_edit->setText (dir);
     }
 }
 
 void 
 find_files_dialog::item_double_clicked (const QModelIndex &idx)
 {
-  find_files_model *m = static_cast<find_files_model *> (_file_list->model());
+  find_files_model *m = static_cast<find_files_model *> (_file_list->model ());
 
   QFileInfo info = m->fileInfo (idx);
 
-  if(info.isDir())
-    emit dir_selected (info.absoluteFilePath());
+  if(idx.column () == 1)
+    {
+      // clicked in directory part
+      emit dir_selected (info.absolutePath());
+    }
   else
-    emit file_selected (info.absoluteFilePath());
+    {
+      // clicked in filename part
+      if(info.isDir ())
+        emit dir_selected (info.absoluteFilePath());
+      else
+        emit file_selected (info.absoluteFilePath());
+    }
 }
 
 void
 find_files_dialog::look_for_files ()
 {
   if(_dir_iterator && _dir_iterator->hasNext ())
     {
       QFileInfo info (_dir_iterator->next ());
diff --git a/libgui/src/find-files-dialog.h b/libgui/src/find-files-dialog.h
--- a/libgui/src/find-files-dialog.h
+++ b/libgui/src/find-files-dialog.h
@@ -57,16 +57,17 @@ private slots:
   void handle_done(int);
 private:
   bool is_match(const QFileInfo &info);
   QLineEdit * _start_dir_edit;
   QLineEdit * _file_name_edit;
   QPushButton * _stop_button;
   QPushButton * _find_button;
   QPushButton * _close_button;
+  QPushButton * _browse_button;
   QTableView   * _file_list;
   QTimer      * _timer;
   QCheckBox   * _recurse_dirs_check;
   QCheckBox   * _include_dirs_check;
   QCheckBox   * _name_case_check;
   QCheckBox   * _contains_text_check;
   QCheckBox   * _content_case_check;
   QLineEdit * _contains_text_edit;
