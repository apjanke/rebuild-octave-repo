# HG changeset patch
# User jwe
# Date 755335853 0
#      Wed Dec 08 07:30:53 1993 +0000
# Node ID c9894e8d5f04bd1ac8b83631b51add528b0c49e6
# Parent  e208bd9ade3678154b82838c25953fa27d6f401b
[project @ 1993-12-08 07:30:53 by jwe]

diff --git a/liboctave/Array.cc b/liboctave/Array.cc
--- a/liboctave/Array.cc
+++ b/liboctave/Array.cc
@@ -187,17 +187,17 @@ Array<T>::elem (int n)
 
 template <class T>
 T&
 Array<T>::checkelem (int n)
 {
   if (n < 0 || n >= rep->length ())
     {
       (*current_liboctave_error_handler) ("range error");
-      static T foo (0);
+      static T foo;
       return foo;
     }
   return elem (n);
 }
 
 template <class T>
 T&
 Array<T>::operator () (int n)
@@ -221,17 +221,18 @@ Array<T>::elem (int n) const
 
 template <class T>
 T
 Array<T>::checkelem (int n) const
 {
   if (n < 0 || n >= rep->length ())
     {
       (*current_liboctave_error_handler) ("range error");
-      return T (0);
+      T foo;
+      return foo;
     }
   return elem (n);
 }
 
 template <class T>
 T
 Array<T>::operator () (int n) const
 {
@@ -425,24 +426,36 @@ Array2<T>::elem (int i, int j)
 {
   return Array<T>::elem (d1*j+i);
 }
 
 template <class T>
 T&
 Array2<T>::checkelem (int i, int j)
 {
-  return Array<T>::checkelem (d1*j+i);
+  if (i < 0 || j < 0 || i >= d1 || j >= d2)
+    {
+      (*current_liboctave_error_handler) ("range error");
+      static T foo;
+      return foo;
+    }
+  return Array<T>::elem (d1*j+i);
 }
 
 template <class T>
 T&
 Array2<T>::operator () (int i, int j)
 {
-  return Array<T>::checkelem (d1*j+i);
+  if (i < 0 || j < 0 || i >= d1 || j >= d2)
+    {
+      (*current_liboctave_error_handler) ("range error");
+      static T foo;
+      return foo;
+    }
+  return Array<T>::elem (d1*j+i);
 }
 
 template <class T>
 T&
 Array2<T>::xelem (int i, int j)
 {
   return Array<T>::xelem (d1*j+i);
 }
@@ -453,24 +466,36 @@ Array2<T>::elem (int i, int j) const
 {
   return Array<T>::elem (d1*j+i);
 }
 
 template <class T>
 T
 Array2<T>::checkelem (int i, int j) const
 {
-  return Array<T>::checkelem (d1*j+i);
+  if (i < 0 || j < 0 || i >= d1 || j >= d2)
+    {
+      (*current_liboctave_error_handler) ("range error");
+      T foo;
+      return foo;
+    }
+  return Array<T>::elem (d1*j+i);
 }
 
 template <class T>
 T
 Array2<T>::operator () (int i, int j) const
 {
-  return Array<T>::checkelem (d1*j+i);
+  if (i < 0 || j < 0 || i >= d1 || j >= d2)
+    {
+      (*current_liboctave_error_handler) ("range error");
+      T foo;
+      return foo;
+    }
+  return Array<T>::elem (d1*j+i);
 }
 
 template <class T>
 void
 Array2<T>::resize (int r, int c)
 {
   if (r < 0 || c < 0)
     {
@@ -621,24 +646,36 @@ Array3<T>::elem (int i, int j, int k)
 {
   return Array2<T>::elem (i, d2*k+j);
 }
 
 template <class T>
 T&
 Array3<T>::checkelem (int i, int j, int k)
 {
-  return Array2<T>::checkelem (i, d1*k+j);
+  if (i < 0 || j < 0 || k < 0 || i >= d1 || j >= d2 || k >= d3)
+    {
+      (*current_liboctave_error_handler) ("range error");
+      static T foo;
+      return foo;
+    }
+  return Array2<T>::elem (i, d1*k+j);
 }
 
 template <class T>
 T&
 Array3<T>::operator () (int i, int j, int k)
 {
-  return Array2<T>::checkelem (i, d2*k+j);
+  if (i < 0 || j < 0 || k < 0 || i >= d1 || j >= d2 || k >= d3)
+    {
+      (*current_liboctave_error_handler) ("range error");
+      static T foo;
+      return foo;
+    }
+  return Array2<T>::elem (i, d2*k+j);
 }
 
 template <class T>
 T&
 Array3<T>::xelem (int i, int j, int k)
 {
   return Array2<T>::xelem (i, d2*k+j);
 }
@@ -649,24 +686,36 @@ Array3<T>::elem (int i, int j, int k) co
 {
   return Array2<T>::elem (i, d2*k+j);
 }
 
 template <class T>
 T
 Array3<T>::checkelem (int i, int j, int k) const
 {
-  return Array2<T>::checkelem (i, d1*k+j);
+  if (i < 0 || j < 0 || k < 0 || i >= d1 || j >= d2 || k >= d3)
+    {
+      (*current_liboctave_error_handler) ("range error");
+      T foo;
+      return foo;
+    }
+  return Array2<T>::elem (i, d1*k+j);
 }
 
 template <class T>
 T
 Array3<T>::operator () (int i, int j, int k) const
 {
-  return Array2<T>::checkelem (i, d2*k+j);
+  if (i < 0 || j < 0 || k < 0 || i >= d1 || j >= d2 || k >= d3)
+    {
+      (*current_liboctave_error_handler) ("range error");
+      T foo;
+      return foo;
+    }
+  return Array2<T>::elem (i, d2*k+j);
 }
 
 template <class T>
 void
 Array3<T>::resize (int n, int m, int k)
 {
   assert (0); /* XXX FIXME XXX */
 }
@@ -790,25 +839,35 @@ DiagArray<T>::elem (int r, int c)
   return (r == c) ? Array<T>::elem (r) : foo;
 }
 
 template <class T>
 T&
 DiagArray<T>::checkelem (int r, int c) 
 {
   static T foo (0);
-  return (r == c) ? Array<T>::checkelem (r) : foo;
+  if (r < 0 || c < 0 || r >= nr || c >= nc)
+    {
+      (*current_liboctave_error_handler) ("range error");
+      return foo;
+    }
+  return (r == c) ? Array<T>::elem (r) : foo;
 }
 
 template <class T>
 T&
 DiagArray<T>::operator () (int r, int c) 
 {
   static T foo (0);
-  return (r == c) ? Array<T>::operator () (r) : foo;
+  if (r < 0 || c < 0 || r >= nr || c >= nc)
+    {
+      (*current_liboctave_error_handler) ("range error");
+      return foo;
+    }
+  return (r == c) ? Array<T>::elem (r) : foo;
 }
 
 template <class T>
 T&
 DiagArray<T>::xelem (int r, int c)
 {
   static T foo (0);
   return (r == c) ? Array<T>::xelem (r) : foo;
@@ -820,24 +879,36 @@ DiagArray<T>::elem (int r, int c) const
 {
   return (r == c) ? Array<T>::elem (r) : T (0);
 }
 
 template <class T>
 T
 DiagArray<T>::checkelem (int r, int c) const
 {
-  return (r == c) ? Array<T>::checkelem (r) : T (0);
+  if (r < 0 || c < 0 || r >= nr || c >= nc)
+    {
+      (*current_liboctave_error_handler) ("range error");
+      T foo;
+      return foo;
+    }
+  return (r == c) ? Array<T>::elem (r) : T (0);
 }
 
 template <class T>
 T
 DiagArray<T>::operator () (int r, int c) const
 {
-  return (r == c) ? Array<T>::operator () (r) : T (0);
+  if (r < 0 || c < 0 || r >= nr || c >= nc)
+    {
+      (*current_liboctave_error_handler) ("range error");
+      T foo;
+      return foo;
+    }
+  return (r == c) ? Array<T>::elem (r) : T (0);
 }
 
 template <class T>
 void
 DiagArray<T>::resize (int r, int c)
 {
   if (r < 0 || c < 0)
     {
