# HG changeset patch
# User jwe
# Date 1146705514 0
#      Thu May 04 01:18:34 2006 +0000
# Node ID beb5b95de2c04bb2ab8afaf52681e56019f3680d
# Parent  9c3c903f037ef35e438dbd3e372ec00b179a5156
[project @ 2006-05-04 01:18:34 by jwe]

diff --git a/src/DLD-FUNCTIONS/regexp.cc b/src/DLD-FUNCTIONS/regexp.cc
--- a/src/DLD-FUNCTIONS/regexp.cc
+++ b/src/DLD-FUNCTIONS/regexp.cc
@@ -54,19 +54,19 @@ Boston, MA 02110-1301, USA.
 // return values in arrays at each new match.
 
 // FIXME don't bother collecting and composing return values the user
 // doesn't want.
 
 class regexp_elem
 {
 public:
-  regexp_elem (const string_vector _named_token, const Cell _t, 
-	       const std::string _m, const Matrix _te, const double _s, 
-	       const double _e) :
+  regexp_elem (const string_vector& _named_token, const Cell& _t, 
+	       const std::string& _m, const Matrix& _te, double _s, 
+	       double _e) :
     named_token (_named_token), t (_t), m (_m), te (_te), s (_s), e (_e) { }
 
   regexp_elem (const regexp_elem &a) : named_token (a.named_token), t (a.t), 
 				       m (a.m), te (a.te), s (a.s), e (a.e)
 				       { }
 
   string_vector named_token;
   Cell t;
@@ -421,17 +421,17 @@ octregexp_list (const octave_value_list 
 	      Cell cell_t (dim_vector(1,matches-1));
 	      for (int i = 1; i < matches; i++)
 		cell_t(i-1) = buffer.substr (match[i].rm_so+idx, 
 					     match[i].rm_eo-match[i].rm_so);
 	      t = cell_t;
 
 	      idx += match[0].rm_eo;
 
-	      regexp_elem new_elem (Octave_map(), t, m, te, s, e);
+	      regexp_elem new_elem (string_vector (), t, m, te, s, e);
 	      lst.push_back (new_elem);
 	      sz++;
 
 	      if (once)
 		break;
 	    }
 	  else
 	    break;
