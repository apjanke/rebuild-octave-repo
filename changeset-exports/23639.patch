# HG changeset patch
# User Rik <rik@octave.org>
# Date 1497834593 25200
#      Sun Jun 18 18:09:53 2017 -0700
# Node ID b488e958d024183138e960cbb965f4305e5a2cbc
# Parent  799833716c7b8477aefefc1b4fb780b0b77c3151
Use modf, pow from C++ std library.
These functions are guaranteed to be part of C++11 standard library.

* configure.ac: Remove AC_CHECK_FUNCS for modf, pow.

* data.cc, graphics.cc, graphics.in.h, lo-specfun.cc, mx-inlines.cc,
oct-inttypes.cc: Delegate to std::modf or std::pow.

diff --git a/configure.ac b/configure.ac
--- a/configure.ac
+++ b/configure.ac
@@ -2412,17 +2412,17 @@ AC_CHECK_FUNCS([lgamma lgammaf lgamma_r 
 AC_CHECK_FUNCS([log1p log1pf])
 AC_CHECK_FUNCS([realpath resolvepath roundl])
 AC_CHECK_FUNCS([select setgrent setpwent setsid siglongjmp strsignal])
 AC_CHECK_FUNCS([tcgetattr tcsetattr tgammaf toascii])
 AC_CHECK_FUNCS([umask waitpid])
 AC_CHECK_FUNCS([_getch _kbhit])
 
 dnl There are no workarounds in the code for missing these functions.
-AC_CHECK_FUNCS([modf pow sqrt sqrtf], [],
+AC_CHECK_FUNCS([sqrt sqrtf], [],
                [AC_MSG_ERROR([Missing function required to build Octave])])
 
 ## exp2, round, tgamma function checks
 AC_LANG_PUSH(C++)
 AC_CHECK_DECLS([round, tgamma], [], [], [[#include <cmath>]])
 AC_CHECK_FUNCS([round tgamma])
 AH_VERBATIM([Z_FUNCS_AND_DECLS], [
 #if defined (__cplusplus)
diff --git a/libinterp/corefcn/data.cc b/libinterp/corefcn/data.cc
--- a/libinterp/corefcn/data.cc
+++ b/libinterp/corefcn/data.cc
@@ -4524,17 +4524,17 @@ type and may be either @qcode{"double"} 
           Array<double> epsval (x.dims ());
 
           for (octave_idx_type i = 0; i < x.numel (); i++)
             {
               double val = x.xelem (i);
               if (octave::math::isnan (val) || octave::math::isinf (val))
                 epsval(i) = lo_ieee_nan_value ();
               else if (val < std::numeric_limits<double>::min ())
-                epsval(i) = pow (2.0, -1074e0);
+                epsval(i) = std::pow (2.0, -1074e0);
               else
                 {
                   int exponent;
                   octave::math::frexp (val, &exponent);
                   epsval(i) = std::pow (2.0,
                                         static_cast<double> (exponent - 53));
                 }
             }
@@ -6241,17 +6241,17 @@ doing nothing at all.
 
   octave_value retval;
   octave::sys::time now;
   double tmp = now.double_value ();
 
   if (nargout > 0)
     {
       double ip = 0.0;
-      double frac = modf (tmp, &ip);
+      double frac = std::modf (tmp, &ip);
       uint64_t microsecs = static_cast<uint64_t> (CLOCKS_PER_SEC * frac);
       microsecs += CLOCKS_PER_SEC * static_cast<uint64_t> (ip);
       retval = octave_uint64 (microsecs);
     }
   else
     tic_toc_timestamp = tmp;
 
   return retval;
diff --git a/libinterp/corefcn/graphics.cc b/libinterp/corefcn/graphics.cc
--- a/libinterp/corefcn/graphics.cc
+++ b/libinterp/corefcn/graphics.cc
@@ -7005,18 +7005,18 @@ axes::properties::get_axis_limits (doubl
       if (logscale)
         {
           if (octave::math::isinf (min_pos) && octave::math::isinf (max_neg))
             {
               // FIXME: max_neg is needed for "loglog ([0 -Inf])"
               //        This is the *only* place where max_neg is needed.
               //        Is there another way?
               retval = default_lim ();
-              retval(0) = pow (10., retval(0));
-              retval(1) = pow (10., retval(1));
+              retval(0) = std::pow (10., retval(0));
+              retval(1) = std::pow (10., retval(1));
               return retval;
             }
           if (min_val <= 0 && max_val > 0)
             {
               warning_with_id ("Octave:negative-data-log-axis",
                                "axis: omitting non-positive data in log plot");
               min_val = min_pos;
             }
@@ -7034,24 +7034,24 @@ axes::properties::get_axis_limits (doubl
                 {
                   min_val *= 1.1;
                   max_val *= 0.9;
                 }
             }
           if (min_val > 0)
             {
               // Log plots with all positive data
-              min_val = pow (10, std::floor (log10 (min_val)));
-              max_val = pow (10, std::ceil (log10 (max_val)));
+              min_val = std::pow (10, std::floor (log10 (min_val)));
+              max_val = std::pow (10, std::ceil (log10 (max_val)));
             }
           else
             {
               // Log plots with all negative data
-              min_val = -pow (10, std::ceil (log10 (-min_val)));
-              max_val = -pow (10, std::floor (log10 (-max_val)));
+              min_val = -std::pow (10, std::ceil (log10 (-min_val)));
+              max_val = -std::pow (10, std::floor (log10 (-max_val)));
             }
         }
       else
         {
           if (min_val == 0 && max_val == 0)
             {
               min_val = -1;
               max_val = 1;
diff --git a/libinterp/corefcn/graphics.in.h b/libinterp/corefcn/graphics.in.h
--- a/libinterp/corefcn/graphics.in.h
+++ b/libinterp/corefcn/graphics.in.h
@@ -21,16 +21,17 @@ along with Octave; see the file COPYING.
 */
 
 #if ! defined (octave_graphics_h)
 #define octave_graphics_h 1
 
 #include "octave-config.h"
 
 #include <cctype>
+#include <cmath>
 
 #include <algorithm>
 #include <list>
 #include <map>
 #include <set>
 #include <sstream>
 #include <string>
 
@@ -129,17 +130,17 @@ public:
 
     return retval;
   }
 
   double scale (double d) const
   { return log10 (d); }
 
   double unscale (double d) const
-  { return pow (10.0, d); }
+  { return std::pow (10.0, d); }
 
   base_scaler * clone (void) const
   { return new log_scaler (); }
 
 private:
   void do_scale (const double *src, double *dest, int n) const
   {
     for (int i = 0; i < n; i++)
@@ -169,17 +170,17 @@ public:
 
     return retval;
   }
 
   double scale (double d) const
   { return -log10 (-d); }
 
   double unscale (double d) const
-  { return -pow (10.0, -d); }
+  { return -std::pow (10.0, -d); }
 
   base_scaler * clone (void) const
   { return new neg_log_scaler (); }
 
 private:
   void do_scale (const double *src, double *dest, int n) const
   {
     for (int i = 0; i < n; i++)
diff --git a/liboctave/numeric/lo-specfun.cc b/liboctave/numeric/lo-specfun.cc
--- a/liboctave/numeric/lo-specfun.cc
+++ b/liboctave/numeric/lo-specfun.cc
@@ -3045,17 +3045,17 @@ namespace octave
     {
       double a, acu, adj, fpu, g, h;
       int iex;
       bool indx;
       double pp, prev, qq, r, s, sae = -37.0, sq, t, tx, value, w, xin, ycur, yprev;
 
       double beta = lgamma (p) + lgamma (q) - lgamma (p + q);
       bool err = false;
-      fpu = pow (10.0, sae);
+      fpu = std::pow (10.0, sae);
       value = y;
 
       //  Test for admissibility of parameters.
 
       if (p <= 0.0 || q <= 0.0)
         (*current_liboctave_error_handler) ("betaincinv: wrong parameters");
       if (y < 0.0 || 1.0 < y)
         (*current_liboctave_error_handler) ("betaincinv: wrong parameter Y");
@@ -3094,17 +3094,17 @@ namespace octave
           h = 2.0 / (s + t);
           w = ycur * sqrt (h + r) / h - (t - s) * (r + 5.0 / 6.0 - 2.0 / (3.0 * h));
           value = pp / (pp + qq * exp (w + w));
         }
       else
         {
           r = qq + qq;
           t = 1.0 / (9.0 * qq);
-          t = r * pow (1.0 - t + ycur * sqrt (t), 3);
+          t = r * std::pow (1.0 - t + ycur * sqrt (t), 3);
 
           if (t <= 0.0)
             {
               value = 1.0 - exp ((std::log ((1.0 - a) * qq) + beta) / qq);
             }
           else
             {
               t = (4.0 * pp + r - 2.0) / t;
@@ -3134,19 +3134,19 @@ namespace octave
           value = 0.0001;
         }
 
       if (0.9999 < value)
         {
           value = 0.9999;
         }
 
-      iex = std::max (- 5.0 / pp / pp - 1.0 / pow (a, 0.2) - 13.0, sae);
-
-      acu = pow (10.0, iex);
+      iex = std::max (- 5.0 / pp / pp - 1.0 / std::pow (a, 0.2) - 13.0, sae);
+
+      acu = std::pow (10.0, iex);
 
       for ( ; ; )
         {
           ycur = betain (value, pp, qq, beta, err);
 
           if (err)
             {
               return value;
@@ -3652,17 +3652,17 @@ namespace octave
       if (ierr == 0)
         {
           // Remember that psifn and dpsifn return scales values
           // When n is 1: do nothing since ((-1)**(n+1)/gamma(n+1)) == 1
           // When n is 0: change sign since ((-1)**(n+1)/gamma(n+1)) == -1
           if (n > 1)
             // FIXME: xgamma here is a killer for our precision since it grows
             //        way too fast.
-            ans = ans / (pow (-1.0, n + 1) / gamma (double (n+1)));
+            ans = ans / (std::pow (-1.0, n + 1) / gamma (double (n+1)));
           else if (n == 0)
             ans = -ans;
         }
       else if (ierr == 2)
         ans = - octave::numeric_limits<T>::Inf ();
       else // we probably never get here
         ans = octave::numeric_limits<T>::NaN ();
 
diff --git a/liboctave/operators/mx-inlines.cc b/liboctave/operators/mx-inlines.cc
--- a/liboctave/operators/mx-inlines.cc
+++ b/liboctave/operators/mx-inlines.cc
@@ -399,16 +399,17 @@ mx_inline_xmax (size_t n, T *r, T x, con
         r[i] = (y[i] OP x ? y[i] : x);                          \
   }
 
 DEFMINMAXSPEC (double, mx_inline_xmin, <=)
 DEFMINMAXSPEC (double, mx_inline_xmax, >=)
 DEFMINMAXSPEC (float, mx_inline_xmin, <=)
 DEFMINMAXSPEC (float, mx_inline_xmax, >=)
 
+// FIXME: Is this comment correct anymore?  It seems like std::pow is chosen.
 // Let the compiler decide which pow to use, whichever best matches the
 // arguments provided.
 
 template <typename R, typename X, typename Y>
 inline void
 mx_inline_pow (size_t n, R *r, const X *x, const Y *y) throw ()
 {
   using std::pow;
diff --git a/liboctave/util/oct-inttypes.cc b/liboctave/util/oct-inttypes.cc
--- a/liboctave/util/oct-inttypes.cc
+++ b/liboctave/util/oct-inttypes.cc
@@ -738,59 +738,60 @@ pow (const octave_int<T>& a, const octav
     }
 
   return retval;
 }
 
 template <typename T>
 octave_int<T>
 pow (const double& a, const octave_int<T>& b)
-{ return octave_int<T> (pow (a, b.double_value ())); }
+{ return octave_int<T> (std::pow (a, b.double_value ())); }
 
 template <typename T>
 octave_int<T>
 pow (const octave_int<T>& a, const double& b)
 {
   return ((b >= 0 && b < std::numeric_limits<T>::digits
            && b == octave::math::round (b))
           ? pow (a, octave_int<T> (static_cast<T> (b)))
-          : octave_int<T> (pow (a.double_value (), b)));
+          : octave_int<T> (std::pow (a.double_value (), b)));
 }
 
 template <typename T>
 octave_int<T>
 pow (const float& a, const octave_int<T>& b)
-{ return octave_int<T> (pow (a, b.float_value ())); }
+{ return octave_int<T> (std::pow (a, b.float_value ())); }
 
 template <typename T>
 octave_int<T>
 pow (const octave_int<T>& a, const float& b)
 {
   return ((b >= 0 && b < std::numeric_limits<T>::digits
            && b == octave::math::round (b))
           ? pow (a, octave_int<T> (static_cast<T> (b)))
-          : octave_int<T> (pow (a.double_value (), static_cast<double> (b))));
+          : octave_int<T> (std::pow (a.double_value (),
+                                     static_cast<double> (b))));
 }
 
-// FIXME: Do we really need a differently named single-precision
-//        function integer power function here instead of an overloaded
-//        one?
+// FIXME: Do we really need a differently named single-precision function
+//        integer power function here instead of an overloaded one?
 template <typename T>
 octave_int<T>
 powf (const float& a, const octave_int<T>& b)
 { return octave_int<T> (pow (a, b.float_value ())); }
 
 template <typename T>
 octave_int<T>
 powf (const octave_int<T>& a, const float& b)
 {
   return ((b >= 0 && b < std::numeric_limits<T>::digits
            && b == octave::math::round (b))
           ? pow (a, octave_int<T> (static_cast<T> (b)))
-          : octave_int<T> (pow (a.double_value (), static_cast<double> (b))));
+          : octave_int<T> (std::pow (a.double_value (),
+                                     static_cast<double> (b))));
 }
 
 #define INSTANTIATE_INTTYPE(T)                                          \
   template class OCTAVE_API octave_int<T>;                              \
   template OCTAVE_API octave_int<T> pow (const octave_int<T>&, const octave_int<T>&); \
   template OCTAVE_API octave_int<T> pow (const double&, const octave_int<T>&); \
   template OCTAVE_API octave_int<T> pow (const octave_int<T>&, const double&); \
   template OCTAVE_API octave_int<T> pow (const float&, const octave_int<T>&); \
