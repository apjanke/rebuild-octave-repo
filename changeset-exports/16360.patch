# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1364065349 14400
#      Sat Mar 23 15:02:29 2013 -0400
# Node ID 11115c237231d356aeb9bc0e14f71582ec616e83
# Parent  253e13e77d12125134129d16b93fa4473db61f2c
recognize variables when parsing (bug #38576)

* lex.h, lex.ll (lexical_feedback::mark_as_variable,
lexical_feedback::maybe_mark_previous_token_as_variable,
lexical_feedback::mark_as_variables, octave_lexer::is_variable):
New fucntions.
("="): Call maybe_mark_previous_toke_as_variable.
(handle_identifier): Don't tag variables as possible commands.
(param_list): Mark names in list as variables.
(octave_base_parser::validate_matrix_for_assignment): Likewise.
* pt-arg-list.h, pt-arg-list.cc (tree_argument_list::variable_names):
New function.
* pt-misc.h, pt-misc.cc (tree_parameter_list::variable_names):
New function.
* token.h, token.cc (token::symbol_name, token::is_symbol):
New functions.
* test/bug-38576.tst: New file.
* test/Makefile.am (FCN_FILES): Add bug-38576.tst to the list.

diff --git a/libinterp/parse-tree/lex.h b/libinterp/parse-tree/lex.h
--- a/libinterp/parse-tree/lex.h
+++ b/libinterp/parse-tree/lex.h
@@ -302,16 +302,21 @@ public:
   bool space_follows_previous_token (void) const;
 
   bool previous_token_is_binop (void) const;
 
   bool previous_token_is_keyword (void) const;
 
   bool previous_token_may_be_command (void) const;
 
+  void maybe_mark_previous_token_as_variable (void);
+
+  void mark_as_variable (const std::string& nm);
+  void mark_as_variables (const std::list<std::string>& lst);
+
   // true means that we have encountered eof on the input stream.
   bool end_of_input;
 
   // true means we are at the beginning of a statement, where a
   // command name is possible.
   bool at_beginning_of_statement;
 
   // true means we are parsing an anonymous function argument list.
@@ -513,16 +518,18 @@ public:
   void xunput (char c, char *buf);
 
   void xunput (char c);
 
   bool looking_at_space (void);
 
   bool inside_any_object_index (void);
 
+  bool is_variable (const std::string& name);
+
   int is_keyword_token (const std::string& s);
 
   bool whitespace_is_significant (void);
 
   void handle_number (void);
 
   void handle_continuation (void);
 
diff --git a/libinterp/parse-tree/lex.ll b/libinterp/parse-tree/lex.ll
--- a/libinterp/parse-tree/lex.ll
+++ b/libinterp/parse-tree/lex.ll
@@ -1051,17 +1051,22 @@ ANY_INCLUDING_NL (.|{NL})
         return curr_lexer->handle_token ('.');
       }
   }
 
 %{
 // = and op= operators.
 %}
 
-"="    { return curr_lexer->handle_op ("=", '='); }
+"=" {
+    curr_lexer->maybe_mark_previous_token_as_variable ();
+
+    return curr_lexer->handle_op ("=", '=');
+  }
+
 "+="   { return curr_lexer->handle_incompatible_op ("+=", ADD_EQ); }
 "-="   { return curr_lexer->handle_incompatible_op ("-=", SUB_EQ); }
 "*="   { return curr_lexer->handle_incompatible_op ("*=", MUL_EQ); }
 "/="   { return curr_lexer->handle_incompatible_op ("/=", DIV_EQ); }
 "\\="  { return curr_lexer->handle_incompatible_op ("\\=", LEFTDIV_EQ); }
 ".+="  { return curr_lexer->handle_incompatible_op (".+=", ADD_EQ); }
 ".-="  { return curr_lexer->handle_incompatible_op (".-=", SUB_EQ); }
 ".*="  { return curr_lexer->handle_incompatible_op (".*=", EMUL_EQ); }
@@ -1546,16 +1551,34 @@ lexical_feedback::previous_token_is_keyw
 
 bool
 lexical_feedback::previous_token_may_be_command (void) const
 {
   const token *tok = tokens.front ();
   return tok ? tok->may_be_command () : false;
 }
 
+void
+lexical_feedback::maybe_mark_previous_token_as_variable (void)
+{
+  token *tok = tokens.front ();
+  if (tok->is_symbol ())
+    pending_local_variables.insert (tok->symbol_name ());
+}
+
+void
+lexical_feedback::mark_as_variables (const std::list<std::string>& lst)
+{
+  for (std::list<std::string>::const_iterator p = lst.begin ();
+       p != lst.end (); p++)
+    {
+      pending_local_variables.insert (*p);
+    }
+}
+
 static bool
 looks_like_copyright (const std::string& s)
 {
   bool retval = false;
 
   if (! s.empty ())
     {
       size_t offset = s.find_first_not_of (" \t");
@@ -1779,16 +1802,24 @@ octave_base_lexer::inside_any_object_ind
           retval = true;
           break;
         }
     }
 
   return retval;
 }
 
+bool
+octave_base_lexer::is_variable (const std::string& name)
+{
+  return (symbol_table::is_variable (name)
+          || (pending_local_variables.find (name)
+              != pending_local_variables.end ()));
+}
+
 // Handle keywords.  Return -1 if the keyword should be ignored.
 
 int
 octave_base_lexer::is_keyword_token (const std::string& s)
 {
   int l = input_line_number;
   int c = current_input_column;
 
@@ -2546,17 +2577,18 @@ octave_base_lexer::handle_identifier (vo
     tok = "__end__";
 
   symbol_table::scope_id sid = symtab_context.curr_scope ();
 
   token *tok_val = new token (NAME, &(symbol_table::insert (tok, sid)),
                               input_line_number, current_input_column);
 
   if (at_beginning_of_statement
-      && (! (tok == "e"
+      && (! (is_variable (tok)
+             || tok == "e"
              || tok == "I" || tok == "i"
              || tok == "J" || tok == "j"
              || tok == "Inf" || tok == "inf"
              || tok == "NaN" || tok == "nan")))
     tok_val->mark_may_be_command ();
 
   push_token (tok_val);
 
diff --git a/libinterp/parse-tree/oct-parse.in.yy b/libinterp/parse-tree/oct-parse.in.yy
--- a/libinterp/parse-tree/oct-parse.in.yy
+++ b/libinterp/parse-tree/oct-parse.in.yy
@@ -1031,32 +1031,40 @@ param_list_beg  : '('
 param_list_end  : ')'
                   {
                     lexer.looking_at_parameter_list = false;
                     lexer.looking_for_object_index = false;
                   }
                 ;
 
 param_list      : param_list_beg param_list1 param_list_end
-                  { $$ = $2; }
+                  {
+                    if ($2)
+                      lexer.mark_as_variables ($2->variable_names ());
+
+                    $$ = $2;
+                  }
                 | param_list_beg error
                   {
                     parser.bison_error ("invalid parameter list");
                     $$ = 0;
                     ABORT_PARSE;
                   }
                 ;
 
 param_list1     : // empty
                   { $$ = 0; }
                 | param_list2
                   {
                     $1->mark_as_formal_parameters ();
                     if ($1->validate (tree_parameter_list::in))
-                      $$ = $1;
+                      {
+                        lexer.mark_as_variables ($1->variable_names ());
+                        $$ = $1;
+                      }
                     else
                       ABORT_PARSE;
                   }
                 ;
 
 param_list2     : decl2
                   { $$ = new tree_parameter_list ($1); }
                 | param_list2 ',' decl2
@@ -2964,17 +2972,20 @@ octave_base_parser::validate_matrix_for_
               delete e;
               is_simple_assign = false;
             }
         }
       else
         tmp = new tree_argument_list (e);
 
       if (tmp && tmp->is_valid_lvalue_list ())
-        retval = tmp;
+        {
+          lexer.mark_as_variables (tmp->variable_names ());
+          retval = tmp;
+        }
       else
         {
           bison_error ("invalid left hand side of assignment");
           delete tmp;
         }
 
       if (retval && is_simple_assign)
         retval->mark_as_simple_assign_lhs ();
diff --git a/libinterp/parse-tree/pt-arg-list.cc b/libinterp/parse-tree/pt-arg-list.cc
--- a/libinterp/parse-tree/pt-arg-list.cc
+++ b/libinterp/parse-tree/pt-arg-list.cc
@@ -278,16 +278,36 @@ tree_argument_list::get_arg_names (void)
       tree_expression *elt = *p;
 
       retval(k++) = elt->str_print_code ();
     }
 
   return retval;
 }
 
+std::list<std::string>
+tree_argument_list::variable_names (void) const
+{
+  std::list<std::string> retval;
+
+  for (const_iterator p = begin (); p != end (); p++)
+    {
+      tree_expression *elt = *p;
+
+      if (elt->is_identifier ())
+        {
+          tree_identifier *id = dynamic_cast<tree_identifier *> (elt);
+      
+          retval.push_back (id->name ());
+        }
+    }
+
+  return retval;
+}
+
 tree_argument_list *
 tree_argument_list::dup (symbol_table::scope_id scope,
                          symbol_table::context_id context) const
 {
   tree_argument_list *new_list = new tree_argument_list ();
 
   new_list->list_includes_magic_end = list_includes_magic_end;
   new_list->simple_assign_lhs = simple_assign_lhs;
diff --git a/libinterp/parse-tree/pt-arg-list.h b/libinterp/parse-tree/pt-arg-list.h
--- a/libinterp/parse-tree/pt-arg-list.h
+++ b/libinterp/parse-tree/pt-arg-list.h
@@ -80,16 +80,18 @@ public:
   bool is_valid_lvalue_list (void) const;
 
   octave_value_list convert_to_const_vector (const octave_value *object = 0);
 
   std::list<octave_lvalue> lvalue_list (void);
 
   string_vector get_arg_names (void) const;
 
+  std::list<std::string> variable_names (void) const;
+
   tree_argument_list *dup (symbol_table::scope_id scope,
                            symbol_table::context_id context) const;
 
   void accept (tree_walker& tw);
 
 private:
 
   bool list_includes_magic_end;
diff --git a/libinterp/parse-tree/pt-misc.cc b/libinterp/parse-tree/pt-misc.cc
--- a/libinterp/parse-tree/pt-misc.cc
+++ b/libinterp/parse-tree/pt-misc.cc
@@ -223,16 +223,31 @@ tree_parameter_list::undefine (void)
       tree_decl_elt *elt = *p++;
 
       octave_lvalue ref = elt->lvalue ();
 
       ref.assign (octave_value::op_asn_eq, octave_value ());
     }
 }
 
+std::list<std::string>
+tree_parameter_list::variable_names (void) const
+{
+  std::list<std::string> retval;
+
+  for (const_iterator p = begin (); p != end (); p++)
+    {
+      tree_decl_elt *elt = *p;
+      
+      retval.push_back (elt->name ());
+    }
+
+  return retval;
+}
+
 octave_value_list
 tree_parameter_list::convert_to_const_vector (int nargout,
                                               const Cell& varargout)
 {
   octave_idx_type vlen = varargout.numel ();
   int len = length ();
 
   // Special case. Will do a shallow copy.
diff --git a/libinterp/parse-tree/pt-misc.h b/libinterp/parse-tree/pt-misc.h
--- a/libinterp/parse-tree/pt-misc.h
+++ b/libinterp/parse-tree/pt-misc.h
@@ -73,16 +73,18 @@ public:
                                       int nargout, const octave_value& val);
 
   void define_from_arg_vector (const octave_value_list& args);
 
   void undefine (void);
 
   bool is_defined (void);
 
+  std::list<std::string> variable_names (void) const;
+
   octave_value_list convert_to_const_vector (int nargout, const Cell& varargout);
 
   tree_parameter_list *dup (symbol_table::scope_id scope,
                             symbol_table::context_id context) const;
 
   void accept (tree_walker& tw);
 
 private:
diff --git a/libinterp/parse-tree/token.cc b/libinterp/parse-tree/token.cc
--- a/libinterp/parse-tree/token.cc
+++ b/libinterp/parse-tree/token.cc
@@ -133,16 +133,23 @@ token::~token (void)
 
 std::string
 token::text (void) const
 {
   assert (type_tag == string_token);
   return *str;
 }
 
+std::string
+token::symbol_name (void) const
+{
+  assert (type_tag == sym_rec_token);
+  return sr->name ();
+}
+
 double
 token::number (void) const
 {
   assert (type_tag == double_token);
   return num;
 }
 
 token::token_type
diff --git a/libinterp/parse-tree/token.h b/libinterp/parse-tree/token.h
--- a/libinterp/parse-tree/token.h
+++ b/libinterp/parse-tree/token.h
@@ -89,17 +89,23 @@ public:
   int line (void) const { return line_num; }
   int column (void) const { return column_num; }
 
   bool is_keyword (void) const
   {
     return type_tag == keyword_token || type_tag == ettype_token;
   }
 
+  bool is_symbol (void) const
+  {
+    return type_tag == sym_rec_token;
+  }
+
   std::string text (void) const;
+  std::string symbol_name (void) const;
   double number (void) const;
   token_type ttype (void) const;
   end_tok_type ettype (void) const;
   symbol_table::symbol_record *sym_rec (void);
 
   symbol_table::symbol_record *method_rec (void);
   symbol_table::symbol_record *class_rec (void);
   symbol_table::symbol_record *package_rec (void);
diff --git a/test/Makefile.am b/test/Makefile.am
--- a/test/Makefile.am
+++ b/test/Makefile.am
@@ -19,16 +19,17 @@
 # <http://www.gnu.org/licenses/>.
 
 include $(top_srcdir)/build-aux/common.mk
 
 FCN_FILES = \
   fntests.m \
   args.tst \
   bug-31371.tst \
+  bug-38576.tst \
   diag-perm.tst \
   error.tst \
   eval-catch.tst \
   for.tst \
   func.tst \
   global.tst \
   if.tst \
   index.tst \
diff --git a/test/bug-38576.tst b/test/bug-38576.tst
new file mode 100644
--- /dev/null
+++ b/test/bug-38576.tst
@@ -0,0 +1,16 @@
+%!function r = f1 ()
+%!  ls = svd (1);
+%!  r = eval ("ls -1;");
+%!endfunction
+%!function r = f2 ()
+%!  [u,ls,v] = svd (1);
+%!  r = eval ("ls -1;");
+%!endfunction
+%!function r = f3 (ls)
+%!  r = eval ("ls -1;");
+%!endfunction
+
+%!assert (f1 (), 0);
+%!assert (f2 (), 0);
+%!assert (ischar (f3 ()), true);
+%!assert (f3 (1), 0);
