# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1512659555 18000
#      Thu Dec 07 10:12:35 2017 -0500
# Node ID 56d1e4d9975e869bbc9692e6aff6f34c1cbcfe45
# Parent  64a85a19f6e35de8ca657f9931d13fb5ce960bed
avoid memory leak in utf8 conversion functions

* strfns.cc (F__native2unicode__, F__native2unicode__):
Set unwind-protect frame after pointer is defined.

diff --git a/libinterp/corefcn/strfns.cc b/libinterp/corefcn/strfns.cc
--- a/libinterp/corefcn/strfns.cc
+++ b/libinterp/corefcn/strfns.cc
@@ -759,24 +759,24 @@ Convert byte stream @var{native_bytes} t
   const char *src = native_bytes.data ();
   size_t srclen = native_bytes.numel ();
 
   size_t length;
   uint8_t *utf8_str = nullptr;
 
   octave::unwind_protect frame;
 
-  frame.add_fcn (::free, static_cast<void *> (utf8_str));
-
   utf8_str = octave_u8_conv_from_encoding (codepage, src, srclen, &length);
 
   if (! utf8_str)
     error ("native2unicode: converting from codepage '%s' to UTF-8: %s",
            codepage, std::strerror (errno));
 
+  frame.add_fcn (::free, static_cast<void *> (utf8_str));
+
   octave_idx_type len = length;
 
   charNDArray retval (dim_vector (1, len));
 
   for (octave_idx_type i = 0; i < len; i++)
     retval.xelem(i) = utf8_str[i];
 
   return ovl (retval);
@@ -805,24 +805,24 @@ Convert UTF-8 string @var{utf8_str} to b
   const uint8_t *src = reinterpret_cast<const uint8_t *> (utf8_str.data ());
   size_t srclen = utf8_str.numel ();
 
   size_t length;
   char *native_bytes = nullptr;
 
   octave::unwind_protect frame;
 
-  frame.add_fcn (::free, static_cast<void *> (native_bytes));
-
   native_bytes = octave_u8_conv_to_encoding (codepage, src, srclen, &length);
 
   if (! native_bytes)
     error ("native2unicode: converting from UTF-8 to codepage '%s': %s",
            codepage, std::strerror (errno));
 
+  frame.add_fcn (::free, static_cast<void *> (native_bytes));
+
   octave_idx_type len = length;
 
   uint8NDArray retval (dim_vector (1, len));
 
   for (octave_idx_type i = 0; i < len; i++)
     retval.xelem(i) = native_bytes[i];
 
   return ovl (retval);
