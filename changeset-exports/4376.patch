# HG changeset patch
# User jwe
# Date 1050589992 0
#      Thu Apr 17 14:33:12 2003 +0000
# Node ID bfb14347a9fa3fdb08b0e73184af01afc36b0440
# Parent  5855de87265973faa291c5610e1e08ea672d8f02
[project @ 2003-04-17 14:33:12 by jwe]

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,13 @@
+2003-04-17  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* ov-file.h (octave_file::empty_clone): Create an octave_scalar
+	object, not an octave_file object.
+
 2003-04-01  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* load-save.cc (hdf5_read_next_data): Extract list before
 	assigning to map element.
 	(add_hdf5_data): Prefix faked names with '_' so they are valid
 	identifiers.
 
 2003-03-24  Mats Jansson  <mats.e.jansson@home.se>
diff --git a/src/ov-file.h b/src/ov-file.h
--- a/src/ov-file.h
+++ b/src/ov-file.h
@@ -30,16 +30,17 @@ Software Foundation, 59 Temple Place - S
 #include <cstdlib>
 
 #include <iostream>
 #include <string>
 
 #include "oct-alloc.h"
 #include "oct-stream.h"
 #include "ov-base.h"
+#include "ov-scalar.h"
 #include "ov-typeinfo.h"
 
 class tree_walker;
 class octave_stream;
 class octave_value;
 class octave_value_list;
 
 // Lists.
@@ -56,17 +57,20 @@ public:
     : octave_base_value (), stream (s), number (n) { }
 
   octave_file (const octave_file& f)
     : octave_base_value (), stream (f.stream), number (f.number) { }
 
   ~octave_file (void) { }
 
   octave_value *clone (void) const { return new octave_file (*this); }
-  octave_value *empty_clone (void) const { return new octave_file (); }
+
+  // For compatibility, a file object should appear as if it is a
+  // scalar object, in contexts where that is needed.
+  octave_value *empty_clone (void) const { return new octave_scalar (); }
 
   type_conv_fcn numeric_conversion_function (void) const;
 
   double double_value (bool) const { return number; }
 
   double scalar_value (bool) const { return number; }
 
   octave_stream stream_value (void) const { return stream; }
