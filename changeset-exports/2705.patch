# HG changeset patch
# User jwe
# Date 856414682 0
#      Thu Feb 20 04:58:02 1997 +0000
# Node ID 18395aaeafb7c3c3c2916903ce1e885d293f0750
# Parent  261befb7f93855c0c1c7064c37176d6030ce84f0
[project @ 1997-02-20 04:56:43 by jwe]

diff --git a/Announce b/Announce
--- a/Announce
+++ b/Announce
@@ -1,54 +1,33 @@
-Subject: ANNOUNCE: Octave Version 2.0.2 released
+Subject: ANNOUNCE: Octave Version 2.0.4 released
 
-Octave version 2.0.3 is now available for ftp from ftp.che.wisc.edu
+Octave version 2.0.4 is now available for ftp from ftp.che.wisc.edu
 in the directory /pub/octave.  Diffs from the previous release are
 also available in the same directory.
 
-  -rw-r--r--   1 jwe  3312470 Feb 18 13:08 octave-2.0.3.tar.gz
-  -rw-r--r--   1 jwe   217812 Feb 18 13:43 octave-2.0.2-2.0.3.patch.
+  -rw-r--r--   1 jwe  3314916 Feb 19 15:32 octave-2.0.4.tar.gz
+  -rw-r--r--   1 jwe     9795 Feb 19 15:55 octave-2.0.3-2.0.4.patch.gz
 
-In addition to the source distributions, there are binary
-distributions available for Linux running on Intel systems, OSF/1
-running on Alpha systems, and HA-UX 9.x running on HPPA systems.
-Binary distributions for other platforms will be available from
-ftp.che.wisc.edu when they are contributed by volunteers.  If you
-would like to help to make a binary distribution available, please
-contact bug-octave@bevo.che.wisc.edu.
-
-Version 2.0.3 is primarily a bug-fixing release.  Most bugs reported
-since the release of version 2.0.2 have been fixed.  There are also a
-few new features, including:
-
-  * The manual has been completely revised and now corresponds much
-    more closely to the features of the current version.
+Version 2.0.4 fixes some problems with the configure scripts and
+Makefiles that were present in 2.0.3.  It will probably be the last
+2.0.x release unless some serious new bugs are found and reported.
 
-  * The return value for assignment expressions is now the RHS since
-    that is more consistent with the way other programming languages
-    work.  However, Octave still prints the entire LHS value so that
-
-      x = zeros (1, 2);
-      x(2) = 1
-
-    still prints
-
-      x =
+There are also two new features (what would be the fun of making a
+release just to fix bugs? :-) both of which are kluges to allow a bit
+more compatibility with Matlab:
 
-        0  1
-
-    but an assignment like
-
-      z = x(2) = 1
+  * It is now possible to use commands like ls, save, and cd as simple
+    variable names.  They still cannot be used as formal parameters
+    for functions, or as the names of structure variables.  Failed
+    assignments leave them undefined (you can recover the orginal
+    function definition using clear).
 
-    sets z to 1 (not [ 0, 1 ] as in previous versions of Octave).
-
-  * It is now much easier to make binary distributions.  See the
-    Binary Distributions section of the manual for more details.
-
+  * Is is now possible to invoke commands like ls, save, and cd as
+    normal functions (for example, load ("foo", "x", "y", "z")).
 
 You can help make Octave more reliable by reporting any bugs you find
 to bug-octave@bevo.che.wisc.edu.
 
 Octave is a high-level interactive language primarily intended for
 numerical computations.  It is mostly compatible with Matlab.
 
 Additional information is available on the WWW at
diff --git a/WWW/NEWS-2.html b/WWW/NEWS-2.html
--- a/WWW/NEWS-2.html
+++ b/WWW/NEWS-2.html
@@ -3,16 +3,31 @@
 <head>
 <title> Changes in Octave version 2 </title>
 </head>
 
 <body>
 <h1> News for Octave Version 2 </h1>
 <hr>
 
+<h2>Summary of changes for version 2.0.4</h2>
+
+<ul>
+<li>It is now possible to use commands like ls, save, and cd as simple
+    variable names.  They still cannot be used as formal parameters
+    for functions, or as the names of structure variables.  Failed
+    assignments leave them undefined (you can recover the orginal
+    function definition using clear).
+<p>
+</li>
+<li>Is is now possible to invoke commands like ls, save, and cd as
+    normal functions (for example, load ("foo", "x", "y", "z")).
+</li>
+</ul>
+
 <h2>Summary of changes for version 2.0.3</h2>
 
 <ul>
 <li>The manual has been completely revised and now corresponds much
     more closely to the features of the current version.
 </li>
 <p>
 <li>The return value for assignment expressions is now the RHS since
diff --git a/WWW/index.html b/WWW/index.html
--- a/WWW/index.html
+++ b/WWW/index.html
@@ -11,21 +11,18 @@
 Octave is a high-level language, primarily intended for numerical
 computations.  It provides a convenient command line interface for
 solving linear and nonlinear problems numerically.
 </p>
 <hr>
 
 <h2>News</h2>
 <p>
-Version 2.0.3 was released Tuesday February 18, 1997.  Most bugs
+Version 2.0.4 was released Wednesday February 19, 1997.  Most bugs
 reported since the release of version 2.0 have been fixed.
-Unfortunately, there are a few glitches in the installation procedure
-that will cause trouble on a few systems.  Look for 2.0.4 to correct
-these minor problems fairly soon.
 </p>
 
 <p>
 Version 2.0 was released Tuesday December 10, 1996.  There are many
 new features including:
 <ul>
 <li>dynamic linking support on more systems</li>
 <li>user-defined data types</li>
diff --git a/doc/interpreter/Makefile.in b/doc/interpreter/Makefile.in
--- a/doc/interpreter/Makefile.in
+++ b/doc/interpreter/Makefile.in
@@ -52,34 +52,34 @@ SPELL = $(patsubst %.texi, %.spell, $(TE
 	rm -f $@
 	sed -e 's/@@/ at /g' -e 's/@[a-zA-Z]*//g' $< | spell > $@.tmp
 	mv $@.tmp $@
 
 all: octave.info octave.dvi octave.ps
 .PHONY: all
 
 octave.info: $(TEXINFO) ../conf.texi
-	-makeinfo -I$(srcdir) $(srcdir)/octave.texi
+	-makeinfo -I$(srcdir) -I$(srcdir)/.. $(srcdir)/octave.texi
 
 octave.dvi: $(TEXINFO) ../conf.texi
 	-TEXINPUTS="$(srcdir):$(srcdir)/..:$(TEXINPUTS):" ; \
 	  export TEXINPUTS ; \
 	  $(TEXI2DVI) $(srcdir)/octave.texi
 
 octave.ps: octave.dvi
 	-dvips -o octave.ps octave.dvi
 
 ../../INSTALL.OCTAVE: install.texi
 	-makeinfo -D INSTALLONLY --no-headers --no-split --output INSTALL \
-	  -I$(srcdir) $(srcdir)/install.texi
+	  -I$(srcdir) -I$(srcdir)/.. $(srcdir)/install.texi
 	mv INSTALL ../../INSTALL.OCTAVE
 
 ../../BUGS: bugs.texi
 	-makeinfo -D BUGSONLY --no-headers --no-split --output BUGS \
-	  -I$(srcdir) $(srcdir)/bugs.texi
+	  -I$(srcdir) -I$(srcdir)/.. $(srcdir)/bugs.texi
 	mv BUGS ../../BUGS
 
 check: all
 .PHONY: check
 
 install: all
 	$(top_srcdir)/mkinstalldirs $(man1dir) $(infodir)
 	@if test -d $(man1dir) ; then \
diff --git a/doc/interpreter/octave.texi b/doc/interpreter/octave.texi
--- a/doc/interpreter/octave.texi
+++ b/doc/interpreter/octave.texi
@@ -31,17 +31,17 @@ END-INFO-DIR-ENTRY
 @end ignore
 
 @defindex op
 
 @c Things like the Octave version number are defined in conf.texi.
 @c This file doesn't include a chapter, so it must not be included
 @c if you want to run the Emacs function texinfo-multiple-files-update.
 
-@include ../conf.texi
+@include conf.texi
 
 @settitle Octave
 
 @ifinfo
 
 Copyright (C) 1996, 1997 John W. Eaton.
 
 Permission is granted to make and distribute verbatim copies of
diff --git a/doc/liboctave/Makefile.in b/doc/liboctave/Makefile.in
--- a/doc/liboctave/Makefile.in
+++ b/doc/liboctave/Makefile.in
@@ -37,17 +37,17 @@ SPELL = $(patsubst %.texi, %.spell, $(TE
 	rm -f $@
 	sed -e 's/@@/ at /g' -e 's/@[a-zA-Z]*//g' $< | spell > $@.tmp
 	mv $@.tmp $@
 
 all: liboctave.info liboctave.dvi liboctave.ps
 .PHONY: all
 
 liboctave.info: $(TEXINFO) ../conf.texi
-	-makeinfo -I$(srcdir) $(srcdir)/liboctave.texi
+	-makeinfo -I$(srcdir) -I$(srcdir)/.. $(srcdir)/liboctave.texi
 
 liboctave.dvi: $(TEXINFO) ../conf.texi
 	-TEXINPUTS="$(srcdir):$(srcdir)/..:$(TEXINPUTS):" ; \
 	  export TEXINPUTS ; \
 	  $(TEXI2DVI) $(srcdir)/liboctave.texi
 
 liboctave.ps: liboctave.dvi
 	-dvips -o liboctave.ps liboctave.dvi
diff --git a/doc/liboctave/liboctave.texi b/doc/liboctave/liboctave.texi
--- a/doc/liboctave/liboctave.texi
+++ b/doc/liboctave/liboctave.texi
@@ -19,17 +19,21 @@
 @end tex
 
 @iftex
 @set DONTINCLUDEGPL
 @end iftex
 
 @defindex op
 
-@include ../conf.texi
+@c Things like the Octave version number are defined in conf.texi.
+@c This file doesn't include a chapter, so it must not be included
+@c if you want to run the Emacs function texinfo-multiple-files-update.
+
+@include conf.texi
 
 @settitle Octave C++ Classes
 
 @ifinfo
 
 Copyright (C) 1996 John W. Eaton.
 
 Permission is granted to make and distribute verbatim copies of
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,12 +1,21 @@
 Wed Feb 19 10:30:14 1997  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* Version 2.0.4 released.
 
+	* sighandlers.cc (octave_ignore_interrupts,
+	octave_catch_interrupts, octave_set_interrupt_handler):
+	Return old value, not pointer to static data.  Fix all uses.
+	
+	* sighandlers.h (octave_interrupt_handler): Move declaration here.
+	* sighandlers.cc: From here.
+
+	* toplev.cc: Undo previous change.
+
 	* lex.l (handle_identifier): Allow commands like ls, save, etc. to
 	also be used as simple variable names.  Also make it possible to
 	use the normal function call syntax to invoke them.
 
 Tue Feb 18 09:22:04 1997  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* Makefile.in (%.oct:%.o, %.oct:pic/%.o): Use $(SH_LDFLAGS) here.
 
diff --git a/src/help.cc b/src/help.cc
--- a/src/help.cc
+++ b/src/help.cc
@@ -548,17 +548,17 @@ try_info (const string& nm)
 
   if (nm.length () > 0)
     cmd_buf << " --index-search " << nm;
 
   cmd_buf << ends;
 
   cmd_str = cmd_buf.str ();
 
-  volatile octave_interrupt_handler *old_interrupt_handler
+  volatile octave_interrupt_handler old_interrupt_handler
     = octave_ignore_interrupts ();
 
   status = system (cmd_str);
 
   octave_set_interrupt_handler (old_interrupt_handler);
 
   if (WIFEXITED (status))
     status = WEXITSTATUS (status);
diff --git a/src/oct-hist.cc b/src/oct-hist.cc
--- a/src/oct-hist.cc
+++ b/src/oct-hist.cc
@@ -422,17 +422,17 @@ do_edit_history (int argc, const string_
 
   string cmd = Veditor;
   cmd.append (" ");
   cmd.append (name);
 
   // Ignore interrupts while we are off editing commands.  Should we
   // maybe avoid using system()?
 
-  volatile octave_interrupt_handler *old_interrupt_handler
+  volatile octave_interrupt_handler old_interrupt_handler
     = octave_ignore_interrupts ();
 
   system (cmd.c_str ());
 
   octave_set_interrupt_handler (old_interrupt_handler);
 
   // Write the commands to the history file since parse_and_execute
   // disables command line history while it executes.
diff --git a/src/pager.cc b/src/pager.cc
--- a/src/pager.cc
+++ b/src/pager.cc
@@ -67,36 +67,39 @@ static string Vpager_binary;
 // as it is available.  Otherwise, it is buffered and only sent to the
 // pager when it is time to print another prompt.
 static bool Vpage_output_immediately;
 
 // TRUE means all output intended for the screen should be passed
 // through the pager.
 static bool Vpage_screen_output;
 
-static octave_interrupt_handler *saved_interrupt_handler = 0;
+// Only one pager can be active at once, so having these at file
+// scope should be ok.
+static octave_interrupt_handler saved_interrupt_handler;
+static bool interrupt_handler_saved = false;
 
 static int really_flush_to_pager = 0;
 
 static int flushing_output_to_pager = 0;
 
 static void
 clear_external_pager (void)
 {
   octave_child_list::remove (octave_pager_pid);
 
   octave_pager_pid = -1;
 
   delete external_pager;
   external_pager = 0;
 
-  if (saved_interrupt_handler)
+  if (interrupt_handler_saved)
     {
       octave_set_interrupt_handler (saved_interrupt_handler);
-      saved_interrupt_handler = 0;
+      interrupt_handler_saved = false;
     }
 }
 
 static void
 pager_death_handler (pid_t pid, int status)
 {
   if (pid > 0)
     {
@@ -135,16 +138,17 @@ do_sync (const char *msg, bool bypass_pa
 	{
 	  if (! external_pager)
 	    {
 	      string pgr = Vpager_binary;
 
 	      if (! pgr.empty ())
 		{
 		  saved_interrupt_handler = octave_ignore_interrupts ();
+		  interrupt_handler_saved = true;
 
 		  external_pager = new oprocstream (pgr.c_str ());
 
 		  if (external_pager)
 		    {
 		      octave_pager_pid = external_pager->pid ();
 
 		      octave_child_list::insert (octave_pager_pid,
diff --git a/src/pt-plot.cc b/src/pt-plot.cc
--- a/src/pt-plot.cc
+++ b/src/pt-plot.cc
@@ -168,17 +168,17 @@ open_plot_stream (void)
       // but without it, C-c at the octave prompt will kill gnuplot...
 
 #if defined (HAVE_POSIX_SIGNALS)
       sigset_t set, oset;
       sigemptyset (&set);
       sigaddset (&set, SIGINT);
       sigprocmask (SIG_BLOCK, &set, &oset);
 #else
-     volatile octave_interrupt_handler *old_interrupt_handler
+     volatile octave_interrupt_handler old_interrupt_handler
 	= octave_ignore_interrupts ();
 #endif
 
       plot_stream = new oprocstream (plot_prog.c_str ());
 
       if (plot_stream)
 	{
 	  if (! *plot_stream)
diff --git a/src/sighandlers.cc b/src/sighandlers.cc
--- a/src/sighandlers.cc
+++ b/src/sighandlers.cc
@@ -98,30 +98,16 @@ octave_save_signal_mask (void)
 void
 octave_restore_signal_mask (void)
 {
 #if defined (HAVE_POSIX_SIGNALS)
   sigprocmask (SIG_SETMASK, &octave_signal_mask, 0);
 #endif
 }
 
-struct
-octave_interrupt_handler
-{
-#ifdef SIGINT
-  sig_handler *int_handler;
-#endif
-
-#ifdef SIGBREAK
-  sig_handler *brk_handler;
-#endif
-};
-
-static octave_interrupt_handler the_interrupt_handler;
-
 static void
 my_friendly_exit (const char *sig_name, int sig_number)
 {
   static bool been_there_done_that = false;
 
   if (been_there_done_that)
     {
 #if defined (SIGABRT)
@@ -184,17 +170,17 @@ generic_sig_handler (int sig)
   SIGHANDLER_RETURN (0);
 }
 
 // Handle SIGCHLD.
 
 static RETSIGTYPE
 sigchld_handler (int /* sig */)
 {
-  volatile octave_interrupt_handler *saved_interrupt_handler
+  volatile octave_interrupt_handler saved_interrupt_handler
      = octave_ignore_interrupts ();
 
   // I wonder if this is really right, or if SIGCHLD should just be
   // blocked on OS/2 systems the same as for systems with POSIX signal
   // functions.
 
 #if defined (__EMX__)
   volatile sig_handler *saved_sigchld_handler
@@ -308,65 +294,62 @@ sigpipe_handler (int /* sig */)
   // Don't loop forever on account of this.
 
   if (pipe_handler_error_count  > 100)
     jump_to_top_level ();
 
   SIGHANDLER_RETURN (0);
 }
 
-void
+octave_interrupt_handler
 octave_catch_interrupts (void)
 {
-#ifdef SIGINT
-  octave_set_signal_handler (SIGINT, sigint_handler);
-
-  the_interrupt_handler.int_handler = sigint_handler;
-#endif
-
-#ifdef SIGBREAK
-  octave_set_signal_handler (SIGBREAK, sigint_handler);
+  octave_interrupt_handler retval;
 
-  the_interrupt_handler.brk_handler = sigint_handler;
-#endif
-}
-
-octave_interrupt_handler *
-octave_ignore_interrupts (void)
-{
 #ifdef SIGINT
-  the_interrupt_handler.int_handler
-    = octave_set_signal_handler (SIGINT, SIG_IGN);
+  retval.int_handler = octave_set_signal_handler (SIGINT, sigint_handler);
 #endif
 
 #ifdef SIGBREAK
-  the_interrupt_handler.int_handler
-    = octave_set_signal_handler (SIGBREAK, SIG_IGN);
+  retval.brk_handler = octave_set_signal_handler (SIGBREAK, sigint_handler);
 #endif
-  
-  return &the_interrupt_handler;
+
+  return retval;
 }
 
-octave_interrupt_handler *
-octave_set_interrupt_handler (const volatile octave_interrupt_handler *h)
+octave_interrupt_handler
+octave_ignore_interrupts (void)
 {
-  if (h)
-    {
+  octave_interrupt_handler retval;
+
 #ifdef SIGINT
-      the_interrupt_handler.int_handler
-	= octave_set_signal_handler (SIGINT, h->int_handler);
+  retval.int_handler = octave_set_signal_handler (SIGINT, SIG_IGN);
 #endif
 
 #ifdef SIGBREAK
-      the_interrupt_handler.int_handler
-	= octave_set_signal_handler (SIGBREAK, h->brk_handler);
+  retval.brk_handler = octave_set_signal_handler (SIGBREAK, SIG_IGN);
 #endif
-    }
-  
-  return &the_interrupt_handler;
+
+  return retval;
+}
+
+octave_interrupt_handler
+octave_set_interrupt_handler (const volatile octave_interrupt_handler& h)
+{
+  octave_interrupt_handler retval;
+
+#ifdef SIGINT
+  retval.int_handler = octave_set_signal_handler (SIGINT, h.int_handler);
+#endif
+
+#ifdef SIGBREAK
+  retval.brk_handler = octave_set_signal_handler (SIGBREAK, h.brk_handler);
+#endif
+
+  return retval;
 }
 
 // Install all the handlers for the signals we might care about.
 
 void
 install_signal_handlers (void)
 {
   set_new_handler (octave_new_handler);
diff --git a/src/sighandlers.h b/src/sighandlers.h
--- a/src/sighandlers.h
+++ b/src/sighandlers.h
@@ -54,38 +54,47 @@ Software Foundation, 59 Temple Place - S
 #define UNBLOCK_CHILD(ovar) sigprocmask (SIG_SETMASK, &ovar, 0)
 #else
 #define BLOCK_CHILD(nvar, ovar) ovar = sigblock (sigmask (SIGCHLD))
 #define UNBLOCK_CHILD(ovar) sigsetmask (ovar)
 #endif
 
 typedef RETSIGTYPE sig_handler (int);
 
-// All we need to do is declare pointers to this, so we don't need to
-// have the whole declaration here.
+// XXX FIXME XXX -- the data should probably be private...
 
-struct octave_interrupt_handler;
+struct
+octave_interrupt_handler
+{
+#ifdef SIGINT
+  sig_handler *int_handler;
+#endif
+
+#ifdef SIGBREAK
+  sig_handler *brk_handler;
+#endif
+};
 
 // Nonzero means we have already printed a message for this series of
 // SIGPIPES.  We assume that the writer will eventually give up.
 extern int pipe_handler_error_count;
 
 // Nonzero means we can be interrupted.
 extern int can_interrupt;
 
 extern sig_handler *octave_set_signal_handler (int, sig_handler *);
 
 extern void install_signal_handlers (void);
 
-extern void octave_catch_interrupts (void);
+extern octave_interrupt_handler octave_catch_interrupts (void);
 
-extern octave_interrupt_handler *octave_ignore_interrupts (void);
+extern octave_interrupt_handler octave_ignore_interrupts (void);
 
-extern octave_interrupt_handler *
-octave_set_interrupt_handler (const volatile octave_interrupt_handler *);
+extern octave_interrupt_handler
+octave_set_interrupt_handler (const volatile octave_interrupt_handler&);
 
 extern void octave_save_signal_mask (void);
 
 extern void octave_restore_signal_mask (void);
 
 // extern void ignore_sigchld (void);
 
 // This is taken directly from Emacs 19:
diff --git a/src/toplev.cc b/src/toplev.cc
--- a/src/toplev.cc
+++ b/src/toplev.cc
@@ -645,33 +645,27 @@ string CATCH.")
   else
     print_usage ("eval");
 
   return retval;
 }
 
 // Execute a shell command.
 
-static sigset_t signal_set, old_signal_set;
-
 static void
 cleanup_iprocstream (void *p)
 {
-  UNBLOCK_CHILD (old_signal_set);
-
   delete (iprocstream *) p;
 }
 
 static octave_value_list
 run_command_and_return_output (const string& cmd_str)
 {
   octave_value_list retval;
 
-  BLOCK_CHILD (signal_set, old_signal_set);
-
   iprocstream *cmd = new iprocstream (cmd_str.c_str ());
 
   add_unwind_protect (cleanup_iprocstream, cmd);
 
   int status = 127;
 
   if (cmd && *cmd)
     {
