# HG changeset patch
# User Ben Abbott <bpabbott@mac.com>
# Date 1288318830 -28800
#      Fri Oct 29 10:20:30 2010 +0800
# Node ID 9cdf43d1fa16e12b2614621cb0ac83349071a376
# Parent  5962c1cfdbcbedf478dd579f2aef1c95dacfc582
gl-render.cc: Crop ticks, ticklabels, and gridlines for OpenGL backend.

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,13 @@
+2010-10-29  Ben Abbott <bpabbott@mac.com>
+
+	* gl-render.cc: Crop ticks, ticklabels, and gridlines for OpenGL
+	backend.
+
 2010-10-25  John W. Eaton  <jwe@octave.org>
 
 	* octave.cc (octave_main): Use F77_CHAR_ARC_LEN macro to pass
 	character string length in call to xerbla.
 
 2010-10-25  Kai Habel  <kai.habel@gmx.de>
 
 	* gl-render.cc (opengl_renderer::draw): Ignore uimenu objects here.
diff --git a/src/gl-render.cc b/src/gl-render.cc
--- a/src/gl-render.cc
+++ b/src/gl-render.cc
@@ -549,18 +549,16 @@ opengl_renderer::draw (const graphics_ob
   else if (go.isa ("patch"))
     draw_patch (dynamic_cast<const patch::properties&> (props));
   else if (go.isa ("hggroup"))
     draw_hggroup (dynamic_cast<const hggroup::properties&> (props));
   else if (go.isa ("text"))
     draw_text (dynamic_cast<const text::properties&> (props));
   else if (go.isa ("image"))
     draw_image (dynamic_cast<const image::properties&> (props));
-  else if (go.isa ("uimenu"))
-    ;
   else
     warning ("opengl_renderer: cannot render object of type `%s'",
              props.graphics_object_name ().c_str ());
 }
 
 void
 opengl_renderer::draw_figure (const figure::properties& props)
 {
@@ -914,152 +912,175 @@ opengl_renderer::draw_axes (const axes::
       if (do_xgrid)
         {
           set_linestyle (gridstyle, true);
           glBegin (GL_LINES);
           for (int i = 0; i < xticks.numel (); i++)
             {
               double xval = xticks(i);
 
-              glVertex3d (xval, yPlaneN, zpTick);
-              glVertex3d (xval, yPlane, zpTick);
-              if (zstate != AXE_DEPTH_DIR)
+              if (xlim(0) <= xval && xlim(1) >= xval)
                 {
-                  glVertex3d (xval, yPlane, zPlaneN);
-                  glVertex3d (xval, yPlane, zPlane);
+                  glVertex3d (xval, yPlaneN, zpTick);
+                  glVertex3d (xval, yPlane, zpTick);
+                  if (zstate != AXE_DEPTH_DIR)
+                    {
+                      glVertex3d (xval, yPlane, zPlaneN);
+                      glVertex3d (xval, yPlane, zPlane);
+                    }
                 }
             }
           glEnd ();
           set_linestyle ("-", true);
         }
 
       // tick marks
       if (tick_along_z)
         {
           glBegin (GL_LINES);
           for (int i = 0; i < xticks.numel (); i++)
             {
               double xval = xticks(i);
 
-              glVertex3d (xval, yPlaneN, zPlane);
-              glVertex3d (xval, yPlaneN, zPlane+signum(zPlane-zPlaneN)*fz*xticklen*tickdir);
-              if (box && xstate != AXE_ANY_DIR)
+              if (xlim(0) <= xval && xlim(1) >= xval)
                 {
-                  glVertex3d (xval, yPlaneN, zPlaneN);
-                  glVertex3d (xval, yPlaneN,
-                        zPlaneN+signum(zPlaneN-zPlane)*fz*xticklen*tickdir);
+                  glVertex3d (xval, yPlaneN, zPlane);
+                  glVertex3d (xval, yPlaneN, zPlane+signum(zPlane-zPlaneN)*fz*xticklen*tickdir);
+                  if (box && xstate != AXE_ANY_DIR)
+                    {
+                      glVertex3d (xval, yPlaneN, zPlaneN);
+                      glVertex3d (xval, yPlaneN,
+                            zPlaneN+signum(zPlaneN-zPlane)*fz*xticklen*tickdir);
+                    }
+                  tickpos(i,0) = xval;
+                  tickpos(i,1) = yPlaneN;
+                  tickpos(i,2) = zPlane+signum(zPlane-zPlaneN)*fz*xtickoffset;
                 }
-              tickpos(i,0) = xval;
-              tickpos(i,1) = yPlaneN;
-              tickpos(i,2) = zPlane+signum(zPlane-zPlaneN)*fz*xtickoffset;
             }
           glEnd ();
         }
       else
         {
           glBegin (GL_LINES);
           for (int i = 0; i < xticks.numel (); i++)
             {
               double xval = xticks(i);
 
-              glVertex3d (xval, yPlaneN, zpTick);
-              glVertex3d (xval, yPlaneN+signum(yPlaneN-yPlane)*fy*xticklen*tickdir, zpTick);
-              if (box && xstate != AXE_ANY_DIR)
+              if (xlim(0) <= xval && xlim(1) >= xval)
                 {
-                  glVertex3d (xval, yPlane, zpTick);
-                  glVertex3d (xval,
-                        yPlane+signum(yPlane-yPlaneN)*fy*xticklen*tickdir, zpTick);
+                  glVertex3d (xval, yPlaneN, zpTick);
+                  glVertex3d (xval, yPlaneN+signum(yPlaneN-yPlane)*fy*xticklen*tickdir, zpTick);
+                  if (box && xstate != AXE_ANY_DIR)
+                    {
+                      glVertex3d (xval, yPlane, zpTick);
+                      glVertex3d (xval,
+                            yPlane+signum(yPlane-yPlaneN)*fy*xticklen*tickdir, zpTick);
+                    }
+                  tickpos(i,0) = xval;
+                  tickpos(i,1) = yPlaneN+signum(yPlaneN-yPlane)*fy*xtickoffset;
+                  tickpos(i,2) = zPlane;
                 }
-              tickpos(i,0) = xval;
-              tickpos(i,1) = yPlaneN+signum(yPlaneN-yPlane)*fy*xtickoffset;
-              tickpos(i,2) = zPlane;
             }
           glEnd ();
         }
 
       // tick texts
       if (xticklabels.numel () > 0)
         {
           int n = std::min (xticklabels.numel (), xticks.numel ());
           int halign = (xstate == AXE_HORZ_DIR ? 1 : (xySym ? 0 : 2));
           int valign = (xstate == AXE_VERT_DIR
                         ? 1
                        : (zd*zv(2) <= 0 && !x2Dtop ? 2 : 0));
 
           for (int i = 0; i < n; i++)
             {
-              // FIXME: as tick text is transparent, shouldn't be
-              //        drawn after axes object, for correct rendering?
-              Matrix b = render_text (xticklabels(i),
-                                    tickpos(i,0), tickpos(i,1), tickpos(i,2),
-                                    halign, valign); 
-
-              wmax = std::max (wmax, static_cast<int> (b(2)));
-              hmax = std::max (hmax, static_cast<int> (b(3)));
+              double xval = xticks(i);
+
+              if (xlim(0) <= xval && xlim(1) >= xval)
+                {
+                  // FIXME: as tick text is transparent, shouldn't be
+                  //        drawn after axes object, for correct rendering?
+                  Matrix b = render_text (xticklabels(i),
+                                        tickpos(i,0), tickpos(i,1), tickpos(i,2),
+                                        halign, valign); 
+
+                  wmax = std::max (wmax, static_cast<int> (b(2)));
+                  hmax = std::max (hmax, static_cast<int> (b(3)));
+                }
             }
         }
 
       // minor grid lines
       if (do_xminorgrid)
         {
           set_linestyle (minorgridstyle, true);
           glBegin (GL_LINES);
           for (int i = 0; i < xmticks.numel (); i++)
             {
               double xval = xmticks(i);
 
-              glVertex3d (xval, yPlaneN, zpTick);
-              glVertex3d (xval, yPlane, zpTick);
-              if (zstate != AXE_DEPTH_DIR)
+              if (xlim(0) <= xval && xlim(1) >= xval)
                 {
-                  glVertex3d (xval, yPlane, zPlaneN);
-                  glVertex3d (xval, yPlane, zPlane);
+                  glVertex3d (xval, yPlaneN, zpTick);
+                  glVertex3d (xval, yPlane, zpTick);
+                  if (zstate != AXE_DEPTH_DIR)
+                    {
+                      glVertex3d (xval, yPlane, zPlaneN);
+                      glVertex3d (xval, yPlane, zPlane);
+                    }
                 }
             }
           glEnd ();
           set_linestyle ("-", true);
         }
                         
       // minor tick marks
       if (do_xminortick)
         {
           if (tick_along_z)
             {
               glBegin (GL_LINES);
               for (int i = 0; i < xmticks.numel (); i++)
                 {
                   double xval = xmticks(i);
 
-                  glVertex3d (xval, yPlaneN, zPlane);
-                  glVertex3d (xval, yPlaneN,
-                      zPlane+signum(zPlane-zPlaneN)*fz*xticklen/2*tickdir);
-                  if (box && xstate != AXE_ANY_DIR)
+                  if (xlim(0) <= xval && xlim(1) >= xval)
                     {
-                      glVertex3d (xval, yPlaneN, zPlaneN);
+                      glVertex3d (xval, yPlaneN, zPlane);
                       glVertex3d (xval, yPlaneN,
-                          zPlaneN+signum(zPlaneN-zPlane)*fz*xticklen/2*tickdir);
+                          zPlane+signum(zPlane-zPlaneN)*fz*xticklen/2*tickdir);
+                      if (box && xstate != AXE_ANY_DIR)
+                        {
+                          glVertex3d (xval, yPlaneN, zPlaneN);
+                          glVertex3d (xval, yPlaneN,
+                              zPlaneN+signum(zPlaneN-zPlane)*fz*xticklen/2*tickdir);
+                        }
                     }
                 }
               glEnd ();
             }
           else
             {
               glBegin (GL_LINES);
               for (int i = 0; i < xmticks.numel (); i++)
                 {
                   double xval = xmticks(i);
 
-                  glVertex3d (xval, yPlaneN, zpTick);
-                  glVertex3d (xval,
-                        yPlaneN+signum(yPlaneN-yPlane)*fy*xticklen/2*tickdir, zpTick);
-                  if (box && xstate != AXE_ANY_DIR)
+                  if (xlim(0) <= xval && xlim(1) >= xval)
                     {
-                      glVertex3d (xval, yPlane, zpTick);
+                      glVertex3d (xval, yPlaneN, zpTick);
                       glVertex3d (xval,
-                            yPlane+signum(yPlane-yPlaneN)*fy*xticklen/2*tickdir, zpTick);
+                            yPlaneN+signum(yPlaneN-yPlane)*fy*xticklen/2*tickdir, zpTick);
+                      if (box && xstate != AXE_ANY_DIR)
+                        {
+                          glVertex3d (xval, yPlane, zpTick);
+                          glVertex3d (xval,
+                                yPlane+signum(yPlane-yPlaneN)*fy*xticklen/2*tickdir, zpTick);
+                        }
                     }
                 }
               glEnd ();
             }
         }
 
       text::properties& xlabel_props =
         reinterpret_cast<text::properties&> (gh_manager::get_object (props.get_xlabel ()).get_properties ());
@@ -1126,150 +1147,173 @@ opengl_renderer::draw_axes (const axes::
       if (do_ygrid)
         {
           set_linestyle (gridstyle, true);
           glBegin (GL_LINES);
           for (int i = 0; i < yticks.numel (); i++)
             {
               double yval = yticks(i);
 
-              glVertex3d (xPlaneN, yval, zpTick);
-              glVertex3d (xPlane, yval, zpTick);
-              if (zstate != AXE_DEPTH_DIR)
+              if (ylim(0) <= yval && ylim(1) >= yval)
                 {
-                  glVertex3d (xPlane, yval, zPlaneN);
-                  glVertex3d (xPlane, yval, zPlane);
+                  glVertex3d (xPlaneN, yval, zpTick);
+                  glVertex3d (xPlane, yval, zpTick);
+                  if (zstate != AXE_DEPTH_DIR)
+                    {
+                      glVertex3d (xPlane, yval, zPlaneN);
+                      glVertex3d (xPlane, yval, zPlane);
+                    }
                 }
             }
           glEnd ();
           set_linestyle ("-", true);
         }
 
       // tick marks
       if (tick_along_z)
         {
           glBegin (GL_LINES);
           for (int i = 0; i < yticks.numel (); i++)
             {
               double yval = yticks(i);
 
-              glVertex3d (xPlaneN, yval, zPlane);
-              glVertex3d (xPlaneN, yval, zPlane+signum(zPlane-zPlaneN)*fz*yticklen*tickdir);
-              if (box && ystate != AXE_ANY_DIR)
+              if (ylim(0) <= yval && ylim(1) >= yval)
                 {
-                  glVertex3d (xPlaneN, yval, zPlaneN);
-                  glVertex3d (xPlaneN, yval,
-                        zPlaneN+signum(zPlaneN-zPlane)*fz*yticklen*tickdir);
+                  glVertex3d (xPlaneN, yval, zPlane);
+                  glVertex3d (xPlaneN, yval, zPlane+signum(zPlane-zPlaneN)*fz*yticklen*tickdir);
+                  if (box && ystate != AXE_ANY_DIR)
+                    {
+                      glVertex3d (xPlaneN, yval, zPlaneN);
+                      glVertex3d (xPlaneN, yval,
+                            zPlaneN+signum(zPlaneN-zPlane)*fz*yticklen*tickdir);
+                    }
+                  tickpos(i,0) = xPlaneN;
+                  tickpos(i,1) = yval;
+                  tickpos(i,2) = zPlane+signum(zPlane-zPlaneN)*fz*ytickoffset;
                 }
-              tickpos(i,0) = xPlaneN;
-              tickpos(i,1) = yval;
-              tickpos(i,2) = zPlane+signum(zPlane-zPlaneN)*fz*ytickoffset;
             }
           glEnd ();
         }
       else
         {
           glBegin (GL_LINES);
           for (int i = 0; i < yticks.numel (); i++)
             {
               double yval = yticks(i);
 
-              glVertex3d (xPlaneN, yval, zpTick);
-              glVertex3d (xPlaneN+signum(xPlaneN-xPlane)*fx*yticklen*tickdir, yval, zpTick);
-              if (box && ystate != AXE_ANY_DIR)
+              if (ylim(0) <= yval && ylim(1) >= yval)
                 {
-                  glVertex3d (xPlane, yval, zpTick);
-                  glVertex3d (xPlane+signum(xPlane-xPlaneN)*fx*yticklen*tickdir,
-                        yval, zpTick);
+                  glVertex3d (xPlaneN, yval, zpTick);
+                  glVertex3d (xPlaneN+signum(xPlaneN-xPlane)*fx*yticklen*tickdir, yval, zpTick);
+                  if (box && ystate != AXE_ANY_DIR)
+                    {
+                      glVertex3d (xPlane, yval, zpTick);
+                      glVertex3d (xPlane+signum(xPlane-xPlaneN)*fx*yticklen*tickdir,
+                            yval, zpTick);
+                    }
+                  tickpos(i,0) = xPlaneN+signum(xPlaneN-xPlane)*fx*ytickoffset;
+                  tickpos(i,1) = yval;
+                  tickpos(i,2) = zPlane;
                 }
-              tickpos(i,0) = xPlaneN+signum(xPlaneN-xPlane)*fx*ytickoffset;
-              tickpos(i,1) = yval;
-              tickpos(i,2) = zPlane;
             }
           glEnd ();
         }
 
       // tick texts
       if (yticklabels.numel () > 0)
         {
           int n = std::min (yticklabels.numel (), yticks.numel ());
           int halign = (ystate == AXE_HORZ_DIR ? 1 : (!xySym || y2Dright ? 0 : 2));
           int valign = (ystate == AXE_VERT_DIR ? 1 : (zd*zv(2) <= 0 ? 2 : 0));
 
           for (int i = 0; i < n; i++)
             {
-              // FIXME: as tick text is transparent, shouldn't be
-              //        drawn after axes object, for correct rendering?
-              Matrix b = render_text (yticklabels(i),
-                                    tickpos(i,0), tickpos(i,1), tickpos(i,2),
-                                    halign, valign); 
-
-              wmax = std::max (wmax, static_cast<int> (b(2)));
-              hmax = std::max (hmax, static_cast<int> (b(3)));
+              double yval = yticks(i);
+
+              if (ylim(0) <= yval && ylim(1) >= yval)
+                {
+                  // FIXME: as tick text is transparent, shouldn't be
+                  //        drawn after axes object, for correct rendering?
+                  Matrix b = render_text (yticklabels(i),
+                                        tickpos(i,0), tickpos(i,1), tickpos(i,2),
+                                        halign, valign); 
+
+                  wmax = std::max (wmax, static_cast<int> (b(2)));
+                  hmax = std::max (hmax, static_cast<int> (b(3)));
+                }
             }
         }
 
       // minor grid lines
       if (do_yminorgrid)
         {
           set_linestyle (minorgridstyle, true);
           glBegin (GL_LINES);
           for (int i = 0; i < ymticks.numel (); i++)
             {
               double yval = ymticks(i);
 
-              glVertex3d (xPlaneN, yval, zpTick);
-              glVertex3d (xPlane, yval, zpTick);
-              if (zstate != AXE_DEPTH_DIR)
+              if (ylim(0) <= yval && ylim(1) >= yval)
                 {
-                  glVertex3d (xPlane, yval, zPlaneN);
-                  glVertex3d (xPlane, yval, zPlane);
+                  glVertex3d (xPlaneN, yval, zpTick);
+                  glVertex3d (xPlane, yval, zpTick);
+                  if (zstate != AXE_DEPTH_DIR)
+                    {
+                      glVertex3d (xPlane, yval, zPlaneN);
+                      glVertex3d (xPlane, yval, zPlane);
+                    }
                 }
             }
           glEnd ();
           set_linestyle ("-", true);
         }
 
       // minor tick marks
       if (do_yminortick)
         {
           if (tick_along_z)
             {
               glBegin (GL_LINES);
               for (int i = 0; i < ymticks.numel (); i++)
                 {
                   double yval = ymticks(i);
 
-                  glVertex3d (xPlaneN, yval, zPlane);
-                  glVertex3d (xPlaneN, yval,
-                        zPlane+signum(zPlane-zPlaneN)*fz*yticklen/2*tickdir);
-                  if (box && ystate != AXE_ANY_DIR)
+                  if (ylim(0) <= yval && ylim(1) >= yval)
                     {
-                      glVertex3d (xPlaneN, yval, zPlaneN);
+                      glVertex3d (xPlaneN, yval, zPlane);
                       glVertex3d (xPlaneN, yval,
-                            zPlaneN+signum(zPlaneN-zPlane)*fz*yticklen/2*tickdir);
+                            zPlane+signum(zPlane-zPlaneN)*fz*yticklen/2*tickdir);
+                      if (box && ystate != AXE_ANY_DIR)
+                        {
+                          glVertex3d (xPlaneN, yval, zPlaneN);
+                          glVertex3d (xPlaneN, yval,
+                                zPlaneN+signum(zPlaneN-zPlane)*fz*yticklen/2*tickdir);
+                        }
                     }
                 }
               glEnd ();
             }
           else
             {
               glBegin (GL_LINES);
               for (int i = 0; i < ymticks.numel (); i++)
                 {
                   double yval = ymticks(i);
 
-                  glVertex3d (xPlaneN, yval, zpTick);
-                  glVertex3d (xPlaneN+signum(xPlaneN-xPlane)*fx*yticklen/2*tickdir,
-                        yval, zpTick);
-                  if (box && ystate != AXE_ANY_DIR)
+                  if (ylim(0) <= yval && ylim(1) >= yval)
                     {
-                      glVertex3d (xPlane, yval, zpTick);
-                      glVertex3d (xPlane+signum(xPlane-xPlaneN)*fx*yticklen/2*tickdir,
+                      glVertex3d (xPlaneN, yval, zpTick);
+                      glVertex3d (xPlaneN+signum(xPlaneN-xPlane)*fx*yticklen/2*tickdir,
                             yval, zpTick);
+                      if (box && ystate != AXE_ANY_DIR)
+                        {
+                          glVertex3d (xPlane, yval, zpTick);
+                          glVertex3d (xPlane+signum(xPlane-xPlaneN)*fx*yticklen/2*tickdir,
+                                yval, zpTick);
+                        }
                     }
                 }
               glEnd ();
             }
         }
 
       text::properties& ylabel_props =
         reinterpret_cast<text::properties&> (gh_manager::get_object (props.get_ylabel ()).get_properties ());
@@ -1335,138 +1379,161 @@ opengl_renderer::draw_axes (const axes::
       if (do_zgrid)
         {
           set_linestyle (gridstyle, true);
           glBegin (GL_LINES);
           for (int i = 0; i < zticks.numel (); i++)
             {
               double zval = zticks(i);
 
-              glVertex3d (xPlaneN, yPlane, zval);
-              glVertex3d (xPlane, yPlane, zval);
-              glVertex3d (xPlane, yPlaneN, zval);
-              glVertex3d (xPlane, yPlane, zval);
+              if (zlim(0) <= zval && zlim(1) >= zval)
+                {
+                  glVertex3d (xPlaneN, yPlane, zval);
+                  glVertex3d (xPlane, yPlane, zval);
+                  glVertex3d (xPlane, yPlaneN, zval);
+                  glVertex3d (xPlane, yPlane, zval);
+                }
             }
           glEnd ();
           set_linestyle ("-", true);
         }
 
       // tick marks
       if (xySym)
         {
           if (xisinf (fy))
             {
               glBegin (GL_LINES);
               for (int i = 0; i < zticks.numel (); i++)
                 {
                   double zval = zticks(i);
 
-                  glVertex3d (xPlaneN, yPlane, zval);
-                  glVertex3d (xPlaneN+signum(xPlaneN-xPlane)*fx*zticklen*tickdir,
-                        yPlane, zval);
-                  if (box && zstate != AXE_ANY_DIR)
+                  if (zlim(0) <= zval && zlim(1) >= zval)
                     {
-                      glVertex3d (xPlane, yPlane, zval);
-                      glVertex3d (xPlane+signum(xPlane-xPlaneN)*fx*zticklen*tickdir,
+                      glVertex3d (xPlaneN, yPlane, zval);
+                      glVertex3d (xPlaneN+signum(xPlaneN-xPlane)*fx*zticklen*tickdir,
                             yPlane, zval);
+                      if (box && zstate != AXE_ANY_DIR)
+                        {
+                          glVertex3d (xPlane, yPlane, zval);
+                          glVertex3d (xPlane+signum(xPlane-xPlaneN)*fx*zticklen*tickdir,
+                                yPlane, zval);
+                        }
+                      tickpos(i,0) = xPlaneN+signum(xPlaneN-xPlane)*fx*ztickoffset;
+                      tickpos(i,1) = yPlane;
+                      tickpos(i,2) = zval;
                     }
-                  tickpos(i,0) = xPlaneN+signum(xPlaneN-xPlane)*fx*ztickoffset;
-                  tickpos(i,1) = yPlane;
-                  tickpos(i,2) = zval;
                 }
               glEnd ();
             }
           else
             {
               glBegin (GL_LINES);
               for (int i = 0; i < zticks.numel (); i++)
                 {
                   double zval = zticks(i);
 
-                  glVertex3d (xPlaneN, yPlane, zval);
-                  glVertex3d (xPlaneN, yPlane+signum(yPlane-yPlaneN)*fy*zticklen*tickdir, zval);
-                  tickpos(i,0) = xPlaneN;
-                  tickpos(i,1) = yPlane+signum(yPlane-yPlaneN)*fy*ztickoffset;
-                  tickpos(i,2) = zval;
+                  if (zlim(0) <= zval && zlim(1) >= zval)
+                    {
+                      glVertex3d (xPlaneN, yPlane, zval);
+                      glVertex3d (xPlaneN, yPlane+signum(yPlane-yPlaneN)*fy*zticklen*tickdir, zval);
+                      tickpos(i,0) = xPlaneN;
+                      tickpos(i,1) = yPlane+signum(yPlane-yPlaneN)*fy*ztickoffset;
+                      tickpos(i,2) = zval;
+                    }
                 }
               glEnd ();
             }
         }
       else
         {
           if (xisinf (fx))
             {
               glBegin (GL_LINES);
               for (int i = 0; i < zticks.numel (); i++)
                 {
                   double zval = zticks(i);
 
-                  glVertex3d (xPlane, yPlaneN, zval);
-                  glVertex3d (xPlane, yPlaneN+signum(yPlaneN-yPlane)*fy*zticklen*tickdir, zval);
-                  if (box && zstate != AXE_ANY_DIR)
+                  if (zlim(0) <= zval && zlim(1) >= zval)
                     {
-                      glVertex3d (xPlane, yPlane, zval);
-                      glVertex3d (xPlane, yPlane+signum(yPlane-yPlaneN)*fy*zticklen*tickdir, zval);
+                      glVertex3d (xPlane, yPlaneN, zval);
+                      glVertex3d (xPlane, yPlaneN+signum(yPlaneN-yPlane)*fy*zticklen*tickdir, zval);
+                      if (box && zstate != AXE_ANY_DIR)
+                        {
+                          glVertex3d (xPlane, yPlane, zval);
+                          glVertex3d (xPlane, yPlane+signum(yPlane-yPlaneN)*fy*zticklen*tickdir, zval);
+                        }
+                      tickpos(i,0) = xPlane;
+                      tickpos(i,1) = yPlaneN+signum(yPlaneN-yPlane)*fy*ztickoffset;
+                      tickpos(i,2) = zval;
                     }
-                  tickpos(i,0) = xPlane;
-                  tickpos(i,1) = yPlaneN+signum(yPlaneN-yPlane)*fy*ztickoffset;
-                  tickpos(i,2) = zval;
                 }
               glEnd ();
             }
           else
           {
             glBegin (GL_LINES);
             for (int i = 0; i < zticks.numel (); i++)
               {
                 double zval = zticks(i);
 
-                glVertex3d (xPlane, yPlaneN, zval);
-                glVertex3d (xPlane+signum(xPlane-xPlaneN)*fx*zticklen*tickdir, yPlaneN, zval);
-                tickpos(i,0) = xPlane+signum(xPlane-xPlaneN)*fx*ztickoffset;
-                tickpos(i,1) = yPlaneN;
-                tickpos(i,2) = zval;
+                if (zlim(0) <= zval && zlim(1) >= zval)
+                  {
+                    glVertex3d (xPlane, yPlaneN, zval);
+                    glVertex3d (xPlane+signum(xPlane-xPlaneN)*fx*zticklen*tickdir, yPlaneN, zval);
+                    tickpos(i,0) = xPlane+signum(xPlane-xPlaneN)*fx*ztickoffset;
+                    tickpos(i,1) = yPlaneN;
+                    tickpos(i,2) = zval;
+                  }
               }
             glEnd ();
           }
         }
 
       // FIXME: tick texts
       if (zticklabels.numel () > 0)
         {
           int n = std::min (zticklabels.numel (), zticks.numel ());
           int halign = 2;
           int valign = (zstate == AXE_VERT_DIR ? 1 : (zd*zv(2) < 0 ? 3 : 2));
 
           for (int i = 0; i < n; i++)
             {
-              // FIXME: as tick text is transparent, shouldn't be
-              //        drawn after axes object, for correct rendering?
-              Matrix b = render_text (zticklabels(i),
-                                    tickpos(i,0), tickpos(i,1), tickpos(i,2),
-                                    halign, valign); 
-
-              wmax = std::max (wmax, static_cast<int> (b(2)));
-              hmax = std::max (hmax, static_cast<int> (b(3)));
+              double zval = zticks(i);
+
+              if (zlim(0) <= zval && zlim(1) >= zval)
+                {
+                  // FIXME: as tick text is transparent, shouldn't be
+                  //        drawn after axes object, for correct rendering?
+                  Matrix b = render_text (zticklabels(i),
+                                        tickpos(i,0), tickpos(i,1), tickpos(i,2),
+                                        halign, valign); 
+
+                  wmax = std::max (wmax, static_cast<int> (b(2)));
+                  hmax = std::max (hmax, static_cast<int> (b(3)));
+                }
             }
         }
 
       // minor grid lines
       if (do_zminorgrid)
         {
           set_linestyle (minorgridstyle, true);
           glBegin (GL_LINES);
           for (int i = 0; i < zmticks.numel (); i++)
             {
               double zval = zmticks(i);
 
-              glVertex3d (xPlaneN, yPlane, zval);
-              glVertex3d (xPlane, yPlane, zval);
-              glVertex3d (xPlane, yPlaneN, zval);
-              glVertex3d (xPlane, yPlane, zval);
+              if (zlim(0) <= zval && zlim(1) >= zval)
+                {
+                  glVertex3d (xPlaneN, yPlane, zval);
+                  glVertex3d (xPlane, yPlane, zval);
+                  glVertex3d (xPlane, yPlaneN, zval);
+                  glVertex3d (xPlane, yPlane, zval);
+                }
             }
           glEnd ();
           set_linestyle ("-", true);
         }
 
       // minor tick marks
       if (do_zminortick)
         {
@@ -1474,69 +1541,81 @@ opengl_renderer::draw_axes (const axes::
             {
               if (xisinf (fy))
                 {
                   glBegin (GL_LINES);
                   for (int i = 0; i < zmticks.numel (); i++)
                     {
                       double zval = zmticks(i);
 
-                      glVertex3d (xPlaneN, yPlane, zval);
-                      glVertex3d (xPlaneN+signum(xPlaneN-xPlane)*fx*zticklen/2*tickdir,
-                            yPlane, zval);
-                      if (box && zstate != AXE_ANY_DIR)
+                      if (zlim(0) <= zval && zlim(1) >= zval)
                         {
-                          glVertex3d (xPlane, yPlane, zval);
-                          glVertex3d (xPlane+signum(xPlane-xPlaneN)*fx*zticklen/2*tickdir,
+                          glVertex3d (xPlaneN, yPlane, zval);
+                          glVertex3d (xPlaneN+signum(xPlaneN-xPlane)*fx*zticklen/2*tickdir,
                                 yPlane, zval);
+                          if (box && zstate != AXE_ANY_DIR)
+                            {
+                              glVertex3d (xPlane, yPlane, zval);
+                              glVertex3d (xPlane+signum(xPlane-xPlaneN)*fx*zticklen/2*tickdir,
+                                    yPlane, zval);
+                            }
                         }
                     }
                   glEnd ();
                 }
               else
                 {
                   glBegin (GL_LINES);
                   for (int i = 0; i < zmticks.numel (); i++)
                     {
                       double zval = zmticks(i);
 
-                      glVertex3d (xPlaneN, yPlane, zval);
-                      glVertex3d (xPlaneN, yPlane+signum(yPlane-yPlaneN)*fy*zticklen/2*tickdir, zval);
+                      if (zlim(0) <= zval && zlim(1) >= zval)
+                        {
+                          glVertex3d (xPlaneN, yPlane, zval);
+                          glVertex3d (xPlaneN, yPlane+signum(yPlane-yPlaneN)*fy*zticklen/2*tickdir, zval);
+                        }
                     }
                   glEnd ();
                 }
             }
           else
             {
               if (xisinf (fx))
                 {
                   glBegin (GL_LINES);
                   for (int i = 0; i < zmticks.numel (); i++)
                     {
                       double zval = zmticks(i);
 
-                      glVertex3d (xPlane, yPlaneN, zval);
-                      glVertex3d (xPlane, yPlaneN+signum(yPlaneN-yPlane)*fy*zticklen/2*tickdir, zval);
-                      if (box && zstate != AXE_ANY_DIR)
+                      if (zlim(0) <= zval && zlim(1) >= zval)
                         {
-                          glVertex3d (xPlane, yPlane, zval);
-                          glVertex3d (xPlane, yPlane+signum(yPlane-yPlaneN)*fy*zticklen/2*tickdir, zval);
+                          glVertex3d (xPlane, yPlaneN, zval);
+                          glVertex3d (xPlane, yPlaneN+signum(yPlaneN-yPlane)*fy*zticklen/2*tickdir, zval);
+                          if (box && zstate != AXE_ANY_DIR)
+                            {
+                              glVertex3d (xPlane, yPlane, zval);
+                              glVertex3d (xPlane, yPlane+signum(yPlane-yPlaneN)*fy*zticklen/2*tickdir, zval);
+                            }
                         }
                     }
                   glEnd ();
                 }
               else
                 {
                   glBegin (GL_LINES);
                   for (int i = 0; i < zmticks.numel (); i++)
                     {
                       double zval = zmticks(i);
 
-                      glVertex3d (xPlane, yPlaneN, zval);
-                      glVertex3d (xPlane+signum(xPlane-xPlaneN)*fx*zticklen/2*tickdir, yPlaneN, zval);
+                      if (zlim(0) <= zval && zlim(1) >= zval)
+                        {
+                          glVertex3d (xPlane, yPlaneN, zval);
+                          glVertex3d (xPlane+signum(xPlane-xPlaneN)*fx*zticklen/2*tickdir, yPlaneN, zval);
+                        }
                     }
                   glEnd ();
                 }
             }
         }
 
       text::properties& zlabel_props =
         reinterpret_cast<text::properties&> (gh_manager::get_object (props.get_zlabel ()).get_properties ());
