# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1318384521 14400
#      Tue Oct 11 21:55:21 2011 -0400
# Node ID de081abd32c6a9c2b216d896064f38cc8e62b50d
# Parent  16a706965ee0755163c7ef9cc3ccd384080db9c3
don't execute graphics handle callback functions recursively

* graphics.h.in (callback_property::executing): New data member.
(callback_property::callback_property): Initialize it.
graphics.cc (callback_property::execute): Protect executing member
variable.  Avoid executing callback if we are already doing so.

diff --git a/src/graphics.cc b/src/graphics.cc
--- a/src/graphics.cc
+++ b/src/graphics.cc
@@ -1385,18 +1385,30 @@ callback_property::validate (const octav
     return true;
 
   return false;
 }
 
 void
 callback_property::execute (const octave_value& data) const
 {
-  if (callback.is_defined () && ! callback.is_empty ())
-    gh_manager::execute_callback (get_parent (), callback, data);
+  unwind_protect frame;
+
+  // We are executing the callback function associated with this
+  // callback property.  When set to true, we avoid recursive calls to
+  // callback routines.
+  frame.protect_var (executing);
+
+  if (! executing)
+    {
+      executing = true;
+
+      if (callback.is_defined () && ! callback.is_empty ())
+        gh_manager::execute_callback (get_parent (), callback, data);
+    }
 }
 
 // Used to cache dummy graphics objects from which dynamic
 // properties can be cloned.
 static std::map<caseless_str, graphics_object> dprop_obj_map;
 
 property
 property::create (const std::string& name, const graphics_handle& h,
diff --git a/src/graphics.h.in b/src/graphics.h.in
--- a/src/graphics.h.in
+++ b/src/graphics.h.in
@@ -1808,20 +1808,20 @@ private:
 
 // ---------------------------------------------------------------------
 
 class callback_property : public base_property
 {
 public:
   callback_property (const std::string& nm, const graphics_handle& h,
                      const octave_value& m)
-    : base_property (nm, h), callback (m) { }
+    : base_property (nm, h), callback (m), executing (false) { }
 
   callback_property (const callback_property& p)
-    : base_property (p), callback (p.callback) { }
+    : base_property (p), callback (p.callback), executing (false) { }
 
   octave_value get (void) const { return callback; }
 
   OCTINTERP_API void execute (const octave_value& data = octave_value ()) const;
 
   bool is_defined (void) const
     {
       return (callback.is_defined () && ! callback.is_empty ());
@@ -1849,16 +1849,19 @@ protected:
       return false;
     }
 
 private:
   OCTINTERP_API bool validate (const octave_value& v) const;
 
 private:
   octave_value callback;
+
+  // If TRUE, we are executing this callback.
+  mutable bool executing;
 };
 
 // ---------------------------------------------------------------------
 
 class property
 {
 public:
   property (void) : rep (new base_property ("", graphics_handle ()))
