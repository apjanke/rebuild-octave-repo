# HG changeset patch
# User Rik <rik@octave.org>
# Date 1466384647 25200
#      Sun Jun 19 18:04:07 2016 -0700
# Node ID c46e2532d4218b6fd3ebeb284b64c1cb48f60b8b
# Parent  a5924b0cbf4283b007412093b3760fe2029363c8
Add directories through addpath in the correct order (bug #48247).

* load-path.cc (Faddpath): Copy input args to function into local variable
arglist.  Reverse arglist if 'append' option is given.

diff --git a/libinterp/corefcn/load-path.cc b/libinterp/corefcn/load-path.cc
--- a/libinterp/corefcn/load-path.cc
+++ b/libinterp/corefcn/load-path.cc
@@ -2397,18 +2397,18 @@ In addition to accepting individual dire
 directory names separated by @code{pathsep} are also accepted.  For example:\n\
 \n\
 @example\n\
 addpath (\"dir1:/dir2:~/dir3\")\n\
 @end example\n\
 @seealso{path, rmpath, genpath, pathdef, savepath, pathsep}\n\
 @end deftypefn")
 {
-  // Originally written by Bill Denney and Etienne Grossman.  Heavily
-  // modified and translated to C++ by jwe.
+  // Originally written by Bill Denney and Etienne Grossman.
+  // Heavily modified and translated to C++ by jwe.
 
   int nargin = args.length ();
 
   if (nargin == 0)
     print_usage ();
 
   octave_value retval;
 
@@ -2443,30 +2443,32 @@ addpath (\"dir1:/dir2:~/dir3\")\n\
           nargin--;
         }
       else
         error ("addpath: OPTION must be '-begin'/0 or '-end'/1");
     }
 
   bool need_to_update = false;
 
-  for (int i = 0; i < nargin; i++)
+  octave_value_list arglist (args.slice (0, nargin));
+  if (! append)
+    arglist.reverse ();
+
+  for (int i = 0; i < arglist.length (); i++)
     {
-      std::string arg = args(i).xstring_value ("addpath: all arguments must be strings");
+      std::string arg = arglist(i).xstring_value ("addpath: all arguments must be strings");
 
       std::list<std::string> dir_elts = split_path (arg);
 
       if (! append)
         std::reverse (dir_elts.begin (), dir_elts.end ());
 
-      for (std::list<std::string>::const_iterator p = dir_elts.begin ();
-           p != dir_elts.end ();
-           p++)
+      for (const auto& p : dir_elts)
         {
-          std::string dir = *p;
+          std::string dir = p;
 
           //dir = regexprep (dir_elts{j}, '//+', "/");
           //dir = regexprep (dir, '/$', "");
 
           if (append)
             load_path::append (dir, true);
           else
             load_path::prepend (dir, true);
