# HG changeset patch
# User Rik <octave@nomad.inbox5.com>
# Date 1333691337 25200
#      Thu Apr 05 22:48:57 2012 -0700
# Node ID 8985cbbd2fe4b7fd1a8362c34d35ab7be09fa9a9
# Parent  aabdc8f281f1f011fc01a44b2cf1882e5da11aaa
doc: Periodic spellcheck of documentation

* aspell-octave.en.pws: Add new words bitmapped, splinefit, xc, and yc
to dictionary.

* install.txi, octave.texi, poly.txi, splinefit.m: Correct typos.

diff --git a/doc/interpreter/doccheck/aspell-octave.en.pws b/doc/interpreter/doccheck/aspell-octave.en.pws
--- a/doc/interpreter/doccheck/aspell-octave.en.pws
+++ b/doc/interpreter/doccheck/aspell-octave.en.pws
@@ -61,16 +61,17 @@ BFGS
 bigtriangledown
 Bilbert
 bincoeff
 binocdf
 binoinv
 binopdf
 binornd
 Biomathematics
+bitmapped
 bitmax
 bitwise
 bivariate
 Blackman
 blas
 bmp
 bof
 boolean
@@ -825,16 +826,17 @@ SPARSKIT
 spaugment
 spchol
 spcholperm
 spconvert
 spdiags
 Spearman's
 speye
 spfun
+splinefit
 spmatrix
 spones
 spparms
 sprand
 sprandn
 sprandsym
 sprank
 SPSS
@@ -1034,16 +1036,17 @@ wildcards
 Wilks
 windowstyle
 WinRand
 WIPO
 Wl
 wp
 wspace
 xb
+xc
 xcorr
 xdigit
 xerrorbar
 xerrorbars
 XFig
 xGBTRF
 xGELSD
 xGETRF
@@ -1055,16 +1058,17 @@ xPOTRF
 xPTSV
 xTRTRS
 xu
 xwd
 xy
 xyerrorbar
 xyerrorbars
 xyz
+yc
 ydata
 yerrorbar
 yerrorbars
 ylim
 yy
 YY
 yyyy
 YYYY
diff --git a/doc/interpreter/install.txi b/doc/interpreter/install.txi
--- a/doc/interpreter/install.txi
+++ b/doc/interpreter/install.txi
@@ -60,23 +60,23 @@ steps as described in @ref{Building the 
 @section Build Dependencies
 
 Octave is a fairly large program with many build dependencies.  You may
 be able to find pre-packaged versions of the dependencies distributed as
 part of your system, or you may have to build some or all of them
 yourself.
 
 @menu
-* Obtaining the Depencies Automatically::
+* Obtaining the Dependencies Automatically::
 * Build Tools::
 * External Packages::
 @end menu
 
-@node Obtaining the Depencies Automatically
-@subsection Obtaining the Depencies Automatically
+@node Obtaining the Dependencies Automatically
+@subsection Obtaining the Dependencies Automatically
 
 On some systems you can obtain many of Octave's build dependencies
 automatically. The commands for doing this vary by system. Similarly,
 the names of pre-compiled packages vary by system and do not always
 match exactly the names listed in @ref{Build Tools} and @ref{External
 Packages}.
 
 You will usually need the development version of an external dependency
diff --git a/doc/interpreter/octave.texi b/doc/interpreter/octave.texi
--- a/doc/interpreter/octave.texi
+++ b/doc/interpreter/octave.texi
@@ -885,17 +885,17 @@ Installation
 
 * Build Dependencies::
 * Running Configure and Make::
 * Compiling Octave with 64-bit Indexing::
 * Installation Problems::
 
 Build Dependencies
 
-* Obtaining the Depencies Automatically::
+* Obtaining the Dependencies Automatically::
 * Build Tools::
 * External Packages::
 
 Emacs Octave Support
 
 * Installing EOS::              
 * Using Octave Mode::           
 * Running Octave from Within Emacs::  
diff --git a/doc/interpreter/poly.txi b/doc/interpreter/poly.txi
--- a/doc/interpreter/poly.txi
+++ b/doc/interpreter/poly.txi
@@ -219,23 +219,23 @@ legend (@{"data", "order 0", "order 1", 
 
 @ifnotinfo
 @noindent
 The result of which can be seen in @ref{fig:splinefit2}.
 
 @float Figure,fig:splinefit2
 @center @image{splinefit2,4in}
 @caption{Comparison of a piecewise constant, linear, quadratic, cubic, and
-quartic polynomials with 8 breaks to noisey data. The higher order solutions
+quartic polynomials with 8 breaks to noisy data. The higher order solutions
 more accurately represent the underlying function, but come with the
 expense of computational complexity.}
 @end float
 @end ifnotinfo
 
-When the underlying function to provide a fit to is periodice, @code{splitfit}
+When the underlying function to provide a fit to is periodic, @code{splinefit}
 is able to apply the boundary conditions needed to manifest a periodic fit.
 This is demonstrated by the code below.
 
 @example
 @group
 ## Data (100 points)
 x = 2 * pi * [0, (rand (1, 98)), 1];
 y = sin (x) - cos (2 * x) + 0.2 * randn (size (x));
@@ -260,19 +260,19 @@ The result of which can be seen in @ref{
 
 @float Figure,fig:splinefit3
 @center @image{splinefit3,4in}
 @caption{Comparison of piecewise cubic fits to a noisy periodic function with,
 and without, periodic boundary conditions.}
 @end float
 @end ifnotinfo
 
-More complex constaints may be added as well. For example, the code below
+More complex constraints may be added as well. For example, the code below
 illustrates a periodic fit with values that have been clamped end point values
-and a second periodic fit wihh hinged end point values.
+and a second periodic fit with hinged end point values.
 
 @example
 @group
 ## Data (200 points)
 x = 2 * pi * rand (1, 200);
 y = sin (2 * x) + 0.1 * randn (size (x));
 ## Breaks
 breaks = linspace (0, 2 * pi, 10);
@@ -305,17 +305,17 @@ The result of which can be seen in @ref{
 signal. One fit has its end points clamped and the second has its end points
 hinged.}
 @end float
 @end ifnotinfo
 
 The @code{splinefit} function also provides the convenience of a @var{robust}
 fitting, where the effect of outlying data is reduced.  In the example below,
 three different fits are provided.  Two with differing levels of outlier
-suppressin and a third illustrating the non-robust solution.
+suppression and a third illustrating the non-robust solution.
 
 @example
 @group
 ## Data
 x = linspace (0, 2*pi, 200);
 y = sin (x) + sin (2 * x) + 0.05 * randn (size (x));
 ## Add outliers
 x = [x, linspace(0,2*pi,60)];
@@ -342,21 +342,21 @@ ylim auto
 @end example
 
 @ifnotinfo
 @noindent
 The result of which can be seen in @ref{fig:splinefit6}.
 
 @float Figure,fig:splinefit6
 @center @image{splinefit6,4in}
-@caption{Comparison of two differnet levels of robust fitting (@var{beta} = 0.25 and 0.75) to noisy data combined with outlying data. A standard fit is also included.}
+@caption{Comparison of two different levels of robust fitting (@var{beta} = 0.25 and 0.75) to noisy data combined with outlying data. A standard fit is also included.}
 @end float
 @end ifnotinfo
 
-The function, @code{ppval}, evaluates the piecewise polyomials, created
+The function, @code{ppval}, evaluates the piecewise polynomials, created
 by @code{mkpp} or other means, and @code{unmkpp} returns detailed
 information about the piecewise polynomial.
 
 The following example shows how to combine two linear functions and a
 quadratic into one function.  Each of these functions is expressed
 on adjoined intervals.
 
 @example
diff --git a/scripts/polynomial/splinefit.m b/scripts/polynomial/splinefit.m
--- a/scripts/polynomial/splinefit.m
+++ b/scripts/polynomial/splinefit.m
@@ -53,25 +53,25 @@
 ## outlying data.  Values close to unity may cause instability or rank
 ## deficiency.
 ##
 ## @var{order} sets the order polynomials used to construct the spline.
 ## The default is a cubic, @var{order}=3.  A spline with P pieces has
 ## P+@var{order} degrees of freedom.  With periodic boundary conditions
 ## the degrees of freedom are reduced to P.
 ##
-## The optional property, @var{constaints}, is a structure specifying
+## The optional property, @var{constraints}, is a structure specifying
 ## linear constraints on the fit.  The structure has three fields, "xc",
 ## "yc", and "cc".
 ##
 ## @table @asis
 ## @item "xc"
 ## x-locations of the constraints (vector) with a size identical to @var{x}.
 ## @item "yc"
-## Constaining values with a size identical to @var{y}.  The default
+## Constraining values with a size identical to @var{y}.  The default
 ## is an array of zeros.
 ## @item "cc"
 ## Coefficients (matrix).  The default is an array of ones.  The number of
 ## rows is limited to the order of the piece-wise polynomials, @var{order}.
 ## @end table
 ##
 ## Constraints are linear combinations of derivatives of order 0 to
 ## @var{order}-1 according to
