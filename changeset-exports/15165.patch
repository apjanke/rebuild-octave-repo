# HG changeset patch
# User Rik <rik@octave.org>
# Date 1344884167 25200
#      Mon Aug 13 11:56:07 2012 -0700
# Node ID 84d7a1ed5f2939ee3a2f63fab6b42d96412f4256
# Parent  bc801a44bb1f10384856be345cefd4846cfa5c48
configure.ac: Re-indent for clarity.  Try to shorten long lines < 80 characters.

* configure.ac: Re-indent for clarity.  Try to shorten long lines < 80 characters.

diff --git a/configure.ac b/configure.ac
--- a/configure.ac
+++ b/configure.ac
@@ -1,10 +1,8 @@
-dnl configure.in
-dnl
 dnl Process this file with autoconf to produce a configure script.
 dnl
 dnl Copyright (C) 1993-2012 John W. Eaton
 ### 
 ### This file is part of Octave.
 ### 
 ### Octave is free software; you can redistribute it and/or modify it
 ### under the terms of the GNU General Public License as published by the
@@ -58,35 +56,37 @@ AC_DEFINE(OCTAVE_SOURCE, 1, [Define to 1
   
 AC_USE_SYSTEM_EXTENSIONS
 
 ### Path separator.
 
 sepchar=:
 AC_ARG_WITH(sepchar,
   [AS_HELP_STRING([--with-sepchar=<char>],
-     [use <char> as the path separation character])])
+    [use <char> as the path separation character])])
 case $with_sepchar in
   yes | "")
     case "$canonical_host_type" in
       *-*-mingw* | *-*-msdosmsvc)
         sepchar=';'
         ;;
       esac
     ;;
   no)
     AC_MSG_ERROR([You are required to define a path separation character])
     ;;
   *)
     sepchar=$with_sepchar
     ;;
 esac
 AC_SUBST(sepchar)
-AC_DEFINE_UNQUOTED(SEPCHAR, ['$sepchar'], [Define this to be the path separator for your system, as a character constant.])
-AC_DEFINE_UNQUOTED(SEPCHAR_STR, ["$sepchar"], [Define this to the path separator, as a string.])
+AC_DEFINE_UNQUOTED(SEPCHAR, ['$sepchar'],
+  [Define this to be the path separator for your system, as a character constant.])
+AC_DEFINE_UNQUOTED(SEPCHAR_STR, ["$sepchar"],
+  [Define this to be the path separator for your system, as a string.])
 
 ### Set default file locations
 
 OCTAVE_SET_DEFAULT(man1dir, '$(mandir)/man1')
 OCTAVE_SET_DEFAULT(man1ext, '.1')
 OCTAVE_SET_DEFAULT(doc_cache_file, '$(octetcdir)/doc-cache')
 OCTAVE_SET_DEFAULT(texi_macros_file, '$(octetcdir)/macros.texi')
 OCTAVE_SET_DEFAULT(infofile, '$(infodir)/octave.info')
@@ -127,67 +127,70 @@ AC_SUBST(config_opts)
 
 ### Enable bounds checking on element references within Octave's array and
 ### matrix classes.  This slows down some operations a bit, so it is turned off
 ### by default.
 
 BOUNDS_CHECKING=false
 AC_ARG_ENABLE(bounds-check,
   [AS_HELP_STRING([--enable-bounds-check],
-     [bounds checking for indexing in internal array classes (default is no)])],
+    [bounds checking for indexing in internal array classes (default is no)])],
   [if test "$enableval" = yes; then BOUNDS_CHECKING=true; fi], [])
 if $BOUNDS_CHECKING; then
   AC_DEFINE(BOUNDS_CHECKING, 1, [Define to 1 to use internal bounds checking.])
 fi
 
 ### Use Octave's built-in memory allocator rather than straightforward malloc.
 ### Disabled by default.
 
 USE_OCTAVE_ALLOCATOR=false
 AC_ARG_ENABLE(octave-allocator,
   [AS_HELP_STRING([--enable-octave-allocator],
-     [use the obsolete octave_allocator class for many of Octave's objects (mostly octave_value types).  You probably do NOT want to enable this feature.  (default is no)])],
+    [use the obsolete octave_allocator class for many of Octave's objects (mostly octave_value types).  You probably do NOT want to enable this feature.  (default is no)])],
   [if test "$enableval" = yes; then USE_OCTAVE_ALLOCATOR=true; fi], [])
 if $USE_OCTAVE_ALLOCATOR; then
-  AC_DEFINE(USE_OCTAVE_ALLOCATOR, 1, [Define to 1 to use octave_allocator class.])
+  AC_DEFINE(USE_OCTAVE_ALLOCATOR, 1,
+    [Define to 1 to use octave_allocator class.])
 fi
 
 ### Use atomic operations for internal reference counting.  This is required
 ### for thread-safe behavior but incurs a significant slowdown, and is thus
 ### disabled by default.
 
 USE_ATOMIC_REFCOUNT=false
 AC_ARG_ENABLE(atomic-refcount,
   [AS_HELP_STRING([--enable-atomic-refcount],
-     [use atomic operations for internal reference counting.  This is required for thread-safe behavior.  (default is no)])],
+    [use atomic operations for internal reference counting.  This is required for thread-safe behavior.  (default is no)])],
   [if test "$enableval" = yes; then USE_ATOMIC_REFCOUNT=true; fi], [])
 if $USE_ATOMIC_REFCOUNT; then
-  AC_DEFINE(USE_ATOMIC_REFCOUNT, 1, [Define to 1 to use atomic operations for reference counting.])
+  AC_DEFINE(USE_ATOMIC_REFCOUNT, 1,
+    [Define to 1 to use atomic operations for reference counting.])
 fi
 
 ### Disable running Make in the doc directory.
 ### This is useful, for example, when building Octave on systems without TeX.
 
 DOCDIR=doc
 AC_ARG_ENABLE(docs,
   [AS_HELP_STRING([--enable-docs], [build documentation (default is yes)])],
   [if test "$enableval" = no; then
      DOCDIR=
      warn_docs="building documentation disabled; make dist will fail"
      OCTAVE_CONFIGURE_WARNING([warn_docs])
-   fi], [])
+   fi],
+  [])
 AC_SUBST(DOCDIR)
 
 ### If possible, use a 64-bit integer type for array dimensions and indexing.
 
 USE_64_BIT_IDX_T=false
 OCTAVE_IDX_TYPE=int
 AC_ARG_ENABLE(64,
   [AS_HELP_STRING([--enable-64],
-     [(EXPERIMENTAL) use 64-bit integers for array dimensions and indexing])],
+    [(EXPERIMENTAL) use 64-bit integers for array dimensions and indexing])],
   [if test "$enableval" = yes; then USE_64_BIT_IDX_T=true; fi], [])
 if $USE_64_BIT_IDX_T; then
   AC_CHECK_SIZEOF(void *)
   AC_CHECK_SIZEOF(int)
   AC_CHECK_SIZEOF(long)
   if test $ac_cv_sizeof_void_p -eq 8; then
     if test $ac_cv_sizeof_int -eq 8; then
       OCTAVE_IDX_TYPE=int
@@ -204,46 +207,46 @@ if $USE_64_BIT_IDX_T; then
     OCTAVE_CONFIGURE_WARNING([warn_64_bit])
     USE_64_BIT_IDX_T=false
   fi
 fi
 AC_SUBST(OCTAVE_IDX_TYPE)
 AC_DEFINE_UNQUOTED(OCTAVE_IDX_TYPE, $OCTAVE_IDX_TYPE,
   [Define to the type of octave_idx_type (64 or 32 bit signed integer).])
 if $USE_64_BIT_IDX_T; then
-  AC_DEFINE(USE_64_BIT_IDX_T, 1, [Define to 1 if using 64-bit integers for array dimensions and indexing.])
+  AC_DEFINE(USE_64_BIT_IDX_T, 1,
+    [Define to 1 if using 64-bit integers for array dimensions and indexing.])
 fi
 AC_SUBST(USE_64_BIT_IDX_T)
 
 ### It seems that there are some broken inline assembly functions in
 ### the GNU libc.  Since I'm not sure how to test whether we are using
 ### GNU libc, just disable them for all platforms.
 
 AC_MSG_NOTICE([defining __NO_MATH_INLINES avoids buggy GNU libc exp function])
-AC_DEFINE(__NO_MATH_INLINES, 1, [Define to 1 if your version of GNU libc has buggy inline assembly code for math functions like exp.])
+AC_DEFINE(__NO_MATH_INLINES, 1,
+  [Define to 1 if your version of GNU libc has buggy inline assembly code for math functions like exp.])
 
 ### Determine which C++ compiler to use (we expect to find g++).
 
 AC_PROG_CXX
 AC_PROG_CXXCPP
 
 ### Check version number when using g++.
 
-gxx_version=`$CXX -v 2>&1 | grep "^.*g.. version" | \
-  sed -e 's/^.*g.. version *//' -e 's/cygnus-//' -e 's/egcs-//' -e 's/ .*//'`
+CXX_VERSION=
+if test "$GXX" = yes; then
+  gxx_version=`$CXX -v 2>&1 | grep "^.*g.. version" | \
+    sed -e 's/^.*g.. version *//' -e 's/cygnus-//' -e 's/egcs-//' -e 's/ .*//'`
 
-case "$gxx_version" in
-  1.* | 2.[[0123456789]].* | 3.[[01234]].*)
-    AC_MSG_ERROR([g++ version $gxx_version will probably fail to compile Octave]
-)
-  ;;
-esac
-
-CXX_VERSION=
-if test -n "$gxx_version"; then
+  case "$gxx_version" in
+    1.* | 2.[[0123456789]].* | 3.[[01234]].*)
+      AC_MSG_ERROR([g++ version $gxx_version will probably fail to compile Octave])
+    ;;
+  esac
   CXX_VERSION="$gxx_version"
 fi
 AC_SUBST(CXX_VERSION)
 
 ### Determine which C compiler to use (we expect to find gcc).
 
 AC_PROG_CC
 AC_PROG_CPP
@@ -252,43 +255,43 @@ AC_PROG_GCC_TRADITIONAL
 ## Check for MSVC
 have_msvc=no
 case "$canonical_host_type" in
   *-*-msdosmsvc)
     have_msvc=yes
   ;;
   *-*-mingw*)
     AC_MSG_CHECKING([for MSVC compiler])
-    AC_PREPROC_IFELSE([AC_LANG_SOURCE([
-#ifndef _MSC_VER
-#error "Not MSVC compiler"
-#endif
-])], have_msvc=yes, have_msvc=no)
+    AC_PREPROC_IFELSE([AC_LANG_SOURCE([[
+        #ifndef _MSC_VER
+        #error "Not MSVC compiler"
+        #endif
+        ]])],
+      have_msvc=yes, have_msvc=no)
     AC_MSG_RESULT([$have_msvc])
   ;;
 esac
 
 ### gnulib initialization: part 1
 ### Must take place immediately after a compiler is determined
 
 gl_EARLY
 
 ### Check version number when using gcc.
 
-gcc_version=`$CC -v 2>&1 | grep "^.*gcc version" | \
-  sed -e 's/^.*g.. version *//' -e 's/cygnus-//' -e 's/egcs-//'`
-case "$gcc_version" in
-  [12].*)
-    warn_gcc_version="gcc version $gcc_version is likely to cause problems"
-    OCTAVE_CONFIGURE_WARNING([warn_gcc_version])
-  ;;
-esac
-
 CC_VERSION=
-if test -n "$gcc_version"; then
+if test "$GCC" = yes; then
+  gcc_version=`$CC -v 2>&1 | grep "^.*gcc version" | \
+    sed -e 's/^.*g.. version *//' -e 's/cygnus-//' -e 's/egcs-//'`
+  case "$gcc_version" in
+    [12].*)
+      warn_gcc_version="gcc version $gcc_version is likely to cause problems"
+      OCTAVE_CONFIGURE_WARNING([warn_gcc_version])
+    ;;
+  esac
   CC_VERSION="$gcc_version"
 fi
 AC_SUBST(CC_VERSION)
 
 ### Determine the compiler flag necessary to create dependencies
 
 ## Assume GCC.
 INCLUDE_DEPS=true
@@ -331,57 +334,48 @@ CXXFLAGS="$CXXFLAGS $PTHREAD_CFLAGS"
 ### floating-point intermediate results.
 ### Generally, it helps to store the result in a local volatile variable,
 ### but it also degrades performance.
 ### Thus, we provide a FLOAT_TRUNCATE macro that may be defined to "volatile"
 ### when compiling for x87 target, or left empty for modern SSE math, that
 ### doesn't suffer from this problem at all.
 AC_ARG_ENABLE(float-truncate,
   [AS_HELP_STRING([--enable-float-truncate],
-     [enables truncating intermediate FP results.])],
-  [if test "$enableval" = yes; then ac_float_truncate=volatile;
-   else ac_float_truncate=; fi],
-  ac_float_truncate=)
+    [enables truncating intermediate FP results.])],
+  [if test "$enableval" = yes; then
+     ac_float_truncate=volatile;
+   else
+     ac_float_truncate=;
+   fi],
+  [ac_float_truncate=])
 
 AC_DEFINE_UNQUOTED(FLOAT_TRUNCATE, $ac_float_truncate, 
-          [Define to volatile if you need to truncate intermediate FP results.])
+  [Define to volatile if you need to truncate intermediate FP results.])
 
 ### Determine extra CFLAGS that may be necessary for Octave.
 
 ## On Intel systems with gcc, we may need to compile with -mieee-fp
-## and -ffloat-store to get full support for IEEE floating point.
+## to get full support for IEEE floating point.
 ##
 ## On Alpha/OSF systems, we need -mieee.
 
 ieee_fp_flag=
 case "$canonical_host_type" in
-  ## Keep this pattern first, so that it is preferred over the
-  ## following pattern for x86.
   i[[3456789]]86-*-*)
     if test "$GCC" = yes; then
       OCTAVE_CC_FLAG(-mieee-fp, [
         ieee_fp_flag=-mieee-fp
         XTRA_CFLAGS="$XTRA_CFLAGS -mieee-fp"
         AC_MSG_NOTICE([adding -mieee-fp to XTRA_CFLAGS])])
-
-##      OCTAVE_CC_FLAG(-ffloat-store, [
-##        float_store_flag=-ffloat-store
-##        XTRA_CFLAGS="$XTRA_CFLAGS -ffloat-store"
-##        AC_MSG_RESULT([adding -ffloat-store to XTRA_CFLAGS])])
     fi
     if test "$GXX" = yes; then
       OCTAVE_CXX_FLAG(-mieee-fp, [
         ieee_fp_flag=-mieee-fp
         XTRA_CXXFLAGS="$XTRA_CXXFLAGS -mieee-fp"
         AC_MSG_NOTICE([adding -mieee-fp to XTRA_CXXFLAGS])])
-
-##      OCTAVE_CXX_FLAG(-ffloat-store, [
-##        float_store_flag=-ffloat-store
-##        XTRA_CXXFLAGS="$XTRA_CXXFLAGS -ffloat-store"
-##        AC_MSG_RESULT([adding -ffloat-store to XTRA_CXXFLAGS])])
     fi
   ;;
   alpha*-*-*)
     if test "$GCC" = yes; then
       OCTAVE_CC_FLAG(-mieee, [
         ieee_fp_flag=-mieee
         XTRA_CFLAGS="$XTRA_CFLAGS -mieee"
         AC_MSG_NOTICE([adding -mieee to XTRA_CFLAGS])])
@@ -416,26 +410,26 @@ AC_SUBST(XTRA_CFLAGS)
 AC_SUBST(XTRA_CXXFLAGS)
 
 ### Test whether the compiler supports OpenMP.  This is experimental so disable
 ### it by default.  Enable it with the flag --enable-openmp.
 
 USE_OPENMP=false
 AC_ARG_ENABLE(openmp,
   [AS_HELP_STRING([--enable-openmp],
-     [(EXPERIMENTAL) use OpenMP SMP multi-threading])],
+    [(EXPERIMENTAL) use OpenMP SMP multi-threading])],
   [if test "$enableval" = yes; then USE_OPENMP=true; fi], [])
 if $USE_OPENMP; then
   case "$canonical_host_type" in
     *-*-mingw* | *-*-cygwin* | *-*-gnu*)
-    OCTAVE_CHECK_OPENMP(-fopenmp)
+      OCTAVE_CHECK_OPENMP(-fopenmp)
     ;;
     *-*-msdosmsvc)
-    ## FIXME: is this the right flag for MSVC?
-    OCTAVE_CHECK_OPENMP(-openmp)
+      ## FIXME: is this the right flag for MSVC?
+      OCTAVE_CHECK_OPENMP(-openmp)
     ;;
     ## Add other compilers supporting OpenMP here
   esac
 fi
 
 ### Defaults for cross compiling.  BUILD_CC and BUILD_CXX are
 ### the compilers that we use for building tools on the build system.
 ### For now, we assume that the only cross compiling we can do is
@@ -464,22 +458,28 @@ else
   #      ## gendoc.cc unless we reduce the optimization level...
   #      ## BUILD_CXXFLAGS="-g -O1"
   #    fi
   #  ;;
   #esac
   BUILD_EXEEXT='$(EXEEXT)'
 fi
 
-AC_ARG_VAR(BUILD_CC, [build system C compiler (used if cross compiling)])
-AC_ARG_VAR(BUILD_CFLAGS, [build system C compiler flags (used if cross compiling)])
-AC_ARG_VAR(BUILD_CXX, [build system C++ compiler (used if cross compiling)])
-AC_ARG_VAR(BUILD_CXXFLAGS, [build system C++ compiler flags (used if cross compiling)])
-AC_ARG_VAR(BUILD_LDFLAGS, [build system C++ compiler link flags (used if cross compiling)])
-AC_ARG_VAR(BUILD_EXEEXT, [build system executable extension (used if cross compiling)])
+AC_ARG_VAR(BUILD_CC,
+  [build system C compiler (used if cross compiling)])
+AC_ARG_VAR(BUILD_CFLAGS,
+  [build system C compiler flags (used if cross compiling)])
+AC_ARG_VAR(BUILD_CXX,
+  [build system C++ compiler (used if cross compiling)])
+AC_ARG_VAR(BUILD_CXXFLAGS,
+  [build system C++ compiler flags (used if cross compiling)])
+AC_ARG_VAR(BUILD_LDFLAGS,
+  [build system C++ compiler link flags (used if cross compiling)])
+AC_ARG_VAR(BUILD_EXEEXT,
+  [build system executable extension (used if cross compiling)])
 
 dnl This is bogus.  We shouldn't have to explicitly add libc too!
 dnl Keep this check before the check for the Fortran compiler,
 dnl in case -lm is needed to compile Fortran programs.
 
 ### Look for math library.  If found, this will add -lm to LIBS.
 
 case "$canonical_host_type" in
@@ -517,17 +517,16 @@ esac
 case "$ac_cv_f77_mangling" in
   "no extra underscore") F77_APPEND_EXTRA_UNDERSCORE=false ;;
 esac
 
 case "$canonical_host_type" in
   i[[3456789]]86-*-*)
     if test "$ac_cv_f77_compiler_gnu" = yes; then
       OCTAVE_F77_FLAG(-mieee-fp)
-###      OCTAVE_F77_FLAG(-ffloat-store)
     fi
   ;;
   alpha*-*-*)
     if test "$ac_cv_f77_compiler_gnu" = yes; then
       OCTAVE_F77_FLAG(-mieee)
     else
       OCTAVE_F77_FLAG(-ieee)
       OCTAVE_F77_FLAG(-fpe1)
@@ -548,18 +547,18 @@ AC_SUBST(F77_APPEND_EXTRA_UNDERSCORE)
 
 if test -z "$F77"; then
   AC_MSG_ERROR([in order to build Octave, you must have a compatible Fortran compiler or wrapper script for f2c that functions as a Fortran compiler installed and in your path.  See the file INSTALL for more information.])
 fi
 
 OCTAVE_CHECK_FUNC_FORTRAN_ISNAN
 F77_ISNAN_MACRO=
 if test "x$octave_cv_func_fortran_isnan" = xno; then
-   AC_MSG_NOTICE([substituting ISNAN(X) with X.NE.X in Fortran sources])
-   F77_ISNAN_MACRO="s|ISNAN(\(@<:@^)@:>@*\))|(\1.NE.\1)|"
+  AC_MSG_NOTICE([substituting ISNAN(X) with X.NE.X in Fortran sources])
+  F77_ISNAN_MACRO="s|ISNAN(\(@<:@^)@:>@*\))|(\1.NE.\1)|"
 fi
 AC_SUBST(F77_ISNAN_MACRO)
 
 OCTAVE_CHECK_SIZEOF_FORTRAN_INTEGER
 if test "x$octave_cv_sizeof_fortran_integer" = xno; then
   if $USE_64_BIT_IDX_T; then
     case "$F77" in
       *gfortran*)
@@ -595,54 +594,57 @@ if test "x$octave_cv_sizeof_fortran_inte
   fi
 fi
 AC_SUBST(F77_INTEGER_8_FLAG)
 
 FC=$F77
 AC_SUBST(FC)
 
 OCTAVE_F77_FLAG(-ffloat-store, [
-AC_MSG_RESULT([setting F77_FLOAT_STORE_FLAG to -ffloat-store])
-F77_FLOAT_STORE_FLAG=-ffloat-store
-AC_SUBST(F77_FLOAT_STORE_FLAG)
+  AC_MSG_RESULT([setting F77_FLOAT_STORE_FLAG to -ffloat-store])
+  F77_FLOAT_STORE_FLAG=-ffloat-store
+  AC_SUBST(F77_FLOAT_STORE_FLAG)
 ])
 
 ### Check for the Qhull library
 
 OCTAVE_CHECK_LIB(qhull, QHull,
   [Qhull library not found -- this will result in loss of functionality of some geometry functions.],
-  [libqhull/libqhull.h qhull/libqhull.h libqhull.h qhull/qhull.h qhull.h], [qh_qhull], [], [],
+  [libqhull/libqhull.h qhull/libqhull.h libqhull.h qhull/qhull.h qhull.h],
+  [qh_qhull], [], [],
   [warn_qhull=
-   OCTAVE_CHECK_QHULL_VERSION
-   OCTAVE_CHECK_LIB_QHULL_OK([TEXINFO_QHULL="@set HAVE_QHULL"
-     AC_DEFINE(HAVE_QHULL, 1, [Define to 1 if Qhull is available.])], [
-     warn_qhull="Qhull library found, but does not seem to work properly -- this will result in loss of functionality of some geometry functions.  Please try recompiling the library with -fno-strict-aliasing."])])
+  OCTAVE_CHECK_QHULL_VERSION
+  OCTAVE_CHECK_LIB_QHULL_OK(
+    [TEXINFO_QHULL="@set HAVE_QHULL"
+    AC_DEFINE(HAVE_QHULL, 1, [Define to 1 if Qhull is available.])],
+    [warn_qhull="Qhull library found, but does not seem to work properly -- this will result in loss of functionality of some geometry functions.  Please try recompiling the library with -fno-strict-aliasing."])])
 
 ### Check for PCRE regex library.
 
 REGEX_LIBS=
 
 pcre_fail_msg="to build Octave, you must have the PCRE library and header files installed"
 
 AC_CHECK_HEADERS([pcre.h pcre/pcre.h])
 
 AC_CACHE_CHECK([whether pcre.h defines the macros we need],
   [ac_cv_pcre_h_macros_present],
   [AC_EGREP_CPP([PCRE_HAS_MACROS_WE_NEED], [
-#if defined (HAVE_PCRE_H)
-#include <pcre.h>
-#elif defined (HAVE_PCRE_PCRE_H)
-#include <pcre.h>
-#error "NO PCRE HEADER"
-#endif
-#if defined (PCRE_INFO_NAMECOUNT) \
-  && defined (PCRE_INFO_NAMEENTRYSIZE) \
-  && defined (PCRE_INFO_NAMETABLE)
-PCRE_HAS_MACROS_WE_NEED
-#endif], ac_cv_pcre_h_macros_present=yes, ac_cv_pcre_h_macros_present=no)])
+    #if defined (HAVE_PCRE_H)
+    # include <pcre.h>
+    #elif defined (HAVE_PCRE_PCRE_H)
+    # include <pcre.h>
+    #error "NO PCRE HEADER"
+    #endif
+    #if defined (PCRE_INFO_NAMECOUNT) \
+      && defined (PCRE_INFO_NAMEENTRYSIZE) \
+      && defined (PCRE_INFO_NAMETABLE)
+      PCRE_HAS_MACROS_WE_NEED
+    #endif],
+    ac_cv_pcre_h_macros_present=yes, ac_cv_pcre_h_macros_present=no)])
 
 if test $ac_cv_pcre_h_macros_present = yes; then
   ## check for pcre-config, and if so, set XTRA_CXXFLAGS appropriately
   AC_CHECK_PROG(HAVE_PCRE_CONFIG, pcre-config, [yes], [no])
   if test $HAVE_PCRE_CONFIG = yes; then
     XTRA_CXXFLAGS="$XTRA_CXXFLAGS `pcre-config --cflags`"
     REGEX_LIBS="`pcre-config --libs`"
   else
@@ -674,17 +676,17 @@ save_CXXFLAGS="$CXXFLAGS"
 save_LIBS="$LIBS"
 save_LDFLAGS="$LDFLAGS"
 
 warn_llvm="LLVM library fails tests.  JIT compilation will be disabled."
 
 AC_ARG_VAR(LLVM_CONFIG, [path to llvm-config utility])
 
 AC_ARG_ENABLE([jit-debug],
-  AS_HELP_STRING([--enable-jit-debug], [Enable debug printing of JIT IRs]))
+  AS_HELP_STRING([--enable-jit-debug], [enable debug printing of JIT IRs]))
 
 AS_IF([test "x$enable_jit_debug" = "xyes"], [
   AC_DEFINE(OCTAVE_JIT_DEBUG, 1, [Define to 1 for JIT debug printing.])
 ])
 
 LLVM_CXXFLAGS=
 LLVM_CPPFLAGS=
 LLVM_LDFLAGS=
@@ -712,23 +714,24 @@ if test "x$ac_cv_env_LLVM_CONFIG_set" = 
   CXXFLAGS="$LLVM_CXXFLAGS $CXXFLAGS"
   LIBS="$LLVM_LIBS $LIBS"
   LDFLAGS="$LLVM_LDFLAGS $LDFLAGS"
 
   AC_LANG_PUSH(C++)
     AC_CHECK_HEADER([llvm/LLVMContext.h], [
       AC_MSG_CHECKING([for llvm::getGlobalContext in llvm/LLVMContext.h])
         AC_COMPILE_IFELSE(
-          [AC_LANG_PROGRAM([[#include <llvm/LLVMContext.h>]],
-                           [[llvm::LLVMContext& ctx = llvm::getGlobalContext ();]])],
-          [
-           AC_MSG_RESULT([yes])
+          [AC_LANG_PROGRAM([[
+            #include <llvm/LLVMContext.h>
+            ]], [[
+            llvm::LLVMContext& ctx = llvm::getGlobalContext ();
+            ]])],
+          [AC_MSG_RESULT([yes])
            warn_llvm=
-           XTRA_CXXFLAGS="$XTRA_CXXFLAGS $LLVM_CXXFLAGS $LLVM_CPPFLAGS"
-          ],
+           XTRA_CXXFLAGS="$XTRA_CXXFLAGS $LLVM_CXXFLAGS $LLVM_CPPFLAGS"],
           [AC_MSG_RESULT([no])
       ])
     ])
   AC_LANG_POP(C++)
   
 else
   warn_llvm="LLVM_CONFIG not set.  JIT compilation will be disabled."
 fi
@@ -783,17 +786,17 @@ OCTAVE_CHECK_LIB(fftw3, FFTW3,
 
 OCTAVE_CHECK_LIB(fftw3f, FFTW3F,
   [FFTW3F library not found.  The slower FFTPACK library will be used instead.],
   [fftw3.h], [fftwf_plan_dft_1d])
 
 AM_CONDITIONAL([AMCOND_HAVE_FFTW],
   [test -n "$FFTW3_LIBS" && test -n "$FFTW3F_LIBS"])
 
-## Subdirectory of libcruft to build if FFTW is not found:
+## Subdirectory of libcruft to build if FFTW is not found.
 FFT_DIR="fftpack"
 AC_SUBST(FFT_DIR)
 
 ### Check for GLPK library and header.
 
 save_CPPFLAGS="$CPPFLAGS"
 CPPFLAGS="$Z_CPPFLAGS $CPPFLAGS"
 save_LIBS="$LIBS"
@@ -815,63 +818,63 @@ OCTAVE_CHECK_LIB(curl, cURL,
   [curl/curl.h], [curl_easy_escape])
 LIBS="$save_LIBS"
 CPPFLAGS="$save_CPPFLAGS"
 
 ### Check for either of Graphics/ImageMagick++ libraries
 
 AC_ARG_WITH([magick],
   [AS_HELP_STRING([--with-magick=LIB],
-    [select library to use for image I/O (options: GraphicsMagick(default) or ImageMagick)])], [
-  magick="$withval"], [
-  magick="GraphicsMagick"])
+    [select library to use for image I/O (options: GraphicsMagick(default) or ImageMagick)])],
+  [magick="$withval"],
+  [magick="GraphicsMagick"])
 
 warn_magick="$magick++ library not found.  The imread function for reading image files will not be fully functional."
 
 MAGICK_CPPFLAGS=
 MAGICK_LDFLAGS=
 MAGICK_LIBS=
 
 PKG_CHECK_EXISTS([$magick++], [
-  ## Make sure we only get -I, -L and -l flags.  Some Graphics/ImageMagick++
-  ## packages adds extra flags that are useful when building
+  ## Make sure we only get -I, -L, and -l flags.  Some Graphics/ImageMagick++
+  ## packages add extra flags that are useful when building
   ## Graphics/ImageMagick++ extentions.  These extra flags break the
   ## Octave build. 
   MAGICK_LDFLAGS=`$PKG_CONFIG --libs-only-L $magick++`
   MAGICK_LIBS=`$PKG_CONFIG --libs-only-l $magick++`
   MAGICK_CPPFLAGS=`$PKG_CONFIG --cflags-only-I $magick++`
 
   warn_magick="$magick++ library fails tests.  The imread function for reading image files will not be fully functional."
 
   save_CPPFLAGS="$CPPFLAGS"
   save_LIBS="$LIBS"
   CPPFLAGS="$MAGICK_CPPFLAGS $CPPFLAGS"
   LIBS="$MAGICK_LDFLAGS $MAGICK_LIBS $LIBS"
   AC_LANG_PUSH(C++)
     AC_CHECK_HEADER([Magick++.h], [
       AC_MSG_CHECKING([for Magick::ColorRGB in Magick++.h])
       AC_PREPROC_IFELSE(
-        [AC_LANG_SOURCE(
-          [[#include <Magick++.h>]],
-          [[Magick::ColorRGB c;]])
-        ], [
-          AC_MSG_RESULT(yes)
-          warn_magick=
-        ], [
-          AC_MSG_RESULT(no)
-        ]
+        [AC_LANG_SOURCE([[
+          #include <Magick++.h>
+          ]], [[
+          Magick::ColorRGB c;
+          ]])],
+        [AC_MSG_RESULT(yes)
+         warn_magick=],
+        [AC_MSG_RESULT(no)]
       )
     ])
   AC_LANG_POP(C++)
   CPPFLAGS="$save_CPPFLAGS"
   LIBS="$save_LIBS"
 ])
 
 if test -z "$warn_magick"; then
-  AC_DEFINE(HAVE_MAGICK, 1, [Define to 1 if Graphics/ImageMagick++ is available.])
+  AC_DEFINE(HAVE_MAGICK, 1,
+    [Define to 1 if Graphics/ImageMagick++ is available.])
 else
   MAGICK_CPPFLAGS=
   MAGICK_LDFLAGS=
   MAGICK_LIBS=
 fi
 AC_SUBST(MAGICK_CPPFLAGS)
 AC_SUBST(MAGICK_LDFLAGS)
 AC_SUBST(MAGICK_LIBS)
@@ -892,33 +895,36 @@ if test "$have_x" = "yes"; then
   elif test $x_libraries != "NONE"; then
     AC_CHECK_LIB(X11, XrmInitialize, 
       [X11_LIBS="-L$x_libraries -lX11"], [X11_LIBS=], "-L$x_libraries")
   fi
   AC_SUBST(X11_LIBS)
 fi
 
 ### Check for the Carbon framework on MacOSX systems
-OCTAVE_HAVE_FRAMEWORK(Carbon, [#include <Carbon/Carbon.h>], [CGMainDisplayID ()],
+OCTAVE_HAVE_FRAMEWORK(Carbon,
+  [[#include <Carbon/Carbon.h>]], [[CGMainDisplayID ()]],
   [have_framework_carbon="yes"], [have_framework_carbon="no"])
 if test $have_framework_carbon = "yes"; then
-  AC_DEFINE(HAVE_FRAMEWORK_CARBON, 1, [Define to 1 if framework CARBON is available.])
+  AC_DEFINE(HAVE_FRAMEWORK_CARBON, 1,
+    [Define to 1 if framework CARBON is available.])
   CARBON_LIBS="-Wl,-framework -Wl,Carbon"
   AC_MSG_NOTICE([adding -Wl,-framework -Wl,Carbon to CARBON_LIBS])
   AC_SUBST(CARBON_LIBS)
 fi
 
 ### Check for list of libraries needed for native graphics renderer.
 
 warn_freetype=""
 native_graphics=true
 
 check_opengl=false
 AC_ARG_WITH([opengl],
-  [AS_HELP_STRING([--without-opengl], [don't use OpenGL libraries, disable native graphics])],
+  [AS_HELP_STRING([--without-opengl],
+    [don't use OpenGL libraries, disable native graphics])],
   [if test "x$withval" = xno; then
      warn_opengl="--without-opengl specified.  Native graphics will be disabled."
      OCTAVE_CONFIGURE_WARNING([warn_opengl])
      native_graphics=false
    else
      check_opengl=true
    fi],
   [check_opengl=true])
@@ -939,56 +945,57 @@ if test -z "$OPENGL_LIBS"; then
   fi
 fi
 
 if test -n "$OPENGL_LIBS"; then
   AC_DEFINE(HAVE_OPENGL, 1, [Define to 1 if OpenGL is available.])
 
   ## Check for FreeType 2 library
 
-  AC_CHECK_FT2([9.0.3], [AC_DEFINE(HAVE_FREETYPE, 1, [Define to 1 if you have FreeType library.])
-    XTRA_CXXFLAGS="$XTRA_CXXFLAGS $FT2_CFLAGS"],
+  AC_CHECK_FT2([9.0.3],
+    [AC_DEFINE(HAVE_FREETYPE, 1, [Define to 1 if you have FreeType library.])
+     XTRA_CXXFLAGS="$XTRA_CXXFLAGS $FT2_CFLAGS"],
     [warn_freetype="FreeType library not found.  Native graphics will be disabled."])
 
   if test -n "$warn_freetype"; then
     OCTAVE_CONFIGURE_WARNING([warn_freetype])
     native_graphics=false
   fi
 
   ## Check for fontconfig library
 
   warn_fontconfig=""
   if test -z "$warn_freetype"; then
-    PKG_CHECK_MODULES(FONTCONFIG, [fontconfig], [
-      have_fontconfig=yes
-      OPENGL_LIBS="$FONTCONFIG_LIBS $OPENGL_LIBS"
-      XTRA_CXXFLAGS="$XTRA_CXXFLAGS $FONTCONFIG_CFLAGS"
-      AC_DEFINE(HAVE_FONTCONFIG, 1, [Define to 1 if fontconfig is present.])], [
-      have_fontconfig=no
-      warn_fontconfig="Fontconfig library not found.  Native graphics will be disabled."])
+    PKG_CHECK_MODULES(FONTCONFIG, [fontconfig],
+      [have_fontconfig=yes
+       OPENGL_LIBS="$FONTCONFIG_LIBS $OPENGL_LIBS"
+       XTRA_CXXFLAGS="$XTRA_CXXFLAGS $FONTCONFIG_CFLAGS"
+       AC_DEFINE(HAVE_FONTCONFIG, 1, [Define to 1 if fontconfig is present.])],
+      [have_fontconfig=no
+       warn_fontconfig="Fontconfig library not found.  Native graphics will be disabled."])
   fi
 
   if test -n "$warn_fontconfig"; then
     OCTAVE_CONFIGURE_WARNING([warn_fontconfig])
     native_graphics=false
   fi
 
   ## Check for FLTK (www.fltk.org) library
 
   AC_ARG_WITH([fltk-prefix], [
     AS_HELP_STRING([--with-fltk-prefix=PFX],
-      [Prefix where FLTK is installed (optional)])], [
-    fltk_prefix="$withval"], [
-    fltk_prefix=""])
+      [prefix where FLTK is installed (optional)])],
+    [fltk_prefix="$withval"],
+    [fltk_prefix=""])
 
   AC_ARG_WITH([fltk-exec-prefix], [
     AS_HELP_STRING([--with-fltk-exec-prefix=PFX],
-      [Exec prefix where FLTK is installed (optional)])], [
-    fltk_exec_prefix="$withval"], [
-    fltk_exec_prefix=""])
+      [exec prefix where FLTK is installed (optional)])],
+    [fltk_exec_prefix="$withval"],
+    [fltk_exec_prefix=""])
 
   if test -n "$fltk_exec_prefix"; then
     fltk_args="$fltk_args --exec-prefix=$fltk_exec_prefix"
     if test "x${FLTK_CONFIG+set}" != xset ; then
       FLTK_CONFIG="$fltk_exec_prefix/bin/fltk-config"
     fi
   fi
 
@@ -1018,23 +1025,20 @@ if test -n "$OPENGL_LIBS"; then
       ;;
     esac
 
     AC_MSG_CHECKING([for OpenGL support in FLTK])
     save_CFLAGS="$CFLAGS"
     CFLAGS="$CFLAGS $FLTK_CFLAGS"
     AC_COMPILE_IFELSE(
       [AC_LANG_PROGRAM([[#include <FL/gl.h>]], [[int nothing = 0;]])],
-        [
-         AC_MSG_RESULT([no])
-         warn_fltk_opengl="FLTK does not have OpenGL support.  Native graphics will be disabled."
-        ],[
-         AC_DEFINE(HAVE_FLTK, 1, [Define to 1 if FLTK is available.])
-         AC_MSG_RESULT([yes])
-        ])
+      [AC_MSG_RESULT([no])
+       warn_fltk_opengl="FLTK does not have OpenGL support.  Native graphics will be disabled."],
+      [AC_MSG_RESULT([yes])
+       AC_DEFINE(HAVE_FLTK, 1, [Define to 1 if FLTK is available.])])
          
     if test -z "$warn_fltk_opengl"; then
       GRAPHICS_CFLAGS="$FLTK_CFLAGS"
       GRAPHICS_LIBS="$FLTK_LDFLAGS"
     else
       OCTAVE_CONFIGURE_WARNING([warn_fltk_opengl])
       native_graphics=false
     fi
@@ -1119,44 +1123,45 @@ fi
 ## On OSX, try again with a wrapper library (without -ff2c!)
 if test "x$ax_blas_f77_func_ok" = "xno"; then
   case "$canonical_host_type" in
     *-*-darwin*)
       ## test if wrapper functions help
       octave_blaswrap_save_CFLAGS="$CFLAGS"
       CFLAGS="$CFLAGS -DUSE_BLASWRAP"
       AC_LANG_PUSH(C)
-      AC_COMPILE_IFELSE([AC_LANG_SOURCE([
-#include "libcruft/misc/blaswrap.c"
-])],
-       [mv conftest.$ac_objext blaswrap.$ac_objext
-        octave_blaswrap_save_BLAS_LIBS="$BLAS_LIBS"
-        BLAS_LIBS="blaswrap.$ac_objext -framework vecLib"
+      AC_COMPILE_IFELSE([AC_LANG_SOURCE([[
+          #include "libcruft/misc/blaswrap.c"
+        ]])],
+        [mv conftest.$ac_objext blaswrap.$ac_objext
+         octave_blaswrap_save_BLAS_LIBS="$BLAS_LIBS"
+         BLAS_LIBS="blaswrap.$ac_objext -framework vecLib"
 
-        save_FFLAGS="$FFLAGS"
-        FFLAGS="$FFLAGS $F77_INTEGER_8_FLAG"
+         save_FFLAGS="$FFLAGS"
+         FFLAGS="$FFLAGS $F77_INTEGER_8_FLAG"
 
-        AX_BLAS_WITH_F77_FUNC([:], [:])
-        AX_LAPACK([:], [:])
+         AX_BLAS_WITH_F77_FUNC([:], [:])
+         AX_LAPACK([:], [:])
 
-        ## Restore FFLAGS.
-        FFLAGS="$save_FFLAGS"
+         ## Restore FFLAGS.
+         FFLAGS="$save_FFLAGS"
 
-        ## remove temp file
-        rm -f blaswrap.$ac_objext],
-       [AC_MSG_FAILURE([cannot compile libcruft/misc/blaswrap.c])])
+         ## remove temp file
+         rm -f blaswrap.$ac_objext],
+        [AC_MSG_FAILURE([cannot compile libcruft/misc/blaswrap.c])])
       AC_LANG_POP(C)
       CFLAGS="$octave_blaswrap_save_CFLAGS"
 
       if test "x$ax_blas_f77_func_ok" = "xno"; then
         BLAS_LIBS="$octave_blaswrap_save_BLAS_LIBS"
       else
         ## wrapper in libcruft, remove from BLAS_LIBS
         BLAS_LIBS="`echo $BLAS_LIBS | sed -e 's/blaswrap.[[^ ]]* //g'`"
-        AC_DEFINE(USE_BLASWRAP, 1, [Define to 1 if BLAS functions need to be wrapped (potentially needed for 64-bit OSX only).])
+        AC_DEFINE(USE_BLASWRAP, 1,
+          [Define to 1 if BLAS functions need to be wrapped (potentially needed for 64-bit OSX only).])
       fi
     ;;
   esac
 fi
 
 if test "x$ax_blas_f77_func_ok" = "xno"; then
   if $USE_64_BIT_IDX_T && test "$ax_blas_integer_size_ok" = "no" ; then
     ## Attempt to be more informative.
@@ -1182,18 +1187,17 @@ OCTAVE_CHECK_LIB(qrupdate, qrupdate,
   [sqr1up],
   [Fortran 77], [don't use qrupdate, disable QR & Cholesky updating functions])
 
 if test "$octave_qrupdate_ok" = yes; then
   LIBS="$LIBS $QRUPDATE_LIBS"
   AC_LANG_PUSH([Fortran 77])
   AC_MSG_CHECKING([for slup1up in $QRUPDATE_LIBS])
   octave_qrupdate_luu=no
-  AC_LINK_IFELSE([AC_LANG_CALL([], [slup1up])],
-  [octave_qrupdate_luu=yes])
+  AC_LINK_IFELSE([AC_LANG_CALL([], [slup1up])], [octave_qrupdate_luu=yes])
   AC_MSG_RESULT([$octave_qrupdate_luu])
   if test "$octave_qrupdate_luu" = yes; then
     AC_DEFINE(HAVE_QRUPDATE_LUU, 1, [Define to 1 if qrupdate supports LU updates.])
   fi
   AC_LANG_POP([Fortran 77])
 fi
 LIBS="$save_LIBS"
 
@@ -1291,38 +1295,39 @@ fi
 save_LIBS="$LIBS"
 LIBS="$LAPACK_LIBS $BLAS_LIBS $FLIBS $LIBS"
 OCTAVE_CHECK_LIB(arpack, ARPACK,
   [ARPACK not found.  The eigs function will be disabled.],
   [],
   [dseupd],
   [Fortran 77], [don't use the ARPACK library, disable eigs function],
   [warn_arpack=
-   OCTAVE_CHECK_LIB_ARPACK_OK([
-     AC_DEFINE(HAVE_ARPACK, 1, [Define to 1 if ARPACK is available.])], [
-     warn_arpack="ARPACK library found, but does not seem to work properly -- disabling eigs function"])])
+   OCTAVE_CHECK_LIB_ARPACK_OK(
+     [AC_DEFINE(HAVE_ARPACK, 1, [Define to 1 if ARPACK is available.])],
+     [warn_arpack="ARPACK library found, but does not seem to work properly -- disabling eigs function"])])
 LIBS="$save_LIBS"
 
 ### Check for readline library.
 
 OCTAVE_ENABLE_READLINE
 
 ### Enable dynamic linking.  --enable-shared implies this, so
 ### --enable-dl is only need if you are only building static libraries
 ### and want to try dynamic linking too (works on some systems, for
 ### example, OS X and Windows).
 
 AC_ARG_ENABLE([dl],
   [AS_HELP_STRING([--enable-dl],
-    [allow loading of dynamically linked modules (not all systems)])], [
-  case "${enableval}" in
-    yes) ENABLE_DYNAMIC_LINKING=true ;;
-    no) ENABLE_DYNAMIC_LINKING=false ;;
-    *) AC_MSG_ERROR([bad value ${enableval} for --enable-dl]) ;;
-  esac], [ENABLE_DYNAMIC_LINKING=true])
+    [allow loading of dynamically linked modules (not all systems)])],
+  [case "${enableval}" in
+     yes) ENABLE_DYNAMIC_LINKING=true ;;
+     no) ENABLE_DYNAMIC_LINKING=false ;;
+     *) AC_MSG_ERROR([bad value ${enableval} for --enable-dl]) ;;
+   esac],
+  [ENABLE_DYNAMIC_LINKING=true])
 
 if $STATIC_LIBS || $SHARED_LIBS; then
   true
 else
   AC_MSG_ERROR([You can't disable building static AND shared libraries!])
 fi
 
 CPICFLAG=-fPIC
@@ -1610,30 +1615,32 @@ AC_SUBST(library_path_var)
 AC_SUBST(ldpreloadsep)
 
 ### More configure argument checking related to linking
 
 AC_ARG_ENABLE([no-undefined],
   [AS_HELP_STRING([--enable-no-undefined],
     [pass -no-undefined to libtool when linking Octave and its shared libraries (on by default)])],
   [case "${enableval}" in
-    yes) NO_UNDEFINED_LDFLAG="-no-undefined" ;;
-    no)  NO_UNDEFINED_LDFLAG="" ;;
-    *) AC_MSG_ERROR([bad value ${enableval} for --enable-link-all-depenencies]) ;;
-   esac], [NO_UNDEFINED_LDFLAG="-no-undefined"])
+     yes) NO_UNDEFINED_LDFLAG="-no-undefined" ;;
+     no)  NO_UNDEFINED_LDFLAG="" ;;
+     *) AC_MSG_ERROR([bad value ${enableval} for --enable-link-all-depenencies]) ;;
+   esac],
+  [NO_UNDEFINED_LDFLAG="-no-undefined"])
 AC_SUBST(NO_UNDEFINED_LDFLAG)
 
 AC_ARG_ENABLE([link-all-dependencies],
   [AS_HELP_STRING([--enable-link-all-dependencies],
     [link Octave and its shared libraries with all dependencies, not just those immediately referenced (should not be needed on most systems)])],
   [case "${enableval}" in
-    yes) link_all_deps=true ;;
-    no)  link_all_deps=false ;;
-    *) AC_MSG_ERROR([bad value ${enableval} for --enable-link-all-depenencies]) ;;
-   esac], [link_all_deps=false])
+     yes) link_all_deps=true ;;
+     no)  link_all_deps=false ;;
+     *) AC_MSG_ERROR([bad value ${enableval} for --enable-link-all-depenencies]) ;;
+   esac],
+  [link_all_deps=false])
 AM_CONDITIONAL([AMCOND_LINK_ALL_DEPS], [test x$link_all_deps = xtrue])
 
 ## Dynamic linking is now enabled only if we are building shared
 ## libs and some API for dynamic linking has been detected.
 
 ## FIXME: A lot of the following duplicates the functionality of
 ## code generated by the dlopen option for LT_INIT.
 
@@ -1646,33 +1653,37 @@ loadlibrary_api=false
 dyld_api=false
 
 if $SHARED_LIBS || $ENABLE_DYNAMIC_LINKING; then
 
   case "$lt_cv_dlopen" in
     dlopen)
       dlopen_api=true
       DL_API_MSG="(dlopen)"
-      AC_DEFINE(HAVE_DLOPEN_API, 1, [Define to 1 if your system has dlopen, dlsym, dlerror, and dlclose for dynamic linking.])
+      AC_DEFINE(HAVE_DLOPEN_API, 1,
+        [Define to 1 if your system has dlopen, dlsym, dlerror, and dlclose for dynamic linking.])
       OCTAVE_CXX_FLAG(-rdynamic, [RDYNAMIC_FLAG=-rdynamic])
     ;;
     shl_load)
       shl_load_api=true
       DL_API_MSG="(shl_load)"
-      AC_DEFINE(HAVE_SHL_LOAD_API, 1, [Define to 1 if your system has shl_load and shl_findsym for dynamic linking.])
+      AC_DEFINE(HAVE_SHL_LOAD_API, 1,
+        [Define to 1 if your system has shl_load and shl_findsym for dynamic linking.])
     ;;
     LoadLibrary)
       loadlibrary_api=true
       DL_API_MSG="(LoadLibrary)"
-      AC_DEFINE(HAVE_LOADLIBRARY_API, 1, [Define to 1 if your system has LoadLibrary for dynamic linking.])
+      AC_DEFINE(HAVE_LOADLIBRARY_API, 1,
+        [Define to 1 if your system has LoadLibrary for dynamic linking.])
     ;;
     dyld)
       dyld_api=true
       DL_API_MSG="(dyld)"
-      AC_DEFINE(HAVE_DYLD_API, 1, [Define to 1 if your system has dyld for dynamic linking.])
+      AC_DEFINE(HAVE_DYLD_API, 1,
+        [Define to 1 if your system has dyld for dynamic linking.])
     ;;
   esac
 
   DL_LIBS="$lt_cv_dlopen_libs"
   AC_SUBST(DL_LIBS)
 
   ## Disable dynamic linking if capability is not present.
   if $dlopen_api || $shl_load_api || $loadlibrary_api || $dyld_api; then
@@ -1685,19 +1696,19 @@ fi
 if $ENABLE_DYNAMIC_LINKING; then
   AC_DEFINE(ENABLE_DYNAMIC_LINKING, 1, [Define to 1 if using dynamic linking.])
 fi
 
 AM_CONDITIONAL([AMCOND_ENABLE_DYNAMIC_LINKING],
   [test x$ENABLE_DYNAMIC_LINKING = xtrue])
 
 if $SHARED_LIBS; then
-   LIBOCTINTERP=-loctinterp$SHLLINKEXT
-   LIBOCTAVE=-loctave$SHLLINKEXT
-   LIBCRUFT=-lcruft$SHLLINKEXT
+  LIBOCTINTERP=-loctinterp$SHLLINKEXT
+  LIBOCTAVE=-loctave$SHLLINKEXT
+  LIBCRUFT=-lcruft$SHLLINKEXT
 else
   LIBOCTINTERP='$(top_builddir)/src/liboctinterp.$(LIBEXT)'
   LIBOCTAVE='$(top_builddir)/liboctave/liboctave.$(LIBEXT)'
   LIBCRUFT='$(top_builddir)/libcruft/libcruft.$(LIBEXT)'
 fi
 
 AC_SUBST(LD_CXX)
 AC_SUBST(RDYNAMIC_FLAG)
@@ -1934,68 +1945,78 @@ case "$canonical_host_type" in
     AC_CHECK_FUNCS(finite isnan isinf signbit)
     AC_CHECK_FUNCS(_finite _isnan)
     AC_CHECK_DECLS(signbit, , , [#include <math.h>])
   ;;
 esac
 
 ## Check for nonstandard, but common math functions, that we need.
 
-AC_CHECK_FUNCS(acosh acoshf asinh asinhf atanh atanhf erf erff erfc erfcf exp2f log2 log2f)
-AC_CHECK_FUNCS(hypotf _hypotf cbrt cbrtf)
+AC_CHECK_FUNCS(acosh acoshf asinh asinhf atanh atanhf cbrt cbrtf erf erff \
+  erfc erfcf exp2f hypotf _hypotf log2 log2f)
 
 ## MinGW exception for mkstemp
 case "$canonical_host_type" in
   *-*-mingw*)
     ## MinGW does not provide a mkstemp function.  However, it provides
     ## the mkstemps function in libiberty.
     AC_MSG_CHECKING([for mkstemps in libiberty])
     save_LIBS="$LIBS"
     LIBS="-liberty $LIBS"
     AC_LINK_IFELSE([
-      AC_LANG_PROGRAM([[int mkstemps (char *pattern, int suffix_len);]], 
-       [[mkstemps ("XXXXXX", 0);]]
-    )],
+      AC_LANG_PROGRAM([[
+        int mkstemps (char *pattern, int suffix_len);
+        ]], [[
+        mkstemps ("XXXXXX", 0);
+        ]]
+      )],
     [AC_MSG_RESULT(yes)
      HAVE_MKSTEMPS=yes
-     AC_DEFINE(HAVE_MKSTEMPS, 1, [Define to 1 if mkstemps is available in libiberty.])
+     AC_DEFINE(HAVE_MKSTEMPS, 1,
+       [Define to 1 if mkstemps is available in libiberty.])
     ],
     [AC_MSG_RESULT(no)
      HAVE_MKSTEMPS=no
      LIBS="$save_LIBS"
     ])
    ;;
 esac
 
 ## Windows-specific tests for extra #defines
 case "$canonical_host_type" in
   *-*-msdosmsvc | *-*-mingw*)
     AC_MSG_CHECKING([for required _WIN32_WINNT])
     AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[
-#include <windows.h>
-#if _WIN32_WINNT < 0x0403
-#error "Wrong version"
-#endif]], [])],
-      AC_MSG_RESULT([none]), [
-        AC_DEFINE(_WIN32_WINNT, 0x0403, [Define to 0x0403 to access InitializeCriticalSectionAndSpinCount.])
-        AC_MSG_RESULT([0x0403])])
+        #include <windows.h>
+        #if _WIN32_WINNT < 0x0403
+        #error "Wrong version"
+        #endif
+        ]], [])],
+      [AC_MSG_RESULT([none])],
+      [AC_DEFINE(_WIN32_WINNT, 0x0403,
+        [Define to 0x0403 to access InitializeCriticalSectionAndSpinCount.])
+       AC_MSG_RESULT([0x0403])])
     AC_MSG_CHECKING([whether _USE_MATH_DEFINES needs to be defined])
-    AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[#include <math.h>]],
-[[int x = M_LN2;]])],
-      AC_MSG_RESULT([no]), [
-        AC_DEFINE(_USE_MATH_DEFINES, 1, [Define to 1 if your system needs to define math constants like M_LN2.])
+    AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[
+        #include <math.h>
+        ]], [[
+        int x = M_LN2;]])],
+      [AC_MSG_RESULT([no])],
+      [AC_DEFINE(_USE_MATH_DEFINES, 1,
+        [Define to 1 if your system needs to define math constants like M_LN2.])
         AC_MSG_RESULT([yes])])
   ;;
 esac
 
 ## Cygwin kluge for getrusage.
 AC_CHECK_FUNCS(getrusage)
 case "$canonical_host_type" in
   *-*-cygwin*)
-    AC_DEFINE(RUSAGE_TIMES_ONLY, 1, [Define to 1 if your struct rusage only has time information.])
+    AC_DEFINE(RUSAGE_TIMES_ONLY, 1,
+      [Define to 1 if your struct rusage only has time information.])
   ;;
 esac
 
 ## Check for CGDisplayBitsPerPixel function on Mac OSX systems with Carbon
 if test $have_framework_carbon = "yes"; then
   OCTAVE_CARBON_CGDISPLAYBITSPERPIXEL
 fi
 
@@ -2021,22 +2042,22 @@ AC_CACHE_CHECK([for struct exception in 
 if test $octave_cv_func_matherr_type = "yes"; then
   AC_DEFINE(EXCEPTION_IN_MATH, 1,
     [Define to 1 if math.h declares struct exception for matherr().])
 fi
  
 ## Signal stuff.
 
 AC_CHECK_DECLS([sys_siglist], [], [],
-[#include <signal.h>
+[[#include <signal.h>
 /* NetBSD declares sys_siglist in unistd.h.  */
 #if HAVE_UNISTD_H
 # include <unistd.h>
 #endif
-])
+]])
 
 ### Checks for other programs used in building, testing, installing, and
 ### running Octave.
 
 AC_PROG_AWK
 OCTAVE_PROG_FIND
 OCTAVE_PROG_SED
 OCTAVE_PROG_PERL
@@ -2094,20 +2115,21 @@ AC_SUBST(UGLY_DEFS)
 GCC_EXTRA_FLAGS="-Wall -W -Wshadow -Wformat -Wpointer-arith -Wmissing-prototypes -Wstrict-prototypes -Wwrite-strings -Wcast-align -Wcast-qual"
 
 GXX_EXTRA_FLAGS="-Wall -W -Wshadow -Wold-style-cast -Wformat -Wpointer-arith -Wwrite-strings -Wcast-align -Wcast-qual"
 
 try_extra_warning_flags=true
 
 AC_ARG_ENABLE(extra-warning-flags,
   [AS_HELP_STRING([--enable-extra-warning-flags],
-     [add -Wall, -W, -Wshadow, and -Wold-style-cast options to CFLAGS and CXXFLAGS  (on by default, but only if the compiler appears to accept them)])],
+    [add -Wall, -W, -Wshadow, and -Wold-style-cast options to CFLAGS and CXXFLAGS  (on by default, but only if the compiler appears to accept them)])],
   [if test "$enableval" = no; then
      try_extra_warning_flags=false
-   fi], [])
+   fi],
+  [])
 
 if $try_extra_warning_flags; then
   for flag in $GCC_EXTRA_FLAGS; do
     OCTAVE_CC_FLAG($flag, [
       WARN_CFLAGS="$WARN_CFLAGS $flag";
       AC_MSG_RESULT([adding $flag to WARN_CFLAGS])])
   done
   for flag in $GXX_EXTRA_FLAGS; do
@@ -2120,20 +2142,21 @@ fi
 GCC_STRICT_FLAGS="-Wconversion"
 
 GXX_STRICT_FLAGS="-Wconversion -Weffc++"
 
 try_strict_warning_flags=false
 
 AC_ARG_ENABLE(strict-warning-flags,
   [AS_HELP_STRING([--enable-strict-warning-flags],
-     [add extra strict warning options to CFLAGS and CXXFLAGS (off by default)])],
+    [add extra strict warning options to CFLAGS and CXXFLAGS (off by default)])],
   [if test "$enableval" = yes; then
      try_strict_warning_flags=true
-   fi], [])
+   fi],
+  [])
 
 if $try_strict_warning_flags; then
   for flag in $GCC_STRICT_FLAGS; do
     OCTAVE_CC_FLAG($flag, [
       WARN_CFLAGS="$WARN_CFLAGS $flag";
       AC_MSG_RESULT([adding $flag to WARN_CFLAGS])])
   done
   for flag in $GXX_STRICT_FLAGS; do
@@ -2162,41 +2185,45 @@ if test $build_gui = yes; then
   if test -n "$QMAKE"; then
     QT_INCDIR=`$QMAKE -query | sed -n -e 's/^QT_INSTALL_HEADERS://p'`
     QT_LIBDIR=`$QMAKE -query | sed -n -e 's/^QT_INSTALL_LIBS://p'`
     AC_CHECK_PROGS(MOC, [moc moc-qt4 moc-qt5])
     AC_CHECK_PROGS(UIC, [uic uic-qt4 uic-qt5])
     AC_CHECK_PROGS(RCC, [rcc])
     if test -n "$MOC" && test -n "$UIC" && test -n "$RCC"; then
       HAVE_QT=true
-      AC_DEFINE([HAVE_QT], 1, [Define to 1 if Qt is available (must have moc, uic, and rcc programs and developer header files and libraries installed)])
+      AC_DEFINE(HAVE_QT, 1, 
+        [Define to 1 if Qt is available (must have moc, uic, and rcc programs and developer header files and libraries installed).])
     fi
   fi
 
   case "$canonical_host_type" in
     *-*-mingw* | *-*-msdosmsvc*) win32_terminal=yes ;;
     *)
       AC_CHECK_HEADERS([pty.h libutil.h util.h])
-      AC_SEARCH_LIBS([openpty], [util], [AC_DEFINE([HAVE_OPENPTY], [], [Define whether openpty exists])])
+      AC_SEARCH_LIBS([openpty], [util],
+        [AC_DEFINE(HAVE_OPENPTY, [], [Define whether openpty exists])])
       ;;
   esac
 fi
 AM_CONDITIONAL([AMCOND_BUILD_GUI], [test $build_gui = yes])
 AM_CONDITIONAL([WIN32_TERMINAL], [test $win32_terminal = yes])
 AC_SUBST(QT_INCDIR)
 AC_SUBST(QT_LIBDIR)
 
 ### Run configure in subdirectories.
 
 export CC
 export CXX
 export F77
 
 ### Some things to add to the bottom of config.h.
 
+dnl ------------------------------------------------------------
+
 AH_BOTTOM([
 #if !defined (GNULIB_NAMESPACE)
 #define GNULIB_NAMESPACE gnulib
 #endif
 
 #if defined (__GNUC__)
 #define GCC_ATTR_DEPRECATED __attribute__ ((__deprecated__))
 #define HAVE_ATTR_DEPRECATED
@@ -2340,16 +2367,19 @@ typedef unsigned long ino_t;
 typedef OCTAVE_IDX_TYPE octave_idx_type;
 
 #include <stdint.h>
 
 /* Tag indicating Octave config.h has been included */
 #define OCTAVE_CONFIG_INCLUDED 1
 ])
 
+dnl end of AH_BOTTOM
+dnl ------------------------------------------------------------
+
 ### Do the substitutions in all the Makefiles.
 
 AC_SUBST(ac_config_files)
 AC_SUBST(ac_config_headers)
 
 AC_CONFIG_FILES([
   Makefile 
   doc/Makefile
