# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1491505602 14400
#      Thu Apr 06 15:06:42 2017 -0400
# Node ID 42bd10feedfac170b0aca258630c610a52c989bc
# Parent  426b593b4b6b2e94f41de4060b04f1706f78c954
use new hex2num and num2hex features to simplify +containers.Map key encoding

* +containers/Map.m (encode_keys): Simplify with new num2hex features.
(decode_keys): Simplify with new hex2num features.

diff --git a/scripts/+containers/Map.m b/scripts/+containers/Map.m
--- a/scripts/+containers/Map.m
+++ b/scripts/+containers/Map.m
@@ -474,49 +474,26 @@ classdef Map < handle
         if (! all (cellfun ("isclass", keys, this.KeyType)))
           ## Convert input set to KeyType.  This is rarely necessary.
           keys = cellfun (@(x) feval (this.KeyType, x), keys,
                           "UniformOutput", true);
         else
           keys = cell2mat (keys);
         endif
       endif
-      ## FIXME: Replace with csprintf when it becomes available.
-      ## Use explicit width in format to ensure that we print all digits
-      ## even when there are leading zeros.
-      if (any (strcmp (this.KeyType, {"single", "int32", "uint32"})))
-        keytype = "uint32";
-        fmt = "%0.8X|";
-      else
-        keytype = "uint64";
-        fmt = "%0.16X|";
-      endif
-      keys = ostrsplit (sprintf (fmt, typecast (keys, keytype)), "|", true);
+      keys = num2hex (keys);
       if (! cell_input)
         keys = char (keys);
       endif
-
     endfunction
 
     function keys = decode_keys (this, keys)
       if (this.numeric_keys)
-        ## Since we typecast the key to uint32 or uint64 before
-        ## converting to hex, it would probably be better if hex2num
-        ## could return uint32 or uint64 directly, then we could
-        ## typecast back to other types.
-        if (any (strcmp (this.KeyType, {"single", "int32", "uint32"})))
-          keytype = "single";
-        else
-          keytype = "double";
-        endif
-        keys = hex2num (keys, keytype);
-        if (! strcmp (this.KeyType, keytype))
-          keys = typecast (keys, this.KeyType);
-        endif
-        keys = mat2cell (keys.', 1, ones (numel (keys), 1));
+        keys = hex2num (keys, this.KeyType);
+        keys = mat2cell (keys(:)', 1, ones (numel (keys), 1));
       endif
     endfunction
 
     function this = sort_keys (this)
       keySet = keys (this);
       if (this.numeric_keys)
         [~, p] = sort (cell2mat (keySet));
       else
