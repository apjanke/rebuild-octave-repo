# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1481740028 18000
#      Wed Dec 14 13:27:08 2016 -0500
# Node ID 5521b8a271aeca1a6787dbe4b00dee0f5225483c
# Parent  953232868883f25765ce76143b021d1c3f9b9a45
rewrite mk-builtins script in Perl

* build-aux/mk-builtins.pl: New file, adapted from mk-builtins.sh.
* build-aux/mk-builtins.sh: Delete.
* Makefile.am (EXTRA_DIST): Add it to the list.
* libinterp/module.mk: Update for new file name.

diff --git a/Makefile.am b/Makefile.am
--- a/Makefile.am
+++ b/Makefile.am
@@ -114,17 +114,17 @@ EXTRA_DIST += \
   NEWS \
   README \
   build-aux/OctJavaQry.class \
   build-aux/OctJavaQry.java \
   build-aux/changelog.tmpl \
   build-aux/check-subst-vars.in.sh \
   build-aux/find-defun-files.sh \
   build-aux/find-files-with-tests.sh \
-  build-aux/mk-builtins.sh \
+  build-aux/mk-builtins.pl \
   build-aux/mk-default-qt-settings.in.sh \
   build-aux/mk-f77-def.in.sh \
   build-aux/mk-hg-id.sh \
   build-aux/mk-mxarray-h.in.sh \
   build-aux/mk-octave-config-h.sh \
   build-aux/mk-opts.pl \
   build-aux/mk-version-h.in.sh \
   build-aux/move-if-change \
diff --git a/build-aux/mk-builtins.sh b/build-aux/mk-builtins.pl
rename from build-aux/mk-builtins.sh
rename to build-aux/mk-builtins.pl
--- a/build-aux/mk-builtins.sh
+++ b/build-aux/mk-builtins.pl
@@ -1,9 +1,9 @@
-#! /bin/sh
+#! /usr/bin/perl -w
 #
 # Copyright (C) 1996-2016 John W. Eaton
 #
 # This file is part of Octave.
 #
 # Octave is free software; you can redistribute it and/or modify it
 # under the terms of the GNU General Public License as published by
 # the Free Software Foundation; either version 3 of the License, or
@@ -13,212 +13,255 @@
 # WITHOUT ANY WARRANTY; without even the implied warranty of
 # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 # GNU General Public License for more details.
 #
 # You should have received a copy of the GNU General Public License
 # along with Octave; see the file COPYING.  If not, see
 # <http://www.gnu.org/licenses/>.
 
-set -e
-
-SED=${SED:-sed}
+$defun_dld_are_built_in = 0;
+$make_header = 0;
+$make_source = 0;
 
-defun_dld_are_built_in=false
-make_header=false
-make_source=false
+$have_options = 1;
+
+while ($have_options)
+{
+  $opt = shift (@ARGV);
 
-for arg
-do
-  case "$arg" in
-    --header)
-      if $make_source; then
-        echo "mk-builtins.sh: only one of --header or --source may be specified" 1>&2
-        exit 1
-      fi
-      make_header=true
-      shift
-    ;;
-    --source)
-      if $make_header; then
-        echo "mk-builtins.sh: only one of --header or --source may be specified" 1>&2
-        exit 1
-      fi
-      make_source=true
-      shift
-    ;;
-    --disable-dl)
+  if ($opt eq "--header")
+    {
+      die "mk-builtins.pl: only one of --header or --source may be specified" if ($make_source);
+
+      $make_header = 1;
+    }
+  elsif ($opt eq "--source")
+    {
+      die "mk-builtins.pl: only one of --header or --source may be specified" if ($make_header);
+
+      $make_source = 1;
+    }
+  elsif ($opt eq "--disable-dl")
+    {
       ## If DLD functions are disabled, then DEFUN_DLD functions are
       ## built-in instead of being dynamically loaded so they will also
       ## need to be installed.
-      defun_dld_are_built_in=true
-      shift
-    ;;
-    *)
-      srcdir="$arg"
-      shift
-      if [ "x$1" = "x--" ]; then
-        shift
-        break
-      else
-        echo "mk-builtins.sh: '--' must separate SRCDIR from other file names" 1>&2
-        exit 1
-      fi
-    ;;
-  esac
-done
+      $defun_dld_are_built_in= 1;
+    }
+  else
+    {
+      $srcdir = "$opt";
+      $opt = shift (@ARGV);
+      die "mk-builtins.pl: '--' must separate SRCDIR from other file names" if ($opt ne "--");
+      $have_options = 0;
+    }
+}
 
-if [ $# -eq 0 ]; then
-  echo "usage: mk-builtins.sh --header|--source [--disable-dl] SRCDIR -- f1 f2 ..." 1>&2
-  exit 1
-fi
+die "usage: mk-builtins.pl --header|--source [--disable-dl] SRCDIR -- f1 f2 ..." if (! @ARGV);
+
+die "mk-builtins.pl: one of --header or --source must be specified" if (! $make_header && ! $make_source);
 
-if ! $make_header && ! $make_source; then
-  echo "mk-builtins.sh: one of --header or --source must be specified" 1>&2
-  exit 1
-fi
-
-if $make_header; then
-
-  cat << \EOF
-// DO NOT EDIT!  Generated automatically by mk-builtins.sh.
+if ($make_header)
+{
+  print "// DO NOT EDIT!  Generated automatically by mk-builtins.pl.
 
 #if ! defined (octave_builtin_defun_decls_h)
 #define octave_builtin_defun_decls_h 1
 
-#include "octave-config.h"
-
-#include "ovl.h"
+#include \"octave-config.h\"
 
-EOF
+#include \"ovl.h\"
 
-  pattern='s/^[ \t]*DEF\(CONSTFUN\|UN\)[ \t]*( *\([^ ,]*\).*$/F\2/p; s/^[ \t]*DEFUNX[ \t]*( *"[^"]*" *, *\([^ ,]*\).*$/\1/p'
-
-  dld_pattern='s/^[ \t]*DEFUN_DLD[ \t]*( *\([^ ,]*\).*$/F\1/p; s/^[ \t]*DEFUNX_DLD[ \t]*( *"[^"]*" *, *\([^ ,]*\).*$/\1/p'
+";
 
-  if $defun_dld_are_built_in; then
-    pattern="$pattern; $dld_pattern"
-  fi
-
-  for arg
-  do
-    if [ -f $arg ]; then
-      file="$arg";
-    else
-      file="$srcdir/$arg";
-    fi
+  while ($file = shift (@ARGV))
+  {
+    if (! -f $file)
+    {
+      $file = "$srcdir/$file";
+    }
 
     ## Generate a list of function names to declare.  We could do
     ## this in one step, but this way keeps the sed patterns a
     ## bit smaller.
 
-    names=`$SED -n -e "$pattern" "$file"`
+    open($fh, "<", $file) || die "mk-builtins.pl: failed to open file $file\n";
 
-    for name in $names; do
-      echo "extern OCTINTERP_API octave_value_list"
-      echo "$name (const octave_value_list& = octave_value_list (), int = 0);"
-      echo ""
-    done
-  done
+    while (<$fh>)
+    {
+      if (/^[ \t]*DEF(CONSTFUN|UN)[ \t]*\( *([^ ,]*).*$/)
+      {
+        $name = "F$2";
+      }
+      elsif (/^[ \t]*DEFUNX[ \t]*\( *"[^"]*" *, *([^ ,]*).*$/)
+      {
+        $name = $1;
+      }
+      elsif ($defun_dld_are_built_in)
+      {
+        if (/^[ \t]*DEFUN_DLD[ \t]*\( *([^ ,]*).*$/)
+        {
+          $name = "F$1";
+        }
+        elsif (/^[ \t]*DEFUNX_DLD[ \t]*\( *"[^"]*" *, *([^ ,]*).*$/)
+        {
+          $name = "$1";
+        }
+      }
 
-  cat << \EOF
+      if ($name)
+      {
+        print "extern OCTINTERP_API octave_value_list
+$name (const octave_value_list& = octave_value_list (), int = 0);
 
+";
+        $name = "";
+      }
+    }
+  }
+
+  print "#endif\n";
+}
+elsif ($make_source)
+{
+  print "// DO NOT EDIT!  Generated automatically by mk-builtins.pl.
+
+#if defined (HAVE_CONFIG_H)
+#  include \"config.h\"
 #endif
 
-EOF
-
-elif $make_source; then
-
-  cat << \EOF
-// DO NOT EDIT!  Generated automatically by mk-builtins.sh.
-
-#if defined (HAVE_CONFIG_H)
-#  include "config.h"
-#endif
-
-#include "defun.h"
-#include "help.h"
-#include "ovl.h"
-#include "variables.h"
-#include "builtin-defun-decls.h"
-#include "builtins.h"
+#include \"defun.h\"
+#include \"help.h\"
+#include \"ovl.h\"
+#include \"variables.h\"
+#include \"builtin-defun-decls.h\"
+#include \"builtins.h\"
 
 #if defined (quad)
 #  undef quad
 #endif
+";
 
-EOF
-
-  pattern='s/^ *DEFUN *( *\([^ ,]*\) *,.*$/type=fun;fname=F\1;name=\1/p; s/^ *DEFUNX *( *"\([^"]*\)" *, *\([^ ,]*\) *,.*$/type=fun;fname=\2;name=\1/p; s/^ *DEFCONSTFUN *( *\([^ ,]*\) *,.*$/type=fun;fname=F\1;name=\1;const=true/p; s/^ *DEFALIAS *( *\([^ ,]*\) *, *\([^ )]*\) *).*$/type=alias;alias=\1;name=\2/p'
+  @installer_functions = ();
 
-  dld_pattern='s/^ *DEFUN_DLD *( *\([^ ,]*\) *,.*$/type=fun;fname=F\1;name=\1/p; s/^ *DEFUNX_DLD *( *"\([^"]*\)" *, *\([^ ,]*\) *,.*$/type=fun;fname=\2;name=\1/p'
+  foreach $arg (@ARGV)
+  {
+    $file = $arg;
 
-  if $defun_dld_are_built_in; then
-    pattern="$pattern; $dld_pattern"
-  fi
+    if (! -f $file)
+    {
+      $file = "$srcdir/$file";
+    }
 
-  for arg
-  do
-    if [ -f $arg ]; then
-      file="$arg";
-    else
-      file="$srcdir/$arg";
-    fi
+    ($fcn = $arg) =~ s,.*/,,;
+    $fcn =~ s/\.(cc|cpp|in\.yy|ll)$//;
+    $fcn =~ s/-/_/g;
+    $fcn = "install_${fcn}_fcns";
+
+    push (@installer_functions, $fcn);
 
-    fcn=`echo "$arg" | $SED 's,.*/,,; s/\.\(cc\|cpp\|in\.yy\|ll\)$//; s/-/_/g;'`
-    echo "static void"
-    echo "install_${fcn}_fcns (void)"
-    echo "{"
-    echo "  std::string file = \"$arg\";"
-    echo ""
+    print "
+static void
+$fcn (void)
+{
+  std::string file = \"$arg\";
 
-    ## Generate a list of shell variable assignment expressions
-    ## then evaluate them to generate the function calls that
+";
+
+    open($fh, "<", $file) || die "mk-builtins.pl: failed to open file $file\n";
+
+    ## Find DEFUN or DEFALIAS macros and generate the function calls that
     ## install the built-in functions or function aliases.
 
-    info_list=`$SED -n -e "$pattern" "$file"`
-
-    for info in $info_list; do
-      eval "$info"
+    $type = "";
+    $const = 0;
+    $fname = "";
+    $name = "";
+    $alias = "";
 
-      const=false
-      case $type in
-        fun)
-          ## We use the name appended to the "external-doc" tag to find
-          ## the docstring for aliases to this function.
-          if $const; then
-            echo "  install_builtin_function ($fname, \"$name\", file, \"external-doc:$name\", true);"
-          else
-            echo "  install_builtin_function ($fname, \"$name\", file, \"external-doc:$name\");"
-          fi
-          unset type fname name const
-        ;;
-        alias)
-          echo "  alias_builtin (\"$alias\", \"$name\");"
-          unset type alias name
-        ;;
-      esac
-    done
+    while (<$fh>)
+    {
+      if (/^ *DEFUN *\( *([^ ,]*) *,.*$/)
+      {
+        $type = "fun";
+        $fname = "F$1";
+        $name = "$1";
+      }
+      elsif (/^ *DEFUNX *\( *"([^"]*)" *, *([^ ,]*) *,.*$/)
+      {
+        $type = "fun";
+        $fname = "$2";
+        $name = "$1";
+      }
+      elsif (/^ *DEFCONSTFUN *\( *([^ ,]*) *,.*$/)
+      {
+        $type = "fun";
+        $fname = "F$1";
+        $name = "$1";
+        $const = 1;
+      }
+      elsif (/^ *DEFALIAS *\( *([^ ,]*) *, *([^ )]*) *\).*$/)
+      {
+        $type = "alias";
+        $alias = "$1";
+        $name = "$2";
+      }
+      elsif ($defun_dld_are_built_in)
+      {
+        if (/^ *DEFUN_DLD *\( *([^ ,]*) *,.*$/)
+        {
+          $type = "fun";
+          $fname = "F$1";
+          $name = "$1";
+        }
+        elsif (/^ *DEFUNX_DLD *\( *"([^"]*)" *, *([^ ,]*) *,.*$/)
+        {
+          $type = "fun";
+          $fname = "$2";
+          $name = "$1";
+        }
+      }
 
-    echo "}"
-    echo ""
-  done
+      if ($type eq "fun")
+      {
+        ## We use the name appended to the "external-doc" tag to find
+        ## the docstring for aliases to this function.
+
+        if ($const)
+        {
+          print "  install_builtin_function ($fname, \"$name\", file, \"external-doc:$name\", true);\n"
+        }
+        else
+        {
+          print "  install_builtin_function ($fname, \"$name\", file, \"external-doc:$name\");\n"
+        }
 
-  cat << \EOF
+        $type = "";
+        $fname = "";
+        $name = "";
+        $const = 0;
+      }
+      elsif ($type eq "alias")
+      {
+        print "  alias_builtin (\"$alias\", \"$name\");\n";
 
+        $type = "";
+        $name = "";
+        $alias = "";
+      }
+    }
+    print "}\n";
+  }
+
+  print "
 void
 install_builtins (void)
 {
-EOF
-
-  for arg
-  do
-    fcn=`echo "$arg" | $SED 's,.*/,,; s/\.\(cc\|cpp\|in\.yy\|ll\)$//; s/-/_/g;'`
-    echo "  install_${fcn}_fcns ();"
-  done
+";
 
-  cat << \EOF
-}
-EOF
+  foreach $fcn (@installer_functions)
+  {
+    print "  $fcn ();\n"
+  }
 
-fi
-
-exit 0
+  print "}\n";
+}
diff --git a/libinterp/module.mk b/libinterp/module.mk
--- a/libinterp/module.mk
+++ b/libinterp/module.mk
@@ -253,24 +253,24 @@ libinterp/liboctinterp-build-info.cc: li
 	$(simple_move_if_change_rule)
 
 if AMCOND_ENABLE_DYNAMIC_LINKING
   mkbuiltins_dld_opt =
 else
   mkbuiltins_dld_opt = --disable-dl
 endif
 
-libinterp/builtins.cc: $(LIBINTERP_DEFUN_FILES) build-aux/mk-builtins.sh | libinterp/$(octave_dirstamp)
+libinterp/builtins.cc: $(LIBINTERP_DEFUN_FILES) build-aux/mk-builtins.pl | libinterp/$(octave_dirstamp)
 	$(AM_V_GEN)rm -f $@-t && \
-	$(SHELL) $(srcdir)/build-aux/mk-builtins.sh --source $(mkbuiltins_dld_opt) "$(srcdir)" -- $(LIBINTERP_DEFUN_FILES) > $@-t && \
+	$(PERL) $(srcdir)/build-aux/mk-builtins.pl --source $(mkbuiltins_dld_opt) "$(srcdir)" -- $(LIBINTERP_DEFUN_FILES) > $@-t && \
 	mv $@-t $@
 
-libinterp/builtin-defun-decls.h: $(LIBINTERP_DEFUN_FILES) build-aux/mk-builtins.sh | libinterp/$(octave_dirstamp)
+libinterp/builtin-defun-decls.h: $(LIBINTERP_DEFUN_FILES) build-aux/mk-builtins.pl | libinterp/$(octave_dirstamp)
 	$(AM_V_GEN)rm -f $@-t && \
-	$(SHELL) $(srcdir)/build-aux/mk-builtins.sh --header $(mkbuiltins_dld_opt) "$(srcdir)" -- $(LIBINTERP_DEFUN_FILES) > $@-t && \
+	$(PERL) $(srcdir)/build-aux/mk-builtins.pl --header $(mkbuiltins_dld_opt) "$(srcdir)" -- $(LIBINTERP_DEFUN_FILES) > $@-t && \
 	$(simple_move_if_change_rule)
 
 if AMCOND_ENABLE_DYNAMIC_LINKING
 DLDFCN_PKG_ADD_FILE = libinterp/dldfcn/PKG_ADD
 
 libinterp/dldfcn/PKG_ADD: $(DLDFCN_DEFUN_FILES) libinterp/mk-pkg-add | libinterp/$(octave_dirstamp)
 	$(AM_V_GEN)rm -f $@-t && \
 	$(SHELL) $(srcdir)/libinterp/mk-pkg-add "$(srcdir)" $(DLDFCN_DEFUN_FILES) > $@-t && \
