# HG changeset patch
# User Torsten <mttl@mailbox.org>
# Date 1500498216 -7200
#      Wed Jul 19 23:03:36 2017 +0200
# Node ID b6949bdce34f8a271bdaae85fbf5e74d1630ac66
# Parent  ed492a5a47fd7547bd136e652236c5e4d67f33b7
prevent unnecessary lexer updates in the editor (bug #51396)

* file-editor-tab.cc (set_file_name): update _file_name and check the
  requirement of a new lexer only if the file name has changed;
  (update_lexer): only set a new lexer if the file type has changed,
  removed update of the lexer related settings from here;
  (update_lexer_settings): new function with updates of all lexer dependent
  settings;
  (notice_settings): call update_lexer_settings and not update_lexer, since
  only the settings, not the lexer need to be updated;

* file-editor-tab.h: new function update_lexer_settings

diff --git a/libgui/src/m-editor/file-editor-tab.cc b/libgui/src/m-editor/file-editor-tab.cc
--- a/libgui/src/m-editor/file-editor-tab.cc
+++ b/libgui/src/m-editor/file-editor-tab.cc
@@ -440,20 +440,23 @@ void
 file_editor_tab::set_file_name (const QString& fileName)
 {
   // update tracked file if we really have a file on disk
   QStringList trackedFiles = _file_system_watcher.files ();
   if (! trackedFiles.isEmpty ())
     _file_system_watcher.removePath (_file_name);
   if (! fileName.isEmpty ())
     _file_system_watcher.addPath (fileName);
-  _file_name = fileName;
-
-  // update lexer after _file_name change
-  update_lexer ();
+
+  // update lexer and file name variable if file name changes
+  if (_file_name != fileName)
+    {
+      _file_name = fileName;
+      update_lexer ();
+    }
 
   // update the file editor with current editing directory
   emit editor_state_changed (_copy_available, _is_octave_file);
 
   // add the new file to the most-recently-used list
   emit mru_add_file (_file_name, _encoding);
 }
 
@@ -524,28 +527,26 @@ file_editor_tab::handle_margin_clicked (
             {
               if (unchanged_or_saved ())
                 handle_request_add_breakpoint (editor_linenr + 1, "");
             }
         }
     }
 }
 
+
 void
 file_editor_tab::update_lexer ()
 {
-  if (_lexer_apis)
-    _lexer_apis->cancelPreparation ();  // stop preparing if apis exists
-
-  QsciLexer *lexer = _edit_area->lexer ();
-  delete lexer;
-  lexer = 0;
+  // Create a new lexer
+  QsciLexer *lexer = 0;
 
   _is_octave_file = false;
 
+  // Find the required lexer from file extensions
   if (_file_name.endsWith (".m")
       || _file_name.endsWith ("octaverc"))
     {
 #if defined (HAVE_LEXER_OCTAVE)
       lexer = new QsciLexerOctave ();
 #elif defined (HAVE_LEXER_MATLAB)
       lexer = new QsciLexerMatlab ();
 #else
@@ -599,23 +600,58 @@ file_editor_tab::update_lexer ()
         }
       else
         {
           // other or no extension
           lexer = new octave_txt_lexer ();
         }
     }
 
+  // Get any existing lexer
+  QsciLexer *old_lexer = _edit_area->lexer ();
+
+  // If new file, no lexer, or lexer has changed,
+  // delete old one and set the newly created as current lexer
+  if (! old_lexer || ! valid_file_name ()
+      || QString(old_lexer->lexer ()) != QString(lexer->lexer ()))
+    {
+      // Delete and set new lexer
+      if (old_lexer)
+        delete old_lexer;
+      _edit_area->setLexer (lexer);
+
+      // build information for auto completion (APIs)
+      _lexer_apis = new QsciAPIs (lexer);
+
+      // Get the settings for this new lexer
+      update_lexer_settings ();
+    }
+  else
+    {
+      // Otherwise, delete the newly created lexer and
+      // use the old, exisiting one
+      if (lexer)
+        delete lexer;
+    }
+}
+
+
+// Update settings, which are lexer related and have to be updated
+// when a) the lexer changes or b) the settings have changed.
+void
+file_editor_tab::update_lexer_settings ()
+{
+  QsciLexer *lexer = _edit_area->lexer ();
+
   QSettings *settings = resource_manager::get_settings ();
 
-  // build information for auto completion (APIs)
-  _lexer_apis = new QsciAPIs (lexer);
-
   if (_lexer_apis)
     {
+      _lexer_apis->cancelPreparation ();  // stop preparing if apis exists
+
       bool update_apis = false;  // flag, whether update of apis files
 
       // get path to prepared api info
 #if defined (HAVE_QT4)
       QString prep_apis_path
         = QDesktopServices::storageLocation (QDesktopServices::HomeLocation)
           + "/.config/octave/" + QString (OCTAVE_VERSION) + "/qsci/";
 #else
@@ -686,17 +722,18 @@ file_editor_tab::update_lexer ()
             {
               // octave: get keywords from internal informations depending on
               //         user preferences
 
               // keywords are always used
               add_octave_apis (Fiskeyword ());            // add new entries
 
               octave::interpreter& interp
-                = octave::__get_interpreter__ ("file_editor_tab::update_lexer");
+                = octave::__get_interpreter__ (
+                                    "file_editor_tab::update_lexer_settings");
 
               if (octave_builtins)
                 add_octave_apis (F__builtins__ (interp));       // add new entries
 
               if (octave_functions)
                 add_octave_apis (F__list_functions__ (interp)); // add new entries
 
             }
@@ -726,18 +763,16 @@ file_editor_tab::update_lexer ()
 
           _lexer_apis->prepare ();  // prepare apis info
 
         }
     }
 
   lexer->readSettings (*settings);
 
-  _edit_area->setLexer (lexer);
-
   _edit_area->setCaretForegroundColor (lexer->color (0));
   _edit_area->setIndentationGuidesForegroundColor (lexer->color (0));
 
   // set some colors depending on selected background color of the lexer
   QColor bg = lexer->paper (0);
   QColor fg = lexer->color (0);
 
   int bh, bs, bv, fh, fs, fv, h, s, v;
@@ -784,19 +819,19 @@ file_editor_tab::update_lexer ()
       if (font_size < 4)
         font_size = 4;
       line_numbers_font.setPointSize (font_size);
 
       _edit_area->setMarginsFont (line_numbers_font);
     }
   else
     _edit_area->setMarginWidth (2,0);
-
 }
 
+
 // function for adding entries to the octave lexer's APIs
 void
 file_editor_tab::add_octave_apis (octave_value_list key_ovl)
 {
   octave_value keys = key_ovl(0);
   Cell key_list = keys.cell_value ();
 
   for (int idx = 0; idx < key_list.numel (); idx++)
@@ -2264,17 +2299,17 @@ file_editor_tab::file_has_changed (const
 }
 
 void
 file_editor_tab::notice_settings (const QSettings *settings, bool init)
 {
   // QSettings pointer is checked before emitting.
 
   if (! init)
-    update_lexer ();
+    update_lexer_settings ();
 
   // code folding
   if (settings->value ("editor/code_folding",true).toBool ())
     {
       _edit_area->setMarginType (3, QsciScintilla::SymbolMargin);
       _edit_area->setFolding (QsciScintilla::BoxedTreeFoldStyle , 3);
     }
   else
diff --git a/libgui/src/m-editor/file-editor-tab.h b/libgui/src/m-editor/file-editor-tab.h
--- a/libgui/src/m-editor/file-editor-tab.h
+++ b/libgui/src/m-editor/file-editor-tab.h
@@ -239,16 +239,17 @@ private:
                                                bool restore_breakpoints = true);
   void save_file_as (bool remove_on_success = false);
   bool check_valid_identifier (QString file_name);
   bool check_valid_codec (QTextCodec *codec);
 
   bool unchanged_or_saved (void);
 
   void update_lexer ();
+  void update_lexer_settings ();
 
   void show_dialog (QDialog *dlg, bool modal);
   int check_file_modified ();
   void do_comment_selected_text (bool comment);
   void do_indent_selected_text (bool indent);
 
   void add_breakpoint_callback (const bp_info& info);
   void remove_breakpoint_callback (const bp_info& info);
