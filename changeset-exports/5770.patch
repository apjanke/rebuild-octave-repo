# HG changeset patch
# User jwe
# Date 1145382273 0
#      Tue Apr 18 17:44:33 2006 +0000
# Node ID 6a9244f89a2a688b0c3a3cb4d99630086b38b4e5
# Parent  2b9a5ce46678dce9a763795744eafec50eb6eb1d
[project @ 2006-04-18 17:44:33 by jwe]

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,10 +1,16 @@
 2006-04-18  John W. Eaton  <jwe@octave.org>
 
+	* sighandlers.cc (octave_set_signal_handler,
+	octave_set_interrupt_handler): New arg, restart_syscalls, with
+	default value true.
+	* sighandlers.h: Fix decls to match.
+	* sysdep.cc (octave_kbhit): Disable restarting of system calls.
+
 	* help.cc (Flookfor): Add std qualifier to transform function.
 	Include <algorithm>, for transform decl.
 
 2006-04-16  John W. Eaton  <jwe@octave.org>
 
 	* pager.h (octave_diary_buf, octave_pager_buf): Use std:stringbuf
 	directly.
 
diff --git a/src/pr-output.cc b/src/pr-output.cc
--- a/src/pr-output.cc
+++ b/src/pr-output.cc
@@ -1346,17 +1346,17 @@ pr_col_num_header (std::ostream& os, oct
 	os << " Columns " << col + 1 << " through " << lim << ":\n";
 
       if (! compact_format)
 	os << "\n";
     }
 }
 
 template <class T>
-inline void
+static inline void
 pr_plus_format (std::ostream& os, const T& val)
 {
   if (val > T (0))
     os << plus_format_chars[0];
   else if (val < T (0))
     os << plus_format_chars[1];
   else
     os << plus_format_chars[2];
diff --git a/src/sighandlers.cc b/src/sighandlers.cc
--- a/src/sighandlers.cc
+++ b/src/sighandlers.cc
@@ -180,36 +180,36 @@ my_friendly_exit (const char *sig_name, 
 	  exit (1);
 #endif
 	}
 
     }
 }
 
 sig_handler *
-octave_set_signal_handler (int sig, sig_handler *handler)
+octave_set_signal_handler (int sig, sig_handler *handler,
+			   bool restart_syscalls)
 {
 #if defined (HAVE_POSIX_SIGNALS)
   struct sigaction act, oact;
 
   act.sa_handler = handler;
   act.sa_flags = 0;
 
   if (sig == SIGALRM)
     {
 #if defined (SA_INTERRUPT)
       act.sa_flags |= SA_INTERRUPT;
 #endif
     }
-  else
-    {
 #if defined (SA_RESTART)
-      act.sa_flags |= SA_RESTART;
+  // XXX FIXME XXX -- Do we also need to explicitly disable SA_RESTART?
+  else if (restart_syscalls)
+    act.sa_flags |= SA_RESTART;
 #endif
-    }
 
   sigemptyset (&act.sa_mask);
   sigemptyset (&oact.sa_mask);
 
   sigaction (sig, &act, &oact);
 
   return oact.sa_handler;
 #else
@@ -538,26 +538,29 @@ octave_ignore_interrupts (void)
 #ifdef SIGBREAK
   retval.brk_handler = octave_set_signal_handler (SIGBREAK, SIG_IGN);
 #endif
 
   return retval;
 }
 
 octave_interrupt_handler
-octave_set_interrupt_handler (const volatile octave_interrupt_handler& h)
+octave_set_interrupt_handler (const volatile octave_interrupt_handler& h,
+			      bool restart_syscalls)
 {
   octave_interrupt_handler retval;
 
 #ifdef SIGINT
-  retval.int_handler = octave_set_signal_handler (SIGINT, h.int_handler);
+  retval.int_handler = octave_set_signal_handler (SIGINT, h.int_handler,
+						  restart_syscalls);
 #endif
 
 #ifdef SIGBREAK
-  retval.brk_handler = octave_set_signal_handler (SIGBREAK, h.brk_handler);
+  retval.brk_handler = octave_set_signal_handler (SIGBREAK, h.brk_handler,
+						  restart_syscalls);
 #endif
 
   return retval;
 }
 
 // Install all the handlers for the signals we might care about.
 
 void
diff --git a/src/sighandlers.h b/src/sighandlers.h
--- a/src/sighandlers.h
+++ b/src/sighandlers.h
@@ -92,28 +92,30 @@ octave_interrupt_handler
 
 // Nonzero means we have already printed a message for this series of
 // SIGPIPES.  We assume that the writer will eventually give up.
 extern int pipe_handler_error_count;
 
 // TRUE means we can be interrupted.
 extern bool can_interrupt;
 
-extern sig_handler *octave_set_signal_handler (int, sig_handler *);
+extern sig_handler *octave_set_signal_handler (int, sig_handler *,
+					       bool restart_syscalls = true);
 
 extern void install_signal_handlers (void);
 
 extern void octave_signal_handler (void);
 
 extern octave_interrupt_handler octave_catch_interrupts (void);
 
 extern octave_interrupt_handler octave_ignore_interrupts (void);
 
 extern octave_interrupt_handler
-octave_set_interrupt_handler (const volatile octave_interrupt_handler&);
+octave_set_interrupt_handler (const volatile octave_interrupt_handler&,
+			      bool restart_syscalls = true);
 
 // extern void ignore_sigchld (void);
 
 // Maybe this should be in a separate file?
 
 class
 octave_child
 {
diff --git a/src/sysdep.cc b/src/sysdep.cc
--- a/src/sysdep.cc
+++ b/src/sysdep.cc
@@ -78,16 +78,17 @@ 02110-1301, USA.
 #include "quit.h"
 
 #include "defun.h"
 #include "error.h"
 #include "input.h"
 #include "oct-obj.h"
 #include "ov.h"
 #include "pager.h"
+#include "sighandlers.h"
 #include "sysdep.h"
 #include "toplev.h"
 #include "utils.h"
 
 #ifndef STDIN_FILENO
 #define STDIN_FILENO 1
 #endif
 
@@ -412,21 +413,33 @@ raw_mode (bool on, bool wait)
 int
 octave_kbhit (bool wait)
 {
 #ifdef HAVE__KBHIT
   int c = (! wait && ! _kbhit ()) ? 0 : std::cin.get ();
 #else
   raw_mode (true, wait);
 
+  // Get current handler.
+  octave_interrupt_handler saved_interrupt_handler
+    = octave_ignore_interrupts ();
+
+  // Restore it, disabling system call restarts (if possible) so the
+  // read can be interrupted.
+
+  octave_set_interrupt_handler (saved_interrupt_handler, false);
+
   int c = std::cin.get ();
-
+ 
   if (std::cin.fail () || std::cin.eof ())
     std::cin.clear ();
 
+  // Restore it, enabling system call restarts (if possible).
+  octave_set_interrupt_handler (saved_interrupt_handler, true);
+
   raw_mode (false, true);
 #endif
 
   return c;
 }
 
 DEFUN (clc, , ,
   "-*- texinfo -*-\n\
diff --git a/src/utils.cc b/src/utils.cc
--- a/src/utils.cc
+++ b/src/utils.cc
@@ -1112,16 +1112,18 @@ octave_sleep (double seconds)
       double t;
 
       unsigned int usec
 	= static_cast<unsigned int> (modf (seconds, &t) * 1000000);
 
       unsigned int sec
 	= (t > UINT_MAX) ? UINT_MAX : static_cast<unsigned int> (t);
 
+      // Versions of these functions that accept unsigned int args are
+      // defined in cutils.c.
       octave_sleep (sec);
       octave_usleep (usec);
     }
 }
 
 static int
 warn_neg_dim_as_zero (void)
 {
