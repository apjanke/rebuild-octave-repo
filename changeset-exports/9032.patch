# HG changeset patch
# User Rik <rdrider0-list@yahoo.com>
# Date 1237568937 25200
#      Fri Mar 20 10:08:57 2009 -0700
# Node ID 349616d9c38e0abbb145aeb8040afc8bc624e56e
# Parent  1052a66078cf7e4821b02ead63df4d5e88d1645c
Cleanup top-level documentation menu in octave.texi

@detailmenu is now completely up to date with respect to included .texi files
@sp construct replaced with an equivalent because it produces ugly HTML output
Spellchecked file

diff --git a/doc/interpreter/basics.txi b/doc/interpreter/basics.txi
--- a/doc/interpreter/basics.txi
+++ b/doc/interpreter/basics.txi
@@ -133,17 +133,17 @@ commands in the system or user startup f
 @code{info_program} function.
 
 @item --interactive
 @itemx -i
 @cindex @code{--interactive}
 @cindex @code{-i}
 Force interactive behavior.  This can be useful for running Octave via a
 remote shell command or inside an Emacs shell buffer.  For another way
-to run Octave within Emacs, see @ref{Emacs}.
+to run Octave within Emacs, see @ref{Emacs Octave Support}.
 
 @item --no-history
 @itemx -H
 Disable command-line history.
 
 @item --no-init-file
 @cindex @code{--no-init-file}
 Don't read the @file{~/.octaverc} or @file{.octaverc} files.
diff --git a/doc/interpreter/contrib.txi b/doc/interpreter/contrib.txi
--- a/doc/interpreter/contrib.txi
+++ b/doc/interpreter/contrib.txi
@@ -19,18 +19,18 @@
 @node Contributing Guidelines
 @appendix Contributing Guidelines
 @cindex coding standards
 @cindex Octave development
 
 This chapter is dedicated to those who wish to contribute code to Octave.
 
 @menu 
-* How to Contribute::		How you may start contributing code.
-* General Guidelines::		Advices applicable to any type of source.
+* How to Contribute::
+* General Guidelines::
 * Octave Sources (m-files)::
 * C++ Sources::
 * Other Sources::	
 @end menu
 
 @node How to Contribute
 @section How to Contribute
 The mailing list for Octave development discussion and sending contributions is
diff --git a/doc/interpreter/diagperm.txi b/doc/interpreter/diagperm.txi
--- a/doc/interpreter/diagperm.txi
+++ b/doc/interpreter/diagperm.txi
@@ -16,17 +16,17 @@
 @c along with Octave; see the file COPYING.  If not, see
 @c <http://www.gnu.org/licenses/>.
 
 @node Diagonal and Permutation Matrices 
 @chapter Diagonal and Permutation Matrices
 
 @menu
 * Basic Usage::          Creation and Manipulation of Diagonal and Permutation Matrices
-* Matrix Algebra::   	 Linear Algebra with Diagonal and Permutation Matrices
+* Matrix Algebra::       Linear Algebra with Diagonal and Permutation Matrices
 * Function Support::     Functions That Are Aware of These Matrices
 * Example Codes::        Some Examples of Usage
 * Zeros Treatment::      The Differences in Treatment of Zero Elements
 @end menu
 
 @node Basic Usage
 @section Creating and Manipulating Diagonal and Permutation Matrices
 
diff --git a/doc/interpreter/emacs.txi b/doc/interpreter/emacs.txi
--- a/doc/interpreter/emacs.txi
+++ b/doc/interpreter/emacs.txi
@@ -15,17 +15,17 @@
 @c 
 @c You should have received a copy of the GNU General Public License
 @c along with Octave; see the file COPYING.  If not, see
 @c <http://www.gnu.org/licenses/>.
 
 @c Written by Kurt Hornik <Kurt.Hornik@wu-wien.ac.at> on 1996/05/17.
 @c Last updated by KH on 1997/07/31.
 
-@node Emacs
+@node Emacs Octave Support
 @appendix Emacs Octave Support
 
 The development of Octave code can greatly be facilitated using Emacs
 with Octave mode, a major mode for editing Octave files which can e.g.@:
 automatically indent the code, do some of the typing (with Abbrev mode)
 and show keywords, comments, strings, etc.@: in different faces (with
 Font-lock mode on devices that support it).
 
diff --git a/doc/interpreter/func.txi b/doc/interpreter/func.txi
--- a/doc/interpreter/func.txi
+++ b/doc/interpreter/func.txi
@@ -12,17 +12,17 @@
 @c FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
 @c for more details.
 @c 
 @c You should have received a copy of the GNU General Public License
 @c along with Octave; see the file COPYING.  If not, see
 @c <http://www.gnu.org/licenses/>.
 
 @node Functions and Scripts
-@chapter Functions and Script Files
+@chapter Functions and Scripts
 @cindex defining functions
 @cindex user-defined functions
 @cindex functions, user-defined
 @cindex script files
 
 Complicated Octave programs can often be simplified by defining
 functions.  Functions can be defined directly on the command line during
 interactive Octave sessions, or in external files, and can be called just
diff --git a/doc/interpreter/io.txi b/doc/interpreter/io.txi
--- a/doc/interpreter/io.txi
+++ b/doc/interpreter/io.txi
@@ -270,17 +270,17 @@ make your programs easier to understand.
 * Opening and Closing Files::   
 * Simple Output::               
 * Line-Oriented Input::         
 * Formatted Output::            
 * Output Conversion for Matrices::  
 * Output Conversion Syntax::    
 * Table of Output Conversions::  
 * Integer Conversions::         
-* Floating-Point Conversions::  Other Output Conversions::    
+* Floating-Point Conversions::
 * Other Output Conversions::    
 * Formatted Input::             
 * Input Conversion Syntax::     
 * Table of Input Conversions::  
 * Numeric Input Conversions::   
 * String Input Conversions::    
 * Binary I/O::                  
 * Temporary Files::             
diff --git a/doc/interpreter/octave.texi b/doc/interpreter/octave.texi
--- a/doc/interpreter/octave.texi
+++ b/doc/interpreter/octave.texi
@@ -25,17 +25,20 @@
 @c printed manual (that information should be in the supporting text for
 @c each group of functions and variables).
 
 @macro seealso {args}
 @iftex
 @vskip 2pt
 @end iftex
 @ifnottex
-@sp 1
+@c Texinfo @sp should work but in practice produces ugly results for HTML.
+@c A simple blank line produces the correct behavior. 
+@c @sp 1
+
 @end ifnottex
 @noindent
 @strong{See also:} \args\.
 @end macro
 
 @ifinfo
 @format
 START-INFO-DIR-ENTRY
@@ -148,17 +151,17 @@ It corresponds to GNU Octave version @va
 * Preface::                     
 * Introduction::                A brief introduction to Octave.
 * Getting Started::             
 * Data Types::                  
 * Numeric Data Types::          
 * Strings::                     
 * Data Containers::             
 * Variables::                   
-* Expressions::                 Expressions.
+* Expressions::                 
 * Evaluation::                  
 * Statements::                  Looping and program flow control.
 * Functions and Scripts::       
 * Errors and Warnings::              
 * Debugging::
 * Input and Output::            
 * Plotting::                    
 * Matrix Manipulation::         
@@ -178,38 +181,37 @@ It corresponds to GNU Octave version @va
 * Signal Processing::           
 * Image Processing::            
 * Audio Processing::            
 * Object Oriented Programming::            
 * System Utilities::            
 * Packages:: 
 * Dynamically Linked Functions::
 * Test and Demo Functions::
-* Tips::                        
+* Tips and Standards::                        
 * Contributing Guidelines::
 * Trouble::                     If you have trouble installing Octave.
 * Installation::                How to configure, compile and install Octave.
-* Emacs::                       
+* Emacs Octave Support::                       
 @c * Grammar::                     
 * Copying::                     The GNU General Public License.
 * Concept Index::               An item for each concept.
 * Function Index::              An item for each documented function.
 * Operator Index::              An item for each documented operator.
 
-@c FIXME -- is the detailed node listing up to date?
 @detailmenu
  --- The Detailed Node Listing ---
 
 Preface
 
 * Acknowledgements::            
 * How You Can Contribute to Octave::  
 * Distribution::                
 
-A Brief Introduction to Octave
+Introduction
 
 * Running Octave::              
 * Simple Examples::             
 * Conventions::                 
 
 Conventions
 
 * Fonts::                       
@@ -254,107 +256,172 @@ Data Types
 
 * Built-in Data Types::         
 * User-defined Data Types::     
 * Object Sizes::                
 
 Built-in Data Types
 
 * Numeric Objects::             
+* Missing Data::                
 * String Objects::              
 * Data Structure Objects::      
+* Cell Array Objects::          
 
 Numeric Data Types
 
 * Matrices::
 * Ranges::
 * Single Precision Data Types::
 * Integer Data Types::
 * Bit Manipulations::
 * Logical Values:: 
 * Promotion and Demotion of Data Types::
 * Predicates for Numeric Objects::  
 
 Matrices
 
 * Empty Matrices::              
 
+Integer Data Types
+
+* Integer Arithmetic::
+
 Strings
 
-* Creating Strings::            
-* Comparing Strings::
+* Escape Sequences in string constants::
+* Character Arrays::
+* Creating Strings:: 
+* Comparing Strings::           
 * Manipulating Strings::     
 * String Conversions::          
 * Character Class Functions::   
 
+Creating Strings
+
+* Concatenating Strings:: 
+* Conversion of Numerical Data to Strings::
+
 Data Containers
 
 * Data Structures::
 * Cell Arrays::
 * Comma Separated Lists::
 
+Data Structures
+
+* Structure Arrays::
+* Creating Structures::
+* Manipulating Structures::
+* Processing Data in Structures::
+
+Cell Arrays
+
+* Creating Cell Arrays::                 
+* Indexing Cell Arrays::
+* Cell Arrays of Strings::
+* Processing Data in Cell Arrays::
+
+Variables
+
+* Global Variables::            
+* Persistent Variables::        
+* Status of Variables::         
+
 Expressions
 
 * Index Expressions::           
 * Calling Functions::           
 * Arithmetic Ops::              
 * Comparison Ops::              
 * Boolean Expressions::         
 * Assignment Ops::              
 * Increment Ops::               
 * Operator Precedence::         
 
 Calling Functions
 
-Variables
-
-* Global Variables::            
-* Status of Variables::         
-
 * Call by Value::               
 * Recursion::                   
 
 Boolean Expressions
 
 * Element-by-element Boolean Operators::  
 * Short-circuit Boolean Operators::  
 
+Evaluation
+
+* Calling a Function by its Name::
+* Evaluation in a Different Context::
+
 Statements
 
 * The if Statement::            
 * The switch Statement::        
 * The while Statement::         
 * The do-until Statement::      
 * The for Statement::           
 * The break Statement::         
 * The continue Statement::      
 * The unwind_protect Statement::  
 * The try Statement::           
 * Continuation Lines::          
 
+The @code{switch} Statement
+
+* Notes for the C programmer::  
+
 The @code{for} Statement
 
 * Looping Over Structure Elements::  
 
-Functions and Script Files
+Functions and Scripts
 
 * Defining Functions::          
 * Multiple Return Values::      
 * Variable-length Argument Lists::  
 * Variable-length Return Lists::  
 * Returning From a Function::   
+* Default Arguments::   
 * Function Files::              
 * Script Files::                
+* Function Handles Inline Functions and Anonymous Functions::
+* Commands::
 * Organization of Functions::   
 
+Function Files
+
+* Manipulating the load path::
+* Subfunctions::
+* Private Functions::
+* Overloading and Autoloading::
+* Function Locking::
+* Function Precedence::
+
+Function Handles Inline Functions and Anonymous Functions
+
+* Function Handles::
+* Anonymous Functions::
+* Inline Functions::
+
 Errors and Warnings
 
 * Handling Errors::
 * Handling Warnings::
 
+Handling Errors
+
+* Raising Errors::
+* Catching Errors::
+
+Handling Warnings
+
+* Issuing Warnings::
+* Enabling and Disabling Warnings::
+
 Debugging
 
 * Entering Debug Mode::
 * Leaving Debug Mode::
 * Breakpoints::
 * Debug Mode::
 * Call Stack::
 
@@ -363,16 +430,25 @@ Input and Output
 * Basic Input and Output::      
 * C-Style I/O Functions::       
 
 Basic Input and Output
 
 * Terminal Output::             
 * Terminal Input::              
 * Simple File I/O::             
+* Rational Approximations::
+
+Terminal Output
+
+* Paging Screen Output::
+
+Simple File I/O
+
+* Saving Data on Unexpected Exits::
 
 C-Style I/O Functions
 
 * Opening and Closing Files::   
 * Simple Output::               
 * Line-Oriented Input::         
 * Formatted Output::            
 * Output Conversion for Matrices::  
@@ -391,68 +467,162 @@ C-Style I/O Functions
 * EOF and Errors::              
 * File Positioning::            
 
 Plotting
 
 * Plotting Basics::
 * Advanced Plotting::
 
+Plotting Basics
+
+* Two-Dimensional Plots::       
+* Three-Dimensional Plotting::  
+* Plot Annotations::            
+* Multiple Plots on One Page::  
+* Multiple Plot Windows::       
+* Printing Plots::              
+* Interacting with plots::
+* Test Plotting Functions::     
+
+Two-Dimensional Plots
+
+* Two-dimensional Function Plotting::
+
+Three-Dimensional Plotting
+
+* Three-dimensional Function Plotting::
+* Three-dimensional Geometric Shapes::
+
+Advanced Plotting
+
+* Graphics Objects::
+* Graphics Object Properties::  
+* Managing Default Properties::  
+* Colors::
+* Line Styles::
+* Marker Styles::
+* Callbacks::
+* Object Groups::
+* Graphics backends::
+
+Graphics Object Properties
+
+* Root Figure Properties::      
+* Figure Properties::           
+* Axes Properties::             
+* Line Properties::             
+* Text Properties::             
+* Image Properties::            
+* Patch Properties::            
+* Surface Properties::          
+* Searching Properties::
+
+Object Groups
+
+* Data sources in object groups::
+* Area series::
+* Bar series::
+* Contour groups::
+* Error bar series::
+* Line series::
+* Quiver group::
+* Scatter group::
+* Stair group::
+* Stem Series::
+* Surface group::
+
+Graphics backends
+
+* Interaction with gnuplot::
+
 Matrix Manipulation
 
 * Finding Elements and Checking Conditions::  
 * Rearranging Matrices::        
 * Applying a Function to an Array::
 * Special Utility Matrices::    
 * Famous Matrices::             
 
 Arithmetic
 
 * Utility Functions::           
 * Complex Arithmetic::          
 * Trigonometry::                
 * Sums and Products::           
 * Special Functions::           
+* Coordinate Transformations::
 * Mathematical Constants::      
 
 Linear Algebra
 
 * Techniques used for Linear Algebra::
 * Basic Matrix Functions::      
 * Matrix Factorizations::       
 * Functions of a Matrix::       
+* Specialized Solvers::
 
 Diagonal and Permutation Matrices
 
-* Basic Usage::
-* Matrix Algebra::
-* Function Support::
-* Example Codes::
-* Zeros Treatment::
+* Basic Usage::          Creation and Manipulation of Diagonal and Permutation Matrices
+* Matrix Algebra::       Linear Algebra with Diagonal and Permutation Matrices
+* Function Support::     Functions That Are Aware of These Matrices
+* Example Codes::        Some Examples of Usage
+* Zeros Treatment::      The Differences in Treatment of Zero Elements
+
+Basic Usage
+
+* Creating Diagonal Matrices::
+* Creating Permutation Matrices::
+* Explicit and Implicit Conversions::
+
+Matrix Algebra
+
+* Expressions Involving Diagonal Matrices::
+* Expressions Involving Permutation Matrices::
+
+Function Support
+
+* Diagonal Matrix Functions::
+* Permutation Matrix Functions::
 
 Sparse Matrices
 
-* Basics::
-* Sparse Linear Algebra::
-* Iterative Techniques::
-* Real Life Example::
+* Basics::                      Creation and Manipulation of Sparse Matrices
+* Sparse Linear Algebra::       Linear Algebra on Sparse Matrices
+* Iterative Techniques::        Iterative Techniques
+* Real Life Example::           Using Sparse Matrices
+
+Basics
+
+* Storage of Sparse Matrices::
+* Creating Sparse Matrices::
+* Information::
+* Operators and Functions::
+
+Operators and Functions
+
+* Sparse Functions::            
+* Return Types of Operators and Functions::  
+* Mathematical Considerations::  
 
 Numerical Integration
 
-* Functions of One Variable::   
+* Functions of One Variable:: 
+* Functions of Multiple Variables:: 
 * Orthogonal Collocation::      
-* Functions of Multiple Variables:: 
 
 Differential Equations
 
 * Ordinary Differential Equations::  
 * Differential-Algebraic Equations::  
 
 Optimization
 
+* Linear Programming::       
 * Quadratic Programming::       
 * Nonlinear Programming::       
 * Linear Least Squares::        
 
 Statistics
 
 * Descriptive Statistics::
 * Basic Statistical Functions:: 
@@ -482,31 +652,42 @@ Interpolation
 
 Geometry
 
 * Delaunay Triangulation::
 * Voronoi Diagrams::
 * Convex Hull::
 * Interpolation on Scattered Data::
 
+Delaunay Triangulation
+
+* Plotting the Triangulation::
+* Identifying points in Triangulation::
+
 Image Processing
 
 * Loading and Saving Images::   
 * Displaying Images::           
 * Representing Images::         
 * Plotting on top of Images::   
 * Color Conversion::            
 
 Object Oriented Programming
 
-* Creating a Class:
+* Creating a Class::
 * Manipulating Classes::
 * Indexing Objects::
 * Overloading Objects::
 
+Overloading Objects
+
+* Function Overloading::
+* Operator Overloading::
+* Precedence of Objects::
+
 System Utilities
 
 * Timing Utilities::            
 * Filesystem Utilities::        
 * File Archiving Utilities::
 * Networking Utilities::
 * Controlling Subprocesses::    
 * Process ID Information::      
@@ -514,75 +695,113 @@ System Utilities
 * Current Working Directory::   
 * Password Database Functions::  
 * Group Database Functions::    
 * System Information::          
 * Hashing Functions::
 
 Packages
 
-* Installing and Removing Packages::
-* Using Packages::
-* Administrating Packages::
-* Creating Packages::
+* Installing and Removing Packages::  
+* Using Packages::              
+* Administrating Packages::     
+* Creating Packages::           
+
+Creating Packages
+
 * The DESCRIPTION File::        
 * The INDEX file::              
 * PKG_ADD and PKG_DEL directives::  
 
 Dynamically Linked Functions
 
-* Oct-Files::
-* Mex-Files::
-* Standalone Programs::
+* Oct-Files::                   
+* Mex-Files::                   
+* Standalone Programs::         
+
+Oct-Files
+
+* Getting Started with Oct-Files::  
+* Matrices and Arrays in Oct-Files::  
+* Character Strings in Oct-Files::  
+* Cell Arrays in Oct-Files::    
+* Structures in Oct-Files::  
+* Sparse Matrices in Oct-Files::  
+* Accessing Global Variables in Oct-Files::  
+* Calling Octave Functions from Oct-Files::  
+* Calling External Code from Oct-Files::  
+* Allocating Local Memory in Oct-Files::  
+* Input Parameter Checking in Oct-Files::  
+* Exception and Error Handling in Oct-Files::  
+* Documentation and Test of Oct-Files::  
+
+Sparse Matrices in Oct-Files
+
+* Array and Sparse Differences::  
+* Creating Sparse Matrices in Oct-Files::  
+* Using Sparse Matrices in Oct-Files::  
+
+Mex-Files
+
+* Getting Started with Mex-Files::  
+* Working with Matrices and Arrays in Mex-Files::  
+* Character Strings in Mex-Files::  
+* Cell Arrays with Mex-Files::  
+* Structures with Mex-Files::  
+* Sparse Matrices with Mex-Files::  
+* Calling Other Functions in Mex-Files::  
 
 Test and Demo Functions
 
 * Test Functions::
 * Demonstration Functions::
 
 Tips and Standards
 
 * Style Tips::                  Writing clean and robust programs.
 * Coding Tips::                 Making code run faster.
-* Documentation Tips::          Writing readable documentation strings.
 * Comment Tips::                Conventions for writing comments.
 * Function Headers::            Standard headers for functions.
+* Documentation Tips::          Writing readable documentation strings.
 
-Known Causes of Trouble with Octave
+Contributing Guidelines
+
+* How to Contribute::
+* General Guidelines::
+* Octave Sources (m-files)::
+* C++ Sources::
+* Other Sources::	
+
+Trouble
 
 * Actual Bugs::                 Bugs we will fix later.
 * Reporting Bugs::              
 * Bug Criteria::                
 * Bug Lists::                   
 * Bug Reporting::               
 * Sending Patches::             
 * Service::                     
 
 Reporting Bugs
 
 * Bug Criteria::                
 * Where: Bug Lists.             Where to send your bug report.
 * Reporting: Bug Reporting.     How to report a bug effectively.
 * Patches: Sending Patches.     How to send a patch for Octave.
 
-Installing Octave
+Installation
 
 * Installation Problems::       
 
 Emacs Octave Support
 
 * Installing EOS::              
 * Using Octave Mode::           
 * Running Octave From Within Emacs::  
 * Using the Emacs Info Reader for Octave::  
-
-@c Grammar
-@c 
-@c * Keywords::                    
-
 @end detailmenu
 @end menu
 
 @c ------------------------------------------------------------------------
 
 @include preface.texi
 @include intro.texi
 @include basics.texi
@@ -620,29 +839,30 @@ Emacs Octave Support
 @include system.texi
 @include package.texi
 
 @c maybe add again later, if anyone every writes any really interesting
 @c fun stuff for Octave.
 @c
 @c @include amuse.texi
 
-@c Appendices start here.  Installation and bugs have to go before the
-@c readline and Info appendices because we want to have separate indices
-@c for them, and there appears to be no way to go back to the original
-@c set of indices once a redirection has taken place.
+@c ------------------------------------------------------------------------
+@c Appendices start here. 
 
 @include dynamic.texi
 @include testfun.texi
 @include tips.texi
 @include contrib.texi
 @include bugs.texi
 @include install.texi
 @include emacs.texi
 @c @include grammar.texi
 @include gpl.texi
 
+@c ------------------------------------------------------------------------
+@c Indices start here. 
+
 @include cp-idx.texi
 @c @include vr-idx.texi
 @include fn-idx.texi
 @include op-idx.texi
 
 @bye
diff --git a/doc/interpreter/plot.txi b/doc/interpreter/plot.txi
--- a/doc/interpreter/plot.txi
+++ b/doc/interpreter/plot.txi
@@ -18,18 +18,18 @@
 @c <http://www.gnu.org/licenses/>.
 
 @node Plotting
 @chapter Plotting
 @cindex plotting
 @cindex graphics
 
 @menu
-* Plotting Basics::             
-* Advanced Plotting::           
+* Plotting Basics::
+* Advanced Plotting::
 @end menu
 
 @node Plotting Basics
 @section Plotting Basics
 
 Octave makes it easy to create many different types of two- and
 three-dimensional plots using a few high-level functions.
 
diff --git a/doc/interpreter/set.txi b/doc/interpreter/set.txi
--- a/doc/interpreter/set.txi
+++ b/doc/interpreter/set.txi
@@ -21,17 +21,17 @@
 
 Octave has a limited number of functions for managing sets of data, where a
 set is defined as a collection of unique elements.  In Octave a set is
 represented as a vector of numbers.
 
 @DOCSTRING(unique)
 
 @menu
-* Set Operations:: 
+* Set Operations::
 @end menu
 
 @node Set Operations
 @section Set Operations
 
 Octave supports the basic set operations.  That is, Octave can compute
 the union, intersection, complement, and difference of two sets.
 Octave also supports the @emph{Exclusive Or} set operation, and
diff --git a/doc/interpreter/tips.txi b/doc/interpreter/tips.txi
--- a/doc/interpreter/tips.txi
+++ b/doc/interpreter/tips.txi
@@ -12,17 +12,17 @@
 @c ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 @c FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
 @c for more details.
 @c 
 @c You should have received a copy of the GNU General Public License
 @c along with Octave; see the file COPYING.  If not, see
 @c <http://www.gnu.org/licenses/>.
 
-@node Tips
+@node Tips and Standards
 @appendix Tips and Standards
 @cindex tips
 @cindex standards of coding style
 @cindex coding standards
 
 This chapter describes no additional features of Octave.  Instead it
 gives advice on making effective use of the features described in the
 previous chapters.
