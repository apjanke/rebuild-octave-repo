# HG changeset patch
# User jwe
# Date 855439224 0
#      Sat Feb 08 22:00:24 1997 +0000
# Node ID 00b2eff19bf5db365eaed3152f8320cc3197281d
# Parent  be083921a2d465fd9830c0cce4ece12bc50da2b9
[project @ 1997-02-08 21:58:49 by jwe]

diff --git a/README.Linux b/README.Linux
--- a/README.Linux
+++ b/README.Linux
@@ -42,28 +42,35 @@ for the libraries.  If it is not, please
 libraries to clarify the documentation.
 
 Please note that I am NOT recommending that everyone running Linux and
 using Octave should install the same versions of the libraries and
 compilers that I have.  I am simply saying that the versions listed
 above work for me.  Other version combinations may also work, but I
 don't have time to map out all the possibilities...
 
+Craig Earls <cpearls@ziplink.net> reports that the order of installing
+libc and lig++ is important.  If libg++ is installed *first*, Octave
+will work, but if the libraries are installed in the reverse orfer,
+Octave fails.  The conflict apparently arises because libc and libg++
+shared libraries both use libio, however no one seems to be able to
+provide a clear explanation of exactly what is happening.
+
 Octave won't even compile
 -------------------------
 
 If you can't compile Octave, you should first check to see that your
 compiler and header files are properly installed.  Do you have
 multiple versions of the g++ include files on your system?  Are you
 sure that your copy of g++ is finding the right set?  You can find out
 by compiling a simple C++ program with -v:
 
 bash$ cat foo.cc
 #include <iostream.h>
-int main (void} { cerr << "yo\n"; return 0; }
+int main (void) { cerr << "yo\n"; return 0; }
 
 bash$ g++ -v foo.cc
 gcc -v foo.cc -lg++ -lstdc++ -lm
 Reading specs from /usr/lib/gcc-lib/i486-linux/2.7.2/specs
 gcc version 2.7.2
  /usr/lib/gcc-lib/i486-linux/2.7.2/cpp -lang-c++ -v -undef ...
 #include "..." search starts here:
 #include <...> search starts here:
diff --git a/liboctave/Array2-idx.h b/liboctave/Array2-idx.h
--- a/liboctave/Array2-idx.h
+++ b/liboctave/Array2-idx.h
@@ -158,31 +158,37 @@ Array2<T>::index (idx_vector& idx_i, idx
   int nr = d1;
   int nc = d2;
 
   int n = idx_i.freeze (nr, "row", liboctave_pzo_flag);
   int m = idx_j.freeze (nc, "column", liboctave_pzo_flag);
 
   if (idx_i && idx_j)
     {
-      if (n == 0)
+      if (idx_i.orig_empty () || idx_j.orig_empty ())
 	{
-	  if (m == 0 || idx_j.is_colon_equiv (nc, 1))
+	  retval.resize (n, m);
+	}
+      else if (n == 0)
+	{
+	  if (m = 0)
 	    retval.resize (0, 0);
+	  else if (idx_j.is_colon_equiv (nc, 1))
+	    retval.resize (0, nc);
 	  else
-	    (*current_liboctave_error_handler)
-	      ("invalid row index = 0");
+	    (*current_liboctave_error_handler) ("invalid row index = 0");
 	}
       else if (m == 0)
 	{
-	  if (n == 0 || idx_i.is_colon_equiv (nr, 1))
+	  if (n == 0)
 	    retval.resize (0, 0);
+	  else if (idx_i.is_colon_equiv (nr, 1))
+	    retval.resize (nr, 0);
 	  else
-	    (*current_liboctave_error_handler)
-	      ("invalid column index = 0");
+	    (*current_liboctave_error_handler) ("invalid column index = 0");
 	}
       else if (idx_i.is_colon_equiv (nr) && idx_j.is_colon_equiv (nc))
 	{
 	  retval = *this;
 	}
       else
 	{
 	  retval.resize (n, m);
diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,16 @@
+Fri Feb  7 13:15:55 1997  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* idx-vector.h (idx_vector::orig_empty): New function.
+
+	* Array2-idx.h (Array2<T>::index (idx_vector&, idx_vector&)):
+	Don't always resize to [](0x0) if one of the indices is empty or
+	zero.
+
 Sun Feb  2 22:33:44 1997  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* cmd-hist.cc (command_history::read): New arg, must_exist.
 	Set line_in_file here too.
 	(command_history::read_range): New arg, must_exist.
 
 Fri Jan 31 09:21:57 1997  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
diff --git a/liboctave/idx-vector.h b/liboctave/idx-vector.h
--- a/liboctave/idx-vector.h
+++ b/liboctave/idx-vector.h
@@ -212,16 +212,22 @@ public:
 
   int is_colon (void) const { return rep->is_colon (); }
   int is_colon_equiv (int n, int sort_uniq = 0) const
     { return rep->is_colon_equiv (n, sort_uniq); }
 
   int orig_rows (void) const { return rep->orig_rows (); }
   int orig_columns (void) const { return rep->orig_columns (); }
 
+  int orig_empty (void) const
+    {
+      return (! is_colon ()
+	      && (orig_rows () == 0 || orig_columns () == 0));
+    }
+
 // Unsafe.  Avoid at all cost.
   void shorten (int n) { rep->shorten (n); }
 
 // i/o
 
   int freeze (int z_len, const char *tag, int prefer_zero_one = 0,
 	      int resize_ok = 0)
     { return rep->freeze (z_len, tag, prefer_zero_one, resize_ok); }
diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,8 +1,12 @@
+Fri Feb  7 12:55:55 1997  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* specfun/erfinv.m: Fix typo in last change.
+
 Fri Jan 31 09:30:16 1997  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* image/loadimage.m: Make it possible to load files with image
 	data named X or img.
 
 	* image/default.img: Change name of image from X to img to match
 	what saveimage does now.
 
diff --git a/scripts/specfun/erfinv.m b/scripts/specfun/erfinv.m
--- a/scripts/specfun/erfinv.m
+++ b/scripts/specfun/erfinv.m
@@ -33,17 +33,17 @@ function y = erfinv (x)
   y = zeros (m * n, 1);
   
   i = find ((x < -1) | (x > 1));
   if any (i)
     y(i) = NaN * ones (length (i), 1);
   endif
 
   t = find (x == -1);
-  y (tmp) = (-Inf) * ones (size (t));
+  y (t) = (-Inf) * ones (size (t));
 
   t = find (x == 1);
   y (t) = Inf * ones (size (t));
   
   i = find ((x > -1) & (x < 1));
   if any (i)
     z_old = ones (length (i), 1);
     z_new = zeros (length (i), 1);
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,14 @@
+Wed Feb  5 14:30:44 1997  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* oct-stream.cc (scanf_format_list::process_conversion): Accept
+	but don't actually use h, l, and L modifiers.  Always insert l
+	modifier for floating point conversions.	
+
 Fri Jan 31 13:55:10 1997  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* pager.cc (do_sync): Always flush the cout stream after writing.
 
 Wed Jan 29 08:25:29 1997  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* defaults.cc (exec_path): Don't include bin_dir in std_path.
 
diff --git a/src/oct-stream.cc b/src/oct-stream.cc
--- a/src/oct-stream.cc
+++ b/src/oct-stream.cc
@@ -289,39 +289,41 @@ scanf_format_list::process_conversion (c
 		  c = s[i++];
 		  width = width * 10 + c - '0';
 		  *buf << c;
 		}
 	    }
 	  break;
 
 	case 'h': case 'l': case 'L':
+	  // We accept these but we don't actually use them.
 	  if (modifier != '\0')
 	    nconv = -1;
 	  else
-	    {
-	      modifier = s[i];
-	      *buf << s[i++];
-	    }
+	    modifier = s[i++];
 	  break;
 
 	case 'd': case 'i': case 'o': case 'u': case 'x':
 	  if (modifier == 'L')
 	    {
 	      nconv = -1;
 	      break;
 	    }
 	  goto fini;
 
 	case 'e': case 'f': case 'g':
 	  if (modifier == 'h')
 	    {
 	      nconv = -1;
 	      break;
 	    }
+
+	  // No float or long double conversions, thanks.
+	  *buf << 'l';
+
 	  goto fini;
 
 	case 'c': case 's': case 'p': case '%': case '[':
 	  if (modifier != '\0')
 	    {
 	      nconv = -1;
 	      break;
 	    }
