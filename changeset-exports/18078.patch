# HG changeset patch
# User Rik <rik@octave.org>
# Date 1386187543 28800
#      Wed Dec 04 12:05:43 2013 -0800
# Node ID b06a9768b6436e477194352829505acdee756b94
# Parent  42e6cdc76f4b3e08eb6cb997bc81e9e00590bcf9
doc: Don't use @table @qcode to avoid problems with Texinfo 5.2.

* plot.txi: Replace "@table @qcode" with "@table @asis".
Use "@item @qcode{xx}" for each table item.

* file-io.cc (Ffread): Replace "@table @qcode" with "@table @asis".
Use "@item @qcode{xx}" for each table item.

* validateattributes.m: Replace "@table @qcode" with "@table @asis".
Use "@item @qcode{xx}" for each table item.

diff --git a/doc/interpreter/plot.txi b/doc/interpreter/plot.txi
--- a/doc/interpreter/plot.txi
+++ b/doc/interpreter/plot.txi
@@ -2626,27 +2626,27 @@ one, or by name.  Recognized color names
 @cindex graphics line styles
 
 Line styles are specified by the following properties:
 
 @table @code
 @item linestyle
 May be one of
 
-@table @code
-@item "-"
+@table @asis
+@item @qcode{"-"}
 Solid line.  [default]
 
-@item "--"
+@item @qcode{"--"}
 Dashed line.
 
-@item ":"
+@item @qcode{":"}
 Dotted line.
 
-@item "-."
+@item @qcode{"-."}
 A dash-dot line.
 
 @item @qcode{"none"}
 No line.  Points will still be marked using the current Marker Style.
 @end table
 
 @item linewidth
 A number specifying the width of the line.  The default is 1.  A value
diff --git a/libinterp/corefcn/file-io.cc b/libinterp/corefcn/file-io.cc
--- a/libinterp/corefcn/file-io.cc
+++ b/libinterp/corefcn/file-io.cc
@@ -1543,24 +1543,24 @@ fread (f, 10, \"3*single=>single\", 8)\n
 \n\
 @noindent\n\
 will omit the final 8-byte skip because the last read will not be\n\
 a complete block of 3 values.\n\
 \n\
 The optional argument @var{arch} is a string specifying the data format\n\
 for the file.  Valid values are\n\
 \n\
-@table @code\n\
+@table @asis\n\
 @item @qcode{\"native\"}\n\
 The format of the current machine.\n\
 \n\
-@item \"ieee-be\"\n\
+@item @qcode{\"ieee-be\"}\n\
 IEEE big endian.\n\
 \n\
-@item \"ieee-le\"\n\
+@item @qcode{\"ieee-le\"}\n\
 IEEE little endian.\n\
 @end table\n\
 \n\
 The data read from the file is returned in @var{val}, and the number of\n\
 values read is returned in @code{count}\n\
 @seealso{fwrite, fgets, fgetl, fscanf, fopen}\n\
 @end deftypefn")
 {
diff --git a/scripts/general/validateattributes.m b/scripts/general/validateattributes.m
--- a/scripts/general/validateattributes.m
+++ b/scripts/general/validateattributes.m
@@ -31,135 +31,137 @@
 ## the argument name @var{arg_name}, and its position in the input
 ## @var{arg_idx}.
 ##
 ## @var{classes} must be a cell array of strings (an empty cell array is
 ## allowed) with the name of classes (remember that a class name is case
 ## sensitive).  In addition to the class name, the following categories
 ## names are also valid:
 ##
-## @table @qcode
-## @item "float"
+## @table @asis
+## @item @qcode{"float"}
 ## Floating point value comprising classes @qcode{"double"} and
 ## @qcode{"single"}.
 ##
-## @item "integer"
+## @item @qcode{"integer"}
 ## Integer value comprising classes (u)int8, (u)int16, (u)int32, (u)int64.
 ##
-## @item "numeric"
+## @item @qcode{"numeric"}
 ## Numeric value comprising either a floating point or integer value.
 ##
 ## @end table
 ##
 ## @var{attributes} must be a cell array with names of checks for @var{A}.
 ## Some of them require an additional value to be supplied right after the
 ## name (see details for each below).
 ##
-## @table @qcode
-## @item "<="
+## @table @asis
+## @item @qcode{"<="}
 ## All values are less than or equal to the following value in @var{attributes}.
 ##
-## @item "<"
+## @item @qcode{"<"}
 ## All values are less than the following value in @var{attributes}.
 ##
-## @item ">="
-## All values are greater than or equal to the following value in @var{attributes}.
+## @item @qcode{">="}
+## All values are greater than or equal to the following value in
+## @var{attributes}.
 ##
-## @item ">"
+## @item @qcode{">"}
 ## All values are greater than the following value in @var{attributes}.
 ##
-## @item "2d"
-## A 2 dimensional matrix.  Note that vectors and empty matrices have
+## @item @qcode{"2d"}
+## A 2-dimensional matrix.  Note that vectors and empty matrices have
 ## 2 dimensions, one of them being of length 1, or both length 0.
 ##
-## @item "3d"
-## Has no more than 3 dimensions.  A 2 dimensional matrix is a 3D matrix
+## @item @qcode{"3d"}
+## Has no more than 3 dimensions.  A 2-dimensional matrix is a 3-D matrix
 ## whose 3rd dimension is of length 1.
 ##
-## @item "binary"
+## @item @qcode{"binary"}
 ## All values are either 1 or 0.
 ##
-## @item "column"
+## @item @qcode{"column"}
 ## Values are arranged in a single column.
 ##
-## @item "decreasing"
+## @item @qcode{"decreasing"}
 ## No value is @var{NaN}, and each is less than the preceding one.
 ##
-## @item "even"
+## @item @qcode{"even"}
 ## All values are even numbers.
 ##
-## @item "finite"
+## @item @qcode{"finite"}
 ## All values are finite.
 ##
-## @item "increasing"
+## @item @qcode{"increasing"}
 ## No value is @var{NaN}, and each is greater than the preceding one.
 ##
-## @item "integer"
+## @item @qcode{"integer"}
 ## All values are integer.  This is different than using @code{isinteger}
 ## which only checks its an integer type.  This checks that each value in
 ## @var{A} is an integer value, i.e., it has no decimal part.
 ##
-## @item "ncols"
+## @item @qcode{"ncols"}
 ## Has exactly as many columns as the next value in @var{attributes}.
 ##
-## @item "ndims"
+## @item @qcode{"ndims"}
 ## Has exactly as many dimensions as the next value in @var{attributes}.
 ##
-## @item "nondecreasing"
-## No value is @var{NaN}, and each is greater than or equal to the preceding one.
+## @item @qcode{"nondecreasing"}
+## No value is @var{NaN}, and each is greater than or equal to the preceding
+## one.
 ##
-## @item "nonempty"
+## @item @qcode{"nonempty"}
 ## It is not empty.
 ##
-## @item "nonincreasing"
+## @item @qcode{"nonincreasing"}
 ## No value is @var{NaN}, and each is less than or equal to the preceding one.
 ##
-## @item "nonnan"
+## @item @qcode{"nonnan"}
 ## No value is a @code{NaN}.
 ##
-## @item "nonnegative"
+## @item @qcode{"non-negative"}
 ## All values are non negative.
 ##
-## @item "nonsparse"
+## @item @qcode{"nonsparse"}
 ## It is not a sparse matrix.
 ##
-## @item "nonzero"
+## @item @qcode{"nonzero"}
 ## No value is zero.
 ##
-## @item "nrows"
+## @item @qcode{"nrows"}
 ## Has exactly as many rows as the next value in @var{attributes}.
 ##
-## @item "numel"
+## @item @qcode{"numel"}
 ## Has exactly as many elements as the next value in @var{attributes}.
 ##
-## @item "odd"
+## @item @qcode{"odd"}
 ## All values are odd numbers.
 ##
-## @item "positive"
+## @item @qcode{"positive"}
 ## All values are positive.
 ##
-## @item "real"
+## @item @qcode{"real"}
 ## It is a non-complex matrix.
 ##
-## @item "row"
+## @item @qcode{"row"}
 ## Values are arranged in a single row.
 ##
-## @item "scalar"
+## @item @qcode{"scalar"}
 ## It is a scalar.
 ##
-## @item "size",
+## @item @qcode{"size",}
 ## Its size has length equal to the values of the next in @var{attributes}.
 ## The next value must is an array with the length for each dimension.  To
 ## ignore the check for a certain dimension, the value of @code{NaN} can be
 ## used.
 ##
-## @item "square"
+## @item @qcode{"square"}
 ## Is a square matrix.
 ##
-## @item "vector"
+## @item @qcode{"vector"}
 ## Values are arranged in a single vector (column or vector).
 ##
 ## @end table
 ##
 ## @seealso{nargin, varargin, isa, validatestring}
 ## @end deftypefn
 
 function validateattributes (A, cls, attr, varargin)
