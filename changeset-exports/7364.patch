# HG changeset patch
# User jwe
# Date 1200127097 0
#      Sat Jan 12 08:38:17 2008 +0000
# Node ID 0e07f78369d167ff7a9681ceb6590176bce69501
# Parent  c31e5dab4f85b99d8fc0c34c7ec902cd3be35b16
[project @ 2008-01-12 08:38:17 by jwe]

diff --git a/src/graphics.cc b/src/graphics.cc
--- a/src/graphics.cc
+++ b/src/graphics.cc
@@ -262,61 +262,61 @@ color_property::set (const octave_value&
   else 
     error ("invalid value for color property \"%s\"",
            get_name ().c_str ());
 }
 
 bool
 array_property::validate (const octave_value& v)
 {
-  bool ok = false;
+  bool xok = false;
 
   // FIXME: should we always support []?
   if (v.is_empty () && v.is_double_type ())
     return true;
 
   // check value type
   if (type_constraints.size () > 0)
     {
       for (std::list<std::string>::const_iterator it = type_constraints.begin ();
-           ! ok && it != type_constraints.end (); ++it)
+           ! xok && it != type_constraints.end (); ++it)
         if ((*it) == v.type_name ())
-          ok = true;
+          xok = true;
     }
   else
-    ok = v.is_double_type ();
+    xok = v.is_double_type ();
 
-  if (ok)
+  if (xok)
     {
       dim_vector vdims = v.dims ();
       int vlen = vdims.length ();
 
-      ok = false;
+      xok = false;
 
       // check value size
       if (size_constraints.size () > 0)
         for (std::list<dim_vector>::const_iterator it = size_constraints.begin ();
-             ! ok && it != size_constraints.end (); ++it)
+             ! xok && it != size_constraints.end (); ++it)
           {
             dim_vector itdims = (*it);
 
             if (itdims.length () == vlen)
               {
-                ok = true;
+                xok = true;
 
-                for (int i = 0; ok && i < vlen; i++)
+                for (int i = 0; xok && i < vlen; i++)
                   if (itdims(i) >= 0 && itdims(i) != vdims(i))
-                    ok = false;
+                    xok = false;
               }
           }
       else
         return true;
     }
 
-  return ok;
+  return xok;
 }
 
 void
 handle_property::set (const octave_value& v)
 {
   double dv = v.double_value ();
 
   if (! error_state)
@@ -330,17 +330,17 @@ handle_property::set (const octave_value
             dv, get_name ().c_str ());
     }
   else
     error ("set: invalid graphics handle for property \"%s\"",
         get_name ().c_str ());
 }
 
 bool
-callback_property::validate (const octave_value& v) const
+callback_property::validate (const octave_value&) const
 {
   // FIXME: implement this
   return true;
 }
 
 void
 callback_property::execute (void)
 {
@@ -1175,20 +1175,20 @@ axes::properties::set_defaults (base_gra
   ytickmode = "auto";
   ztickmode = "auto";
   xticklabel = "";
   yticklabel = "";
   zticklabel = "";
   xticklabelmode = "auto";
   yticklabelmode = "auto";
   zticklabelmode = "auto";
-  color = octave_value (color_values (0, 0, 0));
-  xcolor = octave_value (color_values ("black"));
-  ycolor = octave_value (color_values ("black"));
-  zcolor = octave_value (color_values ("black"));
+  color = color_values (0, 0, 0);
+  xcolor = color_values ("black");
+  ycolor = color_values ("black");
+  zcolor = color_values ("black");
   xscale = "linear";
   yscale = "linear";
   zscale = "linear";
   xdir = "normal";
   ydir = "normal";
   zdir = "normal";
   yaxislocation = "left";
   xaxislocation = "bottom";
diff --git a/src/graphics.h.in b/src/graphics.h.in
--- a/src/graphics.h.in
+++ b/src/graphics.h.in
@@ -209,17 +209,17 @@ public:
   graphics_handle get_parent (void) const { return parent; }
 
   void set_parent (const graphics_handle &h) { parent = h; }
 
   bool is_hidden (void) const { return hidden; }
 
   void set_hidden (bool flag) { hidden = flag; }
 
-  virtual void set (const octave_value& val)
+  virtual void set (const octave_value&)
     { error ("set: invalid property \"%s\"", name.c_str ()); }
 
   virtual octave_value get (void) const
     {
       error ("get: invalid property \"%s\"", name.c_str ());
       return octave_value ();
     }
 
@@ -317,29 +317,29 @@ private:
   // Might also want to cache
   std::string default_val;
   std::set<caseless_str> possible_vals;
 };
 
 class radio_property : public base_property
 {
 public:
-  radio_property (const std::string& name, const graphics_handle& h,
+  radio_property (const std::string& nm, const graphics_handle& h,
                   const radio_values& v = radio_values ())
-    : base_property (name, h),
+    : base_property (nm, h),
       vals (v), current_val (v.default_value ()) { }
 
-  radio_property (const std::string& name, const graphics_handle& h,
+  radio_property (const std::string& nm, const graphics_handle& h,
                   const std::string& v)
-    : base_property (name, h),
+    : base_property (nm, h),
       vals (v), current_val (vals.default_value ()) { }
 
-  radio_property (const std::string& name, const graphics_handle& h,
+  radio_property (const std::string& nm, const graphics_handle& h,
                   const radio_values& v, const std::string& def)
-    : base_property (name, h),
+    : base_property (nm, h),
       vals (v), current_val (def) { }
 
   radio_property (const radio_property& p)
     : base_property (p), vals (p.vals), current_val (p.current_val) { }
 
   void set (const octave_value& newval) 
   {
     if (newval.is_string ())
@@ -434,41 +434,41 @@ class color_property : public base_prope
 {
 public:
   color_property (const color_values& c, const radio_values& v)
     : base_property ("", graphics_handle ()),
       current_type (color_t), color_val (c), radio_val (v),
       current_val (v.default_value ())
   { }
 
-  color_property (const std::string& name, const graphics_handle& h,
+  color_property (const std::string& nm, const graphics_handle& h,
                   const color_values& c = color_values (),
                   const radio_values& v = radio_values ())
-    : base_property (name, h),
+    : base_property (nm, h),
       current_type (color_t), color_val (c), radio_val (v),
       current_val (v.default_value ())
   { }
 
-  color_property (const std::string& name, const graphics_handle& h,
+  color_property (const std::string& nm, const graphics_handle& h,
                   const radio_values& v)
-    : base_property (name, h),
+    : base_property (nm, h),
       current_type (radio_t), color_val (color_values ()), radio_val (v),
       current_val (v.default_value ())
   { }
 
-  color_property (const std::string& name, const graphics_handle& h,
+  color_property (const std::string& nm, const graphics_handle& h,
                   const std::string& v)
-    : base_property (name, h),
+    : base_property (nm, h),
       current_type (radio_t), color_val (color_values ()), radio_val (v),
       current_val (radio_val.default_value ())
   { }
   
-  color_property (const std::string& name, const graphics_handle& h,
+  color_property (const std::string& nm, const graphics_handle& h,
                   const color_property& v)
-    : base_property (name, h),
+    : base_property (nm, h),
       current_type (v.current_type), color_val (v.color_val),
       radio_val (v.radio_val), current_val (v.current_val)
   { }
 
   color_property (const color_property& p)
     : base_property (p), current_type (p.current_type),
       color_val (p.color_val), radio_val (p.radio_val),
       current_val (p.current_val) { }
@@ -521,19 +521,19 @@ private:
   std::string current_val;
 };
 
 // ---------------------------------------------------------------------
 
 class double_property : public base_property
 {
 public:
-  double_property (const std::string& name, const graphics_handle& h,
+  double_property (const std::string& nm, const graphics_handle& h,
                    double d = 0)
-    : base_property (name, h),
+    : base_property (nm, h),
       current_val (d) { }
 
   double_property (const double_property& p)
     : base_property (p), current_val (p.current_val) { }
 
   void set (const octave_value& v)
     {
       if (v.is_scalar_type () && v.is_real_type ())
@@ -557,19 +557,19 @@ private:
   double current_val;
 };
 
 // ---------------------------------------------------------------------
 
 class array_property : public base_property
 {
 public:
-  array_property (const std::string& name, const graphics_handle& h,
+  array_property (const std::string& nm, const graphics_handle& h,
                   const octave_value& m)
-    : base_property (), data (m) { }
+    : base_property (nm, h), data (m) { }
 
   octave_value get (void) const { return data; }
 
   void set (const octave_value& v)
     {
       if (validate (v))
         data = v;
       else
@@ -601,27 +601,27 @@ private:
 // ---------------------------------------------------------------------
 
 class data_property : public base_property
 {
 public:
   data_property (void)
     : base_property ("", graphics_handle ()) { }
 
-  data_property (const std::string& name, const graphics_handle& h,
+  data_property (const std::string& nm, const graphics_handle& h,
                  const NDArray& m = NDArray ())
-    : base_property (name, h),
+    : base_property (nm, h),
       data (m), xmin (octave_Inf), xmax (-octave_Inf), xminp (octave_Inf)
   {
     get_data_limits ();
   }
 
-  data_property (const std::string& name, const graphics_handle& h,
+  data_property (const std::string& nm, const graphics_handle& h,
                  const Matrix& m)
-    : base_property (name, h),
+    : base_property (nm, h),
       data (m), xmin (octave_Inf), xmax (-octave_Inf), xminp (octave_Inf)
   {
     get_data_limits ();
   }
 
   data_property (const data_property& p)
     : base_property (p), data (p.data),
       xmin (p.xmin), xmax (p.xmax), xminp (p.xminp) { }
@@ -683,24 +683,24 @@ private:
   }
 };
 
 // ---------------------------------------------------------------------
 
 class bool_property : public radio_property
 {
 public:
-  bool_property (const std::string& name, const graphics_handle& h,
+  bool_property (const std::string& nm, const graphics_handle& h,
                  bool val)
-    : radio_property (name, h, radio_values (val ? "{on}|off" : "on|{off}"))
+    : radio_property (nm, h, radio_values (val ? "{on}|off" : "on|{off}"))
     { }
 
-  bool_property (const std::string& name, const graphics_handle& h,
+  bool_property (const std::string& nm, const graphics_handle& h,
                  const char* val)
-    : radio_property (name, h, radio_values ("on|off"), val)
+    : radio_property (nm, h, radio_values ("on|off"), val)
     { }
 
   bool_property (const bool_property& p)
     : radio_property (p) { }
 
   void set (const octave_value& val)
     {
       if (val.is_bool_scalar ())
@@ -718,19 +718,19 @@ public:
     }
 };
 
 // ---------------------------------------------------------------------
 
 class handle_property : public base_property
 {
 public:
-  handle_property (const std::string& name, const graphics_handle& h,
+  handle_property (const std::string& nm, const graphics_handle& h,
                    const graphics_handle& val = graphics_handle ())
-    : base_property (name, h),
+    : base_property (nm, h),
       current_val (val) { }
 
   handle_property (const handle_property& p)
     : base_property (p), current_val (p.current_val) { }
 
   OCTINTERP_API void set (const octave_value& v);
 
   octave_value get (void) const { return current_val.as_octave_value (); }
@@ -753,19 +753,19 @@ private:
   graphics_handle current_val;
 };
 
 // ---------------------------------------------------------------------
 
 class any_property : public base_property
 {
 public:
-  any_property (const std::string& name, const graphics_handle& h,
+  any_property (const std::string& nm, const graphics_handle& h,
                   const octave_value& m = Matrix ())
-    : base_property (), data (m) { }
+    : base_property (nm, h), data (m) { }
 
   octave_value get (void) const { return data; }
 
   void set (const octave_value& v) { data = v; }
 
   any_property& operator = (const octave_value& val)
     {
       set (val);
@@ -776,19 +776,19 @@ private:
   octave_value data;
 };
 
 // ---------------------------------------------------------------------
 
 class callback_property : public base_property
 {
 public:
-  callback_property (const std::string& name, const graphics_handle& h,
+  callback_property (const std::string& nm, const graphics_handle& h,
                      const octave_value& m)
-    : base_property (), callback (m) { }
+    : base_property (nm, h), callback (m) { }
 
   octave_value get (void) const { return callback; }
 
   void set (const octave_value& v)
     {
       if (validate (v))
         callback = v;
       else
