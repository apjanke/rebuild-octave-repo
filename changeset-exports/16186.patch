# HG changeset patch
# User Rik <rik@octave.org>
# Date 1362356541 28800
#      Sun Mar 03 16:22:21 2013 -0800
# Node ID b4a6895a9863320947bbc1b2de75e9006fbc1901
# Parent  e810e7d941a1b2d182477fd2a6612af3ebd55043
Use proper OO-class for __rangeidx_helper().

* liboctave/array/Range.cc(__rangeidx_helper): Make __rangeidx_helper
a class, instead of a struct, for better visibility into what it does.

diff --git a/liboctave/array/Range.cc b/liboctave/array/Range.cc
--- a/liboctave/array/Range.cc
+++ b/liboctave/array/Range.cc
@@ -118,41 +118,44 @@ Range::elem (octave_idx_type i) const
           || (rng_inc < 0 && end <= rng_limit))
         return rng_limit;
       else
         return end;
     }
 #endif
 }
 
-// Pseudo-class used for idx_vector.loop () function call
-struct _rangeidx_helper
+// Helper class used solely for idx_vector.loop () function call
+class __rangeidx_helper
 {
-  double *array, base, inc, limit;
-  octave_idx_type nmax;
-
-  _rangeidx_helper (double *a, double b, double i, double l, octave_idx_type n)
+ public:
+  __rangeidx_helper (double *a, double b, double i, double l, octave_idx_type n)
     : array (a), base (b), inc (i), limit (l), nmax (n-1) { }
 
   void operator () (octave_idx_type i)
     {
       if (i == 0)
         *array++ = base;
       else if (i < nmax) 
         *array++ = base + i * inc;
       else
         {
           double end = base + i * inc;
-          if ((inc > 0 && end >= limit)
-              || (inc < 0 && end <= limit))
+          if ((inc > 0 && end >= limit) || (inc < 0 && end <= limit))
             *array++ = limit;
           else
             *array++ = end;
         }
     }
+
+ private:
+
+  double *array, base, inc, limit;
+  octave_idx_type nmax;
+
 };
 
 Array<double>
 Range::index (const idx_vector& i) const
 {
   Array<double> retval;
 
   octave_idx_type n = rng_nelem;
@@ -170,25 +173,27 @@ Range::index (const idx_vector& i) const
       octave_idx_type il = i.length (n);
 
       // taken from Array.cc.
       if (n != 1 && rd.is_vector ())
         rd = dim_vector (1, il);
 
       retval.clear (rd);
 
-      // idx_vector loop across all values in i, executing _rangeidx_helper (i) foreach i
-      i.loop (n, _rangeidx_helper (retval.fortran_vec (),
-                                   rng_base, rng_inc, rng_limit, rng_nelem));
+      // idx_vector loop across all values in i,
+      // executing __rangeidx_helper (i) for each i
+      i.loop (n, __rangeidx_helper (retval.fortran_vec (),
+                                    rng_base, rng_inc, rng_limit, rng_nelem));
     }
 
   return retval;
 }
 
 // NOTE: max and min only return useful values if nelem > 0.
+//       do_minmax_body() in max.cc avoids calling Range::min/max if nelem == 0.
 
 double
 Range::min (void) const
 {
   double retval = 0.0;
   if (rng_nelem > 0)
     {
       if (rng_inc > 0)
