# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1242386678 -7200
#      Fri May 15 13:24:38 2009 +0200
# Node ID 472f0e22aa60ca0dc2313b3d55452aa6d43e2b8a
# Parent  72620af9cbaff88cbd74862d07e7564e0e50a5bd
guard against implicit instantiation

diff --git a/liboctave/Array.cc b/liboctave/Array.cc
--- a/liboctave/Array.cc
+++ b/liboctave/Array.cc
@@ -2683,16 +2683,25 @@ Array<T>::print_info (std::ostream& os, 
      << prefix << "slice_len:   " << slice_len << '\n';
 
   // 2D info:
   //
   //     << pefix << "rows: " << rows () << "\n"
   //     << prefix << "cols: " << cols () << "\n";
 }
 
+template <class T>
+void Array<T>::instantiation_guard ()
+{
+  // This guards against accidental implicit instantiations.
+  // Array<T> instances should always be explicit and use INSTANTIATE_ARRAY.
+  T::__xXxXx__();
+}
+
 #define INSTANTIATE_ARRAY(T, API) \
+  template <> void Array<T>::instantiation_guard () { } \
   template class API Array<T>
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
diff --git a/liboctave/Array.h b/liboctave/Array.h
--- a/liboctave/Array.h
+++ b/liboctave/Array.h
@@ -624,16 +624,19 @@ public:
     U *p = result.fortran_vec ();
 
     std::transform (m, m + len, p, fcn);
 
     return result;
   }
 
   template <class U> friend class Array;
+
+private:
+  static void instantiation_guard ();
 };
 
 #endif
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,14 @@
+2009-05-15  Jaroslav Hajek  <highegg@gmail.com>
+	
+	* Array.cc (Array<T>::instantiation_guard): New function
+	(INSTANTIATE_ARRAY): Always override it here.
+	* Array.h: Declare it.
+
 2009-05-15  Jaroslav Hajek  <highegg@gmail.com>
 
 	* ArrayN-idx.h: Remove file.
 	* ArrayN.cc: Don't include it.
 	* MArrayN.cc: Dtto.
 
 2009-05-09  Jaroslav Hajek  <highegg@gmail.com>
 
