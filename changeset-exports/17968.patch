# HG changeset patch
# User Rik <rik@octave.org>
# Date 1384979336 28800
#      Wed Nov 20 12:28:56 2013 -0800
# Node ID 43c199e83ed7a0e90f29dd3a03b3274cacd84022
# Parent  303157af491fc12d51030e3019296d81b462ef1b
Reap child process in popen2 %!test block.

* syscalls.cc (popen2): Add waitpid() call in %!test block to reap child.
Add seealso links to popen, waitpid in docstring.

diff --git a/libinterp/corefcn/syscalls.cc b/libinterp/corefcn/syscalls.cc
--- a/libinterp/corefcn/syscalls.cc
+++ b/libinterp/corefcn/syscalls.cc
@@ -278,19 +278,20 @@ fclose (out);\n\
 waitpid (pid);\n\
 \n\
    @print{} these\n\
    @print{} strings\n\
    @print{} some\n\
    @print{} are\n\
 @end example\n\
 \n\
-Note that @code{popen2}, unlike @code{popen}, will not @qcode{\"reap\"} the\n\
+Note that @code{popen2}, unlike @code{popen}, will not @nospell{\"reap\"} the\n\
 child process.  If you don't use @code{waitpid} to check the child's\n\
 exit status, it will linger until Octave exits.\n\
+@seealso{popen, waitpid}\n\
 @end deftypefn")
 {
   octave_value_list retval;
 
   retval(2) = -1;
   retval(1) = Matrix ();
   retval(0) = Matrix ();
 
@@ -413,16 +414,17 @@ exit status, it will linger until Octave
 %!     if (++errs == 100)
 %!       done = true;
 %!     endif
 %!   else
 %!     done = true;
 %!   endif
 %! until (done)
 %! fclose (out);
+%! waitpid (pid);
 %! if (unix_sort)
 %!   assert (str, {"these\n","strings\n","some\n","are\n"});
 %! else
 %!   assert (str, {"these\r\n","strings\r\n","some\r\n","are\r\n"});
 %! endif
 */
 
 DEFUNX ("fcntl", Ffcntl, args, ,
