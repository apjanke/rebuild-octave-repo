# HG changeset patch
# User jwe
# Date 1041622564 0
#      Fri Jan 03 19:36:04 2003 +0000
# Node ID be631c1720eac5dcb83463acb91456ffac9888c1
# Parent  e7e10ce42860883ceb32014c5a9c083e1064a5bc
[project @ 2003-01-03 19:36:04 by jwe]

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,10 +1,15 @@
 2003-01-03  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
+	* pt-plot.cc (subplot::extract_plot_data): Call single_subsref,
+	not subsref.
+	* ov.h, ov.cc (single_subsref (const std::string&, const
+	octave_value_list&)): Rename from subsref.
+
 	* symtab.cc (symbol_table::rename): Explicitly convert C string to
 	std::string so type of second arg of ?: matches third.
 	(symbol_table::lookup): Likewise.
 
 	* mappers.cc: Remove std:: qualifiers from C library names.
 
 2003-01-03  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
diff --git a/src/ov-base-mat.h b/src/ov-base-mat.h
--- a/src/ov-base-mat.h
+++ b/src/ov-base-mat.h
@@ -64,16 +64,24 @@ public:
   ~octave_base_matrix (void) { }
 
   octave_value *clone (void) const { return new octave_base_matrix (*this); }
   octave_value *empty_clone (void) const { return new octave_base_matrix (); }
 
   octave_value subsref (const std::string& type,
 			const std::list<octave_value_list>& idx);
 
+  octave_value_list subsref (const std::string& type,
+			     const std::list<octave_value_list>& idx,
+    			     int nargout)
+    {
+      panic_impossible ();
+      return octave_value_list ();
+    }
+
   octave_value subsasgn (const std::string& type,
 			 const std::list<octave_value_list>& idx,
 			 const octave_value& rhs);
 
   octave_value do_index_op (const octave_value_list& idx, int resize_ok);
 
   octave_value do_index_op (const octave_value_list& idx)
     { return do_index_op (idx, 0); }
diff --git a/src/ov-base-scalar.h b/src/ov-base-scalar.h
--- a/src/ov-base-scalar.h
+++ b/src/ov-base-scalar.h
@@ -57,16 +57,24 @@ public:
   octave_base_scalar (const octave_base_scalar& s)
     : octave_base_value (), scalar (s.scalar) { }
 
   ~octave_base_scalar (void) { }
 
   octave_value subsref (const std::string& type,
 			const std::list<octave_value_list>& idx);
 
+  octave_value_list subsref (const std::string& type,
+			     const std::list<octave_value_list>& idx,
+    			     int nargout)
+    {
+      panic_impossible ();
+      return octave_value_list ();
+    }
+
   octave_value subsasgn (const std::string& type,
 			 const std::list<octave_value_list>& idx,
 			 const octave_value& rhs);
 
   int rows (void) const { return 1; }
 
   int columns (void) const { return 1; }
 
diff --git a/src/ov-builtin.h b/src/ov-builtin.h
--- a/src/ov-builtin.h
+++ b/src/ov-builtin.h
@@ -45,16 +45,23 @@ public:
   typedef octave_value_list (*fcn) (const octave_value_list&, int);
 
   octave_builtin (fcn ff, const std::string& nm = std::string (),
 		  const std::string& ds = std::string ())
     : octave_function (nm, ds), f (ff) { }
 
   ~octave_builtin (void) { }
 
+  octave_value subsref (const std::string& type,
+			const std::list<octave_value_list>& idx)
+    {
+      panic_impossible ();
+      return octave_value ();
+    }
+
   octave_value_list subsref (const std::string& type,
 			     const std::list<octave_value_list>& idx,
 			     int nargout);
 
   octave_function *function_value (bool) { return this; }
 
   bool is_builtin_function (void) const { return true; }
 
diff --git a/src/ov-cell.h b/src/ov-cell.h
--- a/src/ov-cell.h
+++ b/src/ov-cell.h
@@ -71,16 +71,24 @@ public:
 
 #if 0
   octave_value *try_narrowing_conversion (void);
 #endif
 
   octave_value subsref (const std::string& type,
 			const std::list<octave_value_list>& idx);
 
+  octave_value_list subsref (const std::string& type,
+			     const std::list<octave_value_list>& idx,
+    			     int nargout)
+    {
+      panic_impossible ();
+      return octave_value_list ();
+    }
+
   octave_value subsasgn (const std::string& type,
 			 const std::list<octave_value_list>& idx,
 			 const octave_value& rhs);
 
   bool is_defined (void) const { return true; }
 
   bool is_cell (void) const { return true; }
 
diff --git a/src/ov-list.h b/src/ov-list.h
--- a/src/ov-list.h
+++ b/src/ov-list.h
@@ -62,16 +62,24 @@ public:
   ~octave_list (void) { }
 
   octave_value *clone (void) const { return new octave_list (*this); }
   octave_value *empty_clone (void) const { return new octave_list (); }
 
   octave_value subsref (const std::string& type,
 			const std::list<octave_value_list>& idx);
 
+  octave_value_list subsref (const std::string& type,
+			     const std::list<octave_value_list>& idx,
+    			     int nargout)
+    {
+      panic_impossible ();
+      return octave_value_list ();
+    }
+
   octave_value do_index_op (const octave_value_list& idx, int resize_ok);
 
   octave_value subsasgn (const std::string& type,
 			 const std::list<octave_value_list>& idx,
 			 const octave_value& rhs);
 
   void assign (const octave_value_list& idx, const octave_value& rhs);
 
diff --git a/src/ov-mapper.h b/src/ov-mapper.h
--- a/src/ov-mapper.h
+++ b/src/ov-mapper.h
@@ -61,16 +61,23 @@ public:
       d_d_map_fcn (dd), d_c_map_fcn (dc), c_c_map_fcn (cc),
       lower_limit (ll), upper_limit (ul), ch_map_flag (cmf),
       can_ret_cmplx_for_real (crcfr) { }
 
   ~octave_mapper (void) { }
 
   octave_function *function_value (bool) { return this; }
 
+  octave_value subsref (const std::string& type,
+			const std::list<octave_value_list>& idx)
+    {
+      panic_impossible ();
+      return octave_value ();
+    }
+
   octave_value_list subsref (const std::string& type,
 			     const std::list<octave_value_list>& idx,
 			     int nargout);
 
   octave_value_list
   do_multi_index_op (int nargout, const octave_value_list& args);
 
 private:
diff --git a/src/ov-range.h b/src/ov-range.h
--- a/src/ov-range.h
+++ b/src/ov-range.h
@@ -83,16 +83,24 @@ public:
 
   type_conv_fcn numeric_conversion_function (void) const;
 
   octave_value *try_narrowing_conversion (void);
 
   octave_value subsref (const std::string& type,
 			const std::list<octave_value_list>& idx);
 
+  octave_value_list subsref (const std::string& type,
+			     const std::list<octave_value_list>& idx,
+    			     int nargout)
+    {
+      panic_impossible ();
+      return octave_value_list ();
+    }
+
   octave_value do_index_op (const octave_value_list& idx, int resize_ok);
 
   octave_value do_index_op (const octave_value_list& idx)
     { return do_index_op (idx, 0); }
 
   idx_vector index_vector (void) const { return idx_vector (range); }
 
   int rows (void) const { return (columns () > 0); }
diff --git a/src/ov-struct.h b/src/ov-struct.h
--- a/src/ov-struct.h
+++ b/src/ov-struct.h
@@ -67,16 +67,24 @@ public:
   octave_value *clone (void) const { return new octave_struct (*this); }
   octave_value *empty_clone (void) const { return new octave_struct (); }
 
   octave_value_list dotref (const octave_value_list& idx);
 
   octave_value subsref (const std::string& type,
 			const std::list<octave_value_list>& idx);
 
+  octave_value_list subsref (const std::string& type,
+			     const std::list<octave_value_list>& idx,
+    			     int nargout)
+    {
+      panic_impossible ();
+      return octave_value_list ();
+    }
+
   static octave_value numeric_conv (const octave_value_list& val,
 				    const std::string& type);
 
   octave_value subsasgn (const std::string& type,
 			 const std::list<octave_value_list>& idx,
 			 const octave_value& rhs);
 
   int rows (void) const { return map.rows (); }
diff --git a/src/ov-usr-fcn.h b/src/ov-usr-fcn.h
--- a/src/ov-usr-fcn.h
+++ b/src/ov-usr-fcn.h
@@ -138,16 +138,23 @@ public:
 	args_passed = octave_value_list ();
       else
 	{
 	  args_passed = saved_args.top ();
 	  saved_args.pop ();
 	}
     }
 
+  octave_value subsref (const std::string& type,
+			const std::list<octave_value_list>& idx)
+    {
+      panic_impossible ();
+      return octave_value ();
+    }
+
   octave_value_list subsref (const std::string& type,
 			     const std::list<octave_value_list>& idx,
 			     int nargout);
 
   octave_value_list
   do_multi_index_op (int nargout, const octave_value_list& args);
 
   void traceback_error (void);
diff --git a/src/ov.cc b/src/ov.cc
--- a/src/ov.cc
+++ b/src/ov.cc
@@ -607,17 +607,18 @@ octave_value::maybe_mutate (void)
 	delete rep;
 
       rep = tmp;
       rep->count = 1;
     }    
 }
 
 octave_value
-octave_value::subsref (const std::string& type, const octave_value_list& idx)
+octave_value::single_subsref (const std::string& type,
+			      const octave_value_list& idx)
 {
   std::list<octave_value_list> i;
 
   i.push_back (idx);
 
   return rep->subsref (type, i);
 }
 
diff --git a/src/ov.h b/src/ov.h
--- a/src/ov.h
+++ b/src/ov.h
@@ -245,22 +245,23 @@ public:
   virtual type_conv_fcn numeric_conversion_function (void) const
     { return rep->numeric_conversion_function (); }
 
   void maybe_mutate (void);
 
   virtual octave_value *try_narrowing_conversion (void)
     { return rep->try_narrowing_conversion (); }
 
+  octave_value single_subsref (const std::string& type,
+			       const octave_value_list& idx);
+
   virtual octave_value subsref (const std::string& type,
 				const std::list<octave_value_list>& idx)
     { return rep->subsref (type, idx); }
 
-  octave_value subsref (const std::string& type, const octave_value_list& idx);
-
   virtual octave_value_list subsref (const std::string& type,
 				     const std::list<octave_value_list>& idx,
     				     int nargout);
 
   octave_value next_subsref (const std::string& type, const
 			     std::list<octave_value_list>& idx,
 			     size_t skip = 1);
 
diff --git a/src/pt-plot.cc b/src/pt-plot.cc
--- a/src/pt-plot.cc
+++ b/src/pt-plot.cc
@@ -656,17 +656,17 @@ subplot::extract_plot_data (int ndim, oc
     {
       ColumnVector val = sp_using_clause->values (ndim);
 
       octave_value_list args;
 
       args(1) = val;
       args(0) = octave_value::magic_colon_t;
 
-      retval = data.subsref ("(", args);
+      retval = data.single_subsref ("(", args);
 
       if (error_state)
 	return octave_value ();
     }
   else
     {
       retval = data;
     }
