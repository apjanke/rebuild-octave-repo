# HG changeset patch
# User jwe
# Date 985899782 0
#      Thu Mar 29 21:03:02 2001 +0000
# Node ID f19f00339363f06f3164ba94fe345f802d2243f4
# Parent  ec80db02d436c9dcb25ccca8b85cc4cf9c712bb2
[project @ 2001-03-29 21:03:01 by jwe]

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,19 @@
+2001-03-29  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* DLD-FUNCTIONS/besselj.cc (besselh): Use K arg.
+	From: Thomas Stuart <tstuart@ing.sun.ac.za>.
+
+	* oct-stream.cc (get_size): Don't allow [Inf, N] as a size
+	specification for the read and scanf functions.
+	(get_size): SIZE is now an Array<double> instead of a Matrix object.
+	(read): Likewise.  Change all callers.
+	(scanf): Likewise.  Change all callers.
+
 2001-03-26  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* DLD-FUNCTIONS/det.cc (Fdet): Only return rcond if nargout > 1.
 	* DLD-FUNCTIONS/inv.cc (Finv): Only return rcond if nargout > 1.
 
 2001-03-26  Paul Kienzle  <pkienzle@kienzle.powernet.co.uk>
 
 	* DLD-FUNCTIONS/det.cc (Fdet): Suppress warning, but return rcond.
diff --git a/src/DLD-FUNCTIONS/besselj.cc b/src/DLD-FUNCTIONS/besselj.cc
--- a/src/DLD-FUNCTIONS/besselj.cc
+++ b/src/DLD-FUNCTIONS/besselj.cc
@@ -327,27 +327,25 @@ DEFUN_DLD (besselh, args, nargout,
 @deftypefn {Loadable Function} {[@var{h}, @var{ierr}] =} besselh (@var{alpha}, @var{k}, @var{x}, @var{opt})\n\
 See besselj.\n\
 @end deftypefn")
 {
   octave_value_list retval;
 
   int nargin = args.length ();
 
-  int kind = 1;
-
   if (nargin == 2)
     {
       retval = do_bessel (BESSEL_H1, "besselh", args, nargout);
     }
   else if (nargin == 3 || nargin == 4)
     {
-      double d_kind = args(1).double_value ();
+      int kind = args(1).int_value ();
 
-      if (! error_state && D_NINT (d_kind) == d_kind)
+      if (! error_state)
 	{
 	  octave_value_list tmp_args;
 
 	  if (nargin == 4)
 	    tmp_args(2) = args(3);
 
 	  tmp_args(1) = args(2);
 	  tmp_args(0) = args(0);
diff --git a/src/file-io.cc b/src/file-io.cc
--- a/src/file-io.cc
+++ b/src/file-io.cc
@@ -850,18 +850,18 @@ conversions is returned in @var{count}\n
 	  if (! error_state)
 	    {
 	      if (args(1).is_string ())
 		{
 		  std::string fmt = args(1).string_value ();
 
 		  int count = 0;
 
-		  Matrix size = (nargin == 3)
-		    ? args(2).matrix_value () : Matrix (1, 1, octave_Inf);
+		  Array<double> size = (nargin == 3)
+		    ? args(2).vector_value () : Array<double> (1, octave_Inf);
 
 		  if (! error_state)
 		    {
 		      octave_value tmp = os.scanf (fmt, size, count);
 
 		      retval(1) = static_cast<double> (count);
 		      retval(0) = tmp;
 		    }
@@ -933,18 +933,19 @@ string is treated as an end-of-file cond
 	      if (os.is_valid ())
 		{
 		  if (args(1).is_string ())
 		    {
 		      std::string fmt = args(1).string_value ();
 
 		      int count = 0;
 
-		      Matrix size = (nargin == 3)
-			? args(2).matrix_value () : Matrix (1, 1, octave_Inf);
+		      Array<double> size = (nargin == 3)
+			? args(2).vector_value ()
+			: Array<double> (1, octave_Inf);
 
 		      octave_value tmp = os.scanf (fmt, size, count);
 
 		      // XXX FIXME XXX -- is this the right thing to do?
 		      // Extract error message first, because getting
 		      // position will clear it.
 		      std::string errmsg = os.error ();
 
@@ -994,17 +995,17 @@ static octave_value
 do_fread (octave_stream& os, const octave_value& size_arg,
 	  const octave_value& prec_arg, const octave_value& skip_arg,
 	  const octave_value& arch_arg, int& count)
 {
   octave_value retval;
 
   count = -1;
 
-  Matrix size = size_arg.matrix_value ();
+  Array<double> size = size_arg.vector_value ();
 
   if (! error_state)
     {
       std::string prec = prec_arg.string_value ();
 
       if (! error_state)
 	{
 	  oct_data_conv::data_type dt
diff --git a/src/oct-stream.cc b/src/oct-stream.cc
--- a/src/oct-stream.cc
+++ b/src/oct-stream.cc
@@ -99,53 +99,43 @@ get_size (double d, const char *warn_for
     }
   else
     ::error ("%s: NaN is invalid as size specification", warn_for);
 
   return retval;
 }
 
 static void
-get_size (const Matrix& size, int& nr, int& nc, bool& one_elt_size_spec,
+get_size (const Array<double>& size, int& nr, int& nc, bool& one_elt_size_spec,
 	  const char *warn_for)
 {
   nr = -1;
   nc = -1;
 
   one_elt_size_spec = false;
 
   double dnr = -1.0;
   double dnc = -1.0;
 
-  int sz_nr = size.rows ();
-  int sz_nc = size.cols ();
-
-  if (sz_nr == 1 && sz_nc == 1)
+  int sz_len = size.length ();
+
+  if (sz_len == 1)
     {
       one_elt_size_spec = true;
 
-      dnr = size (0, 0);
+      dnr = size (0);
       dnc = 1.0;
     }
-  else if (sz_nr == 1 && sz_nc > 0)
+  else if (sz_len == 2)
     {
-      dnr = size (0, 0);
-
-      if (sz_nc == 2)
-	dnc = size (0, 1);
-      else if (sz_nc > 2)
-	::error ("%s: invalid size specification", warn_for);
-    }
-  else if (sz_nc == 1 && sz_nr > 0)
-    {
-      dnr = size (0, 0);
-
-      if (sz_nr == 2)
-	dnc = size (1, 0);
-      else if (sz_nr > 2)
+      dnr = size (0);
+
+      if (! xisinf (dnr))
+	dnc = size (1);
+      else
 	::error ("%s: invalid size specification", warn_for);
     }
   else
     ::error ("%s: invalid size specification", warn_for);
 
   if (! error_state)
     {
       nr = get_size (dnr, warn_for);
@@ -1018,17 +1008,17 @@ octave_base_stream::getl (int max_len, b
 
 std::string
 octave_base_stream::gets (int max_len, bool& err)
 {
   return do_gets (max_len, err, false, "fgets");
 }
 
 octave_value
-octave_base_stream::read (const Matrix& size,
+octave_base_stream::read (const Array<double>& size,
 			  oct_data_conv::data_type dt, int skip,
 			  oct_mach_info::float_format ffmt,
 			  int& char_count)
 {
   Matrix retval;
 
   char_count = 0;
 
@@ -1653,17 +1643,17 @@ octave_base_stream::do_scanf (scanf_form
       if (all_char_conv)
 	retval = retval.convert_to_str ();
     }
 
   return retval;
 }
 
 octave_value
-octave_base_stream::scanf (const std::string& fmt, const Matrix& size,
+octave_base_stream::scanf (const std::string& fmt, const Array<double>& size,
 			   int& conversion_count)
 {
   octave_value retval = Matrix ();
 
   conversion_count = 0;
 
   std::istream *isp = input_stream ();
 
@@ -2609,17 +2599,17 @@ octave_stream::is_open (void) const
 void
 octave_stream::close (void)
 {
   if (stream_ok ("close"))
     rep->close ();
 }
 
 octave_value
-octave_stream::read (const Matrix& size,
+octave_stream::read (const Array<double>& size,
 		     oct_data_conv::data_type dt, int skip,
 		     oct_mach_info::float_format flt_fmt, int& count)
 {
   octave_value retval;
 
   if (stream_ok ("fread"))
     retval = rep->read (size, dt, skip, flt_fmt, count);
 
@@ -2635,17 +2625,18 @@ octave_stream::write (const octave_value
 
   if (stream_ok ("fwrite"))
     retval = rep->write (data, dt, skip, flt_fmt);
 
   return retval;
 }
 
 octave_value
-octave_stream::scanf (const std::string& fmt, const Matrix& size, int& count)
+octave_stream::scanf (const std::string& fmt, const Array<double>& size,
+		      int& count)
 {
   octave_value retval;
 
   if (stream_ok ("fscanf"))
     retval = rep->scanf (fmt, size, count);
 
   return retval;
 }
diff --git a/src/oct-stream.h b/src/oct-stream.h
--- a/src/oct-stream.h
+++ b/src/oct-stream.h
@@ -426,43 +426,40 @@ private:
 
   std::string getl (int max_len, bool& err);
   std::string gets (int max_len, bool& err);
 
   octave_value do_read (int nr, int nc, oct_data_conv::data_type dt,
 			int skip, oct_mach_info::float_format flt_fmt,
 			int& count);
 
-  octave_value read (const Matrix& size, oct_data_conv::data_type dt,
+  octave_value read (const Array<double>& size, oct_data_conv::data_type dt,
 		     int skip, oct_mach_info::float_format flt_fmt,
 		     int& count);
 
   octave_value do_char_scanf (scanf_format_list& fmt_list,
 			      int nr, int nc, int& count);
 
   octave_value do_real_scanf (scanf_format_list& fmt_list,
 			      int nr, int nc, int& count);
 
   octave_value do_scanf (scanf_format_list& fmt_list, int nr, int nc,
 			 bool one_elt_size_spec, int& count);
 
-  octave_value scanf (const std::string& fmt, const Matrix& size, int& count);
+  octave_value scanf (const std::string& fmt, const Array<double>& size, int& count);
 
   bool do_oscanf (const scanf_format_elt *elt, octave_value&);
 
   octave_value_list oscanf (const std::string& fmt);
 
   // Functions that are defined for all output streams (output streams
   // are those that define os).
 
   int flush (void);
 
-  int do_write (const Matrix& m, oct_data_conv::data_type dt, int skip,
-		oct_mach_info::float_format flt_fmt);
-
   int write (const octave_value& data, oct_data_conv::data_type dt,
 	     int skip, oct_mach_info::float_format flt_fmt);
 
   int do_printf (printf_format_list& fmt_list, const octave_value_list& args);
 
   int printf (const std::string& fmt, const octave_value_list& args);
 
   int puts (const std::string& s);
@@ -508,24 +505,24 @@ public:
   long tell (void) const;
 
   int rewind (void);
 
   bool is_open (void) const;
 
   void close (void);
 
-  octave_value read (const Matrix& size, oct_data_conv::data_type dt,
+  octave_value read (const Array<double>& size, oct_data_conv::data_type dt,
 		     int skip, oct_mach_info::float_format flt_fmt,
 		     int& count);
 
   int write (const octave_value& data, oct_data_conv::data_type dt,
 	     int skip, oct_mach_info::float_format flt_fmt);
 
-  octave_value scanf (const std::string& fmt, const Matrix& size, int& count);
+  octave_value scanf (const std::string& fmt, const Array<double>& size, int& count);
 
   octave_value_list oscanf (const std::string& fmt);
 
   int printf (const std::string& fmt, const octave_value_list& args);
 
   int puts (const std::string& s);
   int puts (const octave_value& s);
 
