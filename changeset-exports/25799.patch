# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1534361170 14400
#      Wed Aug 15 15:26:10 2018 -0400
# Node ID d04b74f5d02ed81b4ca404f9ab732fc46e56876c
# Parent  4e4ffcca8b5db663384f35eda8d8df1132e95d70
make shg and figure (N) activate and raise figure windows (bug #45943)

* figure.m, shg.m: Call __show_figure__.

* graphics.cc (F__show_figure__): New function.

* graphics-toolkit.h (base_graphics_toolkit::show_figure,
graphics_toolkit::show_figure): New functions.

* Backend.h, Backend.cc (Backend::show_figure): New function.

* ObjectProxy.h, ObjectProxy.cc (ObjectProxy::init): Handle connection
between sendShow signal and slotShow slot.
(ObjectProxy::show): New function.
(ObjectProxy::sendShow): New signal.

* Object.h, Object.cc (Object::slotShow): New slot.
(Object::show): New virtual function.

* Figure.h, Figure.cc (Figure::show): New function.

diff --git a/libgui/graphics/Backend.cc b/libgui/graphics/Backend.cc
--- a/libgui/graphics/Backend.cc
+++ b/libgui/graphics/Backend.cc
@@ -175,16 +175,28 @@ namespace QtHandles
         ObjectProxy *proxy = toolkitObjectProxy (go);
 
         if (proxy)
           proxy->redraw ();
       }
   }
 
   void
+  Backend::show_figure (const graphics_object& go) const
+  {
+    if (go.get_properties ().is_visible ())
+      {
+        ObjectProxy *proxy = toolkitObjectProxy (go);
+
+        if (proxy)
+          proxy->show ();
+      }
+  }
+
+  void
   Backend::print_figure (const graphics_object& go,
                          const std::string& term,
                          const std::string& file_cmd,
                          const std::string& /*debug_file*/) const
   {
     ObjectProxy *proxy = toolkitObjectProxy (go);
 
     if (proxy)
diff --git a/libgui/graphics/Backend.h b/libgui/graphics/Backend.h
--- a/libgui/graphics/Backend.h
+++ b/libgui/graphics/Backend.h
@@ -43,16 +43,18 @@ namespace QtHandles
     Backend (void);
 
     ~Backend (void);
 
     bool is_valid (void) const { return true; }
 
     void redraw_figure (const graphics_object& h) const;
 
+    void show_figure (const graphics_object& h) const;
+
     void update (const graphics_object& obj, int pId);
 
     bool initialize (const graphics_object& obj);
 
     void finalize (const graphics_object& obj);
 
     void print_figure (const graphics_object& go,
                        const std::string& term,
diff --git a/libgui/graphics/Figure.cc b/libgui/graphics/Figure.cc
--- a/libgui/graphics/Figure.cc
+++ b/libgui/graphics/Figure.cc
@@ -383,16 +383,25 @@ namespace QtHandles
               obj->slotRedraw ();
           }
       }
 
     updateFigureToolBarAndMenuBar ();
   }
 
   void
+  Figure::show (void)
+  {
+    QWidget *win = qWidget<QWidget> ();
+
+    win->activateWindow ();
+    win->raise ();
+  }
+
+  void
   Figure::print (const QString& file_cmd, const QString& term)
   {
     Canvas *canvas = m_container->canvas (m_handle);
 
     if (canvas)
       canvas->print (file_cmd, term);
   }
 
diff --git a/libgui/graphics/Figure.h b/libgui/graphics/Figure.h
--- a/libgui/graphics/Figure.h
+++ b/libgui/graphics/Figure.h
@@ -89,16 +89,17 @@ namespace QtHandles
     {
       UpdateBoundingBoxPosition = 0x1,
       UpdateBoundingBoxSize     = 0x2,
       UpdateBoundingBoxAll      = 0x3
     };
 
   protected:
     void redraw (void);
+    void show (void);
     void print (const QString& file_cmd, const QString& term);
     void update (int pId);
     void updateBoundingBox (bool internal = false, int flags = 0);
     void beingDeleted (void);
 
   private:
     void createFigureToolBarAndMenuBar (void);
     void showFigureToolBar (bool visible);
diff --git a/libgui/graphics/Object.cc b/libgui/graphics/Object.cc
--- a/libgui/graphics/Object.cc
+++ b/libgui/graphics/Object.cc
@@ -115,16 +115,25 @@ namespace QtHandles
   {
     gh_manager::auto_lock lock;
 
     if (object ().valid_object ())
       redraw ();
   }
 
   void
+  Object::slotShow (void)
+  {
+    gh_manager::auto_lock lock;
+
+    if (object ().valid_object ())
+      show ();
+  }
+
+  void
   Object::slotPrint (const QString& file_cmd, const QString& term)
   {
     gh_manager::auto_lock lock;
 
     if (object ().valid_object ())
       print (file_cmd, term);
   }
 
@@ -143,16 +152,20 @@ namespace QtHandles
     deleteLater ();
   }
 
   void
   Object::redraw (void)
   { }
 
   void
+  Object::show (void)
+  { }
+
+  void
   Object::print (const QString& /* file_cmd */, const QString& /* term */)
   { }
 
   void
   Object::beingDeleted (void)
   { }
 
   void Object::objectDestroyed (QObject *obj)
diff --git a/libgui/graphics/Object.h b/libgui/graphics/Object.h
--- a/libgui/graphics/Object.h
+++ b/libgui/graphics/Object.h
@@ -76,27 +76,29 @@ namespace QtHandles
     virtual Container * innerContainer (void) = 0;
 
     static Object * fromQObject (QObject *obj);
 
   public slots:
     void slotUpdate (int pId);
     void slotFinalize (void);
     void slotRedraw (void);
+    void slotShow (void);
     void slotPrint (const QString& file_cmd, const QString& term);
 
     void objectDestroyed (QObject *obj = nullptr);
 
   protected:
     static Object * parentObject (const graphics_object& go);
     void init (QObject *obj, bool callBase = false);
 
     virtual void update (int pId);
     virtual void finalize (void);
     virtual void redraw (void);
+    virtual void show (void);
     virtual void print (const QString& file_cmd, const QString& term);
 
     virtual void beingDeleted (void);
 
   protected:
 
     // Store the graphics object directly so that it will exist when
     // we need it.  Previously, it was possible for the graphics
diff --git a/libgui/graphics/ObjectProxy.cc b/libgui/graphics/ObjectProxy.cc
--- a/libgui/graphics/ObjectProxy.cc
+++ b/libgui/graphics/ObjectProxy.cc
@@ -51,30 +51,34 @@ namespace QtHandles
         if (m_object)
           {
             disconnect (this, SIGNAL (sendUpdate (int)),
                         m_object, SLOT (slotUpdate (int)));
             disconnect (this, SIGNAL (sendFinalize (void)),
                         m_object, SLOT (slotFinalize (void)));
             disconnect (this, SIGNAL (sendRedraw (void)),
                         m_object, SLOT (slotRedraw (void)));
+            disconnect (this, SIGNAL (sendShow (void)),
+                        m_object, SLOT (slotShow (void)));
             disconnect (this, SIGNAL (sendPrint (const QString&, const QString&)),
                         m_object, SLOT (slotPrint (const QString&, const QString&)));
           }
 
         m_object = obj;
 
         if (m_object)
           {
             connect (this, SIGNAL (sendUpdate (int)),
                      m_object, SLOT (slotUpdate (int)));
             connect (this, SIGNAL (sendFinalize (void)),
                      m_object, SLOT (slotFinalize (void)));
             connect (this, SIGNAL (sendRedraw (void)),
                      m_object, SLOT (slotRedraw (void)));
+            connect (this, SIGNAL (sendShow (void)),
+                     m_object, SLOT (slotShow (void)));
             connect (this, SIGNAL (sendPrint (const QString&, const QString&)),
                      m_object, SLOT (slotPrint (const QString&, const QString&)),
                      Qt::BlockingQueuedConnection);
           }
       }
   }
 
   void
@@ -102,16 +106,22 @@ namespace QtHandles
 
   void
   ObjectProxy::redraw (void)
   {
     emit sendRedraw ();
   }
 
   void
+  ObjectProxy::show (void)
+  {
+    emit sendShow ();
+  }
+
+  void
   ObjectProxy::print (const QString& file_cmd, const QString& term)
   {
     emit sendPrint (file_cmd, term);
   }
 
   uint8NDArray
   ObjectProxy::get_pixels (void)
   {
diff --git a/libgui/graphics/ObjectProxy.h b/libgui/graphics/ObjectProxy.h
--- a/libgui/graphics/ObjectProxy.h
+++ b/libgui/graphics/ObjectProxy.h
@@ -39,26 +39,28 @@ namespace QtHandles
     Q_OBJECT
 
   public:
     ObjectProxy (Object *obj = nullptr);
 
     void update (int pId);
     void finalize (void);
     void redraw (void);
+    void show (void);
     void print (const QString& file_cmd, const QString& term);
     uint8NDArray get_pixels (void);
 
     Object * object (void) { return m_object; }
     void setObject (Object *obj);
 
   signals:
     void sendUpdate (int pId);
     void sendFinalize (void);
     void sendRedraw (void);
+    void sendShow (void);
     void sendPrint (const QString& file_cmd, const QString& term);
 
   private:
     void init (Object *obj);
 
   private:
     Object *m_object;
   };
diff --git a/libinterp/corefcn/graphics-toolkit.h b/libinterp/corefcn/graphics-toolkit.h
--- a/libinterp/corefcn/graphics-toolkit.h
+++ b/libinterp/corefcn/graphics-toolkit.h
@@ -50,16 +50,19 @@ public:
 
   std::string get_name (void) const { return name; }
 
   virtual bool is_valid (void) const { return false; }
 
   virtual void redraw_figure (const graphics_object&) const
   { gripe_if_tkit_invalid ("redraw_figure"); }
 
+  virtual void show_figure (const graphics_object&) const
+  { gripe_if_tkit_invalid ("show_figure"); }
+
   virtual void print_figure (const graphics_object&, const std::string&,
                              const std::string&,
                              const std::string& = "") const
   { gripe_if_tkit_invalid ("print_figure"); }
 
   virtual uint8NDArray get_pixels (const graphics_object&) const
   {
     gripe_if_tkit_invalid ("get_pixels");
@@ -170,16 +173,19 @@ public:
 
   operator bool (void) const { return rep->is_valid (); }
 
   std::string get_name (void) const { return rep->get_name (); }
 
   void redraw_figure (const graphics_object& go) const
   { rep->redraw_figure (go); }
 
+  void show_figure (const graphics_object& go) const
+  { rep->show_figure (go); }
+
   void print_figure (const graphics_object& go, const std::string& term,
                      const std::string& file,
                      const std::string& debug_file = "") const
   { rep->print_figure (go, term, file, debug_file); }
 
   uint8NDArray get_pixels (const graphics_object& go) const
   { return rep->get_pixels (go); }
 
diff --git a/libinterp/corefcn/graphics.cc b/libinterp/corefcn/graphics.cc
--- a/libinterp/corefcn/graphics.cc
+++ b/libinterp/corefcn/graphics.cc
@@ -12068,16 +12068,42 @@ Return a cell array of the currently loa
 {
   gh_manager::auto_lock guard;
 
   octave::gtk_manager& gtk_mgr = interp.get_gtk_manager ();
 
   return ovl (gtk_mgr.loaded_toolkits_list ());
 }
 
+DEFUN (__show_figure__, args, ,
+       doc: /* -*- texinfo -*-
+@deftypefn  {} {} __show_figure__ (@var{n})
+Undocumented internal function.
+@end deftypefn */)
+{
+  if (args.length () != 1)
+    print_usage ();
+
+  double h = args(0).xdouble_value ("__show_figure__: invalid handle H");
+
+  graphics_handle gh = gh_manager::lookup (h);
+
+  if (! gh.ok ())
+    error ("__show_figure__: invalid graphics object (= %g)", h);
+
+  graphics_object go = gh_manager::get_object (gh);
+
+  figure::properties& fprops
+    = dynamic_cast<figure::properties&> (go.get_properties ());
+
+  fprops.get_toolkit ().show_figure (go);
+
+  return ovl ();
+}
+
 DEFUN (drawnow, args, ,
        doc: /* -*- texinfo -*-
 @deftypefn  {} {} drawnow ()
 @deftypefnx {} {} drawnow ("expose")
 @deftypefnx {} {} drawnow (@var{term}, @var{file}, @var{debug_file})
 Update figure windows and their children.
 
 The event queue is flushed and any callbacks generated are executed.
diff --git a/scripts/plot/util/figure.m b/scripts/plot/util/figure.m
--- a/scripts/plot/util/figure.m
+++ b/scripts/plot/util/figure.m
@@ -104,16 +104,17 @@ function h = figure (varargin)
     set (0, "currentfigure", f);
   endif
 
   ## When switching to figure N, make figure visible and on top of stack,
   ## unless visibility is explicitly switched off.
   if (! init_new_figure && ! any (strcmpi (varargin(1:2:end), "visible")
                                   && strcmpi (varargin(2:2:end), "off")))
     set (f, "visible", "on");
+    __show_figure__ (gcf ());
   endif
 
   if (nargout > 0)
     h = f;
   endif
 
 endfunction
 
diff --git a/scripts/plot/util/shg.m b/scripts/plot/util/shg.m
--- a/scripts/plot/util/shg.m
+++ b/scripts/plot/util/shg.m
@@ -27,11 +27,11 @@
 ## Author: jwe
 
 function shg ()
 
   if (nargin != 0)
     warning ("shg: ignoring extra arguments");
   endif
 
-  drawnow ();
+  __show_figure__ (gcf ());
 
 endfunction
