# HG changeset patch
# User jwe
# Date 825725846 0
#      Sat Mar 02 00:17:26 1996 +0000
# Node ID d2c56366fece190f51405a947613d5f2b80322d6
# Parent  a9abae46d75f38d36c347813ef9790d2298ed800
[project @ 1996-03-02 00:15:50 by jwe]

diff --git a/src/filter.cc b/src/filter.cc
--- a/src/filter.cc
+++ b/src/filter.cc
@@ -33,27 +33,27 @@ Software Foundation, 59 Temple Place - S
 #include <config.h>
 #endif
 
 #include "defun-dld.h"
 #include "error.h"
 #include "oct-obj.h"
 #include "help.h"
 
-extern Array<double>
-filter (Array<double>&, Array<double>&, Array<double>&);
+extern MArray<double>
+filter (MArray<double>&, MArray<double>&, MArray<double>&);
 
-extern Array<Complex>
-filter (Array<Complex>&, Array<Complex>&, Array<Complex>&);
+extern MArray<Complex>
+filter (MArray<Complex>&, MArray<Complex>&, MArray<Complex>&);
 
 template <class T>
-Array<T>
-filter (Array<T>& b, Array<T>& a, Array<T>& x, Array<T>& si)
+MArray<T>
+filter (MArray<T>& b, MArray<T>& a, MArray<T>& x, MArray<T>& si)
 {
-  Array<T> y;
+  MArray<T> y;
 
   int a_len  = a.length ();
   int b_len  = b.length ();
   int x_len  = x.length ();
 
   int si_len = si.length ();
 
   int ab_len = a_len > b_len ? a_len : b_len;
@@ -122,32 +122,34 @@ filter (Array<T>& b, Array<T>& a, Array<
 	}
     }
   else
     y = b.elem (0) * x;
 
   return y;
 }
 
-extern Array<double>
-filter (Array<double>&, Array<double>&, Array<double>&, Array<double>&);
+extern MArray<double>
+filter (MArray<double>&, MArray<double>&, MArray<double>&,
+	MArray<double>&);
 
-extern Array<Complex>
-filter (Array<Complex>&, Array<Complex>&, Array<Complex>&, Array<Complex>&);
+extern MArray<Complex>
+filter (MArray<Complex>&, MArray<Complex>&, MArray<Complex>&,
+	MArray<Complex>&);
 
 template <class T>
-Array<T>
-filter (Array<T>& b, Array<T>& a, Array<T>& x)
+MArray<T>
+filter (MArray<T>& b, MArray<T>& a, MArray<T>& x)
 {
   int a_len = a.length ();
   int b_len = b.length ();
 
   int si_len = (a_len > b_len ? a_len : b_len) - 1;
 
-  Array<T> si (si_len, 0.0);
+  MArray<T> si (si_len, 0.0);
 
   return filter (b, a, x, si);
 }
 
 DEFUN_DLD_BUILTIN (filter, args, ,
   "usage: [y [, sf]] = filter (b, a, x [, si])\n\
 \n\
 y = filter (b, a, x) returns the solution to the following linear,\n\
@@ -268,26 +270,28 @@ implementation.")
 	}
       else
 	error (errmsg);
     }
 
   return retval;
 }
 
-template Array<double>
-filter (Array<double>&, Array<double>&, Array<double>&, Array<double>&);
+template MArray<double>
+filter (MArray<double>&, MArray<double>&, MArray<double>&,
+	MArray<double>&);
 
-template Array<double>
-filter (Array<double>&, Array<double>&, Array<double>&);
+template MArray<double>
+filter (MArray<double>&, MArray<double>&, MArray<double>&);
 
-template Array<Complex>
-filter (Array<Complex>&, Array<Complex>&, Array<Complex>&, Array<Complex>&);
+template MArray<Complex>
+filter (MArray<Complex>&, MArray<Complex>&, MArray<Complex>&,
+	MArray<Complex>&);
 
-template Array<Complex>
-filter (Array<Complex>&, Array<Complex>&, Array<Complex>&);
+template MArray<Complex>
+filter (MArray<Complex>&, MArray<Complex>&, MArray <Complex>&);
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; page-delimiter: "^/\\*" ***
 ;;; End: ***
 */  
diff --git a/src/fsolve.cc b/src/fsolve.cc
--- a/src/fsolve.cc
+++ b/src/fsolve.cc
@@ -278,17 +278,17 @@ show_fsolve_option (const string& keywor
       list++;
     }
 
   warning ("fsolve_options: no match for `%s'", keyword.c_str ());
 
   return retval;
 }
 
-DEFUN_DLD_BUILTIN (fsolve_options, args, nargout,
+DEFUN_DLD_BUILTIN (fsolve_options, args, ,
   "fsolve_options (KEYWORD, VALUE)\n\
 \n\
 Set or show options for fsolve.  Keywords may be abbreviated\n\
 to the shortest match.")
 {
   Octave_object retval;
 
   int nargin = args.length ();
