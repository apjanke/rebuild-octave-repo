# HG changeset patch
# User jwe
# Date 798405897 0
#      Thu Apr 20 19:24:57 1995 +0000
# Node ID 0a5e9e8892a0687d2b430a226a5ada6ea695d8b8
# Parent  abaf21f34109699990f834896f031e29c21ac648
[project @ 1995-04-20 19:23:24 by jwe]

diff --git a/src/pt-cmd.h b/src/pt-cmd.h
--- a/src/pt-cmd.h
+++ b/src/pt-cmd.h
@@ -53,16 +53,18 @@ class tree_return_command;
 // A base class for commands.
 
 class
 tree_command : public tree
 {
 public:
   tree_command (int l = -1, int c = -1) : tree (l, c) { }
 
+  virtual ~tree_command (void) { }
+
   virtual void eval (void) = 0;
 };
 
 class
 tree_global_command : public tree_command
 {
 public:
   tree_global_command (int l = -1, int c = -1) : tree_command (l, c)
diff --git a/src/pt-exp-base.cc b/src/pt-exp-base.cc
--- a/src/pt-exp-base.cc
+++ b/src/pt-exp-base.cc
@@ -1880,19 +1880,22 @@ tree_binary_expression::print_code (ostr
 }
 
 // Simple assignment expressions.
 
 tree_simple_assignment_expression::~tree_simple_assignment_expression (void)
 {
   if (! preserve)
     {
-      delete lhs;
-      delete index;
+      if (lhs_idx_expr)
+	delete lhs_idx_expr;
+      else
+	delete lhs;
     }
+
   delete rhs;
 }
 
 tree_constant
 tree_simple_assignment_expression::eval (int print)
 {
   assert (etype == tree_expression::assignment);
 
@@ -2492,16 +2495,27 @@ tree_function::bind_nargin_and_nargout (
 
   tmp = new tree_constant (nargin);
   nargin_sr->define (tmp);
 
   tmp = new tree_constant (nargout);
   nargout_sr->define (tmp);
 }
 
+tree_function::~tree_function (void)
+{
+  delete param_list;
+  delete ret_list;
+  delete sym_tab;
+  delete cmd_list;
+  delete [] file_name;
+  delete [] fcn_name;
+  delete vr_list;
+}
+
 #if 0
 tree_function *
 tree_function::define (tree statement_list *t)
 {
   cmd_list = t;
   return this;
 }
 #endif
diff --git a/src/pt-exp-base.h b/src/pt-exp-base.h
--- a/src/pt-exp-base.h
+++ b/src/pt-exp-base.h
@@ -191,16 +191,18 @@ private:
 // A base class for objects that can be return multiple values
 
 class
 tree_multi_val_ret : public tree_expression
 {
 public:
   tree_multi_val_ret (int l = -1, int c = -1) : tree_expression (l, c) { }
 
+  ~tree_multi_val_ret (void) { }
+
   int is_multi_val_ret_expression (void) const
     { return 1; }
 
   tree_constant eval (int print);
 
   virtual Octave_object eval (int print, int nargout,
 			      const Octave_object& args) = 0;
 };
@@ -214,16 +216,18 @@ public:
   tree_oct_obj (int l = -1, int c = -1) : tree_multi_val_ret (l, c) { }
 
   tree_oct_obj (const Octave_object& v, int l = -1, int c = -1)
     : tree_multi_val_ret (l, c)
       {
 	values = v;
       }
 
+  ~tree_oct_obj (void) { }
+
   tree_constant eval (int print);
 
   Octave_object eval (int print, int nargout, const Octave_object& args);
 
   void print_code (ostream& os) { }
 
 private:
   Octave_object values;
@@ -232,16 +236,18 @@ private:
 // A base class for objects that can be evaluated with argument lists.
 
 class
 tree_fvc : public tree_multi_val_ret
 {
 public:
   tree_fvc (int l = -1, int c = -1) : tree_multi_val_ret (l, c) { }
 
+  ~tree_fvc (void) { }
+
   virtual int is_constant (void) const
     { return 0; }
 
   virtual tree_constant assign (tree_constant& t,
 				const Octave_object& args);
 
   virtual char *name (void) const
     { panic_impossible (); return 0; }
@@ -283,16 +289,18 @@ public:
     }
 
   tree_identifier (symbol_record *s, int l = -1, int c = -1) : tree_fvc (l, c)
     {
       sym = s;
       maybe_do_ans_assign = 0;
     }
 
+  ~tree_identifier (void) { }
+
   int is_identifier (void) const
     { return 1; }
 
   char *name (void) const;
 
   tree_identifier *define (tree_constant *t);
   tree_identifier *define (tree_function *t);
 
@@ -614,16 +622,17 @@ tree_binary_expression : public tree_exp
 
 class
 tree_simple_assignment_expression : public tree_expression
 {
 private:
   void init (int plhs, int ans_assign)
     {
       etype = tree_expression::assignment;
+      lhs_idx_expr = 0;
       lhs = 0;
       index = 0;
       rhs = 0;
       preserve = plhs;
       ans_ass = ans_assign;
     }
 
  public:
@@ -656,16 +665,17 @@ private:
 
   tree_simple_assignment_expression (tree_index_expression *idx_expr,
 				     tree_expression *r,
 				     int plhs = 0, int ans_assign = 0,
 				     int l = -1, int c = -1)
     : tree_expression (l, c)
       {
 	init (plhs, ans_assign);
+	lhs_idx_expr = idx_expr; // cache this -- we may need to delete it.
 	lhs = idx_expr->ident ();
 	index = idx_expr->arg_list ();
 	rhs = r;
       }
 
   ~tree_simple_assignment_expression (void);
 
   int left_hand_side_is_identifier_only (void)
@@ -682,16 +692,17 @@ private:
   int is_assignment_expression (void) const
     { return 1; }
 
   void eval_error (void);
 
   void print_code (ostream& os);
 
  private:
+  tree_index_expression *lhs_idx_expr;
   tree_indirect_ref *lhs;
   tree_argument_list *index;
   tree_expression *rhs;
   int preserve;
   int ans_ass;
 };
 
 // Multi-valued assignment expressions.
@@ -794,16 +805,18 @@ public:
   tree_builtin (const char *nm = 0);
 
   tree_builtin (int i_max, int o_max, Mapper_fcn& m_fcn,
 		const char *nm = 0);
 
   tree_builtin (int i_max, int o_max, Octave_builtin_fcn f,
 		const char *nm = 0);
 
+  ~tree_builtin (void) { }  // XXX ?? XXX
+
 //  int is_builtin (void) const;
 
   int is_mapper_function (void) const
     { return is_mapper; }
 
   tree_constant eval (int print);
 
   Octave_object eval (int print, int nargout, const Octave_object& args);
@@ -863,16 +876,18 @@ public:
      : tree_fvc (l, c)
        {
 	 init ();
 	 sym_tab = st;
 	 cmd_list = cl;
 	 install_nargin_and_nargout ();
        }
 
+  ~tree_function (void);
+
 //  tree_function *define (tree_statement_list *t);
   tree_function *define_param_list (tree_parameter_list *t);
   tree_function *define_ret_list (tree_parameter_list *t);
 
   void stash_fcn_file_name (void);
 
   void stash_fcn_file_time (time_t t)
     { t_parsed = t; }
