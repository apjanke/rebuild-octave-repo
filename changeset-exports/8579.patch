# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1232701039 -3600
#      Fri Jan 23 09:57:19 2009 +0100
# Node ID 7e0f36dfefbe6c10c08fc5d12ca56be1a8c7a85d
# Parent  4b6558abe67591c74d10f75e115609f45dbb654b
implement octave_value_list using Array

diff --git a/liboctave/Array2.h b/liboctave/Array2.h
--- a/liboctave/Array2.h
+++ b/liboctave/Array2.h
@@ -111,24 +111,24 @@ public:
     }
 
   Array2<T> hermitian (T (*fcn) (const T&) = 0) const
     {
       Array<T> tmp = Array<T>::hermitian (fcn);
       return Array2<T> (tmp, tmp.rows (), tmp.columns ());
     }
 
-  Array2<T> index (const idx_vector& i, int resize_ok = 0,
+  Array2<T> index (const idx_vector& i, bool resize_ok = false,
 		   const T& rfv = Array<T>::resize_fill_value ()) const
     {
       Array<T> tmp = Array<T>::index (i, resize_ok, rfv);
       return Array2<T> (tmp, tmp.rows (), tmp.columns ());
     }
 
-  Array2<T> index (const idx_vector& i, const idx_vector& j, int resize_ok = 0,
+  Array2<T> index (const idx_vector& i, const idx_vector& j, bool resize_ok = false,
 		   const T& rfv = Array<T>::resize_fill_value ()) const
     {
       Array<T> tmp = Array<T>::index (i, j, resize_ok, rfv);
       return Array2<T> (tmp, tmp.rows (), tmp.columns ());
     }
 
   Array2<T> sort (octave_idx_type dim = 0, sortmode mode = ASCENDING) const
     {
diff --git a/liboctave/ArrayN.h b/liboctave/ArrayN.h
--- a/liboctave/ArrayN.h
+++ b/liboctave/ArrayN.h
@@ -105,31 +105,31 @@ public:
     }
 
   ArrayN<T>& insert (const ArrayN<T>& a, octave_idx_type r, octave_idx_type c)
   {
     Array<T>::insert (a, r, c);
     return *this;
   }
 
-  ArrayN<T> index (idx_vector& i, int resize_ok = 0,
+  ArrayN<T> index (const idx_vector& i, bool resize_ok = false,
 		   const T& rfv = Array<T>::resize_fill_value ()) const
     {
       Array<T> tmp = Array<T>::index (i, resize_ok, rfv);
       return ArrayN<T> (tmp, tmp.dims ());
     }
 
-  ArrayN<T> index (idx_vector& i, idx_vector& j, int resize_ok = 0,
+  ArrayN<T> index (const idx_vector& i, const idx_vector& j, bool resize_ok = false,
 		   const T& rfv = Array<T>::resize_fill_value ()) const
     {
       Array<T> tmp = Array<T>::index (i, j, resize_ok, rfv);
       return ArrayN<T> (tmp, tmp.dims ());
     }
 
-  ArrayN<T> index (Array<idx_vector>& ra_idx, int resize_ok = 0,
+  ArrayN<T> index (const Array<idx_vector>& ra_idx, bool resize_ok = false,
 		   const T& rfv = Array<T>::resize_fill_value ()) const
     {
       Array<T> tmp = Array<T>::index (ra_idx, resize_ok, rfv);
       return ArrayN<T> (tmp, tmp.dims ());
     }
 
   ArrayN<T> sort (octave_idx_type dim = 0, sortmode mode = ASCENDING) const
     {
diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,14 @@
+2009-01-22  Jaroslav Hajek  <highegg@gmail.com>
+
+	* Array2.h (Array2<T>::index): Declare resize_ok as bool.
+	* ArrayN.h (ArrayN<T>::index): Dtto. Declare index vectors as const
+	refs.
+
 2009-01-22  Jaroslav Hajek  <highegg@gmail.com>
 
 	* Range.cc (sort_internal): Add missing test.
 
 2009-01-22  Jaroslav Hajek  <highegg@gmail.com>
 
 	* Array.cc (Array<T>::index (..., bool resize_ok)):
 	Optimize the all-scalar-indices cases.
diff --git a/src/Cell.cc b/src/Cell.cc
--- a/src/Cell.cc
+++ b/src/Cell.cc
@@ -24,16 +24,22 @@ along with Octave; see the file COPYING.
 #include <config.h>
 #endif
 
 #include "idx-vector.h"
 
 #include "Cell.h"
 #include "error.h"
 #include "gripes.h"
+#include "oct-obj.h"
+
+Cell::Cell (const octave_value_list& ovl)
+  : ArrayN<octave_value> (ovl.cell_value ())
+{
+}
 
 Cell::Cell (const string_vector& sv, bool trim)
   : ArrayN<octave_value> ()
 {
   octave_idx_type n = sv.length ();
 
   if (n > 0)
     {
diff --git a/src/Cell.h b/src/Cell.h
--- a/src/Cell.h
+++ b/src/Cell.h
@@ -23,37 +23,33 @@ along with Octave; see the file COPYING.
 #if !defined (Cell_h)
 #define Cell_h 1
 
 #include <string>
 
 #include "ArrayN.h"
 #include "oct-alloc.h"
 #include "str-vec.h"
+#include "ov.h"
 
-#include "oct-obj.h"
+class octave_value_list;
 
 class
 OCTINTERP_API
 Cell : public ArrayN<octave_value>
 {
 public:
 
   Cell (void)
     : ArrayN<octave_value> (dim_vector (0, 0)) { }
 
   Cell (const octave_value& val)
     : ArrayN<octave_value> (dim_vector (1, 1), val) { }
 
-  Cell (const octave_value_list& ovl)
-    : ArrayN<octave_value> (dim_vector (1, ovl.length ()))
-    {
-      for (octave_idx_type i = 0; i < ovl.length (); i++)
-	elem (i) = ovl (i);
-    }
+  Cell (const octave_value_list& ovl);
 
   Cell (octave_idx_type n, octave_idx_type m,
 	const octave_value& val = resize_fill_value ())
     : ArrayN<octave_value> (dim_vector (n, m), val) { }
 
   Cell (const dim_vector& dv, const octave_value& val = resize_fill_value ())
     : ArrayN<octave_value> (dv, val) { }
 
@@ -72,25 +68,25 @@ public:
 
   Cell (const Cell& c)
     : ArrayN<octave_value> (c) { }
 
   bool is_cellstr (void) const;
 
   Cell index (const octave_value_list& idx, bool resize_ok = false) const;
 
-  Cell index (idx_vector& i, int resize_ok = 0,
+  Cell index (const idx_vector& i, bool resize_ok = 0,
 	      const octave_value& rfv = resize_fill_value ()) const
     { return Cell (ArrayN<octave_value>::index (i, resize_ok, rfv)); }
 
-  Cell index (idx_vector& i, idx_vector& j, int resize_ok = 0,
+  Cell index (const idx_vector& i, idx_vector& j, bool resize_ok = 0,
 	      const octave_value& rfv = resize_fill_value ()) const
     { return Cell (ArrayN<octave_value>::index (i, j, resize_ok, rfv)); }
 
-  Cell index (Array<idx_vector>& ra_idx, int resize_ok = 0,
+  Cell index (const Array<idx_vector>& ra_idx, bool resize_ok = 0,
 	      const octave_value& rfv = resize_fill_value ()) const
     { return Cell (ArrayN<octave_value>::index (ra_idx, resize_ok, rfv)); }
 
   // FIXME -- this seems necessary for
   // octave_base_mat<Cell>::delete_elements to work, but I don't
   // understand why.
   void delete_elements (const Array<idx_vector>& ia)
     { ArrayN<octave_value>::delete_elements (ia); }
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,27 @@
+2009-01-23  Jaroslav Hajek  <highegg@gmail.com>
+
+	* gripes.cc (gripe_indexed_cs_list, gripe_invalid_inquiry_subscript):
+	New functions.
+	* gripes.h: Declare them.
+	* pt-idx.cc: Remove definitions of the above funcs.
+	* ov-cell.cc (octave_cell::subsasgn): Remove dead branch.
+	* ov-struct.cc (octave_struct::subsasgn): Remove dead branch.
+	* ov-cs-list.cc (octave_cs_list::octave_cs_list (const Cell&)):
+	Optimize.
+
+2009-01-22  Jaroslav Hajek  <highegg@gmail.com>
+
+	* Cell.h (Cell::Cell (octave_value_list)): Only declare.
+	(Cell::index (*)): Change resize_ok type to bool.
+	* Cell.cc (Cell::Cell (octave_value_list)): Redefine.
+	* oct-obj.h, oct-obj.cc: Change octave_value_list::data to
+	Cell variable, reflect changes.
+
 2009-01-22  John W. Eaton  <jwe@octave.org>
 
 	* help.cc (do_which (std::ostream&, const std::string&), Fwhich):
 	Delete.
 	(do_which (const std::string&, std::string&), F__which__):
 	New functions.
 	* do_which (const std::string&):
 	Call do_which (const std::string&, std::string&) to do the work.
diff --git a/src/gripes.cc b/src/gripes.cc
--- a/src/gripes.cc
+++ b/src/gripes.cc
@@ -246,13 +246,25 @@ gripe_non_integer_conversion (const char
 void
 gripe_nan_conversion (const char *srctype, const char *desttype)
 {
   warning_with_id ("Octave:int-convert-nan", 
                    "Conversion of NaN from %s to %s",
                    srctype, desttype);
 }
 
+void
+gripe_invalid_inquiry_subscript (void)
+{
+  error ("invalid dimension inquiry of a non-existent value");
+}
+
+void
+gripe_indexed_cs_list (void)
+{
+  error ("a cs-list cannot be further indexed");
+}
+
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
diff --git a/src/gripes.h b/src/gripes.h
--- a/src/gripes.h
+++ b/src/gripes.h
@@ -126,15 +126,21 @@ extern OCTINTERP_API void
 gripe_divide_by_zero (void);
 
 extern OCTINTERP_API void
 gripe_logical_conversion (void);
 
 extern OCTINTERP_API void
 gripe_library_execution_error (void);
 
+extern OCTINTERP_API void
+gripe_invalid_inquiry_subscript (void);
+
+extern OCTINTERP_API void
+gripe_indexed_cs_list (void);
+
 #endif
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
diff --git a/src/oct-obj.cc b/src/oct-obj.cc
--- a/src/oct-obj.cc
+++ b/src/oct-obj.cc
@@ -24,42 +24,19 @@ along with Octave; see the file COPYING.
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
 #include "error.h"
 #include "oct-obj.h"
 #include "Cell.h"
 
-octave_value_list::octave_value_list (const Cell& tc)
-  : data (tc.numel ())
-{
-  for (octave_idx_type i = 0; i < tc.numel (); i++)
-    data[i] = tc(i);
-}
-
 octave_allocator
 octave_value_list::allocator (sizeof (octave_value_list));
 
-void
-octave_value_list::resize (octave_idx_type n, const octave_value& val)
-{
-  octave_idx_type len = length ();
-
-  if (n > len)
-    {
-      data.resize (n);
-
-      for (octave_idx_type i = len; i < n; i++)
-	data[i] = val;
-    }
-  else if (n < len)
-    data.resize (n);
-}
-
 octave_value_list&
 octave_value_list::prepend (const octave_value& val)
 {
   octave_idx_type n = length ();
 
   resize (n + 1);
 
   while (n > 0)
@@ -242,17 +219,24 @@ octave_value_list::make_argv (const std:
 
   return argv;
 }
 
 void
 octave_value_list::make_storable_values (void)
 {
   octave_idx_type len = length ();
+  const Array<octave_value>& cdata = data;
+
   for (octave_idx_type i = 0; i < len; i++)
-    data[i].make_storable_value ();
+    {
+      // This is optimized so that we don't force a copy unless necessary.
+      octave_value tmp = cdata(i).storable_value ();
+      if (! tmp.is_copy_of (cdata (i)))
+        data(i) = tmp;
+    }
 }
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
diff --git a/src/oct-obj.h b/src/oct-obj.h
--- a/src/oct-obj.h
+++ b/src/oct-obj.h
@@ -24,36 +24,41 @@ along with Octave; see the file COPYING.
 #if !defined (octave_oct_obj_h)
 #define octave_oct_obj_h 1
 
 #include <string>
 #include <vector>
 
 #include "oct-alloc.h"
 #include "str-vec.h"
+#include "Array.h"
 
 #include "ov.h"
-class Cell;
+#include "Cell.h"
 
 class
 OCTINTERP_API
 octave_value_list
 {
 public:
 
   octave_value_list (void)
     : data () { }
 
   octave_value_list (octave_idx_type n, const octave_value& val)
-    : data (n, val) { }
+    : data (dim_vector (1, n), val) { }
 
   octave_value_list (const octave_value& tc)
     : data (1, tc) { }
 
-  octave_value_list (const Cell& tc);
+  octave_value_list (const Array<octave_value>& d)
+    : data (d.reshape (dim_vector (1, d.numel ()))) { }
+
+  octave_value_list (const Cell& tc)
+    : data (tc.reshape (dim_vector (1, tc.numel ()))) { }
 
   octave_value_list (const octave_value_list& obj)
     : data (obj.data), names (obj.names) { }
 
   ~octave_value_list (void) { }
 
   void *operator new (size_t size)
     { return allocator.alloc (size); }
@@ -81,39 +86,48 @@ public:
 	{
 	  data = obj.data;
 	  names = obj.names;
 	}
 
       return *this;
     }
 
+  Array<octave_value> array_value (void) const { return data; }
+
+  Cell cell_value (void) const { return array_value (); }
+
   // Assignment will resize on range errors.
 
   octave_value& operator () (octave_idx_type n) { return elem (n); }
 
   octave_value operator () (octave_idx_type n) const { return elem (n); }
 
-  octave_idx_type length (void) const { return data.size (); }
+  octave_idx_type length (void) const { return data.length (); }
 
   bool empty (void) const { return length () == 0; }
 
   void resize (octave_idx_type n) { data.resize (n); }
 
-  void resize (octave_idx_type n, const octave_value& val);
+  void resize (octave_idx_type n, const octave_value& val)
+    { data.resize (n, val); }
 
   octave_value_list& prepend (const octave_value& val);
 
   octave_value_list& append (const octave_value& val);
 
   octave_value_list& append (const octave_value_list& lst);
 
   octave_value_list& reverse (void);
 
   octave_value_list
+  slice (octave_idx_type offset, octave_idx_type len) const
+    { return data.index (idx_vector (offset, offset + len)); }
+
+  octave_value_list
   splice (octave_idx_type offset, octave_idx_type len,
 	  const octave_value_list& lst = octave_value_list ()) const;
 
   bool all_strings_p (void) const;
 
   bool all_scalars (void) const;
 
   bool has_magic_colon (void) const;
@@ -125,17 +139,17 @@ public:
   string_vector name_tags (void) const { return names; }
 
   void make_storable_values (void);
 
 private:
 
   static octave_allocator allocator;
 
-  std::vector<octave_value> data;
+  Array<octave_value> data;
 
   // This list of strings can be used to tag each element of data with
   // a name.  By default, it is empty.
   string_vector names;
 
   // This constructor is private with no definition to keep statements
   // like
   //
@@ -147,36 +161,26 @@ private:
   //
   //   octave_value_list (n, val);
   //
   // and supply a default value to create a vector-valued
   // octave_value_list.
 
   octave_value_list (octave_idx_type n);
 
-  octave_value_list (const Array<octave_value>& d);
-
   octave_value& elem (octave_idx_type n)
     {
-      static Matrix empty_matrix;
+      if (n >= length ())
+	resize (n + 1);
 
-      if (n >= length ())
-	resize (n+1, empty_matrix);
-
-      return data[n];
+      return data(n);
     }
 
   octave_value elem (octave_idx_type n) const
-    {
-#if defined (BOUNDS_CHECKING)
-      return data.at (n);
-#else
-      return data[n];
-#endif
-    }
+    { return data(n); }
 };
 
 #endif
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
diff --git a/src/ov-cell.cc b/src/ov-cell.cc
--- a/src/ov-cell.cc
+++ b/src/ov-cell.cc
@@ -43,16 +43,17 @@ along with Octave; see the file COPYING.
 #include "unwind-prot.h"
 #include "utils.h"
 #include "ov-base-mat.h"
 #include "ov-base-mat.cc"
 #include "ov-re-mat.h"
 #include "ov-scalar.h"
 #include "pr-output.h"
 #include "ov-scalar.h"
+#include "gripes.h"
 
 #include "ls-oct-ascii.h"
 #include "ls-oct-binary.h"
 #include "ls-hdf5.h"
 #include "ls-utils.h"
 
 template class octave_base_matrix<Cell>;
 
@@ -135,17 +136,17 @@ octave_cell::subsref (const std::string&
 
 	if (! error_state)
 	  {
 	    Cell tcell = tmp.cell_value ();
 
 	    if (tcell.length () == 1)
 	      retval = tcell(0,0);
 	    else
-              retval = octave_value (octave_value_list (tcell), auto_add);
+              retval = octave_value (octave_value_list (tcell), true);
 	  }
       }
       break;
 
     case '.':
       {
 	std::string nm = type_name ();
 	error ("%s cannot be indexed with %c", nm.c_str (), type[0]);
@@ -222,59 +223,31 @@ octave_cell::subsasgn (const std::string
 	    if (! error_state)
 	      {
                 std::list<octave_value_list> next_idx (idx);
 
                 next_idx.erase (next_idx.begin ());
 
                 std::string next_type = type.substr (1);
 
-                if (rhs.is_cs_list ())
-                  {
-                    const octave_value_list rhsl = rhs.list_value ();
-                    if (tmpc.numel () == rhsl.length ())
-                      {
-                        for (octave_idx_type k = 0; k < tmpc.numel () && ! error_state; k++)
-                          {
-                            octave_value tmp = tmpc (k);
-                            if (! tmp.is_defined () || tmp.is_zero_by_zero ())
-                              {
-                                tmp = octave_value::empty_conv (next_type, rhs);
-                                tmp.make_unique (); // probably a no-op.
-                              }
-                            else
-                              // optimization: ignore the copy still stored inside our array and in tmpc.
-                              tmp.make_unique (2);
-
-                            tmpc(k) = tmp.subsasgn (next_type, next_idx, rhsl(k));
-                          }
-
-                        t_rhs = octave_value (octave_value_list (tmpc), true);
-                      }
-                    else
-                      error ("invalid cs-list length in assignment");
-                  }
-                else if (tmpc.numel () == 1)
+                if (tmpc.numel () == 1)
 		  {
 		    octave_value tmp = tmpc(0);
 
 		    if (! tmp.is_defined () || tmp.is_zero_by_zero ())
-                      {
-                        tmp = octave_value::empty_conv (type.substr (1), rhs);
-                        tmp.make_unique (); // probably a no-op.
-                      }
+                      tmp = octave_value::empty_conv (type.substr (1), rhs);
                     else
                       // optimization: ignore the copy still stored inside our array and in tmpc.
                       tmp.make_unique (2);
 
 		    if (! error_state)
 		      t_rhs = tmp.subsasgn (next_type, next_idx, rhs);
 		  }
                 else
-                  error ("invalid assignment to cs-list outside multiple assignment.");
+                  gripe_indexed_cs_list ();
 	      }
 	  }
 	  break;
 
 	case '.':
 	  {
 	    std::string nm = type_name ();
 	    error ("%s cannot be indexed with %c", nm.c_str (), type[0]);
diff --git a/src/ov-cs-list.cc b/src/ov-cs-list.cc
--- a/src/ov-cs-list.cc
+++ b/src/ov-cs-list.cc
@@ -34,23 +34,17 @@ along with Octave; see the file COPYING.
 #include "ov-cs-list.h"
 #include "unwind-prot.h"
 
 DEFINE_OCTAVE_ALLOCATOR (octave_cs_list);
 
 DEFINE_OV_TYPEID_FUNCTIONS_AND_DATA (octave_cs_list, "cs-list", "cs-list");
 
 octave_cs_list::octave_cs_list (const Cell& c)
-  : octave_base_value (), lst ()
+  : octave_base_value (), lst (c)
 {
-  octave_idx_type n = c.length ();
-
-  lst.resize (n);
-
-  for (octave_idx_type i = 0; i < n; i++)
-    lst(i) = c(i);
 }
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
diff --git a/src/ov-struct.cc b/src/ov-struct.cc
--- a/src/ov-struct.cc
+++ b/src/ov-struct.cc
@@ -296,59 +296,34 @@ octave_struct::subsasgn (const std::stri
 
                 // cast map to const reference to avoid forced key insertion.
                 Cell tmpc = cmap.contents (key).index (idx.front (), true);
                 tmpc.make_unique ();
 
                 // FIXME: better code reuse? cf. octave_cell::subsasgn and the case below.
 		if (! error_state)
 		  {
-                    if (rhs.is_cs_list ())
-                      {
-                        octave_value_list rhsl = rhs.list_value ();
-                        if (tmpc.numel () == rhsl.length ())
-                          {
-                            for (octave_idx_type k = 0; k < tmpc.numel () && ! error_state; k++)
-                              {
-                                octave_value tmp = tmpc (k);
-                                if (! tmp.is_defined () || tmp.is_zero_by_zero ())
-                                  {
-                                    tmp = octave_value::empty_conv (next_type, rhs);
-                                    tmp.make_unique (); // probably a no-op.
-                                  }
-                                else
-                                  // optimization: ignore the copy still stored inside our map and in tmpc.
-                                  tmp.make_unique (2);
-
-                                tmpc(k) = tmp.subsasgn (next_type, next_idx, rhsl(k));
-                              }
-
-                            t_rhs = octave_value (octave_value_list (tmpc), true);
-                          }
-                        else
-                          error ("invalid cs-list length in assignment");
-                      }
-                    else if (tmpc.numel () == 1)
+                    if (tmpc.numel () == 1)
                       {
                         octave_value tmp = tmpc(0);
 
                         if (! tmp.is_defined () || tmp.is_zero_by_zero ())
                           {
                             tmp = octave_value::empty_conv (next_type, rhs);
                             tmp.make_unique (); // probably a no-op.
                           }
                         else
                           // optimization: ignore the copy still stored inside our map and in tmpc.
                           tmp.make_unique (2);
 
                         if (! error_state)
                           t_rhs = tmp.subsasgn (next_type, next_idx, rhs);
                       }
                     else
-                      error ("invalid assignment to cs-list outside multiple assignment.");
+                      gripe_indexed_cs_list ();
 		  }
 	      }
 	    else
 	      gripe_invalid_index_for_assignment ();
 	  }
 	  break;
 
 	case '.':
@@ -368,59 +343,34 @@ octave_struct::subsasgn (const std::stri
             Cell tmpc1 = octave_value ();
             Cell& tmpc = (map.contains (key)) ? map.contents (key) : tmpc1;
 
             tmpc.make_unique ();
 
             // FIXME: better code reuse?
             if (! error_state)
               {
-                if (rhs.is_cs_list ())
-                  {
-                    octave_value_list rhsl = rhs.list_value ();
-                    if (tmpc.numel () == rhsl.length ())
-                      {
-                        for (octave_idx_type k = 0; k < tmpc.numel () && ! error_state; k++)
-                          {
-                            octave_value tmp = tmpc (k);
-                            if (! tmp.is_defined () || tmp.is_zero_by_zero ())
-                              {
-                                tmp = octave_value::empty_conv (next_type, rhs);
-                                tmp.make_unique (); // probably a no-op.
-                              }
-                            else
-                              // optimization: ignore the copy still stored inside our map.
-                              tmp.make_unique (1);
-
-                            tmpc(k) = tmp.subsasgn (next_type, next_idx, rhsl(k));
-                          }
-
-                        t_rhs = octave_value (octave_value_list (tmpc), true);
-                      }
-                    else
-                      error ("invalid cs-list length in assignment");
-                  }
-                else if (tmpc.numel () == 1)
+                if (tmpc.numel () == 1)
                   {
                     octave_value tmp = tmpc(0);
 
                     if (! tmp.is_defined () || tmp.is_zero_by_zero ())
                       {
                         tmp = octave_value::empty_conv (type.substr (1), rhs);
                         tmp.make_unique (); // probably a no-op.
                       }
                     else
                       // optimization: ignore the copy still stored inside our map.
                       tmp.make_unique (1);
 
                     if (! error_state)
                       t_rhs = tmp.subsasgn (next_type, next_idx, rhs);
                   }
                 else
-                  error ("invalid assignment to cs-list outside multiple assignment.");
+                  gripe_indexed_cs_list ();
               }
 	  }
 	  break;
 
 	case '{':
 	  gripe_invalid_index_type (type_name (), type[0]);
 	  break;
 
diff --git a/src/pt-idx.cc b/src/pt-idx.cc
--- a/src/pt-idx.cc
+++ b/src/pt-idx.cc
@@ -34,16 +34,17 @@ along with Octave; see the file COPYING.
 #include "pager.h"
 #include "pt-arg-list.h"
 #include "pt-bp.h"
 #include "pt-id.h"
 #include "pt-idx.h"
 #include "pt-walk.h"
 #include "utils.h"
 #include "variables.h"
+#include "gripes.h"
 
 // Index expressions.
 
 tree_index_expression::tree_index_expression (int l, int c)
   : tree_expression (l, c), expr (0), args (0), type (),
     arg_nm (), dyn_field () { }
 
 tree_index_expression::tree_index_expression (tree_expression *e,
@@ -258,28 +259,16 @@ tree_index_expression::make_arg_struct (
     }
 
   m.assign ("type", type_field);
   m.assign ("subs", subs_field);
 
   return m;
 }
 
-static void
-gripe_invalid_inquiry_subscript (void)
-{
-  error ("invalid dimension inquiry of a non-existent value");
-}
-
-static void
-gripe_indexed_cs_list (void)
-{
-  error ("a cs-list cannot be further indexed");
-}
-
 octave_value_list
 tree_index_expression::rvalue (int nargout)
 {
   octave_value_list retval;
 
   if (error_state)
     return retval;
 
