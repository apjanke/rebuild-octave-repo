# HG changeset patch
# User Markus MÃ¼tzel <markus.muetzel@gmx.de>
# Date 1517766258 -3600
#      Sun Feb 04 18:44:18 2018 +0100
# Node ID 037ace76257dadb7299a39a4e101a3dc58d4edf7
# Parent  328053e1d23248a568db947d34d36712b2e631b6
ov-java.cc: Use new functions in initialization of JVM.

* ov-java.cc (read_registry_string, get_module_filename): Remove functions.

* ov-java.cc (initialize_jvm): Check whether JVM is already linked in or loaded
before dynamically loading library. Use Octave functions for accessing registry
keys and checking for library functions.

diff --git a/libinterp/octave-value/ov-java.cc b/libinterp/octave-value/ov-java.cc
--- a/libinterp/octave-value/ov-java.cc
+++ b/libinterp/octave-value/ov-java.cc
@@ -297,71 +297,16 @@ namespace octave
   private:
 
     JavaVMInitArgs vm_args;
 
     std::list<std::string> java_opts;
   };
 }
 
-#if defined (OCTAVE_USE_WINDOWS_API)
-
-static std::string
-read_registry_string (const std::string& key, const std::string& value)
-{
-  HKEY hkey;
-  DWORD len;
-
-  std::string retval;
-
-  if (! RegOpenKeyEx (HKEY_LOCAL_MACHINE, key.c_str (), 0, KEY_READ, &hkey))
-    {
-      if (! RegQueryValueEx (hkey, value.c_str (), 0, 0, 0, &len))
-        {
-          retval.resize (len);
-          if (RegQueryValueEx (hkey, value.c_str (), 0, 0,
-                               (LPBYTE)&retval[0], &len))
-            retval = "";
-          else if (retval[len-1] == '\0')
-            retval.resize (--len);
-        }
-      RegCloseKey (hkey);
-    }
-
-  return retval;
-}
-
-static std::string
-get_module_filename (HMODULE hMod)
-{
-  int n = 1024;
-  std::string retval (n, '\0');
-  bool found = false;
-
-  while (n < 65536)
-    {
-      int status = GetModuleFileName (hMod, &retval[0], n);
-
-      if (status < n)
-        {
-          retval.resize (n);
-          found = true;
-          break;
-        }
-      else
-        {
-          n *= 2;
-          retval.resize (n);
-        }
-    }
-
-  return (found ? retval : "");
-}
-
-#endif
 
 //! The java initialization directory is given by the environment variable
 //! @c OCTAVE_JAVA_DIR if defined; otherwise it is the directory of Octave's
 //! m-files defining Java functions.
 //!
 //! The Java initialization directory is the directory where resides:
 //!
 //! - @c octave.jar, defining the java classes implementing octave's java
@@ -541,16 +486,23 @@ initial_class_path (void)
         error ("octave.jar does not exist: %s", jar_file.c_str ());
     }
   else
     error ("initial java dir is empty");
 
   return retval;
 }
 
+#if defined (OCTAVE_USE_WINDOWS_API)
+// Declare function defined in sysdep.cc
+extern LONG
+get_regkey_value (HKEY h_rootkey, const std::string subkey,
+                  const std::string name, octave_value& value);
+#endif
+
 //! Initialize the java virtual machine (jvm) and field #jvm if necessary.
 //!
 //! If the jvm exists and is initialized, #jvm points to it, i.e. is not 0
 //! and there is nothing to do.
 //!
 //! If #jvm is 0 and if at least one jvm exists, attach the current thread to
 //! it by setting #jvm_attached.  Otherwise, create a #jvm with some hard-
 //! coded options:
@@ -578,94 +530,96 @@ initialize_jvm (void)
   // This does not fit terminate_jvm.
   if (jvm)
     return;
 
   JNIEnv *current_env;
   const char *static_locale = setlocale (LC_ALL, nullptr);
   const std::string locale (static_locale);
 
+  octave::dynamic_library lib ("");
+  std::string jvm_lib_path = "linked in or loaded libraries";
+
+  // Check whether the Java VM library is already loaded or linked in.
+  JNI_CreateJavaVM_t create_vm = reinterpret_cast<JNI_CreateJavaVM_t>
+                                 (lib.search ("JNI_CreateJavaVM"));
+  JNI_GetCreatedJavaVMs_t get_vm = reinterpret_cast<JNI_GetCreatedJavaVMs_t>
+                                   (lib.search ("JNI_GetCreatedJavaVMs"));
+
+  if (! create_vm || ! get_vm)
+   {
 #if defined (OCTAVE_USE_WINDOWS_API)
-
-  HMODULE hMod = GetModuleHandle ("jvm.dll");
-  std::string jvm_lib_path;
-
-  if (hMod)
-    {
-      // JVM seems to be already loaded, better to use that DLL instead of
-      // looking in the registry, to avoid opening a different JVM.
-      jvm_lib_path = get_module_filename (hMod);
-
-      if (jvm_lib_path.empty ())
-        error ("unable to find Java Runtime Environment");
-    }
-  else
-    {
       // In windows, find the location of the JRE from the registry
       // and load the symbol from the dll.
       std::string key, value;
 
       key = R"(software\javasoft\java runtime environment)";
 
       value = octave::sys::env::getenv ("JAVA_VERSION");
+      octave_value regval;
+      LONG retval;
       if (value.empty ())
         {
-          value = "Currentversion";
-          std::string regval = read_registry_string (key,value);
-
-          if (regval.empty ())
+          value = "CurrentVersion";
+          retval = get_regkey_value (HKEY_LOCAL_MACHINE, key, value, regval);
+
+          if (retval != ERROR_SUCCESS)
             error ("unable to find Java Runtime Environment: %s::%s",
                    key.c_str (), value.c_str ());
 
-          value = regval;
+          value = regval.xstring_value (
+            "initialize_jvm: registry value \"%s\" at \"%s\" must be a string",
+            value.c_str (), key.c_str ());
         }
 
       key = key + '\\' + value;
       value = "RuntimeLib";
-      jvm_lib_path = read_registry_string (key, value);
+      retval = get_regkey_value (HKEY_LOCAL_MACHINE, key, value, regval);
+      if (retval != ERROR_SUCCESS)
+        error ("unable to find Java Runtime Environment: %s::%s",
+               key.c_str (), value.c_str ());
+
+      jvm_lib_path = regval.xstring_value (
+            "initialize_jvm: registry value \"%s\" at \"%s\" must be a string",
+            value.c_str (), key.c_str ());
 
       if (jvm_lib_path.empty ())
         error ("unable to find Java Runtime Environment: %s::%s",
                key.c_str (), value.c_str ());
-    }
-
 #else
-
-  // JAVA_LDPATH determined by configure and set in config.h
+      // JAVA_LDPATH determined by configure and set in config.h
 #  if defined (__APPLE__)
-  std::string jvm_lib_path = JAVA_LDPATH + std::string ("/libjvm.dylib");
+      jvm_lib_path = JAVA_LDPATH + std::string ("/libjvm.dylib");
 #  else
-  std::string jvm_lib_path = JAVA_LDPATH + std::string ("/libjvm.so");
+      jvm_lib_path = JAVA_LDPATH + std::string ("/libjvm.so");
 #  endif
-
 #endif
+      lib = octave::dynamic_library (jvm_lib_path);
+
+      if (! lib)
+        error ("unable to load Java Runtime Environment from %s",
+               jvm_lib_path.c_str ());
+
+      create_vm = reinterpret_cast<JNI_CreateJavaVM_t>
+                  (lib.search ("JNI_CreateJavaVM"));
+      get_vm = reinterpret_cast<JNI_GetCreatedJavaVMs_t>
+               (lib.search ("JNI_GetCreatedJavaVMs"));
+
+      if (! create_vm)
+        error ("unable to find JNI_CreateJavaVM in %s", jvm_lib_path.c_str ());
+
+      if (! get_vm)
+        error ("unable to find JNI_GetCreatedJavaVMs in %s",
+               jvm_lib_path.c_str ());
+    }
 
   //! The number of created jvm's.
   jsize nVMs = 0;
 
-  octave::dynamic_library lib (jvm_lib_path);
-
-  if (! lib)
-    error ("unable to load Java Runtime Environment from %s",
-           jvm_lib_path.c_str ());
-
-  JNI_CreateJavaVM_t create_vm =
-    reinterpret_cast<JNI_CreateJavaVM_t> (lib.search ("JNI_CreateJavaVM"));
-  JNI_GetCreatedJavaVMs_t get_vm =
-    reinterpret_cast<JNI_GetCreatedJavaVMs_t>
-      (lib.search ("JNI_GetCreatedJavaVMs"));
-
-  if (! create_vm)
-    error ("unable to find JNI_CreateJavaVM in %s", jvm_lib_path.c_str ());
-
-  if (! get_vm)
-    error ("unable to find JNI_GetCreatedJavaVMs in %s", jvm_lib_path.c_str ());
-
   if (get_vm (&jvm, 1, &nVMs) == 0 && nVMs > 0)
-
     {
       // At least one JVM exists, try to attach the current thread to it.
 
       switch (jvm->GetEnv (reinterpret_cast<void **> (&current_env),
                            JNI_VERSION_1_6))
         {
         case JNI_EDETACHED:
           // Attach the current thread
