# HG changeset patch
# User jwe
# Date 933631004 0
#      Mon Aug 02 21:56:44 1999 +0000
# Node ID cd454a6fa1a40c98f0f55d3b45936247235bc3a9
# Parent  fa345875edeac031b0b6549271142a16528dfc26
[project @ 1999-08-02 21:55:15 by jwe]

diff --git a/liboctave/cmd-edit.cc b/liboctave/cmd-edit.cc
--- a/liboctave/cmd-edit.cc
+++ b/liboctave/cmd-edit.cc
@@ -21,32 +21,32 @@ Software Foundation, 59 Temple Place - S
 */
 
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
 #include <cstdlib>
 #include <cstring>
-#include <ctime>
 
 #include <string>
 
 #ifdef HAVE_UNISTD_H
 #ifdef HAVE_SYS_TYPES_H
 #include <sys/types.h>
 #endif
 #include <unistd.h>
 #endif
 
 #include "cmd-edit.h"
 #include "cmd-hist.h"
 #include "lo-error.h"
 #include "lo-utils.h"
 #include "oct-env.h"
+#include "oct-time.h"
 
 command_editor *command_editor::instance = 0;
 
 #if defined (USE_READLINE)
 
 #include <cstdio>
 #include <cstdlib>
 
@@ -781,19 +781,19 @@ command_editor::do_decode_prompt_string 
 		c = 0;
 		goto add_string;
 	      }
 	  
 	    case 't':
 	    case 'd':
 	      // Make the current time/date into a string.
 	      {
-		time_t now = time (0);
+		octave_time now;
 
-		temp = ctime (&now);
+		temp = now.ctime ();
 
 		if (c == 't')
 		  {
 		    temp = temp.substr (11);
 		    temp.resize (8);
 		  }
 		else
 		  temp.resize (10);
diff --git a/liboctave/file-stat.cc b/liboctave/file-stat.cc
--- a/liboctave/file-stat.cc
+++ b/liboctave/file-stat.cc
@@ -132,17 +132,17 @@ file_stat::mode_as_string (void) const
 
   return string (buf);
 }
 
 // Has FILE been modified since TIME?  Returns 1 for yes, 0 for no,
 // and -1 for any error.
 
 int
-file_stat::is_newer (const string& file, time_t time)
+file_stat::is_newer (const string& file, const octave_time& time)
 {
   file_stat fs (file);
 
   return fs ? fs.is_newer (time) : -1;
 }
 
 // Private stuff:
 
diff --git a/liboctave/file-stat.h b/liboctave/file-stat.h
--- a/liboctave/file-stat.h
+++ b/liboctave/file-stat.h
@@ -20,16 +20,18 @@ Software Foundation, 59 Temple Place - S
 
 */
 
 #if !defined (octave_file_stat_h)
 #define octave_file_stat_h 1
 
 #include <string>
 
+#include "oct-time.h"
+
 #ifdef HAVE_SYS_TYPES_H
 #include <sys/types.h>
 #endif
 
 class
 file_stat
 {
 public:
@@ -87,19 +89,19 @@ public:
 
   nlink_t nlink (void) const { return fs_nlink; }
 
   uid_t uid (void) const { return fs_uid; }
   gid_t gid (void) const { return fs_gid; }
 
   off_t size (void) const { return fs_size; }
 
-  time_t atime (void) const { return fs_atime; }
-  time_t mtime (void) const { return fs_mtime; }
-  time_t ctime (void) const { return fs_ctime; }
+  octave_time atime (void) const { return fs_atime; }
+  octave_time mtime (void) const { return fs_mtime; }
+  octave_time ctime (void) const { return fs_ctime; }
 
 #if defined (HAVE_ST_RDEV)
   dev_t rdev (void) const { return fs_rdev; }
 #endif
 
 #if defined (HAVE_ST_BLKSIZE)
   long blksize (void) const { return fs_blksize; }
 #endif
@@ -114,21 +116,21 @@ public:
 
   operator bool () const { return ok (); }
 
   bool exists (void) const { return ok (); }
 
   string error (void) const { return ok () ? string () : errmsg; }
 
   // Has the file referenced by this object been modified since TIME?
-  bool is_newer (time_t time) const { return fs_mtime > time; }
+  bool is_newer (const octave_time& time) const { return fs_mtime > time; }
 
   // It's nice to be able to hide the file_stat object if we don't
   // really care about it.
-  static int is_newer (const string&, time_t);
+  static int is_newer (const string&, const octave_time&);
 
 private:
 
   // Name of the file.
   string file_name;
 
   // TRUE means follow symbolic links to the ultimate file (stat).
   // FALSE means get information about the link itself (lstat).
@@ -160,23 +162,23 @@ private:
 
   // group ID of owner
   gid_t fs_gid;
 
   // size in bytes, for regular files
   off_t fs_size;
 
   // time of last access
-  time_t fs_atime;
+  octave_time fs_atime;
 
   // time of last modification
-  time_t fs_mtime;
+  octave_time fs_mtime;
 
   // time of last file status change
-  time_t fs_ctime;
+  octave_time fs_ctime;
 
 #if defined (HAVE_ST_RDEV)
   // device number for special files
   dev_t fs_rdev;
 #endif
 
 #if defined (HAVE_ST_BLKSIZE)
   // best I/O block size
diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,8 +1,13 @@
+Mon Aug  2 16:39:04 1999  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* plot/bar.m: Compute bar widths correctly when x-values are not
+	evenly spaced.
+
 Mon Jul 12 22:48:34 1999  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* linear-algebra/cond.m: Avoid returning NaN for matrices that
 	contain only zeros.
 
 Sun Jun 20 22:24:27 1999  Eduardo Gallestey <eduardo@faceng.anu.edu.au>
 
 	* linear-algebra/kron.m: Create result matrix and insert blocks
diff --git a/scripts/plot/bar.m b/scripts/plot/bar.m
--- a/scripts/plot/bar.m
+++ b/scripts/plot/bar.m
@@ -64,34 +64,44 @@ function [xb, yb] = bar (x, y)
     endif
   elseif (nargin == 2)
     if (is_vector (x) && is_vector (y))
       xlen = length (x);
       ylen = length (y);
       if (xlen == ylen)
         len = 3 * xlen + 1;
         tmp_xb = tmp_yb = zeros (len, 1);
-        delta = (x(2) - x(1)) / 2.0;
-        tmp_xb(1) = x(1) - delta;
+        cutoff = zeros (1, xlen-1);
+        for i = 1:xlen-1
+          cutoff(i) = (x(i) + x(i+1)) / 2.0;
+        endfor
+        delta_p = cutoff(1) - x(1);
+        delta_m = delta_p;
+        tmp_xb(1) = x(1) - delta_m;
         tmp_yb(1) = 0.0;
 	k = 1;
         for i = 2:3:len
           tmp_xb(i) = tmp_xb(i-1);
-          tmp_xb(i+1) = tmp_xb(i) + 2.0 * delta;
+          tmp_xb(i+1) = x(k) + delta_p;
           tmp_xb(i+2) = tmp_xb(i+1);
 	  tmp_yb(i) = y(k);
 	  tmp_yb(i+1) = y(k);
 	  tmp_yb(i+2) = 0.0;
           if (k < xlen)
-            delta = (x(k+1) - x(k)) / 2.0;
             if (x(k+1) < x(k))
               error ("bar: x vector values must be in ascending order");
             endif
-          endif
-          k++;
+	    delta_m = x(k+1) - cutoff(k);
+            k++;
+            if (k < xlen)
+              delta_p = cutoff(k) - x(k);
+	    else
+	      delta_p = delta_m;
+            endif
+	  endif
 	endfor
       else
         error ("bar: arguments must be the same length");
       endif
     else
       error ("bar: arguments must be vectors");
     endif
   else
