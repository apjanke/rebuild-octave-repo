# HG changeset patch
# User Rik <rik@octave.org>
# Date 1514312989 28800
#      Tue Dec 26 10:29:49 2017 -0800
# Node ID 2dc926274bce74fae1840faf7a034ef42cbb9795
# Parent  1b4c4d6ead562cb57f9219c6d29f6b4e185b9c9c
func.tst: Add tests for error if function parameter is declared persistent.

* func.tst: Add test for error when either input or output paremeter is
declared persistent.

diff --git a/test/func.tst b/test/func.tst
--- a/test/func.tst
+++ b/test/func.tst
@@ -14,17 +14,17 @@
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## This piece of test code ensures that all operations which work on
 ## dimensions alone (squeeze, triu, etc.) work for all objects and
 ## preserve type. Even if the object is an empty matrix. This code is
-## not to check that the function itself returns teh correct result,
+## not to check that the function itself returns the correct result,
 ## just that the results are consistent for all types.
 
 %!function __fntestfunc__ (fn, mn, varargin)
 %!  typ = {"double", "complex", "logical", "sparse", "complex sparse", ...
 %!         "logical sparse", "int8", "int16", "int32", "int64", "uint8", ...
 %!         "uint16", "uint32", "uint64", "char", "cell", "struct", ...
 %!         "single", "single complex"};
 %!
@@ -185,8 +185,24 @@
 %!test
 %! __fntestfunc__ ("rotdim", m2, 1, [1, 2]);
 %!test
 %! __fntestfunc__ ("rotdim", m2, 2, [1, 2]);
 %!test
 %! __fntestfunc__ ("rotdim", m2, -1, [1, 2]);
 %!test
 %! __fntestfunc__ ("rotdim", m3, 1, [1, 2]);
+
+## Check for error if function parameter is made persistent 
+%!function retval = __fnpersist1__ (in1)
+%!  persistent retval;
+%!  
+%!  retval = 1;
+%!endfunction
+
+%!function retval = __fnpersist2__ (in1)
+%!  persistent in1;
+%!  
+%!  retval = in1;
+%!endfunction
+
+%!error <can't make function parameter retval persistent> __fnpersist1__ (1);
+%!error <can't make function parameter in1 persistent> __fnpersist2__ (1);
