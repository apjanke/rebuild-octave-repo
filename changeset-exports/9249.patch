# HG changeset patch
# User Benjamin Lindner <lindnerb@users.sourceforge.net>
# Date 1243152559 -7200
#      Sun May 24 10:09:19 2009 +0200
# Node ID 470af0f93ca9d7947027c42dddac8d1edc220625
# Parent  98034ebda17272ccbad6a86c36e291d64e97f204
ghostscript handling for windows in print.m

diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,8 +1,15 @@
+2009-05-24 Benjamin Lindner <lindnerb@users.sourceforge.net>
+
+	* plot/gnuplot_drawnow.m: single-quote output name to allow backslash
+	characters as filesep under windows
+	* plot/print.m: Support ps->pdf using ghostscript under windows, check
+	for %GSC% environment variable.
+
 2009-05-24 Benjamin Lindner <lindnerb@users.sourceforge.net>
 
 	* plot/__gnuplot_version__.m: quote gnuplot_binary to allow spaces
 	in file name
 
 2009-05-22  John W. Eaton  <jwe@octave.org>
 
 	* general/interp3.m: Don't require interpolation grid to have same
diff --git a/scripts/plot/gnuplot_drawnow.m b/scripts/plot/gnuplot_drawnow.m
--- a/scripts/plot/gnuplot_drawnow.m
+++ b/scripts/plot/gnuplot_drawnow.m
@@ -273,17 +273,17 @@ function [enhanced, implicit_margin] = g
       ## gnuplot will pick up the GNUTERM environment variable itself
       ## so no need to set the terminal type if not also setting the
       ## figure title, enhanced mode, or position.
     endif
   endif
 
   if (nargin == 5)
     if (! isempty (file))
-      fprintf (plot_stream, "set output \"%s\";\n", file);
+      fprintf (plot_stream, "set output '%s';\n", file);
     endif
   endif
 
 endfunction
 
 function term = gnuplot_default_term ()
   term = getenv ("GNUTERM");
   ## If not specified, guess the terminal type.
diff --git a/scripts/plot/print.m b/scripts/plot/print.m
--- a/scripts/plot/print.m
+++ b/scripts/plot/print.m
@@ -181,17 +181,21 @@ function print (varargin)
   debug = false;
   debug_file = "octave-print-commands.log";
   special_flag = "textnormal";
   tight_flag = false;
   resolution = "";
   if (isunix ())
     persistent ghostscript_binary = "gs";
   elseif (ispc ())
-    persistent ghostscript_binary = "gswin32c";
+    if (~isempty (getenv ("GSC")))
+      persistent ghostscript_binary = getenv ("GSC");
+    else
+      persistent ghostscript_binary = "gswin32c";
+    endif
   endif
 
   old_fig = get (0, "currentfigure");
   unwind_protect
     ## Ensure the last figure is on the screen for single line commands like
     ##   plot(...); print(...);
     drawnow ();
 
@@ -248,17 +252,18 @@ function print (varargin)
         error ("print: expecting inputs to be character string options or a figure handle");
       endif
     endfor
 
     if (isunix ())
       [status, output] = system (sprintf ("which %s 2>&1", ghostscript_binary));
       have_ghostscript = (status == 0);
     elseif (ispc ())
-      have_ghostscript = true;
+      [status, output] = system (sprintf ("if exist \"%s\" ( exit /B 1 ) else ( exit /B 0 )", ghostscript_binary));
+      have_ghostscript = (status ~= 0);
     endif
 
     doprint = isempty (name);
     if (doprint)
       if (isempty (devopt))
 	if (use_color < 0)
 	  devopt = "ps";
           printname = cstrcat (tmpnam, ".ps");
@@ -566,22 +571,22 @@ function print (varargin)
 	ghostscript_options = sprintf ("%s -dEPSCrop", ghostscript_options);
       endif
       if (isempty (strfind (lower (ghostscript_device), "write")))
 	## If output is a bitmap then include the resolution
 	ghostscript_options = sprintf ("%s -r%d", ghostscript_options, resolution);
       endif
       ghostscript_options = sprintf ("%s -sDEVICE=%s", ghostscript_options,
                                      ghostscript_device);
-      command = sprintf ("%s %s -sOutputFile='%s' '%s' 2>&1", ghostscript_binary,
+      command = sprintf ("\"%s\" %s -sOutputFile=\"%s\" \"%s\" 2>&1", ghostscript_binary,
                           ghostscript_options, ghostscript_output, name);
       [errcode, output] = system (command);
       unlink (name);
       if (errcode)
-        error ("print: Conversion failed, %s -> %s.", name, ghostscript_output);
+        error ("print: Conversion failed, %s -> %s.\nError was:\n%s\n", name, ghostscript_output, output);
       endif
     elseif (is_eps_file && tight_flag && ! doprint)
       ## If the saved output file is an eps file, use ghostscript to set a tight bbox.
       ## This may result in a smaller or larger bbox geometry.
       fix_eps_bbox (name, ghostscript_binary);
     endif
 
     if (doprint)
@@ -620,17 +625,17 @@ endfunction
 
 function bb = fix_eps_bbox (eps_file_name, ghostscript_binary)
 
   persistent warn_on_no_ghostscript = true
 
   box_string = "%%BoundingBox:";
 
   ghostscript_options = "-q -dBATCH -dSAFER -dNOPAUSE -dTextAlphaBits=4 -sDEVICE=bbox";
-  cmd = sprintf ("%s %s '%s' 2>&1", ghostscript_binary, ghostscript_options, eps_file_name);
+  cmd = sprintf ("\"%s\" %s \"%s\" 2>&1", ghostscript_binary, ghostscript_options, eps_file_name);
   [status, output] = system (cmd);
 
   if (status == 0)
 
     pattern = strcat (box_string, "[^%]*");
     pattern = pattern(1:find(double(pattern)>32, 1, "last"));
     bbox_line = regexp (output, pattern, "match");
     if (iscell (bbox_line))
@@ -667,13 +672,13 @@ function bb = fix_eps_bbox (eps_file_nam
           warning ("print.m: no bounding box found in '%s'.", eps_file_name)
         endif
       endwhile
     unwind_protect_cleanup
       fclose (fid);
     end_unwind_protect
   elseif (warn_on_no_ghostscript)
     warn_on_no_ghostscript = false;
-    warning ("print.m: Ghostscript could not be used to adjust bounding box.")
+    warning ("print.m: Ghostscript could not be used to adjust bounding box.\nError was:\n%s\n", output)
   endif
 
 endfunction
 
