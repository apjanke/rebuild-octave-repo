# HG changeset patch
# User jwe
# Date 1051590061 0
#      Tue Apr 29 04:21:01 2003 +0000
# Node ID cd8bf2c6797aa8fb0a8e851a7af85dea98a3de53
# Parent  f682f925827110e82895ddf8c2b36354696e10c4
[project @ 2003-04-29 04:21:01 by jwe]

diff --git a/liboctave/kpse.cc b/liboctave/kpse.cc
--- a/liboctave/kpse.cc
+++ b/liboctave/kpse.cc
@@ -224,20 +224,16 @@ extern int fclose (FILE *);
   while (0)
 
 extern "C" char *xbasename (const char *name);
 
 #ifndef WIN32
 static void xclosedir (DIR *d);
 #endif
 
-#ifndef WIN32
-int dir_links (const char *fn);
-#endif
-
 static void str_llist_add (str_llist_type *l, const std::string& str);
 
 static void str_llist_float (str_llist_type *l, str_llist_elt_type *mover);
 
 static std::string kpse_var_expand (const std::string& src);
 
 #include <ctime> /* for `time' */
 
@@ -249,17 +245,17 @@ kpse_is_env_sep (char c)
 
 /* xmalloc.c: malloc with error checking.  */
 
 static void *
 xmalloc (unsigned size)
 {
   void *new_mem = (void *) malloc (size);
 
-  if (new_mem == NULL)
+  if (! new_mem)
     {
       fprintf (stderr, "fatal: memory exhausted (xmalloc of %u bytes).\n",
                size);
       /* 1 means success on VMS, so pick a random number (ASCII `K').  */
       exit (75);
     }
 
   return new_mem;
@@ -267,22 +263,23 @@ xmalloc (unsigned size)
 
 /* xrealloc.c: realloc with error checking.  */
 
 static void *
 xrealloc (void *old_ptr, unsigned size)
 {
   void *new_mem;
 
-  if (old_ptr == NULL)
+  if (! old_ptr)
     new_mem = xmalloc (size);
   else
     {
       new_mem = (void *) realloc (old_ptr, size);
-      if (new_mem == NULL)
+
+      if (! new_mem)
         {
           /* We used to print OLD_PTR here using %x, and casting its
              value to unsigned, but that lost on the Alpha, where
              pointers and unsigned had different sizes.  Since the info
              is of little or no value anyway, just don't print it.  */
           fprintf (stderr, "fatal: memory exhausted (realloc of %u bytes).\n",
                    size);
           /* 1 means success on VMS, so pick a random number (ASCII `B').  */
@@ -367,33 +364,33 @@ hash_create (unsigned size)
      optimizer bug for Alpha.  */
   static hash_table_type ret;
   unsigned b;
   ret.buckets = new hash_element_type * [size];
   ret.size = size;
 
   /* calloc's zeroes aren't necessarily NULL, so be safe.  */
   for (b = 0; b <ret.size; b++)
-    ret.buckets[b] = NULL;
+    ret.buckets[b] = 0;
 
   return ret;
 }
 
 /* Whether or not KEY is already in MAP, insert it and VALUE.  */
 
 static void
 hash_insert (hash_table_type *table, const std::string& key,
 	     const std::string& value)
 {
   unsigned n = hash (*table, key);
   hash_element_type *new_elt = new hash_element_type;
 
   new_elt->key = key;
   new_elt->value = value;
-  new_elt->next = NULL;
+  new_elt->next = 0;
 
   /* Insert the new element at the end of the list.  */
   if (! table->buckets[n])
     /* first element in bucket is a special case.  */
     table->buckets[n] = new_elt;
   else
     {
       hash_element_type *loc = table->buckets[n];
@@ -409,17 +406,17 @@ hash_insert (hash_table_type *table, con
 static string_vector
 hash_lookup (hash_table_type table, const std::string& key)
 {
   hash_element_type *p;
   string_vector ret;
   unsigned n = hash (table, key);
 
   /* Look at everything in this bucket.  */
-  for (p = table.buckets[n]; p != NULL; p = p->next)
+  for (p = table.buckets[n]; p; p = p->next)
     if (key == p->key)
       ret.append (p->value);
 
 #ifdef KPSE_DEBUG
   if (KPSE_DEBUG_P (KPSE_DEBUG_HASH))
     {
       DEBUGF1 ("hash_lookup (%s) =>", key.c_str ());
       if (ret.empty ())
@@ -457,27 +454,27 @@ hash_print (hash_table_type table, int s
 	{
 	  unsigned len = 1;
 	  hash_element_type *tb;
 
 	  total_buckets++;
 	  if (! summary_only)
 	    fprintf (stderr, "%4d ", b);
 
-	  for (tb = bucket->next; tb != NULL; tb = tb->next)
+	  for (tb = bucket->next; tb; tb = tb->next)
 	    len++;
 
 	  if (! summary_only)
 	    fprintf (stderr, ":%-5d", len);
 
 	  total_elements += len;
 
 	  if (! summary_only)
 	    {
-	      for (tb = bucket; tb != NULL; tb = tb->next)
+	      for (tb = bucket; tb; tb = tb->next)
 		fprintf (stderr, " %s=>%s", tb->key.c_str (),
 			 tb->value.c_str ());
 
 	      putc ('\n', stderr);
 	    }
 	}
     }
 
@@ -656,17 +653,17 @@ static bool first_search = true;
 
 /* This function is called after every search (except the first, since
    we definitely want to allow enabling the logging in texmf.cnf) to
    record the filename(s) found in $TEXMFLOG.  */
 
 static void
 log_search (const string_vector& filenames)
 {
-  static FILE *log_file = NULL;
+  static FILE *log_file = 0;
   static bool first_time = true; /* Need to open the log file?  */
 
   if (first_time)
     {
       first_time = false;
 
       /* Get name from either envvar or config file.  */
       std::string log_name = kpse_var_value ("TEXMFLOG");
@@ -684,17 +681,17 @@ log_search (const string_vector& filenam
     {
       /* FILENAMES should never be null, but safety doesn't hurt.  */
       for (int e = 0; e < filenames.length () && ! filenames[e].empty (); e++)
 	{
 	  std::string filename = filenames[e];
 
 	  /* Only record absolute filenames, for privacy.  */
 	  if (log_file && kpse_absolute_p (filename.c_str (), false))
-	    fprintf (log_file, "%lu %s\n", (long unsigned) time (NULL),
+	    fprintf (log_file, "%lu %s\n", (long unsigned) time (0),
 		     filename.c_str ());
 
 	  /* And show them online, if debugging.  We've already started
 	     the debugging line in `search', where this is called, so
 	     just print the filename here, don't use DEBUGF.  */
 	  if (KPSE_DEBUG_P (KPSE_DEBUG_SEARCH))
 	    fputs (filename.c_str (), stderr);
 	}
@@ -992,17 +989,17 @@ path_find_first_of (const std::string& p
 
 	      if (allow_disk_search && found.empty ())
 		{
 		  static str_llist_type *tmp = 0;
 
 		  if (! tmp)
 		    {
 		      tmp = new str_llist_type;
-		      *tmp = NULL;
+		      *tmp = 0;
 		      str_llist_add (tmp, "");
 		    }
 
 		  STR_LLIST (*(*tmp)) = dir;
 
 		  found = dir_list_search (tmp, name, all);
 		}
 
@@ -1678,17 +1675,17 @@ init_path (kpse_format_info_type& info, 
      cnf entries simultaneously, to avoid having to go through envvar
      list twice -- because of the PVAR?C macro, that would mean having
      to create a str_list and then use it twice.  Yuck.  */
 
   char *env_name;
 
   std::string var;
 
-  while ((env_name = va_arg (ap, char *)) != NULL)
+  while ((env_name = va_arg (ap, char *)))
     {
       /* Since sh doesn't like envvar names with `.', check PATH_prog
 	 rather than PATH.prog.  */
 
       if (var.empty ())
 	{
 	  /* Try simply PATH.  */
 	  std::string env_value = octave_env::getenv (env_name);
@@ -1758,17 +1755,17 @@ remove_dbonly (const std::string& path)
 static std::string
 kpse_init_format (void)
 {
   /* If we get called twice, don't redo all the work.  */
   if (! kpse_format_info.path.empty ())
     return kpse_format_info.path;
 
   kpse_format_info.type = "ls-R";
-  init_path (kpse_format_info, DEFAULT_TEXMFDBS, DB_ENVS, NULL);
+  init_path (kpse_format_info, DEFAULT_TEXMFDBS, DB_ENVS, 0);
   kpse_format_info.suffix.append (std::string ("ls-R"));
   kpse_format_info.path = remove_dbonly (kpse_format_info.path);
 
 #ifdef KPSE_DEBUG
 #define MAYBE(member) \
   (kpse_format_info.member.empty () \
     ? "(none)" : kpse_format_info.member.c_str ())
 
@@ -1968,17 +1965,17 @@ db_build (hash_table_type *table, const 
       if (file_count == 0)
 	{
 	  (*current_liboctave_warning_handler)
 	    ("kpathsea: No usable entries in %s", db_filename.c_str ());
 
 	  (*current_liboctave_warning_handler)
 	    ("kpathsea: See the manual for how to generate ls-R");
 
-	  db_file = NULL;
+	  db_file = 0;
 	}
       else
 	db_dir_list.append (top_dir);
 
 #ifdef KPSE_DEBUG
       if (KPSE_DEBUG_P (KPSE_DEBUG_HASH))
 	{
 	  /* Don't make this a debugging bit, since the output is so
@@ -1993,17 +1990,17 @@ db_build (hash_table_type *table, const 
 
 	  DEBUGF ("ls-R hash table:");
 	  hash_print (*table, hash_summary_only);
 	  fflush (stderr);
 	}
 #endif /* KPSE_DEBUG */
     }
 
-  return db_file != NULL;
+  return db_file != 0;
 }
 
 /* Insert FNAME into the hash table.  This is for files that get built
    during a run.  We wouldn't want to reread all of ls-R, even if it got
    rebuilt.  */
 
 void
 kpse_db_insert (const std::string& passed_fname)
@@ -2200,17 +2197,17 @@ alias_build (hash_table_type *table, con
 	  hash_print (*table, hash_summary_only);
 	  fflush (stderr);
 	}
 #endif /* KPSE_DEBUG */
 
       xfclose (alias_file, alias_filename);
     }
 
-  return alias_file != NULL;
+  return alias_file != 0;
 }
 
 /* Initialize the path for ls-R files, and read them all into the hash
    table `db'.  If no usable ls-R's are found, set db.buckets to NULL.  */
 
 void
 kpse_init_db (void)
 {
@@ -2232,17 +2229,17 @@ kpse_init_db (void)
 	}
     }
 
   if (! ok)
     {
       /* If db can't be built, leave `size' nonzero (so we don't
 	 rebuild it), but clear `buckets' (so we don't look in it).  */
       free (db.buckets);
-      db.buckets = NULL;
+      db.buckets = 0;
     }
 
   /* Add the content of any alias databases.  There may exist more than
      one alias file along DB_NAME files.  This duplicates the above code
      -- should be a function.  */
   ok = false;
   db_files = kpse_all_path_search (db_path.c_str (), ALIAS_NAME);
 
@@ -2256,17 +2253,17 @@ kpse_init_db (void)
 	  if (alias_build (&alias_db, db_files[i]))
 	    ok = true;
 	}
     }
 
   if (! ok)
     {
       free (alias_db.buckets);
-      alias_db.buckets = NULL;
+      alias_db.buckets = 0;
     }
 }
 
 /* Avoid doing anything if this PATH_ELT is irrelevant to the databases. */
 
 string_vector
 kpse_db_search (const std::string& name_arg,
 		const std::string& orig_path_elt, bool all)
@@ -2275,17 +2272,17 @@ kpse_db_search (const std::string& name_
   string_vector ret;
   string_vector aliases;
   bool relevant = false;
 
   std::string name = name_arg;
 
   /* If we failed to build the database (or if this is the recursive
      call to build the db path), quit.  */
-  if (db.buckets == NULL)
+  if (! db.buckets)
     return ret;
 
   /* When tex-glyph.c calls us looking for, e.g., dpi600/cmr10.pk, we
      won't find it unless we change NAME to just `cmr10.pk' and append
      `/dpi600' to PATH_ELT.  We are justified in using a literal `/'
      here, since that's what tex-glyph.c unconditionally uses in
      DPI_BITMAP_SPEC.  But don't do anything if the / begins NAME; that
      should never happen.  */
@@ -2489,163 +2486,218 @@ checked_dir_list_add (str_llist_type *l,
 }
 
 /* The cache.  Typically, several paths have the same element; for
    example, /usr/local/lib/texmf/fonts//.  We don't want to compute the
    expansion of such a thing more than once.  Even though we also cache
    the dir_links call, that's not enough -- without this path element
    caching as well, the execution time doubles.  */
 
-typedef struct
+struct cache_entry
 {
-  const char *key;
+  std::string key;
   str_llist_type *value;
-} cache_entry;
-
-static cache_entry *the_cache = NULL;
+};
+
+static cache_entry *the_cache = 0;
 static unsigned cache_length = 0;
 
 /* Associate KEY with VALUE.  We implement the cache as a simple linear
    list, since it's unlikely to ever be more than a dozen or so elements
    long.  We don't bother to check here if PATH has already been saved;
    we always add it to our list.  We copy KEY but not VALUE; not sure
    that's right, but it seems to be all that's needed.  */
 
 static void
-cache (const char *key, str_llist_type *value)
+cache (const std::string key, str_llist_type *value)
 {
+  cache_entry *new_cache = new cache_entry [cache_length+1];
+
+  for (int i = 0; i < cache_length; i++)
+    {
+      new_cache[i].key = the_cache[i].key;
+      new_cache[i].value = the_cache[i].value;
+    }
+
+  delete [] the_cache;
+
+  the_cache = new_cache;
+
+  the_cache[cache_length].key = key;
+  the_cache[cache_length].value = value;
+
   cache_length++;
-
-  the_cache = (cache_entry *) xrealloc (the_cache,
-					cache_length * sizeof (cache_entry));
-
-  the_cache[cache_length - 1].key = xstrdup (key);
-  the_cache[cache_length - 1].value = value;
 }
 
 /* To retrieve, just check the list in order.  */
 
 static str_llist_type *
-cached (const char *key)
+cached (const std::string& key)
 {
   unsigned p;
 
   for (p = 0; p < cache_length; p++)
     {
-      if (! strcmp (the_cache[p].key, key))
+      if (key == the_cache[p].key)
         return the_cache[p].value;
     }
 
-  return NULL;
+  return 0;
 }
 
 /* Handle the magic path constructs.  */
 
 /* Declare recursively called routine.  */
-static void expand_elt (str_llist_type *, const char *, unsigned);
+static void expand_elt (str_llist_type *, const std::string&, unsigned);
 
 /* POST is a pointer into the original element (which may no longer be
    ELT) to just after the doubled DIR_SEP, perhaps to the null.  Append
    subdirectories of ELT (up to ELT_LENGTH, which must be a /) to
    STR_LIST_PTR.  */
 
 #ifdef WIN32
+
 /* Shared across recursive calls, it acts like a stack. */
-static char dirname[MAX_PATH];
+static std::string dirname;
+
+#else /* WIN32 */
+
+/* Return -1 if FN isn't a directory, else its number of links.
+   Duplicate the call to stat; no need to incur overhead of a function
+   call for that little bit of cleanliness. */
+
+static int
+dir_links (const std::string& fn)
+{
+  std::map<std::string, long> link_table;
+
+  long ret;
+
+  if (link_table.find (fn) != link_table.end ())
+    ret = link_table[fn];
+  else
+    {
+      struct stat stats;
+
+      ret = stat (fn.c_str (), &stats) == 0 && S_ISDIR (stats.st_mode)
+            ? stats.st_nlink : (unsigned) -1;
+
+      link_table[fn] = ret;
+
+#ifdef KPSE_DEBUG
+      if (KPSE_DEBUG_P (KPSE_DEBUG_STAT))
+        DEBUGF2 ("dir_links (%s) => %ld\n", fn.c_str (), ret);
 #endif
+    }
+
+  return ret;
+}
+
+#endif /* WIN32 */
 
 static void
-do_subdir (str_llist_type *str_list_ptr, const char *elt,
-	   unsigned elt_length, const char *post)
+do_subdir (str_llist_type *str_list_ptr, const std::string& elt,
+	   unsigned elt_length, const std::string& post)
 {
 #ifdef WIN32
   WIN32_FIND_DATA find_file_data;
   HANDLE hnd;
   int proceed;
 #else
   DIR *dir;
   struct dirent *e;
 #endif /* not WIN32 */
 
-  std::string name (elt, elt_length);
+  std::string name = elt.substr (0, elt_length);
 
   assert (IS_DIR_SEP (elt[elt_length - 1])
           || IS_DEVICE_SEP (elt[elt_length - 1]));
 
 #if defined (WIN32)
-  strcpy (dirname, name.c_str ());
-  strcat (dirname, "/*.*");         /* "*.*" or "*" -- seems equivalent. */
-  hnd = FindFirstFile (dirname, &find_file_data);
+
+  dirname = name + "/*.*";         /* "*.*" or "*" -- seems equivalent. */
+
+  hnd = FindFirstFile (dirname.c_str (), &find_file_data);
 
   if (hnd == INVALID_HANDLE_VALUE)
     return;
 
   /* Include top level before subdirectories, if nothing to match.  */
-  if (*post == 0)
+  if (post.empty ())
     dir_list_add (str_list_ptr, name);
-  else {
-    /* If we do have something to match, see if it exists.  For
-       example, POST might be `pk/ljfour', and they might have a
-       directory `$TEXMF/fonts/pk/ljfour' that we should find.  */
-    name += post;
-    expand_elt (str_list_ptr, name.c_str (), elt_length);
-    name.resize (elt_length);
-  }
+  else
+    {
+      /* If we do have something to match, see if it exists.  For
+	 example, POST might be `pk/ljfour', and they might have a
+	 directory `$TEXMF/fonts/pk/ljfour' that we should find.  */
+      name += post;
+      expand_elt (str_list_ptr, name, elt_length);
+      name.resize (elt_length);
+    }
+
   proceed = 1;
+
   while (proceed)
     {
       if (find_file_data.cFileName[0] != '.')
 	{
 	  /* Construct the potential subdirectory name.  */
 	  name += find_file_data.cFileName;
+
 	  if (find_file_data.dwFileAttributes & FILE_ATTRIBUTE_DIRECTORY)
 	    {
 	      /* It's a directory, so append the separator.  */
 	      name += DIR_SEP_STRING;
 	      unsigned potential_len = name.length ();
-	      do_subdir (str_list_ptr, name.c_str (),
-			 potential_len, post);
+
+	      do_subdir (str_list_ptr, name, potential_len, post);
 	    }
 	  name.resize (elt_length);
 	}
+
       proceed = FindNextFile (hnd, &find_file_data);
     }
+
   FindClose (hnd);
 
 #else /* not WIN32 */
 
   /* If we can't open it, quit.  */
   dir = opendir (name.c_str ());
-  if (dir == NULL)
+
+  if (! dir)
     return;
 
   /* Include top level before subdirectories, if nothing to match.  */
-  if (*post == 0)
+  if (post.empty ())
     dir_list_add (str_list_ptr, name);
   else
-    { /* If we do have something to match, see if it exists.  For
+    {
+      /* If we do have something to match, see if it exists.  For
          example, POST might be `pk/ljfour', and they might have a
          directory `$TEXMF/fonts/pk/ljfour' that we should find.  */
       name += post;
-      expand_elt (str_list_ptr, name.c_str (), elt_length);
+      expand_elt (str_list_ptr, name, elt_length);
       name.resize (elt_length);
     }
 
-  while ((e = readdir (dir)) != NULL)
-    { /* If it begins with a `.', never mind.  (This allows ``hidden''
+  while ((e = readdir (dir)))
+    {
+      /* If it begins with a `.', never mind.  (This allows ``hidden''
          directories that the algorithm won't find.)  */
+
       if (e->d_name[0] != '.')
         {
           int links;
 
           /* Construct the potential subdirectory name.  */
           name += e->d_name;
 
           /* If we can't stat it, or if it isn't a directory, continue.  */
-          links = dir_links (name.c_str ());
+          links = dir_links (name);
 
           if (links >= 0)
             {
               /* It's a directory, so append the separator.  */
               name += DIR_SEP_STRING;
               unsigned potential_len = name.length ();
 
               /* Should we recurse?  To see if the subdirectory is a
@@ -2658,20 +2710,19 @@ do_subdir (str_llist_type *str_list_ptr,
                  The #ifdef here makes all this configurable at
                  compile-time, so that if we're using VMS directories or
                  some such, we can still find subdirectories, even if it
                  is much slower.  */
 #ifdef ST_NLINK_TRICK
               if (links > 2)
 #endif /* not ST_NLINK_TRICK */
                 /* All criteria are met; find subdirectories.  */
-                do_subdir (str_list_ptr, name.c_str (),
-                           potential_len, post);
+                do_subdir (str_list_ptr, name, potential_len, post);
 #ifdef ST_NLINK_TRICK
-              else if (*post == 0)
+              else if (post.empty ())
                 /* Nothing to match, no recursive subdirectories to
                    look for: we're done with this branch.  Add it.  */
                 dir_list_add (str_list_ptr, name);
 #endif
             }
 
           /* Remove the directory entry we just checked from `name'.  */
           name.resize (elt_length);
@@ -2682,76 +2733,83 @@ do_subdir (str_llist_type *str_list_ptr,
 #endif /* not WIN32 */
 }
 
 /* Assume ELT is non-empty and non-NULL.  Return list of corresponding
    directories (with no terminating NULL entry) in STR_LIST_PTR.  Start
    looking for magic constructs at START.  */
 
 static void
-expand_elt (str_llist_type *str_list_ptr, const char *elt, unsigned start)
+expand_elt (str_llist_type *str_list_ptr, const std::string& elt,
+	    unsigned start)
 {
-  const char *dir = elt + start;
-  const char *post;
-
-  while (*dir != 0)
+  size_t elt_len = elt.length ();
+
+  size_t dir = start;
+
+
+  while (dir < elt_len)
     {
-      if (IS_DIR_SEP (*dir))
+      if (IS_DIR_SEP (elt[dir]))
         {
           /* If two or more consecutive /'s, find subdirectories.  */
-          if (IS_DIR_SEP (dir[1]))
+          if (++dir < elt_len && IS_DIR_SEP (elt[dir]))
             {
-	      for (post = dir + 1; IS_DIR_SEP (*post); post++) ;
-              do_subdir (str_list_ptr, elt, dir - elt + 1, post);
+	      size_t i = dir;
+	      while (i < elt_len && IS_DIR_SEP (elt[i]))
+		i++;
+
+	      std::string post = elt.substr (i);
+
+              do_subdir (str_list_ptr, elt, dir, post);
+
 	      return;
             }
 
           /* No special stuff at this slash.  Keep going.  */
         }
-
-      dir++;
+      else
+	dir++;
     }
 
   /* When we reach the end of ELT, it will be a normal filename.  */
   checked_dir_list_add (str_list_ptr, elt);
 }
 
 /* Here is the entry point.  Returns directory list for ELT.  */
 
 str_llist_type *
-kpse_element_dirs (const std::string& elt_arg)
+kpse_element_dirs (const std::string& elt)
 {
-  const char *elt = elt_arg.c_str ();
-
   str_llist_type *ret;
 
   /* If given nothing, return nothing.  */
-  if (! elt || !*elt)
-    return NULL;
+  if (elt.empty ())
+    return 0;
 
   /* If we've already cached the answer for ELT, return it.  */
   ret = cached (elt);
   if (ret)
     return ret;
 
   /* We're going to have a real directory list to return.  */
   ret = new str_llist_type;
-  *ret = NULL;
+  *ret = 0;
 
   /* We handle the hard case in a subroutine.  */
   expand_elt (ret, elt, 0);
 
   /* Remember the directory list we just found, in case future calls are
      made with the same ELT.  */
   cache (elt, ret);
 
 #ifdef KPSE_DEBUG
   if (KPSE_DEBUG_P (KPSE_DEBUG_EXPAND))
     {
-      DEBUGF1 ("path element %s =>", elt);
+      DEBUGF1 ("path element %s =>", elt.c_str ());
       if (ret)
         {
           str_llist_elt_type *e;
           for (e = *ret; e; e = STR_LLIST_NEXT (*e))
             fprintf (stderr, " %s", (STR_LLIST (*e)).c_str ());
         }
       putc ('\n', stderr);
       fflush (stderr);
@@ -2771,53 +2829,16 @@ xclosedir (DIR *d)
   int ret = closedir (d);
 
   if (ret != 0)
     FATAL ("closedir failed");
 #endif
 }
 #endif
 
-/* dir.c: directory operations.  */
-
-#ifndef WIN32
-
-/* Return -1 if FN isn't a directory, else its number of links.
-   Duplicate the call to stat; no need to incur overhead of a function
-   call for that little bit of cleanliness. */
-
-int
-dir_links (const char *fn)
-{
-  std::map<std::string, long> link_table;
-
-  long ret;
-
-  if (link_table.find (fn) != link_table.end ())
-    ret = link_table[fn];
-  else
-    {
-      struct stat stats;
-
-      ret = stat (fn, &stats) == 0 && S_ISDIR (stats.st_mode)
-            ? stats.st_nlink : (unsigned) -1;
-
-      link_table[fn] = ret;
-
-#ifdef KPSE_DEBUG
-      if (KPSE_DEBUG_P (KPSE_DEBUG_STAT))
-        DEBUGF2 ("dir_links (%s) => %ld\n", fn, ret);
-#endif
-    }
-
-  return ret;
-}
-
-#endif /* !WIN32 */
-
 /* debug.c: Help the user discover what's going on.  */
 
 #ifdef KPSE_DEBUG
 
 unsigned int kpathsea_debug = 0;
 
 /* If the real definitions of fopen or fclose are macros, we lose -- the
    #undef won't restore them. */
@@ -2856,17 +2877,17 @@ void
 str_llist_add (str_llist_type *l, const std::string& str)
 {
   str_llist_elt_type *e;
   str_llist_elt_type *new_elt = new str_llist_elt_type;
 
   /* The new element will be at the end of the list.  */
   STR_LLIST (*new_elt) = str;
   STR_LLIST_MOVED (*new_elt) = 0;
-  STR_LLIST_NEXT (*new_elt) = NULL;
+  STR_LLIST_NEXT (*new_elt) = 0;
 
   /* Find the current end of the list.  */
   for (e = *l; e && STR_LLIST_NEXT (*e); e = STR_LLIST_NEXT (*e))
     ;
 
   if (! e)
     *l = new_elt;
   else
@@ -2885,17 +2906,17 @@ str_llist_float (str_llist_type *l, str_
 
   /* If we've already moved this element, never mind.  */
   if (STR_LLIST_MOVED (*mover))
     return;
 
   /* Find the first unmoved element (to insert before).  We're
      guaranteed this will terminate, since MOVER itself is currently
      unmoved, and it must be in L (by hypothesis).  */
-  for (last_moved = NULL, unmoved = *l; STR_LLIST_MOVED (*unmoved);
+  for (last_moved = 0, unmoved = *l; STR_LLIST_MOVED (*unmoved);
        last_moved = unmoved, unmoved = STR_LLIST_NEXT (*unmoved))
     ;
 
   /* If we are the first unmoved element, nothing to relink.  */
   if (unmoved != mover)
     { /* Remember `mover's current successor, so we can relink `mover's
          predecessor to it.  */
       str_llist_elt_type *before_mover;
diff --git a/liboctave/pathsearch.cc b/liboctave/pathsearch.cc
--- a/liboctave/pathsearch.cc
+++ b/liboctave/pathsearch.cc
@@ -135,20 +135,17 @@ dir_path::init (void)
   for (kpse_path_iterator pi (p); pi != NPOS; pi++)
     count++;
 
   pv.resize (count);
 
   kpse_path_iterator pi (p);
 
   for (int i = 0; i < count; i++)
-    {
-      pv[i] = *pi++;
-      std::cout << pv[i] << std::endl;
-    }
+    pv[i] = *pi++;
 
   initialized = true;
 }
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
