# HG changeset patch
# User Rik <rik@octave.org>
# Date 1437960837 25200
#      Sun Jul 26 18:33:57 2015 -0700
# Node ID 755ba248fb4ada6b6ad46033b516d1f18cf0456a
# Parent  26bd6008fc9c6c6cd2c3a0bdf186b901c622a6a0
build: Rename __go_draw_XXX to __gnuplot_draw_XXX for clarity.

* scripts/plot/util/private/__gnuplot_draw_axes__.m: Renamed from
__go_draw_axes__.m

* scripts/plot/util/private/__gnuplot_draw_figure__.m: Renamed from
__go_draw_figure__.m

* __scatter__.m, __gnuplot_drawnow__.m: Update scripts to use new names.

* scripts/plot/util/module.mk: Use new file names in build system.

diff --git a/scripts/plot/draw/private/__scatter__.m b/scripts/plot/draw/private/__scatter__.m
--- a/scripts/plot/draw/private/__scatter__.m
+++ b/scripts/plot/draw/private/__scatter__.m
@@ -286,17 +286,17 @@ endfunction
 function render_size_color (hg, vert, s, c, marker, filled, isflat)
   if (isscalar (s))
     x = vert(:,1);
     y = vert(:,2);
     z = vert(:,3:end);
     toolkit = get (ancestor (hg, "figure"), "__graphics_toolkit__");
     ## Does gnuplot only support triangles with different vertex colors ?
     ## TODO: Verify gnuplot can only support one color.  If RGB triplets
-    ##       can be assigned to each vertex, then fix __go_draw_axes__.m
+    ##       can be assigned to each vertex, then fix __gnuplot_draw_axes__.m
     gnuplot_hack = (numel (x) > 1 && columns (c) == 3
                     && strcmp (toolkit, "gnuplot"));
     if (ischar (c) || ! isflat || gnuplot_hack)
       if (filled)
         __go_patch__ (hg, "xdata", x, "ydata", y, "zdata", z,
                           "faces", 1:numel (x), "vertices", vert,
                           "facecolor", "none", "edgecolor", "none",
                           "marker", marker,
diff --git a/scripts/plot/util/__gnuplot_drawnow__.m b/scripts/plot/util/__gnuplot_drawnow__.m
--- a/scripts/plot/util/__gnuplot_drawnow__.m
+++ b/scripts/plot/util/__gnuplot_drawnow__.m
@@ -35,21 +35,21 @@ function __gnuplot_drawnow__ (h, term, f
     plot_stream = [];
     fid = [];
     default_plot_stream = get (h, "__plot_stream__");
     unwind_protect
       plot_stream = __gnuplot_open_stream__ (2, h);
       gnuplot_supports_term = __gnuplot_has_terminal__ (term, plot_stream);
       if (gnuplot_supports_term)
         enhanced = gnuplot_set_term (plot_stream(1), true, h, term, file);
-        __go_draw_figure__ (h, plot_stream(1), enhanced, mono);
+        __gnuplot_draw_figure__ (h, plot_stream(1), enhanced, mono);
         if (nargin == 5)
           fid = fopen (debug_file, "wb");
           enhanced = gnuplot_set_term (fid, true, h, term, file);
-          __go_draw_figure__ (h, fid, enhanced, mono);
+          __gnuplot_draw_figure__ (h, fid, enhanced, mono);
         endif
       else
         error ('__gnuplot_drawnow__: the gnuplot terminal, "%s", is not available',
                gnuplot_trim_term (term));
       endif
     unwind_protect_cleanup
       set (h, "__plot_stream__", default_plot_stream);
       if (! isempty (plot_stream))
@@ -78,17 +78,17 @@ function __gnuplot_drawnow__ (h, term, f
     if (strcmp (term, "dumb"))
       ## popen2 eats stdout of gnuplot, use temporary file instead
       dumb_tmp_file = tempname ();
       enhanced = gnuplot_set_term (plot_stream(1), new_stream, h,
                                    term, dumb_tmp_file);
     else
       enhanced = gnuplot_set_term (plot_stream(1), new_stream, h, term);
     endif
-    __go_draw_figure__ (h, plot_stream(1), enhanced, mono);
+    __gnuplot_draw_figure__ (h, plot_stream(1), enhanced, mono);
     fflush (plot_stream(1));
     if (strcmp (term, "dumb"))
       fid = -1;
       while (fid < 0)
         pause (0.1);
         fid = fopen (dumb_tmp_file, 'r');
       endwhile
       ## reprint the plot on screen
diff --git a/scripts/plot/util/module.mk b/scripts/plot/util/module.mk
--- a/scripts/plot/util/module.mk
+++ b/scripts/plot/util/module.mk
@@ -12,18 +12,18 @@ scripts_plot_util_PRIVATE_FCN_FILES = \
   scripts/plot/util/private/__ghostscript__.m \
   scripts/plot/util/private/__gnuplot_get_var__.m \
   scripts/plot/util/private/__gnuplot_ginput__.m \
   scripts/plot/util/private/__gnuplot_has_feature__.m \
   scripts/plot/util/private/__gnuplot_has_terminal__.m \
   scripts/plot/util/private/__gnuplot_open_stream__.m \
   scripts/plot/util/private/__gnuplot_print__.m \
   scripts/plot/util/private/__gnuplot_version__.m \
-  scripts/plot/util/private/__go_draw_axes__.m \
-  scripts/plot/util/private/__go_draw_figure__.m \
+  scripts/plot/util/private/__gnuplot_draw_axes__.m \
+  scripts/plot/util/private/__gnuplot_draw_figure__.m \
   scripts/plot/util/private/__opengl_print__.m \
   scripts/plot/util/private/__print_parse_opts__.m \
   scripts/plot/util/private/__tight_eps_bbox__.m
 
 scripts_plot_util_FCN_FILES = \
   scripts/plot/util/__actual_axis_position__.m \
   scripts/plot/util/allchild.m \
   scripts/plot/util/ancestor.m \
diff --git a/scripts/plot/util/private/__go_draw_axes__.m b/scripts/plot/util/private/__gnuplot_draw_axes__.m
rename from scripts/plot/util/private/__go_draw_axes__.m
rename to scripts/plot/util/private/__gnuplot_draw_axes__.m
--- a/scripts/plot/util/private/__go_draw_axes__.m
+++ b/scripts/plot/util/private/__gnuplot_draw_axes__.m
@@ -12,23 +12,23 @@
 ## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
-## @deftypefn {Function File} {} __go_draw_axes__ (@var{h}, @var{plot_stream}, @var{enhanced}, @var{mono})
+## @deftypefn {Function File} {} __gnuplot_draw_axes__ (@var{h}, @var{plot_stream}, @var{enhanced}, @var{mono})
 ## Undocumented internal function.
 ## @end deftypefn
 
 ## Author: jwe
 
-function __go_draw_axes__ (h, plot_stream, enhanced, mono,
+function __gnuplot_draw_axes__ (h, plot_stream, enhanced, mono,
                            bg_is_set, fg_is_set, hlgnd)
 
   showhiddenhandles = get (0, "showhiddenhandles");
   unwind_protect
     set (0, "showhiddenhandles", "on");
     axis_obj = __get__ (h);
   unwind_protect_cleanup
     set (0, "showhiddenhandles", showhiddenhandles);
@@ -663,17 +663,17 @@ function __go_draw_axes__ (h, plot_strea
              hidden_removal = false;
            else
 
              if (isnan (hidden_removal))
                hidden_removal = true;
              endif
              if (nd == 3)
                if (numel (xcol) > 3)
-                 error ("__go_draw_axes__: gnuplot (as of v4.2) only supports 3-D filled triangular patches");
+                 error ("__gnuplot_draw_axes__: gnuplot (as of v4.2) only supports 3-D filled triangular patches");
                else
                  if (isnan (data_3d_idx))
                    data_idx++;
                    data_3d_idx = data_idx;
                    is_image_data(data_idx) = false;
                    parametric(data_idx) = false;
                    have_cdata(data_idx) = true;
                    have_3d_patch(data_idx) = true;
@@ -1164,17 +1164,17 @@ function __go_draw_axes__ (h, plot_strea
           elseif (ismatrix (xdat) && ismatrix (ydat) && ismatrix (zdat))
             if (! size_equal (xdat, ydat, zdat))
               err = true;
             endif
           else
             err = true;
           endif
           if (err)
-            error ("__go_draw_axes__: invalid grid data");
+            error ("__gnuplot_draw_axes__: invalid grid data");
           endif
           xlen = columns (zdat);
           ylen = rows (zdat);
           if (xlen == columns (xdat) && xlen == columns (ydat)
               && ylen == rows (xdat) && ylen == rows (ydat))
             len = 4 * xlen;
             zz = zeros (ylen, len);
             k = 1;
@@ -1392,17 +1392,17 @@ function __go_draw_axes__ (h, plot_strea
         ## Push group children into the kid list.
         if (isempty (kids))
           kids = obj.children;
         elseif (! isempty (obj.children))
           kids = [kids; obj.children];
         endif
 
       otherwise
-        error ("__go_draw_axes__: unknown object class, %s",
+        error ("__gnuplot_draw_axes__: unknown object class, %s",
                obj.type);
     endswitch
 
   endwhile
 
   ## This is need to prevent warnings for rotations in 3D plots, while
   ## allowing colorbars with contours.
   if (nd == 2 || (data_idx > 1 && ! view_map))
@@ -2220,17 +2220,17 @@ function do_tics_1 (ticmode, tics, mtics
 endfunction
 
 function ticklabel = ticklabel_to_cell (ticklabel)
   if (ischar (ticklabel))
     ticklabel = cellstr (ticklabel);
   elseif (iscellstr (ticklabel))
     ticklabel = ticklabel;
   else
-    error ("__go_draw_axes__: unsupported type of ticklabel");
+    error ("__gnuplot_draw_axes__: unsupported type of ticklabel");
   endif
 endfunction
 
 function colorspec = get_text_colorspec (color, mono)
   if (mono)
     colorspec = "";
   else
     colorspec = sprintf ("textcolor rgb \"#%02x%02x%02x\"",
diff --git a/scripts/plot/util/private/__go_draw_figure__.m b/scripts/plot/util/private/__gnuplot_draw_figure__.m
rename from scripts/plot/util/private/__go_draw_figure__.m
rename to scripts/plot/util/private/__gnuplot_draw_figure__.m
--- a/scripts/plot/util/private/__go_draw_figure__.m
+++ b/scripts/plot/util/private/__gnuplot_draw_figure__.m
@@ -12,23 +12,23 @@
 ## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
-## @deftypefn {Function File} {} __go_draw_figure__ (@var{h}, @var{plot_stream}, @var{enhanced}, @var{mono})
+## @deftypefn {Function File} {} __gnuplot_draw_figure__ (@var{h}, @var{plot_stream}, @var{enhanced}, @var{mono})
 ## Undocumented internal function.
 ## @end deftypefn
 
 ## Author: jwe
 
-function __go_draw_figure__ (h, plot_stream, enhanced, mono)
+function __gnuplot_draw_figure__ (h, plot_stream, enhanced, mono)
 
   htype = get (h, "type");
   if (strcmp (htype, "figure"))
     ## Get complete list of children.
     kids = allchild (h);
     nkids = length (kids);
 
     if (nkids > 0)
@@ -111,17 +111,17 @@ function __go_draw_figure__ (h, plot_str
                       endif
                     elseif (! isempty (lm))
                       toberm = [toberm, line("xdata",[0,0],"ydata",[0,0], "color", get(lm,"color"), "linestyle", "none", "marker", get(lm,"marker"), "markeredgecolor", get(lm,"markeredgecolor"), "markerfacecolor", get(lm,"markerfacecolor"), "markersize", get (lm, "markersize"), "displayname", displayname, "parent", kids(i))];
                     endif
                   endfor
                   if (bg_is_set)
                     fprintf (plot_stream, "set border linecolor rgb \"#%02x%02x%02x\"\n", round (255 * (1 - bg)));
                   endif
-                  __go_draw_axes__ (kids(i), plot_stream, enhanced, mono,
+                  __gnuplot_draw_axes__ (kids(i), plot_stream, enhanced, mono,
                                     bg_is_set, false, hlgnd);
                 unwind_protect_cleanup
                   ## Return axes "units" and "position" back to
                   ## their original values.
                   set (ca, "units", orig_axes_units);
                   set (kids(i), "units", legend_axes_units,
                        "box", legend_axes_box,
                        "ylim", legend_axes_ylim,
@@ -149,58 +149,58 @@ function __go_draw_figure__ (h, plot_str
                   fg_was_set = false;
                 else
                   fg_is_set = false;
                 endif
                 if (bg_is_set)
                   fprintf (plot_stream, "set border linecolor rgb \"#%02x%02x%02x\"\n", round (255 * (1 - bg)));
                 endif
                 ## Find if this axes has an associated legend axes and pass it
-                ## to __go_draw_axes__
+                ## to __gnuplot_draw_axes__
                 hlegend = [];
                 fkids = get (h, "children");
                 for j = 1 : numel (fkids)
                   if (ishandle (fkids (j))
                       && strcmp (get (fkids (j), "type"), "axes")
                       && (strcmp (get (fkids (j), "tag"), "legend")))
                     udata = get (fkids (j), "userdata");
                     if (isscalar (udata.handle)
                         && ! isempty (intersect (udata.handle, kids (i))))
                       hlegend = get (fkids (j));
                       break;
                     endif
                   endif
                 endfor
-                __go_draw_axes__ (kids(i), plot_stream, enhanced, mono,
+                __gnuplot_draw_axes__ (kids(i), plot_stream, enhanced, mono,
                                   bg_is_set, fg_is_set, hlegend);
               unwind_protect_cleanup
                 ## Return axes "units" and "position" back to
                 ## their original values.
                 set (kids(i), "units", orig_axes_units);
                 set (kids(i), "position", orig_axes_position);
                 bg_is_set = false;
                 fg_is_set = false;
               end_unwind_protect
             endif
           case "uimenu"
             ## ignore uimenu objects
             kids(i) = [];
           otherwise
-            error ("__go_draw_figure__: unknown object class, %s", type);
+            error ("__gnuplot_draw_figure__: unknown object class, %s", type);
         endswitch
       endfor
       if (isempty (kids))
         fputs (plot_stream, "\nreset; clear;\n");
         fflush (plot_stream);
       else
         fputs (plot_stream, "\nunset multiplot;\n");
       endif
     else
       fputs (plot_stream, "\nreset; clear;\n");
       fflush (plot_stream);
     endif
   else
-    error ("__go_draw_figure__: expecting figure object, found '%s'",
+    error ("__gnuplot_draw_figure__: expecting figure object, found '%s'",
            htype);
   endif
 
 endfunction
 
