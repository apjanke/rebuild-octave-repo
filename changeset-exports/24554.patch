# HG changeset patch
# User Rik <rik@octave.org>
# Date 1515390034 28800
#      Sun Jan 07 21:40:34 2018 -0800
# Node ID cd42d0f341db125a5ae8234c02b33f641890d2a8
# Parent  48830eeb348b9addca2a48515d5d68247e75e8f6
# Parent  6e81c8a5add7463e7f56118d21f392fedc4ddecb
maint: Merge stable to default.

diff --git a/doc/interpreter/diagperm.txi b/doc/interpreter/diagperm.txi
--- a/doc/interpreter/diagperm.txi
+++ b/doc/interpreter/diagperm.txi
@@ -270,17 +270,17 @@ If @code{m < n}, then the expression @co
 D(:,1:m) * M(1:m,:),
 @end example
 
 @noindent
 i.e., trailing @code{n-m} rows of @var{M} are ignored.  If @code{m > n},
 then @code{D*M} is equivalent to
 
 @example
-[D(1:n,n) * M; zeros(m-n, columns (M))],
+[D(1:n,:) * M; zeros(m-n, columns (M))],
 @end example
 
 @noindent
 i.e., null rows are appended to the result.
 The situation for right-multiplication @code{M*D} is analogous.
 
 @cindex pseudoinverse
 The expressions @code{D \ M} and @code{M / D} perform inverse scaling.
@@ -442,17 +442,17 @@ making it possible to conveniently obtai
 @section Examples of Usage
 
 The following can be used to solve a linear system @code{A*x = b}
 using the pivoted LU@tie{}factorization:
 
 @example
 @group
   [L, U, P] = lu (A); ## now L*U = P*A
-  x = U \ L \ P*b;
+  x = U \ (L \ P) * b;
 @end group
 @end example
 
 @noindent
 This is one way to normalize columns of a matrix @var{X} to unit norm:
 
 @example
 @group
@@ -521,17 +521,17 @@ a @nospell{"numerical zero"} and an @nos
 floating-point value could occur.  It is normally stored somewhere in memory
 as an explicit value.  An @nospell{"assumed zero"}, on the contrary, is a zero
 matrix element implied by the matrix structure (diagonal, triangular) or a
 sparsity pattern; its value is usually not stored explicitly anywhere, but is
 implied by the underlying data structure.
 
 The primary distinction is that an assumed zero, when multiplied
 by any number, or divided by any nonzero number,
-yields *always* a zero, even when, e.g., multiplied by @code{Inf}
+yields @strong{always} a zero, even when, e.g., multiplied by @code{Inf}
 or divided by @code{NaN}.
 The reason for this behavior is that the numerical multiplication is not
 actually performed anywhere by the underlying algorithm; the result is
 just assumed to be zero.  Equivalently, one can say that the part of the
 computation involving assumed zeros is performed symbolically, not numerically.
 
 This behavior not only facilitates the most straightforward and efficient
 implementation of algorithms, but also preserves certain useful invariants,
