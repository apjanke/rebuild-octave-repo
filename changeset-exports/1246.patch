# HG changeset patch
# User jwe
# Date 797561364 0
#      Tue Apr 11 00:49:24 1995 +0000
# Node ID 35950c102ac3ca382a9215a5168df987be896b43
# Parent  85d1899047e1a7f27f026b17e46171443ced3c90
[project @ 1995-04-11 00:49:24 by jwe]

diff --git a/src/expm.cc b/src/expm.cc
--- a/src/expm.cc
+++ b/src/expm.cc
@@ -41,21 +41,21 @@ Software Foundation, 675 Mass Ave, Cambr
 #include "gripes.h"
 #include "error.h"
 #include "utils.h"
 #include "help.h"
 #include "defun-dld.h"
 
 extern "C"
 {
-  double F77_FCN (dlange) (const char*, const int*, const int*,
-			   const double*, const int*, double*);
+  double F77_FCN (dlange) (const char*, const int&, const int&,
+			   const double*, const int&, double*);
 
-  double F77_FCN (zlange) (const char*, const int*, const int*,
-			   const Complex*, const int*, double*);
+  double F77_FCN (zlange) (const char*, const int&, const int&,
+			   const Complex*, const int&, double*);
 }
 
 DEFUN_DLD_BUILTIN ("expm", Fexpm, Sexpm, 2, 1,
   "expm (X): matrix exponential, e^A")
 {
   Octave_object retval;
 
   int nargin = args.length ();
@@ -130,18 +130,17 @@ DEFUN_DLD_BUILTIN ("expm", Fexpm, Sexpm,
 
       AEPBALANCE mbal (m, balance_job);
       m = mbal.balanced_matrix ();
       Matrix d = mbal.balancing_matrix ();
 
 // Preconditioning step 3: scaling.
 
       ColumnVector work(nc);
-      inf_norm = F77_FCN (dlange) ("I", &nc, &nc,
-				   m.fortran_vec (), &nc,
+      inf_norm = F77_FCN (dlange) ("I", nc, nc, m.fortran_vec (), nc,
 				   work.fortran_vec ());
 
       sqpow = (int) (1.0 + log (inf_norm) / log (2.0));
 
 // Check whether we need to square at all.
 
       if (sqpow < 0)
 	sqpow = 0;
@@ -223,18 +222,17 @@ DEFUN_DLD_BUILTIN ("expm", Fexpm, Sexpm,
 
       ComplexAEPBALANCE mbal (m, balance_job);
       m = mbal.balanced_matrix ();
       ComplexMatrix d = mbal.balancing_matrix ();
 
 // Preconditioning step 3: scaling.
 
       ColumnVector work (nc);
-      inf_norm = F77_FCN (zlange) ("I", &nc, &nc, m.
-				   fortran_vec (), &nc,
+      inf_norm = F77_FCN (zlange) ("I", nc, nc, m.fortran_vec (), nc,
 				   work.fortran_vec ());
 
       sqpow = (int) (1.0 + log (inf_norm) / log (2.0));
 
 // Check whether we need to square at all.
 
       if (sqpow < 0)
 	sqpow = 0;
