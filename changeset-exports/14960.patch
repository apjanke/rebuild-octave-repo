# HG changeset patch
# User Max Brister <max@2bass.com>
# Date 1340127413 18000
#      Tue Jun 19 12:36:53 2012 -0500
# Node ID c959136f8c3edaeea6f9a777888cacd229bc9128
# Parent  12fd4a62d6333b664eacf419bfb944c5fed7ab02
Rename jit_check_error to jit_error_check

* src/pt-jit.h (JIT_VISIT_IR_NOTEMPLATE, jit_check_error):
  Replace check_error with error_check.

* src/pt-jit.cc (jit_convert::visit_binary_expression,
  jit_convert::visit_if_command_list, jit_convert::remove_dead,
  jit_convert::convert_llvm::visit): Replace check_error with error_check.

diff --git a/src/pt-jit.cc b/src/pt-jit.cc
--- a/src/pt-jit.cc
+++ b/src/pt-jit.cc
@@ -1613,17 +1613,17 @@ jit_convert::visit_binary_expression (tr
 
   tree_expression *rhs = be.rhs ();
   jit_value *rhsv = visit (rhs);
 
   const jit_function& fn = jit_typeinfo::binary_op (be.op_type ());
   jit_call *call = block->append (create<jit_call> (fn, lhsv, rhsv));
 
   jit_block *normal = create<jit_block> (block->name ());
-  block->append (create<jit_check_error> (call, normal, final_block));
+  block->append (create<jit_error_check> (call, normal, final_block));
   add_block (normal);
   block = normal;
   result = call;
 }
 
 void
 jit_convert::visit_break_command (tree_break_command&)
 {
@@ -1870,17 +1870,17 @@ jit_convert::visit_if_command_list (tree
           tree_expression *expr = tic->condition ();
           jit_value *cond = visit (expr);
           jit_call *check = create<jit_call> (&jit_typeinfo::logically_true,
                                               cond);
           block->append (check);
 
           jit_block *next = create<jit_block> (block->name ());
           add_block (next);
-          block->append (create<jit_check_error> (check, next, final_block));
+          block->append (create<jit_error_check> (check, next, final_block));
           block = next;
 
           jit_block *body = create<jit_block> (i == 0 ? "if_body"
                                                : "ifelse_body");
           add_block (body);
 
           jit_instruction *br = create<jit_cond_branch> (check, body,
                                                         entry_blocks[i + 1]);
@@ -1935,17 +1935,17 @@ jit_convert::visit_index_expression (tre
   tree_expression *arg0 = arg_list->front ();
   jit_value *index = visit (arg0);
 
   jit_call *call = create<jit_call> (jit_typeinfo::paren_subsref, object,
                                      index);
   block->append (call);
 
   jit_block *normal = create<jit_block> (block->name ());
-  block->append (create<jit_check_error> (call, normal, final_block));
+  block->append (create<jit_error_check> (call, normal, final_block));
   add_block (normal);
   block = normal;
   result = call;
 }
 
 void
 jit_convert::visit_matrix (tree_matrix&)
 {
@@ -2345,17 +2345,17 @@ jit_convert::remove_dead ()
         }
     }
 
   for (biter = blocks.begin (); biter != blocks.end ();)
     {
       jit_block *b = *biter;
       if (b->alive ())
         {
-          // FIXME: A special case for jit_check_error, if we generalize to
+          // FIXME: A special case for jit_error_check, if we generalize to
           // we will need to change!
           jit_terminator *term = b->terminator ();
           if (term && term->successor_count () == 2 && ! term->alive (0))
             {
               jit_block *succ = term->successor (1);
               term->remove ();
               jit_branch *abreak = b->append (create<jit_branch> (succ));
               abreak->infer ();
@@ -2684,17 +2684,17 @@ jit_convert::convert_llvm::visit (jit_ph
 
 void
 jit_convert::convert_llvm::visit (jit_variable&)
 {
   fail ("ERROR: SSA construction should remove all variables");
 }
 
 void
-jit_convert::convert_llvm::visit (jit_check_error& check)
+jit_convert::convert_llvm::visit (jit_error_check& check)
 {
   llvm::Value *cond = jit_typeinfo::insert_error_check ();
   llvm::Value *br = builder.CreateCondBr (cond, check.successor_llvm (0),
                                           check.successor_llvm (1));
   check.stash_llvm (br);
 }
 
 void
diff --git a/src/pt-jit.h b/src/pt-jit.h
--- a/src/pt-jit.h
+++ b/src/pt-jit.h
@@ -704,17 +704,17 @@ private:
   JIT_METH(block);                              \
   JIT_METH(branch);                             \
   JIT_METH(cond_branch);                        \
   JIT_METH(call);                               \
   JIT_METH(extract_argument);                   \
   JIT_METH(store_argument);                     \
   JIT_METH(phi);                                \
   JIT_METH(variable);                           \
-  JIT_METH(check_error);                        \
+  JIT_METH(error_check);                        \
   JIT_METH(assign)                              \
   JIT_METH(argument)
 
 #define JIT_VISIT_IR_CONST                      \
   JIT_METH(const_scalar);                       \
   JIT_METH(const_index);                        \
   JIT_METH(const_string);                       \
   JIT_METH(const_range)
@@ -1777,20 +1777,20 @@ public:
 private:
   const jit_function& mfunction;
 };
 
 // FIXME: This is just ugly...
 // checks error_state, if error_state is false then goto the normal branche,
 // otherwise goto the error branch
 class
-jit_check_error : public jit_terminator
+jit_error_check : public jit_terminator
 {
 public:
-  jit_check_error (jit_call *acheck_for, jit_block *normal, jit_block *error)
+  jit_error_check (jit_call *acheck_for, jit_block *normal, jit_block *error)
     : jit_terminator (2, error, normal, acheck_for) {}
 
   jit_call *check_for (void) const
   {
     return static_cast<jit_call *> (argument (2));
   }
 
   virtual std::ostream& print (std::ostream& os, size_t indent = 0) const
