# HG changeset patch
# User Mike Miller <mtmiller@octave.org>
# Date 1523560154 25200
#      Thu Apr 12 12:09:14 2018 -0700
# Branch stable
# Node ID e1024058833c614ac9bee2e3e5c57ad55a9e1d48
# Parent  07bddddc58567e5960a77b8a79e0790cbb6a24d8
test: change remaining %!xtests into %!tests

* tar.m, zip.m, fminsearch.m: Change %!xtest into %!test.  Add or update
FIXME comments in case tests fail on some systems.
* clf.m, speed.m: Change %!xtest into %!test.

diff --git a/scripts/miscellaneous/tar.m b/scripts/miscellaneous/tar.m
--- a/scripts/miscellaneous/tar.m
+++ b/scripts/miscellaneous/tar.m
@@ -81,17 +81,20 @@ function filelist = tar (tarfile, files,
   if (nargout > 0)
     filelist = ostrsplit (output, "\r\n", true);
     filelist = filelist';
   endif
 
 endfunction
 
 
-%!xtest
+## FIXME: This test may fail if the tar command is not installed.  If this
+##        test fails, it might be better to change it into a testif with a
+##        runtime condition on the tar program.
+%!test
 %! ## test tar together with untar
 %! orig_dir = pwd ();
 %! unwind_protect
 %!   dirname = tarname = outdir = "";
 %!   dirname = tempname ();
 %!   assert (mkdir (dirname));
 %!   chdir (dirname);
 %!   dirname2 = "dir2";
diff --git a/scripts/miscellaneous/zip.m b/scripts/miscellaneous/zip.m
--- a/scripts/miscellaneous/zip.m
+++ b/scripts/miscellaneous/zip.m
@@ -82,17 +82,20 @@ function filelist = zip (zipfile, files,
       error ("zip: zipinfo failed with exit status = %d", status);
     endif
     filelist = ostrsplit (filelist, "\r\n", true);
   endif
 
 endfunction
 
 
-%!xtest
+## FIXME: This test may fail if the zip or unzip command is not installed.
+##        If this test fails, it might be better to change it into a testif
+##        with a runtime condition on the zip and unzip programs.
+%!test
 %! ## test zip together with unzip
 %! unwind_protect
 %!   filename = tempname ();
 %!   tmp_var  = pi;
 %!   save (filename, "tmp_var");
 %!   dirname = tempname ();
 %!   mkdir (dirname);
 %!   zipfile = tempname ();
diff --git a/scripts/optimization/fminsearch.m b/scripts/optimization/fminsearch.m
--- a/scripts/optimization/fminsearch.m
+++ b/scripts/optimization/fminsearch.m
@@ -438,20 +438,20 @@ endfunction
 %! draw_fcn = @(x) (plot (x(1), x(2)) && false);
 %! fcn = @(x) (x(1)-5).^2 + (x(2)-8).^4;
 %! x0 = [0;0];
 %! [xmin, fval] = fminsearch (fcn, x0, optimset ("OutputFcn", draw_fcn))
 %! hold off;
 
 %!assert (fminsearch (@sin, 3, optimset ("MaxIter", 30)), 3*pi/2, 1e-4)
 
-## The following test is for checking that fminsearch stops earlier with
-## these settings.  If the optimizer algorithm is changed it is allowed to
-## fail.  Just adapt the values to make it pass again.
-%!xtest
+## FIXME: The following test is for checking that fminsearch stops earlier
+##        with these settings.  If the optimizer algorithm is changed, it
+##        may fail.  Just adapt the values to make it pass again.
+%!test
 %! x = fminsearch (@sin, 3, optimset ("MaxIter", 3, "Display", "none"));
 %! assert (x, 4.8750, 1e-4);
 %! x = fminsearch (@sin, 3, optimset ("MaxFunEvals", 18, "Display", "none"));
 %! assert (x, 4.7109, 1e-4);
 
 %!test
 %! c = 1.5;
 %! assert (fminsearch (@(x) x(1).^2 + c*x(2).^2, [1;1]), [0;0], 1e-4);
diff --git a/scripts/plot/util/clf.m b/scripts/plot/util/clf.m
--- a/scripts/plot/util/clf.m
+++ b/scripts/plot/util/clf.m
@@ -106,17 +106,17 @@ endfunction
 %! hf = figure ("visible", "off");
 %! unwind_protect
 %!   clf;
 %!   assert (isempty (get (gcf, "children")));
 %! unwind_protect_cleanup
 %!   close (hf);
 %! end_unwind_protect
 
-%!xtest
+%!test
 %! set (0, "defaultfigurevisible", "off");
 %! hf = figure ("visible", "off");
 %! unwind_protect
 %!   plot (1:10);
 %!   set (hf, "papertype", "tabloid");
 %!   clf (hf);
 %!   assert (isempty (get (gcf, "children")));
 %!   assert (get (hf, "papertype"), "tabloid");
diff --git a/scripts/testfun/speed.m b/scripts/testfun/speed.m
--- a/scripts/testfun/speed.m
+++ b/scripts/testfun/speed.m
@@ -409,33 +409,32 @@ endfunction
 %!
 %! disp ("Vectorized test.\nThis takes a little while...");
 %! speed ("build (n)", "", 1000, "build_orig (n)");
 %! clear -f build build_orig
 %! disp ("-----------------------");
 %! disp ("This time, the for loop is done away with entirely.");
 %! disp ("Notice how much bigger the speedup is than in example 1.");
 
-## FIXME: Tests are known to fail on operating systems with low resolution
-##        timers such as MinGW.  Therefore, tests are made xtests so that false
-##        failures are not reported.  However, it might be better to either
+## FIXME: Tests may fail on operating systems with low resolution timers such
+##        as MinGW.  If a failure is reported, it might be better to either
 ##        force the tests to do more work, or use %!testif to check the OS.
-%!xtest
+%!test
 %! [order, n, T_f1, T_f2] = speed ("airy (x)", "x = rand (n, 10)", [100, 1000]);
 %! assert (isstruct (order));
 %! assert (size (order), [1, 1]);
 %! assert (fieldnames (order), {"p"; "a"});
 %! assert (isnumeric (n));
 %! assert (length (n) > 10);
 %! assert (isnumeric (T_f1));
 %! assert (size (T_f1), size (n));
 %! assert (isnumeric (T_f2));
 %! assert (length (T_f2) > 10);
 
-%!xtest
+%!test
 %! [order, n, T_f1, T_f2] = speed ("sum (x)", "", [100, 1000], "v = 0; for i = 1:length (x), v += x(i); endfor");
 %! assert (isstruct (order));
 %! assert (size (order), [1, 1]);
 %! assert (fieldnames (order), {"p"; "a"});
 %! assert (isnumeric (n));
 %! assert (length (n) > 10);
 %! assert (isnumeric (T_f1));
 %! assert (size (T_f1), size (n));
