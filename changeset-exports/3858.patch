# HG changeset patch
# User jwe
# Date 1005248063 0
#      Thu Nov 08 19:34:23 2001 +0000
# Node ID de05e6bdf8978f2f00b53237fcee1d72810edb56
# Parent  f7c7ecb63a7e55c923c58e4b72d81bf4f791a36d
[project @ 2001-11-08 19:34:22 by jwe]

diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,13 @@
+2001-11-08  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* Range.cc (Range::nelem_internal): Special case ranges that must
+	have zero elements.
+
 2001-11-06  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* Makefile.in: Split out readline and pathsearch functionality
 	into separate liboct-readline and liboct-pathsearch libraries.
 
 	* oct-rl-edit.c (octave_rl_clear_screen): Call rl_clear_screen,
 	not _rl_clear_screen.  Temporarily redefine rl_redisplay_function
 	to do nothing for this call to rl_clear_screen.
diff --git a/liboctave/Range.cc b/liboctave/Range.cc
--- a/liboctave/Range.cc
+++ b/liboctave/Range.cc
@@ -237,40 +237,54 @@ teq (double u, double v, double ct = 3.0
   double tv = fabs (v);
 
   return fabs (u - v) < ((tu > tv ? tu : tv) * ct);
 }
 
 int
 Range::nelem_internal (void) const
 {
-  double ct = 3.0 * DBL_EPSILON;
+  int retval = -1;
 
-  double tmp = tfloor ((rng_limit - rng_base + rng_inc) / rng_inc, ct);
+  if (rng_inc == 0
+      || (rng_limit > rng_base && rng_inc < 0)
+      || (rng_limit < rng_base && rng_inc > 0))
+    {
+      retval = 0;
+    }
+  else
+    {
+      double ct = 3.0 * DBL_EPSILON;
 
-  int n_elt = (tmp > 0.0 ? static_cast<int> (tmp) : 0);
+      double tmp = tfloor ((rng_limit - rng_base + rng_inc) / rng_inc, ct);
+
+      int n_elt = (tmp > 0.0 ? static_cast<int> (tmp) : 0);
 
-  // If the final element that we would compute for the range is equal
-  // to the limit of the range, or is an adjacent floating point
-  // number, accept it.  Otherwise, try a range with one fewer
-  // element.  If that fails, try again with one more element.
-  //
-  // I'm not sure this is very good, but it seems to work better than
-  // just using tfloor as above.  For example, without it, the
-  // expression 1.8:0.05:1.9 fails to produce the expected result of
-  // [1.8, 1.85, 1.9].
+      // If the final element that we would compute for the range is
+      // equal to the limit of the range, or is an adjacent floating
+      // point number, accept it.  Otherwise, try a range with one
+      // fewer element.  If that fails, try again with one more
+      // element.
+      //
+      // I'm not sure this is very good, but it seems to work better than
+      // just using tfloor as above.  For example, without it, the
+      // expression 1.8:0.05:1.9 fails to produce the expected result of
+      // [1.8, 1.85, 1.9].
 
-  if (! teq (rng_base + (n_elt - 1) * rng_inc, rng_limit))
-    {
-      if (teq (rng_base + (n_elt - 2) * rng_inc, rng_limit))
-	n_elt--;
-      else if (teq (rng_base + n_elt * rng_inc, rng_limit))
-	n_elt++;
+      if (! teq (rng_base + (n_elt - 1) * rng_inc, rng_limit))
+	{
+	  if (teq (rng_base + (n_elt - 2) * rng_inc, rng_limit))
+	    n_elt--;
+	  else if (teq (rng_base + n_elt * rng_inc, rng_limit))
+	    n_elt++;
+	}
+
+      retval = (n_elt >= INT_MAX - 1) ? -1 : n_elt;
     }
 
-  return (n_elt >= INT_MAX - 1) ? -1 : n_elt;
+  return retval;
 }
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
