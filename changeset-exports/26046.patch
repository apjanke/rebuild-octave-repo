# HG changeset patch
# User Rik <rik@octave.org>
# Date 1541827234 28800
#      Fri Nov 09 21:20:34 2018 -0800
# Node ID ff0aa19333c942ca1fe2614f8139f463393399be
# Parent  10145b9ad883b28c7bf1ee748dc79090ce320078
doc: grammarcheck C++ files in libinterp/ directory.

* data.cc, graphics.cc, sysdep.cc, chol.cc, qr.cc: grammarcheck C++ files.

diff --git a/libinterp/corefcn/data.cc b/libinterp/corefcn/data.cc
--- a/libinterp/corefcn/data.cc
+++ b/libinterp/corefcn/data.cc
@@ -2532,17 +2532,17 @@ of elements along the largest dimension
 }
 
 DEFUN (ndims, args, ,
        doc: /* -*- texinfo -*-
 @deftypefn {} {} ndims (@var{a})
 Return the number of dimensions of @var{a}.
 
 For any array, the result will always be greater than or equal to 2.
-Trailing singleton dimensions are not counted, i.e. tailing dimensions @var{d}
+Trailing singleton dimensions are not counted, i.e., tailing dimensions @var{d}
 greater than 2, for which @code{size (@var{a}, @var{d}) = 1}.
 
 @example
 @group
 ndims (ones (4, 1, 2, 1))
     @result{} 3
 @end group
 @end example
diff --git a/libinterp/corefcn/graphics.cc b/libinterp/corefcn/graphics.cc
--- a/libinterp/corefcn/graphics.cc
+++ b/libinterp/corefcn/graphics.cc
@@ -12652,17 +12652,17 @@ Return a cell array of the currently loa
 
   octave::gtk_manager& gtk_mgr = interp.get_gtk_manager ();
 
   return ovl (gtk_mgr.loaded_toolkits_list ());
 }
 
 DEFUN (__show_figure__, args, ,
        doc: /* -*- texinfo -*-
-@deftypefn  {} {} __show_figure__ (@var{n})
+@deftypefn {} {} __show_figure__ (@var{n})
 Undocumented internal function.
 @end deftypefn */)
 {
   if (args.length () != 1)
     print_usage ();
 
   double h = args(0).xdouble_value ("__show_figure__: invalid handle H");
 
diff --git a/libinterp/corefcn/sysdep.cc b/libinterp/corefcn/sysdep.cc
--- a/libinterp/corefcn/sysdep.cc
+++ b/libinterp/corefcn/sysdep.cc
@@ -1056,23 +1056,23 @@ returning the empty string if no key is 
 
 // State of the pause system
 static bool Vpause_enabled = true;
 
 DEFUN (pause, args, nargout,
        doc: /* -*- texinfo -*-
 @deftypefn  {} {} pause ()
 @deftypefnx {} {} pause (@var{n})
-@deftypefnx {} {@var{old_state} = } pause ("on")
-@deftypefnx {} {@var{old_state} = } pause ("off")
-@deftypefnx {} {@var{old_state} = } pause ("query")
+@deftypefnx {} {@var{old_state} =} pause ("on")
+@deftypefnx {} {@var{old_state} =} pause ("off")
+@deftypefnx {} {@var{old_state} =} pause ("query")
 Suspend the execution of the program or change the state of the pause function.
 
 If invoked without an input arguments then the program is suspended until a
-character is typed. If argument @var{n} is a positive real value, it indicates 
+character is typed.  If argument @var{n} is a positive real value, it indicates
 the number of seconds the program shall be suspended, for example:
 
 @example
 @group
 tic; pause (0.05); toc
      @print{} Elapsed time is 0.05039 seconds.
 @end group
 @end example
@@ -1083,31 +1083,32 @@ clearing the screen.
 @example
 @group
 disp ("wait please...");
 pause (5);
 clc;
 @end group
 @end example
 
-If invoked with a string argument "on", "off" or "query", the state of the pause
-function is changed or queried. When the state is "off", the pause function
-returns emediately. The optional return value contains the previous state of 
-the pause function.  In the following example pause is disabled locally:
+If invoked with a string argument @qcode{"on"}, @qcode{"off"}, or
+@qcode{"query"}, the state of the pause function is changed or queried.  When
+the state is @qcode{"off"}, the pause function returns immediately.  The
+optional return value contains the previous state of the pause function.  In
+the following example pause is disabled locally:
 
 @example
 @group
 old_state = pause ("off");
 tic; pause (0.05); toc
      @print{} Elapsed time is 3.00407e-05 seconds.
 pause (old_state);
 @end group
 @end example
 
-While the program is supended, Octave still handles figures painting and 
+While the program is suspended Octave still handles figures painting and
 graphics callbacks execution.
 
 @seealso{kbhit}
 @end deftypefn */)
 {
   octave_value_list retval;
   
   int nargin = args.length ();
diff --git a/libinterp/dldfcn/chol.cc b/libinterp/dldfcn/chol.cc
--- a/libinterp/dldfcn/chol.cc
+++ b/libinterp/dldfcn/chol.cc
@@ -791,17 +791,18 @@ If @var{info} is not present, an error m
 %! assert (norm (triu (R1)-R1, Inf), single (0));
 %! assert (norm (R1 - R, Inf) < 2e1*eps ("single"));
 */
 
 DEFUN_DLD (cholinsert, args, nargout,
            doc: /* -*- texinfo -*-
 @deftypefn  {} {@var{R1} =} cholinsert (@var{R}, @var{j}, @var{u})
 @deftypefnx {} {[@var{R1}, @var{info}] =} cholinsert (@var{R}, @var{j}, @var{u})
-Update a Cholesky factorization given a row or column to insert in the original factored matrix.
+Update a Cholesky factorization given a row or column to insert in the
+original factored matrix.
 
 Given a Cholesky@tie{}factorization of a real symmetric or complex Hermitian
 positive definite matrix @w{@var{A} = @var{R}'*@var{R}}, @var{R}@tie{}upper
 triangular, return the Cholesky@tie{}factorization of
 @var{A1}, where @w{A1(p,p) = A}, @w{A1(:,j) = A1(j,:)' = u} and
 @w{p = [1:j-1,j+1:n+1]}.  @w{u(j)} should be positive.
 
 On return, @var{info} is set to
@@ -1045,17 +1046,18 @@ If @var{info} is not present, an error m
 %! assert (cca, ccau,   16*eps);
 %! assert (cca, ccal2', 16*eps);
 %! assert (cca, ccau2,  16*eps);
 */
 
 DEFUN_DLD (choldelete, args, ,
            doc: /* -*- texinfo -*-
 @deftypefn {} {@var{R1} =} choldelete (@var{R}, @var{j})
-Update a Cholesky factorization given a row or column to delete from the original factored matrix.
+Update a Cholesky factorization given a row or column to delete from the
+original factored matrix.
 
 Given a Cholesky@tie{}factorization of a real symmetric or complex Hermitian
 positive definite matrix @w{@var{A} = @var{R}'*@var{R}}, @var{R}@tie{}upper
 triangular, return the Cholesky@tie{}factorization of @w{A(p,p)}, where
 @w{p = [1:j-1,j+1:n+1]}.
 @seealso{chol, cholupdate, cholinsert, cholshift}
 @end deftypefn */)
 {
@@ -1169,17 +1171,18 @@ triangular, return the Cholesky@tie{}fac
 %!
 %! assert (norm (triu (R1)-R1, Inf), single (0));
 %! assert (norm (R1'*R1 - single (Ac(p,p)), Inf) < 1e1*eps ("single"));
 */
 
 DEFUN_DLD (cholshift, args, ,
            doc: /* -*- texinfo -*-
 @deftypefn {} {@var{R1} =} cholshift (@var{R}, @var{i}, @var{j})
-Update a Cholesky factorization given a range of columns to shift in the original factored matrix.
+Update a Cholesky factorization given a range of columns to shift in the
+original factored matrix.
 
 Given a Cholesky@tie{}factorization of a real symmetric or complex Hermitian
 positive definite matrix @w{@var{A} = @var{R}'*@var{R}}, @var{R}@tie{}upper
 triangular, return the Cholesky@tie{}factorization of
 @w{@var{A}(p,p)}, where @w{p} is the permutation @*
 @code{p = [1:i-1, shift(i:j, 1), j+1:n]} if @w{@var{i} < @var{j}} @*
  or @*
 @code{p = [1:j-1, shift(j:i,-1), i+1:n]} if @w{@var{j} < @var{i}}.  @*
diff --git a/libinterp/dldfcn/qr.cc b/libinterp/dldfcn/qr.cc
--- a/libinterp/dldfcn/qr.cc
+++ b/libinterp/dldfcn/qr.cc
@@ -1088,17 +1088,18 @@ economized (R is square).
 %! assert (norm (vec (Q'*Q - eye (5,"single")), Inf) < 1e1*eps ("single"));
 %! assert (norm (vec (triu (R)-R), Inf) == 0);
 %! assert (norm (vec (Q*R - single (Ac) - single (uc)*single (vc)'), Inf) < norm (single (Ac))*1e1*eps ("single"));
 */
 
 DEFUN_DLD (qrinsert, args, ,
            doc: /* -*- texinfo -*-
 @deftypefn {} {[@var{Q1}, @var{R1}] =} qrinsert (@var{Q}, @var{R}, @var{j}, @var{x}, @var{orient})
-Update a QR factorization given a row or column to insert in the original factored matrix.
+Update a QR factorization given a row or column to insert in the original
+factored matrix.
 
 
 Given a QR@tie{}factorization of a real or complex matrix
 @w{@var{A} = @var{Q}*@var{R}}, @var{Q}@tie{}unitary and
 @var{R}@tie{}upper trapezoidal, return the QR@tie{}factorization of
 @w{[A(:,1:j-1) x A(:,j:n)]}, where @var{u} is a column vector to be inserted
 into @var{A} (if @var{orient} is @qcode{"col"}), or the
 QR@tie{}factorization of @w{[A(1:j-1,:);x;A(:,j:n)]}, where @var{x} is a row
@@ -1287,17 +1288,18 @@ If @var{orient} is @qcode{"row"}, full f
 %! assert (norm (vec (Q'*Q - eye (6,"single")), Inf) < 1e1*eps ("single"));
 %! assert (norm (vec (triu (R) - R), Inf) == 0);
 %! assert (norm (vec (Q*R - single ([Ac(1:2,:);x;Ac(3:5,:)])), Inf) < norm (single (Ac))*1e1*eps ("single"));
 */
 
 DEFUN_DLD (qrdelete, args, ,
            doc: /* -*- texinfo -*-
 @deftypefn {} {[@var{Q1}, @var{R1}] =} qrdelete (@var{Q}, @var{R}, @var{j}, @var{orient})
-Update a QR factorization given a row or column to delete from the original factored matrix.
+Update a QR factorization given a row or column to delete from the original
+factored matrix.
 
 Given a QR@tie{}factorization of a real or complex matrix
 @w{@var{A} = @var{Q}*@var{R}}, @var{Q}@tie{}unitary and
 @var{R}@tie{}upper trapezoidal, return the QR@tie{}factorization of
 @w{[A(:,1:j-1), U, A(:,j:n)]},
 where @var{u} is a column vector to be inserted into @var{A}
 (if @var{orient} is @qcode{"col"}),
 or the QR@tie{}factorization of @w{[A(1:j-1,:);X;A(:,j:n)]},
@@ -1534,17 +1536,18 @@ If @var{orient} is @qcode{"row"}, full f
 %! assert (norm (vec (Q'*Q - eye (4,"single")), Inf) < 1e1*eps ("single"));
 %! assert (norm (vec (triu (R) - R), Inf) == 0);
 %! assert (norm (vec (Q*R - [AA(1:2,:);AA(4:5,:)]), Inf) < norm (AA)*1e1*eps ("single"));
 */
 
 DEFUN_DLD (qrshift, args, ,
            doc: /* -*- texinfo -*-
 @deftypefn {} {[@var{Q1}, @var{R1}] =} qrshift (@var{Q}, @var{R}, @var{i}, @var{j})
-Update a QR factorization given a range of columns to shift in the original factored matrix.
+Update a QR factorization given a range of columns to shift in the original
+factored matrix.
 
 Given a QR@tie{}factorization of a real or complex matrix
 @w{@var{A} = @var{Q}*@var{R}}, @var{Q}@tie{}unitary and
 @var{R}@tie{}upper trapezoidal, return the QR@tie{}factorization
 of @w{@var{A}(:,p)}, where @w{p} is the permutation @*
 @code{p = [1:i-1, shift(i:j, 1), j+1:n]} if @w{@var{i} < @var{j}} @*
  or @*
 @code{p = [1:j-1, shift(j:i,-1), i+1:n]} if @w{@var{j} < @var{i}}.  @*
