# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1365046533 14400
#      Wed Apr 03 23:35:33 2013 -0400
# Node ID 40d1ddca4db5eaf8d464ae7fc0ea1175a88a3927
# Parent  81ec957685201cf76160ddc7494647d47ea41728
improve use of octave_link

* octave-link.h, octave-link.cc (octave_link::connect_link): Rename
from octave_link::connect.  Change all uses.  Allow link to be
disconnected.  Don't add object to singleton_cleanup_list.

* main-window.h, main-window.cc (main_window::_octave_qt_link):
New data member.
(main_window::construct): Initialize it.
(main_window::~main_window): Disconnect octave_link and delete
_octave_qt_link.

diff --git a/libgui/src/main-window.cc b/libgui/src/main-window.cc
--- a/libgui/src/main-window.cc
+++ b/libgui/src/main-window.cc
@@ -37,17 +37,16 @@ along with Octave; see the file COPYING.
 #include <QFileDialog>
 #include <QMessageBox>
 #include <QIcon>
 
 #ifdef HAVE_QSCINTILLA
 #include "file-editor.h"
 #endif
 #include "main-window.h"
-#include "octave-qt-link.h"
 #include "settings-dialog.h"
 
 #include "builtins.h"
 #include "defaults.h"
 #include "load-save.h"
 #include "toplev.h"
 #include "version.h"
 
@@ -66,16 +65,19 @@ main_window::~main_window ()
 {
   // Clean up all dynamically created objects to ensure they are
   // deleted before this main_window is.  Otherwise, some will be
   // attached to a non-existent parent.
 
   if (_octave_qt_event_listener)
     delete _octave_qt_event_listener;
 
+  octave_link::connect_link (0);
+  delete _octave_qt_link;
+
 #ifdef HAVE_QSCINTILLA
   if (_file_editor)
     delete _file_editor;
 #endif
 
   if (_terminal_dock_widget)
     delete _terminal_dock_widget;
 
@@ -1205,17 +1207,19 @@ main_window::construct ()
 
   connect (_octave_qt_event_listener,
            SIGNAL (edit_file_signal (const QString&)),
            this,
            SLOT (handle_edit_file_request(const QString&)));
 
   // FIXME -- is it possible to eliminate the event_listenter?
 
-  octave_link::connect (new octave_qt_link ());
+  _octave_qt_link = new octave_qt_link ();
+
+  octave_link::connect_link (_octave_qt_link);
 
   octave_link::register_event_listener (_octave_qt_event_listener);
 }
 
 void
 main_window::save_workspace_callback (const std::string& file)
 {
   Fsave (ovl (file));
diff --git a/libgui/src/main-window.h b/libgui/src/main-window.h
--- a/libgui/src/main-window.h
+++ b/libgui/src/main-window.h
@@ -45,16 +45,17 @@ along with Octave; see the file COPYING.
 // Own includes
 #include "resource-manager.h"
 #include "workspace-view.h"
 #include "history-dockwidget.h"
 #include "files-dockwidget.h"
 #include "terminal-dockwidget.h"
 #include "documentation-dockwidget.h"
 #include "octave-qt-event-listener.h"
+#include "octave-qt-link.h"
 
 /**
  * \class MainWindow
  *
  * Represents the main window.
  */
 class main_window : public QMainWindow
 {
@@ -173,13 +174,15 @@ private:
   QComboBox *               _current_directory_combo_box;
   static const int        current_directory_width       = 300;
   static const int        current_directory_max_visible = 16;
   static const int        current_directory_max_count   = 16;
   QLineEdit *               _current_directory_line_edit;
 
   octave_qt_event_listener *_octave_qt_event_listener;
 
+  octave_qt_link *_octave_qt_link;
+
   // Flag for closing whole application
   bool                      _closing;
 };
 
 #endif // MAINWINDOW_H
diff --git a/libinterp/interpfcn/octave-link.cc b/libinterp/interpfcn/octave-link.cc
--- a/libinterp/interpfcn/octave-link.cc
+++ b/libinterp/interpfcn/octave-link.cc
@@ -59,28 +59,27 @@ octave_link::octave_link (void)
   : event_listener (0), event_queue_mutex (new octave_mutex ()),
     gui_event_queue (), last_cwd (), debugging (false)
 {
   command_editor::add_event_hook (octave_readline_hook);
 
   octave_exit = octave_exit_hook;
 }
 
-// OBJ should be a new object of a class that is derived from
-// the base class octave_link.  It will be cleaned up by octave_link.
+// OBJ should be an object of a class that is derived from the base
+// class octave_link, or 0 to disconnect the link.  It is the
+// responsibility of the caller to delete obj.
 
 void
-octave_link::connect (octave_link* obj)
+octave_link::connect_link (octave_link* obj)
 {
-  if (instance)
+  if (obj && instance)
     ::error ("octave_link is already linked!");
   else
     instance = obj;
-
-  singleton_cleanup_list::add (cleanup_instance);
 }
 
 void
 octave_link::do_register_event_listener (octave_event_listener *el)
 {
   event_listener = el;
 }
 
diff --git a/libinterp/interpfcn/octave-link.h b/libinterp/interpfcn/octave-link.h
--- a/libinterp/interpfcn/octave-link.h
+++ b/libinterp/interpfcn/octave-link.h
@@ -157,17 +157,17 @@ public:
   }
 
   static bool
   edit_file (const std::string& file)
   {
     return instance_ok () ? instance->do_edit_file (file) : false;
   }
 
-  static void connect (octave_link *);
+  static void connect_link (octave_link *);
 
 private:
 
   static octave_link *instance;
 
   static void cleanup_instance (void) { delete instance; instance = 0; }
 
   // No copying!
