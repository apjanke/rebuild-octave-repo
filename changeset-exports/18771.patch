# HG changeset patch
# User Rik <rik@octave.org>
# Date 1400563068 25200
#      Mon May 19 22:17:48 2014 -0700
# Node ID 79f69742971ac3c9c436e92f722ea475a7be7b2c
# Parent  be8d7721ac16058852e5446f021f593672555cc0
gl-render.cc: Use enum symbolic constants for code clarity.

* gl-render.cc: Use enum symbolic constants for code clarity.

diff --git a/libinterp/corefcn/gl-render.cc b/libinterp/corefcn/gl-render.cc
--- a/libinterp/corefcn/gl-render.cc
+++ b/libinterp/corefcn/gl-render.cc
@@ -32,16 +32,38 @@ along with Octave; see the file COPYING.
 #include "oct-locbuf.h"
 #include "oct-refcount.h"
 #include "gl-render.h"
 #include "txt-eng.h"
 #include "txt-eng-ft.h"
 
 #define LIGHT_MODE GL_FRONT_AND_BACK
 
+// Use symbolic names for axes
+enum {
+  X_AXIS,
+  Y_AXIS,
+  Z_AXIS
+};
+
+// Use symbolic names for color mode
+enum {
+  UNIFORM,
+  FLAT,
+  INTERP,
+  TEXTURE
+};
+
+// Use symbolic names for lighting
+enum {
+  NONE,
+  //FLAT,  // Already declared in anonymous enum for color mode
+  GOURAUD = 2
+};
+
 // Win32 API requires the CALLBACK attributes for
 // GLU callback functions. Define it to empty on
 // other platforms.
 #ifndef CALLBACK
 #define CALLBACK
 #endif
 
 class
@@ -408,17 +430,17 @@ public:
   { }
 
 protected:
   void begin (GLenum type)
   {
     //printf ("patch_tesselator::begin (%d)\n", type);
     first = true;
 
-    if (color_mode == 2 || light_mode == 2)
+    if (color_mode == INTERP || light_mode == GOURAUD)
       glShadeModel (GL_SMOOTH);
     else
       glShadeModel (GL_FLAT);
 
     if (is_filled ())
       renderer->set_polygon_offset (true, index);
 
     glBegin (type);
@@ -435,17 +457,17 @@ protected:
   {
     vertex_data::vertex_data_rep *v
       = reinterpret_cast<vertex_data::vertex_data_rep *> (data);
     //printf ("patch_tesselator::vertex (%g, %g, %g)\n", v->coords(0), v->coords(1), v->coords(2));
 
     // NOTE: OpenGL can re-order vertices.  For "flat" coloring of FaceColor
     // the first vertex must be identified in the draw_patch routine.
 
-    if (color_mode == 2 || (color_mode == 1 && ! is_filled ()))
+    if (color_mode == INTERP || (color_mode == FLAT && ! is_filled ()))
       {
         Matrix col = v->color;
 
         if (col.numel () == 3)
           {
             glColor3dv (col.data ());
             if (light_mode > 0)
               {
@@ -457,17 +479,17 @@ protected:
 
                 for (int k = 0; k < 3; k++)
                   buf[k] = (v->diffuse * col(k));
                 glMaterialfv (LIGHT_MODE, GL_DIFFUSE, buf);
               }
           }
       }
 
-    if (light_mode > 0 && (first || light_mode == 2))
+    if (light_mode > 0 && (first || light_mode == GOURAUD))
       glNormal3dv (v->normal.data ());
 
     glVertex3dv (v->coords.data ());
 
     first = false;
   }
 
   void combine (GLdouble xyz[3], void *data[4], GLfloat w[4], void **out_data)
@@ -523,18 +545,18 @@ private:
 
   // No copying!
 
   patch_tesselator (const patch_tesselator&);
 
   patch_tesselator& operator = (const patch_tesselator&);
 
   opengl_renderer *renderer;
-  int color_mode;       // 0: uni,  1: flat, 2: interp
-  int light_mode;       // 0: none, 1: flat, 2: gouraud
+  int color_mode;
+  int light_mode;
   int index;
   bool first;
   std::list<vertex_data> tmp_vdata;
 };
 
 void
 opengl_renderer::draw (const graphics_object& go, bool toplevel)
 {
@@ -657,37 +679,37 @@ opengl_renderer::render_grid (const std:
 {
   set_linestyle (gridstyle, true);
   glBegin (GL_LINES);
   for (int i = 0; i < ticks.numel (); i++)
     {
       double val = ticks(i);
       if (lim1 <= val && val <= lim2)
         {
-          if (xyz == 0) // X
+          if (xyz == X_AXIS)
             {
               glVertex3d (val, p1N, p2);
               glVertex3d (val, p1, p2);
               if (is_3D)
                 {
                   glVertex3d (val, p1, p2N);
                   glVertex3d (val, p1, p2);
                 }
             }
-          else if (xyz == 1) // Y
+          else if (xyz == Y_AXIS)
             {
               glVertex3d (p1N, val, p2);
               glVertex3d (p1, val, p2);
               if (is_3D)
                 {
                   glVertex3d (p1, val, p2N);
                   glVertex3d (p1, val, p2);
                 }
             }
-          else if (xyz == 2) // Z
+          else if (xyz == Z_AXIS)
             {
               glVertex3d (p1N, p2, val);
               glVertex3d (p1, p2, val);
               glVertex3d (p1, p2N, val);
               glVertex3d (p1, p2, val);
             }
         }
     }
@@ -706,37 +728,37 @@ opengl_renderer::render_tickmarks (const
   glBegin (GL_LINES);
 
   for (int i = 0; i < ticks.numel (); i++)
     {
       double val = ticks(i);
 
       if (lim1 <= val && val <= lim2)
         {
-          if (xyz == 0) // X
+          if (xyz == X_AXIS)
             {
               glVertex3d (val, p1, p2);
               glVertex3d (val, p1+dy, p2+dz);
               if (mirror)
                 {
                   glVertex3d (val, p1N, p2N);
                   glVertex3d (val, p1N-dy, p2N-dz);
                 }
             }
-          else if (xyz == 1) // Y
+          else if (xyz == Y_AXIS)
             {
               glVertex3d (p1, val, p2);
               glVertex3d (p1+dx, val, p2+dz);
               if (mirror)
                 {
                   glVertex3d (p1N, val, p2N);
                   glVertex3d (p1N-dx, val, p2N-dz);
                 }
             }
-          else if (xyz == 2) // Z
+          else if (xyz == Z_AXIS)
             {
               glVertex3d (p1, p2, val);
               glVertex3d (p1+dx, p2+dy, val);
               if (mirror)
                 {
                   glVertex3d (p1N, p2N, val);
                   glVertex3d (p1N-dx, p2N-dy, val);
                 }
@@ -770,25 +792,25 @@ opengl_renderer::render_ticktexts (const
           Matrix b;
 
           std::string label (ticklabels(i % nlabels));
           label.erase (0, label.find_first_not_of (" "));
           label = label.substr (0, label.find_last_not_of (" ")+1);
 
           // FIXME: As tick text is transparent, shouldn't it be
           //        drawn after axes object, for correct rendering?
-          if (xyz == 0) // X
+          if (xyz == X_AXIS)
             {
               b = render_text (label, val, p1, p2, ha, va);
             }
-          else if (xyz == 1) // Y
+          else if (xyz == Y_AXIS)
             {
               b = render_text (label, p1, val, p2, ha, va);
             }
-          else if (xyz == 2) // Z
+          else if (xyz == Z_AXIS)
             {
               b = render_text (label, p1, p2, val, ha, va);
             }
 
           wmax = std::max (wmax, static_cast<int> (b(2)));
           hmax = std::max (hmax, static_cast<int> (b(3)));
         }
     }
@@ -1613,18 +1635,18 @@ opengl_renderer::draw_surface (const sur
   int ec_mode = (props.edgecolor_is_rgb () ? 0 :
                  (props.edgecolor_is ("flat") ? 1 :
                   (props.edgecolor_is ("interp") ? 2 : -1)));
   int el_mode = (props.edgelighting_is ("none") ? 0 :
                  (props.edgelighting_is ("flat") ? 1 : 2));
   int ea_mode = (props.edgealpha_is_double () ? 0 :
                  (props.edgealpha_is ("flat") ? 1 : 2));
 
-  Matrix fcolor = (fc_mode == 3 ? Matrix (1, 3, 1.0)
-                                : props.get_facecolor_rgb ());
+  Matrix fcolor = (fc_mode == TEXTURE ? Matrix (1, 3, 1.0)
+                                      : props.get_facecolor_rgb ());
   Matrix ecolor = props.get_edgecolor_rgb ();
 
   float as = props.get_ambientstrength ();
   float ds = props.get_diffusestrength ();
   float ss = props.get_specularstrength ();
   float se = props.get_specularexponent ();
   float cb[4] = { 0.0, 0.0, 0.0, 1.0 };
   double d = 1.0;
@@ -1667,43 +1689,44 @@ opengl_renderer::draw_surface (const sur
       float buf[4] = { ss, ss, ss, 1 };
 
       glMaterialfv (LIGHT_MODE, GL_SPECULAR, buf);
       glMaterialf (LIGHT_MODE, GL_SHININESS, se);
     }
 
   // FIXME: good candidate for caching,
   //        transferring pixel data to OpenGL is time consuming.
-  if (fc_mode == 3)
+  if (fc_mode == TEXTURE)
     tex = opengl_texture::create (props.get_color_data ());
 
   if (! props.facecolor_is ("none"))
     {
       if (props.get_facealpha_double () == 1)
         {
-          if (fc_mode == 0 || fc_mode == 3)
+          if (fc_mode == UNIFORM || fc_mode == TEXTURE)
             {
               glColor3dv (fcolor.data ());
               if (fl_mode > 0)
                 {
                   for (int i = 0; i < 3; i++)
                     cb[i] = as * fcolor(i);
                   glMaterialfv (LIGHT_MODE, GL_AMBIENT, cb);
 
                   for (int i = 0; i < 3; i++)
                     cb[i] = ds * fcolor(i);
                   glMaterialfv (LIGHT_MODE, GL_DIFFUSE, cb);
                 }
             }
 
           if (fl_mode > 0)
             glEnable (GL_LIGHTING);
-          glShadeModel ((fc_mode == 2 || fl_mode == 2) ? GL_SMOOTH : GL_FLAT);
+          glShadeModel ((fc_mode == INTERP || fl_mode == GOURAUD) ? GL_SMOOTH
+                                                                  : GL_FLAT);
           set_polygon_offset (true, 1);
-          if (fc_mode == 3)
+          if (fc_mode == TEXTURE)
             glEnable (GL_TEXTURE_2D);
 
           for (int i = 1; i < zc; i++)
             {
               if (y_mat)
                 {
                   i1 = i-1;
                   i2 = i;
@@ -1711,40 +1734,40 @@ opengl_renderer::draw_surface (const sur
 
               for (int j = 1; j < zr; j++)
                 {
 
                   if (clip(j-1, i-1) || clip(j, i-1)
                       || clip(j-1, i) || clip(j, i))
                     continue;
 
-                  if (fc_mode == 1)
+                  if (fc_mode == FLAT)
                     {
                       // "flat" only needs color at lower-left vertex
                       if (! xfinite (c(j-1,i-1)))
                         continue;
                     }
-                  else if (fc_mode == 2)
+                  else if (fc_mode == INTERP)
                     {
                       // "interp" needs valid color at all 4 vertices
                       if (! (xfinite (c(j-1, i-1)) && xfinite (c(j, i-1))
                              && xfinite (c(j-1, i)) && xfinite (c(j, i))))
                         continue;
                     }
 
                   if (x_mat)
                     {
                       j1 = j-1;
                       j2 = j;
                     }
 
                   glBegin (GL_QUADS);
 
                   // Vertex 1
-                  if (fc_mode == 3)
+                  if (fc_mode == TEXTURE)
                     tex.tex_coord (double (i-1) / (zc-1),
                                    double (j-1) / (zr-1));
                   else if (fc_mode > 0)
                     {
                       // FIXME: is there a smarter way to do this?
                       for (int k = 0; k < 3; k++)
                         cb[k] = c(j-1, i-1, k);
                       glColor3fv (cb);
@@ -1767,19 +1790,19 @@ opengl_renderer::draw_surface (const sur
                                 + n(j-1,i-1,2) * n(j-1,i-1,2));
                       glNormal3d (n(j-1,i-1,0)/d,
                                   n(j-1,i-1,1)/d,
                                   n(j-1,i-1,2)/d);
                     }
                   glVertex3d (x(j1,i-1), y(j-1,i1), z(j-1,i-1));
 
                   // Vertex 2
-                  if (fc_mode == 3)
+                  if (fc_mode == TEXTURE)
                     tex.tex_coord (double (i) / (zc-1), double (j-1) / (zr-1));
-                  else if (fc_mode == 2)
+                  else if (fc_mode == INTERP)
                     {
                       for (int k = 0; k < 3; k++)
                         cb[k] = c(j-1, i, k);
                       glColor3fv (cb);
 
                       if (fl_mode > 0)
                         {
                           for (int k = 0; k < 3; k++)
@@ -1787,123 +1810,124 @@ opengl_renderer::draw_surface (const sur
                           glMaterialfv (LIGHT_MODE, GL_AMBIENT, cb);
 
                           for (int k = 0; k < 3; k++)
                             cb[k] = ds * c(j-1, i, k);
                           glMaterialfv (LIGHT_MODE, GL_DIFFUSE, cb);
                         }
                     }
 
-                  if (fl_mode == 2)
+                  if (fl_mode == GOURAUD)
                     {
                       d = sqrt (n(j-1,i,0) * n(j-1,i,0)
                                 + n(j-1,i,1) * n(j-1,i,1)
                                 + n(j-1,i,2) * n(j-1,i,2));
                       glNormal3d (n(j-1,i,0)/d, n(j-1,i,1)/d, n(j-1,i,2)/d);
                     }
 
                   glVertex3d (x(j1,i), y(j-1,i2), z(j-1,i));
 
                   // Vertex 3
-                  if (fc_mode == 3)
+                  if (fc_mode == TEXTURE)
                     tex.tex_coord (double (i) / (zc-1), double (j) / (zr-1));
-                  else if (fc_mode == 2)
+                  else if (fc_mode == INTERP)
                     {
                       for (int k = 0; k < 3; k++)
                         cb[k] = c(j, i, k);
                       glColor3fv (cb);
 
                       if (fl_mode > 0)
                         {
                           for (int k = 0; k < 3; k++)
                             cb[k] *= as;
                           glMaterialfv (LIGHT_MODE, GL_AMBIENT, cb);
 
                           for (int k = 0; k < 3; k++)
                             cb[k] = ds * c(j, i, k);
                           glMaterialfv (LIGHT_MODE, GL_DIFFUSE, cb);
                         }
                     }
-                  if (fl_mode == 2)
+                  if (fl_mode == GOURAUD)
                     {
                       d = sqrt (n(j,i,0) * n(j,i,0)
                                 + n(j,i,1) * n(j,i,1)
                                 + n(j,i,2) * n(j,i,2));
                       glNormal3d (n(j,i,0)/d, n(j,i,1)/d, n(j,i,2)/d);
                     }
                   glVertex3d (x(j2,i), y(j,i2), z(j,i));
 
                   // Vertex 4
-                  if (fc_mode == 3)
+                  if (fc_mode == TEXTURE)
                     tex.tex_coord (double (i-1) / (zc-1), double (j) / (zr-1));
-                  else if (fc_mode == 2)
+                  else if (fc_mode == INTERP)
                     {
                       for (int k = 0; k < 3; k++)
                         cb[k] = c(j, i-1, k);
                       glColor3fv (cb);
 
                       if (fl_mode > 0)
                         {
                           for (int k = 0; k < 3; k++)
                             cb[k] *= as;
                           glMaterialfv (LIGHT_MODE, GL_AMBIENT, cb);
 
                           for (int k = 0; k < 3; k++)
                             cb[k] = ds * c(j, i-1, k);
                           glMaterialfv (LIGHT_MODE, GL_DIFFUSE, cb);
                         }
                     }
-                  if (fl_mode == 2)
+                  if (fl_mode == GOURAUD)
                     {
                       d = sqrt (n(j,i-1,0) * n(j,i-1,0)
                                 + n(j,i-1,1) * n(j,i-1,1)
                                 + n(j,i-1,2) * n(j,i-1,2));
                       glNormal3d (n(j,i-1,0)/d, n(j,i-1,1)/d, n(j,i-1,2)/d);
                     }
                   glVertex3d (x(j2,i-1), y(j,i1), z(j,i-1));
 
                   glEnd ();
                 }
             }
 
           set_polygon_offset (false);
-          if (fc_mode == 3)
+          if (fc_mode == TEXTURE)
             glDisable (GL_TEXTURE_2D);
 
           if (fl_mode > 0)
             glDisable (GL_LIGHTING);
         }
       else
         {
           // FIXME: implement transparency
         }
     }
 
   if (! props.edgecolor_is ("none"))
     {
       if (props.get_edgealpha_double () == 1)
         {
-          if (ec_mode == 0)
+          if (ec_mode == UNIFORM)
             {
               glColor3dv (ecolor.data ());
               if (fl_mode > 0)
                 {
                   for (int i = 0; i < 3; i++)
                     cb[i] = as * ecolor(i);
                   glMaterialfv (LIGHT_MODE, GL_AMBIENT, cb);
 
                   for (int i = 0; i < 3; i++)
                     cb[i] = ds * ecolor(i);
                   glMaterialfv (LIGHT_MODE, GL_DIFFUSE, cb);
                 }
             }
 
           if (el_mode > 0)
             glEnable (GL_LIGHTING);
-          glShadeModel ((ec_mode == 2 || el_mode == 2) ? GL_SMOOTH : GL_FLAT);
+          glShadeModel ((ec_mode == INTERP || el_mode == GOURAUD) ? GL_SMOOTH
+                                                                  : GL_FLAT);
 
           set_linestyle (props.get_linestyle (), false);
           set_linewidth (props.get_linewidth ());
 
           // Mesh along Y-axis
 
           if (props.meshstyle_is ("both") || props.meshstyle_is ("column"))
             {
@@ -1915,23 +1939,23 @@ opengl_renderer::draw_surface (const sur
                       i2 = i;
                     }
 
                   for (int j = 1; j < zr; j++)
                     {
                       if (clip(j-1,i) || clip(j,i))
                         continue;
 
-                      if (ec_mode == 1)
+                      if (ec_mode == FLAT)
                         {
                           // "flat" only needs color at lower-left vertex
                           if (! xfinite (c(j-1,i)))
                             continue;
                         }
-                      else if (ec_mode == 2)
+                      else if (ec_mode == INTERP)
                         {
                           // "interp" needs valid color at both vertices
                           if (! (xfinite (c(j-1, i)) && xfinite (c(j, i))))
                             continue;
                         }
 
                       if (x_mat)
                         {
@@ -1964,34 +1988,34 @@ opengl_renderer::draw_surface (const sur
                           d = sqrt (n(j-1,i,0) * n(j-1,i,0)
                                     + n(j-1,i,1) * n(j-1,i,1)
                                     + n(j-1,i,2) * n(j-1,i,2));
                           glNormal3d (n(j-1,i,0)/d, n(j-1,i,1)/d, n(j-1,i,2)/d);
                         }
                       glVertex3d (x(j1,i), y(j-1,i2), z(j-1,i));
 
                       // Vertex 2
-                      if (ec_mode == 2)
+                      if (ec_mode == INTERP)
                         {
                           for (int k = 0; k < 3; k++)
                             cb[k] = c(j, i, k);
                           glColor3fv (cb);
 
                           if (fl_mode > 0)
                             {
                               for (int k = 0; k < 3; k++)
                                 cb[k] *= as;
                               glMaterialfv (LIGHT_MODE, GL_AMBIENT, cb);
 
                               for (int k = 0; k < 3; k++)
                                 cb[k] = ds * c(j, i, k);
                               glMaterialfv (LIGHT_MODE, GL_DIFFUSE, cb);
                             }
                         }
-                      if (el_mode == 2)
+                      if (el_mode == GOURAUD)
                         {
                           d = sqrt (n(j,i,0) * n(j,i,0)
                                     + n(j,i,1) * n(j,i,1)
                                     + n(j,i,2) * n(j,i,2));
                           glNormal3d (n(j,i,0)/d, n(j,i,1)/d, n(j,i,2)/d);
                         }
                       glVertex3d (x(j2,i), y(j,i2), z(j,i));
 
@@ -2012,23 +2036,23 @@ opengl_renderer::draw_surface (const sur
                       j2 = j;
                     }
 
                   for (int i = 1; i < zc; i++)
                     {
                       if (clip(j,i-1) || clip(j,i))
                         continue;
 
-                      if (ec_mode == 1)
+                      if (ec_mode == FLAT)
                         {
                           // "flat" only needs color at lower-left vertex
                           if (! xfinite (c(j,i-1)))
                             continue;
                         }
-                      else if (ec_mode == 2)
+                      else if (ec_mode == INTERP)
                         {
                           // "interp" needs valid color at both vertices
                           if (! (xfinite (c(j, i-1)) && xfinite (c(j, i))))
                             continue;
                         }
 
                       if (y_mat)
                         {
@@ -2061,34 +2085,34 @@ opengl_renderer::draw_surface (const sur
                           d = sqrt (n(j,i-1,0) * n(j,i-1,0)
                                     + n(j,i-1,1) * n(j,i-1,1)
                                     + n(j,i-1,2) * n(j,i-1,2));
                           glNormal3d (n(j,i-1,0)/d, n(j,i-1,1)/d, n(j,i-1,2)/d);
                         }
                       glVertex3d (x(j2,i-1), y(j,i1), z(j,i-1));
 
                       // Vertex 2
-                      if (ec_mode == 2)
+                      if (ec_mode == INTERP)
                         {
                           for (int k = 0; k < 3; k++)
                             cb[k] = c(j, i, k);
                           glColor3fv (cb);
 
                           if (fl_mode > 0)
                             {
                               for (int k = 0; k < 3; k++)
                                 cb[k] *= as;
                               glMaterialfv (LIGHT_MODE, GL_AMBIENT, cb);
 
                               for (int k = 0; k < 3; k++)
                                 cb[k] = ds * c(j, i, k);
                               glMaterialfv (LIGHT_MODE, GL_DIFFUSE, cb);
                             }
                         }
-                      if (el_mode == 2)
+                      if (el_mode == GOURAUD)
                         {
                           d = sqrt (n(j,i,0) * n(j,i,0)
                                     + n(j,i,1) * n(j,i,1)
                                     + n(j,i,2) * n(j,i,2));
                           glNormal3d (n(j,i,0)/d, n(j,i,1)/d, n(j,i,2)/d);
                         }
                       glVertex3d (x(j2,i), y(j,i2), z(j,i));
 
@@ -2252,23 +2276,23 @@ opengl_renderer::draw_patch (const patch
 
       if (c.rows () == 1)
         {
           // Single color specifications, we can simplify a little bit
 
           if (fc_mode > 0)
             {
               fcolor = c;
-              fc_mode = 0;
+              fc_mode = UNIFORM;
             }
 
           if (ec_mode > 0)
             {
               ecolor = c;
-              ec_mode = 0;
+              ec_mode = UNIFORM;
             }
 
           c = Matrix ();
         }
       else
         has_facecolor = ((c.numel () > 0) && (c.rows () == f.rows ()));
     }
 
@@ -2324,17 +2348,17 @@ opengl_renderer::draw_patch (const patch
       glMaterialf (LIGHT_MODE, GL_SHININESS, se);
     }
 
   if (! props.facecolor_is ("none"))
     {
       // FIXME: adapt to double-radio property
       if (props.get_facealpha_double () == 1)
         {
-          if (fc_mode == 0)
+          if (fc_mode == UNIFORM)
             {
               glColor3dv (fcolor.data ());
               if (fl_mode > 0)
                 {
                   float cb[4] = { 0, 0, 0, 1 };
 
                   for (int i = 0; i < 3; i++)
                     cb[i] = (as * fcolor(i));
@@ -2370,17 +2394,17 @@ opengl_renderer::draw_patch (const patch
 
                   tess.add_vertex (vv->coords.fortran_vec (), vv);
                 }
 
               if (count_f(i) > 0)
                 {
                   vertex_data::vertex_data_rep *vv = vdata[i].get_rep ();
 
-                  if (fc_mode == 1)
+                  if (fc_mode == FLAT)
                     {
                       // For "flat" shading, use color of 1st vertex.
                       Matrix col = vv->color;
 
                       if (col.numel () == 3)
                         {
                           glColor3dv (col.data ());
                           if (fl_mode > 0)
@@ -2414,17 +2438,17 @@ opengl_renderer::draw_patch (const patch
         }
     }
 
   if (! props.edgecolor_is ("none"))
     {
       // FIXME: adapt to double-radio property
       if (props.get_edgealpha_double () == 1)
         {
-          if (ec_mode == 0)
+          if (ec_mode == UNIFORM)
             {
               glColor3dv (ecolor.data ());
               if (el_mode > 0)
                 {
                   float cb[4] = { 0, 0, 0, 1 };
 
                   for (int i = 0; i < 3; i++)
                     cb[i] = (as * ecolor(i));
