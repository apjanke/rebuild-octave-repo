# HG changeset patch
# User jwe
# Date 991337452 0
#      Thu May 31 19:30:52 2001 +0000
# Node ID b8c1cb5b9fd9d2e7e62e2c747b3dee18534caf13
# Parent  47ee5e57a350e2ea5303939ad53d8b18437a620e
[project @ 2001-05-31 19:30:49 by jwe]

diff --git a/liboctave/Array-C.cc b/liboctave/Array-C.cc
--- a/liboctave/Array-C.cc
+++ b/liboctave/Array-C.cc
@@ -34,27 +34,39 @@ Software Foundation, 59 Temple Place - S
 template class Array<Complex>;
 
 template int assign (Array<Complex>&, const Array<Complex>&);
 template int assign (Array<Complex>&, const Array<double>&);
 template int assign (Array<Complex>&, const Array<int>&);
 template int assign (Array<Complex>&, const Array<short>&);
 template int assign (Array<Complex>&, const Array<char>&);
 
+template int assign (Array<Complex>&, const Array<Complex>&, const Complex&);
+template int assign (Array<Complex>&, const Array<double>&, const Complex&);
+template int assign (Array<Complex>&, const Array<int>&, const Complex&);
+template int assign (Array<Complex>&, const Array<short>&, const Complex&);
+template int assign (Array<Complex>&, const Array<char>&, const Complex&);
+
 #include "Array2.h"
 #include "Array2.cc"
 
 template class Array2<Complex>;
 
 template int assign (Array2<Complex>&, const Array2<Complex>&);
 template int assign (Array2<Complex>&, const Array2<double>&);
 template int assign (Array2<Complex>&, const Array2<int>&);
 template int assign (Array2<Complex>&, const Array2<short>&);
 template int assign (Array2<Complex>&, const Array2<char>&);
 
+template int assign (Array2<Complex>&, const Array2<Complex>&, const Complex&);
+template int assign (Array2<Complex>&, const Array2<double>&, const Complex&);
+template int assign (Array2<Complex>&, const Array2<int>&, const Complex&);
+template int assign (Array2<Complex>&, const Array2<short>&, const Complex&);
+template int assign (Array2<Complex>&, const Array2<char>&, const Complex&);
+
 #include "DiagArray2.h"
 #include "DiagArray2.cc"
 
 template class DiagArray2<Complex>;
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
diff --git a/liboctave/Array-b.cc b/liboctave/Array-b.cc
--- a/liboctave/Array-b.cc
+++ b/liboctave/Array-b.cc
@@ -28,23 +28,27 @@ Software Foundation, 59 Temple Place - S
 
 #include "Array.h"
 #include "Array.cc"
 
 template class Array<bool>;
 
 template int assign (Array<bool>&, const Array<bool>&);
 
+template int assign (Array<bool>&, const Array<bool>&, const bool&);
+
 #include "Array2.h"
 #include "Array2.cc"
 
 template class Array2<bool>;
 
 template int assign (Array2<bool>&, const Array2<bool>&);
 
+template int assign (Array2<bool>&, const Array2<bool>&, const bool&);
+
 #include "DiagArray2.h"
 #include "DiagArray2.cc"
 
 template class DiagArray2<bool>;
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
diff --git a/liboctave/Array-ch.cc b/liboctave/Array-ch.cc
--- a/liboctave/Array-ch.cc
+++ b/liboctave/Array-ch.cc
@@ -28,23 +28,27 @@ Software Foundation, 59 Temple Place - S
 
 #include "Array.h"
 #include "Array.cc"
 
 template class Array<char>;
 
 template int assign (Array<char>&, const Array<char>&);
 
+template int assign (Array<char>&, const Array<char>&, const char&);
+
 #include "Array2.h"
 #include "Array2.cc"
 
 template class Array2<char>;
 
 template int assign (Array2<char>&, const Array2<char>&);
 
+template int assign (Array2<char>&, const Array2<char>&, const char&);
+
 #include "DiagArray2.h"
 #include "DiagArray2.cc"
 
 template class DiagArray2<char>;
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
diff --git a/liboctave/Array-d.cc b/liboctave/Array-d.cc
--- a/liboctave/Array-d.cc
+++ b/liboctave/Array-d.cc
@@ -31,26 +31,36 @@ Software Foundation, 59 Temple Place - S
 
 template class Array<double>;
 
 template int assign (Array<double>&, const Array<double>&);
 template int assign (Array<double>&, const Array<int>&);
 template int assign (Array<double>&, const Array<short>&);
 template int assign (Array<double>&, const Array<char>&);
 
+template int assign (Array<double>&, const Array<double>&, const double&);
+template int assign (Array<double>&, const Array<int>&, const double&);
+template int assign (Array<double>&, const Array<short>&, const double&);
+template int assign (Array<double>&, const Array<char>&, const double&);
+
 #include "Array2.h"
 #include "Array2.cc"
 
 template class Array2<double>;
 
 template int assign (Array2<double>&, const Array2<double>&);
 template int assign (Array2<double>&, const Array2<int>&);
 template int assign (Array2<double>&, const Array2<short>&);
 template int assign (Array2<double>&, const Array2<char>&);
 
+template int assign (Array2<double>&, const Array2<double>&, const double&);
+template int assign (Array2<double>&, const Array2<int>&, const double&);
+template int assign (Array2<double>&, const Array2<short>&, const double&);
+template int assign (Array2<double>&, const Array2<char>&, const double&);
+
 #include "ArrayN.h"
 #include "ArrayN.cc"
 
 template class ArrayN<double>;
 template std::ostream& operator << (std::ostream&, const ArrayN<double>&);
 
 #include "DiagArray2.h"
 #include "DiagArray2.cc"
diff --git a/liboctave/Array-i.cc b/liboctave/Array-i.cc
--- a/liboctave/Array-i.cc
+++ b/liboctave/Array-i.cc
@@ -30,25 +30,33 @@ Software Foundation, 59 Temple Place - S
 #include "Array.cc"
 
 template class Array<int>;
 
 template int assign (Array<int>&, const Array<int>&);
 template int assign (Array<int>&, const Array<short>&);
 template int assign (Array<int>&, const Array<char>&);
 
+template int assign (Array<int>&, const Array<int>&, const int&);
+template int assign (Array<int>&, const Array<short>&, const int&);
+template int assign (Array<int>&, const Array<char>&, const int&);
+
 #include "Array2.h"
 #include "Array2.cc"
 
 template class Array2<int>;
 
 template int assign (Array2<int>&, const Array2<int>&);
 template int assign (Array2<int>&, const Array2<short>&);
 template int assign (Array2<int>&, const Array2<char>&);
 
+template int assign (Array2<int>&, const Array2<int>&, const int&);
+template int assign (Array2<int>&, const Array2<short>&, const int&);
+template int assign (Array2<int>&, const Array2<char>&, const int&);
+
 #include "DiagArray2.h"
 #include "DiagArray2.cc"
 
 template class DiagArray2<int>;
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
diff --git a/liboctave/Array-idx.h b/liboctave/Array-idx.h
--- a/liboctave/Array-idx.h
+++ b/liboctave/Array-idx.h
@@ -172,17 +172,17 @@ Array<T>::maybe_delete_elements (idx_vec
     }
 }
 
 // ??? FIXME ??? -- this does not handle assignment of empty vectors
 // to delete elements.  Should it?
 
 template <class LT, class RT>
 int
-assign (Array<LT>& lhs, const Array<RT>& rhs)
+assign (Array<LT>& lhs, const Array<RT>& rhs, const LT& resize_fill_value)
 {
   int retval = 1;
 
   idx_vector *tmp = lhs.get_idx ();
 
   idx_vector lhs_idx = tmp[0];
 
   int lhs_len = lhs.length ();
@@ -191,17 +191,17 @@ assign (Array<LT>& lhs, const Array<RT>&
   int n = lhs_idx.freeze (lhs_len, "vector", liboctave_rre_flag);
 
   if (n != 0)
     {
       if (liboctave_rre_flag && (rhs_len == n || rhs_len == 1))
 	{
 	  int max_idx = lhs_idx.max () + 1;
 	  if (max_idx > lhs_len)
-	    lhs.resize (max_idx, static_cast<LT> (0));
+	    lhs.resize (max_idx, resize_fill_value);
 	}
 
       if (rhs_len == n)
 	{
 	  for (int i = 0; i < n; i++)
 	    {
 	      int ii = lhs_idx.elem (i);
 	      lhs.elem (ii) = rhs.elem (i);
diff --git a/liboctave/Array-s.cc b/liboctave/Array-s.cc
--- a/liboctave/Array-s.cc
+++ b/liboctave/Array-s.cc
@@ -29,24 +29,30 @@ Software Foundation, 59 Temple Place - S
 #include "Array.h"
 #include "Array.cc"
 
 template class Array<short>;
 
 template int assign (Array<short>&, const Array<short>&);
 template int assign (Array<short>&, const Array<char>&);
 
+template int assign (Array<short>&, const Array<short>&, const short&);
+template int assign (Array<short>&, const Array<char>&, const short&);
+
 #include "Array2.h"
 #include "Array2.cc"
 
 template class Array2<short>;
 
 template int assign (Array2<short>&, const Array2<short>&);
 template int assign (Array2<short>&, const Array2<char>&);
 
+template int assign (Array2<short>&, const Array2<short>&, const short&);
+template int assign (Array2<short>&, const Array2<char>&, const short&);
+
 #include "DiagArray2.h"
 #include "DiagArray2.cc"
 
 template class DiagArray2<short>;
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
diff --git a/liboctave/Array.h b/liboctave/Array.h
--- a/liboctave/Array.h
+++ b/liboctave/Array.h
@@ -247,17 +247,24 @@ public:
   Array<T> value (void);
 
   Array<T> index (idx_vector& i) const;
 #endif
 };
 
 template <class LT, class RT>
 int
-assign (Array<LT>& lhs, const Array<RT>& rhs);
+assign (Array<LT>& lhs, const Array<RT>& rhs, const LT& resize_fill_value);
+
+template <class LT, class RT>
+int
+assign (Array<LT>& lhs, const Array<RT>& rhs)
+{
+  return assign (lhs, rhs, static_cast<LT> (0));
+}
 
 #endif
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
diff --git a/liboctave/Array2-idx.h b/liboctave/Array2-idx.h
--- a/liboctave/Array2-idx.h
+++ b/liboctave/Array2-idx.h
@@ -488,24 +488,24 @@ Array2<T>::maybe_delete_elements (idx_ve
       if (liboctave_rre_flag) \
 	{ \
 	  int max_row_idx = idx_i_is_colon ? rhs_nr : idx_i.max () + 1; \
 	  int max_col_idx = idx_j_is_colon ? rhs_nc : idx_j.max () + 1; \
  \
 	  int new_nr = max_row_idx > lhs_nr ? max_row_idx : lhs_nr; \
 	  int new_nc = max_col_idx > lhs_nc ? max_col_idx : lhs_nc; \
  \
-	  lhs.resize (new_nr, new_nc, static_cast<LT> (0)); \
+	  lhs.resize (new_nr, new_nc, resize_fill_value); \
 	} \
     } \
   while (0)
 
 template <class LT, class RT>
 int
-assign (Array2<LT>& lhs, const Array2<RT>& rhs)
+assign (Array2<LT>& lhs, const Array2<RT>& rhs, const LT& resize_fill_value)
 {
   int retval = 1;
 
   int n_idx = lhs.index_count ();
 
   int lhs_nr = lhs.rows ();
   int lhs_nc = lhs.cols ();
 
diff --git a/liboctave/Array2.h b/liboctave/Array2.h
--- a/liboctave/Array2.h
+++ b/liboctave/Array2.h
@@ -183,17 +183,24 @@ public:
   Array2<T> index (idx_vector& i) const;
 
   Array2<T> index (idx_vector& i, idx_vector& j) const;
 #endif
 };
 
 template <class LT, class RT>
 int
-assign (Array2<LT>& lhs, const Array2<RT>& rhs);
+assign (Array2<LT>& lhs, const Array2<RT>& rhs, const LT& resize_fill_value);
+
+template <class LT, class RT>
+int
+assign (Array2<LT>& lhs, const Array2<RT>& rhs)
+{
+  return assign (lhs, rhs, static_cast<LT> (0));
+}
 
 #endif
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
diff --git a/liboctave/Array3-idx.h b/liboctave/Array3-idx.h
--- a/liboctave/Array3-idx.h
+++ b/liboctave/Array3-idx.h
@@ -38,17 +38,17 @@ Array3<T>::value (void)
 {
   Array3<T> retval;
   assert (0);
   return retval;
 }
 
 template <class LT, class RT>
 int
-assign (Array3<LT>&, const Array3<RT>&)
+assign (Array3<LT>&, const Array3<RT>&, const LT&)
 {
   assert (0);
   return 0;
 }
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
diff --git a/liboctave/Array3.h b/liboctave/Array3.h
--- a/liboctave/Array3.h
+++ b/liboctave/Array3.h
@@ -153,17 +153,24 @@ public:
   void maybe_delete_elements (idx_vector& i, idx_vector& j, idx_vector& k);
 
   Array3<T> value (void);
 #endif
 };
 
 template <class LT, class RT>
 int
-assign (Array3<LT>& lhs, const Array3<RT>& rhs);
+assign (Array3<LT>& lhs, const Array3<RT>& rhs, const LT& resize_fill_value);
+
+template <class LT, class RT>
+int
+assign (Array3<LT>& lhs, const Array3<RT>& rhs)
+{
+  return assign (lhs, rhs, static_cast<LT> (0));
+}
 
 #endif
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
diff --git a/liboctave/ArrayN-idx.h b/liboctave/ArrayN-idx.h
--- a/liboctave/ArrayN-idx.h
+++ b/liboctave/ArrayN-idx.h
@@ -252,17 +252,17 @@ ArrayN<T>::index (Array<idx_vector>& arr
     (*current_liboctave_error_handler)
       ("invalid number of dimensions for N-dimensional array index");
 
   return retval;
 }
 
 template <class LT, class RT>
 int
-assign (ArrayN<LT>&, const ArrayN<RT>&)
+assign (ArrayN<LT>&, const ArrayN<RT>&, const LT&)
 {
   assert (0);
   return 0;
 }
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
diff --git a/liboctave/ArrayN.h b/liboctave/ArrayN.h
--- a/liboctave/ArrayN.h
+++ b/liboctave/ArrayN.h
@@ -182,17 +182,24 @@ public:
   ArrayN<T> index (idx_vector& idx) const;
 
   ArrayN<T> index (Array<idx_vector>& idx) const;
 #endif
 };
 
 template <class LT, class RT>
 int
-assign (ArrayN<LT>& lhs, const ArrayN<RT>& rhs);
+assign (ArrayN<LT>& lhs, const ArrayN<RT>& rhs, const LT& resize_fill_value);
+
+template <class LT, class RT>
+int
+assign (ArrayN<LT>& lhs, const ArrayN<RT>& rhs)
+{
+  return assign (lhs, rhs, static_cast<LT> (0));
+}
 
 template <class T>
 std::ostream&
 operator << (std::ostream&, const ArrayN<T>&);
 
 #endif
 
 /*
diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,39 @@
+2001-05-31  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* chMatrix.cc (charMatrix::row_as_string): New parameter, raw.
+
+	* Array-i.cc, Array-s.cc, Array-d.cc, Array-ch.cc, Array-C.cc,
+	Array-b.cc: Instantiate three arg assign functions.
+
+	* ArrayN.cc (assign (ArrayN<LT>&, const ArrayN<RT>&, const LT&)):
+	New arg, resize_fill_value.
+	* ArrayN.h: Provide declaration.
+	(assign (ArrayN<LT>&, const ArrayN<RT>&): Define here by calling
+	three arg version.
+
+	* Array3.cc (assign (Array3<LT>&, const Array3<RT>&, const LT&)):
+	New arg, resize_fill_value.
+	* Array3.h: Provide declaration.
+	(assign (Array3<LT>&, const Array3<RT>&): Define here by calling
+	three arg version.
+
+	* Array2.cc (assign (Array2<LT>&, const Array2<RT>&, const LT&)):
+	New arg, resize_fill_value.
+	* Array2.h: Provide declaration.
+	(assign (Array2<LT>&, const Array2<RT>&): Define here by calling
+	three arg version.
+
+	* Array.cc (assign (Array<LT>&, const Array<RT>&, const LT&)):
+	New arg, resize_fill_value.
+	* Array.h: Provide declaration.
+	(assign (Array<LT>&, const Array<RT>&): Define here by calling
+	three arg version.
+
 2001-05-17  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* pathsearch.cc (dir_path::set_program_name): Set the environment
 	variables SELFAUTOLOC, SELFAUTODIR, SELFAUTOPARENT, and TEXMFDBS
 	to the empty string.
 
 2001-05-15  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
diff --git a/liboctave/chMatrix.cc b/liboctave/chMatrix.cc
--- a/liboctave/chMatrix.cc
+++ b/liboctave/chMatrix.cc
@@ -124,17 +124,17 @@ charMatrix::insert (const char *s, int r
 charMatrix&
 charMatrix::insert (const charMatrix& a, int r, int c)
 {
   Array2<char>::insert (a, r, c);
   return *this;
 }
 
 std::string
-charMatrix::row_as_string (int r, bool strip_ws) const 
+charMatrix::row_as_string (int r, bool strip_ws, bool raw) const 
 {
   std::string retval;
 
   int nr = rows ();
   int nc = cols ();
 
   if (r == 0 && nr == 0 && nc == 0)
     return retval;
@@ -145,33 +145,36 @@ charMatrix::row_as_string (int r, bool s
       return retval;
     }
 
   retval.resize (nc, '\0');
 
   for (int i = 0; i < nc; i++)
     retval[i] = elem (r, i);
 
-  if (strip_ws)
+  if (! raw)
     {
-      while (--nc >= 0)
+      if (strip_ws)
 	{
-	  char c = retval[nc];
-	  if (c && c != ' ')
-	    break;
+	  while (--nc >= 0)
+	    {
+	      char c = retval[nc];
+	      if (c && c != ' ')
+		break;
+	    }
 	}
+      else
+	{
+	  while (--nc >= 0)
+	    if (retval[nc])
+	      break;
+	}
+
+      retval.resize (nc+1);
     }
-  else
-    {
-      while (--nc >= 0)
-	if (retval[nc])
-	  break;
-    }
-
-  retval.resize (nc+1);
 
   return retval;
 }
 
 charMatrix
 charMatrix::extract (int r1, int c1, int r2, int c2) const
 {
   if (r1 > r2) { int tmp = r1; r1 = r2; r2 = tmp; }
diff --git a/liboctave/chMatrix.h b/liboctave/chMatrix.h
--- a/liboctave/chMatrix.h
+++ b/liboctave/chMatrix.h
@@ -60,17 +60,17 @@ public:
   bool operator == (const charMatrix& a) const;
   bool operator != (const charMatrix& a) const;
 
   // destructive insert/delete/reorder operations
 
   charMatrix& insert (const char *s, int r, int c);
   charMatrix& insert (const charMatrix& a, int r, int c);
 
-  std::string row_as_string (int, bool = false) const;
+  std::string row_as_string (int, bool strip_ws = false, bool raw = false) const;
 
   // resize is the destructive equivalent for this one
 
   charMatrix extract (int r1, int c1, int r2, int c2) const;
 
   Matrix all (void) const;
   Matrix any (void) const;
 
diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,8 +1,12 @@
+2001-05-30  Jean-Francois Cardoso  <cardoso@tsi.enst.fr>
+
+	* m/image/saveimage.m: fix saving an image to Postscript format.
+
 2001-04-18  A. Scottedward Hodel <a.s.hodel@eng.auburn.edu>
 
 	* control/system/is_stabilizable.m: Pass a to sys2ss, not sys.
 
 2001-02-28  Kai Habel  <kai.habel@gmx.de>
 
 	* general/cart2pol.m: New file.
 	* general/pol2cart.m: New file.
diff --git a/scripts/image/saveimage.m b/scripts/image/saveimage.m
--- a/scripts/image/saveimage.m
+++ b/scripts/image/saveimage.m
@@ -286,17 +286,17 @@ function saveimage (filename, img, img_f
     fprintf (fid, "%g %g scale\n", scols, srows);
     fprintf (fid, "%d %d %d\n", img_nr, img_nc, bps);
     fprintf (fid, "[ %d 0 0 -%d 0 %d ]\n", img_nr, img_nc, img_nc);
     fprintf (fid, "{ picstr readstring }\n");
     fprintf (fid, "image\n");
 
     img = map(img);
 
-    fmt = "%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x\n";
+    fmt = "%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x\n";
     fprintf (fid, fmt, img);
 
     if (rem (img_sz, 30) != 0)
       fprintf (fid, "\n");
     endif
 
     fprintf (fid, "grestore\n");
     fprintf (fid, "showpage\n");
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,22 @@
+2001-05-31  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* ov-cx-mat.cc: Deleve unnecessary instantiation of assign function.
+	* ov-re-mat.cc: Likewise.
+	* ov-re-nd-array.cc: Likewise.
+	* ov-str-mat.cc: Likewise.
+	* ov-bool-mat.cc: Likewise.
+
+	* load-save.cc (save_ascii_data): When saving string data, get raw
+	string value for matrix row since there may be embedded nuls.
+
+	* pt-mat.cc (Vstring_fill_char): No longer static.
+	* pt-mat.h: Provide declaration.
+
 2001-05-17  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* octave.cc (initialize_pathsearch): Save initial value of the
 	TEXMFDBS environment variable here.
 	* toplev.cc (restore_texmfdbs_envvar): New function.
 	(Fsystem): Set TEXMFDBS back to original value before running
 	subprocesses.
 
diff --git a/src/load-save.cc b/src/load-save.cc
--- a/src/load-save.cc
+++ b/src/load-save.cc
@@ -4470,18 +4470,20 @@ save_ascii_data (std::ostream& os, const
       ascii_save_type (os, "string array", mark_as_global);
       charMatrix chm = tc.char_matrix_value ();
       int elements = chm.rows ();
       os << "# elements: " << elements << "\n";
       for (int i = 0; i < elements; i++)
 	{
 	  int len = chm.cols ();
 	  os << "# length: " << len << "\n";
-	  std::string tstr = chm.row_as_string (i);
+	  std::string tstr = chm.row_as_string (i, false, true);
 	  const char *tmp = tstr.data ();
+	  if (tstr.length () > len)
+	    panic_impossible ();
 	  os.write (X_CAST (char *, tmp), len);
 	  os << "\n";
 	}
     }
   else if (tc.is_range ())
     {
       ascii_save_type (os, "range", mark_as_global);
       Range tmp = tc.range_value ();
diff --git a/src/ov-bool-mat.cc b/src/ov-bool-mat.cc
--- a/src/ov-bool-mat.cc
+++ b/src/ov-bool-mat.cc
@@ -73,20 +73,16 @@ octave_bool_matrix::try_narrowing_conver
   int nc = matrix.cols ();
 
   if (nr == 1 && nc == 1)
     retval = new octave_bool (matrix (0, 0));
 
   return retval;
 }
 
-#if !defined (CXX_NEW_FRIEND_TEMPLATE_DECL)
-extern void assign (Array2<bool>&, const Array2<bool>&);
-#endif
-
 void
 octave_bool_matrix::assign (const octave_value_list& idx,
 			    const boolMatrix& rhs)
 {
   int len = idx.length ();
 
   switch (len)
     {
diff --git a/src/ov-cx-mat.cc b/src/ov-cx-mat.cc
--- a/src/ov-cx-mat.cc
+++ b/src/ov-cx-mat.cc
@@ -71,20 +71,16 @@ octave_complex_matrix::try_narrowing_con
   else if (nr == 0 || nc == 0)
     retval = new octave_matrix (Matrix (nr, nc));
   else if (matrix.all_elements_are_real ())
     retval = new octave_matrix (::real (matrix));
 
   return retval;
 }
 
-#if !defined (CXX_NEW_FRIEND_TEMPLATE_DECL)
-extern void assign (Array2<Complex>&, const Array2<Complex>&);
-#endif
-
 void
 octave_complex_matrix::assign (const octave_value_list& idx,
 			       const ComplexMatrix& rhs)
 {
   int len = idx.length ();
 
   switch (len)
     {
@@ -112,20 +108,16 @@ octave_complex_matrix::assign (const oct
 
     default:
       error ("invalid number of indices (%d) for indexed matrix assignment",
 	     len);
       break;
     }
 }
 
-#if !defined (CXX_NEW_FRIEND_TEMPLATE_DECL)
-extern void assign (Array2<Complex>&, const Array2<double>&);
-#endif
-
 void
 octave_complex_matrix::assign (const octave_value_list& idx,
 			       const Matrix& rhs)
 {
   int len = idx.length ();
 
   switch (len)
     {
diff --git a/src/ov-re-mat.cc b/src/ov-re-mat.cc
--- a/src/ov-re-mat.cc
+++ b/src/ov-re-mat.cc
@@ -61,20 +61,16 @@ octave_matrix::try_narrowing_conversion 
   int nc = matrix.cols ();
 
   if (nr == 1 && nc == 1)
     retval = new octave_scalar (matrix (0, 0));
 
   return retval;
 }
 
-#if !defined (CXX_NEW_FRIEND_TEMPLATE_DECL)
-extern void assign (Array2<double>&, const Array2<double>&);
-#endif
-
 void
 octave_matrix::assign (const octave_value_list& idx, const Matrix& rhs)
 {
   int len = idx.length ();
 
   switch (len)
     {
     case 2:
diff --git a/src/ov-re-nd-array.cc b/src/ov-re-nd-array.cc
--- a/src/ov-re-nd-array.cc
+++ b/src/ov-re-nd-array.cc
@@ -62,20 +62,16 @@ octave_matrix::try_narrowing_conversion 
   int nc = matrix.cols ();
 
   if (nr == 1 && nc == 1)
     retval = new octave_scalar (matrix (0, 0));
 
   return retval;
 }
 
-#if !defined (CXX_NEW_FRIEND_TEMPLATE_DECL)
-extern void assign (Array2<double>&, const Array2<double>&);
-#endif
-
 void
 octave_matrix::assign (const octave_value_list& idx, const Matrix& rhs)
 {
   int len = idx.length ();
 
   switch (len)
     {
     case 2:
diff --git a/src/ov-str-mat.cc b/src/ov-str-mat.cc
--- a/src/ov-str-mat.cc
+++ b/src/ov-str-mat.cc
@@ -34,16 +34,17 @@ Software Foundation, 59 Temple Place - S
 #include "mx-base.h"
 
 #include "oct-obj.h"
 #include "ops.h"
 #include "ov-re-mat.h"
 #include "ov-str-mat.h"
 #include "gripes.h"
 #include "pr-output.h"
+#include "pt-mat.h"
 
 DEFINE_OCTAVE_ALLOCATOR (octave_char_matrix_str);
 
 DEFINE_OV_TYPEID_FUNCTIONS_AND_DATA (octave_char_matrix_str, "string");
 
 static octave_value *
 default_numeric_conversion_function (const octave_value& a)
 {
@@ -89,20 +90,16 @@ octave_char_matrix_str::do_index_op (con
     default:
       error ("invalid number of indices (%d) for matrix value", len);
       break;
     }
 
   return retval;
 }
 
-#if !defined (CXX_NEW_FRIEND_TEMPLATE_DECL)
-extern void assign (Array2<char>&, const Array2<char>&);
-#endif
-
 void
 octave_char_matrix_str::assign (const octave_value_list& idx,
 				const charMatrix& rhs)
 {
   int len = idx.length ();
 
   // XXX FIXME XXX
   charMatrix tmp = rhs;
@@ -114,27 +111,27 @@ octave_char_matrix_str::assign (const oc
     case 2:
       {
 	idx_vector i = idx (0).index_vector ();
 	idx_vector j = idx (1).index_vector ();
 
 	matrix.set_index (i);
 	matrix.set_index (j);
 
-	::assign (matrix, tmp);
+	::assign (matrix, tmp, Vstring_fill_char);
       }
       break;
 
     case 1:
       {
 	idx_vector i = idx (0).index_vector ();
 
 	matrix.set_index (i);
 
-	::assign (matrix, tmp);
+	::assign (matrix, tmp, Vstring_fill_char);
       }
       break;
 
     default:
       error ("invalid number of indices (%d) for indexed matrix assignment",
 	     len);
       break;
     }
diff --git a/src/pt-mat.cc b/src/pt-mat.cc
--- a/src/pt-mat.cc
+++ b/src/pt-mat.cc
@@ -48,17 +48,17 @@ Software Foundation, 59 Temple Place - S
 // yes.  A negative value means yes, but print a warning message.
 // Zero means it should be considered an error.
 static int Vempty_list_elements_ok;
 
 // Should `[97, 98, 99, "123"]' be a string?
 static bool Vimplicit_num_to_str_ok;
 
 // The character to fill with when creating string arrays.
-static char Vstring_fill_char;
+char Vstring_fill_char = ' ';
 
 // General matrices.  This list type is much more work to handle than
 // constant matrices, but it allows us to construct matrices from
 // other matrices, variables, and functions.
 
 // But first, some internal classes that make our job much easier.
 
 class
diff --git a/src/pt-mat.h b/src/pt-mat.h
--- a/src/pt-mat.h
+++ b/src/pt-mat.h
@@ -71,15 +71,18 @@ private:
 
   // No copying!
 
   tree_matrix (const tree_matrix&);
 
   tree_matrix& operator = (const tree_matrix&);
 };
 
+// The character to fill with when creating string arrays.
+extern char Vstring_fill_char;
+
 #endif
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
