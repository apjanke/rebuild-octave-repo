# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1452798032 18000
#      Thu Jan 14 14:00:32 2016 -0500
# Node ID f25c14056b7c30dba66300cbce47f471252a59da
# Parent  fd97ed44f2da32f5c89d0888e759088239393cbe
overhaul parser error handling for end token mismatch

* parse.h, oct-parse.in.yy (end_token_as_string): New static function.
(octave_base_parser::end_error): Delete.
(octave_base_parser::end_token_error): New function.
(octave_base_parser::end_token_ok): Simply check for match.
Change all uses to call end_token_error separately if end_token_ok
returns false.

diff --git a/libinterp/parse-tree/oct-parse.in.yy b/libinterp/parse-tree/oct-parse.in.yy
--- a/libinterp/parse-tree/oct-parse.in.yy
+++ b/libinterp/parse-tree/oct-parse.in.yy
@@ -1536,21 +1536,26 @@ function2       : param_list opt_sep opt
 
                     $$ = parser.start_function (0, $2, $3);
                   }
                 ;
 
 function_end    : END
                   {
                     parser.endfunction_found = true;
+
                     if (parser.end_token_ok ($1, token::function_end))
                       $$ = parser.make_end ("endfunction", false,
                                             $1->line (), $1->column ());
                     else
-                      ABORT_PARSE;
+                      {
+                        parser.end_token_error ($1, token::function_end);
+
+                        ABORT_PARSE;
+                      }
                   }
                 | END_OF_INPUT
                   {
 // A lot of tests are based on the assumption that this is OK
 //                  if (lexer.reading_script_file)
 //                    {
 //                      parser.bison_error ("function body open at end of script");
 //                      YYABORT;
@@ -2079,166 +2084,106 @@ octave_base_parser::reset (void)
   lexer.reset ();
 
   yypstate_delete (static_cast<yypstate *> (parser_state));
   parser_state = yypstate_new ();
 }
 
 // Error mesages for mismatched end tokens.
 
-void
-octave_base_parser::end_error (const char *type, token::end_tok_type ettype,
-                               int l, int c)
+static std::string
+end_token_as_string (token::end_tok_type ettype)
 {
-  static const char *fmt
-    = "'%s' command matched by '%s' near line %d column %d";
+  std::string retval = "<unknown>";
 
   switch (ettype)
     {
     case token::simple_end:
-      error (fmt, type, "end", l, c);
+      retval = "end";
       break;
 
     case token::classdef_end:
-      error (fmt, type, "endclassdef", l, c);
+      retval = "endclassdef";
       break;
 
     case token::enumeration_end:
-      error (fmt, type, "endenumeration", l, c);
+      retval = "endenumeration";
       break;
 
     case token::events_end:
-      error (fmt, type, "endevents", l, c);
+      retval = "endevents";
       break;
 
     case token::for_end:
-      error (fmt, type, "endfor", l, c);
+      retval = "endfor";
       break;
 
     case token::function_end:
-      error (fmt, type, "endfunction", l, c);
+      retval = "endfunction";
       break;
 
     case token::if_end:
-      error (fmt, type, "endif", l, c);
+      retval = "endif";
       break;
 
     case token::methods_end:
-      error (fmt, type, "endmethods", l, c);
+      retval = "endmethods";
       break;
 
     case token::parfor_end:
-      error (fmt, type, "endparfor", l, c);
+      retval = "endparfor";
       break;
 
     case token::properties_end:
-      error (fmt, type, "endproperties", l, c);
+      retval = "endproperties";
       break;
 
     case token::switch_end:
-      error (fmt, type, "endswitch", l, c);
+      retval = "endswitch";
       break;
 
     case token::try_catch_end:
-      error (fmt, type, "end_try_catch", l, c);
+      retval = "end_try_catch";
       break;
 
     case token::unwind_protect_end:
-      error (fmt, type, "end_unwind_protect", l, c);
+      retval = "end_unwind_protect";
       break;
 
     case token::while_end:
-      error (fmt, type, "endwhile", l, c);
+      retval = "endwhile";
       break;
 
     default:
       panic_impossible ();
       break;
     }
+
+  return retval;
 }
 
+void
+octave_base_parser::end_token_error (token *tok, token::end_tok_type expected)
+{
+  std::string msg = ("'" + end_token_as_string (expected)
+                     + "' command matched by '"
+                     + end_token_as_string (tok->ettype ()) + "'");
+
+  bison_error (msg, tok->line (), tok->column ());
+}
+
+
 // Check to see that end tokens are properly matched.
 
 bool
 octave_base_parser::end_token_ok (token *tok, token::end_tok_type expected)
 {
-  bool retval = true;
-
   token::end_tok_type ettype = tok->ettype ();
 
-  if (ettype != expected && ettype != token::simple_end)
-    {
-      retval = false;
-
-      bison_error ("parse error");
-
-      int l = tok->line ();
-      int c = tok->column ();
-
-      switch (expected)
-        {
-        case token::classdef_end:
-          end_error ("classdef", ettype, l, c);
-          break;
-
-        case token::enumeration_end:
-          end_error ("enumeration", ettype, l, c);
-          break;
-
-        case token::events_end:
-          end_error ("events", ettype, l, c);
-          break;
-
-        case token::for_end:
-          end_error ("for", ettype, l, c);
-          break;
-
-        case token::function_end:
-          end_error ("function", ettype, l, c);
-          break;
-
-        case token::if_end:
-          end_error ("if", ettype, l, c);
-          break;
-
-        case token::methods_end:
-          end_error ("methods", ettype, l, c);
-          break;
-
-        case token::parfor_end:
-          end_error ("parfor", ettype, l, c);
-          break;
-
-        case token::properties_end:
-          end_error ("properties", ettype, l, c);
-          break;
-
-        case token::switch_end:
-          end_error ("switch", ettype, l, c);
-          break;
-
-        case token::try_catch_end:
-          end_error ("try", ettype, l, c);
-          break;
-
-        case token::unwind_protect_end:
-          end_error ("unwind_protect", ettype, l, c);
-          break;
-
-        case token::while_end:
-          end_error ("while", ettype, l, c);
-          break;
-
-        default:
-          panic_impossible ();
-          break;
-        }
-    }
-
-  return retval;
+  return ettype == expected || ettype == token::simple_end;
 }
 
 // Maybe print a warning if an assignment expression is used as the
 // test in a logical expression.
 
 void
 octave_base_parser::maybe_warn_assign_as_truth_value (tree_expression *expr)
 {
@@ -2674,16 +2619,18 @@ octave_base_parser::make_unwind_command 
 
       retval = new tree_unwind_protect_command (body, cleanup_stmts,
                                                 lc, mc, tc, l, c);
     }
   else
     {
       delete body;
       delete cleanup_stmts;
+
+      end_token_error (end_tok, token::unwind_protect_end);
     }
 
   return retval;
 }
 
 // Build a try-catch command.
 
 tree_command *
@@ -2728,16 +2675,18 @@ octave_base_parser::make_try_command (to
 
       retval = new tree_try_catch_command (body, cleanup_stmts, id,
                                            lc, mc, tc, l, c);
     }
   else
     {
       delete body;
       delete cleanup_stmts;
+
+      end_token_error (end_tok, token::try_catch_end);
     }
 
   return retval;
 }
 
 // Build a while command.
 
 tree_command *
@@ -2761,16 +2710,18 @@ octave_base_parser::make_while_command (
       int c = while_tok->column ();
 
       retval = new tree_while_command (expr, body, lc, tc, l, c);
     }
   else
     {
       delete expr;
       delete body;
+
+      end_token_error (end_tok, token::while_end);
     }
 
   return retval;
 }
 
 // Build a do-until command.
 
 tree_command *
@@ -2836,16 +2787,18 @@ octave_base_parser::make_for_command (in
         }
     }
   else
     {
       delete lhs;
       delete expr;
       delete maxproc;
       delete body;
+
+      end_token_error (end_tok, parfor ? token::parfor_end : token::for_end);
     }
 
   return retval;
 }
 
 // Build a break command.
 
 tree_command *
@@ -2918,17 +2871,21 @@ octave_base_parser::finish_if_command (t
               elt->line (l);
               elt->column (c);
             }
         }
 
       retval = new tree_if_command (list, lc, tc, l, c);
     }
   else
-    delete list;
+    {
+      delete list;
+
+      end_token_error (end_tok, token::if_end);
+    }
 
   return retval;
 }
 
 // Build an elseif clause.
 
 tree_if_clause *
 octave_base_parser::make_elseif_clause (token *elseif_tok,
@@ -2974,16 +2931,18 @@ octave_base_parser::finish_switch_comman
         }
 
       retval = new tree_switch_command (expr, list, lc, tc, l, c);
     }
   else
     {
       delete expr;
       delete list;
+
+      end_token_error (end_tok, token::switch_end);
     }
 
   return retval;
 }
 
 // Build a switch case.
 
 tree_switch_case *
@@ -3395,37 +3354,49 @@ octave_base_parser::make_classdef (token
   std::string nm = lexer.fcn_file_name;
 
   size_t pos = nm.find_last_of (file_ops::dir_sep_chars ());
 
   if (pos != std::string::npos)
     nm = lexer.fcn_file_name.substr (pos+1);
 
   if (nm != cls_name)
-    bison_error ("invalid classdef definition, the class name must match the filename");
-  else if (end_token_ok (end_tok, token::classdef_end))
-    {
-      octave_comment_list *tc = lexer.comment_buf.get_comment ();
-
-      int l = tok_val->line ();
-      int c = tok_val->column ();
-
-      if (! body)
-        body = new tree_classdef_body ();
-
-      retval = new tree_classdef (a, id, sc, body, lc, tc,
-                                  curr_package_name, l, c);
-    }
-
-  if (! retval)
     {
       delete a;
       delete id;
       delete sc;
       delete body;
+
+      bison_error ("invalid classdef definition, the class name must match the filename");
+
+    }
+  else
+    {
+      if (end_token_ok (end_tok, token::classdef_end))
+        {
+          octave_comment_list *tc = lexer.comment_buf.get_comment ();
+
+          int l = tok_val->line ();
+          int c = tok_val->column ();
+
+          if (! body)
+            body = new tree_classdef_body ();
+
+          retval = new tree_classdef (a, id, sc, body, lc, tc,
+                                      curr_package_name, l, c);
+        }
+      else
+        {
+          delete a;
+          delete id;
+          delete sc;
+          delete body;
+
+          end_token_error (end_tok, token::switch_end);
+        }
     }
 
   return retval;
 }
 
 tree_classdef_properties_block *
 octave_base_parser::make_classdef_properties_block (token *tok_val,
                                                     tree_classdef_attribute_list *a,
@@ -3446,16 +3417,18 @@ octave_base_parser::make_classdef_proper
         plist = new tree_classdef_property_list ();
 
       retval = new tree_classdef_properties_block (a, plist, lc, tc, l, c);
     }
   else
     {
       delete a;
       delete plist;
+
+      end_token_error (end_tok, token::properties_end);
     }
 
   return retval;
 }
 
 tree_classdef_methods_block *
 octave_base_parser::make_classdef_methods_block (token *tok_val,
                                                  tree_classdef_attribute_list *a,
@@ -3476,16 +3449,18 @@ octave_base_parser::make_classdef_method
         mlist = new tree_classdef_methods_list ();
 
       retval = new tree_classdef_methods_block (a, mlist, lc, tc, l, c);
     }
   else
     {
       delete a;
       delete mlist;
+
+      end_token_error (end_tok, token::methods_end);
     }
 
   return retval;
 }
 
 tree_classdef_events_block *
 octave_base_parser::make_classdef_events_block (token *tok_val,
                                                 tree_classdef_attribute_list *a,
@@ -3506,16 +3481,18 @@ octave_base_parser::make_classdef_events
         elist = new tree_classdef_events_list ();
 
       retval = new tree_classdef_events_block (a, elist, lc, tc, l, c);
     }
   else
     {
       delete a;
       delete elist;
+
+      end_token_error (end_tok, token::events_end);
     }
 
   return retval;
 }
 
 tree_classdef_enum_block *
 octave_base_parser::make_classdef_enum_block (token *tok_val,
                                               tree_classdef_attribute_list *a,
@@ -3536,16 +3513,18 @@ octave_base_parser::make_classdef_enum_b
         elist = new tree_classdef_enum_list ();
 
       retval = new tree_classdef_enum_block (a, elist, lc, tc, l, c);
     }
   else
     {
       delete a;
       delete elist;
+
+      end_token_error (end_tok, token::enumeration_end);
     }
 
   return retval;
 }
 
 octave_user_function*
 octave_base_parser::start_classdef_external_method (tree_identifier *id,
                                                     tree_parameter_list *pl)
diff --git a/libinterp/parse-tree/parse.h b/libinterp/parse-tree/parse.h
--- a/libinterp/parse-tree/parse.h
+++ b/libinterp/parse-tree/parse.h
@@ -147,17 +147,17 @@ public:
 
   octave_base_parser (octave_base_lexer& lxr);
 
   ~octave_base_parser (void);
 
   void reset (void);
 
   // Error mesages for mismatched end tokens.
-  void end_error (const char *type, token::end_tok_type expected, int l, int c);
+  void end_token_error (token *tok, token::end_tok_type expected);
 
   // Check to see that end tokens are properly matched.
   bool end_token_ok (token *tok, token::end_tok_type expected);
 
   // Maybe print a warning if an assignment expression is used as the
   // test in a logical expression.
   void maybe_warn_assign_as_truth_value (tree_expression *expr);
 
