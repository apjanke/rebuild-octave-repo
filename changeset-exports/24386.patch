# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1512679243 18000
#      Thu Dec 07 15:40:43 2017 -0500
# Node ID a164fd6e7e7b16232a42c6408828df3117b4df64
# Parent  c7f56bffe02fad7d469254997c01be175613dd4e
eliminate unused symbol_record member variable and related functions

* symrec.h (symbol_record::m_valid): Delete variable and all uses.
(symbol_record::symbol_record_rep::is_valid,
symbol_record::symbol_record_rep::invalidate,
symbol_record::is_valid, symbol_record::invalidate): Delete.

diff --git a/libinterp/corefcn/symrec.h b/libinterp/corefcn/symrec.h
--- a/libinterp/corefcn/symrec.h
+++ b/libinterp/corefcn/symrec.h
@@ -76,17 +76,17 @@ namespace octave
 
     class symbol_record_rep
     {
     public:
 
       symbol_record_rep (const std::string& nm, const octave_value& v,
                          unsigned int sc)
         : m_storage_class (sc), m_name (nm), m_fwd_scope (nullptr),
-          m_fwd_rep (), m_value_stack (), m_valid (true)
+          m_fwd_rep (), m_value_stack ()
       {
         m_value_stack.push_back (v);
       }
 
       // No copying!
 
       symbol_record_rep (const symbol_record_rep& ov) = delete;
 
@@ -226,24 +226,16 @@ namespace octave
           }
       }
 
       bool is_defined (context_id context) const
       {
         return varval (context).is_defined ();
       }
 
-      bool is_valid (void) const
-      {
-        if (auto t_fwd_rep = m_fwd_rep.lock ())
-          return t_fwd_rep->is_valid ();
-
-        return m_valid;
-      }
-
       bool is_variable (context_id context) const
       {
         if (auto t_fwd_rep = m_fwd_rep.lock ())
           return t_fwd_rep->is_variable (context);
 
         return (! is_local () || is_defined (context));
       }
 
@@ -476,27 +468,16 @@ namespace octave
 
         m_storage_class &= ~added_static;
       }
 
       unsigned int storage_class (void) const { return m_storage_class; }
 
       void init_persistent (void);
 
-      void invalidate (void)
-      {
-        if (auto t_fwd_rep = m_fwd_rep.lock ())
-          {
-            t_fwd_rep->invalidate ();
-            return;
-          }
-
-        m_valid = false;
-      }
-
       void bind_fwd_rep (symbol_scope_rep *fwd_scope,
                          const std::shared_ptr<symbol_record_rep>& fwd_rep)
       {
         m_fwd_scope = fwd_scope;
         m_fwd_rep = fwd_rep;
       }
 
       void unbind_fwd_rep (void)
@@ -519,18 +500,16 @@ namespace octave
 
       std::string m_name;
 
       symbol_scope_rep *m_fwd_scope;
 
       std::weak_ptr<symbol_record_rep> m_fwd_rep;
 
       std::deque<octave_value> m_value_stack;
-
-      bool m_valid;
     };
 
   public:
 
     symbol_record (const std::string& nm = "",
                    const octave_value& v = octave_value (),
                    unsigned int sc = local)
       : m_rep (new symbol_record_rep (nm, v, sc))
@@ -603,21 +582,16 @@ namespace octave
       return m_rep->is_defined (context);
     }
 
     bool is_undefined (context_id context) const
     {
       return ! m_rep->is_defined (context);
     }
 
-    bool is_valid (void) const
-    {
-      return m_rep->is_valid ();
-    }
-
     bool is_variable (context_id context) const
     {
       return m_rep->is_variable (context);
     }
 
     bool is_local (void) const { return m_rep->is_local (); }
     bool is_automatic (void) const { return m_rep->is_automatic (); }
     bool is_formal (void) const { return m_rep->is_formal (); }
@@ -641,18 +615,16 @@ namespace octave
     void unmark_formal (void) { m_rep->unmark_formal (); }
     void unmark_hidden (void) { m_rep->unmark_hidden (); }
     void unmark_inherited (void) { m_rep->unmark_inherited (); }
     void unmark_persistent (void) { m_rep->unmark_persistent (); }
     void unmark_added_static (void) { m_rep->unmark_added_static (); }
 
     void init_persistent (void) { m_rep->init_persistent (); }
 
-    void invalidate (void) { m_rep->invalidate (); }
-
     unsigned int storage_class (void) const { return m_rep->storage_class (); }
 
     void bind_fwd_rep (symbol_scope_rep *fwd_scope, const symbol_record& sr)
     {
       m_rep->bind_fwd_rep (fwd_scope, sr.m_rep);
     }
 
     void unbind_fwd_rep (void) { m_rep->unbind_fwd_rep (); }
