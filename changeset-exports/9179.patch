# HG changeset patch
# User Carsten Clark <tantumquantum+gnuoctave@gmail.com>
# Date 1241537226 14400
#      Tue May 05 11:27:06 2009 -0400
# Node ID 5be2e6696772c2fd998d86cb675ab09ddfad22c3
# Parent  a6375c37dad4ae4734f3f3fd8064e2d458b8f043
use access_double and assign_double on sparc only

diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,14 @@
+2009-05-05  Carsten Clark  <tantumquantum+gnuoctave@gmail.com>
+
+	* Quad.cc (user_function): Use access_double and assign_double on
+	SPARC only, not on all Sun systems.
+	* sun-utils.h: Likewise, define these functions on SPARC only.
+
 2009-05-05  Jaroslav Hajek  <highegg@gmail.com>
 
 	* Sparse.cc (assign1): Fix an old indexing bug.
 
 2009-05-04  Carsten Clark  <tantumquantum+gnuoctave@gmail.com>
 
 	* Quad.cc (float_user_function): Remove Sun/GCC special case.
 
diff --git a/liboctave/Quad.cc b/liboctave/Quad.cc
--- a/liboctave/Quad.cc
+++ b/liboctave/Quad.cc
@@ -72,27 +72,27 @@ extern "C"
 			 const octave_idx_type&, octave_idx_type&, octave_idx_type*, float*); 
 }
 
 static octave_idx_type
 user_function (double *x, int& ierr, double *result)
 {
   BEGIN_INTERRUPT_WITH_EXCEPTIONS;
 
-#if defined (sun) && defined (__GNUC__)
+#if defined (__sparc) && defined (__GNUC__)
   double xx = access_double (x);
 #else
   double xx = *x;
 #endif
 
   quad_integration_error = 0;
 
   double xresult = (*user_fcn) (xx);
 
-#if defined (sun) && defined (__GNUC__)
+#if defined (__sparc) && defined (__GNUC__)
   assign_double (result, xresult);
 #else
   *result = xresult;
 #endif
 
   if (quad_integration_error)
     ierr = -1;
 
diff --git a/liboctave/sun-utils.h b/liboctave/sun-utils.h
--- a/liboctave/sun-utils.h
+++ b/liboctave/sun-utils.h
@@ -19,22 +19,22 @@ along with Octave; see the file COPYING.
 <http://www.gnu.org/licenses/>.
 
 */
 
 #if !defined (octave_sun_utils_h)
 #define octave_sun_utils_h 1
 
 // This is only needed to dereference pointers to doubles if mixing
-// GCC and Sun f77/cc compiled code.  See the GCC manual (where the
+// GCC and Sun SPARC f77/cc compiled code.  See the GCC manual (where the
 // function access_double() is described) and the Sun f77 manual,
 // which explains that doubles are not always aligned on 8 byte
 // boundaries.
 
-#if defined (sun) && defined (__GNUC__)
+#if defined (__sparc) && defined (__GNUC__)
 
 inline double
 access_double (double *unaligned_ptr)
 {
   union d2i { double d; int i[2]; };
 
   union d2i *p = (union d2i *) unaligned_ptr;
   union d2i u;
