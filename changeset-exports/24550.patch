# HG changeset patch
# User Rik <rik@octave.org>
# Date 1515385191 28800
#      Sun Jan 07 20:19:51 2018 -0800
# Node ID 966c3283a164413dd4bfcc650ff89e0fdd7d0942
# Parent  2c497be89710e5b570f75aa0f4df266b5f9b83cc
doc: Fix appearance of '.' and "'" in Operator Index (bug #52813).

* container.txi: Use extra forced spaced after opindex for '.'.
Wrap any opindex with a single quote in @cod{}.

* data.txi, expr.txi, oop.txi, strings.txi: Wrap any opindex with a single
quote in @code{}.

diff --git a/doc/interpreter/container.txi b/doc/interpreter/container.txi
--- a/doc/interpreter/container.txi
+++ b/doc/interpreter/container.txi
@@ -62,17 +62,17 @@ expressions
 @example
 @group
 x.a = 1;
 x.b = [1, 2; 3, 4];
 x.c = "string";
 @end group
 @end example
 
-@opindex .
+@opindex . @ @ @ 
 @noindent
 create a structure with three elements.  The @samp{.} character separates
 the structure name from the field name and indicates to Octave that this
 variable is a structure.  To print the value of the
 structure you can type its name, just as for any other variable:
 
 @example
 @group
diff --git a/doc/interpreter/data.txi b/doc/interpreter/data.txi
--- a/doc/interpreter/data.txi
+++ b/doc/interpreter/data.txi
@@ -122,17 +122,17 @@ of @code{NaN}.
 
 @DOCSTRING(isna)
 
 @node String Objects
 @subsection String Objects
 @cindex strings
 @cindex character strings
 @opindex "
-@opindex '
+@opindex @code{'}
 
 A character string in Octave consists of a sequence of characters
 enclosed in either double-quote or single-quote marks.  Internally,
 Octave currently stores strings as matrices of characters.  All the
 indexing operations that work for matrix objects also work for strings.
 
 @xref{Strings}, for more information.
 
diff --git a/doc/interpreter/expr.txi b/doc/interpreter/expr.txi
--- a/doc/interpreter/expr.txi
+++ b/doc/interpreter/expr.txi
@@ -661,27 +661,27 @@ real result is preferred.
 @opindex -
 Negation.
 
 @item +@var{x}
 @opindex +
 Unary plus.  This operator has no effect on the operand.
 
 @item @var{x}'
-@opindex '
+@opindex @code{'}
 Complex conjugate transpose.  For real arguments, this operator is the
 same as the transpose operator.  For complex arguments, this operator is
 equivalent to the expression
 
 @example
 conj (x.')
 @end example
 
 @item @var{x}.'
-@opindex .'
+@opindex @code{.'}
 Transpose.
 @end table
 
 Note that because Octave's element-by-element operators begin with a
 @samp{.}, there is a possible ambiguity for statements like
 
 @example
 1./m
@@ -704,17 +704,17 @@ and not
 @end example
 
 @noindent
 Although this is inconsistent with the normal behavior of Octave's
 lexer, which usually prefers to break the input into tokens by
 preferring the longest possible match at any given point, it is more
 useful in this case.
 
-@opindex '
+@opindex @code{'}
 @DOCSTRING(ctranspose)
 
 @opindex .\
 @DOCSTRING(ldivide)
 
 @opindex -
 @DOCSTRING(minus)
 
@@ -739,17 +739,17 @@ useful in this case.
 @DOCSTRING(power)
 
 @opindex ./
 @DOCSTRING(rdivide)
 
 @opindex .*
 @DOCSTRING(times)
 
-@opindex .'
+@opindex @code{.'}
 @DOCSTRING(transpose)
 
 @opindex -
 @DOCSTRING(uminus)
 
 @opindex +
 @DOCSTRING(uplus)
 
diff --git a/doc/interpreter/oop.txi b/doc/interpreter/oop.txi
--- a/doc/interpreter/oop.txi
+++ b/doc/interpreter/oop.txi
@@ -495,18 +495,18 @@ user class.
 @opindex >
 @opindex >=
 @opindex ==
 @opindex !=
 @opindex ~=
 @opindex &
 @opindex |
 @opindex !
-@opindex '
-@opindex .'
+@opindex @code{'}
+@opindex @code{.'}
 @opindex :
 @opindex <
 
 @multitable {@code{a(s@math{_1},@dots{},s@math{_n}) = b}} {@code{subsasgn (a, s, b)}} {Complex conjugate transpose}
 @headitem Operation @tab Method @tab Description
 @item @code{a + b} @tab @code{plus (a, b)} @tab Binary addition
 @item @code{a - b} @tab @code{minus (a, b)} @tab Binary subtraction
 @item @code{+a} @tab @code{uplus (a)} @tab Unary addition
diff --git a/doc/interpreter/strings.txi b/doc/interpreter/strings.txi
--- a/doc/interpreter/strings.txi
+++ b/doc/interpreter/strings.txi
@@ -16,17 +16,17 @@
 @c along with Octave; see the file COPYING.  If not, see
 @c <https://www.gnu.org/licenses/>.
 
 @node Strings
 @chapter Strings
 @cindex strings
 @cindex character strings
 @opindex "
-@opindex '
+@opindex @code{'}
 
 A @dfn{string constant} consists of a sequence of characters enclosed in
 either double-quote or single-quote marks.  For example, both of the
 following expressions
 
 @example
 @group
 "parrot"
