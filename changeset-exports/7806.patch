# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1211448009 -7200
#      Thu May 22 11:20:09 2008 +0200
# Node ID edc25a3fb2bce80302402d876e660de57e332c43
# Parent  62affb34e6487a40de790346e0aced86da958cc4
handle floats in mk-opts.pl

diff --git a/ChangeLog b/ChangeLog
--- a/ChangeLog
+++ b/ChangeLog
@@ -1,8 +1,13 @@
+2008-05-22  Jaroslav Hajek <highegg@gmail.com>
+
+	* mk-opts.pl (emit_print_function, emit_set_function,
+	emit_show_function): Support float type.
+
 2008-05-20  David Bateman  <dbateman@free.fr>
 
 	* configure.in (AC_CHECK_FUNCS): Add expm1, lgammaf, lgammaf_r,
 	log1pf and tgammaf. Also check for libfftw3f.
 
 2008-04-09  Rafael Laboissiere  <rafael@debian.org>
 
 	* example/octave.desktop.in: Drop the Encoding key, which is
diff --git a/mk-opts.pl b/mk-opts.pl
--- a/mk-opts.pl
+++ b/mk-opts.pl
@@ -633,16 +633,21 @@ print_${class_name} (std::ostream& os)
         << std::resetiosflags (std::ios::left)
         << \"  \";\n\n";
 
       if ($type[$i] eq "double")
         {
           print "    double val = $static_object_name.$opt[$i] ();\n\n";
           print "    os << val << \"\\n\";\n";
         }
+      elsif ($type[$i] eq "float")
+        {
+          print "    float val = $static_object_name.$opt[$i] ();\n\n";
+          print "    os << val << \"\\n\";\n";
+        }
       elsif ($type[$i] eq "int" || $type[$i] eq "octave_idx_type")
         {
           print "    int val = $static_object_name.$opt[$i] ();\n\n";
           print "    os << val << \"\\n\";\n";
         }
       elsif ($type[$i] eq "std::string")
         {
           print "    os << $static_object_name.$opt[$i] () << \"\\n\";\n";
@@ -683,16 +688,31 @@ print_${class_name} (std::ostream& os)
     else
       {
         os << \"\\n\\n\";
         Matrix tmp = Matrix (ColumnVector (val));
         octave_print_internal (os, tmp, false, 2);
         os << \"\\n\\n\";
       }\n";
         }
+      elsif ($type[$i] eq "Array<float>")
+        {
+          print "    Array<float> val = $static_object_name.$opt[$i] ();\n\n";
+          print "    if (val.length () == 1)
+      {
+        os << val(0) << \"\\n\";
+      }
+    else
+      {
+        os << \"\\n\\n\";
+        FloatMatrix tmp = FloatMatrix (FloatColumnVector (val));
+        octave_print_internal (os, tmp, false, 2);
+        os << \"\\n\\n\";
+      }\n";
+        }
       else
         {
           die ("unknown type $type[$i]");
         }
 
       print "  }\n\n";
     }
 
@@ -717,16 +737,22 @@ set_${class_name} (const std::string& ke
     {\n";
 
       if ($type[$i] eq "double")
         {
           print "      double tmp = val.double_value ();\n\n";
           print "      if (! error_state)
         $static_object_name.set_$opt[$i] (tmp);\n";
         }
+      elsif ($type[$i] eq "float")
+        {
+          print "      float tmp = val.float_value ();\n\n";
+          print "      if (! error_state)
+        $static_object_name.set_$opt[$i] (tmp);\n";
+        }
       elsif ($type[$i] eq "int" || $type[$i] eq "octave_idx_type")
         {
           print "      int tmp = val.int_value ();\n\n";
           print "      if (! error_state)
         $static_object_name.set_$opt[$i] (tmp);\n";
         }
       elsif ($type[$i] eq "std::string")
         {
@@ -741,16 +767,22 @@ set_${class_name} (const std::string& ke
         $static_object_name.set_$opt[$i] (tmp);\n";
         }
       elsif ($type[$i] eq "Array<double>")
         {
           print "      Array<double> tmp = val.vector_value ();\n\n";
           print "      if (! error_state)
         $static_object_name.set_$opt[$i] (tmp);\n";
         }
+      elsif ($type[$i] eq "Array<float>")
+        {
+          print "      Array<float> tmp = val.float_vector_value ();\n\n";
+          print "      if (! error_state)
+        $static_object_name.set_$opt[$i] (tmp);\n";
+        }
       else
         {
           die ("unknown type $type[$i]");
         }
 
       print "    }\n";
     }
 
@@ -782,16 +814,21 @@ show_${class_name} (const std::string& k
            keyword, list[$i].min_toks_to_match, MAX_TOKENS))
     {\n";
 
       if ($type[$i] eq "double")
         {
           print "      double val = $static_object_name.$opt[$i] ();\n\n";
           print "      retval = val;\n";
         }
+      elsif ($type[$i] eq "float")
+        {
+          print "      float val = $static_object_name.$opt[$i] ();\n\n";
+          print "      retval = val;\n";
+        }
       elsif ($type[$i] eq "int" || $type[$i] eq "octave_idx_type")
         {
           print "      int val = $static_object_name.$opt[$i] ();\n\n";
           print "      retval = static_cast<double> (val);\n";
         }
       elsif ($type[$i] eq "std::string")
         {
           print "      retval = $static_object_name.$opt[$i] ();\n";
@@ -827,16 +864,28 @@ show_${class_name} (const std::string& k
         {
           retval = val(0);
         }
       else
         {
           retval = ColumnVector (val);
         }\n";
         }
+      elsif ($type[$i] eq "Array<float>")
+        {
+          print "      Array<float> val = $static_object_name.$opt[$i] ();\n\n";
+          print "      if (val.length () == 1)
+        {
+          retval = val(0);
+        }
+      else
+        {
+          retval = FloatColumnVector (val);
+        }\n";
+        }
       else
         {
           die ("unknown type $type[$i]");
         }
 
       print "    }\n";
     }
 
