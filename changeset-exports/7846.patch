# HG changeset patch
# User Michael Goffioul <michael.goffioul@gmail.com>
# Date 1204108102 -3600
#      Wed Feb 27 11:28:22 2008 +0100
# Node ID d7737a4268b7da229a8621d3648dfc73100340e5
# Parent  25f5d628bc8a76f8cb2f6aba584d3133915ed346
Fix typos in property names (edgealpha/facealpha).
* * *
Adpat OpenGL renderer to type change of edgealpha/facealpha properties.

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -22,16 +22,20 @@ 2008-06-04  Shai Ayal  <shaiay@users.sou
 
 	* graphics.h.in (axes::properties::update_xlim): call the new
 	axes::properties::calc_ticks_and_lims method
 	(axes::properties::update_ylim): ditto
 	(axes::properties::update_zlim): ditto
 
 2008-06-04  Michael Goffioul <michael.goffioul@gmail.com>
 
+	* graphics.h.in (patch::properties::edgealpha,
+	surface::properties::facealpha, surface::properties::edgealpha): Fix
+	typos in property names.
+
 	* graphics.h.in (class double_radio_property): New property class for
 	holding face/edge alpha values.
 	(patch::properties::facealpha, patch::properties::edgealpha,
 	surface::properties::facealpha, surface::properties::edgealpha): Use
 	double_radio_property class.
 	* graphics.cc (double_radio_property::set): Implement new property
 	class.
 	* genprops.awk (emit_get_double_radio): New function to emit code for
diff --git a/src/graphics.h.in b/src/graphics.h.in
--- a/src/graphics.h.in
+++ b/src/graphics.h.in
@@ -3016,17 +3016,17 @@ public:
       array_property facevertexcdata , Matrix ()
       array_property vertices , Matrix ()
       array_property vertexnormals , Matrix ()
       radio_property normalmode , "{auto}|manual"
       color_property facecolor , "{flat}|none|interp"
       double_radio_property facealpha , double_radio_property (1.0, radio_values ("flat|interp"))
       radio_property facelighting , "flat|{none}|gouraud|phong"
       color_property edgecolor , color_property (color_values (0, 0, 0), radio_values ("flat|none|interp"))
-      double_radio_property edgeealpha , double_radio_property (1.0, radio_values ("flat|interp"))
+      double_radio_property edgealpha , double_radio_property (1.0, radio_values ("flat|interp"))
       radio_property edgelighting , "{none}|flat|gouraud|phong"
       radio_property backfacelighting , "{reverselit}|unlit|lit"
       double_property ambientstrength , 0.3
       double_property diffusestrength , 0.6
       double_property specularstrength , 0.6
       double_property specularexponent , 10.0
       double_property specularcolorreflectance , 1.0
       radio_property erasemode , "{normal}|background|xor|none"
@@ -3086,32 +3086,32 @@ public:
 
     BEGIN_PROPERTIES(surface)
       data_property xdata lu , Matrix ()
       data_property ydata lu , Matrix ()
       data_property zdata lu , Matrix ()
       array_property cdata l , Matrix ()
       radio_property cdatamapping a , "{scaled}|direct"
       color_property facecolor , "{flat}|none|interp|texturemap"
-      double_radio_property faceealpha , double_radio_property (1.0, radio_values ("flat|interp"))
+      double_radio_property facealpha , double_radio_property (1.0, radio_values ("flat|interp"))
       color_property edgecolor , color_property (color_values (0, 0, 0), radio_values ("flat|none|interp"))
       radio_property linestyle , "{-}|--|:|-.|none"
       double_property linewidth , 0.5
       radio_property marker , "{none}|s|o|x|+|.|*|<|>|v|^|d|p|h"
       color_property markeredgecolor , "{auto}|none"
       color_property markerfacecolor , "auto|{none}"
       double_property markersize , 6
       string_property keylabel , ""
       radio_property interpreter , "{tex}|none|latex"
       array_property alphadata , Matrix ()
       radio_property alphadatamapping , "none|direct|{scaled}"
       double_property ambientstrength , 0.3
       radio_property backfacelighting , "unlit|lit|{reverselit}"
       double_property diffusestrength , 0.6
-      double_radio_property edgeealpha , double_radio_property (1.0, radio_values ("flat|interp"))
+      double_radio_property edgealpha , double_radio_property (1.0, radio_values ("flat|interp"))
       radio_property edgelighting , "{none}|flat|gouraud|phong"
       radio_property erasemode , "{normal}|none|xor|background"
       radio_property facelighting , "{none}|flat|gouraud|phong"
       radio_property meshstyle , "{both}|row|column"
       radio_property normalmode u , "{auto}|manual"
       double_property specularcolorreflectance , 1
       double_property specularexponent , 10
       double_property specularstrength , 0.9
diff --git a/src/graphics/ChangeLog b/src/graphics/ChangeLog
--- a/src/graphics/ChangeLog
+++ b/src/graphics/ChangeLog
@@ -1,8 +1,14 @@
+2008-02-27  Michael Goffioul  <michael.goffioul@gmail.com>
+
+	* opengl/gl-render.cc (opengl_renderer::draw(patch),
+	opengl_renderer::draw(surface)): Adapt to type change of facealpha and
+	edgealpha, using double_radio_property class.
+
 2008-02-26  Michael Goffioul  <michael.goffioul@gmail.com>
 
 	* opengl/gl-render.h: Make sure windows.h is included before OpenGL
 	headers.
 	* fltk_backend/Makefile.in (FLTK_EXTRA_CXXFLAGS): Use $(srcdir) for
 	includesion of OpenGL renderer headers.
 	(Makeconf): Move inclusion of Makeconf later on, to avoid freezing
 	MinGW make.
diff --git a/src/graphics/opengl/gl-render.cc b/src/graphics/opengl/gl-render.cc
--- a/src/graphics/opengl/gl-render.cc
+++ b/src/graphics/opengl/gl-render.cc
@@ -1694,25 +1694,25 @@ opengl_renderer::draw (const surface::pr
     warning ("opengl_renderer::draw: phong light model not supported");
 
   int fc_mode = (props.facecolor_is_rgb () ? 0 :
 		 (props.facecolor_is ("flat") ? 1 :
 		  (props.facecolor_is ("interp") ? 2 :
 		   (props.facecolor_is ("texturemap") ? 3 : -1))));
   int fl_mode = (props.facelighting_is ("none") ? 0 :
 		 (props.facelighting_is ("flat") ? 1 : 2));
-  // FIXME: use facealpha as double-radio property
-  int fa_mode = 0;
+  int fa_mode = (props.facealpha_is_double () ? 0 :
+		 (props.facealpha_is ("flat") ? 1 : 2));
   int ec_mode = (props.edgecolor_is_rgb () ? 0 :
 		 (props.edgecolor_is ("flat") ? 1 :
 		  (props.edgecolor_is ("interp") ? 2 : -1)));
   int el_mode = (props.edgelighting_is ("none") ? 0 :
 		 (props.edgelighting_is ("flat") ? 1 : 2));
-  // FIXME: use edgealpha as double-radio property
-  int ea_mode = 0;
+  int ea_mode = (props.edgealpha_is_double () ? 0 :
+		 (props.edgealpha_is ("flat") ? 1 : 2));
 
   Matrix fcolor = (fc_mode == 3 ? Matrix (1, 3, 1.0) : props.get_facecolor_rgb ());
   Matrix ecolor = props.get_edgecolor_rgb ();
 
   float as = props.get_ambientstrength ();
   float ds = props.get_diffusestrength ();
   float ss = props.get_specularstrength ();
   float se = props.get_specularexponent ();
@@ -1761,18 +1761,17 @@ opengl_renderer::draw (const surface::pr
 
   // FIXME: good candidate for caching, transfering pixel
   // data to OpenGL is time consuming.
   if (fc_mode == 3)
     tex = opengl_texture::create (props.get_color_data ());
 
   if (! props.facecolor_is ("none"))
     {
-      // FIXME: adapt to double-radio property type
-      if (props.get_facealpha () == 1)
+      if (props.get_facealpha_double () == 1)
 	{
 	  if (fc_mode == 0 || fc_mode == 3)
 	    {
 	      glColor3dv (fcolor.data ());
 	      if (fl_mode > 0)
 		{
 		  for (int i = 0; i < 3; i++)
 		    cb[i] = (as * fcolor(i));
@@ -1924,18 +1923,17 @@ opengl_renderer::draw (const surface::pr
       else
 	{
 	  // FIXME: implement transparency
 	}
     }
 
   if (! props.edgecolor_is ("none"))
     {
-      // FIXME: adapt to double-radio property
-      if (props.get_edgealpha () == 1)
+      if (props.get_edgealpha_double () == 1)
 	{
 	  if (ec_mode == 0)
 	    {
 	      glColor3dv (ecolor.data ());
 	      if (fl_mode > 0)
 		{
 		  for (int i = 0; i < 3; i++)
 		    cb[i] = (as * ecolor(i));
@@ -2196,24 +2194,24 @@ opengl_renderer::draw (const patch::prop
   bool has_z = (v.columns () > 2);
   bool has_facecolor = false;
   bool has_facealpha = false;
 
   int fc_mode = (props.facecolor_is_rgb () ? 0 :
 		 (props.facecolor_is("flat") ? 1 : 2));
   int fl_mode = (props.facelighting_is ("none") ? 0 :
 		 (props.facelighting_is ("flat") ? 1 : 2));
-  // FIXME: use facealpha as to double-radio property
-  int fa_mode = 0;
+  int fa_mode = (props.facealpha_is_double () ? 0 :
+		 (props.facealpha_is ("flat") ? 1 : 2));
   int ec_mode = (props.edgecolor_is_rgb () ? 0 :
 		 (props.edgecolor_is("flat") ? 1 : 2));
   int el_mode = (props.edgelighting_is ("none") ? 0 :
 		 (props.edgelighting_is ("flat") ? 1 : 2));
-  // FIXME: use edgealpha as to double-radio property
-  int ea_mode = 0;
+  int ea_mode = (props.edgealpha_is_double () ? 0 :
+		 (props.edgealpha_is ("flat") ? 1 : 2));
 
   Matrix fcolor = props.get_facecolor_rgb ();
   Matrix ecolor = props.get_edgecolor_rgb ();
   
   float as = props.get_ambientstrength ();
   float ds = props.get_diffusestrength ();
   float ss = props.get_specularstrength ();
   float se = props.get_specularexponent ();
@@ -2318,17 +2316,17 @@ opengl_renderer::draw (const patch::prop
 
       glMaterialfv (LIGHT_MODE, GL_SPECULAR, buf);
       glMaterialf (LIGHT_MODE, GL_SHININESS, se);
     }
 
   if (! props.facecolor_is ("none"))
     {
       // FIXME: adapt to double-radio property
-      if (props.get_facealpha () == 1)
+      if (props.get_facealpha_double () == 1)
 	{
 	  if (fc_mode == 0)
 	    {
 	      glColor3dv (fcolor.data ());
 	      if (fl_mode > 0)
 		{
 		  float cb[4] = { 0, 0, 0, 1 };
 
@@ -2374,17 +2372,17 @@ opengl_renderer::draw (const patch::prop
 	{
 	  // FIXME: implement transparency
 	}
     }
 
   if (! props.edgecolor_is ("none"))
     {
       // FIXME: adapt to double-radio property
-      if (props.get_edgealpha () == 1)
+      if (props.get_edgealpha_double () == 1)
 	{
 	  if (ec_mode == 0)
 	    {
 	      glColor3dv (ecolor.data ());
 	      if (el_mode > 0)
 		{
 		  float cb[4] = { 0, 0, 0, 1 };
 
