# HG changeset patch
# User jwe
# Date 1174927907 0
#      Mon Mar 26 16:51:47 2007 +0000
# Node ID a58b5981ab6582093e601b13b63628a5001b628d
# Parent  7f5316cadaa24cbfa6fe2020975275f4b3ca293f
[project @ 2007-03-26 16:51:46 by jwe]

diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,13 @@
+2007-03-26  David Bateman  <dbateman@free.fr>
+
+	* Range.cc (Range::all_elements_are_ints): Improve check.
+	* 
+
 2007-03-26  John W. Eaton  <jwe@octave.org>
 
 	* chNDArray.cc, chMatrix.cc: Also generate comparison and bool ops.
 	* chNDArray.h, chMatrix.h: Provide decls.
 
 2007-03-24  Luis Ortiz  <lortiz@interactivesupercomputing.com>
 
 	* MatrixType.cc (MatrixType::MatrixType (void)): Initialize
diff --git a/liboctave/Range.cc b/liboctave/Range.cc
--- a/liboctave/Range.cc
+++ b/liboctave/Range.cc
@@ -34,21 +34,22 @@ 02110-1301, USA.
 #include "Range.h"
 #include "lo-mappers.h"
 #include "lo-utils.h"
 
 bool
 Range::all_elements_are_ints (void) const
 {
   // If the base and increment are ints, the final value in the range
-  // will also be an integer, even if the limit is not.
+  // will also be an integer, even if the limit is not. If there is one
+  // or fewer elements only the base needs to be an integer
 
   return (! (xisnan (rng_base) || xisnan (rng_inc))
-	  && NINTbig (rng_base) == rng_base
-	  && NINTbig (rng_inc) == rng_inc);
+	  && (NINTbig (rng_base) == rng_base || rng_nelem < 1)
+	  && (NINTbig (rng_inc) == rng_inc || rng_nelem <= 1));
 }
 
 Matrix
 Range::matrix_value (void) const
 {
   if (rng_nelem > 0 && cache.rows () == 0)
     {
       cache.resize (1, rng_nelem);
diff --git a/liboctave/idx-vector.cc b/liboctave/idx-vector.cc
--- a/liboctave/idx-vector.cc
+++ b/liboctave/idx-vector.cc
@@ -178,37 +178,35 @@ IDX_VEC_REP::idx_vector_rep (const Range
       return;
     }
   else if (len == 0)
     {
       initialized = 1;
       return;
     }
 
-  double b = r.base ();
-  double step = r.inc ();
-
   data = new octave_idx_type [len];
 
-  bool conversion_error = false;
+  // If all elements are ints, we can generate the indexes as integers 
+  // and save tons of tests.
 
-  for (octave_idx_type i = 0; i < len; i++)
-    {
-      double val = b + i * step;
+  if (r.all_elements_are_ints ())
+    {    
+      octave_idx_type b = static_cast<octave_idx_type> (r.base ());
+      octave_idx_type step = static_cast<octave_idx_type> (r.inc ());
 
-      if (idx_is_inf_or_nan (val))
-	return;
-      else
-	data[i] = tree_to_mat_idx (val, conversion_error);
+      data[0] = b - 1;
+      for (octave_idx_type i = 1; i < len; i++)
+	data[i] = data[i-1] + step;
 
-      if (conversion_error)
-	return;
+      init_state ();
     }
-
-  init_state ();
+  else
+    (*current_liboctave_error_handler)
+      ("expecting integer index, found non integer Range");
 }
 
 IDX_VEC_REP::idx_vector_rep (double d)
   : data (0), len (1), num_zeros (0), num_ones (0),
     max_val (0), min_val (0), count (1), frozen_at_z_len (0),
     frozen_len (0), colon (0), one_zero (0), initialized (0),
     frozen (0), colon_equiv_checked (0), colon_equiv (0),
     orig_dims (1, 1)
