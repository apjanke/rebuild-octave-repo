# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1256837763 14400
#      Thu Oct 29 13:36:03 2009 -0400
# Node ID 5f8971be8e1295d0ad7150fb5bc6ef7c8f5f5fea
# Parent  c6b97d21834586a2948f86e830dec67315266cbc
parse.y (finish_function): retrun function object unless parsing function file

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,13 @@
+2009-10-29  John W. Eaton  <jwe@octave.org>
+
+	* parse.y (finish_function): Return function object unless parsing
+	function file.
+
 2009-10-23  Jaroslav Hajek  <highegg@gmail.com>
 
 	* DLD-FUNCTIONS/tril.cc: New source.
 	* Makefile.in: Include it.
 
 2009-10-22  Jaroslav Hajek  <highegg@gmail.com>
 
 	* error.cc (verror (bool, std::ostream&, ..., bool)): Add optional
diff --git a/src/parse.y b/src/parse.y
--- a/src/parse.y
+++ b/src/parse.y
@@ -2953,23 +2953,28 @@ finish_function (tree_parameter_list *re
           // FIXME -- is this flag used to determine if the function is a
           // _subfunction_ somewhere?
 	  fcn->mark_as_nested_function ();
 
 	  symbol_table::install_subfunction (nm, octave_value (fcn),
 					     primary_fcn_scope);
 	}
 
-      if (! primary_fcn_ptr)
+      if (! reading_fcn_file)
 	{
-	  // FIXME -- there should be a better way to indicate that we
-	  // should create a tree_function_def object other than
-	  // looking at primary_fcn_ptr...
-
-	  retval = new tree_function_def (fcn);
+	  // We are either reading a script file or defining a function
+	  // at the command line, so this definition creates a
+	  // tree_function object that is placed in the parse tree.
+	  // Otherwise, it is just inserted in the symbol table,
+	  // either as a subfunction (see above), or as the primary
+	  // function for the file, via primary_fcn_ptr (see also
+	  // load_fcn_from_file,, parse_fcn_file, and
+	  // symbol_table::fcn_info::fcn_info_rep::find_user_function).
+
+          retval = new tree_function_def (fcn);
 	}
 
       // Unmark any symbols that may have been tagged as local
       // variables while parsing (for example, by force_local_variable
       // in lex.l).
 
       symbol_table::unmark_forced_variables (fcn->scope ());
     }
