# HG changeset patch
# User Jordi Guti√©rrez Hermoso <jordigh@gmail.com>
# Date 1313048496 18000
#      Thu Aug 11 02:41:36 2011 -0500
# Node ID d1db86336a4905e255b43d64df66fd4648b9cb4e
# Parent  61fba96cb4821412734db7803e8edbc10118354f
cellfun.cc (cellfun): Small optimisation for function handles to built-ins

diff --git a/src/DLD-FUNCTIONS/cellfun.cc b/src/DLD-FUNCTIONS/cellfun.cc
--- a/src/DLD-FUNCTIONS/cellfun.cc
+++ b/src/DLD-FUNCTIONS/cellfun.cc
@@ -217,16 +217,17 @@ cellfun (\"factorial\", @{-1,2@}, 'Error
   if (nargin < 2)
     {
       error ("cellfun: function requires at least 2 arguments");
       print_usage ();
       return retval;
     }
 
   octave_value func = args(0);
+  bool symbol_table_lookup = false;
 
   if (! args(1).is_cell ())
     {
       error ("cellfun: C must be a cell array");
 
       return retval;
     }
 
@@ -334,26 +335,41 @@ cellfun (\"factorial\", @{-1,2@}, 'Error
               if (ptr_func && ! error_state)
                 func = octave_value (ptr_func, true);
             }
           else
             {
               func = symbol_table::find_function (name);
               if (func.is_undefined ())
                 error ("cellfun: invalid function NAME: %s", name.c_str ());
+
+              symbol_table_lookup = true;
             }
         }
     }
 
   if (error_state || ! retval.empty ())
     return retval;
 
   if (func.is_function_handle () || func.is_inline_function ()
       || func.is_function ())
     {
+
+      // The following is an optimisation because the symbol table can
+      // give a more specific function class, so this can result in
+      // fewer polymorphic function calls as the function gets called
+      // for each value of the array.
+      if (! symbol_table_lookup )
+        {
+          octave_value f = symbol_table::find_function ( func.function_value ()
+                                                         -> name ());
+          if (f.is_defined ())
+            func = f;
+        }
+
       unwind_protect frame;
       frame.protect_var (buffer_error_messages);
 
       bool uniform_output = true;
       octave_value error_handler;
 
       while (nargin > 3 && args(nargin-2).is_string())
         {
