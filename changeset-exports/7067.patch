# HG changeset patch
# User jwe
# Date 1193295437 0
#      Thu Oct 25 06:57:17 2007 +0000
# Node ID 88417316c1b00e91aa9abb215c74a94ce0cc8277
# Parent  7773c0fdefa6147640b97d400e78bebc920ad7ac
[project @ 2007-10-25 06:57:16 by jwe]

diff --git a/ChangeLog b/ChangeLog
--- a/ChangeLog
+++ b/ChangeLog
@@ -1,8 +1,12 @@
+2007-10-25  John W. Eaton  <jwe@octave.org>
+
+	* configure.in (AH_BOTTOM): Define OCTAVE_EMPTY_CPP_ARG here.
+
 2007-10-24  John W. Eaton  <jwe@octave.org>
 
 	* octMakefile.in (maintainer-clean distclean): No need to delete
 	Makefrag.f77 and Makerules.f77.
 	* Makeconf.in: Include rules for making .o files from .f files
 	instead of substituting @f77_rules_frag@.  
 	* configure.in): Delete handling of --with-f2c and --with-f77
 	options.  No need to call OCTAVE_CHECK_EXCLUSIVE_WITH_OPTIONS.
diff --git a/configure.in b/configure.in
--- a/configure.in
+++ b/configure.in
@@ -24,17 +24,17 @@ dnl               2002, 2003, 2004, 2005
 ### Preserve CFLAGS and CXXFLAGS from the environment before doing
 ### anything else because we don't know which macros might call
 ### AC_PROG_CC or AC_PROG_CXX.
 
 EXTERN_CFLAGS="$CFLAGS"
 EXTERN_CXXFLAGS="$CXXFLAGS"
 
 AC_INIT
-AC_REVISION($Revision: 1.587 $)
+AC_REVISION($Revision: 1.588 $)
 AC_PREREQ(2.57)
 AC_CONFIG_SRCDIR([src/octave.cc])
 AC_CONFIG_HEADER(config.h)
 
 OCTAVE_HOST_TYPE
 
 AC_DEFINE(OCTAVE_SOURCE, 1, [Define if this is Octave.])
   
@@ -1885,16 +1885,18 @@ typedef int sig_atomic_t;
 #endif
 
 #ifdef USE_64_BIT_IDX_T
 #define SIZEOF_OCTAVE_IDX_TYPE 8
 #else
 #define SIZEOF_OCTAVE_IDX_TYPE SIZEOF_INT
 #endif
 
+#define OCTAVE_EMPTY_CPP_ARG
+
 #include "oct-dlldefs.h"
 #include "oct-types.h"
 ])
 
 ### Do the substitutions in all the Makefiles.
 
 AC_CONFIG_FILES([Makefile octMakefile Makeconf test/Makefile \
   dlfcn/Makefile doc/Makefile doc/faq/Makefile doc/interpreter/Makefile 
diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,8 +1,13 @@
+2007-10-25  Søren Hauberg  <hauberg@gmail.com>
+
+	* set/ismember.m: Improve handling of cell arrays.
+        Improve error handling.  New output arg INDEX.
+
 2007-10-24  John W. Eaton  <jwe@octave.org>
 
 	* image/saveimage.m: Use functional form of save instead of eval.
 	Use -text instead of -ascii.
 
 	* plot/__go_draw_axes__.m: Handle visible = "off" for axes objects.
 
 2007-10-23  Peter A. Gustafson  <petegus@umich.edu>
diff --git a/scripts/set/ismember.m b/scripts/set/ismember.m
--- a/scripts/set/ismember.m
+++ b/scripts/set/ismember.m
@@ -12,68 +12,77 @@
 ## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
-## @deftypefn {Function File} {} ismember (@var{A}, @var{S})
-## Return a matrix the same shape as @var{A} which has 1 if
-## @code{A(i,j)} is in @var{S} or 0 if it isn't.
+## @deftypefn {Function File} [@var{bool}, @var{index}] = ismember (@var{a}, @var{s})
+## Return a matrix @var{bool} the same shape as @var{a} which has 1 if
+## @code{a(i,j)} is in @var{s} or 0 if it isn't. If a second output argument
+## is requested, the indexes into @var{s} of the matching elements is
+## also returned.
 ## @seealso{unique, union, intersection, setxor, setdiff}
 ## @end deftypefn
 
 ## Author: Paul Kienzle
 ## Adapted-by: jwe
 
-function c = ismember (a, S)
+function [c, index] = ismember (a, s)
 
   if (nargin != 2)
     print_usage ();
   endif
 
-  if (isempty (a) || isempty (S))
+  ## Convert char matrices to cell arrays.
+  if (ischar (a))
+    a = cellstr (a);
+  endif
+  if (ischar (s))
+    s = cellstr (s);
+  endif
+  
+  ## Input checking.
+  if (! isa (a, class (s)))
+    error ("ismember: both input arguments must be the same type");
+  endif
+
+  if (iscell (a) && ! iscellstr (a))
+    error ("ismember: cell arrays may only contain strings");
+  endif
+
+  if (! isnumeric(a) && ! iscell (a))
+    error ("ismember: input arguments must be arrays, cell arrays, or strings");
+  endif
+  
+  ## Do the actual work.
+  if (isempty (a) || isempty (s))
     c = zeros (size (a), "logical");
   else
-    if (iscell (a) && ! iscell (S))
-      tmp{1} = S;
-      S = tmp;
-    endif
-    if (! iscell (a) && iscell (S))
-      tmp{1} = a;
-      a = tmp;
-    endif
-    S = unique (S(:));
-    lt = length (S);
-    if (lt == 1)
-      if (iscell (a) || iscell (S))
-        c = cellfun ("length", a) == cellfun ("length", S);
-        idx = find (c);
-	if (isempty (idx))
-	  c = zeros (size (a), "logical");
-	else
-	  c(idx) = all (char (a(idx)) == repmat (char (S), length (idx), 1), 2);
-	endif
+    if (numel (s) == 1)
+      if (iscell (a))
+        c = strcmp (a, s);
       else
-        c = (a == S);
+	## Both A and S are matrices.
+        c = (a == s);
       endif
+      index = double (c);
     elseif (numel (a) == 1)
-      if (iscell (a) || iscell (S))
-        c = cellfun ("length", a) == cellfun ("length", S);
-        idx = find (c);
-	if (isempty (idx))
-	  c = zeros (size (a), "logical");
-	else
-          c(idx) = all (repmat (char (a), length (idx), 1) == char (S(idx)), 2);
-          c = any(c);
-	endif
+      if (iscell (a))
+        f = find (strcmp (a, s), 1);
       else
-        c = any (a == S);
+	## Both A and S are matrices.
+        f = find (a == s, 1);
+      endif
+      c = ! isempty (f);
+      index = f;
+      if (isempty (index))
+	index = 0;
       endif
     else
       ## Magic:  the following code determines for each a, the index i
       ## such that S(i)<= a < S(i+1).  It does this by sorting the a
       ## into S and remembering the source index where each element came
       ## from.  Since all the a's originally came after all the S's, if 
       ## the source index is less than the length of S, then the element
       ## came from S.  We can then do a cumulative sum on the indices to
@@ -95,36 +104,43 @@ function c = ismember (a, S)
       ##    cumsum(p<=l(S)-1) = [ 0 0 0 1 1 1 2 2 2 ]
       ## Now we can use Octave's lvalue indexing to "invert" the sort,
       ## and assign all these indices back to the appropriate A and S,
       ## giving S_idx = [ -- 1 2], a_idx = [ 0 0 0 1 1 2 2 ].  Add 1 to
       ## a_idx, and we know which interval S(i) contains a.  It is
       ## easy to now check membership by comparing S(a_idx) == a.  This
       ## magic works because S starts out sorted, and because sort
       ## preserves the relative order of identical elements.
-      [v, p] = sort ([S(2:lt); a(:)]);
+      lt = length (s);
+      [s, sidx] = sort (s);
+      [v, p] = sort ([s(2:lt); a(:)]);
       idx(p) = cumsum (p <= lt-1) + 1;
       idx = idx(lt:end);
-      if (iscell (a) || iscell (S))
+      if (iscell (a) || iscell (s))
         c = (cellfun ("length", a)
-	     == reshape (cellfun ("length", S(idx)), size (a)));
+             == reshape (cellfun ("length", s(idx)), size (a)));
         idx2 = find (c);
-        c(idx2) = all (char (a(idx2)) == char (S(idx)(idx2)), 2);
+        c(idx2) = all (char (a(idx2)) == char (s(idx)(idx2)), 2);
+        index = zeros (size (c));
+        index(c) = sidx(idx(c));
       else
-        c = (a == reshape (S (idx), size (a)));
+	## Both A and S are matrices.
+         c = (a == reshape (s (idx), size (a)));
+        index = zeros (size (c));
+        index(c) = sidx(idx(c));
       endif
     endif
   endif
 
 endfunction
 
 %!assert (ismember ({''}, {'abc', 'def'}), false);
 %!assert (ismember ('abc', {'abc', 'def'}), true);
 %!assert (isempty (ismember ([], [1, 2])), true);
 %!xtest assert (ismember ('', {'abc', 'def'}), false);
-%!xtest fail ('ismember ([], {1, 2})', 'error:.*');
+%!fail ('ismember ([], {1, 2})', 'error:.*');
 %!fail ('ismember ({[]}, {1, 2})', 'error:.*');
 %!assert (ismember ({'foo', 'bar'}, {'foobar'}), logical ([0, 0]))
 %!assert (ismember ({'foo'}, {'foobar'}), false)
 %!assert (ismember ({'bar'}, {'foobar'}), false)
 %!assert (ismember ({'bar'}, {'foobar', 'bar'}), true)
 %!assert (ismember ({'foo', 'bar'}, {'foobar', 'bar'}), logical ([0, 1]))
 %!assert (ismember ({'xfb', 'f', 'b'}, {'fb', 'b'}), logical ([0, 0, 1]))
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,10 +1,12 @@
 2007-10-25  John W. Eaton  <jwe@octave.org>
 
+	* symtab.h (symbol_record::TYPE): Delete trailing comma in enum decl.
+
 	* ov-base.h (DECLARE_OV_TYPEID_FUNCTIONS_AND_DATA): Use
 	OCTAVE_EMPTY_CPP_ARG to avoid annoying Sun compiler warning.
 
 	* Makefile.in (graphics.h): Use $(AWK) instead of awk.
 
 	* DLD-FUNCTIONS/time.cc (Ftime, Fmktime): Avoid unnecessary cast.
 
 	* data.cc (Ftic, Ftoc): Call double_value on octave_time objects
diff --git a/src/ov-base.h b/src/ov-base.h
--- a/src/ov-base.h
+++ b/src/ov-base.h
@@ -55,20 +55,19 @@ class octave_fcn_handle;
 class octave_fcn_inline;
 class octave_value_list;
 class octave_lvalue;
 
 class tree_walker;
 
 // T_ID is the type id of struct objects, set by register_type().
 // T_NAME is the type name of struct objects.
-#define OCTAVE_EMPTY_CPP_ARG
+
 #define DECLARE_OV_TYPEID_FUNCTIONS_AND_DATA \
   DECLARE_OV_TYPEID_FUNCTIONS_AND_DATA2 (OCTAVE_EMPTY_CPP_ARG)
-#undef OCTAVE_EMPTY_CPP_ARG
 
 #define DECLARE_OV_BASE_TYPEID_FUNCTIONS_AND_DATA \
   DECLARE_OV_TYPEID_FUNCTIONS_AND_DATA2(virtual)
 
 #define DECLARE_OV_TYPEID_FUNCTIONS_AND_DATA2(VIRTUAL) \
   public: \
     VIRTUAL int type_id (void) const { return t_id; } \
     VIRTUAL std::string type_name (void) const { return t_name; } \
diff --git a/src/symtab.h b/src/symtab.h
--- a/src/symtab.h
+++ b/src/symtab.h
@@ -71,17 +71,17 @@ public:
       UNKNOWN = 0,
       USER_FUNCTION = 1,
       USER_VARIABLE = 2,
       DLD_FUNCTION = 4,
       BUILTIN_FUNCTION = 8,
       COMMAND = 16,
       RAWCOMMAND = 32,
       MAPPER_FUNCTION = 64,
-      MEX_FUNCTION = 128,
+      MEX_FUNCTION = 128
     };
 
 private:
 
   // Variables or functions.
 
   class symbol_def
   {
