# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1539631656 14400
#      Mon Oct 15 15:27:36 2018 -0400
# Node ID a00379f6f8c4d87d2ccf036b07545c85b7d86e37
# Parent  ea5182364e5f36d1222a18ed2ee73551b8d7e400
* fminsearch.m: Accept problem structure for Matlab compatibility.

diff --git a/scripts/optimization/fminsearch.m b/scripts/optimization/fminsearch.m
--- a/scripts/optimization/fminsearch.m
+++ b/scripts/optimization/fminsearch.m
@@ -16,16 +16,17 @@
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <https://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {} {@var{x} =} fminsearch (@var{fun}, @var{x0})
 ## @deftypefnx {} {@var{x} =} fminsearch (@var{fun}, @var{x0}, @var{options})
 ## @deftypefnx {} {@var{x} =} fminsearch (@var{fun}, @var{x0}, @var{options}, @var{fun_arg1}, @var{fun_arg2}, @dots{})
+## @deftypefnx {} {@var{x} =} fminsearch (@var{problem})
 ## @deftypefnx {} {[@var{x}, @var{fval}, @var{exitflag}, @var{output}] =} fminsearch (@dots{})
 ##
 ## Find a value of @var{x} which minimizes the multi-variable function
 ## @var{fun}.
 ##
 ## The search begins at the point @var{x0} and iterates using the
 ## @nospell{Nelder & Mead} Simplex algorithm (a derivative-free method).  This
 ## algorithm is better-suited to functions which have discontinuities or for
@@ -49,16 +50,37 @@
 ## For a description of the other options, see @code{optimset}.  To initialize
 ## an options structure with default values for @code{fminsearch} use
 ## @code{options = optimset ("fminsearch")}.
 ##
 ## Additional inputs for the function @var{fun} can be passed as the fourth
 ## and higher arguments.  To pass function arguments while using the default
 ## @var{options} values, use @code{[]} for @var{options}.
 ##
+## @code{fminsearch} may also be called with a single structure argument
+## with the following fields:
+##
+## @table @code
+## @item objective
+## The objective function.
+##
+## @item x0
+## The initial point.
+##
+## @item solver
+## Must be set to @qcode{"fminsearch"}.
+##
+## @item options
+## A structure returned from @code{optimset} or an empty matrix to
+## indicate that defaults should be used.
+## @end table
+##
+## @noindent
+## The field @code{options} is optional.  All others are required.
+##
 ## On exit, the function returns @var{x}, the minimum point, and @var{fval},
 ## the function value at the minimum.
 ##
 ## The third output @var{exitflag} reports whether the algorithm succeeded and
 ## may take one of the following values:
 ##
 ## @table @asis
 ## @item 1
@@ -93,32 +115,60 @@
 ## @seealso{fminbnd, fminunc, optimset}
 ## @end deftypefn
 
 ## PKG_ADD: ## Discard result to avoid polluting workspace with ans at startup.
 ## PKG_ADD: [~] = __all_opts__ ("fminsearch");
 
 ## FIXME: Add support for output function with "state" set to "interrupt".
 
-function [x, fval, exitflag, output] = fminsearch (fun, x0, options, varargin)
+function [x, fval, exitflag, output] = fminsearch (varargin)
+
+  if (nargin < 1)
+    print_usage ();
+  endif
 
   ## Get default options if requested.
-  if (nargin == 1 && ischar (fun) && strcmp (fun, "defaults"))
+  if (nargin == 1 && ischar (varargin{1}) && strcmp (varargin{1}, "defaults"))
     x = optimset ("Display", "notify", "FunValCheck", "off",
                   "MaxFunEvals", [], "MaxIter", [],
                   "OutputFcn", [],
                   "TolFun", 1e-4, "TolX", 1e-4);
     return;
   endif
 
-  if (nargin < 2)
-    print_usage ();
+  if (nargin == 1)
+    problem = varargin{1};
+    varargin = {};
+    if (! isstruct (problem))
+      error ("fminsearch: PROBLEM must be a structure");
+    endif
+    fun = problem.objective;
+    x0 = problem.x0;
+    if (! strcmp (problem.solver, "fminsearch"))
+      error ('fminsearch: problem.solver must be set to "fminsearch"');
+    endif
+    if (isfield (problem, "options"))
+      options = problem.options;
+    else
+      options = [];
+    endif
+  elseif (nargin > 1)
+    fun = varargin{1};
+    x0 = varargin{2};
+    if (nargin > 2)
+      options = varargin{3};
+      varargin(1:3) = [];
+    else
+      options = [];
+      varargin = {};
+    endif
   endif
 
-  if (nargin < 3 || isempty (options))
+  if (isempty (options))
     options = struct ();
   endif
 
   [x, exitflag, output] = nmsmax (fun, x0, options, varargin{:});
 
   if (isargout (2))
     fval = feval (fun, x);
   endif
@@ -222,17 +272,17 @@ function [x, exitflag, output] = nmsmax 
   endif
 
   x0 = x(:);  # Work with column vector internally.
   n = length (x0);
 
   V = [zeros(n,1) eye(n)];
   f = zeros (n+1,1);
   V(:,1) = x0;
-  f(1) = dirn * feval (fun, x, varargin{:});
+  f(1) = dirn * fun (x, varargin{:});
   fmax_old = f(1);
   nf = 1;
 
   if (trace == 1)
     printf ("f(x0) = %9.4e\n", f(1));
   endif
 
   k = 0; m = 0;
@@ -467,16 +517,27 @@ endfunction
 ##        may fail.  Just adapt the values to make it pass again.
 %!test
 %! x = fminsearch (@sin, 3, optimset ("MaxIter", 3, "Display", "none"));
 %! assert (x, 4.8750, 1e-4);
 %! x = fminsearch (@sin, 3, optimset ("MaxFunEvals", 18, "Display", "none"));
 %! assert (x, 4.7109, 1e-4);
 
 %!test
+%! problem.objective = @sin;
+%! problem.x0 = 3;
+%! problem.solver = "fminsearch";
+%! problem.options = optimset ("MaxIter", 3, "Display", "none")
+%! x = fminsearch (problem);
+%! assert (x, 4.8750, 1e-4);
+%! problem.options = optimset ("MaxFunEvals", 18, "Display", "none")
+%! x = fminsearch (problem);
+%! assert (x, 4.7109, 1e-4);
+
+%!test
 %! c = 1.5;
 %! assert (fminsearch (@(x) x(1).^2 + c*x(2).^2, [1;1]), [0;0], 1e-4);
 
 ## additional input argument
 %!test
 %! x1 = fminsearch (@(x, c) x(1).^2 + c*x(2).^2, [1;1], [], 1.5);
 %! assert (x1, [0;0], 1e-4);
 %! x1 = fminsearch (@(x, c) c(1)*x(1).^2 + c(2)*x(2).^2, [1;1], ...
