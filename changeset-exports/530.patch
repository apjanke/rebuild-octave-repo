# HG changeset patch
# User jwe
# Date 774732393 0
#      Wed Jul 20 19:26:33 1994 +0000
# Node ID c3268005bf98e8439d46fc084d1d7c226f2b3537
# Parent  7ea224e713cd98e2327927cec9a57c466352592f
[project @ 1994-07-20 19:26:33 by jwe]

diff --git a/src/symtab.cc b/src/symtab.cc
--- a/src/symtab.cc
+++ b/src/symtab.cc
@@ -1,9 +1,9 @@
-// Symbol table classes.                              -*- C++ -*-
+// symtab.cc                                            -*- C++ -*-
 /*
 
 Copyright (C) 1992, 1993, 1994 John W. Eaton
 
 This file is part of Octave.
 
 Octave is free software; you can redistribute it and/or modify it
 under the terms of the GNU General Public License as published by the
@@ -48,105 +48,117 @@ symbol_def::symbol_def (void)
 
 symbol_def::symbol_def (tree_constant *t)
 {
   init_state ();
   definition = t;
   type = USER_VARIABLE;
 }
 
-symbol_def::symbol_def (tree_builtin *t)
+symbol_def::symbol_def (tree_builtin *t, unsigned fcn_type)
 {
   init_state ();
   definition = t;
-  type = BUILTIN_FUNCTION;
+  type = BUILTIN_FUNCTION | fcn_type;
 }
 
-symbol_def::symbol_def (tree_function *t)
+symbol_def::symbol_def (tree_function *t, unsigned fcn_type)
 {
   init_state ();
   definition = t;
-  type = USER_FUNCTION;
+  type = USER_FUNCTION | fcn_type;
 }
 
 void
 symbol_def::init_state (void)
 {
   type = UNKNOWN;
   eternal = 0;
   read_only = 0;
 
-  help_string = (char *) NULL;
-  definition = (tree_fvc *) NULL;
-  next_elem = (symbol_def *) NULL;
+  help_string = 0;
+  definition = 0;
+  next_elem = 0;
   count = 0;
 }
 
 symbol_def::~symbol_def (void)
 {
   delete [] help_string;
   delete definition;
 }
 
 int
 symbol_def::is_variable (void) const
 {
-  return (type == USER_VARIABLE || type == BUILTIN_VARIABLE);
+  return (type & USER_VARIABLE || type & BUILTIN_VARIABLE);
 }
 
 int
 symbol_def::is_function (void) const
 {
-  return (type == USER_FUNCTION || type == BUILTIN_FUNCTION);
+  return (type & USER_FUNCTION || type & BUILTIN_FUNCTION);
 }
 
 int
 symbol_def::is_user_variable (void) const
 {
-  return (type == USER_VARIABLE);
+  return (type & USER_VARIABLE);
+}
+
+int
+symbol_def::is_text_function (void) const
+{
+  return (type & TEXT_FUNCTION);
+}
+
+int
+symbol_def::is_mapper_function (void) const
+{
+  return (type & MAPPER_FUNCTION);
 }
 
 int
 symbol_def::is_user_function (void) const
 {
-  return (type == USER_FUNCTION);
+  return (type & USER_FUNCTION);
 }
 
 int
 symbol_def::is_builtin_variable (void) const
 {
-  return (type == BUILTIN_VARIABLE);
+  return (type & BUILTIN_VARIABLE);
 }
 
 int
 symbol_def::is_builtin_function (void) const
 {
-  return (type == BUILTIN_FUNCTION);
+  return (type & BUILTIN_FUNCTION);
 }
 
 void
 symbol_def::define (tree_constant *t)
 {
   definition = t;
   if (! is_builtin_variable ())
     type = USER_VARIABLE;
 }
 
 void
-symbol_def::define (tree_builtin *t)
+symbol_def::define (tree_builtin *t, unsigned fcn_type)
 {
   definition = t;
-  type = BUILTIN_FUNCTION;
+  type = BUILTIN_FUNCTION | fcn_type;
 }
 
 void
-symbol_def::define (tree_function *t)
+symbol_def::define (tree_function *t, unsigned fcn_type)
 {
   definition = t;
-  type = USER_FUNCTION;
+  type = USER_FUNCTION | fcn_type;
 }
 
 void
 symbol_def::protect (void)
 {
   read_only = 1;
 }
 
@@ -187,205 +199,177 @@ symbol_def::save (ostream& os, int mark_
 {
   return definition->save (os, mark_as_global, precision);
 }
 
 int
 maybe_delete (symbol_def *def)
 {
   int count = 0;
-  if (def != (symbol_def *) NULL)
+  if (def && def->count > 0)
     {
-      if (def->count > 0)
-	{
-	  def->count--;
-	  count = def->count;
-	  if (def->count == 0)
-	    delete def;
-	}
+      def->count--;
+      count = def->count;
+      if (def->count == 0)
+	delete def;
     }
   return count;
 }
 
 /*
  * Individual records in a symbol table.
  */
 symbol_record::symbol_record (void)
 {
   init_state ();
 }
 
-symbol_record::symbol_record (const char *n,
-			      symbol_record *nxt = (symbol_record *) NULL)
+symbol_record::symbol_record (const char *n, symbol_record *nxt)
 {
   init_state ();
   nm = strsave (n);
   next_elem = nxt;
 }
 
 void
 symbol_record::init_state (void)
 {
   formal_param = 0;
   linked_to_global = 0;
-  nm = (char *) NULL;
-  sv_fcn = (sv_Function) NULL;
-  definition = (symbol_def *) NULL;
-  next_elem = (symbol_record *) NULL;
+  nm = 0;
+  sv_fcn = 0;
+  definition = 0;
+  next_elem = 0;
 }
 
 symbol_record::~symbol_record (void)
 {
   delete [] nm;
 }
 
 char *
 symbol_record::name (void) const
 {
   return nm;
 }
 
 char *
 symbol_record::help (void) const
 {
-  if (definition != (symbol_def *) NULL)
-    return definition->help ();
-  else
-    return (char *) NULL;
+  return definition ? definition->help () : 0;
 }
 
 void
 symbol_record::rename (const char *n)
 {
   delete [] nm;
   nm = strsave (n);
 }
 
 tree_fvc *
 symbol_record::def (void) const
 {
-  if (definition != (symbol_def *) NULL)
-    return definition->def ();
-  else
-    return (tree_fvc *) NULL;
+  return definition ? definition->def () : 0;
 }
 
 int
 symbol_record::is_function (void) const
 {
-  if (definition != (symbol_def *) NULL)
-    return definition->is_function ();
-  else
-    return 0;
+  return definition ? definition->is_function () : 0;
+}
+
+int
+symbol_record::is_text_function (void) const
+{
+  return definition ? definition->is_text_function () : 0;
+}
+
+int
+symbol_record::is_mapper_function (void) const
+{
+  return definition ? definition->is_mapper_function () : 0;
 }
 
 int
 symbol_record::is_user_function (void) const
 {
-  if (definition != (symbol_def *) NULL)
-    return definition->is_user_function ();
-  else
-    return 0;
+  return definition ? definition->is_user_function () : 0;
 }
 
 int
 symbol_record::is_builtin_function (void) const
 {
-  if (definition != (symbol_def *) NULL)
-    return definition->is_builtin_function ();
-  else
-    return 0;
+  return definition ? definition->is_builtin_function () : 0;
 }
 
 int
 symbol_record::is_variable (void) const
 {
-  if (definition != (symbol_def *) NULL)
-    return definition->is_variable ();
-  else
-    return 0;
+  return definition ? definition->is_variable () : 0;
 }
 
 int
 symbol_record::is_user_variable (void) const
 {
-  if (definition != (symbol_def *) NULL)
-    return definition->is_user_variable ();
-  else
-    return 0;
+  return definition ? definition->is_user_variable () : 0;
 }
 
 int
 symbol_record::is_builtin_variable (void) const
 {
-  if (definition != (symbol_def *) NULL)
-    return definition->is_builtin_variable ();
-  else
-    return 0;
+  return definition ? definition->is_builtin_variable () : 0;
 }
 
 unsigned
 symbol_record::type (void) const
 {
-  if (definition != (symbol_def *) NULL)
-    return definition->type;
-  else
-    return 0;
+  return definition ? definition->type : 0;
 }
 
 int
 symbol_record::is_defined (void) const
 {
-  if (definition != (symbol_def *) NULL)
-    return (definition->def () != NULL_TREE);
-  else
-    return 0;
+  return definition ? (definition->def () != 0) : 0;
 }
 
 int
 symbol_record::is_read_only (void) const
 {
-  if (definition != (symbol_def *) NULL)
-    return definition->read_only;
-  else
-    return 0;
+  return definition ? definition->read_only : 0;
 }
 
 int
 symbol_record::is_eternal (void) const
 {
-  if (definition != (symbol_def *) NULL)
-    return definition->eternal;
-  else
-    return 0;
+  return definition ? definition->eternal : 0;
 }
 
 void
 symbol_record::protect (void)
 {
-  if (definition != (symbol_def *) NULL)
+  if (definition)
     {
       definition->protect ();
 
       if (! is_defined ())
 	warning ("protecting undefined variable `%s'", nm);
     }
 }
 
 void
 symbol_record::unprotect (void)
 {
-  if (definition != (symbol_def *) NULL)
+  if (definition)
     definition->unprotect ();
 }
 
 void
 symbol_record::make_eternal (void)
 {
-  if (definition != (symbol_def *) NULL)
+  if (definition)
     {
       definition->make_eternal ();
 
       if (! is_defined ())
 	warning ("giving eternal life to undefined variable `%s'", nm);
     }
 }
 
@@ -396,18 +380,18 @@ symbol_record::set_sv_function (sv_Funct
 }
 
 int
 symbol_record::define (tree_constant *t)
 {
   if (is_variable () && read_only_error ())
     return 0;
 
-  tree_fvc *saved_def = (tree_fvc *) NULL;
-  if (definition == (symbol_def *) NULL)
+  tree_fvc *saved_def = 0;
+  if (! definition)
     {
       definition = new symbol_def ();
       definition->count = 1;
     }
   else if (is_function ())
     {
       symbol_def *new_def = new symbol_def ();
       push_def (new_def);
@@ -415,73 +399,80 @@ symbol_record::define (tree_constant *t)
     }
   else if (is_variable ())
     {
       saved_def = definition->def ();
     }
 
   definition->define (t);
 
-  if (sv_fcn != (sv_Function) NULL && sv_fcn () < 0)
+  if (sv_fcn && sv_fcn () < 0)
     {
 // Would be nice to be able to avoid this cast.  XXX FIXME XXX
       definition->define ((tree_constant *) saved_def);
       delete t;
       return 0;
     }
 
   delete saved_def;
 
   return 1;
 }
 
 int
-symbol_record::define (tree_builtin *t)
+symbol_record::define (tree_builtin *t, int text_fcn)
 {
   if (read_only_error ())
     return 0;
 
   if (is_variable ())
     {
       symbol_def *old_def = pop_def ();
       maybe_delete (old_def);
     }
 
   if (is_function ())
     {
       symbol_def *old_def = pop_def ();
       maybe_delete (old_def);
     }
 
-  symbol_def *new_def = new symbol_def (t);
+  unsigned fcn_type = text_fcn ? symbol_def::TEXT_FUNCTION
+    : ((t && t->is_mapper_function ()) ? symbol_def::MAPPER_FUNCTION
+       : symbol_def::UNKNOWN);
+
+  symbol_def *new_def = new symbol_def (t, fcn_type);
   push_def (new_def);
   definition->count = 1;
 
   return 1;
 }
 
 int
-symbol_record::define (tree_function *t)
+symbol_record::define (tree_function *t, int text_fcn)
 {
   if (read_only_error ())
     return 0;
 
   if (is_variable ())
     {
       symbol_def *old_def = pop_def ();
       maybe_delete (old_def);
     }
 
   if (is_function ())
     {
       symbol_def *old_def = pop_def ();
       maybe_delete (old_def);
     }
 
-  symbol_def *new_def = new symbol_def (t);
+  unsigned fcn_type = text_fcn ? symbol_def::TEXT_FUNCTION
+    : symbol_def::UNKNOWN;
+
+  symbol_def *new_def = new symbol_def (t, fcn_type);
   push_def (new_def);
   definition->count = 1;
 
   return 1;
 }
 
 int
 symbol_record::define_as_fcn (tree_constant *t)
@@ -510,33 +501,33 @@ symbol_record::define_as_fcn (tree_const
 }
 
 int
 symbol_record::define_builtin_var (tree_constant *t)
 {
   define (t);
   if (is_variable ())
     definition->type = symbol_def::BUILTIN_VARIABLE;
+  return 1;
 }
 
 void
 symbol_record::document (const char *h)
 {
-  if (definition != (symbol_def *) NULL)
+  if (definition)
     {
       definition->document (h);
 
       if (! is_defined ())
 	warning ("documenting undefined variable `%s'", nm);
     }
 }
 
 int
-symbol_record::save (ostream& os, int mark_as_global = 0,
-		     int precision = 17)
+symbol_record::save (ostream& os, int mark_as_global, int precision)
 {
   int status = -1;
 
 // This is a kludge, but hey, it doesn't make sense to save them
 // anyway, does it?  Even if it did, we would just have trouble trying
 // to read NaN and Inf on lots of systems anyway...
 //
 // Should we also save the help string?  Maybe someday.
@@ -556,39 +547,39 @@ symbol_record::save (ostream& os, int ma
 
 int
 symbol_record::clear (void)
 {
   int count = 0;
   if (linked_to_global)
     {
       count = maybe_delete (definition);
-      definition = (symbol_def *) NULL;
+      definition = 0;
       linked_to_global = 0;
     }
   else
     {
       symbol_def *old_def = pop_def ();
       count = maybe_delete (old_def);
     }
   return count;
 }
 
 void
-symbol_record::alias (symbol_record *s, int force = 0)
+symbol_record::alias (symbol_record *s, int force)
 {
   sv_fcn = s->sv_fcn;
 
-  if (force && s->definition == (symbol_def *) NULL)
+  if (force && ! s->definition)
     {
       s->definition = new symbol_def ();
       definition = s->definition;
       definition->count = 2; // Yes, this is correct.
     }
-  else if (s->definition != (symbol_def *) NULL)
+  else if (s->definition)
     {
       definition = s->definition;
       definition->count++;
     }
 }
 
 void
 symbol_record::mark_as_formal_parameter (void)
@@ -625,17 +616,17 @@ symbol_record::chain (symbol_record *s)
 {
   next_elem = s;
 }
 
 void
 symbol_record::push_context (void)
 {
   context.push (definition);
-  definition = (symbol_def *) NULL;
+  definition = 0;
 
   global_link_context.push ((unsigned) linked_to_global);
   linked_to_global = 0;
 }
 
 void
 symbol_record::pop_context (void)
 {
@@ -674,28 +665,28 @@ symbol_record::read_only_error (void)
     }
   else
     return 0;
 }
 
 void
 symbol_record::push_def (symbol_def *sd)
 {
-  if (sd == (symbol_def *) NULL)
+  if (! sd)
     return;
 
   sd->next_elem = definition;
   definition = sd;
 }
 
 symbol_def *
 symbol_record::pop_def (void)
 {
   symbol_def *top = definition;
-  if (definition != (symbol_def *) NULL)
+  if (definition)
     definition = definition->next_elem;
   return top;
 }
 
 /*
  * A structure for handling verbose information about a symbol_record.
  */
 
@@ -738,17 +729,17 @@ symbol_record_info::symbol_record_info (
 	  break;
 	}
 
       nr = tmp->rows ();
       nc = tmp->columns ();
 
       symbol_def *sr_def = sr.definition;
       symbol_def *hidden_def = sr_def->next_elem;
-      if (hidden_def != (symbol_def *) NULL)
+      if (hidden_def)
 	{
 	  if (hidden_def->is_user_function ())
 	    hides = SR_INFO_USER_FUNCTION;
 	  else if (hidden_def->is_builtin_function ())
 	    hides = SR_INFO_BUILTIN_FUNCTION;
 	}
     }
 
@@ -884,136 +875,135 @@ symbol_record_info::init_state (void)
   initialized = 0;
   type = symbol_def::UNKNOWN;
   const_type = SR_INFO_UNKNOWN;
   hides = SR_INFO_NONE;
   eternal = 0;
   read_only = 0;
   nr = -1;
   nc = -1;
-  nm = (char *) NULL;
+  nm = 0;
 }
 
 /*
  * A symbol table.
  */
 
 symbol_table::symbol_table (void)
 {
 }
 
 symbol_record *
-symbol_table::lookup (const char *nm, int insert = 0, int warn = 0)
+symbol_table::lookup (const char *nm, int insert, int warn)
 {
   int index = hash (nm) & HASH_MASK;
 
   symbol_record *ptr = table[index].next ();
 
-  while (ptr != (symbol_record *) NULL)
+  while (ptr)
     {
       if (strcmp (ptr->name (), nm) == 0)
 	return ptr;
       ptr = ptr->next ();
     }
 
   if (insert)
     {
       symbol_record *new_sym;
       new_sym = new symbol_record (nm, table[index].next ());
       table[index].chain (new_sym);
       return new_sym;
     }
   else if (warn)
     warning ("lookup: symbol`%s' not found", nm);
 
-  return (symbol_record *) NULL;
+  return 0;
 }
 
 void
-symbol_table::clear (int clear_user_functions = 1)
+symbol_table::clear (int clear_user_functions)
 {
   for (int i = 0; i < HASH_TABLE_SIZE; i++)
     {
       symbol_record *ptr = table[i].next ();
 
-      while (ptr != (symbol_record *) NULL)
+      while (ptr)
 	{
 	  if (ptr->is_user_variable ()
 	      || (clear_user_functions && ptr->is_user_function ()))
 	    {
 	      ptr->clear ();
 	    }
 
 	  ptr = ptr->next ();
 	}
     }
 }
 
 int
-symbol_table::clear (const char *nm, int clear_user_functions = 1)
+symbol_table::clear (const char *nm, int clear_user_functions)
 {
   int index = hash (nm) & HASH_MASK;
 
   symbol_record *ptr = table[index].next ();
 
-  while (ptr != (symbol_record *) NULL)
+  while (ptr)
     {
       if (strcmp (ptr->name (), nm) == 0
 	  && (ptr->is_user_variable ()
 	      || (clear_user_functions && ptr->is_user_function ())))
 	{
 	  ptr->clear ();
 	  return 1;
 	}
       ptr = ptr->next ();
     }
 
   return 0;
 }
 
 int
-symbol_table::save (ostream& os, int mark_as_global = 0,
-		    int precision = 17)
+symbol_table::save (ostream& os, int mark_as_global, int precision)
 {
   int status = 0;
   int count;
   char **names = list (count, 1, symbol_def::USER_VARIABLE);
   char **ptr = names;
-  if (ptr != (char **) NULL)
+  if (ptr)
     {
-      while (*ptr != (char *) NULL)
+      while (*ptr)
 	{
 	  if (save (os, *ptr, mark_as_global, precision))
 	    status++;
 	  delete [] *ptr++;
 	}
       delete [] names;
     }
   return status;
 }
 
 int
-symbol_table::save (ostream& os, const char *name,
-		    int mark_as_global = 0, int precision = 17)
+symbol_table::save (ostream& os, const char *name, int mark_as_global,
+		    int precision)
 {
   int status = 0;
   symbol_record *sr = lookup (name, 0, 0);
-  if (sr != (symbol_record *) NULL)
+  if (sr)
     status = sr->save (os, mark_as_global, precision);
   return status;
 }
 
 int
 symbol_table::size (void) const
 {
   int count = 0;
   for (int i = 0; i < HASH_TABLE_SIZE; i++)
     {
       symbol_record *ptr = table[i].next ();
-      while (ptr != (symbol_record *) NULL)
+      while (ptr)
 	{
 	  count++;
 	  ptr = ptr->next ();
 	}
     }
   return count;
 }
 
@@ -1028,106 +1018,104 @@ symbol_record_info_cmp (symbol_record_in
 {
   return strcmp (a->name (), b->name ());
 }
 
 // This function should probably share code with symbol_table::list.
 // XXX FIXME XXX
 
 symbol_record_info *
-symbol_table::long_list (int& count, int sort = 0,
-			 unsigned type = SYMTAB_ALL_TYPES,
-			 unsigned scope = SYMTAB_ALL_SCOPES) const
+symbol_table::long_list (int& count, int sort, unsigned type,
+			 unsigned scope) const 
 {
   count = 0;
   int n = size ();
   if (n == 0)
-    return (symbol_record_info *) NULL;
+    return 0;
 
   symbol_record_info *symbols = new symbol_record_info [n+1];
   for (int i = 0; i < HASH_TABLE_SIZE; i++)
     {
       symbol_record *ptr = table[i].next ();
-      while (ptr != (symbol_record *) NULL)
+      while (ptr)
 	{
 	  assert (count < n);
 	  unsigned my_scope = ptr->is_linked_to_global () + 1; // Tricky...
 	  unsigned my_type = ptr->type ();
 	  if ((type & my_type) && (scope & my_scope))
 	    {
 	      symbols[count++] = symbol_record_info (*ptr);
 	    }
 	  ptr = ptr->next ();
 	}
     }
   symbols[count] = symbol_record_info ();
 
-  if (sort && symbols != (symbol_record_info *) NULL)
+  if (sort && symbols)
     qsort ((void *) symbols, count, sizeof (symbol_record_info),
-	   (int (*)(void*, void*)) symbol_record_info_cmp);
+	   (int (*)(const void*, const void*)) symbol_record_info_cmp);
 
   return symbols;
 }
 
 char **
-symbol_table::list (int& count, int sort = 0,
-		    unsigned type = SYMTAB_ALL_TYPES,
-		    unsigned scope = SYMTAB_ALL_SCOPES) const
+symbol_table::list (int& count, int sort, unsigned type,
+		    unsigned scope) const
 {
   count = 0;
   int n = size ();
   if (n == 0)
-    return (char **) NULL;
+    return 0;
 
   char **symbols = new char * [n+1];
   for (int i = 0; i < HASH_TABLE_SIZE; i++)
     {
       symbol_record *ptr = table[i].next ();
-      while (ptr != (symbol_record *) NULL)
+      while (ptr)
 	{
 	  assert (count < n);
 	  unsigned my_scope = ptr->is_linked_to_global () + 1; // Tricky...
 	  unsigned my_type = ptr->type ();
 	  if ((type & my_type) && (scope & my_scope))
 	    symbols[count++] = strsave (ptr->name ());
 	  ptr = ptr->next ();
 	}
     }
-  symbols[count] = (char *) NULL;
+  symbols[count] = 0;
 
-  if (sort && symbols != (char **) NULL)
+  if (sort && symbols)
     qsort ((void **) symbols, count, sizeof (char *),
-	   (int (*)(void*, void*)) pstrcmp);
+	   (int (*)(const void*, const void*)) pstrcmp);
 
   return symbols;
 }
 
 void
 symbol_table::push_context (void)
 {
   for (int i = 0; i < HASH_TABLE_SIZE; i++)
     {
       symbol_record *ptr = table[i].next ();
 
-      while (ptr != (symbol_record *) NULL)
+      while (ptr)
 	{
 	  ptr->push_context ();
 	  ptr = ptr->next ();
 	}
     }
 }
 
 void
 symbol_table::pop_context (void)
 {
   for (int i = 0; i < HASH_TABLE_SIZE; i++)
     {
       symbol_record *ptr = table[i].next ();
 
-      while (ptr != (symbol_record *) NULL)
+      while (ptr)
 	{
 	  ptr->pop_context ();
 	  ptr = ptr->next ();
 	}
     }
 }
 
 // Chris Torek's fave hash function.
diff --git a/src/symtab.h b/src/symtab.h
--- a/src/symtab.h
+++ b/src/symtab.h
@@ -1,9 +1,9 @@
-// Symbol table classes.                              -*- C++ -*-
+// symtab.h                                             -*- C++ -*-
 /*
 
 Copyright (C) 1992, 1993, 1994 John W. Eaton
 
 This file is part of Octave.
 
 Octave is free software; you can redistribute it and/or modify it
 under the terms of the GNU General Public License as published by the
@@ -23,24 +23,21 @@ Software Foundation, 675 Mass Ave, Cambr
 
 #if !defined (octave_symtab_h)
 #define octave_symtab_h 1
 
 #if defined (__GNUG__)
 #pragma interface
 #endif
 
-#include <stdlib.h>
-#include <string.h>
-#include <iostream.h>
-#include <assert.h>
-
 #include "SLStack.h"
 
-#include "builtins.h"
+#include "variables.h"
+
+class ostream;
 
 #define HASH_TABLE_SIZE 1024             /* Must be multiple of 2 */
 #define HASH_MASK (HASH_TABLE_SIZE - 1)
 
 class tree;
 class tree_fvc;
 class tree_builtin;
 class tree_constant;
@@ -58,31 +55,33 @@ class symbol_def
 {
   friend class symbol_record;
   friend class symbol_record_info;
 
 public:
 
   symbol_def (void);
   symbol_def (tree_constant *t);
-  symbol_def (tree_builtin *t);
-  symbol_def (tree_function *t);
+  symbol_def (tree_builtin *t, unsigned fcn_type = 0);
+  symbol_def (tree_function *t, unsigned fcn_type = 0);
 
   ~symbol_def (void);
 
   int is_variable (void) const;
   int is_function (void) const;
+  int is_text_function (void) const;
+  int is_mapper_function (void) const;
   int is_user_variable (void) const;
   int is_user_function (void) const;
   int is_builtin_variable (void) const;
   int is_builtin_function (void) const;
 
   void define (tree_constant *t);
-  void define (tree_builtin *t);
-  void define (tree_function *t);
+  void define (tree_builtin *t, unsigned fcn_type = 0);
+  void define (tree_function *t, unsigned fcn_type = 0);
 
   void protect (void);
   void unprotect (void);
   void make_eternal (void);
 
   tree_fvc *def (void) const;
   char *help (void) const;
   void document (const char *h);
@@ -90,24 +89,26 @@ public:
   int save (ostream& os, int mark_as_global, int precision);
 
   enum TYPE
     {
       UNKNOWN = 0,
       USER_FUNCTION = 1,
       USER_VARIABLE = 2,
       BUILTIN_FUNCTION = 4,
-      BUILTIN_VARIABLE = 8
+      TEXT_FUNCTION = 8,
+      MAPPER_FUNCTION = 16,
+      BUILTIN_VARIABLE = 32
     };
 
   friend maybe_delete (symbol_def *def);
 
 private:
 
-  unsigned type : 4;
+  unsigned type : 6;
   unsigned eternal : 1;
   unsigned read_only : 1;
 
   char *help_string;
   tree_fvc *definition;
   symbol_def *next_elem;
   int count;
 
@@ -122,28 +123,30 @@ private:
  */
 class
 symbol_record
 {
   friend class symbol_record_info;
 
 public:
   symbol_record (void);
-  symbol_record (const char *n, symbol_record *nxt = (symbol_record *) NULL);
+  symbol_record (const char *n, symbol_record *nxt = 0);
 
  ~symbol_record (void);
 
   char *name (void) const;
   char *help (void) const; 
   tree_fvc *def (void) const;
 
   void rename (const char *n);
 
   int is_function (void) const;
   int is_user_function (void) const;
+  int is_text_function (void) const;
+  int is_mapper_function (void) const;
   int is_builtin_function (void) const;
   int is_variable (void) const;
   int is_user_variable (void) const;
   int is_builtin_variable (void) const;
 
   unsigned type (void) const;
 
   int is_defined (void) const;
@@ -152,18 +155,18 @@ public:
 
   void protect (void);
   void unprotect (void);
   void make_eternal (void);
 
   void set_sv_function (sv_Function f);
 
   int define (tree_constant *t);
-  int define (tree_builtin *t);
-  int define (tree_function *t);
+  int define (tree_builtin *t, int text_fcn = 0);
+  int define (tree_function *t, int text_fcn = 0);
   int define_as_fcn (tree_constant *t);
   int define_builtin_var (tree_constant *t);
 
   void document (const char *h);
 
   int save (ostream& os, int mark_as_global = 0, int precision = 17);
 
   int clear (void);
@@ -278,16 +281,17 @@ private:
 #define SYMTAB_LOCAL_SCOPE 1
 #define SYMTAB_GLOBAL_SCOPE 2
 
 #define SYMTAB_ALL_SCOPES (SYMTAB_LOCAL_SCOPE | SYMTAB_GLOBAL_SCOPE)
 
 #define SYMTAB_ALL_TYPES (symbol_def::USER_FUNCTION \
 			  | symbol_def::USER_VARIABLE \
 			  | symbol_def::BUILTIN_FUNCTION \
+			  | symbol_def::TEXT_FUNCTION \
 			  | symbol_def::BUILTIN_VARIABLE)
 
 class
 symbol_table
 {
 public:
 
   symbol_table (void);
