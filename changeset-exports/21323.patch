# HG changeset patch
# User Rik <rik@octave.org>
# Date 1456265494 28800
#      Tue Feb 23 14:11:34 2016 -0800
# Node ID 030d4d6c2b58e56ef98a38ebc786a4e85ca7342a
# Parent  909129eb77c52681efc3e8f3a7997d13c38d3160
Implement figure property "InvertHardCopy" for printing (bug #47230).

* graphics.in.h: Change default value of "InvertHardCopy" to "on" to match
Matlab.

* print.m: Change figure background and top-level axes background colors to
white when printing and InvertHardCopy is "on".  Restore original colors
after print.

diff --git a/libinterp/corefcn/graphics.in.h b/libinterp/corefcn/graphics.in.h
--- a/libinterp/corefcn/graphics.in.h
+++ b/libinterp/corefcn/graphics.in.h
@@ -3390,17 +3390,17 @@ public:
       string_property currentcharacter r , ""
       handle_property currentobject r , graphics_handle ()
       array_property currentpoint r , Matrix (2, 1, 0)
       bool_property dockcontrols , "off"
       bool_property doublebuffer , "on"
       string_property filename , ""
       bool_property graphicssmoothing , "on"
       bool_property integerhandle S , "on"
-      bool_property inverthardcopy , "off"
+      bool_property inverthardcopy , "on"
       callback_property keypressfcn , Matrix ()
       callback_property keyreleasefcn , Matrix ()
       radio_property menubar , "none|{figure}"
       double_property mincolormap , 64
       string_property name , ""
       // FIXME: Need RO property which returns current figure number.
       // double_property number r ,
       radio_property nextplot , "new|{add}|replacechildren|replace"
diff --git a/scripts/plot/util/print.m b/scripts/plot/util/print.m
--- a/scripts/plot/util/print.m
+++ b/scripts/plot/util/print.m
@@ -345,28 +345,28 @@ function print (varargin)
     ## print() requires children of axes to have units = "normalized", or "data"
     hobj = findall (opts.figure, "-not", "type", "figure", ...
       "-not", "type", "axes", "-property", "units", ...
       "-not", "units", "normalized", "-not", "units", "data");
     for n = 1:numel(hobj)
       props(n).h = hobj(n);
       props(n).name = "units";
       props(n).value = {get(hobj(n), "units")};
-      set (hobj(n), "units", "data")
+      set (hobj(n), "units", "data");
     endfor
 
     ## print() requires axes units = "normalized"
     hax = findall (opts.figure, "-depth", 1, "type", "axes", ...
       "-not", "units", "normalized");
     m = numel (props);
     for n = 1:numel(hax)
       props(m+n).h = hax(n);
       props(m+n).name = "units";
       props(m+n).value = {get(hax(n), "units")};
-      set (hax(n), "units", "normalized")
+      set (hax(n), "units", "normalized");
     endfor
 
     ## print() requires figure units to be "pixels"
     m = numel (props);
     props(m+1).h = opts.figure;
     props(m+1).name = "units";
     props(m+1).value = {get(opts.figure, "units")};
     set (opts.figure, "units", "pixels");
@@ -374,24 +374,43 @@ function print (varargin)
     ## graphics toolkit translates figure position to eps bbox (points)
     fpos = get (opts.figure, "position");
     props(m+2).h = opts.figure;
     props(m+2).name = "position";
     props(m+2).value = {fpos};
     fpos(3:4) = opts.canvas_size;
     set (opts.figure, "position", fpos);
 
-    ## Set figure background to none.
-    ## This is done both for consistency with Matlab and to eliminate
-    ## the visible box along the figure's perimeter.
-    props(m+3).h = opts.figure;
-    props(m+3).name = "color";
-    props(m+3).value{1} = get (props(m+3).h, props(m+3).name);
-    set (props(m+3).h, "color", "none");
-    nfig = m + 3;
+    ## Implement InvertHardCopy option
+    do_hardcopy = strcmp (get (opts.figure, "inverthardcopy"), "on");
+
+    if (do_hardcopy)
+      ## Set figure background to white.
+      props(m+3).h = opts.figure;
+      props(m+3).name = "color";
+      props(m+3).value{1} = get (props(m+3).h, props(m+3).name);
+      set (props(m+3).h, "color", "white");
+      nfig = m + 3;
+    else
+      nfig = m + 2;
+    endif
+
+    if (do_hardcopy)
+      ## Set background to white for all top-level axes objects
+      hax = findall (opts.figure, "-depth", 1, "type", "axes",
+                                  "-not", "tag", "legend");
+      m = numel (props);
+      for n = 1:numel(hax)
+        props(m+n).h = hax(n);
+        props(m+n).name = "color";
+        props(m+n).value{1} = get(hax(n), "color");
+        set (hax(n), "color", "white");
+      endfor
+      nfig += n;
+    endif
 
     if (opts.force_solid != 0)
       h = findall (opts.figure, "-property", "linestyle");
       m = numel (props);
       for n = 1:numel (h)
         props(m+n).h = h(n);
         props(m+n).name = "linestyle";
         props(m+n).value = {get(h(n), "linestyle")};
