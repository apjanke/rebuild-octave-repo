# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1493924566 14400
#      Thu May 04 15:02:46 2017 -0400
# Node ID 2699c59748443830d982459050eb01235262f5b8
# Parent  f267a982478f72ff5ac3fa1b3a4549674a4c9825
handle global and persistent in tree_decl_command, not as separate classes

* pt-decl.h, pt-decl.cc (tree_decl_command::mark_as_global,
tree_decl_command::mark_as_persistent, tree_decl_command::dup):
New functions.

(tree_global_command, tree_persistent_command): Delete classes.
(tree_decl_elt::decl_type): New enum.  Store command type in each
initializer list element.

(tree_decl_elt::mark_as_global, tree_decl_elt::is_global,
tree_decl_elt::mark_as_persistent, tree_decl_elt::is_persistent):
New functions.

(tree_decl_init_list::mark_as_global, tree_decl_init_list::is_global,
tree_decl_init_list::mark_as_persistent, tree_decl_init_list::is_persistent):
New functions.

* pt-walk.h (tree_walker::visit_decl_command): New function.
(tree_walker::visit_global_command,
tree_walker::visit_persistent_command): Delete.
Update all derived classes.

* oct-parse.in.yy (base_parser::make_decl_command): Tag initialization
lists as global or persistent here.

* pt-eval.cc (tree_evaluator::visit_decl_command): New function.
Visit initialization list instead of looping here.
(tree_evaluator::visit_decl_init_list): Loop and visit elements here.
(tree_evaluator::visit_decl_elt): Handle evaluation of elements here.

diff --git a/libinterp/octave-value/ov-classdef.cc b/libinterp/octave-value/ov-classdef.cc
--- a/libinterp/octave-value/ov-classdef.cc
+++ b/libinterp/octave-value/ov-classdef.cc
@@ -1910,20 +1910,19 @@ public:
 
   // NO-OP
   void visit_anon_fcn_handle (octave::tree_anon_fcn_handle&) { }
   void visit_argument_list (octave::tree_argument_list&) { }
   void visit_binary_expression (octave::tree_binary_expression&) { }
   void visit_break_command (octave::tree_break_command&) { }
   void visit_colon_expression (octave::tree_colon_expression&) { }
   void visit_continue_command (octave::tree_continue_command&) { }
-  void visit_global_command (octave::tree_global_command&) { }
-  void visit_persistent_command (octave::tree_persistent_command&) { }
+  void visit_decl_command (octave::tree_decl_command&) { }
+  void visit_decl_init_list (octave::tree_decl_init_list&) { }
   void visit_decl_elt (octave::tree_decl_elt&) { }
-  void visit_decl_init_list (octave::tree_decl_init_list&) { }
   void visit_simple_for_command (octave::tree_simple_for_command&) { }
   void visit_complex_for_command (octave::tree_complex_for_command&) { }
   void visit_octave_user_script (octave_user_script&) { }
   void visit_octave_user_function (octave_user_function&) { }
   void visit_function_def (octave::tree_function_def&) { }
   void visit_identifier (octave::tree_identifier&) { }
   void visit_if_clause (octave::tree_if_clause&) { }
   void visit_if_command (octave::tree_if_command&) { }
diff --git a/libinterp/parse-tree/oct-parse.in.yy b/libinterp/parse-tree/oct-parse.in.yy
--- a/libinterp/parse-tree/oct-parse.in.yy
+++ b/libinterp/parse-tree/oct-parse.in.yy
@@ -3854,22 +3854,28 @@ namespace octave
     tree_decl_command *retval = 0;
 
     int l = tok_val->line ();
     int c = tok_val->column ();
 
     switch (tok)
       {
       case GLOBAL:
-        retval = new tree_global_command (lst, l, c);
+        {
+          retval = new tree_decl_command ("global", lst, l, c);
+          retval->mark_as_global ();
+        }
         break;
 
       case PERSISTENT:
         if (curr_fcn_depth > 0)
-          retval = new tree_persistent_command (lst, l, c);
+          {
+            retval = new tree_decl_command ("persistent", lst, l, c);
+            retval->mark_as_persistent ();
+          }
         else
           {
             if (lexer.reading_script_file)
               warning ("ignoring persistent declaration near line %d of file '%s'",
                        l, lexer.fcn_file_full_name.c_str ());
             else
               warning ("ignoring persistent declaration near line %d", l);
           }
diff --git a/libinterp/parse-tree/pt-bp.cc b/libinterp/parse-tree/pt-bp.cc
--- a/libinterp/parse-tree/pt-bp.cc
+++ b/libinterp/parse-tree/pt-bp.cc
@@ -95,42 +95,30 @@ namespace octave
   void
   tree_breakpoint::visit_continue_command (tree_continue_command& cmd)
   {
     if (cmd.line () >= line)
       take_action (cmd);
   }
 
   void
-  tree_breakpoint::do_decl_command (tree_decl_command& cmd)
+  tree_breakpoint::visit_decl_command (tree_decl_command& cmd)
   {
     if (cmd.line () >= line)
       take_action (cmd);
   }
 
   void
-  tree_breakpoint::visit_global_command (tree_global_command& cmd)
-  {
-    do_decl_command (cmd);
-  }
-
-  void
-  tree_breakpoint::visit_persistent_command (tree_persistent_command& cmd)
-  {
-    do_decl_command (cmd);
-  }
-
-  void
-  tree_breakpoint::visit_decl_elt (tree_decl_elt&)
+  tree_breakpoint::visit_decl_init_list (tree_decl_init_list&)
   {
     panic_impossible ();
   }
 
   void
-  tree_breakpoint::visit_decl_init_list (tree_decl_init_list&)
+  tree_breakpoint::visit_decl_elt (tree_decl_elt&)
   {
     panic_impossible ();
   }
 
   void
   tree_breakpoint::visit_simple_for_command (tree_simple_for_command& cmd)
   {
     if (cmd.line () >= line)
diff --git a/libinterp/parse-tree/pt-bp.h b/libinterp/parse-tree/pt-bp.h
--- a/libinterp/parse-tree/pt-bp.h
+++ b/libinterp/parse-tree/pt-bp.h
@@ -60,24 +60,22 @@ namespace octave
     void visit_binary_expression (tree_binary_expression&);
 
     void visit_break_command (tree_break_command&);
 
     void visit_colon_expression (tree_colon_expression&);
 
     void visit_continue_command (tree_continue_command&);
 
-    void visit_global_command (tree_global_command&);
+    void visit_decl_command (tree_decl_command&);
 
-    void visit_persistent_command (tree_persistent_command&);
+    void visit_decl_init_list (tree_decl_init_list&);
 
     void visit_decl_elt (tree_decl_elt&);
 
-    void visit_decl_init_list (tree_decl_init_list&);
-
     void visit_while_command (tree_while_command&);
 
     void visit_do_until_command (tree_do_until_command&);
 
     void visit_simple_for_command (tree_simple_for_command&);
 
     void visit_complex_for_command (tree_complex_for_command&);
 
@@ -145,18 +143,16 @@ namespace octave
 
     octave_value_list get_list (void) { return bp_list; }
     octave_value_list get_cond_list (void) { return bp_cond_list; }
 
     int get_line (void) { return found ? line : 0; }
 
   private:
 
-    void do_decl_command (tree_decl_command&);
-
     void take_action (tree& tr);
 
     void take_action (tree_statement& stmt);
 
     // Statement line number we are looking for.
     int line;
 
     // What to do.
diff --git a/libinterp/parse-tree/pt-check.cc b/libinterp/parse-tree/pt-check.cc
--- a/libinterp/parse-tree/pt-check.cc
+++ b/libinterp/parse-tree/pt-check.cc
@@ -85,34 +85,36 @@ namespace octave
       op2->accept (*this);
   }
 
   void
   tree_checker::visit_continue_command (tree_continue_command&)
   { }
 
   void
-  tree_checker::do_decl_command (tree_decl_command& cmd)
+  tree_checker::visit_decl_command (tree_decl_command& cmd)
   {
     tree_decl_init_list *init_list = cmd.initializer_list ();
 
     if (init_list)
       init_list->accept (*this);
   }
 
   void
-  tree_checker::visit_global_command (tree_global_command& cmd)
+  tree_checker::visit_decl_init_list (tree_decl_init_list& lst)
   {
-    do_decl_command (cmd);
-  }
+    tree_decl_init_list::iterator p = lst.begin ();
 
-  void
-  tree_checker::visit_persistent_command (tree_persistent_command& cmd)
-  {
-    do_decl_command (cmd);
+    while (p != lst.end ())
+      {
+        tree_decl_elt *elt = *p++;
+
+        if (elt)
+          elt->accept (*this);
+      }
   }
 
   void
   tree_checker::visit_decl_elt (tree_decl_elt& cmd)
   {
     tree_identifier *id = cmd.ident ();
 
     if (id)
@@ -120,30 +122,16 @@ namespace octave
 
     tree_expression *expr = cmd.expression ();
 
     if (expr)
       expr->accept (*this);
   }
 
   void
-  tree_checker::visit_decl_init_list (tree_decl_init_list& lst)
-  {
-    tree_decl_init_list::iterator p = lst.begin ();
-
-    while (p != lst.end ())
-      {
-        tree_decl_elt *elt = *p++;
-
-        if (elt)
-          elt->accept (*this);
-      }
-  }
-
-  void
   tree_checker::visit_simple_for_command (tree_simple_for_command& cmd)
   {
     tree_expression *lhs = cmd.left_hand_side ();
 
     if (lhs)
       {
         if (! lhs->lvalue_ok ())
           errmsg ("invalid lvalue in for command", cmd.line ());
diff --git a/libinterp/parse-tree/pt-check.h b/libinterp/parse-tree/pt-check.h
--- a/libinterp/parse-tree/pt-check.h
+++ b/libinterp/parse-tree/pt-check.h
@@ -55,24 +55,22 @@ namespace octave
     void visit_binary_expression (tree_binary_expression&);
 
     void visit_break_command (tree_break_command&);
 
     void visit_colon_expression (tree_colon_expression&);
 
     void visit_continue_command(tree_continue_command&);
 
-    void visit_global_command (tree_global_command&);
+    void visit_decl_command (tree_decl_command&);
 
-    void visit_persistent_command (tree_persistent_command&);
+    void visit_decl_init_list (tree_decl_init_list&);
 
     void visit_decl_elt (tree_decl_elt&);
 
-    void visit_decl_init_list (tree_decl_init_list&);
-
     void visit_simple_for_command (tree_simple_for_command&);
 
     void visit_complex_for_command (tree_complex_for_command&);
 
     void visit_octave_user_script (octave_user_script&);
 
     void visit_octave_user_function (octave_user_function&);
 
@@ -135,18 +133,16 @@ namespace octave
     void visit_do_until_command (tree_do_until_command&);
 
   private:
 
     bool do_lvalue_check;
 
     std::string file_name;
 
-    void do_decl_command (tree_decl_command&);
-
     OCTAVE_NORETURN void errmsg (const std::string& msg, int line);
   };
 }
 
 #if defined (OCTAVE_USE_DEPRECATED_FUNCTIONS)
 
 OCTAVE_DEPRECATED ("use 'octave::tree_checker' instead")
 typedef octave::tree_checker tree_checker;
diff --git a/libinterp/parse-tree/pt-decl.cc b/libinterp/parse-tree/pt-decl.cc
--- a/libinterp/parse-tree/pt-decl.cc
+++ b/libinterp/parse-tree/pt-decl.cc
@@ -64,38 +64,40 @@ namespace octave
     tree_decl_init_list *new_dil = new tree_decl_init_list ();
 
     for (const tree_decl_elt *elt : *this)
       new_dil->append (elt ? elt->dup (scope, context) : 0);
 
     return new_dil;
   }
 
-  // Base class for declaration commands (global, static).
+  // Declaration commands (global, static).
+
+  tree_decl_command::tree_decl_command (const std::string& n,
+                                        tree_decl_init_list *t, int l, int c)
+    : tree_command (l, c), cmd_name (n), init_list (t)
+  {
+    if (t)
+      {
+        if (cmd_name == "global")
+          mark_as_global ();
+        else if (cmd_name == "persistent")
+          mark_as_persistent ();
+        else
+          error ("tree_decl_command: unknown decl type: %s", cmd_name);
+      }
+  }
 
   tree_decl_command::~tree_decl_command (void)
   {
     delete init_list;
   }
 
-  // Global.
-
   tree_command *
-  tree_global_command::dup (symbol_table::scope_id scope,
-                            symbol_table::context_id context) const
+  tree_decl_command::dup (symbol_table::scope_id scope,
+                          symbol_table::context_id context) const
   {
-    return
-      new tree_global_command (init_list ? init_list->dup (scope, context) : 0,
-                               line (), column ());
-  }
+    tree_decl_init_list *new_init_list
+      = init_list ? init_list->dup (scope, context) : 0;
 
-  // Static.
-
-  tree_command *
-  tree_persistent_command::dup (symbol_table::scope_id scope,
-                                symbol_table::context_id context) const
-  {
-    return
-      new tree_persistent_command (init_list ? init_list->dup (scope, context)
-                                   : 0,
-                                   line (), column ());
+    return new tree_decl_command (name (), new_init_list, line (), column ());
   }
 }
diff --git a/libinterp/parse-tree/pt-decl.h b/libinterp/parse-tree/pt-decl.h
--- a/libinterp/parse-tree/pt-decl.h
+++ b/libinterp/parse-tree/pt-decl.h
@@ -41,18 +41,25 @@ namespace octave
   class tree_identifier;
 
   // List of expressions that make up a declaration statement.
 
   class tree_decl_elt
   {
   public:
 
+    enum decl_type
+      {
+        unknown,
+        global,
+        persistent
+      };
+
     tree_decl_elt (tree_identifier *i = nullptr, tree_expression *e = nullptr)
-      : id (i), expr (e) { }
+      : type (unknown), id (i), expr (e) { }
 
     // No copying!
 
     tree_decl_elt (const tree_decl_elt&) = delete;
 
     tree_decl_elt& operator = (const tree_decl_elt&) = delete;
 
     ~tree_decl_elt (void);
@@ -69,32 +76,40 @@ namespace octave
 
     bool lvalue_ok (void) { return id ? id->lvalue_ok () : false; }
 
     octave_lvalue lvalue (tree_evaluator *tw)
     {
       return id ? id->lvalue (tw) : octave_lvalue ();
     }
 
+    void mark_as_global (void) { type = global; }
+    bool is_global (void) const { return type == global; }
+
+    void mark_as_persistent (void) { type = persistent; }
+    bool is_persistent (void) const { return type == persistent; }
+
     tree_identifier * ident (void) { return id; }
 
     std::string name (void) { return id ? id->name () : ""; }
 
     tree_expression * expression (void) { return expr; }
 
     tree_decl_elt * dup (symbol_table::scope_id scope,
                          symbol_table::context_id context) const;
 
     void accept (tree_walker& tw)
     {
       tw.visit_decl_elt (*this);
     }
 
   private:
 
+    decl_type type;
+
     // An identifier to tag with the declared property.
     tree_identifier *id;
 
     // An initializer expression (may be zero);
     tree_expression *expr;
   };
 
   class tree_decl_init_list : public octave::base_list<tree_decl_elt *>
@@ -116,16 +131,28 @@ namespace octave
       while (! empty ())
         {
           iterator p = begin ();
           delete *p;
           erase (p);
         }
     }
 
+    void mark_as_global (void)
+    {
+      for (tree_decl_elt *elt : *this)
+        elt->mark_as_global ();
+    }
+
+    void mark_as_persistent (void)
+    {
+      for (tree_decl_elt *elt : *this)
+        elt->mark_as_persistent ();
+    }
+
     tree_decl_init_list * dup (symbol_table::scope_id scope,
                                symbol_table::context_id context) const;
 
     void accept (tree_walker& tw)
     {
       tw.visit_decl_init_list (*this);
     }
   };
@@ -135,118 +162,65 @@ namespace octave
   class tree_decl_command : public tree_command
   {
   public:
 
     tree_decl_command (const std::string& n, int l = -1, int c = -1)
       : tree_command (l, c), cmd_name (n), init_list (0) { }
 
     tree_decl_command (const std::string& n, tree_decl_init_list *t,
-                       int l = -1, int c = -1)
-      : tree_command (l, c), cmd_name (n), init_list (t) { }
+                       int l = -1, int c = -1);
 
     // No copying!
 
     tree_decl_command (const tree_decl_command&) = delete;
 
     tree_decl_command& operator = (const tree_decl_command&) = delete;
 
     ~tree_decl_command (void);
 
+    void mark_as_global (void)
+    {
+      if (init_list)
+        init_list->mark_as_global ();
+    }
+
+    void mark_as_persistent (void)
+    {
+      if (init_list)
+        init_list->mark_as_persistent ();
+    }
+
     tree_decl_init_list * initializer_list (void) { return init_list; }
 
-    std::string name (void) { return cmd_name; }
+    std::string name (void) const { return cmd_name; }
+
+    tree_command *dup (symbol_table::scope_id scope,
+                       symbol_table::context_id context) const;
 
-  protected:
+    void accept (tree_walker& tw)
+    {
+      tw.visit_decl_command (*this);
+    }
+
+  private:
 
     // The name of this command -- global, static, etc.
     std::string cmd_name;
 
     // The list of variables or initializers in this declaration command.
     tree_decl_init_list *init_list;
   };
-
-  // Global.
-
-  class tree_global_command : public tree_decl_command
-  {
-  public:
-
-    tree_global_command (int l = -1, int c = -1)
-      : tree_decl_command ("global", l, c) { }
-
-    tree_global_command (tree_decl_init_list *t, int l = -1, int c = -1)
-      : tree_decl_command ("global", t, l, c) { }
-
-    // No copying!
-
-    tree_global_command (const tree_global_command&) = delete;
-
-    tree_global_command& operator = (const tree_global_command&) = delete;
-
-    ~tree_global_command (void) = default;
-
-    tree_command * dup (symbol_table::scope_id scope,
-                        symbol_table::context_id context) const;
-
-    void accept (tree_walker& tw)
-    {
-      tw.visit_global_command (*this);
-    }
-
-  private:
-
-    static void do_init (tree_decl_elt& elt);
-  };
-
-  // Persistent.
-
-  class tree_persistent_command : public tree_decl_command
-  {
-  public:
-
-    tree_persistent_command (int l = -1, int c = -1)
-      : tree_decl_command ("persistent", l, c) { }
-
-    tree_persistent_command (tree_decl_init_list *t, int l = -1, int c = -1)
-      : tree_decl_command ("persistent", t, l, c) { }
-
-    // No copying!
-
-    tree_persistent_command (const tree_persistent_command&) = delete;
-
-    tree_persistent_command& operator = (const tree_persistent_command&) = delete;
-
-    ~tree_persistent_command (void) = default;
-
-    tree_command * dup (symbol_table::scope_id scope,
-                        symbol_table::context_id context) const;
-
-    void accept (tree_walker& tw)
-    {
-      tw.visit_persistent_command (*this);
-    }
-
-  private:
-
-    static void do_init (tree_decl_elt& elt);
-  };
 }
 
 #if defined (OCTAVE_USE_DEPRECATED_FUNCTIONS)
 
 OCTAVE_DEPRECATED ("use 'octave::tree_decl_elt' instead")
 typedef octave::tree_decl_elt tree_decl_elt;
 
 // tree_decl_init_list is derived from a template.
 
 OCTAVE_DEPRECATED ("use 'octave::tree_decl_command' instead")
 typedef octave::tree_decl_command tree_decl_command;
 
-OCTAVE_DEPRECATED ("use 'octave::tree_global_command' instead")
-typedef octave::tree_global_command tree_global_command;
-
-OCTAVE_DEPRECATED ("use 'octave::tree_persistent_command' instead")
-typedef octave::tree_persistent_command tree_persistent_command;
-
 #endif
 
 #endif
diff --git a/libinterp/parse-tree/pt-eval.cc b/libinterp/parse-tree/pt-eval.cc
--- a/libinterp/parse-tree/pt-eval.cc
+++ b/libinterp/parse-tree/pt-eval.cc
@@ -603,50 +603,47 @@ namespace octave
         else
           return val.is_equal (label_value);
       }
 
     return false;
   }
 
   void
-  tree_evaluator::do_global_init (octave::tree_decl_elt& elt)
+  tree_evaluator::visit_decl_command (tree_decl_command& cmd)
+  {
+    if (debug_mode)
+      do_breakpoint (cmd.is_breakpoint (true));
+
+    tree_decl_init_list *init_list = cmd.initializer_list ();
+
+    if (init_list)
+      init_list->accept (*this);
+  }
+
+  void
+  tree_evaluator::visit_decl_init_list (tree_decl_init_list& lst)
+  {
+    for (tree_decl_elt *elt : lst)
+      elt->accept (*this);
+  }
+
+  void
+  tree_evaluator::visit_decl_elt (tree_decl_elt& elt)
   {
     octave::tree_identifier *id = elt.ident ();
 
     if (id)
       {
-        id->mark_global ();
-
-        octave_lvalue ult = id->lvalue (this);
-
-        if (ult.is_undefined ())
-          {
-            octave::tree_expression *expr = elt.expression ();
-
-            octave_value init_val;
-
-            if (expr)
-              init_val = evaluate (expr);
-            else
-              init_val = Matrix ();
-
-            ult.assign (octave_value::op_asn_eq, init_val);
-          }
-      }
-  }
-
-  void
-  tree_evaluator::do_static_init (octave::tree_decl_elt& elt)
-  {
-    octave::tree_identifier *id = elt.ident ();
-
-    if (id)
-      {
-        id->mark_as_static ();
+        if (elt.is_global ())
+          id->mark_global ();
+        else if (elt.is_persistent ())
+          id->mark_as_static ();
+        else
+          error ("declaration list element not global or persistent");
 
         octave_lvalue ult = id->lvalue (this);
 
         if (ult.is_undefined ())
           {
             octave::tree_expression *expr = elt.expression ();
 
             octave_value init_val;
@@ -655,66 +652,16 @@ namespace octave
               init_val = evaluate (expr);
             else
               init_val = Matrix ();
 
             ult.assign (octave_value::op_asn_eq, init_val);
           }
       }
   }
-
-  void
-  tree_evaluator::visit_global_command (tree_global_command& cmd)
-  {
-    if (debug_mode)
-      do_breakpoint (cmd.is_breakpoint (true));
-
-    tree_decl_init_list *init_list = cmd.initializer_list ();
-
-    if (init_list)
-      {
-        // If we called init_list->accept (*this), we would need a way
-        // to tell tree_evaluator::visit_decl_init_list that we are
-        // evaluating a global init list.
-
-        for (tree_decl_elt *elt : *init_list)
-          do_global_init (*elt);
-      }
-  }
-
-  void
-  tree_evaluator::visit_persistent_command (tree_persistent_command& cmd)
-  {
-    if (debug_mode)
-      do_breakpoint (cmd.is_breakpoint (true));
-
-    tree_decl_init_list *init_list = cmd.initializer_list ();
-
-    if (init_list)
-      {
-        // If we called init_list->accept (*this), we would need a way
-        // to tell tree_evaluator::visit_decl_init_list that we are
-        // evaluating a static init list.
-
-        for (tree_decl_elt *elt : *init_list)
-          do_static_init (*elt);
-      }
-  }
-
-  void
-  tree_evaluator::visit_decl_elt (tree_decl_elt&)
-  {
-    panic_impossible ();
-  }
-
-  void
-  tree_evaluator::visit_decl_init_list (tree_decl_init_list&)
-  {
-    panic_impossible ();
-  }
 }
 
 // Decide if it's time to quit a for or while loop.
 static inline bool
 quit_loop_now (void)
 {
   octave_quit ();
 
diff --git a/libinterp/parse-tree/pt-eval.h b/libinterp/parse-tree/pt-eval.h
--- a/libinterp/parse-tree/pt-eval.h
+++ b/libinterp/parse-tree/pt-eval.h
@@ -113,24 +113,22 @@ namespace octave
     void visit_compound_binary_expression (tree_compound_binary_expression&);
 
     void visit_break_command (tree_break_command&);
 
     void visit_colon_expression (tree_colon_expression&);
 
     void visit_continue_command (tree_continue_command&);
 
-    void visit_global_command (tree_global_command&);
+    void visit_decl_command (tree_decl_command&);
 
-    void visit_persistent_command (tree_persistent_command&);
+    void visit_decl_init_list (tree_decl_init_list&);
 
     void visit_decl_elt (tree_decl_elt&);
 
-    void visit_decl_init_list (tree_decl_init_list&);
-
     void visit_simple_for_command (tree_simple_for_command&);
 
     void visit_complex_for_command (tree_complex_for_command&);
 
     void visit_octave_user_script (octave_user_script&);
 
     void visit_octave_user_function (octave_user_function&);
 
@@ -276,20 +274,16 @@ namespace octave
 
     bool eval_decl_elt (tree_decl_elt *elt);
 
     bool switch_case_label_matches (tree_switch_case *expr,
                                     const octave_value& val);
 
   private:
 
-    void do_global_init (octave::tree_decl_elt& elt);
-
-    void do_static_init (octave::tree_decl_elt& elt);
-
     void do_breakpoint (tree_statement& stmt) const;
 
     void do_breakpoint (bool is_breakpoint,
                         bool is_end_of_fcn_or_script = false) const;
 
     virtual octave_value
     do_keyboard (const octave_value_list& args = octave_value_list ()) const;
 
diff --git a/libinterp/parse-tree/pt-jit.h b/libinterp/parse-tree/pt-jit.h
--- a/libinterp/parse-tree/pt-jit.h
+++ b/libinterp/parse-tree/pt-jit.h
@@ -84,24 +84,22 @@ public:
   void visit_boolean_expression (tree_boolean_expression&);
 
   void visit_break_command (tree_break_command&);
 
   void visit_colon_expression (tree_colon_expression&);
 
   void visit_continue_command (tree_continue_command&);
 
-  void visit_global_command (tree_global_command&);
+  void visit_decl_command (tree_decl_command&);
 
-  void visit_persistent_command (tree_persistent_command&);
+  void visit_decl_init_list (tree_decl_init_list&);
 
   void visit_decl_elt (tree_decl_elt&);
 
-  void visit_decl_init_list (tree_decl_init_list&);
-
   void visit_simple_for_command (tree_simple_for_command&);
 
   void visit_complex_for_command (tree_complex_for_command&);
 
   void visit_octave_user_script (octave_user_script&);
 
   void visit_octave_user_function (octave_user_function&);
 
diff --git a/libinterp/parse-tree/pt-pr-code.cc b/libinterp/parse-tree/pt-pr-code.cc
--- a/libinterp/parse-tree/pt-pr-code.cc
+++ b/libinterp/parse-tree/pt-pr-code.cc
@@ -143,59 +143,29 @@ namespace octave
   tree_print_code::visit_continue_command (tree_continue_command&)
   {
     indent ();
 
     os << "continue";
   }
 
   void
-  tree_print_code::do_decl_command (tree_decl_command& cmd)
+  tree_print_code::visit_decl_command (tree_decl_command& cmd)
   {
     indent ();
 
     os << cmd.name () << " ";
 
     tree_decl_init_list *init_list = cmd.initializer_list ();
 
     if (init_list)
       init_list->accept (*this);
   }
 
   void
-  tree_print_code::visit_global_command (tree_global_command& cmd)
-  {
-    do_decl_command (cmd);
-  }
-
-  void
-  tree_print_code::visit_persistent_command (tree_persistent_command& cmd)
-  {
-    do_decl_command (cmd);
-  }
-
-  void
-  tree_print_code::visit_decl_elt (tree_decl_elt& cmd)
-  {
-    tree_identifier *id = cmd.ident ();
-
-    if (id)
-      id->accept (*this);
-
-    tree_expression *expr = cmd.expression ();
-
-    if (expr)
-      {
-        os << " = ";
-
-        expr->accept (*this);
-      }
-  }
-
-  void
   tree_print_code::visit_decl_init_list (tree_decl_init_list& lst)
   {
     tree_decl_init_list::iterator p = lst.begin ();
 
     while (p != lst.end ())
       {
         tree_decl_elt *elt = *p++;
 
@@ -205,16 +175,34 @@ namespace octave
 
             if (p != lst.end ())
               os << ", ";
           }
       }
   }
 
   void
+  tree_print_code::visit_decl_elt (tree_decl_elt& cmd)
+  {
+    tree_identifier *id = cmd.ident ();
+
+    if (id)
+      id->accept (*this);
+
+    tree_expression *expr = cmd.expression ();
+
+    if (expr)
+      {
+        os << " = ";
+
+        expr->accept (*this);
+      }
+  }
+
+  void
   tree_print_code::visit_simple_for_command (tree_simple_for_command& cmd)
   {
     print_comment_list (cmd.leading_comment ());
 
     indent ();
 
     os << (cmd.in_parallel () ? "parfor " : "for ");
 
diff --git a/libinterp/parse-tree/pt-pr-code.h b/libinterp/parse-tree/pt-pr-code.h
--- a/libinterp/parse-tree/pt-pr-code.h
+++ b/libinterp/parse-tree/pt-pr-code.h
@@ -69,24 +69,22 @@ namespace octave
     void visit_binary_expression (tree_binary_expression&);
 
     void visit_break_command (tree_break_command&);
 
     void visit_colon_expression (tree_colon_expression&);
 
     void visit_continue_command (tree_continue_command&);
 
-    void visit_global_command (tree_global_command&);
+    void visit_decl_command (tree_decl_command&);
 
-    void visit_persistent_command (tree_persistent_command&);
+    void visit_decl_init_list (tree_decl_init_list&);
 
     void visit_decl_elt (tree_decl_elt&);
 
-    void visit_decl_init_list (tree_decl_init_list&);
-
     void visit_simple_for_command (tree_simple_for_command&);
 
     void visit_complex_for_command (tree_complex_for_command&);
 
     void visit_octave_user_script (octave_user_script&);
 
     void visit_octave_user_function (octave_user_function&);
 
@@ -166,18 +164,16 @@ namespace octave
     int curr_print_indent_level;
 
     // TRUE means we are at the beginning of a line.
     bool beginning_of_line;
 
     // Nonzero means we are not printing newlines and indenting.
     int suppress_newlines;
 
-    void do_decl_command (tree_decl_command& cmd);
-
     void reset_indent_level (void) { curr_print_indent_level = 0; }
 
     void increment_indent_level (void) { curr_print_indent_level += 2; }
 
     void decrement_indent_level (void) { curr_print_indent_level -= 2; }
 
     void newline (const char *alt_txt = ", ");
 
diff --git a/libinterp/parse-tree/pt-walk.h b/libinterp/parse-tree/pt-walk.h
--- a/libinterp/parse-tree/pt-walk.h
+++ b/libinterp/parse-tree/pt-walk.h
@@ -40,20 +40,19 @@ namespace octave
   class tree_anon_fcn_handle;
   class tree_argument_list;
   class tree_binary_expression;
   class tree_boolean_expression;
   class tree_compound_binary_expression;
   class tree_break_command;
   class tree_colon_expression;
   class tree_continue_command;
-  class tree_global_command;
-  class tree_persistent_command;
+  class tree_decl_command;
+  class tree_decl_init_list;
   class tree_decl_elt;
-  class tree_decl_init_list;
   class tree_simple_for_command;
   class tree_complex_for_command;
   class tree_function_def;
   class tree_identifier;
   class tree_if_clause;
   class tree_if_command;
   class tree_if_command_list;
   class tree_switch_case;
@@ -134,20 +133,17 @@ namespace octave
 
     virtual void
     visit_colon_expression (tree_colon_expression&) = 0;
 
     virtual void
     visit_continue_command (tree_continue_command&) = 0;
 
     virtual void
-    visit_global_command (tree_global_command&) = 0;
-
-    virtual void
-    visit_persistent_command (tree_persistent_command&) = 0;
+    visit_decl_command (tree_decl_command&) = 0;
 
     virtual void
     visit_decl_elt (tree_decl_elt&) = 0;
 
     virtual void
     visit_decl_init_list (tree_decl_init_list&) = 0;
 
     virtual void
