# HG changeset patch
# User Rik <rik@octave.org>
# Date 1384297877 28800
#      Tue Nov 12 15:11:17 2013 -0800
# Node ID 6a381b9ae05595dcd1133181f56a9a22e1bc0be8
# Parent  c757f5421ecca326cf05af1d3efb7c90279b23cb
assert.m: Modify 4 failing %!error tests to accept 3 digit exponents for MinGW.

* scripts/testfun/assert.m: Modify regular expression in %!error block
"expected result" to accept either 2 or 3 digit exponents.

diff --git a/scripts/testfun/assert.m b/scripts/testfun/assert.m
--- a/scripts/testfun/assert.m
+++ b/scripts/testfun/assert.m
@@ -400,18 +400,18 @@ endfunction
 ## scalars
 %!error <Dimensions don't match> assert (3, [3,3])
 %!error <Dimensions don't match> assert (3, [3,3; 3,3])
 %!error <Dimensions don't match> assert ([3,3; 3,3], 3)
 %!assert (3, 3)
 %!error <Abs err 1 exceeds tol> assert (3, 4)
 %!assert (3+eps, 3, eps)
 %!assert (3, 3+eps, eps)
-%!error <Abs err 4.4409e-16 exceeds tol> assert (3+2*eps, 3, eps)
-%!error <Abs err 4.4409e-16 exceeds tol> assert (3, 3+2*eps, eps)
+%!error <Abs err 4.4409e-0?16 exceeds tol> assert (3+2*eps, 3, eps)
+%!error <Abs err 4.4409e-0?16 exceeds tol> assert (3, 3+2*eps, eps)
 
 ## vectors
 %!assert ([1,2,3],[1,2,3]);
 %!assert ([1;2;3],[1;2;3]);
 %!error <Abs err 1 exceeds tol 0> assert ([2,2,3,3],[1,2,3,4]);
 %!error <Abs err 1 exceeds tol 0.5> assert ([2,2,3,3],[1,2,3,4],0.5);
 %!error <Rel err 1 exceeds tol 0.1> assert ([2,2,3,5],[1,2,3,4],-0.1);
 %!error <Abs err 1 exceeds tol 0> assert ([6;6;7;7],[5;6;7;8]);
@@ -438,19 +438,19 @@ endfunction
 ## must give a small tolerance for floating point errors on relative
 %!assert (100+100*eps, 100, -2*eps)
 %!assert (100, 100+100*eps, -2*eps)
 %!error <Rel err .* exceeds tol> assert (100+300*eps, 100, -2*eps)
 %!error <Rel err .* exceeds tol> assert (100, 100+300*eps, -2*eps)
 
 ## test relative vs. absolute tolerances
 %!test  assert (0.1+eps, 0.1,  2*eps);
-%!error <Rel err 2.2204e-15 exceeds tol> assert (0.1+eps, 0.1, -2*eps);
+%!error <Rel err 2.2204e-0?15 exceeds tol> assert (0.1+eps, 0.1, -2*eps);
 %!test  assert (100+100*eps, 100, -2*eps);
-%!error <Abs err 2.8422e-14 exceeds tol> assert (100+100*eps, 100,  2*eps);
+%!error <Abs err 2.8422e-0?14 exceeds tol> assert (100+100*eps, 100,  2*eps);
 
 ## Corner case of relative tolerance with 0 divider
 %!error <Abs err 2 exceeds tol 0.1> assert (2, 0, -0.1)
 
 ## Extra checking of inputs when tolerance unspecified.
 %!error <Class single != double> assert (single (1), 1)
 %!error <Class uint8 != uint16> assert (uint8 (1), uint16 (1))
 %!error <sparse != non-sparse> assert (sparse([1]), [1])
