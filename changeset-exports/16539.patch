# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1366269588 14400
#      Thu Apr 18 03:19:48 2013 -0400
# Node ID 8ea8df0747e93dfcaf272a157af4b47deb98bb51
# Parent  8e180eac78d06b942a43fc71120280007049f78d
make undo button and menu item work for command window

* main-window.h, main-window.cc (main_window::handle_undo_request,
main_window::command_window_undo_callback): New functions.
(main_window::construct_edit_menu): Connect _undo_action::triggered to
main_window::handle_undo_request.
* cmd-edit.h, cmd-edit.cc (command_window::redisplay,
command_window::do_redisplay, command_window::undo,
command_window::do_undo, gnu_readline::do_redisplay,
gnu_readline::do_undo): New functions.
* oct-rl-edit.h, oct-rl-edit.c (octave_rl_do_undo): New function.

diff --git a/libgui/src/main-window.cc b/libgui/src/main-window.cc
--- a/libgui/src/main-window.cc
+++ b/libgui/src/main-window.cc
@@ -165,16 +165,22 @@ main_window::handle_rename_variable_requ
 {
   name_pair names (old_name.toStdString (), new_name.toStdString ());
 
   octave_link::post_event (this, &main_window::rename_variable_callback,
                            names);
 }
 
 void
+main_window::handle_undo_request (void)
+{
+  octave_link::post_event (this, &main_window::command_window_undo_callback);
+}
+
+void
 main_window::handle_clear_command_window_request (void)
 {
   octave_link::post_event (this, &main_window::clear_command_window_callback);
 }
 
 void
 main_window::handle_clear_history_request (void)
 {
@@ -1297,16 +1303,19 @@ main_window::construct_tool_bar (void)
   connect (_current_directory_combo_box->lineEdit(), SIGNAL (returnPressed ()),
             this, SLOT (accept_directory_line_edit ()));
 
   connect (current_dir_search, SIGNAL (triggered ()),
            this, SLOT (browse_for_directory ()));
 
   connect (current_dir_up, SIGNAL (triggered ()),
            this, SLOT (change_directory_up ()));
+
+  connect (_undo_action, SIGNAL (triggered ()),
+           this, SLOT (handle_undo_request ()));
 }
 
 void
 main_window::save_workspace_callback (const std::string& file)
 {
   Fsave (ovl (file));
 }
 
@@ -1332,23 +1341,29 @@ main_window::rename_variable_callback (c
   // if (status)
     octave_link::set_workspace (true, symbol_table::workspace_info ());
 
   //  else
   //    ; // we need an octave_link action that runs a GUI error option.
 }
 
 void
+main_window::command_window_undo_callback (void)
+{
+  command_editor::undo ();
+  command_editor::redisplay ();
+}
+
+void
 main_window::clear_command_window_callback (void)
 {
   Fclc ();
   command_editor::interrupt (true);
 }
 
-
 void
 main_window::clear_history_callback (void)
 {
   Fhistory (ovl ("-c"));
 }
 
 void
 main_window::change_directory_callback (const std::string& directory)
diff --git a/libgui/src/main-window.h b/libgui/src/main-window.h
--- a/libgui/src/main-window.h
+++ b/libgui/src/main-window.h
@@ -84,16 +84,17 @@ public slots:
   void report_status_message (const QString& statusMessage);
   void handle_save_workspace_request (void);
   void handle_load_workspace_request (const QString& file = QString ());
   void handle_clear_command_window_request (void);
   void handle_clear_workspace_request (void);
   void handle_clear_history_request (void);
   void handle_rename_variable_request (const QString& old_name,
                                        const QString& new_name);
+  void handle_undo_request (void);
   void new_file (const QString& commands = QString ());
   void open_file (const QString& file_name = QString ());
   void open_online_documentation_page (void);
   void open_bug_tracker_page (void);
   void open_octave_forge_page (void);
   void open_agora_page (void);
   void process_settings_dialog_request (void);
   void show_about_octave (void);
@@ -176,16 +177,18 @@ private:
   void establish_octave_link (void);
 
   void save_workspace_callback (const std::string& file);
 
   void load_workspace_callback (const std::string& file);
 
   void rename_variable_callback (const name_pair& names);
 
+  void command_window_undo_callback (void);
+
   void clear_command_window_callback (void);
 
   void clear_workspace_callback (void);
 
   void clear_history_callback (void);
 
   void change_directory_callback (const std::string& directory);
 
diff --git a/liboctave/util/cmd-edit.cc b/liboctave/util/cmd-edit.cc
--- a/liboctave/util/cmd-edit.cc
+++ b/liboctave/util/cmd-edit.cc
@@ -81,16 +81,18 @@ public:
   void do_set_input_stream (FILE *f);
 
   FILE *do_get_input_stream (void);
 
   void do_set_output_stream (FILE *f);
 
   FILE *do_get_output_stream (void);
 
+  void do_redisplay (void);
+
   int do_terminal_rows (void);
 
   int do_terminal_cols (void);
 
   void do_clear_screen (bool skip_redisplay);
 
   void do_resize_terminal (void);
 
@@ -138,16 +140,18 @@ public:
   std::string do_get_line_buffer (void) const;
 
   void do_insert_text (const std::string& text);
 
   void do_newline (void);
 
   void do_accept_line (void);
 
+  bool do_undo (void);
+
   void do_clear_undo_list (void);
 
   void set_startup_hook (startup_hook_fcn f);
 
   void restore_startup_hook (void);
 
   void set_event_hook (event_hook_fcn f);
 
@@ -287,16 +291,22 @@ gnu_readline::do_set_output_stream (FILE
 }
 
 FILE *
 gnu_readline::do_get_output_stream (void)
 {
   return ::octave_rl_get_output_stream ();
 }
 
+void
+gnu_readline::do_redisplay (void)
+{
+  ::octave_rl_redisplay ();
+}
+
 // GNU readline handles SIGWINCH, so these values have a good chance
 // of being correct even if the window changes size (they may be
 // wrong if, for example, the luser changes the window size while the
 // pager is running, and the signal is handled by the pager instead of
 // us.
 
 int
 gnu_readline::do_terminal_rows (void)
@@ -525,16 +535,22 @@ gnu_readline::do_newline (void)
 }
 
 void
 gnu_readline::do_accept_line (void)
 {
   command_accept_line (1, '\n');
 }
 
+bool
+gnu_readline::do_undo (void)
+{
+  return ::octave_rl_do_undo ();
+}
+
 void
 gnu_readline::do_clear_undo_list ()
 {
   ::octave_rl_clear_undo_list ();
 }
 
 void
 gnu_readline::set_startup_hook (startup_hook_fcn f)
@@ -956,16 +972,23 @@ command_editor::set_output_stream (FILE 
 
 FILE *
 command_editor::get_output_stream (void)
 {
   return (instance_ok ())
     ? instance->do_get_output_stream () : 0;
 }
 
+void
+command_editor::redisplay (void)
+{
+  if (instance_ok ())
+    instance->do_redisplay ();
+}
+
 int
 command_editor::terminal_rows (void)
 {
   return (instance_ok ())
     ? instance->do_terminal_rows () : -1;
 }
 
 int
@@ -1172,16 +1195,22 @@ command_editor::newline (void)
 
 void
 command_editor::accept_line (void)
 {
   if (instance_ok ())
     instance->do_accept_line ();
 }
 
+bool
+command_editor::undo (void)
+{
+  return instance_ok () ? instance->do_undo () : false;
+}
+
 void
 command_editor::clear_undo_list (void)
 {
   if (instance_ok ())
     instance->do_clear_undo_list ();
 }
 
 void
diff --git a/liboctave/util/cmd-edit.h b/liboctave/util/cmd-edit.h
--- a/liboctave/util/cmd-edit.h
+++ b/liboctave/util/cmd-edit.h
@@ -66,16 +66,18 @@ public:
   static void set_input_stream (FILE *f);
 
   static FILE *get_input_stream (void);
 
   static void set_output_stream (FILE *f);
 
   static FILE *get_output_stream (void);
 
+  static void redisplay (void);
+
   static int terminal_rows (void);
 
   static int terminal_cols (void);
 
   static void clear_screen (bool skip_redisplay = false);
 
   static void resize_terminal (void);
 
@@ -122,16 +124,18 @@ public:
   static std::string get_line_buffer (void);
 
   static void insert_text (const std::string& text);
 
   static void newline (void);
 
   static void accept_line (void);
 
+  static bool undo (void);
+
   static void clear_undo_list (void);
 
   static void add_startup_hook (startup_hook_fcn f);
 
   static void remove_startup_hook (startup_hook_fcn f);
 
   static void add_event_hook (event_hook_fcn f);
 
@@ -208,16 +212,18 @@ protected:
   virtual void do_set_input_stream (FILE *) = 0;
 
   virtual FILE *do_get_input_stream (void) = 0;
 
   virtual void do_set_output_stream (FILE *) = 0;
 
   virtual FILE *do_get_output_stream (void) = 0;
 
+  virtual void do_redisplay (void) { }
+
   virtual int do_terminal_rows (void) { return 24; }
 
   virtual int do_terminal_cols (void) { return 80; }
 
   virtual void do_clear_screen (bool) { }
 
   virtual void do_resize_terminal (void) { }
 
@@ -266,16 +272,18 @@ protected:
   virtual std::string do_get_line_buffer (void) const = 0;
 
   virtual void do_insert_text (const std::string&) = 0;
 
   virtual void do_newline (void) = 0;
 
   virtual void do_accept_line (void) = 0;
 
+  virtual bool do_undo (void) { return false; }
+
   virtual void do_clear_undo_list (void) { }
 
   virtual void set_startup_hook (startup_hook_fcn) { }
 
   virtual void restore_startup_hook (void) { }
 
   virtual void set_event_hook (startup_hook_fcn) { }
 
diff --git a/liboctave/util/oct-rl-edit.c b/liboctave/util/oct-rl-edit.c
--- a/liboctave/util/oct-rl-edit.c
+++ b/liboctave/util/oct-rl-edit.c
@@ -136,16 +136,22 @@ octave_rl_newline (int count, int key)
 }
 
 const char *
 octave_rl_line_buffer (void)
 {
   return rl_line_buffer;
 }
 
+int
+octave_rl_do_undo (void)
+{
+  return rl_do_undo ();
+}
+
 void
 octave_rl_clear_undo_list (void)
 {
   if (rl_undo_list)
     {
       rl_free_undo_list ();
 
       rl_undo_list = 0;
diff --git a/liboctave/util/oct-rl-edit.h b/liboctave/util/oct-rl-edit.h
--- a/liboctave/util/oct-rl-edit.h
+++ b/liboctave/util/oct-rl-edit.h
@@ -41,17 +41,17 @@ typedef int (*rl_char_is_quoted_fcn_ptr)
 
 typedef int (*rl_command_fcn_ptr) (int, int);
 
 #ifdef __cplusplus
 extern "C"
 {
 #endif
 
-  extern void octave_rl_redisplay (void);
+extern void octave_rl_redisplay (void);
 
 extern int octave_rl_screen_height (void);
 
 extern int octave_rl_screen_width (void);
 
 extern void octave_rl_enable_paren_matching (int);
 
 extern void octave_rl_init (void);
@@ -63,16 +63,18 @@ extern void octave_rl_resize_terminal (v
 extern void octave_rl_restore_terminal_state (void);
 
 extern void octave_rl_insert_text (const char *);
 
 extern int octave_rl_newline (int, int);
 
 extern const char *octave_rl_line_buffer (void);
 
+extern int octave_rl_do_undo (void);
+
 extern void octave_rl_clear_undo_list (void);
 
 extern void octave_rl_set_name (const char *);
 
 extern char *octave_rl_readline (const char *);
 
 extern void octave_rl_set_input_stream (FILE *);
 
