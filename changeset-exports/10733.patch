# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1277464965 14400
#      Fri Jun 25 07:22:45 2010 -0400
# Node ID f72a761a784c19e44807c8ab00e90a34f9235146
# Parent  9d95d8ab7c3accbe538411228e8786bf0864c5c9
eliminate code duplication in reset_default_properties methods

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,15 @@
+2010-06-25  John W. Eaton  <jwe@octave.org>
+
+	* graphics.cc (reset_default_properties): New static function.
+	(root_figure::reset_default_properties,
+	figure::reset_default_properties, axes::reset_default_properties):
+	Use it to avoid duplicated code.
+
 2010-06-24  Rik <octave@nomad.inbox5.com>
 
         * octave.cc: Add [FILE] to octave usage string (bug #30258).
 
 2010-06-23  David Bateman  <dbateman@free.fr>
 
 	* graphics.cc (void root_figure::reset_default_properties (void),
 	void figure::reset_default_properties (void),
diff --git a/src/graphics.cc b/src/graphics.cc
--- a/src/graphics.cc
+++ b/src/graphics.cc
@@ -2620,18 +2620,18 @@ root_figure::properties::remove_child (c
   xset (0, "currentfigure", cf.value ());
   
   base_properties::remove_child (gh);
 }
 
 property_list
 root_figure::factory_properties = root_figure::init_factory_properties ();
 
-void
-root_figure::reset_default_properties (void)
+static void
+reset_default_properties (property_list& default_properties)
 {
   property_list new_defaults;
 
   for (property_list::plist_map_const_iterator p = default_properties.begin ();
        p != default_properties.end (); p++)
     {
       const property_list::pval_map_type pval_map = p->second;
       std::string prefix = p->first;
@@ -2645,19 +2645,26 @@ root_figure::reset_default_properties (v
           if (prefix == "axes" && (s == "position" || s == "units"))
             new_defaults.set (prefix + s, q->second);
           else if (prefix == "figure" && (s == "position" || s == "units" 
                                           || s == "windowstyle" 
                                           || s == "paperunits"))
             new_defaults.set (prefix + s, q->second);
         }
     }
+
   default_properties = new_defaults;
 }
 
+void
+root_figure::reset_default_properties (void)
+{
+  ::reset_default_properties (default_properties);
+}
+
 // ---------------------------------------------------------------------
 
 void
 figure::properties::set_currentaxes (const octave_value& v)
 {
   graphics_handle val (v);
 
   if (error_state)
@@ -2795,39 +2802,17 @@ figure::get_default (const caseless_str&
     }
 
   return retval;
 }
 
 void
 figure::reset_default_properties (void)
 {
-  property_list new_defaults;
-
-  for (property_list::plist_map_const_iterator p = default_properties.begin ();
-       p != default_properties.end (); p++)
-    {
-      const property_list::pval_map_type pval_map = p->second;
-      std::string prefix = p->first;
-      
-      for (property_list::pval_map_const_iterator q = pval_map.begin ();
-           q != pval_map.end ();
-           q++)
-        {
-          std::string s = q->first;
-
-          if (prefix == "axes" && (s == "position" || s == "units"))
-            new_defaults.set (prefix + s, q->second);
-          else if (prefix == "figure" && (s == "position" || s == "units" 
-                                          || s == "windowstyle" 
-                                          || s == "paperunits"))
-            new_defaults.set (prefix + s, q->second);
-        }
-    }
-  default_properties = new_defaults;
+  ::reset_default_properties (default_properties);
 }
 
 // ---------------------------------------------------------------------
 
 void
 axes::properties::init (void)
 {
   position.add_constraint (dim_vector (1, 4));
@@ -4340,39 +4325,17 @@ axes::properties::clear_zoom_stack (void
     zoom_stack.pop_front ();
 
   unzoom ();
 }
 
 void
 axes::reset_default_properties (void)
 {
-  property_list new_defaults;
-
-  for (property_list::plist_map_const_iterator p = default_properties.begin ();
-       p != default_properties.end (); p++)
-    {
-      const property_list::pval_map_type pval_map = p->second;
-      std::string prefix = p->first;
-      
-      for (property_list::pval_map_const_iterator q = pval_map.begin ();
-           q != pval_map.end ();
-           q++)
-        {
-          std::string s = q->first;
-
-          if (prefix == "axes" && (s == "position" || s == "units"))
-            new_defaults.set (prefix + s, q->second);
-          else if (prefix == "figure" && (s == "position" || s == "units" 
-                                          || s == "windowstyle" 
-                                          || s == "paperunits"))
-            new_defaults.set (prefix + s, q->second);
-        }
-    }
-  default_properties = new_defaults;
+  ::reset_default_properties (default_properties);
 }
 
 // ---------------------------------------------------------------------
 
 Matrix
 line::properties::compute_xlim (void) const
 {
   Matrix m (1, 3);
