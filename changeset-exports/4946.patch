# HG changeset patch
# User jwe
# Date 1093973225 0
#      Tue Aug 31 17:27:05 2004 +0000
# Node ID 48a39e2b2ab771511701fcbccde0643381d416b9
# Parent  4bd917f8a4a7510de22db3089502133586837b81
[project @ 2004-08-31 17:27:04 by jwe]

diff --git a/doc/interpreter/strings.txi b/doc/interpreter/strings.txi
--- a/doc/interpreter/strings.txi
+++ b/doc/interpreter/strings.txi
@@ -59,17 +59,17 @@ Represents a literal backslash, @samp{\}
 
 @item \"
 Represents a literal double-quote character, @samp{"}.
 
 @item \'
 Represents a literal single-quote character, @samp{'}.
 
 @item \0
-Represents the ``nul'' character, control-@, ASCII code 0.
+Represents the ``nul'' character, control-@@, ASCII code 0.
 
 @item \a
 Represents the ``alert'' character, control-g, ASCII code 7.
 
 @item \b
 Represents a backspace, control-h, ASCII code 8.
 
 @item \f
diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,10 +1,12 @@
 2004-08-31  John W. Eaton  <jwe@octave.org>
 
+	* Makefile.in (EXTRAS): Add intNDArray.cc to the list.
+
 	* data-conv.h (oct_data_conv::data_type): Include sized types.
 	Explicitly number enum elements.
 
 	* data-conv.cc (oct_data_conv::string_to_data_type (const
 	std::string&, int&, oct_data_conv::data_type&,
 	oct_data_conv::data_type&)): New function.
 	(oct_data_conv::string_to_data_type (const std::string&, int&,
 	oct_data_conv::data_type&)): New function.
diff --git a/liboctave/Makefile.in b/liboctave/Makefile.in
--- a/liboctave/Makefile.in
+++ b/liboctave/Makefile.in
@@ -124,17 +124,17 @@ LIBOCT_PATHSEARCH_C_SOURCES := kpse-xfns
 LIBOCT_PATHSEARCH_SOURCES := \
 	$(LIBOCT_PATHSEARCH_C_SOURCES) $(LIBOCT_PATHSEARCH_CXX_SOURCES)
 
 SOURCES := \
 	$(LIBOCTAVE_SOURCES) \
 	$(LIBOCT_READLINE_SOURCES) \
 	$(LIBOCT_PATHSEARCH_SOURCES)
 
-EXTRAS := mx-inlines.cc kpse.cc
+EXTRAS := mx-inlines.cc kpse.cc intNDArray.cc
 
 INCLUDES_FOR_INSTALL := $(INCLUDES) $(TEMPLATE_SRC) $(EXTRAS)
 
 DISTFILES := Makefile.in ChangeLog mk-ops.awk mx-ops vx-ops \
 	$(SOURCES) $(INCLUDES) $(EXTRAS) $(OPTS_INC_DATA)
 
 ifeq ($(SHARED_LIBS), true)
   BINDISTLIBS = liboctave/liboctave
diff --git a/scripts/control/base/bode.m b/scripts/control/base/bode.m
--- a/scripts/control/base/bode.m
+++ b/scripts/control/base/bode.m
@@ -75,17 +75,16 @@
 ## @item mag
 ## @itemx phase
 ## the magnitude and phase of the frequency response @math{G(jw)} or
 ## @math{G(@code{exp}(jwT))} at the selected frequency values.
 ## @item w
 ## the vector of frequency values used
 ## @end table
 ##
-## @strong{Notes}
 ## @enumerate
 ## @item If no output arguments are given, e.g.,
 ## @example
 ## bode(sys);
 ## @end example
 ## bode plots the results to the screen.  Descriptive labels are
 ## automatically placed.
 ##
diff --git a/scripts/control/base/ctrb.m b/scripts/control/base/ctrb.m
--- a/scripts/control/base/ctrb.m
+++ b/scripts/control/base/ctrb.m
@@ -22,17 +22,17 @@
 ## Build controllability matrix
 ## @example
 ##              2       n-1
 ## Qs = [ B AB A B ... A   B ]
 ## @end example
 ##
 ## of a system data structure or the pair (@var{a}, @var{b}).
 ##
-## @strong{Note} @code{ctrb} forms the controllability matrix.
+## @code{ctrb} forms the controllability matrix.
 ## The numerical properties of @code{is_controllable}
 ## are much better for controllability tests.
 ## @end deftypefn
 
 ## Author: Kai P. Mueller <mueller@ifr.ing.tu-bs.de>
 ## Created: November 4, 1997
 ## based on is_controllable.m of Scottedward Hodel
 
diff --git a/scripts/control/hinf/is_dgkf.m b/scripts/control/hinf/is_dgkf.m
--- a/scripts/control/hinf/is_dgkf.m
+++ b/scripts/control/hinf/is_dgkf.m
@@ -55,23 +55,23 @@
 ## dimensions of @var{w}, @var{z}
 ## @item      a
 ## system @math{A} matrix
 ## @item      bw
 ## (@var{n} x @var{nw}) @var{qw}-transformed disturbance input matrix
 ## @item      bu
 ## (@var{n} x @var{nu}) @var{ru}-transformed controlled input matrix;
 ##
-## @strong{Note} @math{B = [Bw Bu]}
+## @math{B = [Bw Bu]}
 ## @item      cz
 ## (@var{nz} x @var{n}) Qz-transformed error output matrix
 ## @item      cy
 ## (@var{ny} x @var{n}) @var{ry}-transformed measured output matrix
 ##
-## @strong{Note} @math{C = [Cz; Cy]}
+## @math{C = [Cz; Cy]}
 ## @item      dzu
 ## @item      dyw
 ## off-diagonal blocks of transformed system @math{D} matrix that enter
 ## @var{z}, @var{y} from @var{u}, @var{w} respectively
 ## @item      ru
 ## controlled input transformation matrix
 ## @item      ry
 ## observed output transformation matrix
diff --git a/scripts/control/obsolete/qzval.m b/scripts/control/obsolete/qzval.m
--- a/scripts/control/obsolete/qzval.m
+++ b/scripts/control/obsolete/qzval.m
@@ -27,17 +27,17 @@
 ## @iftex
 ## @tex
 ## $(A - \lambda B)$.
 ## @end tex
 ## @end iftex
 ##
 ## @var{a} and @var{b} must be real matrices.
 ##
-## @strong{Note} @code{qzval} is obsolete; use @code{qz} instead.
+## @code{qzval} is obsolete; use @code{qz} instead.
 ## @end deftypefn
 
 ## Author: A. S. Hodel <a.s.hodel@eng.auburn.edu>
 ## Created: July 1998
 
 function lam = qzval (A, B)
 
   warning("qzval is obsolete; calling qz instead")
diff --git a/scripts/control/system/c2d.m b/scripts/control/system/c2d.m
--- a/scripts/control/system/c2d.m
+++ b/scripts/control/system/c2d.m
@@ -39,17 +39,17 @@
 ## s = -----
 ##     T(z+1)
 ## @end example
 ## FIXME: This option exits with an error if @var{sys} is not purely
 ## continuous. (The @code{ex} option can handle mixed systems.)
 ## @item t
 ## sampling time; required if sys is purely continuous.
 ##
-## @strong{Note} If the 2nd argument is not a string, @code{c2d} assumes that
+## If the 2nd argument is not a string, @code{c2d} assumes that
 ## the 2nd argument is @var{t} and performs appropriate argument checks.
 ## @item "matched"
 ## Use the matched pole/zero equivalent transformation (currently only
 ## works for purely continuous SISO systems).
 ## @end table
 ##
 ## @strong{Outputs}
 ## @var{dsys} discrete time equivalent via zero-order hold,
@@ -61,17 +61,17 @@
 ## x = Ac x + Bc u
 ## @end example
 ## into a discrete time equivalent model
 ## @example
 ## x[n+1] = Ad x[n] + Bd u[n]
 ## @end example
 ## via the matrix exponential or bilinear transform
 ##
-## @strong{Note} This function adds the suffix  @code{_d}
+## This function adds the suffix  @code{_d}
 ## to the names of the new discrete states.
 ## @end deftypefn
 
 ## Author: R. Bruce Tenison <btenison@eng.auburn.edu>
 ## Created: October 1993
 ## Updated by John Ingram for system data structure August 1996
 
 function dsys = c2d (sys, opt, T)
diff --git a/scripts/control/system/ss.m b/scripts/control/system/ss.m
--- a/scripts/control/system/ss.m
+++ b/scripts/control/system/ss.m
@@ -67,17 +67,17 @@
 ##
 ## If @var{tsam} is 0, @math{outlist = []}.
 ##
 ## If @var{tsam} is greater than 0, @math{outlist = 1:@code{rows}(@var{c})}.
 ## @end table
 ##
 ## Unlike states, discrete/continous outputs may appear in any order.
 ##
-## @strong{Note} @code{sys2ss} returns a vector @var{yd} where
+## @code{sys2ss} returns a vector @var{yd} where
 ## @var{yd}(@var{outlist}) = 1; all other entries of @var{yd} are 0.
 ##
 ## @strong{Outputs}
 ## @var{outsys} = system data structure
 ##
 ## @strong{System partitioning}
 ##
 ## Suppose for simplicity that outlist specified
diff --git a/scripts/control/system/ss2sys.m b/scripts/control/system/ss2sys.m
--- a/scripts/control/system/ss2sys.m
+++ b/scripts/control/system/ss2sys.m
@@ -67,17 +67,17 @@
 ##
 ## If @var{tsam} is 0, @math{outlist = []}.
 ##
 ## If @var{tsam} is greater than 0, @math{outlist = 1:@code{rows}(@var{c})}.
 ## @end table
 ##
 ## Unlike states, discrete/continous outputs may appear in any order.
 ##
-## @strong{Note} @code{sys2ss} returns a vector @var{yd} where
+## @code{sys2ss} returns a vector @var{yd} where
 ## @var{yd}(@var{outlist}) = 1; all other entries of @var{yd} are 0.
 ##
 ## @strong{Outputs}
 ## @var{outsys} = system data structure
 ##
 ## @strong{System partitioning}
 ##
 ## Suppose for simplicity that outlist specified
diff --git a/scripts/control/system/sysgettype.m b/scripts/control/system/sysgettype.m
--- a/scripts/control/system/sysgettype.m
+++ b/scripts/control/system/sysgettype.m
@@ -23,17 +23,17 @@
 ## @strong{Inputs}
 ## @var{sys}: system data structure
 ##
 ## @strong{Outputs}
 ## @var{systype}: string indicating how the structure was initially
 ## constructed:
 ## values: @code{"ss"}, @code{"zp"}, or @code{"tf"}
 ##
-## @strong{Note} FIR initialized systems return @code{systype="tf"}.
+## FIR initialized systems return @code{systype="tf"}.
 ## @end deftypefn
 
 function systype = sysgettype (sys)
 
   if (! isstruct (sys))
     error ("sysgettype: input sys is not a structure");
   endif
 
diff --git a/scripts/strings/index.m b/scripts/strings/index.m
--- a/scripts/strings/index.m
+++ b/scripts/strings/index.m
@@ -22,17 +22,17 @@
 ## Return the position of the first occurrence of the string @var{t} in the
 ## string @var{s}, or 0 if no occurrence is found.  For example,
 ##
 ## @example
 ## index ("Teststring", "t")
 ##      @result{} 4
 ## @end example
 ##
-## @strong{Note:}  This function does not work for arrays of strings.
+## @strong{Caution:}  This function does not work for arrays of strings.
 ## @end deftypefn
 
 ## Author: Kurt Hornik <Kurt.Hornik@ci.tuwien.ac.at>
 ## Adapted-By: jwe
 
 function n = index (s, t)
 
   ## This is patterned after the AWK function of the same name.
diff --git a/scripts/strings/rindex.m b/scripts/strings/rindex.m
--- a/scripts/strings/rindex.m
+++ b/scripts/strings/rindex.m
@@ -22,17 +22,17 @@
 ## Return the position of the last occurrence of the string @var{t} in the
 ## string @var{s}, or 0 if no occurrence is found.  For example,
 ##
 ## @example
 ## rindex ("Teststring", "t")
 ##      @result{} 6
 ## @end example
 ##
-## @strong{Note:}  This function does not work for arrays of strings.
+## @strong{Caution:}  This function does not work for arrays of strings.
 ## @end deftypefn
 
 ## Author: Kurt Hornik <Kurt.Hornik@ci.tuwien.ac.at>
 ## Adapted-By: jwe
 
 function n = rindex (s, t)
 
   ## This is patterned after the AWK function of the same name.
diff --git a/scripts/strings/str2mat.m b/scripts/strings/str2mat.m
--- a/scripts/strings/str2mat.m
+++ b/scripts/strings/str2mat.m
@@ -18,17 +18,16 @@
 ## 02111-1307, USA.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} str2mat (@var{s_1}, @dots{}, @var{s_n})
 ## Return a matrix containing the strings @var{s_1}, @dots{}, @var{s_n} as
 ## its rows.  Each string is padded with blanks in order to form a valid
 ## matrix.
 ##
-## @strong{Note:}
 ## This function is modelled after @sc{Matlab}.  In Octave, you can create
 ## a matrix of strings by @code{[@var{s_1}; @dots{}; @var{s_n}]} even if
 ## the strings are not all the same length.
 ## @end deftypefn
 
 ## Author: Kurt Hornik <Kurt.Hornik@ci.tuwien.ac.at>
 ## Adapted-By: jwe
 
diff --git a/scripts/strings/strcmp.m b/scripts/strings/strcmp.m
--- a/scripts/strings/strcmp.m
+++ b/scripts/strings/strcmp.m
@@ -16,17 +16,17 @@
 ## along with Octave; see the file COPYING.  If not, write to the Free
 ## Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ## 02111-1307, USA.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} strcmp (@var{s1}, @var{s2})
 ## Compares two strings, returning 1 if they are the same, and 0 otherwise.
 ##
-## @strong{Note:}  For compatibility with @sc{Matlab}, Octave's strcmp
+## @strong{Caution:}  For compatibility with @sc{Matlab}, Octave's strcmp
 ## function returns 1 if the strings are equal, and 0 otherwise.  This is
 ## just the opposite of the corresponding C library function.
 ## @end deftypefn
 
 ## Author: jwe
 
 function retval = strcmp (s1, s2)
 
diff --git a/scripts/strings/substr.m b/scripts/strings/substr.m
--- a/scripts/strings/substr.m
+++ b/scripts/strings/substr.m
@@ -29,17 +29,16 @@
 ##   For example,
 ##
 ## @example
 ## substr ("This is a test string", 6, 9)
 ##      @result{} "is a test"
 ## @end example
 ##
 ## @quotation
-## @strong{Note:}
 ## This function is patterned after AWK.  You can get the same result by
 ## @code{@var{s} (@var{beg} : (@var{beg} + @var{len} - 1))}.
 ## @end quotation
 ## @end deftypefn
 
 ## Author: Kurt Hornik <Kurt.Hornik@ci.tuwien.ac.at>
 ## Adapted-By: jwe
 
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,18 @@
+2004-08-31  John W. Eaton  <jwe@octave.org>
+
+	* data.cc (fill_matrix, identity_matrix): Convert class name to
+	oct_data_conv::data_type and switch on that.
+	(identity_matrix (int, int)): New template.
+	(identity_matrix (int, int, const std::string&)): Use it.
+
+	* ov.h (octave_type_traits, octave_array_type_traits): Move here.
+	* oct-stream.cc: From here.
+
 2004-08-31  David Bateman  <dbateman@free.fr>
 
 	* data.cc (Fzeros, Fones, Feye): Update help text for optional
 	class argument.
 	(static octave_value identity_matrix (int, int, const std::string&)):
 	New function to create identity matrices with an arbitrary type.
 	(Feye): Call new version of identity matrix function, even for scalars.
 	(static octave_value fill_matrix (const octave_value_list&, double,
diff --git a/src/data.cc b/src/data.cc
--- a/src/data.cc
+++ b/src/data.cc
@@ -1203,41 +1203,34 @@ Return 1 if @var{a} is a matrix.  Otherw
 
 static octave_value
 fill_matrix (const octave_value_list& args, double val, const char *fcn)
 {
   octave_value retval;
 
   int nargin = args.length ();
 
-  std::string nm = "double";
-
-  int ndim = 0;
+  oct_data_conv::data_type dt = oct_data_conv::dt_double;
 
-  dim_vector dims;
+  dim_vector dims (1, 1);
   
-  // Check for type information.
-
   if (nargin > 0 && args(nargin-1).is_string ())
     {
-      nm = args(nargin-1).string_value();
+      std::string nm = args(nargin-1).string_value ();
       nargin--;
 
-      if (nm != "int8" && nm != "int16" && nm != "int32" && nm != "int64" &&
-	  nm != "uint8" && nm != "uint16" && nm != "uint32" && nm != "uint64"
-	  && nm != "double")
-	error ("%s: Unrecognized or illegal classname", fcn);
+      dt = oct_data_conv::string_to_data_type (nm);
+
+      if (error_state)
+	return retval;
     }
 
-  // determine matrix dimension
-
   switch (nargin)
     {
     case 0:
-      ndim = 0;
       break;
 
     case 1:
       get_dimensions (args(0), fcn, dims);
       break;
 
     default:
       {
@@ -1254,88 +1247,72 @@ fill_matrix (const octave_value_list& ar
 	      }
 	  }
       }
       break;
     }
 
   if (! error_state)
     {
-      ndim = dims.length ();
-
-      for (int i = ndim-1; i > 1; i--)
-	{
-	  if (dims(i) == 1)
-	    ndim--;
-	  else
-	    break;
-	}
-
-      dims.resize (ndim);
+      dims.chop_trailing_singletons ();
 
       check_dimensions (dims, fcn);
 
+      // XXX FIXME XXX -- perhaps this should be made extensible by
+      // using the class name to lookup a function to call to create
+      // the new value.
+
+      // Note that automatic narrowing will handle conversion from
+      // NDArray to scalar.
+
       if (! error_state)
 	{
+	  switch (dt)
+	    {
+	    case oct_data_conv::dt_int8:
+	      retval = int8NDArray (dims, val);
+	      break;
 
-#define INT_FILL_MATRIX(TYPE) \
-	  { \
-	    switch (ndim)	\
-	      { \
-	      case 0: \
-	        retval = octave_ ## TYPE (val); \
-	        break; \
-		  \
-	      default: \
-	        retval = TYPE ## NDArray (dims, val); \
-	        break; \
-	      } \
-	  }
+	    case oct_data_conv::dt_uint8:
+	      retval = uint8NDArray (dims, val);
+	      break;
+
+	    case oct_data_conv::dt_int16:
+	      retval = int16NDArray (dims, val);
+	      break;
+
+	    case oct_data_conv::dt_uint16:
+	      retval = uint16NDArray (dims, val);
+	      break;
+
+	    case oct_data_conv::dt_int32:
+	      retval = int32NDArray (dims, val);
+	      break;
 
-	  if (nm == "int8")
-	    INT_FILL_MATRIX (int8)
-	  else if (nm == "int16")
-	    INT_FILL_MATRIX (int16)
-	  else if (nm == "int32")
-	    INT_FILL_MATRIX (int32)
-	  else if (nm == "int64")
-	    INT_FILL_MATRIX (int64)
-	  else if (nm == "uint8")
-	    INT_FILL_MATRIX (uint8)
-	  else if (nm == "uint16")
-	    INT_FILL_MATRIX (uint16)
-	  else if (nm == "uint32")
-	    INT_FILL_MATRIX (uint32)
-	  else if (nm == "uint64")
-	    INT_FILL_MATRIX (uint64)
-	  else
-	    {
-	      // Construct either scalar, matrix or N-d array.
-	      switch (ndim)
-		{
-		case 0:
-		  retval = val;
-		  break;
+	    case oct_data_conv::dt_uint32:
+	      retval = uint32NDArray (dims, val);
+	      break;
+
+	    case oct_data_conv::dt_int64:
+	      retval = int64NDArray (dims, val);
+	      break;
 
-		case 1:
-		  retval = Matrix (dims(0), dims(0), val);
-		  break;
-
-		case 2:
-		  retval = Matrix (dims(0), dims(1), val);
-		  break;
+	    case oct_data_conv::dt_uint64:
+	      retval = uint64NDArray (dims, val);
+	      break;
 
-		default:
-		  retval = NDArray (dims, val);
-		  break;
-		}
+	    case oct_data_conv::dt_single: // XXX FIXME XXX
+	    case oct_data_conv::dt_double:
+	      retval = NDArray (dims, val);
+	      break;
+
+	    default:
+	      error ("%s: invalid class name", fcn);
+	      break;
 	    }
-
-#undef INT_FILL_MATRIX
-
 	}
     }
 
   return retval;
 }
 
 DEFUN (ones, args, ,
   "-*- texinfo -*-\n\
@@ -1379,82 +1356,111 @@ the specified type, like\n\
 @example\n\
 val = zeros (n,m, \"uint8\")\n\
 @end example\n\
 @end deftypefn")
 {
   return fill_matrix (args, 0.0, "zeros");
 }
 
+template <class MT>
+octave_value
+identity_matrix (int nr, int nc)
+{
+  octave_value retval;
+
+  typename octave_array_type_traits<MT>::element_type one (1);
+
+  if (nr == 1 && nc == 1)
+    retval = one;
+  else
+    {
+      dim_vector dims (nr, nc);
+
+      typename octave_array_type_traits<MT>::element_type zero (0);
+
+      MT m (dims, zero);
+
+      if (nr > 0 && nc > 0)
+	{
+	  int n = std::min (nr, nc);
+
+	  for (int i = 0; i < n; i++)
+	    m(i,i) = one;
+	}
+
+      retval = m;
+    }
+
+  return retval;
+}
+
 static octave_value
 identity_matrix (int nr, int nc, const std::string& nm)
 {
   octave_value retval;
 
-#define INT_EYE_MATRIX(TYPE) \
-  { \
-    if (nr == 1 && nc == 1) \
-      retval = octave_ ## TYPE (1); \
-    else \
-      { \
-	dim_vector dims (nr, nc); \
-	TYPE ## NDArray m (dims, octave_ ## TYPE (0));\
-	if (nr > 0 && nc > 0) \
-	  { \
-	    int n = std::min (nr, nc); \
-		\
-	    for (int i = 0; i < n; i++)	\
-	      m (i, i) = octave_ ## TYPE (1); \
-	  } \
-	retval = m; \
-      } \
-  }
+  oct_data_conv::data_type dt = oct_data_conv::string_to_data_type (nm);
+
+  // XXX FIXME XXX -- perhaps this should be made extensible by using
+  // the class name to lookup a function to call to create the new
+  // value.
+
+  if (! error_state)
+    {
+      switch (dt)
+	{
+	case oct_data_conv::dt_int8:
+	  retval = identity_matrix<int8NDArray> (nr, nc);
+	  break;
+
+	case oct_data_conv::dt_uint8:
+	  retval = identity_matrix<uint8NDArray> (nr, nc);
+	  break;
+
+	case oct_data_conv::dt_int16:
+	  retval = identity_matrix<int16NDArray> (nr, nc);
+	  break;
 
-  if (nm == "int8")
-    INT_EYE_MATRIX (int8)
-  else if (nm == "int16")
-    INT_EYE_MATRIX (int16)
-  else if (nm == "int32")
-    INT_EYE_MATRIX (int32)
-  else if (nm == "int64")
-    INT_EYE_MATRIX (int64)
-  else if (nm == "uint8")
-    INT_EYE_MATRIX (uint8)
-  else if (nm == "uint16")
-    INT_EYE_MATRIX (uint16)
-  else if (nm == "uint32")
-    INT_EYE_MATRIX (uint32)
-  else if (nm == "uint64")
-    INT_EYE_MATRIX (uint64)
-  else
-    {
-      if (nr == 1 && nc == 1)
-	retval = 1.0;
-      else
-	{
+	case oct_data_conv::dt_uint16:
+	  retval = identity_matrix<uint16NDArray> (nr, nc);
+	  break;
+
+	case oct_data_conv::dt_int32:
+	  retval = identity_matrix<int32NDArray> (nr, nc);
+	  break;
+
+	case oct_data_conv::dt_uint32:
+	  retval = identity_matrix<uint32NDArray> (nr, nc);
+	  break;
 
-	  Matrix m (nr, nc, 0.0);
-      
-	  if (nr > 0 && nc > 0)
-	    {
-	      int n = std::min (nr, nc);
+	case oct_data_conv::dt_int64:
+	  retval = identity_matrix<int64NDArray> (nr, nc);
+	  break;
+
+	case oct_data_conv::dt_uint64:
+	  retval = identity_matrix<uint64NDArray> (nr, nc);
+	  break;
 
-	      for (int i = 0; i < n; i++)
-		m (i, i) = 1.0;
-	    }
+	case oct_data_conv::dt_single: // XXX FIXME XXX
+	case oct_data_conv::dt_double:
+	  retval = identity_matrix<NDArray> (nr, nc);
+	  break;
 
-	  retval = m;
+	default:
+	  error ("eye: invalid class name");
+	  break;
 	}
     }
 
-#undef INT_EYE_MATRIX
-
   return retval;
 }
 
+#undef INT_EYE_MATRIX
+
 DEFUN (eye, args, ,
   "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} eye (@var{x})\n\
 @deftypefnx {Built-in Function} {} eye (@var{n}, @var{m})\n\
 @deftypefnx {Built-in Function} {} eye (..., @var{class})\n\
 Return an identity matrix.  If invoked with a single scalar argument,\n\
 @code{eye} returns a square matrix with the dimension specified.  If you\n\
 supply two scalar arguments, @code{eye} takes them to be the number of\n\
diff --git a/src/oct-stream.cc b/src/oct-stream.cc
--- a/src/oct-stream.cc
+++ b/src/oct-stream.cc
@@ -2765,71 +2765,16 @@ octave_stream::is_open (void) const
 
 void
 octave_stream::close (void)
 {
   if (stream_ok ("close"))
     rep->close ();
 }
 
-// XXX FIXME XXX -- these trait classes probably belong somehwere else...
-
-template <typename T>
-class
-octave_type_traits
-{
-public:
-  typedef T val_type;
-};
-
-#define OCTAVE_TYPE_TRAIT(T, VAL_T) \
-  template <> \
-  class \
-  octave_type_traits<T> \
-  { \
-  public: \
-    typedef VAL_T val_type; \
-  }
-
-OCTAVE_TYPE_TRAIT (octave_int8, octave_int8::val_type);
-OCTAVE_TYPE_TRAIT (octave_uint8, octave_uint8::val_type);
-OCTAVE_TYPE_TRAIT (octave_int16, octave_int16::val_type);
-OCTAVE_TYPE_TRAIT (octave_uint16, octave_uint16::val_type);
-OCTAVE_TYPE_TRAIT (octave_int32, octave_int32::val_type);
-OCTAVE_TYPE_TRAIT (octave_uint32, octave_uint32::val_type);
-OCTAVE_TYPE_TRAIT (octave_int64, octave_int64::val_type);
-OCTAVE_TYPE_TRAIT (octave_uint64, octave_uint64::val_type);
-
-template <typename T>
-class octave_array_type_traits
-{
-public:
-  typedef T element_type;
-};
-
-#define OCTAVE_ARRAY_TYPE_TRAIT(T, ELT_T) \
-  template <> \
-  class \
-  octave_array_type_traits<T> \
-  { \
-  public: \
-    typedef ELT_T element_type; \
-  }
-
-OCTAVE_ARRAY_TYPE_TRAIT (charNDArray, char);
-OCTAVE_ARRAY_TYPE_TRAIT (int8NDArray, octave_int8);
-OCTAVE_ARRAY_TYPE_TRAIT (uint8NDArray, octave_uint8);
-OCTAVE_ARRAY_TYPE_TRAIT (int16NDArray, octave_int16);
-OCTAVE_ARRAY_TYPE_TRAIT (uint16NDArray, octave_uint16);
-OCTAVE_ARRAY_TYPE_TRAIT (int32NDArray, octave_int32);
-OCTAVE_ARRAY_TYPE_TRAIT (uint32NDArray, octave_uint32);
-OCTAVE_ARRAY_TYPE_TRAIT (int64NDArray, octave_int64);
-OCTAVE_ARRAY_TYPE_TRAIT (uint64NDArray, octave_uint64);
-OCTAVE_ARRAY_TYPE_TRAIT (NDArray, double);
-
 template <class RET_T, class READ_T>
 octave_value
 do_read (octave_stream& strm, int nr, int nc, int block_size,
 	 int skip, bool do_float_fmt_conv,
 	 oct_mach_info::float_format from_flt_fmt, int& count)
 {
   octave_value retval;
 
diff --git a/src/ov.h b/src/ov.h
--- a/src/ov.h
+++ b/src/ov.h
@@ -946,15 +946,70 @@ extern void decrement_struct_indent (voi
 // Indentation level for lists.
 extern int list_indent;
 
 extern void increment_list_indent (void);
 extern void decrement_list_indent (void);
 
 extern void install_types (void);
 
+// XXX FIXME XXX -- these trait classes probably belong somehwere else...
+
+template <typename T>
+class
+octave_type_traits
+{
+public:
+  typedef T val_type;
+};
+
+#define OCTAVE_TYPE_TRAIT(T, VAL_T) \
+  template <> \
+  class \
+  octave_type_traits<T> \
+  { \
+  public: \
+    typedef VAL_T val_type; \
+  }
+
+OCTAVE_TYPE_TRAIT (octave_int8, octave_int8::val_type);
+OCTAVE_TYPE_TRAIT (octave_uint8, octave_uint8::val_type);
+OCTAVE_TYPE_TRAIT (octave_int16, octave_int16::val_type);
+OCTAVE_TYPE_TRAIT (octave_uint16, octave_uint16::val_type);
+OCTAVE_TYPE_TRAIT (octave_int32, octave_int32::val_type);
+OCTAVE_TYPE_TRAIT (octave_uint32, octave_uint32::val_type);
+OCTAVE_TYPE_TRAIT (octave_int64, octave_int64::val_type);
+OCTAVE_TYPE_TRAIT (octave_uint64, octave_uint64::val_type);
+
+template <typename T>
+class octave_array_type_traits
+{
+public:
+  typedef T element_type;
+};
+
+#define OCTAVE_ARRAY_TYPE_TRAIT(T, ELT_T) \
+  template <> \
+  class \
+  octave_array_type_traits<T> \
+  { \
+  public: \
+    typedef ELT_T element_type; \
+  }
+
+OCTAVE_ARRAY_TYPE_TRAIT (charNDArray, char);
+OCTAVE_ARRAY_TYPE_TRAIT (int8NDArray, octave_int8);
+OCTAVE_ARRAY_TYPE_TRAIT (uint8NDArray, octave_uint8);
+OCTAVE_ARRAY_TYPE_TRAIT (int16NDArray, octave_int16);
+OCTAVE_ARRAY_TYPE_TRAIT (uint16NDArray, octave_uint16);
+OCTAVE_ARRAY_TYPE_TRAIT (int32NDArray, octave_int32);
+OCTAVE_ARRAY_TYPE_TRAIT (uint32NDArray, octave_uint32);
+OCTAVE_ARRAY_TYPE_TRAIT (int64NDArray, octave_int64);
+OCTAVE_ARRAY_TYPE_TRAIT (uint64NDArray, octave_uint64);
+OCTAVE_ARRAY_TYPE_TRAIT (NDArray, double);
+
 #endif
 
 /*
 ;; Local Variables: ***
 ;; mode: C++ ***
 ;; End: ***
 */
