# HG changeset patch
# User Jacob Dawid <jacob.dawid@googlemail.com>
# Date 1337982991 -7200
#      Fri May 25 23:56:31 2012 +0200
# Branch gui
# Node ID ca733a66be7a42383ade49d6518e28f7040408a6
# Parent  dd19de736ee49c30ddc294cbe92f9cf20fb6d948
Fixed bug with not opening the editor when clicking a file from the file browser. Implemented watching the file on disk.

* MainWindow: Simplified opening file request calls.
* FileEditor: Added new slot that closes tabs without and index and made FileEditorTabs connect to it.
* FileEditorTab: Added QFileSystemWatcher and fixed bug with setting modified status on m_modified. Implemented message boxes for the cases that a file has been removed, renamed und modified from outside.

diff --git a/gui/src/MainWindow.cpp b/gui/src/MainWindow.cpp
--- a/gui/src/MainWindow.cpp
+++ b/gui/src/MainWindow.cpp
@@ -40,33 +40,23 @@ MainWindow::MainWindow (QWidget * parent
 MainWindow::~MainWindow ()
 {
   OctaveLink::instance ()->terminateOctave();
 }
 
 void
 MainWindow::newFile ()
 {
-  if (!m_fileEditor->isVisible ())
-    {
-      m_fileEditor->show ();
-    }
   m_fileEditor->requestNewFile ();
-
 }
 
 void
 MainWindow::openFile ()
 {
-  if (!m_fileEditor->isVisible ())
-    {
-      m_fileEditor->show ();
-    }
   m_fileEditor->requestOpenFile ();
-
 }
 
 void
 MainWindow::reportStatusMessage (QString statusMessage)
 {
   m_statusBar->showMessage (statusMessage, 1000);
 }
 
diff --git a/gui/src/editor/FileEditor.cpp b/gui/src/editor/FileEditor.cpp
--- a/gui/src/editor/FileEditor.cpp
+++ b/gui/src/editor/FileEditor.cpp
@@ -70,23 +70,32 @@ FileEditor::requestNewFile ()
 
 void
 FileEditor::requestOpenFile ()
 {
   FileEditorTab *fileEditorTab = new FileEditorTab (this);
   if (fileEditorTab)
     {
       addFileEditorTab (fileEditorTab);
-      fileEditorTab->openFile ();
+      if (!fileEditorTab->openFile ())
+        {
+          // If no file was loaded, remove the tab again.
+          m_tabWidget->removeTab (m_tabWidget->indexOf (fileEditorTab));
+        }
     }
 }
 
 void
 FileEditor::requestOpenFile (QString fileName)
 {
+  if (!isVisible ())
+    {
+      show ();
+    }
+
   FileEditorTab *fileEditorTab = new FileEditorTab (this);
   if (fileEditorTab)
     {
       addFileEditorTab (fileEditorTab);
       fileEditorTab->loadFile (fileName);
     }
 }
 
@@ -227,16 +236,28 @@ FileEditor::handleTabCloseRequest (int i
     if (fileEditorTab->close ())
       {
         m_tabWidget->removeTab (index);
         delete fileEditorTab;
       }
 }
 
 void
+FileEditor::handleTabCloseRequest ()
+{
+  FileEditorTab *fileEditorTab = dynamic_cast <FileEditorTab*> (sender ());
+  if (fileEditorTab)
+    if (fileEditorTab->close ())
+      {
+        m_tabWidget->removeTab (m_tabWidget->indexOf (fileEditorTab));
+        delete fileEditorTab;
+      }
+}
+
+void
 FileEditor::activeTabChanged (int index)
 {
   Q_UNUSED (index);
   handleEditorStateChanged ();
 }
 
 void
 FileEditor::handleEditorStateChanged ()
@@ -256,17 +277,16 @@ FileEditor::construct ()
   QWidget *widget = new QWidget (this);
   QSettings *settings = ResourceManager::instance ()->settings ();
   QStyle *style = QApplication::style ();
 
   m_menuBar = new QMenuBar (widget);
   m_toolBar = new QToolBar (widget);
   m_tabWidget = new QTabWidget (widget);
   m_tabWidget->setTabsClosable (true);
-  //m_longTitle = settings->value ("editor/longWindowTitle",true).toBool ();
 
   // Theme icons with QStyle icons as fallback
   QAction *newAction = new QAction (
         QIcon::fromTheme("document-new",style->standardIcon (QStyle::SP_FileIcon)),
         tr("&New File"), m_toolBar);
 
   QAction *openAction = new QAction (
         QIcon::fromTheme("document-open",style->standardIcon (QStyle::SP_DirOpenIcon)),
@@ -433,16 +453,18 @@ FileEditor::construct ()
 void
 FileEditor::addFileEditorTab (FileEditorTab *fileEditorTab)
 {
   m_tabWidget->addTab (fileEditorTab, "");
   connect (fileEditorTab, SIGNAL (fileNameChanged(QString)),
            this, SLOT(handleFileNameChanged(QString)));
   connect (fileEditorTab, SIGNAL (editorStateChanged ()),
            this, SLOT (handleEditorStateChanged ()));
+  connect (fileEditorTab, SIGNAL (closeRequest ()),
+           this, SLOT (handleTabCloseRequest ()));
   m_tabWidget->setCurrentWidget (fileEditorTab);
 }
 
 FileEditorTab *
 FileEditor::activeEditorTab ()
 {
   return dynamic_cast<FileEditorTab*> (m_tabWidget->currentWidget ());
 }
diff --git a/gui/src/editor/FileEditor.h b/gui/src/editor/FileEditor.h
--- a/gui/src/editor/FileEditor.h
+++ b/gui/src/editor/FileEditor.h
@@ -70,16 +70,17 @@ public slots:
   void requestNextBookmark ();
   void requestPreviousBookmark ();
   void requestRemoveBookmark ();
   void requestCommentSelectedText ();
   void requestUncommentSelectedText ();
 
   void handleFileNameChanged (QString fileName);
   void handleTabCloseRequest (int index);
+  void handleTabCloseRequest ();
   void activeTabChanged (int index);
   void handleEditorStateChanged ();
 
 private:
   void construct ();
   void addFileEditorTab(FileEditorTab *fileEditorTab);
   FileEditorTab *activeEditorTab();
 
diff --git a/gui/src/editor/FileEditorTab.cpp b/gui/src/editor/FileEditorTab.cpp
--- a/gui/src/editor/FileEditorTab.cpp
+++ b/gui/src/editor/FileEditorTab.cpp
@@ -77,16 +77,18 @@ FileEditorTab::FileEditorTab(FileEditor 
   layout->setMargin (0);
   setLayout (layout);
 
   // connect modified signal
   connect (m_editArea, SIGNAL (modificationChanged (bool)),
            this, SLOT (newTitle (bool)));
   connect (m_editArea, SIGNAL (copyAvailable (bool)),
            this, SLOT (handleCopyAvailable (bool)));
+  connect (&m_fileSystemWatcher, SIGNAL (fileChanged (QString)),
+           this, SLOT (fileHasChanged (QString)));
 
   m_fileName = "";
   newTitle (false);
 }
 
 bool
 FileEditorTab::copyAvailable ()
 {
@@ -100,28 +102,35 @@ FileEditorTab::closeEvent (QCloseEvent *
     {
       // close whole application: save file or not if modified
       checkFileModified ("Closing Octave", 0); // no cancel possible
       event->accept ();
     }
   else
     {
       // ignore close event if file is not saved and user cancels closing this window
-      if (checkFileModified ("Close File",QMessageBox::Cancel) == QMessageBox::Cancel)
+      if (checkFileModified ("Close File", QMessageBox::Cancel) == QMessageBox::Cancel)
         {
           event->ignore ();
         }
       else
         {
           event->accept();
         }
     }
 }
 
 void
+FileEditorTab::setFileName (QString fileName)
+{
+  m_fileName = fileName;
+  updateTrackedFile ();
+}
+
+void
 FileEditorTab::handleMarginClicked(int margin, int line, Qt::KeyboardModifiers state)
 {
   Q_UNUSED (state);
   if (margin == 1)  // marker margin
     {
       unsigned int mask = m_editArea->markersAtLine (line);
       if (mask && (1 << MARKER_BOOKMARK))
         m_editArea->markerDelete(line,MARKER_BOOKMARK);
@@ -190,16 +199,27 @@ FileEditorTab::newTitle(bool modified)
 
 void
 FileEditorTab::handleCopyAvailable(bool enableCopy)
 {
   m_copyAvailable = enableCopy;
   emit editorStateChanged ();
 }
 
+void
+FileEditorTab::updateTrackedFile ()
+{
+  QStringList trackedFiles = m_fileSystemWatcher.files ();
+  if (!trackedFiles.isEmpty ())
+    m_fileSystemWatcher.removePaths (trackedFiles);
+
+  if (m_fileName != UNNAMED_FILE)
+    m_fileSystemWatcher.addPath (m_fileName);
+}
+
 int
 FileEditorTab::checkFileModified (QString msg, int cancelButton)
 {
   int decision = QMessageBox::Yes;
   if (m_editArea->isModified ())
     {
       // file is modified but not saved, aks user what to do
       decision = QMessageBox::warning (this,
@@ -294,106 +314,122 @@ void
 FileEditorTab::redo ()
 {
   m_editArea->redo ();
 }
 
 void
 FileEditorTab::setModified (bool modified)
 {
-  m_modified = modified;
+  m_editArea->setModified (true);
 }
 
-void
+bool
 FileEditorTab::openFile ()
 {
   QString openFileName;
   QFileDialog fileDialog(this);
   fileDialog.setNameFilter(SAVE_FILE_FILTER);
   fileDialog.setAcceptMode(QFileDialog::AcceptOpen);
   fileDialog.setViewMode(QFileDialog::Detail);
-  if ( fileDialog.exec() )
+  if (fileDialog.exec () == QDialog::Accepted)
     {
       openFileName = fileDialog.selectedFiles().at(0);
       if (openFileName.isEmpty ())
-        return;
+        return false;
+
       loadFile(openFileName);
+      return true;
+    }
+  else
+    {
+      return false;
     }
 }
 
 void
 FileEditorTab::loadFile (QString fileName)
 {
+  if (!m_fileEditor->isVisible ())
+    {
+      m_fileEditor->show ();
+    }
+
   QFile file (fileName);
   if (!file.open (QFile::ReadOnly))
     {
       QMessageBox::warning (this, tr ("Octave Editor"),
                             tr ("Could not open file %1 for read:\n%2.").arg (fileName).
                             arg (file.errorString ()));
       return;
     }
 
   QTextStream in (&file);
   QApplication::setOverrideCursor (Qt::WaitCursor);
   m_editArea->setText (in.readAll ());
   QApplication::restoreOverrideCursor ();
 
-  m_fileName = fileName;
+  setFileName (fileName);
+  updateTrackedFile ();
+
+
   newTitle (false); // window title (no modification)
-  //m_statusBar->showMessage (tr ("File loaded."), 2000);
   m_editArea->setModified (false); // loaded file is not modified yet
 }
 
 void
 FileEditorTab::newFile ()
 {
-  m_fileName = UNNAMED_FILE;
+  if (!m_fileEditor->isVisible ())
+    {
+      m_fileEditor->show ();
+    }
+
+  setFileName (UNNAMED_FILE);
   newTitle (false); // window title (no modification)
   m_editArea->setText ("");
   m_editArea->setModified (false); // new file is not modified yet
 }
 
-void
-FileEditorTab::saveFile ()
+bool FileEditorTab::saveFile()
 {
-  saveFile (m_fileName);
+  return saveFile (m_fileName);
 }
 
-void
+bool
 FileEditorTab::saveFile (QString saveFileName)
 {
   // it is a new file with the name "<unnamed>" -> call saveFielAs
   if (saveFileName == UNNAMED_FILE || saveFileName.isEmpty ())
     {
-      saveFileAs();
-      return;
+      return saveFileAs();
     }
 
   // open the file for writing
   QFile file (saveFileName);
   if (!file.open (QFile::WriteOnly))
     {
       QMessageBox::warning (this, tr ("Octave Editor"),
                             tr ("Could not open file %1 for write:\n%2.").
                             arg (saveFileName).arg (file.errorString ()));
-      return;
+      return false;
     }
 
   // save the contents into the file
   QTextStream out (&file);
   QApplication::setOverrideCursor (Qt::WaitCursor);
   out << m_editArea->text ();
   QApplication::restoreOverrideCursor ();
-  m_fileName = saveFileName;  // save file name for later use
+  setFileName (saveFileName);  // save file name for later use
   newTitle (false);      // set the window title to actual file name (not modified)
-  //m_statusBar->showMessage (tr ("File %1 saved").arg(m_fileName), 2000);
   m_editArea->setModified (false); // files is save -> not modified
+  return true;
 }
 
-void
+bool
 FileEditorTab::saveFileAs ()
 {
   QString saveFileName(m_fileName);
   QFileDialog fileDialog(this);
   if (saveFileName == UNNAMED_FILE || saveFileName.isEmpty ())
     {
       saveFileName = QDir::homePath ();
       fileDialog.setDirectory (saveFileName);
@@ -406,22 +442,73 @@ FileEditorTab::saveFileAs ()
   fileDialog.setDefaultSuffix ("m");
   fileDialog.setAcceptMode (QFileDialog::AcceptSave);
   fileDialog.setViewMode (QFileDialog::Detail);
 
   if (fileDialog.exec ())
     {
       saveFileName = fileDialog.selectedFiles ().at (0);
       if (saveFileName.isEmpty ())
-        return;
-      saveFile (saveFileName);
+        return false;
+
+      return saveFile (saveFileName);
     }
+
+  return false;
 }
 
 void
 FileEditorTab::runFile ()
 {
   if (m_editArea->isModified ())
     saveFile(m_fileName);
 
   m_fileEditor->terminal ()->sendText (QString ("run \'%1\'\n").arg (m_fileName));
   m_fileEditor->terminal ()->setFocus ();
 }
+
+void
+FileEditorTab::fileHasChanged (QString fileName)
+{
+  Q_UNUSED (fileName);
+  if (QFile::exists (m_fileName))
+    {
+      // Prevent popping up multiple message boxes when the file has been changed multiple times.
+      static bool alreadyAsking = false;
+      if (!alreadyAsking)
+        {
+          alreadyAsking = true;
+
+          int decision =
+          QMessageBox::warning (this, tr ("Octave Editor"),
+                                tr ("It seems that \'%1\' has been modified by another application. Do you want to reload it?").
+                                arg (m_fileName), QMessageBox::Yes, QMessageBox::No);
+
+          if (decision == QMessageBox::Yes)
+            {
+              loadFile (m_fileName);
+            }
+
+          alreadyAsking = false;
+        }
+    }
+  else
+    {
+      int decision =
+      QMessageBox::warning (this, tr ("Octave Editor"),
+                            tr ("It seems that \'%1\' has been deleted or renamed. Do you want to save it now?").
+                            arg (m_fileName), QMessageBox::Save, QMessageBox::Close);
+      if (decision == QMessageBox::Save)
+        {
+          if (!saveFileAs ())
+            {
+              setFileName (UNNAMED_FILE);
+              newTitle (true); // window title (no modification)
+              setModified (true);
+              updateTrackedFile ();
+            }
+        }
+      else
+        {
+          emit closeRequest ();
+        }
+    }
+}
diff --git a/gui/src/editor/FileEditorTab.h b/gui/src/editor/FileEditorTab.h
--- a/gui/src/editor/FileEditorTab.h
+++ b/gui/src/editor/FileEditorTab.h
@@ -16,16 +16,17 @@
  */
 
 #ifndef FILEEDITORTAB_H
 #define FILEEDITORTAB_H
 
 #include <Qsci/qsciscintilla.h>
 #include <QWidget>
 #include <QCloseEvent>
+#include <QFileSystemWatcher>
 
 class FileEditor;
 class FileEditorTab : public QWidget
 {
   Q_OBJECT
 public:
   FileEditorTab (FileEditor *fileEditor);
   bool copyAvailable ();
@@ -43,41 +44,45 @@ public slots:
   void cut ();
   void copy ();
   void paste ();
   void undo ();
   void redo ();
 
   void setModified (bool modified);
 
-  void openFile ();
+  bool openFile();
   void loadFile (QString fileName);
   void newFile ();
-  void saveFile ();
-  void saveFile (QString saveFileName);
-  void saveFileAs ();
+  bool saveFile ();
+  bool saveFile(QString saveFileName);
+  bool saveFileAs();
   void runFile ();
 
+  void fileHasChanged (QString fileName);
+
 signals:
   void fileNameChanged (QString fileName);
   void editorStateChanged ();
+  void closeRequest ();
 
 protected:
   void closeEvent (QCloseEvent *event);
+  void setFileName (QString fileName);
 
 private:
+  void updateTrackedFile ();
   int checkFileModified (QString msg, int cancelButton);
   void doCommentSelectedText (bool comment);
 
   FileEditor *m_fileEditor;
   QsciScintilla *m_editArea;
 
   QString m_fileName;
   QString m_fileNameShort;
 
-  bool m_modified;
   bool m_longTitle;
   bool m_copyAvailable;
 
-  // TODO: Use QFileSystemWatcher to sync with disc.
+  QFileSystemWatcher m_fileSystemWatcher;
 };
 
 #endif // FILEEDITORTAB_H
