# HG changeset patch
# User jwe
# Date 1187885788 0
#      Thu Aug 23 16:16:28 2007 +0000
# Node ID 65d0fa83261a2a311f4d82bcad2b0407cfb820e4
# Parent  3350e816e2a4d6cbecebd7098426721adcec8362
[project @ 2007-08-23 16:14:51 by jwe]

diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,8 +1,17 @@
+2007-08-23  John W. Eaton  <jwe@octave.org>
+
+	* pkg/pkg.m: Avoid using installed_packages for both function and
+	variable name.
+
+2007-08-23  David Bateman  <dbateman@free.fr>
+
+	* plot/plot.m: Allow first arg to be axes handle.
+
 2007-08-22  David Bateman  <dbateman@free.fr>
 
 	* control/base/nichols.m: Correct for misnamed variable, and ensure
 	outputs are returned only if requested.
 
 2007-08-22  Donald Parsons  <dparsons@brightdsl.net>
 
 	* control/base/nichols.m: Fix typo.
diff --git a/scripts/pkg/pkg.m b/scripts/pkg/pkg.m
--- a/scripts/pkg/pkg.m
+++ b/scripts/pkg/pkg.m
@@ -475,17 +475,17 @@ function install (files, handle_deps, au
       error ("could not create installation directory: %s", msg);
     endif
   endif
 
   ## Get the list of installed packages
   [local_packages, global_packages] = installed_packages (local_list, 
 							  global_list);
 
-  installed_packages = {local_packages{:}, global_packages{:}};        
+  installed_pkgs_lst = {local_packages{:}, global_packages{:}};        
 
   if (global_install)
     packages = global_packages;
   else
     packages = local_packages;
   endif
 
   ## Uncompress the packages and read the DESCRIPTION files
@@ -693,22 +693,22 @@ function install (files, handle_deps, au
   endfor
 
   ## Add the packages to the package list
   try
     if (global_install)
       idx = complement (packages_to_uninstall, 1:length(global_packages));
       global_packages = save_order ({global_packages{idx}, descriptions{:}});
       save (global_list, "global_packages");
-      installed_packages = {local_packages{:}, global_packages{:}};
+      installed_pkgs_lst = {local_packages{:}, global_packages{:}};
     else
       idx = complement (packages_to_uninstall, 1:length(local_packages));
       local_packages = save_order ({local_packages{idx}, descriptions{:}});
       save (local_list, "local_packages");
-      installed_packages = {local_packages{:}, global_packages{:}};
+      installed_pkgs_lst = {local_packages{:}, global_packages{:}};
     endif
   catch
     ## Something went wrong, delete tmpdirs
     for i = 1:length (tmpdirs)
       rm_rf (tmpdirs{i});
     endfor
     for i = 1:length (descriptions)
       rm_rf (descriptions{i}.dir);
@@ -733,67 +733,67 @@ function install (files, handle_deps, au
   ## can begin usings them. Only load them if they are marked autoload
   if (length (descriptions) > 0)
     idx = [];
     for i = 1:length (descriptions)
       if (isautoload (descriptions(i)))
 	idx (end + 1) = i;
       endif
     endfor
-    load_packages_and_dependencies (idx, handle_deps, installed_packages);
+    load_packages_and_dependencies (idx, handle_deps, installed_pkgs_lst);
   endif
 endfunction
 
 function uninstall (pkgnames, handle_deps, verbose, local_list, 
 		    global_list, global_install)
   ## Get the list of installed packages
   [local_packages, global_packages] = installed_packages(local_list, 
 							 global_list);
   if (global_install)
-    installed_packages = {local_packages{:}, global_packages{:}};
+    installed_pkgs_lst = {local_packages{:}, global_packages{:}};
   else
-    installed_packages = local_packages;
+    installed_pkgs_lst = local_packages;
   endif
 
-  num_packages = length (installed_packages);
+  num_packages = length (installed_pkgs_lst);
   delete_idx = [];
   for i = 1:num_packages
-    cur_name = installed_packages{i}.name;
+    cur_name = installed_pkgs_lst{i}.name;
     if (any (strcmp (cur_name, pkgnames)))
       delete_idx(end+1) = i;
     endif
   endfor
 
   ## Are all the packages that should be uninstalled already installed?
   if (length (delete_idx) != length (pkgnames))
     if (global_install)
       ## Try again for a locally installed package
-      installed_packages = local_packages;
+      installed_pkgs_lst = local_packages;
 
-      num_packages = length (installed_packages);
+      num_packages = length (installed_pkgs_lst);
       delete_idx = [];
       for i = 1:num_packages
-	cur_name = installed_packages{i}.name;
+	cur_name = installed_pkgs_lst{i}.name;
 	if (any (strcmp (cur_name, pkgnames)))
 	  delete_idx(end+1) = i;
 	endif
       endfor
       if (length (delete_idx) != length (pkgnames))
 	## XXX: We should have a better error message
 	warning ("some of the packages you want to uninstall are not installed");
       endif
     else
       ## XXX: We should have a better error message
       warning ("some of the packages you want to uninstall are not installed.");
     endif
   endif
 
   ## Compute the packages that will remain installed
   idx = complement (delete_idx, 1:num_packages);
-  remaining_packages = {installed_packages{idx}};
+  remaining_packages = {installed_pkgs_lst{idx}};
 
   ## Check dependencies
   if (handle_deps)
     error_text = "";
     for i = 1:length (remaining_packages)
       desc = remaining_packages{i};
       bad_deps = get_unsatisfied_deps (desc, remaining_packages);
 
@@ -810,17 +810,17 @@ function uninstall (pkgnames, handle_dep
 
     if (! isempty (error_text))
       error ("the following dependencies where unsatisfied:\n  %s", error_text);
     endif
   endif
 
   ## Delete the directories containing the packages
   for i = delete_idx
-    desc = installed_packages{i};
+    desc = installed_pkgs_lst{i};
     ## If an 'on_uninstall.m' exist, call it!
     if (exist (fullfile (desc.dir, "packinfo", "on_uninstall.m"), "file"))
       wd = pwd ();
       cd (fullfile(desc.dir, "packinfo"));
       on_uninstall (desc);
       cd (wd);
     endif
     ## Do the actual deletion
@@ -1514,34 +1514,34 @@ function write_INDEX (desc, dir, INDEX)
     error ("couldn't open %s for writing.", INDEX);
   endif
   fprintf (fid, "%s >> %s\n", desc.name, desc.title);
   fprintf (fid, "%s\n", categories{1});
   fprintf (fid, "  %s\n", functions{:});
   fclose (fid);
 endfunction
 
-function bad_deps = get_unsatisfied_deps (desc, installed_packages)
+function bad_deps = get_unsatisfied_deps (desc, installed_pkgs_lst)
   bad_deps = {};
 
   ## For each dependency
   for i = 1:length (desc.depends)
     dep = desc.depends{i};
 
     ## Is the current dependency Octave?
     if (strcmp (dep.package, "octave"))
       if (! compare_versions (OCTAVE_VERSION, dep.version, dep.operator))
         bad_deps{end+1} = dep;
       endif
     ## Is the current dependency not Octave?
     else
       ok = false;
-      for i = 1:length (installed_packages)
-	cur_name = installed_packages{i}.name;
-	cur_version = installed_packages{i}.version;
+      for i = 1:length (installed_pkgs_lst)
+	cur_name = installed_pkgs_lst{i}.name;
+	cur_version = installed_pkgs_lst{i}.version;
 	if (strcmp (dep.package, cur_name)
 	    && compare_versions (cur_version, dep.version, dep.operator))
 	  ok = true;
 	  break;
 	endif
       endfor
       if (! ok)
         bad_deps{end+1} = dep;
@@ -1557,45 +1557,45 @@ function [out1, out2] = installed_packag
   catch
     local_packages = {};
   end_try_catch
   try
     global_packages = load (global_list).global_packages;
   catch
     global_packages = {};
   end_try_catch
-  installed_packages = {local_packages{:}, global_packages{:}};
+  installed_pkgs_lst = {local_packages{:}, global_packages{:}};
 
   ## Eliminate duplicates in the installed package list.
   ## Locally installed packages take precedence
   dup = [];
-  for i = 1:length (installed_packages)
+  for i = 1:length (installed_pkgs_lst)
     if (find (dup, i))
       continue;
     endif
-    for j = (i+1):length (installed_packages)
+    for j = (i+1):length (installed_pkgs_lst)
       if (find (dup, j))
 	continue;
       endif
-      if (strcmp (installed_packages{i}.name, installed_packages{j}.name))
+      if (strcmp (installed_pkgs_lst{i}.name, installed_pkgs_lst{j}.name))
 	dup = [dup, j];
       endif
     endfor
   endfor
   if (! isempty(dup))
-    installed_packages(dup) = [];
+    installed_pkgs_lst(dup) = [];
   endif  
 
   ## Now check if the package is loaded
   tmppath = strrep (path(), "\\", "/");
-  for i = 1:length (installed_packages)
-    if (findstr (tmppath, strrep (installed_packages{i}.dir, "\\", "/")))
-      installed_packages{i}.loaded = true;
+  for i = 1:length (installed_pkgs_lst)
+    if (findstr (tmppath, strrep (installed_pkgs_lst{i}.dir, "\\", "/")))
+      installed_pkgs_lst{i}.loaded = true;
     else
-      installed_packages{i}.loaded = false;
+      installed_pkgs_lst{i}.loaded = false;
     endif
   endfor
   for i = 1:length (local_packages)
     if (findstr (tmppath, strrep (local_packages{i}.dir, "\\", "/")))
       local_packages{i}.loaded = true;
     else
       local_packages{i}.loaded = false;
     endif
@@ -1609,40 +1609,40 @@ function [out1, out2] = installed_packag
   endfor
 
   ## Should we return something?
   if (nargout == 2)
     out1 = local_packages;
     out2 = global_packages;
     return;
   elseif (nargout == 1)
-    out1 = installed_packages;
+    out1 = installed_pkgs_lst;
     return;
   endif
 
   ## We shouldn't return something, so we'll print something
-  num_packages = length (installed_packages);
+  num_packages = length (installed_pkgs_lst);
   if (num_packages == 0)
     printf ("no packages installed.\n");
     return;
   endif
 
   ## Compute the maximal lengths of name, version, and dir
   h1 = "Package Name";
   h2 = "Version";
   h3 = "Installation directory";
   max_name_length = length (h1); 
   max_version_length = length (h2);
   names = cell (num_packages, 1); 
   for i = 1:num_packages
     max_name_length = max (max_name_length,
-			   length (installed_packages{i}.name));
+			   length (installed_pkgs_lst{i}.name));
     max_version_length = max (max_version_length,
-			      length (installed_packages{i}.version));
-    names{i} = installed_packages{i}.name;
+			      length (installed_pkgs_lst{i}.version));
+    names{i} = installed_pkgs_lst{i}.name;
   endfor
   max_dir_length = terminal_size()(2) - max_name_length - ...
 					     max_version_length - 7;
   if (max_dir_length < 20)
      max_dir_length = Inf;
   endif
 
   h1 = postpad (h1, max_name_length + 1, " ");
@@ -1656,56 +1656,56 @@ function [out1, out2] = installed_packag
   tmp(length(h1)+length(h2)+5) = "+";
   printf ("%s\n", tmp);
 
   ## Print the packages
   format = sprintf ("%%%ds %%1s| %%%ds | %%s\n", max_name_length,
 		    max_version_length);
   [dummy, idx] = sort (names);
   for i = 1:num_packages
-    cur_name = installed_packages{idx(i)}.name;
-    cur_version = installed_packages{idx(i)}.version;
-    cur_dir = installed_packages{idx(i)}.dir;
+    cur_name = installed_pkgs_lst{idx(i)}.name;
+    cur_version = installed_pkgs_lst{idx(i)}.version;
+    cur_dir = installed_pkgs_lst{idx(i)}.dir;
     if (length (cur_dir) > max_dir_length)
       first_char = length (cur_dir) - max_dir_length + 4;
       first_filesep = strfind (cur_dir(first_char:end), filesep());
       if (! isempty (first_filesep))
         cur_dir = strcat ("...", 
 			  cur_dir((first_char + first_filesep(1) - 1):end));
       else
         cur_dir = strcat ("...", cur_dir(first_char:end));
       endif
     endif
-    if (installed_packages{idx(i)}.loaded)
+    if (installed_pkgs_lst{idx(i)}.loaded)
       cur_loaded = "*";
     else
       cur_loaded = " ";
     endif
     printf (format, cur_name, cur_loaded, cur_version, cur_dir);
   endfor
 endfunction
 
 function load_packages (files, handle_deps, local_list, global_list)
-  installed_packages = installed_packages (local_list, global_list);
-  num_packages = length (installed_packages);
+  installed_pkgs_lst = installed_packages (local_list, global_list);
+  num_packages = length (installed_pkgs_lst);
 
   ## Read package names and installdirs into a more convenient format
   pnames = pdirs = cell (1, num_packages);
   for i = 1:num_packages
-    pnames{i} = installed_packages{i}.name;
-    pdirs{i} = installed_packages{i}.dir;
+    pnames{i} = installed_pkgs_lst{i}.name;
+    pdirs{i} = installed_pkgs_lst{i}.dir;
   endfor
 
   ## load all
   if (length (files) == 1 && strcmp (files{1}, "all"))
-    idx = [1:length(installed_packages)];
+    idx = [1:length(installed_pkgs_lst)];
   ## load auto
   elseif (length (files) == 1 && strcmp (files{1}, "auto")) 
     idx = [];
-    for i = 1:length (installed_packages)
+    for i = 1:length (installed_pkgs_lst)
       if (exist (fullfile (pdirs{i}, "packinfo", ".autoload"), "file"))
 	idx (end + 1) = i;
       endif
     endfor
   ## load package_name1 ...
   else
     idx = [];
     for i = 1:length (files)
@@ -1713,29 +1713,29 @@ function load_packages (files, handle_de
       if (! any (idx2))
 	  error ("package %s is not installed", files{i});
       endif
       idx (end + 1) = idx2;
     endfor
   endif
 
   ## Load the packages, but take care of the ordering of dependencies
-  load_packages_and_dependencies (idx, handle_deps, installed_packages);
+  load_packages_and_dependencies (idx, handle_deps, installed_pkgs_lst);
 endfunction
 
 function unload_packages (files, handle_deps, local_list, global_list)
-  installed_packages = installed_packages (local_list, global_list);
-  num_packages = length (installed_packages);
+  installed_pkgs_lst = installed_packages (local_list, global_list);
+  num_packages = length (installed_pkgs_lst);
 
   ## Read package names and installdirs into a more convenient format
   pnames = pdirs = cell (1, num_packages);
   for i = 1:num_packages
-    pnames{i} = installed_packages{i}.name;
-    pdirs{i} = installed_packages{i}.dir;
-    pdeps{i} = installed_packages{i}.depends;
+    pnames{i} = installed_pkgs_lst{i}.name;
+    pdirs{i} = installed_pkgs_lst{i}.dir;
+    pdeps{i} = installed_pkgs_lst{i}.depends;
   endfor
 
   ## Get the current octave path
   p = split_by (path(), pathsep ());
 
   ## unload all
   if (length (files) == 1 && strcmp (files{1}, "all"))
       dirs = pdirs;
@@ -1874,23 +1874,23 @@ function newdesc = save_order (desc)
       if (strcmp (newdesc{i}.name, newdesc{j}.name))
         idx (end + 1) = j;
       endif
     endfor
   endfor
   newdesc(idx) = [];
 endfunction
 
-function load_packages_and_dependencies (idx, handle_deps, installed_packages)
-  idx = load_package_dirs (idx, [], handle_deps, installed_packages);
+function load_packages_and_dependencies (idx, handle_deps, installed_pkgs_lst)
+  idx = load_package_dirs (idx, [], handle_deps, installed_pkgs_lst);
   arch = getarch ();
   dirs = {};
   execpath = EXEC_PATH ();
   for i = idx;
-    ndir = installed_packages{i}.dir;
+    ndir = installed_pkgs_lst{i}.dir;
     dirs {end + 1} = ndir;
     if (exist (fullfile (dirs{end}, "bin"), "dir"))
       execpath = strcat (fullfile(dirs{end}, "bin"), ":", execpath);
     endif
     tmpdir = fullfile (ndir, arch);
     if (exist (tmpdir, "dir"))
       dirs{end + 1} = tmpdir;
     endif
@@ -1902,37 +1902,37 @@ function load_packages_and_dependencies 
   endif
 
   ## Add the binaries to exec_path
   if (! strcmp (EXEC_PATH, execpath))
     EXEC_PATH (execpath);
   endif
 endfunction
 
-function idx = load_package_dirs (lidx, idx, handle_deps, installed_packages)
+function idx = load_package_dirs (lidx, idx, handle_deps, installed_pkgs_lst)
   for i = lidx
-    if (isfield (installed_packages{i}, "loaded") &&
-	installed_packages{i}.loaded)
+    if (isfield (installed_pkgs_lst{i}, "loaded") &&
+	installed_pkgs_lst{i}.loaded)
       continue;
     else
       if (handle_deps)
-        deps = installed_packages{i}.depends;
+        deps = installed_pkgs_lst{i}.depends;
         if ((length (deps) > 1) || (length (deps) == 1 && 
 	  		  ! strcmp(deps{1}.package, "octave")))
           tmplidx = [];
           for k = 1 : length (deps)
-            for j = 1 : length (installed_packages)
-              if (strcmp (installed_packages{j}.name, deps{k}.package))
+            for j = 1 : length (installed_pkgs_lst)
+              if (strcmp (installed_pkgs_lst{j}.name, deps{k}.package))
                 tmplidx (end + 1) = j;
 	        break;
               endif
             endfor
           endfor
           idx = load_package_dirs (tmplidx, idx, handle_deps, 
-				 installed_packages);
+				 installed_pkgs_lst);
         endif
       endif
       if (isempty (find(idx == i)))
         idx (end + 1) = i;
       endif
     endif
   endfor
 endfunction
diff --git a/scripts/plot/plot.m b/scripts/plot/plot.m
--- a/scripts/plot/plot.m
+++ b/scripts/plot/plot.m
@@ -164,25 +164,43 @@
 ##
 ## @example
 ## t = 0:0.1:6.3;
 ## plot (t, cos(t), "-;cos(t);", t, sin(t), "+3;sin(t);");
 ## @end example
 ##
 ## This will plot the cosine and sine functions and label them accordingly
 ## in the key.
+##
+## If the first argument is an axis handle, then plot into these axes, 
+## rather than the current axis handle returned by @code{gca}. 
 ## @seealso{semilogx, semilogy, loglog, polar, mesh, contour, __pltopt__
 ## bar, stairs, errorbar, xlabel, ylabel, title, print}
 ## @end deftypefn
 
 ## Author: jwe
 
 function retval = plot (varargin)
 
-  newplot ();
-
-  tmp = __plt__ ("plot", gca (), varargin{:});
+  if (isscalar (varargin{1}) && ishandle (varargin{1}))
+    h = varargin {1};
+    obj = get (h);
+    if (! strcmp (obj.type, "axes"))
+      error ("plot: expecting first argument to be an axes object");
+    endif
+    oldh = gca ();
+    unwind_protect
+      axes (h);
+      newplot ();
+      tmp = __plt__ ("plot", h, varargin{2:end});
+    unwind_protect_cleanup
+      axes (oldh);
+    end_unwind_protect
+  else
+    newplot ();
+    tmp = __plt__ ("plot", gca (), varargin{:});
+  endif
 
   if (nargout > 0)
     retval = tmp;
   endif
 
 endfunction
