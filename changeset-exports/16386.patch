# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1364455225 14400
#      Thu Mar 28 03:20:25 2013 -0400
# Node ID 4902484f9181f1d02d444c4fab307d7872d6bf29
# Parent  a1690c3e93eb336bf0cbbcbde363833b1fb9200b
callbacks to set markers in editor using command line dbstop function

* debug.h, debug.cc (location_info): New function.
* input.cc (get_debug_input): Use it to pass location info to hook
functions.
* debug.cc (bp_table::do_add_breakpoint): Likewise.
(bp_table::do_remove_all_breakpoints_in_file): Likewise.
(bp_table::do_remove_breakpoint): Likewise.
(Fadd_dbstop_hook, Fremove_dbstop_hook, Fadd_dbclear_hook,
Fremove_dbclear_hook): New functions.
(dbstop_hook_functions, dbclear_hook_functions): New static
variables.

* file-editor-interface.h
(file_editor_interface::handle_update_dbstop_marker_request):
New pure virtual function.
(file_editor_interface::request_open_file): New args, dbstop_marker
and insert.
* file-editor.h, file-editor.cc (file_editor::request_open_file):
Likewise.  Emit signal to set or remove dbstop marker.
(file_editor::handle_update_dbstop_marker_request): New function.
(file_editor::fetab_do_dbstop_marker): New signal.
(file_editor::add_file_editor_tab): Connect fetab_do_dbstop_marker
signal to do_dbstop_marker.

* file-editor-tab.h, file-editor-tab.cc
(file_editor_tab::do_dbstop_marker): New function.

* file-editor-tab.cc (file_editor::goto_line): Eliminate shadowing
variable declaration.

* main-window.h, main-window.cc
(main_window::handle_update_dbstop_marker_request): New function.
(main_window::construct): Connect update_dbstop_marker_signal signal
to handle_update_dbstop_marker_request.

* octave-event-listener.h (event_listener::update_dbstop_marker):
New pure virtual function.

* octave-link.h, octave-link.cc
(octave_link::update_breakpoint_hook_fcn,
octave_link::do_update_breakpoint_hook_fcn): New functions.
(octave_link::do_update_debug_pointer): Improve error messages.

* octave-main-thread.cc (dbstop_hook_fcn, dbclear_hook_fcn):
New functions.
(octave_main_thread::octave_main_thread): Install hook functions for
for dbstop and dbclear hooks.

* octave-qt-event-listener.h, octave-qt-event-listener.cc
(octave_qt_event_listener::update_dbstop_marker): New fucntion.
(octave_qt_event_listener::update_dbstop_marker_signal): New signal.

diff --git a/libgui/src/m-editor/file-editor-interface.h b/libgui/src/m-editor/file-editor-interface.h
--- a/libgui/src/m-editor/file-editor-interface.h
+++ b/libgui/src/m-editor/file-editor-interface.h
@@ -41,25 +41,31 @@ class file_editor_interface : public oct
   virtual ~file_editor_interface () { }
 
   virtual QMenu *get_mru_menu ( ) = 0;
   virtual QMenu *debug_menu () = 0;
   virtual QToolBar *toolbar () = 0;
 
   virtual void handle_entered_debug_mode () = 0;
   virtual void handle_quit_debug_mode () = 0;
-  virtual void handle_update_debug_pointer_request (const QString& file, int line) = 0;
+  virtual void handle_update_debug_pointer_request (const QString& file,
+                                                    int line) = 0;
+
+  virtual void handle_update_dbstop_marker_request (bool insert,
+                                                    const QString& file,
+                                                    int line) = 0;
   virtual void set_focus () = 0;
 
 public slots:
   virtual void request_new_file () = 0;
   virtual void request_open_file () = 0;
-  virtual void request_open_file (const QString& fileName, int line = -1,
-                                  bool set_marker = false) = 0;
-
+  virtual void request_open_file (const QString& openFileName, int line = -1,
+                                  bool debug_pointer = false,
+                                  bool dbstop_marker = false,
+                                  bool insert = true) = 0;
 //signals:
 
 //protected:
 
 //protected slots:
 
 };
 
diff --git a/libgui/src/m-editor/file-editor-tab.cc b/libgui/src/m-editor/file-editor-tab.cc
--- a/libgui/src/m-editor/file-editor-tab.cc
+++ b/libgui/src/m-editor/file-editor-tab.cc
@@ -633,17 +633,17 @@ file_editor_tab::goto_line (const QWidge
 {
   if (ID != this)
     return;
 
   bool ok = true;
 
   if (line <= 0)
     {
-      bool ok = false;
+      ok = false;
 
       int index;
 
       _edit_area->getCursorPosition(&line, &index);
 
 
       line = QInputDialog::getInt (_edit_area, "Goto line", "Line number", 
                                    line+1, 1, _edit_area->lines(), 1, &ok);
@@ -1154,9 +1154,24 @@ file_editor_tab::set_debugger_position (
 
   _edit_area->markerDeleteAll (debugger_position);
   if (line > 0)
     {
       _edit_area->markerAdd (line, debugger_position);
     }
 }
 
+void
+file_editor_tab::do_dbstop_marker (bool insert, const QWidget *ID, int line)
+{
+  if (ID != this || ID == 0)
+    return;
+
+  if (line > 0)
+    {
+      if (insert)
+        _edit_area->markerAdd (line, breakpoint);
+      else
+        _edit_area->markerDelete (line, breakpoint);
+    }
+}
+
 #endif
diff --git a/libgui/src/m-editor/file-editor-tab.h b/libgui/src/m-editor/file-editor-tab.h
--- a/libgui/src/m-editor/file-editor-tab.h
+++ b/libgui/src/m-editor/file-editor-tab.h
@@ -73,16 +73,17 @@ public slots:
   void remove_all_breakpoints (const QWidget* ID);
 
   void comment_selected_text (const QWidget* ID);
   void uncomment_selected_text (const QWidget* ID);
   void find (const QWidget* ID);
   void goto_line (const QWidget* ID, int line = -1);
 
   void set_debugger_position (const QWidget *ID, int line = -1);
+  void do_dbstop_marker (bool insert, const QWidget *ID, int line = -1);
 
   void set_modified (bool modified = true);
 
   QString load_file (const QString& fileName);
   void new_file ();
 
   void file_has_changed (const QString& fileName);
 
diff --git a/libgui/src/m-editor/file-editor.cc b/libgui/src/m-editor/file-editor.cc
--- a/libgui/src/m-editor/file-editor.cc
+++ b/libgui/src/m-editor/file-editor.cc
@@ -143,17 +143,18 @@ file_editor::request_open_file ()
            this, SLOT (request_open_file (const QString&)));
   fileDialog->setWindowModality (Qt::NonModal);
   fileDialog->setAttribute (Qt::WA_DeleteOnClose);
   fileDialog->show ();
 }
 
 void
 file_editor::request_open_file (const QString& openFileName, int line,
-                                bool set_marker)
+                                bool debug_pointer,
+                                bool dbstop_marker, bool insert)
 {
   if (openFileName.isEmpty ())
     {
       // ??  Not sure this will happen.  This routine isn't even called
       // if the user hasn't selected a file.
     }
   else
     {
@@ -166,18 +167,21 @@ file_editor::request_open_file (const QS
       if (p != editor_tab_map.end ())
         {
           _tab_widget->setCurrentWidget (p->second);
 
           if (line > 0)
             {
               emit fetab_goto_line (p->second, line);
 
-              if (set_marker)
+              if (debug_pointer)
                 emit fetab_set_debugger_position (p->second, line-1);
+
+              if (dbstop_marker)
+                emit fetab_do_dbstop_marker (insert, p->second, line-1);
             }
 
           emit fetab_set_focus (p->second);
         }
       else
         {
           file_editor_tab *fileEditorTab = new file_editor_tab ();
           if (fileEditorTab)
@@ -191,18 +195,21 @@ file_editor::request_open_file (const QS
                   fileEditorTab->update_window_title (false);
                   // file already loaded, add file to mru list here
                   handle_mru_add_file(QDir::cleanPath (openFileName));
 
                   if (line > 0)
                     {
                       emit fetab_goto_line (fileEditorTab, line);
 
-                      if (set_marker)
+                      if (debug_pointer)
                         emit fetab_set_debugger_position (fileEditorTab, line-1);
+                      if (dbstop_marker)
+                        emit fetab_do_dbstop_marker
+                          (insert, fileEditorTab, line-1);
                     }
                 }
               else
                 {
                   delete fileEditorTab;
                   // Create a NonModal message about error.
                   QMessageBox* msgBox = new QMessageBox (
                                                          QMessageBox::Critical, tr ("Octave Editor"),
@@ -293,16 +300,23 @@ file_editor::check_conflict_save (const 
 
 void
 file_editor::handle_update_debug_pointer_request (const QString& file, int line)
 {
   request_open_file (file, line, true);
 }
 
 void
+file_editor::handle_update_dbstop_marker_request (bool insert,
+                                                  const QString& file, int line)
+{
+  request_open_file (file, line, false, true, insert);
+}
+
+void
 file_editor::request_undo ()
 {
   emit fetab_undo (_tab_widget->currentWidget ());
 }
 
 void
 file_editor::request_redo ()
 {
@@ -865,13 +879,15 @@ file_editor::add_file_editor_tab (file_e
   connect (this, SIGNAL (fetab_find (const QWidget*)),
            f, SLOT (find (const QWidget*)));
   connect (this, SIGNAL (fetab_goto_line (const QWidget *, int)),
            f, SLOT (goto_line (const QWidget *, int)));
   connect (this, SIGNAL (fetab_set_focus (const QWidget*)),
            f, SLOT (set_focus (const QWidget*)));
   connect (this, SIGNAL (fetab_set_debugger_position (const QWidget *, int)),
            f, SLOT (set_debugger_position (const QWidget *, int)));
+  connect (this, SIGNAL (fetab_do_dbstop_marker (bool, const QWidget *, int)),
+           f, SLOT (do_dbstop_marker (bool, const QWidget *, int)));
 
   _tab_widget->setCurrentWidget (f);
 }
 
 #endif
diff --git a/libgui/src/m-editor/file-editor.h b/libgui/src/m-editor/file-editor.h
--- a/libgui/src/m-editor/file-editor.h
+++ b/libgui/src/m-editor/file-editor.h
@@ -84,16 +84,17 @@ signals:
   void fetab_next_breakpoint (const QWidget* ID);
   void fetab_previous_breakpoint (const QWidget* ID);
   void fetab_remove_all_breakpoints (const QWidget* ID);
   void fetab_comment_selected_text (const QWidget* ID);
   void fetab_uncomment_selected_text (const QWidget* ID);
   void fetab_find (const QWidget* ID);
   void fetab_goto_line (const QWidget* ID, int line = -1);
   void fetab_set_debugger_position (const QWidget* ID, int line = -1);
+  void fetab_do_dbstop_marker (bool insert, const QWidget* ID, int line = -1);
   void fetab_set_focus (const QWidget* ID);
 
 public slots:
   void request_new_file ();
   void request_open_file ();
   void request_mru_open_file ();
 
   void request_undo ();
@@ -125,22 +126,26 @@ public slots:
   void handle_tab_remove_request ();
   void handle_add_filename_to_list (const QString& fileName, QWidget *ID);
   void active_tab_changed (int index);
   void handle_editor_state_changed (bool enableCopy, const QString& fileName);
   void handle_mru_add_file (const QString& file_name);
   void check_conflict_save (const QString& fileName, bool remove_on_success);
 
   void handle_update_debug_pointer_request (const QString& file, int line);
+  void handle_update_dbstop_marker_request (bool insert, const QString& file,
+                                            int line);
 
   /** Tells the editor to react on changed settings. */
   void notice_settings ();
 
 private slots:
-  void request_open_file (const QString& fileName, int line = -1, bool = false);
+  void request_open_file (const QString& fileName, int line = -1,
+                          bool debug_pointer = false,
+                          bool dbstop_marker = false, bool insert = true);
 
 private:
   void construct ();
   void add_file_editor_tab(file_editor_tab *f, const QString &fn);
   void save_file_as (QWidget *fetabID = 0);
   void mru_menu_update ();
 
   std::map<QString, QWidget *> editor_tab_map;
diff --git a/libgui/src/main-window.cc b/libgui/src/main-window.cc
--- a/libgui/src/main-window.cc
+++ b/libgui/src/main-window.cc
@@ -513,16 +513,25 @@ void
 main_window::handle_update_debug_pointer_request (const QString& file, int line)
 {
 #ifdef HAVE_QSCINTILLA
   _file_editor->handle_update_debug_pointer_request (file, line);
 #endif
 }
 
 void
+main_window::handle_update_dbstop_marker_request (bool insert,
+                                                  const QString& file, int line)
+{
+#ifdef HAVE_QSCINTILLA
+  _file_editor->handle_update_dbstop_marker_request (insert, file, line);
+#endif
+}
+
+void
 main_window::debug_continue ()
 {
   octave_link::post_event (this, &main_window::debug_continue_callback);
 }
 
 void
 main_window::debug_step_into ()
 {
@@ -1171,16 +1180,21 @@ main_window::construct ()
   connect (_octave_qt_event_listener,
            SIGNAL (quit_debug_mode_signal ()),
            this,
            SLOT (handle_quit_debug_mode ()));
 
   connect (_octave_qt_event_listener,
            SIGNAL (update_debug_pointer_signal (const QString&, int)), this,
            SLOT (handle_update_debug_pointer_request (const QString&, int)));
+
+  connect (_octave_qt_event_listener,
+           SIGNAL (update_dbstop_marker_signal (bool, const QString&, int)),
+           this,
+           SLOT (handle_update_dbstop_marker_request (bool, const QString&, int)));
 }
 
 void
 main_window::save_workspace_callback (const std::string& file)
 {
   Fsave (ovl (file));
 }
 
diff --git a/libgui/src/main-window.h b/libgui/src/main-window.h
--- a/libgui/src/main-window.h
+++ b/libgui/src/main-window.h
@@ -114,16 +114,17 @@ public slots:
   void handle_current_directory_visible (bool);
   void handle_workspace_visible (bool);
   void handle_editor_visible (bool);
   void handle_documentation_visible (bool);
 
   void handle_entered_debug_mode ();
   void handle_quit_debug_mode ();
   void handle_update_debug_pointer_request (const QString& file, int line);
+  void handle_update_dbstop_marker_request (bool insert, const QString& file, int line);
   void debug_continue ();
   void debug_step_into ();
   void debug_step_over ();
   void debug_step_out ();
   void debug_quit ();
 
   void read_settings ();
   void write_settings ();
diff --git a/libgui/src/octave-adapter/octave-event-listener.h b/libgui/src/octave-adapter/octave-event-listener.h
--- a/libgui/src/octave-adapter/octave-event-listener.h
+++ b/libgui/src/octave-adapter/octave-event-listener.h
@@ -37,15 +37,18 @@ class octave_event_listener
     virtual void
     update_workspace (void) = 0;
 
     virtual void
     update_history (void) = 0;
 
     virtual void update_debug_pointer (const std::string& file, int line) = 0;
 
+    virtual void
+    update_dbstop_marker (bool insert, const std::string& file, int line) = 0;
+
     virtual void about_to_exit () = 0;
 
     virtual void entered_debug_mode () = 0;
     virtual void quit_debug_mode () = 0;
 };
 
 #endif // OCTAVEEVENTLISTENER_H
diff --git a/libgui/src/octave-adapter/octave-link.cc b/libgui/src/octave-adapter/octave-link.cc
--- a/libgui/src/octave-adapter/octave-link.cc
+++ b/libgui/src/octave-adapter/octave-link.cc
@@ -175,23 +175,23 @@ octave_link::do_update_debug_pointer (co
 
               if (! error_state)
                 {
                   event_listener->update_debug_pointer (file, line);
 
                   do_process_events ();
                 }
               else
-                ::error ("invalid struct in dbstop callback");
+                ::error ("invalid struct in debug pointer callback");
             }
           else
-            ::error ("expecting struct in dbstop callback");
+            ::error ("expecting struct in debug pointer callback");
         }
       else
-        ::error ("invalid call to dbstop callback");
+        ::error ("invalid call to debug pointer callback");
     }
 }
 
 void
 octave_link::do_pre_input_event_hook_fcn (void)
 {
   do_update_workspace ();
 }
@@ -203,16 +203,51 @@ octave_link::do_post_input_event_hook_fc
 }
 
 void
 octave_link::do_debug_input_event_hook_fcn (const octave_value_list& args)
 {
   do_update_debug_pointer (args);
 }
 
+void
+octave_link::do_update_breakpoint_hook_fcn
+  (bool insert, const octave_value_list& args)
+{
+  if (event_listener)
+    {
+      if (args.length () == 1)
+        {
+          octave_scalar_map m = args(0).scalar_map_value ();
+
+          if (! error_state)
+            {
+              octave_value ov_file = m.getfield ("file");
+              octave_value ov_line = m.getfield ("line");
+
+              std::string file = ov_file.string_value ();
+              int line = ov_line.int_value ();
+
+              if (! error_state)
+                {
+                  event_listener->update_dbstop_marker (insert, file, line);
+
+                  do_process_events ();
+                }
+              else
+                ::error ("invalid struct in dbstop marker callback");
+            }
+          else
+            ::error ("expecting struct in dbstop marker callback");
+        }
+      else
+        ::error ("invalid call to dbstop marker callback");
+    }
+}
+
 bool
 octave_link::instance_ok (void)
 {
   bool retval = true;
 
   if (! instance)
     {
       instance = new octave_link ();
diff --git a/libgui/src/octave-adapter/octave-link.h b/libgui/src/octave-adapter/octave-link.h
--- a/libgui/src/octave-adapter/octave-link.h
+++ b/libgui/src/octave-adapter/octave-link.h
@@ -147,16 +147,23 @@ public:
   }
 
   static void debug_input_event_hook_fcn (const octave_value_list& args)
   {
     if (instance_ok ())
       instance->do_debug_input_event_hook_fcn (args);
   }
 
+  static void
+  update_breakpoint_hook_fcn (bool insert, const octave_value_list& args)
+  {
+    if (instance_ok ())
+      instance->do_update_breakpoint_hook_fcn (insert, args);
+  }
+
 private:
 
   static octave_link *instance;
 
   static void cleanup_instance (void) { delete instance; instance = 0; }
 
   // No copying!
 
@@ -214,11 +221,13 @@ private:
   std::string do_last_working_directory (void);
   void do_update_workspace (void);
   void do_update_history (void);
   void do_update_debug_pointer (const octave_value_list& args);
 
   void do_pre_input_event_hook_fcn (void);
   void do_post_input_event_hook_fcn (void);
   void do_debug_input_event_hook_fcn (const octave_value_list& args);
+  void do_update_breakpoint_hook_fcn (bool insert,
+                                      const octave_value_list& args);
 };
 
 #endif // OCTAVELINK_H
diff --git a/libgui/src/octave-adapter/octave-main-thread.cc b/libgui/src/octave-adapter/octave-main-thread.cc
--- a/libgui/src/octave-adapter/octave-main-thread.cc
+++ b/libgui/src/octave-adapter/octave-main-thread.cc
@@ -60,16 +60,36 @@ debug_input_event_hook_fcn (const octave
 {
   octave_value_list retval;
 
   octave_link::debug_input_event_hook_fcn (args);
 
   return retval;
 }
 
+static octave_value_list
+dbstop_hook_fcn (const octave_value_list& args, int)
+{
+  octave_value_list retval;
+
+  octave_link::update_breakpoint_hook_fcn (true, args);
+
+  return retval;
+}
+
+static octave_value_list
+dbclear_hook_fcn (const octave_value_list& args, int)
+{
+  octave_value_list retval;
+
+  octave_link::update_breakpoint_hook_fcn (false, args);
+
+  return retval;
+}
+
 octave_main_thread::octave_main_thread () : QThread ()
 {
 }
 
 void
 octave_main_thread::run ()
 {
   // Matlab uses "C" locale for LC_NUMERIC class regardless of local setting
@@ -87,13 +107,21 @@ octave_main_thread::run ()
   octave_value post_fcn (new octave_builtin (post_input_event_hook_fcn));
   octave_value post_fcn_handle (new octave_fcn_handle (post_fcn));
   Fadd_post_input_event_hook (post_fcn_handle);
 
   octave_value debug_fcn (new octave_builtin (debug_input_event_hook_fcn));
   octave_value debug_fcn_handle (new octave_fcn_handle (debug_fcn));
   Fadd_debug_input_event_hook (debug_fcn_handle);
 
+  octave_value dbstop_fcn (new octave_builtin (dbstop_hook_fcn));
+  octave_value dbstop_fcn_handle (new octave_fcn_handle (dbstop_fcn));
+  Fadd_dbstop_hook (dbstop_fcn_handle);
+
+  octave_value dbclear_fcn (new octave_builtin (dbclear_hook_fcn));
+  octave_value dbclear_fcn_handle (new octave_fcn_handle (dbclear_fcn));
+  Fadd_dbclear_hook (dbclear_fcn_handle);
+
   // Prime the history list.
   octave_link::update_history ();
 
   octave_execute_interpreter ();
 }
diff --git a/libgui/src/octave-qt-event-listener.cc b/libgui/src/octave-qt-event-listener.cc
--- a/libgui/src/octave-qt-event-listener.cc
+++ b/libgui/src/octave-qt-event-listener.cc
@@ -56,16 +56,25 @@ octave_qt_event_listener::update_history
 void
 octave_qt_event_listener::update_debug_pointer (const std::string& file,
                                                 int line)
 {
   emit update_debug_pointer_signal (QString::fromStdString (file), line);
 }
 
 void
+octave_qt_event_listener::update_dbstop_marker (bool insert,
+                                                const std::string& file,
+                                                int line)
+{
+  emit update_dbstop_marker_signal (insert, QString::fromStdString (file),
+                                    line);
+}
+
+void
 octave_qt_event_listener::about_to_exit ()
 {
   qApp->quit ();
 }
 
 void
 octave_qt_event_listener::entered_debug_mode ()
 { emit entered_debug_mode_signal (); }
diff --git a/libgui/src/octave-qt-event-listener.h b/libgui/src/octave-qt-event-listener.h
--- a/libgui/src/octave-qt-event-listener.h
+++ b/libgui/src/octave-qt-event-listener.h
@@ -33,23 +33,25 @@ class octave_qt_event_listener
   Q_OBJECT
   public:
   octave_qt_event_listener (QObject *parent = 0);
 
   void current_directory_has_changed (const std::string& directory);
   void update_workspace (void);
   void update_history (void);
   void update_debug_pointer (const std::string& file, int line);
+  void update_dbstop_marker (bool insert, const std::string& file, int line);
   void about_to_exit ();
 
   void entered_debug_mode ();
   void quit_debug_mode ();
 
 signals:
   void current_directory_has_changed_signal (const QString& directory);
   void update_workspace_signal (void);
   void update_history_signal (void);
   void update_debug_pointer_signal (const QString& file, int line);
+  void update_dbstop_marker_signal (bool insert, const QString& file, int line);
   void entered_debug_mode_signal ();
   void quit_debug_mode_signal ();
 };
 
 #endif // OCTAVEQTEVENTLISTENER_H
diff --git a/libinterp/interpfcn/debug.cc b/libinterp/interpfcn/debug.cc
--- a/libinterp/interpfcn/debug.cc
+++ b/libinterp/interpfcn/debug.cc
@@ -32,16 +32,17 @@ along with Octave; see the file COPYING.
 #include <string>
 
 #include "file-stat.h"
 #include "singleton-cleanup.h"
 
 #include "defun.h"
 #include "error.h"
 #include "help.h"
+#include "hook-fcn.h"
 #include "input.h"
 #include "pager.h"
 #include "oct-obj.h"
 #include "utils.h"
 #include "parse.h"
 #include "symtab.h"
 #include "gripes.h"
 #include "ov.h"
@@ -180,16 +181,27 @@ get_user_code (const std::string& fname 
 
       if (fcn.is_defined () && fcn.is_user_code ())
         dbg_fcn = fcn.user_code_value ();
     }
 
   return dbg_fcn;
 }
 
+octave_value
+location_info (const std::string& fname, int line)
+{
+  octave_scalar_map location_info_map;
+
+  location_info_map.setfield ("file", fname);
+  location_info_map.setfield ("line", line);
+
+  return octave_value (location_info_map);
+}
+
 static void
 parse_dbfunction_params (const char *who, const octave_value_list& args,
                          std::string& symbol_name, bp_table::intmap& lines)
 {
   int nargin = args.length ();
   int idx = 0;
   int list_idx = 0;
   symbol_name = std::string ();
@@ -268,16 +280,211 @@ bp_table::instance_ok (void)
     {
       ::error ("unable to create breakpoint table!");
       retval = false;
     }
 
   return retval;
 }
 
+static hook_function_list dbstop_hook_functions;
+static hook_function_list dbclear_hook_functions;
+
+DEFUN (add_dbstop_hook, args, ,
+  "-*- texinfo -*-\n\
+@deftypefn  {Built-in Function} {@var{id} =} add_dbstop_hook (@var{fcn})\n\
+@deftypefnx {Built-in Function} {@var{id} =} add_dbstop_hook (@var{fcn}, @var{data})\n\
+Add the named function or function handle @var{fcn} to the list of\n\
+functions to call when a debugger breakpoint is set.  The function\n\
+should have the form\n\
+\n\
+@example\n\
+@var{fcn} (@var{location}, @var{data})\n\
+@end example\n\
+\n\
+in which @var{location} is a structure containing the following elements:\n\
+\n\
+@table @code\n\
+@item file\n\
+The name of the file where the breakpoint is located.\n\
+@item line\n\
+The line number corresponding to the breakpoint.\n\
+@end table\n\
+\n\
+If @var{data} is omitted when the hook function is added, the hook\n\
+function is called with a single argument.\n\
+\n\
+The returned identifier may be used to remove the function handle from\n\
+the list of input hook functions.\n\
+@seealso{remove_dbstop_hook}\n\
+@end deftypefn")
+{
+  octave_value retval;
+
+  int nargin = args.length ();
+
+  if (nargin == 1 || nargin == 2)
+    {
+      octave_value user_data;
+
+      if (nargin == 2)
+        user_data = args(1);
+
+      hook_function hook_fcn (args(0), user_data);
+
+      if (! error_state)
+        {
+          dbstop_hook_functions.insert (hook_fcn.id (), hook_fcn);
+
+          retval = hook_fcn.id ();
+        }
+      else
+        error ("add_dbstop_hook: expecting string as first arg");
+    }
+  else
+    print_usage ();
+
+  return retval;
+}
+
+DEFUN (remove_dbstop_hook, args, ,
+  "-*- texinfo -*-\n\
+@deftypefn {Built-in Function} {} remove_dbstop_hook (@var{name})\n\
+@deftypefnx {Built-in Function} {} remove_dbstop_hook (@var{fcn_id})\n\
+Remove the named function or function handle with the given identifier\n\
+from the list of functions to call when a debugger breakpoint is set.\n\
+@seealso{add_dbstop_hook}\n\
+@end deftypefn")
+{
+  octave_value_list retval;
+
+  int nargin = args.length ();
+
+  if (nargin == 1 || nargin == 2)
+    {
+      std::string hook_fcn_id = args(0).string_value ();
+
+      bool warn = (nargin < 2);
+
+      if (! error_state)
+        {
+          hook_function_list::iterator p
+            = dbstop_hook_functions.find (hook_fcn_id);
+
+          if (p != dbstop_hook_functions.end ())
+            dbstop_hook_functions.erase (p);
+          else if (warn)
+            warning ("remove_dbstop_hook: %s not found in list",
+                     hook_fcn_id.c_str ());
+        }
+      else
+        error ("remove_dbstop_hook: argument not valid as a hook function name or id");
+    }
+  else
+    print_usage ();
+
+  return retval;
+}
+
+DEFUN (add_dbclear_hook, args, ,
+  "-*- texinfo -*-\n\
+@deftypefn  {Built-in Function} {@var{id} =} add_dbclear_hook (@var{fcn})\n\
+@deftypefnx {Built-in Function} {@var{id} =} add_dbclear_hook (@var{fcn}, @var{data})\n\
+Add the named function or function handle @var{fcn} to the list of\n\
+functions to call when a debugger breakpoint is cleared.  The function\n\
+should have the form\n\
+\n\
+@example\n\
+@var{fcn} (@var{location}, @var{data})\n\
+@end example\n\
+\n\
+in which @var{location} is a structure containing the following elements:\n\
+\n\
+@table @code\n\
+@item file\n\
+The name of the file where the breakpoint is located.\n\
+@item line\n\
+The line number corresponding to the breakpoint.\n\
+@end table\n\
+\n\
+If @var{data} is omitted when the hook function is added, the hook\n\
+function is called with a single argument.\n\
+\n\
+The returned identifier may be used to remove the function handle from\n\
+the list of input hook functions.\n\
+@seealso{remove_dbclear_hook}\n\
+@end deftypefn")
+{
+  octave_value retval;
+
+  int nargin = args.length ();
+
+  if (nargin == 1 || nargin == 2)
+    {
+      octave_value user_data;
+
+      if (nargin == 2)
+        user_data = args(1);
+
+      hook_function hook_fcn (args(0), user_data);
+
+      if (! error_state)
+        {
+          dbclear_hook_functions.insert (hook_fcn.id (), hook_fcn);
+
+          retval = hook_fcn.id ();
+        }
+      else
+        error ("add_dbclear_hook: expecting string as first arg");
+    }
+  else
+    print_usage ();
+
+  return retval;
+}
+
+DEFUN (remove_dbclear_hook, args, ,
+  "-*- texinfo -*-\n\
+@deftypefn {Built-in Function} {} remove_dbclear_hook (@var{name})\n\
+@deftypefnx {Built-in Function} {} remove_dbclear_hook (@var{fcn_id})\n\
+Remove the named function or function handle with the given identifier\n\
+from the list of functions to call when a debugger breakpoint is cleared.\n\
+@seealso{add_dbclear_hook}\n\
+@end deftypefn")
+{
+  octave_value_list retval;
+
+  int nargin = args.length ();
+
+  if (nargin == 1 || nargin == 2)
+    {
+      std::string hook_fcn_id = args(0).string_value ();
+
+      bool warn = (nargin < 2);
+
+      if (! error_state)
+        {
+          hook_function_list::iterator p
+            = dbclear_hook_functions.find (hook_fcn_id);
+
+          if (p != dbclear_hook_functions.end ())
+            dbclear_hook_functions.erase (p);
+          else if (warn)
+            warning ("remove_dbclear_hook: %s not found in list",
+                     hook_fcn_id.c_str ());
+        }
+      else
+        error ("remove_dbclear_hook: argument not valid as a hook function name or id");
+    }
+  else
+    print_usage ();
+
+  return retval;
+}
+
 bp_table::intmap
 bp_table::do_add_breakpoint (const std::string& fname,
                              const bp_table::intmap& line)
 {
   intmap retval;
 
   octave_idx_type len = line.size ();
 
@@ -297,16 +504,22 @@ bp_table::do_add_breakpoint (const std::
                 {
                   int lineno = p->second;
 
                   retval[i] = cmds->set_breakpoint (lineno);
 
                   if (retval[i] != 0)
                     {
                       bp_set.insert (fname);
+
+                      std::string file = dbg_fcn->fcn_file_name ();
+
+                      if (! file.empty ())
+                        dbstop_hook_functions.run
+                          (location_info (file, retval[i]));
                     }
                 }
             }
         }
     }
   else
     error ("add_breakpoint: unable to find the requested function\n");
 
@@ -330,38 +543,47 @@ bp_table::do_remove_breakpoint (const st
       retval = results.size ();
     }
   else
     {
       octave_user_code *dbg_fcn = get_user_code (fname);
 
       if (dbg_fcn)
         {
+          std::string file = dbg_fcn->fcn_file_name ();
+
           tree_statement_list *cmds = dbg_fcn->body ();
 
           if (cmds)
             {
               octave_value_list results = cmds->list_breakpoints ();
 
               if (results.length () > 0)
                 {
                   for (int i = 0; i < len; i++)
                     {
                       const_intmap_iterator p = line.find (i);
 
                       if (p != line.end ())
-                        cmds->delete_breakpoint (p->second);
+                        {
+                          int lineno = p->second;
+
+                          cmds->delete_breakpoint (lineno);
+
+                          if (! file.empty ())
+                            dbclear_hook_functions.run
+                              (location_info (file, lineno));
+                        }
                     }
 
                   results = cmds->list_breakpoints ();
 
                   bp_set_iterator it = bp_set.find (fname);
                   if (results.length () == 0 && it != bp_set.end ())
                     bp_set.erase (it);
-
                 }
 
               retval = results.length ();
             }
         }
       else
         error ("remove_breakpoint: unable to find the requested function\n");
     }
@@ -377,33 +599,37 @@ bp_table::do_remove_all_breakpoints_in_f
                                              bool silent)
 {
   intmap retval;
 
   octave_user_code *dbg_fcn = get_user_code (fname);
 
   if (dbg_fcn)
     {
+      std::string file = dbg_fcn->fcn_file_name ();
+
       tree_statement_list *cmds = dbg_fcn->body ();
 
       if (cmds)
         {
           octave_value_list bkpts = cmds->list_breakpoints ();
 
           for (int i = 0; i < bkpts.length (); i++)
             {
               int lineno = static_cast<int> (bkpts(i).int_value ());
               cmds->delete_breakpoint (lineno);
               retval[i] = lineno;
+
+              if (! file.empty ())
+                dbclear_hook_functions.run (location_info (file, lineno));
             }
 
           bp_set_iterator it = bp_set.find (fname);
           if (it != bp_set.end ())
             bp_set.erase (it);
-
         }
     }
   else if (! silent)
     error ("remove_all_breakpoint_in_file: "
            "unable to find the requested function\n");
 
   tree_evaluator::debug_mode = bp_table::have_breakpoints () || Vdebugging;
 
diff --git a/libinterp/interpfcn/debug.h b/libinterp/interpfcn/debug.h
--- a/libinterp/interpfcn/debug.h
+++ b/libinterp/interpfcn/debug.h
@@ -126,9 +126,11 @@ private:
 
   fname_line_map do_get_breakpoint_list (const octave_value_list& fname_list);
 
   bool do_have_breakpoints (void) { return (! bp_set.empty ()); }
 };
 
 extern std::string get_file_line (const std::string& fname, size_t line);
 
+extern octave_value location_info (const std::string& fname, int line);
+
 #endif
diff --git a/libinterp/interpfcn/input.cc b/libinterp/interpfcn/input.cc
--- a/libinterp/interpfcn/input.cc
+++ b/libinterp/interpfcn/input.cc
@@ -496,24 +496,18 @@ get_debug_input (const std::string& prom
 
           buf << "stopped in " << nm;
 
           if (curr_debug_line > 0)
             buf << " at line " << curr_debug_line;
 
           if (have_file)
             {
-              octave_scalar_map location_info_map;
-
-              location_info_map.setfield ("file", nm);
-              location_info_map.setfield ("line", curr_debug_line);
-
-              octave_value location_info (location_info_map);
-
-              debug_input_event_hook_functions.run (location_info);
+              debug_input_event_hook_functions.run
+                (location_info (nm, curr_debug_line));
 
               std::string line_buf
                 = get_file_line (nm, curr_debug_line);
 
               if (! line_buf.empty ())
                 buf << "\n" << curr_debug_line << ": " << line_buf;
             }
         }
