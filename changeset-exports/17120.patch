# HG changeset patch
# User Rik <rik@octave.org>
# Date 1375303424 25200
#      Wed Jul 31 13:43:44 2013 -0700
# Node ID a639221f9863805e7d3cae2c617589ea8873c7f5
# Parent  bd50e06605453a671df31e2f7b85bddbd24a0819
sombrero.m: Overhaul documentation and make calling forms equivalent to peaks()

* scripts/plot/sombrero.m: Overhaul documentation.  Return only Z argument if
nargout == 1.

* scripts/plot/ribbon.m, scripts/plot/surf.m, scripts/plot/surfc.m: Rephrase
%!tests to take advantage of new calling form for sombrero.

diff --git a/scripts/plot/ribbon.m b/scripts/plot/ribbon.m
--- a/scripts/plot/ribbon.m
+++ b/scripts/plot/ribbon.m
@@ -108,13 +108,13 @@ function h = ribbon (varargin)
 
 endfunction
 
 
 %!demo
 %! clf;
 %! colormap ('default');
 %! [x, y, z] = sombrero ();
-%! [x, y] = meshgrid (x, y);
+%! [~, y] = meshgrid (x, y);
 %! ribbon (y, z);
 
 %!FIXME: Could have some input validation tests here
 
diff --git a/scripts/plot/sombrero.m b/scripts/plot/sombrero.m
--- a/scripts/plot/sombrero.m
+++ b/scripts/plot/sombrero.m
@@ -14,45 +14,64 @@
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {} sombrero ()
 ## @deftypefnx {Function File} {} sombrero (@var{n})
-## Produce the familiar three-dimensional sombrero plot using @var{n}
-## grid lines.  If @var{n} is omitted, a value of 41 is assumed.
+## @deftypefnx {Function File} {@var{z} =} sombrero (@dots{})
+## @deftypefnx {Function File} {[@var{x}, @var{y}, @var{z}] =} sombrero (@dots{})
+## Plot the familiar 3-D sombrero function.
 ##
 ## The function plotted is
+## @tex
+## $$z = { \rm{sin} (\sqrt {(x^2 + y^2)}) \over \sqrt {(x^2 + y^2)} }$$
+## @end tex
+## @ifnottex
 ##
 ## @example
 ## z = sin (sqrt (x^2 + y^2)) / (sqrt (x^2 + y^2))
 ## @end example
-## @seealso{surf, meshgrid, mesh}
+##
+## @end ifnottex
+## Called without a return argument, @code{sombrero} plots the surface of the
+## above function over the meshgrid [-8,8] using @code{surf}.
+## 
+## If @var{n} is a scalar the plot is made with @var{n} grid lines.
+## The default value for @var{n} is 41.
+##
+## When called with output arguments, return the data for the function
+## evaluated over the meshgrid.  This can subsequently be plotted with
+## @code{surf (@var{x}, @var{y}, @var{z})}.
+##
+## @seealso{peaks, meshgrid, mesh, surf}
 ## @end deftypefn
 
 ## Author: jwe
 
 function [x, y, z] = sombrero (n = 41)
 
   if (nargin > 2)
     print_usage ();
   elseif (n <= 1)
     error ("sombrero: number of grid lines N must be greater than 1");
   endif
 
   tx = linspace (-8, 8, n)';
   ty = tx;
   [xx, yy] = meshgrid (tx, ty);
-  r = sqrt (xx .^ 2 + yy .^ 2) + eps;
+  r = sqrt (xx .^ 2 + yy .^ 2) + eps;  # eps prevents div/0 errors
   tz = sin (r) ./ r;
+
   if (nargout == 0)
     surf (tx, ty, tz);
-    box ("off");
+  elseif (nargout == 1)
+    z = tz;
   else
     x = tx;
     y = ty;
     z = tz;
   endif
 
 endfunction
 
diff --git a/scripts/plot/surf.m b/scripts/plot/surf.m
--- a/scripts/plot/surf.m
+++ b/scripts/plot/surf.m
@@ -71,17 +71,17 @@ endfunction
 %! clf;
 %! colormap ('default');
 %! [~,~,Z] = peaks ();
 %! surf (Z);
 
 %!demo
 %! clf;
 %! colormap ('default');
-%! [~,~,Z] = sombrero ();
+%! Z = sombrero ();
 %! [Fx,Fy] = gradient (Z);
 %! surf (Z, Fx+Fy);
 %! shading interp;
 
 %!demo
 %! clf;
 %! colormap ('default');
 %! [X,Y,Z] = sombrero ();
diff --git a/scripts/plot/surfc.m b/scripts/plot/surfc.m
--- a/scripts/plot/surfc.m
+++ b/scripts/plot/surfc.m
@@ -85,17 +85,17 @@ endfunction
 %! clf;
 %! colormap ('default');
 %! [~,~,Z] = peaks ();
 %! surfc (Z);
 
 %!demo
 %! clf;
 %! colormap ('default');
-%! [~,~,Z] = sombrero ();
+%! Z = sombrero ();
 %! [Fx,Fy] = gradient (Z);
 %! surfc (Z, Fx+Fy);
 %! shading interp;
 
 %!demo
 %! clf;
 %! colormap ('default');
 %! [X,Y,Z] = sombrero ();
