# HG changeset patch
# User Mike Miller <mtmiller@octave.org>
# Date 1467319856 25200
#      Thu Jun 30 13:50:56 2016 -0700
# Node ID 18af3ea1d387492e10449ec3d774f9d8c1033a55
# Parent  1fc285f93592f1022201e4a3af47eeb3418bf671
Mark failing tests for acos, acosh, asin, and asinh with xtest (bug #48285)

* mappers.cc: Make tests for acos, acosh, asin, and asinh into %!xtests due to
failures on systems with older versions of GNU libm.  Add a FIXME comment.

diff --git a/libinterp/corefcn/mappers.cc b/libinterp/corefcn/mappers.cc
--- a/libinterp/corefcn/mappers.cc
+++ b/libinterp/corefcn/mappers.cc
@@ -121,16 +121,19 @@ Compute the inverse cosine in radians fo
 %! rval = pi;
 %! obs = acos ([-2, -2-i*eps, -2+i*eps]);
 %! exp = [rval - ival*i, rval + ival*i, rval - ival*i];
 %! assert (obs, exp, 2*eps);
 %! assert (acos ([2 0]),  [ival*i, pi/2], 2*eps);
 %! assert (acos ([2 0i]), [ival*i, pi/2], 2*eps);
 
 ## Test large magnitude arguments (bug #45507)
+## FIXME: Test fails with older versions of libm. Try to detect and work
+##        around this, or wait until working version of libm is widespread?
+%!xtest
 %! x = [1, -1, i, -i] .* 1e150;
 %! v = [0, pi, pi/2, pi/2];
 %! assert (real (acos (x)), v);
 
 %!error acos ()
 %!error acos (1, 2)
 */
 
@@ -165,17 +168,19 @@ Compute the inverse hyperbolic cosine fo
 
 %!test
 %! re = single (2.99822295029797);
 %! im = single (pi/2);
 %! assert (acosh (single (10i)), re + i*im, 5*eps ("single"));
 %! assert (acosh (single (-10i)), re - i*im, 5*eps ("single"));
 
 ## Test large magnitude arguments (bug #45507)
-%!test
+## FIXME: Test fails with older versions of libm. Try to detect and work
+##        around this, or wait until working version of libm is widespread?
+%!xtest
 %! x = [1, -1, i, -i] .* 1e150;
 %! v = [0, pi, pi/2, -pi/2];
 %! assert (imag (acosh (x)), v);
 
 %!error acosh ()
 %!error acosh (1, 2)
 */
 
@@ -284,16 +289,19 @@ Compute the inverse sine in radians for 
 %! assert (obs, exp, 2*eps);
 %! obs = asin ([-2, -2-i*eps, -2+i*eps]);
 %! exp = [-rval + ival*i, -rval - ival*i, -rval + ival*i];
 %! assert (obs, exp, 2*eps);
 %! assert (asin ([2 0]),  [rval - ival*i, 0], 2*eps);
 %! assert (asin ([2 0i]), [rval - ival*i, 0], 2*eps);
 
 ## Test large magnitude arguments (bug #45507)
+## FIXME: Test fails with older versions of libm. Try to detect and work
+##        around this, or wait until working version of libm is widespread?
+%!xtest
 %! x = [1, -1, i, -i] .* 1e150;
 %! v = [pi/2, -pi/2, 0, -0];
 %! assert (real (asin (x)), v);
 
 %!error asin ()
 %!error asin (1, 2)
 */
 
@@ -317,16 +325,19 @@ Compute the inverse hyperbolic sine for 
 %! assert (asinh (x), v,  sqrt (eps));
 
 %!test
 %! v = single ([0, pi/2*i, 0, -pi/2*i]);
 %! x = single ([0, i, 0, -i]);
 %! assert (asinh (x), v,  sqrt (eps ("single")));
 
 ## Test large magnitude arguments (bug #45507)
+## FIXME: Test fails with older versions of libm. Try to detect and work
+##        around this, or wait until working version of libm is widespread?
+%!xtest
 %! x = [1, -1, i, -i] .* 1e150;
 %! v = [0, 0, pi/2, -pi/2];
 %! assert (imag (asinh (x)), v);
 
 %!error asinh ()
 %!error asinh (1, 2)
 */
 
@@ -354,16 +365,17 @@ Compute the inverse tangent in radians f
 %! assert (atan (x), v, sqrt (eps));
 
 %!test
 %! v = single ([0, pi/6, pi/4, pi/3, -pi/3, -pi/4, -pi/6, 0]);
 %! x = single ([0, rt3/3, 1, rt3, -rt3, -1, -rt3/3, 0]);
 %! assert (atan (x), v, sqrt (eps ("single")));
 
 ## Test large magnitude arguments (bug #44310, bug #45507)
+%!test
 %! x = [1, -1, i, -i] .* 1e150;
 %! v = [pi/2, -pi/2, pi/2, -pi/2];
 %! assert (real (atan (x)), v);
 %! assert (imag (atan (x)), [0, 0, 0, 0], eps);
 
 %!error atan ()
 %!error atan (1, 2)
 */
@@ -388,16 +400,17 @@ Compute the inverse hyperbolic tangent f
 %! assert (atanh (x), v, sqrt (eps));
 
 %!test
 %! v = single ([0, 0]);
 %! x = single ([0, 0]);
 %! assert (atanh (x), v, sqrt (eps ("single")));
 
 ## Test large magnitude arguments (bug #44310, bug #45507)
+%!test
 %! x = [1, -1, i, -i] .* 1e150;
 %! v = [pi/2, pi/2, pi/2, -pi/2];
 %! assert (imag (atanh (x)), v);
 %! assert (real (atanh (x)), [0, 0, 0, 0], eps);
 
 %!error atanh ()
 %!error atanh (1, 2)
 */
