# HG changeset patch
# User jwe
# Date 837116318 0
#      Thu Jul 11 20:18:38 1996 +0000
# Node ID 2b5788792cad9b9643d642c66b36b9fb1e5cf5ae
# Parent  e2a8f216373dfbfa92229fa5e1bfd1f4a34c427c
[project @ 1996-07-11 20:18:38 by jwe]

diff --git a/scripts/audio/lin2mu.m b/scripts/audio/lin2mu.m
--- a/scripts/audio/lin2mu.m
+++ b/scripts/audio/lin2mu.m
@@ -12,23 +12,23 @@
 ### MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ### General Public License for more details.
 ###
 ### You should have received a copy of the GNU General Public License
 ### along with Octave; see the file COPYING.  If not, write to the Free
 ### Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ### 02111-1307, USA.
 
+## usage:  y = lin2mu (x)
+##
+## x is a vector of an 8- or 16-bit linearly encoded audio sample,
+## This is transformed into a mu-law encoded vector.
+
 function y = lin2mu (x)
   
-  ## usage:  y = lin2mu (x)
-  ##
-  ## x is a vector of an 8- or 16-bit linearly encoded audio sample,
-  ## This is transformed into a mu-law encoded vector.
-
   ## Written by AW (Andreas.Weingessel@ci.tuwien.ac.at) on Oct 17, 1994
   ## Copyright Department of Probability Theory and Statistics TU Wien
 
   if (nargin != 1)
     usage ("y = lin2mu (x)");
   endif
 
   if (! is_vector (x))
diff --git a/scripts/audio/loadaudio.m b/scripts/audio/loadaudio.m
--- a/scripts/audio/loadaudio.m
+++ b/scripts/audio/loadaudio.m
@@ -12,33 +12,33 @@
 ### MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ### General Public License for more details.
 ###
 ### You should have received a copy of the GNU General Public License
 ### along with Octave; see the file COPYING.  If not, write to the Free
 ### Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ### 02111-1307, USA.
 
+## usage:  X = loadaudio (name [, ext [, bit]])
+##
+## Loads audio data from the file "name.ext" into the data vector X. 
+## Default value for the "ext" argument, which has to be written
+## without the initial ".", is "lin".
+## Currently, the following audio formats are supported:
+## *) mu-law encoding with extension "mu", "au" or "snd"
+## *) linear encoding with extension "lin" or "raw"
+## 
+## The `bit' argument can be either 8 (default) or 16.
+## Depending on the value of bit, linearly encoded files are
+## interpreted as being in 8 and 16 bit format, respectively, and
+## mu-law encoded files are transformed to 8 and 16-bit linear
+## format, respectively.
+
 function X = loadaudio (name, ext, bit)
   
-  ## usage:  X = loadaudio (name [, ext [, bit]])
-  ##
-  ## Loads audio data from the file "name.ext" into the data vector X. 
-  ## Default value for the "ext" argument, which has to be written
-  ## without the initial ".", is "lin".
-  ## Currently, the following audio formats are supported:
-  ## *) mu-law encoding with extension "mu", "au" or "snd"
-  ## *) linear encoding with extension "lin" or "raw"
-  ## 
-  ## The `bit' argument can be either 8 (default) or 16.
-  ## Depending on the value of bit, linearly encoded files are
-  ## interpreted as being in 8 and 16 bit format, respectively, and
-  ## mu-law encoded files are transformed to 8 and 16-bit linear
-  ## format, respectively.
-
   ## Written by AW (Andreas.Weingessel@ci.tuwien.ac.at) on Apr 10, 1994
   ## Last modified by AW on Oct 29, 1994
 
   if (nargin == 0 || nargin > 3)
     usage ("loadaudio (name [, ext [, bit]])");
   endif
 
   if (nargin == 1)
diff --git a/scripts/audio/mu2lin.m b/scripts/audio/mu2lin.m
--- a/scripts/audio/mu2lin.m
+++ b/scripts/audio/mu2lin.m
@@ -12,25 +12,25 @@
 ### MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ### General Public License for more details.
 ###
 ### You should have received a copy of the GNU General Public License
 ### along with Octave; see the file COPYING.  If not, write to the Free
 ### Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ### 02111-1307, USA.
 
+## usage: y = mu2lin (x [, bit])
+##
+## If x is a vector of audio data with mu-law encoding, mu2lin (x)
+## holds the same data with linear encoding.
+## The optional argument bit specifies whether the input data is 
+## 8 bit (default) or 16 bit.
+
 function y = mu2lin (x, bit)
   
-  ## usage: y = mu2lin (x [, bit])
-  ##
-  ## If x is a vector of audio data with mu-law encoding, mu2lin (x)
-  ## holds the same data with linear encoding.
-  ## The optional argument bit specifies whether the input data is 
-  ## 8 bit (default) or 16 bit.
-
   ## Written by AW (Andreas.Weingessel@ci.tuwien.ac.at) on Oct 18, 1994
   ## Updated by AW (Andreas.Weingessel@ci.tuwien.ac.at) on Oct 27, 1994
   ## Copyright Department of Probability Theory and Statistics TU Wien
 
   if (nargin == 1)
     bit = 8;
   elseif (nargin == 2)
     if (bit != 8 && bit != 16)
diff --git a/scripts/audio/playaudio.m b/scripts/audio/playaudio.m
--- a/scripts/audio/playaudio.m
+++ b/scripts/audio/playaudio.m
@@ -12,32 +12,32 @@
 ### MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ### General Public License for more details.
 ###
 ### You should have received a copy of the GNU General Public License
 ### along with Octave; see the file COPYING.  If not, write to the Free
 ### Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ### 02111-1307, USA.
 
+## usage: playaudio (name [, ext]) 
+##        playaudio (X)
+##
+## `playaudio ("name" [, "ext"])' plays the audio file "name.ext". The
+## default value for the "ext" argument, which has to be written
+## without the initial ".", is "lin".
+## Currently, the following audio formats are suppored:
+## *) linear encoding with extension "lin" or "raw", played using
+##    /dev/dsp 
+## *) mu-law encoding with extension "mu", "au" or "snd", played
+##    using /dev/audio 
+##
+## `playaudio (X)' plays the audio data contained in the vector X.
+
 function playaudio (name, ext)
   
-  ## usage: playaudio (name [, ext]) 
-  ##        playaudio (X)
-  ##
-  ## `playaudio ("name" [, "ext"])' plays the audio file "name.ext". The
-  ## default value for the "ext" argument, which has to be written
-  ## without the initial ".", is "lin".
-  ## Currently, the following audio formats are suppored:
-  ## *) linear encoding with extension "lin" or "raw", played using
-  ##    /dev/dsp 
-  ## *) mu-law encoding with extension "mu", "au" or "snd", played
-  ##    using /dev/audio 
-  ##
-  ## `playaudio (X)' plays the audio data contained in the vector X.
-
   ## Written by AW (Andreas.Weingessel@ci.tuwien.ac.at) on Apr 11, 1994
   ## Last modified by AW on Nov 7, 1994
   ## Copyright Dept of Probability Theory and Statistics TU Wien
 
   file = octave_tmp_file_name ();
 
   usage_msg = "playaudio (name [, ext])  or  playaudio (X)";
   
diff --git a/scripts/audio/record.m b/scripts/audio/record.m
--- a/scripts/audio/record.m
+++ b/scripts/audio/record.m
@@ -12,24 +12,24 @@
 ### MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ### General Public License for more details.
 ###
 ### You should have received a copy of the GNU General Public License
 ### along with Octave; see the file COPYING.  If not, write to the Free
 ### Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ### 02111-1307, USA.
 
-function X = record (sec, sampling_rate)
+## usage:  X = record (sec [, sampling_rate])
+##
+## Records sec seconds of audio into the vector X.
+## The default value for the sampling_rate is 8000, ie. 8kHz.
+## The program waits for you to hit the ENTER key, then the recording
+## starts immediatly.
 
-  ## usage:  X = record (sec [, sampling_rate])
-  ##
-  ## Records sec seconds of audio into the vector X.
-  ## The default value for the sampling_rate is 8000, ie. 8kHz.
-  ## The program waits for you to hit the ENTER key, then the recording
-  ## starts immediatly.
+function X = record (sec, sampling_rate)
 
   ## Written by AW (Andreas.Weingessel@ci.tuwien.ac.at) on Sep 19, 1994
   ## Last modified by AW on Oct 5, 1994
   ## Copyright Dept of Probability Theory and Statistics TU Wien
 
   if (nargin == 1)
     sampling_rate = 8000;
   elseif (nargin != 2)
diff --git a/scripts/audio/saveaudio.m b/scripts/audio/saveaudio.m
--- a/scripts/audio/saveaudio.m
+++ b/scripts/audio/saveaudio.m
@@ -12,30 +12,30 @@
 ### MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ### General Public License for more details.
 ###
 ### You should have received a copy of the GNU General Public License
 ### along with Octave; see the file COPYING.  If not, write to the Free
 ### Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ### 02111-1307, USA.
 
+## usage:  saveaudio (name, X, [, ext [, bit]])
+##
+## Saves a vector X of audio data in the file "name.ext".
+## The format of the audio file is determined by ext which has to be
+## written without an inital ".";  default value for ext is "lin". 
+##
+## Currently, the following audio formats are supported:
+## *) mu-law files with extension "mu", "au" or "snd"
+## *) linearly encoded files with extension "lin" or "raw"
+## If the data is saved linearly, the bit argument decides whether an
+## 8-bit (default) or a 16-bit format is used.
+
 function saveaudio (name, X, ext, bit)
   
-  ## usage:  saveaudio (name, X, [, ext [, bit]])
-  ##
-  ## Saves a vector X of audio data in the file "name.ext".
-  ## The format of the audio file is determined by ext which has to be
-  ## written without an inital ".";  default value for ext is "lin". 
-  ##
-  ## Currently, the following audio formats are supported:
-  ## *) mu-law files with extension "mu", "au" or "snd"
-  ## *) linearly encoded files with extension "lin" or "raw"
-  ## If the data is saved linearly, the bit argument decides whether an
-  ## 8-bit (default) or a 16-bit format is used.
-
   ## Written by AW (Andreas.Weingessel@ci.tuwien.ac.at) on Sep 5, 1994
   ## Last modified by AW on Oct 29, 1994
   ## Copyright Dept of Probability Theory and Statistics TU Wien
 
   if (nargin < 2 || nargin > 4)
     usage ("saveaudio (X, name [, ext [, bit]])");
   endif
 
diff --git a/scripts/audio/setaudio.m b/scripts/audio/setaudio.m
--- a/scripts/audio/setaudio.m
+++ b/scripts/audio/setaudio.m
@@ -12,22 +12,22 @@
 ### MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ### General Public License for more details.
 ###
 ### You should have received a copy of the GNU General Public License
 ### along with Octave; see the file COPYING.  If not, write to the Free
 ### Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ### 02111-1307, USA.
 
+## usage: setaudio ([w_type [, value]])
+##
+## executes the shell command `mixer [w_type [, value]]'
+
 function setaudio (w_type, value)
   
-  ## usage: setaudio ([w_type [, value]])
-  ##
-  ## executes the shell command `mixer [w_type [, value]]'
-
   ## Written by AW (Andreas.Weingessel@ci.tuwien.ac.at) on Oct 5, 1994
   ## Updated by AW on Nov 3, 1994
   ## Copyright Department of Probability Theory and Statistics TU Wien
 
   if (nargin == 0)
     system ("mixer");
   elseif (nargin == 1)
     system (sprintf ("mixer %s", w_type));
diff --git a/scripts/control/abcddim.m b/scripts/control/abcddim.m
--- a/scripts/control/abcddim.m
+++ b/scripts/control/abcddim.m
@@ -12,28 +12,28 @@
 ### MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ### General Public License for more details.
 ###
 ### You should have received a copy of the GNU General Public License
 ### along with Octave; see the file COPYING.  If not, write to the Free
 ### Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ### 02111-1307, USA.
 
-function [n, m, p] = abcddim (a, b, c, d)
+## Usage: [n, m, p] = abcddim (a, b, c, d)
+##
+## Check for compatibility of the dimensions of the matrices defining
+## the linear system (a, b, c, d).
+##
+## Returns n = number of system states,
+##         m = number of system inputs,
+##         p = number of system outputs.
+##
+## Returns n = m = p = -1 if the system is not compatible.
 
-  ## Usage: [n, m, p] = abcddim (a, b, c, d)
-  ##
-  ## Check for compatibility of the dimensions of the matrices defining
-  ## the linear system (a, b, c, d).
-  ##
-  ## Returns n = number of system states,
-  ##         m = number of system inputs,
-  ##         p = number of system outputs.
-  ##
-  ## Returns n = m = p = -1 if the system is not compatible.
+function [n, m, p] = abcddim (a, b, c, d)
 
   ## Written by A. S. Hodel (scotte@eng.auburn.edu) August 1993.
 
   if (nargin != 4)
     error ("usage: abcddim (a, b, c, d)");
   endif
 
   n = m = p = -1;
diff --git a/scripts/control/are.m b/scripts/control/are.m
--- a/scripts/control/are.m
+++ b/scripts/control/are.m
@@ -12,33 +12,33 @@
 ### MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ### General Public License for more details.
 ###
 ### You should have received a copy of the GNU General Public License
 ### along with Octave; see the file COPYING.  If not, write to the Free
 ### Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ### 02111-1307, USA.
 
-function x = are (a, b, c, opt)
+## Usage: x = are (a, b, c {,opt})
+##
+## Solves algebraic riccati equation
+##
+##   a' x + x a - x b x + c = 0
+##
+## for identically dimensioned square matrices a, b, c.  If b (c) is not
+## square, then the function attempts to use b * b' (c' * c) instead.
+##
+## Solution method: apply Laub's Schur method (IEEE Trans. Auto. Contr,
+## 1979) to the appropriate Hamiltonian matrix.
+##
+## opt is an option passed to the eigenvalue balancing routine default is "B".
+##
+## See also: balance
 
-  ## Usage: x = are (a, b, c {,opt})
-  ##
-  ## Solves algebraic riccati equation
-  ##
-  ##   a' x + x a - x b x + c = 0
-  ##
-  ## for identically dimensioned square matrices a, b, c.  If b (c) is not
-  ## square, then the function attempts to use b * b' (c' * c) instead.
-  ##
-  ## Solution method: apply Laub's Schur method (IEEE Trans. Auto. Contr,
-  ## 1979) to the appropriate Hamiltonian matrix.
-  ##
-  ## opt is an option passed to the eigenvalue balancing routine default is "B".
-  ##
-  ## See also: balance
+function x = are (a, b, c, opt)
 
   ## Written by A. S. Hodel (scotte@eng.auburn.edu) August 1993.
 
   if (nargin == 3 || nargin == 4)
     if (nargin == 4)
       if (! (strcmp (opt, "N") || strcmp (opt, "P") ...
 	     || strcmp (opt, "S") || strcmp (opt, "B") ...
 	     || strcmp (opt, "n") || strcmp (opt, "p") ...
diff --git a/scripts/control/c2d.m b/scripts/control/c2d.m
--- a/scripts/control/c2d.m
+++ b/scripts/control/c2d.m
@@ -12,29 +12,29 @@
 ### MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ### General Public License for more details.
 ###
 ### You should have received a copy of the GNU General Public License
 ### along with Octave; see the file COPYING.  If not, write to the Free
 ### Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ### 02111-1307, USA.
 
-function [Ad, Bd] = c2d (Ac, Bc, T)
+## Usage: [Ad, Bd] = c2d (Ac, Bc, T)
+##
+## converts the continuous time system described by:
+##   .
+##   x = Ac x + Bc u
+##
+## into a discrete time equivalent model via the matrix exponential
+##
+##   x[n+1] = Ad x[n] + Bd u[n]
+##
+## assuming a zero-order hold on the input and sample time T.
 
-  ## Usage: [Ad, Bd] = c2d (Ac, Bc, T)
-  ##
-  ## converts the continuous time system described by:
-  ##   .
-  ##   x = Ac x + Bc u
-  ##
-  ## into a discrete time equivalent model via the matrix exponential
-  ##
-  ##   x[n+1] = Ad x[n] + Bd u[n]
-  ##
-  ## assuming a zero-order hold on the input and sample time T.
+function [Ad, Bd] = c2d (Ac, Bc, T)
 
   ## Written by R.B. Tenison (btenison@eng.auburn.edu)
   ## October 1993
 
   ## check args
   if (nargin != 3)
     usage ("c2d (Ac, Bc, T)");
   endif
diff --git a/scripts/control/dare.m b/scripts/control/dare.m
--- a/scripts/control/dare.m
+++ b/scripts/control/dare.m
@@ -12,44 +12,44 @@
 ### MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ### General Public License for more details.
 ###
 ### You should have received a copy of the GNU General Public License
 ### along with Octave; see the file COPYING.  If not, write to the Free
 ### Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ### 02111-1307, USA.
 
-function x = dare (a, b, c, r, opt)
+## Usage: x = dare (a, b, c, r {,opt})
+##
+## Solves discrete-time algebraic riccati equation
+##
+##   a' x a - x + a' x b (r + b' x b)^{-1} b' x a + c = 0
+##
+## for
+##
+##   a: nxn
+##   b: nxm
+##   c: nxn, symmetric positive semidefinite 
+##   r: mxm, invertible
+##
+## If c is not square, then the function attempts to use c'*c instead.
+##
+## Solution method: Laub's Schur method (IEEE Trans Auto Contr, 1979) applied
+## to the appropriate symplectic matrix.
+##
+## See also: Ran and Rodman, "Stable Hermitian Solutions of Discrete
+## Algebraic Riccati Equations," Mathematics of Control, Signals and
+## Systems, Vol 5, no 2 (1992)  pp 165-194.
+##
+## opt is an option passed to the eigenvalue balancing routine default
+## is "B". 
+##
+## See also: balance, are
 
-  ## Usage: x = dare (a, b, c, r {,opt})
-  ##
-  ## Solves discrete-time algebraic riccati equation
-  ##
-  ##   a' x a - x + a' x b (r + b' x b)^{-1} b' x a + c = 0
-  ##
-  ## for
-  ##
-  ##   a: nxn
-  ##   b: nxm
-  ##   c: nxn, symmetric positive semidefinite 
-  ##   r: mxm, invertible
-  ##
-  ## If c is not square, then the function attempts to use c'*c instead.
-  ##
-  ## Solution method: Laub's Schur method (IEEE Trans Auto Contr, 1979) applied
-  ## to the appropriate symplectic matrix.
-  ##
-  ## See also: Ran and Rodman, "Stable Hermitian Solutions of Discrete
-  ## Algebraic Riccati Equations," Mathematics of Control, Signals and
-  ## Systems, Vol 5, no 2 (1992)  pp 165-194.
-  ##
-  ## opt is an option passed to the eigenvalue balancing routine default
-  ## is "B". 
-  ##
-  ## See also: balance, are
+function x = dare (a, b, c, r, opt)
 
   ## Written by A. S. Hodel (scotte@eng.auburn.edu) August 1993.
 
   if (nargin == 4 || nargin == 5)
     if (nargin == 5)
       if (opt != "N" || opt != "P" || opt != "S" || opt != "B")
 	warning ("dare: opt has an invalid value -- setting to B");
 	opt = "B";
diff --git a/scripts/control/dgram.m b/scripts/control/dgram.m
--- a/scripts/control/dgram.m
+++ b/scripts/control/dgram.m
@@ -12,24 +12,24 @@
 ### MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ### General Public License for more details.
 ###
 ### You should have received a copy of the GNU General Public License
 ### along with Octave; see the file COPYING.  If not, write to the Free
 ### Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ### 02111-1307, USA.
 
-function gramian = dgram (A, B)
+##  Usage: gramian = dgram (A, B)
+##
+##  Returns the discrete controllability and observability gramian.
+##
+##  dgram (A, B)   returns the discrete controllability gramian.
+##  dgram (A', C') returns the observability gramian.
 
-  ##  Usage: gramian = dgram (A, B)
-  ##
-  ##  Returns the discrete controllability and observability gramian.
-  ##
-  ##  dgram (A, B)   returns the discrete controllability gramian.
-  ##  dgram (A', C') returns the observability gramian.
+function gramian = dgram (A, B)
 
   ##  Written by R. Bruce Tenison (btenison@eng.auburn.edu)
   ##  October 1993
 
   [U, Sig, V] = svd (B);
 
   gramian = U * dlyap (U'*A*U, Sig*Sig') * U';
 
diff --git a/scripts/control/dlqe.m b/scripts/control/dlqe.m
--- a/scripts/control/dlqe.m
+++ b/scripts/control/dlqe.m
@@ -12,40 +12,40 @@
 ### MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ### General Public License for more details.
 ###
 ### You should have received a copy of the GNU General Public License
 ### along with Octave; see the file COPYING.  If not, write to the Free
 ### Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ### 02111-1307, USA.
 
-function [l, m, p, e] = dlqe (a, g, c, sigw, sigv, zz)
+## Usage: [l, m, p, e] = dlqe (A, G, C, SigW, SigV {,Z})
+##
+## Linear quadratic estimator (Kalman filter) design for the 
+## discrete time system
+##
+##  x[k+1] = A x[k] + B u[k] + G w[k]
+##    y[k] = C x[k] + D u[k] + w[k]
+##
+## where w, v are zero-mean gaussian noise processes with respective
+## intensities SigW = cov (w, w) and SigV = cov (v, v).
+##
+## Z (if specified) is cov(w,v); otherwise cov(w,v) = 0.
+##
+## Observer structure is 
+##     z[k+1] = A z[k] + B u[k] + k(y[k] - C z[k] - D u[k]).
+##
+## Returns:
+##
+##   l = observer gain, (A - A L C) is stable
+##   m = Ricatti equation solution
+##   p = the estimate error covariance after the measurement update
+##   e = closed loop poles of (A - A L C)
 
-  ## Usage: [l, m, p, e] = dlqe (A, G, C, SigW, SigV {,Z})
-  ##
-  ## Linear quadratic estimator (Kalman filter) design for the 
-  ## discrete time system
-  ##
-  ##  x[k+1] = A x[k] + B u[k] + G w[k]
-  ##    y[k] = C x[k] + D u[k] + w[k]
-  ##
-  ## where w, v are zero-mean gaussian noise processes with respective
-  ## intensities SigW = cov (w, w) and SigV = cov (v, v).
-  ##
-  ## Z (if specified) is cov(w,v); otherwise cov(w,v) = 0.
-  ##
-  ## Observer structure is 
-  ##     z[k+1] = A z[k] + B u[k] + k(y[k] - C z[k] - D u[k]).
-  ##
-  ## Returns:
-  ##
-  ##   l = observer gain, (A - A L C) is stable
-  ##   m = Ricatti equation solution
-  ##   p = the estimate error covariance after the measurement update
-  ##   e = closed loop poles of (A - A L C)
+function [l, m, p, e] = dlqe (a, g, c, sigw, sigv, zz)
 
   ## Written by A. S. Hodel (scotte@eng.auburn.edu) August, 1993.
   ## Modified for discrete time by R. Bruce Tenison (btenison@eng.auburn.edu)
   ## October, 1993
 
   if (nargin != 5 && nargin != 6)
     error ("dlqe: invalid number of arguments");
   endif
diff --git a/scripts/control/dlqr.m b/scripts/control/dlqr.m
--- a/scripts/control/dlqr.m
+++ b/scripts/control/dlqr.m
@@ -12,37 +12,37 @@
 ### MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ### General Public License for more details.
 ###
 ### You should have received a copy of the GNU General Public License
 ### along with Octave; see the file COPYING.  If not, write to the Free
 ### Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ### 02111-1307, USA.
 
-function [k, p, e] = dlqr (a, b, q, r, zz)
+## Usage: [k, p, e] = dlqr (A, B, Q, R {,Z})
+##
+## Linear quadratic regulator design for the discrete time system
+##
+##   x[k+1] = A x[k] + B u[k]
+##
+## to minimize the cost functional
+##
+##  J = Sum { x' Q x + u' R u } 			Z omitted
+##
+## or
+##
+##  J = Sum { x' Q x + u' R u +2 x' Z u}		Z included
+##
+## Returns:
+##
+##   k = state feedback gain, (A - B K) is stable
+##   p = solution of algebraic Riccati equation
+##   e = closed loop poles of (A - B K)
 
-  ## Usage: [k, p, e] = dlqr (A, B, Q, R {,Z})
-  ##
-  ## Linear quadratic regulator design for the discrete time system
-  ##
-  ##   x[k+1] = A x[k] + B u[k]
-  ##
-  ## to minimize the cost functional
-  ##
-  ##  J = Sum { x' Q x + u' R u } 			Z omitted
-  ##
-  ## or
-  ##
-  ##  J = Sum { x' Q x + u' R u +2 x' Z u}		Z included
-  ##
-  ## Returns:
-  ##
-  ##   k = state feedback gain, (A - B K) is stable
-  ##   p = solution of algebraic Riccati equation
-  ##   e = closed loop poles of (A - B K)
+function [k, p, e] = dlqr (a, b, q, r, zz)
 
   ## Written by A. S. Hodel (scotte@eng.auburn.edu) August 1993.
   ## Converted to discrete time by R. B. Tenison
   ## (btenison@eng.auburn.edu) October 1993
 
   if (nargin != 4 && nargin != 5)
     error ("dlqr: invalid number of arguments");
   endif
diff --git a/scripts/control/dlyap.m b/scripts/control/dlyap.m
--- a/scripts/control/dlyap.m
+++ b/scripts/control/dlyap.m
@@ -12,32 +12,32 @@
 ### MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ### General Public License for more details.
 ###
 ### You should have received a copy of the GNU General Public License
 ### along with Octave; see the file COPYING.  If not, write to the Free
 ### Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ### 02111-1307, USA.
 
-function x = dlyap (a, b)
+## Usage: x = dlyap (a, b)
+##
+## Solve a x a' - x + b = 0 (discrete Lyapunov equation) for square
+## matrices a and b.  If b is not square, then the function attempts 
+## to solve either
+##
+##  a x a' - x + b b' = 0
+##
+## or
+##
+##  a' x a - x + b' b = 0
+##
+## whichever is appropriate.  Uses Schur decomposition as in Kitagawa
+## (1977).
 
-  ## Usage: x = dlyap (a, b)
-  ##
-  ## Solve a x a' - x + b = 0 (discrete Lyapunov equation) for square
-  ## matrices a and b.  If b is not square, then the function attempts 
-  ## to solve either
-  ##
-  ##  a x a' - x + b b' = 0
-  ##
-  ## or
-  ##
-  ##  a' x a - x + b' b = 0
-  ##
-  ## whichever is appropriate.  Uses Schur decomposition as in Kitagawa
-  ## (1977).
+function x = dlyap (a, b)
 
   ## Written by A. S. Hodel (scotte@eng.auburn.edu) August 1993.
 
   if ((n = is_square (a)) == 0)
     warning ("dlyap: a must be square");
   endif
 
   if ((m = is_square (b)) == 0)
diff --git a/scripts/control/is_controllable.m b/scripts/control/is_controllable.m
--- a/scripts/control/is_controllable.m
+++ b/scripts/control/is_controllable.m
@@ -12,35 +12,35 @@
 ### MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ### General Public License for more details.
 ###
 ### You should have received a copy of the GNU General Public License
 ### along with Octave; see the file COPYING.  If not, write to the Free
 ### Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ### 02111-1307, USA.
 
-function retval = is_controllable (a, b, tol)
+## Usage: is_controllable (a, b {,tol})
+##
+## Returns 1 if the pair (a, b) is controllable, or 0 if not.
+##
+## See also: size, rows, columns, length, is_matrix, is_scalar, is_vector
+##
+## This should really use the method below, but I'm being lazy for now:
+##
+## Controllability is determined by applying Arnoldi iteration with
+## complete re-orthogonalization to obtain an orthogonal basis of the
+## Krylov subspace.
+##
+## (FIX ME... The Krylov subspace approach is not done yet!)
+##                      n-1
+##   span ([b,a*b,...,a^   b]).
+##
+## tol is a roundoff paramter, set to 2*eps if omitted.
 
-  ## Usage: is_controllable (a, b {,tol})
-  ##
-  ## Returns 1 if the pair (a, b) is controllable, or 0 if not.
-  ##
-  ## See also: size, rows, columns, length, is_matrix, is_scalar, is_vector
-  ##
-  ## This should really use the method below, but I'm being lazy for now:
-  ##
-  ## Controllability is determined by applying Arnoldi iteration with
-  ## complete re-orthogonalization to obtain an orthogonal basis of the
-  ## Krylov subspace.
-  ##
-  ## (FIX ME... The Krylov subspace approach is not done yet!)
-  ##                      n-1
-  ##   span ([b,a*b,...,a^   b]).
-  ##
-  ## tol is a roundoff paramter, set to 2*eps if omitted.
+function retval = is_controllable (a, b, tol)
 
   ## Written by A. S. Hodel (scotte@eng.auburn.edu) August, 1993.
 
   if (nargin == 2 || nargin == 3)
 
     n = is_square (a);
     [nr, nc] = size (b);
 
diff --git a/scripts/control/is_observable.m b/scripts/control/is_observable.m
--- a/scripts/control/is_observable.m
+++ b/scripts/control/is_observable.m
@@ -12,23 +12,23 @@
 ### MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ### General Public License for more details.
 ###
 ### You should have received a copy of the GNU General Public License
 ### along with Octave; see the file COPYING.  If not, write to the Free
 ### Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ### 02111-1307, USA.
 
-function retval = is_observable (a,c,tol)
+## usage: is_observable (a, c {,tol})
+##
+## Returns 1 if the pair (a, c) is observable, or 0 if not.
+##
+## See also: size, rows, columns, length, is_matrix, is_scalar, is_vector.
 
-  ## usage: is_observable (a, c {,tol})
-  ##
-  ## Returns 1 if the pair (a, c) is observable, or 0 if not.
-  ##
-  ## See also: size, rows, columns, length, is_matrix, is_scalar, is_vector.
+function retval = is_observable (a,c,tol)
 
   ## Written by A. S. Hodel (scotte@eng.auburn.edu) August 1993.
 
   if (nargin == 2)
     retval = is_controllable (a', c');
   elseif (nargin == 3)
     retval = is_controllable (a', c', tol);
   else
diff --git a/scripts/control/lqe.m b/scripts/control/lqe.m
--- a/scripts/control/lqe.m
+++ b/scripts/control/lqe.m
@@ -12,38 +12,38 @@
 ### MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ### General Public License for more details.
 ###
 ### You should have received a copy of the GNU General Public License
 ### along with Octave; see the file COPYING.  If not, write to the Free
 ### Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ### 02111-1307, USA.
 
-function [k, p, e] = lqe (a, g, c, sigw, sigv, zz)
+## Usage: [k, p, e] = lqe (A, G, C, SigW, SigV {,Z})
+##
+## Linear quadratic estimator (Kalman filter) design for the 
+## continuous time system
+##
+##   dx/dt = A x + B u + G w
+##       y = C x + D u + v
+##
+## where w, v are zero-mean gaussian noise processes with respective
+## intensities SigW = cov (w, w) and SigV = cov (v, v).
+##
+## Z (if specified) is cov(w,v); otherwise cov(w,v) = 0.
+##
+## Observer structure is dz/dt = A z + B u + k( y - C z - D u).
+##
+## Returns:
+##
+##   k = observer gain, (A - K C) is stable
+##   p = solution of algebraic Riccati equation
+##   e = closed loop poles of (A - K C)
 
-  ## Usage: [k, p, e] = lqe (A, G, C, SigW, SigV {,Z})
-  ##
-  ## Linear quadratic estimator (Kalman filter) design for the 
-  ## continuous time system
-  ##
-  ##   dx/dt = A x + B u + G w
-  ##       y = C x + D u + v
-  ##
-  ## where w, v are zero-mean gaussian noise processes with respective
-  ## intensities SigW = cov (w, w) and SigV = cov (v, v).
-  ##
-  ## Z (if specified) is cov(w,v); otherwise cov(w,v) = 0.
-  ##
-  ## Observer structure is dz/dt = A z + B u + k( y - C z - D u).
-  ##
-  ## Returns:
-  ##
-  ##   k = observer gain, (A - K C) is stable
-  ##   p = solution of algebraic Riccati equation
-  ##   e = closed loop poles of (A - K C)
+function [k, p, e] = lqe (a, g, c, sigw, sigv, zz)
 
   ## Written by A. S. Hodel (scotte@eng.auburn.edu) August, 1993.
 
   if (nargin != 5 && nargin != 6)
     error ("lqe: invalid number of arguments");
   endif
 
   ## The problem is dual to the regulator design, so transform to lqr
diff --git a/scripts/control/lqr.m b/scripts/control/lqr.m
--- a/scripts/control/lqr.m
+++ b/scripts/control/lqr.m
@@ -12,37 +12,37 @@
 ### MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ### General Public License for more details.
 ###
 ### You should have received a copy of the GNU General Public License
 ### along with Octave; see the file COPYING.  If not, write to the Free
 ### Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ### 02111-1307, USA.
 
-function [k, p, e] = lqr (a, b, q, r, zz)
+## Usage: [k, p, e] = lqr (A, B, Q, R {,Z})
+##
+## Linear quadratic regulator design for the continuous time system
+##
+##   dx/dt = A x + B u
+##
+## to minimize the cost functional
+##
+##  J = int_0^\infty{ x' Q x + u' R u } 			Z omitted
+##
+## or
+##
+##  J = int_0^\infty{ x' Q x + u' R u +2 x' Z u}		Z included
+##
+## Returns:
+##
+##   k = state feedback gain, (A - B K) is stable
+##   p = solution of algebraic Riccati equation
+##   e = closed loop poles of (A - B K)
 
-  ## Usage: [k, p, e] = lqr (A, B, Q, R {,Z})
-  ##
-  ## Linear quadratic regulator design for the continuous time system
-  ##
-  ##   dx/dt = A x + B u
-  ##
-  ## to minimize the cost functional
-  ##
-  ##  J = int_0^\infty{ x' Q x + u' R u } 			Z omitted
-  ##
-  ## or
-  ##
-  ##  J = int_0^\infty{ x' Q x + u' R u +2 x' Z u}		Z included
-  ##
-  ## Returns:
-  ##
-  ##   k = state feedback gain, (A - B K) is stable
-  ##   p = solution of algebraic Riccati equation
-  ##   e = closed loop poles of (A - B K)
+function [k, p, e] = lqr (a, b, q, r, zz)
 
   ## Written by A. S. Hodel (scotte@eng.auburn.edu) August 1993.
 
   if (nargin != 4 && nargin != 5)
     error ("lqr: invalid number of arguments");
   endif
 
   ## Check a.
diff --git a/scripts/control/lyap.m b/scripts/control/lyap.m
--- a/scripts/control/lyap.m
+++ b/scripts/control/lyap.m
@@ -12,41 +12,41 @@
 ### MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ### General Public License for more details.
 ###
 ### You should have received a copy of the GNU General Public License
 ### along with Octave; see the file COPYING.  If not, write to the Free
 ### Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ### 02111-1307, USA.
 
-function x = lyap (a, b, c)
+## Usage: x = lyap (a, b {,c})
+##
+## If (a, b, c) are specified, then lyap returns the solution of the
+## Sylvester equation
+##
+##   a x + x b + c = 0
+##
+## If only (a, b) are specified, then lyap returns the solution of the 
+## Lyapunov equation
+##
+##   a' x + x a + b = 0
+##
+## If b is not square, then lyap returns the solution of either
+##
+##   a' x + x a + b' b = 0 	
+##
+## or
+##
+##   a x + x a' + b b' = 0
+##
+## whichever is appropriate.
+##
+## Solves by using the Bartels-Stewart algorithm (1972).
 
-  ## Usage: x = lyap (a, b {,c})
-  ##
-  ## If (a, b, c) are specified, then lyap returns the solution of the
-  ## Sylvester equation
-  ##
-  ##   a x + x b + c = 0
-  ##
-  ## If only (a, b) are specified, then lyap returns the solution of the 
-  ## Lyapunov equation
-  ##
-  ##   a' x + x a + b = 0
-  ##
-  ## If b is not square, then lyap returns the solution of either
-  ##
-  ##   a' x + x a + b' b = 0 	
-  ##
-  ## or
-  ##
-  ##   a x + x a' + b b' = 0
-  ##
-  ## whichever is appropriate.
-  ##
-  ## Solves by using the Bartels-Stewart algorithm (1972).
+function x = lyap (a, b, c)
 
   ## Written by A. S. Hodel (scotte@eng.auburn.edu) August 1993.
   
 
   if (nargin != 3 && nargin != 2)
     usage ("lyap (a, b {,c})");
   endif
 
diff --git a/scripts/control/tzero.m b/scripts/control/tzero.m
--- a/scripts/control/tzero.m
+++ b/scripts/control/tzero.m
@@ -12,25 +12,25 @@
 ### MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ### General Public License for more details.
 ###
 ### You should have received a copy of the GNU General Public License
 ### along with Octave; see the file COPYING.  If not, write to the Free
 ### Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ### 02111-1307, USA.
 
-function zr = tzero (a, b, c, d, bal)
+## Usage: zr = tzero (a, b, c, d, bal)
+##
+## Compute the transmission zeros of a, b, c, d.
+##
+## bal = balancing option (see balance); default is "B".
+##
+## Needs to incorporate mvzero algorithm to isolate finite zeros.
 
-  ## Usage: zr = tzero (a, b, c, d, bal)
-  ##
-  ## Compute the transmission zeros of a, b, c, d.
-  ##
-  ## bal = balancing option (see balance); default is "B".
-  ##
-  ## Needs to incorporate mvzero algorithm to isolate finite zeros.
+function zr = tzero (a, b, c, d, bal)
 
   ## Written by A. S. Hodel (scotte@eng.auburn.edu) August 1993.
 
   if (nargin == 4)
     bal = "B";
   elseif (nargin != 5)
     error ("tzero: invalid number of arguments");
   endif
diff --git a/scripts/elfun/acot.m b/scripts/elfun/acot.m
--- a/scripts/elfun/acot.m
+++ b/scripts/elfun/acot.m
@@ -12,19 +12,19 @@
 ### MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ### General Public License for more details.
 ###
 ### You should have received a copy of the GNU General Public License
 ### along with Octave; see the file COPYING.  If not, write to the Free
 ### Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ### 02111-1307, USA.
 
-function w = acot (z)
+## acot (z):  compute the inverse cotangent for each element of z.
 
-  ## acot (z):  compute the inverse cotangent for each element of z.
+function w = acot (z)
 
   if (nargin != 1)
     usage ("acot (z)");
   endif
 
   w = atan (1 ./ z);
 
 endfunction
\ No newline at end of file
diff --git a/scripts/elfun/acoth.m b/scripts/elfun/acoth.m
--- a/scripts/elfun/acoth.m
+++ b/scripts/elfun/acoth.m
@@ -12,19 +12,19 @@
 ### MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ### General Public License for more details.
 ###
 ### You should have received a copy of the GNU General Public License
 ### along with Octave; see the file COPYING.  If not, write to the Free
 ### Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ### 02111-1307, USA.
 
-function w = acoth (z)
+## acoth (z):  compute the inverse hyperbolic cotangent for each element of z. 
 
-  ## acoth (z):  compute the inverse hyperbolic cotangent for each element of z. 
+function w = acoth (z)
 
   if (nargin != 1)
     usage ("acoth (z)");
   endif
 
   w = atanh (1 ./ z);
 
 endfunction
\ No newline at end of file
diff --git a/scripts/elfun/acsc.m b/scripts/elfun/acsc.m
--- a/scripts/elfun/acsc.m
+++ b/scripts/elfun/acsc.m
@@ -12,19 +12,19 @@
 ### MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ### General Public License for more details.
 ###
 ### You should have received a copy of the GNU General Public License
 ### along with Octave; see the file COPYING.  If not, write to the Free
 ### Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ### 02111-1307, USA.
 
+## acsc (z):  compute the inverse cosecant for each element of z.
+
 function w = acsc (z)
   
-  ## acsc (z):  compute the inverse cosecant for each element of z.
-  
   if (nargin != 1)
     usage ("acsc (z)");
   endif
 
   w = asin (1 ./ z);
   
 endfunction
\ No newline at end of file
diff --git a/scripts/elfun/acsch.m b/scripts/elfun/acsch.m
--- a/scripts/elfun/acsch.m
+++ b/scripts/elfun/acsch.m
@@ -12,19 +12,19 @@
 ### MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ### General Public License for more details.
 ###
 ### You should have received a copy of the GNU General Public License
 ### along with Octave; see the file COPYING.  If not, write to the Free
 ### Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ### 02111-1307, USA.
 
+## acsch (z):  compute the inverse hyperbolic cosecant for each element of z.
+
 function w = acsch (z)
   
-  ## acsch (z):  compute the inverse hyperbolic cosecant for each element of z.
-  
   if (nargin != 1)
     usage ("acsch (z)");
   endif
 
   w = asinh (1 ./ z);
   
 endfunction
\ No newline at end of file
diff --git a/scripts/elfun/asec.m b/scripts/elfun/asec.m
--- a/scripts/elfun/asec.m
+++ b/scripts/elfun/asec.m
@@ -12,19 +12,19 @@
 ### MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ### General Public License for more details.
 ###
 ### You should have received a copy of the GNU General Public License
 ### along with Octave; see the file COPYING.  If not, write to the Free
 ### Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ### 02111-1307, USA.
 
+## asec (z):  compute the inverse secant for each element of z.
+
 function w = asec (z)
   
-  ## asec (z):  compute the inverse secant for each element of z.
-  
   if (nargin != 1)
     usage ("asec (z)");
   endif
 
   w = acos (1 ./ z);
   
 endfunction
\ No newline at end of file
diff --git a/scripts/elfun/asech.m b/scripts/elfun/asech.m
--- a/scripts/elfun/asech.m
+++ b/scripts/elfun/asech.m
@@ -12,19 +12,19 @@
 ### MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ### General Public License for more details.
 ###
 ### You should have received a copy of the GNU General Public License
 ### along with Octave; see the file COPYING.  If not, write to the Free
 ### Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ### 02111-1307, USA.
 
+## asech (z):  compute the inverse hyperbolic secant for each element of z.
+
 function w = asech (z)
   
-  ## asech (z):  compute the inverse hyperbolic secant for each element of z.
-  
   if (nargin != 1)
     usage ("acosh (z)");
   endif
 
   w = acosh (1 ./ z);
   
 endfunction
diff --git a/scripts/elfun/cot.m b/scripts/elfun/cot.m
--- a/scripts/elfun/cot.m
+++ b/scripts/elfun/cot.m
@@ -12,19 +12,19 @@
 ### MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ### General Public License for more details.
 ###
 ### You should have received a copy of the GNU General Public License
 ### along with Octave; see the file COPYING.  If not, write to the Free
 ### Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ### 02111-1307, USA.
 
+## cot (z):  compute the cotangent for each element of z.
+
 function w = cot (z)
   
-  ## cot (z):  compute the cotangent for each element of z.
-  
   if (nargin != 1)
     usage ("cot (z)");
   endif
 
   w = 1 ./ tan(z);
   
 endfunction
\ No newline at end of file
diff --git a/scripts/elfun/coth.m b/scripts/elfun/coth.m
--- a/scripts/elfun/coth.m
+++ b/scripts/elfun/coth.m
@@ -12,19 +12,19 @@
 ### MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ### General Public License for more details.
 ###
 ### You should have received a copy of the GNU General Public License
 ### along with Octave; see the file COPYING.  If not, write to the Free
 ### Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ### 02111-1307, USA.
 
+## coth (z):  compute the hyperbolic cotangent for each element of z.
+
 function w = coth (z)
   
-  ## coth (z):  compute the hyperbolic cotangent for each element of z.
-  
   if (nargin != 1)
     usage ("coth (z)");
   endif
 
   w = 1 ./ tanh(z);
   
 endfunction
\ No newline at end of file
diff --git a/scripts/elfun/csc.m b/scripts/elfun/csc.m
--- a/scripts/elfun/csc.m
+++ b/scripts/elfun/csc.m
@@ -12,19 +12,19 @@
 ### MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ### General Public License for more details.
 ###
 ### You should have received a copy of the GNU General Public License
 ### along with Octave; see the file COPYING.  If not, write to the Free
 ### Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ### 02111-1307, USA.
 
+## csc (z):  compute the cosecant for each element of z.
+
 function w = csc (z)
   
-  ## csc (z):  compute the cosecant for each element of z.
-  
   if (nargin != 1)
     usage ("csc (z)");
   endif
 
   w = 1 ./ sin(z);
   
 endfunction
diff --git a/scripts/elfun/csch.m b/scripts/elfun/csch.m
--- a/scripts/elfun/csch.m
+++ b/scripts/elfun/csch.m
@@ -12,19 +12,19 @@
 ### MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ### General Public License for more details.
 ###
 ### You should have received a copy of the GNU General Public License
 ### along with Octave; see the file COPYING.  If not, write to the Free
 ### Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ### 02111-1307, USA.
 
+## csch (z):  compute the hyperbolic cosecant for each element of z.
+
 function w = csch (z)
   
-  ## csch (z):  compute the hyperbolic cosecant for each element of z.
-  
   if (nargin != 1)
     usage ("csch (z)");
   endif
 
   w = 1 ./ sinh(z);
   
 endfunction
diff --git a/scripts/elfun/gcd.m b/scripts/elfun/gcd.m
--- a/scripts/elfun/gcd.m
+++ b/scripts/elfun/gcd.m
@@ -12,27 +12,27 @@
 ### MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ### General Public License for more details.
 ###
 ### You should have received a copy of the GNU General Public License
 ### along with Octave; see the file COPYING.  If not, write to the Free
 ### Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ### 02111-1307, USA.
 
+## usage: gcd (a, ...)
+##  
+## [g [, v]] = gcd (a) returns the greatest common divisor g of the
+## entries of the integer vector a, and an integer vector v such that
+## g = v(1) * a(k) + ... + v(k) * a(k).
+##
+## [g [, v]] = gcd (a1, ..., ak) is the same with a = [a1, ..., ak].
+
 function [g, v] = gcd (a, ...)
 
-  ## usage: gcd (a, ...)
-  ##  
-  ## [g [, v]] = gcd (a) returns the greatest common divisor g of the
-  ## entries of the integer vector a, and an integer vector v such that
-  ## g = v(1) * a(k) + ... + v(k) * a(k).
-  ##
-  ## [g [, v]] = gcd (a1, ..., ak) is the same with a = [a1, ..., ak].
-  
-  ## Written by KH (Kurt.Hornik@ci.tuwien.ac.at) on Sep 16, 1994.
+## Written by KH (Kurt.Hornik@ci.tuwien.ac.at) on Sep 16, 1994.
 
   if (nargin > 1)
     va_start;
     for k = 2:nargin;
       a = [a, (va_arg ())];
     endfor
   endif
   
diff --git a/scripts/elfun/lcm.m b/scripts/elfun/lcm.m
--- a/scripts/elfun/lcm.m
+++ b/scripts/elfun/lcm.m
@@ -12,25 +12,25 @@
 ### MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ### General Public License for more details.
 ###
 ### You should have received a copy of the GNU General Public License
 ### along with Octave; see the file COPYING.  If not, write to the Free
 ### Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ### 02111-1307, USA.
 
+## usage: lcm (a, ...)
+##
+## lcm (a) returns the least common multiple of the entries of the
+## integer vector a.
+## lcm (a1, ..., ak) is the same as lcm([a1, ..., ak]).
+
 function l = lcm (a, ...)
 
-  ## usage: lcm (a, ...)
-  ##
-  ## lcm (a) returns the least common multiple of the entries of the
-  ## integer vector a.
-  ## lcm (a1, ..., ak) is the same as lcm([a1, ..., ak]).
-  
-  ## Written by KH (Kurt.Hornik@ci.tuwien.ac.at) on Sep 16, 1994.
+## Written by KH (Kurt.Hornik@ci.tuwien.ac.at) on Sep 16, 1994.
 
   if (nargin > 1)
     va_start;
     for k = 2:nargin;
       a = [a, (va_arg ())];
     endfor
   endif
   
diff --git a/scripts/elfun/log2.m b/scripts/elfun/log2.m
--- a/scripts/elfun/log2.m
+++ b/scripts/elfun/log2.m
@@ -12,19 +12,19 @@
 ### MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ### General Public License for more details.
 ###
 ### You should have received a copy of the GNU General Public License
 ### along with Octave; see the file COPYING.  If not, write to the Free
 ### Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ### 02111-1307, USA.
 
+## log2 (z):  compute the logarithm base 2 for each element of z.
+
 function w = log2 (z)
   
-  ## log2 (z):  compute the logarithm base 2 for each element of z.
-  
-  if (nargin != 1)
+if (nargin != 1)
     usage ("log2 (z)");
   endif
 
   w = log(z) / log(2);
   
 endfunction
\ No newline at end of file
diff --git a/scripts/elfun/sec.m b/scripts/elfun/sec.m
--- a/scripts/elfun/sec.m
+++ b/scripts/elfun/sec.m
@@ -12,19 +12,19 @@
 ### MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ### General Public License for more details.
 ###
 ### You should have received a copy of the GNU General Public License
 ### along with Octave; see the file COPYING.  If not, write to the Free
 ### Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ### 02111-1307, USA.
 
+## sec (z): compute the secant for each element of z.
+
 function w = sec (z)
   
-  ## sec (z): compute the secant for each element of z.
-
   if (nargin != 1)
     usage ("sec (z)");
   endif
   
   w = 1 ./ cos(z);
   
 endfunction
diff --git a/scripts/elfun/sech.m b/scripts/elfun/sech.m
--- a/scripts/elfun/sech.m
+++ b/scripts/elfun/sech.m
@@ -12,19 +12,19 @@
 ### MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ### General Public License for more details.
 ###
 ### You should have received a copy of the GNU General Public License
 ### along with Octave; see the file COPYING.  If not, write to the Free
 ### Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ### 02111-1307, USA.
 
+## sech (z):  compute the hyperbolic secant for each element of z.
+
 function w = sech (z)
   
-  ## sech (z):  compute the hyperbolic secant for each element of z.
-  
-  if (nargin != 1)
+if (nargin != 1)
     usage ("sech (z)");
   endif
 
   w = 1 ./ cosh(z);
   
 endfunction
diff --git a/scripts/general/columns.m b/scripts/general/columns.m
--- a/scripts/general/columns.m
+++ b/scripts/general/columns.m
@@ -12,23 +12,23 @@
 ### MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ### General Public License for more details.
 ###
 ### You should have received a copy of the GNU General Public License
 ### along with Octave; see the file COPYING.  If not, write to the Free
 ### Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ### 02111-1307, USA.
 
-function nc = columns (x)
+## usage: columns (x)
+##
+## Return the the number of columns in x.
+##
+## See also: size, rows, length, is_scalar, is_vector, is_matrix
 
-  ## usage: columns (x)
-  ##
-  ## Return the the number of columns in x.
-  ##
-  ## See also: size, rows, length, is_scalar, is_vector, is_matrix
+function nc = columns (x)
 
   if (nargin != 1)
     usage ("columns (x)");
   endif
 
   [nr, nc] = size (x);
 
 endfunction
diff --git a/scripts/general/fliplr.m b/scripts/general/fliplr.m
--- a/scripts/general/fliplr.m
+++ b/scripts/general/fliplr.m
@@ -12,23 +12,23 @@
 ### MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ### General Public License for more details.
 ###
 ### You should have received a copy of the GNU General Public License
 ### along with Octave; see the file COPYING.  If not, write to the Free
 ### Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ### 02111-1307, USA.
 
-function y = fliplr (x)
+## usage: fliplr (x)
+##
+## Return x with the columns swapped.
+##
+## See also: flipu, rot90
 
-  ## usage: fliplr (x)
-  ##
-  ## Return x with the columns swapped.
-  ##
-  ## See also: flipu, rot90
+function y = fliplr (x)
 
   if (nargin != 1)
     usage ("fliplr (x)");
   endif
 
   y = x;
   nc = columns (x);
   y = x (:, nc:-1:1);
diff --git a/scripts/general/flipud.m b/scripts/general/flipud.m
--- a/scripts/general/flipud.m
+++ b/scripts/general/flipud.m
@@ -12,23 +12,23 @@
 ### MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ### General Public License for more details.
 ###
 ### You should have received a copy of the GNU General Public License
 ### along with Octave; see the file COPYING.  If not, write to the Free
 ### Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ### 02111-1307, USA.
 
-function y = flipud (x)
+## usage: flipud (x)
+##
+## Return x with the rows swapped.
+##
+## See also: fliplr, rot90
 
-  ## usage: flipud (x)
-  ##
-  ## Return x with the rows swapped.
-  ##
-  ## See also: fliplr, rot90
+function y = flipud (x)
 
   if (nargin != 1)
     usage ("flipud (x)");
   endif
 
   y = x;
   nr = rows (x);
   y = x (nr:-1:1, :);
diff --git a/scripts/general/int2str.m b/scripts/general/int2str.m
--- a/scripts/general/int2str.m
+++ b/scripts/general/int2str.m
@@ -12,23 +12,23 @@
 ### MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ### General Public License for more details.
 ###
 ### You should have received a copy of the GNU General Public License
 ### along with Octave; see the file COPYING.  If not, write to the Free
 ### Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ### 02111-1307, USA.
 
-function retval = int2str (x)
+## usage: int2str (x)
+##
+## Round x to the nearest integer and format as a string.
+##
+## See also: sprintf, num2str 
 
-  ## usage: int2str (x)
-  ##
-  ## Round x to the nearest integer and format as a string.
-  ##
-  ## See also: sprintf, num2str 
+function retval = int2str (x)
 
   ## XXX FIXME XXX -- this will fail for very large values.
 
   if (nargin == 1)
     if (rows (x) == 1 && columns (x) == 1)
       retval = sprintf ("%d", round (x));
     else
       error ("int2str: expecting scalar argument");
diff --git a/scripts/general/is_matrix.m b/scripts/general/is_matrix.m
--- a/scripts/general/is_matrix.m
+++ b/scripts/general/is_matrix.m
@@ -12,24 +12,24 @@
 ### MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ### General Public License for more details.
 ###
 ### You should have received a copy of the GNU General Public License
 ### along with Octave; see the file COPYING.  If not, write to the Free
 ### Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ### 02111-1307, USA.
 
-function retval = is_matrix (x)
+## usage: is_matrix (x)
+##
+## Return 1 if the number of rows and columns of x are both greater
+## than 1.
+##
+## See also: size, rows, columns, length, is_scalar, is_vector
 
-  ## usage: is_matrix (x)
-  ##
-  ## Return 1 if the number of rows and columns of x are both greater
-  ## than 1.
-  ##
-  ## See also: size, rows, columns, length, is_scalar, is_vector
+function retval = is_matrix (x)
 
   if (nargin == 1)
     [nr, nc] = size (x);
     retval = (nr > 1 && nc > 1);
   else
     usage ("is_matrix (x)");
   endif
 
diff --git a/scripts/general/is_scalar.m b/scripts/general/is_scalar.m
--- a/scripts/general/is_scalar.m
+++ b/scripts/general/is_scalar.m
@@ -12,23 +12,23 @@
 ### MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ### General Public License for more details.
 ###
 ### You should have received a copy of the GNU General Public License
 ### along with Octave; see the file COPYING.  If not, write to the Free
 ### Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ### 02111-1307, USA.
 
-function retval = is_scalar (x)
+## usage: is_scalar (x)
+##
+## Return 1 if the number of rows and columns of x are both equal to 1.
+##
+## See also: size, rows, columns, length, is_scalar, is_matrix
 
-  ## usage: is_scalar (x)
-  ##
-  ## Return 1 if the number of rows and columns of x are both equal to 1.
-  ##
-  ## See also: size, rows, columns, length, is_scalar, is_matrix
+function retval = is_scalar (x)
 
   if (nargin == 1)
     [nr, nc] = size (x);
     retval = (nr == 1 && nc == 1);
   else
     usage ("is_scalar (x)");
   endif
 
diff --git a/scripts/general/is_square.m b/scripts/general/is_square.m
--- a/scripts/general/is_square.m
+++ b/scripts/general/is_square.m
@@ -12,24 +12,24 @@
 ### MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ### General Public License for more details.
 ###
 ### You should have received a copy of the GNU General Public License
 ### along with Octave; see the file COPYING.  If not, write to the Free
 ### Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ### 02111-1307, USA.
 
-function retval = is_square (x)
+## usage: is_square (x)
+##
+## If x is square, then return value is the dimension of x.
+## otherwise, returns a value of 0
+##
+## See also: size, rows, columns, length, is_matrix, is_scalar, is_vector
 
-  ## usage: is_square (x)
-  ##
-  ## If x is square, then return value is the dimension of x.
-  ## otherwise, returns a value of 0
-  ##
-  ## See also: size, rows, columns, length, is_matrix, is_scalar, is_vector
+function retval = is_square (x)
 
   ## Written by A. S. Hodel (scotte@eng.auburn.edu) August 1993.
 
   if (nargin == 1)
     [nr, nc] = size (x);
     if (nr == nc) 
       retval = nr;
     else
diff --git a/scripts/general/is_symmetric.m b/scripts/general/is_symmetric.m
--- a/scripts/general/is_symmetric.m
+++ b/scripts/general/is_symmetric.m
@@ -12,24 +12,24 @@
 ### MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ### General Public License for more details.
 ###
 ### You should have received a copy of the GNU General Public License
 ### along with Octave; see the file COPYING.  If not, write to the Free
 ### Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ### 02111-1307, USA.
 
-function retval = is_symmetric (x,tol)
+## Usage: is_symmetric (x {,tol})
+##
+## If x is symmetric, return the dimension of x, otherwise, return 0.
+##
+## See also: size, rows, columns, length, is_matrix, is_scalar, 
+## is_square, is_vector
 
-  ## Usage: is_symmetric (x {,tol})
-  ##
-  ## If x is symmetric, return the dimension of x, otherwise, return 0.
-  ##
-  ## See also: size, rows, columns, length, is_matrix, is_scalar, 
-  ## is_square, is_vector
+function retval = is_symmetric (x,tol)
 
   ## Written by A. S. Hodel (scotte@eng.auburn.edu) August 1993.
 
   if (nargin == 1 || nargin == 2)
     if ((retval = is_square (x)))
       if (nargin == 1)
 	tol = eps;
       endif
diff --git a/scripts/general/is_vector.m b/scripts/general/is_vector.m
--- a/scripts/general/is_vector.m
+++ b/scripts/general/is_vector.m
@@ -12,24 +12,24 @@
 ### MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ### General Public License for more details.
 ###
 ### You should have received a copy of the GNU General Public License
 ### along with Octave; see the file COPYING.  If not, write to the Free
 ### Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ### 02111-1307, USA.
 
-function retval = is_vector (x)
+## usage: is_vector (x)
+##
+## Return 1 if the either the number of rows (columns) of x is 1 and
+## the number of columns (rows) is greater than one.  Otherwise, return 0. 
+##
+## See also: size, rows, columns, length, is_scalar, is_matrix
 
-  ## usage: is_vector (x)
-  ##
-  ## Return 1 if the either the number of rows (columns) of x is 1 and
-  ## the number of columns (rows) is greater than one.  Otherwise, return 0. 
-  ##
-  ## See also: size, rows, columns, length, is_scalar, is_matrix
+function retval = is_vector (x)
 
   if (nargin == 1)
     [nr, nc] = size (x);
     retval = ((nr == 1 && nc > 1) || (nc == 1 && nr > 1));
   else
     usage ("is_vector (x)");
   endif
 
diff --git a/scripts/general/isempty.m b/scripts/general/isempty.m
--- a/scripts/general/isempty.m
+++ b/scripts/general/isempty.m
@@ -12,21 +12,21 @@
 ### MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ### General Public License for more details.
 ###
 ### You should have received a copy of the GNU General Public License
 ### along with Octave; see the file COPYING.  If not, write to the Free
 ### Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ### 02111-1307, USA.
 
-function retval = isempty (var)
+## usage: isempty (x)
+##
+## Return 1 if the argument is an empty matrix.  Otherwise, return 0.
 
-  ## usage: isempty (x)
-  ##
-  ## Return 1 if the argument is an empty matrix.  Otherwise, return 0.
+function retval = isempty (var)
 
   if (nargin != 1)
     usage ("isempty (var)");
   endif
 
   retval = (rows (var) == 0 || columns (var) == 0);
 
 endfunction
diff --git a/scripts/general/length.m b/scripts/general/length.m
--- a/scripts/general/length.m
+++ b/scripts/general/length.m
@@ -12,23 +12,23 @@
 ### MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ### General Public License for more details.
 ###
 ### You should have received a copy of the GNU General Public License
 ### along with Octave; see the file COPYING.  If not, write to the Free
 ### Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ### 02111-1307, USA.
 
-function len = length (x)
+## usage: length (x)
+##
+## Return the number of rows or columns, whichever is greater.
+##
+## See also: size, rows, columns, is_scalar, is_vector, is_matrix
 
-  ## usage: length (x)
-  ##
-  ## Return the number of rows or columns, whichever is greater.
-  ##
-  ## See also: size, rows, columns, is_scalar, is_vector, is_matrix
+function len = length (x)
 
   if (nargin != 1)
     usage ("length (x)");
   endif
 
   len = max (size (x));
 
 endfunction
diff --git a/scripts/general/logspace.m b/scripts/general/logspace.m
--- a/scripts/general/logspace.m
+++ b/scripts/general/logspace.m
@@ -12,35 +12,35 @@
 ### MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ### General Public License for more details.
 ###
 ### You should have received a copy of the GNU General Public License
 ### along with Octave; see the file COPYING.  If not, write to the Free
 ### Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ### 02111-1307, USA.
 
-function retval = logspace (x1, x2, n)
+## usage: logspace (x1, x2, n)
+##
+## Return a vector of n logarithmically equally spaced points between
+## x1 and x2 inclusive.
+##
+## If the final argument is omitted, n = 50 is assumed.
+##
+## All three arguments must be scalars. 
+##
+## Note that if if x2 is pi, the points are between 10^x1 and pi, NOT
+## 10^x1 and 10^pi.
+##
+## Yes, this is pretty stupid, because you could achieve the same
+## result with logspace (x1, log10 (pi)), but Matlab does this, and
+## claims that is useful for signal processing applications.
+##
+## See also: linspace
 
-  ## usage: logspace (x1, x2, n)
-  ##
-  ## Return a vector of n logarithmically equally spaced points between
-  ## x1 and x2 inclusive.
-  ##
-  ## If the final argument is omitted, n = 50 is assumed.
-  ##
-  ## All three arguments must be scalars. 
-  ##
-  ## Note that if if x2 is pi, the points are between 10^x1 and pi, NOT
-  ## 10^x1 and 10^pi.
-  ##
-  ## Yes, this is pretty stupid, because you could achieve the same
-  ## result with logspace (x1, log10 (pi)), but Matlab does this, and
-  ## claims that is useful for signal processing applications.
-  ##
-  ## See also: linspace
+function retval = logspace (x1, x2, n)
 
   if (nargin == 2)
     npoints = 50;
   elseif (nargin == 3)
     if (length (n) == 1)
       npoints = fix (n);
     else
       error ("logspace: arguments must be scalars");
diff --git a/scripts/general/nargchk.m b/scripts/general/nargchk.m
--- a/scripts/general/nargchk.m
+++ b/scripts/general/nargchk.m
@@ -12,23 +12,23 @@
 ### MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ### General Public License for more details.
 ###
 ### You should have received a copy of the GNU General Public License
 ### along with Octave; see the file COPYING.  If not, write to the Free
 ### Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ### 02111-1307, USA.
 
-function retval = nargchk (nargin_min, nargin_max, n)
+## usage: nargchk (nargin_min, nargin_max, n)
+##
+## If N is in the range NARGIN_MIN to NARGIN_MAX, return the empty
+## matrix.  Otherwise, return a message indicating whether N is too
+## large or too small.
 
-  ## usage: nargchk (nargin_min, nargin_max, n)
-  ##
-  ## If N is in the range NARGIN_MIN to NARGIN_MAX, return the empty
-  ## matrix.  Otherwise, return a message indicating whether N is too
-  ## large or too small.
+function retval = nargchk (nargin_min, nargin_max, n)
 
   if (nargin != 3)
     usage ("nargchk (nargin_min, nargin_max, n)");
   endif
 
   if (nargin_min > nargin_max)
     error  ("nargchk: nargin_min > nargin_max");
   endif
diff --git a/scripts/general/num2str.m b/scripts/general/num2str.m
--- a/scripts/general/num2str.m
+++ b/scripts/general/num2str.m
@@ -12,23 +12,23 @@
 ### MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ### General Public License for more details.
 ###
 ### You should have received a copy of the GNU General Public License
 ### along with Octave; see the file COPYING.  If not, write to the Free
 ### Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ### 02111-1307, USA.
 
-function retval = num2str (x)
+## usage: num2str (x)
+##
+## Format x as a string.
+##
+## See also: sprintf, int2str
 
-  ## usage: num2str (x)
-  ##
-  ## Format x as a string.
-  ##
-  ## See also: sprintf, int2str
+function retval = num2str (x)
 
   if (nargin == 1)
     if (rows (x) == 1 && columns (x) == 1)
       retval = sprintf ("%g", x);
     else
       error ("num2str: expecting scalar argument");
     endif
   else
diff --git a/scripts/general/perror.m b/scripts/general/perror.m
--- a/scripts/general/perror.m
+++ b/scripts/general/perror.m
@@ -12,28 +12,28 @@
 ### MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ### General Public License for more details.
 ###
 ### You should have received a copy of the GNU General Public License
 ### along with Octave; see the file COPYING.  If not, write to the Free
 ### Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ### 02111-1307, USA.
 
-function perror (name, err)
+## usage: perror (name, err)
+##
+## Print an error message for error number `err' from function "name".
+##
+## Messages correspond to the following subroutine versions:
+##
+##   npsol : 4.0
+##   qpsol : 3.2
+##
+## See also: strerror
 
-  ## usage: perror (name, err)
-  ##
-  ## Print an error message for error number `err' from function "name".
-  ##
-  ## Messages correspond to the following subroutine versions:
-  ##
-  ##   npsol : 4.0
-  ##   qpsol : 3.2
-  ##
-  ## See also: strerror
+function perror (name, err)
 
   if (nargin != 2)
     usage ("perror (name, err)");
   else
     printf (strerror (name, err));
   endif
 
 endfunction
diff --git a/scripts/general/postpad.m b/scripts/general/postpad.m
--- a/scripts/general/postpad.m
+++ b/scripts/general/postpad.m
@@ -12,25 +12,25 @@
 ### MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ### General Public License for more details.
 ###
 ### You should have received a copy of the GNU General Public License
 ### along with Octave; see the file COPYING.  If not, write to the Free
 ### Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ### 02111-1307, USA.
 
-function y = postpad (x, l, c)
+## postpad (x, l)
+##
+## Appends zeros to the vector x until it is of length l.
+## postpad (x, l, c) appends the constant c instead of zero.
+##
+## If length (x) > l, elements from the end of x are removed
+## until a vector of length l is obtained.
 
-  ## postpad (x, l)
-  ##
-  ## Appends zeros to the vector x until it is of length l.
-  ## postpad (x, l, c) appends the constant c instead of zero.
-  ##
-  ## If length (x) > l, elements from the end of x are removed
-  ## until a vector of length l is obtained.
+function y = postpad (x, l, c)
 
   ## Author:
   ##  Tony Richardson
   ##  amr@mpl.ucsd.edu
   ##  June 1994
 
   if (nargin == 2)
     c = 0;
diff --git a/scripts/general/prepad.m b/scripts/general/prepad.m
--- a/scripts/general/prepad.m
+++ b/scripts/general/prepad.m
@@ -12,25 +12,25 @@
 ### MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ### General Public License for more details.
 ###
 ### You should have received a copy of the GNU General Public License
 ### along with Octave; see the file COPYING.  If not, write to the Free
 ### Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ### 02111-1307, USA.
 
-function y = prepad (x, l, c)
+## prepad (x, l)
+##
+## Prepends zeros to the vector x until it is of length l.
+## prepad(x,l,c) prepends the constant c instead of zero.
+##
+## If length (x) > l, elements from the beginning of x are removed
+## until a vector of length l is obtained.
 
-  ## prepad (x, l)
-  ##
-  ## Prepends zeros to the vector x until it is of length l.
-  ## prepad(x,l,c) prepends the constant c instead of zero.
-  ##
-  ## If length (x) > l, elements from the beginning of x are removed
-  ## until a vector of length l is obtained.
+function y = prepad (x, l, c)
 
   ## Author:
   ##  Tony Richardson
   ##  amr@mpl.ucsd.edu
   ##  June 1994
 
   if (nargin == 2)
     c = 0;
diff --git a/scripts/general/rem.m b/scripts/general/rem.m
--- a/scripts/general/rem.m
+++ b/scripts/general/rem.m
@@ -12,21 +12,21 @@
 ### MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ### General Public License for more details.
 ###
 ### You should have received a copy of the GNU General Public License
 ### along with Octave; see the file COPYING.  If not, write to the Free
 ### Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ### 02111-1307, USA.
 
-function retval = rem (x, y)
+## usage: rem (x, y)
+##
+## Return remainder (x, y).
 
-  ## usage: rem (x, y)
-  ##
-  ## Return remainder (x, y).
+function retval = rem (x, y)
 
   if (nargin != 2)
     usage ("rem (x, y)");
   endif
 
   if (any (size (x) != size (y)) && ! (is_scalar (x) || is_scalar (y)))
     error ("rem: argument sizes must agree");
   endif
diff --git a/scripts/general/reshape.m b/scripts/general/reshape.m
--- a/scripts/general/reshape.m
+++ b/scripts/general/reshape.m
@@ -12,24 +12,24 @@
 ### MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ### General Public License for more details.
 ###
 ### You should have received a copy of the GNU General Public License
 ### along with Octave; see the file COPYING.  If not, write to the Free
 ### Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ### 02111-1307, USA.
 
-function retval = reshape (a, m, n)
+## usage: reshape (a, m, n)
+##
+## Form an m x n matrix from the elements of a (taken in Fortran's
+## column major ordering).
+##
+## See also: `:', do_fortran_indexing
 
-  ## usage: reshape (a, m, n)
-  ##
-  ## Form an m x n matrix from the elements of a (taken in Fortran's
-  ## column major ordering).
-  ##
-  ## See also: `:', do_fortran_indexing
+function retval = reshape (a, m, n)
 
   if (nargin != 3)
     usage ("reshape (a, m, n)");
   else
     [nr, nc] = size (a);
     if (nr * nc == m * n)
       dfi = do_fortran_indexing;
       istno = implicit_str_to_num_ok;
diff --git a/scripts/general/rot90.m b/scripts/general/rot90.m
--- a/scripts/general/rot90.m
+++ b/scripts/general/rot90.m
@@ -12,25 +12,25 @@
 ### MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ### General Public License for more details.
 ###
 ### You should have received a copy of the GNU General Public License
 ### along with Octave; see the file COPYING.  If not, write to the Free
 ### Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ### 02111-1307, USA.
 
-function y = rot90 (x, k)
+## usage: rot90 (x, k)
+##
+## Rotate the matrix x counterclockwise k*90 degrees.
+##
+## If the second argument is omitted, k is taken to be 1.
+##
+## See also: flipud, fliplr
 
-  ## usage: rot90 (x, k)
-  ##
-  ## Rotate the matrix x counterclockwise k*90 degrees.
-  ##
-  ## If the second argument is omitted, k is taken to be 1.
-  ##
-  ## See also: flipud, fliplr
+function y = rot90 (x, k)
 
   if (nargin < 2)
     k = 1;
   endif
 
   if (imag (k) != 0 || fix (k) != k)
     error ("rot90: k must be an integer");
   endif
diff --git a/scripts/general/rows.m b/scripts/general/rows.m
--- a/scripts/general/rows.m
+++ b/scripts/general/rows.m
@@ -12,23 +12,23 @@
 ### MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ### General Public License for more details.
 ###
 ### You should have received a copy of the GNU General Public License
 ### along with Octave; see the file COPYING.  If not, write to the Free
 ### Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ### 02111-1307, USA.
 
-function nr = rows (x)
+## usage: rows (x)
+##
+## Return the the number of rows in x.
+##
+## See also: size, columns, length, is_scalar, is_vector, is_matrix
 
-  ## usage: rows (x)
-  ##
-  ## Return the the number of rows in x.
-  ##
-  ## See also: size, columns, length, is_scalar, is_vector, is_matrix
+function nr = rows (x)
 
   if (nargin != 1)
     usage ("rows (x)");
   endif
 
   [nr, nc] = size (x);
 
 endfunction
diff --git a/scripts/general/strerror.m b/scripts/general/strerror.m
--- a/scripts/general/strerror.m
+++ b/scripts/general/strerror.m
@@ -12,27 +12,27 @@
 ### MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ### General Public License for more details.
 ###
 ### You should have received a copy of the GNU General Public License
 ### along with Octave; see the file COPYING.  If not, write to the Free
 ### Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ### 02111-1307, USA.
 
-function msg = strerror (name, err)
+## usage: msg = strerror (name, err)
+##
+## Return the text of an error message for error number `err' from
+## function "name".
+##
+## Messages correspond to the following subroutine versions:
+##
+##   npsol : 4.0
+##   qpsol : 3.2
 
-  ## usage: msg = strerror (name, err)
-  ##
-  ## Return the text of an error message for error number `err' from
-  ## function "name".
-  ##
-  ## Messages correspond to the following subroutine versions:
-  ##
-  ##   npsol : 4.0
-  ##   qpsol : 3.2
+function msg = strerror (name, err)
 
   if (nargin != 2)
     usage ("strerror (name, err)");
   endif
 
   if (! isstr (name))
     error ("strerror: first argument must be a string");
   endif
diff --git a/scripts/general/tril.m b/scripts/general/tril.m
--- a/scripts/general/tril.m
+++ b/scripts/general/tril.m
@@ -12,24 +12,24 @@
 ### MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ### General Public License for more details.
 ###
 ### You should have received a copy of the GNU General Public License
 ### along with Octave; see the file COPYING.  If not, write to the Free
 ### Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ### 02111-1307, USA.
 
-function retval = tril (x, k)
+## usage: triu (x, k)
+##
+## Return the lower triangular part of x above the k-th diagonal.  If
+## the second argument is omitted, k = 0 is assumed.
+##
+## See also: triu, diag
 
-  ## usage: triu (x, k)
-  ##
-  ## Return the lower triangular part of x above the k-th diagonal.  If
-  ## the second argument is omitted, k = 0 is assumed.
-  ##
-  ## See also: triu, diag
+function retval = tril (x, k)
 
   if (nargin > 0)
     [nr, nc] = size (x);
     retval = zeros (nr, nc);
   endif
 
   if (nargin == 1)
     k = 0;
diff --git a/scripts/general/triu.m b/scripts/general/triu.m
--- a/scripts/general/triu.m
+++ b/scripts/general/triu.m
@@ -12,24 +12,24 @@
 ### MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ### General Public License for more details.
 ###
 ### You should have received a copy of the GNU General Public License
 ### along with Octave; see the file COPYING.  If not, write to the Free
 ### Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ### 02111-1307, USA.
 
-function retval = triu (x, k)
+## usage: triu (x, k)
+##
+## Return the upper triangular part of x above the k-th diagonal.  If
+## the second argument is omitted, k = 0 is assumed.
+##
+## See also: tril, diag
 
-  ## usage: triu (x, k)
-  ##
-  ## Return the upper triangular part of x above the k-th diagonal.  If
-  ## the second argument is omitted, k = 0 is assumed.
-  ##
-  ## See also: tril, diag
+function retval = triu (x, k)
 
   if (nargin > 0)
     [nr, nc] = size (x);
     retval = zeros (nr, nc);
   endif
 
   if (nargin == 1)
     k = 0;
diff --git a/scripts/image/colormap.m b/scripts/image/colormap.m
--- a/scripts/image/colormap.m
+++ b/scripts/image/colormap.m
@@ -12,29 +12,29 @@
 ### MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ### General Public License for more details.
 ###
 ### You should have received a copy of the GNU General Public License
 ### along with Octave; see the file COPYING.  If not, write to the Free
 ### Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ### 02111-1307, USA.
 
-function cmap = colormap (map)
+## Set the current colormap.
+## 
+## colormap (map) sets the current colormap to map.  map should be an n
+## row by 3 column matrix. The columns contain red, green, and blue
+## intensities respectively.  All entries should be between 0 and 1
+## inclusive. The new colormap is returned.
+## 
+## colormap ("default") restores the default colormap (a gray scale
+## colormap with 64 entries). The default colormap is returned.
+## 
+## colormap with no arguments returns the current colormap.
 
-  ## Set the current colormap.
-  ## 
-  ## colormap (map) sets the current colormap to map.  map should be an n
-  ## row by 3 column matrix. The columns contain red, green, and blue
-  ## intensities respectively.  All entries should be between 0 and 1
-  ## inclusive. The new colormap is returned.
-  ## 
-  ## colormap ("default") restores the default colormap (a gray scale
-  ## colormap with 64 entries). The default colormap is returned.
-  ## 
-  ## colormap with no arguments returns the current colormap.
+function cmap = colormap (map)
 
   ## Written by Tony Richardson (amr@mpl.ucsd.edu) July 1994.
 
   global CURRENT_COLOR_MAP
 
   if (nargin > 1)
     usage ("colormap (map)");
   endif
diff --git a/scripts/image/gray.m b/scripts/image/gray.m
--- a/scripts/image/gray.m
+++ b/scripts/image/gray.m
@@ -12,19 +12,19 @@
 ### MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ### General Public License for more details.
 ###
 ### You should have received a copy of the GNU General Public License
 ### along with Octave; see the file COPYING.  If not, write to the Free
 ### Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ### 02111-1307, USA.
 
-function map = gray (number)
+## Colormap.
 
-  ## Colormap.
+function map = gray (number)
 
   ## Written by Tony Richardson (amr@mpl.ucsd.edu) July 1994.
 
   if (nargin == 0)
     number = 64;
   elseif (nargin > 1)
     usage ("gray (number)");
   endif
diff --git a/scripts/image/gray2ind.m b/scripts/image/gray2ind.m
--- a/scripts/image/gray2ind.m
+++ b/scripts/image/gray2ind.m
@@ -12,19 +12,19 @@
 ### MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ### General Public License for more details.
 ###
 ### You should have received a copy of the GNU General Public License
 ### along with Octave; see the file COPYING.  If not, write to the Free
 ### Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ### 02111-1307, USA.
 
-function [X, map] = gray2ind (I, n)
+## Image format conversion
 
-  ## Image format conversion
+function [X, map] = gray2ind (I, n)
 
   ## Written by Tony Richardson (amr@mpl.ucsd.edu) July 1994.
 
   if (nargin < 1 || nargin > 2)
     usage ("gray2ind (I, n)");
   elseif (nargin == 1)
     n = 64;
   endif
diff --git a/scripts/image/image.m b/scripts/image/image.m
--- a/scripts/image/image.m
+++ b/scripts/image/image.m
@@ -12,27 +12,27 @@
 ### MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ### General Public License for more details.
 ###
 ### You should have received a copy of the GNU General Public License
 ### along with Octave; see the file COPYING.  If not, write to the Free
 ### Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ### 02111-1307, USA.
 
-function image (x, zoom)
+## Display an octave image matrix.
+##
+## image (x) displays a matrix as a color image. The elements of x are
+## indices into the current colormap and should have values between 1
+## and the length of the colormap.
+##
+## image (x, zoom) changes the zoom factor.  The default value is 4.
+##
+## SEE ALSO: imshow, imagesc, colormap.
 
-  ## Display an octave image matrix.
-  ##
-  ## image (x) displays a matrix as a color image. The elements of x are
-  ## indices into the current colormap and should have values between 1
-  ## and the length of the colormap.
-  ##
-  ## image (x, zoom) changes the zoom factor.  The default value is 4.
-  ##
-  ## SEE ALSO: imshow, imagesc, colormap.
+function image (x, zoom)
 
   ## Written by Tony Richardson (amr@mpl.ucsd.edu) July 1994.
 
   if (nargin == 0)
     ## Load Bobbie Jo Richardson (Born 3/16/94)
     x = loadimage ("default.img");
     zoom = 2;
   elseif (nargin == 1)
diff --git a/scripts/image/imagesc.m b/scripts/image/imagesc.m
--- a/scripts/image/imagesc.m
+++ b/scripts/image/imagesc.m
@@ -12,27 +12,27 @@
 ### MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ### General Public License for more details.
 ###
 ### You should have received a copy of the GNU General Public License
 ### along with Octave; see the file COPYING.  If not, write to the Free
 ### Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ### 02111-1307, USA.
 
-function x = imagesc (x, zoom)
+## Scale and display a matrix as an image.
+##
+## imagesc(x) displays a scaled version of the matrix x.  The matrix is
+## scaled so that its entries are indices into the current colormap.
+## The scaled matrix is returned.
+##
+## imagesc (x, zoom) sets the magnification, the default value is 4.
+##
+## SEE ALSO: image, imshow
 
-  ## Scale and display a matrix as an image.
-  ##
-  ## imagesc(x) displays a scaled version of the matrix x.  The matrix is
-  ## scaled so that its entries are indices into the current colormap.
-  ## The scaled matrix is returned.
-  ##
-  ## imagesc (x, zoom) sets the magnification, the default value is 4.
-  ##
-  ## SEE ALSO: image, imshow
+function x = imagesc (x, zoom)
 
   ## Written by Tony Richardson (amr@mpl.ucsd.edu) July 1994.
 
   if (nargin < 1 || nargin > 2)
     usage ("image (matrix, [zoom])");
   elseif (nargin == 1)
     zoom = 4;
   endif
diff --git a/scripts/image/imshow.m b/scripts/image/imshow.m
--- a/scripts/image/imshow.m
+++ b/scripts/image/imshow.m
@@ -12,29 +12,29 @@
 ### MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ### General Public License for more details.
 ###
 ### You should have received a copy of the GNU General Public License
 ### along with Octave; see the file COPYING.  If not, write to the Free
 ### Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ### 02111-1307, USA.
 
-function imshow (a1, a2, a3)
+## Display images.
+##
+## imshow (X) displays an indexed image using the current colormap.
+##
+## imshow (X, map) displays an indexed image using the specified colormap.
+##
+## imshow (I, n) displays a gray scale intensity image.
+##
+## imshow (R, G, B) displays an RGB image.
+##
+## SEE ALSO: image, imagesc, colormap, gray2ind, rgb2ind.
 
-  ## Display images.
-  ##
-  ## imshow (X) displays an indexed image using the current colormap.
-  ##
-  ## imshow (X, map) displays an indexed image using the specified colormap.
-  ##
-  ## imshow (I, n) displays a gray scale intensity image.
-  ##
-  ## imshow (R, G, B) displays an RGB image.
-  ##
-  ## SEE ALSO: image, imagesc, colormap, gray2ind, rgb2ind.
+function imshow (a1, a2, a3)
 
   ## Written by Tony Richardson (amr@mpl.ucsd.edu) July 1994.
 
   if (nargin < 0 || nargin > 3)
     usage ("imshow (args)");
   elseif (nargin == 2)
     if (length (a2) == 1)
       [a1, a2] = gray2ind (a1, a2);
diff --git a/scripts/image/ind2gray.m b/scripts/image/ind2gray.m
--- a/scripts/image/ind2gray.m
+++ b/scripts/image/ind2gray.m
@@ -12,28 +12,28 @@
 ### MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ### General Public License for more details.
 ###
 ### You should have received a copy of the GNU General Public License
 ### along with Octave; see the file COPYING.  If not, write to the Free
 ### Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ### 02111-1307, USA.
 
-function Y = ind2gray (X, map)
+## Convert an octave indexed image to a gray scale intensity image.
+##
+## Y = ind2gray (X) converts an indexed image to a gray scale intensity
+## image.  The current colormap is used to determine the intensities.
+## The intensity values lie between 0 and 1 inclusive.
+##
+## Y = ind2gray (X, map) uses the specified colormap instead of the
+## current one in the conversion process.
+##
+## SEE ALSO: gray2ind, rgb2ntsc, image, colormap
 
-  ## Convert an octave indexed image to a gray scale intensity image.
-  ##
-  ## Y = ind2gray (X) converts an indexed image to a gray scale intensity
-  ## image.  The current colormap is used to determine the intensities.
-  ## The intensity values lie between 0 and 1 inclusive.
-  ##
-  ## Y = ind2gray (X, map) uses the specified colormap instead of the
-  ## current one in the conversion process.
-  ##
-  ## SEE ALSO: gray2ind, rgb2ntsc, image, colormap
+function Y = ind2gray (X, map)
 
   ## Written by Tony Richardson (amr@mpl.ucsd.edu) July 1994.
 
   if (nargin < 1 || nargin > 2)
     usage ("ind2gray (X, map)");
   elseif (nargin == 1)
     map = colormap ();
   endif
diff --git a/scripts/image/ind2rgb.m b/scripts/image/ind2rgb.m
--- a/scripts/image/ind2rgb.m
+++ b/scripts/image/ind2rgb.m
@@ -12,25 +12,25 @@
 ### MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ### General Public License for more details.
 ###
 ### You should have received a copy of the GNU General Public License
 ### along with Octave; see the file COPYING.  If not, write to the Free
 ### Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ### 02111-1307, USA.
 
-function [R, G, B] = ind2rgb (X, map)
+## Convert an indexed image to red, green, and blue color components.
+##
+## [R G B] = ind2rgb(X) uses the current colormap for the conversion.
+##
+## [R G B] = ind2rgb(X,map) uses the specified colormap.
+##
+## SEE ALSO: rgb2ind, image, imshow, ind2gray, gray2ind.
 
-  ## Convert an indexed image to red, green, and blue color components.
-  ##
-  ## [R G B] = ind2rgb(X) uses the current colormap for the conversion.
-  ##
-  ## [R G B] = ind2rgb(X,map) uses the specified colormap.
-  ##
-  ## SEE ALSO: rgb2ind, image, imshow, ind2gray, gray2ind.
+function [R, G, B] = ind2rgb (X, map)
 
   ## Written by Tony Richardson (amr@mpl.ucsd.edu) July 1994.
 
   if (nargin < 1 || nargin > 2)
     usage ("ind2rgb (X, map)");
   elseif (nargin == 1)
     map = colormap ();
   endif
diff --git a/scripts/image/loadimage.m b/scripts/image/loadimage.m
--- a/scripts/image/loadimage.m
+++ b/scripts/image/loadimage.m
@@ -12,25 +12,25 @@
 ### MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ### General Public License for more details.
 ###
 ### You should have received a copy of the GNU General Public License
 ### along with Octave; see the file COPYING.  If not, write to the Free
 ### Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ### 02111-1307, USA.
 
-function [X, map] = loadimage (filename)
+## Load an image file.
+##
+## [X, map] = loadimage (img_file) loads an image and it's associated
+## color map from file img_file.  The image must be in stored in
+## octave's image format.
+##
+## SEE ALSO: saveimage, load, save
 
-  ## Load an image file.
-  ##
-  ## [X, map] = loadimage (img_file) loads an image and it's associated
-  ## color map from file img_file.  The image must be in stored in
-  ## octave's image format.
-  ##
-  ## SEE ALSO: saveimage, load, save
+function [X, map] = loadimage (filename)
 
   ## Written by Tony Richardson (amr@mpl.ucsd.edu) July 1994.
 
   if (nargin != 1)
     usage ("loadimage (filename)");
   elseif (! isstr (filename))
     error ("loadimage: expecting filename as a string");
   endif
diff --git a/scripts/image/ntsc2rgb.m b/scripts/image/ntsc2rgb.m
--- a/scripts/image/ntsc2rgb.m
+++ b/scripts/image/ntsc2rgb.m
@@ -12,19 +12,19 @@
 ### MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ### General Public License for more details.
 ###
 ### You should have received a copy of the GNU General Public License
 ### along with Octave; see the file COPYING.  If not, write to the Free
 ### Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ### 02111-1307, USA.
 
-function rgb = ntsc2rgb (yiq)
+## Image format conversion.
 
-  ## Image format conversion.
+function rgb = ntsc2rgb (yiq)
 
   ## Written by Tony Richardson (amr@mpl.ucsd.edu) July 1994.
 
   if (nargin != 1)
     usage ("ntsc2rgb (yiq)");
   endif
 
   trans = [ 1.0,      1.0,      1.0;
diff --git a/scripts/image/ocean.m b/scripts/image/ocean.m
--- a/scripts/image/ocean.m
+++ b/scripts/image/ocean.m
@@ -12,19 +12,19 @@
 ### MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ### General Public License for more details.
 ###
 ### You should have received a copy of the GNU General Public License
 ### along with Octave; see the file COPYING.  If not, write to the Free
 ### Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ### 02111-1307, USA.
 
-function map = ocean (number)
+## Colormap.
 
-  ## Colormap.
+function map = ocean (number)
 
   ## Written by Tony Richardson (amr@mpl.ucsd.edu) July 1994.
 
   if (nargin == 0)
     number = 64;
   elseif (nargin == 1)
     if (! is_scalar (number))
       error ("ocean: argument must be a scalar");
diff --git a/scripts/image/rgb2ind.m b/scripts/image/rgb2ind.m
--- a/scripts/image/rgb2ind.m
+++ b/scripts/image/rgb2ind.m
@@ -12,25 +12,25 @@
 ### MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ### General Public License for more details.
 ###
 ### You should have received a copy of the GNU General Public License
 ### along with Octave; see the file COPYING.  If not, write to the Free
 ### Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ### 02111-1307, USA.
 
-function [X, map] = rgb2ind (R, G, B)
+## Convert and RGB image to an octave indexed image.
+##
+## [X, map] = rgb2ind (R, G, B)
+##
+## SEE ALSO: ind2rgb, rgb2ntsc.
+##
+## Bugs: The color map may have duplicate entries.
 
-  ## Convert and RGB image to an octave indexed image.
-  ##
-  ## [X, map] = rgb2ind (R, G, B)
-  ##
-  ## SEE ALSO: ind2rgb, rgb2ntsc.
-  ##
-  ## Bugs: The color map may have duplicate entries.
+function [X, map] = rgb2ind (R, G, B)
 
   ## Written by Tony Richardson (amr@mpl.ucsd.edu) July 1994.
 
   if (nargin != 3)
     usage ("[X, map] = rgb2ind (R, G, B)");
   endif
 
   if (size (R) != size (G) || size (R) != size (B))
diff --git a/scripts/image/rgb2ntsc.m b/scripts/image/rgb2ntsc.m
--- a/scripts/image/rgb2ntsc.m
+++ b/scripts/image/rgb2ntsc.m
@@ -12,19 +12,19 @@
 ### MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ### General Public License for more details.
 ###
 ### You should have received a copy of the GNU General Public License
 ### along with Octave; see the file COPYING.  If not, write to the Free
 ### Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ### 02111-1307, USA.
 
-function yiq = rgb2ntsc (rgb)
+## Image format conversion.
 
-  ## Image format conversion.
+function yiq = rgb2ntsc (rgb)
 
   ## Written by Tony Richardson (amr@mpl.ucsd.edu) July 1994.
 
   if (nargin != 1)
     usage ("rgb2ntsc (rgb)");
   endif
 
   trans = [ 0.299,  0.596,  0.211;
diff --git a/scripts/image/saveimage.m b/scripts/image/saveimage.m
--- a/scripts/image/saveimage.m
+++ b/scripts/image/saveimage.m
@@ -12,52 +12,52 @@
 ### MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ### General Public License for more details.
 ###
 ### You should have received a copy of the GNU General Public License
 ### along with Octave; see the file COPYING.  If not, write to the Free
 ### Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ### 02111-1307, USA.
 
-function saveimage (filename, img, img_form, map)
+## Save a matrix to disk in image format.
+##
+## saveimage (filename, x) saves matrix x to file filename in octave's
+## image format.  The current colormap is saved in the file also.
+##
+## saveimage (filename, x, "img") saves the image in the default format
+## and is the same as saveimage (filename, x).
+##
+## saveimage (filename, x, "ppm") saves the image in ppm format instead
+## of the default octave image format.
+##
+## saveimage (filename, x, "ps") saves the image in PostScript format
+## instead of the default octave image format. (Note: images saved in
+## PostScript format can not be read back into octave with loadimage.)
+##
+## saveimage (filename, x, format, map) saves the image along with the
+## specified colormap in the specified format.
+##
+## Note: If the colormap contains only two entries and these entries
+## are black and white, the bitmap ppm and PostScript formats are used.
+## If the image is a gray scale image (the entries within each row of
+## the colormap are equal) the gray scale ppm and PostScript image
+## formats are used, otherwise the full color formats are used.
+##
+## The conversion to PostScript is based on pbmtolps.c, which was
+## written by 
+##
+##   George Phillips <phillips@cs.ubc.ca>
+##   Department of Computer Science
+##   University of British Columbia
+##
+## and is part of the portable bitmap utilities,
+##
+## SEE ALSO: loadimage, save, load, colormap
 
-  ## Save a matrix to disk in image format.
-  ##
-  ## saveimage (filename, x) saves matrix x to file filename in octave's
-  ## image format.  The current colormap is saved in the file also.
-  ##
-  ## saveimage (filename, x, "img") saves the image in the default format
-  ## and is the same as saveimage (filename, x).
-  ##
-  ## saveimage (filename, x, "ppm") saves the image in ppm format instead
-  ## of the default octave image format.
-  ##
-  ## saveimage (filename, x, "ps") saves the image in PostScript format
-  ## instead of the default octave image format. (Note: images saved in
-  ## PostScript format can not be read back into octave with loadimage.)
-  ##
-  ## saveimage (filename, x, format, map) saves the image along with the
-  ## specified colormap in the specified format.
-  ##
-  ## Note: If the colormap contains only two entries and these entries
-  ## are black and white, the bitmap ppm and PostScript formats are used.
-  ## If the image is a gray scale image (the entries within each row of
-  ## the colormap are equal) the gray scale ppm and PostScript image
-  ## formats are used, otherwise the full color formats are used.
-  ##
-  ## The conversion to PostScript is based on pbmtolps.c, which was
-  ## written by 
-  ##
-  ##   George Phillips <phillips@cs.ubc.ca>
-  ##   Department of Computer Science
-  ##   University of British Columbia
-  ##
-  ## and is part of the portable bitmap utilities,
-  ##
-  ## SEE ALSO: loadimage, save, load, colormap
+function saveimage (filename, img, img_form, map)
 
   ## Written by Tony Richardson (amr@mpl.ucsd.edu) July 1994.
 
   ## Rewritten by jwe to avoid using octoppm and pbm routines so that
   ## people who don't have the the pbm stuff installed can still use this
   ## function. 
   ##
   ## The conversion to PostScript is based on pnmtops.c, which is part of
diff --git a/scripts/io/printf.m b/scripts/io/printf.m
--- a/scripts/io/printf.m
+++ b/scripts/io/printf.m
@@ -12,23 +12,23 @@
 ### MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ### General Public License for more details.
 ###
 ### You should have received a copy of the GNU General Public License
 ### along with Octave; see the file COPYING.  If not, write to the Free
 ### Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ### 02111-1307, USA.
 
-function retval = printf (fmt, ...)
+## usage: printf (fmt, ...)
+##
+## Formatted write to standard output.
+##
+## See also: fprintf sprintf
 
-  ## usage: printf (fmt, ...)
-  ##
-  ## Formatted write to standard output.
-  ##
-  ## See also: fprintf sprintf
+function retval = printf (fmt, ...)
 
   retval = -1;
 
   if (nargin > 0)
     retval = fprintf (stdout, fmt, all_va_args);
   else
     usage ("printf (fmt, ...)");
   endif
diff --git a/scripts/io/puts.m b/scripts/io/puts.m
--- a/scripts/io/puts.m
+++ b/scripts/io/puts.m
@@ -12,23 +12,23 @@
 ### MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ### General Public License for more details.
 ###
 ### You should have received a copy of the GNU General Public License
 ### along with Octave; see the file COPYING.  If not, write to the Free
 ### Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ### 02111-1307, USA.
 
-function retval = puts (s)
+## usage: puts (string)
+##
+## Write string to the standard output.
+##
+## See also: fputs, printf, fprintf
 
-  ## usage: puts (string)
-  ##
-  ## Write string to the standard output.
-  ##
-  ## See also: fputs, printf, fprintf
+function retval = puts (s)
 
   retval = -1;
 
   if (nargin == 1)
     retval = fputs (stdout, s);
   else
     usage ("puts (string)");
   endif
diff --git a/scripts/linear-algebra/cond.m b/scripts/linear-algebra/cond.m
--- a/scripts/linear-algebra/cond.m
+++ b/scripts/linear-algebra/cond.m
@@ -12,24 +12,24 @@
 ### MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ### General Public License for more details.
 ###
 ### You should have received a copy of the GNU General Public License
 ### along with Octave; see the file COPYING.  If not, write to the Free
 ### Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ### 02111-1307, USA.
 
-function retval = cond (a)
+## usage: cond (a)
+##
+## Return the condition number of a, computed using the singular values
+## of a.
+##
+## See also: norm, svd
 
-  ## usage: cond (a)
-  ##
-  ## Return the condition number of a, computed using the singular values
-  ## of a.
-  ##
-  ## See also: norm, svd
+function retval = cond (a)
 
   if (nargin == 1)
     [nr, nc] = size (a);
     if (nr == 0 && nc == 0)
       if (strcmp (propagate_empty_matrices, "false"))
         error ("cond: empty matrix is invalid as argument");
       endif
       if (strcmp (propagate_empty_matrices, "warn"))
diff --git a/scripts/linear-algebra/kron.m b/scripts/linear-algebra/kron.m
--- a/scripts/linear-algebra/kron.m
+++ b/scripts/linear-algebra/kron.m
@@ -12,24 +12,24 @@
 ### MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ### General Public License for more details.
 ###
 ### You should have received a copy of the GNU General Public License
 ### along with Octave; see the file COPYING.  If not, write to the Free
 ### Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ### 02111-1307, USA.
 
-function x = kron (a, b)
+## Usage: x = kron (a, b)
+##
+## Form the Kronecker product of two matrices, defined block by block
+## as 
+##
+##   x = [a(i,j) b]
 
-  ## Usage: x = kron (a, b)
-  ##
-  ## Form the Kronecker product of two matrices, defined block by block
-  ## as 
-  ##
-  ##   x = [a(i,j) b]
+function x = kron (a, b)
 
   ## Written by A. S. Hodel (scotte@eng.auburn.edu) August 1993.
 
   if (nargin == 2)
 
     [m, n] = size (b);
     [ma, na] = size (a);
 
diff --git a/scripts/linear-algebra/norm.m b/scripts/linear-algebra/norm.m
--- a/scripts/linear-algebra/norm.m
+++ b/scripts/linear-algebra/norm.m
@@ -12,43 +12,43 @@
 ### MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ### General Public License for more details.
 ###
 ### You should have received a copy of the GNU General Public License
 ### along with Octave; see the file COPYING.  If not, write to the Free
 ### Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ### 02111-1307, USA.
 
-function retval = norm (x, p)
+## usage: norm (x, p)
+##
+## Compute the p-norm of x.
+##
+## If x is a matrix:
+##
+##   value of p     norm returns
+##   ----------     ------------
+##       1          1-norm, the largest column sum of x
+##       2          largest singular value of x
+##      Inf         infinity norm, the largest row sum of x
+##     "inf"        same as Inf
+##     "fro"        Frobenius norm of x, sqrt (sum (diag (x' * x)))
+##
+## If x is a vector or a scalar:
+##
+##   value of p     norm returns
+##   ----------     ------------
+##      Inf         max (abs (x))
+##     -Inf         min (abs (x))
+##     other        p-norm of x, sum (abs (x) .^ p) ^ (1/p)
+##
+## If the second argument is missing, p = 2 is assumed.
+##
+## See also: cond, svd
 
-  ## usage: norm (x, p)
-  ##
-  ## Compute the p-norm of x.
-  ##
-  ## If x is a matrix:
-  ##
-  ##   value of p     norm returns
-  ##   ----------     ------------
-  ##       1          1-norm, the largest column sum of x
-  ##       2          largest singular value of x
-  ##      Inf         infinity norm, the largest row sum of x
-  ##     "inf"        same as Inf
-  ##     "fro"        Frobenius norm of x, sqrt (sum (diag (x' * x)))
-  ##
-  ## If x is a vector or a scalar:
-  ##
-  ##   value of p     norm returns
-  ##   ----------     ------------
-  ##      Inf         max (abs (x))
-  ##     -Inf         min (abs (x))
-  ##     other        p-norm of x, sum (abs (x) .^ p) ^ (1/p)
-  ##
-  ## If the second argument is missing, p = 2 is assumed.
-  ##
-  ## See also: cond, svd
+function retval = norm (x, p)
 
   if (nargin < 1 || nargin > 2)
     error ("usage: norm (x [, p])");
   endif
 
   if (isempty (x))
     retval = [];
     return;
diff --git a/scripts/linear-algebra/null.m b/scripts/linear-algebra/null.m
--- a/scripts/linear-algebra/null.m
+++ b/scripts/linear-algebra/null.m
@@ -12,27 +12,27 @@
 ### MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ### General Public License for more details.
 ###
 ### You should have received a copy of the GNU General Public License
 ### along with Octave; see the file COPYING.  If not, write to the Free
 ### Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ### 02111-1307, USA.
 
-function retval = null (A, tol)
+## usage: null (A, tol)
+##        null (A)
+##
+## Returns an orthonormal basis of the null space of A.
+##
+## The dimension of the null space is taken as the number of singular
+## values of A not greater than tol;  the default for tol is
+## max (size (A)) * sigma_max (A) * eps, where sigma_max (A) is the
+## maximal singular value of A. 
 
-  ## usage: null (A, tol)
-  ##        null (A)
-  ##
-  ## Returns an orthonormal basis of the null space of A.
-  ##
-  ## The dimension of the null space is taken as the number of singular
-  ## values of A not greater than tol;  the default for tol is
-  ## max (size (A)) * sigma_max (A) * eps, where sigma_max (A) is the
-  ## maximal singular value of A. 
+function retval = null (A, tol)
 
   ## Written by KH (Kurt.Hornik@ci.tuwien.ac.at) on Dec 24, 1993.
 
   [U, S, V] = svd (A);
 
   [rows, cols] = size (A);
 
   [S_nr, S_nc] = size (S);
diff --git a/scripts/linear-algebra/orth.m b/scripts/linear-algebra/orth.m
--- a/scripts/linear-algebra/orth.m
+++ b/scripts/linear-algebra/orth.m
@@ -12,27 +12,27 @@
 ### MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ### General Public License for more details.
 ###
 ### You should have received a copy of the GNU General Public License
 ### along with Octave; see the file COPYING.  If not, write to the Free
 ### Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ### 02111-1307, USA.
 
-function retval = orth (A, tol)
+## usage: orth (A, tol)
+##        orth (A)
+##
+## Returns an orthonormal basis of the range of A.
+##
+## The dimension of the range space is taken as the number of singular
+## values of A greater than tol; the default for tol is
+## max (size (A)) * sigma_max (A) * eps, where sigma_max (A) is the
+## maximal singular value of A.
 
-  ## usage: orth (A, tol)
-  ##        orth (A)
-  ##
-  ## Returns an orthonormal basis of the range of A.
-  ##
-  ## The dimension of the range space is taken as the number of singular
-  ## values of A greater than tol; the default for tol is
-  ## max (size (A)) * sigma_max (A) * eps, where sigma_max (A) is the
-  ## maximal singular value of A.
+function retval = orth (A, tol)
 
   ## Written by KH (Kurt.Hornik@ci.tuwien.ac.at) on Dec 24, 1993.
 
   [U, S, V] = svd (A);
 
   [rows, cols] = size (A);
 
   [S_nr, S_nc] = size (S);
diff --git a/scripts/linear-algebra/qzhess.m b/scripts/linear-algebra/qzhess.m
--- a/scripts/linear-algebra/qzhess.m
+++ b/scripts/linear-algebra/qzhess.m
@@ -12,30 +12,30 @@
 ### MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ### General Public License for more details.
 ###
 ### You should have received a copy of the GNU General Public License
 ### along with Octave; see the file COPYING.  If not, write to the Free
 ### Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ### 02111-1307, USA.
 
-function [aa, bb, q, z] = qzhess (a, b)
+## Usage: [aa, bb, q, z] = qzhess (a, b)
+##
+## Compute the qz decomposition of the matrix pencil (a - lambda b)
+##
+## result: (for Matlab compatibility):
+##
+##   aa = q*a*z and bb = q*b*z, with q, z orthogonal, and
+##   v = matrix of generalized eigenvectors.
+##
+## This ought to be done in a compiled program
+##
+## Algorithm taken from Golub and Van Loan, Matrix Computations, 2nd ed.
 
-  ## Usage: [aa, bb, q, z] = qzhess (a, b)
-  ##
-  ## Compute the qz decomposition of the matrix pencil (a - lambda b)
-  ##
-  ## result: (for Matlab compatibility):
-  ##
-  ##   aa = q*a*z and bb = q*b*z, with q, z orthogonal, and
-  ##   v = matrix of generalized eigenvectors.
-  ##
-  ## This ought to be done in a compiled program
-  ##
-  ## Algorithm taken from Golub and Van Loan, Matrix Computations, 2nd ed.
+function [aa, bb, q, z] = qzhess (a, b)
 
   ## Written by A. S. Hodel (scotte@eng.auburn.edu) August 1993.
 
   if (nargin != 2)
     error ("usage: [aa, bb, q, z] = qzhess (a, b)");
   endif
 
   [na, ma] = size (a);
diff --git a/scripts/linear-algebra/rank.m b/scripts/linear-algebra/rank.m
--- a/scripts/linear-algebra/rank.m
+++ b/scripts/linear-algebra/rank.m
@@ -12,29 +12,29 @@
 ### MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ### General Public License for more details.
 ###
 ### You should have received a copy of the GNU General Public License
 ### along with Octave; see the file COPYING.  If not, write to the Free
 ### Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ### 02111-1307, USA.
 
-function retval = rank (A, tol)
+## usage: rank (a, tol)
+##
+## Return the rank of the matrix a.  The rank is taken to be the number
+## of singular values of a that are greater than tol.
+##
+## If the second argument is omitted, it is taken to be
+##
+##   tol =  max (size (a)) * sigma (1) * eps;
+##
+## where eps is machine precision and sigma is the largest singular
+## value of a.
 
-  ## usage: rank (a, tol)
-  ##
-  ## Return the rank of the matrix a.  The rank is taken to be the number
-  ## of singular values of a that are greater than tol.
-  ##
-  ## If the second argument is omitted, it is taken to be
-  ##
-  ##   tol =  max (size (a)) * sigma (1) * eps;
-  ##
-  ## where eps is machine precision and sigma is the largest singular
-  ## value of a.
+function retval = rank (A, tol)
 
   if (nargin == 1)
     sigma = svd (A);
     tolerance = max (size (A)) * sigma (1) * eps;
   elseif (nargin == 2)
     sigma = svd (A);
     tolerance = tol;
   else
diff --git a/scripts/linear-algebra/trace.m b/scripts/linear-algebra/trace.m
--- a/scripts/linear-algebra/trace.m
+++ b/scripts/linear-algebra/trace.m
@@ -12,21 +12,21 @@
 ### MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ### General Public License for more details.
 ###
 ### You should have received a copy of the GNU General Public License
 ### along with Octave; see the file COPYING.  If not, write to the Free
 ### Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ### 02111-1307, USA.
 
-function y = trace (x)
+## usage: trace (x)
+##
+## Returns the trace (the sum of the diagonal elements) of x.
 
-  ## usage: trace (x)
-  ##
-  ## Returns the trace (the sum of the diagonal elements) of x.
+function y = trace (x)
 
   if (nargin != 1)
     usage ("trace (x)");
   endif
 
   [nr, nc] = size (x);
   if (nr == 1 || nc == 1)
     y = x(1);
diff --git a/scripts/miscellaneous/bug_report.m b/scripts/miscellaneous/bug_report.m
--- a/scripts/miscellaneous/bug_report.m
+++ b/scripts/miscellaneous/bug_report.m
@@ -12,23 +12,23 @@
 ### MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ### General Public License for more details.
 ###
 ### You should have received a copy of the GNU General Public License
 ### along with Octave; see the file COPYING.  If not, write to the Free
 ### Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ### 02111-1307, USA.
 
-function bug_report ()
+## usage: bug_report
+##
+## Have Octave create a bug report template file, invoke your favorite
+## editor, and submit the report to the bug-octave mailing list when
+## you are finished editing.
 
-  ## usage: bug_report
-  ##
-  ## Have Octave create a bug report template file, invoke your favorite
-  ## editor, and submit the report to the bug-octave mailing list when
-  ## you are finished editing.
+function bug_report ()
 
   if (nargin != 0)
     warning ("bug_report: ignoring extra arguments");
   endif
 
   printf ("Please enter a one-line description of your bug report.\n\n");
   fflush (stdout);
 
diff --git a/scripts/miscellaneous/cputime.m b/scripts/miscellaneous/cputime.m
--- a/scripts/miscellaneous/cputime.m
+++ b/scripts/miscellaneous/cputime.m
@@ -12,21 +12,21 @@
 ### MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ### General Public License for more details.
 ###
 ### You should have received a copy of the GNU General Public License
 ### along with Octave; see the file COPYING.  If not, write to the Free
 ### Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ### 02111-1307, USA.
 
-function [total, user, system] = cputime ()
+## usage: cputime
+##
+## Get CPU time statistics.
 
-  ## usage: cputime
-  ##
-  ## Get CPU time statistics.
+function [total, user, system] = cputime ()
 
   if (nargin != 0)
     warning ("cputime: ignoring extra arguments");
   endif
 
   resource_stats = getrusage ();
 
   usr = resource_stats.utime;
diff --git a/scripts/miscellaneous/dump_prefs.m b/scripts/miscellaneous/dump_prefs.m
--- a/scripts/miscellaneous/dump_prefs.m
+++ b/scripts/miscellaneous/dump_prefs.m
@@ -12,23 +12,23 @@
 ### MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ### General Public License for more details.
 ###
 ### You should have received a copy of the GNU General Public License
 ### along with Octave; see the file COPYING.  If not, write to the Free
 ### Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ### 02111-1307, USA.
 
-function dump_prefs (file)
+## usage: dump_prefs (file)
+##
+## Have Octave dump all the current user preference variables to FILE
+## in a format that can be parsed by Octave later.  If FILE is omitted,
+## the listing is printed to stdout.
 
-  ## usage: dump_prefs (file)
-  ##
-  ## Have Octave dump all the current user preference variables to FILE
-  ## in a format that can be parsed by Octave later.  If FILE is omitted,
-  ## the listing is printed to stdout.
+function dump_prefs (file)
 
   if (nargin == 0)
     file = stdout;
   endif
 
   ## XXX FIXME XXX -- vectors of strings would be really useful here...
   ## XXX FIXME XXX -- maybe this should be a built-in function so that we
   ## wouldn't have to remember to update it each time the list of
diff --git a/scripts/miscellaneous/etime.m b/scripts/miscellaneous/etime.m
--- a/scripts/miscellaneous/etime.m
+++ b/scripts/miscellaneous/etime.m
@@ -12,24 +12,24 @@
 ### MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ### General Public License for more details.
 ###
 ### You should have received a copy of the GNU General Public License
 ### along with Octave; see the file COPYING.  If not, write to the Free
 ### Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ### 02111-1307, USA.
 
-function secs = etime (t1, t0)
+## usage: etime (t1, t0)
+##
+## Return the difference between t1 and t0 in seconds.  The arguments
+## are expected to be vectors in the form returned by clock ().
+##
+## See also: tic, toc, clock, cputime
 
-  ## usage: etime (t1, t0)
-  ##
-  ## Return the difference between t1 and t0 in seconds.  The arguments
-  ## are expected to be vectors in the form returned by clock ().
-  ##
-  ## See also: tic, toc, clock, cputime
+function secs = etime (t1, t0)
 
   if (nargin != 2)
     usage ("etime (t1, t0)");
   endif
 
   if (is_vector (t1) && length (t1) == 6 && is_vector (t0) && length (t0) == 6)
 
     if (t1 (1) != t0 (1))
diff --git a/scripts/miscellaneous/flops.m b/scripts/miscellaneous/flops.m
--- a/scripts/miscellaneous/flops.m
+++ b/scripts/miscellaneous/flops.m
@@ -12,21 +12,21 @@
 ### MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ### General Public License for more details.
 ###
 ### You should have received a copy of the GNU General Public License
 ### along with Octave; see the file COPYING.  If not, write to the Free
 ### Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ### 02111-1307, USA.
 
-function retval = flops ()
+## usage: flops
+##
+## Count floating point operations.
 
-  ## usage: flops
-  ##
-  ## Count floating point operations.
+function retval = flops ()
 
   if (nargin > 0)
     usage ("flops ()");
   endif
 
   warning ("flops is a flop, always returning zero");
 
   retval = 0;
diff --git a/scripts/miscellaneous/is_leap_year.m b/scripts/miscellaneous/is_leap_year.m
--- a/scripts/miscellaneous/is_leap_year.m
+++ b/scripts/miscellaneous/is_leap_year.m
@@ -12,22 +12,22 @@
 ### MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ### General Public License for more details.
 ###
 ### You should have received a copy of the GNU General Public License
 ### along with Octave; see the file COPYING.  If not, write to the Free
 ### Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ### 02111-1307, USA.
 
-function retval = is_leap_year (year)
+## usage: is_leap_year (year)
+##
+## Return 1 if the given year is a leap year; otherwise, return 0.
+## With no arguments, use the current year.
 
-  ## usage: is_leap_year (year)
-  ##
-  ## Return 1 if the given year is a leap year; otherwise, return 0.
-  ## With no arguments, use the current year.
+function retval = is_leap_year (year)
 
   if (nargin > 1)
     usage ("is_leap_year (year)");
   endif
 
   if (nargin == 0)
     t = clock ();
     year = t (1);
diff --git a/scripts/miscellaneous/list_primes.m b/scripts/miscellaneous/list_primes.m
--- a/scripts/miscellaneous/list_primes.m
+++ b/scripts/miscellaneous/list_primes.m
@@ -12,24 +12,24 @@
 ### MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ### General Public License for more details.
 ###
 ### You should have received a copy of the GNU General Public License
 ### along with Octave; see the file COPYING.  If not, write to the Free
 ### Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ### 02111-1307, USA.
 
-function retval = list_primes (n)
+## usage: list_primes (n)
+##
+## List the first n primes.  If n is unspecified, the first 30 primes
+## are listed.
+##
+## The algorithm used is from page 218 of the TeXbook.
 
-  ## usage: list_primes (n)
-  ##
-  ## List the first n primes.  If n is unspecified, the first 30 primes
-  ## are listed.
-  ##
-  ## The algorithm used is from page 218 of the TeXbook.
+function retval = list_primes (n)
 
   if (nargin > 0)
     if (! is_scalar (n))
       error ("list_primes: argument must be a scalar");
     endif
   endif
 
   if (nargin == 0)
diff --git a/scripts/miscellaneous/menu.m b/scripts/miscellaneous/menu.m
--- a/scripts/miscellaneous/menu.m
+++ b/scripts/miscellaneous/menu.m
@@ -12,21 +12,21 @@
 ### MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ### General Public License for more details.
 ###
 ### You should have received a copy of the GNU General Public License
 ### along with Octave; see the file COPYING.  If not, write to the Free
 ### Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ### 02111-1307, USA.
 
-function num = menu (t, ...)
+## usage: menu (title, opt1, ...)
+##
+## See also: disp, printf, input
 
-  ## usage: menu (title, opt1, ...)
-  ##
-  ## See also: disp, printf, input
+function num = menu (t, ...)
 
   if (nargin < 2)
     usage ("menu (title, opt1, ...)");
   endif
 
   ## Force pending output to appear before the menu.
 
   fflush (stdout);
diff --git a/scripts/miscellaneous/popen2.m b/scripts/miscellaneous/popen2.m
--- a/scripts/miscellaneous/popen2.m
+++ b/scripts/miscellaneous/popen2.m
@@ -12,38 +12,38 @@
 ### MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ### General Public License for more details.
 ###
 ### You should have received a copy of the GNU General Public License
 ### along with Octave; see the file COPYING.  If not, write to the Free
 ### Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ### 02111-1307, USA.
 
-function [in, out, pid] = popen2 (command, args)
+## usage: [IN, OUT, PID] = popen2 (COMMAND, ARGS)
+##
+## Start a subprocess with two-way communication.  COMMAND specifies
+## the name of the command to start.  ARGS is an array of strings
+## containing options for COMMAND.  IN and out are the file ids of the
+## input and streams for the subprocess, and PID is the process id of
+## the subprocess, or -1 if COMMAND could not be executed.
+##
+## Example:
+##
+##  [in, out, pid] = popen2 ("sort", "-nr");
+##  fputs (in, "these\n");
+##  fputs (in, "are\n");
+##  fputs (in, "some\n");
+##  fputs (in, "strings\n");
+##  fclose (in);
+##  while (isstr (s = fgets (out)))
+##    fputs (stdout, s);
+##  endwhile
+##  fclose (out);
 
-  ## usage: [IN, OUT, PID] = popen2 (COMMAND, ARGS)
-  ##
-  ## Start a subprocess with two-way communication.  COMMAND specifies
-  ## the name of the command to start.  ARGS is an array of strings
-  ## containing options for COMMAND.  IN and out are the file ids of the
-  ## input and streams for the subprocess, and PID is the process id of
-  ## the subprocess, or -1 if COMMAND could not be executed.
-  ##
-  ## Example:
-  ##
-  ##  [in, out, pid] = popen2 ("sort", "-nr");
-  ##  fputs (in, "these\n");
-  ##  fputs (in, "are\n");
-  ##  fputs (in, "some\n");
-  ##  fputs (in, "strings\n");
-  ##  fclose (in);
-  ##  while (isstr (s = fgets (out)))
-  ##    fputs (stdout, s);
-  ##  endwhile
-  ##  fclose (out);
+function [in, out, pid] = popen2 (command, args)
 
   in = -1;
   out = -1;
   pid = -1;
 
   if (nargin == 1 || nargin == 2)
 
     if (nargin == 1)
diff --git a/scripts/miscellaneous/texas_lotto.m b/scripts/miscellaneous/texas_lotto.m
--- a/scripts/miscellaneous/texas_lotto.m
+++ b/scripts/miscellaneous/texas_lotto.m
@@ -12,24 +12,24 @@
 ### MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ### General Public License for more details.
 ###
 ### You should have received a copy of the GNU General Public License
 ### along with Octave; see the file COPYING.  If not, write to the Free
 ### Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ### 02111-1307, USA.
 
-function picks = texas_lotto ()
+## usage: texas_lotto
+##
+## Pick 6 unique numbers between 1 and 50 that are guaranteed to win
+## the Texas Lotto.
+##
+## See also: rand
 
-  ## usage: texas_lotto
-  ##
-  ## Pick 6 unique numbers between 1 and 50 that are guaranteed to win
-  ## the Texas Lotto.
-  ##
-  ## See also: rand
+function picks = texas_lotto ()
 
   if (nargin != 0)
     warning ("win_texas_lotto: ignoring extra arguments");
   endif
 
   picks = zeros (1,6);
   picks (1) = round (50-49*(1-rand));
   n = 2;
diff --git a/scripts/miscellaneous/tic.m b/scripts/miscellaneous/tic.m
--- a/scripts/miscellaneous/tic.m
+++ b/scripts/miscellaneous/tic.m
@@ -12,23 +12,23 @@
 ### MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ### General Public License for more details.
 ###
 ### You should have received a copy of the GNU General Public License
 ### along with Octave; see the file COPYING.  If not, write to the Free
 ### Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ### 02111-1307, USA.
 
-function tic ()
+## usage: tic
+##
+## Set a wall-clock timer.
+##
+## See also: toc, clock, etime, cputime
 
-  ## usage: tic
-  ##
-  ## Set a wall-clock timer.
-  ##
-  ## See also: toc, clock, etime, cputime
+function tic ()
 
   if (nargin != 0)
     warning ("tic: ignoring extra arguments");
   endif
 
   global _time_tic_called;
 
   _time_tic_called = clock ();
diff --git a/scripts/miscellaneous/toc.m b/scripts/miscellaneous/toc.m
--- a/scripts/miscellaneous/toc.m
+++ b/scripts/miscellaneous/toc.m
@@ -12,24 +12,24 @@
 ### MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ### General Public License for more details.
 ###
 ### You should have received a copy of the GNU General Public License
 ### along with Octave; see the file COPYING.  If not, write to the Free
 ### Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ### 02111-1307, USA.
 
-function secs = toc ()
+## usage: toc
+##
+## Return the difference between the current wall-clock time and the
+## time that the function tic () was last called, in seconds.
+##
+## See also: tic, clock, etime, cputime
 
-  ## usage: toc
-  ##
-  ## Return the difference between the current wall-clock time and the
-  ## time that the function tic () was last called, in seconds.
-  ##
-  ## See also: tic, clock, etime, cputime
+function secs = toc ()
 
   if (nargin != 0)
     warning ("toc: ignoring extra arguments");
   endif
 
   global _time_tic_called;
 
   if (exist ("_time_tic_called"))
diff --git a/scripts/miscellaneous/version.m b/scripts/miscellaneous/version.m
--- a/scripts/miscellaneous/version.m
+++ b/scripts/miscellaneous/version.m
@@ -12,23 +12,23 @@
 ### MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ### General Public License for more details.
 ###
 ### You should have received a copy of the GNU General Public License
 ### along with Octave; see the file COPYING.  If not, write to the Free
 ### Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ### 02111-1307, USA.
 
-function vs = version ()
+## usage: version
+##
+## Return the Octave version number as a string.
+##
+## See also: OCTAVE_VERSION
 
-  ## usage: version
-  ##
-  ## Return the Octave version number as a string.
-  ##
-  ## See also: OCTAVE_VERSION
+function vs = version ()
 
   if (nargin != 0)
     warning ("version: ignoring extra arguments");
   endif
 
   vs = OCTAVE_VERSION;
 
 endfunction
diff --git a/scripts/plot/__pltopt__.m b/scripts/plot/__pltopt__.m
--- a/scripts/plot/__pltopt__.m
+++ b/scripts/plot/__pltopt__.m
@@ -14,58 +14,58 @@
 ###
 ### You should have received a copy of the GNU General Public License
 ### along with Octave; see the file COPYING.  If not, write to the Free
 ### Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ### 02111-1307, USA.
 
 ## Originally written by Rick Niles <niles@axp745.gsfc.nasa.gov>.
 
-function fmt = plot_opt (caller, opt)
+## usage: fmt = plot_opt (caller, opt)
+##
+## Decode plot option strings.
+##
+## If OPT is a valid option string, return a string of the form "w l 2"
+## ("with lines 2").  Uses abbreviations for the options to avoid
+## overrunning gnuplot's command line buffer unnecessarily.
+##
+## OPT can currently be some combination of the following:
+##
+##   "-"   for lines plot style (default).
+##   "."   for dots plot style.
+##   "@"   for points plot style.
+##   "-@"  for linespoints plot style.
+##   "^"   for impulses plot style.
+##   "L"   for steps plot style.
+##   "#"   for boxes plot style.
+##   "~"   for errorbars plot style.
+##   "#~"  for boxerrorbars plot style.
+##   "n"   with n in 1-6 (wraps at 8), plot color
+##   "nm"  with m in 1-6 (wraps at 6), point style (only valid with "@" or "-@")
+##   "c"   where c is one of ["r", "g", "b", "m", "c", "w"] colors.
+##
+##   Special points formats:
+##
+##      "+", "*", "o", "x" will display points in that style.
+##
+##   The legend may be fixed to include the name of the variable
+##   plotted in some future version of Octave.
+##
+##   The color line styles have the following meanings on terminals
+##   that support color.
+##
+##     Number  Gnuplot colors     (lines)points style
+##       1       red                 "*"
+##       2       green               "+"
+##       3       blue                "o"
+##       4       magenta             "x"
+##       5       cyan                house
+##       6       brown               there exists
 
-  ## usage: fmt = plot_opt (caller, opt)
-  ##
-  ## Decode plot option strings.
-  ##
-  ## If OPT is a valid option string, return a string of the form "w l 2"
-  ## ("with lines 2").  Uses abbreviations for the options to avoid
-  ## overrunning gnuplot's command line buffer unnecessarily.
-  ##
-  ## OPT can currently be some combination of the following:
-  ##
-  ##   "-"   for lines plot style (default).
-  ##   "."   for dots plot style.
-  ##   "@"   for points plot style.
-  ##   "-@"  for linespoints plot style.
-  ##   "^"   for impulses plot style.
-  ##   "L"   for steps plot style.
-  ##   "#"   for boxes plot style.
-  ##   "~"   for errorbars plot style.
-  ##   "#~"  for boxerrorbars plot style.
-  ##   "n"   with n in 1-6 (wraps at 8), plot color
-  ##   "nm"  with m in 1-6 (wraps at 6), point style (only valid with "@" or "-@")
-  ##   "c"   where c is one of ["r", "g", "b", "m", "c", "w"] colors.
-  ##
-  ##   Special points formats:
-  ##
-  ##      "+", "*", "o", "x" will display points in that style.
-  ##
-  ##   The legend may be fixed to include the name of the variable
-  ##   plotted in some future version of Octave.
-  ##
-  ##   The color line styles have the following meanings on terminals
-  ##   that support color.
-  ##
-  ##     Number  Gnuplot colors     (lines)points style
-  ##       1       red                 "*"
-  ##       2       green               "+"
-  ##       3       blue                "o"
-  ##       4       magenta             "x"
-  ##       5       cyan                house
-  ##       6       brown               there exists
+function fmt = plot_opt (caller, opt)
 
   set_color = 0;
   set_symbol = 0;
   set_lines = 0;
   set_dots = 0;
   set_points = 0;
   set_impulses = 0;
   set_steps = 0;
diff --git a/scripts/plot/axis.m b/scripts/plot/axis.m
--- a/scripts/plot/axis.m
+++ b/scripts/plot/axis.m
@@ -12,29 +12,29 @@
 ### MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ### General Public License for more details.
 ###
 ### You should have received a copy of the GNU General Public License
 ### along with Octave; see the file COPYING.  If not, write to the Free
 ### Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ### 02111-1307, USA.
 
-function curr_axis = axis (ax)
+## usage: axis ()
+##        axis ([xmin, xmax])
+##        axis ([xmin, xmax, ymin, ymax])
+##        axis ([xmin, xmax, ymin, ymax, zmin, zmax])
+##
+## Sets the axis limits.
+##
+## With no arguments, turns autoscaling on.
+##
+## If your plot is already drawn, then you need to REPLOT before 
+## the new axis limits will take effect.
 
-  ## usage: axis ()
-  ##        axis ([xmin, xmax])
-  ##        axis ([xmin, xmax, ymin, ymax])
-  ##        axis ([xmin, xmax, ymin, ymax, zmin, zmax])
-  ##
-  ## Sets the axis limits.
-  ##
-  ## With no arguments, turns autoscaling on.
-  ##
-  ## If your plot is already drawn, then you need to REPLOT before 
-  ## the new axis limits will take effect.
+function curr_axis = axis (ax)
 
   ## This may not be correct if someone has used the gnuplot interface
   ## directly...
 
   global __current_axis__;
 
   if (! exist ("__current_axis__"))
     __current_axis__ = [-10, 10, -10, 10];
diff --git a/scripts/plot/bar.m b/scripts/plot/bar.m
--- a/scripts/plot/bar.m
+++ b/scripts/plot/bar.m
@@ -12,39 +12,39 @@
 ### MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ### General Public License for more details.
 ###
 ### You should have received a copy of the GNU General Public License
 ### along with Octave; see the file COPYING.  If not, write to the Free
 ### Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ### 02111-1307, USA.
 
-function [xb, yb] = bar (x, y)
+## usage: [xb, yb] = bar (x, y)
+##
+## Given two vectors of x-y data, bar produces a `bar' graph.
+##
+## If only one argument is given, it is taken as a vector of y-values
+## and the x coordinates are taken to be the indices of the elements.
+##
+## If two output arguments are specified, the data are generated but
+## not plotted.  For example,
+##
+##   bar (x, y);
+##
+## and
+##
+##   [xb, yb] = bar (x, y);
+##   plot (xb, yb);
+##
+## are equivalent.
+##
+## See also: plot, semilogx, semilogy, loglog, polar, mesh, contour,
+##           stairs, gplot, gsplot, replot, xlabel, ylabel, title 
 
-  ## usage: [xb, yb] = bar (x, y)
-  ##
-  ## Given two vectors of x-y data, bar produces a `bar' graph.
-  ##
-  ## If only one argument is given, it is taken as a vector of y-values
-  ## and the x coordinates are taken to be the indices of the elements.
-  ##
-  ## If two output arguments are specified, the data are generated but
-  ## not plotted.  For example,
-  ##
-  ##   bar (x, y);
-  ##
-  ## and
-  ##
-  ##   [xb, yb] = bar (x, y);
-  ##   plot (xb, yb);
-  ##
-  ## are equivalent.
-  ##
-  ## See also: plot, semilogx, semilogy, loglog, polar, mesh, contour,
-  ##           stairs, gplot, gsplot, replot, xlabel, ylabel, title 
+function [xb, yb] = bar (x, y)
 
   if (nargin == 1)
     if (is_vector (x))
       len = 3 * length (x) + 1;
       tmp_xb = tmp_yb = zeros (len, 1);
       tmp_xb(1) = 0.5;
       tmp_yb(1) = 0;
       k = 1;
diff --git a/scripts/plot/bottom_title.m b/scripts/plot/bottom_title.m
--- a/scripts/plot/bottom_title.m
+++ b/scripts/plot/bottom_title.m
@@ -12,26 +12,26 @@
 ### MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ### General Public License for more details.
 ###
 ### You should have received a copy of the GNU General Public License
 ### along with Octave; see the file COPYING.  If not, write to the Free
 ### Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ### 02111-1307, USA.
 
-function bottom_title (text)
+## usage: bottom_title (text)
+##
+## NOTE: this will work only with gnuplot installed with
+##       multiplot patch
+##
+## makes a title with the given text at the bottom of the plot 
+## rather than the top.
+##
 
-  ## usage: bottom_title (text)
-  ##
-  ## NOTE: this will work only with gnuplot installed with
-  ##       multiplot patch
-  ##
-  ## makes a title with the given text at the bottom of the plot 
-  ## rather than the top.
-  ##
+function bottom_title (text)
 
   ## Written by Vinayak Dutt, Dutt.Vinayak@mayo.EDU
 
   if (! gnuplot_has_multiplot)
     error ("bottom_title: gnuplot does not appear to support this feature");
   endif
     
   if (nargin != 1)
diff --git a/scripts/plot/contour.m b/scripts/plot/contour.m
--- a/scripts/plot/contour.m
+++ b/scripts/plot/contour.m
@@ -12,22 +12,22 @@
 ### MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ### General Public License for more details.
 ###
 ### You should have received a copy of the GNU General Public License
 ### along with Octave; see the file COPYING.  If not, write to the Free
 ### Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ### 02111-1307, USA.
 
-function contour (z, n, x, y)
+## usage: contour (z, n, x, y)
+##
+## See also: plot, semilogx, semilogy, loglog, polar, mesh, contour,
+##           bar, stairs, gplot, gsplot, replot, xlabel, ylabel, title 
 
-  ## usage: contour (z, n, x, y)
-  ##
-  ## See also: plot, semilogx, semilogy, loglog, polar, mesh, contour,
-  ##           bar, stairs, gplot, gsplot, replot, xlabel, ylabel, title 
+function contour (z, n, x, y)
 
 
   if (nargin == 1)
     n = 10;
   endif
 
   if (nargin == 1 || nargin == 2)
     if (is_matrix (z))
diff --git a/scripts/plot/figure.m b/scripts/plot/figure.m
--- a/scripts/plot/figure.m
+++ b/scripts/plot/figure.m
@@ -12,22 +12,22 @@
 ### MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ### General Public License for more details.
 ###
 ### You should have received a copy of the GNU General Public License
 ### along with Octave; see the file COPYING.  If not, write to the Free
 ### Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ### 02111-1307, USA.
 
-function figure (n)
+## usage: figure (n)
+##
+## Set the current plot window to plot window N.  This function
+## currently requires X11 and a recent version of gnuplot.
 
-  ## usage: figure (n)
-  ##
-  ## Set the current plot window to plot window N.  This function
-  ## currently requires X11 and a recent version of gnuplot.
+function figure (n)
 
   if (nargin == 1)
     if (gnuplot_has_frames)
       if (! isempty (getenv ("DISPLAY")))
 	eval (sprintf ("set term x11 %d\n", n));
       else
 	error ("figure: requires X11 and valid DISPLAY");
       endif
diff --git a/scripts/plot/grid.m b/scripts/plot/grid.m
--- a/scripts/plot/grid.m
+++ b/scripts/plot/grid.m
@@ -12,26 +12,26 @@
 ### MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ### General Public License for more details.
 ###
 ### You should have received a copy of the GNU General Public License
 ### along with Octave; see the file COPYING.  If not, write to the Free
 ### Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ### 02111-1307, USA.
 
-function grid (x)
+## usage: grid ("on" | "off")
+##
+## Turn grid lines on or off for plotting.
+##
+## If the argument is omitted, "on" is assumed.
+##
+## See also: plot, semilogx, semilogy, loglog, polar, mesh, contour,
+##           bar, stairs, gplot, gsplot, replot, xlabel, ylabel, title 
 
-  ## usage: grid ("on" | "off")
-  ##
-  ## Turn grid lines on or off for plotting.
-  ##
-  ## If the argument is omitted, "on" is assumed.
-  ##
-  ## See also: plot, semilogx, semilogy, loglog, polar, mesh, contour,
-  ##           bar, stairs, gplot, gsplot, replot, xlabel, ylabel, title 
+function grid (x)
 
   if (nargin == 0)
     set grid;
   elseif (nargin == 1)
     if (isstr (x))
       if (strcmp ("off", x))
         set nogrid;
       elseif (strcmp ("on", x))
diff --git a/scripts/plot/hist.m b/scripts/plot/hist.m
--- a/scripts/plot/hist.m
+++ b/scripts/plot/hist.m
@@ -12,38 +12,38 @@
 ### MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ### General Public License for more details.
 ###
 ### You should have received a copy of the GNU General Public License
 ### along with Octave; see the file COPYING.  If not, write to the Free
 ### Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ### 02111-1307, USA.
 
-function [nn, xx] = hist (y, x)
+## usage: [NN, XX] = hist (Y, X)  or  hist (Y, X)
+##
+## Produce histogram counts or plots.
+##
+## With one vector input argument, plot a histogram of the values with
+## 10 bins.  The range of the histogram bins is determined by the range
+## of the data.
+##
+## Given a second scalar argument, use that as the number of bins.
+##
+## Given a second vector argument, use that as the centers of the bins,
+## with the width of the bins determened from the adjacent values in
+## the vector.
+##
+## Extreme values are lumped in the first and last bins.
+##
+## With two output arguments, produce the values NN and XX such that
+## bar (XX, NN) will plot the histogram.
+##
+## See also: bar
 
-  ## usage: [NN, XX] = hist (Y, X)  or  hist (Y, X)
-  ##
-  ## Produce histogram counts or plots.
-  ##
-  ## With one vector input argument, plot a histogram of the values with
-  ## 10 bins.  The range of the histogram bins is determined by the range
-  ## of the data.
-  ##
-  ## Given a second scalar argument, use that as the number of bins.
-  ##
-  ## Given a second vector argument, use that as the centers of the bins,
-  ## with the width of the bins determened from the adjacent values in
-  ## the vector.
-  ##
-  ## Extreme values are lumped in the first and last bins.
-  ##
-  ## With two output arguments, produce the values NN and XX such that
-  ## bar (XX, NN) will plot the histogram.
-  ##
-  ## See also: bar
+function [nn, xx] = hist (y, x)
 
   if (nargin < 1 || nargin > 2)
     usage ("[nn, xx] = hist (y, x)");
   endif
     
   if (is_vector (y))
     max_val = max (y);
     min_val = min (y);
diff --git a/scripts/plot/loglog.m b/scripts/plot/loglog.m
--- a/scripts/plot/loglog.m
+++ b/scripts/plot/loglog.m
@@ -12,29 +12,29 @@
 ### MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ### General Public License for more details.
 ###
 ### You should have received a copy of the GNU General Public License
 ### along with Octave; see the file COPYING.  If not, write to the Free
 ### Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ### 02111-1307, USA.
 
-function loglog (...)
+## usage: loglog (x, y)
+##        loglog (x1, y1, x2, y2, ...)
+##        loglog (x, y, fmt)
+##
+## Make a 2D plot of y versus x using a log scale for the x axis. 
+##
+## See the help message for the plot command for a description of how
+## the arguments are interpreted. 
+##
+## See also: plot, semilogy, loglog, polar, mesh, contour, bar, stairs,
+##           gplot, gsplot, replot, xlabel, ylabel, title 
 
-  ## usage: loglog (x, y)
-  ##        loglog (x1, y1, x2, y2, ...)
-  ##        loglog (x, y, fmt)
-  ##
-  ## Make a 2D plot of y versus x using a log scale for the x axis. 
-  ##
-  ## See the help message for the plot command for a description of how
-  ## the arguments are interpreted. 
-  ##
-  ## See also: plot, semilogy, loglog, polar, mesh, contour, bar, stairs,
-  ##           gplot, gsplot, replot, xlabel, ylabel, title 
+function loglog (...)
 
   set logscale x;
   set logscale y;
   set nopolar;
 
   plot_int ("loglog", all_va_args);
 
 endfunction
diff --git a/scripts/plot/mesh.m b/scripts/plot/mesh.m
--- a/scripts/plot/mesh.m
+++ b/scripts/plot/mesh.m
@@ -12,28 +12,28 @@
 ### MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ### General Public License for more details.
 ###
 ### You should have received a copy of the GNU General Public License
 ### along with Octave; see the file COPYING.  If not, write to the Free
 ### Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ### 02111-1307, USA.
 
-function mesh (x, y, z)
+## usage: mesh (x, y, z)
+##
+## Surface plot.  If x, y, and z are matrices with the same dimensions,
+## then corresponding elements represent vertices of the plot.  If x and
+## y are vectors, then a typical vertex is (x(j), y(i), z(i,j)).  Thus,
+## columns of z correspond to different x values and rows of z correspond
+## to different y values.
+##
+## See also: plot, semilogx, semilogy, loglog, polar, meshgrid, meshdom, 
+##           contour, bar, stairs, gplot, gsplot, replot, xlabel, ylabel, title 
 
-  ## usage: mesh (x, y, z)
-  ##
-  ## Surface plot.  If x, y, and z are matrices with the same dimensions,
-  ## then corresponding elements represent vertices of the plot.  If x and
-  ## y are vectors, then a typical vertex is (x(j), y(i), z(i,j)).  Thus,
-  ## columns of z correspond to different x values and rows of z correspond
-  ## to different y values.
-  ##
-  ## See also: plot, semilogx, semilogy, loglog, polar, meshgrid, meshdom, 
-  ##           contour, bar, stairs, gplot, gsplot, replot, xlabel, ylabel, title 
+function mesh (x, y, z)
 
   if (nargin == 1)
     z = x;
     if (is_matrix (z))
       set hidden3d;
       set data style lines;
       set surface;
       set nocontour;
diff --git a/scripts/plot/meshdom.m b/scripts/plot/meshdom.m
--- a/scripts/plot/meshdom.m
+++ b/scripts/plot/meshdom.m
@@ -12,27 +12,27 @@
 ### MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ### General Public License for more details.
 ###
 ### You should have received a copy of the GNU General Public License
 ### along with Octave; see the file COPYING.  If not, write to the Free
 ### Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ### 02111-1307, USA.
 
-function [xx, yy] = meshdom (x, y)
+## usage: [xx, yy] = meshdom (x, y)
+##
+## Given vectors of x and y coordinates, return two matrices
+## corresponding to the x and y coordinates of the mesh.
+##
+## See the file sombrero.m for an example of using mesh and meshdom.
+##
+## See also: plot, semilogx, semilogy, loglog, polar, mesh, contour,
+##           bar, stairs, gplot, gsplot, replot, xlabel, ylabel, title 
 
-  ## usage: [xx, yy] = meshdom (x, y)
-  ##
-  ## Given vectors of x and y coordinates, return two matrices
-  ## corresponding to the x and y coordinates of the mesh.
-  ##
-  ## See the file sombrero.m for an example of using mesh and meshdom.
-  ##
-  ## See also: plot, semilogx, semilogy, loglog, polar, mesh, contour,
-  ##           bar, stairs, gplot, gsplot, replot, xlabel, ylabel, title 
+function [xx, yy] = meshdom (x, y)
 
   if (nargin == 2)
     if (is_vector (x) && is_vector (y))
       xlen = length (x);
       ylen = length (y);
       xx = zeros (ylen, xlen);
       yy = zeros (ylen, xlen);
       y = y (ylen:-1:1);
diff --git a/scripts/plot/meshgrid.m b/scripts/plot/meshgrid.m
--- a/scripts/plot/meshgrid.m
+++ b/scripts/plot/meshgrid.m
@@ -12,28 +12,28 @@
 ### MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ### General Public License for more details.
 ###
 ### You should have received a copy of the GNU General Public License
 ### along with Octave; see the file COPYING.  If not, write to the Free
 ### Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ### 02111-1307, USA.
 
-function [xx, yy] = meshgrid (x, y)
+## usage: [xx, yy] = meshgrid (x, y)
+##
+## Given vectors of x and y coordinates, return two matrices corresponding
+## to the x and y coordinates of a mesh.  The rows of xx are copies of x,
+## and the columns of yy are copies of y.
+##
+## [xx, yy] = meshgrid (x) is an abbreviation for [xx, yy] = meshgrid (x, x).
+##
+## See also: plot, semilogx, semilogy, loglog, polar, mesh, meshdom, contour,
+##           bar, stairs, gplot, gsplot, replot, xlabel, ylabel, title 
 
-  ## usage: [xx, yy] = meshgrid (x, y)
-  ##
-  ## Given vectors of x and y coordinates, return two matrices corresponding
-  ## to the x and y coordinates of a mesh.  The rows of xx are copies of x,
-  ## and the columns of yy are copies of y.
-  ##
-  ## [xx, yy] = meshgrid (x) is an abbreviation for [xx, yy] = meshgrid (x, x).
-  ##
-  ## See also: plot, semilogx, semilogy, loglog, polar, mesh, meshdom, contour,
-  ##           bar, stairs, gplot, gsplot, replot, xlabel, ylabel, title 
+function [xx, yy] = meshgrid (x, y)
 
   if (nargin == 1)
     y = x;
   endif
   if (nargin > 0 && nargin < 3)
     if (is_vector (x) && is_vector (y))
       xlen = length (x);
       ylen = length (y);
diff --git a/scripts/plot/mplot.m b/scripts/plot/mplot.m
--- a/scripts/plot/mplot.m
+++ b/scripts/plot/mplot.m
@@ -12,30 +12,30 @@
 ### MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ### General Public License for more details.
 ###
 ### You should have received a copy of the GNU General Public License
 ### along with Octave; see the file COPYING.  If not, write to the Free
 ### Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ### 02111-1307, USA.
 
-function mplot (...)
+## usage: mplot (x, y)
+##        mplot (x1, y1, x2, y2, ...)
+##        mplot (x, y, fmt)
+##
+## This is a modified version of plot() command to work with
+## multiplot version of gnuplot to plot multiple plots per page.
+## This plot version automatically updates the plot position to
+## next plot position after making the plot in the given subplot
+## position.
+##
+## See command plot() for the various options to this command
+## as this is just mulitplot version of the same command.
 
-  ## usage: mplot (x, y)
-  ##        mplot (x1, y1, x2, y2, ...)
-  ##        mplot (x, y, fmt)
-  ##
-  ## This is a modified version of plot() command to work with
-  ## multiplot version of gnuplot to plot multiple plots per page.
-  ## This plot version automatically updates the plot position to
-  ## next plot position after making the plot in the given subplot
-  ## position.
-  ##
-  ## See command plot() for the various options to this command
-  ## as this is just mulitplot version of the same command.
+function mplot (...)
 
 
   ## Written by Vinayak Dutt, Dutt.Vinayak@mayo.EDU
 
   if (! gnuplot_has_multiplot)
     error ("mplot: gnuplot does not appear to support this feature");
   endif
 
diff --git a/scripts/plot/multiplot.m b/scripts/plot/multiplot.m
--- a/scripts/plot/multiplot.m
+++ b/scripts/plot/multiplot.m
@@ -12,28 +12,28 @@
 ### MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ### General Public License for more details.
 ###
 ### You should have received a copy of the GNU General Public License
 ### along with Octave; see the file COPYING.  If not, write to the Free
 ### Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ### 02111-1307, USA.
 
-function multiplot (xn, yn)
+## usage: multiplot (xn, yn)
+##
+## Sets and resets multiplot mode
+##
+## If multiplot(0,0) then it will close multiplot mode and and if
+## arguments are non-zero, then it will set up multiplot mode with
+## xn,yn subplots along x and y axes. 
+##
+## NOTE: this will work only with gnuplot installed with
+##       multiplot patch
 
-  ## usage: multiplot (xn, yn)
-  ##
-  ## Sets and resets multiplot mode
-  ##
-  ## If multiplot(0,0) then it will close multiplot mode and and if
-  ## arguments are non-zero, then it will set up multiplot mode with
-  ## xn,yn subplots along x and y axes. 
-  ##
-  ## NOTE: this will work only with gnuplot installed with
-  ##       multiplot patch
+function multiplot (xn, yn)
 
   ## Written by Vinayak Dutt, Dutt.Vinayak@mayo.EDU  3 Jul 95 
 
   if (! gnuplot_has_multiplot)
     error ("multiplot: gnuplot does not appear to support this feature");
   endif
     
   ## global variables to keep track of multiplot options
diff --git a/scripts/plot/oneplot.m b/scripts/plot/oneplot.m
--- a/scripts/plot/oneplot.m
+++ b/scripts/plot/oneplot.m
@@ -12,25 +12,25 @@
 ### MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ### General Public License for more details.
 ###
 ### You should have received a copy of the GNU General Public License
 ### along with Octave; see the file COPYING.  If not, write to the Free
 ### Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ### 02111-1307, USA.
 
-function oneplot ()
+## usage: oneplot 
+##
+## NOTE: this will work only with gnuplot installed with
+##       multiplot patch
+##
+## Switches from multiplot (if in  multiplot mode) to single plot
+## mode
 
-  ## usage: oneplot 
-  ##
-  ## NOTE: this will work only with gnuplot installed with
-  ##       multiplot patch
-  ##
-  ## Switches from multiplot (if in  multiplot mode) to single plot
-  ## mode
+function oneplot ()
 
   ## Written by Vinayak Dutt, Dutt.Vinayak@mayo.EDU  3 Jul 95 
 
   if (! gnuplot_has_multiplot)
     error ("oneplot: gnuplot does not appear to support this feature");
   endif
     
   global multiplot_mode
diff --git a/scripts/plot/plot.m b/scripts/plot/plot.m
--- a/scripts/plot/plot.m
+++ b/scripts/plot/plot.m
@@ -12,60 +12,60 @@
 ### MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ### General Public License for more details.
 ###
 ### You should have received a copy of the GNU General Public License
 ### along with Octave; see the file COPYING.  If not, write to the Free
 ### Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ### 02111-1307, USA.
 
-function plot (...)
+## usage: plot (x, y)
+##        plot (x1, y1, x2, y2, ...)
+##        plot (x, y, fmt)
+##
+## If the first argument is a vector and the second is a matrix, the
+## the vector is plotted versus the columns (or rows) of the matrix.
+## (using whichever combination matches, with columns tried first.)
+##
+## If the first argument is a matrix and the second is a vector, the
+## the columns (or rows) of the matrix are plotted versus the vector.
+## (using whichever combination matches, with columns tried first.)
+##
+## If both arguments are vectors, the elements of y are plotted versus
+## the elements of x.
+##
+## If both arguments are matrices, the columns of y are plotted versus
+## the columns of x.  In this case, both matrices must have the same
+## number of rows and columns and no attempt is made to transpose the
+## arguments to make the number of rows match.
+##
+## If both arguments are scalars, a single point is plotted.
+##
+## If only one argument is given, it is taken as the set of y
+## coordinates and the x coordinates are taken to be the indices of the
+## elements, starting with 1.
+##
+## To see possible options for FMT please see plot_opt.
+##
+## Examples:
+##
+##   plot (x, y, "@12", x, y2, x, y3, "4", x, y4, "+")
+##
+##     y will be plotted with points of type 2 ("+") and color 1 (red).
+##     y2 will be plotted with lines.
+##     y3 will be plotted with lines of color 4.
+##     y4 will be plotted with points which are "+"s.
+##
+##   plot (b, "*")
+##
+##     b will be plotted with points of type "*".
+##
+## See also: semilogx, semilogy, loglog, polar, mesh, contour, plot_opt
+##           bar, stairs, gplot, gsplot, replot, xlabel, ylabel, title 
 
-  ## usage: plot (x, y)
-  ##        plot (x1, y1, x2, y2, ...)
-  ##        plot (x, y, fmt)
-  ##
-  ## If the first argument is a vector and the second is a matrix, the
-  ## the vector is plotted versus the columns (or rows) of the matrix.
-  ## (using whichever combination matches, with columns tried first.)
-  ##
-  ## If the first argument is a matrix and the second is a vector, the
-  ## the columns (or rows) of the matrix are plotted versus the vector.
-  ## (using whichever combination matches, with columns tried first.)
-  ##
-  ## If both arguments are vectors, the elements of y are plotted versus
-  ## the elements of x.
-  ##
-  ## If both arguments are matrices, the columns of y are plotted versus
-  ## the columns of x.  In this case, both matrices must have the same
-  ## number of rows and columns and no attempt is made to transpose the
-  ## arguments to make the number of rows match.
-  ##
-  ## If both arguments are scalars, a single point is plotted.
-  ##
-  ## If only one argument is given, it is taken as the set of y
-  ## coordinates and the x coordinates are taken to be the indices of the
-  ## elements, starting with 1.
-  ##
-  ## To see possible options for FMT please see plot_opt.
-  ##
-  ## Examples:
-  ##
-  ##   plot (x, y, "@12", x, y2, x, y3, "4", x, y4, "+")
-  ##
-  ##     y will be plotted with points of type 2 ("+") and color 1 (red).
-  ##     y2 will be plotted with lines.
-  ##     y3 will be plotted with lines of color 4.
-  ##     y4 will be plotted with points which are "+"s.
-  ##
-  ##   plot (b, "*")
-  ##
-  ##     b will be plotted with points of type "*".
-  ##
-  ## See also: semilogx, semilogy, loglog, polar, mesh, contour, plot_opt
-  ##           bar, stairs, gplot, gsplot, replot, xlabel, ylabel, title 
+function plot (...)
 
   set nologscale;
   set nopolar;
 
   plot_int ("plot", all_va_args);
 
 endfunction
diff --git a/scripts/plot/plot_border.m b/scripts/plot/plot_border.m
--- a/scripts/plot/plot_border.m
+++ b/scripts/plot/plot_border.m
@@ -12,36 +12,36 @@
 ### MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ### General Public License for more details.
 ###
 ### You should have received a copy of the GNU General Public License
 ### along with Octave; see the file COPYING.  If not, write to the Free
 ### Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ### 02111-1307, USA.
 
-function plot_border (...)
+## usage: plot_border (...)
+##
+## NOTE: this will work only with gnuplot installed with
+##       multiplot patch
+##
+## Multiple arguments allowed to specify the sides on which the border
+## is shown. allowed strings: 
+##
+## allowed input strings:
+##
+##  "blank", "BLANK", "b", "B",   --->  No borders displayed
+##    "all",   "ALL", "a", "A",   ---> All borders displayed
+##  "north", "NORTH", "n", "N",   ---> North Border
+##  "south", "SOUTH", "s", "S",   ---> South Border
+##   "east",  "EAST", "e", "E",   --->  East Border
+##   "west",  "WEST", "w", "W",   --->  West Border
+##
+## Without any arguments, turns borders off.
 
-  ## usage: plot_border (...)
-  ##
-  ## NOTE: this will work only with gnuplot installed with
-  ##       multiplot patch
-  ##
-  ## Multiple arguments allowed to specify the sides on which the border
-  ## is shown. allowed strings: 
-  ##
-  ## allowed input strings:
-  ##
-  ##  "blank", "BLANK", "b", "B",   --->  No borders displayed
-  ##    "all",   "ALL", "a", "A",   ---> All borders displayed
-  ##  "north", "NORTH", "n", "N",   ---> North Border
-  ##  "south", "SOUTH", "s", "S",   ---> South Border
-  ##   "east",  "EAST", "e", "E",   --->  East Border
-  ##   "west",  "WEST", "w", "W",   --->  West Border
-  ##
-  ## Without any arguments, turns borders off.
+function plot_border (...)
 
   ## Written by Vinayak Dutt, Dutt.Vinayak@mayo.EDU  3 Jul 95 
 
   if (! gnuplot_has_multiplot)
     error ("plot_border: gnuplot does not appear to support this feature");
   endif
     
   south = 0;
diff --git a/scripts/plot/polar.m b/scripts/plot/polar.m
--- a/scripts/plot/polar.m
+++ b/scripts/plot/polar.m
@@ -12,26 +12,26 @@
 ### MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ### General Public License for more details.
 ###
 ### You should have received a copy of the GNU General Public License
 ### along with Octave; see the file COPYING.  If not, write to the Free
 ### Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ### 02111-1307, USA.
 
-function polar (x1, x2, fmt)
+## usage: polar (theta, rho, fmt)
+##
+## Make a 2D plot given polar the coordinates theta and rho.
+##
+## The optional third argument specifies the line type.
+##
+## See also: plot, semilogx, semilogy, loglog, mesh, contour, bar,
+##           stairs, gplot, gsplot, replot, xlabel, ylabel, title 
 
-  ## usage: polar (theta, rho, fmt)
-  ##
-  ## Make a 2D plot given polar the coordinates theta and rho.
-  ##
-  ## The optional third argument specifies the line type.
-  ##
-  ## See also: plot, semilogx, semilogy, loglog, mesh, contour, bar,
-  ##           stairs, gplot, gsplot, replot, xlabel, ylabel, title 
+function polar (x1, x2, fmt)
 
   set nologscale;
   set nopolar;
 
   if (nargin == 3)
     if (isstr (fmt))
       fmt = plot_opt ("polar", fmt);
     else
diff --git a/scripts/plot/semilogx.m b/scripts/plot/semilogx.m
--- a/scripts/plot/semilogx.m
+++ b/scripts/plot/semilogx.m
@@ -12,29 +12,29 @@
 ### MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ### General Public License for more details.
 ###
 ### You should have received a copy of the GNU General Public License
 ### along with Octave; see the file COPYING.  If not, write to the Free
 ### Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ### 02111-1307, USA.
 
-function semilogx (...)
+## usage: semilogx (x, y)
+##        semilogx (x1, y1, x2, y2, ...)
+##        semilogx (x, y, fmt)
+##
+## Make a 2D plot of y versus x using a log scale for the x axis. 
+##
+## See the help message for the plot command for a description of how
+## the arguments are interpreted. 
+##
+## See also: plot, semilogy, loglog, polar, mesh, contour, bar, stairs,
+##           gplot, gsplot, replot, xlabel, ylabel, title 
 
-  ## usage: semilogx (x, y)
-  ##        semilogx (x1, y1, x2, y2, ...)
-  ##        semilogx (x, y, fmt)
-  ##
-  ## Make a 2D plot of y versus x using a log scale for the x axis. 
-  ##
-  ## See the help message for the plot command for a description of how
-  ## the arguments are interpreted. 
-  ##
-  ## See also: plot, semilogy, loglog, polar, mesh, contour, bar, stairs,
-  ##           gplot, gsplot, replot, xlabel, ylabel, title 
+function semilogx (...)
 
   set logscale x;
   set nologscale y;
   set nopolar;
 
   plot_int ("semilogx", all_va_args);
 
 endfunction
diff --git a/scripts/plot/semilogy.m b/scripts/plot/semilogy.m
--- a/scripts/plot/semilogy.m
+++ b/scripts/plot/semilogy.m
@@ -12,29 +12,29 @@
 ### MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ### General Public License for more details.
 ###
 ### You should have received a copy of the GNU General Public License
 ### along with Octave; see the file COPYING.  If not, write to the Free
 ### Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ### 02111-1307, USA.
 
-function semilogy (...)
+## usage: semilogy (x, y)
+##        semilogy (x1, y1, x2, y2, ...)
+##        semilogy (x, y, fmt)
+##
+## Make a 2D plot of y versus x using a log scale for the x axis. 
+##
+## See the help message for the plot command for a description of how
+## the arguments are interpreted. 
+##
+## See also: plot, semilogx, loglog, polar, mesh, contour, bar, stairs,
+##           gplot, gsplot, replot, xlabel, ylabel, title 
 
-  ## usage: semilogy (x, y)
-  ##        semilogy (x1, y1, x2, y2, ...)
-  ##        semilogy (x, y, fmt)
-  ##
-  ## Make a 2D plot of y versus x using a log scale for the x axis. 
-  ##
-  ## See the help message for the plot command for a description of how
-  ## the arguments are interpreted. 
-  ##
-  ## See also: plot, semilogx, loglog, polar, mesh, contour, bar, stairs,
-  ##           gplot, gsplot, replot, xlabel, ylabel, title 
+function semilogy (...)
 
   set nologscale x;
   set logscale y;
   set nopolar;
 
   plot_int ("semilogy", all_va_args);
 
 endfunction
diff --git a/scripts/plot/shg.m b/scripts/plot/shg.m
--- a/scripts/plot/shg.m
+++ b/scripts/plot/shg.m
@@ -12,25 +12,25 @@
 ### MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ### General Public License for more details.
 ###
 ### You should have received a copy of the GNU General Public License
 ### along with Octave; see the file COPYING.  If not, write to the Free
 ### Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ### 02111-1307, USA.
 
-function shg ()
+## usage: shg
+##
+## Show the graph window.  Currently, this is the same as executing
+## replot without any arguments.
+##
+## See also: plot, semilogx, semilogy, loglog, polar, mesh, contour,
+##           bar, stairs, gplot, gsplot, replot, xlabel, ylabel
 
-  ## usage: shg
-  ##
-  ## Show the graph window.  Currently, this is the same as executing
-  ## replot without any arguments.
-  ##
-  ## See also: plot, semilogx, semilogy, loglog, polar, mesh, contour,
-  ##           bar, stairs, gplot, gsplot, replot, xlabel, ylabel
+function shg ()
 
   if (nargin != 0)
     warning ("shg: ignoring extra arguments");
   endif
 
   replot
 
 endfunction
diff --git a/scripts/plot/sombrero.m b/scripts/plot/sombrero.m
--- a/scripts/plot/sombrero.m
+++ b/scripts/plot/sombrero.m
@@ -12,24 +12,24 @@
 ### MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ### General Public License for more details.
 ###
 ### You should have received a copy of the GNU General Public License
 ### along with Octave; see the file COPYING.  If not, write to the Free
 ### Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ### 02111-1307, USA.
 
-function sombrero (n)
+## usage: sombrero (n)
+##
+## Draw a `sombrero' in three dimensions using n grid lines.  The
+## function plotted is
+##
+##   z = sin (x^2 + y^2) / (x^2 + y^2);
 
-  ## usage: sombrero (n)
-  ##
-  ## Draw a `sombrero' in three dimensions using n grid lines.  The
-  ## function plotted is
-  ##
-  ##   z = sin (x^2 + y^2) / (x^2 + y^2);
+function sombrero (n)
 
   if (nargin != 1)
     usage ("sombrero (n)");
   endif
 
   x = y = linspace (-8, 8, n)';
   [xx, yy] = meshdom (x, y);
   r = sqrt (xx .^ 2 + yy .^ 2) + eps;
diff --git a/scripts/plot/stairs.m b/scripts/plot/stairs.m
--- a/scripts/plot/stairs.m
+++ b/scripts/plot/stairs.m
@@ -12,39 +12,39 @@
 ### MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ### General Public License for more details.
 ###
 ### You should have received a copy of the GNU General Public License
 ### along with Octave; see the file COPYING.  If not, write to the Free
 ### Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ### 02111-1307, USA.
 
-function [xs, ys] = stairs (x, y)
+## usage: [xs, ys] = stairs (x, y)
+##
+## Given two vectors of x-y data, stairs produces a `stairstep' plot.
+##
+## If only one argument is given, it is taken as a vector of y-values
+## and the x coordiates are taken to be the indices of the elements.
+##
+## If two output arguments are specified, the data are generated but
+## not plotted.  For example,
+##
+##   stairs (x, y);
+##
+## and
+##
+##   [xs, ys] = stairs (x, y);
+##   plot (xs, ys);
+##
+## are equivalent.
+##
+## See also: plot, semilogx, semilogy, loglog, polar, mesh, contour,
+##           bar, gplot, gsplot, replot, xlabel, ylabel, title 
 
-  ## usage: [xs, ys] = stairs (x, y)
-  ##
-  ## Given two vectors of x-y data, stairs produces a `stairstep' plot.
-  ##
-  ## If only one argument is given, it is taken as a vector of y-values
-  ## and the x coordiates are taken to be the indices of the elements.
-  ##
-  ## If two output arguments are specified, the data are generated but
-  ## not plotted.  For example,
-  ##
-  ##   stairs (x, y);
-  ##
-  ## and
-  ##
-  ##   [xs, ys] = stairs (x, y);
-  ##   plot (xs, ys);
-  ##
-  ## are equivalent.
-  ##
-  ## See also: plot, semilogx, semilogy, loglog, polar, mesh, contour,
-  ##           bar, gplot, gsplot, replot, xlabel, ylabel, title 
+function [xs, ys] = stairs (x, y)
 
 
   if (nargin == 1)
     if (is_vector (x))
       len = 2 * length (x);
       tmp_xs = tmp_ys = zeros (len, 1);
       k = 0;
       for i = 1:2:len
diff --git a/scripts/plot/subplot.m b/scripts/plot/subplot.m
--- a/scripts/plot/subplot.m
+++ b/scripts/plot/subplot.m
@@ -12,53 +12,53 @@
 ### MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ### General Public License for more details.
 ###
 ### You should have received a copy of the GNU General Public License
 ### along with Octave; see the file COPYING.  If not, write to the Free
 ### Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ### 02111-1307, USA.
 
-function subplot (rows, columns, index)
+## usage: subplot (rows, columns, index)
+##        subplot (rcn)
+##
+## NOTE: this will work only with gnuplot installed with
+##       multiplot patch (or version 3.6 beta)
+##
+## Sets gnuplot in multiplot mode and plots in location
+## given by index (there are columns X rows subwindows)
+##
+## Input:
+##
+##   rows   : number of rows in subplot grid
+##   columns: number of columns in subplot grid
+##   index  : index of subplot where to make the next plot
+##
+## If only one arg, then it (crn) has to be three digit value
+## specifying the location in digit 1 (rows) and 2 (columns) and digit
+## 3 is the plot index
+##
+## The plot index runs row-wise,i.e., first all the columns in a row
+## are filled and then the next row is filled
+##
+## For example, plot with 4 X 2 grid, will have plot indices running as
+## follows:
+##
+##   -----------------------------------
+##   |        |       |       |        |
+##   |    1   |    2  |    3  |    4   |
+##   |        |       |       |        |
+##   -----------------------------------
+##   |        |       |       |        |
+##   |    5   |    6  |    7  |    8   |
+##   |        |       |       |        |
+##   -----------------------------------
+##
 
-  ## usage: subplot (rows, columns, index)
-  ##        subplot (rcn)
-  ##
-  ## NOTE: this will work only with gnuplot installed with
-  ##       multiplot patch (or version 3.6 beta)
-  ##
-  ## Sets gnuplot in multiplot mode and plots in location
-  ## given by index (there are columns X rows subwindows)
-  ##
-  ## Input:
-  ##
-  ##   rows   : number of rows in subplot grid
-  ##   columns: number of columns in subplot grid
-  ##   index  : index of subplot where to make the next plot
-  ##
-  ## If only one arg, then it (crn) has to be three digit value
-  ## specifying the location in digit 1 (rows) and 2 (columns) and digit
-  ## 3 is the plot index
-  ##
-  ## The plot index runs row-wise,i.e., first all the columns in a row
-  ## are filled and then the next row is filled
-  ##
-  ## For example, plot with 4 X 2 grid, will have plot indices running as
-  ## follows:
-  ##
-  ##   -----------------------------------
-  ##   |        |       |       |        |
-  ##   |    1   |    2  |    3  |    4   |
-  ##   |        |       |       |        |
-  ##   -----------------------------------
-  ##   |        |       |       |        |
-  ##   |    5   |    6  |    7  |    8   |
-  ##   |        |       |       |        |
-  ##   -----------------------------------
-  ##
+function subplot (rows, columns, index)
 
   ## Written by Vinayak Dutt, Dutt.Vinayak@mayo.EDU
 
   if (! gnuplot_has_multiplot)
     error ("subplot: gnuplot does not appear to support this feature");
   endif
 
   ## global variables to keep track of multiplot options
diff --git a/scripts/plot/subwindow.m b/scripts/plot/subwindow.m
--- a/scripts/plot/subwindow.m
+++ b/scripts/plot/subwindow.m
@@ -12,26 +12,26 @@
 ### MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ### General Public License for more details.
 ###
 ### You should have received a copy of the GNU General Public License
 ### along with Octave; see the file COPYING.  If not, write to the Free
 ### Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ### 02111-1307, USA.
 
-function subwindow (xn, yn)
+## usage: subwindow (xn, yn)
+##
+## NOTE: this will work only with gnuplot installed with
+##       multiplot patch
+##
+## Sets subwindow position in multiplot mode for next plot. The
+## multiplot mode has to be previously initialized using multiplot()
+## command, else this command just becomes an aliad to multiplot()
 
-  ## usage: subwindow (xn, yn)
-  ##
-  ## NOTE: this will work only with gnuplot installed with
-  ##       multiplot patch
-  ##
-  ## Sets subwindow position in multiplot mode for next plot. The
-  ## multiplot mode has to be previously initialized using multiplot()
-  ## command, else this command just becomes an aliad to multiplot()
+function subwindow (xn, yn)
 
   ## Written by Vinayak Dutt, Dutt.Vinayak@mayo.EDU  3 Jul 95 
 
   if (! gnuplot_has_multiplot)
     error ("subwindow: gnuplot does not appear to support this feature");
   endif
 
   ## global variables to keep track of multiplot options
diff --git a/scripts/plot/title.m b/scripts/plot/title.m
--- a/scripts/plot/title.m
+++ b/scripts/plot/title.m
@@ -12,25 +12,25 @@
 ### MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ### General Public License for more details.
 ###
 ### You should have received a copy of the GNU General Public License
 ### along with Octave; see the file COPYING.  If not, write to the Free
 ### Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ### 02111-1307, USA.
 
-function title (text)
+## usage: title (text)
+##
+## Defines a title for a plot.  The title will appear the next time a
+## plot is displayed. 
+##
+## See also: plot, semilogx, semilogy, loglog, polar, mesh, contour,
+##           bar, stairs, gplot, gsplot, replot, xlabel, ylabel
 
-  ## usage: title (text)
-  ##
-  ## Defines a title for a plot.  The title will appear the next time a
-  ## plot is displayed. 
-  ##
-  ## See also: plot, semilogx, semilogy, loglog, polar, mesh, contour,
-  ##           bar, stairs, gplot, gsplot, replot, xlabel, ylabel
+function title (text)
 
   if (nargin != 1)
     usage ("title (text)");
   endif
 
   if (isstr (text))
     command = sprintf ("set title \"%s\"", text);
     eval (command);
diff --git a/scripts/plot/top_title.m b/scripts/plot/top_title.m
--- a/scripts/plot/top_title.m
+++ b/scripts/plot/top_title.m
@@ -12,24 +12,24 @@
 ### MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ### General Public License for more details.
 ###
 ### You should have received a copy of the GNU General Public License
 ### along with Octave; see the file COPYING.  If not, write to the Free
 ### Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ### 02111-1307, USA.
 
-function top_title (text)
+## usage: top_title (text)
+##
+## NOTE: this will work only with gnuplot installed with
+##       multiplot patch
+##
+## makes a title with text "text" at the top of the plot 
 
-  ## usage: top_title (text)
-  ##
-  ## NOTE: this will work only with gnuplot installed with
-  ##       multiplot patch
-  ##
-  ## makes a title with text "text" at the top of the plot 
+function top_title (text)
 
   ## Written by Vinayak Dutt, Dutt.Vinayak@mayo.EDU  3 Jul 95 
 
   if (! gnuplot_has_multiplot)
     error ("top_title: gnuplot does not appear to support this feature");
   endif
 
   if (nargin != 1)
diff --git a/scripts/plot/xlabel.m b/scripts/plot/xlabel.m
--- a/scripts/plot/xlabel.m
+++ b/scripts/plot/xlabel.m
@@ -12,25 +12,25 @@
 ### MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ### General Public License for more details.
 ###
 ### You should have received a copy of the GNU General Public License
 ### along with Octave; see the file COPYING.  If not, write to the Free
 ### Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ### 02111-1307, USA.
 
-function xlabel (text)
+## usage: xlabel (text)
+##
+## Defines a label for the x-axis of a plot.  The label will appear the
+## next time a plot is displayed.
+##
+## See also: plot, semilogx, semilogy, loglog, polar, mesh, contour,
+##           bar, stairs, gplot, gsplot, replot, ylabel, title
 
-  ## usage: xlabel (text)
-  ##
-  ## Defines a label for the x-axis of a plot.  The label will appear the
-  ## next time a plot is displayed.
-  ##
-  ## See also: plot, semilogx, semilogy, loglog, polar, mesh, contour,
-  ##           bar, stairs, gplot, gsplot, replot, ylabel, title
+function xlabel (text)
 
   if (nargin != 1)
     usage ("xlabel (text)");
   endif
 
   if (isstr (text))
     command = sprintf ("set xlabel \"%s\"", text);
     eval (command);
diff --git a/scripts/plot/ylabel.m b/scripts/plot/ylabel.m
--- a/scripts/plot/ylabel.m
+++ b/scripts/plot/ylabel.m
@@ -12,25 +12,25 @@
 ### MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ### General Public License for more details.
 ###
 ### You should have received a copy of the GNU General Public License
 ### along with Octave; see the file COPYING.  If not, write to the Free
 ### Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ### 02111-1307, USA.
 
-function ylabel (text)
+## usage: ylabel (text)
+##
+## Defines a label for the y-axis of a plot.  The label will appear the
+## next time a plot is displayed.
+##
+## See also: plot, semilogx, semilogy, loglog, polar, mesh, contour,
+##           bar, stairs, gplot, gsplot, replot, xlabel, title
 
-  ## usage: ylabel (text)
-  ##
-  ## Defines a label for the y-axis of a plot.  The label will appear the
-  ## next time a plot is displayed.
-  ##
-  ## See also: plot, semilogx, semilogy, loglog, polar, mesh, contour,
-  ##           bar, stairs, gplot, gsplot, replot, xlabel, title
+function ylabel (text)
 
   if (nargin != 1)
     usage ("ylabel (text)");
   endif
 
   if (isstr (text))
     command = sprintf ("set ylabel \"%s\"", text);
     eval (command);
diff --git a/scripts/plot/zlabel.m b/scripts/plot/zlabel.m
--- a/scripts/plot/zlabel.m
+++ b/scripts/plot/zlabel.m
@@ -12,24 +12,24 @@
 ### MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ### General Public License for more details.
 ###
 ### You should have received a copy of the GNU General Public License
 ### along with Octave; see the file COPYING.  If not, write to the Free
 ### Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ### 02111-1307, USA.
 
-function zlabel (text)
+## usage: zlabel (text)
+##
+## Defines a label for the z-axis of a plot.  The label will appear the
+## next time a plot is displayed.
+##
+## See other plotting commands also.
 
-  ## usage: zlabel (text)
-  ##
-  ## Defines a label for the z-axis of a plot.  The label will appear the
-  ## next time a plot is displayed.
-  ##
-  ## See other plotting commands also.
+function zlabel (text)
 
   ## Written by Vinayak Dutt, Dutt.Vinayak@mayo.EDU  3 Jul 95 
 
   if (nargin != 1)
     usage ("zlabel (text)");
   endif
 
   if (isstr (text))
diff --git a/scripts/polynomial/compan.m b/scripts/polynomial/compan.m
--- a/scripts/polynomial/compan.m
+++ b/scripts/polynomial/compan.m
@@ -12,42 +12,42 @@
 ### MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ### General Public License for more details.
 ###
 ### You should have received a copy of the GNU General Public License
 ### along with Octave; see the file COPYING.  If not, write to the Free
 ### Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ### 02111-1307, USA.
 
-function A = compan (c)
+## usage: compan (c)
+##
+## Compute the companion matrix corresponding to polynomial vector c.
+##
+## In octave a polynomial is represented by it's coefficients (arranged
+## in descending order). For example a vector c of length n+1 corresponds
+## to the following nth order polynomial
+##
+##   p(x) = c(1) x^n + ... + c(n) x + c(n+1).
+##
+## The corresponding companion matrix is
+##         _                                                        _
+##        |  -c(2)/c(1)   -c(3)/c(1)  ...  -c(n)/c(1)  -c(n+1)/c(1)  |
+##        |       1            0      ...       0             0      |
+##        |       0            1      ...       0             0      |
+##    A = |       .            .   .            .             .      |
+##        |       .            .       .        .             .      |
+##        |       .            .           .    .             .      |
+##        |_      0            0      ...       1             0     _|
+##
+## The eigenvalues of the companion matrix are equal to the roots of the
+## polynomial.
+##
+## SEE ALSO: poly, roots, residue, conv, deconv, polyval, polyderiv, polyinteg
 
-  ## usage: compan (c)
-  ##
-  ## Compute the companion matrix corresponding to polynomial vector c.
-  ##
-  ## In octave a polynomial is represented by it's coefficients (arranged
-  ## in descending order). For example a vector c of length n+1 corresponds
-  ## to the following nth order polynomial
-  ##
-  ##   p(x) = c(1) x^n + ... + c(n) x + c(n+1).
-  ##
-  ## The corresponding companion matrix is
-  ##         _                                                        _
-  ##        |  -c(2)/c(1)   -c(3)/c(1)  ...  -c(n)/c(1)  -c(n+1)/c(1)  |
-  ##        |       1            0      ...       0             0      |
-  ##        |       0            1      ...       0             0      |
-  ##    A = |       .            .   .            .             .      |
-  ##        |       .            .       .        .             .      |
-  ##        |       .            .           .    .             .      |
-  ##        |_      0            0      ...       1             0     _|
-  ##
-  ## The eigenvalues of the companion matrix are equal to the roots of the
-  ## polynomial.
-  ##
-  ## SEE ALSO: poly, roots, residue, conv, deconv, polyval, polyderiv, polyinteg
+function A = compan (c)
 
   ## Written by Tony Richardson (amr@mpl.ucsd.edu) June 1994.
 
   if (nargin != 1)
     usage ("compan (vector)");
   endif
 
   if(is_matrix (c))
diff --git a/scripts/polynomial/conv.m b/scripts/polynomial/conv.m
--- a/scripts/polynomial/conv.m
+++ b/scripts/polynomial/conv.m
@@ -12,30 +12,30 @@
 ### MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ### General Public License for more details.
 ###
 ### You should have received a copy of the GNU General Public License
 ### along with Octave; see the file COPYING.  If not, write to the Free
 ### Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ### 02111-1307, USA.
 
+## usage: conv (a, b)
+##
+## Convolve two vectors.
+##
+## y = conv (a, b) returns a vector of length equal to length (a) +
+## length (b) -1.
+##
+## If a and b are polynomial coefficient vectors, conv returns the
+## coefficients of the product polynomial.
+##
+## SEE ALSO: deconv, poly, roots, residue, polyval, polyderiv, polyinteg 
+
 function y = conv (a, b)
   
-  ## usage: conv (a, b)
-  ##
-  ## Convolve two vectors.
-  ##
-  ## y = conv (a, b) returns a vector of length equal to length (a) +
-  ## length (b) -1.
-  ##
-  ## If a and b are polynomial coefficient vectors, conv returns the
-  ## coefficients of the product polynomial.
-  ##
-  ## SEE ALSO: deconv, poly, roots, residue, polyval, polyderiv, polyinteg 
-
   ## Written by Tony Richardson (amr@mpl.ucsd.edu) June 1994.
 
   if (nargin != 2)
     usage ("conv(a, b)");
   endif
 
   if (is_matrix (a) || is_matrix (b))
     error("conv: both arguments must be vectors");
diff --git a/scripts/polynomial/deconv.m b/scripts/polynomial/deconv.m
--- a/scripts/polynomial/deconv.m
+++ b/scripts/polynomial/deconv.m
@@ -12,31 +12,31 @@
 ### MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ### General Public License for more details.
 ###
 ### You should have received a copy of the GNU General Public License
 ### along with Octave; see the file COPYING.  If not, write to the Free
 ### Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ### 02111-1307, USA.
 
-function [b, r] = deconv (y, a)
+## usage: deconv (y, a)
+##
+## Deconvolve two vectors.
+##
+## [b, r] = deconv (y, a) solves for b and r such that 
+##    y = conv(a,b) + r
+##
+## If y and a are polynomial coefficient vectors, b will contain the
+## coefficients of the polynomial quotient and r will be a remander
+## polynomial of lowest order.
+##
+## SEE ALSO: conv, poly, roots, residue, polyval, polyderiv,
+## polyinteg 
 
-  ## usage: deconv (y, a)
-  ##
-  ## Deconvolve two vectors.
-  ##
-  ## [b, r] = deconv (y, a) solves for b and r such that 
-  ##    y = conv(a,b) + r
-  ##
-  ## If y and a are polynomial coefficient vectors, b will contain the
-  ## coefficients of the polynomial quotient and r will be a remander
-  ## polynomial of lowest order.
-  ##
-  ## SEE ALSO: conv, poly, roots, residue, polyval, polyderiv,
-  ## polyinteg 
+function [b, r] = deconv (y, a)
 
   ## Written by Tony Richardson (amr@mpl.ucsd.edu) June 1994.
 
   if (nargin != 2)
     usage ("deconv (y, a)");
   endif
 
   if (is_matrix (y) || is_matrix (a))
diff --git a/scripts/polynomial/poly.m b/scripts/polynomial/poly.m
--- a/scripts/polynomial/poly.m
+++ b/scripts/polynomial/poly.m
@@ -12,26 +12,26 @@
 ### MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ### General Public License for more details.
 ###
 ### You should have received a copy of the GNU General Public License
 ### along with Octave; see the file COPYING.  If not, write to the Free
 ### Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ### 02111-1307, USA.
 
-function y = poly (x)
+## usage: poly (x)
+##
+## If A is a square n-by-n matrix, poly (A) is the row vector of 
+## the coefficients of det (z * eye(n) - A), the characteristic
+## polynomial of A.
+##
+## If x is a vector, poly (x) is a vector of coefficients of the
+## polynomial whose roots are the elements of x.
 
-  ## usage: poly (x)
-  ##
-  ## If A is a square n-by-n matrix, poly (A) is the row vector of 
-  ## the coefficients of det (z * eye(n) - A), the characteristic
-  ## polynomial of A.
-  ##
-  ## If x is a vector, poly (x) is a vector of coefficients of the
-  ## polynomial whose roots are the elements of x.
+function y = poly (x)
 
   ## Written by KH (Kurt.Hornik@neuro.tuwien.ac.at) Dec 24, 1993.
 
   if (nargin != 1)
     usage ("poly (x)");
   endif
 
   m = min (size (x));
diff --git a/scripts/polynomial/polyder.m b/scripts/polynomial/polyder.m
--- a/scripts/polynomial/polyder.m
+++ b/scripts/polynomial/polyder.m
@@ -12,21 +12,21 @@
 ### MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ### General Public License for more details.
 ###
 ### You should have received a copy of the GNU General Public License
 ### along with Octave; see the file COPYING.  If not, write to the Free
 ### Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ### 02111-1307, USA.
 
-function q = polyder (p)
+## usage: polyder (p)
+##
+## SEE ALSO: polyderiv
 
-  ## usage: polyder (p)
-  ##
-  ## SEE ALSO: polyderiv
+function q = polyder (p)
 
   if (nargin == 1)
     q = polyderiv (p);
   else
     usage ("polyder (vector)");
   endif
 
 endfunction
diff --git a/scripts/polynomial/polyderiv.m b/scripts/polynomial/polyderiv.m
--- a/scripts/polynomial/polyderiv.m
+++ b/scripts/polynomial/polyderiv.m
@@ -12,25 +12,25 @@
 ### MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ### General Public License for more details.
 ###
 ### You should have received a copy of the GNU General Public License
 ### along with Octave; see the file COPYING.  If not, write to the Free
 ### Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ### 02111-1307, USA.
 
-function q = polyderiv (p)
+## usage: polyderiv (p)
+##
+## Returns the coefficients of the derivative of the polynomial whose
+## coefficients are given by vector p.
+##
+## SEE ALSO: poly, polyinteg, polyreduce, roots, conv, deconv, residue,
+##           filter, polyval, polyvalm
 
-  ## usage: polyderiv (p)
-  ##
-  ## Returns the coefficients of the derivative of the polynomial whose
-  ## coefficients are given by vector p.
-  ##
-  ## SEE ALSO: poly, polyinteg, polyreduce, roots, conv, deconv, residue,
-  ##           filter, polyval, polyvalm
+function q = polyderiv (p)
 
   ## Written by Tony Richardson (amr@mpl.ucsd.edu) June 1994.
 
   if (nargin != 1)
     usage ("polyderiv (vector)");
   endif
 
   if (is_matrix (p))
diff --git a/scripts/polynomial/polyfit.m b/scripts/polynomial/polyfit.m
--- a/scripts/polynomial/polyfit.m
+++ b/scripts/polynomial/polyfit.m
@@ -12,24 +12,24 @@
 ### MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ### General Public License for more details.
 ###
 ### You should have received a copy of the GNU General Public License
 ### along with Octave; see the file COPYING.  If not, write to the Free
 ### Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ### 02111-1307, USA.
 
+## usage:  polyfit (x, y, n)
+##
+## Returns the coefficients of a polynomial p(x) of degree n that
+## minimizes sumsq (p(x(i)) - y(i)), i.e., that best fits the data 
+## in the least squares sense.
+
 function p = polyfit (x, y, n)
   
-  ## usage:  polyfit (x, y, n)
-  ##
-  ## Returns the coefficients of a polynomial p(x) of degree n that
-  ## minimizes sumsq (p(x(i)) - y(i)), i.e., that best fits the data 
-  ## in the least squares sense.
-  
   ## Written by KH (Kurt.Hornik@ci.tuwien.ac.at) on Dec 13, 1994
   ## Copyright Dept of Statistics and Probability Theory TU Wien
   
   if (nargin != 3)
     usage ("polyfit (x, y, n)");
   endif
   
   if (! (is_vector (x) && is_vector (y) && size (x) == size (y)))
diff --git a/scripts/polynomial/polyinteg.m b/scripts/polynomial/polyinteg.m
--- a/scripts/polynomial/polyinteg.m
+++ b/scripts/polynomial/polyinteg.m
@@ -12,27 +12,27 @@
 ### MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ### General Public License for more details.
 ###
 ### You should have received a copy of the GNU General Public License
 ### along with Octave; see the file COPYING.  If not, write to the Free
 ### Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ### 02111-1307, USA.
 
-function p = polyinteg (p)
+## usage: polyinteg (p)
+##
+## Returns the coefficients of the integral the polynomial whose coefficients
+## are represented by the vector p.
+##
+## The constant of integration is zero.
+##
+## SEE ALSO: poly, polyderiv, polyreduce, roots, conv, deconv, residue,
+##           filter, polyval, polyvalm
 
-  ## usage: polyinteg (p)
-  ##
-  ## Returns the coefficients of the integral the polynomial whose coefficients
-  ## are represented by the vector p.
-  ##
-  ## The constant of integration is zero.
-  ##
-  ## SEE ALSO: poly, polyderiv, polyreduce, roots, conv, deconv, residue,
-  ##           filter, polyval, polyvalm
+function p = polyinteg (p)
 
   ## Written by Tony Richardson (amr@mpl.ucsd.edu) June 1994.
 
   if(nargin != 1)
     usage ("polyinteg (vector)");
   endif
 
   if (is_matrix (p))
diff --git a/scripts/polynomial/polyreduce.m b/scripts/polynomial/polyreduce.m
--- a/scripts/polynomial/polyreduce.m
+++ b/scripts/polynomial/polyreduce.m
@@ -12,25 +12,25 @@
 ### MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ### General Public License for more details.
 ###
 ### You should have received a copy of the GNU General Public License
 ### along with Octave; see the file COPYING.  If not, write to the Free
 ### Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ### 02111-1307, USA.
 
-function p = polyreduce (p)
+## usage: polyreduce(c)
+##
+## Reduces a polynomial coefficient vector to a minimum number of terms,
+## i.e. it strips off any leading zeros.
+##
+## SEE ALSO: poly, roots, conv, deconv, residue, filter, polyval, polyvalm,
+##           polyderiv, polyinteg
 
-  ## usage: polyreduce(c)
-  ##
-  ## Reduces a polynomial coefficient vector to a minimum number of terms,
-  ## i.e. it strips off any leading zeros.
-  ##
-  ## SEE ALSO: poly, roots, conv, deconv, residue, filter, polyval, polyvalm,
-  ##           polyderiv, polyinteg
+function p = polyreduce (p)
 
   ## Written by Tony Richardson (amr@mpl.ucsd.edu) June 1994.
 
   index = find (p == 0);
 
   if (length (index) != 0)
 
     index = find (index == 1:length (index));
diff --git a/scripts/polynomial/polyval.m b/scripts/polynomial/polyval.m
--- a/scripts/polynomial/polyval.m
+++ b/scripts/polynomial/polyval.m
@@ -12,35 +12,35 @@
 ### MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ### General Public License for more details.
 ###
 ### You should have received a copy of the GNU General Public License
 ### along with Octave; see the file COPYING.  If not, write to the Free
 ### Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ### 02111-1307, USA.
 
-function y = polyval (c, x)
+## usage: polyval (c, x)
+##
+## Evaluate a polynomial.
+## 
+## In octave, a polynomial is represented by it's coefficients (arranged
+## in descending order). For example a vector c of length n+1 corresponds
+## to the following nth order polynomial
+## 
+##   p(x) = c(1) x^n + ... + c(n) x + c(n+1).
+## 
+## polyval(c,x) will evaluate the polynomial at the specified value of x.
+## 
+## If x is a vector or matrix, the polynomial is evaluated at each of the
+## elements of x.
+## 
+## SEE ALSO: polyvalm, poly, roots, conv, deconv, residue, filter,
+##           polyderiv, polyinteg
 
-  ## usage: polyval (c, x)
-  ##
-  ## Evaluate a polynomial.
-  ## 
-  ## In octave, a polynomial is represented by it's coefficients (arranged
-  ## in descending order). For example a vector c of length n+1 corresponds
-  ## to the following nth order polynomial
-  ## 
-  ##   p(x) = c(1) x^n + ... + c(n) x + c(n+1).
-  ## 
-  ## polyval(c,x) will evaluate the polynomial at the specified value of x.
-  ## 
-  ## If x is a vector or matrix, the polynomial is evaluated at each of the
-  ## elements of x.
-  ## 
-  ## SEE ALSO: polyvalm, poly, roots, conv, deconv, residue, filter,
-  ##           polyderiv, polyinteg
+function y = polyval (c, x)
 
   ## Written by Tony Richardson (amr@mpl.ucsd.edu) June 1994.
 
   if (nargin != 2)
     usage ("polyval (c, x)");
   endif
 
   if(is_matrix (c))
diff --git a/scripts/polynomial/polyvalm.m b/scripts/polynomial/polyvalm.m
--- a/scripts/polynomial/polyvalm.m
+++ b/scripts/polynomial/polyvalm.m
@@ -12,36 +12,36 @@
 ### MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ### General Public License for more details.
 ###
 ### You should have received a copy of the GNU General Public License
 ### along with Octave; see the file COPYING.  If not, write to the Free
 ### Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ### 02111-1307, USA.
 
-function y = polyvalm (c, x)
+## usage: polyvalm (c, x)
+##
+## Evaluate a polynomial in the matrix sense.
+##
+## In octave, a polynomial is represented by it's coefficients (arranged
+## in descending order). For example a vector c of length n+1 corresponds
+## to the following nth order polynomial
+##
+##   p(x) = c(1) x^n + ... + c(n) x + c(n+1).
+##
+## polyvalm(c,X) will evaluate the polynomial in the matrix sense, i.e. matrix
+## multiplication is used instead of element by element multiplication as is
+## used in polyval.
+##
+## X must be a square matrix.
+##
+## SEE ALSO: polyval, poly, roots, conv, deconv, residue, filter,
+##           polyderiv, polyinteg
 
-  ## usage: polyvalm (c, x)
-  ##
-  ## Evaluate a polynomial in the matrix sense.
-  ##
-  ## In octave, a polynomial is represented by it's coefficients (arranged
-  ## in descending order). For example a vector c of length n+1 corresponds
-  ## to the following nth order polynomial
-  ##
-  ##   p(x) = c(1) x^n + ... + c(n) x + c(n+1).
-  ##
-  ## polyvalm(c,X) will evaluate the polynomial in the matrix sense, i.e. matrix
-  ## multiplication is used instead of element by element multiplication as is
-  ## used in polyval.
-  ##
-  ## X must be a square matrix.
-  ##
-  ## SEE ALSO: polyval, poly, roots, conv, deconv, residue, filter,
-  ##           polyderiv, polyinteg
+function y = polyvalm (c, x)
 
   ## Written by Tony Richardson (amr@mpl.ucsd.edu) June 1994.
 
   if(nargin != 2)
     usage ("polyvalm (c, x)");
   endif
 
   if (is_matrix (c))
diff --git a/scripts/polynomial/residue.m b/scripts/polynomial/residue.m
--- a/scripts/polynomial/residue.m
+++ b/scripts/polynomial/residue.m
@@ -12,62 +12,62 @@
 ### MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ### General Public License for more details.
 ###
 ### You should have received a copy of the GNU General Public License
 ### along with Octave; see the file COPYING.  If not, write to the Free
 ### Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ### 02111-1307, USA.
 
-function [r, p, k, e] = residue (b, a, toler)
+## usage: [r, p, k, e] = residue (b, a)
+##
+## If b and a are vectors of polynomial coefficients, then residue
+## calculates the partial fraction expansion corresponding to the
+## ratio of the two polynomials. The vector r contains the residue
+## terms, p contains the pole values, k contains the coefficients of
+## a direct polynomial term (if it exists) and e is a vector containing
+## the powers of the denominators in the partial fraction terms.
+## Assuming b and a represent polynomials P(s) and Q(s) we have:
+##
+##  P(s)    M       r(m)         N
+##  ---- =  #  -------------  +  # k(n)*s^(N-n)
+##  Q(s)   m=1 (s-p(m))^e(m)    n=1
+##
+## (# represents summation) where M is the number of poles (the length of
+## the r, p, and e vectors) and N is the length of the k vector.
+##
+## [r p k e] = residue(b,a,tol)
+##
+## This form of the function call may be used to set a tolerance value.
+## The default value is 0.001. The tolerance value is used to determine
+## whether poles with small imaginary components are declared real. It is
+## also used to determine if two poles are distinct. If the ratio of the
+## imaginary part of a pole to the real part is less than tol, the
+## imaginary part is discarded. If two poles are farther apart than tol
+## they are distinct.
+##
+## Example:
+##  b = [1,  1, 1];
+##  a = [1, -5, 8, -4];
+##
+##  [r, p, k, e] = residue (b, a)
+##
+##  returns
+##
+##  r = [-2, 7, 3]; p = [2, 2, 1]; k = []; e = [1, 2, 1];
+##
+##  which implies the following partial fraction expansion
+##
+##        s^2 + s + 1         -2       7        3
+##    ------------------- = ----- + ------- + -----
+##    s^3 - 5s^2 + 8s - 4   (s-2)   (s-2)^2   (s-1)
+##
+## SEE ALSO: poly, roots, conv, deconv, polyval, polyderiv, polyinteg
 
-  ## usage: [r, p, k, e] = residue (b, a)
-  ##
-  ## If b and a are vectors of polynomial coefficients, then residue
-  ## calculates the partial fraction expansion corresponding to the
-  ## ratio of the two polynomials. The vector r contains the residue
-  ## terms, p contains the pole values, k contains the coefficients of
-  ## a direct polynomial term (if it exists) and e is a vector containing
-  ## the powers of the denominators in the partial fraction terms.
-  ## Assuming b and a represent polynomials P(s) and Q(s) we have:
-  ##
-  ##  P(s)    M       r(m)         N
-  ##  ---- =  #  -------------  +  # k(n)*s^(N-n)
-  ##  Q(s)   m=1 (s-p(m))^e(m)    n=1
-  ##
-  ## (# represents summation) where M is the number of poles (the length of
-  ## the r, p, and e vectors) and N is the length of the k vector.
-  ##
-  ## [r p k e] = residue(b,a,tol)
-  ##
-  ## This form of the function call may be used to set a tolerance value.
-  ## The default value is 0.001. The tolerance value is used to determine
-  ## whether poles with small imaginary components are declared real. It is
-  ## also used to determine if two poles are distinct. If the ratio of the
-  ## imaginary part of a pole to the real part is less than tol, the
-  ## imaginary part is discarded. If two poles are farther apart than tol
-  ## they are distinct.
-  ##
-  ## Example:
-  ##  b = [1,  1, 1];
-  ##  a = [1, -5, 8, -4];
-  ##
-  ##  [r, p, k, e] = residue (b, a)
-  ##
-  ##  returns
-  ##
-  ##  r = [-2, 7, 3]; p = [2, 2, 1]; k = []; e = [1, 2, 1];
-  ##
-  ##  which implies the following partial fraction expansion
-  ##
-  ##        s^2 + s + 1         -2       7        3
-  ##    ------------------- = ----- + ------- + -----
-  ##    s^3 - 5s^2 + 8s - 4   (s-2)   (s-2)^2   (s-1)
-  ##
-  ## SEE ALSO: poly, roots, conv, deconv, polyval, polyderiv, polyinteg
+function [r, p, k, e] = residue (b, a, toler)
 
   ## Written by Tony Richardson (amr@mpl.ucsd.edu) June 1994.
 
   ## Here's the method used to find the residues.
   ## The partial fraction expansion can be written as:
   ##
   ##
   ##   P(s)    D   M(k)      A(k,m)
diff --git a/scripts/polynomial/roots.m b/scripts/polynomial/roots.m
--- a/scripts/polynomial/roots.m
+++ b/scripts/polynomial/roots.m
@@ -12,23 +12,23 @@
 ### MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ### General Public License for more details.
 ###
 ### You should have received a copy of the GNU General Public License
 ### along with Octave; see the file COPYING.  If not, write to the Free
 ### Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ### 02111-1307, USA.
 
+## usage: roots (v)
+##
+## For a vector v with n components, return the roots of the
+## polynomial v(1) * z^(n-1) + ... + v(n-1) * z + v(n).
+
 function r = roots (v)
 
-  ## usage: roots (v)
-  ##
-  ## For a vector v with n components, return the roots of the
-  ## polynomial v(1) * z^(n-1) + ... + v(n-1) * z + v(n).
-  
   ## Written by KH (Kurt.Hornik@ci.tuwien.ac.at) on Dec 24, 1993
   ## Updated by KH on Nov 25, 1994
   
   if (min (size (v)) > 1 || nargin != 1)
     usage ("roots (v), where v is a vector");
   endif
   
   n = length (v);
diff --git a/scripts/set/complement.m b/scripts/set/complement.m
--- a/scripts/set/complement.m
+++ b/scripts/set/complement.m
@@ -12,23 +12,23 @@
 ### MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ### General Public License for more details.
 ###
 ### You should have received a copy of the GNU General Public License
 ### along with Octave; see the file COPYING.  If not, write to the Free
 ### Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ### 02111-1307, USA.
 
-function y = complement (a, b)
+## usage: complement (a, b)
+##
+## Returns the elements of set b that are not in set a.
+##
+## See - create_set, union, intersection
 
-  ## usage: complement (a, b)
-  ##
-  ## Returns the elements of set b that are not in set a.
-  ##
-  ## See - create_set, union, intersection
+function y = complement (a, b)
 
   if (nargin != 2)
     usage ("complement(a,b)");
   endif
 
   if (isempty (a))
     y = create_set(b);
   elseif (isempty (b))
diff --git a/scripts/set/create_set.m b/scripts/set/create_set.m
--- a/scripts/set/create_set.m
+++ b/scripts/set/create_set.m
@@ -12,23 +12,23 @@
 ### MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ### General Public License for more details.
 ###
 ### You should have received a copy of the GNU General Public License
 ### along with Octave; see the file COPYING.  If not, write to the Free
 ### Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ### 02111-1307, USA.
 
-function y = create_set(x)
+## usage: create_set(x)
+##
+## Returns the unique elements of x, sorted in ascending order.
+##
+## See - union, intersection, complement
 
-  ## usage: create_set(x)
-  ##
-  ## Returns the unique elements of x, sorted in ascending order.
-  ##
-  ## See - union, intersection, complement
+function y = create_set(x)
 
   if ( nargin != 1)
     usage ("create_set(x)");
   endif
 
   if(isempty(x))
     y = [];
   else
diff --git a/scripts/set/intersection.m b/scripts/set/intersection.m
--- a/scripts/set/intersection.m
+++ b/scripts/set/intersection.m
@@ -12,23 +12,23 @@
 ### MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ### General Public License for more details.
 ###
 ### You should have received a copy of the GNU General Public License
 ### along with Octave; see the file COPYING.  If not, write to the Free
 ### Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ### 02111-1307, USA.
 
-function y = intersection(a,b)
+## usage: intersection(a,b)
+##
+## Returns the intersection of sets a and b.
+##
+## See - create_set, union, complement
 
-  ## usage: intersection(a,b)
-  ##
-  ## Returns the intersection of sets a and b.
-  ##
-  ## See - create_set, union, complement
+function y = intersection(a,b)
 
   if (nargin != 2)
     usage ("intersection(a,b)");
   endif
 
   if(isempty(a) || isempty(b))
     y = [];
     return;
diff --git a/scripts/set/union.m b/scripts/set/union.m
--- a/scripts/set/union.m
+++ b/scripts/set/union.m
@@ -12,23 +12,23 @@
 ### MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ### General Public License for more details.
 ###
 ### You should have received a copy of the GNU General Public License
 ### along with Octave; see the file COPYING.  If not, write to the Free
 ### Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ### 02111-1307, USA.
 
-function y = union(a,b)
+## usage: union(a,b)
+##
+## Returns the union of sets a and b.
+##
+## See - create_set, intersection, complement
 
-  ## usage: union(a,b)
-  ##
-  ## Returns the union of sets a and b.
-  ##
-  ## See - create_set, intersection, complement
+function y = union(a,b)
 
   if (nargin != 2)
     usage ("union(a,b)");
   endif
 
   if(isempty(a))
     y = create_set(b);
   elseif(isempty(b))
diff --git a/scripts/signal/fftconv.m b/scripts/signal/fftconv.m
--- a/scripts/signal/fftconv.m
+++ b/scripts/signal/fftconv.m
@@ -12,27 +12,27 @@
 ### MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ### General Public License for more details.
 ###
 ### You should have received a copy of the GNU General Public License
 ### along with Octave; see the file COPYING.  If not, write to the Free
 ### Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ### 02111-1307, USA.
 
-function c = fftconv (a, b, N)
+## usage: fftconv (a, b [, N])
+##
+## c = fftconv (a, b) returns the convolution of the vectors a and b,
+## a vector with length equal to length (a) + length (b) - 1.  
+## If a and b are the coefficient vectors of two polynomials, c is
+## the coefficient vector of the product polynomial.
+##
+## The computation uses the FFT by calling fftfilt.  If the optional
+## argument N is specified, an N-point FFT is used.
 
-  ## usage: fftconv (a, b [, N])
-  ##
-  ## c = fftconv (a, b) returns the convolution of the vectors a and b,
-  ## a vector with length equal to length (a) + length (b) - 1.  
-  ## If a and b are the coefficient vectors of two polynomials, c is
-  ## the coefficient vector of the product polynomial.
-  ##
-  ## The computation uses the FFT by calling fftfilt.  If the optional
-  ## argument N is specified, an N-point FFT is used.
+function c = fftconv (a, b, N)
 
   ## Written by KH (Kurt.Hornik@ci.tuwien.ac.at) on Sep 3, 1994.
   
   if (nargin < 2 || nargin > 3)
     usage ("fftconv (b, x [, N])");
   endif
   
   if (is_matrix (a) || is_matrix (b))
diff --git a/scripts/signal/fftfilt.m b/scripts/signal/fftfilt.m
--- a/scripts/signal/fftfilt.m
+++ b/scripts/signal/fftfilt.m
@@ -12,23 +12,23 @@
 ### MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ### General Public License for more details.
 ###
 ### You should have received a copy of the GNU General Public License
 ### along with Octave; see the file COPYING.  If not, write to the Free
 ### Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ### 02111-1307, USA.
 
-function y = fftfilt (b, x, N)
+## usage:  fftfilt (b, x [, N])
+##
+## y = fftfilt (b, x) filters x with the FIR filter b using the FFT.
+## y = fftfilt (b, x, N) uses the overlap-add method to filter x with
+## b using an N-point FFT.
 
-  ## usage:  fftfilt (b, x [, N])
-  ##
-  ## y = fftfilt (b, x) filters x with the FIR filter b using the FFT.
-  ## y = fftfilt (b, x, N) uses the overlap-add method to filter x with
-  ## b using an N-point FFT.
+function y = fftfilt (b, x, N)
 
   ## Written by KH (Kurt.Hornik@ci.tuwien.ac.at) on Sep 3, 1994
 
   ## Reference:  Oppenheim & Schafer (1989).  Discrete-time Signal
   ## Processing (Chapter 8).  Prentice-Hall.
 
   ## If N is not specified explicitly, we do not use the overlap-add 
   ## method at all because loops are really slow.  Otherwise, we only
diff --git a/scripts/signal/freqz.m b/scripts/signal/freqz.m
--- a/scripts/signal/freqz.m
+++ b/scripts/signal/freqz.m
@@ -12,35 +12,35 @@
 ### MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ### General Public License for more details.
 ###
 ### You should have received a copy of the GNU General Public License
 ### along with Octave; see the file COPYING.  If not, write to the Free
 ### Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ### 02111-1307, USA.
 
-function [h, w] = freqz(b,...)
+## Compute the frequency response of a filter.
+##
+## [h,w] = resp(b)
+##   returns the complex frequency response h of the FIR filter with
+##   coefficients b. The response is evaluated at 512 angular frequencies
+##   between 0 and pi.  w is a vector containing the 512 frequencies.
+##
+## [h,w] = resp(b,a)
+##   returns the complex frequency response of the rational IIR filter
+##   whose numerator has coefficients b and denominator coefficients a.
+##
+## [h,w] = resp(b,a,n)
+##   returns the response evaluated at n angular frequencies.  For fastest
+##   computation n should factor into a small number of small primes.
+##
+## [h,w] = freqz(b,a,n,"whole")
+##   evaluates the response at n frequencies between 0 and 2*pi.
 
-  ## Compute the frequency response of a filter.
-  ##
-  ## [h,w] = resp(b)
-  ##   returns the complex frequency response h of the FIR filter with
-  ##   coefficients b. The response is evaluated at 512 angular frequencies
-  ##   between 0 and pi.  w is a vector containing the 512 frequencies.
-  ##
-  ## [h,w] = resp(b,a)
-  ##   returns the complex frequency response of the rational IIR filter
-  ##   whose numerator has coefficients b and denominator coefficients a.
-  ##
-  ## [h,w] = resp(b,a,n)
-  ##   returns the response evaluated at n angular frequencies.  For fastest
-  ##   computation n should factor into a small number of small primes.
-  ##
-  ## [h,w] = freqz(b,a,n,"whole")
-  ##   evaluates the response at n frequencies between 0 and 2*pi.
+function [h, w] = freqz(b,...)
 
   if (nargin == 1)
     ## Response of an FIR filter.
     a = 1;
     n = 512;
     region = "half";
   elseif (nargin == 2)
     ## Response of an IIR filter
diff --git a/scripts/signal/sinc.m b/scripts/signal/sinc.m
--- a/scripts/signal/sinc.m
+++ b/scripts/signal/sinc.m
@@ -12,21 +12,21 @@
 ### MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ### General Public License for more details.
 ###
 ### You should have received a copy of the GNU General Public License
 ### along with Octave; see the file COPYING.  If not, write to the Free
 ### Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ### 02111-1307, USA.
 
-function result = sinc (x)
+## usage: sinc(x)
+##
+##        Returns sin(pi*x)/(pi*x).
 
-  ## usage: sinc(x)
-  ##
-  ##        Returns sin(pi*x)/(pi*x).
+function result = sinc (x)
 
   ## We either need to set the do_fortran_indexing variable to "true"
   ## or use reshape to convert the input matrix to a vector, so that
   ## we can use find to determine the elements of x that equal zero.
   ## I prefer reshaping.
 
   [nr, nc] = size(x);
 
diff --git a/scripts/specfun/beta.m b/scripts/specfun/beta.m
--- a/scripts/specfun/beta.m
+++ b/scripts/specfun/beta.m
@@ -12,23 +12,23 @@
 ### MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ### General Public License for more details.
 ###
 ### You should have received a copy of the GNU General Public License
 ### along with Octave; see the file COPYING.  If not, write to the Free
 ### Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ### 02111-1307, USA.
 
+## usage: beta (a, b)
+##
+## Returns the beta function beta(a,b) = gamma(a) * gamma(b) / gamma(a+b)
+## of a and b.
+
 function retval = beta (a, b)
   
-  ## usage: beta (a, b)
-  ##
-  ## Returns the beta function beta(a,b) = gamma(a) * gamma(b) / gamma(a+b)
-  ## of a and b.
-
   ## Written by KH (Kurt.Hornik@ci.tuwien.ac.at) on Jun 13, 1993
 
   if (nargin != 2)
     usage ("beta (a, b)");
   endif
 
   retval = exp (lgamma (a) + lgamma (b) - lgamma (a+b));
 
diff --git a/scripts/specfun/betai.m b/scripts/specfun/betai.m
--- a/scripts/specfun/betai.m
+++ b/scripts/specfun/betai.m
@@ -12,25 +12,25 @@
 ### MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ### General Public License for more details.
 ###
 ### You should have received a copy of the GNU General Public License
 ### along with Octave; see the file COPYING.  If not, write to the Free
 ### Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ### 02111-1307, USA.
 
+## usage: betai (a, b, x)
+##
+## Returns the incomplete beta function
+##   betai (a, b, x) = BETA(a,b)^(-1) INT_0^x t^(a-1) (1-t)^(b-1) dt.
+## If x has more than one component, both a and b must be scalars.
+## If x is a scalar, a and b must be of compatible dimensions.
+
 function y = betai (a, b, x)
   
-  ## usage: betai (a, b, x)
-  ##
-  ## Returns the incomplete beta function
-  ##   betai (a, b, x) = BETA(a,b)^(-1) INT_0^x t^(a-1) (1-t)^(b-1) dt.
-  ## If x has more than one component, both a and b must be scalars.
-  ## If x is a scalar, a and b must be of compatible dimensions.
-  
   ## Written by KH (Kurt.Hornik@ci.tuwien.ac.at) on Aug 2, 1994.
 
   ## Computation is based on the series expansion
   ##   betai(a, b, x) 
   ##     = \frac{1}{B(a, b)} x^a 
   ##         \sum_{k=0}^\infty \frac{(1-b)\cdots(k-b)}{a+k} \frac{x^k}{k!}
   ## for x <= 1/2.  For x > 1/2, betai(a, b, x) = 1 - betai(b, a, 1-x).
 
diff --git a/scripts/specfun/betainc.m b/scripts/specfun/betainc.m
--- a/scripts/specfun/betainc.m
+++ b/scripts/specfun/betainc.m
@@ -12,17 +12,17 @@
 ### MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ### General Public License for more details.
 ###
 ### You should have received a copy of the GNU General Public License
 ### along with Octave; see the file COPYING.  If not, write to the Free
 ### Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ### 02111-1307, USA.
 
+## Usage: betainc (x, a, b)
+##
+## See also: betai
+
 function y = betainc (x, a, b)
   
-  ## Usage: betainc (x, a, b)
-  ##
-  ## See also: betai
-
   y = betai (a, b, x);
 
 endfunction
diff --git a/scripts/specfun/gammai.m b/scripts/specfun/gammai.m
--- a/scripts/specfun/gammai.m
+++ b/scripts/specfun/gammai.m
@@ -12,31 +12,31 @@
 ### MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ### General Public License for more details.
 ###
 ### You should have received a copy of the GNU General Public License
 ### along with Octave; see the file COPYING.  If not, write to the Free
 ### Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ### 02111-1307, USA.
 
+## usage: gammai (a, x)
+##
+## Computes the incomplete gamma function
+##
+##   gammai (a, x) 
+##     = (integral from 0 to x of exp(-t) t^(a-1) dt) / gamma(a).
+##
+## If a is scalar, then gammai(a, x) is returned for each element of x
+## and vice versa.
+##
+## If neither a nor x is scalar, the sizes of a and x must agree, and
+## gammai is applied pointwise.
+
 function y = gammai (a, x)
   
-  ## usage: gammai (a, x)
-  ##
-  ## Computes the incomplete gamma function
-  ##
-  ##   gammai (a, x) 
-  ##     = (integral from 0 to x of exp(-t) t^(a-1) dt) / gamma(a).
-  ##
-  ## If a is scalar, then gammai(a, x) is returned for each element of x
-  ## and vice versa.
-  ##
-  ## If neither a nor x is scalar, the sizes of a and x must agree, and
-  ## gammai is applied pointwise.
-  
   ## Written by KH (Kurt.Hornik@ci.tuwien.ac.at) on Aug 13, 1994
 
   if (nargin != 2)
     usage ("gammai (a, x)");
   endif
   
   [r_a, c_a] = size (a);
   [r_x, c_x] = size (x);
diff --git a/scripts/specfun/gammainc.m b/scripts/specfun/gammainc.m
--- a/scripts/specfun/gammainc.m
+++ b/scripts/specfun/gammainc.m
@@ -12,17 +12,17 @@
 ### MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ### General Public License for more details.
 ###
 ### You should have received a copy of the GNU General Public License
 ### along with Octave; see the file COPYING.  If not, write to the Free
 ### Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ### 02111-1307, USA.
 
+## Usage: gammainc (x, a)
+##
+## See also: gammai
+
 function y = gammainc (x, a)
   
-  ## Usage: gammainc (x, a)
-  ##
-  ## See also: gammai
-
   y = gammai (a, x);
 
 endfunction
diff --git a/scripts/special-matrix/hadamard.m b/scripts/special-matrix/hadamard.m
--- a/scripts/special-matrix/hadamard.m
+++ b/scripts/special-matrix/hadamard.m
@@ -12,23 +12,23 @@
 ### MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ### General Public License for more details.
 ###
 ### You should have received a copy of the GNU General Public License
 ### along with Octave; see the file COPYING.  If not, write to the Free
 ### Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ### 02111-1307, USA.
 
-function retval = hadamard (k)
+## usage: hadamard (k)
+##
+## Return the Hadamard matrix of order n = 2^k.
+##
+## See also: hankel, vander, hilb, invhilb, toeplitz
 
-  ## usage: hadamard (k)
-  ##
-  ## Return the Hadamard matrix of order n = 2^k.
-  ##
-  ## See also: hankel, vander, hilb, invhilb, toeplitz
+function retval = hadamard (k)
 
   if (nargin != 1)
     usage ("hadamard (n)");
   endif
 
   if (k < 1)
     retval = 1;
   else
diff --git a/scripts/special-matrix/hankel.m b/scripts/special-matrix/hankel.m
--- a/scripts/special-matrix/hankel.m
+++ b/scripts/special-matrix/hankel.m
@@ -12,28 +12,28 @@
 ### MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ### General Public License for more details.
 ###
 ### You should have received a copy of the GNU General Public License
 ### along with Octave; see the file COPYING.  If not, write to the Free
 ### Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ### 02111-1307, USA.
 
-function retval = hankel (c, r)
+## usage: hankel (c, r)
+##
+## Return the Hankel matrix constructed given the first column
+## c, and (optionally) the last row r.
+##
+## If the second argument is omitted, zeros are inserted below the main
+## anti-diagonal.  If the last element of c is not the same as the first 
+## element of r, the last element of c is used.
+##
+## See also: vander, hadamard, hilb, invhilb, toeplitz
 
-  ## usage: hankel (c, r)
-  ##
-  ## Return the Hankel matrix constructed given the first column
-  ## c, and (optionally) the last row r.
-  ##
-  ## If the second argument is omitted, zeros are inserted below the main
-  ## anti-diagonal.  If the last element of c is not the same as the first 
-  ## element of r, the last element of c is used.
-  ##
-  ## See also: vander, hadamard, hilb, invhilb, toeplitz
+function retval = hankel (c, r)
 
   if (nargin == 1)
     r = zeros (size (c));
   elseif (nargin != 2)
     usage ("hankel (c, r)");
   endif
 
   [c_nr, c_nc] = size (c);
diff --git a/scripts/special-matrix/hilb.m b/scripts/special-matrix/hilb.m
--- a/scripts/special-matrix/hilb.m
+++ b/scripts/special-matrix/hilb.m
@@ -12,26 +12,26 @@
 ### MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ### General Public License for more details.
 ###
 ### You should have received a copy of the GNU General Public License
 ### along with Octave; see the file COPYING.  If not, write to the Free
 ### Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ### 02111-1307, USA.
 
-function retval = hilb (n)
+## usage: hilb (n)
+##
+## Return the Hilbert matrix of order n.  The i, j element of a Hilbert
+## matrix is defined as
+##
+##  H (i, j) = 1 / (i + j - 1);
+##
+## See also: hankel, vander, hadamard, invhilb, toeplitz
 
-  ## usage: hilb (n)
-  ##
-  ## Return the Hilbert matrix of order n.  The i, j element of a Hilbert
-  ## matrix is defined as
-  ##
-  ##  H (i, j) = 1 / (i + j - 1);
-  ##
-  ## See also: hankel, vander, hadamard, invhilb, toeplitz
+function retval = hilb (n)
 
 
   if (nargin != 1)
     usage ("hilb (n)");
   endif
 
   nmax = length (n);
   if (nmax == 1)
diff --git a/scripts/special-matrix/invhilb.m b/scripts/special-matrix/invhilb.m
--- a/scripts/special-matrix/invhilb.m
+++ b/scripts/special-matrix/invhilb.m
@@ -12,24 +12,24 @@
 ### MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ### General Public License for more details.
 ###
 ### You should have received a copy of the GNU General Public License
 ### along with Octave; see the file COPYING.  If not, write to the Free
 ### Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ### 02111-1307, USA.
 
-function retval = invhilb (n)
+## usage: invhilb (n)
+##
+## Return the inverse of a Hilbert matrix of order n.  This is slow but
+## exact.  Compare with inv (hilb (n)).
+##
+## See also: hankel, vander, hadamard, hilb, toeplitz
 
-  ## usage: invhilb (n)
-  ##
-  ## Return the inverse of a Hilbert matrix of order n.  This is slow but
-  ## exact.  Compare with inv (hilb (n)).
-  ##
-  ## See also: hankel, vander, hadamard, hilb, toeplitz
+function retval = invhilb (n)
 
   if (nargin != 1)
     usage ("invhilb (n)");
   endif
 
   nmax = length (n);
   if (nmax == 1)
     retval = zeros (n);
diff --git a/scripts/special-matrix/toeplitz.m b/scripts/special-matrix/toeplitz.m
--- a/scripts/special-matrix/toeplitz.m
+++ b/scripts/special-matrix/toeplitz.m
@@ -12,28 +12,28 @@
 ### MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ### General Public License for more details.
 ###
 ### You should have received a copy of the GNU General Public License
 ### along with Octave; see the file COPYING.  If not, write to the Free
 ### Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ### 02111-1307, USA.
 
-function retval = toeplitz (c, r)
+## usage: toeplitz (c, r)
+##
+## Return the Toeplitz matrix constructed given the first column
+## c, and (optionally) the first row r.
+##
+## If the second argument is omitted, the first row is taken to be the
+## same as the first column.  If the first element of c is not the same
+## as the first element of r, the first element of c is used.
+##
+## See also: hankel, vander, hadamard, hilb, invhib
 
-  ## usage: toeplitz (c, r)
-  ##
-  ## Return the Toeplitz matrix constructed given the first column
-  ## c, and (optionally) the first row r.
-  ##
-  ## If the second argument is omitted, the first row is taken to be the
-  ## same as the first column.  If the first element of c is not the same
-  ## as the first element of r, the first element of c is used.
-  ##
-  ## See also: hankel, vander, hadamard, hilb, invhib
+function retval = toeplitz (c, r)
 
   if (nargin == 1)
     r = c;
   elseif (nargin != 2)
     usage ("toeplitz (c, r)");
   endif
 
   [c_nr, c_nc] = size (c);
diff --git a/scripts/special-matrix/vander.m b/scripts/special-matrix/vander.m
--- a/scripts/special-matrix/vander.m
+++ b/scripts/special-matrix/vander.m
@@ -12,23 +12,23 @@
 ### MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ### General Public License for more details.
 ###
 ### You should have received a copy of the GNU General Public License
 ### along with Octave; see the file COPYING.  If not, write to the Free
 ### Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ### 02111-1307, USA.
 
-function retval = vander (c)
+## usage: vander (c)
+##
+## Return the Vandermonde matrix whose next to last column is c.
+##
+## See also: hankel, hadamard, hilb, invhilb, toeplitz
 
-  ## usage: vander (c)
-  ##
-  ## Return the Vandermonde matrix whose next to last column is c.
-  ##
-  ## See also: hankel, hadamard, hilb, invhilb, toeplitz
+function retval = vander (c)
 
   if (nargin != 1)
     usage ("vander (c)");
   endif
 
   nr = rows (c);
   nc = columns (c);
   if (nr == 1 && nc == 1)
diff --git a/scripts/statistics/corrcoef.m b/scripts/statistics/corrcoef.m
--- a/scripts/statistics/corrcoef.m
+++ b/scripts/statistics/corrcoef.m
@@ -12,24 +12,24 @@
 ### MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ### General Public License for more details.
 ###
 ### You should have received a copy of the GNU General Public License
 ### along with Octave; see the file COPYING.  If not, write to the Free
 ### Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ### 02111-1307, USA.
 
-function retval = corrcoef (X, Y)
+## usage: corrcoef (X [, Y])
+##
+## If each row of X and Y is an observation and each column is a variable,
+## the (i,j)-th entry of corrcoef(X, Y) is the correlation between the
+## i-th variable in X and the j-th variable in Y.
+## corrcoef(X) is corrcoef(X, X).
 
-  ## usage: corrcoef (X [, Y])
-  ##
-  ## If each row of X and Y is an observation and each column is a variable,
-  ## the (i,j)-th entry of corrcoef(X, Y) is the correlation between the
-  ## i-th variable in X and the j-th variable in Y.
-  ## corrcoef(X) is corrcoef(X, X).
+function retval = corrcoef (X, Y)
 
   ## Written by Kurt Hornik (hornik@ci.tuwien.ac.at) March 1993.
   ## Dept of Probability Theory and Statistics TU Wien, Austria.
 
   if (nargin < 1 || nargin > 2)
     usage ("corrcoef (X [, Y])");
   endif
 
diff --git a/scripts/statistics/cov.m b/scripts/statistics/cov.m
--- a/scripts/statistics/cov.m
+++ b/scripts/statistics/cov.m
@@ -12,24 +12,24 @@
 ### MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ### General Public License for more details.
 ###
 ### You should have received a copy of the GNU General Public License
 ### along with Octave; see the file COPYING.  If not, write to the Free
 ### Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ### 02111-1307, USA.
 
-function retval = cov (X, Y)
+## usage: cov (X [, Y])
+##
+## If each row of X and Y is an observation and each column is a
+## variable, the (i,j)-th entry of cov(X, Y) is the covariance
+## between the i-th variable in X and the j-th variable in Y.
+## cov(X) is cov(X, X).
 
-  ## usage: cov (X [, Y])
-  ##
-  ## If each row of X and Y is an observation and each column is a
-  ## variable, the (i,j)-th entry of cov(X, Y) is the covariance
-  ## between the i-th variable in X and the j-th variable in Y.
-  ## cov(X) is cov(X, X).
+function retval = cov (X, Y)
 
   ## Written by Kurt Hornik (hornik@ci.tuwien.ac.at) March 1993.
   ## Dept of Probability Theory and Statistics TU Wien, Austria.
 
   if (nargin < 1 || nargin > 2)
     usage ("cov (X [, Y])");
   endif
 
diff --git a/scripts/statistics/gls.m b/scripts/statistics/gls.m
--- a/scripts/statistics/gls.m
+++ b/scripts/statistics/gls.m
@@ -12,34 +12,34 @@
 ### MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ### General Public License for more details.
 ###
 ### You should have received a copy of the GNU General Public License
 ### along with Octave; see the file COPYING.  If not, write to the Free
 ### Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ### 02111-1307, USA.
 
+## usage: [BETA, v [,R]] = gls (Y, X, O)
+##
+## Generalized Least Squares (GLS) estimation for the multivariate model
+##
+##   Y = X*B + E,  mean(E) = 0,  cov(vec(E)) = (s^2)*O
+##
+## with Y ...  T x p      As usual, each row of Y and X is an observation
+##      X ...  T x k      and each column a variable.
+##      B ...  k x p
+##      E ...  T x p
+##      O ... Tp x Tp.
+##
+## BETA is the GLS estimator for B.
+## v is the GLS estimator for s^2.
+## R = Y - X*BETA is the matrix of GLS residuals.
+
 function [BETA, v, R] = gls (Y, X, O)
   
-  ## usage: [BETA, v [,R]] = gls (Y, X, O)
-  ##
-  ## Generalized Least Squares (GLS) estimation for the multivariate model
-  ##
-  ##   Y = X*B + E,  mean(E) = 0,  cov(vec(E)) = (s^2)*O
-  ##
-  ## with Y ...  T x p      As usual, each row of Y and X is an observation
-  ##      X ...  T x k      and each column a variable.
-  ##      B ...  k x p
-  ##      E ...  T x p
-  ##      O ... Tp x Tp.
-  ##
-  ## BETA is the GLS estimator for B.
-  ## v is the GLS estimator for s^2.
-  ## R = Y - X*BETA is the matrix of GLS residuals.
-
   ## Written by Teresa Twaroch (twaroch@ci.tuwien.ac.at) May 1993.
   ## Dept of Probability Theory and Statistics TU Wien, Austria.
 
   if (nargin != 3)
     usage ("[BETA, v [, R]] = gls (Y, X, O)");
   endif
 
   [rx, cx] = size (X);
diff --git a/scripts/statistics/kurtosis.m b/scripts/statistics/kurtosis.m
--- a/scripts/statistics/kurtosis.m
+++ b/scripts/statistics/kurtosis.m
@@ -12,28 +12,28 @@
 ### MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ### General Public License for more details.
 ###
 ### You should have received a copy of the GNU General Public License
 ### along with Octave; see the file COPYING.  If not, write to the Free
 ### Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ### 02111-1307, USA.
 
-function retval = kurtosis (x)
+## usage: kurtosis (x)
+##
+## If x is a vector of length N, return the kurtosis
+##
+##   kurtosis(x) = N^(-1) std(x)^(-4) SUM_i (x(i)-mean(x))^4 - 3
+##
+## of x.
+##
+## If x is a matrix, return a row vector containing the kurtosis for each
+## column.
 
-  ## usage: kurtosis (x)
-  ##
-  ## If x is a vector of length N, return the kurtosis
-  ##
-  ##   kurtosis(x) = N^(-1) std(x)^(-4) SUM_i (x(i)-mean(x))^4 - 3
-  ##
-  ## of x.
-  ##
-  ## If x is a matrix, return a row vector containing the kurtosis for each
-  ## column.
+function retval = kurtosis (x)
 
   ## Written by KH (Kurt.Hornik@ci.tuwien.ac.at) on Jul 29, 1994.
 
   if (nargin != 1)
     usage ("kurtosis (x)");
   endif
 
   if (is_vector (x))
diff --git a/scripts/statistics/mahalanobis.m b/scripts/statistics/mahalanobis.m
--- a/scripts/statistics/mahalanobis.m
+++ b/scripts/statistics/mahalanobis.m
@@ -12,23 +12,23 @@
 ### MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ### General Public License for more details.
 ###
 ### You should have received a copy of the GNU General Public License
 ### along with Octave; see the file COPYING.  If not, write to the Free
 ### Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ### 02111-1307, USA.
 
-function retval = mahalanobis (X, Y)
+## usage: mahalanobis (X, Y)
+##
+## Returns Mahalanobis' D-square distance between the multivariate
+## samples X and Y, which must have the same number of components
+## (columns), but may have a different number of observations (rows).
 
-  ## usage: mahalanobis (X, Y)
-  ##
-  ## Returns Mahalanobis' D-square distance between the multivariate
-  ## samples X and Y, which must have the same number of components
-  ## (columns), but may have a different number of observations (rows).
+function retval = mahalanobis (X, Y)
 
   ## Written by Friedrich Leisch (leisch@ci.tuwien.ac.at) July 1993.
   ## Dept of Probability Theory and Statistics TU Wien, Austria.
 
   if (nargin != 2)
     usage ("mahalanobis (X, Y)");
   endif
 
diff --git a/scripts/statistics/mean.m b/scripts/statistics/mean.m
--- a/scripts/statistics/mean.m
+++ b/scripts/statistics/mean.m
@@ -12,26 +12,26 @@
 ### MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ### General Public License for more details.
 ###
 ### You should have received a copy of the GNU General Public License
 ### along with Octave; see the file COPYING.  If not, write to the Free
 ### Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ### 02111-1307, USA.
 
-function retval = mean (a)
+## usage: mean (a)
+##
+## For vector arguments, return the mean the values.
+##
+## For matrix arguments, return a row vector containing the mean for
+## each column.
+##
+## See also: median, std
 
-  ## usage: mean (a)
-  ##
-  ## For vector arguments, return the mean the values.
-  ##
-  ## For matrix arguments, return a row vector containing the mean for
-  ## each column.
-  ##
-  ## See also: median, std
+function retval = mean (a)
 
   if (nargin != 1)
     usage ("mean (a)");
   endif
 
   [nr, nc] = size (a);
   if (nr == 1 || nc == 1)
     retval = sum (a) / length (a);
diff --git a/scripts/statistics/median.m b/scripts/statistics/median.m
--- a/scripts/statistics/median.m
+++ b/scripts/statistics/median.m
@@ -12,26 +12,26 @@
 ### MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ### General Public License for more details.
 ###
 ### You should have received a copy of the GNU General Public License
 ### along with Octave; see the file COPYING.  If not, write to the Free
 ### Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ### 02111-1307, USA.
 
-function retval = median (a)
+## usage: median (a)
+##
+## For vector arguments, return the median of the values.
+##
+## For matrix arguments, return a row vector containing the median for
+## each column.
+##
+## See also: std, mean
 
-  ## usage: median (a)
-  ##
-  ## For vector arguments, return the median of the values.
-  ##
-  ## For matrix arguments, return a row vector containing the median for
-  ## each column.
-  ##
-  ## See also: std, mean
+function retval = median (a)
 
   if (nargin != 1)
     usage ("median (a)");
   endif
 
   [nr, nc] = size (a);
   s = sort (a);
   if (nr == 1 && nc > 0)
diff --git a/scripts/statistics/ols.m b/scripts/statistics/ols.m
--- a/scripts/statistics/ols.m
+++ b/scripts/statistics/ols.m
@@ -12,39 +12,39 @@
 ### MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ### General Public License for more details.
 ###
 ### You should have received a copy of the GNU General Public License
 ### along with Octave; see the file COPYING.  If not, write to the Free
 ### Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ### 02111-1307, USA.
 
-function [BETA, SIGMA, R] = ols (Y, X)
+## usage: [BETA, SIGMA [, R]] = ols (Y, X)
+##
+## Ordinary Least Squares (OLS) estimation for the multivariate model
+##
+##     Y = X*B + E,  mean(E) = 0,  cov(vec(E)) = kron(S,I)
+##
+## with Y ... T x p     As usual, each row of Y and X is an observation
+##      X ... T x k     and each column a variable.
+##      B ... k x p
+##      E ... T x p.
+##
+## BETA is the OLS estimator for B, i.e.
+##
+##   BETA = pinv(X)*Y,
+##
+## where pinv(X) denotes the pseudoinverse of X.
+## SIGMA is the OLS estimator for the matrix S, i.e.
+##
+##   SIGMA = (Y - X*BETA)'*(Y - X*BETA) / (T - rank(X)).
+##
+## R = Y - X*BETA is the matrix of OLS residuals.
 
-  ## usage: [BETA, SIGMA [, R]] = ols (Y, X)
-  ##
-  ## Ordinary Least Squares (OLS) estimation for the multivariate model
-  ##
-  ##     Y = X*B + E,  mean(E) = 0,  cov(vec(E)) = kron(S,I)
-  ##
-  ## with Y ... T x p     As usual, each row of Y and X is an observation
-  ##      X ... T x k     and each column a variable.
-  ##      B ... k x p
-  ##      E ... T x p.
-  ##
-  ## BETA is the OLS estimator for B, i.e.
-  ##
-  ##   BETA = pinv(X)*Y,
-  ##
-  ## where pinv(X) denotes the pseudoinverse of X.
-  ## SIGMA is the OLS estimator for the matrix S, i.e.
-  ##
-  ##   SIGMA = (Y - X*BETA)'*(Y - X*BETA) / (T - rank(X)).
-  ##
-  ## R = Y - X*BETA is the matrix of OLS residuals.
+function [BETA, SIGMA, R] = ols (Y, X)
 
   ## Written by Teresa Twaroch (twaroch@ci.tuwien.ac.at) May 1993.
   ## Dept of Probability Theory and Statistics TU Wien, Austria.
 
   if (nargin != 2)
     error("usage : [BETA, SIGMA [, R]] = ols (Y, X)");
   endif
 
diff --git a/scripts/statistics/skewness.m b/scripts/statistics/skewness.m
--- a/scripts/statistics/skewness.m
+++ b/scripts/statistics/skewness.m
@@ -12,28 +12,28 @@
 ### MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ### General Public License for more details.
 ###
 ### You should have received a copy of the GNU General Public License
 ### along with Octave; see the file COPYING.  If not, write to the Free
 ### Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ### 02111-1307, USA.
 
-function retval = skewness (x)
+## usage: skewness (x)
+##
+## If x is a vector of length N, return the skewness
+##
+##   skewness (x) = N^(-1) std(x)^(-3) SUM_i (x(i)-mean(x))^3
+##
+## of x.
+##
+## If x is a matrix, return a row vector containing the skewness for each
+## column.
 
-  ## usage: skewness (x)
-  ##
-  ## If x is a vector of length N, return the skewness
-  ##
-  ##   skewness (x) = N^(-1) std(x)^(-3) SUM_i (x(i)-mean(x))^3
-  ##
-  ## of x.
-  ##
-  ## If x is a matrix, return a row vector containing the skewness for each
-  ## column.
+function retval = skewness (x)
 
   ## Written by KH (Kurt.Hornik@ci.tuwien.ac.at) on Jul 29, 1994.
 
   if (nargin != 1)
     usage ("skewness (x)");
   endif
 
   if (is_vector (x))
diff --git a/scripts/statistics/std.m b/scripts/statistics/std.m
--- a/scripts/statistics/std.m
+++ b/scripts/statistics/std.m
@@ -12,25 +12,25 @@
 ### MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ### General Public License for more details.
 ###
 ### You should have received a copy of the GNU General Public License
 ### along with Octave; see the file COPYING.  If not, write to the Free
 ### Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ### 02111-1307, USA.
 
-function retval = std (a)
+## usage: std (a)
+##
+## For vector arguments, std returns the standard deviation of the
+## values.  For matrix arguments, std returns a row vector containing
+## the standard deviation for each column.
+##
+## See also: mean, median
 
-  ## usage: std (a)
-  ##
-  ## For vector arguments, std returns the standard deviation of the
-  ## values.  For matrix arguments, std returns a row vector containing
-  ## the standard deviation for each column.
-  ##
-  ## See also: mean, median
+function retval = std (a)
 
   if (nargin != 1)
     usage ("std (a)");
   endif
 
   nr = rows (a);
   nc = columns (a);
   if (nc == 1 && nr == 1)
diff --git a/scripts/strings/bin2dec.m b/scripts/strings/bin2dec.m
--- a/scripts/strings/bin2dec.m
+++ b/scripts/strings/bin2dec.m
@@ -12,24 +12,24 @@
 ### MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ### General Public License for more details.
 ###
 ### You should have received a copy of the GNU General Public License
 ### along with Octave; see the file COPYING.  If not, write to the Free
 ### Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ### 02111-1307, USA.
 
+## usage:  bin2dec (x)
+##
+## Returns the decimal number corresponding to the binary number in
+## quotes.  For example, bin2dec ("1110") returns 14.
+
 function y = bin2dec (x)
 
-  ## usage:  bin2dec (x)
-  ##
-  ## Returns the decimal number corresponding to the binary number in
-  ## quotes.  For example, bin2dec ("1110") returns 14.
-  
-  ## Original version by Kurt Hornik <Kurt.Hornik@ci.tuwien.ac.at>.
+## Original version by Kurt Hornik <Kurt.Hornik@ci.tuwien.ac.at>.
   
   if (nargin != 1)
     usage ("bin2dec (x)");
   endif
 
   x = toascii (x) - toascii ("0");
 
   if (all (x == 0 | x == 1))
diff --git a/scripts/strings/blanks.m b/scripts/strings/blanks.m
--- a/scripts/strings/blanks.m
+++ b/scripts/strings/blanks.m
@@ -12,23 +12,23 @@
 ### MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ### General Public License for more details.
 ###
 ### You should have received a copy of the GNU General Public License
 ### along with Octave; see the file COPYING.  If not, write to the Free
 ### Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ### 02111-1307, USA.
 
+## usage:  blanks (n)
+##
+## Returns a string of n blanks.
+
 function s = blanks (n)
   
-  ## usage:  blanks (n)
-  ##
-  ## Returns a string of n blanks.
-  
-  ## Original version by Kurt Hornik <Kurt.Hornik@ci.tuwien.ac.at>.
+## Original version by Kurt Hornik <Kurt.Hornik@ci.tuwien.ac.at>.
 
   if (nargin != 1)
     usage ("blanks (n)");
   endif
   
   if (is_scalar (n) && n > 0 && n == round (n))
     s = setstr (ones (1, n) * toascii (" "));
   else
diff --git a/scripts/strings/deblank.m b/scripts/strings/deblank.m
--- a/scripts/strings/deblank.m
+++ b/scripts/strings/deblank.m
@@ -12,23 +12,23 @@
 ### MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ### General Public License for more details.
 ###
 ### You should have received a copy of the GNU General Public License
 ### along with Octave; see the file COPYING.  If not, write to the Free
 ### Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ### 02111-1307, USA.
 
+## usage:  deblank (s)
+##
+## Remove trailing blanks from the string s.
+
 function t = deblank (s)
   
-  ## usage:  deblank (s)
-  ##
-  ## Remove trailing blanks from the string s.
-  
-  ## Original version by Kurt Hornik <Kurt.Hornik@ci.tuwien.ac.at>.
+## Original version by Kurt Hornik <Kurt.Hornik@ci.tuwien.ac.at>.
 
   if (nargin != 1)
     usage ("deblank (s)");
   endif
   
   if (isstr (s))
 
     [nr, nc] = size (s);
diff --git a/scripts/strings/dec2bin.m b/scripts/strings/dec2bin.m
--- a/scripts/strings/dec2bin.m
+++ b/scripts/strings/dec2bin.m
@@ -12,22 +12,22 @@
 ### MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ### General Public License for more details.
 ###
 ### You should have received a copy of the GNU General Public License
 ### along with Octave; see the file COPYING.  If not, write to the Free
 ### Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ### 02111-1307, USA.
 
-function y = dec2bin (x)
+## usage:  dec2bin (x)
+##
+## Returns the binary number corresponding to the nonnegative integer
+## x.  For example, dec2bin (14) returns "1110".
 
-  ## usage:  dec2bin (x)
-  ##
-  ## Returns the binary number corresponding to the nonnegative integer
-  ## x.  For example, dec2bin (14) returns "1110".
+function y = dec2bin (x)
 
   ## Original version by Kurt Hornik <Kurt.Hornik@ci.tuwien.ac.at>.
   
   if (nargin != 1)
     usage ("dec2bin (x)");
   endif
 
   [nr, nc] = size (x);
diff --git a/scripts/strings/dec2hex.m b/scripts/strings/dec2hex.m
--- a/scripts/strings/dec2hex.m
+++ b/scripts/strings/dec2hex.m
@@ -12,24 +12,24 @@
 ### MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ### General Public License for more details.
 ###
 ### You should have received a copy of the GNU General Public License
 ### along with Octave; see the file COPYING.  If not, write to the Free
 ### Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ### 02111-1307, USA.
 
+## usage:  dec2hex (d)
+##
+## Returns the hex number corresponding to the decimal number d.  For
+## example, dec2hex (2748) returns "abc". 
+
 function h = dec2hex (d)
 
-  ## usage:  dec2hex (d)
-  ##
-  ## Returns the hex number corresponding to the decimal number d.  For
-  ## example, dec2hex (2748) returns "abc". 
-  
-  ## Original version by Kurt Hornik <Kurt.Hornik@ci.tuwien.ac.at>.
+## Original version by Kurt Hornik <Kurt.Hornik@ci.tuwien.ac.at>.
 
   if (nargin != 1)
     usage ("dec2hex (d)");
   endif
   
   [nr, nc] = size (d);
 
   len = nr * nc;
diff --git a/scripts/strings/findstr.m b/scripts/strings/findstr.m
--- a/scripts/strings/findstr.m
+++ b/scripts/strings/findstr.m
@@ -12,30 +12,30 @@
 ### MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ### General Public License for more details.
 ###
 ### You should have received a copy of the GNU General Public License
 ### along with Octave; see the file COPYING.  If not, write to the Free
 ### Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ### 02111-1307, USA.
 
-function v = findstr (s, t, overlap)
+## usage: findstr (s, t [, overlap])
+##
+## Returns the vector of all positions in the longer of the two strings
+## S and T where an occurence of the shorter of the two starts.
+##
+## If the optional argument OVERLAP is nonzero, the returned vector
+## can include overlapping positions (this is the default).
+##
+## For example, 
+##
+##   findstr ("abababa", "aba")     =>  [1, 3, 5]
+##   findstr ("abababa", "aba", 0)  =>  [1, 5]
 
-  ## usage: findstr (s, t [, overlap])
-  ##
-  ## Returns the vector of all positions in the longer of the two strings
-  ## S and T where an occurence of the shorter of the two starts.
-  ##
-  ## If the optional argument OVERLAP is nonzero, the returned vector
-  ## can include overlapping positions (this is the default).
-  ##
-  ## For example, 
-  ##
-  ##   findstr ("abababa", "aba")     =>  [1, 3, 5]
-  ##   findstr ("abababa", "aba", 0)  =>  [1, 5]
+function v = findstr (s, t, overlap)
 
   ## Original version by Kurt Hornik <Kurt.Hornik@ci.tuwien.ac.at>.
 
   if (nargin < 2 || nargin > 3)
     usage ("findstr (s, t [, overlap])");
   endif
 
   if (nargin == 2)
diff --git a/scripts/strings/hex2dec.m b/scripts/strings/hex2dec.m
--- a/scripts/strings/hex2dec.m
+++ b/scripts/strings/hex2dec.m
@@ -12,23 +12,23 @@
 ### MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ### General Public License for more details.
 ###
 ### You should have received a copy of the GNU General Public License
 ### along with Octave; see the file COPYING.  If not, write to the Free
 ### Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ### 02111-1307, USA.
 
-function d = hex2dec (h)
+## usage:  hex2dec (h)
+##
+## Returns the decimal number corresponding to the hex number in
+## quotes.  For example, hex2dec ("12B") and hex2dec ("12b") both
+## return 299.
 
-  ## usage:  hex2dec (h)
-  ##
-  ## Returns the decimal number corresponding to the hex number in
-  ## quotes.  For example, hex2dec ("12B") and hex2dec ("12b") both
-  ## return 299.
+function d = hex2dec (h)
 
   ## Original version by Kurt Hornik <Kurt.Hornik@ci.tuwien.ac.at>.
 
   if (nargin != 1)
     usage ("hex2dec (x)");
   endif
 
   if (isstr (h))
diff --git a/scripts/strings/index.m b/scripts/strings/index.m
--- a/scripts/strings/index.m
+++ b/scripts/strings/index.m
@@ -12,24 +12,24 @@
 ### MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ### General Public License for more details.
 ###
 ### You should have received a copy of the GNU General Public License
 ### along with Octave; see the file COPYING.  If not, write to the Free
 ### Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ### 02111-1307, USA.
 
-function n = index (s, t)
+## usage:  index (s, t)
+##
+## Returns the position of the first occurence of the string T in the
+## string S or 0 if no occurence is found.
+##
+## NOTE: this function does not work for arrays of strings.
 
-  ## usage:  index (s, t)
-  ##
-  ## Returns the position of the first occurence of the string T in the
-  ## string S or 0 if no occurence is found.
-  ##
-  ## NOTE: this function does not work for arrays of strings.
+function n = index (s, t)
 
   ## This is patterned after the AWK function of the same name.
 
   ## Original version by Kurt Hornik <Kurt.Hornik@ci.tuwien.ac.at>.
 
   if (nargin != 2)
     usage ("index (s, t)");
   endif
diff --git a/scripts/strings/rindex.m b/scripts/strings/rindex.m
--- a/scripts/strings/rindex.m
+++ b/scripts/strings/rindex.m
@@ -12,24 +12,24 @@
 ### MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ### General Public License for more details.
 ###
 ### You should have received a copy of the GNU General Public License
 ### along with Octave; see the file COPYING.  If not, write to the Free
 ### Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ### 02111-1307, USA.
 
-function n = rindex (s, t)
+## usage: rindex (s, t)
+##
+## Returns the position of the last occurence of the string T in the
+## string S or 0 if no occurence is found.
+##
+## NOTE: this function does not work for arrays of strings.
 
-  ## usage: rindex (s, t)
-  ##
-  ## Returns the position of the last occurence of the string T in the
-  ## string S or 0 if no occurence is found.
-  ##
-  ## NOTE: this function does not work for arrays of strings.
+function n = rindex (s, t)
 
   ## This is patterned after the AWK function of the same name.
 
   ## Original version by Kurt Hornik <Kurt.Hornik@ci.tuwien.ac.at>.
 
   if (nargin != 2)
     usage ("rindex (s, t)");
   endif
diff --git a/scripts/strings/split.m b/scripts/strings/split.m
--- a/scripts/strings/split.m
+++ b/scripts/strings/split.m
@@ -12,25 +12,25 @@
 ### MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ### General Public License for more details.
 ###
 ### You should have received a copy of the GNU General Public License
 ### along with Octave; see the file COPYING.  If not, write to the Free
 ### Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ### 02111-1307, USA.
 
+## usage:  m = split (s, t)
+##
+## Divides the string S into pieces separated by T, and stores the
+## pieces as the rows of M (padded with blanks to form a valid
+## matrix).
+
 function m = split (s, t)
   
-  ## usage:  m = split (s, t)
-  ##
-  ## Divides the string S into pieces separated by T, and stores the
-  ## pieces as the rows of M (padded with blanks to form a valid
-  ## matrix).
-  
-  ## Original version by Kurt Hornik <Kurt.Hornik@ci.tuwien.ac.at>.
+## Original version by Kurt Hornik <Kurt.Hornik@ci.tuwien.ac.at>.
 
   if (nargin != 2)
     usage ("split (s, t)");
   endif
   
   if (isstr (s) && isstr (t))
   
   l_s = length (s);
diff --git a/scripts/strings/str2mat.m b/scripts/strings/str2mat.m
--- a/scripts/strings/str2mat.m
+++ b/scripts/strings/str2mat.m
@@ -12,23 +12,23 @@
 ### MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ### General Public License for more details.
 ###
 ### You should have received a copy of the GNU General Public License
 ### along with Octave; see the file COPYING.  If not, write to the Free
 ### Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ### 02111-1307, USA.
 
+## usage:  m = str2mat (s1, ...)
+##
+## Forms the matrix M containing the strings S1, ... as its rows.
+## Each string is padded with blanks in order to form a valid matrix.
+
 function m = str2mat (...)
   
-  ## usage:  m = str2mat (s1, ...)
-  ##
-  ## Forms the matrix M containing the strings S1, ... as its rows.
-  ## Each string is padded with blanks in order to form a valid matrix.
-
   ## Original version by Kurt Hornik <Kurt.Hornik@ci.tuwien.ac.at>.
 
   if (nargin == 0)
     usage ("str2mat (s1, ...)");
   endif
 
   nc = 0;
 
diff --git a/scripts/strings/strcmp.m b/scripts/strings/strcmp.m
--- a/scripts/strings/strcmp.m
+++ b/scripts/strings/strcmp.m
@@ -12,29 +12,29 @@
 ### MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ### General Public License for more details.
 ###
 ### You should have received a copy of the GNU General Public License
 ### along with Octave; see the file COPYING.  If not, write to the Free
 ### Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ### 02111-1307, USA.
 
-function status = strcmp (s1, s2)
+## usage: strcmp (s1, s2)
+##
+## Compare two strings.  Trailing blanks are significant.
+##
+## WARNING:  Unlike the C function of the same name, this function
+## returns 1 for equal and zero for not equal.  Why?  To be compatible
+## with Matlab, of course. 
+##
+## Why doesn't this always return a scalar instead of vector with
+## elements corresponding to the rows of the string array?  To be
+## compatible with Matlab, of course. 
 
-  ## usage: strcmp (s1, s2)
-  ##
-  ## Compare two strings.  Trailing blanks are significant.
-  ##
-  ## WARNING:  Unlike the C function of the same name, this function
-  ## returns 1 for equal and zero for not equal.  Why?  To be compatible
-  ## with Matlab, of course. 
-  ##
-  ## Why doesn't this always return a scalar instead of vector with
-  ## elements corresponding to the rows of the string array?  To be
-  ## compatible with Matlab, of course. 
+function status = strcmp (s1, s2)
 
   if (nargin != 2)
     usage ("strcmp (s, t)");
   endif
 
   status = 0;
   if (isstr (s1) && isstr(s2))
     c1 = columns (s1);
diff --git a/scripts/strings/strrep.m b/scripts/strings/strrep.m
--- a/scripts/strings/strrep.m
+++ b/scripts/strings/strrep.m
@@ -12,24 +12,24 @@
 ### MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ### General Public License for more details.
 ###
 ### You should have received a copy of the GNU General Public License
 ### along with Octave; see the file COPYING.  If not, write to the Free
 ### Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ### 02111-1307, USA.
 
+## usage:  strrep (s, x, y)
+##
+## Replace all occurences of the substring x of the string s with the
+## string y.
+
 function t = strrep (s, x, y)
   
-  ## usage:  strrep (s, x, y)
-  ##
-  ## Replace all occurences of the substring x of the string s with the
-  ## string y.
-  
-  ## Written by Kurt Hornik <Kurt.Hornik@ci.tuwien.ac.at> on 1994/10/11
+## Written by Kurt Hornik <Kurt.Hornik@ci.tuwien.ac.at> on 1994/10/11
   ## Updated by Kurt Hornik <Kurt.Hornik@ci.tuwien.ac.at> on 1996/05/25  
   
   if (nargin <> 3)
     usage ("strrep (s, x, y)");
   endif
   
   if (! (isstr (s) && isstr (x) && isstr (y)))
     error ("strrep: all arguments must be strings");
diff --git a/scripts/strings/substr.m b/scripts/strings/substr.m
--- a/scripts/strings/substr.m
+++ b/scripts/strings/substr.m
@@ -12,22 +12,22 @@
 ### MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ### General Public License for more details.
 ###
 ### You should have received a copy of the GNU General Public License
 ### along with Octave; see the file COPYING.  If not, write to the Free
 ### Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ### 02111-1307, USA.
 
-function t = substr (s, beg, len)
+## usage:  substr (s, beg, len)
+##
+## Returns the substring of S of length LEN starting at index BEG.
+## If LEN is missing, the substring extends to the end of S.
 
-  ## usage:  substr (s, beg, len)
-  ##
-  ## Returns the substring of S of length LEN starting at index BEG.
-  ## If LEN is missing, the substring extends to the end of S.
+function t = substr (s, beg, len)
 
   ## Original version by Kurt Hornik <Kurt.Hornik@ci.tuwien.ac.at>.
 
   if (nargin < 2 || nargin > 3)
     usage ("substr (s, beg, len)");
   endif
 
   if (isstr (s))
diff --git a/scripts/time/asctime.m b/scripts/time/asctime.m
--- a/scripts/time/asctime.m
+++ b/scripts/time/asctime.m
@@ -12,19 +12,19 @@
 ### MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ### General Public License for more details.
 ###
 ### You should have received a copy of the GNU General Public License
 ### along with Octave; see the file COPYING.  If not, write to the Free
 ### Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ### 02111-1307, USA.
 
-function retval = asctime (t)
+## usage: asctime (TMSTRUCT)
 
-  ## usage: asctime (TMSTRUCT)
+function retval = asctime (t)
 
   if (nargin == 1)
     retval = strftime ("%a %b %d %H:%M:%S %Y\n", t);
   else
     usage ("asctime (TMSTRUCT)");
   endif
 
 endfunction
diff --git a/scripts/time/clock.m b/scripts/time/clock.m
--- a/scripts/time/clock.m
+++ b/scripts/time/clock.m
@@ -12,23 +12,23 @@
 ### MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ### General Public License for more details.
 ###
 ### You should have received a copy of the GNU General Public License
 ### along with Octave; see the file COPYING.  If not, write to the Free
 ### Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ### 02111-1307, USA.
 
-function retval = clock ()
+## usage: clock ()
+##
+## Return current date and time in vector with elements
+##
+##   [ year, month, day-of-month, hour, minute, second ]
 
-  ## usage: clock ()
-  ##
-  ## Return current date and time in vector with elements
-  ##
-  ##   [ year, month, day-of-month, hour, minute, second ]
+function retval = clock ()
 
   tm = localtime (time ());
 
   retval = zeros (1, 6);
 
   retval(1) = tm.year + 1900;
   retval(2) = tm.mon + 1;
   retval(3) = tm.mday;
diff --git a/scripts/time/ctime.m b/scripts/time/ctime.m
--- a/scripts/time/ctime.m
+++ b/scripts/time/ctime.m
@@ -12,19 +12,19 @@
 ### MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ### General Public License for more details.
 ###
 ### You should have received a copy of the GNU General Public License
 ### along with Octave; see the file COPYING.  If not, write to the Free
 ### Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ### 02111-1307, USA.
 
-function retval = ctime (t)
+## usage: ctime (TIME)
 
-  ## usage: ctime (TIME)
+function retval = ctime (t)
 
   if (nargin == 1)
     retval = asctime (localtime (t));
   else
     usage ("ctime (TIME)");
   endif
 
 endfunction
diff --git a/scripts/time/date.m b/scripts/time/date.m
--- a/scripts/time/date.m
+++ b/scripts/time/date.m
@@ -12,17 +12,17 @@
 ### MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ### General Public License for more details.
 ###
 ### You should have received a copy of the GNU General Public License
 ### along with Octave; see the file COPYING.  If not, write to the Free
 ### Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ### 02111-1307, USA.
 
-function retval = date ()
+## usage: date ()
+##
+## Return current date in a string, in the form `18-Jul-94'.
 
-  ## usage: date ()
-  ##
-  ## Return current date in a string, in the form `18-Jul-94'.
+function retval = date ()
 
   retval = strftime ("%d-%b-%y", localtime (time ()));
 
 endfunction
