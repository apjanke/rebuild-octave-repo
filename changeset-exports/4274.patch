# HG changeset patch
# User jwe
# Date 1041624633 0
#      Fri Jan 03 20:10:33 2003 +0000
# Node ID f7660e7d9b80dd8171a1c91214e4538b835488d8
# Parent  d9f281027014275704b3d89a429c594d8b6f6a73
[project @ 2003-01-03 20:09:58 by jwe]

diff --git a/kpathsea/klibtool.config b/kpathsea/klibtool.config
--- a/kpathsea/klibtool.config
+++ b/kpathsea/klibtool.config
@@ -1,12 +1,12 @@
 LIBTOOL_OBJTYPES='STATIC:'
-shared_support=''
+shared_support='true'
 shared_ext='so'
 libpath_var='LD_LIBRARY_PATH'
-CC='gcc'
+CC='cc'
 args_STATIC_compile=''
-args_SHARED_compile='-fPIC'
+args_SHARED_compile='-KPIC'
 args_STATIC_archive=''
 STATIC_ranlib='ranlib'
-args_SHARED_archive='-shared'
+args_SHARED_archive='-G -z text'
 args_SHARED_link=''
 SHARED_postinstall=''
diff --git a/src/pt-bp.cc b/src/pt-bp.cc
--- a/src/pt-bp.cc
+++ b/src/pt-bp.cc
@@ -74,20 +74,20 @@ tree_breakpoint::visit_while_command (tr
   if (cmd.line () >= line)
     take_action (cmd);
 
   tree_expression *expr = cmd.condition ();
 
   if (expr)
     expr->accept (*this);
 
-  tree_statement_list *list = cmd.body ();
+  tree_statement_list *lst = cmd.body ();
 
-  if (list)
-    list->accept (*this);
+  if (lst)
+    lst->accept (*this);
 }
 
 void
 tree_breakpoint::visit_do_until_command (tree_do_until_command& cmd)
 {
   if (found)
     return;
 
@@ -238,40 +238,40 @@ tree_breakpoint::visit_simple_for_comman
   if (cmd.line () >= line)
     take_action (cmd);
 
   tree_expression *expr = cmd.control_expr ();
 
   if (expr)
     expr->accept (*this);
 
-  tree_statement_list *list = cmd.body ();
+  tree_statement_list *lst = cmd.body ();
 
-  if (list)
-    list->accept (*this);
+  if (lst)
+    lst->accept (*this);
 }
 
 void 
 tree_breakpoint::visit_complex_for_command (tree_complex_for_command& cmd)
 {
   if (found)
     return;
 
   if (cmd.line () >= line)
     take_action (cmd);
 
   tree_expression *expr = cmd.control_expr ();
 
   if (expr)
     expr->accept (*this);
 
-  tree_statement_list *list = cmd.body ();
+  tree_statement_list *lst = cmd.body ();
 
-  if (list)
-    list->accept (*this);
+  if (lst)
+    lst->accept (*this);
 
 }
 
 void 
 tree_breakpoint::visit_octave_user_function (octave_user_function& cmd)
 {
   // we should not visit octave user functions because the function we are currently 
   // in is the function where the breakpoint was requested
@@ -305,32 +305,32 @@ tree_breakpoint::visit_if_clause (tree_i
   if (found)
     return;
 
   tree_expression *expr = cmd.condition ();
 
   if (expr)
     expr->accept (*this);
 
-  tree_statement_list *list = cmd.commands ();
+  tree_statement_list *lst = cmd.commands ();
 
-  if (list)
-    list->accept (*this);
+  if (lst)
+    lst->accept (*this);
 }
 
 void
 tree_breakpoint::visit_if_command (tree_if_command& cmd)
 {
   if (found)
     return;
 
-  tree_if_command_list *list = cmd.cmd_list ();
+  tree_if_command_list *lst = cmd.cmd_list ();
 
-  if (list)
-    list->accept (*this);
+  if (lst)
+    lst->accept (*this);
 }
 
 void
 tree_breakpoint::visit_if_command_list (tree_if_command_list& lst)
 {
   if (found)
     return;
 
@@ -405,20 +405,20 @@ tree_breakpoint::visit_cell (tree_cell& 
 }
 
 void 
 tree_breakpoint::visit_multi_assignment (tree_multi_assignment& expr)
 {
   if (found)
     return;
 
-  tree_argument_list *list = expr.left_hand_side ();
+  tree_argument_list *lst = expr.left_hand_side ();
 
-  if (list)
-    list->accept (*this);
+  if (lst)
+    lst->accept (*this);
 
   tree_expression *rhs = expr.right_hand_side ();
 
   if (rhs)
     rhs->accept (*this);
 }
 
 void 
