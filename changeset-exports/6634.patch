# HG changeset patch
# User dbateman
# Date 1179524293 0
#      Fri May 18 21:38:13 2007 +0000
# Node ID 8c2fff7b50b0e4f59a6f87df28a37c34673636fe
# Parent  5af6275fbca90c793116e5f2e4fc410f3220d1fc
[project @ 2007-05-18 21:38:13 by dbateman]

diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,8 +1,16 @@
+2007-05-18  David Bateman  <dbateman@free.fr>
+
+	* pkg/pkg.m (install): More verbosity. 
+	(configure_make): Ditto.
+	(create_pkgadddel): Install in architecture dependent directory if
+	it exists to address issues with autoload/mfilename.
+	(write_INDEX): Check in archiecture dependent directories as well.
+
 2007-05-17  David Bateman  <dbateman@free.fr>
 
 	* plot/hbar.m: Remove.
 	* plot/barh.m: and move it here.
 
 2007-05-16  Søren Hauberg  <soren@hauberg.org>
 
 	* general/sub2ind.m, general/ind2sub.m: Doc fix.
diff --git a/scripts/pkg/pkg.m b/scripts/pkg/pkg.m
--- a/scripts/pkg/pkg.m
+++ b/scripts/pkg/pkg.m
@@ -297,22 +297,28 @@ function install (files, handle_deps, au
     files = glob (files);
     packages_to_uninstall = [];
     for i = 1:length (files)
       tgz = files{i};
 
       ## Create a temporary directory 
       tmpdir = tmpnam ();
       tmpdirs{end+1} = tmpdir;
+      if (verbose)
+	printf ("mkdir (%s)\n", tmpdir);
+      endif
       [status, msg] = mkdir (tmpdir);
       if (status != 1)
 	error ("couldn't create temporary directory: %s", msg);
       endif
 
       ## Uncompress the package
+      if (verbose)
+	printf ("untar (%s, %s)\n", tgz, tmpdir);
+      endif
       untar (tgz, tmpdir);
 
       ## Get the name of the directories produced by tar
       [dirlist, err, msg] = readdir (tmpdir);
       if (err)
 	error ("couldn't read directory produced by tar: %s", msg);
       endif
 
@@ -755,23 +761,33 @@ function configure_make (desc, packdir, 
       filenames = split_by (filenames, " ");
       archdependent = split_by (archdependent, " ");
       archindependent = split_by (archindependent, " ");
     endif
 
     if (! all (isspace (filenames)))
 	mkdir (instdir);
 	if (! all (isspace (archindependent)))
+	  if (verbose)
+	    printf ("copyfile");
+	    printf (" %s", archindependent{:});
+	    printf ("%s\n", instdir);
+	  endif
 	  [status, output] = copyfile (archindependent, instdir);
 	  if (status != 1)
 	    rm_rf (desc.dir);
 	    error ("Couldn't copy files from 'src' to 'inst': %s", output);
 	  endif
         endif
 	if (! all (isspace (archdependent)))
+	  if (verbose)
+	    printf ("copyfile");
+	    printf (" %s", archdependent{:});
+	    printf (" %s\n", archdir);
+	  endif
 	  mkdir (archdir);
 	  [status, output] = copyfile (archdependent, archdir);
 	  if (status != 1)
 	    rm_rf (desc.dir);
 	    error ("Couldn't copy files from 'src' to 'inst': %s", output);
 	  endif
         endif
     endif
@@ -794,17 +810,26 @@ function pkg = extract_pkg (nm, pat)
     if (! isempty (pkg))
       pkg = strcat (pkg, "\n");
     endif
     fclose (fid);
   endif
 endfunction
 
 function create_pkgadddel (desc, packdir, nm)
-  pkg = fullfile (desc.dir, nm);
+  archdir = fullfile (desc.dir, getarch ());
+
+  ## If it is exists, the PKG_* files should go into the architecture
+  ## dependent directory so that the autoload/mfilename commands work
+  ## as expected...
+  if (exist (archdir, "dir"))
+    pkg = fullfile (desc.dir, getarch(), nm);
+  else
+    pkg = fullfile (desc.dir, nm);
+  endif
   fid = fopen (pkg, "wt");
 
   if (fid >= 0)
     ## Search all dot-m files for PKG commands
     lst = dir (fullfile(packdir, "inst", "*.m"));
     for i = 1:length (lst)
       nam = fullfile(packdir, "inst", lst(i).name);
       fwrite (fid, extract_pkg (nam, ['^[#%][#%]* *' nm ': *(.*)$']));
@@ -1133,16 +1158,27 @@ endfunction
 ##   'INDEX' is the name (including path) of resulting INDEX file.
 function write_INDEX (desc, dir, INDEX)
   ## Get names of functions in dir
   [files, err, msg] = readdir (dir);
   if (err)
     error ("couldn't read directory %s: %s", dir, msg);
   endif
 
+  ## Check for architecture dependent files
+  arch = getarch();
+  tmpdir = fullfile (dir, arch);
+  if (exist (tmpdir, "dir"))
+    [files2, err, msg] = readdir (tmpdir);
+    if (err)
+      error ("couldn't read directory %s: %s", tmpdir, msg);
+    endif
+    files = [files; files2];    
+  endif
+
   functions = {};
   for i = 1:length (files)
     file = files{i};
     lf = length (file);
     if (lf > 2 && strcmp (file(end-1:end), ".m"))
       functions{end+1} = file(1:end-2);
     elseif (lf > 4 && strcmp (file(end-3:end), ".oct"))
       functions{end+1} = file(1:end-4);
