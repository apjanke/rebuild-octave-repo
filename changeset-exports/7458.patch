# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1202441771 18000
#      Thu Feb 07 22:36:11 2008 -0500
# Node ID 1032e24f199f6679577c9f73af138913705d27d5
# Parent  aab45fbcd71ffed9cdcc91dbd91f857cc38984c4
make sort work for ranges

diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,10 +1,18 @@
 2008-02-07  John W. Eaton  <jwe@octave.org>
 
+	* Range.cc (Range::sort_internal): Rename from sort.  New arg,
+	ASCENDING, with default value of true.
+	(Range::sort_internal (Array<octave_idx_type>&, bool)): New function.
+	(Range::sort (octave_idx_type, sortmode) const): New function.
+	(Range::sort (Array<octave_idx_type>&, octave_idx_type, sortmode)
+	const): New function.
+	* Range.h: Fix/provide decls.
+
 	* intNDArray.cc (intNDArray<T>::any (int)): Use != for comparison.
 
 2008-02-06  John W. Eaton  <jwe@octave.org>
 
 	* Makefile.in ($(OPTS_INC)): Use mv instead of move-if-change.
 	(stamp-prereq): Eliminate.
 	(clean): Don't remove stamp-prereq.
 	(libraries): Don't depend on stamp-prereq.
diff --git a/liboctave/Range.cc b/liboctave/Range.cc
--- a/liboctave/Range.cc
+++ b/liboctave/Range.cc
@@ -26,16 +26,17 @@ along with Octave; see the file COPYING.
 #endif
 
 #include <cfloat>
 
 #include <iostream>
 #include <limits>
 
 #include "Range.h"
+#include "lo-error.h"
 #include "lo-mappers.h"
 #include "lo-math.h"
 #include "lo-utils.h"
 
 bool
 Range::all_elements_are_ints (void) const
 {
   // If the base and increment are ints, the final value in the range
@@ -114,26 +115,127 @@ Range::max (void) const
 	}
       else
 	retval = rng_base;
     }
   return retval;
 }
 
 void
-Range::sort (void)
+Range::sort_internal (bool ascending)
 {
-  if (rng_base > rng_limit && rng_inc < 0.0)
+  if (ascending && rng_base > rng_limit && rng_inc < 0.0)
     {
       double tmp = rng_base;
       rng_base = min ();
       rng_limit = tmp;
       rng_inc = -rng_inc;
       clear_cache ();
     }
+  else if (rng_base < rng_limit && rng_inc > 0.0)
+    {
+      double tmp = rng_limit;
+      rng_limit = min ();
+      rng_base = tmp;
+      rng_inc = -rng_inc;
+      clear_cache ();
+    }
+}
+
+void
+Range::sort_internal (Array<octave_idx_type>& sidx, bool ascending)
+{
+  octave_idx_type nel = nelem ();
+
+  sidx.resize (dim_vector (1, nel));
+
+  octave_idx_type *psidx = sidx.fortran_vec ();
+
+  bool reverse = false;
+
+  if (ascending && rng_base > rng_limit && rng_inc < 0.0)
+    {
+      double tmp = rng_base;
+      rng_base = min ();
+      rng_limit = tmp;
+      rng_inc = -rng_inc;
+      clear_cache ();
+      reverse = true;
+    }
+  else if (! ascending && rng_base < rng_limit && rng_inc > 0.0)
+    {
+      double tmp = rng_limit;
+      rng_limit = min ();
+      rng_base = tmp;
+      rng_inc = -rng_inc;
+      clear_cache ();
+      reverse = true;
+    }
+
+  octave_idx_type tmp = reverse ? nel - 1 : 0;
+  octave_idx_type inc = reverse ? -1 : 1;
+
+  for (octave_idx_type i = 0; i < nel; i++, tmp += inc)
+    psidx[i] = tmp;
+
+}
+
+Range
+Range::sort (octave_idx_type dim, sortmode mode) const
+{
+  Range retval = *this;
+
+  if (dim == 1)
+    {
+      switch (mode)
+	{
+	case ASCENDING:
+	  retval.sort_internal (true);
+	  break;
+
+	case DESCENDING:
+	  retval.sort_internal (false);
+	  break;
+
+	default:
+	  (*current_liboctave_error_handler) ("Range::sort: invalid sort mode");
+	}
+    }
+  else if (dim != 0)
+    (*current_liboctave_error_handler) ("Range::sort: invalid dimension");
+
+  return retval;
+}
+
+Range
+Range::sort (Array<octave_idx_type>& sidx, octave_idx_type dim,
+	     sortmode mode) const
+{
+  Range retval = *this;
+
+  if (dim == 1)
+    {
+      switch (mode)
+	{
+	case ASCENDING:
+	  retval.sort_internal (sidx, true);
+	  break;
+
+	case DESCENDING:
+	  retval.sort_internal (sidx, false);
+	  break;
+
+	default:
+	  (*current_liboctave_error_handler) ("Range::sort: invalid sort mode");
+	}
+    }
+  else if (dim != 0)
+    (*current_liboctave_error_handler) ("Range::sort: invalid dimension");
+
+  return retval;
 }
 
 std::ostream&
 operator << (std::ostream& os, const Range& a)
 {
   double b = a.base ();
   double increment = a.inc ();
   octave_idx_type num_elem = a.nelem ();
diff --git a/liboctave/Range.h b/liboctave/Range.h
--- a/liboctave/Range.h
+++ b/liboctave/Range.h
@@ -20,17 +20,19 @@ along with Octave; see the file COPYING.
 <http://www.gnu.org/licenses/>.
 
 */
 
 #if !defined (octave_Range_h)
 #define octave_Range_h 1
 
 #include <iostream>
+
 #include "dMatrix.h"
+#include "oct-sort.h"
 
 class
 OCTAVE_API
 Range
 {
  public:
 
   Range (void)
@@ -55,17 +57,23 @@ Range
 
   bool all_elements_are_ints (void) const;
 
   Matrix matrix_value (void) const;
 
   double min (void) const;
   double max (void) const;
 
-  void sort (void);
+  void sort_internal (bool ascending = true);
+  void sort_internal (Array<octave_idx_type>& sidx, bool ascending = true);
+
+  Range sort (octave_idx_type dim = 0, sortmode mode = UNDEFINED) const;
+
+  Range sort (Array<octave_idx_type>& sidx, octave_idx_type dim = 0,
+	      sortmode mode = UNDEFINED) const;
 
   void set_base (double b)
   {
     if (rng_base != b)
       {
 	rng_base = b;
 	clear_cache ();
       }
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,12 @@
+2008-02-07  John W. Eaton  <jwe@octave.org>
+
+	* ov-range.h (octave_range::sort): New functions.
+
 2008-02-07  David Bateman  <dbateman@free.fr>
 
 	* Makefile.in (DLD_XSRC): Delete spkron.cc.
 	* DLD-FUNCTIONS/spkron.cc: Delete.
 	* DLD-FUNCTIONS/kron.cc: Include here and dispatch to the sparse
 	version if either argument is sparse.
 
 2008-02-06  John W. Eaton  <jwe@octave.org>
diff --git a/src/ov-range.h b/src/ov-range.h
--- a/src/ov-range.h
+++ b/src/ov-range.h
@@ -127,16 +127,23 @@ public:
   bool is_constant (void) const { return true; }
 
   bool is_range (void) const { return true; }
 
   octave_value all (int dim = 0) const;
 
   octave_value any (int dim = 0) const;
 
+  octave_value sort (octave_idx_type dim = 0, sortmode mode = UNDEFINED) const
+    { return range.sort (dim, mode); }
+
+  octave_value sort (Array<octave_idx_type>& sidx, octave_idx_type dim = 0,
+		     sortmode mode = UNDEFINED) const
+    { return range.sort (sidx, dim, mode); }
+
   bool is_real_type (void) const { return true; }
 
   bool is_double_type (void) const { return true; }
 
   bool valid_as_scalar_index (void) const
     {
       double b = range.base ();
       return (range.nelem () == 1
