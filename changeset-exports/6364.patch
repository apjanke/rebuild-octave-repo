# HG changeset patch
# User jwe
# Date 1172589515 0
#      Tue Feb 27 15:18:35 2007 +0000
# Node ID 0d41cafd2e0dd0835ff2dab230705d5464334478
# Parent  e5227a46343d83999abe57b537acc011ac58f194
[project @ 2007-02-27 15:18:35 by jwe]

diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,8 +1,12 @@
+2007-02-27  From Michael Goffioul  <michael.goffioul@swing.be>
+
+	* pkg/pkg.m: Use fullfile to create filenames from parts.
+
 2007-02-26  From Michael Goffioul  <michael.goffioul@swing.be>
 
 	* Makefile.in, audio/Makefile.in, control/Makefile.in,
 	control/base/Makefile.in, control/hinf/Makefile.in,
 	control/obsolete/Makefile.in, control/system/Makefile.in,
 	control/util/Makefile.in, deprecated/Makefile.in,
 	elfun/Makefile.in, finance/Makefile.in, general/Makefile.in,
 	image/Makefile.in, io/Makefile.in, linear-algebra/Makefile.in,
diff --git a/scripts/pkg/pkg.m b/scripts/pkg/pkg.m
--- a/scripts/pkg/pkg.m
+++ b/scripts/pkg/pkg.m
@@ -122,25 +122,25 @@
 ## @end deftypefn
 
 ## PKG_ADD: mark_as_command pkg
 ## PKG_ADD: pkg ("load", "auto");
 
 function [local_packages, global_packages] = pkg(varargin)
     ## Installation prefix (XXX: what should these be on windows?)
     persistent prefix = -1;
-    persistent local_list = tilde_expand("~/.octave_packages");
-    persistent global_list = fullfile (OCTAVE_HOME (), "/share/octave/octave_packages");
+    persistent local_list = tilde_expand(fullfile("~", ".octave_packages"));
+    persistent global_list = fullfile (OCTAVE_HOME (), "share", "octave", "octave_packages");
     mlock;
 
     if (prefix == -1)
         if (issuperuser())
-            prefix = fullfile (OCTAVE_HOME (), "/share/octave/packages");
+            prefix = fullfile (OCTAVE_HOME (), "share", "octave", "packages");
         else
-            prefix = "~/octave";
+            prefix = fullfile ("~", "octave");
         endif
     endif
     prefix = tilde_expand(prefix);
 
     ## Handle input
     if (length(varargin) == 0 || !iscellstr(varargin))
         print_usage();
     endif
@@ -198,17 +198,17 @@ function [local_packages, global_package
             unload_packages(files, deps, local_list, global_list);
         case "prefix"
             if (length(files) == 0 && nargout == 0)
                 disp(prefix);
             elseif (length(files) == 0 && nargout == 1)
                 local_packages = prefix;
             elseif (length(files) == 1 && nargout == 0 && ischar(files{1}))
                 prefix = files{1};
-                #if (!strcmp(prefix(end), "/")) prefix(end+1) = "/"; endif
+                #if (!strcmp(prefix(end), filesep)) prefix(end+1) = filesep; endif
             else
                 error("You must specify a prefix directory, or request an output argument");
             endif
         case "local_list"
             if (length(files) == 0 && nargout == 0)
                 disp(local_list);
             elseif (length(files) == 0 && nargout == 1)
                 local_packages = local_list;
@@ -600,31 +600,32 @@ function uninstall(pkgnames, handle_deps
 endfunction
 
 ##########################################################
 ##         A U X I L A R Y    F U N C T I O N S         ##
 ##########################################################
 
 function prepare_installation(desc, packdir)
     ## Is there a pre_install to call?
-    if (exist([packdir "pre_install.m"], "file"))
+    if (exist(fullfile(packdir, "pre_install.m"), "file"))
         wd = pwd();
         try
             cd(packdir);
             pre_install(desc); 
             cd(wd);
         catch
             cd(wd);
             error("The pre-install function returned the following error: %s", lasterr);
         end_try_catch
     endif
 
     ## If the directory "inst" doesn't exist, we create it
-    if (!exist([packdir "inst"], "dir"))
-        [status, msg] = mkdir([packdir "inst"]);
+    inst_dir = fullfile(packdir, "inst");
+    if (!exist(inst_dir, "dir"))
+        [status, msg] = mkdir(inst_dir);
         if (status != 1)
             rm_rf(desc.dir);
             error("The 'inst' directory did not exist and could not be created: %s", msg);
         endif
     endif
 endfunction
 
 function configure_make (desc, packdir)   
