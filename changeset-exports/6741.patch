# HG changeset patch
# User jwe
# Date 1182182834 0
#      Mon Jun 18 16:07:14 2007 +0000
# Node ID 00116015904db1505e72560d4c35d5bc086a5014
# Parent  605ea655366d6fc609f34d0b6c7b351b1dc96c13
[project @ 2007-06-18 16:07:14 by jwe]

diff --git a/doc/ChangeLog b/doc/ChangeLog
--- a/doc/ChangeLog
+++ b/doc/ChangeLog
@@ -1,8 +1,16 @@
+2007-06-18  Søren Hauberg  <hauberg@gmail.com>
+
+        * interpreter/optim.txi: Added some introductory text to each
+	section.
+
+        * interpreter/set.txi: Added some introductory text.
+        * interpreter/octave.texi: Updated to reflect changes in set.txi.
+
 2007-06-15  David Bateman  <dbateman@free.fr>
 
 	* faq/Octave-FAQ.texi: Document the gnuplot 4.2 bug using pipes.
 
 2007-06-15  Paul Kienzle  <pkienzle@users.sf.net>
 
 	* interpreter/testfun.txi: Provide a clue to using xtest for assert.
 
diff --git a/doc/interpreter/octave.texi b/doc/interpreter/octave.texi
--- a/doc/interpreter/octave.texi
+++ b/doc/interpreter/octave.texi
@@ -144,17 +144,17 @@ It corresponds to GNU Octave version @va
 * Input and Output::            
 * Plotting::                    
 * Matrix Manipulation::         
 * Arithmetic::                  
 * Bit Manipulations::
 * Linear Algebra::              
 * Nonlinear Equations::         
 * Sparse Matrices::
-* Quadrature::                  
+* Numerical Integration::                  
 * Differential Equations::      
 * Optimization::                
 * Statistics::                  
 * Financial Functions::         
 * Sets::                        
 * Polynomial Manipulations::    
 * Interpolation::
 * Geometry::
@@ -408,20 +408,21 @@ Linear Algebra
 
 Sparse Matrices
 
 * Basics::
 * Sparse Linear Algebra::
 * Iterative Techniques::
 * Real Life Example::
 
-Quadrature
+Numerical Integration
 
 * Functions of One Variable::   
 * Orthogonal Collocation::      
+* Functions of Multiple Variables:: 
 
 Differential Equations
 
 * Ordinary Differential Equations::  
 * Differential-Algebraic Equations::  
 
 Optimization
 
@@ -431,16 +432,20 @@ Optimization
 
 Statistics
 
 * Basic Statistical Functions::  
 * Tests::                       
 * Models::                      
 * Distributions::               
 
+Sets
+
+* Set Operations::
+
 Interpolation
 * One-dimensional Interpolation::
 * Multi-dimensional Interpolation::
 
 Control Theory
 
 * sysstruct::                   
 * sysinterface::                
diff --git a/doc/interpreter/optim.txi b/doc/interpreter/optim.txi
--- a/doc/interpreter/optim.txi
+++ b/doc/interpreter/optim.txi
@@ -1,15 +1,20 @@
 @c Copyright (C) 1996, 1997 John W. Eaton
 @c This is part of the Octave manual.
 @c For copying conditions, see the file gpl.texi.
 
 @node Optimization
 @chapter Optimization
 
+Octave comes with support for solving various kinds of optimization
+problems. Specifically Octave can solve problems in Linear Programming,
+Quadratic Programming, Nonlinear Programming, and Linear Least Squares
+Minimization.
+
 @menu
 * Linear Programming::       
 * Quadratic Programming::       
 * Nonlinear Programming::       
 * Linear Least Squares::        
 @end menu
 
 @c @cindex linear programming
@@ -18,26 +23,103 @@
 @cindex optimization
 @cindex LP
 @cindex QP
 @cindex NLP
 
 @node Linear Programming
 @section Linear Programming
 
+Octave can solve Linear Programming problems using the @code{glpk}
+function.  That is, Octave can solve
+
+@iftex
+@tex
+$$
+  \min_x c^T x
+$$
+@end tex
+@end iftex
+@ifnottex
+@example
+min C'*x
+@end example
+@end ifnottex
+subject to the linear constraints
+@iftex
+@tex
+$Ax = b$ where $x \geq 0$.
+@end tex
+@end iftex
+@ifnottex
+@math{A*x = b} where @math{x >= 0}.
+@end ifnottex
+
+@noindent
+The @code{glpk} function also supports variations of this problem.
+
 @DOCSTRING(glpk)
 
 @node Quadratic Programming
 @section Quadratic Programming
 
+Octave can also solve Quadratic Programming problems, this is
+@iftex
+@tex
+$$
+ \min_x {1 \over 2} x^T H x + x^T q
+$$
+@end tex
+@end iftex
+@ifnottex
+@example
+min 0.5 x'*H*x + x'*q
+@end example
+@end ifnottex
+subject to
+@iftex
+@tex
+$$
+ Ax = b \qquad lb \leq x \leq ub \qquad A_{lb} \leq A_{in} \leq A_{ub}
+$$
+@end tex
+@end iftex
+@ifnottex
+@example
+     A*x = b
+     lb <= x <= ub
+     A_lb <= A_in*x <= A_ub
+@end example
+@end ifnottex
+
 @DOCSTRING(qp)
 
 @node Nonlinear Programming
 @section Nonlinear Programming
 
+Octave can also perform general nonlinear minimization using a
+successive quadratic programming solver.
+
 @DOCSTRING(sqp)
 
 @node Linear Least Squares
 @section Linear Least Squares
 
+Octave also supports linear least squares minimization.  That is,
+Octave can find the parameter @math{b} such the the model
+@iftex
+@tex
+$y = xb$
+@end tex
+@end iftex
+@ifnottex
+@math{y = x*b}
+@end ifnottex
+fits data @math{(x,y)} as good as possible, assuming zero-mean
+Gaussian noise.  If the noise is assumed to be isotropic the problem
+can be solved using the @samp{\} or @samp{/} operators, or the @code{ols}
+function.  In the general case where the noise is assumed to be anisotropic
+the @code{gls} is needed.
+
+@DOCSTRING(ols)
+
 @DOCSTRING(gls)
 
-@DOCSTRING(ols)
diff --git a/doc/interpreter/quad.txi b/doc/interpreter/quad.txi
--- a/doc/interpreter/quad.txi
+++ b/doc/interpreter/quad.txi
@@ -1,45 +1,77 @@
 @c Copyright (C) 1996, 1997 John W. Eaton
 @c This is part of the Octave manual.
 @c For copying conditions, see the file gpl.texi.
 
-@node Quadrature
-@chapter Quadrature
+@node Numerical Integration
+@chapter Numerical Integration
+
+Octave comes with several built-in functions for computing the integral
+of a function numerically.  These functions all solve 1-dimensional
+integration problems.
 
 @menu
-* Functions of One Variable::   
+* Functions of One Variable:: 
+* Functions of Multiple Variables:: 
 * Orthogonal Collocation::      
 @end menu
 
 @node Functions of One Variable
 @section Functions of One Variable
 
+Octave supports three different algorithms for computing the integral
+@iftex
+@tex
+$$
+ \int_a^b f(x) d x
+$$
+@end tex
+@end iftex
+of a function @math{f} over the interval from @math{a} to @math{b}.
+These are
+
+@table @code
+@item quad
+Numerical integration based on Gaussian quadrature.
+
+@item quadl
+Numerical integration using an adaptive Lobatto rule.
+
+@item trapz
+Numerical integration using the trapezodial method.
+@end table
+
+@noindent
+Besides these functions Octave also allows you to perform cumulative
+numerical integration using the trapezodial method through the
+@code{cumtrapz} function.
+
 @DOCSTRING(quad)
 
 @DOCSTRING(quad_options)
 
 Here is an example of using @code{quad} to integrate the function
 @iftex
 @tex
 $$
  f(x) = x \sin (1/x) \sqrt {|1 - x|}
 $$
 from $x = 0$ to $x = 3$.
 @end tex
 @end iftex
-@ifinfo
+@ifnottex
 
 @example
   @var{f}(@var{x}) = @var{x} * sin (1/@var{x}) * sqrt (abs (1 - @var{x}))
 @end example
 
 @noindent
 from @var{x} = 0 to @var{x} = 3.
-@end ifinfo
+@end ifnottex
 
 This is a fairly difficult integration (plot the function over the range
 of integration to see why).
 
 The first step is to define the function:
 
 @example
 @group
@@ -84,32 +116,32 @@ if you move the lower bound to 0.1, then
 Here is an example of using @code{colloc} to generate weight matrices
 for solving the second order differential equation
 @iftex
 @tex
 $u^\prime - \alpha u^{\prime\prime} = 0$ with the boundary conditions
 $u(0) = 0$ and $u(1) = 1$.
 @end tex
 @end iftex
-@ifinfo
+@ifnottex
 @var{u}' - @var{alpha} * @var{u}'' = 0 with the boundary conditions
 @var{u}(0) = 0 and @var{u}(1) = 1.
-@end ifinfo
+@end ifnottex
 
 First, we can generate the weight matrices for @var{n} points (including
 the endpoints of the interval), and incorporate the boundary conditions
 in the right hand side (for a specific value of
 @iftex
 @tex
 $\alpha$).
 @end tex
 @end iftex
-@ifinfo
+@ifnottex
 @var{alpha}).
-@end ifinfo
+@end ifnottex
 
 @example
 @group
 n = 7;
 alpha = 0.1;
 [r, a, b] = colloc (n-2, "left", "right");
 at = a(2:n-1,2:n-1);
 bt = b(2:n-1,2:n-1);
@@ -118,8 +150,90 @@ rhs = alpha * b(2:n-1,n) - a(2:n-1,n);
 @end example
 
 Then the solution at the roots @var{r} is
 
 @example
 u = [ 0; (at - alpha * bt) \ rhs; 1]
      @result{} [ 0.00; 0.004; 0.01 0.00; 0.12; 0.62; 1.00 ]
 @end example
+
+@node Functions of Multiple Variables
+@section Functions of Multiple Variables
+
+Octave does not have built-in functions for computing the integral
+of functions of multiple variables.  It is however possible to compute
+the integral of a function of multiple variables using the functions
+for one-dimensional integrals.
+
+To illustrate how the integration can be performed, we will integrate
+the function
+@iftex
+@tex
+$$
+  f(x, y) = \sin(\pi x y)\sqrt{x y}
+$$
+@end tex
+@end iftex
+@ifnottex
+@example
+f(x, y) = sin(pi*x*y)*sqrt(x*y)
+@end example
+@end ifnottex
+for @math{x} and @math{y} between 0 and 1.
+
+The first approach creates a function that integrates @math{f} with
+respect to @math{x}, and then integrates that function with respect to
+@math{y}.  Since @code{quad} is written in Fortran it cannot be called
+recursively.  This means that @code{quad} cannot integrate a function
+that calls @code{quad}, and hence cannot be used to perform the double
+integration.  It is however possible with @code{quadl}, which is what
+the following code does.
+
+@example
+function I = g(y)
+  I = ones(1, length(y));
+  for i = 1:length(y)
+    f = @@(x) sin(pi.*x.*y(i)).*sqrt(x.*y(i));
+    I(i) = quadl(f, 0, 1);
+  endfor
+endfunction
+
+I = quadl("g", 0, 1)
+      @result{} 0.30022
+@end example
+
+The above mentioned approach works but is fairly slow, and that problem
+increases exponentially with the dimensionality the problem.  Another
+possible solution is to use Orthogonal Collocation as described in the
+previous section.  The integral of a function @math{f(x,y)} for
+@math{x} and @math{y} between 0 and 1 can be approximated using @math{n}
+points by
+@iftex
+@tex
+$$
+ \int_0^1 \int_0^1 f(x,y) d x d y \approx \sum_{i=1}^n \sum_{j=1}^n q_i q_j f(r_i, r_j),
+$$
+@end tex
+@end iftex
+@ifnottex
+the sum over @code{i=1:n} and @code{j=1:n} of @code{q(i)*q(j)*f(r(i),r(j))},
+@end ifnottex
+where @math{q} and @math{r} is as returned by @code{colloc(n)}.  The
+generalisation to more than two variables is straight forward.  The
+following code computes the studied integral using @math{n=7} points.
+
+@example
+f = @@(x,y) sin(pi*x*y').*sqrt(x*y');
+n = 7;
+[t, A, B, q] = colloc(n);
+I = q'*f(t,t)*q;
+      @result{} 0.30022
+@end example
+
+@noindent
+It should be noted that the number of points determines the quality
+of the approximation.  If the integration needs to be performed between
+@math{a} and @math{b} instead of 0 and 1, a change of variables is needed.
+
+
+
+
diff --git a/doc/interpreter/set.txi b/doc/interpreter/set.txi
--- a/doc/interpreter/set.txi
+++ b/doc/interpreter/set.txi
@@ -1,23 +1,45 @@
 @c Copyright (C) 1996, 1997 John W. Eaton
 @c This is part of the Octave manual.
 @c For copying conditions, see the file gpl.texi.
 
 @node Sets
 @chapter Sets
 
 Octave has a limited set of functions for managing sets of data, where a
-set is defined as a collection unique elements.
+set is defined as a collection unique elements.  In Octave a set is
+represented as a vector of numbers.
 
 @DOCSTRING(create_set)
 
-@DOCSTRING(ismember)
+@DOCSTRING(unique)
+
+@menu
+* Set Operations:: 
+@end menu
+
+@node Set Operations
+@section Set Operations
 
-@DOCSTRING(unique)
+Octave supports the basic set operations.  That is, Octave can compute
+the union, intersection, complement, and difference of two sets.
+Octave can also supports the @emph{Exclusive Or} set operation, and
+membership determination.  The functions for set operations all work in
+pretty much the same way.  As an example, assume that @code{x} and
+@code{y} contains two sets, then
+
+@example
+union(x, y)
+@end example
+
+@noindent
+computes the union of the two sets.
+
+@DOCSTRING(ismember)
 
 @DOCSTRING(union)
 
 @DOCSTRING(intersect)
 
 @DOCSTRING(complement)
 
 @DOCSTRING(setdiff)
diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,8 +1,14 @@
+2007-06-18  Søren Hauberg  <hauberg@gmail.com>
+
+        * optimization/glpk.m: TeXified the help text.
+        * optimization/qp.m: TeXified the help text.
+        * optimization/sqp.m: TeXified the help text.
+
 2007-06-16  Søren Hauberg  <hauberg@gmail.com>
 
         * plot/legend.m: Replace 'vargin' with 'varargin'.
 
 2007-06-15  John W. Eaton  <jwe@octave.org>
 
 	* plot/__go_draw_axes__.m: Only attempt label rotation if
 	have_newer_gnuplot is true.
diff --git a/scripts/general/cumtrapz.m b/scripts/general/cumtrapz.m
--- a/scripts/general/cumtrapz.m
+++ b/scripts/general/cumtrapz.m
@@ -18,19 +18,19 @@
 ## 02110-1301, USA.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {@var{z} =} cumtrapz (@var{y})
 ## @deftypefnx {Function File} {@var{z} =} cumtrapz (@var{x}, @var{y})
 ## @deftypefnx {Function File} {@var{z} =} cumtrapz (@dots{}, @var{dim})
 ## 
 ## Cumulative numerical intergration using trapezodial method.
-## @code{trapz (@var{y})} computes the cummulative integral of the 
+## @code{cumtrapz (@var{y})} computes the cummulative integral of the 
 ## @var{y} along the first non singleton dimension. If the argument 
-## @var{x} is omitted a equally spaced vector is assumed. @code{trapz 
+## @var{x} is omitted a equally spaced vector is assumed. @code{cumtrapz 
 ## (@var{x}, @var{y})} evaluates the cummulative integral with respect 
 ## to @var{x}.
 ##  
 ## @seealso{trapz,cumsum}
 ## @end deftypefn
 
 ## Author:	Kai Habel <kai.habel@gmx.de>
 ##
diff --git a/scripts/optimization/glpk.m b/scripts/optimization/glpk.m
--- a/scripts/optimization/glpk.m
+++ b/scripts/optimization/glpk.m
@@ -17,44 +17,80 @@
 ## Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
 ## 02110-1301, USA.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {[@var{xopt}, @var{fmin}, @var{status}, @var{extra}] =} glpk (@var{c}, @var{a}, @var{b}, @var{lb}, @var{ub}, @var{ctype}, @var{vartype}, @var{sense}, @var{param})
 ## Solve a linear program using the GNU GLPK library.  Given three
 ## arguments, @code{glpk} solves the following standard LP:
 ## 
+## @iftex
+## @tex
+## $$
+##   \min_x C^T x
+## $$
+## @end tex
+## @end iftex
+## @ifnottex
 ## @example
 ## min C'*x
 ## @end example
+## @end ifnottex
 ## 
 ## subject to
 ## 
+## @iftex
+## @tex
+## $$
+##   Ax = b \qquad x \geq 0
+## $$
+## @end tex
+## @end iftex
+## @ifnottex
 ## @example
 ## @group
 ## A*x  = b
 ##   x >= 0
 ## @end group
 ## @end example
+## @end ifnottex
 ## 
 ## but may also solve problems of the form
 ## 
+## @iftex
+## @tex
+## $$
+##   [ \min_x | \max_x ] C^T x
+## $$
+## @end tex
+## @end iftex
+## @ifnottex
 ## @example
 ## [ min | max ] C'*x
 ## @end example
+## @end ifnottex
 ## 
 ## subject to
 ## 
+## @iftex
+## @tex
+## $$
+##  Ax [ = | \leq | \geq ] b \qquad  LB \leq x \leq UB
+## $$
+## @end tex
+## @end iftex
+## @ifnottex
 ## @example
 ## @group
 ## A*x [ "=" | "<=" | ">=" ] b
 ##   x >= LB
 ##   x <= UB
 ## @end group
 ## @end example
+## @end ifnottex
 ## 
 ## Input arguments:
 ## 
 ## @table @var
 ## @item c
 ## A column array containing the objective function coefficients.
 ## 
 ## @item a
diff --git a/scripts/optimization/qp.m b/scripts/optimization/qp.m
--- a/scripts/optimization/qp.m
+++ b/scripts/optimization/qp.m
@@ -13,43 +13,49 @@
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, write to the Free
 ## Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
 ## 02110-1301, USA.
 
 ## -*- texinfo -*-
-## @deftypefn {Function File} {[@var{x}, @var{obj}, @var{info}, @var{lambda}] =} qp (@var{x0}, @var{H}, @var{q}, @var{A}, @var{b}, @var{lb}, @var{ub}, @var{A_lb}, @var{Ain}, @var{A_ub})
+## @deftypefn {Function File} {[@var{x}, @var{obj}, @var{info}, @var{lambda}] =} qp (@var{x0}, @var{H}, @var{q}, @var{A}, @var{b}, @var{lb}, @var{ub}, @var{A_lb}, @var{A_in}, @var{A_ub})
 ## Solve the quadratic program
-## @ifinfo
+## @iftex
+## @tex
+## $$
+##  \min_x {1 \over 2} x^T H x + x^T q
+## $$
+## @end tex
+## @end iftex
+## @ifnottex
 ##
 ## @example
 ##      min 0.5 x'*H*x + x'*q
 ##       x
 ## @end example
 ##
-## @end ifinfo
+## @end ifnottex
+## subject to
 ## @iftex
 ## @tex
+## $$
+##  Ax = b \qquad lb \leq x \leq ub \qquad A_{lb} \leq A_{in} \leq A_{ub}
+## $$
 ## @end tex
 ## @end iftex
-## subject to
-## @ifinfo
+## @ifnottex
 ##
 ## @example
 ##      A*x = b
 ##      lb <= x <= ub
-##      A_lb <= Ain*x <= A_ub
+##      A_lb <= A_in*x <= A_ub
 ## @end example
-## @end ifinfo
-## @iftex
-## @tex
-## @end tex
-## @end iftex
+## @end ifnottex
 ##
 ## @noindent
 ## using a null-space active-set method.
 ##
 ## Any bound (@var{A}, @var{b}, @var{lb}, @var{ub}, @var{A_lb},
 ## @var{A_ub}) may be set to the empty matrix (@code{[]}) if not
 ## present.  If the initial guess is feasible the algorithm is faster.
 ##
diff --git a/scripts/optimization/sqp.m b/scripts/optimization/sqp.m
--- a/scripts/optimization/sqp.m
+++ b/scripts/optimization/sqp.m
@@ -15,40 +15,46 @@
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, write to the Free
 ## Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
 ## 02110-1301, USA.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {[@var{x}, @var{obj}, @var{info}, @var{iter}, @var{nf}, @var{lambda}] =} sqp (@var{x}, @var{phi}, @var{g}, @var{h})
 ## Solve the nonlinear program
-## @ifinfo
+## @iftex
+## @tex
+## $$
+## \min_x \phi (x)
+## $$
+## @end tex
+## @end iftex
+## @ifnottex
 ##
 ## @example
 ##      min phi (x)
 ##       x
 ## @end example
 ##
-## @end ifinfo
+## @end ifnottex
+## subject to
 ## @iftex
 ## @tex
+## $$
+##  g(x) = 0 \qquad h(x) \geq 0
+## $$
 ## @end tex
 ## @end iftex
-## subject to
-## @ifinfo
+## @ifnottex
 ##
 ## @example
 ##      g(x)  = 0
 ##      h(x) >= 0
 ## @end example
-## @end ifinfo
-## @iftex
-## @tex
-## @end tex
-## @end iftex
+## @end ifnottex
 ##
 ## @noindent
 ## using a successive quadratic programming method.
 ##
 ## The first argument is the initial guess for the vector @var{x}.
 ##
 ## The second argument is a function handle pointing to the ojective
 ## function.  The objective function must be of the form
@@ -104,21 +110,32 @@
 ## @noindent
 ## in which @var{x} is a vector and @var{r} is a vector.
 ## 
 ## The third and fourth arguments may also be 2-element cell arrays of
 ## function handles.  The first element should point to the constraint
 ## function and the second should point to a function that computes the
 ## gradient of the constraint function:
 ##
+## @iftex
+## @tex
+## $$
+##  \Bigg( {\partial f(x) \over \partial x_1}, 
+##         {\partial f(x) \over \partial x_2}, \ldots,
+##         {\partial f(x) \over \partial x_N} \Bigg)^T
+## $$
+## @end tex
+## @end iftex
+## @ifnottex
 ## @example
 ##                 [ d f(x)   d f(x)        d f(x) ]
 ##     transpose ( [ ------   -----   ...   ------ ] )
 ##                 [  dx_1     dx_2          dx_N  ]
 ## @end example
+## @end ifnottex
 ##
 ## Here is an example of calling @code{sqp}:
 ##
 ## @example
 ##      function r = g (x)
 ##        r = [ sumsq(x)-10; x(2)*x(3)-5*x(4)*x(5); x(1)^3+x(2)^3+1];
 ##      endfunction
 ##
diff --git a/src/DLD-FUNCTIONS/quad.cc b/src/DLD-FUNCTIONS/quad.cc
--- a/src/DLD-FUNCTIONS/quad.cc
+++ b/src/DLD-FUNCTIONS/quad.cc
@@ -160,16 +160,19 @@ integrand is known to be singular.\n\
 The result of the integration is returned in @var{v} and @var{ier}\n\
 contains an integer error code (0 indicates a successful integration).\n\
 The value of @var{nfun} indicates how many function evaluations were\n\
 required, and @var{err} contains an estimate of the error in the\n\
 solution.\n\
 \n\
 You can use the function @code{quad_options} to set optional\n\
 parameters for @code{quad}.\n\
+\n\
+It should be noted that since @code{quad} is written in Fortran it\n\
+cannot be called recursively.\n\
 @end deftypefn")
 {
   octave_value_list retval;
 
   std::string fcn_name;
 
   warned_imaginary = false;
 
