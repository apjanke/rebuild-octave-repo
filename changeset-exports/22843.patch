# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1480399215 18000
#      Tue Nov 29 01:00:15 2016 -0500
# Node ID a2809b2938d62544115406e4aafaf8c0c2dda64b
# Parent  60405b73e439b3c8332bb04512130a33c7edad28
* f77-fcn.h (to_f77_int): New inline function.

diff --git a/liboctave/cruft/misc/f77-fcn.h b/liboctave/cruft/misc/f77-fcn.h
--- a/liboctave/cruft/misc/f77-fcn.h
+++ b/liboctave/cruft/misc/f77-fcn.h
@@ -20,19 +20,24 @@ along with Octave; see the file COPYING.
 
 */
 
 #if ! defined (octave_f77_fcn_h)
 #define octave_f77_fcn_h 1
 
 #include "octave-config.h"
 
+#include "lo-error.h"
 #include "quit.h"
 
 #if defined (__cplusplus)
+#  include <limits>
+#endif
+
+#if defined (__cplusplus)
 extern "C" {
 #endif
 
 /* Hack to stringize macro results. */
 #define xSTRINGIZE(x) #x
 #define STRINGIZE(x) xSTRINGIZE(x)
 
 /* How to print an error for the F77_XFCN macro. */
@@ -359,13 +364,31 @@ typedef octave_f77_int_type F77_LOGICAL;
   cs[F77_CHAR_ARG_LEN_USE(s, len)] = '\0'
 
 OCTAVE_NORETURN OCTAVE_API extern
 F77_RET_T
 F77_FUNC (xstopx, XSTOPX) (F77_CONST_CHAR_ARG_DECL
                            F77_CHAR_ARG_LEN_DECL);
 
 #if defined (__cplusplus)
+
+inline F77_INT
+to_f77_int (octave_idx_type x)
+{
+  // FIXME: How to do this job in C, not knowing in advance the actual
+  // type of F77_INT?
+
+  if (x < std::numeric_limits<F77_INT>::min ()
+      || x > std::numeric_limits<F77_INT>::max ())
+    (*current_liboctave_error_handler)
+      ("integer dimension or index out of range for Fortran INTEGER type");
+
+  return static_cast<F77_INT> (x);
+}
+
+#endif
+
+#if defined (__cplusplus)
 }
 #endif
 
 #endif
 
