# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1233924348 -3600
#      Fri Feb 06 13:45:48 2009 +0100
# Node ID e5ffb52c9c611079fa6dd4ff580b73d1ecdb2b1d
# Parent  54227442f7ed93aabe13ca99f4f69a02b08f3544
improve fsolve and add ComplexEqn option

diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,8 +1,13 @@
+2009-02-06  Jaroslav Hajek  <highegg@gmail.com>
+
+	* optimization/fsolve.m: Document support for complex holomorphic
+	systems. Improve guarded evaluation.
+
 2009-02-05  John W. Eaton  <jwe@octave.org>
 
 	* miscellaneous/news.m: Use puts instead of printf.
 
 2009-02-05  Thomas D. Dean  <tomdean@speakeasy.org>
 
 	* polynomial/polyout.m: Replace com2str with num2str, and minor
 	style changes.
diff --git a/scripts/optimization/fsolve.m b/scripts/optimization/fsolve.m
--- a/scripts/optimization/fsolve.m
+++ b/scripts/optimization/fsolve.m
@@ -28,31 +28,37 @@
 ## In other words, this function attempts to determine a vector @var{x} such 
 ## that @code{@var{fcn} (@var{x})} gives (approximately) all zeros.
 ## @var{x0} determines a starting guess. The shape of @var{x0} is preserved
 ## in all calls to @var{fcn}, but otherwise it is treated as a column vector.
 ## @var{options} is a structure specifying additional options.
 ## Currently, @code{fsolve} recognizes these options:
 ## @code{"FunValCheck"}, @code{"OutputFcn"}, @code{"TolX"},
 ## @code{"TolFun"}, @code{"MaxIter"}, @code{"MaxFunEvals"}, 
-## @code{"Jacobian"} and @code{"Updating"}. 
+## @code{"Jacobian"}, @code{"Updating"} and @code{"ComplexEqn"}.
 ##
 ## If @code{"Jacobian"} is @code{"on"}, it specifies that @var{fcn},
 ## called with 2 output arguments, also returns the Jacobian matrix
 ## of right-hand sides at the requested point.  @code{"TolX"} specifies
 ## the termination tolerance in the unknown variables, while 
 ## @code{"TolFun"} is a tolerance for equations. Default is @code{1e-7}
 ## for both @code{"TolX"} and @code{"TolFun"}.
 ## If @code{"Updating"} is "on", the function will attempt to use Broyden
 ## updates to update the Jacobian, in order to reduce the amount of jacobian
 ## calculations.
 ## If your user function always calculates the Jacobian (regardless of number
 ## of output arguments), this option provides no advantage and should be set to
 ## false.
 ## 
+## @code{"ComplexEqn"} is @code{"on"}, @code{fsolve} will attempt to solve
+## complex equations in complex variables, assuming that the equations posess a
+## complex derivative (i.e. are holomorphic). If this is not what you want, 
+## should unpack the real and imaginary parts of the system to get a real
+## system.
+##
 ## For description of the other options, see @code{optimset}.
 ##
 ## On return, @var{fval} contains the value of the function @var{fcn}
 ## evaluated at @var{x}, and @var{info} may be one of the following values:
 ## 
 ## @table @asis
 ## @item 1
 ## Converged to a solution point. Relative residual error is less than specified
@@ -75,17 +81,18 @@
 ## PKG_ADD: __all_opts__ ("fsolve");
 
 function [x, fvec, info, output, fjac] = fsolve (fcn, x0, options = struct ())
 
   ## Get default options if requested.
   if (nargin == 1 && ischar (fcn) && strcmp (fcn, 'defaults'))
     x = optimset ("MaxIter", 400, "MaxFunEvals", Inf, \
     "Jacobian", "off", "TolX", 1.5e-8, "TolFun", 1.5e-8,
-    "OutputFcn", [], "Updating", "on", "FunValCheck", "off");
+    "OutputFcn", [], "Updating", "on", "FunValCheck", "off",
+    "ComplexEqn", "off");
     return;
   endif
 
   if (nargin < 2 || nargin > 3 || ! ismatrix (x0))
     print_usage ();
   endif    
 
   if (ischar (fcn))
@@ -95,22 +102,23 @@ function [x, fvec, info, output, fjac] =
   xsiz = size (x0);
   n = numel (x0);
 
   has_jac = strcmpi (optimget (options, "Jacobian", "off"), "on");
   maxiter = optimget (options, "MaxIter", 400);
   maxfev = optimget (options, "MaxFunEvals", Inf);
   outfcn = optimget (options, "OutputFcn");
   updating = strcmpi (optimget (options, "Updating", "on"), "on");
+  complexeqn = strcmpi (optimget (options, "ComplexEqn", "off"), "on");
 
   funvalchk = strcmpi (optimget (options, "FunValCheck", "off"), "on");
 
   if (funvalchk)
     ## Replace fcn with a guarded version.
-    fcn = @(x) guarded_eval (fcn, x);
+    fcn = @(x) guarded_eval (fcn, x, complexeqn);
   endif
 
   ## These defaults are rather stringent. I think that normally, user
   ## prefers accuracy to performance.
 
   macheps = eps (class (x0));
 
   tolx = optimget (options, "TolX", sqrt (macheps));
@@ -341,21 +349,29 @@ function [x, fvec, info, output, fjac] =
 
   output.iterations = niter;
   output.funcCount = nfev;
 
 endfunction
 
 ## An assistant function that evaluates a function handle and checks for
 ## bad results.
-function fx = guarded_eval (fun, x)
-  fx = fun (x);
-  if (! all (isreal (fx)))
+function [fx, jx] = guarded_eval (fun, x, complexeqn)
+  if (nargout > 1)
+    [fx, jx] = fun (x);
+  else
+    fx = fun (x);
+    jx = []
+  endif
+
+  if (! complexeqn && ! (all (isreal (fx(:))) && all (isreal (jx(:)))))
     error ("fsolve:notreal", "fsolve: non-real value encountered"); 
-  elseif (any (isnan (fx)))
+  elseif (complexeqn && ! (all (isnumeric (fx(:))) && all (isnumeric(jx(:)))))
+    error ("fsolve:notnum", "fsolve: non-numeric value encountered");
+  elseif (any (isnan (fx(:))))
     error ("fsolve:isnan", "fsolve: NaN value encountered"); 
   endif
 endfunction
 
 %!function retval = f (p) 
 %!  x = p(1);
 %!  y = p(2);
 %!  z = p(3);
@@ -438,8 +454,23 @@ endfunction
 %! c_opt = [a0, b0];
 %! tol = 1e-5;
 %! 
 %! [c, fval, info, output] =  fsolve (@(c) (exp(-c(1)*x) + c(2) - y), [0, 0]);
 %! assert (info > 0);
 %! assert (norm (c - c_opt, Inf) < tol);
 %! assert (norm (fval) < norm (noise));
 
+
+%!function y = cfun (x)
+%!  y(1) = (1+i)*x(1)^2 - (1-i)*x(2) - 2;
+%!  y(2) = sqrt (x(1)*x(2)) - (1-2i)*x(3) + (3-4i);
+%!  y(3) = x(1) * x(2) - x(3)^2 + (3+2i);
+
+%!test
+%! x_opt = [-1+i, 1-i, 2+i];
+%! x = [i, 1, 1+i];
+%! 
+%! [x, f, info] = fsolve (@cfun, x, optimset ("ComplexEqn", "on"));
+%! tol = 1e-5;
+%! assert (norm (f) < tol);
+%! assert (norm (x - x_opt, Inf) < tol);
+
