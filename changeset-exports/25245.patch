# HG changeset patch
# User Rik <rik@octave.org>
# Date 1523708189 25200
#      Sat Apr 14 05:16:29 2018 -0700
# Branch stable
# Node ID 9b93b85459daf995f503a586010f59742692a7db
# Parent  f9fe8cf64e096a86c8ebf1eb43806d3e671b39eb
Set a known random seed so bsxfun BIST tests pass (bug #53636).

* bsxfun.cc: Set the rand and randn states before running BIST tests, and
restore the random number generation states after the tests are complete.

diff --git a/libinterp/corefcn/bsxfun.cc b/libinterp/corefcn/bsxfun.cc
--- a/libinterp/corefcn/bsxfun.cc
+++ b/libinterp/corefcn/bsxfun.cc
@@ -716,16 +716,20 @@ as the other array.
 %!assert (bsxfun (f, a, c), a - repmat (c, [1, 4, 1]))
 %!assert (bsxfun (f, a, d), a - repmat (d, [1, 1, 4]))
 %!assert (bsxfun ("minus", ones ([4, 0, 4]), ones ([4, 1, 4])), zeros ([4, 0, 4]))
 
 ## The test below is a very hard case to treat
 %!assert (bsxfun (f, ones ([4, 1, 4, 1]), ones ([1, 4, 1, 4])), zeros ([4, 4, 4, 4]))
 
 %!shared a, b, aa, bb
+%! ## FIXME: Set a known "good" random seed.  See bug #51779.
+%! old_nstate = randn ("state");
+%! restore_nstate = onCleanup (@() randn ("state", old_nstate));
+%! randn ("state", 42); # initialize generator to make behavior reproducible
 %! a = randn (3, 1, 3);
 %! aa = a(:, ones (1, 3), :, ones (1, 3));
 %! b = randn (1, 3, 3, 3);
 %! bb = b(ones (1, 3), :, :, :);
 %!assert (bsxfun (@plus, a, b), aa + bb)
 %!assert (bsxfun (@minus, a, b), aa - bb)
 %!assert (bsxfun (@times, a, b), aa .* bb)
 %!assert (bsxfun (@rdivide, a, b), aa ./ bb)
@@ -749,16 +753,21 @@ as the other array.
 %! funs = {@plus, @minus, @times, @rdivide, @ldivide, @power, @max, @min, ...
 %!         @rem, @mod, @atan2, @hypot, @eq, @ne, @lt, @le, @gt, @ge, ...
 %!         @and, @or, @xor };
 %!
 %! float_types = {@single, @double};
 %! int_types = {@int8, @int16, @int32, @int64, ...
 %!              @uint8, @uint16, @uint32, @uint64};
 %!
+%! ## FIXME: Set a known "good" random seed.  See bug #51779.
+%! old_state = rand ("state");
+%! restore_state = onCleanup (@() rand ("state", old_state));
+%! rand ("state", 42);  # initialize generator to make behavior reproducible
+%!
 %! x = rand (3) * 10-5;
 %! y = rand (3,1) * 10-5;
 %!
 %! for i=1:length (funs)
 %!   for j = 1:length (float_types)
 %!     for k = 1:length (int_types)
 %!
 %!       fun = funs{i};
