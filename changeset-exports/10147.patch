# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1264006256 -3600
#      Wed Jan 20 17:50:56 2010 +0100
# Node ID adc0143e94195fd77933b7f57f29c825f32e2c87
# Parent  9597eea7fa36fe34b2c33934c5b3bdb7608fcc63
optimize any/all (x, 2) with small number of rows

diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,15 @@
+2010-01-20  Jaroslav Hajek  <highegg@gmail.com>
+
+	* mx-inlines.cc (mx_inline_any_r, mx_inline_all_r): New helper
+	reductors. 
+	(mx_inline_any, mx_inline_all): Call the here in row-wise reduction
+	with few enough columns.
+
 2010-01-20  Jaroslav Hajek  <highegg@gmail.com>
 
 	* lo-mappers.h (xmin (double, double), xmax (double, double),
 	xmin (float, float), xmax (float, float)): Inline definitions.
 	* lo-mappers.cc (xmin (double, double), xmax (double, double),
 	xmin (float, float), xmax (float, float)): Remove from here.
 	* mx-inlines.cc (mx_inline_xmin, mx_inline_xmax): Provide
 	specializations for real array-scalar and scalar-array cases.
diff --git a/liboctave/mx-inlines.cc b/liboctave/mx-inlines.cc
--- a/liboctave/mx-inlines.cc
+++ b/liboctave/mx-inlines.cc
@@ -548,25 +548,34 @@ F (const TSRC* v, TRES *r, octave_idx_ty
 
 OP_RED_FCN2 (mx_inline_sum, T, T, OP_RED_SUM, 0)
 OP_RED_FCN2 (mx_inline_dsum, T, PROMOTE_DOUBLE(T), op_dble_sum, 0.0)
 OP_RED_FCN2 (mx_inline_count, bool, T, OP_RED_SUM, 0)
 OP_RED_FCN2 (mx_inline_prod, T, T, OP_RED_PROD, 1)
 OP_RED_FCN2 (mx_inline_sumsq, T, T, OP_RED_SUMSQ, 0)
 OP_RED_FCN2 (mx_inline_sumsq, std::complex<T>, T, OP_RED_SUMSQC, 0)
 
+#define OP_RED_ANYR(ac, el) ac |= xis_true (el)
+#define OP_RED_ALLR(ac, el) ac &= xis_true (el)
+
+OP_RED_FCN2 (mx_inline_any_r, T, bool, OP_RED_ANYR, false)
+OP_RED_FCN2 (mx_inline_all_r, T, bool, OP_RED_ALLR, true)
+
 // Using the general code for any/all would sacrifice short-circuiting.
 // OTOH, going by rows would sacrifice cache-coherence. The following algorithm
 // will achieve both, at the cost of a temporary octave_idx_type array.
 
 #define OP_ROW_SHORT_CIRCUIT(F, PRED, ZERO) \
 template <class T> \
 inline void \
 F (const T* v, bool *r, octave_idx_type m, octave_idx_type n) \
 { \
+  if (n <= 8) \
+    return F ## _r (v, r, m, n); \
+  \
   /* FIXME: it may be sub-optimal to allocate the buffer here. */ \
   OCTAVE_LOCAL_BUFFER (octave_idx_type, iact, m); \
   for (octave_idx_type i = 0; i < m; i++) iact[i] = i; \
   octave_idx_type nact = m; \
   for (octave_idx_type j = 0; j < n; j++) \
     { \
       octave_idx_type k = 0; \
       for (octave_idx_type i = 0; i < nact; i++) \
