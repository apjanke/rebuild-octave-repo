# HG changeset patch
# User jwe
# Date 812107189 0
#      Tue Sep 26 09:19:49 1995 +0000
# Node ID 5f5d117aac3eae505fa190fc5897febd579ab7bb
# Parent  f8d8b6aa31aa671596a54ffdd25560c7a794a2ea
[project @ 1995-09-26 09:14:22 by jwe]

diff --git a/liboctave/DASSL.cc b/liboctave/DASSL.cc
--- a/liboctave/DASSL.cc
+++ b/liboctave/DASSL.cc
@@ -193,18 +193,17 @@ DAE::initialize (const Vector& state, co
   restart = 1;
   xdot = deriv;
   x = state;
   t = time;
 }
 
 int
 ddassl_f (const double& time, double *state, double *deriv,
-	  double *delta, int& ires, double *rpar UNUSED,
-	  int *ipar UNUSED)
+	  double *delta, int& ires, double *, int *)
 {
   Vector tmp_deriv (nn);
   Vector tmp_state (nn);
   Vector tmp_delta (nn);
 
   for (int i = 0; i < nn; i++)
     {
       tmp_deriv.elem (i) = deriv [i];
@@ -220,19 +219,18 @@ ddassl_f (const double& time, double *st
       for (int i = 0; i < nn; i++)
 	delta [i] = tmp_delta.elem (i);
     }
 
   return 0;
 }
 
 int
-ddassl_j (const double& time, double *state UNUSED,
-	  double *deriv UNUSED, double *pd, const double& cj,
-	  double *rpar UNUSED, int *ipar UNUSED) 
+ddassl_j (const double& time, double *, double *, double *pd, const
+	  double& cj, double *, int *)
 {
   Vector tmp_state (nn);
   Vector tmp_deriv (nn);
 
   // XXX FIXME XXX
 
   Matrix tmp_dfdxdot (nn, nn);
   Matrix tmp_dfdx (nn, nn);
diff --git a/liboctave/LPsolve.cc b/liboctave/LPsolve.cc
--- a/liboctave/LPsolve.cc
+++ b/liboctave/LPsolve.cc
@@ -28,17 +28,17 @@ Software Foundation, 59 Temple Place - S
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
 #include "LPsolve.h"
 #include "dColVector.h"
 
 Vector
-LPsolve::minimize (double& objf, int& inform, Vector& lambda)
+LPsolve::minimize (double&, int&, Vector&)
 {
   return Vector ();
 }
 
 void
 LPsolve::set_default_options (void)
 {
   // Maybe this isn't needed?
diff --git a/liboctave/LSODE.cc b/liboctave/LSODE.cc
--- a/liboctave/LSODE.cc
+++ b/liboctave/LSODE.cc
@@ -151,17 +151,17 @@ ODE::ODE (const ColumnVector& state, dou
 
 ODE::~ODE (void)
 {
   delete [] rwork;
   delete [] iwork;
 }
 
 int
-lsode_f (const int& neq, const double& time, double *state,
+lsode_f (const int& neq, const double& time, double *,
 	 double *deriv, int& ierr) 
 {
   ColumnVector tmp_deriv (neq);
 
   // NOTE: this won't work if LSODE passes copies of the state vector.
   //       In that case we have to create a temporary vector object
   //       and copy.
 
@@ -174,18 +174,18 @@ lsode_f (const int& neq, const double& t
       for (int i = 0; i < neq; i++)
 	deriv [i] = tmp_deriv.elem (i);
     }
 
   return 0;
 }
 
 int
-lsode_j (const int& neq, const double& time, double *state,
-	 const int& ml, const int& mu, double *pd, const int& nrowpd)
+lsode_j (const int& neq, const double& time, double *,
+	 const int&, const int&, double *pd, const int& nrowpd)
 {
   Matrix tmp_jac (neq, neq);
 
   // NOTE: this won't work if LSODE passes copies of the state vector.
   //       In that case we have to create a temporary vector object
   //       and copy.
 
   tmp_jac = (*user_jac) (*tmp_x, time);
diff --git a/liboctave/NPSOL.cc b/liboctave/NPSOL.cc
--- a/liboctave/NPSOL.cc
+++ b/liboctave/NPSOL.cc
@@ -66,17 +66,17 @@ int npsol_objective_error = 0;
 
 static objective_fcn user_phi;
 static gradient_fcn user_grad;
 static nonlinear_fcn user_g;
 static jacobian_fcn user_jac;
 
 int
 npsol_objfun (int& mode, const int& n, double *xx, double *objf,
-	      double *objgrd, int* nstate)
+	      double *objgrd, int *)
 {
   Vector tmp_x (n);
 
   npsol_objective_error = 0;
 
   for (int i = 0; i < n; i++)
     tmp_x.elem (i) = xx[i];
 
@@ -112,18 +112,18 @@ npsol_objfun (int& mode, const int& n, d
 	}
     }
 
   return 0;
 }
 
 int
 npsol_confun (int& mode, const int& ncnln, const int& n,
-	      const int& nrowj, int* needc, double *xx,
-	      double *cons, double *cjac, int* nstate) 
+	      const int& nrowj, int *, double *xx, double *cons,
+	      double *cjac, int *)
 {
   Vector tmp_x (n);
   Vector tmp_c (ncnln);
 
   for (int i = 0; i < n; i++)
     tmp_x.elem (i) = xx[i];
 
   tmp_c = (*user_g) (tmp_x);
@@ -356,17 +356,17 @@ NPSOL::minimize (const Vector& xnew, dou
 Vector
 NPSOL::minimize (const Vector& xnew, double& objf, int& inform, Vector& lambda)
 {
   x = xnew;
   return minimize (objf, inform, lambda);
 }
 
 NPSOL&
-NPSOL::option (char *s)
+NPSOL::option (char *)
 {
   cerr << "This function no longer has any effect.\n"
        << "Use the NPSOL_option class instead\n";
 
   return *this;
 }
 
 NPSOL_options::NPSOL_options (void)
diff --git a/liboctave/QPSOL.cc b/liboctave/QPSOL.cc
--- a/liboctave/QPSOL.cc
+++ b/liboctave/QPSOL.cc
@@ -52,17 +52,17 @@ extern "C"
   int F77_FCN (dgemv, DGEMV) (const char*, const int&, const int&,
 			      const double&, const double*,
 			      const int&, const double*, const int&,
 			      const double&, double*, const int&,
 			      long);
 }
 
 int
-qphess (const int& n, const int& nrowh, const int& ncolh,
+qphess (const int& n, const int& nrowh, const int&,
 	const int& jthcol, double *hess, double *x, double *hx)
 {
   if (jthcol > 0)
     {
       int hp = (jthcol - 1) * nrowh;
       for (int i = 0; i < n; i++)
 	hx[i] = hess[hp+i];
     }
