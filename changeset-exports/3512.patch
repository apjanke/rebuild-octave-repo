# HG changeset patch
# User jwe
# Date 949443882 0
#      Tue Feb 01 22:24:42 2000 +0000
# Node ID e72d846e6f60096552a5335466a0dba76c9f2bd9
# Parent  d921340627837d7cd09368b7306eb746e2bf2d78
[project @ 2000-02-01 22:24:42 by jwe]

diff --git a/liboctave/Array-idx.h b/liboctave/Array-idx.h
--- a/liboctave/Array-idx.h
+++ b/liboctave/Array-idx.h
@@ -55,109 +55,106 @@ Array<T>::set_index (const idx_vector& i
 }
 
 template <class T>
 Array<T>
 Array<T>::value (void)
 {
   Array<T> retval;
 
-  idx_vector *tmp = get_idx ();
-  idx_vector idx = tmp[0];
-
-  retval = index (idx);
+  retval = index (idx[0]);
 
   clear_index ();
 
   return retval;
 }
 
 template <class T>
 Array<T>
-Array<T>::index (idx_vector& idx) const
+Array<T>::index (idx_vector& idx_arg) const
 {
   Array<T> retval;
 
   int len = length ();
 
-  int n = idx.freeze (len, "vector");
+  int n = idx_arg.freeze (len, "vector");
 
-  if (idx)
+  if (idx_arg)
     {
-      if (idx.is_colon_equiv (len))
+      if (idx_arg.is_colon_equiv (len))
 	{
 	  retval = *this;
 	}
       else if (n == 0)
 	{
 	  retval.resize (0);
 	}
       else if (len == 1 && n > 1
-	       && idx.one_zero_only ()
-	       && idx.ones_count () == n)
+	       && idx_arg.one_zero_only ()
+	       && idx_arg.ones_count () == n)
 	{
 	  retval.resize (n, elem (0));
 	}
       else
 	{
 	  retval.resize (n);
 
 	  for (int i = 0; i < n; i++)
 	    {
-	      int ii = idx.elem (i);
+	      int ii = idx_arg.elem (i);
 	      retval.elem (i) = elem (ii);
 	    }
 	}
     }
 
   // idx_vector::freeze() printed an error message for us.
 
   return retval;
 }
 
 template <class T>
 void
-Array<T>::maybe_delete_elements (idx_vector& idx)
+Array<T>::maybe_delete_elements (idx_vector& idx_arg)
 {
   int len = length ();
 
   if (len == 0)
     return;
 
-  if (idx.is_colon_equiv (len, 1))
+  if (idx_arg.is_colon_equiv (len, 1))
     resize (0);
   else
     {
-      int num_to_delete = idx.length (len);
+      int num_to_delete = idx_arg.length (len);
 
       if (num_to_delete != 0)
 	{
 	  int new_len = len;
 
 	  int iidx = 0;
 
 	  for (int i = 0; i < len; i++)
-	    if (i == idx.elem (iidx))
+	    if (i == idx_arg.elem (iidx))
 	      {
 		iidx++;
 		new_len--;
 
 		if (iidx == num_to_delete)
 		  break;
 	      }
 
 	  if (new_len > 0)
 	    {
 	      T *new_data = new T [new_len];
 
 	      int ii = 0;
 	      iidx = 0;
 	      for (int i = 0; i < len; i++)
 		{
-		  if (iidx < num_to_delete && i == idx.elem (iidx))
+		  if (iidx < num_to_delete && i == idx_arg.elem (iidx))
 		    iidx++;
 		  else
 		    {
 		      new_data[ii] = elem (i);
 		      ii++;
 		    }
 		}
 
@@ -181,59 +178,59 @@ Array<T>::maybe_delete_elements (idx_vec
 template <class LT, class RT>
 int
 assign (Array<LT>& lhs, const Array<RT>& rhs)
 {
   int retval = 1;
 
   idx_vector *tmp = lhs.get_idx ();
 
-  idx_vector idx = tmp[0];
+  idx_vector lhs_idx = tmp[0];
 
   int lhs_len = lhs.length ();
   int rhs_len = rhs.length ();
 
-  int n = idx.freeze (lhs_len, "vector", liboctave_rre_flag);
+  int n = lhs_idx.freeze (lhs_len, "vector", liboctave_rre_flag);
 
   if (n != 0)
     {
       if (liboctave_rre_flag && (rhs_len == n || rhs_len == 1))
 	{
-	  int max_idx = idx.max () + 1;
+	  int max_idx = lhs_idx.max () + 1;
 	  if (max_idx > lhs_len)
 	    lhs.resize (max_idx, 0.0);
 	}
 
       if (rhs_len == n)
 	{
 	  for (int i = 0; i < n; i++)
 	    {
-	      int ii = idx.elem (i);
+	      int ii = lhs_idx.elem (i);
 	      lhs.elem (ii) = rhs.elem (i);
 	    }
 	}
       else if (rhs_len == 1)
 	{
 	  RT scalar = rhs.elem (0);
 
 	  for (int i = 0; i < n; i++)
 	    {
-	      int ii = idx.elem (i);
+	      int ii = lhs_idx.elem (i);
 	      lhs.elem (ii) = scalar;
 	    }
 	}
       else
 	{
 	  (*current_liboctave_error_handler)
 	    ("A(I) = X: X must be a scalar or a vector with same length as I");
 
 	  retval = 0;
 	}
     }
-  else if (idx.is_colon ())
+  else if (lhs_idx.is_colon ())
     {
       if (lhs_len == 0)
 	{
 	  lhs.resize (rhs_len);
 
 	  for (int i = 0; i < rhs_len; i++)
 	    lhs.elem (i) = rhs.elem (i);
 	}
diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,10 +1,12 @@
 2000-02-01  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
+	* Array-idx.h: Avoid shadowing warnings for idx.
+
 	* Quad.h: Use do_integrate as name of pure virtual function.
 
 	* base-de.h: Use tt instead of t as arg names.
 	Add method with tcrit arg.
 
 	* DAE.h, DAE.cc: Likewise, also xx for x.
 
 	* DASSL.cc (dassl_fcn_ptr, dassl_jac_ptr): New typedefs.
