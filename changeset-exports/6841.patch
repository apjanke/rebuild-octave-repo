# HG changeset patch
# User jwe
# Date 1188408705 0
#      Wed Aug 29 17:31:45 2007 +0000
# Node ID 9cee629fe20c33ae86d5c2e9285f2e001f26d329
# Parent  2f17d55567565770f53fb2c2dd14f66bdea9a8f8
[project @ 2007-08-29 17:31:45 by jwe]

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,29 @@
+2007-08-29  John W. Eaton  <jwe@octave.org>
+
+	* base-list.h (octave_base_list::remove): Implement our own
+	remove_if function here.
+
+2007-08-28  John W. Eaton  <jwe@octave.org>
+
+	* graphics.h (OCTAVE_GRAPHICS_PROPERTY_INTERNAL): Also define
+	set_X functions for properties.
+	(base_properties): Move class definition before definition of
+	base_graphics_object class.  Provide forward declaration of
+	base_graphics_object prior to definition of base_properties.
+	(base_graphics_object::get_properties): New virtual function.
+	(graphics_object::get_properties, root_figure::get_properties,
+	figure::get_properties, axes::get_properties,
+	line::get_properties, text::get_properties, image::get_properties,
+	patch::get_properties, surface::get_properties): New functions.
+	(root_figure::properties, figure::properties, axes::properties,
+	line::properties, text::properties, image::properties,
+	patch::properties, surface::properties): Data member now private.
+
 2007-08-27  John W. Eaton  <jwe@octave.org>
 
 	* load-path.cc (load_path::do_find_file): Also files with non
 	rooted relative names.
 	* load-save.cc (find_file_to_load): Likewise.  Also handle
 	appending .mat to files with relative names.
 
 	* graphics.cc (base_properties::mark_modified,
diff --git a/src/base-list.h b/src/base-list.h
--- a/src/base-list.h
+++ b/src/base-list.h
@@ -37,17 +37,37 @@ public:
 
   bool empty (void) const { return lst.empty (); }
 
   size_t length (void) const { return lst.size (); }
 
   iterator erase (iterator pos) { return lst.erase (pos); }
 
   template <class P>
-  void remove_if (P pred) { lst.remove_if (pred); }
+  void remove_if (P pred)
+  {
+    // We would like to simply call
+    //
+    //   lst.remove_if (pred);
+    //
+    // but the Sun Studio compiler chokes on that.
+    //
+    // FIXME -- this kluge should be removed at some point.
+
+    iterator b = lst.begin ();
+    iterator e = lst.end ();
+    while (b != e)
+      {
+	iterator n = b;
+	n++;
+	if (pred (*b))
+	  erase (b);
+	b = n;
+      }
+  }
 
   void clear (void) { lst.clear (); }
 
   void append (const elt_type& s) { lst.push_back (s); }
 
   iterator begin (void) { return iterator (lst.begin ()); }
   const_iterator begin (void) const { return const_iterator (lst.begin ()); }
 
diff --git a/src/graphics.cc b/src/graphics.cc
--- a/src/graphics.cc
+++ b/src/graphics.cc
@@ -2873,13 +2873,67 @@ set_property_in_handle (double handle, c
 	ret = true;
     }
   else
     error ("%s: invalid handle (= %g)", func.c_str(), handle);
 
   return ret;
 }
 
+DEFUN (doit, args, , "")
+{
+  octave_value retval;
+
+  if (args.length () == 1)
+    {
+      graphics_handle h = octave_NaN;
+
+      double val = args(0).double_value ();
+
+      if (! error_state)
+	{
+	  h = gh_manager::lookup (val);
+
+	  if (! xisnan (h))
+	    {
+	      graphics_object obj = gh_manager::get_object (h);
+
+	      if (obj.isa ("line"))
+		{
+		  line::line_properties& lp
+		    = dynamic_cast<line::line_properties&> (obj.get_properties ());
+		  retval = lp.get_xdata ();
+		  Matrix m (1, 5);
+		  m(0) = 0;
+		  m(1) = 1;
+		  m(2) = 2;
+		  m(3) = 3;
+		  m(4) = 4;
+		  lp.set_xdata (m);
+		  m(0) = 0;
+		  m(1) = 1;
+		  m(2) = 0.2;
+		  m(3) = 0.8;
+		  m(4) = 0.4;
+		  lp.set_ydata (m);
+
+		  feval ("__request_drawnow__");
+		}
+	      else
+		error ("doit: looking for line");
+	    }
+	  else
+	    error ("doit: invalid graphics object (= %g)", val);
+	}
+      else
+	error ("doit: invalid graphics object");
+    }
+  else
+    print_usage ();
+
+  return retval;
+}
+
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
diff --git a/src/graphics.h b/src/graphics.h
--- a/src/graphics.h
+++ b/src/graphics.h
@@ -35,18 +35,21 @@ 02110-1301, USA.
 #include <map>
 #include <set>
 #include <string>
 
 #include "oct-map.h"
 #include "ov.h"
 
 #define OCTAVE_GRAPHICS_PROPERTY_INTERNAL(TAG, TYPE, NAME) \
-  private: TAG TYPE NAME; \
-  public: const TYPE& get_ ## NAME () const { return NAME; } \
+  private: \
+    TAG TYPE NAME; \
+  public: \
+    const TYPE& get_ ## NAME () const { return NAME; } \
+    void set_ ## NAME (const TYPE& val) { NAME = val; mark_modified (); } \
   private:
 
 #define OCTAVE_GRAPHICS_PROPERTY(TYPE, NAME) \
   OCTAVE_GRAPHICS_PROPERTY_INTERNAL ( , TYPE, NAME)
 
 #define OCTAVE_GRAPHICS_MUTABLE_PROPERTY(TYPE, NAME) \
   OCTAVE_GRAPHICS_PROPERTY_INTERNAL (mutable, TYPE, NAME)
 
@@ -416,16 +419,67 @@ private:
 };
 
 // ---------------------------------------------------------------------
 
 typedef double graphics_handle;
 
 // ---------------------------------------------------------------------
 
+class base_graphics_object;
+
+class base_properties
+{
+public:
+  base_properties (const std::string& t = "unknown",
+		   const graphics_handle& mh = octave_NaN,
+		   const graphics_handle& p = octave_NaN)
+    : type (t), __modified__ (true), __myhandle__ (mh), parent (p),
+      children () { }
+
+  virtual ~base_properties (void) { }
+
+  virtual std::string graphics_object_name (void) const { return "unknonwn"; }
+
+  void mark_modified (void);
+
+  void override_defaults (base_graphics_object& obj);
+
+  // Look through DEFAULTS for properties with given CLASS_NAME, and
+  // apply them to the current object with set (virtual method).
+
+  void set_from_list (base_graphics_object& obj, property_list& defaults);
+
+  virtual void set (const property_name&, const octave_value&) { }
+
+  graphics_handle get_parent (void) const { return parent; }
+
+  void remove_child (const graphics_handle& h);
+
+  void adopt (const graphics_handle& h)
+  {
+    octave_idx_type n = children.numel ();
+    children.resize (1, n+1);
+    children(n) = h;
+  }
+
+  void set_parent (const octave_value& val);
+
+  void reparent (const graphics_handle& new_parent) { parent = new_parent; }
+
+  virtual void delete_children (void);
+
+protected:
+  std::string type;
+  bool __modified__;
+  graphics_handle __myhandle__;
+  graphics_handle parent;
+  Matrix children;
+};
+
 class base_graphics_object
 {
 public:
   friend class graphics_object;
 
   base_graphics_object (void) : count (1) { }
 
   base_graphics_object (const base_graphics_object&) { }
@@ -506,16 +560,23 @@ public:
     error ("base_graphics_object::reparent: invalid graphics object");
   }
 
   virtual void defaults (void) const
   {
     error ("base_graphics_object::default: invalid graphics object");
   }
 
+  virtual base_properties& get_properties (void)
+  {
+    static base_properties properties;
+    error ("base_graphics_object::get_properties: invalid graphics object");
+    return properties;
+  }
+
   virtual bool valid_object (void) const { return false; }
 
   virtual std::string type (void) const { return "unknown"; }
 
   bool isa (const std::string& go_name) const
   {
     return type () == go_name;
   }
@@ -620,73 +681,26 @@ public:
   void adopt (const graphics_handle& h) { return rep->adopt (h); }
 
   void reparent (const graphics_handle& h) { return rep->reparent (h); }
 
   void defaults (void) const { rep->defaults (); }
 
   bool isa (const std::string& go_name) const { return rep->isa (go_name); }
 
+  base_properties& get_properties (void) { return rep->get_properties (); }
+
   bool valid_object (void) const { return rep->valid_object (); }
 
   operator bool (void) const { return rep->valid_object (); }
 
 private:
   base_graphics_object *rep;
 };
 
-class base_properties
-{
-public:
-  base_properties (const std::string& t = "unknown",
-		   const graphics_handle& mh = octave_NaN,
-		   const graphics_handle& p = octave_NaN)
-    : type (t), __modified__ (true), __myhandle__ (mh), parent (p),
-      children () { }
-
-  virtual ~base_properties (void) { }
-
-  virtual std::string graphics_object_name (void) const = 0;
-
-  void mark_modified (void);
-
-  void override_defaults (base_graphics_object& obj);
-
-  // Look through DEFAULTS for properties with given CLASS_NAME, and
-  // apply them to the current object with set (virtual method).
-
-  void set_from_list (base_graphics_object& obj, property_list& defaults);
-
-  virtual void set (const property_name& name, const octave_value& val) = 0;
-
-  graphics_handle get_parent (void) const { return parent; }
-
-  void remove_child (const graphics_handle& h);
-
-  void adopt (const graphics_handle& h)
-  {
-    octave_idx_type n = children.numel ();
-    children.resize (1, n+1);
-    children(n) = h;
-  }
-
-  void set_parent (const octave_value& val);
-
-  void reparent (const graphics_handle& new_parent) { parent = new_parent; }
-
-  virtual void delete_children (void);
-
-protected:
-  std::string type;
-  bool __modified__;
-  graphics_handle __myhandle__;
-  graphics_handle parent;
-  Matrix children;
-};
-
 // ---------------------------------------------------------------------
 
 class root_figure : public base_graphics_object
 {
 public:
   class root_figure_properties : public base_properties
   {
   public:
@@ -708,16 +722,17 @@ public:
 
   private:
     OCTAVE_GRAPHICS_PROPERTY (graphics_handle, currentfigure);
     OCTAVE_GRAPHICS_PROPERTY (octave_value, visible);
 
     static std::string go_name;
   };
 
+private:
   root_figure_properties properties;
 
 public:
 
   root_figure (void) : properties (), default_properties () { }
 
   ~root_figure (void) { properties.delete_children (); }
 
@@ -803,16 +818,18 @@ public:
   graphics_handle get_parent (void) const { return properties.get_parent (); }
 
   void remove_child (const graphics_handle& h) { properties.remove_child (h); }
 
   void adopt (const graphics_handle& h) { properties.adopt (h); }
 
   void reparent (const graphics_handle& np) { properties.reparent (np); }
 
+  base_properties& get_properties (void) { return properties; }
+
   bool valid_object (void) const { return true; }
 
 private:
   property_list default_properties;
 
   static property_list factory_properties;
 
   static property_list::plist_map_type init_factory_properties (void);
@@ -849,16 +866,17 @@ public:
     OCTAVE_GRAPHICS_PROPERTY (graphics_handle, currentaxes);
     OCTAVE_GRAPHICS_PROPERTY (colormap_property, colormap);
     OCTAVE_GRAPHICS_PROPERTY (octave_value, visible);
     OCTAVE_GRAPHICS_PROPERTY (octave_value, paperorientation);
 
     static std::string go_name;
   };
 
+private:
   figure_properties properties;
 
 public:
   figure (const graphics_handle& mh, const graphics_handle& p)
     : base_graphics_object (), properties (mh, p), default_properties ()
   {
     properties.override_defaults (*this);
   }
@@ -930,16 +948,18 @@ public:
   graphics_handle get_parent (void) const { return properties.get_parent (); }
 
   void remove_child (const graphics_handle& h) { properties.remove_child (h); }
 
   void adopt (const graphics_handle& h) { properties.adopt (h); }
 
   void reparent (const graphics_handle& np) { properties.reparent (np); }
 
+  base_properties& get_properties (void) { return properties; }
+
   bool valid_object (void) const { return true; }
 
 private:
   property_list default_properties;
 };
 
 // ---------------------------------------------------------------------
 
@@ -1018,16 +1038,17 @@ public:
     OCTAVE_GRAPHICS_PROPERTY (octave_value, view);
     OCTAVE_GRAPHICS_PROPERTY (octave_value, visible);
     OCTAVE_GRAPHICS_PROPERTY (octave_value, nextplot);
     OCTAVE_GRAPHICS_PROPERTY (octave_value, outerposition);
 
     static std::string go_name;
   };
 
+private:
   axes_properties properties;
 
 public:
   axes (const graphics_handle& mh, const graphics_handle& p)
     : base_graphics_object (), properties (mh, p), default_properties ()
   {
     properties.override_defaults (*this);
   }
@@ -1101,16 +1122,18 @@ public:
   graphics_handle get_parent (void) const { return properties.get_parent (); }
 
   void remove_child (const graphics_handle& h) { properties.remove_child (h); }
 
   void adopt (const graphics_handle& h) { properties.adopt (h); }
 
   void reparent (const graphics_handle& np) { properties.reparent (np); }
 
+  base_properties& get_properties (void) { return properties; }
+
   bool valid_object (void) const { return true; }
 
 private:
   property_list default_properties;
 };
 
 // ---------------------------------------------------------------------
 
@@ -1149,16 +1172,17 @@ public:
     OCTAVE_GRAPHICS_PROPERTY (octave_value, markeredgecolor);
     OCTAVE_GRAPHICS_PROPERTY (octave_value, markerfacecolor);
     OCTAVE_GRAPHICS_PROPERTY (octave_value, markersize);
     OCTAVE_GRAPHICS_PROPERTY (octave_value, keylabel);
 
     static std::string go_name;
   };
 
+private:
   line_properties properties;
 
 public:
   line (const graphics_handle& mh, const graphics_handle& p)
     : base_graphics_object (), properties (mh, p)
   {
     properties.override_defaults (*this);
   }
@@ -1199,16 +1223,18 @@ public:
   graphics_handle get_parent (void) const { return properties.get_parent (); }
 
   void remove_child (const graphics_handle& h) { properties.remove_child (h); }
 
   void adopt (const graphics_handle& h) { properties.adopt (h); }
 
   void reparent (const graphics_handle& h) { properties.reparent (h); }
 
+  base_properties& get_properties (void) { return properties; }
+
   bool valid_object (void) const { return true; }
 };
 
 // ---------------------------------------------------------------------
 
 class text : public base_graphics_object
 {
 public:
@@ -1235,16 +1261,17 @@ public:
     octave_value position;
     octave_value rotation;
     octave_value horizontalalignment;
     octave_value color;
 
     static std::string go_name;
   };
 
+private:
   text_properties properties;
 
 public:
   text (const graphics_handle& mh, const graphics_handle& p)
     : base_graphics_object (), properties (mh, p)
   {
     properties.override_defaults (*this);
   }
@@ -1285,16 +1312,18 @@ public:
   graphics_handle get_parent (void) const { return properties.get_parent (); }
 
   void remove_child (const graphics_handle& h) { properties.remove_child (h); }
 
   void adopt (const graphics_handle& h) { properties.adopt (h); }
 
   void reparent (const graphics_handle& h) { properties.reparent (h); }
 
+  base_properties& get_properties (void) { return properties; }
+
   bool valid_object (void) const { return true; }
 };
 
 // ---------------------------------------------------------------------
 
 class image : public base_graphics_object
 {
 public:
@@ -1318,16 +1347,17 @@ public:
   private:
     OCTAVE_GRAPHICS_PROPERTY (octave_value, cdata);
     OCTAVE_GRAPHICS_PROPERTY (octave_value, xdata);
     OCTAVE_GRAPHICS_PROPERTY (octave_value, ydata);
 
     static std::string go_name;
   };
 
+private:
   image_properties properties;
 
 public:
   image (const graphics_handle& mh, const graphics_handle& p)
     : base_graphics_object (), properties (mh, p)
   {
     properties.override_defaults (*this);
   }
@@ -1368,16 +1398,18 @@ public:
   graphics_handle get_parent (void) const { return properties.get_parent (); }
 
   void remove_child (const graphics_handle& h) { properties.remove_child (h); }
 
   void adopt (const graphics_handle& h) { properties.adopt (h); }
 
   void reparent (const graphics_handle& h) { properties.reparent (h); }
 
+  base_properties& get_properties (void) { return properties; }
+
   bool valid_object (void) const { return true; }
 };
 
 // ---------------------------------------------------------------------
 
 class patch : public base_graphics_object
 {
 public:
@@ -1411,16 +1443,17 @@ public:
     OCTAVE_GRAPHICS_PROPERTY (octave_value, marker);
     OCTAVE_GRAPHICS_PROPERTY (octave_value, markeredgecolor);
     OCTAVE_GRAPHICS_PROPERTY (octave_value, markerfacecolor);
     OCTAVE_GRAPHICS_PROPERTY (octave_value, markersize);
 
     static std::string go_name;
   };
 
+private:
   patch_properties properties;
 
 public:
   patch (const graphics_handle& mh, const graphics_handle& p)
     : base_graphics_object (), properties (mh, p)
   {
     properties.override_defaults (*this);
   }
@@ -1461,16 +1494,18 @@ public:
   graphics_handle get_parent (void) const { return properties.get_parent (); }
 
   void remove_child (const graphics_handle& h) { properties.remove_child (h); }
 
   void adopt (const graphics_handle& h) { properties.adopt (h); }
 
   void reparent (const graphics_handle& h) { properties.reparent (h); }
 
+  base_properties& get_properties (void) { return properties; }
+
   bool valid_object (void) const { return true; }
 };
 
 // ---------------------------------------------------------------------
 
 class surface : public base_graphics_object
 {
 public:
@@ -1495,16 +1530,17 @@ public:
     OCTAVE_GRAPHICS_PROPERTY (octave_value, xdata);
     OCTAVE_GRAPHICS_PROPERTY (octave_value, ydata);
     OCTAVE_GRAPHICS_PROPERTY (octave_value, zdata);
     OCTAVE_GRAPHICS_PROPERTY (octave_value, keylabel);
 
     static std::string go_name;
   };
 
+private:
   surface_properties properties;
 
 public:
   surface (const graphics_handle& mh, const graphics_handle& p)
     : base_graphics_object (), properties (mh, p)
   {
     properties.override_defaults (*this);
   }
@@ -1545,16 +1581,18 @@ public:
   graphics_handle get_parent (void) const { return properties.get_parent (); }
 
   void remove_child (const graphics_handle& h) { properties.remove_child (h); }
 
   void adopt (const graphics_handle& h) { properties.adopt (h); }
 
   void reparent (const graphics_handle& h) { properties.reparent (h); }
 
+  base_properties& get_properties (void) { return properties; }
+
   bool valid_object (void) const { return true; }
 };
 
 octave_value
 get_property_from_handle (double handle, const std::string &property,
 			  const std::string &func);
 bool
 set_property_in_handle (double handle, const std::string &property,
