# HG changeset patch
# User Rik <rik@octave.org>
# Date 1442922647 25200
#      Tue Sep 22 04:50:47 2015 -0700
# Node ID 1f330d33388fd65c5380a35c6632eab48103115d
# Parent  bb09279e5c994f7d6417c32bbd9a0823a4c93b8b
# Parent  caa5de39147e296f545359d7a2ddcc3fae4e17d3
maint: Periodic merge of stable to default.

diff --git a/NEWS b/NEWS
--- a/NEWS
+++ b/NEWS
@@ -317,16 +317,17 @@ Summary of important user-visible change
       ---------------------|------------------
       bicubic              | interp2
       delaunay3            | delaunay
       dump_prefs           | individual preference get/set routines
       find_dir_in_path     | dir_in_loadpath
       finite               | isfinite
       fmod                 | rem
       fnmatch              | glob or regexp
+      gmap40               | ----
       loadaudio            | audioread
       luinc                | ilu or ichol
       mouse_wheel_zoom     | mousewheelzoom axes property
       nfields              | numfields
       octave_tmp_file_name | tempname
       playaudio            | audioplayer
       saveaudio            | audiowrite
       syl                  | sylvester
diff --git a/doc/interpreter/image.txi b/doc/interpreter/image.txi
--- a/doc/interpreter/image.txi
+++ b/doc/interpreter/image.txi
@@ -191,25 +191,16 @@ between 0 and 1.
 @DOCSTRING(summer)
 
 @DOCSTRING(white)
 
 @DOCSTRING(winter)
 
 @DOCSTRING(contrast)
 
-An additional colormap is @code{gmap40}.  This code map contains only
-colors with integer values of the red, green and blue components.  This
-is a workaround for a limitation of gnuplot 4.0, that does not allow the color
-of line or patch objects to be set.  @code{gmap40} is chiefly useful to gnuplot
-4.0 users, and particularly in conjunction with the @var{bar}, @var{surf},
-and @var{contour} functions.
-
-@DOCSTRING(gmap40)
-
 The following three functions modify the existing colormap rather than
 replace it.
 
 @DOCSTRING(brighten)
 
 @DOCSTRING(spinmap)
 
 @DOCSTRING(whitebg)
diff --git a/doc/interpreter/vectorize.txi b/doc/interpreter/vectorize.txi
--- a/doc/interpreter/vectorize.txi
+++ b/doc/interpreter/vectorize.txi
@@ -450,35 +450,29 @@ try
 catch
   c = a.*a;
 end_try_catch
 @end group
 @end example
 
 @noindent
 that may have relied on matrices of different size producing an error.
-Due to how broadcasting changes semantics with older versions of Octave,
-by default Octave warns if a broadcasting operation is performed.  To
-disable this warning, refer to its ID (@pxref{XREFwarning_ids,,warning_ids}):
+Because such operation is now valid Octave syntax, this will no longer
+produce an error.  Instead, the following code should be used:
 
 @example
-warning ("off", "Octave:broadcast");
+@group
+if (isequal (size (a), size (b)))
+  c = a .* b;
+else
+  c = a .* a;
+endif
+@end group
 @end example
 
-@noindent
-If you want to recover the old behavior and produce an error, turn this
-warning into an error:
-
-@example
-warning ("error", "Octave:broadcast");
-@end example
-
-@noindent
-For broadcasting on scalars that worked in previous versions of Octave,
-this warning will not be emitted.
 
 @node Function Application
 @section Function Application
 @cindex map
 @cindex apply
 @cindex function application
 
 As a general rule, functions should already be written with matrix
diff --git a/libgui/src/octave-cmd.cc b/libgui/src/octave-cmd.cc
--- a/libgui/src/octave-cmd.cc
+++ b/libgui/src/octave-cmd.cc
@@ -73,10 +73,10 @@ octave_cmd_eval::execute ()
       // no valid identifier: use Fsource (), no debug possible
       Fsource (ovl (file_path));
       command_editor::replace_line ("");
     }
 
   command_editor::set_initial_input (pending_input);
   command_editor::redisplay ();
 
-  command_editor::interrupt ();
+  command_editor::accept_line ();
 }
diff --git a/libinterp/octave-value/ov-fcn-handle.cc b/libinterp/octave-value/ov-fcn-handle.cc
--- a/libinterp/octave-value/ov-fcn-handle.cc
+++ b/libinterp/octave-value/ov-fcn-handle.cc
@@ -1851,18 +1851,18 @@ DEFUN (str2func, args, ,
 @deftypefn  {Built-in Function} {} str2func (@var{fcn_name})\n\
 @deftypefnx {Built-in Function} {} str2func (@var{fcn_name}, \"global\")\n\
 Return a function handle constructed from the string @var{fcn_name}.\n\
 \n\
 If the optional @qcode{\"global\"} argument is passed, locally visible\n\
 functions are ignored in the lookup.\n\
 \n\
 Note: @code{str2func} does not currently accept strings which define\n\
-anonymous functions (those which begin with @samp{a}).\n\
-Use @code{eval (@var{str})} as a replacement.\n\
+anonymous functions (those which begin with @samp{@@}).\n\
+Use @w{@code{eval (@var{str})}} as a replacement.\n\
 @seealso{func2str, inline}\n\
 @end deftypefn")
 {
   octave_value retval;
   int nargin = args.length ();
 
   if (nargin == 1 || nargin == 2)
     {
diff --git a/libinterp/octave-value/ov-usr-fcn.cc b/libinterp/octave-value/ov-usr-fcn.cc
--- a/libinterp/octave-value/ov-usr-fcn.cc
+++ b/libinterp/octave-value/ov-usr-fcn.cc
@@ -861,17 +861,20 @@ Programming Note: @code{nargin} does not
     {
       octave_value func = args(0);
 
       if (func.is_string ())
         {
           std::string name = func.string_value ();
           func = symbol_table::find_function (name);
           if (func.is_undefined ())
-            error ("nargout: invalid function name: %s", name.c_str ());
+            {
+              error ("nargin: invalid function name: %s", name.c_str ());
+              return retval;
+            }
         }
 
       octave_function *fcn_val = func.function_value ();
       if (fcn_val)
         {
           octave_user_function *fcn = fcn_val->user_function_value (true);
 
           if (fcn)
@@ -968,17 +971,20 @@ returns -1 for all anonymous functions.\
     {
       octave_value func = args(0);
 
       if (func.is_string ())
         {
           std::string name = func.string_value ();
           func = symbol_table::find_function (name);
           if (func.is_undefined ())
-            error ("nargout: invalid function name: %s", name.c_str ());
+            {
+              error ("nargout: invalid function name: %s", name.c_str ());
+              return retval;
+            }
         }
 
       if (func.is_inline_function ())
         {
           retval = 1;
           return retval;
         }
 
diff --git a/libinterp/octave.cc b/libinterp/octave.cc
--- a/libinterp/octave.cc
+++ b/libinterp/octave.cc
@@ -709,17 +709,18 @@ octave_process_command_line (int argc, c
 
   bool script_file = (argc - optind) > 0;
   if (! code_to_eval.empty () && script_file)
     {
       error ("--eval \"CODE\" and script file are mutually exclusive options");
 
       octave_print_terse_usage_and_exit ();
     }
-  an_octave_program = (script_file || ! code_to_eval.empty ()) && ! persist;
+  an_octave_program = ((script_file || ! code_to_eval.empty ())
+                       && ! persist && ! traditional);
 
 }
 
 // EMBEDDED is declared int instead of bool because this function is
 // declared extern "C".
 
 void
 octave_initialize_interpreter (int argc, char **argv, int embedded)
diff --git a/scripts/plot/draw/private/__ezplot__.m b/scripts/plot/draw/private/__ezplot__.m
--- a/scripts/plot/draw/private/__ezplot__.m
+++ b/scripts/plot/draw/private/__ezplot__.m
@@ -66,45 +66,23 @@ function [h, needusage] = __ezplot__ (pl
       nargs = 2;
 
   endswitch
 
   parametric = false;
   fun = varargin{1};
   if (ischar (fun))
     if (exist (fun, "file") || exist (fun, "builtin"))
-      fun = inline ([fun "(t)"]);
+      fun = str2func (fun);            # convert to function handle
     else
-      fun = vectorize (inline (fun));
-    endif
-    argids = argnames (fun);
-    if (isplot && length (argids) == 2)
-      nargs = 2;
-    elseif (numel (argids) != nargs)
-      error ("%s: expecting a function of %d arguments", ezfunc, nargs);
+      fun = vectorize (inline (fun));  # convert to inline function
     endif
-    fstr = formula (fun);
-    if (isplot)
-      xarg = argids{1};
-      if (nargs == 2)
-        yarg = argids{2};
-      else
-        yarg = "";
-      endif
-    elseif (isplot3)
-      xarg = "x";
-      yarg = "y";
-    elseif (ispolar)
-      xarg = "";
-      yarg = "";
-    else
-      xarg = argids{1};
-      yarg = argids{2};
-    endif
-  elseif (strcmp (typeinfo (fun), "inline function"))
+  endif
+
+  if (strcmp (typeinfo (fun), "inline function"))
     argids = argnames (fun);
     if (isplot && length (argids) == 2)
       nargs = 2;
     elseif (numel (argids) != nargs)
       error ("%s: expecting a function of %d arguments", ezfunc, nargs);
     endif
     fun = vectorize (fun);
     fstr = formula (fun);
@@ -128,16 +106,21 @@ function [h, needusage] = __ezplot__ (pl
   elseif (isa (fun, "function_handle"))
     fstr = func2str (fun);
     idx = index (fstr, ')');
     if (idx != 0)
       args = regexp (fstr(3:(idx-1)), '\w+', 'match');
       fstr = fstr(idx+2:end);  # remove '@(x) ' from string name
     else
       args = {"x"};
+      try
+        if (builtin ("nargin", fun) == 2)
+          args{2} = "y";
+        endif
+      end_try_catch
     endif
     if (isplot && length (args) == 2)
       nargs = 2;
     elseif (numel (args) != nargs)
       error ("%s: expecting a function of %d arguments", ezfunc, nargs);
     endif
     if (isplot)
       xarg = args{1};
diff --git a/scripts/time/asctime.m b/scripts/time/asctime.m
--- a/scripts/time/asctime.m
+++ b/scripts/time/asctime.m
@@ -14,24 +14,24 @@
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} asctime (@var{tm_struct})
 ## Convert a time structure to a string using the following
-## format: @qcode{"ddd mmm mm HH:MM:SS yyyy"}.
+## format: @qcode{"ddd mmm mm HH:MM:SS yyyy@xbackslashchar{}n"}.
 ##
 ## For example:
 ##
 ## @example
 ## @group
 ## asctime (localtime (time ()))
-##      @result{} "Mon Feb 17 01:15:06 1997"
+##      @result{} "Mon Feb 17 01:15:06 1997@xbackslashchar{}n"
 ## @end group
 ## @end example
 ##
 ## This is equivalent to @code{ctime (time ())}.
 ## @seealso{ctime, localtime, time}
 ## @end deftypefn
 
 ## Author: jwe
@@ -46,11 +46,13 @@ function retval = asctime (tm_struct)
 
 endfunction
 
 
 %!test
 %! t = time ();
 %! assert (strcmp (asctime (localtime (t)), ctime (t)));
 
+%!assert (asctime (localtime (time ()))(end), "\n")
+
 %!error asctime ()
 %!error asctime (1, 2)
 
diff --git a/scripts/time/ctime.m b/scripts/time/ctime.m
--- a/scripts/time/ctime.m
+++ b/scripts/time/ctime.m
@@ -23,17 +23,17 @@
 ## @code{asctime}.
 ##
 ## The function @code{ctime (time)} is equivalent to
 ## @code{asctime (localtime (time))}.  For example:
 ##
 ## @example
 ## @group
 ## ctime (time ())
-##    @result{} "Mon Feb 17 01:15:06 1997"
+##    @result{} "Mon Feb 17 01:15:06 1997@xbackslashchar{}n"
 ## @end group
 ## @end example
 ## @seealso{asctime, time, localtime}
 ## @end deftypefn
 
 ## Author: jwe
 
 function retval = ctime (t)
@@ -46,11 +46,13 @@ function retval = ctime (t)
 
 endfunction
 
 
 %!test
 %! t = time ();
 %! assert (strcmp (asctime (localtime (t)), ctime (t)));
 
+%!assert (ctime (time ())(end), "\n")
+
 %!error ctime ()
 %!error ctime (1, 2)
 
