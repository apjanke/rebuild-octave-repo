# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1248416000 -7200
#      Fri Jul 24 08:13:20 2009 +0200
# Node ID 0c7d84a65386ebd9ca84c53e740b9f5e0a4a9392
# Parent  f9fb8c1a8e45add106efab5da93857154863c996
allow taking handles of methods with no base overload

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,18 @@
+2009-07-24  Jaroslav Hajek  <highegg@gmail.com>
+
+	* load-path.cc (load_path::do_any_class_method): New method.
+	* load-path.h (load_path::do_any_class_method): New method decl.
+	(load_path::any_class_method): New method.
+	* ov-fcn-handle.cc (octave_fcn_handle::do_multi_index_op): Support
+	calls without non-overloaded base function.
+	(make_fcn_handle): Support creation without non-overloaded base
+	function.
+
 2009-07-23  Shai Ayal  <shaiay@users.sourceforge.net>
 
 	* DLD-FUNCTIONS/fltk_backend.cc (plot_window::pixel2axes_or_ca):
 	Replace plot_window::pixel2axes and use algorithm from octavede.
 	(plot_window::handle): Zooming now works on the axes below the
 	mouse pointer instead of the current axes. Combine old and new
 	zooming methods.
 	(help_text): Update to reflect new mouse/key bindings.
diff --git a/src/load-path.cc b/src/load-path.cc
--- a/src/load-path.cc
+++ b/src/load-path.cc
@@ -1086,16 +1086,38 @@ load_path::do_methods (const std::string
     }
 
   if (! retval.empty ())
     retval.sort ();
 
   return retval;
 }
 
+bool
+load_path::do_any_class_method (const std::string& meth) const
+{
+  bool retval = false;
+
+  //  update ();
+
+  for (const_method_map_iterator q = method_map.begin ();
+       q != method_map.end (); q++)
+    {
+      const fcn_map_type& m = q->second;
+
+      if (m.find (meth) != m.end ())
+        {
+          retval = true;
+          break;
+        }
+    }
+
+  return retval;
+}
+
 std::string
 load_path::do_find_file (const std::string& file) const
 {
   std::string retval;
 
   if (file.find_first_of (file_ops::dir_sep_chars ()) != std::string::npos)
     {
       if (octave_env::absolute_pathname (file)
diff --git a/src/load-path.h b/src/load-path.h
--- a/src/load-path.h
+++ b/src/load-path.h
@@ -103,16 +103,22 @@ public:
   }
 
   static std::list<std::string> methods (const std::string& class_name)
   {
     return instance_ok ()
       ? instance->do_methods (class_name) : std::list<std::string> ();
   }
 
+  static bool any_class_method (const std::string& meth)
+  {
+    return instance_ok ()
+      ? instance->do_any_class_method (meth) : false;
+  }
+
   static std::string find_fcn (const std::string& fcn, std::string& dir_name)
   {
     return instance_ok ()
       ? instance->do_find_fcn (fcn, dir_name) : std::string ();
   }
 
   static std::string find_fcn (const std::string& fcn)
   {
@@ -474,16 +480,18 @@ private:
 
   std::string do_find_method (const std::string& class_name,
 			      const std::string& meth,
 			      std::string& dir_name,
 			      int type = M_FILE | OCT_FILE | MEX_FILE) const;
 
   std::list<std::string> do_methods (const std::string& class_name) const;
 
+  bool do_any_class_method (const std::string& meth) const;
+
   std::string do_find_file (const std::string& file) const;
 
   std::string do_find_dir (const std::string& dir) const;
 
   std::string do_find_first_of (const string_vector& files) const;
 
   string_vector do_find_all_first_of (const string_vector& files) const;
 
diff --git a/src/ov-fcn-handle.cc b/src/ov-fcn-handle.cc
--- a/src/ov-fcn-handle.cc
+++ b/src/ov-fcn-handle.cc
@@ -117,17 +117,18 @@ octave_fcn_handle::subsref (const std::s
 }
 
 octave_value_list
 octave_fcn_handle::do_multi_index_op (int nargout, 
                                       const octave_value_list& args)
 {
   octave_value_list retval;
 
-  out_of_date_check (fcn);
+  if (fcn.is_defined ())
+    out_of_date_check (fcn);
 
   if (disp.get () && ! args.empty ())
     {
       // Possibly overloaded function.
       octave_value ovfcn = fcn;
 
       // Get dynamic (class) dispatch type.
       std::string ddt = get_dispatch_type (args);
@@ -150,16 +151,23 @@ octave_fcn_handle::do_multi_index_op (in
         {
           octave_value method = symbol_table::find_method (nm, ddt);
           if (method.is_defined ())
             ovfcn = method;
         }
 
       if (ovfcn.is_defined ())
         retval = ovfcn.do_multi_index_op (nargout, args);
+      else if (fcn.is_undefined ())
+        {
+          if (ddt.empty ())
+            ddt = args(0).class_name ();
+
+          error ("no %s method to handle class %s", nm.c_str (), ddt.c_str ());
+        }
       else
         error ("invalid function handle");
     }
   else
     {
       // Non-overloaded function (anonymous, subfunction, private function).
       if (fcn.is_defined ())
         retval = fcn.do_multi_index_op (nargout, args);
@@ -1424,25 +1432,42 @@ make_fcn_handle (const std::string& nm)
 	  break;
 
 	case '|':
 	  tnm = "or";
 	  break;
 	}
     }
 
+  bool handle_ok = false;
   octave_value f = symbol_table::find_function (tnm);
+
+  if (f.is_undefined ())
+    {
+      if (load_path::any_class_method (tnm))
+        handle_ok = true;
+      else
+        {
+          load_path::update ();
+          if (load_path::any_class_method (tnm))
+            handle_ok = true;
+        }
+    }
+  else
+    handle_ok = true;
+
   octave_function *fptr = f.is_defined () ? f.function_value () : 0;
 
-  if (fptr)
+
+  if (handle_ok)
     {
       // If it's a subfunction, private function, or class constructor,
       // we want no dispatch.
-      if (fptr->is_nested_function () || fptr->is_private_function ()
-          || fptr->is_class_constructor ())
+      if (fptr && (fptr->is_nested_function () || fptr->is_private_function ()
+          || fptr->is_class_constructor ()))
         retval = octave_value (new octave_fcn_handle (f, tnm));
       else
         {
           typedef octave_fcn_handle::str_ov_map str_ov_map;
           std::auto_ptr<str_ov_map> disp (new str_ov_map);
           const string_vector cnames = get_builtin_classes ();
           for (octave_idx_type i = 0; i < cnames.length (); i++)
             {
