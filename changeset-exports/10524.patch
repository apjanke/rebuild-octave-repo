# HG changeset patch
# User David Bateman <dbateman@free.fr>
# Date 1271367630 -7200
#      Thu Apr 15 23:40:30 2010 +0200
# Node ID 1c6ff93c025a16a972dae03c9b6efea0535417a8
# Parent  e74bff13aa26bdb96a4c572f239cfc1e4715b496
Reimplement the other discrete distribution functions using lookup

diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,8 +1,14 @@
+2010-04-13  David Bateman  <dbateman@free.fr>
+
+	* statistics/discrete_pdf.m: Reimplement using lookup.
+	* statistics/discrete_inv.m: Reimplement using lookup.
+	* statistics/discrete_cdf.m: typo in last patch.
+
 2010-04-15  Jaroslav Hajek  <highegg@gmail.com>
 
 	* statistics/distributions/stdnormal_cdf.m: Calculate using erfc.
 
 2010-04-13  David Bateman  <dbateman@free.fr>
 
 	* statistics/discrete_cdf.m: Reimplement using lookup.
 
diff --git a/scripts/plot/private/__patch__.m b/scripts/plot/private/__patch__.m
--- a/scripts/plot/private/__patch__.m
+++ b/scripts/plot/private/__patch__.m
@@ -301,16 +301,16 @@ function update_fvc (h, d)
 endfunction
 
 function update_handle (h, isfv)
   persistent recursive = false;
 
   if (! recursive)
     recursive = true;
     f = get (h);
-    if (isfvc)
+    if (isfv)
       set (h, setvertexdata ([fieldnames(f), struct2cell(f)].'(:)){:});
     else
       set (h, setdata ([fieldnames(f), struct2cell(f)].'(:)){:});
     endif
     recursive = false;
   endif
 endfunction
diff --git a/scripts/statistics/distributions/discrete_cdf.m b/scripts/statistics/distributions/discrete_cdf.m
--- a/scripts/statistics/distributions/discrete_cdf.m
+++ b/scripts/statistics/distributions/discrete_cdf.m
@@ -40,21 +40,17 @@ function cdf = discrete_cdf (x, v, p)
   endif
 
   n = numel (x);
   m = length (v);
   x = reshape (x, n, 1);
   v = reshape (v, 1, m);
   p = reshape (p / sum (p), m, 1);
 
-  cdf = zeros (sz);
-  k = find (isnan (x));
-  if (any (k))
-    cdf (k) = NaN;
-  endif
+  cdf = NaN (sz);
   k = find (!isnan (x));
   if (any (k))
     n = length (k);
     [vs, vi] = sort (v);
-    cdf = [0 ; cumsum(p(vi))](lookup (vs, x(k)) + 1);
+    cdf(k) = [0 ; cumsum(p(vi))](lookup (vs, x(k)) + 1);
   endif
 
 endfunction
diff --git a/scripts/statistics/distributions/discrete_inv.m b/scripts/statistics/distributions/discrete_inv.m
--- a/scripts/statistics/distributions/discrete_inv.m
+++ b/scripts/statistics/distributions/discrete_inv.m
@@ -41,40 +41,27 @@ function inv = discrete_inv (x, v, p)
     error ("discrete_inv: p must be a vector with length (v) elements");
   elseif (! (all (p >= 0) && any (p)))
     error ("discrete_inv: p must be a nonzero, nonnegative vector");
   endif
 
   n = numel (x);
   x = reshape (x, 1, n);
   m = length (v);
-  v = sort (v);
-  s = reshape (cumsum (p / sum (p)), m, 1);
+  [v, idx] = sort (v);
+  p = reshape (cumsum (p (idx) / sum (p)), m, 1);
 
-  ## Allow storage allocated for P to be reclaimed.
-  p = [];
-
-  inv = NaN * ones (sz);
+  inv = NaN (sz);
   if (any (k = find (x == 0)))
     inv(k) = -Inf;
   endif
   if (any (k = find (x == 1)))
     inv(k) = v(m) * ones (size (k));
   endif
 
   if (any (k = find ((x > 0) & (x < 1))))
     n = length (k);
-
-    ## The following loop is a space/time tradeoff in favor of space,
-    ## since the dataset may be large.
-    ##
-    ## Vectorized code is:
-    ##
-    ##     inv(k) = v(sum ((ones (m, 1) * x(k)) > (s * ones (1, n))) + 1);
-
-    for q = 1:n
-      inv(k(q)) = v(sum (x(k(q)) > s) + 1);
-    endfor
+    inv (k) = v(length (p) - lookup (sort (p,"descend"), x(k)) + 1);
   endif
 
 endfunction
 
 
diff --git a/scripts/statistics/distributions/discrete_pdf.m b/scripts/statistics/distributions/discrete_pdf.m
--- a/scripts/statistics/distributions/discrete_pdf.m
+++ b/scripts/statistics/distributions/discrete_pdf.m
@@ -44,20 +44,16 @@ function pdf = discrete_pdf (x, v, p)
   endif
 
   n = numel (x);
   m = length (v);
   x = reshape (x, n, 1);
   v = reshape (v, 1, m);
   p = reshape (p / sum (p), m, 1);
 
-  pdf = zeros (sz);
-  k = find (isnan (x));
-  if (any (k))
-    pdf (k) = NaN;
-  endif
+  pdf = NaN (sz);
   k = find (!isnan (x));
   if (any (k))
     n = length (k);
-    pdf (k) = ((x(k) * ones (1, m)) == (ones (n, 1) * v)) * p;
+    pdf (k) = p (lookup (v, x(k), 'm'));
   endif
 
 endfunction
