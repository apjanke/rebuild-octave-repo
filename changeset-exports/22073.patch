# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1467930290 14400
#      Thu Jul 07 18:24:50 2016 -0400
# Node ID d18c63a45070e56ebb594ce3524615cbfe6cfe0e
# Parent  7680225527ef2686e856ce74ae230e962d34faa6
wrappers for setting long double rounding mode (bug #48319)

* fpucw-wrappers.c: Rename from fpucw-wrapper.c.
* fpucw-wrappers.h: Rename from fpucw-wrapper.h.  Change all uses.
* liboctave/wrappers/module.mk: Update.
* fpucw-wrappers.h, fpucw-wrappers.c
(octave_begin_long_double_rounding, octave_end_long_double_rounding):
New functions.

* oct-inttypes.cc: Use wrapper functions from fpucw-wrappers.h instead
of instead of macros from fpucw.h.

diff --git a/libinterp/octave-value/ov-java.cc b/libinterp/octave-value/ov-java.cc
--- a/libinterp/octave-value/ov-java.cc
+++ b/libinterp/octave-value/ov-java.cc
@@ -22,17 +22,17 @@ along with Octave; see the file COPYING.
 
 #if defined (HAVE_CONFIG_H)
 #  include "config.h"
 #endif
 
 #include "defun.h"
 #include "error.h"
 #include "errwarn.h"
-#include "fpucw-wrapper.h"
+#include "fpucw-wrappers.h"
 
 #if defined (HAVE_WINDOWS_H)
 #  include <windows.h>
 #endif
 
 #include <algorithm>
 #include <map>
 #include <iostream>
diff --git a/liboctave/util/oct-inttypes.cc b/liboctave/util/oct-inttypes.cc
--- a/liboctave/util/oct-inttypes.cc
+++ b/liboctave/util/oct-inttypes.cc
@@ -20,18 +20,18 @@ along with Octave; see the file COPYING.
 <http://www.gnu.org/licenses/>.
 
 */
 
 #if defined (HAVE_CONFIG_H)
 #  include "config.h"
 #endif
 
+#include "fpucw-wrappers.h"
 #include "lo-error.h"
-
 #include "oct-inttypes.h"
 
 template <typename T>
 const octave_int<T> octave_int<T>::zero (static_cast<T> (0));
 
 template <typename T>
 const octave_int<T> octave_int<T>::one (static_cast<T> (1));
 
@@ -105,42 +105,38 @@ INSTANTIATE_CONVERT_REAL (long double);
 
 #if defined (OCTAVE_ENSURE_LONG_DOUBLE_OPERATIONS_ARE_NOT_TRUNCATED)
 
 #define DEFINE_OCTAVE_LONG_DOUBLE_CMP_OP_TEMPLATES(T) \
   template <typename xop> \
   bool \
   octave_int_cmp_op::external_mop (double x, T y) \
   { \
-     DECL_LONG_DOUBLE_ROUNDING \
-   \
-     BEGIN_LONG_DOUBLE_ROUNDING (); \
+     unsigned int oldcw = octave_begin_long_double_rounding (); \
    \
      bool retval = xop::op (static_cast<long double> (x), \
                             static_cast<long double> (y)); \
    \
-     END_LONG_DOUBLE_ROUNDING (); \
+     octave_end_long_double_rounding (oldcw); \
    \
      return retval; \
   } \
    \
   template <typename xop> \
   bool \
   octave_int_cmp_op::external_mop (T x, double y) \
   { \
-     DECL_LONG_DOUBLE_ROUNDING \
-   \
-     BEGIN_LONG_DOUBLE_ROUNDING (); \
+    unsigned int oldcw = octave_begin_long_double_rounding (); \
    \
-     bool retval = xop::op (static_cast<long double> (x), \
-                            static_cast<long double> (y)); \
+    bool retval = xop::op (static_cast<long double> (x), \
+                           static_cast<long double> (y)); \
    \
-     END_LONG_DOUBLE_ROUNDING (); \
+    octave_end_long_double_rounding (oldcw); \
    \
-     return retval; \
+    return retval; \
   }
 
 DEFINE_OCTAVE_LONG_DOUBLE_CMP_OP_TEMPLATES (int64_t)
 DEFINE_OCTAVE_LONG_DOUBLE_CMP_OP_TEMPLATES (uint64_t)
 
 #define INSTANTIATE_LONG_DOUBLE_LONG_DOUBLE_CMP_OP(OP, T) \
   template OCTAVE_API bool \
   octave_int_cmp_op::external_mop<octave_int_cmp_op::OP> (double, T); \
@@ -156,74 +152,66 @@ DEFINE_OCTAVE_LONG_DOUBLE_CMP_OP_TEMPLAT
   INSTANTIATE_LONG_DOUBLE_LONG_DOUBLE_CMP_OP (ne, T)
 
 INSTANTIATE_LONG_DOUBLE_LONG_DOUBLE_CMP_OPS (int64_t);
 INSTANTIATE_LONG_DOUBLE_LONG_DOUBLE_CMP_OPS (uint64_t);
 
 uint64_t
 octave_external_uint64_uint64_mul (uint64_t x, uint64_t y)
 {
-  DECL_LONG_DOUBLE_ROUNDING
-
-  BEGIN_LONG_DOUBLE_ROUNDING ();
+  unsigned int oldcw = octave_begin_long_double_rounding ();
 
   uint64_t retval = octave_int_arith_base<uint64_t, false>::mul_internal (x, y);
 
-  END_LONG_DOUBLE_ROUNDING ();
+  octave_end_long_double_rounding (oldcw);
 
   return retval;
 }
 
 int64_t
 octave_external_int64_int64_mul (int64_t x, int64_t y)
 {
-  DECL_LONG_DOUBLE_ROUNDING
-
-  BEGIN_LONG_DOUBLE_ROUNDING ();
+  unsigned int oldcw = octave_begin_long_double_rounding ();
 
   int64_t retval = octave_int_arith_base<int64_t, true>::mul_internal (x, y);
 
-  END_LONG_DOUBLE_ROUNDING ();
+  octave_end_long_double_rounding (oldcw);
 
   return retval;
 }
 
 // Note that if we return long double it is apparently possible for
 // truncation to happen at the point of storing the result in retval,
 // which can happen after we end long double rounding.  Attempt to avoid
 // that problem by storing the full precision temporary value in the
 // integer value before we end the long double rounding mode.
 // Similarly, the conversion from the 64-bit integer type to long double
 // must also occur in long double rounding mode.
 
 #define OCTAVE_LONG_DOUBLE_OP(T, OP, NAME) \
   T \
   external_double_ ## T ## _ ## NAME (double x, T y) \
   { \
-    DECL_LONG_DOUBLE_ROUNDING \
- \
-    BEGIN_LONG_DOUBLE_ROUNDING (); \
+    unsigned int oldcw = octave_begin_long_double_rounding (); \
  \
     T retval = T (x OP static_cast<long double> (y.value ())); \
  \
-    END_LONG_DOUBLE_ROUNDING (); \
+    octave_end_long_double_rounding (oldcw); \
  \
     return retval; \
   } \
  \
   T \
   external_ ## T ## _double_ ## NAME (T x, double y) \
   { \
-    DECL_LONG_DOUBLE_ROUNDING \
- \
-    BEGIN_LONG_DOUBLE_ROUNDING (); \
+    unsigned int oldcw = octave_begin_long_double_rounding (); \
  \
     T retval = T (static_cast<long double> (x.value ()) OP y); \
  \
-    END_LONG_DOUBLE_ROUNDING (); \
+    octave_end_long_double_rounding (oldcw); \
  \
     return retval; \
   }
 
 #define OCTAVE_LONG_DOUBLE_OPS(T) \
   OCTAVE_LONG_DOUBLE_OP (T, +, add); \
   OCTAVE_LONG_DOUBLE_OP (T, -, sub); \
   OCTAVE_LONG_DOUBLE_OP (T, *, mul); \
diff --git a/liboctave/util/oct-inttypes.h b/liboctave/util/oct-inttypes.h
--- a/liboctave/util/oct-inttypes.h
+++ b/liboctave/util/oct-inttypes.h
@@ -23,22 +23,22 @@ along with Octave; see the file COPYING.
 
 #if ! defined (octave_oct_inttypes_h)
 #define octave_oct_inttypes_h 1
 
 #include "octave-config.h"
 
 #include <cstdlib>
 
+#include <iosfwd>
 #include <limits>
-#include <iosfwd>
 
-#include "lo-traits.h"
 #include "lo-math.h"
 #include "lo-mappers.h"
+#include "lo-traits.h"
 
 template <typename T> class octave_int;
 
 typedef octave_int<int8_t> octave_int8;
 typedef octave_int<int16_t> octave_int16;
 typedef octave_int<int32_t> octave_int32;
 typedef octave_int<int64_t> octave_int64;
 
diff --git a/liboctave/wrappers/fpucw-wrapper.c b/liboctave/wrappers/fpucw-wrappers.c
rename from liboctave/wrappers/fpucw-wrapper.c
rename to liboctave/wrappers/fpucw-wrappers.c
--- a/liboctave/wrappers/fpucw-wrapper.c
+++ b/liboctave/wrappers/fpucw-wrappers.c
@@ -30,17 +30,17 @@ along with Octave; see the file COPYING.
 #endif
 
 #if defined (HAVE_FPU_CONTROL_H)
 #  include <fpu_control.h>
 #endif
 
 #include "fpucw.h"
 
-#include "fpucw-wrapper.h"
+#include "fpucw-wrappers.h"
 
 #if ! defined (_FPU_DEFAULT)
 #  if defined __i386__ || defined __x86_64__
 #    define _FPU_DEFAULT 0x037f
 #  else
 #    define _FPU_DEFAULT 0
 #  endif
 #endif
@@ -48,8 +48,26 @@ along with Octave; see the file COPYING.
 void
 octave_set_default_fpucw (void)
 {
   fpucw_t cw = GET_FPUCW ();
 
   if (cw != _FPU_DEFAULT)
     SET_FPUCW (_FPU_DEFAULT);
 }
+
+// OLDCW is the name used by the fpucw.h macros.
+
+unsigned int
+octave_begin_long_double_rounding (void)
+{
+  DECL_LONG_DOUBLE_ROUNDING
+
+  BEGIN_LONG_DOUBLE_ROUNDING ();
+
+  return oldcw;
+}
+
+void
+octave_end_long_double_rounding (unsigned int oldcw)
+{
+  END_LONG_DOUBLE_ROUNDING ();
+}
diff --git a/liboctave/wrappers/fpucw-wrapper.h b/liboctave/wrappers/fpucw-wrappers.h
rename from liboctave/wrappers/fpucw-wrapper.h
rename to liboctave/wrappers/fpucw-wrappers.h
--- a/liboctave/wrappers/fpucw-wrapper.h
+++ b/liboctave/wrappers/fpucw-wrappers.h
@@ -15,25 +15,28 @@ FITNESS FOR A PARTICULAR PURPOSE.  See t
 for more details.
 
 You should have received a copy of the GNU General Public License
 along with Octave; see the file COPYING.  If not, see
 <http://www.gnu.org/licenses/>.
 
 */
 
-#if ! defined (octave_fpucw_wrapper_h)
-#define octave_fpucw_wrapper_h 1
+#if ! defined (octave_fpucw_wrappers_h)
+#define octave_fpucw_wrappers_h 1
 
 #if defined __cplusplus
 extern "C" {
 #endif
 
-/* For now, all we need to be able to do is set the control word to
-   the default value.  */
+extern void octave_set_default_fpucw (void);
+
+// unsigned int must match the actual type of fpucw_t.
 
-extern void octave_set_default_fpucw (void);
+extern unsigned int octave_begin_long_double_rounding (void);
+
+extern void octave_end_long_double_rounding (unsigned int);
 
 #if defined __cplusplus
 }
 #endif
 
 #endif
diff --git a/liboctave/wrappers/module.mk b/liboctave/wrappers/module.mk
--- a/liboctave/wrappers/module.mk
+++ b/liboctave/wrappers/module.mk
@@ -1,16 +1,16 @@
 NOINSTALL_WRAPPERS_INC = \
   liboctave/wrappers/areadlink-wrapper.h \
   liboctave/wrappers/base64-wrappers.h \
   liboctave/wrappers/canonicalize-file-name-wrapper.h \
   liboctave/wrappers/dirent-wrappers.h \
   liboctave/wrappers/fcntl-wrappers.h \
   liboctave/wrappers/filepos-wrappers.h \
-  liboctave/wrappers/fpucw-wrapper.h \
+  liboctave/wrappers/fpucw-wrappers.h \
   liboctave/wrappers/gen-tempname-wrapper.h \
   liboctave/wrappers/getopt-wrapper.h \
   liboctave/wrappers/glob-wrappers.h \
   liboctave/wrappers/hash-wrappers.h \
   liboctave/wrappers/mkostemp-wrapper.h \
   liboctave/wrappers/nanosleep-wrapper.h \
   liboctave/wrappers/nproc-wrapper.h \
   liboctave/wrappers/octave-popen2.h \
@@ -33,17 +33,17 @@ NOINSTALL_WRAPPERS_INC = \
 
 WRAPPERS_SRC = \
   liboctave/wrappers/areadlink-wrapper.c \
   liboctave/wrappers/base64-wrappers.c \
   liboctave/wrappers/canonicalize-file-name-wrapper.c \
   liboctave/wrappers/dirent-wrappers.c \
   liboctave/wrappers/fcntl-wrappers.c \
   liboctave/wrappers/filepos-wrappers.c \
-  liboctave/wrappers/fpucw-wrapper.c \
+  liboctave/wrappers/fpucw-wrappers.c \
   liboctave/wrappers/gen-tempname-wrapper.c \
   liboctave/wrappers/getopt-wrapper.c \
   liboctave/wrappers/glob-wrappers.c \
   liboctave/wrappers/hash-wrappers.c \
   liboctave/wrappers/mkostemp-wrapper.c \
   liboctave/wrappers/nanosleep-wrapper.c \
   liboctave/wrappers/nproc-wrapper.c \
   liboctave/wrappers/octave-popen2.c \
