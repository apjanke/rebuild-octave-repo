# HG changeset patch
# User Jacob Dawid <jacob.dawid@googlemail.com>
# Date 1312189915 -7200
#      Mon Aug 01 11:11:55 2011 +0200
# Node ID d3bede98d798d4b5f8c19b0f1753ce38f72286c3
# Parent  395393bd2f56abfe2f2f15da90028e22d946b3ef
Removed a bunch of sourcecode again.

diff --git a/gui/src/terminal/Pty.cpp b/gui/src/terminal/Pty.cpp
--- a/gui/src/terminal/Pty.cpp
+++ b/gui/src/terminal/Pty.cpp
@@ -124,98 +124,40 @@ Pty::erase () const
       struct::termios ttyAttributes;
       pty ()->tcGetAttr (&ttyAttributes);
       return ttyAttributes.c_cc[VERASE];
     }
 
   return _eraseChar;
 }
 
-void
-Pty::addEnvironmentVariables (const QStringList & environment)
-{
-  QListIterator < QString > iter (environment);
-  while (iter.hasNext ())
-    {
-      QString pair = iter.next ();
-
-      // split on the first '=' character
-      int pos = pair.indexOf ('=');
-
-      if (pos >= 0)
-	{
-	  QString variable = pair.left (pos);
-	  QString value = pair.mid (pos + 1);
-
-          setEnvironmentVariable (variable, value);
-	}
-    }
-}
-
 int
 Pty::start (const QString & program,
-	    const QStringList & programArguments,
-	    const QStringList & environment,
-	    ulong winid,
-	    bool addToUtmp,
-	    const QString & dbusService, const QString & dbusSession)
+            const QStringList & programArguments)
 {
-  Q_UNUSED(dbusService);
-  Q_UNUSED(dbusSession);
-  Q_UNUSED(winid);
   clearProgram ();
-
-  // For historical reasons, the first argument in programArguments is the 
-  // name of the program to execute, so create a list consisting of all
-  // but the first argument to pass to setProgram()
-  Q_ASSERT (programArguments.count () >= 1);
   setProgram (program.toLatin1 (), programArguments.mid (1));
 
-  addEnvironmentVariables (environment);
-
-  //if (!dbusService.isEmpty ())
-  //  setEnv ("KONSOLE_DBUS_SERVICE", dbusService);
-  //if (!dbusSession.isEmpty ())
-  //  setEnv ("KONSOLE_DBUS_SESSION", dbusSession);
-
-  //setEnv ("WINDOWID", QString::number (winid));
-
-  // unless the LANGUAGE environment variable has been set explicitly
-  // set it to a null string
-  // this fixes the problem where KCatalog sets the LANGUAGE environment
-  // variable during the application's startup to something which
-  // differs from LANG,LC_* etc. and causes programs run from
-  // the terminal to display messages in the wrong language
-  //
-  // this can happen if LANG contains a language which KDE
-  // does not have a translation for
-  //
-  // BR:149300
-  setEnvironmentVariable ("LANGUAGE", QString (),
-          false /* do not overwrite existing value if any */ );
-  setUseUtmp (addToUtmp);
-
-
   struct::termios ttmode;
   pty ()->tcGetAttr (&ttmode);
   if (!_xonXoff)
     ttmode.c_iflag &= ~(IXOFF | IXON);
   else
     ttmode.c_iflag |= (IXOFF | IXON);
 #ifdef IUTF8			// XXX not a reasonable place to check it.
   if (!_utf8)
     ttmode.c_iflag &= ~IUTF8;
   else
     ttmode.c_iflag |= IUTF8;
 #endif
 
   if (_eraseChar != 0)
     ttmode.c_cc[VERASE] = _eraseChar;
 
-  pty()->tcSetAttr(&ttmode);
+  pty ()->tcSetAttr(&ttmode);
   pty ()->setWinSize (_windowLines, _windowColumns);
 
   KProcess::start ();
 
   if (!waitForStarted ())
     return -1;
   return 0;
 }
@@ -269,29 +211,16 @@ Pty::sendData (const char *data, int len
 
 void
 Pty::dataReceived ()
 {
   QByteArray data = pty ()->readAll ();
   emit receivedData (data.constData (), data.count ());
 }
 
-int
-Pty::foregroundProcessGroup () const
-{
-  int pid = tcgetpgrp (pty ()->masterFd ());
-
-  if (pid != -1)
-    {
-      return pid;
-    }
-
-  return 0;
-}
-
 void
 Pty::setupChildProcess ()
 {
   KPtyProcess::setupChildProcess ();
 
   // reset all signal handlers
   // this ensures that terminal applications respond to 
   // signals generated via key sequences such as Ctrl+C
diff --git a/gui/src/terminal/Pty.h b/gui/src/terminal/Pty.h
--- a/gui/src/terminal/Pty.h
+++ b/gui/src/terminal/Pty.h
@@ -76,31 +76,19 @@ Q_OBJECT public:
      * Returns 0 if the process was started successfully or non-zero
      * otherwise.
      *
      * @param program Path to the program to start
      * @param arguments Arguments to pass to the program being started
      * @param environment A list of key=value pairs which will be added
      * to the environment for the new process.  At the very least this
      * should include an assignment for the TERM environment variable.
-     * @param winid Specifies the value of the WINDOWID environment variable
-     * in the process's environment.
-     * @param addToUtmp Specifies whether a utmp entry should be created for
-     * the pty used.  See K3Process::setUsePty() 
-     * @param dbusService Specifies the value of the KONSOLE_DBUS_SERVICE 
-     * environment variable in the process's environment.
-     * @param dbusSession Specifies the value of the KONSOLE_DBUS_SESSION
-     * environment variable in the process's environment. 
      */
   int start (const QString & program,
-	     const QStringList & arguments,
-	     const QStringList & environment,
-	     ulong winid,
-	     bool addToUtmp,
-	     const QString & dbusService, const QString & dbusSession);
+             const QStringList & arguments);
 
     /** TODO: Document me */
   void setWriteable (bool writeable);
 
     /** 
      * Enables or disables Xon/Xoff flow control.  The flow control setting
      * may be changed later by a terminal application, so flowControlEnabled()
      * may not equal the value of @p on in the previous call to setFlowControlEnabled()
@@ -120,26 +108,16 @@ Q_OBJECT public:
   QSize windowSize () const;
 
     /** TODO Document me */
   void setErase (char erase);
 
     /** */
   char erase () const;
 
-    /**
-     * Returns the process id of the teletype's current foreground
-     * process.  This is the process which is currently reading
-     * input sent to the terminal via. sendData()
-     *
-     * If there is a problem reading the foreground process group,
-     * 0 will be returned.
-     */
-  int foregroundProcessGroup () const;
-
   public slots:
     /**
      * Put the pty into UTF-8 mode on systems which support it.
      */
   void setUtf8Mode (bool on);
 
     /** 
      * Sends data to the process currently controlling the 
@@ -165,20 +143,16 @@ protected:
 
   private slots:
     // called when data is received from the terminal process 
   void dataReceived ();
 
 private:
   void init ();
 
-  // takes a list of key=value pairs and adds them
-  // to the environment for the process
-  void addEnvironmentVariables (const QStringList & environment);
-
   int _windowColumns;
   int _windowLines;
   char _eraseChar;
   bool _xonXoff;
   bool _utf8;
 };
 
 #endif // PTY_H
diff --git a/gui/src/terminal/QTerminalWidget.cpp b/gui/src/terminal/QTerminalWidget.cpp
--- a/gui/src/terminal/QTerminalWidget.cpp
+++ b/gui/src/terminal/QTerminalWidget.cpp
@@ -22,25 +22,24 @@
 
 struct TermWidgetImpl
 {
   TermWidgetImpl (QWidget * parent = 0);
 
   TerminalDisplay *m_terminalDisplay;
   Session *m_session;
   Session *createSession ();
-  TerminalDisplay *createTerminalDisplay (Session * session,
-					  QWidget * parent);
+  TerminalDisplay *createTerminalDisplay (QWidget * parent);
 };
 
 TermWidgetImpl::TermWidgetImpl (QWidget * parent)
 {
   QPalette palette = QApplication::palette ();
   m_session = createSession ();
-  m_terminalDisplay = createTerminalDisplay (this->m_session, parent);
+  m_terminalDisplay = createTerminalDisplay (parent);
   m_terminalDisplay->setBackgroundColor (palette.color (QPalette::Base));
   m_terminalDisplay->setForegroundColor (palette.color (QPalette::Text));
 }
 
 Session *
 TermWidgetImpl::createSession ()
 {
   Session *session = new Session ();
@@ -52,24 +51,23 @@ TermWidgetImpl::createSession ()
   session->setFlowControlEnabled (true);
   session->setHistoryType (HistoryTypeBuffer (1000));
   session->setDarkBackground (true);
   session->setKeyBindings ("");
   return session;
 }
 
 TerminalDisplay *
-TermWidgetImpl::createTerminalDisplay (Session * session, QWidget * parent)
+TermWidgetImpl::createTerminalDisplay (QWidget * parent)
 {
   TerminalDisplay *display = new TerminalDisplay (parent);
   display->setBellMode (TerminalDisplay::NotifyBell);
   display->setTerminalSizeHint (true);
   display->setTripleClickMode (TerminalDisplay::SelectWholeLine);
   display->setTerminalSizeStartup (true);
-  display->setRandomSeed (session->sessionId () * 31);
   return display;
 }
 
 QTerminalWidget::QTerminalWidget (int startnow, QWidget * parent):QWidget
   (parent)
 {
   m_impl = new TermWidgetImpl (this);
 
@@ -106,18 +104,18 @@ QTerminalWidget::initialize ()
 QTerminalWidget::~QTerminalWidget ()
 {
   emit destroyed ();
 }
 
 void
 QTerminalWidget::openTeletype (int fd)
 {
-  if (m_impl->m_session->isRunning ())
-    return;
+  //if (m_impl->m_session->isRunning ())
+  //  return;
 
   m_impl->m_session->openTeletype (fd);
 }
 
 void
 QTerminalWidget::setTextCodec (QTextCodec * codec)
 {
   if (!m_impl->m_session)
diff --git a/gui/src/terminal/Session.cpp b/gui/src/terminal/Session.cpp
--- a/gui/src/terminal/Session.cpp
+++ b/gui/src/terminal/Session.cpp
@@ -92,23 +92,19 @@ createUuid ()
   result.data3 = (result.data3 & 0x0FFF) | 0x4000;	// UV_Random
 
   return result;
 }
 
 Session::Session (QObject * parent):
 QObject (parent), _shellProcess (0), _emulation (0), _monitorActivity (false),
 _monitorSilence (false), _notifiedActivity (false), _autoClose (true),
-_wantedClose (false), _silenceSeconds (10), _addToUtmp (true),
+_wantedClose (false), _silenceSeconds (10),
 _flowControl (true), _fullScripting (false), _sessionId (0),
-/*_sessionProcessInfo (0), _foregroundProcessInfo (0),*/ _foregroundPid (0)
-  //, _zmodemBusy(false)
-  //, _zmodemProc(0)
-  //, _zmodemProgress(0)
-  , _hasDarkBackground (false)
+_hasDarkBackground (false)
 {
   _uniqueIdentifier = createUuid ();
 
   //prepare DBus communication
   //new SessionAdaptor(this);
   _sessionId = ++lastSessionId;
 
   // JPS: commented out for lack of DBUS support by default on OSX
@@ -165,46 +161,16 @@ Session::openTeletype (int fd)
   connect (_emulation, SIGNAL (useUtf8Request (bool)), _shellProcess,
 	   SLOT (setUtf8Mode (bool)));
   connect (_shellProcess, SIGNAL (finished (int, QProcess::ExitStatus)), this,
 	   SLOT (done (int)));
   connect (_emulation, SIGNAL (imageSizeChanged (int, int)), this,
 	   SLOT (updateWindowSize (int, int)));
 }
 
-WId
-Session::windowId () const
-{
-  // Returns a window ID for this session which is used
-  // to set the WINDOWID environment variable in the shell
-  // process.
-  //
-  // Sessions can have multiple views or no views, which means
-  // that a single ID is not always going to be accurate.
-  //
-  // If there are no views, the window ID is just 0.  If
-  // there are multiple views, then the window ID for the
-  // top-level window which contains the first view is
-  // returned
-
-  if (_views.count () == 0)
-    return 0;
-  else
-    {
-      QWidget *window = _views.first ();
-
-      Q_ASSERT (window);
-
-      while (window->parentWidget () != 0)
-	window = window->parentWidget ();
-
-      return window->winId ();
-    }
-}
-
 void
 Session::setDarkBackground (bool darkBackground)
 {
   _hasDarkBackground = darkBackground;
 }
 
 bool
 Session::hasDarkBackground () const
@@ -373,25 +339,16 @@ Session::terminalWarning (const QString 
   _emulation->receiveData (warningText.constData (),
 			   strlen (warningText.constData ()));
   _emulation->receiveData (messageText.constData (),
 			   strlen (messageText.constData ()));
   _emulation->receiveData ("\n\r\n\r", 4);
   _emulation->receiveData (redPenOff, strlen (redPenOff));
 }
 
-QString
-Session::shellSessionId () const
-{
-  QString friendlyUuid (_uniqueIdentifier.toString ());
-  friendlyUuid.remove ('-').remove ('{').remove ('}');
-
-  return friendlyUuid;
-}
-
 void
 Session::run ()
 {
   //check that everything is in place to run the session
   if (_program.isEmpty ())
     {
       //kWarning() << "Session::run() - program to run not set.";
     }
@@ -434,43 +391,34 @@ Session::run ()
 		       ("Could not find an interactive shell to start."));
       return;
     }
 
   // if no arguments are specified, fall back to program name
   QStringList arguments = _arguments.join (QChar (' ')).isEmpty ()?
     QStringList () << exec : _arguments;
 
-  // JPS: commented out for lack of DBUS support by default on OSX
-  QString dbusService = "";	//QDBusConnection::sessionBus().baseService();
   if (!_initialWorkingDir.isEmpty ())
     _shellProcess->setWorkingDirectory (_initialWorkingDir);
   else
     _shellProcess->setWorkingDirectory (QDir::homePath ());
 
   _shellProcess->setFlowControlEnabled (_flowControl);
   _shellProcess->setErase (_emulation->eraseChar ());
 
   // this is not strictly accurate use of the COLORFGBG variable.  This does not
   // tell the terminal exactly which colors are being used, but instead approximates
   // the color scheme as "black on white" or "white on black" depending on whether
   // the background color is deemed dark or not
   QString backgroundColorHint =
     _hasDarkBackground ? "COLORFGBG=15;0" : "COLORFGBG=0;15";
   _environment << backgroundColorHint;
-  _environment << QString ("SHELL_SESSION_ID=%1").arg (shellSessionId ());
 
   int result = _shellProcess->start (exec,
-				     arguments,
-				     _environment,
-				     windowId (),
-				     _addToUtmp,
-				     dbusService,
-				     (QLatin1String ("/Sessions/") +
-				      QString::number (_sessionId)));
+                                     arguments);
 
   if (result < 0)
     {
       QString msg;
       QTextStream msgStream (&msg);
       msgStream << QString ("Could not start program '") << exec <<
 	QString ("' with arguments '") << arguments.
 	join (" ") << QString ("'.");
@@ -560,36 +508,16 @@ Session::setUserTitle (int what, const Q
 
 QString
 Session::userTitle () const
 {
   return _userTitle;
 }
 
 void
-Session::setTabTitleFormat (TabTitleContext context, const QString & format)
-{
-  if (context == LocalTabTitle)
-    _localTabTitleFormat = format;
-  else if (context == RemoteTabTitle)
-    _remoteTabTitleFormat = format;
-}
-
-QString
-Session::tabTitleFormat (TabTitleContext context) const
-{
-  if (context == LocalTabTitle)
-    return _localTabTitleFormat;
-  else if (context == RemoteTabTitle)
-    return _remoteTabTitleFormat;
-
-  return QString ();
-}
-
-void
 Session::monitorTimerDone ()
 {
   //FIXME: The idea here is that the notification popup will appear to tell the user than output from
   //the terminal has stopped and the popup will disappear when the user activates the session.
   //
   //This breaks with the addition of multiple views of a session.  The popup should disappear
   //when any of the views of the session becomes active
 
@@ -631,18 +559,17 @@ Session::updateFlowControlState (bool su
     }
 }
 
 void
 Session::activityStateSet (int state)
 {
   if (state == NOTIFYBELL)
     {
-      emit bellRequest (QString ("Bell in session '%1'").
-			arg (_nameTitle.toLatin1 ().data ()));
+      // empty
     }
   else if (state == NOTIFYACTIVITY)
     {
       if (_monitorSilence)
 	{
 	  _monitorTimer->start (_silenceSeconds * 1000);
 	}
 
@@ -866,22 +793,16 @@ Session::environment () const
 }
 
 void
 Session::setEnvironment (const QStringList & environment)
 {
   _environment = environment;
 }
 
-int
-Session::sessionId () const
-{
-  return _sessionId;
-}
-
 void
 Session::setKeyBindings (const QString & id)
 {
   _emulation->setKeyBindings (id);
 }
 
 void
 Session::setTitle (TitleRole role, const QString & newTitle)
@@ -961,72 +882,16 @@ Session::arguments () const
 }
 
 QString
 Session::program () const
 {
   return _program;
 }
 
-// unused currently
-bool
-Session::isMonitorActivity () const
-{
-  return _monitorActivity;
-}
-
-// unused currently
-bool
-Session::isMonitorSilence () const
-{
-  return _monitorSilence;
-}
-
-void
-Session::setMonitorActivity (bool _monitor)
-{
-  _monitorActivity = _monitor;
-  _notifiedActivity = false;
-
-  activityStateSet (NOTIFYNORMAL);
-}
-
-void
-Session::setMonitorSilence (bool _monitor)
-{
-  if (_monitorSilence == _monitor)
-    return;
-
-  _monitorSilence = _monitor;
-  if (_monitorSilence)
-    {
-      _monitorTimer->start (_silenceSeconds * 1000);
-    }
-  else
-    _monitorTimer->stop ();
-
-  activityStateSet (NOTIFYNORMAL);
-}
-
-void
-Session::setMonitorSilenceSeconds (int seconds)
-{
-  _silenceSeconds = seconds;
-  if (_monitorSilence)
-    {
-      _monitorTimer->start (_silenceSeconds * 1000);
-    }
-}
-
-void
-Session::setAddToUtmp (bool set)
-{
-  _addToUtmp = set;
-}
-
 void
 Session::setFlowControlEnabled (bool enabled)
 {
   _flowControl = enabled;
 
   if (_shellProcess)
     _shellProcess->setFlowControlEnabled (_flowControl);
   emit flowControlEnabledChanged (enabled);
@@ -1058,22 +923,16 @@ void
 Session::setSize (const QSize & size)
 {
   if ((size.width () <= 1) || (size.height () <= 1))
     return;
 
   emit resizeRequest (size);
 }
 
-int
-Session::processId () const
-{
-  return _shellProcess->pid ();
-}
-
 void
 Session::setTitle (int role, const QString & title)
 {
   switch (role)
     {
     case (0):
       this->setTitle (Session::NameRole, title);
       break;
@@ -1092,44 +951,16 @@ Session::title (int role) const
       return this->title (Session::NameRole);
     case (1):
       return this->title (Session::DisplayedTitleRole);
     default:
       return QString ();
     }
 }
 
-void
-Session::setTabTitleFormat (int context, const QString & format)
-{
-  switch (context)
-    {
-    case (0):
-      this->setTabTitleFormat (Session::LocalTabTitle, format);
-      break;
-    case (1):
-      this->setTabTitleFormat (Session::RemoteTabTitle, format);
-      break;
-    }
-}
-
-QString
-Session::tabTitleFormat (int context) const
-{
-  switch (context)
-    {
-    case (0):
-      return this->tabTitleFormat (Session::LocalTabTitle);
-    case (1):
-      return this->tabTitleFormat (Session::RemoteTabTitle);
-    default:
-      return QString ();
-    }
-}
-
 SessionGroup::SessionGroup (QObject * parent):QObject (parent), _masterMode (0)
 {
 }
 
 SessionGroup::~SessionGroup ()
 {
 }
 
diff --git a/gui/src/terminal/Session.h b/gui/src/terminal/Session.h
--- a/gui/src/terminal/Session.h
+++ b/gui/src/terminal/Session.h
@@ -30,39 +30,34 @@
 #include <QtCore/QSize>
 #include <QUuid>
 #include <QWidget>
 
 // Konsole
 #include "History.h"
 
 class KProcess;
-class KUrl;
 class Emulation;
 class Pty;
 class TerminalDisplay;
-  //class ZModemDialog;
 /**
  * Represents a terminal session consisting of a pseudo-teletype and a terminal emulation.
  * The pseudo-teletype (or PTY) handles I/O between the terminal process and Konsole.
  * The terminal emulation ( Emulation and subclasses ) processes the output stream from the
  * PTY and produces a character image which is then shown on views connected to the session.
  *
  * Each Session can be connected to one or more views by using the addView() method.
  * The attached views can then display output from the program running in the terminal
  * or send input to the program in the terminal in the form of keypresses and mouse
  * activity.
  */
 class Session:public QObject
 {
-Q_OBJECT Q_CLASSINFO ("D-Bus Interface", "org.kde.konsole.Session") public:
-  Q_PROPERTY (QString name READ nameTitle)
-    Q_PROPERTY (int processId READ processId)
-    Q_PROPERTY (QString keyBindings READ keyBindings WRITE setKeyBindings)
-    Q_PROPERTY (QSize size READ size WRITE setSize)
+Q_OBJECT
+public:
   /**
    * Constructs a new session.
    *
    * To start the terminal process, call the run() method,
    * after specifying the program and arguments
    * using setProgram() and setArguments()
    *
    * If no program or arguments are specified explicitly, the Session
@@ -116,54 +111,16 @@ Q_OBJECT Q_CLASSINFO ("D-Bus Interface",
     QList < TerminalDisplay * >views () const;
 
   /**
    * Returns the terminal emulation instance being used to encode / decode
    * characters to / from the process.
    */
   Emulation *emulation () const;
 
-  /** Returns the unique ID for this session. */
-  int sessionId () const;
-
-  /**
-   * This enum describes the contexts for which separate
-   * tab title formats may be specified.
-   */
-  enum TabTitleContext
-  {
-    /** Default tab title format */
-    LocalTabTitle,
-    /**
-     * Tab title format used session currently contains
-     * a connection to a remote computer (via SSH)
-     */
-    RemoteTabTitle
-  };
-
-  /**
-   * Returns true if the session currently contains a connection to a 
-   * remote computer.  It currently supports ssh.
-   */
-  bool isRemote ();
-
-  /**
-   * Sets the format used by this session for tab titles.
-   *
-   * @param context The context whoose format should be set.
-   * @param format The tab title format.  This may be a mixture
-   * of plain text and dynamic elements denoted by a '%' character
-   * followed by a letter.  (eg. %d for directory).  The dynamic
-   * elements available depend on the @p context
-   */
-  void setTabTitleFormat (TabTitleContext context, const QString & format);
-  /** Returns the format used by this session for tab titles. */
-  QString tabTitleFormat (TabTitleContext context) const;
-
-
   /** Returns the arguments passed to the shell process when run() is called. */
   QStringList arguments () const;
   /** Returns the program name of the shell process started when run() is called. */
   QString program () const;
 
   /**
    * Sets the command line arguments which the session's program will be passed when
    * run() is called.
@@ -180,21 +137,16 @@ Q_OBJECT Q_CLASSINFO ("D-Bus Interface",
 
   /**
    * Sets the initial working directory for the session when it is run
    * This has no effect once the session has been started.
    */
   void setInitialWorkingDirectory (const QString & dir);
 
   /**
-   * Returns the current directory of the foreground process in the session
-   */
-  //QString currentWorkingDirectory ();
-
-  /**
    * Sets the type of history store used by this session.
    * Lines of output produced by the terminal are added
    * to the history store.  The type of history store
    * used affects the number of lines which can be
    * remembered before they are lost and the storage
    * (in memory, on-disk etc.) used.
    */
   void setHistoryType (const HistoryType & type);
@@ -237,59 +189,46 @@ Q_OBJECT Q_CLASSINFO ("D-Bus Interface",
    */
   QString userTitle () const;
 
   /** Convenience method used to read the name property.  Returns title(Session::NameRole). */
   QString nameTitle () const
   {
     return title (Session::NameRole);
   }
-  /** Returns a title generated from tab format and process information. */
-  QString getDynamicTitle ();
 
   /** Sets the name of the icon associated with this session. */
   void setIconName (const QString & iconName);
   /** Returns the name of the icon associated with this session. */
   QString iconName () const;
 
-  /** Return URL for the session. */
-  //KUrl getUrl();
 
   /** Sets the text of the icon associated with this session. */
   void setIconText (const QString & iconText);
   /** Returns the text of the icon associated with this session. */
   QString iconText () const;
 
   /** Sets the session's title for the specified @p role to @p title. */
   void setTitle (TitleRole role, const QString & title);
 
   /** Returns the session's title for the specified @p role. */
   QString title (TitleRole role) const;
 
-  /** 
-   * Specifies whether a utmp entry should be created for the pty used by this session.
-   * If true, KPty::login() is called when the session is started.
-   */
-  void setAddToUtmp (bool);
-
   /**
    * Specifies whether to close the session automatically when the terminal
    * process terminates.
    */
   void setAutoClose (bool b)
   {
     _autoClose = b;
   }
 
   /** Returns true if the user has started a program in the session. */
   bool isForegroundProcessActive ();
 
-  /** Returns the name of the current foreground process. */
-  //QString foregroundProcessName ();
-
   /** Returns the terminal session's window size in lines and columns. */
   QSize size ();
   /**
    * Emits a request to resize the session to accommodate
    * the specified window size.
    *
    * @param size The size in lines and columns to request.
    */
@@ -312,20 +251,16 @@ Q_OBJECT Q_CLASSINFO ("D-Bus Interface",
 
   /**
    * Attempts to get the shell program to redraw the current display area.
    * This can be used after clearing the screen, for example, to get the
    * shell to redraw the prompt line.
    */
   void refresh ();
 
-  //  void startZModem(const QString &rz, const QString &dir, const QStringList &list);
-  //  void cancelZModem();
-  //  bool isZModemBusy() { return _zmodemBusy; }
-
  /** 
    * Possible values of the @p what parameter for setUserTitle()
    * See "Operating System Controls" section on http://rtfm.etla.org/xterm/ctlseq.html 
    */
   enum UserTitleChange
   {
     IconNameAndWindowTitle = 0,
     IconName = 1,
@@ -334,169 +269,102 @@ Q_OBJECT Q_CLASSINFO ("D-Bus Interface",
     BackgroundColor = 11,
     SessionName = 30,
     ProfileChange = 50		// this clashes with Xterm's font change command
   };
 
   // Sets the text codec used by this sessions terminal emulation.
   void setCodec (QTextCodec * codec);
 
-  // session management
-  //void saveSession(KConfigGroup& group);
-  //void restoreSession(KConfigGroup& group);
-
   public slots:
   /**
    * Starts the terminal session.
    *
    * This creates the terminal process and connects the teletype to it.
    */
   void run ();
 
   /**
    * Returns the environment of this session as a list of strings like
    * VARIABLE=VALUE
    */
-  Q_SCRIPTABLE QStringList environment () const;
+  QStringList environment () const;
 
   /**
    * Sets the environment for this session.
    * @p environment should be a list of strings like
    * VARIABLE=VALUE
    */
-  Q_SCRIPTABLE void setEnvironment (const QStringList & environment);
+  void setEnvironment (const QStringList & environment);
 
   /**
    * Closes the terminal session.  This sends a hangup signal
    * (SIGHUP) to the terminal process and causes the finished()  
    * signal to be emitted.  If the process does not respond to the SIGHUP signal
    * then the terminal connection (the pty) is closed and Konsole waits for the 
    * process to exit.
    */
-  Q_SCRIPTABLE void close ();
+  void close ();
 
   /**
    * Changes the session title or other customizable aspects of the terminal
    * emulation display. For a list of what may be changed see the
    * Emulation::titleChanged() signal.
    *
    * @param what The feature being changed.  Value is one of UserTitleChange
    * @param caption The text part of the terminal command
    */
   void setUserTitle (int what, const QString & caption);
 
   /**
-   * Enables monitoring for activity in the session.
-   * This will cause notifySessionState() to be emitted
-   * with the NOTIFYACTIVITY state flag when output is
-   * received from the terminal.
-   */
-  Q_SCRIPTABLE void setMonitorActivity (bool);
-
-  /** Returns true if monitoring for activity is enabled. */
-  Q_SCRIPTABLE bool isMonitorActivity () const;
-
-  /**
-   * Enables monitoring for silence in the session.
-   * This will cause notifySessionState() to be emitted
-   * with the NOTIFYSILENCE state flag when output is not
-   * received from the terminal for a certain period of
-   * time, specified with setMonitorSilenceSeconds()
-   */
-  Q_SCRIPTABLE void setMonitorSilence (bool);
-
-  /**
-   * Returns true if monitoring for inactivity (silence)
-   * in the session is enabled.
-   */
-  Q_SCRIPTABLE bool isMonitorSilence () const;
-
-  /** See setMonitorSilence() */
-  Q_SCRIPTABLE void setMonitorSilenceSeconds (int seconds);
-
-  /**
    * Sets whether flow control is enabled for this terminal
    * session.
    */
-  Q_SCRIPTABLE void setFlowControlEnabled (bool enabled);
+  void setFlowControlEnabled (bool enabled);
 
   /** Returns whether flow control is enabled for this terminal session. */
-  Q_SCRIPTABLE bool flowControlEnabled () const;
+  bool flowControlEnabled () const;
 
   /**
    * Sends @p text to the current foreground terminal program.
    */
-  Q_SCRIPTABLE void sendText (const QString & text) const;
+  void sendText (const QString & text) const;
 
    /**
     * Sends a mouse event of type @p eventType emitted by button
     * @p buttons on @p column/@p line to the current foreground
     * terminal program
     */
-  Q_SCRIPTABLE void sendMouseEvent (int buttons, int column, int line,
+  void sendMouseEvent (int buttons, int column, int line,
 				    int eventType);
 
-   /**
-   * Returns the process id of the terminal process.
-   * This is the id used by the system API to refer to the process.
-   */
-  Q_SCRIPTABLE int processId () const;
-
-  /**
-   * Returns the process id of the terminal's foreground process.
-   * This is initially the same as processId() but can change
-   * as the user starts other programs inside the terminal.
-   */
-  //Q_SCRIPTABLE int foregroundProcessId ();
-
   /** Sets the text codec used by this sessions terminal emulation.
     * Overloaded to accept a QByteArray for convenience since DBus
     * does not accept QTextCodec directky.
     */
-  Q_SCRIPTABLE bool setCodec (QByteArray codec);
+  bool setCodec (QByteArray codec);
 
   /** Returns the codec used to decode incoming characters in this
    * terminal emulation
    */
-  Q_SCRIPTABLE QByteArray codec ();
+  QByteArray codec ();
 
   /** Sets the session's title for the specified @p role to @p title.
    *  This is an overloaded member function for setTitle(TitleRole, QString)
    *  provided for convenience since enum data types may not be
    *  exported directly through DBus
    */
-  Q_SCRIPTABLE void setTitle (int role, const QString & title);
+  void setTitle (int role, const QString & title);
 
   /** Returns the session's title for the specified @p role.
    * This is an overloaded member function for  setTitle(TitleRole)
    * provided for convenience since enum data types may not be
    * exported directly through DBus
    */
-  Q_SCRIPTABLE QString title (int role) const;
-
-  /** Returns the "friendly" version of the QUuid of this session.
-  * This is a QUuid with the braces and dashes removed, so it cannot be
-  * used to construct a new QUuid. The same text appears in the
-  * SHELL_SESSION_ID environment variable.
-  */
-  Q_SCRIPTABLE QString shellSessionId () const;
-
-  /** Sets the session's tab title format for the specified @p context to @p format.
-   *  This is an overloaded member function for setTabTitleFormat(TabTitleContext, QString)
-   *  provided for convenience since enum data types may not be
-   *  exported directly through DBus
-   */
-  Q_SCRIPTABLE void setTabTitleFormat (int context, const QString & format);
-
-  /** Returns the session's tab title format for the specified @p context.
-   * This is an overloaded member function for tabTitleFormat(TitleRole)
-   * provided for convenience since enum data types may not be
-   * exported directly through DBus
-   */
-  Q_SCRIPTABLE QString tabTitleFormat (int context) const;
+  QString title (int role) const;
 
 signals:
 
   /** Emitted when the terminal process starts. */
   void started ();
 
   /**
    * Emitted when the terminal process exits.
@@ -514,19 +382,16 @@ signals:
   /**
    * Emitted when the activity state of this session changes.
    *
    * @param state The new state of the session.  This may be one
    * of NOTIFYNORMAL, NOTIFYSILENCE or NOTIFYACTIVITY
    */
   void stateChanged (int state);
 
-  /** Emitted when a bell event occurs in the session. */
-  void bellRequest (const QString & message);
-
   /**
    * Requests that the color the text for any tabs associated with
    * this session should be changed;
    *
    * TODO: Document what the parameter does
    */
   void changeTabTextColorRequest (int);
 
@@ -563,41 +428,34 @@ signals:
 
  /**
   * Emitted when the flow control state changes.
   *
   * @param enabled True if flow control is enabled or false otherwise.
   */
   void flowControlEnabledChanged (bool enabled);
 
-  private slots:void done (int);
-
-  //  void fireZModemDetected();
+private slots:
+  void done (int);
 
   void onReceiveBlock (const char *buffer, int len);
   void monitorTimerDone ();
 
   void onViewSizeChange (int height, int width);
 
   void activityStateSet (int);
 
   //automatically detach views from sessions when view is destroyed
   void viewDestroyed (QObject * view);
 
-  //void zmodemReadStatus();
-  //void zmodemReadAndSendBlock();
-  //void zmodemRcvBlock(const char *data, int len);
-  //void zmodemFinished();
-
   void updateFlowControlState (bool suspended);
   void updateWindowSize (int lines, int columns);
 private:
 
   void updateTerminalSize ();
-  WId windowId () const;
   bool kill (int signal);
   // print a warning message in the terminal.  This is used
   // if the program fails to start, or if the shell exits in 
   // an unsuccessful manner
   void terminalWarning (const QString & message);
   // checks that the binary 'program' is available and can be executed
   // returns the binary name if available or an empty string otherwise
   QString checkProgram (const QString & program) const;
@@ -623,38 +481,30 @@ private:
   QString _displayTitle;
   QString _userTitle;
 
   QString _localTabTitleFormat;
   QString _remoteTabTitleFormat;
 
   QString _iconName;
   QString _iconText;		// as set by: echo -en '\033]1;IconText\007
-  bool _addToUtmp;
   bool _flowControl;
   bool _fullScripting;
 
   QString _program;
   QStringList _arguments;
 
   QStringList _environment;
   int _sessionId;
 
   QString _initialWorkingDir;
   QString _currentWorkingDir;
 
   int _foregroundPid;
 
-  // ZModem
-  //  bool           _zmodemBusy;
-  //  KProcess*      _zmodemProc;
-  //  ZModemDialog*  _zmodemProgress;
-
-  // Color/Font Changes by ESC Sequences
-
   QColor _modifiedBackground;	// as set by: echo -en '\033]11;Color\007
 
   QString _profileKey;
 
   bool _hasDarkBackground;
 
   static int lastSessionId;
 
@@ -728,17 +578,8 @@ private:
 
   // maps sessions to their master status
     QHash < Session *, bool > _sessions;
 
   int _masterMode;
 };
 
 #endif
-
-/*
-  Local Variables:
-  mode: c++
-  c-file-style: "stroustrup"
-  indent-tabs-mode: nil
-  tab-width: 4
-  End:
-*/
diff --git a/gui/src/terminal/TerminalDisplay.cpp b/gui/src/terminal/TerminalDisplay.cpp
--- a/gui/src/terminal/TerminalDisplay.cpp
+++ b/gui/src/terminal/TerminalDisplay.cpp
@@ -2928,48 +2928,17 @@ TerminalDisplay::dragEnterEvent (QDragEn
 {
   if (event->mimeData ()->hasFormat ("text/plain"))
     event->acceptProposedAction ();
 }
 
 void
 TerminalDisplay::dropEvent (QDropEvent * event)
 {
-  //KUrl::List urls = KUrl::List::fromMimeData(event->mimeData());
-
   QString dropText;
-  /*
-     if (!urls.isEmpty()) 
-     {
-     for ( int i = 0 ; i < urls.count() ; i++ ) 
-     {
-     KUrl url = KIO::NetAccess::mostLocalUrl( urls[i] , 0 );
-     QString urlText;
-
-     if (url.isLocalFile())
-     urlText = url.path(); 
-     else
-     urlText = url.url();
-
-     // in future it may be useful to be able to insert file names with drag-and-drop
-     // without quoting them (this only affects paths with spaces in) 
-     urlText = KShell::quoteArg(urlText);
-
-     dropText += urlText;
-
-     if ( i != urls.count()-1 ) 
-     dropText += ' ';
-     }
-     }
-     else 
-     {
-     dropText = event->mimeData()->text();
-     }
-   */
-
   if (event->mimeData ()->hasFormat ("text/plain"))
     {
       emit sendStringToEmu (dropText.toLocal8Bit ());
     }
 }
 
 void
 TerminalDisplay::doDrag ()
