# HG changeset patch
# User jwe
# Date 1200358250 0
#      Tue Jan 15 00:50:50 2008 +0000
# Node ID 4ff9611147ba96cf976bcc63c203dc837f8bf5f8
# Parent  f350da7556003695370f457dfb18798aafe4cfc7
[project @ 2008-01-15 00:50:50 by jwe]

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,19 @@
+2008-01-14  John W. Eaton  <jwe@octave.org>
+
+	* load-path.cc (load_path::do_initialize): Start with sys_path empty.
+	(maybe_add_path_elts): Omit path_sep_str if path is empty.
+
+	* symtab.h (symbol_table::do_pop_context): Remove symbol_records
+	which have no more context.
+	(symbol_table::symbol_record::pop_context,
+	(symbol_table::symbol_record::symbol_record_rep::pop_context):
+	Return size of value_stack, or 1 if variable is persistent or global.
+
 2008-01-14  Kai Habel  <kai.habel@gmx.de>
 
 	* graphics.h.in (class patch::properties): New properties:
 	cdatamapping, facevertexalphadata, facevertexcdata, vertexnormals,
 	normalmode, facelighting, edgealpha, edgelighting,
 	backfacelighting, ambientstrength, diffusestrength,
 	specularstrength, specularexponent, specularcolorreflectance,
 	erasemode.
diff --git a/src/load-path.cc b/src/load-path.cc
--- a/src/load-path.cc
+++ b/src/load-path.cc
@@ -403,23 +403,28 @@ load_path::move (dir_info_list_iterator 
 }
 
 static void
 maybe_add_path_elts (std::string& path, const std::string& dir)
 {
   std::string tpath = genpath (dir);
 
   if (! tpath.empty ())
-    path += dir_path::path_sep_str + tpath;
+    {
+      if (path.empty ())
+	path = tpath;
+      else
+	path += dir_path::path_sep_str + tpath;
+    }
 }
 
 void
 load_path::do_initialize (bool set_initial_path)
 {
-  sys_path = dir_path::path_sep_str;
+  sys_path = "";
 
   if (set_initial_path)
     {
       maybe_add_path_elts (sys_path, Vlocal_ver_oct_file_dir);
       maybe_add_path_elts (sys_path, Vlocal_api_oct_file_dir);
       maybe_add_path_elts (sys_path, Vlocal_oct_file_dir);
       maybe_add_path_elts (sys_path, Vlocal_ver_fcn_file_dir);
       maybe_add_path_elts (sys_path, Vlocal_api_fcn_file_dir);
@@ -433,17 +438,17 @@ load_path::do_initialize (bool set_initi
   if (tpath.empty ())
     tpath = octave_env::getenv ("OCTAVE_LOADPATH");
 
   std::string xpath = ".";
 
   if (! tpath.empty ())
     xpath += dir_path::path_sep_str + tpath;
 
-  if (sys_path != dir_path::path_sep_str)
+  if (! sys_path.empty ())
     xpath += sys_path;
 
   do_set (xpath, false);
 }
 
 void
 load_path::do_clear (void)
 {
diff --git a/src/symtab.h b/src/symtab.h
--- a/src/symtab.h
+++ b/src/symtab.h
@@ -88,17 +88,21 @@ public:
       }
 
       octave_value& varref (void) { return value_stack.top (); }
 
       octave_value varval (void) const { return value_stack.top (); }
 
       void push_context (void) { value_stack.push (octave_value ()); }
 
-      void pop_context (void) { value_stack.pop (); }
+      size_t pop_context (void)
+      {
+	value_stack.pop ();
+	return value_stack.size ();
+      }
 
       void clear (void)
       {
 	if (! (is_hidden () || is_inherited ()))
 	  {
 	    if (is_global ())
 	      unmark_global ();
 
@@ -249,20 +253,33 @@ public:
     }
 
     void push_context (void)
     {
       if (! (is_persistent () || is_global ()))
 	rep->push_context ();
     }
 
-    void pop_context (void)
+    // If pop_context returns 0, we are out of values and this element
+    // of the symbol table should be deleted.  This can happen for
+    // functions like
+    //
+    //   function foo (n)
+    //     if (n > 0)
+    //       foo (n-1);
+    //     else
+    //       eval ("x = 1");
+    //     endif
+    //   endfunction
+    //
+    // Here, X should only exist in the final stack frame.
+
+    size_t pop_context (void)
     {
-      if (! (is_persistent () || is_global ()))
-	rep->pop_context ();
+      return (is_persistent () || is_global ()) ? 1 : rep->pop_context ();
     }
 
     void clear (void) { rep->clear (); }
 
     bool is_defined (void) const { return rep->is_defined (); }
     bool is_variable (void) const { return rep->is_variable (); }
 
     bool is_local (void) const { return rep->is_local (); }
@@ -1613,18 +1630,23 @@ private:
   void do_push_context (void)
   {
     for (table_iterator p = table.begin (); p != table.end (); p++)
       p->second.push_context ();
   }
 
   void do_pop_context (void)
   {
-    for (table_iterator p = table.begin (); p != table.end (); p++)
-      p->second.pop_context ();
+    for (table_iterator p = table.begin (); p != table.end (); )
+      {
+	if (p->second.pop_context () == 0)
+	  table.erase (p++);
+	else
+	  p++;
+      }
   }
 
   void do_clear_variables (void)
   {
     for (table_iterator p = table.begin (); p != table.end (); p++)
       p->second.clear ();
   }
 
