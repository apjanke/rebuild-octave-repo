# HG changeset patch
# User Rik <rik@octave.org>
# Date 1454995797 28800
#      Mon Feb 08 21:29:57 2016 -0800
# Node ID 2e64b5899d1f4be195b1081da6aefbfb84bd4e44
# Parent  f6aab24ed82e5603df6e369ecb151db5d345caeb
maint: invert if/else/error pattern in variables.cc

variables.cc: invert if/else/error pattern.

diff --git a/libinterp/corefcn/variables.cc b/libinterp/corefcn/variables.cc
--- a/libinterp/corefcn/variables.cc
+++ b/libinterp/corefcn/variables.cc
@@ -105,16 +105,17 @@ is_valid_function (const std::string& fc
   if (! fcn_name.empty ())
     {
       octave_value val = symbol_table::find_function (fcn_name);
 
       if (val.is_defined ())
         ans = val.function_value (true);
     }
 
+  // FIXME: Should this be "err" and "error_for", rather than warn?
   if (! ans && warn)
     error ("%s: the symbol '%s' is not valid as a function",
            warn_for.c_str (), fcn_name.c_str ());
 
   return ans;
 }
 
 octave_function *
@@ -127,16 +128,17 @@ is_valid_function (const octave_value& a
 
   if (arg.is_string ())
     {
       fcn_name = arg.string_value ();
 
       ans = is_valid_function (fcn_name, warn_for, warn);
     }
   else if (warn)
+    // FIXME: Should this be "err" and "error_for", rather than warn?
     error ("%s: argument must be a string containing function name", warn_for.c_str ());
 
   return ans;
 }
 
 octave_function *
 extract_function (const octave_value& arg, const std::string& warn_for,
                   const std::string& fname, const std::string& header,
@@ -154,30 +156,28 @@ extract_function (const octave_value& ar
       std::string cmd = header;
       cmd.append (s);
       cmd.append (trailer);
 
       int parse_status;
 
       eval_string (cmd, true, parse_status, 0);
 
-      if (parse_status == 0)
-        {
-          retval = is_valid_function (fname, warn_for, 0);
-
-          if (! retval)
-            error ("%s: '%s' is not valid as a function",
-                   warn_for.c_str (), fname.c_str ());
-
-          warning ("%s: passing function body as a string is obsolete; please use anonymous functions",
-                   warn_for.c_str ());
-        }
-      else
+      if (parse_status != 0)
         error ("%s: '%s' is not valid as a function",
                warn_for.c_str (), fname.c_str ());
+
+      retval = is_valid_function (fname, warn_for, 0);
+
+      if (! retval)
+        error ("%s: '%s' is not valid as a function",
+               warn_for.c_str (), fname.c_str ());
+
+      warning ("%s: passing function body as a string is obsolete; please use anonymous functions",
+               warn_for.c_str ());
     }
 
   return retval;
 }
 
 string_vector
 get_struct_elts (const std::string& text)
 {
@@ -717,23 +717,21 @@ set_top_level_value (const std::string& 
 
 static bool
 wants_local_change (const octave_value_list& args, int& nargin)
 {
   bool retval = false;
 
   if (nargin == 2)
     {
-      if (args(1).is_string () && args(1).string_value () == "local")
-        {
-          nargin = 1;
-          retval = true;
-        }
-      else
+      if (! args(1).is_string () || args(1).string_value () != "local")
         error_with_cfn ("second argument must be \"local\"");
+
+      nargin = 1;
+      retval = true;
     }
 
   return retval;
 }
 
 template <typename T>
 bool try_local_protect (T& var)
 {
@@ -843,20 +841,20 @@ set_internal_variable (int& var, const o
     print_usage ();
 
   if (nargin == 1)
     {
       int ival = args(0).xint_value ("%s: argument must be an integer value", nm);
 
       if (ival < minval)
         error ("%s: arg must be greater than %d", nm, minval);
-      else if (ival > maxval)
+      if (ival > maxval)
         error ("%s: arg must be less than or equal to %d", nm, maxval);
-      else
-        var = ival;
+
+      var = ival;
     }
 
   return retval;
 }
 
 octave_value
 set_internal_variable (double& var, const octave_value_list& args,
                        int nargout, const char *nm,
@@ -879,20 +877,20 @@ set_internal_variable (double& var, cons
     print_usage ();
 
   if (nargin == 1)
     {
       double dval = args(0).xscalar_value ("%s: argument must be a scalar value", nm);
 
       if (dval < minval)
         error ("%s: argument must be greater than %g", minval);
-      else if (dval > maxval)
+      if (dval > maxval)
         error ("%s: argument must be less than or equal to %g", maxval);
-      else
-        var = dval;
+
+      var = dval;
     }
 
   return retval;
 }
 
 octave_value
 set_internal_variable (std::string& var, const octave_value_list& args,
                        int nargout, const char *nm, bool empty_ok)
@@ -912,20 +910,20 @@ set_internal_variable (std::string& var,
 
   if (nargin > 1)
     print_usage ();
 
   if (nargin == 1)
     {
       std::string sval = args(0).xstring_value ("%s: first argument must be a string", nm);
 
-      if (empty_ok || ! sval.empty ())
-        var = sval;
-      else
+      if (! empty_ok && sval.empty ())
         error ("%s: value must not be empty", nm);
+
+      var = sval;
     }
 
   return retval;
 }
 
 octave_value
 set_internal_variable (int& var, const octave_value_list& args,
                        int nargout, const char *nm, const char **choices)
@@ -1460,21 +1458,21 @@ public:
             int balance = 1;
             unsigned int items;
             size_t pos;
             std::string cmd;
 
             // Parse one command from whos_line_format
             cmd = Vwhos_line_format.substr (idx, Vwhos_line_format.length ());
             pos = cmd.find (';');
-            if (pos != std::string::npos)
-              cmd = cmd.substr (0, pos+1);
-            else
+            if (pos == std::string::npos)
               error ("parameter without ; in whos_line_format");
 
+            cmd = cmd.substr (0, pos+1);
+
             idx += cmd.length ();
 
             // FIXME: use iostream functions instead of sscanf!
 
             if (cmd.find_first_of ("crl") != 1)
               items = sscanf (cmd.c_str (), "%c%c:%d:%d:%d;",
                               &garbage, &param.command, &a, &b, &balance);
             else
@@ -1483,30 +1481,27 @@ public:
                               &a, &b, &balance) - 1;
 
             if (items < 2)
               error ("whos_line_format: parameter structure without command in whos_line_format");
 
             // Insert data into parameter
             param.first_parameter_length = 0;
             pos = param_string.find (param.command);
-            if (pos != std::string::npos)
-              {
-                param.parameter_length = param_length(pos);
-                param.text = param_names(pos);
-                param.line.assign (param_names(pos).length (), '=');
-
-                param.parameter_length = (a > param.parameter_length
-                                          ? a : param.parameter_length);
-                if (param.command == 's' && param.modifier == 'c' && b > 0)
-                  param.first_parameter_length = b;
-              }
-            else
-              error ("whos_line_format: '%c' is not a command",
-                     param.command);
+            if (pos == std::string::npos)
+              error ("whos_line_format: '%c' is not a command", param.command);
+
+            param.parameter_length = param_length(pos);
+            param.text = param_names(pos);
+            param.line.assign (param_names(pos).length (), '=');
+
+            param.parameter_length = (a > param.parameter_length
+                                      ? a : param.parameter_length);
+            if (param.command == 's' && param.modifier == 'c' && b > 0)
+              param.first_parameter_length = b;
 
             if (param.command == 's')
               {
                 // Have to calculate space needed for printing
                 // matrix dimensions Space needed for Size column is
                 // hard to determine in prior, because it depends on
                 // dimensions to be shown. That is why it is
                 // recalculated for each Size-command int first,
@@ -1934,20 +1929,20 @@ bind_internal_variable (const std::strin
   feval (fname, args, 0);
 }
 
 void
 mlock (void)
 {
   octave_function *fcn = octave_call_stack::current ();
 
-  if (fcn)
-    fcn->lock ();
-  else
+  if (! fcn)
     error ("mlock: invalid use outside a function");
+
+  fcn->lock ();
 }
 
 void
 munlock (const std::string& nm)
 {
   octave_value val = symbol_table::find_function (nm);
 
   if (val.is_defined ())
