# HG changeset patch
# User Rik <rik@octave.org>
# Date 1477324575 25200
#      Mon Oct 24 08:56:15 2016 -0700
# Branch stable
# Node ID c00578ac8dda410fc201dac7d4921ebca2d3bc52
# Parent  7eb3f8ec1aed86e062e8f7b411367d91afec77ea
Resolve FIXME notes in ode code base.

* ode23.m: Remove FIXME about constant mass matrices comment.

* odeset.m: Add notes to documentation for BDF, MvPattern, and Refine
that they are not yet implemented.

* runge_kutta_45_dorpri.m: Add correct reference for constants used in
calculation.

* runge_kutta_interpolate.m: Remove 4th order method which is never used.

diff --git a/scripts/ode/ode23.m b/scripts/ode/ode23.m
--- a/scripts/ode/ode23.m
+++ b/scripts/ode/ode23.m
@@ -205,18 +205,17 @@ function varargout = ode23 (fun, trange,
   else  # no mass matrix - creating a diag-matrix of ones for mass
     havemasshandle = false; # mass = diag (ones (length (init), 1), 0);
   endif
 
   ## Starting the initialization of the core solver ode23
 
   if (havemasshandle)   # Handle only the dynamic mass matrix,
     if (! strcmp (odeopts.MStateDependence, "none"))
-      ## FIXME: How is this comment supposed to end?
-      ## constant mass matrices have already
+      ## constant mass matrices have already been handled
       mass = @(t,x) odeopts.Mass (t, x, odeopts.funarguments{:});
       fun = @(t,x) mass (t, x, odeopts.funarguments{:}) ...
                    \ fun (t, x, odeopts.funarguments{:});
     else
       mass = @(t) odeopts.Mass (t, odeopts.funarguments{:});
       fun = @(t,x) mass (t, odeopts.funarguments{:}) ...
                    \ fun (t, x, odeopts.funarguments{:});
     endif
diff --git a/scripts/ode/odeset.m b/scripts/ode/odeset.m
--- a/scripts/ode/odeset.m
+++ b/scripts/ode/odeset.m
@@ -55,16 +55,17 @@
 ## by @qcode{odeset}, are the following:
 ##
 ## @table @asis
 ## @item AbsTol
 ## Absolute error tolerance.
 ##
 ## @item BDF
 ## Use BDF formulas in implicit multistep methods.
+## @strong{Note:} This option is not yet implemented.
 ##
 ## @item Events
 ## Event function. An event function must have the form
 ## @code{[value, isterminal, direction] = my_events_f (t, y)}
 ##
 ## @item InitialSlope
 ## Consistent initial slope vector for DAE solvers.
 ##
@@ -98,16 +99,17 @@
 ## Maximum time step value.
 ##
 ## @item MStateDependence
 ## Specify whether the mass matrix depends on the state or only on time.
 ##
 ## @item MvPattern
 ## If the mass matrix is sparse and non-constant but maintains a
 ## constant sparsity pattern, specify the sparsity pattern.
+## @strong{Note:} This option is not yet implemented.
 ##
 ## @item NonNegative
 ## Specify elements of the state vector that are expected to remain
 ## nonnegative during the simulation.
 ##
 ## @item NormControl
 ## Control error relative to the 2-norm of the solution, rather than its
 ## absolute value.
@@ -120,16 +122,17 @@
 ## Indices of elements of the state vector to be passed to the output
 ## monitoring function.
 ##
 ## @item Refine
 ## Specify whether output should be returned only at the end of each
 ## time step or also at intermediate time instances. The value should be
 ## a scalar indicating the number of equally spaced time points to use
 ## within each timestep at which to return output.
+## @strong{Note:} This option is not yet implemented.
 ##
 ## @item RelTol
 ## Relative error tolerance.
 ##
 ## @item Stats
 ## Print solver statistics after simulation.
 ##
 ## @item Vectorized
diff --git a/scripts/ode/private/runge_kutta_45_dorpri.m b/scripts/ode/private/runge_kutta_45_dorpri.m
--- a/scripts/ode/private/runge_kutta_45_dorpri.m
+++ b/scripts/ode/private/runge_kutta_45_dorpri.m
@@ -55,38 +55,36 @@
 ## to use in an FSAL scheme or for dense output.
 ## @end deftypefn
 
 function [t_next, x_next, x_est, k] = runge_kutta_45_dorpri (f, t, x, dt,
                                                              options = [],
                                                              k_vals = [],
                                                              t_next = t + dt)
 
+  ## Reference: Hairer, Ernst; NÃ¸rsett, Syvert Paul; Wanner, Gerhard (2008),
+  ## Solving ordinary differential equations I: Nonstiff problems,
+  ## Berlin, New York: Springer-Verlag, ISBN 978-3-540-56670-0
   persistent a = [0           0          0           0        0          0;
                   1/5         0          0           0        0          0;
                   3/40        9/40       0           0        0          0;
                   44/45      -56/15      32/9        0        0          0;
                   19372/6561 -25360/2187 64448/6561 -212/729  0          0;
                   9017/3168  -355/33     46732/5247  49/176  -5103/18656 0];
   persistent b = [0, 1/5, 3/10, 4/5, 8/9, 1, 1];
   persistent c = [35/384, 0, 500/1113, 125/192, -2187/6784, 11/84];
   persistent c_prime = [5179/57600, 0, 7571/16695, 393/640, ...
                         -92097/339200, 187/2100, 1/40];
-  ## FIXME: Which source is c_prime derived from?
-  ##        Can't the Shampine clause be deleted if it will never be used?
-  ## According to Shampine 1986:
-  ## persistent c_prime = [(1951/21600) 0 (22642/50085) (451/720), ...
-  ##                       (-12231/42400) (649/6300) (1/60)];
 
   s = t + dt * b;
   cc = dt * c;
   aa = dt * a;
   k = zeros (rows (x), 7);
 
-  if (! isempty (options))  # extra arguments for function evaluator
+  if (! isempty (options))   # extra arguments for function evaluator
     args = options.funarguments;
   else
     args = {};
   endif
 
   if (! isempty (k_vals))    # k values from previous step are passed
     k(:,1) = k_vals(:,end);  # FSAL property
   else
diff --git a/scripts/ode/private/runge_kutta_interpolate.m b/scripts/ode/private/runge_kutta_interpolate.m
--- a/scripts/ode/private/runge_kutta_interpolate.m
+++ b/scripts/ode/private/runge_kutta_interpolate.m
@@ -30,25 +30,16 @@ function u_interp = runge_kutta_interpol
       else
         der = feval (func, z(1) , u(:,1), args);
       endif
       u_interp = quadratic_interpolation (z, u, der, t);
 
     case 3
       u_interp = hermite_cubic_interpolation (z, u, k_vals, t);
 
-    ## FIXME: Do we need an algorithm for order = 4?
-    #{
-    case 4
-      ## if ode45 is used without local extrapolation this function
-      ## doesn't require a new function evaluation.
-      u_interp = dorpri_interpolation ([z(i-1) z(i)],
-                                       [u(:,i-1) u(:,i)],
-                                       k_vals, tspan(counter));
-    #}
     case 5
       ## ode45 with Dormand-Prince scheme:
       u_interp = hermite_quartic_interpolation (z, u, k_vals, t);
 
     otherwise
       warning (["High order interpolation not yet implemented: ", ...
                 "using cubic interpolation instead"]);
       der(:,1) = feval (func, z(1), u(:,1), args);
