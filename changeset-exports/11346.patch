# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1292187510 -3600
#      Sun Dec 12 21:58:30 2010 +0100
# Node ID 30f54b3b99532cfc9503d4fdfa33d0d7c632df72
# Parent  488f07b65b1dbef04e2fd711a4f23af09c15aae2
drop support of 'i' option in lookup

diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,8 +1,15 @@
+2010-12-12  Jaroslav Hajek  <highegg@gmail.com>
+
+	* optimization/optimget.m: Use explicit toupper conversion rather than
+	lookup(..., "i").
+	* optimization/optimset.m: Ditto.
+	* miscellaneous/parseparams.m: Ditto.
+
 2010-12-12  Kai Habel  <kai.habel@gmx.de>
 
 	* plot/view.m: Fix bugs with respect to number if inputs and argument
 	handling.
 
 2010-12-12  Kai Habel  <kai.habel@gmx.de>
 
 	* plot/view.m: Make view more compatible. Allow cartesian
diff --git a/scripts/miscellaneous/parseparams.m b/scripts/miscellaneous/parseparams.m
--- a/scripts/miscellaneous/parseparams.m
+++ b/scripts/miscellaneous/parseparams.m
@@ -83,17 +83,17 @@ function [reg, varargout] = parseparams 
     varargout = defaults;
     if (i)
       ## Let's parse the properties.
       pnames = prop(1:2:end);
       values = prop(2:2:end);
       if (! size_equal (pnames, values) || ! all (strs(i:2:end)))
         error_as_caller ("options must be given as name-value pairs");
       endif
-      idx = lookup (names, pnames, "mi");
+      idx = lookup (toupper(names), toupper(pnames), "mi);
       if (! all (idx))
         error_as_caller ("unrecognized option: %s", pnames{find (idx == 0, 1)});
       else
         varargout(sidx(idx)) = values;
       endif
     endif
   endif
 
diff --git a/scripts/optimization/optimget.m b/scripts/optimization/optimget.m
--- a/scripts/optimization/optimget.m
+++ b/scripts/optimization/optimget.m
@@ -28,17 +28,17 @@
 
 function retval = optimget (options, parname, default)
 
   if (nargin < 2 || nargin > 4 || ! isstruct (options) || ! ischar (parname))
     print_usage ();
   endif
 
   opts = __all_opts__ ();
-  idx = lookup (opts, parname, "im");
+  idx = lookup (toupper(opts), toupper(parname), "m");
 
   if (idx)
     parname = opts{idx};
   else
     warning ("unrecognized option: %s", parname);
   endif
   if (isfield (options, parname))
     retval = options.(parname);
diff --git a/scripts/optimization/optimset.m b/scripts/optimization/optimset.m
--- a/scripts/optimization/optimset.m
+++ b/scripts/optimization/optimset.m
@@ -54,20 +54,21 @@ function retval = optimset (varargin)
   elseif (nargs == 2 && isstruct (varargin{1}) && isstruct (varargin{2}))
     ## Set slots in old from nonempties in new.  Should we be checking
     ## to ensure that the field names are expected?
     old = varargin{1};
     new = varargin{2};
     fnames = fieldnames (old);
     ## skip validation if we're in the internal query
     validation = ! isempty (opts);
+    uopts = toupper(opts);
     for [val, key] = new
       if (validation)
         ## Case insensitive lookup in all options.
-        i = lookup (opts, key, "i");
+        i = lookup (uopts, toupper(key), "i");
         ## Validate option.
         if (i > 0 && strcmpi (opts{i}, key))
           ## Use correct case.
           key = opts{i};
         else
           warning ("unrecognized option: %s", key);
         endif
       endif
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,12 @@
+2010-12-12  Jaroslav Hajek  <highegg@gmail.com>
+
+	* DLD-FUNCTIONS/lookup.cc (Flookup): Drop support for the "i" option.
+
 2010-12-09  Marco Atzeri   <marco_atzeri@yahoo.it>
 
 	* mappers.cc: In test for gamma, expect Inf for gamma(-1), not NaN.
 
 2010-12-08  John W. Eaton  <jwe@octave.org>
 
 	* graphics.h.in (base_property::do_set): Don't reverse order of
 	children.  Bug #31822.
diff --git a/src/DLD-FUNCTIONS/lookup.cc b/src/DLD-FUNCTIONS/lookup.cc
--- a/src/DLD-FUNCTIONS/lookup.cc
+++ b/src/DLD-FUNCTIONS/lookup.cc
@@ -227,19 +227,16 @@ occurs in table; otherwise, @code{idx(i)
 For numeric lookups\n\
 the leftmost subinterval shall be extended to infinity (i.e., all indices\n\
 at least 1)\n\
 \n\
 @item r\n\
 For numeric lookups\n\
 the rightmost subinterval shall be extended to infinity (i.e., all indices\n\
 at most n-1).\n\
-\n\
-@item i\n\
-For string lookups, use case-insensitive comparison.\n\
 @end table\n\
 @end deftypefn") 
 {
   octave_value retval;
 
   int nargin = args.length ();
 
   if (nargin < 2 || nargin > 3 || (nargin == 3 && ! args(2).is_string ()))
@@ -254,36 +251,32 @@ For string lookups, use case-insensitive
 
   bool num_case = ((table.is_numeric_type () && y.is_numeric_type ())
                    || (table.is_char_matrix () && y.is_char_matrix ()));
   bool str_case = table.is_cellstr () && (y.is_string () || y.is_cellstr ());
   bool left_inf = false;
   bool right_inf = false;
   bool match_idx = false;
   bool match_bool = false;
-  bool icase = false;
 
   if (nargin == 3)
     {
       std::string opt = args(2).string_value ();
       left_inf = contains_char (opt, 'l');
       right_inf = contains_char (opt, 'r');
-      icase = contains_char (opt, 'i');
       match_idx = contains_char (opt, 'm');
       match_bool = contains_char (opt, 'b');
     }
 
   if ((match_idx || match_bool) && (left_inf || right_inf))
     error ("lookup: m, b cannot be specified with l or r");
   else if (match_idx && match_bool)
     error ("lookup: only one of m, b can be specified");
   else if (str_case && (left_inf || right_inf))
     error ("lookup: l,r not recognized for string lookups");
-  else if (num_case && icase)
-    error ("lookup: i not recognized for numeric lookups");
 
   if (error_state)
     return retval;
 
   if (num_case) 
     {
 
       // In the case of a complex array, absolute values will be used for compatibility
@@ -320,23 +313,16 @@ For string lookups, use case-insensitive
         retval = do_numeric_lookup (table.array_value (),
                                     y.array_value (),
                                     left_inf, right_inf,
                                     match_idx, match_bool);
 
     }
   else if (str_case)
     {
-      // FIXME: this should be handled directly.
-      if (icase)
-        {
-          table = table.xtoupper ();
-          y = y.xtoupper ();
-        }
-
       Array<std::string> str_table = table.cellstr_value ();
       Array<std::string> str_y (1, 1);
 
       if (y.is_cellstr ())
         str_y = y.cellstr_value ();
       else
         str_y(0) = y.string_value ();
 
