# HG changeset patch
# User CarnÃ« Draug <carandraug@octave.org>
# Date 1446574862 0
#      Tue Nov 03 18:21:02 2015 +0000
# Node ID ae83fda9929f4c0a23a4f4bdfae6cda801c7c9be
# Parent  3d8aee0b74158db18b235d2ad70c6b11371580c2
ntsc2rgb: remove unreasonable support for integer input (patch #8709)

* scripts/image/ntsc2rgb.m: cset 131ce8cfaa80 added support for images
  of class other than double.  However, while this is common for RGB
  images, it not for YIQ.  In addition, the range of values in a YIQ
  image is a bit more complex.  See source comments for details or
  discussion on the patch.

diff --git a/scripts/image/ntsc2rgb.m b/scripts/image/ntsc2rgb.m
--- a/scripts/image/ntsc2rgb.m
+++ b/scripts/image/ntsc2rgb.m
@@ -40,16 +40,31 @@
 ## Adapted-By: jwe
 
 function rgb = ntsc2rgb (yiq)
 
   if (nargin != 1)
     print_usage ();
   endif
 
+  ## Unlike other colorspace conversion functions, we do not accept
+  ## integers as valid input.  We check this before
+  ## colorspace_conversion_input_check() which is general and would
+  ## convert integers to double assuming a [0 1] interval range.
+  ## The reason for not supporting integers here is that there's no
+  ## common such conversion.  If we were to support a conversion
+  ## the most reasonable definition would be to convert the YIQ
+  ## from their integer range into the ranges:
+  ##    Y = [ 0      1.106]
+  ##    I = [-0.797  0.587]
+  ##    Q = [-0.322  0.426]
+  ## See https://savannah.gnu.org/patch/?8709#comment11
+  if (! isfloat (yiq))
+    error ("ntsc2rgb: YIQ must be of floating point class");
+  endif
   [yiq, cls, sz, is_im, is_nd] ...
     = colorspace_conversion_input_check ("ntsc2rgb", "YIQ", yiq);
 
   ## Conversion matrix constructed from 'inv (rgb2ntsc matrix)'.
   ## See programming notes in rgb2ntsc.m.  Note: Matlab matrix for inverse
   ## is slightly different.  We prefer this matrix so that
   ## x == ntsc2rgb (rgb2ntsc (x)) rather than maintaining strict compatibility
   ## with Matlab.
@@ -117,18 +132,21 @@ endfunction
 %! rgb(1,2) = 0;
 %! rgb(1,3) = 1;
 %! rgb(2,:) /= rgb(2,3);
 %! assert (ntsc2rgb (ntsc), rgb)
 
 ## Test input validation
 %!error ntsc2rgb ()
 %!error ntsc2rgb (1,2)
-%!error <YIQ must be a colormap or YIQ image> ntsc2rgb (uint8 (1))
+%!error <YIQ must be of floating point class> ntsc2rgb (uint8 (1))
 %!error <YIQ must be a colormap or YIQ image> ntsc2rgb (ones (2,2))
+%!error <YIQ must be of floating point class> ntsc2rgb (ones ([10 10 3], "uint8"))
+%!error <YIQ must be of floating point class> ntsc2rgb (ones ([10 10 3], "uint16"))
+%!error <YIQ must be of floating point class> ntsc2rgb (ones ([10 10 3], "int16"))
 
 ## Test ND input
 %!test
 %! yiq = rand (16, 16, 3, 5);
 %! rgb = zeros (size (yiq));
 %! for i = 1:5
 %!   rgb(:,:,:,i) = ntsc2rgb (yiq(:,:,:,i));
 %! endfor
@@ -155,29 +173,14 @@ endfunction
 
 %!test
 %! ntsc = (rand (10, 10, 3, "single") * 3 ) - 0.5; # values outside range [0 1]
 %! rgb = ntsc2rgb (ntsc);
 %! assert (class (rgb), "single")
 %! assert (size (rgb), [10 10 3])
 
 %!test
-%! rgb = ntsc2rgb (randi ([0 255], 10, 10, 3, "uint8"));
-%! assert (class (rgb), "double")
-%! assert (size (rgb), [10 10 3])
-
-%!test
-%! rgb = ntsc2rgb (randi ([0 65535], 10, 10, 3, "uint16"));
-%! assert (class (rgb), "double")
-%! assert (size (rgb), [10 10 3])
-
-%!test
-%! rgb = ntsc2rgb (randi ([-128 127], 10, 10, 3, "uint16"));
-%! assert (class (rgb), "double")
-%! assert (size (rgb), [10 10 3])
-
-%!test
 %! ntsc_double = reshape ([.299 .587 .114 0 .596 -.274 -.322 0 .211 -.523 .312 0],
 %!                        [2 2 3]);
 %! expected = reshape ([1 0 0 0 0 1 0 0 0 0 1 0], [2 2 3]);
 %!
 %! assert (ntsc2rgb (ntsc_double), expected, 1e-5)
 %! assert (ntsc2rgb (single (ntsc_double)), single (expected), 1e-5)
