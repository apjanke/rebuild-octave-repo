# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1363040350 14400
#      Mon Mar 11 18:19:10 2013 -0400
# Node ID 3389152014cade1b88f8ac8cec5e2660d2477b26
# Parent  09881dab3aaf02716c0a0ff320ff2e884862187e
improve validation of left hand side of assignment expressions in parser

* pt-arg-list.cc (tree_argument_list::is_valid_lvalue_list):
* oct-parse.in.yy (octave_parser::validate_for_assignment):
Improve checks.

diff --git a/libinterp/parse-tree/oct-parse.in.yy b/libinterp/parse-tree/oct-parse.in.yy
--- a/libinterp/parse-tree/oct-parse.in.yy
+++ b/libinterp/parse-tree/oct-parse.in.yy
@@ -2942,39 +2942,56 @@ octave_parser::validate_array_list (tree
 
 tree_argument_list *
 octave_parser::validate_matrix_for_assignment (tree_expression *e)
 {
   tree_argument_list *retval = 0;
 
   if (e->is_constant ())
     {
-      bison_error ("invalid empty LHS in [] = ... assignment");
+      octave_value ov = e->rvalue1 ();
+
+      if (ov.is_empty ())
+        bison_error ("invalid empty left hand side of assignment");
+      else
+        bison_error ("invalid constant left hand side of assignment");
+
       delete e;
     }
-  else if (e->is_matrix ())
-    {
-      tree_matrix *mat = dynamic_cast<tree_matrix *> (e);
-
-      if (mat && mat->size () == 1)
-        {
-          retval = mat->front ();
-          mat->pop_front ();
-          delete e;
-        }
-      else
-        {
-          bison_error ("invalid LHS in '[LHS] = ...' assignment");
-          delete e;
-        }
-    }
   else
     {
-      retval = new tree_argument_list (e);
-      retval->mark_as_simple_assign_lhs ();
+      bool is_simple_assign = true;
+
+      tree_argument_list *tmp = 0;
+
+      if (e->is_matrix ())
+        {
+          tree_matrix *mat = dynamic_cast<tree_matrix *> (e);
+
+          if (mat && mat->size () == 1)
+            {
+              tmp = mat->front ();
+              mat->pop_front ();
+              delete e;
+              is_simple_assign = false;
+            }
+        }
+      else
+        tmp = new tree_argument_list (e);
+
+      if (tmp && tmp->is_valid_lvalue_list ())
+        retval = tmp;
+      else
+        {
+          bison_error ("invalid left hand side of assignment");
+          delete tmp;
+        }
+
+      if (retval && is_simple_assign)
+        retval->mark_as_simple_assign_lhs ();
     }
 
   return retval;
 }
 
 // Finish building an array_list.
 
 tree_expression *
diff --git a/libinterp/parse-tree/pt-arg-list.cc b/libinterp/parse-tree/pt-arg-list.cc
--- a/libinterp/parse-tree/pt-arg-list.cc
+++ b/libinterp/parse-tree/pt-arg-list.cc
@@ -94,16 +94,39 @@ tree_argument_list::all_elements_are_con
 
       if (! elt->is_constant ())
         return false;
     }
 
   return true;
 }
 
+bool
+tree_argument_list::is_valid_lvalue_list (void) const
+{
+  bool retval = true;
+
+  for (const_iterator p = begin (); p != end (); p++)
+    {
+      tree_expression *elt = *p;
+
+      // There is no need for a separate check for the magic "~" because
+      // it represented by tree_black_hole, and that is derived from
+      // tree_identifier.
+
+      if (! (elt->is_identifier () || elt->is_index_expression ()))
+        {
+          retval = false;
+          break;
+        }
+    }
+
+  return retval;
+}
+
 static const octave_value *indexed_object = 0;
 static int index_position = 0;
 static int num_indices = 0;
 
 DEFCONSTFUN (__end__, , ,
   "internal function")
 {
   octave_value retval;
diff --git a/libinterp/parse-tree/pt-arg-list.h b/libinterp/parse-tree/pt-arg-list.h
--- a/libinterp/parse-tree/pt-arg-list.h
+++ b/libinterp/parse-tree/pt-arg-list.h
@@ -72,16 +72,18 @@ public:
   void append (const element_type& s);
 
   void mark_as_simple_assign_lhs (void) { simple_assign_lhs = true; }
 
   bool is_simple_assign_lhs (void) { return simple_assign_lhs; }
 
   bool all_elements_are_constant (void) const;
 
+  bool is_valid_lvalue_list (void) const;
+
   octave_value_list convert_to_const_vector (const octave_value *object = 0);
 
   std::list<octave_lvalue> lvalue_list (void);
 
   string_vector get_arg_names (void) const;
 
   tree_argument_list *dup (symbol_table::scope_id scope,
                            symbol_table::context_id context) const;
