# HG changeset patch
# User jwe
# Date 797622567 0
#      Tue Apr 11 17:49:27 1995 +0000
# Node ID fa24599e3d2c6935cb67372bd84b82a0ceedba41
# Parent  ecf3dc595ecb079e2b63de44c37d3126e5ded4a4
[project @ 1995-04-11 17:49:27 by jwe]

diff --git a/liboctave/acosh.c b/liboctave/acosh.c
--- a/liboctave/acosh.c
+++ b/liboctave/acosh.c
@@ -23,22 +23,22 @@ Software Foundation, 675 Mass Ave, Cambr
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
 #ifndef HAVE_ACOSH
 
 #include "f77-uscore.h"
 
-extern double F77_FCN (dacosh) (const double&);
+extern double F77_FCN (dacosh, DACOSH) (const double&);
 
 double
 acosh (double x)
 {
-  return F77_FCN (dacosh) (x);
+  return F77_FCN (dacosh, DACOSH) (x);
 }
 
 #endif
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C ***
 ;;; page-delimiter: "^/\\*" ***
diff --git a/liboctave/asinh.c b/liboctave/asinh.c
--- a/liboctave/asinh.c
+++ b/liboctave/asinh.c
@@ -23,22 +23,22 @@ Software Foundation, 675 Mass Ave, Cambr
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
 #ifndef HAVE_ASINH
 
 #include "f77-uscore.h"
 
-extern double F77_FCN (dasinh) (const double&);
+extern double F77_FCN (dasinh, DASINH) (const double&);
 
 double
 asinh (double x)
 {
-  return F77_FCN (dasinh) (x);
+  return F77_FCN (dasinh, DASINH) (x);
 }
 
 #endif
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C ***
 ;;; page-delimiter: "^/\\*" ***
diff --git a/liboctave/atanh.c b/liboctave/atanh.c
--- a/liboctave/atanh.c
+++ b/liboctave/atanh.c
@@ -23,22 +23,22 @@ Software Foundation, 675 Mass Ave, Cambr
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
 #ifndef HAVE_ATANH
 
 #include "f77-uscore.h"
 
-extern double F77_FCN (datanh) (const double&);
+extern double F77_FCN (datanh, DATANH) (const double&);
 
 double
 atanh (double x)
 {
-  return F77_FCN (datanh) (x);
+  return F77_FCN (datanh, DATANH) (x);
 }
 
 #endif
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C ***
 ;;; page-delimiter: "^/\\*" ***
diff --git a/liboctave/erf.c b/liboctave/erf.c
--- a/liboctave/erf.c
+++ b/liboctave/erf.c
@@ -23,22 +23,22 @@ Software Foundation, 675 Mass Ave, Cambr
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
 #ifndef HAVE_ERF
 
 #include "f77-uscore.h"
 
-extern double F77_FCN (derf) (const double&);
+extern double F77_FCN (derf, DERF) (const double&);
 
 double
 erf (double x)
 {
-  return F77_FCN (derf) (x);
+  return F77_FCN (derf, DERF) (x);
 }
 
 #endif
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C ***
 ;;; page-delimiter: "^/\\*" ***
diff --git a/liboctave/erfc.c b/liboctave/erfc.c
--- a/liboctave/erfc.c
+++ b/liboctave/erfc.c
@@ -23,22 +23,22 @@ Software Foundation, 675 Mass Ave, Cambr
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
 #ifndef HAVE_ERFC
 
 #include "f77-uscore.h"
 
-extern double F77_FCN (derfc) (const double&);
+extern double F77_FCN (derfc, DERFC) (const double&);
 
 double
 erfc (double x)
 {
-  return F77_FCN (derfc) (x);
+  return F77_FCN (derfc, DERFC) (x);
 }
 
 #endif
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C ***
 ;;; page-delimiter: "^/\\*" ***
diff --git a/liboctave/gamma.c b/liboctave/gamma.c
--- a/liboctave/gamma.c
+++ b/liboctave/gamma.c
@@ -23,22 +23,22 @@ Software Foundation, 675 Mass Ave, Cambr
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
 #ifndef HAVE_GAMMA
 
 #include "f77-uscore.h"
 
-extern double F77_FCN (dgamma) (const double&);
+extern double F77_FCN (dgamma, DGAMMA) (const double&);
 
 double
 gamma (double x)
 {
-  return F77_FCN (dgamma) (x);
+  return F77_FCN (dgamma, DGAMMA) (x);
 }
 
 #endif
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C ***
 ;;; page-delimiter: "^/\\*" ***
diff --git a/liboctave/lgamma.c b/liboctave/lgamma.c
--- a/liboctave/lgamma.c
+++ b/liboctave/lgamma.c
@@ -28,25 +28,25 @@ Software Foundation, 675 Mass Ave, Cambr
 
 #include "f77-uscore.h"
 
 /* If the system doesn't have lgamma, assume that it doesn't have
    signgam either */
 
 int signgam;
 
-extern int F77_FCN (dlgams) (const double&, double&, double&);
+extern int F77_FCN (dlgams, DLGAMS) (const double&, double&, double&);
 
 double
 lgamma (double x)
 {
   double result;
   double sgngam;
 
-  F77_FCN (dlgams) (x, result, sgngam);
+  F77_FCN (dlgams, DLGAMS) (x, result, sgngam);
 
   signgam = (int) sgngam;
 
   return result;
 }
 
 #endif
 
diff --git a/src/expm.cc b/src/expm.cc
--- a/src/expm.cc
+++ b/src/expm.cc
@@ -41,21 +41,23 @@ Software Foundation, 675 Mass Ave, Cambr
 #include "gripes.h"
 #include "error.h"
 #include "utils.h"
 #include "help.h"
 #include "defun-dld.h"
 
 extern "C"
 {
-  double F77_FCN (dlange) (const char*, const int&, const int&,
-			   const double*, const int&, double*);
+  double F77_FCN (dlange, DLANGE) (const char*, const int&,
+				   const int&, const double*,
+				   const int&, double*); 
 
-  double F77_FCN (zlange) (const char*, const int&, const int&,
-			   const Complex*, const int&, double*);
+  double F77_FCN (zlange, ZLANGE) (const char*, const int&,
+				   const int&, const Complex*,
+				   const int&, double*); 
 }
 
 DEFUN_DLD_BUILTIN ("expm", Fexpm, Sexpm, 2, 1,
   "expm (X): matrix exponential, e^A")
 {
   Octave_object retval;
 
   int nargin = args.length ();
@@ -130,18 +132,19 @@ DEFUN_DLD_BUILTIN ("expm", Fexpm, Sexpm,
 
       AEPBALANCE mbal (m, balance_job);
       m = mbal.balanced_matrix ();
       Matrix d = mbal.balancing_matrix ();
 
 // Preconditioning step 3: scaling.
 
       ColumnVector work(nc);
-      inf_norm = F77_FCN (dlange) ("I", nc, nc, m.fortran_vec (), nc,
-				   work.fortran_vec ());
+      inf_norm = F77_FCN (dlange, DLANGE) ("I", nc, nc,
+					   m.fortran_vec (), nc,
+					   work.fortran_vec ());
 
       sqpow = (int) (1.0 + log (inf_norm) / log (2.0));
 
 // Check whether we need to square at all.
 
       if (sqpow < 0)
 	sqpow = 0;
       else
@@ -222,18 +225,19 @@ DEFUN_DLD_BUILTIN ("expm", Fexpm, Sexpm,
 
       ComplexAEPBALANCE mbal (m, balance_job);
       m = mbal.balanced_matrix ();
       ComplexMatrix d = mbal.balancing_matrix ();
 
 // Preconditioning step 3: scaling.
 
       ColumnVector work (nc);
-      inf_norm = F77_FCN (zlange) ("I", nc, nc, m.fortran_vec (), nc,
-				   work.fortran_vec ());
+      inf_norm = F77_FCN (zlange, ZLANGE) ("I", nc, nc,
+					   m.fortran_vec (), nc,
+					   work.fortran_vec ());
 
       sqpow = (int) (1.0 + log (inf_norm) / log (2.0));
 
 // Check whether we need to square at all.
 
       if (sqpow < 0)
 	sqpow = 0;
       else
diff --git a/src/givens.cc b/src/givens.cc
--- a/src/givens.cc
+++ b/src/givens.cc
@@ -35,21 +35,21 @@ Software Foundation, 675 Mass Ave, Cambr
 #include "user-prefs.h"
 #include "error.h"
 #include "gripes.h"
 #include "help.h"
 #include "defun-dld.h"
 
 extern "C"
 {
-  int F77_FCN (dlartg) (const double&, const double&, double&, double&,
-			double&);
+  int F77_FCN (dlartg, DLARTG) (const double&, const double&, double&,
+				double&, double&);
 
-  int F77_FCN (zlartg) (const Complex&, const Complex&, double&,
-			Complex&, Complex&);
+  int F77_FCN (zlartg, ZLARTG) (const Complex&, const Complex&,
+				double&, Complex&, Complex&);
 }
 
 DEFUN_DLD_BUILTIN ("givens", Fgivens, Sgivens, 3, 2,
   "G = givens (X, Y)\n\
 \n\
 compute orthogonal matrix G = [c s; -conj (s) c]\n\
 such that G [x; y] = [*; 0]  (x, y scalars)\n\
 \n\
@@ -113,17 +113,17 @@ such that G [x; y] = [*; 0]  (x, y scala
 
 // Now compute the rotation.
 
   double cc;
   if (arg_a.is_complex_type () || arg_b.is_complex_type ())
     {
       Complex cs, temp_r;
  
-      F77_FCN (zlartg) (cx, cy, cc, cs, temp_r);
+      F77_FCN (zlartg, ZLARTG) (cx, cy, cc, cs, temp_r);
 
       switch (nargout)
 	{
 	case 0:		// output a matrix
 	case 1:
 	  {
 	    ComplexMatrix g (2, 2);
 	    g.elem (0, 0) = cc;
@@ -144,17 +144,17 @@ such that G [x; y] = [*; 0]  (x, y scala
 	  error ("givens: invalid number of output arguments");
 	  break;
 	}
     }
   else
     {
       double s, temp_r;
 
-      F77_FCN (dlartg) (x, y, cc, s, temp_r);
+      F77_FCN (dlartg, DLARTG) (x, y, cc, s, temp_r);
 
       switch (nargout)
 	{
 	case 0:		// output a matrix
 	case 1:
 	  {
 	    Matrix g (2, 2);
 	    g.elem (0, 0) = cc;
diff --git a/src/mappers.cc b/src/mappers.cc
--- a/src/mappers.cc
+++ b/src/mappers.cc
@@ -39,18 +39,18 @@ Software Foundation, 675 Mass Ave, Cambr
 
 #if defined (_AIX) && defined (__GNUG__)
 #undef finite
 #define finite(x) ((x) < DBL_MAX && (x) > -DBL_MAX)
 #endif
 
 extern "C"
 {
-  double F77_FCN (dgamma) (const double&);
-  int F77_FCN (dlgams) (const double&, double&, double&);
+  double F77_FCN (dgamma, DGAMMA) (const double&);
+  int F77_FCN (dlgams, DLGAMS) (const double&, double&, double&);
 }
 
 #ifndef M_LOG10E
 #define M_LOG10E 0.43429448190325182765
 #endif
 
 #ifndef M_PI
 #define M_PI 3.14159265358979323846
@@ -154,17 +154,17 @@ xfinite (double x)
 #else
   return (double) (x > -DBL_MAX && x < DBL_MAX);
 #endif
 }
 
 double
 xgamma (double x)
 {
-  return F77_FCN (dgamma) (x);
+  return F77_FCN (dgamma, DGAMMA) (x);
 }
 
 double
 xisinf (double x)
 {
 #if defined (HAVE_ISINF)
   return (double) isinf (x);
 #elif defined (HAVE_FINITE) && defined (HAVE_ISNAN)
@@ -175,17 +175,17 @@ xisinf (double x)
 }
 
 double
 xlgamma (double x)
 {
   double result;
   double sgngam;
 
-  F77_FCN (dlgams) (x, result, sgngam);
+  F77_FCN (dlgams, DLGAMS) (x, result, sgngam);
 
   return result;
 }
 
 // Complex -> double mappers.
 
 double
 xisnan (const Complex& x)
diff --git a/src/qzval.cc b/src/qzval.cc
--- a/src/qzval.cc
+++ b/src/qzval.cc
@@ -39,24 +39,26 @@ Software Foundation, 675 Mass Ave, Cambr
 #include "gripes.h"
 #include "error.h"
 #include "utils.h"
 #include "help.h"
 #include "defun-dld.h"
 
 extern "C"
 {
-  int F77_FCN (qzhes) (const int&, const int&, double*, double*,
-		       const long&, double*);
+  int F77_FCN (qzhes, QZHES) (const int&, const int&, double*,
+			      double*, const long&, double*);
  
-  int F77_FCN (qzit) (const int&, const int&, double*, double*,
-		      const double&, const long&, double*, int&);
+  int F77_FCN (qzit, QZIT) (const int&, const int&, double*, double*,
+			    const double&, const long&, double*,
+			    int&);
  
-  int F77_FCN (qzval) (const int&, const int&, double*, double*,
-		       double*, double*, double*, const long&, double*);
+  int F77_FCN (qzval, QZVAL) (const int&, const int&, double*,
+			      double*, double*, double*, double*,
+			      const long&, double*);
 }
 
 DEFUN_DLD_BUILTIN ("qzval", Fqzval, Sqzval, 3, 1,
   "X = qzval (A, B)\n\
 \n\
 compute generalized eigenvalues of the matrix pencil (A - lambda B).\n\
 A and B must be real matrices.")
 {
@@ -130,30 +132,31 @@ A and B must be real matrices.")
 
   Matrix cb = arg_b.matrix_value ();
 
   if (error_state)
     return retval;
 
 // Use EISPACK qz functions.
 
-  F77_FCN (qzhes) (a_nr, a_nr, ca.fortran_vec (),
-		   cb.fortran_vec (), matz, jnk.fortran_vec ());
+  F77_FCN (qzhes, QZHES) (a_nr, a_nr, ca.fortran_vec (),
+			  cb.fortran_vec (), matz,
+			  jnk.fortran_vec ()); 
 
-  F77_FCN (qzit) (a_nr, a_nr, ca.fortran_vec (),
-		  cb.fortran_vec (), eps, matz,
-		  jnk.fortran_vec (), info);  
+  F77_FCN (qzit, QZIT) (a_nr, a_nr, ca.fortran_vec (),
+			cb.fortran_vec (), eps, matz,
+			jnk.fortran_vec (), info);
 
   if (info)
     error ("qzval: trouble in qzit, info = %d", info);
 
-  F77_FCN (qzval) (a_nr, a_nr, ca.fortran_vec (),
-		   cb.fortran_vec (), alfr.fortran_vec (),
-		   alfi.fortran_vec (), beta.fortran_vec (),
-		   matz, jnk.fortran_vec ());
+  F77_FCN (qzval, QZVAL) (a_nr, a_nr, ca.fortran_vec (),
+			  cb.fortran_vec (), alfr.fortran_vec (),
+			  alfi.fortran_vec (), beta.fortran_vec (),
+			  matz, jnk.fortran_vec ());
 
 // Count and extract finite generalized eigenvalues.
 
   int i;
   int cnt = 0;
 
   Complex Im (0, 1);
 
diff --git a/src/rand.cc b/src/rand.cc
--- a/src/rand.cc
+++ b/src/rand.cc
@@ -38,28 +38,33 @@ Software Foundation, 675 Mass Ave, Cambr
 // Possible distributions of random numbers.
 enum rand_dist { uniform, normal };
 
 // Current distribution of random numbers.
 static rand_dist current_distribution = uniform;
 
 extern "C"
 {
-  int *F77_FCN (dgennor) (const double&, const double&, double&);
-  int *F77_FCN (dgenunf) (const double&, const double&, double&);
-  int *F77_FCN (setall) (const int&, const int&);
-  int *F77_FCN (getsd) (int&, int&);
+  int *F77_FCN (dgennor, DGENNOR) (const double&, const double&,
+				   double&);
+
+  int *F77_FCN (dgenunf, DGENUNF) (const double&, const double&,
+				   double&);
+
+  int *F77_FCN (setall, SETALL) (const int&, const int&);
+
+  int *F77_FCN (getsd, GETSD) (int&, int&);
 }
 
 static double
 curr_rand_seed (void)
 {
   union d2i { double d; int i[2]; };
   union d2i u;
-  F77_FCN (getsd) (u.i[0], u.i[1]);
+  F77_FCN (getsd, GETSD) (u.i[0], u.i[1]);
   return u.d;
 }
 
 static int
 force_to_fit_range (int i, int lo, int hi)
 {
   assert (hi > lo && lo >= 0 && hi > lo);
 
@@ -76,17 +81,17 @@ force_to_fit_range (int i, int lo, int h
 static void
 set_rand_seed (double val)
 {
   union d2i { double d; int i[2]; };
   union d2i u;
   u.d = val;
   int i0 = force_to_fit_range (u.i[0], 1, 2147483563);
   int i1 = force_to_fit_range (u.i[1], 1, 2147483399);
-  F77_FCN (setall) (i0, i1);
+  F77_FCN (setall, SETALL) (i0, i1);
 }
 
 static char *
 curr_rand_dist (void)
 {
   if (current_distribution == uniform)
     return "uniform";
   else if (current_distribution == normal)
@@ -142,17 +147,17 @@ rand (SEED, N)        -- set seed")
       int second = tm->tm_sec + 1;
 
       int s0 = tm->tm_mday * hour * minute * second;
       int s1 = hour * minute * second;
 #endif
       s0 = force_to_fit_range (s0, 1, 2147483563);
       s1 = force_to_fit_range (s1, 1, 2147483399);
 
-      F77_FCN (setall) (s0, s1);
+      F77_FCN (setall, SETALL) (s0, s1);
       initialized = 1;
     }
 
   int n = 0;
   int m = 0;
   if (nargin == 0)
     {
       n = 1;
@@ -265,22 +270,22 @@ rand (SEED, N)        -- set seed")
       Matrix rand_mat (n, m);
       for (int j = 0; j < m; j++)
 	for (int i = 0; i < n; i++)
 	  {
 	    double val;
 	    switch (current_distribution)
 	      {
 	      case uniform:
-		F77_FCN (dgenunf) (0.0, 1.0, val);
+		F77_FCN (dgenunf, DGENUNF) (0.0, 1.0, val);
 		rand_mat.elem (i, j) = val;
 		break;
 
 	      case normal:
-		F77_FCN (dgennor) (0.0, 1.0, val);
+		F77_FCN (dgennor, DGENNOR) (0.0, 1.0, val);
 		rand_mat.elem (i, j) = val;
 		break;
 
 	      default:
 		panic_impossible ();
 		break;
 	      }
 	  }
diff --git a/src/syl.cc b/src/syl.cc
--- a/src/syl.cc
+++ b/src/syl.cc
@@ -38,27 +38,28 @@ Software Foundation, 675 Mass Ave, Cambr
 #include "gripes.h"
 #include "error.h"
 #include "utils.h"
 #include "help.h"
 #include "defun-dld.h"
 
 extern "C"
 {
-  int F77_FCN (dtrsyl) (const char*, const char*, const int&,
-			const int&, const int&, const double*,
-			const int&, const double*, const int&,
-			const double*, const int&, double&, int&,
-			long, long);
+  int F77_FCN (dtrsyl, DTRSYL) (const char*, const char*, const int&,
+				const int&, const int&, const double*,
+				const int&, const double*, const int&,
+				const double*, const int&, double&,
+				int&, long, long);
  
-  int F77_FCN (ztrsyl) (const char*, const char*, const int&,
-			const int&, const int&, const Complex*,
-			const int&, const Complex*, const int&,
-			const Complex*, const int&, double&, int&,
-			long, long);
+  int F77_FCN (ztrsyl, ZTRSYL) (const char*, const char*, const int&,
+				const int&, const int&,
+				const Complex*, const int&,
+				const Complex*, const int&, 
+				const Complex*, const int&, double&,
+				int&, long, long);
 }
 
 DEFUN_DLD_BUILTIN ("syl", Fsyl, Ssyl, 4, 1,
   "X = syl (A, B, C): solve the Sylvester equation A X + X B + C = 0")
 {
   Octave_object retval;
 
   int nargin = args.length ();
@@ -142,21 +143,21 @@ DEFUN_DLD_BUILTIN ("syl", Fsyl, Ssyl, 4,
   
 	ComplexMatrix cx = ua.hermitian () * cc * ub;
   
 // Solve the sylvester equation, back-transform, and return the solution.
   
 	double scale;
 	int info;
   
-	F77_FCN (ztrsyl) ("N", "N", 1, a_nr, b_nr,
-			  sch_a.fortran_vec (), a_nr,
-			  sch_b.fortran_vec (), b_nr,
-			  cx.fortran_vec (), a_nr, scale, info,
-			  1L, 1L);
+	F77_FCN (ztrsyl, ZTRSYL) ("N", "N", 1, a_nr, b_nr,
+				  sch_a.fortran_vec (), a_nr,
+				  sch_b.fortran_vec (), b_nr,
+				  cx.fortran_vec (), a_nr, scale,
+				  info, 1L, 1L);
 
 	cx = -ua * cx * ub.hermitian ();
   
 	retval = cx;
       }
     else
       {
 
@@ -191,21 +192,21 @@ DEFUN_DLD_BUILTIN ("syl", Fsyl, Ssyl, 4,
   
 	Matrix cx = ua.transpose () * cc * ub;
   
 // Solve the sylvester equation, back-transform, and return the solution.
   
 	double scale;
 	int info;
 
-	F77_FCN (dtrsyl) ("N", "N", 1, a_nr, b_nr,
-			  sch_a.fortran_vec (), a_nr, 
-			  sch_b.fortran_vec (), b_nr,
-			  cx.fortran_vec (), a_nr, scale, info,
-			  1L, 1L);
+	F77_FCN (dtrsyl, DTRSYL) ("N", "N", 1, a_nr, b_nr,
+				  sch_a.fortran_vec (), a_nr, 
+				  sch_b.fortran_vec (), b_nr,
+				  cx.fortran_vec (), a_nr, scale,
+				  info, 1L, 1L);
 
 	if (info)
 	  error ("syl: trouble in dtrsyl info = %d", info);
   
 	cx = -ua*cx*ub.transpose ();
   
 	retval = cx;
       }
diff --git a/src/sysdep.cc b/src/sysdep.cc
--- a/src/sysdep.cc
+++ b/src/sysdep.cc
@@ -66,17 +66,17 @@ extern void _rl_output_character_functio
 #elif defined (HAVE_TERMIO_H)
 #include <termio.h>
 #elif defined (HAVE_SGTTY_H)
 #include <sgtty.h>
 #else
 LOSE! LOSE!
 #endif
 
-extern double F77_FCN (d1mach) (const int&);
+extern double F77_FCN (d1mach, D1MACH) (const int&);
 }
 
 #ifndef STDIN_FILENO
 #define STDIN_FILENO 1
 #endif
 
 // Octave's idea of infinity.
 double octave_Inf;
@@ -226,20 +226,20 @@ octave_ieee_init (void)
   INIT_FLT_PAR (fp[4], OCTAVE_UNKNOWN_FLT_FMT,
 		0, 0,
 		0, 0,
 		0, 0,
 		0, 0);
 
   equiv mach_fp_par[4];
 
-  mach_fp_par[0].d = F77_FCN (d1mach) (1);
-  mach_fp_par[1].d = F77_FCN (d1mach) (2);
-  mach_fp_par[2].d = F77_FCN (d1mach) (3);
-  mach_fp_par[3].d = F77_FCN (d1mach) (4);
+  mach_fp_par[0].d = F77_FCN (d1mach, D1MACH) (1);
+  mach_fp_par[1].d = F77_FCN (d1mach, D1MACH) (2);
+  mach_fp_par[2].d = F77_FCN (d1mach, D1MACH) (3);
+  mach_fp_par[3].d = F77_FCN (d1mach, D1MACH) (4);
 
   int i = 0;
   do
     {
       if (equiv_compare (fp[i].fp_par, mach_fp_par, 4))
 	{
 	  native_float_format = fp[i].fp_fmt;
 	  break;
