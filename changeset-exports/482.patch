# HG changeset patch
# User jwe
# Date 772989789 0
#      Thu Jun 30 15:23:09 1994 +0000
# Node ID 680426c10c5e2f2da3b1b7d3ec161df5e670606c
# Parent  376ac108f611c5f180997f151516cac8773905d1
[project @ 1994-06-30 15:23:09 by jwe]

diff --git a/src/parse.y b/src/parse.y
--- a/src/parse.y
+++ b/src/parse.y
@@ -146,22 +146,20 @@ static void maybe_warn_assign_as_truth_v
   tree_constant *tree_constant_type;
   tree_matrix *tree_matrix_type;
   tree_identifier *tree_identifier_type;
   tree_function *tree_function_type;
   tree_index_expression *tree_index_expression_type;
   tree_colon_expression *tree_colon_expression_type;
   tree_argument_list *tree_argument_list_type;
   tree_parameter_list *tree_parameter_list_type;
-  tree_word_list *tree_word_list_type;
   tree_command *tree_command_type;
   tree_if_command *tree_if_command_type;
   tree_global_command *tree_global_command_type;
   tree_command_list *tree_command_list_type;
-  tree_word_list_command *tree_word_list_command_type;
   tree_plot_command *tree_plot_command_type;
   tree_subplot_list *tree_subplot_list_type;
   tree_plot_limits *tree_plot_limits_type;
   tree_plot_range *tree_plot_range_type;
   tree_subplot_using *tree_subplot_using_type;
   tree_subplot_style *tree_subplot_style_type;
 }
 
@@ -188,26 +186,24 @@ static void maybe_warn_assign_as_truth_v
 
 // Nonterminals we construct.
 %type <tree_type> input command 
 %type <tree_type> ans_expression expression simple_expr simple_expr1
 %type <tree_type> title
 %type <tree_matrix_type> matrix
 %type <tree_identifier_type> identifier
 %type <tree_function_type> func_def func_def1 func_def2 func_def3
-%type <tree_index_expression_type> variable
+%type <tree_index_expression_type> variable word_list_cmd
 %type <tree_colon_expression_type> colon_expr
-%type <tree_argument_list_type> arg_list arg_list1
+%type <tree_argument_list_type> arg_list arg_list1 word_list word_list1
 %type <tree_parameter_list_type> param_list param_list1 func_def1a 
-%type <tree_word_list_type> word_list word_list1
 %type <tree_command_type> statement
 %type <tree_if_command_type> elseif
 %type <tree_global_command_type> global_decl global_decl1
 %type <tree_command_list_type> simple_list simple_list1 list list1 opt_list
-%type <tree_word_list_command_type> word_list_cmd
 %type <tree_plot_command_type> plot_command 
 %type <tree_subplot_list_type> plot_command1 plot_command2 plot_options
 %type <tree_plot_limits_type> ranges
 %type <tree_plot_range_type> ranges1 
 %type <tree_subplot_using_type> using using1 
 %type <tree_subplot_style_type> style
 
 // Precedence and associativity.
@@ -850,27 +846,36 @@ colon_expr	: simple_expr ':' simple_expr
 		      {
 			yyerror ("parse error");
 			ABORT_PARSE;
 		      }
 		  }
 		;
 
 word_list_cmd	: identifier word_list
-		  { $$ = new tree_word_list_command ($1, $2); }
+		  {
+		    $$ = new tree_index_expression
+			   ($1, $2, $1->line (), $1->column ());
+		  }
 		;
 
 word_list	: word_list1
 		  { $$ = $1->reverse (); }
 		;
 
 word_list1	: TEXT
-		  { $$ = new tree_word_list ($1->string ()); }
+		  {
+		    tree_constant *tmp = new tree_constant ($1->string ());
+		    $$ = new tree_argument_list (tmp);
+		  }
 		| word_list1 TEXT
-		  { $$ = $1->chain ($2->string ()); }
+		  {
+		    tree_constant *tmp = new tree_constant ($2->string ());
+		    $$ = $1->chain (tmp);
+		  }
 		;
 
 // This is truly disgusting.
 
 g_symtab	: // empty
 		  { curr_sym_tab = global_sym_tab; }
 		;
 
diff --git a/src/pt-base.h b/src/pt-base.h
--- a/src/pt-base.h
+++ b/src/pt-base.h
@@ -139,20 +139,18 @@ public:
 
   virtual int is_system_fcn_file (void) const
     { return 0; }
 
   virtual tree_constant eval (int print) = 0;
 
   virtual tree_constant *eval (int print, int nargout);
 
-  virtual tree_constant eval (int argc, char **argv, int print);
-
-  virtual tree_constant *eval (const tree_constant *args, int n_in, int nout,
-			       int print)
+  virtual tree_constant *eval (const tree_constant *args, int nargin,
+			       int nargout, int print)
     { assert (0); return NULL_TREE_CONST; }
 
   virtual int save (ostream& os, int mark_as_global = 0,
 		    int precision = 17)
     { assert (0); return 0; }
 
   virtual int line (void) const { return line_num; }
   virtual int column (void) const { return column_num; }
diff --git a/src/pt-const.cc b/src/pt-const.cc
--- a/src/pt-const.cc
+++ b/src/pt-const.cc
@@ -2515,23 +2515,16 @@ tree_constant::~tree_constant (void)
 
   if (--rep->count <= 0)
     {
       delete rep;
       rep = (tree_constant_rep *) NULL;
     }
 }
 
-tree_constant
-tree_constant::eval (int argc, char **argv, int print)
-{
-  ::error ("first element of word-list command is a constant");
-  return tree_constant ();
-}
-
 #if defined (MDEBUG)
 void *
 tree_constant::operator new (size_t size)
 {
   tree_constant *p = ::new tree_constant;
   cerr << "tree_constant::new(): " << p << "\n";
   return p;
 }
diff --git a/src/pt-const.h b/src/pt-const.h
--- a/src/pt-const.h
+++ b/src/pt-const.h
@@ -192,17 +192,17 @@ class idx_vector;
  * Forward class declarations.
  */
 class tree;
 class tree_constant;
 
 #ifndef TREE_FCN_TYPEDEFS
 #define TREE_FCN_TYPEDEFS 1
 
-typedef tree_constant (*Text_fcn)(int, char **);
+typedef tree_constant* (*Text_fcn)(int, char **, int);
 typedef tree_constant* (*General_fcn)(tree_constant *, int, int);
 
 #endif
 
 /*
  * The actual representation of the tree_constant.
  */
 class
@@ -757,18 +757,16 @@ public:
   tree_constant *eval (int print, int nargout)
     {
       rep->eval (print);
       tree_constant *retval = new tree_constant [2];
       retval[0] = *this;
       return retval;
     }
 
-  tree_constant eval (int argc, char **argv, int print);
-
   tree_constant *eval (const tree_constant *args, int n_in, int n_out,
 		       int print)
     { return rep->eval (args, n_in, n_out, print); }
 
 private:
   tree_constant_rep *rep;
 };
 
diff --git a/src/t-builtins.cc b/src/t-builtins.cc
--- a/src/t-builtins.cc
+++ b/src/t-builtins.cc
@@ -169,38 +169,38 @@ list_in_columns (ostrstream& os, char **
 	  pos += max_name_length;
 	}
       os << "\n";
     }
 
   return os;
 }
 
-tree_constant
-builtin_casesen (int argc, char **argv)
+tree_constant *
+builtin_casesen (int argc, char **argv, int nargout)
 {
-  tree_constant retval;
+  tree_constant *retval = NULL_TREE_CONST;
 
   if (argc == 1 || (argc > 1 && strcmp (argv[1], "off") == 0))
     warning ("casesen: sorry, Octave is always case sensitive");
   else if (argc > 1 && strcmp (argv[1], "on") == 0)
     ; // ok.
   else
     print_usage ("casesen");
 
   return retval;
 }
 
 /*
  * Change current working directory.
  */
-tree_constant
-builtin_cd (int argc, char **argv)
+tree_constant *
+builtin_cd (int argc, char **argv, int nargout)
 {
-  tree_constant retval;
+  tree_constant *retval = NULL_TREE_CONST;
 
   if (argc > 1)
     {
       static char *dirname = (char *) NULL;
 
       if (dirname)
 	free (dirname);
 
@@ -246,20 +246,20 @@ in_list (char *s, char **list)
   return 0;
 }
 #endif
 
 /*
  * Wipe out user-defined variables and functions given a list of
  * globbing patterns.
  */
-tree_constant
-builtin_clear (int argc, char **argv)
+tree_constant *
+builtin_clear (int argc, char **argv, int nargout)
 {
-  tree_constant retval;
+  tree_constant *retval = NULL_TREE_CONST;
 
 // Always clear the local table, but don't clear currently compiled
 // functions unless we are at the top level.  (Allowing that to happen
 // inside functions would result in pretty odd behavior...)
 
   int clear_user_functions = (curr_sym_tab == top_level_sym_tab);
 
   if (argc == 1)
@@ -323,45 +323,45 @@ builtin_clear (int argc, char **argv)
 
     }
   return retval;
 }
 
 /*
  * Associate a cryptic message with a variable name.
  */
-tree_constant
-builtin_document (int argc, char **argv)
+tree_constant *
+builtin_document (int argc, char **argv, int nargout)
 {
-  tree_constant retval;
+  tree_constant *retval = NULL_TREE_CONST;
   if (argc == 3)
     document_symbol (argv[1], argv[2]);
   else
     print_usage ("document");
   return retval;
 }
 
 /*
  * Edit commands with your favorite editor.
  */
-tree_constant
-builtin_edit_history (int argc, char **argv)
+tree_constant *
+builtin_edit_history (int argc, char **argv, int nargout)
 {
-  tree_constant retval;
+  tree_constant *retval = NULL_TREE_CONST;
   do_edit_history (argc, argv);
   return retval;
 }
 
 /*
  * Set output format state.
  */
-tree_constant
-builtin_format (int argc, char **argv)
+tree_constant *
+builtin_format (int argc, char **argv, int nargout)
 {
-  tree_constant retval;
+  tree_constant *retval = NULL_TREE_CONST;
   set_format_style (argc, argv);
   return retval;
 }
 
 static void
 help_syms_list (ostrstream& output_buf, help_list *list,
 		const char *desc)
 {
@@ -483,20 +483,20 @@ try_info (const char *string, int force 
     }
 
   return status;
 }
 
 /*
  * Print cryptic yet witty messages.
  */
-tree_constant
-builtin_help (int argc, char **argv)
+tree_constant *
+builtin_help (int argc, char **argv, int nargout)
 {
-  tree_constant retval;
+  tree_constant *retval = NULL_TREE_CONST;
 
   if (argc == 1)
     {
       simple_help ();
     }
   else
     {
       if (argv[1] != (char *) NULL && strcmp (argv[1], "-i") == 0)
@@ -618,34 +618,34 @@ builtin_help (int argc, char **argv)
     }
 
   return retval;
 }
 
 /*
  * Display, save, or load history.
  */
-tree_constant
-builtin_history (int argc, char **argv)
+tree_constant *
+builtin_history (int argc, char **argv, int nargout)
 {
-  tree_constant retval;
+  tree_constant *retval = NULL_TREE_CONST;
 
   do_history (argc, argv);
 
   return retval;
 }
 
 /*
  * Change state flag that determines whether lines are added to plots
  * or drawn on new plots.
  */
-tree_constant
-builtin_hold (int argc, char **argv)
+tree_constant *
+builtin_hold (int argc, char **argv, int nargout)
 {
-  tree_constant retval;
+  tree_constant *retval = NULL_TREE_CONST;
   
   switch (argc)
     {
     case 1:
       clear_before_plotting = ! clear_before_plotting;
       break;
     case 2:
       if (strcasecmp (argv[1], "on") == 0)
@@ -804,20 +804,20 @@ load_variable (char *nm, int force, istr
 
 /*
  * Read variables from an input stream.
  *
  * BUGS:
  *
  *  -- This function is not terribly robust.
  */
-tree_constant
-builtin_load (int argc, char **argv)
+tree_constant *
+builtin_load (int argc, char **argv, int nargout)
 {
-  tree_constant retval;
+  tree_constant *retval = NULL_TREE_CONST;
 
   argc--;
   argv++;
 
   int force = 0;
   if (argc > 0 && strcmp (*argv, "-force") == 0)
     {
       force++;
@@ -890,20 +890,20 @@ builtin_load (int argc, char **argv)
     file.close ();
 
   return retval;
 }
 
 /*
  * Get a directory listing.
  */
-tree_constant
-builtin_ls (int argc, char **argv)
+tree_constant *
+builtin_ls (int argc, char **argv, int nargout)
 {
-  tree_constant retval;
+  tree_constant *retval = NULL_TREE_CONST;
 
   ostrstream ls_buf;
 
   ls_buf << "ls -C ";
   for (int i = 1; i < argc; i++)
     ls_buf << tilde_expand (argv[i]) << " ";
 
   ls_buf << ends;
@@ -924,20 +924,20 @@ builtin_ls (int argc, char **argv)
   delete [] ls_command;
 
   return retval;
 }
 
 /*
  * Run previous commands from the history list.
  */
-tree_constant
-builtin_run_history (int argc, char **argv)
+tree_constant *
+builtin_run_history (int argc, char **argv, int nargout)
 {
-  tree_constant retval;
+  tree_constant *retval = NULL_TREE_CONST;
   do_run_history (argc, argv);
   return retval;
 }
 
 /*
  * Return nonzero if PATTERN has any special globbing chars in it.
  */
 static int
@@ -974,20 +974,20 @@ glob_pattern_p (char *pattern)
     }
 
   return 0;
 }
 
 /*
  * Write variables to an output stream.
  */
-tree_constant
-builtin_save (int argc, char **argv)
+tree_constant *
+builtin_save (int argc, char **argv, int nargout)
 {
-  tree_constant retval;
+  tree_constant *retval = NULL_TREE_CONST;
 
   if (argc < 2)
     {
       print_usage ("save");
       return retval;
     }
 
   argc--;
@@ -1077,20 +1077,20 @@ builtin_save (int argc, char **argv)
     file.close ();
 
   return retval;
 }
 
 /*
  * Set plotting options.
  */
-tree_constant
-builtin_set (int argc, char **argv)
+tree_constant *
+builtin_set (int argc, char **argv, int nargout)
 {
-  tree_constant retval;
+  tree_constant *retval = NULL_TREE_CONST;
 
   ostrstream plot_buf;
 
   if (argc > 1)
     {
       if (almost_match ("parametric", argv[1], 3))
 	parametric_plot = 1;
       else if (almost_match ("noparametric", argv[1], 5))
@@ -1108,20 +1108,20 @@ builtin_set (int argc, char **argv)
   delete [] plot_command;
 
   return retval;
 }
 
 /*
  * Set plotting options.
  */
-tree_constant
-builtin_show (int argc, char **argv)
+tree_constant *
+builtin_show (int argc, char **argv, int nargout)
 {
-  tree_constant retval;
+  tree_constant *retval = NULL_TREE_CONST;
 
   ostrstream plot_buf;
 
   for (int i = 0; i < argc; i++)
     plot_buf << argv[i] << " ";
 
   plot_buf << "\n" << ends;
 
@@ -1200,20 +1200,20 @@ maybe_list (const char *header, ostrstre
 	  list_in_columns (output_buf, symbols);
 	  status = 1;
 	}
       delete [] symbols;
     }
   return status;
 }
 
-tree_constant
-builtin_who (int argc, char **argv)
+tree_constant *
+builtin_who (int argc, char **argv, int nargout)
 {
-  tree_constant retval;
+  tree_constant *retval = NULL_TREE_CONST;
 
   int show_builtins = 0;
   int show_functions = (curr_sym_tab == top_level_sym_tab);
   int show_variables = 1;
   int show_verbose = 0;
 
   if (argc > 1)
     {
diff --git a/src/t-builtins.h b/src/t-builtins.h
--- a/src/t-builtins.h
+++ b/src/t-builtins.h
@@ -29,32 +29,33 @@ Software Foundation, 675 Mass Ave, Cambr
 struct builtin_text_functions
 {
   char *name;
   int nargin_max;
   Text_fcn text_fcn;
   char *help_string;
 };
 
-extern tree_constant builtin_casesen (int, char **);
-extern tree_constant builtin_cd (int, char **);
-extern tree_constant builtin_clear (int, char **);
-extern tree_constant builtin_document (int, char **);
-extern tree_constant builtin_edit_history (int, char **);
-extern tree_constant builtin_format (int, char **);
-extern tree_constant builtin_help (int, char **);
-extern tree_constant builtin_history (int, char **);
-extern tree_constant builtin_hold (int, char **);
-extern tree_constant builtin_load (int, char **);
-extern tree_constant builtin_ls (int, char **);
-extern tree_constant builtin_run_history (int, char **);
-extern tree_constant builtin_save (int, char **);
-extern tree_constant builtin_set (int, char **);
-extern tree_constant builtin_show (int, char **);
-extern tree_constant builtin_who (int, char **);
+extern tree_constant *builtin_casesen (int argc, char **argv, int nargout);
+extern tree_constant *builtin_cd (int argc, char **argv, int nargout);
+extern tree_constant *builtin_clear (int argc, char **argv, int nargout);
+extern tree_constant *builtin_document (int argc, char **argv, int nargout);
+extern tree_constant *builtin_edit_history (int argc, char **argv,
+					    int nargout);
+extern tree_constant *builtin_format (int argc, char **argv, int nargout);
+extern tree_constant *builtin_help (int argc, char **argv, int nargout);
+extern tree_constant *builtin_history (int argc, char **argv, int nargout);
+extern tree_constant *builtin_hold (int argc, char **argv, int nargout);
+extern tree_constant *builtin_load (int argc, char **argv, int nargout);
+extern tree_constant *builtin_ls (int argc, char **argv, int nargout);
+extern tree_constant *builtin_run_history (int argc, char **argv, int nargout);
+extern tree_constant *builtin_save (int argc, char **argv, int nargout);
+extern tree_constant *builtin_set (int argc, char **argv, int nargout);
+extern tree_constant *builtin_show (int argc, char **argv, int nargout);
+extern tree_constant *builtin_who (int argc, char **argv, int nargout);
 
 #endif
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; page-delimiter: "^/\\*" ***
 ;;; End: ***
diff --git a/src/tree.h.old b/src/tree.h.old
--- a/src/tree.h.old
+++ b/src/tree.h.old
@@ -73,27 +73,25 @@ class tree_binary_expression;
 class tree_assignment_expression;
 class tree_simple_assignment_expression;
 class tree_multi_assignment_expression;
 class tree_colon_expression;
 class tree_index_expression;
 class tree_argument_list;
 class tree_parameter_list;
 class tree_return_list;
-class tree_word_list;
 class tree_command;
 class tree_command_list;
 class tree_global_command;
 class tree_while_command;
 class tree_for_command;
 class tree_if_command;
 class tree_break_command;
 class tree_continue_command;
 class tree_return_command;
-class tree_word_list_command;;
 class tree_plot_limits;
 class tree_plot_range;
 class tree_subplot;
 class tree_subplot_using;
 class tree_subplot_style;
 class tree_subplot_list;
 class tree_plot_command;
 
@@ -145,20 +143,18 @@ public:
   ~tree_builtin (void);
 
   int is_builtin (void) const;
 
   tree_constant eval (int print);
 
   tree_constant *eval (int print, int nargout);
 
-  tree_constant eval (int argc, char **argv, int print);
-
-  tree_constant *eval (const tree_constant *args, int n_in, int n_out,
-		       int print);
+  tree_constant *eval (const tree_constant *args, int nargin,
+		       int nargout, int print);
 
   char *name (void) const;
 
   int max_expected_args (void);
 
 private:
   int nargin_max;
   int nargout_max;
@@ -206,20 +202,18 @@ public:
   void mark_as_formal_parameter (void);
 
   void mark_for_possible_ans_assign (void);
 
   tree_constant eval (int print);
 
   tree_constant *eval (int print, int nargout);
 
-  tree_constant eval (int argc, char **argv, int print);
-  
-  tree_constant *eval (const tree_constant *args, int n_in, int n_out,
-		       int print);
+  tree_constant *eval (const tree_constant *args, int nargin,
+		       int nargout, int print);
 
   void eval_undefined_error (void);
 
 private:
   symbol_record *sym;
   int maybe_do_ans_assign;
 };
 
@@ -254,20 +248,18 @@ public:
 
   void stash_function_name (char *s);
   char *function_name (void);
 
   tree_constant eval (int print);
 
   tree_constant *eval (int print, int nargout);
 
-  tree_constant eval (int argc, char **argv, int print);
-
-  tree_constant *eval (const tree_constant *args, int n_in, int n_out,
-		       int print);
+  tree_constant *eval (const tree_constant *args, int nargin,
+		       int nargout, int print);
 
   int max_expected_args (void);
 
   void traceback_error (void);
 
 private:
   int call_depth;
   tree_parameter_list *param_list;
@@ -607,43 +599,16 @@ tree_return_list : public tree
   tree_constant eval (int print);
 
  private:
   tree_index_expression *retval;
   tree_return_list *next;
 };
 
 /*
- * Word lists.
- */
-class
-tree_word_list : public tree
-{
- public:
-  tree_word_list (void);
-  tree_word_list (char *s);
-
-  ~tree_word_list (void);
-
-  tree_word_list *chain (char *s);
-  tree_word_list *reverse (void);
-  int length (void);
-
-  char *name (void) const;
-
-  tree_word_list *next_elem (void);
-
-  tree_constant eval (int print);
-
- private:
-  char *word;
-  tree_word_list *next;
-};
-
-/*
  * A base class for commands.
  */
 class
 tree_command : public tree
 {
 };
 
 /*
@@ -809,35 +774,16 @@ tree_return_command : public tree_comman
  public:
   tree_return_command (int l = -1, int c = -1);
 
   ~tree_return_command (void);
 
   tree_constant eval (int print);
 };
 
-/*
- * Functions that take a list of strings as arguments.
- */
-class
-tree_word_list_command : public tree_command
-{
- public:
-  tree_word_list_command (void);
-  tree_word_list_command (tree_identifier *id, tree_word_list *wl);
-
-  ~tree_word_list_command (void);
-
-  tree_constant eval (int print);
-
- private:
-  tree_identifier *ident;
-  tree_word_list *word_list;
-};
-
 #endif
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; page-delimiter: "^/\\*" ***
 ;;; End: ***
 */
