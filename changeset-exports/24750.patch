# HG changeset patch
# User Torsten <mttl@mailbox.org>
# Date 1518546998 -3600
#      Tue Feb 13 19:36:38 2018 +0100
# Node ID 82c3ae6145b569f9fb69b94529ddd73c093b0d24
# Parent  4aa86466f97163f89ada19b73e5051e4a03ee36f
# Parent  2ae7119e7cdc32961da30f58e69cfe4b9ed99fcf
merge away extra head

diff --git a/libgui/src/variable-editor-model.cc b/libgui/src/variable-editor-model.cc
--- a/libgui/src/variable-editor-model.cc
+++ b/libgui/src/variable-editor-model.cc
@@ -149,41 +149,57 @@ base_ve_model::rowCount (const QModelInd
 
 int
 base_ve_model::columnCount (const QModelIndex&) const
 {
   return m_valid ? m_display_cols : 1;
 }
 
 QString
-base_ve_model::edit_display_sub (const octave_value& elt) const
+base_ve_model::edit_display_sub (const octave_value& elt, int role) const
 {
   std::string str;
 
   if (cell_is_editable (elt))
-    str = elt.edit_display (m_display_fmt, 0, 0);
+    {
+      float_display_format fmt;
+
+      if (role == Qt::DisplayRole)
+        fmt = get_edit_display_format (elt);
+      else
+        fmt.set_precision (elt.is_single_type () ? 8 : 16);
+
+      str = elt.edit_display (fmt, 0, 0);
+    }
   else
     {
       dim_vector dv = elt.dims ();
       str = "[" + dv.str () + " " + elt.class_name () + "]";
     }
 
   return QString::fromStdString (str);
 }
 
 QVariant
-base_ve_model::edit_display (const QModelIndex& idx) const
+base_ve_model::edit_display (const QModelIndex& idx, int role) const
 {
   int row;
   int col;
 
   if (! index_ok (idx, row, col))
     return QVariant ();
 
-  std::string str = m_value.edit_display (m_display_fmt, row, col);
+  float_display_format fmt;
+  if (role == Qt::DisplayRole)
+    fmt = m_display_fmt;
+  else
+    fmt.set_precision (m_value.is_single_type () ? 8 : 16);
+
+  std::string str = m_value.edit_display (fmt, row, col);
+
   return QString::fromStdString (str);
 }
 
 QVariant
 base_ve_model::data (const QModelIndex& idx, int role) const
 {
   if (idx.isValid () && role == Qt::DisplayRole && update_pending (idx))
     return QVariant (update_pending_data (idx));
@@ -196,17 +212,18 @@ base_ve_model::data (const QModelIndex& 
 
       return QVariant (QString ("x"));
     }
 
   switch (role)
     {
     case Qt::DisplayRole:
     case Qt::EditRole:
-      return edit_display (idx);
+      return edit_display (idx, role);
+      return edit_display (idx, role);
 
 #if 0
     case Qt::StatusTipRole:
       return elem (idx).m_status_tip;
 
     case Qt::ToolTipRole:
       return elem (idx).m_tool_tip;
 
@@ -320,25 +337,32 @@ public:
   ~numeric_model (void) = default;
 
   // No copying!
 
   numeric_model (const numeric_model&) = delete;
 
   numeric_model& operator = (const numeric_model&) = delete;
 
-  QVariant edit_display (const QModelIndex& idx) const
+  QVariant edit_display (const QModelIndex& idx, int role) const
   {
     int row;
     int col;
 
     if (! index_ok (idx, row, col))
       return QVariant ();
 
-    std::string str = m_value.edit_display (m_display_fmt, row, col);
+  float_display_format fmt;
+  if (role == Qt::DisplayRole)
+    fmt = m_display_fmt;
+  else
+    fmt.set_precision (m_value.is_single_type () ? 8 : 16);
+
+  std::string str = m_value.edit_display (fmt, row, col);
+
     return QString::fromStdString (str);
   }
 
   QString subscript_expression (const QModelIndex& idx) const
   {
     if (! idx.isValid ())
       return "";
 
@@ -365,19 +389,22 @@ public:
   ~string_model (void) = default;
 
   // No copying!
 
   string_model (const string_model&) = delete;
 
   string_model& operator = (const string_model&) = delete;
 
-  QVariant edit_display (const QModelIndex&) const
+  QVariant edit_display (const QModelIndex&, int) const
   {
-    std::string str = m_value.edit_display (m_display_fmt, 0, 0);
+    // There isn't really a format for strings...
+
+    std::string str = m_value.edit_display (float_display_format (), 0, 0);
+
     return QString::fromStdString (str);
   }
 
   char quote_char (const QModelIndex&) const
   {
     return get_quote_char (m_value);
   }
 };
@@ -399,27 +426,27 @@ public:
   ~cell_model (void) = default;
 
   // No copying!
 
   cell_model (const cell_model&) = delete;
 
   cell_model& operator = (const cell_model&) = delete;
 
-  QVariant edit_display (const QModelIndex& idx) const
+  QVariant edit_display (const QModelIndex& idx, int role) const
   {
     int row;
     int col;
 
     if (! index_ok (idx, row, col))
       return QVariant ();
 
     Cell cval = m_value.cell_value ();
 
-    return edit_display_sub (cval(row,col));
+    return edit_display_sub (cval(row,col), role);
   }
 
   bool requires_sub_editor (const QModelIndex& idx) const
   {
     int row;
     int col;
 
     if (! index_ok (idx, row, col))
@@ -488,27 +515,27 @@ public:
   ~scalar_struct_model (void) = default;
 
   // No copying!
 
   scalar_struct_model (const scalar_struct_model&) = delete;
 
   scalar_struct_model& operator = (const scalar_struct_model&) = delete;
 
-  QVariant edit_display (const QModelIndex& idx) const
+  QVariant edit_display (const QModelIndex& idx, int role) const
   {
     int row;
     int col;
 
     if (! index_ok (idx, row, col))
       return QVariant ();
 
     octave_scalar_map m = m_value.scalar_map_value ();
 
-    return edit_display_sub (m.contents (row));
+    return edit_display_sub (m.contents (row), role);
   }
 
   bool requires_sub_editor (const QModelIndex& idx) const
   {
     int row;
     int col;
 
     if (! index_ok (idx, row, col))
@@ -607,17 +634,17 @@ public:
   // No copying!
 
   display_only_model (const display_only_model&) = delete;
 
   display_only_model& operator = (const display_only_model&) = delete;
 
   bool is_editable (void) const { return false; }
 
-  QVariant edit_display (const QModelIndex&) const
+  QVariant edit_display (const QModelIndex&, int) const
   {
     if (m_value.is_undefined ())
       return QVariant ();
 
     std::ostringstream buf;
 
     octave_value tval = m_value;
 
@@ -656,29 +683,29 @@ public:
   ~vector_struct_model (void) = default;
 
   // No copying!
 
   vector_struct_model (const vector_struct_model&) = delete;
 
   vector_struct_model& operator = (const vector_struct_model&) = delete;
 
-  QVariant edit_display (const QModelIndex& idx) const
+  QVariant edit_display (const QModelIndex& idx, int role) const
   {
     int row;
     int col;
 
     if (! index_ok (idx, row, col))
       return QVariant ();
 
     octave_map m = m_value.map_value ();
 
     Cell cval = m.contents (col);
 
-    return edit_display_sub (cval(row));
+    return edit_display_sub (cval(row), role);
   }
 
   bool requires_sub_editor (const QModelIndex& idx) const
   {
     int row;
     int col;
 
     if (! index_ok (idx, row, col))
@@ -777,17 +804,17 @@ public:
   ~struct_model (void) = default;
 
   // No copying!
 
   struct_model (const struct_model&) = delete;
 
   struct_model& operator = (const struct_model&) = delete;
 
-  QVariant edit_display (const QModelIndex& idx) const
+  QVariant edit_display (const QModelIndex& idx, int) const
   {
     int row;
     int col;
 
     if (! index_ok (idx, row, col))
       return QVariant ();
 
     std::string str = m_value.edit_display (m_display_fmt, row, col);
diff --git a/libgui/src/variable-editor-model.h b/libgui/src/variable-editor-model.h
--- a/libgui/src/variable-editor-model.h
+++ b/libgui/src/variable-editor-model.h
@@ -56,19 +56,19 @@ public:
   virtual octave_value value_at (const QModelIndex& idx) const;
 
   int column_width (void) const;
 
   int rowCount (const QModelIndex& = QModelIndex ()) const;
 
   int columnCount (const QModelIndex& = QModelIndex ()) const;
 
-  QString edit_display_sub (const octave_value& elt) const;
+  QString edit_display_sub (const octave_value& elt, int role) const;
 
-  virtual QVariant edit_display (const QModelIndex& idx) const;
+  virtual QVariant edit_display (const QModelIndex& idx, int role) const;
 
   QVariant data (const QModelIndex& idx, int role = Qt::DisplayRole) const;
 
   virtual bool requires_sub_editor (const QModelIndex& idx) const;
 
   void set_update_pending (const QModelIndex& idx, const QString& str);
 
   bool update_pending (const QModelIndex& idx) const;
diff --git a/libinterp/corefcn/pr-flt-fmt.h b/libinterp/corefcn/pr-flt-fmt.h
--- a/libinterp/corefcn/pr-flt-fmt.h
+++ b/libinterp/corefcn/pr-flt-fmt.h
@@ -150,16 +150,22 @@ public:
   float_display_format& operator = (const float_display_format&) = default;
 
   ~float_display_format (void) = default;
 
   float_format real_format (void) const { return m_real_fmt; }
 
   float_format imag_format (void) const { return m_imag_fmt; }
 
+  void set_precision (int prec)
+  {
+    m_real_fmt.prec = prec;
+    m_imag_fmt.prec = prec;
+  }
+
 private:
 
   float_format m_real_fmt;
 
   float_format m_imag_fmt;
 };
 
 #endif
