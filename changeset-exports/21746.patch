# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1463683235 14400
#      Thu May 19 14:40:35 2016 -0400
# Node ID ac8b8bdae98f3a669ebdcfdef19991ed8c6ce3c7
# Parent  bf1121302404ce7d85d3a09993a75f02a5f2722a
use gnulib:: tag in rand functions as needed

* randgamma.cc, randmtzig.cc, randpoisson.cc: Tag functions with
gnulib:: namespace id as needed.

diff --git a/liboctave/numeric/randgamma.cc b/liboctave/numeric/randgamma.cc
--- a/liboctave/numeric/randgamma.cc
+++ b/liboctave/numeric/randgamma.cc
@@ -113,17 +113,17 @@ oct_fill_randg (double a, octave_idx_typ
     restart:
       x = RNOR;
       v = (1+c*x);
       v *= v*v;
       if (v <= 0)
         goto restart; /* rare, so don't bother moving up */
       u = RUNI;
       xsq = x*x;
-      if (u >= 1.-0.0331*xsq*xsq && log (u) >= 0.5*xsq + d*(1-v+log (v)))
+      if (u >= 1.-0.0331*xsq*xsq && gnulib::log (u) >= 0.5*xsq + d*(1-v+gnulib::log (v)))
         goto restart;
       r[i] = d*v;
     }
   if (a < 1)
     {
       /* Use gamma(a) = gamma(1+a)*U^(1/a) */
       /* Given REXP = -log(U) then U^(1/a) = exp(-REXP/a) */
       for (i = 0; i < n; i++)
@@ -168,17 +168,17 @@ oct_fill_float_randg (float a, octave_id
     frestart:
       x = RNOR;
       v = (1+c*x);
       v *= v*v;
       if (v <= 0)
         goto frestart; /* rare, so don't bother moving up */
       u = RUNI;
       xsq = x*x;
-      if (u >= 1.-0.0331*xsq*xsq && log (u) >= 0.5*xsq + d*(1-v+log (v)))
+      if (u >= 1.-0.0331*xsq*xsq && gnulib::log (u) >= 0.5*xsq + d*(1-v+gnulib::log (v)))
         goto frestart;
       r[i] = d*v;
     }
   if (a < 1)
     {
       /* Use gamma(a) = gamma(1+a)*U^(1/a) */
       /* Given REXP = -log(U) then U^(1/a) = exp(-REXP/a) */
       for (i = 0; i < n; i++)
diff --git a/liboctave/numeric/randmtzig.cc b/liboctave/numeric/randmtzig.cc
--- a/liboctave/numeric/randmtzig.cc
+++ b/liboctave/numeric/randmtzig.cc
@@ -256,39 +256,39 @@ oct_init_by_array (uint32_t *init_key, i
 
 void
 oct_init_by_entropy (void)
 {
   uint32_t entropy[MT_N];
   int n = 0;
 
   /* Look for entropy in /dev/urandom */
-  FILE* urandom = fopen ("/dev/urandom", "rb");
+  FILE* urandom = gnulib::fopen ("/dev/urandom", "rb");
   if (urandom)
     {
       while (n < MT_N)
         {
           unsigned char word[4];
-          if (fread (word, 4, 1, urandom) != 1)
+          if (gnulib::fread (word, 4, 1, urandom) != 1)
             break;
           entropy[n++] = word[0]+(word[1]<<8)+(word[2]<<16)+(static_cast<uint32_t>(word[3])<<24);
         }
-      fclose (urandom);
+      gnulib::fclose (urandom);
     }
 
   /* If there isn't enough entropy, gather some from various sources */
   if (n < MT_N)
     entropy[n++] = time (0); /* Current time in seconds */
   if (n < MT_N)
     entropy[n++] = clock ();    /* CPU time used (usec) */
 #if defined (HAVE_GETTIMEOFDAY)
   if (n < MT_N)
     {
       struct timeval tv;
-      if (gettimeofday (&tv, 0) != -1)
+      if (gnulib::gettimeofday (&tv, 0) != -1)
         entropy[n++] = tv.tv_usec;   /* Fractional part of current time */
     }
 #endif
   /* Send all the entropy into the initial state vector */
   oct_init_by_array (entropy,n);
 }
 
 void
@@ -502,17 +502,17 @@ create_ziggurat_tables (void)
   wi[0] = NOR_SECTION_AREA / fi[255] / NMANTISSA;
   fi[0] = 1.;
 
   for (i = 254; i > 0; i--)
     {
       /* New x is given by x = f^{-1}(v/x_{i+1} + f(x_{i+1})), thus
        * need inverse operator of y = exp(-0.5*x*x) -> x = sqrt(-2*ln(y))
        */
-      x = sqrt (-2. * log (NOR_SECTION_AREA / x1 + fi[i+1]));
+      x = sqrt (-2. * gnulib::log (NOR_SECTION_AREA / x1 + fi[i+1]));
       ki[i+1] = static_cast<ZIGINT> (x / x1 * NMANTISSA);
       wi[i] = x / NMANTISSA;
       fi[i] = exp (-0.5 * x * x);
       x1 = x;
     }
 
   ki[1] = 0;
 
@@ -530,17 +530,17 @@ create_ziggurat_tables (void)
   we[0] = EXP_SECTION_AREA / fe[255] / EMANTISSA;
   fe[0] = 1.;
 
   for (i = 254; i > 0; i--)
     {
       /* New x is given by x = f^{-1}(v/x_{i+1} + f(x_{i+1})), thus
        * need inverse operator of y = exp(-x) -> x = -ln(y)
        */
-      x = - log (EXP_SECTION_AREA / x1 + fe[i+1]);
+      x = - gnulib::log (EXP_SECTION_AREA / x1 + fe[i+1]);
       ke[i+1] = static_cast<ZIGINT> (x / x1 * EMANTISSA);
       we[i] = x / EMANTISSA;
       fe[i] = exp (-x);
       x1 = x;
     }
   ke[1] = 0;
 
   initt = 0;
@@ -610,18 +610,18 @@ oct_randn (void)
            * tail!!!! Any thing random might be used to determine the
            * sign, but as we already have r we might as well use it
            *
            * [PAK] but not the bottom 8 bits, since they are all 0 here!
            */
           double xx, yy;
           do
             {
-              xx = - ZIGGURAT_NOR_INV_R * log (RANDU);
-              yy = - log (RANDU);
+              xx = - ZIGGURAT_NOR_INV_R * gnulib::log (RANDU);
+              yy = - gnulib::log (RANDU);
             }
           while ( yy+yy <= xx*xx);
           return ((rabs & 0x100) ? -ZIGGURAT_NOR_R-xx : ZIGGURAT_NOR_R+xx);
         }
       else if ((fi[idx-1] - fi[idx]) * RANDU + fi[idx] < exp (-0.5*x*x))
         return x;
     }
 }
@@ -641,17 +641,17 @@ oct_rande (void)
         return x;               /* 98.9% of the time we return here 1st try */
       else if (idx == 0)
         {
           /* As stated in Marsaglia and Tsang
            *
            * For the exponential tail, the method of Marsaglia[5] provides:
            * x = r - ln(U);
            */
-          return ZIGGURAT_EXP_R - log (RANDU);
+          return ZIGGURAT_EXP_R - gnulib::log (RANDU);
         }
       else if ((fe[idx-1] - fe[idx]) * RANDU + fe[idx] < exp (-x))
         return x;
     }
 }
 
 #undef ZIGINT
 #undef EMANTISSA
@@ -693,17 +693,17 @@ create_ziggurat_float_tables (void)
   fwi[0] = NOR_SECTION_AREA / ffi[255] / NMANTISSA;
   ffi[0] = 1.;
 
   for (i = 254; i > 0; i--)
     {
       /* New x is given by x = f^{-1}(v/x_{i+1} + f(x_{i+1})), thus
        * need inverse operator of y = exp(-0.5*x*x) -> x = sqrt(-2*ln(y))
        */
-      x = sqrt (-2. * log (NOR_SECTION_AREA / x1 + ffi[i+1]));
+      x = sqrt (-2. * gnulib::log (NOR_SECTION_AREA / x1 + ffi[i+1]));
       fki[i+1] = static_cast<ZIGINT> (x / x1 * NMANTISSA);
       fwi[i] = x / NMANTISSA;
       ffi[i] = exp (-0.5 * x * x);
       x1 = x;
     }
 
   fki[1] = 0;
 
@@ -721,17 +721,17 @@ create_ziggurat_float_tables (void)
   fwe[0] = EXP_SECTION_AREA / ffe[255] / EMANTISSA;
   ffe[0] = 1.;
 
   for (i = 254; i > 0; i--)
     {
       /* New x is given by x = f^{-1}(v/x_{i+1} + f(x_{i+1})), thus
        * need inverse operator of y = exp(-x) -> x = -ln(y)
        */
-      x = - log (EXP_SECTION_AREA / x1 + ffe[i+1]);
+      x = - gnulib::log (EXP_SECTION_AREA / x1 + ffe[i+1]);
       fke[i+1] = static_cast<ZIGINT> (x / x1 * EMANTISSA);
       fwe[i] = x / EMANTISSA;
       ffe[i] = exp (-x);
       x1 = x;
     }
   fke[1] = 0;
 
   inittf = 0;
@@ -777,18 +777,18 @@ oct_float_randn (void)
            * tail!!!! Any thing random might be used to determine the
            * sign, but as we already have r we might as well use it
            *
            * [PAK] but not the bottom 8 bits, since they are all 0 here!
            */
           float xx, yy;
           do
             {
-              xx = - ZIGGURAT_NOR_INV_R * log (RANDU);
-              yy = - log (RANDU);
+              xx = - ZIGGURAT_NOR_INV_R * gnulib::log (RANDU);
+              yy = - gnulib::log (RANDU);
             }
           while ( yy+yy <= xx*xx);
           return ((rabs & 0x100) ? -ZIGGURAT_NOR_R-xx : ZIGGURAT_NOR_R+xx);
         }
       else if ((ffi[idx-1] - ffi[idx]) * RANDU + ffi[idx] < exp (-0.5*x*x))
         return x;
     }
 }
@@ -808,17 +808,17 @@ oct_float_rande (void)
         return x;               /* 98.9% of the time we return here 1st try */
       else if (idx == 0)
         {
           /* As stated in Marsaglia and Tsang
            *
            * For the exponential tail, the method of Marsaglia[5] provides:
            * x = r - ln(U);
            */
-          return ZIGGURAT_EXP_R - log (RANDU);
+          return ZIGGURAT_EXP_R - gnulib::log (RANDU);
         }
       else if ((ffe[idx-1] - ffe[idx]) * RANDU + ffe[idx] < exp (-x))
         return x;
     }
 }
 
 /* Array generators */
 void
diff --git a/liboctave/numeric/randpoisson.cc b/liboctave/numeric/randpoisson.cc
--- a/liboctave/numeric/randpoisson.cc
+++ b/liboctave/numeric/randpoisson.cc
@@ -97,17 +97,17 @@ flogfak (double k)
   };
 
   double r, rr;
 
   if (k >= 30.0)
     {
       r  = 1.0 / k;
       rr = r * r;
-      return ((k + 0.5)*log (k) - k + C0 + r*(C1 + rr*(C3 + rr*(C5 + rr*C7))));
+      return ((k + 0.5)*gnulib::log (k) - k + C0 + r*(C1 + rr*(C3 + rr*(C5 + rr*C7))));
     }
   else
     return (logfak[static_cast<int> (k)]);
 }
 
 
 /******************************************************************
  *                                                                *
@@ -159,38 +159,38 @@ pprsc (double my)
   if (my != my_last)
     {                               /* set-up           */
       my_last = my;
       /* approximate deviation of reflection points k2, k4 from my - 1/2 */
       Ds = sqrt (my + 0.25);
 
       /* mode m, reflection points k2 and k4, and points k1 and k5,      */
       /* which delimit the centre region of h(x)                         */
-      m  = floor (my);
+      m  = gnulib::floor (my);
       k2 = ceil (my - 0.5 - Ds);
-      k4 = floor (my - 0.5 + Ds);
+      k4 = gnulib::floor (my - 0.5 + Ds);
       k1 = k2 + k2 - m + 1L;
       k5 = k4 + k4 - m;
 
       /* range width of the critical left and right centre region        */
       dl = (k2 - k1);
       dr = (k5 - k4);
 
       /* recurrence constants r(k)=p(k)/p(k-1) at k = k1, k2, k4+1, k5+1 */
       r1 = my / k1;
       r2 = my / k2;
       r4 = my / (k4 + 1.0);
       r5 = my / (k5 + 1.0);
 
       /* reciprocal values of the scale parameters of exp. tail envelope */
-      ll =  log (r1);                                /* expon. tail left */
-      lr = -log (r5);                                /* expon. tail right*/
+      ll =  gnulib::log (r1);                        /* expon. tail left */
+      lr = -gnulib::log (r5);                        /* expon. tail right*/
 
       /* Poisson constants, necessary for computing function values f(k) */
-      l_my = log (my);
+      l_my = gnulib::log (my);
       c_pm = m * l_my - flogfak (m);
 
       /* function values f(k) = p(k)/p(m) at k = k2, k4, k1, k5          */
       f2 = f (k2, l_my, c_pm);
       f4 = f (k4, l_my, c_pm);
       f1 = f (k1, l_my, c_pm);
       f5 = f (k5, l_my, c_pm);
 
@@ -208,24 +208,24 @@ pprsc (double my)
     {
       /* generate uniform number U -- U(0, p6)                           */
       /* case distinction corresponding to U                             */
       if ((U = RUNI * p6) < p2)
         {                                            /* centre left      */
 
           /* immediate acceptance region
              R2 = [k2, m) *[0, f2),  X = k2, ... m -1 */
-          if ((V = U - p1) < 0.0)  return (k2 + floor (U/f2));
+          if ((V = U - p1) < 0.0)  return (k2 + gnulib::floor (U/f2));
           /* immediate acceptance region
              R1 = [k1, k2)*[0, f1),  X = k1, ... k2-1 */
-          if ((W = V / dl) < f1 )  return (k1 + floor (V/f1));
+          if ((W = V / dl) < f1 )  return (k1 + gnulib::floor (V/f1));
 
           /* computation of candidate X < k2, and its counterpart Y > k2 */
           /* either squeeze-acceptance of X or acceptance-rejection of Y */
-          Dk = floor (dl * RUNI) + 1.0;
+          Dk = gnulib::floor (dl * RUNI) + 1.0;
           if (W <= f2 - Dk * (f2 - f2/r2))
             {                                        /* quick accept of  */
               return (k2 - Dk);                      /* X = k2 - Dk      */
             }
           if ((V = f2 + f2 - W) < 1.0)
             {                                        /* quick reject of Y*/
               Y = k2 + Dk;
               if (V <= f2 + Dk * (1.0 - f2)/(dl + 1.0))
@@ -235,24 +235,24 @@ pprsc (double my)
               if (V <= f (Y, l_my, c_pm))  return (Y); /* final accept of Y*/
             }
           X = k2 - Dk;
         }
       else if (U < p4)
         {                                            /* centre right     */
           /*  immediate acceptance region
               R3 = [m, k4+1)*[0, f4), X = m, ... k4    */
-          if ((V = U - p3) < 0.0)  return (k4 - floor ((U - p2)/f4));
+          if ((V = U - p3) < 0.0)  return (k4 - gnulib::floor ((U - p2)/f4));
           /* immediate acceptance region
              R4 = [k4+1, k5+1)*[0, f5)                */
-          if ((W = V / dr) < f5 )  return (k5 - floor (V/f5));
+          if ((W = V / dr) < f5 )  return (k5 - gnulib::floor (V/f5));
 
           /* computation of candidate X > k4, and its counterpart Y < k4 */
           /* either squeeze-acceptance of X or acceptance-rejection of Y */
-          Dk = floor (dr * RUNI) + 1.0;
+          Dk = gnulib::floor (dr * RUNI) + 1.0;
           if (W <= f4 - Dk * (f4 - f4*r4))
             {                                        /* quick accept of  */
               return (k4 + Dk);                      /* X = k4 + Dk      */
             }
           if ((V = f4 + f4 - W) < 1.0)
             {                                        /* quick reject of Y*/
               Y = k4 - Dk;
               if (V <= f4 + Dk * (1.0 - f4)/ dr)
@@ -263,36 +263,36 @@ pprsc (double my)
             }
           X = k4 + Dk;
         }
       else
         {
           W = RUNI;
           if (U < p5)
             {                                        /* expon. tail left */
-              Dk = floor (1.0 - log (W)/ll);
+              Dk = gnulib::floor (1.0 - gnulib::log (W)/ll);
               if ((X = k1 - Dk) < 0L)  continue;     /* 0 <= X <= k1 - 1 */
               W *= (U - p4) * ll;                    /* W -- U(0, h(x))  */
               if (W <= f1 - Dk * (f1 - f1/r1))
                 return (X);                          /* quick accept of X*/
             }
           else
             {                                        /* expon. tail right*/
-              Dk = floor (1.0 - log (W)/lr);
+              Dk = gnulib::floor (1.0 - gnulib::log (W)/lr);
               X  = k5 + Dk;                          /* X >= k5 + 1      */
               W *= (U - p5) * lr;                    /* W -- U(0, h(x))  */
               if (W <= f5 - Dk * (f5 - f5*r5))
                 return (X);                          /* quick accept of X*/
             }
         }
 
       /* acceptance-rejection test of candidate X from the original area */
       /* test, whether  W <= f(k),    with  W = U*h(x)  and  U -- U(0, 1)*/
       /* log f(X) = (X - m)*log(my) - log X! + log m!                    */
-      if (log (W) <= X * l_my - flogfak (X) - c_pm)  return (X);
+      if (gnulib::log (W) <= X * l_my - flogfak (X) - c_pm)  return (X);
     }
 }
 /* ---- pprsc.c end ------ */
 
 
 /* The remainder of the file is by Paul Kienzle */
 
 /* Given uniform u, find x such that CDF(L,x)==u.  Return x. */
@@ -308,17 +308,17 @@ poisson_cdf_lookup (double lambda, doubl
    * in the range [0,1], then for lambda==10 we need a table
    * size of 46 instead.  For long doubles, the table size
    * will need to be longer still.  */
 #define TABLESIZE 46
   double t[TABLESIZE];
 
   /* Precompute the table for the u up to and including 0.458.
    * We will almost certainly need it. */
-  int intlambda = static_cast<int> (floor (lambda));
+  int intlambda = static_cast<int> (gnulib::floor (lambda));
   double P;
   int tableidx;
   size_t i = n;
 
   t[0] = P = exp (-lambda);
   for (tableidx = 1; tableidx <= intlambda; tableidx++)
     {
       P = P*lambda/static_cast<double> (tableidx);
@@ -371,17 +371,17 @@ poisson_cdf_lookup (double lambda, doubl
 
 static void
 poisson_cdf_lookup_float (double lambda, float *p, size_t n)
 {
   double t[TABLESIZE];
 
   /* Precompute the table for the u up to and including 0.458.
    * We will almost certainly need it. */
-  int intlambda = static_cast<int> (floor (lambda));
+  int intlambda = static_cast<int> (gnulib::floor (lambda));
   double P;
   int tableidx;
   size_t i = n;
 
   t[0] = P = exp (-lambda);
   for (tableidx = 1; tableidx <= intlambda; tableidx++)
     {
       P = P*lambda/static_cast<double> (tableidx);
@@ -414,57 +414,57 @@ poisson_cdf_lookup_float (double lambda,
     }
 }
 
 /* From Press, et al., Numerical Recipes */
 static void
 poisson_rejection (double lambda, double *p, size_t n)
 {
   double sq = sqrt (2.0*lambda);
-  double alxm = log (lambda);
+  double alxm = gnulib::log (lambda);
   double g = lambda*alxm - LGAMMA(lambda+1.0);
   size_t i;
 
   for (i = 0; i < n; i++)
     {
       double y, em, t;
       do
         {
           do
             {
               y = tan (M_PI*RUNI);
               em = sq * y + lambda;
             } while (em < 0.0);
-          em = floor (em);
+          em = gnulib::floor (em);
           t = 0.9*(1.0+y*y)*exp (em*alxm-flogfak (em)-g);
         } while (RUNI > t);
       p[i] = em;
     }
 }
 
 /* From Press, et al., Numerical Recipes */
 static void
 poisson_rejection_float (double lambda, float *p, size_t n)
 {
   double sq = sqrt (2.0*lambda);
-  double alxm = log (lambda);
+  double alxm = gnulib::log (lambda);
   double g = lambda*alxm - LGAMMA(lambda+1.0);
   size_t i;
 
   for (i = 0; i < n; i++)
     {
       double y, em, t;
       do
         {
           do
             {
               y = tan (M_PI*RUNI);
               em = sq * y + lambda;
             } while (em < 0.0);
-          em = floor (em);
+          em = gnulib::floor (em);
           t = 0.9*(1.0+y*y)*exp (em*alxm-flogfak (em)-g);
         } while (RUNI > t);
       p[i] = em;
     }
 }
 
 /* The cutoff of L <= 1e8 in the following two functions before using
  * the normal approximation is based on:
@@ -495,17 +495,17 @@ oct_fill_randp (double L, octave_idx_typ
         p[i] = pprsc (L);
     }
   else
     {
       /* normal approximation: from Phys. Rev. D (1994) v50 p1284 */
       const double sqrtL = sqrt (L);
       for (i = 0; i < n; i++)
         {
-          p[i] = floor (RNOR*sqrtL + L + 0.5);
+          p[i] = gnulib::floor (RNOR*sqrtL + L + 0.5);
           if (p[i] < 0.0)
             p[i] = 0.0; /* will probably never happen */
         }
     }
 }
 
 /* Generate one poisson variate */
 double
@@ -535,17 +535,17 @@ oct_randp (double L)
     {
       /* FIXME: R uses NaN, but the normal approximation suggests that
        * limit should be Inf.  Which is correct? */
       ret = octave::numeric_limits<double>::NaN ();
     }
   else
     {
       /* normal approximation: from Phys. Rev. D (1994) v50 p1284 */
-      ret = floor (RNOR*sqrt (L) + L + 0.5);
+      ret = gnulib::floor (RNOR*sqrt (L) + L + 0.5);
       if (ret < 0.0) ret = 0.0; /* will probably never happen */
     }
   return ret;
 }
 
 /* Generate a set of poisson numbers with the same distribution */
 void
 oct_fill_float_randp (float FL, octave_idx_type n, float *p)
@@ -567,17 +567,17 @@ oct_fill_float_randp (float FL, octave_i
         p[i] = pprsc (L);
     }
   else
     {
       /* normal approximation: from Phys. Rev. D (1994) v50 p1284 */
       const double sqrtL = sqrt (L);
       for (i = 0; i < n; i++)
         {
-          p[i] = floor (RNOR*sqrtL + L + 0.5);
+          p[i] = gnulib::floor (RNOR*sqrtL + L + 0.5);
           if (p[i] < 0.0)
             p[i] = 0.0; /* will probably never happen */
         }
     }
 }
 
 /* Generate one poisson variate */
 float
@@ -608,13 +608,13 @@ oct_float_randp (float FL)
     {
       /* FIXME: R uses NaN, but the normal approximation suggests that
        * limit should be Inf. Which is correct? */
       ret = octave::numeric_limits<float>::NaN ();
     }
   else
     {
       /* normal approximation: from Phys. Rev. D (1994) v50 p1284 */
-      ret = floor (RNOR*sqrt (L) + L + 0.5);
+      ret = gnulib::floor (RNOR*sqrt (L) + L + 0.5);
       if (ret < 0.0) ret = 0.0; /* will probably never happen */
     }
   return ret;
 }
