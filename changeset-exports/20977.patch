# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1450975377 18000
#      Thu Dec 24 11:42:57 2015 -0500
# Node ID c6a1705107356fee36c400f5a1c7fb7bfa54f3b5
# Parent  0fd972b06a6f8093464357206140d7cc5d7385ab
maint: pt-idx.cc, pt-assign.cc: invert if/else/error instances.

diff --git a/libinterp/parse-tree/pt-assign.cc b/libinterp/parse-tree/pt-assign.cc
--- a/libinterp/parse-tree/pt-assign.cc
+++ b/libinterp/parse-tree/pt-assign.cc
@@ -79,20 +79,20 @@ tree_simple_assignment::rvalue1 (int)
 
       if (rhs_val.is_undefined ())
         error ("value on right hand side of assignment is undefined");
 
       if (rhs_val.is_cs_list ())
         {
           const octave_value_list lst = rhs_val.list_value ();
 
-          if (! lst.empty ())
-            rhs_val = lst(0);
-          else
+          if (lst.empty ())
             error ("invalid number of elements on RHS of assignment");
+
+          rhs_val = lst(0);
         }
 
       try
         {
           octave_lvalue ult = lhs->lvalue ();
 
           if (ult.numel () != 1)
             gripe_nonbraced_cs_list_assignment ();
@@ -257,30 +257,28 @@ tree_multi_assignment::rvalue (int)
                   ult.define (Cell (1, 1));
 
                   ult.clear_index ();
                   std::list<octave_value_list> idx;
                   idx.push_back (octave_value_list (octave_value (1)));
                   ult.set_index ("{", idx);
                 }
 
-              if (k + nel <= n)
-                {
-                  // This won't do a copy.
-                  octave_value_list ovl  = rhs_val.slice (k, nel);
+              if (k + nel > n)
+                error ("some elements undefined in return list");
+
+              // This won't do a copy.
+              octave_value_list ovl  = rhs_val.slice (k, nel);
 
-                  ult.assign (octave_value::op_asn_eq,
-                              octave_value (ovl, true));
-
-                  retval_list.push_back (ovl);
+              ult.assign (octave_value::op_asn_eq,
+                          octave_value (ovl, true));
 
-                  k += nel;
-                }
-              else
-                error ("some elements undefined in return list");
+              retval_list.push_back (ovl);
+
+              k += nel;
             }
           else
             {
               if (k < n)
                 {
                   ult.assign (octave_value::op_asn_eq, rhs_val(k));
 
                   if (ult.is_black_hole ())
diff --git a/libinterp/parse-tree/pt-idx.cc b/libinterp/parse-tree/pt-idx.cc
--- a/libinterp/parse-tree/pt-idx.cc
+++ b/libinterp/parse-tree/pt-idx.cc
@@ -496,37 +496,36 @@ tree_index_expression::lvalue (void)
           try
             {
               tmp = tmp.subsref (type.substr (tmpi, i-tmpi), tmpidx, true);
             }
           catch (index_exception& e)  // problems with range, invalid type etc.
             {
               final_index_error (e, expr);
             }
+
           tmpidx.clear ();
         }
 
       switch (type[i])
         {
         case '(':
           {
             octave_value_list tidx
               = make_value_list (*p_args, *p_arg_nm, &tmp, false);
 
             idx.push_back (tidx);
 
             if (i < n - 1)
               {
-                if (type[i+1] == '.')
-                  {
-                    tmpidx.push_back (tidx);
-                    tmpi = i+1;
-                  }
-                else
+                if (type[i+1] != '.')
                   error ("() must be followed by . or close the index chain");
+
+                tmpidx.push_back (tidx);
+                tmpi = i+1;
               }
           }
           break;
 
         case '{':
           {
             octave_value_list tidx
               = make_value_list (*p_args, *p_arg_nm, &tmp, false);
