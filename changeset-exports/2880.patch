# HG changeset patch
# User jwe
# Date 861875261 0
#      Thu Apr 24 09:47:41 1997 +0000
# Node ID 0a076230ca87f53167e58597342b183d2681a0d9
# Parent  4309724baab6825fc98efa37f657c20a5fe340f4
[project @ 1997-04-24 09:47:41 by jwe]

diff --git a/src/ov.cc b/src/ov.cc
--- a/src/ov.cc
+++ b/src/ov.cc
@@ -37,21 +37,23 @@ Software Foundation, 59 Temple Place - S
 #include "ov-scalar.h"
 #include "ov-re-mat.h"
 #include "ov-complex.h"
 #include "ov-cx-mat.h"
 #include "ov-ch-mat.h"
 #include "ov-str-mat.h"
 #include "ov-range.h"
 #include "ov-struct.h"
+#include "ov-list.h"
 #include "ov-colon.h"
 #include "ov-va-args.h"
 #include "ov-typeinfo.h"
 
 #include "defun.h"
+#include "error.h"
 #include "gripes.h"
 #include "pager.h"
 #include "pr-output.h"
 #include "utils.h"
 #include "variables.h"
 
 // We are likely to have a lot of octave_value objects to allocate, so
 // make the grow_size large.
@@ -119,16 +121,33 @@ increment_struct_indent (void)
 }
 
 void
 decrement_struct_indent (void)
 {
   struct_indent -= 2;
 }
 
+// Indentation level for lists.
+int list_indent = 0;
+
+void
+increment_list_indent (void)
+{
+  list_indent += 2;
+}
+
+void
+decrement_list_indent (void)
+{
+  list_indent -= 2;
+}
+
+// XXX FIXME XXX
+
 // Octave's value type.
 
 string
 octave_value::binary_op_as_string (binary_op op)
 {
   string retval;
 
   switch (op)
@@ -211,16 +230,66 @@ octave_value::binary_op_as_string (binar
 
     default:
       retval = "<unknown>";
     }
 
   return retval;
 }
 
+string
+octave_value::assign_op_as_string (assign_op op)
+{
+  string retval;
+
+  switch (op)
+    {
+    case asn_eq:
+      retval = "=";
+      break;
+
+    case add_eq:
+      retval = "+=";
+      break;
+
+    case sub_eq:
+      retval = "-=";
+      break;
+
+    case mul_eq:
+      retval = "*=";
+      break;
+
+    case div_eq:
+      retval = "/=";
+      break;
+
+    case el_mul_eq:
+      retval = ".*=";
+      break;
+
+    case el_div_eq:
+      retval = "./=";
+      break;
+
+    case el_and_eq:
+      retval = "&=";
+      break;
+
+    case el_or_eq:
+      retval = "|=";
+      break;
+
+    default:
+      retval = "<unknown>";
+    }
+
+  return retval;
+}
+
 octave_value::octave_value (void)
   : rep (new octave_base_value ())
 {
   rep->count = 1;
 }
 
 octave_value::octave_value (double d)
   : rep (new octave_scalar (d))
@@ -350,17 +419,23 @@ octave_value::octave_value (const Range&
   rep->count = 1;
   maybe_mutate ();
 }
 
 octave_value::octave_value (const Octave_map& m)
   : rep (new octave_struct (m))
 {
   rep->count = 1;
- }
+}
+
+octave_value::octave_value (const octave_value_list& l)
+  : rep (new octave_list (l))
+{
+  rep->count = 1;
+}
 
 octave_value::octave_value (octave_value::magic_colon)
   : rep (new octave_magic_colon ())
 {
   rep->count = 1;
 }
 
 octave_value::octave_value (octave_value::all_va_args)
@@ -384,16 +459,22 @@ octave_value::~octave_value (void)
 
   if (rep && --rep->count == 0)
     {
       delete rep;
       rep = 0;
     }
 }
 
+octave_value *
+octave_value::clone (void)
+{
+  panic_impossible ();
+}
+
 void
 octave_value::maybe_mutate (void)
 {
   octave_value *tmp = rep->try_narrowing_conversion ();
 
   if (tmp && tmp != rep)
     {
       if (--rep->count == 0)
@@ -407,25 +488,35 @@ octave_value::maybe_mutate (void)
 static void
 gripe_no_conversion (const string& tn1, const string& tn2)
 {
   error ("no suitable conversion found for assignment of %s to indexed %s",
 	 tn2.c_str (), tn1.c_str ());
 }
 
 octave_value&
-octave_value::assign (const octave_value_list& idx, const octave_value& rhs)
+octave_value::assign (assign_op, const octave_value& rhs)
+{
+  // XXX FIXME XXX -- make this work for ops other than `='.
+
+  return operator = (rhs);
+}
+
+octave_value&
+octave_value::assign (octave_value::assign_op op,
+		      const octave_value_list& idx,
+		      const octave_value& rhs)
 {
   make_unique ();
 
-  bool assignment_ok = try_assignment (idx, rhs);
+  bool assignment_ok = try_assignment (op, idx, rhs);
 
   if (! (error_state || assignment_ok))
     {
-      assignment_ok = try_assignment_with_conversion (idx, rhs);
+      assignment_ok = try_assignment_with_conversion (op,idx, rhs);
 
       if (! (error_state || assignment_ok))
 	gripe_no_conversion (type_name (), rhs.type_name ());
     }
 
   if (! error_state)
     maybe_mutate ();
 
@@ -433,16 +524,22 @@ octave_value::assign (const octave_value
 }
 
 Octave_map
 octave_value::map_value (void) const
 {
   return rep->map_value ();
 }
 
+octave_value_list
+octave_value::list_value (void) const
+{
+  return rep->list_value ();
+}
+
 ColumnVector
 octave_value::vector_value (bool force_string_conv,
 			    bool force_vector_conversion) const
 {
   ColumnVector retval;
 
   Matrix m = matrix_value (force_string_conv);
 
@@ -590,17 +687,18 @@ gripe_indexed_assignment (const string& 
 static void
 gripe_conversion_failed (const string& tn1, const string& tn2)
 {
   error ("type conversion for assignment of %s to indexed %s failed",
 	 tn2.c_str (), tn1.c_str ());
 }
 
 bool
-octave_value::convert_and_assign (const octave_value_list& idx,
+octave_value::convert_and_assign (octave_value::assign_op op,
+				  const octave_value_list& idx,
 				  const octave_value& rhs)
 {
   bool assignment_ok = false;
 
   int t_lhs = type_id ();
   int t_rhs = rhs.type_id ();
 
   int t_result
@@ -616,17 +714,17 @@ octave_value::convert_and_assign (const 
 	  octave_value *tmp = cf (*rep);
 
 	  if (tmp)
 	    {
 	      octave_value *old_rep = rep;
 	      rep = tmp;
 	      rep->count = 1;
 
-	      assignment_ok = try_assignment (idx, rhs);
+	      assignment_ok = try_assignment (op, idx, rhs);
 
 	      if (! assignment_ok && old_rep)
 		{
 		  if (--rep->count == 0)
 		    delete rep;
 
 		  rep = old_rep;
 		  old_rep = 0;
@@ -641,20 +739,21 @@ octave_value::convert_and_assign (const 
       else
 	gripe_indexed_assignment (type_name (), rhs.type_name ());
     }
 
   return (assignment_ok && ! error_state);
 }
 
 bool
-octave_value::try_assignment_with_conversion (const octave_value_list& idx,
+octave_value::try_assignment_with_conversion (octave_value::assign_op op,
+					      const octave_value_list& idx,
 					      const octave_value& rhs)
 {
-  bool assignment_ok = convert_and_assign (idx, rhs);
+  bool assignment_ok = convert_and_assign (op, idx, rhs);
 
   if (! (error_state || assignment_ok))
     {
       octave_value tmp_rhs;
       type_conv_fcn cf_rhs = rhs.numeric_conversion_function ();
 
       if (cf_rhs)
 	tmp_rhs = octave_value (cf_rhs (*rhs.rep));
@@ -668,20 +767,20 @@ octave_value::try_assignment_with_conver
 	{
 	  old_rep = rep;
 	  rep = cf_this (*rep);
 	  rep->count = 1;
 	}
 
       if (cf_this || cf_rhs)
 	{
-	  assignment_ok = try_assignment (idx, tmp_rhs);
+	  assignment_ok = try_assignment (op, idx, tmp_rhs);
 
 	  if (! (error_state || assignment_ok))
-	    assignment_ok = convert_and_assign (idx, tmp_rhs);
+	    assignment_ok = convert_and_assign (op, idx, tmp_rhs);
 	}
 
       if (! assignment_ok && old_rep)
 	{
 	  if (--rep->count == 0)
 	    delete rep;
 
 	  rep = old_rep;
@@ -691,25 +790,27 @@ octave_value::try_assignment_with_conver
       if (old_rep && --old_rep->count == 0)
 	delete old_rep;
     }
 
   return (assignment_ok && ! error_state);
 }
 
 bool
-octave_value::try_assignment (const octave_value_list& idx,
+octave_value::try_assignment (octave_value::assign_op op,
+			      const octave_value_list& idx,
 			      const octave_value& rhs)
 {
   bool retval = false;
 
   int t_lhs = type_id ();
   int t_rhs = rhs.type_id ();
 
-  assign_op_fcn f = octave_value_typeinfo::lookup_assign_op (t_lhs, t_rhs);
+  assign_op_fcn f
+    = octave_value_typeinfo::lookup_assign_op (op, t_lhs, t_rhs);
 
   if (f)
     {
       f (*rep, idx, *(rhs.rep));
 
       retval = (! error_state);
     }
 
@@ -788,16 +889,17 @@ install_types (void)
   octave_matrix::register_type ();
   octave_complex_matrix::register_type ();
   octave_range::register_type ();
   octave_bool::register_type ();
   octave_bool_matrix::register_type ();
   octave_char_matrix::register_type ();
   octave_char_matrix_str::register_type ();
   octave_struct::register_type ();
+  octave_list::register_type ();
   octave_all_va_args::register_type ();
   octave_magic_colon::register_type ();
 }
 
 static int
 do_fortran_indexing (void)
 {
   Vdo_fortran_indexing = check_preference ("do_fortran_indexing");
diff --git a/src/ov.h b/src/ov.h
--- a/src/ov.h
+++ b/src/ov.h
@@ -32,21 +32,19 @@ Software Foundation, 59 Temple Place - S
 #include <string>
 
 class ostream;
 
 #include "Range.h"
 #include "idx-vector.h"
 #include "mx-base.h"
 #include "oct-alloc.h"
+#include "oct-sym.h"
 #include "str-vec.h"
 
-#include "error.h"
-#include "pt-exp.h"
-
 class Octave_map;
 class octave_value_list;
 
 // Constants.
 
 // This just provides a way to avoid infinite recursion when building
 // octave_value objects.
 
@@ -68,17 +66,17 @@ typedef octave_value (*binary_op_fcn)
   (const octave_value&, const octave_value&);
 
 typedef octave_value (*assign_op_fcn)
   (octave_value&, const octave_value_list&, const octave_value&);
 
 typedef octave_value * (*type_conv_fcn) (const octave_value&);
 
 class
-octave_value
+octave_value : public octave_symbol
 {
 public:
 
   enum binary_op
   {
     add,
     sub,
     mul,
@@ -97,18 +95,35 @@ public:
     el_ldiv,
     el_and,
     el_or,
     struct_ref,
     num_binary_ops,
     unknown_binary_op
   };
 
+  enum assign_op
+  {
+    asn_eq,
+    add_eq,
+    sub_eq,
+    mul_eq,
+    div_eq,
+    el_mul_eq,
+    el_div_eq,
+    el_and_eq,
+    el_or_eq,
+    num_assign_ops,
+    unknown_assign_op
+  };
+
   static string binary_op_as_string (binary_op);
 
+  static string assign_op_as_string (assign_op);
+
   enum magic_colon { magic_colon_t };
   enum all_va_args { all_va_args_t };
 
   octave_value (void);
   octave_value (double d);
   octave_value (const Matrix& m);
   octave_value (const DiagMatrix& d);
   octave_value (const RowVector& v, int pcv = -1);
@@ -122,16 +137,17 @@ public:
   octave_value (const boolMatrix& bm);
   octave_value (const char *s);
   octave_value (const string& s);
   octave_value (const string_vector& s);
   octave_value (const charMatrix& chm, bool is_string = false);
   octave_value (double base, double limit, double inc);
   octave_value (const Range& r);
   octave_value (const Octave_map& m);
+  octave_value (const octave_value_list& m);
   octave_value (octave_value::magic_colon);
   octave_value (octave_value::all_va_args);
 
   octave_value (octave_value *new_rep);
 
   // Copy constructor.
 
   octave_value (const octave_value& a)
@@ -142,17 +158,17 @@ public:
 
   // Delete the representation of this constant if the count drops to
   // zero.
 
   virtual ~octave_value (void);
 
   // This should only be called for derived types.
 
-  virtual octave_value *clone (void) { panic_impossible (); }
+  virtual octave_value *clone (void);
 
   void make_unique (void)
     {
       if (rep->count > 1)
 	{
 	  --rep->count;
 	  rep = rep->clone ();
 	  rep->count = 1;
@@ -187,17 +203,20 @@ public:
   void maybe_mutate (void);
 
   virtual octave_value *try_narrowing_conversion (void)
     { return rep->try_narrowing_conversion (); }
 
   virtual octave_value index (const octave_value_list& idx) const
     { return rep->index (idx); }
 
-  octave_value& assign (const octave_value_list& idx, const octave_value& rhs);
+  octave_value& assign (assign_op, const octave_value& rhs);
+
+  octave_value& assign (assign_op, const octave_value_list& idx,
+			const octave_value& rhs);
 
   virtual idx_vector index_vector (void) const
     { return rep->index_vector (); }
 
   virtual octave_value
   struct_elt_val (const string& nm, bool silent = false) const
     { return rep->struct_elt_val (nm, silent); }
 
@@ -241,16 +260,19 @@ public:
     { return rep->is_string (); }
 
   virtual bool is_range (void) const
     { return rep->is_range (); }
 
   virtual bool is_map (void) const
     { return rep->is_map (); }
 
+  virtual bool is_list (void) const
+    { return rep->is_list (); }
+
   virtual bool is_magic_colon (void) const
     { return rep->is_magic_colon (); }
 
   virtual bool is_all_va_args (void) const
     { return rep->is_all_va_args (); }
 
   // Are any or all of the elements in this constant nonzero?
 
@@ -321,16 +343,18 @@ public:
   virtual string string_value (void) const
     { return rep->string_value (); }
 
   virtual Range range_value (void) const
     { return rep->range_value (); }
 
   virtual Octave_map map_value (void) const;
 
+  virtual octave_value_list list_value (void) const;
+
   virtual bool bool_value (void) const
     { return rep->bool_value (); }
 
   virtual boolMatrix bool_matrix_value (void) const
     { return rep->bool_matrix_value (); }
 
   // Unary ops.
 
@@ -404,23 +428,24 @@ private:
   static octave_allocator allocator;
 
   union
     {
       octave_value *rep;      // The real representation.
       int count;              // A reference count.
     };
 
-  bool convert_and_assign (const octave_value_list& idx,
+  bool convert_and_assign (assign_op, const octave_value_list& idx,
 			   const octave_value& rhs);
 
-  bool try_assignment_with_conversion (const octave_value_list& idx,
+  bool try_assignment_with_conversion (assign_op,
+				       const octave_value_list& idx,
 				       const octave_value& rhs);
 
-  bool try_assignment (const octave_value_list& idx,
+  bool try_assignment (assign_op, const octave_value_list& idx,
 		       const octave_value& rhs);
 };
 
 // If TRUE, allow assignments like
 //
 //   octave> A(1) = 3; A(2) = 5
 //
 // for A already defined and a matrix type.
@@ -467,21 +492,27 @@ extern bool Vresize_on_range_error;
 extern int Vstruct_levels_to_print;
 
 // Allow divide by zero errors to be suppressed.
 extern bool Vwarn_divide_by_zero;
 
 // Indentation level for structures.
 extern int struct_indent;
 
-extern void symbols_of_value (void);
-
 extern void increment_struct_indent (void);
 extern void decrement_struct_indent (void);
 
+// Indentation level for lists.
+extern int list_indent;
+
+extern void increment_list_indent (void);
+extern void decrement_list_indent (void);
+
+extern void symbols_of_value (void);
+
 extern void install_types (void);
 
 #endif
 
 /*
 ;; Local Variables: ***
 ;; mode: C++ ***
 ;; End: ***
