# HG changeset patch
# User Markus MÃ¼tzel <markus.muetzel@gmx.de>
# Date 1541256164 -3600
#      Sat Nov 03 15:42:44 2018 +0100
# Node ID 50583f514ae490deebb8ca1c9ee832073b132c69
# Parent  390d597177111df77d234774909fbc320057460c
Add function to manually trigger calculation of [Vertex|Face]Normals (bug #54922).

* graphics.cc (F__update_normals__): Add function to manually trigger
calculation of normals.

* graphics.in.h (update_normals, update_face_normals, update_vertex_normals
of surface::properties and patch::properties): Add argument to force
auto-calculation of face and vertex normals.

* surfl.m: Call __update_normals__ before getting vertex normals.

* NEWS: Explain conditions for automatic normals calculations.

diff --git a/NEWS b/NEWS
--- a/NEWS
+++ b/NEWS
@@ -56,18 +56,21 @@ Summary of important user-visible change
  ** Figure graphic objects have a new property "Number" which is
     read-only and will return the handle (number) of the figure.
     However, if the property "IntegerHandle" has been set to "off" then
     the property will return an empty matrix ([]).
 
  ** Patch and surface graphic objects now use the "FaceNormals" property
     for flat lighting.
 
- ** "FaceNormals" and "EdgeNormals" for patch and surface graphic
-    objects are now calculated automatically if necessary.
+ ** "FaceNormals" and "VertexNormals" for patch and surface graphic
+    objects are now calculated automatically if necessary.  The
+    "FaceLighting" property must be set to "flat" (FaceNormals) or
+    "gouraud" (VertexNormals), AND a light object must be present in the
+    axes, before any normals will be calculated.
 
  ** Printing to raster formats now uses an opengl based method by default.
     The print options "-opengl" and "-painters" have been added (for "qt"
     toolkit only) and the corresponding figure properties "renderer" and 
     "renderermode" are now also used when printing.
 
  ** The print option "-RGBImage" has been added. It allows for retrieving
     image pixels of a formated figure instead of printing to raster format.
diff --git a/libinterp/corefcn/graphics.cc b/libinterp/corefcn/graphics.cc
--- a/libinterp/corefcn/graphics.cc
+++ b/libinterp/corefcn/graphics.cc
@@ -9538,19 +9538,19 @@ cross_product (double x1, double y1, dou
 }
 
 void
 patch::properties::calc_face_normals (Matrix& fn)
 {
   Matrix v = get_vertices ().matrix_value ();
   Matrix f = get_faces ().matrix_value ();
 
-  bool is_3d = (v.columns () == 3); // 2d or 3d patches
-  octave_idx_type num_f = f.rows (); // number of faces
-  octave_idx_type max_nc = f.columns (); // maximum number of polygon corners
+  bool is_3d = (v.columns () == 3);   // 2D or 3D patches
+  octave_idx_type num_f = f.rows ();  // number of faces
+  octave_idx_type max_nc = f.columns ();  // max. number of polygon corners
 
   // In which cases can we skip updating the normals?
   if (max_nc < 3)
     {
       fn = Matrix ();
       return;
     }
 
@@ -9636,68 +9636,68 @@ patch::properties::calc_face_normals (Ma
           fn(i,j) = 0.0;
       else
         for (octave_idx_type j = 0; j < 3; j++)
           fn(i,j) = fnc(j) / n_len;
     }
 }
 
 void
-patch::properties::update_face_normals (bool reset)
+patch::properties::update_face_normals (bool reset, bool force)
 {
   if (updating_patch_data || ! facenormalsmode_is ("auto"))
     return;
 
-  if ((facelighting_is ("flat") || edgelighting_is ("flat")) &&
-      get_do_lighting ())
+  if (force || ((facelighting_is ("flat") || edgelighting_is ("flat")) &&
+                get_do_lighting ()))
     {
       Matrix f = get_faces ().matrix_value ();
 
-      octave_idx_type num_f = f.rows (); // number of faces
+      octave_idx_type num_f = f.rows ();  // number of faces
       Matrix fn (num_f, 3, 0.0);
 
       calc_face_normals (fn);
       facenormals = fn;
     }
   else if (reset)
     facenormals = Matrix ();
 }
 
 void
-patch::properties::update_vertex_normals (bool reset)
+patch::properties::update_vertex_normals (bool reset, bool force)
 {
   if (updating_patch_data || ! vertexnormalsmode_is ("auto"))
     return;
 
-  if ((facelighting_is ("gouraud") || facelighting_is ("phong") ||
-      edgelighting_is ("gouraud") || edgelighting_is ("phong")) &&
-      get_do_lighting ())
+  if (force || ((facelighting_is ("gouraud") || facelighting_is ("phong")
+                 || edgelighting_is ("gouraud") || edgelighting_is ("phong"))
+                && get_do_lighting ()))
     {
       Matrix v = get_vertices ().matrix_value ();
       Matrix f = get_faces ().matrix_value ();
 
-      octave_idx_type num_v = v.rows (); // number of vertices
-      octave_idx_type num_f = f.rows (); // number of faces
-      octave_idx_type max_nc = f.columns (); // maximum number of polygon corners
+      octave_idx_type num_v = v.rows ();  // number of vertices
+      octave_idx_type num_f = f.rows ();  // number of faces
+      octave_idx_type max_nc = f.columns ();  // max. number of polygon corners
 
       // In which cases can we skip updating the normals?
       if (max_nc < 3)
         return;
 
       // First step: Calculate the normals for all faces
       Matrix fn = get_facenormals ().matrix_value ();
       if ( fn.isempty () )
         {
           // calculate facenormals here
           fn = Matrix (num_f, 3, 0.0);
           calc_face_normals (fn);
         }
 
       // Second step: assign normals to the respective vertices
-      std::vector<RowVector> vec_vn [num_v]; // list of normals for vertices
+      std::vector<RowVector> vec_vn [num_v];  // list of normals for vertices
       for (octave_idx_type i = 0; i < num_f; i++)
         {
           // get number of corners
           octave_idx_type nc = 3;
           if (max_nc > 3)
             {
               while (! octave::math::isnan (f(i,nc)) && nc < max_nc)
                 nc++;
@@ -9794,23 +9794,23 @@ surface::properties::get_do_lighting (vo
   graphics_object go = gh_manager::get_object (get___myhandle__ ());
   axes::properties& ax_prop = dynamic_cast<axes::properties&>
     (go.get_ancestor ("axes").get_properties ());
 
   return (ax_prop.get_num_lights () > 0);
 }
 
 void
-surface::properties::update_face_normals (bool reset)
+surface::properties::update_face_normals (bool reset, bool force)
 {
   if (! facenormalsmode_is ("auto"))
     return;
 
-  if ((facelighting_is ("flat") || edgelighting_is ("flat")) &&
-      get_do_lighting ())
+  if (force || ((facelighting_is ("flat") || edgelighting_is ("flat")) &&
+                get_do_lighting ()))
     {
       Matrix x = get_xdata ().matrix_value ();
       Matrix y = get_ydata ().matrix_value ();
       Matrix z = get_zdata ().matrix_value ();
 
       int p = z.columns ();
       int q = z.rows ();
 
@@ -9874,24 +9874,24 @@ surface::properties::update_face_normals
         }
       facenormals = n;
     }
   else if (reset)
     facenormals = Matrix ();
 }
 
 void
-surface::properties::update_vertex_normals (bool reset)
+surface::properties::update_vertex_normals (bool reset, bool force)
 {
   if (! vertexnormalsmode_is ("auto"))
     return;
 
-  if ((facelighting_is ("gouraud") || facelighting_is ("phong") ||
+  if (force || ((facelighting_is ("gouraud") || facelighting_is ("phong") ||
       edgelighting_is ("gouraud") || edgelighting_is ("phong")) &&
-      get_do_lighting ())
+      get_do_lighting ()))
     {
       Matrix x = get_xdata ().matrix_value ();
       Matrix y = get_ydata ().matrix_value ();
       Matrix z = get_zdata ().matrix_value ();
 
       int p = z.columns ();
       int q = z.rows ();
 
@@ -9971,16 +9971,81 @@ surface::properties::update_vertex_norma
             }
         }
       vertexnormals = n;
     }
   else if (reset)
     vertexnormals = Matrix ();
 }
 
+DEFUN (__update_normals__, args, ,
+       doc: /* -*- texinfo -*-
+@deftypefn {} {} __update_normals__ (@var{h})
+Update FaceNormals and VertexNormals of the patch or surface referred to by
+@var{h}.
+
+@end deftypefn */)
+{
+  gh_manager::auto_lock guard;
+
+  if (args.length () != 1)
+    print_usage ();
+
+  octave_value val = args(0);
+
+  graphics_object go = gh_manager::get_object (val);
+
+  if (go.isa ("surface"))
+    {
+      surface::properties& props =
+        dynamic_cast <surface::properties&> (go.get_properties ());
+      props.update_normals (false, true);
+    }
+  else if (go.isa ("patch"))
+    {
+      patch::properties& props =
+        dynamic_cast <patch::properties&> (go.get_properties ());
+      props.update_normals (false, true);
+    }
+  else
+    error ("__update_normals__: "
+           "H must be a handle to a valid surface or patch object.");
+
+  return ovl ();
+}
+
+/*
+%!test
+%! hf = figure ("visible", "off");
+%! unwind_protect
+%!   Z = peaks ();
+%!   hs = surf (Z, "facelighting", "none");
+%!   assert (isempty (get (hs, "vertexnormals")));
+%!   assert (isempty (get (hs, "facenormals")));
+%!   __update_normals__ (hs);
+%!   assert (! isempty (get (hs, "vertexnormals")));
+%!   assert (! isempty (get (hs, "facenormals")));
+%! unwind_protect_cleanup
+%!   close (hf);
+%! end_unwind_protect
+
+%!test
+%! hf = figure ("visible", "off");
+%! unwind_protect
+%!   hp = patch ("facelighting", "none");
+%!   assert (isempty (get (hp, "vertexnormals")));
+%!   assert (isempty (get (hp, "facenormals")));
+%!   __update_normals__ (hp);
+%!   assert (! isempty (get (hp, "vertexnormals")));
+%!   assert (! isempty (get (hp, "facenormals")));
+%! unwind_protect_cleanup
+%!   close (hf);
+%! end_unwind_protect
+*/
+
 // ---------------------------------------------------------------------
 
 void
 hggroup::properties::remove_child (const graphics_handle& h)
 {
   graphics_object go = gh_manager::get_object (h);
   if (go.isa ("light") && go.get_properties ().is_visible ())
     {
@@ -13317,17 +13382,17 @@ In all cases, typing CTRL-C stops progra
             {
               if (! pname.empty () && waitfor_results[id])
                 break;
             }
           else
             break;
         }
 
-      octave::sleep (0.1); // FIXME: really needed?
+      octave::sleep (0.1);  // FIXME: really needed?
 
       octave_quit ();
 
       octave::command_editor::run_event_hooks ();
 
       if (timeout > 0)
         {
           octave::sys::time now;
diff --git a/libinterp/corefcn/graphics.in.h b/libinterp/corefcn/graphics.in.h
--- a/libinterp/corefcn/graphics.in.h
+++ b/libinterp/corefcn/graphics.in.h
@@ -4871,20 +4871,20 @@ public:
       specularcolorreflectance.add_constraint ("min", 0.0, true);
       specularcolorreflectance.add_constraint ("max", 1.0, true);
       specularexponent.add_constraint ("min", 0.0, false);
       specularstrength.add_constraint ("min", 0.0, true);
       specularstrength.add_constraint ("max", 1.0, true);
     }
 
   public:
-    void update_normals (bool reset)
+    void update_normals (bool reset, bool force = false)
     {
-      update_face_normals (reset);
-      update_vertex_normals (reset);
+      update_face_normals (reset, force);
+      update_vertex_normals (reset, force);
     }
 
 
   private:
     std::string bad_data_msg;
 
     void update_faces (void) { update_data ();}
 
@@ -4949,18 +4949,18 @@ public:
         set_clim (cdata.get_limits ());
       else
         clim = cdata.get_limits ();
     }
 
     void update_data (void);
 
     void calc_face_normals (Matrix& normals);
-    void update_face_normals (bool reset);
-    void update_vertex_normals (bool reset);
+    void update_face_normals (bool reset, bool force = false);
+    void update_vertex_normals (bool reset, bool force = false);
 
     void update_edgelighting (void)
     {
       update_face_normals (false);
     }
 
     void update_facelighting (void)
     {
@@ -5116,20 +5116,20 @@ public:
       specularcolorreflectance.add_constraint ("min", 0.0, true);
       specularcolorreflectance.add_constraint ("max", 1.0, true);
       specularexponent.add_constraint ("min", 0.0, false);
       specularstrength.add_constraint ("min", 0.0, true);
       specularstrength.add_constraint ("max", 1.0, true);
     }
 
   public:
-    void update_normals (bool reset)
+    void update_normals (bool reset, bool force = false)
     {
-      update_face_normals (reset);
-      update_vertex_normals (reset);
+      update_face_normals (reset, force);
+      update_vertex_normals (reset, force);
     }
 
 
   private:
     void update_alphadata (void)
     {
       if (alphadatamapping_is ("scaled"))
         set_alim (alphadata.get_limits ());
@@ -5158,18 +5158,18 @@ public:
     }
 
     void update_zdata (void)
     {
       update_normals (true);
       set_zlim (zdata.get_limits ());
     }
 
-    void update_face_normals (bool reset);
-    void update_vertex_normals (bool reset);
+    void update_face_normals (bool reset, bool force = false);
+    void update_vertex_normals (bool reset, bool force = false);
 
     void update_facenormalsmode (void)
     { update_face_normals (false); }
 
     void update_vertexnormalsmode (void)
     { update_vertex_normals (false); }
 
     void update_edgelighting (void)
diff --git a/scripts/plot/draw/surfl.m b/scripts/plot/draw/surfl.m
--- a/scripts/plot/draw/surfl.m
+++ b/scripts/plot/draw/surfl.m
@@ -139,16 +139,17 @@ function h = surfl (varargin)
   oldfig = [];
   if (! isempty (hax))
     oldfig = get (0, "currentfigure");
   endif
   unwind_protect
     hax = newplot (hax);
 
     htmp = surface (varargin{:});
+    __update_normals__ (htmp);
     if (! ishold ())
       set (hax, "view", [-37.5, 30],
                 "xgrid", "on", "ygrid", "on", "zgrid", "on", "clim", [0 1]);
     endif
 
     ## Get view vector (vv).
     [az, el] = view ();
     vv = sph2cart ((az - 90) * pi/180.0, el * pi/180.0, 1.0);
