# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1217907890 14400
#      Mon Aug 04 23:44:50 2008 -0400
# Node ID a2ab20ba78f74bb0adddc7b9903e23be46e5df7e
# Parent  b0e7bbe7cd47a01f516f0c0918905cf204df727f
make file_ops a proper singleton class

diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,10 +1,32 @@
 2008-08-04  John W. Eaton  <jwe@octave.org>
 
+	* oct-env.cc (octave_env::do_set_program_name,
+	octave_env::do_base_pathname): Fix usage of
+	file_ops::dir_sep_chars.
+	(octave_env::do_make_absolute): Fix usage of
+	file_ops::dir_sep_chars and file_ops::dir_sep_str.
+	(octave_env::do_get_home_directory): Fix usage of
+	file_ops::dir_sep_str.
+
+	* file-ops.h (file_ops::do_is_dir_sep): New function.
+	(file_ops_::is_dir_sep): Call it.
+	* file-ops.cc (class file_ops): Make it a proper singleton object.
+	(file_ops::file_ops): New constructor.
+	(file_ops::instance_ok): New function.
+	(file_ops::xdir_sep_char): Now private.  No longer static.  Rename
+	from dir_sep_char.
+	(file_ops::xdir_sep_str): Likewise, from dir_sep_str.
+	(file_ops::xdir_sep_chars): Likewise, from dir_sep_chars.
+	(file_ops::dir_sep_char, file_ops::dir_sep_str,
+	file_ops::dir_sep_chars): New functions.
+	(file_ops::recursive_rmdir): Fix usage of file_ops::dir_sep_str.
+	(file_ops::concat): Fix usage of file_ops::dir_sep_char.
+
 	* oct-env.cc (octave_env::instance_ok): Fix typo in error message.
 
 2008-07-30  John W. Eaton  <jwe@octave.org>
 
 	* oct-inttypes.h: Style fixes.
 
 2008-07-30  Jaroslav Hajek <highegg@gmail.com>
 
diff --git a/liboctave/file-ops.cc b/liboctave/file-ops.cc
--- a/liboctave/file-ops.cc
+++ b/liboctave/file-ops.cc
@@ -46,34 +46,56 @@ along with Octave; see the file COPYING.
 #include "file-stat.h"
 #include "oct-env.h"
 #include "oct-passwd.h"
 #include "pathlen.h"
 #include "quit.h"
 #include "statdefs.h"
 #include "str-vec.h"
 
+file_ops::file_ops (void)
+  :
+#if (defined (OCTAVE_HAVE_WINDOWS_FILESYSTEM) && ! defined (OCTAVE_HAVE_POSIX_FILESYSTEM))
+  xdir_sep_char ('\\'),
+  xdir_sep_str ("\\"),
+#else
+  xdir_sep_char ('/'),
+  xdir_sep_str ("/"), 
+#endif
+#if defined (OCTAVE_HAVE_WINDOWS_FILESYSTEM)
+  xdir_sep_chars ("/\\")
+#else
+  xdir_sep_chars (xdir_sep_str)
+#endif
+{ }
+
+file_ops *file_ops::instance = 0;
+
+bool
+file_ops::instance_ok (void)
+{
+  bool retval = true;
+
+  if (! instance)
+    instance = new file_ops ();
+
+  if (! instance)
+    {
+      (*current_liboctave_error_handler)
+	("unable to create file_ops object!");
+
+      retval = false;
+    }
+
+  return retval;
+}
+
 #define NOT_SUPPORTED(nm) \
   nm ": not supported on this system"
 
-#if (defined (OCTAVE_HAVE_WINDOWS_FILESYSTEM) \
-     && ! defined (OCTAVE_HAVE_POSIX_FILESYSTEM))
-char file_ops::dir_sep_char = '\\';
-std::string file_ops::dir_sep_str ("\\");
-#else
-char file_ops::dir_sep_char = '/';
-std::string file_ops::dir_sep_str ("/");
-#endif
-
-#if defined (OCTAVE_HAVE_WINDOWS_FILESYSTEM)
-std::string file_ops::dir_sep_chars ("/\\");
-#else
-std::string file_ops::dir_sep_chars (file_ops::dir_sep_str);
-#endif
-
 // We provide a replacement for mkdir().
 
 int
 file_ops::mkdir (const std::string& name, mode_t mode)
 {
   std::string msg;
   return mkdir (name, mode, msg);
 }
@@ -341,17 +363,17 @@ file_ops::recursive_rmdir (const std::st
 	  OCTAVE_QUIT;
 
 	  std::string nm = dirlist[i];
 
 	  // Skip current directory and parent.
 	  if (nm == "." || nm == "..")
 	    continue;
 
-	  std::string fullnm = name + file_ops::dir_sep_str + nm;
+	  std::string fullnm = name + file_ops::dir_sep_str () + nm;
 
 	  // Get info about the file.  Don't follow links.
 	  file_stat fs (fullnm, false);
 
 	  if (fs)
 	    {
 	      if (fs.is_dir ())
 		{
@@ -846,29 +868,23 @@ file_ops::unlink (const std::string& nam
     }
 #else
   msg = NOT_SUPPORTED ("unlink");
 #endif
 
   return status;
 }
 
-bool
-file_ops::is_dir_sep (char c)
-{
-  return dir_sep_chars.find (c) != NPOS;
-}
-
 std::string
 file_ops::concat (const std::string& dir, const std::string& file)
 {
   return dir.empty ()
     ? file
     : (is_dir_sep (dir[dir.length()-1])
        ? dir + file
-       : dir + file_ops::dir_sep_char + file);
+       : dir + file_ops::dir_sep_char () + file);
 }
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
diff --git a/liboctave/file-ops.h b/liboctave/file-ops.h
--- a/liboctave/file-ops.h
+++ b/liboctave/file-ops.h
@@ -30,16 +30,22 @@ along with Octave; see the file COPYING.
 #endif
 
 #include "str-vec.h"
 
 struct
 OCTAVE_API
 file_ops
 {
+protected:
+
+  file_ops (void);
+
+public:
+
   static int mkdir (const std::string&, mode_t);
   static int mkdir (const std::string&, mode_t, std::string&);
 
   static int mkfifo (const std::string&, mode_t);
   static int mkfifo (const std::string&, mode_t, std::string&);
 
   static int link (const std::string&, const std::string&);
   static int link (const std::string&, const std::string&, std::string&);
@@ -79,23 +85,56 @@ file_ops
   static std::string tilde_expand (const std::string&);
   static string_vector tilde_expand (const string_vector&);
 
   static int umask (mode_t);
 
   static int unlink (const std::string&);
   static int unlink (const std::string&, std::string&);
 
-  static bool is_dir_sep (char);
+  static bool is_dir_sep (char c)
+  {
+    return instance_ok () ? instance->do_is_dir_sep (c) : false;
+  }
 
   static std::string concat (const std::string&, const std::string&);
 
-  static char dir_sep_char;
-  static std::string dir_sep_str;
-  static std::string dir_sep_chars;
+  static char dir_sep_char (void)
+  {
+    return instance_ok () ? instance->xdir_sep_char : 0;
+  }
+
+  static std::string dir_sep_str (void)
+  {
+    return instance_ok () ? instance->xdir_sep_str : std::string ();
+  }
+
+  static std::string dir_sep_chars (void)
+  {
+    return instance_ok () ? instance->xdir_sep_chars : std::string ();
+  }
+
+private:
+
+  // No copying!
+
+  file_ops (const file_ops&);
+
+  file_ops& operator = (const file_ops&);
+
+  // The real thing.
+  static file_ops *instance;
+
+  static bool instance_ok (void);
+
+  char xdir_sep_char;
+  std::string xdir_sep_str;
+  std::string xdir_sep_chars;
+
+  bool do_is_dir_sep (char c) { return xdir_sep_chars.find (c) != NPOS; }
 };
 
 #endif
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
diff --git a/liboctave/oct-env.cc b/liboctave/oct-env.cc
--- a/liboctave/oct-env.cc
+++ b/liboctave/oct-env.cc
@@ -213,17 +213,18 @@ octave_env::chdir (const std::string& ne
     ? instance->do_chdir (newdir) : false;
 }
 
 void
 octave_env::do_set_program_name (const std::string& s) const
 {
   program_invocation_name = s;
 
-  size_t pos = program_invocation_name.find_last_of (file_ops::dir_sep_chars);
+  size_t pos
+    = program_invocation_name.find_last_of (file_ops::dir_sep_chars ());
 
   program_name = (pos == NPOS)
     ? program_invocation_name : program_invocation_name.substr (pos+1);
 }
 
 // Return a pretty pathname.  If the first part of the pathname is the
 // same as $HOME, then replace that with `~'.
 
@@ -297,17 +298,17 @@ octave_env::do_rooted_relative_pathname 
 // simply return it.
 
 std::string
 octave_env::do_base_pathname (const std::string& s) const
 {
   if (! (do_absolute_pathname (s) || do_rooted_relative_pathname (s)))
     return s;
 
-  size_t pos = s.find_last_of (file_ops::dir_sep_chars);
+  size_t pos = s.find_last_of (file_ops::dir_sep_chars ());
 
   if (pos == NPOS)
     return s;
   else
     return s.substr (pos+1);
 }
 
 // Turn STRING (a pathname) into an absolute pathname, assuming that
@@ -328,17 +329,17 @@ octave_env::do_make_absolute (const std:
   std::string current_dir = dot_path;
 
   if (current_dir.empty ())
     current_dir = do_getcwd ();
 
   size_t pos = current_dir.length () - 1;
 
   if (! file_ops::is_dir_sep (current_dir[pos]))
-    current_dir.append (file_ops::dir_sep_str);
+    current_dir.append (file_ops::dir_sep_str ());
 
   // FIXME -- this is probably not correct for all systems.
 
   size_t i = 0;
   size_t slen = s.length ();
 
   while (i < slen)
     {
@@ -362,17 +363,17 @@ octave_env::do_make_absolute (const std:
 		i++;
 
 	      pathname_backup (current_dir, 1);
 
 	      continue;
 	    }
 	}
 
-      size_t tmp = s.find_first_of (file_ops::dir_sep_chars, i);
+      size_t tmp = s.find_first_of (file_ops::dir_sep_chars (), i);
 
       if (tmp == NPOS)
 	{
 	  current_dir.append (s, i, tmp-i);
 	  break;
 	}
       else
 	{
@@ -417,17 +418,17 @@ octave_env::do_get_home_directory (void)
 	hd = drv + do_getenv ("HOMEPATH");
     }
 #endif
 
   if (hd.empty ())
     {
       octave_passwd pw = octave_passwd::getpwuid (octave_syscalls::getuid ());
 
-      hd = pw ? pw.dir () : std::string (file_ops::dir_sep_str);
+      hd = pw ? pw.dir () : std::string (file_ops::dir_sep_str ());
     }
 
   return hd;
 }
 
 std::string
 octave_env::do_get_user_name (void) const
 {
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,32 @@
+2008-08-04  John W. Eaton  <jwe@octave.org>
+
+	* symtab.cc (symbol_table::fcn_info::fcn_info_rep::find_autoload):
+	Fix usage of file_ops::dir_sep_chars.
+	* variables.cc (looks_like_struct):
+	Likewise.
+	* ov-fcn-handle.cc (octave_fcn_handle::set_fcn): Likewise.
+	* octave.cc (execute_command_line_file): Likewise.
+	* ls-mat5.cc (read_mat5_binary_element): Likewise.
+	* load-save.cc (find_file_to_load): Likewise.
+	* load-path.cc (load_path::do_find_file): Likewise.
+	* graphics.cc (drawnow): Likewise.
+	* parse.y (frob_function): Likewise.
+
+	* octave.cc (initialize_pathsearch): Fix usage of
+	file_ops::dir_sep_str.
+	* help.cc (Flookfor): Likewise.
+	* dirfns.cc (Ffilesep): Likewise.
+	(Fautoload): Likewise.
+
+	* defaults.cc (subst_octave_home): Fix usage of
+	file_ops::dir_sep_char.
+	(Fmfilename): Likewise.
+
 2008-07-31  John W. Eaton  <jwe@octave.org>
 
 	* parse.y (assign_lhs): Call force_local_variable on all elements
 	of lexer_flags.pending_local_variables here, then clear the set.
 	(matrix): Clear lexer_flags.pending_local_variable here.
 	* lex.l (lexical_feedback::init): Clear it.
 	(force_local_variable): No longer static.
 	(is_variable): Also return true for names in the
diff --git a/src/defaults.cc b/src/defaults.cc
--- a/src/defaults.cc
+++ b/src/defaults.cc
@@ -108,18 +108,19 @@ subst_octave_home (const std::string& s)
   if (Voctave_home != prefix)
     {
       octave_idx_type len = prefix.length ();
 
       if (s.substr (0, len) == prefix)
 	retval.replace (0, len, Voctave_home);
     }
 
-  if (file_ops::dir_sep_char != '/')
-    std::replace (retval.begin (), retval.end (), '/', file_ops::dir_sep_char);
+  if (file_ops::dir_sep_char () != '/')
+    std::replace (retval.begin (), retval.end (), '/',
+		  file_ops::dir_sep_char ());
 
   return retval;
 }
 
 static void
 set_octave_home (void)
 {
   std::string oh = octave_env::getenv ("OCTAVE_HOME");
diff --git a/src/dirfns.cc b/src/dirfns.cc
--- a/src/dirfns.cc
+++ b/src/dirfns.cc
@@ -639,17 +639,17 @@ DEFUN (filesep, args, ,
 @deftypefn {Built-in Function} {} filesep ()\n\
 Return the system-dependent character used to separate directory names.\n\
 @seealso{pathsep, dir, ls}\n\
 @end deftypefn")
 {
   octave_value retval;
 
   if (args.length () == 0)
-    retval = file_ops::dir_sep_str;
+    retval = file_ops::dir_sep_str ();
   else
     print_usage ();
 
   return retval;
 }
 
 DEFUN (pathsep, args, ,
     "-*- texinfo -*-\n\
diff --git a/src/graphics.cc b/src/graphics.cc
--- a/src/graphics.cc
+++ b/src/graphics.cc
@@ -4569,17 +4569,17 @@ Undocumented internal function.\n\
 	  term = args(0).string_value ();
 
 	  if (! error_state)
 	    {
 	      file = args(1).string_value ();
 
 	      if (! error_state)
 		{
-		  size_t pos = file.find_last_of (file_ops::dir_sep_chars);
+		  size_t pos = file.find_last_of (file_ops::dir_sep_chars ());
 
 		  if (pos != NPOS)
 		    {
 		      file_stat fs (file.substr (0, pos));
 
 		      if (! (fs && fs.is_dir ()))
 			error ("drawnow: nonexistent directory `%s'",
 			       file.substr (0, pos).c_str ());
diff --git a/src/help.cc b/src/help.cc
--- a/src/help.cc
+++ b/src/help.cc
@@ -2017,17 +2017,17 @@ to find related functions that are not p
 		    {
 		      // Check if this version is first in the path
 
 		      std::string file_name = load_path::find_fcn (name);
 		      
 		      std::string dir = dirs[i];
 
 		      if (! file_ops::is_dir_sep (dir[dir.length()-1]))
-			dir += file_ops::dir_sep_str;
+			dir += file_ops::dir_sep_str ();
 
 		      if (file_name == dir + name + ".oct"
 			  || file_name == dir + name + ".m")
 			{
 			  bool symbol_found;
 
 			  std::string h;
 			  if (file_name == dir + name + ".oct")
diff --git a/src/load-path.cc b/src/load-path.cc
--- a/src/load-path.cc
+++ b/src/load-path.cc
@@ -1002,17 +1002,17 @@ load_path::do_methods (const std::string
   return retval;
 }
 
 std::string
 load_path::do_find_file (const std::string& file) const
 {
   std::string retval;
 
-  if (file.find_first_of (file_ops::dir_sep_chars) != NPOS)
+  if (file.find_first_of (file_ops::dir_sep_chars ()) != NPOS)
     {
       if (octave_env::absolute_pathname (file)
 	  || octave_env::rooted_relative_pathname (file))
 	{
 	  file_stat fs (file);
 
 	  if (fs.exists ())
 	    return file;
diff --git a/src/load-save.cc b/src/load-save.cc
--- a/src/load-save.cc
+++ b/src/load-save.cc
@@ -500,17 +500,17 @@ find_file_to_load (const std::string& na
 	      warning_with_id ("Octave:load-file-in-path",
 			       "load: file found in load path");
 	      fname = tmp;
 	    }
 	}
     }
 
   size_t dot_pos = fname.rfind (".");
-  size_t sep_pos = fname.find_last_of (file_ops::dir_sep_chars);
+  size_t sep_pos = fname.find_last_of (file_ops::dir_sep_chars ());
     
   if (dot_pos == NPOS || (sep_pos != NPOS && dot_pos < sep_pos))
     {
       // Either no '.' in name or no '.' appears after last directory
       // separator.
 
       file_stat fs (fname);
 
diff --git a/src/ls-mat5.cc b/src/ls-mat5.cc
--- a/src/ls-mat5.cc
+++ b/src/ls-mat5.cc
@@ -769,17 +769,18 @@ read_mat5_binary_element (std::istream& 
 		    
 		    // First check if just replacing matlabroot is enough
 		    std::string str = OCTAVE_EXEC_PREFIX + 
 		      fpath.substr (mroot.length ());		    
 		    file_stat fs (str);
 
 		    if (fs.exists ())
 		      {
-			size_t xpos = str.find_last_of (file_ops::dir_sep_chars);
+			size_t xpos
+			  = str.find_last_of (file_ops::dir_sep_chars ());
 
 			std::string dir_name = str.substr (0, xpos);
 
 			octave_function *fcn
 			  = load_fcn_from_file (str, dir_name, "", fname);
 		    
 			if (fcn)
 			  {
@@ -797,17 +798,18 @@ read_mat5_binary_element (std::istream& 
 			names(1) = fname + ".mex";
 			names(2) = fname + ".m";
 
 			dir_path p (load_path::system_path ());
 
 			str = octave_env::make_absolute 
 			  (p.find_first_of (names), octave_env::getcwd ());
 
-			size_t xpos = str.find_last_of (file_ops::dir_sep_chars);
+			size_t xpos
+			  = str.find_last_of (file_ops::dir_sep_chars ());
 
 			std::string dir_name = str.substr (0, xpos);
 
 			octave_function *fcn
 			  = load_fcn_from_file (str, dir_name, "", fname);
 
 			if (fcn)
 			  {
@@ -820,17 +822,18 @@ read_mat5_binary_element (std::istream& 
 			    warning ("load: can't find the file %s", 
 				     fpath.c_str());
 			    goto skip_ahead;
 			  }
 		      }
 		  }
 		else
 		  {
-		    size_t xpos = fpath.find_last_of (file_ops::dir_sep_chars);
+		    size_t xpos
+		      = fpath.find_last_of (file_ops::dir_sep_chars ());
 
 		    std::string dir_name = fpath.substr (0, xpos);
 
 		    octave_function *fcn
 		      = load_fcn_from_file (fpath, dir_name, "", fname);
 
 		    if (fcn)
 		      {
diff --git a/src/octave.cc b/src/octave.cc
--- a/src/octave.cc
+++ b/src/octave.cc
@@ -215,18 +215,18 @@ initialize_pathsearch (void)
   std::string odb = octave_env::getenv ("OCTAVE_DB_PATH");
 
   // For backward compatibility.
 
   if (odb.empty ())
     odb = octave_env::getenv ("OCTAVE_DB_DIR");
 
   if (odb.empty ())
-    odb = Vdata_dir + file_ops::dir_sep_str + "octave:"
-      + Vlibexec_dir + file_ops::dir_sep_str + "octave";
+    odb = Vdata_dir + file_ops::dir_sep_str () + "octave:"
+      + Vlibexec_dir + file_ops::dir_sep_str () + "octave";
 }
 
 DEFUN (__version_info__, args, ,
   "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {retval =} __version_info__ (@var{name}, @var{version}, @var{release}, @var{date})\n\
 Undocumented internal function.\n\
 @end deftypefn")
 {
@@ -439,17 +439,17 @@ execute_command_line_file (const std::st
   reading_script_file = true;
   input_from_command_line_file = true;
 
   curr_fcn_file_name = fname;
   curr_fcn_file_full_name = curr_fcn_file_name;
 
   octave_program_invocation_name = curr_fcn_file_name;
 
-  size_t pos = curr_fcn_file_name.find_last_of (file_ops::dir_sep_chars);
+  size_t pos = curr_fcn_file_name.find_last_of (file_ops::dir_sep_chars ());
   
   std::string tmp = (pos != NPOS)
     ? curr_fcn_file_name.substr (pos+1) : curr_fcn_file_name;
 
   octave_program_name = tmp;
 
   try
     {
diff --git a/src/ov-fcn-handle.cc b/src/ov-fcn-handle.cc
--- a/src/ov-fcn-handle.cc
+++ b/src/ov-fcn-handle.cc
@@ -133,17 +133,17 @@ octave_fcn_handle::set_fcn (const std::s
     {
       // First check if just replacing matlabroot is enough
       std::string str = OCTAVE_EXEC_PREFIX + 
 	fpath.substr (octaveroot.length ());		    
       file_stat fs (str);
 
       if (fs.exists ())
 	{
-	  size_t xpos = str.find_last_of (file_ops::dir_sep_chars);
+	  size_t xpos = str.find_last_of (file_ops::dir_sep_chars ());
 
 	  std::string dir_name = str.substr (0, xpos);
 
 	  octave_function *xfcn
 	    = load_fcn_from_file (str, dir_name, "", nm);
 
 	  if (xfcn)
 	    {
@@ -165,17 +165,17 @@ octave_fcn_handle::set_fcn (const std::s
 	  names(1) = nm + ".mex";
 	  names(2) = nm + ".m";
 
 	  dir_path p (load_path::system_path ());
 
 	  str = octave_env::make_absolute 
 	    (p.find_first_of (names), octave_env::getcwd ());
 
-	  size_t xpos = str.find_last_of (file_ops::dir_sep_chars);
+	  size_t xpos = str.find_last_of (file_ops::dir_sep_chars ());
 
 	  std::string dir_name = str.substr (0, xpos);
 
 	  octave_function *xfcn = load_fcn_from_file (str, dir_name, "", nm);
 
 	  if (xfcn)
 	    {
 	      octave_value tmp (xfcn);
@@ -188,17 +188,17 @@ octave_fcn_handle::set_fcn (const std::s
 	      success = false;
 	    }
 	}
     }
   else
     {
       if (fpath.length () > 0)
 	{
-	  size_t xpos = fpath.find_last_of (file_ops::dir_sep_chars);
+	  size_t xpos = fpath.find_last_of (file_ops::dir_sep_chars ());
 
 	  std::string dir_name = fpath.substr (0, xpos);
 
 	  octave_function *xfcn = load_fcn_from_file (fpath, dir_name, "", nm);
 
 	  if (xfcn)
 	    {
 	      octave_value tmp (xfcn);
diff --git a/src/parse.y b/src/parse.y
--- a/src/parse.y
+++ b/src/parse.y
@@ -2479,17 +2479,17 @@ frob_function (const std::string& fname,
 	     || lexer_flags.parsing_class_method))
 	{
 	  // FIXME -- should curr_fcn_file_name already be
 	  // preprocessed when we get here?  It seems to only be a
 	  // problem with relative file names.
 
 	  std::string nm = curr_fcn_file_name;
 
-	  size_t pos = nm.find_last_of (file_ops::dir_sep_chars);
+	  size_t pos = nm.find_last_of (file_ops::dir_sep_chars ());
 
 	  if (pos != NPOS)
 	    nm = curr_fcn_file_name.substr (pos+1);
 
 	  if (nm != id_name)
 	    {
 	      warning_with_id
 		("Octave:function-name-clash",
@@ -3372,17 +3372,17 @@ With no arguments, return a structure co
 
 	      if (fcn)
 		{
 		  std::string fname = fcn->fcn_file_name ();
 
 		  if (! fname.empty ())
 		    {
 		      fname = octave_env::make_absolute (fname, octave_env::getcwd ());
-		      fname = fname.substr (0, fname.find_last_of (file_ops::dir_sep_str) + 1);
+		      fname = fname.substr (0, fname.find_last_of (file_ops::dir_sep_str ()) + 1);
 
 		      file_stat fs (fname + nm);
 
 		      if (fs.exists ())
 			{
 			  nm = fname + nm;
 			  found = true;
 			}
@@ -3509,17 +3509,17 @@ of the file name and the extension.\n\
       if (fname.empty ())
         fname = fcn->name ();
     }
 
   if (arg == "fullpathext")
     retval = fname;
   else
     {
-      size_t dpos = fname.rfind (file_ops::dir_sep_char);
+      size_t dpos = fname.rfind (file_ops::dir_sep_char ());
       size_t epos = fname.rfind ('.');
 
       if (epos <= dpos)
         epos = NPOS;
 
       fname = (epos != NPOS) ? fname.substr (0, epos) : fname;
 
       if (arg == "fullpath")
diff --git a/src/symtab.cc b/src/symtab.cc
--- a/src/symtab.cc
+++ b/src/symtab.cc
@@ -703,17 +703,17 @@ symbol_table::fcn_info::fcn_info_rep::fi
     out_of_date_check_internal (autoload_function);
 
   if (! autoload_function.is_defined ())
     {
       std::string file_name = lookup_autoload (name);
 
       if (! file_name.empty ())
 	{
-	  size_t pos = file_name.find_last_of (file_ops::dir_sep_chars);
+	  size_t pos = file_name.find_last_of (file_ops::dir_sep_chars ());
 
 	  std::string dir_name = file_name.substr (0, pos);
 
 	  octave_function *fcn = load_fcn_from_file (file_name, dir_name,
 						     "", name, true);
 
 	  if (fcn)
 	    autoload_function = octave_value (fcn);
diff --git a/src/variables.cc b/src/variables.cc
--- a/src/variables.cc
+++ b/src/variables.cc
@@ -565,17 +565,17 @@ generate_struct_completions (const std::
 // FIXME -- this will have to be much smarter to work
 // "correctly".
 
 bool
 looks_like_struct (const std::string& text)
 {
   bool retval = (! text.empty ()
 		 && text != "."
-		 && text.find_first_of (file_ops::dir_sep_chars) == NPOS
+		 && text.find_first_of (file_ops::dir_sep_chars ()) == NPOS
 		 && text.find ("..") == NPOS
 		 && text.rfind ('.') != NPOS);
 
 #if 0
   symbol_record *sr = curr_sym_tab->lookup (text);
 
   if (sr && ! sr->is_function ())
     {
