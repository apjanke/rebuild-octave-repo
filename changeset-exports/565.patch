# HG changeset patch
# User jwe
# Date 775184716 0
#      Tue Jul 26 01:05:16 1994 +0000
# Node ID b04c0d02f2decd772f5759c5ef2389d8116909f6
# Parent  6e376eb337ddd8f07b5b1af21ef0035a43960c01
[project @ 1994-07-26 01:03:20 by jwe]

diff --git a/src/dassl.cc b/src/dassl.cc
--- a/src/dassl.cc
+++ b/src/dassl.cc
@@ -48,19 +48,19 @@ dassl_user_function (const ColumnVector&
 {
   ColumnVector retval;
 
   int nstates = x.capacity ();
 
   assert (nstates == xdot.capacity ());
 
 //  tree_constant name (dassl_fcn->name ());
-  Octave_object args (4);
+  Octave_object args;
+  args(3) = t;
 //  args(0) = name;
-  args(3) = t;
 
   if (nstates > 1)
     {
       Matrix m1 (nstates, 1);
       Matrix m2 (nstates, 1);
       for (int i = 0; i < nstates; i++)
 	{
 	  m1 (i, 0) = x.elem (i);
diff --git a/src/data.cc b/src/data.cc
--- a/src/data.cc
+++ b/src/data.cc
@@ -30,16 +30,17 @@ Software Foundation, Inc.
 */
 
 #ifdef HAVE_CONFIG_H
 #include "config.h"
 #endif
 
 #include "tree-const.h"
 #include "user-prefs.h"
+#include "help.h"
 #include "utils.h"
 #include "error.h"
 #include "defun.h"
 
 #ifndef MIN
 #define MIN(a,b) ((a) < (b) ? (a) : (b))
 #endif
 
diff --git a/src/find.cc b/src/find.cc
--- a/src/find.cc
+++ b/src/find.cc
@@ -29,17 +29,18 @@ Software Foundation, 675 Mass Ave, Cambr
 #include "error.h"
 #include "help.h"
 #include "defun-dld.h"
 
 static Octave_object
 find_to_fortran_idx (const ColumnVector i_idx, const ColumnVector j_idx,
 		     const tree_constant& val, int nr, int nc, int nargout)
 {
-  Octave_object retval (nargout);
+  Octave_object retval;
+  retval.resize (nargout);
 
   switch (nargout)
     {
     case 1:
       {
 	int count = i_idx.length ();
 	ColumnVector tmp (count);
 	for (int i = 0; i < count; i++)
diff --git a/src/fsolve.cc b/src/fsolve.cc
--- a/src/fsolve.cc
+++ b/src/fsolve.cc
@@ -74,17 +74,18 @@ hybrd_info_to_fsolve_info (int info)
 ColumnVector
 fsolve_user_function (const ColumnVector& x)
 {
   ColumnVector retval;
 
   int n = x.capacity ();
 
 //  tree_constant name = fsolve_fcn->name ();
-  Octave_object args (2);
+  Octave_object args;
+  args.resize (2);
 //  args(0) = name;
 
   if (n > 1)
     {
       Matrix m (n, 1);
       for (int i = 0; i < n; i++)
 	m (i, 0) = x.elem (i);
       tree_constant vars (m);
diff --git a/src/lsode.cc b/src/lsode.cc
--- a/src/lsode.cc
+++ b/src/lsode.cc
@@ -46,19 +46,19 @@ static ODE_options lsode_opts;
 ColumnVector
 lsode_user_function (const ColumnVector& x, double t)
 {
   ColumnVector retval;
 
   int nstates = x.capacity ();
 
 //  tree_constant name (lsode_fcn->name ());
-  Octave_object args (3);
+  Octave_object args;
+  args(2) = t;
 //  args(0) = name;
-  args(2) = t;
 
   if (nstates > 1)
     {
       Matrix m (nstates, 1);
       for (int i = 0; i < nstates; i++)
 	m (i, 0) = x.elem (i);
       tree_constant state (m);
       args(1) = state;
diff --git a/src/npsol.cc b/src/npsol.cc
--- a/src/npsol.cc
+++ b/src/npsol.cc
@@ -61,19 +61,19 @@ npsol_objective_function (const ColumnVe
     }
   else
     {
       double d = x.elem (0);
       decision_vars = d;
     }
 
 //  tree_constant name = npsol_objective->name ();
-  Octave_object args (2);
+  Octave_object args;
+  args(1) = decision_vars;
 //  args(0) = name;
-  args(1) = decision_vars;
 
   static double retval;
   retval = 0.0;
 
   tree_constant objective_value;
   if (npsol_objective)
     {
       Octave_object tmp = npsol_objective->eval (0, 1, args);
@@ -138,19 +138,19 @@ npsol_constraint_function (const ColumnV
     }
   else
     {
       double d = x.elem (0);
       decision_vars = d;
     }
 
 //  tree_constant name = npsol_constraints->name ();
-  Octave_object args (2);
+  Octave_object args;
+  args(1) = decision_vars;
 //  args(0) = name;
-  args(1) = decision_vars;
 
   if (npsol_constraints)
     {
       Octave_object tmp = npsol_constraints->eval (0, 1, args);
 
       if (error_state)
 	{
 	  error ("npsol: error evaluating constraints");
diff --git a/src/oct-obj.h b/src/oct-obj.h
--- a/src/oct-obj.h
+++ b/src/oct-obj.h
@@ -42,17 +42,16 @@ class ComplexColumnVector;
 class ComplexDiagMatrix;
 class Range;
 
 class Octave_object : public Array<tree_constant>
 {
 public:
 
   Octave_object (void) : Array<tree_constant> () { }
-  Octave_object (int n) : Array<tree_constant> (n) { }
   Octave_object (int n, const tree_constant& val)
     : Array<tree_constant> (n, val) { }
 
   Octave_object (const tree_constant& tc) : Array<tree_constant> (1, tc) { }
 
   Octave_object (double d);
   Octave_object (const Matrix& m);
   Octave_object (const DiagMatrix& d);
@@ -81,16 +80,31 @@ public:
 // Assignment will resize on range errors.
 
   tree_constant& operator () (int n);
 
   tree_constant operator () (int n) const;
 
 private:
 
+// This constructor is private with no definition to keep statements
+// like
+//
+//   Octave_object foo = 5;
+//   Octave_object foo = 5.0;
+//
+// from doing different things.  Instead, you have to use the
+// constructor
+//
+//   Octave_object (n, val);
+//
+// and supply a default value to create a vector-valued Octave_object.
+
+  Octave_object (int n) : Array<tree_constant> (n);
+
   void maybe_resize (int n);
 
   tree_constant& elem (int n);
   tree_constant& checkelem (int n);
 
   tree_constant& xelem (int n);
 
   tree_constant elem (int n) const;
diff --git a/src/octave.cc b/src/octave.cc
--- a/src/octave.cc
+++ b/src/octave.cc
@@ -640,17 +640,18 @@ Octave_object
 feval (const Octave_object& args, int nargout)
 {
   Octave_object retval;
 
   tree_fvc *fcn = is_valid_function (args(1), "feval", 1);
   if (fcn)
     {
       int nargin = args.length () - 1;
-      Octave_object tmp_args (nargin);
+      Octave_object tmp_args;
+      tmp_args.resize (nargin);
       for (int i = 0; i < nargin; i++)
 	tmp_args(i) = args(i+1);
       retval = fcn->eval (0, nargout, tmp_args);
     }
 
   return retval;
 }
 
diff --git a/src/pt-const.h b/src/pt-const.h
--- a/src/pt-const.h
+++ b/src/pt-const.h
@@ -264,17 +264,17 @@ public:
       rep->maybe_mutate ();
       if (print)
 	rep->print ();
       return *this;
     }
 
   Octave_object eval (int print, int nargout, const Octave_object& args)
     {
-      Octave_object retval (1);
+      Octave_object retval;
 
 // XXX FIXME XXX -- make it safe to call do_index() with
 // args.length () == 0
       if (args.length () > 0)
 	retval(0) = rep->do_index (args);
       else
 	retval(0) = *this;
 
diff --git a/src/pt-exp-base.cc b/src/pt-exp-base.cc
--- a/src/pt-exp-base.cc
+++ b/src/pt-exp-base.cc
@@ -643,17 +643,17 @@ tree_builtin::eval (int print)
 {
   tree_constant retval;
 
   if (error_state)
     return retval;
 
   if (fcn)
     {
-      Octave_object args (1);
+      Octave_object args;
       args(0) = tree_constant (my_name);
       Octave_object tmp = (*fcn) (args, 1);
       if (tmp.length () > 0)
 	retval = tmp(0);
     }
   else // Assume mapper function
     ::error ("%s: argument expected", my_name);
 
@@ -1121,17 +1121,18 @@ tree_identifier::eval (int print)
 
   if (! script_file_executed)
     {
       if (ans)
 	{
 	  int nargout = maybe_do_ans_assign ? 0 : 1;
 
 	  int nargin = (ans->is_constant ()) ? 0 : 1;
-	  Octave_object tmp_args (nargin);
+	  Octave_object tmp_args;
+	  tmp_args.resize (nargin);
 	  Octave_object tmp = ans->eval (0, nargout, tmp_args);
 
 	  if (tmp.length () > 0)
 	    retval = tmp(0);
 	}
       else
 	eval_undefined_error ();
     }
@@ -1412,17 +1413,18 @@ tree_function::function_name (void)
 tree_constant
 tree_function::eval (int print)
 {
   tree_constant retval;
 
   if (error_state || ! cmd_list)
     return retval;
 
-  Octave_object tmp_args (1);
+  Octave_object tmp_args;
+  tmp_args.resize (1);
   Octave_object tmp = eval (print, 1, tmp_args);
 
   if (! error_state && tmp.length () > 0)
     retval = tmp(0);
 
   return retval;
 }
 
@@ -2745,17 +2747,18 @@ tree_argument_list::next_elem (void)
  * Convert a linked list of trees to a vector of pointers to trees,
  * evaluating them along the way.
  */
 Octave_object
 tree_argument_list::convert_to_const_vector (void)
 {
   int len = length () + 1;
 
-  Octave_object args (len);
+  Octave_object args;
+  args.resize (len);
 
 // args[0] may eventually hold something useful, like the function
 // name.
   tree_argument_list *tmp_list = this;
   for (int k = 1; k < len; k++)
     {
       if (tmp_list)
 	{
@@ -2922,17 +2925,18 @@ tree_parameter_list::define_from_arg_vec
     }
 }
 
 Octave_object
 tree_parameter_list::convert_to_const_vector (void)
 {
   int nout = length ();
 
-  Octave_object retval (nout);
+  Octave_object retval;
+  retval.resize (nout);
 
   int i = 0;
   
   for (tree_parameter_list *elem = this; elem; elem = elem->next)
     {
       if (elem->is_defined ())
 	retval(i) = elem->eval (0);
       i++;
diff --git a/src/quad.cc b/src/quad.cc
--- a/src/quad.cc
+++ b/src/quad.cc
@@ -45,19 +45,19 @@ static tree_fvc *quad_fcn;
 static Quad_options quad_opts;
 
 double
 quad_user_function (double x)
 {
   double retval = 0.0;
 
 //  tree_constant name = quad_fcn->name ();
-  Octave_object args (2);
+  Octave_object args;
+  args(1) = x;
 //  args(0) = name;
-  args(1) = x;
 
   if (quad_fcn)
     {
       Octave_object tmp = quad_fcn->eval (0, 1, args);
 
       if (error_state)
 	{
 	  quad_integration_error = 1;  // XXX FIXME XXX
