# HG changeset patch
# User jwe
# Date 1045607515 0
#      Tue Feb 18 22:31:55 2003 +0000
# Node ID 9f86c2055b5826123da7db835d6d8c858b2417b7
# Parent  d53c33d93440b0f14ce284ca48d9247d4292d0ea
[project @ 2003-02-18 22:31:55 by jwe]

diff --git a/liboctave/CMatrix.cc b/liboctave/CMatrix.cc
--- a/liboctave/CMatrix.cc
+++ b/liboctave/CMatrix.cc
@@ -955,19 +955,19 @@ ComplexMatrix::inverse (int& info, doubl
     {
       Array<int> ipvt (nr);
       int *pipvt = ipvt.fortran_vec ();
 
       retval = *this;
       Complex *tmp_data = retval.fortran_vec ();
 
       Array<Complex> z(1);
-      int lwork = 1;
-
-      // Query the optimum work array size
+      int lwork = -1;
+
+      // Query the optimum work array size.
 
       F77_XFCN (zgetri, ZGETRI, (nc, tmp_data, nr, pipvt, 
 				 z.fortran_vec (), lwork, info));
 
       if (f77_exception_encountered) 
 	{
 	  (*current_liboctave_error_handler)
 	    ("unrecoverable error in zgetri");
@@ -976,34 +976,34 @@ ComplexMatrix::inverse (int& info, doubl
 
       lwork = static_cast<int> (real(z(0)));
       lwork = (lwork <  2 *nc ? 2*nc : lwork);
       z.resize (lwork);
       Complex *pz = z.fortran_vec ();
 
       info = 0;
 
-      /* Calculate the norm of the matrix, for later use */
+      // Calculate the norm of the matrix, for later use.
       double anorm;
       if (calc_cond)
 	anorm  = retval.abs().sum().row(0).max();
 
       F77_XFCN (zgetrf, ZGETRF, (nc, nc, tmp_data, nr, pipvt, info));
 
       if (f77_exception_encountered)
 	(*current_liboctave_error_handler) ("unrecoverable error in zgetrf");
       else
 	{
-	  /* Throw-away extra info LAPACK gives so as to not change output */
+	  // Throw-away extra info LAPACK gives so as to not change output.
 	  rcond = 0.;
 	  if ( info != 0) 
 	    info = -1;
 	  else if (calc_cond) 
 	    {
-	      /* Now calculate the condition number for non-singular matrix */
+	      // Now calculate the condition number for non-singular matrix.
 	      char job = '1';
 	      Array<double> rz (2 * nc);
 	      double *prz = rz.fortran_vec ();
 	      F77_XFCN (zgecon, ZGECON, ( &job, nc, tmp_data, nr, anorm, 
 					  rcond, pz, prz, info));
 
 	      if (f77_exception_encountered)
 		(*current_liboctave_error_handler) 
@@ -1431,39 +1431,39 @@ ComplexMatrix::determinant (int& info, d
       Array<int> ipvt (nr);
       int *pipvt = ipvt.fortran_vec ();
 
       ComplexMatrix atmp = *this;
       Complex *tmp_data = atmp.fortran_vec ();
 
       info = 0;
 
-      /* Calculate the norm of the matrix, for later use */
+      // Calculate the norm of the matrix, for later use.
       double anorm = 0;
       if (calc_cond) 
 	anorm = atmp.abs().sum().row(0).max();
 
       F77_XFCN (zgetrf, ZGETRF, (nr, nc, tmp_data, nr, pipvt, info));
 
       if (f77_exception_encountered)
 	(*current_liboctave_error_handler) ("unrecoverable error in zgetrf");
       else
 	{
-	  /* Throw-away extra info LAPACK gives so as to not change output */
+	  // Throw-away extra info LAPACK gives so as to not change output.
 	  rcond = 0.;
 	  if ( info != 0) 
 	    {
 	      info = -1;
 	      retval = ComplexDET ();
 	    } 
 	  else 
 	    {
 	      if (calc_cond) 
 		{
-		  /* Now calc the condition number for non-singular matrix */
+		  // Now calc the condition number for non-singular matrix.
 		  char job = '1';
 		  Array<Complex> z (2*nr);
 		  Complex *pz = z.fortran_vec ();
 		  Array<double> rz (2*nr);
 		  double *prz = rz.fortran_vec ();
 		  
 		  F77_XFCN (zgecon, ZGECON, ( &job, nc, tmp_data, nr, anorm, 
 					      rcond, pz, prz, info));
@@ -1578,41 +1578,41 @@ ComplexMatrix::solve (const ComplexMatri
       ComplexMatrix atmp = *this;
       Complex *tmp_data = atmp.fortran_vec ();
 
       Array<Complex> z (2 * nc);
       Complex *pz = z.fortran_vec ();
       Array<double> rz (2 * nc);
       double *prz = rz.fortran_vec ();
 
-      /* Calculate the norm of the matrix, for later use */
+      // Calculate the norm of the matrix, for later use.
       double anorm = atmp.abs().sum().row(0).max();
 
       F77_XFCN (zgetrf, ZGETRF, (nr, nr, tmp_data, nr, pipvt, info));
 
       if (f77_exception_encountered)
 	(*current_liboctave_error_handler) ("unrecoverable error in zgetrf");
       else
 	{
-	  /* Throw-away extra info LAPACK gives so as to not change output */
+	  // Throw-away extra info LAPACK gives so as to not change output.
 	  rcond = 0.;
 	  if ( info != 0) 
 	    { 
 	      info = -2;
 
 	      if (sing_handler)
 		sing_handler (rcond);
 	      else
 		(*current_liboctave_error_handler)
 		  ("matrix singular to machine precision");
 
 	    } 
 	  else 
 	    {
-	      /* Now calculate the condition number for non-singular matrix */
+	      // Now calculate the condition number for non-singular matrix.
 	      char job = '1';
 	      F77_XFCN (zgecon, ZGECON, ( &job, nc, tmp_data, nr, anorm, 
 					  rcond, pz, prz, info));
 
 	      if (f77_exception_encountered)
 		(*current_liboctave_error_handler) 
 		  ("unrecoverable error in zgecon");
 
@@ -1727,41 +1727,41 @@ ComplexMatrix::solve (const ComplexColum
       ComplexMatrix atmp = *this;
       Complex *tmp_data = atmp.fortran_vec ();
 
       Array<Complex> z (2 * nc);
       Complex *pz = z.fortran_vec ();
       Array<double> rz (2 * nc);
       double *prz = rz.fortran_vec ();
 
-      /* Calculate the norm of the matrix, for later use */
+      // Calculate the norm of the matrix, for later use.
       double anorm = atmp.abs().sum().row(0).max();
 
       F77_XFCN (zgetrf, ZGETRF, (nr, nr, tmp_data, nr, pipvt, info));
 
       if (f77_exception_encountered)
 	(*current_liboctave_error_handler) ("unrecoverable error in zgetrf");
       else
 	{
-	  /* Throw-away extra info LAPACK gives so as to not change output */
+	  // Throw-away extra info LAPACK gives so as to not change output.
 	  rcond = 0.;
 	  if ( info != 0) 
 	    { 
 	      info = -2;
 
 	      if (sing_handler)
 		sing_handler (rcond);
 	      else
 		(*current_liboctave_error_handler)
 		  ("matrix singular to machine precision, rcond = %g",
 		   rcond);
 	    } 
 	  else 
 	    {
-	      /* Now calculate the condition number for non-singular matrix */
+	      // Now calculate the condition number for non-singular matrix.
 	      char job = '1';
 	      F77_XFCN (zgecon, ZGECON, ( &job, nc, tmp_data, nr, anorm, 
 					  rcond, pz, prz, info));
 
 	      if (f77_exception_encountered)
 		(*current_liboctave_error_handler) 
 		  ("unrecoverable error in zgecon");
 
diff --git a/liboctave/dMatrix.cc b/liboctave/dMatrix.cc
--- a/liboctave/dMatrix.cc
+++ b/liboctave/dMatrix.cc
@@ -625,17 +625,17 @@ Matrix::inverse (int& info, double& rcon
       int *pipvt = ipvt.fortran_vec ();
 
       retval = *this;
       double *tmp_data = retval.fortran_vec ();
 
       Array<double> z(1);
       int lwork = -1;
 
-      // Query the optimum work array size
+      // Query the optimum work array size.
       F77_XFCN (dgetri, DGETRI, (nc, tmp_data, nr, pipvt, 
 				 z.fortran_vec (), lwork, info));
 
       if (f77_exception_encountered) 
 	{
 	  (*current_liboctave_error_handler)
 	    ("unrecoverable error in dgetri");
 	  return retval;
@@ -643,34 +643,34 @@ Matrix::inverse (int& info, double& rcon
 
       lwork = static_cast<int> (z(0));
       lwork = (lwork < 2 *nc ? 2*nc : lwork);
       z.resize (lwork);
       double *pz = z.fortran_vec ();
 
       info = 0;
 
-      /* Calculate the norm of the matrix, for later use */
+      // Calculate the norm of the matrix, for later use.
       double anorm = 0;
       if (calc_cond) 
 	anorm = retval.abs().sum().row(0).max();
 
       F77_XFCN (dgetrf, DGETRF, (nc, nc, tmp_data, nr, pipvt, info));
 
       if (f77_exception_encountered)
 	(*current_liboctave_error_handler) ("unrecoverable error in dgetrf");
       else
 	{
-	  /* Throw-away extra info LAPACK gives so as to not change output */
+	  // Throw-away extra info LAPACK gives so as to not change output.
 	  rcond = 0.;
 	  if ( info != 0) 
 	    info = -1;
 	  else if (calc_cond) 
 	    {
-	      /* Now calculate the condition number for non-singular matrix */
+	      // Now calculate the condition number for non-singular matrix.
 	      char job = '1';
 	      Array<int> iz (nc);
 	      int *piz = iz.fortran_vec ();
 	      F77_XFCN (dgecon, DGECON, ( &job, nc, tmp_data, nr, anorm, 
 					  rcond, pz, piz, info));
 
 	      if (f77_exception_encountered)
 		(*current_liboctave_error_handler) 
@@ -1096,39 +1096,39 @@ Matrix::determinant (int& info, double& 
       Array<int> ipvt (nr);
       int *pipvt = ipvt.fortran_vec ();
 
       Matrix atmp = *this;
       double *tmp_data = atmp.fortran_vec ();
 
       info = 0;
 
-      /* Calculate the norm of the matrix, for later use */
+      // Calculate the norm of the matrix, for later use.
       double anorm = 0;
       if (calc_cond) 
 	anorm = atmp.abs().sum().row(0).max();
 
       F77_XFCN (dgetrf, DGETRF, (nr, nr, tmp_data, nr, pipvt, info));
 
       if (f77_exception_encountered)
 	(*current_liboctave_error_handler) ("unrecoverable error in dgetrf");
       else
 	{
-	  /* Throw-away extra info LAPACK gives so as to not change output */
+	  // Throw-away extra info LAPACK gives so as to not change output.
 	  rcond = 0.;
 	  if ( info != 0) 
 	    {
 	    info = -1;
 	    retval = DET ();
 	    } 
 	  else 
 	    {
 	      if (calc_cond) 
 		{
-		  /* Now calc the condition number for non-singular matrix */
+		  // Now calc the condition number for non-singular matrix.
 		  char job = '1';
 		  Array<double> z (4 * nc);
 		  double *pz = z.fortran_vec ();
 		  Array<int> iz (nc);
 		  int *piz = iz.fortran_vec ();
 
 		  F77_XFCN (dgecon, DGECON, ( &job, nc, tmp_data, nr, anorm, 
 					      rcond, pz, piz, info));
@@ -1214,41 +1214,41 @@ Matrix::solve (const Matrix& b, int& inf
       Matrix atmp = *this;
       double *tmp_data = atmp.fortran_vec ();
 
       Array<double> z (4 * nc);
       double *pz = z.fortran_vec ();
       Array<int> iz (nc);
       int *piz = iz.fortran_vec ();
 
-      /* Calculate the norm of the matrix, for later use */
+      // Calculate the norm of the matrix, for later use.
       double anorm = atmp.abs().sum().row(0).max();
 
       F77_XFCN (dgetrf, DGETRF, (nr, nr, tmp_data, nr, pipvt, info));
 
       if (f77_exception_encountered)
 	(*current_liboctave_error_handler) ("unrecoverable error in dgetrf");
       else
 	{
-	  /* Throw-away extra info LAPACK gives so as to not change output */
+	  // Throw-away extra info LAPACK gives so as to not change output.
 	  rcond = 0.;
 	  if ( info != 0) 
 	    {
 	      info = -2;
 
 	      if (sing_handler)
 		sing_handler (rcond);
 	      else
 		(*current_liboctave_error_handler)
 		  ("matrix singular to machine precision");
 
 	    } 
 	  else 
 	    {
-	      /* Now calculate the condition number for non-singular matrix */
+	      // Now calculate the condition number for non-singular matrix.
 	      char job = '1';
 	      F77_XFCN (dgecon, DGECON, ( &job, nc, tmp_data, nr, anorm, 
 					  rcond, pz, piz, info));
 	      
 	      if (f77_exception_encountered)
 		(*current_liboctave_error_handler) 
 		  ("unrecoverable error in dgecon");
 	      
@@ -1361,41 +1361,41 @@ Matrix::solve (const ColumnVector& b, in
       Matrix atmp = *this;
       double *tmp_data = atmp.fortran_vec ();
 
       Array<double> z (4 * nc);
       double *pz = z.fortran_vec ();
       Array<int> iz (nc);
       int *piz = iz.fortran_vec ();
 
-      /* Calculate the norm of the matrix, for later use */
+      // Calculate the norm of the matrix, for later use.
       double anorm = atmp.abs().sum().row(0).max();
 
       F77_XFCN (dgetrf, DGETRF, (nr, nr, tmp_data, nr, pipvt, info));
 
       if (f77_exception_encountered)
 	(*current_liboctave_error_handler) ("unrecoverable error in dgetrf");
       else
 	{
-	  /* Throw-away extra info LAPACK gives so as to not change output */
+	  // Throw-away extra info LAPACK gives so as to not change output.
 	  rcond = 0.;
 	  if ( info > 0) 
 	    {
 	      info = -2;
 
 	      if (sing_handler)
 		sing_handler (rcond);
 	      else
 		(*current_liboctave_error_handler)
 		  ("matrix singular to machine precision");
 
 	    } 
 	  else 
 	    {
-	      /* Now calculate the condition number for non-singular matrix */
+	      // Now calculate the condition number for non-singular matrix.
 	      char job = '1';
 	      F77_XFCN (dgecon, DGECON, ( &job, nc, tmp_data, nr, anorm, 
 					  rcond, pz, piz, info));
 	      
 	      if (f77_exception_encountered)
 		(*current_liboctave_error_handler) 
 		  ("unrecoverable error in dgecon");
 
