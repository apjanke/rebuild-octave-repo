# HG changeset patch
# User Torsten <mttl@mailbox.org>
# Date 1490124326 -3600
#      Tue Mar 21 20:25:26 2017 +0100
# Node ID ac4d0a72927aa0ca58fed287d01b62c10d102931
# Parent  f77d840f0f7c2d88c23c991c7ddee41c72d79c16
provide a context menu for the tab bar of the editor (bug #44605)

* file-editor.cc (file_editor::construct): call new method create_context_menu
  of the tab bar for initializing the context menu with the close actions;
  (file_editor_tab_bar::file_editor_tab_bar): create empty context menu;
  (file_editor_tab_bar::~file_editor_tab_bar): delete context menu;
  (file_editor_tab_bar::create_context_menu): new method for adding actions of
  the file editor into the new context menu;
  (file_editor_tab_bar::mousePressEvent): check, whether click was into a tab,
  then get the mouse button and click type, finally do the desired action
  including showing the new context menu

* file-editor.h: new method create_context_menu and new menu _context_menu
  in file_editor_tab_bar

diff --git a/libgui/src/m-editor/file-editor.cc b/libgui/src/m-editor/file-editor.cc
--- a/libgui/src/m-editor/file-editor.cc
+++ b/libgui/src/m-editor/file-editor.cc
@@ -1886,16 +1886,25 @@ file_editor::construct (void)
   QVBoxLayout *vbox_layout = new QVBoxLayout ();
   vbox_layout->addWidget (_menu_bar);
   vbox_layout->addWidget (_tool_bar);
   vbox_layout->addWidget (_tab_widget);
   vbox_layout->setMargin (0);
   editor_widget->setLayout (vbox_layout);
   setWidget (editor_widget);
 
+  // create the context menu of the tab bar
+  file_editor_tab_bar *bar
+      = static_cast<file_editor_tab_bar *>(_tab_widget->tabBar ());
+  QList<QAction *> tab_bar_actions;
+  tab_bar_actions.append (_close_action);
+  tab_bar_actions.append (_close_all_action);
+  tab_bar_actions.append (_close_others_action);
+  bar->create_context_menu (&tab_bar_actions);
+
   // signals
   connect (this, SIGNAL (execute_command_in_terminal_signal (const QString&)),
            main_win (), SLOT (execute_command_in_terminal (const QString&)));
 
   connect (this, SIGNAL (request_settings_dialog (const QString&)),
            main_win (),
            SLOT (process_settings_dialog_request (const QString&)));
 
@@ -2468,48 +2477,104 @@ file_editor::switch_tab (int direction, 
 
 
 //
 // Functions of the the reimplemented tab bar
 //
 
 file_editor_tab_bar::file_editor_tab_bar (QWidget *p)
   : QTabBar (p)
-{ }
+{
+  _context_menu = new QMenu (this);
+}
 
 file_editor_tab_bar::~file_editor_tab_bar ()
-{ }
+{
+  delete _context_menu;
+}
+
+// Create the context menu and fill it with actions from the editor
+void
+file_editor_tab_bar::create_context_menu (QList<QAction*> *actions)
+{
+  for (int i = 0; i < actions->count (); i++)
+    _context_menu->addAction (actions->at (i));
+}
 
 // Reimplement mouse event for filtering out the desired mouse clicks
 void
 file_editor_tab_bar::mousePressEvent (QMouseEvent *me)
 {
-  if ((me->type () == QEvent::MouseButtonDblClick &&
-       me->button() == Qt::LeftButton) ||
-      (me->type () != QEvent::MouseButtonDblClick &&
-       me->button() == Qt::MidButton))
+  QPoint click_pos;
+  int clicked_idx = -1;
+
+  // detect the tab where the click occured
+  for (int i = 0; i < count (); i++)
+    {
+      click_pos = mapToGlobal (me->pos ());
+      if (tabRect (i).contains (mapFromGlobal (click_pos)))
+        {
+          clicked_idx = i;
+          break;
+        }
+    }
+
+  // If a tab was clicked
+  if (clicked_idx >= 0)
     {
-      // Middle click into the tabbar -> close the tab
-      for (int i = 0; i < count (); i++)
+      int current_idx = currentIndex ();
+      // detect the mouse click
+      if ((me->type () == QEvent::MouseButtonDblClick &&
+           me->button() == Qt::LeftButton) ||
+          (me->type () != QEvent::MouseButtonDblClick &&
+           me->button() == Qt::MidButton))
         {
-          QPoint clickPos = mapToGlobal (me->pos ());
-          if (tabRect (i).contains (mapFromGlobal (clickPos)))
+          // Middle click or double click -> close the tab
+          // Make the clicked tab the current one and close it
+          setCurrentIndex (clicked_idx);
+          emit close_current_tab_signal (true);
+          // Was the closed tab before or after the previously current tab?
+          // According to the result, use previous index or reduce it by one
+          if (current_idx - clicked_idx > 0)
+            setCurrentIndex (current_idx - 1);
+          else if (current_idx - clicked_idx < 0)
+            setCurrentIndex (current_idx);
+        }
+      else if (me->type () != QEvent::MouseButtonDblClick &&
+               me->button() == Qt::RightButton)
+        {
+          // Right click, show context menu
+          setCurrentIndex (clicked_idx);
+          if (! _context_menu->exec (click_pos))
             {
-              int idx = currentIndex ();
-              // Make the clicked tab the current one and close it
-              setCurrentIndex (i);
-              emit close_current_tab_signal (true);
-              // Was the closed tab before or after the previously current tab?
-              // According to the result, use previous index or remove it by one
-              if (idx - i > 0)
-                setCurrentIndex (idx - 1);
-              else if (idx - i < 0)
-                setCurrentIndex (idx);
-              break;
+              // No action selected, back to previous tab
+              setCurrentIndex (current_idx);
             }
+          else
+            {
+              // Was the possibly only closed tab before or after the
+              // previously current tab? According to the result, use previous
+              // index or reduce it by one. Also prevent using a too large
+              // if other or all files were closed.
+              int new_idx = count () - 1;
+              if (new_idx > 0)
+                {
+                  if (current_idx - clicked_idx > 0)
+                    new_idx = current_idx - 1;
+                  else if (current_idx - clicked_idx < 0)
+                    new_idx = current_idx;
+                }
+              if (new_idx >= 0)
+                setCurrentIndex (new_idx);
+            }
+        }
+      else
+        {
+          // regular handling of the mouse event
+          QTabBar::mousePressEvent (me);
         }
     }
   else
     {
       // regular handling of the mouse event
       QTabBar::mousePressEvent (me);
     }
 }
diff --git a/libgui/src/m-editor/file-editor.h b/libgui/src/m-editor/file-editor.h
--- a/libgui/src/m-editor/file-editor.h
+++ b/libgui/src/m-editor/file-editor.h
@@ -45,25 +45,29 @@ along with Octave; see the file COPYING.
 class file_editor_tab_bar : public QTabBar
 {
   Q_OBJECT
 
 public:
 
   file_editor_tab_bar (QWidget *p);
   ~file_editor_tab_bar ();
+  void create_context_menu (QList<QAction*> *actions);
 
 signals:
 
   void close_current_tab_signal (bool);
 
 protected:
 
   void mousePressEvent(QMouseEvent *event);
 
+private:
+
+  QMenu *_context_menu;
 };
 
 
 //
 // subclassed QTabWidget for using custom tabbar
 //
 class file_editor_tab_widget : public QTabWidget
 {
