# HG changeset patch
# User jwe
# Date 845145913 0
#      Sat Oct 12 18:45:13 1996 +0000
# Node ID be4616e361337cf487e96481a296ddd4b101eade
# Parent  4fc9fd1424a93454a4b28fca44c03306f81cfe58
[project @ 1996-10-12 18:45:13 by jwe]

diff --git a/src/pr-output.cc b/src/pr-output.cc
--- a/src/pr-output.cc
+++ b/src/pr-output.cc
@@ -44,17 +44,16 @@ Software Foundation, 59 Temple Place - S
 #include "defun.h"
 #include "error.h"
 #include "gripes.h"
 #include "help.h"
 #include "mappers.h"
 #include "oct-obj.h"
 #include "pager.h"
 #include "pr-output.h"
-#include "pt-const.h"
 #include "sysdep.h"
 #include "utils.h"
 #include "variables.h"
 
 // The maximum field width for a number printed by the default output
 // routines.
 static int Voutput_max_field_width;
 
@@ -73,112 +72,41 @@ static bool Vsplit_long_rows;
 // Current format string for real numbers and the real part of complex
 // numbers.
 static char *curr_real_fmt = 0;
 
 // Current format string for the imaginary part of complex numbers.
 static char *curr_imag_fmt = 0;
 
 // Nonzero means don't do any fancy formatting.
-static int free_format = 0;
+static bool free_format = false;
 
 // Nonzero means print plus sign for nonzero, blank for zero.
-static int plus_format = 0;
+static bool plus_format = false;
 
 // Nonzero means always print like dollars and cents.
-static int bank_format = 0;
+static bool bank_format = false;
 
 // Nonzero means print data in hexadecimal format.
-static int hex_format = 0;
+static bool hex_format = false;
 
 // Nonzero means print data in binary-bit-pattern format.
 static int bit_format = 0;
 
 // Nonzero means don't put newlines around the column number headers.
-static int compact_format = 0;
+static bool compact_format = false;
 
 // Nonzero means use an e format.
-static int print_e = 0;
+static bool print_e = false;
 
 // Nonzero means print E instead of e for exponent field.
-static int print_big_e = 0;
-
-static int
-any_element_is_negative (const Matrix& a)
-{
-  int nr = a.rows ();
-  int nc = a.columns ();
-  for (int j = 0; j < nc; j++)
-    for (int i = 0; i < nr; i++)
-      if (a (i, j) < 0.0)
-	return 1;
-  return 0;
-}
+static bool print_big_e = false;
 
 // XXX FIXME XXX -- these should probably be somewhere else.
 
-int
-any_element_is_inf_or_nan (const Matrix& a)
-{
-  int nr = a.rows ();
-  int nc = a.columns ();
-  for (int j = 0; j < nc; j++)
-    for (int i = 0; i < nr; i++)
-      {
-	double val = a (i, j);
-	if (xisinf (val) || xisnan (val))
-	  return 1;
-      }
-  return 0;
-}
-
-int
-any_element_is_inf_or_nan (const ComplexMatrix& a)
-{
-  int nr = a.rows ();
-  int nc = a.columns ();
-  for (int j = 0; j < nc; j++)
-    for (int i = 0; i < nr; i++)
-      {
-	Complex val = a (i, j);
-	if (xisinf (val) || xisnan (val))
-	  return 1;
-      }
-  return 0;
-}
-
-static int
-all_elements_are_int_or_inf_or_nan (const Matrix& a)
-{
-  int nr = a.rows ();
-  int nc = a.columns ();
-  for (int j = 0; j < nc; j++)
-    for (int i = 0; i < nr; i++)
-      {
-	double val = a (i, j);
-	if (xisnan (val) || D_NINT (val) == val)
-	  continue;
-	else
-	  return 0;
-      }
-  return 1;
-}
-
-static Matrix
-abs (const Matrix& a)
-{
-  int nr = a.rows ();
-  int nc = a.columns ();
-  Matrix retval (nr, nc);
-  for (int j = 0; j < nc; j++)
-    for (int i = 0; i < nr; i++)
-      retval (i, j) = fabs (a (i, j));
-  return retval;
-}
-
 static double
 pr_max_internal (const Matrix& m)
 {
   int nr = m.rows ();
   int nc = m.columns ();
 
   double result = DBL_MIN;
 
@@ -215,17 +143,17 @@ pr_min_internal (const Matrix& m)
       }
   return result;
 }
 
 // XXX FIXME XXX -- it would be nice to share more code among these
 // functions,..
 
 static void
-set_real_format (int sign, int digits, int inf_or_nan, int nan_or_int,
+set_real_format (bool sign, int digits, bool inf_or_nan, bool nan_or_int,
 		 int &fw)
 {
   static char fmt_buf[128];
 
   int prec = Voutput_precision;
 
   int ld, rd;
 
@@ -305,21 +233,21 @@ static void
 set_format (double d, int& fw)
 {
   curr_real_fmt = 0;
   curr_imag_fmt = 0;
 
   if (free_format)
     return;
 
-  int sign = (d < 0.0);
+  bool sign = (d < 0.0);
 
-  int inf_or_nan = (xisinf (d) || xisnan (d));
+  bool inf_or_nan = (xisinf (d) || xisnan (d));
 
-  int nan_or_int = (xisnan (d) || D_NINT (d) == d);
+  bool nan_or_int = (xisnan (d) || D_NINT (d) == d);
 
   double d_abs = d < 0.0 ? -d : d;
 
   int digits = (inf_or_nan || d_abs == 0.0) ? 0
     : (int) floor (log10 (d_abs) + 1.0);
 
   set_real_format (sign, digits, inf_or_nan, nan_or_int, fw);
 }
@@ -327,18 +255,18 @@ set_format (double d, int& fw)
 static inline void
 set_format (double d)
 {
   int fw;
   set_format (d, fw);
 }
 
 static void
-set_real_matrix_format (int sign, int x_max, int x_min,
-			int inf_or_nan, int int_or_inf_or_nan, int& fw)
+set_real_matrix_format (bool sign, int x_max, int x_min,
+			bool inf_or_nan, int int_or_inf_or_nan, int& fw)
 {
   static char fmt_buf[128];
 
   int prec = Voutput_precision;
 
   int ld, rd;
 
   if (bank_format)
@@ -437,23 +365,23 @@ static void
 set_format (const Matrix& m, int& fw)
 {
   curr_real_fmt = 0;
   curr_imag_fmt = 0;
 
   if (free_format)
     return;
 
-  int sign = any_element_is_negative (m);
+  bool sign = m.any_element_is_negative ();
 
-  int inf_or_nan = any_element_is_inf_or_nan (m);
+  bool inf_or_nan = m.any_element_is_inf_or_nan ();
 
-  int int_or_inf_or_nan = all_elements_are_int_or_inf_or_nan (m);
+  bool int_or_inf_or_nan = m.all_elements_are_int_or_inf_or_nan ();
 
-  Matrix m_abs = abs (m);
+  Matrix m_abs = m.abs ();
   double max_abs = pr_max_internal (m_abs);
   double min_abs = pr_min_internal (m_abs);
 
   int x_max = max_abs == 0.0 ? 0 : (int) floor (log10 (max_abs) + 1.0);
   int x_min = min_abs == 0.0 ? 0 : (int) floor (log10 (min_abs) + 1.0);
 
   set_real_matrix_format (sign, x_max, x_min, inf_or_nan,
 			  int_or_inf_or_nan, fw);
@@ -462,18 +390,18 @@ set_format (const Matrix& m, int& fw)
 static inline void
 set_format (const Matrix& m)
 {
   int fw;
   set_format (m, fw);
 }
 
 static void
-set_complex_format (int sign, int x_max, int x_min, int r_x,
-		    int inf_or_nan, int int_only, int& r_fw, int& i_fw)
+set_complex_format (bool sign, int x_max, int x_min, int r_x,
+		    bool inf_or_nan, int int_only, int& r_fw, int& i_fw)
 {
   static char r_fmt_buf[128];
   static char i_fmt_buf[128];
 
   int prec = Voutput_precision;
 
   int ld, rd;
 
@@ -587,21 +515,21 @@ set_format (const Complex& c, int& r_fw,
   curr_imag_fmt = 0;
 
   if (free_format)
     return;
 
   double rp = c.real ();
   double ip = c.imag ();
 
-  int sign = (rp < 0.0);
+  bool sign = (rp < 0.0);
 
-  int inf_or_nan = (xisinf (c) || xisnan (c));
+  bool inf_or_nan = (xisinf (c) || xisnan (c));
 
-  int int_only = (D_NINT (rp) == rp && D_NINT (ip) == ip);
+  bool int_only = (D_NINT (rp) == rp && D_NINT (ip) == ip);
 
   double r_abs = rp < 0.0 ? -rp : rp;
   double i_abs = ip < 0.0 ? -ip : ip;
 
   int r_x = r_abs == 0.0 ? 0 : (int) floor (log10 (r_abs) + 1.0);
   int i_x = i_abs == 0.0 ? 0 : (int) floor (log10 (i_abs) + 1.0);
 
   int x_max, x_min;
@@ -624,18 +552,18 @@ set_format (const Complex& c, int& r_fw,
 static inline void
 set_format (const Complex& c)
 {
   int r_fw, i_fw;
   set_format (c, r_fw, i_fw);
 }
 
 static void
-set_complex_matrix_format (int sign, int x_max, int x_min,
-			   int r_x_max, int r_x_min, int inf_or_nan,
+set_complex_matrix_format (bool sign, int x_max, int x_min,
+			   int r_x_max, int r_x_min, bool inf_or_nan,
 			   int int_or_inf_or_nan, int& r_fw, int& i_fw)
 {
   static char r_fmt_buf[128];
   static char i_fmt_buf[128];
 
   int prec = Voutput_precision;
 
   int ld, rd;
@@ -750,66 +678,53 @@ set_format (const ComplexMatrix& cm, int
   curr_imag_fmt = 0;
 
   if (free_format)
     return;
 
   Matrix rp = real (cm);
   Matrix ip = imag (cm);
 
-  int sign = any_element_is_negative (rp);
+  bool sign = rp.any_element_is_negative ();
 
-  int inf_or_nan = any_element_is_inf_or_nan (cm);
+  bool inf_or_nan = cm.any_element_is_inf_or_nan ();
 
-  int int_or_inf_or_nan = (all_elements_are_int_or_inf_or_nan (rp)
-			   && all_elements_are_int_or_inf_or_nan (ip));
+  bool int_or_inf_or_nan = (rp.all_elements_are_int_or_inf_or_nan ()
+			    && ip.all_elements_are_int_or_inf_or_nan ());
 
-  Matrix r_m_abs = abs (rp);
+  Matrix r_m_abs = rp.abs ();
   double r_max_abs = pr_max_internal (r_m_abs);
   double r_min_abs = pr_min_internal (r_m_abs);
 
-  Matrix i_m_abs = abs (ip);
+  Matrix i_m_abs = ip.abs ();
   double i_max_abs = pr_max_internal (i_m_abs);
   double i_min_abs = pr_min_internal (i_m_abs);
 
   int r_x_max = r_max_abs == 0.0 ? 0 : (int) floor (log10 (r_max_abs) + 1.0);
   int r_x_min = r_min_abs == 0.0 ? 0 : (int) floor (log10 (r_min_abs) + 1.0);
 
   int i_x_max = i_max_abs == 0.0 ? 0 : (int) floor (log10 (i_max_abs) + 1.0);
   int i_x_min = i_min_abs == 0.0 ? 0 : (int) floor (log10 (i_min_abs) + 1.0);
 
   int x_max = r_x_max > i_x_max ? r_x_max : i_x_max;
   int x_min = r_x_min > i_x_min ? r_x_min : i_x_min;
 
   set_complex_matrix_format (sign, x_max, x_min, r_x_max, r_x_min,
 			     inf_or_nan, int_or_inf_or_nan, r_fw, i_fw);
 }
 
-static int
-all_elements_are_ints (const Range& r)
-{
-  // If the base and increment are ints, the final value in the range
-  // will also be an integer, even if the limit is not.
-
-  double b = r.base ();
-  double i = r.inc ();
-
-  return (! (xisnan (b) || xisnan (i))
-	  && (double) NINT (b) == b && (double) NINT (i) == i);
-}
-
 static inline void
 set_format (const ComplexMatrix& cm)
 {
   int r_fw, i_fw;
   set_format (cm, r_fw, i_fw);
 }
 
 static void
-set_range_format (int sign, int x_max, int x_min, int all_ints, int& fw)
+set_range_format (bool sign, int x_max, int x_min, int all_ints, int& fw)
 {
   static char fmt_buf[128];
 
   int prec = Voutput_precision;
 
   int ld, rd;
 
   if (bank_format)
@@ -906,19 +821,19 @@ set_format (const Range& r, int& fw)
 
   if (r_max < r_min)
     {
       double tmp = r_max;
       r_max = r_min;
       r_min = tmp;
     }
 
-  int sign = (r_min < 0.0);
+  bool sign = (r_min < 0.0);
 
-  int all_ints = all_elements_are_ints (r);
+  bool all_ints = r.all_elements_are_ints ();
 
   double max_abs = r_max < 0.0 ? -r_max : r_max;
   double min_abs = r_min < 0.0 ? -r_min : r_min;
 
   int x_max = max_abs == 0.0 ? 0 : (int) floor (log10 (max_abs) + 1.0);
   int x_min = min_abs == 0.0 ? 0 : (int) floor (log10 (min_abs) + 1.0);
 
   set_range_format (sign, x_max, x_min, all_ints, fw);
@@ -1181,17 +1096,19 @@ octave_print_internal (ostream& os, doub
 
 void
 octave_print_internal (ostream& os, const Matrix& m, bool pr_as_read_syntax,
 		       int extra_indent)
 {
   int nr = m.rows ();
   int nc = m.columns ();
 
-  if (nr == 0 || nc == 0)
+  if (nr == 1 && nc == 1 && ! pr_as_read_syntax)
+    octave_print_internal (os, m (0, 0), pr_as_read_syntax);
+  else if (nr == 0 || nc == 0)
     print_empty_matrix (os, nr, nc, pr_as_read_syntax);
   else if (plus_format && ! pr_as_read_syntax)
     {
       for (int i = 0; i < nr; i++)
 	{
 	  for (int j = 0; j < nc; j++)
 	    {
 	      if (j == 0)
@@ -1333,17 +1250,19 @@ octave_print_internal (ostream& os, cons
 
 void
 octave_print_internal (ostream& os, const ComplexMatrix& cm,
 		       bool pr_as_read_syntax, int extra_indent)
 {
   int nr = cm.rows ();
   int nc = cm.columns ();
 
-  if (nr == 0 || nc == 0)
+  if (nr == 1 && nc == 1 && ! pr_as_read_syntax)
+    octave_print_internal (os, cm (0, 0), pr_as_read_syntax);
+  else if (nr == 0 || nc == 0)
     print_empty_matrix (os, nr, nc, pr_as_read_syntax);
   else if (plus_format && ! pr_as_read_syntax)
     {
       for (int i = 0; i < nr; i++)
 	{
 	  for (int j = 0; j < nc; j++)
 	    {
 	      if (j == 0)
@@ -1595,45 +1514,40 @@ octave_print_internal (ostream& os, cons
 DEFUN (disp, args, ,
   "disp (X): display value without name tag")
 {
   octave_value_list retval;
 
   int nargin = args.length ();
 
   if (nargin == 1)
-    args(0).eval (1);
+    args(0).print ();
   else
     print_usage ("disp");
 
   return retval;
 }
 
 static void
 init_format_state (void)
 {
-  free_format = 0;
-  plus_format = 0;
-  bank_format = 0;
-  hex_format = 0;
+  free_format = false;
+  plus_format = false;
+  bank_format = false;
+  hex_format = false;
   bit_format = 0;
-  print_e = 0;
-  print_big_e = 0;
+  print_e = false;
+  print_big_e = false;
 }
 
 static void
 set_output_prec_and_fw (int prec, int fw)
 {
-  octave_value *tmp = 0;
-
-  tmp = new octave_value ((double) prec);
-  bind_builtin_variable ("output_precision", tmp);
-
-  tmp = new octave_value ((double) fw);
-  bind_builtin_variable ("output_max_field_width", tmp);
+  bind_builtin_variable ("output_precision", (double) prec);
+  bind_builtin_variable ("output_max_field_width", (double) fw);
 }
 
 static void
 set_format_style (int argc, const string_vector& argv)
 {
   int idx = 1;
   string arg = argv[idx++];
 
@@ -1643,23 +1557,23 @@ set_format_style (int argc, const string
 	{
 	  if (--argc > 0)
 	    {
 	      arg = argv[idx++];
 
 	      if (arg == "e")
 		{
 		  init_format_state ();
-		  print_e = 1;
+		  print_e = true;
 		}
 	      else if (arg == "E")
 		{
 		  init_format_state ();
-		  print_e = 1;
-		  print_big_e = 1;
+		  print_e = true;
+		  print_big_e = true;
 		}
 	      else
 		{
 		  error ("format: unrecognized option `short %s'",
 			 arg.c_str ());
 		  return;
 		}
 	    }
@@ -1672,40 +1586,40 @@ set_format_style (int argc, const string
 	{
 	  if (--argc > 0)
 	    {
 	      arg = argv[idx++];
 
 	      if (arg == "e")
 		{
 		  init_format_state ();
-		  print_e = 1;
+		  print_e = true;
 		}
 	      else if (arg == "E")
 		{
 		  init_format_state ();
-		  print_e = 1;
-		  print_big_e = 1;
+		  print_e = true;
+		  print_big_e = true;
 		}
 	      else
 		{
 		  error ("format: unrecognized option `long %s'",
 			 arg.c_str ());
 		  return;
 		}
 	    }
 	  else
 	    init_format_state ();
 
 	  set_output_prec_and_fw (15, 24);
 	}
       else if (arg == "hex")
 	{
 	  init_format_state ();
-	  hex_format = 1;
+	  hex_format = true;
 	}
       else if (arg == "native-hex")
 	{
 	  init_format_state ();
 	  hex_format = 2;
 	}
       else if (arg == "bit")
 	{
@@ -1715,40 +1629,40 @@ set_format_style (int argc, const string
       else if (arg == "native-bit")
 	{
 	  init_format_state ();
 	  bit_format = 2;
 	}
       else if (arg == "+" || arg == "plus")
 	{
 	  init_format_state ();
-	  plus_format = 1;
+	  plus_format = true;
 	}
       else if (arg == "bank")
 	{
 	  init_format_state ();
-	  bank_format = 1;
+	  bank_format = true;
 	}
       else if (arg == "free")
 	{
 	  init_format_state ();
-	  free_format = 1;
+	  free_format = true;
 	}
       else if (arg == "none")
 	{
 	  init_format_state ();
-	  free_format = 1;
+	  free_format = true;
 	}
       else if (arg == "compact")
 	{
-	  compact_format = 1;
+	  compact_format = true;
 	}
       else if (arg == "loose")
 	{
-	  compact_format = 0;
+	  compact_format = false;
 	}
       else
 	error ("format: unrecognized format state `%s'", arg.c_str ());
     }
   else
     {
       init_format_state ();
       set_output_prec_and_fw (5, 10);
diff --git a/src/pr-output.h b/src/pr-output.h
--- a/src/pr-output.h
+++ b/src/pr-output.h
@@ -50,22 +50,16 @@ extern void octave_print_internal (ostre
 				   bool pr_as_read_syntax = false,
 				   int extra_indent = 0);
 
 extern void octave_print_internal (ostream& os, const charMatrix& chm,
 				   bool pr_as_read_syntax = false,
 				   bool pr_as_string = false,
 				   int extra_indent = 0);
 
-// XXX FIXME XXX -- these should probably be somewhere else.
-
-extern int any_element_is_inf_or_nan (const Matrix& a);
-
-extern int any_element_is_inf_or_nan (const ComplexMatrix& a);
-
 extern void symbols_of_pr_output (void);
 
 #endif
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
