# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1245821492 -7200
#      Wed Jun 24 07:31:32 2009 +0200
# Branch release-3-2-x
# Node ID 67ad3b58b99a20736f526e13118c026f11191717
# Parent  00b55509f5b59d83de167154221808289b16e087
improve error handling

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,20 @@
+2009-06-23  Jaroslav Hajek  <highegg@gmail.com>
+
+	* quit.h (octave_quit_exception): Delete.
+	(exit_status, quitting_gracefully): New globals.
+	* quit.cc: Initialize them.
+	(Fquit): Set the globals, simulate interrupt.
+	(main_loop): Handle exit properly.
+	* octave.cc (execute_eval_option_code): Ditto.
+	(execute_command_line_file): Ditto.
+	* pt-eval.cc (do_unwind_protect_cleanup_code):
+	Fix order of unwind_protect calls.
+
 2009-06-23  John W. Eaton  <jwe@octave.org>
 
 	* oct-map.cc (Octave_map::squeeze, Octave_map::permute,
 	Octave_map::transpose, Octave_map::reshape, Octave_map::concat):
 	Preserve key order.
 
 2009-06-22  Jaroslav Hajek  <highegg@gmail.com>
 
diff --git a/src/octave.cc b/src/octave.cc
--- a/src/octave.cc
+++ b/src/octave.cc
@@ -389,25 +389,22 @@ execute_eval_option_code (const std::str
   interactive = false;
 
   int parse_status = 0;
 
   try
     {
       eval_string (code, false, parse_status, 0);
     }
-  catch (octave_quit_exception e)
-    {
-      unwind_protect::run_frame ("execute_eval_option_code");
-      clean_up_and_exit (e.status);
-    }
   catch (octave_interrupt_exception)
     {
       recover_from_exception ();
       octave_stdout << "\n";
+      if (quitting_gracefully)
+        clean_up_and_exit (exit_status);
     }
   catch (std::bad_alloc)
     {
       std::cerr << "error: memory exhausted or requested size too large for range of Octave's index type -- eval failed"
 		<< std::endl;
     }
 
   unwind_protect::run_frame ("execute_eval_option_code");
@@ -461,25 +458,22 @@ execute_command_line_file (const std::st
   try
     {
       std::string context;
       bool verbose = false;
       bool require_file = true;
 
       source_file (fname, context, verbose, require_file, "octave");
     }
-  catch (octave_quit_exception e)
-    {
-      unwind_protect::run_frame ("execute_command_line_file");
-      clean_up_and_exit (e.status);
-    }
   catch (octave_interrupt_exception)
     {
       recover_from_exception ();
       octave_stdout << "\n";
+      if (quitting_gracefully)
+        clean_up_and_exit (exit_status);
     }
   catch (std::bad_alloc)
     {
       std::cerr << "error: memory exhausted or requested size too large for range of Octave's index type -- execution of "
 		<< fname << " failed" << std::endl;
     }
  
   unwind_protect::run_frame ("execute_command_line_file");
diff --git a/src/pt-eval.cc b/src/pt-eval.cc
--- a/src/pt-eval.cc
+++ b/src/pt-eval.cc
@@ -904,27 +904,27 @@ tree_evaluator::visit_try_catch_command 
     }
 }
 
 static void
 do_unwind_protect_cleanup_code (void *ptr)
 {
   tree_statement_list *list = static_cast<tree_statement_list *> (ptr);
 
+  unwind_protect_int (octave_interrupt_state);
+  octave_interrupt_state = 0;
+
   // We want to run the cleanup code without error_state being set,
   // but we need to restore its value, so that any errors encountered
   // in the first part of the unwind_protect are not completely
   // ignored.
 
   unwind_protect_int (error_state);
   error_state = 0;
 
-  unwind_protect_int (octave_interrupt_state);
-  octave_interrupt_state = 0;
-
   // Similarly, if we have seen a return or break statement, allow all
   // the cleanup code to run before returning or handling the break.
   // We don't have to worry about continue statements because they can
   // only occur in loops.
 
   unwind_protect_int (tree_return_command::returning);
   tree_return_command::returning = 0;
 
diff --git a/src/toplev.cc b/src/toplev.cc
--- a/src/toplev.cc
+++ b/src/toplev.cc
@@ -80,17 +80,19 @@ along with Octave; see the file COPYING.
 #include <version.h>
 
 void (*octave_exit) (int) = ::exit;
 
 // TRUE means the quit() call is allowed.
 bool quit_allowed = true;
 
 // TRUE means we are exiting via the builtin exit or quit functions.
-static bool quitting_gracefully = false;
+bool quitting_gracefully = false;
+// This stores the exit status.
+int exit_status = 0;
 
 // TRUE means we are ready to interpret commands, but not everything
 // is ready for interactive use.
 bool octave_interpreter_ready = false;
 
 // TRUE means we've processed all the init code and we are good to go.
 bool octave_initialized = false;
 
@@ -608,25 +610,25 @@ main_loop (void)
 		    }
 		}
 	      else if (parser_end_of_input)
 		break;
 	    }
 
 	  unwind_protect::run_frame ("main_loop");
 	}
-      catch (octave_quit_exception e)
-        {
-          unwind_protect::run_all ();
-          clean_up_and_exit (e.status);
-        }
       catch (octave_interrupt_exception)
 	{
 	  recover_from_exception ();
-	  octave_stdout << "\n";
+          octave_stdout << "\n";
+          if (quitting_gracefully)
+            {
+              clean_up_and_exit (exit_status);
+              break; // If user has overriden the exit func.
+            }
 	}
       catch (octave_execution_exception)
 	{
 	  recover_from_exception ();
 	  std::cerr
 	    << "error: unhandled execution exception -- trying to return to prompt"
 	    << std::endl;
 	}
@@ -666,29 +668,34 @@ Octave's exit status.  The default value
 @end deftypefn")
 {
   octave_value_list retval;
 
   if (! quit_allowed)
     error ("quit: not supported in embedded mode.");
   else if (nargout == 0)
     {
-      int exit_status = 0;
-
-      quitting_gracefully = true;
-
       if (args.length () > 0)
 	{
 	  int tmp = args(0).nint_value ();
 
 	  if (! error_state)
 	    exit_status = tmp;
 	}
 
-      throw octave_quit_exception (exit_status);
+      if (! error_state)
+        {
+          quitting_gracefully = true;
+
+          // Simulate interrupt.
+
+          octave_interrupt_state = -1;
+
+          octave_throw_interrupt_exception ();
+        }
     }
   else
     error ("quit: invalid number of output arguments");
 
   return retval;
 }
 
 DEFALIAS (exit, quit);
@@ -979,17 +986,32 @@ do_octave_atexit (void)
   while (! octave_atexit_functions.empty ())
     {
       std::string fcn = octave_atexit_functions.front ();
 
       octave_atexit_functions.pop_front ();
 
       reset_error_handler ();
 
-      feval (fcn, octave_value_list (), 0);
+      try
+        {
+          feval (fcn, octave_value_list (), 0);
+        }
+      catch (octave_interrupt_exception)
+	{
+	  recover_from_exception ();
+	}
+      catch (octave_execution_exception)
+	{
+	  recover_from_exception ();
+	}
+      catch (std::bad_alloc)
+	{
+	  recover_from_exception ();
+	}
 
       flush_octave_stdout ();
     }
 
   if (! deja_vu)
     {
       deja_vu = true;
 
diff --git a/src/toplev.h b/src/toplev.h
--- a/src/toplev.h
+++ b/src/toplev.h
@@ -43,25 +43,19 @@ class charMatrix;
 #include "oct-map.h"
 
 
 typedef void (*octave_exit_func) (int);
 extern OCTINTERP_API octave_exit_func octave_exit;
 
 extern OCTINTERP_API bool quit_allowed;
 
-// quit is a lot like an interrupt, so we subclass it to simplify possible
-// handling.
-class octave_quit_exception 
-: public octave_interrupt_exception
-{
-public:
-  int status;
-  octave_quit_exception (int s) : status (s) { }
-};
+extern OCTINTERP_API bool quitting_gracefully;
+
+extern OCTINTERP_API int exit_status;
 
 extern OCTINTERP_API void
 clean_up_and_exit (int);
 
 extern OCTINTERP_API void recover_from_exception (void);
 
 extern OCTINTERP_API int main_loop (void);
 
