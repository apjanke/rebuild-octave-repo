# HG changeset patch
# User Rik <rik@octave.org>
# Date 1363188496 25200
#      Wed Mar 13 08:28:16 2013 -0700
# Node ID 4a1300ed5d3cd07b87f38529256a36c699aa02f5
# Parent  0925d1f6875e3fcf4cdff3c495d3a2bc08384bad
Convert logical class to Java Boolean class when passing args to Java functions.

* libinterp/octave-value/ov-java.cc(unbox): Move check for bool type under
check for is_real_scalar which includes double, float, and bool types.

diff --git a/libinterp/octave-value/ov-java.cc b/libinterp/octave-value/ov-java.cc
--- a/libinterp/octave-value/ov-java.cc
+++ b/libinterp/octave-value/ov-java.cc
@@ -1219,16 +1219,25 @@ unbox (JNIEnv* jni_env, const octave_val
         {
           double dval = val.double_value ();
           jclass_ref dcls (jni_env, jni_env->FindClass ("java/lang/Double"));
           jfieldID fid = jni_env->GetStaticFieldID (dcls, "TYPE", "Ljava/lang/Class;");
           jmethodID mid = jni_env->GetMethodID (dcls, "<init>", "(D)V");
           jcls = reinterpret_cast<jclass> (jni_env->GetStaticObjectField (dcls, fid));
           jobj = jni_env->NewObject (dcls, mid, dval);
         }
+      else if (val.is_bool_type ())
+        {
+          bool bval = val.bool_value ();
+          jclass_ref bcls (jni_env, jni_env->FindClass ("java/lang/Boolean"));
+          jfieldID fid = jni_env->GetStaticFieldID (bcls, "TYPE", "Ljava/lang/Class;");
+          jmethodID mid = jni_env->GetMethodID (bcls, "<init>", "(Z)V");
+          jcls = reinterpret_cast<jclass> (jni_env->GetStaticObjectField (bcls, fid));
+          jobj = jni_env->NewObject (bcls, mid, bval);
+        }
       else
         {
           float fval = val.float_scalar_value ();
           jclass_ref fcls (jni_env, jni_env->FindClass ("java/lang/Float"));
           jfieldID fid = jni_env->GetStaticFieldID (fcls, "TYPE", "Ljava/lang/Class;");
           jmethodID mid = jni_env->GetMethodID (fcls, "<init>", "(F)V");
           jcls = reinterpret_cast<jclass> (jni_env->GetStaticObjectField (fcls, fid));
           jobj = jni_env->NewObject (fcls, mid, fval);
@@ -1238,25 +1247,16 @@ unbox (JNIEnv* jni_env, const octave_val
     {
       int32_t ival = val.int32_scalar_value ();
       jclass_ref icls (jni_env, jni_env->FindClass ("java/lang/Integer"));
       jfieldID fid = jni_env->GetStaticFieldID (icls, "TYPE", "Ljava/lang/Class;");
       jmethodID mid = jni_env->GetMethodID (icls, "<init>", "(I)V");
       jcls = reinterpret_cast<jclass> (jni_env->GetStaticObjectField (icls, fid));
       jobj = jni_env->NewObject (icls, mid, ival);
     }
-  else if (val.is_bool_scalar ())
-   {
-      bool bval = val.bool_value ();
-      jclass_ref bcls (jni_env, jni_env->FindClass ("java/lang/Boolean"));
-      jfieldID fid = jni_env->GetStaticFieldID (bcls, "TYPE", "Ljava/lang/Class;");
-      jmethodID mid = jni_env->GetMethodID (bcls, "<init>", "(Z)V");
-      jcls = reinterpret_cast<jclass> (jni_env->GetStaticObjectField (bcls, fid));
-      jobj = jni_env->NewObject (bcls, mid, bval);
-   }
   else if (val.is_empty ())
     {
       jobj = 0;
       jcls = 0;
       //jcls = jni_env->FindClass ("java/lang/Object");
     }
   else if (!Vjava_matrix_autoconversion
            && ((val.is_real_matrix ()
