# HG changeset patch
# User jwe
# Date 1034369841 0
#      Fri Oct 11 20:57:21 2002 +0000
# Node ID ea537559ab070bf4d0f473878cc8faae80256efe
# Parent  ed0090ecf80f3191e2b83778a311705895218f83
[project @ 2002-10-11 20:57:21 by jwe]

diff --git a/ChangeLog b/ChangeLog
--- a/ChangeLog
+++ b/ChangeLog
@@ -1,8 +1,13 @@
+2002-10-11  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* configure.in (AH_BOTTOM): Maybe define OCTAVE_USE_WINDOWS_API
+	and OCTAVE_HAVE_WINDOWS_FILESYSTEM.
+
 2002-10-09  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* aclocal.m4 (OCTAVE_PROG_GNUPLOT): AC_DEFINE GNUPLOT_BINARY
 	Default value on Windows systems is pgnuplot.
 	If not cross compiling and no gnuplot program is found, set
 	default to gnuplot.  Set defaults for multiplot and frames.  Check
 	for pgnpuplot, pipe-gnuplot, and gnuplot on Windows systems.
 
diff --git a/configure.in b/configure.in
--- a/configure.in
+++ b/configure.in
@@ -17,17 +17,17 @@ dnl Copyright (C) 1996, 1997 John W. Eat
 ### for more details.
 ### 
 ### You should have received a copy of the GNU General Public License
 ### along with Octave; see the file COPYING.  If not, write to the Free
 ### Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ### 02111-1307, USA. 
 
 AC_INIT
-AC_REVISION($Revision: 1.374 $)
+AC_REVISION($Revision: 1.375 $)
 AC_PREREQ(2.52)
 AC_CONFIG_SRCDIR([src/octave.cc])
 AC_CONFIG_HEADER(config.h)
 
 AC_DEFINE(OCTAVE_SOURCE, 1, [Define if this is Octave.])
   
 OCTAVE_HOST_TYPE
 
@@ -1283,16 +1283,30 @@ typedef unsigned long ino_t;
 
 #if !defined(HAVE_NLINK_T)
 typedef short nlink_t;
 #endif
 
 #if !defined(HAVE_SIGSET_T)
 typedef int sigset_t;
 #endif
+
+#define OCTAVE_HAVE_POSIX_FILESYSTEM 1
+
+#if defined (__WIN32__)
+#define OCTAVE_HAVE_WINDOWS_FILESYSTEM 1
+#if ! defined (__CYGWIN__)
+#undef OCTAVE_HAVE_POSIX_FILESYSTEM
+#endif
+#endif
+
+/* Define if we expect to have <windows.h>, Sleep, etc. */
+#if defined (__WIN32__) || ! defined (__CYGWIN__)
+#define OCTAVE_USE_WINDOWS_API 1
+#endif
 ])
 
 ### Do the substitutions in all the Makefiles.
 
 AC_CONFIG_FILES([Makefile octMakefile Makeconf install-octave \
   test/Makefile dlfcn/Makefile \
   doc/Makefile doc/faq/Makefile doc/interpreter/Makefile \
   doc/liboctave/Makefile doc/refcard/Makefile emacs/Makefile \
diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,34 @@
+2002-10-11  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* oct-time.cc: Use OCTAVE_USE_WINDOWS_API instead of __WIN32__ and
+	__CYGWIN__.
+
+	* file-ops.cc (file_ops::dir_sep_char, file_ops::dir_sep_str,
+	file_ops::dir_sep_chars): New static functions to replace
+	OCTAVE_DIR_SEP_CHAR, OCTAVE_DIR_SEP_STR, OCTAVE_DIR_SEP_CHARS.
+
+	* oct-env.cc (octave_env::do_set_program_name):
+	Use file_ops::dir_sep_chars instead of OCTAVE_DIR_SEP_CHARS.
+	(octave_env::do_base_pathname): Likewise.
+	(octave_env::do_make_absolute): Likewise.
+
+	* oct-env.cc (octave_env::do_make_absolute):
+	Use file_ops::dir_sep_str instead of OCTAVE_DIR_SEP_STR.
+	(octave_env::do_get_home_directory): Likewise.
+
+	* file-ops.cc (is_dir_sep): Use dir_sep_chars instead of embedding
+	that information here too.
+	(tilde_find_suffix, isolate_tilde_prefix, tilde_expand_word):
+	Use file_ops::dir_sep_char instead of OCTAVE_DIR_SEP_CHAR.
+
+	* file-ops.h: Use OCTAVE_HAVE_WINDOWS_FILESYSTEM and
+	OCTAVE_HAVE_POSIX_FILESYSTEM instead of __WIN32__ and __CYGWIN__.
+
 2002-10-09  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* oct-env.h (octave_env::current_directory): Now mutable.
 	(octave_env:do_getcwd): Now const.
 
 	* file-ops.h, file-ops.cc (file_ops::is_dir_sep): New function.
 	(OCTAVE_DIR_SEP_CHAR, OCTAVE_DIR_SEP_STR, OCTAVE_DIR_SEP_CHARS,
 	OCTAVE_CURRENT_DIR_STR): New macros.
diff --git a/liboctave/file-ops.cc b/liboctave/file-ops.cc
--- a/liboctave/file-ops.cc
+++ b/liboctave/file-ops.cc
@@ -44,16 +44,32 @@ Software Foundation, 59 Temple Place - S
 #include "oct-passwd.h"
 #include "pathlen.h"
 #include "statdefs.h"
 #include "str-vec.h"
 
 #define NOT_SUPPORTED(nm) \
   nm ": not supported on this system"
 
+#if (defined (OCTAVE_HAVE_WINDOWS_FILESYSTEM) \
+     && ! defined (OCTAVE_HAVE_POSIX_FILESYSTEM))
+char file_ops::dir_sep_char = '\\';
+std::string file_ops::dir_sep_str ("\\");
+#else
+char file_ops::dir_sep_char = '/';
+std::string file_ops::dir_sep_str ("/");
+#endif
+
+#if (defined (OCTAVE_HAVE_WINDOWS_FILESYSTEM) \
+     && defined (OCTAVE_HAVE_POSIX_FILESYSTEM))
+std::string file_ops::dir_sep_chars ("/\\");
+#else
+std::string file_ops::dir_sep_chars (file_ops::dir_sep_str);
+#endif
+
 // We provide a replacement for mkdir().
 
 int
 file_ops::mkdir (const std::string& name, mode_t mode)
 {
   std::string msg;
   return mkdir (name, mode, msg);
 }
@@ -319,19 +335,16 @@ file_ops::tempnam (const std::string& di
     }
 
   return retval;
 }
 
 // The following tilde-expansion code was stolen and adapted from
 // readline.
 
-// XXX FIXME XXX
-#define DIR_SEP_CHAR '/'
-
 // The default value of tilde_additional_prefixes.  This is set to
 // whitespace preceding a tilde so that simple programs which do not
 // perform any word separation get desired behaviour.
 static const char *default_prefixes[] = { " ~", "\t~", ":~", 0 };
 
 // The default value of tilde_additional_suffixes.  This is set to
 // whitespace or newline so that simple programs which do not perform
 // any word separation get desired behaviour.
@@ -407,17 +420,17 @@ tilde_find_suffix (const std::string& s)
   size_t s_len = s.length ();
 
   string_vector suffixes = file_ops::tilde_additional_suffixes;
 
   size_t i = 0;
 
   for ( ; i < s_len; i++)
     {
-      if (s[i] == DIR_SEP_CHAR)
+      if (s[i] == file_ops::dir_sep_char)
 	break;
 
       if (! suffixes.empty ())
 	{
 	  for (int j = 0; j < suffixes.length (); j++)
 	    {
 	      size_t sfx_len = suffixes[j].length ();
 
@@ -434,17 +447,17 @@ tilde_find_suffix (const std::string& s)
 
 static std::string
 isolate_tilde_prefix (const std::string& fname)
 {
   size_t f_len = fname.length ();
 
   size_t len = 1;
 
-  while (len < f_len && fname[len] != DIR_SEP_CHAR)
+  while (len < f_len && fname[len] != file_ops::dir_sep_char)
     len++;
 
   return fname.substr (1, len);
 }
 
 // Do the work of tilde expansion on FILENAME.  FILENAME starts with a
 // tilde.
 
@@ -455,17 +468,17 @@ tilde_expand_word (const std::string& fi
 
   if (f_len == 0 || filename[0] != '~')
     return filename;
 
   // A leading `~/' or a bare `~' is *always* translated to the value
   // of $HOME or the home directory of the current user, regardless of
   // any preexpansion hook.
 
-  if (f_len == 1 || filename[1] == DIR_SEP_CHAR)
+  if (f_len == 1 || filename[1] == file_ops::dir_sep_char)
     return octave_env::get_home_directory () + filename.substr (1);
 
   std::string username = isolate_tilde_prefix (filename);
 
   size_t user_len = username.length ();
 
   std::string dirname;
 
@@ -618,20 +631,16 @@ file_ops::unlink (const std::string& nam
 #endif
 
   return status;
 }
 
 bool
 file_ops::is_dir_sep (char c)
 {
-#if defined (__WIN32__) || defined (__CYGWIN__)
-  return (c == '/' || c == '\\');
-#else
-  return (c == '/');
-#endif
+  return dir_sep_chars.find (c) != NPOS;
 }
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
diff --git a/liboctave/file-ops.h b/liboctave/file-ops.h
--- a/liboctave/file-ops.h
+++ b/liboctave/file-ops.h
@@ -73,25 +73,21 @@ file_ops
   static string_vector tilde_expand (const string_vector&);
 
   static int umask (mode_t);
 
   static int unlink (const std::string&);
   static int unlink (const std::string&, std::string&);
 
   static bool is_dir_sep (char);
+
+  static char dir_sep_char;
+  static std::string dir_sep_str;
+  static std::string dir_sep_chars;
 };
 
-#define OCTAVE_DIR_SEP_CHAR '/'
-#define OCTAVE_DIR_SEP_STR "/"
-#if defined (__WIN32__) || defined (__CYGWIN__)
-#define OCTAVE_DIR_SEP_CHARS "/\\"
-#else
-#define OCTAVE_DIR_SEP_CHARS OCTAVE_DIR_SEP_STR
-#endif
-
 #endif
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
diff --git a/liboctave/oct-env.cc b/liboctave/oct-env.cc
--- a/liboctave/oct-env.cc
+++ b/liboctave/oct-env.cc
@@ -196,17 +196,17 @@ octave_env::chdir (const std::string& ne
     ? instance->do_chdir (newdir) : false;
 }
 
 void
 octave_env::do_set_program_name (const std::string& s) const
 {
   program_invocation_name = s;
 
-  size_t pos = program_invocation_name.find_last_of (OCTAVE_DIR_SEP_CHARS);
+  size_t pos = program_invocation_name.find_last_of (file_ops::dir_sep_chars);
 
   program_name = (pos == NPOS)
     ? program_invocation_name : program_invocation_name.substr (pos+1);
 }
 
 // Return a pretty pathname.  If the first part of the pathname is the
 // same as $HOME, then replace that with `~'.
 
@@ -237,17 +237,17 @@ octave_env::do_absolute_pathname (const 
   size_t len = s.length ();
 
   if (len == 0)
     return false;
 
   if (file_ops::is_dir_sep (s[0]))
     return true;
 
-#if defined (__WIN32__) || defined (__CYGWIN__)
+#if defined (OCTAVE_HAVE_WINDOWS_FILESYSTEM)
   if ((len == 2 && isalpha (s[0]) && s[1] == ':')
       || (len > 2 && isalpha (s[0]) && s[1] == ':'
 	  && file_ops::is_dir_sep (s[2])))
     return true;
 #endif
 
   return false;
 }
@@ -257,17 +257,17 @@ octave_env::do_absolute_pathname (const 
 // simply return it.
 
 std::string
 octave_env::do_base_pathname (const std::string& s) const
 {
   if (! do_absolute_pathname (s))
     return s;
 
-  size_t pos = s.find_last_of (OCTAVE_DIR_SEP_CHARS);
+  size_t pos = s.find_last_of (file_ops::dir_sep_chars);
 
   if (pos == NPOS)
     return s;
   else
     return s.substr (pos+1);
 }
 
 // Turn STRING (a pathname) into an absolute pathname, assuming that
@@ -288,17 +288,17 @@ octave_env::do_make_absolute (const std:
   std::string current_dir = dot_path;
 
   if (current_dir.empty ())
     current_dir = do_getcwd ();
 
   size_t pos = current_dir.length () - 1;
 
   if (! file_ops::is_dir_sep (current_dir[pos]))
-    current_dir.append (OCTAVE_DIR_SEP_STR);
+    current_dir.append (file_ops::dir_sep_str);
 
   // XXX FIXME XXX -- this is probably not correct for all systems.
 
   size_t i = 0;
   size_t slen = s.length ();
 
   while (i < slen)
     {
@@ -322,17 +322,17 @@ octave_env::do_make_absolute (const std:
 		i++;
 
 	      pathname_backup (current_dir, 1);
 
 	      continue;
 	    }
 	}
 
-      size_t tmp = s.find_first_of (OCTAVE_DIR_SEP_CHARS, i);
+      size_t tmp = s.find_first_of (file_ops::dir_sep_chars, i);
 
       if (tmp == NPOS)
 	{
 	  current_dir.append (s, i, tmp-i);
 	  break;
 	}
       else
 	{
@@ -365,17 +365,17 @@ std::string
 octave_env::do_get_home_directory (void) const
 {
   std::string hd = do_getenv ("HOME");
 
   if (hd.empty ())
     {
       octave_passwd pw = octave_passwd::getpwuid (octave_syscalls::getuid ());
 
-      hd = pw ? pw.dir () : std::string (OCTAVE_DIR_SEP_STR);
+      hd = pw ? pw.dir () : std::string (file_ops::dir_sep_str);
     }
 
   return hd;
 }
 
 std::string
 octave_env::do_get_user_name (void) const
 {
diff --git a/liboctave/oct-time.cc b/liboctave/oct-time.cc
--- a/liboctave/oct-time.cc
+++ b/liboctave/oct-time.cc
@@ -29,17 +29,17 @@ Software Foundation, 59 Temple Place - S
 
 #ifdef HAVE_UNISTD_H
 #ifdef HAVE_SYS_TYPES_H
 #include <sys/types.h>
 #endif
 #include <unistd.h>
 #endif
 
-#if defined (__WIN32__)  && ! defined (HAVE_GETTIMEOFDAY)
+#if defined (OCTAVE_USE_WINDOWS_API)
 #include <windows.h>
 #endif
 
 #include "lo-error.h"
 #include "lo-utils.h"
 #include "oct-time.h"
 
 octave_time::octave_time (const octave_base_tm& tm)
@@ -88,17 +88,17 @@ octave_time::stamp (void)
   gettimeofday (&tp);
 #else
   gettimeofday (&tp, 0);
 #endif
 
   ot_unix_time = tp.tv_sec;
   ot_usec = tp.tv_usec;
 
-#elif defined (__WIN32__)
+#elif defined (OCTAVE_USE_WINDOWS_API)
 
   // Loosely based on the code from Cygwin
   // Copyright 1996-2002 Red Hat, Inc.
   // Licenced under the GPL.
 
   const LONGLONG TIME_OFFSET = 0x19db1ded53e8000LL;
 
   static int init = 1;
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,10 +1,23 @@
 2002-10-11  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
+	* lex.l (handle_identifier): Don't enter token in local symbol
+	table if the following token is a dot and it looks like a binary
+	operator.
+	(force_local_variable): If name is not a variable, clear it before
+	defining.
+
+	* oct-procbuf.cc (Vkluge_procbuf_delay): Make default 0 for all
+	systems.
+
+	* octave.cc (execute_startup_files, initialize_pathsearch):
+	Use file_ops::dir_sep_str instead of OCTAVE_DIR_SEP_STR.
+	(main): Use file_ops::dir_sep_chars instead of OCTAVE_DIR_SEP_CHARS.
+
 	* ov-re-mat.cc (octave_matrix::convert_to_str): Warn for out of
 	range conversions.  For negative values, set to 0.
 	* ov-scalar.cc (octave_scalar:convert_to_str): Likewise.
 
 	* mappers.cc (xabs): New static function.
 	(install_mapper_functions): Use it for abs for character matrices.
 	Handle ch_map_flag separately from can_ret_cmplx_for_real in
 	all uses of DEFUN_MAPPER.
diff --git a/src/file-io.cc b/src/file-io.cc
--- a/src/file-io.cc
+++ b/src/file-io.cc
@@ -1132,17 +1132,17 @@ Two byte integer.\n\
 @itemx \"int32\"\n\
 Four byte integer.\n\
 @end table\n\
 \n\
 @noindent\n\
 The default precision is @code{\"uchar\"}.\n\
 \n\
 The optional argument @var{skip} specifies the number of bytes to skip\n\
-before each element is read.  If it is not specified, a value of 0 is\n\
+after each element is read.  If it is not specified, a value of 0 is\n\
 assumed.\n\
 \n\
 The optional argument @var{arch} is a string specifying the data format\n\
 for the file.  Valid values are\n\
 \n\
 @table @code\n\
 @item \"native\"\n\
 The format of the current machine.\n\
diff --git a/src/lex.l b/src/lex.l
--- a/src/lex.l
+++ b/src/lex.l
@@ -1242,16 +1242,19 @@ is_variable (const std::string& name)
   symbol_record *sr = curr_sym_tab->lookup (name);
 
   return sr && sr->is_variable ();
 }
 
 static void
 force_local_variable (const std::string& name)
 {
+  if (! is_variable (name))
+    curr_sym_tab->clear (name);
+
   symbol_record *sr = curr_sym_tab->lookup (name, true);
 
   if (sr)
     sr->define (octave_value ());
 }
 
 // Grab the help text from an function file.  Always overwrites the
 // current contents of help_buf.
@@ -2308,17 +2311,16 @@ handle_identifier (void)
 	plot_option_kw = is_plot_keyword (tok);
       
       if (lexer_flags.cant_be_identifier && plot_option_kw)
 	TOK_RETURN (plot_option_kw);
     }
 
   int c1 = yyinput ();
 
-  bool next_tok_is_dot = (c1 == '.');
   bool next_tok_is_paren = (c1 == '(');
 
   bool next_tok_is_eq = false;
   if (c1 == '=')
     {
       int c2 = yyinput ();
       unput (c2);
 
@@ -2351,18 +2353,17 @@ handle_identifier (void)
   // something like [ab,cd] = foo (), force the symbol to be inserted
   // as a variable in the current symbol table.
 
   if (is_text_function_name (tok) && ! is_variable (tok))
     {
       if (next_tok_is_eq
 	  || lexer_flags.looking_at_return_list
 	  || lexer_flags.looking_at_parameter_list
-	  || lexer_flags.looking_at_matrix_or_assign_lhs
-	  || (next_tok_is_dot && next_token_is_bin_op (spc_gobbled)))
+	  || lexer_flags.looking_at_matrix_or_assign_lhs)
 	{
 	  force_local_variable (tok);
 	}
       else if (! next_tok_is_paren)
 	{
 	  if (tok == "gset")
 	    lexer_flags.doing_set = true;
 
diff --git a/src/oct-procbuf.cc b/src/oct-procbuf.cc
--- a/src/oct-procbuf.cc
+++ b/src/oct-procbuf.cc
@@ -41,21 +41,17 @@ Software Foundation, 59 Temple Place - S
 #include "syswait.h"
 #include "variables.h"
 
 #include "defun.h"
 #include "gripes.h"
 #include "utils.h"
 
 // Number of microseconds to delay in the parent after forking.
-#if defined (__CYGWIN32__)
-static int Vkluge_procbuf_delay = 500000;
-#else
 static int Vkluge_procbuf_delay = 0;
-#endif
 
 // This class is based on the procbuf class from libg++, written by
 // Per Bothner, Copyright (C) 1993 Free Software Foundation.
 
 static octave_procbuf *octave_procbuf_list = 0;
 
 octave_procbuf *
 octave_procbuf::open (const char *command, int mode)
diff --git a/src/octave.cc b/src/octave.cc
--- a/src/octave.cc
+++ b/src/octave.cc
@@ -186,18 +186,18 @@ initialize_pathsearch (void)
   std::string odb = octave_env::getenv ("OCTAVE_DB_PATH");
 
   // For backward compatibility.
 
   if (odb.empty ())
     odb = octave_env::getenv ("OCTAVE_DB_DIR");
 
   if (odb.empty ())
-    odb = Vdata_dir + OCTAVE_DIR_SEP_STR + "octave:"
-      + Vlibexec_dir + OCTAVE_DIR_SEP_STR + "octave";
+    odb = Vdata_dir + file_ops::dir_sep_str + "octave:"
+      + Vlibexec_dir + file_ops::dir_sep_str + "octave";
 
   octave_original_texmfdbs = octave_env::getenv ("TEXMFDBS");
 
   octave_env::putenv ("TEXMFDBS", odb);
 }
 
 // Initialize by reading startup files.
 
@@ -237,19 +237,19 @@ execute_startup_files (void)
 
       std::string initfile = octave_env::getenv ("OCTAVE_INITFILE");
 
       if (initfile.empty ())
 	initfile = ".octaverc";
 
       std::string home_dir = octave_env::get_home_directory ();
 
-      std::string home_rc = home_dir + OCTAVE_DIR_SEP_STR + initfile;
+      std::string home_rc = home_dir + file_ops::dir_sep_str + initfile;
       std::string local_rc
-	= octave_env::getcwd () + OCTAVE_DIR_SEP_STR + initfile;
+	= octave_env::getcwd () + file_ops::dir_sep_str + initfile;
 
       if (! home_dir.empty ())
 	{
 	  parse_and_execute (home_rc, verbose);
 
 	  // Names alone are not enough.
 
 	  file_stat fs_home_rc (home_rc);
@@ -534,17 +534,18 @@ main (int argc, char **argv)
 
       if (infile)
 	{
 	  input_from_command_line_file = true;
 
 	  bind_builtin_variable ("program_invocation_name",
 				 curr_fcn_file_name);
 
-	  size_t pos = curr_fcn_file_name.find_last_of (OCTAVE_DIR_SEP_CHARS);
+	  size_t pos
+	    = curr_fcn_file_name.find_last_of (file_ops::dir_sep_chars);
 
 	  std::string tmp = (pos != NPOS)
 	    ? curr_fcn_file_name.substr (pos+1) : curr_fcn_file_name;
 
 	  bind_builtin_variable ("program_name", tmp);
 
 	  intern_argv (remaining_args, argv+last_arg_idx);
 
