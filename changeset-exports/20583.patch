# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1444416109 14400
#      Fri Oct 09 14:41:49 2015 -0400
# Node ID e5986cba4ca820d0c2e17bda566e6a79f0da55b3
# Parent  ba2b07c13913e9dfe7cce172987ab268f46bea24
new octave_value::cell_value method with optional error message

* ov.h, ov.cc (octave_value::cell_value): New method.
* ov-base.h, ov-base.cc (octave_base_value::cell_value):
New default method.
* ov-cell.h, ov-cell.cc (octave_cell::cell_value): New method.

diff --git a/libinterp/octave-value/ov-base.cc b/libinterp/octave-value/ov-base.cc
--- a/libinterp/octave-value/ov-base.cc
+++ b/libinterp/octave-value/ov-base.cc
@@ -532,16 +532,43 @@ octave_base_value::float_value (bool) co
 Cell
 octave_base_value::cell_value () const
 {
   Cell retval;
   gripe_wrong_type_arg ("octave_base_value::cell_value()", type_name ());
   return retval;
 }
 
+Cell
+octave_base_value::cell_value (const char *fmt, va_list args) const
+{
+  // Note that this method does not need to be particularly efficient
+  // since it is already an error to end up here.
+
+  // FIXME: do we want both the wrong-type-argument error and any custom
+  // error message, or just the custom error message, or should that
+  // behavior be optional in some way?
+
+  try
+    {
+      std::string tn = type_name ();
+
+      error ("wrong type argument '%s'\n", tn.c_str ());
+    }
+  catch (const octave_execution_exception&)
+    {
+      if (fmt)
+        verror (fmt, args);
+
+      throw;
+    }
+
+  return Cell ();
+}
+
 Matrix
 octave_base_value::matrix_value (bool) const
 {
   Matrix retval;
   gripe_wrong_type_arg ("octave_base_value::matrix_value()", type_name ());
   return retval;
 }
 
diff --git a/libinterp/octave-value/ov-base.h b/libinterp/octave-value/ov-base.h
--- a/libinterp/octave-value/ov-base.h
+++ b/libinterp/octave-value/ov-base.h
@@ -476,16 +476,18 @@ public:
   virtual double scalar_value (bool frc_str_conv = false) const
   { return double_value (frc_str_conv); }
 
   virtual float float_scalar_value (bool frc_str_conv = false) const
   { return float_value (frc_str_conv); }
 
   virtual Cell cell_value (void) const;
 
+  virtual Cell cell_value (const char *fmt, va_list args) const;
+
   virtual Matrix matrix_value (bool = false) const;
 
   virtual FloatMatrix float_matrix_value (bool = false) const;
 
   virtual NDArray array_value (bool = false) const;
 
   virtual FloatNDArray float_array_value (bool = false) const;
 
diff --git a/libinterp/octave-value/ov-cell.h b/libinterp/octave-value/ov-cell.h
--- a/libinterp/octave-value/ov-cell.h
+++ b/libinterp/octave-value/ov-cell.h
@@ -130,16 +130,18 @@ public:
   builtin_type_t builtin_type (void) const { return btyp_cell; }
 
   bool is_cellstr (void) const;
 
   bool is_true (void) const;
 
   Cell cell_value (void) const { return matrix; }
 
+  Cell cell_value (const char *, va_list) const { return matrix; }
+
   octave_value_list list_value (void) const;
 
   octave_value convert_to_str_internal (bool pad, bool, char type) const
   { return octave_value (all_strings (pad), type); }
 
   string_vector all_strings (bool pad = false) const;
 
   Array<std::string> cellstr_value (void) const;
diff --git a/libinterp/octave-value/ov.cc b/libinterp/octave-value/ov.cc
--- a/libinterp/octave-value/ov.cc
+++ b/libinterp/octave-value/ov.cc
@@ -1545,16 +1545,25 @@ octave_value::is_equal (const octave_val
 }
 
 Cell
 octave_value::cell_value (void) const
 {
   return rep->cell_value ();
 }
 
+Cell
+octave_value::cell_value (const char *fmt, ...) const
+{
+  va_list args;
+  va_start (args,fmt);
+  return rep->cell_value (fmt, args);
+  va_end (args);
+}
+
 // Define the idx_type_value function here instead of in ov.h to avoid
 // needing definitions for the SIZEOF_X macros in ov.h.
 
 octave_idx_type
 octave_value::idx_type_value (bool req_int, bool frc_str_conv) const
 {
 #if defined (USE_64_BIT_IDX_T)
   return int64_value (req_int, frc_str_conv);
diff --git a/libinterp/octave-value/ov.h b/libinterp/octave-value/ov.h
--- a/libinterp/octave-value/ov.h
+++ b/libinterp/octave-value/ov.h
@@ -765,16 +765,18 @@ public:
   double scalar_value (bool frc_str_conv = false) const
   { return rep->scalar_value (frc_str_conv); }
 
   float float_scalar_value (bool frc_str_conv = false) const
   { return rep->float_scalar_value (frc_str_conv); }
 
   Cell cell_value (void) const;
 
+  Cell cell_value (const char *fmt, ...) const;
+
   Matrix matrix_value (bool frc_str_conv = false) const
   { return rep->matrix_value (frc_str_conv); }
 
   FloatMatrix float_matrix_value (bool frc_str_conv = false) const
   { return rep->float_matrix_value (frc_str_conv); }
 
   NDArray array_value (bool frc_str_conv = false) const
   { return rep->array_value (frc_str_conv); }
