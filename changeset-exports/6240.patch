# HG changeset patch
# User jwe
# Date 1168500733 0
#      Thu Jan 11 07:32:13 2007 +0000
# Node ID 3e5a3b5fd40e85003bc76952aa3cef5e0ee66de7
# Parent  82185e38eea8f44bd4e93a9e3334f16414282b32
[project @ 2007-01-11 07:32:12 by jwe]

diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,8 +1,12 @@
+2007-01-10  Baylis Shanks  <bshanks3@hotmail.com>
+
+	* set/ismember.m: Handle N-d arrays.
+
 2007-01-10  David Bateman  <dbateman@free.fr>
 
 	* elfun/acosd.m, elfun/acotd.m, elfun/acscd.m, elfun/asecd.m,
 	elfun/asind.m, elfun/atand.m, elfun/cosd.m, elfun/cotd.m,
 	elfun/cscd.m, elfun/secd.m, elfun/sind.m, elfun/tand.m:
 	New files.
 
 2007-01-09  Søren Hauberg  <hauberg@gmail.com>
diff --git a/scripts/set/ismember.m b/scripts/set/ismember.m
--- a/scripts/set/ismember.m
+++ b/scripts/set/ismember.m
@@ -28,19 +28,18 @@
 ## Adapted-by: jwe
 
 function c = ismember (a, S)
 
   if (nargin != 2)
     print_usage ();
   endif
 
-  [ra, ca] = size (a);
   if (isempty (a) || isempty (S))
-    c = zeros (ra, ca);
+    c = zeros (size (a));
   else
     if (iscell (a) && ! iscell (S))
       tmp{1} = S;
       S = tmp;
     endif
     if (! iscell (a) && iscell (S))
       tmp{1} = a;
       a = tmp;
@@ -91,17 +90,17 @@ function c = ismember (a, S)
       ## and assign all these indices back to the appropriate A and S,
       ## giving S_idx = [ -- 1 2], a_idx = [ 0 0 0 1 1 2 2 ].  Add 1 to
       ## a_idx, and we know which interval S(i) contains a.  It is
       ## easy to now check membership by comparing S(a_idx) == a.  This
       ## magic works because S starts out sorted, and because sort
       ## preserves the relative order of identical elements.
       [v, p] = sort ([S(2:lt); a(:)]);
       idx(p) = cumsum (p <= lt-1) + 1;
-      idx = idx(lt:lt+ra*ca-1);
+      idx = idx(lt:end);
       if (iscell (a) || iscell (S))
         c = (cellfun ("length", a)
 	     == reshape (cellfun ("length", S(idx)), size (a)));
         idx2 = find (c);
         c(idx2) = all (char (a(idx2)) == char (S(idx)(idx2)), 2);
       else
         c = (a == reshape (S (idx), size (a)));
       endif
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,13 @@
+2007-01-11  Michael Goffioul  <michael.goffioul@swing.be>
+
+	* ls-oct-binary.cc (read_binary_data): Use unsigned char, not
+	char, for reading flags and data types.
+
 2007-01-10  Luis F. Ortiz  <lortiz@interactivesupercomputing.com>
 
 	* parse.y (load_fcn_from_file): Delete unused variable NAMES.
 	If NM is absolute, strip directory and extension parts.
 
 2007-01-10  Michael Goffioul  <michael.goffioul@swing.be>
 
 	* DLD-FUNCTIONS/getrusage.cc: Use #ifdef __WIN32__, not __MINGW32__.
diff --git a/src/ls-oct-binary.cc b/src/ls-oct-binary.cc
--- a/src/ls-oct-binary.cc
+++ b/src/ls-oct-binary.cc
@@ -134,17 +134,17 @@ 02110-1301, USA.
 std::string
 read_binary_data (std::istream& is, bool swap,
 		  oct_mach_info::float_format fmt,
 		  const std::string& filename, bool& global,
 		  octave_value& tc, std::string& doc)
 {
   std::string retval;
 
-  char tmp = 0;
+  unsigned char tmp = 0;
 
   int32_t name_len = 0;
   int32_t doc_len = 0;
 
   doc.resize (0);
 
   // We expect to fail here, at the beginning of a record, so not
   // being able to read another name should not result in an error.
