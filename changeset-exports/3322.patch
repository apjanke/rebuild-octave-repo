# HG changeset patch
# User jwe
# Date 940973608 0
#      Tue Oct 26 21:33:28 1999 +0000
# Node ID 8c6b4de3bdc89757d2af0b90889c5c68042a780a
# Parent  6923abb04e16937f221bf64c6784236c92e09e11
[project @ 1999-10-26 21:33:27 by jwe]

diff --git a/liboctave/CRowVector.cc b/liboctave/CRowVector.cc
--- a/liboctave/CRowVector.cc
+++ b/liboctave/CRowVector.cc
@@ -786,16 +786,30 @@ linspace (const Complex& x1, const Compl
     {
       retval.resize (n);
       Complex delta = (x2 - x1) / (n - 1.0);
       retval.elem (0) = x1;
       for (int i = 1; i < n-1; i++)
 	retval.elem (i) = x1 + 1.0 * i * delta;
       retval.elem (n-1) = x2;
     }
+  else if (n == 1)
+    {
+      if (x1 == x2)
+	{
+	  retval.resize (1);
+	  retval.elem (0) = x1;
+	}
+      else
+	(*current_liboctave_error_handler)
+	  ("linspace: npoints is 1, but x1 != x2");
+    }
+  else
+    (*current_liboctave_error_handler)
+      ("linspace: npoints must be greater than 0");
 
   return retval;
 }
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,16 @@
+1999-10-26  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* CRowVector.cc (linspace): Allow npoints == 1 if x1 == x2.
+	* dRowVector.cc (linspace): Ditto.
+
+	* oct-time.cc (Fstrftime): Don't save or delete tm_zone.
+	(octave_time::octave_time (const octave_base_tm&)): Likewise.
+
 1999-10-21  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* DASSL.cc (DASSL::do_integrate (double)): If we have a function
 	to evaluate the Jacobian, set info(4), not iwork(4).
 	Set rwork(1) to the maximum step size, not rwork(2).
 
 1999-10-14  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
diff --git a/liboctave/dRowVector.cc b/liboctave/dRowVector.cc
--- a/liboctave/dRowVector.cc
+++ b/liboctave/dRowVector.cc
@@ -338,25 +338,39 @@ operator >> (istream& is, RowVector& a)
 
 // other operations
 
 RowVector
 linspace (double x1, double x2, int n)
 {
   RowVector retval;
 
-  if (n > 0)
+  if (n > 1)
     {
       retval.resize (n);
       double delta = (x2 - x1) / (n - 1);
       retval.elem (0) = x1;
       for (int i = 1; i < n-1; i++)
 	retval.elem (i) = x1 + i * delta;
       retval.elem (n-1) = x2;
     }
+  else if (n == 1)
+    {
+      if (x1 == x2)
+	{
+	  retval.resize (1);
+	  retval.elem (0) = x1;
+	}
+      else
+	(*current_liboctave_error_handler)
+	  ("linspace: npoints is 1, but x1 != x2");
+    }
+  else
+    (*current_liboctave_error_handler)
+      ("linspace: npoints must be greater than 0");
 
   return retval;
 }
 
 // row vector by column vector -> scalar
 
 double
 operator * (const RowVector& v, const ColumnVector& a)
diff --git a/liboctave/oct-time.cc b/liboctave/oct-time.cc
--- a/liboctave/oct-time.cc
+++ b/liboctave/oct-time.cc
@@ -42,26 +42,22 @@ octave_time::octave_time (const octave_b
   t.tm_mon = tm.mon ();
   t.tm_year = tm.year ();
   t.tm_wday = tm.wday ();
   t.tm_yday = tm.yday ();
   t.tm_isdst = tm.isdst ();
 
 #if defined (HAVE_TM_ZONE)
   string s = tm.zone ();
-  t.tm_zone = strsave (s.c_str ());
+  t.tm_zone = s.c_str ();
 #endif
 
   ot_unix_time = mktime (&t);
 
   ot_usec = tm.usec ();
-
-#if defined (HAVE_TM_ZONE)
-  delete [] t.tm_zone;
-#endif
 }
 
 string
 octave_time::ctime (void) const
 {
   return octave_localtime (*this) . asctime ();
 }
 
@@ -137,17 +133,17 @@ octave_base_tm::strftime (const string& 
   t.tm_mday = tm_mday;
   t.tm_mon = tm_mon;
   t.tm_year = tm_year;
   t.tm_wday = tm_wday;
   t.tm_yday = tm_yday;
   t.tm_isdst = tm_isdst;
 
 #if defined (HAVE_TM_ZONE)
-  t.tm_zone = strsave (tm_zone.c_str ());
+  t.tm_zone = tm_zone.c_str ();
 #endif
 
   const char *fmt_str = fmt.c_str ();
 
   char *buf = 0;
   size_t bufsize = STRFTIME_BUF_INITIAL_SIZE;
   size_t chars_written = 0;
 
@@ -161,20 +157,16 @@ octave_base_tm::strftime (const string& 
 
       bufsize *= 2;
     }
 
   retval = buf;
 
   delete [] buf;
 
-#if defined (HAVE_TM_ZONE)
-  delete [] t.tm_zone;
-#endif
-
   return retval;
 }
 
 void
 octave_base_tm::init (void *p)
 {
   struct tm *t = static_cast<struct tm*> (p);
   
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,10 +1,12 @@
 1999-10-26  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
+	* data.cc (Flinspace): Let linspace functions handle errors.
+
 	* mkgendoc (print_doc_string): Handle quoted names.
 
 	* file-io.cc (symbols_of_file_io): Use DEFCONSTX for SEEK_SET,
 	SEEK_CUR, and SEEK_END.
 
 	* defun.h (DEFCONST): Just pass name, defn, and doc to
 	DEFCONST_INTERNAL.
 	(DEFCONSTX): Likewise, pass name, defn, and doc to DEFCONSTX_INTERNAL.
diff --git a/src/data.cc b/src/data.cc
--- a/src/data.cc
+++ b/src/data.cc
@@ -1135,50 +1135,45 @@ See also: logspace")
       return retval;
     }
 
   if (nargin == 3)
     npoints = args(2).nint_value ();
 
   if (! error_state)
     {
-      if (npoints > 1)
-	{
-	  octave_value arg_1 = args(0);
-	  octave_value arg_2 = args(1);
+      octave_value arg_1 = args(0);
+      octave_value arg_2 = args(1);
 
-	  if (arg_1.is_complex_type () || arg_2.is_complex_type ())
+      if (arg_1.is_complex_type () || arg_2.is_complex_type ())
+	{
+	  Complex x1 = arg_1.complex_value ();
+	  Complex x2 = arg_2.complex_value ();
+
+	  if (! error_state)
 	    {
-	      Complex x1 = arg_1.complex_value ();
-	      Complex x2 = arg_2.complex_value ();
+	      ComplexRowVector rv = linspace (x1, x2, npoints);
 
 	      if (! error_state)
-		{
-		  ComplexRowVector rv = linspace (x1, x2, npoints);
-
-		  if (! error_state)
-		    retval (0) = octave_value (rv, 0);
-		}
-	    }
-	  else
-	    {
-	      double x1 = arg_1.double_value ();
-	      double x2 = arg_2.double_value ();
-
-	      if (! error_state)
-		{
-		  RowVector rv = linspace (x1, x2, npoints);
-
-		  if (! error_state)
-		    retval (0) = octave_value (rv, 0);
-		}
+		retval (0) = octave_value (rv, 0);
 	    }
 	}
       else
-	error ("linspace: npoints must be greater than 2");
+	{
+	  double x1 = arg_1.double_value ();
+	  double x2 = arg_2.double_value ();
+
+	  if (! error_state)
+	    {
+	      RowVector rv = linspace (x1, x2, npoints);
+
+	      if (! error_state)
+		retval (0) = octave_value (rv, 0);
+	    }
+	}
     }
 
   return retval;
 }
 
 static int
 treat_neg_dim_as_zero (void)
 {
diff --git a/src/mappers.cc b/src/mappers.cc
--- a/src/mappers.cc
+++ b/src/mappers.cc
@@ -162,17 +162,17 @@ acos (X): compute the inverse cosine of 
 
   DEFUN_MAPPER (acosh, 0, 0, 0, acosh, 0, acosh, 1.0, DBL_MAX, 1,
     "-*- texinfo -*-\n\
 @deftypefn {Mapping Function} {} acosh (@var{X})\n\
 acosh (X): compute the inverse hyperbolic cosine of X for each element of X.\n\
 @end deftypefn");
 
   DEFUN_MAPPER (angle, 0, 0, 0, arg, arg, 0, 0.0, 0.0, 0,
-    "See arg.")
+    "See arg.");
 
   DEFUN_MAPPER (arg, 0, 0, 0, arg, arg, 0, 0.0, 0.0, 0,
     "-*- texinfo -*-\n\
 @deftypefn {Mapping Function} {} angle (@var{z})\n\
 Compute the argument of @var{z}, defined as\n\
 @iftex\n\
 @tex\n\
 $\\theta = \\tan^{-1}(y/x)$.\n\
