# HG changeset patch
# User jwe
# Date 1037402547 0
#      Fri Nov 15 23:22:27 2002 +0000
# Node ID 8f6d418d31c322dfc48b9393c4a1503c11d82a78
# Parent  e4b7578e5fc700f8a632582b8ee327146ecf5f1a
[project @ 2002-11-15 23:22:03 by jwe]

diff --git a/doc/interpreter/debug.txi b/doc/interpreter/debug.txi
--- a/doc/interpreter/debug.txi
+++ b/doc/interpreter/debug.txi
@@ -10,11 +10,13 @@
 @DOCSTRING(dbclear)
 
 @DOCSTRING(dbstatus)
 
 @DOCSTRING(dbwhere)
 
 @DOCSTRING(dbtype)
 
-@DOCSTRING(debug_on_error)
+@DOCSTRING(debug_on_interrupt)
 
 @DOCSTRING(debug_on_warning)
+
+@DOCSTRING(debug_on_error)
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,10 +1,19 @@
 2002-11-15  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
+	* pt-bp.cc (octave_debug_on_interrupt_state): New global variable.
+	* pt-bp.h: Provide decl.
+	(MAYBE_DO_BREAKPOINT): Check it.
+
+	* sighandlers.cc (sigint_handler): Handle debug_on_interrupt.
+	(Vdebug_on_interrupt): New static variable.
+	(symbols_of_sighandlers): New function.  DEFVAR Vdebug_on_interrupt.
+	(debug_on_interrupt): New function.
+
 	* lex.h (YY_FATAL_ERROR): Use OCTAVE_QUIT here.
 
 	* utils.cc (toplevel): Delete variable.
 
 	* sighandlers.cc (OCTAVE_MEMORY_EXHAUSTED_ERROR): Delete.
 
 2002-11-14  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
diff --git a/src/pt-bp.cc b/src/pt-bp.cc
--- a/src/pt-bp.cc
+++ b/src/pt-bp.cc
@@ -28,16 +28,20 @@ Software Foundation, 59 Temple Place - S
 #include <config.h>
 #endif
 
 #include "ov-usr-fcn.h"
 #include "ov-list.h"
 #include "pager.h"
 #include "pt-all.h"
 
+// TRUE means SIGINT should put us in the debugger at the next
+// available breakpoint.
+bool octave_debug_on_interrupt_state = false;
+
 void 
 tree_breakpoint::take_action (tree &tr)
 {
   if (act == set)
     {
       tr.set_breakpoint ();
       line = tr.line ();
       found = true;
diff --git a/src/pt-bp.h b/src/pt-bp.h
--- a/src/pt-bp.h
+++ b/src/pt-bp.h
@@ -163,25 +163,32 @@ tree_breakpoint : public tree_walker
 
   // No copying!
 
   tree_breakpoint (const tree_breakpoint&);
 
   tree_breakpoint& operator = (const tree_breakpoint&);
 };
 
+// TRUE means SIGINT should put us in the debugger at the next
+// available breakpoint.
+extern bool octave_debug_on_interrupt_state;
+
 #define MAYBE_DO_BREAKPOINT \
   do \
     { \
-      if ((tree::break_next && tree::last_line == 0) \
+      if (octave_debug_on_interrupt_state \
+	  || (tree::break_next && tree::last_line == 0) \
 	  || (tree::break_next \
 	      && curr_function == tree::break_function \
 	      && tree::last_line != line ()) \
 	  || is_breakpoint ()) \
         { \
+          octave_debug_on_interrupt_state = false; \
+ \
           tree::break_next = false; \
  \
           if (curr_function) \
             octave_stdout << curr_function->function_name () << ": ";  \
  \
           octave_stdout << "line " << line () << ", " \
 			<< "column " << column () \
 			<< std::endl; \
diff --git a/src/sighandlers.cc b/src/sighandlers.cc
--- a/src/sighandlers.cc
+++ b/src/sighandlers.cc
@@ -34,31 +34,36 @@ Software Foundation, 59 Temple Place - S
 #include <sys/types.h>
 #endif
 #include <unistd.h>
 #endif
 
 #include "cmd-edit.h"
 #include "quit.h"
 
+#include "defun.h"
 #include "error.h"
 #include "load-save.h"
 #include "pager.h"
+#include "pt-bp.h"
 #include "sighandlers.h"
 #include "syswait.h"
 #include "toplev.h"
 #include "utils.h"
 
 // Nonzero means we have already printed a message for this series of
 // SIGPIPES.  We assume that the writer will eventually give up.
 int pipe_handler_error_count = 0;
 
 // TRUE means we can be interrupted.
 bool can_interrupt = false;
 
+// TRUE means we should try to enter the debugger on SIGINT.
+static bool Vdebug_on_interrupt = false;
+
 #if RETSIGTYPE == void
 #define SIGHANDLER_RETURN(status) return
 #else
 #define SIGHANDLER_RETURN(status) return status
 #endif
 
 #if defined (MUST_REINSTALL_SIGHANDLERS)
 #define MAYBE_REINSTALL_SIGHANDLER(sig, handler) \
@@ -261,25 +266,33 @@ sigint_handler (int)
 
   MAYBE_REINSTALL_SIGHANDLER (sig, sigint_handler);
 
   if (! octave_initialized)
     exit (1);
 
   if (can_interrupt)
     {
-#if defined (USE_EXCEPTIONS_FOR_INTERRUPTS)
+      if (Vdebug_on_interrupt)
+	{
+	  if (! octave_debug_on_interrupt_state)
+	    {
+	      octave_debug_on_interrupt_state = true;
+
+	      SIGHANDLER_RETURN (0);
+	    }
+	  else
+	    // Clear the flag and do normal interrupt stuff.
+	    octave_debug_on_interrupt_state = false;
+	}
+
       octave_interrupt_state = 1;
 
       if (octave_interrupt_immediately)
 	octave_jump_to_enclosing_context ();
-#else
-      octave_interrupt_state = 1;
-      panic_impossible ();
-#endif
     }
 
   SIGHANDLER_RETURN (0);
 }
 
 #ifdef SIGPIPE
 static RETSIGTYPE
 sigpipe_handler (int /* sig */)
@@ -596,13 +609,35 @@ octave_child_list::do_elem (int i)
   int n = do_length ();
 
   if (i >= 0 && i < n)
     return list (i);
   else
     return foo;
 }
 
+static int
+debug_on_interrupt (void)
+{
+  Vdebug_on_interrupt = check_preference ("debug_on_interrupt");
+
+  return 0;
+}
+
+void
+symbols_of_sighandlers (void)
+{
+  DEFVAR (debug_on_interrupt, 0.0, debug_on_interrupt,
+    "-*- texinfo -*-\n\
+@defvr {Built-in Variable} debug_on_interrupt\n\
+If @code{debug_on_interrupt} is nonzero, Octave will try to enter\n\
+debugging mode when it receives an interrupt signal (typically\n\
+generated with @kbd{C-c}).  If a second interrupt signal is received\n\
+before reaching the debugging mode, a normal interrupt will occur.\n\
+The default value is 0.\n\
+@end defvr");
+}
+
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
