# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1334253699 14400
#      Thu Apr 12 14:01:39 2012 -0400
# Branch stable
# Node ID 6eabd81604b577c7ec8f27aeb6f4391d7f001ac6
# Parent  93cb513ed5fccc48f975f947844b75a663b1cb2e
allow kron to work for two diag matrix arguments (bug #35647)

* kron.cc (dispatch_kron): Fix recursive call for case of two diagonal
matrix objects as arguments.  New tests.

diff --git a/src/DLD-FUNCTIONS/kron.cc b/src/DLD-FUNCTIONS/kron.cc
--- a/src/DLD-FUNCTIONS/kron.cc
+++ b/src/DLD-FUNCTIONS/kron.cc
@@ -157,17 +157,16 @@ kron (const PermMatrix& a, const PermMat
       for (octave_idx_type i = 0; i < na; i++)
         for (octave_idx_type j = 0; j < nb; j++)
           pc[i*nb+j] = pa[i]*nb+pb[j];
     }
 
   return c;
 }
 
-
 template <class MTA, class MTB>
 octave_value
 do_kron (const octave_value& a, const octave_value& b)
 {
   MTA am = octave_value_extract<MTA> (a);
   MTB bm = octave_value_extract<MTB> (b);
   return octave_value (kron (am, bm));
 }
@@ -178,22 +177,28 @@ dispatch_kron (const octave_value& a, co
   octave_value retval;
   if (a.is_perm_matrix () && b.is_perm_matrix ())
     retval = do_kron<PermMatrix, PermMatrix> (a, b);
   else if (a.is_diag_matrix ())
     {
       if (b.is_diag_matrix () && a.rows () == a.columns ()
           && b.rows () == b.columns ())
         {
-          octave_value_list tmp;
-          tmp(0) = a.diag ();
-          tmp(1) = b.diag ();
-          tmp = dispatch_kron (tmp, 1);
-          if (tmp.length () == 1)
-            retval = tmp(0).diag ();
+          // We have two diagonal matrices, the product of those will be
+          // another diagonal matrix.  To do that efficiently, extract
+          // the diagonals as vectors and compute the product.  That
+          // will be another vector, which we then use to construct a
+          // diagonal matrix object.  Note that this will fail if our
+          // digaonal matrix object is modified to allow the non-zero
+          // values to be stored off of the principal diagonal (i.e., if
+          // diag ([1,2], 3) is modified to return a diagonal matrix
+          // object instead of a full matrix object).
+
+          octave_value tmp = dispatch_kron (a.diag (), b.diag ());
+          retval = tmp.diag ();
         }
       else if (a.is_single_type () || b.is_single_type ())
         {
           if (a.is_complex_type ())
             retval = do_kron<FloatComplexDiagMatrix, FloatComplexMatrix> (a, b);
           else if (b.is_complex_type ())
             retval = do_kron<FloatDiagMatrix, FloatComplexMatrix> (a, b);
           else
@@ -284,22 +289,34 @@ Since the Kronecker product is associati
   else
     print_usage ();
 
   return retval;
 }
 
 
 /*
-
 %!test
 %! x = ones(2);
 %! assert( kron (x, x), ones (4));
 
 %!shared x, y, z
 %! x =  [1, 2];
 %! y =  [-1, -2];
 %! z =  [1,  2,  3,  4; 1,  2,  3,  4; 1,  2,  3,  4];
 %!assert (kron (1:4, ones (3, 1)), z)
 %!assert (kron (x, y, z), kron (kron (x, y), z))
 %!assert (kron (x, y, z), kron (x, kron (y, z)))
 
+
+%!assert (kron (diag ([1, 2]), diag ([3, 4])), diag ([3, 4, 6, 8]))
+
+%% Test for two diag matrices.  See the comments above in
+%% dispatch_kron for this case.
+%%
+%!test
+%! expected = zeros (16, 16);
+%! expected (1, 11) = 3;
+%! expected (2, 12) = 4;
+%! expected (5, 15) = 6;
+%! expected (6, 16) = 8;
+%! assert (kron (diag ([1, 2], 2), diag ([3, 4], 2)), expected)
 */
