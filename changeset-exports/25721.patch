# HG changeset patch
# User Rik <rik@octave.org>
# Date 1533164687 25200
#      Wed Aug 01 16:04:47 2018 -0700
# Branch stable
# Node ID 337c944a9ac974b0f8c1f44264ed8d6d846683e1
# Parent  216321ca4cc42aea1cc421ebc3422fc144d8eac4
Produce a single backtrace for global declaration overriding local variable.

* pt-eval.cc (tree_evaluator::visit_decl_elt): Use "\n" at the end of the first
two calls to warning_with_id() so that they do not produce a backtrace.  Only
the third and final call produces a backtrace.

diff --git a/libinterp/parse-tree/pt-eval.cc b/libinterp/parse-tree/pt-eval.cc
--- a/libinterp/parse-tree/pt-eval.cc
+++ b/libinterp/parse-tree/pt-eval.cc
@@ -745,20 +745,20 @@ namespace octave
               {
                 octave_value val = scope.varval (name);
 
                 bool local_val_is_defined = val.is_defined ();
 
                 if (local_val_is_defined)
                   {
                     warning_with_id ("Octave:global-local-conflict",
-                                     "global: '%s' is defined in the current scope",
+                                     "global: '%s' is defined in the current scope.\n",
                                      name.c_str ());
                     warning_with_id ("Octave:global-local-conflict",
-                                     "global: in a future version, global variables must be declared before use");
+                                     "global: in a future version, global variables must be declared before use.\n");
 
                     // If the symbol is defined in the local but not the
                     // global scope, then use the local value as the
                     // initial value.  This value will also override any
                     // initializer in the global statement.
                     octave_value global_val = global_scope.varval (name);
 
                     if (global_val.is_defined ())
