# HG changeset patch
# User CarnÃ« Draug <carandraug@octave.org>
# Date 1469025173 -3600
#      Wed Jul 20 15:32:53 2016 +0100
# Node ID c4901d7a2d7dcdc0a2d057748f603f06ce62731d
# Parent  ba8a9d2934c7c20e427a72f5101514aa53a87249
Remove check for std::tr1::unordered_map because we depend on C++11.

* rand.cc: remove conditional include of unordered_map from std::tr1
if it's missing from std.  Octave is already dependent on C++11 so it
is no longer needed.
* configure.ac: remove call to OCTAVE_UNORDERED_MAP_HEADERS.
* m4/acinclude.m4: remove unused OCTAVE_UNORDERED_MAP_HEADERS macro.

diff --git a/configure.ac b/configure.ac
--- a/configure.ac
+++ b/configure.ac
@@ -2374,17 +2374,16 @@ AC_CHECK_HEADERS([poll.h pthread.h pwd.h
 AC_CHECK_HEADERS([sys/param.h sys/poll.h sys/resource.h])
 AC_CHECK_HEADERS([sys/select.h sys/stropts.h termcap.h])
 
 ## C++ headers
 
 AC_LANG_PUSH(C++)
 
 AC_CHECK_HEADERS([sstream])
-OCTAVE_UNORDERED_MAP_HEADERS
 
 AC_LANG_POP(C++)
 
 ## Find a termio header to include.
 
 AC_CHECK_HEADERS([termios.h], have_termios_h=yes, have_termios_h=no)
 AC_CHECK_HEADERS([termio.h], have_termio_h=yes, have_termio_h=no)
 AC_CHECK_HEADERS([sgtty.h], have_sgtty_h=yes, have_sgtty_h=no)
diff --git a/libinterp/corefcn/rand.cc b/libinterp/corefcn/rand.cc
--- a/libinterp/corefcn/rand.cc
+++ b/libinterp/corefcn/rand.cc
@@ -22,21 +22,17 @@ along with Octave; see the file COPYING.
 
 */
 
 #if defined (HAVE_CONFIG_H)
 #  include "config.h"
 #endif
 
 #include <ctime>
-#if defined (HAVE_UNORDERED_MAP)
-#  include <unordered_map>
-#elif defined (HAVE_TR1_UNORDERED_MAP)
-#  include <tr1/unordered_map>
-#endif
+#include <unordered_map>
 #include <string>
 
 #include "f77-fcn.h"
 #include "lo-mappers.h"
 #include "oct-rand.h"
 #include "quit.h"
 
 #include "defun.h"
@@ -1073,22 +1069,16 @@ replacement from @code{1:@var{n}}.
 
 The complexity is O(@var{n}) in memory and O(@var{m}) in time, unless
 @var{m} < @var{n}/5, in which case O(@var{m}) memory is used as well.  The
 randomization is performed using rand().  All permutations are equally
 likely.
 @seealso{perms}
 @end deftypefn */)
 {
-#if defined (USE_UNORDERED_MAP_WITH_TR1)
-using std::tr1::unordered_map;
-#else
-using std::unordered_map;
-#endif
-
   int nargin = args.length ();
 
   if (nargin < 1 || nargin > 2)
     print_usage ();
 
   octave_idx_type n = args(0).idx_type_value (true);
   octave_idx_type m = (nargin == 2) ? args(1).idx_type_value (true) : n;
 
@@ -1123,17 +1113,17 @@ using std::unordered_map;
 
   octave_idx_type *ivec = idx.fortran_vec ();
 
   for (octave_idx_type i = 0; i < idx_len; i++)
     ivec[i] = i;
 
   if (short_shuffle)
     {
-      unordered_map<octave_idx_type, octave_idx_type> map (m);
+      std::unordered_map<octave_idx_type, octave_idx_type> map (m);
 
       // Perform the Knuth shuffle only keeping track of moved
       // entries in the map
       for (octave_idx_type i = 0; i < m; i++)
         {
           octave_idx_type k = i +
             std::floor (rvec[i] * (n - i));
 
diff --git a/m4/acinclude.m4 b/m4/acinclude.m4
--- a/m4/acinclude.m4
+++ b/m4/acinclude.m4
@@ -2426,45 +2426,13 @@ AC_DEFUN([OCTAVE_UMFPACK_SEPARATE_SPLIT]
   else
     AC_MSG_RESULT([$octave_cv_umfpack_separate_split])
   fi
   if test $octave_cv_umfpack_separate_split = yes; then
     AC_DEFINE(UMFPACK_SEPARATE_SPLIT, 1,
       [Define to 1 if the UMFPACK Complex solver allows matrix and RHS to be split independently.])
   fi
 ])
-dnl
-dnl Check for unordered map headers and whether tr1 namespace is
-dnl required.
-dnl
-AC_DEFUN([OCTAVE_UNORDERED_MAP_HEADERS], [
-  AC_CHECK_HEADERS([unordered_map], [],
-    [AC_CHECK_HEADERS([tr1/unordered_map])])
-  AC_CACHE_CHECK([whether unordered_map requires tr1 namespace],
-    [octave_cv_header_require_tr1_namespace],
-    [AC_LANG_PUSH(C++)
-    octave_cv_header_require_tr1_namespace=no
-    if test $ac_cv_header_unordered_map = yes; then
-      ## Have <unordered_map>, but still have to check whether
-      ## tr1 namespace is required (like MSVC, for instance).
-      AC_COMPILE_IFELSE(
-        [AC_LANG_PROGRAM([[
-          #include <unordered_map>
-          ]], [[
-          std::unordered_map<int,int> m;
-        ]])],
-        octave_cv_header_require_tr1_namespace=no,
-        octave_cv_header_require_tr1_namespace=yes)
-    elif test $ac_cv_header_tr1_unordered_map = yes; then
-      octave_cv_header_require_tr1_namespace=yes
-    fi
-    AC_LANG_POP(C++)
-  ])
-  if test $octave_cv_header_require_tr1_namespace = yes; then
-    AC_DEFINE(USE_UNORDERED_MAP_WITH_TR1, 1,
-      [Define to 1 if unordered_map requires the use of tr1 namespace.])
-  fi
-])
 
 dnl         End of macros written by Octave developers
 dnl ------------------------------------------------------------
 dnl
 
