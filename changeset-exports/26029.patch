# HG changeset patch
# User Markus MÃ¼tzel <markus.muetzel@gmx.de>
# Date 1541259215 -3600
#      Sat Nov 03 16:33:35 2018 +0100
# Node ID 700b9f046538b51175c808a7b27a87e8119c991a
# Parent  8eb4b42771ff2e3a09749fbbe13626b2142383fe
Implement "light" option for surfl (bug #54930).

* surfl.m: Implement "light" option. Add new demo.

diff --git a/scripts/plot/draw/surfl.m b/scripts/plot/draw/surfl.m
--- a/scripts/plot/draw/surfl.m
+++ b/scripts/plot/draw/surfl.m
@@ -33,23 +33,24 @@
 ## height above the plane of each vertex.  If only a single @var{z} matrix is
 ## given, then it is plotted over the meshgrid
 ## @code{@var{x} = 1:columns (@var{z}), @var{y} = 1:rows (@var{z})}.
 ## Thus, columns of @var{z} correspond to different @var{x} values and rows
 ## of @var{z} correspond to different @var{y} values.
 ##
 ## The default lighting mode @qcode{"cdata"}, changes the cdata property of the
 ## surface object to give the impression of a lighted surface.
-## @strong{Warning:} The alternative mode @qcode{"light"} mode which creates a
-## light object to illuminate the surface is not implemented (yet).
+##
+## The alternate mode @qcode{"light"} creates a light object to illuminate the
+## surface.
 ##
-## The light source location can be specified using @var{lsrc}.  It can be
-## given as a 2-element vector [azimuth, elevation] in degrees, or as a
-## 3-element vector [lx, ly, lz].  The default value is rotated 45 degrees
-## counterclockwise to the current view.
+## The light source location may be specified using @var{lsrc} which can be
+## a 2-element vector [azimuth, elevation] in degrees, or a 3-element vector
+## [lx, ly, lz].  The default value is rotated 45 degrees counterclockwise to
+## the current view.
 ##
 ## The material properties of the surface can specified using a 4-element
 ## vector @var{P} = [@var{AM} @var{D} @var{SP} @var{exp}] which defaults to
 ## @var{p} = [0.55 0.6 0.4 10].
 ##
 ## @table @asis
 ## @item @qcode{"AM"} strength of ambient light
 ##
@@ -88,18 +89,16 @@ function h = surfl (varargin)
     print_usage ();
   endif
 
   ## Check for lighting type.
   use_cdata = true;
   if (ischar (varargin{end}))
     switch (tolower (varargin{end}))
       case "light"
-        warning ("surfl: light method not supported (yet), using cdata method instead");
-        ## This can be implemented when light objects are supported.
         use_cdata = false;
       case "cdata"
         use_cdata = true;
       otherwise
         error ("surfl: unknown lighting method");
     endswitch
     varargin(end) = [];
   endif
@@ -139,52 +138,60 @@ function h = surfl (varargin)
   oldfig = [];
   if (! isempty (hax))
     oldfig = get (0, "currentfigure");
   endif
   unwind_protect
     hax = newplot (hax);
 
     htmp = surface (varargin{:});
-    __update_normals__ (htmp);
     if (! ishold ())
       set (hax, "view", [-37.5, 30],
-                "xgrid", "on", "ygrid", "on", "zgrid", "on", "clim", [0 1]);
+                "xgrid", "on", "ygrid", "on", "zgrid", "on");
     endif
 
     ## Get view vector (vv).
     [az, el] = view ();
     vv = sph2cart ((az - 90) * pi/180.0, el * pi/180.0, 1.0);
 
     if (! have_lv)
       ## Calculate light vector (lv) from view vector.
       phi = pi / 4;  # 45 degrees
       R = [cos(phi), -sin(phi), 0;
            sin(phi),  cos(phi), 0;
            0,         0,        1];
       lv = (R * vv.').';
     endif
 
-    vn = get (htmp, "vertexnormals");
-    dar = get (hax, "dataaspectratio");
-    vn(:,:,1) *= dar(1);
-    vn(:,:,2) *= dar(2);
-    vn(:,:,3) *= dar(3);
+    if (use_cdata)
+      set (hax, "clim", [0 1]);
+
+      __update_normals__ (htmp);
+      vn = get (htmp, "vertexnormals");
+      dar = get (hax, "dataaspectratio");
+      vn(:,:,1) *= dar(1);
+      vn(:,:,2) *= dar(2);
+      vn(:,:,3) *= dar(3);
 
-    ## Normalize vn.
-    vn ./= repmat (sqrt (sumsq (vn, 3)), [1, 1, 3]);
-    [nr, nc] = size (get (htmp, "zdata"));
+      ## Normalize vn.
+      vn ./= repmat (sqrt (sumsq (vn, 3)), [1, 1, 3]);
+      [nr, nc] = size (get (htmp, "zdata"));
 
-    ## Ambient, diffuse, and specular term.
-    cdata = (  r(1) * ones (nr, nc)
-             + r(2) * diffuse  (vn(:,:,1), vn(:,:,2), vn(:,:,3), lv)
-             + r(3) * specular (vn(:,:,1), vn(:,:,2), vn(:,:,3), lv, vv, r(4)));
-    cdata ./= sum (r(1:3));
+      ## Ambient, diffuse, and specular term.
+      cdata = (  r(1) * ones (nr, nc)
+               + r(2) * diffuse  (vn(:,:,1), vn(:,:,2), vn(:,:,3), lv)
+               + r(3) * specular (vn(:,:,1), vn(:,:,2), vn(:,:,3), lv, vv, r(4)));
+      cdata ./= sum (r(1:3));
 
-    set (htmp, "cdata", cdata);
+      set (htmp, "cdata", cdata);
+    else
+      light (hax, "position", lv);
+      set (htmp, "ambientstrength", r(1), "diffusestrength", r(2), ...
+                 "specularstrength", r(3), "specularexponent", r(4));
+    endif
 
   unwind_protect_cleanup
     if (! isempty (oldfig))
       set (0, "currentfigure", oldfig);
     endif
   end_unwind_protect
 
   if (nargout > 0)
@@ -204,8 +211,16 @@ endfunction
 
 %!demo
 %! clf;
 %! [X,Y,Z] = sombrero ();
 %! colormap (copper (64));
 %! surfl (X,Y,Z, [62.50,30], [0.2 0.6 0.4 25]);
 %! shading interp;
 %! title ("surfl() with lighting vector and material properties");
+
+%!demo
+%! clf;
+%! [X, Y] = meshgrid (-3:1/8:3);
+%! Z = peaks (X, Y);
+%! surfl (X, Y, Z, "light");
+%! shading interp;
+%! title ("surfl() with light object");
