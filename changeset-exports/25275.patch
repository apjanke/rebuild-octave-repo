# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1524015631 14400
#      Tue Apr 17 21:40:31 2018 -0400
# Branch stable
# Node ID 4adeabc1bbfe5438c3adda10657ce0ca89879c4b
# Parent  1f1e1e72e9585ab52ef8aef69803b1062fe75f26
improve Ctrl-C interrupt handling in the GUI (bug #53635)

* main-window.h, main-window.cc (octave_interpreter::interrupt):
Delete.
(octave_interpreter::m_thread_manager): Delete member variable and all uses.
* thread-manager.h, thread-manager.cc: Delete.
* libgui/src/module.mk: Update.

* main-window.h, main-window.cc (main_window::interrupt_interpreter):
Delete.
(main_window::construct): Don't connect command window interrupt
signal to main window interrupt_interpreter slot.

* octave-gui.cc (gui_application::execute): Call
octave_block_interrupt_signal directly.

* terminal-dock-widget.cc (terminal_dock_widget::terminal_interrupt):
Set octave_signal_caught and octave_interrupt_state instead of
emitting interrupt_signal.

diff --git a/libgui/src/main-window.cc b/libgui/src/main-window.cc
--- a/libgui/src/main-window.cc
+++ b/libgui/src/main-window.cc
@@ -83,23 +83,21 @@ create_default_editor (QWidget *p)
 
   return 0;
 #endif
 }
 
 namespace octave
 {
   octave_interpreter::octave_interpreter (application *app_context)
-    : QObject (), m_thread_manager (), m_app_context (app_context)
+    : QObject (), m_app_context (app_context)
   { }
 
   void octave_interpreter::execute (void)
   {
-    m_thread_manager.register_current_thread ();
-
     // The application context owns the interpreter.
 
     interpreter& interp = m_app_context->create_interpreter ();
 
     int exit_status = 0;
 
     try
       {
@@ -138,21 +136,16 @@ namespace octave
     // Whether or not initialization succeeds we need to clean up the
     // interpreter once we are done with it.
 
     m_app_context->delete_interpreter ();
 
     emit octave_finished_signal (exit_status);
   }
 
-  void octave_interpreter::interrupt (void)
-  {
-    m_thread_manager.interrupt ();
-  }
-
   main_window::main_window (QWidget *p, gui_application *app_context)
     : QMainWindow (p), m_app_context (app_context),
       m_interpreter (new octave_interpreter (app_context)),
       m_main_thread (new QThread ()), m_workspace_model (nullptr),
       m_status_bar (nullptr), m_command_window (nullptr),
       m_history_window (nullptr), m_file_browser_window (nullptr),
       m_doc_browser_window (nullptr), m_editor_window (nullptr),
       m_workspace_window (nullptr), m_variable_editor_window (nullptr),
@@ -1648,21 +1641,16 @@ namespace octave
       }
   }
 
   void main_window::clear_clipboard (void)
   {
     m_clipboard->clear (QClipboard::Clipboard);
   }
 
-  void main_window::interrupt_interpreter (void)
-  {
-    m_interpreter->interrupt ();
-  }
-
   void main_window::disable_menu_shortcuts (bool disable)
   {
     QHash<QMenu*, QStringList>::const_iterator i = m_hash_menu_text.constBegin ();
 
     while (i != m_hash_menu_text.constEnd ())
       {
         i.key ()->setTitle (i.value ().at (disable));
         ++i;
@@ -1769,19 +1757,16 @@ namespace octave
                  SIGNAL (rename_variable (const QString&, const QString&)),
                  this,
                  SLOT (handle_rename_variable_request (const QString&,
                                                        const QString&)));
 
         connect (m_variable_editor_window, SIGNAL (updated (void)),
                  this, SLOT (handle_variable_editor_update (void)));
 
-        connect (m_command_window, SIGNAL (interrupt_signal (void)),
-                 this, SLOT (interrupt_interpreter (void)));
-
         construct_menu_bar ();
 
         construct_tool_bar ();
 
         // Order is important.  Deleting QSettings must be last.
         connect (qApp, SIGNAL (aboutToQuit (void)),
                  m_command_window, SLOT (save_settings (void)));
 
diff --git a/libgui/src/main-window.h b/libgui/src/main-window.h
--- a/libgui/src/main-window.h
+++ b/libgui/src/main-window.h
@@ -51,17 +51,16 @@ along with Octave; see the file COPYING.
 #include "history-dock-widget.h"
 #include "octave-cmd.h"
 #include "octave-dock-widget.h"
 #include "octave-gui.h"
 #include "octave-qt-link.h"
 #include "resource-manager.h"
 #include "terminal-dock-widget.h"
 #include "variable-editor.h"
-#include "thread-manager.h"
 #include "workspace-model.h"
 #include "workspace-view.h"
 
 class settings_dialog;
 
 class octave_value;
 
 namespace octave
@@ -71,33 +70,29 @@ namespace octave
     Q_OBJECT
 
   public:
 
     octave_interpreter (application *app_context);
 
     ~octave_interpreter (void) = default;
 
-    void interrupt (void);
-
   signals:
 
     void octave_ready_signal (void);
     void octave_finished_signal (int);
 
   public slots:
 
     //! Initialize and execute the octave interpreter.
 
     void execute (void);
 
   private:
 
-    thread_manager m_thread_manager;
-
     application *m_app_context;
   };
 
   //! Represents the main window.
 
   class main_window : public QMainWindow
   {
     Q_OBJECT
@@ -264,18 +259,16 @@ namespace octave
     void set_screen_size (int ht, int wd);
 
     //! Handling the clipboard.
     //!@{
     void clipboard_has_changed (void);
     void clear_clipboard ();
     //!@}
 
-    void interrupt_interpreter (void);
-
     //! Returns a list of dock widgets.
 
     QList<octave_dock_widget *> get_dock_widget_list (void)
     {
       return dock_widget_list ();
     }
 
   private slots:
diff --git a/libgui/src/module.mk b/libgui/src/module.mk
--- a/libgui/src/module.mk
+++ b/libgui/src/module.mk
@@ -171,17 +171,16 @@ noinst_HEADERS += \
   %reldir%/octave-qt-link.h \
   %reldir%/octave-settings.h \
   %reldir%/qtinfo/texinfo-parser.h \
   %reldir%/qtinfo/webinfo.h \
   %reldir%/resource-manager.h \
   %reldir%/settings-dialog.h \
   %reldir%/shortcut-manager.h \
   %reldir%/tab-bar.h \
-  %reldir%/thread-manager.h \
   %reldir%/terminal-dock-widget.h \
   %reldir%/color-picker.h \
   %reldir%/welcome-wizard.h \
   %reldir%/find-files-dialog.h \
   %reldir%/find-files-model.h \
   %reldir%/workspace-model.h \
   %reldir%/workspace-view.h \
   %reldir%/variable-editor.h \
@@ -206,17 +205,16 @@ noinst_HEADERS += \
   %reldir%/octave-gui.cc \
   %reldir%/octave-qt-link.cc \
   %reldir%/qtinfo/texinfo-parser.cc \
   %reldir%/qtinfo/webinfo.cc \
   %reldir%/resource-manager.cc \
   %reldir%/settings-dialog.cc \
   %reldir%/shortcut-manager.cc \
   %reldir%/tab-bar.cc \
-  %reldir%/thread-manager.cc \
   %reldir%/terminal-dock-widget.cc \
   %reldir%/color-picker.cc \
   %reldir%/welcome-wizard.cc \
   %reldir%/find-files-dialog.cc \
   %reldir%/find-files-model.cc \
   %reldir%/workspace-model.cc \
   %reldir%/workspace-view.cc \
   %reldir%/variable-editor.cc \
diff --git a/libgui/src/octave-gui.cc b/libgui/src/octave-gui.cc
--- a/libgui/src/octave-gui.cc
+++ b/libgui/src/octave-gui.cc
@@ -37,29 +37,29 @@ along with Octave; see the file COPYING.
 
 #if defined (HAVE_SYS_IOCTL_H)
 #  include <sys/ioctl.h>
 #endif
 
 #include "lo-utils.h"
 #include "oct-env.h"
 #include "oct-syscalls.h"
+#include "signal-wrappers.h"
 
 #include "builtin-defun-decls.h"
 #include "defaults.h"
 #include "display.h"
 #include "octave.h"
 #include "sysdep.h"
 #include "unistd-wrappers.h"
 
 #include "main-window.h"
 #include "octave-gui.h"
 #include "resource-manager.h"
 #include "shortcut-manager.h"
-#include "thread-manager.h"
 #include "welcome-wizard.h"
 
 // Disable all Qt messages by default.
 
 static void
 #if defined (QTMESSAGEHANDLER_ACCEPTS_QMESSAGELOGCONTEXT)
 message_handler (QtMsgType, const QMessageLogContext &, const QString &)
 #else
@@ -79,17 +79,17 @@ namespace octave
 
   bool gui_application::start_gui_p (void) const
   {
     return m_options.gui ();
   }
 
   int gui_application::execute (void)
   {
-    thread_manager::block_interrupt_signal ();
+    octave_block_interrupt_signal ();
 
     set_application_id ();
 
     std::string show_gui_msgs =
       sys::env::getenv ("OCTAVE_SHOW_GUI_MESSAGES");
 
     // Installing our handler suppresses the messages.
 
diff --git a/libgui/src/terminal-dock-widget.cc b/libgui/src/terminal-dock-widget.cc
--- a/libgui/src/terminal-dock-widget.cc
+++ b/libgui/src/terminal-dock-widget.cc
@@ -25,16 +25,19 @@ along with Octave; see the file COPYING.
 #  include "config.h"
 #endif
 
 #include <QDesktopWidget>
 
 #include "terminal-dock-widget.h"
 #include "resource-manager.h"
 
+#include "sighandlers.h"
+#include "quit.h"
+
 namespace octave
 {
   terminal_dock_widget::terminal_dock_widget (QWidget *p)
     : octave_dock_widget (p), m_terminal (QTerminal::create (p))
   {
     m_terminal->setObjectName ("OctaveTerminal");
     m_terminal->setFocusPolicy (Qt::StrongFocus);
 
@@ -98,11 +101,14 @@ namespace octave
 
     w->setFocus ();
     w->activateWindow ();
     w->raise ();
   }
 
   void terminal_dock_widget::terminal_interrupt (void)
   {
-    emit interrupt_signal ();
+    // FIXME: Protect with mutex?
+
+    octave_signal_caught = 1;
+    octave_interrupt_state++;
   }
 }
diff --git a/libgui/src/thread-manager.cc b/libgui/src/thread-manager.cc
deleted file mode 100644
--- a/libgui/src/thread-manager.cc
+++ /dev/null
@@ -1,123 +0,0 @@
-/*
-
-Copyright (C) 2013-2018 John W. Eaton
-
-This file is part of Octave.
-
-Octave is free software: you can redistribute it and/or modify it
-under the terms of the GNU General Public License as published by
-the Free Software Foundation, either version 3 of the License, or
-(at your option) any later version.
-
-Octave is distributed in the hope that it will be useful, but
-WITHOUT ANY WARRANTY; without even the implied warranty of
-MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-GNU General Public License for more details.
-
-You should have received a copy of the GNU General Public License
-along with Octave; see the file COPYING.  If not, see
-<https://www.gnu.org/licenses/>.
-
-*/
-
-#if defined (HAVE_CONFIG_H)
-#  include "config.h"
-#endif
-
-#if defined (OCTAVE_USE_WINDOWS_API)
-#  include <windows.h>
-#else
-#  include <pthread.h>
-#endif
-
-#include "signal-wrappers.h"
-
-#include "thread-manager.h"
-
-namespace octave
-{
-#if defined (OCTAVE_USE_WINDOWS_API)
-
-  class windows_thread_manager : public base_thread_manager
-  {
-  public:
-
-    windows_thread_manager (void) : base_thread_manager () { }
-
-    void register_current_thread (void) { }
-
-    void interrupt (void)
-    {
-      GenerateConsoleCtrlEvent (CTRL_C_EVENT, 0);
-    }
-  };
-
-#else
-
-  class pthread_thread_manager : public base_thread_manager
-  {
-  public:
-
-    pthread_thread_manager (void)
-      : base_thread_manager (), m_my_thread (), m_initialized (false)
-    { }
-
-    void register_current_thread (void)
-    {
-      m_my_thread = pthread_self ();
-      m_initialized = true;
-    }
-
-    void interrupt (void)
-    {
-      if (m_initialized)
-        {
-          // Send SIGINT to all other processes in our process group.
-          // This is needed to interrupt calls to system (), for example.
-
-          // FIXME: What happens if some code inside a
-          // {BEGIN,END}_INTERRUPT_IMMEDIATELY_IN_FOREIGN_CODE block starts
-          // additional threads and one of those happens to catch this signal?
-          // Would the interrupt handler and the subsequent longjmp and exception
-          // all be executed in the wrong thread?  If so, is there any way to
-          // prevent that from happening?
-
-          int sigint;
-          octave_get_sig_number ("SIGINT", &sigint);
-
-          octave_kill_wrapper (0, sigint);
-        }
-    }
-
-  private:
-
-    pthread_t m_my_thread;
-
-    bool m_initialized;
-  };
-
-#endif
-
-  thread_manager::thread_manager (void)
-    : m_rep (thread_manager::create_rep ())
-  { }
-
-  void thread_manager::block_interrupt_signal (void)
-  {
-    octave_block_interrupt_signal ();
-  }
-
-  void thread_manager::unblock_interrupt_signal (void)
-  {
-    octave_unblock_interrupt_signal ();
-  }
-
-  base_thread_manager * thread_manager::create_rep (void)
-  {
-#if defined (OCTAVE_USE_WINDOWS_API)
-    return new windows_thread_manager ();
-#else
-    return new pthread_thread_manager ();
-#endif
-  }
-}
diff --git a/libgui/src/thread-manager.h b/libgui/src/thread-manager.h
deleted file mode 100644
--- a/libgui/src/thread-manager.h
+++ /dev/null
@@ -1,77 +0,0 @@
-/*
-
-Copyright (C) 2013-2018 John W. Eaton
-
-This file is part of Octave.
-
-Octave is free software: you can redistribute it and/or modify it
-under the terms of the GNU General Public License as published by
-the Free Software Foundation, either version 3 of the License, or
-(at your option) any later version.
-
-Octave is distributed in the hope that it will be useful, but
-WITHOUT ANY WARRANTY; without even the implied warranty of
-MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-GNU General Public License for more details.
-
-You should have received a copy of the GNU General Public License
-along with Octave; see the file COPYING.  If not, see
-<https://www.gnu.org/licenses/>.
-
-*/
-
-#if ! defined (octave_thread_manager_h)
-#define octave_thread_manager_h 1
-
-#include "octave-config.h"
-
-#include <memory>
-
-namespace octave
-{
-  class base_thread_manager
-  {
-  public:
-
-    friend class thread_manager;
-
-    base_thread_manager (void) = default;
-
-    base_thread_manager (const base_thread_manager&) = default;
-
-    virtual ~base_thread_manager (void) = default;
-
-    virtual void register_current_thread (void) = 0;
-
-    virtual void interrupt (void) = 0;
-  };
-
-  class thread_manager
-  {
-  public:
-
-    thread_manager (void);
-
-    ~thread_manager (void) = default;
-
-    thread_manager (const thread_manager&) = default;
-
-    thread_manager& operator = (const thread_manager&) = default;
-
-    void register_current_thread (void) { m_rep->register_current_thread (); }
-
-    void interrupt (void) { m_rep->interrupt (); }
-
-    static void block_interrupt_signal (void);
-
-    static void unblock_interrupt_signal (void);
-
-  private:
-
-    std::shared_ptr<base_thread_manager> m_rep;
-
-    static base_thread_manager * create_rep (void);
-  };
-}
-
-#endif
