# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1264827799 -3600
#      Sat Jan 30 06:03:19 2010 +0100
# Node ID d3fc22c3071cb0cd7a94a2a585c45a671772c48f
# Parent  2884758e265bc9c56f10fe9bc8392d530aa3f48e
omit ~ values from multi-assignment return lists

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,14 @@
+2010-01-30  Jaroslav Hajek  <highegg@gmail.com>
+
+	* oct-lvalue.h (octave_lvalue::black_hole): Remove field.
+	(octave_lvalue::(all methods)): Update.
+	* oct-lvalue.cc: Ditto.
+
 2010-01-29  David Grundberg  <davidg@cs.umu.se>
 
 	* mex.cc (mex::realloc): Allocate new memory if the argument is
 	NULL.
 
 2010-01-29  Ryan Rusaw  <rrusaw@gmail.com>
 
 	* pt-eval.h, pt-eval.cc (tree_evaluator::do_keyboard):
diff --git a/src/oct-lvalue.cc b/src/oct-lvalue.cc
--- a/src/oct-lvalue.cc
+++ b/src/oct-lvalue.cc
@@ -28,22 +28,25 @@ along with Octave; see the file COPYING.
 #include "error.h"
 #include "oct-obj.h"
 #include "oct-lvalue.h"
 #include "ov.h"
 
 void
 octave_lvalue::assign (octave_value::assign_op op, const octave_value& rhs)
 {
-  octave_value tmp (idx.empty ()
-		    ? val->assign (op, rhs)
-		    : val->assign (op, type, idx, rhs));
+  if (val)
+    {
+      octave_value tmp (idx.empty ()
+                        ? val->assign (op, rhs)
+                        : val->assign (op, type, idx, rhs));
 
-  if (! error_state)
-    *val = tmp;
+      if (! error_state)
+        *val = tmp;
+    }
 }
 
 void
 octave_lvalue::set_index (const std::string& t,
 			  const std::list<octave_value_list>& i)
 {
   if (idx.empty ())
     {
@@ -52,37 +55,45 @@ octave_lvalue::set_index (const std::str
     }
   else
     error ("invalid index expression in assignment");
 }
 
 void
 octave_lvalue::do_unary_op (octave_value::unary_op op)
 {
-  octave_value tmp (idx.empty ()
-		    ? val->do_non_const_unary_op (op)
-		    : val->do_non_const_unary_op (op, type, idx));
+  if (val)
+    {
+      octave_value tmp (idx.empty ()
+                        ? val->do_non_const_unary_op (op)
+                        : val->do_non_const_unary_op (op, type, idx));
 
-  if (! error_state)
-    *val = tmp;
+      if (! error_state)
+        *val = tmp;
+    }
+  else
+    error ("internal: invalid operation on ~");
 }
 
 octave_value
 octave_lvalue::value (void)
 {
   octave_value retval;
 
-  if (idx.empty ())
-    retval = *val;
-  else
+  if (val)
     {
-      if (val->is_constant ())
-	retval = val->subsref (type, idx);
+      if (idx.empty ())
+        retval = *val;
       else
-	{
-	  octave_value_list t = val->subsref (type, idx, 1);
-	  if (t.length () > 0)
-	    retval = t(0);	      
-	}
+        {
+          if (val->is_constant ())
+            retval = val->subsref (type, idx);
+          else
+            {
+              octave_value_list t = val->subsref (type, idx, 1);
+              if (t.length () > 0)
+                retval = t(0);	      
+            }
+        }
     }
 
   return retval;
 }
diff --git a/src/oct-lvalue.h b/src/oct-lvalue.h
--- a/src/oct-lvalue.h
+++ b/src/oct-lvalue.h
@@ -34,54 +34,51 @@ class octave_value_list;
 
 class
 octave_lvalue
 {
 public:
 
   octave_lvalue (octave_value *v = 0)
     : val (v), type (), idx (), nel (1) 
-    {
-      if (! v)
-        val = &black_hole;
-    }
+    { }
 
   octave_lvalue (const octave_lvalue& vr)
     : val (vr.val), type (vr.type), idx (vr.idx), nel (vr.nel) 
     { 
-      if (vr.is_black_hole ())
-        val = &black_hole;
     }
 
   octave_lvalue& operator = (const octave_lvalue& vr)
     {
       if (this != &vr)
 	{
 	  val = vr.val;
-          if (vr.is_black_hole ())
-            val = &black_hole;
 	  type = vr.type;
 	  idx = vr.idx;
 	  nel = vr.nel;
 	}
 
       return *this;
     }
 
   ~octave_lvalue (void) { }
 
-  bool is_black_hole (void) const { return val == &black_hole; }
+  bool is_black_hole (void) const { return val == 0; }
 
-  bool is_defined (void) const { return val->is_defined (); }
+  bool is_defined (void) const { return val && val->is_defined (); }
+
+  bool is_undefined (void) const { return ! val || val->is_undefined (); }
 
-  bool is_undefined (void) const { return val->is_undefined (); }
+  bool is_map (void) const { return val && val->is_map (); }
 
-  bool is_map (void) const { return val->is_map (); }
-
-  void define (const octave_value& v) { *val = v; }
+  void define (const octave_value& v) 
+    { 
+      if (val)
+        *val = v; 
+    }
 
   void assign (octave_value::assign_op, const octave_value&);
 
   void numel (octave_idx_type n) { nel = n; }
 
   octave_idx_type numel (void) const { return nel; }
 
   void set_index (const std::string& t, const std::list<octave_value_list>& i);
@@ -98,13 +95,11 @@ private:
 
   octave_value *val;
 
   std::string type;
 
   std::list<octave_value_list> idx;
 
   octave_idx_type nel;
-
-  octave_value black_hole;
 };
 
 #endif
diff --git a/src/pt-assign.cc b/src/pt-assign.cc
--- a/src/pt-assign.cc
+++ b/src/pt-assign.cc
@@ -418,17 +418,22 @@ tree_multi_assignment::rvalue (int)
                 error ("some elements undefined in return list");
             }
           else
             {
               if (k < n)
                 {
                   ult.assign (etype, rhs_val(k));
 
-                  if (! error_state)
+                  if (ult.is_black_hole ())
+                    {
+                      k++;
+                      continue;
+                    }
+                  else if (! error_state)
                     {
                       if (etype == octave_value::op_asn_eq)
                         retval_list.push_back (rhs_val(k));
                       else
                         retval_list.push_back (ult.value ());
 
                       k++;
                     }
