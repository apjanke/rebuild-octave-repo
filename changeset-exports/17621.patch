# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1381372723 14400
#      Wed Oct 09 22:38:43 2013 -0400
# Node ID d41c8f96ed0653fe2639a1bab3e7fa8a4ed8f362
# Parent  83e6baf0bc3f6fbebed081efe7ab9e896fe22cd3
avoid memory leaks in base_64_encode and base_64_decode (bug #40228)

* data.cc (Fbase64_encode): Free array allocated by
octave_base64_encode.
* oct-base64.cc (octave_base64_decode): Free array allocated by
base64_decode_alloc.

diff --git a/libinterp/corefcn/data.cc b/libinterp/corefcn/data.cc
--- a/libinterp/corefcn/data.cc
+++ b/libinterp/corefcn/data.cc
@@ -7338,20 +7338,23 @@ Encode a double matrix or array @var{x} 
             {                                                           \
               const X##NDArray in = args(0).  X## _array_value ();      \
               size_t inlen =                                            \
                 in.numel () * sizeof (X## _t) / sizeof (char);          \
               const char* inc =                                         \
                 reinterpret_cast<const char*> (in.data ());             \
               char* out;                                                \
               if (! error_state                                         \
-                  && octave_base64_encode (inc, inlen, &out))          \
-                retval(0) = octave_value (out);                         \
+                  && octave_base64_encode (inc, inlen, &out))           \
+                {                                                       \
+                  retval(0) = octave_value (out);                       \
+                  ::free (out);                                         \
+                }                                                       \
             }
-                                          
+
           MAKE_INT_BRANCH(int8)
           else MAKE_INT_BRANCH(int16)
           else MAKE_INT_BRANCH(int32)
           else MAKE_INT_BRANCH(int64)
           else MAKE_INT_BRANCH(uint8)
           else MAKE_INT_BRANCH(uint16)
           else MAKE_INT_BRANCH(uint32)
           else MAKE_INT_BRANCH(uint64)
@@ -7365,29 +7368,35 @@ Encode a double matrix or array @var{x} 
           const Array<float> in = args(0).float_array_value ();
           size_t inlen;
           inlen = in.numel () * sizeof (float) / sizeof (char); 
           const char*  inc;
           inc = reinterpret_cast<const char*> (in.data ());  
           char* out;
           if (! error_state 
               && octave_base64_encode (inc, inlen, &out))
-            retval(0) = octave_value (out);
+            {
+              retval(0) = octave_value (out);
+              ::free (out);
+            }
         }                 
       else
         {
           const Array<double> in = args(0).array_value ();
           size_t inlen;
           inlen = in.numel () * sizeof (double) / sizeof (char); 
           const char*  inc;
           inc = reinterpret_cast<const char*> (in.data ());   
           char* out;
           if (! error_state 
               && octave_base64_encode (inc, inlen, &out))
-            retval(0) = octave_value (out);
+            {
+              retval(0) = octave_value (out);
+              ::free (out);
+            }
         }
     }  
   return retval;
 }
 
 /*
 %!assert (base64_encode (single (pi)), "2w9JQA==")
 %!assert (base64_encode (uint8 ([0 0 0])), "AAAA")
diff --git a/liboctave/util/oct-base64.cc b/liboctave/util/oct-base64.cc
--- a/liboctave/util/oct-base64.cc
+++ b/liboctave/util/oct-base64.cc
@@ -77,14 +77,15 @@ octave_base64_decode (const std::string&
         (*current_liboctave_error_handler)
           ("base64_decode: incorrect input size");
       else
         {
           octave_idx_type len = (outlen * sizeof (char)) / sizeof (double);
           retval.resize (dim_vector (1, len));
           double *dout = reinterpret_cast<double*> (out);
           std::copy (dout, dout + len, retval.fortran_vec ());
+          ::free (out);
         }
     }
 
   return retval;
 }
 
