# HG changeset patch
# User David Bateman <dbateman@free.fr>
# Date 1205886470 14400
#      Tue Mar 18 20:27:50 2008 -0400
# Node ID 24abf5a702d93057c7a788db2a98a624c1eb5802
# Parent  461d6bfba85ac049339c6979ae7f79141982d578
Chop trailing singletons in min/max functions

diff --git a/liboctave/CNDArray.cc b/liboctave/CNDArray.cc
--- a/liboctave/CNDArray.cc
+++ b/liboctave/CNDArray.cc
@@ -766,16 +766,19 @@ ComplexNDArray::max (ArrayN<octave_idx_t
 	}
       else
 	{
 	  result.elem (i) = tmp_max;
 	  idx_arg.elem (i) = idx_j;
 	}
     }
 
+  result.chop_trailing_singletons ();
+  idx_arg.chop_trailing_singletons ();
+
   return result;
 }
 
 ComplexNDArray
 ComplexNDArray::min (int dim) const
 {
   ArrayN<octave_idx_type> dummy_idx;
   return min (dummy_idx, dim);
@@ -858,16 +861,19 @@ ComplexNDArray::min (ArrayN<octave_idx_t
 	}
       else
 	{
 	  result.elem (i) = tmp_min;
 	  idx_arg.elem (i) = idx_j;
 	}
     }
 
+  result.chop_trailing_singletons ();
+  idx_arg.chop_trailing_singletons ();
+
   return result;
 }
 
 NDArray
 ComplexNDArray::abs (void) const
 {
   NDArray retval (dims ());
 
diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,10 +1,14 @@
 2008-03-18  David Bateman  <dbateman@free.fr>
 
+	* dNDArray.cc (NDArray::min, NDArraymax): chop trailing singletons.
+	* CNDarray.cc (ComplexNDArray::min, CompelxNDArray::max): ditto.
+	* intNDarray.cc (intNDArray<T>::min, intNDArray<T>::max): ditto.
+	
 	* Array.cc (Array<T>::index): Don't short_freeze on index with
 	fewer dimensions than the array only if the last dimension is empty.
 
 2008-03-18  John W. Eaton  <jwe@octave.org>
 
 	* oct-inttypes.h (octave_int_fit_to_range):
 	Use partial specialization for double values.
 
diff --git a/liboctave/dNDArray.cc b/liboctave/dNDArray.cc
--- a/liboctave/dNDArray.cc
+++ b/liboctave/dNDArray.cc
@@ -737,16 +737,19 @@ NDArray::max (ArrayN<octave_idx_type>& i
 	      tmp_max = tmp;
 	    }
 	}
 
       result.elem (i) = tmp_max;
       idx_arg.elem (i) = xisnan (tmp_max) ? 0 : idx_j;
     }
 
+  result.chop_trailing_singletons ();
+  idx_arg.chop_trailing_singletons ();
+
   return result;
 }
 
 NDArray
 NDArray::min (int dim) const
 {
   ArrayN<octave_idx_type> dummy_idx;
   return min (dummy_idx, dim);
@@ -812,16 +815,19 @@ NDArray::min (ArrayN<octave_idx_type>& i
 	      tmp_min = tmp;
 	    }
 	}
 
       result.elem (i) = tmp_min;
       idx_arg.elem (i) = xisnan (tmp_min) ? 0 : idx_j;
     }
 
+  result.chop_trailing_singletons ();
+  idx_arg.chop_trailing_singletons ();
+
   return result;
 }
 
 NDArray
 NDArray::concat (const NDArray& rb, const Array<octave_idx_type>& ra_idx)
 {
   if (rb.numel () > 0)
     insert (rb, ra_idx);
diff --git a/liboctave/intNDArray.cc b/liboctave/intNDArray.cc
--- a/liboctave/intNDArray.cc
+++ b/liboctave/intNDArray.cc
@@ -322,16 +322,19 @@ intNDArray<T>::max (ArrayN<octave_idx_ty
 	      tmp_max = tmp;
 	    }
 	}
 
       result.elem (i) = tmp_max;
       idx_arg.elem (i) = idx_j;
     }
 
+  result.chop_trailing_singletons ();
+  idx_arg.chop_trailing_singletons ();
+
   return result;
 }
 
 template <class T>
 intNDArray<T>
 intNDArray<T>::min (int dim) const
 {
   ArrayN<octave_idx_type> dummy_idx;
@@ -389,16 +392,19 @@ intNDArray<T>::min (ArrayN<octave_idx_ty
 	      tmp_min = tmp;
 	    }
 	}
 
       result.elem (i) = tmp_min;
       idx_arg.elem (i) = idx_j;
     }
 
+  result.chop_trailing_singletons ();
+  idx_arg.chop_trailing_singletons ();
+
   return result;
 }
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,12 @@
+2008-03-18  David Bateman  <dbateman@free.fr>
+
+	* DLD-FUNCTIONS/minmax.cc: 64-bit indexing fix.
+
 2008-03-13  John W. Eaton  <jwe@octave.org>
 
 	* ov-usr-fcn.cc (octave_user_function::octave_user_function):
 	Handle num_named_args in initialization list instead of functinon body.
 
 	* octave.gperf: Eliminate varargin and varargout keywords.
 	* lex.l (is_keyword_token): Eliminate varargin_kw and varargout_kw
 	from switch statement.
diff --git a/src/DLD-FUNCTIONS/minmax.cc b/src/DLD-FUNCTIONS/minmax.cc
--- a/src/DLD-FUNCTIONS/minmax.cc
+++ b/src/DLD-FUNCTIONS/minmax.cc
@@ -103,17 +103,17 @@ along with Octave; see the file COPYING.
 	{ \
 	  double nan_val = lo_ieee_nan_value (); \
  \
 	  NDArray idx (index.dims ()); \
  \
 	  for (octave_idx_type i = 0; i < len; i++) \
 	    { \
 	      OCTAVE_QUIT; \
-	      int tmp = index.elem (i) + 1; \
+	      octave_idx_type tmp = index.elem (i) + 1; \
 	      idx.elem (i) = (tmp <= 0) \
 		? nan_val : static_cast<double> (tmp); \
 	    } \
  \
 	  retval(1) = idx; \
 	} \
       else \
 	retval(1) = NDArray (); \
@@ -249,17 +249,17 @@ along with Octave; see the file COPYING.
 	{ \
 	  double nan_val = lo_ieee_nan_value (); \
  \
 	  NDArray idx (index.dims ()); \
  \
 	  for (octave_idx_type i = 0; i < len; i++) \
 	    { \
 	      OCTAVE_QUIT; \
-	      int tmp = index.elem (i) + 1; \
+	      octave_idx_type tmp = index.elem (i) + 1; \
 	      idx.elem (i) = (tmp <= 0) \
 		? nan_val : static_cast<double> (tmp); \
 	    } \
  \
 	  retval(1) = idx; \
 	} \
       else \
 	retval(1) = NDArray (); \
@@ -588,16 +588,43 @@ minimum value(s). Thus,\n\
         ix = 3\n\
 @end group\n\
 @end example\n\
 @end deftypefn")
 {
   MINMAX_BODY (min);
 }
 
+/*
+
+%% test/octave.test/arith/min-1.m
+%!assert (min ([1, 4, 2, 3]) == 1);
+%!assert (min ([1; -10; 5; -2]) == -10);
+
+%% test/octave.test/arith/min-2.m
+%!assert(all (min ([4, i; -2, 2]) == [-2, i]));
+
+%% test/octave.test/arith/min-3.m
+%!error <Invalid call to min.*> min ();
+
+%% test/octave.test/arith/min-4.m
+%!error <Invalid call to min.*> min (1, 2, 3, 4);
+
+%!test
+%! x = reshape (1:8,[2,2,2]);
+%! assert (max (x,[],1), reshape ([2, 4, 6, 8], [1,2,2]));
+%! assert (max (x,[],2), reshape ([3, 4, 7, 8], [2,1,2]));
+%! [y, i ] = max (x, [], 3);
+%! assert (y, [5, 7; 6, 8]);
+%! assert (ndims(y), 2);
+%! assert (i, [2, 2; 2, 2]);
+%! assert (ndims(i), 2);
+
+*/
+
 DEFUN_DLD (max, args, nargout,
   "-*- texinfo -*-\n\
 @deftypefn {Mapping Function} {} max (@var{x}, @var{y}, @var{dim})\n\
 @deftypefnx {Mapping Function} {[@var{w}, @var{iw}] =} max (@var{x})\n\
 @cindex Utility Functions\n\
 For a vector argument, return the maximum value.  For a matrix\n\
 argument, return the maximum value from each column, as a row\n\
 vector, or over the dimension @var{dim} if defined. For two matrices\n\
@@ -635,13 +662,41 @@ maximum value(s). Thus,\n\
         ix = 3\n\
 @end group\n\
 @end example\n\
 @end deftypefn")
 {
   MINMAX_BODY (max);
 }
 
+/* 
+
+%% test/octave.test/arith/max-1.m
+%!assert (max ([1, 4, 2, 3]) == 4);
+%!assert (max ([1; -10; 5; -2]) == 5);
+ 
+%% test/octave.test/arith/max-2.m
+%!assert(all (max ([4, i 4.999; -2, 2, 3+4i]) == [4, 2, 3+4i]));
+
+%% test/octave.test/arith/max-3.m
+%!error <Invalid call to max.*> max ();
+
+%% test/octave.test/arith/max-4.m
+%!error <Invalid call to max.*> max (1, 2, 3, 4);
+
+%!test
+%! x = reshape (1:8,[2,2,2]);
+%! assert (min (x,[],1), reshape ([1, 3, 5, 7], [1,2,2]));
+%! assert (min (x,[],2), reshape ([1, 2, 5, 6], [2,1,2]));
+%! [y, i ] = min (x, [], 3);
+%! assert (y, [1, 3; 2, 4]);
+%! assert (ndims(y), 2);
+%! assert (i, [1, 1; 1, 1]);
+%! assert (ndims(i), 2);
+
+
+*/
+
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
diff --git a/test/test_arith.m b/test/test_arith.m
--- a/test/test_arith.m
+++ b/test/test_arith.m
@@ -130,42 +130,16 @@
 %% test/octave.test/arith/gcd-2.m
 %!error <Invalid call to gcd.*> gcd ();
 
 %% test/octave.test/arith/gcd-3.m
 %!test
 %! s.a = 1;
 %! fail("gcd (s)");
 
-%% test/octave.test/arith/max-1.m
-%!assert (max ([1, 4, 2, 3]) == 4);
-%!assert (max ([1; -10; 5; -2]) == 5);
-
-%% test/octave.test/arith/max-2.m
-%!assert(all (max ([4, i 4.999; -2, 2, 3+4i]) == [4, 2, 3+4i]));
-
-%% test/octave.test/arith/max-3.m
-%!error <Invalid call to max.*> max ();
-
-%% test/octave.test/arith/max-4.m
-%!error <Invalid call to max.*> max (1, 2, 3, 4);
-
-%% test/octave.test/arith/min-1.m
-%!assert (min ([1, 4, 2, 3]) == 1);
-%!assert (min ([1; -10; 5; -2]) == -10);
-
-%% test/octave.test/arith/min-2.m
-%!assert(all (min ([4, i; -2, 2]) == [-2, i]));
-
-%% test/octave.test/arith/min-3.m
-%!error <Invalid call to min.*> min ();
-
-%% test/octave.test/arith/min-4.m
-%!error <Invalid call to min.*> min (1, 2, 3, 4);
-
 %% test/octave.test/arith/round-1.m
 %!assert((round (1) == 1 && round (1.1) == 1 && round (5.5) == 6
 %! && round (i) == i && round (2.5+3.5i) == 3+4i && round (-2.6) == -3));
 
 %% test/octave.test/arith/round-2.m
 %!assert(all (all (round ([1.1, -2.4; -3.7, 7.1]) == [1, -2; -4, 7])));
 
 %% test/octave.test/arith/round-3.m
