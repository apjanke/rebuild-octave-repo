# HG changeset patch
# User jwe
# Date 949050874 0
#      Fri Jan 28 09:14:34 2000 +0000
# Node ID cbee5fbb696d44fbea7208abb850c8dd4c53c0ef
# Parent  85c0ebb78d1e809329d503f93de7bbe37326833e
[project @ 2000-01-28 09:14:32 by jwe]

diff --git a/doc/interpreter/octave.texi b/doc/interpreter/octave.texi
--- a/doc/interpreter/octave.texi
+++ b/doc/interpreter/octave.texi
@@ -156,16 +156,17 @@ It corresponds to GNU Octave version @va
 * Copying::                     The GNU General Public License.
 * Concept Index::               An item for each concept.
 * Variable Index::              An item for each documented variable.
 * Function Index::              An item for each documented function.
 * Operator Index::              An item for each documented operator.
 
 
 
+
 @detailmenu
  --- The Detailed Node Listing ---
 
 Preface
 
 * Acknowledgements::            
 * How You Can Contribute to Octave::  
 * Distribution::                
@@ -279,16 +280,17 @@ Boolean Expressions
 * Element-by-element Boolean Operators::  
 * Short-circuit Boolean Operators::  
 
 Statements
 
 * The if Statement::            
 * The switch Statement::        
 * The while Statement::         
+* The do-until Statement::      
 * The for Statement::           
 * The break Statement::         
 * The continue Statement::      
 * The unwind_protect Statement::  
 * The try Statement::           
 * Continuation Lines::          
 
 The @code{for} Statement
@@ -386,16 +388,17 @@ Optimization
 
 * Quadratic Programming::       
 * Nonlinear Programming::       
 * Linear Least Squares::        
 
 Statistics
 
 * Basic Statistical Functions::  
+* Tests::                       
 * Models::                      
 * Distributions::               
 
 Control Theory
 
 * sysstruct::                   
 * sysinterface::                
 * sysdisp::                     
diff --git a/doc/interpreter/stmt.txi b/doc/interpreter/stmt.txi
--- a/doc/interpreter/stmt.txi
+++ b/doc/interpreter/stmt.txi
@@ -30,16 +30,17 @@ missing end tokens.
 The list of statements contained between keywords like @code{if} or
 @code{while} and the corresponding end statement is called the
 @dfn{body} of a control statement.
 
 @menu
 * The if Statement::            
 * The switch Statement::        
 * The while Statement::         
+* The do-until Statement::      
 * The for Statement::           
 * The break Statement::         
 * The continue Statement::      
 * The unwind_protect Statement::  
 * The try Statement::           
 * Continuation Lines::          
 @end menu
 
@@ -288,17 +289,17 @@ The implementation is simple-minded and 
 performance improvement over an equivalent @code{if} block, even if all
 the labels are integer constants.  Perhaps a future variation on this
 could detect all constant integer labels and improve performance by
 using a jump table.
 @end itemize
 
 @DOCSTRING(warn_variable_switch_label)
 
-@node The while Statement, The for Statement, The switch Statement, Statements
+@node The while Statement, The do-until Statement, The switch Statement, Statements
 @section The @code{while} Statement
 @cindex @code{while} statement
 @cindex @code{endwhile} statement
 @cindex loop
 @cindex body of a loop
 
 In programming, a @dfn{loop} means a part of a program that is (or at least can
 be) executed two or more times in succession.
@@ -360,17 +361,67 @@ reaches 11.
 
 A newline is not required between the condition and the
 body; but using one makes the program clearer unless the body is very
 simple.
 
 @xref{The if Statement}, for a description of the variable
 @code{warn_assign_as_truth_value}.
 
-@node The for Statement, The break Statement, The while Statement, Statements
+@node The do-until Statement, The for Statement, The while Statement, Statements
+@section The @code{do-until} Statement
+@cindex @code{do-until} statement
+
+The @code{do-until} statement is similar to the @code{while} statement,
+except that it repeatedly executes a statement until a condition becomes
+true, and the test of the condition is at the end of the loop, so the
+body of the loop is always executed at least once.  As with the
+condition in an @code{if} statement, the condition in a @code{do-until}
+statement is considered true if its value is non-zero, and false if its
+value is zero.  If the value of the conditional expression in a
+@code{do-until} statement is a vector or a matrix, it is considered 
+true only if @emph{all} of the elements are non-zero.
+
+Octave's @code{do-until} statement looks like this:
+
+@example
+@group
+do
+  @var{body}
+until (@var{condition})
+@end group
+@end example
+
+@noindent
+Here @var{body} is a statement or list of statements that we call the
+@dfn{body} of the loop, and @var{condition} is an expression that
+controls how long the loop keeps running.
+
+This example creates a variable @code{fib} that contains the first ten
+elements of the Fibonacci sequence.
+
+@example
+@group
+fib = ones (1, 10);
+i = 2;
+do
+  i++;
+  fib (i) = fib (i-1) + fib (i-2);
+until (i == 10)
+@end group
+@end example
+
+A newline is not required between the @code{do} keyword and the
+body; but using one makes the program clearer unless the body is very
+simple.
+
+@xref{The if Statement}, for a description of the variable
+@code{warn_assign_as_truth_value}.
+
+@node The for Statement, The break Statement, The do-until Statement, Statements
 @section The @code{for} Statement
 @cindex @code{for} statement
 @cindex @code{endfor} statement
 
 The @code{for} statement makes it more convenient to count iterations of a
 loop.  The general form of the @code{for} statement looks like this:
 
 @example
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,20 @@
+2000-01-28  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* parse.y (evaluating_function_body): New global flag.
+	* ov-usr-fcn.cc (octave_user_function::do_index_op):
+	Protect and set it here.
+	* parse.y (make_break_command, make_return_command): Check it here.
+
+	* error.cc (warning_state): New global flag.
+	(warning): Set it here.
+	* lex.l (reset_parser): Clear it here.
+	* parse.y (fold): Check it here.
+
 2000-01-27  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* pt-walk.h (tree_walker::visit_do_until_command): New pure virtual.
 	* pt-pr-code.cc (tree_print_code::visit_do_until_command):
 	New function.
 	* pt-loop.h (tree_do_until_command): New class.
 	(tree_while_command::expr, tree_while_command::list):
 	Now protected instead of private.
diff --git a/src/error.cc b/src/error.cc
--- a/src/error.cc
+++ b/src/error.cc
@@ -41,16 +41,19 @@ Software Foundation, 59 Temple Place - S
 
 // TRUE means that Octave will try to beep obnoxiously before printing
 // error messages.
 static bool Vbeep_on_error;
 
 // Current error state.
 int error_state = 0;
 
+// Current warning state.
+int warning_state = 0;
+
 // Tell the error handler whether to print messages, or just store
 // them for later.  Used for handling errors in eval() and
 // the `unwind_protect' statement.
 bool buffer_error_messages = false;
 
 // The message buffer
 ostrstream *error_message_buffer = 0;
 
@@ -166,16 +169,17 @@ usage (const char *fmt, ...)
   va_end (args);
 }
 
 void
 warning (const char *fmt, ...)
 {
   va_list args;
   va_start (args, fmt);
+  warning_state = 1;
   verror ("warning", fmt, args);
   va_end (args);
 }
 
 void
 error (const char *fmt, ...)
 {
   va_list args;
diff --git a/src/error.h b/src/error.h
--- a/src/error.h
+++ b/src/error.h
@@ -34,16 +34,19 @@ extern void usage (const char *fmt, ...)
 extern void warning (const char *fmt, ...);
 extern void error (const char *fmt, ...);
 extern void parse_error (const char *fmt, ...);
 extern void panic (const char *fmt, ...) GCC_ATTR_NORETURN;
 
 // Current error state.
 extern int error_state;
 
+// Current warning state.
+extern int warning_state;
+
 // Tell the error handler whether to print messages, or just store
 // them for later.  Used for handling errors in eval() and
 // the `unwind_protect' statement.
 extern bool buffer_error_messages;
 
 // The message buffer
 extern ostrstream *error_message_buffer;
 
diff --git a/src/lex.l b/src/lex.l
--- a/src/lex.l
+++ b/src/lex.l
@@ -734,16 +734,17 @@ do_comma_insert_check (void)
 // doing any parsing.
 
 void
 reset_parser (void)
 {
   // Start off on the right foot.
   BEGIN 0;
   error_state = 0;
+  warning_state = 0;
 
   // We do want a prompt by default.
   promptflag = 1;
 
   // Error may have occurred inside some brackets, braces, or parentheses.
   nesting_level.clear ();
 
   // Clear out the stack of token info used to track line and column
diff --git a/src/ov-usr-fcn.cc b/src/ov-usr-fcn.cc
--- a/src/ov-usr-fcn.cc
+++ b/src/ov-usr-fcn.cc
@@ -42,16 +42,17 @@ Software Foundation, 59 Temple Place - S
 #include "pt-misc.h"
 #include "pt-pr-code.h"
 #include "pt-stmt.h"
 #include "pt-walk.h"
 #include "symtab.h"
 #include "toplev.h"
 #include "unwind-prot.h"
 #include "utils.h"
+#include "parse.h"
 #include "variables.h"
 
 // If TRUE, variables returned from functions have default values even
 // if they are not explicitly initialized.
 static bool Vdefine_all_return_values;
 
 // Maximum nesting level for functions called recursively.
 static int Vmax_recursion_depth;
@@ -373,16 +374,19 @@ octave_user_function::do_index_op (int n
 
     bool echo_commands = (Vecho_executing_commands & ECHO_FUNCTIONS);
 
     if (echo_commands)
       print_code_function_header ();
 
     // Evaluate the commands that make up the function.
 
+    unwind_protect_bool (evaluating_function_body);
+    evaluating_function_body = true;
+
     octave_value_list tmp = cmd_list->eval ();
 
     octave_value last_computed_value;
 
     if (! tmp.empty ())
       last_computed_value = tmp(0);
 
     if (echo_commands)
diff --git a/src/parse.h b/src/parse.h
--- a/src/parse.h
+++ b/src/parse.h
@@ -64,16 +64,21 @@ extern bool reading_startup_message_prin
 
 // TRUE means input is coming from startup file.
 extern bool input_from_startup_file;
 
 // TRUE means that input is coming from a file that was named on
 // the command line.
 extern bool input_from_command_line_file;
 
+// TRUE means that we are in the process of evaluating a function
+// body.  The parser might be called in that case if we are looking at
+// an eval() statement.
+extern bool evaluating_function_body;
+
 // TRUE means warn about function files that have time stamps in the future.
 extern bool Vwarn_future_time_stamp;
 
 extern void
 parse_and_execute (FILE *f);
 
 extern void
 parse_and_execute (const string& s, bool verbose = false,
diff --git a/src/parse.y b/src/parse.y
--- a/src/parse.y
+++ b/src/parse.y
@@ -112,16 +112,21 @@ bool reading_startup_message_printed = f
 
 // TRUE means input is coming from startup file.
 bool input_from_startup_file = false;
 
 // TRUE means that input is coming from a file that was named on
 // the command line.
 bool input_from_command_line_file = true;
 
+// TRUE means that we are in the process of evaluating a function
+// body.  The parser might be called in that case if we are looking at
+// an eval() statement.
+bool evaluating_function_body = false;
+
 // Forward declarations for some functions defined at the bottom of
 // the file.
 
 // Generic error messages.
 static void
 yyerror (const char *s);
 
 // Error mesages for mismatched end tokens.
@@ -1612,17 +1617,17 @@ fold (tree_binary_expression *e)
 
   tree_expression *op1 = e->lhs ();
   tree_expression *op2 = e->rhs ();
 
   if (op1->is_constant () && op2->is_constant ())
     {
       octave_value tmp = e->rvalue ();
 
-      if (! error_state)
+      if (! (error_state || warning_state))
 	{
 	  tree_constant *tc_retval = new tree_constant (tmp);
 
 	  ostrstream buf;
 
 	  tree_print_code tpc (buf);
 
 	  e->accept (tpc);
@@ -1661,17 +1666,17 @@ fold (tree_unary_expression *e)
   unwind_protect::add (clear_global_error_variable, 0);
 
   tree_expression *op = e->operand ();
 
   if (op->is_constant ())
     {
       octave_value tmp = e->rvalue ();
 
-      if (! error_state)
+      if (! (error_state || warning_state))
 	{
 	  tree_constant *tc_retval = new tree_constant (tmp);
 
 	  ostrstream buf;
 
 	  tree_print_code tpc (buf);
 
 	  e->accept (tpc);
@@ -1719,17 +1724,17 @@ finish_colon_expression (tree_colon_expr
     {
       if (limit)
 	{
 	  if (base->is_constant () && limit->is_constant ()
 	      && (! incr || (incr && incr->is_constant ())))
 	    {
 	      octave_value tmp = e->rvalue ();
 
-	      if (! error_state)
+	      if (! (error_state || warning_state))
 		{
 		  tree_constant *tc_retval = new tree_constant (tmp);
 
 		  ostrstream buf;
 
 		  tree_print_code tpc (buf);
 
 		  e->accept (tpc);
@@ -2138,17 +2143,18 @@ make_for_command (token *for_tok, tree_a
 static tree_command *
 make_break_command (token *break_tok)
 {
   tree_command *retval = 0;
 
   int l = break_tok->line ();
   int c = break_tok->column ();
 
-  if (lexer_flags.looping || lexer_flags.defining_func || reading_script_file)
+  if (lexer_flags.looping || lexer_flags.defining_func
+      || reading_script_file || evaluating_function_body)
     retval = new tree_break_command (l, c);
   else
     retval = new tree_no_op_command ("break", l, c);
 
   return retval;
 }
 
 // Build a continue command.
@@ -2174,17 +2180,18 @@ make_continue_command (token *continue_t
 static tree_command *
 make_return_command (token *return_tok)
 {
   tree_command *retval = 0;
 
   int l = return_tok->line ();
   int c = return_tok->column ();
 
-  if (lexer_flags.defining_func || reading_script_file)
+  if (lexer_flags.defining_func || reading_script_file
+      || evaluating_function_body)
     retval = new tree_return_command (l, c);
   else
     retval = new tree_no_op_command ("return", l, c);
 
   return retval;
 }
 
 // Start an if command.
@@ -2549,17 +2556,17 @@ finish_matrix (tree_matrix *m)
   buffer_error_messages = true;
 
   unwind_protect::add (clear_global_error_variable, 0);
 
   if (m->all_elements_are_constant ())
     {
       octave_value tmp = m->rvalue ();
 
-      if (! error_state)
+      if (! (error_state || warning_state))
 	{
 	  tree_constant *tc_retval = new tree_constant (tmp);
 
 	  ostrstream buf;
 
 	  tree_print_code tpc (buf);
 
 	  m->accept (tpc);
