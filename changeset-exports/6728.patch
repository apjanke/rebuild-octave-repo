# HG changeset patch
# User jwe
# Date 1181855448 0
#      Thu Jun 14 21:10:48 2007 +0000
# Node ID a25173d58101f719542de263c7e771feed2fb4eb
# Parent  3d1e0a056e6e5facb027c35a6e3650061db25a61
[project @ 2007-06-14 21:10:48 by jwe]

diff --git a/doc/ChangeLog b/doc/ChangeLog
--- a/doc/ChangeLog
+++ b/doc/ChangeLog
@@ -1,8 +1,12 @@
+2007-06-14  Paul Kienzle  <pkienzle@users.sf.net>
+
+	* interpreter/testfun.txi: Document xtest block
+
 2007-06-14  David Bateman  <dbateman@free.fr>
 
 	* interpreter/Makefile.in (SCRIPT_SORCES): add interimages.m
 	(INTERPIMAGES*): New variables. Add targets for them
 	(IMAGES_EPS, IMAGES_PDF, IMAGES_PNG): Add the INTERPIMAGES.
 	* interpreter/interpimages.m: New function
 	* interpreter/interp.txi: Add text about second derivation of
 	splines	and add figures.
diff --git a/doc/interpreter/testfun.txi b/doc/interpreter/testfun.txi
--- a/doc/interpreter/testfun.txi
+++ b/doc/interpreter/testfun.txi
@@ -27,26 +27,26 @@ generates an error, then the test is sai
 
 Since @code{eval()} will stop at the first error it encounters, you must
 divide your tests up into blocks, with anything in a separate
 block evaluated separately.  Blocks are introduced by the keyword
 @code{test} immediately following the @code{%!}.  For example,
 
 @example
 @group
-   %!test error("this test fails!");
+   %!test error ("this test fails!");
    %!test "this test doesn't fail since it doesn't generate an error";
 @end group
 @end example
 
 When a test fails, you will see something like:
 
 @example
 @group
-     ***** test error('this test fails!')
+     ***** test error ('this test fails!')
    !!!!! test failed
    this test fails!
 @end group
 @end example
 
 Generally, to test if something works, you want to assert that it
 produces a correct value.  A real test might look something like
 
@@ -104,16 +104,29 @@ is a shorthand form:
 @end example
 
 which is equivalent to:
 
 @example
    %!test assert (@dots{})
 @end example
 
+Sometimes during development there is a test that should work but is
+known to fail.  You still want to leave the test in because when the
+final code is ready the test should pass, but you may not be able to
+fix it immediately.  To avoid unecessary bug reports for these known
+failures, mark the block with @code{xtest} rather than @code{test}:
+
+@example
+   %!xtest error ("This test is known to fail.")
+@end example
+
+Another use of @code{xtest} is for statistical tests which should
+pass most of the time but are known to fail occasionally.
+
 Each block is evaluated in its own function environment, which means
 that variables defined in one block are not automatically shared
 with other blocks.  If you do want to share variables, then you
 must declare them as @code{shared} before you use them.  For example, the
 following declares the variable @var{a}, gives it an initial value (default
 is empty), then uses it in several subsequent tests.
 
 @example
diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,12 +1,16 @@
 2007-06-14  John W. Eaton  <jwe@octave.org>
 
 	* plot/__go_draw_axes__.m: Handle text rotation property.
 
+2007-06-14  Paul Kienzle  <pkienzle@users.sf.net>
+
+	* testfun/test.m: Add xtest support for tests known to fail.
+
 2007-06-14  Sebastian Schubert  <sebastian-schubert@gmx.de>
 
 	* plot/print.m: Handle pstex, pslatex, epslatex, and
 	epslatexstandalone terminals.
 
 2007-06-14  David Bateman  <dbateman@free.fr>
 
 	* general/__splinen__.m: Check also for ND vectors. Fix for N > 2,
diff --git a/scripts/testfun/test.m b/scripts/testfun/test.m
--- a/scripts/testfun/test.m
+++ b/scripts/testfun/test.m
@@ -407,17 +407,17 @@ function [__ret1, __ret2] = test (__name
 	    __success = 1;
           endif
       	end_try_catch
       	clear __test__;
       endif
       __code = ""; # code already processed
       
     ## TEST
-    elseif (strcmp (__type, "test"))
+    elseif (strcmp (__type, "test") || strcmp (__type, "xtest"))
       __istest = 1;
       ## code will be evaluated below
       
     ## comment block
     elseif (strcmp (__block(1:1), "#"))
       __istest = 0;
       __code = ""; # skip the code
 
@@ -431,18 +431,22 @@ function [__ret1, __ret2] = test (__name
 
     ## evaluate code for test, shared, and assert.
     if (! isempty(__code))
       try
       	eval (sprintf ("function %s__test__(%s)\n%s\nendfunction",
 		       __shared_r,__shared, __code));
 	eval (sprintf ("%s__test__(%s);", __shared_r, __shared));
       catch
-	__success = 0;
-	__msg = sprintf ("%stest failed\n%s", __signal_fail, __error_text__);
+        if (strcmp (__type, "xtest"))
+           __msg = sprintf ("%sknown failure\n%s", __signal_fail, __error_text__);
+        else
+           __msg = sprintf ("%stest failed\n%s", __signal_fail, __error_text__);
+	   __success = 0;
+        endif
 	if (isempty (__error_text__))
 	  error ("empty error text, probably Ctrl-C --- aborting"); 
 	endif
       end_try_catch
       clear __test__;
     endif
     
     ## All done.  Remember if we were successful and print any messages
@@ -574,16 +578,19 @@ function body = __extract_test_code (nm)
           body = strcat (body, ln(3:end));
         endif
       endif
     endwhile
     fclose (fid);
   endif
 endfunction
 
+### Test for a known failure
+%!xtest error("This test is known to fail")
+
 ### example from toeplitz
 %!shared msg
 %! msg="expecting vector arguments";
 %!fail ('toeplitz([])', msg);
 %!fail ('toeplitz([1,2],[])', msg);
 %!fail ('toeplitz([1,2;3,4])', msg);
 %!fail ('toeplitz([1,2],[1,2;3,4])', msg);
 %!fail ('toeplitz ([1,2;3,4],[1,2])', msg);
