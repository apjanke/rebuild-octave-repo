# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1517485054 18000
#      Thu Feb 01 06:37:34 2018 -0500
# Node ID 15fe766fbaf57d02e03ed6a7eaa75740f2d4b39a
# Parent  d4dd741b2794c443b19885457cf0ba2199b7fdae
set initial size of variable editor columns based on data

* variable-editor-model.h, variable-editor-model.cc:
(variable_editor_model::impl::column_width,
variable_editor_model::column_width): Compute column width (in
characters) for model based on given data.

* variable-editor.cc (variable_editor::variable_editor): Set initial
column widths based on model data.  Delete all variables and functions
related to automatic resizing of column widths when model is updated.

diff --git a/libgui/src/variable-editor-model.cc b/libgui/src/variable-editor-model.cc
--- a/libgui/src/variable-editor-model.cc
+++ b/libgui/src/variable-editor-model.cc
@@ -258,16 +258,40 @@ struct variable_editor_model::impl
   cell& elem (int i) { return m_table[i]; }
   cell& elem (int r, int c) { return elem (index (r, c)); }
   cell& elem (const QModelIndex& idx) { return elem (index (idx)); }
 
   const cell& elem (int i) const { return m_table[i]; }
   const cell& elem (int r, int c) const { return elem (index (r, c)); }
   const cell& elem (const QModelIndex& idx) const { return elem (index (idx)); }
 
+  int column_width (void) const
+  {
+    int width = 0;
+
+    float_format r_fmt = m_display_fmt.real_format ();
+    float_format i_fmt = m_display_fmt.imag_format ();
+
+    int rw = r_fmt.fw;
+    int iw = i_fmt.fw;
+
+    if (rw > 0)
+      {
+        if (m_value.iscomplex ())
+          {
+            if (iw > 0)
+              width = rw + iw + 5;
+          }
+        else
+          width = rw + 2;
+      }
+
+    return width;
+  }
+
   char quote_char (int r, int c) const
   {
     if (m_value.is_string ())
       return get_quote_char (m_value);
     else if (m_value.iscell ())
       {
         octave_value ov = value_at (r, c);
 
@@ -618,16 +642,22 @@ variable_editor_model::~variable_editor_
 
 octave_value
 variable_editor_model::value_at (const QModelIndex& idx) const
 {
   return m_d->value_at (idx);
 }
 
 int
+variable_editor_model::column_width (void) const
+{
+  return m_d->column_width  ();
+}
+
+int
 variable_editor_model::rowCount (const QModelIndex&) const
 {
   return m_d->m_validity ? m_d->rows () : 1;
 }
 
 int
 variable_editor_model::columnCount (const QModelIndex&) const
 {
diff --git a/libgui/src/variable-editor-model.h b/libgui/src/variable-editor-model.h
--- a/libgui/src/variable-editor-model.h
+++ b/libgui/src/variable-editor-model.h
@@ -54,16 +54,18 @@ public:
   // No copying!
 
   variable_editor_model (const variable_editor_model&) = delete;
 
   variable_editor_model& operator = (const variable_editor_model&) = delete;
 
   octave_value value_at (const QModelIndex& idx) const;
 
+  int column_width (void) const;
+
   int rowCount (const QModelIndex& = QModelIndex ()) const;
 
   int columnCount (const QModelIndex& = QModelIndex ()) const;
 
   QVariant data (const QModelIndex& idx, int role = Qt::DisplayRole) const;
 
   bool setData (const QModelIndex& idx, const QVariant& v,
                 int role = Qt::EditRole);
diff --git a/libgui/src/variable-editor.cc b/libgui/src/variable-editor.cc
--- a/libgui/src/variable-editor.cc
+++ b/libgui/src/variable-editor.cc
@@ -79,19 +79,18 @@ idx_to_expr (int32_t from, int32_t to)
   return (from == to
           ? QString ("%1").arg (from + 1)
           : QString ("%1:%2").arg (from + 1).arg (to + 1));
 }
 
 variable_editor::variable_editor (QWidget *p)
   : octave_dock_widget (p), m_main (new QMainWindow ()),
     m_tool_bar (new QToolBar (m_main)),
-    m_tab_widget (new QTabWidget (m_main)),
-    m_default_width (30), m_default_height (100), m_add_font_height (0),
-    m_autofit (false), m_autofit_max (false), m_use_terminal_font (true),
+    m_tab_widget (new QTabWidget (m_main)), m_default_width (30),
+    m_default_height (100), m_add_font_height (0), m_use_terminal_font (true),
     m_alternate_rows (true), m_stylesheet (""), m_font (), m_sel_font (),
     m_table_colors ()
 {
   // Use a MainWindow.
 
   setObjectName ("variable_editor");
   set_title (tr ("Variable Editor"));
   setStatusTip (tr ("Edit variables."));
@@ -200,28 +199,44 @@ variable_editor::edit_variable (const QS
   int tab_idx = m_tab_widget->addTab (page, name);
   m_tab_widget->setCurrentIndex (tab_idx);
 
   // Enable tool bar for when opening first tab.
 
   if (m_tab_widget->count () == 1)
     m_tool_bar->setEnabled (true);
 
-  maybe_resize_columns ();
-
   table->setFont (m_font);
   table->setStyleSheet (m_stylesheet);
   table->setAlternatingRowColors (m_alternate_rows);
 #if defined (HAVE_QT4)
   table->verticalHeader ()->setResizeMode (QHeaderView::Interactive);
 #else
   table->verticalHeader ()->setSectionResizeMode (QHeaderView::Interactive);
 #endif
   table->verticalHeader ()->setDefaultSectionSize (m_default_height
                                                    + m_add_font_height);
+
+  int col_width = model->column_width ();
+
+  if (col_width > 0)
+    {
+#if defined (HAVE_QT4)
+      table->horizontalHeader ()->setResizeMode (QHeaderView::Interactive);
+#else
+      table->horizontalHeader ()->setSectionResizeMode (QHeaderView::Interactive);
+#endif
+
+      // col_width is in characters.  The font should be a fixed-width
+      // font, so any character will do.  If not, you lose!
+
+      QFontMetrics fm (m_font);
+      int w = col_width * fm.width ('0');
+      table->horizontalHeader ()->setDefaultSectionSize (w);
+    }
 }
 
 void
 variable_editor::refresh (void)
 {
   // FIXME: it would be nice to only refresh the variable tabs that are
   // displayed, and then only if something has actually changed.
 
@@ -282,40 +297,27 @@ variable_editor::color_names (void)
   output << "Alternate Background";
 
   return output;
 }
 
 void
 variable_editor::callUpdate (const QModelIndex&, const QModelIndex&)
 {
-  maybe_resize_columns ();
-
   emit updated ();
 }
 
 void
 variable_editor::notice_settings (const QSettings *settings)
 {
   // FIXME: Why use object->tostring->toint?  Why not just 100?
 
   m_default_width = settings->value ("variable_editor/column_width",
                                      100).toInt ();
 
-  m_autofit = settings->value ("variable_editor/autofit_column_width",
-                               false).toBool ();
-
-  // FIXME: Magic Number 1 here, why not use enum?
-
-  if (m_autofit)
-    {
-      if (settings->value ("variable_editor/autofit_type", 0).toInt () == 1)
-        m_autofit_max = true;
-    }
-
   m_default_height = settings->value ("variable_editor/row_height",
                                       10).toInt ();
 
   m_alternate_rows = settings->value ("variable_editor/alternate_rows",
                                       false).toBool ();
 
   QList<QColor> _default_colors = resource_manager::varedit_default_colors ();
 
@@ -338,24 +340,19 @@ variable_editor::notice_settings (const 
                                    settings->value ("terminal/fontName",
                                                     "Courier New")).toString ();
 
       font_size = settings->value ("variable_editor/font_size", 10).toInt ();
     }
 
   m_font = QFont (font_name, font_size);
 
-  if (settings->value ("variable_editor/autofit_row_height", true).toBool ())
-    {
-      QFontMetrics fm (m_font);
+  QFontMetrics fm (m_font);
 
-      m_add_font_height = fm.height ();
-    }
-  else
-    m_add_font_height = 0;
+  m_add_font_height = fm.height ();
 
   for (int i = 0; i < class_chars.length (); i++)
     {
       QVariant default_var = _default_colors.at (i);
 
       QColor setting_color = settings->value ("variable_editor/color_"
                                               + class_chars.mid (i, 1),
                                               default_var).value<QColor> ();
@@ -401,40 +398,16 @@ variable_editor::closeTab (int idx)
 
   // Disable tool bar when closing last tab.
 
   if (m_tab_widget->count () == 0)
     m_tool_bar->setEnabled (false);
 }
 
 void
-variable_editor::maybe_resize_columns (void)
-{
-  QTableView *table = get_table_data (m_tab_widget).m_table;
-
-  if (m_autofit)
-    {
-      table->resizeColumnsToContents ();
-
-      if (m_autofit_max)
-        {
-          int mx = 0;
-
-          for (int i = 0; i < table->model ()->columnCount (); i++)
-            {
-              if (table->columnWidth (i) > mx)
-                mx = table->columnWidth (i);
-            }
-
-          table->horizontalHeader ()->setDefaultSectionSize (mx);
-        }
-    }
-}
-
-void
 variable_editor::contextmenu_requested (const QPoint& qpos)
 {
   QTableView *view = get_table_data (m_tab_widget).m_table;
   QModelIndex index = view->indexAt (qpos);
 
   if (index.isValid ())
     {
       QMenu *menu = new QMenu (this);
diff --git a/libgui/src/variable-editor.h b/libgui/src/variable-editor.h
--- a/libgui/src/variable-editor.h
+++ b/libgui/src/variable-editor.h
@@ -65,18 +65,16 @@ public:
   static QStringList color_names (void);
 
 public slots:
 
   void callUpdate (const QModelIndex&,const QModelIndex&);
 
   void notice_settings (const QSettings *);
 
-  void maybe_resize_columns (void);
-
 protected slots:
 
   void closeEvent (QCloseEvent *);
 
   void closeTab (int idx);
 
   void contextmenu_requested (const QPoint& pt);
 
@@ -127,20 +125,16 @@ private:
   QTabWidget *m_tab_widget;
 
   int m_default_width;
 
   int m_default_height;
 
   int m_add_font_height;
 
-  bool m_autofit;
-
-  bool m_autofit_max;
-
   bool m_use_terminal_font;
 
   bool m_alternate_rows;
 
   QString m_stylesheet;
 
   QFont m_font;
 
