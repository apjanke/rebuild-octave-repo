# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1279624240 -7200
#      Tue Jul 20 13:10:40 2010 +0200
# Node ID 7c542263a92a0b2b17b04af7414cc31f96b040c0
# Parent  8c858a1a2079bed3793b3c660d71788db47361bd
omissions from last two patches

diff --git a/liboctave/CMatrix.cc b/liboctave/CMatrix.cc
--- a/liboctave/CMatrix.cc
+++ b/liboctave/CMatrix.cc
@@ -904,17 +904,17 @@ ComplexMatrix::extract (octave_idx_type 
   if (c1 > c2) { octave_idx_type tmp = c1; c1 = c2; c2 = tmp; }
 
   return index (idx_vector (r1, r2+1), idx_vector (c1, c2+1));
 }
 
 ComplexMatrix
 ComplexMatrix::extract_n (octave_idx_type r1, octave_idx_type c1, octave_idx_type nr, octave_idx_type nc) const
 {
-  return index (idx_vector (r1, r1 + nr), idx_vector (r2, r2 + nr));
+  return index (idx_vector (r1, r1 + nr), idx_vector (c1, c1 + nc));
 }
 
 // extract row or column i.
 
 ComplexRowVector
 ComplexMatrix::row (octave_idx_type i) const
 {
   return index (idx_vector (i), idx_vector::colon);
diff --git a/liboctave/dMatrix.cc b/liboctave/dMatrix.cc
--- a/liboctave/dMatrix.cc
+++ b/liboctave/dMatrix.cc
@@ -581,17 +581,17 @@ Matrix::extract (octave_idx_type r1, oct
   if (c1 > c2) { octave_idx_type tmp = c1; c1 = c2; c2 = tmp; }
 
   return index (idx_vector (r1, r2+1), idx_vector (c1, c2+1));
 }
 
 Matrix
 Matrix::extract_n (octave_idx_type r1, octave_idx_type c1, octave_idx_type nr, octave_idx_type nc) const
 {
-  return index (idx_vector (r1, r1 + nr), idx_vector (r2, r2 + nr));
+  return index (idx_vector (r1, r1 + nr), idx_vector (c1, c1 + nc));
 }
 
 // extract row or column i.
 
 RowVector
 Matrix::row (octave_idx_type i) const
 {
   return index (idx_vector (i), idx_vector::colon);
diff --git a/liboctave/fCMatrix.cc b/liboctave/fCMatrix.cc
--- a/liboctave/fCMatrix.cc
+++ b/liboctave/fCMatrix.cc
@@ -903,17 +903,17 @@ FloatComplexMatrix::extract (octave_idx_
   if (c1 > c2) { octave_idx_type tmp = c1; c1 = c2; c2 = tmp; }
 
   return index (idx_vector (r1, r2+1), idx_vector (c1, c2+1));
 }
 
 FloatComplexMatrix
 FloatComplexMatrix::extract_n (octave_idx_type r1, octave_idx_type c1, octave_idx_type nr, octave_idx_type nc) const
 {
-  return index (idx_vector (r1, r1 + nr), idx_vector (r2, r2 + nr));
+  return index (idx_vector (r1, r1 + nr), idx_vector (c1, c1 + nc));
 }
 
 // extract row or column i.
 
 FloatComplexRowVector
 FloatComplexMatrix::row (octave_idx_type i) const
 {
   return index (idx_vector (i), idx_vector::colon);
diff --git a/liboctave/fMatrix.cc b/liboctave/fMatrix.cc
--- a/liboctave/fMatrix.cc
+++ b/liboctave/fMatrix.cc
@@ -580,17 +580,17 @@ FloatMatrix::extract (octave_idx_type r1
   if (c1 > c2) { octave_idx_type tmp = c1; c1 = c2; c2 = tmp; }
 
   return index (idx_vector (r1, r2+1), idx_vector (c1, c2+1));
 }
 
 FloatMatrix
 FloatMatrix::extract_n (octave_idx_type r1, octave_idx_type c1, octave_idx_type nr, octave_idx_type nc) const
 {
-  return index (idx_vector (r1, r1 + nr), idx_vector (r2, r2 + nr));
+  return index (idx_vector (r1, r1 + nr), idx_vector (c1, c1 + nc));
 }
 
 // extract row or column i.
 
 FloatRowVector
 FloatMatrix::row (octave_idx_type i) const
 {
   return index (idx_vector (i), idx_vector::colon);
diff --git a/src/DLD-FUNCTIONS/dlmread.cc b/src/DLD-FUNCTIONS/dlmread.cc
--- a/src/DLD-FUNCTIONS/dlmread.cc
+++ b/src/DLD-FUNCTIONS/dlmread.cc
@@ -333,16 +333,18 @@ index 'A' refers to the first column.  T
                 rdata.resize (rmax, cmax);
             }
 
           r = (r > i + 1 ? r : i + 1);
           j = 0;
           size_t pos1 = 0;
           do
             {
+              octave_quit ();
+
               size_t pos2 = line.find_first_of (sep, pos1);
               std::string str = line.substr (pos1, pos2 - pos1);
 
               if (sepflag && pos2 != std::string::npos)
                 // Treat consecutive separators as one.
                 pos2 = line.find_first_not_of (sep, pos2) - 1;
 
               c = (c > j + 1 ? c : j + 1);
