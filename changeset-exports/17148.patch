# HG changeset patch
# User Rik <rik@octave.org>
# Date 1375459315 25200
#      Fri Aug 02 09:01:55 2013 -0700
# Node ID fa14aa77b5145380671c07b4b2c049dcb67058c9
# Parent  35a1bd41aa023d0400043085511550f85165b95e
Allow relative directory name for rundemos/runtests.

* scripts/testfun/rundemos.m: Use canonicalize_file_name if directory
is relative.  Use readdir() rather than dir() for performance.

*scripts/testfun/runtests.m: Use canonicalize_file_name if directory
is relative.  Use readdir() rather than dir() for performance.  Add
%!error blocks.

diff --git a/scripts/testfun/rundemos.m b/scripts/testfun/rundemos.m
--- a/scripts/testfun/rundemos.m
+++ b/scripts/testfun/rundemos.m
@@ -29,18 +29,22 @@
 
 function rundemos (directory)
 
   if (nargin == 0)
     dirs = ostrsplit (path (), pathsep ());
   elseif (nargin == 1)
     if (is_absolute_filename (directory))
       dirs = {directory};
+    elseif (is_rooted_relative_filename (directory))
+      dirs = {canonicalize_file_name(directory)};
     else
-      directory = regexprep (directory, ['\',filesep(),'$'], "");
+      if (directory(end) == filesep ())
+        directory = directory(1:end-1);
+      endif
       fullname = find_dir_in_path (directory);
       if (! isempty (fullname))
         dirs = {fullname};
       else
         error ("rundemos: DIRECTORY argument must be a valid pathname");
       endif
     endif
   else
@@ -50,18 +54,17 @@ function rundemos (directory)
   for i = 1:numel (dirs)
     d = dirs{i};
     run_all_demos (d);
   endfor
 
 endfunction
 
 function run_all_demos (directory)
-  dirinfo = dir (directory);
-  flist = {dirinfo.name};
+  flist = readdir (directory);
   for i = 1:numel (flist)
     f = flist{i};
     if (length (f) > 2 && strcmp (f((end-1):end), ".m"))
       f = fullfile (directory, f);
       if (has_demos (f))
         try
           demo (f);
         catch
diff --git a/scripts/testfun/runtests.m b/scripts/testfun/runtests.m
--- a/scripts/testfun/runtests.m
+++ b/scripts/testfun/runtests.m
@@ -15,32 +15,37 @@
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {} runtests ()
 ## @deftypefnx {Function File} {} runtests (@var{directory})
 ## Execute built-in tests for all function files in the specified directory.
+##
 ## If no directory is specified, operate on all directories in Octave's
 ## search path for functions.
 ## @seealso{rundemos, path}
 ## @end deftypefn
 
 ## Author: jwe
 
 function runtests (directory)
 
   if (nargin == 0)
     dirs = ostrsplit (path (), pathsep ());
   elseif (nargin == 1)
     if (is_absolute_filename (directory))
       dirs = {directory};
+    elseif (is_rooted_relative_filename (directory))
+      dirs = {canonicalize_file_name(directory)};
     else
-      directory = regexprep (directory, ['\',filesep(),'$'], "");
+      if (directory(end) == filesep ())
+        directory = directory(1:end-1);
+      endif
       fullname = find_dir_in_path (directory);
       if (! isempty (fullname))
         dirs = {fullname};
       else
         error ("runtests: DIRECTORY argument must be a valid pathname");
       endif
     endif
   else
@@ -50,24 +55,23 @@ function runtests (directory)
   for i = 1:numel (dirs)
     d = dirs{i};
     run_all_tests (d);
   endfor
 
 endfunction
 
 function run_all_tests (directory)
-  dirinfo = dir (directory);
-  flist = {dirinfo.name};
+  flist = readdir (directory);
   no_tests = {};
   printf ("Processing files in %s:\n\n", directory);
   fflush (stdout);
   for i = 1:numel (flist)
     f = flist{i};
-    if (length (f) > 2 && strcmp (f((end-1):end), ".m"))
+    if (length (f) > 2 && strcmpi (f((end-1):end), ".m"))
       ff = fullfile (directory, f);
       if (has_tests (ff))
         print_test_file_name (f);
         [p, n, xf, sk] = test (ff, "quiet");
         print_pass_fail (n, p);
         fflush (stdout);
       else
         no_tests{end+1} = f;
@@ -78,19 +82,20 @@ function run_all_tests (directory)
     printf ("\nThe following files in %s have no tests:\n\n", directory);
     printf ("%s", list_in_columns (no_tests));
   endif
 endfunction
 
 function retval = has_tests (f)
   fid = fopen (f);
   if (fid >= 0)
-    str = fread (fid, "*char")';
+    str = fread (fid, "*char").';
     fclose (fid);
-    retval = ! isempty (regexp (str, '^%!(test|assert|error|warning)', "lineanchors"));
+    retval = ! isempty (regexp (str, '^%!(?:test|assert|error|warning)',
+                                     "lineanchors", "once"));
   else
     error ("runtests: fopen failed: %s", f);
   endif
 endfunction
 
 function print_pass_fail (n, p)
   if (n > 0)
     printf (" PASS %4d/%-4d", p, n);
@@ -101,8 +106,13 @@ function print_pass_fail (n, p)
   endif
   puts ("\n");
 endfunction
 
 function print_test_file_name (nm)
   filler = repmat (".", 1, 55-length (nm));
   printf ("  %s %s", nm, filler);
 endfunction
+
+
+%!error runtests ("foo", 1)
+%!error <DIRECTORY argument> runtests ("#_TOTALLY_/_INVALID_/_PATHNAME_#")
+
