# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1405554982 14400
#      Wed Jul 16 19:56:22 2014 -0400
# Node ID 161ebb78ac1b4abcdab93d15a18b7b38ad14b486
# Parent  09eb8a2ddb0281de366aeb08d5a2f9cc79a618ee
use gnulib::log and gnulib::logf functions

* Faddeeva.cc, lo-mappers.cc, lo-specfun.cc: Use gnulib::log and
gnulib::logf instead of log and logf.

diff --git a/liboctave/cruft/Faddeeva/Faddeeva.cc b/liboctave/cruft/Faddeeva/Faddeeva.cc
--- a/liboctave/cruft/Faddeeva/Faddeeva.cc
+++ b/liboctave/cruft/Faddeeva/Faddeeva.cc
@@ -689,17 +689,17 @@ cmplx FADDEEVA(w)(cmplx z, double relerr
     relerr = DBL_EPSILON;
     a = 0.518321480430085929872; // pi / sqrt(-log(eps*0.5))
     c = 0.329973702884629072537; // (2/pi) * a;
     a2 = 0.268657157075235951582; // a^2
   }
   else {
     const double pi = 3.14159265358979323846264338327950288419716939937510582;
     if (relerr > 0.1) relerr = 0.1; // not sensible to compute < 1 digit
-    a = pi / sqrt(-log(relerr*0.5));
+    a = pi / sqrt(-gnulib::log(relerr*0.5));
     c = (2/pi)*a;
     a2 = a*a;
   }
   const double x = fabs(creal(z));
   const double y = cimag(z), ya = fabs(y);
 
   cmplx ret = 0.; // return value
 
diff --git a/liboctave/numeric/lo-mappers.cc b/liboctave/numeric/lo-mappers.cc
--- a/liboctave/numeric/lo-mappers.cc
+++ b/liboctave/numeric/lo-mappers.cc
@@ -96,32 +96,32 @@ xlog2 (double x)
 }
 
 Complex
 xlog2 (const Complex& x)
 {
 #if defined (M_LN2)
   static double ln2 = M_LN2;
 #else
-  static double ln2 = log (2);
+  static double ln2 = gnulib::log (2);
 #endif
 
   return std::log (x) / ln2;
 }
 
 double
 xexp2 (double x)
 {
 #if defined (HAVE_EXP2)
   return exp2 (x);
 #else
 #if defined (M_LN2)
   static double ln2 = M_LN2;
 #else
-  static double ln2 = log (2);
+  static double ln2 = gnulib::log (2);
 #endif
 
   return exp (x * ln2);
 #endif
 }
 
 double
 xlog2 (double x, int& exp)
@@ -517,24 +517,26 @@ rc_atanh (float x)
   return fabsf (x) > 1.0f ? atanh (FloatComplex (x))
                           : FloatComplex (atanhf (x));
 }
 
 Complex
 rc_log (double x)
 {
   const double pi = 3.14159265358979323846;
-  return x < 0.0 ? Complex (log (-x), pi) : Complex (log (x));
+  return x < 0.0 ? Complex (gnulib::log (-x), pi) : Complex (gnulib::log (x));
 }
 
 FloatComplex
 rc_log (float x)
 {
   const float pi = 3.14159265358979323846f;
-  return x < 0.0f ? FloatComplex (logf (-x), pi) : FloatComplex (logf (x));
+  return (x < 0.0f
+          ? FloatComplex (gnulib::logf (-x), pi)
+          : FloatComplex (gnulib::logf (x)));
 }
 
 Complex
 rc_log2 (double x)
 {
   const double pil2 = 4.53236014182719380962; // = pi / log(2)
   return x < 0.0 ? Complex (xlog2 (-x), pil2) : Complex (xlog2 (x));
 }
diff --git a/liboctave/numeric/lo-specfun.cc b/liboctave/numeric/lo-specfun.cc
--- a/liboctave/numeric/lo-specfun.cc
+++ b/liboctave/numeric/lo-specfun.cc
@@ -626,17 +626,17 @@ log1p (double x)
       // approximation log (1+x) ~ 2*sum ((x/(2+x)).^ii ./ ii), ii = 1:2:2n+1
       double u = x / (2 + x), t = 1, s = 0;
       for (int i = 2; i < 12; i += 2)
         s += (t *= u*u) / (i+1);
 
       retval = 2 * (s + 1) * u;
     }
   else
-    retval = log (1 + x);
+    retval = gnulib::log (1 + x);
 
   return retval;
 }
 #endif
 
 Complex
 log1p (const Complex& x)
 {
@@ -685,17 +685,17 @@ log1pf (float x)
       // approximation log (1+x) ~ 2*sum ((x/(2+x)).^ii ./ ii), ii = 1:2:2n+1
       float u = x / (2 + x), t = 1, s = 0;
       for (int i = 2; i < 12; i += 2)
         s += (t *= u*u) / (i+1);
 
       retval = 2 * (s + 1) * u;
     }
   else
-    retval = log (1 + x);
+    retval = gnulib::logf (1 + x);
 
   return retval;
 }
 #endif
 
 FloatComplex
 log1p (const FloatComplex& x)
 {
@@ -2971,23 +2971,25 @@ done:
 
   return retval;
 }
 
 
 Complex rc_log1p (double x)
 {
   const double pi = 3.14159265358979323846;
-  return x < -1.0 ? Complex (log (-(1.0 + x)), pi) : Complex (log1p (x));
+  return (x < -1.0
+          ? Complex (gnulib::log (-(1.0 + x)), pi)
+          : Complex (log1p (x)));
 }
 
 FloatComplex rc_log1p (float x)
 {
   const float pi = 3.14159265358979323846f;
-  return x < -1.0f ? FloatComplex (logf (-(1.0f + x)), pi)
+  return x < -1.0f ? FloatComplex (gnulib::logf (-(1.0f + x)), pi)
                    : FloatComplex (log1pf (x));
 }
 
 // This algorithm is due to P. J. Acklam.
 // See http://home.online.no/~pjacklam/notes/invnorm/
 // The rational approximation has relative accuracy 1.15e-9 in the whole region.
 // For doubles, it is refined by a single step of Halley's 3rd order method.
 // For single precision, the accuracy is already OK, so we skip it to get
@@ -3031,17 +3033,17 @@ static double do_erfinv (double x, bool 
       const double q = 0.5 * x, r = q*q;
       const double yn = (((((a[0]*r + a[1])*r + a[2])*r + a[3])*r + a[4])*r + a[5])*q;
       const double yd = ((((b[0]*r + b[1])*r + b[2])*r + b[3])*r + b[4])*r + 1.0;
       y = yn / yd;
     }
   else if (ax < 1.0)
     {
       // Tail region.
-      const double q = sqrt (-2*log (0.5*(1-ax)));
+      const double q = sqrt (-2*gnulib::log (0.5*(1-ax)));
       const double yn = ((((c[0]*q + c[1])*q + c[2])*q + c[3])*q + c[4])*q + c[5];
       const double yd = (((d[0]*q + d[1])*q + d[2])*q + d[3])*q + 1.0;
       y = yn / yd * signum (-x);
     }
   else if (ax == 1.0)
     return octave_Inf * signum (x);
   else
     return octave_NaN;
@@ -3109,17 +3111,17 @@ static double do_erfcinv (double x, bool
       const double q = 0.5*(1-x), r = q*q;
       const double yn = (((((a[0]*r + a[1])*r + a[2])*r + a[3])*r + a[4])*r + a[5])*q;
       const double yd = ((((b[0]*r + b[1])*r + b[2])*r + b[3])*r + b[4])*r + 1.0;
       y = yn / yd;
     }
   else if (x > 0.0 && x < 2.0)
     {
       // Tail region.
-      const double q = x < 1 ? sqrt (-2*log (0.5*x)) : sqrt (-2*log (0.5*(2-x)));
+      const double q = x < 1 ? sqrt (-2*gnulib::log (0.5*x)) : sqrt (-2*gnulib::log (0.5*(2-x)));
       const double yn = ((((c[0]*q + c[1])*q + c[2])*q + c[3])*q + c[4])*q + c[5];
       const double yd = (((d[0]*q + d[1])*q + d[2])*q + d[3])*q + 1.0;
       y = yn / yd;
       if (x < pbreak_lo)
         y = -y;
     }
   else if (x == 0.0)
     return octave_Inf;
@@ -3228,18 +3230,18 @@ betain (double x, double p, double q, do
   for ( ; ; )
     {
       term = term * temp * rx / (pp + ai);
       value = value + term;
       temp = fabs (term);
 
       if (temp <= acu && temp <= acu * value)
         {
-          value = value * exp (pp * log (xx)
-                               + (qq - 1.0) * log (cx) - beta) / pp;
+          value = value * exp (pp * gnulib::log (xx)
+                               + (qq - 1.0) * gnulib::log (cx) - beta) / pp;
 
           if (indx)
             {
               value = 1.0 - value;
             }
           break;
         }
 
@@ -3327,17 +3329,17 @@ betaincinv (double y, double p, double q
       a = y;
       pp = p;
       qq = q;
       indx = false;
     }
 
   //  Calculate the initial approximation.
 
-  r = sqrt (- log (a * a));
+  r = sqrt (- gnulib::log (a * a));
 
   ycur = r - (2.30753 + 0.27061 * r) / (1.0 + (0.99229 + 0.04481 * r) * r);
 
   if (1.0 < pp && 1.0 < qq)
     {
       r = (ycur * ycur - 3.0) / 6.0;
       s = 1.0 / (pp + pp - 1.0);
       t = 1.0 / (qq + qq - 1.0);
@@ -3348,25 +3350,25 @@ betaincinv (double y, double p, double q
   else
     {
       r = qq + qq;
       t = 1.0 / (9.0 * qq);
       t = r * pow (1.0 - t + ycur * sqrt (t), 3);
 
       if (t <= 0.0)
         {
-          value = 1.0 - exp ((log ((1.0 - a) * qq) + beta) / qq);
+          value = 1.0 - exp ((gnulib::log ((1.0 - a) * qq) + beta) / qq);
         }
       else
         {
           t = (4.0 * pp + r - 2.0) / t;
 
           if (t <= 1.0)
             {
-              value = exp ((log (a * pp) + beta) / pp);
+              value = exp ((gnulib::log (a * pp) + beta) / pp);
             }
           else
             {
               value = 1.0 - 2.0 / (t + 1.0);
             }
         }
     }
 
@@ -3398,17 +3400,18 @@ betaincinv (double y, double p, double q
       ycur = betain (value, pp, qq, beta, err);
 
       if (err)
         {
           return value;
         }
 
       xin = value;
-      ycur = (ycur - a) * exp (beta + r * log (xin) + t * log (1.0 - xin));
+      ycur = (ycur - a) * exp (beta + r * gnulib::log (xin)
+                               + t * gnulib::log (1.0 - xin));
 
       if (ycur * yprev <= 0.0)
         {
           prev = std::max (sq, fpu);
         }
 
       g = 1.0;
 
