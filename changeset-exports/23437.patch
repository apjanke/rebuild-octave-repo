# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1493144434 14400
#      Tue Apr 25 14:20:34 2017 -0400
# Node ID 442fe5b5afb543f298292bdd1e119d810f103332
# Parent  c715a1aebbd555b490e1fb676da196074fe64c3d
new action_container constructors for unwind_protect

* action-container.h (method_elem::method_elem (T&, void (T::*) ())):
New constructor.
(method_arg_elem::method_arg_elem (T&, void (T::*) (A), A)): Likewise.
(method_crefarg_elem (T&, void (T::*) (const A&), const A&)): Likewise.
(void add_method (T&, void (T::*) ())): New template.
(void add_method (T&, void (T::*) (A), A)): Likewise.
(void add_method (T&, void (T::*) (const A&), const A&)): Likewise.

diff --git a/liboctave/util/action-container.h b/liboctave/util/action-container.h
--- a/liboctave/util/action-container.h
+++ b/liboctave/util/action-container.h
@@ -126,16 +126,19 @@ public:
   template <typename T>
   class method_elem : public elem
   {
   public:
 
     method_elem (T *obj, void (T::*method) (void))
       : e_obj (obj), e_method (method) { }
 
+    method_elem (T& obj, void (T::*method) (void))
+      : e_obj (&obj), e_method (method) { }
+
     // No copying!
 
     method_elem (const method_elem&) = delete;
 
     method_elem operator = (const method_elem&) = delete;
 
     void run (void) { (e_obj->*e_method) (); }
 
@@ -151,16 +154,19 @@ public:
   template <typename T, typename A>
   class method_arg_elem : public elem
   {
   public:
 
     method_arg_elem (T *obj, void (T::*method) (A), A arg)
       : e_obj (obj), e_method (method), e_arg (arg) { }
 
+    method_arg_elem (T& obj, void (T::*method) (A), A arg)
+      : e_obj (&obj), e_method (method), e_arg (arg) { }
+
     // No copying!
 
     method_arg_elem (const method_arg_elem&) = delete;
 
     method_arg_elem operator = (const method_arg_elem&) = delete;
 
     void run (void) { (e_obj->*e_method) (e_arg); }
 
@@ -178,16 +184,19 @@ public:
   template <typename T, typename A>
   class method_crefarg_elem : public elem
   {
   public:
 
     method_crefarg_elem (T *obj, void (T::*method) (const A&), const A& arg)
       : e_obj (obj), e_method (method), e_arg (arg) { }
 
+    method_crefarg_elem (T& obj, void (T::*method) (const A&), const A& arg)
+      : e_obj (&obj), e_method (method), e_arg (arg) { }
+
     // No copying!
 
     method_crefarg_elem (const method_crefarg_elem&) = delete;
 
     method_crefarg_elem operator = (const method_crefarg_elem&) = delete;
 
     void run (void) { (e_obj->*e_method) (e_arg); }
 
@@ -280,30 +289,48 @@ public:
 
   // Call to T::method (void).
   template <typename T>
   void add_method (T *obj, void (T::*method) (void))
   {
     add (new method_elem<T> (obj, method));
   }
 
+  template <typename T>
+  void add_method (T& obj, void (T::*method) (void))
+  {
+    add (new method_elem<T> (obj, method));
+  }
+
   // Call to T::method (A).
   template <typename T, typename A>
   void add_method (T *obj, void (T::*method) (A), A arg)
   {
     add (new method_arg_elem<T, A> (obj, method, arg));
   }
 
+  template <typename T, typename A>
+  void add_method (T& obj, void (T::*method) (A), A arg)
+  {
+    add (new method_arg_elem<T, A> (obj, method, arg));
+  }
+
   // Call to T::method (const A&).
   template <typename T, typename A>
   void add_method (T *obj, void (T::*method) (const A&), const A& arg)
   {
     add (new method_crefarg_elem<T, A> (obj, method, arg));
   }
 
+  template <typename T, typename A>
+  void add_method (T& obj, void (T::*method) (const A&), const A& arg)
+  {
+    add (new method_crefarg_elem<T, A> (obj, method, arg));
+  }
+
   // Call to delete (T*).
 
   template <typename T>
   void add_delete (T *obj)
   {
     add (new delete_ptr_elem<T> (obj));
   }
 
