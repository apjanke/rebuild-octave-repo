# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1547666759 18000
#      Wed Jan 16 14:25:59 2019 -0500
# Node ID a595c22464e4bb39cd6a8643bb9f1de100aa8580
# Parent  4744a878c43f838ac29eb41016d4b18726f23e38
# Parent  8953dd219f4c48b068f67895732afc25efac9557
maint: Merge stable to default.

diff --git a/libgui/graphics/__init_qt__.cc b/libgui/graphics/__init_qt__.cc
--- a/libgui/graphics/__init_qt__.cc
+++ b/libgui/graphics/__init_qt__.cc
@@ -52,16 +52,18 @@ namespace QtHandles
   __init__ (octave::interpreter& interp)
   {
     if (! qtHandlesInitialized)
       {
         if (qApp)
           {
             gh_manager::auto_lock lock;
 
+            interp.mlock ();
+
             qRegisterMetaType<graphics_object> ("graphics_object");
 
             gh_manager::enable_event_processing (true);
 
             octave::gtk_manager& gtk_mgr = interp.get_gtk_manager ();
 
             graphics_toolkit tk (new Backend ());
             gtk_mgr.load_toolkit (tk);
diff --git a/libgui/qterminal/libqterminal/unix/History.cpp b/libgui/qterminal/libqterminal/unix/History.cpp
--- a/libgui/qterminal/libqterminal/unix/History.cpp
+++ b/libgui/qterminal/libqterminal/unix/History.cpp
@@ -240,17 +240,17 @@ int HistoryScrollFile::startOfLine(int l
 {
   if (lineno <= 0) return 0;
   if (lineno <= getLines())
     {
 	
 	if (!index.isMapped())
 			index.map();
 	
-	int res;
+	int res = 0;
     index.get((unsigned char*)&res,sizeof(int),(lineno-1)*sizeof(int));
     return res;
     }
   return cells.len();
 }
 
 void HistoryScrollFile::getCells(int lineno, int colno, int count, Character res[])
 {
diff --git a/libgui/src/documentation.cc b/libgui/src/documentation.cc
--- a/libgui/src/documentation.cc
+++ b/libgui/src/documentation.cc
@@ -735,17 +735,16 @@ namespace octave
                 m_help_engine->registerDocumentation (qch);
               }
           }
         else if (! m_help_engine->registerDocumentation (qch))
           {
             QMessageBox::warning (this, tr ("Octave Documentation"),
                                   tr ("Unable to register help file %1.").
                                   arg (qch));
-            do_setup = false;
             return;
           }
 
         if (do_setup)
           m_help_engine->setupData();
       }
   }
 
diff --git a/libgui/src/m-editor/file-editor-tab.cc b/libgui/src/m-editor/file-editor-tab.cc
--- a/libgui/src/m-editor/file-editor-tab.cc
+++ b/libgui/src/m-editor/file-editor-tab.cc
@@ -1924,17 +1924,16 @@ namespace octave
     if (count_lf > count_max)
       {
         eol_mode = QsciScintilla::EolUnix;
         count_max = count_lf;
       }
     if (count_cr > count_max)
       {
         eol_mode = QsciScintilla::EolMac;
-        count_max = count_cr;
       }
 
     return eol_mode;
   }
 
   void file_editor_tab::update_eol_indicator (void)
   {
     switch (_edit_area->eolMode ())
diff --git a/libgui/src/m-editor/file-editor.cc b/libgui/src/m-editor/file-editor.cc
--- a/libgui/src/m-editor/file-editor.cc
+++ b/libgui/src/m-editor/file-editor.cc
@@ -232,19 +232,17 @@ namespace octave
             while ((j < tab->count ()) && (! in_tab))
               {
                 // check all tabs for the editor
                 if (tab->tabText (j) == windowTitle ())
                   {
                     // editor is in this tab widget
                     in_tab = true;
                     int top = tab->currentIndex ();
-                    if (top > -1 && tab->tabText (top) == windowTitle ())
-                      real_visible = true;  // and is the current tab
-                    else
+                    if (! (top > -1 && tab->tabText (top) == windowTitle ()))
                       return; // not current tab -> not visible
                   }
                 j++;
               }
           }
       }
 
     request_new_file ("");
diff --git a/libgui/src/main-window.cc b/libgui/src/main-window.cc
--- a/libgui/src/main-window.cc
+++ b/libgui/src/main-window.cc
@@ -356,19 +356,22 @@ namespace octave
       = static_cast<octave_dock_widget *> (m_editor_window);
     // if new dock has focus, emit signal and store active focus
     // except editor changes to a dialog (dock=0)
     if ((dock || m_active_dock != edit_dock_widget) && (dock != m_active_dock))
       {
         // signal to all dock widgets for updating the style
         emit active_dock_changed (m_active_dock, dock);
 
-        QList<QDockWidget *> tabbed = tabifiedDockWidgets (dock);
-        if (tabbed.contains (m_active_dock))
-          dock->set_predecessor_widget (m_active_dock);
+        if (dock)
+          {
+            QList<QDockWidget *> tabbed = tabifiedDockWidgets (dock);
+            if (tabbed.contains (m_active_dock))
+              dock->set_predecessor_widget (m_active_dock);
+          }
 
         if (edit_dock_widget == dock)
           emit editor_focus_changed (true);
         else if (edit_dock_widget == m_active_dock)
           emit editor_focus_changed (false);
 
         m_active_dock = dock;
       }
diff --git a/libgui/src/variable-editor.cc b/libgui/src/variable-editor.cc
--- a/libgui/src/variable-editor.cc
+++ b/libgui/src/variable-editor.cc
@@ -660,18 +660,16 @@ namespace octave
 
     int column_selection_count
       = nothingSelected ? 0 : (coords[3] - coords[2] + 1);
 
     if (! whole_columns_selected || ! current_column_selected)
       {
         selectColumn (index);
         column_selection_count = 1;
-        current_column_selected = true;
-        whole_columns_selected = true;
       }
 
     QString column_string
       = tr (column_selection_count > 1 ? " columns" : " column");
 
     QMenu *menu = new QMenu (this);
 
     add_edit_actions (menu, column_string);
@@ -710,18 +708,16 @@ namespace octave
       = (nothingSelected ? false : (coords[0] <= index+1 && coords[1] > index));
 
     int rowselection_count = nothingSelected ? 0 : (coords[3] - coords[2] + 1);
 
     if (! whole_rows_selected || ! current_row_selected)
       {
         selectRow (index);
         rowselection_count = 1;
-        current_row_selected = true;
-        whole_rows_selected = true;
       }
 
     QString row_string = tr (rowselection_count > 1 ? " rows" : " row");
 
     QMenu *menu = new QMenu (this);
 
     add_edit_actions (menu, row_string);
 
diff --git a/libinterp/dldfcn/__glpk__.cc b/libinterp/dldfcn/__glpk__.cc
--- a/libinterp/dldfcn/__glpk__.cc
+++ b/libinterp/dldfcn/__glpk__.cc
@@ -281,24 +281,24 @@ glpk (int sense, int n, int m, double *c
           for (int i = 0; i < glp_get_num_cols (lp); i++)
             {
               if (lpsolver == 1)
                 redcosts[i] = glp_get_col_dual (lp, i+1);
               else
                 redcosts[i] = glp_ipt_col_dual (lp, i+1);
             }
         }
+    }
 
-      *time = (clock () - t_start) / CLOCKS_PER_SEC;
-    }
+  *time = (clock () - t_start) / CLOCKS_PER_SEC;
 
   glp_delete_prob (lp);
   // Request that GLPK free all memory resources.
   // This prevents reported memory leaks, but isn't strictly necessary.
-  // The memory blocks use are allocated once and don't grow with further
+  // The memory blocks used are allocated once and don't grow with further
   // calls to glpk so they would be reclaimed anyways when Octave exits.
   glp_free_env ();
 
   return errnum;
 }
 
 #endif
 
diff --git a/libinterp/dldfcn/audiodevinfo.cc b/libinterp/dldfcn/audiodevinfo.cc
--- a/libinterp/dldfcn/audiodevinfo.cc
+++ b/libinterp/dldfcn/audiodevinfo.cc
@@ -36,16 +36,17 @@ along with Octave; see the file COPYING.
 #include "oct-locbuf.h"
 #include "quit.h"
 #include "unwind-prot.h"
 
 #include "Cell.h"
 #include "defun-dld.h"
 #include "error.h"
 #include "errwarn.h"
+#include "interpreter.h"
 #include "oct-map.h"
 #include "ov-int32.h"
 #include "ov.h"
 #include "ovl.h"
 #include "parse.h"
 
 #if defined (HAVE_PORTAUDIO)
 
@@ -1811,33 +1812,35 @@ audiorecorder::append (float sample_l, f
 PaStream *
 audiorecorder::get_stream (void)
 {
   return stream;
 }
 
 #endif
 
-DEFUN_DLD (__recorder_audiorecorder__, args, ,
-           doc: /* -*- texinfo -*-
+DEFMETHOD_DLD (__recorder_audiorecorder__, interp, args, ,
+               doc: /* -*- texinfo -*-
 @deftypefn  {} {@var{recorder} =} __recorder_audiorecorder__ (@var{fs}, @var{nbits}, @var{channels})
 @deftypefnx {} {@var{recorder} =} __recorder_audiorecorder__ (@var{fs}, @var{nbits}, @var{channels}, @var{id})
 @deftypefnx {} {@var{recorder} =} __recorder_audiorecorder__ (@var{fcn}, @dots{})
 Undocumented internal function.
 @end deftypefn */)
 {
   octave_value retval;
 
 #if ! defined (HAVE_PORTAUDIO)
   octave_unused_parameter (args);
 
   err_disabled_feature ("__recorder_audiorecorder__",
                         "audio playback and recording through PortAudio");
 #else
 
+  interp.mlock ();
+
   int nargin = args.length ();
 
   audiorecorder *recorder = new audiorecorder ();
 
   if (nargin > 0)
     {
       bool is_function = (args(0).is_string () || args(0).is_function_handle ()
                           || args(0).is_inline_function ());
@@ -1864,374 +1867,396 @@ Undocumented internal function.
 #endif
 
   return retval;
 }
 
 #if defined (HAVE_PORTAUDIO)
 
 static audiorecorder *
-get_recorder (const octave_value& ov)
+get_recorder (octave::interpreter& interp, const octave_value& ov)
 {
+  interp.mlock ();
+
   const octave_base_value& rep = ov.get_rep ();
 
   octave_base_value *ncrep = const_cast<octave_base_value *> (&rep);
 
   audiorecorder *rec = dynamic_cast<audiorecorder *> (ncrep);
   if (! rec)
     error ("audiodevinfo.cc get_recorder: dynamic_cast to audiorecorder failed");
 
   return rec;
 }
 
 #endif
 
-DEFUN_DLD (__recorder_getaudiodata__, args, ,
-           doc: /* -*- texinfo -*-
+DEFMETHOD_DLD (__recorder_getaudiodata__, interp, args, ,
+               doc: /* -*- texinfo -*-
 @deftypefn {} {@var{data} =} __recorder_getaudiodata__ (@var{recorder})
 Undocumented internal function.
 @end deftypefn */)
 {
   octave_value retval;
 #if ! defined (HAVE_PORTAUDIO)
+  octave_unused_parameter (interp);
   octave_unused_parameter (args);
 
   err_disabled_feature ("__recorder_getaudiodata__",
                         "audio playback and recording through PortAudio");
 #else
-  retval = get_recorder (args(0))->getaudiodata ();
+  retval = get_recorder (interp, args(0))->getaudiodata ();
 #endif
   return retval;
 }
 
-DEFUN_DLD (__recorder_get_channels__, args, ,
-           doc: /* -*- texinfo -*-
+DEFMETHOD_DLD (__recorder_get_channels__, interp, args, ,
+               doc: /* -*- texinfo -*-
 @deftypefn {} {@var{n} =} __recorder_get_channels__ (@var{recorder})
 Undocumented internal function.
 @end deftypefn */)
 {
   octave_value retval;
 #if ! defined (HAVE_PORTAUDIO)
+  octave_unused_parameter (interp);
   octave_unused_parameter (args);
 
   err_disabled_feature ("__recorder_get_channels__",
                         "audio playback and recording through PortAudio");
 #else
-  retval = get_recorder (args(0))->get_channels ();
+  retval = get_recorder (interp, args(0))->get_channels ();
 #endif
   return retval;
 }
 
-DEFUN_DLD (__recorder_get_fs__, args, ,
-           doc: /* -*- texinfo -*-
+DEFMETHOD_DLD (__recorder_get_fs__, interp, args, ,
+               doc: /* -*- texinfo -*-
 @deftypefn {} {@var{fs} =} __recorder_get_fs__ (@var{recorder})
 Undocumented internal function.
 @end deftypefn */)
 {
   octave_value retval;
 #if ! defined (HAVE_PORTAUDIO)
+  octave_unused_parameter (interp);
   octave_unused_parameter (args);
 
   err_disabled_feature ("__recorder_get_fs__",
                         "audio playback and recording through PortAudio");
 #else
-  retval = get_recorder (args(0))->get_fs ();
+  retval = get_recorder (interp, args(0))->get_fs ();
 #endif
   return retval;
 }
 
-DEFUN_DLD (__recorder_get_id__, args, ,
-           doc: /* -*- texinfo -*-
+DEFMETHOD_DLD (__recorder_get_id__, interp, args, ,
+               doc: /* -*- texinfo -*-
 @deftypefn {} {@var{id} =} __recorder_get_id__ (@var{recorder})
 Undocumented internal function.
 @end deftypefn */)
 {
   octave_value retval;
 #if ! defined (HAVE_PORTAUDIO)
+  octave_unused_parameter (interp);
   octave_unused_parameter (args);
 
   err_disabled_feature ("__recorder_get_id__",
                         "audio playback and recording through PortAudio");
 #else
-  retval = get_recorder (args(0))->get_id ();
+  retval = get_recorder (interp, args(0))->get_id ();
 #endif
   return retval;
 }
 
-DEFUN_DLD (__recorder_get_nbits__, args, ,
-           doc: /* -*- texinfo -*-
+DEFMETHOD_DLD (__recorder_get_nbits__, interp, args, ,
+               doc: /* -*- texinfo -*-
 @deftypefn {} {@var{nbits} =} __recorder_get_nbits__ (@var{recorder})
 Undocumented internal function.
 @end deftypefn */)
 {
   octave_value retval;
 #if ! defined (HAVE_PORTAUDIO)
+  octave_unused_parameter (interp);
   octave_unused_parameter (args);
 
   err_disabled_feature ("__recorder_get_nbits__",
                         "audio playback and recording through PortAudio");
 #else
-  retval = get_recorder (args(0))->get_nbits ();
+  retval = get_recorder (interp, args(0))->get_nbits ();
 #endif
   return retval;
 }
 
-DEFUN_DLD (__recorder_get_sample_number__, args, ,
-           doc: /* -*- texinfo -*-
+DEFMETHOD_DLD (__recorder_get_sample_number__, interp, args, ,
+               doc: /* -*- texinfo -*-
 @deftypefn {} {@var{n} =} __recorder_get_sample_number__ (@var{recorder})
 Undocumented internal function.
 @end deftypefn */)
 {
   octave_value retval;
 #if ! defined (HAVE_PORTAUDIO)
+  octave_unused_parameter (interp);
   octave_unused_parameter (args);
 
   err_disabled_feature ("__recorder_get_sample_number__",
                         "audio playback and recording through PortAudio");
 #else
-  retval = get_recorder (args(0))->get_sample_number ();
+  retval = get_recorder (interp, args(0))->get_sample_number ();
 #endif
   return retval;
 }
 
-DEFUN_DLD (__recorder_get_tag__, args, ,
-           doc: /* -*- texinfo -*-
+DEFMETHOD_DLD (__recorder_get_tag__, interp, args, ,
+               doc: /* -*- texinfo -*-
 @deftypefn {} {@var{tag} =} __recorder_get_tag__ (@var{recorder})
 Undocumented internal function.
 @end deftypefn */)
 {
   octave_value retval;
 #if ! defined (HAVE_PORTAUDIO)
+  octave_unused_parameter (interp);
   octave_unused_parameter (args);
 
   err_disabled_feature ("__recorder_get_tag__",
                         "audio playback and recording through PortAudio");
 #else
-  retval = get_recorder (args(0))->get_tag ();
+  retval = get_recorder (interp, args(0))->get_tag ();
 #endif
   return retval;
 }
 
-DEFUN_DLD (__recorder_get_total_samples__, args, ,
-           doc: /* -*- texinfo -*-
+DEFMETHOD_DLD (__recorder_get_total_samples__, interp, args, ,
+               doc: /* -*- texinfo -*-
 @deftypefn {} {@var{n} =} __recorder_get_total_samples__ (@var{recorder})
 Undocumented internal function.
 @end deftypefn */)
 {
   octave_value retval;
 #if ! defined (HAVE_PORTAUDIO)
+  octave_unused_parameter (interp);
   octave_unused_parameter (args);
 
   err_disabled_feature ("__recorder_get_total_samples__",
                         "audio playback and recording through PortAudio");
 #else
-  retval = get_recorder (args(0))->get_total_samples ();
+  retval = get_recorder (interp, args(0))->get_total_samples ();
 #endif
   return retval;
 }
 
-DEFUN_DLD (__recorder_get_userdata__, args, ,
-           doc: /* -*- texinfo -*-
+DEFMETHOD_DLD (__recorder_get_userdata__, interp, args, ,
+               doc: /* -*- texinfo -*-
 @deftypefn {} {@var{data} =} __recorder_get_userdata__ (@var{recorder})
 Undocumented internal function.
 @end deftypefn */)
 {
   octave_value retval;
 #if ! defined (HAVE_PORTAUDIO)
+  octave_unused_parameter (interp);
   octave_unused_parameter (args);
 
   err_disabled_feature ("__recorder_get_userdata__",
                         "audio playback and recording through PortAudio");
 #else
-  retval = get_recorder (args(0))->get_userdata ();
+  retval = get_recorder (interp, args(0))->get_userdata ();
 #endif
   return retval;
 }
 
-DEFUN_DLD (__recorder_isrecording__, args, ,
-           doc: /* -*- texinfo -*-
+DEFMETHOD_DLD (__recorder_isrecording__, interp, args, ,
+               doc: /* -*- texinfo -*-
 @deftypefn {} {} __recorder_isrecording__ (@var{recorder})
 Undocumented internal function.
 @end deftypefn */)
 {
   octave_value retval;
 #if ! defined (HAVE_PORTAUDIO)
+  octave_unused_parameter (interp);
   octave_unused_parameter (args);
 
   err_disabled_feature ("__recorder_isrecording__",
                         "audio playback and recording through PortAudio");
 #else
-  retval = get_recorder (args(0))->isrecording ();
+  retval = get_recorder (interp, args(0))->isrecording ();
 #endif
   return retval;
 }
 
-DEFUN_DLD (__recorder_pause__, args, ,
-           doc: /* -*- texinfo -*-
+DEFMETHOD_DLD (__recorder_pause__, interp, args, ,
+               doc: /* -*- texinfo -*-
 @deftypefn {} {} __recorder_pause__ (@var{recorder})
 Undocumented internal function.
 @end deftypefn */)
 {
 #if ! defined (HAVE_PORTAUDIO)
+  octave_unused_parameter (interp);
   octave_unused_parameter (args);
 
   err_disabled_feature ("__recorder_pause__",
                         "audio playback and recording through PortAudio");
 #else
-  get_recorder (args(0))->pause ();
+  get_recorder (interp, args(0))->pause ();
   return ovl ();
 #endif
 }
 
-DEFUN_DLD (__recorder_recordblocking__, args, ,
-           doc: /* -*- texinfo -*-
+DEFMETHOD_DLD (__recorder_recordblocking__, interp, args, ,
+               doc: /* -*- texinfo -*-
 @deftypefn {} {} __recorder_recordblocking__ (@var{recorder}, @var{seconds})
 Undocumented internal function.
 @end deftypefn */)
 {
 #if ! defined (HAVE_PORTAUDIO)
+  octave_unused_parameter (interp);
   octave_unused_parameter (args);
 
   err_disabled_feature ("__recorder_recordblocking__",
                         "audio playback and recording through PortAudio");
 #else
   float seconds = args(1).float_value ();
-  get_recorder (args(0))->recordblocking (seconds);
+  get_recorder (interp, args(0))->recordblocking (seconds);
   return ovl ();
 #endif
 }
 
-DEFUN_DLD (__recorder_record__, args, ,
-           doc: /* -*- texinfo -*-
+DEFMETHOD_DLD (__recorder_record__, interp, args, ,
+               doc: /* -*- texinfo -*-
 @deftypefn  {} {} __recorder_record__ (@var{recorder})
 @deftypefnx {} {} __recorder_record__ (@var{recorder}, @var{seconds})
 Undocumented internal function.
 @end deftypefn */)
 {
 #if ! defined (HAVE_PORTAUDIO)
+  octave_unused_parameter (interp);
   octave_unused_parameter (args);
 
   err_disabled_feature ("__recorder_record__",
                         "audio playback and recording through PortAudio");
 #else
-  audiorecorder *recorder = get_recorder (args(0));
+  audiorecorder *recorder = get_recorder (interp, args(0));
 
   if (args.length () == 2)
     recorder->set_end_sample (args(1).int_value () * recorder->get_fs ());
 
   recorder->record ();
   return ovl ();
 #endif
 }
 
-DEFUN_DLD (__recorder_resume__, args, ,
-           doc: /* -*- texinfo -*-
+DEFMETHOD_DLD (__recorder_resume__, interp, args, ,
+               doc: /* -*- texinfo -*-
 @deftypefn {} {} __recorder_resume__ (@var{recorder})
 Undocumented internal function.
 @end deftypefn */)
 {
 #if ! defined (HAVE_PORTAUDIO)
+  octave_unused_parameter (interp);
   octave_unused_parameter (args);
 
   err_disabled_feature ("__recorder_resume__",
                         "audio playback and recording through PortAudio");
 #else
   if (args.length () == 1)
-    get_recorder (args(0))->resume ();
+    get_recorder (interp, args(0))->resume ();
   return ovl ();
 #endif
 }
 
-DEFUN_DLD (__recorder_set_fs__, args, ,
-           doc: /* -*- texinfo -*-
+DEFMETHOD_DLD (__recorder_set_fs__, interp, args, ,
+               doc: /* -*- texinfo -*-
 @deftypefn {} {} __recorder_set_fs__ (@var{recorder}, @var{fs})
 Undocumented internal function.
 @end deftypefn */)
 {
 #if ! defined (HAVE_PORTAUDIO)
+  octave_unused_parameter (interp);
   octave_unused_parameter (args);
 
   err_disabled_feature ("__recorder_set_fs__",
                         "audio playback and recording through PortAudio");
 #else
   if (args.length () == 2)
-    get_recorder (args(0))->set_fs (args(1).int_value ());
+    get_recorder (interp, args(0))->set_fs (args(1).int_value ());
   return ovl ();
 #endif
 }
 
-DEFUN_DLD (__recorder_set_tag__, args, ,
-           doc: /* -*- texinfo -*-
+DEFMETHOD_DLD (__recorder_set_tag__, interp, args, ,
+               doc: /* -*- texinfo -*-
 @deftypefn {} {} __recorder_set_tag__ (@var{recorder}, @var{tag})
 Undocumented internal function.
 @end deftypefn */)
 {
 #if ! defined (HAVE_PORTAUDIO)
+  octave_unused_parameter (interp);
   octave_unused_parameter (args);
 
   err_disabled_feature ("__recorder_set_tag__",
                         "audio playback and recording through PortAudio");
 #else
   if (args.length () == 2)
-    get_recorder (args(0))->set_tag (args(1).char_matrix_value ());
+    get_recorder (interp, args(0))->set_tag (args(1).char_matrix_value ());
   return ovl ();
 #endif
 }
 
-DEFUN_DLD (__recorder_set_userdata__, args, ,
-           doc: /* -*- texinfo -*-
+DEFMETHOD_DLD (__recorder_set_userdata__, interp, args, ,
+               doc: /* -*- texinfo -*-
 @deftypefn {} {} __recorder_set_userdata__ (@var{recorder}, @var{data})
 Undocumented internal function.
 @end deftypefn */)
 {
 #if ! defined (HAVE_PORTAUDIO)
+  octave_unused_parameter (interp);
   octave_unused_parameter (args);
 
   err_disabled_feature ("__recorder_set_userdata__",
                         "audio playback and recording through PortAudio");
 #else
   if (args.length () == 2)
-    get_recorder (args(0))->set_userdata (args(1));
+    get_recorder (interp, args(0))->set_userdata (args(1));
   return ovl ();
 #endif
 }
 
-DEFUN_DLD (__recorder_stop__, args, ,
-           doc: /* -*- texinfo -*-
+DEFMETHOD_DLD (__recorder_stop__, interp, args, ,
+               doc: /* -*- texinfo -*-
 @deftypefn {} {} __recorder_stop__ (@var{recorder})
 Undocumented internal function.
 @end deftypefn */)
 {
 #if ! defined (HAVE_PORTAUDIO)
+  octave_unused_parameter (interp);
   octave_unused_parameter (args);
 
   err_disabled_feature ("__recorder_stop__",
                         "audio playback and recording through PortAudio");
 #else
   if (args.length () == 1)
-    get_recorder (args(0))->stop ();
+    get_recorder (interp, args(0))->stop ();
   return ovl ();
 #endif
 }
 
-DEFUN_DLD (__player_audioplayer__, args, ,
-           doc: /* -*- texinfo -*-
+DEFMETHOD_DLD (__player_audioplayer__, interp, args, ,
+               doc: /* -*- texinfo -*-
 @deftypefn  {} {@var{player} =} __player_audioplayer__ (@var{y}, @var{fs})
 @deftypefnx {} {@var{player} =} __player_audioplayer__ (@var{y}, @var{fs}, @var{nbits})
 @deftypefnx {} {@var{player} =} __player_audioplayer__ (@var{y}, @var{fs}, @var{nbits}, @var{id})
 Undocumented internal function.
 @end deftypefn */)
 {
   octave_value retval;
 #if ! defined (HAVE_PORTAUDIO)
+  octave_unused_parameter (interp);
   octave_unused_parameter (args);
 
   err_disabled_feature ("__player_audioplayer__",
                         "audio playback and recording through PortAudio");
 #else
+  interp.mlock ();
 
   audioplayer *recorder = new audioplayer ();
 
   bool is_function = (args(0).is_string () || args(0).is_function_handle ()
                       || args(0).is_inline_function ());
 
   if (is_function)
     error ("audioplayer: callbacks not yet implemented");
@@ -2259,236 +2284,249 @@ Undocumented internal function.
   retval = recorder;
 #endif
   return retval;
 }
 
 #if defined (HAVE_PORTAUDIO)
 
 static audioplayer *
-get_player (const octave_value& ov)
+get_player (octave::interpreter& interp, const octave_value& ov)
 {
+  interp.mlock ();
+
   const octave_base_value& rep = ov.get_rep ();
 
   octave_base_value *ncrep = const_cast<octave_base_value *> (&rep);
 
   audioplayer *pl = dynamic_cast<audioplayer *> (ncrep);
   if (! pl)
     error ("audiodevinfo.cc get_player: dynamic_cast to audioplayer failed");
 
   return pl;
 }
 
 #endif
 
-DEFUN_DLD (__player_get_channels__, args, ,
-           doc: /* -*- texinfo -*-
+DEFMETHOD_DLD (__player_get_channels__, interp, args, ,
+               doc: /* -*- texinfo -*-
 @deftypefn {} {@var{n} =} __player_get_channels__ (@var{player})
 Undocumented internal function.
 @end deftypefn */)
 {
   octave_value retval;
 #if ! defined (HAVE_PORTAUDIO)
+  octave_unused_parameter (interp);
   octave_unused_parameter (args);
 
   err_disabled_feature ("__player_get_channels__",
                         "audio playback and recording through PortAudio");
 #else
   if (args.length () == 1)
-    retval = get_player (args(0))->get_channels ();
+    retval = get_player (interp, args(0))->get_channels ();
 #endif
   return retval;
 }
 
-DEFUN_DLD (__player_get_fs__, args, ,
-           doc: /* -*- texinfo -*-
+DEFMETHOD_DLD (__player_get_fs__, interp, args, ,
+               doc: /* -*- texinfo -*-
 @deftypefn {} {@var{fs} =} __player_get_fs__ (@var{player})
 Undocumented internal function.
 @end deftypefn */)
 {
   octave_value retval;
 #if ! defined (HAVE_PORTAUDIO)
+  octave_unused_parameter (interp);
   octave_unused_parameter (args);
 
   err_disabled_feature ("__player_get_fs__",
                         "audio playback and recording through PortAudio");
 #else
   if (args.length () == 1)
-    retval = get_player (args(0))->get_fs ();
+    retval = get_player (interp, args(0))->get_fs ();
 #endif
   return retval;
 }
 
-DEFUN_DLD (__player_get_id__, args, ,
-           doc: /* -*- texinfo -*-
+DEFMETHOD_DLD (__player_get_id__, interp, args, ,
+               doc: /* -*- texinfo -*-
 @deftypefn {} {@var{id} =} __player_get_id__ (@var{player})
 Undocumented internal function.
 @end deftypefn */)
 {
   octave_value retval;
 #if ! defined (HAVE_PORTAUDIO)
+  octave_unused_parameter (interp);
   octave_unused_parameter (args);
 
   err_disabled_feature ("__player_get_id__",
                         "audio playback and recording through PortAudio");
 #else
   if (args.length () == 1)
-    retval = get_player (args(0))->get_id ();
+    retval = get_player (interp, args(0))->get_id ();
 #endif
   return retval;
 }
 
-DEFUN_DLD (__player_get_nbits__, args, ,
-           doc: /* -*- texinfo -*-
+DEFMETHOD_DLD (__player_get_nbits__, interp, args, ,
+               doc: /* -*- texinfo -*-
 @deftypefn {} {@var{nbits} =} __player_get_nbits__ (@var{player})
 Undocumented internal function.
 @end deftypefn */)
 {
   octave_value retval;
 #if ! defined (HAVE_PORTAUDIO)
+  octave_unused_parameter (interp);
   octave_unused_parameter (args);
 
   err_disabled_feature ("__player_get_nbits__",
                         "audio playback and recording through PortAudio");
 #else
   if (args.length () == 1)
-    retval = get_player (args(0))->get_nbits ();
+    retval = get_player (interp, args(0))->get_nbits ();
 #endif
   return retval;
 }
 
-DEFUN_DLD (__player_get_sample_number__, args, ,
-           doc: /* -*- texinfo -*-
+DEFMETHOD_DLD (__player_get_sample_number__, interp, args, ,
+               doc: /* -*- texinfo -*-
 @deftypefn {} {@var{n} =} __player_get_sample_number__ (@var{player})
 Undocumented internal function.
 @end deftypefn */)
 {
   octave_value retval;
 #if ! defined (HAVE_PORTAUDIO)
+  octave_unused_parameter (interp);
   octave_unused_parameter (args);
 
   err_disabled_feature ("__player_get_sample_number__",
                         "audio playback and recording through PortAudio");
 #else
   if (args.length () == 1)
-    retval = get_player (args(0))->get_sample_number ();
+    retval = get_player (interp, args(0))->get_sample_number ();
 #endif
   return retval;
 }
 
-DEFUN_DLD (__player_get_tag__, args, ,
-           doc: /* -*- texinfo -*-
+DEFMETHOD_DLD (__player_get_tag__, interp, args, ,
+               doc: /* -*- texinfo -*-
 @deftypefn {} {@var{tag} =} __player_get_tag__ (@var{player})
 Undocumented internal function.
 @end deftypefn */)
 {
   octave_value retval;
 #if ! defined (HAVE_PORTAUDIO)
+  octave_unused_parameter (interp);
   octave_unused_parameter (args);
 
   err_disabled_feature ("__player_get_tag__",
                         "audio playback and recording through PortAudio");
 #else
   if (args.length () == 1)
-    retval = get_player (args(0))->get_tag ();
+    retval = get_player (interp, args(0))->get_tag ();
 #endif
   return retval;
 }
 
-DEFUN_DLD (__player_get_total_samples__, args, ,
-           doc: /* -*- texinfo -*-
+DEFMETHOD_DLD (__player_get_total_samples__, interp, args, ,
+               doc: /* -*- texinfo -*-
 @deftypefn {} {@var{n} =} __player_get_total_samples__ (@var{player})
 Undocumented internal function.
 @end deftypefn */)
 {
   octave_value retval;
 #if ! defined (HAVE_PORTAUDIO)
+  octave_unused_parameter (interp);
   octave_unused_parameter (args);
 
   err_disabled_feature ("__player_get_total_samples__",
                         "audio playback and recording through PortAudio");
 #else
   if (args.length () == 1)
-    retval = get_player (args(0))->get_total_samples ();
+    retval = get_player (interp, args(0))->get_total_samples ();
 #endif
   return retval;
 }
 
-DEFUN_DLD (__player_get_userdata__, args, ,
-           doc: /* -*- texinfo -*-
+DEFMETHOD_DLD (__player_get_userdata__, interp, args, ,
+               doc: /* -*- texinfo -*-
 @deftypefn {} {@var{data} =} __player_get_userdata__ (@var{player})
 Undocumented internal function.
 @end deftypefn */)
 {
   octave_value retval;
 #if ! defined (HAVE_PORTAUDIO)
+  octave_unused_parameter (interp);
   octave_unused_parameter (args);
 
   err_disabled_feature ("__player_get_userdata__",
                         "audio playback and recording through PortAudio");
 #else
   if (args.length () == 1)
-    retval = get_player (args(0))->get_userdata ();
+    retval = get_player (interp, args(0))->get_userdata ();
 #endif
   return retval;
 }
 
-DEFUN_DLD (__player_isplaying__, args, ,
-           doc: /* -*- texinfo -*-
+DEFMETHOD_DLD (__player_isplaying__, interp, args, ,
+               doc: /* -*- texinfo -*-
 @deftypefn {} {} __player_isplaying__ (@var{player})
 Undocumented internal function.
 @end deftypefn */)
 {
   octave_value retval;
 #if ! defined (HAVE_PORTAUDIO)
+  octave_unused_parameter (interp);
   octave_unused_parameter (args);
 
   err_disabled_feature ("__player_isplaying__",
                         "audio playback and recording through PortAudio");
 #else
   if (args.length () == 1)
-    retval = get_player (args(0))->isplaying ();
+    retval = get_player (interp, args(0))->isplaying ();
 #endif
   return retval;
 }
 
-DEFUN_DLD (__player_pause__, args, ,
-           doc: /* -*- texinfo -*-
+DEFMETHOD_DLD (__player_pause__, interp, args, ,
+               doc: /* -*- texinfo -*-
 @deftypefn {} {} __player_pause__ (@var{player})
 Undocumented internal function.
 @end deftypefn */)
 {
 #if ! defined (HAVE_PORTAUDIO)
+  octave_unused_parameter (interp);
   octave_unused_parameter (args);
 
   err_disabled_feature ("__player_pause__",
                         "audio playback and recording through PortAudio");
 #else
   if (args.length () == 1)
-    get_player (args(0))->pause ();
+    get_player (interp, args(0))->pause ();
   return ovl ();
 #endif
 }
 
-DEFUN_DLD (__player_playblocking__, args, ,
-           doc: /* -*- texinfo -*-
+DEFMETHOD_DLD (__player_playblocking__, interp, args, ,
+               doc: /* -*- texinfo -*-
 @deftypefn  {} {} __player_playblocking__ (@var{player})
 @deftypefnx {} {} __player_playblocking__ (@var{player}, @var{start})
 @deftypefnx {} {} __player_playblocking__ (@var{player}, [@var{start}, @var{end}])
 Undocumented internal function.
 @end deftypefn */)
 {
 #if ! defined (HAVE_PORTAUDIO)
+  octave_unused_parameter (interp);
   octave_unused_parameter (args);
 
   err_disabled_feature ("__player_playblocking__",
                         "audio playback and recording through PortAudio");
 #else
 
-  audioplayer *player = get_player (args(0));
+  audioplayer *player = get_player (interp, args(0));
 
   if (args.length () == 1)
     {
       player->playblocking ();
     }
   else if (args.length () == 2)
     {
       if (args(1).is_matrix_type ())
@@ -2517,38 +2555,39 @@ Undocumented internal function.
 
       player->playblocking ();
     }
 
   return ovl ();
 #endif
 }
 
-DEFUN_DLD (__player_play__, args, ,
-           doc: /* -*- texinfo -*-
+DEFMETHOD_DLD (__player_play__, interp, args, ,
+               doc: /* -*- texinfo -*-
 @deftypefn  {} {} __player_play__ (@var{player})
 @deftypefnx {} {} __player_play__ (@var{player}, @var{start})
 @deftypefnx {} {} __player_play__ (@var{player}, [@var{start}, @var{end}])
 Undocumented internal function.
 @end deftypefn */)
 {
 #if ! defined (HAVE_PORTAUDIO)
+  octave_unused_parameter (interp);
   octave_unused_parameter (args);
 
   err_disabled_feature ("__player_play__",
                         "audio playback and recording through PortAudio");
 #else
 
   if (args.length () == 1)
     {
-      get_player (args(0))->play ();
+      get_player (interp, args(0))->play ();
     }
   else if (args.length () == 2)
     {
-      audioplayer *player = get_player (args(0));
+      audioplayer *player = get_player (interp, args(0));
 
       if (args(1).is_matrix_type ())
         {
           RowVector range = args(1).row_vector_value ();
 
           unsigned int start = range.elem (0) - 1;
           unsigned int end = range.elem (1) - 1;
 
@@ -2571,97 +2610,102 @@ Undocumented internal function.
 
       player->play ();
     }
 
   return ovl ();
 #endif
 }
 
-DEFUN_DLD (__player_resume__, args, ,
-           doc: /* -*- texinfo -*-
+DEFMETHOD_DLD (__player_resume__, interp, args, ,
+               doc: /* -*- texinfo -*-
 @deftypefn {} {} __player_resume__ (@var{player})
 Undocumented internal function.
 @end deftypefn */)
 {
 #if ! defined (HAVE_PORTAUDIO)
+  octave_unused_parameter (interp);
   octave_unused_parameter (args);
 
   err_disabled_feature ("__player_resume__",
                         "audio playback and recording through PortAudio");
 #else
   if (args.length () == 1)
-    get_player (args(0))->resume ();
+    get_player (interp, args(0))->resume ();
   return ovl ();
 #endif
 }
 
-DEFUN_DLD (__player_set_fs__, args, ,
-           doc: /* -*- texinfo -*-
+DEFMETHOD_DLD (__player_set_fs__, interp, args, ,
+               doc: /* -*- texinfo -*-
 @deftypefn {} {} __player_set_fs__ (@var{player}, @var{fs})
 Undocumented internal function.
 @end deftypefn */)
 {
 #if ! defined (HAVE_PORTAUDIO)
+  octave_unused_parameter (interp);
   octave_unused_parameter (args);
 
   err_disabled_feature ("__player_set_fs__",
                         "audio playback and recording through PortAudio");
 #else
   if (args.length () == 2)
-    get_player (args(0))->set_fs (args(1).int_value ());
+    get_player (interp, args(0))->set_fs (args(1).int_value ());
   return ovl ();
 #endif
 }
 
-DEFUN_DLD (__player_set_tag__, args, ,
-           doc: /* -*- texinfo -*-
+DEFMETHOD_DLD (__player_set_tag__, interp, args, ,
+               doc: /* -*- texinfo -*-
 @deftypefn {} {} __player_set_tag__ (@var{player}, @var{tag})
 Undocumented internal function.
 @end deftypefn */)
 {
 #if ! defined (HAVE_PORTAUDIO)
+  octave_unused_parameter (interp);
   octave_unused_parameter (args);
 
   err_disabled_feature ("__player_set_tag__",
                         "audio playback and recording through PortAudio");
 #else
   if (args.length () == 2)
-    get_player (args(0))->set_tag (args(1).char_matrix_value ());
+    get_player (interp, args(0))->set_tag (args(1).char_matrix_value ());
   return ovl ();
 #endif
 }
 
-DEFUN_DLD (__player_set_userdata__, args, ,
-           doc: /* -*- texinfo -*-
+DEFMETHOD_DLD (__player_set_userdata__, interp, args, ,
+               doc: /* -*- texinfo -*-
 @deftypefn {} {} __player_set_userdata__ (@var{player}, @var{data})
 Undocumented internal function.
 @end deftypefn */)
 {
 #if ! defined (HAVE_PORTAUDIO)
+  octave_unused_parameter (interp);
   octave_unused_parameter (args);
 
   err_disabled_feature ("__player_set_userdata__",
                         "audio playback and recording through PortAudio");
 #else
   if (args.length () == 2)
-    get_player (args(0))->set_userdata (args(1));
+    get_player (interp, args(0))->set_userdata (args(1));
   return ovl ();
 #endif
 }
 
-DEFUN_DLD (__player_stop__, args, ,
-           doc: /* -*- texinfo -*-
+DEFMETHOD_DLD (__player_stop__, interp, args, ,
+               doc: /* -*- texinfo -*-
 @deftypefn {} {} __player_stop__ (@var{player})
 Undocumented internal function.
 @end deftypefn */)
 {
 #if ! defined (HAVE_PORTAUDIO)
+  octave_unused_parameter (interp);
   octave_unused_parameter (args);
 
   err_disabled_feature ("__player_stop__",
                         "audio playback and recording through PortAudio");
 #else
   if (args.length () == 1)
-    get_player (args(0))->stop ();
+    get_player (interp, args(0))->stop ();
   return ovl ();
 #endif
 }
diff --git a/libinterp/parse-tree/pt-jit.cc b/libinterp/parse-tree/pt-jit.cc
--- a/libinterp/parse-tree/pt-jit.cc
+++ b/libinterp/parse-tree/pt-jit.cc
@@ -64,17 +64,17 @@ along with Octave; see the file COPYING.
 #endif
 // In LLVM 3.7.x and earlier, we use createBasicAliasAnalysisPass
 // from llvm/Analysis/Passes.h (already included above)
 
 #if defined (HAVE_LLVM_BITCODE_READERWRITER_H)
 // In LLVM <= 3.9, only one header for bitcode read/writer
 #  include <llvm/Bitcode/ReaderWriter.h>
 #else
-// Satrting with LLVM 4.0, two separate headers
+// Starting with LLVM 4.0, two separate headers
 #  include <llvm/Bitcode/BitcodeReader.h>
 #  include <llvm/Bitcode/BitcodeWriter.h>
 #endif
 
 #include <llvm/ExecutionEngine/ExecutionEngine.h>
 // old JIT, LLVM < 3.6.0
 // #include <llvm/ExecutionEngine/JIT.h>
 // MCJIT, LLVM >= 3.0.0
diff --git a/liboctave/array/Range.cc b/liboctave/array/Range.cc
--- a/liboctave/array/Range.cc
+++ b/liboctave/array/Range.cc
@@ -594,17 +594,17 @@ Range::numel_internal (void) const
     }
 
   return retval;
 }
 
 double
 Range::limit_internal (void) const
 {
-  double new_limit = rng_limit;
+  double new_limit;
 
   if (rng_inc > 0)
     new_limit = max ();
   else
     new_limit = min ();
 
   // If result must be an integer then force the new_limit to be one.
   if (all_elements_are_ints ())
diff --git a/test/bug-54995/@testclass/subsref.m b/test/bug-54995/@testclass/subsref.m
deleted file mode 100644
--- a/test/bug-54995/@testclass/subsref.m
+++ /dev/null
@@ -1,3 +0,0 @@
-function val = subsref (obj, S)
-  val = builtin ("subsref", obj, S);
-endfunction
diff --git a/test/bug-54995/@testclass/testclass.m b/test/bug-54995/@testclass/testclass.m
deleted file mode 100644
--- a/test/bug-54995/@testclass/testclass.m
+++ /dev/null
@@ -1,4 +0,0 @@
-function obj = testclass ()
-  obj = struct ("x", eye (4));
-  obj = class(obj, "testclass");
-endfunction
diff --git a/test/bug-54995/@testclass54995/subsref.m b/test/bug-54995/@testclass54995/subsref.m
new file mode 100644
--- /dev/null
+++ b/test/bug-54995/@testclass54995/subsref.m
@@ -0,0 +1,3 @@
+function val = subsref (obj, S)
+  val = builtin ("subsref", obj, S);
+endfunction
diff --git a/test/bug-54995/@testclass54995/testclass54995.m b/test/bug-54995/@testclass54995/testclass54995.m
new file mode 100644
--- /dev/null
+++ b/test/bug-54995/@testclass54995/testclass54995.m
@@ -0,0 +1,4 @@
+function obj = testclass54995 ()
+  obj = struct ("x", eye (4));
+  obj = class(obj, "testclass54995");
+endfunction
diff --git a/test/bug-54995/bug-54995.tst b/test/bug-54995/bug-54995.tst
--- a/test/bug-54995/bug-54995.tst
+++ b/test/bug-54995/bug-54995.tst
@@ -1,9 +1,9 @@
-## Copyright (C) 2018 Guillaume Flandin
+## Copyright (C) 2018-2019 Guillaume Flandin
 ##
 ## This file is part of Octave.
 ##
 ## Octave is free software: you can redistribute it and/or modify it
 ## under the terms of the GNU General Public License as published by
 ## the Free Software Foundation, either version 3 of the License, or
 ## (at your option) any later version.
 ##
@@ -12,10 +12,10 @@
 ## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 ## GNU General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <https://www.gnu.org/licenses/>.
 
 %!test <*54995>
-%! obj = testclass ();
+%! obj = testclass54995 ();
 %! assert (obj.x(1), 1);
diff --git a/test/bug-54995/module.mk b/test/bug-54995/module.mk
--- a/test/bug-54995/module.mk
+++ b/test/bug-54995/module.mk
@@ -1,6 +1,6 @@
 bug_54995_TEST_FILES = \
-  %reldir%/@testclass/testclass.m \
-  %reldir%/@testclass/subsref.m \
+  %reldir%/@testclass54995/testclass54995.m \
+  %reldir%/@testclass54995/subsref.m \
   %reldir%/bug-54995.tst
 
 TEST_FILES += $(bug_54995_TEST_FILES)
