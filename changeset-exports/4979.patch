# HG changeset patch
# User jwe
# Date 1094685905 0
#      Wed Sep 08 23:25:05 2004 +0000
# Node ID ce4e3d39d05bc14e3dbe9a1d9c2c210726441d8e
# Parent  8719102eb804739aa973446e17bc01accd285d31
[project @ 2004-09-08 23:25:05 by jwe]

diff --git a/liboctave/Array.h b/liboctave/Array.h
--- a/liboctave/Array.h
+++ b/liboctave/Array.h
@@ -219,17 +219,17 @@ public:
     : rep (new typename Array<T>::ArrayRep (get_size (dv))),
       dimensions (dv), idx (0), idx_count (0)
     {
       fill (val);
     }
 
   Array (const Array<T>& a, const dim_vector& dv);
 
-  ~Array (void);
+  virtual ~Array (void);
 
   Array<T>& operator = (const Array<T>& a)
     {
       if (this != &a)
 	{
 	  if (--rep->count <= 0)
 	    delete rep;
 
diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,16 @@
+2004-09-08  John W. Eaton  <jwe@octave.org>
+
+	* Array.h (Array::~Array): Declare virtual.
+
+	* idx-vector.h (idx_vector::idx_vector): Initialize rep in member
+	initializaion list.  Don't set rep->count since the rep
+	constructor does that.
+
 2004-09-07  John W. Eaton  <jwe@octave.org>
 
 	* data-conv.cc (oct_data_conv::string_to_data_type): Handle dt_logical.
 	(oct_data_conv::data_type_as_string): Likewise.
 
 	* data-conv.h (oct_data_conv::data_type): Add dt_logical to list.
 
 	* Range.cc (round): Delete unused function.
diff --git a/liboctave/idx-vector.h b/liboctave/idx-vector.h
--- a/liboctave/idx-vector.h
+++ b/liboctave/idx-vector.h
@@ -186,89 +186,41 @@ private:
     int tree_to_mat_idx (int i) { return i - 1; }
 
     template <class U> int tree_to_mat_idx (const octave_int<U>& i)
       { return i.value () - 1; }
   };
 
 public:
 
-  idx_vector (void)
-    {
-      rep = new idx_vector_rep ();
-      rep->count = 1;
-    }
+  idx_vector (void) : rep (new idx_vector_rep ()) { }
 
-  idx_vector (const ColumnVector& v)
-    {
-      rep = new idx_vector_rep (v);
-      rep->count = 1;
-    }
+  idx_vector (const ColumnVector& v) : rep (new idx_vector_rep (v)) { }
 
-  idx_vector (const NDArray& nda)
-    {
-      rep = new idx_vector_rep (nda);
-      rep->count = 1;
-    }
+  idx_vector (const NDArray& nda) : rep (new idx_vector_rep (nda)) { }
 
   template <class U>
-  idx_vector (const intNDArray<U>& inda)
-    {
-      rep = new idx_vector_rep (inda);
-      rep->count = 1;
-    }
+  idx_vector (const intNDArray<U>& inda) : rep (new idx_vector_rep (inda)) { }
 
-  idx_vector (const Range& r)
-    {
-      rep = new idx_vector_rep (r);
-      rep->count = 1;
-    }
+  idx_vector (const Range& r) : rep (new idx_vector_rep (r)) { }
 
-  idx_vector (double d)
-    {
-      rep = new idx_vector_rep (d);
-      rep->count = 1;
-    }
+  idx_vector (double d) : rep (new idx_vector_rep (d)) { }
 
-  idx_vector (int i)
-    {
-      rep = new idx_vector_rep (i);
-      rep->count = 1;
-    }
+  idx_vector (int i) : rep (new idx_vector_rep (i)) { }
 
-  idx_vector (char c)
-    {
-      rep = new idx_vector_rep (c);
-      rep->count = 1;
-    }
+  idx_vector (char c) : rep (new idx_vector_rep (c)) { }
 
-  idx_vector (bool b)
-    {
-      rep = new idx_vector_rep (b);
-      rep->count = 1;
-    }
+  idx_vector (bool b) : rep (new idx_vector_rep (b)) { }
 
   template <class U>
-  idx_vector (const octave_int<U>& i)
-    {
-      rep = new idx_vector_rep (i);
-      rep->count = 1;
-    }
+  idx_vector (const octave_int<U>& i) : rep (new idx_vector_rep (i)) { }
 
-  idx_vector (const boolNDArray& bnda)
-    {
-      rep = new idx_vector_rep (bnda);
-      rep->count = 1;
-    }
+  idx_vector (const boolNDArray& bnda) : rep (new idx_vector_rep (bnda)) { }
 
-  idx_vector (const idx_vector& a)
-    {
-      rep = a.rep;
-      rep->count++;
-    }
+  idx_vector (const idx_vector& a) : rep (a.rep) { rep->count++; }
 
   ~idx_vector (void)
     {
       if (--rep->count <= 0)
 	delete rep;
     }
 
   idx_vector& operator = (const idx_vector& a)
