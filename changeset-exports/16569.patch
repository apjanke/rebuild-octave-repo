# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1366907589 14400
#      Thu Apr 25 12:33:09 2013 -0400
# Node ID ab1df81adaa06e278d0b235fbfc46f22440346d4
# Parent  477bfd5d95f5ad98fd536fc9f32370eba2ef81dc
avoid using bp_info struct in file_editor_tab::file_in_path

* file-editor-tab.h, file-editor-tab.cc
(file_editor_tab::file_in_path): Arguments are not file and directory,
not bp_info struct.  Change all uses.

diff --git a/libgui/src/m-editor/file-editor-tab.cc b/libgui/src/m-editor/file-editor-tab.cc
--- a/libgui/src/m-editor/file-editor-tab.cc
+++ b/libgui/src/m-editor/file-editor-tab.cc
@@ -437,69 +437,68 @@ file_editor_tab::remove_bookmark (const 
 {
   if (ID != this)
     return;
 
   _edit_area->markerDeleteAll (bookmark);
 }
 
 bool
-file_editor_tab::file_in_path (const bp_info& info)
+file_editor_tab::file_in_path (const std::string& file, const std::string& dir)
 {
   bool ok = false;
   bool addpath_option = true;
 
   std::string curr_dir = octave_env::get_current_directory ();
 
-  if (same_file (curr_dir, info.dir))
+  if (same_file (curr_dir, dir))
     ok = true;
   else
     {
-      bool dir_in_load_path = load_path::contains_canonical (info.dir);
+      bool dir_in_load_path = load_path::contains_canonical (dir);
 
-      std::string base_file = octave_env::base_pathname (info.file);
+      std::string base_file = octave_env::base_pathname (file);
       std::string lp_file = load_path::find_file (base_file);
 
       if (dir_in_load_path)
         {
-          if (same_file (lp_file, info.file))
+          if (same_file (lp_file, file))
             ok = true;
         }
       else
         {
           // File directory is not in path.  Is the file in the path in
           // the current directory?  If so, then changing the current
           // directory will be needed.  Adding directory to path is
           // not enough because the file in the current directory would
           // still be found.
 
           if (same_file (lp_file, base_file))
             {
-              if (same_file (curr_dir, info.dir))
+              if (same_file (curr_dir, dir))
                 ok = true;
               else
                 addpath_option = false;
             }
         }
     }
 
   if (! ok)
     {
       int action
-        = octave_link::debug_cd_or_addpath_error (info.file, info.dir,
-                                                  addpath_option);
+        = octave_link::debug_cd_or_addpath_error (file, dir, addpath_option);
       switch (action)
         {
         case 1:
-          Fcd (ovl (info.dir));
+          Fcd (ovl (dir));
           ok = true;
           break;
 
         case 2:
-          load_path::prepend (info.dir);
+          load_path::prepend (dir);
           ok = true;
           break;
 
         default:
           break;
         }
     }
 
@@ -507,34 +506,34 @@ file_editor_tab::file_in_path (const bp_
 }
 
 void
 file_editor_tab::add_breakpoint_callback (const bp_info& info)
 {
   bp_table::intmap line_info;
   line_info[0] = info.line;
 
-  if (file_in_path (info))
+  if (file_in_path (info.file, info.dir))
     bp_table::add_breakpoint (info.function_name, line_info);
 }
 
 void
 file_editor_tab::remove_breakpoint_callback (const bp_info& info)
 {
   bp_table::intmap line_info;
   line_info[0] = info.line;
 
-  if (file_in_path (info))
+  if (file_in_path (info.file, info.dir))
     bp_table::remove_breakpoint (info.function_name, line_info);
 }
 
 void
 file_editor_tab::remove_all_breakpoints_callback (const bp_info& info)
 {
-  if (file_in_path (info))
+  if (file_in_path (info.file, info.dir))
     bp_table::remove_all_breakpoints_in_file (info.function_name, true);
 }
 
 void
 file_editor_tab::request_add_breakpoint (int line)
 {
   QFileInfo file_info (_file_name);
   QString dir = file_info.absolutePath ();
diff --git a/libgui/src/m-editor/file-editor-tab.h b/libgui/src/m-editor/file-editor-tab.h
--- a/libgui/src/m-editor/file-editor-tab.h
+++ b/libgui/src/m-editor/file-editor-tab.h
@@ -167,17 +167,17 @@ private:
   void request_add_breakpoint (int line);
   void request_remove_breakpoint (int line);
 
   int check_file_modified ();
   void do_comment_selected_text (bool comment);
 
   void run_file_callback (void);
 
-  bool file_in_path (const bp_info& info);
+  bool file_in_path (const std::string& file, const std::string& dir);
 
   void add_breakpoint_callback (const bp_info& info);
   void remove_breakpoint_callback (const bp_info& info);
   void remove_all_breakpoints_callback (const bp_info& info);
   void center_current_line ();
 
   QsciScintilla *_edit_area;
 
