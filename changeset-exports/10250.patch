# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1265184426 18000
#      Wed Feb 03 03:07:06 2010 -0500
# Node ID 2d47356a7a1ab3ca81a04e06cc1a7a13e1e1ed94
# Parent  14eba566f9f026d0dea5e99385cae0c63787fea3
use gnulib getcwd module

diff --git a/ChangeLog b/ChangeLog
--- a/ChangeLog
+++ b/ChangeLog
@@ -1,8 +1,13 @@
+2010-02-03  John W. Eaton  <jwe@octave.org>
+
+	* configure.ac: Don't check for getcwd.
+	* bootstrap.conf (gnulib_modules): Include getcwd in the list.
+
 2010-02-02  John W. Eaton  <jwe@octave.org>
 
 	* configure.ac: Assume signal.h provides sigset_t and sig_atomic_t.
 
 2010-02-02  John W. Eaton  <jwe@octave.org>
 
 	* configure.ac: Don't call OCTAVE_SIGNAL_CHECK,
 	OCTAVE_REINSTALL_SIGHANDLERS, AC_C_CONST, AC_HEADER_STDC, or
diff --git a/bootstrap.conf b/bootstrap.conf
--- a/bootstrap.conf
+++ b/bootstrap.conf
@@ -16,16 +16,17 @@
 # along with this program.  If not, see <http://www.gnu.org/licenses/>.
 
 
 # gnulib modules used by this package.
 gnulib_modules="
   c-strcase
   crypto/md5
   fnmatch
+  getcwd
   getopt-gnu
   gettimeofday
   glob
   link
   lstat
   mkdir
   mkfifo
   pathmax
diff --git a/configure.ac b/configure.ac
--- a/configure.ac
+++ b/configure.ac
@@ -1484,17 +1484,17 @@ if test "$have_termios_h" = yes \
   true
 else
   AC_MSG_WARN([I couldn't find termios.h, termio.h, or sgtty.h!])
 fi
 
 ### Checks for functions and variables.
 
 AC_CHECK_FUNCS(basename canonicalize_file_name \
-  chmod dup2 endgrent endpwent execvp expm1 expm1f fcntl fork getcwd \
+  chmod dup2 endgrent endpwent execvp expm1 expm1f fcntl fork \
   getegid geteuid getgid getgrent getgrgid getgrnam getpgrp getpid \
   getppid getpwent getpwuid getuid getwd _kbhit kill \
   lgamma lgammaf lgamma_r lgammaf_r localtime_r log1p log1pf \
   mkstemp pipe poll putenv raise \
   realpath resolvepath rindex roundl select setgrent setlocale \
   setpwent setvbuf sigaction siglongjmp sigpending sigprocmask sigsuspend \
   snprintf strdup strerror strsignal tempnam tgammaf trunc umask \
   uname usleep utime vfprintf vsprintf vsnprintf waitpid \
diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,21 @@
+2010-02-03  John W. Eaton  <jwe@octave.org>
+
+	* file-ops.cc (canonicalize_file_name):
+	Don't pass current directory to octave_env::make_absolute.
+	* cmd-edit.cc (do_decode_prompt_string): Likewise.
+
+	* oct-env.h (octave_env::get_current_directory):
+	Rename from octave_env::getcwd.
+	(octave_env::make_absolute): Provide default value for second arg.
+
+	* lo-sysdep.cc (octave_getcwd): Assume we are using gnulib
+	getcwd module.
+
 2010-02-02  John W. Eaton  <jwe@octave.org>
 
 	* oct-time.h: Include <ctime>, not "systime.h".
 	* oct-time.cc: Include <strftime.h>, not "strftime.h".
 	Don't include <windows.h>.
 
 	* systime.h: Delete.
 	* Makefile.am (INCS): Remove it from the list.
diff --git a/liboctave/cmd-edit.cc b/liboctave/cmd-edit.cc
--- a/liboctave/cmd-edit.cc
+++ b/liboctave/cmd-edit.cc
@@ -1381,17 +1381,17 @@ command_editor::do_decode_prompt_string 
 		temp = octave_env::base_pathname (temp);
 
 		goto add_string;
 	      }
 
 	    case 'w':
 	    case 'W':
 	      {
-		temp = octave_env::getcwd ();
+		temp = octave_env::get_current_directory ();
 
 		std::string home_dir = octave_env::get_home_directory ();
 
 		if (c == 'W' && (home_dir.empty () || temp != home_dir))
 		  {
 		    if (temp != "/" && temp != "//")
 		      {
 			size_t pos = temp.rfind ('/');
diff --git a/liboctave/file-ops.cc b/liboctave/file-ops.cc
--- a/liboctave/file-ops.cc
+++ b/liboctave/file-ops.cc
@@ -398,18 +398,17 @@ extern int errno;
       __set_errno (ENOENT);
       return retval;
     }
 
   // All known hosts with resolvepath (e.g. Solaris 7) don't turn
   // relative names into absolute ones, so prepend the working
   // directory if the path is not absolute.
 
-  std::string absolute_name
-    = octave_env::make_absolute (name, octave_env::getcwd ());
+  std::string absolute_name = octave_env::make_absolute (name);
 
   size_t resolved_size = absolute_name.length ();
 
   while (true)
     {
       resolved_size = 2 * resolved_size + 1;
 
       OCTAVE_LOCAL_BUFFER (char, resolved, resolved_size);
diff --git a/liboctave/lo-sysdep.cc b/liboctave/lo-sysdep.cc
--- a/liboctave/lo-sysdep.cc
+++ b/liboctave/lo-sysdep.cc
@@ -50,30 +50,27 @@ along with Octave; see the file COPYING.
 #include "str-vec.h"
 #include "oct-locbuf.h"
 
 std::string
 octave_getcwd (void)
 {
   std::string retval;
 
-  char buf[MAXPATHLEN];
-
-  char *tmp = 0;
+  // Using the gnulib getcwd module ensures that we have a getcwd that
+  // will allocate a buffer as large as necessary if buf and size are
+  // both 0.
 
-#if defined (__EMX__)
-  tmp = _getcwd2 (buf, MAXPATHLEN);
-#elif defined (HAVE_GETCWD)
-  tmp = getcwd (buf, MAXPATHLEN);
-#elif defined (HAVE_GETWD)
-  tmp = getwd (buf);
-#endif
+  char *tmp = getcwd (0, 0);
 
   if (tmp)
-    retval = tmp;
+    {
+      retval = tmp;
+      free (tmp);
+    }
   else
     (*current_liboctave_error_handler) ("unable to find current directory");
 
   return retval;
 }
 
 int
 octave_chdir (const std::string& path_arg)
diff --git a/liboctave/oct-env.cc b/liboctave/oct-env.cc
--- a/liboctave/oct-env.cc
+++ b/liboctave/oct-env.cc
@@ -124,17 +124,17 @@ octave_env::base_pathname (const std::st
 std::string
 octave_env::make_absolute (const std::string& s, const std::string& dot_path)
 {
   return (instance_ok ())
     ? instance->do_make_absolute (s, dot_path) : std::string ();
 }
 
 std::string
-octave_env::getcwd ()
+octave_env::get_current_directory ()
 {
   return (instance_ok ())
     ? instance->do_getcwd () : std::string ();
 }
 
 std::string
 octave_env::get_home_directory ()
 {
diff --git a/liboctave/oct-env.h b/liboctave/oct-env.h
--- a/liboctave/oct-env.h
+++ b/liboctave/oct-env.h
@@ -38,20 +38,21 @@ public:
   static std::string polite_directory_format (const std::string& name);
 
   static bool absolute_pathname (const std::string& s);
 
   static bool rooted_relative_pathname (const std::string& s);
 
   static std::string base_pathname (const std::string& s);
 
-  static std::string make_absolute (const std::string& s,
-				    const std::string& dot_path);
+  static std::string
+  make_absolute (const std::string& s,
+                 const std::string& dot_path = get_current_directory ());
 
-  static std::string getcwd (void);
+  static std::string get_current_directory (void);
 
   static std::string get_home_directory (void);
 
   static std::string get_program_name (void);
 
   static std::string get_program_invocation_name (void);
 
   static std::string get_user_name (void);
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,29 @@
+2010-02-03  John W. Eaton  <jwe@octave.org>
+
+	* dirfns.cc (Fpwd): Call octave_env::get_current_directory, not
+	octave_env::getcwd.
+
+	* utils.cc (search_path_for_file, search_path_for_all_files,
+	make_absolute, Ffile_in_loadpath, Ffile_in_path, file_in_path,
+	contents_file_in_path, Fmake_absolute_filename):
+	Don't pass current directory to octave_env::make_absolute.
+	* ov-fcn-handle.cc (octave_fcn_handle::set_fcn): Likewise.
+	* octave.cc (execute_startup_files): Likewise.
+	* ls-mat5.cc (read_mat5_binary_element): Likewise.
+	* load-save.cc (find_file_to_load): Likewise.
+	* load-path.cc (load_path::dir_info::update, 
+	load_path::dir_info::initialize, load_path::do_find_dir,
+	load_path::do_find_matching_dirs): Likewise.
+	* file-io.cc (do_stream_open): Likewise.
+	* oct-parse.yy (load_fcn_from_file, Fautoload): Likewise.
+	* DLD-FUNCTIONS/md5sum.cc (Fmd5sum): Likewise.
+	* DLD-FUNCTIONS/urlwrite.cc (Furlwrite): Likewise.
+
 2010-02-02  John W. Eaton  <jwe@octave.org>
 
 	* syscalls.cc (Fcanonicalize_file_name): Use DEFUNX instead of DEFUN.
 
 2010-02-02  Thomas Weber  <thomas.weber.mail@gmail.com>
 
 	* DLD-FUNCTIONS/filter.cc: New tests.
 
diff --git a/src/DLD-FUNCTIONS/md5sum.cc b/src/DLD-FUNCTIONS/md5sum.cc
--- a/src/DLD-FUNCTIONS/md5sum.cc
+++ b/src/DLD-FUNCTIONS/md5sum.cc
@@ -63,18 +63,18 @@ string @var{str}.\n\
           if (have_str)
             retval = oct_md5 (str);
           else
             {
               file_stat fs (str);
 
               if (! fs.exists ())
                 {
-                  std::string tmp = octave_env::make_absolute
-                    (load_path::find_file (str), octave_env::getcwd ());
+                  std::string tmp
+                    = octave_env::make_absolute (load_path::find_file (str));
 
                   if (! tmp.empty ())
                     {
                       warning_with_id ("Octave:md5sum-file-in-path",
                                        "md5sum: file found in load path");
                       str = tmp;
                     }
                 }
diff --git a/src/DLD-FUNCTIONS/urlwrite.cc b/src/DLD-FUNCTIONS/urlwrite.cc
--- a/src/DLD-FUNCTIONS/urlwrite.cc
+++ b/src/DLD-FUNCTIONS/urlwrite.cc
@@ -820,17 +820,17 @@ urlwrite (\"http://www.google.com/search
     frame.run ();
 
   if (nargout > 0)
     {
       if (res)
         {
           retval(2) = std::string ();
           retval(1) = true;
-          retval(0) = octave_env::make_absolute (filename, octave_env::getcwd ());
+          retval(0) = octave_env::make_absolute (filename);
         }
       else
         {
           retval(2) = curl.lasterror ();
           retval(1) = false;
           retval(0) = std::string ();
         }
     }
diff --git a/src/dirfns.cc b/src/dirfns.cc
--- a/src/dirfns.cc
+++ b/src/dirfns.cc
@@ -145,17 +145,17 @@ DEFALIAS (chdir, cd);
 
 DEFUN (pwd, , ,
   "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} pwd ()\n\
 Return the current working directory.\n\
 @seealso{dir, ls}\n\
 @end deftypefn")
 {
-  return octave_value (octave_env::getcwd ());
+  return octave_value (octave_env::get_current_directory ());
 }
 
 DEFUN (readdir, args, ,
   "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {[@var{files}, @var{err}, @var{msg}] =} readdir (@var{dir})\n\
 Return names of the files in the directory @var{dir} as a cell array of\n\
 strings.  If an error occurs, return an empty cell array in @var{files}.\n\
 \n\
diff --git a/src/file-io.cc b/src/file-io.cc
--- a/src/file-io.cc
+++ b/src/file-io.cc
@@ -455,18 +455,18 @@ do_stream_open (const std::string& name,
 	  file_stat fs (fname);
 
 	  if (! (md & std::ios::out
 		 || octave_env::absolute_pathname (fname)
 		 || octave_env::rooted_relative_pathname (fname)))
 	    {
 	      if (! fs.exists ())
 		{
-		  std::string tmp = octave_env::make_absolute
-		    (load_path::find_file (fname), octave_env::getcwd ());
+		  std::string tmp
+                    = octave_env::make_absolute (load_path::find_file (fname));
 
 		  if (! tmp.empty ())
 		    {
 		      warning_with_id ("Octave:fopen-file-in-path",
 				       "fopen: file found in load path");
 		      fname = tmp;
 		    }
 		}
diff --git a/src/load-path.cc b/src/load-path.cc
--- a/src/load-path.cc
+++ b/src/load-path.cc
@@ -55,18 +55,17 @@ load_path::dir_info::update (void)
   file_stat fs (dir_name);
 
   if (fs)
     {
       if (is_relative)
 	{
 	  try
 	    {
-	      std::string abs_name
-		= octave_env::make_absolute (dir_name, octave_env::getcwd ());
+	      std::string abs_name = octave_env::make_absolute (dir_name);
 
 	      abs_dir_cache_iterator p = abs_dir_cache.find (abs_name);
 
 	      if (p != abs_dir_cache.end ())
 		{
 		  // The directory is in the cache of all directories
 		  // we have visited (indexed by its absolute name).
 		  // If it is out of date, initialize it.  Otherwise,
@@ -119,18 +118,17 @@ load_path::dir_info::initialize (void)
     {
       dir_mtime = fs.mtime ();
       dir_time_last_checked = octave_time ();
 
       get_file_list (dir_name);
 
       try
 	{
-	  std::string abs_name
-	    = octave_env::make_absolute (dir_name, octave_env::getcwd ());
+	  std::string abs_name = octave_env::make_absolute (dir_name);
 
 	  // FIXME -- nothing is ever removed from this cache of
 	  // directory information, so there could be some resource
 	  // problems.  Perhaps it should be pruned from time to time.
 
 	  abs_dir_cache[abs_name] = *this;
 	}
       catch (octave_execution_exception)
@@ -1165,18 +1163,17 @@ load_path::do_find_dir (const std::strin
 	return dir;
     }
   else
     {
       for (const_dir_info_list_iterator p = dir_info_list.begin ();
 	   p != dir_info_list.end ();
 	   p++)
 	{
-	  std::string dname
-	    = octave_env::make_absolute (p->dir_name, octave_env::getcwd ());
+	  std::string dname = octave_env::make_absolute (p->dir_name);
 
 	  size_t dname_len = dname.length ();
 
 	  if (dname.substr (dname_len - 1) == file_ops::dir_sep_str ())
 	    {
 	      dname = dname.substr (0, dname_len - 1);
 	      dname_len--;
 	    }
@@ -1213,18 +1210,17 @@ load_path::do_find_matching_dirs (const 
 	retlist.push_back (dir);
     }
   else
     {
       for (const_dir_info_list_iterator p = dir_info_list.begin ();
 	   p != dir_info_list.end ();
 	   p++)
 	{
-	  std::string dname
-	    = octave_env::make_absolute (p->dir_name, octave_env::getcwd ());
+	  std::string dname = octave_env::make_absolute (p->dir_name);
 
 	  size_t dname_len = dname.length ();
 
 	  if (dname.substr (dname_len - 1) == file_ops::dir_sep_str ())
 	    {
 	      dname = dname.substr (0, dname_len - 1);
 	      dname_len--;
 	    }
diff --git a/src/load-save.cc b/src/load-save.cc
--- a/src/load-save.cc
+++ b/src/load-save.cc
@@ -484,18 +484,18 @@ find_file_to_load (const std::string& na
 
   if (! (octave_env::absolute_pathname (fname)
 	 || octave_env::rooted_relative_pathname (fname)))
     {
       file_stat fs (fname);
 
       if (! (fs.exists () && fs.is_reg ()))
 	{
-	  std::string tmp = octave_env::make_absolute
-	    (load_path::find_file (fname), octave_env::getcwd ());
+	  std::string tmp
+            = octave_env::make_absolute (load_path::find_file (fname));
 
 	  if (! tmp.empty ())
 	    {
 	      warning_with_id ("Octave:load-file-in-path",
 			       "load: file found in load path");
 	      fname = tmp;
 	    }
 	}
diff --git a/src/ls-mat5.cc b/src/ls-mat5.cc
--- a/src/ls-mat5.cc
+++ b/src/ls-mat5.cc
@@ -799,18 +799,17 @@ read_mat5_binary_element (std::istream& 
 			// system path
 			string_vector names(3);
 			names(0) = fname + ".oct";
 			names(1) = fname + ".mex";
 			names(2) = fname + ".m";
 
 			dir_path p (load_path::system_path ());
 
-			str = octave_env::make_absolute 
-			  (p.find_first_of (names), octave_env::getcwd ());
+			str = octave_env::make_absolute (p.find_first_of (names));
 
 			size_t xpos
 			  = str.find_last_of (file_ops::dir_sep_chars ());
 
 			std::string dir_name = str.substr (0, xpos);
 
 			octave_function *fcn
 			  = load_fcn_from_file (str, dir_name, "", fname);
diff --git a/src/oct-parse.yy b/src/oct-parse.yy
--- a/src/oct-parse.yy
+++ b/src/oct-parse.yy
@@ -3697,17 +3697,17 @@ load_fcn_from_file (const std::string& f
   if (autoload)
     {
       frame.protect_var (autoloading);
       autoloading = true;
     }
 
   fcn_file_from_relative_lookup = ! octave_env::absolute_pathname (file);
 
-  file = octave_env::make_absolute (file, octave_env::getcwd ());
+  file = octave_env::make_absolute (file);
 
   int len = file.length ();
 
   if (len > 4 && file.substr (len-4, len-1) == ".oct")
     {
       if (autoload && ! fcn_name.empty ())
 	nm = fcn_name;
 
@@ -3817,17 +3817,17 @@ With no arguments, return a structure co
 	      bool found = false;
 
 	      if (fcn)
 		{
 		  std::string fname = fcn->fcn_file_name ();
 
 		  if (! fname.empty ())
 		    {
-		      fname = octave_env::make_absolute (fname, octave_env::getcwd ());
+		      fname = octave_env::make_absolute (fname);
 		      fname = fname.substr (0, fname.find_last_of (file_ops::dir_sep_str ()) + 1);
 
 		      file_stat fs (fname + nm);
 
 		      if (fs.exists ())
 			{
 			  nm = fname + nm;
 			  found = true;
diff --git a/src/octave.cc b/src/octave.cc
--- a/src/octave.cc
+++ b/src/octave.cc
@@ -330,32 +330,26 @@ execute_startup_files (void)
 
 	  file_stat fs_home_rc (home_rc);
 
 	  if (fs_home_rc)
 	    {
 	      // We want to check for curr_dir after executing home_rc
 	      // because doing that may change the working directory.
 
-	      std::string curr_dir = octave_env::getcwd ();
-
-	      local_rc = octave_env::make_absolute (initfile, curr_dir);
+	      local_rc = octave_env::make_absolute (initfile);
 
 	      home_rc_already_executed = same_file (home_rc, local_rc);
 	    }
 	}
 
       if (! home_rc_already_executed)
 	{
 	  if (local_rc.empty ())
-	    {
-	      std::string curr_dir = octave_env::getcwd ();
-
-	      local_rc = octave_env::make_absolute (initfile, curr_dir);
-	    }
+            local_rc = octave_env::make_absolute (initfile);
 
 	  source_file (local_rc, context, verbose, require_file);
 	}
     }
 }
 
 static int
 execute_eval_option_code (const std::string& code)
diff --git a/src/ov-fcn-handle.cc b/src/ov-fcn-handle.cc
--- a/src/ov-fcn-handle.cc
+++ b/src/ov-fcn-handle.cc
@@ -218,18 +218,17 @@ octave_fcn_handle::set_fcn (const std::s
 	  // Next just search for it anywhere in the system path
 	  string_vector names(3);
 	  names(0) = nm + ".oct";
 	  names(1) = nm + ".mex";
 	  names(2) = nm + ".m";
 
 	  dir_path p (load_path::system_path ());
 
-	  str = octave_env::make_absolute 
-	    (p.find_first_of (names), octave_env::getcwd ());
+	  str = octave_env::make_absolute (p.find_first_of (names));
 
 	  size_t xpos = str.find_last_of (file_ops::dir_sep_chars ());
 
 	  std::string dir_name = str.substr (0, xpos);
 
 	  octave_function *xfcn = load_fcn_from_file (str, dir_name, "", nm);
 
 	  if (xfcn)
diff --git a/src/utils.cc b/src/utils.cc
--- a/src/utils.cc
+++ b/src/utils.cc
@@ -231,46 +231,45 @@ empty_arg (const char * /* name */, octa
 
 // See if the given file is in the path.
 
 std::string
 search_path_for_file (const std::string& path, const string_vector& names)
 {
   dir_path p (path);
 
-  return octave_env::make_absolute (p.find_first_of (names),
-				    octave_env::getcwd ());
+  return octave_env::make_absolute (p.find_first_of (names));
 }
 
 // Find all locations of the given file in the path.
 
 string_vector
 search_path_for_all_files (const std::string& path, const string_vector& names)
 {
   dir_path p (path);
 
   string_vector sv = p.find_all_first_of (names);
 
   octave_idx_type len = sv.length ();
 
   for (octave_idx_type i = 0; i < len; i++)
-    sv[i] = octave_env::make_absolute (sv[i], octave_env::getcwd ());
+    sv[i] = octave_env::make_absolute (sv[i]);
 
   return sv;
 }
 
 static string_vector
 make_absolute (const string_vector& sv)
 {
   octave_idx_type len = sv.length ();
 
   string_vector retval (len);
 
   for (octave_idx_type i = 0; i < len; i++)
-    retval[i] = octave_env::make_absolute (sv[i], octave_env::getcwd ());
+    retval[i] = octave_env::make_absolute (sv[i]);
  
   return retval;
 }
 
 DEFUN (file_in_loadpath, args, ,
   "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} file_in_loadpath (@var{file})\n\
 @deftypefnx {Built-in Function} {} file_in_loadpath (@var{file}, \"all\")\n\
@@ -296,30 +295,31 @@ name in the path.  If no files are found
   if (nargin == 1 || nargin == 2)
     {
       string_vector names = args(0).all_strings ();
 
       if (! error_state && names.length () > 0)
 	{
 	  if (nargin == 1)
 	    {
-	      std::string fname = octave_env::make_absolute
-		(load_path::find_first_of (names), octave_env::getcwd ());
+	      std::string fname
+                = octave_env::make_absolute (load_path::find_first_of (names));
 
 	      if (fname.empty ())
 		retval = Matrix ();
 	      else
 		retval = fname;
 	    }
 	  else if (nargin == 2)
 	    {
 	      std::string opt = args(1).string_value ();
 
 	      if (! error_state && opt == "all")
-		retval = Cell (make_absolute (load_path::find_all_first_of (names)));
+		retval = Cell (make_absolute
+                               (load_path::find_all_first_of (names)));
 	      else
 		error ("file_in_loadpath: invalid option");
 	    }
 	}
       else
 	error ("file_in_loadpath: expecting string as first argument");
     }
   else
@@ -377,17 +377,18 @@ name in the path.  If no files are found
 		  else
 		    retval = fname;
 		}
 	      else if (nargin == 3)
 		{
 		  std::string opt = args(2).string_value ();
 
 		  if (! error_state && opt == "all")
-		    retval = Cell (make_absolute (search_path_for_all_files (path, names)));
+		    retval = Cell (make_absolute
+                                   (search_path_for_all_files (path, names)));
 		  else
 		    error ("file_in_path: invalid option");
 		}
 	    }
 	  else
 	    error ("file_in_path: expecting string as second argument");
 	}
       else
@@ -402,18 +403,17 @@ name in the path.  If no files are found
 std::string
 file_in_path (const std::string& name, const std::string& suffix)
 {
   std::string nm = name;
 
   if (! suffix.empty ())
     nm.append (suffix);
 
-  return octave_env::make_absolute
-    (load_path::find_file (nm), octave_env::getcwd ());
+  return octave_env::make_absolute (load_path::find_file (nm));
 }
 
 // See if there is an function file in the path.  If so, return the
 // full path to the file.
 
 std::string
 fcn_file_in_path (const std::string& name)
 {
@@ -457,17 +457,17 @@ contents_file_in_path (const std::string
   if (dir.length () > 0)
     {
       std::string tcontents = file_ops::concat (load_path::find_dir (dir), 
 						std::string ("Contents.m"));
 
       file_stat fs (tcontents);
 
       if (fs.exists ())
-	retval = octave_env::make_absolute (tcontents, octave_env::getcwd ());
+	retval = octave_env::make_absolute (tcontents);
     }
 
   return retval;
 }
 
 // See if there is a .oct file in the path.  If so, return the
 // full path to the file.
 
@@ -781,17 +781,17 @@ Return the full name of @var{file}, rela
 {
   octave_value retval = std::string ();
 
   if (args.length () == 1)
     {
       std::string nm = args(0).string_value ();
 
       if (! error_state)
-	retval = octave_env::make_absolute (nm, octave_env::getcwd ());
+	retval = octave_env::make_absolute (nm);
       else
 	error ("make_absolute_filename: expecting argument to be a file name");
     }      
   else
     print_usage ();
 
   return retval;
 }
