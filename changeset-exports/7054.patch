# HG changeset patch
# User jwe
# Date 1193181737 0
#      Tue Oct 23 23:22:17 2007 +0000
# Node ID 1c5b2b5b58ba78f122a5f9d1eca9f3c32486f10b
# Parent  570a382ce556c1380b9a327f927d817a0581d976
[project @ 2007-10-23 23:22:16 by jwe]

diff --git a/ChangeLog b/ChangeLog
--- a/ChangeLog
+++ b/ChangeLog
@@ -1,8 +1,14 @@
+2007-10-23  John W. Eaton  <jwe@octave.org>
+
+	* configure.in: When checking for -lf2c, set F2CLIBS instad of
+	FLIBS, then set FLIBS to $F2CLIBS just before printing the summary.
+	Check for BLAS library calling convention compatibility.
+
 2007-10-17  John W. Eaton  <jwe@octave.org>
 
 	* configure.in: Delete checks for METIS.
 
 2007-10-12  John W. Eaton  <jwe@octave.org>
 
 	* mk-opts.pl (parse_input): Allow comment lines beginning with #.
 
diff --git a/configure.in b/configure.in
--- a/configure.in
+++ b/configure.in
@@ -24,17 +24,17 @@ dnl               2002, 2003, 2004, 2005
 ### Preserve CFLAGS and CXXFLAGS from the environment before doing
 ### anything else because we don't know which macros might call
 ### AC_PROG_CC or AC_PROG_CXX.
 
 EXTERN_CFLAGS="$CFLAGS"
 EXTERN_CXXFLAGS="$CXXFLAGS"
 
 AC_INIT
-AC_REVISION($Revision: 1.583 $)
+AC_REVISION($Revision: 1.584 $)
 AC_PREREQ(2.57)
 AC_CONFIG_SRCDIR([src/octave.cc])
 AC_CONFIG_HEADER(config.h)
 
 OCTAVE_HOST_TYPE
 
 AC_DEFINE(OCTAVE_SOURCE, 1, [Define if this is Octave.])
   
@@ -790,27 +790,31 @@ elif $have_f2c; then
     CONFLIB_ARG="-L. -lconflib"
   fi
   rm -f conftest*
   case "$canonical_host_type" in
     *-*-msdosmsvc)
       CONFLIB_ARG="-MD"
       ;;
   esac
-  AC_CHECK_LIB(f2c, f_open, FLIBS=-lf2c, FLIBS=, $CONFLIB_ARG)
+  XLIBS="$LIBS"
+  LIBS="-lf2c $LIBS $CONFLIB_ARG"
+  AC_LINK_IFELSE([AC_LANG_CALL([int MAIN__ () { return 1; }], [f_open])],
+                 [F2CLIBS=-lf2c], [F2CLIBS=])
+  LIBS="$XLIBS"
   rm -f $oct_conflib
 
-  if test -z "$FLIBS"; then
-    AC_CHECK_LIB(F77, d_sin, FLIBS=-lF77, FLIBS=)
-    if test -n "$FLIBS"; then
-      AC_CHECK_LIB(I77, f_rew, FLIBS="$FLIBS -lI77", FLIBS=, -lF77)
+  if test -z "$F2CLIBS"; then
+    AC_CHECK_LIB(F77, d_sin, F2CLIBS=-lF77, FLIBS=)
+    if test -n "$F2CLIBS"; then
+      AC_CHECK_LIB(I77, f_rew, F2CLIBS="$F2CLIBS -lI77", F2CLIBS=, -lF77)
     fi
   fi
 
-  if test -z "$FLIBS"; then
+  if test -z "$F2CLIBS"; then
     warn_f2c_no_lib="I found f2c but not libf2c.a, or libF77.a and libI77.a"
     AC_MSG_WARN($warn_f2c_no_lib)
   fi
   f77_rules_frag=Makefrag.f77
   cat << \EOF > $f77_rules_frag
 
 %.c : %.f
 	$(F2C) $(F2CFLAGS) < $< > $(@F)
@@ -852,53 +856,53 @@ ACX_BLAS([], [BLAS_DIR="blas"])
 ACX_LAPACK([BLAS_LIBS="$LAPACK_LIBS $BLAS_LIBS"], [LAPACK_DIR="lapack"])
 AC_SUBST(BLAS_DIR)
 AC_SUBST(LAPACK_DIR)
 
 dnl I see no clean way to do the following check with autoconf macros,
 dnl hence the big mess.
 
 AC_MSG_CHECKING([BLAS library calling convention compatibility])
-cat << EOF > conftest.$ac_fc_srcext
+cat << EOF > conftest.f
       program foo
-      double complex zdotu, tmp, zx(10), zy(10), retval
+      double complex zdotu, zx(10), zy(10), retval
       integer n, incx, incy
       n = 10
       incx = 1
       incy = 1
       do 10 i = 1, n
-        zx(i) = dcmplx (i, 0);
-        zy(i) = dcmplx (0, i);
+        zx(i) = dcmplx (i, 0)
+        zy(i) = dcmplx (0, i)
    10 continue
       retval = zdotu (n, zx, incx, zy, incy)
       if (retval .eq. dcmplx (0, 385)) then
         print *, 'succeeded'
       else
         print *, 'failed'
         print *, retval
       endif
       end
 EOF
 XLIBS="$LIBS"
-LIBS="$BLAS_LIBS $LIBS $FLIBS"
 if $have_fortran_compiler; then
+  LIBS="$BLAS_LIBS $FLIBS $LIBS"
   AC_LANG_PUSH(Fortran 77)
-  $ac_compile
-  $ac_link
+  (eval "$ac_compile"; eval "$ac_link") 2>conftest.er1
   AC_LANG_POP(Fortran 77)
 elif $have_f2c; then
+  LIBS="$BLAS_LIBS $F2CLIBS $LIBS"
   AC_LANG_PUSH(C)
-  $(F2C) $(F2CFLAGS) < conftest.$ac_fc_srcext > conftest.$ac_ext
-  $ac_compile
-  $ac_link
+  octave_xlate="$F2C $F2CFLAGS < conftest.f > conftest.c"
+  (eval "$octave_xlate")
+  (eval "$ac_compile"; eval "$ac_link") 2>conftest.er1
   AC_LANG_POP(C)
 fi
 LIBS="$XLIBS"
-case "`conftest.$ac_exeext`" in
-  *success*)
+case "`./conftest$ac_exeext`" in
+  *succeeded*)
   AC_MSG_RESULT(yes)
 ;;
   *)
   AC_MSG_RESULT(no)
   AC_MSG_WARN([Your BLAS library was apparently compiled with a Fortran])
   AC_MSG_WARN([compiler that uses a different calling convention from])
   AC_MSG_WARN([the one used by the selected compiler, $F77.])
   AC_MSG_ERROR([You must correct this problem before building Octave.])
@@ -2047,16 +2051,22 @@ AC_CONFIG_COMMANDS([default-1],[[chmod +
 ### Print a summary so that important information isn't missed.
 
 if test -z "$F77"; then
   FORT="$F2C $F2CFLAGS"
 else
   FORT="$F77 $FFLAGS"
 fi
 
+if $have_fortran_compiler; then
+  true
+elif $have_f2c; then
+  FLIBS="$F2CLIBS"
+fi
+
 AC_MSG_NOTICE([
 
 Octave is now configured for $canonical_host_type
 
   Source directory:     $srcdir
   Installation prefix:  $prefix
   C compiler:           $CC $XTRA_CFLAGS $WARN_CFLAGS $CFLAGS
   C++ compiler:         $CXX $XTRA_CXXFLAGS $WARN_CXXFLAGS $CXXFLAGS
diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,8 +1,13 @@
+2007-10-23  Peter A. Gustafson  <petegus@umich.edu>
+
+	* plot/legend.m: Also extract location string from varargin (lost
+	when 2007-10-08 patch was applied).
+
 2007-10-23  David Bateman  <dbateman@free.fr>
 
 	* plot/xlim.m, plot/ylim.m, plot/zlim.m, plot/__axes_limits__.m,
 	miscellaneous/what.m: New functions
 	* plot/Makefile.in, miscellaneous/Makefile.in (SOURCES): Add new
 	functions.
 
 2007-10-22  David Bateman  <dbateman@free.fr>
diff --git a/scripts/plot/legend.m b/scripts/plot/legend.m
--- a/scripts/plot/legend.m
+++ b/scripts/plot/legend.m
@@ -93,16 +93,17 @@ function legend (varargin)
       else
 	error ("legend: invalid position specified");
       endif
     endif
   endif
   
   if (nargs > 1)
     pos = varargin{nargs-1};
+    str = varargin{nargs};
     if (strcmpi (pos, "location")  && ischar (str))
       set (ca, "keypos", str);
       nargs -= 2;
     endif
   endif
 
   kids = get (ca, "children");
   nkids = numel (kids);
