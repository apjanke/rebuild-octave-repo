# HG changeset patch
# User jwe
# Date 942682626 0
#      Mon Nov 15 16:17:06 1999 +0000
# Node ID 8623649c967c4d7c320e644ca92cbd424f01de31
# Parent  729ad2b6a052da83227bf42474ea1484811e6eae
[project @ 1999-11-15 16:17:01 by jwe]

diff --git a/ChangeLog b/ChangeLog
--- a/ChangeLog
+++ b/ChangeLog
@@ -1,8 +1,13 @@
+1999-11-15  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* configure.in (XTRA_CXXFLAGS, XTRA_CFLAGS): Use -mminimal-toc on
+	AIX systems.
+
 1999-10-26  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* emacs/README: New file.
 	* emacs/Makefile.in (DISTFILES, BINDISTFILES): Add it to the lists.
 
 	* emacs/Makefile.in: Don't distribute .elc files.
 
 1999-10-21  John W. Eaton  <jwe@bevo.che.wisc.edu>
diff --git a/configure.in b/configure.in
--- a/configure.in
+++ b/configure.in
@@ -16,17 +16,17 @@ dnl Copyright (C) 1996, 1997 John W. Eat
 ### FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
 ### for more details.
 ### 
 ### You should have received a copy of the GNU General Public License
 ### along with Octave; see the file COPYING.  If not, write to the Free
 ### Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ### 02111-1307, USA. 
 
-AC_REVISION($Revision: 1.319 $)
+AC_REVISION($Revision: 1.320 $)
 AC_PREREQ(2.9)
 AC_INIT(src/octave.cc)
 AC_CONFIG_HEADER(config.h)
 
 AC_DEFINE(OCTAVE_SOURCE, 1)
 
 OCTAVE_HOST_TYPE
 
@@ -251,21 +251,21 @@ changequote([,])dnl
       AC_MSG_RESULT([adding -mieee-with-inexact to XTRA_CFLAGS])])
 
     OCTAVE_CXX_FLAG(-mieee-with-inexact, [
       ieee_fp_flag=-mieee-with-inexact
       XTRA_CXXFLAGS="$XTRA_CXXFLAGS -mieee-with-inexact"
       AC_MSG_RESULT([adding -mieee-with-inexact to XTRA_CXXFLAGS])])
   ;;
   *ibm-aix4*)
-    OCTAVE_CC_FLAG(-mno-fp-in-toc, [
-      XTRA_CFLAGS="$XTRA_CFLAGS -mno-fp-in-toc"])
+    OCTAVE_CC_FLAG(-mminimal-toc, [
+      XTRA_CFLAGS="$XTRA_CFLAGS -mminimal-toc"])
 
-    OCTAVE_CXX_FLAG(-mno-fp-in-toc, [
-      XTRA_CXXFLAGS="$XTRA_CXXFLAGS -mno-fp-in-toc"])
+    OCTAVE_CXX_FLAG(-mminimal-toc, [
+      XTRA_CXXFLAGS="$XTRA_CXXFLAGS -mminimal-toc"])
   ;;
 esac
 
 ### Octave doesn't use run-time type identification or exceptions yet,
 ### so disable them for somewhat faster and smaller code.
 
 OCTAVE_CXX_FLAG(-fno-rtti, [
   XTRA_CXXFLAGS="$XTRA_CXXFLAGS -fno-rtti"
diff --git a/src/Makefile.in b/src/Makefile.in
--- a/src/Makefile.in
+++ b/src/Makefile.in
@@ -68,29 +68,30 @@ ifeq ($(OCTAVE_LITE), true)
   endif
 else
   DLD_STATIC_OBJ := $(DLD_OBJ)
 endif
 
 OV_INCLUDES := ov-re-mat.h ov-cx-mat.h ov-ch-mat.h ov-list.h \
 	ov-struct.h ov-scalar.h ov-range.h ov-complex.h ov-va-args.h \
 	ov-colon.h ov-base.h ov-base-mat.h ov-base-scalar.h \
-	ov-str-mat.h ov-bool-mat.h ov-bool.h ov-file.h ov.h \
+	ov-str-mat.h ov-bool-mat.h ov-bool.h ov-file.h ov-cell.h ov.h \
 	ov-fcn.h ov-builtin.h ov-dld-fcn.h ov-mapper.h ov-usr-fcn.h \
 	ov-typeinfo.h
 
 PT_INCLUDES := pt.h pt-all.h pt-arg-list.h pt-assign.h pt-binop.h \
-	pt-check.h pt-cmd.h pt-colon.h pt-const.h pt-decl.h \
+	pt-cell.h pt-check.h pt-cmd.h pt-colon.h pt-const.h pt-decl.h \
 	pt-except.h pt-exp.h pt-id.h pt-idx.h pt-indir.h \
 	pt-jump.h pt-loop.h pt-mat.h pt-misc.h pt-plot.h \
 	pt-pr-code.h pt-select.h pt-stmt.h pt-unop.h pt-walk.h
 
-INCLUDES := BaseSLList.h DLList.h Map.h Pix.h SLList.h SLStack.h Stack.h \
-	defun-dld.h defun-int.h defun.h dirfns.h dynamic-ld.h error.h \
-	file-io.h fn-cache.h gripes.h help.h input.h lex.h load-save.h \
+INCLUDES := BaseSLList.h Cell.h DLList.h Map.h Pix.h SLList.h \
+	SLStack.h Stack.h defun-dld.h defun-int.h defun.h \
+	dirfns.h dynamic-ld.h error.h file-io.h fn-cache.h \
+	gripes.h help.h input.h lex.h load-save.h \
 	oct-fstrm.h oct-hist.h oct-iostrm.h oct-map.h oct-obj.h \
 	oct-prcstrm.h oct-procbuf.h oct-stdstrm.h oct-stream.h \
 	oct-strstrm.h oct-lvalue.h oct.h ops.h pager.h parse.h \
 	pr-output.h procstream.h sighandlers.h symtab.h sysdep.h \
 	token.h toplev.h unwind-prot.h utils.h \
 	variables.h version.h xdiv.h xpow.h $(OV_INCLUDES) $(PT_INCLUDES)
 
 TI_XSRC := Array-oc.cc Array-os.cc Array-sym.cc Array-tc.cc Map-fnc.cc \
@@ -109,37 +110,37 @@ OP_XSRC := op-b-b.cc op-bm-bm.cc op-chm.
 	op-m-s.cc op-range.cc op-s-cm.cc op-s-cs.cc op-s-m.cc \
 	op-s-s.cc op-str-str.cc
 
 OP_SRC := $(addprefix OPERATORS/, $(OP_XSRC))
 
 OV_SRC := ov-base.cc ov-base-mat.cc ov-base-scalar.cc ov-ch-mat.cc \
 	ov-list.cc ov-re-mat.cc ov-cx-mat.cc ov-range.cc ov-scalar.cc \
 	ov-complex.cc ov-str-mat.cc ov-struct.cc ov-va-args.cc \
-	ov-colon.cc ov-bool-mat.cc ov-bool.cc ov-file.cc ov.cc ov-fcn.cc \
-	ov-builtin.cc ov-dld-fcn.cc ov-mapper.cc ov-usr-fcn.cc \
-	ov-typeinfo.cc
+	ov-colon.cc ov-bool-mat.cc ov-bool.cc ov-file.cc ov-cell.cc \
+	ov.cc ov-fcn.cc ov-builtin.cc ov-dld-fcn.cc ov-mapper.cc \
+	ov-usr-fcn.cc ov-typeinfo.cc
 
-PT_SRC := pt.cc pt-arg-list.cc pt-assign.cc pt-binop.cc pt-check.cc \
-	pt-cmd.cc pt-colon.cc pt-const.cc pt-decl.cc pt-except.cc \
-	pt-exp.cc pt-id.cc pt-idx.cc pt-indir.cc pt-jump.cc \
+PT_SRC := pt.cc pt-arg-list.cc pt-assign.cc pt-binop.cc pt-cell.cc \
+	pt-check.cc pt-cmd.cc pt-colon.cc pt-const.cc pt-decl.cc \
+	pt-except.cc pt-exp.cc pt-id.cc pt-idx.cc pt-indir.cc pt-jump.cc \
 	pt-loop.cc pt-mat.cc pt-misc.cc pt-plot.cc pt-pr-code.cc \
 	pt-select.cc pt-stmt.cc pt-unop.cc
 
-DIST_SRC := BaseSLList.cc DLList.cc Map.cc SLList.cc SLStack.cc Stack.cc \
-	cutils.c data.cc defaults.cc defun.cc dirfns.cc dynamic-ld.cc \
-	error.cc file-io.cc fn-cache.cc gripes.cc help.cc input.cc \
-	lex.l load-save.cc mappers.cc matherr.c oct-fstrm.cc \
-	oct-hist.cc oct-iostrm.cc oct-map.cc oct-obj.cc oct-prcstrm.cc \
-	oct-procbuf.cc oct-stdstrm.cc oct-stream.cc oct-strstrm.cc \
-	oct-lvalue.cc pager.cc parse.y pr-output.cc procstream.cc \
-	sighandlers.cc strcasecmp.c strncase.c strfns.cc \
-	symtab.cc syscalls.cc sysdep.cc system.c token.cc \
-	toplev.cc unwind-prot.cc utils.cc variables.cc xdiv.cc \
-	xpow.cc $(OV_SRC) $(PT_SRC)
+DIST_SRC := BaseSLList.cc Cell.cc DLList.cc Map.cc SLList.cc \
+	SLStack.cc Stack.cc cutils.c data.cc defaults.cc defun.cc \
+	dirfns.cc dynamic-ld.cc error.cc file-io.cc fn-cache.cc \
+	gripes.cc help.cc input.cc lex.l load-save.cc mappers.cc \
+	matherr.c oct-fstrm.cc oct-hist.cc oct-iostrm.cc oct-map.cc \
+	oct-obj.cc oct-prcstrm.cc oct-procbuf.cc oct-stdstrm.cc \
+	oct-stream.cc oct-strstrm.cc oct-lvalue.cc pager.cc parse.y \
+	pr-output.cc procstream.cc sighandlers.cc strcasecmp.c \
+	strncase.c strfns.cc symtab.cc syscalls.cc sysdep.cc \
+	system.c token.cc toplev.cc unwind-prot.cc utils.cc \
+	variables.cc xdiv.cc xpow.cc $(OV_SRC) $(PT_SRC)
 
 SOURCES := $(DIST_SRC) $(OP_SRC) $(TI_SRC)
 
 OBJECTS_4 := $(notdir $(SOURCES))
 OBJECTS_3 := $(patsubst %.l, %.o, $(OBJECTS_4))
 OBJECTS_2 := $(patsubst %.y, %.o, $(OBJECTS_3))
 OBJECTS_1 := $(patsubst %.c, %.o, $(OBJECTS_2))
 OBJECTS := $(patsubst %.cc, %.o, $(OBJECTS_1))
diff --git a/src/TEMPLATE-INST/Array-tc.cc b/src/TEMPLATE-INST/Array-tc.cc
--- a/src/TEMPLATE-INST/Array-tc.cc
+++ b/src/TEMPLATE-INST/Array-tc.cc
@@ -39,14 +39,15 @@ extern template class Array<double>;
 extern template class Array2<double>;
 extern template class DiagArray2<double>;
 
 extern template class Array<Complex>;
 extern template class Array2<Complex>;
 extern template class DiagArray2<Complex>;
 
 template class Array<octave_value>;
+template class Array2<octave_value>;
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
diff --git a/src/lex.h b/src/lex.h
--- a/src/lex.h
+++ b/src/lex.h
@@ -117,18 +117,18 @@ class lexical_feedback
 public:
 
   lexical_feedback (void) { init (); }
 
   ~lexical_feedback (void) { }
 
   void init (void);
 
-  // Brace level count.
-  int braceflag;
+  // Square bracket level count.
+  int bracketflag;
 
   // TRUE means we're in the middle of defining a loop.
   int looping;
 
   // TRUE means we think we are looking at the beginning of a
   // function definition.
   bool beginning_of_function;
 
diff --git a/src/lex.l b/src/lex.l
--- a/src/lex.l
+++ b/src/lex.l
@@ -81,46 +81,50 @@ SLStack <token*> token_stack;
 // Did eat_whitespace() eat a space or tab, or a newline, or both?
 
 typedef int yum_yum;
 
 const yum_yum ATE_NOTHING = 0;
 const yum_yum ATE_SPACE_OR_TAB = 1;
 const yum_yum ATE_NEWLINE = 2;
 
-// Is the closest nesting level a square brace or a paren?
+// Is the closest nesting level a square bracket, squiggly brace or a paren?
 
-class brace_paren_nesting_level : public SLStack <int>
+class bracket_brace_paren_nesting_level : public SLStack <int>
 {
 public:
 
-  brace_paren_nesting_level (void) : SLStack<int> () { }
+  bracket_brace_paren_nesting_level (void) : SLStack<int> () { }
 
-  ~brace_paren_nesting_level (void) { }
+  ~bracket_brace_paren_nesting_level (void) { }
+
+  void bracket (void) { push (BRACKET); }
+  bool is_bracket (void) { return ! empty () && top () == BRACKET; }
 
   void brace (void) { push (BRACE); }
   bool is_brace (void) { return ! empty () && top () == BRACE; }
 
   void paren (void) { push (PAREN); }
   bool is_paren (void) { return ! empty () && top () == PAREN; }
 
   bool none (void) { return empty (); }
 
   void remove (void) { if (! empty ()) SLStack<int>::pop (); }
 
 private:
 
-  enum { BRACE = 1, PAREN = 2 };
+  enum { BRACKET = 1, BRACE = 2, PAREN = 3 };
 
-  brace_paren_nesting_level (const brace_paren_nesting_level&);
+  bracket_brace_paren_nesting_level (const bracket_brace_paren_nesting_level&);
 
-  brace_paren_nesting_level& operator = (const brace_paren_nesting_level&);
+  bracket_brace_paren_nesting_level&
+  operator = (const bracket_brace_paren_nesting_level&);
 };
 
-static brace_paren_nesting_level nesting_level;
+static bracket_brace_paren_nesting_level nesting_level;
 
 // Should whitespace in a literal matrix list be automatically
 // converted to commas and semicolons?
 //
 //   user specifies   value of var
 //   --------------   ------------
 //   "ignore"              2
 //   "traditional"         1
@@ -171,17 +175,17 @@ static symbol_record *lookup_identifier 
 static void grab_help_text (void);
 static bool match_any (char c, const char *s);
 static bool next_token_is_sep_op (void);
 static bool next_token_is_bin_op (bool spc_prev);
 static bool next_token_is_postfix_unary_op (bool spc_prev);
 static string strip_trailing_whitespace (char *s);
 static void handle_number (void);
 static int handle_string (char delim, int text_style = 0);
-static int handle_close_brace (int spc_gobbled);
+static int handle_close_bracket (int spc_gobbled);
 static int handle_identifier (const string& tok, int spc_gobbled);
 static bool have_continuation (bool trailing_comments_ok = true);
 static bool have_ellipsis_continuation (bool trailing_comments_ok = true);
 static yum_yum eat_whitespace (void);
 static yum_yum eat_continuation (void);
 
 %}
 
@@ -257,17 +261,17 @@ NUMBER	(({D}+\.?{D}*{EXPON}?)|(\.{D}+{EX
 // after seeing a ']' character...
 %}
 
 <MATRIX>{SNLCMT}*\]{S}* {
     fixup_column_count (yytext);
     int c = yytext[yyleng-1];
     int cont_is_spc = eat_continuation ();
     int spc_gobbled = (cont_is_spc || c == ' ' || c == '\t');
-    return handle_close_brace (spc_gobbled);
+    return handle_close_bracket (spc_gobbled);
   }
 
 %{
 // Commas are element separators in matrix constants.  If we don't
 // check for continuations here we can end up inserting too many
 // commas.
 %}
 
@@ -294,17 +298,17 @@ NUMBER	(({D}+\.?{D}*{EXPON}?)|(\.{D}+{EX
     current_input_column += yyleng;
     if (Vwhitespace_in_literal_matrix != 2)
       {
 	int tmp = eat_continuation ();
 	int bin_op = next_token_is_bin_op (true);
 	int postfix_un_op = next_token_is_postfix_unary_op (true);
 
 	if (! (postfix_un_op || bin_op)
-	    && nesting_level.is_brace ()
+	    && nesting_level.is_bracket ()
 	    && lexer_flags.convert_spaces_to_comma)
 	  {
 	    lexer_flags.quote_is_transpose = false;
 	    lexer_flags.cant_be_identifier = false;
 	    lexer_flags.convert_spaces_to_comma = true;
 	    if ((tmp & ATE_NEWLINE) == ATE_NEWLINE)
 	      unput (';');
 	    return (',');
@@ -341,46 +345,46 @@ NUMBER	(({D}+\.?{D}*{EXPON}?)|(\.{D}+{EX
       {
 	lexer_flags.quote_is_transpose = false;
 	lexer_flags.cant_be_identifier = false;
 	lexer_flags.convert_spaces_to_comma = true;
 
 	if (nesting_level.none ())
 	  return LEXICAL_ERROR;
 
-	if (nesting_level.is_brace ())
+	if (nesting_level.is_bracket ())
 	  return ';';
       }
   }
 
 %{
-// Open and close brace are handled differently if we are in the range
+// Open and close bracket are handled differently if we are in the range
 // part of a plot command.
 //
 %}
 
 \[{S}* {
-    nesting_level.brace ();
+    nesting_level.bracket ();
 
     current_input_column += yyleng;
     lexer_flags.quote_is_transpose = false;
     lexer_flags.cant_be_identifier = false;
     lexer_flags.convert_spaces_to_comma = true;
 
     promptflag--;
     eat_whitespace ();
 
     if (lexer_flags.plotting && ! lexer_flags.past_plot_range)
       {
 	lexer_flags.in_plot_range = true;
 	return OPEN_BRACE;
       }
     else
       {
-	lexer_flags.braceflag++;
+	lexer_flags.bracketflag++;
 	BEGIN MATRIX;
 	return '[';
       }
   }
 
 \] {
     nesting_level.remove ();
 
@@ -472,17 +476,17 @@ NUMBER	(({D}+\.?{D}*{EXPON}?)|(\.{D}+{EX
     current_input_column = 1;
     lexer_flags.quote_is_transpose = false;
     lexer_flags.cant_be_identifier = false;
     lexer_flags.convert_spaces_to_comma = true;
 
     if (nesting_level.none ())
       return '\n';
 
-    if (nesting_level.is_brace ())
+    if (nesting_level.is_bracket ())
       return LEXICAL_ERROR;
   }
 
 %{
 // Single quote can either be the beginning of a string or a transpose
 // operator. 
 %}
 
@@ -543,17 +547,17 @@ NUMBER	(({D}+\.?{D}*{EXPON}?)|(\.{D}+{EX
 
     current_input_column = 1;
     lexer_flags.quote_is_transpose = false;
     lexer_flags.cant_be_identifier = false;
     lexer_flags.convert_spaces_to_comma = true;
 
     if (nesting_level.none ())
       return '\n';
-    else if (nesting_level.is_brace ())
+    else if (nesting_level.is_bracket ())
       return ';';
   }
 
 %{
 // Other operators.
 %}
 
 ".+"	{ BIN_OP_RETURN (EPLUS, false); }
@@ -612,17 +616,17 @@ NUMBER	(({D}+\.?{D}*{EXPON}?)|(\.{D}+{EX
   }
 
 ")" {
     nesting_level.remove ();
 
     current_input_column++;
     lexer_flags.cant_be_identifier = true;
     lexer_flags.quote_is_transpose = true;
-    lexer_flags.convert_spaces_to_comma = nesting_level.is_brace ();
+    lexer_flags.convert_spaces_to_comma = nesting_level.is_bracket ();
     do_comma_insert_check ();
     return ')';
   }
 
 "." {
     TOK_RETURN ('.');
   }
 
@@ -636,16 +640,34 @@ NUMBER	(({D}+\.?{D}*{EXPON}?)|(\.{D}+{EX
 ".*="	{ BIN_OP_RETURN (EMUL_EQ, false); }
 "./="	{ BIN_OP_RETURN (EDIV_EQ, false); }
 ".\\="	{ BIN_OP_RETURN (ELEFTDIV_EQ, false); }
 "&="	{ BIN_OP_RETURN (AND_EQ, false); }
 "|="	{ BIN_OP_RETURN (OR_EQ, false); }
 "<<="	{ BIN_OP_RETURN (LSHIFT_EQ, false); }
 ">>="	{ BIN_OP_RETURN (RSHIFT_EQ, false); }
 
+"{" {
+    nesting_level.brace ();
+    promptflag--;
+    TOK_RETURN ('{');
+  }
+
+"}" {
+    nesting_level.remove ();
+
+    current_input_column++;
+    lexer_flags.cant_be_identifier = true;
+    lexer_flags.quote_is_transpose = true;
+    lexer_flags.convert_spaces_to_comma = nesting_level.is_bracket ();
+    do_comma_insert_check (); // Is this really necessary?
+
+    return '}';
+  }
+
 %{
 // Unrecognized input is a lexical error.
 %}
 
 . {
     current_input_column++;
 
     error ("invalid character `%s' near line %d, column %d",
@@ -669,34 +691,34 @@ do_comma_insert_check (void)
 
   int c = yyinput ();
 
   unput (c);
 
   if (spc_gobbled)
     unput (' ');
 
-  lexer_flags.do_comma_insert = (lexer_flags.braceflag && c == '[');
+  lexer_flags.do_comma_insert = (lexer_flags.bracketflag && c == '[');
 }
 
 // Fix things up for errors or interrupts.  The parser is never called
 // recursively, so it is always safe to reinitialize its state before
 // doing any parsing.
 
 void
 reset_parser (void)
 {
   // Start off on the right foot.
   BEGIN 0;
   error_state = 0;
 
   // We do want a prompt by default.
   promptflag = 1;
 
-  // Error may have occurred inside some parentheses or braces.
+  // Error may have occurred inside some brackets, braces, or parentheses.
   nesting_level.clear ();
 
   // Clear out the stack of token info used to track line and column
   // numbers.
   while (! token_stack.empty ())
     delete token_stack.pop ();
 
   // Can be reset by defining a function.
@@ -1801,48 +1823,48 @@ next_token_is_assign_op (void)
     }
 
   unput (c0);
 
   return retval;
 }
 
 static int
-handle_close_brace (int spc_gobbled)
+handle_close_bracket (int spc_gobbled)
 {
   int retval = ']';
 
   if (! nesting_level.none ())
     {
       nesting_level.remove ();
-      lexer_flags.braceflag--;
+      lexer_flags.bracketflag--;
     }
 
-  if (lexer_flags.braceflag == 0)
+  if (lexer_flags.bracketflag == 0)
     BEGIN 0;
 
   if (next_token_is_assign_op () && ! lexer_flags.looking_at_return_list)
     {
       retval = CLOSE_BRACE;
     }
   else
     {
       int c1 = yyinput ();
       unput (c1);
 
-      if (lexer_flags.braceflag && Vwhitespace_in_literal_matrix != 2)
+      if (lexer_flags.bracketflag && Vwhitespace_in_literal_matrix != 2)
 	{
 	  int bin_op = next_token_is_bin_op (spc_gobbled);
 
 	  int postfix_un_op = next_token_is_postfix_unary_op (spc_gobbled);
 
 	  int sep_op = next_token_is_sep_op ();
 
 	  if (! (postfix_un_op || bin_op || sep_op)
-	      && nesting_level.is_brace ()
+	      && nesting_level.is_bracket ()
 	      && lexer_flags.convert_spaces_to_comma)
 	    {
 	      unput (',');
 	      return ']';
 	    }
 	}
     }
 
@@ -1851,17 +1873,17 @@ handle_close_brace (int spc_gobbled)
   lexer_flags.convert_spaces_to_comma = true;
 
   return retval;
 }
 
 static void
 maybe_unput_comma (int spc_gobbled)
 {
-  if (Vwhitespace_in_literal_matrix != 2 && nesting_level.is_brace ())
+  if (Vwhitespace_in_literal_matrix != 2 && nesting_level.is_bracket ())
     {
       int bin_op = next_token_is_bin_op (spc_gobbled);
 
       int postfix_un_op = next_token_is_postfix_unary_op (spc_gobbled);
 
       int c1 = yyinput ();
       int c2 = yyinput ();
 
@@ -1945,17 +1967,17 @@ handle_identifier (const string& tok, in
       // Yes, we really do need both of these plot_range variables.
       // One is used to mark when we are past all possiblity of a plot
       // range, the other is used to mark when we are actually between
       // the square brackets that surround the range.
 
       if (! lexer_flags.in_plot_range)
 	lexer_flags.past_plot_range = true;
 
-      // Option keywords can't appear in parentheses or braces.
+      // Option keywords can't appear in brackets, braces, or parentheses.
 
       int plot_option_kw = 0;
 
       if (nesting_level.none ())
 	plot_option_kw = is_plot_keyword (tok);
 
       if (lexer_flags.cant_be_identifier && plot_option_kw)
 	TOK_RETURN (plot_option_kw);
@@ -2085,17 +2107,17 @@ check_for_garbage_after_fcn_def (void)
     }
   unput ('\n');
 }
 
 void
 lexical_feedback::init (void)
 {
   // Not initially defining a matrix list.
-  braceflag = 0;
+  bracketflag = 0;
 
   // Not initially inside a loop or if statement.
   looping = 0;
 
   // Not initially defining a function.
   beginning_of_function = false;
   defining_func = false;
   parsed_function_name = false;
diff --git a/src/ov-base.cc b/src/ov-base.cc
--- a/src/ov-base.cc
+++ b/src/ov-base.cc
@@ -27,16 +27,17 @@ Software Foundation, 59 Temple Place - S
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
 #include <iostream.h>
 
 #include "lo-ieee.h"
 
+#include "Cell.h"
 #include "gripes.h"
 #include "oct-map.h"
 #include "oct-obj.h"
 #include "oct-lvalue.h"
 #include "oct-stream.h"
 #include "ops.h"
 #include "ov-base.h"
 #include "ov-scalar.h"
@@ -191,16 +192,24 @@ octave_base_value::nint_value (bool frc_
 double
 octave_base_value::double_value (bool) const
 {
   double retval = octave_NaN;
   gripe_wrong_type_arg ("octave_base_value::double_value ()", type_name ());
   return retval;
 }
 
+Cell
+octave_base_value::cell_value (bool) const
+{
+  Cell retval;
+  gripe_wrong_type_arg ("octave_base_value::cell_value()", type_name ());
+  return retval;
+}
+
 Matrix
 octave_base_value::matrix_value (bool) const
 {
   Matrix retval;
   gripe_wrong_type_arg ("octave_base_value::matrix_value()", type_name ());
   return retval;
 }
 
diff --git a/src/ov-base.h b/src/ov-base.h
--- a/src/ov-base.h
+++ b/src/ov-base.h
@@ -35,16 +35,17 @@ class ostream;
 
 #include "mx-base.h"
 #include "str-vec.h"
 
 #include "error.h"
 #include "ov.h"
 #include "ov-typeinfo.h"
 
+class Cell;
 class Octave_map;
 class octave_value_list;
 
 class tree_walker;
 
 // A base value type, so that derived types only have to redefine what
 // they need (if they are derived from octave_base_value instead of
 // octave_value).
@@ -87,16 +88,18 @@ public:
   int rows (void) const { return -1; }
 
   int columns (void) const { return -1; }
 
   int length (void) const { return -1; }
 
   bool is_defined (void) const { return false; }
 
+  bool is_cell (void) const { return false; }
+
   bool is_real_scalar (void) const { return false; }
 
   bool is_real_matrix (void) const { return false; }
 
   bool is_complex_scalar (void) const { return false; }
 
   bool is_complex_matrix (void) const { return false; }
 
@@ -158,16 +161,18 @@ public:
 
   int nint_value (bool = false) const;
 
   double double_value (bool = false) const;
 
   double scalar_value (bool frc_str_conv = false) const
     { return double_value (frc_str_conv); }
 
+  Cell cell_value (bool = false) const;
+
   Matrix matrix_value (bool = false) const;
 
   Complex complex_value (bool = false) const;
 
   ComplexMatrix complex_matrix_value (bool = false) const;
 
   charMatrix char_matrix_value (bool = false) const;
 
diff --git a/src/ov.cc b/src/ov.cc
--- a/src/ov.cc
+++ b/src/ov.cc
@@ -32,16 +32,17 @@ Software Foundation, 59 Temple Place - S
 #include "str-vec.h"
 
 #include "oct-obj.h"
 #include "oct-lvalue.h"
 #include "ov.h"
 #include "ov-base.h"
 #include "ov-bool.h"
 #include "ov-bool-mat.h"
+#include "ov-cell.h"
 #include "ov-scalar.h"
 #include "ov-re-mat.h"
 #include "ov-complex.h"
 #include "ov-cx-mat.h"
 #include "ov-ch-mat.h"
 #include "ov-str-mat.h"
 #include "ov-range.h"
 #include "ov-struct.h"
@@ -329,16 +330,23 @@ octave_value::octave_value (void)
 }
 
 octave_value::octave_value (double d)
   : rep (new octave_scalar (d))
 {
   rep->count = 1;
 }
 
+octave_value::octave_value (const Cell& c)
+  : rep (new octave_cell (c))
+{
+  rep->count = 1;
+  maybe_mutate ();
+}
+
 octave_value::octave_value (const Matrix& m)
   : rep (new octave_matrix (m))
 {
   rep->count = 1;
   maybe_mutate ();
 }
 
 octave_value::octave_value (const DiagMatrix& d)
@@ -704,16 +712,22 @@ octave_value::struct_elt_ref (const stri
 octave_lvalue
 octave_value::struct_elt_ref (octave_value *, const string&)
 {
   panic_impossible ();
 
   return octave_lvalue ();
 }
 
+Cell
+octave_value::cell_value (void) const
+{
+  return rep->cell_value ();
+}
+
 Octave_map
 octave_value::map_value (void) const
 {
   return rep->map_value ();
 }
 
 octave_stream
 octave_value::stream_value (void) const
diff --git a/src/ov.h b/src/ov.h
--- a/src/ov.h
+++ b/src/ov.h
@@ -34,16 +34,17 @@ Software Foundation, 59 Temple Place - S
 class ostream;
 
 #include "Range.h"
 #include "idx-vector.h"
 #include "mx-base.h"
 #include "oct-alloc.h"
 #include "str-vec.h"
 
+class Cell;
 class Octave_map;
 class octave_stream;
 class octave_function;
 class octave_value_list;
 class octave_lvalue;
 
 // Constants.
 
@@ -147,16 +148,17 @@ public:
 
   static string assign_op_as_string (assign_op);
 
   enum magic_colon { magic_colon_t };
   enum all_va_args { all_va_args_t };
 
   octave_value (void);
   octave_value (double d);
+  octave_value (const Cell& m);
   octave_value (const Matrix& m);
   octave_value (const DiagMatrix& d);
   octave_value (const RowVector& v, int pcv = -1);
   octave_value (const ColumnVector& v, int pcv = -1);
   octave_value (const Complex& C);
   octave_value (const ComplexMatrix& m);
   octave_value (const ComplexDiagMatrix& d);
   octave_value (const ComplexRowVector& v, int pcv = -1);
@@ -284,16 +286,19 @@ public:
   // ! is_defined().
 
   virtual bool is_defined (void) const
     { return rep->is_defined (); }
 
   bool is_undefined (void) const
     { return ! is_defined (); }
 
+  virtual bool is_cell (void) const
+    { return rep->is_cell (); }
+
   virtual bool is_real_scalar (void) const
     { return rep->is_real_scalar (); }
 
   virtual bool is_real_matrix (void) const
     { return rep->is_real_matrix (); }
 
   virtual bool is_complex_scalar (void) const
     { return rep->is_complex_scalar (); }
@@ -397,16 +402,18 @@ public:
     { return rep->nint_value (frc_str_conv); }
 
   virtual double double_value (bool frc_str_conv = false) const
     { return rep->double_value (frc_str_conv); }
 
   virtual double scalar_value (bool frc_str_conv = false) const
     { return rep->scalar_value (frc_str_conv); }
 
+  virtual Cell cell_value (void) const;
+
   virtual Matrix matrix_value (bool frc_str_conv = false) const
     { return rep->matrix_value (frc_str_conv); }
 
   virtual Complex complex_value (bool frc_str_conv = false) const
     { return rep->complex_value (frc_str_conv); }
 
   virtual ComplexMatrix complex_matrix_value (bool frc_str_conv = false) const
     { return rep->complex_matrix_value (frc_str_conv); }
diff --git a/src/parse.y b/src/parse.y
--- a/src/parse.y
+++ b/src/parse.y
@@ -261,16 +261,20 @@ make_indirect_ref (tree_expression *expr
 // Make a declaration command.
 static tree_decl_command *
 make_decl_command (int tok, token *tok_val, tree_decl_init_list *lst);
 
 // Finish building a matrix list.
 static tree_expression *
 finish_matrix (tree_matrix *m);
 
+// Finish building a cell list.
+static tree_expression *
+finish_cell (tree_cell *c);
+
 // Maybe print a warning.  Duh.
 static void
 maybe_warn_missing_semi (tree_statement_list *);
 
 // Set the print flag for a statement based on the separator type.
 static void
 set_stmt_print_flag (tree_statement_list *, char, bool);
 
@@ -294,16 +298,17 @@ set_stmt_print_flag (tree_statement_list
 {
   // The type of the basic tokens returned by the lexer.
   token *tok_val;
 
   // Types for the nonterminals we generate.
   char sep_type;
   tree *tree_type;
   tree_matrix *tree_matrix_type;
+  tree_cell *tree_cell_type;
   tree_expression *tree_expression_type;
   tree_constant *tree_constant_type;
   tree_identifier *tree_identifier_type;
   tree_index_expression *tree_index_expression_type;
   tree_colon_expression *tree_colon_expression_type;
   tree_argument_list *tree_argument_list_type;
   tree_parameter_list *tree_parameter_list_type;
   tree_command *tree_command_type;
@@ -358,25 +363,27 @@ set_stmt_print_flag (tree_statement_list
 %token END_OF_INPUT LEXICAL_ERROR
 %token FCN ELLIPSIS ALL_VA_ARGS
 %token USING TITLE WITH AXES COLON OPEN_BRACE CLOSE_BRACE CLEAR
 
 // Nonterminals we construct.
 %type <sep_type> sep_no_nl opt_sep_no_nl sep opt_sep
 %type <tree_type> input
 %type <tree_constant_type> constant magic_colon
-%type <tree_matrix_type> rows rows1
-%type <tree_expression_type> title matrix
+%type <tree_matrix_type> matrix_rows matrix_rows1
+%type <tree_cell_type> cell_rows cell_rows1
+%type <tree_expression_type> title matrix cell
 %type <tree_expression_type> primary_expr postfix_expr prefix_expr binary_expr
 %type <tree_expression_type> simple_expr colon_expr assign_expr expression
 %type <tree_identifier_type> identifier
 %type <octave_user_function_type> function1 function2 function3
 %type <tree_index_expression_type> word_list_cmd
 %type <tree_colon_expression_type> colon_expr1
-%type <tree_argument_list_type> arg_list word_list assign_lhs matrix_row
+%type <tree_argument_list_type> arg_list word_list assign_lhs
+%type <tree_argument_list_type> cell_or_matrix_row
 %type <tree_parameter_list_type> param_list param_list1
 %type <tree_parameter_list_type> return_list return_list1
 %type <tree_command_type> command select_command loop_command
 %type <tree_command_type> jump_command except_command function
 %type <tree_if_command_type> if_command
 %type <tree_if_clause_type> elseif_clause else_clause
 %type <tree_if_command_list_type> if_cmd_list1 if_cmd_list
 %type <tree_switch_command_type> switch_command
@@ -405,17 +412,17 @@ set_stmt_print_flag (tree_statement_list
 %left EXPR_LT EXPR_LE EXPR_EQ EXPR_NE EXPR_GE EXPR_GT
 %left LSHIFT RSHIFT
 %left ':'
 %left '-' '+' EPLUS EMINUS
 %left '*' '/' LEFTDIV EMUL EDIV ELEFTDIV
 %left QUOTE TRANSPOSE
 %left UNARY PLUS_PLUS MINUS_MINUS EXPR_NOT
 %right POW EPOW
-%left '(' '.'
+%left '(' '.' '{'
 
 // Where to start.
 %start input
 
 %%
 
 // ==============================
 // Statements and statement lists
@@ -527,50 +534,76 @@ in_matrix_or_assign_lhs
 		: // empty
 		  { lexer_flags.looking_at_matrix_or_assign_lhs = true; }
 		;
 
 matrix		: '[' ']'
 		  { $$ = new tree_constant (octave_value (Matrix ())); }
 		| '[' ';' ']'
 		  { $$ = new tree_constant (octave_value (Matrix ())); }
-		| '[' in_matrix_or_assign_lhs rows ']'
+		| '[' in_matrix_or_assign_lhs matrix_rows ']'
 		  {
 		    $$ = finish_matrix ($3);
 		    lexer_flags.looking_at_matrix_or_assign_lhs = false;
 		  }
 		;
 
-rows		: rows1
+matrix_rows	: matrix_rows1
 		  { $$ = $1; }
-		| rows1 ';'	// Ignore trailing semicolon.
+		| matrix_rows1 ';'	// Ignore trailing semicolon.
 		  { $$ = $1; }
 		;
 
-rows1		: matrix_row
+matrix_rows1	: cell_or_matrix_row
 		  { $$ = new tree_matrix ($1); }
-		| rows1 ';' matrix_row
+		| matrix_rows1 ';' cell_or_matrix_row
 		  {
 		    $1->append ($3);
 		    $$ = $1;
 		  }
 		;
 
-matrix_row	: arg_list
+cell		: '{' '}'
+		  { $$ = new tree_constant (octave_value (Matrix ())); }
+		| '{' ';' '}'
+		  { $$ = new tree_constant (octave_value (Matrix ())); }
+		| '{' cell_rows '}'
+		  { $$ = finish_cell ($2); }
+		;
+
+cell_rows	: cell_rows1
+		  { $$ = $1; }
+		| cell_rows1 ';'	// Ignore trailing semicolon.
+		  { $$ = $1; }
+		;
+
+cell_rows1	: cell_or_matrix_row
+		  { $$ = new tree_cell ($1); }
+		| cell_rows1 ';' cell_or_matrix_row
+		  {
+		    $1->append ($3);
+		    $$ = $1;
+		  }
+		;
+
+cell_or_matrix_row
+		: arg_list
 		  { $$ = $1; }
 		| arg_list ','	// Ignore trailing comma.
 		  { $$ = $1; }
 		;
 
 primary_expr	: identifier
 		  { $$ = $1; }
 		| constant
 		  { $$ = $1; }
 		| matrix
 		  { $$ = $1; }
+		| cell
+		  { $$ = $1; }
 		| '(' expression ')'
 		  { $$ = $2->mark_in_parens (); }
 		;
 
 magic_colon	: ':'
 		  {
 		    octave_value tmp (octave_value::magic_colon_t);
 		    $$ = new tree_constant (tmp);
@@ -611,16 +644,18 @@ parsing_indir	: // empty
 		;
 
 postfix_expr	: primary_expr
 		  { $$ = $1; }
 		| postfix_expr '(' ')'
 		  { $$ = make_index_expression ($1, 0); }
 		| postfix_expr '(' arg_list ')'
 		  { $$ = make_index_expression ($1, $3); }
+		| postfix_expr '{' arg_list '}'
+		  { $$ = make_index_expression ($1, $3); }
 		| postfix_expr PLUS_PLUS
 		  { $$ = make_postfix_op (PLUS_PLUS, $1, $2); }
 		| postfix_expr MINUS_MINUS
 		  { $$ = make_postfix_op (MINUS_MINUS, $1, $2); }
 		| postfix_expr QUOTE
 		  { $$ = make_postfix_op (QUOTE, $1, $2); }
 		| postfix_expr TRANSPOSE
 		  { $$ = make_postfix_op (TRANSPOSE, $1, $2); }
@@ -2513,16 +2548,26 @@ finish_matrix (tree_matrix *m)
 	}
     }
 
   unwind_protect::run_frame ("finish_matrix");
 
   return retval;
 }
 
+// Finish building a cell list.
+
+static tree_expression *
+finish_cell (tree_cell *c)
+{
+  // For now, this doesn't do anything.
+
+  return c;
+}
+
 static void
 maybe_warn_missing_semi (tree_statement_list *t)
 {
   if (lexer_flags.defining_func && Vwarn_missing_semicolon)
     {
       tree_statement *tmp = t->rear();
 
       if (tmp->is_expression ())
diff --git a/src/pt-all.h b/src/pt-all.h
--- a/src/pt-all.h
+++ b/src/pt-all.h
@@ -35,16 +35,17 @@ Software Foundation, 59 Temple Place - S
 #include "pt-except.h"
 #include "pt-exp.h"
 #include "pt-id.h"
 #include "pt-idx.h"
 #include "pt-indir.h"
 #include "pt-jump.h"
 #include "pt-loop.h"
 #include "pt-mat.h"
+#include "pt-cell.h"
 #include "pt-misc.h"
 #include "pt-plot.h"
 #include "pt-pr-code.h"
 #include "pt-select.h"
 #include "pt-stmt.h"
 #include "pt-unop.h"
 #include "pt-pr-code.h"
 #include "pt-walk.h"
diff --git a/src/pt-pr-code.cc b/src/pt-pr-code.cc
--- a/src/pt-pr-code.cc
+++ b/src/pt-pr-code.cc
@@ -501,16 +501,47 @@ tree_print_code::visit_matrix (tree_matr
     }
 
   os << "]";
 
   print_parens (lst, ")");
 }
 
 void
+tree_print_code::visit_cell (tree_cell& lst)
+{
+  indent ();
+
+  print_parens (lst, "(");
+
+  os << "{";
+
+  Pix p = lst.first ();
+
+  while (p)
+    {
+      tree_argument_list *elt = lst (p);
+
+      lst.next (p);
+
+      if (elt)
+	{
+	  elt->accept (*this);
+
+	  if (p)
+	    os << "; ";
+	}
+    }
+
+  os << "}";
+
+  print_parens (lst, ")");
+}
+
+void
 tree_print_code::visit_multi_assignment (tree_multi_assignment& expr)
 {
   indent ();
 
   print_parens (expr, "(");
 
   tree_argument_list *lhs = expr.left_hand_side ();
 
diff --git a/src/pt-pr-code.h b/src/pt-pr-code.h
--- a/src/pt-pr-code.h
+++ b/src/pt-pr-code.h
@@ -81,16 +81,18 @@ public:
   void visit_if_command_list (tree_if_command_list&);
 
   void visit_index_expression (tree_index_expression&);
 
   void visit_indirect_ref (tree_indirect_ref&);
 
   void visit_matrix (tree_matrix&);
 
+  void visit_cell (tree_cell&);
+
   void visit_multi_assignment (tree_multi_assignment&);
 
   void visit_no_op_command (tree_no_op_command&);
 
   void visit_constant (tree_constant&);
 
   void visit_parameter_list (tree_parameter_list&);
 
diff --git a/src/pt-walk.h b/src/pt-walk.h
--- a/src/pt-walk.h
+++ b/src/pt-walk.h
@@ -39,16 +39,17 @@ class tree_if_clause;
 class tree_if_command;
 class tree_if_command_list;
 class tree_switch_case;
 class tree_switch_case_list;
 class tree_switch_command;
 class tree_index_expression;
 class tree_indirect_ref;
 class tree_matrix;
+class tree_cell;
 class tree_multi_assignment;
 class tree_no_op_command;
 class tree_constant;
 class tree_parameter_list;
 class tree_plot_command;
 class plot_limits;
 class plot_range;
 class tree_postfix_expression;
@@ -131,16 +132,19 @@ public:
 
   virtual void
   visit_indirect_ref (tree_indirect_ref&) = 0;
 
   virtual void
   visit_matrix (tree_matrix&) = 0;
 
   virtual void
+  visit_cell (tree_cell&) = 0;
+
+  virtual void
   visit_multi_assignment (tree_multi_assignment&) = 0;
 
   virtual void
   visit_no_op_command (tree_no_op_command&) = 0;
 
   virtual void
   visit_constant (tree_constant&) = 0;
 
