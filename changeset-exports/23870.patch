# HG changeset patch
# User Torsten <mttl@mailbox.org>
# Date 1502395073 -7200
#      Thu Aug 10 21:57:53 2017 +0200
# Node ID a5ec1fc3d9a58bc362a18cbbeb97f8e3a029529b
# Parent  b3d59e080eaef3f7b15b9c8edd57f478f31b3016
editor: use function instead several occurrences of identical code

* file-editor.cc (find_tab_widget): remove const attribute and move
  clearing the editor tab map before calling this function here;
  (request_open_file, check_conflict_save, handle_delete_debugger):
  move code from here

* file-editor.h: remove const attribute from find_tab_widget

diff --git a/libgui/src/m-editor/file-editor.cc b/libgui/src/m-editor/file-editor.cc
--- a/libgui/src/m-editor/file-editor.cc
+++ b/libgui/src/m-editor/file-editor.cc
@@ -222,18 +222,23 @@ file_editor::request_new_file (const QSt
       add_file_editor_tab (fileEditorTab, "");  // new tab with empty title
       fileEditorTab->new_file (commands);       // title is updated here
       focus ();                                 // focus editor and new tab
     }
 }
 
 // Check whether this file is already open in the editor.
 QWidget *
-file_editor::find_tab_widget (const QString& file) const
+file_editor::find_tab_widget (const QString& file)
 {
+  // Have all file editor tabs signal what their filenames are.
+  editor_tab_map.clear ();
+  emit fetab_file_name_query (nullptr);
+
+  // Check all tabs for the given file name
   QWidget *retval = nullptr;
 
   for (editor_tab_map_const_iterator p = editor_tab_map.begin ();
        p != editor_tab_map.end (); p++)
     {
       QString tab_file = p->first;
 
       if (same_file (file.toStdString (), tab_file.toStdString ())
@@ -300,20 +305,16 @@ file_editor::request_open_file (const QS
   if (openFileName.isEmpty ())
     {
       // This happens if edit is calles without an argument
       // Open eitor with empty edit area instead (as new file would do)
       request_new_file ("");
     }
   else
     {
-      // Have all file editor tabs signal what their filenames are.
-      editor_tab_map.clear ();
-      emit fetab_file_name_query (nullptr);
-
       // Check whether this file is already open in the editor.
       QWidget *tab = find_tab_widget (openFileName);
 
       if (tab)
         {
           _tab_widget->setCurrentWidget (tab);
 
           if (line > 0)
@@ -473,20 +474,16 @@ file_editor::request_mru_open_file (QAct
                          action->data ().toStringList ().at (1));
     }
 }
 
 void
 file_editor::check_conflict_save (const QString& saveFileName,
                                   bool remove_on_success)
 {
-  // Have all file editor tabs signal what their filenames are.
-  editor_tab_map.clear ();
-  emit fetab_file_name_query (nullptr);
-
   // Check whether this file is already open in the editor.
   QWidget *tab = find_tab_widget (saveFileName);
 
   if (tab)
     {
       // Note: to overwrite the contents of some other file editor tab
       // with the same name requires identifying which file editor tab
       // that is (not too difficult) then close that tab.  Of course,
@@ -547,20 +544,16 @@ file_editor::handle_insert_debugger_poin
 }
 
 void
 file_editor::handle_delete_debugger_pointer_request (const QString& file,
                                                      int line)
 {
   if (! file.isEmpty ())
     {
-      // Have all file editor tabs signal what their filenames are.
-      editor_tab_map.clear ();
-      emit fetab_file_name_query (nullptr);
-
       // Check whether this file is already open in the editor.
       QWidget *tab = find_tab_widget (file);
 
       if (tab)
         {
           _tab_widget->setCurrentWidget (tab);
 
           if (line > 0)
diff --git a/libgui/src/m-editor/file-editor.h b/libgui/src/m-editor/file-editor.h
--- a/libgui/src/m-editor/file-editor.h
+++ b/libgui/src/m-editor/file-editor.h
@@ -343,17 +343,17 @@ private:
   bool call_custom_editor (const QString& file_name = QString (), int line = -1);
 
   void toggle_preference (const QString& preference, bool def);
 
   void switch_tab (int direction, bool movetab = false);
 
   bool editor_tab_has_focus ();
 
-  QWidget * find_tab_widget (const QString& openFileName) const;
+  QWidget * find_tab_widget (const QString& openFileName);
   QAction * add_action (QMenu *menu, const QIcon& icon, const QString& text,
                         const char *member);
 
   QMenu * m_add_menu (QMenuBar *p, QString text);
 
   std::map<QString, tab_info> editor_tab_map;
   QHash<QMenu*, QStringList> _hash_menu_text;
 
