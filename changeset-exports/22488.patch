# HG changeset patch
# User Rik <rik@octave.org>
# Date 1473884387 25200
#      Wed Sep 14 13:19:47 2016 -0700
# Node ID a666e3ee6af861c2354d28c4235ea03d61d12457
# Parent  1b1e740be4724e7ad65a74d97f3b2932494f7a06
Require gnuplot 4.4 as mininimum supported version.

* NEWS: Announce change.

* README.MacOS, README.gnuplot: Update minimum version to 4.4.

* image.m: Remove documentation referencing gnuplot 4.0.

* __bar__.m: Remove hack to width of bars done to avoid clipping in
gnuplot 4.0.

* __quiver__.m: Remove FIXME about gnuplot that is no longer correct.

* __gnuplot_drawnow__.m: Remove __gnuplot_has_feature__ tests for
"windows_figure_position", "x11_figure_position", "wxt_figure_size",
"has_termoption_dashed".

* graphics_toolkit.m: Remove FIXME note about gnuplot < 4.2.5.

* __gnuplot_draw_axes__.m: Remove __gnuplot_has_feature__ tests for
"screen_coordinates_for_{lrtb}margin", "transparent_patches",
"transparent_surface", "key_has_font_properties".

* __gnuplot_has_feature__.m: Remove feature tests for
"x11_figure_position", "wxt_figure_size", "transparent_patches",
"transparent_surface", "epslatex_implies_eps_filesuffix",
"epslatexstandalone_terminal", "screen_coordinates_for_{lrtb}margin",
"variable_GPVAL_TERMINALS", "eey_has_font_properties",
"windows_figure_position", "has_termoption_dashed".

* __gnuplot_has_terminal__.m: Remove __gnuplot_has_feature__ tests for
"variable_GPVAL_TERMINALS".

* __gnuplot_print__.m: Remove __gnuplot_has_feature__ tests for
"epslatex_implies_eps_filesuffix".

* __print_parse_opts__.m: Remove __gnuplot_has_feature__ tests for
"epslatex_implies_eps_filesuffix".

diff --git a/NEWS b/NEWS
--- a/NEWS
+++ b/NEWS
@@ -11,16 +11,18 @@ Summary of important user-visible change
  ** The parser has been extended to understand binary numbers which
     begin with the prefix '0b' or '0B'.  The value returned is Octave's
     default numeric class of double, not at unsigned integer class.
     Therefore numbers greater than flintmax, i.e., 2^53, will lose some
     precision.
 
     Examples: 0b101 == 5  or  0B1100_0001 == 0xC1
 
+ ** gnuplot 4.4 is now the minimum version supported by Octave.
+
  ** The default set of colors used to plot lines has been updated to be
     compatible with Matlab's new default color scheme.  The line plot
     color scheme can be set with the axes property "ColorOrder".
 
  ** The default colormap is now set to "viridis" which is also the
     default colormap in matplotlib.  This new colormap fixes some of the
     main issues with the old default colormap "jet" such as its bad
     "luminance profile" and is also more similar to Matlab's new default
diff --git a/etc/README.MacOS b/etc/README.MacOS
--- a/etc/README.MacOS
+++ b/etc/README.MacOS
@@ -217,17 +217,17 @@ To build Octave's sources the list of Fi
   autoconf (>= 2.6.0)
   automake (>= 1.11)
   fftw3 (>= 3.1.1)
   fftw3-shlibs (>= 3.1.1)
   flex >= 2.5.30
   fltk-aqua-shlibs
   glpk-dev
   glpk-shlibs
-  gnuplot (>= 4.2.6)
+  gnuplot (>= 4.4)
   graphicsmagick (<= 1.3.7)
   graphicsmagick-shlibs (<= 1.3.7)
   hdf5 (>= 1.6.5)
   hdf5-shlibs (>= 1.6.5)
   libcurl4
   libcurl4-shlibs
   libncurses5
   libncurses5-shlibs
diff --git a/etc/README.gnuplot b/etc/README.gnuplot
--- a/etc/README.gnuplot
+++ b/etc/README.gnuplot
@@ -1,12 +1,7 @@
-Octave works best with gnuplot 4.4 or higher, which is available from
+Octave requires gnuplot 4.4 or higher, which is available from
 http://www.gnuplot.info.
 
-In versions prior to 4.2.6 it is not possible to use the mouse to zoom in
-on plots.  This is a limitation of earlier versions of gnuplot, which are
-unable to zoom when the data it plots is not stored in a file.
-
-
 John W. Eaton
 jwe@octave.org
 
-Last updated: Tue Jan  4 18:55:56 PST 2011
+Last updated: Wed Sep 14 12:25:25 PDT 2016
diff --git a/scripts/image/image.m b/scripts/image/image.m
--- a/scripts/image/image.m
+++ b/scripts/image/image.m
@@ -27,18 +27,16 @@
 ## The elements of @var{img} are indices into the current colormap.
 ##
 ## @var{x} and @var{y} are optional 2-element vectors, @w{@code{[min, max]}},
 ## which specify the range for the axis labels.  If a range is specified as
 ## @w{@code{[max, min]}} then the image will be reversed along that axis.  For
 ## convenience, @var{x} and @var{y} may be specified as N-element vectors
 ## matching the length of the data in @var{img}.  However, only the first and
 ## last elements will be used to determine the axis limits.
-## @strong{Warning:} @var{x} and @var{y} are ignored when using gnuplot 4.0
-## or earlier.
 ##
 ## Multiple property/value pairs may be specified for the image object, but
 ## they must appear in pairs.
 ##
 ## The optional return value @var{h} is a graphics handle to the image.
 ##
 ## Implementation Note: The origin (0, 0) for images is located in the
 ## upper left.  For ordinary plots, the origin is located in the lower
@@ -128,18 +126,17 @@ function h = image (varargin)
     h = htmp;
   endif
 
 endfunction
 
 ## Generic image creation.
 ##
 ## The axis values corresponding to the matrix elements are specified in
-## @var{x} and @var{y}.  If you're not using gnuplot 4.2 or later, these
-## variables are ignored.
+## @var{x} and @var{y}.
 
 ## Author: Tony Richardson <arichard@stark.cc.oh.us>
 ## Created: July 1994
 ## Adapted-By: jwe
 
 function h = __img__ (hax, do_new, x, y, img, varargin)
 
   if (! isempty (img))
diff --git a/scripts/plot/draw/private/__bar__.m b/scripts/plot/draw/private/__bar__.m
--- a/scripts/plot/draw/private/__bar__.m
+++ b/scripts/plot/draw/private/__bar__.m
@@ -22,18 +22,17 @@
 ## @end deftypefn
 
 ## Author: jwe
 
 function varargout = __bar__ (vertical, func, varargin)
 
   [hax, varargin, nargin] = __plt_get_axis_arg__ (func, varargin{:});
 
-  ## Slightly smaller than 0.8 to avoid clipping issue in gnuplot 4.0
-  width = 0.8 - 10 * eps;
+  width = 0.8;
   group = true;
   histc = NA;
   bv = 0;  # BaseValue
 
   if (nargin > 1 && isnumeric (varargin{2}))
     x = varargin{1};
     if (isvector (x))
       x = x(:);
diff --git a/scripts/plot/draw/private/__quiver__.m b/scripts/plot/draw/private/__quiver__.m
--- a/scripts/plot/draw/private/__quiver__.m
+++ b/scripts/plot/draw/private/__quiver__.m
@@ -254,17 +254,16 @@ function hg = __quiver__ (varargin)
       mk = linespec.marker;
     endif
     if (is3d)
       h3 = plot3 (x, y, z, "linestyle", "none", "marker", mk, "parent", hg);
     else
       h3 = plot (x, y, "linestyle", "none", "marker", mk, "parent", hg);
     endif
     if (have_filled)
-      ## FIXME: gnuplot doesn't respect the markerfacecolor field
       set (h3, "markerfacecolor", get (h1, "color"));
     endif
 
     ## Set up the hggroup properties and listeners
     if (autoscale)
       addproperty ("autoscale", hg, "radio", "{on}|off", "on");
       addproperty ("autoscalefactor", hg, "data", autoscale);
     else
diff --git a/scripts/plot/util/__gnuplot_drawnow__.m b/scripts/plot/util/__gnuplot_drawnow__.m
--- a/scripts/plot/util/__gnuplot_drawnow__.m
+++ b/scripts/plot/util/__gnuplot_drawnow__.m
@@ -188,26 +188,18 @@ function enhanced = gnuplot_set_term (pl
           gnuplot_pos = gnuplot_pos / 72;
           gnuplot_size = gnuplot_size / 72;
         endif
         if (all (gnuplot_size > 0))
           terminals_with_size = {"canvas", "cairolatex", "eepic", "emf", ...
                                  "epscairo", "epslatex", "fig", "gif", ...
                                  "jpeg", "latex", "pbm", "pdf", "pdfcairo", ...
                                  "postscript", "png", "pngcairo", "pstex", ...
-                                 "pslatex", "svg", "tikz"};
-          if (__gnuplot_has_feature__ ("windows_figure_position"))
-            terminals_with_size{end+1} = "windows";
-          endif
-          if (__gnuplot_has_feature__ ("x11_figure_position"))
-            terminals_with_size{end+1} = "x11";
-          endif
-          if (__gnuplot_has_feature__ ("wxt_figure_size"))
-            terminals_with_size{end+1} = "wxt";
-          endif
+                                 "pslatex", "svg", "tikz", "windows", ...
+                                 "wxt", "x11"};
           switch (term)
             case terminals_with_size
               size_str = sprintf ("size %.12g,%.12g", gnuplot_size);
             case "tikz"
               size_str = sprintf ("size %gin,%gin", gnuplot_size);
             case "dumb"
               new_stream = 1;
               if (! isempty (getenv ("COLUMNS"))
@@ -223,20 +215,17 @@ function enhanced = gnuplot_set_term (pl
               endif
             case {"aqua", "fig", "corel"}
               size_str = sprintf ("size %g %g", gnuplot_size);
             case "dxf"
               size_str = "";
             otherwise
               size_str = "";
           endswitch
-          if ((strcmp (term, "x11")
-               && __gnuplot_has_feature__ ("x11_figure_position"))
-              || (strcmpi (term, "windows")
-                  && __gnuplot_has_feature__ ("windows_figure_position")))
+          if (strcmp (term, "x11") || strcmpi (term, "windows"))
             ## X11/Windows allows the window to be positioned as well.
             units = get (0, "units");
             unwind_protect
               set (0, "units", "pixels");
               screen_size = get (0, "screensize")(3:4);
             unwind_protect_cleanup
               set (0, "units", units);
             end_unwind_protect
@@ -295,26 +284,16 @@ function enhanced = gnuplot_set_term (pl
         term_str = [term_str " " opts_str];
       endif
       if (! isempty (size_str) && new_stream)
         ## size_str comes after other options to permit specification of
         ## the canvas size for terminals cdr/corel.
         term_str = [term_str " " size_str];
       endif
     endif
-    if (! __gnuplot_has_feature__ ("has_termoption_dashed"))
-      ## If "set termoption dashed" isn't available add "dashed" option
-      ## to the "set terminal ..." command, if it is supported.
-      if (any (strcmp (term, {"aqua", "cgm", "eepic", "emf", "epslatex", ...
-                              "fig", "pcl5", "mp", "next", "openstep", ...
-                              "pdf", "pdfcairo", "pngcairo", "postscript", ...
-                              "pslatex", "pstext", "svg", "tgif", "x11"})))
-        term_str = [term_str " dashed"];
-      endif
-    endif
     if (any (strcmp (term, {"aqua", "wxt"})))
       term_str = [term_str, " ", "dashlength 1"];
     elseif (any (strcmp (term, {"epslatex", "postscript", "pslatex"})))
       term_str = [term_str, " ", "dashlength 2"];
     endif
 
     ## Work around the gnuplot feature of growing the x11 window and
     ## flickering window (x11, windows, & wxt) when the mouse and
@@ -334,18 +313,17 @@ function enhanced = gnuplot_set_term (pl
     elseif (any (strcmp (term, flickering_terms)))
       fprintf (plot_stream, "%s\n", term_str);
       if (nargin == 5)
         if (! isempty (file))
           fprintf (plot_stream, "set output '%s';\n", file);
         endif
       endif
     endif
-    if (__gnuplot_has_feature__ ("has_termoption_dashed")
-        && ! __gnuplot_has_feature__ ("dashtype"))
+    if (! __gnuplot_has_feature__ ("dashtype"))
       fprintf (plot_stream, "set termoption dashed\n");
     endif
   else
     ## gnuplot will pick up the GNUTERM environment variable itself
     ## so no need to set the terminal type if not also setting the
     ## figure title, enhanced mode, or position.
   endif
 
diff --git a/scripts/plot/util/graphics_toolkit.m b/scripts/plot/util/graphics_toolkit.m
--- a/scripts/plot/util/graphics_toolkit.m
+++ b/scripts/plot/util/graphics_toolkit.m
@@ -77,18 +77,16 @@ function retval = graphics_toolkit (name
     endif
   endif
 
   if (! any (strcmp (available_graphics_toolkits (), name)))
     error ("graphics_toolkit: %s toolkit is not available", name);
   endif
 
   if (! any (strcmp (loaded_graphics_toolkits (), name)))
-    ## FIXME: Special gnuplot handling for versions < 4.2.5 (bug #44978).
-    ## This can probably be deleted in the future once RHEL upgrades gnuplot.
     if (strcmp (name, "gnuplot"))
       valid_version = __gnuplot_has_feature__ ("minimum_version");
       if (valid_version != 1)
         error ("graphics_toolkit: gnuplot version too old.");
       endif
     endif
     feval (["__init_", name, "__"]);
     if (! any (strcmp (loaded_graphics_toolkits (), name)))
diff --git a/scripts/plot/util/private/__gnuplot_draw_axes__.m b/scripts/plot/util/private/__gnuplot_draw_axes__.m
--- a/scripts/plot/util/private/__gnuplot_draw_axes__.m
+++ b/scripts/plot/util/private/__gnuplot_draw_axes__.m
@@ -78,53 +78,31 @@ function __gnuplot_draw_axes__ (h, plot_
       ## FIXME: need to properly implement 3D
       dr = mean (dr(1:2)) / dr(3);
     endif
   else
     dr = 1;
   endif
 
   if (strcmp (axis_obj.activepositionproperty, "position"))
-    if (__gnuplot_has_feature__ ("screen_coordinates_for_{lrtb}margin"))
-      if (nd == 2 || all (mod (axis_obj.view, 90) == 0))
-        x = [1, 1];
-      else
-        ## 3D plots need to be sized down to fit in the window.
-        x = 1.0 ./ sqrt ([2, 2.5]);
-      endif
-      fprintf (plot_stream, "set tmargin screen %.15g;\n",
-               pos(2)+pos(4)/2+x(2)*pos(4)/2);
-      fprintf (plot_stream, "set bmargin screen %.15g;\n",
-               pos(2)+pos(4)/2-x(2)*pos(4)/2);
-      fprintf (plot_stream, "set lmargin screen %.15g;\n",
-               pos(1)+pos(3)/2-x(1)*pos(3)/2);
-      fprintf (plot_stream, "set rmargin screen %.15g;\n",
-               pos(1)+pos(3)/2+x(1)*pos(3)/2);
-      sz_str = "";
+    if (nd == 2 || all (mod (axis_obj.view, 90) == 0))
+      x = [1, 1];
     else
-      fprintf (plot_stream, "set tmargin 0;\n");
-      fprintf (plot_stream, "set bmargin 0;\n");
-      fprintf (plot_stream, "set lmargin 0;\n");
-      fprintf (plot_stream, "set rmargin 0;\n");
-
-      if (nd == 3 && all (axis_obj.view == [0, 90]))
-        ## FIXME: Kludge to allow colorbar to be added to a pcolor() plot
-        pos(3:4) = pos(3:4) * 1.4;
-        pos(1:2) = pos(1:2) - pos(3:4) * 0.125;
-      endif
-
-      fprintf (plot_stream, "set origin %.15g, %.15g;\n", pos(1), pos(2));
-
-      if (strcmp (axis_obj.dataaspectratiomode, "manual"))
-        sz_str = sprintf ("set size ratio %.15g", -dr);
-      else
-        sz_str = "set size noratio";
-      endif
-      sz_str = sprintf ("%s %.15g, %.15g;\n", sz_str, pos(3), pos(4));
+      ## 3D plots need to be sized down to fit in the window.
+      x = 1.0 ./ sqrt ([2, 2.5]);
     endif
+    fprintf (plot_stream, "set tmargin screen %.15g;\n",
+             pos(2)+pos(4)/2+x(2)*pos(4)/2);
+    fprintf (plot_stream, "set bmargin screen %.15g;\n",
+             pos(2)+pos(4)/2-x(2)*pos(4)/2);
+    fprintf (plot_stream, "set lmargin screen %.15g;\n",
+             pos(1)+pos(3)/2-x(1)*pos(3)/2);
+    fprintf (plot_stream, "set rmargin screen %.15g;\n",
+             pos(1)+pos(3)/2+x(1)*pos(3)/2);
+    sz_str = "";
   else ## activepositionproperty == outerposition
     fprintf (plot_stream, "unset tmargin;\n");
     fprintf (plot_stream, "unset bmargin;\n");
     fprintf (plot_stream, "unset lmargin;\n");
     fprintf (plot_stream, "unset rmargin;\n");
     fprintf (plot_stream, "set origin %g, %g;\n", pos(1:2));
     if (strcmp (axis_obj.dataaspectratiomode, "manual"))
       sz_str = sprintf ("ratio %g", -dr);
@@ -880,18 +858,17 @@ function __gnuplot_draw_axes__ (h, plot_
                   ccdat = ccdat * ones (size (zcol));
                 elseif (numel (ccdat) < 1)
                   ccdat = zcol;
                 endif
                 data{data_3d_idx} = [data{data_3d_idx}, ...
                                      [[xcol; xcol(end)], [ycol; ycol(end)], ...
                                      [zcol; zcol(end)], [ccdat; ccdat(end)]]'];
               else
-                if (__gnuplot_has_feature__ ("transparent_patches")
-                        && isscalar (obj.facealpha))
+                if (isscalar (obj.facealpha))
                   colorspec = sprintf ("lc rgb \"#%02x%02x%02x\" fillstyle transparent solid %f",
                                        round (255*color), obj.facealpha);
                 else
                   colorspec = sprintf ("lc rgb \"#%02x%02x%02x\"",
                                        round (255*color));
                 endif
 
                 withclause{data_idx} = sprintf ("with filledcurve %s",
@@ -932,18 +909,17 @@ function __gnuplot_draw_axes__ (h, plot_
                   ec = obj.markerfacecolor;
                 else
                   ec = obj.markeredgecolor;
                 endif
               else
                 ec = obj.edgecolor;
               endif
 
-              if ((strcmp (ec, "flat")
-                   || strcmp (ec, "interp"))
+              if ((strcmp (ec, "flat") || strcmp (ec, "interp"))
                   && isfield (obj, "cdata"))
                 if (ndims (obj.cdata) == 2
                     && (columns (obj.cdata) == nc
                         && (rows (obj.cdata) == 1
                             || rows (obj.cdata) == 3)))
                   ccol = cdat(:, i);
                 elseif (ndims (obj.cdata) == 2
                         && (rows (obj.cdata) == nc
@@ -1305,18 +1281,17 @@ function __gnuplot_draw_axes__ (h, plot_
 
           if (doing_interp_color)
             ## "depthorder" interferes with interpolation of colors.
             dord = "scansautomatic";
           else
             dord = "depthorder";
           endif
 
-          if (__gnuplot_has_feature__ ("transparent_surface")
-              && isscalar (obj.facealpha))
+          if (isscalar (obj.facealpha))
             fprintf (plot_stream,
                      "set style fill transparent solid %f;\n",
                      obj.facealpha);
           endif
           fprintf (plot_stream,
                    "set pm3d explicit at s %s %s corners2color c3;\n",
                    interp_str, dord);
         endif
@@ -1630,23 +1605,19 @@ function __gnuplot_draw_axes__ (h, plot_
       case "best"
         pos = "";
         warning ("legend: 'Best' not yet implemented for location specifier.\n");
         ## Least conflict with data in plot.
         ## Least unused space outside plot.
       otherwise
         pos = "";
     endswitch
-    if (__gnuplot_has_feature__ ("key_has_font_properties"))
-      [fontname, fontsize] = get_fontname_and_size (hlgnd);
-      fontspacespec = [create_spacingspec(fontname, fontsize, gnuplot_term),...
-                       ' ', create_fontspec(fontname, fontsize, gnuplot_term)];
-    else
-      fontspacespec = "";
-    endif
+    [fontname, fontsize] = get_fontname_and_size (hlgnd);
+    fontspacespec = [create_spacingspec(fontname, fontsize, gnuplot_term),...
+                     ' ', create_fontspec(fontname, fontsize, gnuplot_term)];
     textcolors = get (findobj (hlgnd.children, "type", "text"), "color");
     if (iscell (textcolors))
       textcolors = cell2mat (textcolors);
       textcolors = unique (textcolors, "rows");
     endif
     if (rows (textcolors) > 1)
       ## Gnuplot is unable to assign arbitrary colors to each text entry
       ## for the key/legend.  But, the text color can be set to match the
diff --git a/scripts/plot/util/private/__gnuplot_has_feature__.m b/scripts/plot/util/private/__gnuplot_has_feature__.m
--- a/scripts/plot/util/private/__gnuplot_has_feature__.m
+++ b/scripts/plot/util/private/__gnuplot_has_feature__.m
@@ -21,42 +21,31 @@
 ## Undocumented internal function.
 ## @end deftypefn
 
 ## Author: Ben Abbott <bpabbott@mac.com>
 ## Created: 2009-01-27
 
 function res = __gnuplot_has_feature__ (feature)
   persistent features = {"minimum_version",
-                         "x11_figure_position",
-                         "wxt_figure_size",
-                         "transparent_patches",
-                         "transparent_surface",
-                         "epslatex_implies_eps_filesuffix",
-                         "epslatexstandalone_terminal",
-                         "screen_coordinates_for_{lrtb}margin",
-                         "variable_GPVAL_TERMINALS",
-                         "key_has_font_properties",
-                         "windows_figure_position",
-                         "has_termoption_dashed",
                          "needs_color_with_postscript",
                          "linetype",
                          "dashtype",
                          "alphablend_linecolor"};
   persistent has_features;
 
   if (isempty (has_features))
     try
       gnuplot_version = __gnuplot_version__ ();
     catch
       ## Don't throw an error if gnuplot isn't installed
       gnuplot_version = "0.0.0";
     end_try_catch
-    versions =  {"4.2.5", "4.2.5", "4.4", "4.4", "4.4", "4.2", "4.2", "4.4", "4.4", "4.4", "4.4", "4.3", "4.6", "4.6", "5.0", "4.6"};
-    operators = {   ">=",    ">=",  ">=",  ">=",  ">=",  ">=",  ">=",  ">=",  ">=",  ">=",  ">=",  ">=",  ">=",  ">=",  ">=",  ">="};
+    versions =  {"4.4", "4.6", "4.6", "5.0", "4.6"};
+    operators = {">=",  ">=",  ">=",  ">=",  ">="};
     have_features = false (size (features));
     for n = 1 : numel (have_features)
       has_features(n) = compare_versions (gnuplot_version, versions{n}, operators{n});
     endfor
   endif
 
   n = find (strcmpi (feature, features));
   if (isempty (n))
diff --git a/scripts/plot/util/private/__gnuplot_has_terminal__.m b/scripts/plot/util/private/__gnuplot_has_terminal__.m
--- a/scripts/plot/util/private/__gnuplot_has_terminal__.m
+++ b/scripts/plot/util/private/__gnuplot_has_terminal__.m
@@ -24,42 +24,27 @@
 ## Author: Ben Abbott <bpabbott@mac.com>
 ## Created: 2010-09-13
 
 function gnuplot_supports_term = __gnuplot_has_terminal__ (term, plot_stream)
 
   term = strtrim (term);
   term = lower (strtok (term, " "));
 
-  if (__gnuplot_has_feature__ ("variable_GPVAL_TERMINALS"))
-    if (nargin < 2)
-      plot_stream = __gnuplot_open_stream__ (2);
+  if (nargin < 2)
+    plot_stream = __gnuplot_open_stream__ (2);
+  endif
+  available_terminals = __gnuplot_get_var__ (plot_stream, "GPVAL_TERMINALS");
+  available_terminals = regexp (available_terminals, '\w+', "match");
+  if (nargin < 2 && ! isempty (plot_stream))
+    pclose (plot_stream(1));
+    if (numel (plot_stream) > 1)
+      pclose (plot_stream(2));
     endif
-    available_terminals = __gnuplot_get_var__ (plot_stream, "GPVAL_TERMINALS");
-    available_terminals = regexp (available_terminals, '\w+', "match");
-    if (nargin < 2 && ! isempty (plot_stream))
-      pclose (plot_stream(1));
-      if (numel (plot_stream) > 1)
-        pclose (plot_stream(2));
-      endif
-      if (numel (plot_stream) > 2)
-        waitpid (plot_stream(3));
-      endif
+    if (numel (plot_stream) > 2)
+      waitpid (plot_stream(3));
     endif
-  else
-    ## Gnuplot 4.0 terminals.  No new terminals were added until 4.4 which
-    ## allows the list of terminals to be obtained from GPVAL_TERMINALS.
-    available_terminals = {"aifm", "aqua", "canvas", "cgm", "corel", ...
-                           "dumb", "dxf", "eepic", "emf", "epslatex", ...
-                           "epson_180dpi", "fig", "gif", "gnugraph", ...
-                           "gpic", "hp2623A", "hp2648", "hp500c", ...
-                           "hpgl", "hpljii", "hppj", "imagen", "jpeg", ...
-                           "latex", "mf", "mif", "mp", "pbm", "pdf", ...
-                           "pm", "png", "postscript", "pslatex", ...
-                           "pstex", "pstricks", "qms", "regis", "rgip", ...
-                           "svg", "texdraw", "tgif", "tkcanvas", ...
-                           "tpic", "windows", "x11", "xlib", "xterm"};
   endif
 
   gnuplot_supports_term = any (strcmp (term, available_terminals));
 
 endfunction
 
diff --git a/scripts/plot/util/private/__gnuplot_print__.m b/scripts/plot/util/private/__gnuplot_print__.m
--- a/scripts/plot/util/private/__gnuplot_print__.m
+++ b/scripts/plot/util/private/__gnuplot_print__.m
@@ -82,22 +82,17 @@ function opts = __gnuplot_print__ (opts)
         if (any (strcmpi (ext, {"eps", "ps", "pdf"})))
           suffix = ext;  # If user provides eps/ps/pdf suffix, use it.
         endif
       else
         error ("print:invalid-suffix",
                "invalid suffix '%s' for device '%s'.",
                ext, lower (opts.devopt));
       endif
-      if (__gnuplot_has_feature__ ("epslatex_implies_eps_filesuffix"))
-        suffix = "tex";
-      else
-        ## Gnuplot 4.0 wants a ".eps" suffix.
-        suffix = "eps";
-      endif
+      suffix = "tex";
       if (strfind (opts.devopt, "standalone"))
         gp_opts = sprintf ("standalone %s", gp_opts);
         term = strrep (opts.devopt, "standalone", "");
       else
         term = sprintf ("%s ", opts.devopt);
       endif
       local_drawnow ([term " " gp_opts],
                      [name "." suffix], opts);
diff --git a/scripts/plot/util/private/__print_parse_opts__.m b/scripts/plot/util/private/__print_parse_opts__.m
--- a/scripts/plot/util/private/__print_parse_opts__.m
+++ b/scripts/plot/util/private/__print_parse_opts__.m
@@ -245,18 +245,17 @@ function arg_st = __print_parse_opts__ (
 
   if (isfigure (arg_st.figure))
     __graphics_toolkit__ = get (arg_st.figure, "__graphics_toolkit__");
   else
     ## Allow tests when no figures are present.
     __graphics_toolkit__ = get (0, "defaultfigure__graphics_toolkit__");
   endif
 
-  if (strcmp (__graphics_toolkit__, "gnuplot")
-      && __gnuplot_has_feature__ ("epslatex_implies_eps_filesuffix"))
+  if (strcmp (__graphics_toolkit__, "gnuplot"))
     suffixes(strncmp (dev_list, "epslatex", 8)) = {"eps"};
   endif
 
   match = strcmpi (dev_list, arg_st.devopt);
   if (any (match))
     default_suffix = suffixes{match};
   else
     default_suffix = arg_st.devopt;
