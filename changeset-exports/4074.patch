# HG changeset patch
# User jwe
# Date 1033160762 0
#      Fri Sep 27 21:06:02 2002 +0000
# Node ID a67f76924703382fb77990c4e242c82df123aad8
# Parent  38a22328f192f226bb2636ce982f8cb320ceddb0
[project @ 2002-09-27 21:06:02 by jwe]

diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,21 +1,21 @@
 2002-09-27  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
+	* lo-mappers.cc (xisnan, xfinite, xisinf): Simply forward to
+	lo_ieee_* functions.
 	* Makefile.in (LIBOCTAVE_C_SOURCES): Add lo-cieee.c to the list.
+	* lo-ieee.cc (lo_ieee_double): Rename from ieee_double.
+	(LO_IEEE_NA_HW, LO_IEEE_NA_LW): Rename from NA_HW and NA_LW.
 	* lo-cieee.c: New file.
-	(lo_ieee_is_NaN_or_NA): Move here from lo-ieee.cc.
-	(lo_ieee_is_NA): Likewise.
-	[SCO] (isinf, isnan): Likewise.
+	[SCO] (isinf, isnan): Move here from lo-ieee.cc.
 	* lo-ieee.h: Now all extern "C".
-	(LO_IEEE_NA_HW, LO_IEEE_NA_LW): Move here from lo-ieee.cc and
-	rename from NA_HW and NA_LW.
-	(lo_ieee_double): Move typedef here from lo-ieee.cc and rename
-	from ieee_double.
-	(lo_ieee_hw, lo_ieee_low): Provide decl.
+	(lo_ieee_isnan, lo_ieee_finite, lo_ieee_isinf): Move here from
+	lo-mappers.cc and rename from xisnan, xfinite, xisinf.
+
 	* lo-ieee.cc (lo_ieee_hw, lo_ieee_low): Rename from hw and lw.
 	Now extern.
 
 2002-09-26  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* Array.cc, Array.h, Array2.cc, Array2.h, Array3.cc, Array3.h,
 	ArrayN.cc, ArrayN.h, Bounds.cc, Bounds.h, CColVector.cc,
 	CColVector.h, CDiagMatrix.cc, CDiagMatrix.h, CMatrix.cc,
diff --git a/liboctave/lo-cieee.c b/liboctave/lo-cieee.c
--- a/liboctave/lo-cieee.c
+++ b/liboctave/lo-cieee.c
@@ -42,16 +42,21 @@ Software Foundation, 59 Temple Place - S
 #include <nan.h>
 #if defined (SCO)
 #undef _IEEE
 #endif
 #endif
 
 #include "lo-ieee.h"
 
+#if defined (_AIX) && defined (__GNUG__)
+#undef finite
+#define finite(x) ((x) < DBL_MAX && (x) > -DBL_MAX)
+#endif
+
 #if defined (SCO)
 
 int
 isnan (double x)
 {
   return (IsNANorINF (x) && NaN (x) && ! IsINF (x)) ? 1 : 0;
 }
 
@@ -59,26 +64,46 @@ int
 isinf (double x)
 {
   return (IsNANorINF (x) && IsINF (x)) ? 1 : 0;
 }
 
 #endif
 
 int
-lo_ieee_is_NA (double x)
+lo_ieee_isnan (double x)
 {
-  lo_ieee_double t;
-  t.value = x;
-  return (isnan (x) && t.word[lo_ieee_lw] == LO_IEEE_NA_LW) ? 1 : 0;
+#if defined (HAVE_ISNAN)
+  return lo_ieee_isnan (x) ? ! lo_ieee_is_NA (x) : 0;
+#else
+  return 0;
+#endif
 }
 
 int
-lo_ieee_is_NaN_or_NA (double x)
+lo_ieee_finite (double x)
 {
-  return isnan (x);
+#if defined (HAVE_FINITE)
+  return finite (x) != 0 && ! lo_ieee_is_NaN_or_NA (x);
+#elif defined (HAVE_ISINF)
+  return (! isinf (x) && ! lo_ieee_is_NaN_or_NA (x));
+#else
+  return ! lo_ieee_is_NaN_or_NA (x);
+#endif
+}
+
+int
+lo_ieee_isinf (double x)
+{
+#if defined (HAVE_ISINF)
+  return isinf (x);
+#elif defined (HAVE_FINITE)
+  return (! (finite (x) || lo_ieee_is_NaN_or_NA (x)));
+#else
+  return 0;
+#endif
 }
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
diff --git a/liboctave/lo-ieee.cc b/liboctave/lo-ieee.cc
--- a/liboctave/lo-ieee.cc
+++ b/liboctave/lo-ieee.cc
@@ -52,18 +52,27 @@ Software Foundation, 59 Temple Place - S
 double octave_Inf;
 
 // Octave's idea of not a number.
 double octave_NaN;
 
 // Octave's idea of a missing value.
 double octave_NA;
 
-int lo_ieee_hw;
-int lo_ieee_lw;
+static int lo_ieee_hw;
+static int lo_ieee_lw;
+
+typedef union
+{
+  double value;
+  unsigned int word[2];
+} lo_ieee_double;
+
+#define LO_IEEE_NA_HW 0x7ff00000
+#define LO_IEEE_NA_LW 1954
 
 void
 octave_ieee_init (void)
 {
 #if defined (HAVE_ISINF) || defined (HAVE_FINITE)
 
 // Some version of gcc on some old version of Linux used to crash when
 // trying to make Inf and NaN.
@@ -116,13 +125,27 @@ octave_ieee_init (void)
   t.word[lo_ieee_hw] = LO_IEEE_NA_HW;
   t.word[lo_ieee_lw] = LO_IEEE_NA_LW;
 
   octave_NA = t.value;
 
 #endif
 }
 
+int
+lo_ieee_is_NA (double x)
+{
+  lo_ieee_double t;
+  t.value = x;
+  return (lo_ieee_isnan (x) && t.word[lo_ieee_lw] == LO_IEEE_NA_LW) ? 1 : 0;
+}
+
+int
+lo_ieee_is_NaN_or_NA (double x)
+{
+  return lo_ieee_isnan (x);
+}
+
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
diff --git a/liboctave/lo-ieee.h b/liboctave/lo-ieee.h
--- a/liboctave/lo-ieee.h
+++ b/liboctave/lo-ieee.h
@@ -31,37 +31,29 @@ extern "C" {
 extern double octave_Inf;
 
 // Octave's idea of not a number.
 extern double octave_NaN;
 
 // Octave's idea of a missing value.
 extern double octave_NA;
 
-void octave_ieee_init (void);
+extern void octave_ieee_init (void);
 
-int lo_ieee_is_NA (double);
-int lo_ieee_is_NaN_or_NA (double);
+extern int lo_ieee_is_NA (double);
+extern int lo_ieee_is_NaN_or_NA (double);
 
 #if defined (SCO)
-int isnan (double);
-int isinf (double);
+extern int isnan (double);
+extern int isinf (double);
 #endif
 
-extern int lo_ieee_hw;
-extern int lo_ieee_lw;
-
-typedef union
-{
-  double value;
-  unsigned int word[2];
-} lo_ieee_double;
-
-#define LO_IEEE_NA_HW 0x7ff00000
-#define LO_IEEE_NA_LW 1954
+extern int lo_ieee_isnan (double x);
+extern int lo_ieee_finite (double x);
+extern int lo_ieee_isinf (double x);
 
 #ifdef	__cplusplus
 }
 #endif
 
 #endif
 
 /*
diff --git a/liboctave/lo-mappers.cc b/liboctave/lo-mappers.cc
--- a/liboctave/lo-mappers.cc
+++ b/liboctave/lo-mappers.cc
@@ -22,38 +22,29 @@ Software Foundation, 59 Temple Place - S
 
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
 #include <cfloat>
 #include <cmath>
 
-#if defined (HAVE_IEEEFP_H)
-#include <ieeefp.h>
-#endif
-
 #if defined (HAVE_SUNMATH_H)
 #include <sunmath.h>
 #endif
 
 #include "lo-error.h"
 #include "lo-ieee.h"
 #include "lo-mappers.h"
 #include "lo-specfun.h"
 #include "lo-utils.h"
 #include "oct-cmplx.h"
 
 #include "f77-fcn.h"
 
-#if defined (_AIX) && defined (__GNUG__)
-#undef finite
-#define finite(x) ((x) < DBL_MAX && (x) > -DBL_MAX)
-#endif
-
 #ifndef M_LOG10E
 #define M_LOG10E 0.43429448190325182765
 #endif
 
 // double -> double mappers.
 
 double
 arg (double x)
@@ -71,21 +62,17 @@ double
 fix (double x)
 {
   return x > 0 ? floor (x) : ceil (x);
 }
 
 double
 imag (double x)
 {
-#if defined (HAVE_ISNAN)
   return xisnan (x) ? octave_NaN : 0.0;
-#else
-  return 0.0;
-#endif
 }
 
 double
 real (double x)
 {
   return x;
 }
 
@@ -99,57 +86,37 @@ double
 signum (double x)
 {
   double tmp = 0.0;
   if (x < 0.0)
     tmp = -1.0;
   else if (x > 0.0)
     tmp = 1.0;
 
-#if defined (HAVE_ISNAN)
   return xisnan (x) ? octave_NaN : tmp;
-#else
-  return tmp;
-#endif
 }
 
 // double -> bool mappers.
 
 bool
 xisnan (double x)
 {
-#if defined (HAVE_ISNAN)
-  return isnan (x) ? ! lo_ieee_is_NA (x) : false;
-#else
-  return false;
-#endif
+  return lo_ieee_isnan (x);
 }
 
 bool
 xfinite (double x)
 {
-#if defined (HAVE_FINITE)
-  return finite (x) != 0 && ! octave_is_NaN_or_NA (x);
-#elif defined (HAVE_ISINF)
-  return (! isinf (x) && ! octave_is_NaN_or_NA (x));
-#else
-  return ! octave_is_NaN_or_NA (x);
-#endif
+  return lo_ieee_finite (x);
 }
 
 bool
 xisinf (double x)
 {
-#if defined (HAVE_ISINF)
-  return isinf (x);
-#elif defined (HAVE_FINITE)
-  return (! (finite (x) || octave_is_NaN_or_NA (x)));
-#else
-  return false;
-#endif
+  return lo_ieee_isinf (x);
 }
 
 bool
 octave_is_NA (double x)
 {
   return lo_ieee_is_NA (x);
 }
 
