# HG changeset patch
# User Jyh-miin Lin <jyhmiinlin@gmail.com>
# Date 1265872429 -3600
#      Thu Feb 11 08:13:49 2010 +0100
# Node ID 4e4270ab70d62b330610241cb2666aea43bbad23
# Parent  7b5e8527441e27f7c611f3090617e898a118e793
support complex case in qz

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,14 @@
+2010-01-30  Jyh-Miin Lin <jyhmiin@gmail.com>
+	* DLD-FUNCTIONS/qz.cc (Fqz):
+	  Add support for complex case (no reordering yet).
+	  Place dggbak and zggbak later.
+	  Change Q to Q' to meet MATLAB's results.
+
 2010-02-11  Jaroslav Hajek  <highegg@gmail.com>
 
 	* symtab.cc: Reverse the effect of 2ceae0b40515.
 	(get_dispatch_type): If btyp_unknown occurs, read the class dispatch
 	type.
 
 2010-02-10  John W. Eaton  <jwe@octave.org>
 
diff --git a/src/DLD-FUNCTIONS/qz.cc b/src/DLD-FUNCTIONS/qz.cc
--- a/src/DLD-FUNCTIONS/qz.cc
+++ b/src/DLD-FUNCTIONS/qz.cc
@@ -34,16 +34,17 @@ along with Octave; see the file COPYING.
 #endif
 
 #include <cfloat>
 
 #include <iostream>
 #include <iomanip>
 
 #include "CmplxQRP.h"
+#include "CmplxQR.h"
 #include "dbleQR.h"
 #include "f77-fcn.h"
 #include "lo-math.h"
 #include "quit.h"
 
 #include "defun-dld.h"
 #include "error.h"
 #include "gripes.h"
@@ -67,53 +68,98 @@ extern "C"
   F77_RET_T
   F77_FUNC (dggbal, DGGBAL) (F77_CONST_CHAR_ARG_DECL,
                              const octave_idx_type& N, double* A, const octave_idx_type& LDA,
                              double* B, const octave_idx_type& LDB, octave_idx_type& ILO,
                              octave_idx_type& IHI, double* LSCALE, double* RSCALE,
                              double* WORK, octave_idx_type& INFO
                              F77_CHAR_ARG_LEN_DECL);
 
+F77_RET_T
+  F77_FUNC (zggbal, ZGGBAL) (F77_CONST_CHAR_ARG_DECL,
+                             const octave_idx_type& N, Complex* A, const octave_idx_type& LDA,
+                             Complex* B, const octave_idx_type& LDB, octave_idx_type& ILO,
+                             octave_idx_type& IHI, double* LSCALE, double* RSCALE,
+                             double* WORK, octave_idx_type& INFO
+                             F77_CHAR_ARG_LEN_DECL);	
+
   F77_RET_T
   F77_FUNC (dggbak, DGGBAK) (F77_CONST_CHAR_ARG_DECL,
                              F77_CONST_CHAR_ARG_DECL,
                              const octave_idx_type& N, const octave_idx_type& ILO,
                              const octave_idx_type& IHI, const double* LSCALE,
                              const double* RSCALE, octave_idx_type& M, double* V,
                              const octave_idx_type& LDV, octave_idx_type& INFO
                              F77_CHAR_ARG_LEN_DECL
                              F77_CHAR_ARG_LEN_DECL);
 
+F77_RET_T
+  F77_FUNC (zggbak, ZGGBAK) (F77_CONST_CHAR_ARG_DECL,
+                             F77_CONST_CHAR_ARG_DECL,
+                             const octave_idx_type& N, const octave_idx_type& ILO,
+                             const octave_idx_type& IHI, const double* LSCALE,
+                             const double* RSCALE, octave_idx_type& M, Complex* V,
+                             const octave_idx_type& LDV, octave_idx_type& INFO
+                             F77_CHAR_ARG_LEN_DECL
+                             F77_CHAR_ARG_LEN_DECL);
+
   F77_RET_T
   F77_FUNC (dgghrd, DGGHRD) (F77_CONST_CHAR_ARG_DECL,
                              F77_CONST_CHAR_ARG_DECL,
                              const octave_idx_type& N, const octave_idx_type& ILO,
                              const octave_idx_type& IHI, double* A,
                              const octave_idx_type& LDA, double* B,
                              const octave_idx_type& LDB, double* Q,
                              const octave_idx_type& LDQ, double* Z,
                              const octave_idx_type& LDZ, octave_idx_type& INFO
                              F77_CHAR_ARG_LEN_DECL
                              F77_CHAR_ARG_LEN_DECL);
 
+ F77_RET_T
+  F77_FUNC (zgghrd, ZGGHRD) (F77_CONST_CHAR_ARG_DECL,
+                             F77_CONST_CHAR_ARG_DECL,
+                             const octave_idx_type& N, const octave_idx_type& ILO,
+                             const octave_idx_type& IHI, Complex* A,
+                             const octave_idx_type& LDA, Complex* B,
+                             const octave_idx_type& LDB, Complex* Q,
+                             const octave_idx_type& LDQ, Complex* Z,
+                             const octave_idx_type& LDZ, octave_idx_type& INFO
+                             F77_CHAR_ARG_LEN_DECL
+                             F77_CHAR_ARG_LEN_DECL);
+
   F77_RET_T
   F77_FUNC (dhgeqz, DHGEQZ) (F77_CONST_CHAR_ARG_DECL,
                              F77_CONST_CHAR_ARG_DECL,
                              F77_CONST_CHAR_ARG_DECL,
                              const octave_idx_type& N, const octave_idx_type& ILO, const octave_idx_type& IHI,
                              double* A, const octave_idx_type& LDA, double* B,
                              const octave_idx_type& LDB, double* ALPHAR,
                              double* ALPHAI, double* BETA, double* Q,
                              const octave_idx_type& LDQ, double* Z,
                              const octave_idx_type& LDZ, double* WORK,
                              const octave_idx_type& LWORK, octave_idx_type& INFO
                              F77_CHAR_ARG_LEN_DECL
                              F77_CHAR_ARG_LEN_DECL
                              F77_CHAR_ARG_LEN_DECL);
 
+F77_RET_T
+  F77_FUNC (zhgeqz, ZHGEQZ) (F77_CONST_CHAR_ARG_DECL,
+                             F77_CONST_CHAR_ARG_DECL,
+                             F77_CONST_CHAR_ARG_DECL,
+                             const octave_idx_type& N, const octave_idx_type& ILO, const octave_idx_type& IHI,
+                             Complex* A, const octave_idx_type& LDA, Complex* B,
+                             const octave_idx_type& LDB, Complex* ALPHA, Complex* BETA, Complex* CQ, const octave_idx_type& LDQ, 
+			     Complex* CZ, const octave_idx_type& LDZ, 
+			     Complex* WORK,
+                             const octave_idx_type& LWORK, double* RWORK,
+			     octave_idx_type& INFO
+                             F77_CHAR_ARG_LEN_DECL
+                             F77_CHAR_ARG_LEN_DECL
+                             F77_CHAR_ARG_LEN_DECL);
+
   F77_RET_T
   F77_FUNC (dlag2, DLAG2) (const double* A, const octave_idx_type& LDA, const double* B,
                            const octave_idx_type& LDB, const double& SAFMIN,
                            double& SCALE1, double& SCALE2,
                            double& WR1, double& WR2, double& WI);
 
   // Van Dooren's code (netlib.org: toms/590) for reordering
   // GEP.  Only processes Z, not Q.
@@ -133,16 +179,28 @@ extern "C"
                              const octave_idx_type& LDA, double* B,
                              const octave_idx_type& LDB, double* VL,
                              const octave_idx_type& LDVL, double* VR,
                              const octave_idx_type& LDVR, const octave_idx_type& MM,
                              octave_idx_type& M, double* WORK, octave_idx_type& INFO
                              F77_CHAR_ARG_LEN_DECL
                              F77_CHAR_ARG_LEN_DECL);
 
+F77_RET_T
+  F77_FUNC (ztgevc, ZTGEVC) (F77_CONST_CHAR_ARG_DECL,
+                             F77_CONST_CHAR_ARG_DECL,
+                             octave_idx_type* SELECT, const octave_idx_type& N,const Complex* A,
+                             const octave_idx_type& LDA,const Complex* B,
+                             const octave_idx_type& LDB, Complex* xVL,
+                             const octave_idx_type& LDVL, Complex* xVR,
+                             const octave_idx_type& LDVR, const octave_idx_type& MM,
+                             octave_idx_type& M, Complex* CWORK, double* RWORK, octave_idx_type& INFO
+                             F77_CHAR_ARG_LEN_DECL
+                             F77_CHAR_ARG_LEN_DECL);
+
   F77_RET_T
   F77_FUNC (xdlamch, XDLAMCH) (F77_CONST_CHAR_ARG_DECL,
                                double& retval
                                F77_CHAR_ARG_LEN_DECL);
 
   F77_RET_T
   F77_FUNC (xdlange, XDLANGE) (F77_CONST_CHAR_ARG_DECL,
                                const octave_idx_type&, const octave_idx_type&, const double*,
@@ -232,17 +290,17 @@ generalized eigenvalues of @math{(A - sB
 $$ AA = Q^T AZ, BB = Q^T BZ $$\n\
 @end tex\n\
 @ifnottex\n\
 @example\n\
 @group\n\
 \n\
     A*V = B*V*diag(lambda)\n\
     W'*A = diag(lambda)*W'*B\n\
-    AA = Q'*A*Z, BB = Q'*B*Z\n\
+    AA = Q*A*Z, BB = Q*B*Z\n\
 \n\
 @end group\n\
 @end example\n\
 @end ifnottex\n\
 with @var{Q} and @var{Z} orthogonal (unitary)= @var{I}\n\
 \n\
 @item @code{[AA,BB,Z@{, lambda@}] = qz(A,B,opt)}\n\
 \n\
@@ -421,51 +479,71 @@ Order of output arguments was selected f
     bb = args(1).matrix_value ();
 
   if (error_state)
     return retval;
 
   // Both matrices loaded, now let's check what kind of arithmetic:
   //declared static to avoid compiler warnings about long jumps, vforks.
 
-  static int complex_case
+  int complex_case
     = (args(0).is_complex_type () || args(1).is_complex_type ());
-
+  // static complex_case causing random segfault, so it is removed
   if (nargin == 3 && complex_case)
     {
       error ("qz: cannot re-order complex qz decomposition.");
       return retval;
     }
 
   // first, declare variables used in both the real and complex case
   Matrix QQ(nn,nn), ZZ(nn,nn), VR(nn,nn), VL(nn,nn);
   RowVector alphar(nn), alphai(nn), betar(nn);
-
+  ComplexRowVector xalpha(nn), xbeta(nn);
   ComplexMatrix CQ(nn,nn), CZ(nn,nn), CVR(nn,nn), CVL(nn,nn);
   octave_idx_type ilo, ihi, info;
   char compq = (nargout >= 3 ? 'V' : 'N');
   char compz = (nargout >= 4 ? 'V' : 'N');
 
   // initialize Q, Z to identity if we need either of them
   if (compq == 'V' || compz == 'V')
     for (octave_idx_type ii = 0; ii < nn; ii++)
       for (octave_idx_type jj = 0; jj < nn; jj++)
         {
           OCTAVE_QUIT;
           QQ(ii,jj) = ZZ(ii,jj) = (ii == jj ? 1.0 : 0.0);
         }
 
   // always perform permutation balancing
   const char bal_job = 'P';
-  RowVector lscale(nn), rscale(nn), work(6*nn);
+  RowVector lscale(nn), rscale(nn), work(6*nn), rwork(nn);
 
   if (complex_case)
     {
-      error ("Complex case not implemented yet");
-      return retval;
+#ifdef DEBUG
+      if (compq == 'V')
+	std::cout << "qz: performing balancing; CQ=" << std::endl << CQ << std::endl;
+#endif
+      if (args(0).is_real_type ())
+	caa = ComplexMatrix (aa);
+
+      if (args(1).is_real_type ())
+	cbb = ComplexMatrix (bb);
+
+      if (compq == 'V')
+	CQ = ComplexMatrix (QQ);
+
+      if (compz == 'V')
+	CZ = ComplexMatrix (ZZ);
+
+          F77_XFCN (zggbal, ZGGBAL,
+		(F77_CONST_CHAR_ARG2 (&bal_job, 1),
+		 nn, caa.fortran_vec (), nn, cbb.fortran_vec (),
+		 nn, ilo, ihi, lscale.fortran_vec (),
+		 rscale.fortran_vec (), work.fortran_vec (), info
+		 F77_CHAR_ARG_LEN (1)));
     }
   else
     {
 #ifdef DEBUG
       if (compq == 'V')
         std::cout << "qz: performing balancing; QQ=" << std::endl << QQ << std::endl;
 #endif
 
@@ -476,17 +554,17 @@ Order of output arguments was selected f
                  rscale.fortran_vec (), work.fortran_vec (), info
                  F77_CHAR_ARG_LEN (1)));
     }
 
   // Since we just want the balancing matrices, we can use dggbal
   // for both the real and complex cases;
   // left first
 
-  if (compq == 'V')
+ /* if (compq == 'V')
     {
       F77_XFCN (dggbak, DGGBAK,
                 (F77_CONST_CHAR_ARG2 (&bal_job, 1),
                  F77_CONST_CHAR_ARG2 ("L", 1),
                  nn, ilo, ihi, lscale.data (), rscale.data (),
                  nn, QQ.fortran_vec (), nn, info
                  F77_CHAR_ARG_LEN (1)
                  F77_CHAR_ARG_LEN (1)));
@@ -507,38 +585,77 @@ Order of output arguments was selected f
                  nn, ZZ.fortran_vec (), nn, info
                  F77_CHAR_ARG_LEN (1)
                  F77_CHAR_ARG_LEN (1)));
 
 #ifdef DEBUG
       if (compz == 'V')
         std::cout << "qz: balancing done; ZZ=" << std::endl << ZZ << std::endl;
 #endif
-    }
+    }   */
 
   static char qz_job;
   qz_job = (nargout < 2 ? 'E' : 'S');   
 
   if (complex_case)
     {
       // complex case
-      if (args(0).is_real_type ())
-        caa = ComplexMatrix (aa);
-
-      if (args(1).is_real_type ())
-        cbb = ComplexMatrix (bb);
+      ComplexQR cbqr (cbb); // declare cbqr as the QR decomposition of cbb
+      cbb = cbqr.R ();  // the R matrix of QR decomposition for cbb
+      caa = (cbqr.Q ().hermitian ())*caa; // (Q*)caa for following work
+      //if (compq == 'V')
+      CQ = CQ*cbqr.Q ();
+      F77_XFCN (zgghrd, ZGGHRD,
+                (F77_CONST_CHAR_ARG2 (&compq, 1),
+                 F77_CONST_CHAR_ARG2 (&compz, 1),
+                 nn, ilo, ihi, caa.fortran_vec (),
+                 nn, cbb.fortran_vec (), nn, CQ.fortran_vec (), nn,
+                 CZ.fortran_vec (), nn, info
+                 F77_CHAR_ARG_LEN (1)
+                 F77_CHAR_ARG_LEN (1)));
+      ComplexRowVector cwork(1*nn); 
+      F77_XFCN (zhgeqz, ZHGEQZ,
+                (F77_CONST_CHAR_ARG2 (&qz_job, 1),
+                 F77_CONST_CHAR_ARG2 (&compq, 1),
+                 F77_CONST_CHAR_ARG2 (&compz, 1),
+                 nn, ilo, ihi, 
+                 caa.fortran_vec (), nn, 
+                 cbb.fortran_vec (),nn, 
+                 xalpha.fortran_vec (), xbeta.fortran_vec (), 
+                 CQ.fortran_vec (), nn,
+                 CZ.fortran_vec (), nn, 
+                 cwork.fortran_vec (), nn, rwork.fortran_vec (), info
+                 F77_CHAR_ARG_LEN (1)
+                 F77_CHAR_ARG_LEN (1)
+                 F77_CHAR_ARG_LEN (1))); 
 
-      if (compq == 'V')
-        CQ = ComplexMatrix (QQ);
+      if (compq == 'V') 
+        {
+          // Left eigenvector
+          F77_XFCN (zggbak, ZGGBAK,
+                    (F77_CONST_CHAR_ARG2 (&bal_job, 1),
+                     F77_CONST_CHAR_ARG2 ("L", 1),
+                     nn, ilo, ihi, lscale.data (), rscale.data (),
+                     nn, CQ.fortran_vec (), nn, info
+                     F77_CHAR_ARG_LEN (1)
+                     F77_CHAR_ARG_LEN (1)));
+        }        
 
+      // then right
       if (compz == 'V')
-        CZ = ComplexMatrix (ZZ);
+        {
+          F77_XFCN (zggbak, ZGGBAK,
+                    (F77_CONST_CHAR_ARG2 (&bal_job, 1),
+                     F77_CONST_CHAR_ARG2 ("R", 1),
+                     nn, ilo, ihi, lscale.data (), rscale.data (),
+                     nn, CZ.fortran_vec (), nn, info
+                     F77_CHAR_ARG_LEN (1)
+                     F77_CHAR_ARG_LEN (1)));
+        } 
 
-      error ("complex case not done yet");
-      return retval;
     }
   else          // real matrices case
     {
 #ifdef DEBUG
       std::cout << "qz: peforming qr decomposition of bb" << std::endl;
 #endif
 
       // compute the QR factorization of bb
@@ -595,16 +712,49 @@ Order of output arguments was selected f
                  F77_CONST_CHAR_ARG2 (&compz, 1),
                  nn, ilo, ihi, aa.fortran_vec (), nn, bb.fortran_vec (),
                  nn, alphar.fortran_vec (), alphai.fortran_vec (),
                  betar.fortran_vec (), QQ.fortran_vec (), nn,
                  ZZ.fortran_vec (), nn, work.fortran_vec (), nn, info
                  F77_CHAR_ARG_LEN (1)
                  F77_CHAR_ARG_LEN (1)
                  F77_CHAR_ARG_LEN (1)));
+      if (compq == 'V')
+       {
+         F77_XFCN (dggbak, DGGBAK,
+		(F77_CONST_CHAR_ARG2 (&bal_job, 1),
+		 F77_CONST_CHAR_ARG2 ("L", 1),
+		 nn, ilo, ihi, lscale.data (), rscale.data (),
+		 nn, QQ.fortran_vec (), nn, info
+		 F77_CHAR_ARG_LEN (1)
+		 F77_CHAR_ARG_LEN (1)));
+
+#ifdef DEBUG
+         if (compq == 'V')
+           std::cout << "qz: balancing done; QQ=" << std::endl << QQ << std::endl;
+#endif
+        }
+
+  // then right
+      if (compz == 'V')
+        {
+           F77_XFCN (dggbak, DGGBAK,
+		(F77_CONST_CHAR_ARG2 (&bal_job, 1),
+		 F77_CONST_CHAR_ARG2 ("R", 1),
+		 nn, ilo, ihi, lscale.data (), rscale.data (),
+		 nn, ZZ.fortran_vec (), nn, info
+		 F77_CHAR_ARG_LEN (1)
+		 F77_CHAR_ARG_LEN (1)));
+
+#ifdef DEBUG
+           if (compz == 'V')
+             std::cout << "qz: balancing done; ZZ=" << std::endl << ZZ << std::endl;
+#endif
+        }
+
     }
 
   // order the QZ decomposition?
   if (! (ord_job == 'N' || ord_job == 'n'))
     {
       if (complex_case)
         {
           // probably not needed, but better be safe
@@ -815,18 +965,29 @@ Order of output arguments was selected f
 
   // compute  generalized eigenvalues?
   ComplexColumnVector gev;
 
   if (nargout < 2 || nargout == 7 || (nargin == 3 && nargout == 4))
     {
       if (complex_case)
         {
-          error ("complex case not yet implemented");
-          return retval;
+	  int cnt = 0;
+
+	  for (int ii = 0; ii < nn; ii++)
+	//    if (cbetar(ii) != 0)
+	      cnt++;
+
+	  ComplexColumnVector tmp(cnt);
+
+	  cnt = 0;
+	  for (int ii = 0; ii < nn; ii++)
+	  //  if (cbetar(ii) != 0)
+	      tmp(cnt++) = xalpha(ii)/xbeta(ii);
+	  gev = tmp;
         }
       else
         {
 #ifdef DEBUG
           std::cout << "qz: computing generalized eigenvalues" << std::endl;
 #endif
 
           // return finite generalized eigenvalues
@@ -847,32 +1008,44 @@ Order of output arguments was selected f
     }
 
   // right, left eigenvector matrices
   if (nargout >= 5)
     {
       char side = (nargout == 5 ? 'R' : 'B');   // which side to compute?
       char howmny = 'B';  // compute all of them and backtransform
       octave_idx_type *select = 0; // dummy pointer; select is not used.
-      octave_idx_type m;
 
       if (complex_case)
         {
-          error ("complex type not yet implemented");
-          return retval;
+          octave_idx_type m;
+	  CVL=CQ;
+	  CVR=CZ;
+	  ComplexRowVector cwork2(2*nn);
+	  RowVector rwork2(8*nn);
+
+	  //octave_idx_type n=nn;
+	  F77_XFCN (ztgevc, ZTGEVC,
+		    (F77_CONST_CHAR_ARG2 (&side, 1),
+		     F77_CONST_CHAR_ARG2 (&howmny, 1),
+		     select, nn, caa.fortran_vec (), nn, cbb.fortran_vec (),
+		     nn, CVL.fortran_vec (), nn, CVR.fortran_vec (), nn, nn,
+		     m, cwork2.fortran_vec (), rwork2.fortran_vec (), info
+		     F77_CHAR_ARG_LEN (1)
+		     F77_CHAR_ARG_LEN (1)));	 
         }
       else
         {
 #ifdef DEBUG
           std::cout << "qz: computing  generalized eigenvectors" << std::endl;
 #endif
 
           VL = QQ;
           VR = ZZ;
-
+	  octave_idx_type m;
           F77_XFCN (dtgevc, DTGEVC,
                     (F77_CONST_CHAR_ARG2 (&side, 1),
                      F77_CONST_CHAR_ARG2 (&howmny, 1),
                      select, nn, aa.fortran_vec (), nn, bb.fortran_vec (),
                      nn, VL.fortran_vec (), nn, VR.fortran_vec (), nn, nn,
                      m, work.fortran_vec (), info
                      F77_CHAR_ARG_LEN (1)
                      F77_CHAR_ARG_LEN (1)));
@@ -943,35 +1116,58 @@ Order of output arguments was selected f
 #ifdef DEBUG
           std::cout << "qz: sort: retval(3) = gev = " << std::endl;
           octave_print_internal (std::cout, gev);
           std::cout << std::endl;
 #endif
           retval(3) = gev;
         }
       else
-        retval(3) = ZZ;
+      {if (complex_case)
+	  retval(3) = CZ;
+	else
+	  retval(3) = ZZ;
+      }
 
     case 3:
       if (nargin == 3)
-        retval(2) = ZZ;
+	retval(2) = CZ;
       else
-        retval(2) = QQ;
-
+      {if (complex_case)
+	retval(2) = CQ.hermitian(); // compabible with MATLAB output
+       else
+	 retval(2) = QQ.transpose();
+      }
     case 2:
+      {if (complex_case)
+      {
+#ifdef DEBUG
+      std::cout << "qz: retval (1) = cbb = " << std::endl;
+      octave_print_internal (std::cout, cbb, 0);
+      std::cout << std::endl << "qz: retval(0) = caa = " <<std::endl;
+      octave_print_internal (std::cout, caa, 0);
+      std::cout << std::endl;
+#endif	
+      retval(1) = cbb;
+      retval(0) = caa;
+      }
+      else
+      { // real case
 #ifdef DEBUG
       std::cout << "qz: retval (1) = bb = " << std::endl;
       octave_print_internal (std::cout, bb, 0);
       std::cout << std::endl << "qz: retval(0) = aa = " <<std::endl;
       octave_print_internal (std::cout, aa, 0);
       std::cout << std::endl;
 #endif
       retval(1) = bb;
       retval(0) = aa;
-      break;
+      }
+      break;}      
+
 
     case 1:
     case 0:
 #ifdef DEBUG
       std::cout << "qz: retval(0) = gev = " << gev << std::endl;
 #endif
       retval(0) = gev;
       break;
