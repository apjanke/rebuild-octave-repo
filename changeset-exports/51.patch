# HG changeset patch
# User jwe
# Date 745102240 0
#      Wed Aug 11 20:50:40 1993 +0000
# Node ID 7806354a10d35116a56038e030b9c981b6ef239b
# Parent  6028dcac27efe55282cec599a67a9eff335fd3fd
[project @ 1993-08-11 20:48:00 by jwe]

diff --git a/src/Makefile.in b/src/Makefile.in
--- a/src/Makefile.in
+++ b/src/Makefile.in
@@ -47,49 +47,50 @@ LIBOBJS = @LIBOBJS@
 	    mv $@.tmp $@ ; \
 	else \
 	  $(CXX) -MM $(CPPFLAGS) $(ALL_CXXFLAGS) $< | \
 	    sed -e 's/$*\.o/& $@/g' -e 's,$(srcdir)/,,g' > $@.tmp && \
 	    mv $@.tmp $@ ; \
 	fi
 
 INCLUDES = arith-ops.h builtins.h dynamic-ld.h defaults.h.in error.h \
-	f-balance.h f-colloc.h f-dassl.h f-det.h f-eig.h f-fft.h \
-	f-fsolve.h f-fsqp.h f-givens.h f-hess.h f-ifft.h f-inv.h \
-	f-lpsolve.h f-lsode.h f-lu.h f-npsol.h f-qpsol.h f-qr.h \
-	f-quad.h f-qzval.h f-rand.h f-schur.h f-svd.h f-syl.h \
-	file-io.h g-builtins.h gripes.h help.h \
+	f-balance.h f-colloc.h f-dassl.h f-det.h f-eig.h f-expm.h \
+	f-fft.h f-fsolve.h f-fsqp.h f-givens.h f-hess.h f-ifft.h \
+	f-inv.h f-lpsolve.h f-lsode.h f-lu.h f-npsol.h f-qpsol.h \
+	f-qr.h f-quad.h f-qzval.h f-rand.h f-schur.h f-svd.h \
+	f-syl.h file-io.h g-builtins.h gripes.h help.h \
 	idx-vector.h input.h lex.h mappers.h missing-math.h octave.h \
 	octave-hist.h pager.h parse.h pr-output.h procstream.h \
 	sighandlers.h statdefs.h symtab.h sysdep.h t-builtins.h \
 	tree-base.h tree-const.h tree.h unwind-prot.h user-prefs.h \
 	utils.h variables.h version.h xdiv.h xpow.h SLStack.h Stack.h
 
 SOURCES = arith-ops.cc builtins.cc dynamic-ld.cc error.cc \
-	f-colloc.cc f-balance.cc f-dassl.cc f-det.cc \
-	f-eig.cc tc-extras.cc f-fft.cc f-fsolve.cc f-fsqp.cc \
-	f-givens.cc f-hess.cc f-ifft.cc f-inv.cc f-lpsolve.cc \
-	f-lsode.cc f-lu.cc f-npsol.cc f-qpsol.cc f-qr.cc f-quad.cc \
-	f-qzval.cc f-rand.cc f-schur.cc f-svd.cc f-syl.cc file-io.cc \
-	g-builtins.cc gripes.cc help.cc idx-vector.cc input.cc lex.l \
-	mappers.cc octave.cc octave-hist.cc pager.cc parse.y \
-	pr-output.cc procstream.cc sighandlers.cc symtab.cc \
-	sysdep.cc t-builtins.cc tc-assign.cc tc-index.cc \
+	f-colloc.cc f-balance.cc f-dassl.cc f-det.cc f-eig.cc \
+	f-expm.cc f-fft.cc f-fsolve.cc f-fsqp.cc f-givens.cc \
+	f-hess.cc f-ifft.cc f-inv.cc f-lpsolve.cc f-lsode.cc f-lu.cc \
+	f-npsol.cc f-qpsol.cc f-qr.cc f-quad.cc f-qzval.cc f-rand.cc \
+	f-schur.cc f-svd.cc f-syl.cc file-io.cc	g-builtins.cc \
+	gripes.cc help.cc idx-vector.cc input.cc lex.l mappers.cc \
+	octave.cc octave-hist.cc pager.cc parse.y pr-output.cc \
+	procstream.cc sighandlers.cc symtab.cc sysdep.cc \
+	t-builtins.cc tc-assign.cc tc-extras.cc tc-index.cc \
 	tc-inlines.cc tree.cc tree-const.cc tree-plot.cc \
 	unwind-prot.cc user-prefs.cc utils.cc variables.cc xdiv.cc \
 	xpow.cc
 
 DEP_SOURCES_1 = $(patsubst %.l, %.cc, $(SOURCES))
 DEP_SOURCES = $(patsubst %.y, %.cc, $(DEP_SOURCES_1))
 MAKEDEPS = $(patsubst %.cc, %.d, $(DEP_SOURCES))
 
 DLD_OBJECTS = f-balance.o f-colloc.o f-dassl.o f-det.o f-eig.o \
-	f-fft.o f-fsolve.o f-fsqp.o f-givens.o f-hess.o f-ifft.o \
-	f-inv.o f-lpsolve.o f-lsode.o f-lu.o f-npsol.o f-qpsol.o \
-	f-qr.o f-quad.o f-qzval.o f-rand.o f-schur.o f-svd.o f-syl.o
+	f-expm.o f-fft.o f-fsolve.o f-fsqp.o f-givens.o f-hess.o \
+	f-ifft.o f-inv.o f-lpsolve.o f-lsode.o f-lu.o f-npsol.o \
+	f-qpsol.o f-qr.o f-quad.o f-qzval.o f-rand.o f-schur.o \
+	f-svd.o f-syl.o 
 
 OBJECTS = arith-ops.o builtins.o error.o file-io.o g-builtins.o \
 	gripes.o help.o idx-vector.o input.o lex.o mappers.o \
 	octave.o octave-hist.o pager.o parse.o pr-output.o \
 	procstream.o sighandlers.o symtab.o sysdep.o t-builtins.o \
 	tc-assign.o tc-extras.o tc-index.o tree.o tree-const.o \
 	tree-plot.o unwind-prot.o user-prefs.o utils.o variables.o \
 	xdiv.o xpow.o \
diff --git a/src/g-builtins.cc b/src/g-builtins.cc
--- a/src/g-builtins.cc
+++ b/src/g-builtins.cc
@@ -46,16 +46,17 @@ Software Foundation, Inc.
 #include <signal.h>
 #include <math.h>
 
 #include "f-balance.h"
 #include "f-colloc.h"
 #include "f-dassl.h"
 #include "f-det.h"
 #include "f-eig.h"
+#include "f-expm.h"
 #include "f-fft.h"
 #include "f-fsolve.h"
 #include "f-fsqp.h"
 #include "f-givens.h"
 #include "f-hess.h"
 #include "f-ifft.h"
 #include "f-inv.h"
 #include "f-lpsolve.h"
@@ -476,17 +477,21 @@ builtin_exist (tree_constant *args, int 
  * Matrix exponential.
  */
 tree_constant *
 builtin_expm (tree_constant *args, int nargin, int nargout)
 {
   tree_constant *retval = NULL_TREE_CONST;
 
   if (nargin == 2)
-    retval = matrix_exp (args[1]);
+    DLD_BUILTIN (args, nargin, nargout, matrix_exp,
+		 {
+		   retval = new tree_constant [2];
+		   retval[0] = matrix_exp (args[1]);
+		 })
   else
     usage ("expm (A)");
 
   return retval;
 }
 
 /*
  * Identity matrix.
diff --git a/src/pt-const.h b/src/pt-const.h
--- a/src/pt-const.h
+++ b/src/pt-const.h
@@ -471,17 +471,16 @@ public:
   friend tree_constant fill_matrix (tree_constant& a, tree_constant& b,
 				    double d, char *warn_for);
 
   friend tree_constant identity_matrix (tree_constant& a);
   friend tree_constant identity_matrix (tree_constant& a, tree_constant& b);
 
   friend tree_constant find_nonzero_elem_idx (tree_constant& a);
 
-  friend tree_constant *matrix_exp (tree_constant& a);
   friend tree_constant *matrix_log (tree_constant& a);
   friend tree_constant *matrix_sqrt (tree_constant& a);
 
   friend tree_constant *column_max (tree_constant *args, int nargin,
 				    int nargout);
 
   friend tree_constant *column_min (tree_constant *args, int nargin,
 				    int nargout);
diff --git a/src/tc-extras.cc b/src/tc-extras.cc
--- a/src/tc-extras.cc
+++ b/src/tc-extras.cc
@@ -321,125 +321,20 @@ find_nonzero_elem_idx (tree_constant& a)
       }
       break;
     default:
       break;
     }
   return retval;
 }
 
-// XXX FIXME XXX -- the next three functions should really be just
+// XXX FIXME XXX -- the next two functions (and expm) should really be just
 // one...
 
 tree_constant *
-matrix_exp (tree_constant& a)
-{
-  tree_constant *retval = new tree_constant [2];
-
-  tree_constant tmp = a.make_numeric ();;
-    
-  if (tmp.rows () == 0 || tmp.columns () == 0)
-    {
-      int flag = user_pref.propagate_empty_matrices;
-      if (flag != 0)
-	{
-	  if (flag < 0)
-	    gripe_empty_arg ("expm", 0);
-	  Matrix m;
-	  retval = new tree_constant [2];
-	  retval[0] = tree_constant (m);
-	  return retval;
-	}
-      else
-	gripe_empty_arg ("expm", 1);
-    }
-
-  switch (tmp.const_type ())
-    {
-    case tree_constant_rep::matrix_constant:
-      {
-	Matrix m = tmp.matrix_value ();
-
-	int nr = m.rows ();
-	int nc = m.columns ();
-
-	if (nr == 0 || nc == 0 || nr != nc)
-	  gripe_square_matrix_required ("expm");
-	else
-	  {
-	    EIG m_eig (m);
-	    ComplexColumnVector lambda (m_eig.eigenvalues ());
-	    ComplexMatrix Q (m_eig.eigenvectors ());
-
-	    for (int i = 0; i < nr; i++)
-	      {
-		Complex elt = lambda.elem (i);
-		if (imag (elt) == 0.0)
-		  lambda.elem (i) = exp (real (elt));
-		else
-		  lambda.elem (i) = exp (elt);
-	      }
-
-	    ComplexDiagMatrix D (lambda);
-	    ComplexMatrix result = Q * D * Q.inverse ();
-
-	    retval[0] = tree_constant (result);
-	  }
-      }
-      break;
-    case tree_constant_rep::complex_matrix_constant:
-      {
-	ComplexMatrix m = tmp.complex_matrix_value ();
-
-	int nr = m.rows ();
-	int nc = m.columns ();
-
-	if (nr == 0 || nc == 0 || nr != nc)
-	  gripe_square_matrix_required ("expm");
-	else
-	  {
-	    EIG m_eig (m);
-	    ComplexColumnVector lambda (m_eig.eigenvalues ());
-	    ComplexMatrix Q (m_eig.eigenvectors ());
-
-	    for (int i = 0; i < nr; i++)
-	      {
-		Complex elt = lambda.elem (i);
-		if (imag (elt) == 0.0)
-		  lambda.elem (i) = exp (real (elt));
-		else
-		  lambda.elem (i) = exp (elt);
-	      }
-
-	    ComplexDiagMatrix D (lambda);
-	    ComplexMatrix result = Q * D * Q.inverse ();
-
-	    retval[0] = tree_constant (result);
-	  }
-      }
-      break;
-    case tree_constant_rep::scalar_constant:
-      {
-	double d = tmp.double_value ();
-	retval[0] = tree_constant (exp (d));
-      }
-      break;
-    case tree_constant_rep::complex_scalar_constant:
-      {
-	Complex c = tmp.complex_value ();
-	retval[0] = tree_constant (exp (c));
-      }
-      break;
-    default:
-      break;
-    }
-  return retval;
-}
-
-tree_constant *
 matrix_log (tree_constant& a)
 {
   tree_constant *retval = new tree_constant [2];
 
   tree_constant tmp = a.make_numeric ();;
     
   if (tmp.rows () == 0 || tmp.columns () == 0)
     {
