# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1245310307 -7200
#      Thu Jun 18 09:31:47 2009 +0200
# Branch release-3-2-x
# Node ID a9d20c890190dbc22133c44a1e367a136208dfdc
# Parent  49affc56fac2c53e7c8766ddc8543ad12d1a52a8
avoid useless zero initialization when doing matrix multiply

diff --git a/liboctave/CMatrix.cc b/liboctave/CMatrix.cc
--- a/liboctave/CMatrix.cc
+++ b/liboctave/CMatrix.cc
@@ -2898,17 +2898,17 @@ operator * (const ComplexColumnVector& v
   ComplexMatrix retval;
 
   octave_idx_type len = v.length ();
 
   if (len != 0)
     {
       octave_idx_type a_len = a.length ();
 
-      retval.resize (len, a_len);
+      retval = ComplexMatrix (len, a_len);
       Complex *c = retval.fortran_vec ();
 
       F77_XFCN (zgemm, ZGEMM, (F77_CONST_CHAR_ARG2 ("N", 1),
 			       F77_CONST_CHAR_ARG2 ("N", 1),
 			       len, a_len, 1, 1.0, v.data (), len,
 			       a.data (), 1, 0.0, c, len
 			       F77_CHAR_ARG_LEN (1)
 			       F77_CHAR_ARG_LEN (1)));
@@ -3783,22 +3783,22 @@ xgemm (bool transa, bool conja, const Co
   octave_idx_type b_nr = transb ? b.cols () : b.rows ();
   octave_idx_type b_nc = transb ? b.rows () : b.cols ();
 
   if (a_nc != b_nr)
     gripe_nonconformant ("operator *", a_nr, a_nc, b_nr, b_nc);
   else
     {
       if (a_nr == 0 || a_nc == 0 || b_nc == 0)
-	retval.resize (a_nr, b_nc, 0.0);
+	retval = ComplexMatrix (a_nr, b_nc, 0.0);
       else if (a.data () == b.data () && a_nr == b_nc && transa != transb)
         {
 	  octave_idx_type lda = a.rows ();
 
-          retval.resize (a_nr, b_nc);
+          retval = ComplexMatrix (a_nr, b_nc);
 	  Complex *c = retval.fortran_vec ();
 
           const char *ctransa = get_blas_trans_arg (transa, conja);
           if (conja || conjb)
             {
               F77_XFCN (zherk, ZHERK, (F77_CONST_CHAR_ARG2 ("U", 1),
                                        F77_CONST_CHAR_ARG2 (ctransa, 1),
                                        a_nr, a_nc, 1.0,
@@ -3824,17 +3824,17 @@ xgemm (bool transa, bool conja, const Co
             }
 
         }
       else
 	{
 	  octave_idx_type lda = a.rows (), tda = a.cols ();
 	  octave_idx_type ldb = b.rows (), tdb = b.cols ();
 
-	  retval.resize (a_nr, b_nc);
+	  retval = ComplexMatrix (a_nr, b_nc);
 	  Complex *c = retval.fortran_vec ();
 
 	  if (b_nc == 1 && a_nr == 1)
 	    {
               if (conja == conjb)
                 {
                   F77_FUNC (xzdotu, XZDOTU) (a_nc, a.data (), 1, b.data (), 1, *c);
                   if (conja) *c = std::conj (*c);
diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,16 @@
+2009-06-18  Jaroslav Hajek  <highegg@gmail.com>
+
+	* dMatrix.cc (xgemm): Replace resize() with uninitialized allocations
+	where appropriate.
+	* fMatrix.cc (xgemm): Ditto.
+	* CMatrix.cc (xgemm): Ditto.
+	* fCMatrix.cc (xgemm): Ditto.
+
 2009-06-09  Jaroslav Hajek  <highegg@gmail.com>
 
 	* cmd-edit.cc (command_editor::force_default_editor): New static
 	method.
 	* cmd-edit.h: Declare it.
 
 2009-06-09  Jaroslav Hajek  <highegg@gmail.com>
 
diff --git a/liboctave/dMatrix.cc b/liboctave/dMatrix.cc
--- a/liboctave/dMatrix.cc
+++ b/liboctave/dMatrix.cc
@@ -2587,17 +2587,17 @@ operator * (const ColumnVector& v, const
   Matrix retval;
 
   octave_idx_type len = v.length ();
 
   if (len != 0)
     {
       octave_idx_type a_len = a.length ();
 
-      retval.resize (len, a_len);
+      retval = Matrix (len, a_len);
       double *c = retval.fortran_vec ();
 	  
       F77_XFCN (dgemm, DGEMM, (F77_CONST_CHAR_ARG2 ("N", 1),
 			       F77_CONST_CHAR_ARG2 ("N", 1),
 			       len, a_len, 1, 1.0, v.data (), len,
 			       a.data (), 1, 0.0, c, len
 			       F77_CHAR_ARG_LEN (1)
 			       F77_CHAR_ARG_LEN (1)));
@@ -3183,22 +3183,22 @@ xgemm (bool transa, const Matrix& a, boo
   octave_idx_type b_nr = transb ? b.cols () : b.rows ();
   octave_idx_type b_nc = transb ? b.rows () : b.cols ();
 
   if (a_nc != b_nr)
     gripe_nonconformant ("operator *", a_nr, a_nc, b_nr, b_nc);
   else
     {
       if (a_nr == 0 || a_nc == 0 || b_nc == 0)
-	retval.resize (a_nr, b_nc, 0.0);
+	retval = Matrix (a_nr, b_nc, 0.0);
       else if (a.data () == b.data () && a_nr == b_nc && transa != transb)
         {
 	  octave_idx_type lda = a.rows ();
 
-          retval.resize (a_nr, b_nc);
+          retval = Matrix (a_nr, b_nc);
 	  double *c = retval.fortran_vec ();
 
           const char *ctransa = get_blas_trans_arg (transa);
           F77_XFCN (dsyrk, DSYRK, (F77_CONST_CHAR_ARG2 ("U", 1),
                                    F77_CONST_CHAR_ARG2 (ctransa, 1),
                                    a_nr, a_nc, 1.0,
                                    a.data (), lda, 0.0, c, a_nr
                                    F77_CHAR_ARG_LEN (1)
@@ -3208,17 +3208,17 @@ xgemm (bool transa, const Matrix& a, boo
               retval.xelem (j,i) = retval.xelem (i,j);
 
         }
       else
 	{
 	  octave_idx_type lda = a.rows (), tda = a.cols ();
 	  octave_idx_type ldb = b.rows (), tdb = b.cols ();
 
-	  retval.resize (a_nr, b_nc);
+	  retval = Matrix (a_nr, b_nc);
 	  double *c = retval.fortran_vec ();
 
 	  if (b_nc == 1)
 	    {
 	      if (a_nr == 1)
 		F77_FUNC (xddot, XDDOT) (a_nc, a.data (), 1, b.data (), 1, *c);
 	      else
 		{
diff --git a/liboctave/fCMatrix.cc b/liboctave/fCMatrix.cc
--- a/liboctave/fCMatrix.cc
+++ b/liboctave/fCMatrix.cc
@@ -2891,17 +2891,17 @@ operator * (const FloatComplexColumnVect
   FloatComplexMatrix retval;
 
   octave_idx_type len = v.length ();
 
   if (len != 0)
     {
       octave_idx_type a_len = a.length ();
 
-      retval.resize (len, a_len);
+      retval = FloatComplexMatrix (len, a_len);
       FloatComplex *c = retval.fortran_vec ();
 
       F77_XFCN (cgemm, CGEMM, (F77_CONST_CHAR_ARG2 ("N", 1),
 			       F77_CONST_CHAR_ARG2 ("N", 1),
 			       len, a_len, 1, 1.0, v.data (), len,
 			       a.data (), 1, 0.0, c, len
 			       F77_CHAR_ARG_LEN (1)
 			       F77_CHAR_ARG_LEN (1)));
@@ -3776,22 +3776,22 @@ xgemm (bool transa, bool conja, const Fl
   octave_idx_type b_nr = transb ? b.cols () : b.rows ();
   octave_idx_type b_nc = transb ? b.rows () : b.cols ();
 
   if (a_nc != b_nr)
     gripe_nonconformant ("operator *", a_nr, a_nc, b_nr, b_nc);
   else
     {
       if (a_nr == 0 || a_nc == 0 || b_nc == 0)
-	retval.resize (a_nr, b_nc, 0.0);
+	retval = FloatComplexMatrix (a_nr, b_nc, 0.0);
       else if (a.data () == b.data () && a_nr == b_nc && transa != transb)
         {
 	  octave_idx_type lda = a.rows ();
 
-          retval.resize (a_nr, b_nc);
+          retval = FloatComplexMatrix (a_nr, b_nc);
 	  FloatComplex *c = retval.fortran_vec ();
 
           const char *ctransa = get_blas_trans_arg (transa, conja);
           if (conja || conjb)
             {
               F77_XFCN (cherk, CHERK, (F77_CONST_CHAR_ARG2 ("U", 1),
                                        F77_CONST_CHAR_ARG2 (ctransa, 1),
                                        a_nr, a_nc, 1.0,
@@ -3817,17 +3817,17 @@ xgemm (bool transa, bool conja, const Fl
             }
 
         }
       else
 	{
 	  octave_idx_type lda = a.rows (), tda = a.cols ();
 	  octave_idx_type ldb = b.rows (), tdb = b.cols ();
 
-	  retval.resize (a_nr, b_nc);
+	  retval = FloatComplexMatrix (a_nr, b_nc);
 	  FloatComplex *c = retval.fortran_vec ();
 
 	  if (b_nc == 1 && a_nr == 1)
 	    {
               if (conja == conjb)
                 {
                   F77_FUNC (xcdotu, XCDOTU) (a_nc, a.data (), 1, b.data (), 1, *c);
                   if (conja) *c = std::conj (*c);
diff --git a/liboctave/fMatrix.cc b/liboctave/fMatrix.cc
--- a/liboctave/fMatrix.cc
+++ b/liboctave/fMatrix.cc
@@ -2586,17 +2586,17 @@ operator * (const FloatColumnVector& v, 
   FloatMatrix retval;
 
   octave_idx_type len = v.length ();
 
   if (len != 0)
     {
       octave_idx_type a_len = a.length ();
 
-      retval.resize (len, a_len);
+      retval = FloatMatrix (len, a_len);
       float *c = retval.fortran_vec ();
 	  
       F77_XFCN (sgemm, SGEMM, (F77_CONST_CHAR_ARG2 ("N", 1),
 			       F77_CONST_CHAR_ARG2 ("N", 1),
 			       len, a_len, 1, 1.0, v.data (), len,
 			       a.data (), 1, 0.0, c, len
 			       F77_CHAR_ARG_LEN (1)
 			       F77_CHAR_ARG_LEN (1)));
@@ -3182,22 +3182,22 @@ xgemm (bool transa, const FloatMatrix& a
   octave_idx_type b_nr = transb ? b.cols () : b.rows ();
   octave_idx_type b_nc = transb ? b.rows () : b.cols ();
 
   if (a_nc != b_nr)
     gripe_nonconformant ("operator *", a_nr, a_nc, b_nr, b_nc);
   else
     {
       if (a_nr == 0 || a_nc == 0 || b_nc == 0)
-	retval.resize (a_nr, b_nc, 0.0);
+	retval = FloatMatrix (a_nr, b_nc, 0.0);
       else if (a.data () == b.data () && a_nr == b_nc && transa != transb)
         {
 	  octave_idx_type lda = a.rows ();
 
-          retval.resize (a_nr, b_nc);
+          retval = FloatMatrix (a_nr, b_nc);
 	  float *c = retval.fortran_vec ();
 
           const char *ctransa = get_blas_trans_arg (transa);
           F77_XFCN (ssyrk, SSYRK, (F77_CONST_CHAR_ARG2 ("U", 1),
                                    F77_CONST_CHAR_ARG2 (ctransa, 1),
                                    a_nr, a_nc, 1.0,
                                    a.data (), lda, 0.0, c, a_nr
                                    F77_CHAR_ARG_LEN (1)
@@ -3207,17 +3207,17 @@ xgemm (bool transa, const FloatMatrix& a
               retval.xelem (j,i) = retval.xelem (i,j);
 
         }
       else
 	{
 	  octave_idx_type lda = a.rows (), tda = a.cols ();
 	  octave_idx_type ldb = b.rows (), tdb = b.cols ();
 
-	  retval.resize (a_nr, b_nc);
+	  retval = FloatMatrix (a_nr, b_nc);
 	  float *c = retval.fortran_vec ();
 
 	  if (b_nc == 1)
 	    {
 	      if (a_nr == 1)
 		F77_FUNC (xsdot, XSDOT) (a_nc, a.data (), 1, b.data (), 1, *c);
 	      else
 		{
