# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1450284071 18000
#      Wed Dec 16 11:41:11 2015 -0500
# Node ID 03e4ddd49396c8a02b6353a9662b4421c0de3a08
# Parent  0fb9de5b790310d2018534562b6c8466595a63ab
omit unnecessary nargout checks

* paramdemo.cc, __ichol__.cc, __ilu__.cc, balance.cc, dassl.cc,
eig.cc, ellipj.cc, filter.cc, givens.cc, hess.cc, lsode.cc, lu.cc,
mgorth.cc, nproc.cc, pr-output.cc, quad.cc, quadcc.cc, sylvester.cc,
urlwrite.cc, variables.cc, ccolamd.cc, colamd.cc, qr.cc: Don't call
print_usage based on value of nargout.  If nargout doesn't alter
function behavior and returning extra values is inexpensive, simply
return them instead of checking nargout.

diff --git a/examples/code/paramdemo.cc b/examples/code/paramdemo.cc
--- a/examples/code/paramdemo.cc
+++ b/examples/code/paramdemo.cc
@@ -1,18 +1,15 @@
 #include <octave/oct.h>
 
 DEFUN_DLD (paramdemo, args, nargout, "Parameter Check Demo")
 {
   if (args.length () != 1)
     print_usage ();
 
-  if (nargout != 0)
-    error ("paramdemo: OUTPUT argument required");
-
   NDArray m = args(0).array_value ();
 
   double min_val = -10.0;
   double max_val = 10.0;
 
   octave_stdout << "Properties of input array:\n";
 
   if (m.any_element_is_negative ())
diff --git a/libinterp/corefcn/__ichol__.cc b/libinterp/corefcn/__ichol__.cc
--- a/libinterp/corefcn/__ichol__.cc
+++ b/libinterp/corefcn/__ichol__.cc
@@ -186,17 +186,17 @@ Undocumented internal function.\n\
 @end deftypefn")
 
 {
   octave_value_list retval;
 
   int nargin = args.length ();
   std::string michol = "off";
 
-  if (nargout > 1 || nargin < 1 || nargin > 2)
+  if (nargin < 1 || nargin > 2)
     print_usage ();
 
   if (nargin == 2)
     michol = args(1).string_value ();
 
   // In ICHOL0 algorithm the zero-pattern of the input matrix is preserved
   // so it's structure does not change during the algorithm.  The same input
   // matrix is used to build the output matrix due to that fact.
@@ -433,17 +433,17 @@ Undocumented internal function.\n\
 @end deftypefn")
 {
   octave_value_list retval;
   int nargin = args.length ();
   // Default values of parameters
   std::string michol = "off";
   double droptol = 0;
 
-  if (nargout > 1 || nargin < 1 || nargin > 3)
+  if (nargin < 1 || nargin > 3)
     print_usage ();
 
   // Don't repeat input validation of arguments done in ichol.m
 
   if (nargin >= 2)
     droptol = args(1).double_value ();
 
   if (nargin == 3)
diff --git a/libinterp/corefcn/__ilu__.cc b/libinterp/corefcn/__ilu__.cc
--- a/libinterp/corefcn/__ilu__.cc
+++ b/libinterp/corefcn/__ilu__.cc
@@ -131,17 +131,17 @@ DEFUN (__ilu0__, args, nargout,
 @deftypefn  {} {[@var{L}, @var{U}] =} __ilu0__ (@var{A})\n\
 @deftypefnx {} {[@var{L}, @var{U}] =} __ilu0__ (@var{A}, @var{milu})\n\
 @deftypefnx {} {[@var{L}, @var{U}, @var{P}] =} __ilu0__ (@var{A}, @dots{})\n\
 Undocumented internal function.\n\
 @end deftypefn")
 {
   int nargin = args.length ();
 
-  if (nargout > 2 || nargin < 1 || nargin > 2)
+  if (nargin < 1 || nargin > 2)
     print_usage ();
 
   octave_value_list retval (2);
 
   std::string milu;
 
   // In ILU0 algorithm the zero-pattern of the input matrix is preserved so
   // it's structure does not change during the algorithm.  The same input
@@ -468,17 +468,17 @@ DEFUN (__iluc__, args, nargout,
 @deftypefn  {} {[@var{L}, @var{U}] =} __iluc__ (@var{A})\n\
 @deftypefnx {} {[@var{L}, @var{U}] =} __iluc__ (@var{A}, @var{droptol})\n\
 @deftypefnx {} {[@var{L}, @var{U}] =} __iluc__ (@var{A}, @var{droptol}, @var{milu})\n\
 Undocumented internal function.\n\
 @end deftypefn")
 {
   int nargin = args.length ();
 
-  if (nargout != 2 || nargin < 1 || nargin > 3)
+  if (nargin < 1 || nargin > 3)
     print_usage ();
 
   std::string milu = "off";
   double droptol = 0;
 
   // Don't repeat input validation of arguments done in ilu.m
   if (nargin >= 2)
     droptol = args(1).double_value ();
@@ -935,17 +935,17 @@ DEFUN (__ilutp__, args, nargout,
 @deftypefnx {} {[@var{L}, @var{U}] =} __ilutp__ (@var{A}, @var{droptol}, @var{thresh}, @var{milu})\n\
 @deftypefnx {} {[@var{L}, @var{U}] =} __ilutp__ (@var{A}, @var{droptol}, @var{thresh}, @var{milu}, @var{udiag})\n\
 @deftypefnx {} {[@var{L}, @var{U}, @var{P}] =} __ilutp__ (@var{A}, @dots{})\n\
 Undocumented internal function.\n\
 @end deftypefn")
 {
   int nargin = args.length ();
 
-  if (nargout < 2 || nargout > 3 || nargin < 1 || nargin > 5)
+  if (nargin < 1 || nargin > 5)
     print_usage ();
 
   octave_value_list retval;
   std::string milu = "";
   double droptol = 0;
   double thresh = 1;
   double udiag = 0;
 
diff --git a/libinterp/corefcn/balance.cc b/libinterp/corefcn/balance.cc
--- a/libinterp/corefcn/balance.cc
+++ b/libinterp/corefcn/balance.cc
@@ -90,17 +90,17 @@ Algebraic eigenvalue balancing uses stan
 Generalized eigenvalue problem balancing uses Ward's algorithm\n\
 (SIAM Journal on Scientific and Statistical Computing, 1981).\n\
 @end deftypefn")
 {
   octave_value_list retval;
 
   int nargin = args.length ();
 
-  if (nargin < 1 || nargin > 3 || nargout < 0 || nargout > 4)
+  if (nargin < 1 || nargin > 3 || nargout < 0)
     print_usage ();
 
   // determine if it's AEP or GEP
   bool AEPcase = nargin == 1 || args(1).is_string ();
 
   // problem dimension
   octave_idx_type nn = args(0).rows ();
 
@@ -155,84 +155,67 @@ Generalized eigenvalue problem balancing
         {
           if (complex_case)
             {
               FloatComplexAEPBALANCE result (fcaa, noperm, noscal);
 
               if (nargout == 0 || nargout == 1)
                 retval = ovl (result.balanced_matrix ());
               else if (nargout == 2)
-                {
-                  retval = ovl (result.balancing_matrix (),
-                                result.balanced_matrix ());
-                }
+                retval = ovl (result.balancing_matrix (),
+                              result.balanced_matrix ());
               else
-                {
-                  retval = ovl (result.scaling_vector (),
-                                result.permuting_vector (),
-                                result.balanced_matrix ());
-                }
-
+                retval = ovl (result.scaling_vector (),
+                              result.permuting_vector (),
+                              result.balanced_matrix ());
             }
           else
             {
               FloatAEPBALANCE result (faa, noperm, noscal);
 
               if (nargout == 0 || nargout == 1)
                 retval = ovl (result.balanced_matrix ());
               else if (nargout == 2)
-                {
-                  retval = ovl (result.balancing_matrix (),
-                                result.balanced_matrix ());
-                }
+                retval = ovl (result.balancing_matrix (),
+                              result.balanced_matrix ());
               else
-                {
-                  retval = ovl (result.scaling_vector (),
-                                result.permuting_vector (),
-                                result.balanced_matrix ());
-                }
+                retval = ovl (result.scaling_vector (),
+                              result.permuting_vector (),
+                              result.balanced_matrix ());
             }
         }
       else
         {
           if (complex_case)
             {
               ComplexAEPBALANCE result (caa, noperm, noscal);
 
               if (nargout == 0 || nargout == 1)
                 retval = ovl (result.balanced_matrix ());
               else if (nargout == 2)
-                {
-                  retval = ovl (result.balancing_matrix (),
-                                result.balanced_matrix ());
-                }
+                retval = ovl (result.balancing_matrix (),
+                              result.balanced_matrix ());
               else
-                {
-                  retval = ovl (result.scaling_vector (),
-                                result.permuting_vector (),
-                                result.balanced_matrix ());
-                }
+                retval = ovl (result.scaling_vector (),
+                              result.permuting_vector (),
+                              result.balanced_matrix ());
             }
           else
             {
               AEPBALANCE result (aa, noperm, noscal);
 
               if (nargout == 0 || nargout == 1)
                 retval = ovl (result.balanced_matrix ());
               else if (nargout == 2)
-                {
-                  retval = ovl (result.balancing_matrix (),
-                                result.balanced_matrix ());
-                }
+                retval = ovl (result.balancing_matrix (),
+                              result.balanced_matrix ());
               else
-                {
-                  retval = ovl (result.scaling_vector (),
-                                result.permuting_vector (),
-                                result.balanced_matrix ());
-                }
+                retval = ovl (result.scaling_vector (),
+                              result.permuting_vector (),
+                              result.balanced_matrix ());
             }
         }
     }
   else
     {
       std::string bal_job;
       if (nargout == 1)
         warning ("balance: used GEP, should have two output arguments");
diff --git a/libinterp/corefcn/dassl.cc b/libinterp/corefcn/dassl.cc
--- a/libinterp/corefcn/dassl.cc
+++ b/libinterp/corefcn/dassl.cc
@@ -288,17 +288,17 @@ parameters for @code{dassl}.\n\
   frame.protect_var (call_depth);
   call_depth++;
 
   if (call_depth > 1)
     DASSL_ABORT1 ("invalid recursive call");
 
   int nargin = args.length ();
 
-  if (nargin < 4 || nargin > 5 || nargout > 4)
+  if (nargin < 4 || nargin > 5)
     print_usage ();
 
   std::string fcn_name, fname, jac_name, jname;
   dassl_fcn = 0;
   dassl_jac = 0;
 
   octave_value f_arg = args(0);
 
diff --git a/libinterp/corefcn/eig.cc b/libinterp/corefcn/eig.cc
--- a/libinterp/corefcn/eig.cc
+++ b/libinterp/corefcn/eig.cc
@@ -49,17 +49,17 @@ matrices, if they are real or complex, a
 The eigenvalues returned by @code{eig} are not ordered.\n\
 @seealso{eigs, svd}\n\
 @end deftypefn")
 {
   octave_value_list retval;
 
   int nargin = args.length ();
 
-  if (nargin > 2 || nargin == 0 || nargout > 2)
+  if (nargin > 2 || nargin == 0)
     print_usage ();
 
   octave_value arg_a, arg_b;
 
   octave_idx_type nr_a, nr_b, nc_a, nc_b;
   nr_a = nr_b = nc_a = nc_b = 0;
 
   arg_a = args(0);
diff --git a/libinterp/corefcn/ellipj.cc b/libinterp/corefcn/ellipj.cc
--- a/libinterp/corefcn/ellipj.cc
+++ b/libinterp/corefcn/ellipj.cc
@@ -68,18 +68,16 @@ and 16.15), Dover, 1965.\n\
 @seealso{ellipke}\n\
 @end deftypefn")
 {
   int nargin = args.length ();
 
   if (nargin < 2 || nargin > 3)
     print_usage ();
 
-  octave_value_list retval (nargout > 3 ? 4 : 3);
-
   octave_value u_arg = args(0);
   octave_value m_arg = args(1);
 
   if (m_arg.is_scalar_type ())
     {
       double m = args(1).xdouble_value ("ellipj: M must be a scalar or matrix");
 
       if (u_arg.is_scalar_type ())
@@ -89,35 +87,29 @@ and 16.15), Dover, 1965.\n\
               // u real, m scalar
               double u = args(0).xdouble_value ("ellipj: U must be a scalar or matrix");
 
               double sn, cn, dn;
               double err = 0;
 
               ellipj (u, m, sn, cn, dn, err);
 
-              if (nargout <= 3)
-                return ovl (sn, cn, dn);
-              else
-                return ovl (sn, cn, dn, err);
+              return ovl (sn, cn, dn, err);
             }
           else
             {
               // u complex, m scalar
               Complex u = u_arg.xcomplex_value ("ellipj: U must be a scalar or matrix");
 
               Complex sn, cn, dn;
               double err = 0;
 
               ellipj (u, m, sn, cn, dn, err);
 
-              if (nargout <= 3)
-                return ovl (sn, cn, dn);
-              else
-                return ovl (sn, cn, dn, err);
+              return ovl (sn, cn, dn, err);
             }
         }
       else
         {
           // u is matrix, m is scalar
           ComplexNDArray u = u_arg.xcomplex_array_value ("ellipj: U must be a scalar or matrix");
 
           dim_vector sz_u = u.dims ();
@@ -130,21 +122,17 @@ and 16.15), Dover, 1965.\n\
           Complex *pcn = cn.fortran_vec ();
           Complex *pdn = dn.fortran_vec ();
           double *perr = err.fortran_vec ();
           octave_idx_type nel = u.numel ();
 
           for (octave_idx_type i = 0; i < nel; i++)
             ellipj (pu[i], m, psn[i], pcn[i], pdn[i], perr[i]);
 
-
-          if (nargout <= 3)
-            return ovl (sn, cn, dn);
-          else
-            return ovl (sn, cn, dn, err);
+          return ovl (sn, cn, dn, err);
         }
     }
   else
     {
       NDArray m = args(1).xarray_value ("ellipj: M must be a scalar or matrix");
 
       dim_vector sz_m = m.dims ();
 
@@ -164,20 +152,17 @@ and 16.15), Dover, 1965.\n\
               double *pcn = cn.fortran_vec ();
               double *pdn = dn.fortran_vec ();
               double *perr = err.fortran_vec ();
               octave_idx_type nel = m.numel ();
 
               for (octave_idx_type i = 0; i < nel; i++)
                 ellipj (u, pm[i], psn[i], pcn[i], pdn[i], perr[i]);
 
-              if (nargout <= 3)
-                return ovl (sn, cn, dn);
-              else
-                return ovl (sn, cn, dn, err);
+              return ovl (sn, cn, dn, err);
             }
           else
             {
               // u is complex scalar, m is array
               Complex u = u_arg.xcomplex_value ("ellipj: U must be a scalar or matrix");
 
               ComplexNDArray sn (sz_m), cn (sz_m), dn (sz_m);
               NDArray err (sz_m);
@@ -187,20 +172,17 @@ and 16.15), Dover, 1965.\n\
               Complex *pcn = cn.fortran_vec ();
               Complex *pdn = dn.fortran_vec ();
               double *perr = err.fortran_vec ();
               octave_idx_type nel = m.numel ();
 
               for (octave_idx_type i = 0; i < nel; i++)
                 ellipj (u, pm[i], psn[i], pcn[i], pdn[i], perr[i]);
 
-              if (nargout <= 3)
-                return ovl (sn, cn, dn);
-              else
-                return ovl (sn, cn, dn, err);
+              return ovl (sn, cn, dn, err);
             }
         }
       else
         {
           // u is array, m is array
           if (u_arg.is_real_type ())
             {
               // u is real array, m is array
@@ -222,20 +204,17 @@ and 16.15), Dover, 1965.\n\
                   const double *pu = u.data ();
                   const double *pm = m.data ();
 
                   for (octave_idx_type j = 0; j < mc; j++)
                     for (octave_idx_type i = 0; i < ur; i++)
                       ellipj (pu[i], pm[j], sn(i,j), cn(i,j), dn(i,j),
                               err(i,j));
 
-                  if (nargout <= 3)
-                    return ovl (sn, cn, dn);
-                  else
-                    return ovl (sn, cn, dn, err);
+                  return ovl (sn, cn, dn, err);
                 }
               else if (sz_m == sz_u)
                 {
                   NDArray sn (sz_m), cn (sz_m), dn (sz_m);
                   NDArray err (sz_m);
 
                   const double *pu = u.data ();
                   const double *pm = m.data ();
@@ -243,20 +222,17 @@ and 16.15), Dover, 1965.\n\
                   double *pcn = cn.fortran_vec ();
                   double *pdn = dn.fortran_vec ();
                   double *perr = err.fortran_vec ();
                   octave_idx_type nel = m.numel ();
 
                   for (octave_idx_type i = 0; i < nel; i++)
                     ellipj (pu[i], pm[i], psn[i], pcn[i], pdn[i], perr[i]);
 
-                  if (nargout <= 3)
-                    return ovl (sn, cn, dn);
-                  else
-                    return ovl (sn, cn, dn, err);
+                  return ovl (sn, cn, dn, err);
                 }
               else
                 error ("ellipj: Invalid size combination for U and M");
             }
           else
             {
               // u is complex array, m is array
               ComplexNDArray u = u_arg.xcomplex_array_value ("ellipj: U must be a scalar or matrix");
@@ -277,20 +253,17 @@ and 16.15), Dover, 1965.\n\
                   const Complex *pu = u.data ();
                   const double  *pm = m.data ();
 
                   for (octave_idx_type j = 0; j < mc; j++)
                     for (octave_idx_type i = 0; i < ur; i++)
                       ellipj (pu[i], pm[j], sn(i,j), cn(i,j), dn(i,j),
                               err(i,j));
 
-                  if (nargout <= 3)
-                    return ovl (sn, cn, dn);
-                  else
-                    return ovl (sn, cn, dn, err);
+                  return ovl (sn, cn, dn, err);
                 }
               else if (sz_m == sz_u)
                 {
                   ComplexNDArray sn (sz_m), cn (sz_m), dn (sz_m);
                   NDArray err (sz_m);
 
                   const Complex *pu = u.data ();
                   const double  *pm = m.data ();
@@ -298,28 +271,25 @@ and 16.15), Dover, 1965.\n\
                   Complex *pcn = cn.fortran_vec ();
                   Complex *pdn = dn.fortran_vec ();
                   double *perr = err.fortran_vec ();
                   octave_idx_type nel = m.numel ();
 
                   for (octave_idx_type i = 0; i < nel; i++)
                     ellipj (pu[i], pm[i], psn[i], pcn[i], pdn[i], perr[i]);
 
-                  if (nargout <= 3)
-                    return ovl (sn, cn, dn);
-                  else
-                    return ovl (sn, cn, dn, err);
+                  return ovl (sn, cn, dn, err);
                 }
               else
                 error ("ellipj: Invalid size combination for U and M");
             }
         }
     }  // m matrix
 
-  return retval;
+  return octave_value_list ();
 }
 
 /*
 ## demos taken from inst/ellipj.m
 
 %!demo
 %! N = 150;
 %! # m = [1-logspace(0,log(eps),N-1), 1]; # m near 1
diff --git a/libinterp/corefcn/filter.cc b/libinterp/corefcn/filter.cc
--- a/libinterp/corefcn/filter.cc
+++ b/libinterp/corefcn/filter.cc
@@ -395,17 +395,17 @@ H(z) = ---------------------\n\
       while (dim < x_dims.length () && x_dims(dim) <= 1)
         dim++;
 
       // All dimensions singleton, pick first dimension
       if (dim == x_dims.length ())
         dim = 0;
     }
 
-  octave_value_list retval (nargout > 1 ? 2 : 1);
+  octave_value_list retval;
 
   bool isfloat = (args(0).is_single_type ()
                   || args(1).is_single_type ()
                   || args(2).is_single_type ()
                   || (nargin >= 4 && args(3).is_single_type ()));
 
   if (args(0).is_complex_type ()
       || args(1).is_complex_type ()
@@ -439,19 +439,17 @@ H(z) = ---------------------\n\
               si = args(3).xfloat_complex_array_value (x_si_errmsg);
 
               if (si.is_vector () && x.is_vector ())
                 si = si.reshape (dim_vector (si.numel (), 1));
             }
 
           FloatComplexNDArray y (filter (b, a, x, si, dim));
 
-          retval(0) = y;
-          if (nargout == 2)
-            retval(1) = si;
+          retval = ovl (y, si);
         }
       else
         {
           ComplexColumnVector b = args(0).xcomplex_vector_value (a_b_errmsg);
           ComplexColumnVector a = args(1).xcomplex_vector_value (a_b_errmsg);
 
           ComplexNDArray x = args(2).xcomplex_array_value (x_si_errmsg);
 
@@ -476,19 +474,17 @@ H(z) = ---------------------\n\
               si = args(3).xcomplex_array_value (x_si_errmsg);
 
               if (si.is_vector () && x.is_vector ())
                 si = si.reshape (dim_vector (si.numel (), 1));
             }
 
           ComplexNDArray y (filter (b, a, x, si, dim));
 
-          retval(0) = y;
-          if (nargout == 2)
-            retval(1) = si;
+          retval = ovl (y, si);
         }
     }
   else
     {
       if (isfloat)
         {
           FloatColumnVector b = args(0).xfloat_vector_value (a_b_errmsg);
           FloatColumnVector a = args(1).xfloat_vector_value (a_b_errmsg);
@@ -516,19 +512,17 @@ H(z) = ---------------------\n\
               si = args(3).xfloat_array_value (x_si_errmsg);
 
               if (si.is_vector () && x.is_vector ())
                 si = si.reshape (dim_vector (si.numel (), 1));
             }
 
           FloatNDArray y (filter (b, a, x, si, dim));
 
-          retval(0) = y;
-          if (nargout == 2)
-            retval(1) = si;
+          retval = ovl (y, si);
         }
       else
         {
           ColumnVector b = args(0).xvector_value (a_b_errmsg);
           ColumnVector a = args(1).xvector_value (a_b_errmsg);
 
           NDArray x = args(2).xarray_value (x_si_errmsg);
 
@@ -553,19 +547,17 @@ H(z) = ---------------------\n\
               si = args(3).xarray_value (x_si_errmsg);
 
               if (si.is_vector () && x.is_vector ())
                 si = si.reshape (dim_vector (si.numel (), 1));
             }
 
           NDArray y (filter (b, a, x, si, dim));
 
-          retval(0) = y;
-          if (nargout == 2)
-            retval(1) = si;
+          retval = ovl (y, si);
         }
     }
 
   return retval;
 }
 
 template MArray<double>
 filter (MArray<double>&, MArray<double>&, MArray<double>&,
diff --git a/libinterp/corefcn/givens.cc b/libinterp/corefcn/givens.cc
--- a/libinterp/corefcn/givens.cc
+++ b/libinterp/corefcn/givens.cc
@@ -71,17 +71,17 @@ givens (1, 1)\n\
        -0.70711   0.70711\n\
 @end group\n\
 @end example\n\
 @seealso{planerot}\n\
 @end deftypefn")
 {
   octave_value_list retval;
 
-  if (args.length () != 2 || nargout > 2)
+  if (args.length () != 2)
     print_usage ();
 
   if (args(0).is_single_type () || args(1).is_single_type ())
     {
       if (args(0).is_complex_type () || args(1).is_complex_type ())
         {
           FloatComplex cx = args(0).float_complex_value ();
           FloatComplex cy = args(1).float_complex_value ();
diff --git a/libinterp/corefcn/hess.cc b/libinterp/corefcn/hess.cc
--- a/libinterp/corefcn/hess.cc
+++ b/libinterp/corefcn/hess.cc
@@ -61,17 +61,17 @@ The Hessenberg decomposition is usually 
 eigenvalue computation, but has other applications as well\n\
 (see @nospell{Golub, Nash, and Van Loan},\n\
 IEEE Transactions on Automatic Control, 1979).\n\
 @seealso{eig, chol, lu, qr, qz, schur, svd}\n\
 @end deftypefn")
 {
   octave_value_list retval;
 
-  if (args.length () != 1 || nargout > 2)
+  if (args.length () != 1)
     print_usage ();
 
   octave_value arg = args(0);
 
   octave_idx_type nr = arg.rows ();
   octave_idx_type nc = arg.columns ();
 
   int arg_is_empty = empty_arg ("hess", nr, nc);
@@ -93,65 +93,57 @@ IEEE Transactions on Automatic Control, 
         {
           FloatMatrix tmp = arg.float_matrix_value ();
 
           FloatHESS result (tmp);
 
           if (nargout <= 1)
             retval = ovl (result.hess_matrix ());
           else
-            {
-              retval = ovl (result.unitary_hess_matrix (),
-                            result.hess_matrix ());
-            }
+            retval = ovl (result.unitary_hess_matrix (),
+                          result.hess_matrix ());
         }
       else if (arg.is_complex_type ())
         {
           FloatComplexMatrix ctmp = arg.float_complex_matrix_value ();
 
           FloatComplexHESS result (ctmp);
 
           if (nargout <= 1)
             retval = ovl (result.hess_matrix ());
           else
-            {
-              retval = ovl (result.unitary_hess_matrix (),
-                            result.hess_matrix ());
-            }
+            retval = ovl (result.unitary_hess_matrix (),
+                          result.hess_matrix ());
         }
     }
   else
     {
       if (arg.is_real_type ())
         {
           Matrix tmp = arg.matrix_value ();
 
           HESS result (tmp);
 
           if (nargout <= 1)
             retval = ovl (result.hess_matrix ());
           else
-            {
-              retval = ovl (result.unitary_hess_matrix (),
-                            result.hess_matrix ());
-            }
+            retval = ovl (result.unitary_hess_matrix (),
+                          result.hess_matrix ());
         }
       else if (arg.is_complex_type ())
         {
           ComplexMatrix ctmp = arg.complex_matrix_value ();
 
           ComplexHESS result (ctmp);
 
           if (nargout <= 1)
             retval = ovl (result.hess_matrix ());
           else
-            {
-              retval = ovl (result.unitary_hess_matrix (),
-                            result.hess_matrix ());
-            }
+            retval = ovl (result.unitary_hess_matrix (),
+                          result.hess_matrix ());
         }
       else
         {
           gripe_wrong_type_arg ("hess", arg);
         }
     }
 
   return retval;
diff --git a/libinterp/corefcn/lsode.cc b/libinterp/corefcn/lsode.cc
--- a/libinterp/corefcn/lsode.cc
+++ b/libinterp/corefcn/lsode.cc
@@ -258,17 +258,17 @@ other than 2 and @var{msg} will contain 
 \n\
 You can use the function @code{lsode_options} to set optional\n\
 parameters for @code{lsode}.\n\
 @seealso{daspk, dassl, dasrt}\n\
 @end deftypefn")
 {
   int nargin = args.length ();
 
-  if (nargin < 3 || nargin > 4 || nargout > 3)
+  if (nargin < 3 || nargin > 4)
     print_usage ();
 
   warned_fcn_imaginary = false;
   warned_jac_imaginary = false;
 
   unwind_protect frame;
 
   frame.protect_var (call_depth);
diff --git a/libinterp/corefcn/lu.cc b/libinterp/corefcn/lu.cc
--- a/libinterp/corefcn/lu.cc
+++ b/libinterp/corefcn/lu.cc
@@ -140,18 +140,17 @@ is embedded into @var{U} to give a retur
 For both full and sparse matrices, @code{lu} loses the permutation\n\
 information.\n\
 @seealso{luupdate, ilu, chol, hess, qr, qz, schur, svd}\n\
 @end deftypefn")
 {
   int nargin = args.length ();
   bool issparse = (nargin > 0 && args(0).is_sparse_type ());
 
-  if (nargin < 1 || (issparse && (nargin > 3 || nargout > 5))
-      || (! issparse && (nargin > 2 || nargout > 3)))
+  if (nargin < 1 || (issparse && nargin > 3) || (! issparse && nargin > 2))
     print_usage ();
 
   bool vecout = false;
   Matrix thres;
   int n = 1;
 
   while (n < nargin)
     {
diff --git a/libinterp/corefcn/mgorth.cc b/libinterp/corefcn/mgorth.cc
--- a/libinterp/corefcn/mgorth.cc
+++ b/libinterp/corefcn/mgorth.cc
@@ -64,17 +64,17 @@ On exit, @var{y} is a unit vector such t
   @var{x} = [@var{v}, @var{y}]*@var{h}'\n\
 @end group\n\
 @end example\n\
 \n\
 @end deftypefn")
 {
   octave_value_list retval;
 
-  if (args.length () != 2 || nargout > 2)
+  if (args.length () != 2)
     print_usage ();
 
   octave_value arg_x = args(0);
   octave_value arg_v = args(1);
 
   if (arg_v.ndims () != 2 || arg_x.ndims () != 2 || arg_x.columns () != 1
       || arg_v.rows () != arg_x.rows ())
     {
diff --git a/libinterp/corefcn/nproc.cc b/libinterp/corefcn/nproc.cc
--- a/libinterp/corefcn/nproc.cc
+++ b/libinterp/corefcn/nproc.cc
@@ -48,17 +48,17 @@ same as @code{current}, but overridable 
 environment variable.\n\
 @end table\n\
 @end deftypefn")
 {
   octave_value retval;
 
   int nargin = args.length ();
 
-  if ((nargin != 0 && nargin != 1) || (nargout != 0 && nargout != 1))
+  if (nargin > 1)
     print_usage ();
 
   nproc_query query = NPROC_CURRENT;
   if (nargin == 1)
     {
       std::string arg = args(0).string_value ();
 
       std::transform (arg.begin (), arg.end (), arg.begin (), tolower);
diff --git a/libinterp/corefcn/pr-output.cc b/libinterp/corefcn/pr-output.cc
--- a/libinterp/corefcn/pr-output.cc
+++ b/libinterp/corefcn/pr-output.cc
@@ -3424,17 +3424,17 @@ If the length of the smallest possible r
 @var{len}, an asterisk (*) padded with spaces will be returned instead.\n\
 @seealso{format, rat}\n\
 @end deftypefn")
 {
   octave_value retval;
 
   int nargin = args.length ();
 
-  if (nargin < 1 || nargin > 2 || nargout > 1)
+  if (nargin < 1 || nargin > 2)
     print_usage ();
 
   unwind_protect frame;
 
   frame.protect_var (rat_string_len);
 
   rat_string_len = 9;
 
@@ -3503,17 +3503,17 @@ Note that the output from @code{disp} al
 \n\
 If an output value is requested, @code{disp} prints nothing and returns the\n\
 formatted output in a string.\n\
 @seealso{fdisp}\n\
 @end deftypefn")
 {
   octave_value_list retval;
 
-  if (args.length () != 1 || nargout > 1)
+  if (args.length () != 1)
     print_usage ();
 
   octave_value arg = args(0);
 
   if (nargout == 0)
     arg.print (octave_stdout);
   else
     {
diff --git a/libinterp/corefcn/quad.cc b/libinterp/corefcn/quad.cc
--- a/libinterp/corefcn/quad.cc
+++ b/libinterp/corefcn/quad.cc
@@ -191,17 +191,17 @@ variable by routines @code{dblquad} and 
   frame.protect_var (call_depth);
   call_depth++;
 
   if (call_depth > 1)
     error ("quad: invalid recursive call");
 
   int nargin = args.length ();
 
-  if (nargin < 3 || nargin > 5 || nargout > 4)
+  if (nargin < 3 || nargin > 5)
     print_usage ();
 
   if (args(0).is_function_handle () || args(0).is_inline_function ())
     quad_fcn = args(0).function_value ();
   else
     {
       fcn_name = unique_symbol_name ("__quad_fcn__");
       std::string fname = "function y = ";
diff --git a/libinterp/corefcn/quadcc.cc b/libinterp/corefcn/quadcc.cc
--- a/libinterp/corefcn/quadcc.cc
+++ b/libinterp/corefcn/quadcc.cc
@@ -2209,26 +2209,17 @@ Mathematical Software, Vol. 37, Issue 3,
     {
       iv = &(ivals[heap[i]]);
       printf ("quadcc: ival %i (%i) with [%e,%e], int=%e, err=%e, depth=%i, rdepth=%i, ndiv=%i\n",
               i, heap[i], iv->a, iv->b, iv->igral, iv->err, iv->depth,
               iv->rdepth, iv->ndiv);
     }
 #endif
 
-  /* Clean up and present the results. */
-  octave_value_list retval;
-
-  if (nargout > 2)
-    retval(2) = neval;
-  if (nargout > 1)
-    retval(1) = err;
-  retval(0) = igral;
-  /* All is well that ends well. */
-  return retval;
+  return ovl (igral, err, neval);
 }
 
 
 /*
 %!assert (quadcc (@sin, -pi, pi), 0, 1e-6)
 %!assert (quadcc (inline ("sin"),- pi, pi), 0, 1e-6)
 %!assert (quadcc ("sin", -pi, pi), 0, 1e-6)
 
diff --git a/libinterp/corefcn/sylvester.cc b/libinterp/corefcn/sylvester.cc
--- a/libinterp/corefcn/sylvester.cc
+++ b/libinterp/corefcn/sylvester.cc
@@ -57,17 +57,17 @@ For example:\n\
 sylvester ([1, 2; 3, 4], [5, 6; 7, 8], [9, 10; 11, 12])\n\
    @result{} [ 0.50000, 0.66667; 0.66667, 0.50000 ]\n\
 @end group\n\
 @end example\n\
 @end deftypefn")
 {
   octave_value retval;
 
-  if (args.length () != 3 || nargout > 1)
+  if (args.length () != 3)
     print_usage ();
 
   octave_value arg_a = args(0);
   octave_value arg_b = args(1);
   octave_value arg_c = args(2);
 
   octave_idx_type a_nr = arg_a.rows ();
   octave_idx_type a_nc = arg_a.columns ();
diff --git a/libinterp/corefcn/urlwrite.cc b/libinterp/corefcn/urlwrite.cc
--- a/libinterp/corefcn/urlwrite.cc
+++ b/libinterp/corefcn/urlwrite.cc
@@ -383,25 +383,20 @@ urlwrite (\"http://www.google.com/search
       ofile.close ();
 
       if (curl.good ())
         frame.discard ();
 
       if (nargout > 0)
         {
           if (curl.good ())
-            {
-              retval = ovl (octave_env::make_absolute (filename),
-                            true,
-                            std::string ());
-            }
+            retval = ovl (octave_env::make_absolute (filename),
+                          true, std::string ());
           else
-            {
-              retval = ovl (std::string (), false, curl.lasterror ());
-            }
+            retval = ovl (std::string (), false, curl.lasterror ());
         }
 
       if (nargout < 2 && ! curl.good ())
         error ("urlwrite: %s", curl.lasterror ().c_str ());
     }
   else
     error ("support for URL transfers was disabled when Octave was built");
 
diff --git a/libinterp/corefcn/variables.cc b/libinterp/corefcn/variables.cc
--- a/libinterp/corefcn/variables.cc
+++ b/libinterp/corefcn/variables.cc
@@ -1815,19 +1815,16 @@ specified file are listed.  No patterns 
 from a file.\n\
 @end table\n\
 \n\
 If called as a function, return a cell array of defined variable names\n\
 matching the given patterns.\n\
 @seealso{whos, isglobal, isvarname, exist, regexp}\n\
 @end deftypefn")
 {
-  if (nargout > 1)
-    print_usage ();
-
   int argc = args.length () + 1;
 
   string_vector argv = args.make_argv ("who");
 
   return do_who (argc, argv, nargout == 1);
 }
 
 DEFUN (whos, args, nargout,
@@ -1889,19 +1886,16 @@ the function @code{whos_line_format}.\n\
 \n\
 If @code{whos} is called as a function, return a struct array of defined\n\
 variable names matching the given patterns.  Fields in the structure\n\
 describing each variable are: name, size, bytes, class, global, sparse,\n\
 complex, nesting, persistent.\n\
 @seealso{who, whos_line_format}\n\
 @end deftypefn")
 {
-  if (nargout > 1)
-    print_usage ();
-
   int argc = args.length () + 1;
 
   string_vector argv = args.make_argv ("whos");
 
   return do_who (argc, argv, nargout == 1, true);
 }
 
 // Defining variables.
diff --git a/libinterp/dldfcn/ccolamd.cc b/libinterp/dldfcn/ccolamd.cc
--- a/libinterp/dldfcn/ccolamd.cc
+++ b/libinterp/dldfcn/ccolamd.cc
@@ -142,18 +142,18 @@ See @url{http://www.cise.ufl.edu/researc
 ccolamd, csymamd, amd, colamd, symamd, and other related orderings.\n\
 @seealso{colamd, csymamd}\n\
 @end deftypefn")
 {
 #ifdef HAVE_CCOLAMD
 
   int nargin = args.length ();
 
-  if (nargout > 2 || nargin < 1 || nargin > 3)
-    usage ("ccolamd: incorrect number of input and/or output arguments");
+  if (nargin < 1 || nargin > 3)
+    print_usage ();
 
   octave_value_list retval (nargout == 2 ? 2 : 1);
   int spumoni = 0;
 
   // Get knobs
   OCTAVE_LOCAL_BUFFER (double, knobs, CCOLAMD_KNOBS);
   CCOLAMD_NAME (_set_defaults) (knobs);
 
@@ -400,18 +400,18 @@ See @url{http://www.cise.ufl.edu/researc
 ccolamd, csymamd, amd, colamd, symamd, and other related orderings.\n\
 @seealso{symamd, ccolamd}\n\
 @end deftypefn")
 {
 #if HAVE_CCOLAMD
 
   int nargin = args.length ();
 
-  if (nargout > 2 || nargin < 1 || nargin > 3)
-    usage ("ccolamd: incorrect number of input and/or output arguments");
+  if (nargin < 1 || nargin > 3)
+    print_usage ();
 
   octave_value_list retval (nargout == 2 ? 2 : 1);
   int spumoni = 0;
 
   // Get knobs
   OCTAVE_LOCAL_BUFFER (double, knobs, CCOLAMD_KNOBS);
   CCOLAMD_NAME (_set_defaults) (knobs);
 
diff --git a/libinterp/dldfcn/colamd.cc b/libinterp/dldfcn/colamd.cc
--- a/libinterp/dldfcn/colamd.cc
+++ b/libinterp/dldfcn/colamd.cc
@@ -276,17 +276,17 @@ The authors of the code itself are @nosp
 Xerox PARC, and @nospell{Esmond Ng}, Oak Ridge National Laboratory.  (see\n\
 @url{http://www.cise.ufl.edu/research/sparse/colamd})\n\
 @seealso{colperm, symamd, ccolamd}\n\
 @end deftypefn")
 {
 #ifdef HAVE_COLAMD
   int nargin = args.length ();
 
-  if (nargout > 2 || nargin < 1 || nargin > 2)
+  if (nargin < 1 || nargin > 2)
     print_usage ();
 
   octave_value_list retval (nargout == 2 ? 2 : 1);
   int spumoni = 0;
 
   // Get knobs
   OCTAVE_LOCAL_BUFFER (double, knobs, COLAMD_KNOBS);
   COLAMD_NAME (_set_defaults) (knobs);
@@ -511,17 +511,17 @@ Xerox PARC, and @nospell{Esmond Ng}, Oak
 @url{http://www.cise.ufl.edu/research/sparse/colamd})\n\
 @seealso{colperm, colamd}\n\
 @end deftypefn")
 {
 #ifdef HAVE_COLAMD
 
   int nargin = args.length ();
 
-  if (nargout > 2 || nargin < 1 || nargin > 2)
+  if (nargin < 1 || nargin > 2)
     print_usage ();
 
   octave_value_list retval (nargin == 2 ? 2 : 1);
   int spumoni = 0;
 
   // Get knobs
   OCTAVE_LOCAL_BUFFER (double, knobs, COLAMD_KNOBS);
   COLAMD_NAME (_set_defaults) (knobs);
@@ -652,17 +652,17 @@ column elimination tree is returned.  Va
 respectively.\n\
 \n\
 Called with a second argument, @code{etree} also returns the postorder\n\
 permutations on the tree.\n\
 @end deftypefn")
 {
   int nargin = args.length ();
 
-  if (nargout > 2 || nargin < 1 || nargin > 2)
+  if (nargin < 1 || nargin > 2)
     print_usage ();
 
   octave_value_list retval (nargout == 2 ? 2 : 1);
 
   octave_idx_type n_row = 0;
   octave_idx_type n_col = 0;
   octave_idx_type *ridx = 0;
   octave_idx_type *cidx = 0;
diff --git a/libinterp/dldfcn/qr.cc b/libinterp/dldfcn/qr.cc
--- a/libinterp/dldfcn/qr.cc
+++ b/libinterp/dldfcn/qr.cc
@@ -232,50 +232,44 @@ x = @var{R} \\ @var{C}\n\
                   economy = true;
                   have_b = (nargin > 2 ? 2 : 0);
                 }
             }
           if (have_b > 0 && args(have_b).is_complex_type ())
             is_cmplx = true;
         }
 
-      if (have_b && nargout < 2)
-        error ("qr: incorrect number of output arguments");
-      else if (is_cmplx)
+      if (is_cmplx)
         {
           SparseComplexQR q (arg.sparse_complex_matrix_value ());
 
           if (have_b > 0)
             {
               retval = ovl (q.C (args(have_b).complex_matrix_value ()),
                             q.R (economy));
               if (arg.rows () < arg.columns ())
                 warning ("qr: non minimum norm solution for under-determined problem");
             }
           else if (nargout > 1)
-            {
-              retval = ovl (q.Q (), q.R (economy));
-            }
+            retval = ovl (q.Q (), q.R (economy));
           else
             retval = ovl (q.R (economy));
         }
       else
         {
           SparseQR q (arg.sparse_matrix_value ());
 
           if (have_b > 0)
             {
               retval = ovl (q.C (args(have_b).matrix_value ()), q.R (economy));
               if (args(0).rows () < args(0).columns ())
                 warning ("qr: non minimum norm solution for under-determined problem");
             }
           else if (nargout > 1)
-            {
-              retval = ovl (q.Q (), q.R (economy));
-            }
+            retval = ovl (q.Q (), q.R (economy));
           else
             retval = ovl (q.R (economy));
         }
     }
   else
     {
       QR::type type = (nargout == 0 || nargout == 1) ? QR::raw
                                                      : nargin == 2
@@ -698,17 +692,16 @@ x = @var{R} \\ @var{C}\n\
 %% Test under-determined systems!!
 %!#testif HAVE_CXSPARSE
 %! n = 20;  d = 0.2;
 %! a = 1i*sprandn (n,n+1,d) + speye (n,n+1);
 %! b = randn (n,2);
 %! [c,r] = qr (a, b);
 %! assert (r\c, full (a)\b, 10e-10)
 
-%!error qr (sprandn (10,10,0.2), ones (10,1))
 */
 
 static
 bool check_qr_dims (const octave_value& q, const octave_value& r,
                     bool allow_ecf = false)
 {
   octave_idx_type m = q.rows ();
   octave_idx_type k = r.rows ();
diff --git a/scripts/ode/module.mk b/scripts/ode/module.mk
--- a/scripts/ode/module.mk
+++ b/scripts/ode/module.mk
@@ -3,17 +3,17 @@ FCN_FILE_DIRS += \
   scripts/ode/private
 
 scripts_ode_PRIVATE_FCN_FILES = \
   scripts/ode/private/AbsRel_Norm.m \
   scripts/ode/private/integrate_adaptive.m \
   scripts/ode/private/integrate_const.m \
   scripts/ode/private/integrate_n_steps.m \
   scripts/ode/private/kahan.m \
-  scripts/ode/private/known_option_names \
+  scripts/ode/private/known_option_names.m \
   scripts/ode/private/ode_event_handler.m \
   scripts/ode/private/ode_struct_value_check.m \
   scripts/ode/private/runge_kutta_23.m \
   scripts/ode/private/runge_kutta_45_dorpri.m \
   scripts/ode/private/runge_kutta_interpolate.m \
   scripts/ode/private/starting_stepsize.m
 
 scripts_ode_FCN_FILES =  \
