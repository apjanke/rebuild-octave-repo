# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1463594957 14400
#      Wed May 18 14:09:17 2016 -0400
# Node ID 3dfec4c1eb8bdfa9f19172176915fabee3b3797f
# Parent  30c53770f47e7126787ebca8754234493b6985cf
use namespace for system uname class

* oct-uname.h, oct-uname.cc: Put uname class in octave::sys
namespace.  Change all uses.

diff --git a/libinterp/corefcn/syscalls.cc b/libinterp/corefcn/syscalls.cc
--- a/libinterp/corefcn/syscalls.cc
+++ b/libinterp/corefcn/syscalls.cc
@@ -1029,17 +1029,17 @@ uname ()\n\
 If successful, @var{err} is 0 and @var{msg} is an empty string.\n\
 Otherwise, @var{err} is nonzero and @var{msg} contains a\n\
 system-dependent error message.\n\
 @end deftypefn")
 {
   if (args.length () != 0)
     print_usage ();
 
-  octave_uname sysinfo;
+  octave::sys::uname sysinfo;
 
   octave_scalar_map m;
 
   m.assign ("sysname", sysinfo.sysname ());
   m.assign ("nodename", sysinfo.nodename ());
   m.assign ("release", sysinfo.release ());
   m.assign ("version", sysinfo.version ());
   m.assign ("machine", sysinfo.machine ());
diff --git a/liboctave/system/oct-uname.cc b/liboctave/system/oct-uname.cc
--- a/liboctave/system/oct-uname.cc
+++ b/liboctave/system/oct-uname.cc
@@ -26,26 +26,34 @@ along with Octave; see the file COPYING.
 
 #include <cerrno>
 #include <cstring>
 
 #include <sys/utsname.h>
 
 #include "oct-uname.h"
 
-void
-octave_uname::init (void)
+namespace
+octave
 {
-  struct utsname unm;
+  namespace
+  sys
+  {
+    void
+    uname::init (void)
+    {
+      struct utsname unm;
 
-  err = ::uname (&unm);
+      err = ::uname (&unm);
 
-  if (err < 0)
-    msg = gnulib::strerror (errno);
-  else
-    {
-      utsname_sysname = unm.sysname;
-      utsname_nodename = unm.nodename;
-      utsname_release = unm.release;
-      utsname_version = unm.version;
-      utsname_machine = unm.machine;
+      if (err < 0)
+        msg = gnulib::strerror (errno);
+      else
+        {
+          m_sysname = unm.sysname;
+          m_nodename = unm.nodename;
+          m_release = unm.release;
+          m_version = unm.version;
+          m_machine = unm.machine;
+        }
     }
+  }
 }
diff --git a/liboctave/system/oct-uname.h b/liboctave/system/oct-uname.h
--- a/liboctave/system/oct-uname.h
+++ b/liboctave/system/oct-uname.h
@@ -22,73 +22,85 @@ along with Octave; see the file COPYING.
 
 #if ! defined (octave_oct_uname_h)
 #define octave_oct_uname_h 1
 
 #include "octave-config.h"
 
 #include <string>
 
-class
-OCTAVE_API
-octave_uname
+namespace
+octave
 {
-public:
-
-  octave_uname (void)
-    : utsname_sysname ("unknown"), utsname_nodename ("unknown"),
-      utsname_release ("unknown"), utsname_version ("unknown"),
-      utsname_machine ("unknown"),
-      msg ("uname not supported on this system"), err (-1)
-  { init (); }
+  namespace
+  sys
+  {
+    class
+    OCTAVE_API
+    uname
+    {
+    public:
 
-  octave_uname (const octave_uname& unm)
-    : utsname_sysname (unm.utsname_sysname),
-      utsname_nodename (unm.utsname_nodename),
-      utsname_release (unm.utsname_release),
-      utsname_version (unm.utsname_version),
-      utsname_machine (unm.utsname_machine),
-      msg (unm.msg), err (unm.err)
-  { }
+      uname (void)
+        : m_sysname ("unknown"), m_nodename ("unknown"),
+          m_release ("unknown"), m_version ("unknown"),
+          m_machine ("unknown"),
+          msg ("uname not supported on this system"), err (-1)
+        { init (); }
 
-  octave_uname& operator = (const octave_uname& unm)
-  {
-    if (this != &unm)
-      {
-        utsname_sysname = unm.utsname_sysname;
-        utsname_nodename = unm.utsname_nodename;
-        utsname_release = unm.utsname_release;
-        utsname_version = unm.utsname_version;
-        utsname_machine = unm.utsname_machine;
+      uname (const uname& unm)
+        : m_sysname (unm.m_sysname), m_nodename (unm.m_nodename),
+          m_release (unm.m_release), m_version (unm.m_version),
+          m_machine (unm.m_machine), msg (unm.msg), err (unm.err)
+        { }
+
+      uname& operator = (const uname& unm)
+        {
+          if (this != &unm)
+            {
+              m_sysname = unm.m_sysname;
+              m_nodename = unm.m_nodename;
+              m_release = unm.m_release;
+              m_version = unm.m_version;
+              m_machine = unm.m_machine;
 
-        msg = unm.msg;
-        err = unm.err;
-      }
+              msg = unm.msg;
+              err = unm.err;
+            }
 
-    return *this;
-  }
+          return *this;
+        }
+
+      ~uname (void) { }
 
-  ~octave_uname (void) { }
+      std::string sysname (void) const { return m_sysname; }
+      std::string nodename (void) const { return m_nodename; }
+      std::string release (void) const { return m_release; }
+      std::string version (void) const { return m_version; }
+      std::string machine (void) const { return m_machine; }
 
-  std::string sysname (void) const { return utsname_sysname; }
-  std::string nodename (void) const { return utsname_nodename; }
-  std::string release (void) const { return utsname_release; }
-  std::string version (void) const { return utsname_version; }
-  std::string machine (void) const { return utsname_machine; }
+      std::string message (void) const { return msg; }
+      int error (void) const { return err; }
 
-  std::string message (void) const { return msg; }
-  int error (void) const { return err; }
+    private:
 
-private:
+      std::string m_sysname;
+      std::string m_nodename;
+      std::string m_release;
+      std::string m_version;
+      std::string m_machine;
 
-  std::string utsname_sysname;
-  std::string utsname_nodename;
-  std::string utsname_release;
-  std::string utsname_version;
-  std::string utsname_machine;
+      std::string msg;
+      int err;
 
-  std::string msg;
-  int err;
+      void init (void);
+    };
+  }
+}
 
-  void init (void);
-};
+#if defined (OCTAVE_USE_DEPRECATED_FUNCTIONS)
+
+OCTAVE_DEPRECATED ("use octave::sys::uname instead")
+typedef octave::sys::uname octave_uname;
 
 #endif
+
+#endif
