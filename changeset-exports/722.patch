# HG changeset patch
# User jwe
# Date 780161066 0
#      Wed Sep 21 15:24:26 1994 +0000
# Node ID c40cdd16121e3d8fb94075ee769d93f1d3a4b9fd
# Parent  54a6858bc7e7206f0ebcd95600bd9e49feb817d9
[project @ 1994-09-21 15:22:21 by jwe]

diff --git a/src/arith-ops.cc b/src/arith-ops.cc
--- a/src/arith-ops.cc
+++ b/src/arith-ops.cc
@@ -215,16 +215,24 @@ m_mul_conform (const ComplexMatrix& a, c
 
 /* 1 */
 static Matrix
 mx_stupid_bool_op (Matrix_bool_op op, double s, const Matrix& a)
 {
   int ar = a.rows ();
   int ac = a.columns ();
 
+  if (ar == 0 || ac == 0)
+    {
+      if (op == Matrix_EQ)
+	return Matrix (1, 1, 0.0);
+      else if (op == Matrix_NE)
+	return Matrix (1, 1, 1.0);
+    }
+
   Matrix t (ar, ac);
 
   for (int j = 0; j < ac; j++)
     for (int i = 0; i < ar; i++)
       {
 	switch (op)
 	  {
 	  case Matrix_LT:
@@ -262,16 +270,24 @@ mx_stupid_bool_op (Matrix_bool_op op, do
 
 /* 2 */
 static Matrix
 mx_stupid_bool_op (Matrix_bool_op op, double s, const ComplexMatrix& a)
 {
   int ar = a.rows ();
   int ac = a.columns ();
 
+  if (ar == 0 || ac == 0)
+    {
+      if (op == Matrix_EQ)
+	return Matrix (1, 1, 0.0);
+      else if (op == Matrix_NE)
+	return Matrix (1, 1, 1.0);
+    }
+
   Matrix t (ar, ac);
 
   for (int j = 0; j < ac; j++)
     for (int i = 0; i < ar; i++)
       {
 	switch (op)
 	  {
 	  case Matrix_LT:
@@ -309,16 +325,24 @@ mx_stupid_bool_op (Matrix_bool_op op, do
 
 /* 3 */
 static Matrix
 mx_stupid_bool_op (Matrix_bool_op op, const Matrix& a, double s)
 {
   int ar = a.rows ();
   int ac = a.columns ();
 
+  if (ar == 0 || ac == 0)
+    {
+      if (op == Matrix_EQ)
+	return Matrix (1, 1, 0.0);
+      else if (op == Matrix_NE)
+	return Matrix (1, 1, 1.0);
+    }
+
   Matrix t (ar, ac);
 
   for (int j = 0; j < ac; j++)
     for (int i = 0; i < ar; i++)
       {
 	switch (op)
 	  {
 	  case Matrix_LT:
@@ -356,16 +380,24 @@ mx_stupid_bool_op (Matrix_bool_op op, co
 
 /* 4 */
 static Matrix
 mx_stupid_bool_op (Matrix_bool_op op, const Matrix& a, const Complex& s)
 {
   int ar = a.rows ();
   int ac = a.columns ();
 
+  if (ar == 0 || ac == 0)
+    {
+      if (op == Matrix_EQ)
+	return Matrix (1, 1, 0.0);
+      else if (op == Matrix_NE)
+	return Matrix (1, 1, 1.0);
+    }
+
   Matrix t (ar, ac);
 
   for (int j = 0; j < ac; j++)
     for (int i = 0; i < ar; i++)
       {
 	switch (op)
 	  {
 	  case Matrix_LT:
@@ -406,16 +438,24 @@ static Matrix
 mx_stupid_bool_op (Matrix_bool_op op, const Matrix& a, const Matrix& b)
 {
   if (! m_add_conform (a, b, 1))
     return Matrix ();
      
   int ar = a.rows ();
   int ac = a.columns ();
 
+  if (ar == 0 || ac == 0)
+    {
+      if (op == Matrix_EQ)
+	return Matrix (1, 1, 1.0);
+      else if (op == Matrix_NE)
+	return Matrix (1, 1, 0.0);
+    }
+
   Matrix c (ar, ac);
 
   for (int j = 0; j < ac; j++)
     for (int i = 0; i < ar; i++)
       {
 	switch (op)
 	  {
 	  case Matrix_LT:
@@ -456,16 +496,24 @@ static Matrix
 mx_stupid_bool_op (Matrix_bool_op op, const Matrix& a, const ComplexMatrix& b)
 {
   if (! m_add_conform (a, b, 1))
     return Matrix ();
      
   int ar = a.rows ();
   int ac = a.columns ();
 
+  if (ar == 0 || ac == 0)
+    {
+      if (op == Matrix_EQ)
+	return Matrix (1, 1, 1.0);
+      else if (op == Matrix_NE)
+	return Matrix (1, 1, 0.0);
+    }
+
   Matrix c (ar, ac);
 
   for (int j = 0; j < ac; j++)
     for (int i = 0; i < ar; i++)
       {
 	switch (op)
 	  {
 	  case Matrix_LT:
@@ -502,16 +550,24 @@ mx_stupid_bool_op (Matrix_bool_op op, co
 
 /* 7 */
 static Matrix
 mx_stupid_bool_op (Matrix_bool_op op, const Complex& s, const Matrix& a)
 {
   int ar = a.rows ();
   int ac = a.columns ();
 
+  if (ar == 0 || ac == 0)
+    {
+      if (op == Matrix_EQ)
+	return Matrix (1, 1, 0.0);
+      else if (op == Matrix_NE)
+	return Matrix (1, 1, 1.0);
+    }
+
   Matrix t (ar, ac);
 
   for (int j = 0; j < ac; j++)
     for (int i = 0; i < ar; i++)
       {
 	switch (op)
 	  {
 	  case Matrix_LT:
@@ -549,16 +605,24 @@ mx_stupid_bool_op (Matrix_bool_op op, co
 
 /* 8 */
 static Matrix
 mx_stupid_bool_op (Matrix_bool_op op, const Complex& s, const ComplexMatrix& a)
 {
   int ar = a.rows ();
   int ac = a.columns ();
 
+  if (ar == 0 || ac == 0)
+    {
+      if (op == Matrix_EQ)
+	return Matrix (1, 1, 0.0);
+      else if (op == Matrix_NE)
+	return Matrix (1, 1, 1.0);
+    }
+
   Matrix t (ar, ac);
 
   for (int j = 0; j < ac; j++)
     for (int i = 0; i < ar; i++)
       {
 	switch (op)
 	  {
 	  case Matrix_LT:
@@ -596,16 +660,24 @@ mx_stupid_bool_op (Matrix_bool_op op, co
 
 /* 9 */
 static Matrix
 mx_stupid_bool_op (Matrix_bool_op op, const ComplexMatrix& a, double s)
 {
   int ar = a.rows ();
   int ac = a.columns ();
 
+  if (ar == 0 || ac == 0)
+    {
+      if (op == Matrix_EQ)
+	return Matrix (1, 1, 0.0);
+      else if (op == Matrix_NE)
+	return Matrix (1, 1, 1.0);
+    }
+
   Matrix t (ar, ac);
 
   for (int j = 0; j < ac; j++)
     for (int i = 0; i < ar; i++)
       {
 	switch (op)
 	  {
 	  case Matrix_LT:
@@ -643,16 +715,24 @@ mx_stupid_bool_op (Matrix_bool_op op, co
 
 /* 10 */
 static Matrix
 mx_stupid_bool_op (Matrix_bool_op op, const ComplexMatrix& a, const Complex& s)
 {
   int ar = a.rows ();
   int ac = a.columns ();
 
+  if (ar == 0 || ac == 0)
+    {
+      if (op == Matrix_EQ)
+	return Matrix (1, 1, 0.0);
+      else if (op == Matrix_NE)
+	return Matrix (1, 1, 1.0);
+    }
+
   Matrix t (ar, ac);
 
   for (int j = 0; j < ac; j++)
     for (int i = 0; i < ar; i++)
       {
 	switch (op)
 	  {
 	  case Matrix_LT:
@@ -693,16 +773,24 @@ static Matrix
 mx_stupid_bool_op (Matrix_bool_op op, const ComplexMatrix& a, const Matrix& b)
 {
   if (! m_add_conform (a, b, 1))
     return Matrix ();
      
   int ar = a.rows ();
   int ac = a.columns ();
 
+  if (ar == 0 || ac == 0)
+    {
+      if (op == Matrix_EQ)
+	return Matrix (1, 1, 1.0);
+      else if (op == Matrix_NE)
+	return Matrix (1, 1, 0.0);
+    }
+
   Matrix c (ar, ac);
 
   for (int j = 0; j < ac; j++)
     for (int i = 0; i < ar; i++)
       {
 	switch (op)
 	  {
 	  case Matrix_LT:
@@ -743,16 +831,24 @@ mx_stupid_bool_op (Matrix_bool_op op, co
 		   const ComplexMatrix& b) 
 {
   if (! m_add_conform (a, b, 1))
     return Matrix ();
      
   int ar = a.rows ();
   int ac = a.columns ();
 
+  if (ar == 0 || ac == 0)
+    {
+      if (op == Matrix_EQ)
+	return Matrix (1, 1, 1.0);
+      else if (op == Matrix_NE)
+	return Matrix (1, 1, 0.0);
+    }
+
   Matrix c (ar, ac);
 
   for (int j = 0; j < ac; j++)
     for (int i = 0; i < ar; i++)
       {
 	switch (op)
 	  {
 	  case Matrix_LT:
diff --git a/src/tc-rep.h b/src/tc-rep.h
--- a/src/tc-rep.h
+++ b/src/tc-rep.h
@@ -175,17 +175,17 @@ private:
   Range range_value (void) const;
 
   ColumnVector vector_value (int force_string_conversion = 0,
 			     int force_vector_conversion = 0) const;
 
   ComplexColumnVector complex_vector_value (int force_string_conv = 0,
 					    int force_vec_conv = 0) const;
 
-  tree_constant convert_to_str (void);
+  tree_constant convert_to_str (void) const;
 
   void convert_to_row_or_column_vector (void);
 
   void bump_value (tree_expression::type);
 
   void resize (int i, int j);
   void resize (int i, int j, double val);
 
@@ -341,26 +341,29 @@ private:
 				     tree_expression::type t);
 
   friend tree_constant do_unary_op (tree_constant& a,
 				    tree_expression::type t);
 
 // Data.
 
   int count;
+
   constant_type type_tag;
+
   union
     {
       double scalar;			// A real scalar constant.
       Matrix *matrix;			// A real matrix constant.
       Complex *complex_scalar;		// A real scalar constant.
       ComplexMatrix *complex_matrix;	// A real matrix constant.
       char *string;			// A character string constant.
       Range *range;			// A set of evenly spaced values.
     };
+
   char *orig_text;
 
 // -------------------------------------------------------------------
 
 // These may not need to be member functions.
 
   tree_constant cumprod (void) const;
   tree_constant cumsum (void) const;
diff --git a/src/variables.cc b/src/variables.cc
--- a/src/variables.cc
+++ b/src/variables.cc
@@ -167,17 +167,17 @@ int
 takes_correct_nargs (tree_fvc *fcn, int expected_nargin, char *warn_for,
 		     int warn)
 {
   int nargin = fcn->max_expected_args ();
   int e_nargin = expected_nargin;
   if (nargin != e_nargin)
     {
       if (warn)
-	error ("%s: expecting function to take %d argument%c", 
+	error ("%s: expecting function to take %d argument%s", 
 	       warn_for, e_nargin, (e_nargin == 1 ? "" : "s"));
       return 0;
     }
   return 1;
 }
 
 DEFUN ("is_global", Fis_global, Sis_global, 1, 1,
   "is_global (X): return 1 if the string X names a global variable\n\
@@ -188,17 +188,17 @@ otherwise, return 0.")
   int nargin = args.length ();
 
   if (nargin != 1)
     {
       print_usage ("is_global");
       return retval;
     }
 
-  char *name = args(1).string_value ();
+  char *name = args(0).string_value ();
 
   if (error_state)
     {
       error ("is_global: expecting string argument");
       return retval;
     }
 
   symbol_record *sr = curr_sym_tab->lookup (name, 0, 0);
@@ -219,17 +219,17 @@ a function.")
   int nargin = args.length ();
 
   if (nargin != 1)
     {
       print_usage ("exist");
       return retval;
     }
 
-  char *name = args(1).string_value ();
+  char *name = args(0).string_value ();
 
   if (error_state)
     {
       error ("exist: expecting string argument");
       return retval;
     }
 
   symbol_record *sr = curr_sym_tab->lookup (name, 0, 0);
@@ -1178,17 +1178,17 @@ install_builtin_mapper (builtin_mapper_f
   mfcn.name = strsave (mf->name);
   mfcn.can_return_complex_for_real_arg = mf->can_return_complex_for_real_arg;
   mfcn.lower_limit = mf->lower_limit;
   mfcn.upper_limit = mf->upper_limit;
   mfcn.d_d_mapper = mf->d_d_mapper;
   mfcn.d_c_mapper = mf->d_c_mapper;
   mfcn.c_c_mapper = mf->c_c_mapper;
 
-  tree_builtin *def = new tree_builtin (2, 1, mfcn, mf->name);
+  tree_builtin *def = new tree_builtin (1, 1, mfcn, mf->name);
 
   sym_rec->define (def);
 
   sym_rec->document (mf->help_string);
   sym_rec->make_eternal ();
   sym_rec->protect ();
 }
 
