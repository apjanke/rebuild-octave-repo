# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1264038700 18000
#      Wed Jan 20 20:51:40 2010 -0500
# Node ID 9f9eb9d2eefd06d363a3eb7e12e500df2c4cc6d2
# Parent  6a88b00c5ad644b50f5e67cca4efba3575d966cc
doc/interpreter/munge-texi.cc: untabify and delete emacs local variable settings

diff --git a/doc/ChangeLog b/doc/ChangeLog
--- a/doc/ChangeLog
+++ b/doc/ChangeLog
@@ -1,8 +1,13 @@
+2010-01-20  John W. Eaton  <jwe@octave.org>
+
+	* interpreter/munge-texi.cc: Delete Emacs local-variable settings.
+	Untabify.
+
 2010-01-17  Thorsten Meyer  <thorsten.meyier@gmx.de>
 
 	* interpreter/container.txi (Creating Cell Arrays): Add
 	docstring for cellslices function.
 
 2010-01-09  John W. Eaton  <jwe@octave.org>
 
 	* interpreter/munge-texi.cc: Avoid C-style casts.
diff --git a/doc/interpreter/munge-texi.cc b/doc/interpreter/munge-texi.cc
--- a/doc/interpreter/munge-texi.cc
+++ b/doc/interpreter/munge-texi.cc
@@ -108,37 +108,37 @@ extract_docstring (std::istream& is)
                       c = is.get ();
                     }
                     
                   // test for end of @seealso
                   if (c == '}') 
                     break;
                   
                   // get function name
-	          std::string function_name;
+                  std::string function_name;
                   do 
                     function_name += static_cast<char> (c);
                   while ((c = is.get ()) != EOF
                           && c != doc_delim
                           && c != ' '
                           && c != '\t'
                           && c != '\r'
                           && c != '\n'
                           && c != ','
                           && c != '}');
                   if (first)
                     first = false;
                   else
                     doc += ", ";
 
-		  if (function_name[0] == '@')
-		    function_name = "@" + function_name;
+                  if (function_name[0] == '@')
+                    function_name = "@" + function_name;
 
                   doc += "@ref{doc-" + function_name + ",,"
-		    + function_name + "}";
+                    + function_name + "}";
 
                   // test for end of @seealso
                   if (c == '}') 
                     break;
                 }
               if (c == '}')
                 doc += static_cast<char> (c);
             }
@@ -159,56 +159,56 @@ skip_comments (std::ifstream& is)
 {
   int c;
 
   bool in_comment = false;
 
   while ((c = is.get ()) != EOF)
     {
       if (c == '#')
-	in_comment = true;
+        in_comment = true;
       else if (c == '\n')
-	in_comment = false;
+        in_comment = false;
       else if (! (in_comment || ::isspace (c)))
-	{
-	  is.putback (c);
-	  break;
-	}
+        {
+          is.putback (c);
+          break;
+        }
     }
 }
 
 static void
 process_doc_file (const std::string& fname)
 {
   std::ifstream infile (fname.c_str ());
 
   if (infile)
     {
       skip_comments (infile);
 
       if (infile.get () != doc_delim)
-	fatal ("invalid doc file format");
+        fatal ("invalid doc file format");
 
       std::string symbol_name;
 
       do
-	{
-	  symbol_name = extract_symbol_name (infile);
+        {
+          symbol_name = extract_symbol_name (infile);
 
-	  if (! symbol_name.empty ())
-	    {
-	      std::string doc_string = extract_docstring (infile);
+          if (! symbol_name.empty ())
+            {
+              std::string doc_string = extract_docstring (infile);
 
-	      if (help_text.find (symbol_name) != help_text.end ())
-		std::cerr << "ignoring duplicate entry for "
-			  << symbol_name << "\n";
-	      else
-		help_text[symbol_name] = doc_string;
-	    }
-	}
+              if (help_text.find (symbol_name) != help_text.end ())
+                std::cerr << "ignoring duplicate entry for "
+                          << symbol_name << "\n";
+              else
+                help_text[symbol_name] = doc_string;
+            }
+        }
       while (! symbol_name.empty ());
     }
   else
     fatal ("unable to open docfile");
 }
 
 static bool
 recover_from_macro (std::ostream& os, char *buf, int i)
@@ -232,23 +232,23 @@ process_example_file (const std::string&
   if (infile)
     {
       os << "@verbatim\n";
 
       int c;
       int clast = 0;
 
       while ((c = infile.get ()) != EOF)
-	{
-	  os << static_cast<char> (c);
-	  clast = c;
-	}
+        {
+          os << static_cast<char> (c);
+          clast = c;
+        }
 
       if (clast != '\n')
-	os << "\n";
+        os << "\n";
 
       os << "@end verbatim\n";
     }
   else
     fatal ("unable to open example file " + file_name);
 }
 
 static void
@@ -257,132 +257,132 @@ process_texi_input_file (std::istream& i
   os << "@c DO NOT EDIT!  Generated automatically by munge-texi.\n\n";
 
   bool bol = true;
 
   int c;
   while ((c = is.get ()) != EOF)
     {
       if (bol)
-	{
-	  if (c == '@')
-	    {
-	      char buf[16];
-	      int i = 0;
-	      buf[i++] = static_cast<char> (c);
+        {
+          if (c == '@')
+            {
+              char buf[16];
+              int i = 0;
+              buf[i++] = static_cast<char> (c);
 
-	      buf[i++] = c = static_cast<char> (is.get ());
+              buf[i++] = c = static_cast<char> (is.get ());
 
-	      if (c == 'D')
-		{
-		  std::string symbol_name;
+              if (c == 'D')
+                {
+                  std::string symbol_name;
 
-		  if (   (buf[i++] = static_cast<char> (is.get ())) == 'O'
+                  if (   (buf[i++] = static_cast<char> (is.get ())) == 'O'
                       && (buf[i++] = static_cast<char> (is.get ())) == 'C'
                       && (buf[i++] = static_cast<char> (is.get ())) == 'S'
                       && (buf[i++] = static_cast<char> (is.get ())) == 'T'
                       && (buf[i++] = static_cast<char> (is.get ())) == 'R'
                       && (buf[i++] = static_cast<char> (is.get ())) == 'I'
                       && (buf[i++] = static_cast<char> (is.get ())) == 'N'
                       && (buf[i++] = static_cast<char> (is.get ())) == 'G'
                       && (buf[i++] = static_cast<char> (is.get ())) == '(')
-		    {
-		      while ((c = is.get ()) != EOF && c != ')')
-			symbol_name += static_cast<char> (c);
+                    {
+                      while ((c = is.get ()) != EOF && c != ')')
+                        symbol_name += static_cast<char> (c);
 
-		      if (is.eof ())
-			fatal ("end of file while reading @DOCSTRING command");
-		      else
-			{
-			  std::string doc_string = help_text[symbol_name];
+                      if (is.eof ())
+                        fatal ("end of file while reading @DOCSTRING command");
+                      else
+                        {
+                          std::string doc_string = help_text[symbol_name];
 
-			  size_t len = doc_string.length ();
+                          size_t len = doc_string.length ();
 
-			  int j = 0;
+                          int j = 0;
 
-			  // If there is a leading comment with the file
-			  // name, copy it to the output.
-			  if (len > 1
-			      && doc_string[j] == '@'
-			      && doc_string[j+1] == 'c')
-			    {
-			      j = 2;
-			      while (doc_string[j++] != '\n')
-				/* find eol */;
+                          // If there is a leading comment with the file
+                          // name, copy it to the output.
+                          if (len > 1
+                              && doc_string[j] == '@'
+                              && doc_string[j+1] == 'c')
+                            {
+                              j = 2;
+                              while (doc_string[j++] != '\n')
+                                /* find eol */;
 
-			      os << doc_string.substr (0, j);
-			    }
+                              os << doc_string.substr (0, j);
+                            }
 
-			  while (doc_string[j] == ' ')
-			    j++;
+                          while (doc_string[j] == ' ')
+                            j++;
 
-			  if (doc_string.substr (j, 15) == "-*- texinfo -*-")
-			    {
-			      j += 15;
+                          if (doc_string.substr (j, 15) == "-*- texinfo -*-")
+                            {
+                              j += 15;
 
-			      while (isspace (doc_string[j]))
-				j++;
+                              while (isspace (doc_string[j]))
+                                j++;
 
-			      // Make `see also' references in functions
-			      // possible using @anchor{TAG} (new with
-			      // Texinfo 4.0).
+                              // Make `see also' references in functions
+                              // possible using @anchor{TAG} (new with
+                              // Texinfo 4.0).
 
-			      if (symbol_name[0] == '@')
-				symbol_name = "@" + symbol_name;
+                              if (symbol_name[0] == '@')
+                                symbol_name = "@" + symbol_name;
 
-			      os << "@anchor{doc-" << symbol_name << "}\n";
+                              os << "@anchor{doc-" << symbol_name << "}\n";
 
-			      os << doc_string.substr (j);
-			    }
-			  else
-			    os << doc_string;
-			}
-		    }
-		  else
-		    bol = recover_from_macro (os, buf, i);
-		}
-	      else if (c == 'E')
-		{
-		  std::string file_name;
+                              os << doc_string.substr (j);
+                            }
+                          else
+                            os << doc_string;
+                        }
+                    }
+                  else
+                    bol = recover_from_macro (os, buf, i);
+                }
+              else if (c == 'E')
+                {
+                  std::string file_name;
 
-		  if (   (buf[i++] = static_cast<char> (is.get ())) == 'X'
+                  if (   (buf[i++] = static_cast<char> (is.get ())) == 'X'
                       && (buf[i++] = static_cast<char> (is.get ())) == 'A'
                       && (buf[i++] = static_cast<char> (is.get ())) == 'M'
                       && (buf[i++] = static_cast<char> (is.get ())) == 'P'
                       && (buf[i++] = static_cast<char> (is.get ())) == 'L'
                       && (buf[i++] = static_cast<char> (is.get ())) == 'E'
                       && (buf[i++] = static_cast<char> (is.get ())) == 'F'
                       && (buf[i++] = static_cast<char> (is.get ())) == 'I'
                       && (buf[i++] = static_cast<char> (is.get ())) == 'L'
                       && (buf[i++] = static_cast<char> (is.get ())) == 'E'
                       && (buf[i++] = static_cast<char> (is.get ())) == '(')
-		    {
-		      while ((c = is.get ()) != EOF && c != ')')
-			file_name += static_cast<char> (c);
+                    {
+                      while ((c = is.get ()) != EOF && c != ')')
+                        file_name += static_cast<char> (c);
 
-		      file_name = top_srcdir + "/examples/" + file_name;
+                      file_name = top_srcdir + "/examples/" + file_name;
 
-		      process_example_file (file_name, os);
-		    }
-		  else
-		    bol = recover_from_macro (os, buf, i);
-		}
-	      else
-		bol = recover_from_macro (os, buf, i);
-	    }
-	  else
-	    os.put (static_cast<char> (c));
-	}
+                      process_example_file (file_name, os);
+                    }
+                  else
+                    bol = recover_from_macro (os, buf, i);
+                }
+              else
+                bol = recover_from_macro (os, buf, i);
+            }
+          else
+            os.put (static_cast<char> (c));
+        }
       else
-	{
-	  if (c == '\n')
-	    bol = true;
+        {
+          if (c == '\n')
+            bol = true;
 
-	  os.put (static_cast<char> (c));
-	}
+          os.put (static_cast<char> (c));
+        }
     }
 }
 
 int
 main (int argc, char **argv)
 {
   int retval = 0;
 
@@ -400,14 +400,8 @@ main (int argc, char **argv)
       usage ();
 
       retval = 1;
     }
 
   return retval;
 
 }
-
-/*
-;;; Local Variables: ***
-;;; mode: C++ ***
-;;; End: ***
-*/
