# HG changeset patch
# User jwe
# Date 1069179611 0
#      Tue Nov 18 18:20:11 2003 +0000
# Node ID ca70857bdbd1fe2e712f1e11c888c9cca291c42d
# Parent  ed92d574b55baae61fa576927168c1e1faa86e71
[project @ 2003-11-18 18:18:16 by jwe]

diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,12 @@
+2003-11-18  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* Makefile.in (TEMPLATE_SRC): Move MArrayN.cc here from MATRIX_SRC.
+
 2003-11-15  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* Array.h (Array<T>::resize (int, const T&)): Reinstate.
 	* MArray.h (resize): Delete.
 	* MArray2.h (resize): Delete.
 	* DASRT.cc (DASRT::integrate): Use resize, not resize_and_fill.
 	* ODESSA (ODESSA::integrate): Likewise.
 
diff --git a/liboctave/Makefile.in b/liboctave/Makefile.in
--- a/liboctave/Makefile.in
+++ b/liboctave/Makefile.in
@@ -62,27 +62,27 @@ INCLUDES := Bounds.h CollocWt.h DAE.h DA
 	prog-args.h statdefs.h str-vec.h sun-utils.h sysdir.h \
 	systime.h syswait.h \
 	$(OPTS_INC) \
 	$(MATRIX_INC) \
 	$(MX_OP_INC) \
 	$(VX_OP_INC)
 
 TEMPLATE_SRC := Array.cc ArrayN.cc DiagArray2.cc \
-	MArray.cc MArray2.cc MDiagArray2.cc base-lu.cc
+	MArray.cc MArray2.cc MArrayN.cc MDiagArray2.cc base-lu.cc
 
 TI_SRC := Array-C.cc Array-b.cc Array-ch.cc Array-i.cc Array-d.cc \
 	Array-s.cc Array-str.cc Array-idx-vec.cc \
 	MArray-C.cc MArray-ch.cc MArray-i.cc MArray-d.cc MArray-s.cc
 
 MATRIX_SRC := Array-flags.cc Array-util.cc CColVector.cc \
 	CDiagMatrix.cc CMatrix.cc CNDArray.cc CRowVector.cc \
 	CmplxAEPBAL.cc CmplxCHOL.cc CmplxDET.cc CmplxHESS.cc \
 	CmplxLU.cc CmplxQR.cc CmplxQRP.cc CmplxSCHUR.cc CmplxSVD.cc \
-	EIG.cc MArray-misc.cc MArrayN.cc boolMatrix.cc \
+	EIG.cc MArray-misc.cc boolMatrix.cc \
 	boolNDArray.cc chMatrix.cc chNDArray.cc dColVector.cc \
 	dDiagMatrix.cc dMatrix.cc dNDArray.cc dRowVector.cc \
 	dbleAEPBAL.cc dbleCHOL.cc dbleDET.cc dbleHESS.cc dbleLU.cc \
 	dbleQR.cc dbleQRP.cc dbleSCHUR.cc dbleSVD.cc
 
 MX_OP_SRC := $(shell $(AWK) -f $(srcdir)/mk-ops.awk prefix=mx list_cc_files=1 $(srcdir)/mx-ops)
 
 VX_OP_SRC := $(shell $(AWK) -f $(srcdir)/mk-ops.awk prefix=vx list_cc_files=1 $(srcdir)/vx-ops)
diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,8 +1,12 @@
+2003-11-18  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* general/issymmetric.m: Don't fail if norm (x) == 0.
+
 2003-11-17  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* miscellaneous/path.m: Fix thinko in previous change.
 
 2003-11-14  Gabriele Pannocchia  <g.pannocchia@ing.unipi.it>
 
 	* control/base/dare.m: Check positive (semi)definiteness and
 	dimensions of r (and q). 
diff --git a/scripts/general/issymmetric.m b/scripts/general/issymmetric.m
--- a/scripts/general/issymmetric.m
+++ b/scripts/general/issymmetric.m
@@ -33,17 +33,18 @@
 function retval = issymmetric (x,tol)
 
   if (nargin == 1 || nargin == 2)
     retval = issquare (x);
     if (retval != 0)
       if (nargin == 1)
         tol = eps;
       endif
-      if (norm (x - x') / norm(x) > tol)
+      norm_x = norm (x);
+      if (norm_x != 0 && norm (x - x') / norm_x > tol)
         retval = 0;
       endif
     endif
   else
     usage ("issymmetric (x {,tol})");
   endif
 
 endfunction
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,16 @@
+2003-11-18  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* ov-bool.h (octave_bool::array_value,
+	octave_bool::complex_array_value): New functions.
+
+	* ov-base-mat.cc (octave_base_matrix<MT>::do_index_op):
+	Ensure correct number of indices for Array indexing code.
+
 2003-11-17  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* DLD-FUNCTIONS/qz.cc (qz): Use x.data()+offset instead of &a(i,j).
 	First and third args for dlag2 are const.
 
 	* DLD-FUNCTIONS/sort.cc (Fsort): Use const qualifier as appropriate.
 
 	* DLD-FUNCTIONS/balance.cc (balance): Use data() instead of
diff --git a/src/ov-base-mat.cc b/src/ov-base-mat.cc
--- a/src/ov-base-mat.cc
+++ b/src/ov-base-mat.cc
@@ -122,20 +122,28 @@ octave_base_matrix<MT>::do_index_op (con
   octave_value retval;
 
   int len = idx.length ();
 
   switch (len)
     {
     case 2:
       {
-	idx_vector i = idx (0).index_vector ();
-	idx_vector j = idx (1).index_vector ();
+	int nd = matrix.ndims ();
 
-	retval = MT (matrix.index (i, j, resize_ok, MT::resize_fill_value ()));
+	if (nd == 2)
+	  {
+	    idx_vector i = idx (0).index_vector ();
+	    idx_vector j = idx (1).index_vector ();
+
+	    retval = MT (matrix.index (i, j, resize_ok, MT::resize_fill_value ()));
+	  }
+	else
+	  error ("invalid number of indices (= 2) for %d-dimensional array",
+		 nd);
       }
       break;
 
     case 1:
       {
 	idx_vector i = idx (0).index_vector ();
 
 	retval = MT (matrix.index (i, resize_ok, MT::resize_fill_value ()));
diff --git a/src/ov-bool.h b/src/ov-bool.h
--- a/src/ov-bool.h
+++ b/src/ov-bool.h
@@ -87,21 +87,27 @@ public:
 
   double double_value (bool = false) const { return scalar; }
 
   double scalar_value (bool = false) const { return scalar; }
 
   Matrix matrix_value (bool = false) const
     { return Matrix (1, 1, scalar); }
 
+  NDArray array_value (bool = false) const
+    { return NDArray (dim_vector (1, 1), scalar); }
+
   Complex complex_value (bool = false) const { return scalar; }
 
   ComplexMatrix complex_matrix_value (bool = false) const
     { return  ComplexMatrix (1, 1, Complex (scalar)); }
 
+  ComplexNDArray complex_array_value (bool = false) const
+    { return ComplexNDArray (dim_vector (1, 1), Complex (scalar)); }
+
   bool bool_value (void) const { return scalar; }
 
   boolMatrix bool_matrix_value (void) const
     { return boolMatrix (1, 1, scalar); }
 
   octave_value convert_to_str_internal (bool pad, bool force) const;
 
 private:
diff --git a/src/ov-scalar.h b/src/ov-scalar.h
--- a/src/ov-scalar.h
+++ b/src/ov-scalar.h
@@ -85,25 +85,25 @@ public:
   double double_value (bool = false) const { return scalar; }
 
   double scalar_value (bool = false) const { return scalar; }
 
   Matrix matrix_value (bool = false) const
     { return Matrix (1, 1, scalar); }
 
   NDArray array_value (bool = false) const
-    { return NDArray (dim_vector (1, 1), double_value ()); }
+    { return NDArray (dim_vector (1, 1), scalar); }
 
   Complex complex_value (bool = false) const { return scalar; }
 
   ComplexMatrix complex_matrix_value (bool = false) const
     { return  ComplexMatrix (1, 1, Complex (scalar)); }
 
   ComplexNDArray complex_array_value (bool = false) const
-    { return ComplexNDArray (dim_vector (1, 1), double_value ()); }
+    { return ComplexNDArray (dim_vector (1, 1), Complex (scalar)); }
 
   octave_value convert_to_str_internal (bool pad, bool force) const;
 
   void increment (void) { ++scalar; }
 
   void decrement (void) { --scalar; }
 
 private:
