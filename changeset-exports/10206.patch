# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1264592509 -3600
#      Wed Jan 27 12:41:49 2010 +0100
# Node ID 37a08e0ce2dcecc92932e76f1f5153eb5aacaaa0
# Parent  eea99d24adae1c0c315f5631280820feb5e6cb19
support Matlab-style empty output/input arguments

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,34 @@
+2010-01-27  Jaroslav Hajek  <highegg@gmail.com>
+
+	* oct-lvalue.h (octave_lvalue::is_black_hole): New method.
+	(octave_lvalue::black_hole): New field.
+	(octave_lvalue::is_defined, octave_lvalue::is_undefined,
+	octave_lvalue::is_map): Make const.
+	(octave_lvalue::index_set): Remove field.
+	(octave_lvalue::octave_lvalue, octave_lvalue::operator =): Correctly
+	handle black holes. Update.
+	(dummy_value): Remove.
+	* pt-id.h (tree_identifier::is_black_hole): New method.
+	(tree_identifier::is_variable): Make virtual.
+	(tree_black_hole): New class.
+	* oct-parse.yy (magic_tilde): New terminal.
+	(param_list): Allow magic_tilde.
+	(arg_list): Allow magic_tilde.
+	* pt-misc.cc (tree_parameter_list::validate): Handle black holes.
+	* pt-idx.cc (tree_index_expression::append): Gripe if arguments
+	contain magic tilde.
+	* pt-arg-list.h (tree_argument_list::has_magic_tilde): New method
+	decl.
+	(tree_argument_list::list_includes_magic_tilde): New field.
+	(tree_argument_list::tree_argument_list): Initialize it in ctors.
+	* pt-arg-list.cc (tree_argument_list::has_magic_tilde): New method.
+	(tree_argument_list::append): Update list_includes_magic_tilde.
+
 2010-01-27  Judd Storrs  <jstorrs@gmail.com>
 
 	* ov-class.cc (octave_class::print_with_name) Add default case for
 	classes that don't define a display method.
 
 2010-01-26  Shai Ayal  <shaiay@users.sourceforge.net>
 
 	* gl-render.cc (draw_text): scale position.
diff --git a/src/oct-lvalue.cc b/src/oct-lvalue.cc
--- a/src/oct-lvalue.cc
+++ b/src/oct-lvalue.cc
@@ -40,21 +40,20 @@ octave_lvalue::assign (octave_value::ass
   if (! error_state)
     *val = tmp;
 }
 
 void
 octave_lvalue::set_index (const std::string& t,
 			  const std::list<octave_value_list>& i)
 {
-  if (! index_set)
+  if (idx.empty ())
     {
       type = t;
       idx = i;
-      index_set = true;
     }
   else
     error ("invalid index expression in assignment");
 }
 
 void
 octave_lvalue::do_unary_op (octave_value::unary_op op)
 {
diff --git a/src/oct-lvalue.h b/src/oct-lvalue.h
--- a/src/oct-lvalue.h
+++ b/src/oct-lvalue.h
@@ -27,54 +27,59 @@ along with Octave; see the file COPYING.
 class octave_value;
 class octave_value_list;
 
 #include <string>
 
 #include "oct-obj.h"
 #include "pt-idx.h"
 
-// FIXME -- eliminate the following kluge?
-
-// This variable is used when creating dummy octave_lvalue objects.
-static octave_value dummy_val;
-
 class
 octave_lvalue
 {
 public:
 
-  octave_lvalue (octave_value *v = &dummy_val)
-    : val (v), type (), idx (), nel (1), index_set (false) { }
+  octave_lvalue (octave_value *v = 0)
+    : val (v), type (), idx (), nel (1) 
+    {
+      if (! v)
+        val = &black_hole;
+    }
 
   octave_lvalue (const octave_lvalue& vr)
-    : val (vr.val), type (vr.type), idx (vr.idx), nel (vr.nel),
-      index_set (vr.index_set) { }
+    : val (vr.val), type (vr.type), idx (vr.idx), nel (vr.nel) 
+    { 
+      if (vr.is_black_hole ())
+        val = &black_hole;
+    }
 
   octave_lvalue& operator = (const octave_lvalue& vr)
     {
       if (this != &vr)
 	{
 	  val = vr.val;
+          if (vr.is_black_hole ())
+            val = &black_hole;
 	  type = vr.type;
 	  idx = vr.idx;
 	  nel = vr.nel;
-	  index_set = vr.index_set;
 	}
 
       return *this;
     }
 
   ~octave_lvalue (void) { }
 
-  bool is_defined (void) { return val->is_defined (); }
+  bool is_black_hole (void) const { return val == &black_hole; }
+
+  bool is_defined (void) const { return val->is_defined (); }
 
-  bool is_undefined (void) { return val->is_undefined (); }
+  bool is_undefined (void) const { return val->is_undefined (); }
 
-  bool is_map (void) { return val->is_map (); }
+  bool is_map (void) const { return val->is_map (); }
 
   void define (const octave_value& v) { *val = v; }
 
   void assign (octave_value::assign_op, const octave_value&);
 
   void numel (octave_idx_type n) { nel = n; }
 
   octave_idx_type numel (void) const { return nel; }
@@ -94,12 +99,12 @@ private:
   octave_value *val;
 
   std::string type;
 
   std::list<octave_value_list> idx;
 
   octave_idx_type nel;
 
-  bool index_set;
+  octave_value black_hole;
 };
 
 #endif
diff --git a/src/oct-parse.yy b/src/oct-parse.yy
--- a/src/oct-parse.yy
+++ b/src/oct-parse.yy
@@ -458,17 +458,17 @@ make_statement (T *arg)
 %type <tree_constant_type> string constant magic_colon
 %type <tree_anon_fcn_handle_type> anon_fcn_handle
 %type <tree_fcn_handle_type> fcn_handle
 %type <tree_matrix_type> matrix_rows matrix_rows1
 %type <tree_cell_type> cell_rows cell_rows1
 %type <tree_expression_type> matrix cell
 %type <tree_expression_type> primary_expr postfix_expr prefix_expr binary_expr
 %type <tree_expression_type> simple_expr colon_expr assign_expr expression
-%type <tree_identifier_type> identifier fcn_name
+%type <tree_identifier_type> identifier fcn_name magic_tilde
 %type <tree_identifier_type> superclass_identifier meta_identifier
 %type <octave_user_function_type> function1 function2 classdef1
 %type <tree_index_expression_type> word_list_cmd
 %type <tree_colon_expression_type> colon_expr1
 %type <tree_argument_list_type> arg_list word_list assign_lhs
 %type <tree_argument_list_type> cell_or_matrix_row
 %type <tree_parameter_list_type> param_list param_list1 param_list2
 %type <tree_parameter_list_type> return_list return_list1
@@ -750,25 +750,38 @@ primary_expr	: identifier
 
 magic_colon	: ':'
 		  {
 		    octave_value tmp (octave_value::magic_colon_t);
 		    $$ = new tree_constant (tmp);
 		  }
 		;
 
+magic_tilde	: EXPR_NOT
+		  {
+		    $$ = new tree_black_hole ();
+		  }
+		;
+
 arg_list	: expression
 		  { $$ = new tree_argument_list ($1); }
 		| magic_colon
 		  { $$ = new tree_argument_list ($1); }
+		| magic_tilde
+		  { $$ = new tree_argument_list ($1); }
 		| arg_list ',' magic_colon
 		  {
 		    $1->append ($3);
 		    $$ = $1;
 		  }
+		| arg_list ',' magic_tilde
+		  {
+		    $1->append ($3);
+		    $$ = $1;
+		  }
 		| arg_list ',' expression
 		  {
 		    $1->append ($3);
 		    $$ = $1;
 		  }
 		;
 
 indirect_ref_op	: '.'
@@ -1000,16 +1013,20 @@ decl_param_init : // empty
 
 decl2		: identifier
 		  { $$ = new tree_decl_elt ($1); }
 		| identifier '=' decl_param_init expression
 		  {
 		    lexer_flags.looking_at_initializer_expression = false;
 		    $$ = new tree_decl_elt ($1, $4);
 		  }
+                | magic_tilde
+                  {
+                    $$ = new tree_decl_elt ($1);
+                  }
 		;
 
 // ====================
 // Selection statements
 // ====================
 
 select_command	: if_command
 		  { $$ = $1; }
@@ -2967,16 +2984,22 @@ recover_from_parsing_function (void)
 
 // Make an index expression.
 
 static tree_index_expression *
 make_index_expression (tree_expression *expr, tree_argument_list *args,
 		       char type)
 {
   tree_index_expression *retval = 0;
+  
+  if (args && args->has_magic_tilde ())
+    {
+      yyerror ("invalid use of empty argument (~) in index expression");
+      return retval;
+    }
 
   int l = expr->line ();
   int c = expr->column ();
 
   expr->mark_postfix_indexed ();
 
   if (expr->is_index_expression ())
     {
diff --git a/src/pt-arg-list.cc b/src/pt-arg-list.cc
--- a/src/pt-arg-list.cc
+++ b/src/pt-arg-list.cc
@@ -34,16 +34,17 @@ along with Octave; see the file COPYING.
 #include "error.h"
 #include "oct-lvalue.h"
 #include "oct-obj.h"
 #include "ov.h"
 #include "ov-usr-fcn.h"
 #include "parse.h"
 #include "pt-arg-list.h"
 #include "pt-exp.h"
+#include "pt-id.h"
 #include "pt-pr-code.h"
 #include "pt-walk.h"
 #include "toplev.h"
 #include "unwind-prot.h"
 
 // Argument lists.
 
 tree_argument_list::~tree_argument_list (void)
@@ -72,16 +73,22 @@ tree_argument_list::has_magic_end (void)
 
 void
 tree_argument_list::append (const element_type& s)
 {
   octave_base_list<tree_expression *>::append (s);
 
   if (! list_includes_magic_end && s && s->has_magic_end ())
     list_includes_magic_end = true;
+
+  if (! list_includes_magic_tilde && s && s->is_identifier ())
+    {
+      tree_identifier *id = dynamic_cast<tree_identifier *> (s);
+      list_includes_magic_tilde = id && id->is_black_hole ();
+    }
 }
 
 bool
 tree_argument_list::all_elements_are_constant (void) const
 {
   for (const_iterator p = begin (); p != end (); p++)
     {
       tree_expression *elt = *p;
diff --git a/src/pt-arg-list.h b/src/pt-arg-list.h
--- a/src/pt-arg-list.h
+++ b/src/pt-arg-list.h
@@ -41,26 +41,31 @@ class tree_walker;
 class
 tree_argument_list : public octave_base_list<tree_expression *>
 {
 public:
 
   typedef tree_expression* element_type;
 
   tree_argument_list (void)
-    : list_includes_magic_end (false), simple_assign_lhs (false) { }
+    : list_includes_magic_end (false), list_includes_magic_tilde (false),
+    simple_assign_lhs (false) { }
 
   tree_argument_list (tree_expression *t)
-    : list_includes_magic_end (false), simple_assign_lhs (false)
+    : list_includes_magic_end (false), list_includes_magic_tilde (false),
+    simple_assign_lhs (false)
   { append (t); }
 
   ~tree_argument_list (void);
 
   bool has_magic_end (void) const;
 
+  bool has_magic_tilde (void) const
+    { return list_includes_magic_tilde; }
+
   tree_expression *remove_front (void)
     {
       iterator p = begin ();
       tree_expression *retval = *p;
       erase (p);
       return retval;
     }
 
@@ -82,16 +87,18 @@ public:
 			   symbol_table::context_id context) const;
 
   void accept (tree_walker& tw);
 
 private:
 
   bool list_includes_magic_end;
 
+  bool list_includes_magic_tilde;
+
   bool simple_assign_lhs;
 
   // No copying!
 
   tree_argument_list (const tree_argument_list&);
 
   tree_argument_list& operator = (const tree_argument_list&);
 };
diff --git a/src/pt-id.h b/src/pt-id.h
--- a/src/pt-id.h
+++ b/src/pt-id.h
@@ -61,17 +61,19 @@ public:
   bool is_identifier (void) const { return true; }
 
   // The name doesn't change with scope, so use sym instead of
   // accessing it through sym so that this function may remain const.
   std::string name (void) const { return sym.name (); }
 
   bool is_defined (void) { return xsym().is_defined (); }
 
-  bool is_variable (void) { return xsym().is_variable (); }
+  virtual bool is_variable (void) { return xsym().is_variable (); }
+
+  virtual bool is_black_hole (void) { return false; }
 
   // Try to find a definition for an identifier.  Here's how:
   //
   //   * If the identifier is already defined and is a function defined
   //     in an function file that has been modified since the last time 
   //     we parsed it, parse it again.
   //
   //   * If the identifier is not defined, try to find a builtin
@@ -138,9 +140,31 @@ private:
 
   // No copying!
 
   tree_identifier (const tree_identifier&);
 
   tree_identifier& operator = (const tree_identifier&);
 };
 
+class tree_black_hole : public tree_identifier
+{
+public:
+
+  tree_black_hole (int l = -1, int c = -1)
+    : tree_identifier (l, c) { }
+
+  std::string name (void) const { return "~"; }
+
+  bool is_variable (void) { return false; }
+
+  bool is_black_hole (void) { return true; }
+
+  tree_black_hole *dup (void) const
+    { return new tree_black_hole; }
+
+  octave_lvalue lvalue (void)
+    {
+      return octave_lvalue (0); // black hole lvalue
+    }
+};
+
 #endif
diff --git a/src/pt-idx.cc b/src/pt-idx.cc
--- a/src/pt-idx.cc
+++ b/src/pt-idx.cc
@@ -76,16 +76,19 @@ tree_index_expression::tree_index_expres
 
 void
 tree_index_expression::append (tree_argument_list *lst, char t)
 {
   args.push_back (lst);
   type.append (1, t);
   arg_nm.push_back (lst ? lst->get_arg_names () : string_vector ());
   dyn_field.push_back (static_cast<tree_expression *> (0));
+
+  if (lst && lst->has_magic_tilde ())
+    error ("invalid use of empty argument (~) in index expression");
 }
 
 void
 tree_index_expression::append (const std::string& n)
 {
   args.push_back (static_cast<tree_argument_list *> (0));
   type.append (".");
   arg_nm.push_back (n);
diff --git a/src/pt-misc.cc b/src/pt-misc.cc
--- a/src/pt-misc.cc
+++ b/src/pt-misc.cc
@@ -71,17 +71,22 @@ tree_parameter_list::validate (in_or_out
       tree_decl_elt *elt = *p;
 
       tree_identifier *id = elt->ident ();
 
       if (id)
 	{
 	  std::string name = id->name ();
 
-	  if (dict.find (name) != dict.end ())
+          if (id->is_black_hole ())
+            {
+              if (type != in)
+                error ("invalid use of ~ in output list");
+            }
+          else if (dict.find (name) != dict.end ())
 	    {
 	      retval = false;
 	      error ("`%s' appears more than once in parameter list",
 		     name.c_str ());
 	      break;
 	    }
 	  else
 	    dict.insert (name);
