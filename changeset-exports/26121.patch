# HG changeset patch
# User Rik <rik@octave.org>
# Date 1542900442 28800
#      Thu Nov 22 07:27:22 2018 -0800
# Node ID 80d284ab86b680a9b42dd031fc55604934ad4735
# Parent  1dd0e16b82e3f608b557944e9ef22ec064df96ae
# Parent  80643ff8c8b730f28bc47ef16d1c939eba6410f7
maint: merge stable to default.

diff --git a/scripts/plot/draw/contourc.m b/scripts/plot/draw/contourc.m
--- a/scripts/plot/draw/contourc.m
+++ b/scripts/plot/draw/contourc.m
@@ -21,17 +21,17 @@
 ## @deftypefnx {} {[@var{c}, @var{lev}] =} contourc (@var{z}, @var{vn})
 ## @deftypefnx {} {[@var{c}, @var{lev}] =} contourc (@var{x}, @var{y}, @var{z})
 ## @deftypefnx {} {[@var{c}, @var{lev}] =} contourc (@var{x}, @var{y}, @var{z}, @var{vn})
 ## Compute contour lines (isolines of constant Z value).
 ##
 ## The matrix @var{z} contains height values above the rectangular grid
 ## determined by @var{x} and @var{y}.  If only a single input @var{z} is
 ## provided then @var{x} is taken to be @code{1:columns (@var{z})} and @var{y}
-## is taken to be @code{1:rows (@var{z})}.
+## is taken to be @code{1:rows (@var{z})}.  The minimum data size is 2x2.
 ##
 ## The optional input @var{vn} is either a scalar denoting the number of
 ## contour lines to compute or a vector containing the Z values where lines
 ## will be computed.  When @var{vn} is a vector the number of contour lines
 ## is @code{numel (@var{vn})}.  However, to compute a single contour line
 ## at a given value use @code{@var{vn} = [val, val]}.  If @var{vn} is omitted
 ## it defaults to 10.
 ##
@@ -62,18 +62,16 @@
 ## contourc (x, y, z, 2:3)
 ##    @result{}   2.0000   2.0000   1.0000   3.0000   1.5000   2.0000
 ##         2.0000   1.0000   2.0000   2.0000   2.0000   1.5000
 ## @end group
 ## @end example
 ## @seealso{contour, contourf, contour3, clabel}
 ## @end deftypefn
 
-## Author: Shai Ayal <shaiay@users.sourceforge.net>
-
 function [c, lev] = contourc (varargin)
 
   if (nargin < 1 || nargin > 4)
     print_usage ();
   endif
 
   if (nargin == 1)
     z = varargin{1};
@@ -92,18 +90,23 @@ function [c, lev] = contourc (varargin)
     vn = 10;
   elseif (nargin == 4)
     x = varargin{1};
     y = varargin{2};
     z = varargin{3};
     vn = varargin{4};
   endif
 
-  if (! ismatrix (z) || ! ismatrix (x) || ! ismatrix (y))
-    error ("contourc: X, Y, and Z must be matrices");
+  if (! (isnumeric (z) && isnumeric (x) && isnumeric (y))
+      || ! (ismatrix (z) && ismatrix (x) && ismatrix (y)))
+    error ("contourc: X, Y, and Z must be numeric matrices");
+  endif
+
+  if (rows (z) < 2 || columns (z) < 2)
+    error ("contourc: Z data must have at least 2 rows and 2 columns");
   endif
 
   if (isscalar (vn))
     vv = linspace (min (z(:)), max (z(:)), vn+2)(2:end-1);
   else
     vv = unique (sort (vn));
   endif
 
@@ -163,8 +166,20 @@ endfunction
 %! x = 0:2;
 %! y = x;
 %! z = x' * y;
 %! c_exp = [2, 1, 1, 2, 2, 3, 1.5, 2; 4, 2, 2, 1, 1, 2, 2, 1.5];
 %! lev_exp = [2 3];
 %! [c_obs, lev_obs] = contourc (x, y, z, 2:3);
 %! assert (c_obs, c_exp, eps);
 %! assert (lev_obs, lev_exp, eps);
+
+## Test input validation
+%!error contourc ()
+%!error contourc (1,2,3,4,5)
+%!error <X, Y, and Z must be numeric> contourc ({1})
+%!error <X, Y, and Z must be numeric> contourc ({1}, 2, 3)
+%!error <X, Y, and Z must be numeric> contourc (1, {2}, 3)
+%!error <X, Y, and Z must be .* matrices> contourc (ones (3,3,3))
+%!error <X, Y, and Z must be .* matrices> contourc (ones (3,3,3), 2, 3)
+%!error <X, Y, and Z must be .* matrices> contourc (1, ones (3,3,3), 3)
+%!error <Z data must have at least 2 rows> contourc ([1, 2])
+%!error <Z data must have at least .* 2 columns> contourc ([1; 2])
