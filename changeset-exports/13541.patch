# HG changeset patch
# User Jacob Dawid <jacob.dawid@googlemail.com>
# Date 1311714292 -7200
#      Tue Jul 26 23:04:52 2011 +0200
# Node ID b48ac9ad8de07dadad94f0fa06a2d3f404f24241
# Parent  0dbf8681cd0819857ab8eef7ab8f7b4c33fc59d4
Highly improved separation of model and view classes.

diff --git a/gui/src/MainWindow.cpp b/gui/src/MainWindow.cpp
--- a/gui/src/MainWindow.cpp
+++ b/gui/src/MainWindow.cpp
@@ -21,26 +21,24 @@
 #include <QAction>
 #include <QSettings>
 #include <QDesktopServices>
 #include <QFileDialog>
 #include "MainWindow.h"
 #include "FileEditorMdiSubWindow.h"
 #include "ImageViewerMdiSubWindow.h"
 #include "SettingsDialog.h"
-#include "OctaveCallbackThread.h"
 #include "cmd-edit.h"
 
 #define VERSION_STRING "Octave GUI (0.6.0)"
 
-MainWindow::MainWindow (QWidget * parent):QMainWindow (parent),
-m_isRunning (true)
+MainWindow::MainWindow (QWidget * parent):QMainWindow (parent)
 {
   construct ();
-  establishOctaveLink ();
+  OctaveLink::instance ()->launchOctave();
 }
 
 MainWindow::~MainWindow ()
 {
 }
 
 void
 MainWindow::handleOpenFileRequest (QString fileName)
@@ -146,24 +144,20 @@ MainWindow::processSettingsDialogRequest
   SettingsDialog settingsDialog (this);
   settingsDialog.exec ();
   emit settingsChanged ();
 }
 
 void
 MainWindow::closeEvent (QCloseEvent * closeEvent)
 {
-  m_isRunning = false;
   reportStatusMessage (tr ("Saving data and shutting down."));
   writeSettings ();
 
-  m_octaveCallbackThread->terminate ();
-  m_octaveCallbackThread->wait ();
-
-  m_octaveMainThread->terminate ();
+  OctaveLink::instance ()->terminateOctave();
   QMainWindow::closeEvent (closeEvent);
 }
 
 void
 MainWindow::readSettings ()
 {
   QSettings *settings = ResourceManager::instance ()->settings ();
   restoreGeometry (settings->value ("MainWindow/geometry").toByteArray ());
@@ -201,16 +195,18 @@ MainWindow::construct ()
   m_filesDockWidget = new FilesDockWidget (this);
   m_statusBar = new QStatusBar (this);
 
   // Setup essential MDI Windows.
   m_octaveTerminal = new OctaveTerminal (this);
   m_documentationWidget = new BrowserWidget (this);
   m_ircWidget = new IRCWidget (this);
 
+  m_octaveTerminal->openTerminal ();
+
   m_documentationWidgetSubWindow =
     m_centralMdiArea->addSubWindow (m_documentationWidget,
 				    Qt::WindowTitleHint | Qt::
 				    WindowMinMaxButtonsHint);
   m_documentationWidgetSubWindow->
     setObjectName ("DocumentationWidgetSubWindow");
   m_documentationWidgetSubWindow->setWindowTitle (tr ("Documentation"));
   m_documentationWidgetSubWindow->
@@ -299,20 +295,8 @@ MainWindow::construct ()
   addDockWidget (Qt::LeftDockWidgetArea, m_historyDockWidget);
   addDockWidget (Qt::RightDockWidgetArea, m_filesDockWidget);
   setStatusBar (m_statusBar);
 
   readSettings ();
   openWebPage ("http://www.gnu.org/software/octave/doc/interpreter/");
 }
 
-void
-MainWindow::establishOctaveLink ()
-{
-  m_octaveTerminal->openTerminal ();
-
-  m_octaveMainThread = new OctaveMainThread (this);
-  m_octaveMainThread->start ();
-
-  m_octaveCallbackThread = new OctaveCallbackThread (this, this);
-  connect (m_octaveMainThread, SIGNAL(ready()), m_octaveCallbackThread, SLOT(start()));
-  reportStatusMessage (tr ("Established link to Octave."));
-}
diff --git a/gui/src/MainWindow.h b/gui/src/MainWindow.h
--- a/gui/src/MainWindow.h
+++ b/gui/src/MainWindow.h
@@ -30,34 +30,27 @@
 #include "OctaveTerminal.h"
 #include "OctaveLink.h"
 #include "VariablesDockWidget.h"
 #include "HistoryDockWidget.h"
 #include "FilesDockWidget.h"
 #include "BrowserWidget.h"
 #include "IRCWidget.h"
 
-class OctaveCallbackThread;
-#include "OctaveMainThread.h"
-
 /**
   * \class MainWindow
   *
   * Represents the main window.
   */
 class MainWindow:public QMainWindow
 {
 Q_OBJECT public:
   MainWindow (QWidget * parent = 0);
   ~MainWindow ();
 
-  bool isRunning ()
-  {
-    return m_isRunning;
-  }
   OctaveTerminal *octaveTerminal ()
   {
     return m_octaveTerminal;
   }
   VariablesDockWidget *variablesDockWidget ()
   {
     return m_variablesDockWidget;
   }
@@ -108,16 +101,11 @@ private:
 
   // Dock widgets.
   VariablesDockWidget *m_variablesDockWidget;
   HistoryDockWidget *m_historyDockWidget;
   FilesDockWidget *m_filesDockWidget;
 
   // Toolbars.
   QStatusBar *m_statusBar;
-
-  // Threads for running octave and managing the data interaction.
-  OctaveMainThread *m_octaveMainThread;
-  OctaveCallbackThread *m_octaveCallbackThread;
-  bool m_isRunning;
 };
 
 #endif // MAINWINDOW_H
diff --git a/gui/src/OctaveCallbackThread.cpp b/gui/src/OctaveCallbackThread.cpp
--- a/gui/src/OctaveCallbackThread.cpp
+++ b/gui/src/OctaveCallbackThread.cpp
@@ -1,26 +1,17 @@
 #include "OctaveCallbackThread.h"
+#include "MainWindow.h"
 
-OctaveCallbackThread::OctaveCallbackThread (QObject * parent,
-                      MainWindow * mainWindow):QThread (parent),
-  m_mainWindow (mainWindow)
+OctaveCallbackThread::OctaveCallbackThread (QObject * parent):QThread (parent)
 {
 }
 
 void
 OctaveCallbackThread::run ()
 {
-  while (m_mainWindow->isRunning ())
+  while (1)
     {
       OctaveLink::instance ()->fetchSymbolTable ();
-
-      // Get a full variable list.
-      QList < SymbolRecord > symbolTable = OctaveLink::instance ()->copyCurrentSymbolTable ();
-      if (symbolTable.size ())
-        {
-          m_mainWindow->variablesDockWidget ()->setVariablesList (symbolTable);
-        }
-
       OctaveLink::instance ()->updateHistoryModel ();
       usleep (500000);
     }
 }
diff --git a/gui/src/OctaveCallbackThread.h b/gui/src/OctaveCallbackThread.h
--- a/gui/src/OctaveCallbackThread.h
+++ b/gui/src/OctaveCallbackThread.h
@@ -1,19 +1,16 @@
 #ifndef OCTAVECALLBACKTHREAD_H
 #define OCTAVECALLBACKTHREAD_H
 
 #include <QThread>
-#include "MainWindow.h"
 
 class OctaveCallbackThread:public QThread
 {
   Q_OBJECT
 public:
-  OctaveCallbackThread (QObject * parent, MainWindow * mainWindow);
-
+  OctaveCallbackThread (QObject * parent);
 protected:
   void run ();
-private:
-  MainWindow * m_mainWindow;
+
 };
 
 #endif // OCTAVECALLBACKTHREAD_H
diff --git a/gui/src/OctaveLink.cpp b/gui/src/OctaveLink.cpp
--- a/gui/src/OctaveLink.cpp
+++ b/gui/src/OctaveLink.cpp
@@ -15,20 +15,17 @@ for more details.
 
 You should have received a copy of the GNU General Public License
 along with Octave; see the file COPYING.  If not, write to the Free
 Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
 02110-1301, USA.
 
 */
 
-// Born July 13, 2007.
-
 #include "OctaveLink.h"
-#include <QDebug>
 
 OctaveLink OctaveLink::m_singleton;
 
 OctaveLink::OctaveLink ():QObject ()
 {
   m_symbolTableSemaphore = new QSemaphore (1);
   m_historyModel = new QStringListModel (this);
 }
@@ -92,16 +89,36 @@ OctaveLink::octaveValueAsQString (Octave
     }
   else
     {
       return QString ("<Type not recognized>");
     }
 }
 
 void
+OctaveLink::launchOctave ()
+{
+  m_octaveMainThread = new OctaveMainThread (this);
+  m_octaveMainThread->start ();
+
+  m_octaveCallbackThread = new OctaveCallbackThread (this);
+  connect (m_octaveMainThread, SIGNAL(ready()), m_octaveCallbackThread, SLOT(start()));
+}
+
+void
+OctaveLink::terminateOctave ()
+{
+  m_octaveCallbackThread->terminate ();
+  m_octaveCallbackThread->wait ();
+
+  m_octaveMainThread->terminate ();
+  m_octaveMainThread->wait();
+}
+
+void
 OctaveLink::fetchSymbolTable ()
 {
   m_symbolTableSemaphore->acquire ();
   m_symbolTableBuffer.clear ();
   std::list < SymbolRecord > allVariables = symbol_table::all_variables ();
   std::list < SymbolRecord >::iterator iterator;
   for (iterator = allVariables.begin (); iterator != allVariables.end ();
        iterator++)
diff --git a/gui/src/OctaveLink.h b/gui/src/OctaveLink.h
--- a/gui/src/OctaveLink.h
+++ b/gui/src/OctaveLink.h
@@ -76,35 +76,41 @@
 #include <QList>
 #include <QString>
 #include <QStringList>
 #include <QVector>
 #include <QSemaphore>
 #include <QObject>
 #include <QStringListModel>
 
+#include "OctaveCallbackThread.h"
+#include "OctaveMainThread.h"
+
 typedef symbol_table::symbol_record SymbolRecord;
 typedef octave_value OctaveValue;
 
 /**
   * \class OctaveLink
   * Manages a link to an octave instance.
   */
-class OctaveLink:QObject
+class OctaveLink:public QObject
 {
   Q_OBJECT
 public:
   static OctaveLink *
   instance ()
   {
     return &m_singleton;
   }
   static QString
   octaveValueAsQString (OctaveValue octaveValue);
 
+  void launchOctave ();
+  void terminateOctave ();
+
   /**
     * Returns a copy of the current symbol table buffer.
     * \return Copy of the current symbol table buffer.
     */
   QList < SymbolRecord > copyCurrentSymbolTable ();
 
   void
   updateHistoryModel ();
@@ -129,11 +135,15 @@ private:
 
   /** Variable related member variables. */
   QSemaphore * m_symbolTableSemaphore;
   QList < SymbolRecord > m_symbolTableBuffer;
 
   /** History related member variables. */
   QStringListModel *m_historyModel;
 
+  // Threads for running octave and managing the data interaction.
+  OctaveMainThread *m_octaveMainThread;
+  OctaveCallbackThread *m_octaveCallbackThread;
+
   static OctaveLink m_singleton;
 };
 #endif // OCTAVELINK_H
diff --git a/gui/src/OctaveMainThread.cpp b/gui/src/OctaveMainThread.cpp
--- a/gui/src/OctaveMainThread.cpp
+++ b/gui/src/OctaveMainThread.cpp
@@ -1,9 +1,10 @@
 #include "OctaveMainThread.h"
+#include "OctaveLink.h"
 
 OctaveMainThread::OctaveMainThread (QObject * parent):QThread (parent)
 {
 }
 
 void
 OctaveMainThread::run ()
 {
diff --git a/gui/src/OctaveMainThread.h b/gui/src/OctaveMainThread.h
--- a/gui/src/OctaveMainThread.h
+++ b/gui/src/OctaveMainThread.h
@@ -1,14 +1,12 @@
 #ifndef OCTAVEMAINTHREAD_H
 #define OCTAVEMAINTHREAD_H
 
 #include <QThread>
-#include "OctaveLink.h"
-
 class OctaveMainThread:public QThread
 {
   Q_OBJECT
 public:
   OctaveMainThread (QObject * parent);
 
 signals:
   void ready();
diff --git a/gui/src/VariablesDockWidget.cpp b/gui/src/VariablesDockWidget.cpp
--- a/gui/src/VariablesDockWidget.cpp
+++ b/gui/src/VariablesDockWidget.cpp
@@ -21,16 +21,18 @@
 #include <QVBoxLayout>
 #include <QPushButton>
 
 VariablesDockWidget::VariablesDockWidget (QWidget * parent):QDockWidget
   (parent)
 {
   setObjectName ("VariablesDockWidget");
   construct ();
+
+  connect (OctaveLink::instance(), SIGNAL (symbolTableChanged()), this, SLOT (fetchSymbolTable()));
 }
 
 void
 VariablesDockWidget::construct ()
 {
   setWindowTitle (tr ("Workspace"));
 
   m_updateSemaphore = new QSemaphore (1);
@@ -189,8 +191,15 @@ VariablesDockWidget::updateScope (int to
     }
 }
 
 void
 VariablesDockWidget::noticeSettings ()
 {
 
 }
+
+void
+VariablesDockWidget::fetchSymbolTable ()
+{
+  QList < SymbolRecord > symbolTable = OctaveLink::instance ()->copyCurrentSymbolTable ();
+  setVariablesList (symbolTable);
+}
diff --git a/gui/src/VariablesDockWidget.h b/gui/src/VariablesDockWidget.h
--- a/gui/src/VariablesDockWidget.h
+++ b/gui/src/VariablesDockWidget.h
@@ -29,16 +29,17 @@ class VariablesDockWidget:public QDockWi
   Q_OBJECT
 public:
   VariablesDockWidget (QWidget * parent = 0);
   void setVariablesList (QList < SymbolRecord > symbolTable);
 
 public slots:
   /** Tells the widget to notice settings that are probably new. */
   void noticeSettings ();
+  void fetchSymbolTable ();
 
 private:
   void construct ();
   void updateTreeEntry (QTreeWidgetItem * treeItem,
 			SymbolRecord symbolRecord);
   void updateScope (int topLevelItemIndex,
 		    QList < SymbolRecord > symbolTable);
   QTreeWidget *m_variablesTreeWidget;
