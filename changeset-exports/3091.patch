# HG changeset patch
# User jwe
# Date 876500808 0
#      Fri Oct 10 16:26:48 1997 +0000
# Node ID b06dcbb6b3b106fc70b2607e9103b77c3de3c35b
# Parent  63bda47c6512e1164a4d23a360a4be8975b03da5
[project @ 1997-10-10 16:26:47 by jwe]

diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,8 +1,14 @@
+Fri Oct 10 11:18:10 1997  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* polynomial/polyfit.m: Compute yf correctly.  From Seung Lee
+	<SJL@nrc.gov>.  Also return yf in the same orientation as the
+	original y vector.
+
 Fri Sep 19 17:04:40 1997  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* linear-algebra/cross.m: Use direct formula instead of calling
 	det three times in a loop.  If both args are column (row) vectors,
 	return a column (row) vector.  If they don't match, pay attention
 	to the value of prefer_column_vectors.
 
 Thu Aug 28 15:31:20 1997  Rolf Fabian <fabian@olymp.Umwelt.TU-Cottbus.de>
diff --git a/scripts/polynomial/polyfit.m b/scripts/polynomial/polyfit.m
--- a/scripts/polynomial/polyfit.m
+++ b/scripts/polynomial/polyfit.m
@@ -1,9 +1,9 @@
-## Copyright (C) 1996, 1997 John W. Eaton
+## Copyright (C) 1996 John W. Eaton
 ##
 ## This file is part of Octave.
 ##
 ## Octave is free software; you can redistribute it and/or modify it
 ## under the terms of the GNU General Public License as published by
 ## the Free Software Foundation; either version 2, or (at your option)
 ## any later version.
 ##
@@ -40,35 +40,43 @@ function [p, yf] = polyfit (x, y, n)
   if (! (is_vector (x) && is_vector (y) && size (x) == size (y)))
     error ("polyfit: x and y must be vectors of the same size");
   endif
 
   if (! (is_scalar (n) && n >= 0 && ! isinf (n) && n == round (n)))
     error ("polyfit: n must be a nonnegative integer");
   endif
 
+  y_is_row_vector = (rows (y) == 1);
+
   l = length (x);
   x = reshape (x, l, 1);
   y = reshape (y, l, 1);
 
   ## Unfortunately, the economy QR factorization doesn't really save
   ## memory doing the computation -- the returned values are just
   ## smaller.
 
   ## [Q, R] = qr (X, 0);
   ## p = flipud (R \ (Q' * y));
 
   ## XXX FIXME XXX -- this is probably not so good for extreme values of
   ## N or X...
 
   X = (x * ones (1, n+1)) .^ (ones (l, 1) * (0 : n));
 
-  p = flipud ((X' * X) \ (X' * y));
+  p = (X' * X) \ (X' * y);
+
+  if (nargout == 2)
+    yf = X * p;
+  endif
+
+  p = flipud (p);
 
   if (! prefer_column_vectors)
     p = p';
   endif
 
-  if (nargout == 2)
-    yf = X * p;
+  if (y_is_row_vector)
+    yf = yf';
   endif
 
 endfunction
