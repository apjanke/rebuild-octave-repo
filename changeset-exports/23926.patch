# HG changeset patch
# User Kai T. Ohlhus <k.ohlhus@gmail.com>
# Date 1503328948 -7200
#      Mon Aug 21 17:22:28 2017 +0200
# Node ID 58b76c741c3d536c7c614b0a7ba3c4a1b79831eb
# Parent  d64985eaf56dc1df5073a9cea51b0c4b8b43a521
publish: improve detecion of block markup (bug #51782)

* scripts/general/publish.m: improve detecion of block markup by using a
recursive strategy with regular expressions, rather than parsing line by line.
There was a problem, because such a <html> or <latex> block was never able
to span an empty line in the previous strategy.

* scripts/general/private/__publish_html_output__.m (do_html),
scripts/general/private/__publish_latex_output__.m (do_latex):
sourround output by newlines.

* test/publish/test_script.m: New test cases for block markup with empty lines.

diff --git a/scripts/general/private/__publish_html_output__.m b/scripts/general/private/__publish_html_output__.m
--- a/scripts/general/private/__publish_html_output__.m
+++ b/scripts/general/private/__publish_html_output__.m
@@ -252,17 +252,17 @@ function outstr = do_numbered_list (cstr
   outstr = [outstr, "</ol>\n"];
 endfunction
 
 function outstr = do_graphic (str)
   outstr = ['<img src="' str '" alt="' str '">'];
 endfunction
 
 function outstr = do_html (str)
-  outstr = str;
+  outstr = ["\n" str "\n"];
 endfunction
 
 function outstr = do_latex (str)
   outstr = "";
 endfunction
 
 function outstr = do_link (url_str, str)
   outstr = ['<a href="' url_str '">' str "</a>"];
diff --git a/scripts/general/private/__publish_latex_output__.m b/scripts/general/private/__publish_latex_output__.m
--- a/scripts/general/private/__publish_latex_output__.m
+++ b/scripts/general/private/__publish_latex_output__.m
@@ -220,17 +220,17 @@ function outstr = do_graphic (str)
 '\end{figure}');
 endfunction
 
 function outstr = do_html (str)
   outstr = "";
 endfunction
 
 function outstr = do_latex (str)
-  outstr = str;
+  outstr = ["\n" str "\n"];
 endfunction
 
 function outstr = do_link (url_str, str)
   outstr = ['\href{' url_str '}{' str '}'];
 endfunction
 
 function outstr = do_text (str)
   outstr = ["\n\n" escape_latex(str) "\n\n"];
diff --git a/scripts/general/publish.m b/scripts/general/publish.m
--- a/scripts/general/publish.m
+++ b/scripts/general/publish.m
@@ -582,18 +582,44 @@ function p_content = parse_paragraph_con
   ##     * Trademark symbols
 
   p_content = cell ();
 
   if (isempty (content))
     return;
   endif
 
+  ## Extract <html> and <latex> blocks recursively.
+  content_str = strjoin (content, "\n");
+  tags = {"html", "latex"};
+  for i = 1:length(tags)
+    tok = regexp (content_str, ...
+      ['(.*?)(^|\n\n)(<', tags{i}, '>)\n(.*?)\n(<\/', ...
+        tags{i}, '>)($|\n\n)(.*)'], "tokens", "once");
+    if (! isempty (tok))
+      ## If there was some text before that block --> recursion
+      if (! strcmpi (tok{1}, ["<", tags{i}, ">"]))
+        p_content = parse_paragraph_content (strsplit (tok{1}, "\n"));
+        tok(1:2) = [];
+      endif
+      ## Extract the block content
+      p_content{end+1}.type = tags{i};
+      p_content{end}.content = tok{2};
+      ## If there was some text after that block --> recursion
+      if (length (tok) == 5)
+        p_content = [p_content, ...
+          parse_paragraph_content(strsplit (tok{5}, "\n"))];
+      endif
+      return;
+    endif
+  endfor
+
   ## Split into blocks separated by empty lines
   idx = [0, find(cellfun (@isempty, content)), length(content) + 1];
+
   ## For each block
   for i = find (diff (idx) > 1)
     block = content(idx(i) + 1:idx(i+1) - 1);
 
     ## Octave code (two leading spaces)
     if (all (cellfun (@(c) strncmp (char (c), "  ", 2), block)))
       p_content{end+1}.type = "preformatted_code";
       block = cellfun (@(c) cellstr (c(3:end)), block);
@@ -647,68 +673,31 @@ function p_content = parse_paragraph_con
     if (! isempty (fname = regexpi (strjoin (block, ""),
                                     '^<<(.*)>>$',
                                     "tokens")))
       p_content{end+1}.type = "graphic";
       p_content{end}.content = strtrim ((fname{1}){1});
       continue;
     endif
 
-    ## Parse remaining blocks line by line
-    j = 1;
-    while (j <= numel (block))
-      ## HTML markup
-      if (strcmpi (block{j}, "<html>"))
-        start_html = j + 1;
-        while (j < numel (block) && ! strcmpi (block{j}, "</html>"))
-          j++;
-        endwhile
-        if (j == numel (block) && ! strcmpi (block{j}, "</html>"))
-          warning ("publish: no closing </html> found");
-        else
-          j++;  # Skip closing tag
-        endif
-        if (j > start_html)
-          p_content{end+1}.type = "html";
-          p_content{end}.content = strjoin (block(start_html:j-2), "\n");
-        endif
-      ## LaTeX markup
-      elseif (strcmpi (block{j}, "<latex>"))
-        start_latex = j + 1;
-        while (j < numel (block) && ! strcmpi (block{j}, "</latex>"))
-          j++;
-        endwhile
-        if (j == numel (block) && ! strcmpi (block{j}, "</latex>"))
-          warning ("publish: no closing </latex> found");
-        else
-          j++;  # Skip closing tag
-        endif
-        if (j > start_latex)
-          p_content{end+1}.type = "latex";
-          p_content{end}.content = strjoin (block(start_latex:j-2), "\n");
-        endif
-      ## Remaining normal text or markups belonging to normal text
-      ## that are handled while output generation:
-      ##
-      ## * Italic "_", bold "*", and monospaced "|" text
-      ## * Inline "$" and block "$$" LaTeX math
-      ## * Links
-      ## * Trademark symbols
-      else
-        if (j == 1 || isempty (p_content)
-            || ! strcmp (p_content{end}.type, "text"))
-          p_content{end+1}.type = "text";
-          p_content{end}.content = block{j};
-        else
-          p_content{end}.content = strjoin ({p_content{end}.content, ...
-                                             block{j}}, "\n");
-        endif
-        j++;
-      endif
-    endwhile
+    ## Now it can be only normal text or markups belonging to normal text
+    ## that are handled while output generation:
+    ##
+    ## * Italic "_", bold "*", and monospaced "|" text
+    ## * Inline "$" and block "$$" LaTeX math
+    ## * Links
+    ## * Trademark symbols
+    block = strjoin (block, "\n");
+    if (isempty (p_content) || ! strcmp (p_content{end}.type, "text"))
+      p_content{end+1}.type = "text";
+      p_content{end}.content = block;
+    else
+      p_content{end}.content = strjoin ({p_content{end}.content, block}, ...
+                                        "\n");
+    endif
   endfor
 endfunction
 
 
 function m_source = read_file_to_cellstr (file)
   ## READ_FILE_TO_CELLSTR reads a given file line by line into a cellstring
 
   fid = fopen (file, "r");
diff --git a/test/publish/test_script.m b/test/publish/test_script.m
--- a/test/publish/test_script.m
+++ b/test/publish/test_script.m
@@ -220,16 +220,40 @@ plot (x,y)
 # <tr>
 # <td style="border: 1px solid black;">one</td>
 # <td style="border: 1px solid black;">two</td>
 # </tr>
 # </table>
 # </html>
 #
 
+%% HTML Markup with empty lines
+% <html>
+% <table><tr>
+% <td style="border: 1px solid black;">one</td>
+% <td style="border: 1px solid black;">two</td></tr>
+% </table>
+%
+% and some text.
+% </html>
+%
+
+## HTML Markup with empty lines
+# <html>
+# <table>
+# <tr>
+# <td style="border: 1px solid black;">one</td>
+# <td style="border: 1px solid black;">two</td>
+# </tr>
+# </table>
+#
+# and some text.
+# </html>
+#
+
 %% LaTeX Markup
 % <latex>
 % \begin{equation}
 % \begin{pmatrix}
 % 1 & 2 \\ 3 & 4
 % \end{pmatrix}
 % \end{equation}
 % </latex>
@@ -240,16 +264,40 @@ plot (x,y)
 # \begin{equation}
 # \begin{pmatrix}
 # 1 & 2 \\ 3 & 4
 # \end{pmatrix}
 # \end{equation}
 # </latex>
 #
 
+%% LaTeX Markup with empty lines
+% <latex>
+% Some text
+%
+% \begin{equation}
+% \begin{pmatrix}
+% 1 & 2 \\ 3 & 4
+% \end{pmatrix}
+% \end{equation}
+% </latex>
+%
+
+## LaTeX Markup with empty lines
+# <latex>
+# Some text
+#
+# \begin{equation}
+# \begin{pmatrix}
+# 1 & 2 \\ 3 & 4
+# \end{pmatrix}
+# \end{equation}
+# </latex>
+#
+
 %% Long void
 %
 %
 %
 %
 %
 %
 %
