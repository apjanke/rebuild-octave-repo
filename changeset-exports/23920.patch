# HG changeset patch
# User Torsten <mttl@mailbox.org>
# Date 1502827206 -7200
#      Tue Aug 15 22:00:06 2017 +0200
# Node ID 0b971884080ce5c0f8ecd9b70ad4b9d44674f97a
# Parent  185f850aa543f7dffb272b7d4242ef1b1fdde6e6
reload editor files when removing was not successful (bug #43922)

* files-dock-widget.cc (contextmenu_rename): emit the signal for reloading
  the files from their new location with the state of the renaming allowing
  to reload the files from the old locations,
  (contextmenu_delete): emit the signal for reloading files if the removing
  was not successful allowing to reload the not removed files,

* files-dock-widget.h: signal file_renamed_signal with boolean parameter

* file-editor.cc (handle_file_remove): clear list of temporary closed files
  right at the beginning of this method, if an editor file is going to be
  removed or renamed, store the old file name at first in the file list,
  then the new file name (or an empty string) and finally the encoding;
  (handle_dir_remove): clear the closed file list at the beginning, store
  name of old file, new file (or empty string) and encoding into the list
  is a file is affected by renaming or removing the directory;
  (handle_file_renamed): new boolean parameter, which decides whether the old
  or the new file is loaded into the editor

* file-editor.h: boolean parameter for handle_file_renamed; list of temporarily
  closed files contains old name, new name, and encoding

* main-window.cc (construct): update signal connection due to new boolean
  parameter

diff --git a/libgui/src/files-dock-widget.cc b/libgui/src/files-dock-widget.cc
--- a/libgui/src/files-dock-widget.cc
+++ b/libgui/src/files-dock-widget.cc
@@ -660,19 +660,23 @@ files_dock_widget::contextmenu_rename (b
         = QInputDialog::getText (this, tr ("Rename file/directory"),
                                  tr ("Rename file/directory:\n")
                                  + old_name + tr ("\n to: "),
                                  QLineEdit::Normal, old_name, &ok);
       if (ok && new_name.length () > 0)
         {
           new_name = path.absolutePath () + '/' + new_name;
           old_name = path.absolutePath () + '/' + old_name;
-          emit file_remove_signal (old_name, new_name);  // editor: close old
-          path.rename (old_name, new_name);
-          emit file_renamed_signal ();  // editor: load new file
+          // editor: close old
+          emit file_remove_signal (old_name, new_name);
+          // Do the renaming
+          bool st = path.rename (old_name, new_name);
+          // editor: load new/old file depending on success
+          emit file_renamed_signal (st);
+          // Clear cache of file browser
           _file_system_model->revert ();
         }
     }
 
 }
 
 void
 files_dock_widget::contextmenu_delete (bool)
@@ -704,19 +708,21 @@ files_dock_widget::contextmenu_delete (b
                                       tr ("Can not delete a directory that is not empty"));
               else
                 _file_system_model->rmdir (index);
             }
           else
             {
               // Close the file in the editor if open
               emit file_remove_signal (info.filePath (), QString ());
-              // Remove the file. This operation might fail, but we will not
-              // reopen a possibly related editor tab in this case.
-              _file_system_model->remove (index);
+              // Remove the file.
+              bool st = _file_system_model->remove (index);
+              // reload the old file if removing was not successful
+              if (! st)
+                emit file_renamed_signal (false);
             }
 
           _file_system_model->revert ();
 
         }
     }
 }
 
diff --git a/libgui/src/files-dock-widget.h b/libgui/src/files-dock-widget.h
--- a/libgui/src/files-dock-widget.h
+++ b/libgui/src/files-dock-widget.h
@@ -131,17 +131,17 @@ signals:
 
   /** Emitted, whenever wants to search for a file . */
   void find_files_signal (const QString& startdir);
 
   /** Emitted, whenever the user removes or renames a file. */
   void file_remove_signal (const QString& old_name, const QString& new_name);
 
   /** Emitted, when a file or directory is renamed. */
-  void file_renamed_signal (void);
+  void file_renamed_signal (bool);
 
 private:
   void process_new_file (const QString& parent_name);
   void process_new_dir (const QString& parent_name);
   void process_set_current_dir (const QString& parent_name);
   void process_find_files (const QString& dir_name);
 
   /** set a new directory or open a file **/
diff --git a/libgui/src/m-editor/file-editor.cc b/libgui/src/m-editor/file-editor.cc
--- a/libgui/src/m-editor/file-editor.cc
+++ b/libgui/src/m-editor/file-editor.cc
@@ -584,16 +584,19 @@ file_editor::handle_edit_file_request (c
 
 
 // Slot used for signals indicating that a file was changed/rename or
 // is going to be deleted/renamed
 void
 file_editor::handle_file_remove (const QString& old_name,
                                  const QString& new_name)
 {
+  // Clear old lsit of files to reload
+  _tmp_closed_files.clear ();
+
   // Check if old name is a file or directory
   QFileInfo old (old_name);
   if (old.isDir ())
     {
       // Call the function which handles directories and return
       handle_dir_remove (old_name, new_name);
       return;
     }
@@ -604,35 +607,31 @@ file_editor::handle_file_remove (const Q
 
   if (editor_tab)
     {
       // Yes, close it silently
       _no_focus = true;  // Remember for not focussing editor
       editor_tab->file_has_changed (QString (), true);  // Close the tab
       _no_focus = false;  // Back to normal
 
+      _tmp_closed_files << old_name;  // for reloading if error removing
+
       if (! new_name.isEmpty ())
+        _tmp_closed_files << new_name;  // store new name
+      else
+        _tmp_closed_files << ""; // no new name, just removing this file
+
+      // Get and store the related encoding
+      for (editor_tab_map_const_iterator p = editor_tab_map.begin ();
+           p != editor_tab_map.end (); p++)
         {
-          // New name is set, store new name and its encoding
-          // loading this file after the renaming is complete.
-          // The new name is not signaled after the renaming for being able
-          // to use this construct for renaming a whole directory, too.
-
-          _tmp_closed_files = QStringList ();
-          _tmp_closed_files << new_name;
-
-          // Get and store the related encoding
-          for (editor_tab_map_const_iterator p = editor_tab_map.begin ();
-               p != editor_tab_map.end (); p++)
+          if (editor_tab == p->second.fet_ID)
             {
-              if (editor_tab == p->second.fet_ID)
-                {
-                  _tmp_closed_files << p->second.encoding;
-                  break;
-                }
+              _tmp_closed_files << p->second.encoding;
+              break;
             }
         }
     }
 }
 
 
 // Function for closing the files in a removed directory
 void
@@ -641,54 +640,60 @@ file_editor::handle_dir_remove (const QS
 {
   QDir old_dir (old_name);
 
   // Have all file editor tabs signal what their filenames are.
   editor_tab_map.clear ();
   emit fetab_file_name_query (nullptr);
 
   // Loop over all open files and pick those within old_dir
-  _tmp_closed_files = QStringList ();
-
   for (editor_tab_map_const_iterator p = editor_tab_map.begin ();
        p != editor_tab_map.end (); p++)
     {
       QString rel_path_to_file = old_dir.relativeFilePath (p->first);
       if (rel_path_to_file.left (3) != QString ("../"))
         {
           // We directly go down from old_dir to reach our file: Our
           // file is included in the removed/renamed diectory.
           // Thus delete it.
           _no_focus = true;  // Remember for not focussing editor
           file_editor_tab *editor_tab
               = static_cast<file_editor_tab *> (p->second.fet_ID);
           editor_tab->file_has_changed (QString (), true);  // Close
           _no_focus = false;  // Back to normal
 
+          // Store file for possible later reload
+          _tmp_closed_files << p->first;
 
           // Add the new file path and the encoding for later reloading
           // if new_name is given
           if (! new_name.isEmpty ())
             {
               QDir new_dir (new_name);
               _tmp_closed_files << new_dir.absoluteFilePath (rel_path_to_file);
-              _tmp_closed_files << p->second.encoding;
             }
+          else
+            _tmp_closed_files << ""; // no new name, just removing this file
+
+          _tmp_closed_files << p->second.encoding; // store the encoding
         }
     }
 }
 
 // Slot for signal indicating that a file was renamed
 void
-file_editor::handle_file_renamed ()
+file_editor::handle_file_renamed (bool load_new)
 {
   _no_focus = true;  // Remember for not focussing editor
-  for (int i = 0; i < _tmp_closed_files.count (); i = i + 2)
-    request_open_file (_tmp_closed_files.at (i),
-                       _tmp_closed_files.at (i+1));
+  for (int i = 0; i < _tmp_closed_files.count (); i = i + 3)
+    {
+      if (! _tmp_closed_files.at (i + load_new).isEmpty ())
+        request_open_file (_tmp_closed_files.at (i + load_new),
+                           _tmp_closed_files.at (i+2));
+    }
   _no_focus = false;  // Back to normal focus
 }
 
 
 void
 file_editor::do_undo ()
 {
   if (editor_tab_has_focus ())
diff --git a/libgui/src/m-editor/file-editor.h b/libgui/src/m-editor/file-editor.h
--- a/libgui/src/m-editor/file-editor.h
+++ b/libgui/src/m-editor/file-editor.h
@@ -277,17 +277,17 @@ public slots:
   void handle_delete_debugger_pointer_request (const QString& file, int line);
   void handle_update_breakpoint_marker_request (bool insert,
                                                 const QString& file, int line,
                                                 const QString& cond);
 
   void handle_edit_file_request (const QString& file);
 
   void handle_file_remove (const QString&, const QString&);
-  void handle_file_renamed (void);
+  void handle_file_renamed (bool load_new = true);
 
   // Tells the editor to react on changed settings.
   void notice_settings (const QSettings *settings);
 
   void set_shortcuts ();
 
   void handle_visibility (bool visible);
 
@@ -470,13 +470,16 @@ private:
   bool _no_focus;
 
   enum { MaxMRUFiles = 10 };
   QMenu *_mru_file_menu;
   QAction *_mru_file_actions[MaxMRUFiles];
   QStringList _mru_files;
   QStringList _mru_files_encodings;
 
-  // List of temporarily closed files while they are renamed
+  // List of temporarily closed files for later reloading.
+  // Order: first closed old file
+  //        first new location of closed file
+  //        encoding to use for reload
   QStringList _tmp_closed_files;
 };
 
 #endif
diff --git a/libgui/src/main-window.cc b/libgui/src/main-window.cc
--- a/libgui/src/main-window.cc
+++ b/libgui/src/main-window.cc
@@ -1814,18 +1814,18 @@ main_window::construct (void)
                                                               const QString&,
                                                               int,
                                                               const QString&)));
 
       connect (file_browser_window,
                SIGNAL (file_remove_signal (const QString&, const QString&)),
                editor_window,
                SLOT (handle_file_remove (const QString&, const QString&)));
-      connect (file_browser_window, SIGNAL (file_renamed_signal (void)),
-               editor_window, SLOT (handle_file_renamed (void)));
+      connect (file_browser_window, SIGNAL (file_renamed_signal (bool)),
+               editor_window, SLOT (handle_file_renamed (bool)));
 #endif
 
       octave_link::post_event (this,
                                &main_window::resize_command_window_callback);
 
       configure_shortcuts ();
     }
 }
