# HG changeset patch
# User jwe
# Date 812690089 0
#      Tue Oct 03 03:14:49 1995 +0000
# Node ID 7b665f9a97fa4b1482c5b7cff046817e405ca676
# Parent  c29439c3f3fab0107c91ea85ae7794e6d0284566
[project @ 1995-10-03 03:11:50 by jwe]

diff --git a/src/user-prefs.cc b/src/user-prefs.cc
--- a/src/user-prefs.cc
+++ b/src/user-prefs.cc
@@ -97,108 +97,119 @@ init_user_prefs (void)
 //   return of  1 => always ok.
 //   return of  0 => never ok.
 //   return of -1 => ok, but give me warning (default).
 
 // XXX FIXME XXX -- should also allow zero to mean "false" and nonzero
 // to mean "true".
 
 static int
-check_str_pref (char *var)
+check_preference (char *var)
 {
+  int pref = -1;
+
   char *val = builtin_string_variable (var);
-  int pref = -1;
+
   if (val)
     {
       if (strncmp (val, "yes", 3) == 0
 	  || strncmp (val, "true", 4) == 0)
 	pref = 1;
       else if (strncmp (val, "never", 5) == 0
 	       || strncmp (val, "no", 2) == 0
 	       || strncmp (val, "false", 5) == 0)
 	pref = 0;
+
+      delete [] val;
     }
+  else
+    {
+      double dval = 0;
+      if (builtin_real_scalar_variable (var, dval))
+	pref = NINT (dval);
+    }
+
   return pref;
 }
 
 // XXX FIXME XXX -- some of these should do their own checking to be
 // able to provide more meaningful warning or error messages.
 
 // Should a replot command be generated automatically each time a plot
 // changes in some way?
 
 int
 automatic_replot (void)
 {
-  user_pref.automatic_replot = check_str_pref ("automatic_replot");
+  user_pref.automatic_replot = check_preference ("automatic_replot");
 
   return 0;
 }
 
 
 // Should we beep obnoxiously before printing error messages?
 
 int
 beep_on_error (void)
 {
-  user_pref.beep_on_error = check_str_pref ("beep_on_error");
+  user_pref.beep_on_error = check_preference ("beep_on_error");
 
   return 0;
 }
 
 
 // Should variables returned from functions have default values if
 // they are otherwise uninitialized?
 
 int
 define_all_return_values (void)
 {
   user_pref.define_all_return_values =
-    check_str_pref ("define_all_return_values");
+    check_preference ("define_all_return_values");
 
   return 0;
 }
 
 
 // Should we allow assignments like:
 //
 //   octave> A(1) = 3; A(2) = 5
 //
 // for A already defined and a matrix type?
 
 int
 do_fortran_indexing (void)
 {
   user_pref.do_fortran_indexing =
-    check_str_pref ("do_fortran_indexing"); 
+    check_preference ("do_fortran_indexing"); 
 
   return 0;
 }
 
 
 // Should ignore empty elements in a matrix list (i.e., is an
 //  expression like `[[], 1]' ok?
 
 int
 empty_list_elements_ok (void)
 {
   user_pref.empty_list_elements_ok =
-    check_str_pref ("empty_list_elements_ok");
+    check_preference ("empty_list_elements_ok");
 
   return 0;
 }
 
 
 // Does gnuplot appear to support multiplot?
 
 int
 gnuplot_has_multiplot (void)
 {
   user_pref.gnuplot_has_multiplot =
-    check_str_pref ("gnuplot_has_multiplot");
+    check_preference ("gnuplot_has_multiplot");
 
   return 0;
 }
 
 
 // Should Octave always check to see if function files have changed
 // since they were last compiled?
 
@@ -229,75 +240,75 @@ ignore_function_time_stamp (void)
 //   97 98 99
 //
 // to happen?
 
 int
 implicit_str_to_num_ok (void)
 {
   user_pref.implicit_str_to_num_ok =
-    check_str_pref ("implicit_str_to_num_ok");
+    check_preference ("implicit_str_to_num_ok");
 
   return 0;
 }
 
 
 // Should we allow silent conversion of complex to real when a real
 // type is what we're really looking for?
 
 int
 ok_to_lose_imaginary_part (void)
 {
   user_pref.ok_to_lose_imaginary_part =
-    check_str_pref ("ok_to_lose_imaginary_part");
+    check_preference ("ok_to_lose_imaginary_part");
 
   return 0;
 }
 
 
 // If possible, send all output intended for the screen through the
 // pager. 
 
 int
 page_screen_output (void)
 {
-  user_pref.page_screen_output = check_str_pref ("page_screen_output");
+  user_pref.page_screen_output = check_preference ("page_screen_output");
 
   return 0;
 }
 
 
 // When doing assignments like:
 //
 //   octave> A(1) = 3; A(2) = 5
 //
 // (for A undefined) should we build column vectors?  Returning true
 // only matters when resize_on_range_error is also true.
 
 int
 prefer_column_vectors (void)
 {
   user_pref.prefer_column_vectors =
-    check_str_pref ("prefer_column_vectors");
+    check_preference ("prefer_column_vectors");
 
   return 0;
 }
 
 
 // For things like
 //
 //   a = [2,3]; a([1,1])
 //
 // return [2 3] instead of [2 2].
 
 int
 prefer_zero_one_indexing (void)
 {
   user_pref.prefer_zero_one_indexing =
-    check_str_pref ("prefer_zero_one_indexing");
+    check_preference ("prefer_zero_one_indexing");
 
   return 0;
 }
 
 
 // Should we print things like
 //
 //   octave> a = [1,2;3,4]
@@ -305,112 +316,112 @@ prefer_zero_one_indexing (void)
 //
 //      1  2
 //      3  4
 
 int
 print_answer_id_name (void)
 {
   user_pref.print_answer_id_name =
-    check_str_pref ("print_answer_id_name");
+    check_preference ("print_answer_id_name");
 
   return 0;
 }
 
 
 // Should we also print the dimensions of empty matrices?
 
 int
 print_empty_dimensions (void)
 {
   user_pref.print_empty_dimensions =
-    check_str_pref ("print_empty_dimensions");
+    check_preference ("print_empty_dimensions");
 
   return 0;
 }
 
 
 // Should operations on empty matrices return empty matrices or an
 // error?
 
 int
 propagate_empty_matrices (void)
 {
   user_pref.propagate_empty_matrices =
-    check_str_pref ("propagate_empty_matrices");
+    check_preference ("propagate_empty_matrices");
 
   return 0;
 }
 
 // Should built-in constants always be read only?
 
 int
 read_only_constants (void)
 {
-  user_pref.read_only_constants = check_str_pref ("read_only_constants");
+  user_pref.read_only_constants = check_preference ("read_only_constants");
 
   return 0;
 }
 
 // When doing assignments, should we resize matrices if the indices
 // are outside the current bounds?
 
 int
 resize_on_range_error (void)
 {
   user_pref.resize_on_range_error =
-    check_str_pref ("resize_on_range_error");
+    check_preference ("resize_on_range_error");
 
   return 0;
 }
 
 
 // If a function does not return any values explicitly, return the
 // last computed value.
 
 int
 return_last_computed_value (void)
 {
   user_pref.return_last_computed_value =
-    check_str_pref ("return_last_computed_value");
+    check_preference ("return_last_computed_value");
 
   return 0;
 }
 
 
 // Suppress printing results in called functions.
 
 int
 silent_functions (void)
 {
   user_pref.silent_functions =
-    check_str_pref ("silent_functions");
+    check_preference ("silent_functions");
 
   return 0;
 }
 
 
 // Should should big matrices be split into smaller slices for output?
 
 int
 split_long_rows (void)
 {
-  user_pref.split_long_rows = check_str_pref ("split_long_rows");
+  user_pref.split_long_rows = check_preference ("split_long_rows");
 
   return 0;
 }
 
 
 // How many levels of structure elements should we print?
 
 int
 struct_levels_to_print (void)
 {
   double val;
-  if (builtin_real_scalar_variable ("struct_levels_to_print", val) == 0
+  if (builtin_real_scalar_variable ("struct_levels_to_print", val)
       && ! xisnan (val))
     {
       int ival = NINT (val);
       if (ival >= 0 && (double) ival == val)
 	{
 	  user_pref.struct_levels_to_print = ival;
 	  return 0;
 	}
@@ -422,33 +433,33 @@ struct_levels_to_print (void)
 
 // Suppress printing of additional help message in help and usage
 // functions?
 
 int
 suppress_verbose_help_message (void)
 {
   user_pref.suppress_verbose_help_message =
-    check_str_pref ("suppress_verbose_help_message");
+    check_preference ("suppress_verbose_help_message");
 
   return 0;
 }
 
 
 // Should things like:
 //
 //   octave> ones (-1, 5)
 //
 // result in an empty matrix or an error?
 
 int
 treat_neg_dim_as_zero (void)
 {
   user_pref.treat_neg_dim_as_zero =
-    check_str_pref ("treat_neg_dim_as_zero");
+    check_preference ("treat_neg_dim_as_zero");
 
   return 0;
 }
 
 
 // Generate a warning for the assignment in things like
 //
 //   octave> if (a = 2 < n)
@@ -456,54 +467,54 @@ treat_neg_dim_as_zero (void)
 // but not
 //
 //   octave> if ((a = 2) < n)
 
 int
 warn_assign_as_truth_value (void)
 {
   user_pref.warn_assign_as_truth_value =
-    check_str_pref ("warn_assign_as_truth_value");
+    check_preference ("warn_assign_as_truth_value");
 
   return 0;
 }
 
 
 // Generate a warning for the comma in things like
 //
 //   octave> global a, b = 2
 
 int
 warn_comma_in_global_decl (void)
 {
   user_pref.warn_comma_in_global_decl =
-    check_str_pref ("warn_comma_in_global_decl");
+    check_preference ("warn_comma_in_global_decl");
 
   return 0;
 }
 
 
 // On IEEE machines, allow divide by zero errors to be suppressed.
 
 int
 warn_divide_by_zero (void)
 {
-  user_pref.warn_divide_by_zero = check_str_pref ("warn_divide_by_zero");
+  user_pref.warn_divide_by_zero = check_preference ("warn_divide_by_zero");
 
   return 0;
 }
 
 // Generate warning if declared function name disagrees with the name
 // of the file in which it is defined.
 
 int
 warn_function_name_clash (void)
 {
   user_pref.warn_function_name_clash =
-    check_str_pref ("warn_function_name_clash");
+    check_preference ("warn_function_name_clash");
 
   return 0;
 }
 
 
 // Should whitespace in a literal matrix list be automatically
 // converted to commas and semicolons?
 //
@@ -560,17 +571,17 @@ whitespace_in_literal_matrix (void)
   return 0;
 }
 
 
 int
 set_output_max_field_width (void)
 {
   double val;
-  if (builtin_real_scalar_variable ("output_max_field_width", val) == 0
+  if (builtin_real_scalar_variable ("output_max_field_width", val)
       && ! xisnan (val))
     {
       int ival = NINT (val);
       if (ival > 0 && (double) ival == val)
 	{
 	  user_pref.output_max_field_width = ival;
 	  return 0;
 	}
@@ -578,17 +589,17 @@ set_output_max_field_width (void)
   gripe_invalid_value_specified ("output_max_field_width");
   return -1;
 }
 
 int
 set_output_precision (void)
 {
   double val;
-  if (builtin_real_scalar_variable ("output_precision", val) == 0
+  if (builtin_real_scalar_variable ("output_precision", val)
       && ! xisnan (val))
     {
       int ival = NINT (val);
       if (ival >= 0 && (double) ival == val)
 	{
 	  user_pref.output_precision = ival;
 	  return 0;
 	}
@@ -596,17 +607,17 @@ set_output_precision (void)
   gripe_invalid_value_specified ("output_precision");
   return -1;
 }
 
 int
 set_save_precision (void)
 {
   double val;
-  if (builtin_real_scalar_variable ("save_precision", val) == 0
+  if (builtin_real_scalar_variable ("save_precision", val)
       && ! xisnan (val))
     {
       int ival = NINT (val);
       if (ival >= 0 && (double) ival == val)
 	{
 	  user_pref.save_precision = ival;
 	  return 0;
 	}
diff --git a/src/variables.cc b/src/variables.cc
--- a/src/variables.cc
+++ b/src/variables.cc
@@ -1612,21 +1612,21 @@ install_builtin_variables (void)
     "used with fseek to position file relative to the end");
 
   DEFVAR ("ans", SBV_ans, , 0, 0,
     "");
 
   DEFCONST ("argv", SBV_argv, , 0, 0,
     "the command line arguments this program was invoked with");
 
-  DEFVAR ("automatic_replot", SBV_automatic_replot, "false",
+  DEFVAR ("automatic_replot", SBV_automatic_replot, 0.0,
 	  0, automatic_replot,
     "if true, auto-insert a replot command when a plot changes");
 
-  DEFVAR ("beep_on_error", SBV_beep_on_error, "false", 0,
+  DEFVAR ("beep_on_error", SBV_beep_on_error, 0.0, 0,
 	  beep_on_error,
     "if true, beep before printing error messages");
 
   DEFVAR ("completion_append_char", SBV_completion_append_char, " ",
 	  0, sv_completion_append_char,
     "the string to append after successful command-line completion\n\
 attempts");
 
@@ -1644,22 +1644,22 @@ functions.  Only used if the variable in
 set to \"true\".");
 
   DEFVAR ("default_save_format", SBV_default_save_format, "ascii",
 	  0, sv_default_save_format,
     "default format for files created with save, may be one of\n\
 \"binary\", \"text\", or \"mat-binary\"");
 
   DEFVAR ("define_all_return_values", SBV_define_all_return_values,
-	  "false", 0, define_all_return_values,
+	  0.0, 0, define_all_return_values,
     "control whether values returned from functions should have a\n\
 value even if one has not been explicitly assigned.  See also\n\
 default_return_value");
 
-  DEFVAR ("do_fortran_indexing", SBV_do_fortran_indexing, "false", 0,
+  DEFVAR ("do_fortran_indexing", SBV_do_fortran_indexing, 0.0, 0,
 	  do_fortran_indexing,
     "allow single indices for matrices");
 
   DEFCONST ("e", SBV_e, exp (1.0), 0, 0,
     "exp (1)");
 
   DEFVAR ("empty_list_elements_ok", SBV_empty_list_elements_ok,
 	  "warn", 0, empty_list_elements_ok,
@@ -1668,36 +1668,36 @@ default_return_value");
   DEFCONST ("eps", SBV_eps, DBL_EPSILON, 0, 0,
     "machine precision");
 
   DEFVAR ("gnuplot_binary", SBV_gnuplot_binary, "gnuplot", 0,
 	  sv_gnuplot_binary,
     "path to gnuplot binary");
 
 #ifdef GNUPLOT_HAS_MULTIPLOT
-  char *with_multiplot = "true";
+  char *with_multiplot = 1.0;
 #else
-  char *with_multiplot = "false";
+  char *with_multiplot = 0.0;
 #endif
 
   DEFVAR ("gnuplot_has_multiplot", SBV_gnuplot_has_multiplot,
 	  with_multiplot, 0, gnuplot_has_multiplot,
     "true if gnuplot supports multiplot, false otherwise");
 
   DEFCONST ("i", SBV_i, Complex (0.0, 1.0), 1, 0,
     "sqrt (-1)");
 
   DEFVAR ("ignore_function_time_stamp",
 	  SBV_ignore_function_time_stamp, "system", 0,
 	  ignore_function_time_stamp,
     "don't check to see if function files have changed since they were\n\
   last compiled.  Possible values are \"system\" and \"all\"");
 
   DEFVAR ("implicit_str_to_num_ok", SBV_implicit_str_to_num_ok,
-	  "false", 0, implicit_str_to_num_ok,
+	  0.0, 0, implicit_str_to_num_ok,
     "allow implicit string to number conversion");
 
   DEFCONST ("inf", SBV_inf, octave_Inf, 0, 0,
     "infinity");
 
   DEFCONST ("j", SBV_j, Complex (0.0, 1.0), 1, 0,
     "sqrt (-1)");
 
@@ -1711,125 +1711,125 @@ default_return_value");
   DEFVAR ("output_max_field_width", SBV_output_max_field_width, 10.0,
 	  0, set_output_max_field_width,
     "maximum width of an output field for numeric output");
 
   DEFVAR ("output_precision", SBV_output_precision, 5.0, 0,
 	  set_output_precision,
     "number of significant figures to display for numeric output");
 
-  DEFVAR ("page_screen_output", SBV_page_screen_output, "true", 0,
+  DEFVAR ("page_screen_output", SBV_page_screen_output, 1.0, 0,
 	  page_screen_output,
     "if possible, send output intended for the screen through the pager");
 
   DEFCONST ("pi", SBV_pi, 4.0 * atan (1.0), 0, 0,
     "ratio of the circumference of a circle to its diameter");
 
-  DEFVAR ("prefer_column_vectors", SBV_prefer_column_vectors, "true",
+  DEFVAR ("prefer_column_vectors", SBV_prefer_column_vectors, 1.0,
 	  0, prefer_column_vectors,
     "prefer column/row vectors");
 
   DEFVAR ("prefer_zero_one_indexing", SBV_prefer_zero_one_indexing,
-	  "false", 0, prefer_zero_one_indexing,
+	  0.0, 0, prefer_zero_one_indexing,
     "when there is a conflict, prefer zero-one style indexing");
 
-  DEFVAR ("print_answer_id_name", SBV_print_answer_id_name, "true", 0,
+  DEFVAR ("print_answer_id_name", SBV_print_answer_id_name, 1.0, 0,
 	  print_answer_id_name,
     "set output style to print `var_name = ...'");
 
   DEFVAR ("print_empty_dimensions", SBV_print_empty_dimensions,
-	  "true", 0, print_empty_dimensions,
+	  1.0, 0, print_empty_dimensions,
     "also print dimensions of empty matrices");
 
   DEFCONST ("program_invocation_name", SBV_program_invocation_name,
 	    raw_prog_name, 0, 0,
     "the full name of the current program or script, including the\n\
 directory specification");
 
   DEFCONST ("program_name", SBV_program_name, prog_name, 0, 0,
     "the name of the current program or script");
 
   DEFVAR ("propagate_empty_matrices", SBV_propagate_empty_matrices,
-	  "true", 0, propagate_empty_matrices,
+	  1.0, 0, propagate_empty_matrices,
     "operations on empty matrices return an empty matrix, not an error");
 
 #if 0
-  DEFVAR ("read_only_constants", SBV_read_only_constants, "true", 0,
+  DEFVAR ("read_only_constants", SBV_read_only_constants, 1.0, 0,
 	  read_only_constants,
     "allow built-in constants to be modified");
 #endif
 
   DEFCONST ("realmax", SBV_realmax, DBL_MAX, 0, 0,
     "realmax (): return largest representable floating point number");
 
   DEFCONST ("realmin", SBV_realmin, DBL_MIN, 0, 0,
     "realmin (): return smallest representable floating point number");
 
-  DEFVAR ("resize_on_range_error", SBV_resize_on_range_error, "true",
+  DEFVAR ("resize_on_range_error", SBV_resize_on_range_error, 1.0,
 	  0, resize_on_range_error,
     "enlarge matrices on assignment");
 
   DEFVAR ("return_last_computed_value",
-	  SBV_return_last_computed_value, "false", 0,
+	  SBV_return_last_computed_value, 0.0, 0,
 	  return_last_computed_value,
     "if a function does not return any values explicitly, return the\n\
   last computed value");
 
-  DEFVAR ("save_precision", SBV_save_precision, 17.0, 0,
+  DEFVAR ("save_precision", SBV_save_precision, 15.0, 0,
 	  set_save_precision,
     "number of significant figures kept by the ASCII save command");
 
-  DEFVAR ("silent_functions", SBV_silent_functions, "false", 0,
+  DEFVAR ("silent_functions", SBV_silent_functions, 0.0, 0,
 	  silent_functions,
     "suppress printing results in called functions");
 
-  DEFVAR ("split_long_rows", SBV_split_long_rows, "true", 0,
+  DEFVAR ("split_long_rows", SBV_split_long_rows, 1.0, 0,
 	  split_long_rows,
     "split long matrix rows instead of wrapping");
 
   DEFVAR ("struct_levels_to_print", SBV_struct_levels_to_print, 2.0,
 	  0, struct_levels_to_print,
     "number of levels of structure elements to print");
 
 #ifdef USE_GNU_INFO
   DEFVAR ("suppress_verbose_help_message",
-	  SBV_suppress_verbose_help_message, "false", 0,
+	  SBV_suppress_verbose_help_message, 0.0, 0,
 	  suppress_verbose_help_message,
     "suppress printing of message pointing to additional help in the\n\
 help and usage functions");
 #endif
 
   DEFCONST ("stdin", SBV_stdin, 0.0, 0, 0,
     "file number of the standard input stream");
 
   DEFCONST ("stdout", SBV_stdout, 1.0, 0, 0,
     "file number of the standard output stream");
 
   DEFCONST ("stderr", SBV_stderr, 2.0, 0, 0,
     "file number of the standard error stream");
 
-  DEFVAR ("treat_neg_dim_as_zero", SBV_treat_neg_dim_as_zero, "false",
-	  0, treat_neg_dim_as_zero,
+  DEFVAR ("treat_neg_dim_as_zero", SBV_treat_neg_dim_as_zero, 0.0, 0,
+	  treat_neg_dim_as_zero,
     "convert negative dimensions to zero");
 
   DEFVAR ("warn_assign_as_truth_value",
-	  SBV_warn_assign_as_truth_value, "true", 0,
+	  SBV_warn_assign_as_truth_value, 1.0, 0,
 	  warn_assign_as_truth_value,
     "produce warning for assignments used as truth values");
 
   DEFVAR ("warn_comma_in_global_decl", SBV_warn_comma_in_global_decl,
-	  "true", 0, warn_comma_in_global_decl,
+	  1.0, 0, warn_comma_in_global_decl,
     "produce warning for commas in global declarations");
 
-  DEFVAR ("warn_divide_by_zero", SBV_warn_divide_by_zero, "true", 0,
+  DEFVAR ("warn_divide_by_zero", SBV_warn_divide_by_zero, 1.0, 0,
 	  warn_divide_by_zero,
     "on IEEE machines, allow divide by zero errors to be suppressed");
 
   DEFVAR ("warn_function_name_clash", SBV_warn_function_name_clash,
-	  "true", 0, warn_function_name_clash,
+	  1.0, 0, warn_function_name_clash,
     "produce warning if function name conflicts with file name");
 
   DEFVAR ("whitespace_in_literal_matrix",
 	  SBV_whitespace_in_literal_matrix, "", 0,
 	  whitespace_in_literal_matrix,
     "control auto-insertion of commas and semicolons in literal matrices");
 }
 
