# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1274372385 14400
#      Thu May 20 12:19:45 2010 -0400
# Node ID 6c50b56824aa3aaff6dc1331a071eed4d5fb0913
# Parent  8645b7087859e741eb3ef9dd0a69ae49ddc82cb1
file_in_path, file_in_loadpath: return empty string instead of empty matrix if file not found

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,13 @@
+2010-05-20  John W. Eaton  <jwe@octave.org>
+
+	* utils.cc (Ffile_in_path, Ffile_in_loadpath): If no file is
+	found, return empty character string instead of empty matrix.
+
 2010-05-20  Jaroslav Hajek  <highegg@gmail.com>
 
 	* DLD-FUNCTIONS/onCleanup.cc (octave_oncleanup::load_ascii,
 	octave_oncleanup::load_binary, octave_oncleanup::load_hdf5,
 	octave_oncleanup::save_ascii, octave_oncleanup::save_binary,
 	octave_oncleanup::save_hdf5): Comment out unused params.
 
 2010-05-18  Jaroslav Hajek  <highegg@gmail.com>
diff --git a/src/utils.cc b/src/utils.cc
--- a/src/utils.cc
+++ b/src/utils.cc
@@ -274,17 +274,17 @@ make_absolute (const string_vector& sv)
 
 DEFUN (file_in_loadpath, args, ,
   "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} file_in_loadpath (@var{file})\n\
 @deftypefnx {Built-in Function} {} file_in_loadpath (@var{file}, \"all\")\n\
 \n\
 Return the absolute name of @var{file} if it can be found in\n\
 the list of directories specified by @code{path}.\n\
-If no file is found, return an empty matrix.\n\
+If no file is found, return an empty character string.\n\
 \n\
 If the first argument is a cell array of strings, search each\n\
 directory of the loadpath for element of the cell array and return\n\
 the first that matches.\n\
 \n\
 If the second optional argument @code{\"all\"} is supplied, return\n\
 a cell array containing the list of all files that have the same\n\
 name in the path.  If no files are found, return an empty cell array.\n\
@@ -297,25 +297,17 @@ name in the path.  If no files are found
 
   if (nargin == 1 || nargin == 2)
     {
       string_vector names = args(0).all_strings ();
 
       if (! error_state && names.length () > 0)
         {
           if (nargin == 1)
-            {
-              std::string fname
-                = octave_env::make_absolute (load_path::find_first_of (names));
-
-              if (fname.empty ())
-                retval = Matrix ();
-              else
-                retval = fname;
-            }
+            retval = octave_env::make_absolute (load_path::find_first_of (names));
           else if (nargin == 2)
             {
               std::string opt = args(1).string_value ();
 
               if (! error_state && opt == "all")
                 retval = Cell (make_absolute
                                (load_path::find_all_first_of (names)));
               else
@@ -333,17 +325,17 @@ name in the path.  If no files are found
 
 DEFUN (file_in_path, args, ,
   "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} file_in_path (@var{path}, @var{file})\n\
 @deftypefnx {Built-in Function} {} file_in_path (@var{path}, @var{file}, \"all\")\n\
 Return the absolute name of @var{file} if it can be found in\n\
 @var{path}.  The value of @var{path} should be a colon-separated list of\n\
 directories in the format described for @code{path}.  If no file\n\
-is found, return an empty matrix.  For example,\n\
+is found, return an empty character string.  For example,\n\
 \n\
 @example\n\
 @group\n\
 file_in_path (EXEC_PATH, \"sh\")\n\
      @result{} \"/bin/sh\"\n\
 @end group\n\
 @end example\n\
 \n\
@@ -367,24 +359,17 @@ name in the path.  If no files are found
 
       if (! error_state)
         {
           string_vector names = args(1).all_strings ();
 
           if (! error_state && names.length () > 0)
             {
               if (nargin == 2)
-                {
-                  std::string fname = search_path_for_file (path, names);
-
-                  if (fname.empty ())
-                    retval = Matrix ();
-                  else
-                    retval = fname;
-                }
+                retval = search_path_for_file (path, names);
               else if (nargin == 3)
                 {
                   std::string opt = args(2).string_value ();
 
                   if (! error_state && opt == "all")
                     retval = Cell (make_absolute
                                    (search_path_for_all_files (path, names)));
                   else
