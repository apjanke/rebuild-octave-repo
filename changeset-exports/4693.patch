# HG changeset patch
# User jwe
# Date 1073774959 0
#      Sat Jan 10 22:49:19 2004 +0000
# Node ID 3387590ed11dca332f03707dfcdab402438ee60c
# Parent  ae49c6ba722cc3f5b4c3d747f3ba925413ac778b
[project @ 2004-01-10 22:49:19 by jwe]

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,10 +1,15 @@
 2004-01-10  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
+	* oct-stream.cc (convert_to_valid_int, get_size):
+	Use lo_ieee_is_NaN_or_NA instead of xisnan.
+	(octave_base_stream::do_printf): Correct special case check for
+	NA, NaN, Inf, or out of range integers.
+
 	* dirfns.cc (Fglob): Always return list of files as a cell array.
 	(Freaddir): Likewise.
 
 	* dirfns.cc (Fls): If nargout > 0, return ls output.
 
 2004-01-09  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* load-save.cc (Fload): Assume -force by default.
diff --git a/src/oct-stream.cc b/src/oct-stream.cc
--- a/src/oct-stream.cc
+++ b/src/oct-stream.cc
@@ -57,17 +57,17 @@ convert_to_valid_int (const octave_value
   int retval = 0;
 
   conv_err = 0;
 
   double dval = tc.double_value ();
 
   if (! error_state)
     {
-      if (! xisnan (dval))
+      if (! lo_ieee_is_NaN_or_NA (dval))
 	{
 	  int ival = NINT (dval);
 
 	  if (ival == dval)
 	    retval = ival;
 	  else
 	    conv_err = 3;
 	}
@@ -80,17 +80,17 @@ convert_to_valid_int (const octave_value
   return retval;
 }
 
 static int
 get_size (double d, const std::string& who)
 {
   int retval = -1;
 
-  if (! xisnan (d))
+  if (! lo_ieee_is_NaN_or_NA (d))
     {
       if (! xisinf (d))
 	{
 	  if (d >= 0.0)
 	    retval = NINT (d);
 	  else
 	    ::error ("%s: negative value invalid as size specification",
 		     who.c_str ());
@@ -2378,34 +2378,35 @@ octave_base_stream::do_printf (printf_fo
 		    break;
 		}
 	      else
 		{
 		  double val = val_cache.double_value ();
 
 		  if (val_cache)
 		    {
-		      if ((xisnan (val) || xisinf (val)
-			   || val > INT_MAX || val < INT_MIN)
-			  && (elt->type == 'd'
-			      || elt->type == 'i'
-			      || elt->type == 'c'
-			      || elt->type == 'o'
-			      || elt->type == 'x'
-			      || elt->type == 'X'
-			      || elt->type == 'u'))
+		      if (lo_ieee_is_NaN_or_NA (val) || xisinf (val)
+			  || ((val > INT_MAX || val < INT_MIN)
+			      && (elt->type == 'd'
+				  || elt->type == 'i'
+				  || elt->type == 'c'
+				  || elt->type == 'o'
+				  || elt->type == 'x'
+				  || elt->type == 'X'
+				  || elt->type == 'u')))
 			{
 			  std::string tfmt = fmt;
 
-			  if (xisnan (val) || xisinf (val))
+			  if (lo_ieee_is_NaN_or_NA (val) || xisinf (val))
 			    {
 			      tfmt.replace (tfmt.rfind (elt->type), 1, 1, 's');
 
 			      const char *tval = xisinf (val)
-				? (val < 0 ? "-Inf" : "Inf") : "NaN";
+				? (val < 0 ? "-Inf" : "Inf")
+				: (lo_ieee_is_NA (val) ? "NA" : "NaN");
 
 			      retval += do_printf_conv (os, tfmt.c_str (),
 							nsa, sa_1, sa_2,
 							tval, who);
 			    }
 			  else
 			    {
 			      tfmt.replace (tfmt.rfind (elt->type), 1, ".f");
