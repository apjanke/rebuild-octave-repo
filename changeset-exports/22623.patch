# HG changeset patch
# User Rik <rik@octave.org>
# Date 1476484928 25200
#      Fri Oct 14 15:42:08 2016 -0700
# Node ID 76f1164d21351c0c94caf01a2a0530ba973dbefc
# Parent  4191f8b5070c7e99b7baf2954d1a913a738aade7
Rename [xyz]mtick properties to [xyz]minortickvalues (bug #49205).

* gl-render.cc: Search and replace get_[xyz]mtick -> get_[xyz]minortickvalues.

* graphics.in.h: Search and replace [xyz]mtick -> [xyz]minortickvalues.

* annotation.m: Replace "axesmtick" with "axesxminortickvalues" in call to
addproperty.

diff --git a/libinterp/corefcn/gl-render.cc b/libinterp/corefcn/gl-render.cc
--- a/libinterp/corefcn/gl-render.cc
+++ b/libinterp/corefcn/gl-render.cc
@@ -1371,17 +1371,17 @@ namespace octave
         Matrix minorgridcolor = props.get_minorgridcolor_rgb ();
         double gridalpha = props.get_gridalpha ();
         double minorgridalpha = props.get_minorgridalpha ();
         bool do_xgrid = (props.is_xgrid () && (gridstyle != "none"));
         bool do_xminorgrid = (props.is_xminorgrid ()
                               && (minorgridstyle != "none"));
         bool do_xminortick = props.is_xminortick ();
         Matrix xticks = xform.xscale (props.get_xtick ().matrix_value ());
-        Matrix xmticks = xform.xscale (props.get_xmtick ().matrix_value ());
+        Matrix xmticks = xform.xscale (props.get_xminortickvalues ().matrix_value ());
         string_vector xticklabels = props.get_xticklabel ().string_vector_value ();
         int wmax = 0;
         int hmax = 0;
         bool tick_along_z = nearhoriz || octave::math::isinf (fy);
         bool mirror = props.is_box () && xstate != AXE_ANY_DIR;
 
         if (props.xcolormode_is ("manual"))
           {
@@ -1508,17 +1508,17 @@ namespace octave
         Matrix minorgridcolor = props.get_minorgridcolor_rgb ();
         double gridalpha = props.get_gridalpha ();
         double minorgridalpha = props.get_minorgridalpha ();
         bool do_ygrid = (props.is_ygrid () && (gridstyle != "none"));
         bool do_yminorgrid = (props.is_yminorgrid ()
                               && (minorgridstyle != "none"));
         bool do_yminortick = props.is_yminortick ();
         Matrix yticks = xform.yscale (props.get_ytick ().matrix_value ());
-        Matrix ymticks = xform.yscale (props.get_ymtick ().matrix_value ());
+        Matrix ymticks = xform.yscale (props.get_yminortickvalues ().matrix_value ());
         string_vector yticklabels = props.get_yticklabel ().string_vector_value ();
         int wmax = 0;
         int hmax = 0;
         bool tick_along_z = nearhoriz || octave::math::isinf (fx);
         bool mirror = props.is_box () && ystate != AXE_ANY_DIR
                       && (! props.has_property ("__plotyy_axes__"));
 
         if (props.ycolormode_is ("manual"))
@@ -1636,17 +1636,17 @@ namespace octave
         Matrix minorgridcolor = props.get_minorgridcolor_rgb ();
         double gridalpha = props.get_gridalpha ();
         double minorgridalpha = props.get_minorgridalpha ();
         bool do_zgrid = (props.is_zgrid () && (gridstyle != "none"));
         bool do_zminorgrid = (props.is_zminorgrid ()
                               && (minorgridstyle != "none"));
         bool do_zminortick = props.is_zminortick ();
         Matrix zticks = xform.zscale (props.get_ztick ().matrix_value ());
-        Matrix zmticks = xform.zscale (props.get_zmtick ().matrix_value ());
+        Matrix zmticks = xform.zscale (props.get_zminortickvalues ().matrix_value ());
         string_vector zticklabels = props.get_zticklabel ().string_vector_value ();
         int wmax = 0;
         int hmax = 0;
         bool mirror = props.is_box () && zstate != AXE_ANY_DIR;
 
         if (props.zcolormode_is ("manual"))
           {
             // use axis color for (minor)gridcolor
diff --git a/libinterp/corefcn/graphics.in.h b/libinterp/corefcn/graphics.in.h
--- a/libinterp/corefcn/graphics.in.h
+++ b/libinterp/corefcn/graphics.in.h
@@ -3932,19 +3932,19 @@ public:
       array_property looseinset hu , Matrix (1, 4, 0.0)
       // hidden properties for transformation computation
       array_property x_viewtransform h , Matrix (4, 4, 0.0)
       array_property x_projectiontransform h , Matrix (4, 4, 0.0)
       array_property x_viewporttransform h , Matrix (4, 4, 0.0)
       array_property x_normrendertransform h , Matrix (4, 4, 0.0)
       array_property x_rendertransform h , Matrix (4, 4, 0.0)
       // hidden properties for minor ticks
-      row_vector_property xmtick h , Matrix ()
-      row_vector_property ymtick h , Matrix ()
-      row_vector_property zmtick h , Matrix ()
+      row_vector_property xminortickvalues h , Matrix ()
+      row_vector_property yminortickvalues h , Matrix ()
+      row_vector_property zminortickvalues h , Matrix ()
       // hidden property for text rendering
       double_property __fontsize_points__ hgr , 0
    END_PROPERTIES
 
   protected:
     void init (void);
 
   private:
@@ -4031,36 +4031,36 @@ public:
         calc_ticklabels (ztick, zticklabel, zscale.is ("log"));
       sync_positions ();
     }
 
     void update_xtickmode (void)
     {
       if (xtickmode.is ("auto"))
         {
-          calc_ticks_and_lims (xlim, xtick, xmtick, xlimmode.is ("auto"),
-                               xscale.is ("log"));
+          calc_ticks_and_lims (xlim, xtick, xminortickvalues,
+                               xlimmode.is ("auto"), xscale.is ("log"));
           update_xtick ();
         }
     }
     void update_ytickmode (void)
     {
       if (ytickmode.is ("auto"))
         {
-          calc_ticks_and_lims (ylim, ytick, ymtick, ylimmode.is ("auto"),
-                               yscale.is ("log"));
+          calc_ticks_and_lims (ylim, ytick, yminortickvalues,
+                               ylimmode.is ("auto"), yscale.is ("log"));
           update_ytick ();
         }
     }
     void update_ztickmode (void)
     {
       if (ztickmode.is ("auto"))
         {
-          calc_ticks_and_lims (zlim, ztick, zmtick, zlimmode.is ("auto"),
-                               zscale.is ("log"));
+          calc_ticks_and_lims (zlim, ztick, zminortickvalues,
+                               zlimmode.is ("auto"), zscale.is ("log"));
           update_ztick ();
         }
     }
 
     void update_xticklabelmode (void)
     {
       if (xticklabelmode.is ("auto"))
         calc_ticklabels (xtick, xticklabel, xscale.is ("log"));
@@ -4213,48 +4213,48 @@ public:
   public:
     Matrix get_axis_limits (double xmin, double xmax,
                             double min_pos, double max_neg,
                             bool logscale);
 
     void update_xlim ()
     {
       if (xtickmode.is ("auto"))
-        calc_ticks_and_lims (xlim, xtick, xmtick, xlimmode.is ("auto"),
-                             xscale.is ("log"));
+        calc_ticks_and_lims (xlim, xtick, xminortickvalues,
+                             xlimmode.is ("auto"), xscale.is ("log"));
       if (xticklabelmode.is ("auto"))
         calc_ticklabels (xtick, xticklabel, xscale.is ("log"));
 
       fix_limits (xlim);
 
       update_xscale ();
 
       update_axes_layout ();
     }
 
     void update_ylim (void)
     {
       if (ytickmode.is ("auto"))
-        calc_ticks_and_lims (ylim, ytick, ymtick, ylimmode.is ("auto"),
-                             yscale.is ("log"));
+        calc_ticks_and_lims (ylim, ytick, yminortickvalues,
+                             ylimmode.is ("auto"), yscale.is ("log"));
       if (yticklabelmode.is ("auto"))
         calc_ticklabels (ytick, yticklabel, yscale.is ("log"));
 
       fix_limits (ylim);
 
       update_yscale ();
 
       update_axes_layout ();
     }
 
     void update_zlim (void)
     {
       if (ztickmode.is ("auto"))
-        calc_ticks_and_lims (zlim, ztick, zmtick, zlimmode.is ("auto"),
-                             zscale.is ("log"));
+        calc_ticks_and_lims (zlim, ztick, zminortickvalues,
+                             zlimmode.is ("auto"), zscale.is ("log"));
       if (zticklabelmode.is ("auto"))
         calc_ticklabels (ztick, zticklabel, zscale.is ("log"));
 
       fix_limits (zlim);
 
       update_zscale ();
 
       update_axes_layout ();
diff --git a/scripts/plot/appearance/annotation.m b/scripts/plot/appearance/annotation.m
--- a/scripts/plot/appearance/annotation.m
+++ b/scripts/plot/appearance/annotation.m
@@ -263,17 +263,17 @@ function hax = buildoverlay (hf)
 
   hax = axes ("parent", hf, "position", [0 0 1 1], ...
               "visible", "off","tag", "scribeoverlay", ...
               "xlim", [0 1], "ylim", [0 1], ...
               "handlevisibility", "off");
 
   ## hidden property to store figure size in absolute (points)
   ## coordinates
-  addproperty ("figsize_points", hax, "axesxmtick", []);
+  addproperty ("figsize_points", hax, "axesxminortickvalues", []);
   update_figsize_points (hf, {}, hax);
 
 
   listener = {@update_figsize_points, hax};
   addlistener (hf, "position", listener);
 
   delfcn = @() dellistener (hf, "position", listener);
   set (hax, "deletefcn", delfcn);
