# HG changeset patch
# User jwe
# Date 1134609399 0
#      Thu Dec 15 01:16:39 2005 +0000
# Node ID 8eebdcfde94ee666bbd85fbae96c7d342e1bbcf0
# Parent  6bf56668b01a2983864a00b37f9b10f7e42aeac7
[project @ 2005-12-15 01:16:26 by jwe]

diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,8 +1,19 @@
+2005-12-14  David Bateman  <dbateman@free.fr>
+
+	* miscellaneous/dir.m: Transpose sub-assignment for cleanness.
+
+	* general/__isequal__.m: Remove reference to getfield.
+
+	* plot/hist.m: Update test code for row/column discrepencies.
+	* signal/freqz.m: Alter output row/column for matlab compatibility.
+	Update the test code for this.
+	* sparse/spstats.m: Fix small bug in the dimension of output.
+
 2005-12-13  William Poetra Yoga Hadisoeseno  <williampoetra@gmail.com>
 
 	* cell/cell2mat.m: New file, from octave-forge.
 
 2005-12-13  Ivana Varekova <varekova@redhat.com>
 
 	* sparse/treeplot.m, sparse/etreeplot.m, sparse/gplot.m:
 	New graph theory functions.
@@ -1186,21 +1197,21 @@ 2004-04-08  David Bateman  <dbateman@fre
 	statistics/distributions/weibull_rnd.m:
 	Allow N-d arrays.
 
 	* statistics/distributions/discrete_inv.m: Fix bug in indexing,
 	that results in NaN in places where it should not have had.
 
 	* statistics/distributions/discrete_rnd.m: New argument formats to
 	allow creating arbitrary matrices, compatiable with the other 
-	*_rnd.m functions. Maintain compatiablity with previous format.
+	*_rnd.m functions. Maintain compatibility with previous format.
 
 	* statistics/distributions/empirical_rnd.m: New argument formats
 	to allow creating arbitrary matrices, compatiable with the other
-	*_rnd.m functions. Maintain compatiablity with previous
+	*_rnd.m functions. Maintain compatibility with previous
 	format.  Allow N-d arrays.
 
 	* statistics/distributions/hypergeometric_cdf.m,
 	statistics/distributions/hypergeometric_inv.m,
 	statistics/distributions/hypergeometric_pdf.m,
 	statistics/distributions/wiener_rnd.m:
 	Error for non-scalar arguments.
 	
diff --git a/scripts/Makefile.in b/scripts/Makefile.in
--- a/scripts/Makefile.in
+++ b/scripts/Makefile.in
@@ -27,17 +27,17 @@ ALL_M_FILES := $(patsubst $(srcdir)/%, %
 
 DISTFILES = Makefile.in ChangeLog $(SOURCES) configure.in \
 	configure mkinstalldirs mkdoc mkpkgadd gethelp.cc \
 	skip-autoheader DOCSTRINGS
 
 SUBDIRS = audio control deprecated elfun finance general image io \
 	linear-algebra miscellaneous optimization plot polynomial \
 	quaternion set signal sparse specfun special-matrix startup \
-	statistics strings time
+	statistics strings testfun time
 
 DISTSUBDIRS = $(SUBDIRS)
 
 FCN_FILES = # $(wildcard $(srcdir)/*.m)
 FCN_FILES_NO_DIR = # $(notdir $(FCN_FILES))
 
 all: $(SUBDIRS) DOCSTRINGS
 .PHONY: all
diff --git a/scripts/general/__isequal__.m b/scripts/general/__isequal__.m
--- a/scripts/general/__isequal__.m
+++ b/scripts/general/__isequal__.m
@@ -61,18 +61,23 @@ function t = __isequal__ (nans_compare_e
     endfor
     if (!t)
       return;
     endif
 
     for argn = 1:l_v
       y = varargin{argn};
       for [v, k] = x
+	if (iscell (k))
+	  fld = y (k{:});
+	else
+	  fld = y.(k);
+	endif
         t = t && struct_contains (y, k) \
-              && __isequal__ (nans_compare_equal, v, getfield (y, k));
+              && __isequal__ (nans_compare_equal, v, fld);
       endfor
       if (!t)
         return;
       endif
     endfor
 
   elseif ((iscell (x)) || (islist (x)))
 
diff --git a/scripts/miscellaneous/dir.m b/scripts/miscellaneous/dir.m
--- a/scripts/miscellaneous/dir.m
+++ b/scripts/miscellaneous/dir.m
@@ -115,17 +115,17 @@ function retval = dir (file)
 	## XXX FIXME XXX -- need a way to create an empty (0x) struct
 	## array in case the file is nonexistent.
 	if (nt == 0)
 	  file_list = [];
 	else
 	  off = 1;
 	  for i = 1:nf
 	    tlen = len(i);
-	    file_list(off:off+tlen-1,1) = finfo{i};
+	    file_list(off:off+tlen-1,1) = finfo{i}.';
 	    off += tlen;
 	  endfor
 	endif
 	if (nargout > 0)
 	  if (length (file_list) > 0)
 	    retval = file_list;
 	  else
 	    retval = [];
diff --git a/scripts/signal/freqz.m b/scripts/signal/freqz.m
--- a/scripts/signal/freqz.m
+++ b/scripts/signal/freqz.m
@@ -109,37 +109,37 @@ function [h_r, f_r] = freqz (b, a, n, re
   if (isempty (Fs)) 
     if (nargout == 0) 
       Fs = 2; 
     else 
       Fs = 2*pi; 
     endif
   endif
 
-  a = a(:).';
-  b = b(:).';
+  a = a(:);
+  b = b(:);
 
   if (! isscalar (n)) ## Explicit frequency vector given
     w = f = n;
     if (nargin == 4)  ## Sampling rate Fs was specified
       w = 2*pi*f/Fs;
     endif
-    hb = polyval (fliplr(b), exp(-j*w));
-    ha = polyval (fliplr(a), exp(-j*w));
+    hb = polyval (fliplr(b), exp(j*w));
+    ha = polyval (fliplr(a), exp(j*w));
   elseif (strcmp (region, "whole"))
-    f = Fs * (0:n-1) / n;
-    ## polyval(fliplr(P),exp(-jw)) is O(p n) and fft(x) is O(n log(n)),
+    f = Fs * (0:n-1)' / n;
+    ## polyval(fliplr(P),exp(jw)) is O(p n) and fft(x) is O(n log(n)),
     ## where p is the order of the the polynomial P.  For small p it
     ## would be faster to use polyval but in practice the overhead for
     ## polyval is much higher and the little bit of time saved isn't
     ## worth the extra code.
     hb = fft (postpad (b, n));
     ha = fft (postpad (a, n));
   else
-    f = Fs/2 * (0:n-1) / n;
+    f = Fs/2 * (0:n-1)' / n;
     hb = fft (postpad (b, 2*n))(1:n);
     ha = fft (postpad (a, 2*n))(1:n);
   endif
 
   h = hb ./ ha;
 
   if (nargout != 0), # return values and don't plot
     h_r = h;
@@ -165,14 +165,14 @@ endfunction
 %! assert(h(2:16),conj(h(32:-1:18)),20*eps);
 %! [h2,w2] = freqz(b,1,16,'half');
 %! assert(h(1:16),h2,20*eps);
 %! assert(w(1:16),w2,20*eps);
 
 %!test # Sampling frequency properly interpreted
 %! b = [1 1 1]/3;
 %! [h,f] = freqz(b,1,16,320);
-%! assert(f,[0:15]*10,10*eps);
+%! assert(f,[0:15]'*10,10*eps);
 %! [h2,f2] = freqz(b,1,[0:15]*10,320);
 %! assert(f2,[0:15]*10,10*eps);
-%! assert(h,h2,20*eps);
+%! assert(h,h2',20*eps);
 %! [h3,f3] = freqz(b,1,32,'whole',320);
-%! assert(f3,[0:31]*10,10*eps);
+%! assert(f3,[0:31]'*10,10*eps);
