# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1238070005 -3600
#      Thu Mar 26 13:20:05 2009 +0100
# Node ID 9a46ba093db49db28a2ae4a621680733a6627430
# Parent  6890d411a0b8d8c5a1de65ba323ccfacbf023532
generalize dim_vector::numel

diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,12 @@
+2009-03-26  Jaroslav Hajek  <highegg@gmail.com>
+
+	* dim-vector.h (dim_vector::numel): Add optional argument, simplify.
+
 2009-03-26  Jaroslav Hajek  <highegg@gmail.com>
 
 	* Array.h (Array<T>::dims): Return a const reference.
 	(Array<T>::is_vector): New method.
 
 2009-03-26  Jaroslav Hajek  <highegg@gmail.com>
 
 	* Array.cc (Array<T>::find): New method.
diff --git a/liboctave/dim-vector.h b/liboctave/dim-vector.h
--- a/liboctave/dim-vector.h
+++ b/liboctave/dim-vector.h
@@ -305,23 +305,23 @@ public:
   {
     return (num_ones () == length ());
   }
 
   // This is the number of elements that a matrix with this dimension
   // vector would have, NOT the number of dimensions (elements in the
   // dimension vector).
 
-  octave_idx_type numel (void) const
+  octave_idx_type numel (int n = 0) const
   {
     int n_dims = length ();
 
-    octave_idx_type retval = n_dims > 0 ? elem (0) : 0;
+    octave_idx_type retval = 1;
 
-    for (int i = 1; i < n_dims; i++)
+    for (int i = n; i < n_dims; i++)
       retval *= elem (i);
 
     return retval;
   }
 
   bool any_neg (void) const
   {
     int n_dims = length (), i;
