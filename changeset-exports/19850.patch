# HG changeset patch
# User CarnÃ« Draug <carandraug@octave.org>
# Date 1424807242 0
#      Tue Feb 24 19:47:22 2015 +0000
# Node ID f81a1da191e4c220c5b30c3691f547882c365bc7
# Parent  1c9ed5b4c73d95d0ba017e4bc02cb828205e219a
Script file or eval code are not interactive session so keep Octave quiet.

* libinterp/octave.cc: add a new static variable an_octave_program to keep
track when this is called for an Octave program and not for an Octave
interactive session. The main point of this patch is so that
octave_startup_message() on octave_execute_interpreter() is not called.
A continuation work from csets 6ba5f1ff041e and f3ac54ac2c6a which also
aimed at doing this.  The idea is to have an_octave_program inherit other
features of a non-interactive session (such as being canceled by forcing
an interactive session or not starting readline).

diff --git a/libinterp/octave.cc b/libinterp/octave.cc
--- a/libinterp/octave.cc
+++ b/libinterp/octave.cc
@@ -167,16 +167,21 @@ static bool persist = false;
 
 // If TRUE, the GUI should be started.
 static bool start_gui = false;
 
 // If TRUE use traditional (maximally MATLAB compatible) settings
 // (--traditional)
 static bool traditional = false;
 
+// TRUE if this is a program and no interpreter and interaction is
+// needed.  For example, an octave program with shebang line, or code
+// from eval without persist.
+static bool an_octave_program = false;
+
 // Store the command-line options for later use.
 
 static void
 intern_argv (int argc, char **argv)
 {
   assert (symbol_table::at_top_level ());
 
   symbol_table::assign (".nargin.", argc - 1);
@@ -698,23 +703,24 @@ octave_process_command_line (int argc, c
   if (force_gui_option && no_gui_option)
     {
       error ("only one of --force-gui and --no-gui may be used");
 
       octave_print_terse_usage_and_exit ();
     }
 
   bool script_file = (argc - optind) > 0;
-
   if (! code_to_eval.empty () && script_file)
     {
       error ("--eval \"CODE\" and script file are mutually exclusive options");
 
       octave_print_terse_usage_and_exit ();
     }
+  an_octave_program = (script_file || ! code_to_eval.empty ()) && ! persist;
+
 }
 
 // EMBEDDED is declared int instead of bool because this function is
 // declared extern "C".
 
 void
 octave_initialize_interpreter (int argc, char **argv, int embedded)
 {
@@ -783,17 +789,17 @@ octave_initialize_interpreter (int argc,
     display_info::no_window_system ();
 
   // Is input coming from a terminal?  If so, we are probably interactive.
 
   // If stdin is not a tty, then we are reading commands from a pipe or
   // a redirected file.
   bool stdin_is_tty = gnulib::isatty (fileno (stdin));
 
-  interactive = (! embedded && stdin_is_tty
+  interactive = (! embedded && ! an_octave_program && stdin_is_tty
                  && gnulib::isatty (fileno (stdout)));
 
   // Check if the user forced an interactive session.  If he
   // unnecessarily did so, reset forced_interactive to false.
   if (forced_interactive)
     {
       if (interactive)
         forced_interactive = false;
