# HG changeset patch
# User Jacob Dawid <jacob.dawid@googlemail.com>
# Date 1341225308 -7200
#      Mon Jul 02 12:35:08 2012 +0200
# Branch gui
# Node ID 6b90737f69cc0f17794ce0aef0e3fb684f6f880a
# Parent  ed0f820c7ce004b5a8515fc28a86b455026af49a
Very basic breakpoint setting and removing in the editor works.

* file-editor-tab: Instead of toggling breakpoints directly, now sends events.
* octave-event: Created new events to add and remove breakpoints.

diff --git a/gui/src/m-editor/file-editor-tab.cc b/gui/src/m-editor/file-editor-tab.cc
--- a/gui/src/m-editor/file-editor-tab.cc
+++ b/gui/src/m-editor/file-editor-tab.cc
@@ -102,16 +102,38 @@ file_editor_tab::copy_available ()
 
 void
 file_editor_tab::event_accepted (octave_event *e)
 {
   if (dynamic_cast<octave_run_file_event*> (e))
     {
       // File was run successfully.
     }
+
+  if (octave_add_breakpoint_event *abe
+      = dynamic_cast<octave_add_breakpoint_event*> (e))
+    {
+      // TODO: Check file.
+      _edit_area->markerAdd (abe->get_line (), breakpoint);
+    }
+
+  if (octave_remove_breakpoint_event *rbe
+      = dynamic_cast<octave_remove_breakpoint_event*> (e))
+    {
+      // TODO: Check file.
+      _edit_area->markerDelete (rbe->get_line (), breakpoint);
+    }
+
+  if (octave_remove_all_breakpoints_event *rabe
+      = dynamic_cast<octave_remove_all_breakpoints_event*> (e))
+    {
+      Q_UNUSED (rabe);
+      _edit_area->markerDeleteAll (breakpoint);
+    }
+
   delete e;
 }
 
 void
 file_editor_tab::event_reject (octave_event *e)
 {
   if (dynamic_cast<octave_run_file_event*> (e))
     {
@@ -163,24 +185,62 @@ file_editor_tab::handle_margin_clicked(i
           if (mask && (1 << bookmark))
             _edit_area->markerDelete(line,bookmark);
           else
             _edit_area->markerAdd(line,bookmark);
         }
       else
         {
           if (mask && (1 << breakpoint))
-            _edit_area->markerDelete(line,breakpoint);
+            {
+              request_remove_breakpoint (line);
+            }
           else
-            _edit_area->markerAdd(line,breakpoint);
+            {
+              request_add_breakpoint (line);
+            }
         }
     }
 }
 
 void
+file_editor_tab::request_add_breakpoint (int line)
+{
+  QFileInfo file_info (_file_name);
+  QString path = file_info.absolutePath ();
+  QString function_name = file_info.fileName ();
+
+  // We have to cut off the suffix, because octave appends it.
+  function_name.chop (file_info.suffix ().length () + 1);
+
+  octave_link::instance ()->post_event
+      (new octave_add_breakpoint_event (*this,
+                                        path.toStdString (),
+                                        function_name.toStdString (),
+                                        line));
+}
+
+void
+file_editor_tab::request_remove_breakpoint (int line)
+{
+  QFileInfo file_info (_file_name);
+  QString path = file_info.absolutePath ();
+  QString function_name = file_info.fileName ();
+
+  // We have to cut off the suffix, because octave appends it.
+  function_name.chop (file_info.suffix ().length () + 1);
+
+  octave_link::instance ()->post_event
+      (new octave_remove_breakpoint_event (*this,
+                                           path.toStdString (),
+                                           function_name.toStdString (),
+                                           line));
+}
+
+void
 file_editor_tab::comment_selected_text ()
 {
   do_comment_selected_text (true);
 }
 
 void
 file_editor_tab::uncomment_selected_text ()
 {
@@ -327,21 +387,21 @@ file_editor_tab::remove_breakpoint ()
 {
     _edit_area->markerDeleteAll (breakpoint);
 }
 
 void
 file_editor_tab::toggle_breakpoint ()
 {
   int line, cur;
-  _edit_area->getCursorPosition (&line,&cur);
+  _edit_area->getCursorPosition (&line, &cur);
   if ( _edit_area->markersAtLine (line) && (1 << breakpoint) )
-    _edit_area->markerDelete (line, breakpoint);
+    request_remove_breakpoint (line);
   else
-    _edit_area->markerAdd (line, breakpoint);
+    request_add_breakpoint (line);
 }
 
 void
 file_editor_tab::next_breakpoint ()
 {
   int line, cur, nextline;
   _edit_area->getCursorPosition (&line, &cur);
   if ( _edit_area->markersAtLine (line) && (1 << breakpoint) )
diff --git a/gui/src/m-editor/file-editor-tab.h b/gui/src/m-editor/file-editor-tab.h
--- a/gui/src/m-editor/file-editor-tab.h
+++ b/gui/src/m-editor/file-editor-tab.h
@@ -74,16 +74,19 @@ signals:
   void editor_state_changed ();
   void close_request ();
 
 protected:
   void closeEvent (QCloseEvent *event);
   void set_file_name (QString fileName);
 
 private:
+  void request_add_breakpoint (int line);
+  void request_remove_breakpoint (int line);
+
   void update_tracked_file ();
   int check_file_modified (QString msg, int cancelButton);
   void do_comment_selected_text (bool comment);
 
   file_editor *         _file_editor;
   QsciScintilla *       _edit_area;
 
   QString               _file_name;
diff --git a/gui/src/octave-adapter/octave-event.h b/gui/src/octave-adapter/octave-event.h
--- a/gui/src/octave-adapter/octave-event.h
+++ b/gui/src/octave-adapter/octave-event.h
@@ -245,16 +245,133 @@ class octave_clear_history_event : publi
       int i;
       while ((i = command_history::length ()) > 0) {
           command_history::remove (i - 1);
         }
       return true;
     }
 };
 
+class octave_add_breakpoint_event : public octave_event
+{
+  public:
+    octave_add_breakpoint_event (octave_event_observer& o,
+                                 std::string path,
+                                 std::string function_name,
+                                 int line)
+      : octave_event (o)
+    {
+      _path = path;
+      _function_name = function_name;
+      _line = line;
+    }
+
+    bool perform ()
+    {
+      bp_table::intmap intmap;
+      intmap[0] = _line;
+
+      // TODO: Check success.
+      std::string previous_directory = octave_env::get_current_directory ();
+      octave_env::chdir (_path);
+      bp_table::add_breakpoint (_function_name, intmap);
+      octave_env::chdir (previous_directory);
+      return true;
+    }
+
+    std::string get_path ()
+    {
+      return _path;
+    }
+
+    std::string get_function_name ()
+    {
+      return _function_name;
+    }
+
+    int get_line ()
+    {
+      return _line;
+    }
+
+  private:
+    std::string _path;
+    std::string _function_name;
+    int _line;
+};
+
+class octave_remove_breakpoint_event : public octave_event
+{
+  public:
+    octave_remove_breakpoint_event (octave_event_observer& o,
+                                    std::string path,
+                                    std::string function_name,
+                                    int line)
+      : octave_event (o)
+    {
+      _path = path;
+      _function_name = function_name;
+      _line = line;
+    }
+
+    bool perform ()
+    {
+      bp_table::intmap intmap;
+      intmap[0] = _line;
+
+      // TODO: Check success.
+      std::string previous_directory = octave_env::get_current_directory ();
+      octave_env::chdir (_path);
+      bp_table::remove_breakpoint (_function_name, intmap);
+      octave_env::chdir (previous_directory);
+      return true;
+    }
+
+    std::string get_path ()
+    {
+      return _path;
+    }
+
+    std::string get_function_name ()
+    {
+      return _function_name;
+    }
+
+    int get_line ()
+    {
+      return _line;
+    }
+
+  private:
+    std::string _path;
+    std::string _function_name;
+    int _line;
+};
+
+class octave_remove_all_breakpoints_event : public octave_event
+{
+  public:
+    octave_remove_all_breakpoints_event (octave_event_observer& o,
+                                         std::string file)
+      : octave_event (o)
+    {
+      _file = file;
+    }
+
+    bool perform ()
+    {
+      // TODO: Check success.
+      bp_table::remove_all_breakpoints_in_file (_file, true);
+      return true;
+    }
+
+  private:
+    std::string _file;
+};
+
 class octave_debug_step_into_event : public octave_event
 {
   public:
     /** Creates a new octave_debug_step_into_event. */
     octave_debug_step_into_event (octave_event_observer& o)
       : octave_event (o) { }
 
     bool perform ()
