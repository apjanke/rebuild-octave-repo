# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1424740205 18000
#      Mon Feb 23 20:10:05 2015 -0500
# Node ID d3dcc62512d786d89042c2014bbf227d1cd3dcc3
# Parent  8aa2fc37650aba1179075b8b276db542b3cc033a
do a better job of saving and restoring compiler flags (bug #44353)

* configure.ac: Save and restore configure flags after AC_PROG_CXX,
AC_PROG_CC, and friends.

diff --git a/configure.ac b/configure.ac
--- a/configure.ac
+++ b/configure.ac
@@ -300,38 +300,38 @@ AC_SUBST(USE_64_BIT_IDX_T)
 ### It seems that there are some broken inline assembly functions in
 ### the GNU libc.  Since I'm not sure how to test whether we are using
 ### GNU libc, just disable them for all platforms.
 
 AC_MSG_NOTICE([defining __NO_MATH_INLINES avoids buggy GNU libc exp function])
 AC_DEFINE(__NO_MATH_INLINES, 1,
   [Define to 1 if your version of GNU libc has buggy inline assembly code for math functions like exp.])
 
-## Save and restore CFLAGS, CXXFLAGS, and FFLAGS globally.  These variables
-## are for users, so we shouldn't be touching them.  Instead, we should set
-## the corresponding AM_ flags (currently by way of the XTRA_ variables).
-## However, for the duration of the configure script, we may set CFLAGS,
-## CXXFLAGS, or FFLAGS so that subsequent tests succeed.  Temporary
-## settings like this are currently done for pthreads and openmp, for
-## example.
-octave_configure_save_CFLAGS="$CFLAGS"
-octave_configure_save_CXXFLAGS="$CXXFLAGS"
-octave_configure_save_FFLAGS="$FFLAGS"
-
 ### Determine which C++ compiler to use (we expect to find g++).
 
 AC_PROG_CXX
 AC_PROG_CXXCPP
 
 ### Determine which C compiler to use (we expect to find gcc).
 
 AC_PROG_CC
 AC_PROG_CPP
 AC_PROG_GCC_TRADITIONAL
 
+## Save and restore CFLAGS, CXXFLAGS, and FFLAGS globally.  These variables
+## are for users, so we shouldn't be touching them.  Instead, we should set
+## the corresponding AM_ flags (currently by way of the XTRA_ variables).
+## However, for the duration of the configure script, we may set CFLAGS,
+## CXXFLAGS, or FFLAGS so that subsequent tests succeed.  Temporary
+## settings like this are currently done for pthreads and openmp, for
+## example.
+original_octave_configure_CFLAGS="$CFLAGS"
+original_octave_configure_CXXFLAGS="$CXXFLAGS"
+original_octave_configure_FFLAGS="$FFLAGS"
+
 ## Check for MSVC
 have_msvc=no
 case $host_os in
   msdosmsvc)
     have_msvc=yes
   ;;
   mingw*)
     AC_MSG_CHECKING([for MSVC compiler])
@@ -2962,19 +2962,19 @@ fi
 AM_CONDITIONAL([AMCOND_BUILD_GUI], [test $build_gui = yes])
 AM_CONDITIONAL([AMCOND_HAVE_QSCINTILLA],
                [test "$octave_cv_lib_qscintilla" = yes])
 AM_CONDITIONAL([WIN32_TERMINAL], [test $win32_terminal = yes])
 AC_SUBST(QT_CPPFLAGS)
 AC_SUBST(QT_LDFLAGS)
 AC_SUBST(QT_LIBS)
 
-CFLAGS="$octave_configure_save_CFLAGS"
-CXXFLAGS="$octave_configure_save_CXXFLAGS"
-FFLAGS="$octave_configure_save_FFLAGS"
+CFLAGS="$original_octave_configure_CFLAGS"
+CXXFLAGS="$original_octave_configure_CXXFLAGS"
+FFLAGS="$original_octave_configure_FFLAGS"
 
 AH_BOTTOM([#include "oct-conf-post.h"])
 
 ### Make all AC_DEFINES available to testif feature of test.m function.
 ### This must reside at the bottom of configure.ac after all AC_DEFINES
 ### have been made.
 
 AC_OUTPUT_MAKE_DEFS
