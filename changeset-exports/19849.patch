# HG changeset patch
# User CarnÃ« Draug <carandraug@octave.org>
# Date 1424797782 0
#      Tue Feb 24 17:09:42 2015 +0000
# Node ID 1c9ed5b4c73d95d0ba017e4bc02cb828205e219a
# Parent  9b7ca334a1047b8636475b4c2f5c8d4e48cd4abf
input.h: change meaning of interactive and forced_interactive global variables.

* libinterp/corefcn/input.h, libinterp/corefcn/input.cc: the interactive var
is set at the start of Octave session if the session would be interactive.
The forced_interactive is set only by the "--interactive" option.  This means
that in a forced interactive session, interactive is false, and that in a not
forced interactive session with the "--interactive" option, forced_interactive
is true.  This is a bit counter-intuitive.  Also when it matters if a session
is interactive or not, it should not matter if it was forced not, only whether
is interactive.  Change this logic. Interactive means we are running a
interactive session, forced interactive means the interactive session needed to
be forced.
* libinterp/octave.cc: during Octave initialization, as soon as we identify if
this would be an interactive session, check with forced_interactive to adjust
the value of this variables.
* libinterp/corefcn/error.cc, libinterp/corefcn/oct-stream.cc,
libinterp/corefcn/pager.cc, libinterp/corefcn/dirfns.cc,
libinterp/corefcn/sighandlers.cc, libinterp/corefcn/sysdep.cc,
libinterp/corefcn/toplev.cc, libinterp/parse-tree/lex.ll,
libinterp/parse-tree/oct-parse.in.yy: replace all checks for
"(interactive || forced_interactive)" with simply interactive. On the few
cases where forced_interactive was not checked, it was replaced with
"(interactive && ! forced_interactive)", just like "! interactive" got
replaced by "(! interactive || forced_interactive)", only to conserve the
logic. I am uncertain if such checks are not actually bugs though.

diff --git a/libinterp/corefcn/dirfns.cc b/libinterp/corefcn/dirfns.cc
--- a/libinterp/corefcn/dirfns.cc
+++ b/libinterp/corefcn/dirfns.cc
@@ -341,17 +341,18 @@ recursively remove all subdirectories as
           std::string msg;
 
           if (nargin == 2)
             {
               if (args(1).string_value () == "s")
                 {
                   bool doit = true;
 
-                  if (interactive && Vconfirm_recursive_rmdir)
+                  if (interactive && ! forced_interactive
+                      && Vconfirm_recursive_rmdir)
                     {
                       std::string prompt
                         = "remove entire contents of " + fulldir + "? ";
 
                       doit = octave_yes_or_no (prompt);
                     }
 
                   if (doit)
diff --git a/libinterp/corefcn/error.cc b/libinterp/corefcn/error.cc
--- a/libinterp/corefcn/error.cc
+++ b/libinterp/corefcn/error.cc
@@ -446,17 +446,17 @@ error_2 (const char *id, const char *fmt
   int init_state = error_state;
 
   error_1 (std::cerr, "error", id, fmt, args, with_cfn);
 
   if (error_state != -2 && ! symbol_table::at_top_level ()
       && ! discard_error_messages)
     pr_where ("error");
 
-  if ((interactive || forced_interactive)
+  if (interactive
       && Vdebug_on_error && init_state == 0
       && octave_call_stack::caller_user_code ())
     {
       unwind_protect frame;
       frame.protect_var (Vdebug_on_error);
       Vdebug_on_error = false;
 
       error_state = 0;
diff --git a/libinterp/corefcn/input.cc b/libinterp/corefcn/input.cc
--- a/libinterp/corefcn/input.cc
+++ b/libinterp/corefcn/input.cc
@@ -94,20 +94,21 @@ std::string VPS4 = "+ ";
 int Vecho_executing_commands = ECHO_OFF;
 
 // The time we last printed a prompt.
 octave_time Vlast_prompt_time = 0.0;
 
 // Character to append after successful command-line completion attempts.
 static char Vcompletion_append_char = ' ';
 
-// TRUE means this is an interactive shell.
+// TRUE means this is an interactive shell (either forced or not)
 bool interactive = false;
 
 // TRUE means the user forced this shell to be interactive (-i).
+// FALSE means the shell would be interactive, independent of user settings.
 bool forced_interactive = false;
 
 // TRUE after a call to completion_matches.
 bool octave_completion_matches_called = false;
 
 // TRUE if the plotting system has requested a call to drawnow at
 // the next user prompt.
 bool Vdrawnow_requested = false;
@@ -191,17 +192,17 @@ gnu_readline (const std::string& s, bool
   return retval;
 }
 
 static inline std::string
 interactive_input (const std::string& s, bool& eof)
 {
   Vlast_prompt_time.stamp ();
 
-  if (Vdrawnow_requested && (interactive || forced_interactive))
+  if (Vdrawnow_requested && interactive)
     {
       feval ("drawnow");
 
       flush_octave_stdout ();
 
       // We set Vdrawnow_requested to false even if there is an error
       // in drawnow so that the error doesn't reappear at every prompt.
 
@@ -221,17 +222,17 @@ octave_base_reader::octave_gets (bool& e
 
   eof = false;
 
   std::string retval;
 
   // Process pre input event hook function prior to flushing output and
   // printing the prompt.
 
-  if (interactive || forced_interactive)
+  if (interactive)
     {
       if (! Vdebugging)
         octave_link::exit_debugger_event ();
 
       octave_link::pre_input_event ();
 
       octave_link::set_workspace ();
     }
@@ -287,17 +288,17 @@ octave_base_reader::octave_gets (bool& e
       do_input_echo (retval);
     }
   else
     octave_diary << "\n";
 
   // Process post input event hook function after the internal history
   // list has been updated.
 
-  if (interactive || forced_interactive)
+  if (interactive)
     octave_link::post_input_event ();
 
   return retval;
 }
 
 bool
 octave_base_reader::reading_fcn_file (void) const
 {
@@ -582,18 +583,20 @@ get_debug_input (const std::string& prom
   std::string msg = buf.str ();
 
   if (! msg.empty ())
     std::cerr << msg << std::endl;
 
   frame.protect_var (VPS1);
   VPS1 = prompt;
 
-  if (! (interactive || forced_interactive))
+  if (! interactive)
     {
+      frame.protect_var (interactive);
+      interactive = true;
       frame.protect_var (forced_interactive);
       forced_interactive = true;
     }
 
   octave_parser curr_parser;
 
   while (Vdebugging)
     {
diff --git a/libinterp/corefcn/input.h b/libinterp/corefcn/input.h
--- a/libinterp/corefcn/input.h
+++ b/libinterp/corefcn/input.h
@@ -33,20 +33,21 @@ along with Octave; see the file COPYING.
 #include "oct-obj.h"
 #include "pager.h"
 
 class octave_value;
 class octave_base_lexer;
 
 extern OCTINTERP_API FILE *get_input_from_stdin (void);
 
-// TRUE means this is an interactive shell.
+// TRUE means this is an interactive shell (forced or not)
 extern bool interactive;
 
 // TRUE means the user forced this shell to be interactive (-i).
+// FALSE means the shell would be interactive, independent of user settings.
 extern bool forced_interactive;
 
 // TRUE after a call to completion_matches.
 extern bool octave_completion_matches_called;
 
 // TRUE if the plotting system has requested a call to drawnow at
 // the next user prompt.
 extern OCTINTERP_API bool Vdrawnow_requested;
diff --git a/libinterp/corefcn/oct-stream.cc b/libinterp/corefcn/oct-stream.cc
--- a/libinterp/corefcn/oct-stream.cc
+++ b/libinterp/corefcn/oct-stream.cc
@@ -926,17 +926,17 @@ octave_base_stream::clearerr (void)
 // are those that define is).
 
 std::string
 octave_base_stream::do_gets (octave_idx_type max_len, bool& err,
                              bool strip_newline, const std::string& who)
 {
   std::string retval;
 
-  if ((interactive || forced_interactive) && file_number () == 0)
+  if (interactive && file_number () == 0)
     {
       ::error ("%s: unable to read from stdin while running interactively",
                who.c_str ());
 
       return retval;
     }
 
   err = false;
@@ -1042,17 +1042,17 @@ octave_base_stream::gets (octave_idx_typ
   return do_gets (max_len, err, false, who);
 }
 
 off_t
 octave_base_stream::skipl (off_t num, bool& err, const std::string& who)
 {
   off_t cnt = -1;
 
-  if ((interactive || forced_interactive) && file_number () == 0)
+  if (interactive && file_number () == 0)
     {
       ::error ("%s: unable to read from stdin while running interactively",
                who.c_str ());
 
       return count;
     }
 
   err = false;
@@ -1491,17 +1491,17 @@ octave_value
 octave_base_stream::do_scanf (scanf_format_list& fmt_list,
                               octave_idx_type nr, octave_idx_type nc,
                               bool one_elt_size_spec,
                               octave_idx_type& conversion_count,
                               const std::string& who)
 {
   octave_value retval = Matrix ();
 
-  if ((interactive || forced_interactive) && file_number () == 0)
+  if (interactive && file_number () == 0)
     {
       ::error ("%s: unable to read from stdin while running interactively",
                who.c_str ());
 
       return retval;
     }
 
   conversion_count = 0;
@@ -1819,17 +1819,17 @@ octave_base_stream::do_scanf (scanf_form
                   // If it looks like we have a matching failure, then
                   // reset the failbit in the stream state.
 
                   if (is.rdstate () & std::ios::failbit)
                     is.clear (is.rdstate () & (~std::ios::failbit));
 
                   // FIXME: is this the right thing to do?
 
-                  if (interactive && name () == "stdin")
+                  if (interactive && ! forced_interactive && name () == "stdin")
                     {
                       is.clear ();
 
                       // Skip to end of line.
 
                       bool err;
                       do_gets (-1, err, false, who);
                     }
@@ -2044,17 +2044,17 @@ octave_base_stream::do_oscanf (const sca
         }
 
       if (ok () && is.fail ())
         {
           error ("%s: read error", who.c_str ());
 
           // FIXME: is this the right thing to do?
 
-          if (interactive && name () == "stdin")
+          if (interactive && ! forced_interactive && name () == "stdin")
             {
               // Skip to end of line.
 
               bool err;
               do_gets (-1, err, false, who);
             }
         }
     }
diff --git a/libinterp/corefcn/pager.cc b/libinterp/corefcn/pager.cc
--- a/libinterp/corefcn/pager.cc
+++ b/libinterp/corefcn/pager.cc
@@ -226,26 +226,26 @@ more_than_a_screenful (const char *s, in
     }
 
   return false;
 }
 
 int
 octave_pager_buf::sync (void)
 {
-  if (! interactive
+  if (! interactive || forced_interactive
       || really_flush_to_pager
       || (Vpage_screen_output && Vpage_output_immediately)
       || ! Vpage_screen_output)
     {
       char *buf = eback ();
 
       int len = pptr () - buf;
 
-      bool bypass_pager = (! interactive
+      bool bypass_pager = (! interactive || forced_interactive
                            || ! Vpage_screen_output
                            || (really_flush_to_pager
                                && Vpage_screen_output
                                && ! Vpage_output_immediately
                                && ! more_than_a_screenful (buf, len)));
 
       if (len > 0)
         {
diff --git a/libinterp/corefcn/sighandlers.cc b/libinterp/corefcn/sighandlers.cc
--- a/libinterp/corefcn/sighandlers.cc
+++ b/libinterp/corefcn/sighandlers.cc
@@ -518,17 +518,18 @@ user_abort (const char *sig_name, int si
           // arrived.
 
           if (octave_interrupt_state < 0)
             octave_interrupt_state = 0;
 
           octave_signal_caught = 1;
           octave_interrupt_state++;
 
-          if (interactive && octave_interrupt_state == 2)
+          if (interactive && ! forced_interactive
+              && octave_interrupt_state == 2)
             std::cerr << "Press Control-C again to abort." << std::endl;
 
           if (octave_interrupt_state >= 3)
             my_friendly_exit (sig_name, sig_number, true);
         }
     }
 
 }
diff --git a/libinterp/corefcn/sysdep.cc b/libinterp/corefcn/sysdep.cc
--- a/libinterp/corefcn/sysdep.cc
+++ b/libinterp/corefcn/sysdep.cc
@@ -338,17 +338,17 @@ sysdep_cleanup (void)
 void
 raw_mode (bool on, bool wait)
 {
   static bool curr_on = false;
 
   int tty_fd = STDIN_FILENO;
   if (! gnulib::isatty (tty_fd))
     {
-      if (interactive)
+      if (interactive && ! forced_interactive)
         error ("stdin is not a tty!");
       return;
     }
 
   if (on == curr_on)
     return;
 
 #if defined (HAVE_TERMIOS_H)
@@ -740,17 +740,17 @@ is identical to the above example, but d
 returning the empty string if no key is available.\n\
 @seealso{input, pause}\n\
 @end deftypefn")
 {
   octave_value retval;
 
   // FIXME: add timeout and default value args?
 
-  if (interactive || forced_interactive)
+  if (interactive)
     {
       Fdrawnow ();
 
       int c = octave_kbhit (args.length () == 0);
 
       if (c == -1)
         c = 0;
 
diff --git a/libinterp/corefcn/toplev.cc b/libinterp/corefcn/toplev.cc
--- a/libinterp/corefcn/toplev.cc
+++ b/libinterp/corefcn/toplev.cc
@@ -567,17 +567,17 @@ main_loop (void)
   octave_bad_alloc_hook = 0;
 
   octave_catch_interrupts ();
 
   octave_initialized = true;
 
   // The big loop.
 
-  octave_lexer *lxr = ((interactive || forced_interactive)
+  octave_lexer *lxr = (interactive
                        ? new octave_lexer ()
                        : new octave_lexer (stdin));
 
   octave_parser parser (*lxr);
 
   int retval = 0;
   do
     {
@@ -595,34 +595,34 @@ main_loop (void)
           if (retval == 0)
             {
               if (parser.stmt_list)
                 {
                   parser.stmt_list->accept (*current_evaluator);
 
                   octave_quit ();
 
-                  if (! (interactive || forced_interactive))
+                  if (! interactive)
                     {
                       bool quit = (tree_return_command::returning
                                    || tree_break_command::breaking);
 
                       if (tree_return_command::returning)
                         tree_return_command::returning = 0;
 
                       if (tree_break_command::breaking)
                         tree_break_command::breaking--;
 
                       if (quit)
                         break;
                     }
 
                   if (error_state)
                     {
-                      if (! (interactive || forced_interactive))
+                      if (! interactive)
                         {
                           // We should exit with a nonzero status.
                           retval = 1;
                           break;
                         }
                     }
                   else
                     {
@@ -725,17 +725,17 @@ do_octave_atexit (void)
       OCTAVE_SAFE_CALL (symbol_table::cleanup, ());
 
       OCTAVE_SAFE_CALL (sysdep_cleanup, ());
 
       OCTAVE_SAFE_CALL (octave_finalize_hdf5, ());
 
       OCTAVE_SAFE_CALL (flush_octave_stdout, ());
 
-      if (! quitting_gracefully && (interactive || forced_interactive))
+      if (! quitting_gracefully && interactive)
         {
           octave_stdout << "\n";
 
           // Yes, we want this to be separate from the call to
           // flush_octave_stdout above.
 
           OCTAVE_SAFE_CALL (flush_octave_stdout, ());
         }
diff --git a/libinterp/octave.cc b/libinterp/octave.cc
--- a/libinterp/octave.cc
+++ b/libinterp/octave.cc
@@ -786,21 +786,31 @@ octave_initialize_interpreter (int argc,
 
   // If stdin is not a tty, then we are reading commands from a pipe or
   // a redirected file.
   bool stdin_is_tty = gnulib::isatty (fileno (stdin));
 
   interactive = (! embedded && stdin_is_tty
                  && gnulib::isatty (fileno (stdout)));
 
-  if (! interactive && ! forced_line_editing)
+  // Check if the user forced an interactive session.  If he
+  // unnecessarily did so, reset forced_interactive to false.
+  if (forced_interactive)
+    {
+      if (interactive)
+        forced_interactive = false;
+      else
+        interactive = true;
+    }
+
+  if ((! interactive || forced_interactive) && ! forced_line_editing)
     line_editing = false;
 
   // Also skip start-up message unless session is interactive.
-  if (! (interactive || forced_interactive))
+  if (! interactive)
     inhibit_startup_message = true;
 
   // Force default line editor if we don't want readline editing.
   if (! line_editing)
     command_editor::force_default_editor ();
 
   // These can come after command line args since none of them set any
   // defaults that might be changed by command line options.
@@ -876,17 +886,17 @@ octave_execute_interpreter (void)
   command_editor::reset_current_command_number (1);
 
   // Now argv should have the full set of args.
   intern_argv (octave_cmdline_argc, octave_cmdline_argv);
 
   // Force input to be echoed if not really interactive,
   // but the user has forced interactive behavior.
 
-  if (! interactive && forced_interactive)
+  if (forced_interactive)
     {
       command_editor::blink_matching_paren (false);
 
       // FIXME: is this the right thing to do?
       Fecho_executing_commands (octave_value (ECHO_CMD_LINE));
     }
 
   if (octave_embedded)
diff --git a/libinterp/parse-tree/lex.ll b/libinterp/parse-tree/lex.ll
--- a/libinterp/parse-tree/lex.ll
+++ b/libinterp/parse-tree/lex.ll
@@ -2231,17 +2231,17 @@ octave_base_lexer::reset (void)
 
   // We do want a prompt by default.
   promptflag (1);
 
   // Only ask for input from stdin if we are expecting interactive
   // input.
 
   if (! quitting_gracefully
-      && (interactive || forced_interactive)
+      && interactive
       && ! (reading_fcn_file
             || reading_classdef_file
             || reading_script_file
             || input_from_eval_string ()))
     yyrestart (stdin, scanner);
 
   lexical_feedback::reset ();
 
diff --git a/libinterp/parse-tree/oct-parse.in.yy b/libinterp/parse-tree/oct-parse.in.yy
--- a/libinterp/parse-tree/oct-parse.in.yy
+++ b/libinterp/parse-tree/oct-parse.in.yy
@@ -106,18 +106,17 @@ static std::map<std::string, std::string
 // the file.
 
 static void yyerror (octave_base_parser& parser, const char *s);
 
 #define ABORT_PARSE \
   do \
     { \
       yyerrok; \
-      if ((interactive || forced_interactive) \
-          && ! lexer.input_from_eval_string ()) \
+      if (interactive && ! lexer.input_from_eval_string ()) \
         YYACCEPT; \
       else \
         YYABORT; \
     } \
   while (0)
 
 #define lexer parser.lexer
 #define scanner lexer.scanner
