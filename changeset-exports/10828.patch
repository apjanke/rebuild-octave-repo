# HG changeset patch
# User Rik <octave@nomad.inbox5.com>
# Date 1280346304 25200
#      Wed Jul 28 12:45:04 2010 -0700
# Node ID 322f43e0e1702f84a13f36a80dc252b187eb0282
# Parent  228cd18455a64e26fc6c797eaf24b135921c616c
Grammarcheck .txi documentation files.

diff --git a/doc/ChangeLog b/doc/ChangeLog
--- a/doc/ChangeLog
+++ b/doc/ChangeLog
@@ -1,8 +1,24 @@
+2010-07-28  Rik <octave@nomad.inbox5.com>
+
+	* interpreter/arith.txi, interpreter/audio.txi, interpreter/basics.txi,
+	interpreter/container.txi, interpreter/contrib.txi,
+	interpreter/debug.txi, interpreter/diagperm.txi,
+	interpreter/diffeq.txi, interpreter/dynamic.txi, interpreter/emacs.txi,
+	interpreter/errors.txi, interpreter/eval.txi, interpreter/expr.txi,
+	interpreter/func.txi, interpreter/image.txi, interpreter/install.txi,
+	interpreter/interp.txi, interpreter/intro.txi, interpreter/io.txi,
+	interpreter/linalg.txi, interpreter/matrix.txi, interpreter/nonlin.txi,
+	interpreter/numbers.txi, interpreter/optim.txi,
+	interpreter/package.txi, interpreter/plot.txi, interpreter/poly.txi,
+	interpreter/quad.txi, interpreter/sparse.txi, interpreter/stmt.txi,
+	interpreter/strings.txi, interpreter/testfun.txi, interpreter/tips.txi,
+	interpreter/var.txi: Grammarcheck .txi documentation files.
+
 2010-07-21  Jaroslav Hajek  <highegg@gmail.com>
 
 	* interpreter/tips.txi: Update some tips.
 
 2010-07-19  Rik <octave@nomad.inbox5.com>
 
 	* interpreter/mk_doc_cache.m: Use regexp rather than fussing with
 	character arrays.
diff --git a/doc/interpreter/arith.txi b/doc/interpreter/arith.txi
--- a/doc/interpreter/arith.txi
+++ b/doc/interpreter/arith.txi
@@ -18,17 +18,17 @@
 @c <http://www.gnu.org/licenses/>.
 
 @node Arithmetic
 @chapter Arithmetic
 
 Unless otherwise noted, all of the functions described in this chapter
 will work for real and complex scalar, vector, or matrix arguments.  Functions
 described as @dfn{mapping functions} apply the given operation individually to 
-each element when given a matrix argument.  For example,
+each element when given a matrix argument.  For example:
 
 @example
 @group
 sin ([1, 2; 3, 4])
      @result{}  0.84147   0.90930
          0.14112  -0.75680
 @end group
 @end example
@@ -145,16 +145,17 @@ angle in degrees.
 @DOCSTRING(acoth)
 
 @DOCSTRING(atan2)
 
 Octave provides the following trigonometric functions where angles are
 specified in degrees.  These functions produce true zeros at the appropriate
 intervals rather than the small round-off error that occurs when using
 radians.  For example:
+
 @example
 @group
 cosd (90)
      @result{} 0
 cos (pi/2)
      @result{} 6.1230e-17
 @end group
 @end example
diff --git a/doc/interpreter/audio.txi b/doc/interpreter/audio.txi
--- a/doc/interpreter/audio.txi
+++ b/doc/interpreter/audio.txi
@@ -19,17 +19,17 @@
 @c Written by Kurt Hornik <Kurt.Hornik@wu-wien.ac.at> on 1996/05/14
 
 @node Audio Processing
 @chapter Audio Processing
 
 Octave provides a few functions for dealing with audio data.  An audio
 `sample' is a single output value from an A/D converter, i.e., a small
 integer number (usually 8 or 16 bits), and audio data is just a series
-of such samples.  It can be characterized by three parameters:  the
+of such samples.  It can be characterized by three parameters: the
 sampling rate (measured in samples per second or Hz, e.g., 8000 or
 44100), the number of bits per sample (e.g., 8 or 16), and the number of
 channels (1 for mono, 2 for stereo, etc.).
 
 There are many different formats for representing such data.  Currently,
 only the two most popular, @emph{linear encoding} and @emph{mu-law
 encoding}, are supported by Octave.  There is an excellent FAQ on audio
 formats by Guido van Rossum @email{guido@@cwi.nl} which can be found at any
diff --git a/doc/interpreter/basics.txi b/doc/interpreter/basics.txi
--- a/doc/interpreter/basics.txi
+++ b/doc/interpreter/basics.txi
@@ -75,67 +75,67 @@ accepts.
 Enter parser debugging mode.  Using this option will cause Octave's
 parser to print a lot of information about the commands it reads, and is
 probably only useful if you are actually trying to debug the parser.
 
 @item --doc-cache-file @var{filename}
 @cindex @code{--doc-cache-file @var{filename}}
 Specify the name of the doc cache file to use.  The value of @var{filename}
 specified on the command line will override any value of
-@w{@code{OCTAVE_DOC_CACHE_FILE}} found in the environment, but not any commands
+@w{@env{OCTAVE_DOC_CACHE_FILE}} found in the environment, but not any commands
 in the system or user startup files that use the @code{doc_cache_file}
 function.
 
 @item  --echo-commands
 @itemx -x
 @cindex @code{--echo-commands}
 @cindex @code{-x}
 Echo commands as they are executed.
 
 @item --eval @var{code}
-Evaluate @var{code} and exit when finished unless @code{--persist} is also
+Evaluate @var{code} and exit when finished unless @option{--persist} is also
 specified.
 
 @item --exec-path @var{path}
 @cindex @code{--exec-path @var{path}}
 Specify the path to search for programs to run.  The value of @var{path}
 specified on the command line will override any value of
-@w{@code{OCTAVE_EXEC_PATH}} found in the environment, but not any commands
+@w{@env{OCTAVE_EXEC_PATH}} found in the environment, but not any commands
 in the system or user startup files that set the built-in variable
-@w{@code{EXEC_PATH}}.
+@w{@env{EXEC_PATH}}.
 
 @item  --help
 @itemx -h
 @itemx -?
 @cindex @code{--help}
 @cindex @code{-h}
 @cindex @code{-?}
 Print short help message and exit.
 
 @item --image-path @var{path}
 @cindex @code{--image-path @var{path}}
 Add path to the head of the search path for images.  The value of 
 @var{path} specified on the command line will override any value of 
-@w{@code{OCTAVE_IMAGE_PATH}} found in the environment, but not any commands 
+@w{@env{OCTAVE_IMAGE_PATH}} found in the environment, but not any commands 
 in the system or user startup files that set the built-in variable 
-@w{@code{IMAGE_PATH}}.
+@w{@env{IMAGE_PATH}}.
 
 @item --info-file @var{filename}
 @cindex @code{--info-file @var{filename}}
 Specify the name of the info file to use.  The value of @var{filename}
 specified on the command line will override any value of
-@w{@code{OCTAVE_INFO_FILE}} found in the environment, but not any commands
+@w{@env{OCTAVE_INFO_FILE}} found in the environment, but not any commands
 in the system or user startup files that use the @code{info_file}
 function.
 
 @item --info-program @var{program}
 @cindex @code{--info-program @var{program}}
 Specify the name of the info program to use.  The value of @var{program}
 specified on the command line will override any value of
-@w{@code{OCTAVE_INFO_PROGRAM}} found in the environment, but not any
+@w{@env{OCTAVE_INFO_PROGRAM}} found in the environment, but not any
 commands in the system or user startup files that use the
 @code{info_program} function.
 
 @item  --interactive
 @itemx -i
 @cindex @code{--interactive}
 @cindex @code{-i}
 Force interactive behavior.  This can be useful for running Octave via a
@@ -169,32 +169,32 @@ Disable command-line editing.
 @cindex @code{--no-site-file}
 Don't read the site-wide @file{octaverc} initialization files.
 
 @item  --norc
 @itemx -f
 @cindex @code{--norc}
 @cindex @code{-f}
 Don't read any of the system or user initialization files at startup.
-This is equivalent to using both of the options @code{--no-init-file}
-and @code{--no-site-file}.
+This is equivalent to using both of the options @option{--no-init-file}
+and @option{--no-site-file}.
 
 @item  --path @var{path}
 @itemx -p @var{path}
 @cindex @code{--path @var{path}}
 @cindex @code{-p @var{path}}
 Add path to the head of the search path for function files.  The 
 value of @var{path} specified on the command line will override any value
-of @w{@code{OCTAVE_PATH}} found in the environment, but not any commands in the
+of @w{@env{OCTAVE_PATH}} found in the environment, but not any commands in the
 system or user startup files that set the internal load path through one
 of the path functions.
 
 @item --persist
 @cindex @code{--persist}
-Go to interactive mode after @code{--eval} or reading from a file
+Go to interactive mode after @option{--eval} or reading from a file
 named on the command line.
 
 @item  --silent
 @itemx --quiet
 @itemx -q
 @cindex @code{--silent}
 @cindex @code{--quiet}
 @cindex @code{-q}
@@ -220,16 +220,17 @@ fixed_point_format              = true
 history_timestamp_format_string = "%%-- %D %I:%M %p --%%"
 page_screen_output              = false
 print_empty_dimensions          = false
 @end group
 @end example
 
 @noindent
 and disable the following warnings
+
 @example
 @group
 Octave:abbreviated-property-match
 Octave:fopen-file-in-path
 Octave:function-name-clash
 Octave:load-file-in-path
 @end group
 @end example
@@ -243,17 +244,17 @@ Turn on verbose output.
 @item  --version
 @itemx -v
 @cindex @code{--version}
 @cindex @code{-v}
 Print the program version number and exit.
 
 @item @var{file}
 Execute commands from @var{file}.  Exit when done unless
-@code{--persist} is also specified.
+@option{--persist} is also specified.
 @end table
 
 Octave also includes several functions which return information 
 about the command line, including the number of arguments and all of the
 options.
 
 @DOCSTRING(argv)
 
@@ -295,28 +296,28 @@ including function definitions.
 @item @var{octave-home}/share/octave/site/m/startup/octaverc
 @cindex site startup file
 where @var{octave-home} is the directory in which Octave is installed
 (the default is @file{/usr/local}).
 This file is provided so that changes to the default Octave environment 
 can be made globally for all users at your site for all versions of Octave
 you have installed.  Care should be taken when making changes to this file 
 since all users of Octave at your site will be affected.  The default file 
-may be overridden by the environment variable @w{@code{OCTAVE_SITE_INITFILE}}.
+may be overridden by the environment variable @w{@env{OCTAVE_SITE_INITFILE}}.
 
 @item @var{octave-home}/share/octave/@var{version}/m/startup/octaverc
 @cindex version startup file
 where @var{octave-home} is the directory in which Octave is
 installed (the default is @file{/usr/local}), and @var{version}
 is the version number of Octave.  This file is provided so that changes
 to the default Octave environment can be made globally for all users of
 a particular version of Octave.  Care should be taken when making
 changes to this file since all users of Octave at your site will be
 affected.  The default file may be overridden by the environment variable
-@w{@code{OCTAVE_VERSION_INITFILE}}.
+@w{@env{OCTAVE_VERSION_INITFILE}}.
 
 @item ~/.octaverc
 @cindex personal startup file
 @cindex @code{~/.octaverc}
 This file is used to make personal changes to the default 
 Octave environment.
 
 @item .octaverc
@@ -328,18 +329,18 @@ directory after it reads @file{~/.octave
 command in the @file{~/.octaverc} file will affect the directory where
 Octave searches for @file{.octaverc}.
 
 If you start Octave in your home directory, commands from the file
 @file{~/.octaverc} will only be executed once.
 @end table
 
 A message will be displayed as each of the startup files is read if you
-invoke Octave with the @code{--verbose} option but without the
-@code{--silent} option.
+invoke Octave with the @option{--verbose} option but without the
+@option{--silent} option.
 
 @node Quitting Octave
 @section Quitting Octave
 @cindex exiting octave
 @cindex quitting octave
 
 @DOCSTRING(quit)
 
@@ -988,16 +989,17 @@ typically hard to understand without the
 @cindex @samp{#}
 @cindex @samp{%}
 
 In the Octave language, a comment starts with either the sharp sign
 character, @samp{#}, or the percent symbol @samp{%} and continues to the
 end of the line.  Any text following the sharp sign or percent symbol is
 ignored by the Octave interpreter and not executed.  The following example
 shows whole line and partial line comments.
+
 @example
 @group
 function countdown
   # Count down for main rocket engines 
   disp(3);
   disp(2);
   disp(1);
   disp("Blast Off!");  # Rocket leaves pad
@@ -1010,16 +1012,17 @@ endfunction
 @cindex block comments
 @cindex multi-line comments
 @cindex @samp{#@{}
 @cindex @samp{%@{}
 
 Entire blocks of code can be commented by enclosing the code between 
 matching @samp{#@{} and @samp{#@}} or @samp{%@{} and @samp{%@}} markers.  
 For example,
+
 @example
 @group
 function quick_countdown
   # Count down for main rocket engines 
   disp(3);
  #@{
   disp(2);
   disp(1);
@@ -1039,16 +1042,17 @@ lines "@code{disp(2);}" and "@code{disp(
 @cindex documenting user scripts
 @cindex help, user-defined functions
 
 The @code{help} command (@pxref{Getting Help}) is able to find the first
 block of comments in a function and return those as a documentation
 string.  This means that the same commands used to get help
 on built-in functions are available for properly formatted user-defined
 functions.  For example, after defining the function @code{f} below,
+
 @example
 @group
 function xdot = f (x, t)
 
 # usage: f (x, t)
 #
 # This function defines the right-hand
 # side functions for a set of nonlinear
diff --git a/doc/interpreter/container.txi b/doc/interpreter/container.txi
--- a/doc/interpreter/container.txi
+++ b/doc/interpreter/container.txi
@@ -131,17 +131,17 @@ x
           @}
 
           c = string
         @}
 @end group
 @end example
 
 Note that when Octave prints the value of a structure that contains
-other structures, only a few levels are displayed.  For example,
+other structures, only a few levels are displayed.  For example:
 
 @example
 @group
 a.b.c.d.e = 1;
 a
      @result{} a =
         @{
           b =
@@ -196,17 +196,17 @@ f (rand (2) + rand (2) * I)
             0.040239  0.242160
             0.238081  0.402523
 
         @}
 @end group
 @end example
 
 Function return lists can include structure elements, and they may be
-indexed like any other variable.  For example,
+indexed like any other variable.  For example:
 
 @example
 [ x.u, x.s(2:3,2:3), x.v ] = svd ([1, 2; 3, 4]);
 x
      @result{} x =
         @{
           u =
 
@@ -280,17 +280,17 @@ x(1)
           a = string1
           b =  1
         @}
 @end group
 @end example
 
 Furthermore, the structure array can return a comma separated list of
 field values (@pxref{Comma Separated Lists}), if indexed by one of its
-own field names.  For example
+own field names.  For example:
 
 @example
 @group
 x.a
      @result{}
         ans = string1
         ans = string2
 @end group
@@ -304,17 +304,18 @@ left-hand side of an assignment:
 [x.a] = deal("new string1", "new string2");
  x(1).a
      @result{} ans = new string1
  x(2).a
      @result{} ans = new string2
 @end group
 @end example
 
-Just as for numerical arrays, it is possible to use vectors as indices (@pxref{Index Expressions}):
+Just as for numerical arrays, it is possible to use vectors as indices
+(@pxref{Index Expressions}):
 
 @example
 @group
 x(3:4) = x(1:2);
 [x([1,3]).a] = deal("other string1", "other string2");
 x.a
      @result{}
         ans = other string1
@@ -362,32 +363,32 @@ in.call1
 
 @node Creating Structures
 @subsection Creating Structures
 
 As well as indexing a structure with ".", Octave can create a structure
 with the @code{struct} command.  @code{struct} takes pairs of arguments,
 where the first argument in the pair is the fieldname to include in the
 structure and the second is a scalar or cell array, representing the
-values to include in the structure or structure array.  For example
+values to include in the structure or structure array.  For example:
 
 @example
 @group
 struct ("field1", 1, "field2", 2)
 @result{} ans =
       @{
         field1 =  1
         field2 =  2
       @}
 @end group
 @end example
 
 If the values passed to @code{struct} are a mix of scalar and cell
 arrays, then the scalar arguments are expanded to create a 
-structure array with a consistent dimension.  For example
+structure array with a consistent dimension.  For example:
 
 @example
 @group
 s = struct ("field1", @{1, "one"@}, "field2", @{2, "two"@},
         "field3", 3);
 s.field1
      @result{} 
         ans =  1
@@ -595,17 +596,17 @@ c = cell(2,2)
            [1,1] = [](0x0)
            [2,1] = [](0x0)
            [1,2] = [](0x0)
            [2,2] = [](0x0)
          @}
 @end group
 @end example
 
-Just like numerical arrays, cell arrays can be multidimensional.  The
+Just like numerical arrays, cell arrays can be multi-dimensional.  The
 @code{cell} function accepts any number of positive integers to describe
 the size of the returned cell array.  It is also possible to set the size
 of the cell array through a vector of positive integers.  In the
 following example two cell arrays of equal size are created, and the size
 of the first one is displayed
 
 @example
 @group
@@ -659,17 +660,17 @@ c(2,3)
 @end group
 @end example
 
 @noindent So with @samp{@{@}} you access elements of a cell
 array, while with @samp{()} you access a sub array of a cell
 array.
 
 Using the @samp{(} and @samp{)} operators, indexing works for cell
-arrays like for multidimensional arrays.  As an example, all the rows
+arrays like for multi-dimensional arrays.  As an example, all the rows
 of the first and third column of a cell array can be set to @code{0}
 with the following command:
 
 @example
 @group
 c(:, [1, 3]) = @{0@}
      @result{}  =
         @{
@@ -983,17 +984,17 @@ out = cell (4, 1);
 @end group
 @end example
 
 
 @node Comma Separated Lists Generated from Structure Arrays
 @subsection Comma Separated Lists Generated from Structure Arrays
 Structure arrays can equally be used to create comma separated
 lists.  This is done by addressing one of the fields of a structure
-array.  For example
+array.  For example:
 
 @example
 @group
 x = ceil (randn (10, 1)); 
 in = struct ("call1", @{x, 3, "last"@}, 
              "call2", @{x, inf, "first"@});
 out = struct ("call1", cell (2, 1), "call2", cell (2, 1));
 [out.call1] = find (in.call1);
diff --git a/doc/interpreter/contrib.txi b/doc/interpreter/contrib.txi
--- a/doc/interpreter/contrib.txi
+++ b/doc/interpreter/contrib.txi
@@ -45,16 +45,17 @@ sending it via e-mail to the octave-main
 source code management system currently used to develop Octave.  Other forms of 
 contributions (e.g., simple diff patches) are also acceptable, but they slow 
 down the review process.  If you want to make more contributions, you should 
 really get familiar with Mercurial.  A good place to start is 
 @url{http://www.selenic.com/mercurial/wiki/index.cgi/Tutorial}.  There you will
 also find help how to install Mercurial.
 
 A simple contribution sequence could look like this:
+
 @example
 @group
 hg clone http://www.octave.org/hg/octave
                              # make a local copy of the octave 
                              # source repository
 cd octave
 # change some sources@dots{}
 hg commit -m "make Octave the coolest software ever"
@@ -66,16 +67,17 @@ hg export -o ../cool.diff tip
 # send ../cool.diff via email
 @end group
 @end example
 
 You may want to get familiar with Mercurial queues to manage your changesets.
 Here is a slightly less simple example using Mercurial queues, where you work 
 on two unrelated changesets in parallel and update one of the changesets after 
 discussion in the maintainers mailing list:
+
 @example
 hg qnew nasty_bug            # create a new patch 
 # change sources@dots{}
 hg qref                      # save the changes into the patch
 # change even more@dots{}
 hg qref -m "solution to nasty bug!"
                              # save again with commit message
 hg export -o ../nasty.diff tip
@@ -154,37 +156,38 @@ explanation of why a change is needed sh
 code, particularly if there is something that might not be obvious to
 someone reading it later.
 
 The preferred comment mark for places that may need further attention is FIXME.
 
 @node Octave Sources (m-files)
 @section Octave Sources (m-files)
 
-Don't use tabs.  Tabs cause trouble.  If you are used to them, set up your editor
-so that it converts tabs to spaces.  Indent the bodies of the statement blocks.
-Recommended indent is 2 spaces.  When calling functions, put spaces after commas
-and before the calling parentheses, like this:
+Don't use tabs.  Tabs cause trouble.  If you are used to them, set up your
+editor so that it converts tabs to spaces.  Indent the bodies of the statement
+blocks.  Recommended indent is 2 spaces.  When calling functions, put spaces
+after commas and before the calling parentheses, like this:
 
 @example
   x = max (sin (y+3), 2);
 @end example
 
 @noindent
 An exception are matrix and vector constructors:
 
 @example
   [sin(x), cos(x)]
 @end example
 
 @noindent
 Here, putting spaces after @code{sin}, @code{cos} would result in a parse error.
 In indexing expression, do not put a space after the identifier (this
-differentiates indexing and function calls nicely).  The space after comma is not
-necessary if index expressions are simple, i.e., you may write
+differentiates indexing and function calls nicely).  The space after comma is
+not necessary if index expressions are simple, i.e., you may write
+
 @example
   A(:,i,j)
 @end example
 
 @noindent
 but 
 
 @example
@@ -217,18 +220,18 @@ for i = 1:n
   b(i) = sum (a(:,i));
 endfor
 @end group
 @end example
 
 @node C++ Sources
 @section C++ Sources
 
-Don't use tabs.  Tabs cause trouble.  If you are used to them, set up your editor
-so that it converts tabs to spaces.  Format function headers like this:
+Don't use tabs.  Tabs cause trouble.  If you are used to them, set up your
+editor so that it converts tabs to spaces.  Format function headers like this:
 
 @example
 @group
 static bool
 matches_patterns (const string_vector& patterns, int pat_idx,
                   int num_pat, const std::string& name)
 @end group
 @end example
@@ -256,19 +259,19 @@ else
 @end group
 @end example
 
 @noindent
 If you have nested @code{if} statements, use extra braces for extra
 clarification. 
 
 Split long expressions in such a way that a continuation line starts with an
-operator rather than identifier.  If the split occurs inside braces, continuation
-should be aligned with the first char after the innermost braces enclosing the
-split.  Example:
+operator rather than identifier.  If the split occurs inside braces,
+continuation should be aligned with the first char after the innermost braces
+enclosing the split.  Example:
 
 @example
 @group
 SVD::type type = ((nargout == 0 || nargout == 1)
                   ? SVD::sigma_only
                   : (nargin == 2) ? SVD::economy : SVD::std);
 @end group
 @end example
@@ -315,19 +318,19 @@ files.
 
 For C you should obviously follow all C++ rules that can apply.
 
 If you happen to modify a Fortran file, you should stay within Fortran 77
 with common extensions like @code{END DO}.  Currently, we want all sources
 to be compilable with the f2c and g77 compilers, without special flags if
 possible.  This usually means that non-legacy compilers also accept the sources.
 
-The M4 macro language is mainly used for Autoconf configuration files.  You should
-follow normal M4 rules when contributing to these files.  Some M4 files come
-from external source, namely the Autoconf archive
+The M4 macro language is mainly used for Autoconf configuration files.  You
+should follow normal M4 rules when contributing to these files.  Some M4 files
+come from external source, namely the Autoconf archive
 @url{http://autoconf-archive.cryp.to}.
 
 If you give a code example in the documentation written in Texinfo with the 
 @code{@@example} environment, you should be aware that the text within such an 
 environment will not be wrapped.  It is recommended that you keep the lines
 short enough to fit on pages in the generated pdf or ps documents.  Here is a 
 ruler (in an @code{@@example} environment) for finding the appropriate line 
 width:
diff --git a/doc/interpreter/debug.txi b/doc/interpreter/debug.txi
--- a/doc/interpreter/debug.txi
+++ b/doc/interpreter/debug.txi
@@ -79,17 +79,17 @@ function.
 @DOCSTRING(dbstop)
 
 @noindent
 Note that breakpoints cannot be set in built-in functions
 (e.g., @code{sin}, etc.) or dynamically loaded function (i.e., oct-files).  To
 set a breakpoint immediately on entering a function, the breakpoint
 should be set to line 1. The leading comment block will be ignored and
 the breakpoint will be set to the first executable statement in the
-function.  For example
+function.  For example:
 
 @example
 @group
 dbstop ("asind", 1)
 @result{} 27
 @end group
 @end example
 
@@ -102,17 +102,18 @@ be queried with the @code{dbstatus} func
 
 @noindent
 Taking the above as an example, @code{dbstatus ("asind")} should return
 27.  The breakpoints can then be cleared with the @code{dbclear} function
 
 @DOCSTRING(dbclear)
 
 @noindent
-These functions can be used to clear all the breakpoints in a function.  For example,
+These functions can be used to clear all the breakpoints in a function.  For
+example:
 
 @example
 dbclear ("asind", dbstatus ("asind"));
 @end example
 
 A breakpoint can be set in a subfunction.  For example if a file contains
 the functions
 
diff --git a/doc/interpreter/diagperm.txi b/doc/interpreter/diagperm.txi
--- a/doc/interpreter/diagperm.txi
+++ b/doc/interpreter/diagperm.txi
@@ -25,67 +25,69 @@
 * Function Support::     Functions That Are Aware of These Matrices
 * Example Codes::        Some Examples of Usage
 * Zeros Treatment::      The Differences in Treatment of Zero Elements
 @end menu
 
 @node Basic Usage
 @section Creating and Manipulating Diagonal and Permutation Matrices
 
-A diagonal matrix is defined as a matrix that has zero entries outside the main diagonal;
-that is, 
+A diagonal matrix is defined as a matrix that has zero entries outside the main
+diagonal; that is, 
 @tex
 $D_{ij} = 0$ if $i \neq j$
 @end tex
 @ifnottex
 @code{D(i,j) == 0} if @code{i != j}.
 @end ifnottex
-Most often, square diagonal matrices are considered; however, the definition can equally
-be applied to non-square matrices, in which case we usually speak of a rectangular diagonal 
-matrix.
+Most often, square diagonal matrices are considered; however, the definition can
+equally be applied to non-square matrices, in which case we usually speak of a
+rectangular diagonal matrix.
 
-A permutation matrix is defined as a square matrix that has a single element equal to unity
-in each row and each column; all other elements are zero.  That is, there exists a 
-permutation (vector) 
+A permutation matrix is defined as a square matrix that has a single element
+equal to unity in each row and each column; all other elements are zero.  That
+is, there exists a permutation (vector) 
 @tex
 $p$ such that $P_{ij}=1$ if $j = p_i$ and
 $P_{ij}=0$ otherwise.  
 @end tex
 @ifnottex
 @code{p} such that @code{P(i,j) == 1} if @code{j == p(i)} and 
 @code{P(i,j) == 0} otherwise.  
 @end ifnottex
 
-Octave provides special treatment of real and complex rectangular diagonal matrices,
-as well as permutation matrices.  They are stored as special objects, using efficient 
-storage and algorithms, facilitating writing both readable and efficient matrix algebra
-expressions in the Octave language.
+Octave provides special treatment of real and complex rectangular diagonal
+matrices, as well as permutation matrices.  They are stored as special objects,
+using efficient storage and algorithms, facilitating writing both readable and
+efficient matrix algebra expressions in the Octave language.
 
 @menu
 * Creating Diagonal Matrices::
 * Creating Permutation Matrices::
 * Explicit and Implicit Conversions::
 @end menu
 
 @node Creating Diagonal Matrices
 @subsection Creating Diagonal Matrices
 
-The most common and easiest way to create a diagonal matrix is using the built-in
-function @dfn{diag}.  The expression @code{diag (v)}, with @var{v} a vector,
-will create a square diagonal matrix with elements on the main diagonal given
-by the elements of @var{v}, and size equal to the length of @var{v}.
+The most common and easiest way to create a diagonal matrix is using the
+built-in function @dfn{diag}.  The expression @code{diag (v)}, with @var{v} a
+vector, will create a square diagonal matrix with elements on the main diagonal
+given by the elements of @var{v}, and size equal to the length of @var{v}.
 @code{diag (v, m, n)} can be used to construct a rectangular diagonal matrix.
 The result of these expressions will be a special diagonal matrix object, rather
 than a general matrix object.
 
 Diagonal matrix with unit elements can be created using @dfn{eye}.
-Some other built-in functions can also return diagonal matrices.  Examples include
+Some other built-in functions can also return diagonal matrices.  Examples
+include
 @dfn{balance} or @dfn{inv}.
 
 Example:
+
 @example
   diag (1:4)
 @result{}
 Diagonal Matrix
 
    1   0   0   0
    0   2   0   0
    0   0   3   0
@@ -105,29 +107,35 @@ Diagonal Matrix
 
 @node Creating Permutation Matrices
 @subsection Creating Permutation Matrices
 
 For creating permutation matrices, Octave does not introduce a new function, but
 rather overrides an existing syntax: permutation matrices can be conveniently
 created by indexing an identity matrix by permutation vectors.
 That is, if @var{q} is a permutation vector of length @var{n}, the expression
+
 @example
   P = eye (n) (:, q);
 @end example
+
 will create a permutation matrix - a special matrix object.
+
 @example
 eye (n) (q, :) 
 @end example
+
 will also work (and create a row permutation matrix), as well as 
+
 @example
 eye (n) (q1, q2).
 @end example
 
 For example:
+
 @example
 @group
   eye (4) ([1,3,2,4],:)
 @result{}
 Permutation Matrix
 
    1   0   0   0
    0   0   1   0
@@ -167,31 +175,32 @@ Diagonal Matrix
 Permutation Matrix
 
    1   0   0
    0   1   0
    0   0   1
 @end group
 @end example
 
-Some other built-in functions can also return permutation matrices.  Examples include
+Some other built-in functions can also return permutation matrices.  Examples
+include
 @dfn{inv} or @dfn{lu}.
 
 @node Explicit and Implicit Conversions
 @subsection Explicit and Implicit Conversions
 
-The diagonal and permutation matrices are special objects in their own right.  A number
-of operations and built-in functions are defined for these matrices to use special,
-more efficient code than would be used for a full matrix in the same place.  Examples
-are given in further sections.
+The diagonal and permutation matrices are special objects in their own right.  A
+number of operations and built-in functions are defined for these matrices to
+use special, more efficient code than would be used for a full matrix in the
+same place.  Examples are given in further sections.
 
 To facilitate smooth mixing with full matrices, backward compatibility, and
-compatibility with @sc{matlab}, the diagonal and permutation matrices should allow
-any operation that works on full matrices, and will either treat it specially,
-or implicitly convert themselves to full matrices.
+compatibility with @sc{matlab}, the diagonal and permutation matrices should
+allow any operation that works on full matrices, and will either treat it
+specially, or implicitly convert themselves to full matrices.
 
 Instances include matrix indexing, except for extracting a single element or
 a leading submatrix, indexed assignment, or applying most mapper functions,
 such as @dfn{exp}.
 
 An explicit conversion to a full matrix can be requested using the built-in
 function @dfn{full}.  It should also be noted that the diagonal and permutation
 matrix objects will cache the result of the conversion after it is first
@@ -217,32 +226,38 @@ are treated specially when performed on 
 Assume @var{D} is a diagonal matrix.  If @var{M} is a full matrix,
 then @code{D*M} will scale the rows of @var{M}.  That means,
 if @code{S = D*M}, then for each pair of indices
 i,j it holds 
 @tex
 $$S_{ij} = D_{ii} M_{ij}$$
 @end tex
 @ifnottex
+
 @example
 S(i,j) = D(i,i) * M(i,j).
 @end example
+
 @end ifnottex
 Similarly, @code{M*D} will do a column scaling.
 
 The matrix @var{D} may also be rectangular, m-by-n where @code{m != n}.
 If @code{m < n}, then the expression @code{D*M} is equivalent to
+
 @example
 D(:,1:m) * M(1:m,:),
 @end example
+
 i.e., trailing @code{n-m} rows of @var{M} are ignored.  If @code{m > n}, 
 then @code{D*M} is equivalent to 
+
 @example
 [D(1:n,n) * M; zeros(m-n, columns (M))],
 @end example
+
 i.e., null rows are appended to the result.
 The situation for right-multiplication @code{M*D} is analogous.
 
 The expressions @code{D \ M} and @code{M / D} perform inverse scaling.
 They are equivalent to solving a diagonal (or rectangular diagonal)
 in a least-squares minimum-norm sense.  In exact arithmetic, this is
 equivalent to multiplying by a pseudoinverse.  The pseudoinverse of
 a rectangular diagonal matrix is again a rectangular diagonal matrix
@@ -254,46 +269,53 @@ honor the above definition.  Note that a
 to ill-conditioning; otherwise, it would not be much useful for scaling.  This
 is typically consistent with linear algebra needs.  A full matrix that only
 happens to be diagonal (an is thus not a special object) is of course treated
 normally.
 
 Multiplication and division by diagonal matrices works efficiently also when
 combined with sparse matrices, i.e., @code{D*S}, where @var{D} is a diagonal
 matrix and @var{S} is a sparse matrix scales the rows of the sparse matrix and
-returns a sparse matrix.  The expressions @code{S*D}, @code{D\S}, @code{S/D} work
-analogically.
+returns a sparse matrix.  The expressions @code{S*D}, @code{D\S}, @code{S/D}
+work analogically.
 
 If @var{D1} and @var{D2} are both diagonal matrices, then the expressions
+
 @example
 @group
 D1 + D2
 D1 - D2 
 D1 * D2 
 D1 / D2 
 D1 \ D2
 @end group
 @end example
-again produce diagonal matrices, provided that normal
-dimension matching rules are obeyed.  The relations used are same as described above.
 
-Also, a diagonal matrix @var{D} can be multiplied or divided by a scalar, or raised
-to a scalar power if it is square, producing diagonal matrix result in all cases. 
+again produce diagonal matrices, provided that normal
+dimension matching rules are obeyed.  The relations used are same as described
+above.
+
+Also, a diagonal matrix @var{D} can be multiplied or divided by a scalar, or
+raised to a scalar power if it is square, producing diagonal matrix result in
+all cases. 
 
-A diagonal matrix can also be transposed or conjugate-transposed, giving the expected
-result.  Extracting a leading submatrix of a diagonal matrix, i.e., @code{D(1:m,1:n)},
-will produce a diagonal matrix, other indexing expressions will implicitly convert to
-full matrix.
+A diagonal matrix can also be transposed or conjugate-transposed, giving the
+expected result.  Extracting a leading submatrix of a diagonal matrix, i.e.,
+@code{D(1:m,1:n)}, will produce a diagonal matrix, other indexing expressions
+will implicitly convert to full matrix.
 
-Adding a diagonal matrix to a full matrix only operates on the diagonal elements.  Thus,
+Adding a diagonal matrix to a full matrix only operates on the diagonal
+elements.  Thus,
+
 @example
 A = A + eps * eye (n)
 @end example
-is an efficient method of augmenting the diagonal of a matrix.  Subtraction works
-analogically.
+
+is an efficient method of augmenting the diagonal of a matrix.  Subtraction
+works analogically.
 
 When involved in expressions with other element-by-element operators, @code{.*},
 @code{./}, @code{.\} or @code{.^}, an implicit conversion to full matrix will
 take place.  This is not always strictly necessary but chosen to facilitate
 better consistency with @sc{matlab}.
 
 @node Expressions Involving Permutation Matrices
 @subsection Expressions Involving Permutation Matrices
@@ -302,20 +324,23 @@ If @var{P} is a permutation matrix and @
 @code{P*M} will permute the rows of @var{M}.  Similarly, @code{M*P} will
 yield a column permutation. 
 Matrix division @code{P\M} and @code{M/P} can be used to do inverse permutation.
 
 The previously described syntax for creating permutation matrices can actually
 help an user to understand the connection between a permutation matrix and
 a permuting vector.  Namely, the following holds, where @code{I = eye (n)}
 is an identity matrix:
+
 @example
   I(p,:) * M = (I*M) (p,:) = M(p,:)
 @end example
+
 Similarly,
+
 @example
   M * I(:,p) = (M*I) (:,p) = M(:,p)
 @end example
 
 The expressions @code{I(p,:)} and @code{I(:,p)} are permutation matrices.
 
 A permutation matrix can be transposed (or conjugate-transposed, which is the
 same, because a permutation matrix is never complex), inverting the
@@ -324,24 +349,24 @@ column-permutation one.  For permutation
 inversion, thus @code{P\M} is equivalent to @code{P'*M}.  Transpose of a
 permutation matrix (or inverse) is a constant-time operation, flipping only a
 flag internally, and thus the choice between the two above equivalent
 expressions for inverse permuting is completely up to the user's taste.
 
 Multiplication and division by permutation matrices works efficiently also when
 combined with sparse matrices, i.e., @code{P*S}, where @var{P} is a permutation
 matrix and @var{S} is a sparse matrix permutes the rows of the sparse matrix and
-returns a sparse matrix.  The expressions @code{S*P}, @code{P\S}, @code{S/P} work
-analogically.
+returns a sparse matrix.  The expressions @code{S*P}, @code{P\S}, @code{S/P}
+work analogically.
 
-Two permutation matrices can be multiplied or divided (if their sizes match), performing
-a composition of permutations.  Also a permutation matrix can be indexed by a permutation
-vector (or two vectors), giving again a permutation matrix.
-Any other operations do not generally yield a permutation matrix and will thus
-trigger the implicit conversion.
+Two permutation matrices can be multiplied or divided (if their sizes match),
+performing a composition of permutations.  Also a permutation matrix can be
+indexed by a permutation vector (or two vectors), giving again a permutation
+matrix.  Any other operations do not generally yield a permutation matrix and
+will thus trigger the implicit conversion.
 
 @node Function Support
 @section Functions That Are Aware of These Matrices
 
 This section lists the built-in functions that are aware of diagonal and
 permutation matrices on input, or can return them as output.  Passed to other
 functions, these matrices will in general trigger an implicit conversion.
 (Of course, user-defined dynamically linked functions may also work with
@@ -381,43 +406,47 @@ sparse matrix.
 The @dfn{find} function will also work efficiently with a permutation matrix,
 making it possible to conveniently obtain the permutation indices.
 
 @node Example Codes
 @section Some Examples of Usage
 
 The following can be used to solve a linear system @code{A*x = b}
 using the pivoted LU factorization:
+
 @example
 @group
   [L, U, P] = lu (A); ## now L*U = P*A
   x = U \ L \ P*b;
 @end group
 @end example
 
 @noindent
 This is how you normalize columns of a matrix @var{X} to unit norm:
+
 @example
 @group
   s = norm (X, "columns");
   X = diag (s) \ X;
 @end group
 @end example
 
 @noindent
 The following expression is a way to efficiently calculate the sign of a
 permutation, given by a permutation vector @var{p}.  It will also work
 in earlier versions of Octave, but slowly.
+
 @example
   det (eye (length (p))(p, :))
 @end example
 
 @noindent
 Finally, here's how you solve a linear system @code{A*x = b} 
 with Tikhonov regularization (ridge regression) using SVD (a skeleton only):
+
 @example
 @group
   m = rows (A); n = columns (A);
   [U, S, V] = svd (A);
   ## determine the regularization factor alpha
   ## alpha = @dots{}
   ## transform to orthogonal basis
   b = U'*b;
@@ -462,28 +491,31 @@ actually performed anywhere by the under
 just assumed to be zero.  Equivalently, one can say that the part of the
 computation involving assumed zeros is performed symbolically, not numerically.
 
 This behavior not only facilitates the most straightforward and efficient
 implementation of algorithms, but also preserves certain useful invariants,
 like:
 @itemize
 @item scalar * diagonal matrix is a diagonal matrix
+
 @item sparse matrix / scalar preserves the sparsity pattern
+
 @item permutation matrix * matrix is equivalent to permuting rows
 @end itemize
 all of these natural mathematical truths would be invalidated by treating
 assumed zeros as numerical ones.
 
 Note that certain competing software does not strictly follow this principle
 and converts assumed zeros to numerical zeros in certain cases, while not doing
 so in other cases.  As of today, there are no intentions to mimic such behavior 
 in Octave.
 
 Examples of effects of assumed zeros vs. numerical zeros:
+
 @example
 Inf * eye (3)
 @result{}
    Inf     0     0
      0   Inf     0
      0     0   Inf
 
 Inf * speye (3)
diff --git a/doc/interpreter/diffeq.txi b/doc/interpreter/diffeq.txi
--- a/doc/interpreter/diffeq.txi
+++ b/doc/interpreter/diffeq.txi
@@ -45,16 +45,17 @@ The function @code{lsode} can be used to
 
 @example
 @group
 dx
 -- = f (x, t)
 dt
 @end group
 @end example
+
 @end ifnottex
 
 @noindent
 using Hindmarsh's ODE solver @sc{lsode}.
 
 
 
 @DOCSTRING(lsode)
@@ -117,40 +118,41 @@ The function @code{daspk} can be used to
  0 = f (\dot{x}, x, t), \qquad x(t=0) = x_0, \dot{x}(t=0) = \dot{x}_0
 $$
 @end tex
 @ifnottex
 
 @example
 0 = f (x-dot, x, t),    x(t=0) = x_0, x-dot(t=0) = x-dot_0
 @end example
+
 @end ifnottex
 
 @noindent
 where
 @tex
 $\dot{x} = {dx \over dt}$
 @end tex
 @ifnottex
 @math{x-dot}
 @end ifnottex
 is the derivative of @math{x}.  The equation is solved using Petzold's
-DAE solver @sc{Daspk}.
+DAE solver @sc{daspk}.
 
 @DOCSTRING(daspk)
 
 @DOCSTRING(daspk_options)
 
-Octave also includes @sc{Dassl}, an earlier version of @var{Daspk},
-and @var{dasrt}, which can be used to solve DAEs with constraints
+Octave also includes @sc{dassl}, an earlier version of @sc{daspk},
+and @sc{dasrt}, which can be used to solve DAEs with constraints
 (stopping conditions).
 
 @DOCSTRING(dassl)
 
 @DOCSTRING(dassl_options)
 
 @DOCSTRING(dasrt)
 
 @DOCSTRING(dasrt_options)
 
 See K. E. Brenan, et al., @cite{Numerical Solution of Initial-Value
 Problems in Differential-Algebraic Equations}, North-Holland (1989) for
-more information about the implementation of @sc{Dassl}.
+more information about the implementation of @sc{dassl}.
diff --git a/doc/interpreter/dynamic.txi b/doc/interpreter/dynamic.txi
--- a/doc/interpreter/dynamic.txi
+++ b/doc/interpreter/dynamic.txi
@@ -34,26 +34,29 @@ for key pieces of code.
 Before going further, you should first determine if you really need to
 use dynamically linked functions at all.  Before proceeding with writing
 any dynamically linked function to improve performance you should
 address ask yourself
 
 @itemize @bullet
 @item
 Can I get the same functionality using the Octave scripting language only?
+
 @item
 Is it thoroughly optimized Octave code?  Vectorization of Octave code,
 doesn't just make it concise, it generally significantly improves its
 performance.  Above all, if loops must be used, make sure that the
 allocation of space for variables takes place outside the loops using an
 assignment to a matrix of the right size, or zeros.
+
 @item
 Does it make as much use as possible of existing built-in library
 routines?  These are highly optimized and many do not carry the overhead
 of being interpreted.
+
 @item
 Does writing a dynamically linked function represent useful investment
 of your time, relative to staying in Octave?
 @end itemize
 
 Also, as oct- and mex-files are dynamically linked to Octave, they
 introduce the possibility of Octave crashing due to errors in
 the user code.  For example a segmentation violation in the user's code
@@ -91,17 +94,17 @@ will cause Octave to abort.
 @node Getting Started with Oct-Files
 @subsection Getting Started with Oct-Files
 
 The basic command to build oct-files is @code{mkoctfile} and it can be
 call from within octave or from the command line.
 
 @DOCSTRING(mkoctfile)
 
-Consider the short example
+Consider the short example:
 
 @example
 @group
 @EXAMPLEFILE(helloworld.cc)
 @end group
 @end example
 
 This example although short introduces the basics of writing a C++
@@ -110,32 +113,35 @@ make available most of the definitions t
 oct-file in Octave is to use the @code{#include <octave/oct.h>}
 header.
 
 The macro that defines the entry point into the dynamically loaded
 function is @w{@code{DEFUN_DLD}}.  This macro takes four arguments, these being
 
 @enumerate 1
 @item The function name as it will be seen in Octave,
+
 @item The list of arguments to the function of type @code{octave_value_list},
+
 @item The number of output arguments, which can and often is omitted if
 not used, and
+
 @item The string that will be seen as the help text of the function.
 @end enumerate
 
 The return type of functions defined with @w{@code{DEFUN_DLD}} is always
 @code{octave_value_list}.
 
 There are a couple of important considerations in the choice of function
 name.  Firstly, it must be a valid Octave function name and so must be a
 sequence of letters, digits and underscores, not starting with a
 digit.  Secondly, as Octave uses the function name to define the filename
-it attempts to find the function in, the function name in the @w{@code{DEFUN_DLD}}
-macro must match the filename of the oct-file.  Therefore, the above
-function should be in a file @file{helloworld.cc}, and it should be
+it attempts to find the function in, the function name in the
+@w{@code{DEFUN_DLD}} macro must match the filename of the oct-file.  Therefore,
+the above function should be in a file @file{helloworld.cc}, and it should be
 compiled to an oct-file using the command
 
 @example
 mkoctfile helloworld.cc
 @end example
 
 This will create a file called @file{helloworld.oct}, that is the compiled
 version of the function.  It should be noted that it is perfectly
@@ -162,39 +168,45 @@ helloworld (1, 2, 3)
 Octave supports a number of different array and matrix classes, the
 majority of which are based on the Array class.  The exception is the
 sparse matrix types discussed separately below.  There are three basic
 matrix types
 
 @table @code
 @item Matrix
 A double precision matrix class defined in dMatrix.h,
+
 @item ComplexMatrix
 A complex matrix class defined in CMatrix.h, and
+
 @item BoolMatrix
 A boolean matrix class defined in boolMatrix.h.
 @end table
 
 These are the basic two-dimensional matrix types of octave.  In
 additional there are a number of multi-dimensional array types, these
 being
 
 @table @code
 @item NDArray
 A double precision array class defined in @file{dNDArray.h}
+
 @item ComplexNDarray
 A complex array class defined in @file{CNDArray.h}
+
 @item boolNDArray
 A boolean array class defined in @file{boolNDArray.h}
+
 @item int8NDArray
 @itemx int16NDArray
 @itemx int32NDArray
 @itemx int64NDArray
 8, 16, 32 and 64-bit signed array classes defined in
 @file{int8NDArray.h}, @file{int16NDArray.h}, etc.
+
 @item uint8NDArray
 @itemx uint16NDArray
 @itemx uint32NDArray
 @itemx uint64NDArray
 8, 16, 32 and 64-bit unsigned array classes defined in
 @file{uint8NDArray.h}, @file{uint16NDArray.h}, etc.
 @end table
 
@@ -207,43 +219,45 @@ example
 We can create an empty matrix or array with the empty constructor.  For
 example
 
 @example
 Matrix a;
 @end example
 
 This can be used on all matrix and array types
+
 @item
 Define the dimensions of the matrix or array with a dim_vector.  For
 example
 
 @example
 @group
 dim_vector dv (2);
 dv(0) = 2; dv(1) = 2;
 Matrix a (dv);
 @end group
 @end example
 
 This can be used on all matrix and array types
+
 @item
-Define the number of rows and columns in the matrix.  For example
+Define the number of rows and columns in the matrix.  For example:
 
 @example
 Matrix a (2, 2)
 @end example
 
 However, this constructor can only be used with the matrix types.
 @end itemize
 
 These types all share a number of basic methods and operators, a
 selection of which include
 
-@deftypefn Method T& {operator ()} (octave_idx_type)
+@deftypefn  Method T& {operator ()} (octave_idx_type)
 @deftypefnx Method T& elem (octave_idx_type)
 The @code{()} operator or @code{elem} method allow the values of the
 matrix or array to be read or set.  These can take a single argument,
 which is of type @code{octave_idx_type}, that is the index into the matrix or
 array.  Additionally, the matrix type allows two argument versions of the
 @code{()} operator and elem method, giving the row and column index of the
 value to obtain or set.
 @end deftypefn
@@ -340,17 +354,17 @@ listed below.
 @item @code{uint32NDArray} @tab @code{uint32_array_value} @tab @file{uint32NDArray.h}
 @item @code{uint64NDArray} @tab @code{uint64_array_value} @tab @file{uint64NDArray.h}
 @end multitable
 
 @node Character Strings in Oct-Files
 @subsection Character Strings in Oct-Files
 
 In Octave a character string is just a special @code{Array} class.
-Consider the example 
+Consider the example:
 
 @example
 @EXAMPLEFILE(stringdemo.cc)
 @end example
 
 An example of the use of this function is
 
 @example
@@ -382,17 +396,17 @@ between single quoted and double quoted 
     else if (args(0).is_dq_string ())
       octave_stdout << 
         "First argument is a doubly quoted string\n";
 @end group
 @end example
 
 Note however, that both types of strings are represented by the
 @code{charNDArray} type, and so when assigning to an
-@code{octave_value}, the type of string should be specified.  For example
+@code{octave_value}, the type of string should be specified.  For example:
 
 @example
 @group
 octave_value_list retval;
 charNDArray c;
 @dots{}
 // Create single quoted string
 retval(1) = octave_value (ch, true, '\'');
@@ -478,18 +492,20 @@ elements of the structure array.
 @subsection Sparse Matrices in Oct-Files
 
 There are three classes of sparse objects that are of interest to the
 user.
 
 @table @code
 @item SparseMatrix
 A double precision sparse matrix class
+
 @item SparseComplexMatrix
 A complex sparse matrix class
+
 @item SparseBoolMatrix
 A boolean sparse matrix class
 @end table
 
 All of these classes inherit from the @code{Sparse<T>} template class,
 and so all have similar capabilities and usage.  The @code{Sparse<T>}
 class was based on Octave @code{Array<T>} class, and so users familiar
 with Octave's @code{Array} classes will be comfortable with the use of
@@ -787,17 +803,17 @@ should be avoided.
 
 @node Using Sparse Matrices in Oct-Files
 @subsubsection Using Sparse Matrices in Oct-Files
 
 Most of the same operators and functions on sparse matrices that are
 available from the Octave are equally available with oct-files.
 The basic means of extracting a sparse matrix from an @code{octave_value}
 and returning them as an @code{octave_value}, can be seen in the
-following example
+following example.
 
 @example
 @group
 octave_value_list retval;
 
 SparseMatrix sm = args(0).sparse_matrix_value ();
 SparseComplexMatrix scm = 
     args(1).sparse_complex_matrix_value ();
@@ -852,18 +868,21 @@ itself.  For example the @code{quad} fun
 calculates the definite integral by quadrature over a user supplied
 function.
 
 There are also many ways in which a function might be passed.  It might
 be passed as one of
 
 @enumerate 1
 @item Function Handle
+
 @item Anonymous Function Handle
+
 @item Inline Function
+
 @item String
 @end enumerate
 
 The example below demonstrates an example that accepts all four means of
 passing a function to an oct-file.
 
 @example
 @EXAMPLEFILE(funcdemo.cc)
@@ -1021,24 +1040,24 @@ underlying code imposes further constrai
 function call might be undefined if the input arguments are not
 integers, or if one of the arguments is zero.  Therefore, oct-files often
 need additional input parameter checking.
 
 There are several functions within Octave that might be useful for the
 purposes of parameter checking.  These include the methods of the
 octave_value class like @code{is_real_matrix}, etc., but equally include
 more specialized functions.  Some of the more common ones are
-demonstrated in the following example
+demonstrated in the following example.
 
 @example
 @EXAMPLEFILE(paramdemo.cc)
 @end example
 
 @noindent
-and an example of its use is
+An example of its use is:
 
 @example
 @group
 paramdemo ([1, 2, NaN, Inf])
 @result{} Properties of input array:
       includes Inf or NaN values
       includes other values than 1 and 0
       includes only int, Inf or NaN values
@@ -1048,41 +1067,41 @@ paramdemo ([1, 2, NaN, Inf])
 @node Exception and Error Handling in Oct-Files
 @subsection Exception and Error Handling in Oct-Files
 
 Another important feature of Octave is its ability to react to the user
 typing @kbd{Control-C} even during calculations.  This ability is based on the
 C++ exception handler, where memory allocated by the C++ new/delete
 methods are automatically released when the exception is treated.  When
 writing an oct-file, to allow Octave to treat the user typing @kbd{Control-C},
-the @w{@code{OCTAVE_QUIT}} macro is supplied.  For example
+the @w{@code{OCTAVE_QUIT}} macro is supplied.  For example:
 
 @example
 @group
 for (octave_idx_type i = 0; i < a.nelem (); i++)
   @{
     OCTAVE_QUIT;
     b.elem(i) = 2. * a.elem(i);
   @}
 @end group
 @end example
 
-The presence of the @w{@code{OCTAVE_QUIT}} macro in the inner loop allows Octave to
-treat the user request with the @kbd{Control-C}.  Without this macro, the user
-must either wait for the function to return before the interrupt is
+The presence of the @w{@code{OCTAVE_QUIT}} macro in the inner loop allows
+Octave to treat the user request with the @kbd{Control-C}.  Without this macro,
+the user must either wait for the function to return before the interrupt is
 processed, or press @kbd{Control-C} three times to force Octave to exit.
 
-The @w{@code{OCTAVE_QUIT}} macro does impose a very small speed penalty, and so for
-loops that are known to be small it might not make sense to include
+The @w{@code{OCTAVE_QUIT}} macro does impose a very small speed penalty, and so
+for loops that are known to be small it might not make sense to include
 @w{@code{OCTAVE_QUIT}}.
 
 When creating an oct-file that uses an external libraries, the function
 might spend a significant portion of its time in the external
-library.  It is not generally possible to use the @w{@code{OCTAVE_QUIT}} macro in
-this case.  The alternative in this case is
+library.  It is not generally possible to use the @w{@code{OCTAVE_QUIT}} macro
+in this case.  The alternative in this case is
 
 @example
 @group
 BEGIN_INTERRUPT_IMMEDIATELY_IN_FOREIGN_CODE;
 @dots{}  some code that calls a "foreign" function @dots{}
 END_INTERRUPT_IMMEDIATELY_IN_FOREIGN_CODE;
 @end group
 @end example
@@ -1098,17 +1117,17 @@ can also be used in oct-files.  In conju
 handling of Octave, it is important to enforce that certain code is run
 to allow variables, etc. to be restored even if an exception occurs.  An
 example of the use of this mechanism is
 
 @example
 @EXAMPLEFILE(unwinddemo.cc)
 @end example
 
-As can be seen in the example
+As can be seen in the example:
 
 @example
 @group
 unwinddemo (1, 0)
 @result{} Inf
 1 / 0
 @result{} warning: division by zero
    Inf
@@ -1125,17 +1144,17 @@ The documentation of an oct-file is the 
 @w{@code{DEFUN_DLD}} macro.  This string can be formatted in the same manner
 as the help strings for user functions (@ref{Documentation Tips}),
 however there are some issue that are particular to the formatting of
 help strings within oct-files.
 
 The major issue is that the help string will typically be longer than a
 single line of text, and so the formatting of long help strings need to
 be taken into account.  There are several manners in which to treat this
-issue, but the most common is illustrated in the following example
+issue, but the most common is illustrated in the following example,
 
 @example
 @group
 DEFUN_DLD (do_what_i_want, args, nargout, 
   "-*- texinfo -*-\n\
 @@deftypefn @{Function File@} @{@} do_what_i_say (@@var@{n@})\n\
 A function that does what the user actually wants rather\n\
 than what they requested.\n\
@@ -1223,17 +1242,17 @@ products, the use of the command @code{m
 @DOCSTRING(mexext)
 
 One important difference between the use of mex with other products and
 with Octave is that the header file "matrix.h" is implicitly included
 through the inclusion of "mex.h".  This is to avoid a conflict with the
 Octave file "Matrix.h" with operating systems and compilers that don't
 distinguish between filenames in upper and lower case
 
-Consider the short example
+Consider the short example:
 
 @example
 @group
 @EXAMPLEFILE(firstmexdemo.c)
 @end group
 @end example
 
 This simple example demonstrates the basics of writing a mex-file.  The
@@ -1333,17 +1352,17 @@ functions to create @code{mxArray} struc
 @code{mxCreateNumericArray}.
 
 The basic functions to access the data contained in an array is
 @code{mxGetPr}.  As the mex interface assumes that the real and imaginary
 parts of a complex array are stored separately, there is an equivalent
 function @code{mxGetPi} that get the imaginary part.  Both of these
 functions are for use only with double precision matrices.  There also
 exists the generic function @code{mxGetData} and @code{mxGetImagData}
-that perform the same operation on all matrix types.  For example
+that perform the same operation on all matrix types.  For example:
 
 @example
 @group
 mxArray *m;
 mwSize *dims;
 UINT32_T *pr;
 
 dims = (mwSize *) mxMalloc (2 * sizeof(mwSize));
diff --git a/doc/interpreter/emacs.txi b/doc/interpreter/emacs.txi
--- a/doc/interpreter/emacs.txi
+++ b/doc/interpreter/emacs.txi
@@ -36,17 +36,17 @@ useful in particular for debugging Octav
 
 Finally, you can convince Octave to use the Emacs info reader for
 @kbd{help -i}.
 
 All functionality is provided by the Emacs Lisp package EOS (for ``Emacs
 Octave Support'').  This chapter describes how to set up and use this
 package.
 
-Please contact <Kurt.Hornik@@wu-wien.ac.at> if you have any questions
+Please contact @email{Kurt.Hornik@@wu-wien.ac.at} if you have any questions
 or suggestions on using EOS.
 
 @menu
 * Installing EOS::              
 * Using Octave Mode::           
 * Running Octave From Within Emacs::  
 * Using the Emacs Info Reader for Octave::  
 @end menu
@@ -140,23 +140,23 @@ Break line at point and insert continuat
 Perform completion on Octave symbol preceding point, comparing that
 symbol against Octave's reserved words and built-in variables
 (@code{octave-complete-symbol}). 
 
 @item M-C-a
 Move backward to the beginning of a function
 (@code{octave-beginning-of-defun}).
 With prefix argument @var{N}, do it that many times if @var{N} is
-positive;  otherwise, move forward to the @var{N}-th following beginning
+positive; otherwise, move forward to the @var{N}-th following beginning
 of a function.
 
 @item M-C-e
 Move forward to the end of a function (@code{octave-end-of-defun}).
 With prefix argument @var{N}, do it that many times if @var{N} is
-positive;  otherwise, move back to the @var{N}-th preceding end of a
+positive; otherwise, move back to the @var{N}-th preceding end of a
 function.
 
 @item M-C-h
 Puts point at beginning and mark at the end of the current Octave
 function, i.e., the one containing point or following point
 (@code{octave-mark-defun}).
 
 @item M-C-q
@@ -189,17 +189,17 @@ negative).
 @item C-c C-n
 Move one line of Octave code forward, skipping empty and comment lines
 (@code{octave-next-code-line}).  With numeric prefix argument @var{N},
 move that many code lines forward (backward if @var{N} is negative).
 
 @item C-c C-a
 Move to the `real' beginning of the current line
 (@code{octave-beginning-of-line}).  If point is in an empty or comment
-line, simply go to its beginning;  otherwise, move backwards to the
+line, simply go to its beginning; otherwise, move backwards to the
 beginning of the first code line which is not inside a continuation
 statement, i.e., which does not follow a code line ending in @samp{...}
 or @samp{\}, or is inside an open parenthesis list.
 
 @item C-c C-e
 Move to the `real' end of the current line (@code{octave-end-of-line}).
 If point is in a code line, move forward to the end of the first Octave
 code line which does not end in @samp{...} or @samp{\} or is inside an
@@ -216,17 +216,17 @@ negative).
 Move back across one balanced begin-end block of Octave code
 (@code{octave-backward-block}).  With numeric prefix argument @var{N},
 move backward across @var{N} such blocks (forward if @var{N} is
 negative).
 
 @item C-c M-C-d
 Move forward down one begin-end block level of Octave code
 (@code{octave-down-block}).  With numeric prefix argument, do it that
-many times;  a negative argument means move backward, but still go down
+many times; a negative argument means move backward, but still go down
 one level.
 
 @item C-c M-C-u
 Move backward out of one begin-end block level of Octave code
 (@code{octave-backward-up-block}).  With numeric prefix argument, do it
 that many times; a negative argument means move forward, but still to a
 less deep spot.
 
@@ -263,17 +263,17 @@ in one of your Emacs startup files.
 
 @end table
 
 A common problem is that the @key{RET} key does @emph{not} indent the
 line to where the new text should go after inserting the newline.  This
 is because the standard Emacs convention is that @key{RET} (aka
 @kbd{C-m}) just adds a newline, whereas @key{LFD} (aka @kbd{C-j}) adds a
 newline and indents it.  This is particularly inconvenient for users with
-keyboards which do not have a special @key{LFD} key at all;  in such
+keyboards which do not have a special @key{LFD} key at all; in such
 cases, it is typically more convenient to use @key{RET} as the @key{LFD}
 key (rather than typing @kbd{C-j}).  
 
 You can make @key{RET} do this by adding
 @lisp
 (define-key octave-mode-map "\C-m"
   'octave-reindent-then-newline-and-indent)
 @end lisp
@@ -285,17 +285,17 @@ solution is
   (let ((x (key-binding "\C-j")))
     (local-set-key "\C-m" x)))
 (add-hook 'octave-mode-hook 'RET-behaves-as-LFD)
 @end lisp
 @noindent
 (this works for all modes by adding to the startup hooks, without having
 to know the particular binding of @key{RET} in that mode!).  Similar
 considerations apply for using @key{M-RET} as @key{M-LFD}.  As Barry
-A. Warsaw <bwarsaw@@cnri.reston.va.us> says in the documentation for his
+A. Warsaw @email{bwarsaw@@cnri.reston.va.us} says in the documentation for his
 @code{cc-mode}, ``This is a very common question.  @code{:-)} If you want
 this to be the default behavior, don't lobby me, lobby RMS!''
 
 The following variables can be used to customize Octave mode.
 
 @table @code
 @item octave-auto-indent
 Non-@code{nil} means auto-indent the current line after a semicolon or
@@ -328,25 +328,29 @@ If @code{t} (default), a startup message
 is called.
 
 @end table
 
 If Font Lock mode is enabled, Octave mode will display
 @itemize @bullet
 @item
 strings in @code{font-lock-string-face}
+
 @item
 comments in @code{font-lock-comment-face}
+
 @item
 the Octave reserved words (such as all block keywords) and the text
 functions (such as @samp{cd} or @samp{who}) which are also reserved
 using @code{font-lock-keyword-face}
+
 @item
 the built-in operators (@samp{&&}, @samp{==}, @dots{}) using
 @code{font-lock-reference-face}
+
 @item
 and the function names in function declarations in
 @code{font-lock-function-name-face}.
 @end itemize
 
 There is also rudimentary support for Imenu (currently, function names
 can be indexed).
 
@@ -400,31 +404,37 @@ following commands.
 
 @table @kbd
 @item C-c i l
 Send the current line to the inferior Octave process
 (@code{octave-send-line}).
 With positive prefix argument @var{N}, send that many lines.
 If @code{octave-send-line-auto-forward} is non-@code{nil}, go to the
 next unsent code line.
+
 @item C-c i b
 Send the current block to the inferior Octave process
 (@code{octave-send-block}).
+
 @item C-c i f
 Send the current function to the inferior Octave process
 (@code{octave-send-defun}).
+
 @item C-c i r
 Send the region to the inferior Octave process
 (@code{octave-send-region}).
+
 @item C-c i s
 Make sure that `inferior-octave-buffer' is displayed
 (@code{octave-show-process-buffer}).
+
 @item C-c i h
 Delete all windows that display the inferior Octave buffer
 (@code{octave-hide-process-buffer}).
+
 @item C-c i k
 Kill the inferior Octave process and its buffer
 (@code{octave-kill-process}).
 @end table
 
 The effect of the commands which send code to the Octave process can be
 customized by the following variables.
 @table @code
@@ -442,17 +452,17 @@ If you send code and there is no inferio
 started automatically.
 
 The startup of the inferior Octave process is highly customizable.
 The variable @code{inferior-octave-startup-args} can be used for
 specifying command lines arguments to be passed to Octave on startup
 as a list of strings.  For example, to suppress the startup message and
 use `traditional' mode, set this to @code{'("-q" "--traditional")}.
 You can also specify a startup file of Octave commands to be loaded on
-startup;  note that these commands will not produce any visible output
+startup; note that these commands will not produce any visible output
 in the process buffer.  Which file to use is controlled by the variable
 @code{inferior-octave-startup-file}.  If this is @code{nil}, the file
 @file{~/.emacs-octave} is used if it exists.
 
 And finally, @code{inferior-octave-mode-hook} is run after starting the
 process and putting its buffer into Inferior Octave mode.  Hence, if you
 like the up and down arrow keys to behave in the interaction buffer as
 in the shell, and you want this buffer to use nice colors, add
diff --git a/doc/interpreter/errors.txi b/doc/interpreter/errors.txi
--- a/doc/interpreter/errors.txi
+++ b/doc/interpreter/errors.txi
@@ -80,16 +80,17 @@ When the @code{print_usage} function is 
 of the function calling @code{print_usage}, and presents a useful error.
 If the help text is written in Texinfo it is possible to present an
 error message that only contains the function prototypes as described
 by the @code{@@deftypefn} parts of the help text.  When the help text
 isn't written in Texinfo, the error message contains the entire help
 message.
 
 Consider the following function.
+
 @example
 @group
 ## -*- texinfo -*-
 ## @@deftypefn @{Function File@} f (@@var@{arg1@})
 ## Function help text goes here@dots{}
 ## @@end deftypefn
 function f (arg1)
   if (nargin == 0)
diff --git a/doc/interpreter/eval.txi b/doc/interpreter/eval.txi
--- a/doc/interpreter/eval.txi
+++ b/doc/interpreter/eval.txi
@@ -106,17 +106,17 @@ new symbol table.
 
 Sometimes you want to write a function so that when you
 call it, it modifies variables in your own context.  This
 allows you to use a pass-by-name style of function,
 which is similar to using a pointer in programming languages such
 as C.
 
 Consider how you might write @code{save} and @code{load} as
-m-files.  For example,
+m-files.  For example:
 
 @example
 @group
 function create_data
   x = linspace (0, 10, 10);
   y = sin (x);
   save mydata x y
 endfunction
diff --git a/doc/interpreter/expr.txi b/doc/interpreter/expr.txi
--- a/doc/interpreter/expr.txi
+++ b/doc/interpreter/expr.txi
@@ -55,27 +55,29 @@ elements of a matrix or vector.
 Indices may be scalars, vectors, ranges, or the special operator
 @samp{:}, which may be used to select entire rows or columns.
 
 Vectors are indexed using a single index expression.  Matrices may be
 indexed using one or two indices.  When using a single index
 expression, the elements of the matrix are taken in column-first order;
 the dimensions of the output match those of the index expression.  For
 example,
+
 @example
 @group
 a (2)       # a scalar
 a (1:2)     # a row vector
 a ([1; 2])  # a column vector
 @end group
 @end example
 
 As a special case, when a colon is used as a single index, the output
 is a column vector containing all the elements of the vector or matrix.
-For example
+For example:
+
 @example
 a (:)       # a column vector
 @end example
 
 Given the matrix
 
 @example
 a = [1, 2; 3, 4]
@@ -92,21 +94,21 @@ a (1, :)
 @end group
 @end example
 
 @noindent
 and select the first row of the matrix.
 
 In general, an array with @samp{n} dimensions can be indexed using @samp{m}
 indices.  If @code{n == m}, each index corresponds to its respective dimension.
-The set of index tuples determining the result is formed by the Cartesian product
-of the index vectors (or ranges or scalars).
-If @code{n < m}, then the array is padded by trailing singleton dimensions.
-If @code{n > m}, the last @code{n-m+1} dimensions are folded into a single
-dimension with extent equal to product of extents of the original dimensions.
+The set of index tuples determining the result is formed by the Cartesian
+product of the index vectors (or ranges or scalars).  If @code{n < m}, then the
+array is padded by trailing singleton dimensions.  If @code{n > m}, the last
+@code{n-m+1} dimensions are folded into a single dimension with extent equal to
+product of extents of the original dimensions.
 
 @c FIXED -- sections on variable prefer_zero_one_indexing were removed
 
 Indexing a scalar with a vector of ones can be used to create a
 vector the same size as the index vector, with each element equal to
 the value of the original scalar.  For example, the following statements
 
 @example
@@ -137,18 +139,18 @@ The last example could also be written a
 @example
 @group
 13 (ones (2, 3))
 @end group
 @end example
 
 It should be, noted that @code{ones (1, n)} (a row vector of ones) results in a
 range (with zero increment), and is therefore more efficient when used in index
-expression than other forms of @dfn{ones}.  In particular, when @samp{r} is a row
-vector, the expressions
+expression than other forms of @dfn{ones}.  In particular, when @samp{r} is a
+row vector, the expressions
 
 @example
   r(ones (1, n), :)
 @end example
 
 @example
   r(ones (n, 1), :)
 @end example
@@ -494,17 +496,17 @@ returns @var{x} raised to the power @var
 expansion.  If @var{x} is a square matrix, the result is computed by
 repeated multiplication if @var{y} is an integer, and by an eigenvalue
 expansion if @var{y} is not an integer.  An error results if both
 @var{x} and @var{y} are matrices.
 
 The implementation of this operator needs to be improved.
 
 @item @var{x} .^ @var{y}
-@item @var{x} .** @var{y}
+@itemx @var{x} .** @var{y}
 @opindex .**
 @opindex .^
 Element by element power operator.  If both operands are matrices, the
 number of rows and columns must both agree.
 
 @item -@var{x}
 @opindex -
 Negation.
@@ -570,17 +572,17 @@ useful in this case.
 @cindex equality, tests for
 
 @dfn{Comparison operators} compare numeric values for relationships
 such as equality.  They are written using
 @emph{relational operators}.
 
 All of Octave's comparison operators return a value of 1 if the
 comparison is true, or 0 if it is false.  For matrix values, they all
-work on an element-by-element basis.  For example,
+work on an element-by-element basis.  For example:
 
 @example
 @group
 [1, 2; 3, 4] == [1, 3; 2, 4]
      @result{}  1  0
          0  1
 @end group
 @end example
@@ -615,24 +617,27 @@ True if @var{x} is greater than @var{y}.
 @opindex !=
 @opindex ~=
 True if @var{x} is not equal to @var{y}.
 @end table
 
 For complex numbers, the following ordering is defined:
 @var{z1} < @var{z2}
 iff
+
 @example
 @group
   abs(@var{z1}) < abs(@var{z2}) 
   || (abs(@var{z1}) == abs(@var{z2}) && arg(@var{z1}) < arg(@var{z2}))
 @end group
 @end example
-This is consistent with the ordering used by @dfn{max}, @dfn{min} and @dfn{sort},
-but is not consistent with @sc{matlab}, which only compares the real parts.
+
+This is consistent with the ordering used by @dfn{max}, @dfn{min} and
+@dfn{sort}, but is not consistent with @sc{matlab}, which only compares the real
+parts.
 
 String comparisons may also be performed with the @code{strcmp}
 function, not with the comparison operators listed above.
 @xref{Strings}.
 
 @DOCSTRING(isequal)
 
 @DOCSTRING(isequalwithequalnans)
@@ -1004,18 +1009,18 @@ anywhere:
 @example
 @group
 [~, s, v] = svd (a);
 @end group
 @end example
 
 This is cleaner and more memory efficient than using a dummy variable.
 The @code{nargout} value for the right-hand side expression is not affected.
-If the assignment is used as an expression, the return value is a comma-separated list
-with the ignored values dropped.
+If the assignment is used as an expression, the return value is a
+comma-separated list with the ignored values dropped.
 
 @opindex +=
 A very common programming pattern is to increment an existing variable
 with a given value, like this
 
 @example
 a = a + 2;
 @end example
diff --git a/doc/interpreter/func.txi b/doc/interpreter/func.txi
--- a/doc/interpreter/func.txi
+++ b/doc/interpreter/func.txi
@@ -345,17 +345,17 @@ along with a warning.
 @anchor{doc-varargin} @anchor{doc-varargout}
 @node Variable-length Argument Lists
 @section Variable-length Argument Lists
 @cindex variable-length argument lists
 @cindex @code{varargin}
 
 Sometimes the number of input arguments is not known when the function
 is defined.  As an example think of a function that returns the smallest
-of all its input arguments.  For example,
+of all its input arguments.  For example:
 
 @example
 @group
 a = smallest (1, 2, 3);
 b = smallest (1, 2, 3, 4);
 @end group
 @end example
 
@@ -435,19 +435,19 @@ print_arguments (1, "two", 3);
 @end group
 @end example
 
 @DOCSTRING(parseparams)
 
 @node Ignoring Arguments
 @section Ignoring Arguments
 
-In the formal argument list, it is possible to use the dummy placeholder @code{~}
-instead of a name.  This indicates that the corresponding argument value should be ignored
-and not stored to any variable.
+In the formal argument list, it is possible to use the dummy placeholder
+@code{~} instead of a name.  This indicates that the corresponding argument
+value should be ignored and not stored to any variable.
 
 @example
 @group
 function val = pick2nd (~, arg2)
   val = arg2;
 endfunction
 @end group
 @end example
@@ -563,45 +563,49 @@ endfunction
 @end example
 
 @noindent
 If no value is assigned to @var{arg1} by the user, it will have the
 value @var{val1}.
 
 As an example, the following function implements a variant of the classic
 ``Hello, World'' program.
+
 @example
 @group
 function hello (who = "World")
   printf ("Hello, %s!\n", who);
 endfunction
 @end group
 @end example
 
 @noindent
 When called without an input argument the function prints the following
+
 @example
 @group
 hello ();
      @print{} Hello, World!
 @end group
 @end example
 
 @noindent
 and when it's called with an input argument it prints the following
+
 @example
 @group
 hello ("Beautiful World of Free Software");
      @print{} Hello, Beautiful World of Free Software!
 @end group
 @end example
 
 Sometimes it is useful to explicitly tell Octave to use the default value
 of an input argument.  This can be done writing a @samp{:} as the value
 of the input argument when calling the function.
+
 @example
 @group
 hello (:);
      @print{} Hello, World!
 @end group
 @end example
 
 @node Function Files
@@ -754,17 +758,17 @@ In many cases one function needs to acce
 functions.  If the helper function is limited to the scope of a single
 function, then subfunctions as discussed above might be used.  However,
 if a single helper function is used by more than one function, then
 this is no longer possible.  In this case the helper functions might
 be placed in a subdirectory, called "private", of the directory in which
 the functions needing access to this helper function are found.
 
 As a simple example, consider a function @code{func1}, that calls a helper
-function @code{func2} to do much of the work.  For example
+function @code{func2} to do much of the work.  For example:
 
 @example
 @group
 function y = func1 (x)
   y = func2 (x);
 endfunction
 @end group
 @end example
@@ -776,35 +780,35 @@ then @code{func2} is only available for 
 @code{func1}, that are found in @code{<directory>}.
 
 @node Overloading and Autoloading
 @subsection Overloading and Autoloading
 
 The @code{dispatch} function can be used to alias one function name to
 another.  It can be used to alias all calls to a particular function name
 to another function, or the alias can be limited to only a particular
-variable type.  Consider the example
+variable type.  Consider the example,
 
 @example
 @group
 function y = spsin (x)
   printf ("Calling spsin\n");
   fflush(stdout);
   y = spfun ("sin", x);
 endfunction
 
 dispatch ("sin", "spsin", "sparse matrix");
 y0 = sin(eye(3));
 y1 = sin(speye(3));
 @end group
 @end example
 
 @noindent
-which aliases the user-defined function @code{spsin} to @code{sin}, but only for real sparse
-matrices.  Note that the builtin @code{sin} already correctly treats
+which aliases the user-defined function @code{spsin} to @code{sin}, but only for
+real sparse matrices.  Note that the builtin @code{sin} already correctly treats
 sparse matrices and so this example is only illustrative.
 
 @DOCSTRING(dispatch)
 
 @DOCSTRING(builtin)
 
 A single dynamically linked file might define several
 functions.  However, as Octave searches for functions based on the
@@ -1071,42 +1075,42 @@ should be minimized.
 A function handle is a pointer to another function and is defined with
 the syntax
 
 @example
 @@@var{function-name}
 @end example
 
 @noindent
-For example
+For example,
 
 @example
 f = @@sin;
 @end example
 
 @noindent
-Creates a function handle called @code{f} that refers to the
+creates a function handle called @code{f} that refers to the
 function @code{sin}.
 
 Function handles are used to call other functions indirectly, or to pass
 a function as an argument to another function like @code{quad} or
-@code{fsolve}.  For example
+@code{fsolve}.  For example:
 
 @example
 @group
 f = @@sin;
 quad (f, 0, pi)
     @result{} 2
 @end group
 @end example
 
 You may use @code{feval} to call a function using function handle, or
 simply write the name of the function handle followed by an argument
 list.  If there are no arguments, you must use an empty argument list
-@samp{()}.  For example
+@samp{()}.  For example:
 
 @example
 @group
 f = @@sin;
 feval (f, pi/4)
     @result{} 0.70711
 f (pi/4)
     @result{} 0.70711
diff --git a/doc/interpreter/image.txi b/doc/interpreter/image.txi
--- a/doc/interpreter/image.txi
+++ b/doc/interpreter/image.txi
@@ -168,19 +168,19 @@ between 0 and 1.
 @DOCSTRING(white)
 
 @DOCSTRING(winter)
 
 @DOCSTRING(contrast)
 
 An additional colormap is @code{gmap40}.  This code map contains only
 colors with integer values of the red, green and blue components.  This
-is a workaround for a limitation of gnuplot 4.0, that does not allow the color of
-line or patch objects to be set, and so @code{gmap40} is useful for
-gnuplot 4.0 users, and in particular in conjunction with the @var{bar},
+is a workaround for a limitation of gnuplot 4.0, that does not allow the color
+of line or patch objects to be set, and so @code{gmap40} is useful for gnuplot
+4.0 users, and in particular in conjunction with the @var{bar},
 @var{barh} or @var{contour} functions.
 
 @DOCSTRING(gmap40)
 
 You may use the @code{spinmap} function to cycle through the colors in
 the current colormap, displaying the changes for the current figure.
 
 @DOCSTRING(spinmap)
diff --git a/doc/interpreter/install.txi b/doc/interpreter/install.txi
--- a/doc/interpreter/install.txi
+++ b/doc/interpreter/install.txi
@@ -88,83 +88,83 @@ systems it may be necessary to build sha
 dynamically linked functions.
 
 You may also want to build a shared version of @code{libstdc++}, if your
 system doesn't already have one.
 
 @item --enable-dl
 Use @code{dlopen} and friends to make Octave capable of dynamically
 linking externally compiled functions (this is the default if
-@code{--enable-shared} is specified).  This option only works on systems
+@option{--enable-shared} is specified).  This option only works on systems
 that actually have these functions.  If you plan on using this feature, you
-should probably also use @code{--enable-shared} to reduce the size of
+should probably also use @option{--enable-shared} to reduce the size of
 your @file{.oct} files.
 
 @item --without-blas
 Compile and use the generic @sc{blas} and @sc{lapack} versions included with
 Octave.  By default, configure first looks for @sc{blas} and @sc{lapack} matrix
 libraries on your system, including optimized @sc{blas} implementations such
 as the free ATLAS 3.0, as well as vendor-tuned libraries.  (The use of
 an optimized @sc{blas} will generally result in several-times faster matrix
 operations.)  Only use this option if your system has @sc{blas}/@sc{lapack}
 libraries that cause problems for some reason.  You can also use
-@code{--with-blas=lib} to specify a particular @sc{blas} library
+@option{--with-blas=lib} to specify a particular @sc{blas} library
  that configure doesn't check for automatically.
 
 @item --without-ccolamd
-Don't use CCOLAMD, disable some sparse matrix functionality.
+Don't use @sc{ccolamd}, disable some sparse matrix functionality.
 
 @item --without-colamd
-Don't use COLAMD, disable some sparse matrix functionality.
+Don't use @sc{colamd}, disable some sparse matrix functionality.
 
 @item --without-curl
 Don't use the cURL, disable the ftp objects, @code{urlread} and @code{urlwrite}
 functions.
 
 @item --without-cxsparse
-Don't use CXSPARSE, disable some sparse matrix functionality.
+Don't use @sc{cxsparse}, disable some sparse matrix functionality.
 
 @item --without-umfpack
 Don't use @sc{umfpack}, disable some sparse matrix functionality.
 
 @item --without-fftw
 Use the included @sc{fftpack} library instead of the @sc{fftw} library.
 
 @item --without-glpk
-Don't use the GLPK library for linear programming.
+Don't use the @sc{glpk} library for linear programming.
 
 @item --without-hdf5
-Don't use the HDF5 library for reading and writing HDF5 files.
+Don't use the @sc{hdf5} library for reading and writing @sc{hdf5} files.
 
 @item --without-zlib
 Don't use the zlib library, disable data file compression and support
 for recent MAT file formats.
 
 @item --without-lapack
 Compile and use the generic @sc{blas} and @sc{lapack} versions included with
 Octave.  By default, configure first looks for @sc{blas} and @sc{lapack} matrix
 libraries on your system, including optimized @sc{blas} implementations such
 as the free ATLAS 3.0, as well as vendor-tuned libraries.  (The use of
 an optimized @sc{blas} will generally result in several-times faster matrix
 operations.)  Only use this option if your system has @sc{blas}/@sc{lapack}
 libraries that cause problems for some reason.  You can also use
-@code{--with-blas=lib} to specify a particular @sc{blas} library
+@option{--with-blas=lib} to specify a particular @sc{blas} library
  that configure doesn't check for automatically.
 
 @item --without-framework-carbon
 Don't use framework Carbon headers, libraries and specific source code
 for compilation even if the configure test succeeds (the default value
-is @code{--with-framework-carbon}).  This is a platform specific configure
+is @option{--with-framework-carbon}).  This is a platform specific configure
 option for Mac systems.
 
 @item --without-framework-opengl
 Don't use framework OpenGL headers, libraries and specific source code
 for compilation even if the configure test succeeds.  If this option is
 given then OpenGL headers and libraries in standard system locations are
-tested (the default value is @code{--with-framework-opengl}).  This is a
+tested (the default value is @option{--with-framework-opengl}).  This is a
 platform specific configure option for Mac systems.
 
 @item --help
 Print a summary of the options recognized by the configure script.
 @end table
 
 See the file @file{INSTALL} for more general information about the 
 command line options used by configure.  That file also contains 
@@ -429,17 +429,17 @@ On NeXT systems, if you get errors like 
       symbol LBB7656
 /usr/tmp/cc007458.s:unknown:Undefined local
       symbol LBE7656
 @end group
 @end example
 
 @noindent
 when compiling @file{Array.cc} and @file{Matrix.cc}, try recompiling
-these files without @code{-g}.
+these files without @option{-g}.
 
 @item
 Some people have reported that calls to shell_cmd and the pager do not
 work on SunOS systems.  This is apparently due to having
 @w{@code{G_HAVE_SYS_WAIT}} defined to be 0 instead of 1 when compiling
 @code{libg++}.
 
 @item
@@ -451,17 +451,17 @@ following functions
 _tcgetattr
 _tcsetattr
 _tcflow
 @end group
 @end example
 
 @noindent
 which are part of @file{libposix.a}.  Unfortunately, linking Octave with
-@code{-posix} results in the following undefined symbols.
+@option{-posix} results in the following undefined symbols.
 
 @example
 @group
 .destructors_used
 .constructors_used
 _objc_msgSend
 _NXGetDefaultValue
 _NXRegisterDefaults
@@ -495,15 +495,15 @@ modify Octave's configuration script to 
 proper thing to do.
 
 @item
 If Octave is unable to find a header file because it is installed in a
 location that is not normally searched by the compiler, you can add the
 directory to the include search path by specifying (for example)
 @code{CPPFLAGS=-I/some/nonstandard/directory} as an argument to
 @code{configure}.  Other variables that can be specified this way are
-@code{CFLAGS}, @code{CXXFLAGS}, @code{FFLAGS}, and @code{LDFLAGS}.
+@env{CFLAGS}, @env{CXXFLAGS}, @env{FFLAGS}, and @env{LDFLAGS}.
 Passing them as options to the configure script also records them in the
-@file{config.status} file.  By default, @code{CPPFLAGS} and
-@code{LDFLAGS} are empty, @code{CFLAGS} and @code{CXXFLAGS} are set to
-@code{"-g -O"} and @code{FFLAGS} is set to @code{"-O"}.
+@file{config.status} file.  By default, @env{CPPFLAGS} and
+@env{LDFLAGS} are empty, @env{CFLAGS} and @env{CXXFLAGS} are set to
+@code{"-g -O"} and @env{FFLAGS} is set to @code{"-O"}.
 
 @end itemize
diff --git a/doc/interpreter/interp.txi b/doc/interpreter/interp.txi
--- a/doc/interpreter/interp.txi
+++ b/doc/interpreter/interp.txi
@@ -110,20 +110,22 @@ yp = sin (4*ti + 0.3) .* cos (3*ti - 0.1
 plot (ti, yp, 'g', ti, interp1(t, y, ti, 'spline'), 'b', ...
       ti, interpft (y, k), 'c', t, y, 'r+');
 legend ('sin(4t+0.3)cos(3t-0.1','spline','interpft','data');
 @end group
 @end example
 
 @noindent
 @ifinfo
-which demonstrates the poor behavior of Fourier interpolation for non-periodic functions.
+which demonstrates the poor behavior of Fourier interpolation for non-periodic
+functions.
 @end ifinfo
 @ifnotinfo
-which demonstrates the poor behavior of Fourier interpolation for non-periodic functions, as can be seen in @ref{fig:interpft}.
+which demonstrates the poor behavior of Fourier interpolation for non-periodic
+functions, as can be seen in @ref{fig:interpft}.
 
 @float Figure,fig:interpft
 @center @image{interpft,4in}
 @caption{Comparison of @code{interp1} and @code{interpft} for non-periodic data}
 @end float
 @end ifnotinfo
 
 In additional the support function @code{spline} and @code{lookup} that
@@ -141,23 +143,23 @@ in @ref{Interpolation on Scattered Data}
 
 @DOCSTRING(interp2)
 
 @DOCSTRING(interp3)
 
 @DOCSTRING(interpn)
 
 A significant difference between @code{interpn} and the other two
-multidimensional interpolation functions is the fashion in which the
+multi-dimensional interpolation functions is the fashion in which the
 dimensions are treated.  For @code{interp2} and @code{interp3}, the 'y'
 axis is considered to be the columns of the matrix, whereas the 'x'
 axis corresponds to the rows of the array.  As Octave indexes arrays in
 column major order, the first dimension of any array is the columns, and
 so @code{interpn} effectively reverses the 'x' and 'y' dimensions. 
-Consider the example
+Consider the example,
 
 @example
 @group
 x = y = z = -1:1;
 f = @@(x,y,z) x.^2 - y - z.^2;
 [xx, yy, zz] = meshgrid (x, y, z);
 v = f (xx,yy,zz);
 xi = yi = zi = -1:0.1:1;
diff --git a/doc/interpreter/intro.txi b/doc/interpreter/intro.txi
--- a/doc/interpreter/intro.txi
+++ b/doc/interpreter/intro.txi
@@ -192,49 +192,49 @@ This is conceptually equivalent to
 but avoids computing the inverse of a matrix directly.
 
 If the coefficient matrix is singular, Octave will print a warning
 message and compute a minimum norm solution.
 
 A simple example comes from chemistry and the need to obtain balanced 
 chemical equations.  Consider the burning of hydrogen and oxygen to 
 produce water.
-
 @tex
 $$ {\rm H_{2}} + {\rm O_{2}} \rightarrow {\rm H_{2}O} $$
 @end tex
 @ifnottex
+
 @example
 H2 + O2 --> H2O
 @end example
+
 @end ifnottex
-
 @noindent
 The equation above is not accurate.  The Law of Conservation of Mass requires 
 that the number of molecules of each type balance on the left- and right-hand 
 sides of the equation.  Writing the variable overall reaction with 
 individual equations for hydrogen and oxygen one finds:
-
 @tex
 \vbox{
 $$ x_{1}{\rm H_{2}} + x_{2}{\rm O_{2}} \rightarrow {\rm H_{2}O} $$
 $$ {\rm H:}\quad 2x_{1} + 0x_{2} \rightarrow 2 $$
 $$ {\rm O:}\quad 0x_{1} + 2x_{2} \rightarrow 1 $$
 }
 @end tex
 @ifnottex
+
 @example
 @group
 x1*H2 + x2*O2 --> H2O
 H: 2*x1 + 0*x2 --> 2
 O: 0*x1 + 2*x2 --> 1
 @end group
 @end example
+
 @end ifnottex
-
 @noindent
 The solution in Octave is found in just three steps.
 
 @example
 @group
 octave:1> A = [ 2, 0; 0, 2 ];
 octave:2> b = [ 2; 1 ];
 octave:3> x = A \ b
@@ -261,18 +261,18 @@ dt
 @end example
 
 @noindent
 with the initial condition
 
 @example
 x(t = t0) = x0
 @end example
+
 @end ifnottex
-
 @noindent
 For Octave to integrate equations of this form, you must first provide a
 definition of the function
 @tex
 $f (x, t)$.
 @end tex
 @ifnottex
 @code{f(x,t)}.
@@ -439,17 +439,17 @@ or form: @kbd{foo --bar --baz}.  Specifi
 in this font or form: @key{ANY}.
 
 @node Evaluation Notation
 @subsection Evaluation Notation
 @cindex evaluation notation
 @cindex documentation notation
 
 In the examples in this manual, results from expressions that you
-evaluate are indicated with @samp{@result{}}.  For example,
+evaluate are indicated with @samp{@result{}}.  For example:
 
 @example
 @group
 sqrt (2)
      @result{} 1.4142
 @end group
 @end example
 
@@ -478,17 +478,17 @@ eye (3)
 @end group
 @end example
 
 @noindent
 in order to clearly show the structure of the result.
 
 Sometimes to help describe one expression, another expression is
 shown that produces identical results.  The exact equivalence of
-expressions is indicated with @samp{@equiv{}}.  For example,
+expressions is indicated with @samp{@equiv{}}.  For example:
 
 @example
 @group
 rot90 ([1, 2; 3, 4], -1)
 @equiv{}
 rot90 ([1, 2; 3, 4], 3)
 @equiv{}
 rot90 ([1, 2; 3, 4], 7)
diff --git a/doc/interpreter/io.txi b/doc/interpreter/io.txi
--- a/doc/interpreter/io.txi
+++ b/doc/interpreter/io.txi
@@ -87,17 +87,17 @@ Normally, no output is displayed by the 
 is ready to print the top level prompt, or read from the standard input
 (for example, by using the @code{fscanf} or @code{scanf} functions).
 This means that there may be some delay before any output appears on
 your screen if you have asked Octave to perform a significant amount of
 work with a single command statement.  The function @code{fflush} may be
 used to force output to be sent to the pager (or any other stream)
 immediately.
 
-You can select the program to run as the pager using the @code{PAGER}
+You can select the program to run as the pager using the @env{PAGER}
 function, and you can turn paging off by using the function
 @code{more}.
 
 @DOCSTRING(more)
 
 @DOCSTRING(PAGER)
 
 @DOCSTRING(PAGER_FLAGS)
@@ -444,33 +444,33 @@ The specific flags and modifiers that ar
 interpretation vary depending on the particular conversion.  They're all
 described in more detail in the following sections.
 
 @node Output Conversion for Matrices
 @subsection Output Conversion for Matrices
 
 When given a matrix value, Octave's formatted output functions cycle
 through the format template until all the values in the matrix have been
-printed.  For example,
+printed.  For example:
 
 @example
 @group
 printf ("%4.2f %10.2e %8.4g\n", hilb (3));
 
      @print{} 1.00   5.00e-01   0.3333
      @print{} 0.50   3.33e-01     0.25
      @print{} 0.33   2.50e-01      0.2
 @end group
 @end example
 
 If more than one value is to be printed in a single call, the output
 functions do not return to the beginning of the format template when
 moving on from one value to the next.  This can lead to confusing output
 if the number of elements in the matrices are not exact multiples of the
-number of conversions in the format template.  For example,
+number of conversions in the format template.  For example:
 
 @example
 @group
 printf ("%4.2f %10.2e %8.4g\n", [1, 2], [3, 4]);
 
      @print{} 1.00   2.00e+00        3
      @print{} 4.00
 @end group
diff --git a/doc/interpreter/linalg.txi b/doc/interpreter/linalg.txi
--- a/doc/interpreter/linalg.txi
+++ b/doc/interpreter/linalg.txi
@@ -50,21 +50,21 @@ inverse is form is given by
 backward substitution using the @sc{lapack} xTRTRS function, and goto 4.
 
 @c Permuted triangular matrices currently disabled in the code
 @c
 @c @item If the matrix is a upper triangular matrix with column permutations
 @c or lower triangular matrix with row permutations, perform a forward or
 @c backward substitution, and goto 5.
 
-@item If the matrix is square, hermitian with a real positive diagonal,
+@item If the matrix is square, Hermitian with a real positive diagonal,
 attempt Cholesky factorization using the @sc{lapack} xPOTRF function.
 
 @item If the Cholesky factorization failed or the matrix is not
-hermitian with a real positive diagonal, and the matrix is square, factorize 
+Hermitian with a real positive diagonal, and the matrix is square, factorize 
 using the @sc{lapack} xGETRF function.
 
 @item If the matrix is not square, or any of the previous solvers flags
 a singular or near singular matrix, find a least squares solution using
 the @sc{lapack} xGELSD function.
 @end enumerate
 
 The user can force the type of the matrix with the @code{matrix_type}
diff --git a/doc/interpreter/matrix.txi b/doc/interpreter/matrix.txi
--- a/doc/interpreter/matrix.txi
+++ b/doc/interpreter/matrix.txi
@@ -233,17 +233,17 @@ Octave.@footnote{The old versions of @co
 obtain their initial seeds from the system clock.} If you really do
 need to reproduce a sequence of numbers exactly, you can set the state
 or seed to a specific value.
 
 If invoked without arguments, @code{rand} and @code{randn} return a
 single element of a random sequence.
 
 The original @code{rand} and @code{randn} functions use Fortran code from
-@sc{Ranlib}, a library of Fortran routines for random number generation,
+@sc{ranlib}, a library of Fortran routines for random number generation,
 compiled by Barry W. Brown and James Lovato of the Department of
 Biomathematics at The University of Texas, M.D. Anderson Cancer Center,
 Houston, TX 77030.
 
 @DOCSTRING(randperm)
 
 The functions @code{linspace} and @code{logspace} make it very easy to
 create vectors with evenly or logarithmically spaced elements.
diff --git a/doc/interpreter/nonlin.txi b/doc/interpreter/nonlin.txi
--- a/doc/interpreter/nonlin.txi
+++ b/doc/interpreter/nonlin.txi
@@ -27,16 +27,17 @@ Octave can solve sets of nonlinear equat
  f (x) = 0
 $$
 @end tex
 @ifnottex
 
 @example
 F (x) = 0
 @end example
+
 @end ifnottex
 
 @noindent
 using the function @code{fsolve}, which is based on the @sc{Minpack}
 subroutine @code{hybrd}.  This is an iterative technique so a starting
 point will have to be provided.  This also has the consequence that
 convergence is not guaranteed even if a solution exists.
 
@@ -52,16 +53,17 @@ Here is a complete example.  To solve th
 @ifnottex
 
 @example
 @group
 -2x^2 + 3xy   + 4 sin(y) = 6
  3x^2 - 2xy^2 + 3 cos(x) = -4
 @end group
 @end example
+
 @end ifnottex
 
 @noindent
 you first need to write a function to compute the value of the given
 function.  For example:
 
 @example
 @group
@@ -98,17 +100,17 @@ fval =
 info = 1
 @end group
 @end example
 
 @noindent
 A value of @code{info = 1} indicates that the solution has converged.
 
 The function @code{perror} may be used to print English messages
-corresponding to the numeric error codes.  For example,
+corresponding to the numeric error codes.  For example:
 
 @example
 @group
 perror ("fsolve", 1)
      @print{} solution converged to requested tolerance
 @end group
 @end example
 
diff --git a/doc/interpreter/numbers.txi b/doc/interpreter/numbers.txi
--- a/doc/interpreter/numbers.txi
+++ b/doc/interpreter/numbers.txi
@@ -128,16 +128,17 @@ results in the matrix
         /      \
         | 1  2 |
   a  =  |      |
         | 3  4 |
         \      /
 
 @end group
 @end example
+
 @end ifnottex
 
 Elements of a matrix may be arbitrary expressions, provided that the
 dimensions all make sense when combining the various pieces.  For
 example, given the above matrix, the expression
 
 @example
 [ a, a ]
@@ -335,16 +336,17 @@ s * [](mxn) = [](mxn) * s = [](mxn)
 
     [](0xm) *  M(mxn) = [](0xn)
 
      M(mxn) * [](nx0) = [](mx0)
 
     [](mx0) * [](0xn) =  0(mxn)
 @end group
 @end example
+
 @end ifnottex
 
 By default, dimensions of the empty matrix are printed along with the
 empty matrix symbol, @samp{[]}.  The built-in variable
 @code{print_empty_dimensions} controls this behavior.
 
 @DOCSTRING(print_empty_dimensions)
 
@@ -411,33 +413,34 @@ a = 2*(1:1e7) - 1;
 will produce the same result as @samp{1:2:2e7-1}, but without ever forming a
 vector with ten million elements.
 
 Using zero as an increment in the colon notation, as @samp{1:0:1} is not
 allowed, because a division by zero would occur in determining the number of
 range elements.  However, ranges with zero increment (i.e., all elements equal)
 are useful, especially in indexing, and Octave allows them to be constructed
 using the built-in function @dfn{ones}.  Note that because a range must be a row
-vector, @samp{ones (1, 10)} produces a range, while @samp{ones (10, 1)} does not.
+vector, @samp{ones (1, 10)} produces a range, while @samp{ones (10, 1)} does
+not.
 
 When Octave parses a range expression, it examines the elements of the
 expression to determine whether they are all constants.  If they are, it
 replaces the range expression with a single range constant.
 
 @node Single Precision Data Types
 @section Single Precision Data Types
 
 Octave includes support for single precision data types, and most of the
 functions in Octave accept single precision values and return single
 precision answers.  A single precision variable is created with the
 @code{single} function.
 
 @DOCSTRING(single)
 
-for example
+for example:
 
 @example
 @group
 sngl = single (rand (2, 2))
      @result{} sngl = 
         0.37569   0.92982
         0.11962   0.50876
 class (sngl)
@@ -613,17 +616,17 @@ bitwise 'not' operator is @code{bitcmp}.
 @DOCSTRING(bitcmp)
 
 Octave also includes the ability to left-shift and right-shift values bitwise.
 
 @DOCSTRING(bitshift)
 
 Bits that are shifted out of either end of the value are lost.  Octave
 also uses arithmetic shifts, where the sign bit of the value is kept
-during a right shift.  For example
+during a right shift.  For example:
 
 @example
 @group
 bitshift (-10, -1)
 @result{} -5
 bitshift (int8 (-1), -1)
 @result{} -1
 @end group
@@ -676,17 +679,17 @@ or @code{false} functions.
 
 @DOCSTRING(true)
 
 @DOCSTRING(false)
 
 @node Promotion and Demotion of Data Types
 @section Promotion and Demotion of Data Types
 
-Many operators and functions can work with mixed data types.  For example
+Many operators and functions can work with mixed data types.  For example,
 
 @example
 @group
 uint8 (1) + 1
     @result{} 2
 @end group
 @end example
 
@@ -740,17 +743,17 @@ min (single (1), 0)
    @result{} 0
 @end group
 @end example
 
 @noindent
 where the returned value is single precision.
 
 In the case of mixed type indexed assignments, the type is not
-changed.  For example
+changed.  For example,
 
 @example
 @group
 x = ones (2, 2);
 x (1, 1) = single (2)
     @result{} x = 2   1
            1   1
 @end group
diff --git a/doc/interpreter/optim.txi b/doc/interpreter/optim.txi
--- a/doc/interpreter/optim.txi
+++ b/doc/interpreter/optim.txi
@@ -46,26 +46,28 @@ Octave can solve Linear Programming prob
 function.  That is, Octave can solve
 
 @tex
 $$
   \min_x c^T x
 $$
 @end tex
 @ifnottex
+
 @example
 min C'*x
 @end example
+
 @end ifnottex
 subject to the linear constraints
 @tex
 $Ax = b$ where $x \geq 0$.
 @end tex
 @ifnottex
-@math{A*x = b} where @math{x >= 0}.
+@math{A*x = b} where @math{x @geq{} 0}.
 @end ifnottex
 
 @noindent
 The @code{glpk} function also supports variations of this problem.
 
 @DOCSTRING(glpk)
 
 @node Quadratic Programming
@@ -73,34 +75,38 @@ The @code{glpk} function also supports v
 
 Octave can also solve Quadratic Programming problems, this is
 @tex
 $$
  \min_x {1 \over 2} x^T H x + x^T q
 $$
 @end tex
 @ifnottex
+
 @example
 min 0.5 x'*H*x + x'*q
 @end example
+
 @end ifnottex
 subject to
 @tex
 $$
  Ax = b \qquad lb \leq x \leq ub \qquad A_{lb} \leq A_{in} \leq A_{ub}
 $$
 @end tex
 @ifnottex
+
 @example
 @group
      A*x = b
      lb <= x <= ub
      A_lb <= A_in*x <= A_ub
 @end group
 @end example
+
 @end ifnottex
 
 @DOCSTRING(qp)
 
 @DOCSTRING(pqpnonneg)
 
 @node Nonlinear Programming
 @section Nonlinear Programming
diff --git a/doc/interpreter/package.txi b/doc/interpreter/package.txi
--- a/doc/interpreter/package.txi
+++ b/doc/interpreter/package.txi
@@ -90,17 +90,17 @@ should be used when removing a package. 
 several packages at once by writing several package names after the
 @code{pkg uninstall} command.
 
 To minimize the amount of code duplication between packages it is
 possible that one package depends on another one.  If a package
 depends on another, it will check if that package is installed
 during installation.  If it is not, an error will be reported and
 the package will not be installed.  This behavior can be disabled
-by passing the @code{-nodeps} flag to the @code{pkg install}
+by passing the @option{-nodeps} flag to the @code{pkg install}
 command
 
 @example
 pkg install -nodeps my_package_with_dependencies.tar.gz
 @end example
 
 @noindent
 Since the installed package expects its dependencies to be installed
@@ -267,17 +267,17 @@ will be copied to the @code{inst} direct
 
 @item package/doc
 An optional directory containing documentation for the package.  The
 files in this directory will be directly installed in a sub-directory
 of the installed package for future reference.
 
 @item package/bin
 An optional directory containing files that will be added to the
-Octave @w{@code{EXEC_PATH}} when the package is loaded.  This might contain
+Octave @w{@env{EXEC_PATH}} when the package is loaded.  This might contain
 external scripts, etc., called by functions within the package.
 @end table
 
 @menu
 * The DESCRIPTION File::        
 * The INDEX file::              
 * PKG_ADD and PKG_DEL directives::  
 @end menu
@@ -437,17 +437,17 @@ toolbox >> Toolbox name
 @item Lines beginning with an alphabetical character indicates a new
 category of functions.
 
 @item Lines starting with a white space character indicate that the
 function names on the line belong to the last mentioned category.
 @end itemize
 
 @noindent
-The format can be summarized with the following example
+The format can be summarized with the following example.
 
 @example
 @group
 # A comment
 toolbox >> Toolbox name
 Category Name 1
  function1 function2 function3
  function4
@@ -483,33 +483,33 @@ to use @code{<code>} even in references:
 @example
 fn = use <a href="someothersite.html"><code>fn</code></a>
 @end example
 
 @noindent
 Sometimes functions are only partially compatible, in which
 case you can list the non-compatible cases separately.  To
 refer to another function in the package, use @code{<f>fn</f>}.
-For example,
+For example:
 
 @example
 eig (a, b) = use <f>qz</f>
 @end example
 
 @noindent
 Since sites may have many missing functions, you can define
 a macro rather than typing the same link over and again.
 
 @example
 $id = expansion
 @end example
 
 @noindent
 defines the macro id.  You can use @code{$id} anywhere in the
-description and it will be expanded.  For example,
+description and it will be expanded.  For example:
 
 @example
 @group
 $TSA = see <a href="link_to_spctools">SPC Tools</a>
 arcov = $TSA <code>armcv</code>
 @end group
 @end example
 
diff --git a/doc/interpreter/plot.txi b/doc/interpreter/plot.txi
--- a/doc/interpreter/plot.txi
+++ b/doc/interpreter/plot.txi
@@ -29,18 +29,19 @@
 * Advanced Plotting::           
 @end menu
 
 @node Introduction to Plotting
 @section Introduction to Plotting
 
 Earlier versions of Octave provided plotting through the use of
 gnuplot.  This capability is still available.  But, a newer plotting
-capability is provided by access to OpenGL.  Which plotting system
-is used is controlled by the @code{backend} function.  (See @ref{Graphics Backends}.)
+capability is provided by access to OpenGL@.  Which plotting system
+is used is controlled by the @code{backend} function.  (See @ref{Graphics
+Backends}.)
 
 The function call @code{backend("fltk")} selects the fltk/OpenGL system, and
 @code{backend("gnuplot")} selects the gnuplot system.
 The two systems may be used selectively through the use of the @code{backend}
 property of the graphics handle for each figure.  This is
 explained in @ref{Graphics Data Structures}.
 
 @node High-Level Plotting
@@ -296,33 +297,33 @@ is similar to @code{meshgrid}, but works
 @center @image{mesh,4in}
 @caption{Mesh plot.}
 @end float
 
 The @code{meshc} function is similar to @code{mesh}, but also produces a
 plot of contours for the surface.
 
 The @code{plot3} function displays arbitrary three-dimensional data,
-without requiring it to form a surface.  For example
+without requiring it to form a surface.  For example,
 
 @example
 @group
 t = 0:0.1:10*pi;
 r = linspace (0, 1, numel (t));
 z = linspace (0, 1, numel (t));
 plot3 (r.*sin(t), r.*cos(t), z);
 @end group
 @end example
 
 @noindent
 displays the spiral in three dimensions shown in @ref{fig:plot3}.
 
 @float Figure,fig:plot3
 @center @image{plot3,4in}
-@caption{Three dimensional spiral.}
+@caption{Three-dimensional spiral.}
 @end float
 
 Finally, the @code{view} function changes the viewpoint for
 three-dimensional plots.
 
 @DOCSTRING(mesh)
 
 @DOCSTRING(meshc)
@@ -385,17 +386,17 @@ three-dimensional plots.
 @DOCSTRING(sphere)
 
 @DOCSTRING(ellipsoid)
 
 @node Plot Annotations
 @subsection Plot Annotations
 
 You can add titles, axis labels, legends, and arbitrary text to an
-existing plot.  For example,
+existing plot.  For example:
 
 @example
 @group
 x = -10:0.1:10;
 plot (x, sin (x));
 title ("sin(x) for x = -10:0.1:10");
 xlabel ("x");
 ylabel ("sin (x)");
@@ -453,17 +454,17 @@ area active.  The grid of plot areas cre
 numbered in column-major order (top to bottom, left to right).
 
 @DOCSTRING(subplot)
 
 @node Multiple Plot Windows
 @subsection Multiple Plot Windows
 
 You can open multiple plot windows using the @code{figure} function.
-For example
+For example,
 
 @example
 @group
 figure (1);
 fplot (@@sin, [-10, 10]);
 figure (2);
 fplot (@@cos, [-10, 10]);
 @end group
@@ -570,17 +571,17 @@ with the codes
 @multitable @columnfractions .2 .2 .6 .2
 @item @tab \bf @tab Bold font @tab
 @item @tab \it @tab Italic font @tab
 @item @tab \sl @tab Oblique Font @tab
 @item @tab \rm @tab Normal font @tab
 @end multitable
 
 These are be used in conjunction with the @{ and @} characters to limit
-the change in the font to part of the string.  For example
+the change in the font to part of the string.  For example,
 
 @example
 xlabel ('@{\bf H@} = a @{\bf V@}')
 @end example
 
 where the character 'a' will not appear in a bold font.  Note that to
 avoid having Octave interpret the backslash characters in the strings,
 the strings should be in single quotes.
@@ -857,21 +858,21 @@ A graphics handle may point any one of a
 The objects are the graphics data structures.  The types of objects
 are: @code{figure}, @code{axes},
 @code{line}, @code{text}, @code{patch},
 @code{surface}, @code{text} and @code{image}.
 
 Each of these objects has a function by the
 same name. and, each of these functions returns a graphics handle pointing
 to an object of corresponding type.  In addition there are several functions
-which operate on properties of the graphics objects and which return handles: the functions @code{ plot}
-and @code{plot3}
-return a handle pointing to an object of type line, the function @code{subplot}
-returns a handle pointing to an object of type axes, the function @code{fill} returns a
-handle pointing to an object of type patch, the functions @code{area}, @code{bar},
+which operate on properties of the graphics objects and which return handles:
+the functions @code{ plot} and @code{plot3} return a handle pointing to an
+object of type line, the function @code{subplot} returns a handle pointing to an
+object of type axes, the function @code{fill} returns a handle pointing to an
+object of type patch, the functions @code{area}, @code{bar},
 @code{barh}, @code{contour}, @code{contourf}, @code{contour3}, @code{surf}, @code{mesh},
 @code{surfc}, @code{meshc},
 @code{errorbar}, @code{quiver}, @code{quiver3}, @code{scatter}, @code{scatter3},
 @code{stair}, @code{stem}, @code{stem3} each return a handle as documented
 in @ref{doc-datasources,, Data Sources}.
 
 
 The graphics objects are arranged in a hierarchy:
@@ -882,34 +883,34 @@ 1. The root is at 0.  i.e., @code{get(0)
 2. Below the root are @code{figure} objects.
 
 3. Below the @code{figure} objects are @code{axes}.
 
 4. Below the @code{axes} objects are
 @code{line}, @code{text}, @code{patch},
 @code{surface}, and @code{image} objects.
 
-Graphics handles may be distinguished from function handles (@ref{Function Handles})
-by means of the function @code{ishandle()}.  @code{ishandle} returns true if its
-argument is a handle of a graphics object.  In addition, the figure object
-may be tested using @code{isfigure()}.  @code{isfigure} returns true only if its
-argument is a handle of a figure.
-ishghandle() is synonymous with ishandle().  The @code{whos} function can be used
-to show the object type of each currently defined graphics handle.  (Note: this is
-not true today, but it is, I hope, considered an error in whos.  It may be better
-to have whos just show graphics_handle as the class, and provide a new function
-which, given a graphics handle, returns its object type.  This could generalize
-the ishandle() functions and, in fact, replace them.)
+Graphics handles may be distinguished from function handles (@ref{Function
+Handles}) by means of the function @code{ishandle()}.  @code{ishandle} returns
+true if its argument is a handle of a graphics object.  In addition, the figure
+object may be tested using @code{isfigure()}.  @code{isfigure} returns true only
+if its argument is a handle of a figure. ishghandle() is synonymous with
+ishandle().  The @code{whos} function can be used to show the object type of
+each currently defined graphics handle.  (Note: this is not true today, but it
+is, I hope, considered an error in whos.  It may be better to have whos just
+show graphics_handle as the class, and provide a new function which, given a
+graphics handle, returns its object type.  This could generalize the ishandle()
+functions and, in fact, replace them.)
 
 The @code{get} and @code{set} commands are
-used to obtain and set the values of properties of graphics objects.  In addition,
-the @code{get} command may be used to obtain property names.
-
-For example, the property "type" of the graphics object pointed to by the graphics
-handle h may be displayed by:
+used to obtain and set the values of properties of graphics objects.  In
+addition, the @code{get} command may be used to obtain property names.
+
+For example, the property "type" of the graphics object pointed to by the
+graphics handle h may be displayed by:
 
 @code{get(h, "type")}
 
 The properties and their current values are returned by @code{get(h)}
 where h is a handle of a graphics object.  If only the names of the
 allowed properties are wanted they may be displayed by:
 @code{get(h, "");}
 
@@ -1165,756 +1166,1221 @@ hierarchy.
 @node Root Figure Properties
 @subsubsection Root Figure Properties
 @cindex root figure properties
 
 The @code{root figure} properties are:
 @table @code
 @item __modified__  
 --- Values: "on," "off"
+
 @item __myhandle__
+
 @item beingdeleted  
 --- Values: "on," "off"
+
 @item busyaction
+
 @item buttondownfcn
+
 @item callbackobject
+
 @item children
+
 @item clipping
  --- Values: "on," "off"
+
 @item createfcn
+
 @item currentfigure
+
 @item deletefcn
+
 @item handlevisibility  
 --- Values: "on," "off"
+
 @item hittest
 --- Values: "on," "off"
+
 @item interruptible  
 --- Values: "on," "off"
+
 @item parent
+
 @item screendepth
+
 @item screenpixelsperinch
+
 @item screensize
+
 @item selected
+
 @item selectionhighlight
+
 @item screendepth
+
 @item screenpixelsperinch
+
 @item showhiddenhandles  
 --- Values: "on," "off"
+
 @item tag
+
 @item type
+
 @item uicontextmenu
+
 @item units
+
 @item userdata
+
 @item visible
 @end table
 
 @node Figure Properties
 @subsubsection Figure Properties
 @cindex figure properties
 
 The @code{figure} properties are:
 @table @code
 @item __backend__  
 --- The backend currently in use.
+
 @item __enhanced__
+
 @item __modified__
+
 @item __myhandle__
+
 @item __plot_stream__
+
 @item alphamap
+
 @item beingdeleted 
 --- Values: "on," "off"
+
 @item busyaction
+
 @item buttondownfcn
+
 @item children
 Handle to children.
+
 @item clipping
 --- Values: "on," "off"
+
 @item closerequestfcn 
 --- Handle of function to call on close.
+
 @item color
+
 @item colormap
 An N-by-3 matrix containing the color map for the current axes.
+
 @item paperorientation
+
 @item createfcn
+
 @item currentaxes 
 Handle to graphics object of current axes.
+
 @item currentcharacter
+
 @item currentobject
+
 @item currentpoint
 Holds the coordinates of the point over which the mouse pointer was when
 the mouse button was pressed.  If a mouse callback function is defined,
 @code{"currentpoint"} holds the coordinates of the point over which the
 mouse pointer is when the function gets called.
+
 @item deletefcn
+
 @item dockcontrols 
 --- Values: "on," "off"
+
 @item doublebuffer 
 --- Values: "on," "off"
+
 @item filename
+
 @item handlevisibility 
 --- Values: "on," "off"
+
 @item hittest
+
 @item integerhandle
+
 @item interruptible 
 --- Values: "on," "off"
+
 @item inverthardcopy
+
 @item keypressfcn
 see @code{"keypressfcn"}
+
 @item keyreleasefcn
 With @code{"keypressfcn"}, The keyboard callback functions.  These
 callback functions get called when a key is pressed/released
 respectively.  The functions are called with two input arguments.  The
 first argument holds the handle of the calling figure.  The second
 argument holds the event structure which has the following members:
 @table @code
 @item Character
 The ASCII value of the key
+
 @item Key
 lowercase value of the key
+
 @item Modifier
 A cell array containing strings representing the modifiers pressed with
 the key.  Possible values are @code{"shift"}, @code{"alt"}, and
 @code{"control"}.
 @end table
+
 @item menubar
+
 @item mincolormap
+
 @item name
+
 @item nextplot
 May be one of
 @table @code
 @item "new"
+
 @item "add"
+
 @item "replace"
+
 @item "replacechildren"
 @end table
+
 @item numbertitle
+
 @item paperorientation
 Indicates the orientation for printing.  Either @code{"landscape"} or
 @code{"portrait"}.
+
 @item paperposition
+
 @item paperpositionmode
+
 @item papersize
+
 @item papertype
+
 @item paperunits
+
 @item pointer
+
 @item pointershapecdata
+
 @item pointershapehotspot
+
 @item position
+
 @item renderer
+
 @item renderermode
+
 @item resize
+
 @item resizefcn
+
 @item selected
+
 @item selectionhighlight 
 --- Values: "on," "off"
+
 @item selectiontype
+
 @item tag
+
 @item toolbar
+
 @item type
+
 @item units
+
 @item userdata
+
 @item visible
 Either @code{"on"} or @code{"off"} to toggle display of the figure.
+
 @item windowbuttondownfcn
 See @code{"windowbuttonupfcn"}
+
 @item windowbuttonmotionfcn
 See @code{"windowbuttonupfcn"}
+
 @item windowbuttonupfcn
 With @code{"windowbuttondownfcn"} and @code{"windowbuttonmotionfcn"},
 The mouse callback functions.  These callback functions get called when
 the mouse button is pressed, dragged, and released respectively.  When
 these callback functions are called, the @code{"currentpoint"} property
 holds the current coordinates of the cursor.
+
 @item windowbuttonwheelfcn
+
 @item windowstyle
+
 @item wvisual
+
 @item wvisualmode
+
 @item xdisplay
+
 @item xvisual
+
 @item xvisualmode
 @end table
 
 @node Axes Properties
 @subsubsection Axes Properties
 @cindex axes properties
 
 The @code{axes} properties are:
 @table @code
 @item __modified__
+
 @item __myhandle__
+
 @item activepositionproperty
+
 @item alim
+
 @item alimmode
+
 @item ambientlightcolor
+
 @item beingdeleted
+
 @item box
 Box surrounding axes. 
 --- Values: "on," "off"
+
 @item busyaction
+
 @item buttondownfcn
+
 @item cameraposition
+
 @item camerapositionmode
+
 @item cameratarget
+
 @item cameratargetmode
+
 @item cameraupvector
+
 @item cameraupvectormode
+
 @item cameraviewangle
+
 @item cameraviewanglemode
+
 @item children
+
 @item clim
 Two-element vector defining the limits for the c axis of
 an image.  See @code{pcolor} property.
 Setting this property also forces the corresponding mode
 property to be set to @code{"manual"}.
+
 @item climmode
 Either @code{"manual"} or @code{"auto"}.
+
 @item clipping
+
 @item color
+
 @item colororder
+
 @item createfcn
+
 @item currentpoint
 Holds the coordinates of the point over which the mouse pointer was when
 the mouse button was pressed.  If a mouse callback function is defined,
 @code{"currentpoint"} holds the coordinates of the point over which the
 mouse pointer is when the function gets called.
+
 @item dataaspectratio
 A two-element vector specifying the relative height and width of the
 data displayed in the axes.  Setting @code{dataaspectratio} to @samp{1,
 2]} causes the length of one unit as displayed on the y-axis to be the
 same as the length of 2 units on the x-axis.  Setting
 @code{dataaspectratio} also forces the @code{dataaspectratiomode}
 property to be set to @code{"manual"}.
+
 @item dataaspectratiomode 
 Either @code{"manual"} or @code{"auto"}.
+
 @item deletefcn
+
 @item drawmode
+
 @item fontangle
+
 @item fontname
+
 @item fontsize
+
 @item fontunits
+
 @item fontweight
+
 @item gridlinestyle
+
 @item handlevisibility
+
 @item hittest
+
 @item interpreter
+
 @item interruptible
+
 @item key
 Toggle display of the legend.  --- Values: "on," "off"
 Note that this property is not compatible with @sc{matlab} and may be
 removed in a future version of Octave.
+
 @item keybox
 Toggle display of a box around the
 legend.  --- Values: "on," "off"
 Note that this property is not compatible with @sc{matlab} and
 may be removed in a future version of Octave.
+
 @item keypos
 An integer from 1 to 4 specifying the position of the legend.  1
 indicates upper right corner, 2 indicates upper left, 3 indicates lower
 left, and 4 indicates lower right.  Note that this property is not
 compatible with @sc{matlab} and may be removed in a future version of
 Octave.
+
 @item keyreverse
+
 @item layer
+
 @item linestyleorder
+
 @item linewidth
+
 @item minorgridlinestyle
+
 @item nextplot
 May be one of
 @table @code
 @item "new"
+
 @item "add"
+
 @item "replace"
+
 @item "replacechildren"
 @end table
+
 @item outerposition
 A vector specifying the position of the plot, including titles, axes and
 legend.  The four elements of the vector are the coordinates of the
 lower left corner and width and height of the plot, in units normalized
 to the width and height of the plot window.  For example, @code{[0.2,
 0.3, 0.4, 0.5]} sets the lower left corner of the axes at @math{(0.2,
 0.3)} and the width and height to be 0.4 and 0.5 respectively.  See also
 the @code{position} property.
+
 @item parent
+
 @item plotboxaspectratio
+
 @item plotboxaspectratiomode
+
 @item position
 A vector specifying the position of the plot, excluding titles, axes and
 legend.  The four elements of the vector are the coordinates of the
 lower left corner and width and height of the plot, in units normalized
 to the width and height of the plot window.  For example, @code{[0.2,
 0.3, 0.4, 0.5]} sets the lower left corner of the axes at @math{(0.2,
 0.3)} and the width and height to be 0.4 and 0.5 respectively.  See also
 the @code{outerposition} property.
+
 @item projection
+
 @item selected
+
 @item selectionhighlight
+
 @item tag
+
 @item tickdir
+
 @item tickdirmode
+
 @item ticklength
+
 @item tightinset
+
 @item title
 Index of text object for the axes title.
+
 @item type
+
 @item uicontextmenu
+
 @item units
+
 @item userdata
+
 @item view
 A three element vector specifying the view point for three-dimensional plots.
+
 @item visible
 Either @code{"on"} or @code{"off"} to toggle display of the axes.
+
 @item x_normrendertransform
+
 @item x_projectiontransform
+
 @item x_rendertransform
+
 @item x_viewporttransform
+
 @item x_viewtransform
+
 @item xaxislocation 
 Either @code{"top"} or @code{"bottom"}.
+
 @item xcolor
+
 @item xdir
 Either @code{"forward"} or @code{"reverse"}.
+
 @item xgrid
 Either @code{"on"} or @code{"off"} to toggle display of grid lines.
+
 @item xlabel
 Indices to text objects for the axes labels.
+
 @item xlim
 Two-element vector defining the limits for the x-axis.
 Setting this property also forces the corresponding mode
 property to be set to @code{"manual"}.
+
 @item xlimmode
 Either @code{"manual"} or @code{"auto"}.
+
 @item xminorgrid 
 Either @code{"on"} or @code{"off"} to toggle display of minor grid lines.
+
 @item xminortick
+
 @item xscale
 Either @code{"linear"} or @code{"log"}.
+
 @item xtick
 Set position of tick marks.
 Setting this property also forces the corresponding mode
 property to be set to @code{"manual"}.
+
 @item xticklabel
 Setting this property also forces the corresponding mode
 property to be set to @code{"manual"}.
+
 @item xticklabelmode 
 Either @code{"manual"} or @code{"auto"}.
+
 @item xtickmode 
 Either @code{"manual"} or @code{"auto"}.
+
 @item yaxislocation 
 Either @code{"left"} or @code{"right"}
+
 @item ycolor
+
 @item ydir
 Either @code{"forward"} or @code{"reverse"}.
+
 @item ygrid
 Either @code{"on"} or @code{"off"} to toggle display of grid lines.
+
 @item ylabel
 Indices to text objects for the axes labels.
+
 @item ylim
 Two-element vectors defining the limits for the x, y, and z axes and the
 Setting one of these properties also forces the corresponding mode
 property to be set to @code{"manual"}.
+
 @item ylimmode
 Either @code{"manual"} or @code{"auto"}.
+
 @item yminorgrid 
 Either @code{"on"} or @code{"off"} to toggle display of minor grid lines.
+
 @item yminortick
+
 @item yscale
 Either @code{"linear"} or @code{"log"}.
+
 @item ytick
 Set position of tick marks.
 Setting this property also forces the corresponding mode
 property to be set to @code{"manual"}.
+
 @item yticklabel
 Setting this property also forces the corresponding mode
 property to be set to @code{"manual"}.
+
 @item yticklabelmode 
 Either @code{"manual"} or @code{"auto"}.
+
 @item ytickmode 
 Either @code{"manual"} or @code{"auto"}.
+
 @item zcolor
+
 @item zdir
 Either @code{"forward"} or @code{"reverse"}.
+
 @item zgrid
 Either @code{"on"} or @code{"off"} to toggle display of grid lines.
+
 @item zlabel
 Indices to text objects for the axes labels.
+
 @item zlim
 Two-element vector defining the limits for z-axis.
 Setting this property also forces the corresponding mode
 property to be set to @code{"manual"}.
+
 @item zlimmode
 Either @code{"manual"} or @code{"auto"}.
+
 @item zminorgrid 
 Either @code{"on"} or @code{"off"} to toggle display of minor grid lines.
+
 @item zminortick
+
 @item zscale
 Either @code{"linear"} or @code{"log"}.
+
 @item ztick
 Set position of tick marks.
 Setting this property also forces the corresponding mode
 property to be set to @code{"manual"}.
+
 @item zticklabel 
 Setting this property also forces the corresponding mode
 property to be set to @code{"manual"}.
+
 @item zticklabelmode 
 Either @code{"manual"} or @code{"auto"}.
+
 @item ztickmode
 Either @code{"manual"} or @code{"auto"}.
 
 @end table
 
 @node Line Properties
 @subsubsection Line Properties
 @cindex line properties
 
 The @code{line} properties are:
 @table @code
 @item __modified__
+
 @item __myhandle__
+
 @item beingdeleted
+
 @item busyaction
+
 @item buttondownfcn
+
 @item children
+
 @item clipping
+
 @item color
 The RGB color of the line, or a color name.  @xref{Colors}.
+
 @item createfcn
+
 @item deletefcn
+
 @item displayname
+
 @item erasemode
+
 @item handlevisibility
+
 @item hittest
+
 @item interpreter
+
 @item interruptible
+
 @item keylabel
 The text of the legend entry corresponding to this line.  Note that this
 property is not compatible with @sc{matlab} and may be removed in a
 future version of Octave.
+
 @item ldata
 The lower errorbar in the y direction to be plotted.
+
 @item linestyle
 @itemx linewidth
 @xref{Line Styles}.
+
 @item linewidth
+
 @item marker
+
 @item markeredgecolor
+
 @item markerfacecolor
+
 @item markersize
 @xref{Marker Styles}.
+
 @item parent
+
 @item selected
+
 @item selectionhighlight
+
 @item tag
+
 @item type
+
 @item udata
 The upper errorbar in the y direction to be plotted.
+
 @item uicontextmenu
+
 @item userdata
+
 @item visible
+
 @item xdata
 The data to be plotted.
+
 @item xdatasource
+
 @item xldata
 The lower errorbar to be plotted.
+
 @item xlim
+
 @item xliminclude
+
 @item xudata
 The upper errorbar to be plotted.
+
 @item ydata
 The data to be plotted.
+
 @item ydatasource
+
 @item ylim
+
 @item yliminclude
+
 @item zdata
 The data to be plotted.
+
 @item zdatasource
+
 @item zlim
+
 @item zliminclude
 @end table
 
 @node Text Properties
 @subsubsection Text Properties
 @cindex text properties
 
 The @code{text} properties are:
 @table @code
 @item __modified__
+
 @item __myhandle__
+
 @item backgroundcolor
+
 @item beingdeleted
+
 @item busyaction
+
 @item buttondownfcn
+
 @item children
+
 @item clipping
+
 @item color
 The color of the text.  @xref{Colors}.
+
 @item createfcn
+
 @item deletefcn
+
 @item displayname
+
 @item edgecolor
+
 @item editing
+
 @item erasemode
+
 @item fontangle
 Flag whether the font is italic or normal.  Valid values are 'normal',
 'italic' and 'oblique'.
+
 @item fontname
 The font used for the text.
+
 @item fontsize
 The size of the font, in points to use.
+
 @item fontunits
+
 @item fontweight
 Flag whether the font is bold, etc.  Valid values are 'normal', 'bold',
 'demi' or 'light'.
+
 @item handlevisibility
+
 @item hittest
+
 @item horizontalalignment
 May be @code{"left"}, @code{"center"}, or @code{"right"}.
+
 @item interpreter
 Determines how the text is rendered.  Valid values are 'none', 'tex' or
 'latex'.
+
 @item interruptible
+
 @item linestyle
+
 @item linewidth
+
 @item margin
+
 @item parent
+
 @item position
 The coordinates of the text object.
+
 @item rotation
 The angle of rotation for the displayed text, measured in degrees.
+
 @item selected
+
 @item selectionhighlight
+
 @item string
 The character string contained by the text object.
+
 @item tag
+
 @item type
+
 @item uicontextmenu
+
 @item units
 May be @code{"normalized"} or @code{"graph"}.
+
 @item userdata
+
 @item verticalalignment
+
 @item visible
+
 @item xlim
+
 @item xliminclude
+
 @item ylim
+
 @item yliminclude
+
 @item zlim
+
 @item zliminclude
 
 @end table
 
 @node Image Properties
 @subsubsection Image Properties
 @cindex image properties
 
 The @code{image} properties are:
 @table @code
 @item __modified__
+
 @item __myhandle__
+
 @item beingdeleted
+
 @item busyaction
+
 @item buttondownfcn
+
 @item cdata
 The data for the image.  Each pixel of the image corresponds to an
 element of @code{cdata}.  The value of an element of @code{cdata}
 specifies the row-index into the colormap of the axes object containing
 the image.  The color value found in the color map for the given index
 determines the color of the pixel.
+
 @item cdatamapping
+
 @item children
+
 @item clim
+
 @item climinclude
+
 @item clipping
+
 @item createfcn
+
 @item deletefcn
+
 @item handlevisibility
+
 @item hittest
+
 @item interruptible
+
 @item parent
+
 @item selected
+
 @item selectionhighlight
+
 @item tag
+
 @item type
+
 @item uicontextmenu
+
 @item userdata
+
 @item visible
+
 @item xdata
 Two-element vector specifying the range of the x-coordinates for
 the image.
+
 @item xlim
+
 @item xliminclude
+
 @item ydata
 Two-element vector specifying the range of the y-coordinates for
 the image.
+
 @item ylim
+
 @item yliminclude
 @end table
 
 @node Patch Properties
 @subsubsection Patch Properties
 @cindex patch properties
 
 The @code{patch} properties are:
 @table @code
 @item __modified__
+
 @item __myhandle__
+
 @item alim
+
 @item aliminclude
+
 @item alphadatamapping
+
 @item ambientstrength
+
 @item backfacelighting
+
 @item beingdeleted
+
 @item busyaction
+
 @item buttondownfcn
+
 @item cdata
 Data defining the patch object.
+
 @item cdatamapping
+
 @item children
+
 @item clim
+
 @item climinclude
+
 @item clipping
+
 @item createfcn
+
 @item deletefcn
+
 @item diffusestrength
+
 @item edgealpha
+
 @item edgecolor
 The color of the line defining the patch.  @xref{Colors}.
+
 @item edgelighting
+
 @item erasemode
+
 @item facealpha
 A number in the range [0, 1] indicating the transparency of the patch.
+
 @item facecolor
 The fill color of the patch.  @xref{Colors}.
+
 @item facelighting
+
 @item faces
+
 @item facevertexalphadata
+
 @item facevertexcdata
+
 @item handlevisibility
+
 @item hittest
+
 @item interpreter
+
 @item interruptible
+
 @item keylabel
+
 @item linestyle
 @xref{Line Styles}.
+
 @item linewidth
 @xref{Line Styles}.
+
 @item marker
 @xref{Marker Styles}.
+
 @item markeredgecolor
 @xref{Marker Styles}.
+
 @item markerfacecolor
 @xref{Marker Styles}.
+
 @item markersize
 @xref{Marker Styles}.
+
 @item normalmode
+
 @item parent
+
 @item selected
+
 @item selectionhighlight
+
 @item specularcolorreflectance
+
 @item specularexponent
+
 @item specularstrength
+
 @item tag
+
 @item type
+
 @item uicontextmenu
+
 @item userdata
+
 @item vertexnormals
+
 @item vertices
+
 @item visible
+
 @item xdata
 Data defining the patch object.
+
 @item xlim
+
 @item xliminclude
+
 @item ydata
 Data defining the patch object.
+
 @item ylim
+
 @item yliminclude
+
 @item zdata
 Data defining the patch object.
+
 @item zlim
+
 @item zliminclude
 
 @end table
 
 @node Surface Properties
 @subsubsection Surface Properties
 @cindex surface properties
 
 The @code{surface} properties are:
 @table @code
 @item __modified__
+
 @item __myhandle__
+
 @item alim
+
 @item aliminclude
+
 @item alphadata
+
 @item alphadatamapping
+
 @item ambientstrength
+
 @item backfacelighting
+
 @item beingdeleted
+
 @item busyaction
+
 @item buttondownfcn
+
 @item cdata
+
 @item cdatamapping
+
 @item cdatasource
+
 @item children
+
 @item clim
+
 @item climinclude
+
 @item clipping
+
 @item createfcn
+
 @item deletefcn
+
 @item diffusestrength
+
 @item edgealpha
+
 @item edgecolor
+
 @item edgelighting
+
 @item erasemode
+
 @item facealpha
+
 @item facecolor
+
 @item facelighting
+
 @item handlevisibility
+
 @item hittest
+
 @item interpreter
+
 @item interruptible
+
 @item keylabel
 The text of the legend entry corresponding to this surface.  Note that
 this property is not compatible with @sc{matlab} and may be removed in a
 future version of Octave.
+
 @item linestyle
+
 @item linewidth
+
 @item marker
+
 @item markeredgecolor
+
 @item markerfacecolor
+
 @item markersize
+
 @item meshstyle
+
 @item normalmode
+
 @item parent
+
 @item selected
+
 @item selectionhighlight
+
 @item specularcolorreflectance
+
 @item specularexponent
+
 @item specularstrength
+
 @item tag
+
 @item type
+
 @item uicontextmenu
+
 @item userdata
+
 @item vertexnormals
+
 @item visible
+
 @item xdata
 The data determining the surface.  The @code{xdata} and @code{ydata}
 elements are vectors and @code{zdata} must be a matrix.
+
 @item xdatasource
+
 @item xlim
+
 @item xliminclude
+
 @item ydata
 The data determining the surface.  The @code{xdata} and @code{ydata}
 elements are vectors and @code{zdata} must be a matrix.
+
 @item ydatasource
+
 @item ylim
+
 @item yliminclude
+
 @item zdata
 The data determining the surface.  The @code{xdata} and @code{ydata}
 elements are vectors and @code{zdata} must be a matrix.
+
 @item zdatasource
+
 @item zlim
+
 @item zliminclude
 @end table
 
 @node Searching Properties
 @subsection Searching Properties
 
 @DOCSTRING(findobj)
 
@@ -2039,20 +2505,23 @@ one, or by name.  Recognized color names
 Line styles are specified by the following properties:
 
 @table @code
 @item linestyle
 May be one of
 @table @code
 @item "-"
 Solid lines.
+
 @item "--"
 Dashed lines.
+
 @item ":"
 Points.
+
 @item "-."
 A dash-dot line.
 @end table
 
 @item linewidth
 A number specifying the width of the line.  The default is 1.  A value
 of 2 is twice as wide as the default, etc.
 @end table
@@ -2095,28 +2564,28 @@ function mycallback (src, data)
 @dots{}
 endfunction
 @end group
 @end example
 
 where @code{src} gives a handle to the source of the callback, and
 @code{code} gives some event specific data.  This can then be associated
 with an object either at the objects creation or later with the
-@code{set} function.  For example
+@code{set} function.  For example,
 
 @example
 plot (x, "DeleteFcn", @@(s, e) disp("Window Deleted"))
 @end example
 
 @noindent
 where at the moment that the plot is deleted, the message "Window
 Deleted" will be displayed.
 
 Additional user arguments can be passed to callback functions, and will
-be passed after the 2 default arguments.  For example
+be passed after the 2 default arguments.  For example:
 
 @example
 @group
 plot (x, "DeleteFcn", @{@@mycallback, "1"@})
 @dots{}
 function mycallback (src, data, a1)
   fprintf ("Closing plot %d\n", a1);
 endfunction
@@ -2236,17 +2705,19 @@ hlink = linkprop ([hg, h1, h2], "color")
 @DOCSTRING(linkprop)
 
 These capabilities are used in a number of basic graphics objects.
 The @code{hggroup} objects created by the functions of Octave contain
 one or more graphics object and are used to:
 
 @itemize @bullet
 @item group together multiple graphics objects,
+
 @item create linked properties between different graphics objects, and
+
 @item to hide the nominal user data, from the actual data of the objects.
 @end itemize
 
 @noindent
 For example the @code{stem} function creates a stem series where each
 @code{hggroup} of the stem series contains two line objects representing
 the body and head of the stem.  The @code{ydata} property of the
 @code{hggroup} of the stem series represents the head of the stem,
@@ -2324,17 +2795,18 @@ The value where the base of the area plo
 
 @item linewidth
 @itemx linestyle
 The line width and style of the edge of the patch objects making up the
 areas.  @xref{Line Styles}.
 
 @item edgecolor
 @itemx facecolor
-The line and fill color of the patch objects making up the areas.  @xref{Colors}.
+The line and fill color of the patch objects making up the areas. 
+@xref{Colors}.
 
 @item xdata
 @itemx ydata
 The x and y coordinates of the original columns of the data passed to
 @code{area} prior to the cumulative summation used in the @code{area}
 function.
 
 @item xdatasource
@@ -2449,17 +2921,19 @@ labeled contours.
 
 @item showtext
 Flag whether the contour labels are shown or not.
 
 @item labelspacing
 The distance between labels on a single contour in points.
 
 @item linewidth
+
 @item linestyle
+
 @item linecolor
 The properties of the contour lines.  The properties @code{linewidth} and
 @code{linestyle} are similar to the corresponding properties for lines.  The
 property @code{linecolor} is a color property (@pxref{Colors}), that can also
 have the values of "none" or "auto".  If @code{linecolor} is "none", then no
 contour line is drawn.  If @code{linecolor} is "auto" then the line color is
 determined by the colormap.
 
@@ -2480,21 +2954,23 @@ Data source variables.
 @cindex error bar series
 
 Error bar series are created by the @code{errorbar} function.  Each
 @code{hggroup} element contains two line objects representing the data and
 the errorbars separately.  The properties of the error bar series are
 
 @table @code
 @item color
-The RGB color or color name of the line objects of the error bars.  @xref{Colors}.
+The RGB color or color name of the line objects of the error bars. 
+@xref{Colors}.
 
 @item linewidth
 @itemx linestyle
-The line width and style of the line objects of the error bars.  @xref{Line Styles}.
+The line width and style of the line objects of the error bars.  @xref{Line
+Styles}.
 
 @item marker
 @itemx markeredgecolor
 @itemx markerfacecolor
 @itemx markersize
 The line and fill color of the markers on the error bars.  @xref{Colors}.
 
 @item xdata
@@ -2735,33 +3211,35 @@ Data source variables.
 Surface group objects are created by the @code{surf} or @code{mesh}
 functions, but are equally one of the handles returned by the @code{surfc}
 or @code{meshc} functions.  The surface group is of the type @code{surface}.
 
 The properties of the surface group are
 
 @table @code
 @item edgecolor
+
 @item facecolor
-The RGB color or color name of the edges or faces of the surface.  @xref{Colors}.
+The RGB color or color name of the edges or faces of the surface. 
+@xref{Colors}.
 
 @item linewidth
 @itemx linestyle
 The line width and style of the lines on the surface.  @xref{Line Styles}.
 
 @item marker
 @itemx markeredgecolor
 @itemx markerfacecolor
 @itemx markersize
 The line and fill color of the markers on the surface.  @xref{Colors}.
 
 @item xdata
 @itemx ydata
 @itemx zdata
-@item cdata
+@itemx cdata
 The original x, y, z and c data.
 
 @item xdatasource
 @itemx ydatasource
 @itemx zdatasource
 @itemx cdatasource
 Data source variables.
 @end table
diff --git a/doc/interpreter/poly.txi b/doc/interpreter/poly.txi
--- a/doc/interpreter/poly.txi
+++ b/doc/interpreter/poly.txi
@@ -29,16 +29,17 @@ in descending order).  For example, a ve
 $$
 @end tex
 @ifnottex
  @var{N}
 
 @example
 p(x) = @var{c}(1) x^@var{N} + @dots{} + @var{c}(@var{N}) x + @var{c}(@var{N}+1).
 @end example
+
 @end ifnottex
 
 @menu
 * Evaluating Polynomials::
 * Finding Roots::
 * Products of Polynomials::
 * Derivatives and Integrals::
 * Polynomial Interpolation::
diff --git a/doc/interpreter/quad.txi b/doc/interpreter/quad.txi
--- a/doc/interpreter/quad.txi
+++ b/doc/interpreter/quad.txi
@@ -185,19 +185,21 @@ functions for one-dimensional integrals.
 To illustrate how the integration can be performed, we will integrate
 the function
 @tex
 $$
   f(x, y) = \sin(\pi x y)\sqrt{x y}
 $$
 @end tex
 @ifnottex
+
 @example
 f(x, y) = sin(pi*x*y)*sqrt(x*y)
 @end example
+
 @end ifnottex
 for @math{x} and @math{y} between 0 and 1.
 
 The first approach creates a function that integrates @math{f} with
 respect to @math{x}, and then integrates that function with respect to
 @math{y}.  Since @code{quad} is written in Fortran it cannot be called
 recursively.  This means that @code{quad} cannot integrate a function
 that calls @code{quad}, and hence cannot be used to perform the double
@@ -216,17 +218,17 @@ endfunction
 
 I = quadl("g", 0, 1)
       @result{} 0.30022
 @end group
 @end example
 
 The above process can be simplified with the @code{dblquad} and
 @code{triplequad} functions for integrals over two and three
-variables.  For example
+variables.  For example:
 
 @example
 @group
 I =  dblquad (@@(x, y) sin(pi.*x.*y).*sqrt(x.*y), 0, 1, 0, 1)
       @result{} 0.30022
 @end group
 @end example
 
diff --git a/doc/interpreter/sparse.txi b/doc/interpreter/sparse.txi
--- a/doc/interpreter/sparse.txi
+++ b/doc/interpreter/sparse.txi
@@ -172,24 +172,27 @@ it adds complexity and speed problems el
 @subsection Creating Sparse Matrices
 
 There are several means to create sparse matrix.
 
 @table @asis
 @item Returned from a function
 There are many functions that directly return sparse matrices.  These include
 @dfn{speye}, @dfn{sprand}, @dfn{diag}, etc.
+
 @item Constructed from matrices or vectors
 The function @dfn{sparse} allows a sparse matrix to be constructed from 
 three vectors representing the row, column and data.  Alternatively, the
 function @dfn{spconvert} uses a three column matrix format to allow easy
 importation of data from elsewhere.
+
 @item Created and then filled
 The function @dfn{sparse} or @dfn{spalloc} can be used to create an empty
 matrix that is then filled by the user
+
 @item From a user binary program
 The user can directly create the sparse matrix within an oct-file.
 @end table
 
 There are several basic functions to return specific sparse
 matrices.  For example the sparse identity matrix, is a matrix that is
 often needed.  It therefore has its own function to create it as
 @code{speye (@var{n})} or @code{speye (@var{r}, @var{c})}, which
@@ -201,17 +204,17 @@ of random elements.  The functions @dfn{
 this for uniform and normal random distributions of elements.  They have exactly
 the same calling convention, where @code{sprand (@var{r}, @var{c}, @var{d})},
 creates an @var{r}-by-@var{c} sparse matrix with a density of filled
 elements of @var{d}.
 
 Other functions of interest that directly create sparse matrices, are
 @dfn{diag} or its generalization @dfn{spdiags}, that can take the
 definition of the diagonals of the matrix and create the sparse matrix 
-that corresponds to this.  For example
+that corresponds to this.  For example,
 
 @example
 s = diag (sparse(randn(1,n)), -1);
 @end example
 
 creates a sparse (@var{n}+1)-by-(@var{n}+1) sparse matrix with a single
 diagonal defined.
 
@@ -231,17 +234,17 @@ diagonal defined.
 @DOCSTRING(sprand)
 
 @DOCSTRING(sprandn)
 
 @DOCSTRING(sprandsym)
 
 The recommended way for the user to create a sparse matrix, is to create 
 two vectors containing the row and column index of the data and a third
-vector of the same size containing the data to be stored.  For example
+vector of the same size containing the data to be stored.  For example,
 
 @example
 @group
   ri = ci = d = [];
   for j = 1:c
     ri = [ri; randperm(r)(1:n)'];
     ci = [ci; j*ones(n,1)];
     d = [d; rand(n,1)];
@@ -256,17 +259,17 @@ do not need to be sorted in any particul
 them prior to storing the data.  However, pre-sorting the data will
 make the creation of the sparse matrix faster.
 
 The function @dfn{spconvert} takes a three or four column real matrix.
 The first two columns represent the row and column index respectively and
 the third and four columns, the real and imaginary parts of the sparse
 matrix.  The matrix can contain zero elements and the elements can be 
 sorted in any order.  Adding zero elements is a convenient way to define
-the size of the sparse matrix.  For example
+the size of the sparse matrix.  For example:
 
 @example
 @group
 s = spconvert ([1 2 3 4; 1 3 4 4; 1 2 3 0]')
 @result{} Compressed Column Sparse (rows=4, cols=4, nnz=3)
       (1 , 1) -> 1
       (2 , 3) -> 2
       (3 , 4) -> 3
@@ -341,30 +344,30 @@ mean and the variance of each column.
 @DOCSTRING(spstats)
 
 When solving linear equations involving sparse matrices Octave
 determines the means to solve the equation based on the type of the
 matrix as discussed in @ref{Sparse Linear Algebra}.  Octave probes the
 matrix type when the div (/) or ldiv (\) operator is first used with
 the matrix and then caches the type.  However the @dfn{matrix_type}
 function can be used to determine the type of the sparse matrix prior
-to use of the div or ldiv operators.  For example
+to use of the div or ldiv operators.  For example,
 
 @example
 @group
 a = tril (sprandn(1024, 1024, 0.02), -1) ...
     + speye(1024); 
 matrix_type (a);
 ans = Lower
 @end group
 @end example
 
-show that Octave correctly determines the matrix type for lower
+shows that Octave correctly determines the matrix type for lower
 triangular matrices.  @dfn{matrix_type} can also be used to force
-the type of a matrix to be a particular type.  For example
+the type of a matrix to be a particular type.  For example:
 
 @example
 @group
 a = matrix_type (tril (sprandn (1024, ...
    1024, 0.02), -1) + speye(1024), 'Lower');
 @end group
 @end example
 
@@ -390,17 +393,17 @@ One use of sparse matrices is in graph t
 interconnections between nodes are represented as an adjacency
 matrix.  That is, if the i-th node in a graph is connected to the j-th
 node.  Then the ij-th node (and in the case of undirected graphs the
 ji-th node) of the sparse adjacency matrix is non-zero.  If each node
 is then associated with a set of coordinates, then the @dfn{gplot}
 command can be used to graphically display the interconnections
 between nodes.
 
-As a trivial example of the use of @dfn{gplot}, consider the example
+As a trivial example of the use of @dfn{gplot} consider the example,
 
 @example
 @group
 A = sparse([2,6,1,3,2,4,3,5,4,6,1,5],
     [1,1,2,2,3,3,4,4,5,5,6,6],1,6,6);
 xy = [0,4,8,6,4,2;5,0,5,7,5,7]';
 gplot(A,xy)
 @end group
@@ -515,17 +518,17 @@ usage and to not have to do calculations
 closely related in that the computation time on a sparse matrix operator
 or function is roughly linear with the number of non-zero elements.
 
 Therefore, there is a certain density of non-zero elements of a matrix 
 where it no longer makes sense to store it as a sparse matrix, but rather
 as a full matrix.  For this reason operators and functions that have a 
 high probability of returning a full matrix will always return one.  For
 example adding a scalar constant to a sparse matrix will almost always
-make it a full matrix, and so the example
+make it a full matrix, and so the example,
 
 @example
 @group
 speye(3) + 0
 @result{}   1  0  0
   0  1  0
   0  0  1
 @end group
@@ -605,17 +608,17 @@ involves terms like @code{0 ./ 0} which 
 is equally a full matrix with the zero elements of @var{s} filled with
 @code{NaN} values.
 
 The above behavior is consistent with full matrices, but is not 
 consistent with sparse implementations in other products.
 
 A particular problem of sparse matrices comes about due to the fact that
 as the zeros are not stored, the sign-bit of these zeros is equally not
-stored.  In certain cases the sign-bit of zero is important.  For example
+stored.  In certain cases the sign-bit of zero is important.  For example:
 
 @example
 @group
  a = 0 ./ [-1, 1; 1, -1];
  b = 1 ./ a
  @result{} -Inf            Inf
      Inf           -Inf
  c = 1 ./ sparse (a)
@@ -708,18 +711,18 @@ arguments as r@code{[r, p, q] = chol(A);
 
 @float Figure,fig:simplecholperm
 @center @image{spcholperm,4in}
 @caption{Structure of the permuted Cholesky factorization of the above matrix.}
 @end float
 
 In the case of an asymmetric matrix, the appropriate sparsity
 preserving permutation is @dfn{colamd} and the factorization using
-this reordering can be visualized using the command @code{q =
-colamd(A); [l, u, p] = lu(A(:,q)); spy(l+u)}.
+this reordering can be visualized using the command
+@code{q = colamd(A); [l, u, p] = lu(A(:,q)); spy(l+u)}.
 
 Finally, Octave implicitly reorders the matrix when using the div (/)
 and ldiv (\) operators, and so no the user does not need to explicitly
 reorder the matrix to maximize performance.
 
 @DOCSTRING(amd)
 
 @DOCSTRING(ccolamd)
@@ -757,49 +760,49 @@ account the permutations.  Goto 8
 @item If the matrix is square, banded and if the band density is less
 than that given by @code{spparms ("bandden")} continue, else goto 4.
 
 @enumerate a
 @item If the matrix is tridiagonal and the right-hand side is not sparse 
 continue, else goto 3b.
 
 @enumerate
-@item If the matrix is hermitian, with a positive real diagonal, attempt
+@item If the matrix is Hermitian, with a positive real diagonal, attempt
       Cholesky factorization using @sc{lapack} xPTSV.
 
-@item If the above failed or the matrix is not hermitian with a positive
+@item If the above failed or the matrix is not Hermitian with a positive
       real diagonal use Gaussian elimination with pivoting using 
       @sc{lapack} xGTSV, and goto 8.
 @end enumerate
 
-@item If the matrix is hermitian with a positive real diagonal, attempt
+@item If the matrix is Hermitian with a positive real diagonal, attempt
       Cholesky factorization using @sc{lapack} xPBTRF.
 
-@item if the above failed or the matrix is not hermitian with a positive
+@item if the above failed or the matrix is not Hermitian with a positive
       real diagonal use Gaussian elimination with pivoting using 
       @sc{lapack} xGBTRF, and goto 8.
 @end enumerate
 
 @item If the matrix is upper or lower triangular perform a sparse forward
 or backward substitution, and goto 8
 
 @item If the matrix is a upper triangular matrix with column permutations
 or lower triangular matrix with row permutations, perform a sparse forward 
 or backward substitution, and goto 8
 
-@item If the matrix is square, hermitian with a real positive diagonal, attempt
-sparse Cholesky factorization using CHOLMOD.
+@item If the matrix is square, Hermitian with a real positive diagonal, attempt
+sparse Cholesky factorization using @sc{cholmod}.
 
 @item If the sparse Cholesky factorization failed or the matrix is not
-hermitian with a real positive diagonal, and the matrix is square, factorize 
+Hermitian with a real positive diagonal, and the matrix is square, factorize 
 using @sc{umfpack}.
 
 @item If the matrix is not square, or any of the previous solvers flags
 a singular or near singular matrix, find a minimum norm solution using
-CXSPARSE@footnote{The CHOLMOD, UMFPACK and CXSPARSE packages were
+@sc{cxsparse}@footnote{The @sc{cholmod}, @sc{umfpack} and @sc{cxsparse} packages were
 written by Tim Davis and are available at
 http://www.cise.ufl.edu/research/sparse/}.
 @end enumerate
 
 The band density is defined as the number of non-zero values in the matrix
 divided by the number of non-zero values in the matrix.  The banded matrix
 solvers can be entirely disabled by using @dfn{spparms} to set @code{bandden}
 to 1 (i.e., @code{spparms ("bandden", 1)}).
diff --git a/doc/interpreter/stmt.txi b/doc/interpreter/stmt.txi
--- a/doc/interpreter/stmt.txi
+++ b/doc/interpreter/stmt.txi
@@ -378,16 +378,17 @@ written with a cell array like this
 @example
 @group
 switch (foo)
   case @{ 1, 2 @}
     doit ();
   @dots{}
 @end group
 @end example
+
 @end itemize
 
 @node The @code{while} Statement
 @section The @code{while} Statement
 @cindex @code{while} statement
 @cindex @code{endwhile} statement
 @cindex loop
 @cindex body of a loop
@@ -571,29 +572,29 @@ endfor
 @end group 
 @end example
 
 @noindent
 In this case the variable @code{i} takes on the value of the columns of
 the matrix or cell matrix.  So the first loop iterates twice, producing
 two column vectors @code{[1;2]}, followed by @code{[3;4]}, and likewise
 for the loop over the cell array.  This can be extended to loops over
-multidimensional arrays.  For example
+multi-dimensional arrays.  For example:
 
 @example
 @group
 a = [1,3;2,4]; b = cat(3, a, 2*a);
 for i = c
   i
 endfor
 @end group 
 @end example
 
 @noindent
-In the above case, the multidimensional matrix @var{c} is reshaped to a
+In the above case, the multi-dimensional matrix @var{c} is reshaped to a
 two-dimensional matrix as @code{reshape (c, rows(c),
 prod(size(c)(2:end)))} and then the same behavior as a loop over a two
 dimensional matrix is produced.
 
 Although it is possible to rewrite all @code{for} loops as @code{while}
 loops, the Octave language has both statements because often a
 @code{for} loop is both less work to type and more natural to think of.
 Counting the number of iterations is very common in loops and it can be
@@ -619,17 +620,17 @@ for [ @var{val}, @var{key} ] = @var{expr
 endfor
 @end group
 @end example
 
 @noindent
 In this form of the @code{for} statement, the value of @var{expression}
 must be a structure.  If it is, @var{key} and @var{val} are set to the
 name of the element and the corresponding value in turn, until there are
-no more elements.  For example,
+no more elements.  For example:
 
 @example
 @group
 x.a = 1
 x.b = [1, 2; 3, 4]
 x.c = "string"
 for [val, key] = x
   key
diff --git a/doc/interpreter/strings.txi b/doc/interpreter/strings.txi
--- a/doc/interpreter/strings.txi
+++ b/doc/interpreter/strings.txi
@@ -496,17 +496,17 @@ hex2dec ("FF")
 
 @node Character Class Functions
 @section Character Class Functions
 
 Octave also provides the following character class test functions
 patterned after the functions in the standard C library.  They all
 operate on string arrays and return matrices of zeros and ones.
 Elements that are nonzero indicate that the condition was true for the
-corresponding character in the string array.  For example,
+corresponding character in the string array.  For example:
 
 @example
 @group
 isalpha ("!Q@@WERT^Y&")
      @result{} [ 0, 1, 0, 1, 1, 1, 1, 0, 1, 0 ]
 @end group
 @end example
 
diff --git a/doc/interpreter/testfun.txi b/doc/interpreter/testfun.txi
--- a/doc/interpreter/testfun.txi
+++ b/doc/interpreter/testfun.txi
@@ -37,17 +37,17 @@ and demonstration code in the source cod
 @code{test} scans the named script file looking for lines which
 start with @code{%!}.  The prefix is stripped off and the rest of the
 line is processed through the Octave interpreter.  If the code
 generates an error, then the test is said to fail.
 
 Since @code{eval()} will stop at the first error it encounters, you must
 divide your tests up into blocks, with anything in a separate
 block evaluated separately.  Blocks are introduced by the keyword
-@code{test} immediately following the @code{%!}.  For example,
+@code{test} immediately following the @code{%!}.  For example:
 
 @example
 @group
    %!test error ("this test fails!");
    %!test "test doesn't fail. it doesn't generate an error";
 @end group
 @end example
 
@@ -241,28 +241,35 @@ in the log file, but is not executed.  F
 @end group
 @end example
 
 Block type summary:
 
 @table @code
 @item %!test
 check that entire block is correct
+
 @item %!error
 check for correct error message
+
 @item %!warning
 check for correct warning message
+
 @item %!demo
 demo only executes in interactive mode
+
 @item %!#
 comment: ignore everything within the block
+
 @item %!shared x,y,z
 declares variables for use in multiple tests
+
 @item %!function
 defines a function value for a shared variable
+
 @item %!assert (x, y, tol)
 shorthand for %!test assert (x, y, tol)
 @end table
 
 You can also create test scripts for builtins and your own C++
 functions.  Just put a file of the function name on your path without
 any extension and it will be picked up by the test procedure.  You
 can even embed tests directly in your C++ code:
diff --git a/doc/interpreter/tips.txi b/doc/interpreter/tips.txi
--- a/doc/interpreter/tips.txi
+++ b/doc/interpreter/tips.txi
@@ -81,54 +81,56 @@ copyright to anyone else, then place you
 @cindex execution speed
 @cindex speedups
 
 Here are some ways of improving the execution speed of Octave programs.
 
 @itemize @bullet
 @item
 Vectorize loops.  For instance, rather than
+
 @example
 @group
 for i = 1:n-1
   a(i) = b(i+1) - b(i);
 endfor
 @end group
 @end example
 
 write
 
 @example
 a = b(2:n) - b(1:n-1);
 @end example
 
-This is especially important for loops with "cheap" bodies.  Often it suffices to vectorize
-just the innermost loop to get acceptable performance.  A general rule of thumb is that the
-"order" of the vectorized body should be greater or equal to the "order" of the enclosing loop.
+This is especially important for loops with "cheap" bodies.  Often it suffices
+to vectorize just the innermost loop to get acceptable performance.  A general
+rule of thumb is that the "order" of the vectorized body should be greater or
+equal to the "order" of the enclosing loop.
 
 @item
-Use built-in and library functions if possible.  Built-in and compiled functions are very fast.
-Even with a m-file library function, chances are good that it is already optimized, or will be
-optimized more in a future release.
+Use built-in and library functions if possible.  Built-in and compiled functions
+are very fast.  Even with a m-file library function, chances are good that it is
+already optimized, or will be optimized more in a future release.
 
 For instance, even better than
 
 @example
 a = b(2:n) - b(1:n-1);
 @end example
 
 is
 
 @example
 a = diff (b);
 @end example
 
 
 @item
-Avoid computing costly intermediate results multiple times. Octave currently
+Avoid computing costly intermediate results multiple times.  Octave currently
 does not eliminate common subexpressions.
 Also, certain internal computation results are cached for variables.
 For instance, if a matrix variable is used multiple times as an index,
 checking the indices (and internal conversion to integers) is only done once.
 
 @item
 Be aware of lazy copies (copy-on-write).  When a copy of an object
 is created, the data is not immediately copied, but rather shared.  The actual
@@ -163,31 +165,31 @@ in some cases.  In particular, when @var
 between a struct array and a cell array.
 
 Most indexing expressions do not live longer than their `parent' objects.
 In rare cases, however, a lazily copied slice outlasts its parent, in which
 case it becomes orphaned, still occupying unnecessarily more memory than needed.
 To provide a remedy working in most real cases,
 Octave checks for orphaned lazy slices at certain situations, when a value
 is stored into a "permanent" location, such as a named variable or cell or
-struct element, and possibly economizes them.  For example
+struct element, and possibly economizes them.  For example:
 
 @example
 @group
 a = zeros (1000); # create a 1000x1000 matrix
 b = a(:,10:100); # lazy slice
 a = []; # the original a array is still allocated
 c@{1@} = b; # b is reallocated at this point
 @end group
 @end example
 
 @item
-Avoid deep recursion.  Function calls to m-file functions carry a relatively significant overhead,
-so rewriting a recursion as a loop often helps.  Also, note that the maximum level of recursion is
-limited.
+Avoid deep recursion.  Function calls to m-file functions carry a relatively
+significant overhead, so rewriting a recursion as a loop often helps.  Also,
+note that the maximum level of recursion is limited.
 
 @item
 Avoid resizing matrices unnecessarily.  When building a single result
 matrix from a series of calculations, set the size of the result matrix
 first, then insert values into it.  Write
 
 @example
 @group
@@ -207,21 +209,21 @@ instead of
 @group
 result = [];
 for i = ever:and_ever
   result = [ result, new_value() ];
 endfor
 @end group
 @end example
 
-Sometimes the number of items can't be computed in advance, and stack-like operations
-are needed.  When elements are being repeatedly inserted at/removed from the end of an
-array, Octave detects it as stack usage and attempts to use a smarter memory management
-strategy pre-allocating the array in bigger chunks.  Likewise works for cell and
-struct arrays.
+Sometimes the number of items can't be computed in advance, and stack-like
+operations are needed.  When elements are being repeatedly inserted at/removed
+from the end of an array, Octave detects it as stack usage and attempts to use a
+smarter memory management strategy pre-allocating the array in bigger chunks. 
+Likewise works for cell and struct arrays.
 
 @example
 @group
 a = [];
 while (condition)
   @dots{}
   a(end+1) = value; # "push" operation
   @dots{}
@@ -243,19 +245,19 @@ because the interpreter is not involved 
 @group
 a = @{@dots{}@}
 v = cellfun (@@(x) det(x), a); # compute determinants
 v = cellfun (@@det, a); # faster
 @end group
 @end example
 
 @item
-Octave includes a number of other functions that can replace common types of loops,
-including @code{bsxfun}, @code{arrayfun}, @code{structfun}, @code{accumarray}.
-These functions can take an arbitrary function as a handle.
+Octave includes a number of other functions that can replace common types of
+loops, including @code{bsxfun}, @code{arrayfun}, @code{structfun},
+@code{accumarray}.  These functions can take an arbitrary function as a handle.
 Be sure to get familiar with them if you want to become an Octave expert.
 
 @item
 Avoid calling @code{eval} or @code{feval} excessively, because
 they require Octave to parse input or look up the name of a function in
 the symbol table.
 
 If you are using @code{eval} as an exception handling mechanism and not
@@ -530,31 +532,36 @@ as @@var@{variable@}.
 This help string must be commented in user functions, or in the help
 string of the @w{@code{DEFUN_DLD}} macro for dynamically loadable
 functions.  The important aspects of the documentation string are
 
 @table @asis
 @item -*- @nospell{texinfo} -*-
 This string signals Octave that the following text is in Texinfo format,
 and should be the first part of any help string in Texinfo format.
+
 @item @@deftypefn@{class@} @dots{} @@end deftypefn
 The entire help string should be enclosed within the block defined by
 deftypefn.
+
 @item @@cindex index term
 This generates an index entry, and can be useful when the function is
 included as part of a larger piece of documentation.  It is ignored
 within Octave's help viewer.  Only one index term may appear per line
 but multiple @@cindex lines are valid if the function should be 
 filed under different terms.
+
 @item @@var@{variable@}
 All variables should be marked with this macro.  The markup of variables
 is then changed appropriately for display.
+
 @item @@code@{sample of code@}
 All samples of code should be marked with this macro for the same
 reasons as the @@var macro.
+
 @item @@seealso@{function2@}
 This is a comma separated list of function names that allows cross
 referencing from one function documentation string to another.
 @end table
 
 Texinfo format has been designed to generate output for online viewing
 with text terminals as well as generating high-quality printed output.
 To these ends, Texinfo has commands which control the diversion of parts
diff --git a/doc/interpreter/var.txi b/doc/interpreter/var.txi
--- a/doc/interpreter/var.txi
+++ b/doc/interpreter/var.txi
@@ -27,16 +27,17 @@ already seen variables in many of the ex
 must be a sequence of letters, digits and underscores, but it may not begin
 with a digit.  Octave does not enforce a limit on the length of variable
 names, but it is seldom useful to have variables with names longer than
 about 30 characters.  The following are all valid variable names
 
 @cindex job hunting
 @cindex getting a good job
 @cindex flying high and fast
+
 @example
 @group
 x
 x15
 __foo_bar_baz__
 fucnrdthsucngtagdjb
 @end group
 @end example
@@ -220,17 +221,17 @@ all persistent declarations.
 persistent a
 persistent a b
 persistent c = 2
 persistent d = 3 e f = 5
 @end group
 @end example
 
 The behavior of persistent variables is equivalent to the behavior of
-static variables in C.  The command @code{static} in Octave is also
+static variables in C@.  The command @code{static} in Octave is also
 recognized and is equivalent to @code{persistent}.
 
 Like global variables, a persistent variable may only be initialized once.
 For example, after executing the following code
 
 @example
 @group
 persistent pvar = 1
