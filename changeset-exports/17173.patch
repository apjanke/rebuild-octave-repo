# HG changeset patch
# User Mike Miller <mtmiller@ieee.org>
# Date 1375651660 14400
#      Sun Aug 04 17:27:40 2013 -0400
# Node ID 3a23cbde59d5fa1682cc161bf26efdf387529089
# Parent  1d5c0c9b3e990e9bddb3fe083835ae0bc00b63cc
interpft.m: Fix interpolation to preserve spectral symmetry (bug #39566)

* interpft.m: Fix interpolation to preserve spectral symmetry, be compatible
with Matlab. Add test cases.

diff --git a/scripts/general/interpft.m b/scripts/general/interpft.m
--- a/scripts/general/interpft.m
+++ b/scripts/general/interpft.m
@@ -65,25 +65,37 @@ function z = interpft (x, n, dim)
   endif
 
   perm = [dim:nd, 1:(dim-1)];
   x = permute (x, perm);
   m = rows (x);
 
   inc = ceil (m/n);
   y = fft (x) / m;
-  k = floor (m / 2);
+  k = ceil (m / 2);
   sz = size (x);
   sz(1) = n * inc - m;
 
   idx = repmat ({':'}, nd, 1);
   idx{1} = 1:k;
   z = cat (1, y(idx{:}), zeros (sz));
   idx{1} = k+1:m;
   z = cat (1, z, y(idx{:}));
+
+  ## When m is an even number of rows, the FFT has a single Nyquist bin.
+  ## If zero-padded above, distribute the value of the Nyquist bin evenly
+  ## between the new corresponding positive and negative frequency bins.
+  if (sz(1) > 0 && k == m/2)
+    idx{1} = n * inc - k + 1;
+    tmp = z(idx{:}) / 2;
+    z(idx{:}) = tmp;
+    idx{1} = k + 1;
+    z(idx{:}) = tmp;
+  endif
+
   z = n * ifft (z);
 
   if (inc != 1)
     sz(1) = n;
     z = inc * reshape (z(1:inc:end), sz);
   endif
 
   z = ipermute (z, perm);
@@ -103,16 +115,28 @@ endfunction
 %! legend ("sin(4t+0.3)cos(3t-0.1)", "spline", "interpft", "data");
 
 %!shared n,y
 %! x = [0:10]';  y = sin(x);  n = length (x);
 %!assert (interpft (y, n), y, 20*eps);
 %!assert (interpft (y', n), y', 20*eps);
 %!assert (interpft ([y,y],n), [y,y], 20*eps);
 
+%% Test case with complex input from bug #39566
+%!test
+%! x = (1 + j) * [1:4]';
+%! y = ifft ([15 + 15*j; -6; -1.5 - 1.5*j; 0; -1.5 - 1.5*j; -6*j]);
+%! assert (interpft (x, 6), y, 10*eps);
+
+%% Test for correct spectral symmetry with even/odd lengths
+%!assert (max (abs (imag (interpft ([1:8], 20)))), 0, 2*eps);
+%!assert (max (abs (imag (interpft ([1:8], 21)))), 0, 2*eps);
+%!assert (max (abs (imag (interpft ([1:9], 20)))), 0, 2*eps);
+%!assert (max (abs (imag (interpft ([1:9], 21)))), 0, 2*eps);
+
 %% Test input validation
 %!error interpft ()
 %!error interpft (1)
 %!error interpft (1,2,3)
 %!error <N must be a scalar integer> interpft (1,[2,2])
 %!error <N must be a scalar integer> interpft (1,2.1)
 %!error <invalid dimension DIM> interpft (1,2,0)
 %!error <invalid dimension DIM> interpft (1,2,3)
