# HG changeset patch
# User jwe
# Date 760686968 0
#      Tue Feb 08 05:56:08 1994 +0000
# Node ID a7fd0923e4e4eae4277329134776845c2582fee1
# Parent  ecb6f1e1184255a25cbd5569456e2f994baf6f4c
[project @ 1994-02-08 05:52:11 by jwe]

diff --git a/liboctave/Array.cc b/liboctave/Array.cc
--- a/liboctave/Array.cc
+++ b/liboctave/Array.cc
@@ -826,16 +826,51 @@ DiagArray<T>::cols (void) const
 
 template <class T>
 int
 DiagArray<T>::columns (void) const
 {
   return nc;
 }
 
+#if defind (_AIX)
+template <class T>
+T&
+DiagArray<T>::elem (int r, int c)
+{
+  static T foo (0);
+  return (r == c) ? Array<T>::elem (r) : foo;
+}
+
+template <class T>
+T&
+DiagArray<T>::checkelem (int r, int c)
+{
+  static T foo (0);
+  if (r < 0 || c < 0 || r >= nr || c >= nc)
+    {
+      (*current_liboctave_error_handler) ("range error");
+      return foo;
+    }
+  return (r == c) ? Array<T>::elem (r) : foo;
+}
+
+template <class T>
+T&
+DiagArray<T>::operator () (int r, int c)
+{
+  static T foo (0);
+  if (r < 0 || c < 0 || r >= nr || c >= nc)
+    {
+      (*current_liboctave_error_handler) ("range error");
+      return foo;
+    }
+  return (r == c) ? Array<T>::elem (r) : foo;
+}
+
 template <class T>
 T&
 DiagArray<T>::xelem (int r, int c)
 {
   static T foo (0);
   return (r == c) ? Array<T>::xelem (r) : foo;
 }
 
diff --git a/liboctave/Array.h b/liboctave/Array.h
--- a/liboctave/Array.h
+++ b/liboctave/Array.h
@@ -222,16 +222,17 @@ public:
  * --
  * James Kanze                             email: kanze@us-es.sel.de
  * GABI Software, Sarl., 8 rue du Faisan, F-67000 Strasbourg, France
  */
 
 template <class T>
 class DiagArray : public Array<T>
 {
+#if ! defined (_AIX)
 private:
 
   class Proxy
   {
   public:
 
     Proxy (DiagArray<T> *ref, int r, int c) : object (ref), i (r), j (c) { }
 
@@ -271,16 +272,17 @@ private:
     int i;
     int j;
 
     DiagArray<T> *object;
 
   };
 
 friend class Proxy;
+#endif
 
 protected:
 
   int nr;
   int nc;
 
   DiagArray (T *d, int r, int c);
 
@@ -298,16 +300,21 @@ public:
 
   int dim1 (void) const;
   int dim2 (void) const;
 
   int rows (void) const;
   int cols (void) const;
   int columns (void) const;
 
+#if defined (_AIX)
+  T& elem (int r, int c);
+  T& checkelem (int r, int c);
+  T& operator () (int r, int c);
+#else
   Proxy elem (int r, int c)
   {
     return Proxy (this, r, c);
   }
 
   Proxy checkelem (int r, int c)
   {
     if (r < 0 || c < 0 || r >= nr || c >= nc)
@@ -324,16 +331,17 @@ public:
     if (r < 0 || c < 0 || r >= nr || c >= nc)
       {
 	(*current_liboctave_error_handler) ("range error");
 	return Proxy (0, r, c);
       }
     else
       return Proxy (this, r, c);
   }
+#endif
 
 // No checking.
   T& xelem (int r, int c);
 
   T elem (int r, int c) const;
   T checkelem (int r, int c) const;
   T operator () (int r, int c) const;
 
diff --git a/src/pt-const.cc b/src/pt-const.cc
--- a/src/pt-const.cc
+++ b/src/pt-const.cc
@@ -606,17 +606,25 @@ tree_constant_rep::maybe_resize (int i, 
 void
 tree_constant_rep::maybe_resize (int i, force_orient f_orient = no_orient)
 {
   int nr = rows ();
   int nc = columns ();
 
   i++;
 
-  assert (i > 0 && (nr <= 1 || nc <= 1));
+  assert (i >= 0 && (nr <= 1 || nc <= 1));
+
+// This function never reduces the size of a vector, and all vectors
+// have dimensions of at least 0x0.  If i is 0, it is either because
+// a vector has been indexed with a vector of all zeros (in which case
+// the index vector is empty and nothing will happen) or a vector has
+// been indexed with 0 (an error which will be caught elsewhere).
+  if (i == 0)
+    return;
 
   if (nr <= 1 && nc <= 1 && i >= 1)
     {
       if (user_pref.resize_on_range_error)
 	{
 	  if (f_orient == row_orient)
 	    resize (1, i, 0.0);
 	  else if (f_orient == column_orient)
