# HG changeset patch
# User jwe
# Date 1074655712 0
#      Wed Jan 21 03:28:32 2004 +0000
# Node ID ca3a1d687bbaa183fdf4016b312e2097978b2889
# Parent  5e2c68946f307deeae29fe5d4beee481a40750a2
[project @ 2004-01-21 03:28:31 by jwe]

diff --git a/doc/interpreter/func.txi b/doc/interpreter/func.txi
--- a/doc/interpreter/func.txi
+++ b/doc/interpreter/func.txi
@@ -215,22 +215,17 @@ endfunction
 Although Octave does not automatically report an error if you call a
 function with more arguments than expected, doing so probably indicates
 that something is wrong.  Octave also does not automatically report an
 error if a function is called with too few arguments, but any attempt to
 use a variable that has not been given a value will result in an error.
 To avoid such problems and to provide useful messages, we check for both
 possibilities and issue our own error message.
 
-@defvr {Automatic Variable} nargin
-When a function is called, this local variable is automatically
-initialized to the number of arguments passed to the function.  At the
-top level, @code{nargin} holds the number of command line arguments that
-were passed to Octave.
-@end defvr
+@DOCSTRING(nargin)
 
 @DOCSTRING(silent_functions)
 
 @DOCSTRING(warn_missing_semicolon)
 
 @node Multiple Return Values
 @section Multiple Return Values
 
@@ -315,39 +310,17 @@ b = [](0x0)
 
 c = 2
 @end example
 
 @noindent
 along with a warning if the value of the built-in variable
 @code{warn_undefined_return_values} is nonzero.
 
-@defvr {Automatic Variable} nargout
-When a function is called, this local variable is automatically
-initialized to the number of arguments expected to be returned.  For
-example, 
-
-@example
-f ()
-@end example
-
-@noindent
-will result in @code{nargout} being set to 0 inside the function
-@code{f} and
-
-@example
-[s, t] = f ()
-@end example
-
-@noindent
-will result in @code{nargout} being set to 2 inside the function
-@code{f}.
-
-At the top level, @code{nargout} is undefined.
-@end defvr
+@DOCSTRING(nargout)
 
 @DOCSTRING(warn_undefined_return_values)
 
 @DOCSTRING(nargchk)
 
 @node Variable-length Argument Lists
 @section Variable-length Argument Lists
 @cindex Variable-length argument lists
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,10 +1,30 @@
 2004-01-20  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
+	* variables.cc (is_valid_function): If warn, also print error
+	message if arg is not a string.
+
+	* ov-usr-fcn.cc (Fnargin, Fnargout): New functions.
+
+	* octave.cc (intern_argv): Lookup __nargin__ instead of nargin.
+	* ov-usr-fcn.cc (octave_user_function::install_automatic_vars):
+	Lookup __nargin__ and __nargout__ instead of nargin and nargout.
+
+	* variables.h (at_top_level): Now extern.
+	(lookup_user_function): New function.
+	* variables.cc: Provide decls.
+
+	* ov.h, ov.cc (octave_value::user_function_value):
+	New virtual function.
+	* ov-base.h, ov-base.cc (octave_base_value::user_function_value):
+	Provide default version.
+	* ov-usr-fcn.h (octave_user_function::user_function_value):
+	New function.
+
 	* ov-re-mat.cc (complex_array_value): New function.
 	* ov-re-mat.h: Provide decl.
 
 	* ov-cell.cc (Fiscellstr): Don't return value on usage error.
 
 	* error.cc: (symbols_of_error): Delete DEFVAR for error_text.
 	Define __error_text__ and error_text as aliases for lasterr.
 
diff --git a/src/octave.cc b/src/octave.cc
--- a/src/octave.cc
+++ b/src/octave.cc
@@ -159,17 +159,17 @@ long_options long_opts[] =
     { 0,                  0,                       0, 0 }
   };
 
 // Store the command-line options for later use.
 
 static void
 intern_argv (int argc, char **argv)
 {
-  bind_builtin_variable ("nargin", argc-1, true, true, 0);
+  bind_builtin_variable ("__nargin__", argc-1, true, true, 0);
 
   Cell args;
 
   if (argc > 1)
     {
       Array<octave_value> tmp (argc-1);
 
       // Skip program name in argv.
diff --git a/src/ov-base.cc b/src/ov-base.cc
--- a/src/ov-base.cc
+++ b/src/ov-base.cc
@@ -497,16 +497,27 @@ octave_base_value::function_value (bool 
   octave_function *retval = 0;
 
   if (! silent)
     gripe_wrong_type_arg ("octave_base_value::function_value()",
 			  type_name ());
   return retval;
 }
 
+octave_user_function *
+octave_base_value::user_function_value (bool silent)
+{
+  octave_user_function *retval = 0;
+
+  if (! silent)
+    gripe_wrong_type_arg ("octave_base_value::user_function_value()",
+			  type_name ());
+  return retval;
+}
+
 octave_fcn_handle *
 octave_base_value::fcn_handle_value (bool silent)
 {
   octave_fcn_handle *retval = 0;
 
   if (! silent)
     gripe_wrong_type_arg ("octave_base_value::fcn_handle_value()",
 			  type_name ());
diff --git a/src/ov-base.h b/src/ov-base.h
--- a/src/ov-base.h
+++ b/src/ov-base.h
@@ -229,16 +229,18 @@ public:
   int stream_number (void) const;
 
   std::streamoff streamoff_value (void) const;
 
   streamoff_array streamoff_array_value (void) const;
 
   octave_function *function_value (bool silent = false);
 
+  octave_user_function *user_function_value (bool silent = false);
+
   octave_fcn_handle *fcn_handle_value (bool silent = false);
 
   octave_value_list list_value (void) const;
 
   octave_value convert_to_str_internal (bool pad, bool force) const;
 
   void convert_to_row_or_column_vector (void);
 
diff --git a/src/ov-usr-fcn.cc b/src/ov-usr-fcn.cc
--- a/src/ov-usr-fcn.cc
+++ b/src/ov-usr-fcn.cc
@@ -556,18 +556,18 @@ octave_user_function::print_code_functio
 }
 
 void
 octave_user_function::install_automatic_vars (void)
 {
   if (sym_tab)
     {
       argn_sr = sym_tab->lookup ("argn", true);
-      nargin_sr = sym_tab->lookup ("nargin", true);
-      nargout_sr = sym_tab->lookup ("nargout", true);
+      nargin_sr = sym_tab->lookup ("__nargin__", true);
+      nargout_sr = sym_tab->lookup ("__nargout__", true);
 
       if (takes_varargs ())
 	varargin_sr = sym_tab->lookup ("varargin", true);
     }
 }
 
 void
 octave_user_function::bind_automatic_vars
@@ -588,16 +588,143 @@ octave_user_function::bind_automatic_var
 
       for (int i = 0; i < n; i++)
 	varargin(0,i) = va_args(i);
 
       varargin_sr->define (varargin);
     }
 }
 
+DEFUN (nargin, args, ,
+  "-*- texinfo -*-\n\
+@deftypefn {Built-in Function} {} nargin ()\n\
+@deftypefnx {Built-in Function} {} nargin (@var{fcn_name})\n\
+Within a function, return the number of arguments passed to the function.\n\
+At the top level, return the number of command line arguments passed to\n\
+Octave.  If called with the optional argument @var{fcn_name}, return the\n\
+maximum number of arguments the named function can accept, or -1 if the\n\
+function accepts a variable number of arguments.\n\
+@end deftypefn")
+{
+  octave_value retval;
+
+  int nargin = args.length ();
+
+  if (nargin == 1)
+    {
+      std::string fname = args(0).string_value ();
+
+      if (! error_state)
+	{
+	  octave_user_function *fcn = lookup_user_function (fname);
+
+	  if (fcn)
+	    {
+	      if (fcn->takes_varargs ())
+		retval = -1;
+	      else
+		{
+		  tree_parameter_list *param_list = fcn->parameter_list ();
+
+		  retval = param_list ? param_list->length () : 0;
+		}
+	    }
+	  else
+	    error ("nargin: invalid function");
+	}
+      else
+	error ("nargin: expecting string as first argument");
+    }
+  else if (nargin == 0)
+    {
+      symbol_record *sr = curr_sym_tab->lookup ("__nargin__");
+
+      retval = sr ? sr->def () : 0;
+    }
+  else
+    print_usage ("nargin");
+
+  return retval;
+}
+
+DEFUN (nargout, args, ,
+  "-*- texinfo -*-\n\
+@deftypefn {Built-in Function} {} nargout ()\n\
+@deftypefnx {Built-in Function} {} nargout (@var{fcn_name})\n\
+Within a function, return the number of values the caller expects to\n\
+receive.  If called with the optional argument @var{fcn_name}, return the\n\
+maximum number of values the named function can produce, or -1 if the\n\
+function can produce a variable number of values.\n\
+\n\
+For example,\n\
+\n\
+@example\n\
+f ()\n\
+@end example\n\
+\n\
+@noindent\n\
+will cause @code{nargout} to return 0 inside the function code{f} and\n\
+\n\
+@example\n\
+[s, t] = f ()\n\
+@end example\n\
+\n\
+@noindent\n\
+will cause @code{nargout} to return 2 inside the function\n\
+@code{f}.\n\
+\n\
+At the top level, @code{nargout} is undefined.\n\
+@end deftypefn")
+{
+  octave_value retval;
+
+  int nargin = args.length ();
+
+  if (nargin == 1)
+    {
+      std::string fname = args(0).string_value ();
+
+      if (! error_state)
+	{
+	  octave_user_function *fcn = lookup_user_function (fname);
+
+	  if (fcn)
+	    {
+	      if (fcn->takes_var_return ())
+		retval = -1;
+	      else
+		{
+		  tree_parameter_list *ret_list = fcn->return_list ();
+
+		  retval = ret_list ? ret_list->length () : 0;
+		}
+	    }
+	  else
+	    error ("nargout: invalid function");
+	}
+      else
+	error ("nargout: expecting string as first argument");
+    }
+  else if (nargin == 0)
+    {
+      if (! at_top_level ())
+	{
+	  symbol_record *sr = curr_sym_tab->lookup ("__nargout__");
+
+	  retval = sr ? sr->def () : 0;
+	}
+      else
+	error ("nargout: invalid call at top level");
+    }
+  else
+    print_usage ("nargout");
+
+  return retval;
+}
+
 DEFUNX ("va_arg", Fva_arg, args, ,
   "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} va_arg ()\n\
 Return the value of the next available argument and move the internal\n\
 pointer to the next argument.  It is an error to call @code{va_arg}\n\
 when ther eare no more arguments available, or in a function that\n\
 has not been declared to take a variable number of parameters.\n\
 @end deftypefn")
diff --git a/src/ov-usr-fcn.h b/src/ov-usr-fcn.h
--- a/src/ov-usr-fcn.h
+++ b/src/ov-usr-fcn.h
@@ -58,16 +58,18 @@ public:
 			tree_parameter_list *rl = 0,
 			tree_statement_list *cl = 0,
 			symbol_table *st = 0);
 
   ~octave_user_function (void);
 
   octave_function *function_value (bool = false) { return this; }
 
+  octave_user_function *user_function_value (bool = false) { return this; }
+
   octave_user_function *define_param_list (tree_parameter_list *t);
 
   octave_user_function *define_ret_list (tree_parameter_list *t);
 
   void stash_fcn_file_name (const std::string& nm);
 
   void stash_leading_comment (octave_comment_list *lc) { lead_comm = lc; }
 
diff --git a/src/ov.cc b/src/ov.cc
--- a/src/ov.cc
+++ b/src/ov.cc
@@ -950,16 +950,22 @@ octave_value::streamoff_array_value (voi
 }
 
 octave_function *
 octave_value::function_value (bool silent)
 {
   return rep->function_value (silent);
 }
 
+octave_user_function *
+octave_value::user_function_value (bool silent)
+{
+  return rep->user_function_value (silent);
+}
+
 octave_fcn_handle *
 octave_value::fcn_handle_value (bool silent)
 {
   return rep->fcn_handle_value (silent);
 }
 
 octave_value_list
 octave_value::list_value (void) const
diff --git a/src/ov.h b/src/ov.h
--- a/src/ov.h
+++ b/src/ov.h
@@ -46,16 +46,17 @@ Software Foundation, 59 Temple Place - S
 
 class Cell;
 class fcn_handle_array;
 class streamoff_array;
 class Octave_map;
 class octave_stream;
 class octave_streamoff;
 class octave_function;
+class octave_user_function;
 class octave_fcn_handle;
 class octave_value_list;
 class octave_lvalue;
 
 // Constants.
 
 // This just provides a way to avoid infinite recursion when building
 // octave_value objects.
@@ -557,16 +558,18 @@ public:
   virtual int stream_number (void) const;
 
   virtual std::streamoff streamoff_value (void) const;
 
   virtual streamoff_array streamoff_array_value (void) const;
 
   virtual octave_function *function_value (bool silent = false);
 
+  virtual octave_user_function *user_function_value (bool silent = false);
+
   virtual octave_fcn_handle *fcn_handle_value (bool silent = false);
 
   virtual octave_value_list list_value (void) const;
 
   ColumnVector column_vector_value (bool frc_str_conv = false,
 			     bool frc_vec_conv = false) const;
 
   ComplexColumnVector
diff --git a/src/variables.cc b/src/variables.cc
--- a/src/variables.cc
+++ b/src/variables.cc
@@ -71,17 +71,17 @@ symbol_table *curr_sym_tab = 0;
 symbol_table *curr_caller_sym_tab = 0;
 
 // Symbol table for global symbols.
 symbol_table *global_sym_tab = 0;
 
 // Symbol table for functions and built-in symbols.
 symbol_table *fbi_sym_tab = 0;
 
-static inline bool
+bool
 at_top_level (void)
 {
   return (curr_sym_tab == top_level_sym_tab);
 }
 
 // Initialization.
 
 // Create the initial symbol tables and set the current scope at the
@@ -294,20 +294,24 @@ octave_function *
 is_valid_function (const octave_value& arg,
 		   const std::string& warn_for, bool warn)
 {
   octave_function *ans = 0;
 
   std::string fcn_name;
 
   if (arg.is_string ())
-    fcn_name = arg.string_value ();
+    {
+      fcn_name = arg.string_value ();
 
-  if (! error_state)
-    ans = is_valid_function (fcn_name, warn_for, warn);
+      if (! error_state)
+	ans = is_valid_function (fcn_name, warn_for, warn);
+      else if (warn)
+	error ("%s: expecting function name as argument", warn_for.c_str ());
+    }
   else if (warn)
     error ("%s: expecting function name as argument", warn_for.c_str ());
 
   return ans;
 }
 
 octave_function *
 extract_function (const octave_value& arg, const std::string& warn_for,
@@ -835,16 +839,48 @@ lookup_function (const std::string& nm)
 
       if (v.is_function ())
 	retval = v.function_value ();
     }
 
   return retval;
 }
 
+octave_user_function *
+lookup_user_function (const std::string& nm)
+{
+  octave_user_function *retval = 0;
+
+  symbol_record *sr = 0;
+
+  if (curr_parent_function)
+    {
+      std::string parent = curr_parent_function->function_name ();
+
+      sr = fbi_sym_tab->lookup (parent + ":" + nm);
+    }
+
+  if (! sr || ! sr->is_user_function ())
+    {
+      sr = fbi_sym_tab->lookup (nm, true);
+
+      if (sr && ! sr->is_user_function ())
+	load_fcn_from_file (sr, false);
+    }
+
+  if (sr)
+    {
+      octave_value v = sr->def ();
+
+      retval = v.user_function_value (true);
+    }
+
+  return retval;
+}
+
 octave_value
 get_global_value (const std::string& nm)
 {
   octave_value retval;
 
   symbol_record *sr = global_sym_tab->lookup (nm);
 
   if (sr)
diff --git a/src/variables.h b/src/variables.h
--- a/src/variables.h
+++ b/src/variables.h
@@ -19,32 +19,35 @@ along with Octave; see the file COPYING.
 Software Foundation, 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 
 */
 
 #if !defined (octave_variables_h)
 #define octave_variables_h 1
 
 class octave_function;
+class octave_user_function;
 class symbol_record;
 class symbol_table;
 
 class tree_identifier;
 class octave_value;
 class octave_value_list;
 class octave_builtin;
 class octave_mapper;
 class string_vector;
 
 #include <string>
 
 #include "ov.h"
 #include "ov-builtin.h"
 #include "symtab.h"
 
+extern bool at_top_level (void);
+
 extern void initialize_symbol_tables (void);
 
 extern bool is_builtin_variable (const std::string&);
 extern bool is_command_name (const std::string&);
 extern bool is_mapper_function_name (const std::string&);
 extern bool is_builtin_function_name (const std::string&);
 extern bool is_globally_visible (const std::string&);
 
@@ -78,16 +81,19 @@ symbol_exist (const std::string& name,
 extern bool lookup (symbol_record *s, bool exec_script = true);
 
 extern symbol_record *
 lookup_by_name (const std::string& nm, bool exec_script = true);
 
 extern octave_function *
 lookup_function (const std::string& nm);
 
+extern octave_user_function *
+lookup_user_function (const std::string& nm);
+
 extern octave_value get_global_value (const std::string& nm);
 
 extern void set_global_value (const std::string& nm, const octave_value& val);
 
 extern std::string builtin_string_variable (const std::string&);
 extern int builtin_real_scalar_variable (const std::string&, double&);
 extern octave_value builtin_any_variable (const std::string&);
 
