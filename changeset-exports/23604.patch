# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1497464396 14400
#      Wed Jun 14 14:19:56 2017 -0400
# Node ID b0e9c030f063fb800e21833f3f7f16d7a7e1cf1a
# Parent  18bd46c4b79aa62fd799d80b8a378e750b59c11e
eliminate some warnings introduced by recent changes

* error.cc, help.cc, symtab.cc, symtab.h, variables.cc, pt-eval.cc:
Eliminate unused variable and deprecated function warnings.

diff --git a/libinterp/corefcn/error.cc b/libinterp/corefcn/error.cc
--- a/libinterp/corefcn/error.cc
+++ b/libinterp/corefcn/error.cc
@@ -1499,18 +1499,16 @@ disable escape sequence expansion use a 
       string_vector argv = args.make_argv ("warning");
 
       std::string arg1 = argv[1];
       std::string arg2 = "all";
 
       if (nargin >= 2)
         arg2 = argv[2];
 
-      octave::call_stack& cs = interp.get_call_stack ();
-
       if (arg1 == "on" || arg1 == "off" || arg1 == "error")
         {
           octave_map old_warning_options = warning_options;
 
           symbol_table& symtab = interp.get_symbol_table ();
 
           if (nargin == 3 && argv[3] == "local"
               && ! symtab.at_top_level ())
diff --git a/libinterp/corefcn/help.cc b/libinterp/corefcn/help.cc
--- a/libinterp/corefcn/help.cc
+++ b/libinterp/corefcn/help.cc
@@ -155,21 +155,22 @@ local_functions (void)
 
   octave::call_stack& cs = octave::__get_call_stack__ ("local_functions");
 
   octave_user_code *curr_fcn = cs.caller_user_code ();
 
   if (! curr_fcn)
     return retval;
 
-  symbol_table& symtab = octave::__get_symbol_table__ ("local_functions");
-
   // All subfunctions are listed in the top-level function of this file.
   while (curr_fcn->is_subfunction ())
-    curr_fcn = symtab.get_curr_fcn (curr_fcn->parent_fcn_scope ());
+    {
+      symbol_table::scope *pscope = curr_fcn->parent_fcn_scope ();
+      curr_fcn = pscope->function ();
+    }
 
   // Get subfunctions.
   const std::list<std::string> names = curr_fcn->subfunction_names ();
 
   size_t sz = names.size ();
   retval.resize (sz);
 
   // Loop over them.
diff --git a/libinterp/corefcn/symtab.cc b/libinterp/corefcn/symtab.cc
--- a/libinterp/corefcn/symtab.cc
+++ b/libinterp/corefcn/symtab.cc
@@ -106,29 +106,23 @@ symbol_table::symbol_record::symbol_reco
 
 
   symtab.erase_persistent (name);
 }
 
 symbol_table::symbol_record::symbol_record_rep *
 symbol_table::symbol_record::symbol_record_rep::dup (scope *new_scope) const
 {
-  symbol_table& symtab
-    = octave::__get_symbol_table__ ("symbol_table::symbol_record::symbol_record_rep::dup");
-
   return new symbol_record_rep (new_scope, name, varval (), storage_class);
 }
 
 void
 symbol_table::symbol_record::symbol_record_rep::dump
   (std::ostream& os, const std::string& prefix) const
 {
-  symbol_table& symtab
-    = octave::__get_symbol_table__ ("symbol_table::symbol_record::symbol_record_rep::dump");
-
   octave_value val = varval ();
 
   os << prefix << name;
 
   if (val.is_defined ())
     {
       os << " ["
          << (is_local () ? "l" : "")
diff --git a/libinterp/corefcn/symtab.h b/libinterp/corefcn/symtab.h
--- a/libinterp/corefcn/symtab.h
+++ b/libinterp/corefcn/symtab.h
@@ -1854,17 +1854,17 @@ public:
 
         if (! parents.empty ())
           retval.insert (retval.end (), parents.begin (), parents.end ());
       }
 
     return retval;
   }
 
- OCTAVE_DEPRECATED ("use 'get_scope' with 'get_curr_fcn (name)' instead")
+  OCTAVE_DEPRECATED ("use 'get_scope' with 'function ()' instead")
   octave_user_function * get_curr_fcn (scope *sid)
   {
     return sid ? sid->function () : 0;
   }
 
   octave_user_function * get_curr_fcn (void)
   {
     return m_current_scope ? m_current_scope->function () : 0;
diff --git a/libinterp/corefcn/variables.cc b/libinterp/corefcn/variables.cc
--- a/libinterp/corefcn/variables.cc
+++ b/libinterp/corefcn/variables.cc
@@ -1185,21 +1185,19 @@ private:
       : name (expr_str.empty () ? sr.name () : expr_str),
         varval (),
         is_automatic (sr.is_automatic ()),
         is_complex (varval.iscomplex ()),
         is_formal (sr.is_formal ()),
         is_global (sr.is_global ()),
         is_persistent (sr.is_persistent ())
     {
-      symbol_table& symtab = octave::__get_symbol_table__ ("symbol_info");
-
       varval = (expr_val.is_undefined () ? sr.varval () : expr_val);
 
-      is_complex = varval.is_complex_type ();
+      is_complex = varval.iscomplex ();
     }
 
     void display_line (std::ostream& os,
                        const std::list<whos_parameter>& params) const
     {
       std::string dims_str = get_dims_str (varval);
 
       std::list<whos_parameter>::const_iterator i = params.begin ();
diff --git a/libinterp/parse-tree/pt-eval.cc b/libinterp/parse-tree/pt-eval.cc
--- a/libinterp/parse-tree/pt-eval.cc
+++ b/libinterp/parse-tree/pt-eval.cc
@@ -979,19 +979,16 @@ namespace octave
 
   void
   tree_evaluator::visit_identifier (tree_identifier& expr)
   {
     octave_value_list retval;
 
     symbol_table::symbol_reference sym = expr.symbol ();
 
-    symbol_table::scope *scope = __get_current_scope__ ("visitor");
-    symbol_table::context_id context = scope ? scope->current_context () : 0;
-
     octave_value val = sym->find ();
 
     if (val.is_defined ())
       {
         // GAGME -- this would be cleaner if we required
         // parens to indicate function calls.
         //
         // If this identifier refers to a function, we need to know
