# HG changeset patch
# User Brian Gough <bjg@gnu.org>
# Date 1231824340 18000
#      Tue Jan 13 00:25:40 2009 -0500
# Node ID 00df69d7e6982b0824b5d25fc78b39ff2fba5bd0
# Parent  8ae26422a6ced796aa7036dc857ad7e63446358f
[docs] capitalize Octave consistently

diff --git a/doc/interpreter/eval.txi b/doc/interpreter/eval.txi
--- a/doc/interpreter/eval.txi
+++ b/doc/interpreter/eval.txi
@@ -166,14 +166,14 @@ Here, @samp{caller} is the @code{process
 You can set and use variables at the command prompt
 using the context @samp{base} rather than @samp{caller}.
 
 These functions are rarely used in practice.  One
 example is the @code{fail (@samp{code}, @samp{pattern})} function
 which evaluates @samp{code} in the caller's context and
 checks that the error message it produces matches
 the given pattern.  Other examples such as @code{save} and @code{load}
-are written in C++ where all octave variables
+are written in C++ where all Octave variables
 are in the @samp{caller} context and @code{evalin} is not needed.
 
 @DOCSTRING(evalin)
 
 @DOCSTRING(assignin)
diff --git a/doc/interpreter/install.txi b/doc/interpreter/install.txi
--- a/doc/interpreter/install.txi
+++ b/doc/interpreter/install.txi
@@ -210,17 +210,17 @@ see @ref{Trouble},
 @ifset INSTALLONLY
 see the file BUGS
 @end ifset
 for information about how to report bugs.
 
 @item
 Once you have successfully compiled Octave, run @samp{make install}.
 
-This will install a copy of octave, its libraries, and its documentation
+This will install a copy of Octave, its libraries, and its documentation
 in the destination directory.  As distributed, Octave is installed in
 the following directories.  In the table below, @var{prefix} defaults to
 @file{/usr/local}, @var{version} stands for the current version number
 of the interpreter, and @var{arch} is the type of computer on which
 Octave is installed (for example, @samp{i586-unknown-gnu}).
 
 @table @file
 @item @var{prefix}/bin
diff --git a/doc/interpreter/testfun.txi b/doc/interpreter/testfun.txi
--- a/doc/interpreter/testfun.txi
+++ b/doc/interpreter/testfun.txi
@@ -31,17 +31,17 @@ and demonstration code in the source cod
 
 @node Test Functions
 @section Test Functions
 
 @DOCSTRING(test)
 
 @code{test} scans the named script file looking for lines which
 start with @code{%!}. The prefix is stripped off and the rest of the
-line is processed through the octave interpreter. If the code
+line is processed through the Octave interpreter. If the code
 generates an error, then the test is said to fail.
 
 Since @code{eval()} will stop at the first error it encounters, you must
 divide your tests up into blocks, with anything in a separate
 block evaluated separately.  Blocks are introduced by the keyword
 @code{test} immediately following the @code{%!}.  For example,
 
 @example
@@ -280,17 +280,17 @@ or
    /*
    %!test disp('this is a test')
    */
 @end group
 @end example
 
 but then the code will have to be on the load path and the user 
 will have to remember to type test('name.cc').  Conversely, you
-can separate the tests from normal octave script files by putting
+can separate the tests from normal Octave script files by putting
 them in plain files with no extension rather than in script files.
 @c DO I WANT TO INCLUDE THE EDITOR SPECIFIC STATEMENT BELOW???
 @c Don't forget to tell emacs that the plain text file you are using
 @c is actually octave code, using something like:
 @c   -*-octave-*-
 
 @DOCSTRING(assert)
 
diff --git a/doc/interpreter/var.txi b/doc/interpreter/var.txi
--- a/doc/interpreter/var.txi
+++ b/doc/interpreter/var.txi
@@ -221,17 +221,17 @@ all persistent declarations.
 persistent a
 persistent a b
 persistent c = 2
 persistent d = 3 e f = 5
 @end group
 @end example
 
 The behavior of persistent variables is equivalent to the behavior of
-static variables in C. The command @code{static} in octave is also
+static variables in C. The command @code{static} in Octave is also
 recognized and is equivalent to @code{persistent}.
 
 Like global variables, a persistent variable may only be initialized once.
 For example, after executing the following code
 
 @example
 @group
 persistent pvar = 1
diff --git a/scripts/testfun/demo.m b/scripts/testfun/demo.m
--- a/scripts/testfun/demo.m
+++ b/scripts/testfun/demo.m
@@ -20,17 +20,17 @@
 ## @deftypefn {Function File} {} demo ('@var{name}',@var{n})
 ##
 ## Runs any examples associated with the function '@var{name}'.  
 ## Examples are stored in the script file, or in a file with the same 
 ## name but no extension somewhere on your path.  To keep them separate 
 ## from the usual script code, all lines are prefixed by @code{%!}. Each
 ## example is introduced by the keyword 'demo' flush left to the prefix,
 ## with no intervening spaces.  The remainder of the example can contain 
-## arbitrary octave code. For example:
+## arbitrary Octave code. For example:
 ##
 ## @example
 ##    %!demo
 ##    %! t=0:0.01:2*pi; x = sin(t);
 ##    %! plot(t,x)
 ##    %! %-------------------------------------------------
 ##    %! % the figure window shows one cycle of a sine wave
 ## @end example
diff --git a/scripts/testfun/test.m b/scripts/testfun/test.m
--- a/scripts/testfun/test.m
+++ b/scripts/testfun/test.m
@@ -42,17 +42,17 @@
 ## user interaction.
 ##
 ## @item 'verbose'
 ## Do tests which require user interaction.
 ## @end table
 ##
 ## The argument @var{fid} can be used to allow batch processing. Errors
 ## can be written to the already open file defined by @var{fid}, and 
-## hopefully when octave crashes this file will tell you what was happening
+## hopefully when Octave crashes this file will tell you what was happening
 ## when it did. You can use @code{stdout} if you want to see the results as
 ## they happen.  You can also give a file name rather than an @var{fid}, in
 ## which case the contents of the file will be replaced with the log from 
 ## the current test.
 ##
 ## Called with a single output argument @var{success}, @code{test} returns
 ## true if all of the tests were successful. Called with two output arguments
 ## @var{n} and @var{max}, the number of successful tests and the total number
