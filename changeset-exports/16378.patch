# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1364415155 14400
#      Wed Mar 27 16:12:35 2013 -0400
# Node ID b28ae106e316a3feb10481ed1657788de22814ab
# Parent  8430ea8c1594461c6746698f691c1ea1935a7cdc
use class for lists of input hook functions

* input.cc (hook_function_list): New class.
(hook_fcn_map_type): Delete typedef.
(pre_input_event_hook_functions): Declare as hook_function_list.
Rename from pre_input_event_hook_fcn_map.  Change all uses.
(input_event_hook_functions): Declare as hook_function_list.  Rename
from input_event_hook_fcn_map.  Change all uses.
(post_input_event_hook_functions): Declare as hook_function_list.
Rename from post_input_event_hook_fcn_map.  Change all uses.
(dbstop_event_hook_functions): Declare as hook_function_list.  Rename
from dbstop_event_hook_fcn_map.  Change all uses.
(process_input_event_hook_functions): Delete.  Change all uses to call
hook_function_list::run instead.

diff --git a/libinterp/interpfcn/input.cc b/libinterp/interpfcn/input.cc
--- a/libinterp/interpfcn/input.cc
+++ b/libinterp/interpfcn/input.cc
@@ -286,49 +286,100 @@ hook_function::hook_function (const octa
   else if (f.is_function_handle ())
     {
       rep = new fcn_handle_hook_function (f, d);
     }
   else
     error ("invalid hook function");
 }
 
-typedef std::map<std::string, hook_function> hook_fcn_map_type;
+class
+hook_function_list
+{
+public:
+
+  typedef std::map<std::string, hook_function> map_type;
 
-static hook_fcn_map_type pre_input_event_hook_fcn_map;
-static hook_fcn_map_type input_event_hook_fcn_map;
-static hook_fcn_map_type post_input_event_hook_fcn_map;
-static hook_fcn_map_type dbstop_event_hook_fcn_map;
+  typedef map_type::iterator iterator;
+  typedef map_type::const_iterator const_iterator;
+
+  hook_function_list (void) : fcn_map () { }
+
+  ~hook_function_list (void) { }
 
-static void
-process_input_event_hook_functions
-  (hook_fcn_map_type& hook_fcn_map,
-   const octave_value_list& initial_args = octave_value_list ())
-{
-  hook_fcn_map_type::iterator p = hook_fcn_map.begin ();
+  hook_function_list (const hook_function_list& lst)
+    : fcn_map (lst.fcn_map)
+  { }
+
+  hook_function_list& operator = (const hook_function_list& lst)
+  {
+    if (&lst != this)
+      fcn_map = lst.fcn_map;
+
+    return *this;
+  }
+
+  bool empty (void) const { return fcn_map.empty (); }
+
+  void clear (void) { fcn_map.clear (); }
+
+  void insert (const std::string& id, const hook_function& f)
+  {
+    fcn_map[id] = f;
+  }
 
-  while (p != hook_fcn_map.end ())
-    {
-      std::string hook_fcn_id = p->first;
-      hook_function hook_fcn = p->second;
+  iterator find (const std::string& id)
+  {
+    return fcn_map.find (id);
+  }
+
+  const_iterator find (const std::string& id) const
+  {
+    return fcn_map.find (id);
+  }
 
-      hook_fcn_map_type::iterator q = p++;
+  iterator end (void) { return fcn_map.end (); }
+
+  const_iterator end (void) const { return fcn_map.end (); }
+
+  void erase (iterator p) { fcn_map.erase (p); }
+
+  void run (const octave_value_list& initial_args = octave_value_list ())
+  {
+    iterator p = fcn_map.begin ();
 
-      if (hook_fcn.is_valid ())
-        hook_fcn.eval (initial_args);
-      else
-        hook_fcn_map.erase (q);
-    }
-}
+    while (p != fcn_map.end ())
+      {
+        std::string hook_fcn_id = p->first;
+        hook_function hook_fcn = p->second;
+
+        iterator q = p++;
+
+        if (hook_fcn.is_valid ())
+          hook_fcn.eval (initial_args);
+        else
+          fcn_map.erase (q);
+      }
+  }
+
+private:
+
+  map_type fcn_map;
+};
+
+static hook_function_list pre_input_event_hook_functions;
+static hook_function_list input_event_hook_functions;
+static hook_function_list post_input_event_hook_functions;
+static hook_function_list dbstop_event_hook_functions;
 
 // For octave_quit.
 void
 remove_input_event_hook_functions (void)
 {
-  input_event_hook_fcn_map.clear ();
+  input_event_hook_functions.clear ();
 }
 
 void
 octave_base_reader::do_input_echo (const std::string& input_string) const
 {
   int do_echo = LEXER->reading_script_file ?
     (Vecho_executing_commands & ECHO_SCRIPTS)
       : (Vecho_executing_commands & ECHO_CMD_LINE) && ! forced_interactive;
@@ -401,17 +452,17 @@ octave_base_reader::octave_gets (bool& e
   eof = false;
 
   std::string retval;
 
   // Process pre input event hook function prior to flushing output and
   // printing the prompt.
 
   if (interactive || forced_interactive)
-    process_input_event_hook_functions (pre_input_event_hook_fcn_map);
+    pre_input_event_hook_functions.run ();
 
   bool history_skip_auto_repeated_debugging_command = false;
 
   std::string ps = (pflag > 0) ? VPS1 : VPS2;
 
   std::string prompt = command_editor::decode_prompt_string (ps);
 
   pipe_handler_error_count = 0;
@@ -457,17 +508,17 @@ octave_base_reader::octave_gets (bool& e
     }
   else
     octave_diary << "\n";
 
   // Process post input event hook function after the internal history
   // list has been updated.
 
   if (interactive || forced_interactive)
-    process_input_event_hook_functions (post_input_event_hook_fcn_map);
+    post_input_event_hook_functions.run ();
 
   return retval;
 }
 
 // Fix things up so that input can come from the standard input.  This
 // may need to become much more complicated, which is why it's in a
 // separate function.
 
@@ -695,18 +746,17 @@ get_debug_input (const std::string& prom
             {
               octave_scalar_map location_info_map;
 
               location_info_map.setfield ("file", nm);
               location_info_map.setfield ("line", curr_debug_line);
 
               octave_value location_info (location_info_map);
 
-              process_input_event_hook_functions (dbstop_event_hook_fcn_map,
-                                                  location_info);
+              dbstop_event_hook_functions.run (location_info);
 
               std::string line_buf
                 = get_file_line (nm, curr_debug_line);
 
               if (! line_buf.empty ())
                 buf << "\n" << curr_debug_line << ": " << line_buf;
             }
         }
@@ -1305,17 +1355,17 @@ the list of input hook functions.\n\
 
       if (nargin == 2)
         user_data = args(1);
 
       hook_function hook_fcn (args(0), user_data);
 
       if (! error_state)
         {
-          pre_input_event_hook_fcn_map[hook_fcn.id ()] = hook_fcn;
+          pre_input_event_hook_functions.insert (hook_fcn.id (), hook_fcn);
 
           retval = hook_fcn.id ();
         }
       else
         error ("add_pre_input_event_hook: expecting string as first arg");
     }
   else
     print_usage ();
@@ -1340,40 +1390,40 @@ interactive user input.\n\
   if (nargin == 1 || nargin == 2)
     {
       std::string hook_fcn_id = args(0).string_value ();
 
       bool warn = (nargin < 2);
 
       if (! error_state)
         {
-          hook_fcn_map_type::iterator p
-            = pre_input_event_hook_fcn_map.find (hook_fcn_id);
+          hook_function_list::iterator p
+            = pre_input_event_hook_functions.find (hook_fcn_id);
 
-          if (p != pre_input_event_hook_fcn_map.end ())
-            pre_input_event_hook_fcn_map.erase (p);
+          if (p != pre_input_event_hook_functions.end ())
+            pre_input_event_hook_functions.erase (p);
           else if (warn)
             warning ("remove_pre_input_event_hook: %s not found in list",
                      hook_fcn_id.c_str ());
         }
       else
         error ("remove_pre_input_event_hook: argument not valid as a hook function name or id");
     }
   else
     print_usage ();
 
   return retval;
 }
  
 static int
 internal_input_event_hook_fcn (void)
 {
-  process_input_event_hook_functions (input_event_hook_fcn_map);
+  input_event_hook_functions.run ();
 
-  if (input_event_hook_fcn_map.empty ())
+  if (input_event_hook_functions.empty ())
     command_editor::remove_event_hook (internal_input_event_hook_fcn);
 
   return 0;
 }
 
 DEFUN (add_input_event_hook, args, ,
   "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {@var{id} =} add_input_event_hook (@var{fcn})\n\
@@ -1404,20 +1454,20 @@ the list of input hook functions.\n\
 
       if (nargin == 2)
         user_data = args(1);
 
       hook_function hook_fcn (args(0), user_data);
 
       if (! error_state)
         {
-          if (input_event_hook_fcn_map.empty ())
+          if (input_event_hook_functions.empty ())
             command_editor::add_event_hook (internal_input_event_hook_fcn);
 
-          input_event_hook_fcn_map[hook_fcn.id ()] = hook_fcn;
+          input_event_hook_functions.insert (hook_fcn.id (), hook_fcn);
 
           retval = hook_fcn.id ();
         }
       else
         error ("add_input_event_hook: expecting function handle or character string as first argument");
     }
   else
     print_usage ();
@@ -1442,26 +1492,26 @@ for input.\n\
   if (nargin == 1 || nargin == 2)
     {
       std::string hook_fcn_id = args(0).string_value ();
 
       bool warn = (nargin < 2);
 
       if (! error_state)
         {
-          hook_fcn_map_type::iterator p
-            = input_event_hook_fcn_map.find (hook_fcn_id);
+          hook_function_list::iterator p
+            = input_event_hook_functions.find (hook_fcn_id);
 
-          if (p != input_event_hook_fcn_map.end ())
-            input_event_hook_fcn_map.erase (p);
+          if (p != input_event_hook_functions.end ())
+            input_event_hook_functions.erase (p);
           else if (warn)
             warning ("remove_input_event_hook: %s not found in list",
                      hook_fcn_id.c_str ());
 
-          if (input_event_hook_fcn_map.empty ())
+          if (input_event_hook_functions.empty ())
             command_editor::remove_event_hook (internal_input_event_hook_fcn);
         }
       else
         error ("remove_input_event_hook: argument not valid as a hook function name or id");
     }
   else
     print_usage ();
 
@@ -1498,17 +1548,17 @@ the list of input hook functions.\n\
 
       if (nargin == 2)
         user_data = args(1);
 
       hook_function hook_fcn (args(0), user_data);
 
       if (! error_state)
         {
-          post_input_event_hook_fcn_map[hook_fcn.id ()] = hook_fcn;
+          post_input_event_hook_functions.insert (hook_fcn.id (), hook_fcn);
 
           retval = hook_fcn.id ();
         }
       else
         error ("add_post_input_event_hook: expecting string as first arg");
     }
   else
     print_usage ();
@@ -1533,21 +1583,21 @@ interactive user input.\n\
   if (nargin == 1 || nargin == 2)
     {
       std::string hook_fcn_id = args(0).string_value ();
 
       bool warn = (nargin < 2);
 
       if (! error_state)
         {
-          hook_fcn_map_type::iterator p
-            = post_input_event_hook_fcn_map.find (hook_fcn_id);
+          hook_function_list::iterator p
+            = post_input_event_hook_functions.find (hook_fcn_id);
 
-          if (p != post_input_event_hook_fcn_map.end ())
-            post_input_event_hook_fcn_map.erase (p);
+          if (p != post_input_event_hook_functions.end ())
+            post_input_event_hook_functions.erase (p);
           else if (warn)
             warning ("remove_post_input_event_hook: %s not found in list",
                      hook_fcn_id.c_str ());
         }
       else
         error ("remove_post_input_event_hook: argument not valid as a hook function name or id");
     }
   else
@@ -1595,17 +1645,17 @@ the list of input hook functions.\n\
 
       if (nargin == 2)
         user_data = args(1);
 
       hook_function hook_fcn (args(0), user_data);
 
       if (! error_state)
         {
-          dbstop_event_hook_fcn_map[hook_fcn.id ()] = hook_fcn;
+          dbstop_event_hook_functions.insert (hook_fcn.id (), hook_fcn);
 
           retval = hook_fcn.id ();
         }
       else
         error ("add_dbstop_event_hook: expecting string as first arg");
     }
   else
     print_usage ();
@@ -1630,21 +1680,21 @@ interactive user input.\n\
   if (nargin == 1 || nargin == 2)
     {
       std::string hook_fcn_id = args(0).string_value ();
 
       bool warn = (nargin < 2);
 
       if (! error_state)
         {
-          hook_fcn_map_type::iterator p
-            = dbstop_event_hook_fcn_map.find (hook_fcn_id);
+          hook_function_list::iterator p
+            = dbstop_event_hook_functions.find (hook_fcn_id);
 
-          if (p != dbstop_event_hook_fcn_map.end ())
-            dbstop_event_hook_fcn_map.erase (p);
+          if (p != dbstop_event_hook_functions.end ())
+            dbstop_event_hook_functions.erase (p);
           else if (warn)
             warning ("remove_dbstop_event_hook: %s not found in list",
                      hook_fcn_id.c_str ());
         }
       else
         error ("remove_dbstop_event_hook: argument not valid as a hook function name or id");
     }
   else
