# HG changeset patch
# User Mike Miller <mtmiller@octave.org>
# Date 1449944570 18000
#      Sat Dec 12 13:22:50 2015 -0500
# Node ID ead4100404180e4b52a180a2120b4b95e54b188f
# Parent  1e4edab2d22f4018db3e95a11fa790b2c22fcae4
2015 Code Sprint: mark bessel functions as tested

* besselj.cc (Fbesselj, Fbessely, Fbesseli, Fbesselk, Fbesselh): Mark as tested
at the end of the file.  (Fairy): Mark as not yet tested.

diff --git a/libinterp/corefcn/besselj.cc b/libinterp/corefcn/besselj.cc
--- a/libinterp/corefcn/besselj.cc
+++ b/libinterp/corefcn/besselj.cc
@@ -378,43 +378,59 @@ Complete loss of significance by argumen
 Error---no computation, algorithm termination condition not met,\n\
 return @code{NaN}.\n\
 @end enumerate\n\
 @end deftypefn")
 {
   return do_bessel (BESSEL_J, "besselj", args, nargout);
 }
 
+/*
+%!# Function besselj is tested along with other bessels at the end of this file
+*/
+
 DEFUN (bessely, args, nargout,
        "-*- texinfo -*-\n\
 @deftypefn {} {[@var{y}, @var{ierr}] =} bessely (@var{alpha}, @var{x}, @var{opt})\n\
 See besselj.\n\
 @end deftypefn")
 {
   return do_bessel (BESSEL_Y, "bessely", args, nargout);
 }
 
+/*
+%!# Function bessely is tested along with other bessels at the end of this file
+*/
+
 DEFUN (besseli, args, nargout,
        "-*- texinfo -*-\n\
 @deftypefn {} {[@var{i}, @var{ierr}] =} besseli (@var{alpha}, @var{x}, @var{opt})\n\
 See besselj.\n\
 @end deftypefn")
 {
   return do_bessel (BESSEL_I, "besseli", args, nargout);
 }
 
+/*
+%!# Function besseli is tested along with other bessels at the end of this file
+*/
+
 DEFUN (besselk, args, nargout,
        "-*- texinfo -*-\n\
 @deftypefn {} {[@var{k}, @var{ierr}] =} besselk (@var{alpha}, @var{x}, @var{opt})\n\
 See besselj.\n\
 @end deftypefn")
 {
   return do_bessel (BESSEL_K, "besselk", args, nargout);
 }
 
+/*
+%!# Function besselk is tested along with other bessels at the end of this file
+*/
+
 DEFUN (besselh, args, nargout,
        "-*- texinfo -*-\n\
 @deftypefn {} {[@var{h}, @var{ierr}] =} besselh (@var{alpha}, @var{k}, @var{x}, @var{opt})\n\
 See besselj.\n\
 @end deftypefn")
 {
   octave_value_list retval;
 
@@ -445,16 +461,20 @@ See besselj.\n\
         retval = do_bessel (BESSEL_H2, "besselh", tmp_args, nargout);
       else
         error ("besselh: K must be 1 or 2");
     }
 
   return retval;
 }
 
+/*
+%!# Function besselh is tested along with other bessels at the end of this file
+*/
+
 DEFUN (airy, args, nargout,
        "-*- texinfo -*-\n\
 @deftypefn {} {[@var{a}, @var{ierr}] =} airy (@var{k}, @var{z}, @var{opt})\n\
 Compute Airy functions of the first and second kind, and their derivatives.\n\
 \n\
 @example\n\
 @group\n\
  K   Function   Scale factor (if \"opt\" is supplied)\n\
@@ -552,16 +572,20 @@ return @code{NaN}.\n\
 
       retval(0) = result;
     }
 
   return retval;
 }
 
 /*
+%!# FIXME: Function airy does not yet have BIST tests
+*/
+
+/*
 ## Test values computed with GP/PARI version 2.3.3
 %!shared alpha, x, jx, yx, ix, kx, nix
 %!
 %! ## Bessel functions, even order, positive and negative x
 %! alpha = 2;  x = 1.25;
 %! jx = 0.1710911312405234823613091417;
 %! yx = -1.193199310178553861283790424;
 %! ix = 0.2220184483766341752692212604;
