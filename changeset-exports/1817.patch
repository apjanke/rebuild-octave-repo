# HG changeset patch
# User jwe
# Date 822949956 0
#      Mon Jan 29 21:12:36 1996 +0000
# Node ID 13c1e0718d68e9e6aaa1e8f5ad3e62c2c693c2e3
# Parent  747a99cbe1b00544746b70e3e282442329ecec45
[project @ 1996-01-29 21:12:36 by jwe]

diff --git a/src/octave.cc b/src/octave.cc
--- a/src/octave.cc
+++ b/src/octave.cc
@@ -40,18 +40,16 @@ Software Foundation, 59 Temple Place - S
 
 #ifdef HAVE_UNISTD_H
 #include <sys/types.h>
 #include <unistd.h>
 #endif
 
 #include <pwd.h>
 
-#include "getopt.h"
-
 #include "lo-error.h"
 
 #include "builtins.h"
 #include "defaults.h"
 #include "defun.h"
 #include "dynamic-ld.h"
 #include "error.h"
 #include "file-io.h"
@@ -60,16 +58,17 @@ Software Foundation, 59 Temple Place - S
 #include "input.h"
 #include "lex.h"
 #include "oct-hist.h"
 #include "toplev.h"
 #include "pager.h"
 #include "parse.h"
 #include "pathsearch.h"
 #include "procstream.h"
+#include "prog-args.h"
 #include "sighandlers.h"
 #include "sysdep.h"
 #include "pt-const.h"
 #include "pt-misc.h"
 #include "pt-plot.h"
 #include "unwind-prot.h"
 #include "user-prefs.h"
 #include "utils.h"
@@ -121,17 +120,17 @@ static const char *usage_string =
 static const char *short_opts = "+?Vdfhip:qvx";
 
 // Long options.  See the comments in getopt.h for the meanings of the
 // fields in this structure.
 #define EXEC_PATH_OPTION 1
 #define INFO_FILE_OPTION 2
 #define INFO_PROG_OPTION 3
 #define TRADITIONAL_OPTION 4
-static struct option long_opts[] =
+long_options long_opts[] =
   {
     { "debug",            no_argument,       0, 'd' },
     { "echo-commands",    no_argument,       0, 'x' },
     { "exec-path",        required_argument, 0, EXEC_PATH_OPTION },
     { "help",             no_argument,       0, 'h' },
     { "interactive",      no_argument,       0, 'i' },
     { "info-file",        required_argument, 0, INFO_FILE_OPTION },
     { "info-program",     required_argument, 0, INFO_PROG_OPTION },
@@ -396,18 +395,20 @@ main (int argc, char **argv)
   sysdep_init ();
 
   initialize_error_handlers ();
 
   initialize_globals (argv[0]);
 
   initialize_pathsearch ();
 
+  prog_args args (argc, argv, short_opts, long_opts);
+
   int optc;
-  while ((optc = getopt_long (argc, argv, short_opts, long_opts, 0)) != EOF)
+  while ((optc = args.getopt ()) != EOF)
     {
       switch (optc)
 	{
 	case 'V':
 	  verbose_flag++;
 	  break;
 
 	case 'd':
@@ -423,45 +424,45 @@ main (int argc, char **argv)
 	  verbose_usage ();
 	  break;
 
 	case 'i':
 	  forced_interactive = 1;
 	  break;
 
 	case 'p':
-	  if (optarg)
-	    load_path = string (optarg);
+	  if (args.optarg ())
+	    load_path = string (args.optarg ());
 	  break;
 
 	case 'q':
 	  inhibit_startup_message = 1;
 	  break;
 
 	case 'x':
 	  echo_commands = (ECHO_SCRIPTS | ECHO_FUNCTIONS | ECHO_CMD_LINE);
 	  break;
 
 	case 'v':
 	  print_version_and_exit ();
 	  break;
 
 	case EXEC_PATH_OPTION:
-	  if (optarg)
-	    exec_path = string (optarg);
+	  if (args.optarg ())
+	    exec_path = string (args.optarg ());
 	  break;
 
 	case INFO_FILE_OPTION:
-	  if (optarg)
-	    info_file = string (optarg);
+	  if (args.optarg ())
+	    info_file = string (args.optarg ());
 	  break;
 
 	case INFO_PROG_OPTION:
-	  if (optarg)
-	    info_prog = string (optarg);
+	  if (args.optarg ())
+	    info_prog = string (args.optarg ());
 	  break;
 
 	case TRADITIONAL_OPTION:
 	  traditional = 1;
 	  break;
 
 	default:
 	  usage ();
@@ -511,21 +512,22 @@ main (int argc, char **argv)
   // Avoid counting commands executed from startup files.
 
   current_command_number = 1;
 
   // If there is an extra argument, see if it names a file to read.
   // Additional arguments are taken as command line options for the
   // script.
 
-  int remaining_args = argc - optind;
+  int last_arg_idx = args.optind ();
+  int remaining_args = argc - last_arg_idx;
   if (remaining_args > 0)
     {
       reading_script_file = 1;
-      curr_fcn_file_name = argv[optind];
+      curr_fcn_file_name = argv[last_arg_idx];
       curr_fcn_file_full_name = curr_fcn_file_name;
 
       FILE *infile = get_input_from_file (curr_fcn_file_name);
 
       if (infile)
 	{
 	  input_from_command_line_file = 1;
 
@@ -534,17 +536,17 @@ main (int argc, char **argv)
 
 	  size_t pos = curr_fcn_file_name.rfind ('/');
 
 	  string tmp = (pos != NPOS)
 	    ? curr_fcn_file_name.substr (pos+1) : curr_fcn_file_name;
 
 	  bind_builtin_variable ("program_name", tmp);
 
-	  intern_argv (remaining_args, argv+optind);
+	  intern_argv (remaining_args, argv+last_arg_idx);
 
 	  rl_blink_matching_paren = 0;
 	  switch_to_buffer (create_buffer (infile));
 	}
       else
 	clean_up_and_exit (1);
     }
   else
