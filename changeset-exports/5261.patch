# HG changeset patch
# User jwe
# Date 1112237319 0
#      Thu Mar 31 02:48:39 2005 +0000
# Node ID 90a9058de7e83064b6ae06e00c0794ca0e293198
# Parent  deed800e7beffe98e0865c4d9adb7ca99f38be74
[project @ 2005-03-31 02:48:38 by jwe]

diff --git a/liboctave/CSparse.cc b/liboctave/CSparse.cc
--- a/liboctave/CSparse.cc
+++ b/liboctave/CSparse.cc
@@ -232,17 +232,17 @@ SparseComplexMatrix::max (Array2<int>& i
 
 	  for (int i = cidx(j); i < cidx(j+1); i++)
 	    {
 	      Complex tmp = data (i);
 
 	      if (octave_is_NaN_or_NA (tmp))
 		continue;
 
-	      double abs_tmp = ::abs (tmp);
+	      double abs_tmp = std::abs (tmp);
 
 	      if (octave_is_NaN_or_NA (abs_max) || abs_tmp > abs_max)
 		{
 		  idx_j = ridx (i);
 		  tmp_max = tmp;
 		  abs_max = abs_tmp;
 		}
 	    }
@@ -297,17 +297,17 @@ SparseComplexMatrix::max (Array2<int>& i
 	  for (int i = cidx(j); i < cidx(j+1); i++)
 	    {
 	      int ir = ridx (i);
 	      int ix = idx_arg.elem (ir);
 	      Complex tmp = data (i);
 
 	      if (octave_is_NaN_or_NA (tmp))
 		continue;
-	      else if (ix == -1 || ::abs(tmp) > ::abs(elem (ir, ix)))
+	      else if (ix == -1 || std::abs(tmp) > std::abs(elem (ir, ix)))
 		idx_arg.elem (ir) = j;
 	    }
 	}
 
       int nel = 0;
       for (int j = 0; j < nr; j++)
 	if (idx_arg.elem(j) == -1 || elem (j, idx_arg.elem (j)) != 0.)
 	  nel++;
@@ -384,17 +384,17 @@ SparseComplexMatrix::min (Array2<int>& i
 
 	  for (int i = cidx(j); i < cidx(j+1); i++)
 	    {
 	      Complex tmp = data (i);
 
 	      if (octave_is_NaN_or_NA (tmp))
 		continue;
 
-	      double abs_tmp = ::abs (tmp);
+	      double abs_tmp = std::abs (tmp);
 
 	      if (octave_is_NaN_or_NA (abs_min) || abs_tmp < abs_min)
 		{
 		  idx_j = ridx (i);
 		  tmp_min = tmp;
 		  abs_min = abs_tmp;
 		}
 	    }
@@ -449,17 +449,17 @@ SparseComplexMatrix::min (Array2<int>& i
 	  for (int i = cidx(j); i < cidx(j+1); i++)
 	    {
 	      int ir = ridx (i);
 	      int ix = idx_arg.elem (ir);
 	      Complex tmp = data (i);
 
 	      if (octave_is_NaN_or_NA (tmp))
 		continue;
-	      else if (ix == -1 || ::abs(tmp) < ::abs(elem (ir, ix)))
+	      else if (ix == -1 || std::abs(tmp) < std::abs(elem (ir, ix)))
 		idx_arg.elem (ir) = j;
 	    }
 	}
 
       int nel = 0;
       for (int j = 0; j < nr; j++)
 	if (idx_arg.elem(j) == -1 || elem (j, idx_arg.elem (j)) != 0.)
 	  nel++;
@@ -782,17 +782,17 @@ SparseComplexMatrix::dsolve (SparseType 
 	  else
 	    for (int j = 0; j < b.cols(); j++)
 	      for (int i = 0; i < nr; i++)
 		retval(i,j) = b(ridx(i),j) / data (i);
 	    
 	  double dmax = 0., dmin = octave_Inf; 
 	  for (int i = 0; i < nr; i++)
 	    {
-	      double tmp = ::abs(data(i));
+	      double tmp = std::abs(data(i));
 	      if (tmp > dmax)
 		dmax = tmp;
 	      if (tmp < dmin)
 		dmin = tmp;
 	    }
 	  rcond = dmin / dmax;
 	}
       else
@@ -861,17 +861,17 @@ SparseComplexMatrix::dsolve (SparseType 
 		      }
 		  }
 		retval.xcidx(j+1) = ii;
 	      }
 	    
 	  double dmax = 0., dmin = octave_Inf; 
 	  for (int i = 0; i < nr; i++)
 	    {
-	      double tmp = ::abs(data(i));
+	      double tmp = std::abs(data(i));
 	      if (tmp > dmax)
 		dmax = tmp;
 	      if (tmp < dmin)
 		dmin = tmp;
 	    }
 	  rcond = dmin / dmax;
 	}
       else
@@ -911,17 +911,17 @@ SparseComplexMatrix::dsolve (SparseType 
 	  else
 	    for (int j = 0; j < b.cols(); j++)
 	      for (int i = 0; i < nr; i++)
 		retval(i,j) = b(ridx(i),j) / data (i);
 	    
 	  double dmax = 0., dmin = octave_Inf; 
 	  for (int i = 0; i < nr; i++)
 	    {
-	      double tmp = ::abs(data(i));
+	      double tmp = std::abs(data(i));
 	      if (tmp > dmax)
 		dmax = tmp;
 	      if (tmp < dmin)
 		dmin = tmp;
 	    }
 	  rcond = dmin / dmax;
 	}
       else
@@ -991,17 +991,17 @@ SparseComplexMatrix::dsolve (SparseType 
 		      }
 		  }
 		retval.xcidx(j+1) = ii;
 	      }
 	    
 	  double dmax = 0., dmin = octave_Inf; 
 	  for (int i = 0; i < nr; i++)
 	    {
-	      double tmp = ::abs(data(i));
+	      double tmp = std::abs(data(i));
 	      if (tmp > dmax)
 		dmax = tmp;
 	      if (tmp < dmin)
 		dmin = tmp;
 	    }
 	  rcond = dmin / dmax;
 	}
       else
@@ -1039,17 +1039,17 @@ SparseComplexMatrix::utsolve (SparseType
 	  int b_cols = b.cols ();
 	  rcond = 0.;
 
 	  // Calculate the 1-norm of matrix for rcond calculation
 	  for (int j = 0; j < nr; j++)
 	    {
 	      double atmp = 0.;
 	      for (int i = cidx(j); i < cidx(j+1); i++)
-		atmp += ::abs(data(i));
+		atmp += std::abs(data(i));
 	      if (atmp > anorm)
 		anorm = atmp;
 	    }
 
 	  if (typ == SparseType::Permuted_Upper)
 	    {
 	      retval.resize (b.rows (), b.cols ());
 	      OCTAVE_LOCAL_BUFFER (Complex, work, nr);
@@ -1111,17 +1111,17 @@ SparseComplexMatrix::utsolve (SparseType
 			      int idx2 = q_perm[ridx(i)];
 			      work[idx2] = work[idx2] - tmp * data(i);
 			    }
 			}
 		    }
 		  double atmp = 0;
 		  for (int i = 0; i < j+1; i++)
 		    {
-		      atmp += ::abs(work[i]);
+		      atmp += std::abs(work[i]);
 		      work[i] = 0.;
 		    }
 		  if (atmp > ainvnorm)
 		    ainvnorm = atmp;
 		}
 	    }
 	  else
 	    {
@@ -1174,17 +1174,17 @@ SparseComplexMatrix::utsolve (SparseType
 			      int iidx = ridx(i);
 			      work[iidx] = work[iidx] - tmp * data(i);
 			    }
 			}
 		    }
 		  double atmp = 0;
 		  for (int i = 0; i < j+1; i++)
 		    {
-		      atmp += ::abs(work[i]);
+		      atmp += std::abs(work[i]);
 		      work[i] = 0.;
 		    }
 		  if (atmp > ainvnorm)
 		    ainvnorm = atmp;
 		}
 	    }
 
 	  rcond = 1. / ainvnorm / anorm;
@@ -1248,17 +1248,17 @@ SparseComplexMatrix::utsolve (SparseType
 	  double ainvnorm = 0.;
 	  rcond = 0.;
 
 	  // Calculate the 1-norm of matrix for rcond calculation
 	  for (int j = 0; j < nr; j++)
 	    {
 	      double atmp = 0.;
 	      for (int i = cidx(j); i < cidx(j+1); i++)
-		atmp += ::abs(data(i));
+		atmp += std::abs(data(i));
 	      if (atmp > anorm)
 		anorm = atmp;
 	    }
 
 	  int b_nr = b.rows ();
 	  int b_nc = b.cols ();
 	  int b_nz = b.nnz ();
 	  retval = SparseComplexMatrix (b_nr, b_nc, b_nz);
@@ -1351,17 +1351,17 @@ SparseComplexMatrix::utsolve (SparseType
 			      int idx2 = q_perm[ridx(i)];
 			      work[idx2] = work[idx2] - tmp * data(i);
 			    }
 			}
 		    }
 		  double atmp = 0;
 		  for (int i = 0; i < j+1; i++)
 		    {
-		      atmp += ::abs(work[i]);
+		      atmp += std::abs(work[i]);
 		      work[i] = 0.;
 		    }
 		  if (atmp > ainvnorm)
 		    ainvnorm = atmp;
 		}
 	    }
 	  else
 	    {
@@ -1439,17 +1439,17 @@ SparseComplexMatrix::utsolve (SparseType
 			      int iidx = ridx(i);
 			      work[iidx] = work[iidx] - tmp * data(i);
 			    }
 			}
 		    }
 		  double atmp = 0;
 		  for (int i = 0; i < j+1; i++)
 		    {
-		      atmp += ::abs(work[i]);
+		      atmp += std::abs(work[i]);
 		      work[i] = 0.;
 		    }
 		  if (atmp > ainvnorm)
 		    ainvnorm = atmp;
 		}
 	    }
 
 	  rcond = 1. / ainvnorm / anorm;
@@ -1513,17 +1513,17 @@ SparseComplexMatrix::utsolve (SparseType
 	  int b_nc = b.cols ();
 	  rcond = 0.;
 
 	  // Calculate the 1-norm of matrix for rcond calculation
 	  for (int j = 0; j < nr; j++)
 	    {
 	      double atmp = 0.;
 	      for (int i = cidx(j); i < cidx(j+1); i++)
-		atmp += ::abs(data(i));
+		atmp += std::abs(data(i));
 	      if (atmp > anorm)
 		anorm = atmp;
 	    }
 
 	  if (typ == SparseType::Permuted_Upper)
 	    {
 	      retval.resize (b.rows (), b.cols ());
 	      OCTAVE_LOCAL_BUFFER (Complex, work, nr);
@@ -1586,17 +1586,17 @@ SparseComplexMatrix::utsolve (SparseType
 			      int idx2 = q_perm[ridx(i)];
 			      work[idx2] = work[idx2] - tmp * data(i);
 			    }
 			}
 		    }
 		  double atmp = 0;
 		  for (int i = 0; i < j+1; i++)
 		    {
-		      atmp += ::abs(work[i]);
+		      atmp += std::abs(work[i]);
 		      work[i] = 0.;
 		    }
 		  if (atmp > ainvnorm)
 		    ainvnorm = atmp;
 		}
 	    }
 	  else
 	    {
@@ -1649,17 +1649,17 @@ SparseComplexMatrix::utsolve (SparseType
 			      int iidx = ridx(i);
 			      work[iidx] = work[iidx] - tmp * data(i);
 			    }
 			}
 		    }
 		  double atmp = 0;
 		  for (int i = 0; i < j+1; i++)
 		    {
-		      atmp += ::abs(work[i]);
+		      atmp += std::abs(work[i]);
 		      work[i] = 0.;
 		    }
 		  if (atmp > ainvnorm)
 		    ainvnorm = atmp;
 		}
 	    }
 
 	  rcond = 1. / ainvnorm / anorm;
@@ -1723,17 +1723,17 @@ SparseComplexMatrix::utsolve (SparseType
 	  double ainvnorm = 0.;
 	  rcond = 0.;
 
 	  // Calculate the 1-norm of matrix for rcond calculation
 	  for (int j = 0; j < nr; j++)
 	    {
 	      double atmp = 0.;
 	      for (int i = cidx(j); i < cidx(j+1); i++)
-		atmp += ::abs(data(i));
+		atmp += std::abs(data(i));
 	      if (atmp > anorm)
 		anorm = atmp;
 	    }
 
 	  int b_nr = b.rows ();
 	  int b_nc = b.cols ();
 	  int b_nz = b.nnz ();
 	  retval = SparseComplexMatrix (b_nr, b_nc, b_nz);
@@ -1826,17 +1826,17 @@ SparseComplexMatrix::utsolve (SparseType
 			      int idx2 = q_perm[ridx(i)];
 			      work[idx2] = work[idx2] - tmp * data(i);
 			    }
 			}
 		    }
 		  double atmp = 0;
 		  for (int i = 0; i < j+1; i++)
 		    {
-		      atmp += ::abs(work[i]);
+		      atmp += std::abs(work[i]);
 		      work[i] = 0.;
 		    }
 		  if (atmp > ainvnorm)
 		    ainvnorm = atmp;
 		}
 	    }
 	  else
 	    {
@@ -1914,17 +1914,17 @@ SparseComplexMatrix::utsolve (SparseType
 			      int iidx = ridx(i);
 			      work[iidx] = work[iidx] - tmp * data(i);
 			    }
 			}
 		    }
 		  double atmp = 0;
 		  for (int i = 0; i < j+1; i++)
 		    {
-		      atmp += ::abs(work[i]);
+		      atmp += std::abs(work[i]);
 		      work[i] = 0.;
 		    }
 		  if (atmp > ainvnorm)
 		    ainvnorm = atmp;
 		}
 	    }
 
 	  rcond = 1. / ainvnorm / anorm;
@@ -1988,17 +1988,17 @@ SparseComplexMatrix::ltsolve (SparseType
 	  int b_cols = b.cols ();
 	  rcond = 0.;
 
 	  // Calculate the 1-norm of matrix for rcond calculation
 	  for (int j = 0; j < nr; j++)
 	    {
 	      double atmp = 0.;
 	      for (int i = cidx(j); i < cidx(j+1); i++)
-		atmp += ::abs(data(i));
+		atmp += std::abs(data(i));
 	      if (atmp > anorm)
 		anorm = atmp;
 	    }
 
 	  if (typ == SparseType::Permuted_Lower)
 	    {
 	      retval.resize (b.rows (), b.cols ());
 	      OCTAVE_LOCAL_BUFFER (Complex, work, nr);
@@ -2061,17 +2061,17 @@ SparseComplexMatrix::ltsolve (SparseType
 			      int idx2 = q_perm[ridx(i)];
 			      work[idx2] = work[idx2] - tmp * data(i);
 			    }
 			}
 		    }
 		  double atmp = 0;
 		  for (int i = 0; i < j+1; i++)
 		    {
-		      atmp += ::abs(work[i]);
+		      atmp += std::abs(work[i]);
 		      work[i] = 0.;
 		    }
 		  if (atmp > ainvnorm)
 		    ainvnorm = atmp;
 		}
 	    }
 	  else
 	    {
@@ -2125,17 +2125,17 @@ SparseComplexMatrix::ltsolve (SparseType
 			      int iidx = ridx(i);
 			      work[iidx] = work[iidx] - tmp * data(i);
 			    }
 			}
 		    }
 		  double atmp = 0;
 		  for (int i = j; i < nr; i++)
 		    {
-		      atmp += ::abs(work[i]);
+		      atmp += std::abs(work[i]);
 		      work[i] = 0.;
 		    }
 		  if (atmp > ainvnorm)
 		    ainvnorm = atmp;
 		}
 	    }
 
 	  rcond = 1. / ainvnorm / anorm;
@@ -2199,17 +2199,17 @@ SparseComplexMatrix::ltsolve (SparseType
 	  double ainvnorm = 0.;
 	  rcond = 0.;
 
 	  // Calculate the 1-norm of matrix for rcond calculation
 	  for (int j = 0; j < nr; j++)
 	    {
 	      double atmp = 0.;
 	      for (int i = cidx(j); i < cidx(j+1); i++)
-		atmp += ::abs(data(i));
+		atmp += std::abs(data(i));
 	      if (atmp > anorm)
 		anorm = atmp;
 	    }
 
 	  int b_nr = b.rows ();
 	  int b_nc = b.cols ();
 	  int b_nz = b.nnz ();
 	  retval = SparseComplexMatrix (b_nr, b_nc, b_nz);
@@ -2302,17 +2302,17 @@ SparseComplexMatrix::ltsolve (SparseType
 			      int idx2 = q_perm[ridx(i)];
 			      work[idx2] = work[idx2] - tmp * data(i);
 			    }
 			}
 		    }
 		  double atmp = 0;
 		  for (int i = 0; i < j+1; i++)
 		    {
-		      atmp += ::abs(work[i]);
+		      atmp += std::abs(work[i]);
 		      work[i] = 0.;
 		    }
 		  if (atmp > ainvnorm)
 		    ainvnorm = atmp;
 		}
 	    }
 	  else
 	    {
@@ -2391,17 +2391,17 @@ SparseComplexMatrix::ltsolve (SparseType
 			      int iidx = ridx(i);
 			      work[iidx] = work[iidx] - tmp * data(i);
 			    }
 			}
 		    }
 		  double atmp = 0;
 		  for (int i = j; i < nr; i++)
 		    {
-		      atmp += ::abs(work[i]);
+		      atmp += std::abs(work[i]);
 		      work[i] = 0.;
 		    }
 		  if (atmp > ainvnorm)
 		    ainvnorm = atmp;
 		}
 
 	    }
 
@@ -2467,17 +2467,17 @@ SparseComplexMatrix::ltsolve (SparseType
 	  int b_nc = b.cols ();
 	  rcond = 0.;
 
 	  // Calculate the 1-norm of matrix for rcond calculation
 	  for (int j = 0; j < nr; j++)
 	    {
 	      double atmp = 0.;
 	      for (int i = cidx(j); i < cidx(j+1); i++)
-		atmp += ::abs(data(i));
+		atmp += std::abs(data(i));
 	      if (atmp > anorm)
 		anorm = atmp;
 	    }
 
 	  if (typ == SparseType::Permuted_Lower)
 	    {
 	      retval.resize (b.rows (), b.cols ());
 	      OCTAVE_LOCAL_BUFFER (Complex, work, nr);
@@ -2540,17 +2540,17 @@ SparseComplexMatrix::ltsolve (SparseType
 			      int idx2 = q_perm[ridx(i)];
 			      work[idx2] = work[idx2] - tmp * data(i);
 			    }
 			}
 		    }
 		  double atmp = 0;
 		  for (int i = 0; i < j+1; i++)
 		    {
-		      atmp += ::abs(work[i]);
+		      atmp += std::abs(work[i]);
 		      work[i] = 0.;
 		    }
 		  if (atmp > ainvnorm)
 		    ainvnorm = atmp;
 		}
 	    }
 	  else
 	    {
@@ -2604,17 +2604,17 @@ SparseComplexMatrix::ltsolve (SparseType
 			      int iidx = ridx(i);
 			      work[iidx] = work[iidx] - tmp * data(i);
 			    }
 			}
 		    }
 		  double atmp = 0;
 		  for (int i = j; i < nr; i++)
 		    {
-		      atmp += ::abs(work[i]);
+		      atmp += std::abs(work[i]);
 		      work[i] = 0.;
 		    }
 		  if (atmp > ainvnorm)
 		    ainvnorm = atmp;
 		}
 
 	    }
 
@@ -2679,17 +2679,17 @@ SparseComplexMatrix::ltsolve (SparseType
 	  double ainvnorm = 0.;
 	  rcond = 0.;
 
 	  // Calculate the 1-norm of matrix for rcond calculation
 	  for (int j = 0; j < nr; j++)
 	    {
 	      double atmp = 0.;
 	      for (int i = cidx(j); i < cidx(j+1); i++)
-		atmp += ::abs(data(i));
+		atmp += std::abs(data(i));
 	      if (atmp > anorm)
 		anorm = atmp;
 	    }
 
 	  int b_nr = b.rows ();
 	  int b_nc = b.cols ();
 	  int b_nz = b.nnz ();
 	  retval = SparseComplexMatrix (b_nr, b_nc, b_nz);
@@ -2782,17 +2782,17 @@ SparseComplexMatrix::ltsolve (SparseType
 			      int idx2 = q_perm[ridx(i)];
 			      work[idx2] = work[idx2] - tmp * data(i);
 			    }
 			}
 		    }
 		  double atmp = 0;
 		  for (int i = 0; i < j+1; i++)
 		    {
-		      atmp += ::abs(work[i]);
+		      atmp += std::abs(work[i]);
 		      work[i] = 0.;
 		    }
 		  if (atmp > ainvnorm)
 		    ainvnorm = atmp;
 		}
 	    }
 	  else
 	    {
@@ -2871,17 +2871,17 @@ SparseComplexMatrix::ltsolve (SparseType
 			      int iidx = ridx(i);
 			      work[iidx] = work[iidx] - tmp * data(i);
 			    }
 			}
 		    }
 		  double atmp = 0;
 		  for (int i = j; i < nr; i++)
 		    {
-		      atmp += ::abs(work[i]);
+		      atmp += std::abs(work[i]);
 		      work[i] = 0.;
 		    }
 		  if (atmp > ainvnorm)
 		    ainvnorm = atmp;
 		}
 
 	    }
 
@@ -5954,17 +5954,17 @@ SparseComplexMatrix::any_element_is_inf_
 
 bool
 SparseComplexMatrix::all_elements_are_real (void) const
 {
   int nel = nnz ();
 
   for (int i = 0; i < nel; i++)
     {
-      double ip = imag (data (i));
+      double ip = std::imag (data (i));
       
       if (ip != 0.0 || lo_ieee_signbit (ip))
 	return false;
     }
 
   return true;
 }
 
@@ -5975,25 +5975,25 @@ SparseComplexMatrix::all_elements_are_re
 bool
 SparseComplexMatrix::all_integers (double& max_val, double& min_val) const
 {
   int nel = nnz ();
 
   if (nel == 0)
     return false;
 
-  max_val = real(data (0));
-  min_val = real(data (0));
+  max_val = std::real(data (0));
+  min_val = std::real(data (0));
 
   for (int i = 0; i < nel; i++)
     {
 	Complex val = data (i);
 
-	double r_val = real (val);
-	double i_val = imag (val);
+	double r_val = std::real (val);
+	double i_val = std::imag (val);
 
 	if (r_val > max_val)
 	  max_val = r_val;
 
 	if (i_val > max_val)
 	  max_val = i_val;
 
 	if (r_val < min_val)
@@ -6013,18 +6013,18 @@ bool
 SparseComplexMatrix::too_large_for_float (void) const
 {
   int nel = nnz ();
 
   for (int i = 0; i < nel; i++)
     {
 	Complex val = data (i);
 
-	double r_val = real (val);
-	double i_val = imag (val);
+	double r_val = std::real (val);
+	double i_val = std::imag (val);
 
 	if (r_val > FLT_MAX
 	    || i_val > FLT_MAX
 	    || r_val < FLT_MIN
 	    || i_val < FLT_MIN)
 	  return true;
     }
 
@@ -6095,17 +6095,17 @@ SparseMatrix SparseComplexMatrix::abs (v
 
   SparseMatrix retval (rows(), nc, nz);
 
   for (int i = 0; i < nc + 1; i++)
     retval.cidx (i) = cidx (i);
 
   for (int i = 0; i < nz; i++)
     {
-      retval.data (i) = ::abs (data (i));
+      retval.data (i) = std::abs (data (i));
       retval.ridx (i) = ridx (i);
     }
 
   return retval;
 }
 
 SparseComplexMatrix
 SparseComplexMatrix::diag (int k) const
diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,13 +1,16 @@
 2005-03-30  John W. Eaton  <jwe@octave.org>
 
-	* liboctave/CColVector.cc, liboctave/CNDArray.cc,
-	liboctave/CRowVector.cc: Use std:: for Complex functions instead
-	of relying on wrappers from oct-cmplx.h.
+	* lo-mappers.cc (log10, tan, tanh): Delete functions.
+	* lo-mappers.h (log10, tan, tanh): Delete decls.
+
+	* CColVector.cc, CNDArray.cc, CRowVector.cc, CSparse.cc,
+	dSparse.cc: Use std:: for Complex functions instead of relying on
+	wrappers from oct-cmplx.h.
 
 	* oct-cmplx.h: Provide typedef only.
 
 	* DiagArray2.cc (xelem): Don't use initializer for static data.
 	* DiagArray2.h (DiagArray<T>::Proxy::operator T ()):
 	Likewise.
 
 2005-03-26  John W. Eaton  <jwe@octave.org>
@@ -3304,17 +3307,17 @@ 2000-03-23  John W. Eaton  <jwe@bevo.che
 
 2000-03-21  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* Makefile.in (liboctave.$(SHLEXT)): Delete target
 	before rebuilding.
 
 2000-03-21  Ben Sapp  <bsapp@nua.lampf.lanl.gov>:
 
-	* liboctave/Makefile.in (liboctave.$(LIBEXT)): New target.
+	* Makefile.in (liboctave.$(LIBEXT)): New target.
 	(libraries): Depend only on library targets, not archive members.
 
 2000-03-17  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* Makefile.in: (objects): New target.
 
 	* lo-cutils.c: New file.
 	* Makefile.in (SOURCES): Add it to the list.
diff --git a/liboctave/dSparse.cc b/liboctave/dSparse.cc
--- a/liboctave/dSparse.cc
+++ b/liboctave/dSparse.cc
@@ -501,17 +501,17 @@ real (const SparseComplexMatrix& a)
   int nz = a.nnz ();
   SparseMatrix r (nr, nc, nz);
 
   for (int i = 0; i < nc +1; i++)
     r.cidx(i) = a.cidx(i);
 
   for (int i = 0; i < nz; i++)
     {
-      r.data(i) = real (a.data(i));
+      r.data(i) = std::real (a.data(i));
       r.ridx(i) = a.ridx(i);
     }
 
   return r;
 }
 
 SparseMatrix
 imag (const SparseComplexMatrix& a)
@@ -521,17 +521,17 @@ imag (const SparseComplexMatrix& a)
   int nz = a.nnz ();
   SparseMatrix r (nr, nc, nz);
 
   for (int i = 0; i < nc +1; i++)
     r.cidx(i) = a.cidx(i);
 
   for (int i = 0; i < nz; i++)
     {
-      r.data(i) = imag (a.data(i));
+      r.data(i) = std::imag (a.data(i));
       r.ridx(i) = a.ridx(i);
     }
 
   return r;
 }
 
 SparseMatrix 
 atan2 (const double& x, const SparseMatrix& y)
@@ -3554,18 +3554,18 @@ SparseMatrix::trisolve (SparseType &matt
 
 		  retval.xcidx(0) = 0;
 		  for (volatile int j = 0; j < b_nc; j++)
 		    {
 
 		      for (int i = 0; i < b_nr; i++)
 			{
 			  Complex c = b (i,j);
-			  Bx[i] = ::real (c);
-			  Bz[i] = ::imag (c);
+			  Bx[i] = std::real (c);
+			  Bz[i] = std::imag (c);
 			}
 
 
 		      F77_XFCN (dgttrs, DGTTRS, 
 				(F77_CONST_CHAR_ARG2 (&job, 1),
 				 nr, 1, DL, D, DU, DU2, pipvt, 
 				 Bx, b_nr, err
 				 F77_CHAR_ARG_LEN (1)));
@@ -4206,18 +4206,18 @@ SparseMatrix::bsolve (SparseType &mattyp
 
 		  retval.resize (b_nr, b_nc);
 	      
 		  for (volatile int j = 0; j < b_nc; j++)
 		    {
 		      for (int i = 0; i < b_nr; i++)
 			{
 			  Complex c = b (i,j);
-			  Bx[i] = ::real (c);
-			  Bz[i] = ::imag (c);
+			  Bx[i] = std::real (c);
+			  Bz[i] = std::imag (c);
 			}
 			  
 		      F77_XFCN (dpbtrs, DPBTRS, 
 				(F77_CONST_CHAR_ARG2 (&job, 1),
 				 nr, n_lower, 1, tmp_data,
 				 ldm, Bx, b_nr, err
 				 F77_CHAR_ARG_LEN (1)));
 		    
@@ -4321,18 +4321,18 @@ SparseMatrix::bsolve (SparseType &mattyp
 		  OCTAVE_LOCAL_BUFFER (double, Bz, nr);
 		  OCTAVE_LOCAL_BUFFER (double, Bx, nr);
 
 		  for (volatile int j = 0; j < b_nc; j++)
 		    {
 		      for (int i = 0; i < nr; i++)
 			{
 			  Complex c = b (i, j);
-			  Bx[i] = ::real (c);
-			  Bz[i] = ::imag  (c);
+			  Bx[i] = std::real (c);
+			  Bz[i] = std::imag  (c);
 			}
 
 		      F77_XFCN (dgbtrs, DGBTRS, 
 				(F77_CONST_CHAR_ARG2 (&job, 1),
 				 nr, n_lower, n_upper, 1, tmp_data,
 				 ldm, pipvt, Bx, b.rows (), err
 				 F77_CHAR_ARG_LEN (1)));
 		    
@@ -4450,18 +4450,18 @@ SparseMatrix::bsolve (SparseType &mattyp
 
 		  retval.xcidx(0) = 0;
 		  for (volatile int j = 0; j < b_nc; j++)
 		    {
 
 		      for (int i = 0; i < b_nr; i++)
 			{
 			  Complex c = b (i,j);
-			  Bx[i] = ::real (c);
-			  Bz[i] = ::imag (c);
+			  Bx[i] = std::real (c);
+			  Bz[i] = std::imag (c);
 			}
 
 		      F77_XFCN (dpbtrs, DPBTRS, 
 				(F77_CONST_CHAR_ARG2 (&job, 1),
 				 nr, n_lower, 1, tmp_data,
 				 ldm, Bx, b_nr, err
 				 F77_CHAR_ARG_LEN (1)));
 		    
@@ -4598,18 +4598,18 @@ SparseMatrix::bsolve (SparseType &mattyp
 		      for (int i = 0; i < nr; i++)
 			{
 			  Bx[i] = 0.;
 			  Bz[i] = 0.;
 			}
 		      for (int i = b.cidx(j); i < b.cidx(j+1); i++)
 			{
 			  Complex c = b.data(i);
-			  Bx[b.ridx(i)] = ::real (c);
-			  Bz[b.ridx(i)] = ::imag (c);
+			  Bx[b.ridx(i)] = std::real (c);
+			  Bz[b.ridx(i)] = std::imag (c);
 			}
 
 		      F77_XFCN (dgbtrs, DGBTRS, 
 				(F77_CONST_CHAR_ARG2 (&job, 1),
 				 nr, n_lower, n_upper, 1, tmp_data,
 				 ldm, pipvt, Bx, b.rows (), err
 				 F77_CHAR_ARG_LEN (1)));
 		    
@@ -5078,18 +5078,18 @@ SparseMatrix::fsolve (SparseType &mattyp
 	      OCTAVE_LOCAL_BUFFER (double, Xx, b_nr);
 	      OCTAVE_LOCAL_BUFFER (double, Xz, b_nr);
 	      
 	      for (int j = 0; j < b_nc; j++)
 		{
 		  for (int i = 0; i < b_nr; i++)
 		    {
 		      Complex c = b (i,j);
-		      Bx[i] = ::real (c);
-		      Bz[i] = ::imag (c);
+		      Bx[i] = std::real (c);
+		      Bz[i] = std::imag (c);
 		    }
 
 		  status = umfpack_di_solve (UMFPACK_A, Ap, Ai, Ax, 
 					     Xx, Bx, Numeric, control, 
 					     info);
 		  int status2 = umfpack_di_solve (UMFPACK_A, Ap, Ai, 
 						  Ax, Xz, Bz, Numeric, 
 						  control, info) ;
@@ -5207,18 +5207,18 @@ SparseMatrix::fsolve (SparseType &mattyp
 	      OCTAVE_LOCAL_BUFFER (double, Xz, b_nr);
 	      
 	      retval.xcidx(0) = 0;
 	      for (int j = 0; j < b_nc; j++)
 		{
 		  for (int i = 0; i < b_nr; i++)
 		    {
 		      Complex c = b (i,j);
-		      Bx[i] = ::real (c);
-		      Bz[i] = ::imag (c);
+		      Bx[i] = std::real (c);
+		      Bz[i] = std::imag (c);
 		    }
 
 		  status = umfpack_di_solve (UMFPACK_A, Ap, Ai, Ax, Xx,
 					     Bx, Numeric, control, 
 					     info);
 		  int status2 = umfpack_di_solve (UMFPACK_A, Ap, Ai, 
 						  Ax, Xz, Bz, Numeric, 
 						  control, info) ;
diff --git a/liboctave/lo-mappers.cc b/liboctave/lo-mappers.cc
--- a/liboctave/lo-mappers.cc
+++ b/liboctave/lo-mappers.cc
@@ -212,38 +212,16 @@ atan (const Complex& x)
 }
 
 Complex
 atanh (const Complex& x)
 {
   return log ((1.0 + x) / (1.0 - x)) / 2.0;
 }
 
-#if !defined (CXX_ISO_COMPLIANT_LIBRARY)
-
-Complex
-log10 (const Complex& x)
-{
-  return M_LOG10E * log (x);
-}
-
-Complex
-tan (const Complex& x)
-{
-  return sin (x) / cos (x);
-}
-
-Complex
-tanh (const Complex& x)
-{
-  return sinh (x) / cosh (x);
-}
-
-#endif
-
 Complex
 ceil (const Complex& x)
 {
   return Complex (ceil (real (x)), ceil (imag (x)));
 }
 
 Complex
 fix (const Complex& x)
diff --git a/liboctave/lo-mappers.h b/liboctave/lo-mappers.h
--- a/liboctave/lo-mappers.h
+++ b/liboctave/lo-mappers.h
@@ -45,22 +45,16 @@ extern double xmax (double x, double y);
 
 extern Complex acos (const Complex& x);
 extern Complex acosh (const Complex& x);
 extern Complex asin (const Complex& x);
 extern Complex asinh (const Complex& x);
 extern Complex atan (const Complex& x);
 extern Complex atanh (const Complex& x);
 
-#if !defined (CXX_ISO_COMPLIANT_LIBRARY)
-extern Complex log10 (const Complex& x);
-extern Complex tan (const Complex& x);
-extern Complex tanh (const Complex& x);
-#endif
-
 extern Complex ceil (const Complex& x);
 extern Complex fix (const Complex& x);
 extern Complex floor (const Complex& x);
 extern Complex xround (const Complex& x);
 extern Complex signum (const Complex& x);
 
 extern bool xisnan (const Complex& x);
 extern bool xfinite (const Complex& x);
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,11 +1,15 @@
 2005-03-30  John W. Eaton  <jwe@octave.org>
 
-	* src/ov-complex.cc, src/ov-cx-mat.cc, src/xpow.cc: Use std:: for
+	* mappers.cc (install_mapper_functions): Use std:: as needed.
+	* defun-int.h (DEFUN_MAPPER_INTERNAL): Don't use X_CAST on
+	function pointer args.
+
+	* ov-complex.cc, ov-cx-mat.cc, xpow.cc, ls-mat5.cc: Use std:: for
 	Complex functions instead of relying on wrappers from oct-cmplx.h.
 
 	* oct-stream.cc (octave_scan): Initialize c1 to EOF.
 
 2005-03-29  John W. Eaton  <jwe@octave.org>
 
 	* utils.cc (get_dimensions): Produce error instead of warning if
 	given a matrix argument.
@@ -622,17 +626,17 @@ 2005-02-11  John W. Eaton  <jwe@octave.o
 	(octave_child_list::reap, octave_child_list::wait): New functions.
 	(octave_child_list::length, octave_child_list::do_length,
 	octave_child_list::elem, octave_child_list::do_elem,
 	octave_child_list::list, octave_child_list::curr_len): Delete.
 
 	* sighandlers.h, sighandlers.cc
 	(octave_child_list::octave_child_list_rep): New class.
 
-	* src/input.cc (gnu_readline, octave_gets, get_user_input):
+	* input.cc (gnu_readline, octave_gets, get_user_input):
 	Call OCTAVE_QUIT before doing anything.
 
 	* base-list.h (octave_base_list<T>::remove_if): New function.
 
 	* TEMPLATE-INST/Array-oc.cc: Delete.
 	* Makefile.in (TI_XSRC): Remove from list.
 
 2005-02-10  Driss Ghaddab  <driss.ghaddab@free.fr>
@@ -2220,17 +2224,17 @@ 2004-04-16  John W. Eaton  <jwe@octave.o
 	* Makefile.in (DLD_XSRC): Add gcd.cc to the list.
 
 2004-04-16  David Bateman  <dbateman@free.fr>
 
 	* DLD-FUNCTIONS/gcd.cc: New file.
 
 2004-04-15  David Bateman  <dbateman@free.fr>
 
-	* src/ov-ch-mat.h: convert_to_str_interal returns charNDArray.
+	* ov-ch-mat.h: convert_to_str_interal returns charNDArray.
 
 2004-04-12  John W. Eaton  <jwe@octave.org>
 
 	* version.h (OCTAVE_BUGS_STATEMENT): Bug list is now bug@octave.org.
 
 2004-04-08  John W. Eaton  <jwe@octave.org>
 
 	* ov-base-mat.cc (octave_base_matrix<MT>::do_index_op): Quit early
@@ -3742,23 +3746,23 @@ 2003-10-23  John W. Eaton  <jwe@bevo.che
 	* OPERATORS/op-cm-m.cc, OPERATORS/op-cm-s.cc,
 	OPERATORS/op-cs-m.cc, OPERATORS/op-m-cm.cc, OPERATORS/op-s-cm.cc:
 	Include headers for N-d operators.
 
 2003-10-17  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* ops.h (DEFNDUNOP_OP, DEFNDUNOP_FN, DEFNDBINOP_OP,
 	DEFNDBINOP_FN): New N-dimensional macros.
-	* src/OPERATORS/op-bm-bm.cc, src/OPERATORS/op-cm-cm.cc,
-	src/OPERATORS/op-cm-cs.cc, src/OPERATORS/op-cm-m.cc,
-	src/OPERATORS/op-cm-s.cc, src/OPERATORS/op-cs-cm.cc,
-	src/OPERATORS/op-cs-m.cc, src/OPERATORS/op-m-cm.cc,
-	src/OPERATORS/op-m-cs.cc, src/OPERATORS/op-m-m.cc,
-	src/OPERATORS/op-m-s.cc, src/OPERATORS/op-s-cm.cc,
-	src/OPERATORS/op-s-m.cc: Use N-dimensional macros as appropriate.
+	* OPERATORS/op-bm-bm.cc, OPERATORS/op-cm-cm.cc,
+	OPERATORS/op-cm-cs.cc, OPERATORS/op-cm-m.cc,
+	OPERATORS/op-cm-s.cc, OPERATORS/op-cs-cm.cc,
+	OPERATORS/op-cs-m.cc, OPERATORS/op-m-cm.cc,
+	OPERATORS/op-m-cs.cc, OPERATORS/op-m-m.cc,
+	OPERATORS/op-m-s.cc, OPERATORS/op-s-cm.cc,
+	OPERATORS/op-s-m.cc: Use N-dimensional macros as appropriate.
 
 	* DLD-FUNCTIONS/rand.cc (do_rand, Frand, Frandn):
 	Handle N-dimensions.
 
 	* xpow.cc (elem_xpow (double, const NDArray&),
 	elem_xpow (double, const ComplexNDArray&),
 	elem_xpow (const NDArray&, double),
 	elem_xpow (const NDArray&, const NDArray&),
@@ -7006,17 +7010,17 @@ 2002-05-03  John W. Eaton  <jwe@bevo.che
 	* Cell.h (Cell::Cell (const octave_value&)): New function.
 
 	* OPERATORS/op-cell.cc (install_list_ops): Use DEFASSIGNANYOP_FN
 	and INSTALL_ASSIGNANYOP, not DEFASSIGNOP_FN and INSTALL_ASSIGNOP.
 
 2002-05-03  Cai Jianming  <caijianming@yahoo.co.uk>
 
 	* OPERATORS/op-cell.cc: New file.
-	* src/Makefile.in (OP_XSRC): Include it in the list.
+	* Makefile.in (OP_XSRC): Include it in the list.
 
 	* parse.y (cell): Return a cell type instead of Matrix type.
 
 	* ov.cc (install_types): Install octave_cell type.
 
 	* pr-output.cc (octave_print_internal): Handle Cells.
 	* pr-output.h (octave_print_internal): Provide decl.
 
diff --git a/src/defun-int.h b/src/defun-int.h
--- a/src/defun-int.h
+++ b/src/defun-int.h
@@ -235,22 +235,17 @@ typedef bool (*octave_dld_fcn_installer)
 // XXX FIXME XXX -- Really want to avoid the following casts, since
 // (as always with casts) it may mask some real errors...
 
 #define DEFUN_MAPPER_INTERNAL(name, ch_map, d_b_map, c_b_map, d_d_map, \
 			      d_c_map, c_c_map, lo, hi, \
 			      ch_map_flag, can_ret_cmplx_for_real, doc) \
   install_builtin_mapper \
     (new octave_mapper \
-     (X_CAST (octave_mapper::ch_mapper, ch_map), \
-      X_CAST (octave_mapper::d_b_mapper, d_b_map), \
-      X_CAST (octave_mapper::c_b_mapper, c_b_map), \
-      X_CAST (octave_mapper::d_d_mapper, d_d_map), \
-      X_CAST (octave_mapper::d_c_mapper, d_c_map), \
-      X_CAST (octave_mapper::c_c_mapper, c_c_map), \
+     (ch_map, d_b_map, c_b_map, d_d_map, d_c_map, c_c_map, \
       lo, hi, ch_map_flag, can_ret_cmplx_for_real, #name, doc))
 
 #endif /* ! MAKE_BUILTINS */
 
 #endif
 
 /*
 ;;; Local Variables: ***
diff --git a/src/ls-mat5.cc b/src/ls-mat5.cc
--- a/src/ls-mat5.cc
+++ b/src/ls-mat5.cc
@@ -1263,22 +1263,22 @@ save_mat5_binary_element (std::ostream& 
 	  int nc = m.cols ();
 
 	  write_mat5_integer_data (os, m.ridx (), - sizeof(int), nnz);
 	  write_mat5_integer_data (os, m.cidx (), - sizeof(int), nc + 1);
 
 	  NDArray buf (dim_vector (nnz, 1));
 
 	  for (int i = 0; i < nnz; i++)
-	    buf (i) = ::real (m.data (i));
+	    buf (i) = std::real (m.data (i));
 
 	  write_mat5_array (os, buf, save_as_floats);
 
 	  for (int i = 0; i < nnz; i++)
-	    buf (i) = ::imag (m.data (i));
+	    buf (i) = std::imag (m.data (i));
 
 	  write_mat5_array (os, buf, save_as_floats);
 	}
       else
 	{
 	  SparseMatrix m = tc.sparse_matrix_value ();
 	  int nc = m.cols ();
 
diff --git a/src/mappers.cc b/src/mappers.cc
--- a/src/mappers.cc
+++ b/src/mappers.cc
@@ -198,23 +198,23 @@ Compute the inverse cosine of each eleme
 @end deftypefn");
 
   DEFUN_MAPPER (acosh, 0, 0, 0, acosh, 0, acosh, 1.0, octave_Inf, 0, 1,
     "-*- texinfo -*-\n\
 @deftypefn {Mapping Function} {} acosh (@var{x})\n\
 Compute the inverse hyperbolic cosine of each element of @var{x}.\n\
 @end deftypefn");
 
-  DEFUN_MAPPER (angle, 0, 0, 0, arg, arg, 0, 0.0, 0.0, 0, 0,
+  DEFUN_MAPPER (angle, 0, 0, 0, arg, std::arg, 0, 0.0, 0.0, 0, 0,
     "-*- texinfo -*-\n\
 @deftypefn {Mapping Function} {} angle (@var{z})\n\
 See arg.\n\
 @end deftypefn");
 
-  DEFUN_MAPPER (arg, 0, 0, 0, arg, arg, 0, 0.0, 0.0, 0, 0,
+  DEFUN_MAPPER (arg, 0, 0, 0, arg, std::arg, 0, 0.0, 0.0, 0, 0,
     "-*- texinfo -*-\n\
 @deftypefn {Mapping Function} {} arg (@var{z})\n\
 @deftypefnx {Mapping Function} {} angle (@var{z})\n\
 Compute the argument of @var{z}, defined as\n\
 @iftex\n\
 @tex\n\
 $\\theta = \\tan^{-1}(y/x)$.\n\
 @end tex\n\
@@ -276,23 +276,23 @@ Return the complex conjugate of @var{z},
 @end tex\n\
 @end iftex\n\
 @ifinfo\n\
 @code{conj (@var{z})} = @var{x} - @var{i}@var{y}.\n\
 @end ifinfo\n\
 @end deftypefn\n\
 @seealso{real and imag}");
 
-  DEFUN_MAPPER (cos, 0, 0, 0, cos, 0, cos, 0.0, 0.0, 0, 0,
+  DEFUN_MAPPER (cos, 0, 0, 0, cos, 0, std::cos, 0.0, 0.0, 0, 0,
     "-*- texinfo -*-\n\
 @deftypefn {Mapping Function} {} cos (@var{x})\n\
 Compute the cosine of each element of @var{x}.\n\
 @end deftypefn");
 
-  DEFUN_MAPPER (cosh, 0, 0, 0, cosh, 0, cosh, 0.0, 0.0, 0, 0,
+  DEFUN_MAPPER (cosh, 0, 0, 0, cosh, 0, std::cosh, 0.0, 0.0, 0, 0,
     "-*- texinfo -*-\n\
 @deftypefn {Mapping Function} {} cosh (@var{x})\n\
 Compute the hyperbolic cosine of each element of @var{x}.\n\
 @end deftypefn");
 
   DEFUN_MAPPER (erf, 0, 0, 0, erf, 0, 0, 0.0, 0.0, 0, 0,
     "-*- texinfo -*-\n\
 @deftypefn {Mapping Function} {} erf (@var{z})\n\
@@ -328,17 +328,17 @@ Computes the complementary error functio
 @end iftex\n\
 @ifinfo\n\
 @code{1 - erf (@var{z})}.\n\
 @end ifinfo\n\
 @end deftypefn\n\
 \n\
 @seealso{erf and erfinv}");
 
-  DEFUN_MAPPER (exp, 0, 0, 0, exp, 0, exp, 0.0, 0.0, 0, 0,
+  DEFUN_MAPPER (exp, 0, 0, 0, exp, 0, std::exp, 0.0, 0.0, 0, 0,
     "-*- texinfo -*-\n\
 @deftypefn {Mapping Function} {} exp (@var{x})\n\
 Compute the exponential of @var{x}.  To compute the matrix exponential,\n\
 see @ref{Linear Algebra}.\n\
 @end deftypefn");
 
   DEFUN_MAPPER (finite, 0, xfinite, xfinite, 0, 0, 0, 0.0, 0.0, 0, 0,
     "-*- texinfo -*-\n\
@@ -537,25 +537,25 @@ Return 1 for characters that are hexadec
   DEFUN_MAPPER (lgamma, 0, 0, 0, xlgamma, 0, 0, 0.0, 0.0, 0, 0,
     "-*- texinfo -*-\n\
 @deftypefn {Mapping Function} {} lgamma (@var{a}, @var{x})\n\
 @deftypefnx {Mapping Function} {} gammaln (@var{a}, @var{x})\n\
 Return the natural logarithm of the gamma function.\n\
 @end deftypefn\n\
 @seealso{gamma and gammai}");
 
-  DEFUN_MAPPER (log, 0, 0, 0, log, 0, log, 0.0, octave_Inf, 0, 1,
+  DEFUN_MAPPER (log, 0, 0, 0, log, 0, std::log, 0.0, octave_Inf, 0, 1,
     "-*- texinfo -*-\n\
 @deftypefn {Mapping Function} {} log (@var{x})\n\
 Compute the natural logarithm for each element of @var{x}.  To compute the\n\
 matrix logarithm, see @ref{Linear Algebra}.\n\
 @end deftypefn\n\
 @seealso{log2, log10, logspace, and exp}");
 
-  DEFUN_MAPPER (log10, 0, 0, 0, log10, 0, log10, 0.0, octave_Inf, 0, 1,
+  DEFUN_MAPPER (log10, 0, 0, 0, log10, 0, std::log10, 0.0, octave_Inf, 0, 1,
     "-*- texinfo -*-\n\
 @deftypefn {Mapping Function} {} log10 (@var{x})\n\
 Compute the base-10 logarithm for each element of @var{x}.\n\
 @end deftypefn\n\
 @seealso{log, log2, logspace, and exp}");
 
   DEFUN_MAPPER (real, 0, 0, 0, real, xreal, 0, 0.0, 0.0, 0, 0,
     "-*- texinfo -*-\n\
@@ -590,43 +590,43 @@ Compute the @dfn{signum} function, which
 sign (x) =  0, x = 0;\n\
             1, x > 0.\n\
 @end example\n\
 @end ifinfo\n\
 \n\
 For complex arguments, @code{sign} returns @code{x ./ abs (@var{x})}.\n\
 @end deftypefn");
 
-  DEFUN_MAPPER (sin, 0, 0, 0, sin, 0, sin, 0.0, 0.0, 0, 0,
+  DEFUN_MAPPER (sin, 0, 0, 0, sin, 0, std::sin, 0.0, 0.0, 0, 0,
     "-*- texinfo -*-\n\
 @deftypefn {Mapping Function} {} sin (@var{x})\n\
 Compute the sine of each element of @var{x}.\n\
 @end deftypefn");
 
-  DEFUN_MAPPER (sinh, 0, 0, 0, sinh, 0, sinh, 0.0, 0.0, 0, 0,
+  DEFUN_MAPPER (sinh, 0, 0, 0, sinh, 0, std::sinh, 0.0, 0.0, 0, 0,
     "-*- texinfo -*-\n\
 @deftypefn {Mapping Function} {} sinh (@var{x})\n\
 Compute the inverse hyperbolic sine of each element of @var{x}.\n\
 @end deftypefn");
 
-  DEFUN_MAPPER (sqrt, 0, 0, 0, sqrt, 0, sqrt, 0.0, octave_Inf, 0, 1,
+  DEFUN_MAPPER (sqrt, 0, 0, 0, sqrt, 0, std::sqrt, 0.0, octave_Inf, 0, 1,
     "-*- texinfo -*-\n\
 @deftypefn {Mapping Function} {} sqrt (@var{x})\n\
 Compute the square root of @var{x}.  If @var{x} is negative, a complex\n\
 result is returned.  To compute the matrix square root, see\n\
 @ref{Linear Algebra}.\n\
 @end deftypefn");
 
-  DEFUN_MAPPER (tan, 0, 0, 0, tan, 0, tan, 0.0, 0.0, 0, 0,
+  DEFUN_MAPPER (tan, 0, 0, 0, tan, 0, std::tan, 0.0, 0.0, 0, 0,
     "-*- texinfo -*-\n\
 @deftypefn {Mapping Function} {} tan (@var{z})\n\
 Compute tangent of each element of @var{x}.\n\
 @end deftypefn");
 
-  DEFUN_MAPPER (tanh, 0, 0, 0, tanh, 0, tanh, 0.0, 0.0, 0, 0,
+  DEFUN_MAPPER (tanh, 0, 0, 0, tanh, 0, std::tanh, 0.0, 0.0, 0, 0,
     "-*- texinfo -*-\n\
 @deftypefn {Mapping Function} {} tanh (@var{x})\n\
 Compute hyperbolic tangent of each element of @var{x}.\n\
 @end deftypefn");
 
   DEFUN_MAPPER (toascii, xtoascii, 0, 0, 0, 0, 0, 0.0, 0.0, 1, 0,
     "-*- texinfo -*-\n\
 @deftypefn {Mapping Function} {} toascii (@var{s})\n\
