# HG changeset patch
# User dbateman
# Date 1192438802 0
#      Mon Oct 15 09:00:02 2007 +0000
# Node ID ecd6347f7d1c017f02cc1c6f559882a2975a9c04
# Parent  3e2a59c78b9d56814ea1ab4f90dee53788bb455d
[project @ 2007-10-15 09:00:02 by dbateman]

diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,8 +1,13 @@
+2007-10-15  David Bateman  <dbateman@free.fr>
+
+	* testfun/test.m: In error/warning blocks test for an error before
+	a warning to avoid unexpected failures.
+
 2007-10-15  Kim Hansen  i<kimhanse@gmail.com>
 
 	* testfun/assert.m: Correct documentation of absolution versus 
 	relative error tolerance and add tests.
 
 2007-10-14  David Bateman  <dbateman@free.fr>
 
 	* pkg/pkg.m (pkg:configure_make): Treat case of no files to install in
diff --git a/scripts/testfun/test.m b/scripts/testfun/test.m
--- a/scripts/testfun/test.m
+++ b/scripts/testfun/test.m
@@ -376,31 +376,32 @@ function [__ret1, __ret2, __ret3] = test
       end_try_catch
       
       if (__success)
         __success = 0;
 	__warnstate = warning ("query", "quiet");
 	warning ("on", "quiet");
       	try
  	  eval (sprintf ("__test__(%s);", __shared));
-	  __err = trimerr (lastwarn, "warning");
-          warning (__warnstate.state, "quiet");
-
           if (! __warning)
        	    __msg = sprintf ("%sexpected <%s> but got no error\n",
  			     __signal_fail, __pattern);
-          elseif (isempty (__err))
-            __msg = sprintf ("%sexpected <%s> but got no warning\n",
+	  else
+	    __err = trimerr (lastwarn, "warning");
+            warning (__warnstate.state, "quiet");
+            if (isempty (__err))
+              __msg = sprintf ("%sexpected <%s> but got no warning\n",
 			     __signal_fail, __pattern);
-          elseif (isempty (regexp (__err, __pattern, "once")))
-            __msg = sprintf ("%sexpected <%s> but got %s\n",
- 			     __signal_fail, __pattern, __err);
-          else
-            __success = 1;
-          endif
+            elseif (isempty (regexp (__err, __pattern, "once")))
+              __msg = sprintf ("%sexpected <%s> but got %s\n",
+ 			       __signal_fail, __pattern, __err);
+            else
+              __success = 1;
+            endif
+	  endif
 
       	catch
 	  __err = trimerr (lasterr, "error");
           warning (__warnstate.state, "quiet");
           if (__warning)
             __msg = sprintf ("%sexpected warning <%s> but got error %s\n",
 			     __signal_fail, __pattern, __err);
 	  elseif (isempty (regexp (__err, __pattern, "once")))
