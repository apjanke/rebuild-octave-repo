# HG changeset patch
# User Rik <rik@octave.org>
# Date 1470936013 25200
#      Thu Aug 11 10:20:13 2016 -0700
# Node ID a54d6b9c08bcc05e7dcea8c7c648c32d994cb1e6
# Parent  b80fddf2a9a0ceb2435c4abe42372ec835b1c0b5
Fix badly drawn 'o' and '.' markers at small and large sizes (OpenGL).

* gl-render.cc (make_marker_list): For the '.' marker, ensure that something
is drawn at markersizes below 3 by using a minimum size of 3.  For the '.' and
'o' markers, calculate the number of angular divisions based on the size of the
marker so smooth circles are drawn for every size.  Clean up code by removing
unneccessary parentheses around tertiary operator expression.

diff --git a/libinterp/corefcn/gl-render.cc b/libinterp/corefcn/gl-render.cc
--- a/libinterp/corefcn/gl-render.cc
+++ b/libinterp/corefcn/gl-render.cc
@@ -3809,106 +3809,117 @@ opengl_renderer::make_marker_list (const
       glVertex2d (+tt, +tt);
       glVertex2d (-tt, +tt);
       glVertex2d (+tt, -tt);
       glEnd ();
       break;
     case '.':
       {
         // The dot marker is special and is drawn at 1/3rd the specified size
-        double ang_step = M_PI / 5;
+
+        // Ensure that something is drawn even at very small markersizes
+        if (sz > 0 && sz < 3)
+          sz = 3;
+
+        int div = static_cast <int> (M_PI * sz / 12);
+        if (! (div % 2))
+          div += 1;               // ensure odd number for left/right symmetry
+        div = std::max (div, 3);  // ensure at least a few vertices are drawn
+        double ang_step = M_PI / div;
 
         glBegin (GL_POLYGON);
-        for (double ang = 0; ang < (2*M_PI); ang += ang_step)
-          glVertex2d (sz*cos (ang)/6, sz*sin (ang)/6);
+        for (double ang = 0; ang < 2*M_PI; ang += ang_step)
+          glVertex2d (sz/6*cos (ang), sz/6*sin (ang));
         glEnd ();
       }
       break;
     case 's':
-      glBegin ((filled ? GL_POLYGON : GL_LINE_LOOP));
+      glBegin (filled ? GL_POLYGON : GL_LINE_LOOP);
       glVertex2d (-sz/2, -sz/2);
       glVertex2d (-sz/2, sz/2);
       glVertex2d (sz/2, sz/2);
       glVertex2d (sz/2, -sz/2);
       glEnd ();
       break;
     case 'o':
       {
-        double ang_step = M_PI / 5;
-
-        glBegin ((filled ? GL_POLYGON : GL_LINE_LOOP));
-        for (double ang = 0; ang < (2*M_PI); ang += ang_step)
-          glVertex2d (sz*cos (ang)/2, sz*sin (ang)/2);
+        int div = static_cast <int> (M_PI * sz / 4);
+        if (! (div % 2))
+          div += 1;               // ensure odd number for left/right symmetry
+        div = std::max (div, 5);  // ensure at least a few vertices are drawn
+        double ang_step = M_PI / div;
+
+        glBegin (filled ? GL_POLYGON : GL_LINE_LOOP);
+        for (double ang = 0; ang < 2*M_PI; ang += ang_step)
+          glVertex2d (sz/2*cos (ang), sz/2*sin (ang));
         glEnd ();
       }
       break;
     case 'd':
-      glBegin ((filled ? GL_POLYGON : GL_LINE_LOOP));
+      glBegin (filled ? GL_POLYGON : GL_LINE_LOOP);
       glVertex2d (0, -sz/2);
       glVertex2d (sz/2, 0);
       glVertex2d (0, sz/2);
       glVertex2d (-sz/2, 0);
       glEnd ();
       break;
     case 'v':
-      glBegin ((filled ? GL_POLYGON : GL_LINE_LOOP));
+      glBegin (filled ? GL_POLYGON : GL_LINE_LOOP);
       glVertex2d (0, sz/2);
       glVertex2d (sz/2, -sz/2);
       glVertex2d (-sz/2, -sz/2);
       glEnd ();
       break;
     case '^':
-      glBegin ((filled ? GL_POLYGON : GL_LINE_LOOP));
+      glBegin (filled ? GL_POLYGON : GL_LINE_LOOP);
       glVertex2d (0, -sz/2);
       glVertex2d (-sz/2, sz/2);
       glVertex2d (sz/2, sz/2);
       glEnd ();
       break;
     case '>':
-      glBegin ((filled ? GL_POLYGON : GL_LINE_LOOP));
+      glBegin (filled ? GL_POLYGON : GL_LINE_LOOP);
       glVertex2d (sz/2, 0);
       glVertex2d (-sz/2, sz/2);
       glVertex2d (-sz/2, -sz/2);
       glEnd ();
       break;
     case '<':
-      glBegin ((filled ? GL_POLYGON : GL_LINE_LOOP));
+      glBegin (filled ? GL_POLYGON : GL_LINE_LOOP);
       glVertex2d (-sz/2, 0);
       glVertex2d (sz/2, -sz/2);
       glVertex2d (sz/2, sz/2);
       glEnd ();
       break;
     case 'p':
       {
-        double ang;
-        double r;
-        double dr = 1.0 - sin (M_PI/10)/sin (3*M_PI/10)*1.02;
-
-        glBegin ((filled ? GL_POLYGON : GL_LINE_LOOP));
+        double ang, r, dr;
+        dr = 1.0 - sin (M_PI/10)/sin (3*M_PI/10)*1.02;
+
+        glBegin (filled ? GL_POLYGON : GL_LINE_LOOP);
         for (int i = 0; i < 2*5; i++)
           {
-            ang = (-0.5 + double(i+1)/5) * M_PI;
-            r = 1.0 - (dr * fmod (double(i+1), 2.0));
-            glVertex2d (sz*r*cos (ang)/2, sz*r*sin (ang)/2);
+            ang = (-0.5 + double (i+1) / 5) * M_PI;
+            r = 1.0 - (dr * fmod (double (i+1), 2.0));
+            glVertex2d (sz/2*r*cos (ang), sz/2*r*sin (ang));
           }
         glEnd ();
       }
       break;
     case 'h':
       {
-        double ang;
-        double r;
-        double dr = 1.0 - 0.5/sin (M_PI/3)*1.02;
-
-        glBegin ((filled ? GL_POLYGON : GL_LINE_LOOP));
+        double ang, r, dr;
+        dr = 1.0 - 0.5/sin (M_PI/3)*1.02;
+
+        glBegin (filled ? GL_POLYGON : GL_LINE_LOOP);
         for (int i = 0; i < 2*6; i++)
           {
-            ang = (0.5 + double(i+1)/6.0) * M_PI;
-            r = 1.0 - (dr * fmod (double(i+1), 2.0));
-            glVertex2d (sz*r*cos (ang)/2, sz*r*sin (ang)/2);
+            ang = (0.5 + double (i+1) / 6.0) * M_PI;
+            r = 1.0 - (dr * fmod (double (i+1), 2.0));
+            glVertex2d (sz/2*r*cos (ang), sz/2*r*sin (ang));
           }
         glEnd ();
       }
       break;
     default:
       warning ("opengl_renderer: unsupported marker '%s'", marker.c_str ());
       break;
     }
