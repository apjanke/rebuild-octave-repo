# HG changeset patch
# User jwe
# Date 1144781005 0
#      Tue Apr 11 18:43:25 2006 +0000
# Node ID bd9cd65d51e418c87e9668c1c1b5795b0803509b
# Parent  26beffa9f66f3bdbaa54108c8003cb9ea9b4f2c5
[project @ 2006-04-11 18:43:25 by jwe]

diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,8 +1,13 @@
+2006-04-10  John W. Eaton  <jwe@octave.org>
+
+	* miscellaneous/dir.m: Ensure that returned structure array is
+	Nx1, not 1xN.
+
 2006-04-06  Olli Saarela  <olli.saarela@kcl.fi>
 
 	* plot/hist.m: Ignore NaN in inputs.
 
 2006-04-06  Keith Goodman  <kwgoodman@gmail.com>
 
 	* miscellaneous/mkoctfile.m: Doc string fix.
 
diff --git a/scripts/miscellaneous/dir.m b/scripts/miscellaneous/dir.m
--- a/scripts/miscellaneous/dir.m
+++ b/scripts/miscellaneous/dir.m
@@ -93,21 +93,21 @@ function retval = dir (file)
       for i = nf:-1:1
 	fn = flst{i};
 	[st, err, msg] = lstat (fn);
 	if (err < 0)
 	  warning ("dir: `lstat (%s)' failed: %s", fn, msg);
 	else
 	  [dummy, fn, ext] = fileparts (fn);
 	  fn = strcat (fn, ext);
-	  info(i).name = fn;
-	  info(i).date = strftime ("%d-%b-%Y %T", localtime (st.mtime));
-	  info(i).bytes = st.size;
-	  info(i).isdir = st.modestr(1) == "d";
-	  info(i).statinfo = st;
+	  info(i,1).name = fn;
+	  info(i,1).date = strftime ("%d-%b-%Y %T", localtime (st.mtime));
+	  info(i,1).bytes = st.size;
+	  info(i,1).isdir = st.modestr(1) == "d";
+	  info(i,1).statinfo = st;
 	endif
       endfor
     endif
 
   else
     error ("dir: expecting directory or filename to be a char array");
   endif
 
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,14 @@
+2006-04-11  John W. Eaton  <jwe@octave.org>
+
+	* pt-assign.cc (tree_simple_assignment::rvalue,
+	tree_multi_assignment::rvalue):
+	Error if RHS is a comma-separated list.
+
 2006-04-07  John W. Eaton  <jwe@octave.org>
 
 	* defaults.cc (FOCTAVE_VERSION): New function to replace
 	corresponding DEFCONSTX macro in symbols_of_defaults.
 
 	* file-io.cc (FP_tmpdir, FSEEK_SET, FSEEK_CUR, FSEEK_END, Fstdin,
 	Fstdout, Fstderr): New functions to replace DEFCONSTX macros in
 	symbols_of_file_io.
diff --git a/src/defun.cc b/src/defun.cc
--- a/src/defun.cc
+++ b/src/defun.cc
@@ -53,17 +53,17 @@ print_usage (const std::string& nm, bool
   if (sym_rec)
     {
       std::string h = sym_rec->help ();
 
       if (h.length () > 0)
 	{
 	  OSSTREAM buf;
 
-	  buf << "\n*** " << nm << ":\n\n";
+	  buf << "\nInvalid call to " << nm << ".  Correct usage is:\n\n";
 
 	  h = extract_help_from_dispatch (nm) + h;
 
 	  display_help_text (buf, h);
 
 	  buf << extra_msg << "\n";
 
 	  if (! just_usage)
diff --git a/src/pt-assign.cc b/src/pt-assign.cc
--- a/src/pt-assign.cc
+++ b/src/pt-assign.cc
@@ -88,16 +88,21 @@ tree_simple_assignment::rvalue (void)
 	{
 	  octave_value rhs_val = tmp(0);
 
 	  if (rhs_val.is_undefined ())
 	    {
 	      error ("value on right hand side of assignment is undefined");
 	      eval_error ();
 	    }
+	  else if (rhs_val.is_cs_list ())
+	    {
+	      error ("invalid assignment of comma-separated list");
+	      eval_error ();
+	    }
 	  else
 	    {
 	      octave_lvalue ult = lhs->lvalue ();
 
 	      if (error_state)
 		eval_error ();
 	      else
 		{
@@ -213,66 +218,73 @@ tree_multi_assignment::rvalue (int)
 
       if (error_state)
 	return retval;
 
       if (rhs_val.empty ())
 	{
 	  error ("value on right hand side of assignment is undefined");
 	  eval_error ();
+	  return retval;
 	}
       else
 	{
 	  int k = 0;
 
 	  int n = rhs_val.length ();
 
 	  if (n == 1)
 	    {
 	      octave_value tmp = rhs_val(0);
 
 	      if (tmp.is_cs_list ())
 		{
-		  rhs_val = tmp.list_value ();
-
-		  n = rhs_val.length ();
+		  error ("invalid assignment of comma-separated list");
+		  eval_error ();
+		  return retval;
 		}
 	    }
 
 	  retval.resize (n, octave_value ());
 
 	  for (tree_argument_list::iterator p = lhs->begin ();
 	       p != lhs->end ();
 	       p++)
 	    {
 	      tree_expression *lhs_elt = *p;
 
 	      if (lhs_elt)
 		{
 		  octave_lvalue ult = lhs_elt->lvalue ();
 
 		  if (error_state)
-		    eval_error ();
+		    {
+		      eval_error ();
+		      break;
+		    }
 		  else if (k < n)
 		    {
 		      ult.assign (etype, rhs_val(k));
 
 		      if (! error_state)
 			{
 			  if (etype == octave_value::op_asn_eq)
 			    retval(k) = rhs_val(k);
 			  else
 			    retval(k) = ult.value ();
 			}
 		    }
 		  else
 		    error ("element number %d undefined in return list", k+1);
 
 		  if (error_state)
-		    eval_error ();
+		    {
+		      eval_error ();
+		      break;
+		    }
 		  else if (print_result ())
 		    {
 		      if (Vprint_rhs_assign_val)
 			retval(k).print_with_name
 			  (octave_stdout, lhs_elt->str_print_code ());
 		      else
 			{
 			  // We clear any index here so that we can
