# HG changeset patch
# User Rik <rik@octave.org>
# Date 1546408974 28800
#      Tue Jan 01 22:02:54 2019 -0800
# Branch stable
# Node ID d527c61114251a52d232c20b8890bf011fa16b2c
# Parent  bba4b338757d092ddee886c09c2c7172193d57db
input.cc: Fix static analyzer detected issues (bug #55347).

* input.cc (find_indexed_expression): Delete unnecessary if conditional testing
for '}' char.
* input.cc (input_system::get_user_input): Remove unreachable code for empty
input_buf.
* input.cc (file_reader::get_input): Don't initialize *utf8_str variable
to nullptr since it is immediately assigned a value in the next line.
* input.cc (): Call args(0).xstring_value()
rather than incorrect version without prepended 'x'.

diff --git a/libinterp/corefcn/input.cc b/libinterp/corefcn/input.cc
--- a/libinterp/corefcn/input.cc
+++ b/libinterp/corefcn/input.cc
@@ -117,17 +117,17 @@ find_indexed_expression (const std::stri
   int paren_count = 0;
 
   int last = --pos;
 
   while (pos >= 0 && (line[pos] == ')' || line[pos] == '}'))
     {
       if (line[pos] == ')')
         paren_count++;
-      else if (line[pos] == '}')
+      else
         curly_count++;
 
       while (curly_count + paren_count > 0 && --pos >= 0)
         {
           if (line[pos] == ')')
             paren_count++;
           else if (line[pos] == '(')
             paren_count--;
@@ -631,19 +631,16 @@ namespace octave
 
     size_t len = input_buf.length ();
 
     octave_diary << input_buf;
 
     if (input_buf[len - 1] != '\n')
       octave_diary << "\n";
 
-    if (len < 1)
-      return read_as_string ? octave_value ("") : octave_value (Matrix ());
-
     if (read_as_string)
       {
         // FIXME: fix gnu_readline and octave_gets instead!
         if (input_buf.length () == 1 && input_buf[0] == '\n')
           retval(0) = "";
         else
           retval(0) = input_buf;
       }
@@ -1111,17 +1108,17 @@ namespace octave
     }
     else
     {
       // convert encoding to UTF-8 before returning string
       const char *src = src_str.c_str ();
       size_t srclen = src_str.length ();
 
       size_t length;
-      uint8_t *utf8_str = nullptr;
+      uint8_t *utf8_str;
 
       utf8_str = octave_u8_conv_from_encoding (encoding.c_str (), src, srclen,
                                                &length);
 
       if (! utf8_str)
         error ("file_reader::get_input: converting from codepage '%s' to UTF-8: %s",
                encoding.c_str (), std::strerror (errno));
 
@@ -1478,17 +1475,17 @@ for input.
 @seealso{add_input_event_hook}
 @end deftypefn */)
 {
   int nargin = args.length ();
 
   if (nargin < 1 || nargin > 2)
     print_usage ();
 
-  std::string hook_fcn_id = args(0).string_value ("remove_input_event_hook: argument not valid as a hook function name or id");
+  std::string hook_fcn_id = args(0).xstring_value ("remove_input_event_hook: argument not valid as a hook function name or id");
 
   bool warn = (nargin < 2);
 
   octave::input_system& input_sys = interp.get_input_system ();
 
   if (! input_sys.remove_input_event_hook (hook_fcn_id) && warn)
     warning ("remove_input_event_hook: %s not found in list",
              hook_fcn_id.c_str ());
