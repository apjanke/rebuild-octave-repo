# HG changeset patch
# User jwe
# Date 1196112273 0
#      Mon Nov 26 21:24:33 2007 +0000
# Node ID b48a21816f2e3d407e7806b43e33e38e08acf297
# Parent  9e7377f41b78b85c3cd7e1a4bd877bd112d3b4a2
[project @ 2007-11-26 21:24:32 by jwe]

diff --git a/scripts/image/imagesc.m b/scripts/image/imagesc.m
--- a/scripts/image/imagesc.m
+++ b/scripts/image/imagesc.m
@@ -13,30 +13,30 @@
 ## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
-## @deftypefn {Function File} {} imagesc (@var{A})
-## @deftypefnx {Function File} {} imagesc (@var{x}, @var{y}, @var{A})
+## @deftypefn {Function File} {} imagesc (@var{a})
+## @deftypefnx {Function File} {} imagesc (@var{x}, @var{y}, @var{a})
 ## @deftypefnx {Function File} {} imagesc (@dots{}, @var{limits})
 ## @deftypefnx {Function File} {} imagesc (@var{h}, @dots{})
 ## @deftypefnx {Function File} { @var{h} = } imagesc (@dots{})
-## Display a scaled version of the matrix @var{A} as a color image.  The
+## Display a scaled version of the matrix @var{a} as a color image.  The
 ## colormap is scaled so that the entries of the matrix occupy the entire
 ## colormap.  If @var{limits} = [@var{lo}, @var{hi}] are given, then that
 ## range is set to the 'clim' of the current axes.
 ##
 ## The axis values corresponding to the matrix elements are specified in
 ## @var{x} and @var{y}, either as pairs giving the minimum and maximum
 ## values for the respective axes, or as values for each row and column
-## of the matrix @var{A}.
+## of the matrix @var{a}.
 ##
 ## @seealso{image, imshow, clim, caxis}
 ## @end deftypefn
 
 ## Author: Tony Richardson <arichard@stark.cc.oh.us>
 ## Created: July 1994
 ## Adapted-By: jwe
 
@@ -99,22 +99,22 @@ function ret = __imagesc__ (ax, x, y, A,
     print_usage ();
   elseif (nargin == 2)
     A = x;
     x = y = limits = [];
   elseif (nargin == 3)
     A = x;
     limits = y;
     x = y = [];
-  elseif (nargin == 4 && !isscalar (x) && !isscalar (y) && !isscalar (A))
+  elseif (nargin == 4 && ! isscalar (x) && ! isscalar (y) && ! isscalar (A))
     limits = [];
   endif
 
   ret = image (ax, x, y, A);
 
   ## use given limits or guess them from the matrix
   if (length (limits) == 2 && limits(2) >= limits(1))
-     set (ax, "clim", limits);
-  elseif (!isempty (limits))
-     error ("expected data limits to be [lo, hi]");
+    set (ax, "clim", limits);
+  elseif (! isempty (limits))
+    error ("expected data limits to be [lo, hi]");
   endif
 
 endfunction
diff --git a/scripts/linear-algebra/condest.m b/scripts/linear-algebra/condest.m
--- a/scripts/linear-algebra/condest.m
+++ b/scripts/linear-algebra/condest.m
@@ -12,26 +12,26 @@
 ## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
-## @deftypefn {Function File} {[@var{est}, @var{v}] =} condest (@var{A}, @var{t}) 
-## @deftypefnx {Function File} {[@var{est}, @var{v}] =} condest (@var{A}, @var{solve}, @var{solve_t}, @var{t})
+## @deftypefn {Function File} {[@var{est}, @var{v}] =} condest (@var{a}, @var{t}) 
+## @deftypefnx {Function File} {[@var{est}, @var{v}] =} condest (@var{a}, @var{solve}, @var{solve_t}, @var{t})
 ## @deftypefnx {Function File} {[@var{est}, @var{v}] =} condest (@var{apply}, @var{apply_t}, @var{solve}, @var{solve_t}, @var{n}, @var{t})
 ##
 ## Estimate the 1-norm condition number of a matrix matrix @var{A}
 ## using @var{t} test vectors using a randomized 1-norm estimator.
 ## If @var{t} exceeds 5, then only 5 test vectors are used.
 ##
 ## If the matrix is not explicit, e.g. when  estimating the condition 
-## number of @var{A} given an LU factorization, @code{condest} uses the 
+## number of @var{a} given an LU factorization, @code{condest} uses the 
 ## following functions:
 ##
 ## @table @var
 ## @item apply
 ## @code{A*x} for a matrix @code{x} of size @var{n} by @var{t}.
 ## @item apply_t
 ## @code{A'*x} for a matrix @code{x} of size @var{n} by @var{t}.
 ## @item solve
@@ -41,72 +41,77 @@
 ## @end table
 ##
 ## The implicit version requires an explicit dimension @var{n}.
 ##
 ## @code{condest} uses a randomized algorithm to approximate
 ## the 1-norms.
 ##
 ## @code{condest} returns the 1-norm condition estimate @var{est} and
-## a vector @var{v} satisfying @code{norm (@var{A}*@var{v}, 1) == norm
-## (@var{A}, 1) * norm (@var{v}, 1) / @var{est}}. When @var{est} is
-## large, @var{v} is an approximate null vector.
+## a vector @var{v} satisfying @code{norm (A*v, 1) == norm (A, 1) * norm
+## (@var{v}, 1) / @var{est}}. When @var{est} is large, @var{v} is an
+## approximate null vector.
 ##
 ## References: 
 ## @itemize
 ## @item Nicholas J. Higham and Françoise Tisseur, "A Block Algorithm
 ## for Matrix 1-Norm Estimation, with an Application to 1-Norm
 ## Pseudospectra." SIMAX vol 21, no 4, pp 1185-1201.
 ## @url{http://dx.doi.org/10.1137/S0895479899356080}
 ## @item Nicholas J. Higham and Françoise Tisseur, "A Block Algorithm
 ## for Matrix 1-Norm Estimation, with an Application to 1-Norm
 ## Pseudospectra." @url{http://citeseer.ist.psu.edu/223007.html}
 ## @end itemize
 ##
 ## @seealso{norm, cond, onenormest}
-##
 ## @end deftypefn
 
 ## Code originally licensed under
 ##
 ##  Copyright (c) 2007, Regents of the University of California
 ##  All rights reserved.
+##
 ##  Redistribution and use in source and binary forms, with or without
-##  modification, are permitted provided that the following conditions are met:
+##  modification, are permitted provided that the following conditions
+##  are met:
 ##
 ##     * Redistributions of source code must retain the above copyright
 ##       notice, this list of conditions and the following disclaimer.
-##     * Redistributions in binary form must reproduce the above copyright
-##       notice, this list of conditions and the following disclaimer in the
-##       documentation and/or other materials provided with the distribution.
-##     * Neither the name of the University of California, Berkeley nor the
-##       names of its contributors may be used to endorse or promote products
-##       derived from this software without specific prior written permission.
+##
+##     * Redistributions in binary form must reproduce the above
+##       copyright notice, this list of conditions and the following
+##       disclaimer in the documentation and/or other materials provided
+##       with the distribution.
+##
+##     * Neither the name of the University of California, Berkeley nor
+##       the names of its contributors may be used to endorse or promote
+##       products derived from this software without specific prior
+##       written permission.
 ##
-##  THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND ANY
-##  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
-##  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
-##  DISCLAIMED. IN NO EVENT SHALL THE REGENTS AND CONTRIBUTORS BE LIABLE FOR
-##  ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
-##  DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
-##  OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
-##  HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
-##  LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
-##  OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF 
+##  THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS''
+##  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
+##  TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
+##  PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE REGENTS AND
+##  CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+##  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+##  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
+##  USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
+##  ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
+##  OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
+##  OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 ##  SUCH DAMAGE.
-##
-## Relicensed to GPL for inclusion in Octave.
 
 ## Author: Jason Riedy <ejr@cs.berkeley.edu>
 ## Keywords: linear-algebra norm estimation
 ## Version: 0.2
 
 function [est, v] = condest (varargin)
+
   if size (varargin, 2) < 1 || size (varargin, 2) > 5,
-    usage("condest: Incorrect arguments.");
+    print_usage ();
   endif
 
   default_t = 5;
 
   if (ismatrix (varargin{1}))
     n = size (varargin{1}, 1);
     if (n != size (varargin{1}, 2))
       error ("condest: matrix must be square.");
diff --git a/scripts/linear-algebra/onenormest.m b/scripts/linear-algebra/onenormest.m
--- a/scripts/linear-algebra/onenormest.m
+++ b/scripts/linear-algebra/onenormest.m
@@ -12,21 +12,21 @@
 ## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
-## @deftypefn {Function File} {[@var{est}, @var{v}, @var{w}, @var{iter}] =} onenormest (@var{A}, @var{t}) 
+## @deftypefn {Function File} {[@var{est}, @var{v}, @var{w}, @var{iter}] =} onenormest (@var{a}, @var{t}) 
 ## @deftypefnx {Function File} {[@var{est}, @var{v}, @var{w}, @var{iter}] =} onenormest (@var{apply}, @var{apply_t}, @var{n}, @var{t})
 ##
 ## Apply Higham and Tisseur's randomized block 1-norm estimator to
-## matrix @var{A} using @var{t} test vectors. If @var{t} exceeds 5, then
+## matrix @var{a} using @var{t} test vectors. If @var{t} exceeds 5, then
 ## only 5 test vectors are used.
 ##
 ## If the matrix is not explicit, e.g. when estimating the norm of 
 ## @code{inv (@var{A})} given an LU factorization, @code{onenormest} applies 
 ## @var{A} and its conjugate transpose through a pair of functions 
 ## @var{apply} and @var{apply_t}, respectively, to a dense matrix of size 
 ## @var{n} by @var{t}. The implicit version requires an explicit dimension 
 ## @var{n}.
@@ -50,41 +50,46 @@
 ##
 ## @seealso{condest, norm, cond}
 ## @end deftypefn
 
 ## Code originally licensed under
 ##
 ##  Copyright (c) 2007, Regents of the University of California
 ##  All rights reserved.
+##
 ##  Redistribution and use in source and binary forms, with or without
-##  modification, are permitted provided that the following conditions are met:
+##  modification, are permitted provided that the following conditions
+##  are met:
 ##
 ##     * Redistributions of source code must retain the above copyright
 ##       notice, this list of conditions and the following disclaimer.
-##     * Redistributions in binary form must reproduce the above copyright
-##       notice, this list of conditions and the following disclaimer in the
-##       documentation and/or other materials provided with the distribution.
-##     * Neither the name of the University of California, Berkeley nor the
-##       names of its contributors may be used to endorse or promote products
-##       derived from this software without specific prior written permission.
+##
+##     * Redistributions in binary form must reproduce the above
+##       copyright notice, this list of conditions and the following
+##       disclaimer in the documentation and/or other materials provided
+##       with the distribution.
+##
+##     * Neither the name of the University of California, Berkeley nor
+##       the names of its contributors may be used to endorse or promote
+##       products derived from this software without specific prior
+##       written permission.
 ##
-##  THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND ANY
-##  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
-##  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
-##  DISCLAIMED. IN NO EVENT SHALL THE REGENTS AND CONTRIBUTORS BE LIABLE FOR
-##  ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
-##  DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
-##  OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
-##  HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
-##  LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
-##  OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF 
+##  THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS''
+##  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
+##  TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
+##  PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE REGENTS AND
+##  CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+##  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+##  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
+##  USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
+##  ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
+##  OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
+##  OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 ##  SUCH DAMAGE.
-##
-## Relicensed to GPL for inclusion in Octave.
 
 ## Author: Jason Riedy <ejr@cs.berkeley.edu>
 ## Keywords: linear-algebra norm estimation
 ## Version: 0.2
 
 function [est, v, w, iter] = onenormest (varargin)
 
   if (size (varargin, 2) < 1 || size (varargin, 2) > 4)
diff --git a/scripts/plot/__bar__.m b/scripts/plot/__bar__.m
--- a/scripts/plot/__bar__.m
+++ b/scripts/plot/__bar__.m
@@ -31,17 +31,17 @@ function varargout = __bar__ (vertical, 
     oldh = gca ();
     unwind_protect
       axes (h);
       [varargout{:}] = __bar2__ (h, vertical, func, varargin{2:end});
     unwind_protect_cleanup
       axes (oldh);
     end_unwind_protect
   else
-    [varargout{:}] = __bar2__ (gca(), vertical, func, varargin{:});
+    [varargout{:}] = __bar2__ (gca (), vertical, func, varargin{:});
   endif
 
 endfunction
 
 function varargout = __bar2__ (h, vertical, func, varargin)
 
   ## Slightly smaller than 0.8 to avoid clipping issue in gnuplot 4.0
   width = 0.8 - 10 * eps; 
@@ -154,22 +154,24 @@ function varargout = __bar2__ (h, vertic
   yb(3:4:4*ylen,:) = y1;
   yb(4:4:4*ylen,:) = y0;
 
   xb = reshape (xb, [4, numel(xb) / 4 / ycols, ycols]);
   yb = reshape (yb, [4, numel(yb) / 4 / ycols, ycols]);
 
   if (nargout < 2)
     newplot ();
-    tmp = __bars__ (h, vertical, x, y, xb, yb, width, group, have_line_spec, newargs {:});
+    tmp = __bars__ (h, vertical, x, y, xb, yb, width, group,
+		    have_line_spec, newargs {:});
     if (nargout == 1)
       varargout{1} = tmp;
     endif
   else
     if (vertical)
       varargout{1} = xb;
       varargout{2} = yb;
     else
       varargout{1} = yb;
       varargout{2} = xb;
     endif
   endif
+
 endfunction
diff --git a/scripts/plot/__bars__.m b/scripts/plot/__bars__.m
--- a/scripts/plot/__bars__.m
+++ b/scripts/plot/__bars__.m
@@ -22,35 +22,35 @@
 
 function tmp = __bars__ (h, vertical, x, y, xb, yb, width, group, have_color_spec, varargin)
 
   ycols = columns (y);
   clim = get (h, "clim");
 
   if (vertical)
     tmp = [];
-    for i = 1 : ycols
+    for i = 1:ycols
       if (! have_color_spec)
 	if (ycols == 1)
-	  lev = clim (1);
+	  lev = clim(1);
 	else
 	  lev = (i - 1) * (clim(2) - clim(1)) / (ycols - 1) - clim(1);
 	endif
 	tmp = [tmp; patch(xb(:,:,i), yb(:,:,i), "FaceColor", "flat", 
 			  "cdata", lev, varargin {:})];
       else
 	tmp = [tmp; patch(xb(:,:,i), yb(:,:,i), varargin {:})];
       endif
     endfor
   else
     tmp = [];
-    for i = 1 : ycols
+    for i = 1:ycols
       if (! have_color_spec)
 	if (ycols == 1)
-	  lev = clim (1)
+	  lev = clim(1)
 	else
 	  lev = (i - 1) * (clim(2) - clim(1)) / (ycols - 1) - clim(1);
 	endif
 	tmp = [tmp; patch(yb(:,:,i), xb(:,:,i), "FaceColor", "flat", 
 			  "cdata", lev, varargin {:})];
       else
 	tmp = [tmp; patch(yb(:,:,i), xb(:,:,i), varargin {:})];
       endif
diff --git a/scripts/plot/__contour__.m b/scripts/plot/__contour__.m
--- a/scripts/plot/__contour__.m
+++ b/scripts/plot/__contour__.m
@@ -27,18 +27,18 @@ function [c, h] = __contour__ (varargin)
     if (strcmp (z, "none"))
       z = NaN;
     elseif (strcmp (z, "base"))
       if (nargin == 1)
 	z = varargin {1};
       else
 	z = varargin {3};
       endif
-      z = 2 * (min(z(:)) - max(z(:)));
-    elseif (!strcmp (z, "level"))
+      z = 2 * (min (z(:)) - max (z(:)));
+    elseif (! strcmp (z, "level"))
       error ("unrecognized z argument");
     endif
   endif
 
   [c, lev] = contourc (varargin{3:end});
 
   ## Decode contourc output format.
   i1 = 1;
diff --git a/scripts/plot/__go_draw_axes__.m b/scripts/plot/__go_draw_axes__.m
--- a/scripts/plot/__go_draw_axes__.m
+++ b/scripts/plot/__go_draw_axes__.m
@@ -27,17 +27,17 @@ function __go_draw_axes__ (h, plot_strea
     axis_obj = get (h);
 
     parent_figure_obj = get (axis_obj.parent);
 
     persistent have_newer_gnuplot ...
       = compare_versions (__gnuplot_version__ (), "4.0", ">");
 
     ## Set axis properties here?
-    pos = [0,0,1,1];
+    pos = [0, 0, 1, 1];
     if (! isempty (axis_obj.outerposition))
       pos = axis_obj.outerposition;
     endif
 
     if (! isempty (axis_obj.position))
       pos = axis_obj.position;
     endif
 
diff --git a/scripts/plot/__go_draw_figure__.m b/scripts/plot/__go_draw_figure__.m
--- a/scripts/plot/__go_draw_figure__.m
+++ b/scripts/plot/__go_draw_figure__.m
@@ -47,17 +47,17 @@ function __go_draw_figure__ (f, plot_str
 	if (multiplot_mode)
 	  fputs (plot_stream, "set multiplot;\n");
 	endif
 
 	for i = 1:nkids
 	  obj = get (kids(i));
 	  switch (obj.type)
 	    case "axes"
-	      __go_draw_axes__(kids (i), plot_stream, enhanced);
+	      __go_draw_axes__ (kids (i), plot_stream, enhanced);
 	    otherwise
 	      error ("__go_draw_figure__: unknown object class, %s",
 		     obj.type);
 	  endswitch
 	endfor
 
 	if (multiplot_mode)
 	  fputs (plot_stream, "unset multiplot;\n");
diff --git a/scripts/plot/__patch__.m b/scripts/plot/__patch__.m
--- a/scripts/plot/__patch__.m
+++ b/scripts/plot/__patch__.m
@@ -20,17 +20,19 @@
 
 ## __patch__ (p, x, y, c)
 ## Create patch object from x and y with color c and parent p.
 ## Return handle to patch object.
 
 ## Author: Kai Habel
 
 function [h, fail] = __patch__ (p, varargin)
+
   fail = false;
+
   if (nargin < 3)
     fail = true;
     return;
   endif
 
   iarg = 1;
   have_x = have_z = have_c = have_faces = false;
   if (isnumeric (varargin{1}))
@@ -45,18 +47,19 @@ function [h, fail] = __patch__ (p, varar
     iarg += 2;
 
     if (nargin > 3 && ndims (varargin{3}) == 2 && ndims (x) == 2
 	&& isequal (size (varargin{3}), size (x)))
       z = varargin {3};
       have_z = true;
       iarg++;
     endif
-  elseif (ischar (varargin{1}) && (strcmp (tolower (varargin{1}), "faces") || 
-				strcmp (tolower (varargin{1}), "vertices")))
+  elseif (ischar (varargin{1})
+	  && (strcmp (tolower (varargin{1}), "faces")
+	      || trcmp (tolower (varargin{1}), "vertices")))
     if (! isnumeric (varargin{2}))
       fail = true;
       return;
     endif
     
     if (strcmp (tolower (varargin{1}), "faces"))
       faces = varargin{2};
       if (strcmp (tolower (varargin{3}), "vertices"))
@@ -83,17 +86,18 @@ function [h, fail] = __patch__ (p, varar
       c = varargin{iarg};
       have_c = true;
       iarg++;
 
       if (ndims (c) == 3 && size (c, 2) == 1)
 	c = permute (c, [1, 3, 2]);
       endif
     elseif (ischar (varargin{iarg}) && rem (nargin - iarg, 2) != 0)
-      ## Assume that any additional argument over an even number is color string
+      ## Assume that any additional argument over an even number is
+      ## color string.
       c = tolower (varargin{iarg});
       have_c = true;
       iarg++;
     endif
   endif
 
   if (rem (nargin - iarg, 2) != 0)
     fail = true;
@@ -140,39 +144,39 @@ function [h, fail] = __patch__ (p, varar
   h = __go_patch__ (p);
   ax = get (h, "parent");
 
   cargs = {};
   if (have_c)
     if (ischar (c))
       cargs{1} = "facecolor";
       cargs{2} = c;
-    elseif (isvector(c) && numel(c) == nc)
+    elseif (isvector (c) && numel (c) == nc)
       if (isnan (c))
 	cargs{1} = "facecolor";
 	cargs{2} = [1, 1, 1];
 	cargs{3} = "cdata";
 	cargs{4} = c;
       elseif (isnumeric (c))
 	cargs{1} = "facecolor";
 	cargs{2} = "flat";
 	cargs{3} = "cdata";
 	cargs{4} = c;
-	clim = get(ax, "clim");
+	clim = get (ax, "clim");
 	if (c(1) < clim(1))
           set (ax, "clim", [c(1), clim(2)])
 	  clim(1) = c(1);
 	endif
 	if (c(1) > clim(2))
           set (ax, "clim", [clim(1), c(1)])
 	endif
       else
 	error ("patch: color value not valid");
       endif
-    elseif (size(c, ndims(c)) == 3)
+    elseif (size (c, ndims (c)) == 3)
       cargs{1} = "facecolor";
       cargs{2} = "flat";
       cargs{3} = "cdata";
       cargs{4} = c;
     else
       ## Color Vectors
 
       if (rows (c2) != rows (x) || rows (c2) != length (y))
@@ -187,15 +191,15 @@ function [h, fail] = __patch__ (p, varar
 	endif
       endif
     endif
   else
     cargs{1} = "facecolor";
     cargs{2} = [0, 1, 0];
   endif
 
-  set (h, "xdata", x, "ydata", y, "faces", faces, "vertices", vert, ...
+  set (h, "xdata", x, "ydata", y, "faces", faces, "vertices", vert,
        cargs{:}, varargin{iarg:end});
   if (have_z)
     set (h, "zdata", z);
   endif
  
 endfunction
diff --git a/scripts/plot/__quiver__.m b/scripts/plot/__quiver__.m
--- a/scripts/plot/__quiver__.m
+++ b/scripts/plot/__quiver__.m
@@ -14,73 +14,74 @@
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## Undocumented internal function
 
 function hlist = __quiver__ (varargin)
-  h = varargin {1};
-  is3d = varargin {2};
+
+  h = varargin{1};
+  is3d = varargin{2};
 
   s = 1;
   arrowsize = 0.33;
 
   firstnonnumeric = Inf;
   for i = 3:nargin
-    if (! isnumeric (varargin {i}))
+    if (! isnumeric (varargin{i}))
       firstnonnumeric = i;
       break;
     endif
   endfor
 
   ioff = 3;
   if (nargin < (6 + is3d) || firstnonnumeric < (6 + is3d))
     u = varargin{ioff++};
     v = varargin{ioff++};
     if (is3d)
       w = varargin{ioff++}
       [x, y, z] = meshgrid (1:size(u,1), 1:size(u,2), 1:max(size(w)));
     else
       [x, y] = meshgrid (1:size(u,1), 1:size(u,2));
     endif
-    if (nargin >= ioff && isnumeric (varargin{ioff}) && 
-	isscalar (varargin{ioff}))
+    if (nargin >= ioff && isnumeric (varargin{ioff})
+	&& isscalar (varargin{ioff}))
       s = varargin{ioff++};
     endif
   else
     x = varargin{ioff++};
     y = varargin{ioff++};
     if (is3d)
       z = varargin{ioff++};
     endif
     u = varargin{ioff++};
     v = varargin{ioff++}; 
     if (is3d)
       w = varargin{ioff++};
-      if (isvector(x) && isvector(y) && isvector(z) && 
-	  (!isvector (u) || !isvector (v) || !isvector(w)))
+      if (isvector (x) && isvector (y) && isvector (z)
+	  && (! isvector (u) || ! isvector (v) || ! isvector(w)))
 	[x, y, z] = meshgrid (x, y, z);
       endif
     else
-      if (isvector(x) && isvector(y) && (!isvector (u) || !isvector (v)))
+      if (isvector (x) && isvector (y) && (! isvector (u) || ! isvector (v)))
 	[x, y] = meshgrid (x, y);
       endif
     endif
-    if (nargin >= ioff && isnumeric (varargin{ioff}) && 
-	isscalar (varargin{ioff}))
+    if (nargin >= ioff && isnumeric (varargin{ioff})
+	&& isscalar (varargin{ioff}))
       s = varargin{ioff++};
     endif
   endif
 
   have_filled = false;
   have_line_spec = false;
   while (ioff <= nargin)
-    arg = varargin {ioff++};
+    arg = varargin{ioff++};
     if (ischar (arg) && strncmp (tolower (arg), "filled", 6))
       have_filled = true;
     elseif ((isstr (arg) || iscell (arg))
 	    && ! have_line_spec)
       [linespec, valid] = __pltopt__ ("quiver", arg, false);
       if (valid)
 	have_line_spec = true;
 	if (strncmp (linespec.linestyle, "none", 4))
@@ -189,34 +190,35 @@ function hlist = __quiver__ (varargin)
       h2 = plot3 ([xarrw1.'; xend.'; xarrw2.'; NaN(1, length (x))](:),
 		  [yarrw1.'; yend.'; yarrw2.'; NaN(1, length (y))](:),
 		  [zarrw1.'; zend.'; zarrw2.'; NaN(1, length (z))](:));
     else
       h2 = plot ([xarrw1.'; xend.'; xarrw2.'; NaN(1, length (x))](:),
 		 [yarrw1.'; yend.'; yarrw2.'; NaN(1, length (y))](:));
     endif
 
-    if (! have_line_spec || (isfield (linespec, "marker") && 
-			     strncmp (linespec.marker, "none", 4)))
+    if (! have_line_spec
+	|| (isfield (linespec, "marker")
+	    && strncmp (linespec.marker, "none", 4)))
       if (is3d)
 	h3 = plot3 (x, y, z, "linestyle", "none", "marker", "none");
       else
 	h3 = plot (x, y, "linestyle", "none", "marker", "none");
       endif
     else
       if (is3d)
 	h3 = plot3 (x, y, z, "linestyle", "none", "marker", linespec.marker);
       else
 
 	h3 = plot (x, y, "linestyle", "none", "marker", linespec.marker);
       endif
     endif
     if (have_filled)
       ## FIXME gnuplot doesn't respect the markerfacecolor field
-      set(h3, "markerfacecolor", get (h1, "color")); 
+      set (h3, "markerfacecolor", get (h1, "color")); 
     endif
   unwind_protect_cleanup
     set (h, "nextplot", hstate);
   end_unwind_protect
 
   hlist = [h1; h2; h3];
 
 endfunction
diff --git a/scripts/plot/__scatter__.m b/scripts/plot/__scatter__.m
--- a/scripts/plot/__scatter__.m
+++ b/scripts/plot/__scatter__.m
@@ -14,72 +14,74 @@
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## Undocumented internal function.
 
 function h = __scatter__ (varargin)
-  h = varargin {1};
-  nd = varargin {2};
-  fcn = varargin {3};
-  x = varargin {4}(:);
-  y = varargin {5}(:);
+
+  h = varargin{1};
+  nd = varargin{2};
+  fcn = varargin{3};
+  x = varargin{4}(:);
+  y = varargin{5}(:);
   istart = 6;
+
   if (nd == 3)
-    z = varargin {6}(:);
+    z = varargin{6}(:);
     istart = 7;
   else
-    z = zeros (length(x), 0);
+    z = zeros (length (x), 0);
   endif
 
   firstnonnumeric = Inf;
   for i = istart:nargin
-    if (! isnumeric (varargin {i}))
+    if (! isnumeric (varargin{i}))
       firstnonnumeric = i;
       break;
     endif
   endfor
 
   if (firstnonnumeric > istart)
-    s = varargin {istart};
+    s = varargin{istart};
     if (isempty (s))
       s = 8;
     endif
   else
     s = 8;
   endif
   ## Note markersize is in points^2 for 2D and points for 3D, and 
   ## the below is an approximation, that is empircally visually correct.
   if (nd == 2)
     s = sqrt (s) / 2;
   else
     s = s / 4;
   endif
 
   if (istart < nargin && firstnonnumeric > istart + 1)
-    c = varargin {istart + 1};
+    c = varargin{istart + 1};
     if (isvector (c))
       c = c(:);
     endif
-  elseif (firstnonnumeric == istart + 1 && ischar (varargin {istart + 1}))
+  elseif (firstnonnumeric == istart + 1 && ischar (varargin{istart + 1}))
     c = varargin{istart + 1};
     firstnonnumeric++;
   else
     c = 1 : length(x);
   endif
 
   newargs = {};
   filled = false;
   have_marker = false;
   marker = "o";
   iarg = firstnonnumeric;
   while (iarg <= nargin)
-    arg = varargin {iarg++};
+    arg = varargin{iarg++};
     if (ischar (arg) && strncmp (tolower (arg), "filled", 6))
       filled = true;
     elseif ((isstr (arg) || iscell (arg)) && ! have_marker)
       [linespec, valid] = __pltopt__ ("scatter", arg, false);
       if (valid)
 	have_marker = true;
 	marker = linespec.marker;
 	if (strncmp (marker, "none", 4))
@@ -92,28 +94,28 @@ function h = __scatter__ (varargin)
       newargs{end+1} = arg;
       if (iarg <= nargin)
 	newargs{end+1} = varagin{iarg++};
       endif
     endif
   endwhile
 
   if (ischar (c))
-    h = patch('faces', [1:length(x)].', 'vertices', [x, y, z], 'facecolor',
-	      'none', 'edgecolor', c, 'marker', marker, 
-	      'markersize', s, 'linestyle', 'none');
+    h = patch("faces", [1:length(x)].', "vertices", [x, y, z], "facecolor",
+	      "none", "edgecolor", c, "marker", marker, 
+	      "markersize", s, "linestyle", "none");
     if (filled)
-      set(h, 'markerfacecolor', c); 
+      set(h, "markerfacecolor", c); 
     endif
   else
-    h = patch('faces', [1:length(x)].', 'vertices', [x, y, z], 'facecolor',
-	      'none', 'edgecolor', 'flat', 'cdata', c, 'marker', marker, 
-	      'markersize', s, 'linestyle', 'none');
+    h = patch("faces", [1:length(x)].', "vertices", [x, y, z], "facecolor",
+	      "none", "edgecolor", "flat", "cdata", c, "marker", marker, 
+	      "markersize", s, "linestyle", "none");
     if (filled)
-      set(h, 'markerfacecolor', 'flat'); 
+      set(h, "markerfacecolor", "flat"); 
     endif
     ax = get (h, "parent");
     clim = get (ax, "clim");
     if (min(c(:)) < clim(1))
       clim(1) = min(c(:));
       set (ax, "clim", clim);
     endif
     if (max(c(:)) > clim(2))
diff --git a/scripts/plot/colorbar.m b/scripts/plot/colorbar.m
--- a/scripts/plot/colorbar.m
+++ b/scripts/plot/colorbar.m
@@ -49,18 +49,18 @@
 
 ## PKG_ADD: mark_as_command colorbar
 
 function colorbar (varargin)
   
   if (nargin > 0 && strcmpi(varargin{1}, "peer"))
     if (nargin > 1)
       ax = varargin{2};
-      if (!isscalar (ax) || !ishandle (ax) || 
-	  strcmp (get (ax, "type"), "axes"))
+      if (!isscalar (ax) || ! ishandle (ax)
+	  || strcmp (get (ax, "type"), "axes"))
 	error ("colorbar: expecting an axes handle following 'peer'");
       endif
     else
       error ("colorbar: misisng axes handle after 'peer'");
     endif
   else
     ax = gca ();
   endif
@@ -69,30 +69,31 @@ function colorbar (varargin)
   for i = 1 : length (varargin)
     arg = varargin {i};
     if (length(arg) < 1)
       pos = "eastoutside";
     elseif (ischar (arg))
       arg = tolower (arg);
       if (strcmp (arg, "off") || strcmp (arg, "none"))
 	pos = "none";
-      elseif (strcmp (arg, "north") || strcmp (arg, "south") ||
-	      strcmp (arg, "east") || strcmp (arg, "west") ||
-	      strcmp (arg, "northoutside") || strcmp (arg, "southoutside") ||
-	      strcmp (arg, "eastoutside") || strcmp (arg, "westoutside"))
+      elseif (strcmp (arg, "north") || strcmp (arg, "south")
+	      || strcmp (arg, "east") || strcmp (arg, "west")
+	      || strcmp (arg, "northoutside") || strcmp (arg, "southoutside")
+	      || strcmp (arg, "eastoutside") || strcmp (arg, "westoutside"))
 	pos = arg;
       else
 	error ("colorbar: unrecognized position argument");
       endif
     else
       error ("colorbar: expecting string arguments");
     endif
   endfor
 
   set (ax, "__colorbar__", pos);
+
 endfunction
 
 
 %!demo
 %! hold off;
 %! close all;
 %! n = 64; x = kron (1:n,ones(n,1)); x = abs(x - x.'); 
 %! imagesc(x)
diff --git a/scripts/plot/drawnow.m b/scripts/plot/drawnow.m
--- a/scripts/plot/drawnow.m
+++ b/scripts/plot/drawnow.m
@@ -210,14 +210,14 @@ function have_enhanced = enhanced_term (
     endif
   endif
 
   term = tolower (term);
 
   have_enhanced = false;
   for i = 1 : length (enhanced_terminals)
     t = enhanced_terminals{i};
-    if (strncmp (term, t, min (length (term), length(t))))
+    if (strncmp (term, t, min (length (term), length (t))))
       have_enhanced = true;
       break;
     endif
   endfor
 endfunction
diff --git a/scripts/plot/hist.m b/scripts/plot/hist.m
--- a/scripts/plot/hist.m
+++ b/scripts/plot/hist.m
@@ -71,17 +71,17 @@ function [nn, xx] = hist (y, varargin)
     ## nargin is either 2 or 3
     x = varargin {iarg++};
     if (isscalar (x))
       n = x;
       if (n <= 0)
         error ("hist: number of bins must be positive");
       endif
       x = [0.5:n]'/n;
-      x = x * (max_val - min_val) + ones(size(x)) * min_val;
+      x = x * (max_val - min_val) + ones (size (x)) * min_val;
     elseif (isreal (x))
       if (isvector (x))
 	x = x(:);
       endif
       tmp = sort (x);
       if (any (tmp != x))
         warning ("hist: bin values not sorted on input");
         x = tmp;
@@ -114,17 +114,17 @@ function [nn, xx] = hist (y, varargin)
     t1 = zeros (1, columns (y));
     t2 = reshape (chist(idx > len), size (cutoff));
     t3 = chist(end,:) - sum (isnan (y));
     chist = [t1; t2; t3];
   endif
 
   freq = diff (chist);
 
-  if (nargin > 2 && !ischar (varargin{iarg}))
+  if (nargin > 2 && ! ischar (varargin{iarg}))
     ## Normalise the histogram.
     norm = varargin{iarg++};
     freq = freq / rows (y) * norm;
   endif
 
   if (nargout > 0)
     if (arg_is_vector)
       nn = freq';
diff --git a/scripts/plot/sphere.m b/scripts/plot/sphere.m
--- a/scripts/plot/sphere.m
+++ b/scripts/plot/sphere.m
@@ -24,42 +24,40 @@
 ## omitted then a default value of 20 is assumed.
 ##
 ## Called with no return arguments, @code{sphere} call directly 
 ## @code{surf (@var{x}, @var{y}, @var{z})}. If an axes handle is passed
 ## as the first argument, the the surface is plotted to this set of axes.
 ## @seealso{peaks}
 ## @end deftypefn
 
-function [xx,yy,zz] = sphere (h, n)
+function [xx, yy, zz] = sphere (h, n)
 
   have_h = false;
   if (nargin > 1 && isscalar (h) && ishandle (h))
     if (! strcmp (get (h, "type"), "axes"))
       error ("sphere: expecting first argument to be an axes object");
     endif
     if (nargin == 1)
       n = 20;
     endif
     have_h = true;
+  elseif (nargin == 1)
+    n = h;
   else
-    if (nargin == 1)
-      n = h;
-    else
-      n = 20;
-    endif
+    n = 20;
   endif
 
   theta = linspace (0, 2*pi, n+1);
   phi = linspace (-pi/2, pi/2, n+1);
   [theta,phi] = meshgrid (theta, phi);
 
-  x = cos(phi).*cos(theta);
-  y = cos(phi).*sin(theta);
-  z = sin(phi);
+  x = cos (phi) .* cos (theta);
+  y = cos (phi) .* sin (theta);
+  z = sin (phi);
 
   if (nargout > 0)
     xx = x;
     yy = y;
     zz = z;
   else
     if (have_h)
       oldh = gca ();
diff --git a/scripts/plot/surface.m b/scripts/plot/surface.m
--- a/scripts/plot/surface.m
+++ b/scripts/plot/surface.m
@@ -123,16 +123,17 @@ function h = surface (varargin)
   ## Make a default surface object.
   tmp = __go_surface__ (ax, "xdata", x, "ydata", y, "zdata", z, "cdata", c);
   set (tmp, "facecolor","flat");
   if (firststring <= nargin)
     set (tmp, varargin {firststring:end});
   endif
 
   if (! ishold ())
-    set (ax, "view", [0, 90], "box", "off", "xgrid", "on", "ygrid", "on", "zgrid", "on");
+    set (ax, "view", [0, 90], "box", "off", "xgrid", "on",
+	 "ygrid", "on", "zgrid", "on");
   endif
 
   if (nargout > 0)
     h = tmp;
   endif
 
 endfunction
diff --git a/scripts/plot/surfnorm.m b/scripts/plot/surfnorm.m
--- a/scripts/plot/surfnorm.m
+++ b/scripts/plot/surfnorm.m
@@ -89,17 +89,17 @@ function [Nx, Ny, Nz] = __surfnorm__ (h,
   else
     x = varargin{1};
     y = varargin{2};
     z = varargin{3};
     ioff = 4;
   endif
 
   if (nargout == 0)
-    newplot();
+    newplot ();
     surf (x, y, z, varargin{ioff:end});
     hold on;
   endif
 
   ## Make life easier, and avoid having to do the extrapolation later, do
   ## a simpler linear extrapolation here. This is approximative, and works
   ## badly for closed surfaces like spheres.
   xx = [2 .* x(:,1) - x(:,2), x, 2 .* x(:,end) - x(:,end-1)];
