# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1231761966 -3600
#      Mon Jan 12 13:06:06 2009 +0100
# Node ID d254a21e0120367992e8357a0cf433a6c3f8af72
# Parent  c72207960242fe6681a6921543dd337ec79569f1
reimplement full as method of octave_base_value

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,17 @@
+2009-01-12  Jaroslav Hajek  <highegg@gmail.com>
+
+	* ov-base-diag.h, ov-base-mat.h, ov-base-scalar.h, ov-base-sparse.h,
+	ov-base.cc, ov-base.h, ov-perm.h, ov-range.h, ov.h: Add full_value
+	methods to octave_value, octave_base_value and its relevant
+	subclasses.
+	* data.cc (Ffull): New DEFUN.
+	* DLD-FUNCTIONS/sparse.cc (Ffull): move to data.cc.
+
 2009-01-11  Jaroslav Hajek  <highegg@gmail.com>
 	
 	* ov.h (octave_value::is_copy_of): New method.
 	* ov-struct.cc (numeric_conv): Add output parameter orig.
 	(octave_struct::subsasgn): Temporarily erase duplicate lhs value prior
 	to assignment.
 
 2009-01-11  Jaroslav Hajek  <highegg@gmail.com>
diff --git a/src/DLD-FUNCTIONS/sparse.cc b/src/DLD-FUNCTIONS/sparse.cc
--- a/src/DLD-FUNCTIONS/sparse.cc
+++ b/src/DLD-FUNCTIONS/sparse.cc
@@ -344,53 +344,13 @@ to have a common size.\n\
 				  assemble_do_sum));
 	     }
 	 }
      }
 
    return retval;
 }
 
-DEFUN_DLD (full, args, ,
-    "-*- texinfo -*-\n\
-@deftypefn {Loadable Function} {@var{FM} =} full (@var{SM})\n\
- returns a full storage matrix from a sparse, diagonal, permutation matrix or a range.\n\
-@seealso{sparse}\n\
-@end deftypefn")
-{
-  octave_value retval;
-
-  if (args.length() < 1)
-    {
-      print_usage ();
-      return retval;
-    }
-
-  if (args(0).is_sparse_type ())
-    {
-      if (args(0).type_name () == "sparse matrix") 
-	retval = args(0).matrix_value ();
-      else if (args(0).type_name () == "sparse complex matrix")
-	retval = args(0).complex_matrix_value ();
-      else if (args(0).type_name () == "sparse bool matrix")
-	retval = args(0).bool_matrix_value ();
-    } 
-  else if (args(0).is_diag_matrix () || args(0).is_perm_matrix ())
-    {
-      octave_value_list idx;
-      idx(0) = idx(1) = ':';
-      retval = args(0).do_index_op (idx);
-    }
-  else if (args(0).is_range ())
-    retval = args(0).matrix_value ();
-  else if (args(0).is_matrix_type ())
-    retval = args(0);
-  else
-    gripe_wrong_type_arg ("full", args(0));
-
-  return retval;
-}
-
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
diff --git a/src/data.cc b/src/data.cc
--- a/src/data.cc
+++ b/src/data.cc
@@ -4579,16 +4579,33 @@ a minimum of two dimensions and row vect
   if (args.length () == 1)
     retval = args(0).squeeze ();
   else
     print_usage ();    
 
   return retval;
 }
 
+DEFUN (full, args, ,
+    "-*- texinfo -*-\n\
+@deftypefn {Loadable Function} {@var{FM} =} full (@var{SM})\n\
+ returns a full storage matrix from a sparse, diagonal, permutation matrix or a range.\n\
+@seealso{sparse}\n\
+@end deftypefn")
+{
+  octave_value retval;
+
+  if (args.length () == 1)
+    retval = args(0).full_value ();
+  else
+    print_usage ();    
+
+  return retval;
+}
+
 // Compute various norms of the vector X.
 
 DEFUN (norm, args, ,
   "-*- texinfo -*-\n\
 @deftypefn {Function File} {} norm (@var{a}, @var{p}, @var{opt})\n\
 Compute the p-norm of the matrix @var{a}.  If the second argument is\n\
 missing, @code{p = 2} is assumed.\n\
 \n\
diff --git a/src/ov-base-diag.h b/src/ov-base-diag.h
--- a/src/ov-base-diag.h
+++ b/src/ov-base-diag.h
@@ -57,16 +57,18 @@ public:
     : octave_base_value (), matrix (m.matrix) { }
 
   ~octave_base_diag (void) { }
 
   size_t byte_size (void) const { return matrix.byte_size (); }
 
   octave_value squeeze (void) const { return matrix; }
 
+  octave_value full_value (void) const { return to_dense (); }
+
   octave_value subsref (const std::string& type,
 			const std::list<octave_value_list>& idx);
 
   octave_value_list subsref (const std::string& type,
 			     const std::list<octave_value_list>& idx, int)
     { return subsref (type, idx); }
 
   octave_value do_index_op (const octave_value_list& idx,
diff --git a/src/ov-base-mat.h b/src/ov-base-mat.h
--- a/src/ov-base-mat.h
+++ b/src/ov-base-mat.h
@@ -67,16 +67,18 @@ public:
 
   octave_base_value *clone (void) const { return new octave_base_matrix (*this); }
   octave_base_value *empty_clone (void) const { return new octave_base_matrix (); }
 
   size_t byte_size (void) const { return matrix.byte_size (); }
 
   octave_value squeeze (void) const { return MT (matrix.squeeze ()); }
 
+  octave_value full_value (void) const { return matrix; }
+
   octave_value subsref (const std::string& type,
 			const std::list<octave_value_list>& idx);
 
   octave_value_list subsref (const std::string& type,
 			     const std::list<octave_value_list>& idx, int)
     { return subsref (type, idx); }
 
   octave_value subsasgn (const std::string& type,
diff --git a/src/ov-base-scalar.h b/src/ov-base-scalar.h
--- a/src/ov-base-scalar.h
+++ b/src/ov-base-scalar.h
@@ -57,16 +57,18 @@ public:
 
   ~octave_base_scalar (void) { }
 
   octave_base_value *clone (void) const { return new octave_base_scalar (*this); }
   octave_base_value *empty_clone (void) const { return new octave_base_scalar (); }
 
   octave_value squeeze (void) const { return scalar; }
 
+  octave_value full_value (void) const { return scalar; }
+
   octave_value subsref (const std::string& type,
 			const std::list<octave_value_list>& idx);
 
   octave_value_list subsref (const std::string& type,
 			     const std::list<octave_value_list>& idx, int)
     { return subsref (type, idx); }
 
   octave_value subsasgn (const std::string& type,
diff --git a/src/ov-base-sparse.h b/src/ov-base-sparse.h
--- a/src/ov-base-sparse.h
+++ b/src/ov-base-sparse.h
@@ -79,16 +79,18 @@ octave_base_sparse : public octave_base_
   octave_idx_type nnz (void) const { return matrix.nnz (); }
 
   octave_idx_type nzmax (void) const { return matrix.nzmax (); }
 
   size_t byte_size (void) const { return matrix.byte_size (); }
 
   octave_value squeeze (void) const { return matrix.squeeze (); }
 
+  octave_value full_value (void) const { return matrix.matrix_value (); }
+
   octave_value subsref (const std::string& type,
 			const std::list<octave_value_list>& idx);
 
   octave_value_list subsref (const std::string& type,
 			     const std::list<octave_value_list>& idx, int)
     { return subsref (type, idx); }
 
   octave_value subsasgn (const std::string& type,
diff --git a/src/ov-base.cc b/src/ov-base.cc
--- a/src/ov-base.cc
+++ b/src/ov-base.cc
@@ -69,16 +69,23 @@ octave_value
 octave_base_value::squeeze (void) const
 {
   std::string nm = type_name ();
   error ("squeeze: invalid operation for %s type", nm.c_str ());
   return octave_value ();
 }
 
 octave_value
+octave_base_value::full_value (void) const
+{
+  gripe_wrong_type_arg ("full: invalid operation for %s type", type_name ());
+  return octave_value ();
+}
+
+octave_value
 octave_base_value::subsref (const std::string&,
 			    const std::list<octave_value_list>&)
 {
   std::string nm = type_name ();
   error ("can't perform indexing operations for %s type", nm.c_str ());
   return octave_value ();
 }
 
diff --git a/src/ov-base.h b/src/ov-base.h
--- a/src/ov-base.h
+++ b/src/ov-base.h
@@ -143,16 +143,18 @@ public:
     { return type_conv_info (); }
 
   virtual type_conv_info
   numeric_demotion_function (void) const
     { return type_conv_info (); }
 
   virtual octave_value squeeze (void) const;
 
+  virtual octave_value full_value (void) const;
+
   virtual octave_base_value *try_narrowing_conversion (void) { return 0; }
 
   virtual octave_value
   subsref (const std::string& type,
 	   const std::list<octave_value_list>& idx);
 
   virtual octave_value_list
   subsref (const std::string& type,
diff --git a/src/ov-perm.h b/src/ov-perm.h
--- a/src/ov-perm.h
+++ b/src/ov-perm.h
@@ -47,16 +47,18 @@ public:
   type_conv_info numeric_demotion_function (void) const;
 
   octave_base_value *try_narrowing_conversion (void);
 
   size_t byte_size (void) const { return matrix.byte_size (); }
 
   octave_value squeeze (void) const { return matrix; }
 
+  octave_value full_value (void) const { return to_dense (); }
+
   octave_value subsref (const std::string& type,
 			const std::list<octave_value_list>& idx);
 
   octave_value_list subsref (const std::string& type,
 			     const std::list<octave_value_list>& idx, int)
     { return subsref (type, idx); }
 
   octave_value do_index_op (const octave_value_list& idx,
diff --git a/src/ov-range.h b/src/ov-range.h
--- a/src/ov-range.h
+++ b/src/ov-range.h
@@ -114,16 +114,18 @@ public:
   octave_value reshape (const dim_vector& new_dims) const
     { return NDArray (array_value().reshape (new_dims)); }
 
   octave_value permute (const Array<int>& vec, bool inv = false) const
     { return NDArray (array_value().permute (vec, inv)); }
 
   octave_value squeeze (void) const { return range; }
 
+  octave_value full_value (void) const { return range.matrix_value (); }
+
   bool is_defined (void) const { return true; }
 
   bool is_constant (void) const { return true; }
 
   bool is_range (void) const { return true; }
 
   octave_value all (int dim = 0) const;
 
diff --git a/src/ov.h b/src/ov.h
--- a/src/ov.h
+++ b/src/ov.h
@@ -322,16 +322,20 @@ public:
   octave_base_value::type_conv_info numeric_demotion_function (void) const
     { return rep->numeric_demotion_function (); }
 
   void maybe_mutate (void);
 
   octave_value squeeze (void) const
     { return rep->squeeze (); }
 
+  // The result of full().
+  octave_value full_value (void) const
+    { return rep->full_value (); }
+
   octave_base_value *try_narrowing_conversion (void)
     { return rep->try_narrowing_conversion (); }
 
   octave_value single_subsref (const std::string& type,
 			       const octave_value_list& idx);
 
   octave_value subsref (const std::string& type,
 				const std::list<octave_value_list>& idx)
