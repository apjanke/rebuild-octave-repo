# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1466188799 14400
#      Fri Jun 17 14:39:59 2016 -0400
# Node ID 2fc1ce5deae48279894c7bb220dc79431f4e76c2
# Parent  aab79a1885cc251c82bc94119397147c25ce6f7d
fix misleading indentation

* ov-struct.cc, idx-vector.cc: Indent code for clarity and to avoid
warning from GCC 6.

diff --git a/libinterp/octave-value/ov-struct.cc b/libinterp/octave-value/ov-struct.cc
--- a/libinterp/octave-value/ov-struct.cc
+++ b/libinterp/octave-value/ov-struct.cc
@@ -333,19 +333,19 @@ octave_struct::subsasgn (const std::stri
                     tmp = octave_value::empty_conv (next_type, rhs);
                     tmp.make_unique (); // probably a no-op.
                   }
                 else
                   // optimization: ignore the copy
                   // still stored inside our map.
                   tmp.make_unique (1);
 
-                  t_rhs =(orig_undefined
-                          ? tmp.undef_subsasgn (next_type, next_idx, rhs)
-                          : tmp.subsasgn (next_type, next_idx, rhs));
+                t_rhs =(orig_undefined
+                        ? tmp.undef_subsasgn (next_type, next_idx, rhs)
+                        : tmp.subsasgn (next_type, next_idx, rhs));
               }
             else
               err_invalid_index_for_assignment ();
           }
           break;
 
         case '.':
           {
diff --git a/liboctave/array/idx-vector.cc b/liboctave/array/idx-vector.cc
--- a/liboctave/array/idx-vector.cc
+++ b/liboctave/array/idx-vector.cc
@@ -595,17 +595,19 @@ std::ostream&
 idx_vector::idx_vector_rep::print (std::ostream& os) const
 {
   os << '[';
 
   for (octave_idx_type ii = 0; ii < len - 1; ii++)
     os << data[ii] << ',' << ' ';
 
   if (len > 0)
-    os << data[len-1]; os << ']';
+    os << data[len-1];
+
+  os << ']';
 
   return os;
 }
 
 Array<double>
 idx_vector::idx_vector_rep::unconvert (void) const
 {
   Array<double> retval (orig_dims);
@@ -707,17 +709,19 @@ std::ostream&
 idx_vector::idx_mask_rep::print (std::ostream& os) const
 {
   os << '[';
 
   for (octave_idx_type ii = 0; ii < ext - 1; ii++)
     os << data[ii] << ',' << ' ';
 
   if (ext > 0)
-    os << data[ext-1]; os << ']';
+    os << data[ext-1];
+
+  os << ']';
 
   return os;
 }
 
 Array<bool>
 idx_vector::idx_mask_rep::unconvert (void) const
 {
   if (aowner)
