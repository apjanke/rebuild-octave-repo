# HG changeset patch
# User jwe
# Date 862193068 0
#      Mon Apr 28 02:04:28 1997 +0000
# Node ID aef2d43edbc25022064c9470a46eb3f8ab4cf71a
# Parent  1a30f46e1870e91c80477bfe54b272b9618386f7
[project @ 1997-04-28 02:04:28 by jwe]

diff --git a/src/variables.cc b/src/variables.cc
--- a/src/variables.cc
+++ b/src/variables.cc
@@ -41,16 +41,17 @@ Software Foundation, 59 Temple Place - S
 #include <unistd.h>
 #endif
 
 #if defined (USE_READLINE)
 #include <readline/readline.h>
 #endif
 
 #include "file-ops.h"
+#include "lo-mappers.h"
 #include "oct-glob.h"
 #include "str-vec.h"
 
 #include <defaults.h>
 #include "data.h"
 #include "defun.h"
 #include "dirfns.h"
 #include "dynamic-ld.h"
@@ -64,21 +65,25 @@ Software Foundation, 59 Temple Place - S
 #include "load-save.h"
 #include "mappers.h"
 #include "oct-hist.h"
 #include "toplev.h"
 #include "pager.h"
 #include "parse.h"
 #include "symtab.h"
 #include "sysdep.h"
+#include "oct-sym.h"
+#include "oct-builtin.h"
+#include "oct-mapper.h"
+#include "oct-usr-fcn.h"
 #include "pt-const.h"
 #include "oct-obj.h"
 #include "pt-exp.h"
-#include "pt-fcn.h"
-#include "pt-fvc.h"
+#include "pt-id.h"
+#include "pt-indir.h"
 #include "pt-mat.h"
 #include "pt-plot.h"
 #include "pr-output.h"
 #include "syscalls.h"
 #include "toplev.h"
 #include "unwind-prot.h"
 #include "utils.h"
 #include "variables.h"
@@ -232,20 +237,20 @@ bool
 is_globally_visible (const string& name)
 {
   symbol_record *sr = curr_sym_tab->lookup (name);
   return (sr && sr->is_linked_to_global ());
 }
 
 // Is this octave_value a valid function?
 
-tree_fvc *
+octave_symbol *
 is_valid_function (const octave_value& arg, const string& warn_for, bool warn)
 {
-  tree_fvc *ans = 0;
+  octave_symbol *ans = 0;
 
   string fcn_name;
 
   if (arg.is_string ())
     fcn_name = arg.string_value ();
 
   if (fcn_name.empty () || error_state)
     {
@@ -269,22 +274,22 @@ is_valid_function (const octave_value& a
 	error ("%s: the symbol `%s' is not valid as a function",
 	       warn_for.c_str (), fcn_name.c_str ());
       ans = 0;
     }
 
   return ans;
 }
 
-tree_fvc *
+octave_symbol *
 extract_function (const octave_value& arg, const string& warn_for,
 		  const string& fname, const string& header,
 		  const string& trailer)
 {
-  tree_fvc *retval = 0;
+  octave_symbol *retval = 0;
 
   retval = is_valid_function (arg, warn_for, 0);
 
   if (! retval)
     {
       string s = arg.string_value ();
 
       string cmd = header;
@@ -444,17 +449,17 @@ returns:\n\
 static int
 symbol_out_of_date (symbol_record *sr)
 {
   if (Vignore_function_time_stamp == 2)
     return 0;
 
   if (sr)
     {
-      tree_fvc *ans = sr->def ();
+      octave_symbol *ans = sr->def ();
       if (ans)
 	{
 	  string ff = ans->fcn_file_name ();
 	  if (! ff.empty ()
 	      && ! (Vignore_function_time_stamp
 		    && ans->is_system_fcn_file ()))
 	    {
 	      time_t tp = ans->time_parsed ();
@@ -838,22 +843,20 @@ octave_value
 get_global_value (const string& nm)
 {
   octave_value retval;
 
   symbol_record *sr = global_sym_tab->lookup (nm);
 
   if (sr)
     {
-      // Do something with the value in foo.
-
-      tree_fvc *sr_def = sr->def ();
+      octave_symbol *sr_def = sr->def ();
 
       if (sr_def)
-	retval  = sr_def->eval (true);
+	retval  = sr_def->eval ();
       else
 	error ("get_global_by_name: undefined symbol `%s'", nm.c_str ());
     }
   else
     error ("get_global_by_name: unknown symbol `%s'", nm.c_str ());
 
   return retval;
 }
@@ -902,17 +905,17 @@ builtin_string_variable (const string& n
   symbol_record *sr = global_sym_tab->lookup (name);
 
   // It is a prorgramming error to look for builtins that aren't.
 
   assert (sr);
 
   string retval;
 
-  tree_fvc *defn = sr->def ();
+  octave_symbol *defn = sr->def ();
 
   if (defn)
     {
       octave_value val = defn->eval ();
 
       if (! error_state && val.is_string ())
 	retval = val.string_value ();
     }
@@ -929,17 +932,17 @@ builtin_real_scalar_variable (const stri
 {
   int status = 0;
   symbol_record *sr = global_sym_tab->lookup (name);
 
   // It is a prorgramming error to look for builtins that aren't.
 
   assert (sr);
 
-  tree_fvc *defn = sr->def ();
+  octave_symbol *defn = sr->def ();
 
   if (defn)
     {
       octave_value val = defn->eval ();
 
       if (! error_state && val.is_scalar_type ())
 	{
 	  d = val.double_value ();
@@ -958,17 +961,17 @@ builtin_any_variable (const string& name
   octave_value retval;
 
   symbol_record *sr = global_sym_tab->lookup (name);
 
   // It is a prorgramming error to look for builtins that aren't.
 
   assert (sr);
 
-  tree_fvc *defn = sr->def ();
+  octave_symbol *defn = sr->def ();
 
   if (defn)
     retval = defn->eval ();
 
   return retval;
 }
 
 // Global stuff and links to builtin variables and functions.
@@ -1400,41 +1403,44 @@ character, but may not be combined.")
   retval = do_who (argc, argv);
 
   return retval;
 }
 
 // Install variables and functions in the symbol tables.
 
 void
-install_builtin_mapper (const builtin_mapper_function& mf)
+install_builtin_mapper (octave_mapper *mf)
 {
-  symbol_record *sym_rec = global_sym_tab->lookup (mf.name, true);
-  sym_rec->unprotect ();
+  symbol_record *sym_rec = global_sym_tab->lookup (mf->name (), true);
 
-  tree_builtin *def = new tree_builtin (mf, mf.name);
+  unsigned int t
+    = symbol_def::BUILTIN_FUNCTION | symbol_def::MAPPER_FUNCTION;
 
-  sym_rec->define (def);
-
-  sym_rec->document (mf.help_string);
+  sym_rec->unprotect ();
+  sym_rec->define (mf, t);
+  sym_rec->document (mf->doc_string ());
   sym_rec->make_eternal ();
   sym_rec->protect ();
 }
 
 void
-install_builtin_function (const builtin_function& f)
+install_builtin_function (octave_builtin *f, bool is_text_fcn)
 {
-  symbol_record *sym_rec = global_sym_tab->lookup (f.name, true);
-  sym_rec->unprotect ();
+  symbol_record *sym_rec = global_sym_tab->lookup (f->name (), true);
+
+  unsigned int t
+    = symbol_def::BUILTIN_FUNCTION | symbol_def::MAPPER_FUNCTION;
 
-  tree_builtin *def = new tree_builtin (f.fcn, f.name);
+  if (is_text_fcn)
+    t |= symbol_def::TEXT_FUNCTION;
 
-  sym_rec->define (def, f.is_text_fcn);
-
-  sym_rec->document (f.help_string);
+  sym_rec->unprotect ();
+  sym_rec->define (f, t);
+  sym_rec->document (f->doc_string ());
   sym_rec->make_eternal ();
   sym_rec->protect ();
 }
 
 void
 install_builtin_variable (const builtin_variable& v)
 {
   if (v.install_as_function)
@@ -1700,20 +1706,20 @@ install_builtin_variables (void)
   symbols_of_defaults ();
   symbols_of_dirfns ();
   symbols_of_error ();
   symbols_of_file_io ();
   symbols_of_help ();
   symbols_of_input ();
   symbols_of_lex ();
   symbols_of_load_save ();
+  symbols_of_oct_usr_fcn ();
   symbols_of_pager ();
   symbols_of_parse ();
   symbols_of_pr_output ();
-  symbols_of_pt_fcn ();
   symbols_of_pt_mat ();
   symbols_of_pt_plot ();
   symbols_of_syscalls ();
   symbols_of_toplev ();
   symbols_of_value ();
   symbols_of_variables ();
 }
 
diff --git a/src/variables.h b/src/variables.h
--- a/src/variables.h
+++ b/src/variables.h
@@ -18,32 +18,32 @@ You should have received a copy of the G
 along with Octave; see the file COPYING.  If not, write to the Free
 Software Foundation, 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 
 */
 
 #if !defined (octave_variables_h)
 #define octave_variables_h 1
 
+class octave_symbol;
 class symbol_record;
 class symbol_table;
 
-class tree_fvc;
 class tree_identifier;
 class tree_indirect_ref;
 class octave_value;
 class octave_value_list;
+class octave_builtin;
+class octave_mapper;
 class string_vector;
 
 #include <string>
 
 #include "ov.h"
 
-struct builtin_mapper_function;
-
 typedef int (*sv_Function)(void);
 
 struct builtin_variable
 {
   builtin_variable (const string& n, const octave_value& v, bool iaf,
 		    bool p, bool e, sv_Function svf, const string& h)
     : name (n), value (v), install_as_function (iaf), protect (p),
       eternal (e), sv_function (svf), help_string (h) { }
@@ -85,28 +85,16 @@ private:
 
   octave_variable_reference (const octave_variable_reference&);
 
   octave_variable_reference& operator = (const octave_variable_reference&);
 };
 
 typedef octave_value_list (*Octave_builtin_fcn)(const octave_value_list&, int);
 
-struct builtin_function
-{
-  builtin_function (const string& n, bool itf, Octave_builtin_fcn f,
-		    const string& h)
-    : name (n), is_text_fcn (itf), fcn (f), help_string (h) { }
-
-  string name;
-  bool is_text_fcn;
-  Octave_builtin_fcn fcn;
-  string help_string;
-};
-
 extern void initialize_symbol_tables (void);
 
 extern bool lookup (symbol_record *s, bool exec_script = true);
 
 extern symbol_record *lookup_by_name (const string& nm,
 				      bool exec_script = true);
 
 extern octave_value get_global_value (const string& nm);
@@ -126,51 +114,55 @@ extern void link_to_builtin_or_function 
 extern void force_link_to_function (const string&);
 
 extern bool is_builtin_variable (const string&);
 extern bool is_text_function_name (const string&);
 extern bool is_mapper_function_name (const string&);
 extern bool is_builtin_function_name (const string&);
 extern bool is_globally_visible (const string&);
 
-extern tree_fvc *is_valid_function (const octave_value&, const string&,
-				    bool warn = false); 
+extern octave_symbol *
+is_valid_function (const octave_value&, const string&, bool warn = false); 
 
-tree_fvc *extract_function (const octave_value& arg, const string& warn_for,
-			    const string& fname, const string& header,
-			    const string& trailer);
+octave_symbol *
+extract_function (const octave_value& arg, const string& warn_for,
+		  const string& fname, const string& header,
+		  const string& trailer);
 
 extern string_vector make_name_list (void);
 
-extern void install_builtin_mapper (const builtin_mapper_function& mf);
+extern void
+install_builtin_mapper (octave_mapper *mf);
 
-extern void install_builtin_function (const builtin_function& gf);
+extern void
+install_builtin_function (octave_builtin *f, bool is_text_fcn = false);
 
-extern void install_builtin_variable (const builtin_variable& v);
+extern void
+install_builtin_variable (const builtin_variable& v);
 
 extern void
 install_builtin_variable_as_function (const string& name,
 				      const octave_value& val,
 				      bool protect = false,
 				      bool eternal = false,
 				      const string& help = string ());
 
 extern void alias_builtin (const string& alias, const string& name);
 
 extern void bind_ans (const octave_value& val, bool print);
 
 extern void bind_global_error_variable (void);
 
 extern void clear_global_error_variable (void *);
 
-extern void bind_builtin_variable (const string&, const octave_value&,
-				   bool protect = false,
-				   bool eternal = false,
-				   sv_Function f = (sv_Function) 0,
-				   const string& help = string ());
+extern void
+bind_builtin_variable (const string&, const octave_value&,
+		       bool protect = false, bool eternal = false,
+		       sv_Function f = (sv_Function) 0,
+		       const string& help = string ());
 
 extern void install_builtin_variables (void);
 
 // Symbol table for symbols at the top level.
 extern symbol_table *top_level_sym_tab;
 
 // Symbol table for the current scope.
 extern symbol_table *curr_sym_tab;
