# HG changeset patch
# User Torsten <ttl@justmail.de>
# Date 1372358271 -7200
#      Thu Jun 27 20:37:51 2013 +0200
# Node ID cd29604214c545fe8ea17c6546c9cd63d6a8edd5
# Parent  804d26cf8e5bcb774c1cf829a7c9f62ae047ed1f
Use the Qscintilla langiage file if available

* resource-manager.cc./.h(config_translators): besides the qt and custom gui
  language file, load qscintilla language file, too
* octave-gui.cc(octave_start_gui): call new config_translator function and
  install translator for qscintilla, too

diff --git a/libgui/src/octave-gui.cc b/libgui/src/octave-gui.cc
--- a/libgui/src/octave-gui.cc
+++ b/libgui/src/octave-gui.cc
@@ -100,20 +100,21 @@ octave_start_gui (int argc, char *argv[]
         {
           welcome_wizard welcomeWizard;
           welcomeWizard.exec ();
           resource_manager::reload_settings ();
         }
       else
         {
           // install translators for the gui and qt text
-          QTranslator gui_translator, qt_translator;
-          resource_manager::config_translators (&gui_translator,&qt_translator);
-          application.installTranslator (&qt_translator);
-          application.installTranslator (&gui_translator);
+          QTranslator gui_tr, qt_tr, qsci_tr;
+          resource_manager::config_translators (&qt_tr,&qsci_tr,&gui_tr);
+          application.installTranslator (&qt_tr);
+          application.installTranslator (&qsci_tr);
+          application.installTranslator (&gui_tr);
 
           // update network-settings
           resource_manager::update_network_settings ();
 
 #if ! defined (__WIN32__) || defined (__CYGWIN__)
           // If we were started from a launcher, TERM might not be
           // defined, but we provide a terminal with xterm
           // capabilities.
diff --git a/libgui/src/resource-manager.cc b/libgui/src/resource-manager.cc
--- a/libgui/src/resource-manager.cc
+++ b/libgui/src/resource-manager.cc
@@ -78,27 +78,32 @@ resource_manager::get_gui_translation_di
   // get environment variable for the locale dir (e.g. from run-octave)
   std::string dldir = octave_env::getenv ("OCTAVE_LOCALE_DIR");
   if (dldir.empty ())
     dldir = Voct_locale_dir; // env-var empty, load the default location
   return QString::fromStdString (dldir);
 }
 
 void
-resource_manager::config_translators (QTranslator *qt_tr,QTranslator *gui_tr)
+resource_manager::config_translators (QTranslator *qt_tr,
+                                      QTranslator *qsci_tr,
+                                      QTranslator *gui_tr)
 {
   QSettings *settings = resource_manager::get_settings ();
   // FIXME -- what should happen if settings is 0?
   // get the locale from the settings
   QString language = settings->value ("language","SYSTEM").toString ();
   if (language == "SYSTEM")
       language = QLocale::system().name();    // get system wide locale
   // load the translator file for qt strings
   qt_tr->load("qt_" + language,
               QLibraryInfo::location(QLibraryInfo::TranslationsPath));
+  // load the translator file for qscintilla settings
+  qsci_tr->load("qscintilla_" + language,
+              QLibraryInfo::location(QLibraryInfo::TranslationsPath));
   // load the translator file for gui strings
   gui_tr->load (language, get_gui_translation_dir ());
 }
 
 bool
 resource_manager::instance_ok (void)
 {
   bool retval = true;
diff --git a/libgui/src/resource-manager.h b/libgui/src/resource-manager.h
--- a/libgui/src/resource-manager.h
+++ b/libgui/src/resource-manager.h
@@ -63,17 +63,17 @@ public:
   static void set_settings (const QString& file)
   {
     if (instance_ok ())
       instance->do_set_settings (file);
   }
 
   static QString get_gui_translation_dir (void);
 
-  static void config_translators (QTranslator*, QTranslator*);
+  static void config_translators (QTranslator*, QTranslator*, QTranslator*);
 
   static void update_network_settings (void)
   {
     if (instance_ok ())
       instance->do_update_network_settings ();
   }
 
   static bool is_first_run (void)
