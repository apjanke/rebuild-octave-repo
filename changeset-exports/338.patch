# HG changeset patch
# User jwe
# Date 760605703 0
#      Mon Feb 07 07:21:43 1994 +0000
# Node ID 82d30a23c979e16061963f1393cee6ee036a3d6d
# Parent  3e74ab6e24ba7b0baa3e67911d38922767e3ee02
[project @ 1994-02-07 07:09:33 by jwe]

diff --git a/src/builtins.cc b/src/builtins.cc
--- a/src/builtins.cc
+++ b/src/builtins.cc
@@ -419,17 +419,17 @@ where y and x are vectors.", },
 
   { "is_global", 2, 1, builtin_is_global,
     "is_global (X): return 1 if the string X names a global variable", },
 
   { "isstr", 2, 1, builtin_isstr,
     "isstr (X): return 1 if X is a string", },
 
   { "keyboard", 2, 1, builtin_keyboard,
-    "keyboard (\"prompt\"): maybe help in debugging M-files", },
+    "keyboard (\"prompt\"): maybe help in debugging function files", },
 
   { "logm", 2, 1, builtin_logm,
     "logm (x): matrix logarithm", },
 
   { "lp_solve", 11, 3, builtin_lpsolve,
     "lp_solve (): solve linear programs using lp_solve.", },
 
   { "lp_solve_options", -1, 1, builtin_lpsolve_options,
@@ -697,18 +697,18 @@ static builtin_string_variables string_v
 
   { "gnuplot_binary", "gnuplot", sv_gnuplot_binary,
     "path to gnuplot binary", },
 
   { "i", "??", NULL,
     "sqrt (-1)", },
 
   { "ignore_function_time_stamp", "system", ignore_function_time_stamp,
-    "don't check to see if M-files have changed since they were last\n\
-compiled.  Possible values are \"system\" and \"all\"", },
+    "don't check to see if function files have changed since they were\n\
+last compiled.  Possible values are \"system\" and \"all\"", },
 
   { "implicit_str_to_num_ok", "false", implicit_str_to_num_ok,
     "allow implicit string to number conversion", },
 
   { "inf", "??", NULL,
     "infinity", },
 
   { "j", "??", NULL,
diff --git a/src/input.cc b/src/input.cc
--- a/src/input.cc
+++ b/src/input.cc
@@ -88,21 +88,21 @@ gnu_readline (char *s)
 #include "builtins.h"
 
 // Global pointer for eval().
 const char *current_eval_string = (char *) NULL;
 
 // Nonzero means get input from current_eval_string.
 int get_input_from_eval_string = 0;
 
-// Nonzero means we're parsing an M-file.
-int reading_m_file = 0;
+// Nonzero means we're parsing a function file.
+int reading_fcn_file = 0;
 
-// Simple name of M-file we are reading.
-char *curr_m_file_name = (char *) NULL;
+// Simple name of function file we are reading.
+char *curr_fcn_file_name = (char *) NULL;
 
 // Nonzero means we're parsing a script file.
 int reading_script_file = 0;
 
 // If we are reading from an M-file, this is it.
 FILE *mf_instream = (FILE *) NULL;
 
 // Nonzero means we are using readline.
@@ -218,17 +218,17 @@ octave_read (char *buf, int max_size)
 	      status = len;
 	    }
 	}
       current_input_line = cp;
     }
   else
     {
       FILE *curr_stream = rl_instream;
-      if (reading_m_file || reading_script_file)
+      if (reading_fcn_file || reading_script_file)
 	curr_stream = mf_instream;
 
       assert (curr_stream != (FILE *) NULL);
 
 // Why is this required?
       buf[0] = '\0';
 
       if (fgets (buf, max_size, curr_stream) != (char *) NULL)
@@ -277,17 +277,17 @@ get_input_from_file (char *name, int war
   FILE *instream = (FILE *) NULL;
 
   if (name && *name)
     instream = fopen (name, "r");
 
   if (instream == (FILE *) NULL && warn)
     warning ("%s: no such file or directory", name);
 
-  if (reading_m_file || reading_script_file)
+  if (reading_fcn_file || reading_script_file)
     mf_instream = instream;
   else
     rl_instream = instream;
 
   return instream;
 }
 
 /*
diff --git a/src/input.h b/src/input.h
--- a/src/input.h
+++ b/src/input.h
@@ -34,21 +34,21 @@ extern FILE *get_input_from_stdin (void)
 extern void initialize_readline (void);
 
 // Global pointer for eval().
 extern const char *current_eval_string;
 
 // Nonzero means get input from current_eval_string.
 extern int get_input_from_eval_string;
 
-// Nonzero means we're parsing an M-file.
-extern int reading_m_file;
+// Nonzero means we're parsing a function file.
+extern int reading_fcn_file;
 
 // Simple name of M-file we are reading.
-extern char *curr_m_file_name;
+extern char *curr_fcn_file_name;
 
 // Nonzero means we're parsing a script file.
 extern int reading_script_file;
 
 // If we are reading from an M-file, this is it.
 extern FILE *mf_instream;
 
 // Nonzero means we are using readline.
diff --git a/src/lex.l b/src/lex.l
--- a/src/lex.l
+++ b/src/lex.l
@@ -686,17 +686,17 @@ reset_parser (void)
     delete token_stack.pop ();
 
 // Can be reset by defining a function.
   current_input_column = 1;
   input_line_number = current_command_number - 1;
 
 // Only ask for input from stdin if we are expecting interactive
 // input.
-  if (interactive && ! (reading_m_file || get_input_from_eval_string))
+  if (interactive && ! (reading_fcn_file || get_input_from_eval_string))
     yyrestart (stdin);
 }
 
 /*
  * Replace backslash escapes in a string with the real values.
  */
 static void
 do_string_escapes (char *s)
@@ -1015,21 +1015,21 @@ is_keyword (char *s)
       return FOR;
     }
   else if (strcmp ("function", s) == 0)
     {
       if (defining_func)
 	{
 	  error ("function keyword invalid within a function body");
 
-	  if ((reading_m_file || reading_script_file)
-	      && curr_m_file_name != (char *) NULL)
+	  if ((reading_fcn_file || reading_script_file)
+	      && curr_fcn_file_name != (char *) NULL)
 	    error ("defining new function near line %d of file `%s'",
 		   input_line_number,
-		   curr_m_file_name);
+		   curr_fcn_file_name);
 	  else
 	    error ("defining new function near line %d", input_line_number);
 
 	  jump_to_top_level ();  // XXX FIXME XXX
 	}
       else
 	{
 	  tmp_local_sym_tab = new symbol_table ();
@@ -1098,17 +1098,17 @@ is_keyword (char *s)
  */
 static symbol_record *
 lookup_identifier (char *name)
 {
   return curr_sym_tab->lookup (name, 1, 0);
 }
 
 /*
- * Grab the help text from an M-file.
+ * Grab the help text from an function file.
  */
 static void
 grab_help_text (void)
 {
   int max_len = HELP_BUF_LENGTH - 1;
 
   int in_comment = 1;
   int len = 0;
@@ -1457,19 +1457,19 @@ handle_identifier (char *tok, int next_t
       if (! (postfix_un_op || bin_op || other_op))
 	unput (',');
     }
 
   return NAME;
 }
 
 /*
- * Print a warning if an M-file that defines a function has anything
- * other than comments and whitespace following the END token that
- * matches the FUNCTION statement.
+ * Print a warning if a function file that defines a function has
+ * anything other than comments and whitespace following the END token
+ * that matches the FUNCTION statement.
  */
 void
 check_for_garbage_after_fcn_def (void)
 {
 // By making a newline be the next character to be read, we will force
 // the parser to return after reading the function.  Calling yyunput
 // with EOF seems not to work...
 
@@ -1494,17 +1494,17 @@ check_for_garbage_after_fcn_def (void)
 	  in_comment = 1;
 	  break;
 	default:
 	  if (in_comment)
 	    break;
 	  else
 	    {
 	      warning ("ignoring trailing garbage after end of function\n\
-         near line %d of file `%s.m'", lineno, curr_m_file_name);
+         near line %d of file `%s.m'", lineno, curr_fcn_file_name);
 	      
 	      yyunput ('\n', yytext);
 	      return;
 	    }
 	}
     }
   yyunput ('\n', yytext);
 }
diff --git a/src/parse.h b/src/parse.h
--- a/src/parse.h
+++ b/src/parse.h
@@ -1,12 +1,12 @@
 // parse.h                                                 -*- C++ -*-
 /*
 
-Copyright (C) 1992, 1993 John W. Eaton
+Copyright (C) 1992, 1993, 1994 John W. Eaton
 
 This file is part of Octave.
 
 Octave is free software; you can redistribute it and/or modify it
 under the terms of the GNU General Public License as published by the
 Free Software Foundation; either version 2, or (at your option) any
 later version.
 
@@ -70,17 +70,17 @@ extern int yydebug;
 // The current input line number.
 extern int input_line_number;
 
 // The column of the current token.
 extern int current_input_column;
 
 #define HELP_BUF_LENGTH 8192
 
-// Buffer for help text snagged from M-files.
+// Buffer for help text snagged from function files.
 extern char help_buf [HELP_BUF_LENGTH];
 
 // Nonzero means we're working on a plot command.
 extern int plotting;
 
 // Nonzero means we've seen something that means we must be past the
 // range part of a plot command.
 extern int past_plot_range;
diff --git a/src/parse.y b/src/parse.y
--- a/src/parse.y
+++ b/src/parse.y
@@ -79,17 +79,17 @@ SLStack <tree_matrix *> ml;
 SLStack <int> mlnm;
 
 // The current input line number.
 int input_line_number = 0;
 
 // The column of the current token.
 int current_input_column = 1;
 
-// Buffer for help text snagged from M-files.
+// Buffer for help text snagged from function files.
 // Probably shouldn't be a fixed size...
 char help_buf [HELP_BUF_LENGTH];
 
 // Nonzero means we're working on a plot command.
 int plotting = 0;
 
 // Nonzero means we've seen something that means we must be past the
 // range part of a plot command.
@@ -897,38 +897,38 @@ func_def2	: identifier safe local_symtab
 //			error ("invalid use of reserved word %s", id_name);
 //			ABORT_PARSE;
 //		      }
 
 // If input is coming from a file, issue a warning if the name of the
 // file does not match the name of the function stated in the file.
 // Matlab doesn't provide a diagnostic (it ignores the stated name).
 
-		    if (reading_m_file)
+		    if (reading_fcn_file)
 		      {
-			if (strcmp (curr_m_file_name, id_name) != 0)
+			if (strcmp (curr_fcn_file_name, id_name) != 0)
 			  {
 			    warning ("function name `%s' does not agree\
- with M-file name `%s.m'", id_name, curr_m_file_name);
+ with function file name `%s'", id_name, curr_fcn_file_name);
 
-			    $1->rename (curr_m_file_name);
+			    $1->rename (curr_fcn_file_name);
 			    id_name = $1->name ();
 			  }
 
-			$4->stash_m_file_name (curr_m_file_name);
-			$4->stash_m_file_time (time ((time_t *) NULL));
-			$4->mark_as_system_m_file ();
+			$4->stash_fcn_file_name (curr_fcn_file_name);
+			$4->stash_fcn_file_time (time ((time_t *) NULL));
+			$4->mark_as_system_fcn_file ();
 		      }
 		    else if (! (input_from_tmp_history_file
 				|| input_from_startup_file)
 			     && reading_script_file
-			     && strcmp (curr_m_file_name, id_name) == 0)
+			     && strcmp (curr_fcn_file_name, id_name) == 0)
 		      {
 			warning ("function `%s' defined within\
- script file `%s.m'", id_name, curr_m_file_name);
+ script file `%s.m'", id_name, curr_fcn_file_name);
 		      }
 
 		    top_level_sym_tab->clear (id_name);
 
 		    $4->stash_function_name (id_name);
 
 		    $1->define ($4);
 		    $1->document (help_buf);
@@ -946,22 +946,22 @@ func_def3	: param_list optsep opt_list f
 		  { $$ = new tree_function ($2, curr_sym_tab); }
 		;
 
 fcn_end_or_eof	: END
 		  {
 		    if (check_end ($1, token::function_end))
 			ABORT_PARSE;
 
-		    if (reading_m_file)
+		    if (reading_fcn_file)
 		      check_for_garbage_after_fcn_def ();
 		  }
 		| END_OF_INPUT
 		  {
-		    if (! (reading_m_file || reading_script_file))
+		    if (! (reading_fcn_file || reading_script_file))
 		      YYABORT;
 		  }
 		;
 
 variable	: identifier
 		  {
 		    $$ = new tree_index_expression
 			   ($1, $1->line (), $1->column ());
@@ -1112,19 +1112,19 @@ yyerror (char *s)
   int err_col = current_input_column - 1;
   if (err_col == 0 && line != (char *) NULL)
     err_col = strlen (line) + 1;
 
 // Print a message like `parse error'.
   fprintf (stderr, "\n%s", s);
 
 // Maybe print the line number and file name.
-  if (reading_m_file || reading_script_file)
+  if (reading_fcn_file || reading_script_file)
     fprintf (stderr, " near line %d of file %s.m", input_line_number,
-	     curr_m_file_name);
+	     curr_fcn_file_name);
 
   if (line != (char *) NULL)
     {
       int len = strlen (line);
       if (line[len-1] == '\n')
         {
           len--;
           line[len] = '\0';
diff --git a/src/pt-base.h b/src/pt-base.h
--- a/src/pt-base.h
+++ b/src/pt-base.h
@@ -124,23 +124,23 @@ public:
     { assert (0); }
 
   virtual tree_constant assign (tree_constant& t, tree_constant *args,
 				int nargs);
 
   virtual void bump_value (tree::expression_type)
     { assert (0); }
 
-  virtual char *m_file_name (void)
+  virtual char *fcn_file_name (void)
     { return (char *) NULL; }
 
   virtual time_t time_parsed (void)
     { assert (0); return 0; }
 
-  virtual int is_system_m_file (void) const
+  virtual int is_system_fcn_file (void) const
     { return 0; }
 
   virtual tree_constant eval (int print) = 0;
 
   virtual tree_constant *eval (int print, int nargout);
 
   virtual tree_constant eval (int argc, char **argv, int print);
 
diff --git a/src/t-builtins.cc b/src/t-builtins.cc
--- a/src/t-builtins.cc
+++ b/src/t-builtins.cc
@@ -399,18 +399,18 @@ simple_help (void)
   char **path = pathstring_to_vector (user_pref.loadpath);
 
   char **ptr = path;
   if (ptr != (char **) NULL)
     {
       while (*ptr != (char *) NULL)
 	{
 	  int count;
-	  char **names = get_m_file_names (count, *ptr, 0);
-	  output_buf << "\n*** M-files in "
+	  char **names = get_fcn_file_names (count, *ptr, 0);
+	  output_buf << "\n*** function files in "
 		     << make_absolute (*ptr, the_current_working_directory)
 		     << ":\n\n";
 	  if (names != (char **) NULL && count > 0)
 	    list_in_columns (output_buf, names);
 	  delete [] names;
 	  ptr++;
 	}
     }
@@ -533,17 +533,17 @@ builtin_help (int argc, char **argv)
 		  signal (SIGINT, old_sigint_handler);
 		}
 	    }
 	}
       else
 	{
 	  ostrstream output_buf;
 
-	  char *m_file_name = (char *) NULL;
+	  char *fcn_file_name = (char *) NULL;
 	  symbol_record *sym_rec;
 	  help_list *op_help_list = operator_help ();
 	  help_list *kw_help_list = keyword_help ();
 
 	  while (--argc > 0)
 	    {
 	      argv++;
 
@@ -576,38 +576,38 @@ builtin_help (int argc, char **argv)
 		  if (h != (char *) NULL && *h != '\0')
 		    {
 		      output_buf << "\n*** " << *argv << ":\n\n"
 				 << h << "\n";
 		      continue;
 		    }
 		}
 
-// Try harder to find M-files that might not be defined yet, or that
-// appear to be out of date.  Don\'t execute commands from the file if
-// it turns out to be a script file.
+// Try harder to find function files that might not be defined yet, or
+// that appear to be out of date.  Don\'t execute commands from the
+// file if it turns out to be a script file.
 
-	      m_file_name = m_file_in_path (*argv);
-	      if (m_file_name != (char *) NULL)
+	      fcn_file_name = fcn_file_in_path (*argv);
+	      if (fcn_file_name != (char *) NULL)
 		{
 		  sym_rec = global_sym_tab->lookup (*argv, 1, 0);
 		  if (sym_rec != (symbol_record *) NULL)
 		    {
 		      tree_identifier tmp (sym_rec);
-		      tmp.parse_m_file (0);
+		      tmp.parse_fcn_file (0);
 		      char *h = sym_rec->help ();
 		      if (h != (char *) NULL && *h != '\0')
 			{
 			  output_buf << "\n*** " << *argv << ":\n\n"
 				     << h << "\n"; 
 			  continue;
 			}
 		    }
 		}
-	      delete [] m_file_name;
+	      delete [] fcn_file_name;
 
 	      output_buf << "\nhelp: sorry, `" << *argv
 			 << "' is not documented\n"; 
 	    }
 
 	  additional_help_message (output_buf);
 	  output_buf << ends;
 	  maybe_page_output (output_buf);
diff --git a/src/tc-extras.cc b/src/tc-extras.cc
--- a/src/tc-extras.cc
+++ b/src/tc-extras.cc
@@ -1238,17 +1238,17 @@ eval_string (const char *string, int pri
   unwind_protect_ptr (curr_sym_tab);
 
   reset_parser ();
 
   parse_status = yyparse ();
 
 // Important to reset the idea of where input is coming from before
 // trying to eval the command we just parsed -- it might contain the
-// name of an m-file that still needs to be parsed!
+// name of an function file that still needs to be parsed!
 
   tree *command = global_command;
 
   run_unwind_frame ("eval_string");
 
   tree_constant retval;
 
   if (parse_status == 0 && command != NULL_TREE)
diff --git a/src/tree.h.old b/src/tree.h.old
--- a/src/tree.h.old
+++ b/src/tree.h.old
@@ -1,12 +1,12 @@
 // Tree classes.                                      -*- C++ -*-
 /*
 
-Copyright (C) 1992, 1993 John W. Eaton
+Copyright (C) 1992, 1993, 1994 John W. Eaton
 
 This file is part of Octave.
 
 Octave is free software; you can redistribute it and/or modify it
 under the terms of the GNU General Public License as published by the
 Free Software Foundation; either version 2, or (at your option) any
 later version.
 
@@ -188,19 +188,19 @@ public:
 
   void document (char *s);
 
   tree_constant assign (tree_constant& t);
   tree_constant assign (tree_constant& t, tree_constant *args, int nargs);
 
   void bump_value (tree::expression_type);
 
-  int parse_m_file (int exec_script = 1);
-  int parse_m_file (char *mf, int exec_script = 1);
-  void parse_m_file (FILE *mfile, char *mf);
+  int parse_fcn_file (int exec_script = 1);
+  int parse_fcn_file (char *mf, int exec_script = 1);
+  void parse_fcn_file (FILE *mfile, char *mf);
 
   tree *do_lookup (int& script_file_executed);
 
   void mark_as_formal_parameter (void);
 
   void mark_for_possible_ans_assign (void);
 
   tree_constant eval (int print);
@@ -230,24 +230,24 @@ public:
   tree_function (tree *cl, symbol_table *st);
 
   ~tree_function (void);
 
   tree_function *define (tree *t);
   tree_function *define_param_list (tree_parameter_list *t);
   tree_function *define_ret_list (tree_parameter_list *t);
 
-  void stash_m_file_name (char * s);
-  void stash_m_file_time (time_t t);
+  void stash_fcn_file_name (char * s);
+  void stash_fcn_file_time (time_t t);
 
-  char *m_file_name (void);
+  char *fcn_file_name (void);
   time_t time_parsed (void);
 
-  void mark_as_system_m_file (void);
-  int is_system_m_file (void) const;
+  void mark_as_system_fcn_file (void);
+  int is_system_fcn_file (void) const;
 
   int takes_varargs (void) const;
   void va_start (void);
   tree_constant va_arg (void);
 
   void stash_function_name (char *s);
   char *function_name (void);
 
@@ -268,17 +268,17 @@ private:
   int call_depth;
   tree_parameter_list *param_list;
   tree_parameter_list *ret_list;
   symbol_table *sym_tab;
   tree *cmd_list;
   char *file_name;
   char *fcn_name;
   time_t t_parsed;
-  int system_m_file;
+  int system_fcn_file;
   int varargs_ok;
   int num_named_args;
   const tree_constant *args_passed;
   int num_args_passed;
   int curr_arg_number;
 };
 
 /*
diff --git a/src/user-prefs.cc b/src/user-prefs.cc
--- a/src/user-prefs.cc
+++ b/src/user-prefs.cc
@@ -232,18 +232,18 @@ silent_functions (void)
 {
   user_pref.silent_functions =
     check_str_pref ("silent_functions");
 
   return 0;
 }
 
 /*
- * Should Octave always check to see if M-files have changed since
- * they were last compiled?
+ * Should Octave always check to see if function files have changed
+ * since they were last compiled?
  */
 int
 ignore_function_time_stamp (void)
 {
   int pref = 0;
 
   char *val = builtin_string_variable ("ignore_function_time_stamp");
 
diff --git a/src/utils.cc b/src/utils.cc
--- a/src/utils.cc
+++ b/src/utils.cc
@@ -587,23 +587,24 @@ file_in_path (const char *name, const ch
     }
 
  done:
   delete [] nm;
   return retval;
 }
 
 /*
- * See if there is an M-file in the path.  If so, return the full path
- * to the file.
+ * See if there is an function file in the path.  If so, return the
+ * full path to the file.
  */
 char *
-m_file_in_path (const char *name)
+fcn_file_in_path (const char *name)
 {
-  return file_in_path (name, ".m");
+  char *fcn_file = file_in_path (name, (char *) NULL);
+  return (fcn_file) ? fcn_file : file_in_path (name, ".m");
 }
 
 /*
  * Return a pretty pathname.  If the first part of the pathname is the
  * same as $HOME, then replace that with `~'.
  */
 char *
 polite_directory_format (char *name)
@@ -1406,17 +1407,17 @@ keyword_almost_match (const char **std, 
 
   delete [] kw;
   delete [] to_match;
 
   return status;
 }
 
 char **
-get_m_file_names (int& num, const char *dir, int no_suffix)
+get_fcn_file_names (int& num, const char *dir, int no_suffix)
 {
   static int num_max = 256;
   char **retval = new char * [num_max];
   int i = 0;
 
   DIR *dirp = opendir (dir);
   if (dirp != (DIR *) NULL)
     {
@@ -1456,31 +1457,31 @@ get_m_file_names (int& num, const char *
 
   retval[i] = (char *) NULL;
   num = i;
 
   return retval;
 }
 
 char **
-get_m_file_names (int& num, int no_suffix)
+get_fcn_file_names (int& num, int no_suffix)
 {
   static int num_max = 1024;
   char **retval = new char * [num_max];
   int i = 0;
 
   char **path = pathstring_to_vector (user_pref.loadpath);
 
   char **ptr = path;
   if (ptr != (char **) NULL)
     {
       while (*ptr != (char *) NULL)
 	{
 	  int tmp_num;
-	  char **names = get_m_file_names (tmp_num, *ptr, no_suffix);
+	  char **names = get_fcn_file_names (tmp_num, *ptr, no_suffix);
 
 	  if (i + tmp_num >= num_max - 1)
 	    {
 // Reallocate the array.  Only copy pointers, not the strings they
 // point to, then only delete the original array of pointers, and not
 // the strings they point to.
 
 	      num_max += 1024;
diff --git a/src/utils.h b/src/utils.h
--- a/src/utils.h
+++ b/src/utils.h
@@ -48,17 +48,17 @@ extern char *octave_home (void);
 extern char *octave_lib_dir (void);
 extern char *octave_info_dir (void);
 extern char *default_path (void);
 extern char *default_info_file (void);
 extern char *default_editor (void);
 extern char *get_site_defaults (void);
 extern char *default_pager (void);
 extern char *file_in_path (const char *, const char *);
-extern char *m_file_in_path (const char *);
+extern char *fcn_file_in_path (const char *);
 extern char *polite_directory_format (const char *);
 extern int absolute_pathname (const char *);
 extern int absolute_program (const char *);
 extern char *base_pathname (char *);
 extern int read_octal (const char *);
 extern char *sub_append_string (char *, char *, int *, int *);
 extern char *decode_prompt_string (const char *);
 extern void pathname_backup (char *, int);
@@ -74,18 +74,18 @@ extern void mark_for_deletion (const cha
 extern void cleanup_tmp_files (void);
 extern int send_to_plot_stream (const char *cmd);
 extern void close_plot_stream (void);
 extern int almost_match (const char *std, const char *s,
 			 int min_match_len = 1, int case_sens = 1);
 extern int keyword_almost_match (const char **std, int *min_len,
 				 const char *s, int min_toks_to_match,
 				 int max_toks);
-extern char **get_m_file_names (int& mfl_len, const char *dir, int no_suffix);
-extern char **get_m_file_names (int& mfl_len, int no_suffix);
+extern char **get_fcn_file_names (int& mfl_len, const char *dir, int no_suffix);
+extern char **get_fcn_file_names (int& mfl_len, int no_suffix);
 extern int NINT (double x);
 extern double D_NINT (double x);
 extern void delete_ppchar (char **);
 
 extern "C"
 {
 extern int gethostname ();
 }
diff --git a/src/variables.cc b/src/variables.cc
--- a/src/variables.cc
+++ b/src/variables.cc
@@ -61,38 +61,38 @@ initialize_symbol_tables (void)
   global_sym_tab = new symbol_table ();
 
   top_level_sym_tab = new symbol_table ();
 
   curr_sym_tab = top_level_sym_tab;
 }
 
 /*
- * Is there a corresponding M-file that is newer than the symbol
- * definition?
+ * Is there a corresponding function file that is newer than the
+ * symbol definition?
  */
 int
 symbol_out_of_date (symbol_record *sr)
 {
   int ignore = user_pref.ignore_function_time_stamp;
 
   if (ignore == 2)
     return 0;
 
   if (sr != (symbol_record *) NULL)
     {
       tree *ans = sr->def ();
       if (ans != NULL_TREE)
 	{
-	  char *mf = ans->m_file_name ();
+	  char *mf = ans->fcn_file_name ();
 	  if (! (mf == (char *) NULL
-		 || (ignore && ans->is_system_m_file ())))
+		 || (ignore && ans->is_system_fcn_file ())))
 	    {
 	      time_t tp = ans->time_parsed ();
-	      char *fname = m_file_in_path (mf);
+	      char *fname = fcn_file_in_path (mf);
 	      int status = is_newer (fname, tp);
 	      delete [] fname;
 	      if (status > 0)
 		return 1;
 	    }
 	}
     }
   return 0;
@@ -597,17 +597,17 @@ identifier_exists (char *name)
     sr = global_sym_tab->lookup (name, 0, 0);
 
   if (sr != (symbol_record *) NULL && sr->is_variable ())
     return 1;
   else if (sr != (symbol_record *) NULL && sr->is_function ())
     return 2;
   else
     {
-      char *path = m_file_in_path (name);
+      char *path = fcn_file_in_path (name);
       if (path != (char *) NULL)
 	{
 	  delete [] path;
 	  return 2;
 	}
       else
 	{
 	  struct stat buf;
@@ -645,22 +645,22 @@ is_valid_function (tree_constant& arg, c
 
   char *fcn_name = arg.string_value ();
   symbol_record *sr = global_sym_tab->lookup (fcn_name, 0, 0);
 
   if (sr == (symbol_record *) NULL)
     {
       sr = global_sym_tab->lookup (fcn_name, 1, 0);
       tree_identifier tmp (sr);
-      tmp.parse_m_file (0);
+      tmp.parse_fcn_file (0);
     }
   else if (symbol_out_of_date (sr))
     {
       tree_identifier tmp (sr);
-      tmp.parse_m_file (0);
+      tmp.parse_fcn_file (0);
     }
 
   ans = sr->def ();
   if (ans == NULL_TREE || ! sr->is_function ())
     {
       if (warn)
 	error ("%s: the symbol `%s' is not valid as a function",
 	       warn_for, fcn_name);
@@ -709,17 +709,17 @@ make_name_list (void)
 // Each of these functions returns a new vector of pointers to new
 // strings.
 
   key = names (keyword_help (), key_len);
   glb = global_sym_tab->list (glb_len);
   top = top_level_sym_tab->list (top_len);
   if (top_level_sym_tab != curr_sym_tab)
     lcl = curr_sym_tab->list (lcl_len);
-  mfl = get_m_file_names (mfl_len, 1);
+  mfl = get_fcn_file_names (mfl_len, 1);
 
   int total_len = key_len + glb_len + top_len + lcl_len + mfl_len;
 
   char **list = new char * [total_len+1];
   
 // Put all the symbols in one big list.  Only copy pointers, not the
 // strings they point to, then only delete the original array of
 // pointers, and not the strings they point to.
