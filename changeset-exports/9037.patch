# HG changeset patch
# User Rik <rdrider0-list@yahoo.com>
# Date 1237736509 25200
#      Sun Mar 22 08:41:49 2009 -0700
# Node ID 4cb9f994dcecad437d4a978908b6bd9e976fe839
# Parent  58604c45ca74dbf82c31c848f01f363d63b58cad
Documentation cleanup of var.texi, expr.texi, eval.texi

Spellcheck
Style check (particularly for two spaces after period)

diff --git a/doc/interpreter/eval.txi b/doc/interpreter/eval.txi
--- a/doc/interpreter/eval.txi
+++ b/doc/interpreter/eval.txi
@@ -33,18 +33,18 @@ been computed and stored in a string, wh
 * Calling a Function by its Name::
 * Evaluation in a Different Context::
 @end menu
 
 @node Calling a Function by its Name
 @section Calling a Function by its Name
 
 The @code{feval} function allows you to call a function from a string
-containing its name. This is useful when writing a function that needs to
-call user-supplied functions. The @code{feval} function takes the name
+containing its name.  This is useful when writing a function that needs to
+call user-supplied functions.  The @code{feval} function takes the name
 of the function to call as its first argument, and the remaining 
 arguments are given to the function.
 
 The following example is a simple-minded function using @code{feval}
 that finds the root of a user-supplied function of one variable using
 Newton's method.
 
 @example
diff --git a/doc/interpreter/expr.txi b/doc/interpreter/expr.txi
--- a/doc/interpreter/expr.txi
+++ b/doc/interpreter/expr.txi
@@ -122,17 +122,17 @@ a ([1, 1], [1, 1, 1])
 @noindent
 create a 2 by 3 matrix with all elements equal to 13.
 
 This is an obscure notation and should be avoided.  It is better to
 use the function @code{ones} to generate a matrix of the appropriate
 size whose elements are all one, and then to scale it to produce the
 desired result.  @xref{Special Utility Matrices}.
 
-It is also possible to create a matrix with different values. The
+It is also possible to create a matrix with different values.  The
 following example creates a 10 dimensional row vector @math{a} containing
 the values
 @iftex
 @tex
 $a_i = \sqrt{i}$.
 @end tex
 @end iftex
 @ifnottex
@@ -201,17 +201,17 @@ example, the function @code{sqrt} comput
 A fixed set of functions are @dfn{built-in}, which means they are
 available in every Octave program.  The @code{sqrt} function is one of
 these.  In addition, you can define your own functions.
 @xref{Functions and Scripts}, for information about how to do this.
 
 @cindex arguments in function call
 The way to use a function is with a @dfn{function call} expression,
 which consists of the function name followed by a list of
-@dfn{arguments} in parentheses. The arguments are expressions which give
+@dfn{arguments} in parentheses.  The arguments are expressions which give
 the raw materials for the calculation that the function will do.  When
 there is more than one argument, they are separated by commas.  If there
 are no arguments, you can omit the parentheses, but it is a good idea to
 include them anyway, to clearly indicate that a function call was
 intended.  Here are some examples:
 
 @example
 @group
@@ -704,17 +704,17 @@ using the equivalent of the operation @c
 If it is false, the result of the overall expression is 0.  If it is
 true, the expression @var{boolean2} is evaluated and converted to a
 scalar using the equivalent of the operation @code{all
 (@var{boolean1}(:))}.  If it is true, the result of the overall expression
 is 1.  Otherwise, the result of the overall expression is 0.
 
 @strong{Warning:} there is one exception to the rule of evaluating
 @code{all (@var{boolean1}(:))}, which is when @code{boolean1} is the
-empty matrix. The truth value of an empty matrix is always @code{false}
+empty matrix.  The truth value of an empty matrix is always @code{false}
 so @code{[] && true} evaluates to @code{false} even though
 @code{all ([])} is @code{true}.
 
 @item @var{boolean1} || @var{boolean2}
 @opindex ||
 The expression @var{boolean1} is evaluated and converted to a scalar
 using the equivalent of the operation @code{all (@var{boolean1}(:))}.
 If it is true, the result of the overall expression is 1.  If it is
@@ -931,17 +931,17 @@ is equivalent to
 [u, s, v] = svd (a)
 a = u
 b = s
 @end group
 @end example
 
 @noindent
 The number of values on the left side of the expression can, however,
-not exceed the number of values on the right side. For example, the
+not exceed the number of values on the right side.  For example, the
 following will produce an error.
 
 @c Using 'smallexample' to make text fit on page when creating smallbook.
 @smallexample
 [a, b, c, d] = [u, s, v] = svd (a);
 @print{} error: element number 4 undefined in return list
 @end smallexample
 
@@ -961,17 +961,17 @@ This can be written in a clearer and mor
 a += 2;
 @end example
 
 @noindent
 @opindex -=
 @opindex *=
 @opindex /=
 Similar operators also exist for subtraction (@code{-=}),
-multiplication (@code{*=}), and division (@code{/=}). An expression
+multiplication (@code{*=}), and division (@code{/=}).  An expression
 of the form
 
 @example
 @var{expr1} @var{op}= @var{expr2}
 @end example
 
 @noindent
 is evaluated as
diff --git a/doc/interpreter/var.txi b/doc/interpreter/var.txi
--- a/doc/interpreter/var.txi
+++ b/doc/interpreter/var.txi
@@ -50,20 +50,20 @@ documented internal variables and built-
 Case is significant in variable names.  The symbols @code{a} and
 @code{A} are distinct variables.
 
 A variable name is a valid expression by itself.  It represents the
 variable's current value.  Variables are given new values with
 @dfn{assignment operators} and @dfn{increment operators}.
 @xref{Assignment Ops, ,Assignment Expressions}.
 
-There is one built-in variable with a special meaning. The @code{ans} variable
+There is one built-in variable with a special meaning.  The @code{ans} variable
 always contains the result of the last computation, where the output wasn't
-assigned to any variable. The code @code{a = cos (pi)} will assign the value -1
-to the variable @code{a}, but will not change the value of @code{ans}. However,
+assigned to any variable.  The code @code{a = cos (pi)} will assign the value -1
+to the variable @code{a}, but will not change the value of @code{ans}.  However,
 the code @code{cos (pi)} will set the value of @code{ans} to -1.
 
 Variables in Octave do not have fixed types, so it is possible to first
 store a numeric value in a variable and then to later use the same name
 to hold a string value in the same program.  Variables may not be used
 before they have been given a value.  Doing so results in an error.
 
 @cindex @code{ans}
@@ -181,17 +181,17 @@ the function works with a @emph{copy} of
 @section Persistent Variables
 @cindex persistent variables
 @cindex @code{persistent} statement
 @cindex variables, persistent
 @anchor{doc-persistent}
 
 A variable that has been declared @dfn{persistent} within a function
 will retain its contents in memory between subsequent calls to the
-same function. The difference between persistent variables and global
+same function.  The difference between persistent variables and global
 variables is that persistent variables are local in scope to a
 particular function and are not visible elsewhere.
 
 The following example uses a persistent variable to create a function
 that prints the number of times it has been called.
 
 @example
 @group
@@ -220,17 +220,17 @@ all persistent declarations.
 persistent a
 persistent a b
 persistent c = 2
 persistent d = 3 e f = 5
 @end group
 @end example
 
 The behavior of persistent variables is equivalent to the behavior of
-static variables in C. The command @code{static} in Octave is also
+static variables in C.  The command @code{static} in Octave is also
 recognized and is equivalent to @code{persistent}.
 
 Like global variables, a persistent variable may only be initialized once.
 For example, after executing the following code
 
 @example
 @group
 persistent pvar = 1
@@ -260,17 +260,17 @@ endfunction
 @end example
 
 @noindent
 This implementation behaves in exactly the same way as the previous
 implementation of @code{count_calls}.
 
 The value of a persistent variable is kept in memory until it is
 explicitly cleared.  Assuming that the implementation of @code{count_calls}
-is saved on disc, we get the following behaviour.
+is saved on disc, we get the following behavior.
 
 @example
 @group
 for i = 1:2
   count_calls ();
 endfor
 @print{} 'count_calls' has been called 1 times
 @print{} 'count_calls' has been called 2 times
@@ -307,17 +307,17 @@ function definition will be removed from
 a persistent variable to be removed from memory even if the function is
 cleared, you should use the @code{mlock} function as described in
 @xref{Function Locking}.
 
 @node Status of Variables
 @section Status of Variables
 
 When creating simple one-shot programs it can be very convenient to
-see which variables are available at the prompt. The function @code{who}
+see which variables are available at the prompt.  The function @code{who}
 and its siblings @code{whos} and @code{whos_line_format} will show
 different information about what is in memory, as the following shows.
 
 @example
 str = "A random string";
 who -variables
      @print{} *** local user variables:
      @print{} 
@@ -326,46 +326,46 @@ who -variables
 
 @DOCSTRING(who)
 
 @DOCSTRING(whos)
 
 @DOCSTRING(whos_line_format)
 
 Instead of displaying which variables are in memory, it is possible
-to determine if a given variable is available. That way it is possible
-to alter the behaviour of a program depending on the existence of a
-variable. The following example illustrates this.
+to determine if a given variable is available.  That way it is possible
+to alter the behavior of a program depending on the existence of a
+variable.  The following example illustrates this.
 
 @example
 if (! exist ("meaning", "var"))
   disp ("The program has no 'meaning'");
 endif
 @end example
 
 @DOCSTRING(exist)
 
 Usually Octave will manage the memory, but sometimes it can be practical
-to remove variables from memory manually. This is usually needed when
+to remove variables from memory manually.  This is usually needed when
 working with large variables that fill a substantial part of the memory.
 On a computer that uses the IEEE floating point format, the following
 program allocates a matrix that requires around 128 MB memory.
 
 @example
 large_matrix = zeros (4000, 4000);
 @end example
 
 @noindent
 Since having this variable in memory might slow down other computations,
-it can be necessary to remove it manually from memory. The @code{clear}
+it can be necessary to remove it manually from memory.  The @code{clear}
 function allows this.
 
 @DOCSTRING(clear)
 
 Information about a function or variable such as its location in the
-file system can also be acquired from within Octave. This is usually
+file system can also be acquired from within Octave.  This is usually
 only useful during development of programs, and not within a program.
 
 @DOCSTRING(type)
 
 @DOCSTRING(which)
 
 @DOCSTRING(what)
diff --git a/scripts/general/genvarname.m b/scripts/general/genvarname.m
--- a/scripts/general/genvarname.m
+++ b/scripts/general/genvarname.m
@@ -44,18 +44,18 @@
 ## @{
 ##   [1,1] = foo
 ##   [1,2] = foo1
 ## @}
 ## @end group
 ## @end example
 ##
 ## Note that the result is a char array/cell array of strings, not the
-## variables themselves. To define a variable, @code{eval()} can be
-## used. The following trivial example sets @code{x} to @code{42}.
+## variables themselves.  To define a variable, @code{eval()} can be
+## used.  The following trivial example sets @code{x} to @code{42}.
 ##
 ## @example
 ## @group
 ## name = genvarname ("x");
 ## eval([name " = 42"]);
 ## @result{} x =  42
 ## @end group
 ## @end example
@@ -75,27 +75,27 @@
 ##   a1 =  2
 ##   a2 =  3
 ## @}
 ## @end group
 ## @end example
 ##
 ## Since variable names may only contain letters, digits and underscores,
 ## genvarname replaces any sequence of disallowed characters with
-## an underscore. Also, variables may not begin with a digit; in this
+## an underscore.  Also, variables may not begin with a digit; in this
 ## case an underscore is added before the variable name.
 ##
 ## Variable names beginning and ending with two underscores "__" are valid but
 ## they are used internally by octave and should generally be avoided, therefore
 ## genvarname will not generate such names.
 ##
 ## genvarname will also make sure that returned names do not clash with
-## keywords such as "for" and "if". A number will be appended if necessary.
+## keywords such as "for" and "if".  A number will be appended if necessary.
 ## Note, however, that this does @strong{not} include function names,
-## such as "sin". Such names should be included in @var{avoid} if necessary.
+## such as "sin".  Such names should be included in @var{avoid} if necessary.
 ## @seealso{isvarname, exist, tmpnam, eval}
 ## @end deftypefn
 
 ## Authors: Rob Platt <robert.platt@postgrad.manchester.ac.uk>
 ##          Bill Denney <bill@denney.ws>
 
 function varname = genvarname (str, exclusions)
 
diff --git a/scripts/help/type.m b/scripts/help/type.m
--- a/scripts/help/type.m
+++ b/scripts/help/type.m
@@ -14,21 +14,21 @@
 ## along with this program; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Command} type options name @dots{}
 ## Display the definition of each @var{name} that refers to a function.
 ## 
 ## Normally also displays whether each @var{name} is user-defined or built-in;
-## the @code{-q} option suppresses this behaviour.
+## the @code{-q} option suppresses this behavior.
 ##
-## If an output argument is requested nothing is displayed. Instead a cell array
-## of strings is returned, where each element corresponds to the definition of
-## each requested function.
+## If an output argument is requested nothing is displayed.  Instead, a cell 
+## array of strings is returned, where each element corresponds to the 
+## definition of each requested function.
 ## @end deftypefn
 
 function retval = type (varargin)
   ## Parse input
   if (nargin == 0)
     error ("type: not enough input arguments");
   endif
 
diff --git a/scripts/miscellaneous/namelengthmax.m b/scripts/miscellaneous/namelengthmax.m
--- a/scripts/miscellaneous/namelengthmax.m
+++ b/scripts/miscellaneous/namelengthmax.m
@@ -13,27 +13,27 @@
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} namelengthmax ()
-## Returns the matlab compatible maximum variable name length. Octave is
+## Returns the @sc{Matlab} compatible maximum variable name length.  Octave is
 ## capable of storing strings up to 
 ## @iftex
 ## @tex
 ## $2^{31} - 1$
 ## @end tex
 ## @end iftex
 ## @ifnottex
 ## @code{2 ^ 31 - 1}
 ## @end ifnottex
-## in length. However for matlab compatibility all variable, function
+## in length.  However for @sc{Matlab} compatibility all variable, function
 ## and structure field names should be shorter than the length supplied by
-## @code{namelengthmax}. In particular variables stored to a matlab file
+## @code{namelengthmax}.  In particular variables stored to a @sc{Matlab} file
 ## format will have their names truncated to this length.
 ## @end deftypefn
 
 function n = namelengthmax ()
   n = 63;
 endfunction
diff --git a/scripts/miscellaneous/run.m b/scripts/miscellaneous/run.m
--- a/scripts/miscellaneous/run.m
+++ b/scripts/miscellaneous/run.m
@@ -15,18 +15,18 @@
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} run (@var{f})
 ## @deftypefnx {Command} {} run @var{f}
 ## Run scripts in the current workspace that are not necessarily on the
-## path. If @var{f} is the script to run, including its path, then @code{run}
-## change the directory to the directory where @var{f} is found. @code{run}
+## path.  If @var{f} is the script to run, including its path, then @code{run}
+## change the directory to the directory where @var{f} is found.  @code{run}
 ## then executes the script, and returns to the original directory.
 ## @seealso{system}
 ## @end deftypefn
 
 function run (s)
 
   if (nargin != 1)
     print_usage ();
diff --git a/scripts/miscellaneous/what.m b/scripts/miscellaneous/what.m
--- a/scripts/miscellaneous/what.m
+++ b/scripts/miscellaneous/what.m
@@ -15,18 +15,18 @@
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Command} {} what 
 ## @deftypefnx {Command} {} what @var{dir}
 ## @deftypefnx {Function File} {w =} what (@var{dir})
-## List the Octave specific files in a directory. If the variable @var{dir}
-## is given then check that directory rather than the current directory. If
+## List the Octave specific files in a directory.  If the variable @var{dir}
+## is given then check that directory rather than the current directory.  If
 ## a return argument is requested, the files found are returned in the 
 ## structure @var{w}.
 ## @seealso{which}
 ## @end deftypefn
 
 function ret = what (d)
 
   if (nargin == 0)
diff --git a/src/variables.cc b/src/variables.cc
--- a/src/variables.cc
+++ b/src/variables.cc
@@ -1559,17 +1559,17 @@ List currently defined symbols matching 
 following are valid options.  They may be shortened to one character but\n\
 may not be combined.\n\
 \n\
 @table @code\n\
 @item global\n\
 List the variables in the global scope rather than the current scope.\n\
 @item -regexp\n\
 The patterns are considered as regular expressions and will be used\n\
-for matching the variables to display. The same pattern syntax as for\n\
+for matching the variables to display.  The same pattern syntax as for\n\
 the @code{regexp} function is used.\n\
 @item -file\n\
 The following argument is treated as a filename, and the variables that\n\
 are found within this file are listed.\n\
 @end table\n\
 \n\
 Valid patterns are the same as described for the @code{clear} command\n\
 above.  If no patterns are supplied, all symbols from the given category\n\
