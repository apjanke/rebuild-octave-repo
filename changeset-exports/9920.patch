# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1259931735 -3600
#      Fri Dec 04 14:02:15 2009 +0100
# Node ID 56fbe170d3542a2db3fb479bdcc78dfd97ec58d1
# Parent  a463aa0aa0ab7fb0b11f6f68b82d4cfb3170e4a3
fix issorted with NaNs in middle

diff --git a/liboctave/Array-C.cc b/liboctave/Array-C.cc
--- a/liboctave/Array-C.cc
+++ b/liboctave/Array-C.cc
@@ -55,17 +55,17 @@ nan_descending_compare (const Complex& x
 {
   return (xisnan (x)
 	  ? ! xisnan (y)
 	  : ((std::abs (x) > std::abs (x))
 	     || ((std::abs (x) == std::abs (x)) && (arg (x) > arg (x)))));
 }
 
 Array<Complex>::compare_fcn_type
-sortrows_comparator (sortmode mode, const Array<Complex>& a , bool allow_chk)
+safe_comparator (sortmode mode, const Array<Complex>& a , bool allow_chk)
 {
   Array<Complex>::compare_fcn_type result = 0;
 
   if (allow_chk)
     {
       octave_idx_type k = 0;
       for (; k < a.numel () && ! xisnan (a(k)); k++) ;
       if (k == a.numel ())
diff --git a/liboctave/Array-d.cc b/liboctave/Array-d.cc
--- a/liboctave/Array-d.cc
+++ b/liboctave/Array-d.cc
@@ -51,17 +51,17 @@ nan_ascending_compare (double x, double 
 
 static bool
 nan_descending_compare (double x, double y)
 {
   return xisnan (x) ? ! xisnan (y) : x > y;
 }
 
 Array<double>::compare_fcn_type
-sortrows_comparator (sortmode mode, const Array<double>& a , bool allow_chk)
+safe_comparator (sortmode mode, const Array<double>& a , bool allow_chk)
 {
   Array<double>::compare_fcn_type result = 0;
 
   if (allow_chk)
     {
       octave_idx_type k = 0;
       for (; k < a.numel () && ! xisnan (a(k)); k++) ;
       if (k == a.numel ())
diff --git a/liboctave/Array-f.cc b/liboctave/Array-f.cc
--- a/liboctave/Array-f.cc
+++ b/liboctave/Array-f.cc
@@ -51,17 +51,17 @@ nan_ascending_compare (float x, float y)
 
 static bool
 nan_descending_compare (float x, float y)
 {
   return xisnan (x) ? ! xisnan (y) : x > y;
 }
 
 Array<float>::compare_fcn_type
-sortrows_comparator (sortmode mode, const Array<float>& a , bool allow_chk)
+safe_comparator (sortmode mode, const Array<float>& a , bool allow_chk)
 {
   Array<float>::compare_fcn_type result = 0;
 
   if (allow_chk)
     {
       octave_idx_type k = 0;
       for (; k < a.numel () && ! xisnan (a(k)); k++) ;
       if (k == a.numel ())
diff --git a/liboctave/Array-fC.cc b/liboctave/Array-fC.cc
--- a/liboctave/Array-fC.cc
+++ b/liboctave/Array-fC.cc
@@ -55,17 +55,17 @@ nan_descending_compare (const FloatCompl
 {
   return (xisnan (x)
 	  ? ! xisnan (y)
 	  : ((std::abs (x) > std::abs (x))
 	     || ((std::abs (x) == std::abs (x)) && (arg (x) > arg (x)))));
 }
 
 Array<FloatComplex>::compare_fcn_type
-sortrows_comparator (sortmode mode, const Array<FloatComplex>& a,
+safe_comparator (sortmode mode, const Array<FloatComplex>& a,
 		     bool allow_chk)
 {
   Array<FloatComplex>::compare_fcn_type result = 0;
 
   if (allow_chk)
     {
       octave_idx_type k = 0;
       for (; k < a.numel () && ! xisnan (a(k)); k++) ;
diff --git a/liboctave/Array.cc b/liboctave/Array.cc
--- a/liboctave/Array.cc
+++ b/liboctave/Array.cc
@@ -2184,83 +2184,72 @@ Array<T>::sort (Array<octave_idx_type> &
 	    vi[i*stride + offset] = bufi[i];
 	}
     }
 
   return m;
 }
 
 template <class T>
-sortmode
-Array<T>::is_sorted (sortmode mode) const
-{
-  if (nelem () <= 1)
-    return ASCENDING;
-
-  const T *lo = data (), *hi = data () + nelem () - 1;
-
-  // Check for NaNs at the beginning and end.
-  if (mode != ASCENDING && sort_isnan<T> (*lo))
-    {
-      mode = DESCENDING;
-      do
-        ++lo;
-      while (lo < hi && sort_isnan<T> (*lo));
-    }
-  else if (mode != DESCENDING && sort_isnan<T> (*hi))
-    {
-      mode = ASCENDING;
-      do
-        --hi;
-      while (lo < hi && sort_isnan<T> (*hi));
-    }
-  
-  octave_sort<T> lsort;
-
-  // If mode is still unknown, compare lo and hi
-  if (! mode)
-    {
-      if (lsort.descending_compare (*lo, *hi))
-        mode = DESCENDING;
-      else if (lsort.ascending_compare (*lo, *hi))
-        mode = ASCENDING;
-      else
-        mode = ASCENDING;
-    }
-
-  lsort.set_compare (mode);
-
-  if (! lsort.is_sorted (lo, hi - lo + 1))
-    mode = UNSORTED;
-
-  return mode;
-}
-
-template <class T>
 typename Array<T>::compare_fcn_type
-sortrows_comparator (sortmode mode, const Array<T>& /* a */,
-		     bool /* allow_chk */)
+safe_comparator (sortmode mode, const Array<T>& /* a */,
+                 bool /* allow_chk */)
 {
   if (mode == ASCENDING)
     return octave_sort<T>::ascending_compare;
   else if (mode == DESCENDING)
     return octave_sort<T>::descending_compare;
   else
     return 0;
 }
 
 template <class T>
+sortmode
+Array<T>::is_sorted (sortmode mode) const
+{
+  octave_sort<T> lsort;
+
+  octave_idx_type n = numel ();
+
+  if (n <= 1)
+    return mode ? mode : ASCENDING;
+
+  if (! mode)
+    {
+      // Auto-detect mode.
+      compare_fcn_type compare
+	= safe_comparator (ASCENDING, *this, false);
+
+      if (compare (elem (n-1), elem (0)))
+        mode = DESCENDING;
+      else
+        mode = ASCENDING;
+    }
+
+  if (mode)
+    {
+      lsort.set_compare (safe_comparator (mode, *this, false));
+
+      if (! lsort.is_sorted (data (), n))
+        mode = UNSORTED;
+    }
+
+  return mode;
+
+}
+
+template <class T>
 Array<octave_idx_type>
 Array<T>::sort_rows_idx (sortmode mode) const
 {
   Array<octave_idx_type> idx;
 
   octave_sort<T> lsort;
 
-  lsort.set_compare (sortrows_comparator (mode, *this, true));
+  lsort.set_compare (safe_comparator (mode, *this, true));
 
   octave_idx_type r = rows (), c = cols ();
 
   idx = Array<octave_idx_type> (r);
 
   lsort.sort_rows (data (), idx.fortran_vec (), r, c);
 
   return idx;
@@ -2277,17 +2266,17 @@ Array<T>::is_sorted_rows (sortmode mode)
 
   if (r <= 1 || c == 0)
     return mode ? mode : ASCENDING;
 
   if (! mode)
     {
       // Auto-detect mode.
       compare_fcn_type compare
-	= sortrows_comparator (ASCENDING, *this, false);
+	= safe_comparator (ASCENDING, *this, false);
 
       octave_idx_type i;
       for (i = 0; i < cols (); i++)
         {
           T l = elem (0, i), u = elem (rows () - 1, i);
           if (compare (l, u))
             {
               if (mode == DESCENDING)
@@ -2310,17 +2299,17 @@ Array<T>::is_sorted_rows (sortmode mode)
             }
         }
       if (! mode && i == cols ())
         mode = ASCENDING;
     }
 
   if (mode)
     {
-      lsort.set_compare (sortrows_comparator (mode, *this, false));
+      lsort.set_compare (safe_comparator (mode, *this, false));
 
       if (! lsort.is_sorted_rows (data (), r, c))
         mode = UNSORTED;
     }
 
   return mode;
 
 }
@@ -2691,17 +2680,17 @@ template <> Array<T>  \
 Array<T>::sort (Array<octave_idx_type> &sidx, int, sortmode) const \
 { sidx = Array<octave_idx_type> (); return *this; } \
  \
 template <> sortmode  \
 Array<T>::is_sorted (sortmode) const  \
 { return UNSORTED; } \
  \
 Array<T>::compare_fcn_type \
-sortrows_comparator (sortmode, const Array<T>&, bool) \
+safe_comparator (sortmode, const Array<T>&, bool) \
 { return 0; } \
  \
 template <> Array<octave_idx_type>  \
 Array<T>::sort_rows_idx (sortmode) const  \
 { return Array<octave_idx_type> (); } \
  \
 template <> sortmode  \
 Array<T>::is_sorted_rows (sortmode) const \
diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,17 @@
+2009-12-05  Jaroslav Hajek  <highegg@gmail.com>
+
+	* Array.cc (sortrows_comparator): Rename to safe_comparator.
+	(Array<T>::is_sorted): Use it here.
+	* Array-d.cc: Update.
+	* Array-f.cc: Update.
+	* Array-C.cc: Update.
+	* Array-fC.cc: Update.
+
 2009-12-03  John W. Eaton  <jwe@octave.org>
 
 	* Makefile.am (BUILT_NODISTFILES): New variable.
 
 2009-12-01  Jaroslav Hajek  <highegg@gmail.com>
 
 	* idx-vector.cc (idx_vector::idx_range_rep::unconvert,
 	idx_vector::idx_scalar_rep::unconvert,
