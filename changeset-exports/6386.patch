# HG changeset patch
# User jwe
# Date 1173247003 0
#      Wed Mar 07 05:56:43 2007 +0000
# Node ID 5a91bf0a47e85af7d15b4884c2a45483cbf1039b
# Parent  a192de8c0ead167a6066494db6ea774779158010
[project @ 2007-03-07 05:56:43 by jwe]

diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,8 +1,12 @@
+2007-03-07  Paul Kienzle  <pkienzle@users.sf.net>
+
+	* set/setdiff.m: Some code cleanup and a fix for setdiff on rows.
+
 2007-03-06  David Bateman  <dbateman@free.fr>
 	    John W. Eaton  <jwe@octave.org>
 
 	* set/setdiff.m: Ignore "rows" for cell array args.
 	Handle cellstr args.
 
 2007-03-05  John W. Eaton  <jwe@octave.org>
 
diff --git a/scripts/set/setdiff.m b/scripts/set/setdiff.m
--- a/scripts/set/setdiff.m
+++ b/scripts/set/setdiff.m
@@ -52,40 +52,40 @@ function c = setdiff (a, b, byrows_arg)
 
   if (byrows)
     c = unique (a, "rows");
     if (! isempty (c) && ! isempty (b))
       ## Form a and b into combined set.
       b = unique (b, "rows");
       [dummy, idx] = sortrows ([c; b]);
       ## Eliminate those elements of a that are the same as in b.
-      n = length (dummy);
-      c(idx(find (dummy(1:n-1) == dummy(2:n))), :) = [];
+      dups = find (all (dummy(1:end-1,:) == dummy(2:end,:), 2));
+      c(idx(dups),:) = [];
     endif
   else
     c = unique (a);
     if (! isempty (c) && ! isempty (b))
       ## Form a and b into combined set.
       b = unique (b);
       [dummy, idx] = sort ([c(:); b(:)]);
       ## Eliminate those elements of a that are the same as in b.
-      n = length (dummy);
       if (iscellstr (dummy))
-	c(idx(find (strcmp (dummy(1:n-1), dummy(2:n))))) = [];
+        dups = find (strcmp (dummy(1:end-1), dummy(2:end)));
       else
-	c(idx(find (dummy(1:n-1) == dummy(2:n)))) = [];
+	dups = find (dummy(1:end-1) == dummy(2:end));
       endif
+      c(idx(dups)) = [];
       ## Reshape if necessary.
       if (size (c, 1) != 1 && size (b, 1) == 1)
 	c = c.';
       endif
     endif
   endif
   
 endfunction
   
 %!assert(setdiff(["bb";"zz";"bb";"zz"],["bb";"cc";"bb"],"rows"), "zz")
 %!assert(setdiff(["b";"z";"b";"z"],["b";"c";"b"],"rows"), "z")
 %!assert(setdiff(["b";"z";"b";"z"],["b";"c";"b"]), "z")
 %!assert(setdiff([1, 1; 2, 2; 3, 3; 4, 4], [1, 1; 2, 2; 4, 4], "rows"), [3 3])
 %!assert(setdiff([1; 2; 3; 4], [1; 2; 4], "rows"), 3)
-%!assert(setdiff([1, 2; 3, 4], [1, 2; 3, 6], "rows"), [3, 6])
+%!assert(setdiff([1, 2; 3, 4], [1, 2; 3, 6], "rows"), [3, 4])
 %!assert(setdiff({"one","two";"three","four"},{"one","two";"three","six"}), {"four"})
