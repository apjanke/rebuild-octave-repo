# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1281337440 -7200
#      Mon Aug 09 09:04:00 2010 +0200
# Node ID 333bf09e3b6e6d4834c0a7e11564f1d7e2a1ece2
# Parent  307c8396bc8338d104df4051023660d51d19cf69
only allow struct assignments to non-struct values for empty arrays

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,18 @@
+2010-08-09  Jaroslav Hajek  <highegg@gmail.com>
+
+	* ov.cc (octave_value::assign (assign_op, const std::string&,
+	const std::list<octave_value_list>&, const octave_value&):
+	Don't attempt to fix struct assignment to non-struct values here.
+	Check for successful assignment before overwriting this.
+
+	* ov-cell.cc (octave_cell::subsasgn): Allow dot assignment into empty
+	cell.
+
 2010-08-08  Rik <octave@nomad.inbox5.com>
 
 	* DLD-FUNCTIONS/config-module.awk: Add newlines to divide blocks
 	in generated modules.mk and improve readability.
 
 2010-08-08  Rik <octave@nomad.inbox5.com>
 
 	* Makefile.am: Create .DOCSTRINGS quietly and avoid screen clutter
diff --git a/src/ov-cell.cc b/src/ov-cell.cc
--- a/src/ov-cell.cc
+++ b/src/ov-cell.cc
@@ -258,17 +258,17 @@ octave_cell::subsasgn (const std::string
         {
         case '(':
           {
             if (is_empty () && type[1] == '.')
               {
                 // Allow conversion of empty cell array to some other
                 // type in cases like
                 //
-                //  x = []; x(i).f = rhs
+                //  x = {}; x(i).f = rhs
 
                 octave_value tmp = octave_value::empty_conv (type, rhs);
 
                 return tmp.subsasgn (type, idx, rhs);
               }
             else
               {
                 octave_value tmp = do_index_op (idx.front (), true);
@@ -323,18 +323,25 @@ octave_cell::subsasgn (const std::string
                 else
                   gripe_indexed_cs_list ();
               }
           }
           break;
 
         case '.':
           {
-            std::string nm = type_name ();
-            error ("%s cannot be indexed with %c", nm.c_str (), type[0]);
+            if (is_empty ())
+              {
+                // Do nothing; the next branch will handle it.
+              }
+            else
+              {
+                std::string nm = type_name ();
+                error ("%s cannot be indexed with %c", nm.c_str (), type[0]);
+              }
           }
           break;
 
         default:
           panic_impossible ();
         }
     }
 
@@ -397,18 +404,32 @@ octave_cell::subsasgn (const std::string
               }
             else
               gripe_failed_assignment ();
           }
           break;
 
         case '.':
           {
-            std::string nm = type_name ();
-            error ("%s cannot be indexed with %c", nm.c_str (), type[0]);
+            if (is_empty ())
+              {
+                // Allow conversion of empty cell array to some other
+                // type in cases like
+                //
+                //  x = {}; x.f = rhs
+
+                octave_value tmp = octave_value::empty_conv (type, rhs);
+
+                return tmp.subsasgn (type, idx, rhs);
+              }
+            else
+              {
+                std::string nm = type_name ();
+                error ("%s cannot be indexed with %c", nm.c_str (), type[0]);
+              }
           }
           break;
 
         default:
           panic_impossible ();
         }
     }
 
diff --git a/src/ov.cc b/src/ov.cc
--- a/src/ov.cc
+++ b/src/ov.cc
@@ -1327,27 +1327,23 @@ octave_value::assign (assign_op op, cons
             }
         }
       else
         error ("in computed assignment A(index) OP= X, A must be defined first");
     }
 
   if (! error_state)
     {
-      if (type[0] == '.' && ! (is_map () || is_object ()))
-        {
-          octave_value tmp = Octave_map ();
-          *this = tmp.subsasgn (type, idx, t_rhs);
-        }
-      else
-        *this = subsasgn (type, idx, t_rhs);
+      octave_value tmp = subsasgn (type, idx, t_rhs);
 
       if (error_state)
         gripe_assign_failed_or_no_method (assign_op_as_string (op_asn_eq),
                                           type_name (), rhs.type_name ());
+      else
+        *this = tmp;
     }
 
   return *this;
 }
 
 octave_value&
 octave_value::assign (assign_op op, const octave_value& rhs)
 {
