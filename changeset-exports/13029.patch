# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1314729445 14400
#      Tue Aug 30 14:37:25 2011 -0400
# Node ID 50db905c3cf17532fdd2fd7094a6ff324daa71e4
# Parent  b9a89ca0fb75dc0309dc867aca1a0e979bc07954
# Parent  9b191d0e547f9a760d9d046b7ae16cf1ddc3877d
maint: periodic merge of stable to default

diff --git a/doc/interpreter/matrix.txi b/doc/interpreter/matrix.txi
--- a/doc/interpreter/matrix.txi
+++ b/doc/interpreter/matrix.txi
@@ -76,16 +76,19 @@ Note that in conditional contexts (like 
 @DOCSTRING(isfinite)
 
 @DOCSTRING(common_size)
 
 @DOCSTRING(find)
         
 @DOCSTRING(lookup)
 
+If you wish to check if a variable exists at all, instead of properties
+its elements may have, consult @ref{Status of Variables}.
+
 @node Rearranging Matrices
 @section Rearranging Matrices
 
 @DOCSTRING(fliplr)
 
 @DOCSTRING(flipud)
 
 @DOCSTRING(flipdim)
diff --git a/doc/interpreter/numbers.txi b/doc/interpreter/numbers.txi
--- a/doc/interpreter/numbers.txi
+++ b/doc/interpreter/numbers.txi
@@ -831,8 +831,12 @@ variable.
 
 @DOCSTRING(ishermitian)
 
 @DOCSTRING(isdefinite)
 
 @DOCSTRING(islogical)
 
 @DOCSTRING(isprime)
+
+If instead of knowing properties of variables, you wish to know which
+variables are defined and to gather other information about the
+workspace itself, see @ref{Status of Variables}.
diff --git a/liboctave/dMatrix.cc b/liboctave/dMatrix.cc
--- a/liboctave/dMatrix.cc
+++ b/liboctave/dMatrix.cc
@@ -3112,21 +3112,21 @@ Sylvester (const Matrix& a, const Matrix
 
 /* Test some simple identities
 %!shared M, cv, rv, Mt, rvt
 %! M = randn(10,10)+100*eye(10,10);
 %! Mt = M';
 %! cv = randn(10,1);
 %! rv = randn(1,10);
 %! rvt = rv';
-%!assert([M*cv,M*cv],M*[cv,cv],1e-14)
-%!assert([M'*cv,M'*cv],M'*[cv,cv],3e-14)
-%!assert([rv*M;rv*M],[rv;rv]*M,3e-14)
-%!assert([rv*M';rv*M'],[rv;rv]*M',3e-14)
-%!assert(2*rv*cv,[rv,rv]*[cv;cv],3e-14)
+%!assert([M*cv,M*cv],M*[cv,cv],1e-13)
+%!assert([M'*cv,M'*cv],M'*[cv,cv],1e-13)
+%!assert([rv*M;rv*M],[rv;rv]*M,1e-13)
+%!assert([rv*M';rv*M'],[rv;rv]*M',1e-13)
+%!assert(2*rv*cv,[rv,rv]*[cv;cv],1e-13)
 %!assert(M'\cv,Mt\cv,1e-14)
 %!assert(M'\rv',Mt\rvt,1e-14)
 */
 
 static inline char
 get_blas_trans_arg (bool trans)
 {
   return trans ? 'T' : 'N';
diff --git a/scripts/plot/private/__print_parse_opts__.m b/scripts/plot/private/__print_parse_opts__.m
--- a/scripts/plot/private/__print_parse_opts__.m
+++ b/scripts/plot/private/__print_parse_opts__.m
@@ -565,17 +565,17 @@ function [papersize, paperposition] = gs
 
 endfunction
 
 function value = convert2points (value, units)
     switch (units)
     case "inches"
       value = value * 72;
     case "centimeters"
-      value = value * 72 / 25.4;
+      value = value * 72 / 2.54;
     case "normalized"
       error ("print:customnormalized",
              "print.m: papersize=='<custom>' and paperunits='normalized' may not be combined");
     endswitch
 endfunction
 
 function device_list = gs_device_list ();
   ## Graphics formats/languages, not priners.
diff --git a/src/DLD-FUNCTIONS/__magick_read__.cc b/src/DLD-FUNCTIONS/__magick_read__.cc
--- a/src/DLD-FUNCTIONS/__magick_read__.cc
+++ b/src/DLD-FUNCTIONS/__magick_read__.cc
@@ -665,18 +665,17 @@ encode_uint_image (std::vector<Magick::I
 
   bool is_color = ((dsizes.length () > 2) && (dsizes(2) > 2));
   bool has_alpha = (dsizes.length () > 2 && (dsizes(2) == 2 || dsizes(2) == 4));
 
   Array<octave_idx_type> idx (dim_vector (dsizes.length (), 1));
   octave_idx_type rows = m.rows ();
   octave_idx_type columns = m.columns ();
 
-  // FIXME -- maybe simply using bit shifting would be better?
-  unsigned int div_factor = pow (2.0, static_cast<int> (bitdepth)) - 1;
+  unsigned int div_factor = (1 << bitdepth) - 1;
 
   for (unsigned int ii = 0; ii < nframes; ii++)
     {
       Magick::Image im (Magick::Geometry (columns, rows), "black");
 
       im.depth (bitdepth);
 
       if (has_map)
@@ -755,17 +754,17 @@ encode_uint_image (std::vector<Magick::I
 
                   c.shade (static_cast<double>(m(idx)) / div_factor);
 
                   im.pixelColor (y, x, c);
                 }
             }
 
           im.quantizeColorSpace (Magick::GRAYColorspace);
-          im.quantizeColors (pow (2, bitdepth));
+          im.quantizeColors (1 << bitdepth);
           im.quantize ();
         }
 
       imvec.push_back (im);
     }
 }
 
 static void
diff --git a/src/data.cc b/src/data.cc
--- a/src/data.cc
+++ b/src/data.cc
@@ -2027,17 +2027,17 @@ DEFUN (ndims, args, ,
   "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} ndims (@var{a})\n\
 Return the number of dimensions of @var{a}.\n\
 For any array, the result will always be larger than or equal to 2.\n\
 Trailing singleton dimensions are not counted.\n\
 \n\
 @example\n\
 @group\n\
-  ndims (ones (4, 1, 2, 1)\n\
+  ndims (ones (4, 1, 2, 1))\n\
      @result{} 3\n\
 @end group\n\
 @end example\n\
 @end deftypefn")
 {
   octave_value retval;
 
   if (args.length () == 1)
