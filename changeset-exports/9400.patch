# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1246009234 -7200
#      Fri Jun 26 11:40:34 2009 +0200
# Node ID df1ea906c1c433875abacba4e07f420e6b92a2cc
# Parent  a5f6b5800f86916118a4da69ca67580b67bccce6
a slight speed-up in oct-sort.cc

diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,13 @@
+2009-06-26  Jaroslav Hajek  <highegg@gmail.com>
+
+	* oct-sort.cc (octave_sort<T>::lookup_merge<Comp>): Slightly speed-up
+	the merge case.
+
 2009-06-26  Jaroslav Hajek  <highegg@gmail.com>
 
 	* oct-sort.cc (octave_sort<T>::lookup_merge<Comp>): Fix lower-part
 	recursion.
 
 2009-06-24  Alexander Barth  <barth.alexander@gmail.com>
 
 	* eigs-base.cc (EigsRealSymmetricMatrix,
diff --git a/liboctave/oct-sort.cc b/liboctave/oct-sort.cc
--- a/liboctave/oct-sort.cc
+++ b/liboctave/oct-sort.cc
@@ -1801,23 +1801,32 @@ octave_sort<T>::lookup_merge (const T *d
 {
   // Fake entry.
 begin:
 
   if (hi - lo <= nvalues + 16)
     {
       // Do a linear merge.
       octave_idx_type i = lo, j = 0;
-      while (j != nvalues && i < hi)
+
+      if (j != nvalues && i != hi)
         {
-          if (comp (values[j], data[i]))
-            idx[j++] = i;
-          else
-            i++;
+          while (true)
+            {
+              if (comp (values[j], data[i]))
+                {
+                  idx[j] = i;
+                  if (++j == nvalues)
+                    break;
+                }
+              else if (++i == hi)
+                break;
+            }
         }
+
       while (j != nvalues)
         idx[j++] = i;
     }
   else
     {
       // Use the ordering to split the table; look-up recursively.
       switch (nvalues)
         {
