# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1421353795 18000
#      Thu Jan 15 15:29:55 2015 -0500
# Node ID 478d35191196b32cf4a754937a6b374712ff2d95
# Parent  0cc52d752f9982f4467c278f5e2bafae189c228a
maybe stop recorder in audio recorder destructor

* audiodevinfo.cc (audiorecorder::~audiorecorder): Call stop if
recorder is recording.

diff --git a/libinterp/dldfcn/audiodevinfo.cc b/libinterp/dldfcn/audiodevinfo.cc
--- a/libinterp/dldfcn/audiodevinfo.cc
+++ b/libinterp/dldfcn/audiodevinfo.cc
@@ -1290,17 +1290,17 @@ audioplayer::isplaying (void)
 
   return (err == 1);
 }
 
 class audiorecorder : public octave_base_value
 {
 public:
   audiorecorder (void);
-  ~audiorecorder (void) {};
+  ~audiorecorder (void);
 
   // Overloaded base functions
   double player_value (void) const { return 0; }
   virtual double scalar_value (bool = false) const { return 0; }
   void print (std::ostream& os, bool pr_as_read_syntax = false) const;
   void print_raw (std::ostream& os, bool pr_as_read_syntax) const;
 
   // Properties
@@ -1534,16 +1534,25 @@ portaudio_record_callback (const void *i
 
 audiorecorder::audiorecorder (void)
   : octave_callback_function (0),
     id (-1), fs (44100), nbits (16), channels (2), sample_number (0),
     end_sample (-1), tag (""), y (), userdata (Matrix ()),
     left (), right (), stream (0), input_parameters (), type ()
 { }
 
+audiorecorder::~audiorecorder (void)
+{
+  if (isrecording ())
+    {
+      warning ("audiorecorder::~audiorecorder: Interrupting recording audiorecorder");
+      stop ();
+    }
+}
+
 void
 audiorecorder::print (std::ostream& os, bool pr_as_read_syntax) const
 {
   print_raw (os, pr_as_read_syntax);
   newline (os);
 }
 
 void
