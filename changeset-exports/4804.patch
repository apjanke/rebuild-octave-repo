# HG changeset patch
# User jwe
# Date 1077900059 0
#      Fri Feb 27 16:40:59 2004 +0000
# Node ID 6202d9b75f830d7e1d9934b286622602c60db378
# Parent  62a606d4939370cbd4378d0416ea426468108dd2
[project @ 2004-02-27 16:40:59 by jwe]

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,13 @@
+2004-02-27  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* octave.cc (execute_startup_files): Don't find current directory
+	for absolute name of local_rc until after executing home_rc.
+
 2004-02-24  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* input.cc (input_event_hook): Return type is now int.  Return 0.
 
 	* file-io.cc (do_stream_open): Don't call ::error if stream can't
 	be created.  Don't call ::fopen if arch is invalid.  Set error
 	state for stream if fopen fails.
 	* oct-stream.h (octave_stream::error (const char *)): New function.
diff --git a/src/octave.cc b/src/octave.cc
--- a/src/octave.cc
+++ b/src/octave.cc
@@ -230,48 +230,64 @@ execute_startup_files (void)
     }
 
   if (read_init_files)
     {
       // Try to execute commands from $HOME/$OCTAVE_INITFILE and
       // $OCTAVE_INITFILE.  If $OCTAVE_INITFILE is not set, .octaverc
       // is assumed.
 
-      int home_rc_already_executed = 0;
+      bool home_rc_already_executed = false;
 
       std::string initfile = octave_env::getenv ("OCTAVE_INITFILE");
 
       if (initfile.empty ())
 	initfile = ".octaverc";
 
       std::string home_dir = octave_env::get_home_directory ();
 
-      std::string home_rc = home_dir + file_ops::dir_sep_str + initfile;
-      std::string local_rc
-	= octave_env::getcwd () + file_ops::dir_sep_str + initfile;
+      std::string home_rc = octave_env::make_absolute (initfile, home_dir);
+
+      std::string local_rc;
 
       if (! home_dir.empty ())
 	{
 	  parse_and_execute (home_rc, verbose);
 
 	  // Names alone are not enough.
 
 	  file_stat fs_home_rc (home_rc);
 
 	  if (fs_home_rc)
 	    {
+	      // We want to check for curr_dir after executing home_rc
+	      // because doing that may change the working directory.
+
+	      std::string curr_dir = octave_env::getcwd ();
+
+	      local_rc = octave_env::make_absolute (initfile, curr_dir);
+
 	      file_stat fs_dot_rc (local_rc);
 
 	      if (fs_dot_rc && fs_home_rc.ino () == fs_dot_rc.ino ())
-		home_rc_already_executed = 1;
+		home_rc_already_executed = true;
 	    }
 	}
 
       if (! home_rc_already_executed)
-	parse_and_execute (local_rc, verbose);
+	{
+	  if (local_rc.empty ())
+	    {
+	      std::string curr_dir = octave_env::getcwd ();
+
+	      local_rc = octave_env::make_absolute (initfile, curr_dir);
+	    }
+
+	  parse_and_execute (local_rc, verbose);
+	}
     }
 
   unwind_protect::run_frame ("execute_startup_files");
 }
 
 // Usage message with extra help.
 
 static void
