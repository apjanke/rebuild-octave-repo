# HG changeset patch
# User Rik <rik@octave.org>
# Date 1407468299 25200
#      Thu Aug 07 20:24:59 2014 -0700
# Node ID 956fc864c39f5fbdd83f7773b1daa8e898a726f3
# Parent  bd1a5149c53ec9ef1de9a7e1633fe0621db0e43a
periodogram.m: Fix bug when nfft < length (x) and "onesided" specified (bug #42859).

* periodogram.m: Don't use nargin to decide when normalized frequencies should
be used.  Instead check whether Fs has been specified to make the decision.

diff --git a/scripts/signal/periodogram.m b/scripts/signal/periodogram.m
--- a/scripts/signal/periodogram.m
+++ b/scripts/signal/periodogram.m
@@ -81,30 +81,28 @@
 function [pxx, f] = periodogram (x, varargin)
 
   ## check input arguments
   if (nargin < 1 || nargin > 5)
     print_usage ();
   endif
 
   nfft = fs = range = window = [];
-  j = 1;
+  j = 2;
   for k = 1:length (varargin)
     if (ischar (varargin{k}))
       range = varargin{k};
     else
       switch (j)
-        case 1
+        case 2
           window = varargin{k};
-        case 2
+        case 3
           nfft   = varargin{k};
-        case 3
+        case 4
           fs     = varargin{k};
-        case 4
-          range  = varargin{k};
       endswitch
       j++;
     endif
   endfor
 
   if (! isvector (x))
     error ("periodogram: X must be a real or complex vector");
   endif
@@ -121,16 +119,21 @@ function [pxx, f] = periodogram (x, vara
   endif
 
   if (isempty (nfft))
     nfft = max (256, 2.^nextpow2 (n));
   elseif (! isscalar (nfft))
     error ("periodogram: NFFT must be a scalar");
   endif
 
+  use_w_freq = isempty (fs);
+  if (! use_w_freq && ! isscalar (fs))
+    error ("periodogram: FS must be a scalar");
+  endif
+
   if (strcmpi (range, "onesided"))
     range = 1;
   elseif (strcmpi (range, "twosided"))
     range = 2;
   elseif (strcmpi (range, "centered"))
     error ('periodogram: "centered" range type is not implemented');
   else
     range = 2-isreal (x);
@@ -147,19 +150,19 @@ function [pxx, f] = periodogram (x, vara
     x = sum (reshape (x, nfft, []), 2);
   endif
 
   if (! isempty (window))
     n = sumsq (window);
   endif;
   Pxx = (abs (fft (x, nfft))) .^ 2 / n;
 
-  if (nargin < 4)
+  if (use_w_freq)
     Pxx /= 2*pi;
-  elseif (! isempty (fs))
+  else
     Pxx /= fs;
   endif
 
   ## generate output arguments
 
   if (range == 1)  # onesided
     if (! rem (nfft,2))  # nfft is even
       psd_len = nfft/2+1;
@@ -171,25 +174,25 @@ function [pxx, f] = periodogram (x, vara
   endif
 
   if (nargout != 1)
     if (range == 1)
       f = (0:nfft/2)' / nfft;
     elseif (range == 2)
       f = (0:nfft-1)' / nfft;
     endif
-    if (nargin < 4)
+    if (use_w_freq)
       f *= 2*pi;  # generate w=2*pi*f
-    elseif (! isempty (fs))
+    else
       f *= fs;
     endif
   endif
 
   if (nargout == 0)
-    if (nargin < 4)
+    if (use_w_freq)
       plot (f/(2*pi), 10*log10 (Pxx));
       xlabel ("normalized frequency [x pi rad]");
       ylabel ("Power density [dB/rad/sample]");
     else
       plot (f, 10*log10 (Pxx));
       xlabel ("frequency [Hz]");
       ylabel ("Power density [dB/Hz]");
     endif
@@ -207,10 +210,11 @@ endfunction
 
 %% Test input validation
 %!error periodogram ()
 %!error periodogram (1,2,3,4,5,6)
 %!error <X must be a real or complex vector> periodogram (ones (2,2))
 %!error <WIN must be a vector.*same length> periodogram (1:5, ones (2,2))
 %!error <WIN must be a vector.*same length> periodogram (1:5, 1:6)
 %!error <NFFT must be a scalar> periodogram (1:5, 1:5, 1:5)
+%!error <FS must be a scalar> periodogram (1:5, [], [], 1:5)
 %!error <"centered" range type is not implemented> periodogram (1:5, "centered")
 
