# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1491582174 14400
#      Fri Apr 07 12:22:54 2017 -0400
# Node ID 7b594fcfa32b6634a7ede6aa9399d02bef663a29
# Parent  695ff87bc83865323ee7aaf7b71407a67f701c7f
improve inputParser compatibility for optional args (bug #50752)

* inputParser.m (parse): Recognize parameter/value pairs when
  procssing optional arguments.

diff --git a/scripts/general/inputParser.m b/scripts/general/inputParser.m
--- a/scripts/general/inputParser.m
+++ b/scripts/general/inputParser.m
@@ -397,16 +397,23 @@ classdef inputParser < handle
       vidx = nReq;  # current index in varargin
 
       ## Search for a list of Optional arguments
       idx  = 0;     # current index on the array of Optional
       nOpt = numel (this.Optional);
       while (vidx < pnargin && idx < nOpt)
         opt = this.Optional{++idx};
         in  = varargin{++vidx};
+        if (this.is_argname ("Parameter", in) && vidx < pnargin)
+          ## This looks like an optional parameter/value pair, not an
+          ## optional positional parameter.
+          idx -= 1;
+          vidx -= 1;
+          break
+        endif
         try
           valid_option = opt.val (in);
         catch
           valid_option = false;
         end_try_catch
         if (! valid_option)
           ## If it does not match there's two options:
           ##    1) input is actually wrong and we should error;
@@ -723,17 +730,17 @@ endclassdef
 %! p = inputParser;
 %! p.addParameter ("foo", "bar", @ischar);
 %! p.parse ();
 %! assert (p.Results, struct ("foo", "bar"))
 %! p.parse ("foo", "qux");
 %! assert (p.Results, struct ("foo", "qux"))
 
 ## FIXME: This somehow works in Matlab
-%!xtest
+%!test <50752>
 %! p = inputParser;
 %! p.addOptional ("op1", "val");
 %! p.addParameter ("line", "tree");
 %! p.parse ("line", "circle");
 %! assert (p.Results, struct ("op1", "val", "line", "circle"));
 
 %!test
 %! p = inputParser;
