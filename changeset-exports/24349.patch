# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1511986117 18000
#      Wed Nov 29 15:08:37 2017 -0500
# Node ID 4ced2bfd737ee93c7a375347dada7d01e76e50a7
# Parent  64691264dd210d3b5437239eb6cfcd162e5b306d
deprecate defun_isargout functions

* pt-eval.h, pt-eval.cc (tree_evaluator::isargout): New functions,
adapted from defun_isargout.
(tree_evaluator::lvalue_list): Now const.
(tree_evaluator::ignored_fcn_outputs: Use lvalue_list.

* defun-int.h (defun_isargout): Mark as deprecated in 4.4.

* defun.cc (defun_isargout): Call tree_evaluator::isargout
to do the work.

diff --git a/libinterp/corefcn/defun-int.h b/libinterp/corefcn/defun-int.h
--- a/libinterp/corefcn/defun-int.h
+++ b/libinterp/corefcn/defun-int.h
@@ -98,25 +98,26 @@ namespace octave
   };
 }
 
 #if defined (OCTAVE_USE_DEPRECATED_FUNCTIONS)
 
 OCTAVE_DEPRECATED (4.4, "use 'octave::auto_shlib' instead")
 typedef octave::auto_shlib octave_auto_shlib;
 
-#endif
-
-
+OCTAVE_DEPRECATED (4.4, "use 'tree_evaluator::isargout' instead")
 extern OCTINTERP_API bool
 defun_isargout (int, int);
 
+OCTAVE_DEPRECATED (4.4, "use 'tree_evaluator::isargout' instead")
 extern OCTINTERP_API void
 defun_isargout (int, int, bool *);
 
+#endif
+
 #define FORWARD_DECLARE_FUNX(name)              \
   extern OCTAVE_EXPORT octave_value_list        \
   name (const octave_value_list&, int)
 
 #define FORWARD_DECLARE_METHODX(name)                           \
   extern OCTAVE_EXPORT octave_value_list                        \
   name (octave::interpreter&, const octave_value_list&, int)
 
diff --git a/libinterp/corefcn/defun.cc b/libinterp/corefcn/defun.cc
--- a/libinterp/corefcn/defun.cc
+++ b/libinterp/corefcn/defun.cc
@@ -208,60 +208,18 @@ get_current_shlib (void)
   return retval;
 }
 
 bool
 defun_isargout (int nargout, int iout)
 {
   octave::tree_evaluator& tw = octave::__get_evaluator__ ("defun_isargout");
 
-  const std::list<octave_lvalue> *lvalue_list = tw.lvalue_list ();
-
-  if (iout >= std::max (nargout, 1))
-    return false;
-  else if (lvalue_list)
-    {
-      int k = 0;
-      for (const auto& lval : *lvalue_list)
-        {
-          if (k == iout)
-            return ! lval.is_black_hole ();
-          k += lval.numel ();
-          if (k > iout)
-            break;
-        }
-
-      return true;
-    }
-  else
-    return true;
+  return tw.isargout (nargout, iout);
 }
 
 void
 defun_isargout (int nargout, int nout, bool *isargout)
 {
   octave::tree_evaluator& tw = octave::__get_evaluator__ ("defun_isargout");
 
-  const std::list<octave_lvalue> *lvalue_list = tw.lvalue_list ();
-
-  if (lvalue_list)
-    {
-      int k = 0;
-      for (const auto& lval : *lvalue_list)
-        {
-          if (lval.is_black_hole ())
-            isargout[k++] = false;
-          else
-            {
-              int l = std::min (k + lval.numel (),
-                                static_cast<octave_idx_type> (nout));
-              while (k < l)
-                isargout[k++] = true;
-            }
-        }
-    }
-  else
-    for (int i = 0; i < nout; i++)
-      isargout[i] = true;
-
-  for (int i = std::max (nargout, 1); i < nout; i++)
-    isargout[i] = false;
+  return tw.isargout (nargout, nout, isargout);
 }
diff --git a/libinterp/parse-tree/pt-eval.cc b/libinterp/parse-tree/pt-eval.cc
--- a/libinterp/parse-tree/pt-eval.cc
+++ b/libinterp/parse-tree/pt-eval.cc
@@ -434,48 +434,99 @@ namespace octave
     dbstep_flag = 0;
   }
 
   Matrix
   tree_evaluator::ignored_fcn_outputs (void) const
   {
     Matrix retval;
 
-    if (m_lvalue_list_stack.empty ())
-      return retval;
-
-    const std::list<octave_lvalue> *lvalue_list = m_lvalue_list_stack.top ();
-
-    if (! lvalue_list)
+    const std::list<octave_lvalue> *lvalues = lvalue_list ();
+
+    if (! lvalues)
       return retval;
 
     octave_idx_type nbh = 0;
 
-    for (const auto& lval : *lvalue_list)
+    for (const auto& lval : *lvalues)
       nbh += lval.is_black_hole ();
 
     if (nbh > 0)
       {
         retval.resize (1, nbh);
 
         octave_idx_type k = 0;
         octave_idx_type l = 0;
 
-        for (const auto& lval : *lvalue_list)
+        for (const auto& lval : *lvalues)
           {
             if (lval.is_black_hole ())
               retval(l++) = k+1;
 
             k += lval.numel ();
           }
       }
 
     return retval;
   }
 
+  bool
+  tree_evaluator::isargout (int nargout, int iout) const
+  {
+    const std::list<octave_lvalue> *lvalues = lvalue_list ();
+
+    if (iout >= std::max (nargout, 1))
+      return false;
+    else if (lvalues)
+      {
+        int k = 0;
+        for (const auto& lval : *lvalues)
+          {
+            if (k == iout)
+              return ! lval.is_black_hole ();
+            k += lval.numel ();
+            if (k > iout)
+              break;
+          }
+
+        return true;
+      }
+    else
+      return true;
+  }
+
+  void
+  tree_evaluator::isargout (int nargout, int nout, bool *isargout) const
+  {
+    const std::list<octave_lvalue> *lvalues = lvalue_list ();
+
+    if (lvalues)
+      {
+        int k = 0;
+        for (const auto& lval : *lvalues)
+          {
+            if (lval.is_black_hole ())
+              isargout[k++] = false;
+            else
+              {
+                int l = std::min (k + lval.numel (),
+                                  static_cast<octave_idx_type> (nout));
+                while (k < l)
+                  isargout[k++] = true;
+              }
+          }
+      }
+    else
+      for (int i = 0; i < nout; i++)
+        isargout[i] = true;
+
+    for (int i = std::max (nargout, 1); i < nout; i++)
+      isargout[i] = false;
+  }
+
   octave_value
   tree_evaluator::evaluate (tree_decl_elt *elt)
   {
     // Do not allow functions to return null values.
 
     tree_identifier *id = elt->ident ();
 
     return id ? evaluate (id).storable_value () : octave_value ();
diff --git a/libinterp/parse-tree/pt-eval.h b/libinterp/parse-tree/pt-eval.h
--- a/libinterp/parse-tree/pt-eval.h
+++ b/libinterp/parse-tree/pt-eval.h
@@ -254,19 +254,24 @@ namespace octave
     // The context for the current evaluation.
     static stmt_list_type statement_context;
 
     // TRUE means we are evaluating some kind of looping construct.
     static bool in_loop_command;
 
     Matrix ignored_fcn_outputs (void) const;
 
-    const std::list<octave_lvalue> * lvalue_list (void)
+    bool isargout (int nargout, int iout) const;
+
+    void isargout (int nargout, int nout, bool *isargout) const;
+
+    const std::list<octave_lvalue> * lvalue_list (void) const
     {
-      return m_lvalue_list_stack.empty () ? nullptr : m_lvalue_list_stack.top ();
+      return (m_lvalue_list_stack.empty ()
+              ? nullptr : m_lvalue_list_stack.top ());
     }
 
     octave_value evaluate (tree_expression *expr, int nargout = 1)
     {
       m_nargout_stack.push (nargout);
 
       expr->accept (*this);
 
