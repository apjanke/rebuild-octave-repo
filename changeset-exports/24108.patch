# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1506542199 14400
#      Wed Sep 27 15:56:39 2017 -0400
# Node ID 1a53f0c855db2cdc7c77d209ecac91a19872c631
# Parent  e250aeab3c85da520e14670f9559186a0d1c2a10
move some duplicate code into a separate function

* ov-fcn-handle.h, ov-fcn-handle.cc
(octave_fcn_handle::parse_anon_fcn_hanlde): New function.
(octave_fcn_handle::load_ascii, octave_fcn_handle::load_binary,
octave_fcn_handle::load_hdf5): Use it to eliminate duplicate code.

diff --git a/libinterp/octave-value/ov-fcn-handle.cc b/libinterp/octave-value/ov-fcn-handle.cc
--- a/libinterp/octave-value/ov-fcn-handle.cc
+++ b/libinterp/octave-value/ov-fcn-handle.cc
@@ -380,16 +380,53 @@ octave_fcn_handle::save_ascii (std::ostr
         os << "# path: " << fnm << "\n";
       os << nm << "\n";
     }
 
   return true;
 }
 
 bool
+octave_fcn_handle::parse_anon_fcn_handle (const std::string& fcn_text)
+{
+  bool success = true;
+
+  int parse_status;
+
+  octave_value anon_fcn_handle =
+    octave::eval_string (fcn_text, true, parse_status);
+
+  if (parse_status == 0)
+    {
+      octave_fcn_handle *fh = anon_fcn_handle.fcn_handle_value ();
+
+      if (fh)
+        {
+          fcn = fh->fcn;
+
+          octave_user_function *uf = fcn.user_function_value (true);
+
+          if (uf)
+            {
+              octave::symbol_table::scope *uf_scope = uf->scope ();
+
+              if (uf_scope)
+                uf_scope->cache_name (nm);
+            }
+        }
+      else
+        success = false;
+    }
+  else
+    success = false;
+
+  return success;
+}
+
+bool
 octave_fcn_handle::load_ascii (std::istream& is)
 {
   bool success = true;
 
   std::streampos pos = is.tellg ();
   std::string octaveroot = extract_keyword (is, "octaveroot", true);
   if (octaveroot.empty ())
     {
@@ -464,46 +501,17 @@ octave_fcn_handle::load_ascii (std::istr
         }
       else
         {
           is.seekg (pos);
           is.clear ();
         }
 
       if (is && success)
-        {
-          int parse_status;
-          octave_value anon_fcn_handle =
-            octave::eval_string (buf, true, parse_status);
-
-          if (parse_status == 0)
-            {
-              octave_fcn_handle *fh =
-                anon_fcn_handle.fcn_handle_value ();
-
-              if (fh)
-                {
-                  fcn = fh->fcn;
-
-                  octave_user_function *uf = fcn.user_function_value (true);
-
-                  if (uf)
-                    {
-                      octave::symbol_table::scope *uf_scope = uf->scope ();
-
-                      if (uf_scope)
-                        uf_scope->cache_name (nm);
-                    }
-                }
-              else
-                success = false;
-            }
-          else
-            success = false;
-        }
+        success = parse_anon_fcn_handle (buf);
       else
         success = false;
     }
   else
     success = set_fcn (octaveroot, fpath);
 
   return success;
 }
@@ -651,45 +659,19 @@ octave_fcn_handle::load_binary (std::ist
               if (! is)
                 error ("load: failed to load anonymous function handle");
 
               local_scope.force_assign (name, t2);
             }
         }
 
       if (is && success)
-        {
-          int parse_status;
-          octave_value anon_fcn_handle
-            = octave::eval_string (ctmp2, true, parse_status);
-
-          if (parse_status == 0)
-            {
-              octave_fcn_handle *fh = anon_fcn_handle.fcn_handle_value ();
-
-              if (fh)
-                {
-                  fcn = fh->fcn;
-
-                  octave_user_function *uf = fcn.user_function_value (true);
-
-                  if (uf)
-                    {
-                      octave::symbol_table::scope *uf_scope = uf->scope ();
-
-                      if (uf_scope)
-                        uf_scope->cache_name (nm);
-                    }
-                }
-              else
-                success = false;
-            }
-          else
-            success = false;
-        }
+        success = parse_anon_fcn_handle (ctmp2);
+      else
+        success = false;
     }
   else
     {
       std::string octaveroot;
       std::string fpath;
 
       if (nm.find_first_of ('\n') != std::string::npos)
         {
@@ -1186,45 +1168,17 @@ octave_fcn_handle::load_hdf5 (octave_hdf
                                     &dsub) <= 0)
                 error ("load: failed to load anonymous function handle");
 
               local_scope.force_assign (dsub.name, dsub.tc);
             }
         }
 
       if (success)
-        {
-          int parse_status;
-          octave_value anon_fcn_handle
-            = octave::eval_string (fcn_tmp, true, parse_status);
-
-          if (parse_status == 0)
-            {
-              octave_fcn_handle *fh = anon_fcn_handle.fcn_handle_value ();
-
-              if (fh)
-                {
-                  fcn = fh->fcn;
-
-                  octave_user_function *uf = fcn.user_function_value (true);
-
-                  if (uf)
-                    {
-                      octave::symbol_table::scope *uf_scope = uf->scope ();
-
-                      if (uf_scope)
-                        uf_scope->cache_name (nm);
-                    }
-                }
-              else
-                success = false;
-            }
-          else
-            success = false;
-        }
+        success = parse_anon_fcn_handle (fcn_tmp);
 
       frame.run ();
     }
   else
     {
       std::string octaveroot;
       std::string fpath;
 
diff --git a/libinterp/octave-value/ov-fcn-handle.h b/libinterp/octave-value/ov-fcn-handle.h
--- a/libinterp/octave-value/ov-fcn-handle.h
+++ b/libinterp/octave-value/ov-fcn-handle.h
@@ -169,16 +169,18 @@ protected:
   bool has_overloads;
 
   // Overloads for builtin types.  We use array to make lookup faster.
   octave_value builtin_overloads[btyp_num_types];
 
   // Overloads for other classes.
   str_ov_map overloads;
 
+  bool parse_anon_fcn_handle (const std::string& fcn_text);
+
   virtual octave_value_list call (int nargout, const octave_value_list& args);
 
   friend octave_value make_fcn_handle (const std::string &, bool);
 };
 
 extern octave_value make_fcn_handle (const std::string& nm,
                                      bool local_funcs = true);
 
