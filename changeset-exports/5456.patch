# HG changeset patch
# User jwe
# Date 1127156561 0
#      Mon Sep 19 19:02:41 2005 +0000
# Node ID f315234695b114b93b1cdcdc5e531bfce513033c
# Parent  ec44bd0917fe6f9d594d0448b9b93611fa94d337
[project @ 2005-09-19 19:02:41 by jwe]

diff --git a/src/utils.cc b/src/utils.cc
--- a/src/utils.cc
+++ b/src/utils.cc
@@ -286,17 +286,17 @@ If no file is found, return an empty mat
 If the first argument is a cell array of strings, search each\n\
 directory of the loadpath for element of the cell array and return\n\
 the first that matches.\n\
 \n\
 If the second optional argument @code{\"all\"} is supplied, return\n\
 a cell array containing the list of all files that have the same\n\
 name in the path.  If no files are found, return an empty cell array.\n\
 @end deftypefn\n\
-@seealso{file_in_path}")
+@seealso{file_in_path, LOADPATH}")
 {
   octave_value retval;
 
   int nargin = args.length ();
 
   if (nargin == 1 || nargin == 2)
     {
       string_vector names = args(0).all_strings ();
@@ -339,27 +339,32 @@ DEFUN (file_in_path, args, ,
 @deftypefnx {Built-in Function} {} file_in_path (@var{path}, @var{file}, \"all\")\n\
 Return the absolute name of @var{file} if it can be found in\n\
 @var{path}.  The value of @var{path} should be a colon-separated list of\n\
 directories in the format described for the built-in variable\n\
 @code{LOADPATH}.  If no file is found, return an empty matrix.\n\
 For example,\n\
 \n\
 @example\n\
-file_in_path (LOADPATH, \"nargchk.m\")\n\
-     @result{} \"@value{OCTAVEHOME}/share/octave/2.0/m/general/nargchk.m\"\n\
+file_in_path (EXEC_PATH, \"sh\")\n\
+     @result{} \"/bin/sh\"\n\
 @end example\n\
 \n\
 If the second argument is a cell array of strings, search each\n\
 directory of the path for element of the cell array and return\n\
 the first that matches.\n\
 \n\
 If the third optional argument @code{\"all\"} is supplied, return\n\
 a cell array containing the list of all files that have the same\n\
 name in the path.  If no files are found, return an empty cell array.\n\
+\n\
+Note that @code{file_in_path} does not expand leading, trailing, 
+or doubled colons the way that @code{file_in_loadpath} does.  See\n\
+also @xref{LOADPATH}, for an explanation of how colon expansion\n\
+is applied to @code{LOADPATH}.\n\
 @seealso{file_in_loadpath}\n\
 @end deftypefn")
 {
   octave_value retval;
 
   int nargin = args.length ();
 
   if (nargin == 2 || nargin == 3)
