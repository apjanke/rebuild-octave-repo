# HG changeset patch
# User Rik <octave@nomad.inbox5.com>
# Date 1340125501 25200
#      Tue Jun 19 10:05:01 2012 -0700
# Node ID e190f6da40f6939c7762252ac27a99361295dcad
# Parent  1d83d1539b2b696388367ba15da6d4dc8a2e1b70
maint: Correct comments and use Octave spacing conventions for erfinv.

lo-specfun.cc (do_erfinv): Correct comment about Halley's 3rd order method.
Use space between function call and open parenthesis.

diff --git a/liboctave/lo-specfun.cc b/liboctave/lo-specfun.cc
--- a/liboctave/lo-specfun.cc
+++ b/liboctave/lo-specfun.cc
@@ -3147,17 +3147,17 @@ FloatComplex rc_log1p (float x)
 {
   const float pi = 3.14159265358979323846f;
   return x < -1.0f ? FloatComplex (logf (-(1.0f + x)), pi) : FloatComplex (log1pf (x));
 }
 
 // This algorithm is due to P. J. Acklam.
 // See http://home.online.no/~pjacklam/notes/invnorm/
 // The rational approximation has relative accuracy 1.15e-9 in the whole region.
-// For doubles, it is refined by a single step of Higham's 3rd order method.
+// For doubles, it is refined by a single step of Halley's 3rd order method.
 // For single precision, the accuracy is already OK, so we skip it to get
 // faster evaluation.
 
 static double do_erfinv (double x, bool refine)
 {
   // Coefficients of rational approximation.
   static const double a[] =
     { -2.806989788730439e+01,  1.562324844726888e+02,
@@ -3170,17 +3170,17 @@ static double do_erfinv (double x, bool 
   static const double c[] =
     { -5.504751339936943e-03, -2.279687217114118e-01,
       -1.697592457770869e+00, -1.802933168781950e+00,
        3.093354679843505e+00,  2.077595676404383e+00 };
   static const double d[] =
     {  7.784695709041462e-03,  3.224671290700398e-01,
        2.445134137142996e+00,  3.754408661907416e+00 };
 
-  static const double spi2 =  8.862269254527579e-01; // sqrt(pi)/2.
+  static const double spi2 = 8.862269254527579e-01; // sqrt(pi)/2.
   static const double pbreak = 0.95150;
   double ax = fabs (x), y;
 
   // Select case.
   if (ax <= pbreak)
     {
       // Middle region.
       const double q = 0.5 * x, r = q*q;
@@ -3199,17 +3199,17 @@ static double do_erfinv (double x, bool 
   else if (ax == 1.0)
     return octave_Inf * signum (x);
   else
     return octave_NaN;
 
   if (refine)
     {
       // One iteration of Halley's method gives full precision.
-      double u = (erf(y) - x) * spi2 * exp (y*y);
+      double u = (erf (y) - x) * spi2 * exp (y*y);
       y -= u / (1 + y*u);
     }
 
   return y;
 }
 
 double erfinv (double x)
 {
