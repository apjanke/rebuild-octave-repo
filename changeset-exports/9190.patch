# HG changeset patch
# User Robert T. Short <rtshort@ieee.org>
# Date 1241810302 14400
#      Fri May 08 15:18:22 2009 -0400
# Node ID 7a10410db2c68858f81bfdc7f94df6e57c25744b
# Parent  8a348e4be8bb0cf35f168383ade8be179abda602
[mq]: x

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,17 @@
+2009-05-07  Robert T. Short  <octave@phaselockedsystems.com>
+
+	* ov-class.h, ov-class.cc (octave_class::reconstruct_exemplar):
+	New function.
+	* ov-class.cc (octave_class::load_binary, octave_class::load_hdf5,
+	octave_class::load_ascii): Construct exemplar table and ensure
+	inheritance is correct.
+        * ov-struct.cc (struct): Return struct from object.
+
 2009-05-07  John W. Eaton  <jwe@octave.org>
 
 	* graphics.h.in (base_graphics_object::set): Undo previous change.
 	(base_properties::set (const caseless_str&, const octave_value&):
 	New virtual function.
 	(base_properties::set (const caseless_str&, const std::string&,
 	const octave_value&)): No longer virtual.
 
diff --git a/src/ov-class.cc b/src/ov-class.cc
--- a/src/ov-class.cc
+++ b/src/ov-class.cc
@@ -808,16 +808,49 @@ octave_class::print_with_name (std::ostr
       arg_names[0] = name;
 
       args.stash_name_tags (arg_names);
 
       feval (fcn.function_value (), args);
     }
 }
 
+// Loading a class properly requires an exemplar map entry for success.
+// If we don't have one, we attempt to create one by calling the constructor 
+// with no arguments.
+bool
+octave_class::reconstruct_exemplar (void)
+{
+  bool retval = false;
+
+  octave_class::exemplar_const_iterator it
+    = octave_class::exemplar_map.find (c_name);
+
+  if (it != octave_class::exemplar_map.end ())
+    retval = true;
+  else
+    {
+      octave_value ctor = symbol_table::find_method (c_name, c_name);
+
+      if (ctor.is_defined ())
+	{
+	  octave_value_list result = feval (ctor, 1);
+
+	  if (result.length () == 1)
+	    retval = true;
+	  else
+	    warning ("call to constructor for class %s failed", c_name.c_str ());
+	}
+      else
+	warning ("no constructor for class %s", c_name.c_str ());
+    }
+
+  return retval;
+}
+
 //  Load/save does not provide enough information to reconstruct the
 //  class inheritance structure.  reconstruct_parents () attempts to
 //  do so.  If successful, a "true" value is returned.
 //
 //  Note that we don't check the loaded object structure against the
 //  class structure here so the user's loadobj method has a chance
 //  to do its magic.
 bool
@@ -942,29 +975,36 @@ octave_class::load_ascii (std::istream& 
 		      return false;
 		    }
 
 		  m.assign (nm, tcell);
 		}
 
 	      if (is) 
 		{
-		  map = m;
 		  c_name = classname;
+		  reconstruct_exemplar ();
 
-		  if (load_path::find_method (classname, "loadobj")
-		      != std::string ())
+		  map = m;
+		  
+		  if (! reconstruct_parents ())
+		    warning ("load: unable to reconstruct object inheritance");
+		  else
 		    {
-		      octave_value in = new octave_class (*this);
-		      octave_value_list tmp = feval ("loadobj", in, 1);
+		      if (load_path::find_method (classname, "loadobj")
+			  != std::string ())
+			{
+			  octave_value in = new octave_class (*this);
+			  octave_value_list tmp = feval ("loadobj", in, 1);
 
-		      if (! error_state)
-			map = tmp(0).map_value ();
-		      else
-			success = false;
+			  if (! error_state)
+			    map = tmp(0).map_value ();
+			  else
+			    success = false;
+			}
 		    }
 		}
 	      else
 		{
 		  error ("load: failed to load class");
 		  success = false;
 		}
 	    }
@@ -1047,16 +1087,17 @@ octave_class::load_binary (std::istream&
 
   {
     OCTAVE_LOCAL_BUFFER (char, classname, classname_len+1);
     classname[classname_len] = '\0';
     if (! is.read (reinterpret_cast<char *> (classname), classname_len))
       return false;
     c_name = classname;
   }
+  reconstruct_exemplar ();
 
   int32_t len;
   if (! is.read (reinterpret_cast<char *> (&len), 4))
     return false;
   if (swap)
     swap_bytes<4> (&len);
 
   if (len > 0)
@@ -1087,34 +1128,34 @@ octave_class::load_binary (std::istream&
 	  m.assign (nm, tcell);
 	}
 
       if (is) 
 	{
 	  map = m;
 
 	  if (! reconstruct_parents ())
-	    error ("load: unable to reconstruct object inheritance");
+	    warning ("load: unable to reconstruct object inheritance");
 	  else
 	    {
 	      if (load_path::find_method (c_name, "loadobj") != std::string ())
 		{
 		  octave_value in = new octave_class (*this);
 		  octave_value_list tmp = feval ("loadobj", in, 1);
 
 		  if (! error_state)
 		    map = tmp(0).map_value ();
 		  else
 		    success = false;
 		}
 	    }
 	}
       else
 	{
-	  error ("load: failed to load class");
+	  warning ("load: failed to load class");
 	  success = false;
 	}
     }
   else if (len == 0 )
     map = Octave_map (dim_vector (1, 1));
   else
     panic_impossible ();
 
@@ -1276,16 +1317,17 @@ octave_class::load_hdf5 (hid_t loc_id, c
      
       H5Tclose (st_id);
       H5Dclose (data_hid);
       data_hid = -1;
 
       c_name = classname;
     }
   while (0);
+  reconstruct_exemplar ();
 
 
 #ifdef HAVE_H5GGET_NUM_OBJS
   subgroup_hid = H5Gopen (group_hid, name); 
   H5Gget_num_objs (subgroup_hid, &num_obj);
   H5Gclose (subgroup_hid);
 
   while (current_item < static_cast<int> (num_obj)
@@ -1312,17 +1354,17 @@ octave_class::load_hdf5 (hid_t loc_id, c
 	current_item++;  // H5Giterate returned the last index processed
     }
 
   if (retval2 >= 0)
     {
       map = m;
 
       if (!reconstruct_parents ())
-	error ("load: unable to reconstruct object inheritance");
+	warning ("load: unable to reconstruct object inheritance");
       else
 	{
 	  if (load_path::find_method (c_name, "loadobj") != std::string ())
 	    {
 	      octave_value in = new octave_class (*this);
 	      octave_value_list tmp = feval ("loadobj", in, 1);
 
 	      if (! error_state)
diff --git a/src/ov-class.h b/src/ov-class.h
--- a/src/ov-class.h
+++ b/src/ov-class.h
@@ -139,16 +139,18 @@ public:
 
   void print_raw (std::ostream& os, bool pr_as_read_syntax = false) const;
 
   bool print_name_tag (std::ostream& os, const std::string& name) const;
 
   void print_with_name (std::ostream& os, const std::string& name, 
 			bool print_padding = true) const;
 
+  bool reconstruct_exemplar (void);
+
   bool reconstruct_parents (void);
 
   bool save_ascii (std::ostream& os);
 
   bool load_ascii (std::istream& is);
 
   bool save_binary (std::ostream& os, bool& save_as_floats);
 
diff --git a/src/ov-struct.cc b/src/ov-struct.cc
--- a/src/ov-struct.cc
+++ b/src/ov-struct.cc
@@ -696,30 +696,40 @@ DEFUN (struct, args, ,
 \n\
 Create a structure and initialize its value.\n\
 \n\
 If the values are cell arrays, create a structure array and initialize\n\
 its values.  The dimensions of each cell array of values must match.\n\
 Singleton cells and non-cell values are repeated so that they fill\n\
 the entire array.  If the cells are empty, create an empty structure\n\
 array with the specified field names.\n\
+\n\
+If the argument is an object, return the underlying struct.\n\
 @end deftypefn")
 {
   octave_value retval;
 
   int nargin = args.length ();
 
   // struct ([]) returns an empty struct.
 
   // struct (empty_matrix) returns an empty struct with the same
   // dimensions as the empty matrix.
 
   // Note that struct () creates a 1x1 struct with no fields for
   // compatibility with Matlab.
 
+  if (nargin == 1 && args(0).is_object ())
+    {
+      Octave_map m = args(0).map_value ();
+      retval = octave_value (new octave_struct (m));
+
+      return retval;
+    }
+
   if ((nargin == 1 || nargin == 2)
       && args(0).is_empty () && args(0).is_real_matrix ())
     {
       Cell fields;
 
       if (nargin == 2)
 	{
 	  if (args(1).is_cellstr ())
