# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1282132936 -7200
#      Wed Aug 18 14:02:16 2010 +0200
# Node ID b64803a8be4e54f5885ed9843b4aad7b2d28070c
# Parent  686e3bc432a29dd3837e0d5ca4e2497e3dfd11e1
optimize element-wise sparse-dense multiplication and division

diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,19 @@
+2010-08-18  Jaroslav Hajek  <highegg@gmail.com>
+
+	* mx-inlines.cc (mx_inline_all_finite): New check.
+	* Sparse-op-defs.h (SPARSE_SMS_BIN_OP_1, SPARSE_SMS_BIN_OP_2,
+	SPARSE_SSM_BIN_OP_1, SPARSE_SSM_BIN_OP_2): Use unchecked access where
+	appropriate.
+	(SPARSE_SMM_BIN_OP_1, SPARSE_MSM_BIN_OP_1): Simplify.
+	(SPARSE_SMM_BIN_OP_2, SPARSE_MSM_BIN_OP_2): Use optimized code path
+	if all values are finite.
+	(SPARSE_MSM_BIN_OPS): Use SPARSE_MSM_BIN_OP_1 for division.
+
 2010-07-31  Rik <octave@nomad.inbox5.com>
 
 	* DASPK-opts.in, DASRT-opts.in, DASSL-opts.in, LSODE-opts.in, 
 	  Quad-opts.in: Grammarcheck .cc files
 
 2010-07-29  Jaroslav Hajek  <highegg@gmail.com>
 
 	* dim-vector.cc (dim_vector::dim_max (void)): Turn it into a function.
diff --git a/liboctave/Sparse-op-defs.h b/liboctave/Sparse-op-defs.h
--- a/liboctave/Sparse-op-defs.h
+++ b/liboctave/Sparse-op-defs.h
@@ -23,16 +23,17 @@ along with Octave; see the file COPYING.
 */
 
 #if !defined (octave_sparse_op_defs_h)
 #define octave_sparse_op_defs_h 1
 
 #include "Array-util.h"
 #include "mx-ops.h"
 #include "oct-locbuf.h"
+#include "mx-inlines.cc"
 
 #define SPARSE_BIN_OP_DECL(R, OP, X, Y, API) \
   extern API R OP (const X&, const Y&)
 
 #define SPARSE_CMP_OP_DECL(OP, X, Y, API) \
   extern API SparseBoolMatrix OP (const X&, const Y&)
 
 #define SPARSE_BOOL_OP_DECL(OP, X, Y, API) \
@@ -52,37 +53,37 @@ along with Octave; see the file COPYING.
   { \
     octave_idx_type nr = m.rows (); \
     octave_idx_type nc = m.cols (); \
  \
     R r (nr, nc, (0.0 OP s)); \
  \
     for (octave_idx_type j = 0; j < nc; j++) \
       for (octave_idx_type i = m.cidx (j); i < m.cidx (j+1); i++) \
-        r.elem (m.ridx (i), j) = m.data (i) OP s; \
+        r.xelem (m.ridx (i), j) = m.data (i) OP s; \
     return r; \
   }
 
 #define SPARSE_SMS_BIN_OP_2(R, F, OP, M, S)     \
   R \
   F (const M& m, const S& s) \
   { \
     octave_idx_type nr = m.rows (); \
     octave_idx_type nc = m.cols (); \
     octave_idx_type nz = m.nnz (); \
  \
     R r (nr, nc, nz); \
  \
     for (octave_idx_type i = 0; i < nz; i++) \
       { \
-        r.data(i) = m.data(i) OP s; \
-        r.ridx(i) = m.ridx(i); \
+        r.xdata(i) = m.data(i) OP s; \
+        r.xridx(i) = m.ridx(i); \
       } \
     for (octave_idx_type i = 0; i < nc + 1; i++) \
-      r.cidx(i) = m.cidx(i); \
+      r.xcidx(i) = m.cidx(i); \
     \
     r.maybe_compress (true); \
     return r; \
   }
 
 #define SPARSE_SMS_BIN_OPS(R1, R2, M, S) \
   SPARSE_SMS_BIN_OP_1 (R1, operator +, +, M, S) \
   SPARSE_SMS_BIN_OP_1 (R1, operator -, -, M, S) \
@@ -220,38 +221,38 @@ along with Octave; see the file COPYING.
   { \
     octave_idx_type nr = m.rows (); \
     octave_idx_type nc = m.cols (); \
  \
     R r (nr, nc, (s OP 0.0)); \
  \
     for (octave_idx_type j = 0; j < nc; j++) \
       for (octave_idx_type i = m.cidx (j); i < m.cidx (j+1); i++) \
-        r.elem (m.ridx (i), j) = s OP m.data (i); \
+        r.xelem (m.ridx (i), j) = s OP m.data (i); \
  \
     return r; \
   }
 
 #define SPARSE_SSM_BIN_OP_2(R, F, OP, S, M) \
   R \
   F (const S& s, const M& m) \
   { \
     octave_idx_type nr = m.rows (); \
     octave_idx_type nc = m.cols (); \
     octave_idx_type nz = m.nnz (); \
  \
     R r (nr, nc, nz); \
  \
     for (octave_idx_type i = 0; i < nz; i++) \
       { \
-        r.data(i) = s OP m.data(i); \
-        r.ridx(i) = m.ridx(i); \
+        r.xdata(i) = s OP m.data(i); \
+        r.xridx(i) = m.ridx(i); \
       } \
     for (octave_idx_type i = 0; i < nc + 1; i++) \
-      r.cidx(i) = m.cidx(i); \
+      r.xcidx(i) = m.cidx(i); \
  \
     r.maybe_compress(true); \
     return r; \
   }
 
 #define SPARSE_SSM_BIN_OPS(R1, R2, S, M) \
   SPARSE_SSM_BIN_OP_1 (R1, operator +, +, S, M) \
   SPARSE_SSM_BIN_OP_1 (R1, operator -, -, S, M) \
@@ -1090,26 +1091,22 @@ along with Octave; see the file COPYING.
     octave_idx_type m2_nc = m2.cols (); \
  \
     if (m2_nr == 1 && m2_nc == 1) \
       r = R (m1 OP m2.elem(0,0)); \
     else if (m1_nr != m2_nr || m1_nc != m2_nc) \
       gripe_nonconformant (#F, m1_nr, m1_nc, m2_nr, m2_nc); \
     else \
       { \
-        r = R (m1_nr, m1_nc); \
-        \
-        for (octave_idx_type j = 0; j < m1_nc; j++) \
-          for (octave_idx_type i = 0; i < m1_nr; i++) \
-            r.elem (i, j) = m1.elem (i, j) OP m2.elem (i, j); \
+        r = R (F (m1, m2.matrix_value ())); \
       } \
     return r; \
   }
 
-#define SPARSE_MSM_BIN_OP_2(R, F, OP, M1, M2, ZERO) \
+#define SPARSE_MSM_BIN_OP_2(R, F, OP, M1, M2) \
   R \
   F (const M1& m1, const M2& m2) \
   { \
     R r; \
  \
     octave_idx_type m1_nr = m1.rows (); \
     octave_idx_type m1_nc = m1.cols (); \
  \
@@ -1117,50 +1114,53 @@ along with Octave; see the file COPYING.
     octave_idx_type m2_nc = m2.cols (); \
  \
     if (m2_nr == 1 && m2_nc == 1) \
       r = R (m1 OP m2.elem(0,0)); \
     else if (m1_nr != m2_nr || m1_nc != m2_nc) \
       gripe_nonconformant (#F, m1_nr, m1_nc, m2_nr, m2_nc); \
     else \
       { \
-        /* Count num of non-zero elements */ \
-        octave_idx_type nel = 0; \
-        for (octave_idx_type j = 0; j < m1_nc; j++) \
-          for (octave_idx_type i = 0; i < m1_nr; i++) \
-            if ((m1.elem(i, j) OP m2.elem(i, j)) != ZERO) \
-              nel++; \
-        \
-        r = R (m1_nr, m1_nc, nel); \
-        \
-        octave_idx_type ii = 0; \
-        r.cidx (0) = 0; \
-        for (octave_idx_type j = 0 ; j < m1_nc ; j++) \
+        if (do_mx_check (m1, mx_inline_all_finite)) \
           { \
-            for (octave_idx_type i = 0 ; i < m1_nr ; i++)       \
+            /* Sparsity pattern is preserved. */ \
+            octave_idx_type m2_nz = m2.nnz (); \
+            r = R (m2_nr, m2_nc, m2_nz); \
+            for (octave_idx_type j = 0, k = 0; j < m2_nc; j++) \
               { \
-                if ((m1.elem(i, j) OP m2.elem(i, j)) != ZERO) \
+                octave_quit (); \
+                for (octave_idx_type i = m2.cidx(j); i < m2.cidx(j+1); i++) \
                   { \
-                    r.data (ii) = m1.elem(i, j) OP m2.elem(i,j); \
-                    r.ridx (ii++) = i; \
+                    octave_idx_type mri = m2.ridx(i); \
+                    R::element_type x = m1(mri, j) OP m2.data(i); \
+                    if (x != 0.0) \
+                      { \
+                        r.xdata(k) = x; \
+                        r.xridx(k) = m2.ridx(i); \
+                        k++; \
+                      } \
                   } \
+                r.xcidx(j+1) = k; \
               } \
-            r.cidx(j+1) = ii; \
+            r.maybe_compress (false); \
+            return r; \
           } \
+        else \
+          r = R (F (m1, m2.matrix_value ())); \
       } \
  \
     return r; \
   }
 
 // FIXME Pass a specific ZERO value
 #define SPARSE_MSM_BIN_OPS(R1, R2, M1, M2) \
   SPARSE_MSM_BIN_OP_1 (R1, operator +,  +, M1, M2) \
   SPARSE_MSM_BIN_OP_1 (R1, operator -,  -, M1, M2) \
-  SPARSE_MSM_BIN_OP_2 (R2, product,     *, M1, M2, 0.0) \
-  SPARSE_MSM_BIN_OP_2 (R2, quotient,    /, M1, M2, 0.0)
+  SPARSE_MSM_BIN_OP_2 (R2, product,     *, M1, M2) \
+  SPARSE_MSM_BIN_OP_1 (R2, quotient,    /, M1, M2)
 
 #define SPARSE_MSM_CMP_OP_DECLS(M1, M2, API) \
   SPARSE_CMP_OP_DECL (mx_el_lt, M1, M2, API); \
   SPARSE_CMP_OP_DECL (mx_el_le, M1, M2, API); \
   SPARSE_CMP_OP_DECL (mx_el_ge, M1, M2, API); \
   SPARSE_CMP_OP_DECL (mx_el_gt, M1, M2, API); \
   SPARSE_CMP_OP_DECL (mx_el_eq, M1, M2, API); \
   SPARSE_CMP_OP_DECL (mx_el_ne, M1, M2, API);
@@ -1324,26 +1324,30 @@ along with Octave; see the file COPYING.
     octave_idx_type m2_nc = m2.cols (); \
  \
     if (m1_nr == 1 && m1_nc == 1) \
       r = R (m1.elem(0,0) OP m2); \
     else if (m1_nr != m2_nr || m1_nc != m2_nc) \
       gripe_nonconformant (#F, m1_nr, m1_nc, m2_nr, m2_nc); \
     else \
       { \
-        r = R (m1_nr, m1_nc); \
-        \
-        for (octave_idx_type j = 0; j < m1_nc; j++) \
-          for (octave_idx_type i = 0; i < m1_nr; i++) \
-            r.elem (i, j) = m1.elem (i, j) OP m2.elem (i, j); \
+        r = R (m1.matrix_value () OP m2); \
       } \
     return r; \
   }
 
-#define SPARSE_SMM_BIN_OP_2(R, F, OP, M1, M2, ZERO) \
+// sm .* m preserves sparsity if m contains no Infs nor Nans.
+#define SPARSE_SMM_BIN_OP_2_CHECK_product \
+  do_mx_check (m2, mx_inline_all_finite)
+
+// sm ./ m preserves sparsity if m contains no NaNs or zeros.
+#define SPARSE_SMM_BIN_OP_2_CHECK_quotient \
+  ! do_mx_check (m2, mx_inline_any_nan) && m2.nnz () == m2.numel ()
+
+#define SPARSE_SMM_BIN_OP_2(R, F, OP, M1, M2) \
   R \
   F (const M1& m1, const M2& m2) \
   { \
     R r; \
  \
     octave_idx_type m1_nr = m1.rows (); \
     octave_idx_type m1_nc = m1.cols (); \
  \
@@ -1351,50 +1355,52 @@ along with Octave; see the file COPYING.
     octave_idx_type m2_nc = m2.cols (); \
  \
     if (m1_nr == 1 && m1_nc == 1) \
       r = R (m1.elem(0,0) OP m2); \
     else if (m1_nr != m2_nr || m1_nc != m2_nc) \
       gripe_nonconformant (#F, m1_nr, m1_nc, m2_nr, m2_nc); \
     else \
       { \
-        /* Count num of non-zero elements */ \
-        octave_idx_type nel = 0; \
-        for (octave_idx_type j = 0; j < m1_nc; j++) \
-          for (octave_idx_type i = 0; i < m1_nr; i++) \
-            if ((m1.elem(i, j) OP m2.elem(i, j)) != ZERO) \
-              nel++; \
-        \
-        r = R (m1_nr, m1_nc, nel); \
-        \
-        octave_idx_type ii = 0; \
-        r.cidx (0) = 0; \
-        for (octave_idx_type j = 0 ; j < m1_nc ; j++) \
+        if (SPARSE_SMM_BIN_OP_2_CHECK_ ## F) \
           { \
-            for (octave_idx_type i = 0 ; i < m1_nr ; i++)       \
+            /* Sparsity pattern is preserved. */ \
+            octave_idx_type m1_nz = m1.nnz (); \
+            r = R (m1_nr, m1_nc, m1_nz); \
+            for (octave_idx_type j = 0, k = 0; j < m1_nc; j++) \
               { \
-                if ((m1.elem(i, j) OP m2.elem(i, j)) != ZERO) \
+                octave_quit (); \
+                for (octave_idx_type i = m1.cidx(j); i < m1.cidx(j+1); i++) \
                   { \
-                    r.data (ii) = m1.elem(i, j) OP m2.elem(i,j); \
-                    r.ridx (ii++) = i; \
+                    octave_idx_type mri = m1.ridx(i); \
+                    R::element_type x = m1.data(i) OP m2(mri, j); \
+                    if (x != 0.0) \
+                      { \
+                        r.xdata(k) = x; \
+                        r.xridx(k) = m1.ridx(i); \
+                        k++; \
+                      } \
                   } \
+                r.xcidx(j+1) = k; \
               } \
-            r.cidx(j+1) = ii; \
+            r.maybe_compress (false); \
+            return r; \
           } \
+        else \
+          r = R (F (m1.matrix_value (), m2)); \
       } \
  \
     return r; \
   }
 
-// FIXME Pass a specific ZERO value
 #define SPARSE_SMM_BIN_OPS(R1, R2, M1, M2) \
   SPARSE_SMM_BIN_OP_1 (R1, operator +,  +, M1, M2) \
   SPARSE_SMM_BIN_OP_1 (R1, operator -,  -, M1, M2) \
-  SPARSE_SMM_BIN_OP_2 (R2, product,     *, M1, M2, 0.0) \
-  SPARSE_SMM_BIN_OP_2 (R2, quotient,    /, M1, M2, 0.0)
+  SPARSE_SMM_BIN_OP_2 (R2, product,     *, M1, M2) \
+  SPARSE_SMM_BIN_OP_2 (R2, quotient,    /, M1, M2)
 
 #define SPARSE_SMM_CMP_OP_DECLS(M1, M2, API) \
   SPARSE_CMP_OP_DECL (mx_el_lt, M1, M2, API); \
   SPARSE_CMP_OP_DECL (mx_el_le, M1, M2, API); \
   SPARSE_CMP_OP_DECL (mx_el_ge, M1, M2, API); \
   SPARSE_CMP_OP_DECL (mx_el_gt, M1, M2, API); \
   SPARSE_CMP_OP_DECL (mx_el_eq, M1, M2, API); \
   SPARSE_CMP_OP_DECL (mx_el_ne, M1, M2, API);
diff --git a/liboctave/mx-inlines.cc b/liboctave/mx-inlines.cc
--- a/liboctave/mx-inlines.cc
+++ b/liboctave/mx-inlines.cc
@@ -180,16 +180,29 @@ mx_inline_any_nan (size_t n, const T* x)
     {
       if (xisnan (x[i]))
         return true;
     }
 
   return false;
 }
 
+template <class T>
+inline bool
+mx_inline_all_finite (size_t n, const T* x)  throw ()
+{
+  for (size_t i = 0; i < n; i++)
+    {
+      if (! xfinite (x[i]))
+        return false;
+    }
+
+  return true;
+}
+
 template <class T> 
 inline bool 
 mx_inline_any_negative (size_t n, const T* x) throw () 
 {
   for (size_t i = 0; i < n; i++)
     {
       if (x[i] < 0)
         return true;
