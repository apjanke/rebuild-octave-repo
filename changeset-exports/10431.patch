# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1269255933 -3600
#      Mon Mar 22 12:05:33 2010 +0100
# Node ID 5dd7a7bf4950093162908d619ac492ec77ba652a
# Parent  f1567b3e11089f35f028f2f5484391f4b10c6d01
simplify sparse->full conversions in liboctave

diff --git a/liboctave/CSparse.cc b/liboctave/CSparse.cc
--- a/liboctave/CSparse.cc
+++ b/liboctave/CSparse.cc
@@ -629,25 +629,17 @@ SparseComplexMatrix::concat (const Spars
   if (rb.rows () > 0 && rb.cols () > 0)
     insert (tmp, ra_idx(0), ra_idx(1));
   return *this;
 }
 
 ComplexMatrix
 SparseComplexMatrix::matrix_value (void) const
 {
-  octave_idx_type nr = rows ();
-  octave_idx_type nc = cols ();
-  ComplexMatrix retval (nr, nc, Complex (0.0, 0.0));
-
-  for (octave_idx_type j = 0; j < nc; j++)
-    for (octave_idx_type i = cidx(j); i < cidx(j+1); i++)
-      retval.elem (ridx(i), j) = data (i);
-
-  return retval;
+  return Sparse<Complex>::array_value ();
 }
 
 SparseComplexMatrix
 SparseComplexMatrix::hermitian (void) const
 {
   octave_idx_type nr = rows ();
   octave_idx_type nc = cols ();
   octave_idx_type nz = nnz ();
diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,13 @@
+2010-03-22  Jaroslav Hajek  <highegg@gmail.com>
+
+	* dSparse.cc (SparseMatrix::matrix_value): Simplify.
+	* CSparse.cc (SparseComplexMatrix::matrix_value): Simplify.
+
 2010-03-19  Jaroslav Hajek  <highegg@gmail.com>
 
 	* Array-util.cc (gripe_invalid_resize): Move here from Array.cc.
 	* Array-util.h: Declare it.
 	* Array.cc: Use it.
 
 	* idx-vector.cc (idx_vector::idx_mask_rep::unconvert): Fix non-owned
 	case.
diff --git a/liboctave/dSparse.cc b/liboctave/dSparse.cc
--- a/liboctave/dSparse.cc
+++ b/liboctave/dSparse.cc
@@ -7549,25 +7549,17 @@ SparseMatrix
 SparseMatrix::diag (octave_idx_type k) const
 {
   return MSparse<double>::diag (k);
 }
 
 Matrix
 SparseMatrix::matrix_value (void) const
 {
-  octave_idx_type nr = rows ();
-  octave_idx_type nc = cols ();
-
-  Matrix retval (nr, nc, 0.0);
-  for (octave_idx_type j = 0; j < nc; j++)
-    for (octave_idx_type i = cidx(j); i < cidx(j+1); i++)
-      retval.elem (ridx(i), j) = data (i);
-
-  return retval;
+  return Sparse<double>::array_value ();
 }
 
 std::ostream&
 operator << (std::ostream& os, const SparseMatrix& a)
 {
   octave_idx_type nc = a.cols ();
 
    // add one to the printed indices to go from
