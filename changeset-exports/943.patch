# HG changeset patch
# User jwe
# Date 785444731 0
#      Mon Nov 21 19:05:31 1994 +0000
# Node ID 4fc1ae8c24dc1bbebb2b21c31cadb654b3180db9
# Parent  8fa3c25ab27102429aaa2f7155025afe7e2a3b79
[project @ 1994-11-21 19:05:31 by jwe]

diff --git a/src/pt-plot.cc b/src/pt-plot.cc
--- a/src/pt-plot.cc
+++ b/src/pt-plot.cc
@@ -56,16 +56,19 @@ extern "C"
 }
 
 // The number of lines we\'ve plotted so far.
 static int plot_line_count = 0;
 
 // Is this a parametric plot?  Makes a difference for 3D plotting.
 static int parametric_plot = 0;
 
+// The gnuplot terminal type.
+static char *gnuplot_terminal_type = 0;
+
 // Should the graph window be cleared before plotting the next line?
 static int clear_before_plotting = 1;
 
 // List of files to delete when we exit or crash.
 static SLStack <char *> tmp_files;
 
 // Pipe to gnuplot.
 static oprocstream plot_stream;
@@ -99,16 +102,18 @@ static oprocstream plot_stream;
 
 static void
 open_plot_stream (void)
 {
   static int initialized = 0;
 
   if (! plot_stream.is_open ())
     {
+      initialized = 0;
+
       plot_line_count = 0;
 
       char *plot_prog = user_pref.gnuplot_binary;
       if (plot_prog)
 	{
 	  plot_stream.open (plot_prog);
 	  if (! plot_stream.is_open ())
 	    {
@@ -133,16 +138,19 @@ open_plot_stream (void)
 	    error ("plot: unable to open pipe to `%s'", plot_prog);
 	}
     }
 
   if (! initialized)
     {
       initialized = 1;
       plot_stream << "set data style lines\n";
+
+      if (gnuplot_terminal_type)
+	plot_stream << "set term " << gnuplot_terminal_type << "\n";
     }
 }
 
 static int
 send_to_plot_stream (const char *cmd)
 {
 // From sighandlers.cc:
   extern int pipe_handler_error_count;
@@ -1142,16 +1150,25 @@ set plotting options")
   ostrstream plot_buf;
 
   if (argc > 1)
     {
       if (almost_match ("parametric", argv[1], 3))
 	parametric_plot = 1;
       else if (almost_match ("noparametric", argv[1], 5))
 	parametric_plot = 0;
+      else if (almost_match ("term", argv[1], 1))
+	{
+	  delete [] gnuplot_terminal_type;
+	  ostrstream buf;
+	  for (int i = 2; i < argc; i++)
+	    buf << argv[i] << " ";
+	  buf << "\n" << ends;
+	  gnuplot_terminal_type = buf.str ();
+	}
     }
 
   for (int i = 0; i < argc; i++)
     plot_buf << argv[i] << " ";
 
   plot_buf << "\n" << ends;
 
   char *plot_command = plot_buf.str ();
