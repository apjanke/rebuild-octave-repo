# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1262014925 18000
#      Mon Dec 28 10:42:05 2009 -0500
# Node ID 62eb444704bafee83c5446653dc584fbc4286df1
# Parent  e60f038146e17fd505ddb52d2c1f3380b2becaa4
file-ops.cc: avoid problems if sys/stat.h #defines mkdir or mkfifo

diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,15 @@
+2009-12-28  John W. Eaton  <jwe@octave.org>
+
+	* file-ops.cc (fle_ops::mkdir_internal,
+	file_ops::mkfifo_internal): New private static functions.
+	* file-ops.h (file_ops::mkdir, file_ops::mkdir): Move
+	definitions here from file-ops.cc.  Forward to X_internal functions.
+
 2009-12-26  John W. Eaton  <jwe@octave.org>
 
 	* file-stat.cc (lstat): Delete replacement function.
 	(file_fstat::update_internal): Assume fstat is available.
 
 2009-12-25  John W. Eaton  <jwe@octave.org>
 
 	* file-ops.cc (file_ops::mkdir): Assume we have an mkdir
diff --git a/liboctave/file-ops.cc b/liboctave/file-ops.cc
--- a/liboctave/file-ops.cc
+++ b/liboctave/file-ops.cc
@@ -90,24 +90,18 @@ file_ops::static_members::instance_ok (v
 }
 
 #define NOT_SUPPORTED(nm) \
   nm ": not supported on this system"
 
 // We provide a replacement for mkdir().
 
 int
-file_ops::mkdir (const std::string& name, mode_t mode)
-{
-  std::string msg;
-  return mkdir (name, mode, msg);
-}
-
-int
-file_ops::mkdir (const std::string& name, mode_t mode, std::string& msg)
+file_ops::mkdir_internal (const std::string& name, mode_t mode,
+                          std::string& msg)
 {
   msg = std::string ();
 
   int status = -1;
 
   status = ::mkdir (name.c_str (), mode);
 
   if (status < 0)
@@ -117,24 +111,18 @@ file_ops::mkdir (const std::string& name
     }
 
   return status;
 }
 
 // I don't know how to emulate this on systems that don't provide it.
 
 int
-file_ops::mkfifo (const std::string& name, mode_t mode)
-{
-  std::string msg;
-  return mkfifo (name, mode, msg);
-}
-
-int
-file_ops::mkfifo (const std::string& name, mode_t mode, std::string& msg)
+file_ops::mkfifo_internal (const std::string& name, mode_t mode,
+                           std::string& msg)
 {
   msg = std::string ();
 
   int status = -1;
 
   // With gnulib we will always have mkfifo, but some systems like MinGW
   // don't have working mkfifo functions.  On those systems, mkfifo will
   // always return -1 and set errno.
diff --git a/liboctave/file-ops.h b/liboctave/file-ops.h
--- a/liboctave/file-ops.h
+++ b/liboctave/file-ops.h
@@ -32,21 +32,37 @@ along with Octave; see the file COPYING.
 #include "str-vec.h"
 
 struct
 OCTAVE_API
 file_ops
 {
 public:
 
-  static int mkdir (const std::string&, mode_t);
-  static int mkdir (const std::string&, mode_t, std::string&);
+  static int mkdir (const std::string& nm, mode_t md)
+  {
+    std::string msg;
+    return mkdir_internal (nm, md, msg);
+  }
+
+  static int mkdir (const std::string& nm, mode_t md, std::string& msg)
+  {
+    return mkdir_internal (nm, md, msg);
+  }
 
-  static int mkfifo (const std::string&, mode_t);
-  static int mkfifo (const std::string&, mode_t, std::string&);
+  static int mkfifo (const std::string& nm, mode_t md)
+  {
+    std::string msg;
+    return mkfifo_internal (nm, md, msg);
+  }
+
+  static int mkfifo (const std::string& nm, mode_t md, std::string& msg)
+  {
+    return mkfifo_internal (nm, md, msg);
+  }
 
   static int link (const std::string&, const std::string&);
   static int link (const std::string&, const std::string&, std::string&);
 
   static int symlink (const std::string&, const std::string&);
   static int symlink (const std::string&, const std::string&, std::string&);
 
   static int readlink (const std::string&, std::string&);
@@ -119,16 +135,20 @@ public:
     else
       ipos = 0;
 
     return path.substr (ipos);
   }
 
 private:
 
+  static int mkdir_internal (const std::string&, mode_t, std::string&);
+
+  static int mkfifo_internal (const std::string&, mode_t, std::string&);
+
   // Use a singleton class for these data members instead of just
   // making them static members of the dir_path class so that we can
   // ensure proper initialization.
 
   class static_members
   {
   public:
 
