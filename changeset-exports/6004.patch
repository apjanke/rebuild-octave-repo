# HG changeset patch
# User jwe
# Date 1159305412 0
#      Tue Sep 26 21:16:52 2006 +0000
# Node ID 01556febbaaf551ae7fb4c1658bbeba22014e6bb
# Parent  7f8e4f5e2eb7c7ce4602d86775a4bc576bc3d80b
[project @ 2006-09-26 21:16:52 by jwe]

diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,8 +1,25 @@
+2006-09-26  David Bateman  <dbateman@free.fr>
+
+	* __plt3__.m: Using global variables __plot_data__,
+	__plot_data_offset__ and __plot_command__ to store plots and
+	correctly handle multiplots, and hold state. Only accept a single
+	data parameter plus, using, format and with strings. Remove
+	setting of gnuplot parameters.
+	* __make_using_clause__.m: New function extracted from __plt__.m.
+	* __setup_plot__.m: Convert to a function and pass the plotting
+	command to use.
+	* __plt__.m: Change call to __setup_plot__ and __make_using_clause__.
+	* contour.m: Use unwind protect on the parametric state of plot
+	and __plt3__ instead of calling __gnuplot_splot__ directly.
+	* mesh.m: ditto.
+	* plot3.m: Error checking, setting of parametric state and
+	formation of matrix to plot moved from old __plt3__.
+
 2006-09-22  Michael Creel <michael.creel@uab.es>
 
 	* deprecated/chisquare_pdf.m: Typo in documentation. 
 
 2006-09-22  Søren Hauberg  <soren@hauberg.org>
 
 	* signal/filter2.m: Correct texinfo doc.
 
diff --git a/scripts/plot/__errplot__.m b/scripts/plot/__errplot__.m
--- a/scripts/plot/__errplot__.m
+++ b/scripts/plot/__errplot__.m
@@ -32,17 +32,17 @@
 ## Created: 18.7.2000
 ## Author: Teemu Ikonen <tpikonen@pcu.helsinki.fi>
 ## Keywords: errorbar, plotting
 
 function __errplot__ (fstr, a1, a2, a3, a4, a5, a6)
 
   __plot_globals__;
 
-  __setup_plot__;
+  __setup_plot__ ("__gnuplot_plot__");
 
   if (nargin < 3 || nargin > 7) # at least three data arguments needed
     usage ("__errplot__ (fmt, arg1, ...)");
   endif
 
   j = __plot_data_offset__{__current_figure__}(__multiplot_xi__,__multiplot_yi__);
 
   fmt = __pltopt__ ("__errplot__", fstr);
diff --git a/scripts/plot/__plt3__.m b/scripts/plot/__plt3__.m
--- a/scripts/plot/__plt3__.m
+++ b/scripts/plot/__plt3__.m
@@ -28,39 +28,62 @@
 ## Modified to use new gnuplot interface in octave > 2.9.0
 ## Dmitri A. Sergatskov <dasergatskov@gmail.com>
 ## April 18, 2005
 ## Modified to use NaN as seperator for gnuplot, so multiple calls
 ## aren't needed.
 ## David Bateman <dbateman@free.fr>
 ## May 25, 2006
 
-function __plt3__ (x, y, z, fmt)
+function __plt3__ (x, usingstr, fmtstr, withstr)
 
-  if (isvector (x) && isvector (y))
-    if (isvector (z))
-      x = x(:);
-      y = y(:);
-      z = z(:);
-    elseif (length (x) == rows (z) && length (y) == columns (z))
-      error ("plot3: [length(x), length(y)] must match size(z)");
-    else
-      [x, y] = meshgrid (x, y);
-    endif
+  if (nargin < 2)
+    usingstr = "";
+  endif
+  if (nargin < 3)
+    fmtstr = "";
+  endif
+  if (nargin < 4)
+    withstr = "";
   endif
 
-  if (any (size (x) != size (y)) || any (size (x) != size (z)))
-    error ("plot3: x, y, and z must have the same shape");
+  __plot_globals__;
+
+  __setup_plot__ ("__gnuplot_splot__");
+
+  j = __plot_data_offset__{__current_figure__}(__multiplot_xi__,__multiplot_yi__);
+
+  __plot_data__{__current_figure__}{__multiplot_xi__,__multiplot_yi__}{j} = x;
+
+  if (iscell (__plot_data__{__current_figure__}{__multiplot_xi__,__multiplot_yi__}{j}))
+    for i = 1:length (__plot_data__{__current_figure__}{__multiplot_xi__,__multiplot_yi__}{j})
+    if (! isempty(usingstr))
+      length(usingstr)
+	usingstr = __make_using_clause__ (__plot_data__{__current_figure__}{__multiplot_xi__,__multiplot_yi__}{j}{i});
+      endif
+      __plot_command__{__current_figure__}{__multiplot_xi__,__multiplot_yi__} \
+	  = sprintf ("%s%s __plot_data__{__current_figure__}{__multiplot_xi__,__multiplot_yi__}{%d}{%d} %s %s",
+		     __plot_command__{__current_figure__}{__multiplot_xi__,__multiplot_yi__},
+		     __plot_command_sep__, j, i, usingstr, fmtstr{i});
+      __plot_command_sep__ = ",\\\n";
+    endfor
+  else
+    if (! isempty(usingstr))
+      length(usingstr)
+      usingstr = __make_using_clause__ (__plot_data__{__current_figure__}{__multiplot_xi__,__multiplot_yi__}{j});
+    endif
+    __plot_command__{__current_figure__}{__multiplot_xi__,__multiplot_yi__} \
+	= sprintf ("%s%s __plot_data__{__current_figure__}{__multiplot_xi__,__multiplot_yi__}{%d} %s %s %s",
+		   __plot_command__{__current_figure__}{__multiplot_xi__,__multiplot_yi__},
+		   __plot_command_sep__, j, usingstr, fmtstr, withstr);
+    __plot_command_sep__ = ",\\\n";
   endif
 
-  unwind_protect
-    __gnuplot_set__ parametric;
-    __gnuplot_raw__ ("set nohidden3d;\n");
+  __plot_data_offset__{__current_figure__}(__multiplot_xi__,__multiplot_yi__) = ++j;
 
-    tmp = [([x; NaN*ones(1,size(x,2))])(:), ...
-	   ([y; NaN*ones(1,size(y,2))])(:), ...
-	   ([z; NaN*ones(1,size(z,2))])(:)];
+  if (__multiplot_mode__)
+    __gnuplot_raw__ ("clear\n");
+  endif
 
-    eval (sprintf ("__gnuplot_splot__ tmp %s\n", fmt));
-  unwind_protect_cleanup
-    __gnuplot_set__ noparametric; 
-  end_unwind_protect
+  if (! strcmp (__plot_command__{__current_figure__}{__multiplot_xi__,__multiplot_yi__}, "__gnuplot_splot__"))
+    eval (__plot_command__{__current_figure__}{__multiplot_xi__,__multiplot_yi__});
+  endif
 endfunction
diff --git a/scripts/plot/__plt__.m b/scripts/plot/__plt__.m
--- a/scripts/plot/__plt__.m
+++ b/scripts/plot/__plt__.m
@@ -22,17 +22,17 @@
 ## @end deftypefn
 
 ## Author: jwe
 
 function __plt__ (caller, varargin)
 
   __plot_globals__;
 
-  __setup_plot__;
+  __setup_plot__ ("__gnuplot_plot__");
 
   nargs = nargin ();
 
   if (nargs > 1)
 
     k = 1;
     j = __plot_data_offset__{__current_figure__}(__multiplot_xi__,__multiplot_yi__);
 
@@ -88,25 +88,25 @@ function __plt__ (caller, varargin)
       else
 	x = next_arg;
 	x_set = true;
       endif
 
       if (have_data)
 	if (iscell (__plot_data__{__current_figure__}{__multiplot_xi__,__multiplot_yi__}{j}))
 	  for i = 1:length (__plot_data__{__current_figure__}{__multiplot_xi__,__multiplot_yi__}{j})
-	    usingstr = make_using_clause (__plot_data__{__current_figure__}{__multiplot_xi__,__multiplot_yi__}{j}{i});
+	    usingstr = __make_using_clause__ (__plot_data__{__current_figure__}{__multiplot_xi__,__multiplot_yi__}{j}{i});
 	    __plot_command__{__current_figure__}{__multiplot_xi__,__multiplot_yi__} \
 		= sprintf ("%s%s __plot_data__{__current_figure__}{__multiplot_xi__,__multiplot_yi__}{%d}{%d} %s %s",
 			   __plot_command__{__current_figure__}{__multiplot_xi__,__multiplot_yi__},
 			   __plot_command_sep__, j, i, usingstr, fmtstr{i});
 	    __plot_command_sep__ = ",\\\n";
 	  endfor
 	else
-	  usingstr = make_using_clause (__plot_data__{__current_figure__}{__multiplot_xi__,__multiplot_yi__}{j});
+	  usingstr = __make_using_clause__ (__plot_data__{__current_figure__}{__multiplot_xi__,__multiplot_yi__}{j});
 	  __plot_command__{__current_figure__}{__multiplot_xi__,__multiplot_yi__} \
 	    = sprintf ("%s%s __plot_data__{__current_figure__}{__multiplot_xi__,__multiplot_yi__}{%d} %s %s",
 		       __plot_command__{__current_figure__}{__multiplot_xi__,__multiplot_yi__},
 		       __plot_command_sep__, j, usingstr, fmtstr);
 	  __plot_command_sep__ = ",\\\n";
 	endif
 	j++;
       endif
@@ -124,21 +124,9 @@ function __plt__ (caller, varargin)
 
   else
     msg = sprintf ("%s (y)\n", caller);
     msg = sprintf ("%s       %s (x, y, ...)\n", msg, caller);
     msg = sprintf ("%s       %s (x, y, fmt, ...)", msg, caller);
     usage (msg);
   endif
 
-## endfunction
-
-function usingstr = make_using_clause (x)
-  cols = columns (x);
-  if (cols > 0)
-    usingstr = strcat (gnuplot_command_using, " ($1)");
-    for k = 2:cols
-      usingstr = sprintf ("%s:($%d)", usingstr, k);
-    endfor
-  else
-    usingstr = "";
-  endif
-## endfunction
+endfunction
diff --git a/scripts/plot/__setup_plot__.m b/scripts/plot/__setup_plot__.m
--- a/scripts/plot/__setup_plot__.m
+++ b/scripts/plot/__setup_plot__.m
@@ -12,21 +12,26 @@
 ## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, write to the Free
 ## Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
 ## 02110-1301, USA.
 
-if (ishold ())
-  if (isempty (__plot_command__{__current_figure__}{__multiplot_xi__,__multiplot_yi__}))
-    __plot_command__{__current_figure__}{__multiplot_xi__,__multiplot_yi__} = "__gnuplot_plot__";
+function __setup_plot__ (plotcmd)
+
+  __plot_globals__
+
+  if (ishold ())
+    if (isempty (__plot_command__{__current_figure__}{__multiplot_xi__,__multiplot_yi__}))
+      __plot_command__{__current_figure__}{__multiplot_xi__,__multiplot_yi__} = plotcmd;
+      __plot_command_sep__ = "";
+    else
+      __plot_command_sep__ = ",\\\n";
+    endif
+  else
+    __plot_command__{__current_figure__}{__multiplot_xi__,__multiplot_yi__} = plotcmd;
     __plot_command_sep__ = "";
-  else
-    __plot_command_sep__ = ",\\\n";
+    __plot_data__{__current_figure__}{__multiplot_xi__,__multiplot_yi__} = [];
+    __plot_data_offset__{__current_figure__}(__multiplot_xi__,__multiplot_yi__) = 1;
   endif
-else
-  __plot_command__{__current_figure__}{__multiplot_xi__,__multiplot_yi__} = "__gnuplot_plot__";
-  __plot_command_sep__ = "";
-  __plot_data__{__current_figure__}{__multiplot_xi__,__multiplot_yi__} = [];
-  __plot_data_offset__{__current_figure__}(__multiplot_xi__,__multiplot_yi__) = 1;
-endif
+endfunction
diff --git a/scripts/plot/contour.m b/scripts/plot/contour.m
--- a/scripts/plot/contour.m
+++ b/scripts/plot/contour.m
@@ -37,34 +37,39 @@ function contour (x, y, z, n)
   if (nargin == 1 || nargin == 2)
     z = x;
     if (nargin == 1) 
       n = 10;
     else
       n = y; 
     endif
     if (ismatrix (z))
-      __gnuplot_raw__ ("set nosurface;\n");
-      __gnuplot_raw__ ("set contour;\n");
-      __gnuplot_raw__ ("set cntrparam bspline;\n");
-      if (isscalar (n))
-        command = sprintf ("set cntrparam levels %d;\n", n);
-      elseif (isvector (n))
-        tmp = sprintf ("%f", n(1));
-        for i = 2:length (n)
-          tmp = sprintf ("%s, %f", tmp, n(i));
-        endfor
-        command = sprintf ("set cntrparam levels discrete %s;\n", tmp);
-      else
-	error ("contour: levels must be a scalar or vector") ;
-      endif
-      __gnuplot_raw__ (command);
-      __gnuplot_set__ parametric;
-      __gnuplot_raw__ ("set view 0, 0, 1, 1;\n");
-      __gnuplot_splot__ z w l 1;
+      unwind_protect
+	__gnuplot_raw__ ("set nosurface;\n");
+	__gnuplot_raw__ ("set contour;\n");
+	__gnuplot_raw__ ("set cntrparam bspline;\n");
+	if (isscalar (n))
+          command = sprintf ("set cntrparam levels %d;\n", n);
+	elseif (isvector (n))
+          tmp = sprintf ("%f", n(1));
+          for i = 2:length (n)
+            tmp = sprintf ("%s, %f", tmp, n(i));
+          endfor
+          command = sprintf ("set cntrparam levels discrete %s;\n", tmp);
+	else
+	  error ("contour: levels must be a scalar or vector") ;
+	endif
+	__gnuplot_raw__ (command);
+	__gnuplot_set__ parametric;
+	__gnuplot_raw__ ("set view 0, 0, 1, 1;\n");
+	__plt3__ (z, "", "", [gnuplot_command_with, " l 1"]);
+      unwind_protect_cleanup
+	__gnuplot_set__ noparametric;
+      end_unwind_protect
+
     else
       error ("contour: z of contour (z, levels) must be a matrix");
     endif
   elseif (nargin == 3 || nargin == 4)
     if (nargin == 3)
       n = 10;
     endif
     if (ismatrix (z))
@@ -97,34 +102,38 @@ function contour (x, y, z, n)
 	  zz = zeros (z_size(2), nc);
 	  zz(:,1:3:nc) = x';
 	  zz(:,2:3:nc) = y';
 	  zz(:,3:3:nc) = z';
 	else
 	  error (size_msg);
 	endif
       endif
-      __gnuplot_raw__ ("set nosurface;\n");
-      __gnuplot_raw__ ("set contour;\n");
-      __gnuplot_raw__ ("set cntrparam bspline;\n");
-      if (isscalar (n))
-        command = sprintf ("set cntrparam levels %d;\n", n);
-      elseif (isvector (n))
-        tmp = sprintf ("%f", n(1));
-        for i = 2:length (n)
-          tmp = sprintf ("%s, %f", tmp, n(i));
-        endfor
-        command = sprintf ("set cntrparam levels discrete %s;\n", tmp);
-      else
-	error ("contour: levels must be a scalar or vector") ;
-      endif
-      __gnuplot_raw__ (command);
-      __gnuplot_set__ parametric;
-      __gnuplot_raw__ ("set view 0, 0, 1, 1;\n");
-      __gnuplot_splot__ zz w l 1;
+      unwind_protect
+	__gnuplot_raw__ ("set nosurface;\n");
+	__gnuplot_raw__ ("set contour;\n");
+	__gnuplot_raw__ ("set cntrparam bspline;\n");
+	if (isscalar (n))
+          command = sprintf ("set cntrparam levels %d;\n", n);
+	elseif (isvector (n))
+          tmp = sprintf ("%f", n(1));
+          for i = 2:length (n)
+            tmp = sprintf ("%s, %f", tmp, n(i));
+          endfor
+          command = sprintf ("set cntrparam levels discrete %s;\n", tmp);
+	else
+	  error ("contour: levels must be a scalar or vector") ;
+	endif
+	__gnuplot_raw__ (command);
+	__gnuplot_set__ parametric;
+	__gnuplot_raw__ ("set view 0, 0, 1, 1;\n");
+	__plt3__ (zz, "", "", [gnuplot_command_with, " l 1"]);
+      unwind_protect_cleanup
+	__gnuplot_set__ noparametric;
+      end_unwind_protect
     else
       error ("contour: x and y must be vectors and z must be a matrix");
     endif
   else
     usage ("contour (x, y, z, levels) or contour (z, levels)");
   endif
 
 endfunction
diff --git a/scripts/plot/mesh.m b/scripts/plot/mesh.m
--- a/scripts/plot/mesh.m
+++ b/scripts/plot/mesh.m
@@ -41,17 +41,17 @@ function mesh (x, y, z)
     if (ismatrix (z))
       __gnuplot_raw__ ("set hidden3d;\n");
       __gnuplot_raw__ ("set data style lines;\n");
       __gnuplot_raw__ ("set surface;\n");
       __gnuplot_raw__ ("set nocontour;\n");
       __gnuplot_set__ noparametric;
       __gnuplot_raw__ ("set nologscale;\n");
       __gnuplot_raw__ ("set view 60, 30, 1, ;\n");
-      __gnuplot_splot__ (z');
+      __plt3__ (z');
     else
       error ("mesh: argument must be a matrix");
     endif
   elseif (nargin == 3)
     if (isvector (x) && isvector (y) && ismatrix (z))
       xlen = length (x);
       ylen = length (y);
       if (xlen == columns (z) && ylen == rows (z))
@@ -62,27 +62,30 @@ function mesh (x, y, z)
         zz = zeros (ylen, len);
         k = 1;
         for i = 1:3:len
           zz(:,i)   = x(k) * ones (ylen, 1);
           zz(:,i+1) = y;
           zz(:,i+2) = z(:,k);
           k++;
         endfor
-        __gnuplot_raw__ ("set hidden3d;\n");
-        __gnuplot_raw__ ("set data style lines;\n");
-        __gnuplot_raw__ ("set surface;\n");
-        __gnuplot_raw__ ("set nocontour;\n");
-        __gnuplot_raw__ ("set nologscale;\n");
-        __gnuplot_set__ parametric;
-        __gnuplot_raw__ ("set view 60, 30, 1, 1;\n");
-        __gnuplot_raw__ ("set palette defined (0 \"dark-blue\", 1 \"blue\", 2 \"cyan\", 3 \"yellow\", 4 \"red\" , 5 \"dark-red\");\n");
-        __gnuplot_raw__ ("set nocolorbox;\n");
-        __gnuplot_splot__ zz with line palette;
-        __gnuplot_set__ noparametric;
+	unwind_protect
+          __gnuplot_raw__ ("set hidden3d;\n");
+          __gnuplot_raw__ ("set data style lines;\n");
+          __gnuplot_raw__ ("set surface;\n");
+          __gnuplot_raw__ ("set nocontour;\n");
+          __gnuplot_raw__ ("set nologscale;\n");
+          __gnuplot_set__ parametric;
+          __gnuplot_raw__ ("set view 60, 30, 1, 1;\n");
+          __gnuplot_raw__ ("set palette defined (0 \"dark-blue\", 1 \"blue\", 2 \"cyan\", 3 \"yellow\", 4 \"red\" , 5 \"dark-red\");\n");
+          __gnuplot_raw__ ("set nocolorbox;\n");
+	  __plt3__ (zz, "", "", [gnuplot_command_with " line palette"]);
+	unwind_protect_cleanup
+	  __gnuplot_set__ noparametric;
+	end_unwind_protect
       else
         msg = "mesh: rows (z) must be the same as length (y) and";
         msg = sprintf ("%s\ncolumns (z) must be the same as length (x)", msg);
         error (msg);
       endif
     elseif (ismatrix (x) && ismatrix (y) && ismatrix (z))
       xlen = columns (z);
       ylen = rows (z);
@@ -92,25 +95,27 @@ function mesh (x, y, z)
         zz = zeros (ylen, len);
         k = 1;
         for i = 1:3:len
           zz(:,i)   = x(:,k);
           zz(:,i+1) = y(:,k);
           zz(:,i+2) = z(:,k);
           k++;
         endfor
-        __gnuplot_raw__ ("set hidden3d;\n")
-        __gnuplot_raw__ ("set data style lines;\n");
-        __gnuplot_raw__ ("set surface;\n");
-        __gnuplot_raw__ ("set nocontour;\n");
-        __gnuplot_raw__ ("set nologscale;\n");
-        __gnuplot_set__ parametric;
-        __gnuplot_raw__ ("set view 60, 30, 1, 1;\n");
-        __gnuplot_splot__ (zz);
-        __gnuplot_set__ noparametric;
+	unwind_protect
+          __gnuplot_raw__ ("set data style lines;\n");
+          __gnuplot_raw__ ("set surface;\n");
+          __gnuplot_raw__ ("set nocontour;\n");
+          __gnuplot_raw__ ("set nologscale;\n");
+          __gnuplot_set__ parametric;
+          __gnuplot_raw__ ("set view 60, 30, 1, 1;\n");
+          __plt3__ (zz);
+	unwind_protect_cleanup
+	  __gnuplot_set__ noparametric;
+	end_unwind_protect
       else
         error ("mesh: x, y, and z must have same dimensions");
       endif
     else
       error ("mesh: x and y must be vectors and z must be a matrix");
     endif
   else
     usage ("mesh (z)");
diff --git a/scripts/plot/plot3.m b/scripts/plot/plot3.m
--- a/scripts/plot/plot3.m
+++ b/scripts/plot/plot3.m
@@ -195,32 +195,87 @@ function plot3 (varargin)
 	    endif
 	  else
 	    z = imag (y);
 	    y = real (y);
 	    z_set = 1;
 	  endif
 	endif
 	fmt = __pltopt__ ("plot3", new);
-	__plt3__ (x, y, z, fmt);
+
+	if (isvector (x) && isvector (y))
+	  if (isvector (z))
+	    x = x(:);
+	    y = y(:);
+	    z = z(:);
+	  elseif (length (x) == rows (z) && length (y) == columns (z))
+	    error ("plot3: [length(x), length(y)] must match size(z)");
+	  else
+	    [x, y] = meshgrid (x, y);
+	  endif
+	endif
+
+	if (any (size (x) != size (y)) || any (size (x) != size (z)))
+	  error ("plot3: x, y, and z must have the same shape");
+	endif
+
+	unwind_protect
+          __gnuplot_raw__ ("set nohidden3d;\n")
+	  __gnuplot_set__ parametric; 
+
+	  __plt3__ ([([x; NaN*ones(1,size(x,2))])(:), ...
+		   ([y; NaN*ones(1,size(y,2))])(:), ...
+		   ([z; NaN*ones(1,size(z,2))])(:)], "", fmt);
+
+	unwind_protect_cleanup
+	  __gnuplot_set__ noparametric; 
+	end_unwind_protect
+
 	hold ("on");
 	x_set = 0;
 	y_set = 0;
 	z_set = 0;
       elseif (! x_set)
 	x = new;
 	x_set = 1;
       elseif (! y_set)
 	y = new;
 	y_set = 1;
       elseif (! z_set)
 	z = new;
 	z_set = 1;
       else
-	__plt3__ (x, y, z, "");
+	if (isvector (x) && isvector (y))
+	  if (isvector (z))
+	    x = x(:);
+	    y = y(:);
+	    z = z(:);
+	  elseif (length (x) == rows (z) && length (y) == columns (z))
+	    error ("plot3: [length(x), length(y)] must match size(z)");
+	  else
+	    [x, y] = meshgrid (x, y);
+	  endif
+	endif
+
+	if (any (size (x) != size (y)) || any (size (x) != size (z)))
+	  error ("plot3: x, y, and z must have the same shape");
+	endif
+
+	unwind_protect
+          __gnuplot_raw__ ("set nohidden3d;\n")
+	  __gnuplot_set__ parametric; 
+
+	  __plt3__ ([([x; NaN*ones(1,size(x,2))])(:), ...
+		     ([y; NaN*ones(1,size(y,2))])(:), ...
+		     ([z; NaN*ones(1,size(z,2))])(:)]);
+
+	unwind_protect_cleanup
+	  __gnuplot_set__ noparametric; 
+	end_unwind_protect
+
 	hold ("on");
 	x = new;
 	y_set = 0;
 	z_set = 0;
       endif
        
     endfor
     
@@ -239,17 +294,43 @@ function plot3 (varargin)
         y_set = 1;
         z_set = 1;
         if (rows (x) > 1)
           x = repmat ((1:rows (x))', 1, columns(x));
         else
           x = 1:columns(x);
         endif
       endif
-      __plt3__ (x, y, z, "");
+
+      if (isvector (x) && isvector (y))
+	if (isvector (z))
+	  x = x(:);
+	  y = y(:);
+	  z = z(:);
+	elseif (length (x) == rows (z) && length (y) == columns (z))
+	  error ("plot3: [length(x), length(y)] must match size(z)");
+	else
+	  [x, y] = meshgrid (x, y);
+	endif
+      endif
+
+      if (any (size (x) != size (y)) || any (size (x) != size (z)))
+	error ("plot3: x, y, and z must have the same shape");
+      endif
+
+      unwind_protect
+        __gnuplot_raw__ ("set nohidden3d;\n")
+	__gnuplot_set__ parametric; 
+
+	__plt3__ ([([x; NaN*ones(1,size(x,2))])(:), ...
+		   ([y; NaN*ones(1,size(y,2))])(:), ...
+		   ([z; NaN*ones(1,size(z,2))])(:)]);
+      unwind_protect_cleanup
+	__gnuplot_set__ noparametric; 
+      end_unwind_protect
     endif
     
   unwind_protect_cleanup
     
     if (! hold_state)
       hold ("off");
     endif
     
