# HG changeset patch
# User jwe
# Date 809070108 0
#      Tue Aug 22 05:41:48 1995 +0000
# Node ID 64819a909ed790ad963a3f99622af333e22f2781
# Parent  c9aecc02c6d4d70c50785491d39feab1ef0163a7
[project @ 1995-08-22 05:39:43 by jwe]

diff --git a/liboctave/Array.cc b/liboctave/Array.cc
--- a/liboctave/Array.cc
+++ b/liboctave/Array.cc
@@ -564,31 +564,29 @@ Array2<T>::resize (int r, int c, const T
   rep->count = 1;
 
   d1 = r;
   d2 = c;
 
   int min_r = old_d1 < r ? old_d1 : r;
   int min_c = old_d2 < c ? old_d2 : c;
 
-  int i, j;
-
   if (old_data && old_len > 0)
     {
-      for (j = 0; j < min_c; j++)
-	for (i = 0; i < min_r; i++)
+      for (int j = 0; j < min_c; j++)
+	for (int i = 0; i < min_r; i++)
 	  xelem (i, j) = old_data[old_d1*j+i];
     }
 
-  for (j = 0; j < min_c; j++)
-    for (i = min_r; i < r; i++)
+  for (int j = 0; j < min_c; j++)
+    for (int i = min_r; i < r; i++)
       xelem (i, j) = val;
 
-  for (j = min_c; j < c; j++)
-    for (i = 0; i < r; i++)
+  for (int j = min_c; j < c; j++)
+    for (int i = 0; i < r; i++)
       xelem (i, j) = val;
 
   if (--old_rep->count <= 0)
     delete old_rep;
 }
 
 /*
  * Three dimensional array class.
diff --git a/liboctave/CColVector.cc b/liboctave/CColVector.cc
--- a/liboctave/CColVector.cc
+++ b/liboctave/CColVector.cc
@@ -626,17 +626,17 @@ operator * (const DiagMatrix& m, const C
   if (nc == 0 || nr == 0)
     return ComplexColumnVector (0);
 
   ComplexColumnVector result (nr);
 
   for (int i = 0; i < a_len; i++)
     result.elem (i) = a.elem (i) * m.elem (i, i);
 
-  for (i = a_len; i < nr; i++)
+  for (int i = a_len; i < nr; i++)
     result.elem (i) = 0.0;
 
   return result;
 }
 
 ComplexColumnVector
 operator * (const ComplexDiagMatrix& m, const ColumnVector& a)
 {
@@ -653,17 +653,17 @@ operator * (const ComplexDiagMatrix& m, 
   if (nc == 0 || nr == 0)
     return ComplexColumnVector (0);
 
   ComplexColumnVector result (nr);
 
   for (int i = 0; i < a_len; i++)
     result.elem (i) = a.elem (i) * m.elem (i, i);
 
-  for (i = a_len; i < nr; i++)
+  for (int i = a_len; i < nr; i++)
     result.elem (i) = 0.0;
 
   return result;
 }
 
 ComplexColumnVector
 operator * (const ComplexDiagMatrix& m, const ComplexColumnVector& a)
 {
@@ -680,17 +680,17 @@ operator * (const ComplexDiagMatrix& m, 
   if (nc == 0 || nr == 0)
     return ComplexColumnVector (0);
 
   ComplexColumnVector result (nr);
 
   for (int i = 0; i < a_len; i++)
     result.elem (i) = a.elem (i) * m.elem (i, i);
 
-  for (i = a_len; i < nr; i++)
+  for (int i = a_len; i < nr; i++)
     result.elem (i) = 0.0;
 
   return result;
 }
 
 // other operations
 
 ComplexColumnVector
diff --git a/liboctave/CMatrix.cc b/liboctave/CMatrix.cc
--- a/liboctave/CMatrix.cc
+++ b/liboctave/CMatrix.cc
@@ -903,17 +903,17 @@ ComplexMatrix::ifourier (void) const
   Complex *wsave = new Complex [nn];
   Complex *tmp_data = dup (data (), length ());
 
   F77_FCN (cffti, CFFTI) (npts, wsave);
 
   for (int j = 0; j < nsamples; j++)
     F77_FCN (cfftb, CFFTB) (npts, &tmp_data[npts*j], wsave);
 
-  for (j = 0; j < npts*nsamples; j++)
+  for (int j = 0; j < npts*nsamples; j++)
     tmp_data[j] = tmp_data[j] / (double) npts;
 
   delete [] wsave;
 
   return ComplexMatrix (tmp_data, nr, nc);
 }
 
 ComplexMatrix
@@ -947,24 +947,24 @@ ComplexMatrix::fourier2d (void) const
   npts = nc;
   nsamples = nr;
   nn = 4*npts+15;
   wsave = new Complex [nn];
   Complex *row = new Complex[npts];
 
   F77_FCN (cffti, CFFTI) (npts, wsave);
 
-  for (j = 0; j < nsamples; j++)
+  for (int j = 0; j < nsamples; j++)
     {
       for (int i = 0; i < npts; i++)
 	row[i] = tmp_data[i*nr + j];
 
       F77_FCN (cfftf, CFFTF) (npts, row, wsave);
 
-      for (i = 0; i < npts; i++)
+      for (int i = 0; i < npts; i++)
 	tmp_data[i*nr + j] = row[i];
     }
 
   delete [] wsave;
   delete [] row;
 
   return ComplexMatrix (tmp_data, nr, nc);
 }
@@ -992,35 +992,35 @@ ComplexMatrix::ifourier2d (void) const
 
   F77_FCN (cffti, CFFTI) (npts, wsave);
 
   for (int j = 0; j < nsamples; j++)
     F77_FCN (cfftb, CFFTB) (npts, &tmp_data[npts*j], wsave);
 
   delete [] wsave;
 
-  for (j = 0; j < npts*nsamples; j++)
+  for (int j = 0; j < npts*nsamples; j++)
     tmp_data[j] = tmp_data[j] / (double) npts;
 
   npts = nc;
   nsamples = nr;
   nn = 4*npts+15;
   wsave = new Complex [nn];
   Complex *row = new Complex[npts];
 
   F77_FCN (cffti, CFFTI) (npts, wsave);
 
-  for (j = 0; j < nsamples; j++)
+  for (int j = 0; j < nsamples; j++)
     {
       for (int i = 0; i < npts; i++)
 	row[i] = tmp_data[i*nr + j];
 
       F77_FCN (cfftb, CFFTB) (npts, row, wsave);
 
-      for (i = 0; i < npts; i++)
+      for (int i = 0; i < npts; i++)
 	tmp_data[i*nr + j] = row[i] / (double) npts;
     }
 
   delete [] wsave;
   delete [] row;
 
   return ComplexMatrix (tmp_data, nr, nc);
 }
@@ -1258,19 +1258,18 @@ ComplexMatrix::lssolve (const ComplexMat
       return Matrix ();
     }
 
   Complex *tmp_data = dup (data (), length ());
 
   int nrr = m > n ? m : n;
   ComplexMatrix result (nrr, nrhs);
 
-  int i, j;
-  for (j = 0; j < nrhs; j++)
-    for (i = 0; i < m; i++)
+  for (int j = 0; j < nrhs; j++)
+    for (int i = 0; i < m; i++)
       result.elem (i, j) = b.elem (i, j);
 
   Complex *presult = result.fortran_vec ();
 
   int len_s = m < n ? m : n;
   double *s = new double [len_s];
   double rcond = -1.0;
   int lwork;
@@ -1284,18 +1283,18 @@ ComplexMatrix::lssolve (const ComplexMat
   int lrwork = (5 * (m < n ? m : n)) - 4;
   lrwork = lrwork > 1 ? lrwork : 1;
   double *rwork = new double [lrwork];
 
   F77_FCN (zgelss, ZGELSS) (m, n, nrhs, tmp_data, m, presult, nrr, s,
 			    rcond, rank, work, lwork, rwork, info);
 
   ComplexMatrix retval (n, nrhs);
-  for (j = 0; j < nrhs; j++)
-    for (i = 0; i < n; i++)
+  for (int j = 0; j < nrhs; j++)
+    for (int i = 0; i < n; i++)
       retval.elem (i, j) = result.elem (i, j);
 
   delete [] tmp_data;
   delete [] s;
   delete [] work;
   delete [] rwork;
 
   return retval;
@@ -1332,18 +1331,17 @@ ComplexMatrix::lssolve (const ComplexCol
       return ComplexColumnVector ();
     }
 
   Complex *tmp_data = dup (data (), length ());
 
   int nrr = m > n ? m : n;
   ComplexColumnVector result (nrr);
 
-  int i;
-  for (i = 0; i < m; i++)
+  for (int i = 0; i < m; i++)
     result.elem (i) = b.elem (i);
 
   Complex *presult = result.fortran_vec ();
 
   int len_s = m < n ? m : n;
   double *s = new double [len_s];
   double rcond = -1.0;
   int lwork;
@@ -1357,17 +1355,17 @@ ComplexMatrix::lssolve (const ComplexCol
   int lrwork = (5 * (m < n ? m : n)) - 4;
   lrwork = lrwork > 1 ? lrwork : 1;
   double *rwork = new double [lrwork];
 
   F77_FCN (zgelss, ZGELSS) (m, n, nrhs, tmp_data, m, presult, nrr, s,
 			    rcond, rank, work, lwork, rwork, info);
 
   ComplexColumnVector retval (n);
-  for (i = 0; i < n; i++)
+  for (int i = 0; i < n; i++)
     retval.elem (i) = result.elem (i);
 
   delete [] tmp_data;
   delete [] s;
   delete [] work;
   delete [] rwork;
 
   return retval;
diff --git a/liboctave/CmplxLU.cc b/liboctave/CmplxLU.cc
--- a/liboctave/CmplxLU.cc
+++ b/liboctave/CmplxLU.cc
@@ -58,50 +58,46 @@ ComplexLU::ComplexLU (const ComplexMatri
   Complex *tmp_data = dup (a.data (), a.length ());
   int info = 0;
   Complex *b;
 
   F77_FCN (zgesv, ZGESV) (n, 0, tmp_data, n, ipvt, b, n, info);
 
   ComplexMatrix A_fact (tmp_data, n, n);
 
-  int i;
-
-  for (i = 0; i < n; i++)
+  for (int i = 0; i < n; i++)
     {
       ipvt[i] -= 1;
       pvt[i] = i;
     }
 
-  for (i = 0; i < n - 1; i++)
+  for (int i = 0; i < n - 1; i++)
     {
       int k = ipvt[i];
       if (k != i)
 	{
 	  int tmp = pvt[k];
 	  pvt[k] = pvt[i];
 	  pvt[i] = tmp;
 	}
     }
 
   l.resize (n, n, 0.0);
   u.resize (n, n, 0.0);
   p.resize (n, n, 0.0);
 
-  for (i = 0; i < n; i++)
+  for (int i = 0; i < n; i++)
     {
       p.elem (i, pvt[i]) = 1.0;
 
-      int j;
-
       l.elem (i, i) = 1.0;
-      for (j = 0; j < i; j++)
+      for (int j = 0; j < i; j++)
 	l.elem (i, j) = A_fact.elem (i, j);
 
-      for (j = i; j < n; j++)
+      for (int j = i; j < n; j++)
 	u.elem (i, j) = A_fact.elem (i, j);
     }
 
   delete [] ipvt;
   delete [] pvt;
 }
 
 /*
diff --git a/liboctave/CollocWt.cc b/liboctave/CollocWt.cc
--- a/liboctave/CollocWt.cc
+++ b/liboctave/CollocWt.cc
@@ -280,47 +280,46 @@ CollocWt::init (void)
   double *pr = r.fortran_vec ();
 
 // Compute roots.
 
   F77_FCN (jcobi, JCOBI) (nt, n, inc_left, inc_right, Alpha, Beta,
 			  dif1, dif2, dif3, pr);
 
   int id;
-  int i, j;
 
 // First derivative weights.
 
   id = 1;
-  for (i = 1; i <= nt; i++)
+  for (int i = 1; i <= nt; i++)
     {
       F77_FCN (dfopr, DFOPR) (nt, n, inc_left, inc_right, i, id, dif1,
 			      dif2, dif3, pr, vect); 
 
-      for (j = 0; j < nt; j++)
+      for (int j = 0; j < nt; j++)
 	A (i-1, j) = vect[j];
     }
 
 // Second derivative weights.
 
   id = 2;
-  for (i = 1; i <= nt; i++)
+  for (int i = 1; i <= nt; i++)
     {
       F77_FCN (dfopr, DFOPR) (nt, n, inc_left, inc_right, i, id, dif1,
 			      dif2, dif3, pr, vect); 
 
-      for (j = 0; j < nt; j++)
+      for (int j = 0; j < nt; j++)
 	B (i-1, j) = vect[j];
     }
 
 // Gaussian quadrature weights.
 
   id = 3;
   double *pq = q.fortran_vec ();
-  F77_FCN (dfopr, DFOPR) (nt, n, inc_left, inc_right, i, id, dif1,
+  F77_FCN (dfopr, DFOPR) (nt, n, inc_left, inc_right, id, id, dif1,
 			  dif2, dif3, pr, pq);
 
   delete [] dif1;
   delete [] dif2;
   delete [] dif3;
   delete [] vect;
 
   initialized = 1;
diff --git a/liboctave/DASSL.cc b/liboctave/DASSL.cc
--- a/liboctave/DASSL.cc
+++ b/liboctave/DASSL.cc
@@ -211,17 +211,17 @@ ddassl_f (const double& time, double *st
     }
 
   tmp_delta = user_fun (tmp_state, tmp_deriv, time);
 
   if (tmp_delta.length () == 0)
     ires = -2;
   else
     {
-      for (i = 0; i < nn; i++)
+      for (int i = 0; i < nn; i++)
 	delta [i] = tmp_delta.elem (i);
     }
 
   return 0;
 }
 
 int
 ddassl_j (const double& time, double *state, double *deriv, double *pd,
@@ -375,17 +375,17 @@ DAE::integrate (const Vector& tout, Matr
 
       for (int j = 1; j < n_out; j++)
 	{
 	  ColumnVector x_next = integrate (tout.elem (j));
 
 	  if (integration_error)
 	    return retval;
 
-	  for (i = 0; i < n; i++)
+	  for (int i = 0; i < n; i++)
 	    {
 	      retval.elem (j, i) = x_next.elem (i);
 	      xdot_out.elem (j, i) = xdot.elem (i);
 	    }
 	}
     }
 
   return retval;
@@ -464,17 +464,17 @@ DAE::integrate (const Vector& tout, Matr
 
 	      ColumnVector x_next = integrate (t_out);
 
 	      if (integration_error)
 		return retval;
 
 	      if (save_output)
 		{
-		  for (i = 0; i < n; i++)
+		  for (int i = 0; i < n; i++)
 		    {
 		      retval.elem (i_out-1, i) = x_next.elem (i);
 		      xdot_out.elem (i_out-1, i) = xdot.elem (i);
 		    }
 		}
 
 	      if (do_restart)
 		force_restart ();
diff --git a/liboctave/FEGrid.h b/liboctave/FEGrid.h
--- a/liboctave/FEGrid.h
+++ b/liboctave/FEGrid.h
@@ -33,63 +33,47 @@ class ostream;
 #include "dColVector.h"
 
 #ifndef Vector
 #define Vector ColumnVector
 #endif
 
 class FEGrid
 {
+private:
+
+  void error (const char* msg) const;
+  void nel_error (void) const;
+
+  void check_grid (void) const;
+
 public:
 
-  FEGrid (void);
-  FEGrid (const Vector& elbnds);
+  FEGrid (void) {}
+  FEGrid (const Vector& elbnds) { elem = elbnds; check_grid (); }
   FEGrid (int nel, double width);
   FEGrid (int nel, double left, double right);
 
-  int in_bounds (double x) const;
-
   int element (double x) const;
 
-  double left (void) const;
-  double right (void) const;
+  double left (void) const { return elem.elem (0); }
+  double right (void) const { return elem.elem (elem.capacity () - 1); }
 
-  Vector element_boundaries (void) const;
+  int in_bounds (double x) const
+    { return (x >= left () && x <= right ()); }
+
+  Vector element_boundaries (void) const { return elem; }
 
   friend ostream& operator << (ostream&, const FEGrid&);
 
 protected:
 
   Vector elem;
-
-private:
-
-  void error (const char* msg) const;
-  void nel_error (void) const;
-
-  void check_grid (void) const;
 };
 
-inline FEGrid::FEGrid (void) {}
-
-inline FEGrid::FEGrid (const Vector& elbnds)
-  { elem = elbnds; check_grid (); }
-
-inline int FEGrid::in_bounds (double x) const
-  { return (x >= left () && x <= right ()); }
-
-inline double FEGrid::left (void) const
-  { return elem.elem (0); }
-
-inline double FEGrid::right (void) const
-  { return elem.elem (elem.capacity () - 1); }
-
-inline Vector FEGrid::element_boundaries (void) const
-  { return elem; }
-
 #endif
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; page-delimiter: "^/\\*" ***
 ;;; End: ***
 */
diff --git a/liboctave/LSODE.cc b/liboctave/LSODE.cc
--- a/liboctave/LSODE.cc
+++ b/liboctave/LSODE.cc
@@ -334,17 +334,17 @@ ODE::integrate (const ColumnVector& tout
 
       for (int j = 1; j < n_out; j++)
 	{
 	  ColumnVector x_next = integrate (tout.elem (j));
 
 	  if (integration_error)
 	    return retval;
 
-	  for (i = 0; i < n; i++)
+	  for (int i = 0; i < n; i++)
 	    retval.elem (j, i) = x_next.elem (i);
 	}
     }
 
   return retval;
 }
 
 Matrix
@@ -416,17 +416,17 @@ ODE::integrate (const ColumnVector& tout
 
 	      ColumnVector x_next = integrate (t_out);
 
 	      if (integration_error)
 		return retval;
 
 	      if (save_output)
 		{
-		  for (i = 0; i < n; i++)
+		  for (int i = 0; i < n; i++)
 		    retval.elem (i_out-1, i) = x_next.elem (i);
 		}
 
 	      if (do_restart)
 		force_restart ();
 	    }
 	}
       else
diff --git a/liboctave/LinConst.h b/liboctave/LinConst.h
--- a/liboctave/LinConst.h
+++ b/liboctave/LinConst.h
@@ -40,35 +40,58 @@ class ColumnVector;
 #ifndef Vector
 #define Vector ColumnVector
 #endif
 
 class LinConst : public Bounds
 {
 public:
 
-  LinConst (void);
-  LinConst (int nclin, int nx);
+  LinConst (void) : Bounds () {}
+  LinConst (int nc, int n) : Bounds (nc), A (nb, n) {}
+
+  LinConst (int eq, int ineq, int n)
+    : Bounds (eq+ineq), A (nb, n) {}
 
-  LinConst (int nclin_eq, int nclin_ineq, int nx);
-
-  LinConst (const Vector& lb, const Matrix& A, const Vector& ub);
+  LinConst (const Vector& l, const Matrix& amat, const Vector& u)
+    : Bounds (l, u), A (amat)
+      {
+	if (nb != amat.rows ())
+	  error ("inconsistent sizes for constraint matrix and bounds vectors");
+      }
 
   LinConst (const Matrix& A_eq, const Vector& b_eq,
 	    const Matrix& A_ineq, const Vector& b_ineq);
 
-  LinConst (const LinConst& a);
+  LinConst (const LinConst& a)
+    : Bounds (a.lb, a.ub), A (a.constraint_matrix ()) {}
 
-  LinConst& operator = (const LinConst& a);
+  LinConst& operator = (const LinConst& a)
+    {
+      nb = a.nb;
+      lb = a.lb;
+      A  = a.A;
+      ub = a.ub;
+
+      return *this;
+    }
 
   LinConst& resize (int nclin, int n);
 
-  Matrix constraint_matrix (void) const;
+  Matrix constraint_matrix (void) const { return A; }
 
-  LinConst& set_constraint_matrix (const Matrix& A);
+  LinConst& set_constraint_matrix (const Matrix& amat)
+    {
+      if (lb.capacity () != amat.rows ())
+	error ("inconsistent size for new linear constraint matrix");
+
+      A = amat;
+
+      return *this;
+    }
 
   Matrix eq_constraint_matrix (void) const;
   Matrix ineq_constraint_matrix (void) const;
 
   Vector eq_constraint_vector (void) const;
   Vector ineq_constraint_vector (void) const;
 
   friend ostream& operator << (ostream& os, const LinConst& b);
@@ -78,62 +101,16 @@ protected:
   Matrix A;
 
 private:
 
   void error (const char *msg);
 
 };
 
-inline LinConst::LinConst (void) : Bounds () {}
-
-inline LinConst::LinConst (int nc, int n) : Bounds (nc), A (nb, n) {}
-
-inline LinConst::LinConst (int eq, int ineq, int n)
-  : Bounds (eq+ineq), A (nb, n) {}
-
-inline LinConst::LinConst (const Vector& l, const Matrix& amat,
-			   const Vector& u)
-  : Bounds (l, u), A (amat)
-{
-  if (nb != amat.rows ())
-    error ("inconsistent sizes for constraint matrix and bounds vectors");
-}
-
-inline LinConst::LinConst (const LinConst& a)
-  : Bounds (a.lb, a.ub), A (a.constraint_matrix ()) {}
-
-inline LinConst&
-LinConst::operator = (const LinConst& a)
-{
-  nb = a.nb;
-  lb = a.lb;
-  A  = a.A;
-  ub = a.ub;
-
-  return *this;
-}
-
-inline Matrix
-LinConst::constraint_matrix (void) const
-{
-  return A;
-}
-
-inline LinConst&
-LinConst::set_constraint_matrix (const Matrix& amat)
-{
-  if (lb.capacity () != amat.rows ())
-    error ("inconsistent size for new linear constraint matrix");
-
-  A = amat;
-
-  return *this;
-}
-
 #endif
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; page-delimiter: "^/\\*" ***
 ;;; End: ***
 */
diff --git a/liboctave/NLEqn.cc b/liboctave/NLEqn.cc
--- a/liboctave/NLEqn.cc
+++ b/liboctave/NLEqn.cc
@@ -152,17 +152,17 @@ hybrd1_fcn (int *n, double *x, double *f
     tmp_x.elem (i) = x[i];
 
   tmp_f = (*user_fun) (tmp_x);
 
   if (tmp_f.length () == 0)
     *iflag = -1;
   else
     {
-      for (i = 0; i < nn; i++)
+      for (int i = 0; i < nn; i++)
 	fvec[i] = tmp_f.elem (i);
     }
 
   return 0;
 }
 
 int
 hybrj1_fcn (int *n, double *x, double *fvec, double *fjac,
@@ -180,33 +180,33 @@ hybrj1_fcn (int *n, double *x, double *f
       Vector tmp_f (nn);
 
       tmp_f = (*user_fun) (tmp_x);
 
       if (tmp_f.length () == 0)
 	*iflag = -1;
       else
 	{
-	  for (i = 0; i < nn; i++)
+	  for (int i = 0; i < nn; i++)
 	    fvec[i] = tmp_f.elem (i);
 	}
     }
   else
     {
       Matrix tmp_fj (nn, nn);
 
       tmp_fj = (*user_jac) (tmp_x);
 
       if (tmp_fj.rows () == 0 || tmp_fj.columns () == 0)
 	*iflag = -1;
       else
 	{
 	  int ld = *ldfjac;
 	  for (int j = 0; j < nn; j++)
-	    for (i = 0; i < nn; i++)
+	    for (int i = 0; i < nn; i++)
 	      fjac[j*ld+i] = tmp_fj.elem (i, j);
 	}
     }
 
   return 0;
 }
 
 Vector
@@ -252,17 +252,17 @@ NLEqn::solve (int& info)
     }
 
   Vector retval;
 
   if (info >= 0)
     {
       retval.resize (n);
 
-      for (i = 0; i < n; i++)
+      for (int i = 0; i < n; i++)
 	retval.elem (i) = px[i];
     }
 
   delete [] fvec;
   delete [] px;
 
   return retval;
 }
diff --git a/liboctave/NPSOL.cc b/liboctave/NPSOL.cc
--- a/liboctave/NPSOL.cc
+++ b/liboctave/NPSOL.cc
@@ -102,17 +102,17 @@ npsol_objfun (int& mode, const int& n, d
       Vector tmp_grad (n);
 
       tmp_grad = (*user_grad) (tmp_x);
 
       if (tmp_grad.length () == 0)
 	mode = -1;
       else
 	{
-	  for (i = 0; i < n; i++)
+	  for (int i = 0; i < n; i++)
 	    objgrd[i] = tmp_grad.elem (i);
 	}
     }
 
   return 0;
 }
 
 int
@@ -130,33 +130,33 @@ npsol_confun (int& mode, const int& ncnl
 
   if (tmp_c.length () == 0)
     {
       mode = -1;
       return 0;
     }
   else
     {
-      for (i = 0; i < ncnln; i++)
+      for (int i = 0; i < ncnln; i++)
 	cons[i] = tmp_c.elem (i);
     }
 
   if (user_jac)
     {
       Matrix tmp_jac (ncnln, n);
 
       tmp_jac = (*user_jac) (tmp_x);
 
       if (tmp_jac.rows () == 0 || tmp_jac.columns () == 0)
 	mode = -1;
       else
 	{
 	  int ld = nrowj;
 	  for (int j = 0; j < n; j++)
-	    for (i = 0; i < ncnln; i++)
+	    for (int i = 0; i < ncnln; i++)
 	      cjac[i+j*ld] = tmp_jac (i, j);
 	}
     }
 
   return 0;
 }
 
 Vector
@@ -236,17 +236,17 @@ NPSOL::minimize (double& objf, int& info
     }
 
   for (int i = 0; i < nclin; i++)
     {
       clow[i+n] = lc.lower_bound (i);
       cup[i+n] = lc.upper_bound (i);
     }
 
-  for (i = 0; i < ncnln; i++)
+  for (int i = 0; i < ncnln; i++)
     {
       clow[i+n+nclin] = nlc.lower_bound (i);
       cup[i+n+nclin] = nlc.upper_bound (i);
     }
 
   double *c = 0;
   double *cjac = 0;
   if (ncnln > 0)
diff --git a/liboctave/QPSOL.cc b/liboctave/QPSOL.cc
--- a/liboctave/QPSOL.cc
+++ b/liboctave/QPSOL.cc
@@ -73,18 +73,16 @@ qphess (const int& n, const int& nrowh, 
     }
 
   return 0;
 }
 
 Vector
 QPSOL::minimize (double& objf, int& inform, Vector& lambda)
 {
-  int i;
-
   int n = x.capacity ();
  
   int itmax = (iteration_limit () < 0) ? 50 * n : iteration_limit ();
   int msglvl = print_level ();
   int nclin = lc.size ();
   int nctotl = nclin + n;
 
   double bigbnd = infinite_bound ();
@@ -98,42 +96,42 @@ QPSOL::minimize (double& objf, int& info
       pa = clin.fortran_vec ();
     }
 
   double *pbl = new double [nctotl];
   double *pbu = new double [nctotl];
 
   if (bnds.size () > 0)
     {
-      for (i = 0; i < n; i++)
+      for (int i = 0; i < n; i++)
 	{
 	  pbl[i] = bnds.lower_bound (i);
 	  pbu[i] = bnds.upper_bound (i);
 	}
     }
   else
     {
-      for (i = 0; i < n; i++)
+      for (int i = 0; i < n; i++)
 	{
 	  pbl[i] = -bigbnd;
 	  pbu[i] = bigbnd;
 	}
     }
 
-  for (i = 0; i < nclin; i++)
+  for (int i = 0; i < nclin; i++)
     {
       pbl[i+n] = lc.lower_bound (i);
       pbu[i+n] = lc.upper_bound (i);
     }
 
   double *pc = c.fortran_vec ();
 
   double *featol = new double [nctotl];
   double tmp = feasibility_tolerance ();
-  for (i = 0; i < nctotl; i++)
+  for (int i = 0; i < nctotl; i++)
     featol[i] = tmp;
 
   double *ph = H.fortran_vec ();
 
   int cold = 1;
   int lp = 0;
   int orthog = 1;
 
diff --git a/liboctave/dColVector.cc b/liboctave/dColVector.cc
--- a/liboctave/dColVector.cc
+++ b/liboctave/dColVector.cc
@@ -254,17 +254,17 @@ operator * (const DiagMatrix& m, const C
   if (nc == 0 || nr == 0)
     return ColumnVector (0);
 
   ColumnVector result (nr);
 
   for (int i = 0; i < a_len; i++)
     result.elem (i) = a.elem (i) * m.elem (i, i);
 
-  for (i = a_len; i < nr; i++)
+  for (int i = a_len; i < nr; i++)
     result.elem (i) = 0.0;
 
   return result;
 }
 
 // other operations
 
 ColumnVector
diff --git a/liboctave/dMatrix.cc b/liboctave/dMatrix.cc
--- a/liboctave/dMatrix.cc
+++ b/liboctave/dMatrix.cc
@@ -631,17 +631,17 @@ Matrix::ifourier (void) const
   Complex *wsave = new Complex [nn];
   Complex *tmp_data = make_complex (data (), length ());
 
   F77_FCN (cffti, CFFTI) (npts, wsave);
 
   for (int j = 0; j < nsamples; j++)
     F77_FCN (cfftb, CFFTB) (npts, &tmp_data[npts*j], wsave);
 
-  for (j = 0; j < npts*nsamples; j++)
+  for (int j = 0; j < npts*nsamples; j++)
     tmp_data[j] = tmp_data[j] / (double) npts;
 
   delete [] wsave;
 
   return ComplexMatrix (tmp_data, nr, nc);
 }
 
 ComplexMatrix
@@ -675,24 +675,24 @@ Matrix::fourier2d (void) const
   npts = nc;
   nsamples = nr;
   nn = 4*npts+15;
   wsave = new Complex [nn];
   Complex *row = new Complex[npts];
 
   F77_FCN (cffti, CFFTI) (npts, wsave);
 
-  for (j = 0; j < nsamples; j++)
+  for (int j = 0; j < nsamples; j++)
     {
       for (int i = 0; i < npts; i++)
 	row[i] = tmp_data[i*nr + j];
 
       F77_FCN (cfftf, CFFTF) (npts, row, wsave);
 
-      for (i = 0; i < npts; i++)
+      for (int i = 0; i < npts; i++)
 	tmp_data[i*nr + j] = row[i];
     }
 
   delete [] wsave;
   delete [] row;
 
   return ComplexMatrix (tmp_data, nr, nc);
 }
@@ -720,35 +720,35 @@ Matrix::ifourier2d (void) const
 
   F77_FCN (cffti, CFFTI) (npts, wsave);
 
   for (int j = 0; j < nsamples; j++)
     F77_FCN (cfftb, CFFTB) (npts, &tmp_data[npts*j], wsave);
 
   delete [] wsave;
 
-  for (j = 0; j < npts*nsamples; j++)
+  for (int j = 0; j < npts*nsamples; j++)
     tmp_data[j] = tmp_data[j] / (double) npts;
 
   npts = nc;
   nsamples = nr;
   nn = 4*npts+15;
   wsave = new Complex [nn];
   Complex *row = new Complex[npts];
 
   F77_FCN (cffti, CFFTI) (npts, wsave);
 
-  for (j = 0; j < nsamples; j++)
+  for (int j = 0; j < nsamples; j++)
     {
       for (int i = 0; i < npts; i++)
 	row[i] = tmp_data[i*nr + j];
 
       F77_FCN (cfftb, CFFTB) (npts, row, wsave);
 
-      for (i = 0; i < npts; i++)
+      for (int i = 0; i < npts; i++)
 	tmp_data[i*nr + j] = row[i] / (double) npts;
     }
 
   delete [] wsave;
   delete [] row;
 
   return ComplexMatrix (tmp_data, nr, nc);
 }
@@ -1005,19 +1005,18 @@ Matrix::lssolve (const Matrix& b, int& i
       return Matrix ();
     }
 
   double *tmp_data = dup (data (), length ());
 
   int nrr = m > n ? m : n;
   Matrix result (nrr, nrhs);
 
-  int i, j;
-  for (j = 0; j < nrhs; j++)
-    for (i = 0; i < m; i++)
+  for (int j = 0; j < nrhs; j++)
+    for (int i = 0; i < m; i++)
       result.elem (i, j) = b.elem (i, j);
 
   double *presult = result.fortran_vec ();
 
   int len_s = m < n ? m : n;
   double *s = new double [len_s];
   double rcond = -1.0;
   int lwork;
@@ -1027,18 +1026,18 @@ Matrix::lssolve (const Matrix& b, int& i
     lwork = 3*n + (2*n > nrhs ? (2*n > m ? 2*n : m) : (nrhs > m ? nrhs : m));
 
   double *work = new double [lwork];
 
   F77_FCN (dgelss, DGELSS) (m, n, nrhs, tmp_data, m, presult, nrr, s,
 			    rcond, rank, work, lwork, info);
 
   Matrix retval (n, nrhs);
-  for (j = 0; j < nrhs; j++)
-    for (i = 0; i < n; i++)
+  for (int j = 0; j < nrhs; j++)
+    for (int i = 0; i < n; i++)
       retval.elem (i, j) = result.elem (i, j);
 
   delete [] tmp_data;
   delete [] s;
   delete [] work;
 
   return retval;
 }
@@ -1093,18 +1092,17 @@ Matrix::lssolve (const ColumnVector& b, 
       return ColumnVector ();
     }
 
   double *tmp_data = dup (data (), length ());
 
   int nrr = m > n ? m : n;
   ColumnVector result (nrr);
 
-  int i;
-  for (i = 0; i < m; i++)
+  for (int i = 0; i < m; i++)
     result.elem (i) = b.elem (i);
 
   double *presult = result.fortran_vec ();
 
   int len_s = m < n ? m : n;
   double *s = new double [len_s];
   double rcond = -1.0;
   int lwork;
@@ -1114,17 +1112,17 @@ Matrix::lssolve (const ColumnVector& b, 
     lwork = 3*n + (2*n > nrhs ? (2*n > m ? 2*n : m) : (nrhs > m ? nrhs : m));
 
   double *work = new double [lwork];
 
   F77_FCN (dgelss, DGELSS) (m, n, nrhs, tmp_data, m, presult, nrr, s,
 			    rcond, rank, work, lwork, info);
 
   ColumnVector retval (n);
-  for (i = 0; i < n; i++)
+  for (int i = 0; i < n; i++)
     retval.elem (i) = result.elem (i);
 
   delete [] tmp_data;
   delete [] s;
   delete [] work;
 
   return retval;
 }
diff --git a/liboctave/dbleLU.cc b/liboctave/dbleLU.cc
--- a/liboctave/dbleLU.cc
+++ b/liboctave/dbleLU.cc
@@ -58,50 +58,46 @@ LU::LU (const Matrix& a)
   double *tmp_data = dup (a.data (), a.length ());
   int info = 0;
   double b;
 
   F77_FCN (dgesv, DGESV) (n, 0, tmp_data, n, ipvt, b, n, info);
 
   Matrix A_fact (tmp_data, n, n);
 
-  int i;
-
-  for (i = 0; i < n; i++)
+  for (int i = 0; i < n; i++)
     {
       ipvt[i] -= 1;
       pvt[i] = i;
     }
 
-  for (i = 0; i < n - 1; i++)
+  for (int i = 0; i < n - 1; i++)
     {
       int k = ipvt[i];
       if (k != i)
 	{
 	  int tmp = pvt[k];
 	  pvt[k] = pvt[i];
 	  pvt[i] = tmp;
 	}
     }
 
   l.resize (n, n, 0.0);
   u.resize (n, n, 0.0);
   p.resize (n, n, 0.0);
 
-  for (i = 0; i < n; i++)
+  for (int i = 0; i < n; i++)
     {
       p.elem (i, pvt[i]) = 1.0;
 
-      int j;
-
       l.elem (i, i) = 1.0;
-      for (j = 0; j < i; j++)
+      for (int j = 0; j < i; j++)
 	l.elem (i, j) = A_fact.elem (i, j);
 
-      for (j = i; j < n; j++)
+      for (int j = i; j < n; j++)
 	u.elem (i, j) = A_fact.elem (i, j);
     }
 
   delete [] ipvt;
   delete [] pvt;
 }
 
 /*
diff --git a/liboctave/idx-vector.cc b/liboctave/idx-vector.cc
--- a/liboctave/idx-vector.cc
+++ b/liboctave/idx-vector.cc
@@ -253,17 +253,17 @@ idx_vector::convert_one_zero_to_idx (voi
 	  new_data[count++] = i;
 
       delete [] data;
       len = num_ones;
       data = new_data;
 
       min_val = max_val = data[0];
 
-      i = 0;
+      int i = 0;
       do
 	{
 	  if (data[i] > max_val)
 	    max_val = data[i];
 
 	  if (data[i] < min_val)
 	    min_val = data[i];
 	}
diff --git a/src/Map.cc b/src/Map.cc
--- a/src/Map.cc
+++ b/src/Map.cc
@@ -50,17 +50,19 @@ hash (const char *str)
     h = h * 33 + *str++;
   return h;
 }
 
 template <class C>
 Pix
 Map<C>::seek (const char *item) const
 {
-  for (Pix i = first (); i != 0 && strcmp (key (i), item) != 0; next (i))
+  Pix i = 0;
+
+  for (i = first (); i != 0 && strcmp (key (i), item) != 0; next (i))
     ; // Skip items until match found.
 
   return i;
 }
 
 template <class C>
 int
 Map<C>::owns (Pix idx) const
@@ -163,17 +165,18 @@ CHMap<C>::seek (const char *key) const
 }
 
 template <class C>
 C&
 CHMap<C>::operator [] (const char *item)
 {
   unsigned int h = hash (item) % size;
 
-  for (CHNode<C> *t = tab[h]; goodCHptr (t); t = t->tl)
+  CHNode<C> *t = 0;
+  for (t = tab[h]; goodCHptr (t); t = t->tl)
     if (strcmp (item, t->hd) == 0)
       return t->cont;
 
   t = new CHNode<C> (item, def, tab[h]);
   tab[h] = t;
   ++count;
   return t->cont;
 }
@@ -256,17 +259,19 @@ template <class C>
 int
 CHMap<C>::OK (void) const
 {
   int v = tab != 0;
   int n = 0;
 
   for (unsigned int i = 0; i < size; ++i)
     {
-      for (CHNode<C> *p = tab[i]; goodCHptr (p); p = p->tl)
+      CHNode<C> *p = 0;
+
+      for (p = tab[i]; goodCHptr (p); p = p->tl)
 	++n;
 
       v &= CHptr_to_index (p) == i + 1;
     }
 
   v &= count == n;
 
   if (! v)
diff --git a/src/oct-hist.cc b/src/oct-hist.cc
--- a/src/oct-hist.cc
+++ b/src/oct-hist.cc
@@ -254,17 +254,19 @@ do_history (int argc, char **argv)
 	  return;
         }
     }
 
   hlist = history_list ();
 
   if (hlist)
     {
-      for (int i = 0; hlist[i]; i++)
+      int i = 0;
+
+      for (i = 0; hlist[i]; i++)
 	; // Do nothing.
 
       if (limit < 0)
 	limit = -limit;
 
       if (!limited)
 	i = 0;
       else
@@ -360,17 +362,19 @@ edit_history_repl_hist (char *command)
   if (! command || ! *command)
     return;
 
   HIST_ENTRY **hlist = history_list ();
 
   if (! hlist)
     return;
 
-  for (int i = 0; hlist[i]; i++)
+  int i = 0;
+
+  for (i = 0; hlist[i]; i++)
     ; // Count 'em.
   i--;
 
 // History_get () takes a parameter that should be offset by history_base.
 
 // Don't free this.
   HIST_ENTRY *histent = history_get (history_base + i);
   if (! histent)
diff --git a/src/pt-const.cc b/src/pt-const.cc
--- a/src/pt-const.cc
+++ b/src/pt-const.cc
@@ -74,17 +74,19 @@ tree_constant::operator new (size_t size
 {
   assert (size == sizeof (tree_constant));
 
   if (! tc_newlist)
     {
       int block_size = tc_newlist_grow_size * sizeof (tree_constant);
       tc_newlist = (tree_constant *) new char [block_size];
 
-      for (int i = 0; i < tc_newlist_grow_size - 1; i++)
+      int i = 0;
+
+      for (i = 0; i < tc_newlist_grow_size - 1; i++)
 	tc_newlist[i].freeptr = &tc_newlist[i+1];
 
       tc_newlist[i].freeptr = 0;
     }
 
   tree_constant *tmp = tc_newlist;
   tc_newlist = tc_newlist->freeptr;
   return tmp;
@@ -810,17 +812,19 @@ TC_REP::operator new (size_t size)
 {
   assert (size == sizeof (TC_REP));
 
   if (! tc_rep_newlist)
     {
       int block_size = tc_rep_newlist_grow_size * sizeof (TC_REP);
       tc_rep_newlist = (TC_REP *) new char [block_size];
 
-      for (int i = 0; i < tc_rep_newlist_grow_size - 1; i++)
+      int i = 0;
+
+      for (i = 0; i < tc_rep_newlist_grow_size - 1; i++)
 	tc_rep_newlist[i].freeptr = &tc_rep_newlist[i+1];
 
       tc_rep_newlist[i].freeptr = 0;
     }
 
   TC_REP *tmp = tc_rep_newlist;
   tc_rep_newlist = tc_rep_newlist->freeptr;
   return tmp;
diff --git a/src/pt-exp-base.cc b/src/pt-exp-base.cc
--- a/src/pt-exp-base.cc
+++ b/src/pt-exp-base.cc
@@ -408,17 +408,17 @@ tree_matrix::eval (int print)
     }
 
 //  if (all_strings)
 //    cerr << "all strings\n";
 
 // Compute size of result matrix, and check to see that the dimensions
 // of all the elements will match up properly.
 
-  for (i = 0; i < len; i++)
+  for (int i = 0; i < len; i++)
     {
       dir direct = list[i].direction;
 
       int nr = list[i].nr;
       int nc = list[i].nc;
 
       if (i == 0)
 	{
@@ -485,17 +485,17 @@ tree_matrix::eval (int print)
       string = str_ptr = new char [col_total + 1];
       string[col_total] = '\0';
     }
   else if (found_complex)
     cm.resize (row_total, col_total, 0.0);
   else
     m.resize (row_total, col_total, 0.0);
 
-  for (i = 0; i < len; i++)
+  for (int i = 0; i < len; i++)
     {
       tree_constant tmp = list[i].elem;
 
       int nr = list[i].nr;
       int nc = list[i].nc;
 
       if (nr == 0 || nc == 0)
 	continue;
diff --git a/src/pt-misc.cc b/src/pt-misc.cc
--- a/src/pt-misc.cc
+++ b/src/pt-misc.cc
@@ -363,17 +363,17 @@ tree_parameter_list::convert_to_const_ve
       if (elt->is_defined ())
 	retval(i) = elt->eval (0);
 
       i++;
     }
 
   if (vr_list)
     {
-      for (p = vr_list->first (); p != 0; vr_list->next (p))
+      for (Pix p = vr_list->first (); p != 0; vr_list->next (p))
 	{
 	  retval(i) = vr_list->operator () (p);
 	  i++;
 	}
     }
 
   return retval;
 }
diff --git a/src/utils.cc b/src/utils.cc
--- a/src/utils.cc
+++ b/src/utils.cc
@@ -585,17 +585,18 @@ empty_arg (const char *name, int nr, int
 
 ostrstream&
 list_in_columns (ostrstream& os, char **list)
 {
 // Compute the maximum name length.
 
   int max_name_length = 0;
   int total_names = 0;
-  for (char **names = list; *names; names++)
+  char **names = 0;
+  for (names = list; *names; names++)
     {
       total_names++;
       int name_length = strlen (*names);
       if (name_length > max_name_length)
 	max_name_length = name_length;
     }
 
 // Allow at least two spaces between names.
diff --git a/src/xpow.cc b/src/xpow.cc
--- a/src/xpow.cc
+++ b/src/xpow.cc
@@ -525,50 +525,49 @@ tree_constant
 elem_xpow (const Matrix& a, const Matrix& b)
 {
   int nr = a.rows ();
   int nc = a.columns ();
 
   assert (nr == b.rows () && nc == b.columns ());
 
   int convert_to_complex = 0;
-  int i;
   for (int j = 0; j < nc; j++)
-    for (i = 0; i < nr; i++)
+    for (int i = 0; i < nr; i++)
       {
 	double atmp = a.elem (i, j);
 	double btmp = b.elem (i, j);
 	if (atmp < 0.0 && (int) btmp != btmp)
 	  {
 	    convert_to_complex = 1;
 	    goto done;
 	  }
       }
 
  done:
 
   if (convert_to_complex)
     {
       ComplexMatrix complex_result (nr, nc);
 
-      for (j = 0; j < nc; j++)
-	for (i = 0; i < nr; i++)
+      for (int j = 0; j < nc; j++)
+	for (int i = 0; i < nr; i++)
 	  {
 	    Complex atmp (a.elem (i, j));
 	    Complex btmp (b.elem (i, j));
 	    complex_result.elem (i, j) = pow (atmp, btmp);
 	  }
       return tree_constant (complex_result);
     }
   else
     {
       Matrix result (nr, nc);
 
-      for (j = 0; j < nc; j++)
-	for (i = 0; i < nr; i++)
+      for (int j = 0; j < nc; j++)
+	for (int i = 0; i < nr; i++)
 	  result.elem (i, j) = pow (a.elem (i, j), b.elem (i, j));
 
       return tree_constant (result);
     }
 }
 
 // -*- 5 -*-
 tree_constant
