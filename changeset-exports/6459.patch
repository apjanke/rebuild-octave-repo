# HG changeset patch
# User jwe
# Date 1174932718 0
#      Mon Mar 26 18:11:58 2007 +0000
# Node ID 5dc550e1f4193f891fe0de14ab5c0ead9951c432
# Parent  6588b4fe086935baead727089d817a1d1ab05b2f
[project @ 2007-03-26 18:11:58 by jwe]

diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,8 +1,21 @@
+2007-03-26  John W. Eaton  <jwe@octave.org>
+
+	* plot/__plt1__.m, plot/__plt2__.m, plot/__plt2mm__.m,
+	lot/__plt2mv__.m, plot/__plt2ss__.m, plot/__plt2vm__.m,
+	plot/__plt2vv__.m: Accept properties in addtition to options struct.
+
+2007-03-26  David Bateman  <dbateman@free.fr>
+
+	* plot/plot3.m: Handle line properties.
+	* plot/plot.m: Update docstring.
+	* plot/__plotopt__.m, plot/__pltopt1__.m: New arg, err_on_invalid.
+	* plot/__plt__.m: Also gather properties.
+
 2007-03-26  Kim Hansen  <kimhanse@gmail.com>
 
 	* testfun/assert.m: Delete special check for empty objects.
 	Add test.
 
 2007-03-26  John W. Eaton  <jwe@octave.org>
 
 	* plot/drawnow.m: Exit early if call is recursive.
diff --git a/scripts/plot/__plt1__.m b/scripts/plot/__plt1__.m
--- a/scripts/plot/__plt1__.m
+++ b/scripts/plot/__plt1__.m
@@ -13,31 +13,35 @@
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, write to the Free
 ## Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
 ## 02110-1301, USA.
 
 ## -*- texinfo -*-
-## @deftypefn {Function File} {} __plt1__ (@var{h}, @var{x1}, @var{fmt}, @var{key})
+## @deftypefn {Function File} {} __plt1__ (@var{h}, @var{x1}, @var{options}, @var{properties})
 ## @end deftypefn
 
 ## Author: jwe
 
-function retval = __plt1__ (h, x1, options)
+function retval = __plt1__ (h, x1, options, properties)
 
-  if (nargin < 2 || nargin > 3)
+  if (nargin < 2 || nargin > 4)
     print_usage ();
   endif
 
   if (nargin < 3 || isempty (options))
     options = __default_plot_options__ ();
   endif
 
+  if (nargin < 4)
+    properties = {};
+  endif
+
   if (! isstruct (options))
     error ("__plt1__: options must be a struct array");
   endif
 
   [nr, nc] = size (x1);
   if (nr == 1)
     x1 = x1.';
     tmp = nr;
@@ -48,11 +52,11 @@ function retval = __plt1__ (h, x1, optio
   if (any (any (x1_i)))
     x2 = x1_i;
     x1 = real (x1);
   else
     x2 = x1;
     x1 = (1:nr)';
   endif
 
-  retval = __plt2__ (h, x1, x2, options);
+  retval = __plt2__ (h, x1, x2, options, properties);
 
 endfunction
diff --git a/scripts/plot/__plt2__.m b/scripts/plot/__plt2__.m
--- a/scripts/plot/__plt2__.m
+++ b/scripts/plot/__plt2__.m
@@ -13,63 +13,67 @@
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, write to the Free
 ## Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
 ## 02110-1301, USA.
 
 ## -*- texinfo -*-
-## @deftypefn {Function File} {} __plt2__ (@var{h}, @var{x1}, @var{x2}, @var{options})
+## @deftypefn {Function File} {} __plt2__ (@var{h}, @var{x1}, @var{x2}, @var{options}, @var{properties})
 ## @end deftypefn
 
 ## Author: jwe
 
-function retval = __plt2__ (h, x1, x2, options)
+function retval = __plt2__ (h, x1, x2, options, properties)
 
-  if (nargin < 3 || nargin > 4)
+  if (nargin < 3 || nargin > 5)
     print_usage ();
   endif
 
   if (nargin < 4 || isempty (options))
     options = __default_plot_options__ ();
   endif
 
+  if (nargin < 5)
+    properties = {};
+  endif
+
   if (! isstruct (options))
     error ("__plt1__: options must be a struct array");
   endif
 
   if (any (any (imag (x1))))
     x1 = real (x1);
   endif
 
   if (any (any (imag (x2))))
     x2 = real (x2);
   endif
 
   h_set = false;
   if (isscalar (x1))
     if (isscalar (x2))
-      retval = __plt2ss__ (h, x1, x2, options);
+      retval = __plt2ss__ (h, x1, x2, options, properties);
     else
       error ("__plt2__: invalid data for plotting");
     endif
   elseif (isvector (x1))
     if (isvector (x2))
-      retval = __plt2vv__ (h, x1, x2, options);
+      retval = __plt2vv__ (h, x1, x2, options, properties);
     elseif (ismatrix (x2))
-      retval = __plt2vm__ (h, x1, x2, options);
+      retval = __plt2vm__ (h, x1, x2, options, properties);
     else
       error ("__plt2__: invalid data for plotting");
     endif
   elseif (ismatrix (x1))
     if (isvector (x2))
-      retval = __plt2mv__ (h, x1, x2, options);
+      retval = __plt2mv__ (h, x1, x2, options, properties);
     elseif (ismatrix (x2))
-      retval = __plt2mm__ (h, x1, x2, options);
+      retval = __plt2mm__ (h, x1, x2, options, properties);
     else
       error ("__plt2__: invalid data for plotting");
     endif
   elseif (isempty (x1) && isempty (x2))
     ## FIXME -- should we do nothing, or should we create a line object
     ## with empty xdata and ydata properties?
   else
     error ("__plt2__: invalid data for plotting");
diff --git a/scripts/plot/__plt2mm__.m b/scripts/plot/__plt2mm__.m
--- a/scripts/plot/__plt2mm__.m
+++ b/scripts/plot/__plt2mm__.m
@@ -13,31 +13,35 @@
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, write to the Free
 ## Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
 ## 02110-1301, USA.
 
 ## -*- texinfo -*-
-## @deftypefn {Function File} {} __plt2mm__ (@var{h}, @var{x}, @var{y}, @var{options})
+## @deftypefn {Function File} {} __plt2mm__ (@var{h}, @var{x}, @var{y}, @var{options}, @var{properties})
 ## @end deftypefn
 
 ## Author: jwe
 
-function retval = __plt2mm__ (h, x, y, options)
+function retval = __plt2mm__ (h, x, y, options, properties)
 
-  if (nargin < 3 || nargin > 4)
+  if (nargin < 3 || nargin > 5)
     print_usage ();
   endif
 
   if (nargin < 4 || isempty (options))
     options = __default_plot_options__ ();
   endif
 
+  if (nargin < 5)
+    properties = {};
+  endif
+
   [x_nr, x_nc] = size (x);
   [y_nr, y_nc] = size (y);
 
   k = 1;
   if (x_nr == y_nr && x_nc == y_nc)
     if (x_nc > 0)
       if (numel (options) == 1)
 	options = repmat (options(:), x_nc, 1);
@@ -49,17 +53,17 @@ function retval = __plt2mm__ (h, x, y, o
 	  set (h, "key", "on");
 	endif
 	color = options(i).color;
 	if (isempty (color))
 	  color = __next_line_color__ ();
 	endif
 	retval(i) = line (x(:,i), y(:,i), "keylabel", tkey, "color", color,
 			  "linestyle", options(i).linestyle,
-			  "marker", options(i).marker);
+			  "marker", options(i).marker, properties{:});
       endfor
     else
       error ("__plt2mm__: arguments must be a matrices");
     endif
   else
     error ("__plt2mm__: matrix dimensions must match");
   endif
 
diff --git a/scripts/plot/__plt2mv__.m b/scripts/plot/__plt2mv__.m
--- a/scripts/plot/__plt2mv__.m
+++ b/scripts/plot/__plt2mv__.m
@@ -13,31 +13,35 @@
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, write to the Free
 ## Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
 ## 02110-1301, USA.
 
 ## -*- texinfo -*-
-## @deftypefn {Function File} {} __plt2mv__ (@var{h}, @var{x}, @var{y}, @var{options})
+## @deftypefn {Function File} {} __plt2mv__ (@var{h}, @var{x}, @var{y}, @var{options}, @var{properties})
 ## @end deftypefn
 
 ## Author: jwe
 
-function retval = __plt2mv__ (h, x, y, options)
+function retval = __plt2mv__ (h, x, y, options, properties)
 
-  if (nargin < 3 || nargin > 4)
+  if (nargin < 3 || nargin > 5)
     print_usage ();
   endif
 
   if (nargin < 4 || isempty (options))
     options = __default_plot_options__ ();
   endif
 
+  if (nargin < 5)
+    properties = {};
+  endif
+
   [x_nr, x_nc] = size (x);
   [y_nr, y_nc] = size (y);
 
   if (y_nr == 1)
     y = y';
     tmp = y_nr;
     y_nr = y_nc;
     y_nc = tmp;
@@ -65,15 +69,15 @@ function retval = __plt2mv__ (h, x, y, o
 	set (h, "key", "on");
       endif
       color = options(i).color;
       if (isempty (color))
 	color = __next_line_color__ ();
       endif
       retval(i) = line (x(:,i), y, "keylabel", tkey, "color", color,
 			"linestyle", options(i).linestyle,
-			"marker", options(i).marker);
+			"marker", options(i).marker, properties{:});
     endfor
   else
     error ("__plt2mv__: arguments must be a matrices");
   endif
 
 endfunction
diff --git a/scripts/plot/__plt2ss__.m b/scripts/plot/__plt2ss__.m
--- a/scripts/plot/__plt2ss__.m
+++ b/scripts/plot/__plt2ss__.m
@@ -13,31 +13,35 @@
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, write to the Free
 ## Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
 ## 02110-1301, USA.
 
 ## -*- texinfo -*-
-## @deftypefn {Function File} {} __plt2ss__ (@var{h}, @var{x}, @var{y}, @var{options})
+## @deftypefn {Function File} {} __plt2ss__ (@var{h}, @var{x}, @var{y}, @var{options}, @var{properties})
 ## @end deftypefn
 
 ## Author: jwe
 
-function retval = __plt2ss__ (h, x, y, options)
+function retval = __plt2ss__ (h, x, y, options, properties)
 
-  if (nargin < 3 || nargin > 4)
+  if (nargin < 3 || nargin > 5)
     print_usage ();
   endif
 
   if (nargin < 4 || isempty (options))
     options = __default_plot_options__ ();
   endif
 
+  if (nargin < 5)
+    properties = {};
+  endif
+
   if (numel (options) > 1)
     options = options(1);
   endif
 
   [x_nr, x_nc] = size (x);
   [y_nr, y_nc] = size (y);
 
   if (x_nr == 1 && x_nr == y_nr && x_nc == 1 && x_nc == y_nc)
@@ -46,14 +50,14 @@ function retval = __plt2ss__ (h, x, y, o
       set (h, "key", "on");
     endif
     color = options.color;
     if (isempty (color))
       color = __next_line_color__ ();
     endif
     retval = line (x, y, "keylabel", key, "color", color,
 		   "linestyle", options.linestyle,
-		   "marker", options.marker);
+		   "marker", options.marker, properties{:});
   else
     error ("__plt2ss__: arguments must be scalars");
   endif
 
 endfunction
diff --git a/scripts/plot/__plt2vm__.m b/scripts/plot/__plt2vm__.m
--- a/scripts/plot/__plt2vm__.m
+++ b/scripts/plot/__plt2vm__.m
@@ -13,31 +13,35 @@
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, write to the Free
 ## Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
 ## 02110-1301, USA.
 
 ## -*- texinfo -*-
-## @deftypefn {Function File} {} __plt2vm__ (@var{h}, @var{x}, @var{y}, @var{options})
+## @deftypefn {Function File} {} __plt2vm__ (@var{h}, @var{x}, @var{y}, @var{options}, @var{properties})
 ## @end deftypefn
 
 ## Author: jwe
 
-function retval = __plt2vm__ (h, x, y, options)
+function retval = __plt2vm__ (h, x, y, options, properties)
 
-  if (nargin < 3 || nargin > 4)
+  if (nargin < 3 || nargin > 5)
     print_usage ();
   endif
 
   if (nargin < 4 || isempty (options))
     options = __default_plot_options__ ();
   endif
 
+  if (nargin < 5)
+    properties = {};
+  endif
+
   [x_nr, x_nc] = size (x);
   [y_nr, y_nc] = size (y);
 
   if (x_nr == 1)
     x = x';
     tmp = x_nr;
     x_nr = x_nc;
     x_nc = tmp;
@@ -65,15 +69,15 @@ function retval = __plt2vm__ (h, x, y, o
 	set (h, "key", "on");
       endif
       color = options(i).color;
       if (isempty (color))
 	color = __next_line_color__ ();
       endif
       retval(i) = line (x, y(:,i), "keylabel", tkey, "color", color,
 			"linestyle", options(i).linestyle,
-			"marker", options(i).marker);
+			"marker", options(i).marker, properties{:});
     endfor
   else
     error ("__plt2vm__: arguments must be a matrices");
   endif
 
 endfunction
diff --git a/scripts/plot/__plt2vv__.m b/scripts/plot/__plt2vv__.m
--- a/scripts/plot/__plt2vv__.m
+++ b/scripts/plot/__plt2vv__.m
@@ -13,31 +13,35 @@
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, write to the Free
 ## Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
 ## 02110-1301, USA.
 
 ## -*- texinfo -*-
-## @deftypefn {Function File} {} __plt2vv__ (@var{h}, @var{x}, @var{y}, @var{options})
+## @deftypefn {Function File} {} __plt2vv__ (@var{h}, @var{x}, @var{y}, @var{options}, @var{properties})
 ## @end deftypefn
 
 ## Author: jwe
 
-function retval = __plt2vv__ (h, x, y, options)
+function retval = __plt2vv__ (h, x, y, options, properties)
 
-  if (nargin < 3 || nargin > 4)
+  if (nargin < 3 || nargin > 5)
     print_usage ();
   endif
 
   if (nargin < 4 || isempty (options))
     options = __default_plot_options__ ();
   endif
 
+  if (nargin < 5)
+    properties = {};
+  endif
+
   if (numel (options) > 1)
     options = options(1);
   endif
 
   [x_nr, x_nc] = size (x);
   [y_nr, y_nc] = size (y);
 
   if (x_nr == 1)
@@ -60,14 +64,14 @@ function retval = __plt2vv__ (h, x, y, o
       set (h, "key", "on");
     endif
     color = options.color;
     if (isempty (color))
       color = __next_line_color__ ();
     endif
     retval = line (x, y, "keylabel", key, "color", color,
 		   "linestyle", options.linestyle,
-		   "marker", options.marker);
+		   "marker", options.marker, properties{:});
   else
     error ("__plt2vv__: vector lengths must match");
   endif
 
 endfunction
diff --git a/scripts/plot/__plt__.m b/scripts/plot/__plt__.m
--- a/scripts/plot/__plt__.m
+++ b/scripts/plot/__plt__.m
@@ -28,65 +28,92 @@ function retval = __plt__ (caller, h, va
   nargs = nargin - 2;
 
   if (nargs > 0)
 
     k = 1;
 
     x_set = false;
     y_set = false;
+    property_set = false;
+    properties = {};
 
     ## Gather arguments, decode format, gather plot strings, and plot lines.
 
     retval = [];
 
     while (nargs > 0 || x_set)
 
       if (nargs == 0)
 	## Force the last plot when input variables run out.
+	next_cell = {};
 	next_arg = {""};
       else
+	next_cell = varargin(k);
 	next_arg = varargin{k++};
       endif
 
       nargs--;
 
       if (ischar (next_arg) || iscellstr (next_arg))
 	if (x_set)
-	  options = __pltopt__ (caller, next_arg);
+	  [options, valid] = __pltopt__ (caller, next_arg, false);
+	  if (! valid)
+	    if (nargs == 0)
+	      error ("%s: properties must appear followed by a value", caller);
+	    endif
+	    properties = [properties, [next_cell, varargin(k++)]];
+	    nargs--;
+	    continue;
+	  else
+	    while (nargs > 0 && ischar (varargin{k}))
+	      if (nargs < 2)
+		error ("%s: properties must appear followed by a value",
+		       caller);
+	      endif
+	      properties = [properties, varargin(k:k+1)];
+	      k += 2;
+	      nargs -= 2;
+	    endwhile
+	  endif
 	  if (y_set)
-	    tmp = __plt2__ (h, x, y, options);
+	    tmp = __plt2__ (h, x, y, options, properties);
+	    properties = {};
 	    retval = [retval; tmp];
 	  else
-	    tmp = __plt1__ (h, x, options);
+	    tmp = __plt1__ (h, x, options, properties);
+	    properties = {};
 	    retval = [retval; tmp];
 	  endif
 	  x_set = false;
 	  y_set = false;
 	else
 	  error ("plot: no data to plot");
 	endif
       elseif (x_set)
 	if (y_set)
 	  options = __pltopt__ (caller, {""});
-	  tmp = __plt2__ (h, x, y, options);
+	  tmp = __plt2__ (h, x, y, options, properties);
 	  retval = [retval; tmp];
 	  x = next_arg;
 	  y_set = false;
+	  properties = {};
 	else
 	  y = next_arg;
 	  y_set = true;
 	endif
       else
 	x = next_arg;
 	x_set = true;
       endif
 
     endwhile
 
   else
     msg = sprintf ("%s (y)\n", caller);
     msg = sprintf ("%s       %s (x, y, ...)\n", msg, caller);
     msg = sprintf ("%s       %s (x, y, fmt, ...)", msg, caller);
+    msg = sprintf ("%s       %s (x, y, property, value, ...)", msg, caller);
     usage (msg);
   endif
 
 endfunction
+  
diff --git a/scripts/plot/__pltopt1__.m b/scripts/plot/__pltopt1__.m
--- a/scripts/plot/__pltopt1__.m
+++ b/scripts/plot/__pltopt1__.m
@@ -22,23 +22,24 @@
 ## Really decode plot option strings.
 ## @seealso{__pltopt__}
 ## @end deftypefn
 
 ## Author: Rick Niles <niles@axp745.gsfc.nasa.gov>
 ## Adapted-By: jwe
 ## Maintainer: jwe
 
-function options = __pltopt1__ (caller, opt)
+function [options, valid] = __pltopt1__ (caller, opt, err_on_invalid)
 
   options = __default_plot_options__ ();
+  valid = true;
 
   more_opts = 1;
 
-  if (nargin != 2)
+  if (nargin != 2 && nargin != 3)
     print_usage ();
   endif
 
   if (! ischar (opt))
     return;
   endif
 
   have_linestyle = false;
@@ -85,20 +86,32 @@ function options = __pltopt1__ (caller, 
       elseif (isspace (topt))
 	## Do nothing.
       elseif (topt == ";")
 	t = index (opt(2:end), ";");
 	if (t)
 	  options.key = undo_string_escapes (opt(2:t));
 	  n = t+1;
 	else
-          error ("%s: unfinished key label", caller);
+	  if (err_on_invalid)
+            error ("%s: unfinished key label", caller);
+	  else
+	    valid = false;
+	    options = __default_plot_options__ ();
+	    return;
+	  endif
         endif
       else
-	error ("%s: unrecognized format character: `%s'", caller, topt);
+	if (err_on_invalid)
+	  error ("%s: unrecognized format character: `%s'", caller, topt);
+	else
+	  valid = false;
+	  options = __default_plot_options__ ();
+	  return;
+	endif
       endif
     endif
     opt(1:n) = [];
   endwhile
 
   if (have_marker && ! have_linestyle)
     options.linestyle = "";
   endif
diff --git a/scripts/plot/__pltopt__.m b/scripts/plot/__pltopt__.m
--- a/scripts/plot/__pltopt__.m
+++ b/scripts/plot/__pltopt__.m
@@ -83,29 +83,38 @@
 ## The legend may be fixed to include the name of the variable
 ## plotted in some future version of Octave.
 ##
 ## @seealso{__pltopt1__}
 ## @end deftypefn
 
 ## Author: jwe
 
-function options = __pltopt__ (caller, opt)
+function [options, valid] = __pltopt__ (caller, opt, err_on_invalid)
+
+  valid = true;
+  options =  __default_plot_options__ ();
 
-  if (nargin == 2 && nargout == 1)
+  if ((nargin == 2 || nargin == 3) && (nargout == 1 || nargout == 2))
+    if (nargin == 2)
+      err_on_invalid = true;
+    endif
     if (ischar (opt))
       nel = rows (opt);
     elseif (iscellstr (opt))
       nel = numel (opt);
     else
       error ("__pltopt__: expecting argument to be character string or cell array of character strings");
     endif
     if (ischar (opt))
       opt = cellstr (opt);
     endif
     for i = nel:-1:1
-      options(i) = __pltopt1__ (caller, opt{i});
+      [options(i), valid] = __pltopt1__ (caller, opt{i}, err_on_invalid);
+      if (! err_on_invalid && ! valid)
+	return;
+      endif
     endfor
   else
     print_usage ();
   endif
 
 endfunction
diff --git a/scripts/plot/plot.m b/scripts/plot/plot.m
--- a/scripts/plot/plot.m
+++ b/scripts/plot/plot.m
@@ -32,23 +32,30 @@
 ## starting with 1.
 ##
 ## To save a plot, in one of several image formats such as PostScript
 ## or PNG, use the @code{print} command.
 ##
 ## If more than one argument is given, they are interpreted as
 ##
 ## @example
-## plot (@var{x}, @var{y}, @var{fmt} ...)
+## plot (@var{x}, @var{y}, @var{fmt}, @dots{})
 ## @end example
 ##
 ## @noindent
-## where @var{y} and @var{fmt} are optional, and any number of argument
-## sets may appear.  The @var{x} and @var{y} values are
-## interpreted as follows:
+## or as
+##
+## @example
+## plot (@var{x}, @var{y}, @var{property}, @var{value}, @dots{})
+## @end example
+##
+## @noindent
+## where @var{y}, @var{fmt}, @var{property} and @var{value} are optional,
+## and any number of argument sets may appear.  The @var{x} and @var{y} 
+## values are interpreted as follows:
 ##
 ## @itemize @bullet
 ## @item
 ## If a single data argument is supplied, it is taken as the set of @var{y}
 ## coordinates and the @var{x} coordinates are taken to be the indices of
 ## the elements, starting with 1.
 ##
 ## @item
@@ -130,32 +137,35 @@
 ## @end example
 ##
 ## The @var{fmt} argument can also be used to assign key titles.
 ## To do so, include the desired title between semi-colons after the
 ## formatting sequence described above, e.g. "+3;Key Title;"
 ## Note that the last semi-colon is required and will generate an error if
 ## it is left out.
 ##
+## If a @var{property} is given it must be followed by @var{value}.  The
+## property value pairs are applied to the lines drawn by @code{plot}.
+##
 ## Here are some plot examples:
 ##
 ## @example
 ## plot (x, y, "@@12", x, y2, x, y3, "4", x, y4, "+")
 ## @end example
 ##
 ## This command will plot @code{y} with points of type 2 (displayed as
 ## @samp{+}) and color 1 (red), @code{y2} with lines, @code{y3} with lines of
 ## color 4 (magenta) and @code{y4} with points displayed as @samp{+}.
 ##
 ## @example
-## plot (b, "*")
+## plot (b, "*", "markersize", 3)
 ## @end example
 ##
 ## This command will plot the data in the variable @code{b} will be plotted
-## with points displayed as @samp{*}.
+## with points displayed as @samp{*} with a marker size of 3.
 ##
 ## @example
 ## t = 0:0.1:6.3;
 ## plot (t, cos(t), "-;cos(t);", t, sin(t), "+3;sin(t);");
 ## @end example
 ##
 ## This will plot the cosine and sine functions and label them accordingly
 ## in the key.
diff --git a/scripts/plot/plot3.m b/scripts/plot/plot3.m
--- a/scripts/plot/plot3.m
+++ b/scripts/plot/plot3.m
@@ -93,22 +93,33 @@
 ## Author: Paul Kienzle
 ##         (modified from __plt__.m)
 
 function retval = plot3 (varargin)
 
   x_set = 0;
   y_set = 0;
   z_set = 0;
+  property_set = 0;
+  fmt_set = 0;
+  properties = {};
 
   idx = 0;
 
   ## Gather arguments, decode format, and plot lines.
-  for arg = 1:nargin
+  arg = 0;
+  while (arg++ < nargin)
     new = varargin{arg};
+    new_cell = varargin(arg);
+
+    if (property_set)
+      properties = [properties, new_cell];
+      property_set = 0;
+      continue;
+    endif
 
     if (ischar (new))
       if (! z_set)
 	if (! y_set)
 	  if (! x_set)
 	    error ("plot3: needs x, [ y, [ z ] ]");
 	  else
 	    z = imag (x);
@@ -122,17 +133,38 @@ function retval = plot3 (varargin)
 	    endif
 	  endif
 	else
 	  z = imag (y);
 	  y = real (y);
 	  z_set = 1;
 	endif
       endif
-      options = __pltopt__ ("plot3", new);
+
+      if (! fmt_set)
+	[options, valid] = __pltopt__ ("plot3", new, false);
+	if (! valid)
+	  properties = [properties, new_cell];
+	  property_set = 1;
+	  continue;
+	else
+	  fmt_set = 1;
+	  while (arg < nargin && ischar (varargin{arg+1}))
+	    if (nargin - arg < 2)
+	      error ("plot3: properties must appear followed by a value");
+	    endif
+	    properties = [properties, varargin(arg:arg+1)];
+	    arg += 2;
+	  endwhile
+	endif
+      else
+	properties = [properties, new_cell];
+	property_set = 1;
+	continue;
+      endif
 
       if (isvector (x) && isvector (y))
 	if (isvector (z))
 	  x = x(:);
 	  y = y(:);
 	  z = z(:);
 	elseif (length (x) == rows (z) && length (y) == columns (z))
 	  error ("plot3: [length(x), length(y)] must match size(z)");
@@ -144,25 +176,30 @@ function retval = plot3 (varargin)
       if (! size_equal (x, y) || ! size_equal (x, z))
 	error ("plot3: x, y, and z must have the same shape");
       endif
 
       key = options.key;
       if (! isempty (key))
 	set (gca (), "key", "on");
       endif
+      color = options.color;
+      if (isempty (options.color))
+	color = __next_line_color__ ();
+      endif
 
-      tmp(++idx) = line (x(:), y(:), z(:), "keylabel", key,
-			 "color", options.color,
+      tmp(++idx) = line (x(:), y(:), z(:),  "keylabel", key, "color", color,
 			 "linestyle", options.linestyle,
-			 "marker", options.marker);
+			 "marker", options.marker, properties{:});
 
       x_set = 0;
       y_set = 0;
       z_set = 0;
+      fmt_set = 0;
+      properties = {};
     elseif (! x_set)
       x = new;
       x_set = 1;
     elseif (! y_set)
       y = new;
       y_set = 1;
     elseif (! z_set)
       z = new;
@@ -179,24 +216,42 @@ function retval = plot3 (varargin)
 	  [x, y] = meshgrid (x, y);
 	endif
       endif
 
       if (! size_equal (x, y) || ! size_equal (x, z))
 	error ("plot3: x, y, and z must have the same shape");
       endif
 
-      tmp(++idx) = line (x(:), y(:), z(:));
+      options =  __default_plot_options__ ();
+      key = options.key;
+      if (! isempty (key))
+	set (gca (), "key", "on");
+      endif
+      color = options.color;
+      if (isempty (color))
+	color = __next_line_color__ ();
+      endif
+
+      tmp(++idx) = line (x(:), y(:), z(:),  "keylabel", key, "color", color,
+			 "linestyle", options.linestyle,
+			 "marker", options.marker, properties{:});
 
       x = new;
       y_set = 0;
       z_set = 0;
+      fmt_set = 0;
+      properties = {};
     endif
 
-  endfor
+  endwhile
+
+  if (property_set)
+    error ("plot3: properties must appear followed by a value");
+  endif
 
   ## Handle last plot.
 
   if (x_set)
     if (y_set)
       if (! z_set)
 	z = imag (y);
 	y = real (y);
@@ -225,18 +280,29 @@ function retval = plot3 (varargin)
 	[x, y] = meshgrid (x, y);
       endif
     endif
 
     if (! size_equal (x, y) || ! size_equal (x, z))
       error ("plot3: x, y, and z must have the same shape");
     endif
 
-    tmp(++idx) = line (x(:), y(:), z(:));
+    options =  __default_plot_options__ ();
+    key = options.key;
+    if (! isempty (key))
+      set (gca (), "key", "on");
+    endif
+    color = options.color;
+    if (isempty (color))
+      color = __next_line_color__ ();
+    endif
 
+    tmp(++idx) = line (x(:), y(:), z(:),  "keylabel", key, "color", color,
+		       "linestyle", options.linestyle,
+		       "marker", options.marker, properties{:});
   endif
 
   set (gca (), "view", [-37.5, 30]);
 
   if (nargout > 0 && idx > 0)
     retval = tmp;
   endif
 
