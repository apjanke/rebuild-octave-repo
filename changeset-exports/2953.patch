# HG changeset patch
# User jwe
# Date 863189854 0
#      Fri May 09 14:57:34 1997 +0000
# Node ID ca7d3625ee01e5de30505121e15345f2b509153d
# Parent  c4bc40161199fd7a8ee14e162653c4346c184a38
[project @ 1997-05-09 14:56:52 by jwe]

diff --git a/src/symtab.cc b/src/symtab.cc
--- a/src/symtab.cc
+++ b/src/symtab.cc
@@ -29,18 +29,19 @@ Software Foundation, 59 Temple Place - S
 #endif
 
 #include <cctype>
 
 #include "glob-match.h"
 #include "str-vec.h"
 
 #include "error.h"
+#include "oct-fcn.h"
 #include "oct-sym.h"
-#include "oct-fcn.h"
+#include "oct-var-ref.h"
 #include "symtab.h"
 #include "utils.h"
 #include "variables.h"
 
 // Variables and functions.
 
 symbol_def::symbol_def (octave_symbol *sym, unsigned int sym_type)
 {
@@ -339,17 +340,17 @@ symbol_record::make_eternal (void)
 
       if (! is_defined ())
 	warning ("giving eternal life to undefined variable `%s'",
 		 nm.c_str ());
     }
 }
 
 void
-symbol_record::set_sv_function (sv_Function f)
+symbol_record::set_sv_function (sv_function f)
 {
   sv_fcn = f;
 }
 
 int
 symbol_record::define (const octave_value& v, unsigned int sym_type)
 {
   int retval = 0;
diff --git a/src/symtab.h b/src/symtab.h
--- a/src/symtab.h
+++ b/src/symtab.h
@@ -28,18 +28,16 @@ Software Foundation, 59 Temple Place - S
 #endif
 
 #include <string>
 
 #include "SLStack.h"
 
 #include "str-vec.h"
 
-#include "variables.h"
-
 // Must be multiple of 2.
 #define HASH_TABLE_SIZE 1024
 #define HASH_MASK (HASH_TABLE_SIZE - 1)
 
 class octave_symbol;
 class octave_function;
 
 class string_vector;
@@ -117,16 +115,19 @@ private:
 // Individual records in a symbol table.
 
 class
 symbol_record
 {
   friend class symbol_record_info;
 
 public:
+
+  typedef int (*sv_function) (void);
+
   symbol_record (void);
   symbol_record (const string& n, symbol_record *nxt = 0);
 
   ~symbol_record (void) { }
 
   string name (void) const;
   string help (void) const; 
   octave_symbol *def (void) const;
@@ -148,17 +149,17 @@ public:
   bool is_defined (void) const;
   bool is_read_only (void) const;
   bool is_eternal (void) const;
 
   void protect (void);
   void unprotect (void);
   void make_eternal (void);
 
-  void set_sv_function (sv_Function f);
+  void set_sv_function (sv_function f);
 
   int define (const octave_value& v,
 	      unsigned int sym_type = symbol_def::USER_VARIABLE);
 
   int define_as_fcn (const octave_value& v);
 
   int define_builtin_var (const octave_value& v);
 
@@ -191,17 +192,17 @@ public:
 
 private:
 
   unsigned int formal_param : 1;
   unsigned int linked_to_global : 1;
   unsigned int tagged_static : 1;
 
   string nm;
-  sv_Function sv_fcn;
+  sv_function sv_fcn;
   symbol_def *definition;
   symbol_record *next_elem;
 
 // This should maybe be one stack with a structure containing all the
 // items we need to save for recursive calls...
   SLStack <symbol_def *> context;
   SLStack <unsigned int> global_link_context;
 
diff --git a/src/variables.cc b/src/variables.cc
--- a/src/variables.cc
+++ b/src/variables.cc
@@ -104,53 +104,16 @@ static int Vsaving_history;
 symbol_table *top_level_sym_tab = 0;
 
 // Symbol table for the current scope.
 symbol_table *curr_sym_tab = 0;
 
 // Symbol table for global symbols.
 symbol_table *global_sym_tab = 0;
 
-void
-octave_variable_reference::assign (octave_value::assign_op op,
-				   const octave_value& rhs)
-{
-  octave_value saved_val;
-
-  if (chg_fcn)
-    octave_value saved_val = *val;
-
-  if (struct_elt_name.empty ())
-    val->assign (op, rhs);
-  else
-    val->assign_struct_elt (op, struct_elt_name, rhs);
-
-  if (chg_fcn && chg_fcn () < 0)
-    *val = saved_val;
-}
-
-void
-octave_variable_reference::assign (octave_value::assign_op op,
-				   const octave_value_list& idx,
-				   const octave_value& rhs)
-{
-  octave_value saved_val;
-
-  if (chg_fcn)
-    octave_value saved_val = *val;
-
-  if (struct_elt_name.empty ())
-    val->assign (op, idx, rhs);
-  else
-    val->assign_struct_elt (op, struct_elt_name, idx, rhs);
-
-  if (chg_fcn && chg_fcn () < 0)
-    *val = saved_val;
-}
-
 // Initialization.
 
 // Create the initial symbol tables and set the current scope at the
 // top level.
 
 void
 initialize_symbol_tables (void)
 {
@@ -1572,17 +1535,17 @@ install_builtin_function (octave_builtin
 void
 install_builtin_variable (const builtin_variable& v)
 {
   if (v.install_as_function)
     install_builtin_variable_as_function (v.name, v.value, v.protect,
 					  v.eternal, v.help_string);
   else
     bind_builtin_variable (v.name, v.value, v.protect, v.eternal,
-			   v.sv_function, v.help_string);
+			   v.sv_fcn, v.help_string);
 }
 
 void
 install_builtin_variable_as_function (const string& name,
 				      const octave_value& val,
 				      bool protect, bool eternal,
 				      const string& help)
 {
@@ -1660,17 +1623,18 @@ clear_global_error_variable (void *)
 // Give a global variable a definition.  This will insert the symbol
 // in the global table if necessary.
 
 // How is this different than install_builtin_variable?  Are both
 // functions needed?
 
 void
 bind_builtin_variable (const string& varname, const octave_value& val,
-		       bool protect, bool eternal, sv_Function sv_fcn,
+		       bool protect, bool eternal,
+		       symbol_record::sv_function sv_fcn,
 		       const string& help)
 {
   symbol_record *sr = global_sym_tab->lookup (varname, true);
 
   // It is a programming error for a builtin symbol to be missing.
   // Besides, we just inserted it, so it must be there.
 
   assert (sr);
diff --git a/src/variables.h b/src/variables.h
--- a/src/variables.h
+++ b/src/variables.h
@@ -33,96 +33,34 @@ class octave_value;
 class octave_value_list;
 class octave_builtin;
 class octave_mapper;
 class string_vector;
 
 #include <string>
 
 #include "ov.h"
-
-typedef int (*sv_Function)(void);
+#include "symtab.h"
 
 struct builtin_variable
 {
   builtin_variable (const string& n, const octave_value& v, bool iaf,
 		    bool p, bool e, sv_Function svf, const string& h)
     : name (n), value (v), install_as_function (iaf), protect (p),
-      eternal (e), sv_function (svf), help_string (h) { }
+      eternal (e), sv_fcn (svf), help_string (h) { }
 
   string name;
   octave_value value;
   bool install_as_function;
   bool protect;
   bool eternal;
-  sv_Function sv_function;
+  symbol_record::sv_function sv_fcn;
   string help_string;
 };
 
-class
-octave_variable_reference
-{
-public:
-
-  octave_variable_reference (octave_value *v = 0, sv_Function f = 0)
-    : val (v), chg_fcn (f), struct_elt_name () { }
-
-  octave_variable_reference (octave_value *v, const string& nm,
-			     sv_Function f = 0)
-    : val (v), chg_fcn (f), struct_elt_name (nm) { }
-
-  octave_variable_reference (const octave_variable_reference& vr)
-    : val (vr.val), chg_fcn (vr.chg_fcn),
-      struct_elt_name (vr.struct_elt_name) { }
-
-  octave_variable_reference& operator = (const octave_variable_reference& vr)
-    {
-      if (this != &vr)
-	{
-	  val = vr.val;
-	  chg_fcn = vr.chg_fcn;
-	  struct_elt_name = vr.struct_elt_name;
-	}
-
-      return *this;
-    }
-
-  ~octave_variable_reference (void) { }
-
-  bool is_undefined (void) { return val->is_undefined (); }
-
-  void define (const octave_value& v) { *val = v; }
-
-  void assign (octave_value::assign_op, const octave_value&);
-
-  void assign (octave_value::assign_op, const octave_value_list&,
-	       const octave_value&);
-
-  octave_variable_reference struct_elt_ref (const string& nm)
-    { return val->struct_elt_ref (nm); }
-
-  void increment (void) { val->increment (); }
-
-  void decrement (void) { val->decrement (); }
-
-  octave_value value (void)
-    {
-      return struct_elt_name.empty ()
-	? *val : val->struct_elt_val (struct_elt_name);
-    }
-
-private:
-
-  octave_value *val;
-
-  sv_Function chg_fcn;
-
-  string struct_elt_name;
-};
-
 typedef octave_value_list (*Octave_builtin_fcn)(const octave_value_list&, int);
 
 extern void initialize_symbol_tables (void);
 
 extern bool lookup (symbol_record *s, bool exec_script = true);
 
 extern symbol_record *lookup_by_name (const string& nm,
 				      bool exec_script = true);
@@ -191,17 +129,17 @@ extern void bind_ans (const octave_value
 
 extern void bind_global_error_variable (void);
 
 extern void clear_global_error_variable (void *);
 
 extern void
 bind_builtin_variable (const string&, const octave_value&,
 		       bool protect = false, bool eternal = false,
-		       sv_Function f = (sv_Function) 0,
+		       symbol_record::sv_function f = 0,
 		       const string& help = string ());
 
 // Symbol table for symbols at the top level.
 extern symbol_table *top_level_sym_tab;
 
 // Symbol table for the current scope.
 extern symbol_table *curr_sym_tab;
 
