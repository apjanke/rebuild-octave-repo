# HG changeset patch
# User Rik <rik@octave.org>
# Date 1543621982 28800
#      Fri Nov 30 15:53:02 2018 -0800
# Node ID af655eb15cdcc41c97e8717f24bf0acc58672e02
# Parent  7bd67e786e5fd656137755e66ffa59fa9a33515f
fplot.m: Add 1-input calling form, support for specifying PROP/VAL pairs.

* fplot.m: Rewrite docstring to show 1-input calling form, support for
"PROP/VAL" pairs, and calling form where axes to plot into is provided.
Redo input validation.  Use an empty cell array to hold any format string
or property/value pairs found.  Add FIXME note about fplot screwing up
legends when hold on is present.  Add BIST tests for new behavior.

diff --git a/scripts/plot/draw/fplot.m b/scripts/plot/draw/fplot.m
--- a/scripts/plot/draw/fplot.m
+++ b/scripts/plot/draw/fplot.m
@@ -12,48 +12,56 @@
 ## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 ## GNU General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <https://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
-## @deftypefn  {} {} fplot (@var{fn}, @var{limits})
+## @deftypefn  {} {} fplot (@var{fn})
+## @deftypefnx {} {} fplot (@var{fn}, @var{limits})
 ## @deftypefnx {} {} fplot (@dots{}, @var{tol})
 ## @deftypefnx {} {} fplot (@dots{}, @var{n})
 ## @deftypefnx {} {} fplot (@dots{}, @var{fmt})
+## @deftypefnx {} {} fplot (@dots{}, @var{property}, @var{value}, @dots{})
+## @deftypefnx {} {} fplot (@var{hax}, @dots{})
 ## @deftypefnx {} {[@var{x}, @var{y}] =} fplot (@dots{})
 ## Plot a function @var{fn} within the range defined by @var{limits}.
 ##
 ## @var{fn} is a function handle, inline function, or string containing the
 ## name of the function to evaluate.
 ##
 ## The limits of the plot are of the form @w{@code{[@var{xlo}, @var{xhi}]}} or
-## @w{@code{[@var{xlo}, @var{xhi}, @var{ylo}, @var{yhi}]}}.
+## @w{@code{[@var{xlo}, @var{xhi}, @var{ylo}, @var{yhi}]}}.  If no limits
+## are specified the default is @code{[-5, 5]}.
 ##
 ## The next three arguments are all optional and any number of them may be
 ## given in any order.
 ##
 ## @var{tol} is the relative tolerance to use for the plot and defaults
 ## to 2e-3 (.2%).
 ##
 ## @var{n} is the minimum number of points to use.  When @var{n} is specified,
 ## the maximum stepsize will be @code{(@var{xhi} - @var{xlo}) / @var{n}}.  More
 ## than @var{n} points may still be used in order to meet the relative
 ## tolerance requirement.
 ##
 ## The @var{fmt} argument specifies the linestyle to be used by the plot
 ## command.
 ##
+## Multiple property-value pairs may also be specified, but they must appear
+## in pairs.  These arguments are applied to the line objects drawn by
+## @code{plot}.
+##
 ## If the first argument @var{hax} is an axes handle, then plot into this axes,
 ## rather than the current axes returned by @code{gca}.
 ##
-## With no output arguments the results are immediately plotted.  With two
-## output arguments the 2-D plot data is returned.  The data can subsequently
+## With no output arguments, the results are immediately plotted.  With two
+## output arguments, the 2-D plot data is returned.  The data can subsequently
 ## be plotted manually with @code{plot (@var{x}, @var{y})}.
 ##
 ## Example:
 ##
 ## @example
 ## @group
 ## fplot (@@cos, [0, 2*pi])
 ## fplot ("[cos(x), sin(x)]", [0, 2*pi])
@@ -70,65 +78,77 @@
 ## vector argument.  Consider this when writing user-defined functions and use
 ## element-by-element operators such as @code{.*}, @code{./}, etc.  See the
 ## function @code{vectorize} for potentially converting inline or anonymous
 ## functions to vectorized versions.
 ##
 ## @seealso{ezplot, plot, vectorize}
 ## @end deftypefn
 
-## Author: Paul Kienzle <pkienzle@users.sf.net>
-
 function [X, Y] = fplot (varargin)
 
   [hax, varargin, nargin] = __plt_get_axis_arg__ ("fplot", varargin{:});
 
-  if (nargin < 2 || nargin > 5)
+  if (nargin < 1 || nargin > 5)
     print_usage ();
   endif
 
   fn = varargin{1};
-  limits = varargin{2};
-  varargin = varargin(3:end);
-
   if (strcmp (typeinfo (fn), "inline function"))
     fn = vectorize (fn);
     nam = formula (fn);
   elseif (is_function_handle (fn))
     nam = func2str (fn);
   elseif (all (isalnum (fn)))
     nam = fn;
   elseif (ischar (fn))
     fn = vectorize (inline (fn));
     nam = formula (fn);
   else
     error ("fplot: FN must be a function handle, inline function, or string");
   endif
 
-  if (iscomplex (limits) || (numel (limits) != 2 && numel (limits) != 4))
-    error ("fplot: LIMITS must be a real vector with 2 or 4 elements");
+  if (nargin > 1 && isnumeric (varargin{2}))
+    limits = varargin{2};
+    if (iscomplex (limits) || (numel (limits) != 2 && numel (limits) != 4))
+      error ("fplot: LIMITS must be a real vector with 2 or 4 elements");
+    endif
+    i = 3;
+  else
+    limits = [-5, 5];
+    i = 2;
   endif
 
   n = 5;
   tol = 2e-3;
-  fmt = "";
-  for i = 1:numel (varargin)
+  fmt = {};
+  while (i <= numel (varargin))
     arg = varargin{i};
     if (ischar (arg))
-      fmt = arg;
+      [~, valid_fmt] = __pltopt__ ("fplot", arg, false); 
+      if (valid_fmt)
+        fmt(end+1) = arg;
+      else
+        if (i == numel (varargin))
+          error ("fplot: bad input in position %d", i);
+        endif
+        fmt(end+(1:2)) = varargin([i, i+1]); 
+        i++;  # Skip PROPERTY.
+      endif
     elseif (isnumeric (arg) && isscalar (arg) && arg > 0)
       if (arg == fix (arg))
         n = arg;
       else
         tol = arg;
       endif
     else
-      error ("fplot: bad input in position %d", i+2);
+      error ("fplot: bad input in position %d", i);
     endif
-  endfor
+    i++;
+  endwhile
 
   if (n != 5)
     ## n was specified
     x0 = linspace (limits(1), limits(2), n/2 + 1)';
   else
     x0 = linspace (limits(1), limits(2), 5)';
     n = 8;
   endif
@@ -192,18 +212,20 @@ function [X, Y] = fplot (varargin)
 
   if (nargout == 2)
     X = x;
     Y = y;
   else
     if (isempty (hax))
       hax = gca ();
     endif
-    plot (hax, x, y, fmt);
+    plot (hax, x, y, fmt{:});
     axis (hax, limits);
+    ## FIXME: If hold is on, then this erases the existing legend rather than
+    ##        adding to it.
     if (isvector (y))
       legend (hax, nam);
     else
       for i = 1:columns (y)
         nams{i} = sprintf ("%s(:,%i)", nam, i);
       endfor
       legend (hax, nams{:});
     endif
@@ -247,21 +269,22 @@ endfunction
 %! ## Constant value function
 %! fn = @(x) 0;
 %! [x, y] = fplot (fn, [-1, 1]);
 %! assert (columns (y) == 1);
 %! assert (rows (x) == rows (y));
 %! assert (y, repmat ([0], size (x)));
 
 ## Test input validation
-%!error fplot (1)
+%!error fplot ()
 %!error fplot (1,2,3,4,5,6)
 %!error <FN must be a function handle> fplot (1, [0 1])
 %!error <LIMITS must be a real vector> fplot (@cos, [i, 2*i])
 %!error <LIMITS must be a real vector with 2 or 4> fplot (@cos, [1])
 %!error <LIMITS must be a real vector with 2 or 4> fplot (@cos, [1 2 3])
-%!error <bad input in position 3> fplot (@cos,[-1,1], {1})
+%!error <bad input in position 2> fplot (@cos, "linewidth")
+%!error <bad input in position 3> fplot (@cos, [-1,1], {1})
+%!warning <FN is not a vectorized function>
+%! fn = @(x) 0;
+%! [x,y] = fplot (fn, [-1,1]);
 %!error <invalid function FN>
 %! fn = @(x) [x;x];
 %! fplot (fn, [-1,1]);
-%!warning <FN is not a vectorized function>
-%! fn = @(x) 0;
-%! [x,y] = fplot (fn, [-1,1]);
