# HG changeset patch
# User jwe
# Date 1142004921 0
#      Fri Mar 10 15:35:21 2006 +0000
# Node ID 960f4b9a26aff01eae78d7e368a687e199b4fff4
# Parent  7b45fda215571d34ddabc12b01a8b223d86771b8
[project @ 2006-03-10 15:35:20 by jwe]

diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,8 +1,13 @@
+2006-03-09  John W. Eaton  <jwe@octave.org>
+
+	* miscellaneous/unix.m, plot/print.m:
+	Swap order of outputs from system.
+
 2006-03-06  Keith Goodman  <kwgoodman@gmail.com>
 
 	* audio/lin2mu.m, audio/loadaudio.m, audio/mu2lin.m,
 	audio/playaudio.m, audio/record.m, audio/saveaudio.m,
 	audio/wavread.m, audio/wavwrite.m, control/base/DEMOcontrol.m,
 	control/base/__stepimp__.m, control/base/are.m,
 	control/base/controldemo.m, control/base/damp.m,
 	control/base/dare.m, control/base/impulse.m, control/base/lqg.m,
diff --git a/scripts/miscellaneous/unix.m b/scripts/miscellaneous/unix.m
--- a/scripts/miscellaneous/unix.m
+++ b/scripts/miscellaneous/unix.m
@@ -31,15 +31,15 @@
 ## Author: octave-forge ???
 ## Adapted by: jwe
 
 function [status, text] = unix (cmd, echo_arg)
 
   if (nargin < 1 || nargin > 2)
     usage ( "[status, text] = unix (cmd, '-echo')");
   elseif (isunix ())
-    [text, status] = system (cmd);
+    [status, text] = system (cmd);
     if (nargin > 1 || nargout == 0)
       printf ("%s\n", text);
     endif
   endif
 
 endfunction
diff --git a/scripts/plot/print.m b/scripts/plot/print.m
--- a/scripts/plot/print.m
+++ b/scripts/plot/print.m
@@ -337,17 +337,17 @@ function print (varargin)
     __gnuplot_raw__ ("set terminal pop;\n");
     __gnuplot_raw__ ("set output;\n")
     __gnuplot_replot__
 
   end_unwind_protect
 
   if (! isempty (convertname))
     command = sprintf ("convert '%s' '%s'", name, convertname);
-    [output, errcode] = system (command);
+    [errcode, output] = system (command);
     unlink (name);
     if (errcode)
       error ("print: could not convert");
     endif
   endif
 
   ## XXX FIXME XXX -- This looks like a dirty, Unix-specific hack.
   ## DAS
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,10 +1,33 @@
+2006-03-10  John W. Eaton  <jwe@octave.org>
+
+	* symtab.cc (symbol_table::glob, symbol_table::symbol_list,
+	symbol_table::subsymbol_list): Force result to be a column
+	vector.
+
+	* oct-stream.h (octave_stream::stream_ok): Undo previous change.
+	Eliminate who parameter.  Change all callers.
+
+	* variables.cc (do_who): Return more info in structure array for
+	verbose output.
+	* symtab.h (symbol_record::size, symbol_record::class_name,
+	symbol_record::is_sparse_type, symbol_record::is_complex_type,
+	symbol_record::size, symbol_record::symbol_def::class_name,
+	symbol_record::symbol_def::is_sparse_type,
+	symbol_record::symbol_def::is_complex_type): New functions.
+	* ov.h (octave_value::size): New function.
+
 2006-03-09  John W. Eaton  <jwe@octave.org>
 
+	* toplev.cc (run_command_and_return_output): Swap output and
+	status for compatibility.
+
+	* Makefile.in (defaults.h, oct-conf.h): Force updates.
+
 	* defaults.h.in (OCTAVE_RELEASE): New macro.
 
 	* octave.cc (F__version_info__): New arg, release.
 	(initialize_version_info): Pass release arg to F__version_info__.
 
 	* toplev.cc: Include api_version in the list.
 
 	* Makefile.in (DIST_SRC): Include octave.cc here.
diff --git a/src/oct-stream.cc b/src/oct-stream.cc
--- a/src/oct-stream.cc
+++ b/src/oct-stream.cc
@@ -2786,28 +2786,28 @@ octave_stream::operator = (const octave_
   return *this;
 }
 
 int
 octave_stream::flush (void)
 {
   int retval = -1;
 
-  if (stream_ok ("fflush"))
+  if (stream_ok ())
     retval = rep->flush ();
 
   return retval;
 }
 
 std::string
 octave_stream::getl (octave_idx_type max_len, bool& err, const std::string& who)
 {
   std::string retval;
 
-  if (stream_ok (who))
+  if (stream_ok ())
     retval = rep->getl (max_len, err, who);
 
   return retval;
 }
 
 std::string
 octave_stream::getl (const octave_value& tc_max_len, bool& err,
 		     const std::string& who)
@@ -2831,17 +2831,17 @@ octave_stream::getl (const octave_value&
   return retval;
 }
 
 std::string
 octave_stream::gets (octave_idx_type max_len, bool& err, const std::string& who)
 {
   std::string retval;
 
-  if (stream_ok (who))
+  if (stream_ok ())
     retval = rep->gets (max_len, err, who);
 
   return retval;
 }
 
 std::string
 octave_stream::gets (const octave_value& tc_max_len, bool& err,
 		     const std::string& who)
@@ -2865,17 +2865,17 @@ octave_stream::gets (const octave_value&
   return retval;
 }
 
 int
 octave_stream::seek (long offset, int origin)
 {
   int status = -1;
 
-  if (stream_ok ("fseek"))
+  if (stream_ok ())
     {
       clearerr ();
 
       long orig_pos = rep->tell ();
 
       status = rep->seek (offset, origin);
 
       if (status == 0)
@@ -2972,48 +2972,48 @@ octave_stream::seek (const octave_value&
   return retval;
 }
 
 long
 octave_stream::tell (void)
 {
   long retval = -1;
 
-  if (stream_ok ("tell"))
+  if (stream_ok ())
     retval = rep->tell ();
 
   return retval;
 }
 
 int
 octave_stream::rewind (void)
 {
   int retval = -1;
 
-  if (stream_ok ("frewind"))
+  if (stream_ok ())
     retval = rep->rewind ();
 
   return retval;
 }
 
 bool
 octave_stream::is_open (void) const
 {
   bool retval = false;
 
-  if (stream_ok ("is_open"))
+  if (stream_ok ())
     retval = rep->is_open ();
 
   return retval;
 }
 
 void
 octave_stream::close (void)
 {
-  if (stream_ok ("close"))
+  if (stream_ok ())
     rep->close ();
 }
 
 template <class RET_T, class READ_T>
 octave_value
 do_read (octave_stream& strm, octave_idx_type nr, octave_idx_type nc, octave_idx_type block_size,
 	 octave_idx_type skip, bool do_float_fmt_conv,
 	 oct_mach_info::float_format from_flt_fmt, octave_idx_type& count)
@@ -3261,17 +3261,17 @@ octave_stream::read (const Array<double>
       FILL_TABLE_ROW (oct_data_conv::dt_uchar, charNDArray);
       FILL_TABLE_ROW (oct_data_conv::dt_logical, boolNDArray);
 
       initialized = true;
     }
 
   octave_value retval;
 
-  if (stream_ok ("fread"))
+  if (stream_ok ())
     {
       // XXX FIXME XXX -- we may eventually want to make this extensible.
 
       // XXX FIXME XXX -- we need a better way to ensure that this
       // numbering stays consistent with the order of the elements in the
       // data_type enum in the oct_data_conv class.
 
       char_count = 0;
@@ -3324,17 +3324,17 @@ octave_stream::read (const Array<double>
 
 octave_idx_type
 octave_stream::write (const octave_value& data, octave_idx_type block_size,
 		      oct_data_conv::data_type output_type, octave_idx_type skip,
 		      oct_mach_info::float_format flt_fmt)
 {
   octave_idx_type retval = -1;
 
-  if (stream_ok ("fwrite"))
+  if (stream_ok ())
     {
       if (! error_state)
 	{
 	  if (flt_fmt == oct_mach_info::flt_fmt_unknown)
 	    flt_fmt = float_format ();
 
 	  octave_idx_type status = data.write (*this, block_size, output_type,
 				   skip, flt_fmt);
@@ -3599,17 +3599,17 @@ octave_stream::write (const Array<octave
 		      octave_idx_type, oct_mach_info::float_format);
 
 octave_value
 octave_stream::scanf (const std::string& fmt, const Array<double>& size,
 		      octave_idx_type& count, const std::string& who)
 {
   octave_value retval;
 
-  if (stream_ok (who))
+  if (stream_ok ())
     retval = rep->scanf (fmt, size, count, who);
 
   return retval;
 }
 
 octave_value
 octave_stream::scanf (const octave_value& fmt, const Array<double>& size,
 		      octave_idx_type& count, const std::string& who)
@@ -3635,17 +3635,17 @@ octave_stream::scanf (const octave_value
   return retval;
 }
 
 octave_value_list
 octave_stream::oscanf (const std::string& fmt, const std::string& who)
 {
   octave_value_list retval;
 
-  if (stream_ok (who))
+  if (stream_ok ())
     retval = rep->oscanf (fmt, who);
 
   return retval;
 }
 
 octave_value_list
 octave_stream::oscanf (const octave_value& fmt, const std::string& who)
 {
@@ -3671,17 +3671,17 @@ octave_stream::oscanf (const octave_valu
 }
 
 int
 octave_stream::printf (const std::string& fmt, const octave_value_list& args,
 		       const std::string& who)
 {
   int retval = -1;
 
-  if (stream_ok (who))
+  if (stream_ok ())
     retval = rep->printf (fmt, args, who);
 
   return retval;
 }
 
 int
 octave_stream::printf (const octave_value& fmt, const octave_value_list& args,
 		       const std::string& who)
@@ -3707,17 +3707,17 @@ octave_stream::printf (const octave_valu
   return retval;
 }
 
 int
 octave_stream::puts (const std::string& s, const std::string& who)
 {
   int retval = -1;
 
-  if (stream_ok (who))
+  if (stream_ok ())
     retval = rep->puts (s, who);
 
   return retval;
 }
 
 // XXX FIXME XXX -- maybe this should work for string arrays too.
 
 int
@@ -3740,61 +3740,61 @@ octave_stream::puts (const octave_value&
   return retval;
 }
 
 bool
 octave_stream::eof (void) const
 {
   int retval = -1;
 
-  if (stream_ok ("feof"))
+  if (stream_ok ())
     retval = rep->eof ();
 
   return retval;
 }
 
 std::string
 octave_stream::error (bool clear, int& err_num)
 {
   std::string retval = "invalid stream object";
 
-  if (stream_ok ("ferror", false, false))
+  if (stream_ok (false))
     retval = rep->error (clear, err_num);
 
   return retval;
 }
 
 std::string
 octave_stream::name (void) const
 {
   std::string retval;
 
-  if (stream_ok ("name"))
+  if (stream_ok ())
     retval = rep->name ();
 
   return retval;
 }
 
 int
 octave_stream::mode (void) const
 {
   int retval = 0;
 
-  if (stream_ok ("mode"))
+  if (stream_ok ())
     retval = rep->mode ();
 
   return retval;
 }
 
 oct_mach_info::float_format
 octave_stream::float_format (void) const
 {
   oct_mach_info::float_format retval = oct_mach_info::flt_fmt_unknown;
 
-  if (stream_ok ("float_format"))
+  if (stream_ok ())
     retval = rep->float_format ();
 
   return retval;
 }
 
 std::string
 octave_stream::mode_as_string (int mode)
 {
@@ -3828,37 +3828,16 @@ octave_stream::mode_as_string (int mode)
     retval = "w+b";
   else if (in_mode == (std::ios::in | std::ios::out | std::ios::ate
 		       | std::ios::binary))
     retval = "a+b";
 
   return retval;
 }
 
-bool
-octave_stream::stream_ok (const std::string& who, bool clear, bool warn) const
-{
-  bool retval = true;
-
-  if (rep)
-    {
-      if (clear)
-	rep->clear ();
-    }
-  else
-    {
-      if (warn)
-	::warning ("%s: attempt to use invalid I/O stream", who.c_str ());
-
-      retval = false;
-    }
-
-  return retval;
-}
-
 octave_stream_list *octave_stream_list::instance = 0;
 
 bool
 octave_stream_list::instance_ok (void)
 {
   bool retval = true;
 
   if (! instance)
diff --git a/src/oct-stream.h b/src/oct-stream.h
--- a/src/oct-stream.h
+++ b/src/oct-stream.h
@@ -586,18 +586,30 @@ public:
 
   void clearerr (void) { if (rep) rep->clearerr (); }
 
 private:
 
   // The actual representation of this stream.
   octave_base_stream *rep;
 
-  bool stream_ok (const std::string& who, bool clear = true,
-		  bool warn = true) const;
+  bool stream_ok (bool clear = true) const
+    {
+      bool retval = true;
+
+      if (rep)
+	{
+	  if (clear)
+	    rep->clear ();
+	}
+      else
+	retval = false;
+
+      return retval;
+    }
 
   void invalid_operation (const std::string& who, const char *rw)
     {
       if (rep)
 	rep->invalid_operation (who, rw);
     }
 };
 
diff --git a/src/ov.cc b/src/ov.cc
--- a/src/ov.cc
+++ b/src/ov.cc
@@ -1076,16 +1076,31 @@ octave_value::ndims (void) const
    // The result is always >= 2.
 
    if (n_dims < 2)
      n_dims = 2;
 
    return n_dims;
 }
 
+Matrix
+octave_value::size (void) const
+{
+  dim_vector dv = dims ();
+
+  int n_dims = dv.length ();
+
+  Matrix retval (1, n_dims);
+
+  while (n_dims--)
+    retval(n_dims) = dv(n_dims);
+
+  return retval;
+}
+
 Cell
 octave_value::cell_value (void) const
 {
   return rep->cell_value ();
 }
 
 Octave_map
 octave_value::map_value (void) const
diff --git a/src/ov.h b/src/ov.h
--- a/src/ov.h
+++ b/src/ov.h
@@ -368,16 +368,18 @@ public:
   bool all_zero_dims (void) const { return dims().all_zero (); }
 
   virtual octave_idx_type numel (void) const
     { return rep->numel (); }
 
   virtual octave_idx_type capacity (void) const
     { return rep->capacity (); }
 
+  Matrix size (void) const;
+
   virtual size_t byte_size (void) const
     { return rep->byte_size (); }
 
   virtual octave_idx_type nnz (void) const { return rep->nnz (); }
 
   virtual octave_idx_type nzmax (void) const { return rep->nzmax (); }
 
   virtual octave_value reshape (const dim_vector& dv) const
diff --git a/src/symtab.cc b/src/symtab.cc
--- a/src/symtab.cc
+++ b/src/symtab.cc
@@ -1081,17 +1081,17 @@ matches_patterns (const std::string& nam
 Array<symbol_record *>
 symbol_table::subsymbol_list (const string_vector& pats,
 			      unsigned int type, unsigned int scope) const
 {
   int count = 0;
 
   int n = size ();
 
-  Array<symbol_record *> subsymbols (n);
+  Array<symbol_record *> subsymbols (dim_vector (n, 1));
   int pats_length = pats.length ();
 
   if (n == 0)
     return subsymbols;
 
   // Look for separators like .({
   for (int j = 0; j < pats_length; j++)
     {
@@ -1131,30 +1131,30 @@ symbol_table::subsymbol_list (const stri
 		    }
 
 		  ptr = ptr->next ();
 		}
 	    }
 	}
     }
 
-  subsymbols.resize (count);
+  subsymbols.resize (dim_vector (count, 1));
 
   return subsymbols;
 }
 
 Array<symbol_record *>
 symbol_table::symbol_list (const string_vector& pats,
 			   unsigned int type, unsigned int scope) const
 {
   int count = 0;
 
   int n = size ();
 
-  Array<symbol_record *> symbols (n);
+  Array<symbol_record *> symbols (dim_vector (n, 1));
 
   if (n == 0)
     return symbols;
 
   for (unsigned int i = 0; i < table_size; i++)
     {
       symbol_record *ptr = table[i].next ();
 
@@ -1173,17 +1173,17 @@ symbol_table::symbol_list (const string_
 	      if ((type & my_type) && (scope & my_scope) && (matches_patterns (my_name, pats)))
 		symbols(count++) = ptr;
 	    }
 
 	  ptr = ptr->next ();
 	}
     }
 
-  symbols.resize (count);
+  symbols.resize (dim_vector (count, 1));
 
   return symbols;
 }
 
 string_vector
 symbol_table::name_list (const string_vector& pats, bool sort,
 			 unsigned int type, unsigned int scope) const
 {
@@ -1319,18 +1319,18 @@ symbol_table::parse_whos_line_format (Ar
   std::list<whos_parameter> params;
 
   size_t bytes1;
   int elements1;
 
   int len = symbols.length (), i;
 
   std::string param_string = "benpst";
-  Array<int> param_length(param_string.length ());
-  Array<std::string> param_names(param_string.length ());
+  Array<int> param_length (dim_vector (param_string.length (), 1));
+  Array<std::string> param_names (dim_vector (param_string.length (), 1));
   size_t pos_b, pos_t, pos_e, pos_n, pos_p, pos_s;
 
   pos_b = param_string.find ('b'); // Bytes
   pos_t = param_string.find ('t'); // (Type aka) Class
   pos_e = param_string.find ('e'); // Elements
   pos_n = param_string.find ('n'); // Name
   pos_p = param_string.find ('p'); // Protected
   pos_s = param_string.find ('s'); // Size
@@ -1542,17 +1542,17 @@ symbol_table::maybe_list (const char *he
     {
       // XXX FIXME XXX Should separate argv to lists with and without dots.
       Array<symbol_record *> xsymbols = symbol_list (argv, type, scope);
       Array<symbol_record *> xsubsymbols = subsymbol_list (argv, type, scope);
 
       int sym_len = xsymbols.length (), subsym_len = xsubsymbols.length (),
 	len = sym_len + subsym_len;
  
-      Array<symbol_record *> symbols (len);
+      Array<symbol_record *> symbols (dim_vector (len, 1));
 
       if (len > 0)
 	{
 	  size_t bytes = 0;
 	  size_t elements = 0;
 
 	  int i;
 
@@ -1611,17 +1611,17 @@ symbol_table::maybe_list (const char *he
 Array<symbol_record *>
 symbol_table::glob (const std::string& pat, unsigned int type,
 		    unsigned int scope) const
 {
   int count = 0;
 
   int n = size ();
 
-  Array<symbol_record *> symbols (n);
+  Array<symbol_record *> symbols (dim_vector (n, 1));
 
   if (n == 0)
     return symbols;
 
   for (unsigned int i = 0; i < table_size; i++)
     {
       symbol_record *ptr = table[i].next ();
 
@@ -1640,17 +1640,17 @@ symbol_table::glob (const std::string& p
 	    {
 	      symbols(count++) = ptr;
 	    }
 
 	  ptr = ptr->next ();
 	}
     }
 
-  symbols.resize (count);
+  symbols.resize (dim_vector (count, 1));
 
   return symbols;
 }
 
 void
 symbol_table::push_context (void)
 {
   for (unsigned int i = 0; i < table_size; i++)
diff --git a/src/symtab.h b/src/symtab.h
--- a/src/symtab.h
+++ b/src/symtab.h
@@ -166,16 +166,28 @@ private:
       { return read_only; }
 
     bool is_eternal (void) const
       { return eternal; }
 
     bool is_matrix_type (void) const 
       { return definition.is_matrix_type (); }
 
+    bool is_sparse_type (void) const
+      { return definition.is_sparse_type (); }
+
+    bool is_complex_type (void) const
+      { return definition.is_complex_type (); }
+
+    std::string class_name (void) const
+      { return definition.class_name (); }
+
+    Matrix size (void) const
+      { return definition.size (); }
+
     size_t byte_size (void) const
       { return definition.byte_size (); };
 
     octave_idx_type numel (void) const
       { return definition.numel (); };
 
     octave_idx_type capacity (void) const
       { return definition.capacity (); };
@@ -379,16 +391,28 @@ public:
 
   void mark_as_static (void);
   bool is_static (void) const { return tagged_static; }
   void unmark_static (void) { tagged_static = false; }
 
   bool is_matrix_type (void) const 
     { return definition->is_matrix_type (); }
 
+  bool is_sparse_type (void) const
+    { return definition->is_sparse_type (); }
+
+  bool is_complex_type (void) const
+    { return definition->is_complex_type (); }
+
+  std::string class_name (void) const
+    { return definition->class_name (); }
+
+  Matrix size (void) const
+    { return definition->size (); }
+
   size_t byte_size (void) const
     { return definition->byte_size (); };
 
   octave_idx_type numel (void) const
     { return definition->numel (); };
 
   octave_idx_type capacity (void) const
     { return definition->capacity (); };
diff --git a/src/toplev.cc b/src/toplev.cc
--- a/src/toplev.cc
+++ b/src/toplev.cc
@@ -367,18 +367,18 @@ run_command_and_return_output (const std
 
 	  if (WIFEXITED (cmd_status))
 	    cmd_status = WEXITSTATUS (cmd_status);
 	  else
 	    cmd_status = 127;
 
 	  output_buf << OSSTREAM_ENDS;
 
-	  retval(1) = (double) cmd_status;
-	  retval(0) = OSSTREAM_STR (output_buf);
+	  retval(0) = (double) cmd_status;
+	  retval(1) = OSSTREAM_STR (output_buf);
 
 	  OSSTREAM_FREEZE (output_buf);
 	}
 
       unwind_protect::run ();
     }
   else
     error ("unable to start subprocess for `%s'", cmd_str.c_str ());
@@ -412,19 +412,19 @@ disp (system (cmd, 1));\n\
 \n\
 @noindent\n\
 or\n\
 \n\
 @example\n\
 printf (\"%s\n\", system (cmd, 1));\n\
 @end example\n\
 \n\
-The @code{system} function can return two values.  The first is any\n\
-output from the command that was written to the standard output stream,\n\
-and the second is the output status of the command.  For example,\n\
+The @code{system} function can return two values.  The first is the\n\
+exit status of the command and the second is any output from the\n\
+command that was written to the standard output stream.  For example,\n\
 \n\
 @example\n\
 [output, status] = system (\"echo foo; exit 2\");\n\
 @end example\n\
 \n\
 @noindent\n\
 will set the variable @code{output} to the string @samp{foo}, and the\n\
 variable @code{status} to the integer @samp{2}.\n\
diff --git a/src/variables.cc b/src/variables.cc
--- a/src/variables.cc
+++ b/src/variables.cc
@@ -1452,16 +1452,31 @@ Set the documentation string for @var{sy
 	}
     }
   else
     print_usage ("document");
 
   return retval;
 }
 
+// XXX FIXME XXX -- this function is duplicated in symtab.cc with the
+// name maybe_list_cmp_fcn.
+
+static int
+symbol_record_name_compare (const void *a_arg, const void *b_arg)
+{
+  const symbol_record *a = *(X_CAST (const symbol_record **, a_arg));
+  const symbol_record *b = *(X_CAST (const symbol_record **, b_arg));
+
+  std::string a_nm = a->name ();
+  std::string b_nm = b->name ();
+
+  return a_nm.compare (b_nm);
+}
+
 static octave_value
 do_who (int argc, const string_vector& argv, int return_list)
 {
   octave_value retval;
 
   bool show_builtins = false;
   bool show_functions = false;
   bool show_variables = false;
@@ -1513,68 +1528,151 @@ do_who (int argc, const string_vector& a
   if (show_verbose && ! (show_builtins || show_functions || show_variables))
     {
       show_functions = at_top_level ();
       show_variables = 1;
     }
 
   if (return_list)
     {
-      string_vector names;
+      // XXX FIXME XXX -- maybe symbol_list should return a std::list
+      // object instead of an Array.
+
+      dim_vector dv (0, 0);
+
+      Array<symbol_record *> s1 (dv);
+      Array<symbol_record *> s2 (dv);
+      Array<symbol_record *> s3 (dv);
+      Array<symbol_record *> s4 (dv);
+      Array<symbol_record *> s5 (dv);
+      Array<symbol_record *> s6 (dv);
+      Array<symbol_record *> s7 (dv);
 
       if (show_builtins)
 	{
-	  names.append (fbi_sym_tab->name_list
-			(pats, true, symbol_record::BUILTIN_CONSTANT,
-			 SYMTAB_ALL_SCOPES));
-
-	  names.append (fbi_sym_tab->name_list
-			(pats, true, symbol_record::BUILTIN_VARIABLE,
-			 SYMTAB_ALL_SCOPES));
-
-	  names.append (fbi_sym_tab->name_list
-			(pats, true, symbol_record::BUILTIN_FUNCTION,
-			 SYMTAB_ALL_SCOPES));
+	  s1 = fbi_sym_tab->symbol_list (pats, symbol_record::BUILTIN_CONSTANT,
+					 SYMTAB_ALL_SCOPES);
+
+	  s2 = fbi_sym_tab->symbol_list (pats, symbol_record::BUILTIN_VARIABLE,
+					 SYMTAB_ALL_SCOPES);
+
+	  s3 = fbi_sym_tab->symbol_list (pats, symbol_record::BUILTIN_FUNCTION,
+					 SYMTAB_ALL_SCOPES);
 	}
 
       if (show_functions)
 	{
-	  names.append (fbi_sym_tab->name_list
-			(pats, true, symbol_record::DLD_FUNCTION,
-			 SYMTAB_ALL_SCOPES));
-
-	  names.append (fbi_sym_tab->name_list
-			(pats, true, symbol_record::USER_FUNCTION,
-			 SYMTAB_ALL_SCOPES));
+	  s4 = fbi_sym_tab->symbol_list (pats, symbol_record::DLD_FUNCTION,
+					 SYMTAB_ALL_SCOPES);
+
+	  s5 = fbi_sym_tab->symbol_list (pats, symbol_record::USER_FUNCTION,
+					 SYMTAB_ALL_SCOPES);
 	}
 
       if (show_variables)
 	{
-	  names.append (curr_sym_tab->name_list
-			(pats, true, symbol_record::USER_VARIABLE,
-			 SYMTAB_LOCAL_SCOPE));
-
-	  names.append (curr_sym_tab->name_list
-			(pats, true, symbol_record::USER_VARIABLE,
-			 SYMTAB_GLOBAL_SCOPE));
+	  s6 = curr_sym_tab->symbol_list (pats, symbol_record::USER_VARIABLE,
+					  SYMTAB_LOCAL_SCOPE);
+
+	  s7 = curr_sym_tab->symbol_list (pats, symbol_record::USER_VARIABLE,
+					  SYMTAB_GLOBAL_SCOPE);
 	}
 
+      octave_idx_type s1_len = s1.length ();
+      octave_idx_type s2_len = s2.length ();
+      octave_idx_type s3_len = s3.length ();
+      octave_idx_type s4_len = s4.length ();
+      octave_idx_type s5_len = s5.length ();
+      octave_idx_type s6_len = s6.length ();
+      octave_idx_type s7_len = s7.length ();
+
+      octave_idx_type symbols_len
+	= s1_len + s2_len + s3_len + s4_len + s5_len + s6_len + s7_len;
+
+      Array<symbol_record *> symbols (dim_vector (symbols_len, 1));
+
+      octave_idx_type k = 0;
+
+      symbols.insert (s1, k, 0);
+      k += s1_len;
+      symbols.insert (s2, k, 0);
+      k += s2_len;
+      symbols.insert (s3, k, 0);
+      k += s3_len;
+      symbols.insert (s4, k, 0);
+      k += s4_len;
+      symbols.insert (s5, k, 0);
+      k += s5_len;
+      symbols.insert (s6, k, 0);
+      k += s6_len;
+      symbols.insert (s7, k, 0);
+
+      symbols.qsort (symbol_record_name_compare);
+
       if (show_verbose)
 	{
-	  int len = names.length ();
-
-	  octave_value_list ovl (len, octave_value ());
-
-	  for (int j = 0; j < len; j++)
-	    ovl(j) = names(j);
-
-	  retval = Octave_map ("name", ovl);
+	  Array<octave_value> name_info (symbols_len, 1);
+	  Array<octave_value> size_info (symbols_len, 1);
+	  Array<octave_value> bytes_info (symbols_len, 1);
+	  Array<octave_value> class_info (symbols_len, 1);
+	  Array<octave_value> global_info (symbols_len, 1);
+	  Array<octave_value> sparse_info (symbols_len, 1);
+	  Array<octave_value> complex_info (symbols_len, 1);
+	  Array<octave_value> nesting_info (symbols_len, 1);
+
+	  for (octave_idx_type j = 0; j < symbols_len; j++)
+	    {
+	      symbol_record *sr = symbols(j);
+
+	      Octave_map ni;
+
+	      std::string caller_function_name;
+	      if (curr_caller_function)
+		caller_function_name = curr_caller_function->name ();
+
+	      ni.assign ("function", caller_function_name);
+	      ni.assign ("level", 1);
+
+	      name_info(j) = sr->name ();
+	      size_info(j) = sr->size ();
+	      bytes_info(j) = sr->byte_size ();
+	      class_info(j) = sr->class_name ();
+	      global_info(j) = sr->is_linked_to_global ();
+	      sparse_info(j) = sr->is_sparse_type ();
+	      complex_info(j) = sr->is_complex_type ();
+	      nesting_info(j) = ni;
+	    }
+
+	  Octave_map info;
+
+	  info.assign ("name", name_info);
+	  info.assign ("size", size_info);
+	  info.assign ("bytes", bytes_info);
+	  info.assign ("class", class_info);
+	  info.assign ("global", global_info);
+	  info.assign ("sparse", sparse_info);
+	  info.assign ("complex", complex_info);
+	  info.assign ("nesting", nesting_info);
+
+	  retval = info;
 	}
       else
-	retval = Cell (names);
+	{
+	  string_vector names;
+
+	  if (symbols_len > 0)
+	    {
+	      names.resize (symbols_len);
+
+	      for (octave_idx_type j = 0; j < symbols_len; j++)
+		names[j] = symbols(j)->name ();
+	    }
+
+	  retval = Cell (names);
+	}
     }
   else
     {
       int pad_after = 0;
 
       if (show_builtins)
 	{
 	  pad_after += fbi_sym_tab->maybe_list
