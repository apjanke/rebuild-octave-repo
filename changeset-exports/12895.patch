# HG changeset patch
# User Rik <octave@nomad.inbox5.com>
# Date 1311806406 25200
#      Wed Jul 27 15:40:06 2011 -0700
# Node ID 8edece28cf4da09ac8eb89db6a22f5b1de8b4f2a
# Parent  f5a3f77d51aa384adb8aaa76648f934ec389672b
Allow Matlab-style syntax for load command (Bug #33527).

* load-save.cc (load): Allow '-options' to appear after filename
in function argument list.

diff --git a/src/load-save.cc b/src/load-save.cc
--- a/src/load-save.cc
+++ b/src/load-save.cc
@@ -540,16 +540,19 @@ find_file_to_load (const std::string& na
 
 
 DEFUN (load, args, nargout,
   "-*- texinfo -*-\n\
 @deftypefn  {Command} {} load file\n\
 @deftypefnx {Command} {} load options file\n\
 @deftypefnx {Command} {} load options file v1 v2 @dots{}\n\
 @deftypefnx {Command} {S =} load (\"options\", \"file\", \"v1\", \"v2\", @dots{})\n\
+@deftypefnx {Command} {} load file options\n\
+@deftypefnx {Command} {} load file options v1 v2 @dots{}\n\
+@deftypefnx {Command} {S =} load (\"file\", \"options\", \"v1\", \"v2\", @dots{})\n\
 Load the named variables @var{v1}, @var{v2}, @dots{}, from the file\n\
 @var{file}.  If no variables are specified then all variables found in the\n\
 file will be loaded.  As with @code{save}, the list of variables to extract\n\
 can be full names or use a pattern syntax.  The format of the file is\n\
 automatically detected but may be overridden by supplying the appropriate\n\
 option.\n\
 \n\
 If load is invoked using the functional form\n\
@@ -637,27 +640,36 @@ Force Octave to assume the file is in Oc
 
   int argc = args.length () + 1;
 
   string_vector argv = args.make_argv ("load");
 
   if (error_state)
     return retval;
 
+  int i = 1;
+  std::string orig_fname = "";
+
+  // Function called with Matlab-style ["filename", options] syntax
+  if (argv[1].at(0) != '-')
+    {
+      orig_fname = argv[1];
+      i++;
+    }
+
   // It isn't necessary to have the default load format stored in a
   // user preference variable since we can determine the type of file
   // as we are reading.
 
   load_save_format format = LS_UNKNOWN;
 
   bool list_only = false;
   bool verbose = false;
 
-  int i;
-  for (i = 1; i < argc; i++)
+  for (i; i < argc; i++)
     {
       if (argv[i] == "-force" || argv[i] == "-f")
         {
           // Silently ignore this
           // warning ("load: -force ignored");
         }
       else if (argv[i] == "-list" || argv[i] == "-l")
         {
@@ -705,29 +717,34 @@ Force Octave to assume the file is in Oc
       else if (argv[i] == "-text" || argv[i] == "-t")
         {
           format = LS_ASCII;
         }
       else
         break;
     }
 
-  if (i == argc)
+  if (orig_fname == "")
     {
-      print_usage ();
-      return retval;
+      if (i == argc)
+        {
+          print_usage ();
+          return retval;
+        }
+      else
+        orig_fname = argv[i];
     }
-
-  std::string orig_fname = argv[i];
+  else
+    i--;
 
   oct_mach_info::float_format flt_fmt = oct_mach_info::flt_fmt_unknown;
 
   bool swap = false;
 
-  if (argv[i] == "-")
+  if (orig_fname == "-")
     {
       i++;
 
 #ifdef HAVE_HDF5
       if (format == LS_HDF5)
         error ("load: cannot read HDF5 format from stdin");
       else
 #endif /* HAVE_HDF5 */
@@ -742,17 +759,17 @@ Force Octave to assume the file is in Oc
                             list_only, swap, verbose, argv, i, argc,
                             nargout);
         }
       else
         error ("load: must specify file format if reading from stdin");
     }
   else
     {
-      std::string fname = file_ops::tilde_expand (argv[i]);
+      std::string fname = file_ops::tilde_expand (orig_fname);
 
       fname = find_file_to_load (fname, orig_fname);
 
       if (error_state)
         return retval;
 
       bool use_zlib = false;
 
