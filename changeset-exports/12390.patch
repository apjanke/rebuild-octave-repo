# HG changeset patch
# User David Bateman <dbateman@free.fr>
# Date 1296919153 18000
#      Sat Feb 05 10:19:13 2011 -0500
# Branch release-3-4-x
# Node ID 7428d177f00a0e2ae9f00fb2c1e9864149bfefae
# Parent  c1ea9b90a2722d3813608e30d6b5e7cf1741d77f
Fix for inline legends (#32022, #32343)

diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -6,16 +6,30 @@ 2010-02-05  Rik  <octave@nomad.inbox5.co
 
 	* miscellaneous/version.m, path/matlabroot.m: Correct spelling.
 
 2010-02-05  Rik  <octave@nomad.inbox5.com>
 
 	* help/help.m, linear-algebra/onenormest.m, plot/graphics_toolkit.m,
 	plot/pie3.m, plot/view.m, signal/periodogram.m: Grammarcheck docstrings.
 
+2011-02-05  David Bateman  <dbateman@free.fr>
+
+	Bug #32022 and #32343.
+
+	* plot/legend.m (updatelegend): Don't flip plots when resetting the
+	legend. Use unwind_protect to ensure that the resursive flag is reset
+	in case of an error.
+	(getlegenddata): Remove this function and replace its use with the
+	function __getlegenddata__.
+	* plot/privata/__getlegenddata__.m: New function
+	* plot/module.mk (plot_PRIVATE_FCN_FILES): Add it here.
+	* plot/private/__plt__.m: Set initial values of hlgnd and tlgnd
+	if a legend exists already.
+
 2010-02-02  Rik  <octave@nomad.inbox5.com>
 
 	* sparse/svds.m: Use testif to only run some sparse tests when
 	necessary libraries are installed.
 
 2011-02-01  Ben Abbott  <bpabbott@mac.com>
 
 	* plot/__gnuplot_has_feature__.m: Don't throw an error if gnuplot
diff --git a/scripts/plot/legend.m b/scripts/plot/legend.m
--- a/scripts/plot/legend.m
+++ b/scripts/plot/legend.m
@@ -770,20 +770,23 @@ function [hlegend2, hobjects2, hplot2, t
   endif
 
 endfunction
 
 function updatelegend (h, d)
   persistent recursive = false;
   if (! recursive)
     recursive = true;
-    hax = getfield (get (h, "userdata"), "handle");
-    [hplots, text_strings] = getlegenddata (h);
-    h = legend (hax, flipud (hplots), get (h, "string"));
-    recursive = false;
+    unwind_protect
+      hax = getfield (get (h, "userdata"), "handle");
+      [hplots, text_strings] = __getlegenddata__ (h);
+      h = legend (hax, hplots, get (h, "string"));
+    unwind_protect_cleanup
+      recursive = false;
+    end_unwind_protect
   endif
 endfunction
 
 function updatelegendtext (h, d)
   kids = get (h, "children");
   k = numel (kids);
   in = get (h, "interpreter");
   tc = get (h, "textcolor");
@@ -890,31 +893,31 @@ function updateline (h, d, hlegend, line
   marker = get (h, "marker");
   displayname = get (h, "displayname");
 
   if ((isempty (displayname)
        || (strcmp (marker, "none") && strcmp (linestyle, "none")))
        && (! isempty (lm) || isempty (ll)))
     ## An element was removed from the legend. Need to recall the
     ## legend function to recreate a new legend
-    [hplots, text_strings] = getlegenddata (hlegend);
+    [hplots, text_strings] = __getlegenddata__ (hlegend);
     for i = 1 : numel (hplots)
       if (hplots (i) == h)
         hplots(i) = [];
         text_strings(i) = [];
         break;
       endif
     endfor
     legend (hplots, text_strings);
   elseif ((!isempty (displayname)
            && (! strcmp (marker, "none") || ! strcmp (linestyle, "none")))
           && isempty (lm) && isempty (ll))
     ## An element was added to the legend. Need to recall the
     ## legend function to recreate a new legend
-    [hplots, text_strings] = getlegenddata (hlegend);
+    [hplots, text_strings] = __getlegenddata__ (hlegend);
     hplots = [hplots, h];
     text_strings = {text_strings{:}, displayname};
     legend (hplots, text_strings);
   else
     if (! isempty (ll))
       ypos1 = get (ll,"ydata");
       xpos1 = get (ll,"xdata");
       ypos2 = ypos1(1);
@@ -940,57 +943,16 @@ function updateline (h, d, hlegend, line
             "marker", marker, "markeredgecolor", get (h, "markeredgecolor"),
             "markerfacecolor", get (h, "markerfacecolor"),
             "markersize", get (h, "markersize"), "linestyle", "none",
             "userdata", h, "parent", hlegend);
     endif
   endif
 endfunction
 
-function [hplots, text_strings] = getlegenddata (hlegend)
-  hplots = [];
-  text_strings = {};
-  ca = getfield (get (hlegend, "userdata"), "handle");
-  kids = [];
-  for i = 1  : numel (ca)
-    kids = [kids; get(ca (i), "children")];
-  endfor
-  k = numel (kids);
-  while (k > 0)
-    typ = get (kids(k), "type");
-    while (k > 0
-           && ! (strcmp (typ, "line") || strcmp (typ, "surface")
-                 || strcmp (typ, "patch") || strcmp (typ, "hggroup")))
-      typ = get (kids(--k), "type");
-    endwhile
-    if (k > 0)
-      if (strcmp (get (kids(k), "type"), "hggroup"))
-        hgkids = get (kids(k), "children");
-        for j = 1 : length (hgkids)
-          hgobj = get (hgkids (j));
-          if (isfield (hgobj, "displayname")
-              && ! isempty (hgobj.displayname))
-            hplots = [hplots, hgkids(j)];
-            text_strings = {text_strings{:}, hbobj.displayname};
-            break;
-          endif
-        endfor
-      else
-        if (! isempty (get (kids (k), "displayname")))
-          hplots = [hplots, kids(k)];
-          text_strings = {text_strings{:}, get(kids (k), "displayname")};
-        endif
-      endif
-      if (--k == 0)
-        break;
-      endif
-    endif
-  endwhile
-endfunction
-
 %!demo
 %! clf
 %! x = 0:1;
 %! plot (x, x, ";I am Blue;", x, 2*x, ";I am Green;", x, 3*x, ";I am Red;")
 
 %!demo
 %! clf
 %! x = 0:1;
diff --git a/scripts/plot/module.mk b/scripts/plot/module.mk
--- a/scripts/plot/module.mk
+++ b/scripts/plot/module.mk
@@ -16,16 +16,17 @@ plot_PRIVATE_FCN_FILES = \
   plot/private/__color_str_rgb__.m \
   plot/private/__contour__.m \
   plot/private/__default_plot_options__.m \
   plot/private/__errcomm__.m \
   plot/private/__errplot__.m \
   plot/private/__ezplot__.m \
   plot/private/__fltk_file_filter__.m \
   plot/private/__ghostscript__.m \
+  plot/private/__getlegenddata__.m \
   plot/private/__gnuplot_has_terminal__.m\
   plot/private/__interp_cube__.m \
   plot/private/__line__.m \
   plot/private/__patch__.m \
   plot/private/__pie__.m \
   plot/private/__plt__.m \
   plot/private/__pltopt__.m \
   plot/private/__quiver__.m \
diff --git a/scripts/plot/private/__getlegenddata__.m b/scripts/plot/private/__getlegenddata__.m
new file mode 100644
--- /dev/null
+++ b/scripts/plot/private/__getlegenddata__.m
@@ -0,0 +1,63 @@
+## Copyright (C) 2010-2011 David Bateman
+##
+## This file is part of Octave.
+##
+## Octave is free software; you can redistribute it and/or modify it
+## under the terms of the GNU General Public License as published by
+## the Free Software Foundation; either version 3 of the License, or (at
+## your option) any later version.
+##
+## Octave is distributed in the hope that it will be useful, but
+## WITHOUT ANY WARRANTY; without even the implied warranty of
+## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+## General Public License for more details.
+##
+## You should have received a copy of the GNU General Public License
+## along with Octave; see the file COPYING.  If not, see
+## <http://www.gnu.org/licenses/>.
+
+## -*- texinfo -*-
+## @deftypefn {Function File} {[@var{hplots}, @var{strings}]} = __getlegenddata__ (@var{h})
+## Undocumented internal function.
+## @end deftypefn
+
+function [hplots, text_strings] = __getlegenddata__ (hlegend)
+  hplots = [];
+  text_strings = {};
+  ca = getfield (get (hlegend, "userdata"), "handle");
+  kids = [];
+  for i = 1  : numel (ca)
+    kids = [kids; get(ca (i), "children")];
+  endfor
+  k = numel (kids);
+  while (k > 0)
+    typ = get (kids(k), "type");
+    while (k > 0
+           && ! (strcmp (typ, "line") || strcmp (typ, "surface")
+                 || strcmp (typ, "patch") || strcmp (typ, "hggroup")))
+      typ = get (kids(--k), "type");
+    endwhile
+    if (k > 0)
+      if (strcmp (get (kids(k), "type"), "hggroup"))
+        hgkids = get (kids(k), "children");
+        for j = 1 : length (hgkids)
+          hgobj = get (hgkids (j));
+          if (isfield (hgobj, "displayname")
+              && ! isempty (hgobj.displayname))
+            hplots = [hplots, hgkids(j)];
+            text_strings = {text_strings{:}, hbobj.displayname};
+            break;
+          endif
+        endfor
+      else
+        if (! isempty (get (kids (k), "displayname")))
+          hplots = [hplots, kids(k)];
+          text_strings = {text_strings{:}, get(kids (k), "displayname")};
+        endif
+      endif
+      if (--k == 0)
+        break;
+      endif
+    endif
+  endwhile
+endfunction
diff --git a/scripts/plot/private/__plt__.m b/scripts/plot/private/__plt__.m
--- a/scripts/plot/private/__plt__.m
+++ b/scripts/plot/private/__plt__.m
@@ -31,18 +31,36 @@ function retval = __plt__ (caller, h, va
 
     k = 1;
 
     x_set = false;
     y_set = false;
     property_set = false;
     properties = {};
 
-    hlgnd = [];
-    tlgnd = {};
+    hlegend = [];
+    fkids = get (gcf(), "children");
+    for i = 1 : numel(fkids)
+      if (ishandle (fkids (i)) && strcmp (get (fkids (i), "type"), "axes")
+          && (strcmp (get (fkids (i), "tag"), "legend")))
+        udata = get (fkids (i), "userdata");
+        if (! isempty (intersect (udata.handle, gca ())))
+          hlegend = fkids (i);
+          break;
+        endif
+      endif
+    endfor
+
+    setlgnd = false;
+    if (isempty (hlegend))
+      hlgnd = [];
+      tlgnd = {};
+    else
+      [hlgnd, tlgnd] = __getlegenddata__ (hlegend);
+    endif
 
     ## Gather arguments, decode format, gather plot strings, and plot lines.
 
     retval = [];
 
     while (nargs > 0 || x_set)
 
       if (nargs == 0)
@@ -74,70 +92,71 @@ function retval = __plt__ (caller, h, va
               endif
               properties = [properties, varargin(k:k+1)];
               k += 2;
               nargs -= 2;
             endwhile
           endif
           if (y_set)
             tmp = __plt2__ (h, x, y, options, properties);
-            [hlgnd, tlgnd] = __plt_key__ (tmp, options, hlgnd, tlgnd);
+            [hlgnd, tlgnd, setlgnd] = __plt_key__ (tmp, options, hlgnd, tlgnd, setlgnd);
             properties = {};
             retval = [retval; tmp];
           else
             tmp = __plt1__ (h, x, options, properties);
-            [hlgnd, tlgnd] = __plt_key__ (tmp, options, hlgnd, tlgnd);
+            [hlgnd, tlgnd, setlgnd] = __plt_key__ (tmp, options, hlgnd, tlgnd, setlgnd);
             properties = {};
             retval = [retval; tmp];
           endif
           x_set = false;
           y_set = false;
         else
           error ("plot: no data to plot");
         endif
       elseif (x_set)
         if (y_set)
           options = __pltopt__ (caller, {""});
           tmp = __plt2__ (h, x, y, options, properties);
-          [hlgnd, tlgnd] = __plt_key__ (tmp, options, hlgnd, tlgnd);
+          [hlgnd, tlgnd, setlgnd] = __plt_key__ (tmp, options, hlgnd, tlgnd, setlgnd);
           retval = [retval; tmp];
           x = next_arg;
           y_set = false;
           properties = {};
         else
           y = next_arg;
           y_set = true;
         endif
       else
         x = next_arg;
         x_set = true;
       endif
 
     endwhile
 
-    if (!isempty (hlgnd))
+    if (setlgnd)
       legend (gca(), hlgnd, tlgnd);
     endif
   else
     error ("__plt__: invalid number of arguments");
   endif
 
 endfunction
 
-function [hlgnd, tlgnd] = __plt_key__ (h, options, hlgnd, tlgnd)
+function [hlgnd, tlgnd, setlgnd] = __plt_key__ (h, options, hlgnd, tlgnd, setlgnd)
   n = numel (h);
   if (numel (options) == 1)
     options = repmat (options(:), n, 1);
   endif
 
   for i = 1 : n
     key = options.key;
     if (! isempty (key))
       hlgnd = [hlgnd(:); h(i)];
       tlgnd = {tlgnd{:}, key};
+      setlgnd = true;
     endif
   endfor
 endfunction
 
 function retval = __plt1__ (h, x1, options, properties)
 
   if (nargin < 2 || nargin > 4)
     print_usage ();
