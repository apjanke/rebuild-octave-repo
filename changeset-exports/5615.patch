# HG changeset patch
# User jwe
# Date 1139607042 0
#      Fri Feb 10 21:30:42 2006 +0000
# Node ID d01f07aeaec52a35701960c492a857beec112e17
# Parent  4cc6aeb35f932bc580a0fb0fb5f65557acfeeac6
[project @ 2006-02-10 21:30:41 by jwe]

diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,12 +1,17 @@
+2006-02-10  John W. Eaton  <jwe@octave.org>
+
+	* mx-inlines.cc (MX_ND_REDUCTION): Store in cummulative
+	product of all dimensions in CP_SZ.
+
 2006-02-09  John W. Eaton  <jwe@octave.org>
 
 	* mx-inlines.cc (MX_ND_CUMULATIVE_OP): Store in cummulative
-	product of all dimensions in CP.
+	product of all dimensions in CP_SZ.
 
 2006-02-09  David Bateman  <dbateman@free.fr>
 
         * SparseQR.cc: new file for real sparse QR class.
         * SparseQR.h: declaration.
         * SparseCmplxQR.cc: new file for complex sparse QR class.
         * SparseCmplxQR.h: declaration.
         * dSparse.cc (dinverse,tinverse,inverse): Remove unused input args.
diff --git a/liboctave/mx-inlines.cc b/liboctave/mx-inlines.cc
--- a/liboctave/mx-inlines.cc
+++ b/liboctave/mx-inlines.cc
@@ -410,20 +410,22 @@ OP_DUP_FCN (conj, mx_inline_conj_dup, Co
       dim = nd++; \
       dv.resize (nd, 1); \
     } \
  \
   /* R = op (A, DIM) \
  \
      The strategy here is to access the elements of A along the \
      dimension  specified by DIM.  This means that we loop over each \
-     element of R and adjust the index into A as needed.  */ \
+     element of R and adjust the index into A as needed.  Store the \
+     cummulative product of all dimensions of A in CP_SZ.  The last \
+     element of CP_SZ is the total number of elements of A.  */ \
  \
-  Array<octave_idx_type> cp_sz (nd, 1); \
-  for (int i = 1; i < nd; i++) \
+  Array<octave_idx_type> cp_sz (nd+1, 1); \
+  for (int i = 1; i <= nd; i++) \
     cp_sz(i) = cp_sz(i-1)*dv(i-1); \
  \
   octave_idx_type reset_at = cp_sz(dim); \
   octave_idx_type base_incr = cp_sz(dim+1); \
   octave_idx_type incr = cp_sz(dim); \
   octave_idx_type base = 0; \
   octave_idx_type next_base = base + base_incr; \
   octave_idx_type iter_idx = base; \
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,19 @@
+2006-02-10  John W. Eaton  <jwe@octave.org>
+
+	* lex.l (\[{S}*): Maybe set lexer_flags.looking_at_return_list or
+	lexer_flags.looking_at_matrix_or_assign_lhs here.
+	* parse.y 
+	(return_list_beg): Don't use in_return_list here.
+	(assign_lhs, matrix): Don't use in_matrix_or_assign_lhs here.
+	(in_matrix_or_assign_lhs, in_return_list): Delete unused macros.
+	(matrix): Clear lexer_flags.looking_at_matrix_or_assign_lhs in all
+	cases.
+
 2006-02-09  John W. Eaton  <jwe@octave.org>
 
 	* utils.cc (oct_file_in_path): Check len > 4, not len > 2.
 	From Larrie Carr <larrie@telus.net>.
 
 2006-02-09  David Bateman  <dbateman@free.fr>
 
         * DLD-FUNCTIONS/spqr.cc: New file for sparse QR and dmperm based on
diff --git a/src/lex.l b/src/lex.l
--- a/src/lex.l
+++ b/src/lex.l
@@ -479,16 +479,21 @@ NUMBER	(({D}+\.?{D}*{EXPON}?)|(\.{D}+{EX
 
 \[{S}* {
     nesting_level.bracket ();
 
     current_input_column += yyleng;
     lexer_flags.quote_is_transpose = false;
     lexer_flags.convert_spaces_to_comma = true;
 
+    if (lexer_flags.defining_func && ! lexer_flags.parsed_function_name)
+      lexer_flags.looking_at_return_list = true;
+    else
+      lexer_flags.looking_at_matrix_or_assign_lhs = true;
+
     promptflag--;
     eat_whitespace ();
 
     lexer_flags.bracketflag++;
     BEGIN (MATRIX_START);
     COUNT_TOK_AND_RETURN ('[');
   }
 
diff --git a/src/parse.y b/src/parse.y
--- a/src/parse.y
+++ b/src/parse.y
@@ -596,28 +596,29 @@ string		: DQ_STRING
 constant	: NUM
 		  { $$ = make_constant (NUM, $1); }
 		| IMAG_NUM
 		  { $$ = make_constant (IMAG_NUM, $1); }
 		| string
 		  { $$ = $1; }
 		;
 
-in_matrix_or_assign_lhs
-		: // empty
-		  { lexer_flags.looking_at_matrix_or_assign_lhs = true; }
-		;
-
 matrix		: '[' ']'
-		  { $$ = new tree_constant (octave_value (Matrix ())); }
+		  {
+		    $$ = new tree_constant (octave_value (Matrix ()));
+		    lexer_flags.looking_at_matrix_or_assign_lhs = false;
+		  }
 		| '[' ';' ']'
-		  { $$ = new tree_constant (octave_value (Matrix ())); }
-		| '[' in_matrix_or_assign_lhs matrix_rows ']'
 		  {
-		    $$ = finish_matrix ($3);
+		    $$ = new tree_constant (octave_value (Matrix ()));
+		    lexer_flags.looking_at_matrix_or_assign_lhs = false;
+		  }
+		| '[' matrix_rows ']'
+		  {
+		    $$ = finish_matrix ($2);
 		    lexer_flags.looking_at_matrix_or_assign_lhs = false;
 		  }
 		;
 
 matrix_rows	: matrix_rows1
 		  { $$ = $1; }
 		| matrix_rows1 ';'	// Ignore trailing semicolon.
 		  { $$ = $1; }
@@ -861,19 +862,19 @@ simple_expr	: colon_expr
 		  { $$ = make_boolean_op (EXPR_OR_OR, $1, $2, $3); }
 		;
 
 // Arrange for the lexer to return CLOSE_BRACE for `]' by looking ahead
 // one token for an assignment op.
 
 assign_lhs	: simple_expr
 		  { $$ = new tree_argument_list ($1); }
-		| '[' in_matrix_or_assign_lhs arg_list CLOSE_BRACE
+		| '[' arg_list CLOSE_BRACE
 		  {
-		    $$ = $3;
+		    $$ = $2;
 		    lexer_flags.looking_at_matrix_or_assign_lhs = false;
 		  }
 		;
 
 assign_expr	: assign_lhs '=' expression
 		  { $$ = make_assign_op ('=', $1, $2, $3); }
 		| assign_lhs ADD_EQ expression
 		  { $$ = make_assign_op (ADD_EQ, $1, $2, $3); }
@@ -1142,20 +1143,16 @@ save_symtab	: // empty
 function_symtab	: // empty
 		  { curr_sym_tab = fbi_sym_tab; }
 		;
 
 local_symtab	: // empty
 		  { curr_sym_tab = tmp_local_sym_tab; }
 		;
 
-in_return_list	: // empty
-		  { lexer_flags.looking_at_return_list = true; }
-		;
-
 // ===========================
 // List of function parameters
 // ===========================
 
 param_list_beg	: '('
 		  {
 		    lexer_flags.looking_at_parameter_list = true;
 
@@ -1218,17 +1215,17 @@ param_list2	: identifier
 		    $$ = $1;
 		  }
 		;
 
 // ===================================
 // List of function return value names
 // ===================================
 
-return_list_beg	: '[' in_return_list local_symtab
+return_list_beg	: '[' local_symtab
 		;
 
 return_list	: return_list_beg return_list_end
 		  {
 		    lexer_flags.looking_at_return_list = false;
 		    $$ = new tree_parameter_list ();
 		  }
 		| return_list_beg VARARGOUT return_list_end
