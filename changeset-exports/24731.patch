# HG changeset patch
# User Torsten <mttl@mailbox.org>
# Date 1518343066 -3600
#      Sun Feb 11 10:57:46 2018 +0100
# Node ID a01472d4a1702af95714565e42ecb87ef3f9952d
# Parent  05c9f42512cb25797416550cbec39dfffdef3850
use tab navigation from tab_bar in file editor

* file-editor.cc (active_tab_changed): give focus to current tab widget;
  (switch_left_tab, switch_right_tab, move_tab_left, move_tab_right,
  switch_tab): remove slots, now contained in tab_bar;
  (construct): use new method for adding an action allowing a different
  receiver for the action signal
  (add_action): added argument for different receiver for action signal;

* file-editor.h: remove switch_left_tab, switch_right_tab, move_tab_left,
  move_tab_right, switch_tab;
  add_action with new receiver argument;

diff --git a/libgui/src/m-editor/file-editor.cc b/libgui/src/m-editor/file-editor.cc
--- a/libgui/src/m-editor/file-editor.cc
+++ b/libgui/src/m-editor/file-editor.cc
@@ -772,16 +772,17 @@ namespace octave
     m_editor_tab_map[fileName].fet_ID = ID;
     m_editor_tab_map[fileName].encoding = encoding;
   }
 
   // context menu of edit area
   void file_editor::active_tab_changed (int index)
   {
     emit fetab_change_request (m_tab_widget->widget (index));
+    focus ();
   }
 
   void file_editor::handle_editor_state_changed (bool copy_available,
                                                  bool is_octave_file)
   {
     // In case there is some scenario where traffic could be coming from
     // all the file editor tabs, just process info from the current active tab.
     if (sender () == m_tab_widget->currentWidget ())
@@ -1406,41 +1407,16 @@ namespace octave
     emit fetab_zoom_out (m_tab_widget->currentWidget ());
   }
 
   void file_editor::zoom_normal (bool)
   {
     emit fetab_zoom_normal (m_tab_widget->currentWidget ());
   }
 
-  // slots for tab navigation
-  void file_editor::switch_left_tab (void)
-  {
-    switch_tab (-1);
-  }
-
-  void file_editor::switch_right_tab (void)
-  {
-    switch_tab (1);
-  }
-
-  void file_editor::move_tab_left (void)
-  {
-#if defined (HAVE_QTABWIDGET_SETMOVABLE)
-    switch_tab (-1, true);
-#endif
-  }
-
-  void file_editor::move_tab_right (void)
-  {
-#if defined (HAVE_QTABWIDGET_SETMOVABLE)
-    switch_tab (1, true);
-#endif
-  }
-
   void file_editor::create_context_menu (QMenu *menu)
   {
     // remove all standard actions from scintilla
     QList<QAction *> all_actions = menu->actions ();
     QAction *a;
 
     foreach (a, all_actions)
       menu->removeAction (a);
@@ -1962,29 +1938,33 @@ namespace octave
                     tr ("&Help on Keyword"),
                     SLOT (request_context_help (bool)));
 
     m_context_doc_action
       = add_action (_help_menu,
                     tr ("&Documentation on Keyword"),
                     SLOT (request_context_doc (bool)));
 
-    // tab navigation (no menu, only actions)
+    // tab navigation (no menu, only actions; slots in tab_bar)
 
     m_switch_left_tab_action
-      = add_action (nullptr, "", SLOT (switch_left_tab (void)));
+      = add_action (nullptr, "", SLOT (switch_left_tab (void)),
+                    m_tab_widget->get_tab_bar ());
 
     m_switch_right_tab_action
-      = add_action (nullptr, "", SLOT (switch_right_tab (void)));
+      = add_action (nullptr, "", SLOT (switch_right_tab (void)),
+                    m_tab_widget->get_tab_bar ());
 
     m_move_tab_left_action
-      = add_action (nullptr, "", SLOT (move_tab_left (void)));
+      = add_action (nullptr, "", SLOT (move_tab_left (void)),
+                    m_tab_widget->get_tab_bar ());
 
     m_move_tab_right_action
-      = add_action (nullptr, "", SLOT (move_tab_right (void)));
+      = add_action (nullptr, "", SLOT (move_tab_right (void)),
+                    m_tab_widget->get_tab_bar ());
 
     // toolbar
 
     // popdown menu with mru files
     QToolButton *popdown_button = new QToolButton ();
     popdown_button->setToolTip (tr ("Recent Files"));
     popdown_button->setMenu (m_mru_file_menu);
     popdown_button->setPopupMode (QToolButton::InstantPopup);
@@ -2310,42 +2290,16 @@ namespace octave
   void file_editor::toggle_preference (const QString& preference, bool def)
   {
     QSettings *settings = resource_manager::get_settings ();
     bool old = settings->value (preference,def).toBool ();
     settings->setValue (preference,! old);
     notice_settings (settings);
   }
 
-  void file_editor::switch_tab (int direction, bool movetab)
-  {
-    int tabs = m_tab_widget->count ();
-
-    if (tabs < 2)
-      return;
-
-    int old_pos = m_tab_widget->currentIndex ();
-    int new_pos = m_tab_widget->currentIndex () + direction;
-
-    if (new_pos < 0 || new_pos >= tabs)
-      new_pos = new_pos - direction*tabs;
-
-    if (movetab)
-      {
-#if defined (HAVE_QTABWIDGET_SETMOVABLE)
-        m_tab_widget->tabBar ()->moveTab (old_pos, new_pos);
-        m_tab_widget->setCurrentIndex (old_pos);
-        m_tab_widget->setCurrentIndex (new_pos);
-        focus ();
-#endif
-      }
-    else
-      m_tab_widget->setCurrentIndex (new_pos);
-  }
-
   // Function for closing the files in a removed directory
   void file_editor::handle_dir_remove (const QString& old_name,
                                        const QString& new_name)
   {
     QDir old_dir (old_name);
 
     // Have all file editor tabs signal what their filenames are.
     m_editor_tab_map.clear ();
@@ -2414,32 +2368,38 @@ namespace octave
             break;
           }
       }
 
     return retval;
   }
 
   QAction * file_editor::add_action (QMenu *menu, const QString& text,
-                                     const char *member)
+                                     const char *member,
+                                     QWidget *receiver)
   {
-    return add_action (menu, QIcon (), text, member);
+    return add_action (menu, QIcon (), text, member, receiver);
   }
 
   QAction * file_editor::add_action (QMenu *menu, const QIcon& icon,
-                                    const QString& text, const char *member)
+                                     const QString& text, const char *member,
+                                     QWidget *receiver)
   {
     QAction *a;
+    QWidget *r = this;
+
+    if (receiver != nullptr)
+      r = receiver;
 
     if (menu)
-      a = menu->addAction (icon, text, this, member);
+      a = menu->addAction (icon, text, r, member);
     else
       {
         a = new QAction (this);
-        connect (a, SIGNAL (triggered ()), this, member);
+        connect (a, SIGNAL (triggered ()), r, member);
       }
 
     addAction (a);  // important for shortcut context
     a->setShortcutContext (Qt::WidgetWithChildrenShortcut);
 
     return a;
   }
 
diff --git a/libgui/src/m-editor/file-editor.h b/libgui/src/m-editor/file-editor.h
--- a/libgui/src/m-editor/file-editor.h
+++ b/libgui/src/m-editor/file-editor.h
@@ -295,21 +295,16 @@ namespace octave
     void show_long_line (bool);
     void show_toolbar (bool);
     void show_statusbar (bool);
     void show_hscrollbar (bool);
     void zoom_in (bool);
     void zoom_out (bool);
     void zoom_normal (bool);
 
-    void switch_left_tab (void);
-    void switch_right_tab (void);
-    void move_tab_left (void);
-    void move_tab_right (void);
-
     void create_context_menu (QMenu *);
     void edit_status_update (bool, bool);
 
   protected:
 
     void closeEvent (QCloseEvent *event);
     void dragEnterEvent (QDragEnterEvent *event);
     void dropEvent (QDropEvent *event);
@@ -319,26 +314,25 @@ namespace octave
     bool is_editor_console_tabbed (void);
     void construct (void);
     void add_file_editor_tab (file_editor_tab *f, const QString& fn);
     void mru_menu_update (void);
     bool call_custom_editor (const QString& file_name = QString (), int line = -1);
 
     void toggle_preference (const QString& preference, bool def);
 
-    void switch_tab (int direction, bool movetab = false);
-
     void handle_dir_remove (const QString& old_name, const QString& new_name);
 
     bool editor_tab_has_focus (void);
 
     QWidget * find_tab_widget (const QString& openFileName);
-    QAction * add_action (QMenu *menu, const QString& text, const char *member);
+    QAction * add_action (QMenu *menu, const QString& text,
+                          const char *member, QWidget *receiver = nullptr);
     QAction * add_action (QMenu *menu, const QIcon& icon, const QString& text,
-                          const char *member);
+                          const char *member, QWidget *receiver = nullptr);
 
     QMenu * add_menu (QMenuBar *p, QString text);
 
     std::map<QString, tab_info> m_editor_tab_map;
     QHash<QMenu*, QStringList> m_hash_menu_text;
 
     QString m_ced;
 
