# HG changeset patch
# User Pantxo Diribarne <pantxo.diribarne@gmail.com>
# Date 1552378914 -3600
#      Tue Mar 12 09:21:54 2019 +0100
# Node ID cb5c1ea2062c45cbfaa52334d93a6888e8d9f959
# Parent  f422fc45b52fd5f52a7a1dfe2048599da05c84f3
Fix regression with toolbar and status bar visibility (bug #55795)

* Figure.[h,cc] (Figure::showFigureToolBar): Rename to showFigureStatusBar and
  only handle status bar visibility here.
  (Figure::Figure): Set position first according to the figure properties.
  Initialize m_statusBar, set it invisible and then call showFigureStatusBar if
  needed.
  (Figure::update): Handle ID_MENUBAR and ID_TOOLBAR the same way.
  (UpdateBoundingBoxData): Remove unnecessary struct data type.

* __add_default_menu__.m: Add listener on figure "toolbar" property to make
  it visible when necessary.

diff --git a/libgui/graphics/Figure.cc b/libgui/graphics/Figure.cc
--- a/libgui/graphics/Figure.cc
+++ b/libgui/graphics/Figure.cc
@@ -92,38 +92,34 @@ namespace QtHandles
       m_menuBar (nullptr), m_innerRect (), m_outerRect (),
       m_previousHeight (0), m_resizable (true)
   {
     m_container = new Container (win);
     win->setCentralWidget (m_container);
 
     figure::properties& fp = properties<figure> ();
 
-    // Register for the signal that indicates when a window has moved
-    // to a different screen
-    connect (win, SIGNAL (figureWindowShown ()),
-             this, SLOT (figureWindowShown ()));
+    // Adjust figure position
+    m_innerRect = boundingBoxToRect (fp.get_boundingbox (true));
+    m_outerRect = boundingBoxToRect (fp.get_boundingbox (false));
+
+    set_geometry (m_innerRect);
 
     // Menubar
     m_menuBar = new MenuBar (win);
     win->setMenuBar (m_menuBar);
     m_menuBar->addReceiver (this);
 
     // Status bar
     m_statusBar = win->statusBar ();
-    int boffset = 0;
+    m_statusBar->setVisible (false);
 
     if (fp.toolbar_is ("figure")
         || (fp.toolbar_is ("auto") && fp.menubar_is ("figure")))
-      boffset += m_statusBar->sizeHint ().height ();
-
-    m_innerRect = boundingBoxToRect (fp.get_boundingbox (true));
-    m_outerRect = boundingBoxToRect (fp.get_boundingbox (false));
-
-    set_geometry (m_innerRect.adjusted (0, 0, 0, boffset));
+      showFigureStatusBar (true);
 
     // Enable mouse tracking unconditionally
     enableMouseTracking ();
 
     // When this constructor gets called all properties are already
     // set, even non default. We force "update" here to get things right.
 
     // Figure title
@@ -141,16 +137,21 @@ namespace QtHandles
     update (figure::properties::ID_RESIZE);
 
     // Visibility
     update (figure::properties::ID_VISIBLE);
 
     connect (this, SIGNAL (asyncUpdate (void)),
              this, SLOT (updateContainer (void)));
 
+    // Register for the signal that indicates when a window has moved
+    // to a different screen
+    connect (win, SIGNAL (figureWindowShown ()),
+             this, SLOT (figureWindowShown ()));
+
     win->addReceiver (this);
     m_container->addReceiver (this);
   }
 
   Figure::~Figure (void)
   { }
 
   QString
@@ -378,28 +379,24 @@ namespace QtHandles
         else
           {
             win->setSizePolicy (QSizePolicy::Fixed, QSizePolicy::Fixed);
             win->setFixedSize(win->size ());
             m_resizable = false;
           }
         break;
 
+      case figure::properties::ID_MENUBAR:
       case figure::properties::ID_TOOLBAR:
         if (fp.toolbar_is ("none"))
-          showFigureToolBar (false);
+          showFigureStatusBar (false);
         else if (fp.toolbar_is ("figure"))
-          showFigureToolBar (true);
+          showFigureStatusBar (true);
         else  // "auto"
-          showFigureToolBar (fp.menubar_is ("figure"));
-        break;
-
-      case figure::properties::ID_MENUBAR:
-        if (fp.toolbar_is ("auto"))
-          showFigureToolBar (fp.menubar_is ("figure"));
+          showFigureStatusBar (fp.menubar_is ("figure"));
         break;
 
       case figure::properties::ID_KEYPRESSFCN:
         if (fp.get_keypressfcn ().isempty ())
           m_container->canvas (m_handle)->clearEventMask (Canvas::KeyPress);
         else
           m_container->canvas (m_handle)->addEventMask (Canvas::KeyPress);
         break;
@@ -437,33 +434,31 @@ namespace QtHandles
       default:
         break;
       }
 
     m_blockUpdates = false;
   }
 
   void
-  Figure::showFigureToolBar (bool visible)
+  Figure::showFigureStatusBar (bool visible)
   {
-    if (m_figureToolBar
-        && (! m_figureToolBar->isHidden ()) != visible)
+    if (m_statusBar
+        && (! m_statusBar->isHidden ()) != visible)
       {
-        int dy1 = m_figureToolBar->sizeHint ().height ();
-        int dy2 = m_statusBar->sizeHint ().height ();
+        int dy = m_statusBar->sizeHint ().height ();
         QRect r = qWidget<QWidget> ()->geometry ();
 
         if (! visible)
-          r.adjust (0, dy1, 0, -dy2);
+          r.adjust (0, 0, 0, -dy);
         else
-          r.adjust (0, -dy1, 0, dy2);
+          r.adjust (0, 0, 0, dy);
 
         m_blockUpdates = true;
         set_geometry (r);
-        m_figureToolBar->setVisible (visible);
         m_statusBar->setVisible (visible);
         m_blockUpdates = false;
 
         updateBoundingBox (false);
       }
   }
 
   void
@@ -496,24 +491,16 @@ namespace QtHandles
   }
 
   QWidget*
   Figure::menu (void)
   {
     return qWidget<QMainWindow> ()->menuBar ();
   }
 
-  struct UpdateBoundingBoxData
-  {
-    Matrix m_bbox;
-    bool m_internal;
-    graphics_handle m_handle;
-    Figure *m_figure;
-  };
-
   void
   Figure::updateBoundingBox (bool internal, int flags)
   {
     QWidget *win = qWidget<QWidget> ();
     Matrix bb (1, 4);
     std::string prop;
 
     if (internal)
@@ -704,27 +691,25 @@ namespace QtHandles
       m_figureToolBar = bar;
 
     if (! visible)
       win->addToolBar (bar);
     else
       {
         QSize sz = bar->sizeHint ();
         QRect r = win->geometry ();
-        //qDebug () << "Figure::addCustomToolBar:" << r;
 
         r.adjust (0, -sz.height (), 0, 0);
 
         m_blockUpdates = true;
         set_geometry (r);
         win->addToolBarBreak ();
         win->addToolBar (bar);
         m_blockUpdates = false;
 
-        //qDebug () << "Figure::addCustomToolBar:" << win->geometry ();
         updateBoundingBox (false);
       }
   }
 
   void
   Figure::showCustomToolBar (QToolBar *bar, bool visible)
   {
     QMainWindow *win = qWidget<QMainWindow> ();
diff --git a/libgui/graphics/Figure.h b/libgui/graphics/Figure.h
--- a/libgui/graphics/Figure.h
+++ b/libgui/graphics/Figure.h
@@ -92,17 +92,17 @@ namespace QtHandles
     void redraw (void);
     void show (void);
     void print (const QString& file_cmd, const QString& term);
     void update (int pId);
     void updateBoundingBox (bool internal = false, int flags = 0);
     void beingDeleted (void);
 
   private:
-    void showFigureToolBar (bool visible);
+    void showFigureStatusBar (bool visible);
     void addCustomToolBar (QToolBar *bar, bool visible, bool isdefault);
     void showCustomToolBar (QToolBar *bar, bool visible);
     void set_geometry (QRect r);
 
     void enableMouseTracking (void);
 
   private slots:
     void updateFigureHeight (int delta_h);
diff --git a/scripts/plot/util/private/__add_default_menu__.m b/scripts/plot/util/private/__add_default_menu__.m
--- a/scripts/plot/util/private/__add_default_menu__.m
+++ b/scripts/plot/util/private/__add_default_menu__.m
@@ -132,37 +132,43 @@ function __add_default_menu__ (hf, hmenu
     set (ht(3), "oncallback", {@mouse_tools_cb, ht, "zoomin"}, ...
          "offcallback", {@mouse_tools_cb, ht, "zoomin"});
     set (ht(4), "oncallback", {@mouse_tools_cb, ht, "zoomout"}, ...
          "offcallback", {@mouse_tools_cb, ht, "zoomout"});
     set (ht(5), "oncallback", {@mouse_tools_cb, ht, "text"}, ...
          "offcallback", {@mouse_tools_cb, ht, "text"});
   endif
 
-  ## Add/Restore figure listeners
-  toggle_visibility_cb (hf, [], hmenu);
-  addlistener (hf, "menubar", {@toggle_visibility_cb, hmenu});
 
   if (! exist ("ht", "var"))
     ht = get (htb, "children")(end:-1:1);
     istoggletool = strcmp (get (ht, "type"), "uitoggletool");
     ht(! istoggletool) = [];
   endif
 
+  ## Add/Restore figure listeners
+  toggle_visibility_cb (hf, [], hmenu, htb);
+  addlistener (hf, "menubar", {@toggle_visibility_cb, hmenu, htb});
+  addlistener (hf, "toolbar", {@toggle_visibility_cb, hmenu, htb});
   addlistener (hf, "__mouse_mode__", {@mouse_tools_cb, ht, "mode"});
   addlistener (hf, "__zoom_mode__", {@mouse_tools_cb, ht, "mode"});
 
 endfunction
 
-function toggle_visibility_cb (hf, ~, hmenu)
-  if (strcmp (get (hf, "menubar"), "none"))
-    set (hmenu, "visible", "off")
-  else
-    set (hmenu, "visible", "on")
+function toggle_visibility_cb (hf, ~, hmenu, htb)
+  menu_state = ifelse (strcmp (get (hf, "menubar"), "figure"), "on", "off");
+  toolbar_state = "on";
+  if (strcmp (get (hf, "toolbar"), "auto"))
+    toolbar_state = menu_state;
+  elseif (strcmp (get (hf, "toolbar"), "none"))
+    toolbar_state = "off";
   endif
+  
+  set (hmenu, "visible", menu_state);
+  set (htb, "visible", toolbar_state);
 endfunction
 
 function open_cb (h, e)
   [filename, filedir] = uigetfile ({"*.ofig", "Octave Figure File"}, ...
                                    "Open Figure");
   if (filename != 0)
     fname = fullfile (filedir, filename);
     tmphf = hgload (fname);
@@ -226,23 +232,23 @@ function autoscale_cb (h, e)
   arrayfun (@(h) axis (h, "auto"), hax);
   drawnow ();
 endfunction
 
 function init_mouse_tools (hf)
   set (hf, "__pan_mode__", struct ("Enable", "off",
                                    "Motion", "both",
                                    "FigureHandle", hf),
-       "__rotate_mode__", struct ("Enable", "off",
-                                  "RotateStyle", "box",
-                                  "FigureHandle", hf),
-       "__zoom_mode__", struct ("Enable", "off",
-                                "Motion", "both",
-                                "Direction", "in",
-                                "FigureHandle", hf));
+           "__rotate_mode__", struct ("Enable", "off",
+                                      "RotateStyle", "box",
+                                      "FigureHandle", hf),
+           "__zoom_mode__", struct ("Enable", "off",
+                                    "Motion", "both",
+                                    "Direction", "in",
+                                    "FigureHandle", hf));
 endfunction
 
 function guimode_cb (h, e)
   [hax, fig] = __get_axes__ (h);
   id = get (h, "tag");
   switch (id)
     case "pan_on"
       pan (fig, "on");
@@ -314,17 +320,17 @@ function mouse_tools_cb (h, ev, htools, 
             if (strcmp (typ, "zoomin"))
               val.Direction = "in";
             else
               val.Direction = "out";
             endif
             set (hf, "__mouse_mode__" , "zoom");
           endif
           val.Enable = state;
-          set (hf, prop, val)
+          set (hf, prop, val);
 
         case {"pan", "rotate"}
           prop = ["__", typ, "_mode__"];
           val = get (hf, prop);
           if (strcmp (state, "on"))
             set (hf, "__mouse_mode__" , typ);
           endif
           val.Enable = state;
@@ -349,28 +355,28 @@ function mouse_tools_cb (h, ev, htools, 
 endfunction
 
 function axes_cb (h)
   hax = get (gcbf (), "currentaxes");
   if (! isempty (hax))
     if (strcmp (get (hax, "visible"), "on"))
       set (hax, "visible", "off");
     else
-      set (hax, "visible", "on")
+      set (hax, "visible", "on");
     endif
   endif
 endfunction
 
 function grid_cb (h)
   hax = get (gcbf (), "currentaxes");
   if (! isempty (hax))
     if (strcmp (get (hax, "xgrid"), "on") && strcmp (get (hax, "ygrid"), "on"))
       grid (hax, "off");
     else
-      grid (hax, "on")
+      grid (hax, "on");
     endif
   endif
 endfunction
 
 function auto_cb (h)
   hax = get (gcbf (), "currentaxes");
   if (! isempty (hax))
     axis (hax, "auto");
