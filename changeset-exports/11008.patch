# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1285067352 -7200
#      Tue Sep 21 13:09:12 2010 +0200
# Node ID 3622db30ff05451581054c7fe000dae8f05fef28
# Parent  ffe58182db893fe1b1a8dcd1d7681c03ff69f586
simplify some array tests in liboctave

diff --git a/liboctave/CMatrix.cc b/liboctave/CMatrix.cc
--- a/liboctave/CMatrix.cc
+++ b/liboctave/CMatrix.cc
@@ -3047,53 +3047,31 @@ ComplexMatrix::operator ! (void) const
   return do_mx_unary_op<bool, Complex> (*this, mx_inline_not);
 }
 
 // other operations
 
 bool
 ComplexMatrix::any_element_is_nan (void) const
 {
-  octave_idx_type nr = rows ();
-  octave_idx_type nc = cols ();
-
-  for (octave_idx_type j = 0; j < nc; j++)
-    for (octave_idx_type i = 0; i < nr; i++)
-      {
-        Complex val = elem (i, j);
-        if (xisnan (val))
-          return true;
-      }
-
-  return false;
+  return do_mx_check<Complex> (*this, mx_inline_any_nan);
 }
 
 bool
 ComplexMatrix::any_element_is_inf_or_nan (void) const
 {
-  octave_idx_type nr = rows ();
-  octave_idx_type nc = cols ();
-
-  for (octave_idx_type j = 0; j < nc; j++)
-    for (octave_idx_type i = 0; i < nr; i++)
-      {
-        Complex val = elem (i, j);
-        if (xisinf (val) || xisnan (val))
-          return true;
-      }
-
-  return false;
+  return ! do_mx_check<Complex> (*this, mx_inline_all_finite);
 }
 
 // Return true if no elements have imaginary components.
 
 bool
 ComplexMatrix::all_elements_are_real (void) const
 {
-  return mx_inline_all_real (numel (), data ());
+  return do_mx_check<Complex> (*this, mx_inline_all_real);
 }
 
 // Return nonzero if any element of CM has a non-integer real or
 // imaginary part.  Also extract the largest and smallest (real or
 // imaginary) values and return them in MAX_VAL and MIN_VAL. 
 
 bool
 ComplexMatrix::all_integers (double& max_val, double& min_val) const
diff --git a/liboctave/CNDArray.cc b/liboctave/CNDArray.cc
--- a/liboctave/CNDArray.cc
+++ b/liboctave/CNDArray.cc
@@ -503,47 +503,31 @@ ComplexNDArray::operator ! (void) const
   return do_mx_unary_op<bool, Complex> (*this, mx_inline_not);
 }
 
 // FIXME -- this is not quite the right thing.
 
 bool
 ComplexNDArray::any_element_is_nan (void) const
 {
-  octave_idx_type nel = nelem ();
-
-  for (octave_idx_type i = 0; i < nel; i++)
-    {
-      Complex val = elem (i);
-      if (xisnan (val))
-        return true;
-    }
-  return false;
+  return do_mx_check<Complex> (*this, mx_inline_any_nan);
 }
 
 bool
 ComplexNDArray::any_element_is_inf_or_nan (void) const
 {
-  octave_idx_type nel = nelem ();
-
-  for (octave_idx_type i = 0; i < nel; i++)
-    {
-      Complex val = elem (i);
-      if (xisinf (val) || xisnan (val))
-        return true;
-    }
-  return false;
+  return ! do_mx_check<Complex> (*this, mx_inline_all_finite);
 }
 
 // Return true if no elements have imaginary components.
 
 bool
 ComplexNDArray::all_elements_are_real (void) const
 {
-  return mx_inline_all_real (numel (), data ());
+  return do_mx_check<Complex> (*this, mx_inline_all_real);
 }
 
 // Return nonzero if any element of CM has a non-integer real or
 // imaginary part.  Also extract the largest and smallest (real or
 // imaginary) values and return them in MAX_VAL and MIN_VAL. 
 
 bool
 ComplexNDArray::all_integers (double& max_val, double& min_val) const
diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,35 @@
+2010-09-21  Jaroslav Hajek  <highegg@gmail.com>
+
+	* dNDArray.cc (NDArray::any_element_is_negative, 
+	NDArray::any_element_is_nan, 
+	NDArray::any_element_is_inf_or_nan): Simplify.
+	* fNDArray.cc (FloatNDArray::any_element_is_negative, 
+	FloatNDArray::any_element_is_nan, 
+	FloatNDArray::any_element_is_inf_or_nan): Simplify.
+	* dMatrix.cc (Matrix::any_element_is_negative, 
+	Matrix::any_element_is_nan, 
+	Matrix::any_element_is_inf_or_nan): Simplify.
+	* fMatrix.cc (FloatMatrix::any_element_is_negative, 
+	FloatMatrix::any_element_is_nan, 
+	FloatMatrix::any_element_is_inf_or_nan): Simplify.
+	* CNDArray.cc (ComplexNDArray::any_element_is_negative, 
+	ComplexNDArray::any_element_is_nan, 
+	ComplexNDArray::any_element_is_inf_or_nan): Simplify.
+	* fCNDArray.cc (FloatComplexNDArray::any_element_is_negative, 
+	FloatComplexNDArray::any_element_is_nan, 
+	FloatComplexNDArray::any_element_is_inf_or_nan): Simplify.
+	* CMatrix.cc (ComplexMatrix::any_element_is_negative, 
+	ComplexMatrix::any_element_is_nan, 
+	ComplexMatrix::any_element_is_inf_or_nan): Simplify.
+	* fCMatrix.cc (FloatComplexMatrix::any_element_is_negative, 
+	FloatComplexMatrix::any_element_is_nan, 
+	FloatComplexMatrix::any_element_is_inf_or_nan): Simplify.
+
 2010-09-21  John W. Eaton  <jwe@octave.org>
 
 	* oct-env.cc (do_get_host_name): Call gnulib::gethostname
 	instead of octave_gethostname.
 
 	* lo-utils.h, lo-cutils.c (octave_gethostname): Delete.
 
 2010-09-20  John W. Eaton  <jwe@octave.org>
diff --git a/liboctave/dMatrix.cc b/liboctave/dMatrix.cc
--- a/liboctave/dMatrix.cc
+++ b/liboctave/dMatrix.cc
@@ -2625,21 +2625,17 @@ Matrix::any_element_is_negative (bool ne
 
   if (neg_zero)
     {
       for (octave_idx_type i = 0; i < nel; i++)
         if (lo_ieee_signbit (elem (i)))
           return true;
     }
   else
-    {
-      for (octave_idx_type i = 0; i < nel; i++)
-        if (elem (i) < 0)
-          return true;
-    }
+    return do_mx_check<double> (*this, mx_inline_any_negative);
 
   return false;
 }
 
 bool
 Matrix::any_element_is_nan (void) const
 {
   octave_idx_type nel = nelem ();
diff --git a/liboctave/dNDArray.cc b/liboctave/dNDArray.cc
--- a/liboctave/dNDArray.cc
+++ b/liboctave/dNDArray.cc
@@ -551,49 +551,31 @@ NDArray::any_element_is_negative (bool n
 
   if (neg_zero)
     {
       for (octave_idx_type i = 0; i < nel; i++)
         if (lo_ieee_signbit (elem (i)))
           return true;
     }
   else
-    return mx_inline_any_negative (numel (), data ());
+    return do_mx_check<double> (*this, mx_inline_any_negative);
 
   return false;
 }
 
 bool
 NDArray::any_element_is_nan (void) const
 {
-  octave_idx_type nel = nelem ();
-
-  for (octave_idx_type i = 0; i < nel; i++)
-    {
-      double val = elem (i);
-      if (xisnan (val))
-        return true;
-    }
-
-  return false;
+  return do_mx_check<double> (*this, mx_inline_any_nan);
 }
 
 bool
 NDArray::any_element_is_inf_or_nan (void) const
 {
-  octave_idx_type nel = nelem ();
-
-  for (octave_idx_type i = 0; i < nel; i++)
-    {
-      double val = elem (i);
-      if (xisinf (val) || xisnan (val))
-        return true;
-    }
-
-  return false;
+  return ! do_mx_check<double> (*this, mx_inline_all_finite);
 }
 
 bool
 NDArray::any_element_not_one_or_zero (void) const
 {
   octave_idx_type nel = nelem ();
 
   for (octave_idx_type i = 0; i < nel; i++)
diff --git a/liboctave/fCMatrix.cc b/liboctave/fCMatrix.cc
--- a/liboctave/fCMatrix.cc
+++ b/liboctave/fCMatrix.cc
@@ -3040,53 +3040,31 @@ FloatComplexMatrix::operator ! (void) co
   return do_mx_unary_op<bool, FloatComplex> (*this, mx_inline_not);
 }
 
 // other operations
 
 bool
 FloatComplexMatrix::any_element_is_nan (void) const
 {
-  octave_idx_type nr = rows ();
-  octave_idx_type nc = cols ();
-
-  for (octave_idx_type j = 0; j < nc; j++)
-    for (octave_idx_type i = 0; i < nr; i++)
-      {
-        FloatComplex val = elem (i, j);
-        if (xisnan (val))
-          return true;
-      }
-
-  return false;
+  return do_mx_check<FloatComplex> (*this, mx_inline_any_nan);
 }
 
 bool
 FloatComplexMatrix::any_element_is_inf_or_nan (void) const
 {
-  octave_idx_type nr = rows ();
-  octave_idx_type nc = cols ();
-
-  for (octave_idx_type j = 0; j < nc; j++)
-    for (octave_idx_type i = 0; i < nr; i++)
-      {
-        FloatComplex val = elem (i, j);
-        if (xisinf (val) || xisnan (val))
-          return true;
-      }
-
-  return false;
+  return ! do_mx_check<FloatComplex> (*this, mx_inline_all_finite);
 }
 
 // Return true if no elements have imaginary components.
 
 bool
 FloatComplexMatrix::all_elements_are_real (void) const
 {
-  return mx_inline_all_real (numel (), data ());
+  return do_mx_check<FloatComplex> (*this, mx_inline_all_real);
 }
 
 // Return nonzero if any element of CM has a non-integer real or
 // imaginary part.  Also extract the largest and smallest (real or
 // imaginary) values and return them in MAX_VAL and MIN_VAL. 
 
 bool
 FloatComplexMatrix::all_integers (float& max_val, float& min_val) const
diff --git a/liboctave/fCNDArray.cc b/liboctave/fCNDArray.cc
--- a/liboctave/fCNDArray.cc
+++ b/liboctave/fCNDArray.cc
@@ -498,47 +498,31 @@ FloatComplexNDArray::operator ! (void) c
   return do_mx_unary_op<bool, FloatComplex> (*this, mx_inline_not);
 }
 
 // FIXME -- this is not quite the right thing.
 
 bool
 FloatComplexNDArray::any_element_is_nan (void) const
 {
-  octave_idx_type nel = nelem ();
-
-  for (octave_idx_type i = 0; i < nel; i++)
-    {
-      FloatComplex val = elem (i);
-      if (xisnan (val))
-        return true;
-    }
-  return false;
+  return do_mx_check<FloatComplex> (*this, mx_inline_any_nan);
 }
 
 bool
 FloatComplexNDArray::any_element_is_inf_or_nan (void) const
 {
-  octave_idx_type nel = nelem ();
-
-  for (octave_idx_type i = 0; i < nel; i++)
-    {
-      FloatComplex val = elem (i);
-      if (xisinf (val) || xisnan (val))
-        return true;
-    }
-  return false;
+  return ! do_mx_check<FloatComplex> (*this, mx_inline_all_finite);
 }
 
 // Return true if no elements have imaginary components.
 
 bool
 FloatComplexNDArray::all_elements_are_real (void) const
 {
-  return mx_inline_all_real (numel (), data ());
+  return do_mx_check<FloatComplex> (*this, mx_inline_all_real);
 }
 
 // Return nonzero if any element of CM has a non-integer real or
 // imaginary part.  Also extract the largest and smallest (real or
 // imaginary) values and return them in MAX_VAL and MIN_VAL. 
 
 bool
 FloatComplexNDArray::all_integers (float& max_val, float& min_val) const
diff --git a/liboctave/fMatrix.cc b/liboctave/fMatrix.cc
--- a/liboctave/fMatrix.cc
+++ b/liboctave/fMatrix.cc
@@ -2624,53 +2624,31 @@ FloatMatrix::any_element_is_negative (bo
 
   if (neg_zero)
     {
       for (octave_idx_type i = 0; i < nel; i++)
         if (lo_ieee_signbit (elem (i)))
           return true;
     }
   else
-    {
-      for (octave_idx_type i = 0; i < nel; i++)
-        if (elem (i) < 0)
-          return true;
-    }
+    return do_mx_check<float> (*this, mx_inline_any_negative);
 
   return false;
 }
 
 bool
 FloatMatrix::any_element_is_nan (void) const
 {
-  octave_idx_type nel = nelem ();
-
-  for (octave_idx_type i = 0; i < nel; i++)
-    {
-      float val = elem (i);
-      if (xisnan (val))
-        return true;
-    }
-
-  return false;
+  return do_mx_check<float> (*this, mx_inline_any_nan);
 }
 
 bool
 FloatMatrix::any_element_is_inf_or_nan (void) const
 {
-  octave_idx_type nel = nelem ();
-
-  for (octave_idx_type i = 0; i < nel; i++)
-    {
-      float val = elem (i);
-      if (xisinf (val) || xisnan (val))
-        return true;
-    }
-
-  return false;
+  return ! do_mx_check<float> (*this, mx_inline_all_finite);
 }
 
 bool
 FloatMatrix::any_element_not_one_or_zero (void) const
 {
   octave_idx_type nel = nelem ();
 
   for (octave_idx_type i = 0; i < nel; i++)
diff --git a/liboctave/fNDArray.cc b/liboctave/fNDArray.cc
--- a/liboctave/fNDArray.cc
+++ b/liboctave/fNDArray.cc
@@ -509,49 +509,31 @@ FloatNDArray::any_element_is_negative (b
 
   if (neg_zero)
     {
       for (octave_idx_type i = 0; i < nel; i++)
         if (lo_ieee_signbit (elem (i)))
           return true;
     }
   else
-    return mx_inline_any_negative (numel (), data ());
+    return do_mx_check<float> (*this, mx_inline_any_negative);
 
   return false;
 }
 
 bool
 FloatNDArray::any_element_is_nan (void) const
 {
-  octave_idx_type nel = nelem ();
-
-  for (octave_idx_type i = 0; i < nel; i++)
-    {
-      float val = elem (i);
-      if (xisnan (val))
-        return true;
-    }
-
-  return false;
+  return do_mx_check<float> (*this, mx_inline_any_nan);
 }
 
 bool
 FloatNDArray::any_element_is_inf_or_nan (void) const
 {
-  octave_idx_type nel = nelem ();
-
-  for (octave_idx_type i = 0; i < nel; i++)
-    {
-      float val = elem (i);
-      if (xisinf (val) || xisnan (val))
-        return true;
-    }
-
-  return false;
+  return ! do_mx_check<float> (*this, mx_inline_all_finite);
 }
 
 bool
 FloatNDArray::any_element_not_one_or_zero (void) const
 {
   octave_idx_type nel = nelem ();
 
   for (octave_idx_type i = 0; i < nel; i++)
