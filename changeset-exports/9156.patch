# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1240856535 14400
#      Mon Apr 27 14:22:15 2009 -0400
# Node ID b2b8ed43b922cf8e55929c35c22dc2fa6c151d12
# Parent  ad20b967e1c951c3a736043c5d645694a3aa130c
ov-class.cc: don't dispatch subsref or subsasgn when called from builtin

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,15 @@
+2009-04-27  John W. Eaton  <jwe@octave.org>
+
+	* ov-class.cc (octave_class::dotref): Handle empty parent class.
+	(octave_class::get_current_method_class): Allow result to be empty.
+	(called_from_builtin): New static function.
+	(octave_class::subsref, octave_class::subsasgn): Use it.
+
 2009-04-23  John W. Eaton  <jwe@octave.org>
 
 	* ov-class.cc (Fclass): Check newly constructed classes against
 	the first constructed object of the class.
 
 	* ov-class.h, ov-class.cc (octave_class::exmplar_info): New class.
 	(exemplar_map): New static data member.
 	(exemplar_iterator, exemplar_const_iterator): New typedefs.
diff --git a/src/ov-class.cc b/src/ov-class.cc
--- a/src/ov-class.cc
+++ b/src/ov-class.cc
@@ -91,26 +91,29 @@ octave_class::octave_class (const Octave
 
   if (! error_state)
     load_path::add_to_parent_map (id, parent_list);
 }
 
 static std::string
 get_current_method_class (void)
 {
+  std::string retval;
+
   // FIXME -- is there a better way to do this?
   octave_function *fcn = octave_call_stack::current ();
 
   std::string my_dir = fcn->dir_name ();
 
   size_t ipos = my_dir.find_last_of ("@");
 
-  assert (ipos != std::string::npos);
+  if (ipos != std::string::npos)
+    retval = my_dir.substr (ipos+1);
 
-  return my_dir.substr (ipos+1);
+  return retval;
 }
 
 static void
 gripe_invalid_index (void)
 {
   error ("invalid index for class");
 }
 
@@ -230,17 +233,18 @@ octave_class::dotref (const octave_value
 
   assert (idx.length () == 1);
 
   std::string method_class = get_current_method_class ();
 
   // Find the class in which this method resides before attempting to access
   // the requested field.
 
-  octave_base_value *obvp = find_parent_class (method_class);
+  octave_base_value *obvp
+    = method_class.empty () ? 0 : find_parent_class (method_class);
 
   Octave_map my_map;
 
   my_map = obvp ? obvp->map_value () : map;
 
   std::string nm = idx(0).string_value ();
 
   if (! error_state)
@@ -253,24 +257,38 @@ octave_class::dotref (const octave_value
 	error ("class has no member `%s'", nm.c_str ());
     }
   else
     gripe_invalid_index ();
 
   return retval;
 }
 
+static bool
+called_from_builtin (void)
+{
+  octave_function *fcn = octave_call_stack::caller ();
+
+  // FIXME -- we probably need a better check here, or some other
+  // mechanism to avoid overloaded functions when builtin is used.
+  // For example, what if someone overloads the builtin function?
+  // Also, are there other places where using builtin is not properly
+  // avoiding dispatch?
+
+  return (fcn && fcn->name () == "builtin");
+}
+
 octave_value_list
 octave_class::subsref (const std::string& type,
 		       const std::list<octave_value_list>& idx,
 		       int nargout)
 {
   octave_value_list retval;
 
-  if (in_class_method ())
+  if (in_class_method () || called_from_builtin ())
     {
       // FIXME -- this block of code is the same as the body of
       // octave_struct::subsref.  Maybe it could be shared instead of
       // duplicated.
 
       int skip = 1;
 
       switch (type[0])
@@ -378,17 +396,17 @@ octave_class::numeric_conv (const Cell& 
 
 octave_value
 octave_class::subsasgn (const std::string& type,
 			const std::list<octave_value_list>& idx,
 			const octave_value& rhs)
 {
   octave_value retval;
 
-  if (! in_class_method ())
+  if (! (in_class_method () || called_from_builtin ()))
     {
       octave_value meth = symbol_table::find_method ("subsasgn", class_name ());
 
       if (meth.is_defined ())
 	{
 	  octave_value_list args;
 
 	  args(2) = rhs;
