# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1270535295 -7200
#      Tue Apr 06 08:28:15 2010 +0200
# Node ID d47802f0e55712f0aeaa3e0f51d3349a81953925
# Parent  acf2b099532dcb32d98b786011c10c00b19a9f6d
Back out changeset 4e64fbbd5c58

diff --git a/liboctave/Array-util.cc b/liboctave/Array-util.cc
--- a/liboctave/Array-util.cc
+++ b/liboctave/Array-util.cc
@@ -703,26 +703,22 @@ gripe_del_index_out_of_range (bool is1d,
   const char *err_id = error_id_index_out_of_bounds;
 
   (*current_liboctave_error_with_id_handler)
     (err_id, "A(%s) = []: index out of bounds; value %d out of bound %d",
      is1d ? "I" : "..,I,..", idx, ext);
 }
 
 void
-gripe_invalid_index (bool err)
+gripe_invalid_index (void)
 {
   const char *err_id = error_id_invalid_index;
 
-  if (err)
-    (*current_liboctave_error_with_id_handler)
-      (err_id, "subscript indices must be either positive integers or logicals");
-  else
-    (*current_liboctave_warning_with_id_handler)
-      (err_id, "non-integer subscripts in index expression");
+  (*current_liboctave_error_with_id_handler)
+    (err_id, "subscript indices must be either positive integers or logicals.");
 }
 
 // FIXME -- the following is a common error message to resize,
 // regardless of whether it's called from assign or elsewhere.  It
 // seems OK to me, but eventually the gripe can be specialized.
 // Anyway, propagating various error messages into procedure is, IMHO,
 // a nonsense.  If anything, we should change error handling here (and
 // throughout liboctave) to allow custom handling of errors
diff --git a/liboctave/Array-util.h b/liboctave/Array-util.h
--- a/liboctave/Array-util.h
+++ b/liboctave/Array-util.h
@@ -109,13 +109,13 @@ extern void OCTAVE_API gripe_nonconforma
                                             const dim_vector& op2_dims);
 
 extern void OCTAVE_API gripe_index_out_of_range (int nd, int dim, 
                                                  octave_idx_type iext, octave_idx_type ext);
 
 extern void OCTAVE_API gripe_del_index_out_of_range (bool is1d, octave_idx_type iext, 
                                                      octave_idx_type ext);
 
-extern void OCTAVE_API gripe_invalid_index (bool err = true);
+extern void OCTAVE_API gripe_invalid_index (void);
 
 extern void OCTAVE_API gripe_invalid_resize (void);
 
 #endif
diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,13 @@
+2010-04-06  Jaroslav Hajek  <highegg@gmail.com>
+
+	* idx-vector.cc, Array-util.h, Array-util.cc: Reverse effects of
+	4e64fbbd5c58.
+
 2010-04-02  John W. Eaton  <jwe@octave.org>
 
 	* Array-util.cc, idx-vector.cc, idx-vector.h: Style fixes.
 
 2010-04-02  John W. Eaton  <jwe@octave.org>
 
 	* idx-vector.cc (idx_vector::idx_vector (const Range&)):
 	Move here from idx-vector.h.  Allow non-integer values in ranges,
diff --git a/liboctave/idx-vector.cc b/liboctave/idx-vector.cc
--- a/liboctave/idx-vector.cc
+++ b/liboctave/idx-vector.cc
@@ -784,33 +784,16 @@ idx_vector::idx_vector (const Array<bool
   static const int factor = (2 * sizeof (octave_idx_type));
   octave_idx_type nnz = bnda.nnz ();
   if (nnz <= bnda.numel () / factor)
     rep = new idx_vector_rep (bnda, nnz);
   else
     rep = new idx_mask_rep (bnda, nnz);
 }
 
-idx_vector::idx_vector (const Range& r)
-  : rep (0)
-{
-  if (r.nelem () > 0 && ! r.all_elements_are_ints ())
-    {
-      gripe_invalid_index (false);
-
-      Matrix m = r.matrix_value ();
-
-      rep = new idx_vector_rep (m.map (xround));
-    }
-  else
-    rep = new idx_range_rep (r);
-
-  chkerr ();
-}
-
 bool
 idx_vector::maybe_reduce (octave_idx_type n, const idx_vector& j,
                           octave_idx_type nj)
 {
   bool reduced = false;
 
   // Empty index always reduces.
   if (rep->length (n) == 0)
diff --git a/liboctave/idx-vector.h b/liboctave/idx-vector.h
--- a/liboctave/idx-vector.h
+++ b/liboctave/idx-vector.h
@@ -504,17 +504,19 @@ public:
   idx_vector (const Array<double>& nda) : rep (new idx_vector_rep (nda))
     { chkerr (); }
 
   idx_vector (const Array<float>& nda) : rep (new idx_vector_rep (nda))
     { chkerr (); }
 
   idx_vector (const Array<bool>& nda);
 
-  idx_vector (const Range& r);
+  idx_vector (const Range& r) 
+    : rep (new idx_range_rep (r))
+    { chkerr (); }
 
   idx_vector (const Sparse<bool>& nda) : rep (new idx_vector_rep (nda))
     { chkerr (); }
 
   idx_vector (const idx_vector& a) : rep (a.rep) { rep->count++; }
 
   ~idx_vector (void)
     {
