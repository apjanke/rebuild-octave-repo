# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1480989847 18000
#      Mon Dec 05 21:04:07 2016 -0500
# Node ID d744b1ed48511d89630b618b6d48ac9713a4984d
# Parent  f28e1f5d33a401aaba9110a7af4f8558c719964d
avoid conversion warnings in time -> double functions

* oct-time.h (as_double): New function.
(time::double_value, cpu_time::user, cpu_time::system): Use it.

diff --git a/liboctave/system/oct-time.h b/liboctave/system/oct-time.h
--- a/liboctave/system/oct-time.h
+++ b/liboctave/system/oct-time.h
@@ -23,16 +23,26 @@ along with Octave; see the file COPYING.
 #if ! defined (octave_oct_time_h)
 #define octave_oct_time_h 1
 
 #include "octave-config.h"
 
 #include <ctime>
 #include <string>
 
+static inline double
+as_double (time_t sec, long usec)
+{
+  // Unix time will be exactly representable as a double for more than
+  // 100 million years, so no worry there, and microseconds has a
+  // range of 0-1e6, so we are safe there as well.
+
+  return (static_cast<double> (sec) + static_cast<double> (usec) / 1.0e6);
+}
+
 namespace octave
 {
   namespace sys
   {
     class base_tm;
 
     class
     OCTAVE_API
@@ -41,20 +51,20 @@ namespace octave
     public:
 
       time (void)
         : ot_unix_time (0), ot_usec (0) { stamp (); }
 
       time (time_t t)
         : ot_unix_time (t), ot_usec (0) { }
 
-      time (time_t t, int us)
+      time (time_t t, long us)
         : ot_unix_time (t), ot_usec ()
       {
-        int rem, extra;
+        long rem, extra;
 
         if (us >= 0)
           {
             rem = us % 1000000;
             extra = (us - rem) / 1000000;
           }
         else
           {
@@ -85,17 +95,20 @@ namespace octave
 
         return *this;
       }
 
       ~time (void) { }
 
       void stamp (void);
 
-      double double_value (void) const { return ot_unix_time + ot_usec / 1e6; }
+      double double_value (void) const
+      {
+        return as_double (ot_unix_time, ot_usec);
+      }
 
       time_t unix_time (void) const { return ot_unix_time; }
 
       long usec (void) const { return ot_usec; }
 
       std::string ctime (void) const;
 
     private:
@@ -395,24 +408,22 @@ namespace octave
 
         return *this;
       }
 
       void stamp (void);
 
       double user (void) const
       {
-        return (static_cast<double> (m_usr_sec)
-                + static_cast<double> (m_sys_usec) * 1e-6);
+        return as_double (m_usr_sec, m_usr_usec);
       }
 
       double system (void) const
       {
-        return (static_cast<double> (m_sys_sec)
-                + static_cast<double> (m_sys_usec) * 1e-6);
+        return as_double (m_sys_sec, m_sys_usec);
       }
 
       time_t user_sec (void) const { return m_usr_sec; }
       long user_usec (void) const { return m_usr_usec; }
 
       time_t system_sec (void) const { return m_sys_sec; }
       long system_usec (void) const { return m_sys_usec; }
 
