# HG changeset patch
# User jwe
# Date 1155924320 0
#      Fri Aug 18 18:05:20 2006 +0000
# Node ID 117052c2b53c7b20d32794a117b51f9531f61ddc
# Parent  0dd8428bb2609e8d7e60d493067a6a78f6a4d320
[project @ 2006-08-18 18:05:20 by jwe]

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,13 @@
+2006-08-18  Benjamin Lindner  <lindnerben@gmx.net>
+
+	* ls-mat5.cc (read_mat5_tag): Declare type as int32_t, not int.
+	(read_mat5_binary_element): Likewise, for len and element_length.
+
 2006-08-18  John W. Eaton  <jwe@octave.org>
 
 	* load-save.h (enum load_save_format): New element, LS_MAT_ASCII_LONG.
 	* load-save.cc (Fload, Fsave): Make -ascii Matlab compatible.
 	(do_save): Handle LS_MAT_ASCII.
 	* ls-mat-ascii.cc (save_mat_ascii_data): New function.
 	* ls-mat-ascii.h: Provide decl.
 
diff --git a/src/ls-mat5.cc b/src/ls-mat5.cc
--- a/src/ls-mat5.cc
+++ b/src/ls-mat5.cc
@@ -337,17 +337,17 @@ template void read_mat5_integer_data (st
 	else \
 	  tc = re; \
   }
   
 // Read one element tag from stream IS, 
 // place the type code in TYPE and the byte count in BYTES
 // return nonzero on error
 static int
-read_mat5_tag (std::istream& is, bool swap, int& type, int& bytes)
+read_mat5_tag (std::istream& is, bool swap, int32_t& type, int& bytes)
 {
   unsigned int upper;
   int32_t temp;
 
   if (! is.read (reinterpret_cast<char *> (&temp), 4 ))
     goto data_read_error;
 
   if (swap)
@@ -399,25 +399,25 @@ read_mat5_binary_element (std::istream& 
 {
   std::string retval;
 
   // These are initialized here instead of closer to where they are
   // first used to avoid errors from gcc about goto crossing
   // initialization of variable.
 
   oct_mach_info::float_format flt_fmt = oct_mach_info::flt_fmt_unknown;
-  int type = 0;
+  int32_t type = 0;
   bool imag;
   bool logicalvar;
   enum arrayclasstype arrayclass;
   int32_t nzmax;
   int32_t flags;
   dim_vector dims;
-  int len;
-  int element_length;
+  int32_t len;
+  int32_t element_length;
   std::streampos pos;
   int16_t number;
   number = *(int16_t *)"\x00\x01";
 
   global = false;
 
   // MAT files always use IEEE floating point
   if ((number == 1) ^ swap)
@@ -1641,18 +1641,20 @@ save_mat5_binary_element (std::ostream& 
     }
   else if (cname == "sparse")
     {
       if (tc.is_complex_type ())
 	{
 	  SparseComplexMatrix m = tc.sparse_complex_matrix_value ();
 	  int nc = m.cols ();
 
-	  write_mat5_integer_data (os, m.ridx (), - sizeof(int), nnz);
-	  write_mat5_integer_data (os, m.cidx (), - sizeof(int), nc + 1);
+	  int tmp = sizeof (int);
+
+	  write_mat5_integer_data (os, m.ridx (), -tmp, nnz);
+	  write_mat5_integer_data (os, m.cidx (), -tmp, nc + 1);
 
 	  NDArray buf (dim_vector (nnz, 1));
 
 	  for (int i = 0; i < nnz; i++)
 	    buf (i) = std::real (m.data (i));
 
 	  write_mat5_array (os, buf, save_as_floats);
 
@@ -1661,18 +1663,20 @@ save_mat5_binary_element (std::ostream& 
 
 	  write_mat5_array (os, buf, save_as_floats);
 	}
       else
 	{
 	  SparseMatrix m = tc.sparse_matrix_value ();
 	  int nc = m.cols ();
 
-	  write_mat5_integer_data (os, m.ridx (), - sizeof(int), nnz);
-	  write_mat5_integer_data (os, m.cidx (), - sizeof(int), nc + 1);
+	  int tmp = sizeof (int);
+
+	  write_mat5_integer_data (os, m.ridx (), -tmp, nnz);
+	  write_mat5_integer_data (os, m.cidx (), -tmp, nc + 1);
 
 	  // FIXME
 	  // Is there a way to easily do without this buffer
 	  NDArray buf (dim_vector (nnz, 1));
 
 	  for (int i = 0; i < nnz; i++)
 	    buf (i) = m.data (i);
 
