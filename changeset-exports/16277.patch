# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1363028492 14400
#      Mon Mar 11 15:01:32 2013 -0400
# Node ID 8cb65fd721649c0da5890b862e82e23da87e6593
# Parent  dd7de0345124bb93841f64d95f3c34cb664fdcb7
eliminate obsolete concepts of "pending local" and "forced" variables

* symtab.h, lexh, lex.ll, oct-parse.in.yy, toplev.cc, input.cc:
Delete unused functions and data for handling pending local and forced
variables in the parser and lexer.

diff --git a/libinterp/interpfcn/input.cc b/libinterp/interpfcn/input.cc
--- a/libinterp/interpfcn/input.cc
+++ b/libinterp/interpfcn/input.cc
@@ -512,21 +512,16 @@ get_debug_input (const std::string& prom
   while (Vdebugging)
     {
       unwind_protect middle_frame;
 
       reset_error_handler ();
 
       curr_parser.reset ();
 
-      // Do this with an unwind-protect cleanup function so that the
-      // forced variables will be unmarked in the event of an interrupt.
-      symbol_table::scope_id scope = symbol_table::top_scope ();
-      middle_frame.add_fcn (symbol_table::unmark_forced_variables, scope);
-
       int retval = curr_parser.run ();
 
       if (retval == 0 && curr_parser.stmt_list)
         {
           curr_parser.stmt_list->accept (*current_evaluator);
 
           if (octave_completion_matches_called)
             octave_completion_matches_called = false;
diff --git a/libinterp/interpfcn/symtab.h b/libinterp/interpfcn/symtab.h
--- a/libinterp/interpfcn/symtab.h
+++ b/libinterp/interpfcn/symtab.h
@@ -191,49 +191,35 @@ public:
     static const unsigned int inherited = 16;
 
     // global (redirects to global scope)
     static const unsigned int global = 32;
 
     // not cleared at function exit
     static const unsigned int persistent = 64;
 
-    // temporary variables forced into symbol table for parsing
-    static const unsigned int forced = 128;
-
     // this symbol may NOT become a variable.
     // (symbol added to a static workspace)
-    static const unsigned int added_static = 256;
+    static const unsigned int added_static = 128;
 
   private:
 
     class
     symbol_record_rep
     {
     public:
 
       symbol_record_rep (scope_id s, const std::string& nm,
                          const octave_value& v, unsigned int sc)
         : decl_scope (s), curr_fcn (0), name (nm), value_stack (),
           storage_class (sc), finfo (), valid (true), count (1)
       {
         value_stack.push_back (v);
       }
 
-      void force_variable (context_id context = xdefault_context)
-      {
-        if (context == xdefault_context)
-          context = active_context ();
-
-        octave_value& val = varref (context);
-
-        if (! val.is_defined ())
-          mark_forced ();
-      }
-
       octave_value& varref (context_id context = xdefault_context)
       {
         if (is_global ())
           return symbol_table::global_varref (name);
         else if (is_persistent ())
           return symbol_table::persistent_varref (name);
         else
           {
@@ -336,27 +322,26 @@ public:
         return valid;
       }
 
       bool is_variable (context_id context) const
       {
         if (context == xdefault_context)
           context = active_context ();
 
-        return (! is_local () || is_defined (context) || is_forced ());
+        return (! is_local () || is_defined (context));
       }
 
       bool is_local (void) const { return storage_class & local; }
       bool is_automatic (void) const { return storage_class & automatic; }
       bool is_formal (void) const { return storage_class & formal; }
       bool is_hidden (void) const { return storage_class & hidden; }
       bool is_inherited (void) const { return storage_class & inherited; }
       bool is_global (void) const { return storage_class & global; }
       bool is_persistent (void) const { return storage_class & persistent; }
-      bool is_forced (void) const { return storage_class & forced; }
       bool is_added_static (void) const {return storage_class & added_static; }
 
       void mark_local (void) { storage_class |= local; }
       void mark_automatic (void) { storage_class |= automatic; }
       void mark_formal (void) { storage_class |= formal; }
       void mark_hidden (void) { storage_class |= hidden; }
       void mark_inherited (void) { storage_class |= inherited; }
       void mark_global (void)
@@ -368,27 +353,25 @@ public:
       }
       void mark_persistent (void)
       {
         if (is_global ())
           error ("can't make global variable %s persistent", name.c_str ());
         else
           storage_class |= persistent;
       }
-      void mark_forced (void) { storage_class |= forced; }
       void mark_added_static (void) { storage_class |= added_static; }
 
       void unmark_local (void) { storage_class &= ~local; }
       void unmark_automatic (void) { storage_class &= ~automatic; }
       void unmark_formal (void) { storage_class &= ~formal; }
       void unmark_hidden (void) { storage_class &= ~hidden; }
       void unmark_inherited (void) { storage_class &= ~inherited; }
       void unmark_global (void) { storage_class &= ~global; }
       void unmark_persistent (void) { storage_class &= ~persistent; }
-      void unmark_forced (void) { storage_class &= ~forced; }
       void unmark_added_static (void) { storage_class &= ~added_static; }
 
       void init_persistent (void)
       {
         if (! is_defined ())
           {
             mark_persistent ();
 
@@ -491,21 +474,16 @@ public:
       return symbol_record (rep->dup (new_scope));
     }
 
     const std::string& name (void) const { return rep->name; }
 
     octave_value
     find (const octave_value_list& args = octave_value_list ()) const;
 
-    void force_variable (context_id context = xdefault_context)
-    {
-      rep->force_variable (context);
-    }
-
     octave_value& varref (context_id context = xdefault_context)
     {
       return rep->varref (context);
     }
 
     octave_value varval (context_id context = xdefault_context) const
     {
       return rep->varval (context);
@@ -536,37 +514,34 @@ public:
 
     bool is_local (void) const { return rep->is_local (); }
     bool is_automatic (void) const { return rep->is_automatic (); }
     bool is_formal (void) const { return rep->is_formal (); }
     bool is_global (void) const { return rep->is_global (); }
     bool is_hidden (void) const { return rep->is_hidden (); }
     bool is_inherited (void) const { return rep->is_inherited (); }
     bool is_persistent (void) const { return rep->is_persistent (); }
-    bool is_forced (void) const { return rep->is_forced (); }
     bool is_added_static (void) const { return rep->is_added_static (); }
 
     void mark_local (void) { rep->mark_local (); }
     void mark_automatic (void) { rep->mark_automatic (); }
     void mark_formal (void) { rep->mark_formal (); }
     void mark_hidden (void) { rep->mark_hidden (); }
     void mark_inherited (void) { rep->mark_inherited (); }
     void mark_global (void) { rep->mark_global (); }
     void mark_persistent (void) { rep->mark_persistent (); }
-    void mark_forced (void) { rep->mark_forced (); }
     void mark_added_static (void) { rep->mark_added_static (); }
 
     void unmark_local (void) { rep->unmark_local (); }
     void unmark_automatic (void) { rep->unmark_automatic (); }
     void unmark_formal (void) { rep->unmark_formal (); }
     void unmark_hidden (void) { rep->unmark_hidden (); }
     void unmark_inherited (void) { rep->unmark_inherited (); }
     void unmark_global (void) { rep->unmark_global (); }
     void unmark_persistent (void) { rep->unmark_persistent (); }
-    void unmark_forced (void) { rep->unmark_forced (); }
     void unmark_added_static (void) { rep->unmark_added_static (); }
 
     void init_persistent (void) { rep->init_persistent (); }
 
     void erase_persistent (void) { rep->erase_persistent (); }
 
     void invalidate (void) { rep->invalidate (); }
 
@@ -1200,26 +1175,16 @@ public:
   {
     static symbol_record foobar;
 
     symbol_table *inst = get_instance (xcurrent_scope);
 
     return inst ? inst->do_insert (name) : foobar;
   }
 
-  static void force_variable (const std::string& name,
-                              scope_id scope = xcurrent_scope,
-                              context_id context = xdefault_context)
-  {
-    symbol_table *inst = get_instance (scope);
-
-    if (inst)
-      inst->do_force_variable (name, context);
-  }
-
   static octave_value& varref (const std::string& name,
                                scope_id scope = xcurrent_scope,
                                context_id context = xdefault_context,
                                bool force_add = false)
   {
     static octave_value foobar;
 
     symbol_table *inst = get_instance (scope);
@@ -1490,24 +1455,16 @@ public:
   static void clear_objects (scope_id scope = xcurrent_scope)
   {
     symbol_table *inst = get_instance (scope);
 
     if (inst)
       inst->do_clear_objects ();
   }
 
-  static void unmark_forced_variables (scope_id scope = xcurrent_scope)
-  {
-    symbol_table *inst = get_instance (scope);
-
-    if (inst)
-      inst->do_unmark_forced_variables ();
-  }
-
   static void clear_functions (void)
   {
     for (fcn_table_iterator p = fcn_table.begin (); p != fcn_table.end (); p++)
       p->second.clear ();
   }
 
   static void clear_function (const std::string& name)
   {
@@ -2321,30 +2278,16 @@ private:
 
             return table[name] = ret;
           }
       }
     else
       return p->second;
   }
 
-  void do_force_variable (const std::string& name, context_id context)
-  {
-    table_iterator p = table.find (name);
-
-    if (p == table.end ())
-      {
-        symbol_record& sr = do_insert (name);
-
-        sr.force_variable (context);
-      }
-    else
-      p->second.force_variable (context);
-  }
-
   octave_value& do_varref (const std::string& name, context_id context, bool force_add)
   {
     table_iterator p = table.find (name);
 
     if (p == table.end ())
       {
         symbol_record& sr = do_insert (name, force_add);
 
@@ -2429,22 +2372,16 @@ private:
       {
         symbol_record& sr = p->second;
         octave_value& val = sr.varref ();
         if (val.is_object ())
           p->second.clear (my_scope);
       }
   }
 
- void do_unmark_forced_variables (void)
-  {
-    for (table_iterator p = table.begin (); p != table.end (); p++)
-      p->second.unmark_forced ();
-  }
-
   void do_clear_global (const std::string& name)
   {
     table_iterator p = table.find (name);
 
     if (p != table.end ())
       {
         symbol_record& sr = p->second;
 
diff --git a/libinterp/interpfcn/toplev.cc b/libinterp/interpfcn/toplev.cc
--- a/libinterp/interpfcn/toplev.cc
+++ b/libinterp/interpfcn/toplev.cc
@@ -573,22 +573,16 @@ main_loop (void)
 
           reset_error_handler ();
 
           curr_parser.reset ();
 
           if (symbol_table::at_top_level ())
             tree_evaluator::reset_debug_state ();
 
-          // Do this with an unwind-protect cleanup function so that
-          // the forced variables will be unmarked in the event of an
-          // interrupt.
-          symbol_table::scope_id scope = symbol_table::top_scope ();
-          inner_frame.add_fcn (symbol_table::unmark_forced_variables, scope);
-
           retval = curr_parser.run ();
 
           if (retval == 0)
             {
               if (curr_parser.stmt_list)
                 {
                   curr_parser.stmt_list->accept (*current_evaluator);
 
diff --git a/libinterp/parse-tree/lex.h b/libinterp/parse-tree/lex.h
--- a/libinterp/parse-tree/lex.h
+++ b/libinterp/parse-tree/lex.h
@@ -491,18 +491,16 @@ public:
   void xunput (char c);
 
   bool looking_at_space (void);
 
   bool inside_any_object_index (void);
 
   int is_keyword_token (const std::string& s);
 
-  bool is_variable (const std::string& name);
-
   bool whitespace_is_significant (void);
 
   void handle_number (void);
 
   void handle_continuation (void);
 
   void finish_comment (octave_comment_elt::comment_type typ,
                        bool looking_at_continuation = false);
diff --git a/libinterp/parse-tree/lex.ll b/libinterp/parse-tree/lex.ll
--- a/libinterp/parse-tree/lex.ll
+++ b/libinterp/parse-tree/lex.ll
@@ -1478,18 +1478,16 @@ lexical_feedback::reset (void)
   fcn_file_name = "";
   fcn_file_full_name = "";
   looking_at_object_index.clear ();
   looking_at_object_index.push_front (false);
 
   while (! parsed_function_name.empty ())
     parsed_function_name.pop ();
 
-  pending_local_variables.clear ();
-
   nesting_level.reset ();
 
   tokens.clear ();
 }
 
 int
 lexical_feedback::previous_token_value (void) const
 {
@@ -2049,24 +2047,16 @@ octave_lexer::is_keyword_token (const st
 
       return kw->tok;
     }
 
   return 0;
 }
 
 bool
-octave_lexer::is_variable (const std::string& name)
-{
-  return (symbol_table::is_variable (name)
-          || (pending_local_variables.find (name)
-              != pending_local_variables.end ()));
-}
-
-bool
 octave_lexer::whitespace_is_significant (void)
 {
   return (nesting_level.is_bracket ()
           || (nesting_level.is_brace ()
               && ! looking_at_object_index.front ()));
 }
 
 static inline bool
diff --git a/libinterp/parse-tree/oct-parse.in.yy b/libinterp/parse-tree/oct-parse.in.yy
--- a/libinterp/parse-tree/oct-parse.in.yy
+++ b/libinterp/parse-tree/oct-parse.in.yy
@@ -422,35 +422,23 @@ constant        : NUM
                   { $$ = curr_parser.make_constant (NUM, $1); }
                 | IMAG_NUM
                   { $$ = curr_parser.make_constant (IMAG_NUM, $1); }
                 | string
                   { $$ = $1; }
                 ;
 
 matrix          : '[' ']'
-                  {
-                    $$ = new tree_constant (octave_null_matrix::instance);
-                    curr_lexer->pending_local_variables.clear ();
-                  }
+                  { $$ = new tree_constant (octave_null_matrix::instance); }
                 | '[' ';' ']'
-                  {
-                    $$ = new tree_constant (octave_null_matrix::instance);
-                    curr_lexer->pending_local_variables.clear ();
-                  }
+                  { $$ = new tree_constant (octave_null_matrix::instance); }
                 | '[' ',' ']'
-                  {
-                    $$ = new tree_constant (octave_null_matrix::instance);
-                    curr_lexer->pending_local_variables.clear ();
-                  }
+                  { $$ = new tree_constant (octave_null_matrix::instance); }
                 | '[' matrix_rows ']'
-                  {
-                    $$ = curr_parser.finish_matrix ($2);
-                    curr_lexer->pending_local_variables.clear ();
-                  }
+                  { $$ = curr_parser.finish_matrix ($2); }
                 ;
 
 matrix_rows     : matrix_rows1
                   { $$ = $1; }
                 | matrix_rows1 ';'      // Ignore trailing semicolon.
                   { $$ = $1; }
                 ;
 
@@ -667,24 +655,20 @@ simple_expr     : colon_expr
                   { $$ = curr_parser.make_boolean_op (EXPR_OR_OR, $1, $2, $3); }
                 ;
 
 assign_lhs      : simple_expr
                   {
                     $$ = curr_parser.validate_matrix_for_assignment ($1);
 
                     if ($$)
-                      {
-                        curr_lexer->looking_at_matrix_or_assign_lhs = false;
-                        curr_lexer->pending_local_variables.clear ();
-                      }
+                      { curr_lexer->looking_at_matrix_or_assign_lhs = false; }
                     else
                       {
-                        // validate_matrix_for_assignment deleted $1
-                        // for us.
+                        // validate_matrix_for_assignment deleted $1.
                         ABORT_PARSE;
                       }
                   }
                 ;
 
 assign_expr     : assign_lhs '=' expression
                   { $$ = curr_parser.make_assign_op ('=', $1, $2, $3); }
                 | assign_lhs ADD_EQ expression
@@ -2576,21 +2560,16 @@ octave_parser::make_script (tree_stateme
 
   curr_lexer->help_text = "";
 
   octave_time now;
 
   script->stash_fcn_file_time (now);
 
   primary_fcn_ptr = script;
-
-  // Unmark any symbols that may have been tagged as local variables
-  // while parsing (for example, by force_local_variable in lex.l).
-
-  symbol_table::unmark_forced_variables ();
 }
 
 // Begin defining a function.
 
 octave_user_function *
 octave_parser::start_function (tree_parameter_list *param_list,
                                tree_statement_list *body,
                                tree_statement *end_fcn_stmt)
@@ -2781,22 +2760,16 @@ octave_parser::finish_function (tree_par
           // either as a subfunction or nested function (see above),
           // or as the primary function for the file, via
           // primary_fcn_ptr (see also load_fcn_from_file,,
           // parse_fcn_file, and
           // symbol_table::fcn_info::fcn_info_rep::find_user_function).
 
           retval = new tree_function_def (fcn);
         }
-
-      // Unmark any symbols that may have been tagged as local
-      // variables while parsing (for example, by force_local_variable
-      // in lex.l).
-
-      symbol_table::unmark_forced_variables (fcn->scope ());
     }
 
   return retval;
 }
 
 void
 octave_parser::recover_from_parsing_function (void)
 {
@@ -3232,22 +3205,16 @@ parse_fcn_file (const std::string& full_
       frame.protect_var (CURR_LEXER);
 
       octave_parser curr_parser (ffile);
 
       curr_parser.curr_class_name = dispatch_type;
       curr_parser.autoloading = autoload;
       curr_parser.fcn_file_from_relative_lookup = relative_lookup;
 
-      // Do this with an unwind-protect cleanup function so that
-      // the forced variables will be unmarked in the event of an
-      // interrupt.
-      symbol_table::scope_id scope = symbol_table::top_scope ();
-      frame.add_fcn (symbol_table::unmark_forced_variables, scope);
-
       curr_parser.curr_lexer->force_script = force_script;
       curr_parser.curr_lexer->prep_for_file ();
       curr_parser.curr_lexer->parsing_class_method = ! dispatch_type.empty ();
 
       curr_parser.curr_lexer->fcn_file_name = file;
       curr_parser.curr_lexer->fcn_file_full_name = full_file;
 
       int status = curr_parser.run ();
@@ -3934,22 +3901,16 @@ eval_string (const std::string& eval_str
   frame.protect_var (CURR_LEXER);
 
   octave_parser curr_parser (eval_str);
 
   do
     {
       curr_parser.reset ();
 
-      // Do this with an unwind-protect cleanup function so that the
-      // forced variables will be unmarked in the event of an
-      // interrupt.
-      symbol_table::scope_id scope = symbol_table::top_scope ();
-      frame.add_fcn (symbol_table::unmark_forced_variables, scope);
-
       parse_status = curr_parser.run ();
 
       // Unmark forced variables.
       frame.run (1);
 
       if (parse_status == 0)
         {
           if (curr_parser.stmt_list)
