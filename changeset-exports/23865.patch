# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1502382404 14400
#      Thu Aug 10 12:26:44 2017 -0400
# Node ID d56c18dc1373233855ade6eaa99a02ddbb8081e2
# Parent  e660b93d51dc1635802cd396c1ade7cfe527ae28
new predicates for classdef_superclass_ref objects

* ov.h (octave_value::is_classdef_superclass_ref): New function.
* ov-base.h (octave_base_value::is_classdef_superclass_ref):
New virtual function.
* ov-blassdef.cc
(octave_classdef_superclass_ref::is_classdef_superclass_ref):
New function.

diff --git a/libinterp/octave-value/ov-base.h b/libinterp/octave-value/ov-base.h
--- a/libinterp/octave-value/ov-base.h
+++ b/libinterp/octave-value/ov-base.h
@@ -367,16 +367,18 @@ public:
   virtual bool is_range (void) const { return false; }
 
   virtual bool isstruct (void) const { return false; }
 
   virtual bool isobject (void) const { return false; }
 
   virtual bool is_classdef_meta (void) const { return false; }
 
+  virtual bool is_classdef_superclass_ref (void) const { return false; }
+
   virtual bool is_classdef_object (void) const { return false; }
 
   virtual bool is_package (void) const { return false; }
 
   virtual bool isjava (void) const { return false; }
 
   virtual bool is_cs_list (void) const { return false; }
 
diff --git a/libinterp/octave-value/ov-classdef.cc b/libinterp/octave-value/ov-classdef.cc
--- a/libinterp/octave-value/ov-classdef.cc
+++ b/libinterp/octave-value/ov-classdef.cc
@@ -1075,16 +1075,18 @@ private:
 class octave_classdef_superclass_ref : public octave_function
 {
 public:
   octave_classdef_superclass_ref (const octave_value_list& a)
     : octave_function (), args (a) { }
 
   ~octave_classdef_superclass_ref (void) = default;
 
+  bool is_classdef_superclass_ref (void) { return true; }
+
   octave_function * function_value (bool = false) { return this; }
 
   octave_value_list
   call (octave::tree_evaluator&, int nargout, const octave_value_list& idx)
   {
     octave_value_list retval;
 
     std::string meth_name;
diff --git a/libinterp/octave-value/ov.h b/libinterp/octave-value/ov.h
--- a/libinterp/octave-value/ov.h
+++ b/libinterp/octave-value/ov.h
@@ -587,16 +587,19 @@ public:
   { return rep->isstruct (); }
 
   bool is_classdef_meta (void) const
   { return rep->is_classdef_meta (); }
 
   bool is_classdef_object (void) const
   { return rep->is_classdef_object (); }
 
+  bool is_classdef_superclass_ref (void) const
+  { return rep->is_classdef_superclass_ref (); }
+
   bool is_package (void) const
   { return rep->is_package (); }
 
   bool isobject (void) const
   { return rep->isobject (); }
 
   OCTAVE_DEPRECATED (4.4, "use 'isobject' instead")
   bool is_object (void) const
diff --git a/libinterp/parse-tree/pt-eval.cc b/libinterp/parse-tree/pt-eval.cc
--- a/libinterp/parse-tree/pt-eval.cc
+++ b/libinterp/parse-tree/pt-eval.cc
@@ -1451,17 +1451,17 @@ namespace octave
                 retval = base_expr_val.subsref (type.substr (beg, n-beg),
                                                 idx, nargout);
               }
             catch (octave::index_exception& e)
               {
                 final_index_error (e, expr);
               }
           }
-        else
+        else if (base_expr_val.is_classdef_superclass_ref ())
           {
             // FIXME: we want this to only be a superclass constructor
             // call Should we actually make a check for this or are all
             // other types of calls already dealt with?
 
             octave_function *fcn = base_expr_val.function_value ();
 
             if (fcn)
