# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1502402638 14400
#      Thu Aug 10 18:03:58 2017 -0400
# Node ID b6e756d8f4856a9246372c70913396c8150b62f8
# Parent  3c13a19d5fb71f502232034b53fb90ef4b0d41f2
maint: eliminate TAB characters from source files

diff --git a/etc/NEWS.2 b/etc/NEWS.2
--- a/etc/NEWS.2
+++ b/etc/NEWS.2
@@ -7,26 +7,26 @@ Summary of changes for version 2.1.x (19
 
   * If you are using GNU Emacs 19.34 or earlier, you will need to add
     the following code to your ~/.emacs file in order to use Emacs
     Octave mode:
 
       ;; Set up the custom library.
       ;; taken from http://www.dina.kvl.dk/~abraham/custom/
       (eval-and-compile
-	(condition-case ()
-	    (require 'custom)
-	  (error nil))
-	(if (and (featurep 'custom) (fboundp 'custom-declare-variable))
-	    nil ;; We've got what we needed
-	  ;; We have the old custom-library, hack around it!
-	  (defmacro defgroup (&rest args)
-	    nil)
-	  (defmacro defcustom (var value doc &rest args)
-	    (` (defvar (, var) (, value) (, doc))))))
+        (condition-case ()
+            (require 'custom)
+          (error nil))
+        (if (and (featurep 'custom) (fboundp 'custom-declare-variable))
+            nil ;; We've got what we needed
+          ;; We have the old custom-library, hack around it!
+          (defmacro defgroup (&rest args)
+            nil)
+          (defmacro defcustom (var value doc &rest args)
+            (` (defvar (, var) (, value) (, doc))))))
 
   * When `format +' is in effect, Octave uses the following symbols to
     provide more information about the values in a matrix:
 
       +      postive real
       -      negative real
       i      pure imaginary
       c      complex
diff --git a/etc/NEWS.3 b/etc/NEWS.3
--- a/etc/NEWS.3
+++ b/etc/NEWS.3
@@ -1543,17 +1543,17 @@ Summary of important user-visible change
       This also affects patch objects used in the bar, countour, meshc
       and surfc functions, where the bars and contours will be
       monochrome. A workaround for this is to type "colormap gmap40"
       that loads a colormap that in many cases will be adequate for
       simple bar and contour plots.
 
     + You can control the width of lines using (for example):
 
-	line (x, y, "linewidth", 4, "color", [1, 0, 0.5]);
+        line (x, y, "linewidth", 4, "color", [1, 0, 0.5]);
 
       (this also shows the color feature).
 
     + With gnuplot 4.2, image data is plotted with gnuplot and may be
       combined with other 2-d plot data.
 
     + Lines for contour plots are generated with an Octave function, so
       contour plots are now 2-d plots instead of special 3-d plots, and
@@ -1564,21 +1564,21 @@ Summary of important user-visible change
     emulated. However, this means that the TeX interpreter is only
     supported on the postscript terminals with gnuplot 4.0. Under
     gnuplot 4.2 the terminals aqua, dumb, png, jpeg, gif, pm, windows,
     wxt, svg and x11 are supported as well.
 
     + The following plot commands are now considered obsolete and will
       be removed from a future version of Octave:
 
-	__gnuplot_set__
-	__gnuplot_show__
-	__gnuplot_plot__
-	__gnuplot_splot__
-	__gnuplot_replot__
+        __gnuplot_set__
+        __gnuplot_show__
+        __gnuplot_plot__
+        __gnuplot_splot__
+        __gnuplot_replot__
 
       Additionally, these functions no longer have any effect on plots
       created with the Matlab-style plot commands (plot, line, mesh,
       semilogx, etc.).
 
     + Plot property values are not extensively checked.  Specifying
       invalid property values may produce unpredictable results.
 
diff --git a/libinterp/parse-tree/pt-eval.cc b/libinterp/parse-tree/pt-eval.cc
--- a/libinterp/parse-tree/pt-eval.cc
+++ b/libinterp/parse-tree/pt-eval.cc
@@ -1447,17 +1447,17 @@ namespace octave
             || base_expr_val.is_classdef_meta ())
           {
             try
               {
                 retval = base_expr_val.subsref (type.substr (beg, n-beg),
                                                 idx, nargout);
                 beg = n;
                 idx.clear ();
-	      }
+              }
             catch (octave::index_exception& e)
               {
                 final_index_error (e, expr);
               }
           }
         else
           {
             // FIXME: we want this to only be a superclass constructor
diff --git a/m4/octave_blas_f77_func.m4 b/m4/octave_blas_f77_func.m4
--- a/m4/octave_blas_f77_func.m4
+++ b/m4/octave_blas_f77_func.m4
@@ -63,97 +63,97 @@
 
 ## Derived from
 AC_DEFUN([OCTAVE_BLAS_F77_FUNC], [
 AC_PREREQ(2.50)
 AC_REQUIRE([AX_BLAS])
 
 # F77 call-compatibility checks
 if test "$cross_compiling" = yes ; then
-	ifelse($3, ,$1,$3)
+        ifelse($3, ,$1,$3)
 elif test x"$ax_blas_ok" = xyes; then
-	save_ax_blas_f77_func_LIBS="$LIBS"
-	LIBS="$BLAS_LIBS $LIBS"
-	AC_LANG_PUSH(Fortran 77)
+        save_ax_blas_f77_func_LIBS="$LIBS"
+        LIBS="$BLAS_LIBS $LIBS"
+        AC_LANG_PUSH(Fortran 77)
 # LSAME check (LOGICAL return values)
-	AC_MSG_CHECKING([whether LSAME is called correctly from Fortran])
-	AC_RUN_IFELSE(AC_LANG_PROGRAM(,[[
+        AC_MSG_CHECKING([whether LSAME is called correctly from Fortran])
+        AC_RUN_IFELSE(AC_LANG_PROGRAM(,[[
       logical lsame,w
       external lsame
       character c1,c2
       c1 = 'A'
       c2 = 'B'
       w = lsame(c1,c2)
       if (w) stop 1
       w = lsame(c1,c1)
       if (.not. w) stop 1
       ]]),[ax_blas_lsame_fcall_ok=yes],
-	[ax_blas_lsame_fcall_ok=no])
-	AC_MSG_RESULT([$ax_blas_lsame_fcall_ok])
+        [ax_blas_lsame_fcall_ok=no])
+        AC_MSG_RESULT([$ax_blas_lsame_fcall_ok])
 # ISAMAX check (INTEGER return values)
-	AC_MSG_CHECKING([whether ISAMAX is called correctly from Fortran])
-	AC_RUN_IFELSE(AC_LANG_PROGRAM(,[[
+        AC_MSG_CHECKING([whether ISAMAX is called correctly from Fortran])
+        AC_RUN_IFELSE(AC_LANG_PROGRAM(,[[
       integer isamax,i
       external isamax
       real a(2)
       a(1) = 1e0
       a(2) = -2e0
       i = isamax(2,a,1)
       if (i.ne.2) stop 1
       ]]),[ax_blas_isamax_fcall_ok=yes],
-	[ax_blas_isamax_fcall_ok=no])
-	AC_MSG_RESULT([$ax_blas_isamax_fcall_ok])
+        [ax_blas_isamax_fcall_ok=no])
+        AC_MSG_RESULT([$ax_blas_isamax_fcall_ok])
 # SDOT check (REAL return values)
-	AC_MSG_CHECKING([whether SDOT is called correctly from Fortran])
-	AC_RUN_IFELSE(AC_LANG_PROGRAM(,[[
+        AC_MSG_CHECKING([whether SDOT is called correctly from Fortran])
+        AC_RUN_IFELSE(AC_LANG_PROGRAM(,[[
       real sdot,a(1),b(1),w
       external sdot
       a(1) = 1e0
       b(1) = 2e0
       w = sdot(1,a,1,b,1)
       if (w .ne. a(1)*b(1)) stop 1
       ]]),[ax_blas_sdot_fcall_ok=yes],
-	[ax_blas_sdot_fcall_ok=no])
-	AC_MSG_RESULT([$ax_blas_sdot_fcall_ok])
+        [ax_blas_sdot_fcall_ok=no])
+        AC_MSG_RESULT([$ax_blas_sdot_fcall_ok])
 # DDOT check (DOUBLE return values)
-	AC_MSG_CHECKING([whether DDOT is called correctly from Fortran])
-	AC_RUN_IFELSE(AC_LANG_PROGRAM(,[[
+        AC_MSG_CHECKING([whether DDOT is called correctly from Fortran])
+        AC_RUN_IFELSE(AC_LANG_PROGRAM(,[[
       double precision ddot,a(1),b(1),w
       external ddot
       a(1) = 1d0
       b(1) = 2d0
       w = ddot(1,a,1,b,1)
       if (w .ne. a(1)*b(1)) stop 1
       ]]),[ax_blas_ddot_fcall_ok=yes],
-	[ax_blas_ddot_fcall_ok=no])
-	AC_MSG_RESULT([$ax_blas_ddot_fcall_ok])
+        [ax_blas_ddot_fcall_ok=no])
+        AC_MSG_RESULT([$ax_blas_ddot_fcall_ok])
 # CDOTU check (COMPLEX return values)
-	AC_MSG_CHECKING([whether CDOTU is called correctly from Fortran])
-	AC_RUN_IFELSE(AC_LANG_PROGRAM(,[[
+        AC_MSG_CHECKING([whether CDOTU is called correctly from Fortran])
+        AC_RUN_IFELSE(AC_LANG_PROGRAM(,[[
       complex cdotu,a(1),b(1),w
       external cdotu
       a(1) = cmplx(1e0,1e0)
       b(1) = cmplx(1e0,2e0)
       w = cdotu(1,a,1,b,1)
       if (w .ne. a(1)*b(1)) stop 1
       ]]),[ax_blas_cdotu_fcall_ok=yes],
-	[ax_blas_cdotu_fcall_ok=no])
-	AC_MSG_RESULT([$ax_blas_cdotu_fcall_ok])
+        [ax_blas_cdotu_fcall_ok=no])
+        AC_MSG_RESULT([$ax_blas_cdotu_fcall_ok])
 # ZDOTU check (DOUBLE COMPLEX return values)
-	AC_MSG_CHECKING([whether ZDOTU is called correctly from Fortran])
-	AC_RUN_IFELSE(AC_LANG_PROGRAM(,[[
+        AC_MSG_CHECKING([whether ZDOTU is called correctly from Fortran])
+        AC_RUN_IFELSE(AC_LANG_PROGRAM(,[[
       double complex zdotu,a(1),b(1),w
       external zdotu
       a(1) = dcmplx(1d0,1d0)
       b(1) = dcmplx(1d0,2d0)
       w = zdotu(1,a,1,b,1)
       if (w .ne. a(1)*b(1)) stop 1
       ]]),[ax_blas_zdotu_fcall_ok=yes],
-	[ax_blas_zdotu_fcall_ok=no])
-	AC_MSG_RESULT([$ax_blas_zdotu_fcall_ok])
+        [ax_blas_zdotu_fcall_ok=no])
+        AC_MSG_RESULT([$ax_blas_zdotu_fcall_ok])
 # Check BLAS library integer size.  If it does not appear to be
 # 8 bytes, we assume it is 4 bytes.
 # FIXME: this may fail with things like -ftrapping-math.
         AC_MSG_CHECKING([BLAS library integer size])
         AC_RUN_IFELSE(AC_LANG_PROGRAM(,[[
       integer*8 n
       integer*4 n4
       real s,a(1),b(1),sdot
@@ -170,42 +170,42 @@ c Check that our expectation about the t
       n4 = n
       if (n4 .ne. 1) then
         print *, 'invalid assumption about integer type conversion'
         stop 2
       endif
       s = sdot(n,a,1,b,1)
       if (s .ne. 0.0) stop 1
        ]]),[ax_blas_integer_size=8],
-	[ax_blas_integer_size=4])
-	AC_MSG_RESULT([$ax_blas_integer_size])
+        [ax_blas_integer_size=4])
+        AC_MSG_RESULT([$ax_blas_integer_size])
 
-	AC_LANG_POP(Fortran 77)
+        AC_LANG_POP(Fortran 77)
 
 # if any of the tests failed, reject the BLAS library
-	if test $ax_blas_lsame_fcall_ok = yes \
-		-a $ax_blas_sdot_fcall_ok = yes \
-		-a $ax_blas_ddot_fcall_ok = yes \
-		-a $ax_blas_cdotu_fcall_ok = yes \
-		-a $ax_blas_zdotu_fcall_ok = yes ; then
-		ax_blas_f77_func_ok=yes;
-		$1
-	else
-		ax_blas_f77_func_ok=no;
-		$2
-	fi
-	LIBS="$save_ax_blas_f77_func_LIBS"
+        if test $ax_blas_lsame_fcall_ok = yes \
+                -a $ax_blas_sdot_fcall_ok = yes \
+                -a $ax_blas_ddot_fcall_ok = yes \
+                -a $ax_blas_cdotu_fcall_ok = yes \
+                -a $ax_blas_zdotu_fcall_ok = yes ; then
+                ax_blas_f77_func_ok=yes;
+                $1
+        else
+                ax_blas_f77_func_ok=no;
+                $2
+        fi
+        LIBS="$save_ax_blas_f77_func_LIBS"
 fi
 
 ])dnl AX_BLAS_F77_FUNC
 
 AC_DEFUN([OCTAVE_BLAS_WITH_F77_FUNC], [
 AC_PREREQ(2.50)
 AX_BLAS([# disable special action], [])
 if test x$ax_blas_ok = xyes ; then
-	OCTAVE_BLAS_F77_FUNC(
-	[ifelse([$1],,AC_DEFINE(HAVE_BLAS,1,[Define if you have a BLAS library.]),[$1])],
-	[ax_blas_ok=no; BLAS_LIBS=])
+        OCTAVE_BLAS_F77_FUNC(
+        [ifelse([$1],,AC_DEFINE(HAVE_BLAS,1,[Define if you have a BLAS library.]),[$1])],
+        [ax_blas_ok=no; BLAS_LIBS=])
 fi
 if test x$ax_blas_ok = xno ; then
-	$2
+        $2
 fi
 ])dnl AX_BLAS_WITH_F77_FUNC
