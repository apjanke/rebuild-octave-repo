# HG changeset patch
# User Rik <rik@octave.org>
# Date 1513129866 28800
#      Tue Dec 12 17:51:06 2017 -0800
# Node ID 77b6e0cd22b1244c9accaee360dd1406200f36a9
# Parent  9213b8166af9ba2d4895cca3f315e24a28df7e41
close.m: Allow a figure to be specified by name.

* close.m: Add new calling form and explanation to docstring.
Use findobj() or findall() to locate figures by name.  Add new BIST test.
Update existing BIST input validation tests for new behavior.

diff --git a/scripts/plot/util/close.m b/scripts/plot/util/close.m
--- a/scripts/plot/util/close.m
+++ b/scripts/plot/util/close.m
@@ -14,27 +14,31 @@
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {} {} close
 ## @deftypefnx {} {} close @var{h}
+## @deftypefnx {} {} close @var{figname}
 ## @deftypefnx {} {} close (@var{h})
-## @deftypefnx {} {} close (@var{h}, "hidden")
-## @deftypefnx {} {} close (@var{h}, "force")
+## @deftypefnx {} {} close (@var{figname})
+## @deftypefnx {} {} close (@dots{}, "hidden")
+## @deftypefnx {} {} close (@dots{}, "force")
 ## @deftypefnx {} {} close all
 ## @deftypefnx {} {} close all hidden
 ## @deftypefnx {} {} close all force
 ## Close figure window(s).
 ##
 ## When called with no arguments, close the current figure.  This is equivalent
 ## to @code{close (gcf)}.  If the input @var{h} is a graphic handle, or vector
-## of graphics handles, then close each figure in @var{h}.
+## of graphics handles, then close each figure in @var{h}.  The figure to
+## close may also be specified by name @var{figname} which is matched against
+## the @qcode{"Name"} property of all figures.
 ##
 ## If the argument @qcode{"all"} is given then all figures with visible handles
 ## (HandleVisibility = @qcode{"on"}) are closed.
 ##
 ## If the argument @qcode{"hidden"} is given then figures, including hidden
 ## ones, are closed.
 ##
 ## If the argument @qcode{"force"} is given then figures are closed even when
@@ -60,38 +64,46 @@ function retval = close (arg1, arg2)
   elseif (nargin == 0)
     ## Close current figure.
     ## Can't use gcf because it opens a new plot window if one does not exist.
     figs = get (0, "currentfigure");
     if (figs == 0)  # don't close root figure
       figs = [];
     endif
   elseif (nargin == 1)
-    if (ischar (arg1) && strcmpi (arg1, "all"))
-      figs = get (0, "children");
-      figs = figs(isfigure (figs));
+    if (ischar (arg1))
+      if (strcmpi (arg1, "all"))
+        figs = get (0, "children");
+        figs = figs(isfigure (figs));
+      else
+        figs = findobj ("-depth", 1, "name", arg1, "type", "figure");
+      endif
     elseif (any (isfigure (arg1)))
       figs = arg1(isfigure (arg1));
       figs = figs(strcmp ("on", get (figs, "handlevisibility")));
     elseif (isempty (arg1))
       figs = [];  # Silently accept null argument for Matlab compatibility
     else
-      error ('close: first argument must be "all" or a figure handle');
+      error ('close: first argument must be "all", a figure handle, or a figure name');
     endif
   elseif (ischar (arg2)
           && (strcmpi (arg2, "hidden") || strcmpi (arg2, "force")))
-    if (ischar (arg1) && strcmpi (arg1, "all"))
-      figs = allchild (0);
-      figs = figs(isfigure (figs));
+    if (ischar (arg1))
+      if (strcmpi (arg1, "all"))
+        figs = allchild (0);
+        figs = figs(isfigure (figs));
+      else
+        figs = findall ("-depth", 1, "name", arg1, "type", "figure");
+      endif
     elseif (any (isfigure (arg1)))
       figs = arg1(isfigure (arg1));
     elseif (isempty (arg1))
       figs = [];  # Silently accept null argument for Matlab compatibility
     else
-      error ('close: first argument must be "all" or a figure handle');
+      error ('close: first argument must be "all", a figure handle, or a figure name');
     endif
     if (strcmpi (arg2, "force"))
       delete (figs);
       return;
     endif
     ## Unhide hidden figures that are about to be deleted
     set (figs, "handlevisibility", "on");
   else
@@ -125,28 +137,40 @@ endfunction
 %!   assert (! isfigure (hf));
 %! unwind_protect_cleanup
 %!   if (isfigure (hf))
 %!     delete (hf);
 %!   endif
 %! end_unwind_protect
 
 %!test
-%! ## Test closing specified figure handle
+%! ## Test closing specified numeric figure handle
 %! hf = figure ("visible", "off");
 %! unwind_protect
 %!   close (hf);
 %!   assert (! isfigure (hf));
 %! unwind_protect_cleanup
 %!   if (isfigure (hf))
 %!     delete (hf);
 %!   endif
 %! end_unwind_protect
 
 %!test
+%! ## Test closing specified named figure handle
+%! hf = figure ("visible", "off", "name", "__foobar__");
+%! unwind_protect
+%!   close __foobar__;
+%!   assert (! isfigure (hf));
+%! unwind_protect_cleanup
+%!   if (isfigure (hf))
+%!     delete (hf);
+%!   endif
+%! end_unwind_protect
+
+%!test
 %! ## Test closing hidden figures
 %! hf1 = figure ("visible", "off", "handlevisibility", "off");
 %! hf2 = figure ("visible", "off");
 %! unwind_protect
 %!   close (hf1);
 %!   assert (isfigure (hf1));    # figure not deleted
 %!   close ([hf1 hf2]);
 %!   assert (isfigure (hf1) && ! isfigure (hf2));
@@ -172,13 +196,12 @@ endfunction
 %! unwind_protect_cleanup
 %!   if (isfigure (hf))
 %!     delete (hf);
 %!   endif
 %! end_unwind_protect
 
 ## Test input validation
 %!error close (1,2,3)
-%!error <first argument must be "all" or a figure> close ({"all"})
-%!error <first argument must be "all" or a figure> close ("all_and_more")
-%!error <first argument must be "all" or a figure> close (-1)
+%!error <first argument must be "all", a figure handle> close ({"all"})
+%!error <first argument must be "all", a figure handle> close (-1)
 %!error <second argument must be "hidden"> close all hid
 %!error <second argument must be "hidden"> close all for
