# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1518124841 18000
#      Thu Feb 08 16:20:41 2018 -0500
# Node ID a979bb895b64d4e391e9d5266fae7f7bec150c9f
# Parent  6a6108db3a6bf52e963a70ac1b80f8115abc2bcf
avoid reinterpret_cast on function pointer in previous change

* sysdep.cc (reg_close_key_wrapper): New function.
(get_regkey_value): Use it with unwind_protect instead of casting
function pointer.

diff --git a/libinterp/corefcn/sysdep.cc b/libinterp/corefcn/sysdep.cc
--- a/libinterp/corefcn/sysdep.cc
+++ b/libinterp/corefcn/sysdep.cc
@@ -708,32 +708,37 @@ occurred.
   return ovl (octave_unsetenv_wrapper (tmp.c_str ()));
 }
 
 /*
 ## Test for unsetenv is in setenv test
 */
 
 #if defined (OCTAVE_USE_WINDOWS_API)
+
+static void
+reg_close_key_wrapper (HKEY key)
+{
+  RegCloseKey (key);
+}
+
 LONG
 get_regkey_value (HKEY h_rootkey, const std::string subkey,
                   const std::string name, octave_value& value)
 {
   LONG result;
   HKEY h_subkey;
 
-  octave::unwind_protect frame;
-
   result = RegOpenKeyExA (h_rootkey, subkey.c_str (), 0, KEY_READ, &h_subkey);
   if (result != ERROR_SUCCESS)
     return result;
 
-  // Cast return value to void
-  typedef void (*f_ptr)(HKEY);
-  frame.add_fcn (reinterpret_cast<f_ptr> (RegCloseKey), h_subkey);
+  octave::unwind_protect frame;
+
+  frame.add_fcn (reg_close_key_wrapper, h_subkey);
 
   DWORD length = 0;
   result = RegQueryValueExA (h_subkey, name.c_str (), nullptr, nullptr, nullptr,
                             &length);
   if (result != ERROR_SUCCESS)
     return result;
 
   DWORD type = 0;
