# HG changeset patch
# User jwe
# Date 850017766 0
#      Sun Dec 08 04:02:46 1996 +0000
# Node ID 5c2be7c820ed977fb089f5e45b984c590f58d448
# Parent  2480ef198c464c63aa77302bd917d5d864408d21
[project @ 1996-12-08 04:02:46 by jwe]

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,10 +1,20 @@
+Sat Dec  7 22:00:10 1996  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* oct-stream.cc (do_printf_conv, do_scanf_conv,
+	do_oscanf_num_conv, do_oscanf_str_conv): Convert to real
+	functions instead of CPP macros, using templates where necessary.
+	(do_oscanf_num_conv, do_oscanf_str_conv): Correctly handle
+	discarded values.
+
 Fri Dec  6 00:20:25 1996  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
+	* Version 1.94.
+
 	* Map-*.cc, SLList-*.cc, SLStack-*.cc: Include config.h.
 
 	* ov.h: Don't include SLList.h.
 
 	* SLStack.cc: Delete.  Move everything to SLStack.h.
 
 	* BaseSLList.h, BaseSLList.cc: New files.  Split out the
 	non-template base class parts of SLList.
diff --git a/src/oct-stream.cc b/src/oct-stream.cc
--- a/src/oct-stream.cc
+++ b/src/oct-stream.cc
@@ -851,40 +851,55 @@ octave_base_stream::read (const Matrix& 
 	}
     }
   else
     invalid_operation ("fread", "reading");
 
   return retval;
 }
 
-#define do_scanf_conv(is, fmt, valptr, mval, data, idx, max_size, discard) \
-  do \
-    { \
-      is.scan (fmt, valptr); \
- \
-      if (is) \
-	{ \
-	  if (idx == max_size && ! discard) \
-	    { \
-	      max_size *= 2; \
- \
-	      if (nr > 0) \
-		mval.resize (nr, max_size / nr, 0.0); \
-	      else \
-		mval.resize (max_size, 1, 0.0); \
- \
-	      data = mval.fortran_vec (); \
-	    } \
- \
-	  if (! discard) \
-	    data[idx++] = *(valptr); \
-	} \
-    } \
-  while (0)
+template <class T>
+void
+do_scanf_conv (istream& is, const char *fmt, T valptr, Matrix& mval,
+	       double *data, int& idx, int nr, int max_size,
+	       bool discard) 
+{
+  is.scan (fmt, valptr);
+
+  if (is)
+    {
+      if (idx == max_size && ! discard)
+	{
+	  max_size *= 2;
+
+	  if (nr > 0)
+	    mval.resize (nr, max_size / nr, 0.0);
+	  else
+	    mval.resize (max_size, 1, 0.0);
+
+	  data = mval.fortran_vec ();
+	}
+
+      if (! discard)
+	data[idx++] = *(valptr);
+    }
+}
+
+template void
+do_scanf_conv (istream&, const char*, int*, Matrix&, double*, int&,
+	       int, int, bool);
+
+template void
+do_scanf_conv (istream&, const char*, float*, Matrix&, double*, int&,
+	       int, int, bool);
+
+template void
+do_scanf_conv (istream&, const char*, double*, Matrix&, double*, int&,
+	       int, int, bool);
+
 
 octave_value
 octave_base_stream::do_scanf (scanf_format_list& fmt_list,
 			      int nr, int nc, int& count)
 {
   count = 0;
 
   octave_value retval = Matrix ();
@@ -956,35 +971,35 @@ octave_base_stream::do_scanf (scanf_form
 		  }
 		  break;
 
 		case 'd': case 'i': case 'o': case 'u': case 'x':
 		  {
 		    int tmp;
 
 		    do_scanf_conv (is, fmt, &tmp, mval, data, count,
-				   max_size, discard);
+				   nr, max_size, discard);
 		  }
 		  break;
 
 		case 'e': case 'f': case 'g':
 		  {
 		    if (elt->modifier == 'l')
 		      {
 			double tmp;
 
 			do_scanf_conv (is, fmt, &tmp, mval, data,
-				       count, max_size, discard); 
+				       count, nr, max_size, discard); 
 		      }
 		    else
 		      {
 			float tmp;
 
 			do_scanf_conv (is, fmt, &tmp, mval, data,
-				       count, max_size, discard); 
+				       count, nr, max_size, discard); 
 		      }
 		  }
 		  break;
 
 		case 'c':
 		  is.unsetf (ios::skipws);
 		  // Fall through...
 
@@ -1189,53 +1204,70 @@ octave_base_stream::scanf (const string&
 	}
     }
   else
     invalid_operation ("fscanf", "writing");
 
   return retval;
 }
 
-#define do_oscanf_num_conv(is, fmt, valptr) \
-  do \
-    { \
-      streambuf *isb = is.rdbuf (); \
- \
-      if (isb->scan (fmt, valptr) > 0) \
-	{ \
-	  if (! discard && is) \
-	    retval = (double) (*valptr); \
-	} \
-      else \
-	error ("fscanf: conversion failed"); \
-    } \
-  while (0)
-
-#define do_oscanf_str_conv(is, fmt, sptr, maxlen) \
-  do \
-    { \
-      streambuf *isb = is.rdbuf (); \
- \
-      if (isb->scan (fmt, sptr) > 0) \
-	{ \
-	  if (! discard && is) \
-	    { \
-	      sptr[maxlen] = '\0'; \
-	      retval = sptr; \
-	    } \
-	} \
-      else \
-	error ("fscanf: conversion failed"); \
-    } \
-  while (0)
+template <class T>
+octave_value
+do_oscanf_num_conv (istream& is, const char *fmt, T valptr, bool discard)
+{
+  octave_value retval;
+
+  is.scan (fmt, valptr);
+
+  if (is)
+    {
+      if (! discard)
+	retval = (double) (*valptr);
+    }
+  else
+    error ("fscanf: conversion failed");
+
+  return retval;
+}
+
+template octave_value
+do_oscanf_num_conv (istream&, const char*, int*, bool);
+
+template octave_value
+do_oscanf_num_conv (istream&, const char*, float*, bool);
+
+template octave_value
+do_oscanf_num_conv (istream&, const char*, double*, bool);
+
+static inline octave_value
+do_oscanf_str_conv (istream& is, const char *fmt, char *sptr,
+		    int maxlen, bool discard)
+{
+  octave_value retval;
+
+  is.scan (fmt, sptr);
+
+  if (is)
+    {
+      if (! discard)
+	{
+	  sptr[maxlen] = '\0';
+	  retval = sptr;
+	}
+    }
+  else
+    error ("fscanf: conversion failed");
+
+  return retval;
+}
 
 octave_value
 octave_base_stream::do_oscanf (const scanf_format_elt *elt)
 {
-  octave_value retval = Matrix ();
+  octave_value retval;
 
   istream *isp = input_stream ();
 
   if (isp)
     {
       istream& is = *isp;
 
       ios::fmtflags flags = is.flags ();
@@ -1255,60 +1287,62 @@ octave_base_stream::do_oscanf (const sca
 		is.scan (fmt, &dummy);
 	      }
 	      break;
 
 	    case 'd': case 'i': case 'o': case 'u': case 'x':
 	      {
 		int tmp;
 
-		do_oscanf_num_conv (is, fmt, &tmp);
+		retval = do_oscanf_num_conv (is, fmt, &tmp, discard);
 	      }
 	      break;
 
 	    case 'e': case 'f': case 'g':
 	      {
 		if (elt->modifier == 'l')
 		  {
 		    double tmp;
 
-		    do_oscanf_num_conv (is, fmt, &tmp);
+		    retval = do_oscanf_num_conv (is, fmt, &tmp, discard);
 		  }
 		else
 		  {
 		    float tmp;
 
-		    do_oscanf_num_conv (is, fmt, &tmp);
+		    retval = do_oscanf_num_conv (is, fmt, &tmp, discard);
 		  }
 	      }
 	      break;
 
 	    case 'c':
 	      {
 		is.unsetf (ios::skipws);
 
 		int width = elt->width ? elt->width : 1;
 
 		char *tmp = new char[width + 1];
 
-		do_oscanf_str_conv (is, fmt, tmp, width);
+		retval = do_oscanf_str_conv (is, fmt, tmp, width, discard);
 
 		is.setf (flags);
 
 		delete [] tmp;
 	      }
 	      break;
 
 	    case 's':
 	      {
 		// XXX FIXME XXX -- this must be fixed!
 
 		int width = elt->width ? elt->width : 65535;
 		char *tmp = new char [width+1];
-		do_oscanf_str_conv (is, fmt, tmp, width);
+
+		retval = do_oscanf_str_conv (is, fmt, tmp, width, discard);
+
 		delete [] tmp;
 	      }
 	      break;
 
 	    case 'p': case '[':
 	      error ("fscanf: unsupported format specifier");
 	      break;
 
@@ -1397,26 +1431,33 @@ octave_base_stream::oscanf (const string
 	default:
 	  {
 	    int len = fmt_list.length ();
 
 	    retval.resize (nconv, Matrix ());
 
 	    const scanf_format_elt *elt = fmt_list.first ();
 
+	    int num_values = 0;
+
 	    for (int i = 0; i < nconv; i++)
 	      {
-		retval (i) = do_oscanf (elt);
+		octave_value tmp = do_oscanf (elt);
+
+		if (tmp.is_defined ())
+		  retval (num_values++) = tmp;
 
 		if (! ok ())
 		  break;
 
 		elt = fmt_list.next ();
 	      }
 
+	    retval.resize (num_values);
+
 	    // Pick up any trailing stuff.
 	    if (ok () && len > nconv)
 	      do_oscanf (elt);
 	  }
 	  break;
 	}
     }
   else
@@ -1637,48 +1678,61 @@ printf_value_cache::string_value (void)
   else
     curr_state = conversion_error;
 
   return retval;
 }
 
 // Ugh again and again.
 
-#define do_printf_conv(os, fmt, nsa, sa_1, sa_2, have_arg, arg) \
-do \
-  { \
-    switch (nsa) \
-      { \
-      case 2: \
-	if (have_arg) \
-	  os.form (fmt, sa_1, sa_2, arg); \
-	else \
-	  os.form (fmt, sa_1, sa_2); \
-	break; \
- \
-      case 1: \
-	if (have_arg) \
-	  os.form (fmt, sa_1, arg); \
-	else \
-	  os.form (fmt, sa_1); \
-	break; \
- \
-      case 0: \
-	if (have_arg) \
-	  os.form (fmt, arg); \
-	else \
-	  os.form (fmt); \
-	break; \
- \
-      default: \
-	::error ("fprintf: internal error handling format"); \
-	break; \
-      } \
-  } \
-while (0)
+template <class T>
+void
+do_printf_conv (ostream& os, const char *fmt, int nsa, int sa_1,
+		int sa_2, bool have_arg, T arg)
+{
+  switch (nsa)
+    {
+    case 2:
+      if (have_arg)
+	os.form (fmt, sa_1, sa_2, arg);
+      else
+	os.form (fmt, sa_1, sa_2);
+      break;
+
+    case 1:
+      if (have_arg)
+	os.form (fmt, sa_1, arg);
+      else
+	os.form (fmt, sa_1);
+      break;
+
+    case 0:
+      if (have_arg)
+	os.form (fmt, arg);
+      else
+	os.form (fmt);
+      break;
+
+    default:
+      ::error ("fprintf: internal error handling format");
+      break;
+    }
+}
+
+template void
+do_printf_conv (ostream&, const char*, int, int, int, bool, int);
+
+template void
+do_printf_conv (ostream&, const char*, int, int, int, bool, long);
+
+template void
+do_printf_conv (ostream&, const char*, int, int, int, bool, double);
+
+template void
+do_printf_conv (ostream&, const char*, int, int, int, bool, const char*);
 
 int
 octave_base_stream::do_printf (printf_format_list& fmt_list,
 			       const octave_value_list& args)
 {
   int retval = -1;
 
   ostream *osp = output_stream ();
@@ -1722,25 +1776,25 @@ octave_base_stream::do_printf (printf_fo
 			    break;
 			}
 		    }
 		}
 
 	      const char *fmt = elt->text;
 
 	      if (doing_percent || args == 0)
-		do_printf_conv (os, fmt, nsa, sa_1, sa_2, 0, 0.0);
+		do_printf_conv (os, fmt, nsa, sa_1, sa_2, false, 0.0);
 	      else
 		{
 		  if (elt->type == 's' && val_cache.looking_at_string ())
 		    {
 		      string val = val_cache.string_value ();
 
 		      if (val_cache)
-			do_printf_conv (os, fmt, nsa, sa_1, sa_2, 1,
+			do_printf_conv (os, fmt, nsa, sa_1, sa_2, true,
 					val.c_str ());
 		      else
 			break;
 		    }
 		  else
 		    {
 		      double val = val_cache.double_value ();
 
@@ -1748,27 +1802,27 @@ octave_base_stream::do_printf (printf_fo
 			{
 			  switch (elt->type)
 			    {
 			    case 'd': case 'i': case 'o': case 'x':
 			    case 'X': case 'u': case 'c':
 			      {
 				if (elt->modifier == 'l')
 				  do_printf_conv (os, fmt, nsa, sa_1,
-						  sa_2, 1, (long) val);
+						  sa_2, true, (long) val);
 				else
 				  do_printf_conv (os, fmt, nsa, sa_1,
-						  sa_2, 1, (int) val);
+						  sa_2, true, (int) val);
 			      }
 			      break;
 
 			    case 'f': case 'e': case 'E':
 			    case 'g': case 'G':
 			      do_printf_conv (os, fmt, nsa, sa_1,
-					      sa_2, 1, val);
+					      sa_2, true, val);
 			      break;
 
 			    default:
 			      error ("fprintf: invalid format specifier");
 			      return -1;
 			      break;
 			    }
 			}
