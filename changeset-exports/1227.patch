# HG changeset patch
# User jwe
# Date 797475003 0
#      Mon Apr 10 00:50:03 1995 +0000
# Node ID 766e2a1a4e7b2790eae68dd39c0e5cd7e9a1e4e2
# Parent  2457d4ba0691498d47d85a26aefa0966dfb05929
[project @ 1995-04-10 00:48:19 by jwe]

diff --git a/src/pt-misc.h b/src/pt-misc.h
--- a/src/pt-misc.h
+++ b/src/pt-misc.h
@@ -91,19 +91,22 @@ private:
   tree_expression *expression;	// Command to execute.
   int print_flag;		// Print result of eval for this command?
 };
 
 class
 tree_statement_list : public SLList<tree_statement *>, public tree_print_code
 {
 public:
-  tree_statement_list (void) : SLList<tree_statement *> () { }
-  tree_statement_list (tree_statement *s) : SLList<tree_statement *> ()
-    { append (s); }
+  tree_statement_list (void)
+    : SLList<tree_statement *> (), tree_print_code () { }
+
+  tree_statement_list (tree_statement *s)
+    : SLList<tree_statement *> (), tree_print_code ()
+      { append (s); }
 
   ~tree_statement_list (void)
     {
       while (! empty ())
 	{
 	  tree_statement *t = remove_front ();
 	  delete t;
 	}
@@ -118,19 +121,22 @@ public:
 
 // Argument lists.  Used to hold the list of expressions that are the
 // arguments in a function call or index expression.
 
 class
 tree_argument_list : public SLList<tree_expression *>, public tree_print_code
 {
 public:
-  tree_argument_list (void) : SLList<tree_expression *> () { }
-  tree_argument_list (tree_expression *t) : SLList<tree_expression *> ()
-    { append (t); }
+  tree_argument_list (void)
+    : SLList<tree_expression *> (), tree_print_code () { }
+
+  tree_argument_list (tree_expression *t)
+    : SLList<tree_expression *> (), tree_print_code ()
+      { append (t); }
 
   ~tree_argument_list (void)
     {
       while (! empty ())
 	{
 	  tree_expression *t = remove_front ();
 	  delete t;
 	}
@@ -144,24 +150,26 @@ public:
 // Parameter lists.  Used to hold the list of input and output
 // parameters in a function definition.  Elements are identifiers
 // only.
 
 class
 tree_parameter_list : public SLList<tree_identifier *>, public tree_print_code
 {
 public:
-  tree_parameter_list (void) : SLList<tree_identifier *> ()
-    { marked_for_varargs = 0; }
+  tree_parameter_list (void)
+    : SLList<tree_identifier *> (), tree_print_code ()
+      { marked_for_varargs = 0; }
 
-  tree_parameter_list (tree_identifier *t) : SLList<tree_identifier *> ()
-    {
-      marked_for_varargs = 0;
-      append (t);
-    }
+  tree_parameter_list (tree_identifier *t)
+    : SLList<tree_identifier *> (), tree_print_code ()
+      {
+	marked_for_varargs = 0;
+	append (t);
+      }
 
   ~tree_parameter_list (void)
     {
       while (! empty ())
 	{
 	  tree_identifier *t = remove_front ();
 	  delete t;
 	}
@@ -200,19 +208,21 @@ private:
 // Return lists.  Used to hold the right hand sides of multiple
 // assignment expressions.
 
 class
 tree_return_list : public SLList<tree_index_expression *>,
   public tree_print_code 
 {
 public:
-  tree_return_list (void) : SLList<tree_index_expression *> () { }
+  tree_return_list (void)
+    : SLList<tree_index_expression *> (), tree_print_code () { }
+
   tree_return_list (tree_index_expression *t)
-    : SLList<tree_index_expression *> ()
+    : SLList<tree_index_expression *> (), tree_print_code ()
       { append (t); }
 
   ~tree_return_list (void)
     {
       while (! empty ())
 	{
 	  tree_index_expression *t = remove_front ();
 	  delete t;
@@ -267,19 +277,22 @@ private:
   tree_identifier *ident;
   tree_simple_assignment_expression *assign_expr;
 };
 
 class
 tree_global_init_list : public SLList<tree_global *>, public tree_print_code
 {
 public:
-  tree_global_init_list (void) : SLList<tree_global *> () { }
-  tree_global_init_list (tree_global *t) : SLList<tree_global *> ()
-    { append (t); }
+  tree_global_init_list (void)
+    : SLList<tree_global *> (), tree_print_code () { }
+
+  tree_global_init_list (tree_global *t)
+    : SLList<tree_global *> (), tree_print_code ()
+      { append (t); }
 
   ~tree_global_init_list (void)
     {
       while (! empty ())
 	{
 	  tree_global *t = remove_front ();
 	  delete t;
 	}
@@ -328,19 +341,22 @@ private:
   tree_expression *expr;
   tree_statement_list *list;
 };
 
 class
 tree_if_command_list : public SLList<tree_if_clause *>, public tree_print_code
 {
 public:
-  tree_if_command_list (void) : SLList<tree_if_clause *> () { }
-  tree_if_command_list (tree_if_clause *t) : SLList<tree_if_clause *> ()
-    { append (t); }
+  tree_if_command_list (void)
+    : SLList<tree_if_clause *> (), tree_print_code () { }
+
+  tree_if_command_list (tree_if_clause *t)
+    : SLList<tree_if_clause *> (), tree_print_code ()
+      { append (t); }
 
   ~tree_if_command_list (void)
     {
       while (! empty ())
 	{
 	  tree_if_clause *t = remove_front ();
 	  delete t;
 	}
diff --git a/src/pt-plot.h b/src/pt-plot.h
--- a/src/pt-plot.h
+++ b/src/pt-plot.h
@@ -180,19 +180,19 @@ private:
   tree_expression *title_clause;
   subplot_style *style_clause;
 };
 
 class
 subplot_list : public SLList<subplot *>, public tree_print_code
 {
  public:
-  subplot_list (void) : SLList<subplot *> () { }
+  subplot_list (void) : SLList<subplot *> (), tree_print_code () { }
 
-  subplot_list (subplot *t) : SLList<subplot *> ()
+  subplot_list (subplot *t) : SLList<subplot *> (), tree_print_code ()
     { append (t); }
 
   ~subplot_list (void)
     {
       while (! empty ())
 	{
 	  subplot *t = remove_front ();
 	  delete t;
