# HG changeset patch
# User Rik <rik@octave.org>
# Date 1497673177 25200
#      Fri Jun 16 21:19:37 2017 -0700
# Node ID 3426a596eabd2d92f9b892eacdfddeb75354e66e
# Parent  0954bf188bedf39a2f77c30220ef68fd57a20a5b
Use log2, log2f from C++ std library.
These functions are guaranteed to be part of C++11 standard library.

* configure.ac: Remove AC_CHECK_FUNCS for log2, log2f.

* lo-mappers.cc: Delegate to std::log2 or std::log2f for log2.

diff --git a/configure.ac b/configure.ac
--- a/configure.ac
+++ b/configure.ac
@@ -2450,17 +2450,17 @@ OCTAVE_CHECK_FUNC_COMPLEX(acosh)
 OCTAVE_CHECK_FUNC_COMPLEX(asin)
 OCTAVE_CHECK_FUNC_COMPLEX(asinh)
 OCTAVE_CHECK_FUNC_COMPLEX(atan)
 OCTAVE_CHECK_FUNC_COMPLEX(atanh)
 
 ## Check for nonstandard, but common math functions, that we need.
 
 dnl Use multiple AC_CHECKs to avoid line continuations '\' in list
-AC_CHECK_FUNCS([erf erff erfc erfcf exp2f log2 log2f])
+AC_CHECK_FUNCS([erf erff erfc erfcf exp2f])
 
 ## Check for math defines such as M_LN2 in math.h
 AC_CACHE_CHECK([for MATH DEFINES in math.h],
   [octave_cv_header_math_defines],
   [AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[
     #include <math.h>
     ]], [[
     double x = M_LN2;]])],
diff --git a/liboctave/numeric/lo-mappers.cc b/liboctave/numeric/lo-mappers.cc
--- a/liboctave/numeric/lo-mappers.cc
+++ b/liboctave/numeric/lo-mappers.cc
@@ -217,17 +217,17 @@ namespace octave
 #else
       static FloatComplex i (0, 1);
 
       return i * log ((i + x) / (i - x)) / 2.0f;
 #endif
     }
 
     double log2 (double x) { return std::log2 (x); }
-    float log2 (float x) { return std::log2 (x); }
+    float log2 (float x) { return std::log2f (x); }
 
     Complex
     log2 (const Complex& x)
     {
 #if defined (M_LN2)
       static double ln2 = M_LN2;
 #else
       static double ln2 = std::log (2.0);
