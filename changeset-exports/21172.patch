# HG changeset patch
# User Colin Macdonald <cbm@m.fsf.org>
# Date 1454303108 28800
#      Sun Jan 31 21:05:08 2016 -0800
# Branch stable
# Node ID 5f62b5dae8b1ce004923e34457b5eae5dcdd4563
# Parent  2935d56203a4c583facaba4622a272b8f4792263
Fix regression for coordinate transforms on 3-D arrays (partial fix bug #47036).
ismatrix changed definitions from 3.8 to 4.0 causing a regression.
I replaced these calls with isnumeric.  The meaning is not quite
the same as ismatrix was previously true for logical and char: but
there is little reason to support those here (anyone calling
cart2sph on a char almost certainly has a bug!).

* cart2pol.m, cart2sph.m, pol2cart.m, sph2cart.m: Replace ismatrix
with isnumeric.  Rephrase error messages to mention "array" rather
than "matrix" and to include variable namse that are in error.
Add BIST tests for NDarrays and input validation.

diff --git a/scripts/general/cart2pol.m b/scripts/general/cart2pol.m
--- a/scripts/general/cart2pol.m
+++ b/scripts/general/cart2pol.m
@@ -1,9 +1,9 @@
-## Copyright (C) 2000-2015 Kai Habel
+## Copyright (C) 2000-2016 Kai Habel
 ##
 ## This file is part of Octave.
 ##
 ## Octave is free software; you can redistribute it and/or modify it
 ## under the terms of the GNU General Public License as published by
 ## the Free Software Foundation; either version 3 of the License, or (at
 ## your option) any later version.
 ##
@@ -44,36 +44,36 @@
 
 function [theta, r, z] = cart2pol (x, y, z = [])
 
   if (nargin < 1 || nargin > 3)
     print_usage ();
   endif
 
   if (nargin == 1)
-    if (ismatrix (x) && (columns (x) == 2 || columns (x) == 3))
-      if (columns (x) == 3)
-        z = x(:,3);
-      endif
-      y = x(:,2);
-      x = x(:,1);
-    else
+    if (! (isnumeric (x) && ismatrix (x)
+           && (columns (x) == 2 || columns (x) == 3)))
       error ("cart2pol: matrix input must have 2 or 3 columns [X, Y (, Z)]");
     endif
+    if (columns (x) == 3)
+      z = x(:,3);
+    endif
+    y = x(:,2);
+    x = x(:,1);
   elseif (nargin == 2)
-    if (! ((ismatrix (x) && ismatrix (y))
+    if (! ((isnumeric (x) && isnumeric (y))
             && (size_equal (x, y) || isscalar (x) || isscalar (y))))
-      error ("cart2pol: arguments must be matrices of same size, or scalar");
+      error ("cart2pol: X, Y must be numeric arrays of the same size, or scalar");
     endif
   elseif (nargin == 3)
-    if (! ((ismatrix (x) && ismatrix (y) && ismatrix (z))
+    if (! ((isnumeric (x) && isnumeric (y) && isnumeric (z))
             && (size_equal (x, y) || isscalar (x) || isscalar (y))
             && (size_equal (x, z) || isscalar (x) || isscalar (z))
             && (size_equal (y, z) || isscalar (y) || isscalar (z))))
-      error ("cart2pol: arguments must be matrices of same size, or scalar");
+      error ("cart2pol: X, Y, Z must be numeric arrays of the same size, or scalar");
     endif
   endif
 
   theta = atan2 (y, x);
   r = sqrt (x .^ 2 + y .^ 2);
 
   if (nargout <= 1)
     theta = [theta(:), r(:), z(:)];
@@ -137,8 +137,46 @@ endfunction
 %! P = [0, 0; pi/4, sqrt(2); pi/4, 2*sqrt(2)];
 %! assert (cart2pol (C), P, sqrt (eps));
 
 %!test
 %! C = [0, 0, 0; 1, 1, 1; 2, 2, 2];
 %! P = [0, 0, 0; pi/4, sqrt(2), 1; pi/4, 2*sqrt(2), 2];
 %! assert (cart2pol (C), P, sqrt (eps));
 
+%!test
+%! x = zeros (1, 1, 1, 2);
+%! x(1, 1, 1, 2) = sqrt (2);
+%! y = x;
+%! [t, r] = cart2pol (x, y);
+%! T = zeros (1, 1, 1, 2);
+%! T(1, 1, 1, 2) = pi/4;
+%! R = zeros (1, 1, 1, 2);
+%! R(1, 1, 1, 2) = 2;
+%! assert (t, T, eps);
+%! assert (r, R, eps);
+
+%!test
+%! [x, y, Z] = meshgrid ([0, 1], [0, 1], [0, 1]);
+%! [t, r, z] = cart2pol (x, y, Z);
+%! T(:, :, 1) = [0, 0; pi/2, pi/4];
+%! T(:, :, 2) = T(:, :, 1);
+%! R = sqrt (x.^2 + y.^2);
+%! assert (t, T, eps);
+%! assert (r, R, eps);
+%! assert (z, Z);
+
+## Test input validation
+%!error cart2pol ()
+%!error cart2pol (1,2,3,4)
+%!error <matrix input must have 2 or 3 columns> cart2pol ({1,2,3})
+%!error <matrix input must have 2 or 3 columns> cart2pol (ones (3,3,2))
+%!error <matrix input must have 2 or 3 columns> cart2pol ([1])
+%!error <matrix input must have 2 or 3 columns> cart2pol ([1,2,3,4])
+%!error <numeric arrays of the same size> cart2pol ({1,2,3}, [1,2,3])
+%!error <numeric arrays of the same size> cart2pol ([1,2,3], {1,2,3})
+%!error <numeric arrays of the same size> cart2pol (ones (3,3,3), ones (3,2,3))
+%!error <numeric arrays of the same size> cart2pol ({1,2,3}, [1,2,3], [1,2,3])
+%!error <numeric arrays of the same size> cart2pol ([1,2,3], {1,2,3}, [1,2,3])
+%!error <numeric arrays of the same size> cart2pol ([1,2,3], [1,2,3], {1,2,3})
+%!error <numeric arrays of the same size> cart2pol (ones (3,3,3), 1, ones (3,2,3))
+%!error <numeric arrays of the same size> cart2pol (ones (3,3,3), ones (3,2,3), 1)
+
diff --git a/scripts/general/cart2sph.m b/scripts/general/cart2sph.m
--- a/scripts/general/cart2sph.m
+++ b/scripts/general/cart2sph.m
@@ -1,9 +1,9 @@
-## Copyright (C) 2000-2015 Kai Habel
+## Copyright (C) 2000-2016 Kai Habel
 ##
 ## This file is part of Octave.
 ##
 ## Octave is free software; you can redistribute it and/or modify it
 ## under the terms of the GNU General Public License as published by
 ## the Free Software Foundation; either version 3 of the License, or (at
 ## your option) any later version.
 ##
@@ -43,29 +43,28 @@
 
 function [theta, phi, r] = cart2sph (x, y, z)
 
   if (nargin != 1 && nargin != 3)
     print_usage ();
   endif
 
   if (nargin == 1)
-    if (ismatrix (x) && columns (x) == 3)
-      z = x(:,3);
-      y = x(:,2);
-      x = x(:,1);
-    else
+    if (! (isnumeric (x) && ismatrix (x) && columns (x) == 3))
       error ("cart2sph: matrix input must have 3 columns [X, Y, Z]");
     endif
-  elseif (nargin == 3)
-    if (! ((ismatrix (x) && ismatrix (y) && ismatrix (z))
+    z = x(:,3);
+    y = x(:,2);
+    x = x(:,1);
+  else
+    if (! ((isnumeric (x) && isnumeric (y) && isnumeric (z))
             && (size_equal (x, y) || isscalar (x) || isscalar (y))
             && (size_equal (x, z) || isscalar (x) || isscalar (z))
             && (size_equal (y, z) || isscalar (y) || isscalar (z))))
-      error ("cart2sph: X, Y, Z must be matrices of the same size, or scalar");
+      error ("cart2sph: X, Y, Z must be numeric arrays of the same size, or scalar");
     endif
   endif
 
   theta = atan2 (y, x);
   phi = atan2 (z, sqrt (x .^ 2 + y .^ 2));
   r = sqrt (x .^ 2 + y .^ 2 + z .^ 2);
 
   if (nargout <= 1)
@@ -111,8 +110,32 @@ endfunction
 %! assert (p, [0, 0, 0]);
 %! assert (r, [0, 1, 2] * sqrt (2));
 
 %!test
 %! C = [0, 0, 0; 1, 0, 1; 2, 0, 2];
 %! S = [0, 0, 0; 0, pi/4, sqrt(2); 0, pi/4, 2*sqrt(2)];
 %! assert (cart2sph (C), S, eps);
 
+%!test
+%! [x, y, z] = meshgrid ([0, 1], [0, 1], [0, 1]);
+%! [t, p, r] = cart2sph (x, y, z);
+%! T(:, :, 1) = [0, 0; pi/2, pi/4];
+%! T(:, :, 2) = T(:, :, 1);
+%! P(:, :, 1) = zeros (2, 2);
+%! P(:, :, 2) = [pi/2, pi/4; pi/4, acos(sqrt(2/3))];
+%! R = sqrt (x .^ 2 + y .^ 2 + z .^ 2);
+%! assert (t, T, eps);
+%! assert (p, P, eps);
+%! assert (r, R, eps);
+
+## Test input validation
+%!error cart2sph ()
+%!error cart2sph (1,2)
+%!error cart2sph (1,2,3,4)
+%!error <matrix input must have 3 columns> cart2sph ({1,2,3})
+%!error <matrix input must have 3 columns> cart2sph (ones (3,3,2))
+%!error <matrix input must have 3 columns> cart2sph ([1,2,3,4])
+%!error <numeric arrays of the same size> cart2sph ({1,2,3}, [1,2,3], [1,2,3])
+%!error <numeric arrays of the same size> cart2sph ([1,2,3], {1,2,3}, [1,2,3])
+%!error <numeric arrays of the same size> cart2sph ([1,2,3], [1,2,3], {1,2,3})
+%!error <numeric arrays of the same size> cart2sph (ones (3,3,3), 1, ones (3,2,3))
+%!error <numeric arrays of the same size> cart2sph (ones (3,3,3), ones (3,2,3), 1)
diff --git a/scripts/general/pol2cart.m b/scripts/general/pol2cart.m
--- a/scripts/general/pol2cart.m
+++ b/scripts/general/pol2cart.m
@@ -1,9 +1,9 @@
-## Copyright (C) 2000-2015 Kai Habel
+## Copyright (C) 2000-2016 Kai Habel
 ##
 ## This file is part of Octave.
 ##
 ## Octave is free software; you can redistribute it and/or modify it
 ## under the terms of the GNU General Public License as published by
 ## the Free Software Foundation; either version 3 of the License, or (at
 ## your option) any later version.
 ##
@@ -44,36 +44,36 @@
 
 function [x, y, z] = pol2cart (theta, r, z = [])
 
   if (nargin < 1 || nargin > 3)
     print_usage ();
   endif
 
   if (nargin == 1)
-    if (ismatrix (theta) && (columns (theta) == 2 || columns (theta) == 3))
-      if (columns (theta) == 3)
-        z = theta(:,3);
-      endif
-      r = theta(:,2);
-      theta = theta(:,1);
-    else
+    if (! (isnumeric (theta) && ismatrix (theta)
+           && (columns (theta) == 2 || columns (theta) == 3)))
       error ("pol2cart: matrix input must have 2 or 3 columns [THETA, R (, Z)]");
     endif
+    if (columns (theta) == 3)
+      z = theta(:,3);
+    endif
+    r = theta(:,2);
+    theta = theta(:,1);
   elseif (nargin == 2)
-    if (! ((ismatrix (theta) && ismatrix (r))
+    if (! ((isnumeric (theta) && isnumeric (r))
             && (size_equal (theta, r) || isscalar (theta) || isscalar (r))))
-      error ("pol2cart: arguments must be matrices of same size, or scalar");
+      error ("pol2cart: THETA, R must be numeric arrays of the same size, or scalar");
     endif
   elseif (nargin == 3)
-    if (! ((ismatrix (theta) && ismatrix (r) && ismatrix (z))
+    if (! ((isnumeric (theta) && isnumeric (r) && isnumeric (z))
             && (size_equal (theta, r) || isscalar (theta) || isscalar (r))
             && (size_equal (theta, z) || isscalar (theta) || isscalar (z))
             && (size_equal (r, z) || isscalar (r) || isscalar (z))))
-      error ("pol2cart: arguments must be matrices of same size, or scalar");
+      error ("pol2cart: THETA, R, Z must be numeric arrays of the same size, or scalar");
     endif
   endif
 
   x = r .* cos (theta);
   y = r .* sin (theta);
 
   if (nargout <= 1)
     x = [x(:), y(:), z(:)];
@@ -137,8 +137,48 @@ endfunction
 %! C = [0, 0; 1, 1; 2, 2];
 %! assert (pol2cart (P), C, sqrt (eps));
 
 %!test
 %! P = [0, 0, 0; pi/4, sqrt(2), 1; pi/4, 2*sqrt(2), 2];
 %! C = [0, 0, 0; 1, 1, 1; 2, 2, 2];
 %! assert (pol2cart (P), C, sqrt (eps));
 
+%!test
+%! r = ones (1, 1, 1, 2);
+%! r(1, 1, 1, 2) = 2;
+%! t = pi/2 * r;
+%! [x, y] = pol2cart (t, r);
+%! X = zeros (1, 1, 1, 2);
+%! X(1, 1, 1, 2) = -2;
+%! Y = zeros (1, 1, 1, 2);
+%! Y(1, 1, 1, 1) = 1;
+%! assert (x, X, 2*eps);
+%! assert (y, Y, 2*eps);
+
+%!test
+%! [t, r, Z] = meshgrid ([0, pi/2], [1, 2], [0, 1]);
+%! [x, y, z] = pol2cart (t, r, Z);
+%! X = zeros(2, 2, 2);
+%! X(:, 1, 1) = [1; 2];
+%! X(:, 1, 2) = [1; 2];
+%! Y = zeros(2, 2, 2);
+%! Y(:, 2, 1) = [1; 2];
+%! Y(:, 2, 2) = [1; 2];
+%! assert (x, X, eps);
+%! assert (y, Y, eps);
+%! assert (z, Z);
+
+## Test input validation
+%!error pol2cart ()
+%!error pol2cart (1,2,3,4)
+%!error <matrix input must have 2 or 3 columns> pol2cart ({1,2,3})
+%!error <matrix input must have 2 or 3 columns> pol2cart (ones (3,3,2))
+%!error <matrix input must have 2 or 3 columns> pol2cart ([1])
+%!error <matrix input must have 2 or 3 columns> pol2cart ([1,2,3,4])
+%!error <numeric arrays of the same size> pol2cart ({1,2,3}, [1,2,3])
+%!error <numeric arrays of the same size> pol2cart ([1,2,3], {1,2,3})
+%!error <numeric arrays of the same size> pol2cart (ones (3,3,3), ones (3,2,3))
+%!error <numeric arrays of the same size> pol2cart ({1,2,3}, [1,2,3], [1,2,3])
+%!error <numeric arrays of the same size> pol2cart ([1,2,3], {1,2,3}, [1,2,3])
+%!error <numeric arrays of the same size> pol2cart ([1,2,3], [1,2,3], {1,2,3})
+%!error <numeric arrays of the same size> pol2cart (ones (3,3,3), 1, ones (3,2,3))
+%!error <numeric arrays of the same size> pol2cart (ones (3,3,3), ones (3,2,3), 1)
diff --git a/scripts/general/sph2cart.m b/scripts/general/sph2cart.m
--- a/scripts/general/sph2cart.m
+++ b/scripts/general/sph2cart.m
@@ -1,9 +1,9 @@
-## Copyright (C) 2000-2015 Kai Habel
+## Copyright (C) 2000-2016 Kai Habel
 ##
 ## This file is part of Octave.
 ##
 ## Octave is free software; you can redistribute it and/or modify it
 ## under the terms of the GNU General Public License as published by
 ## the Free Software Foundation; either version 3 of the License, or (at
 ## your option) any later version.
 ##
@@ -43,29 +43,28 @@
 
 function [x, y, z] = sph2cart (theta, phi, r)
 
   if (nargin != 1 && nargin != 3)
     print_usage ();
   endif
 
   if (nargin == 1)
-    if (ismatrix (theta) && columns (theta) == 3)
-      r = theta(:,3);
-      phi = theta(:,2);
-      theta = theta(:,1);
-    else
+    if (! (isnumeric (theta) && ismatrix (theta) && columns (theta) == 3))
       error ("sph2cart: matrix input must have 3 columns [THETA, PHI, R]");
     endif
-  elseif (nargin == 3)
-    if (! ((ismatrix (theta) && ismatrix (phi) && ismatrix (r))
+    r = theta(:,3);
+    phi = theta(:,2);
+    theta = theta(:,1);
+  else
+    if (! ((isnumeric (theta) && isnumeric (phi) && isnumeric (r))
             && (size_equal (theta, phi) || isscalar (theta) || isscalar (phi))
             && (size_equal (theta, r) || isscalar (theta) || isscalar (r))
             && (size_equal (phi, r) || isscalar (phi) || isscalar (r))))
-      error ("sph2cart: THETA, PHI, and R must be matrices of the same size, or scalar");
+      error ("sph2cart: THETA, PHI, R must be numeric arrays of the same size, or scalar");
     endif
   endif
 
   x = r .* cos (phi) .* cos (theta);
   y = r .* cos (phi) .* sin (theta);
   z = r .* sin (phi);
 
   if (nargout <= 1)
@@ -111,8 +110,34 @@ endfunction
 %! assert (y, [0, 1, 0], eps);
 %! assert (z, [0, 0, 0], eps);
 
 %!test
 %! S = [ 0, 0, 1; 0.5*pi, 0, 1; pi, 0, 1];
 %! C = [ 1, 0, 0; 0, 1, 0; -1, 0, 0];
 %! assert (sph2cart (S), C, eps);
 
+%!test
+%! [t, p, r] = meshgrid ([0, pi/2], [0, pi/2], [0, 1]);
+%! [x, y, z] = sph2cart (t, p, r);
+%! X = zeros(2, 2, 2);
+%! X(1, 1, 2) = 1;
+%! Y = zeros(2, 2, 2);
+%! Y(1, 2, 2) = 1;
+%! Z = zeros(2, 2, 2);
+%! Z(2, :, 2) = [1 1];
+%! assert (x, X, eps);
+%! assert (y, Y, eps);
+%! assert (z, Z);
+
+## Test input validation
+%!error sph2cart ()
+%!error sph2cart (1,2)
+%!error sph2cart (1,2,3,4)
+%!error <matrix input must have 3 columns> sph2cart ({1,2,3})
+%!error <matrix input must have 3 columns> sph2cart (ones (3,3,2))
+%!error <matrix input must have 3 columns> sph2cart ([1,2,3,4])
+%!error <numeric arrays of the same size> sph2cart ({1,2,3}, [1,2,3], [1,2,3])
+%!error <numeric arrays of the same size> sph2cart ([1,2,3], {1,2,3}, [1,2,3])
+%!error <numeric arrays of the same size> sph2cart ([1,2,3], [1,2,3], {1,2,3})
+%!error <numeric arrays of the same size> sph2cart (ones (3,3,3), 1, ones (3,2,3))
+%!error <numeric arrays of the same size> sph2cart (ones (3,3,3), ones (3,2,3), 1)
+
