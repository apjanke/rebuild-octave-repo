# HG changeset patch
# User jwe
# Date 1114635943 0
#      Wed Apr 27 21:05:43 2005 +0000
# Node ID 46de0f964c1b793112297d42ece2df99188caf19
# Parent  2fbcdc356fc72ead339c262cc82cdb857386a97e
[project @ 2005-04-27 21:05:43 by jwe]

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,10 +1,19 @@
 2005-04-27  John W. Eaton  <jwe@octave.org>
 
+	* DLD-FUNCTIONS/gplot.l (gnuplot_init): New function to handle
+	initialization.  If builtin variables have already been installed,
+	simply update our cached values.
+	(F__gnuplot_init__): Call gnuplot_init to do all the real work.
+	(Fclearplot, Fcloseplot, Fhold, Fishold, Fpurge_tmp_files,
+	F__gnuplot_raw__, F__gnuplot_set__, F__gnuplot_plot__,
+	F__gnuplot_splot__, F__gnuplot_replot__, Fgplot, Fgsplot, Fgraw,
+	Fgset, Fgshow): Call gnuplot_init before doing anything.
+
 	* parse.y: (safe_fclose): Delete comment list to avoid memory leak.
 	(parse_and_execute (FILE *)): Also save and restore global_command.
 
 2005-04-26  John W. Eaton  <jwe@octave.org>
 
 	* mkbuiltins (VAR_FILES): Expect $(VAR_FILES) to have .df suffix.
 
 	* Makefile.in (clean): Also remove $(DLD_PICOBJ).
diff --git a/src/DLD-FUNCTIONS/gplot.l b/src/DLD-FUNCTIONS/gplot.l
--- a/src/DLD-FUNCTIONS/gplot.l
+++ b/src/DLD-FUNCTIONS/gplot.l
@@ -89,16 +89,18 @@ public:
 };
 
 static int is_plot_keyword (const std::string& s);
 
 static int handle_string (char delim);
 
 static inline bool can_be_plotkw (void);
 
+static void gnuplot_init (void);
+
 static bool gpt_quote_is_transpose;
 static bool gpt_allow_plotkw;
 static int gpt_parens;
 static int gpt_brackets;
 static int gpt_braces;
 
 static int send_to_plot_stream (const std::string& cmd);
 
@@ -1131,16 +1133,18 @@ DEFUN_DLD (clearplot, , ,
 @deftypefnx {Built-in Function} {} clg\n\
 Clear the plot window and any titles or axis labels.  The name\n\
 @code{clg} is aliased to @code{clearplot} for compatibility with\n\
 @sc{Matlab}.\n\
 @end deftypefn")
 {
   octave_value_list retval;
 
+  gnuplot_init ();
+
   send_to_plot_stream ("clear\n");
 
   // XXX FIXME XXX -- instead of just clearing these things, it would
   // be nice if we could reset things to a user-specified default
   // state.
 
   send_to_plot_stream ("set title\n");
   send_to_plot_stream ("set xlabel\n");
@@ -1159,17 +1163,25 @@ Clear the plot window and any titles or 
 DEFUN_DLD (closeplot, , ,
   "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} closeplot\n\
 Close stream to the @code{gnuplot} subprocess.  If you are using X11,\n\
 this will close the plot window.\n\
 @end deftypefn")
 {
   octave_value_list retval;
+
+  gnuplot_init ();
+
+  parametric_plot = false;
+
+  set_global_value ("__multiplot_mode__", 0.0);
+
   close_plot_stream ();
+
   return retval;
 }
 
 DEFUN_DLD (hold, args, ,
   "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} hold @var{args}\n\
 Tell Octave to `hold' the current data on the plot when executing\n\
 subsequent plotting commands.  This allows you to execute a series of\n\
@@ -1183,16 +1195,18 @@ hold on\n\
 \n\
 @noindent\n\
 turns the hold state on.  An argument of @code{off} turns the hold state\n\
 off, and @code{hold} with no arguments toggles the current hold state.\n\
 @end deftypefn")
 {
   octave_value_list retval;
 
+  gnuplot_init ();
+
   int argc = args.length () + 1;
 
   string_vector argv = args.make_argv ("hold");
 
   if (error_state)
     return retval;
 
   switch (argc)
@@ -1220,16 +1234,18 @@ off, and @code{hold} with no arguments t
 
 DEFUN_DLD (ishold, , ,
   "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} ishold\n\
 Return 1 if the next line will be added to the current plot, or 0 if\n\
 the plot device will be cleared before drawing the next line.\n\
 @end deftypefn")
 {
+  gnuplot_init ();
+
   return octave_value (! clear_before_plotting);
 }
 
 DEFUN_DLD (purge_tmp_files, , ,
   "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} purge_tmp_files\n\
 Delete the temporary files created by the plotting commands.\n\
 \n\
@@ -1238,28 +1254,34 @@ commands to @code{gnuplot} through a pip
 temporary files on exit, but if you are doing a lot of plotting you may\n\
 want to clean up in the middle of a session.\n\
 \n\
 A future version of Octave will eliminate the need to use temporary\n\
 files to hold the plot data.\n\
 @end deftypefn")
 {
   octave_value_list retval;
+
+  gnuplot_init ();
+
   cleanup_tmp_files ();
+
   return retval;
 }
 
 DEFUN_DLD (__gnuplot_raw__, args, ,
   "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} __gnuplot_raw__ (@var{string})\n\
 Send @var{string} directly to gnuplot subprocess.\n\
 @end deftypefn")
 {
   octave_value_list retval;
 
+  gnuplot_init ();
+
   if (args.length () == 1 && args(0).is_string ())
     {
       std::string cmd = args(0).string_value ();
 
       if (! (plot_stream && *plot_stream))
 	open_plot_stream ();
 
       if (! error_state)
@@ -1278,16 +1300,18 @@ Send @var{string} directly to gnuplot su
 DEFUN_DLD (__gnuplot_set__, args, ,
   "-*- texinfo -*-\n\
 @deffn {Command} __gnuplot_set__ options\n\
 Set plotting options for gnuplot\n\
 @end deffn")
 {
   octave_value_list retval;
 
+  gnuplot_init ();
+
   int argc = args.length () + 1;
 
   string_vector argv = args.make_argv ("set");
 
   if (error_state)
     return retval;
 
   OSSTREAM plot_buf;
@@ -1332,16 +1356,18 @@ Set plotting options for gnuplot\n\
 DEFUN_DLD (__gnuplot_show__, args, ,
   "-*- texinfo -*-\n\
 @deffn {Command} __gnuplot_show__ options\n\
 Show plotting options.\n\
 @end deffn")
 {
   octave_value_list retval;
 
+  gnuplot_init ();
+
   int argc = args.length () + 1;
 
   string_vector argv = args.make_argv ("show");
 
   if (error_state)
     return retval;
 
   OSSTREAM plot_buf;
@@ -1359,30 +1385,36 @@ Show plotting options.\n\
   OSSTREAM_FREEZE (plot_buf);
 
   return retval;
 }
 
 DEFUN_DLD (__gnuplot_plot__, args, ,
   "Plot with gnuplot.\n")
 {
+  gnuplot_init ();
+
   doplot ("plot", args);
   return octave_value_list ();
 }
 
 DEFUN_DLD (__gnuplot_splot__, args, ,
   "Plot with gnuplot.\n")
 {
+  gnuplot_init ();
+
   doplot ("splot", args);
   return octave_value_list ();
 }
 
 DEFUN_DLD (__gnuplot_replot__, args, ,
   "Plot with gnuplot.\n")
 {
+  gnuplot_init ();
+
   doplot ("replot", args);
   return octave_value_list ();
 }
 
 // Deprecated functions.
 
 #define WARN_DEPRECATED(FOLD, FNEW) \
   do \
@@ -1407,40 +1439,50 @@ DEFUN_DLD (__gnuplot_replot__, args, ,
   return feval (#FNEW, args)
 
 // We can't further simplify this by putting the DEFUN_DLD in a macro
 // because then the mk-oct-links script will fail.
 
 DEFUN_DLD (gplot, args, ,
   "")
 {
+  gnuplot_init ();
+
   DEPRECATED_BODY (gplot, __gnuplot_plot__);
 }
 
 DEFUN_DLD (gsplot, args, ,
   "")
 {
+  gnuplot_init ();
+
   DEPRECATED_BODY (gsplot, __gnuplot_splot__);
 }
 
 DEFUN_DLD (graw, args, ,
   "")
 {
+  gnuplot_init ();
+
   DEPRECATED_BODY (graw, __gnuplot_raw__);
 }
 
 DEFUN_DLD (gset, args, ,
   "")
 {
+  gnuplot_init ();
+
   DEPRECATED_BODY (gset, __gnuplot_set__);
 }
 
 DEFUN_DLD (gshow, args, ,
   "")
 {
+  gnuplot_init ();
+
   DEPRECATED_BODY (gshow, __gnuplot_show__);
 }
 
 static int
 automatic_replot (void)
 {
   Vautomatic_replot = check_preference ("automatic_replot");
 
@@ -1522,97 +1564,137 @@ gnuplot_command_end (void)
 static int
 gnuplot_has_frames (void)
 {
   Vgnuplot_has_frames = check_preference ("gnuplot_has_frames");
 
   return 0;
 }
 
-DEFUN_DLD (__gnuplot_init__, , ,
-  "-*- texinfo -*-\n\
-@deftypefn {Loadable Function} __gnuplot_init__ ()\n\
-@end deftypefn")
+static void
+gnuplot_init (void)
 {
-  octave_value_list retval;
-
   static bool gnuplot_initialized = false;
 
   if (gnuplot_initialized)
-    return retval;
+    return;
 
   gnuplot_initialized = true;
 
-  DEFVAR (automatic_replot, true, automatic_replot,
+  if (is_builtin_variable ("automatic_replot"))
+    automatic_replot ();
+  else
+    DEFVAR (automatic_replot, true, automatic_replot,
     "-*- texinfo -*-\n\
 @defvr {Built-in Variable} automatic_replot\n\
 You can tell Octave to redisplay the plot each time anything about it\n\
 changes by setting the value of the builtin variable\n\
 @code{automatic_replot} to a nonzero value.  Although it is fairly\n\
 inefficient, especially for large plots, the default value is 1 for\n\
 compatibility with Matlab.\n\
 @end defvr");
 
-  DEFVAR (gnuplot_binary, GNUPLOT_BINARY, gnuplot_binary,
+  if (is_builtin_variable ("gnuplot_binary"))
+    gnuplot_binary ();
+  else
+    DEFVAR (gnuplot_binary, GNUPLOT_BINARY, gnuplot_binary,
     "-*- texinfo -*-\n\
 @defvr {Built-in Variable} gnuplot_binary\n\
 The name of the program invoked by the plot command.  The default value\n\
 is @code{\"gnuplot\"}.  @xref{Installation}.\n\
 @end defvr");
 
-  DEFVAR (gnuplot_command_plot, "pl", gnuplot_command_plot,
+  if (is_builtin_variable ("gnuplot_command_plot"))
+    gnuplot_command_plot ();
+  else
+    DEFVAR (gnuplot_command_plot, "pl", gnuplot_command_plot,
     "-*- texinfo -*-\n\
 @defvr {Built-in Variable} gnuplot_command_plot\n\
 @end defvr");
 
-  DEFVAR (gnuplot_command_replot, "rep", gnuplot_command_replot,
+  if (is_builtin_variable ("gnuplot_command_replot"))
+    gnuplot_command_replot ();
+  else
+    DEFVAR (gnuplot_command_replot, "rep", gnuplot_command_replot,
     "-*- texinfo -*-\n\
 @defvr {Built-in Variable} gnuplot_command_replot\n\
 @end defvr");
 
-  DEFVAR (gnuplot_command_splot, "sp", gnuplot_command_splot,
+  if (is_builtin_variable ("gnuplot_command_splot"))
+    gnuplot_command_splot ();
+  else
+    DEFVAR (gnuplot_command_splot, "sp", gnuplot_command_splot,
     "-*- texinfo -*-\n\
 @defvr {Built-in Variable} gnuplot_command_splot\n\
 @end defvr");
 
-  DEFVAR (gnuplot_command_using, "u", gnuplot_command_using,
+  if (is_builtin_variable ("gnuplot_command_using"))
+    gnuplot_command_using ();
+  else
+    DEFVAR (gnuplot_command_using, "u", gnuplot_command_using,
     "-*- texinfo -*-\n\
 @defvr {Built-in Variable} gnuplot_command_using\n\
 @end defvr");
 
-  DEFVAR (gnuplot_command_with, "w", gnuplot_command_with,
+  if (is_builtin_variable ("gnuplot_command_with"))
+    gnuplot_command_with ();
+  else
+    DEFVAR (gnuplot_command_with, "w", gnuplot_command_with,
     "-*- texinfo -*-\n\
 @defvr {Built-in Variable} gnuplot_command_with\n\
 @end defvr");
 
-  DEFVAR (gnuplot_command_axes, "ax", gnuplot_command_axes,
+  if (is_builtin_variable ("gnuplot_command_axes"))
+    gnuplot_command_axes ();
+  else
+    DEFVAR (gnuplot_command_axes, "ax", gnuplot_command_axes,
     "-*- texinfo -*-\n\
 @defvr {Built-in Variable} gnuplot_command_axes\n\
 @end defvr");
 
-  DEFVAR (gnuplot_command_title, "t", gnuplot_command_title,
+  if (is_builtin_variable ("gnuplot_command_title"))
+    gnuplot_command_title ();
+  else
+    DEFVAR (gnuplot_command_title, "t", gnuplot_command_title,
     "-*- texinfo -*-\n\
 @defvr {Built-in Variable} gnuplot_command_title\n\
 @end defvr");
 
-  DEFVAR (gnuplot_command_end, "\n", gnuplot_command_end,
+  if (is_builtin_variable ("gnuplot_command_end"))
+    gnuplot_command_end ();
+  else
+    DEFVAR (gnuplot_command_end, "\n", gnuplot_command_end,
     "-*- texinfo -*-\n\
 @defvr {Built-in Variable} gnuplot_command_end\n\
 @end defvr");
 
 #if defined (GNUPLOT_HAS_FRAMES)
   bool with_frames = true;
 #else
   bool with_frames = false;
 #endif
 
-  DEFVAR (gnuplot_has_frames, with_frames, gnuplot_has_frames,
+  if (is_builtin_variable ("gnuplot_has_frames"))
+    gnuplot_has_frames ();
+  else
+    DEFVAR (gnuplot_has_frames, with_frames, gnuplot_has_frames,
     "-*- texinfo -*-\n\
 @defvr {Built-in Variable} gnuplot_has_frames\n\
 If the value of this variable is nonzero, Octave assumes that your copy\n\
 of gnuplot has support for multiple frames that is included in recent\n\
 3.6beta releases.  Its initial value is determined by configure, but it\n\
 can be changed in your startup script or at the command line in case\n\
 configure got it wrong, or if you upgrade your gnuplot installation.\n\
 @end defvr");
 
+}
+
+DEFUN_DLD (__gnuplot_init__, , ,
+  "-*- texinfo -*-\n\
+@deftypefn {Loadable Function} __gnuplot_init__ ()\n\
+@end deftypefn")
+{
+  octave_value_list retval;
+
+  gnuplot_init ();
+
   return retval;
 }
