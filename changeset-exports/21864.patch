# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1465593395 14400
#      Fri Jun 10 17:16:35 2016 -0400
# Node ID f3487b21e879c32e055d0c802b5e1f08c65acc68
# Parent  a25110491607a06d94e5edc3149e769bd2c37aeb
* kpse.cc: Remove obsolete and unused code.

diff --git a/liboctave/util/kpse.cc b/liboctave/util/kpse.cc
--- a/liboctave/util/kpse.cc
+++ b/liboctave/util/kpse.cc
@@ -38,63 +38,45 @@ along with Octave; see the file COPYING.
    are: DOS OS2 WIN32.  I do not use any of these systems
    myself; if you do, I'd be grateful for any changes. --kb@mail.tug.org */
 
 /* If we have either DOS or OS2, we are DOSISH.  */
 #if defined (DOS) || defined (OS2) || defined (WIN32) || defined (__MSDOS__)
 #define DOSISH
 #endif
 
-#if defined (DOSISH)
-#define MONOCASE_FILENAMES      /* case-insensitive filename comparisons */
-#endif
-
 extern "C" {
 #if defined (__MINGW32__)
 #include <windows.h>
 #include <fcntl.h>
 #elif defined (WIN32)
 #if ! defined (_MSC_VER)
 #define __STDC__ 1
 #include "win32lib.h"
 #endif
 #endif /* not WIN32 */
-
-#if defined (__DJGPP__)
-#include <fcntl.h>      /* for long filenames' stuff */
-#include <dir.h>        /* for 'getdisk' */
-#include <io.h>         /* for 'setmode' */
-#endif
 }
 
 /* Some drivers have partially integrated kpathsea changes.  */
 #if ! defined (KPATHSEA)
 #define KPATHSEA 32
 #endif
 
 /* System dependencies that are figured out by 'configure'.  If we are
    compiling standalone, we get our c-auto.h.  Otherwise, the package
    containing us must provide this (unless it can somehow generate ours
    from c-auto.in).  We use <...> instead of "..." so that the current
    cpp directory (i.e., kpathsea/) won't be searched. */
 
 /* If you want to find subdirectories in a directory with non-Unix
    semantics (specifically, if a directory with no subdirectories does
    not have exactly two links), define this.  */
-#if defined (__DJGPP__) || ! defined (DOSISH)
-/* Surprise!  DJGPP returns st_nlink exactly like on Unix.  */
+#if ! defined (DOSISH)
 #define ST_NLINK_TRICK
-#endif /* either not DOSISH or __DJGPP__ */
-
-#if defined (OS2)
-#define access ln_access
-#define fopen ln_fopen
-#define rename ln_rename
-#define stat ln_stat
-#endif /* OS2 */
+#endif /* not DOSISH */
 
 /* Define the characters which separate components of
    filenames and environment variable paths.  */
 
 /* What separates filename components?  */
 #if ! defined (DIR_SEP)
 #if defined (DOSISH)
 /* Either \'s or 's work.  Wayne Sullivan's web2pc prefers /, so we'll
@@ -2132,26 +2114,16 @@ cached (const std::string& key)
     {
       if (key == the_cache[p].key)
         return the_cache[p].value;
     }
 
   return 0;
 }
 
-/* Handle the magic path constructs.  */
-
-/* Declare recursively called routine.  */
-static void expand_elt (str_llist_type *, const std::string&, unsigned);
-
-/* POST is a pointer into the original element (which may no longer be
-   ELT) to just after the doubled DIR_SEP, perhaps to the null.  Append
-   subdirectories of ELT (up to ELT_LENGTH, which must be a /) to
-   STR_LIST_PTR.  */
-
 #if defined (WIN32)
 
 /* Shared across recursive calls, it acts like a stack. */
 static std::string dirname;
 
 #else /* WIN32 */
 
 /* Return -1 if FN isn't a directory, else its number of links.
@@ -2218,17 +2190,17 @@ do_subdir (str_llist_type *str_list_ptr,
   if (post.empty ())
     dir_list_add (str_list_ptr, name);
   else
     {
       /* If we do have something to match, see if it exists.  For
          example, POST might be 'pk/ljfour', and they might have a
          directory '$TEXMF/fonts/pk/ljfour' that we should find.  */
       name += post;
-      expand_elt (str_list_ptr, name, elt_length);
+      checked_dir_list_add (str_list_ptr, name);
       name.resize (elt_length);
     }
 
   proceed = 1;
 
   while (proceed)
     {
       if (find_file_data.cFileName[0] != '.')
@@ -2264,17 +2236,17 @@ do_subdir (str_llist_type *str_list_ptr,
   if (post.empty ())
     dir_list_add (str_list_ptr, name);
   else
     {
       /* If we do have something to match, see if it exists.  For
          example, POST might be 'pk/ljfour', and they might have a
          directory '$TEXMF/fonts/pk/ljfour' that we should find.  */
       name += post;
-      expand_elt (str_list_ptr, name, elt_length);
+      checked_dir_list_add (str_list_ptr, name);
       name.resize (elt_length);
     }
 
   while ((e = gnulib::readdir (dir)))
     {
       /* If it begins with a '.', never mind.  (This allows "hidden"
          directories that the algorithm won't find.)  */
 
@@ -2322,61 +2294,16 @@ do_subdir (str_llist_type *str_list_ptr,
           name.resize (elt_length);
         }
     }
 
   xclosedir (dir);
 #endif /* not WIN32 */
 }
 
-/* Assume ELT is non-empty and non-NULL.  Return list of corresponding
-   directories (with no terminating NULL entry) in STR_LIST_PTR.  Start
-   looking for magic constructs at START.  */
-
-static void
-expand_elt (str_llist_type *str_list_ptr, const std::string& elt,
-            unsigned /* start */)
-{
-#if 0
-  // We don't want magic constructs.
-
-  size_t elt_len = elt.length ();
-
-  size_t dir = start;
-
-
-  while (dir < elt_len)
-    {
-      if (IS_DIR_SEP (elt[dir]))
-        {
-          /* If two or more consecutive /'s, find subdirectories.  */
-          if (++dir < elt_len && IS_DIR_SEP (elt[dir]))
-            {
-              size_t i = dir;
-              while (i < elt_len && IS_DIR_SEP (elt[i]))
-                i++;
-
-              std::string post = elt.substr (i);
-
-              do_subdir (str_list_ptr, elt, dir, post);
-
-              return;
-            }
-
-          /* No special stuff at this slash.  Keep going.  */
-        }
-      else
-        dir++;
-    }
-#endif
-
-  /* When we reach the end of ELT, it will be a normal filename.  */
-  checked_dir_list_add (str_list_ptr, elt);
-}
-
 /* Here is the entry point.  Returns directory list for ELT.  */
 
 /* Given a path element ELT, return a pointer to a NULL-terminated list
    of the corresponding (existing) directory or directories, with
    trailing slashes, or NULL.  If ELT is the empty string, check the
    current working directory.
 
    It's up to the caller to expand ELT.  This is because this routine is
@@ -2397,17 +2324,17 @@ kpse_element_dirs (const std::string& el
   if (ret)
     return ret;
 
   /* We're going to have a real directory list to return.  */
   ret = new str_llist_type;
   *ret = 0;
 
   /* We handle the hard case in a subroutine.  */
-  expand_elt (ret, elt, 0);
+  checked_dir_list_add (ret, elt);
 
   /* Remember the directory list we just found, in case future calls are
      made with the same ELT.  */
   cache (elt, ret);
 
 #if defined (KPSE_DEBUG)
   if (KPSE_DEBUG_P (KPSE_DEBUG_EXPAND))
     {
