# HG changeset patch
# User David Bateman <dbateman@free.fr>
# Date 1204829176 18000
#      Thu Mar 06 13:46:16 2008 -0500
# Node ID 6b07c15eb8e1e74b5d5cdcf00e91e8e13d81e950
# Parent  b3acdf1c41a52562b0f878e9c25339c95f4aaebc
Document positive definite behavior of matrix_type

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,15 @@
+2008-03-06  David Bateman  <dbateman@free.fr>
+
+	* DLD-FUNCTIONS/matrix_type.cc (Fmatrix_type): Document that
+	the initial interpretation of a positive definite return from
+	matrix_type is that the matrix is "probably" positive definite and
+	not certainly so.
+
 2008-03-06  John W. Eaton  <jwe@octave.org>
 
 	* parse.y: Move tests here from test/test_eval.m.
 	* DLD-FUNCTIONS/fft.cc: Move tests here from test/test_signal.m.
 	* DLD-FUNCTIONS/dassl.cc: Move tests here from test/test_diffeq.m.
 	* DLD-FUNCTIONS/lsode.cc: Move tests here from test/test_diffeq.m.
 	* DLD-FUNCTIONS/quad.cc: Move tests here from test/test_quad.m.
 	* DLD-FUNCTIONS/time.cc: Move tests here from test/test_system.m.
diff --git a/src/DLD-FUNCTIONS/matrix_type.cc b/src/DLD-FUNCTIONS/matrix_type.cc
--- a/src/DLD-FUNCTIONS/matrix_type.cc
+++ b/src/DLD-FUNCTIONS/matrix_type.cc
@@ -54,17 +54,17 @@ one of the following\n\
 @table @asis\n\
 @item 'unknown'\n\
 Remove any previously cached matrix type, and mark type as unknown\n\
 \n\
 @item 'full'\n\
 Mark the matrix as full.\n\
 \n\
 @item 'positive definite'\n\
-Full positive definite matrix.\n\
+Probable full positive definite matrix.\n\
 \n\
 @item 'diagonal'\n\
 Diagonal Matrix. (Sparse matrices only)\n\
 \n\
 @item 'permuted diagonal'\n\
 Permuted Diagonal matrix. The permutation does not need to be specifically\n\
 indicated, as the structure of the matrix explicitly gives this. (Sparse matrices\n\
 only)\n\
@@ -78,30 +78,38 @@ vector @var{perm}.\n\
 Lower triangular. If the optional third argument @var{perm} is given, the matrix is\n\
 assumed to be a permuted lower triangular with the permutations defined by the\n\
 vector @var{perm}.\n\
 \n\
 @item 'banded'\n\
 @itemx 'banded positive definite'\n\
 Banded matrix with the band size of @var{nl} below the diagonal and @var{nu} above\n\
 it. If @var{nl} and @var{nu} are 1, then the matrix is tridiagonal and treated\n\
-with specialized code. In addition the matrix can be marked as positive definite\n\
-(Sparse matrices only)\n\
+with specialized code. In addition the matrix can be marked as probably a\n\
+positive definite (Sparse matrices only)\n\
 \n\
 @item 'singular'\n\
 The matrix is assumed to be singular and will be treated with a minimum norm solution\n\
 \n\
 @end table\n\
 \n\
 Note that the matrix type will be discovered automatically on the first attempt to\n\
 solve a linear equation involving @var{a}. Therefore @code{matrix_type} is only\n\
 useful to give Octave hints of the matrix type. Incorrectly defining the\n\
 matrix type will result in incorrect results from solutions of linear equations,\n\
 and so it is entirely the responsibility of the user to correctly identify the\n\
 matrix type.\n\
+\n\
+Also the test for positive definiteness is a low cost test for a hermitian\n\
+matrix with a real positive diagonal. This does not guarentee that the matrix\n\
+is positive definite, but only that it is a probable candidate. When such a\n\
+matrix is factorized, a Cholesky factorization is first attempted, and if\n\
+that fails the matrix is then treated with an LU factorization. Once the\n\
+matrix has been factorized, @code{matrix_type} will return the correct\n\
+classification of the matrix.\n\
 @end deftypefn")
 {
   int nargin = args.length ();
   octave_value retval;
 
   if (nargin == 0)
     print_usage ();
   else if (nargin > 4)
