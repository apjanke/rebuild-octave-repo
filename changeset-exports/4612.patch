# HG changeset patch
# User jwe
# Date 1068839438 0
#      Fri Nov 14 19:50:38 2003 +0000
# Node ID d44675070f1a2e6e60ed54d7e89a19a2cad7590c
# Parent  c76a32c6f90cda4b078f77306078116232e8c228
[project @ 2003-11-14 19:49:56 by jwe]

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,22 +1,41 @@
+2003-11-14  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* ov-typeinfo.cc (octave_value_typeinfo::register_type,
+	octave_value_typeinfo::do_register_type):
+	New arg, c_name for class name.
+	* ov-base.cc, ov-bool-mat.cc, ov-bool.cc, ov-builtin.cc,
+	ov-cell.cc, ov-ch-mat.cc, ov-colon.cc, ov-complex.cc,
+	ov-cs-list.cc, ov-cx-mat.cc, ov-dld-fcn.cc, ov-fcn-handle.cc,
+	ov-file.cc, ov-list.cc, ov-mapper.cc, ov-range.cc, ov-re-mat.cc,
+	ov-scalar.cc, ov-str-mat.cc, ov-struct.cc, ov-usr-fcn.cc,
+	ov-va-args.cc: Pass class name to DEFINE_OV_TYPEID_FUNCTIONS_AND_DATA.
+	* ov.h (octave_value::class_name): New virtual function.
+	(DEFINE_OV_TYPEID_FUNCTIONS_AND_DATA): Define c_name, for class name.
+	Pass c_name to octave_value_typeinfo::register_type.
+	(DECLARE_OV_TYPEID_FUNCTIONS_AND_DATA): Declare static member
+	c_name for class name.  Provide class_name member function.
+
+	* ov-typeinfo.cc (Fclass): New function.
+
 2003-11-13  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* utils.cc (Fisvarname): Pass correct name to make_argv.
 
 	* ov-cell.cc (Fiscellstr): New function.
 
 	* ov-file.h (octave_file::all, octave_file::any,
 	octave_file::dims, octave_file::is_real_type,
 	octave_file::ist_real_scalar): New functions.
 
 	* lex.l (bracket_brace_paren_nesting_level::is_bracket_or_brace):
 	New function.
 	(handle_close_bracket): New arg, bracket_type.  Change all uses.
-	Return bool, not int.  First arg is now bool.
+	First arg is now bool.
 	(<MATRIX_START>{SNLCMT}*\}{S}*): New pattern.
 	(maybe_unput_comma): Handle brace nesting level the same as brackets.
 	(handle_close_brace): Likewise.
 	(<MATRIX_START>{S}+): Likewise.
 	(<MATRIX_START>{S}*{COMMENT}{SNLCMT}*): Likewise.
 	(<MATRIX_START>{S}*{NL}{SNLCMT}*): Likewise.
 	({NL}): Likewise.
 	({CCHAR}): Likewise.
diff --git a/src/lex.l b/src/lex.l
--- a/src/lex.l
+++ b/src/lex.l
@@ -166,17 +166,17 @@ static symbol_record *lookup_identifier 
 static std::string grab_help_text (void);
 static bool match_any (char c, const char *s);
 static bool next_token_is_sep_op (void);
 static bool next_token_is_bin_op (bool spc_prev);
 static bool next_token_is_postfix_unary_op (bool spc_prev);
 static std::string strip_trailing_whitespace (char *s);
 static void handle_number (void);
 static int handle_string (char delim, int text_style = 0);
-static char handle_close_bracket (bool spc_gobbled, char bracket_type);
+static int handle_close_bracket (bool spc_gobbled, int bracket_type);
 static int handle_identifier (void);
 static bool have_continuation (bool trailing_comments_ok = true);
 static bool have_ellipsis_continuation (bool trailing_comments_ok = true);
 static void scan_for_comments (const char *);
 static yum_yum eat_whitespace (void);
 static yum_yum eat_continuation (void);
 static void maybe_warn_separator_insert (char sep);
 static void gripe_single_quote_string (void);
@@ -2221,20 +2221,20 @@ next_token_is_assign_op (void)
       break;
     }
 
   yyunput (c0, yytext);
 
   return retval;
 }
 
-static char
-handle_close_bracket (bool spc_gobbled, char bracket_type)
+static int
+handle_close_bracket (bool spc_gobbled, int bracket_type)
 {
-  char retval = bracket_type;
+  int retval = bracket_type;
 
   if (! nesting_level.none ())
     {
       nesting_level.remove ();
       lexer_flags.bracketflag--;
     }
 
   if (lexer_flags.bracketflag == 0)
diff --git a/src/ov-base.cc b/src/ov-base.cc
--- a/src/ov-base.cc
+++ b/src/ov-base.cc
@@ -48,17 +48,18 @@ Software Foundation, 59 Temple Place - S
 #include "ov-list.h"
 #include "ov-range.h"
 #include "ov-re-mat.h"
 #include "ov-scalar.h"
 #include "ov-str-mat.h"
 #include "ov-fcn-handle.h"
 #include "variables.h"
 
-DEFINE_OV_TYPEID_FUNCTIONS_AND_DATA (octave_base_value, "<unknown type>");
+DEFINE_OV_TYPEID_FUNCTIONS_AND_DATA (octave_base_value,
+				     "<unknown type>", "unknown");
 
 octave_value
 octave_base_value::squeeze (void) const
 {
   std::string nm = type_name ();
   error ("squeeze: invalid operation for %s type", nm.c_str ());
   return octave_value ();
 }
diff --git a/src/ov-base.h b/src/ov-base.h
--- a/src/ov-base.h
+++ b/src/ov-base.h
@@ -241,17 +241,17 @@ public:
   void print_raw (std::ostream& os, bool pr_as_read_syntax = false) const;
 
   bool print_name_tag (std::ostream& os, const std::string& name) const;
 
   void print_info (std::ostream& os, const std::string& prefix) const;
 
 private:
 
-  DECLARE_OV_TYPEID_FUNCTIONS_AND_DATA
+  DECLARE_OV_TYPEID_FUNCTIONS_AND_DATA;
 };
 
 #endif
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
diff --git a/src/ov-bool-mat.cc b/src/ov-bool-mat.cc
--- a/src/ov-bool-mat.cc
+++ b/src/ov-bool-mat.cc
@@ -43,17 +43,18 @@ Software Foundation, 59 Temple Place - S
 #include "ov-bool-mat.h"
 #include "ov-re-mat.h"
 #include "pr-output.h"
 
 template class octave_base_matrix<boolNDArray>;
 
 DEFINE_OCTAVE_ALLOCATOR (octave_bool_matrix);
 
-DEFINE_OV_TYPEID_FUNCTIONS_AND_DATA (octave_bool_matrix, "bool matrix");
+DEFINE_OV_TYPEID_FUNCTIONS_AND_DATA (octave_bool_matrix,
+				     "bool matrix", "logical");
 
 static octave_value *
 default_numeric_conversion_function (const octave_value& a)
 {
   CAST_CONV_ARG (const octave_bool_matrix&);
 
   return new octave_matrix (Matrix (v.bool_matrix_value ()));
 }
diff --git a/src/ov-bool.cc b/src/ov-bool.cc
--- a/src/ov-bool.cc
+++ b/src/ov-bool.cc
@@ -42,17 +42,17 @@ Software Foundation, 59 Temple Place - S
 #include "ov-re-mat.h"
 #include "ov-scalar.h"
 #include "pr-output.h"
 
 template class octave_base_scalar<bool>;
 
 DEFINE_OCTAVE_ALLOCATOR (octave_bool);
 
-DEFINE_OV_TYPEID_FUNCTIONS_AND_DATA (octave_bool, "bool");
+DEFINE_OV_TYPEID_FUNCTIONS_AND_DATA (octave_bool, "bool", "logical");
 
 static octave_value *
 default_numeric_conversion_function (const octave_value& a)
 {
   CAST_CONV_ARG (const octave_bool&);
 
   return new octave_scalar (v.bool_value ());
 }
diff --git a/src/ov-bool.h b/src/ov-bool.h
--- a/src/ov-bool.h
+++ b/src/ov-bool.h
@@ -101,19 +101,19 @@ public:
 
   boolMatrix bool_matrix_value (void) const
     { return boolMatrix (1, 1, scalar); }
 
   octave_value convert_to_str_internal (bool pad, bool force) const;
 
 private:
 
-  DECLARE_OV_TYPEID_FUNCTIONS_AND_DATA
+  DECLARE_OCTAVE_ALLOCATOR
 
-  DECLARE_OCTAVE_ALLOCATOR
+  DECLARE_OV_TYPEID_FUNCTIONS_AND_DATA
 };
 
 #endif
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
diff --git a/src/ov-builtin.cc b/src/ov-builtin.cc
--- a/src/ov-builtin.cc
+++ b/src/ov-builtin.cc
@@ -30,17 +30,19 @@ Software Foundation, 59 Temple Place - S
 
 #include "error.h"
 #include "oct-obj.h"
 #include "ov-builtin.h"
 #include "ov.h"
 
 DEFINE_OCTAVE_ALLOCATOR (octave_builtin);
 
-DEFINE_OV_TYPEID_FUNCTIONS_AND_DATA (octave_builtin, "built-in function");
+DEFINE_OV_TYPEID_FUNCTIONS_AND_DATA (octave_builtin,
+				     "built-in function",
+				     "built-in function");
 
 // Are any of the arguments `:'?
 
 static bool
 any_arg_is_magic_colon (const octave_value_list& args)
 {
   int nargin = args.length ();
 
diff --git a/src/ov-builtin.h b/src/ov-builtin.h
--- a/src/ov-builtin.h
+++ b/src/ov-builtin.h
@@ -74,19 +74,19 @@ protected:
   fcn f;
 
 private:
 
   octave_builtin (void);
 
   octave_builtin (const octave_builtin& m);
 
-  DECLARE_OV_TYPEID_FUNCTIONS_AND_DATA
+  DECLARE_OCTAVE_ALLOCATOR
 
-  DECLARE_OCTAVE_ALLOCATOR
+  DECLARE_OV_TYPEID_FUNCTIONS_AND_DATA
 };
 
 #endif
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
diff --git a/src/ov-cell.cc b/src/ov-cell.cc
--- a/src/ov-cell.cc
+++ b/src/ov-cell.cc
@@ -44,17 +44,17 @@ Software Foundation, 59 Temple Place - S
 #include "ov-base-mat.cc"
 #include "ov-re-mat.h"
 #include "ov-scalar.h"
 
 template class octave_base_matrix<Cell>;
 
 DEFINE_OCTAVE_ALLOCATOR (octave_cell);
 
-DEFINE_OV_TYPEID_FUNCTIONS_AND_DATA (octave_cell, "cell");
+DEFINE_OV_TYPEID_FUNCTIONS_AND_DATA (octave_cell, "cell", "cell");
 
 octave_value
 octave_cell::subsref (const std::string& type,
 		      const std::list<octave_value_list>& idx)
 {
   octave_value retval;
 
   switch (type[0])
diff --git a/src/ov-cell.h b/src/ov-cell.h
--- a/src/ov-cell.h
+++ b/src/ov-cell.h
@@ -105,16 +105,17 @@ public:
 
   bool print_as_scalar (void) const;
 
   void print (std::ostream& os, bool pr_as_read_syntax = false) const;
 
   void print_raw (std::ostream& os, bool pr_as_read_syntax = false) const;
 
 private:
+
   DECLARE_OCTAVE_ALLOCATOR
 
   DECLARE_OV_TYPEID_FUNCTIONS_AND_DATA
 };
 
 #endif
 
 /*
diff --git a/src/ov-ch-mat.cc b/src/ov-ch-mat.cc
--- a/src/ov-ch-mat.cc
+++ b/src/ov-ch-mat.cc
@@ -39,17 +39,18 @@ Software Foundation, 59 Temple Place - S
 #include "ov-ch-mat.h"
 #include "gripes.h"
 #include "pr-output.h"
 
 template class octave_base_matrix<charNDArray>;
 
 DEFINE_OCTAVE_ALLOCATOR (octave_char_matrix);
 
-DEFINE_OV_TYPEID_FUNCTIONS_AND_DATA (octave_char_matrix, "char matrix");
+DEFINE_OV_TYPEID_FUNCTIONS_AND_DATA (octave_char_matrix,
+				     "char matrix", "int8");
 
 bool
 octave_char_matrix::valid_as_scalar_index (void) const
 {
   bool retval = false;
   error ("octave_char_matrix::valid_as_scalar_index(): not implemented");
   return retval;
 }
diff --git a/src/ov-colon.cc b/src/ov-colon.cc
--- a/src/ov-colon.cc
+++ b/src/ov-colon.cc
@@ -30,17 +30,18 @@ Software Foundation, 59 Temple Place - S
 
 #include <iostream>
 
 #include "error.h"
 #include "pr-output.h"
 #include "oct-obj.h"
 #include "ov-colon.h"
 
-DEFINE_OV_TYPEID_FUNCTIONS_AND_DATA (octave_magic_colon, "magic-colon");
+DEFINE_OV_TYPEID_FUNCTIONS_AND_DATA (octave_magic_colon,
+				     "magic-colon", "magic-colon");
 
 void
 octave_magic_colon::print (std::ostream& os, bool) const
 {
   indent (os);
   print_raw (os);
 }
 
diff --git a/src/ov-complex.cc b/src/ov-complex.cc
--- a/src/ov-complex.cc
+++ b/src/ov-complex.cc
@@ -42,17 +42,18 @@ Software Foundation, 59 Temple Place - S
 #include "ov-scalar.h"
 #include "gripes.h"
 #include "pr-output.h"
 
 template class octave_base_scalar<Complex>;
 
 DEFINE_OCTAVE_ALLOCATOR (octave_complex);
 
-DEFINE_OV_TYPEID_FUNCTIONS_AND_DATA (octave_complex, "complex scalar");
+DEFINE_OV_TYPEID_FUNCTIONS_AND_DATA (octave_complex,
+				     "complex scalar", "double");
 
 octave_value *
 octave_complex::try_narrowing_conversion (void)
 {
   octave_value *retval = 0;
 
   if (imag (scalar) == 0.0)
     retval = new octave_scalar (real (scalar));
diff --git a/src/ov-complex.h b/src/ov-complex.h
--- a/src/ov-complex.h
+++ b/src/ov-complex.h
@@ -95,19 +95,19 @@ public:
   ComplexNDArray complex_array_value (bool = false) const;
 
   void increment (void) { scalar += 1.0; }
 
   void decrement (void) { scalar -= 1.0; }
 
 private:
 
-  DECLARE_OV_TYPEID_FUNCTIONS_AND_DATA
+  DECLARE_OCTAVE_ALLOCATOR
 
-  DECLARE_OCTAVE_ALLOCATOR
+  DECLARE_OV_TYPEID_FUNCTIONS_AND_DATA
 };
 
 #endif
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
diff --git a/src/ov-cs-list.cc b/src/ov-cs-list.cc
--- a/src/ov-cs-list.cc
+++ b/src/ov-cs-list.cc
@@ -35,17 +35,17 @@ Software Foundation, 59 Temple Place - S
 
 #include "defun.h"
 #include "error.h"
 #include "ov-cs-list.h"
 #include "unwind-prot.h"
 
 DEFINE_OCTAVE_ALLOCATOR (octave_cs_list);
 
-DEFINE_OV_TYPEID_FUNCTIONS_AND_DATA (octave_cs_list, "cs-list");
+DEFINE_OV_TYPEID_FUNCTIONS_AND_DATA (octave_cs_list, "cs-list", "cs-list");
 
 octave_cs_list::octave_cs_list (const Cell& c)
 {
   int n = c.length ();
 
   lst.resize (n);
 
   for (int i = 0; i < n; i++)
diff --git a/src/ov-cs-list.h b/src/ov-cs-list.h
--- a/src/ov-cs-list.h
+++ b/src/ov-cs-list.h
@@ -81,19 +81,19 @@ public:
 
   void print_raw (std::ostream& os, bool pr_as_read_syntax = false) const;
 
 private:
 
   // The list of Octave values.
   octave_value_list lst;
 
-  DECLARE_OV_TYPEID_FUNCTIONS_AND_DATA
+  DECLARE_OCTAVE_ALLOCATOR
 
-  DECLARE_OCTAVE_ALLOCATOR
+  DECLARE_OV_TYPEID_FUNCTIONS_AND_DATA
 };
 
 #endif
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
diff --git a/src/ov-cx-mat.cc b/src/ov-cx-mat.cc
--- a/src/ov-cx-mat.cc
+++ b/src/ov-cx-mat.cc
@@ -44,17 +44,18 @@ Software Foundation, 59 Temple Place - S
 #include "ov-re-mat.h"
 #include "ov-scalar.h"
 #include "pr-output.h"
 
 template class octave_base_matrix<ComplexNDArray>;
 
 DEFINE_OCTAVE_ALLOCATOR (octave_complex_matrix);
 
-DEFINE_OV_TYPEID_FUNCTIONS_AND_DATA (octave_complex_matrix, "complex matrix");
+DEFINE_OV_TYPEID_FUNCTIONS_AND_DATA (octave_complex_matrix,
+				     "complex matrix", "double");
 
 octave_value *
 octave_complex_matrix::try_narrowing_conversion (void)
 {
   octave_value *retval = 0;
 
   if (matrix.ndims () == 2)
     {
diff --git a/src/ov-dld-fcn.cc b/src/ov-dld-fcn.cc
--- a/src/ov-dld-fcn.cc
+++ b/src/ov-dld-fcn.cc
@@ -35,16 +35,17 @@ Software Foundation, 59 Temple Place - S
 #include "error.h"
 #include "oct-obj.h"
 #include "ov-dld-fcn.h"
 #include "ov.h"
 
 DEFINE_OCTAVE_ALLOCATOR (octave_dld_function);
 
 DEFINE_OV_TYPEID_FUNCTIONS_AND_DATA (octave_dld_function,
+				     "dynamically-linked function",
 				     "dynamically-linked function");
 
 
 octave_dld_function::octave_dld_function
   (octave_builtin::fcn ff, const octave_shlib& shl,
    const std::string& nm, const std::string& ds)
   : octave_builtin (ff, nm, ds), sh_lib (shl)
 {
diff --git a/src/ov-dld-fcn.h b/src/ov-dld-fcn.h
--- a/src/ov-dld-fcn.h
+++ b/src/ov-dld-fcn.h
@@ -79,19 +79,19 @@ private:
   // parsed again.
   mutable octave_time t_checked;
 
   // True if this function came from a file that is considered to be a
   // system function.  This affects whether we check the time stamp
   // on the file to see if it has changed.
   bool system_fcn_file;
 
-  DECLARE_OV_TYPEID_FUNCTIONS_AND_DATA
+  DECLARE_OCTAVE_ALLOCATOR
 
-  DECLARE_OCTAVE_ALLOCATOR
+  DECLARE_OV_TYPEID_FUNCTIONS_AND_DATA
 };
 
 #endif
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
diff --git a/src/ov-fcn-handle.cc b/src/ov-fcn-handle.cc
--- a/src/ov-fcn-handle.cc
+++ b/src/ov-fcn-handle.cc
@@ -34,17 +34,19 @@ Software Foundation, 59 Temple Place - S
 #include "oct-map.h"
 #include "ov-base.h"
 #include "ov-fcn-handle.h"
 #include "pr-output.h"
 #include "variables.h"
 
 DEFINE_OCTAVE_ALLOCATOR (octave_fcn_handle);
 
-DEFINE_OV_TYPEID_FUNCTIONS_AND_DATA (octave_fcn_handle, "function handle");
+DEFINE_OV_TYPEID_FUNCTIONS_AND_DATA (octave_fcn_handle,
+				     "function handle",
+				     "function handle");
 
 void
 octave_fcn_handle::print (std::ostream& os, bool pr_as_read_syntax) const
 {
   print_raw (os, pr_as_read_syntax);
   newline (os);
 }
 
diff --git a/src/ov-fcn-handle.h b/src/ov-fcn-handle.h
--- a/src/ov-fcn-handle.h
+++ b/src/ov-fcn-handle.h
@@ -79,19 +79,19 @@ public:
 private:
 
   // The function we are handling.
   octave_function *fcn;
 
   // The name of the handle.
   std::string nm;
 
-  DECLARE_OV_TYPEID_FUNCTIONS_AND_DATA
+  DECLARE_OCTAVE_ALLOCATOR
 
-  DECLARE_OCTAVE_ALLOCATOR
+  DECLARE_OV_TYPEID_FUNCTIONS_AND_DATA
 };
 
 extern octave_value make_fcn_handle (const std::string& nm);
 
 #endif
 
 /*
 ;;; Local Variables: ***
diff --git a/src/ov-file.cc b/src/ov-file.cc
--- a/src/ov-file.cc
+++ b/src/ov-file.cc
@@ -34,17 +34,17 @@ Software Foundation, 59 Temple Place - S
 #include "oct-stream.h"
 #include "ops.h"
 #include "ov-file.h"
 #include "ov-scalar.h"
 #include "unwind-prot.h"
 
 DEFINE_OCTAVE_ALLOCATOR (octave_file);
 
-DEFINE_OV_TYPEID_FUNCTIONS_AND_DATA (octave_file, "file");
+DEFINE_OV_TYPEID_FUNCTIONS_AND_DATA (octave_file, "file", "file");
 
 static octave_value *
 default_numeric_conversion_function (const octave_value& a)
 {
   CAST_CONV_ARG (const octave_file&);
 
   return new octave_scalar (v.stream_number ());
 }
diff --git a/src/ov-file.h b/src/ov-file.h
--- a/src/ov-file.h
+++ b/src/ov-file.h
@@ -102,19 +102,19 @@ public:
 private:
 
   // The stream object.
   octave_stream stream;
 
   // The number of the beast.
   int number;
 
-  DECLARE_OV_TYPEID_FUNCTIONS_AND_DATA
+  DECLARE_OCTAVE_ALLOCATOR
 
-  DECLARE_OCTAVE_ALLOCATOR
+  DECLARE_OV_TYPEID_FUNCTIONS_AND_DATA
 };
 
 #endif
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
diff --git a/src/ov-list.cc b/src/ov-list.cc
--- a/src/ov-list.cc
+++ b/src/ov-list.cc
@@ -36,17 +36,17 @@ Software Foundation, 59 Temple Place - S
 #include "Cell.h"
 #include "defun.h"
 #include "error.h"
 #include "ov-list.h"
 #include "unwind-prot.h"
 
 DEFINE_OCTAVE_ALLOCATOR (octave_list);
 
-DEFINE_OV_TYPEID_FUNCTIONS_AND_DATA (octave_list, "list");
+DEFINE_OV_TYPEID_FUNCTIONS_AND_DATA (octave_list, "list", "list");
 
 octave_list::octave_list (const Cell& c)
   : octave_base_value (), data ()
 {
   int n = c.length ();
 
   data.resize (dim_vector (1, n));
 
diff --git a/src/ov-list.h b/src/ov-list.h
--- a/src/ov-list.h
+++ b/src/ov-list.h
@@ -103,19 +103,19 @@ public:
 
 protected:
 
   // The list of Octave values.
   Cell data;
 
 private:
 
-  DECLARE_OV_TYPEID_FUNCTIONS_AND_DATA
+  DECLARE_OCTAVE_ALLOCATOR
 
-  DECLARE_OCTAVE_ALLOCATOR
+  DECLARE_OV_TYPEID_FUNCTIONS_AND_DATA
 };
 
 #endif
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
diff --git a/src/ov-mapper.cc b/src/ov-mapper.cc
--- a/src/ov-mapper.cc
+++ b/src/ov-mapper.cc
@@ -34,16 +34,17 @@ Software Foundation, 59 Temple Place - S
 #include "gripes.h"
 #include "oct-obj.h"
 #include "ov-mapper.h"
 #include "ov.h"
 
 DEFINE_OCTAVE_ALLOCATOR (octave_mapper);
 
 DEFINE_OV_TYPEID_FUNCTIONS_AND_DATA (octave_mapper,
+				     "built-in mapper function",
 				     "built-in mapper function");
 
 static bool
 any_element_less_than (const Matrix& a, double val)
 {
   int nr = a.rows ();
   int nc = a.columns ();
 
diff --git a/src/ov-mapper.h b/src/ov-mapper.h
--- a/src/ov-mapper.h
+++ b/src/ov-mapper.h
@@ -114,19 +114,19 @@ private:
   int ch_map_flag;
 
   // can_ret_cmplx_for_real is a flag that says whether this function
   // can create a complex number given a real-valued  argument
   // (e.g., sqrt (-1)).
 
   bool can_ret_cmplx_for_real;
 
-  DECLARE_OV_TYPEID_FUNCTIONS_AND_DATA
+  DECLARE_OCTAVE_ALLOCATOR
 
-  DECLARE_OCTAVE_ALLOCATOR
+  DECLARE_OV_TYPEID_FUNCTIONS_AND_DATA
 };
 
 #endif
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
diff --git a/src/ov-range.cc b/src/ov-range.cc
--- a/src/ov-range.cc
+++ b/src/ov-range.cc
@@ -38,17 +38,17 @@ Software Foundation, 59 Temple Place - S
 #include "oct-obj.h"
 #include "ov-range.h"
 #include "ov-re-mat.h"
 #include "ov-scalar.h"
 #include "pr-output.h"
 
 DEFINE_OCTAVE_ALLOCATOR (octave_range);
 
-DEFINE_OV_TYPEID_FUNCTIONS_AND_DATA (octave_range, "range");
+DEFINE_OV_TYPEID_FUNCTIONS_AND_DATA (octave_range, "range", "double");
 
 static octave_value *
 default_numeric_conversion_function (const octave_value& a)
 {
   CAST_CONV_ARG (const octave_range&);
 
   return new octave_matrix (v.matrix_value ());
 }
diff --git a/src/ov-range.h b/src/ov-range.h
--- a/src/ov-range.h
+++ b/src/ov-range.h
@@ -162,19 +162,19 @@ public:
   void print_raw (std::ostream& os, bool pr_as_read_syntax = false) const;
 
   bool print_name_tag (std::ostream& os, const std::string& name) const;
 
 private:
 
   Range range;
 
-  DECLARE_OV_TYPEID_FUNCTIONS_AND_DATA
+  DECLARE_OCTAVE_ALLOCATOR
 
-  DECLARE_OCTAVE_ALLOCATOR
+  DECLARE_OV_TYPEID_FUNCTIONS_AND_DATA
 };
 
 #endif
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
diff --git a/src/ov-re-mat.cc b/src/ov-re-mat.cc
--- a/src/ov-re-mat.cc
+++ b/src/ov-re-mat.cc
@@ -52,17 +52,17 @@ Software Foundation, 59 Temple Place - S
 #if ! defined (UCHAR_MAX)
 #define UCHAR_MAX 255
 #endif
 
 template class octave_base_matrix<NDArray>;
 
 DEFINE_OCTAVE_ALLOCATOR (octave_matrix);
 
-DEFINE_OV_TYPEID_FUNCTIONS_AND_DATA (octave_matrix, "matrix");
+DEFINE_OV_TYPEID_FUNCTIONS_AND_DATA (octave_matrix, "matrix", "double");
 
 octave_value *
 octave_matrix::try_narrowing_conversion (void)
 {
   octave_value *retval = 0;
 
   if (matrix.nelem () == 1)
     retval = new octave_scalar (matrix (0));
diff --git a/src/ov-scalar.cc b/src/ov-scalar.cc
--- a/src/ov-scalar.cc
+++ b/src/ov-scalar.cc
@@ -42,17 +42,17 @@ Software Foundation, 59 Temple Place - S
 #include "pr-output.h"
 #include "xdiv.h"
 #include "xpow.h"
 
 template class octave_base_scalar<double>;
 
 DEFINE_OCTAVE_ALLOCATOR (octave_scalar);
 
-DEFINE_OV_TYPEID_FUNCTIONS_AND_DATA (octave_scalar, "scalar");
+DEFINE_OV_TYPEID_FUNCTIONS_AND_DATA (octave_scalar, "scalar", "double");
 
 octave_value
 octave_scalar::do_index_op (const octave_value_list& idx, int resize_ok)
 {
   octave_value retval;
 
   if (idx.valid_scalar_indices ())
     retval = scalar;
diff --git a/src/ov-scalar.h b/src/ov-scalar.h
--- a/src/ov-scalar.h
+++ b/src/ov-scalar.h
@@ -103,19 +103,19 @@ public:
   octave_value convert_to_str_internal (bool pad, bool force) const;
 
   void increment (void) { ++scalar; }
 
   void decrement (void) { --scalar; }
 
 private:
 
-  DECLARE_OV_TYPEID_FUNCTIONS_AND_DATA
+  DECLARE_OCTAVE_ALLOCATOR
 
-  DECLARE_OCTAVE_ALLOCATOR
+  DECLARE_OV_TYPEID_FUNCTIONS_AND_DATA
 };
 
 #endif
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
diff --git a/src/ov-str-mat.cc b/src/ov-str-mat.cc
--- a/src/ov-str-mat.cc
+++ b/src/ov-str-mat.cc
@@ -38,17 +38,17 @@ Software Foundation, 59 Temple Place - S
 #include "ov-re-mat.h"
 #include "ov-str-mat.h"
 #include "gripes.h"
 #include "pr-output.h"
 #include "pt-mat.h"
 
 DEFINE_OCTAVE_ALLOCATOR (octave_char_matrix_str);
 
-DEFINE_OV_TYPEID_FUNCTIONS_AND_DATA (octave_char_matrix_str, "string");
+DEFINE_OV_TYPEID_FUNCTIONS_AND_DATA (octave_char_matrix_str, "string", "char");
 
 static octave_value *
 default_numeric_conversion_function (const octave_value& a)
 {
   CAST_CONV_ARG (const octave_char_matrix_str&);
 
   Matrix m = v.matrix_value ();
 
diff --git a/src/ov-struct.cc b/src/ov-struct.cc
--- a/src/ov-struct.cc
+++ b/src/ov-struct.cc
@@ -37,17 +37,17 @@ Software Foundation, 59 Temple Place - S
 #include "oct-lvalue.h"
 #include "ov-list.h"
 #include "ov-struct.h"
 #include "unwind-prot.h"
 #include "variables.h"
 
 DEFINE_OCTAVE_ALLOCATOR(octave_struct);
 
-DEFINE_OV_TYPEID_FUNCTIONS_AND_DATA(octave_struct, "struct");
+DEFINE_OV_TYPEID_FUNCTIONS_AND_DATA(octave_struct, "struct", "struct");
 
 Cell
 octave_struct::dotref (const octave_value_list& idx)
 {
   Cell retval;
 
   assert (idx.length () == 1);
 
diff --git a/src/ov-typeinfo.cc b/src/ov-typeinfo.cc
--- a/src/ov-typeinfo.cc
+++ b/src/ov-typeinfo.cc
@@ -76,20 +76,21 @@ octave_value_typeinfo::instance_ok (void
 
       retval = false;
     }
 
   return retval;
 }
 
 int
-octave_value_typeinfo::register_type (const std::string& name)
+octave_value_typeinfo::register_type (const std::string& t_name,
+				      const std::string& c_name)
 {
   return (instance_ok ())
-    ? instance->do_register_type (name) : -1;
+    ? instance->do_register_type (t_name, c_name) : -1;
 }
 
 bool
 octave_value_typeinfo::register_unary_op (octave_value::unary_op op,
 					   int t, unary_op_fcn f)
 {
   return (instance_ok ())
     ? instance->do_register_unary_op (op, t, f) : false;
@@ -142,22 +143,23 @@ bool
 octave_value_typeinfo::register_widening_op (int t, int t_result,
 					     type_conv_fcn f)
 {
   return (instance_ok ())
     ? instance->do_register_widening_op (t, t_result, f) : false;
 }
 
 int
-octave_value_typeinfo::do_register_type (const std::string& name)
+octave_value_typeinfo::do_register_type (const std::string& t_name,
+					 const std::string& c_name)
 {
   int i = 0;
 
   for (i = 0; i < num_types; i++)
-    if (name == types (i))
+    if (t_name == types (i))
       return i;
 
   int len = types.length ();
 
   if (i == len)
     {
       len *= 2;
 
@@ -179,17 +181,17 @@ octave_value_typeinfo::do_register_type 
       assignany_ops.resize (static_cast<int> (octave_value::num_assign_ops),
 			    len, static_cast<assign_op_fcn> (0));
 
       pref_assign_conv.resize (len, len, -1);
 
       widening_ops.resize (len, len, static_cast<type_conv_fcn> (0));
     }
 
-  types (i) = name;
+  types (i) = t_name;
 
   num_types++;
 
   return i;
 }
 
 bool
 octave_value_typeinfo::do_register_unary_op (octave_value::unary_op op,
@@ -396,13 +398,32 @@ currently installed data types.\n\
   else if (nargin == 1)
     retval = args(0).type_name ();
   else
     print_usage ("typeinfo");
 
   return retval;
 }
 
+DEFUN (class, args, ,
+  "-*- texinfo -*-\n\
+@deftypefn {Built-in Function} {} class (@var{expr})\n\
+\n\
+Return the class of the expression @var{expr}, as a string.\n\
+@end deftypefn")
+{
+  octave_value retval;
+
+  int nargin = args.length ();
+
+  if (nargin == 1)
+    retval = args(0).class_name ();
+  else
+    print_usage ("class");
+
+  return retval;
+}
+
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
diff --git a/src/ov-typeinfo.h b/src/ov-typeinfo.h
--- a/src/ov-typeinfo.h
+++ b/src/ov-typeinfo.h
@@ -39,17 +39,17 @@ class string_vector;
 
 class
 octave_value_typeinfo
 {
 public:
 
   static bool instance_ok (void);
 
-  static int register_type (const std::string&);
+  static int register_type (const std::string&, const std::string&);
 
   static bool register_unary_op (octave_value::unary_op, int, unary_op_fcn);
 
   static bool register_non_const_unary_op (octave_value::unary_op, int,
 					   non_const_unary_op_fcn);
 
   static bool register_binary_op (octave_value::binary_op, int, int,
 				  binary_op_fcn);
@@ -147,17 +147,17 @@ private:
   Array3<assign_op_fcn> assign_ops;
 
   Array2<assign_op_fcn> assignany_ops;
 
   Array2<int> pref_assign_conv;
 
   Array2<type_conv_fcn> widening_ops;
 
-  int do_register_type (const std::string&);
+  int do_register_type (const std::string&, const std::string&);
 
   bool do_register_unary_op (octave_value::unary_op, int, unary_op_fcn);
 
   bool do_register_non_const_unary_op (octave_value::unary_op, int,
 				       non_const_unary_op_fcn);
 
   bool do_register_binary_op (octave_value::binary_op, int, int,
 			      binary_op_fcn);
diff --git a/src/ov-usr-fcn.cc b/src/ov-usr-fcn.cc
--- a/src/ov-usr-fcn.cc
+++ b/src/ov-usr-fcn.cc
@@ -54,16 +54,17 @@ Software Foundation, 59 Temple Place - S
 // Maximum nesting level for functions called recursively.
 static int Vmax_recursion_depth;
 
 // User defined functions.
 
 DEFINE_OCTAVE_ALLOCATOR (octave_user_function);
 
 DEFINE_OV_TYPEID_FUNCTIONS_AND_DATA (octave_user_function,
+				     "user-defined function",
 				     "user-defined function");
 
 // Ugh.  This really needs to be simplified (code/data?
 // extrinsic/intrinsic state?).
 
 octave_user_function::octave_user_function
   (tree_parameter_list *pl, tree_parameter_list *rl,
    tree_statement_list *cl, symbol_table *st)
diff --git a/src/ov-usr-fcn.h b/src/ov-usr-fcn.h
--- a/src/ov-usr-fcn.h
+++ b/src/ov-usr-fcn.h
@@ -253,19 +253,19 @@ private:
 
   void print_code_function_trailer (void);
 
   void install_automatic_vars (void);
 
   void bind_automatic_vars (const string_vector& arg_names, int nargin,
 			    int nargout, const octave_value_list& va_args);
 
-  DECLARE_OV_TYPEID_FUNCTIONS_AND_DATA
+  DECLARE_OCTAVE_ALLOCATOR
 
-  DECLARE_OCTAVE_ALLOCATOR
+  DECLARE_OV_TYPEID_FUNCTIONS_AND_DATA
 };
 
 #endif
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
diff --git a/src/ov-va-args.cc b/src/ov-va-args.cc
--- a/src/ov-va-args.cc
+++ b/src/ov-va-args.cc
@@ -30,17 +30,17 @@ Software Foundation, 59 Temple Place - S
 
 #include <iostream>
 
 #include "error.h"
 #include "pr-output.h"
 #include "oct-obj.h"
 #include "ov-va-args.h"
 
-DEFINE_OV_TYPEID_FUNCTIONS_AND_DATA (octave_all_va_args, "va-arg");
+DEFINE_OV_TYPEID_FUNCTIONS_AND_DATA (octave_all_va_args, "va-arg", "va-arg");
 
 void
 octave_all_va_args::print (std::ostream& os, bool) const
 {
   indent (os);
   print (os);
 }
 
diff --git a/src/ov.h b/src/ov.h
--- a/src/ov.h
+++ b/src/ov.h
@@ -599,16 +599,18 @@ public:
 
   void print_with_name (std::ostream& os, const std::string& name,
 			bool print_padding = true) const;
 
   virtual int type_id (void) const { return rep->type_id (); }
 
   virtual std::string type_name (void) const { return rep->type_name (); }
 
+  virtual std::string class_name (void) const { return rep->class_name (); }
+
   // Unary and binary operations.
 
   friend octave_value do_unary_op (unary_op op,
 				   const octave_value& a);
 
   const octave_value& do_non_const_unary_op (unary_op op);
 
   void do_non_const_unary_op (unary_op op, const octave_value_list& idx);
@@ -747,27 +749,30 @@ OV_BINOP_FN (op_el_or)
 OV_BINOP_FN (op_struct_ref)
 
 // T_ID is the type id of struct objects, set by register_type().
 // T_NAME is the type name of struct objects.
 #define DECLARE_OV_TYPEID_FUNCTIONS_AND_DATA \
   public: \
     int type_id (void) const { return t_id; } \
     std::string type_name (void) const { return t_name; } \
+    std::string class_name (void) const { return c_name; } \
     static int static_type_id (void) { return t_id; } \
     static void register_type (void) \
-      { t_id = octave_value_typeinfo::register_type (t_name); } \
+      { t_id = octave_value_typeinfo::register_type (t_name, c_name); } \
  \
   private: \
     static int t_id; \
-    static const std::string t_name;
+    static const std::string t_name; \
+    static const std::string c_name;
 
-#define DEFINE_OV_TYPEID_FUNCTIONS_AND_DATA(t, n) \
+#define DEFINE_OV_TYPEID_FUNCTIONS_AND_DATA(t, n, c) \
   int t::t_id (-1); \
-  const std::string t::t_name (n)
+  const std::string t::t_name (n); \
+  const std::string t::c_name (c)
 
 // If TRUE, print a warning for assignments like
 //
 //   octave> A(1) = 3; A(2) = 5
 //
 // for A already defined and a matrix type.
 extern bool Vwarn_fortran_indexing;
 
