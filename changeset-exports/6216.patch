# HG changeset patch
# User jwe
# Date 1166809547 0
#      Fri Dec 22 17:45:47 2006 +0000
# Node ID 74ca56e4414cc96bc374d9657b455fab2e782462
# Parent  516d3071b34cf13dbc4745ac87f1edaa984698dc
[project @ 2006-12-22 17:45:47 by jwe]

diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,14 @@
+2006-12-22  John W. Eaton  <jwe@octave.org>
+
+	* dim-vector.h (dim_vector::dim_vector): Always start with at
+	least 2 dimensions.
+	(dim_vector::resize): Don't allow resizing to fewer than 2 dimensions.
+
 2006-12-06  Michael Goffioul  <michael.goffioul@swing.be>
 
 	* lo-sysdep.cc (opendir): Avoid passing \\* to FindFirstFile.
 
 	* file-ops.cc (ops::canonicalize_file_name): Provide partial
 	implementatino for Windows.
 
 2006-12-06  David Bateman  <dbateman@free.fr>
diff --git a/liboctave/dim-vector.h b/liboctave/dim-vector.h
--- a/liboctave/dim-vector.h
+++ b/liboctave/dim-vector.h
@@ -23,39 +23,49 @@ 02110-1301, USA.
 
 #if !defined (octave_dim_vector_h)
 #define octave_dim_vector_h 1
 
 #include <cassert>
 #include <sstream>
 #include <string>
 
+#include "lo-error.h"
 #include "oct-types.h"
 
 class
 dim_vector
 {
 protected:
 
   class dim_vector_rep
   {
   public:
 
     octave_idx_type *dims;
     int ndims;
     int count;
 
-    dim_vector_rep (void) : dims (0), ndims (0), count (1) { }
+    dim_vector_rep (void)
+      : dims (new octave_idx_type [2]), ndims (2), count (1)
+    {
+      dims[0] = 0;
+      dims[1] = 0;
+    }
 
-    dim_vector_rep (octave_idx_type n) : dims (new octave_idx_type [1]), ndims (1), count (1)
+
+    dim_vector_rep (octave_idx_type n)
+      : dims (new octave_idx_type [2]), ndims (2), count (1)
     {
       dims[0] = n;
+      dims[1] = 1;
     }
 
-    dim_vector_rep (octave_idx_type r, octave_idx_type c) : dims (new octave_idx_type [2]), ndims (2), count (1)
+    dim_vector_rep (octave_idx_type r, octave_idx_type c)
+      : dims (new octave_idx_type [2]), ndims (2), count (1)
     {
       dims[0] = r;
       dims[1] = c;
     }
 
     dim_vector_rep (octave_idx_type r, octave_idx_type c, octave_idx_type p)
       : dims (new octave_idx_type [3]), ndims (3), count (1)
     {
@@ -70,17 +80,18 @@ protected:
     {
       if (dims)
 	{
 	  for (int i = 0; i < ndims; i++)
 	    dims[i] = dv.dims[i];
 	}
     }
 
-    dim_vector_rep (octave_idx_type n, const dim_vector_rep *dv, int fill_value = 0)
+    dim_vector_rep (octave_idx_type n, const dim_vector_rep *dv,
+		    int fill_value = 0)
       : dims ((dv && n > 0) ? new octave_idx_type [n] : 0),
 	ndims (n > 0 ? n : 0), count (1)
     {
       if (dims)
 	{
 	  int dv_ndims = dv ? dv->ndims : 0;
 
 	  int min_len = n < dv_ndims ? n : dv_ndims;
@@ -195,16 +206,23 @@ public:
   octave_idx_type operator () (int i) const { return elem (i); }
 
   void resize (int n, int fill_value = 0)
   {
     int len = length ();
 
     if (n != len)
       {
+	if (n < 2)
+	  {
+	    (*current_liboctave_error_handler)
+	      ("unable to resize object to fewer than 2 dimensions");
+	    return;
+	  }
+
 	dim_vector_rep *old_rep = rep;
 
 	rep = new dim_vector_rep (n, old_rep, fill_value);
 
 	if (--old_rep->count <= 0)
 	  delete old_rep;
       }
   }
