# HG changeset patch
# User Rik <rik@octave.org>
# Date 1530296702 25200
#      Fri Jun 29 11:25:02 2018 -0700
# Node ID 90c8325c14be4cfda0aa4a43ba4c9078627e767f
# Parent  a87b4dca2ce3b6035ab83dcede6038e01d4468eb
test.m: Warn if %!tests leak variables in to base workspace.

* test.m: Compare list of variables in base workspace (using evalin) before and
after running %!tests.  Emit a warning (not error) if variables are leaked.

diff --git a/scripts/testfun/test.m b/scripts/testfun/test.m
--- a/scripts/testfun/test.m
+++ b/scripts/testfun/test.m
@@ -291,16 +291,19 @@ function [__n, __nmax, __nxfail, __nbug,
   ## If in batch mode, with a logfile, report what is happening.
   if (__verbose > 0)
     disp ([__signal_file, __file]);
   endif
 
   ## Track file descriptor leaks
   __fid_list_orig = fopen ("all"); 
 
+  ## Track variable leaks
+  __variables_orig = evalin ("base", "whos");
+
   ## Assume all tests will pass.
   __all_success = true;
 
   ## Process each block separately, initially with no shared variables.
   __tests = __successes = 0;
   __xfail = __xbug = __xskip = __xrtskip = __xregression = 0;
   __shared = " ";
   __shared_r = " ";
@@ -735,16 +738,24 @@ function [__n, __nmax, __nxfail, __nbug,
   ## Clear any functions created during test run
   eval (__clearfcn, "");
 
   ## Verify test file did not leak file descriptors
   if (! isempty (setdiff (fopen ("all"), __fid_list_orig)))
     warning ("test: file %s leaked file descriptors\n", __file);
   endif
 
+  ## Verify test file did not leak variables in to base workspace
+  __variables_post = evalin ("base", "whos");
+  if (! size_equal (__variables_post, __variables_orig))
+    __leaked_var = setdiff ({__variables_post.name},  {__variables_orig.name});
+    warning ("test: file %s leaked variables:%s\n",
+             __file, sprintf (" %s", __leaked_var{:}));
+  endif
+
   if (nargout == 0)
     if (__tests || __xfail || __xbug || __xskip || __xrtskip)
       if (__xfail || __xbug)
         if (__xfail && __xbug)
           printf ("PASSES %d out of %d test%s (%d known failure%s; %d known bug%s)\n",
                   __successes, __tests, ifelse (__tests > 1, "s", ""),
                   __xfail, ifelse (__xfail > 1, "s", ""),
                   __xbug, ifelse (__xbug > 1, "s", ""));
