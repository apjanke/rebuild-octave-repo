# HG changeset patch
# User jwe
# Date 847307768 0
#      Wed Nov 06 19:16:08 1996 +0000
# Node ID b8c53143581b28d3970f9d2d3feb334a87fe8ee3
# Parent  bb0c213e58855a34ebdefa8c5df8fa561588e062
[project @ 1996-11-06 19:16:07 by jwe]

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,16 @@
+Wed Nov  6 12:32:48 1996  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* variables.cc (is_function_file): Call gobble_leading_whitespace
+	here to strip all leading whitespace and comments.
+	(parse_fcn_file): If reading a function file, call
+	gobble_leading_whitespace again after resetting parser state to
+	grab help text.
+
 Tue Nov  5 13:00:35 1996  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* syscalls.cc (Fgeteuid, Fgetuid): New functions.
 
 	* getpwent.cc: Use gripe_not_supported from gripes.cc, instead of
 	local gripe_not_implemented function.
 
 	* input.cc, sysdep.cc, variables.cc: Only include readline.h and
diff --git a/src/variables.cc b/src/variables.cc
--- a/src/variables.cc
+++ b/src/variables.cc
@@ -453,17 +453,17 @@ looks_like_octave_copyright (const strin
 // comments read if it doesn't look like a copyright notice.  If
 // IN_PARTS, consider each block of comments separately; otherwise,
 // grab them all at once.
 
 // XXX FIXME XXX -- grab_help_text() in lex.l duplicates some of this
 // code!
 
 static string
-gobble_leading_white_space (FILE *ffile, int in_parts)
+gobble_leading_white_space (FILE *ffile, bool in_parts)
 {
   string help_txt;
 
   bool first_comments_seen = false;
   bool begin_comment = false;
   bool have_help_text = false;
   bool in_comment = false;
   int c;
@@ -555,16 +555,18 @@ gobble_leading_white_space (FILE *ffile,
 
 static int
 is_function_file (FILE *ffile)
 {
   int status = 0;
 
   long pos = ftell (ffile);
 
+  gobble_leading_white_space (ffile, false);
+
   char buf [10];
   fgets (buf, 10, ffile);
   int len = strlen (buf);
   if (len > 8 && strncmp (buf, "function", 8) == 0
       && ! (isalnum (buf[8]) || buf[8] == '_'))
     status = 1;
 
   fseek (ffile, pos, SEEK_SET);
@@ -604,18 +606,16 @@ parse_fcn_file (int exec_script, const s
 
   FILE *ffile = get_input_from_file (ff, 0);
 
   if (ffile)
     {
       // Check to see if this file defines a function or is just a
       // list of commands.
 
-      string tmp_help_txt = gobble_leading_white_space (ffile, 0);
-
       if (is_function_file (ffile))
 	{
 	  // XXX FIXME XXX -- we shouldn't need both the
 	  // octave_command_history object and the
 	  // Vsaving_history variable...
 	  octave_command_history.ignore_entries ();
 
 	  add_unwind_protect (restore_command_history, 0);
@@ -637,17 +637,20 @@ parse_fcn_file (int exec_script, const s
 	  add_unwind_protect (delete_input_buffer, (void *) new_buf);
 
 	  switch_to_buffer (new_buf);
 
 	  unwind_protect_ptr (curr_sym_tab);
 
 	  reset_parser ();
 
-	  help_buf = tmp_help_txt;
+	  help_buf = gobble_leading_white_space (ffile, true);
+
+	  // XXX FIXME XXX -- this should not be necessary.
+	  gobble_leading_white_space (ffile, false);
 
 	  int status = yyparse ();
 
 	  if (status != 0)
 	    {
 	      error ("parse error while reading function file %s",
 		     ff.c_str ());
 	      global_sym_tab->clear (curr_fcn_file_name);
@@ -769,17 +772,17 @@ get_help_from_file (const string& path)
   string retval;
 
   if (! path.empty ())
     {
       FILE *fptr = fopen (path.c_str (), "r");
 
       if (fptr)
 	{
-	  retval = gobble_leading_white_space (fptr, 1);
+	  retval = gobble_leading_white_space (fptr, true);
 	  fclose (fptr);
 	}
     }
 
   return retval;
 }
 
 // Variable values.
