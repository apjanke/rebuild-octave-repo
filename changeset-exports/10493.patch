# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1270634826 -7200
#      Wed Apr 07 12:07:06 2010 +0200
# Node ID 2f8bacc2a57d78ae343fa045cb7254ee8a9818b7
# Parent  a6b64a7a37693c30f92e93c13a957b5e6ccb41e8
fix order of func defs in Sparse.cc

diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,12 @@
+2010-04-07  Jaroslav Hajek  <highegg@gmail.com>
+
+	* Sparse.cc (lblookup): Move in front of Sparse<T>::delete_elements.
+
 2010-04-07  Jaroslav Hajek  <highegg@gmail.com>
 
 	* str-vec.h (string_vector::string_vector (const Array<std::string>)):
 	New constructor.
 
 2010-04-06  Jaroslav Hajek  <highegg@gmail.com>
 
 	* idx-vector.cc (idx_vector::complement): Rewrite.
diff --git a/liboctave/Sparse.cc b/liboctave/Sparse.cc
--- a/liboctave/Sparse.cc
+++ b/liboctave/Sparse.cc
@@ -1212,16 +1212,35 @@ Sparse<T>::set_index (const idx_vector& 
       new_idx[idx_count++] = idx_arg;
 
       delete [] idx;
 
       idx = new_idx;
     }
 }
 
+// Lower bound lookup. Could also use octave_sort, but that has upper bound
+// semantics, so requires some manipulation to set right. Uses a plain loop for
+// small columns.
+static octave_idx_type
+lblookup (const octave_idx_type *ridx, octave_idx_type nr,
+          octave_idx_type ri)
+{
+  if (nr <= 8)
+    {
+      octave_idx_type l;
+      for (l = 0; l < nr; l++)
+        if (ridx[l] >= ri)
+          break;
+      return l;
+    }
+  else
+    return std::lower_bound (ridx, ridx + nr, ri) - ridx;
+}
+
 template <class T>
 void
 Sparse<T>::delete_elements (const idx_vector& idx)
 {
   Sparse<T> retval;
 
   assert (ndims () == 2);
 
@@ -1424,35 +1443,16 @@ Sparse<T>::value (void)
     (*current_liboctave_error_handler)
       ("Sparse<T>::value: invalid number of indices specified");
 
   clear_index ();
 
   return retval;
 }
 
-// Lower bound lookup. Could also use octave_sort, but that has upper bound
-// semantics, so requires some manipulation to set right. Uses a plain loop for
-// small columns.
-static octave_idx_type
-lblookup (const octave_idx_type *ridx, octave_idx_type nr,
-          octave_idx_type ri)
-{
-  if (nr <= 8)
-    {
-      octave_idx_type l;
-      for (l = 0; l < nr; l++)
-        if (ridx[l] >= ri)
-          break;
-      return l;
-    }
-  else
-    return std::lower_bound (ridx, ridx + nr, ri) - ridx;
-}
-
 template <class T>
 Sparse<T>
 Sparse<T>::index (const idx_vector& idx, bool resize_ok) const
 {
   Sparse<T> retval;
 
   assert (ndims () == 2);
 
