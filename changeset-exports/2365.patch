# HG changeset patch
# User jwe
# Date 845075138 0
#      Fri Oct 11 23:05:38 1996 +0000
# Node ID 7c60f8a6e6a0f338eae4bc36f5113141dac4069d
# Parent  5eb0af0730d659d3b2caa91a97640c7cc09e5f3b
[project @ 1996-10-11 23:03:52 by jwe]

diff --git a/src/timefns.cc b/src/timefns.cc
--- a/src/timefns.cc
+++ b/src/timefns.cc
@@ -26,17 +26,17 @@ Software Foundation, 59 Temple Place - S
 
 #include <string>
 
 #include "defun.h"
 #include "error.h"
 #include "help.h"
 #include "oct-map.h"
 #include "systime.h"
-#include "pt-const.h"
+#include "ov.h"
 #include "oct-obj.h"
 #include "utils.h"
 
 // Date and time functions.
 
 static Octave_map
 mk_tm_map (struct tm *tm, double fraction)
 {
diff --git a/src/xpow.cc b/src/xpow.cc
--- a/src/xpow.cc
+++ b/src/xpow.cc
@@ -31,57 +31,40 @@ Software Foundation, 59 Temple Place - S
 #include "CDiagMatrix.h"
 #include "CMatrix.h"
 #include "EIG.h"
 #include "dDiagMatrix.h"
 #include "dMatrix.h"
 #include "oct-cmplx.h"
 
 #include "error.h"
-#include "pt-const.h"
+#include "ov.h"
 #include "utils.h"
 #include "xpow.h"
 
-// This function also appears in tree-const.cc.  Maybe it should be a
-// member function of the Matrix class.
-
-static int
-any_element_is_negative (const Matrix& a)
-{
-  int nr = a.rows ();
-  int nc = a.columns ();
-  for (int j = 0; j < nc; j++)
-    for (int i = 0; i < nr; i++)
-      if (a (i, j) < 0.0)
-	return 1;
-  return 0;
-}
-
 static inline int
 xisint (double x)
 {
   return (D_NINT (x) == x
 	  && ((x >= 0 && x < INT_MAX)
 	      || (x <= 0 && x > INT_MIN)));
 }
 
 // Safer pow functions.
 //
 //       op2 \ op1:   s   m   cs   cm
 //            +--   +---+---+----+----+
 //   scalar   |     | 1 | 5 |  7 | 11 |
 //                  +---+---+----+----+
-//   matrix         | 2 | E |  8 |  E |
+//   matrix         | 2 | * |  8 |  * |
 //                  +---+---+----+----+
 //   complex_scalar | 3 | 6 |  9 | 12 |
 //                  +---+---+----+----+
-//   complex_matrix | 4 | E | 10 |  E |
+//   complex_matrix | 4 | * | 10 |  * |
 //                  +---+---+----+----+
-//
-//   E -> error, trapped in arith-ops.cc.
 
 // -*- 1 -*-
 octave_value
 xpow (double a, double b)
 {
   if (a < 0.0 && (int) b != b)
     {
       Complex atmp (a);
@@ -93,17 +76,17 @@ xpow (double a, double b)
 
 // -*- 2 -*-
 octave_value
 xpow (double a, const Matrix& b)
 {
   octave_value retval;
 
   int nr = b.rows ();
-  int nc = b.columns ();
+  int nc = b.cols ();
 
   if (nr == 0 || nc == 0 || nr != nc)
     error ("for x^A, A must be square");
   else
     {
       EIG b_eig (b);
       ComplexColumnVector lambda (b_eig.eigenvalues ());
       ComplexMatrix Q (b_eig.eigenvectors ());
@@ -136,22 +119,20 @@ xpow (double a, const Complex& b)
 
 // -*- 4 -*-
 octave_value
 xpow (double a, const ComplexMatrix& b)
 {
   octave_value retval;
 
   int nr = b.rows ();
-  int nc = b.columns ();
+  int nc = b.cols ();
 
   if (nr == 0 || nc == 0 || nr != nc)
-    {
-      error ("for x^A, A must be square");
-    }
+    error ("for x^A, A must be square");
   else
     {
       EIG b_eig (b);
       ComplexColumnVector lambda (b_eig.eigenvalues ());
       ComplexMatrix Q (b_eig.eigenvectors ());
 
       for (int i = 0; i < nr; i++)
 	{
@@ -171,22 +152,20 @@ xpow (double a, const ComplexMatrix& b)
 
 // -*- 5 -*-
 octave_value
 xpow (const Matrix& a, double b)
 {
   octave_value retval;
 
   int nr = a.rows ();
-  int nc = a.columns ();
+  int nc = a.cols ();
 
   if (nr == 0 || nc == 0 || nr != nc)
-    {
-      error ("for A^b, A must be square");
-    }
+    error ("for A^b, A must be square");
   else
     {
       if ((int) b == b)
 	{
 	  int btmp = (int) b;
 	  if (btmp == 0)
 	    {
 	      retval = DiagMatrix (nr, nr, 1.0);
@@ -241,22 +220,20 @@ xpow (const Matrix& a, double b)
 
 // -*- 6 -*-
 octave_value
 xpow (const Matrix& a, const Complex& b)
 {
   octave_value retval;
 
   int nr = a.rows ();
-  int nc = a.columns ();
+  int nc = a.cols ();
 
   if (nr == 0 || nc == 0 || nr != nc)
-    {
-      error ("for A^b, A must be square");
-    }
+    error ("for A^b, A must be square");
   else
     {
       EIG a_eig (a);
       ComplexColumnVector lambda (a_eig.eigenvalues ());
       ComplexMatrix Q (a_eig.eigenvectors ());
 
       for (int i = 0; i < nr; i++)
 	lambda (i) = pow (lambda (i), b);
@@ -285,22 +262,20 @@ xpow (const Complex& a, double b)
 
 // -*- 8 -*-
 octave_value
 xpow (const Complex& a, const Matrix& b)
 {
   octave_value retval;
 
   int nr = b.rows ();
-  int nc = b.columns ();
+  int nc = b.cols ();
 
   if (nr == 0 || nc == 0 || nr != nc)
-    {
-      error ("for x^A, A must be square");
-    }
+    error ("for x^A, A must be square");
   else
     {
       EIG b_eig (b);
       ComplexColumnVector lambda (b_eig.eigenvalues ());
       ComplexMatrix Q (b_eig.eigenvectors ());
 
       for (int i = 0; i < nr; i++)
 	{
@@ -329,22 +304,20 @@ xpow (const Complex& a, const Complex& b
 
 // -*- 10 -*-
 octave_value
 xpow (const Complex& a, const ComplexMatrix& b)
 {
   octave_value retval;
 
   int nr = b.rows ();
-  int nc = b.columns ();
+  int nc = b.cols ();
 
   if (nr == 0 || nc == 0 || nr != nc)
-    {
-      error ("for x^A, A must be square");
-    }
+    error ("for x^A, A must be square");
   else
     {
       EIG b_eig (b);
       ComplexColumnVector lambda (b_eig.eigenvalues ());
       ComplexMatrix Q (b_eig.eigenvectors ());
 
       for (int i = 0; i < nr; i++)
 	{
@@ -364,22 +337,20 @@ xpow (const Complex& a, const ComplexMat
 
 // -*- 11 -*-
 octave_value
 xpow (const ComplexMatrix& a, double b)
 {
   octave_value retval;
 
   int nr = a.rows ();
-  int nc = a.columns ();
+  int nc = a.cols ();
 
   if (nr == 0 || nc == 0 || nr != nc)
-    {
-      error ("for A^b, A must be square");
-    }
+    error ("for A^b, A must be square");
   else
     {
       if ((int) b == b)
 	{
 	  int btmp = (int) b;
 	  if (btmp == 0)
 	    {
 	      retval = DiagMatrix (nr, nr, 1.0);
@@ -434,22 +405,20 @@ xpow (const ComplexMatrix& a, double b)
 
 // -*- 12 -*-
 octave_value
 xpow (const ComplexMatrix& a, const Complex& b)
 {
   octave_value retval;
 
   int nr = a.rows ();
-  int nc = a.columns ();
+  int nc = a.cols ();
 
   if (nr == 0 || nc == 0 || nr != nc)
-    {
-      error ("for A^b, A must be square");
-    }
+    error ("for A^b, A must be square");
   else
     {
       EIG a_eig (a);
       ComplexColumnVector lambda (a_eig.eigenvalues ());
       ComplexMatrix Q (a_eig.eigenvectors ());
 
       for (int i = 0; i < nr; i++)
 	lambda (i) = pow (lambda (i), b);
@@ -479,17 +448,17 @@ xpow (const ComplexMatrix& a, const Comp
 
 // -*- 1 -*-
 octave_value
 elem_xpow (double a, const Matrix& b)
 {
   octave_value retval;
 
   int nr = b.rows ();
-  int nc = b.columns ();
+  int nc = b.cols ();
 
   // For now, assume the worst.
 
   if (a < 0.0)
     {
       Complex atmp (a);
       ComplexMatrix result (nr, nc);
       for (int j = 0; j < nc; j++)
@@ -511,36 +480,36 @@ elem_xpow (double a, const Matrix& b)
   return retval;
 }
 
 // -*- 2 -*-
 octave_value
 elem_xpow (double a, const ComplexMatrix& b)
 {
   int nr = b.rows ();
-  int nc = b.columns ();
+  int nc = b.cols ();
 
   ComplexMatrix result (nr, nc);
   for (int j = 0; j < nc; j++)
     for (int i = 0; i < nr; i++)
       result (i, j) = pow (a, b (i, j));
 
   return result;
 }
 
 // -*- 3 -*-
 octave_value
 elem_xpow (const Matrix& a, double b)
 {
   octave_value retval;
 
   int nr = a.rows ();
-  int nc = a.columns ();
+  int nc = a.cols ();
 
-  if ((int) b != b && any_element_is_negative (a))
+  if ((int) b != b && a.any_element_is_negative ())
     {
       ComplexMatrix result (nr, nc);
       for (int j = 0; j < nc; j++)
 	for (int i = 0; i < nr; i++)
 	  {
 	    Complex atmp (a (i, j));
 	    result (i, j) = pow (atmp, b);
 	  }
@@ -562,34 +531,41 @@ elem_xpow (const Matrix& a, double b)
 
 // -*- 4 -*-
 octave_value
 elem_xpow (const Matrix& a, const Matrix& b)
 {
   octave_value retval;
 
   int nr = a.rows ();
-  int nc = a.columns ();
+  int nc = a.cols ();
+
+  int b_nr = b.rows ();
+  int b_nc = b.cols ();
 
-  assert (nr == b.rows () && nc == b.columns ());
+  if (nr != b_nr || nc != b_nc)
+    {
+      gripe_nonconformant ("operator .^", nr, nc, b_nr, b_nc);
+      return octave_value ();
+    }
 
   int convert_to_complex = 0;
   for (int j = 0; j < nc; j++)
     for (int i = 0; i < nr; i++)
       {
 	double atmp = a (i, j);
 	double btmp = b (i, j);
 	if (atmp < 0.0 && (int) btmp != btmp)
 	  {
 	    convert_to_complex = 1;
 	    goto done;
 	  }
       }
 
- done:
+done:
 
   if (convert_to_complex)
     {
       ComplexMatrix complex_result (nr, nc);
 
       for (int j = 0; j < nc; j++)
 	for (int i = 0; i < nr; i++)
 	  {
@@ -614,49 +590,56 @@ elem_xpow (const Matrix& a, const Matrix
   return retval;
 }
 
 // -*- 5 -*-
 octave_value
 elem_xpow (const Matrix& a, const Complex& b)
 {
   int nr = a.rows ();
-  int nc = a.columns ();
+  int nc = a.cols ();
 
   ComplexMatrix result (nr, nc);
   for (int j = 0; j < nc; j++)
     for (int i = 0; i < nr; i++)
       result (i, j) = pow (a (i, j), b);
 
   return result;
 }
 
 // -*- 6 -*-
 octave_value
 elem_xpow (const Matrix& a, const ComplexMatrix& b)
 {
   int nr = a.rows ();
-  int nc = a.columns ();
+  int nc = a.cols ();
+
+  int b_nr = b.rows ();
+  int b_nc = b.cols ();
 
-  assert (nr == b.rows () && nc == b.columns ());
+  if (nr != b_nr || nc != b_nc)
+    {
+      gripe_nonconformant ("operator .^", nr, nc, b_nr, b_nc);
+      return octave_value ();
+    }
 
   ComplexMatrix result (nr, nc);
   for (int j = 0; j < nc; j++)
     for (int i = 0; i < nr; i++)
       result (i, j) = pow (a (i, j), b (i, j));
 
   return result;
 }
 
 // -*- 7 -*-
 octave_value
 elem_xpow (const Complex& a, const Matrix& b)
 {
   int nr = b.rows ();
-  int nc = b.columns ();
+  int nc = b.cols ();
 
   ComplexMatrix result (nr, nc);
   for (int j = 0; j < nc; j++)
     for (int i = 0; i < nr; i++)
       {
 	double btmp = b (i, j);
 	if (xisint (btmp))
 	  result (i, j) = pow (a, (int) btmp);
@@ -667,32 +650,32 @@ elem_xpow (const Complex& a, const Matri
   return result;
 }
 
 // -*- 8 -*-
 octave_value
 elem_xpow (const Complex& a, const ComplexMatrix& b)
 {
   int nr = b.rows ();
-  int nc = b.columns ();
+  int nc = b.cols ();
 
   ComplexMatrix result (nr, nc);
   for (int j = 0; j < nc; j++)
     for (int i = 0; i < nr; i++)
       result (i, j) = pow (a, b (i, j));
 
   return result;
 }
 
 // -*- 9 -*-
 octave_value
 elem_xpow (const ComplexMatrix& a, double b)
 {
   int nr = a.rows ();
-  int nc = a.columns ();
+  int nc = a.cols ();
 
   ComplexMatrix result (nr, nc);
 
   if (xisint (b))
     {
       for (int j = 0; j < nc; j++)
 	for (int i = 0; i < nr; i++)
 	  result (i, j) = pow (a (i, j), (int) b);
@@ -707,19 +690,26 @@ elem_xpow (const ComplexMatrix& a, doubl
   return result;
 }
 
 // -*- 10 -*-
 octave_value
 elem_xpow (const ComplexMatrix& a, const Matrix& b)
 {
   int nr = a.rows ();
-  int nc = a.columns ();
+  int nc = a.cols ();
+
+  int b_nr = b.rows ();
+  int b_nc = b.cols ();
 
-  assert (nr == b.rows () && nc == b.columns ());
+  if (nr != b_nr || nc != b_nc)
+    {
+      gripe_nonconformant ("operator .^", nr, nc, b_nr, b_nc);
+      return octave_value ();
+    }
 
   ComplexMatrix result (nr, nc);
   for (int j = 0; j < nc; j++)
     for (int i = 0; i < nr; i++)
       {
 	double btmp = b (i, j);
 	if (xisint (btmp))
 	  result (i, j) = pow (a (i, j), (int) btmp);
@@ -730,35 +720,43 @@ elem_xpow (const ComplexMatrix& a, const
   return result;
 }
 
 // -*- 11 -*-
 octave_value
 elem_xpow (const ComplexMatrix& a, const Complex& b)
 {
   int nr = a.rows ();
-  int nc = a.columns ();
+  int nc = a.cols ();
 
   ComplexMatrix result (nr, nc);
   for (int j = 0; j < nc; j++)
     for (int i = 0; i < nr; i++)
       result (i, j) = pow (a (i, j), b);
 
   return result;
 }
 
 // -*- 12 -*-
 octave_value
 elem_xpow (const ComplexMatrix& a, const ComplexMatrix& b)
 {
   int nr = a.rows ();
-  int nc = a.columns ();
+  int nc = a.cols ();
+
+  int b_nr = b.rows ();
+  int b_nc = b.cols ();
+
+  if (nr != b_nr || nc != b_nc)
+    {
+      gripe_nonconformant ("operator .^", nr, nc, b_nr, b_nc);
+      return octave_value ();
+    }
 
   ComplexMatrix result (nr, nc);
-
   for (int j = 0; j < nc; j++)
     for (int i = 0; i < nr; i++)
       result (i, j) = pow (a (i, j), b (i, j));
 
   return result;
 }
 
 /*
