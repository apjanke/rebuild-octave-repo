# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1236337211 -3600
#      Fri Mar 06 12:00:11 2009 +0100
# Node ID a2878ba31a9e94e76389ccfd77100080fc2cc375
# Parent  485eabc0cfece1d0b97ce7d21c72ca9a3e7de62a
add diag & perm matrix query methods to octave_value

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,34 @@
+2009-03-06  Jaroslav Hajek  <highegg@gmail.com>
+
+	* ov.h (octave_value::diag_matrix_value,
+	octave_value::complex_diag_matrix_value,
+	octave_value::float_diag_matrix_value,
+	octave_value::float_complex_diag_matrix_value,
+	octave_value::perm_matrix_value): New methods.
+
+	* ov-base.cc (octave_base_value::diag_matrix_value,
+	octave_base_value::complex_diag_matrix_value,
+	octave_base_value::float_diag_matrix_value,
+	octave_base_value::float_complex_diag_matrix_value,
+	octave_base_value::perm_matrix_value): New virtual methods.
+	
+	* ov-base.h: Declare them.
+
+	* ov-base-diag.h (octave_base_diag::diag_matrix_value,
+	octave_base_diag::complex_diag_matrix_value,
+	octave_base_diag::float_diag_matrix_value,
+	octave_base_diag::float_complex_diag_matrix_value,
+	octave_base_diag::perm_matrix_value): Remove declarations.
+
+	* DLD-FUNCTIONS/inv.cc (Finv): Simplify handling diag & perm matrices.
+	* DLD-FUNCTIONS/pinv.cc (Fpinv): Ditto.
+	* DLD-FUNCTIONS/det.cc (Fdet): Ditto.
+
 2009-03-05  Jaroslav Hajek  <highegg@gmail.com>
 	
 	* ls-hdf5.cc (add_hdf5_data): Handle diag & perm matrices.
 
 2009-03-05  John W. Eaton  <jwe@octave.org>
 
 	* pt-cell.cc, pt-cell.h (tree_cell::dup): Now const.
 	* comment-list.cc, comment-list.h (octave_comment_list::dup): Ditto.
diff --git a/src/DLD-FUNCTIONS/det.cc b/src/DLD-FUNCTIONS/det.cc
--- a/src/DLD-FUNCTIONS/det.cc
+++ b/src/DLD-FUNCTIONS/det.cc
@@ -90,66 +90,58 @@ if requested.\n\
       gripe_square_matrix_required ("det");
       return retval;
     }
 
   bool isfloat = arg.is_single_type ();
 
   if (arg.is_diag_matrix ())
     {
-      const octave_base_value& a = arg.get_rep ();
       if (arg.is_complex_type ())
         {
           if (isfloat)
             {
-              CAST_CONV_ARG (const octave_float_complex_diag_matrix&);
-              retval(0) = v.float_complex_diag_matrix_value ().determinant ().value ();
+              retval(0) = arg.float_complex_diag_matrix_value ().determinant ().value ();
               if (nargout > 1)
-                retval(1) = v.float_complex_diag_matrix_value ().rcond ();
+                retval(1) = arg.float_complex_diag_matrix_value ().rcond ();
             }
           else
             {
-              CAST_CONV_ARG (const octave_complex_diag_matrix&);
-              retval(0) = v.complex_diag_matrix_value ().determinant ().value ();
+              retval(0) = arg.complex_diag_matrix_value ().determinant ().value ();
               if (nargout > 1)
-                retval(1) = v.complex_diag_matrix_value ().rcond ();
+                retval(1) = arg.complex_diag_matrix_value ().rcond ();
             }
         }
       else
         {
           if (isfloat)
             {
-              CAST_CONV_ARG (const octave_float_diag_matrix&);
-              retval(0) = v.float_diag_matrix_value ().determinant ().value ();
+              retval(0) = arg.float_diag_matrix_value ().determinant ().value ();
               if (nargout > 1)
-                retval(1) = v.float_diag_matrix_value ().rcond ();
+                retval(1) = arg.float_diag_matrix_value ().rcond ();
             }
           else
             {
-              CAST_CONV_ARG (const octave_diag_matrix&);
-              retval(0) = v.diag_matrix_value ().determinant ().value ();
+              retval(0) = arg.diag_matrix_value ().determinant ().value ();
               if (nargout > 1)
-                retval(1) = v.diag_matrix_value ().rcond ();
+                retval(1) = arg.diag_matrix_value ().rcond ();
             }
         }
     }
   else if (arg.is_perm_matrix ())
     {
-      const octave_base_value& a = arg.get_rep ();
       if (isfloat)
         {
-          CAST_CONV_ARG (const octave_float_perm_matrix&);
-          retval(0) = static_cast<float> (v.perm_matrix_value ().determinant ());
+          retval(0) = static_cast<float> (arg.perm_matrix_value ().determinant ());
           if (nargout > 1)
             retval(1) = 1.0;
         }
       else
         {
-          CAST_CONV_ARG (const octave_perm_matrix&);
-          retval(0) = static_cast<double> (v.perm_matrix_value ().determinant ());
+          retval(0) = static_cast<double> (arg.perm_matrix_value ().determinant ());
           if (nargout > 1)
             retval(1) = 1.0f;
         }
     }
   else if (arg.is_single_type ())
     {
       if (arg.is_real_type ())
 	{
diff --git a/src/DLD-FUNCTIONS/inv.cc b/src/DLD-FUNCTIONS/inv.cc
--- a/src/DLD-FUNCTIONS/inv.cc
+++ b/src/DLD-FUNCTIONS/inv.cc
@@ -86,68 +86,56 @@ be avoided. It is significantly more acc
   double rcond = 0.0;
   float frcond = 0.0;
   bool isfloat = arg.is_single_type ();
 
   if (arg.is_diag_matrix ())
     {
       rcond = 1.0;
       frcond = 1.0f;
-      const octave_base_value& a = arg.get_rep ();
       if (arg.is_complex_type ())
         {
           if (isfloat)
             {
-              CAST_CONV_ARG (const octave_float_complex_diag_matrix&);
-              result = v.float_complex_diag_matrix_value ().inverse (info);
+              result = arg.float_complex_diag_matrix_value ().inverse (info);
               if (nargout > 1)
-                frcond = v.float_complex_diag_matrix_value ().rcond ();
+                frcond = arg.float_complex_diag_matrix_value ().rcond ();
             }
           else
             {
-              CAST_CONV_ARG (const octave_complex_diag_matrix&);
-              result = v.complex_diag_matrix_value ().inverse (info);
+              result = arg.complex_diag_matrix_value ().inverse (info);
               if (nargout > 1)
-                rcond = v.complex_diag_matrix_value ().rcond ();
+                rcond = arg.complex_diag_matrix_value ().rcond ();
             }
         }
       else
         {
           if (isfloat)
             {
-              CAST_CONV_ARG (const octave_float_diag_matrix&);
-              result = v.float_diag_matrix_value ().inverse (info);
+              result = arg.float_diag_matrix_value ().inverse (info);
               if (nargout > 1)
-                frcond = v.float_diag_matrix_value ().rcond ();
+                frcond = arg.float_diag_matrix_value ().rcond ();
             }
           else
             {
-              CAST_CONV_ARG (const octave_diag_matrix&);
-              result = v.diag_matrix_value ().inverse (info);
+              result = arg.diag_matrix_value ().inverse (info);
               if (nargout > 1)
-                rcond = v.diag_matrix_value ().rcond ();
+                rcond = arg.diag_matrix_value ().rcond ();
             }
         }
     }
   else if (arg.is_perm_matrix ())
     {
       rcond = 1.0;
       frcond = 1.0f;
       info = 0;
-      const octave_base_value& a = arg.get_rep ();
       if (isfloat)
-        {
-          CAST_CONV_ARG (const octave_float_perm_matrix&);
-          result = v.perm_matrix_value ().inverse ();
-        }
+        result = octave_value (arg.perm_matrix_value ().inverse (), true);
       else
-        {
-          CAST_CONV_ARG (const octave_perm_matrix&);
-          result = v.perm_matrix_value ().inverse ();
-        }
+        result = arg.perm_matrix_value ().inverse ();
     }
   else if (isfloat)
     {
       if (arg.is_real_type ())
 	{
 	  FloatMatrix m = arg.float_matrix_value ();
 	  if (! error_state)
 	    {
diff --git a/src/DLD-FUNCTIONS/pinv.cc b/src/DLD-FUNCTIONS/pinv.cc
--- a/src/DLD-FUNCTIONS/pinv.cc
+++ b/src/DLD-FUNCTIONS/pinv.cc
@@ -74,57 +74,37 @@ where @code{sigma_max (@var{x})} is the 
 
   bool isfloat = arg.is_single_type ();
 
   if (arg.is_diag_matrix ())
     {
       if (nargin == 2)
         warning ("pinv: tol is ignored for diagonal matrices");
 
-      const octave_base_value& a = arg.get_rep ();
       if (arg.is_complex_type ())
         {
           if (isfloat)
-            {
-              CAST_CONV_ARG (const octave_float_complex_diag_matrix&);
-              retval = v.float_complex_diag_matrix_value ().pseudo_inverse ();
-            }
+            retval = arg.float_complex_diag_matrix_value ().pseudo_inverse ();
           else
-            {
-              CAST_CONV_ARG (const octave_complex_diag_matrix&);
-              retval = v.complex_diag_matrix_value ().pseudo_inverse ();
-            }
+            retval = arg.complex_diag_matrix_value ().pseudo_inverse ();
         }
       else
         {
           if (isfloat)
-            {
-              CAST_CONV_ARG (const octave_float_diag_matrix&);
-              retval = v.float_diag_matrix_value ().pseudo_inverse ();
-            }
+            retval = arg.float_diag_matrix_value ().pseudo_inverse ();
           else
-            {
-              CAST_CONV_ARG (const octave_diag_matrix&);
-              retval = v.diag_matrix_value ().pseudo_inverse ();
-            }
+            retval = arg.diag_matrix_value ().pseudo_inverse ();
         }
     }
   else if (arg.is_perm_matrix ())
     {
-      const octave_base_value& a = arg.get_rep ();
       if (isfloat)
-        {
-          CAST_CONV_ARG (const octave_float_perm_matrix&);
-          retval = v.perm_matrix_value ().inverse ();
-        }
+        retval = octave_value (arg.perm_matrix_value ().inverse (), true);
       else
-        {
-          CAST_CONV_ARG (const octave_perm_matrix&);
-          retval = v.perm_matrix_value ().inverse ();
-        }
+        retval = arg.perm_matrix_value ().inverse ();
     }
   else if (isfloat)
     {
       float tol = 0.0;
       if (nargin == 2)
 	tol = args(1).float_value ();
 
       if (error_state)
diff --git a/src/ov-base-diag.h b/src/ov-base-diag.h
--- a/src/ov-base-diag.h
+++ b/src/ov-base-diag.h
@@ -131,24 +131,16 @@ public:
 
   float float_value (bool = false) const;
 
   double scalar_value (bool frc_str_conv = false) const
     { return double_value (frc_str_conv); }
 
   idx_vector index_vector (void) const;
 
-  virtual DiagMatrix diag_matrix_value (bool = false) const = 0;
-
-  virtual FloatDiagMatrix float_diag_matrix_value (bool = false) const = 0;
-
-  virtual ComplexDiagMatrix complex_diag_matrix_value (bool = false) const = 0;
-
-  virtual FloatComplexDiagMatrix float_complex_diag_matrix_value (bool = false) const = 0;
-
   Matrix matrix_value (bool = false) const;
 
   FloatMatrix float_matrix_value (bool = false) const;
 
   Complex complex_value (bool = false) const;
 
   FloatComplex float_complex_value (bool = false) const;
 
diff --git a/src/ov-base.cc b/src/ov-base.cc
--- a/src/ov-base.cc
+++ b/src/ov-base.cc
@@ -603,16 +603,56 @@ octave_base_value::sparse_complex_matrix
 SparseBoolMatrix
 octave_base_value::sparse_bool_matrix_value (bool) const
 {
   SparseBoolMatrix retval;
   gripe_wrong_type_arg ("octave_base_value::sparse_bool_matrix_value()", type_name ());
   return retval;
 }
 
+DiagMatrix
+octave_base_value::diag_matrix_value (bool) const
+{
+  DiagMatrix retval;
+  gripe_wrong_type_arg ("octave_base_value::diag_matrix_value()", type_name ());
+  return retval;
+}
+
+FloatDiagMatrix
+octave_base_value::float_diag_matrix_value (bool) const
+{
+  FloatDiagMatrix retval;
+  gripe_wrong_type_arg ("octave_base_value::float_diag_matrix_value()", type_name ());
+  return retval;
+}
+
+ComplexDiagMatrix
+octave_base_value::complex_diag_matrix_value (bool) const
+{
+  ComplexDiagMatrix retval;
+  gripe_wrong_type_arg ("octave_base_value::complex_diag_matrix_value()", type_name ());
+  return retval;
+}
+
+FloatComplexDiagMatrix
+octave_base_value::float_complex_diag_matrix_value (bool) const
+{
+  FloatComplexDiagMatrix retval;
+  gripe_wrong_type_arg ("octave_base_value::float_complex_diag_matrix_value()", type_name ());
+  return retval;
+}
+
+PermMatrix
+octave_base_value::perm_matrix_value (void) const
+{
+  PermMatrix retval;
+  gripe_wrong_type_arg ("octave_base_value::perm_matrix_value()", type_name ());
+  return retval;
+}
+
 octave_int8
 octave_base_value::int8_scalar_value (void) const
 {
   octave_int8 retval;
   gripe_wrong_type_arg ("octave_base_value::int8_scalar_value()",
 			type_name ());
   return retval;
 }
diff --git a/src/ov-base.h b/src/ov-base.h
--- a/src/ov-base.h
+++ b/src/ov-base.h
@@ -391,16 +391,26 @@ public:
   virtual charNDArray char_array_value (bool = false) const;
 
   virtual SparseMatrix sparse_matrix_value (bool = false) const;
 
   virtual SparseComplexMatrix sparse_complex_matrix_value (bool = false) const;
 
   virtual SparseBoolMatrix sparse_bool_matrix_value (bool = false) const;
 
+  virtual DiagMatrix diag_matrix_value (bool = false) const;
+
+  virtual FloatDiagMatrix float_diag_matrix_value (bool = false) const;
+  
+  virtual ComplexDiagMatrix complex_diag_matrix_value (bool = false) const;
+  
+  virtual FloatComplexDiagMatrix float_complex_diag_matrix_value (bool = false) const;
+  
+  virtual PermMatrix perm_matrix_value (void) const;
+
   virtual octave_int8 int8_scalar_value (void) const;
 
   virtual octave_int16 int16_scalar_value (void) const;
 
   virtual octave_int32 int32_scalar_value (void) const;
 
   virtual octave_int64 int64_scalar_value (void) const;
 
diff --git a/src/ov.h b/src/ov.h
--- a/src/ov.h
+++ b/src/ov.h
@@ -735,16 +735,31 @@ public:
     { return rep->sparse_matrix_value (frc_str_conv); }
 
   SparseComplexMatrix sparse_complex_matrix_value (bool frc_str_conv = false) const
     { return rep->sparse_complex_matrix_value (frc_str_conv); }
 
   SparseBoolMatrix sparse_bool_matrix_value (bool frc_str_conv = false) const
     { return rep->sparse_bool_matrix_value (frc_str_conv); }
 
+  DiagMatrix diag_matrix_value (bool force = false) const
+    { return rep->diag_matrix_value (force); }
+  
+  FloatDiagMatrix float_diag_matrix_value (bool force = false) const
+    { return rep->float_diag_matrix_value (force); }
+  
+  ComplexDiagMatrix complex_diag_matrix_value (bool force = false) const
+    { return rep->complex_diag_matrix_value (force); }
+  
+  FloatComplexDiagMatrix float_complex_diag_matrix_value (bool force = false) const
+    { return rep->float_complex_diag_matrix_value (force); }
+
+  PermMatrix perm_matrix_value (void) const
+    { return rep->perm_matrix_value (); }
+  
   octave_int8 int8_scalar_value (void) const
     { return rep->int8_scalar_value (); }
 
   octave_int16 int16_scalar_value (void) const
     { return rep->int16_scalar_value (); }
 
   octave_int32 int32_scalar_value (void) const
     { return rep->int32_scalar_value (); }
