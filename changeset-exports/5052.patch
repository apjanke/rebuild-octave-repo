# HG changeset patch
# User jwe
# Date 1098211248 0
#      Tue Oct 19 18:40:48 2004 +0000
# Node ID c6ef19da4b24238f6e177c8b1129708783d08b34
# Parent  cab27aa905c42c98a093c0aa05d2b39a795bc774
[project @ 2004-10-19 18:40:48 by jwe]

diff --git a/liboctave/Array.cc b/liboctave/Array.cc
--- a/liboctave/Array.cc
+++ b/liboctave/Array.cc
@@ -2935,31 +2935,29 @@ assignN (Array<LT>& lhs, const Array<RT>
       dim_vector frozen_len;
 
       int orig_lhs_dims_len = lhs_dims_len;
 
       bool orig_empty = lhs_dims.all_zero ();
 
       if (n_idx < lhs_dims_len)
 	{
-	  // Collapse dimensions beyond last index.
+	  // Collapse dimensions beyond last index.  Note that we
+	  // delay resizing LHS until we know that the assignment will
+	  // succeed.
 
 	  if (liboctave_wfi_flag && ! (idx(n_idx-1).is_colon ()))
 	    (*current_liboctave_warning_handler)
 	      ("fewer indices than dimensions for N-d array");
 
 	  for (int i = n_idx; i < lhs_dims_len; i++)
 	    lhs_dims(n_idx-1) *= lhs_dims(i);
 
 	  lhs_dims.resize (n_idx);
 
-	  lhs.resize (lhs_dims);
-
-	  lhs_dims = lhs.dims ();
-
 	  lhs_dims_len = lhs_dims.length ();
 	}
 
       // Resize.
 
       dim_vector new_dims;
       new_dims.resize (n_idx);
 
@@ -3005,34 +3003,39 @@ assignN (Array<LT>& lhs, const Array<RT>
 	      (*current_liboctave_error_handler)
 		("array index %d (= %d) for assignment requires invalid resizing operation",
 		 n_idx, new_dims(n_idx-1));
 
 	      retval = 0;
 	    }
 	  else
 	    {
+	      // Determine final dimensions for LHS and reset the
+	      // current size of the LHS.  Note that we delay actually
+	      // resizing LHS until we know that the assignment will
+	      // succeed.
+
 	      if (n_idx < orig_lhs_dims_len)
 		{
 		  for (int i = 0; i < n_idx-1; i++)
 		    final_lhs_dims(i) = new_dims(i);
 		}
 	      else
 		final_lhs_dims = new_dims;
 
-	      lhs.resize_and_fill (new_dims, rfv);
-
-	      lhs_dims = lhs.dims ();
+	      lhs_dims = new_dims;
 
 	      lhs_dims_len = lhs_dims.length ();
 
 	      frozen_len = freeze (idx, lhs_dims, true);
 
 	      if (rhs_is_scalar)
 		{
+		  lhs.resize_and_fill (new_dims, rfv);
+
 		  if  (! final_lhs_dims.any_zero ())
 		    {
 		      int n = Array<LT>::get_size (frozen_len);
 
 		      Array<int> result_idx (lhs_dims_len, 0);
 
 		      RT scalar = rhs.elem (0);
 
@@ -3080,16 +3083,18 @@ assignN (Array<LT>& lhs, const Array<RT>
 		    {
 		      (*current_liboctave_error_handler)
 			("A(IDX-LIST) = X: X must be a scalar or size of X must equal number of elements indexed by IDX-LIST");
 
 			  retval = 0;
 		    }
 		  else
 		    {
+		      lhs.resize_and_fill (new_dims, rfv);
+
 		      if  (! final_lhs_dims.any_zero ())
 			{
 			  int n = Array<LT>::get_size (frozen_len);
 
 			  Array<int> result_idx (lhs_dims_len, 0);
 
 			  for (int i = 0; i < n; i++)
 			    {
@@ -3100,20 +3105,22 @@ assignN (Array<LT>& lhs, const Array<RT>
 			      increment_index (result_idx, frozen_len);
 			    }
 			}
 		    }
 		}
 	    }
 	}
 
-      lhs.resize (final_lhs_dims);
+      if (retval != 0)
+	lhs.resize (final_lhs_dims);
     }
 
-  lhs.chop_trailing_singletons ();
+  if (retval != 0)
+    lhs.chop_trailing_singletons ();
 
   lhs.clear_index ();
 
   return retval;
 }
 
 template <class T>
 void
diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,12 @@
+2004-10-19  John W. Eaton  <jwe@octave.org>
+
+	* Array.cc (assignN): Avoid resizing if assignment will fail.
+
 2004-10-18  John W. Eaton  <jwe@octave.org>
 
 	* Array.cc (assign2): Save result of squeeze operation.
 	Squeeze if ndims is > 2, not if length of RHS vector is > 2.
 
 2004-10-11  David Bateman <dbateman@free.fr>
 
 	* oct-fftw.cc (class octave_fftw_planner): Add inplace[2] to
