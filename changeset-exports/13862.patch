# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1321262044 18000
#      Mon Nov 14 04:14:04 2011 -0500
# Node ID 6d7e133a4bedcb88799172882edcf658c9b10982
# Parent  4d8317915db9224291001f389e4960caa71de2d6
compatibility fixes for __voronoi__

* __voronoi__.cc (F__voronoi__): Use Fv option for Qhull, not FV.
Delete unused variable fidx.  Count vertices to get size of NI array.
Skip facets that contain only one point.  Always return AtInf.  Use a
list of accumulate vertex lists.  Pad the cell array of facet vertex
lists with empty matrices if there are fewer facets than points.

diff --git a/src/DLD-FUNCTIONS/__voronoi__.cc b/src/DLD-FUNCTIONS/__voronoi__.cc
--- a/src/DLD-FUNCTIONS/__voronoi__.cc
+++ b/src/DLD-FUNCTIONS/__voronoi__.cc
@@ -31,16 +31,18 @@ qhull command
 */
 
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
 #include <cstdio>
 
+#include <list>
+
 #include "lo-ieee.h"
 
 #include "Cell.h"
 #include "defun-dld.h"
 #include "error.h"
 #include "oct-obj.h"
 
 #ifdef HAVE_QHULL
@@ -48,17 +50,17 @@ extern "C" {
 #include <qhull/qhull_a.h>
 }
 
 #ifdef NEED_QHULL_VERSION
 char qh_version[] = "__voronoi__.oct 2007-07-24";
 #endif
 #endif
 
-DEFUN_DLD (__voronoi__, args, nargout,
+DEFUN_DLD (__voronoi__, args, ,
         "-*- texinfo -*-\n\
 @deftypefn  {Loadable Function} {@var{C}, @var{F} =} __voronoi__ (@var{pts})\n\
 @deftypefnx {Loadable Function} {@var{C}, @var{F} =} __voronoi__ (@var{pts}, @var{options})\n\
 @deftypefnx {Loadable Function} {@var{C}, @var{F}, @var{Inf_Pts} =} __voronoi__ (@dots{})\n\
 Undocumented internal function.\n\
 @end deftypefn")
 {
   octave_value_list retval;
@@ -108,30 +110,40 @@ Undocumented internal function.\n\
 
   // Replace the 0 pointer with stdout for debugging information
   FILE *outfile = 0;
   FILE *errfile = stderr;
 
   // Qhull flags argument is not const char*
   OCTAVE_LOCAL_BUFFER (char, flags, 12 + options.length ());
 
-  sprintf (flags, "qhull v FV %s", options.c_str ());
+  sprintf (flags, "qhull v Fv %s", options.c_str ());
 
   int exitcode = qh_new_qhull (dim, np, pt_array, 
                                ismalloc, flags, outfile, errfile);
   if (! exitcode) 
     {
       facetT *facet;
       vertexT *vertex;
 
-      octave_idx_type i = 0, n = 1, k = 0, m = 0, fidx = 0, j = 0, r = 0;
-      OCTAVE_LOCAL_BUFFER (octave_idx_type, ni, np);
+      octave_idx_type i = 0, n = 1, k = 0, m = 0, j = 0, r = 0;
 
-      for (i = 0; i < np; i++)
+      // Count number of vertices for size of NI.  FIXME -- does Qhull
+      // have a way to query this value directly?
+      octave_idx_type nv = 0;
+      FORALLvertices
+        {
+          nv++;
+        }
+
+      OCTAVE_LOCAL_BUFFER (octave_idx_type, ni, nv);
+
+      for (i = 0; i < nv; i++)
         ni[i] = 0;
+
       qh_setvoronoi_all ();
 
       bool infinity_seen = false;
       facetT *neighbor, **neighborp;
       coordT *voronoi_vertex;
 
       FORALLfacets
         {
@@ -157,40 +169,51 @@ Undocumented internal function.\n\
                   ni[k]++;
                 }
               else if (! infinity_seen)
                 {
                   infinity_seen = true;
                   ni[k]++;
                 }
             }
+
           k++;
         }
 
       Matrix v (n, dim);
       for (octave_idx_type d = 0; d < dim; d++)
         v(0,d) = octave_Inf;
 
-      boolMatrix AtInf (np, 1, false);
-      octave_value_list F (np, octave_value ());
+      boolMatrix AtInf (nv, 1, false);
+      std::list<RowVector> F;
       k = 0;
       i = 0;
 
       FORALLfacets
         {
           facet->seen = false;
         }
 
       FORALLvertices
         {
           if (qh hull_dim == 3)
-            qh_order_vertexneighbors(vertex);
+            qh_order_vertexneighbors (vertex);
 
           infinity_seen = false;
-          RowVector facet_list (ni[k++]);
+
+          octave_idx_type n_vertices = ni[k++];
+
+          // Qhull seems to sometimes produce "facets" with a single
+          // vertex.  Is that a bug?  How can a facet have just one
+          // vertex?  Let's skip it.
+
+          if (n_vertices == 1)
+            continue;
+
+          RowVector facet_list (n_vertices);
           m = 0;
 
           FOREACHneighbor_(vertex)
             {
               if (neighbor->upperdelaunay)
                 {
                   if (! infinity_seen)
                     {
@@ -199,41 +222,46 @@ Undocumented internal function.\n\
                       AtInf(j) = true;
                     }
                 }
               else
                 {
                   if (! neighbor->seen)
                     {
                       voronoi_vertex = neighbor->center;
-                      fidx = neighbor->id;
                       i++;
                       for (octave_idx_type d = 0; d < dim; d++)
                         {
                           v(i,d) = *(voronoi_vertex++);
                         }
                       neighbor->seen = true;
                       neighbor->visitid = i;
                     }
                   facet_list(m++) = neighbor->visitid + 1;
                 }
             }
-          F(r++) = facet_list;
+          F.push_back (facet_list);
           j++;
         }
 
-      Cell C(r, 1);
-      for (i = 0; i < r; i++)
-        C.elem (i) = F(i);
+      // For compatibility with Matlab, pad the cell array of vertex
+      // lists with empty matrices if there are fewer facets than
+      // points.
+      octave_idx_type f_len = F.size ();
+      Cell C(np > f_len ? np : f_len, 1);
 
-      if (nargout == 3)
-        {
-          AtInf.resize (r, 1);
-          retval(2) = AtInf;
-        }
+      i = 0;
+      for (std::list<RowVector>::const_iterator it = F.begin ();
+           it != F.end (); it++)
+        C.elem (i++) = *it;
+
+      F.clear ();
+
+      AtInf.resize (f_len, 1);
+      retval(2) = AtInf;
       retval(1) = C;
       retval(0) = v;
     }
   else
     error ("__voronoi__: qhull failed");
 
   // free memory from Qhull
   qh_freeqhull (! qh_ALL);
