# HG changeset patch
# User Rik <rik@octave.org>
# Date 1480000577 28800
#      Thu Nov 24 07:16:17 2016 -0800
# Node ID b7bf2d6d8e5554a537902e1271b468e378dd0af6
# Parent  c5f496b8352c67f3cdfc4b2d130d2571a5b1ed3e
condest.m: Overhaul function.

* condest.m: Rename output 'est' to 'cest' to match documentation.
Eliminate unnecessary default_t variable.  Use names of bad inuts in error()
messages.  Reorder code to have input validation first.  Add FIXME notes.
Add parentheses around conditions in switch statements.  Add BIST tests
for input validation.

diff --git a/scripts/linear-algebra/condest.m b/scripts/linear-algebra/condest.m
--- a/scripts/linear-algebra/condest.m
+++ b/scripts/linear-algebra/condest.m
@@ -135,45 +135,43 @@
 ## OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
 ## OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 ## SUCH DAMAGE.
 
 ## Author: Jason Riedy <ejr@cs.berkeley.edu>
 ## Keywords: linear-algebra norm estimation
 ## Version: 0.2
 
-function [est, v] = condest (varargin)
+function [cest, v] = condest (varargin)
 
   if (nargin < 1 || nargin > 6)
     print_usage ();
   endif
 
-  default_t = 5;
-
   if ((nargin == 3 && is_function_handle (varargin{3}))
       || (nargin == 4 && is_function_handle (varargin{3})
           && isnumeric (varargin{4})))
     ## onenormest syntax, deprecated in 4.2
-    [est, v] = condest_legacy (varargin{:});
-    return
+    [cest, v] = condest_legacy (varargin{:});
+    return;
   elseif ((nargin >= 5) && is_function_handle (varargin{4}))
     ## onenormest syntax, deprecated in 4.2
-    [est, v] = condest_legacy (varargin{:});
-    return
+    [cest, v] = condest_legacy (varargin{:});
+    return;
   endif
 
   have_A = false;
   have_t = false;
   have_apply_normest1 = false;
   have_solve_normest1 = false;
 
   if (isnumeric (varargin{1}))
     A = varargin{1};
     if (! issquare (A))
-      error ("condest: matrix must be square");
+      error ("condest: A must be square");
     endif
     n = rows (A);
     have_A = true;
     if (nargin > 1)
       if (is_function_handle (varargin{2}))
         solve = varargin{2};
         have_solve_normest1 = true;
         if (nargin > 2)
@@ -183,34 +181,33 @@ function [est, v] = condest (varargin)
       else
         t = varargin{2};
         have_t = true;
         real_op = isreal (A);
       endif
     else
       real_op = isreal (A);
     endif
-  else # varargin{1} is function handle
+  else  # varargin{1} is a function handle
+    if (nargin == 1)
+      error("condest: must provide SOLVEFCN when using AFCN");
+    endif
     apply = varargin{1};
-    if (nargin > 1)
-      solve = varargin{2};
-      have_apply_normest1 = true;
-      have_solve_normest1 = true;
-      n = apply ("dim", [], varargin{4:end});
-      if (nargin > 2)
-        t = varargin{3};
-        have_t = true;
-      endif
-    else
-      error("condest: wrong number of input parameters");
+    have_apply_normest1 = true;
+    solve = varargin{2};
+    have_solve_normest1 = true;
+    n = apply ("dim", [], varargin{4:end});
+    if (nargin > 2)
+      t = varargin{3};
+      have_t = true;
     endif
   endif
 
   if (! have_t)
-    t = min (n, default_t);
+    t = min (n, 5);
   endif
 
   if (! have_solve_normest1)
      ## prepare solve in normest1 form
     if (issparse (A))
       [L, U, P, Pc] = lu (A);
       solve = @(flag, x) solve_sparse (flag, x, n, real_op, L, U, P, Pc);
     else
@@ -221,17 +218,17 @@ function [est, v] = condest (varargin)
 
   if (have_A)
     Anorm = norm (A, 1);
   else
     Anorm = normest1 (apply, t, [], varargin{4:end});
   endif
   [Ainv_norm, v, w] = normest1 (solve, t, [], varargin{4:end});
 
-  est = Anorm * Ainv_norm;
+  cest = Anorm * Ainv_norm;
   v = w / norm (w, 1);
 
 endfunction
 
 function value = solve_sparse (flag, x, n, real_op, L , U , P , Pc)
   switch (flag)
     case "dim"
       value = n;
@@ -252,17 +249,18 @@ function value = solve_not_sparse (flag,
       value = real_op;
     case "notransp"
       value = P' * (L' \ (U' \ x));
     case "transp"
       value = U \ (L \ (P * x));
   endswitch
 endfunction
 
-function [est, v] = condest_legacy (varargin) # to be removed after 4.2
+## FIXME: remove after 4.4
+function [cest, v] = condest_legacy (varargin)
 
   persistent warned = false;
   if (! warned)
     warned = true;
     warning ("Octave:deprecated-function",
              "condest: this syntax is deprecated, call condest (A, SOLVEFUN, T, P1, P2, ...) instead.");
   endif
 
@@ -324,56 +322,57 @@ function [est, v] = condest_legacy (vara
       solve_t = @(x) P' * (L' \ (U' \ (Pc * x)));
     else
       [L, U, P] = lu (A);
       solve = @(x) U \ (L \ (P*x));
       solve_t = @(x) P' * (L' \ (U' \ x));
     endif
   endif
 
-  ## We already warned about this usage being deprecated.  Don't
-  ## warn again about onenormest.
+  ## We already warned about this usage being deprecated.
+  ## Don't warn again about onenormest.
   warning ("off", "Octave:deprecated-function", "local");
 
   if (have_A)
     Anorm = norm (A, 1);
   else
     Anorm = onenormest (apply, apply_t, n, t);
   endif
 
   [Ainv_norm, v, w] = onenormest (solve, solve_t, n, t);
 
-  est = Anorm * Ainv_norm;
+  cest = Anorm * Ainv_norm;
   v = w / norm (w, 1);
 
 endfunction
 
-## Yes, these test bounds are really loose.  There's
-## enough randomization to trigger odd cases with hilb().
+
+## Note: These test bounds are very loose.  There is enough randomization to
+## trigger odd cases with hilb().
 
 %!function value = apply_fun (flag, x, A, m)
 %!  if (nargin == 3)
 %!    m = 1;
 %!  endif
-%!  switch flag
+%!  switch (flag)
 %!    case "dim"
 %!      value = length (A);
 %!    case "real"
 %!      value = isreal (A);
 %!    case "notransp"
 %!      value = x; for i = 1:m, value = A * value;, endfor
 %!    case "transp"
 %!      value = x; for i = 1:m, value = A' * value;, endfor
 %!  endswitch
 %!endfunction
 %!function value = solve_fun (flag, x, A, m)
 %!  if (nargin == 3)
 %!    m = 1;
 %!  endif
-%!  switch flag
+%!  switch (flag)
 %!    case "dim"
 %!      value = length (A);
 %!    case "real"
 %!      value = isreal (A);
 %!    case "notransp"
 %!      value = x; for i = 1:m, value = A \ value;, endfor;
 %!    case "transp"
 %!      value = x; for i = 1:m, value = A' \ value;, endfor;
@@ -382,68 +381,76 @@ endfunction
 
 %!test
 %! N = 6;
 %! A = hilb (N);
 %! cA = condest (A);
 %! cA_test = norm (inv (A), 1) * norm (A, 1);
 %! assert (cA, cA_test, -2^-8);
 
-%!test # to be removed after 4.2
+%!test # to be removed after 4.4
 %! warning ("off", "Octave:deprecated-function", "local");
 %! N = 6;
 %! A = hilb (N);
 %! solve = @(x) A\x; solve_t = @(x) A'\x;
 %! cA = condest (A, solve, solve_t);
 %! cA_test = norm (inv (A), 1) * norm (A, 1);
 %! assert (cA, cA_test, -2^-8);
 
-%!test # to be removed after 4.2
+%!test # to be removed after 4.4
 %! warning ("off", "Octave:deprecated-function", "local");
 %! N = 6;
 %! A = hilb (N);
 %! apply = @(x) A*x; apply_t = @(x) A'*x;
 %! solve = @(x) A\x; solve_t = @(x) A'\x;
 %! cA = condest (apply, apply_t, solve, solve_t, N);
 %! cA_test = norm (inv (A), 1) * norm (A, 1);
 %! assert (cA, cA_test, -2^-6);
 
-%!test # to be removed after 4.2
+%!test # to be removed after 4.4
 %! warning ("off", "Octave:deprecated-function", "local");
 %! N = 6;
 %! A = hilb (N);
 %! apply = @(x) A*x; apply_t = @(x) A'*x;
 %! solve = @(x) A\x; solve_t = @(x) A'\x;
 %! cA = condest (apply, apply_t, solve, solve_t, N, 2);
 %! cA_test = norm (inv (A), 1) * norm (A, 1);
 %! assert (cA, cA_test, -2^-6);
 
 %!test
 %! warning ("off", "Octave:nearly-singular-matrix", "local");
 %! N = 12;
 %! A = hilb (N);
-%! [rcondA, v] = condest (A);
+%! [~, v] = condest (A);
 %! x = A*v;
 %! assert (norm (x, inf), 0, eps);
 
 %!test
 %! N = 6;
 %! A = hilb (N);
 %! solve = @(flag, x) solve_fun (flag, x, A);
 %! cA = condest (A, solve);
 %! cA_test = norm (inv (A), 1) * norm (A, 1);
 %! assert (cA, cA_test, -2^-6);
+
 %!test
 %! N = 6;
 %! A = hilb (N);
 %! apply = @(flag, x) apply_fun (flag, x, A);
 %! solve = @(flag, x) solve_fun (flag, x, A);
 %! cA = condest (apply, solve);
 %! cA_test = norm (inv (A), 1) * norm (A, 1);
 %! assert (cA, cA_test, -2^-6);
 
 %!test # parameters for apply and solve functions
 %! N = 6;
 %! A = hilb (N);
 %! m = 2;
 %! cA = condest (@apply_fun, @solve_fun, [], A, m);
 %! cA_test = norm (inv (A^2), 1) * norm (A^2, 1);
 %! assert (cA, cA_test, -2^-6);
+
+## Test input validation
+%!error condest ()
+%!error condest (1,2,3,4,5,6,7)
+%!error <A must be square> condest ([1 2])
+%!error <must provide SOLVEFCN when using AFCN> condest (@sin)
+
