# HG changeset patch
# User Rik <rik@octave.org>
# Date 1431237009 25200
#      Sat May 09 22:50:09 2015 -0700
# Branch stable
# Node ID 777f26aa8e3e428922afe9487bead2c4b4b8f8c9
# Parent  4f45eaf839089b0ef9eec9645aba9d4a876152f3
doc: Update more docstrings to have one sentence summary as first line.
Reviewed plot/ and gui/ in scripts directory.

* scripts/gui/errordlg.m, scripts/gui/helpdlg.m, scripts/gui/inputdlg.m,
scripts/gui/listdlg.m, scripts/gui/msgbox.m,
scripts/gui/private/__get_funcname__.m,
scripts/gui/private/__uiobject_split_args__.m, scripts/gui/questdlg.m,
scripts/gui/uigetdir.m, scripts/gui/uigetfile.m, scripts/gui/uiwait.m,
scripts/gui/waitbar.m, scripts/gui/warndlg.m,
scripts/plot/appearance/annotation.m, scripts/plot/appearance/axis.m,
scripts/plot/appearance/box.m, scripts/plot/appearance/caxis.m,
scripts/plot/appearance/datetick.m, scripts/plot/appearance/hidden.m,
scripts/plot/appearance/legend.m, scripts/plot/appearance/xlim.m,
scripts/plot/appearance/ylim.m, scripts/plot/appearance/zlim.m,
scripts/plot/draw/area.m, scripts/plot/draw/comet.m,
scripts/plot/draw/comet3.m, scripts/plot/draw/contour.m,
scripts/plot/draw/contourf.m, scripts/plot/draw/isocolors.m,
scripts/plot/draw/isonormals.m, scripts/plot/draw/isosurface.m,
scripts/plot/draw/plotmatrix.m, scripts/plot/draw/quiver.m,
scripts/plot/draw/quiver3.m, scripts/plot/draw/ribbon.m,
scripts/plot/draw/semilogxerr.m, scripts/plot/draw/semilogyerr.m,
scripts/plot/draw/sphere.m, scripts/plot/draw/surfl.m,
scripts/plot/draw/tetramesh.m, scripts/plot/util/allchild.m,
scripts/plot/util/ancestor.m, scripts/plot/util/axes.m,
scripts/plot/util/colstyle.m, scripts/plot/util/frame2im.m,
scripts/plot/util/gnuplot_binary.in, scripts/plot/util/hgsave.m,
scripts/plot/util/im2frame.m, scripts/plot/util/isaxes.m,
scripts/plot/util/isfigure.m, scripts/plot/util/linkaxes.m,
scripts/plot/util/ndgrid.m, scripts/plot/util/pan.m, scripts/plot/util/print.m,
scripts/plot/util/printd.m, scripts/plot/util/private/__add_default_menu__.m,
scripts/plot/util/rotate.m, scripts/plot/util/rotate3d.m,
scripts/plot/util/saveas.m, scripts/plot/util/struct2hdl.m,
scripts/plot/util/subplot.m, scripts/plot/util/zoom.m:
Update more docstrings to have one sentence summary as first line.

diff --git a/scripts/gui/errordlg.m b/scripts/gui/errordlg.m
--- a/scripts/gui/errordlg.m
+++ b/scripts/gui/errordlg.m
@@ -17,20 +17,21 @@
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {@var{h} =} errordlg (@var{msg})
 ## @deftypefnx {Function File} {@var{h} =} errordlg (@var{msg}, @var{title})
 ## @deftypefnx {Function File} {@var{h} =} errordlg (@var{msg}, @var{title}, @var{createmode})
 ## Display @var{msg} using an error dialog box.
 ##
-## The message may have multiple lines separated by newline characters
-## ("\n"), or it may be a cellstr array with one element for each
-## line.  The optional input @var{title} (character string) can be used to
-## set the dialog caption.  The default title is @qcode{"Error Dialog"}.
+## The message may have multiple lines separated by newline characters ("\n"),
+## or it may be a cellstr array with one element for each line.
+##
+## The optional input @var{title} (character string) can be used to set the
+## dialog caption.  The default title is @qcode{"Error Dialog"}.
 ##
 ## The return value is always 1.
 ##
 ## Compatibility Note: The optional argument @var{createmode} is accepted for
 ## @sc{matlab} compatibility, but is not implemented.
 ##
 ## @seealso{helpdlg, inputdlg, listdlg, msgbox, questdlg, warndlg}
 ## @end deftypefn
diff --git a/scripts/gui/helpdlg.m b/scripts/gui/helpdlg.m
--- a/scripts/gui/helpdlg.m
+++ b/scripts/gui/helpdlg.m
@@ -18,17 +18,19 @@
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {@var{h} =} helpdlg (@var{msg})
 ## @deftypefnx {Function File} {@var{h} =} helpdlg (@var{msg}, @var{title})
 ## Display @var{msg} in a help dialog box.
 ##
 ## The message may have multiple lines separated by newline characters
 ## ("\n"), or it may be a cellstr array with one element for each
-## line.  The optional input @var{title} (character string) can be used to
+## line.
+##
+## The optional input @var{title} (character string) can be used to
 ## set the dialog caption.  The default title is @qcode{"Help Dialog"}.
 ##
 ## The return value is always 1.
 ## @seealso{errordlg, inputdlg, listdlg, msgbox, questdlg, warndlg}
 ## @end deftypefn
 
 function retval = helpdlg (msg, title = "Help Dialog")
 
diff --git a/scripts/gui/inputdlg.m b/scripts/gui/inputdlg.m
--- a/scripts/gui/inputdlg.m
+++ b/scripts/gui/inputdlg.m
@@ -16,49 +16,44 @@
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {@var{cstr} =} inputdlg (@var{prompt})
 ## @deftypefnx {Function File} {@var{cstr} =} inputdlg (@var{prompt}, @var{title})
 ## @deftypefnx {Function File} {@var{cstr} =} inputdlg (@var{prompt}, @var{title}, @var{rowscols})
 ## @deftypefnx {Function File} {@var{cstr} =} inputdlg (@var{prompt}, @var{title}, @var{rowscols}, @var{defaults})
-## Return user input from a multi-textfield dialog box in a cell array
-## of strings, or an empty cell array if the dialog is closed by the
-## Cancel button.
+## Return user input from a multi-textfield dialog box in a cell array of
+## strings, or an empty cell array if the dialog is closed by the Cancel
+## button.
 ##
 ## Inputs:
 ##
 ## @table @var
 ## @item prompt
 ## A cell array with strings labeling each text field.  This input is required.
 ##
 ## @item title
-## String to use for the caption of the dialog.  The default is @qcode{"Input
-## Dialog"}.
+## String to use for the caption of the dialog.  The default is
+## @qcode{"Input Dialog"}.
 ##
 ## @item rowscols
 ## Specifies the size of the text fields and can take three forms:
 ##
 ## @enumerate
-## @item a scalar value which defines the number of rows used for each
-## text field.
+## @item a scalar value which defines the number of rows used for each text field.
 ##
-## @item a vector which defines the individual number of rows
-## used for each text field.
+## @item a vector which defines the individual number of rows used for each text field.
 ##
-## @item a matrix which defines the individual number of rows and
-## columns used for each text field.  In the matrix each row describes
-## a single text field.  The first column specifies the number of input
-## rows to use and the second column specifies the text field width.
+## @item a matrix which defines the individual number of rows and columns used for each text field.  In the matrix each row describes a single text field.  The first column specifies the number of input rows to use and the second column specifies the text field width.
 ## @end enumerate
 ##
 ## @item defaults
-## A list of default values to place in each text fields.  It must be
-## a cell array of strings with the same size as @var{prompt}.
+## A list of default values to place in each text fields.  It must be a cell
+## array of strings with the same size as @var{prompt}.
 ## @end table
 ## @seealso{errordlg, helpdlg, listdlg, msgbox, questdlg, warndlg}
 ## @end deftypefn
 
 function cstr = inputdlg (prompt, title = "Input Dialog", varargin)
 
   if (nargin < 1 || nargin > 4)
     print_usage ();
diff --git a/scripts/gui/listdlg.m b/scripts/gui/listdlg.m
--- a/scripts/gui/listdlg.m
+++ b/scripts/gui/listdlg.m
@@ -13,50 +13,51 @@
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {[@var{sel}, @var{ok}] =} listdlg (@var{key}, @var{value}, @dots{})
-## Return user inputs from a list dialog box in a vector of
-## selection indices @var{sel} and a flag @var{ok} indicating how the
-## user closed the dialog box.  The value of @var{ok} is 1 if the user
-## closed the box with the OK button, otherwise it is 0 and @var{sel} is
-## empty.
+## Return user inputs from a list dialog box in a vector of selection indices
+## @var{sel} and a flag @var{ok} indicating how the user closed the dialog
+## box.
+##
+## The value of @var{ok} is 1 if the user closed the box with the OK button,
+## otherwise it is 0 and @var{sel} is empty.
 ##
 ## The indices in @var{sel} are 1-based.
 ##
 ## The arguments are specified in form of @var{key}, @var{value} pairs.
 ## The @qcode{"ListString"} argument pair must be specified.
 ##
 ## Valid @var{key} and @var{value} pairs are:
 ##
 ## @table @asis
 ## @item @qcode{"ListString"}
 ## a cell array of strings comprising the content of the list.
 ##
 ## @item @qcode{"SelectionMode"}
 ## can be either @qcode{"Single"} or @qcode{"Multiple"} (default).
 ##
 ## @item @qcode{"ListSize"}
-## a vector with two elements @var{width} and @var{height} defining
-## the size of the list field in pixels.  Default is [160 300].
+## a vector with two elements @var{width} and @var{height} defining the size
+## of the list field in pixels.  Default is [160 300].
 ##
 ## @item @qcode{"InitialValue"}
-## a vector containing 1-based indices of preselected elements.  Default
-## is 1 (first item).
+## a vector containing 1-based indices of preselected elements.
+## Default is 1 (first item).
 ##
 ## @item @qcode{"Name"}
 ## a string to be used as the dialog caption.  Default is "".
 ##
 ## @item @qcode{"PromptString"}
-## a cell array of strings to be displayed above the list field.  Default
-## is @{@}.
+## a cell array of strings to be displayed above the list field.
+## Default is @{@}.
 ##
 ## @item @qcode{"OKString"}
 ## a string used to label the OK button.  Default is @qcode{"OK"}.
 ##
 ## @item @qcode{"CancelString"}
 ## a string used to label the Cancel button.  Default is @qcode{"Cancel"}.
 ## @end table
 ##
diff --git a/scripts/gui/msgbox.m b/scripts/gui/msgbox.m
--- a/scripts/gui/msgbox.m
+++ b/scripts/gui/msgbox.m
@@ -18,30 +18,31 @@
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {@var{h} =} msgbox (@var{msg})
 ## @deftypefnx {Function File} {@var{h} =} msgbox (@var{msg}, @var{title})
 ## @deftypefnx {Function File} {@var{h} =} msgbox (@var{msg}, @var{title}, @var{icon})
 ## @deftypefnx {Function File} {@var{h} =} msgbox (@dots{}, @var{createmode})
 ## Display @var{msg} using a message dialog box.
 ##
-## The message may have multiple lines separated by newline characters
-## ("\n"), or it may be a cellstr array with one element for each
-## line.  The optional input @var{title} (character string) can be used to
-## decorate the dialog caption.
+## The message may have multiple lines separated by newline characters ("\n"),
+## or it may be a cellstr array with one element for each line.
+##
+## The optional input @var{title} (character string) can be used to decorate
+## the dialog caption.
 ##
 ## The optional argument @var{icon} selects a dialog icon.
-## It can be one of @qcode{"none"} (default), @qcode{"error"},
-## @qcode{"help"}, or @qcode{"warn"}.
+## It can be one of @qcode{"none"} (default), @qcode{"error"}, @qcode{"help"},
+## or @qcode{"warn"}.
 ##
 ## The return value is always 1.
 ##
 ## Compatibility Note: The optional argument @var{createmode} is accepted for
 ## @sc{matlab} compatibility, but is not implemented.
-#
+## 
 ## @seealso{errordlg, helpdlg, inputdlg, listdlg, questdlg, warndlg}
 ## @end deftypefn
 
 function retval = msgbox (msg, title = "", varargin)
 
   if (nargin < 1 || nargin > 4)
     print_usage ();
   endif
diff --git a/scripts/gui/private/__get_funcname__.m b/scripts/gui/private/__get_funcname__.m
--- a/scripts/gui/private/__get_funcname__.m
+++ b/scripts/gui/private/__get_funcname__.m
@@ -15,17 +15,17 @@
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {@var{funcname} =} __get_funcname__ (@var{basename})
 ## Internal function.
 ##
-## Build function name for the current graphics toolkit according to schema
+## Build function name for the current graphics toolkit according to the schema
 ## __[basename]_[graphics_toolkit]__, use fltk as default.
 ## @end deftypefn
 
 ## Author: Andreas Weber
 
 function funcname = __get_funcname__ (basename)
 
   if (! __octave_link_enabled__ ())
diff --git a/scripts/gui/private/__uiobject_split_args__.m b/scripts/gui/private/__uiobject_split_args__.m
--- a/scripts/gui/private/__uiobject_split_args__.m
+++ b/scripts/gui/private/__uiobject_split_args__.m
@@ -13,16 +13,17 @@
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {[@var{p}, @var{args}] =} __uiobject_split_args__ (@var{who}, @var{args}, @var{parent_type}, @var{use_gcf})
+## Undocumented internal function.
 ## @end deftypefn
 
 ## Author: goffioul
 
 function [parent, args] = __uiobject_split_args__ (who, in_args, parent_type = {}, use_gcf = 1)
 
   parent = [];
   args = {};
diff --git a/scripts/gui/questdlg.m b/scripts/gui/questdlg.m
--- a/scripts/gui/questdlg.m
+++ b/scripts/gui/questdlg.m
@@ -17,37 +17,36 @@
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {@var{btn} =} questdlg (@var{msg})
 ## @deftypefnx {Function File} {@var{btn} =} questdlg (@var{msg}, @var{title})
 ## @deftypefnx {Function File} {@var{btn} =} questdlg (@var{msg}, @var{title}, @var{default})
 ## @deftypefnx {Function File} {@var{btn} =} questdlg (@var{msg}, @var{title}, @var{btn1}, @var{btn2}, @var{default})
 ## @deftypefnx {Function File} {@var{btn} =} questdlg (@var{msg}, @var{title}, @var{btn1}, @var{btn2}, @var{btn3}, @var{default})
-## Display @var{msg} using a question dialog box and return the caption
-## of the activated button.
+## Display @var{msg} using a question dialog box and return the caption of
+## the activated button.
 ##
 ## The dialog may contain two or three buttons which will all close the dialog.
 ##
-## The message may have multiple lines separated by newline characters
-## ("\n"), or it may be a cellstr array with one element for each
-## line.  The optional @var{title} (character string) can be used to
-## decorate the dialog caption.
+## The message may have multiple lines separated by newline characters ("\n"),
+## or it may be a cellstr array with one element for each line.
+##
+## The optional @var{title} (character string) can be used to decorate the
+## dialog caption.
 ##
-## The string @var{default} identifies the default button,
-## which is activated by pressing the @key{ENTER} key.
-## It must match one of the strings given in @var{btn1}, @var{btn2}, or
-## @var{btn3}.
+## The string @var{default} identifies the default button, which is activated
+## by pressing the @key{ENTER} key.  It must match one of the strings given
+## in @var{btn1}, @var{btn2}, or @var{btn3}.
 ##
-## If only @var{msg} and @var{title} are specified, three buttons with
-## the default captions @qcode{"Yes"}, @qcode{"No"}, and @qcode{"Cancel"} are
-## used.
+## If only @var{msg} and @var{title} are specified, three buttons with the
+## default captions @qcode{"Yes"}, @qcode{"No"}, and @qcode{"Cancel"} are used.
 ##
-## If only two button captions, @var{btn1} and @var{btn2}, are specified
-## the dialog will have only these two buttons.
+## If only two button captions, @var{btn1} and @var{btn2}, are specified the
+## dialog will have only these two buttons.
 ##
 ## @seealso{errordlg, helpdlg, inputdlg, listdlg, warndlg}
 ## @end deftypefn
 
 function btn = questdlg (msg, title = "Question Dialog", varargin)
 
   if (nargin < 1 || nargin > 6)
     print_usage ();
diff --git a/scripts/gui/uigetdir.m b/scripts/gui/uigetdir.m
--- a/scripts/gui/uigetdir.m
+++ b/scripts/gui/uigetdir.m
@@ -18,16 +18,17 @@
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {@var{dirname} =} uigetdir ()
 ## @deftypefnx {Function File} {@var{dirname} =} uigetdir (@var{init_path})
 ## @deftypefnx {Function File} {@var{dirname} =} uigetdir (@var{init_path}, @var{dialog_name})
 ## Open a GUI dialog for selecting a directory.
 ##
 ## If @var{init_path} is not given the current working directory is used.
+##
 ## @var{dialog_name} may be used to customize the dialog title.
 ## @seealso{uigetfile, uiputfile}
 ## @end deftypefn
 
 ## Author: Kai Habel
 
 function dirname = uigetdir (init_path = pwd, dialog_name = "Select Directory to Open")
 
diff --git a/scripts/gui/uigetfile.m b/scripts/gui/uigetfile.m
--- a/scripts/gui/uigetfile.m
+++ b/scripts/gui/uigetfile.m
@@ -35,28 +35,29 @@
 ## If a filename is given then the file extension is extracted and used as
 ## filter.  In addition, the path is selected as current path and the filename
 ## is selected as default file.  Example: @code{uigetfile ("myfun.m")}
 ##
 ## @item A single file extension @qcode{"*.ext"}
 ## Example: @code{uigetfile ("*.ext")}
 ##
 ## @item A 2-column cell array
-## containing a file extension in the first column and a brief description
-## in the second column.
+## containing a file extension in the first column and a brief description in
+## the second column.
 ## Example: @code{uigetfile (@{"*.ext", "My Description";"*.xyz",
 ## "XYZ-Format"@})}
 ##
 ## The filter string can also contain a semicolon separated list of filter
 ## extensions.
 ## Example: @code{uigetfile (@{"*.gif;*.png;*.jpg", "Supported Picture
 ## Formats"@})}
 ## @end table
 ##
 ## @var{dialog_name} can be used to customize the dialog title.
+##
 ## If @var{default_file} is given then it will be selected in the GUI dialog.
 ## If, in addition, a path is given it is also used as current path.
 ##
 ## The screen position of the GUI dialog can be set using the
 ## @qcode{"Position"} key and a 2-element vector containing the pixel
 ## coordinates.  Two or more files can be selected when setting the
 ## @qcode{"MultiSelect"} key to @qcode{"on"}.  In that case @var{fname} is a
 ## cell array containing the files.
diff --git a/scripts/gui/uiwait.m b/scripts/gui/uiwait.m
--- a/scripts/gui/uiwait.m
+++ b/scripts/gui/uiwait.m
@@ -15,18 +15,18 @@
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {} uiwait
 ## @deftypefnx {Function File} {} uiwait (@var{h})
 ## @deftypefnx {Function File} {} uiwait (@var{h}, @var{timeout})
-## Suspend program execution until the figure with handle @var{h} is
-## deleted or @code{uiresume} is called.
+## Suspend program execution until the figure with handle @var{h} is deleted
+## or @code{uiresume} is called.
 ##
 ## When no figure handle is specified this function uses the current figure.
 ## If the figure handle is invalid or there is no current figure, this
 ## functions returns immediately.
 ##
 ## When specified, @var{timeout} defines the number of seconds to wait
 ## for the figure deletion or the @code{uiresume} call.  The timeout value
 ## must be at least 1.  If a smaller value is specified, a warning is issued
diff --git a/scripts/gui/waitbar.m b/scripts/gui/waitbar.m
--- a/scripts/gui/waitbar.m
+++ b/scripts/gui/waitbar.m
@@ -21,19 +21,22 @@
 ## @deftypefnx {Function File} {@var{h} =} waitbar (@var{frac}, @var{msg})
 ## @deftypefnx {Function File} {@var{h} =} waitbar (@dots{}, "FigureProperty", "Value", @dots{})
 ## @deftypefnx {Function File} {} waitbar (@var{frac})
 ## @deftypefnx {Function File} {} waitbar (@var{frac}, @var{hwbar})
 ## @deftypefnx {Function File} {} waitbar (@var{frac}, @var{hwbar}, @var{msg})
 ## Return a handle @var{h} to a new waitbar object.
 ##
 ## The waitbar is filled to fraction @var{frac} which must be in the range
-## [0, 1].  The optional message @var{msg} is centered and displayed above the
-## waitbar.  The appearance of the waitbar figure window can be configured by
-## passing property/value pairs to the function.
+## [0, 1].
+##
+## The optional message @var{msg} is centered and displayed above the waitbar.
+##
+## The appearance of the waitbar figure window can be configured by passing
+## property/value pairs to the function.
 ##
 ## When called with a single input the current waitbar, if it exists, is
 ## updated to the new value @var{frac}.  If there are multiple outstanding
 ## waitbars they can be updated individually by passing the handle @var{hwbar}
 ## of the specific waitbar to modify.
 ## @end deftypefn
 
 ## Author: jwe
diff --git a/scripts/gui/warndlg.m b/scripts/gui/warndlg.m
--- a/scripts/gui/warndlg.m
+++ b/scripts/gui/warndlg.m
@@ -17,20 +17,21 @@
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {@var{h} =} warndlg (@var{msg})
 ## @deftypefnx {Function File} {@var{h} =} warndlg (@var{msg}, @var{title})
 ## @deftypefnx {Function File} {@var{h} =} warndlg (@var{msg}, @var{title}, @var{createmode})
 ## Display @var{msg} using a warning dialog box.
 ##
-## The message may have multiple lines separated by newline characters
-## ("\n"), or it may be a cellstr array with one element for each
-## line.  The optional input @var{title} (character string) can be used to
-## set the dialog caption.  The default title is @qcode{"Warning Dialog"}.
+## The message may have multiple lines separated by newline characters ("\n"),
+## or it may be a cellstr array with one element for each line.
+##
+## The optional input @var{title} (character string) can be used to set the
+## dialog caption.  The default title is @qcode{"Warning Dialog"}.
 ##
 ## The return value is always 1.
 ##
 ## Compatibility Note: The optional argument @var{createmode} is accepted for
 ## @sc{matlab} compatibility, but is not implemented.
 ##
 ## @seealso{helpdlg, inputdlg, listdlg, questdlg}
 ## @end deftypefn
diff --git a/scripts/plot/appearance/annotation.m b/scripts/plot/appearance/annotation.m
--- a/scripts/plot/appearance/annotation.m
+++ b/scripts/plot/appearance/annotation.m
@@ -140,17 +140,17 @@
 ##
 ## @item  @qcode{"ellipse"}
 ##  Construct an ellipse.  @var{pos} specifies the
 ##  @qcode{"position"} property of the annotation.
 ##
 ##  See @qcode{"rectangle"} annotations for customization.
 ## @end table
 ##
-## @seealso{xlabel, title}
+## @seealso{xlabel, title, legend, colorbar}
 ## @end deftypefn
 
 function varargout = annotation (varargin)
 
   objtype = "";
   hf = [];
   lims = [];
   x = y = [];
diff --git a/scripts/plot/appearance/axis.m b/scripts/plot/appearance/axis.m
--- a/scripts/plot/appearance/axis.m
+++ b/scripts/plot/appearance/axis.m
@@ -34,34 +34,32 @@
 ## -Inf and Inf may be used to indicate that the limit should automatically be
 ## computed based on the data in the axis.
 ##
 ## Without any arguments, @code{axis} turns autoscaling on.
 ##
 ## With one output argument, @code{@var{limits} = axis} returns the current
 ## axis limits.
 ##
-## The vector argument specifying limits is optional, and additional
-## string arguments may be used to specify various axis properties.  For
-## example,
+## The vector argument specifying limits is optional, and additional string
+## arguments may be used to specify various axis properties.  For example,
 ##
 ## @example
 ## axis ([1, 2, 3, 4], "square");
 ## @end example
 ##
 ## @noindent
 ## forces a square aspect ratio, and
 ##
 ## @example
 ## axis ("tic", "labely");
 ## @end example
 ##
 ## @noindent
-## turns tic marks on for all axes and tic mark labels on for the y-axis
-## only.
+## turns tic marks on for all axes and tic mark labels on for the y-axis only.
 ##
 ## @noindent
 ## The following options control the aspect ratio of the axes.
 ##
 ## @table @asis
 ## @item @qcode{"square"}
 ## Force a square aspect ratio.
 ##
@@ -72,18 +70,18 @@
 ## Restore default aspect ratio.
 ## @end table
 ##
 ## @noindent
 ## The following options control the way axis limits are interpreted.
 ##
 ## @table @asis
 ## @item @qcode{"auto"}
-## Set the specified axes to have nice limits around the data
-## or all if no axes are specified.
+## Set the specified axes to have nice limits around the data or all if no
+## axes are specified.
 ##
 ## @item @qcode{"manual"}
 ## Fix the current axes limits.
 ##
 ## @item @qcode{"tight"}
 ## Fix axes to the limits of the data.
 ##
 ## @item @qcode{"image"}
@@ -96,22 +94,22 @@
 ## @table @asis
 ## @item @qcode{"on"}
 ## Turn tic marks and labels on for all axes.
 ##
 ## @item @qcode{"off"}
 ## Turn tic marks off for all axes.
 ##
 ## @item @qcode{"tic[xyz]"}
-## Turn tic marks on for all axes, or turn them on for the
-## specified axes and off for the remainder.
+## Turn tic marks on for all axes, or turn them on for the specified axes and
+## off for the remainder.
 ##
 ## @item @qcode{"label[xyz]"}
-## Turn tic labels on for all axes, or turn them on for the
-## specified axes and off for the remainder.
+## Turn tic labels on for all axes, or turn them on for the specified axes
+## and off for the remainder.
 ##
 ## @item @qcode{"nolabel"}
 ## Turn tic labels off for all axes.
 ## @end table
 ##
 ## Note, if there are no tic marks for an axis, there can be no labels.
 ##
 ## @noindent
@@ -120,18 +118,18 @@
 ## @table @asis
 ## @item @qcode{"ij"}
 ## Reverse y-axis, so lower values are nearer the top.
 ##
 ## @item @qcode{"xy"}
 ## Restore y-axis, so higher values are nearer the top.
 ## @end table
 ##
-## If the first argument @var{hax} is an axes handle, then operate on
-## this axes rather than the current axes returned by @code{gca}.
+## If the first argument @var{hax} is an axes handle, then operate on this
+## axes rather than the current axes returned by @code{gca}.
 ##
 ## @seealso{xlim, ylim, zlim, daspect, pbaspect, box, grid}
 ## @end deftypefn
 
 ## Author: jwe
 
 function limits = axis (varargin)
 
diff --git a/scripts/plot/appearance/box.m b/scripts/plot/appearance/box.m
--- a/scripts/plot/appearance/box.m
+++ b/scripts/plot/appearance/box.m
@@ -21,18 +21,18 @@
 ## @deftypefnx {Command} {} box off
 ## @deftypefnx {Command} {} box
 ## @deftypefnx {Function File} {} box (@var{hax}, @dots{})
 ## Control display of the axis border.
 ##
 ## The argument may be either @qcode{"on"} or @qcode{"off"}.  If it is
 ## omitted, the current box state is toggled.
 ##
-## If the first argument @var{hax} is an axes handle, then operate on
-## this axis rather than the current axes returned by @code{gca}.
+## If the first argument @var{hax} is an axes handle, then operate on this
+## axis rather than the current axes returned by @code{gca}.
 ## @seealso{axis, grid}
 ## @end deftypefn
 
 ## Author: jwe
 
 function box (varargin)
 
   [hax, varargin, nargs] = __plt_get_axis_arg__ ("box", varargin{:});
diff --git a/scripts/plot/appearance/caxis.m b/scripts/plot/appearance/caxis.m
--- a/scripts/plot/appearance/caxis.m
+++ b/scripts/plot/appearance/caxis.m
@@ -19,20 +19,20 @@
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {} caxis ([cmin cmax])
 ## @deftypefnx {Function File} {} caxis ("auto")
 ## @deftypefnx {Function File} {} caxis ("manual")
 ## @deftypefnx {Function File} {} caxis (@var{hax}, @dots{})
 ## @deftypefnx {Function File} {@var{limits} =} caxis ()
 ## Query or set color axis limits for plots.
 ##
-## The limits argument should be a 2-element vector specifying the
-## lower and upper limits to assign to the first and last value in the
-## colormap.  Data values outside this range are clamped to the first and last
-## colormap entries.
+## The limits argument should be a 2-element vector specifying the lower and
+## upper limits to assign to the first and last value in the colormap.  Data
+## values outside this range are clamped to the first and last colormap
+## entries.
 ##
 ## If the @qcode{"auto"} option is given then automatic colormap limits are
 ## applied.  The automatic algorithm sets @var{cmin} to the minimum data value
 ## and @var{cmax} to the maximum data value.  If @qcode{"manual"} is specified
 ## then the @qcode{"climmode"} property is set to @qcode{"manual"} and the
 ## numeric values in the @qcode{"clim"} property are used for limits.
 ##
 ## If the first argument @var{hax} is an axes handle, then operate on
diff --git a/scripts/plot/appearance/datetick.m b/scripts/plot/appearance/datetick.m
--- a/scripts/plot/appearance/datetick.m
+++ b/scripts/plot/appearance/datetick.m
@@ -18,20 +18,23 @@
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {} datetick ()
 ## @deftypefnx {Function File} {} datetick (@var{form})
 ## @deftypefnx {Function File} {} datetick (@var{axis}, @var{form})
 ## @deftypefnx {Function File} {} datetick (@dots{}, "keeplimits")
 ## @deftypefnx {Function File} {} datetick (@dots{}, "keepticks")
 ## @deftypefnx {Function File} {} datetick (@var{hax}, @dots{})
-## Add date formatted tick labels to an axis.  The axis to apply the
-## ticks to is determined by @var{axis} which can take the values @qcode{"x"},
-## @qcode{"y"}, or @qcode{"z"}.  The default value is @qcode{"x"}.  The
-## formatting of the labels is determined by the variable @var{form}, which
+## Add date formatted tick labels to an axis.
+##
+## The axis to apply the ticks to is determined by @var{axis} which can take
+## the values @qcode{"x"}, @qcode{"y"}, or @qcode{"z"}.  The default value is
+## @qcode{"x"}.
+##
+## The formatting of the labels is determined by the variable @var{form}, which
 ## can either be a string or positive integer that @code{datestr} accepts.
 ## @seealso{datenum, datestr}
 ## @end deftypefn
 
 function datetick (varargin)
 
   [hax, varargin, nargin] = __plt_get_axis_arg__ ("datetick", varargin{:});
 
diff --git a/scripts/plot/appearance/hidden.m b/scripts/plot/appearance/hidden.m
--- a/scripts/plot/appearance/hidden.m
+++ b/scripts/plot/appearance/hidden.m
@@ -19,16 +19,17 @@
 ## -*- texinfo -*-
 ## @deftypefn  {Command} {} hidden
 ## @deftypefnx {Command} {} hidden "on"
 ## @deftypefnx {Command} {} hidden "off"
 ## @deftypefnx {Function File} {@var{mode} =} hidden (@dots{})
 ## Control mesh hidden line removal.
 ##
 ## When called with no argument the hidden line removal state is toggled.
+##
 ## When called with one of the modes @qcode{"on"} or @qcode{"off"} the state
 ## is set accordingly.
 ##
 ## The optional output argument @var{mode} is the current state.
 ##
 ## Hidden Line Removal determines what graphic objects behind a mesh plot
 ## are visible.  The default is for the mesh to be opaque and lines behind
 ## the mesh are not visible.  If hidden line removal is turned off then
diff --git a/scripts/plot/appearance/legend.m b/scripts/plot/appearance/legend.m
--- a/scripts/plot/appearance/legend.m
+++ b/scripts/plot/appearance/legend.m
@@ -51,18 +51,18 @@
 ## @item @tab northeast @tab right top (default)
 ## @item @tab northwest @tab left top
 ## @item @tab southeast @tab right bottom
 ## @item @tab southwest @tab left bottom
 ## @item
 ## @item @tab outside @tab can be appended to any location string
 ## @end multitable
 ##
-## The optional parameter @var{orient} determines if the key elements
-## are placed vertically or horizontally.  The allowed values are
+## The optional parameter @var{orient} determines if the key elements are
+## placed vertically or horizontally.  The allowed values are
 ## @qcode{"vertical"} (default) or @qcode{"horizontal"}.
 ##
 ## The following customizations are available using @var{option}:
 ##
 ## @table @asis
 ## @item @qcode{"show"}
 ##   Show legend on the plot
 ##
diff --git a/scripts/plot/appearance/xlim.m b/scripts/plot/appearance/xlim.m
--- a/scripts/plot/appearance/xlim.m
+++ b/scripts/plot/appearance/xlim.m
@@ -21,18 +21,20 @@
 ## @deftypefnx {Function File} {@var{xmode} =} xlim ("mode")
 ## @deftypefnx {Function File} {} xlim ([@var{x_lo} @var{x_hi}])
 ## @deftypefnx {Function File} {} xlim ("auto")
 ## @deftypefnx {Function File} {} xlim ("manual")
 ## @deftypefnx {Function File} {} xlim (@var{hax}, @dots{})
 ## Query or set the limits of the x-axis for the current plot.
 ##
 ## Called without arguments @code{xlim} returns the x-axis limits of the
-## current plot.  With the input query @qcode{"mode"}, return the current
-## x-limit calculation mode which is either @qcode{"auto"} or @qcode{"manual"}.
+## current plot.
+##
+## With the input query @qcode{"mode"}, return the current x-limit
+## calculation mode which is either @qcode{"auto"} or @qcode{"manual"}.
 ##
 ## If passed a 2-element vector [@var{x_lo} @var{x_hi}], the limits of the
 ## x-axis are set to these values and the mode is set to @qcode{"manual"}.
 ##
 ## The current plotting mode can be changed by using either @qcode{"auto"}
 ## or @qcode{"manual"} as the argument.
 ##
 ## If the first argument @var{hax} is an axes handle, then operate on
diff --git a/scripts/plot/appearance/ylim.m b/scripts/plot/appearance/ylim.m
--- a/scripts/plot/appearance/ylim.m
+++ b/scripts/plot/appearance/ylim.m
@@ -21,17 +21,19 @@
 ## @deftypefnx {Function File} {@var{xmode} =} ylim ("mode")
 ## @deftypefnx {Function File} {} ylim ([@var{y_lo} @var{y_hi}])
 ## @deftypefnx {Function File} {} ylim ("auto")
 ## @deftypefnx {Function File} {} ylim ("manual")
 ## @deftypefnx {Function File} {} ylim (@var{hax}, @dots{})
 ## Query or set the limits of the y-axis for the current plot.
 ##
 ## Called without arguments @code{ylim} returns the y-axis limits of the
-## current plot.  With the input query @qcode{"mode"}, return the current
+## current plot.
+##
+## With the input query @qcode{"mode"}, return the current
 ## y-limit calculation mode which is either @qcode{"auto"} or @qcode{"manual"}.
 ##
 ## If passed a 2-element vector [@var{y_lo} @var{y_hi}], the limits of the
 ## y-axis are set to these values and the mode is set to @qcode{"manual"}.
 ##
 ## The current plotting mode can be changed by using either @qcode{"auto"}
 ## or @qcode{"manual"} as the argument.
 ##
diff --git a/scripts/plot/appearance/zlim.m b/scripts/plot/appearance/zlim.m
--- a/scripts/plot/appearance/zlim.m
+++ b/scripts/plot/appearance/zlim.m
@@ -21,17 +21,19 @@
 ## @deftypefnx {Function File} {@var{xmode} =} zlim ("mode")
 ## @deftypefnx {Function File} {} zlim ([@var{z_lo} @var{z_hi}])
 ## @deftypefnx {Function File} {} zlim ("auto")
 ## @deftypefnx {Function File} {} zlim ("manual")
 ## @deftypefnx {Function File} {} zlim (@var{hax}, @dots{})
 ## Query or set the limits of the z-axis for the current plot.
 ##
 ## Called without arguments @code{zlim} returns the z-axis limits of the
-## current plot.  With the input query @qcode{"mode"}, return the current
+## current plot.
+##
+## With the input query @qcode{"mode"}, return the current
 ## z-limit calculation mode which is either @qcode{"auto"} or @qcode{"manual"}.
 ##
 ## If passed a 2-element vector [@var{z_lo} @var{z_hi}], the limits of the
 ## x-axis are set to these values and the mode is set to @qcode{"manual"}.
 ##
 ## The current plotting mode can be changed by using either @qcode{"auto"}
 ## or @qcode{"manual"} as the argument.
 ##
diff --git a/scripts/plot/draw/area.m b/scripts/plot/draw/area.m
--- a/scripts/plot/draw/area.m
+++ b/scripts/plot/draw/area.m
@@ -21,18 +21,18 @@
 ## @deftypefn  {Function File} {} area (@var{y})
 ## @deftypefnx {Function File} {} area (@var{x}, @var{y})
 ## @deftypefnx {Function File} {} area (@dots{}, @var{lvl})
 ## @deftypefnx {Function File} {} area (@dots{}, @var{prop}, @var{val}, @dots{})
 ## @deftypefnx {Function File} {} area (@var{hax}, @dots{})
 ## @deftypefnx {Function File} {@var{h} =} area (@dots{})
 ## Area plot of the columns of @var{y}.
 ##
-## This plot shows the contributions of each column value to the row sum.  It
-## is functionally similar to @code{plot (@var{x}, cumsum (@var{y}, 2))},
+## This plot shows the contributions of each column value to the row sum.
+## It is functionally similar to @code{plot (@var{x}, cumsum (@var{y}, 2))},
 ## except that the area under the curve is shaded.
 ##
 ## If the @var{x} argument is omitted it defaults to @code{1:rows (@var{y})}.
 ## A value @var{lvl} can be defined that determines where the base level of
 ## the shading under the curve should be defined.  The default level is 0.
 ##
 ## Additional property/value pairs are passed directly to the underlying patch
 ## object.
diff --git a/scripts/plot/draw/comet.m b/scripts/plot/draw/comet.m
--- a/scripts/plot/draw/comet.m
+++ b/scripts/plot/draw/comet.m
@@ -17,18 +17,19 @@
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {} comet (@var{y})
 ## @deftypefnx {Function File} {} comet (@var{x}, @var{y})
 ## @deftypefnx {Function File} {} comet (@var{x}, @var{y}, @var{p})
 ## @deftypefnx {Function File} {} comet (@var{hax}, @dots{})
 ## Produce a simple comet style animation along the trajectory provided by
-## the input coordinate vectors (@var{x}, @var{y}).  If @var{x} is not
-## specified it defaults to the indices of @var{y}.
+## the input coordinate vectors (@var{x}, @var{y}).
+##
+## If @var{x} is not specified it defaults to the indices of @var{y}.
 ##
 ## The speed of the comet may be controlled by @var{p}, which represents the
 ## time each point is displayed before moving to the next one.  The default for
 ## @var{p} is 0.1 seconds.
 ##
 ## If the first argument @var{hax} is an axes handle, then plot into this axis,
 ## rather than the current axes returned by @code{gca}.
 ## @seealso{comet3}
diff --git a/scripts/plot/draw/comet3.m b/scripts/plot/draw/comet3.m
--- a/scripts/plot/draw/comet3.m
+++ b/scripts/plot/draw/comet3.m
@@ -17,18 +17,20 @@
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {} comet3 (@var{z})
 ## @deftypefnx {Function File} {} comet3 (@var{x}, @var{y}, @var{z})
 ## @deftypefnx {Function File} {} comet3 (@var{x}, @var{y}, @var{z}, @var{p})
 ## @deftypefnx {Function File} {} comet3 (@var{hax}, @dots{})
 ## Produce a simple comet style animation along the trajectory provided by
-## the input coordinate vectors (@var{x}, @var{y}, @var{z}).  If only @var{z}
-## is specified then @var{x}, @var{y} default to the indices of @var{z}.
+## the input coordinate vectors (@var{x}, @var{y}, @var{z}).
+##
+## If only @var{z} is specified then @var{x}, @var{y} default to the indices
+## of @var{z}.
 ##
 ## The speed of the comet may be controlled by @var{p}, which represents the
 ## time each point is displayed before moving to the next one.  The default for
 ## @var{p} is 0.1 seconds.
 ##
 ## If the first argument @var{hax} is an axes handle, then plot into this axis,
 ## rather than the current axes returned by @code{gca}.
 ## @seealso{comet}
diff --git a/scripts/plot/draw/contour.m b/scripts/plot/draw/contour.m
--- a/scripts/plot/draw/contour.m
+++ b/scripts/plot/draw/contour.m
@@ -32,17 +32,18 @@
 ##
 ## The appearance of contour lines can be defined with a line style @var{style}
 ## in the same manner as @code{plot}.  Only line style and color are used;
 ## Any markers defined by @var{style} are ignored.
 ##
 ## If the first argument @var{hax} is an axes handle, then plot into this axis,
 ## rather than the current axes returned by @code{gca}.
 ##
-## The optional output @var{c} are the contour levels in @code{contourc} format.
+## The optional output @var{c} contains the contour levels in @code{contourc}
+## format.
 ##
 ## The optional return value @var{h} is a graphics handle to the hggroup
 ## comprising the contour lines.
 ##
 ## Example:
 ##
 ## @example
 ## @group
diff --git a/scripts/plot/draw/contourf.m b/scripts/plot/draw/contourf.m
--- a/scripts/plot/draw/contourf.m
+++ b/scripts/plot/draw/contourf.m
@@ -36,17 +36,18 @@
 ##
 ## The appearance of contour lines can be defined with a line style @var{style}
 ## in the same manner as @code{plot}.  Only line style and color are used;
 ## Any markers defined by @var{style} are ignored.
 ##
 ## If the first argument @var{hax} is an axes handle, then plot into this axis,
 ## rather than the current axes returned by @code{gca}.
 ##
-## The optional output @var{c} are the contour levels in @code{contourc} format.
+## The optional output @var{c} contains the contour levels in @code{contourc}
+## format.
 ##
 ## The optional return value @var{h} is a graphics handle to the hggroup
 ## comprising the contour lines.
 ##
 ## The following example plots filled contours of the @code{peaks} function.
 ##
 ## @example
 ## @group
diff --git a/scripts/plot/draw/isocolors.m b/scripts/plot/draw/isocolors.m
--- a/scripts/plot/draw/isocolors.m
+++ b/scripts/plot/draw/isocolors.m
@@ -19,16 +19,18 @@
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {[@var{cd}] =} isocolors (@var{c}, @var{v})
 ## @deftypefnx {Function File} {[@var{cd}] =} isocolors (@var{x}, @var{y}, @var{z}, @var{c}, @var{v})
 ## @deftypefnx {Function File} {[@var{cd}] =} isocolors (@var{x}, @var{y}, @var{z}, @var{r}, @var{g}, @var{b}, @var{v})
 ## @deftypefnx {Function File} {[@var{cd}] =} isocolors (@var{r}, @var{g}, @var{b}, @var{v})
 ## @deftypefnx {Function File} {[@var{cd}] =} isocolors (@dots{}, @var{p})
 ## @deftypefnx {Function File} {} isocolors (@dots{})
 ##
+## Compute isosurface colors.
+##
 ## If called with one output argument and the first input argument
 ## @var{c} is a three-dimensional array that contains color values and
 ## the second input argument @var{v} keeps the vertices of a geometry
 ## then return a matrix @var{cd} with color data information for the
 ## geometry at computed points
 ## @command{[x, y, z] = meshgrid (1:l, 1:m, 1:n)}.  The output argument
 ## @var{cd} can be taken to manually set FaceVertexCData of a patch.
 ##
diff --git a/scripts/plot/draw/isonormals.m b/scripts/plot/draw/isonormals.m
--- a/scripts/plot/draw/isonormals.m
+++ b/scripts/plot/draw/isonormals.m
@@ -19,16 +19,18 @@
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {[@var{n}] =} isonormals (@var{val}, @var{v})
 ## @deftypefnx {Function File} {[@var{n}] =} isonormals (@var{val}, @var{p})
 ## @deftypefnx {Function File} {[@var{n}] =} isonormals (@var{x}, @var{y}, @var{z}, @var{val}, @var{v})
 ## @deftypefnx {Function File} {[@var{n}] =} isonormals (@var{x}, @var{y}, @var{z}, @var{val}, @var{p})
 ## @deftypefnx {Function File} {[@var{n}] =} isonormals (@dots{}, "negate")
 ## @deftypefnx {Function File} {} isonormals (@dots{}, @var{p})
 ##
+## Calculate normals to an isosurface.
+##
 ## If called with one output argument and the first input argument
 ## @var{val} is a three-dimensional array that contains the data for an
 ## isosurface geometry and the second input argument @var{v} keeps the
 ## vertices of an isosurface then return the normals @var{n} in form of
 ## a matrix with the same size than @var{v} at computed points
 ## @command{[x, y, z] = meshgrid (1:l, 1:m, 1:n)}.  The output argument
 ## @var{n} can be taken to manually set @var{VertexNormals} of a patch.
 ##
diff --git a/scripts/plot/draw/isosurface.m b/scripts/plot/draw/isosurface.m
--- a/scripts/plot/draw/isosurface.m
+++ b/scripts/plot/draw/isosurface.m
@@ -20,16 +20,18 @@
 ## @deftypefn  {Function File} {[@var{fv}] =} isosurface (@var{val}, @var{iso})
 ## @deftypefnx {Function File} {[@var{fv}] =} isosurface (@var{x}, @var{y}, @var{z}, @var{val}, @var{iso})
 ## @deftypefnx {Function File} {[@var{fv}] =} isosurface (@dots{}, "noshare", "verbose")
 ## @deftypefnx {Function File} {[@var{fvc}] =} isosurface (@dots{}, @var{col})
 ## @deftypefnx {Function File} {[@var{f}, @var{v}] =} isosurface (@var{x}, @var{y}, @var{z}, @var{val}, @var{iso})
 ## @deftypefnx {Function File} {[@var{f}, @var{v}, @var{c}] =} isosurface (@var{x}, @var{y}, @var{z}, @var{val}, @var{iso}, @var{col})
 ## @deftypefnx {Function File} {} isosurface (@var{x}, @var{y}, @var{z}, @var{val}, @var{iso}, @var{col}, @var{opt})
 ##
+## Calculate isosurface of 3-D data.
+##
 ## If called with one output argument and the first input argument
 ## @var{val} is a three-dimensional array that contains the data of an
 ## isosurface geometry and the second input argument @var{iso} keeps the
 ## isovalue as a scalar value then return a structure array @var{fv}
 ## that contains the fields @var{Faces} and @var{Vertices} at computed
 ## points @command{[x, y, z] = meshgrid (1:l, 1:m, 1:n)}.  The output
 ## argument @var{fv} can directly be taken as an input argument for the
 ## @command{patch} function.
diff --git a/scripts/plot/draw/plotmatrix.m b/scripts/plot/draw/plotmatrix.m
--- a/scripts/plot/draw/plotmatrix.m
+++ b/scripts/plot/draw/plotmatrix.m
@@ -19,24 +19,24 @@
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {} plotmatrix (@var{x}, @var{y})
 ## @deftypefnx {Function File} {} plotmatrix (@var{x})
 ## @deftypefnx {Function File} {} plotmatrix (@dots{}, @var{style})
 ## @deftypefnx {Function File} {} plotmatrix (@var{hax}, @dots{})
 ## @deftypefnx {Function File} {[@var{h}, @var{ax}, @var{bigax}, @var{p}, @var{pax}] =} plotmatrix (@dots{})
 ## Scatter plot of the columns of one matrix against another.
 ##
-## Given the arguments @var{x} and @var{y}, that have a matching number of
+## Given the arguments @var{x} and @var{y} that have a matching number of
 ## rows, @code{plotmatrix} plots a set of axes corresponding to
 ##
 ## @example
 ## plot (@var{x}(:, i), @var{y}(:, j))
 ## @end example
 ##
-## Given a single argument @var{x} this is equivalent to
+## When called with a single argument @var{x} this is equivalent to
 ##
 ## @example
 ## plotmatrix (@var{x}, @var{x})
 ## @end example
 ##
 ## @noindent
 ## except that the diagonal of the set of axes will be replaced with the
 ## histogram @code{hist (@var{x}(:, i))}.
@@ -44,21 +44,24 @@
 ## The marker to use can be changed with the @var{style} argument, that is a
 ## string defining a marker in the same manner as the @code{plot} command.
 ##
 ## If the first argument @var{hax} is an axes handle, then plot into this axis,
 ## rather than the current axes returned by @code{gca}.
 ##
 ## The optional return value @var{h} provides handles to the individual
 ## graphics objects in the scatter plots, whereas @var{ax} returns the
-## handles to the scatter plot axis objects.  @var{bigax} is a hidden
-## axis object that surrounds the other axes, such that the commands
-## @code{xlabel}, @code{title}, etc., will be associated with this hidden
-## axis.  Finally, @var{p} returns the graphics objects associated with
-## the histogram and @var{pax} the corresponding axes objects.
+## handles to the scatter plot axis objects.
+##
+## @var{bigax} is a hidden axis object that surrounds the other axes, such
+## that the commands @code{xlabel}, @code{title}, etc., will be associated
+## with this hidden axis.
+##
+## Finally, @var{p} returns the graphics objects associated with the histogram
+## and @var{pax} the corresponding axes objects.
 ##
 ## Example:
 ##
 ## @example
 ## plotmatrix (randn (100, 3), "g+")
 ## @end example
 ##
 ## @seealso{scatter, plot}
diff --git a/scripts/plot/draw/quiver.m b/scripts/plot/draw/quiver.m
--- a/scripts/plot/draw/quiver.m
+++ b/scripts/plot/draw/quiver.m
@@ -20,19 +20,21 @@
 ## @deftypefn  {Function File} {} quiver (@var{u}, @var{v})
 ## @deftypefnx {Function File} {} quiver (@var{x}, @var{y}, @var{u}, @var{v})
 ## @deftypefnx {Function File} {} quiver (@dots{}, @var{s})
 ## @deftypefnx {Function File} {} quiver (@dots{}, @var{style})
 ## @deftypefnx {Function File} {} quiver (@dots{}, "filled")
 ## @deftypefnx {Function File} {} quiver (@var{hax}, @dots{})
 ## @deftypefnx {Function File} {@var{h} =} quiver (@dots{})
 ##
+## Plot a 2-D vector field with arrows.
+##
 ## Plot the (@var{u}, @var{v}) components of a vector field in
-## an (@var{x}, @var{y}) meshgrid.  If the grid is uniform, you can
-## specify @var{x} and @var{y} as vectors.
+## an (@var{x}, @var{y}) meshgrid.  If the grid is uniform then @var{x} and
+## @var{y} can be specified as vectors.
 ##
 ## If @var{x} and @var{y} are undefined they are assumed to be
 ## @code{(1:@var{m}, 1:@var{n})} where
 ## @code{[@var{m}, @var{n}] = size (@var{u})}.
 ##
 ## The variable @var{s} is a scalar defining a scaling factor to use for
 ## the arrows of the field relative to the mesh spacing.  A value of 0
 ## disables all scaling.  The default value is 0.9.
diff --git a/scripts/plot/draw/quiver3.m b/scripts/plot/draw/quiver3.m
--- a/scripts/plot/draw/quiver3.m
+++ b/scripts/plot/draw/quiver3.m
@@ -20,19 +20,21 @@
 ## @deftypefn  {Function File} {} quiver3 (@var{u}, @var{v}, @var{w})
 ## @deftypefnx {Function File} {} quiver3 (@var{x}, @var{y}, @var{z}, @var{u}, @var{v}, @var{w})
 ## @deftypefnx {Function File} {} quiver3 (@dots{}, @var{s})
 ## @deftypefnx {Function File} {} quiver3 (@dots{}, @var{style})
 ## @deftypefnx {Function File} {} quiver3 (@dots{}, "filled")
 ## @deftypefnx {Function File} {} quiver3 (@var{hax}, @dots{})
 ## @deftypefnx {Function File} {@var{h} =} quiver3 (@dots{})
 ##
+## Plot a 3-D vector field with arrows.
+## 
 ## Plot the (@var{u}, @var{v}, @var{w}) components of a vector field in
-## an (@var{x}, @var{y}, @var{z}) meshgrid.  If the grid is uniform, you
-## can specify @var{x}, @var{y}, and @var{z} as vectors.
+## an (@var{x}, @var{y}, @var{z}) meshgrid.  If the grid is uniform then
+## @var{x}, @var{y}, and @var{z} can be specified as vectors.
 ##
 ## If @var{x}, @var{y}, and @var{z} are undefined they are assumed to be
 ## @code{(1:@var{m}, 1:@var{n}, 1:@var{p})} where @code{[@var{m}, @var{n}] =
 ## size (@var{u})} and @code{@var{p} = max (size (@var{w}))}.
 ##
 ## The variable @var{s} is a scalar defining a scaling factor to use for
 ## the arrows of the field relative to the mesh spacing.  A value of 0
 ## disables all scaling.  The default value is 0.9.
diff --git a/scripts/plot/draw/ribbon.m b/scripts/plot/draw/ribbon.m
--- a/scripts/plot/draw/ribbon.m
+++ b/scripts/plot/draw/ribbon.m
@@ -17,17 +17,17 @@
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {} ribbon (@var{y})
 ## @deftypefnx {Function File} {} ribbon (@var{x}, @var{y})
 ## @deftypefnx {Function File} {} ribbon (@var{x}, @var{y}, @var{width})
 ## @deftypefnx {Function File} {} ribbon (@var{hax}, @dots{})
 ## @deftypefnx {Function File} {@var{h} =} ribbon (@dots{})
-## Plot a ribbon plot for the columns of @var{y} vs. @var{x}.
+## Draw a ribbon plot for the columns of @var{y} vs. @var{x}.
 ##
 ## The optional parameter @var{width} specifies the width of a single ribbon
 ## (default is 0.75).  If @var{x} is omitted, a vector containing the
 ## row numbers is assumed (@code{1:rows (Y)}).
 ##
 ## If the first argument @var{hax} is an axes handle, then plot into this axis,
 ## rather than the current axes returned by @code{gca}.
 ##
diff --git a/scripts/plot/draw/semilogxerr.m b/scripts/plot/draw/semilogxerr.m
--- a/scripts/plot/draw/semilogxerr.m
+++ b/scripts/plot/draw/semilogxerr.m
@@ -22,18 +22,18 @@
 ## @deftypefnx {Function File} {} semilogxerr (@var{x}, @var{y}, @var{ey})
 ## @deftypefnx {Function File} {} semilogxerr (@var{x}, @var{y}, @var{err}, @var{fmt})
 ## @deftypefnx {Function File} {} semilogxerr (@var{x}, @var{y}, @var{lerr}, @var{uerr}, @var{fmt})
 ## @deftypefnx {Function File} {} semilogxerr (@var{x}, @var{y}, @var{ex}, @var{ey}, @var{fmt})
 ## @deftypefnx {Function File} {} semilogxerr (@var{x}, @var{y}, @var{lx}, @var{ux}, @var{ly}, @var{uy}, @var{fmt})
 ## @deftypefnx {Function File} {} semilogxerr (@var{x1}, @var{y1}, @dots{}, @var{fmt}, @var{xn}, @var{yn}, @dots{})
 ## @deftypefnx {Function File} {} semilogxerr (@var{hax}, @dots{})
 ## @deftypefnx {Function File} {@var{h} =} semilogxerr (@dots{})
-## Produce 2-D plots using a logarithmic scale for the x-axis and
-## errorbars at each data point.
+## Produce 2-D plots using a logarithmic scale for the x-axis and errorbars
+## at each data point.
 ##
 ## Many different combinations of arguments are possible.  The most common
 ## form is
 ##
 ## @example
 ## semilogxerr (@var{x}, @var{y}, @var{ey}, @var{fmt})
 ## @end example
 ##
diff --git a/scripts/plot/draw/semilogyerr.m b/scripts/plot/draw/semilogyerr.m
--- a/scripts/plot/draw/semilogyerr.m
+++ b/scripts/plot/draw/semilogyerr.m
@@ -22,18 +22,18 @@
 ## @deftypefnx {Function File} {} semilogyerr (@var{x}, @var{y}, @var{ey})
 ## @deftypefnx {Function File} {} semilogyerr (@var{x}, @var{y}, @var{err}, @var{fmt})
 ## @deftypefnx {Function File} {} semilogyerr (@var{x}, @var{y}, @var{lerr}, @var{uerr}, @var{fmt})
 ## @deftypefnx {Function File} {} semilogyerr (@var{x}, @var{y}, @var{ex}, @var{ey}, @var{fmt})
 ## @deftypefnx {Function File} {} semilogyerr (@var{x}, @var{y}, @var{lx}, @var{ux}, @var{ly}, @var{uy}, @var{fmt})
 ## @deftypefnx {Function File} {} semilogyerr (@var{x1}, @var{y1}, @dots{}, @var{fmt}, @var{xn}, @var{yn}, @dots{})
 ## @deftypefnx {Function File} {} semilogyerr (@var{hax}, @dots{})
 ## @deftypefnx {Function File} {@var{h} =} semilogyerr (@dots{})
-## Produce 2-D plots using a logarithmic scale for the y-axis and
-## errorbars at each data point.
+## Produce 2-D plots using a logarithmic scale for the y-axis and errorbars
+## at each data point.
 ##
 ## Many different combinations of arguments are possible.  The most common
 ## form is
 ##
 ## @example
 ## semilogyerr (@var{x}, @var{y}, @var{ey}, @var{fmt})
 ## @end example
 ##
diff --git a/scripts/plot/draw/sphere.m b/scripts/plot/draw/sphere.m
--- a/scripts/plot/draw/sphere.m
+++ b/scripts/plot/draw/sphere.m
@@ -19,17 +19,17 @@
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {} sphere ()
 ## @deftypefnx {Function File} {} sphere (@var{n})
 ## @deftypefnx {Function File} {} sphere (@var{hax}, @dots{})
 ## @deftypefnx {Function File} {[@var{x}, @var{y}, @var{z}] =} sphere (@dots{})
 ## Plot a 3-D unit sphere.
 ##
 ## The optional input @var{n} determines the number of faces around the
-## the circumference of the sphere.  The default value is 20.
+## circumference of the sphere.  The default value is 20.
 ##
 ## If the first argument @var{hax} is an axes handle, then plot into this axis,
 ## rather than the current axes returned by @code{gca}.
 ##
 ## If outputs are requested @code{sphere} returns three matrices in
 ## @code{meshgrid} format such that @code{surf (@var{x}, @var{y}, @var{z})}
 ## generates a unit sphere.
 ##
diff --git a/scripts/plot/draw/surfl.m b/scripts/plot/draw/surfl.m
--- a/scripts/plot/draw/surfl.m
+++ b/scripts/plot/draw/surfl.m
@@ -20,17 +20,16 @@
 ## @deftypefn  {Function File} {} surfl (@var{z})
 ## @deftypefnx {Function File} {} surfl (@var{x}, @var{y}, @var{z})
 ## @deftypefnx {Function File} {} surfl (@dots{}, @var{lsrc})
 ## @deftypefnx {Function File} {} surfl (@var{x}, @var{y}, @var{z}, @var{lsrc}, @var{P})
 ## @deftypefnx {Function File} {} surfl (@dots{}, "cdata")
 ## @deftypefnx {Function File} {} surfl (@dots{}, "light")
 ## @deftypefnx {Function File} {} surfl (@var{hax}, @dots{})
 ## @deftypefnx {Function File} {@var{h} =} surfl (@dots{})
-##
 ## Plot a 3-D surface using shading based on various lighting models.
 ##
 ## The surface mesh is plotted using shaded rectangles.  The vertices of the
 ## rectangles [@var{x}, @var{y}] are typically the output of @code{meshgrid}.
 ## over a 2-D rectangular region in the x-y plane.  @var{z} determines the
 ## height above the plane of each vertex.  If only a single @var{z} matrix is
 ## given, then it is plotted over the meshgrid
 ## @code{@var{x} = 1:columns (@var{z}), @var{y} = 1:rows (@var{z})}.
diff --git a/scripts/plot/draw/tetramesh.m b/scripts/plot/draw/tetramesh.m
--- a/scripts/plot/draw/tetramesh.m
+++ b/scripts/plot/draw/tetramesh.m
@@ -18,20 +18,20 @@
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {} tetramesh (@var{T}, @var{X})
 ## @deftypefnx {Function File} {} tetramesh (@var{T}, @var{X}, @var{C})
 ## @deftypefnx {Function File} {} tetramesh (@dots{}, @var{property}, @var{val}, @dots{})
 ## @deftypefnx {Function File} {@var{h} =} tetramesh (@dots{})
 ## Display the tetrahedrons defined in the m-by-4 matrix @var{T} as 3-D patches.
 ##
-## @var{T} is typically the output of a Delaunay triangulation
-## of a 3-D set of points.  Every row of @var{T} contains four indices into
-## the n-by-3 matrix @var{X} of the vertices of a tetrahedron.  Every row in
-## @var{X} represents one point in 3-D space.
+## @var{T} is typically the output of a Delaunay triangulation of a 3-D set
+## of points.  Every row of @var{T} contains four indices into the n-by-3
+## matrix @var{X} of the vertices of a tetrahedron.  Every row in @var{X}
+## represents one point in 3-D space.
 ##
 ## The vector @var{C} specifies the color of each tetrahedron as an index
 ## into the current colormap.  The default value is 1:m where m is the number
 ## of tetrahedrons; the indices are scaled to map to the full range of the
 ## colormap.  If there are more tetrahedrons than colors in the colormap then
 ## the values in @var{C} are cyclically repeated.
 ##
 ## Calling @code{tetramesh (@dots{}, "property", "value", @dots{})} passes all
diff --git a/scripts/plot/util/allchild.m b/scripts/plot/util/allchild.m
--- a/scripts/plot/util/allchild.m
+++ b/scripts/plot/util/allchild.m
@@ -16,20 +16,21 @@
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {@var{h} =} allchild (@var{handles})
 ## Find all children, including hidden children, of a graphics object.
 ##
 ## This function is similar to @code{get (h, "children")}, but also returns
-## hidden objects (HandleVisibility = @qcode{"off"}).  If @var{handles} is a
-## scalar, @var{h} will be a vector.  Otherwise, @var{h} will be a cell
-## matrix of the same size as @var{handles} and each cell will contain a
-## vector of handles.
+## hidden objects (HandleVisibility = @qcode{"off"}).
+##
+## If @var{handles} is a scalar, @var{h} will be a vector.  Otherwise,
+## @var{h} will be a cell matrix of the same size as @var{handles} and each
+## cell will contain a vector of handles.
 ## @seealso{findall, findobj, get, set}
 ## @end deftypefn
 
 ## Author: Bill Denney <bill@denney.ws>
 
 function h = allchild (handles)
 
   if (nargin != 1)
diff --git a/scripts/plot/util/ancestor.m b/scripts/plot/util/ancestor.m
--- a/scripts/plot/util/ancestor.m
+++ b/scripts/plot/util/ancestor.m
@@ -15,19 +15,20 @@
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {@var{parent} =} ancestor (@var{h}, @var{type})
 ## @deftypefnx {Function File} {@var{parent} =} ancestor (@var{h}, @var{type}, "toplevel")
 ## Return the first ancestor of handle object @var{h} whose type matches
-## @var{type}, where @var{type} is a character string.  If @var{type} is a
-## cell array of strings, return the first parent whose type matches
-## any of the given type strings.
+## @var{type}, where @var{type} is a character string.
+##
+## If @var{type} is a cell array of strings, return the first parent whose
+## type matches any of the given type strings.
 ##
 ## If the handle object @var{h} itself is of type @var{type}, return @var{h}.
 ##
 ## If @qcode{"toplevel"} is given as a third argument, return the highest
 ## parent in the object hierarchy that matches the condition, instead
 ## of the first (nearest) one.
 ## @seealso{findobj, findall, allchild}
 ## @end deftypefn
diff --git a/scripts/plot/util/axes.m b/scripts/plot/util/axes.m
--- a/scripts/plot/util/axes.m
+++ b/scripts/plot/util/axes.m
@@ -16,18 +16,18 @@
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {} axes ()
 ## @deftypefnx {Function File} {} axes (@var{property}, @var{value}, @dots{})
 ## @deftypefnx {Function File} {} axes (@var{hax})
 ## @deftypefnx {Function File} {@var{h} =} axes (@dots{})
-## Create an axes object and return a handle to it, or set the current
-## axes to @var{hax}.
+## Create an axes object and return a handle to it, or set the current axes
+## to @var{hax}.
 ##
 ## Called without any arguments, or with @var{property}/@var{value} pairs,
 ## construct a new axes.  For accepted properties and corresponding
 ## values, @pxref{XREFset,,set}.
 ##
 ## Called with a single axes handle argument @var{hax}, the function makes
 ## @var{hax} the current axis.  It also restacks the axes in the
 ## corresponding figure so that @var{hax} is the first entry in the list
diff --git a/scripts/plot/util/colstyle.m b/scripts/plot/util/colstyle.m
--- a/scripts/plot/util/colstyle.m
+++ b/scripts/plot/util/colstyle.m
@@ -14,16 +14,17 @@
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {[@var{style}, @var{color}, @var{marker}, @var{msg}] =} colstyle (@var{linespec})
 ## Parse @var{linespec} and return the line style, color, and markers given.
+##
 ## In the case of an error, the string @var{msg} will return the text of the
 ## error.
 ## @end deftypefn
 
 function [l, c, m, msg] = colstyle (style)
 
   if (nargin != 1)
     print_usage ();
diff --git a/scripts/plot/util/frame2im.m b/scripts/plot/util/frame2im.m
--- a/scripts/plot/util/frame2im.m
+++ b/scripts/plot/util/frame2im.m
@@ -20,18 +20,18 @@
 ## @deftypefn {Function File} {[@var{x}, @var{map}] =} frame2im (@var{f})
 ## Convert movie frame to indexed image.
 ##
 ## A movie frame is simply a struct with the fields @qcode{"cdata"} and
 ## @qcode{"colormap"}.
 ##
 ## Support for N-dimensional images or movies is given when @var{f} is a
 ## struct array.  In such cases, @var{x} will be a @nospell{MxNx1xK or MxNx3xK}
-## for indexed and RGB movies respectively, with each frame concatenated on
-## the 4th dimension.
+## for indexed and RGB movies respectively, with each frame concatenated
+## along the 4th dimension.
 ##
 ## @seealso{im2frame}
 ## @end deftypefn
 
 ## Author: Carnë Draug <carandraug@octave.org>
 
 function [x, map] = frame2im (frame)
 
diff --git a/scripts/plot/util/gnuplot_binary.in b/scripts/plot/util/gnuplot_binary.in
--- a/scripts/plot/util/gnuplot_binary.in
+++ b/scripts/plot/util/gnuplot_binary.in
@@ -14,20 +14,21 @@
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {Loadable Function} {[@var{prog}, @var{args}] =} gnuplot_binary ()
 ## @deftypefnx {Loadable Function} {[@var{old_prog}, @var{old_args}] =} gnuplot_binary (@var{new_prog}, @var{arg1}, @dots{})
-## Query or set the name of the program invoked by the plot command
-## when the graphics toolkit is set to "gnuplot".  Additional arguments to
-## pass to the external plotting program may also be given.
-## The default value is @qcode{"gnuplot"} with no additional arguments.
+## Query or set the name of the program invoked by the plot command when the
+## graphics toolkit is set to "gnuplot".
+##
+## Additional arguments to pass to the external plotting program may also be
+## given.  The default value is @qcode{"gnuplot"} with no additional arguments.
 ## @xref{Installation}.
 ## @seealso{graphics_toolkit}
 ## @end deftypefn
 
 ## Author: jwe
 
 function [prog, args] = gnuplot_binary (new_prog, varargin)
 
diff --git a/scripts/plot/util/hgsave.m b/scripts/plot/util/hgsave.m
--- a/scripts/plot/util/hgsave.m
+++ b/scripts/plot/util/hgsave.m
@@ -19,19 +19,21 @@
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {} hgsave (@var{filename})
 ## @deftypefnx {Function File} {} hgsave (@var{h}, @var{filename})
 ## @deftypefnx {Function File} {} hgsave (@var{h}, @var{filename}, @var{fmt})
 ## Save the graphics handle @var{h} to the file @var{filename} in the format
 ## @var{fmt}.
 ##
 ## If unspecified, @var{h} is the current figure as returned by @code{gcf}.
+##
 ## When @var{filename} does not have an extension the default filename
-## extension @file{.ofig} will be appended.  If present, @var{fmt} should
-## should be one of the following:
+## extension @file{.ofig} will be appended.
+##
+## If present, @var{fmt} should be one of the following:
 ##
 ## @itemize @bullet
 ## @item @option{-binary}, @option{-float-binary}
 ##
 ## @item @option{-hdf5}, @option{-float-hdf5}
 ##
 ## @item @option{-V7}, @option{-v7}, @code{-7}, @option{-mat7-binary}
 ##
diff --git a/scripts/plot/util/im2frame.m b/scripts/plot/util/im2frame.m
--- a/scripts/plot/util/im2frame.m
+++ b/scripts/plot/util/im2frame.m
@@ -20,18 +20,19 @@
 ## @deftypefn  {Function File} {} im2frame (@var{rgb})
 ## @deftypefnx {Function File} {} im2frame (@var{x}, @var{map})
 ## Convert image to movie frame.
 ##
 ## A movie frame is simply a struct with the fields @qcode{"cdata"} and
 ## @qcode{"colormap"}.
 ##
 ## Support for N-dimensional images is given when each image projection,
-## matrix sizes of @nospell{MxN and MxNx3} for RGB images, is concatenated on
-## the fourth dimension.  In such cases, the returned value is a struct array.
+## matrix sizes of @nospell{MxN and MxNx3} for RGB images, is concatenated
+## along the fourth dimension.  In such cases, the returned value is a struct
+## array.
 ##
 ## @seealso{frame2im}
 ## @end deftypefn
 
 ## Author: Carnë Draug <carandraug@octave.org>
 
 function [frame] = im2frame (x, map = [])
 
diff --git a/scripts/plot/util/isaxes.m b/scripts/plot/util/isaxes.m
--- a/scripts/plot/util/isaxes.m
+++ b/scripts/plot/util/isaxes.m
@@ -15,19 +15,18 @@
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} isaxes (@var{h})
 ## Return true if @var{h} is an axes graphics handle and false otherwise.
 ##
-## If @var{h} is a matrix then return a logical array which is true where
-## the elements of @var{h} are axes graphics handles and false where
-## they are not.
+## If @var{h} is a matrix then return a logical array which is true where the
+## elements of @var{h} are axes graphics handles and false where they are not.
 ## @seealso{isaxes, ishandle}
 ## @end deftypefn
 
 ## Author: jwe
 
 function retval = isaxes (h)
 
   if (nargin != 1)
diff --git a/scripts/plot/util/isfigure.m b/scripts/plot/util/isfigure.m
--- a/scripts/plot/util/isfigure.m
+++ b/scripts/plot/util/isfigure.m
@@ -15,19 +15,18 @@
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} isfigure (@var{h})
 ## Return true if @var{h} is a figure graphics handle and false otherwise.
 ##
-## If @var{h} is a matrix then return a logical array which is true where
-## the elements of @var{h} are figure graphics handles and false where
-## they are not.
+## If @var{h} is a matrix then return a logical array which is true where the
+## elements of @var{h} are figure graphics handles and false where they are not.
 ## @seealso{isaxes, ishandle}
 ## @end deftypefn
 
 ## Author: jwe
 
 function retval = isfigure (h)
 
   if (nargin != 1)
diff --git a/scripts/plot/util/linkaxes.m b/scripts/plot/util/linkaxes.m
--- a/scripts/plot/util/linkaxes.m
+++ b/scripts/plot/util/linkaxes.m
@@ -14,18 +14,18 @@
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {} linkaxes (@var{hax})
 ## @deftypefnx {Function File} {} linkaxes (@var{hax}, @var{optstr})
-## Link the axis limits of 2-D plots such that a change in one is
-## propagated to the others.
+## Link the axis limits of 2-D plots such that a change in one is propagated
+## to the others.
 ##
 ## The axes handles to be linked are passed as the first argument @var{hax}.
 ##
 ## The optional second argument is a string which defines which axis limits
 ## will be linked.  The possible values for @var{optstr} are:
 ##
 ## @table @asis
 ## @item @qcode{"x"}
diff --git a/scripts/plot/util/ndgrid.m b/scripts/plot/util/ndgrid.m
--- a/scripts/plot/util/ndgrid.m
+++ b/scripts/plot/util/ndgrid.m
@@ -14,22 +14,23 @@
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {[@var{y1}, @var{y2}, @dots{}, @var{y}n] =} ndgrid (@var{x1}, @var{x2}, @dots{}, @var{x}n)
 ## @deftypefnx {Function File} {[@var{y1}, @var{y2}, @dots{}, @var{y}n] =} ndgrid (@var{x})
-## Given n vectors @var{x1}, @dots{}, @var{x}n, @code{ndgrid} returns
-## n arrays of dimension n.  The elements of the i-th output argument
-## contains the elements of the vector @var{x}i repeated over all
-## dimensions different from the i-th dimension.  Calling ndgrid with
-## only one input argument @var{x} is equivalent to calling ndgrid with
-## all n input arguments equal to @var{x}:
+## Given n vectors @var{x1}, @dots{}, @var{x}n, @code{ndgrid} returns n
+## arrays of dimension n.
+##
+## The elements of the i-th output argument contains the elements of the
+## vector @var{x}i repeated over all dimensions different from the i-th
+## dimension.  Calling ndgrid with only one input argument @var{x} is
+## equivalent to calling ndgrid with all n input arguments equal to @var{x}:
 ##
 ## [@var{y1}, @var{y2}, @dots{}, @var{y}n] = ndgrid (@var{x}, @dots{}, @var{x})
 ##
 ## Programming Note: @code{ndgrid} is very similar to the function
 ## @code{meshgrid} except that the first two dimensions are transposed in
 ## comparison to @code{meshgrid}.  Some core functions expect @code{meshgrid}
 ## input and others expect @code{ndgrid} input.  Check the documentation for
 ## the function in question to determine the proper input format.
diff --git a/scripts/plot/util/pan.m b/scripts/plot/util/pan.m
--- a/scripts/plot/util/pan.m
+++ b/scripts/plot/util/pan.m
@@ -28,19 +28,18 @@
 ## Given the option @qcode{"on"} or @qcode{"off"}, set the interactive
 ## pan mode on or off.
 ##
 ## With no arguments, toggle the current pan mode on or off.
 ##
 ## Given the option @qcode{"xon"} or @qcode{"yon"}, enable pan mode
 ## for the x or y axis only.
 ##
-## If the first argument @var{hfig} is a figure, then operate on
-## the given figure rather than the current figure as returned by
-## @code{gcf}.
+## If the first argument @var{hfig} is a figure, then operate on the given
+## figure rather than the current figure as returned by @code{gcf}.
 ##
 ## @seealso{rotate3d, zoom}
 ## @end deftypefn
 
 function pan (varargin)
 
   hfig = NaN;
 
diff --git a/scripts/plot/util/print.m b/scripts/plot/util/print.m
--- a/scripts/plot/util/print.m
+++ b/scripts/plot/util/print.m
@@ -21,77 +21,75 @@
 ## @deftypefnx {Function File} {} print (@var{options})
 ## @deftypefnx {Function File} {} print (@var{filename}, @var{options})
 ## @deftypefnx {Function File} {} print (@var{h}, @var{filename}, @var{options})
 ## Print a plot, or save it to a file.
 ##
 ## Both output formatted for printing (PDF and PostScript), and many bitmapped
 ## and vector image formats are supported.
 ##
-## @var{filename} defines the name of the output file.  If the
-## file name has no suffix, one is inferred from the specified
-## device and appended to the file name.  If no filename is
-## specified, the output is sent to the printer.
+## @var{filename} defines the name of the output file.  If the file name has
+## no suffix, one is inferred from the specified device and appended to the
+## file name.  If no filename is specified, the output is sent to the
+## printer.
 ##
 ## @var{h} specifies the handle of the figure to print.  If no handle is
 ## specified the current figure is used.
 ##
-## For output to a printer, PostScript file, or PDF file,
-## the paper size is specified by the figure's @code{papersize}
-## property.  The location and size of the image on the page are
-## specified by the figure's @code{paperposition} property.  The
-## orientation of the page is specified by the figure's
-## @code{paperorientation} property.
+## For output to a printer, PostScript file, or PDF file, the paper size is
+## specified by the figure's @code{papersize} property.  The location and
+## size of the image on the page are specified by the figure's
+## @code{paperposition} property.  The orientation of the page is specified
+## by the figure's @code{paperorientation} property.
 ##
 ## The width and height of images are specified by the figure's
 ## @code{paperpositon(3:4)} property values.
 ##
 ## The @code{print} command supports many @var{options}:
 ##
 ## @table @code
 ## @item -f@var{h}
-##   Specify the handle, @var{h}, of the figure to be printed.  The
-## default is the current figure.
+##   Specify the handle, @var{h}, of the figure to be printed.  The default
+## is the current figure.
 ##
 ## @item -P@var{printer}
 ##   Set the @var{printer} name to which the plot is sent if no
 ## @var{filename} is specified.
 ##
 ## @item -G@var{ghostscript_command}
-##   Specify the command for calling Ghostscript.  For Unix and Windows
-## the defaults are @qcode{"gs"} and @qcode{"gswin32c"}, respectively.
+##   Specify the command for calling Ghostscript.  For Unix and Windows the
+## defaults are @qcode{"gs"} and @qcode{"gswin32c"}, respectively.
 ##
 ## @item  -color
 ## @itemx -mono
 ##   Color or monochrome output.
 ##
 ## @item  -solid
 ## @itemx -dashed
 ##   Force all lines to be solid or dashed, respectively.
 ##
 ## @item  -portrait
 ## @itemx -landscape
-##   Specify the orientation of the plot for printed output.  For
-## non-printed output the aspect ratio of the output corresponds to
-## the plot area defined by the @qcode{"paperposition"} property in the
-## orientation specified.  This option is equivalent to changing
-## the figure's @qcode{"paperorientation"} property.
+##   Specify the orientation of the plot for printed output.
+## For non-printed output the aspect ratio of the output corresponds to the
+## plot area defined by the @qcode{"paperposition"} property in the
+## orientation specified.  This option is equivalent to changing the figure's
+## @qcode{"paperorientation"} property.
 ##
 ## @item  -TextAlphaBits=@var{n}
 ## @itemx -GraphicsAlphaBits=@var{n}
 ##   Octave is able to produce output for various printers, bitmaps, and
-## vector formats by using Ghostscript.
-## For bitmap and printer output anti-aliasing is applied using
-## Ghostscript's TextAlphaBits and GraphicsAlphaBits options.
-## The default number of bits for each is 4.
+## vector formats by using Ghostscript.  For bitmap and printer output
+## anti-aliasing is applied using Ghostscript's TextAlphaBits and
+## GraphicsAlphaBits options.  The default number of bits for each is 4. 
 ## Allowed values for @var{N} are 1, 2, or 4.
 ##
 ## @item -d@var{device}
-##   The available output format is specified by the option @var{device},
-## and is one of:
+##   The available output format is specified by the option @var{device}, and
+## is one of:
 ##
 ##   @table @code
 ##   @item  ps
 ##   @itemx ps2
 ##   @itemx psc
 ##   @itemx psc2
 ##     PostScript (level 1 and 2, mono and color).  The FLTK graphics
 ## toolkit generates PostScript level 3.0.
@@ -143,19 +141,17 @@
 ##     AutoCAD
 ##
 ##   @item  emf
 ##   @itemx meta
 ##     Microsoft Enhanced Metafile
 ##
 ##   @item fig
 ##     XFig.  For the Gnuplot graphics toolkit, the additional options
-## @option{-textspecial} or @option{-textnormal} can be used to control
-## whether the special flag should be set for the text in
-## the figure.  (default is @option{-textnormal})
+## @option{-textspecial} or @option{-textnormal} can be used to control whether the special flag should be set for the text in the figure.  (default is @option{-textnormal})
 ##
 ##   @item hpgl
 ##     HP plotter language
 ##
 ##   @item mf
 ##     Metafont
 ##
 ##   @item png
@@ -197,28 +193,28 @@
 ##
 ##   @item ppm
 ##     Portable Pixel Map file format
 ##   @end table
 ##
 ##   For a complete list, type @code{system ("gs -h")} to see what formats
 ## and devices are available.
 ##
-##   When Ghostscript output is sent to a printer the size is determined
-## by the figure's @qcode{"papersize"} property.  When the output
-## is sent to a file the size is determined by the plot box defined by
-## the figure's @qcode{"paperposition"} property.
+##   When Ghostscript output is sent to a printer the size is determined by
+## the figure's @qcode{"papersize"} property.  When the output is sent to a
+## file the size is determined by the plot box defined by the figure's
+## @qcode{"paperposition"} property.
 ##
 ## @item -append
 ##   Append PostScript or PDF output to a pre-existing file of the same type.
 ##
 ## @item -r@var{NUM}
-##   Resolution of bitmaps in pixels per inch.  For both metafiles and
-## SVG the default is the screen resolution; for other formats it is 150 dpi.
-## To specify screen resolution, use @qcode{"-r0"}.
+##   Resolution of bitmaps in pixels per inch.  For both metafiles and SVG
+## the default is the screen resolution; for other formats it is 150 dpi.  To
+## specify screen resolution, use @qcode{"-r0"}.
 ##
 ## @item  -loose
 ## @itemx -tight
 ##   Force a tight or loose bounding box for eps files.  The default is loose.
 ##
 ## @item -@var{preview}
 ##   Add a preview to eps files.  Supported formats are:
 ##
@@ -232,22 +228,22 @@
 ##   @item -pict
 ##     Provide pict preview.
 ##
 ##   @item -tiff
 ##     Provide a tiff preview.
 ##   @end table
 ##
 ## @item -S@var{xsize},@var{ysize}
-##   Plot size in pixels for EMF, GIF, JPEG, PBM, PNG, and SVG@.  For
-## PS, EPS, PDF, and other vector formats the plot size is in points.
-## This option is equivalent to changing the size of the plot box
-## associated with the @qcode{"paperposition"} property.  When using the
-## command form of the print function you must quote the
-## @var{xsize},@var{ysize} option.  For example, by writing @w{"-S640,480"}.
+##   Plot size in pixels for EMF, GIF, JPEG, PBM, PNG, and SVG@.
+## For PS, EPS, PDF, and other vector formats the plot size is in points.
+## This option is equivalent to changing the size of the plot box associated
+## with the @qcode{"paperposition"} property.  When using the command form of
+## the print function you must quote the @var{xsize},@var{ysize} option.  For
+## example, by writing @w{"-S640,480"}.
 ##
 ## @item  -F@var{fontname}
 ## @itemx -F@var{fontname}:@var{size}
 ## @itemx -F:@var{size}
 ##   Use @var{fontname} and/or @var{fontsize} for all text.
 ## @var{fontname} is ignored for some devices: dxf, fig, hpgl, etc.
 ## @end table
 ##
diff --git a/scripts/plot/util/printd.m b/scripts/plot/util/printd.m
--- a/scripts/plot/util/printd.m
+++ b/scripts/plot/util/printd.m
@@ -17,22 +17,24 @@
 ## You should have received a copy of the GNU General Public
 ## License along with Octave; see the file COPYING. If not,
 ## see <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {} printd (@var{obj}, @var{filename})
 ## @deftypefnx {Function File} {@var{out_file} =} printd (@dots{})
 ##
-## Convert any object acceptable to @code{disp} into the format
-## selected by the suffix of @var{filename}.  If the return argument
-## @var{out_file} is given, the name of the created file is returned.
+## Convert any object acceptable to @code{disp} into the format selected by
+## the suffix of @var{filename}.
 ##
-## This function is intended to facilitate manipulation of the output
-## of functions such as @code{stemleaf}.
+## If the return argument @var{out_file} is given, the name of the created
+## file is returned.
+##
+## This function is intended to facilitate manipulation of the output of
+## functions such as @code{stemleaf}.
 ## @seealso{stemleaf}
 ## @end deftypefn
 
 ## Author: Michael D. Godfrey <michaeldgodfrey@gmail.com>
 ## Description: Convert objects into other file formats.
 
 function pr_out = printd (obj, filename)
   ## Convert any object acceptable to disp() into various display formats.
diff --git a/scripts/plot/util/private/__add_default_menu__.m b/scripts/plot/util/private/__add_default_menu__.m
--- a/scripts/plot/util/private/__add_default_menu__.m
+++ b/scripts/plot/util/private/__add_default_menu__.m
@@ -13,18 +13,20 @@
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} __add_default_menu__ (@var{fig})
-## Add default menu to figure.  All uimenu handles have
-## their @qcode{"HandleVisibility"} property set to @qcode{"off"}.
+## Add default menu to figure.
+##
+## All uimenu handles have their @qcode{"HandleVisibility"} property set to
+## @qcode{"off"}.
 ## @end deftypefn
 
 ## Author: Kai Habel
 
 function __add_default_menu__ (fig)
 
   ## Only FLTK toolkit currently provides menubar
   if (! strcmp (get (fig, "__graphics_toolkit__"), "fltk"))
diff --git a/scripts/plot/util/rotate.m b/scripts/plot/util/rotate.m
--- a/scripts/plot/util/rotate.m
+++ b/scripts/plot/util/rotate.m
@@ -14,27 +14,27 @@
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {} rotate (@var{h}, @var{dir}, @var{alpha})
 ## @deftypefnx {Function File} {} rotate (@dots{}, @var{origin})
-## Rotate the plot object @var{h} through @var{alpha} degrees around
-## the line with direction @var{dir} and origin @var{origin}.
+## Rotate the plot object @var{h} through @var{alpha} degrees around the line
+## with direction @var{dir} and origin @var{origin}.
 ##
-## The default value of @var{origin} is the center of the axes
-## object that is the parent of @var{h}.
+## The default value of @var{origin} is the center of the axes object that is
+## the parent of @var{h}.
 ##
-## If @var{h} is a vector of handles, they must all have the same
-## parent axes object.
+## If @var{h} is a vector of handles, they must all have the same parent axes
+## object.
 ##
-## Graphics objects that may be rotated are lines, surfaces, patches,
-## and images.
+## Graphics objects that may be rotated are lines, surfaces, patches, and
+## images.
 ## @end deftypefn
 
 function rotate (h, direction, alpha, origin)
 
   ## Note in doc string about compatibility issues with calculation of
   ## default origin due to possible differences in the auto-scaling
   ## algorithm between Octave and Matlab.
 
diff --git a/scripts/plot/util/rotate3d.m b/scripts/plot/util/rotate3d.m
--- a/scripts/plot/util/rotate3d.m
+++ b/scripts/plot/util/rotate3d.m
@@ -23,19 +23,18 @@
 ## @deftypefnx {Function File} {} rotate3d (@var{hfig}, @var{option})
 ## Control the interactive 3-D rotation mode of a figure in the GUI.
 ##
 ## Given the option @qcode{"on"} or @qcode{"off"}, set the interactive
 ## rotate mode on or off.
 ##
 ## With no arguments, toggle the current rotate mode on or off.
 ##
-## If the first argument @var{hfig} is a figure, then operate on
-## the given figure rather than the current figure as returned by
-## @code{gcf}.
+## If the first argument @var{hfig} is a figure, then operate on the given
+## figure rather than the current figure as returned by @code{gcf}.
 ##
 ## @seealso{pan, zoom}
 ## @end deftypefn
 
 function rotate3d (varargin)
 
   hfig = NaN;
 
diff --git a/scripts/plot/util/saveas.m b/scripts/plot/util/saveas.m
--- a/scripts/plot/util/saveas.m
+++ b/scripts/plot/util/saveas.m
@@ -14,18 +14,18 @@
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {} saveas (@var{h}, @var{filename})
 ## @deftypefnx {Function File} {} saveas (@var{h}, @var{filename}, @var{fmt})
-## Save graphic object @var{h} to the file @var{filename} in graphic
-## format @var{fmt}.
+## Save graphic object @var{h} to the file @var{filename} in graphic format
+## @var{fmt}.
 ##
 ## @var{fmt} should be one of the following formats:
 ##
 ## @table @code
 ##   @item ps
 ##     PostScript
 ##
 ##   @item eps
diff --git a/scripts/plot/util/struct2hdl.m b/scripts/plot/util/struct2hdl.m
--- a/scripts/plot/util/struct2hdl.m
+++ b/scripts/plot/util/struct2hdl.m
@@ -18,24 +18,25 @@
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {@var{h} =} struct2hdl (@var{s})
 ## @deftypefnx {Function File} {@var{h} =} struct2hdl (@var{s}, @var{p})
 ## @deftypefnx {Function File} {@var{h} =} struct2hdl (@var{s}, @var{p}, @var{hilev})
 ## Construct a graphics handle object @var{h} from the structure @var{s}.
 ##
 ## The structure must contain the fields @qcode{"handle"}, @qcode{"type"},
-## @qcode{"children"}, @qcode{"properties"}, and @qcode{"special"}.  If the
-## handle of an existing figure or axes is specified, @var{p}, the new object
-## will be created as a child of that object.  If no parent handle is provided
-## then a new figure and the necessary children will be constructed using the
-## default values from the root figure.
+## @qcode{"children"}, @qcode{"properties"}, and @qcode{"special"}.
 ##
-## A third boolean argument @var{hilev} can be passed to specify whether
-## the function should preserve listeners/callbacks, e.g., for legends or
+## If the handle of an existing figure or axes is specified, @var{p}, the new
+## object will be created as a child of that object.  If no parent handle is
+## provided then a new figure and the necessary children will be constructed
+## using the default values from the root figure.
+##
+## A third boolean argument @var{hilev} can be passed to specify whether the
+## function should preserve listeners/callbacks, e.g., for legends or
 ## hggroups.  The default is false.
 ## @seealso{hdl2struct, hgload, findobj}
 ## @end deftypefn
 
 ## Author: pdiribarne <pdiribarne@new-host.home>
 ## Created: 2012-03-04
 
 function [h, pout] = struct2hdl (s, p=[], hilev = false)
diff --git a/scripts/plot/util/subplot.m b/scripts/plot/util/subplot.m
--- a/scripts/plot/util/subplot.m
+++ b/scripts/plot/util/subplot.m
@@ -24,18 +24,18 @@
 ## @deftypefnx {Function File} {} subplot (@dots{}, "replace")
 ## @deftypefnx {Function File} {} subplot (@dots{}, "position", @var{pos})
 ## @deftypefnx {Function File} {} subplot (@dots{}, @var{prop}, @var{val}, @dots{})
 ## @deftypefnx {Function File} {@var{hax} =} subplot (@dots{})
 ## Set up a plot grid with @var{rows} by @var{cols} subwindows and set the
 ## current axes for plotting (@code{gca}) to the location given by @var{index}.
 ##
 ## If only one numeric argument is supplied, then it must be a three digit
-## value specifying the number of rows in digit 1, the number of
-## columns in digit 2, and the plot index in digit 3.
+## value specifying the number of rows in digit 1, the number of columns in
+## digit 2, and the plot index in digit 3.
 ##
 ## The plot index runs row-wise; First, all columns in a row are numbered
 ## and then the next row is filled.
 ##
 ## For example, a plot with 2x3 grid will have plot indices running as follows:
 ## @tex
 ## \vskip 10pt
 ## \hfil\vbox{\offinterlineskip\hrule
diff --git a/scripts/plot/util/zoom.m b/scripts/plot/util/zoom.m
--- a/scripts/plot/util/zoom.m
+++ b/scripts/plot/util/zoom.m
@@ -21,41 +21,40 @@
 ## @deftypefnx {Command} {} zoom (@var{factor})
 ## @deftypefnx {Command} {} zoom on
 ## @deftypefnx {Command} {} zoom off
 ## @deftypefnx {Command} {} zoom xon
 ## @deftypefnx {Command} {} zoom yon
 ## @deftypefnx {Command} {} zoom out
 ## @deftypefnx {Command} {} zoom reset
 ## @deftypefnx {Command} {} zoom (@var{hfig}, @var{option})
-## Zoom the current axes object or control the interactive zoom mode of
-## a figure in the GUI.
+## Zoom the current axes object or control the interactive zoom mode of a
+## figure in the GUI.
 ##
-## Given a numeric argument greater than zero, zoom by the given factor.
-## If the zoom factor is greater than one, zoom in on the plot.  If the
-## factor is less than one, zoom out.  If the zoom factor is a two- or
-## three-element vector, then the elements specify the zoom factors for
-## the x, y, and z axes respectively.
+## Given a numeric argument greater than zero, zoom by the given factor.  If
+## the zoom factor is greater than one, zoom in on the plot.  If the factor
+## is less than one, zoom out.  If the zoom factor is a two- or three-element
+## vector, then the elements specify the zoom factors for the x, y, and z
+## axes respectively.
 ##
-## Given the option @qcode{"on"} or @qcode{"off"}, set the interactive
-## zoom mode on or off.
+## Given the option @qcode{"on"} or @qcode{"off"}, set the interactive zoom
+## mode on or off.
 ##
 ## With no arguments, toggle the current zoom mode on or off.
 ##
-## Given the option @qcode{"xon"} or @qcode{"yon"}, enable zoom mode
-## for the x or y axis only.
+## Given the option @qcode{"xon"} or @qcode{"yon"}, enable zoom mode for the
+## x or y-axis only.
 ##
 ## Given the option @qcode{"out"}, zoom to the initial zoom setting.
 ##
-## Given the option @qcode{"reset"}, store the current zoom setting so
-## that @code{zoom out} will return to this zoom level.
+## Given the option @qcode{"reset"}, store the current zoom setting so that
+## @code{zoom out} will return to this zoom level.
 ##
-## If the first argument @var{hfig} is a figure, then operate on
-## the given figure rather than the current figure as returned by
-## @code{gcf}.
+## If the first argument @var{hfig} is a figure, then operate on the given
+## figure rather than the current figure as returned by @code{gcf}.
 ##
 ## @seealso{pan, rotate3d}
 ## @end deftypefn
 
 ## Eventually we need to also support these features:
 ## @deftypefnx {Command} {zoom_object_handle =} zoom (@var{hfig})
 
 function zoom (varargin)
