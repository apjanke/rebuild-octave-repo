# HG changeset patch
# User PrasannaKumar Muralidharan <prasannatsmkumar@gmail.com>
# Date 1394214277 -19800
#      Fri Mar 07 23:14:37 2014 +0530
# Node ID cb37b17b60918ca8d4b5bbce31df92f3e227a8d6
# Parent  ee125c82e01e9c78187b20053b7cacfc102f69d6
Initialize rcond value to octave_NaN.

* liboctave/array/CMatrix.cc(rcond): Initialize rcon to octave_NaN
* liboctave/array/dMatrix.cc(rcond): Initialize rcon to octave_NaN
* liboctave/array/fMatrix.cc(rcond): Initialize rcon to octave_NaN
* liboctave/array/fCMatrix.cc(rcond): Initialize rcon to octave_NaN

diff --git a/liboctave/array/CMatrix.cc b/liboctave/array/CMatrix.cc
--- a/liboctave/array/CMatrix.cc
+++ b/liboctave/array/CMatrix.cc
@@ -1717,17 +1717,17 @@ ComplexMatrix::rcond (void) const
 {
   MatrixType mattype (*this);
   return rcond (mattype);
 }
 
 double
 ComplexMatrix::rcond (MatrixType &mattype) const
 {
-  double rcon;
+  double rcon = octave_NaN;
   octave_idx_type nr = rows ();
   octave_idx_type nc = cols ();
 
   if (nr != nc)
     (*current_liboctave_error_handler) ("matrix must be square");
   else if (nr == 0 || nc == 0)
     rcon = octave_Inf;
   else
diff --git a/liboctave/array/dMatrix.cc b/liboctave/array/dMatrix.cc
--- a/liboctave/array/dMatrix.cc
+++ b/liboctave/array/dMatrix.cc
@@ -1377,17 +1377,17 @@ Matrix::rcond (void) const
 {
   MatrixType mattype (*this);
   return rcond (mattype);
 }
 
 double
 Matrix::rcond (MatrixType &mattype) const
 {
-  double rcon;
+  double rcon = octave_NaN;
   octave_idx_type nr = rows ();
   octave_idx_type nc = cols ();
 
   if (nr != nc)
     (*current_liboctave_error_handler) ("matrix must be square");
   else if (nr == 0 || nc == 0)
     rcon = octave_Inf;
   else
diff --git a/liboctave/array/fCMatrix.cc b/liboctave/array/fCMatrix.cc
--- a/liboctave/array/fCMatrix.cc
+++ b/liboctave/array/fCMatrix.cc
@@ -1722,17 +1722,17 @@ FloatComplexMatrix::rcond (void) const
 {
   MatrixType mattype (*this);
   return rcond (mattype);
 }
 
 float
 FloatComplexMatrix::rcond (MatrixType &mattype) const
 {
-  float rcon;
+  float rcon = octave_NaN;
   octave_idx_type nr = rows ();
   octave_idx_type nc = cols ();
 
   if (nr != nc)
     (*current_liboctave_error_handler) ("matrix must be square");
   else if (nr == 0 || nc == 0)
     rcon = octave_Inf;
   else
diff --git a/liboctave/array/fMatrix.cc b/liboctave/array/fMatrix.cc
--- a/liboctave/array/fMatrix.cc
+++ b/liboctave/array/fMatrix.cc
@@ -1385,17 +1385,17 @@ FloatMatrix::rcond (void) const
 {
   MatrixType mattype (*this);
   return rcond (mattype);
 }
 
 float
 FloatMatrix::rcond (MatrixType &mattype) const
 {
-  float rcon;
+  float rcon = octave_NaN;
   octave_idx_type nr = rows ();
   octave_idx_type nc = cols ();
 
   if (nr != nc)
     (*current_liboctave_error_handler) ("matrix must be square");
   else if (nr == 0 || nc == 0)
     rcon = octave_Inf;
   else
