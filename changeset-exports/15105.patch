# HG changeset patch
# User Jacob Dawid <jacob.dawid@gmail.com>
# Date 1344071900 -7200
#      Sat Aug 04 11:18:20 2012 +0200
# Branch gui
# Node ID f4ea22ef2bebca882dcd766c46b0227112b335ff
# Parent  093961d9ebed837408c8f0179b6562d68866ee63
Incorporated patch that adds replace from Torsten and modified it.

* file-editor.cc: Added replace functionality.
* find-dialog: Added replace functionality and rearranged UI elements.

diff --git a/gui/src/m-editor/file-editor.cc b/gui/src/m-editor/file-editor.cc
--- a/gui/src/m-editor/file-editor.cc
+++ b/gui/src/m-editor/file-editor.cc
@@ -375,17 +375,17 @@ file_editor::construct ()
   QAction *previous_breakpoint_action   = new QAction (tr ("Pre&vious breakpoint"),_tool_bar);
   QAction *toggle_breakpoint_action     = new QAction (tr ("Toggle &breakpoint"),_tool_bar);
   QAction *remove_breakpoint_action     = new QAction (tr ("&Remove All breakpoints"),_tool_bar);
 
   QAction *comment_selection_action   = new QAction (tr ("&Comment Selected Text"),_tool_bar);
   QAction *uncomment_selection_action = new QAction (tr ("&Uncomment Selected Text"),_tool_bar);
 
   QAction *find_action = new QAction (QIcon(":/actions/icons/find.png"),
-                                      tr ("&Find"), _tool_bar);
+                                      tr ("&Find and Replace"), _tool_bar);
 
   _run_action = new QAction (QIcon(":/actions/icons/artsbuilderexecute.png"),
         tr("Save File And Run"), _tool_bar);
 
   // some actions are disabled from the beginning
   _copy_action->setEnabled(false);
   _cut_action->setEnabled(false);
   _run_action->setShortcut                      (Qt::ControlModifier+ Qt::Key_R);
diff --git a/gui/src/m-editor/find-dialog.cc b/gui/src/m-editor/find-dialog.cc
--- a/gui/src/m-editor/find-dialog.cc
+++ b/gui/src/m-editor/find-dialog.cc
@@ -35,95 +35,161 @@
 **
 ** If you have questions regarding the use of this file, please contact
 ** Nokia at qt-info@nokia.com.
 ** $QT_END_LICENSE$
 **
 ****************************************************************************/
 
 #include <QtGui>
+#include <QIcon>
 #include "find-dialog.h"
 
 find_dialog::find_dialog (QsciScintilla* edit_area, QWidget *parent)
   : QDialog (parent)
 {
-  setWindowTitle ("Search file");
-  _label = new QLabel (tr ("Find &what:"));
+  setWindowTitle ("Find and Replace");
+  setWindowIcon (QIcon(":/actions/icons/logo.png"));
+
+  _search_label = new QLabel (tr ("Find &what:"));
   _search_line_edit = new QLineEdit;
-  _label->setBuddy (_search_line_edit);
+  _search_label->setBuddy (_search_line_edit);
+  _replace_label = new QLabel (tr ("Re&place with:"));
+  _replace_line_edit = new QLineEdit;
+  _replace_label->setBuddy (_replace_line_edit);
 
   _case_check_box = new QCheckBox (tr ("Match &case"));
   _from_start_check_box = new QCheckBox (tr ("Search from &start"));
-  _from_start_check_box->setChecked (true);
-
+  _wrap_check_box = new QCheckBox (tr ("&Wrap while searching"));
+  _wrap_check_box->setChecked(true);
   _find_next_button = new QPushButton (tr ("&Find Next"));
   _find_next_button->setDefault (true);
+  _replace_button = new QPushButton (tr ("&Replace"));
+  _replace_all_button = new QPushButton (tr ("Replace &All"));
 
   _more_button = new QPushButton (tr ("&More"));
   _more_button->setCheckable (true);
   _more_button->setAutoDefault (false);
 
   _button_box = new QDialogButtonBox (Qt::Vertical);
   _button_box->addButton (_find_next_button, QDialogButtonBox::ActionRole);
+  _button_box->addButton (_replace_button, QDialogButtonBox::ActionRole);
+  _button_box->addButton (_replace_all_button, QDialogButtonBox::ActionRole);
   _button_box->addButton (_more_button, QDialogButtonBox::ActionRole);
 
   _extension = new QWidget (this);
   _whole_words_check_box = new QCheckBox (tr ("&Whole words"));
   _regex_check_box = new QCheckBox (tr ("Regular E&xpressions"));
   _backward_check_box = new QCheckBox (tr ("Search &backward"));
   _search_selection_check_box = new QCheckBox (tr ("Search se&lection"));
+  _search_selection_check_box->setCheckable (false); // TODO: Not implemented.
+  _search_selection_check_box->setEnabled (false);
 
   _edit_area = edit_area;
-  connect (_find_next_button, SIGNAL (clicked ()), this, SLOT (search_next ()));
-  connect (_more_button, SIGNAL (toggled (bool)), _extension, SLOT (setVisible (bool)));
+  connect (_find_next_button,   SIGNAL (clicked ()),
+           this,                SLOT (search_next ()));
+  connect (_more_button,        SIGNAL (toggled (bool)),
+           _extension,          SLOT (setVisible (bool)));
+  connect (_replace_button,     SIGNAL (clicked ()),
+           this,                SLOT (replace ()));
+  connect (_replace_all_button, SIGNAL (clicked ()),
+           this,                SLOT (replace_all ()));
 
   QVBoxLayout *extension_layout = new QVBoxLayout ();
   extension_layout->setMargin (0);
   extension_layout->addWidget (_whole_words_check_box);
-  extension_layout->addWidget (_regex_check_box);
   extension_layout->addWidget (_backward_check_box);
   extension_layout->addWidget (_search_selection_check_box);
   _extension->setLayout (extension_layout);
 
-  QHBoxLayout *top_left_layout = new QHBoxLayout;
-  top_left_layout->addWidget (_label);
-  top_left_layout->addWidget (_search_line_edit);
+  QGridLayout *top_left_layout = new QGridLayout;
+  top_left_layout->addWidget (_search_label, 1, 1);
+  top_left_layout->addWidget (_search_line_edit, 1, 2);
+  top_left_layout->addWidget (_replace_label, 2, 1);
+  top_left_layout->addWidget (_replace_line_edit, 2, 2);
 
   QVBoxLayout *left_layout = new QVBoxLayout;
   left_layout->addLayout (top_left_layout);
+  left_layout->insertStretch (1, 5);
   left_layout->addWidget (_case_check_box);
   left_layout->addWidget (_from_start_check_box);
-  left_layout->addStretch (1);
+  left_layout->addWidget (_wrap_check_box);
+  left_layout->addWidget (_regex_check_box);
 
   QGridLayout *main_layout = new QGridLayout;
   main_layout->setSizeConstraint (QLayout::SetFixedSize);
   main_layout->addLayout (left_layout, 0, 0);
   main_layout->addWidget (_button_box, 0, 1);
   main_layout->addWidget (_extension, 1, 0, 1, 2);
   setLayout (main_layout);
+
   _extension->hide ();
 }
 
 void
 find_dialog::search_next ()
 {
   int line = -1, col = -1;
+
+  _find_result_available = false;
   if (_from_start_check_box->isChecked ())
     {
       line = 1;
       col  = 1;
     }
 
   if (_edit_area)
     {
-      _edit_area->findFirst (_search_line_edit->text (),
-                             _regex_check_box->isChecked (),
-                             _case_check_box->isChecked (),
-                             _whole_words_check_box->isChecked (),
-                             true,
-                             !_backward_check_box->isChecked (),
-                             line,
-                             col,
-                             true,
-                             true
-                             );
+      _find_result_available = _edit_area->findFirst (_search_line_edit->text (),
+                                      _regex_check_box->isChecked (),
+                                      _case_check_box->isChecked (),
+                                      _whole_words_check_box->isChecked (),
+                                      _wrap_check_box->isChecked (),
+                                      !_backward_check_box->isChecked (),
+                                      line,col,
+                                      true,
+                                      true
+                                      );
+    }
+}
+
+
+void
+find_dialog::replace ()
+{
+  if (_edit_area)
+    {
+      _edit_area->replace (_replace_line_edit->text ());
+      _edit_area->findNext();
     }
 }
+
+void
+find_dialog::replace_all ()
+{
+  int count = 0;
+
+  // check whether find & replace srings are different (avoid endless loop!)
+  int strDiff;
+  Qt::CaseSensitivity cs;
+  if (_case_check_box->isChecked())
+    {
+      cs = Qt::CaseSensitive;
+    }
+  else
+    {
+      cs = Qt::CaseInsensitive;
+    }
+  strDiff = QString::compare(_search_line_edit->text(),_replace_line_edit->text(),cs);
+
+  // replace all if strings are different
+  if (_edit_area && strDiff )
+    {
+      search_next ();  // find first occurence
+      while (_find_result_available)   // while search string is found
+        {
+          _edit_area->replace (_replace_line_edit->text ());   // replace
+          count++;                                             // inc counter
+          _find_result_available = _edit_area->findNext();                     // and find next
+        }
+    }
+  // TODO: Show number of replaced strings
+}
diff --git a/gui/src/m-editor/find-dialog.h b/gui/src/m-editor/find-dialog.h
--- a/gui/src/m-editor/find-dialog.h
+++ b/gui/src/m-editor/find-dialog.h
@@ -55,27 +55,35 @@ class QPushButton;
 class find_dialog : public QDialog
 {
   Q_OBJECT
 public:
   find_dialog (QsciScintilla* edit_area, QWidget *parent = 0);
 
 private slots:
   void search_next ();
+  void replace ();
+  void replace_all ();
 
 private:
-  QLabel            *_label;
+  QLabel            *_search_label;
   QLineEdit         *_search_line_edit;
+  QLabel            *_replace_label;
+  QLineEdit         *_replace_line_edit;
   QCheckBox         *_case_check_box;
   QCheckBox         *_from_start_check_box;
+  QCheckBox         *_wrap_check_box;
   QCheckBox         *_whole_words_check_box;
   QCheckBox         *_regex_check_box;
   QCheckBox         *_search_selection_check_box;
   QCheckBox         *_backward_check_box;
   QDialogButtonBox  *_button_box;
   QPushButton       *_find_next_button;
+  QPushButton       *_replace_button;
+  QPushButton       *_replace_all_button;
   QPushButton       *_more_button;
   QWidget           *_extension;
   QsciScintilla     *_edit_area;
+  bool               _find_result_available;
 };
 
 #endif // FIND_DIALOG_H
 
