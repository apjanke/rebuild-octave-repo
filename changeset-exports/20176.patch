# HG changeset patch
# User Rik <rik@octave.org>
# Date 1431319039 25200
#      Sun May 10 21:37:19 2015 -0700
# Node ID 5212cda4ac0e36cdfeed1ec5bf939cffe17892a1
# Parent  c0f64bc26eee83ad41e617cf484d3709b224ad58
# Parent  014edaafa3ad8cde97c5e396cc21f776b0677b71
maint: Periodic merge of stable to default.

diff --git a/.hgtags b/.hgtags
--- a/.hgtags
+++ b/.hgtags
@@ -88,8 +88,9 @@ 02ce68d63fba31cd14ac060c087212a032ae3202
 dd669c2ae76c167613f54d6f4db0130fa2124cac rc-3-8-1-4
 43cc202335dc4a53a3d8fc9ca90acaa81d2e63d3 release-3-8-1
 492c5614953571a0b07f4c1621cc7bc5c85c0251 rc-3-8-2-1
 46df2c7b8f4dec400ce353370f2e47a02926026d rc-3-8-2-2
 a66548dc07b0fc9b7d37a4be065aa15e8243c96a release-3-8-2
 52d2bbf49c922440621b42b1c1679f0e55462485 rc-4-0-0-1
 eba80000fa0dad32ba0f1cd767dd826d1ce1aba6 rc-4-0-0-2
 065f933ef08318e40b81f7fe75236e6175088117 rc-4-0-0-3
+42bb3a776c9fcc008669f382d2409297c4a901b3 rc-4-0-0-4
diff --git a/build-aux/mk-opts.pl b/build-aux/mk-opts.pl
--- a/build-aux/mk-opts.pl
+++ b/build-aux/mk-opts.pl
@@ -227,20 +227,23 @@ sub process_data
 
   $OPT_FCN_NAME = "${FCN_NAME}_options" if not defined $OPT_FCN_NAME;
 
   $STATIC_OBJECT_NAME = "${FCN_NAME}_opts";
 
   if (not defined $DOC_STRING)
     {
       $DOC_STRING = "Query or set options for the function \@code{$FCN_NAME}.\\n\\
+\\n\\
 When called with no arguments, the names of all available options and\\n\\
 their current values are displayed.\\n\\
-Given one argument, return the value of the corresponding option.\\n\\
-When called with two arguments, \@code{$OPT_FCN_NAME} set the option\\n\\
+\\n\\
+Given one argument, return the value of the option \@var{opt}.\\n\\
+\\n\\
+When called with two arguments, \@code{$OPT_FCN_NAME} sets the option\\n\\
 \@var{opt} to value \@var{val}.";
     }
 }
 
 ## FIXME: What does this routine do?  And can it be simpler to understand?
 sub get_min_match_len_info
 {
   my ($i, $j, $k);
diff --git a/configure.ac b/configure.ac
--- a/configure.ac
+++ b/configure.ac
@@ -14,24 +14,24 @@ dnl Copyright (C) 1993-2015 John W. Eato
 ### FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
 ### for more details.
 ###
 ### You should have received a copy of the GNU General Public License
 ### along with Octave; see the file COPYING.  If not, see
 ### <http://www.gnu.org/licenses/>.
 
 AC_PREREQ([2.63])
-AC_INIT([GNU Octave], [4.0.0-rc3], [http://octave.org/bugs.html], [octave])
+AC_INIT([GNU Octave], [4.0.0-rc4], [http://octave.org/bugs.html], [octave])
 
 dnl Note that the version number is duplicated here and in AC_INIT
 dnl because AC_INIT requires it to be static, not computed from
 dnl shell variables.
 OCTAVE_MAJOR_VERSION=4
 OCTAVE_MINOR_VERSION=0
-OCTAVE_PATCH_VERSION=0-rc3
+OCTAVE_PATCH_VERSION=0-rc4
 
 dnl PACKAGE_VERSION is set by the AC_INIT VERSION arg
 OCTAVE_VERSION="$PACKAGE_VERSION"
 
 OCTAVE_COPYRIGHT="Copyright (C) 2015 John W. Eaton and others."
 
 OCTAVE_RELEASE_DATE="2015-03-20"
 
@@ -1015,27 +1015,28 @@ AC_ARG_WITH([sndfile],
    fi],
   [check_sndfile=yes])
 
 if test $check_sndfile = yes; then
   PKG_CHECK_EXISTS([sndfile], [
     SNDFILE_CPPFLAGS=`$PKG_CONFIG --cflags-only-I sndfile`
     SNDFILE_LDFLAGS=`$PKG_CONFIG --libs-only-L sndfile`
     SNDFILE_LIBS=`$PKG_CONFIG --libs-only-l sndfile`
-    warn_sndfile=
+    OCTAVE_CHECK_LIB_SNDFILE_OK([warn_sndfile=])
   ])
 fi
 
 if test -z "$warn_sndfile"; then
   AC_DEFINE(HAVE_SNDFILE, 1, [Define to 1 if sndfile is available.])
 else
   SNDFILE_CPPFLAGS=
   SNDFILE_LDFLAGS=
   SNDFILE_LIBS=
 fi
+
 AC_SUBST(SNDFILE_CPPFLAGS)
 AC_SUBST(SNDFILE_LDFLAGS)
 AC_SUBST(SNDFILE_LIBS)
 
 ### Check for PortAudio
 
 warn_portaudio="PortAudio library fails tests.  The audioplayer, audiorecorder classes and audiodevinfo function for audio playback and recording will not be fully functional."
 
diff --git a/doc/interpreter/tips.txi b/doc/interpreter/tips.txi
--- a/doc/interpreter/tips.txi
+++ b/doc/interpreter/tips.txi
@@ -237,22 +237,27 @@ Octave.  Here are some tips for the writ
 Every command, function, or variable intended for users to know about
 should have a documentation string.
 
 @item
 An internal variable or subroutine of an Octave program might as well have
 a documentation string.
 
 @item
-The first line of the documentation string should consist of one or two
-complete sentences that stand on their own as a summary.
+The first line of the documentation string should consist of a summary of
+the function.
+
+Subsequent lines may expand the general nature of the function.
 
-The documentation string can have additional lines that expand on the
-details of how to use the function or variable.  The additional lines
-should also be made up of complete sentences.
+After the introduction there should be paragraphs describing the meaning
+and usage of each input, followed by the meaning and usage of each output.
+
+Finally, there may be more general information such as notes about the
+algorithm used, references to scientific papers, notes about any
+incompatibilities with @sc{matlab}, etc.
 
 @item
 For consistency, phrase the verb in the first sentence of a
 documentation string as an infinitive with ``to'' omitted.  For
 instance, use ``Return the frob of A and B.'' in preference to ``Returns
 the frob of A and B@.''  Usually it looks good to do likewise for the
 rest of the first paragraph.  Subsequent paragraphs usually look better
 if they have proper subjects.
diff --git a/libgui/graphics/GLCanvas.cc b/libgui/graphics/GLCanvas.cc
--- a/libgui/graphics/GLCanvas.cc
+++ b/libgui/graphics/GLCanvas.cc
@@ -33,17 +33,18 @@ along with Octave; see the file COPYING.
 
 #include "GLCanvas.h"
 #include "gl-select.h"
 
 namespace QtHandles
 {
 
 GLCanvas::GLCanvas (QWidget* xparent, const graphics_handle& gh)
-  : QGLWidget (QGLFormat(QGL::SampleBuffers), xparent), Canvas (gh)
+  : QGLWidget (QGLFormat (QGL::SampleBuffers | QGL::IndirectRendering),
+               xparent), Canvas (gh)
 {
   setFocusPolicy (Qt::ClickFocus);
 }
 
 GLCanvas::~GLCanvas (void)
 {
 }
 
diff --git a/libgui/graphics/QtHandlesUtils.cc b/libgui/graphics/QtHandlesUtils.cc
--- a/libgui/graphics/QtHandlesUtils.cc
+++ b/libgui/graphics/QtHandlesUtils.cc
@@ -147,17 +147,21 @@ fromRgb (const Matrix& rgb)
 }
 
 Matrix
 toRgb (const QColor& c)
 {
   Matrix rgb (1, 3);
   double* rgbData = rgb.fortran_vec ();
 
-  c.getRgbF (rgbData, rgbData+1, rgbData+2);
+  // qreal is a typedef for double except for ARM CPU architectures
+  // where it is a typedef for float (Bug #44970).
+  qreal tmp[3];
+  c.getRgbF (tmp, tmp+1, tmp+2);
+  rgbData[0] = tmp[0]; rgbData[1] = tmp[1]; rgbData[2] = tmp[2];
 
   return rgb;
 }
 
 std::string
 figureSelectionType (QMouseEvent* event, bool isDoubleClick)
 {
   if (isDoubleClick)
diff --git a/libinterp/corefcn/__ilu__.cc b/libinterp/corefcn/__ilu__.cc
--- a/libinterp/corefcn/__ilu__.cc
+++ b/libinterp/corefcn/__ilu__.cc
@@ -467,17 +467,17 @@ void ilu_crout (octave_matrix_t& sm_l, o
         }
       U = U.transpose ();
     }
 }
 
 DEFUN (__iluc__, args, nargout,
        "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {[@var{L}, @var{U}] =} __iluc__ (@var{A})\n\
-@deftypefnx {Built-in Function} {[@var{L}, @var{U}] =} __iluc__ (@var{A}, @var{droptol}) \n\
+@deftypefnx {Built-in Function} {[@var{L}, @var{U}] =} __iluc__ (@var{A}, @var{droptol})\n\
 @deftypefnx {Built-in Function} {[@var{L}, @var{U}] =} __iluc__ (@var{A}, @var{droptol}, @var{milu})\n\
 @deftypefnx {Built-in Function} {[@var{L}, @var{U}, @var{P}] =} __iluc__ (@var{A}, @dots{})\n\
 Undocumented internal function.\n\
 @end deftypefn")
 {
   octave_value_list retval;
   int nargin = args.length ();
   std::string milu = "off";
diff --git a/libinterp/corefcn/balance.cc b/libinterp/corefcn/balance.cc
--- a/libinterp/corefcn/balance.cc
+++ b/libinterp/corefcn/balance.cc
@@ -49,16 +49,19 @@ along with Octave; see the file COPYING.
 DEFUN (balance, args, nargout,
        "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {@var{AA} =} balance (@var{A})\n\
 @deftypefnx {Built-in Function} {@var{AA} =} balance (@var{A}, @var{opt})\n\
 @deftypefnx {Built-in Function} {[@var{DD}, @var{AA}] =} balance (@var{A}, @var{opt})\n\
 @deftypefnx {Built-in Function} {[@var{D}, @var{P}, @var{AA}] =} balance (@var{A}, @var{opt})\n\
 @deftypefnx {Built-in Function} {[@var{CC}, @var{DD}, @var{AA}, @var{BB}] =} balance (@var{A}, @var{B}, @var{opt})\n\
 \n\
+Balance the matrix @var{A} to reduce numerical errors in future\n\
+calculations.\n\
+\n\
 Compute @code{@var{AA} = @var{DD} \\ @var{A} * @var{DD}} in which @var{AA}\n\
 is a matrix whose row and column norms are roughly equal in magnitude, and\n\
 @code{@var{DD} = @var{P} * @var{D}}, in which @var{P} is a permutation\n\
 matrix and @var{D} is a diagonal matrix of powers of two.  This allows the\n\
 equilibration to be computed without round-off.  Results of eigenvalue\n\
 calculation are typically improved by balancing first.\n\
 \n\
 If two output values are requested, @code{balance} returns\n\
diff --git a/libinterp/corefcn/besselj.cc b/libinterp/corefcn/besselj.cc
--- a/libinterp/corefcn/besselj.cc
+++ b/libinterp/corefcn/besselj.cc
@@ -544,18 +544,17 @@ See besselj.\n\
     print_usage ();
 
   return retval;
 }
 
 DEFUN (airy, args, nargout,
        "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {[@var{a}, @var{ierr}] =} airy (@var{k}, @var{z}, @var{opt})\n\
-Compute Airy functions of the first and second kind, and their\n\
-derivatives.\n\
+Compute Airy functions of the first and second kind, and their derivatives.\n\
 \n\
 @example\n\
 @group\n\
  K   Function   Scale factor (if \"opt\" is supplied)\n\
 ---  --------   ---------------------------------------\n\
  0   Ai (Z)     exp ((2/3) * Z * sqrt (Z))\n\
  1   dAi(Z)/dZ  exp ((2/3) * Z * sqrt (Z))\n\
  2   Bi (Z)     exp (-abs (real ((2/3) * Z * sqrt (Z))))\n\
diff --git a/libinterp/corefcn/betainc.cc b/libinterp/corefcn/betainc.cc
--- a/libinterp/corefcn/betainc.cc
+++ b/libinterp/corefcn/betainc.cc
@@ -31,17 +31,19 @@ along with Octave; see the file COPYING.
 #include "gripes.h"
 #include "oct-obj.h"
 #include "utils.h"
 
 
 DEFUN (betainc, args, ,
        "-*- texinfo -*-\n\
 @deftypefn {Mapping Function} {} betainc (@var{x}, @var{a}, @var{b})\n\
-Return the regularized incomplete Beta function,\n\
+Compute the regularized incomplete Beta function.\n\
+\n\
+The regularized incomplete Beta function is defined by\n\
 @tex\n\
 $$\n\
  I (x, a, b) = {1 \\over {B (a, b)}} \\int_0^x t^{(a-z)} (1-t)^{(b-1)} dt.\n\
 $$\n\
 @end tex\n\
 @ifnottex\n\
 @c Set example in small font to prevent overfull line\n\
 \n\
@@ -325,20 +327,22 @@ compatible dimensions.\n\
 %!error betainc (1)
 %!error betainc (1,2)
 %!error betainc (1,2,3,4)
 */
 
 DEFUN (betaincinv, args, ,
        "-*- texinfo -*-\n\
 @deftypefn {Mapping Function} {} betaincinv (@var{y}, @var{a}, @var{b})\n\
-Compute the inverse of the incomplete Beta function, i.e., @var{x} such that\n\
+Compute the inverse of the incomplete Beta function.\n\
+\n\
+The inverse is the value @var{x} such that\n\
 \n\
 @example\n\
-@var{y} == betainc (@var{x}, @var{a}, @var{b}) \n\
+@var{y} == betainc (@var{x}, @var{a}, @var{b})\n\
 @end example\n\
 @seealso{betainc, beta, betaln}\n\
 @end deftypefn")
 {
   octave_value retval;
 
   int nargin = args.length ();
 
diff --git a/libinterp/corefcn/bitfcns.cc b/libinterp/corefcn/bitfcns.cc
--- a/libinterp/corefcn/bitfcns.cc
+++ b/libinterp/corefcn/bitfcns.cc
@@ -362,38 +362,41 @@ bitop (const std::string& fname, const o
 
   return retval;
 }
 
 DEFUN (bitand, args, ,
        "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} bitand (@var{x}, @var{y})\n\
 Return the bitwise AND of non-negative integers.\n\
+\n\
 @var{x}, @var{y} must be in the range [0,bitmax]\n\
 @seealso{bitor, bitxor, bitset, bitget, bitcmp, bitshift, bitmax}\n\
 @end deftypefn")
 {
   return bitop ("bitand", args);
 }
 
 DEFUN (bitor, args, ,
        "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} bitor (@var{x}, @var{y})\n\
 Return the bitwise OR of non-negative integers.\n\
+\n\
 @var{x}, @var{y} must be in the range [0,bitmax]\n\
 @seealso{bitor, bitxor, bitset, bitget, bitcmp, bitshift, bitmax}\n\
 @end deftypefn")
 {
   return bitop ("bitor", args);
 }
 
 DEFUN (bitxor, args, ,
        "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} bitxor (@var{x}, @var{y})\n\
 Return the bitwise XOR of non-negative integers.\n\
+\n\
 @var{x}, @var{y} must be in the range [0,bitmax]\n\
 @seealso{bitand, bitor, bitset, bitget, bitcmp, bitshift, bitmax}\n\
 @end deftypefn")
 {
   return bitop ("bitxor", args);
 }
 
 /*
@@ -534,20 +537,21 @@ bitshift (float a, int n, int64_t mask)
       DO_BITSHIFT (T); \
     } \
   while (0)
 
 DEFUN (bitshift, args, ,
        "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {} bitshift (@var{a}, @var{k})\n\
 @deftypefnx {Built-in Function} {} bitshift (@var{a}, @var{k}, @var{n})\n\
-Return a @var{k} bit shift of @var{n}-digit unsigned\n\
-integers in @var{a}.  A positive @var{k} leads to a left shift;\n\
-A negative value to a right shift.  If @var{n} is omitted it defaults\n\
-to log2(bitmax)+1.\n\
+Return a @var{k} bit shift of @var{n}-digit unsigned integers in @var{a}.\n\
+\n\
+A positive @var{k} leads to a left shift; A negative value to a right shift.\n\
+\n\
+If @var{n} is omitted it defaults to log2(bitmax)+1.\n\
 @var{n} must be in the range [1,log2(bitmax)+1] usually [1,33].\n\
 \n\
 @example\n\
 @group\n\
 bitshift (eye (3), 1)\n\
 @result{}\n\
 @group\n\
 2 0 0\n\
@@ -675,17 +679,19 @@ bitshift (10, [-2, -1, 0, 1, 2])\n\
 */
 
 DEFUN (bitmax, args, ,
        "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {} bitmax ()\n\
 @deftypefnx {Built-in Function} {} bitmax (\"double\")\n\
 @deftypefnx {Built-in Function} {} bitmax (\"single\")\n\
 Return the largest integer that can be represented within a floating point\n\
-value.  The default class is @qcode{\"double\"}, but @qcode{\"single\"} is a\n\
+value.\n\
+\n\
+The default class is @qcode{\"double\"}, but @qcode{\"single\"} is a\n\
 valid option.  On IEEE-754 compatible systems, @code{bitmax} is\n\
 @w{@math{2^{53} - 1}} for @qcode{\"double\"} and @w{@math{2^{24} -1}} for\n\
 @qcode{\"single\"}.\n\
 @seealso{flintmax, intmax, realmax, realmin}\n\
 @end deftypefn")
 {
   octave_value retval;
   std::string cname = "double";
@@ -710,20 +716,21 @@ valid option.  On IEEE-754 compatible sy
 }
 
 DEFUN (flintmax, args, ,
        "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {} flintmax ()\n\
 @deftypefnx {Built-in Function} {} flintmax (\"double\")\n\
 @deftypefnx {Built-in Function} {} flintmax (\"single\")\n\
 Return the largest integer that can be represented consecutively in a\n\
-floating point value.  The default class is @qcode{\"double\"}, but\n\
-@qcode{\"single\"} is a valid option.  On IEEE-754 compatible systems,\n\
-@code{flintmax} is @w{@math{2^53}} for @qcode{\"double\"} and\n\
-@w{@math{2^24}} for @qcode{\"single\"}.\n\
+floating point value.\n\
+\n\
+The default class is @qcode{\"double\"}, but @qcode{\"single\"} is a valid\n\
+option.  On IEEE-754 compatible systems, @code{flintmax} is @w{@math{2^53}}\n\
+for @qcode{\"double\"} and @w{@math{2^24}} for @qcode{\"single\"}.\n\
 @seealso{bitmax, intmax, realmax, realmin}\n\
 @end deftypefn")
 {
   octave_value retval;
   std::string cname = "double";
   int nargin = args.length ();
 
   if (nargin == 1 && args(0).is_string ())
@@ -743,16 +750,17 @@ floating point value.  The default class
 
   return retval;
 }
 
 DEFUN (intmax, args, ,
        "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} intmax (@var{type})\n\
 Return the largest integer that can be represented in an integer type.\n\
+\n\
 The variable @var{type} can be\n\
 \n\
 @table @code\n\
 @item int8\n\
 signed 8-bit integer.\n\
 \n\
 @item int16\n\
 signed 16-bit integer.\n\
@@ -813,16 +821,17 @@ The default for @var{type} is @code{int3
 
   return retval;
 }
 
 DEFUN (intmin, args, ,
        "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} intmin (@var{type})\n\
 Return the smallest integer that can be represented in an integer type.\n\
+\n\
 The variable @var{type} can be\n\
 \n\
 @table @code\n\
 @item int8\n\
 signed 8-bit integer.\n\
 \n\
 @item int16\n\
 signed 16-bit integer.\n\
@@ -883,16 +892,17 @@ The default for @var{type} is @code{int3
 
   return retval;
 }
 
 DEFUN (sizemax, args, ,
        "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} sizemax ()\n\
 Return the largest value allowed for the size of an array.\n\
+\n\
 If Octave is compiled with 64-bit indexing, the result is of class int64,\n\
 otherwise it is of class int32.  The maximum array size is slightly\n\
 smaller than the maximum value allowable for the relevant class as reported\n\
 by @code{intmax}.\n\
 @seealso{intmax}\n\
 @end deftypefn")
 {
   octave_value retval;
diff --git a/libinterp/corefcn/bsxfun.cc b/libinterp/corefcn/bsxfun.cc
--- a/libinterp/corefcn/bsxfun.cc
+++ b/libinterp/corefcn/bsxfun.cc
@@ -312,24 +312,25 @@ update_index (Array<int>& idx, const dim
       idx (j) = i % dv (j);
       i = i / dv (j);
     }
 }
 
 DEFUN (bsxfun, args, ,
        "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} bsxfun (@var{f}, @var{A}, @var{B})\n\
-The binary singleton expansion function applier performs broadcasting,\n\
-that is, applies a binary function @var{f} element-by-element to two\n\
+The binary singleton expansion function performs broadcasting,\n\
+that is, it applies a binary function @var{f} element-by-element to two\n\
 array arguments @var{A} and @var{B}, and expands as necessary\n\
-singleton dimensions in either input argument.  @var{f} is a function\n\
-handle, inline function, or string containing the name of the function\n\
-to evaluate.  The function @var{f} must be capable of accepting two\n\
-column-vector arguments of equal length, or one column vector argument\n\
-and a scalar.\n\
+singleton dimensions in either input argument.\n\
+\n\
+@var{f} is a function handle, inline function, or string containing the name\n\
+of the function to evaluate.  The function @var{f} must be capable of\n\
+accepting two column-vector arguments of equal length, or one column vector\n\
+argument and a scalar.\n\
 \n\
 The dimensions of @var{A} and @var{B} must be equal or singleton.  The\n\
 singleton dimensions of the arrays will be expanded to the same\n\
 dimensionality as the other array.\n\
 @seealso{arrayfun, cellfun}\n\
 @end deftypefn")
 {
   int nargin = args.length ();
diff --git a/libinterp/corefcn/cellfun.cc b/libinterp/corefcn/cellfun.cc
--- a/libinterp/corefcn/cellfun.cc
+++ b/libinterp/corefcn/cellfun.cc
@@ -278,18 +278,20 @@ DEFUN (cellfun, args, nargout,
 @deftypefnx {Built-in Function} {} cellfun (\"isclass\", @var{C}, @var{class})\n\
 @deftypefnx {Built-in Function} {} cellfun (@var{func}, @var{C})\n\
 @deftypefnx {Built-in Function} {} cellfun (@var{func}, @var{C}, @var{D})\n\
 @deftypefnx {Built-in Function} {[@var{a}, @dots{}] =} cellfun (@dots{})\n\
 @deftypefnx {Built-in Function} {} cellfun (@dots{}, \"ErrorHandler\", @var{errfunc})\n\
 @deftypefnx {Built-in Function} {} cellfun (@dots{}, \"UniformOutput\", @var{val})\n\
 \n\
 Evaluate the function named @var{name} on the elements of the cell array\n\
-@var{C}.  Elements in @var{C} are passed on to the named function\n\
-individually.  The function @var{name} can be one of the functions\n\
+@var{C}.\n\
+\n\
+Elements in @var{C} are passed on to the named function individually.  The\n\
+function @var{name} can be one of the functions\n\
 \n\
 @table @code\n\
 @item isempty\n\
 Return 1 for empty elements.\n\
 \n\
 @item islogical\n\
 Return 1 for logical elements.\n\
 \n\
@@ -315,17 +317,17 @@ Return the size along the @var{k}-th dim
 \n\
 @item isclass\n\
 Return 1 for elements of @var{class}.\n\
 @end table\n\
 \n\
 Additionally, @code{cellfun} accepts an arbitrary function @var{func}\n\
 in the form of an inline function, function handle, or the name of a\n\
 function (in a character string).  The function can take one or more\n\
-arguments, with the inputs arguments given by @var{C}, @var{D}, etc.  \n\
+arguments, with the inputs arguments given by @var{C}, @var{D}, etc.\n\
 Equally the function can return one or more output arguments.  For example:\n\
 \n\
 @example\n\
 @group\n\
 cellfun (\"atan2\", @{1, 0@}, @{0, 1@})\n\
      @result{} [ 1.57080   0.00000 ]\n\
 @end group\n\
 @end example\n\
@@ -1061,19 +1063,21 @@ DEFUN (arrayfun, args, nargout,
        "-*- texinfo -*-\n\
 @deftypefn  {Function File} {} arrayfun (@var{func}, @var{A})\n\
 @deftypefnx {Function File} {@var{x} =} arrayfun (@var{func}, @var{A})\n\
 @deftypefnx {Function File} {@var{x} =} arrayfun (@var{func}, @var{A}, @var{b}, @dots{})\n\
 @deftypefnx {Function File} {[@var{x}, @var{y}, @dots{}] =} arrayfun (@var{func}, @var{A}, @dots{})\n\
 @deftypefnx {Function File} {} arrayfun (@dots{}, \"UniformOutput\", @var{val})\n\
 @deftypefnx {Function File} {} arrayfun (@dots{}, \"ErrorHandler\", @var{errfunc})\n\
 \n\
-Execute a function on each element of an array.  This is useful for\n\
-functions that do not accept array arguments.  If the function does\n\
-accept array arguments it is better to call the function directly.\n\
+Execute a function on each element of an array.\n\
+\n\
+This is useful for functions that do not accept array arguments.  If the\n\
+function does accept array arguments it is better to call the function\n\
+directly.\n\
 \n\
 The first input argument @var{func} can be a string, a function\n\
 handle, an inline function, or an anonymous function.  The input\n\
 argument @var{A} can be a logic array, a numeric array, a string\n\
 array, a structure array, or a cell array.  By a call of the function\n\
 @command{arrayfun} all elements of @var{A} are passed on to the named\n\
 function @var{func} individually.\n\
 \n\
@@ -1858,19 +1862,21 @@ do_object2cell (const octave_value& obj,
 
   return retval;
 }
 
 DEFUN (num2cell, args, ,
        "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {@var{C} =} num2cell (@var{A})\n\
 @deftypefnx {Built-in Function} {@var{C} =} num2cell (@var{A}, @var{dim})\n\
-Convert the numeric matrix @var{A} to a cell array.  If @var{dim} is\n\
-defined, the value @var{C} is of dimension 1 in this dimension and the\n\
-elements of @var{A} are placed into @var{C} in slices.  For example:\n\
+Convert the numeric matrix @var{A} to a cell array.\n\
+\n\
+If @var{dim} is defined, the value @var{C} is of dimension 1 in this\n\
+dimension and the elements of @var{A} are placed into @var{C} in slices.\n\
+For example:\n\
 \n\
 @example\n\
 @group\n\
 num2cell ([1,2;3,4])\n\
    @result{}\n\
       @{\n\
         [1,1] =  1\n\
         [2,1] =  3\n\
@@ -2189,22 +2195,24 @@ do_mat2cell (octave_value& a, const Arra
   return retval;
 }
 
 DEFUN (mat2cell, args, ,
        "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {@var{C} =} mat2cell (@var{A}, @var{m}, @var{n})\n\
 @deftypefnx {Built-in Function} {@var{C} =} mat2cell (@var{A}, @var{d1}, @var{d2}, @dots{})\n\
 @deftypefnx {Built-in Function} {@var{C} =} mat2cell (@var{A}, @var{r})\n\
-Convert the matrix @var{A} to a cell array.  If @var{A} is 2-D, then\n\
-it is required that @code{sum (@var{m}) == size (@var{A}, 1)} and\n\
+Convert the matrix @var{A} to a cell array.\n\
+\n\
+If @var{A} is 2-D, then it is required that\n\
+@code{sum (@var{m}) == size (@var{A}, 1)} and\n\
 @code{sum (@var{n}) == size (@var{A}, 2)}.  Similarly, if @var{A} is\n\
-multi-dimensional and the number of dimensional arguments is equal\n\
-to the dimensions of @var{A}, then it is required that @code{sum (@var{di})\n\
-== size (@var{A}, i)}.\n\
+multi-dimensional and the number of dimensional arguments is equal to the\n\
+dimensions of @var{A}, then it is required that\n\
+@code{sum (@var{di}) == size (@var{A}, i)}.\n\
 \n\
 Given a single dimensional argument @var{r}, the other dimensional\n\
 arguments are assumed to equal @code{size (@var{A},@var{i})}.\n\
 \n\
 An example of the use of mat2cell is\n\
 \n\
 @example\n\
 mat2cell (reshape (1:16,4,4), [3,1], [3,1])\n\
@@ -2360,18 +2368,19 @@ do_cellslices_nda (const NDA& array,
   return retval;
 }
 
 DEFUN (cellslices, args, ,
        "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {@var{sl} =} cellslices (@var{x}, @var{lb}, @var{ub}, @var{dim})\n\
 Given an array @var{x}, this function produces a cell array of slices from\n\
 the array determined by the index vectors @var{lb}, @var{ub}, for lower and\n\
-upper bounds, respectively.  In other words, it is equivalent to the\n\
-following code:\n\
+upper bounds, respectively.\n\
+\n\
+In other words, it is equivalent to the following code:\n\
 \n\
 @example\n\
 @group\n\
 n = length (lb);\n\
 sl = cell (1, n);\n\
 for i = 1:length (lb)\n\
   sl@{i@} = x(:,@dots{},lb(i):ub(i),@dots{},:);\n\
 endfor\n\
@@ -2493,16 +2502,18 @@ slicing is done along the first non-sing
 %! m = [1, 2, 3, 4; 5, 6, 7, 8; 9, 10, 11, 12];
 %! c = cellslices (m, [1, 2], [2, 3], 2);
 %! assert (c, {[1, 2; 5, 6; 9, 10], [2, 3; 6, 7; 10, 11]});
 */
 
 DEFUN (cellindexmat, args, ,
        "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {@var{y} =} cellindexmat (@var{x}, @var{varargin})\n\
+Perform indexing of matrices in a cell array.\n\
+\n\
 Given a cell array of matrices @var{x}, this function computes\n\
 \n\
 @example\n\
 @group\n\
 Y = cell (size (X));\n\
 for i = 1:numel (X)\n\
   Y@{i@} = X@{i@}(varargin@{:@});\n\
 endfor\n\
diff --git a/libinterp/corefcn/colloc.cc b/libinterp/corefcn/colloc.cc
--- a/libinterp/corefcn/colloc.cc
+++ b/libinterp/corefcn/colloc.cc
@@ -32,20 +32,20 @@ along with Octave; see the file COPYING.
 #include "defun.h"
 #include "error.h"
 #include "oct-obj.h"
 #include "utils.h"
 
 DEFUN (colloc, args, ,
        "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {[@var{r}, @var{amat}, @var{bmat}, @var{q}] =} colloc (@var{n}, \"left\", \"right\")\n\
-Compute derivative and integral weight matrices for orthogonal\n\
-collocation using the subroutines given in @nospell{J. Villadsen} and\n\
-@nospell{M. L. Michelsen}, @cite{Solution of Differential Equation Models by\n\
-Polynomial Approximation}.\n\
+Compute derivative and integral weight matrices for orthogonal collocation.\n\
+\n\
+Reference: @nospell{J. Villadsen}, @nospell{M. L. Michelsen},\n\
+@cite{Solution of Differential Equation Models by Polynomial Approximation}.\n\
 @end deftypefn")
 {
   octave_value_list retval;
 
   int nargin = args.length ();
 
   if (nargin < 1 || nargin > 3)
     {
diff --git a/libinterp/corefcn/conv2.cc b/libinterp/corefcn/conv2.cc
--- a/libinterp/corefcn/conv2.cc
+++ b/libinterp/corefcn/conv2.cc
@@ -34,19 +34,20 @@ along with Octave; see the file COPYING.
 
 enum Shape { SHAPE_FULL, SHAPE_SAME, SHAPE_VALID };
 
 DEFUN (conv2, args, ,
        "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {} conv2 (@var{A}, @var{B})\n\
 @deftypefnx {Built-in Function} {} conv2 (@var{v1}, @var{v2}, @var{m})\n\
 @deftypefnx {Built-in Function} {} conv2 (@dots{}, @var{shape})\n\
-Return the 2-D convolution of @var{A} and @var{B}.  The size of the result\n\
-is determined by the optional @var{shape} argument which takes the following\n\
-values\n\
+Return the 2-D convolution of @var{A} and @var{B}.\n\
+\n\
+The size of the result is determined by the optional @var{shape} argument\n\
+which takes the following values\n\
 \n\
 @table @asis\n\
 @item @var{shape} = @qcode{\"full\"}\n\
 Return the full convolution.  (default)\n\
 \n\
 @item @var{shape} = @qcode{\"same\"}\n\
 Return the central part of the convolution with the same size as @var{A}.\n\
 The central part of the convolution begins at the indices\n\
@@ -289,19 +290,20 @@ When the third argument is a matrix, ret
 %!error conv2 (ones (2), 1, 1)
 %!error conv2 (1, ones (2), 1)
 */
 
 DEFUN (convn, args, ,
        "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {@var{C} =} convn (@var{A}, @var{B})\n\
 @deftypefnx {Built-in Function} {@var{C} =} convn (@var{A}, @var{B}, @var{shape})\n\
-Return the n-D convolution of @var{A} and @var{B}.  The size of the result\n\
-is determined by the optional @var{shape} argument which takes the following\n\
-values\n\
+Return the n-D convolution of @var{A} and @var{B}.\n\
+\n\
+The size of the result is determined by the optional @var{shape} argument\n\
+which takes the following values\n\
 \n\
 @table @asis\n\
 @item @var{shape} = @qcode{\"full\"}\n\
 Return the full convolution.  (default)\n\
 \n\
 @item @var{shape} = @qcode{\"same\"}\n\
 Return central part of the convolution with the same size as @var{A}.\n\
 The central part of the convolution begins at the indices\n\
diff --git a/libinterp/corefcn/data.cc b/libinterp/corefcn/data.cc
--- a/libinterp/corefcn/data.cc
+++ b/libinterp/corefcn/data.cc
@@ -209,18 +209,19 @@ any (eye (2, 4), 2)\n\
 */
 
 // These mapping functions may also be useful in other places, eh?
 
 DEFUN (atan2, args, ,
        "-*- texinfo -*-\n\
 @deftypefn {Mapping Function} {} atan2 (@var{y}, @var{x})\n\
 Compute atan (@var{y} / @var{x}) for corresponding elements of @var{y}\n\
-and @var{x}.  Signal an error if @var{y} and @var{x} do not match in size\n\
-and orientation.\n\
+and @var{x}.\n\
+\n\
+@var{y} and @var{x} must match in size and orientation.\n\
 @seealso{tan, tand, tanh, atanh}\n\
 @end deftypefn")
 {
   octave_value retval;
 
   int nargin = args.length ();
 
   if (nargin == 2)
@@ -379,19 +380,22 @@ do_hypot (const octave_value& x, const o
   return retval;
 }
 
 DEFUN (hypot, args, ,
        "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {} hypot (@var{x}, @var{y})\n\
 @deftypefnx {Built-in Function} {} hypot (@var{x}, @var{y}, @var{z}, @dots{})\n\
 Compute the element-by-element square root of the sum of the squares of\n\
-@var{x} and @var{y}.  This is equivalent to\n\
-@code{sqrt (@var{x}.^2 + @var{y}.^2)}, but calculated in a manner that\n\
+@var{x} and @var{y}.\n\
+\n\
+This is equivalent to\n\
+@code{sqrt (@var{x}.^2 + @var{y}.^2)}, but is calculated in a manner that\n\
 avoids overflows for large values of @var{x} or @var{y}.\n\
+\n\
 @code{hypot} can also be called with more than 2 arguments; in this case,\n\
 the arguments are accumulated from left to right:\n\
 \n\
 @example\n\
 @group\n\
 hypot (hypot (@var{x}, @var{y}), @var{z})\n\
 hypot (hypot (hypot (@var{x}, @var{y}), @var{z}), @var{w}), etc.\n\
 @end group\n\
@@ -572,25 +576,26 @@ and @var{e} is an integer.  If\n\
 
 # bug #42583
 %!assert (all (log2 (pow2 (-1074:1023)) == -1074:1023))
 */
 
 DEFUN (rem, args, ,
        "-*- texinfo -*-\n\
 @deftypefn {Mapping Function} {} rem (@var{x}, @var{y})\n\
-Return the remainder of the division @code{@var{x} / @var{y}}, computed\n\
-using the expression\n\
+Return the remainder of the division @code{@var{x} / @var{y}}.\n\
+\n\
+The remainder is computed using the expression\n\
 \n\
 @example\n\
 x - y .* fix (x ./ y)\n\
 @end example\n\
 \n\
-An error message is printed if the dimensions of the arguments do not\n\
-agree, or if either of the arguments is complex.\n\
+An error message is printed if the dimensions of the arguments do not agree,\n\
+or if either of the arguments is complex.\n\
 @seealso{mod}\n\
 @end deftypefn")
 {
   octave_value retval;
 
   int nargin = args.length ();
 
   if (nargin == 2)
@@ -724,26 +729,28 @@ agree, or if either of the arguments is 
 
 # bug 42627
 %!assert (rem (0.94, 0.01), 0.0);
 */
 
 DEFUN (mod, args, ,
        "-*- texinfo -*-\n\
 @deftypefn {Mapping Function} {} mod (@var{x}, @var{y})\n\
-Compute the modulo of @var{x} and @var{y}.  Conceptually this is given by\n\
+Compute the modulo of @var{x} and @var{y}.\n\
+\n\
+Conceptually this is given by\n\
 \n\
 @example\n\
 x - y .* floor (x ./ y)\n\
 @end example\n\
 \n\
 @noindent\n\
-and is written such that the correct modulus is returned for\n\
-integer types.  This function handles negative values correctly.  That\n\
-is, @code{mod (-1, 3)} is 2, not -1, as @code{rem (-1, 3)} returns.\n\
+and is written such that the correct modulus is returned for integer types.\n\
+This function handles negative values correctly.  That is,\n\
+@code{mod (-1, 3)} is 2, not -1, as @code{rem (-1, 3)} returns.\n\
 @code{mod (@var{x}, 0)} returns @var{x}.\n\
 \n\
 An error results if the dimensions of the arguments do not agree, or if\n\
 either of the arguments is complex.\n\
 @seealso{rem}\n\
 @end deftypefn")
 {
   octave_value retval;
@@ -1135,19 +1142,19 @@ either of the arguments is complex.\n\
     print_usage (); \
  \
   return retval
 
 DEFUN (cumprod, args, ,
        "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {} cumprod (@var{x})\n\
 @deftypefnx {Built-in Function} {} cumprod (@var{x}, @var{dim})\n\
-Cumulative product of elements along dimension @var{dim}.  If\n\
-@var{dim} is omitted, it defaults to the first non-singleton dimension.\n\
-\n\
+Cumulative product of elements along dimension @var{dim}.\n\
+\n\
+If @var{dim} is omitted, it defaults to the first non-singleton dimension.\n\
 @seealso{prod, cumsum}\n\
 @end deftypefn")
 {
   DATA_REDUCTION (cumprod);
 }
 
 /*
 %!assert (cumprod ([1, 2, 3]), [1, 2, 6])
@@ -1171,18 +1178,19 @@ Cumulative product of elements along dim
 
 DEFUN (cumsum, args, ,
        "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {} cumsum (@var{x})\n\
 @deftypefnx {Built-in Function} {} cumsum (@var{x}, @var{dim})\n\
 @deftypefnx {Built-in Function} {} cumsum (@dots{}, \"native\")\n\
 @deftypefnx {Built-in Function} {} cumsum (@dots{}, \"double\")\n\
 @deftypefnx {Built-in Function} {} cumsum (@dots{}, \"extra\")\n\
-Cumulative sum of elements along dimension @var{dim}.  If @var{dim}\n\
-is omitted, it defaults to the first non-singleton dimension.\n\
+Cumulative sum of elements along dimension @var{dim}.\n\
+\n\
+If @var{dim} is omitted, it defaults to the first non-singleton dimension.\n\
 \n\
 See @code{sum} for an explanation of the optional parameters\n\
 @qcode{\"native\"}, @qcode{\"double\"}, and @qcode{\"extra\"}.\n\
 @seealso{sum, cumprod}\n\
 @end deftypefn")
 {
   octave_value retval;
 
@@ -1317,21 +1325,22 @@ See @code{sum} for an explanation of the
 
 DEFUN (diag, args, ,
        "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {@var{M} =} diag (@var{v})\n\
 @deftypefnx {Built-in Function} {@var{M} =} diag (@var{v}, @var{k})\n\
 @deftypefnx {Built-in Function} {@var{M} =} diag (@var{v}, @var{m}, @var{n})\n\
 @deftypefnx {Built-in Function} {@var{v} =} diag (@var{M})\n\
 @deftypefnx {Built-in Function} {@var{v} =} diag (@var{M}, @var{k})\n\
-Return a diagonal matrix with vector @var{v} on diagonal @var{k}.  The\n\
-second argument is optional.  If it is positive, the vector is placed on\n\
+Return a diagonal matrix with vector @var{v} on diagonal @var{k}.\n\
+\n\
+The second argument is optional.  If it is positive, the vector is placed on\n\
 the @var{k}-th superdiagonal.  If it is negative, it is placed on the\n\
-@var{-k}-th subdiagonal.  The default value of @var{k} is 0, and the\n\
-vector is placed on the main diagonal.  For example:\n\
+@var{-k}-th subdiagonal.  The default value of @var{k} is 0, and the vector\n\
+is placed on the main diagonal.  For example:\n\
 \n\
 @example\n\
 @group\n\
 diag ([1, 2, 3], 1)\n\
    @result{}  0  1  0  0\n\
        0  0  2  0\n\
        0  0  0  3\n\
        0  0  0  0\n\
@@ -2590,20 +2599,21 @@ do_permute (const octave_value_list& arg
 
   return retval;
 }
 
 DEFUN (permute, args, ,
        "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} permute (@var{A}, @var{perm})\n\
 Return the generalized transpose for an N-D array object @var{A}.\n\
+\n\
 The permutation vector @var{perm} must contain the elements\n\
 @code{1:ndims (A)} (in any order, but each element must appear only once).\n\
 \n\
-The @var{N}th dimension of @var{A} gets remapped to dimension \n\
+The @var{N}th dimension of @var{A} gets remapped to dimension\n\
 @code{@var{PERM}(@var{N})}.  For example:\n\
 \n\
 @example\n\
 @group\n\
 @var{x} = zeros ([2, 3, 5, 7]);\n\
 size (@var{x})\n\
    @result{}  2   3   5   7\n\
 \n\
@@ -2622,17 +2632,19 @@ size (permute (@var{x}, [1, 2, 3, 4]))\n
 @end deftypefn")
 {
   return do_permute (args, false);
 }
 
 DEFUN (ipermute, args, ,
        "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} ipermute (@var{A}, @var{iperm})\n\
-The inverse of the @code{permute} function.  The expression\n\
+The inverse of the @code{permute} function.\n\
+\n\
+The expression\n\
 \n\
 @example\n\
 ipermute (permute (A, perm), perm)\n\
 @end example\n\
 \n\
 @noindent\n\
 returns the original array @var{A}.\n\
 @seealso{permute}\n\
@@ -2662,17 +2674,18 @@ with @sc{matlab}).\n\
 
   return retval;
 }
 
 DEFUN (ndims, args, ,
        "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} ndims (@var{a})\n\
 Return the number of dimensions of @var{a}.\n\
-For any array, the result will always be larger than or equal to 2.\n\
+\n\
+For any array, the result will always be greater than or equal to 2.\n\
 Trailing singleton dimensions are not counted.\n\
 \n\
 @example\n\
 @group\n\
 ndims (ones (4, 1, 2, 1))\n\
     @result{} 3\n\
 @end group\n\
 @end example\n\
@@ -2689,16 +2702,17 @@ ndims (ones (4, 1, 2, 1))\n\
   return retval;
 }
 
 DEFUN (numel, args, ,
        "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {} numel (@var{a})\n\
 @deftypefnx {Built-in Function} {} numel (@var{a}, @var{idx1}, @var{idx2}, @dots{})\n\
 Return the number of elements in the object @var{a}.\n\
+\n\
 Optionally, if indices @var{idx1}, @var{idx2}, @dots{} are supplied,\n\
 return the number of elements that would result from the indexing\n\
 \n\
 @example\n\
 @var{a}(@var{idx1}, @var{idx2}, @dots{})\n\
 @end example\n\
 \n\
 Note that the indices do not have to be numerical.  For example,\n\
@@ -2826,18 +2840,19 @@ returns the number of columns in the giv
 
   return retval;
 }
 
 DEFUN (size_equal, args, ,
        "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} size_equal (@var{a}, @var{b}, @dots{})\n\
 Return true if the dimensions of all arguments agree.\n\
+\n\
 Trailing singleton dimensions are ignored.\n\
-Called with a single or no argument, size_equal returns true.\n\
+When called with a single or no argument @code{size_equal} returns true.\n\
 @seealso{size, numel, ndims}\n\
 @end deftypefn")
 {
   octave_value retval;
 
   int nargin = args.length ();
 
   retval = true;
@@ -3162,18 +3177,19 @@ inputs, @qcode{\"extra\"} is the same as
 %!error sum (1,2,3)
 %!error <unrecognized type argument 'foobar'> sum (1, "foobar")
 */
 
 DEFUN (sumsq, args, ,
        "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {} sumsq (@var{x})\n\
 @deftypefnx {Built-in Function} {} sumsq (@var{x}, @var{dim})\n\
-Sum of squares of elements along dimension @var{dim}.  If @var{dim}\n\
-is omitted, it defaults to the first non-singleton dimension.\n\
+Sum of squares of elements along dimension @var{dim}.\n\
+\n\
+If @var{dim} is omitted, it defaults to the first non-singleton dimension.\n\
 \n\
 This function is conceptually equivalent to computing\n\
 \n\
 @example\n\
 sum (x .* conj (x), dim)\n\
 @end example\n\
 \n\
 @noindent\n\
@@ -3235,16 +3251,17 @@ DEFALIAS (isbool, islogical);
 %!assert (islogical (sparse ([true, false])), true)
 %!assert (islogical (sparse ([1, 0])), false)
 */
 
 DEFUN (isinteger, args, ,
        "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} isinteger (@var{x})\n\
 Return true if @var{x} is an integer object (int8, uint8, int16, etc.).\n\
+\n\
 Note that @w{@code{isinteger (14)}} is false because numeric constants in\n\
 Octave are double precision floating point values.\n\
 @seealso{isfloat, ischar, islogical, isnumeric, isa}\n\
 @end deftypefn")
 {
   octave_value retval;
 
   if (args.length () == 1)
@@ -3271,16 +3288,17 @@ Return true if @var{x} is a complex-valu
 
   return retval;
 }
 
 DEFUN (isfloat, args, ,
        "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} isfloat (@var{x})\n\
 Return true if @var{x} is a floating-point numeric object.\n\
+\n\
 Objects of class double or single are floating-point objects.\n\
 @seealso{isinteger, ischar, islogical, isnumeric, isa}\n\
 @end deftypefn")
 {
   octave_value retval;
 
   if (args.length () == 1)
     retval = args(0).is_float_type ();
@@ -3292,20 +3310,23 @@ Objects of class double or single are fl
 
 // FIXME: perhaps this should be implemented with an
 // octave_value member function?
 
 DEFUN (complex, args, ,
        "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {} complex (@var{x})\n\
 @deftypefnx {Built-in Function} {} complex (@var{re}, @var{im})\n\
-Return a complex result from real arguments.  With 1 real argument @var{x},\n\
-return the complex result @code{@var{x} + 0i}.  With 2 real arguments,\n\
-return the complex result @code{@var{re} + @var{im}}.  @code{complex} can\n\
-often be more convenient than expressions such as @code{a + i*b}.\n\
+Return a complex value from real arguments.\n\
+\n\
+With 1 real argument @var{x}, return the complex result @code{@var{x} + 0i}.\n\
+\n\
+With 2 real arguments, return the complex result @code{@var{re} + @var{im}}.\n\
+@code{complex} can often be more convenient than expressions such as\n\
+@code{a + i*b}.\n\
 For example:\n\
 \n\
 @example\n\
 @group\n\
 complex ([1, 2], [3, 4])\n\
   @result{} [ 1 + 3i   2 + 4i ]\n\
 @end group\n\
 @end example\n\
@@ -3593,16 +3614,17 @@ complex ([1, 2], [3, 4])\n\
 
   return retval;
 }
 
 DEFUN (isreal, args, ,
        "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} isreal (@var{x})\n\
 Return true if @var{x} is a non-complex matrix or scalar.\n\
+\n\
 For compatibility with @sc{matlab}, this includes logical and character\n\
 matrices.\n\
 @seealso{iscomplex, isnumeric, isa}\n\
 @end deftypefn")
 {
   octave_value retval;
 
   if (args.length () == 1)
@@ -3612,17 +3634,17 @@ matrices.\n\
 
   return retval;
 }
 
 DEFUN (isempty, args, ,
        "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} isempty (@var{a})\n\
 Return true if @var{a} is an empty matrix (any one of its dimensions is\n\
-zero).  Otherwise, return false.\n\
+zero).\n\
 @seealso{isnull, isa}\n\
 @end deftypefn")
 {
   octave_value retval = false;
 
   if (args.length () == 1)
     retval = args(0).is_empty ();
   else
@@ -3635,18 +3657,19 @@ zero).  Otherwise, return false.\n\
 %% Debian bug #706376
 %!assert (isempty (speye(2^16)), false)
 */
 
 DEFUN (isnumeric, args, ,
        "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} isnumeric (@var{x})\n\
 Return true if @var{x} is a numeric object, i.e., an integer, real, or\n\
-complex array.  Logical and character arrays are not considered to be\n\
-numeric.\n\
+complex array.\n\
+\n\
+Logical and character arrays are not considered to be numeric.\n\
 @seealso{isinteger, isfloat, isreal, iscomplex, islogical, ischar, iscell, isstruct, isa}\n\
 @end deftypefn")
 {
   octave_value retval;
 
   if (args.length () == 1)
     retval = args(0).is_numeric_type ();
   else
@@ -4361,23 +4384,25 @@ fill_matrix (const octave_value_list& ar
 DEFUN (ones, args, ,
        "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {} ones (@var{n})\n\
 @deftypefnx {Built-in Function} {} ones (@var{m}, @var{n})\n\
 @deftypefnx {Built-in Function} {} ones (@var{m}, @var{n}, @var{k}, @dots{})\n\
 @deftypefnx {Built-in Function} {} ones ([@var{m} @var{n} @dots{}])\n\
 @deftypefnx {Built-in Function} {} ones (@dots{}, @var{class})\n\
 Return a matrix or N-dimensional array whose elements are all 1.\n\
+\n\
 If invoked with a single scalar integer argument @var{n}, return a square\n\
-@nospell{NxN} matrix.  If invoked with two or more scalar\n\
-integer arguments, or a vector of integer values, return an array with\n\
-the given dimensions.\n\
-\n\
-If you need to create a matrix whose values are all the same, you should\n\
-use an expression like\n\
+@nospell{NxN} matrix.\n\
+\n\
+If invoked with two or more scalar integer arguments, or a vector of integer\n\
+values, return an array with the given dimensions.\n\
+\n\
+To create a constant matrix whose values are all the same use an expression\n\
+such as\n\
 \n\
 @example\n\
 val_matrix = val * ones (m, n)\n\
 @end example\n\
 \n\
 The optional argument @var{class} specifies the class of the return array\n\
 and defaults to double.  For example:\n\
 \n\
@@ -4410,20 +4435,22 @@ val = ones (m,n, \"uint8\")\n\
 DEFUN (zeros, args, ,
        "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {} zeros (@var{n})\n\
 @deftypefnx {Built-in Function} {} zeros (@var{m}, @var{n})\n\
 @deftypefnx {Built-in Function} {} zeros (@var{m}, @var{n}, @var{k}, @dots{})\n\
 @deftypefnx {Built-in Function} {} zeros ([@var{m} @var{n} @dots{}])\n\
 @deftypefnx {Built-in Function} {} zeros (@dots{}, @var{class})\n\
 Return a matrix or N-dimensional array whose elements are all 0.\n\
+\n\
 If invoked with a single scalar integer argument, return a square\n\
-@nospell{NxN} matrix.  If invoked with two or more scalar\n\
-integer arguments, or a vector of integer values, return an array with\n\
-the given dimensions.\n\
+@nospell{NxN} matrix.\n\
+\n\
+If invoked with two or more scalar integer arguments, or a vector of integer\n\
+values, return an array with the given dimensions.\n\
 \n\
 The optional argument @var{class} specifies the class of the return array\n\
 and defaults to double.  For example:\n\
 \n\
 @example\n\
 val = zeros (m,n, \"uint8\")\n\
 @end example\n\
 @seealso{ones}\n\
@@ -4469,20 +4496,24 @@ produce infinity are division by zero an
 @example\n\
 @group\n\
 [ 1/0 e^800 ]\n\
 @result{} Inf   Inf\n\
 @end group\n\
 @end example\n\
 \n\
 When called with no arguments, return a scalar with the value @samp{Inf}.\n\
+\n\
 When called with a single argument, return a square matrix with the dimension\n\
-specified.  When called with more than one scalar argument the first two\n\
-arguments are taken as the number of rows and columns and any further\n\
-arguments specify additional matrix dimensions.\n\
+specified.\n\
+\n\
+When called with more than one scalar argument the first two arguments are\n\
+taken as the number of rows and columns and any further arguments specify\n\
+additional matrix dimensions.\n\
+\n\
 The optional argument @var{class} specifies the return type and may be\n\
 either @qcode{\"double\"} or @qcode{\"single\"}.\n\
 @seealso{isinf, NaN}\n\
 @end deftypefn")
 {
   return fill_matrix (args, lo_ieee_inf_value (),
                       lo_ieee_float_inf_value (), "Inf");
 }
@@ -4513,35 +4544,41 @@ DEFUN (NaN, args, ,
 \n\
 @deftypefn  {Built-in Function} {} NaN\n\
 @deftypefnx {Built-in Function} {} NaN (@var{n})\n\
 @deftypefnx {Built-in Function} {} NaN (@var{n}, @var{m})\n\
 @deftypefnx {Built-in Function} {} NaN (@var{n}, @var{m}, @var{k}, @dots{})\n\
 @deftypefnx {Built-in Function} {} NaN (@dots{}, @var{class})\n\
 Return a scalar, matrix, or N-dimensional array whose elements are all equal\n\
 to the IEEE symbol NaN (Not a Number).\n\
+\n\
 NaN is the result of operations which do not produce a well defined numerical\n\
 result.  Common operations which produce a NaN are arithmetic with infinity\n\
 @tex\n\
 ($\\infty - \\infty$), zero divided by zero ($0/0$),\n\
 @end tex\n\
 @ifnottex\n\
 (Inf - Inf), zero divided by zero (0/0),\n\
 @end ifnottex\n\
 and any operation involving another NaN value (5 + NaN).\n\
 \n\
 Note that NaN always compares not equal to NaN (NaN != NaN).  This behavior\n\
-is specified by the IEEE standard for floating point arithmetic.  To\n\
-find NaN values, use the @code{isnan} function.\n\
+is specified by the IEEE standard for floating point arithmetic.  To find\n\
+NaN values, use the @code{isnan} function.\n\
 \n\
 When called with no arguments, return a scalar with the value @samp{NaN}.\n\
+\n\
 When called with a single argument, return a square matrix with the dimension\n\
-specified.  When called with more than one scalar argument the first two\n\
-arguments are taken as the number of rows and columns and any further\n\
-arguments specify additional matrix dimensions.\n\
+specified.\n\
+\n\
+When called with more than one scalar argument the first two arguments are\n\
+taken as the number of rows and columns and any further arguments specify\n\
+additional matrix dimensions.\n\
+\n\
+\n\
 The optional argument @var{class} specifies the return type and may be\n\
 either @qcode{\"double\"} or @qcode{\"single\"}.\n\
 @seealso{isnan, Inf}\n\
 @end deftypefn")
 {
   return fill_matrix (args, lo_ieee_nan_value (),
                       lo_ieee_float_nan_value (), "NaN");
 }
@@ -4568,29 +4605,35 @@ DEFALIAS (nan, NaN);
 DEFUN (e, args, ,
        "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {} e\n\
 @deftypefnx {Built-in Function} {} e (@var{n})\n\
 @deftypefnx {Built-in Function} {} e (@var{n}, @var{m})\n\
 @deftypefnx {Built-in Function} {} e (@var{n}, @var{m}, @var{k}, @dots{})\n\
 @deftypefnx {Built-in Function} {} e (@dots{}, @var{class})\n\
 Return a scalar, matrix, or N-dimensional array whose elements are all equal\n\
-to the base of natural logarithms.  The constant\n\
+to the base of natural logarithms.\n\
+\n\
+The constant\n\
 @tex\n\
 $e$ satisfies the equation $\\log (e) = 1$.\n\
 @end tex\n\
 @ifnottex\n\
 @samp{e} satisfies the equation @code{log} (e) = 1.\n\
 @end ifnottex\n\
 \n\
-When called with no arguments, return a scalar with the value @math{e}.  When\n\
-called with a single argument, return a square matrix with the dimension\n\
-specified.  When called with more than one scalar argument the first two\n\
-arguments are taken as the number of rows and columns and any further\n\
-arguments specify additional matrix dimensions.\n\
+When called with no arguments, return a scalar with the value @math{e}.\n\
+\n\
+When called with a single argument, return a square matrix with the dimension\n\
+specified.\n\
+\n\
+When called with more than one scalar argument the first two arguments are\n\
+taken as the number of rows and columns and any further arguments specify\n\
+additional matrix dimensions.\n\
+\n\
 The optional argument @var{class} specifies the return type and may be\n\
 either @qcode{\"double\"} or @qcode{\"single\"}.\n\
 @seealso{log, exp, pi, I}\n\
 @end deftypefn")
 {
 #if defined (M_E)
   double e_val = M_E;
 #else
@@ -4603,37 +4646,40 @@ either @qcode{\"double\"} or @qcode{\"si
 DEFUN (eps, args, ,
        "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {} eps\n\
 @deftypefnx {Built-in Function} {} eps (@var{x})\n\
 @deftypefnx {Built-in Function} {} eps (@var{n}, @var{m})\n\
 @deftypefnx {Built-in Function} {} eps (@var{n}, @var{m}, @var{k}, @dots{})\n\
 @deftypefnx {Built-in Function} {} eps (@dots{}, @var{class})\n\
 Return a scalar, matrix or N-dimensional array whose elements are all eps,\n\
-the machine precision.  More precisely, @code{eps} is the relative spacing\n\
-between any two adjacent numbers in the machine's floating point system.\n\
-This number is obviously system dependent.  On machines that support IEEE\n\
-floating point arithmetic, @code{eps} is approximately\n\
+the machine precision.\n\
+\n\
+More precisely, @code{eps} is the relative spacing between any two adjacent\n\
+numbers in the machine's floating point system.  This number is obviously\n\
+system dependent.  On machines that support IEEE floating point arithmetic,\n\
+@code{eps} is approximately\n\
 @tex\n\
 $2.2204\\times10^{-16}$ for double precision and $1.1921\\times10^{-7}$\n\
 @end tex\n\
 @ifnottex\n\
 2.2204e-16 for double precision and 1.1921e-07\n\
 @end ifnottex\n\
 for single precision.\n\
 \n\
 When called with no arguments, return a scalar with the value\n\
 @code{eps (1.0)}.\n\
-Given a single argument @var{x}, return the distance between @var{x} and\n\
-the next largest value.\n\
+\n\
+Given a single argument @var{x}, return the distance between @var{x} and the\n\
+next largest value.\n\
+\n\
 When called with more than one argument the first two arguments are taken as\n\
-the number of rows and columns and any further\n\
-arguments specify additional matrix dimensions.\n\
-The optional argument @var{class} specifies the return type and may be\n\
-either @qcode{\"double\"} or @qcode{\"single\"}.\n\
+the number of rows and columns and any further arguments specify additional\n\
+matrix dimensions.  The optional argument @var{class} specifies the return\n\
+type and may be either @qcode{\"double\"} or @qcode{\"single\"}.\n\
 @seealso{realmax, realmin, intmax, bitmax}\n\
 @end deftypefn")
 {
   int nargin = args.length ();
   octave_value retval;
 
   if (nargin == 1 && ! args(0).is_string ())
     {
@@ -4733,29 +4779,34 @@ DEFUN (pi, args, ,
 Return a scalar, matrix, or N-dimensional array whose elements are all equal\n\
 to the ratio of the circumference of a circle to its\n\
 @tex\n\
 diameter($\\pi$).\n\
 @end tex\n\
 @ifnottex\n\
 diameter.\n\
 @end ifnottex\n\
+\n\
 Internally, @code{pi} is computed as @samp{4.0 * atan (1.0)}.\n\
 \n\
 When called with no arguments, return a scalar with the value of\n\
 @tex\n\
 $\\pi$.\n\
 @end tex\n\
 @ifnottex\n\
 pi.\n\
 @end ifnottex\n\
+\n\
 When called with a single argument, return a square matrix with the dimension\n\
-specified.  When called with more than one scalar argument the first two\n\
-arguments are taken as the number of rows and columns and any further\n\
-arguments specify additional matrix dimensions.\n\
+specified.\n\
+\n\
+When called with more than one scalar argument the first two arguments are\n\
+taken as the number of rows and columns and any further arguments specify\n\
+additional matrix dimensions.\n\
+\n\
 The optional argument @var{class} specifies the return type and may be\n\
 either @qcode{\"double\"} or @qcode{\"single\"}.\n\
 @seealso{e, I}\n\
 @end deftypefn")
 {
 #if defined (M_PI)
   double pi_val = M_PI;
 #else
@@ -4767,68 +4818,78 @@ either @qcode{\"double\"} or @qcode{\"si
 
 DEFUN (realmax, args, ,
        "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {} realmax\n\
 @deftypefnx {Built-in Function} {} realmax (@var{n})\n\
 @deftypefnx {Built-in Function} {} realmax (@var{n}, @var{m})\n\
 @deftypefnx {Built-in Function} {} realmax (@var{n}, @var{m}, @var{k}, @dots{})\n\
 @deftypefnx {Built-in Function} {} realmax (@dots{}, @var{class})\n\
-Return a scalar, matrix or N-dimensional array whose elements are all equal\n\
-to the largest floating point number that is representable.  The actual\n\
-value is system dependent.  On machines that support IEEE\n\
+Return a scalar, matrix, or N-dimensional array whose elements are all equal\n\
+to the largest floating point number that is representable.\n\
+\n\
+The actual value is system dependent.  On machines that support IEEE\n\
 floating point arithmetic, @code{realmax} is approximately\n\
 @tex\n\
 $1.7977\\times10^{308}$ for double precision and $3.4028\\times10^{38}$\n\
 @end tex\n\
 @ifnottex\n\
 1.7977e+308 for double precision and 3.4028e+38\n\
 @end ifnottex\n\
 for single precision.\n\
 \n\
 When called with no arguments, return a scalar with the value\n\
 @code{realmax (@qcode{\"double\"})}.\n\
+\n\
 When called with a single argument, return a square matrix with the dimension\n\
-specified.  When called with more than one scalar argument the first two\n\
-arguments are taken as the number of rows and columns and any further\n\
-arguments specify additional matrix dimensions.\n\
+specified.\n\
+\n\
+When called with more than one scalar argument the first two arguments are\n\
+taken as the number of rows and columns and any further arguments specify\n\
+additional matrix dimensions.\n\
+\n\
 The optional argument @var{class} specifies the return type and may be\n\
 either @qcode{\"double\"} or @qcode{\"single\"}.\n\
 @seealso{realmin, intmax, bitmax, eps}\n\
 @end deftypefn")
 {
   return fill_matrix (args, std::numeric_limits<double>::max (),
                       std::numeric_limits<float>::max (), "realmax");
 }
 
 DEFUN (realmin, args, ,
        "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {} realmin\n\
 @deftypefnx {Built-in Function} {} realmin (@var{n})\n\
 @deftypefnx {Built-in Function} {} realmin (@var{n}, @var{m})\n\
 @deftypefnx {Built-in Function} {} realmin (@var{n}, @var{m}, @var{k}, @dots{})\n\
 @deftypefnx {Built-in Function} {} realmin (@dots{}, @var{class})\n\
-Return a scalar, matrix or N-dimensional array whose elements are all equal\n\
+Return a scalar, matrix, or N-dimensional array whose elements are all equal\n\
 to the smallest normalized floating point number that is representable.\n\
+\n\
 The actual value is system dependent.  On machines that support\n\
 IEEE floating point arithmetic, @code{realmin} is approximately\n\
 @tex\n\
 $2.2251\\times10^{-308}$ for double precision and $1.1755\\times10^{-38}$\n\
 @end tex\n\
 @ifnottex\n\
 2.2251e-308 for double precision and 1.1755e-38\n\
 @end ifnottex\n\
 for single precision.\n\
 \n\
 When called with no arguments, return a scalar with the value\n\
 @code{realmin (@qcode{\"double\"})}.\n\
+\n\
 When called with a single argument, return a square matrix with the dimension\n\
-specified.  When called with more than one scalar argument the first two\n\
-arguments are taken as the number of rows and columns and any further\n\
-arguments specify additional matrix dimensions.\n\
+specified.\n\
+\n\
+When called with more than one scalar argument the first two arguments are\n\
+taken as the number of rows and columns and any further arguments specify\n\
+additional matrix dimensions.\n\
+\n\
 The optional argument @var{class} specifies the return type and may be\n\
 either @qcode{\"double\"} or @qcode{\"single\"}.\n\
 @seealso{realmax, intmin, eps}\n\
 @end deftypefn")
 {
   return fill_matrix (args, std::numeric_limits<double>::min (),
                       std::numeric_limits<float>::min (), "realmin");
 }
@@ -4852,21 +4913,25 @@ to the pure imaginary unit, defined as\n
 @end tex\n\
 @ifnottex\n\
 @code{sqrt (-1)}.\n\
 @end ifnottex\n\
 \n\
 I, and its equivalents i, j, and J, are functions so any of the names may\n\
 be reused for other purposes (such as i for a counter variable).\n\
 \n\
-When called with no arguments, return a scalar with the value @math{i}.  When\n\
-called with a single argument, return a square matrix with the dimension\n\
-specified.  When called with more than one scalar argument the first two\n\
-arguments are taken as the number of rows and columns and any further\n\
-arguments specify additional matrix dimensions.\n\
+When called with no arguments, return a scalar with the value @math{i}.\n\
+\n\
+When called with a single argument, return a square matrix with the dimension\n\
+specified.\n\
+\n\
+When called with more than one scalar argument the first two arguments are\n\
+taken as the number of rows and columns and any further arguments specify\n\
+additional matrix dimensions.\n\
+\n\
 The optional argument @var{class} specifies the return type and may be\n\
 either @qcode{\"double\"} or @qcode{\"single\"}.\n\
 @seealso{e, pi, log, exp}\n\
 @end deftypefn")
 {
   return fill_matrix (args, Complex (0.0, 1.0), "I");
 }
 
@@ -4883,20 +4948,24 @@ DEFUN (NA, args, ,
 @deftypefnx {Built-in Function} {} NA (@dots{}, @var{class})\n\
 Return a scalar, matrix, or N-dimensional array whose elements are all equal\n\
 to the special constant used to designate missing values.\n\
 \n\
 Note that NA always compares not equal to NA (NA != NA).\n\
 To find NA values, use the @code{isna} function.\n\
 \n\
 When called with no arguments, return a scalar with the value @samp{NA}.\n\
+\n\
 When called with a single argument, return a square matrix with the dimension\n\
-specified.  When called with more than one scalar argument the first two\n\
-arguments are taken as the number of rows and columns and any further\n\
-arguments specify additional matrix dimensions.\n\
+specified.\n\
+\n\
+When called with more than one scalar argument the first two arguments are\n\
+taken as the number of rows and columns and any further arguments specify\n\
+additional matrix dimensions.\n\
+\n\
 The optional argument @var{class} specifies the return type and may be\n\
 either @qcode{\"double\"} or @qcode{\"single\"}.\n\
 @seealso{isna}\n\
 @end deftypefn")
 {
   return fill_matrix (args, lo_ieee_na_value (),
                       lo_ieee_float_na_value (), "NA");
 }
@@ -4907,36 +4976,40 @@ either @qcode{\"double\"} or @qcode{\"si
 */
 
 DEFUN (false, args, ,
        "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {} false (@var{x})\n\
 @deftypefnx {Built-in Function} {} false (@var{n}, @var{m})\n\
 @deftypefnx {Built-in Function} {} false (@var{n}, @var{m}, @var{k}, @dots{})\n\
 Return a matrix or N-dimensional array whose elements are all logical 0.\n\
+\n\
 If invoked with a single scalar integer argument, return a square\n\
-matrix of the specified size.  If invoked with two or more scalar\n\
-integer arguments, or a vector of integer values, return an array with\n\
-given dimensions.\n\
+matrix of the specified size.\n\
+\n\
+If invoked with two or more scalar integer arguments, or a vector of integer\n\
+values, return an array with given dimensions.\n\
 @seealso{true}\n\
 @end deftypefn")
 {
   return fill_matrix (args, false, "false");
 }
 
 DEFUN (true, args, ,
        "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {} true (@var{x})\n\
 @deftypefnx {Built-in Function} {} true (@var{n}, @var{m})\n\
 @deftypefnx {Built-in Function} {} true (@var{n}, @var{m}, @var{k}, @dots{})\n\
 Return a matrix or N-dimensional array whose elements are all logical 1.\n\
+\n\
 If invoked with a single scalar integer argument, return a square\n\
-matrix of the specified size.  If invoked with two or more scalar\n\
-integer arguments, or a vector of integer values, return an array with\n\
-given dimensions.\n\
+matrix of the specified size.\n\
+\n\
+If invoked with two or more scalar integer arguments, or a vector of integer\n\
+values, return an array with given dimensions.\n\
 @seealso{false}\n\
 @end deftypefn")
 {
   return fill_matrix (args, true, "true");
 }
 
 template <class MT>
 octave_value
@@ -5054,22 +5127,25 @@ identity_matrix (int nr, int nc, oct_dat
 #undef INT_EYE_MATRIX
 
 DEFUN (eye, args, ,
        "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {} eye (@var{n})\n\
 @deftypefnx {Built-in Function} {} eye (@var{m}, @var{n})\n\
 @deftypefnx {Built-in Function} {} eye ([@var{m} @var{n}])\n\
 @deftypefnx {Built-in Function} {} eye (@dots{}, @var{class})\n\
-Return an identity matrix.  If invoked with a single scalar argument @var{n},\n\
-return a square @nospell{NxN} identity matrix.  If\n\
-supplied two scalar arguments (@var{m}, @var{n}), @code{eye} takes them to be\n\
-the number of rows and columns.  If given a vector with two elements,\n\
-@code{eye} uses the values of the elements as the number of rows and columns,\n\
-respectively.  For example:\n\
+Return an identity matrix.\n\
+\n\
+If invoked with a single scalar argument @var{n}, return a square\n\
+@nospell{NxN} identity matrix.\n\
+\n\
+If supplied two scalar arguments (@var{m}, @var{n}), @code{eye} takes them\n\
+to be the number of rows and columns.  If given a vector with two elements,\n\
+@code{eye} uses the values of the elements as the number of rows and\n\
+columns, respectively.  For example:\n\
 \n\
 @example\n\
 @group\n\
 eye (3)\n\
  @result{}  1  0  0\n\
      0  1  0\n\
      0  0  1\n\
 @end group\n\
@@ -5089,19 +5165,19 @@ eye (size ([1, 2; 3, 4]))\n\
 \n\
 The optional argument @var{class}, allows @code{eye} to return an array of\n\
 the specified type, like\n\
 \n\
 @example\n\
 val = zeros (n,m, \"uint8\")\n\
 @end example\n\
 \n\
-Calling @code{eye} with no arguments is equivalent to calling it\n\
-with an argument of 1.  Any negative dimensions are treated as zero. \n\
-These odd definitions are for compatibility with @sc{matlab}.\n\
+Calling @code{eye} with no arguments is equivalent to calling it with an\n\
+argument of 1.  Any negative dimensions are treated as zero.  These odd\n\
+definitions are for compatibility with @sc{matlab}.\n\
 @seealso{speye, ones, zeros}\n\
 @end deftypefn")
 {
   octave_value retval;
 
   int nargin = args.length ();
 
   oct_data_conv::data_type dt = oct_data_conv::dt_double;
@@ -5210,25 +5286,26 @@ do_linspace (const octave_value& base, c
   return retval;
 }
 
 DEFUN (linspace, args, ,
        "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {} linspace (@var{base}, @var{limit})\n\
 @deftypefnx {Built-in Function} {} linspace (@var{base}, @var{limit}, @var{n})\n\
 Return a row vector with @var{n} linearly spaced elements between\n\
-@var{base} and @var{limit}.  If the number of elements is greater than one,\n\
-then the endpoints @var{base} and @var{limit} are always included in\n\
-the range.  If @var{base} is greater than @var{limit}, the elements are\n\
-stored in decreasing order.  If the number of points is not specified, a\n\
-value of 100 is used.\n\
-\n\
-The @code{linspace} function always returns a row vector if both\n\
-@var{base} and @var{limit} are scalars.  If one, or both, of them are column\n\
-vectors, @code{linspace} returns a matrix.\n\
+@var{base} and @var{limit}.\n\
+\n\
+If the number of elements is greater than one, then the endpoints @var{base}\n\
+and @var{limit} are always included in the range.  If @var{base} is greater\n\
+than @var{limit}, the elements are stored in decreasing order.  If the\n\
+number of points is not specified, a value of 100 is used.\n\
+\n\
+The @code{linspace} function always returns a row vector if both @var{base}\n\
+and @var{limit} are scalars.  If one, or both, of them are column vectors,\n\
+@code{linspace} returns a matrix.\n\
 \n\
 For compatibility with @sc{matlab}, return the second argument (@var{limit})\n\
 if fewer than two values are requested.\n\
 @seealso{logspace}\n\
 @end deftypefn")
 {
   octave_value retval;
 
@@ -5395,33 +5472,35 @@ Resizing an object to fewer dimensions i
 
 DEFUN (reshape, args, ,
        "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {} reshape (@var{A}, @var{m}, @var{n}, @dots{})\n\
 @deftypefnx {Built-in Function} {} reshape (@var{A}, [@var{m} @var{n} @dots{}])\n\
 @deftypefnx {Built-in Function} {} reshape (@var{A}, @dots{}, [], @dots{})\n\
 @deftypefnx {Built-in Function} {} reshape (@var{A}, @var{size})\n\
 Return a matrix with the specified dimensions (@var{m}, @var{n}, @dots{})\n\
-whose elements are taken from the matrix @var{A}.  The elements of the\n\
-matrix are accessed in column-major order (like Fortran arrays are stored).\n\
+whose elements are taken from the matrix @var{A}.\n\
+\n\
+The elements of the matrix are accessed in column-major order (like Fortran\n\
+arrays are stored).\n\
 \n\
 The following code demonstrates reshaping a 1x4 row vector into a 2x2 square\n\
 matrix.\n\
 \n\
 @example\n\
 @group\n\
 reshape ([1, 2, 3, 4], 2, 2)\n\
       @result{}  1  3\n\
           2  4\n\
 @end group\n\
 @end example\n\
 \n\
 @noindent\n\
-Note that the total number of elements in the original\n\
-matrix (@code{prod (size (@var{A}))}) must match the total number of elements\n\
+Note that the total number of elements in the original matrix\n\
+(@code{prod (size (@var{A}))}) must match the total number of elements\n\
 in the new matrix (@code{prod ([@var{m} @var{n} @dots{}])}).\n\
 \n\
 A single dimension of the return matrix may be left unspecified and Octave\n\
 will determine its size automatically.  An empty matrix ([]) is used to flag\n\
 the unspecified dimension.\n\
 @seealso{resize, vec, postpad, cat, squeeze}\n\
 @end deftypefn")
 {
@@ -5543,20 +5622,23 @@ the unspecified dimension.\n\
 %!error <SIZE is not divisible> reshape (1:3, 3, [], 2)
 */
 
 DEFUN (vec, args, ,
        "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {@var{v} =} vec (@var{x})\n\
 @deftypefnx {Built-in Function} {@var{v} =} vec (@var{x}, @var{dim})\n\
 Return the vector obtained by stacking the columns of the matrix @var{x}\n\
-one above the other.  Without @var{dim} this is equivalent to\n\
-@code{@var{x}(:)}.  If @var{dim} is supplied, the dimensions of @var{v}\n\
-are set to @var{dim} with all elements along the last dimension.\n\
-This is equivalent to @code{shiftdim (@var{x}(:), 1-@var{dim})}.\n\
+one above the other.\n\
+\n\
+Without @var{dim} this is equivalent to @code{@var{x}(:)}.\n\
+\n\
+If @var{dim} is supplied, the dimensions of @var{v} are set to @var{dim}\n\
+with all elements along the last dimension.  This is equivalent to\n\
+@code{shiftdim (@var{x}(:), 1-@var{dim})}.\n\
 @seealso{vech, resize, cat}\n\
 @end deftypefn")
 {
   octave_value retval;
   int dim = 1;
 
   int nargin = args.length ();
 
@@ -5608,16 +5690,17 @@ This is equivalent to @code{shiftdim (@v
 %!error vec (1, 2, 3)
 %!error vec ([1, 2; 3, 4], 0)
 */
 
 DEFUN (squeeze, args, ,
        "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} squeeze (@var{x})\n\
 Remove singleton dimensions from @var{x} and return the result.\n\
+\n\
 Note that for compatibility with @sc{matlab}, all objects have\n\
 a minimum of two dimensions and row vectors are left unchanged.\n\
 @seealso{reshape}\n\
 @end deftypefn")
 {
   octave_value retval;
 
   if (args.length () == 1)
@@ -5626,17 +5709,17 @@ a minimum of two dimensions and row vect
     print_usage ();
 
   return retval;
 }
 
 DEFUN (full, args, ,
        "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {@var{FM} =} full (@var{SM})\n\
-Return a full storage matrix from a sparse, diagonal, permutation matrix,\n\
+Return a full storage matrix from a sparse, diagonal, or permutation matrix,\n\
 or a range.\n\
 @seealso{sparse, issparse}\n\
 @end deftypefn")
 {
   octave_value retval;
 
   if (args.length () == 1)
     retval = args(0).full_value ();
@@ -5648,18 +5731,19 @@ or a range.\n\
 
 // Compute various norms of the vector X.
 
 DEFUN (norm, args, ,
        "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {} norm (@var{A})\n\
 @deftypefnx {Built-in Function} {} norm (@var{A}, @var{p})\n\
 @deftypefnx {Built-in Function} {} norm (@var{A}, @var{p}, @var{opt})\n\
-Compute the p-norm of the matrix @var{A}.  If the second argument is\n\
-missing, @code{p = 2} is assumed.\n\
+Compute the p-norm of the matrix @var{A}.\n\
+\n\
+If the second argument is missing, @code{p = 2} is assumed.\n\
 \n\
 If @var{A} is a matrix (or sparse matrix):\n\
 \n\
 @table @asis\n\
 @item @var{p} = @code{1}\n\
 1-norm, the largest column sum of the absolute values of @var{A}.\n\
 \n\
 @item @var{p} = @code{2}\n\
@@ -5907,16 +5991,17 @@ This function and @w{@tcode{- x}} are eq
 {
   return unary_op_defun_body (octave_value::op_uminus, args);
 }
 
 DEFUN (transpose, args, ,
        "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} transpose (@var{x})\n\
 Return the transpose of @var{x}.\n\
+\n\
 This function and @tcode{x.'} are equivalent.\n\
 @seealso{ctranspose}\n\
 @end deftypefn")
 {
   return unary_op_defun_body (octave_value::op_transpose, args);
 }
 
 /*
@@ -5938,16 +6023,17 @@ This function and @tcode{x.'} are equiva
 
 %!assert (transpose (single ([1,2;3,4])), single ([1,3;2,4]))
 */
 
 DEFUN (ctranspose, args, ,
        "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} ctranspose (@var{x})\n\
 Return the complex conjugate transpose of @var{x}.\n\
+\n\
 This function and @tcode{x'} are equivalent.\n\
 @seealso{transpose}\n\
 @end deftypefn")
 {
   return unary_op_defun_body (octave_value::op_hermitian, args);
 }
 
 /*
@@ -6013,16 +6099,17 @@ binary_assoc_op_defun_body (octave_value
   return retval;
 }
 
 DEFUN (plus, args, ,
        "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {} plus (@var{x}, @var{y})\n\
 @deftypefnx {Built-in Function} {} plus (@var{x1}, @var{x2}, @dots{})\n\
 This function and @w{@tcode{x + y}} are equivalent.\n\
+\n\
 If more arguments are given, the summation is applied\n\
 cumulatively from left to right:\n\
 \n\
 @example\n\
 (@dots{}((x1 + x2) + x3) + @dots{})\n\
 @end example\n\
 \n\
 At least one argument is required.\n\
@@ -6043,16 +6130,17 @@ This function and @w{@tcode{x - y}} are 
   return binary_op_defun_body (octave_value::op_sub, args);
 }
 
 DEFUN (mtimes, args, ,
        "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {} mtimes (@var{x}, @var{y})\n\
 @deftypefnx {Built-in Function} {} mtimes (@var{x1}, @var{x2}, @dots{})\n\
 Return the matrix multiplication product of inputs.\n\
+\n\
 This function and @w{@tcode{x * y}} are equivalent.\n\
 If more arguments are given, the multiplication is applied\n\
 cumulatively from left to right:\n\
 \n\
 @example\n\
 (@dots{}((x1 * x2) * x3) * @dots{})\n\
 @end example\n\
 \n\
@@ -6063,38 +6151,41 @@ At least one argument is required.\n\
   return binary_assoc_op_defun_body (octave_value::op_mul,
                                      octave_value::op_mul_eq, args);
 }
 
 DEFUN (mrdivide, args, ,
        "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} mrdivide (@var{x}, @var{y})\n\
 Return the matrix right division of @var{x} and @var{y}.\n\
+\n\
 This function and @w{@tcode{x / y}} are equivalent.\n\
 @seealso{mldivide, rdivide, plus, minus}\n\
 @end deftypefn")
 {
   return binary_op_defun_body (octave_value::op_div, args);
 }
 
 DEFUN (mpower, args, ,
        "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} mpower (@var{x}, @var{y})\n\
 Return the matrix power operation of @var{x} raised to the @var{y} power.\n\
+\n\
 This function and @w{@tcode{x ^ y}} are equivalent.\n\
 @seealso{power, mtimes, plus, minus}\n\
 @end deftypefn")
 {
   return binary_op_defun_body (octave_value::op_pow, args);
 }
 
 DEFUN (mldivide, args, ,
        "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} mldivide (@var{x}, @var{y})\n\
 Return the matrix left division of @var{x} and @var{y}.\n\
+\n\
 This function and @w{@tcode{x @xbackslashchar{} y}} are equivalent.\n\
 @seealso{mrdivide, ldivide, rdivide}\n\
 @end deftypefn")
 {
   return binary_op_defun_body (octave_value::op_ldiv, args);
 }
 
 DEFUN (lt, args, ,
@@ -6116,16 +6207,17 @@ This function is equivalent to @w{@code{
 {
   return binary_op_defun_body (octave_value::op_le, args);
 }
 
 DEFUN (eq, args, ,
        "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} eq (@var{x}, @var{y})\n\
 Return true if the two inputs are equal.\n\
+\n\
 This function is equivalent to @w{@code{x == y}}.\n\
 @seealso{ne, isequal, le, ge, gt, ne, lt}\n\
 @end deftypefn")
 {
   return binary_op_defun_body (octave_value::op_eq, args);
 }
 
 DEFUN (ge, args, ,
@@ -6147,28 +6239,30 @@ This function is equivalent to @w{@code{
 {
   return binary_op_defun_body (octave_value::op_gt, args);
 }
 
 DEFUN (ne, args, ,
        "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} ne (@var{x}, @var{y})\n\
 Return true if the two inputs are not equal.\n\
+\n\
 This function is equivalent to @w{@code{x != y}}.\n\
 @seealso{eq, isequal, le, ge, lt}\n\
 @end deftypefn")
 {
   return binary_op_defun_body (octave_value::op_ne, args);
 }
 
 DEFUN (times, args, ,
        "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {} times (@var{x}, @var{y})\n\
 @deftypefnx {Built-in Function} {} times (@var{x1}, @var{x2}, @dots{})\n\
 Return the element-by-element multiplication product of inputs.\n\
+\n\
 This function and @w{@tcode{x .* y}} are equivalent.\n\
 If more arguments are given, the multiplication is applied\n\
 cumulatively from left to right:\n\
 \n\
 @example\n\
 (@dots{}((x1 .* x2) .* x3) .* @dots{})\n\
 @end example\n\
 \n\
@@ -6179,43 +6273,47 @@ At least one argument is required.\n\
   return binary_assoc_op_defun_body (octave_value::op_el_mul,
                                      octave_value::op_el_mul_eq, args);
 }
 
 DEFUN (rdivide, args, ,
        "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} rdivide (@var{x}, @var{y})\n\
 Return the element-by-element right division of @var{x} and @var{y}.\n\
+\n\
 This function and @w{@tcode{x ./ y}} are equivalent.\n\
 @seealso{ldivide, mrdivide, times, plus}\n\
 @end deftypefn")
 {
   return binary_op_defun_body (octave_value::op_el_div, args);
 }
 
 DEFUN (power, args, ,
        "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} power (@var{x}, @var{y})\n\
 Return the element-by-element operation of @var{x} raised to the\n\
-@var{y} power.  If several complex results are possible,\n\
-returns the one with smallest non-negative argument (angle).  Use\n\
-@code{realpow}, @code{realsqrt}, @code{cbrt}, or @code{nthroot} if a\n\
-real result is preferred.\n\
+@var{y} power.\n\
 \n\
 This function and @w{@tcode{x .^ y}} are equivalent.\n\
+\n\
+If several complex results are possible, returns the one with smallest\n\
+non-negative argument (angle).  Use @code{realpow}, @code{realsqrt},\n\
+@code{cbrt}, or @code{nthroot} if a real result is preferred.\n\
+\n\
 @seealso{mpower, realpow, realsqrt, cbrt, nthroot}\n\
 @end deftypefn")
 {
   return binary_op_defun_body (octave_value::op_el_pow, args);
 }
 
 DEFUN (ldivide, args, ,
        "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} ldivide (@var{x}, @var{y})\n\
 Return the element-by-element left division of @var{x} and @var{y}.\n\
+\n\
 This function and @w{@tcode{x .@xbackslashchar{} y}} are equivalent.\n\
 @seealso{rdivide, mldivide, times, plus}\n\
 @end deftypefn")
 {
   return binary_op_defun_body (octave_value::op_el_ldiv, args);
 }
 
 DEFUN (and, args, ,
@@ -6298,19 +6396,21 @@ static double tic_toc_timestamp = -1.0;
 
 DEFUN (tic, args, nargout,
        "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {} tic ()\n\
 @deftypefnx {Built-in Function} {@var{id} =} tic ()\n\
 @deftypefnx {Built-in Function} {} toc ()\n\
 @deftypefnx {Built-in Function} {} toc (@var{id})\n\
 @deftypefnx {Built-in Function} {@var{val} =} toc (@dots{})\n\
-Set or check a wall-clock timer.  Calling @code{tic} without an\n\
-output argument sets the internal timer state.  Subsequent calls\n\
-to @code{toc} return the number of seconds since the timer was set.\n\
+Set or check a wall-clock timer.\n\
+\n\
+Calling @code{tic} without an output argument sets the internal timer state.\n\
+Subsequent calls to @code{toc} return the number of seconds since the timer\n\
+was set.\n\
 For example,\n\
 \n\
 @example\n\
 @group\n\
 tic ();\n\
 # many computations later@dots{}\n\
 elapsed_time = toc ();\n\
 @end group\n\
@@ -6429,22 +6529,26 @@ DEFUN (toc, args, nargout,
 %! id = tic ();
 %!assert (isa (id, "uint64"))
 %!assert (isa (toc (id), "double"))
 */
 
 DEFUN (cputime, args, ,
        "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {[@var{total}, @var{user}, @var{system}] =} cputime ();\n\
-Return the CPU time used by your Octave session.  The first output is\n\
-the total time spent executing your process and is equal to the sum of\n\
-second and third outputs, which are the number of CPU seconds spent\n\
-executing in user mode and the number of CPU seconds spent executing in\n\
-system mode, respectively.  If your system does not have a way to report\n\
-CPU time usage, @code{cputime} returns 0 for each of its output values.\n\
+Return the CPU time used by your Octave session.\n\
+\n\
+The first output is the total time spent executing your process and is equal\n\
+to the sum of second and third outputs, which are the number of CPU seconds\n\
+spent executing in user mode and the number of CPU seconds spent executing\n\
+in system mode, respectively.\n\
+\n\
+If your system does not have a way to report CPU time usage, @code{cputime}\n\
+returns 0 for each of its output values.\n\
+\n\
 Note that because Octave used some CPU time to start, it is reasonable\n\
 to check to see if @code{cputime} works by checking to see if the total\n\
 CPU time used is nonzero.\n\
 @seealso{tic, toc}\n\
 @end deftypefn")
 {
   octave_value_list retval;
   int nargin = args.length ();
@@ -6500,18 +6604,19 @@ CPU time used is nonzero.\n\
 }
 
 DEFUN (sort, args, nargout,
        "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {[@var{s}, @var{i}] =} sort (@var{x})\n\
 @deftypefnx {Built-in Function} {[@var{s}, @var{i}] =} sort (@var{x}, @var{dim})\n\
 @deftypefnx {Built-in Function} {[@var{s}, @var{i}] =} sort (@var{x}, @var{mode})\n\
 @deftypefnx {Built-in Function} {[@var{s}, @var{i}] =} sort (@var{x}, @var{dim}, @var{mode})\n\
-Return a copy of @var{x} with the elements arranged in increasing\n\
-order.  For matrices, @code{sort} orders the elements within columns\n\
+Return a copy of @var{x} with the elements arranged in increasing order.\n\
+\n\
+For matrices, @code{sort} orders the elements within columns\n\
 \n\
 For example:\n\
 \n\
 @example\n\
 @group\n\
 sort ([1, 2; 2, 3; 3, 1])\n\
    @result{}  1  1\n\
        2  2\n\
@@ -6913,18 +7018,20 @@ get_sort_mode_option (const octave_value
 
 DEFUN (issorted, args, ,
        "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {} issorted (@var{a})\n\
 @deftypefnx {Built-in Function} {} issorted (@var{a}, @var{mode})\n\
 @deftypefnx {Built-in Function} {} issorted (@var{a}, \"rows\", @var{mode})\n\
 Return true if the array is sorted according to @var{mode}, which\n\
 may be either @qcode{\"ascending\"}, @qcode{\"descending\"}, or\n\
-@qcode{\"either\"}.  By default,  @var{mode} is @qcode{\"ascending\"}.  NaNs\n\
-are treated in the same manner as @code{sort}.\n\
+@qcode{\"either\"}.\n\
+\n\
+By default,  @var{mode} is @qcode{\"ascending\"}.  NaNs are treated in the\n\
+same manner as @code{sort}.\n\
 \n\
 If the optional argument @qcode{\"rows\"} is supplied, check whether\n\
 the array is sorted by rows as output by the function @code{sortrows}\n\
 (with no options).\n\
 \n\
 This function does not support sparse matrices.\n\
 @seealso{sort, sortrows}\n\
 @end deftypefn\n")
@@ -7021,30 +7128,32 @@ This function does not support sparse ma
 %!assert (issorted (fliplr (sv)', "either"))
 */
 
 DEFUN (nth_element, args, ,
        "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {} nth_element (@var{x}, @var{n})\n\
 @deftypefnx {Built-in Function} {} nth_element (@var{x}, @var{n}, @var{dim})\n\
 Select the n-th smallest element of a vector, using the ordering defined by\n\
-@code{sort}.  In other words, the result is equivalent to\n\
-@code{sort(@var{x})(@var{n})}.\n\
+@code{sort}.\n\
+\n\
+The result is equivalent to @code{sort(@var{x})(@var{n})}.\n\
+\n\
 @var{n} can also be a contiguous range, either ascending @code{l:u}\n\
 or descending @code{u:-1:l}, in which case a range of elements is returned.\n\
+\n\
 If @var{x} is an array, @code{nth_element} operates along the dimension\n\
 defined by @var{dim}, or the first non-singleton dimension if @var{dim} is\n\
 not given.\n\
 \n\
-nth_element encapsulates the C++ standard library algorithms nth_element and\n\
-partial_sort.  On average, the complexity of the operation is O(M*log(K)),\n\
-where @w{@code{M = size (@var{x}, @var{dim})}} and\n\
-@w{@code{K = length (@var{n})}}.\n\
-This function is intended for cases where the ratio K/M is small; otherwise,\n\
-it may be better to use @code{sort}.\n\
+Programming Note: nth_element encapsulates the C++ standard library\n\
+algorithms nth_element and partial_sort.  On average, the complexity of the\n\
+operation is O(M*log(K)), where @w{@code{M = size (@var{x}, @var{dim})}} and\n\
+@w{@code{K = length (@var{n})}}.  This function is intended for cases where\n\
+the ratio K/M is small; otherwise, it may be better to use @code{sort}.\n\
 @seealso{sort, min, max}\n\
 @end deftypefn")
 {
   octave_value retval;
   int nargin = args.length ();
 
   if (nargin == 2 || nargin == 3)
     {
@@ -7447,35 +7556,37 @@ do_merge (const Array<bool>& mask,
                          fval.INTX ## _array_value ()); \
     }
 
 DEFUN (merge, args, ,
        "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {} merge (@var{mask}, @var{tval}, @var{fval})\n\
 @deftypefnx {Built-in Function} {} ifelse (@var{mask}, @var{tval}, @var{fval})\n\
 Merge elements of @var{true_val} and @var{false_val}, depending on the\n\
-value of @var{mask}.  If @var{mask} is a logical scalar, the other two\n\
-arguments can be arbitrary values.  Otherwise, @var{mask} must be a logical\n\
-array, and @var{tval}, @var{fval} should be arrays of matching class, or\n\
-cell arrays.  In the scalar mask case, @var{tval} is returned if @var{mask}\n\
-is true, otherwise @var{fval} is returned.\n\
+value of @var{mask}.\n\
+\n\
+If @var{mask} is a logical scalar, the other two arguments can be arbitrary\n\
+values.  Otherwise, @var{mask} must be a logical array, and @var{tval},\n\
+@var{fval} should be arrays of matching class, or cell arrays.  In the\n\
+scalar mask case, @var{tval} is returned if @var{mask} is true, otherwise\n\
+@var{fval} is returned.\n\
 \n\
 In the array mask case, both @var{tval} and @var{fval} must be either\n\
 scalars or arrays with dimensions equal to @var{mask}.  The result is\n\
 constructed as follows:\n\
 \n\
 @example\n\
 @group\n\
 result(mask) = tval(mask);\n\
 result(! mask) = fval(! mask);\n\
 @end group\n\
 @end example\n\
 \n\
-@var{mask} can also be arbitrary numeric type, in which case\n\
-it is first converted to logical.\n\
+@var{mask} can also be arbitrary numeric type, in which case it is first\n\
+converted to logical.\n\
 @seealso{logical, diff}\n\
 @end deftypefn")
 {
   int nargin = args.length ();
   octave_value retval;
 
   if (nargin == 3 && (args(0).is_bool_type () || args(0).is_numeric_type ()))
     {
@@ -7790,25 +7901,24 @@ do_repelems (const Array<T>& src, const 
     }
 
   return retval;
 }
 
 DEFUN (repelems, args, ,
        "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} repelems (@var{x}, @var{r})\n\
-Construct a vector of repeated elements from @var{x}.  @var{r}\n\
-is a 2x@var{N} integer matrix specifying which elements to repeat and\n\
-how often to repeat each element.\n\
-\n\
-Entries in the first row, @var{r}(1,j), select an element to repeat.\n\
-The corresponding entry in the second row, @var{r}(2,j), specifies\n\
-the repeat count.  If @var{x} is a matrix then the columns of @var{x} are\n\
-imagined to be stacked on top of each other for purposes of the selection\n\
-index.  A row vector is always returned.\n\
+Construct a vector of repeated elements from @var{x}.\n\
+\n\
+@var{r} is a 2x@var{N} integer matrix specifying which elements to repeat and\n\
+how often to repeat each element.  Entries in the first row, @var{r}(1,j),\n\
+select an element to repeat.  The corresponding entry in the second row,\n\
+@var{r}(2,j), specifies the repeat count.  If @var{x} is a matrix then the\n\
+columns of @var{x} are imagined to be stacked on top of each other for\n\
+purposes of the selection index.  A row vector is always returned.\n\
 \n\
 Conceptually the result is calculated as follows:\n\
 \n\
 @example\n\
 @group\n\
 y = [];\n\
 for i = 1:columns (@var{r})\n\
   y = [y, @var{x}(@var{r}(1,i)*ones(1, @var{r}(2,i)))];\n\
@@ -7988,18 +8098,20 @@ Encode a double matrix or array @var{x} 
 %!error base64_encode (struct ())
 */
 
 DEFUN (base64_decode, args, ,
        "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {@var{x} =} base64_decode (@var{s})\n\
 @deftypefnx {Built-in Function} {@var{x} =} base64_decode (@var{s}, @var{dims})\n\
 Decode the double matrix or array @var{x} from the base64 encoded string\n\
-@var{s}.  The optional input parameter @var{dims} should be a vector\n\
-containing the dimensions of the decoded array.\n\
+@var{s}.\n\
+\n\
+The optional input parameter @var{dims} should be a vector containing the\n\
+dimensions of the decoded array.\n\
 @seealso{base64_encode}\n\
 @end deftypefn")
 {
   octave_value retval;
 
   int nargin = args.length ();
 
   if (nargin < 1 || nargin > 2)
diff --git a/libinterp/corefcn/debug.cc b/libinterp/corefcn/debug.cc
--- a/libinterp/corefcn/debug.cc
+++ b/libinterp/corefcn/debug.cc
@@ -741,19 +741,20 @@ files.\n\
 
 DEFUN (dbstatus, args, nargout,
        "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {} dbstatus ()\n\
 @deftypefnx {Built-in Function} {@var{brk_list} =} dbstatus ()\n\
 @deftypefnx {Built-in Function} {@var{brk_list} =} dbstatus (\"@var{func}\")\n\
 Report the location of active breakpoints.\n\
 \n\
-When called with no input or output arguments, print the list of\n\
-all functions with breakpoints and the line numbers where those\n\
-breakpoints are set.\n\
+When called with no input or output arguments, print the list of all\n\
+functions with breakpoints and the line numbers where those breakpoints are\n\
+set.\n\
+\n\
 If a function name @var{func} is specified then only report breakpoints\n\
 for the named function.\n\
 \n\
 The optional return argument @var{brk_list} is a struct array with the\n\
 following fields.\n\
 \n\
 @table @asis\n\
 @item name\n\
@@ -859,18 +860,18 @@ current function.\n\
 
       return octave_value (retval);
     }
 }
 
 DEFUN (dbwhere, , ,
        "-*- texinfo -*-\n\
 @deftypefn {Command} {} dbwhere\n\
-In debugging mode, report the current file and line number where\n\
-execution is stopped.\n\
+In debugging mode, report the current file and line number where execution\n\
+is stopped.\n\
 @seealso{dbstatus, dbcont, dbstep, dbup}\n\
 @end deftypefn")
 {
   octave_value retval;
 
   octave_user_code *dbg_fcn = get_user_code ();
 
   if (dbg_fcn)
@@ -950,19 +951,21 @@ DEFUN (dbtype, args, ,
 @deftypefnx {Command} {} dbtype @var{startl:end}\n\
 @deftypefnx {Command} {} dbtype @var{func}\n\
 @deftypefnx {Command} {} dbtype @var{func} @var{lineno}\n\
 @deftypefnx {Command} {} dbtype @var{func} @var{startl:endl}\n\
 @deftypefnx {Command} {} dbtype @var{func} @var{startl:end}\n\
 Display a script file with line numbers.\n\
 \n\
 When called with no arguments in debugging mode, display the script file\n\
-currently being debugged.  An optional range specification can be used to\n\
-list only a portion of the file.  The special keyword @qcode{\"end\"} is a\n\
-valid line number specification for the last line of the file.\n\
+currently being debugged.\n\
+\n\
+An optional range specification can be used to list only a portion of the\n\
+file.  The special keyword @qcode{\"end\"} is a valid line number\n\
+specification for the last line of the file.\n\
 \n\
 When called with the name of a function, list that script file with line\n\
 numbers.\n\
 @seealso{dbwhere, dbstatus, dbstop}\n\
 @end deftypefn")
 {
   octave_value retval;
   octave_user_code *dbg_fcn;
@@ -1103,18 +1106,19 @@ numbers.\n\
   return retval;
 }
 
 DEFUN (dblist, args, ,
        "-*- texinfo -*-\n\
 @deftypefn  {Command} {} dblist\n\
 @deftypefnx {Command} {} dblist @var{n}\n\
 In debugging mode, list @var{n} lines of the function being debugged\n\
-centered around the current line to be executed.  If unspecified @var{n}\n\
-defaults to 10 (+/- 5 lines)\n\
+centered around the current line to be executed.\n\
+\n\
+If unspecified @var{n} defaults to 10 (+/- 5 lines)\n\
 @seealso{dbwhere, dbtype}\n\
 @end deftypefn")
 {
   octave_value retval;
 
   int n = 10;
 
   if (args.length () == 1)
@@ -1299,21 +1303,24 @@ show_octave_dbstack (void)
 
 DEFUN (dbstack, args, nargout,
        "-*- texinfo -*-\n\
 @deftypefn  {Command} {} dbstack\n\
 @deftypefnx {Command} {} dbstack @var{n}\n\
 @deftypefnx {Command} {} dbstack @var{-completenames}\n\
 @deftypefnx {Built-in Function} {[@var{stack}, @var{idx}] =} dbstack (@dots{})\n\
 Display or return current debugging function stack information.\n\
+\n\
 With optional argument @var{n}, omit the @var{n} innermost stack frames.\n\
 \n\
 Although accepted, the argument @var{-completenames} is silently ignored.\n\
-Octave always returns absolute file names.  The arguments @var{n} and\n\
-@var{-completenames} can be both specified in any order.\n\
+Octave always returns absolute file names.\n\
+\n\
+The arguments @var{n} and @var{-completenames} can be both specified in any\n\
+order.\n\
 \n\
 The optional return argument @var{stack} is a struct array with the\n\
 following fields:\n\
 \n\
 @table @asis\n\
 @item file\n\
 The name of the m-file where the function code is located.\n\
 \n\
@@ -1370,32 +1377,34 @@ do_dbupdown (const octave_value_list& ar
     }
 }
 
 DEFUN (dbup, args, ,
        "-*- texinfo -*-\n\
 @deftypefn  {Command} {} dbup\n\
 @deftypefnx {Command} {} dbup @var{n}\n\
 In debugging mode, move up the execution stack @var{n} frames.\n\
+\n\
 If @var{n} is omitted, move up one frame.\n\
 @seealso{dbstack, dbdown}\n\
 @end deftypefn")
 {
   octave_value retval;
 
   do_dbupdown (args, "dbup");
 
   return retval;
 }
 
 DEFUN (dbdown, args, ,
        "-*- texinfo -*-\n\
 @deftypefn  {Command} {} dbdown\n\
 @deftypefnx {Command} {} dbdown @var{n}\n\
 In debugging mode, move down the execution stack @var{n} frames.\n\
+\n\
 If @var{n} is omitted, move down one frame.\n\
 @seealso{dbstack, dbup}\n\
 @end deftypefn")
 {
   octave_value retval;
 
   do_dbupdown (args, "dbdown");
 
@@ -1405,23 +1414,26 @@ If @var{n} is omitted, move down one fra
 DEFUN (dbstep, args, ,
        "-*- texinfo -*-\n\
 @deftypefn  {Command} {} dbstep\n\
 @deftypefnx {Command} {} dbstep @var{n}\n\
 @deftypefnx {Command} {} dbstep in\n\
 @deftypefnx {Command} {} dbstep out\n\
 @deftypefnx {Command} {} dbnext @dots{}\n\
 In debugging mode, execute the next @var{n} lines of code.\n\
-If @var{n} is omitted, execute the next single line of code.\n\
-If the next line of code is itself defined in terms of an m-file remain in\n\
-the existing function.\n\
+\n\
+If @var{n} is omitted, execute the next single line of code.  If the next\n\
+line of code is itself defined in terms of an m-file remain in the existing\n\
+function.\n\
 \n\
 Using @code{dbstep in} will cause execution of the next line to step into\n\
-any m-files defined on the next line.  Using @code{dbstep out} will cause\n\
-execution to continue until the current function returns.\n\
+any m-files defined on the next line.\n\
+\n\
+Using @code{dbstep out} will cause execution to continue until the current\n\
+function returns.\n\
 \n\
 @code{dbnext} is an alias for @code{dbstep}.\n\
 @seealso{dbcont, dbquit}\n\
 @end deftypefn")
 {
   if (Vdebugging)
     {
       int nargin = args.length ();
@@ -1500,18 +1512,18 @@ Leave command-line debugging mode and co
     error ("dbcont: can only be called in debug mode");
 
   return octave_value_list ();
 }
 
 DEFUN (dbquit, args, ,
        "-*- texinfo -*-\n\
 @deftypefn {Command} {} dbquit\n\
-Quit debugging mode immediately without further code execution and\n\
-return to the Octave prompt.\n\
+Quit debugging mode immediately without further code execution and return to\n\
+the Octave prompt.\n\
 @seealso{dbcont, dbstep}\n\
 @end deftypefn")
 {
   if (Vdebugging)
     {
       if (args.length () == 0)
         {
           Vdebugging = false;
diff --git a/libinterp/corefcn/defaults.cc b/libinterp/corefcn/defaults.cc
--- a/libinterp/corefcn/defaults.cc
+++ b/libinterp/corefcn/defaults.cc
@@ -477,22 +477,21 @@ install_defaults (void)
 DEFUN (EDITOR, args, nargout,
        "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {@var{val} =} EDITOR ()\n\
 @deftypefnx {Built-in Function} {@var{old_val} =} EDITOR (@var{new_val})\n\
 @deftypefnx {Built-in Function} {} EDITOR (@var{new_val}, \"local\")\n\
 Query or set the internal variable that specifies the default text editor.\n\
 \n\
 The default value is taken from the environment variable @w{@env{EDITOR}}\n\
-when Octave starts.  If the\n\
-environment variable is not initialized, @w{@env{EDITOR}} will be set to\n\
-@qcode{\"emacs\"}.\n\
+when Octave starts.  If the environment variable is not initialized,\n\
+@w{@env{EDITOR}} will be set to @qcode{\"emacs\"}.\n\
 \n\
 When called from inside a function with the @qcode{\"local\"} option, the\n\
-variable is changed locally for the function and any subroutines it calls.  \n\
+variable is changed locally for the function and any subroutines it calls.\n\
 The original variable value is restored when exiting the function.\n\
 \n\
 @seealso{edit, edit_history}\n\
 @end deftypefn")
 {
   return SET_NONEMPTY_INTERNAL_STRING_VARIABLE (EDITOR);
 }
 
@@ -510,22 +509,24 @@ The original variable value is restored 
 
 DEFUN (EXEC_PATH, args, nargout,
        "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {@var{val} =} EXEC_PATH ()\n\
 @deftypefnx {Built-in Function} {@var{old_val} =} EXEC_PATH (@var{new_val})\n\
 @deftypefnx {Built-in Function} {} EXEC_PATH (@var{new_val}, \"local\")\n\
 Query or set the internal variable that specifies a colon separated\n\
 list of directories to append to the shell PATH when executing external\n\
-programs.  The initial value of is taken from the environment variable\n\
-@w{@env{OCTAVE_EXEC_PATH}}, but that value can be overridden by\n\
-the command line argument @option{--exec-path PATH}.\n\
+programs.\n\
+\n\
+The initial value of is taken from the environment variable\n\
+@w{@env{OCTAVE_EXEC_PATH}}, but that value can be overridden by the command\n\
+line argument @option{--exec-path PATH}.\n\
 \n\
 When called from inside a function with the @qcode{\"local\"} option, the\n\
-variable is changed locally for the function and any subroutines it calls.  \n\
+variable is changed locally for the function and any subroutines it calls.\n\
 The original variable value is restored when exiting the function.\n\
 \n\
 @seealso{IMAGE_PATH, OCTAVE_HOME}\n\
 @end deftypefn")
 {
   octave_value retval = SET_NONEMPTY_INTERNAL_STRING_VARIABLE (EXEC_PATH);
 
   if (args.length () > 0)
@@ -550,17 +551,17 @@ DEFUN (IMAGE_PATH, args, nargout,
        "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {@var{val} =} IMAGE_PATH ()\n\
 @deftypefnx {Built-in Function} {@var{old_val} =} IMAGE_PATH (@var{new_val})\n\
 @deftypefnx {Built-in Function} {} IMAGE_PATH (@var{new_val}, \"local\")\n\
 Query or set the internal variable that specifies a colon separated\n\
 list of directories in which to search for image files.\n\
 \n\
 When called from inside a function with the @qcode{\"local\"} option, the\n\
-variable is changed locally for the function and any subroutines it calls.  \n\
+variable is changed locally for the function and any subroutines it calls.\n\
 The original variable value is restored when exiting the function.\n\
 \n\
 @seealso{EXEC_PATH, OCTAVE_HOME}\n\
 @end deftypefn")
 {
   return SET_NONEMPTY_INTERNAL_STRING_VARIABLE (IMAGE_PATH);
 }
 
@@ -575,17 +576,16 @@ The original variable value is restored 
 
 %!error (IMAGE_PATH (1, 2))
 */
 
 DEFUN (OCTAVE_HOME, args, ,
        "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} OCTAVE_HOME ()\n\
 Return the name of the top-level Octave installation directory.\n\
-\n\
 @seealso{EXEC_PATH, IMAGE_PATH}\n\
 @end deftypefn")
 {
   octave_value retval;
 
   if (args.length () == 0)
     retval = Voctave_home;
   else
diff --git a/libinterp/corefcn/det.cc b/libinterp/corefcn/det.cc
--- a/libinterp/corefcn/det.cc
+++ b/libinterp/corefcn/det.cc
@@ -50,18 +50,18 @@ along with Octave; see the file COPYING.
 DEFUN (det, args, nargout,
        "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {} det (@var{A})\n\
 @deftypefnx {Built-in Function} {[@var{d}, @var{rcond}] =} det (@var{A})\n\
 Compute the determinant of @var{A}.\n\
 \n\
 Return an estimate of the reciprocal condition number if requested.\n\
 \n\
-Routines from @sc{lapack} are used for full matrices and code from\n\
-@sc{umfpack} is used for sparse matrices.\n\
+Programming Notes: Routines from @sc{lapack} are used for full matrices and\n\
+code from @sc{umfpack} is used for sparse matrices.\n\
 \n\
 The determinant should not be used to check a matrix for singularity.\n\
 For that, use any of the condition number functions: @code{cond},\n\
 @code{condest}, @code{rcond}.\n\
 @seealso{cond, condest, rcond}\n\
 @end deftypefn")
 {
   octave_value_list retval;
diff --git a/libinterp/corefcn/dirfns.cc b/libinterp/corefcn/dirfns.cc
--- a/libinterp/corefcn/dirfns.cc
+++ b/libinterp/corefcn/dirfns.cc
@@ -169,18 +169,18 @@ DEFUN (readdir, args, ,
        "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {@var{files} =} readdir (@var{dir})\n\
 @deftypefnx {Built-in Function} {[@var{files}, @var{err}, @var{msg}] =} readdir (@var{dir})\n\
 Return the names of files in the directory @var{dir} as a cell array of\n\
 strings.\n\
 \n\
 If an error occurs, return an empty cell array in @var{files}.\n\
 If successful, @var{err} is 0 and @var{msg} is an empty string.\n\
-Otherwise, @var{err} is nonzero and @var{msg} contains a\n\
-system-dependent error message.\n\
+Otherwise, @var{err} is nonzero and @var{msg} contains a system-dependent\n\
+error message.\n\
 @seealso{ls, dir, glob, what}\n\
 @end deftypefn")
 {
   octave_value_list retval;
 
   retval(2) = std::string ();
   retval(1) = -1.0;
   retval(0) = Cell ();
@@ -305,23 +305,24 @@ identifier.\n\
 
 DEFUNX ("rmdir", Frmdir, args, ,
         "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {} rmdir @var{dir}\n\
 @deftypefnx {Built-in Function} {} rmdir (@var{dir}, \"s\")\n\
 @deftypefnx {Built-in Function} {[@var{status}, @var{msg}, @var{msgid}] =} rmdir (@dots{})\n\
 Remove the directory named @var{dir}.\n\
 \n\
+If the optional second parameter is supplied with value @qcode{\"s\"},\n\
+recursively remove all subdirectories as well.\n\
+\n\
 If successful, @var{status} is 1, and @var{msg}, @var{msgid} are empty\n\
 character strings ("").  Otherwise, @var{status} is 0, @var{msg} contains a\n\
 system-dependent error message, and @var{msgid} contains a unique message\n\
 identifier.\n\
 \n\
-If the optional second parameter is supplied with value @qcode{\"s\"},\n\
-recursively remove all subdirectories as well.\n\
 @seealso{mkdir, confirm_recursive_rmdir, pwd}\n\
 @end deftypefn")
 {
   octave_value_list retval;
 
   retval(2) = std::string ();
   retval(1) = std::string ();
   retval(0) = false;
@@ -381,18 +382,18 @@ recursively remove all subdirectories as
 
 DEFUNX ("link", Flink, args, ,
         "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {} link @var{old} @var{new}\n\
 @deftypefnx {Built-in Function} {[@var{err}, @var{msg}] =} link (@var{old}, @var{new})\n\
 Create a new link (also known as a hard link) to an existing file.\n\
 \n\
 If successful, @var{err} is 0 and @var{msg} is an empty string.\n\
-Otherwise, @var{err} is nonzero and @var{msg} contains a\n\
-system-dependent error message.\n\
+Otherwise, @var{err} is nonzero and @var{msg} contains a system-dependent\n\
+error message.\n\
 @seealso{symlink, unlink, readlink, lstat}\n\
 @end deftypefn")
 {
   octave_value_list retval;
 
   retval(1) = std::string ();
   retval(0) = -1.0;
 
@@ -428,18 +429,18 @@ system-dependent error message.\n\
 
 DEFUNX ("symlink", Fsymlink, args, ,
         "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {} symlink @var{old} @var{new}\n\
 @deftypefnx {Built-in Function} {[@var{err}, @var{msg}] =} symlink (@var{old}, @var{new})\n\
 Create a symbolic link @var{new} which contains the string @var{old}.\n\
 \n\
 If successful, @var{err} is 0 and @var{msg} is an empty string.\n\
-Otherwise, @var{err} is nonzero and @var{msg} contains a\n\
-system-dependent error message.\n\
+Otherwise, @var{err} is nonzero and @var{msg} contains a system-dependent\n\
+error message.\n\
 @seealso{link, unlink, readlink, lstat}\n\
 @end deftypefn")
 {
   octave_value_list retval;
 
   retval(1) = std::string ();
   retval(0) = -1.0;
 
@@ -519,18 +520,18 @@ error message.\n\
 
 DEFUNX ("rename", Frename, args, ,
         "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {} rename @var{old} @var{new}\n\
 @deftypefnx {Built-in Function} {[@var{err}, @var{msg}] =} rename (@var{old}, @var{new})\n\
 Change the name of file @var{old} to @var{new}.\n\
 \n\
 If successful, @var{err} is 0 and @var{msg} is an empty string.\n\
-Otherwise, @var{err} is nonzero and @var{msg} contains a\n\
-system-dependent error message.\n\
+Otherwise, @var{err} is nonzero and @var{msg} contains a system-dependent\n\
+error message.\n\
 @seealso{movefile, copyfile, ls, dir}\n\
 @end deftypefn")
 {
   octave_value_list retval;
 
   retval(1) = std::string ();
   retval(0) = -1.0;
 
@@ -564,18 +565,21 @@ system-dependent error message.\n\
   return retval;
 }
 
 DEFUN (glob, args, ,
        "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} glob (@var{pattern})\n\
 Given an array of pattern strings (as a char array or a cell array) in\n\
 @var{pattern}, return a cell array of file names that match any of\n\
-them, or an empty cell array if no patterns match.  The pattern strings are\n\
-interpreted as filename globbing patterns (as they are used by Unix shells).\n\
+them, or an empty cell array if no patterns match.\n\
+\n\
+The pattern strings are interpreted as filename globbing patterns (as they\n\
+are used by Unix shells).\n\
+\n\
 Within a pattern\n\
 \n\
 @table @code\n\
 @item *\n\
 matches any string, including the null string,\n\
 \n\
 @item ?\n\
 matches any single character, and\n\
@@ -665,16 +669,17 @@ glob (\"file[12]\")\n\
 %! assert (result3, {"file1"; "file2"});
 */
 
 DEFUN (__fnmatch__, args, ,
        "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} fnmatch (@var{pattern}, @var{string})\n\
 Return true or false for each element of @var{string} that matches any of\n\
 the elements of the string array @var{pattern}, using the rules of\n\
+\n\
 filename pattern matching.  For example:\n\
 \n\
 @example\n\
 @group\n\
 fnmatch (\"a*b\", @{\"ab\"; \"axyzb\"; \"xyzab\"@})\n\
      @result{} [ 1; 1; 0 ]\n\
 @end group\n\
 @end example\n\
@@ -789,15 +794,15 @@ DEFUN (confirm_recursive_rmdir, args, na
        "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {@var{val} =} confirm_recursive_rmdir ()\n\
 @deftypefnx {Built-in Function} {@var{old_val} =} confirm_recursive_rmdir (@var{new_val})\n\
 @deftypefnx {Built-in Function} {} confirm_recursive_rmdir (@var{new_val}, \"local\")\n\
 Query or set the internal variable that controls whether Octave\n\
 will ask for confirmation before recursively removing a directory tree.\n\
 \n\
 When called from inside a function with the @qcode{\"local\"} option, the\n\
-variable is changed locally for the function and any subroutines it calls.  \n\
+variable is changed locally for the function and any subroutines it calls.\n\
 The original variable value is restored when exiting the function.\n\
 @seealso{rmdir}\n\
 @end deftypefn")
 {
   return SET_INTERNAL_VARIABLE (confirm_recursive_rmdir);
 }
diff --git a/libinterp/corefcn/dlmread.cc b/libinterp/corefcn/dlmread.cc
--- a/libinterp/corefcn/dlmread.cc
+++ b/libinterp/corefcn/dlmread.cc
@@ -158,19 +158,21 @@ parse_range_spec (const octave_value& ra
 
 DEFUN (dlmread, args, ,
        "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {@var{data} =} dlmread (@var{file})\n\
 @deftypefnx {Built-in Function} {@var{data} =} dlmread (@var{file}, @var{sep})\n\
 @deftypefnx {Built-in Function} {@var{data} =} dlmread (@var{file}, @var{sep}, @var{r0}, @var{c0})\n\
 @deftypefnx {Built-in Function} {@var{data} =} dlmread (@var{file}, @var{sep}, @var{range})\n\
 @deftypefnx {Built-in Function} {@var{data} =} dlmread (@dots{}, \"emptyvalue\", @var{EMPTYVAL})\n\
-Read the matrix @var{data} from a text file.  If not defined the separator\n\
-between fields is determined from the file itself.  Otherwise the\n\
-separation character is defined by @var{sep}.\n\
+Read the matrix @var{data} from a text file which uses the delimiter\n\
+@var{sep} between data values.\n\
+\n\
+If @var{sep} is not defined the separator between fields is determined from\n\
+the file itself.\n\
 \n\
 Given two scalar arguments @var{r0} and @var{c0}, these define the starting\n\
 row and column of the data to be read.  These values are indexed from zero,\n\
 such that the first row corresponds to an index of zero.\n\
 \n\
 The @var{range} parameter may be a 4-element vector containing the upper\n\
 left and lower right corner @code{[@var{R0},@var{C0},@var{R1},@var{C1}]}\n\
 where the lowest index value is zero.  Alternatively, a spreadsheet style\n\
diff --git a/libinterp/corefcn/dot.cc b/libinterp/corefcn/dot.cc
--- a/libinterp/corefcn/dot.cc
+++ b/libinterp/corefcn/dot.cc
@@ -101,20 +101,23 @@ get_red_dims (const dim_vector& x, const
           z(i) = 1;
         }
     }
 }
 
 DEFUN (dot, args, ,
        "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} dot (@var{x}, @var{y}, @var{dim})\n\
-Compute the dot product of two vectors.  If @var{x} and @var{y}\n\
-are matrices, calculate the dot products along the first\n\
-non-singleton dimension.  If the optional argument @var{dim} is\n\
-given, calculate the dot products along this dimension.\n\
+Compute the dot product of two vectors.\n\
+\n\
+If @var{x} and @var{y} are matrices, calculate the dot products along the\n\
+first non-singleton dimension.\n\
+\n\
+If the optional argument @var{dim} is given, calculate the dot products\n\
+along this dimension.\n\
 \n\
 This is equivalent to\n\
 @code{sum (conj (@var{X}) .* @var{Y}, @var{dim})},\n\
 but avoids forming a temporary array and is faster.  When @var{X} and\n\
 @var{Y} are column vectors, the result is equivalent to\n\
 @code{@var{X}' * @var{Y}}.\n\
 @seealso{cross, divergence}\n\
 @end deftypefn")
@@ -276,21 +279,22 @@ but avoids forming a temporary array and
 %!error <sizes of X and Y must match> dot ([1 2]', [1 2 3]')
 %!error <sizes of X and Y must match> dot (ones (2,2), ones (2,3))
 %!error <DIM must be a valid dimension> dot ([1 2], [1 2], 0)
 */
 
 DEFUN (blkmm, args, ,
        "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} blkmm (@var{A}, @var{B})\n\
-Compute products of matrix blocks.  The blocks are given as\n\
-2-dimensional subarrays of the arrays @var{A}, @var{B}.\n\
-The size of @var{A} must have the form @code{[m,k,@dots{}]} and\n\
-size of @var{B} must be @code{[k,n,@dots{}]}.  The result is\n\
-then of size @code{[m,n,@dots{}]} and is computed as follows:\n\
+Compute products of matrix blocks.\n\
+\n\
+The blocks are given as 2-dimensional subarrays of the arrays @var{A},\n\
+@var{B}.  The size of @var{A} must have the form @code{[m,k,@dots{}]} and\n\
+size of @var{B} must be @code{[k,n,@dots{}]}.  The result is then of size\n\
+@code{[m,n,@dots{}]} and is computed as follows:\n\
 \n\
 @example\n\
 @group\n\
 for i = 1:prod (size (@var{A})(3:end))\n\
   @var{C}(:,:,i) = @var{A}(:,:,i) * @var{B}(:,:,i)\n\
 endfor\n\
 @end group\n\
 @end example\n\
diff --git a/libinterp/corefcn/eig.cc b/libinterp/corefcn/eig.cc
--- a/libinterp/corefcn/eig.cc
+++ b/libinterp/corefcn/eig.cc
@@ -38,17 +38,17 @@ DEFUN (eig, args, nargout,
 @deftypefn  {Built-in Function} {@var{lambda} =} eig (@var{A})\n\
 @deftypefnx {Built-in Function} {@var{lambda} =} eig (@var{A}, @var{B})\n\
 @deftypefnx {Built-in Function} {[@var{V}, @var{lambda}] =} eig (@var{A})\n\
 @deftypefnx {Built-in Function} {[@var{V}, @var{lambda}] =} eig (@var{A}, @var{B})\n\
 Compute the eigenvalues (and optionally the eigenvectors) of a matrix\n\
 or a pair of matrices\n\
 \n\
 The algorithm used depends on whether there are one or two input\n\
-matrices, if they are real or complex and if they are symmetric\n\
+matrices, if they are real or complex, and if they are symmetric\n\
 (Hermitian if complex) or non-symmetric.\n\
 \n\
 The eigenvalues returned by @code{eig} are not ordered.\n\
 @seealso{eigs, svd}\n\
 @end deftypefn")
 {
   octave_value_list retval;
 
diff --git a/libinterp/corefcn/error.cc b/libinterp/corefcn/error.cc
--- a/libinterp/corefcn/error.cc
+++ b/libinterp/corefcn/error.cc
@@ -153,31 +153,32 @@ vwarning (const char *name, const char *
 {
   if (discard_warning_messages)
     return;
 
   flush_octave_stdout ();
 
   std::ostringstream output_buf;
 
-  if (name)
-    output_buf << name << ": ";
-
   octave_vformat (output_buf, fmt, args);
 
-  output_buf << std::endl;
-
   // FIXME: we really want to capture the message before it has all the
   //        formatting goop attached to it.  We probably also want just the
   //        message, not the traceback information.
 
-  std::string msg_string = output_buf.str ();
+  std::string base_msg = output_buf.str ();
+  std::string msg_string;
+
+  if (name)
+    msg_string = std::string (name) + ": ";
+  
+  msg_string += base_msg + "\n";
 
   Vlast_warning_id = id;
-  Vlast_warning_message = msg_string;
+  Vlast_warning_message = base_msg;
 
   if (! Vquiet_warning)
     {
       octave_diary << msg_string;
 
       std::cerr << msg_string;
     }
 }
@@ -332,43 +333,40 @@ pr_where (const char *who)
 // just set the error state.
 
 static void
 error_1 (std::ostream& os, const char *name, const char *id,
          const char *fmt, va_list args, bool with_cfn = false)
 {
   if (error_state != -2)
     {
-      if (fmt)
+      if (fmt && *fmt)
         {
-          if (*fmt)
+          size_t len = strlen (fmt);
+
+          if (len > 0)
             {
-              size_t len = strlen (fmt);
-
-              if (len > 0)
+              if (fmt[len - 1] == '\n')
                 {
-                  if (fmt[len - 1] == '\n')
+                  if (len > 1)
                     {
-                      if (len > 1)
-                        {
-                          char *tmp_fmt = strsave (fmt);
-                          tmp_fmt[len - 1] = '\0';
-                          verror (true, os, name, id, tmp_fmt, args, with_cfn);
-                          delete [] tmp_fmt;
-                        }
+                      // Strip newline before issuing error
+                      std::string tmp_fmt (fmt, len - 1);
+                      verror (true, os, name, id, tmp_fmt.c_str (),
+                              args, with_cfn);
+                    }
 
-                      error_state = -2;
-                    }
-                  else
-                    {
-                      verror (true, os, name, id, fmt, args, with_cfn);
+                  error_state = -2;
+                }
+              else
+                {
+                  verror (true, os, name, id, fmt, args, with_cfn);
 
-                      if (! error_state)
-                        error_state = 1;
-                    }
+                  if (! error_state)
+                    error_state = 1;
                 }
             }
         }
       else
         panic ("error_1: invalid format");
     }
 }
 
@@ -629,23 +627,31 @@ warning_1 (const char *id, const char *f
   if (warn_opt == 2)
     {
       // Handle this warning as an error.
 
       error_2 (id, fmt, args);
     }
   else if (warn_opt == 1)
     {
-      vwarning ("warning", id, fmt, args);
+      bool fmt_suppresses_backtrace = false;
+      size_t fmt_len = fmt ? strlen (fmt) : 0;
+      fmt_suppresses_backtrace = (fmt_len > 0 && fmt[fmt_len-1] == '\n');
+
+      if (fmt_suppresses_backtrace && fmt_len > 1)
+        {
+          // Strip newline before issuing warning
+          std::string tmp_fmt (fmt, fmt_len - 1);
+          vwarning ("warning", id, tmp_fmt.c_str (), args);
+        }
+      else
+        vwarning ("warning", id, fmt, args);
 
       bool in_user_code = octave_call_stack::caller_user_code () != 0;
 
-      bool fmt_suppresses_backtrace = false;
-      size_t fmt_len = fmt ? strlen (fmt) : 0;
-      fmt_suppresses_backtrace = (fmt_len > 0 && fmt[fmt_len-1] == '\n');
 
       if (! fmt_suppresses_backtrace && in_user_code
           && Vbacktrace_on_warning && ! warning_state
           && ! discard_warning_messages)
         pr_where ("warning");
 
       warning_state = 1;
 
@@ -827,21 +833,22 @@ handle_message (error_fun f, const char 
     }
 
   return retval;
 }
 
 DEFUN (rethrow, args, ,
        "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} rethrow (@var{err})\n\
-Reissue a previous error as defined by @var{err}.  @var{err} is a structure\n\
-that must contain at least the @qcode{\"message\"} and @qcode{\"identifier\"}\n\
-fields.  @var{err} can also contain a field @qcode{\"stack\"} that gives\n\
-information on the assumed location of the error.  Typically @var{err} is\n\
-returned from @code{lasterror}.\n\
+Reissue a previous error as defined by @var{err}.\n\
+\n\
+@var{err} is a structure that must contain at least the @qcode{\"message\"}\n\
+and @qcode{\"identifier\"} fields.  @var{err} can also contain a field\n\
+@qcode{\"stack\"} that gives information on the assumed location of the\n\
+error.  Typically @var{err} is returned from @code{lasterror}.\n\
 @seealso{lasterror, lasterr, error}\n\
 @end deftypefn")
 {
   octave_value retval;
   int nargin = args.length ();
 
   if (nargin != 1)
     print_usage ();
@@ -1017,24 +1024,26 @@ maybe_extract_message_id (const std::str
 
   return have_fmt;
 }
 
 DEFUN (error, args, ,
        "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {} error (@var{template}, @dots{})\n\
 @deftypefnx {Built-in Function} {} error (@var{id}, @var{template}, @dots{})\n\
+Display an error message and stop m-file execution.\n\
+\n\
 Format the optional arguments under the control of the template string\n\
 @var{template} using the same rules as the @code{printf} family of\n\
 functions (@pxref{Formatted Output}) and print the resulting message\n\
 on the @code{stderr} stream.  The message is prefixed by the character\n\
 string @samp{error: }.\n\
 \n\
 Calling @code{error} also sets Octave's internal error state such that\n\
-control will return to the top level without evaluating any more\n\
+control will return to the top level without evaluating any further\n\
 commands.  This is useful for aborting from functions or scripts.\n\
 \n\
 If the error message does not end with a newline character, Octave will\n\
 print a traceback of all the function calls leading to the error.  For\n\
 example, given the following function definitions:\n\
 \n\
 @example\n\
 @group\n\
@@ -1095,17 +1104,17 @@ error (err_msg);\n\
 @noindent\n\
 which will only stop execution if an error has been found.\n\
 \n\
 Implementation Note: For compatibility with @sc{matlab}, escape\n\
 sequences in @var{template} (e.g., @qcode{\"@xbackslashchar{}n\"} =>\n\
 newline) are processed regardless of whether @var{template} has been defined\n\
 with single quotes, as long as there are two or more input arguments.  To\n\
 disable escape sequence expansion use a second backslash before the sequence\n\
-(e.g., \"@xbackslashchar{}@xbackslashchar{}n\") or use the\n\
+(e.g., @qcode{\"@xbackslashchar{}@xbackslashchar{}n\"}) or use the\n\
 @code{regexptranslate} function.\n\
 @seealso{warning, lasterror}\n\
 @end deftypefn")
 {
   octave_value retval;
 
   int nargin = args.length ();
 
@@ -1347,16 +1356,18 @@ DEFUN (warning, args, nargout,
 @deftypefn  {Built-in Function} {} warning (@var{template}, @dots{})\n\
 @deftypefnx {Built-in Function} {} warning (@var{id}, @var{template}, @dots{})\n\
 @deftypefnx {Built-in Function} {} warning (\"on\", @var{id})\n\
 @deftypefnx {Built-in Function} {} warning (\"off\", @var{id})\n\
 @deftypefnx {Built-in Function} {} warning (\"query\", @var{id})\n\
 @deftypefnx {Built-in Function} {} warning (\"error\", @var{id})\n\
 @deftypefnx {Built-in Function} {} warning (@var{state}, \"backtrace\")\n\
 @deftypefnx {Built-in Function} {} warning (@var{state}, @var{id}, \"local\")\n\
+Display a warning message or control the behavior of Octave's warning system.\n\
+\n\
 Format the optional arguments under the control of the template string\n\
 @var{template} using the same rules as the @code{printf} family of\n\
 functions (@pxref{Formatted Output}) and print the resulting message\n\
 on the @code{stderr} stream.  The message is prefixed by the character\n\
 string @samp{warning: }.\n\
 You should use this function when you want to notify the user\n\
 of an unusual condition, but only when it makes sense for your program\n\
 to go on.\n\
@@ -1395,17 +1406,17 @@ previous warning state is restored on re
 function.  The @qcode{\"local\"} option is ignored if used in the top-level\n\
 workspace.\n\
 \n\
 Implementation Note: For compatibility with @sc{matlab}, escape\n\
 sequences in @var{template} (e.g., @qcode{\"@xbackslashchar{}n\"} =>\n\
 newline) are processed regardless of whether @var{template} has been defined\n\
 with single quotes, as long as there are two or more input arguments.  To\n\
 disable escape sequence expansion use a second backslash before the sequence\n\
-(e.g., \"@xbackslashchar{}@xbackslashchar{}n\") or use the\n\
+(e.g., @qcode{\"@xbackslashchar{}@xbackslashchar{}n\"}) or use the\n\
 @code{regexptranslate} function.\n\
 @seealso{warning_ids, lastwarn, error}\n\
 @end deftypefn")
 {
   octave_value retval;
 
   int nargin = args.length ();
   int argc = nargin + 1;
@@ -1749,31 +1760,33 @@ initialize_default_warning_state (void)
   disable_warning ("Octave:variable-switch-label");
 }
 
 DEFUN (lasterror, args, ,
        "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {@var{lasterr} =} lasterror ()\n\
 @deftypefnx {Built-in Function} {} lasterror (@var{err})\n\
 @deftypefnx {Built-in Function} {} lasterror (\"reset\")\n\
-Query or set the last error message structure.  When called without\n\
-arguments, return a structure containing the last error message and other\n\
-information related to this error.  The elements of the structure are:\n\
+Query or set the last error message structure.\n\
+\n\
+When called without arguments, return a structure containing the last error\n\
+message and other information related to this error.  The elements of the\n\
+structure are:\n\
 \n\
 @table @code\n\
 @item message\n\
 The text of the last error message\n\
 \n\
 @item identifier\n\
 The message identifier of this error message\n\
 \n\
 @item stack\n\
 A structure containing information on where the message occurred.  This may\n\
-be an empty structure if the information cannot\n\
-be obtained.  The fields of the structure are:\n\
+be an empty structure if the information cannot be obtained.  The fields of\n\
+the structure are:\n\
 \n\
 @table @code\n\
 @item file\n\
 The name of the file where the error occurred\n\
 \n\
 @item name\n\
 The name of function in which the error occurred\n\
 \n\
@@ -1920,20 +1933,24 @@ fields are set to their default values.\
   return retval;
 }
 
 DEFUN (lasterr, args, nargout,
        "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {[@var{msg}, @var{msgid}] =} lasterr ()\n\
 @deftypefnx {Built-in Function} {} lasterr (@var{msg})\n\
 @deftypefnx {Built-in Function} {} lasterr (@var{msg}, @var{msgid})\n\
-Query or set the last error message.  When called without input arguments,\n\
-return the last error message and message identifier.  With one\n\
-argument, set the last error message to @var{msg}.  With two arguments,\n\
-also set the last message identifier.\n\
+Query or set the last error message.\n\
+\n\
+When called without input arguments, return the last error message and\n\
+message identifier.\n\
+\n\
+With one argument, set the last error message to @var{msg}.\n\
+\n\
+With two arguments, also set the last message identifier.\n\
 @seealso{lasterror, error, lastwarn}\n\
 @end deftypefn")
 {
   octave_value_list retval;
 
   unwind_protect frame;
 
   frame.protect_var (error_state);
@@ -1971,20 +1988,24 @@ also set the last message identifier.\n\
   return retval;
 }
 
 DEFUN (lastwarn, args, nargout,
        "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {[@var{msg}, @var{msgid}] =} lastwarn ()\n\
 @deftypefnx {Built-in Function} {} lastwarn (@var{msg})\n\
 @deftypefnx {Built-in Function} {} lastwarn (@var{msg}, @var{msgid})\n\
-Query or set the last warning message.  When called without input arguments,\n\
-return the last warning message and message identifier.  With one\n\
-argument, set the last warning message to @var{msg}.  With two arguments,\n\
-also set the last message identifier.\n\
+Query or set the last warning message.\n\
+\n\
+When called without input arguments, return the last warning message and\n\
+message identifier.\n\
+\n\
+With one argument, set the last warning message to @var{msg}.\n\
+\n\
+With two arguments, also set the last message identifier.\n\
 @seealso{warning, lasterror, lasterr}\n\
 @end deftypefn")
 {
   octave_value_list retval;
 
   int argc = args.length () + 1;
 
   if (argc < 4)
@@ -2013,16 +2034,17 @@ also set the last message identifier.\n\
         error ("lastwarn: all arguments must be strings");
     }
   else
     print_usage ();
 
   return retval;
 }
 
+/* FIXME: Deprecated in 4.0 and scheduled for removal in 4.4 */
 DEFUN (__usage__, args, ,
        "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} usage (@var{msg})\n\
 Print the message @var{msg}, prefixed by the string @samp{usage: }, and\n\
 set Octave's internal error state such that control will return to the\n\
 top level without evaluating any more commands.  This is useful for\n\
 aborting from functions.\n\
 \n\
@@ -2056,52 +2078,53 @@ DEFUN (beep_on_error, args, nargout,
        "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {@var{val} =} beep_on_error ()\n\
 @deftypefnx {Built-in Function} {@var{old_val} =} beep_on_error (@var{new_val})\n\
 @deftypefnx {Built-in Function} {} beep_on_error (@var{new_val}, \"local\")\n\
 Query or set the internal variable that controls whether Octave will try\n\
 to ring the terminal bell before printing an error message.\n\
 \n\
 When called from inside a function with the @qcode{\"local\"} option, the\n\
-variable is changed locally for the function and any subroutines it calls.  \n\
+variable is changed locally for the function and any subroutines it calls.\n\
 The original variable value is restored when exiting the function.\n\
 @end deftypefn")
 {
   return SET_INTERNAL_VARIABLE (beep_on_error);
 }
 
 DEFUN (debug_on_error, args, nargout,
        "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {@var{val} =} debug_on_error ()\n\
 @deftypefnx {Built-in Function} {@var{old_val} =} debug_on_error (@var{new_val})\n\
 @deftypefnx {Built-in Function} {} debug_on_error (@var{new_val}, \"local\")\n\
 Query or set the internal variable that controls whether Octave will try\n\
-to enter the debugger when an error is encountered.  This will also\n\
-inhibit printing of the normal traceback message (you will only see\n\
-the top-level error message).\n\
+to enter the debugger when an error is encountered.\n\
+\n\
+This will also inhibit printing of the normal traceback message (you will\n\
+only see the top-level error message).\n\
 \n\
 When called from inside a function with the @qcode{\"local\"} option, the\n\
-variable is changed locally for the function and any subroutines it calls.  \n\
+variable is changed locally for the function and any subroutines it calls.\n\
 The original variable value is restored when exiting the function.\n\
 @seealso{debug_on_warning, debug_on_interrupt}\n\
 @end deftypefn")
 {
   return SET_INTERNAL_VARIABLE (debug_on_error);
 }
 
 DEFUN (debug_on_warning, args, nargout,
        "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {@var{val} =} debug_on_warning ()\n\
 @deftypefnx {Built-in Function} {@var{old_val} =} debug_on_warning (@var{new_val})\n\
 @deftypefnx {Built-in Function} {} debug_on_warning (@var{new_val}, \"local\")\n\
 Query or set the internal variable that controls whether Octave will try\n\
 to enter the debugger when a warning is encountered.\n\
 \n\
 When called from inside a function with the @qcode{\"local\"} option, the\n\
-variable is changed locally for the function and any subroutines it calls.  \n\
+variable is changed locally for the function and any subroutines it calls.\n\
 The original variable value is restored when exiting the function.\n\
 @seealso{debug_on_error, debug_on_interrupt}\n\
 @end deftypefn")
 {
   return SET_INTERNAL_VARIABLE (debug_on_warning);
 }
 
 std::string
diff --git a/libinterp/corefcn/fft2.cc b/libinterp/corefcn/fft2.cc
--- a/libinterp/corefcn/fft2.cc
+++ b/libinterp/corefcn/fft2.cc
@@ -169,45 +169,43 @@ do_fft2 (const octave_value_list &args, 
 
 DEFUN (fft2, args, ,
        "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {} fft2 (@var{A})\n\
 @deftypefnx {Built-in Function} {} fft2 (@var{A}, @var{m}, @var{n})\n\
 Compute the two-dimensional discrete Fourier transform of @var{A} using\n\
 a Fast Fourier Transform (FFT) algorithm.\n\
 \n\
-The optional arguments @var{m} and @var{n} may be used specify the\n\
-number of rows and columns of @var{A} to use.  If either of these is\n\
-larger than the size of @var{A}, @var{A} is resized and padded with\n\
-zeros.\n\
+The optional arguments @var{m} and @var{n} may be used specify the number of\n\
+rows and columns of @var{A} to use.  If either of these is larger than the\n\
+size of @var{A}, @var{A} is resized and padded with zeros.\n\
 \n\
 If @var{A} is a multi-dimensional matrix, each two-dimensional sub-matrix\n\
 of @var{A} is treated separately.\n\
-@seealso {ifft2, fft, fftn, fftw}\n\
+@seealso{ifft2, fft, fftn, fftw}\n\
 @end deftypefn")
 {
   return do_fft2 (args, "fft2", 0);
 }
 
 
 DEFUN (ifft2, args, ,
        "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {} ifft2 (@var{A})\n\
 @deftypefnx {Built-in Function} {} ifft2 (@var{A}, @var{m}, @var{n})\n\
 Compute the inverse two-dimensional discrete Fourier transform of @var{A}\n\
 using a Fast Fourier Transform (FFT) algorithm.\n\
 \n\
-The optional arguments @var{m} and @var{n} may be used specify the\n\
-number of rows and columns of @var{A} to use.  If either of these is\n\
-larger than the size of @var{A}, @var{A} is resized and padded with\n\
-zeros.\n\
+The optional arguments @var{m} and @var{n} may be used specify the number of\n\
+rows and columns of @var{A} to use.  If either of these is larger than the\n\
+size of @var{A}, @var{A} is resized and padded with zeros.\n\
 \n\
 If @var{A} is a multi-dimensional matrix, each two-dimensional sub-matrix\n\
 of @var{A} is treated separately\n\
-@seealso {fft2, ifft, ifftn, fftw}\n\
+@seealso{fft2, ifft, ifftn, fftw}\n\
 @end deftypefn")
 {
   return do_fft2 (args, "ifft2", 1);
 }
 
 /*
 %% Author: David Billinghurst (David.Billinghurst@riotinto.com.au)
 %%         Comalco Research and Technology
diff --git a/libinterp/corefcn/fftn.cc b/libinterp/corefcn/fftn.cc
--- a/libinterp/corefcn/fftn.cc
+++ b/libinterp/corefcn/fftn.cc
@@ -152,38 +152,38 @@ do_fftn (const octave_value_list &args, 
 
 DEFUN (fftn, args, ,
        "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {} fftn (@var{A})\n\
 @deftypefnx {Built-in Function} {} fftn (@var{A}, @var{size})\n\
 Compute the N-dimensional discrete Fourier transform of @var{A} using\n\
 a Fast Fourier Transform (FFT) algorithm.\n\
 \n\
-The optional vector argument @var{size} may be used specify the\n\
-dimensions of the array to be used.  If an element of @var{size} is\n\
-smaller than the corresponding dimension of @var{A}, then the dimension of\n\
-@var{A} is truncated prior to performing the FFT@.  Otherwise, if an element\n\
-of @var{size} is larger than the corresponding dimension then @var{A}\n\
-is resized and padded with zeros.\n\
+The optional vector argument @var{size} may be used specify the dimensions\n\
+of the array to be used.  If an element of @var{size} is smaller than the\n\
+corresponding dimension of @var{A}, then the dimension of @var{A} is\n\
+truncated prior to performing the FFT@.  Otherwise, if an element of\n\
+@var{size} is larger than the corresponding dimension then @var{A} is\n\
+resized and padded with zeros.\n\
 @seealso{ifftn, fft, fft2, fftw}\n\
 @end deftypefn")
 {
   return do_fftn (args, "fftn", 0);
 }
 
 DEFUN (ifftn, args, ,
        "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {} ifftn (@var{A})\n\
 @deftypefnx {Built-in Function} {} ifftn (@var{A}, @var{size})\n\
 Compute the inverse N-dimensional discrete Fourier transform of @var{A}\n\
 using a Fast Fourier Transform (FFT) algorithm.\n\
 \n\
-The optional vector argument @var{size} may be used specify the\n\
-dimensions of the array to be used.  If an element of @var{size} is\n\
-smaller than the corresponding dimension of @var{A}, then the dimension of\n\
-@var{A} is truncated prior to performing the inverse FFT@.  Otherwise, if an\n\
-element of @var{size} is larger than the corresponding dimension then @var{A}\n\
-is resized and padded with zeros.\n\
+The optional vector argument @var{size} may be used specify the dimensions\n\
+of the array to be used.  If an element of @var{size} is smaller than the\n\
+corresponding dimension of @var{A}, then the dimension of @var{A} is\n\
+truncated prior to performing the inverse FFT@.  Otherwise, if an element of\n\
+@var{size} is larger than the corresponding dimension then @var{A} is\n\
+resized and padded with zeros.\n\
 @seealso{fftn, ifft, ifft2, fftw}\n\
 @end deftypefn")
 {
   return do_fftn (args, "ifftn", 1);
 }
diff --git a/libinterp/corefcn/file-io.cc b/libinterp/corefcn/file-io.cc
--- a/libinterp/corefcn/file-io.cc
+++ b/libinterp/corefcn/file-io.cc
@@ -337,18 +337,20 @@ always a good idea to flush the standard
   return retval;
 }
 
 DEFUN (fgetl, args, ,
        "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {@var{str} =} fgetl (@var{fid})\n\
 @deftypefnx {Built-in Function} {@var{str} =} fgetl (@var{fid}, @var{len})\n\
 Read characters from a file, stopping after a newline, or EOF,\n\
-or @var{len} characters have been read.  The characters read, excluding\n\
-the possible trailing newline, are returned as a string.\n\
+or @var{len} characters have been read.\n\
+\n\
+The characters read, excluding the possible trailing newline, are returned\n\
+as a string.\n\
 \n\
 If @var{len} is omitted, @code{fgetl} reads until the next newline character.\n\
 \n\
 If there are no more characters to read, @code{fgetl} returns @minus{}1.\n\
 \n\
 To read a line and return the terminating newline see @code{fgets}.\n\
 @seealso{fgets, fscanf, fread, fopen}\n\
 @end deftypefn")
@@ -387,18 +389,20 @@ To read a line and return the terminatin
   return retval;
 }
 
 DEFUN (fgets, args, ,
        "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {@var{str} =} fgets (@var{fid})\n\
 @deftypefnx {Built-in Function} {@var{str} =} fgets (@var{fid}, @var{len})\n\
 Read characters from a file, stopping after a newline, or EOF,\n\
-or @var{len} characters have been read.  The characters read, including\n\
-the possible trailing newline, are returned as a string.\n\
+or @var{len} characters have been read.\n\
+\n\
+The characters read, including the possible trailing newline, are returned\n\
+as a string.\n\
 \n\
 If @var{len} is omitted, @code{fgets} reads until the next newline character.\n\
 \n\
 If there are no more characters to read, @code{fgets} returns @minus{}1.\n\
 \n\
 To read a line and discard the terminating newline see @code{fgetl}.\n\
 @seealso{fputs, fgetl, fscanf, fread, fopen}\n\
 @end deftypefn")
@@ -586,16 +590,18 @@ do_stream_open (const octave_value& tc_n
 DEFUN (fopen, args, nargout,
        "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {@var{fid} =} fopen (@var{name})\n\
 @deftypefnx {Built-in Function} {@var{fid} =} fopen (@var{name}, @var{mode})\n\
 @deftypefnx {Built-in Function} {@var{fid} =} fopen (@var{name}, @var{mode}, @var{arch})\n\
 @deftypefnx {Built-in Function} {[@var{fid}, @var{msg}] =} fopen (@dots{})\n\
 @deftypefnx {Built-in Function} {@var{fid_list} =} fopen (\"all\")\n\
 @deftypefnx {Built-in Function} {[@var{file}, @var{mode}, @var{arch}] =} fopen (@var{fid})\n\
+Open a file for low-level I/O or query open files and file descriptors.\n\
+\n\
 The first form of the @code{fopen} function opens the named file with\n\
 the specified mode (read-write, read-only, etc.) and architecture\n\
 interpretation (IEEE big endian, IEEE little endian, etc.), and returns\n\
 an integer value that may be used to refer to the file later.  If an\n\
 error occurs, @var{fid} is set to @minus{}1 and @var{msg} contains the\n\
 corresponding system error message.  The @var{mode} is a one or two\n\
 character string that specifies whether the file is to be opened for\n\
 reading, writing, or both.\n\
@@ -742,17 +748,19 @@ however, conversions are currently only 
 
   return retval;
 }
 
 DEFUN (freport, args, ,
        "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} freport ()\n\
 Print a list of which files have been opened, and whether they are open\n\
-for reading, writing, or both.  For example:\n\
+for reading, writing, or both.\n\
+\n\
+For example:\n\
 \n\
 @example\n\
 @group\n\
 freport ()\n\
 \n\
      @print{}  number  mode  arch       name\n\
      @print{}  ------  ----  ----       ----\n\
      @print{}     0     r    ieee-le    stdin\n\
@@ -1058,20 +1066,21 @@ Return a non-negative number on success 
 
   return retval;
 }
 
 DEFUN (sprintf, args, ,
        "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} sprintf (@var{template}, @dots{})\n\
 This is like @code{printf}, except that the output is returned as a\n\
-string.  Unlike the C library function, which requires you to provide a\n\
-suitably sized string as an argument, Octave's @code{sprintf} function\n\
-returns the string, automatically sized to hold all of the items\n\
-converted.\n\
+string.\n\
+\n\
+Unlike the C library function, which requires you to provide a suitably\n\
+sized string as an argument, Octave's @code{sprintf} function returns the\n\
+string, automatically sized to hold all of the items converted.\n\
 \n\
 Implementation Note: For compatibility with @sc{matlab}, escape sequences in\n\
 the template string (e.g., @qcode{\"@xbackslashchar{}n\"} => newline) are\n\
 expanded even when the template string is defined with single quotes.\n\
 @seealso{printf, fprintf, sscanf}\n\
 @end deftypefn")
 {
   static std::string who = "sprintf";
@@ -1154,18 +1163,17 @@ column is padded with zeros.\n\
 Read up to @code{@var{nr} * @var{nc}} elements, returning a matrix with\n\
 @var{nr} rows.  If the number of elements read is not an exact multiple\n\
 of @var{nr}, the last column is padded with zeros.\n\
 @end table\n\
 \n\
 @noindent\n\
 If @var{size} is omitted, a value of @code{Inf} is assumed.\n\
 \n\
-A string is returned if @var{template} specifies only character\n\
-conversions.\n\
+A string is returned if @var{template} specifies only character conversions.\n\
 \n\
 The number of items successfully read is returned in @var{count}.\n\
 \n\
 If an error occurs, @var{errmsg} contains a system-dependent error message.\n\
 \n\
 In the second form, read from @var{fid} according to @var{template},\n\
 with each conversion specifier in @var{template} corresponding to a\n\
 single scalar return value.  This form is more ``C-like'', and also\n\
@@ -1258,20 +1266,21 @@ get_sscanf_data (const octave_value& val
   return retval;
 }
 
 DEFUN (sscanf, args, ,
        "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {[@var{val}, @var{count}, @var{errmsg}, @var{pos}] =} sscanf (@var{string}, @var{template}, @var{size})\n\
 @deftypefnx {Built-in Function} {[@var{v1}, @var{v2}, @dots{}, @var{count}, @var{errmsg}] =} sscanf (@var{string}, @var{template}, \"C\")\n\
 This is like @code{fscanf}, except that the characters are taken from the\n\
-string @var{string} instead of from a stream.  Reaching the end of the\n\
-string is treated as an end-of-file condition.  In addition to the values\n\
-returned by @code{fscanf}, the index of the next character to be read\n\
-is returned in @var{pos}.\n\
+string @var{string} instead of from a stream.\n\
+\n\
+Reaching the end of the string is treated as an end-of-file condition.  In\n\
+addition to the values returned by @code{fscanf}, the index of the next\n\
+character to be read is returned in @var{pos}.\n\
 @seealso{fscanf, scanf, sprintf}\n\
 @end deftypefn")
 {
   static std::string who = "sscanf";
 
   octave_value_list retval;
 
   int nargin = args.length ();
@@ -1800,24 +1809,24 @@ DEFUNX ("ferror", Fferror, args, ,
 @deftypefn  {Built-in Function} {@var{msg} =} ferror (@var{fid})\n\
 @deftypefnx {Built-in Function} {[@var{msg}, @var{err}] =} ferror (@var{fid})\n\
 @deftypefnx {Built-in Function} {[@var{dots}] =} ferror (@var{fid}, \"clear\")\n\
 Query the error status of the stream specified by file descriptor @var{fid}\n\
 \n\
 If an error condition exists then return a string @var{msg} describing the\n\
 error.  Otherwise, return an empty string @qcode{\"\"}.\n\
 \n\
+The second input @qcode{\"clear\"} is optional.  If supplied, the error\n\
+state on the stream will be cleared.\n\
+\n\
 The optional second output is a numeric indication of the error status.\n\
 @var{err} is 1 if an error condition has been encountered and 0 otherwise.\n\
 \n\
 Note that @code{ferror} indicates if an error has already occurred, not\n\
 whether the next operation will result in an error condition.\n\
-\n\
-The second input @qcode{\"clear\"} is optional.  If supplied, the error\n\
-state on the stream will be cleared.\n\
 @seealso{fclear, fopen}\n\
 @end deftypefn")
 {
   octave_value_list retval;
 
   int nargin = args.length ();
 
   if (nargin == 1 || nargin == 2)
@@ -1850,31 +1859,34 @@ state on the stream will be cleared.\n\
     print_usage ();
 
   return retval;
 }
 
 DEFUNX ("popen", Fpopen, args, ,
         "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {@var{fid} =} popen (@var{command}, @var{mode})\n\
-Start a process and create a pipe.  The name of the command to run is\n\
-given by @var{command}.  The file identifier corresponding to the input\n\
-or output stream of the process is returned in @var{fid}.  The argument\n\
+Start a process and create a pipe.\n\
+\n\
+The name of the command to run is given by @var{command}.  The argument\n\
 @var{mode} may be\n\
 \n\
 @table @code\n\
 @item @qcode{\"r\"}\n\
 The pipe will be connected to the standard output of the process, and\n\
 open for reading.\n\
 \n\
 @item @qcode{\"w\"}\n\
 The pipe will be connected to the standard input of the process, and\n\
 open for writing.\n\
 @end table\n\
 \n\
+The file identifier corresponding to the input or output stream of the\n\
+process is returned in @var{fid}.\n\
+\n\
 For example:\n\
 \n\
 @example\n\
 @group\n\
 fid = popen (\"ls -ltr / | tail -3\", \"r\");\n\
 while (ischar (s = fgets (fid)))\n\
   fputs (stdout, s);\n\
 endwhile\n\
@@ -1952,16 +1964,17 @@ The function @code{fclose} may also be u
 DEFUN (tempname, args, ,
        "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {@var{fname} =} tempname ()\n\
 @deftypefnx {Built-in Function} {@var{fname} =} tempname (@var{dir})\n\
 @deftypefnx {Built-in Function} {@var{fname} =} tempname (@var{dir}, @var{prefix})\n\
 Return a unique temporary file name as a string.\n\
 \n\
 If @var{prefix} is omitted, a value of @qcode{\"oct-\"} is used.\n\
+\n\
 If @var{dir} is also omitted, the default directory for temporary files\n\
 (@code{P_tmpdir}) is used.  If @var{dir} is provided, it must exist,\n\
 otherwise the default directory for temporary files is used.\n\
 \n\
 Programming Note: Because the named file is not opened by @code{tempname},\n\
 it is possible, though relatively unlikely, that it will not be available\n\
 by the time your program attempts to open it.  If this is a concern,\n\
 see @code{tmpfile}.\n\
@@ -2217,18 +2230,19 @@ convert (int x, int ibase, int obase)
   return retval;
 }
 
 DEFUNX ("umask", Fumask, args, ,
         "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} umask (@var{mask})\n\
 Set the permission mask for file creation.\n\
 \n\
-The parameter @var{mask} is an integer, interpreted as an octal number.  If\n\
-successful, returns the previous value of the mask (as an integer to be\n\
+The parameter @var{mask} is an integer, interpreted as an octal number.\n\
+\n\
+If successful, returns the previous value of the mask (as an integer to be\n\
 interpreted as an octal number); otherwise an error message is printed.\n\
 @seealso{fopen, mkdir}\n\
 @end deftypefn")
 {
   octave_value_list retval;
 
   int status = 0;
 
diff --git a/libinterp/corefcn/filter.cc b/libinterp/corefcn/filter.cc
--- a/libinterp/corefcn/filter.cc
+++ b/libinterp/corefcn/filter.cc
@@ -286,22 +286,24 @@ filter (MArray<T>& b, MArray<T>& a, MArr
 
   MArray<T> si (si_dims, T (0.0));
 
   return filter (b, a, x, si, dim);
 }
 
 DEFUN (filter, args, nargout,
        "-*- texinfo -*-\n\
-@deftypefn  {Built-in Function} {y =} filter (@var{b}, @var{a}, @var{x})\n\
+@deftypefn  {Built-in Function} {@var{y} =} filter (@var{b}, @var{a}, @var{x})\n\
 @deftypefnx {Built-in Function} {[@var{y}, @var{sf}] =} filter (@var{b}, @var{a}, @var{x}, @var{si})\n\
 @deftypefnx {Built-in Function} {[@var{y}, @var{sf}] =} filter (@var{b}, @var{a}, @var{x}, [], @var{dim})\n\
 @deftypefnx {Built-in Function} {[@var{y}, @var{sf}] =} filter (@var{b}, @var{a}, @var{x}, @var{si}, @var{dim})\n\
-Return the solution to the following linear, time-invariant difference\n\
-equation:\n\
+Apply a 1-D digital filter to the data @var{x}.\n\
+\n\
+@code{filter} returns the solution to the following linear, time-invariant\n\
+difference equation:\n\
 @tex\n\
 $$\n\
 \\sum_{k=0}^N a_{k+1} y_{n-k} = \\sum_{k=0}^M b_{k+1} x_{n-k}, \\qquad\n\
  1 \\le n \\le P\n\
 $$\n\
 @end tex\n\
 @ifnottex\n\
 @c Set example in small font to prevent overfull line\n\
@@ -358,19 +360,19 @@ where\n\
 \n\
 If the fourth argument @var{si} is provided, it is taken as the\n\
 initial state of the system and the final state is returned as\n\
 @var{sf}.  The state vector is a column vector whose length is\n\
 equal to the length of the longest coefficient vector minus one.\n\
 If @var{si} is not supplied, the initial state vector is set to all\n\
 zeros.\n\
 \n\
-In terms of the Z Transform, y is the result of passing the discrete-\n\
-time signal x through a system characterized by the following rational\n\
-system function:\n\
+In terms of the Z Transform, @var{y} is the result of passing the\n\
+discrete-time signal @var{x} through a system characterized by the following\n\
+rational system function:\n\
 @tex\n\
 $$\n\
 H(z) = {\\displaystyle\\sum_{k=0}^M d_{k+1} z^{-k}\n\
         \\over 1 + \\displaystyle\\sum_{k+1}^N c_{k+1} z^{-k}}\n\
 $$\n\
 @end tex\n\
 @ifnottex\n\
 \n\
diff --git a/libinterp/corefcn/find.cc b/libinterp/corefcn/find.cc
--- a/libinterp/corefcn/find.cc
+++ b/libinterp/corefcn/find.cc
@@ -328,27 +328,37 @@ find_nonzero_elem_idx (const PermMatrix&
 DEFUN (find, args, nargout,
        "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {@var{idx} =} find (@var{x})\n\
 @deftypefnx {Built-in Function} {@var{idx} =} find (@var{x}, @var{n})\n\
 @deftypefnx {Built-in Function} {@var{idx} =} find (@var{x}, @var{n}, @var{direction})\n\
 @deftypefnx {Built-in Function} {[i, j] =} find (@dots{})\n\
 @deftypefnx {Built-in Function} {[i, j, v] =} find (@dots{})\n\
 Return a vector of indices of nonzero elements of a matrix, as a row if\n\
-@var{x} is a row vector or as a column otherwise.  To obtain a single index\n\
-for each matrix element, Octave pretends that the columns of a matrix form\n\
-one long vector (like Fortran arrays are stored).  For example:\n\
+@var{x} is a row vector or as a column otherwise.\n\
+\n\
+To obtain a single index for each matrix element, Octave pretends that the\n\
+columns of a matrix form one long vector (like Fortran arrays are stored). \n\
+For example:\n\
 \n\
 @example\n\
 @group\n\
 find (eye (2))\n\
   @result{} [ 1; 4 ]\n\
 @end group\n\
 @end example\n\
 \n\
+If two inputs are given, @var{n} indicates the maximum number of elements to\n\
+find from the beginning of the matrix or vector.\n\
+\n\
+If three inputs are given, @var{direction} should be one of\n\
+@qcode{\"first\"} or @qcode{\"last\"}, requesting only the first or last\n\
+@var{n} indices, respectively.  However, the indices are always returned in\n\
+ascending order.\n\
+\n\
 If two outputs are requested, @code{find} returns the row and column\n\
 indices of nonzero elements of a matrix.  For example:\n\
 \n\
 @example\n\
 @group\n\
 [i, j] = find (2 * eye (2))\n\
     @result{} i = [ 1; 2 ]\n\
     @result{} j = [ 1; 2 ]\n\
@@ -362,24 +372,16 @@ containing the nonzero values.  For exam
 @group\n\
 [i, j, v] = find (3 * eye (2))\n\
        @result{} i = [ 1; 2 ]\n\
        @result{} j = [ 1; 2 ]\n\
        @result{} v = [ 3; 3 ]\n\
 @end group\n\
 @end example\n\
 \n\
-If two inputs are given, @var{n} indicates the maximum number of\n\
-elements to find from the beginning of the matrix or vector.\n\
-\n\
-If three inputs are given, @var{direction} should be one of\n\
-@qcode{\"first\"} or @qcode{\"last\"}, requesting only the first or last\n\
-@var{n} indices, respectively.  However, the indices are always returned in\n\
-ascending order.\n\
-\n\
 Note that this function is particularly useful for sparse matrices, as\n\
 it extracts the nonzero elements as vectors, which can then be used to\n\
 create the original matrix.  For example:\n\
 \n\
 @example\n\
 @group\n\
 sz = size (a);\n\
 [i, j, v] = find (a);\n\
diff --git a/libinterp/corefcn/gammainc.cc b/libinterp/corefcn/gammainc.cc
--- a/libinterp/corefcn/gammainc.cc
+++ b/libinterp/corefcn/gammainc.cc
@@ -32,17 +32,19 @@ along with Octave; see the file COPYING.
 #include "oct-obj.h"
 #include "utils.h"
 
 DEFUN (gammainc, args, ,
        "-*- texinfo -*-\n\
 @deftypefn  {Mapping Function} {} gammainc (@var{x}, @var{a})\n\
 @deftypefnx {Mapping Function} {} gammainc (@var{x}, @var{a}, \"lower\")\n\
 @deftypefnx {Mapping Function} {} gammainc (@var{x}, @var{a}, \"upper\")\n\
-Compute the normalized incomplete gamma function,\n\
+Compute the normalized incomplete gamma function.\n\
+\n\
+This is defined as\n\
 @tex\n\
 $$\n\
  \\gamma (x, a) = {1 \\over {\\Gamma (a)}}\\displaystyle{\\int_0^x t^{a-1} e^{-t} dt}\n\
 $$\n\
 @end tex\n\
 @ifnottex\n\
 \n\
 @example\n\
diff --git a/libinterp/corefcn/gcd.cc b/libinterp/corefcn/gcd.cc
--- a/libinterp/corefcn/gcd.cc
+++ b/libinterp/corefcn/gcd.cc
@@ -443,17 +443,17 @@ DEFUN (gcd, args, nargout,
 @deftypefnx {Built-in Function} {[@var{g}, @var{v1}, @dots{}] =} gcd (@var{a1}, @var{a2}, @dots{})\n\
 Compute the greatest common divisor of @var{a1}, @var{a2}, @dots{}.\n\
 \n\
 If more than one argument is given then all arguments must be the same size\n\
 or scalar.  In this case the greatest common divisor is calculated for each\n\
 element individually.  All elements must be ordinary or Gaussian (complex)\n\
 integers.  Note that for Gaussian integers, the gcd is only unique up to a\n\
 phase factor (multiplication by 1, -1, i, or -i), so an arbitrary greatest\n\
-common divisor amongst four possible is returned.\n\
+common divisor among the four possible is returned.\n\
 \n\
 Optional return arguments @var{v1}, @dots{}, contain integer vectors such\n\
 that,\n\
 \n\
 @tex\n\
 $g = v_1 a_1 + v_2 a_2 + \\cdots$\n\
 @end tex\n\
 @ifnottex\n\
diff --git a/libinterp/corefcn/getgrent.cc b/libinterp/corefcn/getgrent.cc
--- a/libinterp/corefcn/getgrent.cc
+++ b/libinterp/corefcn/getgrent.cc
@@ -61,17 +61,19 @@ mk_gr_map (const octave_group& gr)
 
   return retval;
 }
 
 DEFUN (getgrent, args, ,
        "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {@var{grp_struct} =} getgrent ()\n\
 Return an entry from the group database, opening it if necessary.\n\
+\n\
 Once the end of data has been reached, @code{getgrent} returns 0.\n\
+@seealso{setgrent, endgrent}\n\
 @end deftypefn")
 {
   octave_value_list retval;
 
   retval(1) = std::string ();
   retval(0) = 0;
 
   int nargin = args.length ();
@@ -88,18 +90,20 @@ Once the end of data has been reached, @
 
   return retval;
 }
 
 DEFUN (getgrgid, args, ,
        "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {@var{grp_struct} =} getgrgid (@var{gid}).\n\
 Return the first entry from the group database with the group ID\n\
-@var{gid}.  If the group ID does not exist in the database,\n\
-@code{getgrgid} returns 0.\n\
+@var{gid}.\n\
+\n\
+If the group ID does not exist in the database, @code{getgrgid} returns 0.\n\
+@seealso{getgrnam}\n\
 @end deftypefn")
 {
   octave_value_list retval;
 
   retval(1) = std::string ();
   retval(0) = 0;
 
   int nargin = args.length ();
@@ -128,18 +132,20 @@ Return the first entry from the group da
 
   return retval;
 }
 
 DEFUN (getgrnam, args, ,
        "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {@var{grp_struct} =} getgrnam (@var{name})\n\
 Return the first entry from the group database with the group name\n\
-@var{name}.  If the group name does not exist in the database,\n\
-@code{getgrnam} returns 0.\n\
+@var{name}.\n\
+\n\
+If the group name does not exist in the database, @code{getgrnam} returns 0.\n\
+@seealso{getgrgid}\n\
 @end deftypefn")
 {
   octave_value_list retval;
 
   retval(1) = std::string ();
   retval(0) = 0;
 
   int nargin = args.length ();
@@ -161,16 +167,17 @@ Return the first entry from the group da
 
   return retval;
 }
 
 DEFUN (setgrent, args, ,
        "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} setgrent ()\n\
 Return the internal pointer to the beginning of the group database.\n\
+@seealso{getgrent, endgrent}\n\
 @end deftypefn")
 {
   octave_value_list retval;
 
   retval(1) = std::string ();
   retval(0) = -1.0;
 
   int nargin = args.length ();
@@ -187,16 +194,17 @@ Return the internal pointer to the begin
 
   return retval;
 }
 
 DEFUN (endgrent, args, ,
        "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} endgrent ()\n\
 Close the group database.\n\
+@seealso{getgrent, setgrent}\n\
 @end deftypefn")
 {
   octave_value_list retval;
 
   retval(1) = std::string ();
   retval(0) = -1.0;
 
   int nargin = args.length ();
diff --git a/libinterp/corefcn/getpwent.cc b/libinterp/corefcn/getpwent.cc
--- a/libinterp/corefcn/getpwent.cc
+++ b/libinterp/corefcn/getpwent.cc
@@ -64,18 +64,20 @@ mk_pw_map (const octave_passwd& pw)
 
   return retval;
 }
 
 DEFUN (getpwent, args, ,
        "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {@var{pw_struct} =} getpwent ()\n\
 Return a structure containing an entry from the password database,\n\
-opening it if necessary.  Once the end of the data has been reached,\n\
-@code{getpwent} returns 0.\n\
+opening it if necessary.\n\
+\n\
+Once the end of the data has been reached, @code{getpwent} returns 0.\n\
+@seealso{setpwent, endpwent}\n\
 @end deftypefn")
 {
   octave_value_list retval;
 
   retval(1) = std::string ();
   retval(0) = 0;
 
   int nargin = args.length ();
@@ -92,18 +94,20 @@ opening it if necessary.  Once the end o
 
   return retval;
 }
 
 DEFUN (getpwuid, args, ,
        "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {@var{pw_struct} =} getpwuid (@var{uid}).\n\
 Return a structure containing the first entry from the password database\n\
-with the user ID @var{uid}.  If the user ID does not exist in the\n\
-database, @code{getpwuid} returns 0.\n\
+with the user ID @var{uid}.\n\
+\n\
+If the user ID does not exist in the database, @code{getpwuid} returns 0.\n\
+@seealso{getpwnam}\n\
 @end deftypefn")
 {
   octave_value_list retval;
 
   retval(1) = std::string ();
   retval(0) = 0;
 
   int nargin = args.length ();
@@ -132,18 +136,20 @@ database, @code{getpwuid} returns 0.\n\
 
   return retval;
 }
 
 DEFUN (getpwnam, args, ,
        "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {@var{pw_struct} =} getpwnam (@var{name})\n\
 Return a structure containing the first entry from the password database\n\
-with the user name @var{name}.  If the user name does not exist in the\n\
-database, @code{getpwname} returns 0.\n\
+with the user name @var{name}.\n\
+\n\
+If the user name does not exist in the database, @code{getpwname} returns 0.\n\
+@seealso{getpwuid}\n\
 @end deftypefn")
 {
   octave_value_list retval;
 
   retval(1) = std::string ();
   retval(0) = 0.0;
 
   int nargin = args.length ();
@@ -165,16 +171,17 @@ database, @code{getpwname} returns 0.\n\
 
   return retval;
 }
 
 DEFUN (setpwent, args, ,
        "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} setpwent ()\n\
 Return the internal pointer to the beginning of the password database.\n\
+@seealso{getpwent, endpwent}\n\
 @end deftypefn")
 {
   octave_value_list retval;
 
   retval(1) = std::string ();
   retval(0) = -1.0;
 
   int nargin = args.length ();
@@ -191,16 +198,17 @@ Return the internal pointer to the begin
 
   return retval;
 }
 
 DEFUN (endpwent, args, ,
        "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} endpwent ()\n\
 Close the password database.\n\
+@seealso{getpwent, setpwent}\n\
 @end deftypefn")
 {
   octave_value_list retval;
 
   retval(1) = std::string ();
   retval(0) = -1.0;
 
   int nargin = args.length ();
diff --git a/libinterp/corefcn/getrusage.cc b/libinterp/corefcn/getrusage.cc
--- a/libinterp/corefcn/getrusage.cc
+++ b/libinterp/corefcn/getrusage.cc
@@ -58,20 +58,21 @@ along with Octave; see the file COPYING.
 #endif
 
 // System resource functions.
 
 DEFUN (getrusage, , ,
        "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} getrusage ()\n\
 Return a structure containing a number of statistics about the current\n\
-Octave process.  Not all fields are available on all systems.  If it is\n\
-not possible to get CPU time statistics, the CPU time slots are set to\n\
-zero.  Other missing data are replaced by NaN@.  The list of possible\n\
-fields is:\n\
+Octave process.\n\
+\n\
+Not all fields are available on all systems.  If it is not possible to get\n\
+CPU time statistics, the CPU time slots are set to zero.  Other missing data\n\
+are replaced by NaN@.  The list of possible fields is:\n\
 \n\
 @table @code\n\
 @item idrss\n\
 Unshared data size.\n\
 \n\
 @item inblock\n\
 Number of block input operations.\n\
 \n\
diff --git a/libinterp/corefcn/graphics.cc b/libinterp/corefcn/graphics.cc
--- a/libinterp/corefcn/graphics.cc
+++ b/libinterp/corefcn/graphics.cc
@@ -9762,19 +9762,19 @@ root_figure::init_factory_properties (vo
 
 // ---------------------------------------------------------------------
 
 DEFUN (ishandle, args, ,
        "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} ishandle (@var{h})\n\
 Return true if @var{h} is a graphics handle and false otherwise.\n\
 \n\
-@var{h} may also be a matrix of handles in which case a logical\n\
-array is returned that is true where the elements of @var{h} are\n\
-graphics handles and false where they are not.\n\
+@var{h} may also be a matrix of handles in which case a logical array is\n\
+returned that is true where the elements of @var{h} are graphics handles and\n\
+false where they are not.\n\
 @seealso{isaxes, isfigure}\n\
 @end deftypefn")
 {
   gh_manager::auto_lock guard;
 
   octave_value retval;
 
   if (args.length () == 1)
@@ -10003,16 +10003,17 @@ DEFUN (set, args, nargout,
        "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {} set (@var{h}, @var{property}, @var{value}, @dots{})\n\
 @deftypefnx {Built-in Function} {} set (@var{h}, @var{properties}, @var{values})\n\
 @deftypefnx {Built-in Function} {} set (@var{h}, @var{pv})\n\
 @deftypefnx {Built-in Function} {@var{value_list} =} set (@var{h}, @var{property})\n\
 @deftypefnx {Built-in Function} {@var{all_value_list} =} set (@var{h})\n\
 Set named property values for the graphics handle (or vector of graphics\n\
 handles) @var{h}.\n\
+\n\
 There are three ways to give the property names and values:\n\
 \n\
 @itemize\n\
 @item as a comma separated list of @var{property}, @var{value} pairs\n\
 \n\
 Here, each @var{property} is a string containing the property name, each\n\
 @var{value} is a value of the appropriate type for the property.\n\
 \n\
@@ -10195,19 +10196,22 @@ get_graphics_object_type (double val)
   return retval;
 }
 
 DEFUN (get, args, ,
        "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {@var{val} =} get (@var{h})\n\
 @deftypefnx {Built-in Function} {@var{val} =} get (@var{h}, @var{p})\n\
 Return the value of the named property @var{p} from the graphics handle\n\
-@var{h}.  If @var{p} is omitted, return the complete property list for\n\
-@var{h}.  If @var{h} is a vector, return a cell array including the property\n\
-values or lists respectively.\n\
+@var{h}.\n\
+\n\
+If @var{p} is omitted, return the complete property list for @var{h}.\n\
+\n\
+If @var{h} is a vector, return a cell array including the property values or\n\
+lists respectively.\n\
 @seealso{set}\n\
 @end deftypefn")
 {
   gh_manager::auto_lock guard;
 
   octave_value retval;
 
   Cell vals;
@@ -10644,18 +10648,19 @@ calc_dimensions (const graphics_object& 
     }
 
   return nd;
 }
 
 DEFUN (__calc_dimensions__, args, ,
        "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} __calc_dimensions__ (@var{axes})\n\
-Internal function.  Determine the number of dimensions in a graphics\n\
-object, whether 2 or 3.\n\
+Internal function.\n\
+\n\
+Determine the number of dimensions in a graphics object, either 2 or 3.\n\
 @end deftypefn")
 {
   gh_manager::auto_lock guard;
 
   octave_value retval;
 
   int nargin = args.length ();
 
@@ -11158,22 +11163,26 @@ Return a cell array of the currently loa
   return octave_value (gtk_manager::loaded_toolkits_list ());
 }
 
 DEFUN (drawnow, args, ,
        "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {} drawnow ()\n\
 @deftypefnx {Built-in Function} {} drawnow (\"expose\")\n\
 @deftypefnx {Built-in Function} {} drawnow (@var{term}, @var{file}, @var{mono}, @var{debug_file})\n\
-Update figure windows and their children.  The event queue is flushed and\n\
-any callbacks generated are executed.  With the optional argument\n\
-@qcode{\"expose\"}, only graphic objects are updated and no other events or\n\
-callbacks are processed.\n\
+Update figure windows and their children.\n\
+\n\
+The event queue is flushed and any callbacks generated are executed.\n\
+\n\
+With the optional argument @qcode{\"expose\"}, only graphic objects are\n\
+updated and no other events or callbacks are processed.\n\
+\n\
 The third calling form of @code{drawnow} is for debugging and is\n\
 undocumented.\n\
+@seealso{refresh}\n\
 @end deftypefn")
 {
   static int drawnow_executing = 0;
 
   octave_value retval;
 
   gh_manager::lock ();
 
@@ -11346,19 +11355,20 @@ undocumented.\n\
 
   return retval;
 }
 
 DEFUN (addlistener, args, ,
        "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} addlistener (@var{h}, @var{prop}, @var{fcn})\n\
 Register @var{fcn} as listener for the property @var{prop} of the graphics\n\
-object @var{h}.  Property listeners are executed (in order of registration)\n\
-when the property is set.  The new value is already available when the\n\
-listeners are executed.\n\
+object @var{h}.\n\
+\n\
+Property listeners are executed (in order of registration) when the property\n\
+is set.  The new value is already available when the listeners are executed.\n\
 \n\
 @var{prop} must be a string naming a valid property in @var{h}.\n\
 \n\
 @var{fcn} can be a function handle, a string or a cell array whose first\n\
 element is a function handle.  If @var{fcn} is a function handle, the\n\
 corresponding function should accept at least 2 arguments, that will be\n\
 set to the object handle and the empty matrix respectively.  If @var{fcn}\n\
 is a string, it must be any valid octave expression.  If @var{fcn} is a cell\n\
@@ -11425,19 +11435,20 @@ addlistener (gcf, \"position\", @{@@my_l
 
   return retval;
 }
 
 DEFUN (dellistener, args, ,
        "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} dellistener (@var{h}, @var{prop}, @var{fcn})\n\
 Remove the registration of @var{fcn} as a listener for the property\n\
-@var{prop} of the graphics object @var{h}.  The function @var{fcn} must\n\
-be the same variable (not just the same value), as was passed to the\n\
-original call to @code{addlistener}.\n\
+@var{prop} of the graphics object @var{h}.\n\
+\n\
+The function @var{fcn} must be the same variable (not just the same value),\n\
+as was passed to the original call to @code{addlistener}.\n\
 \n\
 If @var{fcn} is not defined then all listener functions of @var{prop}\n\
 are removed.\n\
 \n\
 Example:\n\
 \n\
 @example\n\
 @group\n\
@@ -11506,16 +11517,17 @@ dellistener (gcf, \"position\", c);\n\
   return retval;
 }
 
 DEFUN (addproperty, args, ,
        "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {} addproperty (@var{name}, @var{h}, @var{type})\n\
 @deftypefnx {Built-in Function} {} addproperty (@var{name}, @var{h}, @var{type}, @var{arg}, @dots{})\n\
 Create a new property named @var{name} in graphics object @var{h}.\n\
+\n\
 @var{type} determines the type of the property to create.  @var{args}\n\
 usually contains the default value of the property, but additional\n\
 arguments might be given, depending on the type of the property.\n\
 \n\
 The supported property types are:\n\
 \n\
 @table @code\n\
 @item string\n\
@@ -11800,20 +11812,20 @@ DEFUN (waitfor, args, ,
        "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {} waitfor (@var{h})\n\
 @deftypefnx {Built-in Function} {} waitfor (@var{h}, @var{prop})\n\
 @deftypefnx {Built-in Function} {} waitfor (@var{h}, @var{prop}, @var{value})\n\
 @deftypefnx {Built-in Function} {} waitfor (@dots{}, \"timeout\", @var{timeout})\n\
 Suspend the execution of the current program until a condition is\n\
 satisfied on the graphics handle @var{h}.\n\
 \n\
-While the program is suspended graphics events are still being processed\n\
-normally, allowing callbacks to modify the state of graphics objects.  This\n\
-function is reentrant and can be called from a callback, while another\n\
-@code{waitfor} call is pending at the top-level.\n\
+While the program is suspended graphics events are still processed normally,\n\
+allowing callbacks to modify the state of graphics objects.  This function\n\
+is reentrant and can be called from a callback, while another @code{waitfor}\n\
+call is pending at the top-level.\n\
 \n\
 In the first form, program execution is suspended until the graphics object\n\
 @var{h} is destroyed.  If the graphics handle is invalid, the function\n\
 returns immediately.\n\
 \n\
 In the second form, execution is suspended until the graphics object is\n\
 destroyed or the property named @var{prop} is modified.  If the graphics\n\
 handle is invalid or the property does not exist, the function returns\n\
diff --git a/libinterp/corefcn/graphics.in.h b/libinterp/corefcn/graphics.in.h
--- a/libinterp/corefcn/graphics.in.h
+++ b/libinterp/corefcn/graphics.in.h
@@ -5376,17 +5376,17 @@ public:
       array_property position , Matrix (1, 2, 0.0)
     END_PROPERTIES
 
   protected:
     void init (void)
     {
       position.add_constraint (dim_vector (1, 2));
       position.add_constraint (dim_vector (2, 1));
-      visible.set (octave_value (true));
+      visible.set (octave_value (false));
     }
 
   private:
     // List of objects that might depend on this uicontextmenu object
     std::list<graphics_handle> dependent_obj_list;
   };
 
 private:
diff --git a/libinterp/corefcn/help.cc b/libinterp/corefcn/help.cc
--- a/libinterp/corefcn/help.cc
+++ b/libinterp/corefcn/help.cc
@@ -660,17 +660,17 @@ endparfor\n\
 @end deftypefn"),
 
   pair_type ("persistent",
   "-*- texinfo -*-\n\
 @deftypefn {Keyword} {} persistent @var{var}\n\
 Declare variables as persistent.  A variable that has been declared\n\
 persistent within a function will retain its contents in memory between\n\
 subsequent calls to the same function.  The difference between persistent\n\
-variables and global variables is that persistent variables are local in \n\
+variables and global variables is that persistent variables are local in\n\
 scope to a particular function and are not visible elsewhere.\n\
 @seealso{global}\n\
 @end deftypefn"),
 
   pair_type ("return",
   "-*- texinfo -*-\n\
 @deftypefn {Keyword} {} return\n\
 Return from a function.\n\
@@ -953,23 +953,24 @@ raw_help (const std::string& nm, bool& s
 
 DEFUN (built_in_docstrings_file, args, nargout,
        "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {@var{val} =} built_in_docstrings_file ()\n\
 @deftypefnx {Built-in Function} {@var{old_val} =} built_in_docstrings_file (@var{new_val})\n\
 @deftypefnx {Built-in Function} {} built_in_docstrings_file (@var{new_val}, \"local\")\n\
 Query or set the internal variable that specifies the name of the\n\
 file containing docstrings for built-in Octave functions.\n\
+\n\
 The default value is\n\
 @file{@var{octave-home}/share/octave/@var{version}/etc/built-in-docstrings},\n\
 in which @var{octave-home} is the root directory of the Octave installation,\n\
-and @var{version} is the Octave version number.\n\
-The default value may be overridden by the environment variable\n\
+and @var{version} is the Octave version number.  The default value may be\n\
+overridden by the environment variable\n\
 @w{@env{OCTAVE_BUILT_IN_DOCSTRINGS_FILE}}, or the command line argument\n\
-@samp{--built-in-docstrings-file FNAME}.\n\
+@option{--built-in-docstrings-file FNAME}.\n\
 \n\
 Note: This variable is only used when Octave is initializing itself.\n\
 Modifying it during a running session of Octave will have no effect.\n\
 @end deftypefn")
 {
   return SET_NONEMPTY_INTERNAL_STRING_VARIABLE (built_in_docstrings_file);
 }
 
@@ -1079,16 +1080,17 @@ do_get_help_text (const std::string& nam
 
 DEFUN (get_help_text, args, , "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {[@var{text}, @var{format}] =} get_help_text (@var{name})\n\
 Return the raw help text of function @var{name}.\n\
 \n\
 The raw help text is returned in @var{text} and the format in @var{format}\n\
 The format is a string which is one of @qcode{\"texinfo\"},\n\
 @qcode{\"html\"}, or @qcode{\"plain text\"}.\n\
+@seealso{get_help_text_from_file}\n\
 @end deftypefn")
 {
   octave_value_list retval;
 
   if (args.length () == 1)
     {
       const std::string name = args(0).string_value ();
 
@@ -1148,16 +1150,17 @@ do_get_help_text_from_file (const std::s
 DEFUN (get_help_text_from_file, args, ,
        "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {[@var{text}, @var{format}] =} get_help_text_from_file (@var{fname})\n\
 Return the raw help text from the file @var{fname}.\n\
 \n\
 The raw help text is returned in @var{text} and the format in @var{format}\n\
 The format is a string which is one of @qcode{\"texinfo\"},\n\
 @qcode{\"html\"}, or @qcode{\"plain text\"}.\n\
+@seealso{get_help_text}\n\
 @end deftypefn")
 {
   octave_value_list retval;
 
   if (args.length () == 1)
     {
       const std::string fname = args(0).string_value ();
 
@@ -1400,115 +1403,126 @@ Undocumented internal function.\n\
 }
 
 DEFUN (doc_cache_file, args, nargout,
        "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {@var{val} =} doc_cache_file ()\n\
 @deftypefnx {Built-in Function} {@var{old_val} =} doc_cache_file (@var{new_val})\n\
 @deftypefnx {Built-in Function} {} doc_cache_file (@var{new_val}, \"local\")\n\
 Query or set the internal variable that specifies the name of the\n\
-Octave documentation cache file.  A cache file significantly improves\n\
-the performance of the @code{lookfor} command.  The default value is \n\
+Octave documentation cache file.\n\
+\n\
+A cache file significantly improves the performance of the @code{lookfor}\n\
+command.  The default value is\n\
 @file{@var{octave-home}/share/octave/@var{version}/etc/doc-cache},\n\
 in which @var{octave-home} is the root directory of the Octave installation,\n\
 and @var{version} is the Octave version number.\n\
 The default value may be overridden by the environment variable\n\
 @w{@env{OCTAVE_DOC_CACHE_FILE}}, or the command line argument\n\
-@samp{--doc-cache-file FNAME}.\n\
+@option{--doc-cache-file FNAME}.\n\
 \n\
 When called from inside a function with the @qcode{\"local\"} option, the\n\
-variable is changed locally for the function and any subroutines it calls.  \n\
+variable is changed locally for the function and any subroutines it calls.\n\
 The original variable value is restored when exiting the function.\n\
 @seealso{doc_cache_create, lookfor, info_program, doc, help, makeinfo_program}\n\
+@seealso{lookfor}\n\
 @end deftypefn")
 {
   return SET_NONEMPTY_INTERNAL_STRING_VARIABLE (doc_cache_file);
 }
 
 DEFUN (texi_macros_file, args, nargout,
        "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {@var{val} =} texi_macros_file ()\n\
 @deftypefnx {Built-in Function} {@var{old_val} =} texi_macros_file (@var{new_val})\n\
 @deftypefnx {Built-in Function} {} texi_macros_file (@var{new_val}, \"local\")\n\
 Query or set the internal variable that specifies the name of the\n\
 file containing Texinfo macros that are prepended to documentation strings\n\
-before they are passed to makeinfo.  The default value is \n\
+before they are passed to makeinfo.\n\
+\n\
+The default value is\n\
 @file{@var{octave-home}/share/octave/@var{version}/etc/macros.texi},\n\
 in which @var{octave-home} is the root directory of the Octave installation,\n\
 and @var{version} is the Octave version number.\n\
 The default value may be overridden by the environment variable\n\
 @w{@env{OCTAVE_TEXI_MACROS_FILE}}, or the command line argument\n\
-@samp{--texi-macros-file FNAME}.\n\
+@option{--texi-macros-file FNAME}.\n\
 \n\
 When called from inside a function with the @qcode{\"local\"} option, the\n\
-variable is changed locally for the function and any subroutines it calls.  \n\
+variable is changed locally for the function and any subroutines it calls.\n\
 The original variable value is restored when exiting the function.\n\
 @seealso{makeinfo_program}\n\
 @end deftypefn")
 {
   return SET_NONEMPTY_INTERNAL_STRING_VARIABLE (texi_macros_file);
 }
 
 DEFUN (info_file, args, nargout,
        "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {@var{val} =} info_file ()\n\
 @deftypefnx {Built-in Function} {@var{old_val} =} info_file (@var{new_val})\n\
 @deftypefnx {Built-in Function} {} info_file (@var{new_val}, \"local\")\n\
 Query or set the internal variable that specifies the name of the\n\
-Octave info file.  The default value is\n\
+Octave info file.\n\
+\n\
+The default value is\n\
 @file{@var{octave-home}/info/octave.info}, in\n\
 which @var{octave-home} is the root directory of the Octave installation.\n\
 The default value may be overridden by the environment variable\n\
 @w{@env{OCTAVE_INFO_FILE}}, or the command line argument\n\
-@samp{--info-file FNAME}.\n\
+@option{--info-file FNAME}.\n\
 \n\
 When called from inside a function with the @qcode{\"local\"} option, the\n\
-variable is changed locally for the function and any subroutines it calls.  \n\
+variable is changed locally for the function and any subroutines it calls.\n\
 The original variable value is restored when exiting the function.\n\
 @seealso{info_program, doc, help, makeinfo_program}\n\
 @end deftypefn")
 {
   return SET_NONEMPTY_INTERNAL_STRING_VARIABLE (info_file);
 }
 
 DEFUN (info_program, args, nargout,
        "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {@var{val} =} info_program ()\n\
 @deftypefnx {Built-in Function} {@var{old_val} =} info_program (@var{new_val})\n\
 @deftypefnx {Built-in Function} {} info_program (@var{new_val}, \"local\")\n\
 Query or set the internal variable that specifies the name of the\n\
-info program to run.  The default value is\n\
+info program to run.\n\
+\n\
+The default value is\n\
 @file{@var{octave-home}/libexec/octave/@var{version}/exec/@var{arch}/info}\n\
 in which @var{octave-home} is the root directory of the Octave installation,\n\
-@var{version} is the Octave version number, and @var{arch}\n\
-is the system type (for example, @code{i686-pc-linux-gnu}).  The\n\
-default value may be overridden by the environment variable\n\
+@var{version} is the Octave version number, and @var{arch} is the system\n\
+type (for example, @code{i686-pc-linux-gnu}).  The default value may be\n\
+overridden by the environment variable\n\
 @w{@env{OCTAVE_INFO_PROGRAM}}, or the command line argument\n\
-@samp{--info-program NAME}.\n\
+@option{--info-program NAME}.\n\
 \n\
 When called from inside a function with the @qcode{\"local\"} option, the\n\
-variable is changed locally for the function and any subroutines it calls.  \n\
+variable is changed locally for the function and any subroutines it calls.\n\
 The original variable value is restored when exiting the function.\n\
 @seealso{info_file, doc, help, makeinfo_program}\n\
 @end deftypefn")
 {
   return SET_NONEMPTY_INTERNAL_STRING_VARIABLE (info_program);
 }
 
 DEFUN (makeinfo_program, args, nargout,
        "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {@var{val} =} makeinfo_program ()\n\
 @deftypefnx {Built-in Function} {@var{old_val} =} makeinfo_program (@var{new_val})\n\
 @deftypefnx {Built-in Function} {} makeinfo_program (@var{new_val}, \"local\")\n\
 Query or set the internal variable that specifies the name of the\n\
 program that Octave runs to format help text containing\n\
-Texinfo markup commands.  The default value is @code{makeinfo}.\n\
+Texinfo markup commands.\n\
+\n\
+The default value is @code{makeinfo}.\n\
 \n\
 When called from inside a function with the @qcode{\"local\"} option, the\n\
-variable is changed locally for the function and any subroutines it calls.  \n\
+variable is changed locally for the function and any subroutines it calls.\n\
 The original variable value is restored when exiting the function.\n\
 @seealso{texi_macros_file, info_file, info_program, doc, help}\n\
 @end deftypefn")
 {
   return SET_NONEMPTY_INTERNAL_STRING_VARIABLE (makeinfo_program);
 }
 
 DEFUN (suppress_verbose_help_message, args, nargout,
@@ -1516,14 +1530,14 @@ DEFUN (suppress_verbose_help_message, ar
 @deftypefn  {Built-in Function} {@var{val} =} suppress_verbose_help_message ()\n\
 @deftypefnx {Built-in Function} {@var{old_val} =} suppress_verbose_help_message (@var{new_val})\n\
 @deftypefnx {Built-in Function} {} suppress_verbose_help_message (@var{new_val}, \"local\")\n\
 Query or set the internal variable that controls whether Octave\n\
 will add additional help information to the end of the output from\n\
 the @code{help} command and usage messages for built-in commands.\n\
 \n\
 When called from inside a function with the @qcode{\"local\"} option, the\n\
-variable is changed locally for the function and any subroutines it calls.  \n\
+variable is changed locally for the function and any subroutines it calls.\n\
 The original variable value is restored when exiting the function.\n\
 @end deftypefn")
 {
   return SET_INTERNAL_VARIABLE (suppress_verbose_help_message);
 }
diff --git a/libinterp/corefcn/hex2num.cc b/libinterp/corefcn/hex2num.cc
--- a/libinterp/corefcn/hex2num.cc
+++ b/libinterp/corefcn/hex2num.cc
@@ -32,33 +32,34 @@ along with Octave; see the file COPYING.
 #include "oct-obj.h"
 #include "utils.h"
 
 DEFUN (hex2num, args, ,
        "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {@var{n} =} hex2num (@var{s})\n\
 @deftypefnx {Built-in Function} {@var{n} =} hex2num (@var{s}, @var{class})\n\
 Typecast the 16 character hexadecimal character string to an IEEE 754\n\
-double precision number.  If fewer than 16 characters are given the\n\
-strings are right padded with @qcode{'0'} characters.\n\
+double precision number.\n\
 \n\
-Given a string matrix, @code{hex2num} treats each row as a separate\n\
-number.\n\
+If fewer than 16 characters are given the strings are right padded with\n\
+@qcode{'0'} characters.\n\
+\n\
+Given a string matrix, @code{hex2num} treats each row as a separate number.\n\
 \n\
 @example\n\
 @group\n\
 hex2num ([\"4005bf0a8b145769\"; \"4024000000000000\"])\n\
    @result{} [2.7183; 10.000]\n\
 @end group\n\
 @end example\n\
 \n\
 The optional argument @var{class} can be passed as the string\n\
 @qcode{\"single\"} to specify that the given string should be interpreted as\n\
 a single precision number.  In this case, @var{s} should be an 8 character\n\
-hexadecimal string.  For example: \n\
+hexadecimal string.  For example:\n\
 \n\
 @example\n\
 @group\n\
 hex2num ([\"402df854\"; \"41200000\"], \"single\")\n\
    @result{} [2.7183; 10.000]\n\
 @end group\n\
 @end example\n\
 @seealso{num2hex, hex2dec, dec2hex}\n\
@@ -196,16 +197,17 @@ hex2num ([\"402df854\"; \"41200000\"], \
 %!assert (hex2num (["c00";"bf8";"000";"3f8";"400"], "single"), single([-2:2])')
 */
 
 DEFUN (num2hex, args, ,
        "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {@var{s} =} num2hex (@var{n})\n\
 Typecast a double or single precision number or vector to a 8 or 16\n\
 character hexadecimal string of the IEEE 754 representation of the number.\n\
+\n\
 For example:\n\
 \n\
 @example\n\
 @group\n\
 num2hex ([-1, 1, e, Inf])\n\
 @result{} \"bff0000000000000\n\
     3ff0000000000000\n\
     4005bf0a8b145769\n\
diff --git a/libinterp/corefcn/input.cc b/libinterp/corefcn/input.cc
--- a/libinterp/corefcn/input.cc
+++ b/libinterp/corefcn/input.cc
@@ -759,31 +759,31 @@ input (\"Pick a number, any number! \")\
 prints the prompt\n\
 \n\
 @example\n\
 Pick a number, any number!\n\
 @end example\n\
 \n\
 @noindent\n\
 and waits for the user to enter a value.  The string entered by the user\n\
-is evaluated as an expression, so it may be a literal constant, a\n\
-variable name, or any other valid Octave code.\n\
+is evaluated as an expression, so it may be a literal constant, a variable\n\
+name, or any other valid Octave code.\n\
 \n\
 The number of return arguments, their size, and their class depend on the\n\
 expression entered.\n\
 \n\
-If you are only interested in getting a literal string value, you can\n\
-call @code{input} with the character string @qcode{\"s\"} as the second\n\
-argument.  This tells Octave to return the string entered by the user\n\
-directly, without evaluating it first.\n\
+If you are only interested in getting a literal string value, you can call\n\
+@code{input} with the character string @qcode{\"s\"} as the second argument.\n\
+This tells Octave to return the string entered by the user directly, without\n\
+evaluating it first.\n\
 \n\
-Because there may be output waiting to be displayed by the pager, it is\n\
-a good idea to always call @code{fflush (stdout)} before calling\n\
-@code{input}.  This will ensure that all pending output is written to\n\
-the screen before your prompt.\n\
+Because there may be output waiting to be displayed by the pager, it is a\n\
+good idea to always call @code{fflush (stdout)} before calling @code{input}.\n\
+ This will ensure that all pending output is written to the screen before\n\
+your prompt.\n\
 @seealso{yes_or_no, kbhit, pause, menu, listdlg}\n\
 @end deftypefn")
 {
   octave_value_list retval;
 
   int nargin = args.length ();
 
   if (nargin == 1 || nargin == 2)
@@ -815,16 +815,17 @@ octave_yes_or_no (const std::string& pro
 }
 
 DEFUN (yes_or_no, args, ,
        "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {@var{ans} =} yes_or_no (\"@var{prompt}\")\n\
 Ask the user a yes-or-no question.\n\
 \n\
 Return logical true if the answer is yes or false if the answer is no.\n\
+\n\
 Takes one argument, @var{prompt}, which is the string to display when asking\n\
 the question.  @var{prompt} should end in a space; @code{yes-or-no} adds the\n\
 string @samp{(yes or no) } to it.  The user must confirm the answer with\n\
 @key{RET} and can edit it until it has been confirmed.\n\
 @seealso{input}\n\
 @end deftypefn")
 {
   octave_value retval;
@@ -892,19 +893,20 @@ do_keyboard (const octave_value_list& ar
 
   return retval;
 }
 
 DEFUN (keyboard, args, ,
        "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {} keyboard ()\n\
 @deftypefnx {Built-in Function} {} keyboard (\"@var{prompt}\")\n\
-This function is normally used for simple debugging.  When the\n\
-@code{keyboard} function is executed, Octave prints a prompt and waits\n\
-for user input.  The input strings are then evaluated and the results\n\
+Stop m-file execution and enter debug mode.\n\
+\n\
+When the @code{keyboard} function is executed, Octave prints a prompt and\n\
+waits for user input.  The input strings are then evaluated and the results\n\
 are printed.  This makes it possible to examine the values of variables\n\
 within a function, and to assign new values if necessary.  To leave the\n\
 prompt and return to normal execution type @samp{return} or @samp{dbcont}.\n\
 The @code{keyboard} function does not return an exit status.\n\
 \n\
 If @code{keyboard} is invoked without arguments, a default prompt of\n\
 @samp{debug> } is used.\n\
 @seealso{dbstop, dbcont, dbquit}\n\
@@ -935,18 +937,19 @@ If @code{keyboard} is invoked without ar
     print_usage ();
 
   return retval;
 }
 
 DEFUN (echo, args, ,
        "-*- texinfo -*-\n\
 @deftypefn {Command} {} echo options\n\
-Control whether commands are displayed as they are executed.  Valid\n\
-options are:\n\
+Control whether commands are displayed as they are executed.\n\
+\n\
+Valid options are:\n\
 \n\
 @table @code\n\
 @item on\n\
 Enable echoing of commands as they are executed in script files.\n\
 \n\
 @item off\n\
 Disable echoing of commands as they are executed in script files.\n\
 \n\
@@ -1104,19 +1107,20 @@ a feature, not a bug.\n\
     print_usage ();
 
   return retval;
 }
 
 DEFUN (readline_read_init_file, args, ,
        "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} readline_read_init_file (@var{file})\n\
-Read the readline library initialization file @var{file}.  If\n\
-@var{file} is omitted, read the default initialization file (normally\n\
-@file{~/.inputrc}).\n\
+Read the readline library initialization file @var{file}.\n\
+\n\
+If @var{file} is omitted, read the default initialization file\n\
+(normally @file{~/.inputrc}).\n\
 \n\
 @xref{Readline Init File, , , readline, GNU Readline Library},\n\
 for details.\n\
 @seealso{readline_re_read_init_file}\n\
 @end deftypefn")
 {
   octave_value_list retval;
 
@@ -1136,16 +1140,17 @@ for details.\n\
 
   return retval;
 }
 
 DEFUN (readline_re_read_init_file, args, ,
        "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} readline_re_read_init_file ()\n\
 Re-read the last readline library initialization file that was read.\n\
+\n\
 @xref{Readline Init File, , , readline, GNU Readline Library},\n\
 for details.\n\
 @seealso{readline_read_init_file}\n\
 @end deftypefn")
 {
   octave_value_list retval;
 
   if (args.length () == 0)
@@ -1167,28 +1172,28 @@ internal_input_event_hook_fcn (void)
   return 0;
 }
 
 DEFUN (add_input_event_hook, args, ,
        "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {@var{id} =} add_input_event_hook (@var{fcn})\n\
 @deftypefnx {Built-in Function} {@var{id} =} add_input_event_hook (@var{fcn}, @var{data})\n\
 Add the named function or function handle @var{fcn} to the list of functions\n\
-to call periodically when Octave is waiting for input.  The function should\n\
-have the form\n\
+to call periodically when Octave is waiting for input.\n\
+\n\
+The function should have the form\n\
 \n\
 @example\n\
 @var{fcn} (@var{data})\n\
 @end example\n\
 \n\
-If @var{data} is omitted, Octave calls the function without any\n\
-arguments.\n\
+If @var{data} is omitted, Octave calls the function without any arguments.\n\
 \n\
-The returned identifier may be used to remove the function handle from\n\
-the list of input hook functions.\n\
+The returned identifier may be used to remove the function handle from the\n\
+list of input hook functions.\n\
 @seealso{remove_input_event_hook}\n\
 @end deftypefn")
 {
   octave_value retval;
 
   int nargin = args.length ();
 
   if (nargin == 1 || nargin == 2)
@@ -1261,18 +1266,20 @@ for input.\n\
   return retval;
 }
 
 DEFUN (PS1, args, nargout,
        "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {@var{val} =} PS1 ()\n\
 @deftypefnx {Built-in Function} {@var{old_val} =} PS1 (@var{new_val})\n\
 @deftypefnx {Built-in Function} {} PS1 (@var{new_val}, \"local\")\n\
-Query or set the primary prompt string.  When executing interactively,\n\
-Octave displays the primary prompt when it is ready to read a command.\n\
+Query or set the primary prompt string.\n\
+\n\
+When executing interactively, Octave displays the primary prompt when it is\n\
+ready to read a command.\n\
 \n\
 The default value of the primary prompt string is @qcode{\"octave:\\#> \"}.\n\
 To change it, use a command like\n\
 \n\
 @example\n\
 PS1 (\"\\\\u@@\\\\H> \")\n\
 @end example\n\
 \n\
@@ -1288,87 +1295,91 @@ This can be useful for coloring the prom
 @example\n\
 PS1 (\"\\\\[\\\\033[01;31m\\\\]\\\\s:\\\\#> \\\\[\\\\033[0m\\\\]\")\n\
 @end example\n\
 \n\
 @noindent\n\
 will give the default Octave prompt a red coloring.\n\
 \n\
 When called from inside a function with the @qcode{\"local\"} option, the\n\
-variable is changed locally for the function and any subroutines it calls.  \n\
+variable is changed locally for the function and any subroutines it calls.\n\
 The original variable value is restored when exiting the function.\n\
 @seealso{PS2, PS4}\n\
 @end deftypefn")
 {
   return SET_INTERNAL_VARIABLE (PS1);
 }
 
 DEFUN (PS2, args, nargout,
        "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {@var{val} =} PS2 ()\n\
 @deftypefnx {Built-in Function} {@var{old_val} =} PS2 (@var{new_val})\n\
 @deftypefnx {Built-in Function} {} PS2 (@var{new_val}, \"local\")\n\
-Query or set the secondary prompt string.  The secondary prompt is\n\
-printed when Octave is expecting additional input to complete a\n\
-command.  For example, if you are typing a @code{for} loop that spans several\n\
-lines, Octave will print the secondary prompt at the beginning of\n\
-each line after the first.  The default value of the secondary prompt\n\
+Query or set the secondary prompt string.\n\
+\n\
+The secondary prompt is printed when Octave is expecting additional input to\n\
+complete a command.  For example, if you are typing a @code{for} loop that\n\
+spans several lines, Octave will print the secondary prompt at the beginning\n\
+of each line after the first.  The default value of the secondary prompt\n\
 string is @qcode{\"> \"}.\n\
 \n\
 When called from inside a function with the @qcode{\"local\"} option, the\n\
-variable is changed locally for the function and any subroutines it calls.  \n\
+variable is changed locally for the function and any subroutines it calls.\n\
 The original variable value is restored when exiting the function.\n\
 @seealso{PS1, PS4}\n\
 @end deftypefn")
 {
   return SET_INTERNAL_VARIABLE (PS2);
 }
 
 DEFUN (PS4, args, nargout,
        "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {@var{val} =} PS4 ()\n\
 @deftypefnx {Built-in Function} {@var{old_val} =} PS4 (@var{new_val})\n\
 @deftypefnx {Built-in Function} {} PS4 (@var{new_val}, \"local\")\n\
 Query or set the character string used to prefix output produced\n\
 when echoing commands is enabled.\n\
+\n\
 The default value is @qcode{\"+ \"}.\n\
 @xref{Diary and Echo Commands}, for a description of echoing commands.\n\
 \n\
 When called from inside a function with the @qcode{\"local\"} option, the\n\
-variable is changed locally for the function and any subroutines it calls.  \n\
+variable is changed locally for the function and any subroutines it calls.\n\
 The original variable value is restored when exiting the function.\n\
 @seealso{echo, echo_executing_commands, PS1, PS2}\n\
 @end deftypefn")
 {
   return SET_INTERNAL_VARIABLE (PS4);
 }
 
 DEFUN (completion_append_char, args, nargout,
        "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {@var{val} =} completion_append_char ()\n\
 @deftypefnx {Built-in Function} {@var{old_val} =} completion_append_char (@var{new_val})\n\
 @deftypefnx {Built-in Function} {} completion_append_char (@var{new_val}, \"local\")\n\
 Query or set the internal character variable that is appended to\n\
-successful command-line completion attempts.  The default\n\
-value is @qcode{\" \"} (a single space).\n\
+successful command-line completion attempts.\n\
+\n\
+The default value is @qcode{\" \"} (a single space).\n\
 \n\
 When called from inside a function with the @qcode{\"local\"} option, the\n\
-variable is changed locally for the function and any subroutines it calls.  \n\
+variable is changed locally for the function and any subroutines it calls.\n\
 The original variable value is restored when exiting the function.\n\
 @end deftypefn")
 {
   return SET_INTERNAL_VARIABLE (completion_append_char);
 }
 
 DEFUN (echo_executing_commands, args, nargout,
        "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {@var{val} =} echo_executing_commands ()\n\
 @deftypefnx {Built-in Function} {@var{old_val} =} echo_executing_commands (@var{new_val})\n\
 @deftypefnx {Built-in Function} {} echo_executing_commands (@var{new_val}, \"local\")\n\
 Query or set the internal variable that controls the echo state.\n\
+\n\
 It may be the sum of the following values:\n\
 \n\
 @table @asis\n\
 @item 1\n\
 Echo commands read from script files.\n\
 \n\
 @item 2\n\
 Echo commands from functions.\n\
@@ -1379,17 +1390,17 @@ Echo commands read from command line.\n\
 \n\
 More than one state can be active at once.  For example, a value of 3 is\n\
 equivalent to the command @kbd{echo on all}.\n\
 \n\
 The value of @code{echo_executing_commands} may be set by the @kbd{echo}\n\
 command or the command line option @option{--echo-commands}.\n\
 \n\
 When called from inside a function with the @qcode{\"local\"} option, the\n\
-variable is changed locally for the function and any subroutines it calls.  \n\
+variable is changed locally for the function and any subroutines it calls.\n\
 The original variable value is restored when exiting the function.\n\
 @end deftypefn")
 {
   return SET_INTERNAL_VARIABLE (echo_executing_commands);
 }
 
 DEFUN (__request_drawnow__, args, ,
        "-*- texinfo -*-\n\
@@ -1433,17 +1444,19 @@ Undocumented internal function.\n\
 }
 
 DEFUN (filemarker, args, nargout,
        "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {@var{val} =} filemarker ()\n\
 @deftypefnx {Built-in Function} {@var{old_val} =} filemarker (@var{new_val})\n\
 @deftypefnx {Built-in Function} {} filemarker (@var{new_val}, \"local\")\n\
 Query or set the character used to separate the filename from the subfunction\n\
-names contained within the file.  By default this is the character @samp{>}.\n\
+names contained within the file.\n\
+\n\
+By default this is the character @samp{>}.\n\
 This can be used in a generic manner to interact with subfunctions.\n\
 For example,\n\
 \n\
 @example\n\
 help ([\"myfunc\", filemarker, \"mysubfunc\"])\n\
 @end example\n\
 \n\
 @noindent\n\
diff --git a/libinterp/corefcn/inv.cc b/libinterp/corefcn/inv.cc
--- a/libinterp/corefcn/inv.cc
+++ b/libinterp/corefcn/inv.cc
@@ -35,29 +35,31 @@ along with Octave; see the file COPYING.
 #include "ov-flt-cx-diag.h"
 #include "ov-perm.h"
 #include "utils.h"
 
 DEFUN (inv, args, nargout,
        "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {@var{x} =} inv (@var{A})\n\
 @deftypefnx {Built-in Function} {[@var{x}, @var{rcond}] =} inv (@var{A})\n\
-Compute the inverse of the square matrix @var{A}.  Return an estimate\n\
-of the reciprocal condition number if requested, otherwise warn of an\n\
-ill-conditioned matrix if the reciprocal condition number is small.\n\
+Compute the inverse of the square matrix @var{A}.\n\
 \n\
-In general it is best to avoid calculating the inverse of a matrix\n\
-directly.  For example, it is both faster and more accurate to solve\n\
-systems of equations (@var{A}*@math{x} = @math{b}) with\n\
+Return an estimate of the reciprocal condition number if requested,\n\
+otherwise warn of an ill-conditioned matrix if the reciprocal condition\n\
+number is small.\n\
+\n\
+In general it is best to avoid calculating the inverse of a matrix directly.\n\
+For example, it is both faster and more accurate to solve systems of\n\
+equations (@var{A}*@math{x} = @math{b}) with\n\
 @code{@var{y} = @var{A} \\ @math{b}}, rather than\n\
 @code{@var{y} = inv (@var{A}) * @math{b}}.\n\
 \n\
 If called with a sparse matrix, then in general @var{x} will be a full\n\
-matrix requiring significantly more storage.  Avoid forming the inverse\n\
-of a sparse matrix if possible.\n\
+matrix requiring significantly more storage.  Avoid forming the inverse of a\n\
+sparse matrix if possible.\n\
 @seealso{ldivide, rdivide}\n\
 @end deftypefn")
 {
   octave_value_list retval;
 
   int nargin = args.length ();
 
   if (nargin != 1)
diff --git a/libinterp/corefcn/kron.cc b/libinterp/corefcn/kron.cc
--- a/libinterp/corefcn/kron.cc
+++ b/libinterp/corefcn/kron.cc
@@ -229,35 +229,36 @@ dispatch_kron (const octave_value& a, co
     }
   return retval;
 }
 
 
 DEFUN (kron, args, , "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {} kron (@var{A}, @var{B})\n\
 @deftypefnx {Built-in Function} {} kron (@var{A1}, @var{A2}, @dots{})\n\
-Form the Kronecker product of two or more matrices, defined block by \n\
-block as\n\
+Form the Kronecker product of two or more matrices.\n\
+\n\
+This is defined block by block as\n\
 \n\
 @example\n\
 x = [ a(i,j)*b ]\n\
 @end example\n\
 \n\
 For example:\n\
 \n\
 @example\n\
 @group\n\
 kron (1:4, ones (3, 1))\n\
      @result{}  1  2  3  4\n\
          1  2  3  4\n\
          1  2  3  4\n\
 @end group\n\
 @end example\n\
 \n\
-If there are more than two input arguments @var{A1}, @var{A2}, @dots{}, \n\
+If there are more than two input arguments @var{A1}, @var{A2}, @dots{},\n\
 @var{An} the Kronecker product is computed as\n\
 \n\
 @example\n\
 kron (kron (@var{A1}, @var{A2}), @dots{}, @var{An})\n\
 @end example\n\
 \n\
 @noindent\n\
 Since the Kronecker product is associative, this is well-defined.\n\
diff --git a/libinterp/corefcn/load-path.cc b/libinterp/corefcn/load-path.cc
--- a/libinterp/corefcn/load-path.cc
+++ b/libinterp/corefcn/load-path.cc
@@ -2228,18 +2228,19 @@ execute_pkg_del (const std::string& dir)
   execute_pkg_add_or_del (dir, "PKG_DEL");
 }
 
 DEFUN (genpath, args, ,
        "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {} genpath (@var{dir})\n\
 @deftypefnx {Built-in Function} {} genpath (@var{dir}, @var{skip}, @dots{})\n\
 Return a path constructed from @var{dir} and all its subdirectories.\n\
-If additional string parameters are given, the resulting path will\n\
-exclude directories with those names.\n\
+\n\
+If additional string parameters are given, the resulting path will exclude\n\
+directories with those names.\n\
 @end deftypefn")
 {
   octave_value retval;
 
   octave_idx_type nargin = args.length ();
 
   if (nargin == 1)
     {
@@ -2394,18 +2395,19 @@ No checks are made for duplicate element
 
   return retval;
 }
 
 DEFUN (addpath, args, nargout,
        "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {} addpath (@var{dir1}, @dots{})\n\
 @deftypefnx {Built-in Function} {} addpath (@var{dir1}, @dots{}, @var{option})\n\
-Add named directories to the function search path.  If\n\
-@var{option} is @qcode{\"-begin\"} or 0 (the default), prepend the\n\
+Add named directories to the function search path.\n\
+\n\
+If @var{option} is @qcode{\"-begin\"} or 0 (the default), prepend the\n\
 directory name to the current path.  If @var{option} is @qcode{\"-end\"}\n\
 or 1, append the directory name to the current path.\n\
 Directories added to the path must exist.\n\
 \n\
 In addition to accepting individual directory arguments, lists of\n\
 directory names separated by @code{pathsep} are also accepted.  For example:\n\
 \n\
 @example\n\
diff --git a/libinterp/corefcn/load-save.cc b/libinterp/corefcn/load-save.cc
--- a/libinterp/corefcn/load-save.cc
+++ b/libinterp/corefcn/load-save.cc
@@ -541,17 +541,19 @@ DEFUN (load, args, nargout,
 @deftypefn  {Command} {} load file\n\
 @deftypefnx {Command} {} load options file\n\
 @deftypefnx {Command} {} load options file v1 v2 @dots{}\n\
 @deftypefnx {Command} {S =} load (\"options\", \"file\", \"v1\", \"v2\", @dots{})\n\
 @deftypefnx {Command} {} load file options\n\
 @deftypefnx {Command} {} load file options v1 v2 @dots{}\n\
 @deftypefnx {Command} {S =} load (\"file\", \"options\", \"v1\", \"v2\", @dots{})\n\
 Load the named variables @var{v1}, @var{v2}, @dots{}, from the file\n\
-@var{file}.  If no variables are specified then all variables found in the\n\
+@var{file}.\n\
+\n\
+If no variables are specified then all variables found in the\n\
 file will be loaded.  As with @code{save}, the list of variables to extract\n\
 can be full names or use a pattern syntax.  The format of the file is\n\
 automatically detected but may be overridden by supplying the appropriate\n\
 option.\n\
 \n\
 If load is invoked using the functional form\n\
 \n\
 @example\n\
@@ -1480,17 +1482,19 @@ DEFUN (save, args, nargout,
        "-*- texinfo -*-\n\
 @deftypefn  {Command} {} save file\n\
 @deftypefnx {Command} {} save options file\n\
 @deftypefnx {Command} {} save options file @var{v1} @var{v2} @dots{}\n\
 @deftypefnx {Command} {} save options file -struct @var{STRUCT} @var{f1} @var{f2} @dots{}\n\
 @deftypefnx {Command} {} save @code{\"-\"} @var{v1} @var{v2} @dots{}\n\
 @deftypefnx {Built-in Function} {@var{s} =} save (@code{\"-\"} @var{v1} @var{v2} @dots{})\n\
 Save the named variables @var{v1}, @var{v2}, @dots{}, in the file\n\
-@var{file}.  The special filename @samp{-} may be used to return the\n\
+@var{file}.\n\
+\n\
+The special filename @samp{-} may be used to return the\n\
 content of the variables as a string.  If no variable names are listed,\n\
 Octave saves all the variables in the current scope.  Otherwise, full\n\
 variable names or pattern syntax can be used to specify the variables to\n\
 save.  If the @option{-struct} modifier is used, fields @var{f1} @var{f2}\n\
 @dots{} of the scalar structure @var{STRUCT} are saved as if they were\n\
 variables with corresponding names.  Valid options for the @code{save}\n\
 command are listed in the following table.  Options that modify the output\n\
 format override the format specified by @code{save_default_options}.\n\
@@ -1787,123 +1791,127 @@ DEFUN (crash_dumps_octave_core, args, na
 @deftypefn  {Built-in Function} {@var{val} =} crash_dumps_octave_core ()\n\
 @deftypefnx {Built-in Function} {@var{old_val} =} crash_dumps_octave_core (@var{new_val})\n\
 @deftypefnx {Built-in Function} {} crash_dumps_octave_core (@var{new_val}, \"local\")\n\
 Query or set the internal variable that controls whether Octave tries\n\
 to save all current variables to the file @file{octave-workspace} if it\n\
 crashes or receives a hangup, terminate or similar signal.\n\
 \n\
 When called from inside a function with the @qcode{\"local\"} option, the\n\
-variable is changed locally for the function and any subroutines it calls.  \n\
+variable is changed locally for the function and any subroutines it calls.\n\
 The original variable value is restored when exiting the function.\n\
 @seealso{octave_core_file_limit, octave_core_file_name, octave_core_file_options}\n\
 @end deftypefn")
 {
   return SET_INTERNAL_VARIABLE (crash_dumps_octave_core);
 }
 
 DEFUN (save_default_options, args, nargout,
        "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {@var{val} =} save_default_options ()\n\
 @deftypefnx {Built-in Function} {@var{old_val} =} save_default_options (@var{new_val})\n\
 @deftypefnx {Built-in Function} {} save_default_options (@var{new_val}, \"local\")\n\
 Query or set the internal variable that specifies the default options\n\
 for the @code{save} command, and defines the default format.\n\
+\n\
 Typical values include @qcode{\"-ascii\"}, @qcode{\"-text -zip\"}.\n\
 The default value is @option{-text}.\n\
 \n\
 When called from inside a function with the @qcode{\"local\"} option, the\n\
-variable is changed locally for the function and any subroutines it calls.  \n\
+variable is changed locally for the function and any subroutines it calls.\n\
 The original variable value is restored when exiting the function.\n\
 @seealso{save}\n\
 @end deftypefn")
 {
   return SET_NONEMPTY_INTERNAL_STRING_VARIABLE (save_default_options);
 }
 
 DEFUN (octave_core_file_limit, args, nargout,
        "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {@var{val} =} octave_core_file_limit ()\n\
 @deftypefnx {Built-in Function} {@var{old_val} =} octave_core_file_limit (@var{new_val})\n\
 @deftypefnx {Built-in Function} {} octave_core_file_limit (@var{new_val}, \"local\")\n\
 Query or set the internal variable that specifies the maximum amount\n\
 of memory (in kilobytes) of the top-level workspace that Octave will\n\
 attempt to save when writing data to the crash dump file (the name of\n\
-the file is specified by @var{octave_core_file_name}).  If\n\
-@var{octave_core_file_options} flags specify a binary format,\n\
+the file is specified by @var{octave_core_file_name}).\n\
+\n\
+If @var{octave_core_file_options} flags specify a binary format,\n\
 then @var{octave_core_file_limit} will be approximately the maximum\n\
 size of the file.  If a text file format is used, then the file could\n\
 be much larger than the limit.  The default value is -1 (unlimited)\n\
 \n\
 When called from inside a function with the @qcode{\"local\"} option, the\n\
-variable is changed locally for the function and any subroutines it calls.  \n\
+variable is changed locally for the function and any subroutines it calls.\n\
 The original variable value is restored when exiting the function.\n\
 @seealso{crash_dumps_octave_core, octave_core_file_name, octave_core_file_options}\n\
 @end deftypefn")
 {
   return SET_INTERNAL_VARIABLE (octave_core_file_limit);
 }
 
 DEFUN (octave_core_file_name, args, nargout,
        "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {@var{val} =} octave_core_file_name ()\n\
 @deftypefnx {Built-in Function} {@var{old_val} =} octave_core_file_name (@var{new_val})\n\
 @deftypefnx {Built-in Function} {} octave_core_file_name (@var{new_val}, \"local\")\n\
 Query or set the internal variable that specifies the name of the file\n\
 used for saving data from the top-level workspace if Octave aborts.\n\
+\n\
 The default value is @qcode{\"octave-workspace\"}\n\
 \n\
 When called from inside a function with the @qcode{\"local\"} option, the\n\
-variable is changed locally for the function and any subroutines it calls.  \n\
+variable is changed locally for the function and any subroutines it calls.\n\
 The original variable value is restored when exiting the function.\n\
 @seealso{crash_dumps_octave_core, octave_core_file_name, octave_core_file_options}\n\
 @end deftypefn")
 {
   return SET_NONEMPTY_INTERNAL_STRING_VARIABLE (octave_core_file_name);
 }
 
 DEFUN (octave_core_file_options, args, nargout,
        "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {@var{val} =} octave_core_file_options ()\n\
 @deftypefnx {Built-in Function} {@var{old_val} =} octave_core_file_options (@var{new_val})\n\
 @deftypefnx {Built-in Function} {} octave_core_file_options (@var{new_val}, \"local\")\n\
 Query or set the internal variable that specifies the options used for\n\
-saving the workspace data if Octave aborts.  The value of\n\
-@code{octave_core_file_options} should follow the same format as the\n\
-options for the @code{save} function.  The default value is Octave's binary\n\
-format.\n\
+saving the workspace data if Octave aborts.\n\
+\n\
+The value of @code{octave_core_file_options} should follow the same format\n\
+as the options for the @code{save} function.  The default value is Octave's\n\
+binary format.\n\
 \n\
 When called from inside a function with the @qcode{\"local\"} option, the\n\
-variable is changed locally for the function and any subroutines it calls.  \n\
+variable is changed locally for the function and any subroutines it calls.\n\
 The original variable value is restored when exiting the function.\n\
 @seealso{crash_dumps_octave_core, octave_core_file_name, octave_core_file_limit}\n\
 @end deftypefn")
 {
   return SET_NONEMPTY_INTERNAL_STRING_VARIABLE (octave_core_file_options);
 }
 
 DEFUN (save_header_format_string, args, nargout,
        "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {@var{val} =} save_header_format_string ()\n\
 @deftypefnx {Built-in Function} {@var{old_val} =} save_header_format_string (@var{new_val})\n\
 @deftypefnx {Built-in Function} {} save_header_format_string (@var{new_val}, \"local\")\n\
 Query or set the internal variable that specifies the format\n\
 string used for the comment line written at the beginning of\n\
-text-format data files saved by Octave.  The format string is\n\
-passed to @code{strftime} and should begin with the character\n\
-@samp{#} and contain no newline characters.  If the value of\n\
-@code{save_header_format_string} is the empty string,\n\
-the header comment is omitted from text-format data files.  The\n\
-default value is\n\
+text-format data files saved by Octave.\n\
+\n\
+The format string is passed to @code{strftime} and should begin with the\n\
+character @samp{#} and contain no newline characters.  If the value of\n\
+@code{save_header_format_string} is the empty string, the header comment is\n\
+omitted from text-format data files.  The default value is\n\
 @c Set example in small font to prevent overfull line\n\
 \n\
 @smallexample\n\
 \"# Created by Octave VERSION, %a %b %d %H:%M:%S %Y %Z <USER@@HOST>\"\n\
 @end smallexample\n\
 \n\
 When called from inside a function with the @qcode{\"local\"} option, the\n\
-variable is changed locally for the function and any subroutines it calls.  \n\
+variable is changed locally for the function and any subroutines it calls.\n\
 The original variable value is restored when exiting the function.\n\
 @seealso{strftime, save}\n\
 @end deftypefn")
 {
   return SET_INTERNAL_VARIABLE (save_header_format_string);
 }
diff --git a/libinterp/corefcn/lookup.cc b/libinterp/corefcn/lookup.cc
--- a/libinterp/corefcn/lookup.cc
+++ b/libinterp/corefcn/lookup.cc
@@ -186,24 +186,25 @@ do_numeric_lookup (const ArrayT& array, 
 
   return retval;
 }
 
 DEFUN (lookup, args, ,
        "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {@var{idx} =} lookup (@var{table}, @var{y})\n\
 @deftypefnx {Built-in Function} {@var{idx} =} lookup (@var{table}, @var{y}, @var{opt})\n\
-Lookup values in a sorted table.  Usually used as a prelude to\n\
-interpolation.\n\
+Lookup values in a sorted table.\n\
+\n\
+This function is usually used as a prelude to interpolation.\n\
 \n\
 If table is increasing and @code{idx = lookup (table, y)}, then\n\
-@code{table(idx(i)) <= y(i) < table(idx(i+1))} for all @code{y(i)}\n\
-within the table.  If @code{y(i) < table(1)} then\n\
-@code{idx(i)} is 0. If @code{y(i) >= table(end)} or @code{isnan (y(i))} then\n\
-@code{idx(i)} is @code{n}.\n\
+@code{table(idx(i)) <= y(i) < table(idx(i+1))} for all @code{y(i)} within\n\
+the table.  If @code{y(i) < table(1)} then @code{idx(i)} is 0.  If\n\
+@code{y(i) >= table(end)} or @code{isnan (y(i))} then @code{idx(i)} is\n\
+@code{n}.\n\
 \n\
 If the table is decreasing, then the tests are reversed.\n\
 For non-strictly monotonic tables, empty intervals are always skipped.\n\
 The result is undefined if @var{table} is not monotonic, or if\n\
 @var{table} contains a NaN.\n\
 \n\
 The complexity of the lookup is O(M*log(N)) where N is the size of\n\
 @var{table} and M is the size of @var{y}.  In the special case when @var{y}\n\
diff --git a/libinterp/corefcn/ls-oct-ascii.cc b/libinterp/corefcn/ls-oct-ascii.cc
--- a/libinterp/corefcn/ls-oct-ascii.cc
+++ b/libinterp/corefcn/ls-oct-ascii.cc
@@ -415,18 +415,18 @@ save_three_d (std::ostream& os, const oc
   return (os && ! fail);
 }
 
 DEFUN (save_precision, args, nargout,
        "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {@var{val} =} save_precision ()\n\
 @deftypefnx {Built-in Function} {@var{old_val} =} save_precision (@var{new_val})\n\
 @deftypefnx {Built-in Function} {} save_precision (@var{new_val}, \"local\")\n\
-Query or set the internal variable that specifies the number of\n\
-digits to keep when saving data in text format.\n\
+Query or set the internal variable that specifies the number of digits to\n\
+keep when saving data in text format.\n\
 \n\
 When called from inside a function with the @qcode{\"local\"} option, the\n\
 variable is changed locally for the function and any subroutines it calls.\n\
 The original variable value is restored when exiting the function.\n\
 @end deftypefn")
 {
   return SET_INTERNAL_VARIABLE_WITH_LIMITS (save_precision, -1,
                                             std::numeric_limits<int>::max ());
diff --git a/libinterp/corefcn/lsode.cc b/libinterp/corefcn/lsode.cc
--- a/libinterp/corefcn/lsode.cc
+++ b/libinterp/corefcn/lsode.cc
@@ -155,17 +155,19 @@ lsode_user_jacobian (const ColumnVector&
       LSODE_ABORT (); \
     } \
   while (0)
 
 DEFUN (lsode, args, nargout,
        "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {[@var{x}, @var{istate}, @var{msg}] =} lsode (@var{fcn}, @var{x_0}, @var{t})\n\
 @deftypefnx {Built-in Function} {[@var{x}, @var{istate}, @var{msg}] =} lsode (@var{fcn}, @var{x_0}, @var{t}, @var{t_crit})\n\
-Solve the set of differential equations\n\
+Ordinary Differential Equation (ODE) solver.\n\
+\n\
+The set of differential equations to solve is\n\
 @tex\n\
 $$ {dx \\over dt} = f (x, t) $$\n\
 with\n\
 $$ x(t_0) = x_0 $$\n\
 @end tex\n\
 @ifnottex\n\
 \n\
 @example\n\
diff --git a/libinterp/corefcn/lu.cc b/libinterp/corefcn/lu.cc
--- a/libinterp/corefcn/lu.cc
+++ b/libinterp/corefcn/lu.cc
@@ -66,20 +66,22 @@ DEFUN (lu, args, nargout,
 @deftypefn  {Built-in Function} {[@var{L}, @var{U}] =} lu (@var{A})\n\
 @deftypefnx {Built-in Function} {[@var{L}, @var{U}, @var{P}] =} lu (@var{A})\n\
 @deftypefnx {Built-in Function} {[@var{L}, @var{U}, @var{P}, @var{Q}] =} lu (@var{S})\n\
 @deftypefnx {Built-in Function} {[@var{L}, @var{U}, @var{P}, @var{Q}, @var{R}] =} lu (@var{S})\n\
 @deftypefnx {Built-in Function} {[@dots{}] =} lu (@var{S}, @var{thres})\n\
 @deftypefnx {Built-in Function} {@var{y} =} lu (@dots{})\n\
 @deftypefnx {Built-in Function} {[@dots{}] =} lu (@dots{}, \"vector\")\n\
 @cindex LU decomposition\n\
-Compute the LU@tie{}decomposition of @var{A}.  If @var{A} is full\n\
-subroutines from\n\
-@sc{lapack} are used and if @var{A} is sparse then @sc{umfpack} is used.  The\n\
-result is returned in a permuted form, according to the optional return\n\
+Compute the LU@tie{}decomposition of @var{A}.\n\
+\n\
+If @var{A} is full subroutines from @sc{lapack} are used and if @var{A} is\n\
+sparse then @sc{umfpack} is used.\n\
+\n\
+The result is returned in a permuted form, according to the optional return\n\
 value @var{P}.  For example, given the matrix @code{a = [1, 2; 3, 4]},\n\
 \n\
 @example\n\
 [l, u, p] = lu (@var{a})\n\
 @end example\n\
 \n\
 @noindent\n\
 returns\n\
@@ -602,21 +604,21 @@ DEFUN (luupdate, args, ,
 @deftypefn  {Built-in Function} {[@var{L}, @var{U}] =} luupdate (@var{L}, @var{U}, @var{x}, @var{y})\n\
 @deftypefnx {Built-in Function} {[@var{L}, @var{U}, @var{P}] =} luupdate (@var{L}, @var{U}, @var{P}, @var{x}, @var{y})\n\
 Given an LU@tie{}factorization of a real or complex matrix\n\
 @w{@var{A} = @var{L}*@var{U}}, @var{L}@tie{}lower unit trapezoidal and\n\
 @var{U}@tie{}upper trapezoidal, return the LU@tie{}factorization\n\
 of @w{@var{A} + @var{x}*@var{y}.'}, where @var{x} and @var{y} are\n\
 column vectors (rank-1 update) or matrices with equal number of columns\n\
 (rank-k update).\n\
-Optionally, row-pivoted updating can be used by supplying\n\
-a row permutation (pivoting) matrix @var{P};\n\
-in that case, an updated permutation matrix is returned.\n\
-Note that if @var{L}, @var{U}, @var{P} is a pivoted LU@tie{}factorization\n\
-as obtained by @code{lu}:\n\
+\n\
+Optionally, row-pivoted updating can be used by supplying a row permutation\n\
+(pivoting) matrix @var{P}; in that case, an updated permutation matrix is\n\
+returned.  Note that if @var{L}, @var{U}, @var{P} is a pivoted\n\
+LU@tie{}factorization as obtained by @code{lu}:\n\
 \n\
 @example\n\
 [@var{L}, @var{U}, @var{P}] = lu (@var{A});\n\
 @end example\n\
 \n\
 @noindent\n\
 then a factorization of @tcode{@var{A}+@var{x}*@var{y}.'} can be obtained\n\
 either as\n\
@@ -631,19 +633,19 @@ or\n\
 @example\n\
 [@var{L1}, @var{U1}, @var{P1}] = lu (@var{L}, @var{U}, @var{P}, @var{x}, @var{y})\n\
 @end example\n\
 \n\
 The first form uses the unpivoted algorithm, which is faster, but less\n\
 stable.  The second form uses a slower pivoted algorithm, which is more\n\
 stable.\n\
 \n\
-The matrix case is done as a sequence of rank-1 updates;\n\
-thus, for large enough k, it will be both faster and more accurate to\n\
-recompute the factorization from scratch.\n\
+The matrix case is done as a sequence of rank-1 updates; thus, for large\n\
+enough k, it will be both faster and more accurate to recompute the\n\
+factorization from scratch.\n\
 @seealso{lu, cholupdate, qrupdate}\n\
 @end deftypefn")
 {
   octave_idx_type nargin = args.length ();
   octave_value_list retval;
 
   bool pivoted = nargin == 5;
 
diff --git a/libinterp/corefcn/luinc.cc b/libinterp/corefcn/luinc.cc
--- a/libinterp/corefcn/luinc.cc
+++ b/libinterp/corefcn/luinc.cc
@@ -32,23 +32,25 @@ along with Octave; see the file COPYING.
 #include "oct-map.h"
 
 #include "MatrixType.h"
 #include "SparseCmplxLU.h"
 #include "SparsedbleLU.h"
 #include "ov-re-sparse.h"
 #include "ov-cx-sparse.h"
 
+// FIXME: Deprecated in 4.0 and should be removed in 4.4.
 DEFUN (__luinc__, args, nargout,
        "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {[@var{L}, @var{U}, @var{P}, @var{Q}] =} luinc (@var{A}, '0')\n\
 @deftypefnx {Built-in Function} {[@var{L}, @var{U}, @var{P}, @var{Q}] =} luinc (@var{A}, @var{droptol})\n\
 @deftypefnx {Built-in Function} {[@var{L}, @var{U}, @var{P}, @var{Q}] =} luinc (@var{A}, @var{opts})\n\
 @cindex LU decomposition\n\
 Produce the incomplete LU@tie{}factorization of the sparse matrix @var{A}.\n\
+\n\
 Two types of incomplete factorization are possible, and the type\n\
 is determined by the second argument to @code{luinc}.\n\
 \n\
 Called with a second argument of @qcode{'0'}, the zero-level incomplete\n\
 LU@tie{}factorization is produced.  This creates a factorization of @var{A}\n\
 where the position of the nonzero arguments correspond to the same\n\
 positions as in the matrix @var{A}.\n\
 \n\
diff --git a/libinterp/corefcn/mappers.cc b/libinterp/corefcn/mappers.cc
--- a/libinterp/corefcn/mappers.cc
+++ b/libinterp/corefcn/mappers.cc
@@ -34,32 +34,35 @@ along with Octave; see the file COPYING.
 
 #include "defun.h"
 #include "error.h"
 #include "variables.h"
 
 DEFUN (abs, args, ,
        "-*- texinfo -*-\n\
 @deftypefn {Mapping Function} {} abs (@var{z})\n\
-Compute the magnitude of @var{z}, defined as\n\
+Compute the magnitude of @var{z}.\n\
+\n\
+The magnitude is defined as\n\
 @tex\n\
 $|z| = \\sqrt{x^2 + y^2}$.\n\
 @end tex\n\
 @ifnottex\n\
 |@var{z}| = @code{sqrt (x^2 + y^2)}.\n\
 @end ifnottex\n\
 \n\
 For example:\n\
 \n\
 @example\n\
 @group\n\
 abs (3 + 4i)\n\
      @result{} 5\n\
 @end group\n\
 @end example\n\
+@seealso{arg}\n\
 @end deftypefn")
 {
   octave_value retval;
   if (args.length () == 1)
     retval = args(0).abs ();
   else
     print_usage ();
 
@@ -152,17 +155,16 @@ Compute the inverse hyperbolic cosine fo
 %!test
 %! x = [1, 0, -1, 0];
 %! v = [0, pi/2*i, pi*i, pi/2*i];
 %! assert (acosh (x), v, sqrt (eps));
 
 %!test
 %! re = 2.99822295029797;
 %! im = pi/2;
-%! assert (acosh (10i), re + i*im);
 %! assert (acosh (-10i), re - i*im);
 
 %!test
 %! x = single ([1, 0, -1, 0]);
 %! v = single ([0, pi/2*i, pi*i, pi/2*i]);
 %! assert (acosh (x), v, sqrt (eps ("single")));
 
 %!test
@@ -173,49 +175,53 @@ Compute the inverse hyperbolic cosine fo
 
 %!error acosh ()
 %!error acosh (1, 2)
 */
 
 DEFUN (angle, args, ,
        "-*- texinfo -*-\n\
 @deftypefn {Mapping Function} {} angle (@var{z})\n\
-See arg.\n\
+See @code{arg}.\n\
+@seealso{arg}\n\
 @end deftypefn")
 {
   octave_value retval;
   if (args.length () == 1)
     retval = args(0).arg ();
   else
     print_usage ();
 
   return retval;
 }
 
 DEFUN (arg, args, ,
        "-*- texinfo -*-\n\
 @deftypefn  {Mapping Function} {} arg (@var{z})\n\
 @deftypefnx {Mapping Function} {} angle (@var{z})\n\
-Compute the argument of @var{z}, defined as,\n\
+Compute the argument, i.e., angle of @var{z}.\n\
+\n\
+This is defined as,\n\
 @tex\n\
 $\\theta = atan2 (y, x),$\n\
 @end tex\n\
 @ifnottex\n\
 @var{theta} = @code{atan2 (@var{y}, @var{x})},\n\
 @end ifnottex\n\
 in radians.\n\
 \n\
 For example:\n\
 \n\
 @example\n\
 @group\n\
 arg (3 + 4i)\n\
      @result{} 0.92730\n\
 @end group\n\
 @end example\n\
+@seealso{abs}\n\
 @end deftypefn")
 {
   octave_value retval;
   if (args.length () == 1)
     retval = args(0).arg ();
   else
     print_usage ();
 
@@ -389,16 +395,17 @@ Compute the inverse hyperbolic tangent f
 %!error atanh ()
 %!error atanh (1, 2)
 */
 
 DEFUN (cbrt, args, ,
        "-*- texinfo -*-\n\
 @deftypefn {Mapping Function} {} cbrt (@var{x})\n\
 Compute the real cube root of each element of @var{x}.\n\
+\n\
 Unlike @code{@var{x}^(1/3)}, the result will be negative if @var{x} is\n\
 negative.\n\
 @seealso{nthroot}\n\
 @end deftypefn")
 {
   octave_value retval;
   if (args.length () == 1)
     retval = args(0).cbrt ();
@@ -420,19 +427,22 @@ negative.\n\
 
 %!error cbrt ()
 %!error cbrt (1, 2)
 */
 
 DEFUN (ceil, args, ,
        "-*- texinfo -*-\n\
 @deftypefn {Mapping Function} {} ceil (@var{x})\n\
-Return the smallest integer not less than @var{x}.  This is equivalent to\n\
-rounding towards positive infinity.  If @var{x} is\n\
-complex, return @code{ceil (real (@var{x})) + ceil (imag (@var{x})) * I}.\n\
+Return the smallest integer not less than @var{x}.\n\
+\n\
+This is equivalent to rounding towards positive infinity.\n\
+\n\
+If @var{x} is complex, return\n\
+@code{ceil (real (@var{x})) + ceil (imag (@var{x})) * I}.\n\
 \n\
 @example\n\
 @group\n\
 ceil ([-2.7, 2.7])\n\
     @result{} -2    3\n\
 @end group\n\
 @end example\n\
 @seealso{floor, round, fix}\n\
@@ -462,17 +472,19 @@ ceil ([-2.7, 2.7])\n\
 
 %!error ceil ()
 %!error ceil (1, 2)
 */
 
 DEFUN (conj, args, ,
        "-*- texinfo -*-\n\
 @deftypefn {Mapping Function} {} conj (@var{z})\n\
-Return the complex conjugate of @var{z}, defined as\n\
+Return the complex conjugate of @var{z}.\n\
+\n\
+The complex conjugate is defined as\n\
 @tex\n\
 $\\bar{z} = x - iy$.\n\
 @end tex\n\
 @ifnottex\n\
 @code{conj (@var{z})} = @var{x} - @var{i}@var{y}.\n\
 @end ifnottex\n\
 @seealso{real, imag}\n\
 @end deftypefn")
@@ -569,17 +581,19 @@ Compute the hyperbolic cosine for each e
 
 %!error cosh ()
 %!error cosh (1, 2)
 */
 
 DEFUN (erf, args, ,
        "-*- texinfo -*-\n\
 @deftypefn {Mapping Function} {} erf (@var{z})\n\
-Compute the error function,\n\
+Compute the error function.\n\
+\n\
+The error function is defined as\n\
 @tex\n\
 $$\n\
  {\\rm erf} (z) = {2 \\over \\sqrt{\\pi}}\\int_0^z e^{-t^2} dt\n\
 $$\n\
 @end tex\n\
 @ifnottex\n\
 \n\
 @example\n\
@@ -639,17 +653,19 @@ erf (z) = --------- *  | e^(-t^2) dt\n\
 
 %!error erf ()
 %!error erf (1, 2)
 */
 
 DEFUN (erfinv, args, ,
        "-*- texinfo -*-\n\
 @deftypefn {Mapping Function} {} erfinv (@var{x})\n\
-Compute the inverse error function, i.e., @var{y} such that\n\
+Compute the inverse error function.\n\
+\n\
+The inverse error function is defined such that\n\
 \n\
 @example\n\
 erf (@var{y}) == @var{x}\n\
 @end example\n\
 @seealso{erf, erfc, erfcx, erfi, dawson, erfcinv}\n\
 @end deftypefn")
 {
   octave_value retval;
@@ -677,17 +693,19 @@ erf (@var{y}) == @var{x}\n\
 
 %!error erfinv ()
 %!error erfinv (1, 2)
 */
 
 DEFUN (erfcinv, args, ,
        "-*- texinfo -*-\n\
 @deftypefn {Mapping Function} {} erfcinv (@var{x})\n\
-Compute the inverse complementary error function, i.e., @var{y} such that\n\
+Compute the inverse complementary error function.\n\
+\n\
+The inverse complementary error function is defined such that\n\
 \n\
 @example\n\
 erfc (@var{y}) == @var{x}\n\
 @end example\n\
 @seealso{erfc, erf, erfcx, erfi, dawson, erfinv}\n\
 @end deftypefn")
 {
   octave_value retval;
@@ -715,17 +733,19 @@ erfc (@var{y}) == @var{x}\n\
 
 %!error erfcinv ()
 %!error erfcinv (1, 2)
 */
 
 DEFUN (erfc, args, ,
        "-*- texinfo -*-\n\
 @deftypefn {Mapping Function} {} erfc (@var{z})\n\
-Compute the complementary error function,\n\
+Compute the complementary error function.\n\
+\n\
+The complementary error function is defined as\n\
 @tex\n\
 $1 - {\\rm erf} (z)$.\n\
 @end tex\n\
 @ifnottex\n\
 @w{@code{1 - erf (@var{z})}}.\n\
 @end ifnottex\n\
 @seealso{erfcinv, erfcx, erfi, dawson, erf, erfinv}\n\
 @end deftypefn")
@@ -746,17 +766,19 @@ Compute the complementary error function
 
 %!error erfc ()
 %!error erfc (1, 2)
 */
 
 DEFUN (erfcx, args, ,
        "-*- texinfo -*-\n\
 @deftypefn {Mapping Function} {} erfcx (@var{z})\n\
-Compute the scaled complementary error function,\n\
+Compute the scaled complementary error function.\n\
+\n\
+The scaled complementary error function is defined as\n\
 @tex\n\
 $$\n\
  e^{z^2} {\\rm erfc} (z) \\equiv e^{z^2} (1 - {\\rm erf} (z))\n\
 $$\n\
 @end tex\n\
 @ifnottex\n\
 \n\
 @example\n\
@@ -789,20 +811,22 @@ exp (z^2) * erfc (z)\n\
 
 %!error erfcx ()
 %!error erfcx (1, 2)
 */
 
 DEFUN (erfi, args, ,
        "-*- texinfo -*-\n\
 @deftypefn {Mapping Function} {} erfi (@var{z})\n\
-Compute the imaginary error function,\n\
+Compute the imaginary error function.\n\
+\n\
+The imaginary error function is defined as\n\
 @tex\n\
 $$\n\
- -i {\\rm erf} (iz) \n\
+ -i {\\rm erf} (iz)\n\
 $$\n\
 @end tex\n\
 @ifnottex\n\
 \n\
 @example\n\
 -i * erf (i*z)\n\
 @end example\n\
 \n\
@@ -827,17 +851,19 @@ Compute the imaginary error function,\n\
 
 %!error erfi ()
 %!error erfi (1, 2)
 */
 
 DEFUN (dawson, args, ,
        "-*- texinfo -*-\n\
 @deftypefn {Mapping Function} {} dawson (@var{z})\n\
-Compute the Dawson (scaled imaginary error) function,\n\
+Compute the Dawson (scaled imaginary error) function.\n\
+\n\
+The Dawson function is defined as\n\
 @tex\n\
 $$\n\
  {\\sqrt{\\pi} \\over 2} e^{-z^2} {\\rm erfi} (z) \\equiv -i {\\sqrt{\\pi} \\over 2} e^{-z^2} {\\rm erf} (iz)\n\
 $$\n\
 @end tex\n\
 @ifnottex\n\
 \n\
 @example\n\
@@ -874,18 +900,19 @@ DEFUN (exp, args, ,
 @deftypefn {Mapping Function} {} exp (@var{x})\n\
 Compute\n\
 @tex\n\
 $e^{x}$\n\
 @end tex\n\
 @ifnottex\n\
 @code{e^x}\n\
 @end ifnottex\n\
-for each element of @var{x}.  To compute the matrix\n\
-exponential, see @ref{Linear Algebra}.\n\
+for each element of @var{x}.\n\
+\n\
+To compute the matrix exponential, see @ref{Linear Algebra}.\n\
 @seealso{log}\n\
 @end deftypefn")
 {
   octave_value retval;
   if (args.length () == 1)
     retval = args(0).exp ();
   else
     print_usage ();
@@ -976,18 +1003,19 @@ isfinite ([13, Inf, NA, NaN])\n\
 
 %!error isfinite ()
 %!error isfinite (1, 2)
 */
 
 DEFUN (fix, args, ,
        "-*- texinfo -*-\n\
 @deftypefn {Mapping Function} {} fix (@var{x})\n\
-Truncate fractional portion of @var{x} and return the integer portion.  This\n\
-is equivalent to rounding towards zero.  If @var{x} is complex, return\n\
+Truncate fractional portion of @var{x} and return the integer portion.\n\
+\n\
+This is equivalent to rounding towards zero.  If @var{x} is complex, return\n\
 @code{fix (real (@var{x})) + fix (imag (@var{x})) * I}.\n\
 \n\
 @example\n\
 @group\n\
 fix ([-2.7, 2.7])\n\
    @result{} -2    2\n\
 @end group\n\
 @end example\n\
@@ -1011,18 +1039,19 @@ fix ([-2.7, 2.7])\n\
 
 %!error fix ()
 %!error fix (1, 2)
 */
 
 DEFUN (floor, args, ,
        "-*- texinfo -*-\n\
 @deftypefn {Mapping Function} {} floor (@var{x})\n\
-Return the largest integer not greater than @var{x}.  This is equivalent to\n\
-rounding towards negative infinity.  If @var{x} is\n\
+Return the largest integer not greater than @var{x}.\n\
+\n\
+This is equivalent to rounding towards negative infinity.  If @var{x} is\n\
 complex, return @code{floor (real (@var{x})) + floor (imag (@var{x})) * I}.\n\
 \n\
 @example\n\
 @group\n\
 floor ([-2.7, 2.7])\n\
      @result{} -3    2\n\
 @end group\n\
 @end example\n\
@@ -1046,17 +1075,19 @@ floor ([-2.7, 2.7])\n\
 
 %!error floor ()
 %!error floor (1, 2)
 */
 
 DEFUN (gamma, args, ,
        "-*- texinfo -*-\n\
 @deftypefn {Mapping Function} {} gamma (@var{z})\n\
-Compute the Gamma function,\n\
+Compute the Gamma function.\n\
+\n\
+The Gamma function is defined as\n\
 @tex\n\
 $$\n\
  \\Gamma (z) = \\int_0^\\infty t^{z-1} e^{-t} dt.\n\
 $$\n\
 @end tex\n\
 @ifnottex\n\
 \n\
 @example\n\
@@ -1148,18 +1179,19 @@ Return the imaginary part of @var{z} as 
 %!error imag ()
 %!error imag (1, 2)
 */
 
 DEFUNX ("isalnum", Fisalnum, args, ,
         "-*- texinfo -*-\n\
 @deftypefn {Mapping Function} {} isalnum (@var{s})\n\
 Return a logical array which is true where the elements of @var{s} are\n\
-letters or digits and false where they are not.  This is equivalent to\n\
-(@code{isalpha (@var{s}) | isdigit (@var{s})}).\n\
+letters or digits and false where they are not.\n\
+\n\
+This is equivalent to (@code{isalpha (@var{s}) | isdigit (@var{s})}).\n\
 @seealso{isalpha, isdigit, ispunct, isspace, iscntrl}\n\
 @end deftypefn")
 {
   octave_value retval;
   if (args.length () == 1)
     retval = args(0).xisalnum ();
   else
     print_usage ();
@@ -1179,18 +1211,19 @@ letters or digits and false where they a
 %!error isalnum ()
 %!error isalnum (1, 2)
 */
 
 DEFUNX ("isalpha", Fisalpha, args, ,
         "-*- texinfo -*-\n\
 @deftypefn {Mapping Function} {} isalpha (@var{s})\n\
 Return a logical array which is true where the elements of @var{s} are\n\
-letters and false where they are not.  This is equivalent to\n\
-(@code{islower (@var{s}) | isupper (@var{s})}).\n\
+letters and false where they are not.\n\
+\n\
+This is equivalent to (@code{islower (@var{s}) | isupper (@var{s})}).\n\
 @seealso{isdigit, ispunct, isspace, iscntrl, isalnum, islower, isupper}\n\
 @end deftypefn")
 {
   octave_value retval;
   if (args.length () == 1)
     retval = args(0).xisalpha ();
   else
     print_usage ();
@@ -1294,16 +1327,17 @@ decimal digits (0-9) and false where the
 %!error isdigit (1, 2)
 */
 
 DEFUN (isinf, args, ,
        "-*- texinfo -*-\n\
 @deftypefn {Mapping Function} {} isinf (@var{x})\n\
 Return a logical array which is true where the elements of @var{x} are\n\
 are infinite and false where they are not.\n\
+\n\
 For example:\n\
 \n\
 @example\n\
 @group\n\
 isinf ([13, Inf, NA, NaN])\n\
       @result{} [ 0, 1, 0, 0 ]\n\
 @end group\n\
 @end example\n\
@@ -1393,16 +1427,17 @@ lowercase letters and false where they a
 %!error islower (1, 2)
 */
 
 DEFUN (isna, args, ,
        "-*- texinfo -*-\n\
 @deftypefn {Mapping Function} {} isna (@var{x})\n\
 Return a logical array which is true where the elements of @var{x} are\n\
 NA (missing) values and false where they are not.\n\
+\n\
 For example:\n\
 \n\
 @example\n\
 @group\n\
 isna ([13, Inf, NA, NaN])\n\
      @result{} [ 0, 0, 1, 0 ]\n\
 @end group\n\
 @end example\n\
@@ -1435,16 +1470,17 @@ isna ([13, Inf, NA, NaN])\n\
 %!error isna (1, 2)
 */
 
 DEFUN (isnan, args, ,
        "-*- texinfo -*-\n\
 @deftypefn {Mapping Function} {} isnan (@var{x})\n\
 Return a logical array which is true where the elements of @var{x} are\n\
 NaN values and false where they are not.\n\
+\n\
 NA values are also considered NaN values.  For example:\n\
 \n\
 @example\n\
 @group\n\
 isnan ([13, Inf, NA, NaN])\n\
       @result{} [ 0, 0, 1, 1 ]\n\
 @end group\n\
 @end example\n\
@@ -1675,18 +1711,19 @@ DEFUN (log, args, ,
 @deftypefn {Mapping Function} {} log (@var{x})\n\
 Compute the natural logarithm,\n\
 @tex\n\
 $\\ln{(x)},$\n\
 @end tex\n\
 @ifnottex\n\
 @code{ln (@var{x})},\n\
 @end ifnottex\n\
-for each element of @var{x}.  To compute the\n\
-matrix logarithm, see @ref{Linear Algebra}.\n\
+for each element of @var{x}.\n\
+\n\
+To compute the matrix logarithm, see @ref{Linear Algebra}.\n\
 @seealso{exp, log1p, log2, log10, logspace}\n\
 @end deftypefn")
 {
   octave_value retval;
   if (args.length () == 1)
     retval = args(0).log ();
   else
     print_usage ();
@@ -1789,17 +1826,19 @@ Return the real part of @var{z}.\n\
 
 %!error real ()
 %!error real (1, 2)
 */
 
 DEFUN (round, args, ,
        "-*- texinfo -*-\n\
 @deftypefn {Mapping Function} {} round (@var{x})\n\
-Return the integer nearest to @var{x}.  If @var{x} is complex, return\n\
+Return the integer nearest to @var{x}.\n\
+\n\
+If @var{x} is complex, return\n\
 @code{round (real (@var{x})) + round (imag (@var{x})) * I}.  If there\n\
 are two nearest integers, return the one further away from zero.\n\
 \n\
 @example\n\
 @group\n\
 round ([-2.7, 2.7])\n\
      @result{} -3    3\n\
 @end group\n\
@@ -1836,17 +1875,19 @@ round ([-2.7, 2.7])\n\
 %!error round ()
 %!error round (1, 2)
 */
 
 DEFUN (roundb, args, ,
        "-*- texinfo -*-\n\
 @deftypefn {Mapping Function} {} roundb (@var{x})\n\
 Return the integer nearest to @var{x}.  If there are two nearest\n\
-integers, return the even one (banker's rounding).  If @var{x} is complex,\n\
+integers, return the even one (banker's rounding).\n\
+\n\
+If @var{x} is complex,\n\
 return @code{roundb (real (@var{x})) + roundb (imag (@var{x})) * I}.\n\
 @seealso{round}\n\
 @end deftypefn")
 {
   octave_value retval;
   if (args.length () == 1)
     retval = args(0).roundb ();
   else
@@ -1876,17 +1917,19 @@ return @code{roundb (real (@var{x})) + r
 
 %!error roundb ()
 %!error roundb (1, 2)
 */
 
 DEFUN (sign, args, ,
        "-*- texinfo -*-\n\
 @deftypefn {Mapping Function} {} sign (@var{x})\n\
-Compute the @dfn{signum} function, which is defined as\n\
+Compute the @dfn{signum} function.\n\
+\n\
+This is defined as\n\
 @tex\n\
 $$\n\
 {\\rm sign} (@var{x}) = \\cases{1,&$x>0$;\\cr 0,&$x=0$;\\cr -1,&$x<0$.\\cr}\n\
 $$\n\
 @end tex\n\
 @ifnottex\n\
 \n\
 @example\n\
@@ -1896,18 +1939,17 @@ sign (x) =  0, x = 0;\n\
             1, x > 0.\n\
 @end group\n\
 @end example\n\
 \n\
 @end ifnottex\n\
 \n\
 For complex arguments, @code{sign} returns @code{x ./ abs (@var{x})}.\n\
 \n\
-Note that @code{sign (-0.0)} is 0.\n\
-Although IEEE 754 floating point\n\
+Note that @code{sign (-0.0)} is 0.  Although IEEE 754 floating point\n\
 allows zero to be signed, 0.0 and -0.0 compare equal.  If you must test\n\
 whether zero is signed, use the @code{signbit} function.\n\
 @seealso{signbit}\n\
 @end deftypefn")
 {
   octave_value retval;
   if (args.length () == 1)
     retval = args(0).signum ();
@@ -1930,20 +1972,22 @@ whether zero is signed, use the @code{si
 
 %!error sign ()
 %!error sign (1, 2)
 */
 
 DEFUNX ("signbit", Fsignbit, args, ,
         "-*- texinfo -*-\n\
 @deftypefn {Mapping Function} {} signbit (@var{x})\n\
-Return logical true if the value of @var{x} has its sign bit set.\n\
-Otherwise return logical false.  This behavior is consistent with the other\n\
-logical functions.  See@ref{Logical Values}.  The behavior differs from the\n\
-C language function which returns nonzero if the sign bit is set.\n\
+Return logical true if the value of @var{x} has its sign bit set and false\n\
+otherwise.\n\
+\n\
+This behavior is consistent with the other logical functions.\n\
+See @ref{Logical Values}.  The behavior differs from the C language function\n\
+which returns nonzero if the sign bit is set.\n\
 \n\
 This is not the same as @code{x < 0.0}, because IEEE 754 floating point\n\
 allows zero to be signed.  The comparison @code{-0.0 < 0.0} is false,\n\
 but @code{signbit (-0.0)} will return a nonzero value.\n\
 @seealso{sign}\n\
 @end deftypefn")
 {
   octave_value retval;
@@ -2037,19 +2081,21 @@ Compute the hyperbolic sine for each ele
 
 %!error sinh ()
 %!error sinh (1, 2)
 */
 
 DEFUN (sqrt, args, ,
        "-*- texinfo -*-\n\
 @deftypefn {Mapping Function} {} sqrt (@var{x})\n\
-Compute the square root of each element of @var{x}.  If @var{x} is negative,\n\
-a complex result is returned.  To compute the matrix square root, see\n\
-@ref{Linear Algebra}.\n\
+Compute the square root of each element of @var{x}.\n\
+\n\
+If @var{x} is negative, a complex result is returned.\n\
+\n\
+To compute the matrix square root, see @ref{Linear Algebra}.\n\
 @seealso{realsqrt, nthroot}\n\
 @end deftypefn")
 {
   octave_value retval;
   if (args.length () == 1)
     retval = args(0).sqrt ();
   else
     print_usage ();
@@ -2136,17 +2182,19 @@ Compute hyperbolic tangent for each elem
 
 %!error tanh ()
 %!error tanh (1, 2)
 */
 
 DEFUNX ("toascii", Ftoascii, args, ,
         "-*- texinfo -*-\n\
 @deftypefn {Mapping Function} {} toascii (@var{s})\n\
-Return ASCII representation of @var{s} in a matrix.  For example:\n\
+Return ASCII representation of @var{s} in a matrix.\n\
+\n\
+For example:\n\
 \n\
 @example\n\
 @group\n\
 toascii (\"ASCII\")\n\
      @result{} [ 65, 83, 67, 73, 73 ]\n\
 @end group\n\
 \n\
 @end example\n\
@@ -2175,17 +2223,19 @@ toascii (\"ASCII\")\n\
 */
 
 DEFUNX ("tolower", Ftolower, args, ,
         "-*- texinfo -*-\n\
 @deftypefn  {Mapping Function} {} tolower (@var{s})\n\
 @deftypefnx {Mapping Function} {} lower (@var{s})\n\
 Return a copy of the string or cell string @var{s}, with each uppercase\n\
 character replaced by the corresponding lowercase one; non-alphabetic\n\
-characters are left unchanged.  For example:\n\
+characters are left unchanged.\n\
+\n\
+For example:\n\
 \n\
 @example\n\
 @group\n\
 tolower (\"MiXeD cAsE 123\")\n\
       @result{} \"mixed case 123\"\n\
 @end group\n\
 @end example\n\
 @seealso{toupper}\n\
@@ -2235,17 +2285,19 @@ DEFALIAS (lower, tolower);
 */
 
 DEFUNX ("toupper", Ftoupper, args, ,
         "-*- texinfo -*-\n\
 @deftypefn  {Mapping Function} {} toupper (@var{s})\n\
 @deftypefnx {Mapping Function} {} upper (@var{s})\n\
 Return a copy of the string or cell string @var{s}, with each lowercase\n\
 character replaced by the corresponding uppercase one; non-alphabetic\n\
-characters are left unchanged.  For example:\n\
+characters are left unchanged.\n\
+\n\
+For example:\n\
 \n\
 @example\n\
 @group\n\
 toupper (\"MiXeD cAsE 123\")\n\
       @result{} \"MIXED CASE 123\"\n\
 @end group\n\
 @end example\n\
 @seealso{tolower}\n\
diff --git a/libinterp/corefcn/matrix_type.cc b/libinterp/corefcn/matrix_type.cc
--- a/libinterp/corefcn/matrix_type.cc
+++ b/libinterp/corefcn/matrix_type.cc
@@ -39,21 +39,26 @@ along with Octave; see the file COPYING.
 DEFUN (matrix_type, args, ,
        "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {@var{type} =} matrix_type (@var{A})\n\
 @deftypefnx {Built-in Function} {@var{type} =} matrix_type (@var{A}, \"nocompute\")\n\
 @deftypefnx {Built-in Function} {@var{A} =} matrix_type (@var{A}, @var{type})\n\
 @deftypefnx {Built-in Function} {@var{A} =} matrix_type (@var{A}, \"upper\", @var{perm})\n\
 @deftypefnx {Built-in Function} {@var{A} =} matrix_type (@var{A}, \"lower\", @var{perm})\n\
 @deftypefnx {Built-in Function} {@var{A} =} matrix_type (@var{A}, \"banded\", @var{nl}, @var{nu})\n\
-Identify the matrix type or mark a matrix as a particular type.  This allows\n\
-more rapid solutions of linear equations involving @var{A} to be performed.\n\
+Identify the matrix type or mark a matrix as a particular type.\n\
+\n\
+This allows more rapid solutions of linear equations involving @var{A} to be\n\
+performed.\n\
+\n\
 Called with a single argument, @code{matrix_type} returns the type of the\n\
-matrix and caches it for future use.  Called with more than one argument,\n\
-@code{matrix_type} allows the type of the matrix to be defined.\n\
+matrix and caches it for future use.\n\
+\n\
+Called with more than one argument, @code{matrix_type} allows the type of\n\
+the matrix to be defined.\n\
 \n\
 If the option @qcode{\"nocompute\"} is given, the function will not attempt\n\
 to guess the type if it is still unknown.  This is useful for debugging\n\
 purposes.\n\
 \n\
 The possible matrix types depend on whether the matrix is full or sparse, and\n\
 can be one of the following\n\
 \n\
diff --git a/libinterp/corefcn/max.cc b/libinterp/corefcn/max.cc
--- a/libinterp/corefcn/max.cc
+++ b/libinterp/corefcn/max.cc
@@ -426,21 +426,20 @@ do_minmax_body (const octave_value_list&
 DEFUN (min, args, nargout,
        "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {} min (@var{x})\n\
 @deftypefnx {Built-in Function} {} min (@var{x}, [], @var{dim})\n\
 @deftypefnx {Built-in Function} {[@var{w}, @var{iw}] =} min (@var{x})\n\
 @deftypefnx {Built-in Function} {} min (@var{x}, @var{y})\n\
 Find minimum values in the array @var{x}.\n\
 \n\
-For a vector argument, return the minimum value.\n\
-For a matrix argument, return a row vector with the minimum value of each\n\
-column.\n\
-For a multi-dimensional array, @code{min} operates along the first\n\
-non-singleton dimension.\n\
+For a vector argument, return the minimum value.  For a matrix argument,\n\
+return a row vector with the minimum value of each column.  For a\n\
+multi-dimensional array, @code{min} operates along the first non-singleton\n\
+dimension.\n\
 \n\
 If the optional third argument @var{dim} is present then operate along\n\
 this dimension.  In this case the second argument is ignored and should be\n\
 set to the empty matrix.\n\
 \n\
 For two matrices (or a matrix and a scalar), return the pairwise minimum.\n\
 \n\
 Thus,\n\
@@ -455,37 +454,36 @@ returns the smallest element of the 2-D 
 @example\n\
 @group\n\
 min (2:5, pi)\n\
     @result{}  2.0000  3.0000  3.1416  3.1416\n\
 @end group\n\
 @end example\n\
 \n\
 @noindent\n\
-compares each element of the range @code{2:5} with @code{pi}, and\n\
-returns a row vector of the minimum values.\n\
+compares each element of the range @code{2:5} with @code{pi}, and returns a\n\
+row vector of the minimum values.\n\
 \n\
 For complex arguments, the magnitude of the elements are used for\n\
 comparison.  If the magnitudes are identical, then the results are ordered\n\
 by phase angle in the range (-pi, pi].  Hence,\n\
 \n\
 @example\n\
 @group\n\
 min ([-1 i 1 -i])\n\
     @result{} -i\n\
 @end group\n\
 @end example\n\
 \n\
 @noindent\n\
 because all entries have magnitude 1, but -i has the smallest phase angle\n\
 with value -pi/2.\n\
 \n\
-If called with one input and two output arguments,\n\
-@code{min} also returns the first index of the\n\
-minimum value(s).  Thus,\n\
+If called with one input and two output arguments, @code{min} also returns\n\
+the first index of the minimum value(s).  Thus,\n\
 \n\
 @example\n\
 @group\n\
 [x, ix] = min ([1, 3, 0, 2, 0])\n\
     @result{}  x = 0\n\
         ix = 3\n\
 @end group\n\
 @end example\n\
@@ -649,21 +647,20 @@ minimum value(s).  Thus,\n\
 DEFUN (max, args, nargout,
        "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {} max (@var{x})\n\
 @deftypefnx {Built-in Function} {} max (@var{x}, [], @var{dim})\n\
 @deftypefnx {Built-in Function} {[@var{w}, @var{iw}] =} max (@var{x})\n\
 @deftypefnx {Built-in Function} {} max (@var{x}, @var{y})\n\
 Find maximum values in the array @var{x}.\n\
 \n\
-For a vector argument, return the maximum value.\n\
-For a matrix argument, return a row vector with the maximum value of each\n\
-column.\n\
-For a multi-dimensional array, @code{max} operates along the first\n\
-non-singleton dimension.\n\
+For a vector argument, return the maximum value.  For a matrix argument,\n\
+return a row vector with the maximum value of each column.  For a\n\
+multi-dimensional array, @code{max} operates along the first non-singleton\n\
+dimension.\n\
 \n\
 If the optional third argument @var{dim} is present then operate along\n\
 this dimension.  In this case the second argument is ignored and should be\n\
 set to the empty matrix.\n\
 \n\
 For two matrices (or a matrix and a scalar), return the pairwise maximum.\n\
 \n\
 Thus,\n\
@@ -696,19 +693,18 @@ max ([-1 i 1 -i])\n\
     @result{} -1\n\
 @end group\n\
 @end example\n\
 \n\
 @noindent\n\
 because all entries have magnitude 1, but -1 has the largest phase angle\n\
 with value pi.\n\
 \n\
-If called with one input and two output arguments,\n\
-@code{max} also returns the first index of the\n\
-maximum value(s).  Thus,\n\
+If called with one input and two output arguments, @code{max} also returns\n\
+the first index of the maximum value(s).  Thus,\n\
 \n\
 @example\n\
 @group\n\
 [x, ix] = max ([1, 3, 5, 2, 5])\n\
     @result{}  x = 5\n\
         ix = 3\n\
 @end group\n\
 @end example\n\
diff --git a/libinterp/corefcn/md5sum.cc b/libinterp/corefcn/md5sum.cc
--- a/libinterp/corefcn/md5sum.cc
+++ b/libinterp/corefcn/md5sum.cc
@@ -35,19 +35,20 @@ along with Octave; see the file COPYING.
 #include "oct-env.h"
 #include "oct-md5.h"
 #include "utils.h"
 
 DEFUN (md5sum, args, ,
        "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {} md5sum (@var{file})\n\
 @deftypefnx {Built-in Function} {} md5sum (@var{str}, @var{opt})\n\
-Calculate the MD5 sum of the file @var{file}.  If the second parameter\n\
-@var{opt} exists and is true, then calculate the MD5 sum of the\n\
-string @var{str}.\n\
+Calculate the MD5 sum of the file @var{file}.\n\
+\n\
+If the second parameter @var{opt} exists and is true, then calculate the MD5\n\
+sum of the string @var{str}.\n\
 @end deftypefn")
 {
   octave_value retval;
   int nargin = args.length ();
 
   if (nargin != 1 && nargin != 2)
     print_usage ();
   else
diff --git a/libinterp/corefcn/mgorth.cc b/libinterp/corefcn/mgorth.cc
--- a/libinterp/corefcn/mgorth.cc
+++ b/libinterp/corefcn/mgorth.cc
@@ -47,18 +47,19 @@ do_mgorth (ColumnVector& x, const Matrix
   if (real (h(Vc)) > 0)
     x = x / h(Vc);
 }
 
 DEFUN (mgorth, args, nargout,
        "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {[@var{y}, @var{h}] =} mgorth (@var{x}, @var{v})\n\
 Orthogonalize a given column vector @var{x} with respect to a set of\n\
-orthonormal vectors comprising the columns of @var{v}\n\
-using the modified Gram-Schmidt method.\n\
+orthonormal vectors comprising the columns of @var{v} using the modified\n\
+Gram-Schmidt method.\n\
+\n\
 On exit, @var{y} is a unit vector such that:\n\
 \n\
 @example\n\
 @group\n\
   norm (@var{y}) = 1\n\
   @var{v}' * @var{y} = 0\n\
   @var{x} = [@var{v}, @var{y}]*@var{h}'\n\
 @end group\n\
diff --git a/libinterp/corefcn/nproc.cc b/libinterp/corefcn/nproc.cc
--- a/libinterp/corefcn/nproc.cc
+++ b/libinterp/corefcn/nproc.cc
@@ -39,18 +39,18 @@ are counted as follows:\n\
 @table @code\n\
 @item all\n\
 total number of processors.\n\
 \n\
 @item current\n\
 processors available to the current process.\n\
 \n\
 @item overridable\n\
-likewise, but overridable through the @w{@env{OMP_NUM_THREADS}} environment\n\
-variable.\n\
+same as @code{current}, but overridable through the @w{@env{OMP_NUM_THREADS}}\n\
+environment variable.\n\
 @end table\n\
 @end deftypefn")
 {
   octave_value retval;
 
   int nargin = args.length ();
 
   if ((nargin != 0 && nargin != 1) || (nargout != 0 && nargout != 1))
diff --git a/libinterp/corefcn/oct-hist.cc b/libinterp/corefcn/oct-hist.cc
--- a/libinterp/corefcn/oct-hist.cc
+++ b/libinterp/corefcn/oct-hist.cc
@@ -582,18 +582,17 @@ octave_history_write_timestamp (void)
       octave_link::append_history (timestamp);
 }
 
 DEFUN (edit_history, args, ,
        "-*- texinfo -*-\n\
 @deftypefn  {Command} {} edit_history\n\
 @deftypefnx {Command} {} edit_history @var{cmd_number}\n\
 @deftypefnx {Command} {} edit_history @var{first} @var{last}\n\
-Edit the history list using the editor named by the variable\n\
-@w{@env{EDITOR}}.\n\
+Edit the history list using the editor named by the variable @env{EDITOR}.\n\
 \n\
 The commands to be edited are first copied to a temporary file.  When you\n\
 exit the editor, Octave executes the commands that remain in the file.  It\n\
 is often more convenient to use @code{edit_history} to define functions\n\
 rather than attempting to enter them directly on the command line.\n\
 The block of commands is executed as soon as you exit the editor.\n\
 To avoid executing any commands, simply delete all the lines from the buffer\n\
 before leaving the editor.\n\
@@ -610,34 +609,36 @@ The following are equivalent and edit th
 edit_history\n\
 edit_history -1\n\
 @end group\n\
 @end example\n\
 \n\
 When using ranges, specifying a larger number for the first command than the\n\
 last command reverses the list of commands before they are placed in the\n\
 buffer to be edited.\n\
-@seealso{run_history}\n\
+@seealso{run_history, history}\n\
 @end deftypefn")
 {
   octave_value_list retval;
 
   do_edit_history (args);
 
   return retval;
 }
 
 DEFUN (history, args, nargout,
        "-*- texinfo -*-\n\
 @deftypefn  {Command} {} history\n\
 @deftypefnx {Command} {} history @var{opt1} @dots{}\n\
 @deftypefnx {Built-in Function} {@var{h} =} history ()\n\
 @deftypefnx {Built-in Function} {@var{h} =} history (@var{opt1}, @dots{})\n\
 If invoked with no arguments, @code{history} displays a list of commands\n\
-that you have executed.  Valid options are:\n\
+that you have executed.\n\
+\n\
+Valid options are:\n\
 \n\
 @table @code\n\
 @item   @var{n}\n\
 @itemx -@var{n}\n\
 Display only the most recent @var{n} lines of history.\n\
 \n\
 @item -c\n\
 Clear the history list.\n\
@@ -657,16 +658,17 @@ omitted, use the default history file (n
 @end table\n\
 \n\
 For example, to display the five most recent commands that you have\n\
 typed without displaying line numbers, use the command\n\
 @kbd{history -q 5}.\n\
 \n\
 If invoked with a single output argument, the history will be saved to that\n\
 argument as a cell string and will not be output to screen.\n\
+@seealso{edit_history, run_history}\n\
 @end deftypefn")
 {
   octave_value retval;
 
   string_vector hlist = do_history (args, nargout);
 
   if (nargout > 0)
     retval = Cell (hlist);
@@ -677,21 +679,22 @@ argument as a cell string and will not b
 DEFUN (run_history, args, ,
        "-*- texinfo -*-\n\
 @deftypefn  {Command} {} run_history\n\
 @deftypefnx {Command} {} run_history @var{cmd_number}\n\
 @deftypefnx {Command} {} run_history @var{first} @var{last}\n\
 Run commands from the history list.\n\
 \n\
 When invoked with no arguments, run the previously executed command;\n\
+\n\
 With one argument, run the specified command @var{cmd_number};\n\
+\n\
 With two arguments, run the list of commands between @var{first} and\n\
 @var{last}.  Command number specifiers may also be negative where -1\n\
-refers to the most recently executed command.\n\
-For example, the command\n\
+refers to the most recently executed command.  For example, the command\n\
 \n\
 @example\n\
 @group\n\
 run_history\n\
      OR\n\
 run_history -1\n\
 @end group\n\
 @end example\n\
@@ -717,34 +720,35 @@ disp (1)\n\
 disp (2)\n\
 run_history -1 -2\n\
 @result{}\n\
  2\n\
  1\n\
 @end group\n\
 @end example\n\
 \n\
-@seealso{edit_history}\n\
+@seealso{edit_history, history}\n\
 @end deftypefn")
 {
   octave_value_list retval;
 
   do_run_history (args);
 
   return retval;
 }
 
 DEFUN (history_control, args, nargout,
        "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {@var{val} =} history_control ()\n\
 @deftypefnx {Built-in Function} {@var{old_val} =} history_control (@var{new_val})\n\
 Query or set the internal variable that specifies how commands are saved\n\
-to the history list.  The default value is an empty character string,\n\
-but may be overridden by the environment variable\n\
-@w{@env{OCTAVE_HISTCONTROL}}.\n\
+to the history list.\n\
+\n\
+The default value is an empty character string, but may be overridden by the\n\
+environment variable @w{@env{OCTAVE_HISTCONTROL}}.\n\
 \n\
 The value of @code{history_control} is a colon-separated list of values\n\
 controlling how commands are saved on the history list.  If the list\n\
 of values includes @code{ignorespace}, lines which begin with a space\n\
 character are not saved in the history list.  A value of @code{ignoredups}\n\
 causes lines matching the previous history entry to not be saved.\n\
 A value of @code{ignoreboth} is shorthand for @code{ignorespace} and\n\
 @code{ignoredups}.  A value of @code{erasedups} causes all previous lines\n\
@@ -769,18 +773,20 @@ the history list, subject to the value o
   return retval;
 }
 
 DEFUN (history_size, args, nargout,
        "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {@var{val} =} history_size ()\n\
 @deftypefnx {Built-in Function} {@var{old_val} =} history_size (@var{new_val})\n\
 Query or set the internal variable that specifies how many entries\n\
-to store in the history file.  The default value is @code{1000},\n\
-but may be overridden by the environment variable @w{@env{OCTAVE_HISTSIZE}}.\n\
+to store in the history file.\n\
+\n\
+The default value is @code{1000}, but may be overridden by the environment\n\
+variable @w{@env{OCTAVE_HISTSIZE}}.\n\
 @seealso{history_file, history_timestamp_format_string, history_save}\n\
 @end deftypefn")
 {
   octave_value retval;
 
   int old_history_size = command_history::size ();
 
   int tmp = old_history_size;
@@ -795,19 +801,20 @@ but may be overridden by the environment
   return retval;
 }
 
 DEFUN (history_file, args, nargout,
        "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {@var{val} =} history_file ()\n\
 @deftypefnx {Built-in Function} {@var{old_val} =} history_file (@var{new_val})\n\
 Query or set the internal variable that specifies the name of the\n\
-file used to store command history.  The default value is\n\
-@file{~/.octave_hist}, but may be overridden by the environment\n\
-variable @w{@env{OCTAVE_HISTFILE}}.\n\
+file used to store command history.\n\
+\n\
+The default value is @file{~/.octave_hist}, but may be overridden by the\n\
+environment variable @w{@env{OCTAVE_HISTFILE}}.\n\
 @seealso{history_size, history_save, history_timestamp_format_string}\n\
 @end deftypefn")
 {
   octave_value retval;
 
   std::string old_history_file = command_history::file ();
 
   std::string tmp = old_history_file;
@@ -822,42 +829,43 @@ variable @w{@env{OCTAVE_HISTFILE}}.\n\
 
 DEFUN (history_timestamp_format_string, args, nargout,
        "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {@var{val} =} history_timestamp_format_string ()\n\
 @deftypefnx {Built-in Function} {@var{old_val} =} history_timestamp_format_string (@var{new_val})\n\
 @deftypefnx {Built-in Function} {} history_timestamp_format_string (@var{new_val}, \"local\")\n\
 Query or set the internal variable that specifies the format string\n\
 for the comment line that is written to the history file when Octave\n\
-exits.  The format string is passed to @code{strftime}.  The default\n\
-value is\n\
+exits.\n\
+\n\
+The format string is passed to @code{strftime}.  The default value is\n\
 \n\
 @example\n\
 \"# Octave VERSION, %a %b %d %H:%M:%S %Y %Z <USER@@HOST>\"\n\
 @end example\n\
 \n\
 When called from inside a function with the @qcode{\"local\"} option, the\n\
-variable is changed locally for the function and any subroutines it calls.  \n\
+variable is changed locally for the function and any subroutines it calls.\n\
 The original variable value is restored when exiting the function.\n\
 @seealso{strftime, history_file, history_size, history_save}\n\
 @end deftypefn")
 {
   return SET_INTERNAL_VARIABLE (history_timestamp_format_string);
 }
 
 DEFUN (history_save, args, nargout,
        "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {@var{val} =} history_save ()\n\
 @deftypefnx {Built-in Function} {@var{old_val} =} history_save (@var{new_val})\n\
 @deftypefnx {Built-in Function} {} history_save (@var{new_val}, \"local\")\n\
 Query or set the internal variable that controls whether commands entered\n\
 on the command line are saved in the history file.\n\
 \n\
 When called from inside a function with the @qcode{\"local\"} option, the\n\
-variable is changed locally for the function and any subroutines it calls.  \n\
+variable is changed locally for the function and any subroutines it calls.\n\
 The original variable value is restored when exiting the function.\n\
 @seealso{history_control, history_file, history_size, history_timestamp_format_string}\n\
 @end deftypefn")
 {
   octave_value retval;
 
   bool old_history_save = ! command_history::ignoring_entries ();
 
diff --git a/libinterp/corefcn/ordschur.cc b/libinterp/corefcn/ordschur.cc
--- a/libinterp/corefcn/ordschur.cc
+++ b/libinterp/corefcn/ordschur.cc
@@ -63,16 +63,17 @@ extern "C"
 }
 
 DEFUN (ordschur, args, ,
        "-*- texinfo -*-\n\
 @deftypefn {Loadable Function} {[@var{UR}, @var{SR}] =} ordschur (@var{U}, @var{S}, @var{select})\n\
 Reorders the real Schur factorization (@var{U},@var{S}) obtained with the\n\
 @code{schur} function, so that selected eigenvalues appear in the upper left\n\
 diagonal blocks of the quasi triangular Schur matrix.\n\
+\n\
 The logical vector @var{select} specifies the selected eigenvalues as they\n\
 appear along @var{S}'s diagonal.\n\
 \n\
 For example, given the matrix @code{@var{A} = [1, 2; 3, 4]}, and its Schur\n\
 decomposition\n\
 \n\
 @example\n\
 [@var{U}, @var{S}] = schur (@var{A})\n\
diff --git a/libinterp/corefcn/pager.cc b/libinterp/corefcn/pager.cc
--- a/libinterp/corefcn/pager.cc
+++ b/libinterp/corefcn/pager.cc
@@ -607,18 +607,20 @@ Undocumented internal function\n\
   return ovl (write_to_diary_file);
 }
 
 DEFUN (more, args, ,
        "-*- texinfo -*-\n\
 @deftypefn  {Command} {} more\n\
 @deftypefnx {Command} {} more on\n\
 @deftypefnx {Command} {} more off\n\
-Turn output pagination on or off.  Without an argument, @code{more}\n\
-toggles the current state.\n\
+Turn output pagination on or off.\n\
+\n\
+Without an argument, @code{more} toggles the current state.\n\
+\n\
 The current state can be determined via @code{page_screen_output}.\n\
 @seealso{page_screen_output, page_output_immediately, PAGER, PAGER_FLAGS}\n\
 @end deftypefn")
 {
   octave_value_list retval;
 
   int argc = args.length () + 1;
 
@@ -644,18 +646,18 @@ The current state can be determined via 
     print_usage ();
 
   return retval;
 }
 
 DEFUN (terminal_size, , ,
        "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} terminal_size ()\n\
-Return a two-element row vector containing the current size of the\n\
-terminal window in characters (rows and columns).\n\
+Return a two-element row vector containing the current size of the terminal\n\
+window in characters (rows and columns).\n\
 @seealso{list_in_columns}\n\
 @end deftypefn")
 {
   RowVector size (2, 0.0);
 
   size(0) = command_editor::terminal_rows ();
   size(1) = command_editor::terminal_cols ();
 
@@ -663,77 +665,81 @@ terminal window in characters (rows and 
 }
 
 DEFUN (page_output_immediately, args, nargout,
        "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {@var{val} =} page_output_immediately ()\n\
 @deftypefnx {Built-in Function} {@var{old_val} =} page_output_immediately (@var{new_val})\n\
 @deftypefnx {Built-in Function} {} page_output_immediately (@var{new_val}, \"local\")\n\
 Query or set the internal variable that controls whether Octave sends\n\
-output to the pager as soon as it is available.  Otherwise, Octave\n\
-buffers its output and waits until just before the prompt is printed to\n\
-flush it to the pager.\n\
+output to the pager as soon as it is available.\n\
+\n\
+Otherwise, Octave buffers its output and waits until just before the prompt\n\
+is printed to flush it to the pager.\n\
 \n\
 When called from inside a function with the @qcode{\"local\"} option, the\n\
-variable is changed locally for the function and any subroutines it calls.  \n\
+variable is changed locally for the function and any subroutines it calls.\n\
 The original variable value is restored when exiting the function.\n\
 @seealso{page_screen_output, more, PAGER, PAGER_FLAGS}\n\
 @end deftypefn")
 {
   return SET_INTERNAL_VARIABLE (page_output_immediately);
 }
 
 DEFUN (page_screen_output, args, nargout,
        "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {@var{val} =} page_screen_output ()\n\
 @deftypefnx {Built-in Function} {@var{old_val} =} page_screen_output (@var{new_val})\n\
 @deftypefnx {Built-in Function} {} page_screen_output (@var{new_val}, \"local\")\n\
 Query or set the internal variable that controls whether output intended\n\
 for the terminal window that is longer than one page is sent through a\n\
-pager.  This allows you to view one screenful at a time.  Some pagers\n\
+pager.\n\
+\n\
+This allows you to view one screenful at a time.  Some pagers\n\
 (such as @code{less}---see @ref{Installation}) are also capable of moving\n\
 backward on the output.\n\
 \n\
 When called from inside a function with the @qcode{\"local\"} option, the\n\
-variable is changed locally for the function and any subroutines it calls.  \n\
+variable is changed locally for the function and any subroutines it calls.\n\
 The original variable value is restored when exiting the function.\n\
 @seealso{more, page_output_immediately, PAGER, PAGER_FLAGS}\n\
 @end deftypefn")
 {
   return SET_INTERNAL_VARIABLE (page_screen_output);
 }
 
 DEFUN (PAGER, args, nargout,
        "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {@var{val} =} PAGER ()\n\
 @deftypefnx {Built-in Function} {@var{old_val} =} PAGER (@var{new_val})\n\
 @deftypefnx {Built-in Function} {} PAGER (@var{new_val}, \"local\")\n\
 Query or set the internal variable that specifies the program to use\n\
-to display terminal output on your system.  The default value is\n\
-normally @qcode{\"less\"}, @qcode{\"more\"}, or\n\
+to display terminal output on your system.\n\
+\n\
+The default value is normally @qcode{\"less\"}, @qcode{\"more\"}, or\n\
 @qcode{\"pg\"}, depending on what programs are installed on your system.\n\
 @xref{Installation}.\n\
 \n\
 When called from inside a function with the @qcode{\"local\"} option, the\n\
-variable is changed locally for the function and any subroutines it calls.  \n\
+variable is changed locally for the function and any subroutines it calls.\n\
 The original variable value is restored when exiting the function.\n\
 @seealso{PAGER_FLAGS, page_output_immediately, more, page_screen_output}\n\
 @end deftypefn")
 {
   return SET_NONEMPTY_INTERNAL_STRING_VARIABLE (PAGER);
 }
 
 DEFUN (PAGER_FLAGS, args, nargout,
        "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {@var{val} =} PAGER_FLAGS ()\n\
 @deftypefnx {Built-in Function} {@var{old_val} =} PAGER_FLAGS (@var{new_val})\n\
 @deftypefnx {Built-in Function} {} PAGER_FLAGS (@var{new_val}, \"local\")\n\
 Query or set the internal variable that specifies the options to pass\n\
 to the pager.\n\
 \n\
 When called from inside a function with the @qcode{\"local\"} option, the\n\
-variable is changed locally for the function and any subroutines it calls.  \n\
+variable is changed locally for the function and any subroutines it calls.\n\
 The original variable value is restored when exiting the function.\n\
 @seealso{PAGER, more, page_screen_output, page_output_immediately}\n\
 @end deftypefn")
 {
   return SET_NONEMPTY_INTERNAL_STRING_VARIABLE (PAGER_FLAGS);
 }
diff --git a/libinterp/corefcn/pinv.cc b/libinterp/corefcn/pinv.cc
--- a/libinterp/corefcn/pinv.cc
+++ b/libinterp/corefcn/pinv.cc
@@ -35,18 +35,19 @@ along with Octave; see the file COPYING.
 #include "ov-flt-re-diag.h"
 #include "ov-flt-cx-diag.h"
 #include "ov-perm.h"
 
 DEFUN (pinv, args, ,
        "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {} pinv (@var{x})\n\
 @deftypefnx {Built-in Function} {} pinv (@var{x}, @var{tol})\n\
-Return the pseudoinverse of @var{x}.  Singular values less than\n\
-@var{tol} are ignored.\n\
+Return the pseudoinverse of @var{x}.\n\
+\n\
+Singular values less than @var{tol} are ignored.\n\
 \n\
 If the second argument is omitted, it is taken to be\n\
 \n\
 @example\n\
 tol = max (size (@var{x})) * sigma_max (@var{x}) * eps,\n\
 @end example\n\
 \n\
 @noindent\n\
diff --git a/libinterp/corefcn/pr-output.cc b/libinterp/corefcn/pr-output.cc
--- a/libinterp/corefcn/pr-output.cc
+++ b/libinterp/corefcn/pr-output.cc
@@ -3402,17 +3402,18 @@ octave_print_internal (std::ostream&, co
 {
   panic_impossible ();
 }
 
 DEFUN (rats, args, nargout,
        "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} rats (@var{x}, @var{len})\n\
 Convert @var{x} into a rational approximation represented as a string.\n\
-You can convert the string back into a matrix as follows:\n\
+\n\
+The string can be converted back into a matrix as follows:\n\
 \n\
 @example\n\
 @group\n\
 r = rats (hilb (4));\n\
 x = str2num (r)\n\
 @end group\n\
 @end example\n\
 \n\
@@ -3484,32 +3485,34 @@ If the length of the smallest possible r
     }
 
   return retval;
 }
 
 DEFUN (disp, args, nargout,
        "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} disp (@var{x})\n\
-Display the value of @var{x}.  For example:\n\
+Display the value of @var{x}.\n\
+\n\
+For example:\n\
 \n\
 @example\n\
 @group\n\
 disp (\"The value of pi is:\"), disp (pi)\n\
 \n\
      @print{} the value of pi is:\n\
      @print{} 3.1416\n\
 @end group\n\
 @end example\n\
 \n\
 @noindent\n\
 Note that the output from @code{disp} always ends with a newline.\n\
 \n\
-If an output value is requested, @code{disp} prints nothing and\n\
-returns the formatted output in a string.\n\
+If an output value is requested, @code{disp} prints nothing and returns the\n\
+formatted output in a string.\n\
 @seealso{fdisp}\n\
 @end deftypefn")
 {
   octave_value_list retval;
 
   int nargin = args.length ();
 
   if (nargin == 1 && nargout < 2)
@@ -3529,17 +3532,19 @@ returns the formatted output in a string
     print_usage ();
 
   return retval;
 }
 
 DEFUN (fdisp, args, ,
        "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} fdisp (@var{fid}, @var{x})\n\
-Display the value of @var{x} on the stream @var{fid}.  For example:\n\
+Display the value of @var{x} on the stream @var{fid}.\n\
+\n\
+For example:\n\
 \n\
 @example\n\
 @group\n\
 fdisp (stdout, \"The value of pi is:\"), fdisp (stdout, pi)\n\
 \n\
      @print{} the value of pi is:\n\
      @print{} 3.1416\n\
 @end group\n\
@@ -3885,20 +3890,22 @@ set_format_style (int argc, const string
 }
 
 
 DEFUN (format, args, ,
        "-*- texinfo -*-\n\
 @deftypefn  {Command} {} format\n\
 @deftypefnx {Command} {} format options\n\
 Reset or specify the format of the output produced by @code{disp} and\n\
-Octave's normal echoing mechanism.  This command only affects the display\n\
-of numbers but not how they are stored or computed.  To change the internal\n\
-representation from the default double use one of the conversion functions\n\
-such as @code{single}, @code{uint8}, @code{int64}, etc.\n\
+Octave's normal echoing mechanism.\n\
+\n\
+This command only affects the display of numbers but not how they are stored\n\
+or computed.  To change the internal representation from the default double\n\
+use one of the conversion functions such as @code{single}, @code{uint8},\n\
+@code{int64}, etc.\n\
 \n\
 By default, Octave displays 5 significant digits in a human readable form\n\
 (option @samp{short} paired with @samp{loose} format for matrices).\n\
 If @code{format} is invoked without any options, this default format\n\
 is restored.\n\
 \n\
 Valid formats for floating point numbers are listed in the following\n\
 table.\n\
@@ -4048,17 +4055,17 @@ The following two options affect the dis
 @item compact\n\
 Remove blank lines around column number labels and between\n\
 matrices producing more compact output with more data per page.\n\
 \n\
 @item loose\n\
 Insert blank lines above and below column number labels and between matrices\n\
 to produce a more readable output with less data per page.  (default).\n\
 @end table\n\
-@seealso{fixed_point_format, output_max_field_width, output_precision, split_long_rows, rats}\n\
+@seealso{fixed_point_format, output_max_field_width, output_precision, split_long_rows, print_empty_dimensions, rats}\n\
 @end deftypefn")
 {
   octave_value_list retval;
 
   int argc = args.length () + 1;
 
   string_vector argv = args.make_argv ("format");
 
@@ -4117,64 +4124,66 @@ ans =\n\
 @end example\n\
 \n\
 @noindent\n\
 Notice that the first value appears to be 0 when it is actually 1.  Because\n\
 of the possibility for confusion you should be careful about enabling\n\
 @code{fixed_point_format}.\n\
 \n\
 When called from inside a function with the @qcode{\"local\"} option, the\n\
-variable is changed locally for the function and any subroutines it calls.  \n\
+variable is changed locally for the function and any subroutines it calls.\n\
 The original variable value is restored when exiting the function.\n\
 @seealso{format, output_max_field_width, output_precision}\n\
 @end deftypefn")
 {
   return SET_INTERNAL_VARIABLE (fixed_point_format);
 }
 
 DEFUN (print_empty_dimensions, args, nargout,
        "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {@var{val} =} print_empty_dimensions ()\n\
 @deftypefnx {Built-in Function} {@var{old_val} =} print_empty_dimensions (@var{new_val})\n\
 @deftypefnx {Built-in Function} {} print_empty_dimensions (@var{new_val}, \"local\")\n\
-Query or set the internal variable that controls whether the\n\
-dimensions of empty matrices are printed along with the empty matrix\n\
-symbol, @samp{[]}.  For example, the expression\n\
+Query or set the internal variable that controls whether the dimensions of\n\
+empty matrices are printed along with the empty matrix symbol, @samp{[]}.\n\
+\n\
+For example, the expression\n\
 \n\
 @example\n\
 zeros (3, 0)\n\
 @end example\n\
 \n\
 @noindent\n\
 will print\n\
 \n\
 @example\n\
 ans = [](3x0)\n\
 @end example\n\
 \n\
 When called from inside a function with the @qcode{\"local\"} option, the\n\
-variable is changed locally for the function and any subroutines it calls.  \n\
+variable is changed locally for the function and any subroutines it calls.\n\
 The original variable value is restored when exiting the function.\n\
 @seealso{format}\n\
 @end deftypefn")
 {
   return SET_INTERNAL_VARIABLE (print_empty_dimensions);
 }
 
 DEFUN (split_long_rows, args, nargout,
        "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {@var{val} =} split_long_rows ()\n\
 @deftypefnx {Built-in Function} {@var{old_val} =} split_long_rows (@var{new_val})\n\
 @deftypefnx {Built-in Function} {} split_long_rows (@var{new_val}, \"local\")\n\
 Query or set the internal variable that controls whether rows of a matrix\n\
-may be split when displayed to a terminal window.  If the rows are split,\n\
-Octave will display the matrix in a series of smaller pieces, each of\n\
-which can fit within the limits of your terminal width and each set of\n\
-rows is labeled so that you can easily see which columns are currently\n\
-being displayed.  For example:\n\
+may be split when displayed to a terminal window.\n\
+\n\
+If the rows are split, Octave will display the matrix in a series of smaller\n\
+pieces, each of which can fit within the limits of your terminal width and\n\
+each set of rows is labeled so that you can easily see which columns are\n\
+currently being displayed.  For example:\n\
 \n\
 @example\n\
 @group\n\
 octave:13> rand (2,10)\n\
 ans =\n\
 \n\
  Columns 1 through 6:\n\
 \n\
@@ -4184,34 +4193,34 @@ ans =\n\
  Columns 7 through 10:\n\
 \n\
   0.90174  0.11854  0.72313  0.73326\n\
   0.44672  0.94303  0.56564  0.82150\n\
 @end group\n\
 @end example\n\
 \n\
 When called from inside a function with the @qcode{\"local\"} option, the\n\
-variable is changed locally for the function and any subroutines it calls.  \n\
+variable is changed locally for the function and any subroutines it calls.\n\
 The original variable value is restored when exiting the function.\n\
 @seealso{format}\n\
 @end deftypefn")
 {
   return SET_INTERNAL_VARIABLE (split_long_rows);
 }
 
 DEFUN (output_max_field_width, args, nargout,
        "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {@var{val} =} output_max_field_width ()\n\
 @deftypefnx {Built-in Function} {@var{old_val} =} output_max_field_width (@var{new_val})\n\
 @deftypefnx {Built-in Function} {} output_max_field_width (@var{new_val}, \"local\")\n\
 Query or set the internal variable that specifies the maximum width\n\
 of a numeric output field.\n\
 \n\
 When called from inside a function with the @qcode{\"local\"} option, the\n\
-variable is changed locally for the function and any subroutines it calls.  \n\
+variable is changed locally for the function and any subroutines it calls.\n\
 The original variable value is restored when exiting the function.\n\
 @seealso{format, fixed_point_format, output_precision}\n\
 @end deftypefn")
 {
   return SET_INTERNAL_VARIABLE_WITH_LIMITS (output_max_field_width, 0,
                                             std::numeric_limits<int>::max ());
 }
 
@@ -4219,16 +4228,16 @@ DEFUN (output_precision, args, nargout,
        "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {@var{val} =} output_precision ()\n\
 @deftypefnx {Built-in Function} {@var{old_val} =} output_precision (@var{new_val})\n\
 @deftypefnx {Built-in Function} {} output_precision (@var{new_val}, \"local\")\n\
 Query or set the internal variable that specifies the minimum number of\n\
 significant figures to display for numeric output.\n\
 \n\
 When called from inside a function with the @qcode{\"local\"} option, the\n\
-variable is changed locally for the function and any subroutines it calls.  \n\
+variable is changed locally for the function and any subroutines it calls.\n\
 The original variable value is restored when exiting the function.\n\
 @seealso{format, fixed_point_format, output_max_field_width}\n\
 @end deftypefn")
 {
   return SET_INTERNAL_VARIABLE_WITH_LIMITS (output_precision, -1,
                                             std::numeric_limits<int>::max ());
 }
diff --git a/libinterp/corefcn/pt-jit.cc b/libinterp/corefcn/pt-jit.cc
--- a/libinterp/corefcn/pt-jit.cc
+++ b/libinterp/corefcn/pt-jit.cc
@@ -2515,21 +2515,21 @@ jit_info::find (const vmap& extra_vars, 
 #endif
 
 DEFUN (jit_failcnt, UNUSED_WITHOUT_LLVM (args),
        UNUSED_WITHOUT_LLVM (nargout),
        "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {@var{val} =} jit_failcnt ()\n\
 @deftypefnx {Built-in Function} {@var{old_val} =} jit_failcnt (@var{new_val})\n\
 @deftypefnx {Built-in Function} {} jit_failcnt (@var{new_val}, \"local\")\n\
-Query or set the internal variable that counts the number of\n\
-JIT fail exceptions for Octave's JIT compiler.\n\
+Query or set the internal variable that counts the number of JIT fail\n\
+exceptions for Octave's JIT compiler.\n\
 \n\
 When called from inside a function with the @qcode{\"local\"} option, the\n\
-variable is changed locally for the function and any subroutines it calls.  \n\
+variable is changed locally for the function and any subroutines it calls.\n\
 The original variable value is restored when exiting the function.\n\
 @seealso{jit_enable, jit_startcnt, debug_jit}\n\
 @end deftypefn")
 {
 #if defined (HAVE_LLVM)
   return SET_INTERNAL_VARIABLE (jit_failcnt);
 #else
   warning ("jit_failcnt: JIT compiling not available in this version of Octave");
@@ -2542,17 +2542,17 @@ DEFUN (debug_jit, UNUSED_WITHOUT_LLVM (a
        "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {@var{val} =} debug_jit ()\n\
 @deftypefnx {Built-in Function} {@var{old_val} =} debug_jit (@var{new_val})\n\
 @deftypefnx {Built-in Function} {} debug_jit (@var{new_val}, \"local\")\n\
 Query or set the internal variable that determines whether\n\
 debugging/tracing is enabled for Octave's JIT compiler.\n\
 \n\
 When called from inside a function with the @qcode{\"local\"} option, the\n\
-variable is changed locally for the function and any subroutines it calls.  \n\
+variable is changed locally for the function and any subroutines it calls.\n\
 The original variable value is restored when exiting the function.\n\
 @seealso{jit_enable, jit_startcnt}\n\
 @end deftypefn")
 {
 #if defined (HAVE_LLVM)
   return SET_INTERNAL_VARIABLE (debug_jit);
 #else
   warning ("debug_jit: JIT compiling not available in this version of Octave");
@@ -2564,17 +2564,17 @@ DEFUN (jit_enable, UNUSED_WITHOUT_LLVM (
        UNUSED_WITHOUT_LLVM (nargout),
        "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {@var{val} =} jit_enable ()\n\
 @deftypefnx {Built-in Function} {@var{old_val} =} jit_enable (@var{new_val})\n\
 @deftypefnx {Built-in Function} {} jit_enable (@var{new_val}, \"local\")\n\
 Query or set the internal variable that enables Octave's JIT compiler.\n\
 \n\
 When called from inside a function with the @qcode{\"local\"} option, the\n\
-variable is changed locally for the function and any subroutines it calls.  \n\
+variable is changed locally for the function and any subroutines it calls.\n\
 The original variable value is restored when exiting the function.\n\
 @seealso{jit_startcnt, debug_jit}\n\
 @end deftypefn")
 {
 #if defined (HAVE_LLVM)
   return SET_INTERNAL_VARIABLE (jit_enable);
 #else
   warning ("jit_enable: JIT compiling not available in this version of Octave");
@@ -2584,24 +2584,26 @@ The original variable value is restored 
 
 DEFUN (jit_startcnt, UNUSED_WITHOUT_LLVM (args),
        UNUSED_WITHOUT_LLVM (nargout),
        "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {@var{val} =} jit_startcnt ()\n\
 @deftypefnx {Built-in Function} {@var{old_val} =} jit_startcnt (@var{new_val})\n\
 @deftypefnx {Built-in Function} {} jit_startcnt (@var{new_val}, \"local\")\n\
 Query or set the internal variable that determines whether JIT compilation\n\
-will take place for a specific loop.  Because compilation is a costly\n\
-operation it does not make sense to employ JIT when the loop count is low.\n\
-By default only loops with greater than 1000 iterations will be accelerated.\n\
+will take place for a specific loop.\n\
+\n\
+Because compilation is a costly operation it does not make sense to employ\n\
+JIT when the loop count is low.  By default only loops with greater than\n\
+1000 iterations will be accelerated.\n\
 \n\
 When called from inside a function with the @qcode{\"local\"} option, the\n\
-variable is changed locally for the function and any subroutines it calls.  \n\
+variable is changed locally for the function and any subroutines it calls.\n\
 The original variable value is restored when exiting the function.\n\
-@seealso{jit_enable, debug_jit}\n\
+@seealso{jit_enable, jit_failcnt, debug_jit}\n\
 @end deftypefn")
 {
 #if defined (HAVE_LLVM)
   return SET_INTERNAL_VARIABLE_WITH_LIMITS (jit_startcnt, 1,
                                             std::numeric_limits<int>::max ());
 #else
   warning ("jit_enable: JIT compiling not available in this version of Octave");
   return octave_value ();
diff --git a/libinterp/corefcn/quad.cc b/libinterp/corefcn/quad.cc
--- a/libinterp/corefcn/quad.cc
+++ b/libinterp/corefcn/quad.cc
@@ -174,43 +174,48 @@ quad_float_user_function (float x)
 
 DEFUN (quad, args, nargout,
        "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {@var{q} =} quad (@var{f}, @var{a}, @var{b})\n\
 @deftypefnx {Built-in Function} {@var{q} =} quad (@var{f}, @var{a}, @var{b}, @var{tol})\n\
 @deftypefnx {Built-in Function} {@var{q} =} quad (@var{f}, @var{a}, @var{b}, @var{tol}, @var{sing})\n\
 @deftypefnx {Built-in Function} {[@var{q}, @var{ier}, @var{nfun}, @var{err}] =} quad (@dots{})\n\
 Numerically evaluate the integral of @var{f} from @var{a} to @var{b} using\n\
-Fortran routines from @w{@sc{quadpack}}.  @var{f} is a function handle,\n\
-inline function, or a string containing the name of the function to\n\
-evaluate.  The function must have the form @code{y = f (x)} where @var{y} and\n\
-@var{x} are scalars.\n\
+Fortran routines from @w{@sc{quadpack}}.\n\
+\n\
+@var{f} is a function handle, inline function, or a string containing the\n\
+name of the function to evaluate.  The function must have the form @code{y =\n\
+f (x)} where @var{y} and @var{x} are scalars.\n\
 \n\
 @var{a} and @var{b} are the lower and upper limits of integration.  Either\n\
 or both may be infinite.\n\
 \n\
 The optional argument @var{tol} is a vector that specifies the desired\n\
 accuracy of the result.  The first element of the vector is the desired\n\
 absolute tolerance, and the second element is the desired relative\n\
 tolerance.  To choose a relative test only, set the absolute\n\
 tolerance to zero.  To choose an absolute test only, set the relative\n\
 tolerance to zero.  Both tolerances default to @code{sqrt (eps)} or\n\
 approximately @math{1.5e^{-8}}.\n\
 \n\
 The optional argument @var{sing} is a vector of values at which the\n\
 integrand is known to be singular.\n\
 \n\
-The result of the integration is returned in @var{q}.  @var{ier}\n\
-contains an integer error code (0 indicates a successful integration).\n\
+The result of the integration is returned in @var{q}.\n\
+\n\
+@var{ier} contains an integer error code (0 indicates a successful\n\
+integration).\n\
+\n\
 @var{nfun} indicates the number of function evaluations that were\n\
-made, and @var{err} contains an estimate of the error in the\n\
-solution.\n\
+made.\n\
 \n\
-The function @code{quad_options} can set other optional\n\
-parameters for @code{quad}.\n\
+@var{err} contains an estimate of the error in the solution.\n\
+\n\
+The function @code{quad_options} can set other optional parameters for\n\
+@code{quad}.\n\
 \n\
 Note: because @code{quad} is written in Fortran it cannot be called\n\
 recursively.  This prevents its use in integrating over more than one\n\
 variable by routines @code{dblquad} and @code{triplequad}.\n\
 @seealso{quad_options, quadv, quadl, quadgk, quadcc, trapz, dblquad, triplequad}\n\
 @end deftypefn")
 {
   octave_value_list retval;
diff --git a/libinterp/corefcn/quadcc.cc b/libinterp/corefcn/quadcc.cc
--- a/libinterp/corefcn/quadcc.cc
+++ b/libinterp/corefcn/quadcc.cc
@@ -1487,23 +1487,22 @@ downdate (double *c, int n, int d, int *
 
 DEFUN (quadcc, args, nargout,
        "-*- texinfo -*-\n\
 @deftypefn  {Function File} {@var{q} =} quadcc (@var{f}, @var{a}, @var{b})\n\
 @deftypefnx {Function File} {@var{q} =} quadcc (@var{f}, @var{a}, @var{b}, @var{tol})\n\
 @deftypefnx {Function File} {@var{q} =} quadcc (@var{f}, @var{a}, @var{b}, @var{tol}, @var{sing})\n\
 @deftypefnx {Function File} {[@var{q}, @var{err}, @var{nr_points}] =} quadcc (@dots{})\n\
 Numerically evaluate the integral of @var{f} from @var{a} to @var{b}\n\
-using the doubly-adaptive @nospell{Clenshaw-Curtis} quadrature described by\n\
-@nospell{P. Gonnet} in @cite{Increasing the Reliability of Adaptive\n\
-Quadrature Using Explicit Interpolants}.\n\
-@var{f} is a function handle, inline function, or string\n\
-containing the name of the function to evaluate.\n\
-The function @var{f} must be vectorized and must return a vector of output\n\
-values if given a vector of input values.  For example,\n\
+using doubly-adaptive @nospell{Clenshaw-Curtis} quadrature.\n\
+\n\
+@var{f} is a function handle, inline function, or string containing the name\n\
+of the function to evaluate.  The function @var{f} must be vectorized and\n\
+must return a vector of output values if given a vector of input values. \n\
+For example,\n\
 \n\
 @example\n\
 f = @@(x) x .* sin (1./x) .* sqrt (abs (1 - x));\n\
 @end example\n\
 \n\
 @noindent\n\
 which uses the element-by-element ``dot'' form for all operators.\n\
 \n\
@@ -1520,37 +1519,40 @@ in any of its derivatives, inside the in
 For the example above, which has a discontinuity at x=1, the call to\n\
 @code{quadcc} would be as follows\n\
 \n\
 @example\n\
 int = quadcc (f, a, b, 1.0e-6, [ 1 ]);\n\
 @end example\n\
 \n\
 The result of the integration is returned in @var{q}.\n\
-@var{err} is an estimate of the absolute integration error and\n\
+\n\
+@var{err} is an estimate of the absolute integration error.\n\
+\n\
 @var{nr_points} is the number of points at which the integrand was evaluated.\n\
-If the adaptive integration did not converge, the value of\n\
-@var{err} will be larger than the requested tolerance.  Therefore, it is\n\
-recommended to verify this value for difficult integrands.\n\
+\n\
+If the adaptive integration did not converge, the value of @var{err} will be\n\
+larger than the requested tolerance.  Therefore, it is recommended to verify\n\
+this value for difficult integrands.\n\
 \n\
-@code{quadcc} is capable of dealing with non-numeric\n\
-values of the integrand such as @code{NaN} or @code{Inf}.\n\
-If the integral diverges, and @code{quadcc} detects this,\n\
-then a warning is issued and @code{Inf} or @code{-Inf} is returned.\n\
+@code{quadcc} is capable of dealing with non-numeric values of the integrand\n\
+such as @code{NaN} or @code{Inf}.  If the integral diverges, and\n\
+@code{quadcc} detects this, then a warning is issued and @code{Inf} or\n\
+@code{-Inf} is returned.\n\
 \n\
-Note: @code{quadcc} is a general purpose quadrature algorithm\n\
-and, as such, may be less efficient for a smooth or otherwise\n\
-well-behaved integrand than other methods such as @code{quadgk}.\n\
+Note: @code{quadcc} is a general purpose quadrature algorithm and, as such,\n\
+may be less efficient for a smooth or otherwise well-behaved integrand than\n\
+other methods such as @code{quadgk}.\n\
 \n\
 The algorithm uses @nospell{Clenshaw-Curtis} quadrature rules of increasing\n\
-degree in each interval and bisects the interval if either the\n\
-function does not appear to be smooth or a rule of maximum\n\
-degree has been reached.  The error estimate is computed from the\n\
-L2-norm of the difference between two successive interpolations\n\
-of the integrand over the nodes of the respective quadrature rules.\n\
+degree in each interval and bisects the interval if either the function does\n\
+not appear to be smooth or a rule of maximum degree has been reached.  The\n\
+error estimate is computed from the L2-norm of the difference between two\n\
+successive interpolations of the integrand over the nodes of the respective\n\
+quadrature rules.\n\
 \n\
 Reference: @nospell{P. Gonnet}, @cite{Increasing the Reliability of Adaptive\n\
 Quadrature Using Explicit Interpolants}, ACM Transactions on\n\
 Mathematical Software, Vol. 37, Issue 3, Article No. 3, 2010.\n\
 @seealso{quad, quadv, quadl, quadgk, trapz, dblquad, triplequad}\n\
 @end deftypefn")
 {
   octave_value_list retval;
diff --git a/libinterp/corefcn/qz.cc b/libinterp/corefcn/qz.cc
--- a/libinterp/corefcn/qz.cc
+++ b/libinterp/corefcn/qz.cc
@@ -291,33 +291,35 @@ fout (const octave_idx_type& lsize, cons
 
 //FIXME: Matlab does not produce lambda as the first output argument.
 //       Compatibility problem?
 DEFUN (qz, args, nargout,
        "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {@var{lambda} =} qz (@var{A}, @var{B})\n\
 @deftypefnx {Built-in Function} {@var{lambda} =} qz (@var{A}, @var{B}, @var{opt})\n\
 QZ@tie{}decomposition of the generalized eigenvalue problem\n\
-(@math{A x = s B x}).  There are three ways to call this function:\n\
+(@math{A x = s B x}).\n\
+\n\
+There are three ways to call this function:\n\
 @enumerate\n\
 @item @code{@var{lambda} = qz (@var{A}, @var{B})}\n\
 \n\
 Computes the generalized eigenvalues\n\
 @tex\n\
 $\\lambda$\n\
 @end tex\n\
 @ifnottex\n\
 @var{lambda}\n\
 @end ifnottex\n\
 of @math{(A - s B)}.\n\
 \n\
 @item @code{[AA, BB, Q, Z, V, W, @var{lambda}] = qz (@var{A}, @var{B})}\n\
 \n\
-Computes QZ@tie{}decomposition, generalized eigenvectors, and\n\
-generalized eigenvalues of @math{(A - s B)}\n\
+Computes QZ@tie{}decomposition, generalized eigenvectors, and generalized\n\
+eigenvalues of @math{(A - s B)}\n\
 @tex\n\
 $$ AV = BV{ \\rm diag }(\\lambda) $$\n\
 $$ W^T A = { \\rm diag }(\\lambda)W^T B $$\n\
 $$ AA = Q^T AZ, BB = Q^T BZ $$\n\
 @end tex\n\
 @ifnottex\n\
 \n\
 @example\n\
@@ -330,26 +332,25 @@ AA = Q * A * Z, BB = Q * B * Z\n\
 @end group\n\
 @end example\n\
 \n\
 @end ifnottex\n\
 with @var{Q} and @var{Z} orthogonal (unitary)= @var{I}\n\
 \n\
 @item @code{[AA,BB,Z@{, @var{lambda}@}] = qz (@var{A}, @var{B}, @var{opt})}\n\
 \n\
-As in form [2], but allows ordering of generalized eigenpairs\n\
-for (e.g.) solution of discrete time algebraic Riccati equations.\n\
-Form 3 is not available for complex matrices, and does not compute\n\
-the generalized eigenvectors @var{V}, @var{W}, nor the orthogonal matrix\n\
-@var{Q}.\n\
+As in form [2], but allows ordering of generalized eigenpairs for, e.g.,\n\
+solution of discrete time algebraic Riccati equations.  Form 3 is not\n\
+available for complex matrices, and does not compute the generalized\n\
+eigenvectors @var{V}, @var{W}, nor the orthogonal matrix @var{Q}.\n\
 \n\
 @table @var\n\
 @item opt\n\
-for ordering eigenvalues of the @nospell{GEP} pencil.  The leading block\n\
-of the revised pencil contains all eigenvalues that satisfy:\n\
+for ordering eigenvalues of the @nospell{GEP} pencil.  The leading block of\n\
+the revised pencil contains all eigenvalues that satisfy:\n\
 \n\
 @table @asis\n\
 @item @qcode{\"N\"}\n\
 = unordered (default)\n\
 \n\
 @item @qcode{\"S\"}\n\
 = small: leading block has all |lambda| @leq{} 1\n\
 \n\
diff --git a/libinterp/corefcn/rand.cc b/libinterp/corefcn/rand.cc
--- a/libinterp/corefcn/rand.cc
+++ b/libinterp/corefcn/rand.cc
@@ -372,86 +372,84 @@ DEFUN (rand, args, ,
 @deftypefnx {Built-in Function} {} rand (\"state\", @var{v})\n\
 @deftypefnx {Built-in Function} {} rand (\"state\", \"reset\")\n\
 @deftypefnx {Built-in Function} {@var{v} =} rand (\"seed\")\n\
 @deftypefnx {Built-in Function} {} rand (\"seed\", @var{v})\n\
 @deftypefnx {Built-in Function} {} rand (\"seed\", \"reset\")\n\
 @deftypefnx {Built-in Function} {} rand (@dots{}, \"single\")\n\
 @deftypefnx {Built-in Function} {} rand (@dots{}, \"double\")\n\
 Return a matrix with random elements uniformly distributed on the\n\
-interval (0, 1).  The arguments are handled the same as the arguments\n\
-for @code{eye}.\n\
+interval (0, 1).\n\
 \n\
-You can query the state of the random number generator using the\n\
-form\n\
+The arguments are handled the same as the arguments for @code{eye}.\n\
+\n\
+You can query the state of the random number generator using the form\n\
 \n\
 @example\n\
 v = rand (\"state\")\n\
 @end example\n\
 \n\
-This returns a column vector @var{v} of length 625.  Later, you can\n\
-restore the random number generator to the state @var{v}\n\
-using the form\n\
+This returns a column vector @var{v} of length 625.  Later, you can restore\n\
+the random number generator to the state @var{v} using the form\n\
 \n\
 @example\n\
 rand (\"state\", v)\n\
 @end example\n\
 \n\
 @noindent\n\
-You may also initialize the state vector from an arbitrary vector of\n\
-length @leq{} 625 for @var{v}.  This new state will be a hash based on the\n\
-value of @var{v}, not @var{v} itself.\n\
+You may also initialize the state vector from an arbitrary vector of length\n\
+@leq{} 625 for @var{v}.  This new state will be a hash based on the value of\n\
+@var{v}, not @var{v} itself.\n\
 \n\
 By default, the generator is initialized from @code{/dev/urandom} if it is\n\
 available, otherwise from CPU time, wall clock time, and the current\n\
 fraction of a second.  Note that this differs from @sc{matlab}, which\n\
 always initializes the state to the same state at startup.  To obtain\n\
 behavior comparable to @sc{matlab}, initialize with a deterministic state\n\
 vector in Octave's startup files (@pxref{Startup Files}).\n\
 \n\
 To compute the pseudo-random sequence, @code{rand} uses the Mersenne\n\
-Twister with a period of @math{2^{19937}-1} (See\n\
-@nospell{M. Matsumoto and T. Nishimura},\n\
+Twister with a period of @math{2^{19937}-1}\n\
+(See @nospell{M. Matsumoto and T. Nishimura},\n\
 @cite{Mersenne Twister: A 623-dimensionally equidistributed uniform\n\
-pseudorandom number generator}, ACM Trans. on\n\
-Modeling and Computer Simulation Vol. 8, No. 1, pp. 3-30, January 1998,\n\
+pseudorandom number generator},\n\
+ACM Trans. on Modeling and Computer Simulation Vol. 8, No. 1, pp. 3--30,\n\
+January 1998,\n\
 @url{http://www.math.sci.hiroshima-u.ac.jp/~m-mat/MT/emt.html}).\n\
-Do @strong{not} use for cryptography without securely hashing\n\
-several returned values together, otherwise the generator state\n\
-can be learned after reading 624 consecutive values.\n\
+Do @strong{not} use for cryptography without securely hashing several\n\
+returned values together, otherwise the generator state can be learned after\n\
+reading 624 consecutive values.\n\
 \n\
 Older versions of Octave used a different random number generator.\n\
-The new generator is used by default\n\
-as it is significantly faster than the old generator, and produces\n\
-random numbers with a significantly longer cycle time.  However, in\n\
-some circumstances it might be desirable to obtain the same random\n\
-sequences as used by the old generators.  To do this the keyword\n\
-@qcode{\"seed\"} is used to specify that the old generators should be use,\n\
-as in\n\
+The new generator is used by default as it is significantly faster than the\n\
+old generator, and produces random numbers with a significantly longer cycle\n\
+time.  However, in some circumstances it might be desirable to obtain the\n\
+same random sequences as produced by the old generators.  To do this the\n\
+keyword @qcode{\"seed\"} is used to specify that the old generators should\n\
+be used, as in\n\
 \n\
 @example\n\
 rand (\"seed\", val)\n\
 @end example\n\
 \n\
 @noindent\n\
 which sets the seed of the generator to @var{val}.  The seed of the\n\
 generator can be queried with\n\
 \n\
 @example\n\
 s = rand (\"seed\")\n\
 @end example\n\
 \n\
 However, it should be noted that querying the seed will not cause\n\
-@code{rand} to use the old generators, only setting the seed will.\n\
-To cause @code{rand} to once again use the new generators, the\n\
-keyword @qcode{\"state\"} should be used to reset the state of the\n\
-@code{rand}.\n\
+@code{rand} to use the old generators, only setting the seed will.  To cause\n\
+@code{rand} to once again use the new generators, the keyword\n\
+@qcode{\"state\"} should be used to reset the state of the @code{rand}.\n\
 \n\
-The state or seed of the generator can be reset to a new random value\n\
-using the @qcode{\"reset\"} keyword.\n\
+The state or seed of the generator can be reset to a new random value using\n\
+the @qcode{\"reset\"} keyword.\n\
 \n\
 The class of the value returned can be controlled by a trailing\n\
 @qcode{\"double\"} or @qcode{\"single\"} argument.  These are the only valid\n\
 classes.\n\
 @seealso{randn, rande, randg, randp}\n\
 @end deftypefn")
 {
   octave_value retval;
@@ -558,19 +556,20 @@ DEFUN (randn, args, ,
 @deftypefnx {Built-in Function} {@var{v} =} randn (\"state\")\n\
 @deftypefnx {Built-in Function} {} randn (\"state\", @var{v})\n\
 @deftypefnx {Built-in Function} {} randn (\"state\", \"reset\")\n\
 @deftypefnx {Built-in Function} {@var{v} =} randn (\"seed\")\n\
 @deftypefnx {Built-in Function} {} randn (\"seed\", @var{v})\n\
 @deftypefnx {Built-in Function} {} randn (\"seed\", \"reset\")\n\
 @deftypefnx {Built-in Function} {} randn (@dots{}, \"single\")\n\
 @deftypefnx {Built-in Function} {} randn (@dots{}, \"double\")\n\
-Return a matrix with normally distributed random\n\
-elements having zero mean and variance one.  The arguments are\n\
-handled the same as the arguments for @code{rand}.\n\
+Return a matrix with normally distributed random elements having zero mean\n\
+and variance one.\n\
+\n\
+The arguments are handled the same as the arguments for @code{rand}.\n\
 \n\
 By default, @code{randn} uses the @nospell{Marsaglia and Tsang}\n\
 ``Ziggurat technique'' to transform from a uniform to a normal distribution.\n\
 \n\
 The class of the value returned can be controlled by a trailing\n\
 @qcode{\"double\"} or @qcode{\"single\"} argument.  These are the only valid\n\
 classes.\n\
 \n\
@@ -630,18 +629,19 @@ DEFUN (rande, args, ,
 @deftypefnx {Built-in Function} {@var{v} =} rande (\"state\")\n\
 @deftypefnx {Built-in Function} {} rande (\"state\", @var{v})\n\
 @deftypefnx {Built-in Function} {} rande (\"state\", \"reset\")\n\
 @deftypefnx {Built-in Function} {@var{v} =} rande (\"seed\")\n\
 @deftypefnx {Built-in Function} {} rande (\"seed\", @var{v})\n\
 @deftypefnx {Built-in Function} {} rande (\"seed\", \"reset\")\n\
 @deftypefnx {Built-in Function} {} rande (@dots{}, \"single\")\n\
 @deftypefnx {Built-in Function} {} rande (@dots{}, \"double\")\n\
-Return a matrix with exponentially distributed random elements.  The\n\
-arguments are handled the same as the arguments for @code{rand}.\n\
+Return a matrix with exponentially distributed random elements.\n\
+\n\
+The arguments are handled the same as the arguments for @code{rand}.\n\
 \n\
 By default, @code{randn} uses the @nospell{Marsaglia and Tsang}\n\
 ``Ziggurat technique'' to transform from a uniform to a normal distribution.\n\
 \n\
 The class of the value returned can be controlled by a trailing\n\
 @qcode{\"double\"} or @qcode{\"single\"} argument.  These are the only valid\n\
 classes.\n\
 \n\
@@ -704,18 +704,19 @@ DEFUN (randg, args, ,
 @deftypefnx {Built-in Function} {} randg (\"state\", @var{v})\n\
 @deftypefnx {Built-in Function} {} randg (\"state\", \"reset\")\n\
 @deftypefnx {Built-in Function} {@var{v} =} randg (\"seed\")\n\
 @deftypefnx {Built-in Function} {} randg (\"seed\", @var{v})\n\
 @deftypefnx {Built-in Function} {} randg (\"seed\", \"reset\")\n\
 @deftypefnx {Built-in Function} {} randg (@dots{}, \"single\")\n\
 @deftypefnx {Built-in Function} {} randg (@dots{}, \"double\")\n\
 Return a matrix with @code{gamma (@var{a},1)} distributed random elements.\n\
-The arguments are handled the same as the arguments for @code{rand},\n\
-except for the argument @var{a}.\n\
+\n\
+The arguments are handled the same as the arguments for @code{rand}, except\n\
+for the argument @var{a}.\n\
 \n\
 This can be used to generate many distributions:\n\
 \n\
 @table @asis\n\
 @item @code{gamma (a, b)} for @code{a > -1}, @code{b > 0}\n\
 \n\
 @example\n\
 r = b * randg (a)\n\
@@ -981,22 +982,23 @@ DEFUN (randp, args, ,
 @deftypefnx {Built-in Function} {} randp (\"state\", @var{v})\n\
 @deftypefnx {Built-in Function} {} randp (\"state\", \"reset\")\n\
 @deftypefnx {Built-in Function} {@var{v} =} randp (\"seed\")\n\
 @deftypefnx {Built-in Function} {} randp (\"seed\", @var{v})\n\
 @deftypefnx {Built-in Function} {} randp (\"seed\", \"reset\")\n\
 @deftypefnx {Built-in Function} {} randp (@dots{}, \"single\")\n\
 @deftypefnx {Built-in Function} {} randp (@dots{}, \"double\")\n\
 Return a matrix with Poisson distributed random elements with mean value\n\
-parameter given by the first argument, @var{l}.  The arguments\n\
-are handled the same as the arguments for @code{rand}, except for the\n\
-argument @var{l}.\n\
+parameter given by the first argument, @var{l}.\n\
 \n\
-Five different algorithms are used depending on the range of @var{l}\n\
-and whether or not @var{l} is a scalar or a matrix.\n\
+The arguments are handled the same as the arguments for @code{rand}, except\n\
+for the argument @var{l}.\n\
+\n\
+Five different algorithms are used depending on the range of @var{l} and\n\
+whether or not @var{l} is a scalar or a matrix.\n\
 \n\
 @table @asis\n\
 @item For scalar @var{l} @leq{} 12, use direct method.\n\
 W.H. Press, et al., @cite{Numerical Recipes in C},\n\
 Cambridge University Press, 1992.\n\
 \n\
 @item For scalar @var{l} > 12, use rejection method.[1]\n\
 W.H. Press, et al., @cite{Numerical Recipes in C},\n\
@@ -1120,21 +1122,24 @@ classes.\n\
 %! endif
 */
 
 DEFUN (randperm, args, ,
        "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {} randperm (@var{n})\n\
 @deftypefnx {Built-in Function} {} randperm (@var{n}, @var{m})\n\
 Return a row vector containing a random permutation of @code{1:@var{n}}.\n\
+\n\
 If @var{m} is supplied, return @var{m} unique entries, sampled without\n\
-replacement from @code{1:@var{n}}.  The complexity is O(@var{n}) in\n\
-memory and O(@var{m}) in time, unless @var{m} < @var{n}/5, in which case\n\
-O(@var{m}) memory is used as well.  The randomization is performed using\n\
-rand().  All permutations are equally likely.\n\
+replacement from @code{1:@var{n}}.\n\
+\n\
+The complexity is O(@var{n}) in memory and O(@var{m}) in time, unless\n\
+@var{m} < @var{n}/5, in which case O(@var{m}) memory is used as well.  The\n\
+randomization is performed using rand().  All permutations are equally\n\
+likely.\n\
 @seealso{perms}\n\
 @end deftypefn")
 {
 
 #ifdef USE_UNORDERED_MAP_WITH_TR1
 using std::tr1::unordered_map;
 #else
 using std::unordered_map;
diff --git a/libinterp/corefcn/rcond.cc b/libinterp/corefcn/rcond.cc
--- a/libinterp/corefcn/rcond.cc
+++ b/libinterp/corefcn/rcond.cc
@@ -29,18 +29,20 @@ along with Octave; see the file COPYING.
 #include "gripes.h"
 #include "oct-obj.h"
 #include "utils.h"
 
 DEFUN (rcond, args, ,
        "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {@var{c} =} rcond (@var{A})\n\
 Compute the 1-norm estimate of the reciprocal condition number as returned\n\
-by @sc{lapack}.  If the matrix is well-conditioned then @var{c} will be near\n\
-1 and if the matrix is poorly conditioned it will be close to zero.\n\
+by @sc{lapack}.\n\
+\n\
+If the matrix is well-conditioned then @var{c} will be near 1 and if the\n\
+matrix is poorly conditioned it will be close to 0.\n\
 \n\
 The matrix @var{A} must not be sparse.  If the matrix is sparse then\n\
 @code{condest (@var{A})} or @code{rcond (full (@var{A}))} should be used\n\
 instead.\n\
 @seealso{cond, condest}\n\
 @end deftypefn")
 {
   octave_value retval;
diff --git a/libinterp/corefcn/regexp.cc b/libinterp/corefcn/regexp.cc
--- a/libinterp/corefcn/regexp.cc
+++ b/libinterp/corefcn/regexp.cc
@@ -584,19 +584,20 @@ octcellregexp (const octave_value_list &
   return retval;
 
 }
 
 DEFUN (regexp, args, nargout,
        "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {[@var{s}, @var{e}, @var{te}, @var{m}, @var{t}, @var{nm}, @var{sp}] =} regexp (@var{str}, @var{pat})\n\
 @deftypefnx {Built-in Function} {[@dots{}] =} regexp (@var{str}, @var{pat}, \"@var{opt1}\", @dots{})\n\
-Regular expression string matching.  Search for @var{pat} in @var{str} and\n\
-return the positions and substrings of any matches, or empty values if there\n\
-are none.\n\
+Regular expression string matching.\n\
+\n\
+Search for @var{pat} in @var{str} and return the positions and substrings of\n\
+any matches, or empty values if there are none.\n\
 \n\
 The matched pattern @var{pat} can include any of the standard regex\n\
 operators, including:\n\
 \n\
 @table @code\n\
 @item .\n\
 Match any character\n\
 \n\
@@ -624,19 +625,18 @@ Match between @var{m} and @var{n} times\
 @end table\n\
 \n\
 @item [@dots{}] [^@dots{}]\n\
 \n\
 List operators.  The pattern will match any character listed between \"[\"\n\
 and \"]\".  If the first character is \"^\" then the pattern is inverted and\n\
 any character except those listed between brackets will match.\n\
 \n\
-Escape sequences defined below can also be used inside list\n\
-operators.  For example, a template for a floating point number might be\n\
-@code{[-+.\\d]+}.\n\
+Escape sequences defined below can also be used inside list operators.  For\n\
+example, a template for a floating point number might be @code{[-+.\\d]+}.\n\
 \n\
 @item () (?:)\n\
 Grouping operator.  The first form, parentheses only, also creates a token.\n\
 \n\
 @item |\n\
 Alternation operator.  Match one of a choice of regular expressions.  The\n\
 alternatives must be delimited by the grouping operator @code{()} above.\n\
 \n\
@@ -1067,20 +1067,21 @@ are zero or more @qcode{'b'} characters 
 %!assert (regexp ("\n", "\n"), 1);
 */
 
 DEFUN (regexpi, args, nargout,
        "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {[@var{s}, @var{e}, @var{te}, @var{m}, @var{t}, @var{nm}, @var{sp}] =} regexpi (@var{str}, @var{pat})\n\
 @deftypefnx {Built-in Function} {[@dots{}] =} regexpi (@var{str}, @var{pat}, \"@var{opt1}\", @dots{})\n\
 \n\
-Case insensitive regular expression string matching.  Search for @var{pat} in\n\
-@var{str} and return the positions and substrings of any matches, or empty\n\
-values if there are none.  @xref{XREFregexp,,regexp}, for details on the\n\
-syntax of the search pattern.\n\
+Case insensitive regular expression string matching.\n\
+\n\
+Search for @var{pat} in @var{str} and return the positions and substrings of\n\
+any matches, or empty values if there are none.  @xref{XREFregexp,,regexp},\n\
+for details on the syntax of the search pattern.\n\
 @seealso{regexp}\n\
 @end deftypefn")
 {
   octave_value_list retval;
 
   int nargin = args.length ();
 
   if (nargin < 2)
@@ -1283,18 +1284,18 @@ DEFUN (regexprep, args, ,
        "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {@var{outstr} =} regexprep (@var{string}, @var{pat}, @var{repstr})\n\
 @deftypefnx {Built-in Function} {@var{outstr} =} regexprep (@var{string}, @var{pat}, @var{repstr}, \"@var{opt1}\", @dots{})\n\
 Replace occurrences of pattern @var{pat} in @var{string} with @var{repstr}.\n\
 \n\
 The pattern is a regular expression as documented for @code{regexp}.\n\
 @xref{XREFregexp,,regexp}.\n\
 \n\
-The replacement string may contain @code{$i}, which substitutes\n\
-for the ith set of parentheses in the match string.  For example,\n\
+The replacement string may contain @code{$i}, which substitutes for the ith\n\
+set of parentheses in the match string.  For example,\n\
 \n\
 @example\n\
 regexprep (\"Bill Dunn\", '(\\w+) (\\w+)', '$2, $1')\n\
 @end example\n\
 \n\
 @noindent\n\
 returns \"Dunn, Bill\"\n\
 \n\
diff --git a/libinterp/corefcn/schur.cc b/libinterp/corefcn/schur.cc
--- a/libinterp/corefcn/schur.cc
+++ b/libinterp/corefcn/schur.cc
@@ -60,17 +60,19 @@ mark_upper_triangular (const Matrix& a)
 DEFUN (schur, args, nargout,
        "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {@var{S} =} schur (@var{A})\n\
 @deftypefnx {Built-in Function} {@var{S} =} schur (@var{A}, \"real\")\n\
 @deftypefnx {Built-in Function} {@var{S} =} schur (@var{A}, \"complex\")\n\
 @deftypefnx {Built-in Function} {@var{S} =} schur (@var{A}, @var{opt})\n\
 @deftypefnx {Built-in Function} {[@var{U}, @var{S}] =} schur (@dots{})\n\
 @cindex Schur decomposition\n\
-Compute the Schur@tie{}decomposition of @var{A}\n\
+Compute the Schur@tie{}decomposition of @var{A}.\n\
+\n\
+The Schur@tie{}decomposition is defined as\n\
 @tex\n\
 $$\n\
  S = U^T A U\n\
 $$\n\
 @end tex\n\
 @ifnottex\n\
 \n\
 @example\n\
@@ -81,20 +83,20 @@ Compute the Schur@tie{}decomposition of 
 where @var{U} is a unitary matrix\n\
 @tex\n\
 ($U^T U$ is identity)\n\
 @end tex\n\
 @ifnottex\n\
 (@code{@var{U}'* @var{U}} is identity)\n\
 @end ifnottex\n\
 and @var{S} is upper triangular.  The eigenvalues of @var{A} (and @var{S})\n\
-are the diagonal elements of @var{S}.  If the matrix @var{A}\n\
-is real, then the real Schur@tie{}decomposition is computed, in which the\n\
-matrix @var{U} is orthogonal and @var{S} is block upper triangular\n\
-with blocks of size at most\n\
+are the diagonal elements of @var{S}.  If the matrix @var{A} is real, then\n\
+the real Schur@tie{}decomposition is computed, in which the matrix @var{U}\n\
+is orthogonal and @var{S} is block upper triangular with blocks of size at\n\
+most\n\
 @tex\n\
 $2 \\times 2$\n\
 @end tex\n\
 @ifnottex\n\
 @code{2 x 2}\n\
 @end ifnottex\n\
 along the diagonal.  The diagonal elements of @var{S}\n\
 (or the eigenvalues of the\n\
@@ -105,30 +107,29 @@ along the diagonal.  The diagonal elemen
 @code{2 x 2}\n\
 @end ifnottex\n\
 blocks, when appropriate) are the eigenvalues of @var{A} and @var{S}.\n\
 \n\
 The default for real matrices is a real Schur@tie{}decomposition.\n\
 A complex decomposition may be forced by passing the flag\n\
 @qcode{\"complex\"}.\n\
 \n\
-The eigenvalues are optionally ordered along the diagonal according to\n\
-the value of @var{opt}.  @code{@var{opt} = \"a\"} indicates that all\n\
-eigenvalues with negative real parts should be moved to the leading\n\
-block of @var{S}\n\
-(used in @code{are}), @code{@var{opt} = \"d\"} indicates that all eigenvalues\n\
-with magnitude less than one should be moved to the leading block of @var{S}\n\
-(used in @code{dare}), and @code{@var{opt} = \"u\"}, the default, indicates\n\
-that no ordering of eigenvalues should occur.  The leading @var{k}\n\
-columns of @var{U} always span the @var{A}-invariant\n\
+The eigenvalues are optionally ordered along the diagonal according to the\n\
+value of @var{opt}.  @code{@var{opt} = \"a\"} indicates that all eigenvalues\n\
+with negative real parts should be moved to the leading block of @var{S}\n\
+(used in @code{are}), @code{@var{opt} = \"d\"} indicates that all\n\
+eigenvalues with magnitude less than one should be moved to the leading\n\
+block of @var{S} (used in @code{dare}), and @code{@var{opt} = \"u\"}, the\n\
+default, indicates that no ordering of eigenvalues should occur.  The\n\
+leading @var{k} columns of @var{U} always span the @var{A}-invariant\n\
 subspace corresponding to the @var{k} leading eigenvalues of @var{S}.\n\
 \n\
-The Schur@tie{}decomposition is used to compute eigenvalues of a\n\
-square matrix, and has applications in the solution of algebraic\n\
-Riccati equations in control (see @code{are} and @code{dare}).\n\
+The Schur@tie{}decomposition is used to compute eigenvalues of a square\n\
+matrix, and has applications in the solution of algebraic Riccati equations\n\
+in control (see @code{are} and @code{dare}).\n\
 @seealso{rsf2csf, ordschur, lu, chol, hess, qr, qz, svd}\n\
 @end deftypefn")
 {
   octave_value_list retval;
 
   int nargin = args.length ();
 
   if (nargin < 1 || nargin > 2 || nargout > 2)
diff --git a/libinterp/corefcn/sighandlers.cc b/libinterp/corefcn/sighandlers.cc
--- a/libinterp/corefcn/sighandlers.cc
+++ b/libinterp/corefcn/sighandlers.cc
@@ -1075,21 +1075,23 @@ Return a structure containing Unix signa
 
 DEFUN (debug_on_interrupt, args, nargout,
        "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {@var{val} =} debug_on_interrupt ()\n\
 @deftypefnx {Built-in Function} {@var{old_val} =} debug_on_interrupt (@var{new_val})\n\
 @deftypefnx {Built-in Function} {} debug_on_interrupt (@var{new_val}, \"local\")\n\
 Query or set the internal variable that controls whether Octave will try\n\
 to enter debugging mode when it receives an interrupt signal (typically\n\
-generated with @kbd{C-c}).  If a second interrupt signal is received\n\
-before reaching the debugging mode, a normal interrupt will occur.\n\
+generated with @kbd{C-c}).\n\
+\n\
+If a second interrupt signal is received before reaching the debugging mode,\n\
+a normal interrupt will occur.\n\
 \n\
 When called from inside a function with the @qcode{\"local\"} option, the\n\
-variable is changed locally for the function and any subroutines it calls.  \n\
+variable is changed locally for the function and any subroutines it calls.\n\
 The original variable value is restored when exiting the function.\n\
 @seealso{debug_on_error, debug_on_warning}\n\
 @end deftypefn")
 {
   return SET_INTERNAL_VARIABLE (debug_on_interrupt);
 }
 
 /*
@@ -1109,17 +1111,17 @@ DEFUN (sighup_dumps_octave_core, args, n
 @deftypefn  {Built-in Function} {@var{val} =} sighup_dumps_octave_core ()\n\
 @deftypefnx {Built-in Function} {@var{old_val} =} sighup_dumps_octave_core (@var{new_val})\n\
 @deftypefnx {Built-in Function} {} sighup_dumps_octave_core (@var{new_val}, \"local\")\n\
 Query or set the internal variable that controls whether Octave tries\n\
 to save all current variables to the file @file{octave-workspace} if it\n\
 receives a hangup signal.\n\
 \n\
 When called from inside a function with the @qcode{\"local\"} option, the\n\
-variable is changed locally for the function and any subroutines it calls.  \n\
+variable is changed locally for the function and any subroutines it calls.\n\
 The original variable value is restored when exiting the function.\n\
 @end deftypefn")
 {
   return SET_INTERNAL_VARIABLE (sighup_dumps_octave_core);
 }
 
 /*
 %!test
@@ -1138,17 +1140,17 @@ DEFUN (sigterm_dumps_octave_core, args, 
 @deftypefn  {Built-in Function} {@var{val} =} sigterm_dumps_octave_core ()\n\
 @deftypefnx {Built-in Function} {@var{old_val} =} sigterm_dumps_octave_core (@var{new_val})\n\
 @deftypefnx {Built-in Function} {} sigterm_dumps_octave_core (@var{new_val}, \"local\")\n\
 Query or set the internal variable that controls whether Octave tries\n\
 to save all current variables to the file @file{octave-workspace} if it\n\
 receives a terminate signal.\n\
 \n\
 When called from inside a function with the @qcode{\"local\"} option, the\n\
-variable is changed locally for the function and any subroutines it calls.  \n\
+variable is changed locally for the function and any subroutines it calls.\n\
 The original variable value is restored when exiting the function.\n\
 @end deftypefn")
 {
   return SET_INTERNAL_VARIABLE (sigterm_dumps_octave_core);
 }
 
 /*
 %!test
diff --git a/libinterp/corefcn/sparse.cc b/libinterp/corefcn/sparse.cc
--- a/libinterp/corefcn/sparse.cc
+++ b/libinterp/corefcn/sparse.cc
@@ -60,17 +60,17 @@ Return true if @var{x} is a sparse matri
 DEFUN (sparse, args, ,
        "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {@var{s} =} sparse (@var{a})\n\
 @deftypefnx {Built-in Function} {@var{s} =} sparse (@var{i}, @var{j}, @var{sv}, @var{m}, @var{n})\n\
 @deftypefnx {Built-in Function} {@var{s} =} sparse (@var{i}, @var{j}, @var{sv})\n\
 @deftypefnx {Built-in Function} {@var{s} =} sparse (@var{m}, @var{n})\n\
 @deftypefnx {Built-in Function} {@var{s} =} sparse (@var{i}, @var{j}, @var{s}, @var{m}, @var{n}, \"unique\")\n\
 @deftypefnx {Built-in Function} {@var{s} =} sparse (@var{i}, @var{j}, @var{sv}, @var{m}, @var{n}, @var{nzmax})\n\
-Create a sparse matrix from a full matrix or row, column, value triplets.\n\
+Create a sparse matrix from a full matrix, or row, column, value triplets.\n\
 \n\
 If @var{a} is a full matrix, convert it to a sparse matrix representation,\n\
 removing all zero values in the process.\n\
 \n\
 Given the integer index vectors @var{i} and @var{j}, and a 1-by-@code{nnz}\n\
 vector of real or complex values @var{sv}, construct the sparse matrix\n\
 @code{S(@var{i}(@var{k}),@var{j}(@var{k})) = @var{sv}(@var{k})} with overall\n\
 dimensions @var{m} and @var{n}.  If any of @var{sv}, @var{i} or @var{j} are\n\
@@ -96,31 +96,31 @@ The argument @code{nzmax} is ignored but
 @sc{matlab}.\n\
 \n\
 Example 1 (sum at repeated indices):\n\
 \n\
 @example\n\
 @group\n\
 @var{i} = [1 1 2]; @var{j} = [1 1 2]; @var{sv} = [3 4 5];\n\
 sparse (@var{i}, @var{j}, @var{sv}, 3, 4)\n\
-@result{} \n\
+@result{}\n\
 Compressed Column Sparse (rows = 3, cols = 4, nnz = 2 [17%])\n\
 \n\
   (1, 1) ->  7\n\
   (2, 2) ->  5\n\
 @end group\n\
 @end example\n\
 \n\
 Example 2 (\"unique\" option):\n\
 \n\
 @example\n\
 @group\n\
 @var{i} = [1 1 2]; @var{j} = [1 1 2]; @var{sv} = [3 4 5];\n\
 sparse (@var{i}, @var{j}, @var{sv}, 3, 4, \"unique\")\n\
-@result{} \n\
+@result{}\n\
 Compressed Column Sparse (rows = 3, cols = 4, nnz = 2 [17%])\n\
 \n\
   (1, 1) ->  4\n\
   (2, 2) ->  5\n\
 @end group\n\
 @end example\n\
 @seealso{full, accumarray, spalloc, spdiags, speye, spones, sprand, sprandn, sprandsym, spconvert, spfun}\n\
 @end deftypefn")
diff --git a/libinterp/corefcn/spparms.cc b/libinterp/corefcn/spparms.cc
--- a/libinterp/corefcn/spparms.cc
+++ b/libinterp/corefcn/spparms.cc
@@ -39,20 +39,22 @@ DEFUN (spparms, args, nargout,
 @deftypefnx {Built-in Function} {@var{vals} =} spparms ()\n\
 @deftypefnx {Built-in Function} {[@var{keys}, @var{vals}] =} spparms ()\n\
 @deftypefnx {Built-in Function} {@var{val} =} spparms (@var{key})\n\
 @deftypefnx {Built-in Function} { } spparms (@var{vals})\n\
 @deftypefnx {Built-in Function} { } spparms (\"default\")\n\
 @deftypefnx {Built-in Function} { } spparms (\"tight\")\n\
 @deftypefnx {Built-in Function} { } spparms (@var{key}, @var{val})\n\
 Query or set the parameters used by the sparse solvers and factorization\n\
-functions.  The first four calls above get information about the current\n\
-settings, while the others change the current settings.  The parameters are\n\
-stored as pairs of keys and values, where the values are all floats and the\n\
-keys are one of the following strings:\n\
+functions.\n\
+\n\
+The first four calls above get information about the current settings, while\n\
+the others change the current settings.  The parameters are stored as pairs\n\
+of keys and values, where the values are all floats and the keys are one of\n\
+the following strings:\n\
 \n\
 @table @samp\n\
 @item spumoni\n\
 Printing level of debugging information of the solvers (default 0)\n\
 \n\
 @item ths_rel\n\
 Included for compatibility.  Not used.  (default 1)\n\
 \n\
diff --git a/libinterp/corefcn/str2double.cc b/libinterp/corefcn/str2double.cc
--- a/libinterp/corefcn/str2double.cc
+++ b/libinterp/corefcn/str2double.cc
@@ -294,18 +294,18 @@ str2double1 (const std::string& str_arg)
   return val;
 }
 
 DEFUN (str2double, args, ,
        "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} str2double (@var{s})\n\
 Convert a string to a real or complex number.\n\
 \n\
-The string must be in one of the following formats where\n\
-a and b are real numbers and the complex unit is @qcode{'i'} or @qcode{'j'}:\n\
+The string must be in one of the following formats where a and b are real\n\
+numbers and the complex unit is @qcode{'i'} or @qcode{'j'}:\n\
 \n\
 @itemize\n\
 @item a + bi\n\
 \n\
 @item a + b*i\n\
 \n\
 @item a + i*b\n\
 \n\
@@ -316,22 +316,22 @@ a and b are real numbers and the complex
 @item i*b + a\n\
 @end itemize\n\
 \n\
 If present, a and/or b are of the form @nospell{[+-]d[,.]d[[eE][+-]d]} where\n\
 the brackets indicate optional arguments and @qcode{'d'} indicates zero or\n\
 more digits.  The special input values @code{Inf}, @code{NaN}, and @code{NA}\n\
 are also accepted.\n\
 \n\
-@var{s} may be a character string, character matrix, or cell array.\n\
-For character arrays the conversion is repeated for every row, and\n\
-a double or complex array is returned.  Empty rows in @var{s} are deleted\n\
-and not returned in the numeric array.  For cell arrays each character\n\
-string element is processed and a double or complex array of the same\n\
-dimensions as @var{s} is returned.\n\
+@var{s} may be a character string, character matrix, or cell array.  For\n\
+character arrays the conversion is repeated for every row, and a double or\n\
+complex array is returned.  Empty rows in @var{s} are deleted and not\n\
+returned in the numeric array.  For cell arrays each character string\n\
+element is processed and a double or complex array of the same dimensions as\n\
+@var{s} is returned.\n\
 \n\
 For unconvertible scalar or character string input @code{str2double} returns\n\
 a NaN@.  Similarly, for character array input @code{str2double} returns a\n\
 NaN for any row of @var{s} that could not be converted.  For a cell array,\n\
 @code{str2double} returns a NaN for any element of @var{s} for which\n\
 conversion fails.  Note that numeric elements in a mixed string/numeric\n\
 cell array are not strings and the conversion will fail for these elements\n\
 and return NaN.\n\
diff --git a/libinterp/corefcn/strfind.cc b/libinterp/corefcn/strfind.cc
--- a/libinterp/corefcn/strfind.cc
+++ b/libinterp/corefcn/strfind.cc
@@ -148,28 +148,29 @@ qs_search (const Array<char>& needle,
   return result;
 }
 
 DEFUN (strfind, args, ,
        "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {@var{idx} =} strfind (@var{str}, @var{pattern})\n\
 @deftypefnx {Built-in Function} {@var{idx} =} strfind (@var{cellstr}, @var{pattern})\n\
 @deftypefnx {Built-in Function} {@var{idx} =} strfind (@dots{}, \"overlaps\", @var{val})\n\
-Search for @var{pattern} in the string @var{str} and return the\n\
-starting index of every such occurrence in the vector @var{idx}.\n\
+Search for @var{pattern} in the string @var{str} and return the starting\n\
+index of every such occurrence in the vector @var{idx}.\n\
 \n\
-If there is no such occurrence, or if @var{pattern} is longer\n\
-than @var{str}, or if @var{pattern} itself is empty, then @var{idx} is the\n\
-empty array @code{[]}.\n\
+If there is no such occurrence, or if @var{pattern} is longer than\n\
+@var{str}, or if @var{pattern} itself is empty, then @var{idx} is the empty\n\
+array @code{[]}.\n\
+\n\
 The optional argument @qcode{\"overlaps\"} determines whether the pattern\n\
 can match at every position in @var{str} (true), or only for unique\n\
 occurrences of the complete pattern (false).  The default is true.\n\
 \n\
-If a cell array of strings @var{cellstr} is specified\n\
-then @var{idx} is a cell array of vectors, as specified above.\n\
+If a cell array of strings @var{cellstr} is specified then @var{idx} is a\n\
+cell array of vectors, as specified above.\n\
 \n\
 Examples:\n\
 \n\
 @example\n\
 @group\n\
 strfind (\"abababa\", \"aba\")\n\
      @result{} [1, 3, 5]\n\
 \n\
diff --git a/libinterp/corefcn/strfns.cc b/libinterp/corefcn/strfns.cc
--- a/libinterp/corefcn/strfns.cc
+++ b/libinterp/corefcn/strfns.cc
@@ -42,29 +42,29 @@ along with Octave; see the file COPYING.
 
 DEFUN (char, args, ,
        "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {} char (@var{x})\n\
 @deftypefnx {Built-in Function} {} char (@var{x}, @dots{})\n\
 @deftypefnx {Built-in Function} {} char (@var{s1}, @var{s2}, @dots{})\n\
 @deftypefnx {Built-in Function} {} char (@var{cell_array})\n\
 Create a string array from one or more numeric matrices, character\n\
-matrices, or cell arrays.  Arguments are concatenated vertically.\n\
-The returned values are padded with blanks as needed to make each row\n\
-of the string array have the same length.  Empty input strings are\n\
-significant and will concatenated in the output.\n\
+matrices, or cell arrays.\n\
 \n\
-For numerical input, each element is converted\n\
-to the corresponding ASCII character.  A range error results if an input\n\
-is outside the ASCII range (0-255).\n\
+Arguments are concatenated vertically.  The returned values are padded with\n\
+blanks as needed to make each row of the string array have the same length. \n\
+Empty input strings are significant and will concatenated in the output.\n\
+\n\
+For numerical input, each element is converted to the corresponding ASCII\n\
+character.  A range error results if an input is outside the ASCII range\n\
+(0-255).\n\
 \n\
 For cell arrays, each element is concatenated separately.  Cell arrays\n\
-converted through\n\
-@code{char} can mostly be converted back with @code{cellstr}.\n\
-For example:\n\
+converted through @code{char} can mostly be converted back with\n\
+@code{cellstr}.  For example:\n\
 \n\
 @example\n\
 @group\n\
 char ([97, 98, 99], \"\", @{\"98\", \"99\", 100@}, \"str1\", [\"ha\", \"lf\"])\n\
    @result{} [\"abc    \"\n\
        \"       \"\n\
        \"98     \"\n\
        \"99     \"\n\
@@ -173,29 +173,30 @@ char ([97, 98, 99], \"\", @{\"98\", \"99
 
 DEFUN (strvcat, args, ,
        "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {} strvcat (@var{x})\n\
 @deftypefnx {Built-in Function} {} strvcat (@var{x}, @dots{})\n\
 @deftypefnx {Built-in Function} {} strvcat (@var{s1}, @var{s2}, @dots{})\n\
 @deftypefnx {Built-in Function} {} strvcat (@var{cell_array})\n\
 Create a character array from one or more numeric matrices, character\n\
-matrices, or cell arrays.  Arguments are concatenated vertically.\n\
-The returned values are padded with blanks as needed to make each row\n\
-of the string array have the same length.  Unlike @code{char}, empty\n\
-strings are removed and will not appear in the output.\n\
+matrices, or cell arrays.\n\
 \n\
-For numerical input, each element is converted\n\
-to the corresponding ASCII character.  A range error results if an input\n\
-is outside the ASCII range (0-255).\n\
+Arguments are concatenated vertically.  The returned values are padded with\n\
+blanks as needed to make each row of the string array have the same length. \n\
+Unlike @code{char}, empty strings are removed and will not appear in the\n\
+output.\n\
+\n\
+For numerical input, each element is converted to the corresponding ASCII\n\
+character.  A range error results if an input is outside the ASCII range\n\
+(0-255).\n\
 \n\
 For cell arrays, each element is concatenated separately.  Cell arrays\n\
-converted through\n\
-@code{strvcat} can mostly be converted back with @code{cellstr}.\n\
-For example:\n\
+converted through @code{strvcat} can mostly be converted back with\n\
+@code{cellstr}.  For example:\n\
 \n\
 @example\n\
 @group\n\
 strvcat ([97, 98, 99], \"\", @{\"98\", \"99\", 100@}, \"str1\", [\"ha\", \"lf\"])\n\
       @result{} [\"abc    \"\n\
           \"98     \"\n\
           \"99     \"\n\
           \"d      \"\n\
@@ -856,24 +857,25 @@ This is just the opposite of the corresp
 
 /*
 %!assert (strncmpi ("abc123", "ABC456", 3), true)
 */
 
 DEFUN (list_in_columns, args, ,
        "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} list_in_columns (@var{arg}, @var{width}, @var{prefix})\n\
-Return a string containing the elements of @var{arg} listed in\n\
-columns with an overall maximum width of @var{width} and optional\n\
-prefix @var{prefix}.  The argument @var{arg} must be a cell array\n\
-of character strings or a character array.  If @var{width} is not\n\
-specified or is an empty matrix, or less than or equal to zero,\n\
-the width of the terminal screen is used.\n\
-Newline characters are used to break the lines in the output string.\n\
-For example:\n\
+Return a string containing the elements of @var{arg} listed in columns with\n\
+an overall maximum width of @var{width} and optional prefix @var{prefix}.\n\
+\n\
+The argument @var{arg} must be a cell array of character strings or a\n\
+character array.\n\
+\n\
+If @var{width} is not specified or is an empty matrix, or less than or equal\n\
+to zero, the width of the terminal screen is used.  Newline characters are\n\
+used to break the lines in the output string.  For example:\n\
 @c Set example in small font to prevent overfull line\n\
 \n\
 @smallexample\n\
 @group\n\
 list_in_columns (@{\"abc\", \"def\", \"ghijkl\", \"mnop\", \"qrs\", \"tuv\"@}, 20)\n\
      @result{} abc     mnop\n\
         def     qrs\n\
         ghijkl  tuv\n\
diff --git a/libinterp/corefcn/sub2ind.cc b/libinterp/corefcn/sub2ind.cc
--- a/libinterp/corefcn/sub2ind.cc
+++ b/libinterp/corefcn/sub2ind.cc
@@ -64,20 +64,19 @@ get_dim_vector (const octave_value& val,
 }
 
 DEFUN (sub2ind, args, ,
        "-*- texinfo -*-\n\
 @deftypefn  {Function File} {@var{ind} =} sub2ind (@var{dims}, @var{i}, @var{j})\n\
 @deftypefnx {Function File} {@var{ind} =} sub2ind (@var{dims}, @var{s1}, @var{s2}, @dots{}, @var{sN})\n\
 Convert subscripts to a linear index.\n\
 \n\
-The following example shows how to convert the two-dimensional\n\
-index @code{(2,3)} of a 3-by-3 matrix to a linear index.  The matrix\n\
-is linearly indexed moving from one column to next, filling up\n\
-all rows in each column.\n\
+The following example shows how to convert the two-dimensional index\n\
+@code{(2,3)} of a 3-by-3 matrix to a linear index.  The matrix is linearly\n\
+indexed moving from one column to next, filling up all rows in each column.\n\
 \n\
 @example\n\
 @group\n\
 linear_index = sub2ind ([3, 3], 2, 3)\n\
 @result{} 8\n\
 @end group\n\
 @end example\n\
 @seealso{ind2sub}\n\
diff --git a/libinterp/corefcn/svd.cc b/libinterp/corefcn/svd.cc
--- a/libinterp/corefcn/svd.cc
+++ b/libinterp/corefcn/svd.cc
@@ -403,21 +403,22 @@ decomposition, eliminating the unnecessa
 */
 
 DEFUN (svd_driver, args, nargout,
        "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {@var{val} =} svd_driver ()\n\
 @deftypefnx {Built-in Function} {@var{old_val} =} svd_driver (@var{new_val})\n\
 @deftypefnx {Built-in Function} {} svd_driver (@var{new_val}, \"local\")\n\
 Query or set the underlying @sc{lapack} driver used by @code{svd}.\n\
-Currently recognized values are @qcode{\"gesvd\"} and @qcode{\"gesdd\"}.  \n\
+\n\
+Currently recognized values are @qcode{\"gesvd\"} and @qcode{\"gesdd\"}.\n\
 The default is @qcode{\"gesvd\"}.\n\
 \n\
 When called from inside a function with the @qcode{\"local\"} option, the\n\
-variable is changed locally for the function and any subroutines it calls.  \n\
+variable is changed locally for the function and any subroutines it calls.\n\
 The original variable value is restored when exiting the function.\n\
 @seealso{svd}\n\
 @end deftypefn")
 {
   static const char *driver_names[] = { "gesvd", "gesdd", 0 };
 
   return SET_INTERNAL_VARIABLE_CHOICES (svd_driver, driver_names);
 }
diff --git a/libinterp/corefcn/symtab.cc b/libinterp/corefcn/symtab.cc
--- a/libinterp/corefcn/symtab.cc
+++ b/libinterp/corefcn/symtab.cc
@@ -1645,25 +1645,27 @@ symbol_table::do_update_nest (void)
 }
 
 DEFUN (ignore_function_time_stamp, args, nargout,
        "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {@var{val} =} ignore_function_time_stamp ()\n\
 @deftypefnx {Built-in Function} {@var{old_val} =} ignore_function_time_stamp (@var{new_val})\n\
 Query or set the internal variable that controls whether Octave checks\n\
 the time stamp on files each time it looks up functions defined in\n\
-function files.  If the internal variable is set to @qcode{\"system\"},\n\
-Octave will not automatically recompile function files in subdirectories of\n\
-@file{@var{octave-home}/lib/@var{version}} if they have changed since\n\
-they were last compiled, but will recompile other function files in the\n\
-search path if they change.  If set to @qcode{\"all\"}, Octave will not\n\
-recompile any function files unless their definitions are removed with\n\
-@code{clear}.  If set to @qcode{\"none\"}, Octave will always check time\n\
-stamps on files to determine whether functions defined in function files\n\
-need to recompiled.\n\
+function files.\n\
+\n\
+If the internal variable is set to @qcode{\"system\"}, Octave will not\n\
+automatically recompile function files in subdirectories of\n\
+@file{@var{octave-home}/lib/@var{version}} if they have changed since they were last compiled, but will recompile other function files in the search path if they change.\n\
+\n\
+If set to @qcode{\"all\"}, Octave will not recompile any function files\n\
+unless their definitions are removed with @code{clear}.\n\
+\n\
+If set to @qcode{\"none\"}, Octave will always check time stamps on files to\n\
+determine whether functions defined in function files need to recompiled.\n\
 @end deftypefn")
 {
   octave_value retval;
 
   int nargin = args.length ();
 
   if (nargout > 0 || nargin == 0)
     {
diff --git a/libinterp/corefcn/syscalls.cc b/libinterp/corefcn/syscalls.cc
--- a/libinterp/corefcn/syscalls.cc
+++ b/libinterp/corefcn/syscalls.cc
@@ -109,19 +109,19 @@ mk_stat_result (const base_file_stat& fs
   return retval;
 }
 
 DEFUNX ("dup2", Fdup2, args, ,
         "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {[@var{fid}, @var{msg}] =} dup2 (@var{old}, @var{new})\n\
 Duplicate a file descriptor.\n\
 \n\
-If successful, @var{fid} is greater than zero and contains the new file\n\
-ID@.  Otherwise, @var{fid} is negative and @var{msg} contains a\n\
-system-dependent error message.\n\
+If successful, @var{fid} is greater than zero and contains the new file ID@.\n\
+Otherwise, @var{fid} is negative and @var{msg} contains a system-dependent\n\
+error message.\n\
 @seealso{fopen, fclose, fcntl}\n\
 @end deftypefn")
 {
   octave_value_list retval;
 
   retval(1) = std::string ();
   retval(0) = -1;
 
@@ -160,19 +160,21 @@ system-dependent error message.\n\
     print_usage ();
 
   return retval;
 }
 
 DEFUNX ("exec", Fexec, args, ,
         "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {[@var{err}, @var{msg}] =} exec (@var{file}, @var{args})\n\
-Replace current process with a new process.  Calling @code{exec} without\n\
-first calling @code{fork} will terminate your current Octave process and\n\
-replace it with the program named by @var{file}.  For example,\n\
+Replace current process with a new process.\n\
+\n\
+Calling @code{exec} without first calling @code{fork} will terminate your\n\
+current Octave process and replace it with the program named by @var{file}. \n\
+For example,\n\
 \n\
 @example\n\
 exec (\"ls\" \"-l\")\n\
 @end example\n\
 \n\
 @noindent\n\
 will run @code{ls} and return you to your shell prompt.\n\
 \n\
@@ -243,23 +245,25 @@ error message.\n\
     print_usage ();
 
   return retval;
 }
 
 DEFUNX ("popen2", Fpopen2, args, ,
         "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {[@var{in}, @var{out}, @var{pid}] =} popen2 (@var{command}, @var{args})\n\
-Start a subprocess with two-way communication.  The name of the process\n\
-is given by @var{command}, and @var{args} is an array of strings\n\
-containing options for the command.  The file identifiers for the input\n\
-and output streams of the subprocess are returned in @var{in} and\n\
-@var{out}.  If execution of the command is successful, @var{pid}\n\
-contains the process ID of the subprocess.  Otherwise, @var{pid} is\n\
-@minus{}1.\n\
+Start a subprocess with two-way communication.\n\
+\n\
+The name of the process is given by @var{command}, and @var{args} is an\n\
+array of strings containing options for the command.\n\
+\n\
+The file identifiers for the input and output streams of the subprocess are\n\
+returned in @var{in} and @var{out}.  If execution of the command is\n\
+successful, @var{pid} contains the process ID of the subprocess.  Otherwise,\n\
+@var{pid} is @minus{}1.\n\
 \n\
 For example:\n\
 \n\
 @example\n\
 [in, out, pid] = popen2 (\"sort\", \"-r\");\n\
 fputs (in, \"these\\nare\\nsome\\nstrings\\n\");\n\
 fclose (in);\n\
 EAGAIN = errno (\"EAGAIN\");\n\
@@ -489,24 +493,24 @@ Non-blocking mode.\n\
 @item O_SYNC\n\
 Wait for writes to complete.\n\
 \n\
 @item O_ASYNC\n\
 Asynchronous I/O.\n\
 @end vtable\n\
 \n\
 @item F_SETFL\n\
-Set the file status flags for @var{fid} to the value specified by\n\
-@var{arg}.  The only flags that can be changed are @w{@code{O_APPEND}} and\n\
+Set the file status flags for @var{fid} to the value specified by @var{arg}.\n\
+ The only flags that can be changed are @w{@code{O_APPEND}} and\n\
 @w{@code{O_NONBLOCK}}.\n\
 @end vtable\n\
 \n\
-If successful, @var{err} is 0 and @var{msg} is an empty string.\n\
-Otherwise, @var{err} is nonzero and @var{msg} contains a\n\
-system-dependent error message.\n\
+If successful, @var{err} is 0 and @var{msg} is an empty string.  Otherwise,\n\
+@var{err} is nonzero and @var{msg} contains a system-dependent error\n\
+message.\n\
 @seealso{fopen, dup2}\n\
 @end deftypefn")
 {
   octave_value_list retval;
 
   retval(1) = std::string ();
   retval(0) = -1;
 
@@ -552,19 +556,19 @@ DEFUNX ("fork", Ffork, args, ,
         "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {[@var{pid}, @var{msg}] =} fork ()\n\
 Create a copy of the current process.\n\
 \n\
 Fork can return one of the following values:\n\
 \n\
 @table @asis\n\
 @item > 0\n\
-You are in the parent process.  The value returned from @code{fork} is\n\
-the process id of the child process.  You should probably arrange to\n\
-wait for any child processes to exit.\n\
+You are in the parent process.  The value returned from @code{fork} is the\n\
+process id of the child process.  You should probably arrange to wait for\n\
+any child processes to exit.\n\
 \n\
 @item 0\n\
 You are in the child process.  You can call @code{exec} to start another\n\
 process.  If that fails, you should probably call @code{exit}.\n\
 \n\
 @item < 0\n\
 The call to @code{fork} failed for some reason.  You must take evasive\n\
 action.  A system dependent error message will be waiting in @var{msg}.\n\
@@ -618,16 +622,17 @@ Return the process group id of the curre
 
   return retval;
 }
 
 DEFUNX ("getpid", Fgetpid, args, ,
         "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {pid =} getpid ()\n\
 Return the process id of the current process.\n\
+@seealso{getppid}\n\
 @end deftypefn")
 {
   octave_value retval = -1;
 
   int nargin = args.length ();
 
   if (nargin == 0)
     retval = octave_syscalls::getpid ();
@@ -636,16 +641,17 @@ Return the process id of the current pro
 
   return retval;
 }
 
 DEFUNX ("getppid", Fgetppid, args, ,
         "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {pid =} getppid ()\n\
 Return the process id of the parent process.\n\
+@seealso{getpid}\n\
 @end deftypefn")
 {
   octave_value retval = -1;
 
   int nargin = args.length ();
 
   if (nargin == 0)
     retval = octave_syscalls::getppid ();
@@ -654,16 +660,17 @@ Return the process id of the parent proc
 
   return retval;
 }
 
 DEFUNX ("getegid", Fgetegid, args, ,
         "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {egid =} getegid ()\n\
 Return the effective group id of the current process.\n\
+@seealso{getgid}\n\
 @end deftypefn")
 {
   octave_value retval = -1;
 
   int nargin = args.length ();
 
   if (nargin == 0)
     retval = octave_syscalls::getegid ();
@@ -672,16 +679,17 @@ Return the effective group id of the cur
 
   return retval;
 }
 
 DEFUNX ("getgid", Fgetgid, args, ,
         "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {gid =} getgid ()\n\
 Return the real group id of the current process.\n\
+@seealso{getegid}\n\
 @end deftypefn")
 {
   octave_value retval = -1;
 
   int nargin = args.length ();
 
   if (nargin == 0)
     retval = octave_syscalls::getgid ();
@@ -690,16 +698,17 @@ Return the real group id of the current 
 
   return retval;
 }
 
 DEFUNX ("geteuid", Fgeteuid, args, ,
         "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {euid =} geteuid ()\n\
 Return the effective user id of the current process.\n\
+@seealso{getuid}\n\
 @end deftypefn")
 {
   octave_value retval = -1;
 
   int nargin = args.length ();
 
   if (nargin == 0)
     retval = octave_syscalls::geteuid ();
@@ -708,16 +717,17 @@ Return the effective user id of the curr
 
   return retval;
 }
 
 DEFUNX ("getuid", Fgetuid, args, ,
         "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {uid =} getuid ()\n\
 Return the real user id of the current process.\n\
+@seealso{geteuid}\n\
 @end deftypefn")
 {
   octave_value retval = -1;
 
   int nargin = args.length ();
 
   if (nargin == 0)
     retval = octave_syscalls::getuid ();
@@ -811,18 +821,18 @@ The function outputs are described in th
 
 DEFUNX ("mkfifo", Fmkfifo, args, ,
         "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {} mkfifo (@var{name}, @var{mode})\n\
 @deftypefnx {Built-in Function} {[@var{err}, @var{msg}] =} mkfifo (@var{name}, @var{mode})\n\
 Create a FIFO special file named @var{name} with file mode @var{mode}\n\
 \n\
 If successful, @var{err} is 0 and @var{msg} is an empty string.\n\
-Otherwise, @var{err} is nonzero and @var{msg} contains a\n\
-system-dependent error message.\n\
+Otherwise, @var{err} is nonzero and @var{msg} contains a system-dependent\n\
+error message.\n\
 @seealso{pipe}\n\
 @end deftypefn")
 {
   octave_value_list retval;
 
   retval(1) = std::string ();
   retval(0) = -1;
 
@@ -862,22 +872,22 @@ system-dependent error message.\n\
     print_usage ();
 
   return retval;
 }
 
 DEFUNX ("pipe", Fpipe, args, ,
         "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {[@var{read_fd}, @var{write_fd}, @var{err}, @var{msg}] =} pipe ()\n\
-Create a pipe and return the reading and writing ends of the pipe\n\
-into @var{read_fd} and @var{write_fd} respectively.\n\
+Create a pipe and return the reading and writing ends of the pipe into\n\
+@var{read_fd} and @var{write_fd} respectively.\n\
 \n\
 If successful, @var{err} is 0 and @var{msg} is an empty string.\n\
-Otherwise, @var{err} is nonzero and @var{msg} contains a\n\
-system-dependent error message.\n\
+Otherwise, @var{err} is nonzero and @var{msg} contains a system-dependent\n\
+error message.\n\
 @seealso{mkfifo}\n\
 @end deftypefn")
 {
   octave_value_list retval;
 
   retval(3) = std::string ();
   retval(2) = -1;
   retval(1) = -1;
@@ -974,24 +984,24 @@ returned from @code{time}.  @xref{Timing
 \n\
 @item blksize\n\
 Size of blocks in the file.\n\
 \n\
 @item blocks\n\
 Number of blocks allocated for file.\n\
 @end table\n\
 \n\
-If the call is successful @var{err} is 0 and @var{msg} is an empty\n\
-string.  If the file does not exist, or some other error occurs, @var{info}\n\
-is an empty matrix, @var{err} is @minus{}1, and @var{msg} contains the\n\
+If the call is successful @var{err} is 0 and @var{msg} is an empty string.\n\
+If the file does not exist, or some other error occurs, @var{info} is an\n\
+empty matrix, @var{err} is @minus{}1, and @var{msg} contains the\n\
 corresponding system error message.\n\
 \n\
-If @var{file} is a symbolic link, @code{stat} will return information\n\
-about the actual file that is referenced by the link.  Use @code{lstat}\n\
-if you want information about the symbolic link itself.\n\
+If @var{file} is a symbolic link, @code{stat} will return information about\n\
+the actual file that is referenced by the link.  Use @code{lstat} if you\n\
+want information about the symbolic link itself.\n\
 \n\
 For example:\n\
 \n\
 @example\n\
 [info, err, msg] = stat (\"/vmlinuz\")\n\
   @result{} info =\n\
      @{\n\
        atime = 855399756\n\
@@ -1244,17 +1254,19 @@ Return the hostname of the system where 
     print_usage ();
 
   return retval;
 }
 
 DEFUN (uname, args, ,
        "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {[@var{uts}, @var{err}, @var{msg}] =} uname ()\n\
-Return system information in the structure.  For example:\n\
+Return system information in the structure.\n\
+\n\
+For example:\n\
 \n\
 @example\n\
 @group\n\
 uname ()\n\
    @result{} @{\n\
          sysname = x86_64\n\
          nodename = segfault\n\
          release = 2.6.15-1-amd64-k8-smp\n\
@@ -1294,18 +1306,19 @@ system-dependent error message.\n\
 }
 
 DEFUNX ("unlink", Funlink, args, ,
         "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {[@var{err}, @var{msg}] =} unlink (@var{file})\n\
 Delete the file named @var{file}.\n\
 \n\
 If successful, @var{err} is 0 and @var{msg} is an empty string.\n\
-Otherwise, @var{err} is nonzero and @var{msg} contains a\n\
-system-dependent error message.\n\
+Otherwise, @var{err} is nonzero and @var{msg} contains a system-dependent\n\
+error message.\n\
+@seealso{delete, rmdir}\n\
 @end deftypefn")
 {
   octave_value_list retval;
 
   retval(1) = std::string ();
   retval(0) = -1;
 
   int nargin = args.length ();
@@ -1330,55 +1343,57 @@ system-dependent error message.\n\
     print_usage ();
 
   return retval;
 }
 
 DEFUNX ("waitpid", Fwaitpid, args, ,
         "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {[@var{pid}, @var{status}, @var{msg}] =} waitpid (@var{pid}, @var{options})\n\
-Wait for process @var{pid} to terminate.  The @var{pid} argument can be:\n\
+Wait for process @var{pid} to terminate.\n\
+\n\
+The @var{pid} argument can be:\n\
 \n\
 @table @asis\n\
 @item @minus{}1\n\
 Wait for any child process.\n\
 \n\
 @item 0\n\
-Wait for any child process whose process group ID is equal to that of\n\
-the Octave interpreter process.\n\
+Wait for any child process whose process group ID is equal to that of the\n\
+Octave interpreter process.\n\
 \n\
 @item > 0\n\
 Wait for termination of the child process with ID @var{pid}.\n\
 @end table\n\
 \n\
-The @var{options} argument can be a bitwise OR of zero or more of\n\
-the following constants:\n\
+The @var{options} argument can be a bitwise OR of zero or more of the\n\
+following constants:\n\
 \n\
 @table @code\n\
 @item 0\n\
-Wait until signal is received or a child process exits (this is the\n\
-default if the @var{options} argument is missing).\n\
+Wait until signal is received or a child process exits (this is the default\n\
+if the @var{options} argument is missing).\n\
 \n\
 @item WNOHANG\n\
 Do not hang if status is not immediately available.\n\
 \n\
 @item WUNTRACED\n\
-Report the status of any child processes that are stopped, and whose\n\
-status has not yet been reported since they stopped.\n\
+Report the status of any child processes that are stopped, and whose status\n\
+has not yet been reported since they stopped.\n\
 \n\
 @item WCONTINUE\n\
 Return if a stopped child has been resumed by delivery of @code{SIGCONT}.\n\
 This value may not be meaningful on all systems.\n\
 @end table\n\
 \n\
-If the returned value of @var{pid} is greater than 0, it is the process\n\
-ID of the child process that exited.  If an error occurs, @var{pid} will\n\
-be less than zero and @var{msg} will contain a system-dependent error\n\
-message.  The value of @var{status} contains additional system-dependent\n\
-information about the subprocess that exited.\n\
+If the returned value of @var{pid} is greater than 0, it is the process ID\n\
+of the child process that exited.  If an error occurs, @var{pid} will be\n\
+less than zero and @var{msg} will contain a system-dependent error message. \n\
+The value of @var{status} contains additional system-dependent information\n\
+about the subprocess that exited.\n\
 @seealso{WCONTINUE, WCOREDUMP, WEXITSTATUS, WIFCONTINUED, WIFSIGNALED, WIFSTOPPED, WNOHANG, WSTOPSIG, WTERMSIG, WUNTRACED}\n\
 @end deftypefn")
 {
   octave_value_list retval;
 
   retval(2) = std::string ();
   retval(1) = 0;
   retval(0) = -1;
@@ -1419,18 +1434,18 @@ information about the subprocess that ex
     print_usage ();
 
   return retval;
 }
 
 DEFUNX ("WIFEXITED", FWIFEXITED, args, ,
         "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} WIFEXITED (@var{status})\n\
-Given @var{status} from a call to @code{waitpid}, return true if the\n\
-child terminated normally.\n\
+Given @var{status} from a call to @code{waitpid}, return\n\
+true if the child terminated normally.\n\
 @seealso{waitpid, WEXITSTATUS, WIFSIGNALED, WTERMSIG, WCOREDUMP, WIFSTOPPED, WSTOPSIG, WIFCONTINUED}\n\
 @end deftypefn")
 {
   octave_value retval = false;
 
   if (args.length () == 1)
     {
       int status = args(0).int_value ();
@@ -1442,19 +1457,20 @@ child terminated normally.\n\
     }
 
   return retval;
 }
 
 DEFUNX ("WEXITSTATUS", FWEXITSTATUS, args, ,
         "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} WEXITSTATUS (@var{status})\n\
-Given @var{status} from a call to @code{waitpid}, return the exit\n\
-status of the child.  This function should only be employed if\n\
-@code{WIFEXITED} returned true.\n\
+Given @var{status} from a call to @code{waitpid}, return\n\
+the exit status of the child.\n\
+\n\
+This function should only be employed if @code{WIFEXITED} returned true.\n\
 @seealso{waitpid, WIFEXITED, WIFSIGNALED, WTERMSIG, WCOREDUMP, WIFSTOPPED, WSTOPSIG, WIFCONTINUED}\n\
 @end deftypefn")
 {
   octave_value retval = 0;
 
   if (args.length () == 1)
     {
       int status = args(0).int_value ();
@@ -1466,18 +1482,18 @@ status of the child.  This function shou
     }
 
   return retval;
 }
 
 DEFUNX ("WIFSIGNALED", FWIFSIGNALED, args, ,
         "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} WIFSIGNALED (@var{status})\n\
-Given @var{status} from a call to @code{waitpid}, return true if the\n\
-child process was terminated by a signal.\n\
+Given @var{status} from a call to @code{waitpid}, return\n\
+true if the child process was terminated by a signal.\n\
 @seealso{waitpid, WIFEXITED, WEXITSTATUS, WTERMSIG, WCOREDUMP, WIFSTOPPED, WSTOPSIG, WIFCONTINUED}\n\
 @end deftypefn")
 {
   octave_value retval = false;
 
   if (args.length () == 1)
     {
       int status = args(0).int_value ();
@@ -1489,19 +1505,20 @@ child process was terminated by a signal
     }
 
   return retval;
 }
 
 DEFUNX ("WTERMSIG", FWTERMSIG, args, ,
         "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} WTERMSIG (@var{status})\n\
-Given @var{status} from a call to @code{waitpid}, return the number of\n\
-the signal that caused the child process to terminate.  This function\n\
-should only be employed if @code{WIFSIGNALED} returned true.\n\
+Given @var{status} from a call to @code{waitpid}, return\n\
+the number of the signal that caused the child process to terminate.\n\
+\n\
+This function should only be employed if @code{WIFSIGNALED} returned true.\n\
 @seealso{waitpid, WIFEXITED, WEXITSTATUS, WIFSIGNALED, WCOREDUMP, WIFSTOPPED, WSTOPSIG, WIFCONTINUED}\n\
 @end deftypefn")
 {
   octave_value retval = 0;
 
   if (args.length () == 1)
     {
       int status = args(0).int_value ();
@@ -1513,21 +1530,22 @@ should only be employed if @code{WIFSIGN
     }
 
   return retval;
 }
 
 DEFUNX ("WCOREDUMP", FWCOREDUMP, args, ,
         "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} WCOREDUMP (@var{status})\n\
-Given @var{status} from a call to @code{waitpid}, return true if the\n\
-child produced a core dump.  This function should only be employed if\n\
-@code{WIFSIGNALED} returned true.  The macro used to implement this\n\
-function is not specified in POSIX.1-2001 and is not available on some\n\
-Unix implementations (e.g., AIX, SunOS).\n\
+Given @var{status} from a call to @code{waitpid}, return\n\
+true if the child produced a core dump.\n\
+\n\
+This function should only be employed if @code{WIFSIGNALED} returned true. \n\
+The macro used to implement this function is not specified in POSIX.1-2001\n\
+and is not available on some Unix implementations (e.g., AIX, SunOS).\n\
 @seealso{waitpid, WIFEXITED, WEXITSTATUS, WIFSIGNALED, WTERMSIG, WIFSTOPPED, WSTOPSIG, WIFCONTINUED}\n\
 @end deftypefn")
 {
   octave_value retval = false;
 
   if (args.length () == 1)
     {
       int status = args(0).int_value ();
@@ -1539,20 +1557,21 @@ Unix implementations (e.g., AIX, SunOS).
     }
 
   return retval;
 }
 
 DEFUNX ("WIFSTOPPED", FWIFSTOPPED, args, ,
         "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} WIFSTOPPED (@var{status})\n\
-Given @var{status} from a call to @code{waitpid}, return true if the\n\
-child process was stopped by delivery of a signal; this is only\n\
-possible if the call was done using @code{WUNTRACED} or when the child\n\
-is being traced (see ptrace(2)).\n\
+Given @var{status} from a call to @code{waitpid}, return\n\
+true if the child process was stopped by delivery of a signal.\n\
+\n\
+This is only possible if the call was done using @code{WUNTRACED} or when\n\
+the child is being traced (see ptrace(2)).\n\
 @seealso{waitpid, WIFEXITED, WEXITSTATUS, WIFSIGNALED, WTERMSIG, WCOREDUMP, WSTOPSIG, WIFCONTINUED}\n\
 @end deftypefn")
 {
   octave_value retval = false;
 
   if (args.length () == 1)
     {
       int status = args(0).int_value ();
@@ -1564,19 +1583,20 @@ is being traced (see ptrace(2)).\n\
     }
 
   return retval;
 }
 
 DEFUNX ("WSTOPSIG", FWSTOPSIG, args, ,
         "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} WSTOPSIG (@var{status})\n\
-Given @var{status} from a call to @code{waitpid}, return the number of\n\
-the signal which caused the child to stop.  This function should only\n\
-be employed if @code{WIFSTOPPED} returned true.\n\
+Given @var{status} from a call to @code{waitpid}, return\n\
+the number of the signal which caused the child to stop.\n\
+\n\
+This function should only be employed if @code{WIFSTOPPED} returned true.\n\
 @seealso{waitpid, WIFEXITED, WEXITSTATUS, WIFSIGNALED, WTERMSIG, WCOREDUMP, WIFSTOPPED, WIFCONTINUED}\n\
 @end deftypefn")
 {
   octave_value retval = 0;
 
   if (args.length () == 1)
     {
       int status = args(0).int_value ();
@@ -1588,18 +1608,18 @@ be employed if @code{WIFSTOPPED} returne
     }
 
   return retval;
 }
 
 DEFUNX ("WIFCONTINUED", FWIFCONTINUED, args, ,
         "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} WIFCONTINUED (@var{status})\n\
-Given @var{status} from a call to @code{waitpid}, return true if the\n\
-child process was resumed by delivery of @code{SIGCONT}.\n\
+Given @var{status} from a call to @code{waitpid}, return\n\
+true if the child process was resumed by delivery of @code{SIGCONT}.\n\
 @seealso{waitpid, WIFEXITED, WEXITSTATUS, WIFSIGNALED, WTERMSIG, WCOREDUMP, WIFSTOPPED, WSTOPSIG}\n\
 @end deftypefn")
 {
   octave_value retval = false;
 
   if (args.length () == 1)
     {
       int status = args(0).int_value ();
@@ -1611,18 +1631,19 @@ child process was resumed by delivery of
     }
 
   return retval;
 }
 
 DEFUNX ("canonicalize_file_name", Fcanonicalize_file_name, args, ,
         "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {[@var{cname}, @var{status}, @var{msg}] =} canonicalize_file_name (@var{fname})\n\
-Return the canonical name of file @var{fname}.  If the file does not exist\n\
-the empty string (\"\") is returned.\n\
+Return the canonical name of file @var{fname}.\n\
+\n\
+If the file does not exist the empty string (\"\") is returned.\n\
 @seealso{make_absolute_filename, is_absolute_filename, is_rooted_relative_filename}\n\
 @end deftypefn")
 {
   octave_value_list retval;
 
   if (args.length () == 1)
     {
       if (args(0).is_string ())
@@ -1662,50 +1683,50 @@ const_value (const octave_value_list& ar
 
 #if !defined (O_NONBLOCK) && defined (O_NDELAY)
 #define O_NONBLOCK O_NDELAY
 #endif
 
 DEFUNX ("F_DUPFD", FF_DUPFD, args, ,
         "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} F_DUPFD ()\n\
-Return the numerical value to pass to @code{fcntl} to return a\n\
-duplicate file descriptor.\n\
+Return the numerical value to pass to @code{fcntl} to return\n\
+a duplicate file descriptor.\n\
 @seealso{fcntl, F_GETFD, F_GETFL, F_SETFD, F_SETFL}\n\
 @end deftypefn")
 {
 #if defined (F_DUPFD)
   return const_value (args, F_DUPFD);
 #else
   error ("F_DUPFD: not available on this system");
   return octave_value ();
 #endif
 }
 
 DEFUNX ("F_GETFD", FF_GETFD, args, ,
         "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} F_GETFD ()\n\
-Return the numerical value to pass to @code{fcntl} to return the\n\
-file descriptor flags.\n\
+Return the numerical value to pass to @code{fcntl} to return\n\
+the file descriptor flags.\n\
 @seealso{fcntl, F_DUPFD, F_GETFL, F_SETFD, F_SETFL}\n\
 @end deftypefn")
 {
 #if defined (F_GETFD)
   return const_value (args, F_GETFD);
 #else
   error ("F_GETFD: not available on this system");
   return octave_value ();
 #endif
 }
 
 DEFUNX ("F_GETFL", FF_GETFL, args, ,
         "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} F_GETFL ()\n\
-Return the numerical value to pass to @code{fcntl} to return the\n\
-file status flags.\n\
+Return the numerical value to pass to @code{fcntl} to return\n\
+the file status flags.\n\
 @seealso{fcntl, F_DUPFD, F_GETFD, F_SETFD, F_SETFL}\n\
 @end deftypefn")
 {
 #if defined (F_GETFL)
   return const_value (args, F_GETFL);
 #else
   error ("F_GETFL: not available on this system");
   return octave_value ();
@@ -1776,18 +1797,18 @@ returned by @code{fcntl} to indicate asy
   return octave_value ();
 #endif
 }
 
 DEFUNX ("O_CREAT", FO_CREAT, args, ,
         "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} O_CREAT ()\n\
 Return the numerical value of the file status flag that may be\n\
-returned by @code{fcntl} to indicate that a file should be\n\
-created if it does not exist.\n\
+returned by @code{fcntl} to indicate that a file should be created if it\n\
+does not exist.\n\
 @seealso{fcntl, O_APPEND, O_ASYNC, O_EXCL, O_NONBLOCK, O_RDONLY, O_RDWR, O_SYNC, O_TRUNC, O_WRONLY}\n\
 @end deftypefn")
 {
 #if defined (O_CREAT)
   return const_value (args, O_CREAT);
 #else
   error ("O_CREAT: not available on this system");
   return octave_value ();
@@ -1826,86 +1847,83 @@ or that may be passsed to @code{fcntl} t
   return octave_value ();
 #endif
 }
 
 DEFUNX ("O_RDONLY", FO_RDONLY, args, ,
         "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} O_RDONLY ()\n\
 Return the numerical value of the file status flag that may be\n\
-returned by @code{fcntl} to indicate that a file is open for\n\
-reading only.\n\
+returned by @code{fcntl} to indicate that a file is open for reading only.\n\
 @seealso{fcntl, O_APPEND, O_ASYNC, O_CREAT, O_EXCL, O_NONBLOCK, O_RDWR, O_SYNC, O_TRUNC, O_WRONLY}\n\
 @end deftypefn")
 {
 #if defined (O_RDONLY)
   return const_value (args, O_RDONLY);
 #else
   error ("O_RDONLY: not available on this system");
   return octave_value ();
 #endif
 }
 
 DEFUNX ("O_RDWR", FO_RDWR, args, ,
         "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} O_RDWR ()\n\
 Return the numerical value of the file status flag that may be\n\
-returned by @code{fcntl} to indicate that a file is open for both\n\
-reading and writing.\n\
+returned by @code{fcntl} to indicate that a file is open for both reading\n\
+and writing.\n\
 @seealso{fcntl, O_APPEND, O_ASYNC, O_CREAT, O_EXCL, O_NONBLOCK, O_RDONLY, O_SYNC, O_TRUNC, O_WRONLY}\n\
 @end deftypefn")
 {
 #if defined (O_RDWR)
   return const_value (args, O_RDWR);
 #else
   error ("O_RDWR: not available on this system");
   return octave_value ();
 #endif
 }
 
 DEFUNX ("O_SYNC", FO_SYNC, args, ,
         "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} O_SYNC ()\n\
 Return the numerical value of the file status flag that may be\n\
-returned by @code{fcntl} to indicate that a file is open for\n\
-synchronous I/O.\n\
+returned by @code{fcntl} to indicate that a file is open for synchronous I/O.\n\
 @seealso{fcntl, O_APPEND, O_ASYNC, O_CREAT, O_EXCL, O_NONBLOCK, O_RDONLY, O_RDWR, O_TRUNC, O_WRONLY}\n\
 @end deftypefn")
 {
 #if defined (O_SYNC)
   return const_value (args, O_SYNC);
 #else
   error ("O_SYNC: not available on this system");
   return octave_value ();
 #endif
 }
 
 DEFUNX ("O_TRUNC", FO_TRUNC, args, ,
         "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} O_TRUNC ()\n\
 Return the numerical value of the file status flag that may be\n\
-returned by @code{fcntl} to indicate that if file exists, it should\n\
-be truncated when writing.\n\
+returned by @code{fcntl} to indicate that if file exists, it should be\n\
+truncated when writing.\n\
 @seealso{fcntl, O_APPEND, O_ASYNC, O_CREAT, O_EXCL, O_NONBLOCK, O_RDONLY, O_RDWR, O_SYNC, O_WRONLY}\n\
 @end deftypefn")
 {
 #if defined (O_TRUNC)
   return const_value (args, O_TRUNC);
 #else
   error ("O_TRUNC: not available on this system");
   return octave_value ();
 #endif
 }
 
 DEFUNX ("O_WRONLY", FO_WRONLY, args, ,
         "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} O_WRONLY ()\n\
 Return the numerical value of the file status flag that may be\n\
-returned by @code{fcntl} to indicate that a file is open for\n\
-writing only.\n\
+returned by @code{fcntl} to indicate that a file is open for writing only.\n\
 @seealso{fcntl, O_APPEND, O_ASYNC, O_CREAT, O_EXCL, O_NONBLOCK, O_RDONLY, O_RDWR, O_SYNC, O_TRUNC}\n\
 @end deftypefn")
 {
 #if defined (O_WRONLY)
   return const_value (args, O_WRONLY);
 #else
   error ("O_WRONLY: not available on this system");
   return octave_value ();
@@ -1915,50 +1933,48 @@ writing only.\n\
 #if !defined (WNOHANG)
 #define WNOHANG 0
 #endif
 
 DEFUNX ("WNOHANG", FWNOHANG, args, ,
         "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} WNOHANG ()\n\
 Return the numerical value of the option argument that may be\n\
-passed to @code{waitpid} to indicate that it should return its\n\
-status immediately instead of waiting for a process to exit.\n\
+passed to @code{waitpid} to indicate that it should return its status\n\
+immediately instead of waiting for a process to exit.\n\
 @seealso{waitpid, WUNTRACED, WCONTINUE}\n\
 @end deftypefn")
 {
   return const_value (args, WNOHANG);
 }
 
 #if !defined (WUNTRACED)
 #define WUNTRACED 0
 #endif
 
 DEFUNX ("WUNTRACED", FWUNTRACED, args, ,
         "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} WUNTRACED ()\n\
 Return the numerical value of the option argument that may be\n\
-passed to @code{waitpid} to indicate that it should also return\n\
-if the child process has stopped but is not traced via the\n\
-@code{ptrace} system call\n\
+passed to @code{waitpid} to indicate that it should also return if the child\n\
+process has stopped but is not traced via the @code{ptrace} system call\n\
 @seealso{waitpid, WNOHANG, WCONTINUE}\n\
 @end deftypefn")
 {
   return const_value (args, WUNTRACED);
 }
 
 #if !defined (WCONTINUE)
 #define WCONTINUE 0
 #endif
 
 DEFUNX ("WCONTINUE", FWCONTINUE, args, ,
         "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} WCONTINUE ()\n\
 Return the numerical value of the option argument that may be\n\
-passed to @code{waitpid} to indicate that it should also return\n\
-if a stopped child has been resumed by delivery of a @code{SIGCONT}\n\
-signal.\n\
+passed to @code{waitpid} to indicate that it should also return if a stopped\n\
+child has been resumed by delivery of a @code{SIGCONT} signal.\n\
 @seealso{waitpid, WNOHANG, WUNTRACED}\n\
 @end deftypefn")
 {
   return const_value (args, WCONTINUE);
 }
 
diff --git a/libinterp/corefcn/sysdep.cc b/libinterp/corefcn/sysdep.cc
--- a/libinterp/corefcn/sysdep.cc
+++ b/libinterp/corefcn/sysdep.cc
@@ -594,17 +594,19 @@ Clear the terminal screen and move the c
   return octave_value_list ();
 }
 
 DEFALIAS (home, clc);
 
 DEFUN (getenv, args, ,
        "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} getenv (@var{var})\n\
-Return the value of the environment variable @var{var}.  For example,\n\
+Return the value of the environment variable @var{var}.\n\
+\n\
+For example,\n\
 \n\
 @example\n\
 getenv (\"PATH\")\n\
 @end example\n\
 \n\
 @noindent\n\
 returns a string containing the value of your path.\n\
 @seealso{setenv, unsetenv}\n\
@@ -715,18 +717,21 @@ occurred.\n\
 */
 
 // FIXME: perhaps kbhit should also be able to print a prompt?
 
 DEFUN (kbhit, args, ,
        "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {} kbhit ()\n\
 @deftypefnx {Built-in Function} {} kbhit (1)\n\
-Read a single keystroke from the keyboard.  If called with an\n\
-argument, don't wait for a keypress.  For example,\n\
+Read a single keystroke from the keyboard.\n\
+\n\
+If called with an argument, don't wait for a keypress.\n\
+\n\
+For example,\n\
 \n\
 @example\n\
 x = kbhit ();\n\
 @end example\n\
 \n\
 @noindent\n\
 will set @var{x} to the next character typed at the keyboard as soon as\n\
 it is typed.\n\
@@ -764,16 +769,17 @@ returning the empty string if no key is 
 
 DEFUN (pause, args, ,
        "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {} pause ()\n\
 @deftypefnx {Built-in Function} {} pause (@var{n})\n\
 Suspend the execution of the program for @var{n} seconds.\n\
 \n\
 @var{n} is a positive real value and may be a fraction of a second.\n\
+\n\
 If invoked without an input arguments then the program is suspended until a\n\
 character is typed.\n\
 \n\
 The following example prints a message and then waits 5 seconds before\n\
 clearing the screen.\n\
 \n\
 @example\n\
 @group\n\
@@ -871,19 +877,21 @@ Suspend the execution of the program for
 %!error (sleep ())
 %!error (sleep (1, 2))
 */
 
 DEFUN (usleep, args, ,
        "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} usleep (@var{microseconds})\n\
 Suspend the execution of the program for the given number of\n\
-microseconds.  On systems where it is not possible to sleep for periods\n\
-of time less than one second, @code{usleep} will pause the execution for\n\
-@code{round (@var{microseconds} / 1e6)} seconds.\n\
+microseconds.\n\
+\n\
+On systems where it is not possible to sleep for periods of time less than\n\
+one second, @code{usleep} will pause the execution for @code{round\n\
+(@var{microseconds} / 1e6)} seconds.\n\
 @seealso{sleep, pause}\n\
 @end deftypefn")
 {
   octave_value_list retval;
 
   if (args.length () == 1)
     {
       double dval = args(0).double_value ();
@@ -919,54 +927,59 @@ of time less than one second, @code{usle
 
 // FIXME: maybe this should only return 1 if IEEE floating
 // point functions really work.
 
 DEFUN (isieee, , ,
        "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} isieee ()\n\
 Return true if your computer @emph{claims} to conform to the IEEE standard\n\
-for floating point calculations.  No actual tests are performed.\n\
+for floating point calculations.\n\
+\n\
+No actual tests are performed.\n\
 @end deftypefn")
 {
   oct_mach_info::float_format flt_fmt = oct_mach_info::native_float_format ();
 
   return octave_value (flt_fmt == oct_mach_info::flt_fmt_ieee_little_endian
                        || flt_fmt == oct_mach_info::flt_fmt_ieee_big_endian);
 }
 
 /*
 %!assert (islogical (isieee ()))
 */
 
 DEFUN (native_float_format, , ,
        "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} native_float_format ()\n\
-Return the native floating point format as a string\n\
+Return the native floating point format as a string.\n\
 @end deftypefn")
 {
   oct_mach_info::float_format flt_fmt = oct_mach_info::native_float_format ();
 
   return octave_value (oct_mach_info::float_format_as_string (flt_fmt));
 }
 
 /*
 %!assert (ischar (native_float_format ()))
 */
 
 DEFUN (tilde_expand, args, ,
        "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} tilde_expand (@var{string})\n\
-Perform tilde expansion on @var{string}.  If @var{string} begins with a\n\
-tilde character, (@samp{~}), all of the characters preceding the first\n\
-slash (or all characters, if there is no slash) are treated as a\n\
-possible user name, and the tilde and the following characters up to the\n\
-slash are replaced by the home directory of the named user.  If the\n\
-tilde is followed immediately by a slash, the tilde is replaced by the\n\
-home directory of the user running Octave.  For example:\n\
+Perform tilde expansion on @var{string}.\n\
+\n\
+If @var{string} begins with a tilde character, (@samp{~}), all of the\n\
+characters preceding the first slash (or all characters, if there is no\n\
+slash) are treated as a possible user name, and the tilde and the following\n\
+characters up to the slash are replaced by the home directory of the named\n\
+user.  If the tilde is followed immediately by a slash, the tilde is\n\
+replaced by the home directory of the user running Octave.\n\
+\n\
+For example:\n\
 \n\
 @example\n\
 @group\n\
 tilde_expand (\"~joeuser/bin\")\n\
      @result{} \"/home/joeuser/bin\"\n\
 tilde_expand (\"~/bin\")\n\
      @result{} \"/home/jwe/bin\"\n\
 @end group\n\
diff --git a/libinterp/corefcn/time.cc b/libinterp/corefcn/time.cc
--- a/libinterp/corefcn/time.cc
+++ b/libinterp/corefcn/time.cc
@@ -99,20 +99,21 @@ extract_tm (const octave_scalar_map& m)
   tm.zone (stringfield (m, "zone"));
 
   return tm;
 }
 
 DEFUN (time, args, ,
        "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {@var{seconds} =} time ()\n\
-Return the current time as the number of seconds since the epoch.  The\n\
-epoch is referenced to 00:00:00 CUT (Coordinated Universal Time) 1 Jan\n\
-1970.  For example, on Monday February 17, 1997 at 07:15:06 CUT, the\n\
-value returned by @code{time} was 856163706.\n\
+Return the current time as the number of seconds since the epoch.\n\
+\n\
+The epoch is referenced to 00:00:00 CUT (Coordinated Universal Time) 1 Jan\n\
+1970.  For example, on Monday February 17, 1997 at 07:15:06 CUT, the value\n\
+returned by @code{time} was 856163706.\n\
 @seealso{strftime, strptime, localtime, gmtime, mktime, now, date, clock, datenum, datestr, datevec, calendar, weekday}\n\
 @end deftypefn")
 {
   octave_value retval;
 
   if (args.length () == 0)
     retval = octave_time ();
   else
@@ -127,16 +128,17 @@ value returned by @code{time} was 856163
 %!error time (1)
 */
 
 DEFUN (gmtime, args, ,
        "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {@var{tm_struct} =} gmtime (@var{t})\n\
 Given a value returned from @code{time}, or any non-negative integer,\n\
 return a time structure corresponding to CUT (Coordinated Universal Time).\n\
+\n\
 For example:\n\
 \n\
 @example\n\
 @group\n\
 gmtime (time ())\n\
      @result{} @{\n\
            usec = 0\n\
            sec = 6\n\
@@ -248,18 +250,20 @@ localtime (time ())\n\
 
 %!error localtime ()
 %!error localtime (1, 2)
 */
 
 DEFUN (mktime, args, ,
        "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {@var{seconds} =} mktime (@var{tm_struct})\n\
-Convert a time structure corresponding to the local time to the number\n\
-of seconds since the epoch.  For example:\n\
+Convert a time structure corresponding to the local time to the number of\n\
+seconds since the epoch.\n\
+\n\
+For example:\n\
 \n\
 @example\n\
 @group\n\
 mktime (localtime (time ()))\n\
      @result{} 856163706\n\
 @end group\n\
 @end example\n\
 @seealso{strftime, strptime, localtime, gmtime, time, now, date, clock, datenum, datestr, datevec, calendar, weekday}\n\
@@ -304,35 +308,36 @@ mktime (localtime (time ()))\n\
 %!error mktime (1)
 %!error mktime (1, 2, 3)
 %!error mktime (struct ("year", "foo"))
 */
 
 DEFUN (strftime, args, ,
        "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} strftime (@var{fmt}, @var{tm_struct})\n\
-Format the time structure @var{tm_struct} in a flexible way using the\n\
-format string @var{fmt} that contains @samp{%} substitutions\n\
-similar to those in @code{printf}.  Except where noted, substituted\n\
-fields have a fixed size; numeric fields are padded if necessary.\n\
-Padding is with zeros by default; for fields that display a single\n\
-number, padding can be changed or inhibited by following the @samp{%}\n\
-with one of the modifiers described below.  Unknown field specifiers are\n\
-copied as normal characters.  All other characters are copied to the\n\
-output without change.  For example:\n\
+Format the time structure @var{tm_struct} in a flexible way using the format\n\
+string @var{fmt} that contains @samp{%} substitutions similar to those in\n\
+@code{printf}.\n\
+\n\
+Except where noted, substituted fields have a fixed size; numeric fields are\n\
+padded if necessary.  Padding is with zeros by default; for fields that\n\
+display a single number, padding can be changed or inhibited by following\n\
+the @samp{%} with one of the modifiers described below.  Unknown field\n\
+specifiers are copied as normal characters.  All other characters are copied\n\
+to the output without change.  For example:\n\
 \n\
 @example\n\
 @group\n\
 strftime (\"%r (%Z) %A %e %B %Y\", localtime (time ()))\n\
       @result{} \"01:15:06 AM (CST) Monday 17 February 1997\"\n\
 @end group\n\
 @end example\n\
 \n\
-Octave's @code{strftime} function supports a superset of the ANSI C\n\
-field specifiers.\n\
+Octave's @code{strftime} function supports a superset of the ANSI C field\n\
+specifiers.\n\
 \n\
 @noindent\n\
 Literal character fields:\n\
 \n\
 @table @code\n\
 @item %%\n\
 % character.\n\
 \n\
diff --git a/libinterp/corefcn/toplev.cc b/libinterp/corefcn/toplev.cc
--- a/libinterp/corefcn/toplev.cc
+++ b/libinterp/corefcn/toplev.cc
@@ -953,25 +953,26 @@ enum system_exec_type { et_sync, et_asyn
 
 DEFUN (system, args, nargout,
        "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {} system (\"@var{string}\")\n\
 @deftypefnx {Built-in Function} {} system (\"@var{string}\", @var{return_output})\n\
 @deftypefnx {Built-in Function} {} system (\"@var{string}\", @var{return_output}, @var{type})\n\
 @deftypefnx {Built-in Function} {[@var{status}, @var{output}] =} system (@dots{})\n\
 Execute a shell command specified by @var{string}.\n\
-If the optional argument @var{type} is @qcode{\"async\"}, the process\n\
-is started in the background and the process ID of the child process\n\
-is returned immediately.  Otherwise, the child process is started and\n\
-Octave waits until it exits.  If the @var{type} argument is omitted, it\n\
-defaults to the value @qcode{\"sync\"}.\n\
+\n\
+If the optional argument @var{type} is @qcode{\"async\"}, the process is\n\
+started in the background and the process ID of the child process is\n\
+returned immediately.  Otherwise, the child process is started and Octave\n\
+waits until it exits.  If the @var{type} argument is omitted, it defaults to\n\
+the value @qcode{\"sync\"}.\n\
 \n\
 If @var{system} is called with one or more output arguments, or if the\n\
 optional argument @var{return_output} is true and the subprocess is started\n\
-synchronously, then the output from the command is returned as a variable.  \n\
+synchronously, then the output from the command is returned as a variable.\n\
 Otherwise, if the subprocess is executed synchronously, its output is sent\n\
 to the standard output.  To send the output of a command executed with\n\
 @code{system} through the pager, use a command like\n\
 \n\
 @example\n\
 @group\n\
 [output, text] = system (\"cmd\");\n\
 disp (text);\n\
@@ -1183,34 +1184,33 @@ function last_words ()\n\
 endfunction\n\
 atexit (\"last_words\");\n\
 @end group\n\
 @end example\n\
 \n\
 @noindent\n\
 will print the message @qcode{\"Bye bye\"} when Octave exits.\n\
 \n\
-The additional argument @var{flag} will register or unregister\n\
-@var{fcn} from the list of functions to be called when Octave\n\
-exits.  If @var{flag} is true, the function is registered, and if\n\
-@var{flag} is false, it is unregistered.  For example,\n\
-after registering the function @code{last_words} above,\n\
+The additional argument @var{flag} will register or unregister @var{fcn}\n\
+from the list of functions to be called when Octave exits.  If @var{flag} is\n\
+true, the function is registered, and if @var{flag} is false, it is\n\
+unregistered.  For example, after registering the function @code{last_words}\n\
+above,\n\
 \n\
 @example\n\
 atexit (\"last_words\", false);\n\
 @end example\n\
 \n\
 @noindent\n\
 will remove the function from the list and Octave will not call\n\
 @code{last_words} when it exits.\n\
 \n\
 Note that @code{atexit} only removes the first occurrence of a function\n\
-from the list, so if a function was placed in the list multiple\n\
-times with @code{atexit}, it must also be removed from the list\n\
-multiple times.\n\
+from the list, so if a function was placed in the list multiple times with\n\
+@code{atexit}, it must also be removed from the list multiple times.\n\
 @seealso{quit}\n\
 @end deftypefn")
 {
   octave_value_list retval;
 
   int nargin = args.length ();
 
   if (nargin == 1 || nargin == 2)
diff --git a/libinterp/corefcn/tril.cc b/libinterp/corefcn/tril.cc
--- a/libinterp/corefcn/tril.cc
+++ b/libinterp/corefcn/tril.cc
@@ -350,26 +350,27 @@ DEFUN (tril, args, ,
 @deftypefn  {Function File} {} tril (@var{A})\n\
 @deftypefnx {Function File} {} tril (@var{A}, @var{k})\n\
 @deftypefnx {Function File} {} tril (@var{A}, @var{k}, @var{pack})\n\
 @deftypefnx {Function File} {} triu (@var{A})\n\
 @deftypefnx {Function File} {} triu (@var{A}, @var{k})\n\
 @deftypefnx {Function File} {} triu (@var{A}, @var{k}, @var{pack})\n\
 Return a new matrix formed by extracting the lower (@code{tril})\n\
 or upper (@code{triu}) triangular part of the matrix @var{A}, and\n\
-setting all other elements to zero.  The second argument is optional,\n\
-and specifies how many diagonals above or below the main diagonal should\n\
-also be set to zero.\n\
+setting all other elements to zero.\n\
+\n\
+The second argument is optional, and specifies how many diagonals above or\n\
+below the main diagonal should also be set to zero.\n\
 \n\
-The default value of @var{k} is zero, so that @code{triu} and\n\
-@code{tril} normally include the main diagonal as part of the result.\n\
+The default value of @var{k} is zero, so that @code{triu} and @code{tril}\n\
+normally include the main diagonal as part of the result.\n\
 \n\
-If the value of @var{k} is nonzero integer, the selection of elements\n\
-starts at an offset of @var{k} diagonals above or below the main\n\
-diagonal; above for positive @var{k} and below for negative @var{k}.\n\
+If the value of @var{k} is nonzero integer, the selection of elements starts\n\
+at an offset of @var{k} diagonals above or below the main diagonal; above\n\
+for positive @var{k} and below for negative @var{k}.\n\
 \n\
 The absolute value of @var{k} must not be greater than the number of\n\
 subdiagonals or superdiagonals.\n\
 \n\
 For example:\n\
 \n\
 @example\n\
 @group\n\
@@ -402,16 +403,17 @@ above other.\n\
 }
 
 DEFUN (triu, args, ,
        "-*- texinfo -*-\n\
 @deftypefn  {Function File} {} triu (@var{A})\n\
 @deftypefnx {Function File} {} triu (@var{A}, @var{k})\n\
 @deftypefnx {Function File} {} triu (@var{A}, @var{k}, @var{pack})\n\
 See the documentation for the @code{tril} function (@pxref{tril}).\n\
+@seealso{tril}\n\
 @end deftypefn")
 {
   return do_trilu ("triu", args);
 }
 
 /*
 %!test
 %! a = [1, 2, 3; 4, 5, 6; 7, 8, 9; 10, 11, 12];
diff --git a/libinterp/corefcn/tsearch.cc b/libinterp/corefcn/tsearch.cc
--- a/libinterp/corefcn/tsearch.cc
+++ b/libinterp/corefcn/tsearch.cc
@@ -57,20 +57,21 @@ inline double min (double a, double b, d
 // given point
 
 // e.g., build up a neighbouring triangle structure and use a simplex-like
 // method to traverse it
 
 DEFUN (tsearch, args, ,
        "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {@var{idx} =} tsearch (@var{x}, @var{y}, @var{t}, @var{xi}, @var{yi})\n\
-Search for the enclosing Delaunay convex hull.  For @code{@var{t} =\n\
-delaunay (@var{x}, @var{y})}, finds the index in @var{t} containing the\n\
-points @code{(@var{xi}, @var{yi})}.  For points outside the convex hull,\n\
-@var{idx} is NaN.\n\
+Search for the enclosing Delaunay convex hull.\n\
+\n\
+For @code{@var{t} = delaunay (@var{x}, @var{y})}, finds the index in @var{t}\n\
+containing the points @code{(@var{xi}, @var{yi})}.  For points outside the\n\
+convex hull, @var{idx} is NaN.\n\
 @seealso{delaunay, delaunayn}\n\
 @end deftypefn")
 {
   const double eps=1.0e-12;
 
   octave_value_list retval;
   const int nargin = args.length ();
   if (nargin != 5)
diff --git a/libinterp/corefcn/typecast.cc b/libinterp/corefcn/typecast.cc
--- a/libinterp/corefcn/typecast.cc
+++ b/libinterp/corefcn/typecast.cc
@@ -86,18 +86,18 @@ reinterpret_copy (const void *data, octa
       return ArrayType ();
     }
 }
 
 
 DEFUN (typecast, args, ,
        "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {@var{y} =} typecast (@var{x}, \"@var{class}\")\n\
-Return a new array @var{y} resulting from interpreting the data of\n\
-@var{x} in memory as data of the numeric class @var{class}.\n\
+Return a new array @var{y} resulting from interpreting the data of @var{x}\n\
+in memory as data of the numeric class @var{class}.\n\
 \n\
 Both the class of @var{x} and @var{class} must be one of the built-in\n\
 numeric classes:\n\
 \n\
 @example\n\
 @group\n\
 \"logical\"\n\
 \"char\"\n\
@@ -112,24 +112,27 @@ numeric classes:\n\
 \"double\"\n\
 \"single\"\n\
 \"double complex\"\n\
 \"single complex\"\n\
 @end group\n\
 @end example\n\
 \n\
 @noindent\n\
-the last two are reserved for @var{class}; they indicate that a\n\
+the last two are only used with @var{class}; they indicate that a\n\
 complex-valued result is requested.  Complex arrays are stored in memory as\n\
 consecutive pairs of real numbers.  The sizes of integer types are given by\n\
 their bit counts.  Both logical and char are typically one byte wide;\n\
 however, this is not guaranteed by C++.  If your system is IEEE conformant,\n\
 single and double will be 4 bytes and 8 bytes wide, respectively.\n\
-@qcode{\"logical\"} is not allowed for @var{class}.  If the input is a row\n\
-vector, the return value is a row vector, otherwise it is a column vector.  \n\
+@qcode{\"logical\"} is not allowed for @var{class}.\n\
+\n\
+If the input is a row vector, the return value is a row vector, otherwise it\n\
+is a column vector.\n\
+\n\
 If the bit length of @var{x} is not divisible by that of @var{class}, an\n\
 error occurs.\n\
 \n\
 An example of the use of typecast on a little-endian machine is\n\
 \n\
 @example\n\
 @group\n\
 @var{x} = uint16 ([1, 65535]);\n\
@@ -320,18 +323,20 @@ Return a new array @var{y} resulting fro
 \"uint32\"\n\
 \"uint64\"\n\
 @end group\n\
 @end example\n\
 \n\
 The number of elements of @var{x} should be divisible by the bit length of\n\
 @var{class}.  If it is not, excess bits are discarded.  Bits come in\n\
 increasing order of significance, i.e., @code{x(1)} is bit 0, @code{x(2)} is\n\
-bit 1, etc.  The result is a row vector if @var{x} is a row vector, otherwise\n\
-it is a column vector.\n\
+bit 1, etc.\n\
+\n\
+The result is a row vector if @var{x} is a row vector, otherwise it is a\n\
+column vector.\n\
 @seealso{bitunpack, typecast}\n\
 @end deftypefn")
 {
   octave_value retval;
 
   if (args.length () != 2)
     print_usage ();
   else if (! args(0).is_bool_type ())
diff --git a/libinterp/corefcn/urlwrite.cc b/libinterp/corefcn/urlwrite.cc
--- a/libinterp/corefcn/urlwrite.cc
+++ b/libinterp/corefcn/urlwrite.cc
@@ -290,45 +290,49 @@ ch_manager *ch_manager::instance = 0;
 
 DEFUN (urlwrite, args, nargout,
        "-*- texinfo -*-\n\
 @deftypefn  {Loadable Function} {} urlwrite (@var{url}, @var{localfile})\n\
 @deftypefnx {Loadable Function} {@var{f} =} urlwrite (@var{url}, @var{localfile})\n\
 @deftypefnx {Loadable Function} {[@var{f}, @var{success}] =} urlwrite (@var{url}, @var{localfile})\n\
 @deftypefnx {Loadable Function} {[@var{f}, @var{success}, @var{message}] =} urlwrite (@var{url}, @var{localfile})\n\
 Download a remote file specified by its @var{url} and save it as\n\
-@var{localfile}.  For example:\n\
+@var{localfile}.\n\
+\n\
+For example:\n\
 \n\
 @example\n\
 @group\n\
 urlwrite (\"ftp://ftp.octave.org/pub/README\",\n\
           \"README.txt\");\n\
 @end group\n\
 @end example\n\
 \n\
-The full path of the downloaded file is returned in @var{f}.  The\n\
-variable @var{success} is 1 if the download was successful,\n\
-otherwise it is 0 in which case @var{message} contains an error\n\
-message.  If no output argument is specified and an error occurs,\n\
-then the error is signaled through Octave's error handling mechanism.\n\
+The full path of the downloaded file is returned in @var{f}.\n\
 \n\
-This function uses libcurl.  Curl supports, among others, the HTTP,\n\
-FTP and FILE protocols.  Username and password may be specified in\n\
-the URL, for example:\n\
+The variable @var{success} is 1 if the download was successful,\n\
+otherwise it is 0 in which case @var{message} contains an error message.\n\
+ \n\
+If no output argument is specified and an error occurs, then the error is\n\
+signaled through Octave's error handling mechanism.\n\
+\n\
+This function uses libcurl.  Curl supports, among others, the HTTP, FTP and\n\
+FILE protocols.  Username and password may be specified in the URL, for\n\
+example:\n\
 \n\
 @example\n\
 @group\n\
 urlwrite (\"http://username:password@@example.com/file.txt\",\n\
           \"file.txt\");\n\
 @end group\n\
 @end example\n\
 \n\
 GET and POST requests can be specified by @var{method} and @var{param}.\n\
-The parameter @var{method} is either @samp{get} or @samp{post}\n\
-and @var{param} is a cell array of parameter and value pairs.\n\
+The parameter @var{method} is either @samp{get} or @samp{post} and\n\
+@var{param} is a cell array of parameter and value pairs.\n\
 For example:\n\
 \n\
 @example\n\
 @group\n\
 urlwrite (\"http://www.google.com/search\", \"search.html\",\n\
           \"get\", @{\"query\", \"octave\"@});\n\
 @end group\n\
 @end example\n\
@@ -453,38 +457,42 @@ urlwrite (\"http://www.google.com/search
 
 DEFUN (urlread, args, nargout,
        "-*- texinfo -*-\n\
 @deftypefn  {Loadable Function} {@var{s} =} urlread (@var{url})\n\
 @deftypefnx {Loadable Function} {[@var{s}, @var{success}] =} urlread (@var{url})\n\
 @deftypefnx {Loadable Function} {[@var{s}, @var{success}, @var{message}] =} urlread (@var{url})\n\
 @deftypefnx {Loadable Function} {[@dots{}] =} urlread (@var{url}, @var{method}, @var{param})\n\
 Download a remote file specified by its @var{url} and return its content\n\
-in string @var{s}.  For example:\n\
+in string @var{s}.\n\
+\n\
+For example:\n\
 \n\
 @example\n\
 s = urlread (\"ftp://ftp.octave.org/pub/README\");\n\
 @end example\n\
 \n\
 The variable @var{success} is 1 if the download was successful,\n\
 otherwise it is 0 in which case @var{message} contains an error\n\
-message.  If no output argument is specified and an error occurs,\n\
-then the error is signaled through Octave's error handling mechanism.\n\
+message.\n\
 \n\
-This function uses libcurl.  Curl supports, among others, the HTTP,\n\
-FTP and FILE protocols.  Username and password may be specified in the\n\
-URL@.  For example:\n\
+If no output argument is specified and an error occurs, then the error is\n\
+signaled through Octave's error handling mechanism.\n\
+\n\
+This function uses libcurl.  Curl supports, among others, the HTTP, FTP and\n\
+FILE protocols.  Username and password may be specified in the URL@.  For\n\
+example:\n\
 \n\
 @example\n\
 s = urlread (\"http://user:password@@example.com/file.txt\");\n\
 @end example\n\
 \n\
 GET and POST requests can be specified by @var{method} and @var{param}.\n\
-The parameter @var{method} is either @samp{get} or @samp{post}\n\
-and @var{param} is a cell array of parameter and value pairs.\n\
+The parameter @var{method} is either @samp{get} or @samp{post} and\n\
+@var{param} is a cell array of parameter and value pairs.\n\
 For example:\n\
 \n\
 @example\n\
 @group\n\
 s = urlread (\"http://www.google.com/search\", \"get\",\n\
             @{\"query\", \"octave\"@});\n\
 @end group\n\
 @end example\n\
diff --git a/libinterp/corefcn/utils.cc b/libinterp/corefcn/utils.cc
--- a/libinterp/corefcn/utils.cc
+++ b/libinterp/corefcn/utils.cc
@@ -290,25 +290,26 @@ make_absolute (const string_vector& sv)
 
 DEFUN (file_in_loadpath, args, ,
        "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {} file_in_loadpath (@var{file})\n\
 @deftypefnx {Built-in Function} {} file_in_loadpath (@var{file}, \"all\")\n\
 \n\
 Return the absolute name of @var{file} if it can be found in\n\
 the list of directories specified by @code{path}.\n\
+\n\
 If no file is found, return an empty character string.\n\
 \n\
-If the first argument is a cell array of strings, search each\n\
-directory of the loadpath for element of the cell array and return\n\
-the first that matches.\n\
+If the first argument is a cell array of strings, search each directory of\n\
+the loadpath for element of the cell array and return the first that\n\
+matches.\n\
 \n\
-If the second optional argument @qcode{\"all\"} is supplied, return\n\
-a cell array containing the list of all files that have the same\n\
-name in the path.  If no files are found, return an empty cell array.\n\
+If the second optional argument @qcode{\"all\"} is supplied, return a cell\n\
+array containing the list of all files that have the same name in the path. \n\
+If no files are found, return an empty cell array.\n\
 @seealso{file_in_path, dir_in_loadpath, path}\n\
 @end deftypefn")
 {
   octave_value retval;
 
   int nargin = args.length ();
 
   if (nargin == 1 || nargin == 2)
@@ -359,35 +360,35 @@ name in the path.  If no files are found
 %!error file_in_loadpath ([])
 %!error file_in_loadpath ("plot.m", "bar")
 */
 
 DEFUN (file_in_path, args, ,
        "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {} file_in_path (@var{path}, @var{file})\n\
 @deftypefnx {Built-in Function} {} file_in_path (@var{path}, @var{file}, \"all\")\n\
-Return the absolute name of @var{file} if it can be found in\n\
-@var{path}.  The value of @var{path} should be a colon-separated list of\n\
-directories in the format described for @code{path}.  If no file\n\
-is found, return an empty character string.  For example:\n\
+Return the absolute name of @var{file} if it can be found in @var{path}.\n\
+\n\
+The value of @var{path} should be a colon-separated list of directories in\n\
+the format described for @code{path}.  If no file is found, return an empty\n\
+character string.  For example:\n\
 \n\
 @example\n\
 @group\n\
 file_in_path (EXEC_PATH, \"sh\")\n\
      @result{} \"/bin/sh\"\n\
 @end group\n\
 @end example\n\
 \n\
-If the second argument is a cell array of strings, search each\n\
-directory of the path for element of the cell array and return\n\
-the first that matches.\n\
+If the second argument is a cell array of strings, search each directory of\n\
+the path for element of the cell array and return the first that matches.\n\
 \n\
-If the third optional argument @qcode{\"all\"} is supplied, return\n\
-a cell array containing the list of all files that have the same\n\
-name in the path.  If no files are found, return an empty cell array.\n\
+If the third optional argument @qcode{\"all\"} is supplied, return a cell\n\
+array containing the list of all files that have the same name in the path. \n\
+If no files are found, return an empty cell array.\n\
 @seealso{file_in_loadpath, dir_in_loadpath, path}\n\
 @end deftypefn")
 {
   octave_value retval;
 
   int nargin = args.length ();
 
   if (nargin == 2 || nargin == 3)
@@ -689,21 +690,31 @@ do_string_escapes (const std::string& s)
       i++;
       j++;
     }
 
   retval.resize (i);
 
   return retval;
 }
+/*
+Escape sequences begin with a leading backslash (@qcode{"@xbackslashchar{}"})\n\
+followed by 1--3 characters (.e.g., @qcode{"@xbackslashchar{}n"} => newline).\n\
 
+
+   */
 DEFUN (do_string_escapes, args, ,
        "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} do_string_escapes (@var{string})\n\
-Convert special characters in @var{string} to their escaped forms.\n\
+Convert escape sequences in @var{string} to the characters they represent.\n\
+\n\
+Escape sequences begin with a leading backslash\n\
+(@qcode{'@xbackslashchar{}'}) followed by 1--3 characters\n\
+(.e.g., @qcode{\"@xbackslashchar{}n\"} => newline).\n\
+@seealso{undo_string_escapes}\n\
 @end deftypefn")
 {
   octave_value retval;
 
   int nargin = args.length ();
 
   if (nargin == 1)
     {
@@ -801,41 +812,42 @@ undo_string_escapes (const std::string& 
     retval.append (undo_string_escape (s[i]));
 
   return retval;
 }
 
 DEFUN (undo_string_escapes, args, ,
        "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} undo_string_escapes (@var{s})\n\
-Convert special characters in strings back to their escaped forms.  For\n\
-example, the expression\n\
+Convert special characters in strings back to their escaped forms.\n\
+\n\
+For example, the expression\n\
 \n\
 @example\n\
 bell = \"\\a\";\n\
 @end example\n\
 \n\
 @noindent\n\
-assigns the value of the alert character (control-g, ASCII code 7) to\n\
-the string variable @code{bell}.  If this string is printed, the\n\
-system will ring the terminal bell (if it is possible).  This is\n\
-normally the desired outcome.  However, sometimes it is useful to be\n\
-able to print the original representation of the string, with the\n\
-special characters replaced by their escape sequences.  For example,\n\
+assigns the value of the alert character (control-g, ASCII code 7) to the\n\
+string variable @code{bell}.  If this string is printed, the system will\n\
+ring the terminal bell (if it is possible).  This is normally the desired\n\
+outcome.  However, sometimes it is useful to be able to print the original\n\
+representation of the string, with the special characters replaced by their\n\
+escape sequences.  For example,\n\
 \n\
 @example\n\
 @group\n\
 octave:13> undo_string_escapes (bell)\n\
 ans = \\a\n\
 @end group\n\
 @end example\n\
 \n\
 @noindent\n\
-replaces the unprintable alert character with its printable\n\
-representation.\n\
+replaces the unprintable alert character with its printable representation.\n\
+@seealso{do_string_escapes}\n\
 @end deftypefn")
 {
   octave_value retval;
 
   int nargin = args.length ();
 
   if (nargin == 1)
     {
@@ -921,17 +933,19 @@ Return true if @var{file} is a rooted-re
 %!error is_rooted_relative_filename ()
 %!error is_rooted_relative_filename ("foo", "bar")
 */
 
 DEFUN (make_absolute_filename, args, ,
        "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} make_absolute_filename (@var{file})\n\
 Return the full name of @var{file} beginning from the root of the file\n\
-system.  No check is done for the existence of @var{file}.\n\
+system.\n\
+\n\
+No check is done for the existence of @var{file}.\n\
 @seealso{canonicalize_file_name, is_absolute_filename, is_rooted_relative_filename, isdir}\n\
 @end deftypefn")
 {
   octave_value retval = std::string ();
 
   if (args.length () == 1)
     {
       std::string nm = args(0).string_value ();
@@ -953,25 +967,26 @@ system.  No check is done for the existe
 %!error make_absolute_filename ()
 %!error make_absolute_filename ("foo", "bar")
 */
 
 DEFUN (dir_in_loadpath, args, ,
        "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {} dir_in_loadpath (@var{dir})\n\
 @deftypefnx {Built-in Function} {} dir_in_loadpath (@var{dir}, \"all\")\n\
-Return the full name of the path element matching @var{dir}.  The\n\
-match is performed at the end of each path element.  For example, if\n\
+Return the full name of the path element matching @var{dir}.\n\
+\n\
+The match is performed at the end of each path element.  For example, if\n\
 @var{dir} is @qcode{\"foo/bar\"}, it matches the path element\n\
 @nospell{@qcode{\"/some/dir/foo/bar\"}}, but not\n\
 @nospell{@qcode{\"/some/dir/foo/bar/baz\"}}\n\
 @nospell{@qcode{\"/some/dir/allfoo/bar\"}}.\n\
 \n\
-The second argument is optional.  If it is supplied, return a cell array\n\
-containing all name matches rather than just the first.\n\
+If the optional second argument is supplied, return a cell array containing\n\
+all name matches rather than just the first.\n\
 @seealso{file_in_path, file_in_loadpath, path}\n\
 @end deftypefn")
 {
   octave_value retval = std::string ();
 
   int nargin = args.length ();
 
   std::string dir;
@@ -1018,16 +1033,17 @@ DEFUNX ("errno", Ferrno, args, ,
         "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {@var{err} =} errno ()\n\
 @deftypefnx {Built-in Function} {@var{err} =} errno (@var{val})\n\
 @deftypefnx {Built-in Function} {@var{err} =} errno (@var{name})\n\
 Return the current value of the system-dependent variable errno,\n\
 set its value to @var{val} and return the previous value, or return\n\
 the named error code given @var{name} as a character string, or -1\n\
 if @var{name} is not found.\n\
+@seealso{errno_list}\n\
 @end deftypefn")
 {
   octave_value retval;
 
   int nargin = args.length ();
 
   if (nargin == 1)
     {
@@ -1069,16 +1085,17 @@ if @var{name} is not found.\n\
 
 %!error errno ("foo", 1)
 */
 
 DEFUN (errno_list, args, ,
        "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} errno_list ()\n\
 Return a structure containing the system-dependent errno values.\n\
+@seealso{errno}\n\
 @end deftypefn")
 {
   octave_value retval;
 
   if (args.length () == 0)
     retval = octave_errno::list ();
   else
     print_usage ();
@@ -1354,19 +1371,21 @@ octave_sleep (double seconds)
 
 DEFUN (isindex, args, ,
        "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {} isindex (@var{ind})\n\
 @deftypefnx {Built-in Function} {} isindex (@var{ind}, @var{n})\n\
 Return true if @var{ind} is a valid index.\n\
 \n\
 Valid indices are either positive integers (although possibly of real data\n\
-type), or logical arrays.  If present, @var{n} specifies the maximum extent\n\
-of the dimension to be indexed.  When possible the internal result is cached\n\
-so that subsequent indexing using @var{ind} will not perform the check again.\n\
+type), or logical arrays.\n\
+\n\
+If present, @var{n} specifies the maximum extent of the dimension to be\n\
+indexed.  When possible the internal result is cached so that subsequent\n\
+indexing using @var{ind} will not perform the check again.\n\
 \n\
 Implementation Note: Strings are first converted to double values before the\n\
 checks for valid indices are made.  Unless a string contains the NULL\n\
 character @nospell{\"\\0\"}, it will always be a valid index.\n\
 @end deftypefn")
 {
   octave_value retval;
   int nargin = args.length ();
@@ -1520,17 +1539,16 @@ octave_preserve_stream_state::~octave_pr
 }
 
 DEFUN (isstudent, args, ,
        "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} isstudent ()\n\
 Return true if running in the student edition of @sc{matlab}.\n\
 \n\
 @code{isstudent} always returns false in Octave.\n\
-\n\
 @seealso{false}\n\
 @end deftypefn")
 {
   if (args.length () != 0)
     print_usage ();
 
   return octave_value (false);
 }
diff --git a/libinterp/corefcn/variables.cc b/libinterp/corefcn/variables.cc
--- a/libinterp/corefcn/variables.cc
+++ b/libinterp/corefcn/variables.cc
@@ -348,16 +348,17 @@ do_isglobal (const octave_value_list& ar
 
   return symbol_table::is_global (name);
 }
 
 DEFUN (isglobal, args, ,
        "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} isglobal (@var{name})\n\
 Return true if @var{name} is a globally visible variable.\n\
+\n\
 For example:\n\
 \n\
 @example\n\
 @group\n\
 global x\n\
 isglobal (\"x\")\n\
    @result{} 1\n\
 @end group\n\
@@ -541,18 +542,18 @@ The return code @var{c} is one of\n\
 @item 103\n\
 @var{name} is a function not associated with a file (entered on the command\n\
 line).\n\
 \n\
 @item 0\n\
 @var{name} does not exist.\n\
 @end table\n\
 \n\
-If the optional argument @var{type} is supplied, check only for\n\
-symbols of the specified type.  Valid types are\n\
+If the optional argument @var{type} is supplied, check only for symbols of\n\
+the specified type.  Valid types are\n\
 \n\
 @table @asis\n\
 @item @qcode{\"var\"}\n\
 Check only for variables.\n\
 \n\
 @item @qcode{\"builtin\"}\n\
 Check only for built-in functions.\n\
 \n\
@@ -564,17 +565,17 @@ Check only for files and directories.\n\
 \n\
 @item @qcode{\"class\"}\n\
 Check only for classes.  (Note: This option is accepted, but not currently\n\
 implemented)\n\
 @end table\n\
 \n\
 If no type is given, and there are multiple possible matches for name,\n\
 @code{exist} will return a code according to the following priority list:\n\
-variable, built-in function, oct-file, directory, file, class. \n\
+variable, built-in function, oct-file, directory, file, class.\n\
 \n\
 @code{exist} returns 2 if a regular file called @var{name} is present in\n\
 Octave's search path.  If you want information about other types of files\n\
 not on the search path you should use some combination of the functions\n\
 @code{file_in_path} and @code{stat} instead.\n\
 \n\
 @seealso{file_in_loadpath, file_in_path, dir_in_loadpath, stat}\n\
 @end deftypefn")
@@ -1841,31 +1842,33 @@ do_who (int argc, const string_vector& a
 }
 
 DEFUN (who, args, nargout,
        "-*- texinfo -*-\n\
 @deftypefn  {Command} {} who\n\
 @deftypefnx {Command} {} who pattern @dots{}\n\
 @deftypefnx {Command} {} who option pattern @dots{}\n\
 @deftypefnx {Command} {C =} who (\"pattern\", @dots{})\n\
-List currently defined variables matching the given patterns.  Valid\n\
-pattern syntax is the same as described for the @code{clear} command.\n\
+List currently defined variables matching the given patterns.\n\
+\n\
+Valid pattern syntax is the same as described for the @code{clear} command.\n\
 If no patterns are supplied, all variables are listed.\n\
+\n\
 By default, only variables visible in the local scope are displayed.\n\
 \n\
-The following are valid options but may not be combined.\n\
+The following are valid options, but may not be combined.\n\
 \n\
 @table @code\n\
 @item global\n\
 List variables in the global scope rather than the current scope.\n\
 \n\
 @item -regexp\n\
 The patterns are considered to be regular expressions when matching the\n\
-variables to display.  The same pattern syntax accepted by\n\
-the @code{regexp} function is used.\n\
+variables to display.  The same pattern syntax accepted by the @code{regexp}\n\
+function is used.\n\
 \n\
 @item -file\n\
 The next argument is treated as a filename.  All variables found within the\n\
 specified file are listed.  No patterns are accepted when reading variables\n\
 from a file.\n\
 @end table\n\
 \n\
 If called as a function, return a cell array of defined variable names\n\
@@ -1892,19 +1895,22 @@ matching the given patterns.\n\
 
 DEFUN (whos, args, nargout,
        "-*- texinfo -*-\n\
 @deftypefn  {Command} {} whos\n\
 @deftypefnx {Command} {} whos pattern @dots{}\n\
 @deftypefnx {Command} {} whos option pattern @dots{}\n\
 @deftypefnx {Command} {S =} whos (\"pattern\", @dots{})\n\
 Provide detailed information on currently defined variables matching the\n\
-given patterns.  Options and pattern syntax are the same as for the\n\
-@code{who} command.  Extended information about each variable is\n\
-summarized in a table with the following default entries.\n\
+given patterns.\n\
+\n\
+Options and pattern syntax are the same as for the @code{who} command.\n\
+\n\
+Extended information about each variable is summarized in a table with the\n\
+following default entries.\n\
 \n\
 @table @asis\n\
 @item Attr\n\
 Attributes of the listed variable.  Possible attributes are:\n\
 \n\
 @table @asis\n\
 @item blank\n\
 Variable in local scope\n\
@@ -2070,18 +2076,19 @@ Lock the current function into memory so
 
   return retval;
 }
 
 DEFUN (munlock, args, ,
        "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {} munlock ()\n\
 @deftypefnx {Built-in Function} {} munlock (@var{fcn})\n\
-Unlock the named function @var{fcn}.  If no function is named\n\
-then unlock the current function.\n\
+Unlock the named function @var{fcn}.\n\
+\n\
+If no function is named then unlock the current function.\n\
 @seealso{mlock, mislocked, persistent}\n\
 @end deftypefn")
 {
   octave_value_list retval;
 
   if (args.length () == 1)
     {
       if (args(0).is_string ())
@@ -2107,18 +2114,19 @@ then unlock the current function.\n\
   return retval;
 }
 
 
 DEFUN (mislocked, args, ,
        "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {} mislocked ()\n\
 @deftypefnx {Built-in Function} {} mislocked (@var{fcn})\n\
-Return true if the named function @var{fcn} is locked.  If no function is\n\
-named then return true if the current function is locked.\n\
+Return true if the named function @var{fcn} is locked.\n\
+\n\
+If no function is named then return true if the current function is locked.\n\
 @seealso{mlock, munlock, persistent}\n\
 @end deftypefn")
 {
   octave_value retval;
 
   if (args.length () == 1)
     {
       if (args(0).is_string ())
@@ -2365,18 +2373,19 @@ do_matlab_compatible_clear (const string
           return retval; \
         } \
     } \
   while (0)
 
 DEFUN (clear, args, ,
        "-*- texinfo -*-\n\
 @deftypefn {Command} {} clear [options] pattern @dots{}\n\
-Delete the names matching the given patterns from the symbol table.  The\n\
-pattern may contain the following special characters:\n\
+Delete the names matching the given patterns from the symbol table.\n\
+\n\
+The pattern may contain the following special characters:\n\
 \n\
 @table @code\n\
 @item ?\n\
 Match any single character.\n\
 \n\
 @item *\n\
 Match zero or more characters.\n\
 \n\
@@ -2393,54 +2402,56 @@ For example, the command\n\
 clear foo b*r\n\
 @end example\n\
 \n\
 @noindent\n\
 clears the name @code{foo} and all names that begin with the letter\n\
 @code{b} and end with the letter @code{r}.\n\
 \n\
 If @code{clear} is called without any arguments, all user-defined\n\
-variables (local and global) are cleared from the symbol table.  If\n\
-@code{clear} is called with at least one argument, only the visible\n\
+variables (local and global) are cleared from the symbol table.\n\
+\n\
+If @code{clear} is called with at least one argument, only the visible\n\
 names matching the arguments are cleared.  For example, suppose you have\n\
 defined a function @code{foo}, and then hidden it by performing the\n\
 assignment @code{foo = 2}.  Executing the command @kbd{clear foo} once\n\
 will clear the variable definition and restore the definition of\n\
 @code{foo} as a function.  Executing @kbd{clear foo} a second time will\n\
 clear the function definition.\n\
 \n\
 The following options are available in both long and short form\n\
 \n\
 @table @code\n\
 @item -all, -a\n\
-Clears all local and global user-defined variables and all functions\n\
-from the symbol table.\n\
+Clear all local and global user-defined variables and all functions from the\n\
+symbol table.\n\
 \n\
 @item -exclusive, -x\n\
-Clears the variables that don't match the following pattern.\n\
+Clear the variables that don't match the following pattern.\n\
 \n\
 @item -functions, -f\n\
-Clears the function names and the built-in symbols names.\n\
+Clear the function names and the built-in symbols names.\n\
 \n\
 @item -global, -g\n\
-Clears the global symbol names.\n\
+Clear global symbol names.\n\
 \n\
 @item -variables, -v\n\
-Clears the local variable names.\n\
+Clear local variable names.\n\
 \n\
 @item -classes, -c\n\
 Clears the class structure table and clears all objects.\n\
 \n\
 @item -regexp, -r\n\
 The arguments are treated as regular expressions as any variables that\n\
 match will be cleared.\n\
 @end table\n\
 \n\
 With the exception of @code{exclusive}, all long options can be used\n\
 without the dash as well.\n\
+@seealso{who, whos, exist}\n\
 @end deftypefn")
 {
   octave_value_list retval;
 
   int argc = args.length () + 1;
 
   string_vector argv = args.make_argv ("clear");
 
@@ -2586,18 +2597,18 @@ A full format string is:\n\
 @smallexample\n\
 %[modifier]<command>[:width[:left-min[:balance]]];\n\
 @end smallexample\n\
 \n\
 The following command sequences are available:\n\
 \n\
 @table @code\n\
 @item %a\n\
-Prints attributes of variables (g=global, p=persistent,\n\
-f=formal parameter, a=automatic variable).\n\
+Prints attributes of variables (g=global, p=persistent, f=formal parameter,\n\
+a=automatic variable).\n\
 \n\
 @item %b\n\
 Prints number of bytes occupied by variables.\n\
 \n\
 @item %c\n\
 Prints class names of variables.\n\
 \n\
 @item %e\n\
@@ -2637,17 +2648,17 @@ be aligned between entries.  Numbering s
 leftmost column.  @code{left-min} specifies the minimum field width to the\n\
 left of the specified balance column.\n\
 \n\
 The default format is:\n\
 \n\
 @qcode{\"  %a:4; %ln:6; %cs:16:6:1;  %rb:12;  %lc:-1;@xbackslashchar{}n\"}\n\
 \n\
 When called from inside a function with the @qcode{\"local\"} option, the\n\
-variable is changed locally for the function and any subroutines it calls.  \n\
+variable is changed locally for the function and any subroutines it calls.\n\
 The original variable value is restored when exiting the function.\n\
 @seealso{whos}\n\
 @end deftypefn")
 {
   return SET_INTERNAL_VARIABLE (whos_line_format);
 }
 
 static std::string Vmissing_function_hook = "__unimplemented__";
@@ -2656,17 +2667,17 @@ DEFUN (missing_function_hook, args, narg
        "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {@var{val} =} missing_function_hook ()\n\
 @deftypefnx {Built-in Function} {@var{old_val} =} missing_function_hook (@var{new_val})\n\
 @deftypefnx {Built-in Function} {} missing_function_hook (@var{new_val}, \"local\")\n\
 Query or set the internal variable that specifies the function to call when\n\
 an unknown identifier is requested.\n\
 \n\
 When called from inside a function with the @qcode{\"local\"} option, the\n\
-variable is changed locally for the function and any subroutines it calls.  \n\
+variable is changed locally for the function and any subroutines it calls.\n\
 The original variable value is restored when exiting the function.\n\
 @seealso{missing_component_hook}\n\
 @end deftypefn")
 {
   return SET_INTERNAL_VARIABLE (missing_function_hook);
 }
 
 void maybe_missing_function_hook (const std::string& name)
@@ -2718,22 +2729,24 @@ Undocumented internal function.\n\
 static std::string Vmissing_component_hook;
 
 DEFUN (missing_component_hook, args, nargout,
        "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {@var{val} =} missing_component_hook ()\n\
 @deftypefnx {Built-in Function} {@var{old_val} =} missing_component_hook (@var{new_val})\n\
 @deftypefnx {Built-in Function} {} missing_component_hook (@var{new_val}, \"local\")\n\
 Query or set the internal variable that specifies the function to call when\n\
-a component of Octave is missing.  This can be useful for packagers that\n\
-may split the Octave installation into multiple sub-packages, for example,\n\
-to provide a hint to users for how to install the missing components.\n\
+a component of Octave is missing.\n\
+\n\
+This can be useful for packagers that may split the Octave installation into\n\
+multiple sub-packages, for example, to provide a hint to users for how to\n\
+install the missing components.\n\
 \n\
 When called from inside a function with the @qcode{\"local\"} option, the\n\
-variable is changed locally for the function and any subroutines it calls.  \n\
+variable is changed locally for the function and any subroutines it calls.\n\
 The original variable value is restored when exiting the function.\n\
 \n\
 The hook function is expected to be of the form\n\
 \n\
 @example\n\
 @var{fcn} (@var{component})\n\
 @end example\n\
 \n\
diff --git a/libinterp/dldfcn/__magick_read__.cc b/libinterp/dldfcn/__magick_read__.cc
--- a/libinterp/dldfcn/__magick_read__.cc
+++ b/libinterp/dldfcn/__magick_read__.cc
@@ -719,18 +719,18 @@ maybe_initialize_magick (void)
 }
 #endif
 
 DEFUN_DLD (__magick_read__, args, nargout,
            "-*- texinfo -*-\n\
 @deftypefn {Loadable Function} {[@var{img}, @var{map}, @var{alpha}] =} __magick_read__ (@var{fname}, @var{options})\n\
 Read image with GraphicsMagick or ImageMagick.\n\
 \n\
-This is a private internal function not intended for direct use.  Instead\n\
-use @code{imread}.\n\
+This is a private internal function not intended for direct use.\n\
+Use @code{imread} instead.\n\
 \n\
 @seealso{imfinfo, imformats, imread, imwrite}\n\
 @end deftypefn")
 {
   octave_value_list output;
 
 #ifndef HAVE_MAGICK
   gripe_disabled_feature ("imread", "Image IO");
@@ -1383,18 +1383,18 @@ write_file (const std::string& filename,
 
 #endif
 
 DEFUN_DLD (__magick_write__, args, ,
            "-*- texinfo -*-\n\
 @deftypefn {Loadable Function} {} __magick_write__ (@var{fname}, @var{fmt}, @var{img}, @var{map}, @var{options})\n\
 Write image with GraphicsMagick or ImageMagick.\n\
 \n\
-This is a private internal function not intended for direct use.  Instead\n\
-use @code{imwrite}.\n\
+This is a private internal function not intended for direct use.\n\
+Use @code{imwrite} instead.\n\
 \n\
 @seealso{imfinfo, imformats, imread, imwrite}\n\
 @end deftypefn")
 {
   octave_value_list retval;
 
 #ifndef HAVE_MAGICK
   gripe_disabled_feature ("imwrite", "Image IO");
@@ -1784,18 +1784,18 @@ fill_exif_floats (octave_scalar_map& map
 
 #endif
 
 DEFUN_DLD (__magick_finfo__, args, ,
            "-*- texinfo -*-\n\
 @deftypefn {Loadable Function} {} __magick_finfo__ (@var{fname})\n\
 Read image information with GraphicsMagick or ImageMagick.\n\
 \n\
-This is a private internal function not intended for direct use.  Instead\n\
-use @code{imfinfo}.\n\
+This is a private internal function not intended for direct use.\n\
+Use @code{imfinfo} instead.\n\
 \n\
 @seealso{imfinfo, imformats, imread, imwrite}\n\
 @end deftypefn")
 {
   octave_value retval;
 
 #ifndef HAVE_MAGICK
   gripe_disabled_feature ("imfinfo", "Image IO");
diff --git a/libinterp/dldfcn/amd.cc b/libinterp/dldfcn/amd.cc
--- a/libinterp/dldfcn/amd.cc
+++ b/libinterp/dldfcn/amd.cc
@@ -50,41 +50,42 @@ along with Octave; see the file COPYING.
 #define AMD_NAME(name) amd ## name
 #endif
 
 DEFUN_DLD (amd, args, nargout,
            "-*- texinfo -*-\n\
 @deftypefn  {Loadable Function} {@var{p} =} amd (@var{S})\n\
 @deftypefnx {Loadable Function} {@var{p} =} amd (@var{S}, @var{opts})\n\
 \n\
-Return the approximate minimum degree permutation of a matrix.  This\n\
-permutation such that the Cholesky@tie{}factorization of @code{@var{S}\n\
-(@var{p}, @var{p})} tends to be sparser than the Cholesky@tie{}factorization\n\
-of @var{S} itself.  @code{amd} is typically faster than @code{symamd} but\n\
-serves a similar purpose.\n\
+Return the approximate minimum degree permutation of a matrix.\n\
 \n\
-The optional parameter @var{opts} is a structure that controls the\n\
-behavior of @code{amd}.  The fields of the structure are\n\
+This is a permutation such that the Cholesky@tie{}factorization of\n\
+@code{@var{S} (@var{p}, @var{p})} tends to be sparser than the\n\
+Cholesky@tie{}factorization of @var{S} itself.  @code{amd} is typically\n\
+faster than @code{symamd} but serves a similar purpose.\n\
+\n\
+The optional parameter @var{opts} is a structure that controls the behavior\n\
+of @code{amd}.  The fields of the structure are\n\
 \n\
 @table @asis\n\
 @item @var{opts}.dense\n\
 Determines what @code{amd} considers to be a dense row or column of the\n\
 input matrix.  Rows or columns with more than @code{max (16, (dense *\n\
 sqrt (@var{n})))} entries, where @var{n} is the order of the matrix @var{S},\n\
-are ignored by @code{amd} during the calculation of the permutation\n\
-The value of dense must be a positive scalar and its default value is 10.0\n\
+are ignored by @code{amd} during the calculation of the permutation.\n\
+The value of dense must be a positive scalar and the default value is 10.0\n\
 \n\
 @item @var{opts}.aggressive\n\
 If this value is a nonzero scalar, then @code{amd} performs aggressive\n\
 absorption.  The default is not to perform aggressive absorption.\n\
 @end table\n\
 \n\
 The author of the code itself is Timothy A. Davis\n\
-@email{davis@@cise.ufl.edu}, University of Florida (see\n\
-@url{http://www.cise.ufl.edu/research/sparse/amd}).\n\
+@email{davis@@cise.ufl.edu}, University of Florida\n\
+(see @url{http://www.cise.ufl.edu/research/sparse/amd}).\n\
 @seealso{symamd, colamd}\n\
 @end deftypefn")
 {
   octave_value_list retval;
 
 #ifdef HAVE_AMD
   int nargin = args.length ();
 
diff --git a/libinterp/dldfcn/audiodevinfo.cc b/libinterp/dldfcn/audiodevinfo.cc
--- a/libinterp/dldfcn/audiodevinfo.cc
+++ b/libinterp/dldfcn/audiodevinfo.cc
@@ -72,35 +72,38 @@ DEFUN_DLD (audiodevinfo, args, ,
 \n\
 @deftypefnx {Loadable Function} {@var{devs} =} audiodevinfo (@var{io})\n\
 @deftypefnx {Loadable Function} {@var{name} =} audiodevinfo (@var{io}, @var{id})\n\
 @deftypefnx {Loadable Function} {@var{id} =} audiodevinfo (@var{io}, @var{name})\n\
 @deftypefnx {Loadable Function} {@var{id} =} audiodevinfo (@var{io}, @var{rate}, @var{bits}, @var{chans})\n\
 \n\
 @deftypefnx {Loadable Function} {@var{supports} =} audiodevinfo (@var{io}, @var{id}, @var{rate}, @var{bits}, @var{chans})\n\
 \n\
-Return a structure with fields \"input\" and \"output\".\n\
-The value of each field is a structure array with fields\n\
-\"Name\", @nospell{\"DriverVersion\"} and \"ID\" describing an audio device.\n\
+Return a structure describing the available audio input and output devices.\n\
+\n\
+The @var{devinfo} structure has two fields @qcode{\"input\"} and\n\
+@qcode{\"output\"}.  The value of each field is a structure array with fields\n\
+@qcode{\"Name\"}, @nospell{\"DriverVersion\"} and @qcode{\"ID\"} describing\n\
+an audio device.\n\
 \n\
 If the optional argument @var{io} is 1, return information about input\n\
 devices only.  If it is 0, return information about output devices only.\n\
 \n\
 If the optional argument @var{id} is provided, return information about\n\
-corresponding device.\n\
+the corresponding device.\n\
 \n\
 If the optional argument @var{name} is provided, return the id of the\n\
 named device.\n\
 \n\
-Given a sampling rate, bits per sample, and number of channels for\n\
-an input or output device, return the ID of the first device that\n\
-supports playback or recording using the specified parameters.\n\
+Given a sampling rate, bits per sample, and number of channels for an input\n\
+or output device, return the ID of the first device that supports playback\n\
+or recording using the specified parameters.\n\
 \n\
-If also given a device ID, return true if the device supports playback\n\
-or recording using those parameters.\n\
+If also given a device ID, return true if the device supports playback or\n\
+recording using those parameters.\n\
 @end deftypefn")
 {
   octave_value retval;
 
 #ifdef HAVE_PORTAUDIO
 
   int nargin = args.length ();
 
diff --git a/libinterp/dldfcn/audioread.cc b/libinterp/dldfcn/audioread.cc
--- a/libinterp/dldfcn/audioread.cc
+++ b/libinterp/dldfcn/audioread.cc
@@ -51,30 +51,28 @@ safe_close (SNDFILE *file)
 
 DEFUN_DLD (audioread, args, ,
            "-*- texinfo -*-\n\
 @deftypefn  {Loadable Function} {[@var{y}, @var{fs}] =} audioread (@var{filename})\n\
 @deftypefnx {Loadable Function} {[@var{y}, @var{fs}] =} audioread (@var{filename}, @var{samples})\n\
 \n\
 @deftypefnx {Loadable Function} {[@var{y}, @var{fs}] =} audioread (@var{filename}, @var{datatype})\n\
 @deftypefnx {Loadable Function} {[@var{y}, @var{fs}] =} audioread (@var{filename}, @var{samples}, @var{datatype})\n\
-Read the audio file @var{filename} and return the audio data and sampling\n\
-rate.  The audio data is stored as matrix with rows corresponding\n\
-to audio frames and columns corresponding to channels.\n\
+Read the audio file @var{filename} and return the audio data @var{y} and\n\
+sampling rate @var{fs}.\n\
+\n\
+The audio data is stored as matrix with rows corresponding to audio frames\n\
+and columns corresponding to channels.\n\
 \n\
 The optional two-element vector argument @var{samples} specifies starting\n\
 and ending frames.\n\
 \n\
 The optional argument @var{datatype} specifies the datatype to return.\n\
-If it is @qcode{\"native\"}, then the type of data depends on how the\n\
-data is stored in the audio file.\n\
-\n\
-Read a file and return a specified range of frames in an array of specified\n\
-type.\n\
-\n\
+If it is @qcode{\"native\"}, then the type of data depends on how the data\n\
+is stored in the audio file.\n\
 @end deftypefn")
 {
   octave_value_list retval;
 
 #ifdef HAVE_SNDFILE
 
   int nargin = args.length ();
 
@@ -253,20 +251,20 @@ extension_to_format (const std::string& 
 
 #endif
 
 DEFUN_DLD (audiowrite, args, ,
            "-*- texinfo -*-\n\
 @deftypefn  {Loadable Function} {} audiowrite (@var{filename}, @var{y}, @var{fs})\n\
 @deftypefnx {Loadable Function} {} audiowrite (@var{filename}, @var{y}, @var{fs}, @var{name}, @var{value}, @dots{})\n\
 \n\
-Write audio data from the matrix @var{y} to @var{filename} with the file\n\
-format determined by the file extension.\n\
+Write audio data from the matrix @var{y} to @var{filename} at sampling rate\n\
+@var{fs} with the file format determined by the file extension.\n\
 \n\
-Additional name and value argument pairs may be used to specify the\n\
+Additional name/value argument pairs may be used to specify the\n\
 following options:\n\
 \n\
 @table @samp\n\
 @item BitsPerSample\n\
 Number of bits per sample, valid values are 8, 16, 24 and 32.  Default is 16.\n\
 \n\
 @item BitRate\n\
 Valid argument name, but ignored.  Left for compatibility with @sc{matlab}.\n\
diff --git a/libinterp/dldfcn/ccolamd.cc b/libinterp/dldfcn/ccolamd.cc
--- a/libinterp/dldfcn/ccolamd.cc
+++ b/libinterp/dldfcn/ccolamd.cc
@@ -54,44 +54,45 @@ along with Octave; see the file COPYING.
 DEFUN_DLD (ccolamd, args, nargout,
            "-*- texinfo -*-\n\
 @deftypefn  {Loadable Function} {@var{p} =} ccolamd (@var{S})\n\
 @deftypefnx {Loadable Function} {@var{p} =} ccolamd (@var{S}, @var{knobs})\n\
 @deftypefnx {Loadable Function} {@var{p} =} ccolamd (@var{S}, @var{knobs}, @var{cmember})\n\
 @deftypefnx {Loadable Function} {[@var{p}, @var{stats}] =} ccolamd (@dots{})\n\
 \n\
 Constrained column approximate minimum degree permutation.\n\
+\n\
 @code{@var{p} = ccolamd (@var{S})} returns the column approximate minimum\n\
 degree permutation vector for the sparse matrix @var{S}.  For a non-symmetric\n\
-matrix\n\
-@var{S},\n\
-@code{@var{S}(:, @var{p})} tends to have sparser LU@tie{}factors than\n\
-@var{S}.  @code{chol (@var{S}(:, @var{p})' * @var{S}(:, @var{p}))} also\n\
-tends to be sparser than @code{chol (@var{S}' * @var{S})}.  @code{@var{p} =\n\
-ccolamd (@var{S}, 1)} optimizes the ordering for @code{lu (@var{S}(:,\n\
-@var{p}))}.  The ordering is followed by a column elimination tree\n\
-post-ordering.\n\
+matrix @var{S}, @code{@var{S}(:, @var{p})} tends to have sparser\n\
+LU@tie{}factors than @var{S}.\n\
+@code{chol (@var{S}(:, @var{p})' * @var{S}(:, @var{p}))} also tends to be\n\
+sparser than @code{chol (@var{S}' * @var{S})}.\n\
+@code{@var{p} = ccolamd (@var{S}, 1)} optimizes the ordering for\n\
+@code{lu (@var{S}(:, @var{p}))}.  The ordering is followed by a column\n\
+elimination tree post-ordering.\n\
 \n\
 @var{knobs} is an optional 1-element to 5-element input vector, with a\n\
 default value of @code{[0 10 10 1 0]} if not present or empty.  Entries not\n\
 present are set to their defaults.\n\
 \n\
 @table @code\n\
 @item @var{knobs}(1)\n\
 if nonzero, the ordering is optimized for @code{lu (S(:, p))}.  It will be a\n\
-poor ordering for @code{chol (@var{S}(:, @var{p})' * @var{S}(:,\n\
-@var{p}))}.  This is the most important knob for ccolamd.\n\
+poor ordering for @code{chol (@var{S}(:, @var{p})' * @var{S}(:, @var{p}))}.\n\
+This is the most important knob for ccolamd.\n\
 \n\
 @item @var{knobs}(2)\n\
-if @var{S} is m-by-n, rows with more than @code{max (16, @var{knobs}(2) *\n\
-sqrt (n))} entries are ignored.\n\
+if @var{S} is m-by-n, rows with more than\n\
+@code{max (16, @var{knobs}(2) * sqrt (n))} entries are ignored.\n\
 \n\
 @item @var{knobs}(3)\n\
-columns with more than @code{max (16, @var{knobs}(3) * sqrt (min (@var{m},\n\
-@var{n})))} entries are ignored and ordered last in the output permutation\n\
+columns with more than\n\
+@code{max (16, @var{knobs}(3) * sqrt (min (@var{m}, @var{n})))} entries are\n\
+ignored and ordered last in the output permutation\n\
 (subject to the cmember constraints).\n\
 \n\
 @item @var{knobs}(4)\n\
 if nonzero, aggressive absorption is performed.\n\
 \n\
 @item @var{knobs}(5)\n\
 if nonzero, statistics and knobs are printed.\n\
 \n\
@@ -339,27 +340,28 @@ ccolamd, csymamd, amd, colamd, symamd, a
 
 DEFUN_DLD (csymamd, args, nargout,
            "-*- texinfo -*-\n\
 @deftypefn  {Loadable Function} {@var{p} =} csymamd (@var{S})\n\
 @deftypefnx {Loadable Function} {@var{p} =} csymamd (@var{S}, @var{knobs})\n\
 @deftypefnx {Loadable Function} {@var{p} =} csymamd (@var{S}, @var{knobs}, @var{cmember})\n\
 @deftypefnx {Loadable Function} {[@var{p}, @var{stats}] =} csymamd (@dots{})\n\
 \n\
-For a symmetric positive definite matrix @var{S}, returns the permutation\n\
+For a symmetric positive definite matrix @var{S}, return the permutation\n\
 vector @var{p} such that @code{@var{S}(@var{p},@var{p})} tends to have a\n\
-sparser Cholesky@tie{}factor than @var{S}.  Sometimes @code{csymamd} works\n\
-well for symmetric indefinite matrices too.  The matrix @var{S} is assumed\n\
-to be symmetric; only the strictly lower triangular part is referenced.\n\
-@var{S} must be square.  The ordering is followed by an elimination tree\n\
-post-ordering.\n\
+sparser Cholesky@tie{}factor than @var{S}.\n\
+\n\
+Sometimes @code{csymamd} works well for symmetric indefinite matrices too.  \n\
+The matrix @var{S} is assumed to be symmetric; only the strictly lower\n\
+triangular part is referenced.  @var{S} must be square.  The ordering is\n\
+followed by an elimination tree post-ordering.\n\
 \n\
 @var{knobs} is an optional 1-element to 3-element input vector, with a\n\
-default value of @code{[10 1 0]} if present or empty.  Entries not\n\
-present are set to their defaults.\n\
+default value of @code{[10 1 0]}.  Entries not present are set to their\n\
+defaults.\n\
 \n\
 @table @code\n\
 @item @var{knobs}(1)\n\
 If @var{S} is n-by-n, then rows and columns with more than\n\
 @code{max(16,@var{knobs}(1)*sqrt(n))} entries are ignored, and ordered\n\
 last in the output permutation (subject to the cmember constraints).\n\
 \n\
 @item @var{knobs}(2)\n\
@@ -372,18 +374,19 @@ If nonzero, statistics and knobs are pri
 \n\
 @var{cmember} is an optional vector of length n. It defines the constraints\n\
 on the ordering.  If @code{@var{cmember}(j) = @var{S}}, then row/column j is\n\
 in constraint set @var{c} (@var{c} must be in the range 1 to n).  In the\n\
 output permutation @var{p}, rows/columns in set 1 appear first, followed\n\
 by all rows/columns in set 2, and so on.  @code{@var{cmember} = ones (1,n)}\n\
 if not present or empty.  @code{csymamd (@var{S},[],1:n)} returns @code{1:n}.\n\
 \n\
-@code{@var{p} = csymamd (@var{S})} is about the same as @code{@var{p} =\n\
-symamd (@var{S})}.  @var{knobs} and its default values differ.\n\
+@code{@var{p} = csymamd (@var{S})} is about the same as\n\
+@code{@var{p} = symamd (@var{S})}.  @var{knobs} and its default values\n\
+differ.\n\
 \n\
 @code{@var{stats}(4:7)} provide information if CCOLAMD was able to\n\
 continue.  The matrix is OK if @code{@var{stats}(4)} is zero, or 1 if\n\
 invalid.  @code{@var{stats}(5)} is the rightmost column index that is\n\
 unsorted or contains duplicate entries, or zero if no such column exists.\n\
 @code{@var{stats}(6)} is the last seen duplicate or out-of-order row\n\
 index in the column index given by @code{@var{stats}(5)}, or zero if no\n\
 such row index exists.  @code{@var{stats}(7)} is the number of duplicate\n\
diff --git a/libinterp/dldfcn/chol.cc b/libinterp/dldfcn/chol.cc
--- a/libinterp/dldfcn/chol.cc
+++ b/libinterp/dldfcn/chol.cc
@@ -65,17 +65,19 @@ DEFUN_DLD (chol, args, nargout,
 @deftypefn  {Loadable Function} {@var{R} =} chol (@var{A})\n\
 @deftypefnx {Loadable Function} {[@var{R}, @var{p}] =} chol (@var{A})\n\
 @deftypefnx {Loadable Function} {[@var{R}, @var{p}, @var{Q}] =} chol (@var{S})\n\
 @deftypefnx {Loadable Function} {[@var{R}, @var{p}, @var{Q}] =} chol (@var{S}, \"vector\")\n\
 @deftypefnx {Loadable Function} {[@var{L}, @dots{}] =} chol (@dots{}, \"lower\")\n\
 @deftypefnx {Loadable Function} {[@var{L}, @dots{}] =} chol (@dots{}, \"upper\")\n\
 @cindex Cholesky factorization\n\
 Compute the Cholesky@tie{}factor, @var{R}, of the symmetric positive definite\n\
-matrix @var{A}, where\n\
+matrix @var{A}.\n\
+\n\
+The Cholesky@tie{}factor is defined by\n\
 @tex\n\
 $ R^T R = A $.\n\
 @end tex\n\
 @ifnottex\n\
 \n\
 @example\n\
 @var{R}' * @var{R} = @var{A}.\n\
 @end example\n\
@@ -84,18 +86,18 @@ matrix @var{A}, where\n\
 \n\
 Called with one output argument @code{chol} fails if @var{A} or @var{S} is\n\
 not positive definite.  With two or more output arguments @var{p} flags\n\
 whether the matrix was positive definite and @code{chol} does not fail.  A\n\
 zero value indicated that the matrix was positive definite and the @var{R}\n\
 gives the factorization, and @var{p} will have a positive value otherwise.\n\
 \n\
 If called with 3 outputs then a sparsity preserving row/column permutation\n\
-is applied to @var{A} prior to the factorization.  That is @var{R}\n\
-is the factorization of @code{@var{A}(@var{Q},@var{Q})} such that\n\
+is applied to @var{A} prior to the factorization.  That is @var{R} is the\n\
+factorization of @code{@var{A}(@var{Q},@var{Q})} such that\n\
 @tex\n\
 $ R^T R = Q^T A Q$.\n\
 @end tex\n\
 @ifnottex\n\
 \n\
 @example\n\
 @var{R}' * @var{R} = @var{Q}' * @var{A} * @var{Q}.\n\
 @end example\n\
@@ -385,18 +387,18 @@ sparse matrices.\n\
 %!error <matrix must be positive definite> chol ([1, 2; 3, 4])
 %!error <requires square matrix> chol ([1, 2; 3, 4; 5, 6])
 %!error <unexpected second or third input> chol (1, 2)
 */
 
 DEFUN_DLD (cholinv, args, ,
            "-*- texinfo -*-\n\
 @deftypefn {Loadable Function} {} cholinv (@var{A})\n\
-Use the Cholesky@tie{}factorization to compute the inverse of the\n\
-symmetric positive definite matrix @var{A}.\n\
+Compute the inverse of the symmetric positive definite matrix @var{A} using\n\
+the Cholesky@tie{}factorization.\n\
 @seealso{chol, chol2inv, inv}\n\
 @end deftypefn")
 {
   octave_value retval;
 
   int nargin = args.length ();
 
   if (nargin == 1)
@@ -533,20 +535,21 @@ symmetric positive definite matrix @var{
 %! Ainv3 = cholinv (sparse (A));
 %! assert (norm (Ainv-Ainv3), 0, 1e-10);
 */
 
 DEFUN_DLD (chol2inv, args, ,
            "-*- texinfo -*-\n\
 @deftypefn {Loadable Function} {} chol2inv (@var{U})\n\
 Invert a symmetric, positive definite square matrix from its Cholesky\n\
-decomposition, @var{U}.  Note that @var{U} should be an upper-triangular\n\
-matrix with positive diagonal elements.  @code{chol2inv (@var{U})}\n\
-provides @code{inv (@var{U}'*@var{U})} but it is much faster than\n\
-using @code{inv}.\n\
+decomposition, @var{U}.\n\
+\n\
+Note that @var{U} should be an upper-triangular matrix with positive\n\
+diagonal elements.  @code{chol2inv (@var{U})} provides\n\
+@code{inv (@var{U}'*@var{U})} but it is much faster than using @code{inv}.\n\
 @seealso{chol, cholinv, inv}\n\
 @end deftypefn")
 {
   octave_value retval;
 
   int nargin = args.length ();
 
   if (nargin == 1)
@@ -624,19 +627,20 @@ using @code{inv}.\n\
     print_usage ();
 
   return retval;
 }
 
 DEFUN_DLD (cholupdate, args, nargout,
            "-*- texinfo -*-\n\
 @deftypefn {Loadable Function} {[@var{R1}, @var{info}] =} cholupdate (@var{R}, @var{u}, @var{op})\n\
-Update or downdate a Cholesky@tie{}factorization.  Given an upper triangular\n\
-matrix @var{R} and a column vector @var{u}, attempt to determine another\n\
-upper triangular matrix @var{R1} such that\n\
+Update or downdate a Cholesky@tie{}factorization.\n\
+\n\
+Given an upper triangular matrix @var{R} and a column vector @var{u},\n\
+attempt to determine another upper triangular matrix @var{R1} such that\n\
 \n\
 @itemize @bullet\n\
 @item\n\
 @var{R1}'*@var{R1} = @var{R}'*@var{R} + @var{u}*@var{u}'\n\
 if @var{op} is @qcode{\"+\"}\n\
 \n\
 @item\n\
 @var{R1}'*@var{R1} = @var{R}'*@var{R} - @var{u}*@var{u}'\n\
@@ -839,16 +843,17 @@ DEFUN_DLD (cholinsert, args, nargout,
            "-*- texinfo -*-\n\
 @deftypefn  {Loadable Function} {@var{R1} =} cholinsert (@var{R}, @var{j}, @var{u})\n\
 @deftypefnx {Loadable Function} {[@var{R1}, @var{info}] =} cholinsert (@var{R}, @var{j}, @var{u})\n\
 Given a Cholesky@tie{}factorization of a real symmetric or complex Hermitian\n\
 positive definite matrix @w{@var{A} = @var{R}'*@var{R}}, @var{R}@tie{}upper\n\
 triangular, return the Cholesky@tie{}factorization of\n\
 @var{A1}, where @w{A1(p,p) = A}, @w{A1(:,j) = A1(j,:)' = u} and\n\
 @w{p = [1:j-1,j+1:n+1]}.  @w{u(j)} should be positive.\n\
+\n\
 On return, @var{info} is set to\n\
 \n\
 @itemize\n\
 @item 0 if the insertion was successful,\n\
 \n\
 @item 1 if @var{A1} is not positive definite,\n\
 \n\
 @item 2 if @var{R} is singular.\n\
diff --git a/libinterp/dldfcn/colamd.cc b/libinterp/dldfcn/colamd.cc
--- a/libinterp/dldfcn/colamd.cc
+++ b/libinterp/dldfcn/colamd.cc
@@ -211,17 +211,18 @@ coletree (const octave_idx_type *ridx, c
 
 DEFUN_DLD (colamd, args, nargout,
            "-*- texinfo -*-\n\
 @deftypefn  {Loadable Function} {@var{p} =} colamd (@var{S})\n\
 @deftypefnx {Loadable Function} {@var{p} =} colamd (@var{S}, @var{knobs})\n\
 @deftypefnx {Loadable Function} {[@var{p}, @var{stats}] =} colamd (@var{S})\n\
 @deftypefnx {Loadable Function} {[@var{p}, @var{stats}] =} colamd (@var{S}, @var{knobs})\n\
 \n\
-Column approximate minimum degree permutation.\n\
+Compute the column approximate minimum degree permutation.\n\
+\n\
 @code{@var{p} = colamd (@var{S})} returns the column approximate minimum\n\
 degree permutation vector for the sparse matrix @var{S}.  For a\n\
 non-symmetric matrix @var{S}, @code{@var{S}(:,@var{p})} tends to have\n\
 sparser LU@tie{}factors than @var{S}.  The Cholesky@tie{}factorization of\n\
 @code{@var{S}(:,@var{p})' * @var{S}(:,@var{p})} also tends to be sparser\n\
 than that of @code{@var{S}' * @var{S}}.\n\
 \n\
 @var{knobs} is an optional one- to three-element input vector.  If @var{S} is\n\
@@ -253,17 +254,17 @@ more times in the same column) or if the
 of order, then @sc{colamd} can correct these errors by ignoring the duplicate\n\
 entries and sorting each column of its internal copy of the matrix\n\
 @var{S} (the input matrix @var{S} is not repaired, however).  If a matrix\n\
 is invalid in other ways then @sc{colamd} cannot continue, an error message\n\
 is printed, and no output arguments (@var{p} or @var{stats}) are returned.\n\
 @sc{colamd} is thus a simple way to check a sparse matrix to see if it's\n\
 valid.\n\
 \n\
-@code{@var{stats}(4:7)} provide information if COLAMD was able to\n\
+@code{@var{stats}(4:7)} provide information if @sc{colamd} was able to\n\
 continue.  The matrix is OK if @code{@var{stats}(4)} is zero, or 1 if\n\
 invalid.  @code{@var{stats}(5)} is the rightmost column index that is\n\
 unsorted or contains duplicate entries, or zero if no such column exists.\n\
 @code{@var{stats}(6)} is the last seen duplicate or out-of-order row\n\
 index in the column index given by @code{@var{stats}(5)}, or zero if no\n\
 such row index exists.  @code{@var{stats}(7)} is the number of duplicate\n\
 or out-of-order row indices.  @code{@var{stats}(8:20)} is always zero in\n\
 the current version of @sc{colamd} (reserved for future use).\n\
@@ -453,35 +454,37 @@ DEFUN_DLD (symamd, args, nargout,
            "-*- texinfo -*-\n\
 @deftypefn  {Loadable Function} {@var{p} =} symamd (@var{S})\n\
 @deftypefnx {Loadable Function} {@var{p} =} symamd (@var{S}, @var{knobs})\n\
 @deftypefnx {Loadable Function} {[@var{p}, @var{stats}] =} symamd (@var{S})\n\
 @deftypefnx {Loadable Function} {[@var{p}, @var{stats}] =} symamd (@var{S}, @var{knobs})\n\
 \n\
 For a symmetric positive definite matrix @var{S}, returns the permutation\n\
 vector p such that @code{@var{S}(@var{p}, @var{p})} tends to have a\n\
-sparser Cholesky@tie{}factor than @var{S}.  Sometimes @code{symamd} works\n\
-well for symmetric indefinite matrices too.  The matrix @var{S} is assumed\n\
-to be symmetric; only the strictly lower triangular part is referenced.\n\
-@var{S} must be square.\n\
+sparser Cholesky@tie{}factor than @var{S}.\n\
+\n\
+Sometimes @code{symamd} works well for symmetric indefinite matrices too.  \n\
+The matrix @var{S} is assumed to be symmetric; only the strictly lower\n\
+triangular part is referenced.  @var{S} must be square.\n\
 \n\
 @var{knobs} is an optional one- to two-element input vector.  If @var{S} is\n\
 n-by-n, then rows and columns with more than\n\
 @code{max (16,@var{knobs}(1)*sqrt(n))} entries are removed prior to ordering,\n\
 and ordered last in the output permutation @var{p}.  No rows/columns are\n\
 removed if @code{@var{knobs}(1) < 0}.  If @code{@var{knobs} (2)} is nonzero,\n\
-@code{stats} and @var{knobs} are printed.  The default is @code{@var{knobs}\n\
-= [10 0]}.  Note that @var{knobs} differs from earlier versions of symamd.\n\
+@code{stats} and @var{knobs} are printed.  The default is\n\
+@code{@var{knobs} = [10 0]}.  Note that @var{knobs} differs from earlier\n\
+versions of @code{symamd}.\n\
 \n\
 @var{stats} is an optional 20-element output vector that provides data\n\
 about the ordering and the validity of the input matrix @var{S}.  Ordering\n\
-statistics are in @code{@var{stats}(1:3)}.  @code{@var{stats}(1) =\n\
-@var{stats}(2)} is the number of dense or empty rows and columns\n\
-ignored by SYMAMD and @code{@var{stats}(3)} is the number of garbage\n\
-collections performed on the internal data structure used by SYMAMD\n\
+statistics are in @code{@var{stats}(1:3)}.\n\
+@code{@var{stats}(1) = @var{stats}(2)} is the number of dense or empty rows\n\
+and columns ignored by SYMAMD and @code{@var{stats}(3)} is the number of\n\
+garbage collections performed on the internal data structure used by SYMAMD\n\
 (roughly of size @code{8.4 * nnz (tril (@var{S}, -1)) + 9 * @var{n}}\n\
 integers).\n\
 \n\
 Octave built-in functions are intended to generate valid sparse matrices,\n\
 with no duplicate entries, with ascending row indices of the nonzeros\n\
 in each column, with a non-negative number of entries in each column (!)\n\
 and so on.  If a matrix is invalid, then SYMAMD may or may not be able\n\
 to continue.  If there are duplicate entries (a row index appears two or\n\
@@ -643,19 +646,20 @@ Xerox PARC, and @nospell{Esmond Ng}, Oak
 }
 
 DEFUN_DLD (etree, args, nargout,
            "-*- texinfo -*-\n\
 @deftypefn  {Loadable Function} {@var{p} =} etree (@var{S})\n\
 @deftypefnx {Loadable Function} {@var{p} =} etree (@var{S}, @var{typ})\n\
 @deftypefnx {Loadable Function} {[@var{p}, @var{q}] =} etree (@var{S}, @var{typ})\n\
 \n\
-Return the elimination tree for the matrix @var{S}.  By default @var{S}\n\
-is assumed to be symmetric and the symmetric elimination tree is\n\
-returned.  The argument @var{typ} controls whether a symmetric or\n\
+Return the elimination tree for the matrix @var{S}.\n\
+\n\
+By default @var{S} is assumed to be symmetric and the symmetric elimination\n\
+tree is returned.  The argument @var{typ} controls whether a symmetric or\n\
 column elimination tree is returned.  Valid values of @var{typ} are\n\
 @qcode{\"sym\"} or @qcode{\"col\"}, for symmetric or column elimination tree\n\
 respectively.\n\
 \n\
 Called with a second argument, @code{etree} also returns the postorder\n\
 permutations on the tree.\n\
 @end deftypefn")
 {
diff --git a/libinterp/dldfcn/convhulln.cc b/libinterp/dldfcn/convhulln.cc
--- a/libinterp/dldfcn/convhulln.cc
+++ b/libinterp/dldfcn/convhulln.cc
@@ -72,18 +72,21 @@ octave_qhull_dims_ok (octave_idx_type di
   return true;
 }
 
 DEFUN_DLD (convhulln, args, nargout,
            "-*- texinfo -*-\n\
 @deftypefn  {Loadable Function} {@var{h} =} convhulln (@var{pts})\n\
 @deftypefnx {Loadable Function} {@var{h} =} convhulln (@var{pts}, @var{options})\n\
 @deftypefnx {Loadable Function} {[@var{h}, @var{v}] =} convhulln (@dots{})\n\
-Compute the convex hull of the set of points @var{pts} which is a matrix\n\
-of size [n, dim] containing n points in a space of dimension dim.\n\
+Compute the convex hull of the set of points @var{pts}.\n\
+\n\
+@var{pts} is a matrix of size [n, dim] containing n points in a space of\n\
+dimension dim.\n\
+\n\
 The hull @var{h} is an index vector into the set of points and specifies\n\
 which points form the enclosing hull.\n\
 \n\
 An optional second argument, which must be a string or cell array of strings,\n\
 contains options passed to the underlying qhull command.\n\
 See the documentation for the Qhull library for details\n\
 @url{http://www.qhull.org/html/qh-quick.htm#options}.\n\
 The default options depend on the dimension of the input:\n\
diff --git a/libinterp/dldfcn/dmperm.cc b/libinterp/dldfcn/dmperm.cc
--- a/libinterp/dldfcn/dmperm.cc
+++ b/libinterp/dldfcn/dmperm.cc
@@ -189,19 +189,20 @@ ACM Trans. Math. Software, 16(4):303-324
 %! assert (tril (a(p,q), -1), sparse (n, n));
 */
 
 DEFUN_DLD (sprank, args, nargout,
            "-*- texinfo -*-\n\
 @deftypefn {Loadable Function} {@var{p} =} sprank (@var{S})\n\
 @cindex structural rank\n\
 \n\
-Calculate the structural rank of the sparse matrix @var{S}.  Note that\n\
-only the structure of the matrix is used in this calculation based on\n\
-a @nospell{Dulmage-Mendelsohn} permutation to block triangular form.  As\n\
+Calculate the structural rank of the sparse matrix @var{S}.\n\
+\n\
+Note that only the structure of the matrix is used in this calculation based\n\
+on a @nospell{Dulmage-Mendelsohn} permutation to block triangular form.  As\n\
 such the numerical rank of the matrix @var{S} is bounded by\n\
 @code{sprank (@var{S}) >= rank (@var{S})}.  Ignoring floating point errors\n\
 @code{sprank (@var{S}) == rank (@var{S})}.\n\
 @seealso{dmperm}\n\
 @end deftypefn")
 {
   int nargin = args.length ();
   octave_value_list retval;
diff --git a/libinterp/dldfcn/fftw.cc b/libinterp/dldfcn/fftw.cc
--- a/libinterp/dldfcn/fftw.cc
+++ b/libinterp/dldfcn/fftw.cc
@@ -38,22 +38,24 @@ DEFUN_DLD (fftw, args, ,
            "-*- texinfo -*-\n\
 @deftypefn  {Loadable Function} {@var{method} =} fftw (\"planner\")\n\
 @deftypefnx {Loadable Function} {} fftw (\"planner\", @var{method})\n\
 @deftypefnx {Loadable Function} {@var{wisdom} =} fftw (\"dwisdom\")\n\
 @deftypefnx {Loadable Function} {} fftw (\"dwisdom\", @var{wisdom})\n\
 @deftypefnx {Loadable Function} {} fftw (\"threads\", @var{nthreads})\n\
 @deftypefnx {Loadable Function} {@var{nthreads} =} fftw (\"threads\")\n\
 \n\
-Manage @sc{fftw} wisdom data.  Wisdom data can be used to significantly\n\
-accelerate the calculation of the FFTs, but implies an initial cost\n\
-in its calculation.  When the @sc{fftw} libraries are initialized, they read\n\
-a system wide wisdom file (typically in @file{/etc/fftw/wisdom}), allowing\n\
-wisdom to be shared between applications other than Octave.  Alternatively,\n\
-the @code{fftw} function can be used to import wisdom.  For example,\n\
+Manage @sc{fftw} wisdom data.\n\
+\n\
+Wisdom data can be used to significantly accelerate the calculation of the\n\
+FFTs, but implies an initial cost in its calculation.  When the @sc{fftw}\n\
+libraries are initialized, they read a system wide wisdom file (typically in\n\
+@file{/etc/fftw/wisdom}), allowing wisdom to be shared between applications\n\
+other than Octave.  Alternatively, the @code{fftw} function can be used to\n\
+import wisdom.  For example,\n\
 \n\
 @example\n\
 @var{wisdom} = fftw (\"dwisdom\")\n\
 @end example\n\
 \n\
 @noindent\n\
 will save the existing wisdom used by Octave to the string @var{wisdom}.\n\
 This string can then be saved to a file and restored using the @code{save}\n\
diff --git a/libinterp/dldfcn/qr.cc b/libinterp/dldfcn/qr.cc
--- a/libinterp/dldfcn/qr.cc
+++ b/libinterp/dldfcn/qr.cc
@@ -75,17 +75,19 @@ get_qr_r (const base_qr<MT>& fact)
 DEFUN_DLD (qr, args, nargout,
            "-*- texinfo -*-\n\
 @deftypefn  {Loadable Function} {[@var{Q}, @var{R}, @var{P}] =} qr (@var{A})\n\
 @deftypefnx {Loadable Function} {[@var{Q}, @var{R}, @var{P}] =} qr (@var{A}, '0')\n\
 @deftypefnx {Loadable Function} {[@var{C}, @var{R}] =} qr (@var{A}, @var{B})\n\
 @deftypefnx {Loadable Function} {[@var{C}, @var{R}] =} qr (@var{A}, @var{B}, '0')\n\
 @cindex QR factorization\n\
 Compute the QR@tie{}factorization of @var{A}, using standard @sc{lapack}\n\
-subroutines.  For example, given the matrix @code{@var{A} = [1, 2; 3, 4]},\n\
+subroutines.\n\
+\n\
+For example, given the matrix @code{@var{A} = [1, 2; 3, 4]},\n\
 \n\
 @example\n\
 [@var{Q}, @var{R}] = qr (@var{A})\n\
 @end example\n\
 \n\
 @noindent\n\
 returns\n\
 \n\
@@ -119,34 +121,34 @@ min norm(A x - b)\n\
 @end ifnottex\n\
 for overdetermined systems of equations (i.e.,\n\
 @tex\n\
 $A$\n\
 @end tex\n\
 @ifnottex\n\
 @var{A}\n\
 @end ifnottex\n\
- is a tall, thin matrix).  The QR@tie{}factorization is\n\
+is a tall, thin matrix).  The QR@tie{}factorization is\n\
 @tex\n\
 $QR = A$ where $Q$ is an orthogonal matrix and $R$ is upper triangular.\n\
 @end tex\n\
 @ifnottex\n\
 @code{@var{Q} * @var{R} = @var{A}} where @var{Q} is an orthogonal matrix and\n\
 @var{R} is upper triangular.\n\
 @end ifnottex\n\
 \n\
 If given a second argument of @qcode{'0'}, @code{qr} returns an economy-sized\n\
 QR@tie{}factorization, omitting zero rows of @var{R} and the corresponding\n\
 columns of @var{Q}.\n\
 \n\
 If the matrix @var{A} is full, the permuted QR@tie{}factorization\n\
 @code{[@var{Q}, @var{R}, @var{P}] = qr (@var{A})} forms the\n\
 QR@tie{}factorization such that the diagonal entries of @var{R} are\n\
-decreasing in magnitude order.  For example, given the matrix @code{a = [1,\n\
-2; 3, 4]},\n\
+decreasing in magnitude order.  For example, given the matrix\n\
+@code{a = [1, 2; 3, 4]},\n\
 \n\
 @example\n\
 [@var{Q}, @var{R}, @var{P}] = qr (@var{A})\n\
 @end example\n\
 \n\
 @noindent\n\
 returns\n\
 \n\
@@ -164,25 +166,25 @@ returns\n\
 \n\
 @var{P} =\n\
 \n\
    0  1\n\
    1  0\n\
 @end group\n\
 @end example\n\
 \n\
-The permuted @code{qr} factorization @code{[@var{Q}, @var{R}, @var{P}] = qr\n\
-(@var{A})} factorization allows the construction of an orthogonal basis of\n\
-@code{span (A)}.\n\
+The permuted @code{qr} factorization\n\
+@code{[@var{Q}, @var{R}, @var{P}] = qr (@var{A})} factorization allows the\n\
+construction of an orthogonal basis of @code{span (A)}.\n\
 \n\
 If the matrix @var{A} is sparse, then compute the sparse\n\
 QR@tie{}factorization of @var{A}, using @sc{CSparse}.  As the matrix @var{Q}\n\
 is in general a full matrix, this function returns the @var{Q}-less\n\
-factorization @var{R} of @var{A}, such that @code{@var{R} = chol (@var{A}' *\n\
-@var{A})}.\n\
+factorization @var{R} of @var{A}, such that\n\
+@code{@var{R} = chol (@var{A}' * @var{A})}.\n\
 \n\
 If the final argument is the scalar @code{0} and the number of rows is\n\
 larger than the number of columns, then an economy factorization is\n\
 returned.  That is @var{R} will have only @code{size (@var{A},1)} rows.\n\
 \n\
 If an additional matrix @var{B} is supplied, then @code{qr} returns\n\
 @var{C}, where @code{@var{C} = @var{Q}' * @var{B}}.  This allows the\n\
 least squares approximation of @code{@var{A} \\ @var{B}} to be calculated\n\
@@ -758,25 +760,25 @@ bool check_index (const octave_value& i,
           && (i.is_scalar_type () || vector_allowed));
 }
 
 DEFUN_DLD (qrupdate, args, ,
            "-*- texinfo -*-\n\
 @deftypefn {Loadable Function} {[@var{Q1}, @var{R1}] =} qrupdate (@var{Q}, @var{R}, @var{u}, @var{v})\n\
 Given a QR@tie{}factorization of a real or complex matrix\n\
 @w{@var{A} = @var{Q}*@var{R}}, @var{Q}@tie{}unitary and\n\
-@var{R}@tie{}upper trapezoidal, return the QR@tie{}factorization\n\
-of @w{@var{A} + @var{u}*@var{v}'}, where @var{u} and @var{v} are\n\
-column vectors (rank-1 update) or matrices with equal number of columns\n\
+@var{R}@tie{}upper trapezoidal, return the QR@tie{}factorization of\n\
+@w{@var{A} + @var{u}*@var{v}'}, where @var{u} and @var{v} are column vectors\n\
+(rank-1 update) or matrices with equal number of columns\n\
 (rank-k update).  Notice that the latter case is done as a sequence of rank-1\n\
 updates; thus, for k large enough, it will be both faster and more accurate\n\
 to recompute the factorization from scratch.\n\
 \n\
-The QR@tie{}factorization supplied may be either full\n\
-(Q is square) or economized (R is square).\n\
+The QR@tie{}factorization supplied may be either full (Q is square) or\n\
+economized (R is square).\n\
 \n\
 @seealso{qr, qrinsert, qrdelete, qrshift}\n\
 @end deftypefn")
 {
   octave_idx_type nargin = args.length ();
   octave_value_list retval;
 
   if (nargin != 4)
@@ -939,34 +941,31 @@ The QR@tie{}factorization supplied may b
 */
 
 DEFUN_DLD (qrinsert, args, ,
            "-*- texinfo -*-\n\
 @deftypefn {Loadable Function} {[@var{Q1}, @var{R1}] =} qrinsert (@var{Q}, @var{R}, @var{j}, @var{x}, @var{orient})\n\
 Given a QR@tie{}factorization of a real or complex matrix\n\
 @w{@var{A} = @var{Q}*@var{R}}, @var{Q}@tie{}unitary and\n\
 @var{R}@tie{}upper trapezoidal, return the QR@tie{}factorization of\n\
-@w{[A(:,1:j-1) x A(:,j:n)]}, where @var{u} is a column vector to be\n\
-inserted into @var{A} (if @var{orient} is @qcode{\"col\"}), or the\n\
-QR@tie{}factorization of @w{[A(1:j-1,:);x;A(:,j:n)]}, where @var{x}\n\
-is a row vector to be inserted into @var{A} (if @var{orient} is\n\
-@qcode{\"row\"}).\n\
+@w{[A(:,1:j-1) x A(:,j:n)]}, where @var{u} is a column vector to be inserted\n\
+into @var{A} (if @var{orient} is @qcode{\"col\"}), or the\n\
+QR@tie{}factorization of @w{[A(1:j-1,:);x;A(:,j:n)]}, where @var{x} is a row\n\
+vector to be inserted into @var{A} (if @var{orient} is @qcode{\"row\"}).\n\
 \n\
-The default value of @var{orient} is @qcode{\"col\"}.\n\
-If @var{orient} is @qcode{\"col\"},\n\
-@var{u} may be a matrix and @var{j} an index vector\n\
+The default value of @var{orient} is @qcode{\"col\"}.  If @var{orient} is\n\
+@qcode{\"col\"}, @var{u} may be a matrix and @var{j} an index vector\n\
 resulting in the QR@tie{}factorization of a matrix @var{B} such that\n\
 @w{B(:,@var{j})} gives @var{u} and @w{B(:,@var{j}) = []} gives @var{A}.\n\
 Notice that the latter case is done as a sequence of k insertions;\n\
 thus, for k large enough, it will be both faster and more accurate to\n\
 recompute the factorization from scratch.\n\
 \n\
-If @var{orient} is @qcode{\"col\"},\n\
-the QR@tie{}factorization supplied may be either full\n\
-(Q is square) or economized (R is square).\n\
+If @var{orient} is @qcode{\"col\"}, the QR@tie{}factorization supplied may\n\
+be either full (Q is square) or economized (R is square).\n\
 \n\
 If @var{orient} is @qcode{\"row\"}, full factorization is needed.\n\
 @seealso{qr, qrupdate, qrdelete, qrshift}\n\
 @end deftypefn")
 {
   octave_idx_type nargin = args.length ();
   octave_value_list retval;
 
@@ -1168,27 +1167,24 @@ Given a QR@tie{}factorization of a real 
 @var{R}@tie{}upper trapezoidal, return the QR@tie{}factorization of\n\
 @w{[A(:,1:j-1) A(:,j+1:n)]}, i.e., @var{A} with one column deleted\n\
 (if @var{orient} is @qcode{\"col\"}), or the QR@tie{}factorization of\n\
 @w{[A(1:j-1,:);A(j+1:n,:)]}, i.e., @var{A} with one row deleted (if\n\
 @var{orient} is @qcode{\"row\"}).\n\
 \n\
 The default value of @var{orient} is @qcode{\"col\"}.\n\
 \n\
-If @var{orient} is @qcode{\"col\"},\n\
-@var{j} may be an index vector\n\
+If @var{orient} is @qcode{\"col\"}, @var{j} may be an index vector\n\
 resulting in the QR@tie{}factorization of a matrix @var{B} such that\n\
-@w{A(:,@var{j}) = []} gives @var{B}.\n\
-Notice that the latter case is done as a sequence of k deletions;\n\
-thus, for k large enough, it will be both faster and more accurate to\n\
-recompute the factorization from scratch.\n\
+@w{A(:,@var{j}) = []} gives @var{B}.  Notice that the latter case is done as\n\
+a sequence of k deletions; thus, for k large enough, it will be both faster\n\
+and more accurate to recompute the factorization from scratch.\n\
 \n\
-If @var{orient} is @qcode{\"col\"},\n\
-the QR@tie{}factorization supplied may be either full\n\
-(Q is square) or economized (R is square).\n\
+If @var{orient} is @qcode{\"col\"}, the QR@tie{}factorization supplied may\n\
+be either full (Q is square) or economized (R is square).\n\
 \n\
 If @var{orient} is @qcode{\"row\"}, full factorization is needed.\n\
 @seealso{qr, qrupdate, qrinsert, qrshift}\n\
 @end deftypefn")
 {
   octave_idx_type nargin = args.length ();
   octave_value_list retval;
 
diff --git a/libinterp/dldfcn/symbfact.cc b/libinterp/dldfcn/symbfact.cc
--- a/libinterp/dldfcn/symbfact.cc
+++ b/libinterp/dldfcn/symbfact.cc
@@ -41,17 +41,18 @@ along with Octave; see the file COPYING.
 
 DEFUN_DLD (symbfact, args, nargout,
            "-*- texinfo -*-\n\
 @deftypefn  {Loadable Function} {[@var{count}, @var{h}, @var{parent}, @var{post}, @var{r}] =} symbfact (@var{S})\n\
 @deftypefnx {Loadable Function} {[@dots{}] =} symbfact (@var{S}, @var{typ})\n\
 @deftypefnx {Loadable Function} {[@dots{}] =} symbfact (@var{S}, @var{typ}, @var{mode})\n\
 \n\
 Perform a symbolic factorization analysis on the sparse matrix @var{S}.\n\
-Where\n\
+\n\
+The input variables are\n\
 \n\
 @table @var\n\
 @item S\n\
 @var{S} is a complex or real sparse matrix.\n\
 \n\
 @item typ\n\
 Is the type of the factorization and can be one of\n\
 \n\
diff --git a/libinterp/dldfcn/symrcm.cc b/libinterp/dldfcn/symrcm.cc
--- a/libinterp/dldfcn/symrcm.cc
+++ b/libinterp/dldfcn/symrcm.cc
@@ -410,25 +410,26 @@ transpose (octave_idx_type N, const octa
       }
 }
 
 // An implementation of the Cuthill-McKee algorithm.
 DEFUN_DLD (symrcm, args, ,
            "-*- texinfo -*-\n\
 @deftypefn {Loadable Function} {@var{p} =} symrcm (@var{S})\n\
 Return the symmetric reverse @nospell{Cuthill-McKee} permutation of @var{S}.\n\
+\n\
 @var{p} is a permutation vector such that\n\
-@code{@var{S}(@var{p}, @var{p})} tends to have its diagonal elements\n\
-closer to the diagonal than @var{S}.  This is a good preordering for LU\n\
-or Cholesky@tie{}factorization of matrices that come from ``long, skinny''\n\
+@code{@var{S}(@var{p}, @var{p})} tends to have its diagonal elements closer\n\
+to the diagonal than @var{S}.  This is a good preordering for LU or\n\
+Cholesky@tie{}factorization of matrices that come from ``long, skinny''\n\
 problems.  It works for both symmetric and asymmetric @var{S}.\n\
 \n\
-The algorithm represents a heuristic approach to the NP-complete\n\
-bandwidth minimization problem.  The implementation is based in the\n\
-descriptions found in\n\
+The algorithm represents a heuristic approach to the NP-complete bandwidth\n\
+minimization problem.  The implementation is based in the descriptions found\n\
+in\n\
 \n\
 @nospell{E. Cuthill, J. McKee}. @cite{Reducing the Bandwidth of Sparse\n\
 Symmetric Matrices}. Proceedings of the 24th ACM National Conference,\n\
 157--172 1969, Brandon Press, New Jersey.\n\
 \n\
 @nospell{A. George, J.W.H. Liu}. @cite{Computer Solution of Large Sparse\n\
 Positive Definite Systems}, Prentice Hall Series in Computational\n\
 Mathematics, ISBN 0-13-165274-5, 1981.\n\
diff --git a/libinterp/octave-value/ov-base.cc b/libinterp/octave-value/ov-base.cc
--- a/libinterp/octave-value/ov-base.cc
+++ b/libinterp/octave-value/ov-base.cc
@@ -1679,16 +1679,17 @@ install_base_type_conversions (void)
 
 DEFUN (sparse_auto_mutate, args, nargout,
        "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {@var{val} =} sparse_auto_mutate ()\n\
 @deftypefnx {Built-in Function} {@var{old_val} =} sparse_auto_mutate (@var{new_val})\n\
 @deftypefnx {Built-in Function} {} sparse_auto_mutate (@var{new_val}, \"local\")\n\
 Query or set the internal variable that controls whether Octave will\n\
 automatically mutate sparse matrices to full matrices to save memory.\n\
+\n\
 For example:\n\
 \n\
 @example\n\
 @group\n\
 s = speye (3);\n\
 sparse_auto_mutate (false);\n\
 s(:, 1) = 1;\n\
 typeinfo (s)\n\
@@ -1696,17 +1697,17 @@ typeinfo (s)\n\
 sparse_auto_mutate (true);\n\
 s(1, :) = 1;\n\
 typeinfo (s)\n\
 @result{} matrix\n\
 @end group\n\
 @end example\n\
 \n\
 When called from inside a function with the @qcode{\"local\"} option, the\n\
-variable is changed locally for the function and any subroutines it calls.  \n\
+variable is changed locally for the function and any subroutines it calls.\n\
 The original variable value is restored when exiting the function.\n\
 @end deftypefn")
 {
   return SET_INTERNAL_VARIABLE (sparse_auto_mutate);
 }
 
 /*
 %!test
diff --git a/libinterp/octave-value/ov-bool-mat.cc b/libinterp/octave-value/ov-bool-mat.cc
--- a/libinterp/octave-value/ov-bool-mat.cc
+++ b/libinterp/octave-value/ov-bool-mat.cc
@@ -556,19 +556,19 @@ octave_bool_matrix::as_mxArray (void) co
   return retval;
 }
 
 DEFUN (logical, args, ,
        "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} logical (@var{x})\n\
 Convert the numeric object @var{x} to logical type.\n\
 \n\
-Any nonzero values will be converted to true (1) while zero values\n\
-will be converted to false (0).  The non-numeric value NaN cannot be\n\
-converted and will produce an error.\n\
+Any nonzero values will be converted to true (1) while zero values will be\n\
+converted to false (0).  The non-numeric value NaN cannot be converted and\n\
+will produce an error.\n\
 \n\
 Compatibility Note: Octave accepts complex values as input, whereas\n\
 @sc{matlab} issues an error.\n\
 @seealso{double, single, char}\n\
 @end deftypefn")
 {
   octave_value retval;
 
diff --git a/libinterp/octave-value/ov-cell.cc b/libinterp/octave-value/ov-cell.cc
--- a/libinterp/octave-value/ov-cell.cc
+++ b/libinterp/octave-value/ov-cell.cc
@@ -1296,19 +1296,19 @@ DEFUN (cell, args, ,
        "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {} cell (@var{n})\n\
 @deftypefnx {Built-in Function} {} cell (@var{m}, @var{n})\n\
 @deftypefnx {Built-in Function} {} cell (@var{m}, @var{n}, @var{k}, @dots{})\n\
 @deftypefnx {Built-in Function} {} cell ([@var{m} @var{n} @dots{}])\n\
 Create a new cell array object.\n\
 \n\
 If invoked with a single scalar integer argument, return a square\n\
-@nospell{NxN} cell array.  If invoked with two or more scalar\n\
-integer arguments, or a vector of integer values, return an array with\n\
-the given dimensions.\n\
+@nospell{NxN} cell array.  If invoked with two or more scalar integer\n\
+arguments, or a vector of integer values, return an array with the given\n\
+dimensions.\n\
 @seealso{cellstr, mat2cell, num2cell, struct2cell}\n\
 @end deftypefn")
 {
   octave_value retval;
 
   int nargin = args.length ();
 
   dim_vector dims;
@@ -1352,18 +1352,18 @@ the given dimensions.\n\
     }
 
   return retval;
 }
 
 DEFUN (iscellstr, args, ,
        "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} iscellstr (@var{cell})\n\
-Return true if every element of the cell array @var{cell} is a\n\
-character string.\n\
+Return true if every element of the cell array @var{cell} is a character\n\
+string.\n\
 @seealso{ischar}\n\
 @end deftypefn")
 {
   octave_value retval;
 
   if (args.length () == 1)
     retval = args(0).is_cellstr ();
   else
@@ -1375,18 +1375,18 @@ character string.\n\
 // Note that since Fcellstr calls Fiscellstr, we need to have
 // Fiscellstr defined first (to provide a declaration) and also we
 // should keep it in the same file (so we don't have to provide a
 // declaration) and so we don't have to use feval to call it.
 
 DEFUN (cellstr, args, ,
        "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {@var{cstr} =} cellstr (@var{strmat})\n\
-Create a new cell array object from the elements of the string\n\
-array @var{strmat}.\n\
+Create a new cell array object from the elements of the string array\n\
+@var{strmat}.\n\
 \n\
 Each row of @var{strmat} becomes an element of @var{cstr}.  Any trailing\n\
 spaces in a row are deleted before conversion.\n\
 \n\
 To convert back from a cellstr to a character array use @code{char}.\n\
 @seealso{cell, char}\n\
 @end deftypefn")
 {
@@ -1415,18 +1415,19 @@ To convert back from a cellstr to a char
 
   return retval;
 }
 
 DEFUN (struct2cell, args, ,
        "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {@var{c} =} struct2cell (@var{s})\n\
 Create a new cell array from the objects stored in the struct object.\n\
-If @var{f} is the number of fields in the structure, the resulting\n\
-cell array will have a dimension vector corresponding to\n\
+\n\
+If @var{f} is the number of fields in the structure, the resulting cell\n\
+array will have a dimension vector corresponding to\n\
 @code{[@var{f} size(@var{s})]}.  For example:\n\
 \n\
 @example\n\
 @group\n\
 s = struct (\"name\", @{\"Peter\", \"Hannah\", \"Robert\"@},\n\
            \"age\", @{23, 16, 3@});\n\
 c = struct2cell (s)\n\
    @result{} c = @{2x1x3 Cell Array@}\n\
diff --git a/libinterp/octave-value/ov-class.cc b/libinterp/octave-value/ov-class.cc
--- a/libinterp/octave-value/ov-class.cc
+++ b/libinterp/octave-value/ov-class.cc
@@ -1858,20 +1858,21 @@ octave_class::exemplar_info::compare (co
   return retval;
 }
 
 DEFUN (class, args, ,
        "-*- texinfo -*-\n\
 @deftypefn  {Function File} {@var{classname} =} class (@var{obj})\n\
 @deftypefnx {Function File} {} class (@var{s}, @var{id})\n\
 @deftypefnx {Function File} {} class (@var{s}, @var{id}, @var{p}, @dots{})\n\
-Return the class of the object @var{obj} or create a class with\n\
-fields from structure @var{s} and name (string) @var{id}.  Additional\n\
-arguments name a list of parent classes from which the new class is\n\
-derived.\n\
+Return the class of the object @var{obj}, or create a class with\n\
+fields from structure @var{s} and name (string) @var{id}.\n\
+\n\
+Additional arguments name a list of parent classes from which the new class\n\
+is derived.\n\
 @seealso{typeinfo, isa}\n\
 @end deftypefn")
 {
   octave_value retval;
 
   int nargin = args.length ();
 
   if (nargin == 0)
@@ -2204,16 +2205,17 @@ is_built_in_class (const std::string& cn
   return built_in_class_names.find (cn) != built_in_class_names.end ();
 }
 
 DEFUN (superiorto, args, ,
        "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} superiorto (@var{class_name}, @dots{})\n\
 When called from a class constructor, mark the object currently\n\
 constructed as having a higher precedence than @var{class_name}.\n\
+\n\
 More that one such class can be specified in a single call.\n\
 This function may only be called from a class constructor.\n\
 @seealso{inferiorto}\n\
 @end deftypefn")
 {
   octave_value retval;
 
   octave_function *fcn = octave_call_stack::caller ();
@@ -2249,16 +2251,17 @@ This function may only be called from a 
   return retval;
 }
 
 DEFUN (inferiorto, args, ,
        "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} inferiorto (@var{class_name}, @dots{})\n\
 When called from a class constructor, mark the object currently\n\
 constructed as having a lower precedence than @var{class_name}.\n\
+\n\
 More that one such class can be specified in a single call.\n\
 This function may only be called from a class constructor.\n\
 @seealso{superiorto}\n\
 @end deftypefn")
 {
   octave_value retval;
 
   octave_function *fcn = octave_call_stack::caller ();
diff --git a/libinterp/octave-value/ov-fcn-handle.cc b/libinterp/octave-value/ov-fcn-handle.cc
--- a/libinterp/octave-value/ov-fcn-handle.cc
+++ b/libinterp/octave-value/ov-fcn-handle.cc
@@ -1671,17 +1671,17 @@ make_fcn_handle (const std::string& nm, 
 */
 
 DEFUN (functions, args, ,
        "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {@var{s} =} functions (@var{fcn_handle})\n\
 Return a structure containing information about the function handle\n\
 @var{fcn_handle}.\n\
 \n\
-The structure @var{s} always contains these 3 fields:\n\
+The structure @var{s} always contains these three fields:\n\
 \n\
 @table @asis\n\
 @item function\n\
 The function name.  For an anonymous function (no name) this will be the\n\
 actual function definition.\n\
 \n\
 @item type\n\
 Type of the function.\n\
@@ -1806,18 +1806,18 @@ particular output.\n\
     print_usage ();
 
   return retval;
 }
 
 DEFUN (func2str, args, ,
        "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} func2str (@var{fcn_handle})\n\
-Return a string containing the name of the function referenced by\n\
-the function handle @var{fcn_handle}.\n\
+Return a string containing the name of the function referenced by the\n\
+function handle @var{fcn_handle}.\n\
 @seealso{str2func, functions}\n\
 @end deftypefn")
 {
   octave_value retval;
 
   if (args.length () == 1)
     {
       octave_fcn_handle *fh = args(0).fcn_handle_value ();
@@ -1846,16 +1846,17 @@ the function handle @var{fcn_handle}.\n\
   return retval;
 }
 
 DEFUN (str2func, args, ,
        "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {} str2func (@var{fcn_name})\n\
 @deftypefnx {Built-in Function} {} str2func (@var{fcn_name}, \"global\")\n\
 Return a function handle constructed from the string @var{fcn_name}.\n\
+\n\
 If the optional @qcode{\"global\"} argument is passed, locally visible\n\
 functions are ignored in the lookup.\n\
 @seealso{func2str, inline}\n\
 @end deftypefn")
 {
   octave_value retval;
   int nargin = args.length ();
 
diff --git a/libinterp/octave-value/ov-fcn-inline.cc b/libinterp/octave-value/ov-fcn-inline.cc
--- a/libinterp/octave-value/ov-fcn-inline.cc
+++ b/libinterp/octave-value/ov-fcn-inline.cc
@@ -649,27 +649,26 @@ octave_fcn_inline::convert_to_str_intern
 
 DEFUNX ("inline", Finline, args, ,
         "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {} inline (@var{str})\n\
 @deftypefnx {Built-in Function} {} inline (@var{str}, @var{arg1}, @dots{})\n\
 @deftypefnx {Built-in Function} {} inline (@var{str}, @var{n})\n\
 Create an inline function from the character string @var{str}.\n\
 \n\
-If called with a single argument, the arguments of the generated\n\
-function are extracted from the function itself.  The generated\n\
-function arguments will then be in alphabetical order.  It should\n\
-be noted that i, and j are ignored as arguments due to the\n\
-ambiguity between their use as a variable or their use as an inbuilt\n\
-constant.  All arguments followed by a parenthesis are considered\n\
-to be functions.  If no arguments are found, a function taking a single\n\
-argument named @code{x} will be created.\n\
+If called with a single argument, the arguments of the generated function\n\
+are extracted from the function itself.  The generated function arguments\n\
+will then be in alphabetical order.  It should be noted that i and j are\n\
+ignored as arguments due to the ambiguity between their use as a variable or\n\
+their use as an built-in constant.  All arguments followed by a parenthesis\n\
+are considered to be functions.  If no arguments are found, a function\n\
+taking a single argument named @code{x} will be created.\n\
 \n\
-If the second and subsequent arguments are character strings,\n\
-they are the names of the arguments of the function.\n\
+If the second and subsequent arguments are character strings, they are the\n\
+names of the arguments of the function.\n\
 \n\
 If the second argument is an integer @var{n}, the arguments are\n\
 @qcode{\"x\"}, @qcode{\"P1\"}, @dots{}, @qcode{\"P@var{N}\"}.\n\
 \n\
 Programming Note: The use of @code{inline} is discouraged and it may be\n\
 removed from a future version of Octave.  The preferred way to create\n\
 functions from strings is through the use of anonymous functions\n\
 (@pxref{Anonymous Functions}) or @code{str2func}.\n\
@@ -899,18 +898,18 @@ Note that @code{char (@var{fun})} is equ
 %!error formula ()
 %!error formula (1, 2)
 %!error <FUN must be an inline function> formula (1)
 */
 
 DEFUN (argnames, args, ,
        "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} argnames (@var{fun})\n\
-Return a cell array of character strings containing the names of\n\
-the arguments of the inline function @var{fun}.\n\
+Return a cell array of character strings containing the names of the\n\
+arguments of the inline function @var{fun}.\n\
 @seealso{inline, formula, vectorize}\n\
 @end deftypefn")
 {
   octave_value retval;
 
   int nargin = args.length ();
 
   if (nargin == 1)
@@ -946,23 +945,21 @@ the arguments of the inline function @va
 %!error argnames ()
 %!error argnames (1, 2)
 %!error <FUN must be an inline function> argnames (1)
 */
 
 DEFUN (vectorize, args, ,
        "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} vectorize (@var{fun})\n\
-Create a vectorized version of the inline function @var{fun}\n\
-by replacing all occurrences of @code{*}, @code{/}, etc., with\n\
-@code{.*}, @code{./}, etc.\n\
+Create a vectorized version of the inline function @var{fun} by replacing\n\
+all occurrences of @code{*}, @code{/}, etc., with @code{.*}, @code{./}, etc.\n\
 \n\
-This may be useful, for example, when using inline functions with\n\
-numerical integration or optimization where a vector-valued function\n\
-is expected.\n\
+This may be useful, for example, when using inline functions with numerical\n\
+integration or optimization where a vector-valued function is expected.\n\
 \n\
 @example\n\
 @group\n\
 fcn = vectorize (inline (\"x^2 - 1\"))\n\
    @result{} fcn = f(x) = x.^2 - 1\n\
 quadv (fcn, 0, 3)\n\
    @result{} 6\n\
 @end group\n\
diff --git a/libinterp/octave-value/ov-java.cc b/libinterp/octave-value/ov-java.cc
--- a/libinterp/octave-value/ov-java.cc
+++ b/libinterp/octave-value/ov-java.cc
@@ -2036,18 +2036,19 @@ octave_java::do_java_set (JNIEnv* jni_en
 
 #endif  // endif on HAVE_JAVA
 
 // DEFUN blocks below must be outside of HAVE_JAVA block so that
 // documentation strings are always available, even when functions are not.
 
 DEFUN (__java_init__, , ,
        "-*- texinfo -*-\n\
-@deftypefn {Built-in Function} {} java_init ()\n\
+@deftypefn {Built-in Function} {} __java_init__ ()\n\
 Internal function used @strong{only} when debugging Java interface.\n\
+\n\
 Function will directly call initialize_java() to create an instance of a JVM.\n\
 @end deftypefn")
 {
 
 #ifdef HAVE_JAVA
   octave_value retval;
 
   retval = 0;
@@ -2061,18 +2062,19 @@ Function will directly call initialize_j
 #else
   error ("__java_init__: Octave was not compiled with Java interface");
   return octave_value ();
 #endif
 }
 
 DEFUN (__java_exit__, , ,
        "-*- texinfo -*-\n\
-@deftypefn {Built-in Function} {} java_exit ()\n\
+@deftypefn {Built-in Function} {} __java_exit__ ()\n\
 Internal function used @strong{only} when debugging Java interface.\n\
+\n\
 Function will directly call terminate_jvm() to destroy the current JVM\n\
 instance.\n\
 @end deftypefn")
 {
 #ifdef HAVE_JAVA
   terminate_jvm ();
 #else
   error ("__java_init__: Octave was not compiled with Java interface");
@@ -2083,18 +2085,18 @@ instance.\n\
 
 DEFUN (javaObject, args, ,
        "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {@var{jobj} =} javaObject (@var{classname})\n\
 @deftypefnx {Built-in Function} {@var{jobj} =} javaObject (@var{classname}, @var{arg1}, @dots{})\n\
 Create a Java object of class @var{classsname}, by calling the class\n\
 constructor with the arguments @var{arg1}, @dots{}\n\
 \n\
-The first example below creates an uninitialized object,\n\
-while the second example supplies an initial argument to the constructor.\n\
+The first example below creates an uninitialized object, while the second\n\
+example supplies an initial argument to the constructor.\n\
 \n\
 @example\n\
 @group\n\
 x = javaObject (\"java.lang.StringBuffer\")\n\
 x = javaObject (\"java.lang.StringBuffer\", \"Initial string\")\n\
 @end group\n\
 @end example\n\
 \n\
@@ -2131,43 +2133,46 @@ x = javaObject (\"java.lang.StringBuffer
   return retval;
 #else
   error ("javaObject: Octave was not compiled with Java interface");
   return octave_value ();
 #endif
 }
 
 /*
+## The tests below merely check if javaObject() works at all.  Whether it works
+## properly, i.e., creates the right values, is a matter of Java itself.
+## Create a Short and check if it really is a short, i.e., whether it overflows.
 %!testif HAVE_JAVA
-%% The tests below merely check if javaObject works at all. Whether it works
-%% properly, i.e. creates the right values, is a matter of Java itself
-%% Create a Short and check if it really is a short, i.e. whether it overflows
 %! assert (javaObject ("java.lang.Short", 40000).doubleValue < 0);
 */
 
 DEFUN (javaMethod, args, ,
        "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {@var{ret} =} javaMethod (@var{methodname}, @var{obj})\n\
 @deftypefnx {Built-in Function} {@var{ret} =} javaMethod (@var{methodname}, @var{obj}, @var{arg1}, @dots{})\n\
 Invoke the method @var{methodname} on the Java object @var{obj} with the\n\
-arguments @var{arg1}, @dots{}  For static methods, @var{obj} can be a string\n\
-representing the fully qualified name of the corresponding class.  The\n\
-function returns the result of the method invocation.\n\
+arguments @var{arg1}, @dots{}.\n\
+\n\
+For static methods, @var{obj} can be a string representing the fully\n\
+qualified name of the corresponding class.\n\
 \n\
 When @var{obj} is a regular Java object, structure-like indexing can be\n\
 used as a shortcut syntax.  For instance, the two following statements are\n\
 equivalent\n\
 \n\
 @example\n\
 @group\n\
   ret = javaMethod (\"method1\", x, 1.0, \"a string\")\n\
   ret = x.method1 (1.0, \"a string\")\n\
 @end group\n\
 @end example\n\
 \n\
+@code{javaMethod} returns the result of the method invocation.\n\
+\n\
 @seealso{methods, javaObject}\n\
 @end deftypefn")
 {
 #ifdef HAVE_JAVA
   octave_value retval;
 
   initialize_java ();
 
@@ -2209,30 +2214,31 @@ equivalent\n\
 #else
   error ("javaMethod: Octave was not compiled with Java interface");
   return octave_value ();
 #endif
 }
 
 /*
 %!testif HAVE_JAVA
-%% Check for valid first two Java version numbers
-%! jver = strsplit (javaMethod ('getProperty', 'java.lang.System', 'java.version'), '.');
+%! ## Check for valid first two Java version numbers
+%! jver = strsplit (javaMethod ("getProperty", "java.lang.System", "java.version"), ".");
 %! assert (isfinite (str2double (jver{1})) && isfinite (str2double (jver{2})));
 */
 
 DEFUN (__java_get__, args, ,
        "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {@var{val} =} __java_get__ (@var{obj}, @var{name})\n\
-Get the value of the field @var{name} of the Java object @var{obj}.  For\n\
-static fields, @var{obj} can be a string representing the fully qualified\n\
+Get the value of the field @var{name} of the Java object @var{obj}.\n\
+\n\
+For static fields, @var{obj} can be a string representing the fully qualified\n\
 name of the corresponding class.\n\
 \n\
-When @var{obj} is a regular Java object, structure-like indexing can be\n\
-used as a shortcut syntax.  For instance, the two following statements are\n\
+When @var{obj} is a regular Java object, structure-like indexing can be used\n\
+as a shortcut syntax.  For instance, the two following statements are\n\
 equivalent\n\
 \n\
 @example\n\
 @group\n\
   __java_get__ (x, \"field1\")\n\
   x.field1\n\
 @end group\n\
 @end example\n\
@@ -2281,18 +2287,20 @@ equivalent\n\
   return octave_value ();
 #endif
 }
 
 DEFUN (__java_set__, args, ,
        "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {@var{obj} =} __java_set__ (@var{obj}, @var{name}, @var{val})\n\
 Set the value of the field @var{name} of the Java object @var{obj} to\n\
-@var{val}.  For static fields, @var{obj} can be a string representing the\n\
-fully qualified named of the corresponding Java class.\n\
+@var{val}.\n\
+\n\
+For static fields, @var{obj} can be a string representing the fully\n\
+qualified named of the corresponding Java class.\n\
 \n\
 When @var{obj} is a regular Java object, structure-like indexing can be\n\
 used as a shortcut syntax.  For instance, the two following statements are\n\
 equivalent\n\
 \n\
 @example\n\
 @group\n\
   __java_set__ (x, \"field1\", val)\n\
@@ -2382,20 +2390,22 @@ Undocumented internal function.\n\
 }
 
 DEFUN (java_matrix_autoconversion, args, nargout,
        "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {@var{val} =} java_matrix_autoconversion ()\n\
 @deftypefnx {Built-in Function} {@var{old_val} =} java_matrix_autoconversion (@var{new_val})\n\
 @deftypefnx {Built-in Function} {} java_matrix_autoconversion (@var{new_val}, \"local\")\n\
 Query or set the internal variable that controls whether Java arrays are\n\
-automatically converted to Octave matrices.  The default value is false.\n\
+automatically converted to Octave matrices.\n\
+\n\
+The default value is false.\n\
 \n\
 When called from inside a function with the @qcode{\"local\"} option, the\n\
-variable is changed locally for the function and any subroutines it calls.  \n\
+variable is changed locally for the function and any subroutines it calls.\n\
 The original variable value is restored when exiting the function.\n\
 @seealso{java_unsigned_autoconversion, debug_java}\n\
 @end deftypefn")
 {
 #ifdef HAVE_JAVA
   return SET_INTERNAL_VARIABLE (java_matrix_autoconversion);
 #else
   error ("java_matrix_autoconversion: Octave was not compiled with Java interface");
@@ -2404,22 +2414,23 @@ The original variable value is restored 
 }
 
 DEFUN (java_unsigned_autoconversion, args, nargout,
        "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {@var{val} =} java_unsigned_autoconversion ()\n\
 @deftypefnx {Built-in Function} {@var{old_val} =} java_unsigned_autoconversion (@var{new_val})\n\
 @deftypefnx {Built-in Function} {} java_unsigned_autoconversion (@var{new_val}, \"local\")\n\
 Query or set the internal variable that controls how integer classes are\n\
-converted when @code{java_matrix_autoconversion} is enabled.  When enabled,\n\
-Java arrays of class Byte or Integer are converted to matrices of class\n\
-uint8 or uint32 respectively.  The default value is true.\n\
+converted when @code{java_matrix_autoconversion} is enabled.\n\
+\n\
+When enabled, Java arrays of class Byte or Integer are converted to matrices\n\
+of class uint8 or uint32 respectively.  The default value is true.\n\
 \n\
 When called from inside a function with the @qcode{\"local\"} option, the\n\
-variable is changed locally for the function and any subroutines it calls.  \n\
+variable is changed locally for the function and any subroutines it calls.\n\
 The original variable value is restored when exiting the function.\n\
 @seealso{java_matrix_autoconversion, debug_java}\n\
 @end deftypefn")
 {
 #ifdef HAVE_JAVA
   return SET_INTERNAL_VARIABLE (java_unsigned_autoconversion);
 #else
   error ("java_unsigned_autoconversion: Octave was not compiled with Java interface");
@@ -2432,17 +2443,17 @@ DEFUN (debug_java, args, nargout,
 @deftypefn  {Built-in Function} {@var{val} =} debug_java ()\n\
 @deftypefnx {Built-in Function} {@var{old_val} =} debug_java (@var{new_val})\n\
 @deftypefnx {Built-in Function} {} debug_java (@var{new_val}, \"local\")\n\
 Query or set the internal variable that determines whether extra debugging\n\
 information regarding the initialization of the JVM and any Java exceptions\n\
 is printed.\n\
 \n\
 When called from inside a function with the @qcode{\"local\"} option, the\n\
-variable is changed locally for the function and any subroutines it calls.  \n\
+variable is changed locally for the function and any subroutines it calls.\n\
 The original variable value is restored when exiting the function.\n\
 @seealso{java_matrix_autoconversion, java_unsigned_autoconversion}\n\
 @end deftypefn")
 {
 #ifdef HAVE_JAVA
   return SET_INTERNAL_VARIABLE (debug_java);
 #else
   error ("debug_java: Octave was not compiled with Java interface");
@@ -2465,26 +2476,29 @@ Return true if @var{x} is a Java object.
     print_usage ();
   else
     retval = args(0).is_java ();
 
   return retval;
 }
 
 /*
-## Check automatic conversion of java primitive arrays into octave types
-%!assert (javaObject ("java.lang.String", "hello").getBytes (),
-%!        int8 ([104 101 108 108 111]'))
-
-## Check automatic conversion of octave types into java primitive arrays
-## Note that uint8 are casted into int8
-%!assert (javaMethod ("binarySearch", "java.util.Arrays", [90 100 255], 255), 2)
-%!assert (javaMethod ("binarySearch", "java.util.Arrays", uint8  ([90 100 255]), uint8  (255)) < 0)
-%!assert (javaMethod ("binarySearch", "java.util.Arrays", uint8  ([90 100 128]), uint8  (128)) < 0)
-%!assert (javaMethod ("binarySearch", "java.util.Arrays", uint8  ([90 100 127]), uint8  (127)), 2)
-%!assert (javaMethod ("binarySearch", "java.util.Arrays", uint16 ([90 100 128]), uint16 (128)), 2)
-
-## Check we can create objects that wrap java literals (bug #38821)
-%!assert (class (javaObject ("java.lang.Byte", uint8 (1))), "java.lang.Byte");
-%!assert (class (javaObject ("java.lang.Byte", int8 (1))), "java.lang.Byte");
-%!assert (class (javaObject ("java.lang.Short", uint16 (1))), "java.lang.Short");
-%!assert (class (javaObject ("java.lang.Short", int16 (1))), "java.lang.Short");
+## Check automatic conversion of java primitive arrays into octave types.
+%!testif HAVE_JAVA
+%! assert (javaObject ("java.lang.String", "hello").getBytes (),
+%!         int8 ([104 101 108 108 111]'));
+
+## Check automatic conversion of octave types into java primitive arrays.
+## Note that uint8 is casted to int8.
+%!testif HAVE_JAVA
+%! assert (javaMethod ("binarySearch", "java.util.Arrays", [90 100 255], 255), 2);
+%! assert (javaMethod ("binarySearch", "java.util.Arrays", uint8 ([90 100 255]), uint8 (255)) < 0);
+%! assert (javaMethod ("binarySearch", "java.util.Arrays", uint8 ([90 100 128]), uint8 (128)) < 0);
+%! assert (javaMethod ("binarySearch", "java.util.Arrays", uint8 ([90 100 127]), uint8 (127)), 2);
+%! assert (javaMethod ("binarySearch", "java.util.Arrays", uint16 ([90 100 128]), uint16 (128)), 2);
+
+## Check we can create objects that wrap java literals (bug #38821).
+%!testif HAVE_JAVA
+%! assert (class (javaObject ("java.lang.Byte", uint8 (1))), "java.lang.Byte");
+%! assert (class (javaObject ("java.lang.Byte", int8 (1))), "java.lang.Byte");
+%! assert (class (javaObject ("java.lang.Short", uint16 (1))), "java.lang.Short");
+%! assert (class (javaObject ("java.lang.Short", int16 (1))), "java.lang.Short");
 */
diff --git a/libinterp/octave-value/ov-null-mat.cc b/libinterp/octave-value/ov-null-mat.cc
--- a/libinterp/octave-value/ov-null-mat.cc
+++ b/libinterp/octave-value/ov-null-mat.cc
@@ -92,19 +92,21 @@ octave_null_sq_str::numeric_conversion_f
            (default_null_sq_str_numeric_conversion_function,
             octave_char_matrix_sq_str::static_type_id ());
 }
 
 DEFUN (isnull, args, ,
        "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} isnull (@var{x})\n\
 Return true if @var{x} is a special null matrix, string, or single quoted\n\
-string.  Indexed assignment with such a value on the right-hand side should\n\
-delete array elements.  This function should be used when overloading\n\
-indexed assignment for user-defined classes instead of @code{isempty}, to\n\
+string.\n\
+\n\
+Indexed assignment with such a value on the right-hand side should delete\n\
+array elements.  This function should be used when overloading indexed\n\
+assignment for user-defined classes instead of @code{isempty}, to\n\
 distinguish the cases:\n\
 \n\
 @table @asis\n\
 @item @code{A(I) = []}\n\
 This should delete elements if @code{I} is nonempty.\n\
 \n\
 @item @code{X = []; A(I) = X}\n\
 This should give an error if @code{I} is nonempty.\n\
diff --git a/libinterp/octave-value/ov-oncleanup.cc b/libinterp/octave-value/ov-oncleanup.cc
--- a/libinterp/octave-value/ov-oncleanup.cc
+++ b/libinterp/octave-value/ov-oncleanup.cc
@@ -179,16 +179,17 @@ octave_oncleanup::print_raw (std::ostrea
     fcn.print_raw (os, pr_as_read_syntax);
   os << ")";
 }
 
 DEFUN (onCleanup, args, ,
        "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {@var{obj} =} onCleanup (@var{function})\n\
 Create a special object that executes a given function upon destruction.\n\
+\n\
 If the object is copied to multiple variables (or cell or struct array\n\
 elements) or returned from a function, @var{function} will be executed after\n\
 clearing the last copy of the object.  Note that if multiple local onCleanup\n\
 variables are created, the order in which they are called is unspecified.\n\
 For similar functionality @xref{The unwind_protect Statement}.\n\
 @end deftypefn")
 {
   octave_value retval;
diff --git a/libinterp/octave-value/ov-range.cc b/libinterp/octave-value/ov-range.cc
--- a/libinterp/octave-value/ov-range.cc
+++ b/libinterp/octave-value/ov-range.cc
@@ -698,22 +698,24 @@ octave_range::fast_elem_extract (octave_
 }
 
 DEFUN (allow_noninteger_range_as_index, args, nargout,
        "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {@var{val} =} allow_noninteger_range_as_index ()\n\
 @deftypefnx {Built-in Function} {@var{old_val} =} allow_noninteger_range_as_index (@var{new_val})\n\
 @deftypefnx {Built-in Function} {} allow_noninteger_range_as_index (@var{new_val}, \"local\")\n\
 Query or set the internal variable that controls whether non-integer\n\
-ranges are allowed as indices.  This might be useful for @sc{matlab}\n\
-compatibility; however, it is still not entirely compatible because\n\
-@sc{matlab} treats the range expression differently in different contexts.\n\
+ranges are allowed as indices.\n\
+\n\
+This might be useful for @sc{matlab} compatibility; however, it is still not\n\
+entirely compatible because @sc{matlab} treats the range expression\n\
+differently in different contexts.\n\
 \n\
 When called from inside a function with the @qcode{\"local\"} option, the\n\
-variable is changed locally for the function and any subroutines it calls.  \n\
+variable is changed locally for the function and any subroutines it calls.\n\
 The original variable value is restored when exiting the function.\n\
 @end deftypefn")
 {
   static bool warned = false;
   if (! warned)
     {
       warned = true;
       warning_with_id ("Octave:deprecated-function",
diff --git a/libinterp/octave-value/ov-struct.cc b/libinterp/octave-value/ov-struct.cc
--- a/libinterp/octave-value/ov-struct.cc
+++ b/libinterp/octave-value/ov-struct.cc
@@ -1779,26 +1779,27 @@ octave_scalar_struct::fast_elem_insert_s
 }
 
 DEFUN (struct, args, ,
        "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {@var{s} =} struct ()\n\
 @deftypefnx {Built-in Function} {@var{s} =} struct (@var{field1}, @var{value1}, @var{field2}, @var{value2}, @dots{})\n\
 @deftypefnx {Built-in Function} {@var{s} =} struct (@var{obj})\n\
 \n\
-Create a scalar or array structure and initialize its values.  The\n\
-@var{field1}, @var{field2}, @dots{} variables are strings specifying the\n\
-names of the fields and the @var{value1}, @var{value2}, @dots{}\n\
-variables can be of any type.\n\
+Create a scalar or array structure and initialize its values.\n\
+\n\
+The @var{field1}, @var{field2}, @dots{} variables are strings specifying the\n\
+names of the fields and the @var{value1}, @var{value2}, @dots{} variables\n\
+can be of any type.\n\
 \n\
-If the values are cell arrays, create a structure array and initialize\n\
-its values.  The dimensions of each cell array of values must match.\n\
-Singleton cells and non-cell values are repeated so that they fill\n\
-the entire array.  If the cells are empty, create an empty structure\n\
-array with the specified field names.\n\
+If the values are cell arrays, create a structure array and initialize its\n\
+values.  The dimensions of each cell array of values must match.  Singleton\n\
+cells and non-cell values are repeated so that they fill the entire array.  \n\
+If the cells are empty, create an empty structure array with the specified\n\
+field names.\n\
 \n\
 If the argument is an object, return the underlying struct.\n\
 \n\
 Observe that the syntax is optimized for struct @strong{arrays}.  Consider\n\
 the following examples:\n\
 \n\
 @example\n\
 @group\n\
@@ -1819,17 +1820,17 @@ struct (\"foo\", @{1, 2, 3@})\n\
     foo\n\
 \n\
 @end group\n\
 @end example\n\
 \n\
 @noindent\n\
 The first case is an ordinary scalar struct---one field, one value.  The\n\
 second produces an empty struct array with one field and no values, since\n\
-s being passed an empty cell array of struct array values.  When the value is\n\
+being passed an empty cell array of struct array values.  When the value is\n\
 a cell array containing a single entry, this becomes a scalar struct with\n\
 that single entry as the value of the field.  That single entry happens\n\
 to be an empty cell array.\n\
 \n\
 Finally, if the value is a non-scalar cell array, then @code{struct}\n\
 produces a struct @strong{array}.\n\
 @seealso{cell2struct, fieldnames, getfield, setfield, rmfield, isfield, orderfields, isstruct, structfun}\n\
 @end deftypefn")
@@ -2117,20 +2118,22 @@ Return the number of fields of the struc
 %!assert (isfield (struct ("a", "b"), "a "), false)
 %!assert (isfield (struct ("a", 1, "b", 2), {"a", "c"}), [true, false])
 */
 
 DEFUN (cell2struct, args, ,
        "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {} cell2struct (@var{cell}, @var{fields})\n\
 @deftypefnx {Built-in Function} {} cell2struct (@var{cell}, @var{fields}, @var{dim})\n\
-Convert @var{cell} to a structure.  The number of fields in @var{fields}\n\
-must match the number of elements in @var{cell} along dimension @var{dim},\n\
-that is @code{numel (@var{fields}) == size (@var{cell}, @var{dim})}.\n\
-If @var{dim} is omitted, a value of 1 is assumed.\n\
+Convert @var{cell} to a structure.\n\
+\n\
+The number of fields in @var{fields} must match the number of elements in\n\
+@var{cell} along dimension @var{dim}, that is\n\
+@code{numel (@var{fields}) == size (@var{cell}, @var{dim})}.  If @var{dim}\n\
+is omitted, a value of 1 is assumed.\n\
 \n\
 @example\n\
 @group\n\
 A = cell2struct (@{\"Peter\", \"Hannah\", \"Robert\";\n\
                    185, 170, 168@},\n\
                  @{\"Name\",\"Height\"@}, 1);\n\
 A(1)\n\
    @result{}\n\
@@ -2324,38 +2327,38 @@ DEFUN (struct_levels_to_print, args, nar
        "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {@var{val} =} struct_levels_to_print ()\n\
 @deftypefnx {Built-in Function} {@var{old_val} =} struct_levels_to_print (@var{new_val})\n\
 @deftypefnx {Built-in Function} {} struct_levels_to_print (@var{new_val}, \"local\")\n\
 Query or set the internal variable that specifies the number of\n\
 structure levels to display.\n\
 \n\
 When called from inside a function with the @qcode{\"local\"} option, the\n\
-variable is changed locally for the function and any subroutines it calls.  \n\
+variable is changed locally for the function and any subroutines it calls.\n\
 The original variable value is restored when exiting the function.\n\
 @seealso{print_struct_array_contents}\n\
 @end deftypefn")
 {
   return SET_INTERNAL_VARIABLE_WITH_LIMITS (struct_levels_to_print, -1,
                                             std::numeric_limits<int>::max ());
 }
 
 DEFUN (print_struct_array_contents, args, nargout,
        "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {@var{val} =} print_struct_array_contents ()\n\
 @deftypefnx {Built-in Function} {@var{old_val} =} print_struct_array_contents (@var{new_val})\n\
 @deftypefnx {Built-in Function} {} print_struct_array_contents (@var{new_val}, \"local\")\n\
 Query or set the internal variable that specifies whether to print struct\n\
 array contents.\n\
 \n\
-If true, values of struct array elements are printed.\n\
-This variable does not affect scalar structures whose elements are always\n\
-printed.  In both cases, however, printing will be limited to\n\
-the number of levels specified by @var{struct_levels_to_print}.\n\
+If true, values of struct array elements are printed.  This variable does\n\
+not affect scalar structures whose elements are always printed.  In both\n\
+cases, however, printing will be limited to the number of levels specified\n\
+by @var{struct_levels_to_print}.\n\
 \n\
 When called from inside a function with the @qcode{\"local\"} option, the\n\
-variable is changed locally for the function and any subroutines it calls.  \n\
+variable is changed locally for the function and any subroutines it calls.\n\
 The original variable value is restored when exiting the function.\n\
 @seealso{struct_levels_to_print}\n\
 @end deftypefn")
 {
   return SET_INTERNAL_VARIABLE (print_struct_array_contents);
 }
diff --git a/libinterp/octave-value/ov-typeinfo.cc b/libinterp/octave-value/ov-typeinfo.cc
--- a/libinterp/octave-value/ov-typeinfo.cc
+++ b/libinterp/octave-value/ov-typeinfo.cc
@@ -609,18 +609,19 @@ octave_value_typeinfo::do_installed_type
   return retval;
 }
 
 DEFUN (typeinfo, args, ,
        "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {} typeinfo ()\n\
 @deftypefnx {Built-in Function} {} typeinfo (@var{expr})\n\
 \n\
-Return the type of the expression @var{expr}, as a string.  If\n\
-@var{expr} is omitted, return a cell array of strings containing all the\n\
+Return the type of the expression @var{expr}, as a string.\n\
+\n\
+If @var{expr} is omitted, return a cell array of strings containing all the\n\
 currently installed data types.\n\
 @seealso{class, isa}\n\
 @end deftypefn")
 {
   octave_value retval;
 
   int nargin = args.length ();
 
diff --git a/libinterp/octave-value/ov-usr-fcn.cc b/libinterp/octave-value/ov-usr-fcn.cc
--- a/libinterp/octave-value/ov-usr-fcn.cc
+++ b/libinterp/octave-value/ov-usr-fcn.cc
@@ -1044,17 +1044,17 @@ DEFUN (optimize_subsasgn_calls, args, na
 @deftypefnx {Built-in Function} {@var{old_val} =} optimize_subsasgn_calls (@var{new_val})\n\
 @deftypefnx {Built-in Function} {} optimize_subsasgn_calls (@var{new_val}, \"local\")\n\
 Query or set the internal flag for subsasgn method call optimizations.\n\
 \n\
 If true, Octave will attempt to eliminate the redundant copying when calling\n\
 the subsasgn method of a user-defined class.\n\
 \n\
 When called from inside a function with the @qcode{\"local\"} option, the\n\
-variable is changed locally for the function and any subroutines it calls.  \n\
+variable is changed locally for the function and any subroutines it calls.\n\
 The original variable value is restored when exiting the function.\n\
 @end deftypefn")
 {
   return SET_INTERNAL_VARIABLE (optimize_subsasgn_calls);
 }
 
 static bool val_in_table (const Matrix& table, double val)
 {
diff --git a/libinterp/octave-value/ov.cc b/libinterp/octave-value/ov.cc
--- a/libinterp/octave-value/ov.cc
+++ b/libinterp/octave-value/ov.cc
@@ -3019,27 +3019,25 @@ decode_subscripts (const char* name, con
   else
     error ("%s: second argument must be a structure with fields 'type' and 'subs'",
            name);
 }
 
 DEFUN (subsref, args, nargout,
        "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} subsref (@var{val}, @var{idx})\n\
-Perform the subscripted element selection operation according to\n\
-the subscript specified by @var{idx}.\n\
+Perform the subscripted element selection operation according to the\n\
+subscript specified by @var{idx}.\n\
 \n\
-The subscript @var{idx} is expected to be a structure array with\n\
-fields @samp{type} and @samp{subs}.  Valid values for @samp{type}\n\
-are @samp{\"()\"}, @samp{\"@{@}\"}, and @samp{\".\"}.\n\
-The @samp{subs} field may be either @samp{\":\"} or a cell array\n\
-of index values.\n\
+The subscript @var{idx} is expected to be a structure array with fields\n\
+@samp{type} and @samp{subs}.  Valid values for @samp{type} are\n\
+@samp{\"()\"}, @samp{\"@{@}\"}, and @samp{\".\"}.  The @samp{subs} field may\n\
+be either @samp{\":\"} or a cell array of index values.\n\
 \n\
-The following example shows how to extract the first two columns of\n\
-a matrix\n\
+The following example shows how to extract the first two columns of a matrix\n\
 \n\
 @example\n\
 @group\n\
 val = magic (3)\n\
     @result{} val = [ 8   1   6\n\
                3   5   7\n\
                4   9   2 ]\n\
 idx.type = \"()\";\n\
@@ -3049,18 +3047,18 @@ subsref (val, idx)\n\
           3   5\n\
           4   9 ]\n\
 @end group\n\
 @end example\n\
 \n\
 @noindent\n\
 Note that this is the same as writing @code{val(:,1:2)}.\n\
 \n\
-If @var{idx} is an empty structure array with fields @samp{type}\n\
-and @samp{subs}, return @var{val}.\n\
+If @var{idx} is an empty structure array with fields @samp{type} and\n\
+@samp{subs}, return @var{val}.\n\
 @seealso{subsasgn, substruct}\n\
 @end deftypefn")
 {
   octave_value_list retval;
 
   if (args.length () == 2)
     {
       std::string type;
@@ -3082,44 +3080,43 @@ and @samp{subs}, return @var{val}.\n\
     print_usage ();
 
   return retval;
 }
 
 DEFUN (subsasgn, args, ,
        "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} subsasgn (@var{val}, @var{idx}, @var{rhs})\n\
-Perform the subscripted assignment operation according to\n\
-the subscript specified by @var{idx}.\n\
+Perform the subscripted assignment operation according to the subscript\n\
+specified by @var{idx}.\n\
 \n\
-The subscript @var{idx} is expected to be a structure array with\n\
-fields @samp{type} and @samp{subs}.  Valid values for @samp{type}\n\
-are @samp{\"()\"}, @samp{\"@{@}\"}, and @samp{\".\"}.\n\
-The @samp{subs} field may be either @samp{\":\"} or a cell array\n\
-of index values.\n\
+The subscript @var{idx} is expected to be a structure array with fields\n\
+@samp{type} and @samp{subs}.  Valid values for @samp{type} are\n\
+@samp{\"()\"}, @samp{\"@{@}\"}, and @samp{\".\"}.  The @samp{subs} field may\n\
+be either @samp{\":\"} or a cell array of index values.\n\
 \n\
-The following example shows how to set the two first columns of a\n\
-3-by-3 matrix to zero.\n\
+The following example shows how to set the two first columns of a 3-by-3\n\
+matrix to zero.\n\
 \n\
 @example\n\
 @group\n\
 val = magic (3);\n\
 idx.type = \"()\";\n\
 idx.subs = @{\":\", 1:2@};\n\
 subsasgn (val, idx, 0)\n\
      @result{}  [ 0   0   6\n\
            0   0   7\n\
            0   0   2 ]\n\
 @end group\n\
 @end example\n\
 \n\
 Note that this is the same as writing @code{val(:,1:2) = 0}.\n\
 \n\
-If @var{idx} is an empty structure array with fields @samp{type}\n\
-and @samp{subs}, return @var{rhs}.\n\
+If @var{idx} is an empty structure array with fields @samp{type} and\n\
+@samp{subs}, return @var{rhs}.\n\
 @seealso{subsref, substruct}\n\
 @end deftypefn")
 {
   octave_value retval;
 
   if (args.length () == 3)
     {
       std::string type;
@@ -3274,19 +3271,20 @@ Return true if @var{x} is a double-quote
 */
 
 DEFUN (disable_permutation_matrix, args, nargout,
        "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {@var{val} =} disable_permutation_matrix ()\n\
 @deftypefnx {Built-in Function} {@var{old_val} =} disable_permutation_matrix (@var{new_val})\n\
 @deftypefnx {Built-in Function} {} disable_permutation_matrix (@var{new_val}, \"local\")\n\
 Query or set the internal variable that controls whether permutation\n\
-matrices are stored in a special space-efficient format.  The default\n\
-value is true.  If this option is disabled Octave will store permutation\n\
-matrices as full matrices.\n\
+matrices are stored in a special space-efficient format.\n\
+\n\
+The default value is true.  If this option is disabled Octave will store\n\
+permutation matrices as full matrices.\n\
 \n\
 When called from inside a function with the @qcode{\"local\"} option, the\n\
 variable is changed locally for the function and any subroutines it calls.\n\
 The original variable value is restored when exiting the function.\n\
 @seealso{disable_range, disable_diagonal_matrix}\n\
 @end deftypefn")
 {
   return SET_INTERNAL_VARIABLE (disable_permutation_matrix);
@@ -3303,19 +3301,20 @@ The original variable value is restored 
 */
 
 DEFUN (disable_diagonal_matrix, args, nargout,
        "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {@var{val} =} disable_diagonal_matrix ()\n\
 @deftypefnx {Built-in Function} {@var{old_val} =} disable_diagonal_matrix (@var{new_val})\n\
 @deftypefnx {Built-in Function} {} disable_diagonal_matrix (@var{new_val}, \"local\")\n\
 Query or set the internal variable that controls whether diagonal\n\
-matrices are stored in a special space-efficient format.  The default\n\
-value is true.  If this option is disabled Octave will store diagonal\n\
-matrices as full matrices.\n\
+matrices are stored in a special space-efficient format.\n\
+\n\
+The default value is true.  If this option is disabled Octave will store\n\
+diagonal matrices as full matrices.\n\
 \n\
 When called from inside a function with the @qcode{\"local\"} option, the\n\
 variable is changed locally for the function and any subroutines it calls.\n\
 The original variable value is restored when exiting the function.\n\
 @seealso{disable_range, disable_permutation_matrix}\n\
 @end deftypefn")
 {
   return SET_INTERNAL_VARIABLE (disable_diagonal_matrix);
@@ -3346,18 +3345,20 @@ The original variable value is restored 
 */
 
 DEFUN (disable_range, args, nargout,
        "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {@var{val} =} disable_range ()\n\
 @deftypefnx {Built-in Function} {@var{old_val} =} disable_range (@var{new_val})\n\
 @deftypefnx {Built-in Function} {} disable_range (@var{new_val}, \"local\")\n\
 Query or set the internal variable that controls whether ranges are stored\n\
-in a special space-efficient format.  The default value is true.  If this\n\
-option is disabled Octave will store ranges as full matrices.\n\
+in a special space-efficient format.\n\
+\n\
+The default value is true.  If this option is disabled Octave will store\n\
+ranges as full matrices.\n\
 \n\
 When called from inside a function with the @qcode{\"local\"} option, the\n\
 variable is changed locally for the function and any subroutines it calls.\n\
 The original variable value is restored when exiting the function.\n\
 @seealso{disable_diagonal_matrix, disable_permutation_matrix}\n\
 @end deftypefn")
 {
   return SET_INTERNAL_VARIABLE (disable_range);
diff --git a/libinterp/parse-tree/lex.ll b/libinterp/parse-tree/lex.ll
--- a/libinterp/parse-tree/lex.ll
+++ b/libinterp/parse-tree/lex.ll
@@ -1894,18 +1894,19 @@ is_keyword (const std::string& s)
   return (octave_kw_hash::in_word_set (s.c_str (), s.length ()) != 0
           && ! (s == "set" || s == "get"));
 }
 
 DEFUN (iskeyword, args, ,
   "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {} iskeyword ()\n\
 @deftypefnx {Built-in Function} {} iskeyword (@var{name})\n\
-Return true if @var{name} is an Octave keyword.  If @var{name}\n\
-is omitted, return a list of keywords.\n\
+Return true if @var{name} is an Octave keyword.\n\
+\n\
+If @var{name} is omitted, return a list of keywords.\n\
 @seealso{isvarname, exist}\n\
 @end deftypefn")
 {
   octave_value retval;
 
   int argc = args.length () + 1;
 
   string_vector argv = args.make_argv ("iskeyword");
diff --git a/libinterp/parse-tree/oct-parse.in.yy b/libinterp/parse-tree/oct-parse.in.yy
--- a/libinterp/parse-tree/oct-parse.in.yy
+++ b/libinterp/parse-tree/oct-parse.in.yy
@@ -4311,25 +4311,25 @@ load_fcn_from_file (const std::string& f
 
 DEFUN (autoload, args, ,
   "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {@var{autoload_map} =} autoload ()\n\
 @deftypefnx {Built-in Function} {} autoload (@var{function}, @var{file})\n\
 @deftypefnx {Built-in Function} {} autoload (@dots{}, \"remove\")\n\
 Define @var{function} to autoload from @var{file}.\n\
 \n\
-The second argument, @var{file}, should be an absolute file name or\n\
-a file name in the same directory as the function or script from which\n\
-the autoload command was run.  @var{file} @emph{should not} depend on the\n\
-Octave load path.\n\
+The second argument, @var{file}, should be an absolute file name or a file\n\
+name in the same directory as the function or script from which the autoload\n\
+command was run.  @var{file} @emph{should not} depend on the Octave load\n\
+path.\n\
 \n\
-Normally, calls to @code{autoload} appear in PKG_ADD script files that\n\
-are evaluated when a directory is added to Octave's load path.  To\n\
-avoid having to hardcode directory names in @var{file}, if @var{file}\n\
-is in the same directory as the PKG_ADD script then\n\
+Normally, calls to @code{autoload} appear in PKG_ADD script files that are\n\
+evaluated when a directory is added to Octave's load path.  To avoid having\n\
+to hardcode directory names in @var{file}, if @var{file} is in the same\n\
+directory as the PKG_ADD script then\n\
 \n\
 @example\n\
 autoload (\"foo\", \"bar.oct\");\n\
 @end example\n\
 \n\
 @noindent\n\
 will load the function @code{foo} from the file @code{bar.oct}.  The above\n\
 usage when @code{bar.oct} is not in the same directory, or usages such as\n\
@@ -4538,20 +4538,23 @@ source_file (const std::string& file_nam
 
 DEFUN (mfilename, args, ,
   "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {} mfilename ()\n\
 @deftypefnx {Built-in Function} {} mfilename (\"fullpath\")\n\
 @deftypefnx {Built-in Function} {} mfilename (\"fullpathext\")\n\
 Return the name of the currently executing file.\n\
 \n\
-When called from outside an m-file return the empty string.  Given the\n\
-argument @qcode{\"fullpath\"}, include the directory part of the file name,\n\
-but not the extension.  Given the argument @qcode{\"fullpathext\"}, include\n\
-the directory part of the file name and the extension.\n\
+When called from outside an m-file return the empty string.\n\
+\n\
+Given the argument @qcode{\"fullpath\"}, include the directory part of the\n\
+file name, but not the extension.\n\
+\n\
+Given the argument @qcode{\"fullpathext\"}, include the directory part of\n\
+the file name and the extension.\n\
 @end deftypefn")
 {
   octave_value retval;
 
   int nargin = args.length ();
 
   if (nargin > 1)
     {
@@ -4727,34 +4730,35 @@ feval (const octave_value_list& args, in
     }
 
   return retval;
 }
 
 DEFUN (feval, args, nargout,
   "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} feval (@var{name}, @dots{})\n\
-Evaluate the function named @var{name}.  Any arguments after the first\n\
-are passed as inputs to the named function.  For example,\n\
+Evaluate the function named @var{name}.\n\
+\n\
+Any arguments after the first are passed as inputs to the named function.\n\
+For example,\n\
 \n\
 @example\n\
 @group\n\
 feval (\"acos\", -1)\n\
      @result{} 3.1416\n\
 @end group\n\
 @end example\n\
 \n\
 @noindent\n\
 calls the function @code{acos} with the argument @samp{-1}.\n\
 \n\
-The function @code{feval} can also be used with function handles of\n\
-any sort (@pxref{Function Handles}).  Historically, @code{feval} was\n\
-the only way to call user-supplied functions in strings, but\n\
-function handles are now preferred due to the cleaner syntax they\n\
-offer.  For example,\n\
+The function @code{feval} can also be used with function handles of any sort\n\
+(@pxref{Function Handles}).  Historically, @code{feval} was the only way to\n\
+call user-supplied functions in strings, but function handles are now\n\
+preferred due to the cleaner syntax they offer.  For example,\n\
 \n\
 @example\n\
 @group\n\
 @var{f} = @@exp;\n\
 feval (@var{f}, 1)\n\
     @result{} 2.7183\n\
 @var{f} (1)\n\
     @result{} 2.7183\n\
@@ -4778,22 +4782,22 @@ instead.\n\
     print_usage ();
 
   return retval;
 }
 
 DEFUN (builtin, args, nargout,
   "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {[@dots{}] =} builtin (@var{f}, @dots{})\n\
-Call the base function @var{f} even if @var{f} is overloaded to\n\
-another function for the given type signature.\n\
+Call the base function @var{f} even if @var{f} is overloaded to another\n\
+function for the given type signature.\n\
 \n\
-This is normally useful when doing object-oriented programming and there\n\
-is a requirement to call one of Octave's base functions rather than\n\
-the overloaded one of a new class.\n\
+This is normally useful when doing object-oriented programming and there is\n\
+a requirement to call one of Octave's base functions rather than the\n\
+overloaded one of a new class.\n\
 \n\
 A trivial example which redefines the @code{sin} function to be the\n\
 @code{cos} function shows how @code{builtin} works.\n\
 \n\
 @example\n\
 @group\n\
 sin (0)\n\
   @result{} 0\n\
@@ -4940,19 +4944,22 @@ cleanup_statement_list (tree_statement_l
     }
 }
 
 DEFUN (eval, args, nargout,
   "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {} eval (@var{try})\n\
 @deftypefnx {Built-in Function} {} eval (@var{try}, @var{catch})\n\
 Parse the string @var{try} and evaluate it as if it were an Octave\n\
-program.  If that fails, evaluate the optional string @var{catch}.\n\
-The string @var{try} is evaluated in the current context,\n\
-so any results remain available after @code{eval} returns.\n\
+program.\n\
+\n\
+If execution fails, evaluate the optional string @var{catch}.\n\
+\n\
+The string @var{try} is evaluated in the current context, so any results\n\
+remain available after @code{eval} returns.\n\
 \n\
 The following example creates the variable @var{A} with the approximate\n\
 value of 3.1416 in the current workspace.\n\
 \n\
 @example\n\
 eval (\"A = acos(-1);\");\n\
 @end example\n\
 \n\
@@ -5108,19 +5115,18 @@ may be either @qcode{\"base\"} or @qcode
 
   return retval;
 }
 
 DEFUN (evalin, args, nargout,
   "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {} evalin (@var{context}, @var{try})\n\
 @deftypefnx {Built-in Function} {} evalin (@var{context}, @var{try}, @var{catch})\n\
-Like @code{eval}, except that the expressions are evaluated in the\n\
-context @var{context}, which may be either @qcode{\"caller\"} or\n\
-@qcode{\"base\"}.\n\
+Like @code{eval}, except that the expressions are evaluated in the context\n\
+@var{context}, which may be either @qcode{\"caller\"} or @qcode{\"base\"}.\n\
 @seealso{eval, assignin}\n\
 @end deftypefn")
 {
   octave_value_list retval;
 
   int nargin = args.length ();
 
   if (nargin > 1)
diff --git a/libinterp/parse-tree/pt-binop.cc b/libinterp/parse-tree/pt-binop.cc
--- a/libinterp/parse-tree/pt-binop.cc
+++ b/libinterp/parse-tree/pt-binop.cc
@@ -303,17 +303,17 @@ conditions of if or while statements.\n\
 \n\
 This feature is only provided for compatibility with @sc{matlab} and should\n\
 not be used unless you are porting old code that relies on this feature.\n\
 \n\
 To obtain short-circuit behavior for logical expressions in new programs,\n\
 you should always use the @samp{&&} and @samp{||} operators.\n\
 \n\
 When called from inside a function with the @qcode{\"local\"} option, the\n\
-variable is changed locally for the function and any subroutines it calls.  \n\
+variable is changed locally for the function and any subroutines it calls.\n\
 The original variable value is restored when exiting the function.\n\
 @end deftypefn")
 {
   static bool warned = false;
   if (! warned)
     {
       warned = true;
       warning_with_id ("Octave:deprecated-function",
diff --git a/libinterp/parse-tree/pt-eval.cc b/libinterp/parse-tree/pt-eval.cc
--- a/libinterp/parse-tree/pt-eval.cc
+++ b/libinterp/parse-tree/pt-eval.cc
@@ -1254,18 +1254,20 @@ tree_evaluator::do_keyboard (const octav
 }
 
 DEFUN (max_recursion_depth, args, nargout,
        "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {@var{val} =} max_recursion_depth ()\n\
 @deftypefnx {Built-in Function} {@var{old_val} =} max_recursion_depth (@var{new_val})\n\
 @deftypefnx {Built-in Function} {} max_recursion_depth (@var{new_val}, \"local\")\n\
 Query or set the internal limit on the number of times a function may\n\
-be called recursively.  If the limit is exceeded, an error message is\n\
-printed and control returns to the top level.\n\
+be called recursively.\n\
+\n\
+If the limit is exceeded, an error message is printed and control returns to\n\
+the top level.\n\
 \n\
 When called from inside a function with the @qcode{\"local\"} option, the\n\
 variable is changed locally for the function and any subroutines it calls.\n\
 The original variable value is restored when exiting the function.\n\
 @end deftypefn")
 {
   return SET_INTERNAL_VARIABLE (max_recursion_depth);
 }
@@ -1283,19 +1285,21 @@ The original variable value is restored 
 */
 
 DEFUN (silent_functions, args, nargout,
        "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {@var{val} =} silent_functions ()\n\
 @deftypefnx {Built-in Function} {@var{old_val} =} silent_functions (@var{new_val})\n\
 @deftypefnx {Built-in Function} {} silent_functions (@var{new_val}, \"local\")\n\
 Query or set the internal variable that controls whether internal\n\
-output from a function is suppressed.  If this option is disabled,\n\
-Octave will display the results produced by evaluating expressions\n\
-within a function body that are not terminated with a semicolon.\n\
+output from a function is suppressed.\n\
+\n\
+If this option is disabled, Octave will display the results produced by\n\
+evaluating expressions within a function body that are not terminated with\n\
+a semicolon.\n\
 \n\
 When called from inside a function with the @qcode{\"local\"} option, the\n\
 variable is changed locally for the function and any subroutines it calls.\n\
 The original variable value is restored when exiting the function.\n\
 @end deftypefn")
 {
   return SET_INTERNAL_VARIABLE (silent_functions);
 }
diff --git a/libinterp/parse-tree/pt-mat.cc b/libinterp/parse-tree/pt-mat.cc
--- a/libinterp/parse-tree/pt-mat.cc
+++ b/libinterp/parse-tree/pt-mat.cc
@@ -1386,31 +1386,33 @@ tree_matrix::accept (tree_walker& tw)
 */
 
 DEFUN (string_fill_char, args, nargout,
        "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {@var{val} =} string_fill_char ()\n\
 @deftypefnx {Built-in Function} {@var{old_val} =} string_fill_char (@var{new_val})\n\
 @deftypefnx {Built-in Function} {} string_fill_char (@var{new_val}, \"local\")\n\
 Query or set the internal variable used to pad all rows of a character\n\
-matrix to the same length; It must be a single character.  The default\n\
-value is @qcode{\" \"} (a single space).  For example:\n\
+matrix to the same length.\n\
+\n\
+The value must be a single character and the default is @qcode{\" \"} (a\n\
+single space).  For example:\n\
 \n\
 @example\n\
 @group\n\
 string_fill_char (\"X\");\n\
 [ \"these\"; \"are\"; \"strings\" ]\n\
       @result{}  \"theseXX\"\n\
           \"areXXXX\"\n\
           \"strings\"\n\
 @end group\n\
 @end example\n\
 \n\
 When called from inside a function with the @qcode{\"local\"} option, the\n\
-variable is changed locally for the function and any subroutines it calls.  \n\
+variable is changed locally for the function and any subroutines it calls.\n\
 The original variable value is restored when exiting the function.\n\
 @end deftypefn")
 {
   return SET_INTERNAL_VARIABLE (string_fill_char);
 }
 
 /*
 ## string_fill_char() function call must be outside of %!test block
diff --git a/liboctave/util/lo-utils.cc b/liboctave/util/lo-utils.cc
--- a/liboctave/util/lo-utils.cc
+++ b/liboctave/util/lo-utils.cc
@@ -234,17 +234,18 @@ read_inf_nan_na (std::istream& is, char 
         if (c1 == 'a' || c1 == 'A')
           {
             char c2 = is.get ();
             if (c2 == 'n' || c2 == 'N')
               val = std::numeric_limits<T>::quiet_NaN ();
             else
               {
                 val = octave_numeric_limits<T>::NA ();
-                is.putback (c2);
+                if (c2 != EOF)
+                  is.putback (c2);
               }
           }
         else
           is.setstate (std::ios::failbit);
       }
       break;
 
     default:
diff --git a/m4/acinclude.m4 b/m4/acinclude.m4
--- a/m4/acinclude.m4
+++ b/m4/acinclude.m4
@@ -1054,16 +1054,38 @@ AC_DEFUN([OCTAVE_CHECK_LIB_QHULL_OK], [
   if test $octave_cv_lib_qhull_ok = yes; then
     $1
     :
   else
     $2
     :
   fi
 ])
+dnl 
+dnl Check whether sndfile library is modern enough to include things like Ogg
+dnl
+AC_DEFUN([OCTAVE_CHECK_LIB_SNDFILE_OK], [
+  AC_CACHE_CHECK([whether sndfile library is modern enough],
+    [octave_cv_lib_sndfile_ok],
+    [AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[
+        #include <sndfile.h>
+        ]], [[
+        int x = SF_FORMAT_OGG;
+      ]])],
+      octave_cv_lib_sndfile_ok=yes,
+      octave_cv_lib_sndfile_ok=no)
+  ])
+  if test $octave_cv_lib_sndfile_ok = yes; then
+    $1
+    :
+  else
+    $2
+    :
+  fi
+])
 dnl
 dnl Find a suitable termlib to use.
 dnl
 AC_DEFUN([OCTAVE_CHECK_LIB_TERMLIB], [
   TERM_LIBS=
   ac_octave_save_LIBS="$LIBS"
   AC_SEARCH_LIBS([tputs],
                  [ncurses curses termcap terminfo termlib],
diff --git a/scripts/@ftp/ascii.m b/scripts/@ftp/ascii.m
--- a/scripts/@ftp/ascii.m
+++ b/scripts/@ftp/ascii.m
@@ -14,18 +14,19 @@
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} ascii (@var{f})
 ## Set the FTP connection @var{f} to use ASCII mode for transfers.
-## ASCII mode is only appropriate for text files as it will convert
-## the remote host's newline representation to the local host's newline
+##
+## ASCII mode is only appropriate for text files as it will convert the
+## remote host's newline representation to the local host's newline
 ## representation.
 ##
 ## @var{f} is an FTP object returned by the @code{ftp} function.
 ## @end deftypefn
 
 function ascii (f)
   __ftp_ascii__ (f.curlhandle);
 endfunction
diff --git a/scripts/@ftp/binary.m b/scripts/@ftp/binary.m
--- a/scripts/@ftp/binary.m
+++ b/scripts/@ftp/binary.m
@@ -14,16 +14,17 @@
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} binary (@var{f})
 ## Set the FTP connection @var{f} to use binary mode for transfers.
+##
 ## In binary mode there is no conversion of newlines from the remote
 ## representation to the local representation.
 ##
 ## @var{f} is an FTP object returned by the @code{ftp} function.
 ## @end deftypefn
 
 function binary (f)
   __ftp_binary__ (f.curlhandle);
diff --git a/scripts/@ftp/cd.m b/scripts/@ftp/cd.m
--- a/scripts/@ftp/cd.m
+++ b/scripts/@ftp/cd.m
@@ -19,18 +19,18 @@
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {} cd (@var{f})
 ## @deftypefnx {Function File} {} cd (@var{f}, @var{path})
 ## Get or set the remote directory on the FTP connection @var{f}.
 ##
 ## @var{f} is an FTP object returned by the @code{ftp} function.
 ##
 ## If @var{path} is not specified, return the remote current working
-## directory.  Otherwise, set the remote directory to @var{path} and
-## return the new remote working directory.
+## directory.  Otherwise, set the remote directory to @var{path} and return
+## the new remote working directory.
 ##
 ## If the directory does not exist, an error message is printed and the
 ## working directory is not changed.
 ## @end deftypefn
 
 function path = cd (f, path)
   if (nargin != 1 && nargin != 2)
     print_usage ();
diff --git a/scripts/@ftp/dir.m b/scripts/@ftp/dir.m
--- a/scripts/@ftp/dir.m
+++ b/scripts/@ftp/dir.m
@@ -13,18 +13,17 @@
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {@var{lst} =} dir (@var{f})
-## List the current directory in verbose form for the FTP connection
-## @var{f}.
+## List the current directory in verbose form for the FTP connection @var{f}.
 ##
 ## @var{f} is an FTP object returned by the @code{ftp} function.
 ## @end deftypefn
 
 function lst = dir (f)
   if (nargout == 0)
     __ftp_dir__ (f.curlhandle);
   else
diff --git a/scripts/@ftp/ftp.m b/scripts/@ftp/ftp.m
--- a/scripts/@ftp/ftp.m
+++ b/scripts/@ftp/ftp.m
@@ -15,16 +15,17 @@
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {@var{f} =} ftp (@var{host})
 ## @deftypefnx {Function File} {@var{f} =} ftp (@var{host}, @var{username}, @var{password})
 ## Connect to the FTP server @var{host} with @var{username} and @var{password}.
+##
 ## If @var{username} and @var{password} are not specified, user
 ## @qcode{"anonymous"} with no password is used.  The returned FTP object
 ## @var{f} represents the established FTP connection.
 ##
 ## The list of actions for an FTP object are shown below.  All functions
 ## require an FTP object as the first argument.
 ##
 ## @multitable @columnfractions 0.15 0.8
diff --git a/scripts/@ftp/mget.m b/scripts/@ftp/mget.m
--- a/scripts/@ftp/mget.m
+++ b/scripts/@ftp/mget.m
@@ -16,18 +16,19 @@
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {} mget (@var{f}, @var{file})
 ## @deftypefnx {Function File} {} mget (@var{f}, @var{dir})
 ## @deftypefnx {Function File} {} mget (@var{f}, @var{remote_name}, @var{target})
 ## Download a remote file @var{file} or directory @var{dir} to the local
-## directory on the FTP connection @var{f}.  @var{f} is an FTP object
-## returned by the @code{ftp} function.
+## directory on the FTP connection @var{f}.
+##
+## @var{f} is an FTP object returned by the @code{ftp} function.
 ##
 ## The arguments @var{file} and @var{dir} can include wildcards and any
 ## files or directories on the remote server that match will be downloaded.
 ##
 ## If a third argument @var{target} is given, then a single file or
 ## directory will be downloaded to the local directory and the local name
 ## will be changed to @var{target}.
 ## @end deftypefn
diff --git a/scripts/@ftp/mput.m b/scripts/@ftp/mput.m
--- a/scripts/@ftp/mput.m
+++ b/scripts/@ftp/mput.m
@@ -13,19 +13,20 @@
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} mput (@var{f}, @var{file})
-## Upload the local file @var{file} into the current remote directory on
-## the FTP connection @var{f}.  @var{f} is an FTP object returned by the
-## ftp function.
+## Upload the local file @var{file} into the current remote directory on the
+## FTP connection @var{f}.
+##
+## @var{f} is an FTP object returned by the ftp function.
 ##
 ## The argument @var{file} is passed through the @code{glob} function and any
 ## files that match the wildcards in @var{file} will be uploaded.
 ## @end deftypefn
 
 function retval = mput (f, file)
   if (nargout == 0)
     __ftp_mput__ (f.curlhandle, file);
diff --git a/scripts/audio/@audioplayer/__get_properties__.m b/scripts/audio/@audioplayer/__get_properties__.m
--- a/scripts/audio/@audioplayer/__get_properties__.m
+++ b/scripts/audio/@audioplayer/__get_properties__.m
@@ -13,18 +13,18 @@
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {@var{properties} =} __get_properties__ (@var{player})
-## Return a struct containing all named properties of the audioplayer
-## object @var{player}.
+## Return a struct containing all named properties of the audioplayer object
+## @var{player}.
 ## @end deftypefn
 
 function props = __get_properties__ (player)
 
   if (nargin != 1)
     print_usage ();
   endif
 
diff --git a/scripts/audio/@audioplayer/audioplayer.m b/scripts/audio/@audioplayer/audioplayer.m
--- a/scripts/audio/@audioplayer/audioplayer.m
+++ b/scripts/audio/@audioplayer/audioplayer.m
@@ -18,21 +18,22 @@
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {@var{player} =} audioplayer (@var{y}, @var{fs})
 ## @deftypefnx {Function File} {@var{player} =} audioplayer (@var{y}, @var{fs}, @var{nbits})
 ## @deftypefnx {Function File} {@var{player} =} audioplayer (@var{y}, @var{fs}, @var{nbits}, @var{id})
 ## @deftypefnx {Function File} {@var{player} =} audioplayer (@var{recorder})
 ## @deftypefnx {Function File} {@var{player} =} audioplayer (@var{recorder}, @var{id})
 ## Create an audioplayer object that will play back data @var{y} at sample
-## rate @var{fs}.  The optional arguments @var{nbits}, and @var{id}
-## specify the bit depth and player device id, respectively.  Device IDs
-## may be found using the audiodevinfo function.
-## Given an audioplayer object, use the data from the object to
-## initialize the player.
+## rate @var{fs}.
+##
+## The optional arguments @var{nbits}, and @var{id} specify the bit depth and
+## player device id, respectively.  Device IDs may be found using the
+## audiodevinfo function.  Given an audioplayer object, use the data from the
+## object to initialize the player.
 ##
 ## The signal @var{y} can be a vector or a two-dimensional array.
 ##
 ## The following example will create an audioplayer object that will play
 ## back one second of white noise at 44100 sample rate using 8 bits per
 ## sample.
 ##
 ## @example
diff --git a/scripts/audio/@audioplayer/get.m b/scripts/audio/@audioplayer/get.m
--- a/scripts/audio/@audioplayer/get.m
+++ b/scripts/audio/@audioplayer/get.m
@@ -15,21 +15,22 @@
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {@var{value} =} get (@var{player}, @var{name})
 ## @deftypefnx {Function File} {@var{values} =} get (@var{player})
 ## Return the @var{value} of the property identified by @var{name}.
+##
 ## If @var{name} is a cell array return the values of the properties
-## identified by the elements of the cell array.  Given only the
-## player object, return a scalar structure with values of all
-## properties of @var{player}.  The field names of the structure
-## correspond to property names.
+## identified by the elements of the cell array.  Given only the player
+## object, return a scalar structure with values of all properties of
+## @var{player}.  The field names of the structure correspond to property
+## names.
 ## @end deftypefn
 
 function retval = get (varargin)
 
   if (nargin < 1 || nargin > 2)
     print_usage ();
   endif
 
diff --git a/scripts/audio/@audioplayer/isplaying.m b/scripts/audio/@audioplayer/isplaying.m
--- a/scripts/audio/@audioplayer/isplaying.m
+++ b/scripts/audio/@audioplayer/isplaying.m
@@ -13,18 +13,18 @@
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} isplaying (@var{player})
-## Return 1 if the audioplayer object @var{player}is currently playing
-## back audio and 0 otherwise.
+## Return true if the audioplayer object @var{player} is currently playing back
+## audio and false otherwise.
 ## @end deftypefn
 
 function result = isplaying (player)
 
   if (nargin != 1)
     print_usage ();
   endif
 
diff --git a/scripts/audio/@audioplayer/play.m b/scripts/audio/@audioplayer/play.m
--- a/scripts/audio/@audioplayer/play.m
+++ b/scripts/audio/@audioplayer/play.m
@@ -16,20 +16,20 @@
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {} play (@var{player})
 ## @deftypefnx {Function File} {} play (@var{player}, @var{start})
 ## @deftypefnx {Function File} {} play (@var{player}, @var{limits})
 ## Play audio stored in the audioplayer object @var{player} without blocking.
-## Given optional argument start, begin playing at @var{start} seconds
-## in the recording.  Given a two-element vector @var{limits}, begin and
-## end playing at the number of seconds specified by the elements of the
-## vector.
+##
+## Given optional argument start, begin playing at @var{start} seconds in the
+## recording.  Given a two-element vector @var{limits}, begin and end playing
+## at the number of seconds specified by the elements of the vector.
 ## @end deftypefn
 
 function play (varargin)
 
   if (nargin < 1 || nargin > 2)
     print_usage ();
   endif
 
diff --git a/scripts/audio/@audioplayer/playblocking.m b/scripts/audio/@audioplayer/playblocking.m
--- a/scripts/audio/@audioplayer/playblocking.m
+++ b/scripts/audio/@audioplayer/playblocking.m
@@ -16,20 +16,20 @@
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {} playblocking (@var{player})
 ## @deftypefnx {Function File} {} playblocking (@var{player}, @var{start})
 ## @deftypefnx {Function File} {} playblocking (@var{player}, @var{limits})
 ## Play audio stored in the audioplayer object @var{player} with blocking.
-## Given optional argument start, begin playing at @var{start} seconds
-## in the recording.  Given a two-element vector @var{limits}, begin and
-## end playing at the number of seconds specified by the elements of the
-## vector.
+##
+## Given optional argument start, begin playing at @var{start} seconds in the
+## recording.  Given a two-element vector @var{limits}, begin and end playing
+## at the number of seconds specified by the elements of the vector.
 ## @end deftypefn
 
 function playblocking (varargin)
 
   if (nargin < 1 || nargin > 2)
     print_usage ();
   endif
 
diff --git a/scripts/audio/@audioplayer/set.m b/scripts/audio/@audioplayer/set.m
--- a/scripts/audio/@audioplayer/set.m
+++ b/scripts/audio/@audioplayer/set.m
@@ -16,21 +16,22 @@
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {} set (@var{player}, @var{name}, @var{value})
 ## @deftypefnx {Function File} {} set (@var{player}, @var{properties})
 ## @deftypefnx {Function File} {@var{properties} =} set (@var{player})
 ## Set the value of property specified by @var{name} to a given @var{value}.
+##
 ## If @var{name} and @var{value} are cell arrays, set each property to the
-## corresponding value.  Given a structure of @var{properties} with
-## fields corresponding to property names, set the value of those
-## properties to the field values.  Given only the audioplayer object,
-## return a structure of settable properties.
+## corresponding value.  Given a structure of @var{properties} with fields
+## corresponding to property names, set the value of those properties to the
+## field values.  Given only the audioplayer object, return a structure of
+## settable properties.
 ## @end deftypefn
 
 function settable = set (varargin)
 
   if (nargin < 1 || nargin > 3)
     print_usage ();
   endif
 
diff --git a/scripts/audio/@audioplayer/subsasgn.m b/scripts/audio/@audioplayer/subsasgn.m
--- a/scripts/audio/@audioplayer/subsasgn.m
+++ b/scripts/audio/@audioplayer/subsasgn.m
@@ -14,16 +14,17 @@
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {@var{value} =} subsasgn (@var{player}, @var{idx}, @var{rhs})
 ## Perform subscripted assignment on the audio player object @var{player}.
+##
 ## Assign the value of @var{rhs} to the player property named by @var{idx}.
 ## @end deftypefn
 
 function value = subsasgn (player, idx, rhs)
 
   if (isempty (idx))
     error ("audioplayer: missing index");
   endif
diff --git a/scripts/audio/@audioplayer/subsref.m b/scripts/audio/@audioplayer/subsref.m
--- a/scripts/audio/@audioplayer/subsref.m
+++ b/scripts/audio/@audioplayer/subsref.m
@@ -14,16 +14,17 @@
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {@var{value} =} subsref (@var{player}, @var{idx})
 ## Perform subscripted selection on the audio player object @var{player}.
+##
 ## Return the player property value named by @var{idx}.
 ## @end deftypefn
 
 function value = subsref (player, idx)
   if (nargin != 2)
     print_usage ();
   endif
 
diff --git a/scripts/audio/@audiorecorder/audiorecorder.m b/scripts/audio/@audiorecorder/audiorecorder.m
--- a/scripts/audio/@audiorecorder/audiorecorder.m
+++ b/scripts/audio/@audiorecorder/audiorecorder.m
@@ -16,20 +16,22 @@
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {@var{recorder} =} audiorecorder ()
 ## @deftypefnx {Function File} {@var{recorder} =} audiorecorder (@var{fs}, @var{nbits}, @var{channels})
 ## @deftypefnx {Function File} {@var{recorder} =} audiorecorder (@var{fs}, @var{nbits}, @var{channels}, @var{id})
 ## Create an audiorecorder object recording 8 bit mono audio at 8000 Hz
-## sample rate.  The optional arguments @var{fs}, @var{nbits},
-## @var{channels}, and @var{id} specify the sample rate, bit depth,
-## number of channels and recording device id, respectively.  Device IDs
-## may be found using the audiodevinfo function.
+## sample rate.
+##
+## The optional arguments @var{fs}, @var{nbits}, @var{channels}, and @var{id}
+## specify the sample rate, bit depth, number of channels and recording
+## device id, respectively.  Device IDs may be found using the audiodevinfo
+## function.
 ## @end deftypefn
 
 ## FIXME: callbacks don't work properly, apparently because portaudio
 ## will execute the callbacks in a separate thread, and calling Octave
 ## functions in a separate thread which is likely to cause trouble with
 ## all of Octave's global data...
 ##
 ## @deftypefnx {Function File} {@var{recorder} =} audiorecorder (@var{function}, @dots{})
diff --git a/scripts/audio/@audiorecorder/get.m b/scripts/audio/@audiorecorder/get.m
--- a/scripts/audio/@audiorecorder/get.m
+++ b/scripts/audio/@audiorecorder/get.m
@@ -15,21 +15,22 @@
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {@var{value} =} get (@var{recorder}, @var{name})
 ## @deftypefnx {Function File} {@var{values} =} get (@var{recorder})
 ## Return the @var{value} of the property identified by @var{name}.
+##
 ## If @var{name} is a cell array, return the values of the properties
-## corresponding to the elements of the cell array.  Given only the
-## recorder object, return a scalar structure with values of all
-## properties of @var{recorder}.  The field names of the structure
-## correspond to property names.
+## corresponding to the elements of the cell array.  Given only the recorder
+## object, return a scalar structure with values of all properties of
+## @var{recorder}.  The field names of the structure correspond to property
+## names.
 ## @end deftypefn
 
 function retval = get (varargin)
 
   if (nargin < 1 || nargin > 2)
     print_usage ();
   endif
 
diff --git a/scripts/audio/@audiorecorder/getaudiodata.m b/scripts/audio/@audiorecorder/getaudiodata.m
--- a/scripts/audio/@audiorecorder/getaudiodata.m
+++ b/scripts/audio/@audiorecorder/getaudiodata.m
@@ -16,16 +16,17 @@
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {@var{data} =} getaudiodata (@var{recorder})
 ## @deftypefnx {Function File} {@var{data} =} getaudiodata (@var{recorder}, @var{datatype})
 ## Return recorder audio data as a matrix with values between -1.0 and 1.0
 ## and with as many columns as there are channels in the recorder.
+##
 ## Given the optional argument @var{datatype}, convert the recorded data
 ## to the specified type, which may be one of @qcode{"double"},
 ## @qcode{"single"}, @qcode{"int16"}, @qcode{"int8"} or @qcode{"uint8"}.
 ## @end deftypefn
 
 function data = getaudiodata (varargin)
 
   if (nargin < 1 || nargin > 2)
diff --git a/scripts/audio/@audiorecorder/getplayer.m b/scripts/audio/@audiorecorder/getplayer.m
--- a/scripts/audio/@audiorecorder/getplayer.m
+++ b/scripts/audio/@audiorecorder/getplayer.m
@@ -13,18 +13,18 @@
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {@var{player} =} getplayer (@var{recorder})
-## Return an audioplayer object with data recorded by the audiorecorder
-## object @var{recorder}.
+## Return an audioplayer object with data recorded by the audiorecorder object
+## @var{recorder}.
 ## @end deftypefn
 
 function player = getplayer (varargin)
 
   if (nargin < 1 || nargin > 2)
     print_usage ();
   endif
 
diff --git a/scripts/audio/@audiorecorder/isrecording.m b/scripts/audio/@audiorecorder/isrecording.m
--- a/scripts/audio/@audiorecorder/isrecording.m
+++ b/scripts/audio/@audiorecorder/isrecording.m
@@ -13,18 +13,18 @@
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} isrecording (@var{recorder})
-## Return 1 if the audiorecorder object @var{recorder} is currently
-## recording audio and 0 otherwise.
+## Return true if the audiorecorder object @var{recorder} is currently recording
+## audio and false otherwise.
 ## @end deftypefn
 
 function result = isrecording (recorder)
 
   if (nargin != 1)
     print_usage ();
   endif
 
diff --git a/scripts/audio/@audiorecorder/play.m b/scripts/audio/@audiorecorder/play.m
--- a/scripts/audio/@audiorecorder/play.m
+++ b/scripts/audio/@audiorecorder/play.m
@@ -16,18 +16,21 @@
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {@var{player} =} play (@var{recorder})
 ## @deftypefnx {Function File} {@var{player} =} play (@var{recorder}, @var{start})
 ## @deftypefnx {Function File} {@var{player} =} play (@var{recorder}, [@var{start}, @var{end}])
 ## Play the audio recorded in @var{recorder} and return a corresponding
-## audioplayer object.  If the optional argument @var{start} is
-## provided, begin playing @var{start} seconds in to the recording.
+## audioplayer object.
+## 
+## If the optional argument @var{start} is provided, begin playing
+## @var{start} seconds in to the recording.
+## 
 ## If the optional argument @var{end} is provided, stop playing at
 ## @var{end} seconds in the recording.
 ## @end deftypefn
 
 function player = play (varargin)
 
   if (nargin < 1 || nargin > 2)
     print_usage ();
diff --git a/scripts/audio/@audiorecorder/record.m b/scripts/audio/@audiorecorder/record.m
--- a/scripts/audio/@audiorecorder/record.m
+++ b/scripts/audio/@audiorecorder/record.m
@@ -15,19 +15,20 @@
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {} record (@var{recorder})
 ## @deftypefnx {Function File} {} record (@var{recorder}, @var{length})
 ## Record audio without blocking using the audiorecorder object
-## @var{recorder} until stopped or paused by the @var{stop} or
-## @var{pause} method.  Given the optional argument @var{length}, record
-## for @var{length} seconds.
+## @var{recorder} until stopped or paused by the @var{stop} or @var{pause}
+## method.
+##
+## Given the optional argument @var{length}, record for @var{length} seconds.
 ## @end deftypefn
 
 function record (varargin)
 
   if (nargin < 1 || nargin > 2)
     print_usage ();
   endif
 
diff --git a/scripts/audio/@audiorecorder/recordblocking.m b/scripts/audio/@audiorecorder/recordblocking.m
--- a/scripts/audio/@audiorecorder/recordblocking.m
+++ b/scripts/audio/@audiorecorder/recordblocking.m
@@ -13,18 +13,19 @@
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} recordblocking (@var{recorder}, @var{length})
-## Record audio with blocking (synchronous I/O).  You must specify the
-## length of the recording in seconds.
+## Record audio with blocking (synchronous I/O).
+##
+## The length of the recording in seconds (@var{length}) must be specified.
 ## @end deftypefn
 
 function recordblocking (varargin)
 
   if (nargin != 2)
     print_usage ();
   endif
 
diff --git a/scripts/audio/@audiorecorder/set.m b/scripts/audio/@audiorecorder/set.m
--- a/scripts/audio/@audiorecorder/set.m
+++ b/scripts/audio/@audiorecorder/set.m
@@ -16,22 +16,22 @@
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {} set (@var{recorder}, @var{name}, @var{value})
 ## @deftypefnx {Function File} {} set (@var{recorder}, @var{properties})
 ## @deftypefnx {Function File} {@var{properties} =} set (@var{recorder})
 ## Set the value of property specified by @var{name} to a given @var{value}.
-## If @var{name} and @var{value} are cell arrays of the same size,
-## set each property to a corresponding value.
-## Given a structure with fields corresponding to property names, set
-## the value of those properties to the corresponding field values.
-## Given only the recorder object, return a structure of settable
-## properties.
+##
+## If @var{name} and @var{value} are cell arrays of the same size, set each
+## property to a corresponding value.  Given a structure with fields
+## corresponding to property names, set the value of those properties to the
+## corresponding field values.  Given only the recorder object, return a
+## structure of settable properties.
 ## @end deftypefn
 
 function settable = set (varargin)
 
   if (nargin < 1 || nargin > 3)
     print_usage ();
   endif
 
diff --git a/scripts/audio/@audiorecorder/stop.m b/scripts/audio/@audiorecorder/stop.m
--- a/scripts/audio/@audiorecorder/stop.m
+++ b/scripts/audio/@audiorecorder/stop.m
@@ -13,18 +13,17 @@
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} stop (@var{recorder})
-## Stop the audiorecorder object @var{recorder} and clean up any audio
-## streams.
+## Stop the audiorecorder object @var{recorder} and clean up any audio streams.
 ## @end deftypefn
 
 function stop (recorder)
 
   if (nargin != 1)
     print_usage ();
   endif
 
diff --git a/scripts/audio/@audiorecorder/subsasgn.m b/scripts/audio/@audiorecorder/subsasgn.m
--- a/scripts/audio/@audiorecorder/subsasgn.m
+++ b/scripts/audio/@audiorecorder/subsasgn.m
@@ -14,16 +14,17 @@
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {@var{value} =} subsasgn (@var{recorder}, @var{idx}, @var{rhs})
 ## Perform subscripted assignment on the audio recorder object @var{recorder}.
+##
 ## Assign the value of @var{rhs} to the recorder property named by @var{idx}.
 ## @end deftypefn
 
 function value = subsasgn (recorder, idx, rhs)
   if (nargin != 3)
     print_usage ();
   endif
 
diff --git a/scripts/audio/@audiorecorder/subsref.m b/scripts/audio/@audiorecorder/subsref.m
--- a/scripts/audio/@audiorecorder/subsref.m
+++ b/scripts/audio/@audiorecorder/subsref.m
@@ -14,16 +14,17 @@
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {@var{value} =} subsref (@var{recorder}, @var{idx})
 ## Perform subscripted selection on the audio recorder object @var{recorder}.
+##
 ## Return the recorder property value named by @var{idx}.
 ## @end deftypefn
 
 function value = subsref (recorder, idx)
 
   if (nargin != 2)
     print_usage ();
   endif
diff --git a/scripts/audio/lin2mu.m b/scripts/audio/lin2mu.m
--- a/scripts/audio/lin2mu.m
+++ b/scripts/audio/lin2mu.m
@@ -13,20 +13,21 @@
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} lin2mu (@var{x}, @var{n})
-## Convert audio data from linear to mu-law.  Mu-law values use 8-bit
-## unsigned integers.  Linear values use @var{n}-bit signed integers or
-## floating point values in the range -1 @leq{} @var{x} @leq{} 1 if
-## @var{n} is 0.
+## Convert audio data from linear to mu-law.
+##
+## Mu-law values use 8-bit unsigned integers.  Linear values use @var{n}-bit
+## signed integers or floating point values in the range -1 @leq{} @var{x}
+## @leq{} 1 if @var{n} is 0.
 ##
 ## If @var{n} is not specified it defaults to 0, 8, or 16 depending on
 ## the range of values in @var{x}.
 ## @seealso{mu2lin}
 ## @end deftypefn
 
 
 ## Author: Andreas Weingessel <Andreas.Weingessel@ci.tuwien.ac.at>
diff --git a/scripts/audio/mu2lin.m b/scripts/audio/mu2lin.m
--- a/scripts/audio/mu2lin.m
+++ b/scripts/audio/mu2lin.m
@@ -13,20 +13,21 @@
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} mu2lin (@var{x}, @var{n})
-## Convert audio data from mu-law to linear.  Mu-law values are 8-bit
-## unsigned integers.  Linear values use @var{n}-bit signed integers
-## or floating point values in the range -1@leq{}y@leq{}1 if @var{n}
-## is 0.
+## Convert audio data from mu-law to linear.
+##
+## Mu-law values are 8-bit unsigned integers.  Linear values use @var{n}-bit
+## signed integers or floating point values in the range -1@leq{}y@leq{}1 if
+## @var{n} is 0.
 ##
 ## If @var{n} is not specified it defaults to 0.
 ## @seealso{lin2mu}
 ## @end deftypefn
 
 ## Author:  Andreas Weingessel <Andreas.Weingessel@ci.tuwien.ac.at>
 ## Created: 18 October 1994
 ## Adapted-By: jwe
diff --git a/scripts/audio/record.m b/scripts/audio/record.m
--- a/scripts/audio/record.m
+++ b/scripts/audio/record.m
@@ -16,20 +16,23 @@
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {} record (@var{sec})
 ## @deftypefnx {Function File} {} record (@var{sec}, @var{fs})
 ## Record @var{sec} seconds of audio from the system's default audio input at
-## a sampling rate of 8000 samples per second.  If the optional argument
-## @var{fs} is given, it specifies the sampling rate for recording.
+## a sampling rate of 8000 samples per second.
+##
+## If the optional argument @var{fs} is given, it specifies the sampling rate
+## for recording.
 ##
 ## For more control over audio recording, use the @code{audiorecorder} class.
+## @seealso{sound, soundsc}
 ## @end deftypefn
 
 function x = record (sec, fs)
 
   if (nargin == 1)
     fs = 8000;
   elseif (nargin != 2)
     print_usage ();
diff --git a/scripts/audio/sound.m b/scripts/audio/sound.m
--- a/scripts/audio/sound.m
+++ b/scripts/audio/sound.m
@@ -16,25 +16,29 @@
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {} sound (@var{y})
 ## @deftypefnx {Function File} {} sound (@var{y}, @var{fs})
 ## @deftypefnx {Function File} {} sound (@var{y}, @var{fs}, @var{nbits})
 ## Play audio data @var{y} at sample rate @var{fs} to the default audio
-## device.  If @var{fs} is not given, a default sample rate of 8000 samples
-## per second is used.  The optional argument @var{nbits} specifies the bit
-## depth to play to the audio device and defaults to 8 bits.
+## device.
 ##
 ## The audio signal @var{y} can be a vector or a two-column array, representing
 ## mono or stereo audio, respectively.
 ##
+## If @var{fs} is not given, a default sample rate of 8000 samples per second
+## is used.
+##
+## The optional argument @var{nbits} specifies the bit depth to play to the
+## audio device and defaults to 8 bits.
+##
 ## For more control over audio playback, use the @code{audioplayer} class.
-## @seealso{record, soundsc}
+## @seealso{soundsc, record}
 ## @end deftypefn
 
 function sound (y, fs, nbits)
 
   if (nargin < 1 || nargin > 3)
     print_usage ();
   endif
 
diff --git a/scripts/audio/soundsc.m b/scripts/audio/soundsc.m
--- a/scripts/audio/soundsc.m
+++ b/scripts/audio/soundsc.m
@@ -17,30 +17,34 @@
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {} soundsc (@var{y})
 ## @deftypefnx {Function File} {} soundsc (@var{y}, @var{fs})
 ## @deftypefnx {Function File} {} soundsc (@var{y}, @var{fs}, @var{nbits})
 ## @deftypefnx {Function File} {} soundsc (@dots{}, [@var{ymin}, @var{ymax}])
 ## Scale the audio data @var{y} and play it at sample rate @var{fs} to the
-## default audio device.  If @var{fs} is not given, a default sample rate of
-## 8000 samples per second is used.  The optional argument @var{nbits} specifies
-## the bit depth to play to the audio device and defaults to 8 bits.
+## default audio device.
+##
+## The audio signal @var{y} can be a vector or a two-column array, representing
+## mono or stereo audio, respectively.
+##
+## If @var{fs} is not given, a default sample rate of 8000 samples per second
+## is used.
+##
+## The optional argument @var{nbits} specifies the bit depth to play to the
+## audio device and defaults to 8 bits.
 ##
 ## By default, @var{y} is automatically normalized to the range [-1, 1].  If the
 ## range [@var{ymin}, @var{ymax}] is given, then elements of @var{y} that fall
 ## within the range @var{ymin} @leq{} @var{y} @leq{} @var{ymax} are scaled to
 ## the range [-1, 1] instead.
 ##
-## The audio signal @var{y} can be a vector or a two-column array, representing
-## mono or stereo audio, respectively.
-##
 ## For more control over audio playback, use the @code{audioplayer} class.
-## @seealso{record, sound}
+## @seealso{sound, record}
 ## @end deftypefn
 
 function soundsc (y, fs, nbits, yrange)
 
   if (nargin < 1 || nargin > 4)
     print_usage ();
   endif
 
diff --git a/scripts/audio/wavread.m b/scripts/audio/wavread.m
--- a/scripts/audio/wavread.m
+++ b/scripts/audio/wavread.m
@@ -19,34 +19,37 @@
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {@var{y} =} wavread (@var{filename})
 ## @deftypefnx {Function File} {[@var{y}, @var{fs}, @var{nbits}] =} wavread (@var{filename})
 ## @deftypefnx {Function File} {[@dots{}] =} wavread (@var{filename}, @var{n})
 ## @deftypefnx {Function File} {[@dots{}] =} wavread (@var{filename}, [@var{n1} @var{n2}])
 ## @deftypefnx {Function File} {[@dots{}] =} wavread (@dots{}, @var{datatype})
 ## @deftypefnx {Function File} {@var{sz} =} wavread (@var{filename}, "size")
+## @deftypefnx {Function File} {[@var{n_samp}, @var{n_chan}] =} wavread (@var{filename}, "size")
 ## Read the audio signal @var{y} from the RIFF/WAVE sound file @var{filename}.
+##
 ## If the file contains multichannel data, then @var{y} is a matrix with the
 ## channels represented as columns.
 ##
-## The optional return value @var{fs} is the sample rate of the audio file in
-## Hz.  The optional return value @var{nbits} is the number of bits per sample
-## as encoded in the file.
-##
 ## If @var{n} is specified, only the first @var{n} samples of the file are
 ## returned.  If [@var{n1} @var{n2}] is specified, only the range of samples
 ## from @var{n1} to @var{n2} is returned.  A value of @code{Inf} can be used
 ## to represent the total number of samples in the file.
 ##
 ## If the option @qcode{"size"} is given, then the size of the audio signal
 ## is returned instead of the data.  The size is returned in a row vector of
 ## the form [@var{samples} @var{channels}].  If there are two output arguments,
 ## the number of samples is assigned to the first and the number of channels
 ## is assigned to the second.
+##
+## The optional return value @var{fs} is the sample rate of the audio file in
+## Hz.  The optional return value @var{nbits} is the number of bits per sample
+## as encoded in the file.
+##
 ## @seealso{audioread, audiowrite, wavwrite}
 ## @end deftypefn
 
 function [y, fs, nbits] = wavread (filename, varargin)
 
   if (nargin < 1 || nargin > 3)
     print_usage ();
   endif
diff --git a/scripts/audio/wavwrite.m b/scripts/audio/wavwrite.m
--- a/scripts/audio/wavwrite.m
+++ b/scripts/audio/wavwrite.m
@@ -17,24 +17,29 @@
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {} wavwrite (@var{y}, @var{filename})
 ## @deftypefnx {Function File} {} wavwrite (@var{y}, @var{fs}, @var{filename})
 ## @deftypefnx {Function File} {} wavwrite (@var{y}, @var{fs}, @var{nbits}, @var{filename})
 ## Write the audio signal @var{y} to the RIFF/WAVE sound file @var{filename}.
+##
 ## If @var{y} is a matrix, the columns represent multiple audio channels.
 ##
 ## The optional argument @var{fs} specifies the sample rate of the audio signal
-## in Hz.  The optional argument @var{nbits} specifies the number of bits per
-## sample to write to @var{filename}.  The default sample rate is 8000 Hz and
-## the default bit depth is 16 bits per sample.
+## in Hz.
+## 
+## The optional argument @var{nbits} specifies the number of bits per sample
+## to write to @var{filename}.
 ##
-## @seealso{audioread, audiowrite, wavread}
+## The default sample rate is 8000 Hz and the default bit depth is 16 bits
+## per sample.
+##
+## @seealso{audiowrite, audioread, wavread}
 ## @end deftypefn
 
 function wavwrite (y, varargin)
 
   if (nargin < 2 || nargin > 4)
     print_usage ();
   endif
 
diff --git a/scripts/image/gmap40.m b/scripts/deprecated/gmap40.m
rename from scripts/image/gmap40.m
rename to scripts/deprecated/gmap40.m
--- a/scripts/image/gmap40.m
+++ b/scripts/deprecated/gmap40.m
@@ -14,30 +14,45 @@
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {@var{map} =} gmap40 ()
 ## @deftypefnx {Function File} {@var{map} =} gmap40 (@var{n})
+##
+## @code{gmap40} is deprecated and will be removed in Octave version 4.4.
+##
 ## Create color colormap.  The colormap consists of red, green, blue, yellow,
-## magenta and cyan.  This colormap is specifically designed for users of
-## gnuplot 4.0 where these 6 colors are the allowable ones for patch objects.
+## magenta and cyan.
+##
+## This colormap is specifically designed for users of gnuplot 4.0 where these
+## 6 colors are the allowable ones for patch objects.
+##
 ## The argument @var{n} must be a scalar.
 ## If unspecified, a length of 6 is assumed.  Larger values of @var{n} result
 ## in a repetition of the above colors.
 ## @seealso{colormap}
 ## @end deftypefn
 
 ## PKG_ADD: colormap ("register", "gmap40");
 ## PKG_DEL: colormap ("unregister", "gmap40");
 
+## Deprecated in 4.0
+
 function map = gmap40 (n = rows (colormap ()))
 
+  persistent warned = false;
+  if (! warned)
+    warned = true;
+    warning ("Octave:deprecated-function",
+             "gmap40 is obsolete and will be removed from a future version of Octave");
+  endif
+
   if (nargin > 1)
     print_usage ();
   elseif (! isscalar (n))
     error ("gmap40: N must be a scalar");
   endif
 
   if (n > 0)
     C = [1, 0, 0; 0, 1, 0; 0, 0, 1; 1, 1, 0; 1, 0, 1; 0, 1, 1];
diff --git a/scripts/deprecated/module.mk b/scripts/deprecated/module.mk
--- a/scripts/deprecated/module.mk
+++ b/scripts/deprecated/module.mk
@@ -5,16 +5,17 @@ deprecated_FCN_FILES = \
   deprecated/default_save_options.m \
   deprecated/delaunay3.m \
   deprecated/dump_prefs.m \
   deprecated/find_dir_in_path.m \
   deprecated/finite.m \
   deprecated/fmod.m \
   deprecated/fnmatch.m \
   deprecated/gen_doc_cache.m \
+  deprecated/gmap40.m \
   deprecated/interp1q.m \
   deprecated/isequalwithequalnans.m \
   deprecated/isstr.m \
   deprecated/java_convert_matrix.m \
   deprecated/java_debug.m \
   deprecated/java_invoke.m \
   deprecated/java_new.m \
   deprecated/java_unsigned_conversion.m \
diff --git a/scripts/elfun/cosd.m b/scripts/elfun/cosd.m
--- a/scripts/elfun/cosd.m
+++ b/scripts/elfun/cosd.m
@@ -13,18 +13,19 @@
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} cosd (@var{x})
-## Compute the cosine for each element of @var{x} in degrees.  Returns zero
-## for elements where @code{(@var{x}-90)/180} is an integer.
+## Compute the cosine for each element of @var{x} in degrees.
+##
+## Returns zero for elements where @code{(@var{x}-90)/180} is an integer.
 ## @seealso{acosd, cos}
 ## @end deftypefn
 
 ## Author: David Bateman <dbateman@free.fr>
 
 function y = cosd (x)
 
   if (nargin != 1)
diff --git a/scripts/elfun/sind.m b/scripts/elfun/sind.m
--- a/scripts/elfun/sind.m
+++ b/scripts/elfun/sind.m
@@ -13,18 +13,19 @@
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} sind (@var{x})
-## Compute the sine for each element of @var{x} in degrees.  Returns zero
-## for elements where @code{@var{x}/180} is an integer.
+## Compute the sine for each element of @var{x} in degrees.
+##
+## Returns zero for elements where @code{@var{x}/180} is an integer.
 ## @seealso{asind, sin}
 ## @end deftypefn
 
 ## Author: David Bateman <dbateman@free.fr>
 
 function y = sind (x)
 
   if (nargin != 1)
diff --git a/scripts/elfun/tand.m b/scripts/elfun/tand.m
--- a/scripts/elfun/tand.m
+++ b/scripts/elfun/tand.m
@@ -13,19 +13,20 @@
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} tand (@var{x})
-## Compute the tangent for each element of @var{x} in degrees.  Returns zero
-## for elements where @code{@var{x}/180} is an integer and @code{Inf} for
-## elements where @code{(@var{x}-90)/180} is an integer.
+## Compute the tangent for each element of @var{x} in degrees.
+##
+## Returns zero for elements where @code{@var{x}/180} is an integer and
+## @code{Inf} for elements where @code{(@var{x}-90)/180} is an integer.
 ## @seealso{atand, tan}
 ## @end deftypefn
 
 ## Author: David Bateman <dbateman@free.fr>
 
 function y = tand (x)
 
   if (nargin != 1)
diff --git a/scripts/general/accumarray.m b/scripts/general/accumarray.m
--- a/scripts/general/accumarray.m
+++ b/scripts/general/accumarray.m
@@ -17,22 +17,23 @@
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {} accumarray (@var{subs}, @var{vals}, @var{sz}, @var{func}, @var{fillval}, @var{issparse})
 ## @deftypefnx {Function File} {} accumarray (@var{subs}, @var{vals}, @dots{})
 ##
 ## Create an array by accumulating the elements of a vector into the
-## positions defined by their subscripts.  The subscripts are defined by
-## the rows of the matrix @var{subs} and the values by @var{vals}.  Each
-## row of @var{subs} corresponds to one of the values in @var{vals}.  If
-## @var{vals} is a scalar, it will be used for each of the row of
-## @var{subs}.  If @var{subs} is a cell array of vectors, all vectors
-## must be of the same length, and the subscripts in the @var{k}th
+## positions defined by their subscripts.
+##
+## The subscripts are defined by the rows of the matrix @var{subs} and the
+## values by @var{vals}.  Each row of @var{subs} corresponds to one of the
+## values in @var{vals}.  If @var{vals} is a scalar, it will be used for each
+## of the row of @var{subs}.  If @var{subs} is a cell array of vectors, all
+## vectors must be of the same length, and the subscripts in the @var{k}th
 ## vector must correspond to the @var{k}th dimension of the result.
 ##
 ## The size of the matrix will be determined by the subscripts
 ## themselves.  However, if @var{sz} is defined it determines the matrix
 ## size.  The length of @var{sz} must correspond to the number of columns
 ## in @var{subs}.  An exception is if @var{subs} has only one column, in
 ## which case @var{sz} may be the dimensions of a vector and the
 ## subscripts of @var{subs} are taken as the indices into it.
diff --git a/scripts/general/accumdim.m b/scripts/general/accumdim.m
--- a/scripts/general/accumdim.m
+++ b/scripts/general/accumdim.m
@@ -15,16 +15,17 @@
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} accumdim (@var{subs}, @var{vals}, @var{dim}, @var{n}, @var{func}, @var{fillval})
 ## Create an array by accumulating the slices of an array into the
 ## positions defined by their subscripts along a specified dimension.
+##
 ## The subscripts are defined by the index vector @var{subs}.
 ## The dimension is specified by @var{dim}.  If not given, it defaults
 ## to the first non-singleton dimension.  The length of @var{subs} must
 ## be equal to @code{size (@var{vals}, @var{dim})}.
 ##
 ## The extent of the result matrix in the working dimension will be
 ## determined by the subscripts themselves.  However, if @var{n} is
 ## defined it determines this extent.
diff --git a/scripts/general/bitcmp.m b/scripts/general/bitcmp.m
--- a/scripts/general/bitcmp.m
+++ b/scripts/general/bitcmp.m
@@ -13,18 +13,19 @@
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} bitcmp (@var{A}, @var{k})
-## Return the @var{k}-bit complement of integers in @var{A}.  If
-## @var{k} is omitted @code{k = log2 (bitmax) + 1} is assumed.
+## Return the @var{k}-bit complement of integers in @var{A}.
+##
+## If @var{k} is omitted @code{k = log2 (bitmax) + 1} is assumed.
 ##
 ## @example
 ## @group
 ## bitcmp (7,4)
 ##   @result{} 8
 ## dec2bin (11)
 ##   @result{} 1011
 ## dec2bin (bitcmp (11, 6))
diff --git a/scripts/general/bitget.m b/scripts/general/bitget.m
--- a/scripts/general/bitget.m
+++ b/scripts/general/bitget.m
@@ -13,18 +13,19 @@
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {@var{c} =} bitget (@var{A}, @var{n})
-## Return the status of bit(s) @var{n} of unsigned integers in @var{A}
-## the lowest significant bit is @var{n} = 1.
+## Return the status of bit(s) @var{n} of the unsigned integers in @var{A}.
+##
+## The least significant bit is @var{n} = 1.
 ##
 ## @example
 ## @group
 ## bitget (100, 8:-1:1)
 ## @result{} 0  1  1  0  0  1  0  0
 ## @end group
 ## @end example
 ## @seealso{bitand, bitor, bitxor, bitset, bitcmp, bitshift, bitmax}
diff --git a/scripts/general/bitset.m b/scripts/general/bitset.m
--- a/scripts/general/bitset.m
+++ b/scripts/general/bitset.m
@@ -15,20 +15,21 @@
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {@var{C} =} bitset (@var{A}, @var{n})
 ## @deftypefnx {Function File} {@var{C} =} bitset (@var{A}, @var{n}, @var{val})
-## Set or reset bit(s) @var{n} of unsigned integers in @var{A}.
+## Set or reset bit(s) @var{n} of the unsigned integers in @var{A}.
+##
 ## @var{val} = 0 resets and @var{val} = 1 sets the bits.
-## The lowest significant bit is: @var{n} = 1.  All variables must be the
-## same size or scalars.
+## The least significant bit is @var{n} = 1.  All variables must be the same
+## size or scalars.
 ##
 ## @example
 ## @group
 ## dec2bin (bitset (10, 1))
 ##   @result{} 1011
 ## @end group
 ## @end example
 ## @seealso{bitand, bitor, bitxor, bitget, bitcmp, bitshift, bitmax}
diff --git a/scripts/general/blkdiag.m b/scripts/general/blkdiag.m
--- a/scripts/general/blkdiag.m
+++ b/scripts/general/blkdiag.m
@@ -14,19 +14,19 @@
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} blkdiag (@var{A}, @var{B}, @var{C}, @dots{})
 ## Build a block diagonal matrix from @var{A}, @var{B}, @var{C}, @dots{}
-## All the arguments must be numeric and are two-dimensional matrices or
-## scalars.  If any argument is of type sparse, the output will also be
-## sparse.
+##
+## All arguments must be numeric and either two-dimensional matrices or
+## scalars.  If any argument is of type sparse, the output will also be sparse.
 ## @seealso{diag, horzcat, vertcat, sparse}
 ## @end deftypefn
 
 ## Author: Daniel Calvelo
 ## Modified by: William Poetra Yoga Hadisoeseno
 
 function retval = blkdiag (varargin)
 
diff --git a/scripts/general/cart2pol.m b/scripts/general/cart2pol.m
--- a/scripts/general/cart2pol.m
+++ b/scripts/general/cart2pol.m
@@ -18,26 +18,28 @@
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {[@var{theta}, @var{r}] =} cart2pol (@var{x}, @var{y})
 ## @deftypefnx {Function File} {[@var{theta}, @var{r}, @var{z}] =} cart2pol (@var{x}, @var{y}, @var{z})
 ## @deftypefnx {Function File} {[@var{theta}, @var{r}] =} cart2pol (@var{C})
 ## @deftypefnx {Function File} {[@var{theta}, @var{r}, @var{z}] =} cart2pol (@var{C})
 ## @deftypefnx {Function File} {@var{P} =} cart2pol (@dots{})
 ##
-## Transform Cartesian to polar or cylindrical coordinates.
+## Transform Cartesian coordinates to polar or cylindrical coordinates.
+##
+## The inputs @var{x}, @var{y} (, and @var{z}) must be the same shape, or
+## scalar.  If called with a single matrix argument then each row of @var{C}
+## represents the Cartesian coordinate (@var{x}, @var{y} (, @var{z})).
 ##
 ## @var{theta} describes the angle relative to the positive x-axis.
+##
 ## @var{r} is the distance to the z-axis @w{(0, 0, z)}.
-## @var{x}, @var{y} (, and @var{z}) must be the same shape, or scalar.
-## If called with a single matrix argument then each row of @var{C}
-## represents the Cartesian coordinate (@var{x}, @var{y} (, @var{z})).
 ##
-## If only a single return argument is requested then return a matrix
-## @var{P} where each row represents one polar/(cylindrical) coordinate
+## If only a single return argument is requested then return a matrix @var{P}
+## where each row represents one polar/(cylindrical) coordinate
 ## (@var{theta}, @var{phi} (, @var{z})).
 ## @seealso{pol2cart, cart2sph, sph2cart}
 ## @end deftypefn
 
 ## Author: Kai Habel <kai.habel@gmx.de>
 ## Adapted-by: jwe
 
 function [theta, r, z] = cart2pol (x, y, z = [])
diff --git a/scripts/general/cart2sph.m b/scripts/general/cart2sph.m
--- a/scripts/general/cart2sph.m
+++ b/scripts/general/cart2sph.m
@@ -15,27 +15,30 @@
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {[@var{theta}, @var{phi}, @var{r}] =} cart2sph (@var{x}, @var{y}, @var{z})
 ## @deftypefnx {Function File} {[@var{theta}, @var{phi}, @var{r}] =} cart2sph (@var{C})
 ## @deftypefnx {Function File} {@var{S} =} cart2sph (@dots{})
-## Transform Cartesian to spherical coordinates.
+## Transform Cartesian coordinates to spherical coordinates.
 ##
+## The inputs @var{x}, @var{y}, and @var{z} must be the same shape, or scalar.
+## If called with a single matrix argument then each row of @var{C} represents
+## the Cartesian coordinate (@var{x}, @var{y}, @var{z}).
+## 
 ## @var{theta} describes the angle relative to the positive x-axis.
+##
 ## @var{phi} is the angle relative to the xy-plane.
+##
 ## @var{r} is the distance to the origin @w{(0, 0, 0)}.
-## @var{x}, @var{y}, and @var{z} must be the same shape, or scalar.
-## If called with a single matrix argument then each row of @var{C}
-## represents the Cartesian coordinate (@var{x}, @var{y}, @var{z}).
 ##
-## If only a single return argument is requested then return a matrix
-## @var{S} where each row represents one spherical coordinate
+## If only a single return argument is requested then return a matrix @var{S}
+## where each row represents one spherical coordinate
 ## (@var{theta}, @var{phi}, @var{r}).
 ## @seealso{sph2cart, cart2pol, pol2cart}
 ## @end deftypefn
 
 ## Author: Kai Habel <kai.habel@gmx.de>
 ## Adapted-by: jwe
 
 function [theta, phi, r] = cart2sph (x, y, z)
diff --git a/scripts/general/cell2mat.m b/scripts/general/cell2mat.m
--- a/scripts/general/cell2mat.m
+++ b/scripts/general/cell2mat.m
@@ -15,19 +15,20 @@
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {@var{m} =} cell2mat (@var{c})
 ## Convert the cell array @var{c} into a matrix by concatenating all
-## elements of @var{c} into a hyperrectangle.  Elements of @var{c} must
-## be numeric, logical, or char matrices; or cell arrays; or structs; and
-## @code{cat} must be able to concatenate them together.
+## elements of @var{c} into a hyperrectangle.
+##
+## Elements of @var{c} must be numeric, logical, or char matrices; or cell
+## arrays; or structs; and @code{cat} must be able to concatenate them together.
 ## @seealso{mat2cell, num2cell}
 ## @end deftypefn
 
 function m = cell2mat (c)
 
   if (nargin != 1)
     print_usage ();
   endif
diff --git a/scripts/general/celldisp.m b/scripts/general/celldisp.m
--- a/scripts/general/celldisp.m
+++ b/scripts/general/celldisp.m
@@ -14,19 +14,21 @@
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {} celldisp (@var{c})
 ## @deftypefnx {Function File} {} celldisp (@var{c}, @var{name})
-## Recursively display the contents of a cell array.  By default the values
-## are displayed with the name of the variable @var{c}.  However, this name
-## can be replaced with the variable @var{name}.  For example:
+## Recursively display the contents of a cell array.
+##
+## By default the values are displayed with the name of the variable @var{c}.
+## However, this name can be replaced with the variable @var{name}.  For
+## example:
 ##
 ## @example
 ## @group
 ## c = @{1, 2, @{31, 32@}@};
 ## celldisp (c, "b")
 ##    @result{}
 ##       b@{1@} =
 ##        1
diff --git a/scripts/general/chop.m b/scripts/general/chop.m
--- a/scripts/general/chop.m
+++ b/scripts/general/chop.m
@@ -14,18 +14,19 @@
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} chop (@var{x}, @var{ndigits}, @var{base})
 ## Truncate elements of @var{x} to a length of @var{ndigits} such that the
-## resulting numbers are exactly divisible by @var{base}.  If @var{base} is not
-## specified it defaults to 10.
+## resulting numbers are exactly divisible by @var{base}.
+##
+## If @var{base} is not specified it defaults to 10.
 ##
 ## @example
 ## @group
 ## chop (-pi, 5, 10)
 ##    @result{} -3.14200000000000
 ## chop (-pi, 5, 5)
 ##    @result{} -3.14150000000000
 ## @end group
diff --git a/scripts/general/circshift.m b/scripts/general/circshift.m
--- a/scripts/general/circshift.m
+++ b/scripts/general/circshift.m
@@ -13,21 +13,22 @@
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {@var{y} =} circshift (@var{x}, @var{n})
-## Circularly shift the values of the array @var{x}.  @var{n} must be
-## a vector of integers no longer than the number of dimensions in
-## @var{x}.  The values of @var{n} can be either positive or negative,
-## which determines the direction in which the values or @var{x} are
-## shifted.  If an element of @var{n} is zero, then the corresponding
+## Circularly shift the values of the array @var{x}.
+##
+## @var{n} must be a vector of integers no longer than the number of
+## dimensions in @var{x}.  The values of @var{n} can be either positive or
+## negative, which determines the direction in which the values or @var{x}
+## are shifted.  If an element of @var{n} is zero, then the corresponding
 ## dimension of @var{x} will not be shifted.  For example:
 ##
 ## @example
 ## @group
 ## x = [1, 2, 3; 4, 5, 6; 7, 8, 9];
 ## circshift (x, 1)
 ## @result{}  7, 8, 9
 ##     1, 2, 3
diff --git a/scripts/general/common_size.m b/scripts/general/common_size.m
--- a/scripts/general/common_size.m
+++ b/scripts/general/common_size.m
@@ -15,34 +15,35 @@
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {[@var{err}, @var{y1}, @dots{}] =} common_size (@var{x1}, @dots{})
-## Determine if all input arguments are either scalar or of common
-## size.  If so, @var{err} is zero, and @var{yi} is a matrix of the
-## common size with all entries equal to @var{xi} if this is a scalar or
-## @var{xi} otherwise.  If the inputs cannot be brought to a common size,
-## @var{err} is 1, and @var{yi} is @var{xi}.  For example:
+## Determine if all input arguments are either scalar or of common size.
+##
+## If true, @var{err} is zero, and @var{yi} is a matrix of the common size
+## with all entries equal to @var{xi} if this is a scalar or @var{xi}
+## otherwise.  If the inputs cannot be brought to a common size, @var{err} is
+## 1, and @var{yi} is @var{xi}.  For example:
 ##
 ## @example
 ## @group
 ## [errorcode, a, b] = common_size ([1 2; 3 4], 5)
 ##      @result{} errorcode = 0
 ##      @result{} a = [ 1, 2; 3, 4 ]
 ##      @result{} b = [ 5, 5; 5, 5 ]
 ## @end group
 ## @end example
 ##
 ## @noindent
-## This is useful for implementing functions where arguments can either
-## be scalars or of common size.
+## This is useful for implementing functions where arguments can either be
+## scalars or of common size.
 ## @end deftypefn
 
 ## Author: KH <Kurt.Hornik@wu-wien.ac.at>
 ## Created: 15 October 1994
 ## Adapted-By: jwe
 ## Optimized-By: Jaroslav Hajek
 
 function [errorcode, varargout] = common_size (varargin)
diff --git a/scripts/general/cplxpair.m b/scripts/general/cplxpair.m
--- a/scripts/general/cplxpair.m
+++ b/scripts/general/cplxpair.m
@@ -16,31 +16,33 @@
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {} cplxpair (@var{z})
 ## @deftypefnx {Function File} {} cplxpair (@var{z}, @var{tol})
 ## @deftypefnx {Function File} {} cplxpair (@var{z}, @var{tol}, @var{dim})
 ## Sort the numbers @var{z} into complex conjugate pairs ordered by
-## increasing real part.  Place the negative imaginary complex number
-## first within each pair.  Place all the real numbers (those with
-## @code{abs (imag (@var{z}) / @var{z}) < @var{tol}}) after the
+## increasing real part.
+##
+## The negative imaginary complex numbers are placed first within each pair.
+## All real numbers (those with
+## @code{abs (imag (@var{z}) / @var{z}) < @var{tol}}) are placed after the
 ## complex pairs.
 ##
 ## If @var{tol} is unspecified the default value is 100*@code{eps}.
 ##
 ## By default the complex pairs are sorted along the first non-singleton
-## dimension of @var{z}.  If @var{dim} is specified, then the complex
-## pairs are sorted along this dimension.
+## dimension of @var{z}.  If @var{dim} is specified, then the complex pairs are
+## sorted along this dimension.
 ##
 ## Signal an error if some complex numbers could not be paired.  Signal an
-## error if all complex numbers are not exact conjugates (to within
-## @var{tol}).  Note that there is no defined order for pairs with identical
-## real parts but differing imaginary parts.
+## error if all complex numbers are not exact conjugates (to within @var{tol}).
+## Note that there is no defined order for pairs with identical real parts but
+## differing imaginary parts.
 ## @c Set example in small font to prevent overfull line
 ##
 ## @smallexample
 ## cplxpair (exp(2i*pi*[0:4]'/5)) == exp(2i*pi*[3; 2; 4; 1; 0]/5)
 ## @end smallexample
 ## @end deftypefn
 
 ## FIXME: subsort returned pairs by imaginary magnitude
diff --git a/scripts/general/cumtrapz.m b/scripts/general/cumtrapz.m
--- a/scripts/general/cumtrapz.m
+++ b/scripts/general/cumtrapz.m
@@ -15,32 +15,34 @@
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {@var{q} =} cumtrapz (@var{y})
 ## @deftypefnx {Function File} {@var{q} =} cumtrapz (@var{x}, @var{y})
 ## @deftypefnx {Function File} {@var{q} =} cumtrapz (@dots{}, @var{dim})
-##
 ## Cumulative numerical integration of points @var{y} using the trapezoidal
 ## method.
+##
 ## @w{@code{cumtrapz (@var{y})}} computes the cumulative integral of @var{y}
-## along the first non-singleton dimension.  Where @code{trapz} reports
-## only the overall integral sum, @code{cumtrapz} reports the current partial
-## sum value at each point of @var{y}.  When the argument @var{x} is omitted
-## an equally spaced @var{x} vector with unit spacing (1) is assumed.
-## @code{cumtrapz (@var{x}, @var{y})} evaluates the integral with respect to
-## the spacing in @var{x} and the values in @var{y}.  This is useful if the
-## points in @var{y} have been sampled unevenly.  If the optional @var{dim}
-## argument is given, operate along this dimension.
+## along the first non-singleton dimension.  Where @code{trapz} reports only
+## the overall integral sum, @code{cumtrapz} reports the current partial sum
+## value at each point of @var{y}.
 ##
-## If @var{x} is not specified then unit spacing will be used.  To scale
-## the integral to the correct value you must multiply by the actual spacing
-## value (deltaX).
+## When the argument @var{x} is omitted an equally spaced @var{x} vector with
+## unit spacing (1) is assumed.  @code{cumtrapz (@var{x}, @var{y})} evaluates
+## the integral with respect to the spacing in @var{x} and the values in
+## @var{y}.  This is useful if the points in @var{y} have been sampled unevenly.
+##
+## If the optional @var{dim} argument is given, operate along this dimension.
+##
+## Application Note: If @var{x} is not specified then unit spacing will be
+## used.  To scale the integral to the correct value you must multiply by the
+## actual spacing value (deltaX).
 ## @seealso{trapz, cumsum}
 ## @end deftypefn
 
 ## Author:      Kai Habel <kai.habel@gmx.de>
 ##
 ## also: June 2000 Paul Kienzle (fixes,suggestions)
 ## 2006-05-12 David Bateman - Modified for NDArrays
 
diff --git a/scripts/general/dblquad.m b/scripts/general/dblquad.m
--- a/scripts/general/dblquad.m
+++ b/scripts/general/dblquad.m
@@ -17,21 +17,21 @@
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {} dblquad (@var{f}, @var{xa}, @var{xb}, @var{ya}, @var{yb})
 ## @deftypefnx {Function File} {} dblquad (@var{f}, @var{xa}, @var{xb}, @var{ya}, @var{yb}, @var{tol})
 ## @deftypefnx {Function File} {} dblquad (@var{f}, @var{xa}, @var{xb}, @var{ya}, @var{yb}, @var{tol}, @var{quadf})
 ## @deftypefnx {Function File} {} dblquad (@var{f}, @var{xa}, @var{xb}, @var{ya}, @var{yb}, @var{tol}, @var{quadf}, @dots{})
 ## Numerically evaluate the double integral of @var{f}.
-## @var{f} is a function handle, inline function, or string
-## containing the name of the function to evaluate.  The function @var{f} must
-## have the form @math{z = f(x,y)} where @var{x} is a vector and @var{y} is a
-## scalar.  It should return a vector of the same length and orientation as
-## @var{x}.
+##
+## @var{f} is a function handle, inline function, or string containing the name
+## of the function to evaluate.  The function @var{f} must have the form
+## @math{z = f(x,y)} where @var{x} is a vector and @var{y} is a scalar.  It
+## should return a vector of the same length and orientation as @var{x}.
 ##
 ## @var{xa}, @var{ya} and @var{xb}, @var{yb} are the lower and upper limits of
 ## integration for x and y respectively.  The underlying integrator determines
 ## whether infinite bounds are accepted.
 ##
 ## The optional argument @var{tol} defines the absolute tolerance used to
 ## integrate each sub-integral.  The default value is @math{1e^{-6}}.
 ##
diff --git a/scripts/general/deal.m b/scripts/general/deal.m
--- a/scripts/general/deal.m
+++ b/scripts/general/deal.m
@@ -16,17 +16,18 @@
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {[@var{r1}, @var{r2}, @dots{}, @var{rn}] =} deal (@var{a})
 ## @deftypefnx {Function File} {[@var{r1}, @var{r2}, @dots{}, @var{rn}] =} deal (@var{a1}, @var{a2}, @dots{}, @var{an})
 ##
 ## Copy the input parameters into the corresponding output parameters.
-## If only one input parameter is supplied, its value is copied to each
+##
+## If only a single input parameter is supplied, its value is copied to each
 ## of the outputs.
 ##
 ## For example,
 ##
 ## @example
 ## [a, b, c] = deal (x, y, z);
 ## @end example
 ##
diff --git a/scripts/general/del2.m b/scripts/general/del2.m
--- a/scripts/general/del2.m
+++ b/scripts/general/del2.m
@@ -24,16 +24,17 @@
 ##
 ## Calculate the discrete Laplace
 ## @tex
 ## operator $( \nabla^2 )$.
 ## @end tex
 ## @ifnottex
 ## operator.
 ## @end ifnottex
+##
 ## For a 2-dimensional matrix @var{M} this is defined as
 ## @tex
 ## $$d = {1 \over 4} \left( {d^2 \over dx^2} M(x,y) + {d^2 \over dy^2} M(x,y) \right)$$
 ## @end tex
 ## @ifnottex
 ##
 ## @example
 ## @group
diff --git a/scripts/general/display.m b/scripts/general/display.m
--- a/scripts/general/display.m
+++ b/scripts/general/display.m
@@ -13,18 +13,20 @@
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} display (@var{a})
-## Display the contents of an object.  If @var{a} is an object of the
-## class @qcode{"myclass"}, then @code{display} is called in a case like
+## Display the contents of an object.
+##
+## If @var{a} is an object of the class @qcode{"myclass"}, then @code{display}
+## is called in a case like
 ##
 ## @example
 ## myclass (@dots{})
 ## @end example
 ##
 ## @noindent
 ## where Octave is required to display the contents of a variable of the
 ## type @qcode{"myclass"}.
diff --git a/scripts/general/divergence.m b/scripts/general/divergence.m
--- a/scripts/general/divergence.m
+++ b/scripts/general/divergence.m
@@ -18,16 +18,17 @@
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {@var{div} =} divergence (@var{x}, @var{y}, @var{z}, @var{fx}, @var{fy}, @var{fz})
 ## @deftypefnx {Function File} {@var{div} =} divergence (@var{fx}, @var{fy}, @var{fz})
 ## @deftypefnx {Function File} {@var{div} =} divergence (@var{x}, @var{y}, @var{fx}, @var{fy})
 ## @deftypefnx {Function File} {@var{div} =} divergence (@var{fx}, @var{fy})
 ## Calculate divergence of a vector field given by the arrays @var{fx},
 ## @var{fy}, and @var{fz} or @var{fx}, @var{fy} respectively.
+##
 ## @tex
 ## $$
 ## div F(x,y,z) = \partial_x{F} + \partial_y{F} + \partial_z{F}
 ## $$
 ## @end tex
 ## @ifnottex
 ##
 ## @example
diff --git a/scripts/general/fieldnames.m b/scripts/general/fieldnames.m
--- a/scripts/general/fieldnames.m
+++ b/scripts/general/fieldnames.m
@@ -19,18 +19,18 @@
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {@var{names} =} fieldnames (@var{struct})
 ## @deftypefnx {Function File} {@var{names} =} fieldnames (@var{obj})
 ## @deftypefnx {Function File} {@var{names} =} fieldnames (@var{javaobj})
 ## @deftypefnx {Function File} {@var{names} =} fieldnames ("@var{jclassname}")
 ## Return a cell array of strings with the names of the fields in the
 ## specified input.
 ##
-## When the input is a structure @var{struct}, the names are the elements
-## of the structure.
+## When the input is a structure @var{struct}, the names are the elements of
+## the structure.
 ##
 ## When the input is an Octave object @var{obj}, the names are the public
 ## properties of the object.
 ##
 ## When the input is a Java object @var{javaobj} or Java classname
 ## @var{jclassname} the name are the public data elements of the object or
 ## class.
 ## @seealso{numfields, isfield, orderfields, struct, methods}
diff --git a/scripts/general/flip.m b/scripts/general/flip.m
--- a/scripts/general/flip.m
+++ b/scripts/general/flip.m
@@ -15,17 +15,17 @@
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {} flip (@var{x})
 ## @deftypefnx {Function File} {} flip (@var{x}, @var{dim})
-## Flip array across specific dimension.
+## Flip array across dimension @var{dim}.
 ##
 ## Return a copy of @var{x} flipped about the dimension @var{dim}.
 ## @var{dim} defaults to the first non-singleton dimension.
 ## For example:
 ##
 ## @example
 ## @group
 ## flip ([1  2  3  4])
diff --git a/scripts/general/flipdim.m b/scripts/general/flipdim.m
--- a/scripts/general/flipdim.m
+++ b/scripts/general/flipdim.m
@@ -15,21 +15,20 @@
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {} flipdim (@var{x})
 ## @deftypefnx {Function File} {} flipdim (@var{x}, @var{dim})
-## Flip array across specific dimension.
+## Flip array across dimension @var{dim}.
 ##
-## This function is an alias for @code{flip} and exists for backwards
-## and @sc{matlab} compatibility.  See @code{flip} for complete usage
-## information.
+## This function is an alias for @code{flip} and exists for backwards and
+## @sc{matlab} compatibility.  See @code{flip} for complete usage information.
 ##
 ## @seealso{flip, fliplr, flipud, rot90, rotdim}
 ## @end deftypefn
 
 ## Author: David Bateman, Jaroslav Hajek
 
 function y = flipdim (varargin)
   y = flip (varargin{:});
diff --git a/scripts/general/fliplr.m b/scripts/general/fliplr.m
--- a/scripts/general/fliplr.m
+++ b/scripts/general/fliplr.m
@@ -15,19 +15,18 @@
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} fliplr (@var{x})
 ## Flip array left to right.
 ##
-## Return a copy of @var{x} with the order of the columns reversed.  In
-## other words, @var{x} is flipped left-to-right about a vertical axis.  For
-## example:
+## Return a copy of @var{x} with the order of the columns reversed.  In other
+## words, @var{x} is flipped left-to-right about a vertical axis.  For example:
 ##
 ## @example
 ## @group
 ## fliplr ([1, 2; 3, 4])
 ##      @result{}  2  1
 ##          4  3
 ## @end group
 ## @end example
diff --git a/scripts/general/flipud.m b/scripts/general/flipud.m
--- a/scripts/general/flipud.m
+++ b/scripts/general/flipud.m
@@ -15,19 +15,18 @@
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} flipud (@var{x})
 ## Flip array upside down.
 ##
-## Return a copy of @var{x} with the order of the rows reversed.  In
-## other words, @var{x} is flipped upside-down about a horizontal axis.  For
-## example:
+## Return a copy of @var{x} with the order of the rows reversed.  In other
+## words, @var{x} is flipped upside-down about a horizontal axis.  For example:
 ##
 ## @example
 ## @group
 ## flipud ([1, 2; 3, 4])
 ##      @result{}  3  4
 ##          1  2
 ## @end group
 ## @end example
diff --git a/scripts/general/gradient.m b/scripts/general/gradient.m
--- a/scripts/general/gradient.m
+++ b/scripts/general/gradient.m
@@ -20,49 +20,48 @@
 ## @deftypefn  {Function File} {@var{dx} =} gradient (@var{m})
 ## @deftypefnx {Function File} {[@var{dx}, @var{dy}, @var{dz}, @dots{}] =} gradient (@var{m})
 ## @deftypefnx {Function File} {[@dots{}] =} gradient (@var{m}, @var{s})
 ## @deftypefnx {Function File} {[@dots{}] =} gradient (@var{m}, @var{x}, @var{y}, @var{z}, @dots{})
 ## @deftypefnx {Function File} {[@dots{}] =} gradient (@var{f}, @var{x0})
 ## @deftypefnx {Function File} {[@dots{}] =} gradient (@var{f}, @var{x0}, @var{s})
 ## @deftypefnx {Function File} {[@dots{}] =} gradient (@var{f}, @var{x0}, @var{x}, @var{y}, @dots{})
 ##
-## Calculate the gradient of sampled data or a function.  If @var{m}
-## is a vector, calculate the one-dimensional gradient of @var{m}.  If
-## @var{m} is a matrix the gradient is calculated for each dimension.
+## Calculate the gradient of sampled data or a function.
 ##
-## @code{[@var{dx}, @var{dy}] = gradient (@var{m})} calculates the one
-## dimensional gradient for @var{x} and @var{y} direction if @var{m} is a
+## If @var{m} is a vector, calculate the one-dimensional gradient of @var{m}.
+## If @var{m} is a matrix the gradient is calculated for each dimension.
+##
+## @code{[@var{dx}, @var{dy}] = gradient (@var{m})} calculates the
+## one-dimensional gradient for @var{x} and @var{y} direction if @var{m} is a
 ## matrix.  Additional return arguments can be use for multi-dimensional
 ## matrices.
 ##
-## A constant spacing between two points can be provided by the
-## @var{s} parameter.  If @var{s} is a scalar, it is assumed to be the spacing
-## for all dimensions.
-## Otherwise, separate values of the spacing can be supplied by
+## A constant spacing between two points can be provided by the @var{s}
+## parameter.  If @var{s} is a scalar, it is assumed to be the spacing for all
+## dimensions.  Otherwise, separate values of the spacing can be supplied by
 ## the @var{x}, @dots{} arguments.  Scalar values specify an equidistant
-## spacing.
-## Vector values for the @var{x}, @dots{} arguments specify the coordinate for
-## that
-## dimension.  The length must match their respective dimension of @var{m}.
+## spacing.  Vector values for the @var{x}, @dots{} arguments specify the
+## coordinate for that dimension.  The length must match their respective
+## dimension of @var{m}.
 ##
 ## At boundary points a linear extrapolation is applied.  Interior points
 ## are calculated with the first approximation of the numerical gradient
 ##
 ## @example
 ## y'(i) = 1/(x(i+1)-x(i-1)) * (y(i-1)-y(i+1)).
 ## @end example
 ##
 ## If the first argument @var{f} is a function handle, the gradient of the
-## function at the points in @var{x0} is approximated using central
-## difference.  For example, @code{gradient (@@cos, 0)} approximates the
-## gradient of the cosine function in the point @math{x0 = 0}.  As with
-## sampled data, the spacing values between the points from which the
-## gradient is estimated can be set via the @var{s} or @var{dx},
-## @var{dy}, @dots{} arguments.  By default a spacing of 1 is used.
+## function at the points in @var{x0} is approximated using central difference.
+## For example, @code{gradient (@@cos, 0)} approximates the gradient of the
+## cosine function in the point @math{x0 = 0}.  As with sampled data, the
+## spacing values between the points from which the gradient is estimated can
+## be set via the @var{s} or @var{dx}, @var{dy}, @dots{} arguments.  By default
+## a spacing of 1 is used.
 ## @seealso{diff, del2}
 ## @end deftypefn
 
 ## Author:  Kai Habel <kai.habel@gmx.de>
 ## Modified: David Bateman <dbateman@free.fr> Added NDArray support
 
 function varargout = gradient (m, varargin)
 
diff --git a/scripts/general/interp3.m b/scripts/general/interp3.m
--- a/scripts/general/interp3.m
+++ b/scripts/general/interp3.m
@@ -24,22 +24,21 @@
 ## @deftypefnx {Function File} {@var{vi} =} interp3 (@dots{}, @var{method})
 ## @deftypefnx {Function File} {@var{vi} =} interp3 (@dots{}, @var{method}, @var{extrapval})
 ##
 ## Three-dimensional interpolation.
 ##
 ## Interpolate reference data @var{x}, @var{y}, @var{z}, @var{v} to determine
 ## @var{vi} at the coordinates @var{xi}, @var{yi}, @var{zi}.  The reference
 ## data @var{x}, @var{y}, @var{z} can be matrices, as returned by
-## @code{meshgrid}, in which case the sizes of
-## @var{x}, @var{y}, @var{z}, and @var{v} must be equal.  If @var{x}, @var{y},
-## @var{z} are vectors describing a cubic grid then
-## @code{length (@var{x}) == columns (@var{v})},
-## @code{length (@var{y}) == rows (@var{v})},
-## and @code{length (@var{z}) == size (@var{v}, 3)}.  In either case the input
+## @code{meshgrid}, in which case the sizes of @var{x}, @var{y}, @var{z}, and
+## @var{v} must be equal.  If @var{x}, @var{y}, @var{z} are vectors describing
+## a cubic grid then @code{length (@var{x}) == columns (@var{v})},
+## @code{length (@var{y}) == rows (@var{v})}, and
+## @code{length (@var{z}) == size (@var{v}, 3)}.  In either case the input
 ## data must be strictly monotonic.
 ##
 ## If called without @var{x}, @var{y}, @var{z}, and just a single reference
 ## data matrix @var{v}, the 3-D region
 ## @code{@var{x} = 1:columns (@var{v}), @var{y} = 1:rows (@var{v}),
 ## @var{z} = 1:size (@var{v}, 3)} is assumed.
 ## This saves memory if the grid is regular and the distance between points is
 ## not important.
diff --git a/scripts/general/interpft.m b/scripts/general/interpft.m
--- a/scripts/general/interpft.m
+++ b/scripts/general/interpft.m
@@ -15,25 +15,27 @@
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {} interpft (@var{x}, @var{n})
 ## @deftypefnx {Function File} {} interpft (@var{x}, @var{n}, @var{dim})
 ##
-## Fourier interpolation.  If @var{x} is a vector, then @var{x} is
-## resampled with @var{n} points.  The data in @var{x} is assumed to be
-## equispaced.  If @var{x} is a matrix or an N-dimensional array, the
-## interpolation is performed on each column of @var{x}.  If @var{dim} is
-## specified, then interpolate along the dimension @var{dim}.
+## Fourier interpolation.
 ##
-## @code{interpft} assumes that the interpolated function is periodic,
-## and so assumptions are made about the endpoints of the interpolation.
+## If @var{x} is a vector then @var{x} is resampled with @var{n} points.  The
+## data in @var{x} is assumed to be equispaced.  If @var{x} is a matrix or an
+## N-dimensional array, the interpolation is performed on each column of
+## @var{x}.
 ##
+## If @var{dim} is specified, then interpolate along the dimension @var{dim}.
+##
+## @code{interpft} assumes that the interpolated function is periodic, and so
+## assumptions are made about the endpoints of the interpolation.
 ## @seealso{interp1}
 ## @end deftypefn
 
 ## Author: Paul Kienzle
 ## 2001-02-11
 ##    * initial version
 ## 2002-03-17 aadler
 ##    * added code to work on matrices as well
diff --git a/scripts/general/interpn.m b/scripts/general/interpn.m
--- a/scripts/general/interpn.m
+++ b/scripts/general/interpn.m
@@ -20,16 +20,17 @@
 ## @deftypefn  {Function File} {@var{vi} =} interpn (@var{x1}, @var{x2}, @dots{}, @var{v}, @var{y1}, @var{y2}, @dots{})
 ## @deftypefnx {Function File} {@var{vi} =} interpn (@var{v}, @var{y1}, @var{y2}, @dots{})
 ## @deftypefnx {Function File} {@var{vi} =} interpn (@var{v}, @var{m})
 ## @deftypefnx {Function File} {@var{vi} =} interpn (@var{v})
 ## @deftypefnx {Function File} {@var{vi} =} interpn (@dots{}, @var{method})
 ## @deftypefnx {Function File} {@var{vi} =} interpn (@dots{}, @var{method}, @var{extrapval})
 ##
 ## Perform @var{n}-dimensional interpolation, where @var{n} is at least two.
+##
 ## Each element of the @var{n}-dimensional array @var{v} represents a value
 ## at a location given by the parameters @var{x1}, @var{x2}, @dots{}, @var{xn}.
 ## The parameters @var{x1}, @var{x2}, @dots{}, @var{xn} are either
 ## @var{n}-dimensional arrays of the same size as the array @var{v} in
 ## the @qcode{"ndgrid"} format or vectors.  The parameters @var{y1}, etc.
 ## respect a similar format to @var{x1}, etc., and they represent the points
 ## at which the array @var{vi} is interpolated.
 ##
diff --git a/scripts/general/loadobj.m b/scripts/general/loadobj.m
--- a/scripts/general/loadobj.m
+++ b/scripts/general/loadobj.m
@@ -14,16 +14,17 @@
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {@var{b} =} loadobj (@var{a})
 ## Method of a class to manipulate an object after loading it from a file.
+##
 ## The function @code{loadobj} is called when the object @var{a} is loaded
 ## using the @code{load} function.  An example of the use of @code{saveobj}
 ## might be to add fields to an object that don't make sense to be saved.
 ## For example:
 ##
 ## @example
 ## @group
 ## function b = loadobj (a)
diff --git a/scripts/general/logspace.m b/scripts/general/logspace.m
--- a/scripts/general/logspace.m
+++ b/scripts/general/logspace.m
@@ -22,16 +22,17 @@
 ## @deftypefnx {Function File} {} logspace (@var{a}, pi, @var{n})
 ## Return a row vector with @var{n} elements logarithmically spaced from
 ## @tex
 ## $10^{a}$ to $10^{b}$.
 ## @end tex
 ## @ifnottex
 ## 10^@var{a} to 10^@var{b}.
 ## @end ifnottex
+##
 ## If @var{n} is unspecified it defaults to 50.
 ##
 ## If @var{b} is equal to
 ## @tex
 ## $\pi$,
 ## @end tex
 ## @ifnottex
 ## pi,
diff --git a/scripts/general/methods.m b/scripts/general/methods.m
--- a/scripts/general/methods.m
+++ b/scripts/general/methods.m
@@ -18,16 +18,17 @@
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {} methods (@var{obj})
 ## @deftypefnx {Function File} {} methods ("@var{classname}")
 ## @deftypefnx {Function File} {@var{mtds} =} methods (@dots{})
 ##
 ## Return a cell array containing the names of the methods for the
 ## object @var{obj} or the named class @var{classname}.
+##
 ## @var{obj} may be an Octave class object or a Java object.
 ##
 ## @seealso{fieldnames}
 ## @end deftypefn
 
 function mtds = methods (obj)
 
   if (nargin != 1)
diff --git a/scripts/general/nargchk.m b/scripts/general/nargchk.m
--- a/scripts/general/nargchk.m
+++ b/scripts/general/nargchk.m
@@ -15,25 +15,25 @@
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {@var{msgstr} =} nargchk (@var{minargs}, @var{maxargs}, @var{nargs})
 ## @deftypefnx {Function File} {@var{msgstr} =} nargchk (@var{minargs}, @var{maxargs}, @var{nargs}, "string")
 ## @deftypefnx {Function File} {@var{msgstruct} =} nargchk (@var{minargs}, @var{maxargs}, @var{nargs}, "struct")
-## Return an appropriate error message string (or structure) if the
-## number of inputs requested is invalid.
+## Return an appropriate error message string (or structure) if the number of
+## inputs requested is invalid.
 ##
 ## This is useful for checking to see that the number of input arguments
 ## supplied to a function is within an acceptable range.
 ##
 ## @strong{Caution}: @code{nargchk} is scheduled for deprecation.  Use
 ## @code{narginchk} in all new code.
-## @seealso{nargoutchk, narginchk, error, nargin, nargout}
+## @seealso{narginchk, nargoutchk, error, nargin, nargout}
 ## @end deftypefn
 
 ## Author: Bill Denney <bill@denney.ws>
 
 function msg = nargchk (minargs, maxargs, nargs, outtype = "string")
 
   if (nargin < 3 || nargin > 4)
     print_usage ();
diff --git a/scripts/general/narginchk.m b/scripts/general/narginchk.m
--- a/scripts/general/narginchk.m
+++ b/scripts/general/narginchk.m
@@ -13,23 +13,24 @@
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} narginchk (@var{minargs}, @var{maxargs})
-## Check for correct number of arguments or generate an error message if
-## the number of arguments in the calling function is outside the range
-## @var{minargs} and @var{maxargs}.  Otherwise, do nothing.
+## Check for correct number of input arguments.
 ##
-## Both @var{minargs} and @var{maxargs} need to be scalar numeric
-## values.  Zero, Inf and negative values are all allowed, and
-## @var{minargs} and @var{maxargs} may be equal.
+## Generate an error message if the number of arguments in the calling function
+## is outside the range @var{minargs} and @var{maxargs}.  Otherwise, do nothing.
+##
+## Both @var{minargs} and @var{maxargs} must be scalar numeric values.  Zero,
+## Inf, and negative values are all allowed, and @var{minargs} and @var{maxargs}
+## may be equal.
 ##
 ## Note that this function evaluates @code{nargin} on the caller.
 ##
 ## @seealso{nargoutchk, error, nargout, nargin}
 ## @end deftypefn
 
 ## Author: Carnë Draug <carandraug+dev@gmail.com>
 
diff --git a/scripts/general/nargoutchk.m b/scripts/general/nargoutchk.m
--- a/scripts/general/nargoutchk.m
+++ b/scripts/general/nargoutchk.m
@@ -19,30 +19,30 @@
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {} nargoutchk (@var{minargs}, @var{maxargs})
 ## @deftypefnx {Function File} {@var{msgstr} =} nargoutchk (@var{minargs}, @var{maxargs}, @var{nargs})
 ## @deftypefnx {Function File} {@var{msgstr} =} nargoutchk (@var{minargs}, @var{maxargs}, @var{nargs}, "string")
 ## @deftypefnx {Function File} {@var{msgstruct} =} nargoutchk (@var{minargs}, @var{maxargs}, @var{nargs}, "struct")
 ## Check for correct number of output arguments.
 ##
-## On the first form, returns an error unless the number of arguments in its
-## caller is between the values of @var{minargs} and @var{maxargs}.  It does
-## nothing otherwise.  Note that this function evaluates the value of
-## @code{nargout} on the caller so its value must have not been tampered with.
+## In the first form, return an error if the number of arguments is not between
+## @var{minargs} and @var{maxargs}.  Otherwise, do nothing.  Note that this
+## function evaluates the value of @code{nargout} on the caller so its value
+## must have not been tampered with.
 ##
-## Both @var{minargs} and @var{maxargs} need to be a numeric scalar.  Zero, Inf
+## Both @var{minargs} and @var{maxargs} must be numeric scalars.  Zero, Inf,
 ## and negative are all valid, and they can have the same value.
 ##
-## For backward compatibility reasons, the other forms return an appropriate
-## error message string (or structure) if the number of outputs requested is
+## For backwards compatibility, the other forms return an appropriate error
+## message string (or structure) if the number of outputs requested is
 ## invalid.
 ##
-## This is useful for checking to see that the number of output
-## arguments supplied to a function is within an acceptable range.
+## This is useful for checking to that the number of output arguments supplied
+## to a function is within an acceptable range.
 ## @seealso{narginchk, error, nargout, nargin}
 ## @end deftypefn
 
 ## Author: Bill Denney <bill@denney.ws>
 ## Author: Carnë Draug <carandraug+dev@gmail.com>
 
 function msg = nargoutchk (minargs, maxargs, nargs, outtype)
 
diff --git a/scripts/general/nextpow2.m b/scripts/general/nextpow2.m
--- a/scripts/general/nextpow2.m
+++ b/scripts/general/nextpow2.m
@@ -13,19 +13,19 @@
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} nextpow2 (@var{x})
-## Compute exponent for smallest power of two larger than input.
+## Compute the exponent for the smallest power of two larger than the input.
 ##
-## For each element in the input array @var{x}, returns the first integer
+## For each element in the input array @var{x}, return the first integer
 ## @var{n} such that
 ## @tex
 ## $2^n \ge |x|$.
 ## @end tex
 ## @ifnottex
 ## 2^n @geq{} abs (x).
 ## @end ifnottex
 ##
diff --git a/scripts/general/nthargout.m b/scripts/general/nthargout.m
--- a/scripts/general/nthargout.m
+++ b/scripts/general/nthargout.m
@@ -14,27 +14,28 @@
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {} nthargout (@var{n}, @var{func}, @dots{})
 ## @deftypefnx {Function File} {} nthargout (@var{n}, @var{ntot}, @var{func}, @dots{})
-## Return the @var{n}th output argument of function given by the
-## function handle or string @var{func}.  Any arguments after @var{func}
-## are passed to @var{func}.  The total number of arguments to call
-## @var{func} with can be passed in @var{ntot}; by default @var{ntot}
-## is @var{n}.  The input @var{n} can also be a vector of indices of the
-## output, in which case the output will be a cell array of the
+## Return the @var{n}th output argument of the function specified by the
+## function handle or string @var{func}.
+##
+## Any additional arguments are passed directly to @var{func}.  The total
+## number of arguments to call @var{func} with can be passed in @var{ntot}; by
+## default @var{ntot} is @var{n}.  The input @var{n} can also be a vector of
+## indices of the output, in which case the output will be a cell array of the
 ## requested output arguments.
 ##
-## The intended use @code{nthargout} is to avoid intermediate variables.
-## For example, when finding the indices of the maximum entry of a
-## matrix, the following two compositions of nthargout
+## The intended use @code{nthargout} is to avoid intermediate variables.  For
+## example, when finding the indices of the maximum entry of a matrix, the
+## following two compositions of nthargout
 ##
 ## @example
 ## @group
 ## @var{m} = magic (5);
 ## cell2mat (nthargout ([1, 2], @@ind2sub, size (@var{m}),
 ##                      nthargout (2, @@max, @var{m}(:))))
 ## @result{} 5   3
 ## @end group
@@ -48,18 +49,18 @@
 ## @var{m} = magic (5);
 ## [~, idx] = max (@var{M}(:));
 ## [i, j] = ind2sub (size (@var{m}), idx);
 ## [i, j]
 ## @result{} 5   3
 ## @end group
 ## @end example
 ##
-## It can also be helpful to have all output arguments in a single cell
-## in the following manner:
+## It can also be helpful to have all output arguments in a single cell in the
+## following manner:
 ##
 ## @example
 ## @var{USV} = nthargout ([1:3], @@svd, hilb (5));
 ## @end example
 ##
 ## @seealso{nargin, nargout, varargin, varargout, isargout}
 ## @end deftypefn
 
diff --git a/scripts/general/num2str.m b/scripts/general/num2str.m
--- a/scripts/general/num2str.m
+++ b/scripts/general/num2str.m
@@ -15,21 +15,22 @@
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {} num2str (@var{x})
 ## @deftypefnx {Function File} {} num2str (@var{x}, @var{precision})
 ## @deftypefnx {Function File} {} num2str (@var{x}, @var{format})
-## Convert a number (or array) to a string (or a character array).  The
-## optional second argument may either give the number of significant
-## digits (@var{precision}) to be used in the output or a format
-## template string (@var{format}) as in @code{sprintf} (@pxref{Formatted
-## Output}).  @code{num2str} can also handle complex numbers.
+## Convert a number (or array) to a string (or a character array).
+##
+## The optional second argument may either give the number of significant
+## digits (@var{precision}) to be used in the output or a format template
+## string (@var{format}) as in @code{sprintf} (@pxref{Formatted Output}).
+## @code{num2str} can also process complex numbers.
 ##
 ## Examples:
 ##
 ## @example
 ## @group
 ## num2str (123.456)
 ##      @result{} "123.46"
 ##
@@ -54,19 +55,19 @@
 ## Notes:
 ##
 ## For @sc{matlab} compatibility, leading spaces are stripped before returning
 ## the string.
 ##
 ## The @code{num2str} function is not very flexible.  For better control
 ## over the results, use @code{sprintf} (@pxref{Formatted Output}).
 ##
-## For complex @var{x}, the format string may only contain one
-## output conversion specification and nothing else.  Otherwise, results
-## will be unpredictable.
+## For complex @var{x}, the format string may only contain one output
+## conversion specification and nothing else.  Otherwise, results will be
+## unpredictable.
 ## @seealso{sprintf, int2str, mat2str}
 ## @end deftypefn
 
 ## Author: jwe
 
 function retval = num2str (x, arg)
 
   if (nargin != 1 && nargin != 2)
diff --git a/scripts/general/pol2cart.m b/scripts/general/pol2cart.m
--- a/scripts/general/pol2cart.m
+++ b/scripts/general/pol2cart.m
@@ -17,27 +17,29 @@
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {[@var{x}, @var{y}] =} pol2cart (@var{theta}, @var{r})
 ## @deftypefnx {Function File} {[@var{x}, @var{y}, @var{z}] =} pol2cart (@var{theta}, @var{r}, @var{z})
 ## @deftypefnx {Function File} {[@var{x}, @var{y}] =} pol2cart (@var{P})
 ## @deftypefnx {Function File} {[@var{x}, @var{y}, @var{z}] =} pol2cart (@var{P})
 ## @deftypefnx {Function File} {@var{C} =} pol2cart (@dots{})
-## Transform polar or cylindrical to Cartesian coordinates.
+## Transform polar or cylindrical coordinates to Cartesian coordinates.
 ##
-## @var{theta}, @var{r}, (and @var{z}) must be the same shape, or scalar.
+## The inputs @var{theta}, @var{r}, (and @var{z}) must be the same shape, or
+## scalar.  If called with a single matrix argument then each row of @var{P}
+## represents the polar/(cylindrical) coordinate (@var{theta}, @var{r}
+## (, @var{z})).
+##
 ## @var{theta} describes the angle relative to the positive x-axis.
+##
 ## @var{r} is the distance to the z-axis (0, 0, z).
-## If called with a single matrix argument then each row of @var{P}
-## represents the polar/(cylindrical) coordinate (@var{theta}, @var{r} (,
-## @var{z})).
 ##
-## If only a single return argument is requested then return a matrix
-## @var{C} where each row represents one Cartesian coordinate
+## If only a single return argument is requested then return a matrix @var{C}
+## where each row represents one Cartesian coordinate
 ## (@var{x}, @var{y} (, @var{z})).
 ## @seealso{cart2pol, sph2cart, cart2sph}
 ## @end deftypefn
 
 ## Author: Kai Habel <kai.habel@gmx.de>
 ## Adapted-by: jwe
 
 function [x, y, z] = pol2cart (theta, r, z = [])
diff --git a/scripts/general/polyarea.m b/scripts/general/polyarea.m
--- a/scripts/general/polyarea.m
+++ b/scripts/general/polyarea.m
@@ -15,24 +15,25 @@
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {} polyarea (@var{x}, @var{y})
 ## @deftypefnx {Function File} {} polyarea (@var{x}, @var{y}, @var{dim})
 ##
-## Determine area of a polygon by triangle method.  The variables
-## @var{x} and @var{y} define the vertex pairs, and must therefore have
-## the same shape.  They can be either vectors or arrays.  If they are
-## arrays then the columns of @var{x} and @var{y} are treated separately
-## and an area returned for each.
+## Determine area of a polygon by triangle method.
 ##
-## If the optional @var{dim} argument is given, then @code{polyarea}
-## works along this dimension of the arrays @var{x} and @var{y}.
+## The variables @var{x} and @var{y} define the vertex pairs, and must
+## therefore have the same shape.  They can be either vectors or arrays.  If
+## they are arrays then the columns of @var{x} and @var{y} are treated
+## separately and an area returned for each.
+##
+## If the optional @var{dim} argument is given, then @code{polyarea} works
+## along this dimension of the arrays @var{x} and @var{y}.
 ##
 ## @end deftypefn
 
 ## todo:  Add moments for centroid, etc.
 ##
 ## bugs and limitations:
 ##        Probably ought to be an optional check to make sure that
 ##        traversing the vertices doesn't make any sides cross
diff --git a/scripts/general/postpad.m b/scripts/general/postpad.m
--- a/scripts/general/postpad.m
+++ b/scripts/general/postpad.m
@@ -18,26 +18,25 @@
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {} postpad (@var{x}, @var{l})
 ## @deftypefnx {Function File} {} postpad (@var{x}, @var{l}, @var{c})
 ## @deftypefnx {Function File} {} postpad (@var{x}, @var{l}, @var{c}, @var{dim})
 ## Append the scalar value @var{c} to the vector @var{x} until it is of length
 ## @var{l}.  If @var{c} is not given, a value of 0 is used.
 ##
-## If @code{length (@var{x}) > @var{l}}, elements from the end of
-## @var{x} are removed until a vector of length @var{l} is obtained.
+## If @code{length (@var{x}) > @var{l}}, elements from the end of @var{x} are
+## removed until a vector of length @var{l} is obtained.
 ##
 ## If @var{x} is a matrix, elements are appended or removed from each row.
 ##
-## If the optional argument @var{dim} is given, operate along this
-## dimension.
+## If the optional argument @var{dim} is given, operate along this dimension.
 ##
-## If @var{dim} is larger than the dimensions of @var{x}, the result will
-## have @var{dim} dimensions.
+## If @var{dim} is larger than the dimensions of @var{x}, the result will have
+## @var{dim} dimensions.
 ## @seealso{prepad, cat, resize}
 ## @end deftypefn
 
 ## Author: Tony Richardson <arichard@stark.cc.oh.us>
 ## Created: June 1994
 
 function y = postpad (x, l, c, dim)
 
diff --git a/scripts/general/prepad.m b/scripts/general/prepad.m
--- a/scripts/general/prepad.m
+++ b/scripts/general/prepad.m
@@ -18,26 +18,25 @@
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {} prepad (@var{x}, @var{l})
 ## @deftypefnx {Function File} {} prepad (@var{x}, @var{l}, @var{c})
 ## @deftypefnx {Function File} {} prepad (@var{x}, @var{l}, @var{c}, @var{dim})
 ## Prepend the scalar value @var{c} to the vector @var{x} until it is of length
 ## @var{l}.  If @var{c} is not given, a value of 0 is used.
 ##
-## If @code{length (@var{x}) > @var{l}}, elements from the beginning of
-## @var{x} are removed until a vector of length @var{l} is obtained.
+## If @code{length (@var{x}) > @var{l}}, elements from the beginning of @var{x}
+## are removed until a vector of length @var{l} is obtained.
 ##
 ## If @var{x} is a matrix, elements are prepended or removed from each row.
 ##
-## If the optional argument @var{dim} is given, operate along this
-## dimension.
+## If the optional argument @var{dim} is given, operate along this dimension.
 ##
-## If @var{dim} is larger than the dimensions of @var{x}, the result will
-## have @var{dim} dimensions.
+## If @var{dim} is larger than the dimensions of @var{x}, the result will have
+## @var{dim} dimensions.
 ## @seealso{postpad, cat, resize}
 ## @end deftypefn
 
 ## Author: Tony Richardson <arichard@stark.cc.oh.us>
 ## Created: June 1994
 
 function y = prepad (x, l, c, dim)
 
diff --git a/scripts/general/profile.m b/scripts/general/profile.m
--- a/scripts/general/profile.m
+++ b/scripts/general/profile.m
@@ -22,44 +22,43 @@
 ## @deftypefnx {Command} {} profile resume
 ## @deftypefnx {Command} {} profile clear
 ## @deftypefnx {Function File} {@var{S} =} profile ("status")
 ## @deftypefnx {Function File} {@var{T} =} profile ("info")
 ## Control the built-in profiler.
 ##
 ## @table @code
 ## @item profile on
-## Start the profiler, clearing all previously collected data if there
-## is any.
+## Start the profiler, clearing all previously collected data if there is any.
 ##
 ## @item profile off
 ## Stop profiling.  The collected data can later be retrieved and examined
-## with calls like @code{S = profile ("info")}.
+## with @code{T = profile ("info")}.
 ##
 ## @item profile clear
 ## Clear all collected profiler data.
 ##
 ## @item profile resume
-## Restart profiling without cleaning up the old data and instead
-## all newly collected statistics are added to the already existing ones.
+## Restart profiling without clearing the old data.  All newly collected
+## statistics are added to the existing ones.
 ##
 ## @item @var{S} = profile ("status")
-## Return a structure filled with certain information about the current status
-## of the profiler.  At the moment, the only field is @code{ProfilerStatus}
-## which is either @qcode{"on"} or @qcode{"off"}.
+## Return a structure with information about the current status of the profiler.
+## At the moment, the only field is @code{ProfilerStatus} which is either
+## @qcode{"on"} or @qcode{"off"}.
 ##
 ## @item @var{T} = profile ("info")
-## Return the collected profiling statistics in the structure @var{T}.
-## The flat profile is returned in the field @code{FunctionTable} which is an
+## Return the collected profiling statistics in the structure @var{T}.  The
+## flat profile is returned in the field @code{FunctionTable} which is an
 ## array of structures, each entry corresponding to a function which was called
-## and for which profiling statistics are present.  Furthermore, the field
-## @code{Hierarchical} contains the hierarchical call-tree.  Each node
-## has an index into the @code{FunctionTable} identifying the function it
-## corresponds to as well as data fields for number of calls and time spent
-## at this level in the call-tree.
+## and for which profiling statistics are present.  In addition, the field
+## @code{Hierarchical} contains the hierarchical call tree.  Each node has an
+## index into the @code{FunctionTable} identifying the function it corresponds
+## to as well as data fields for number of calls and time spent at this level
+## in the call tree.
 ## @seealso{profshow, profexplore}
 ## @end table
 ## @end deftypefn
 
 ## Built-in profiler.
 ## Author: Daniel Kraft <d@domob.eu>
 
 function retval = profile (option)
diff --git a/scripts/general/quadgk.m b/scripts/general/quadgk.m
--- a/scripts/general/quadgk.m
+++ b/scripts/general/quadgk.m
@@ -20,112 +20,111 @@
 ## @deftypefn  {Function File} {@var{q} =} quadgk (@var{f}, @var{a}, @var{b})
 ## @deftypefnx {Function File} {@var{q} =} quadgk (@var{f}, @var{a}, @var{b}, @var{abstol})
 ## @deftypefnx {Function File} {@var{q} =} quadgk (@var{f}, @var{a}, @var{b}, @var{abstol}, @var{trace})
 ## @deftypefnx {Function File} {@var{q} =} quadgk (@var{f}, @var{a}, @var{b}, @var{prop}, @var{val}, @dots{})
 ## @deftypefnx {Function File} {[@var{q}, @var{err}] =} quadgk (@dots{})
 ##
 ## Numerically evaluate the integral of @var{f} from @var{a} to @var{b}
 ## using adaptive Gauss-Konrod quadrature.
-## @var{f} is a function handle, inline function, or string
-## containing the name of the function to evaluate.
-## The formulation is based on a proposal by @nospell{L.F. Shampine},
-## @cite{"Vectorized adaptive quadrature in @sc{matlab}", Journal of
-## Computational and Applied Mathematics, pp131-140, Vol 211, Issue 2,
-## Feb 2008} where all function evaluations at an iteration are
-## calculated with a single call to @var{f}.  Therefore, the function
-## @var{f} must be vectorized and must accept a vector of input values @var{x}
-## and return an output vector representing the function evaluations at the
-## given values of @var{x}.
+##
+## @var{f} is a function handle, inline function, or string containing the name
+## of the function to evaluate.  The function @var{f} must be vectorized and
+## return a vector of output values when given a vector of input values.
 ##
 ## @var{a} and @var{b} are the lower and upper limits of integration.  Either
-## or both limits may be infinite or contain weak end singularities.
-## Variable transformation will be used to treat any infinite intervals and
-## weaken the singularities.  For example:
+## or both limits may be infinite or contain weak end singularities.  Variable
+## transformation will be used to treat any infinite intervals and weaken the
+## singularities.  For example:
 ##
 ## @example
 ## quadgk (@@(x) 1 ./ (sqrt (x) .* (x + 1)), 0, Inf)
 ## @end example
 ##
 ## @noindent
-## Note that the formulation of the integrand uses the
-## element-by-element operator @code{./} and all user functions to
-## @code{quadgk} should do the same.
+## Note that the formulation of the integrand uses the element-by-element
+## operator @code{./} and all user functions to @code{quadgk} should do the
+## same.
 ##
 ## The optional argument @var{tol} defines the absolute tolerance used to stop
-## the integration procedure.  The default value is @math{1e^{-10}}.
+## the integration procedure.  The default value is 1e-10.
 ##
-## The algorithm used by @code{quadgk} involves subdividing the
-## integration interval and evaluating each subinterval.
-## If @var{trace} is true then after computing each of these partial
-## integrals display: (1) the number of subintervals at this step,
-## (2) the current estimate of the error @var{err}, (3) the current estimate
-## for the integral @var{q}.
+## The algorithm used by @code{quadgk} involves subdividing the integration
+## interval and evaluating each subinterval.  If @var{trace} is true then after
+## computing each of these partial integrals display: (1) the number of
+## subintervals at this step, (2) the current estimate of the error @var{err},
+## (3) the current estimate for the integral @var{q}.
 ##
 ## Alternatively, properties of @code{quadgk} can be passed to the function as
 ## pairs @qcode{"@var{prop}", @var{val}}.  Valid properties are
 ##
 ## @table @code
 ## @item AbsTol
 ## Define the absolute error tolerance for the quadrature.  The default
 ## absolute tolerance is 1e-10.
 ##
 ## @item RelTol
 ## Define the relative error tolerance for the quadrature.  The default
 ## relative tolerance is 1e-5.
 ##
 ## @item MaxIntervalCount
-## @code{quadgk} initially subdivides the interval on which to perform
-## the quadrature into 10 intervals.  Subintervals that have an
-## unacceptable error are subdivided and re-evaluated.  If the number of
-## subintervals exceeds 650 subintervals at any point then a poor
-## convergence is signaled and the current estimate of the integral is
-## returned.  The property @qcode{"MaxIntervalCount"} can be used to alter the
-## number of subintervals that can exist before exiting.
+## @code{quadgk} initially subdivides the interval on which to perform the
+## quadrature into 10 intervals.  Subintervals that have an unacceptable error
+## are subdivided and re-evaluated.  If the number of subintervals exceeds 650
+## subintervals at any point then a poor convergence is signaled and the
+## current estimate of the integral is returned.  The property
+## @qcode{"MaxIntervalCount"} can be used to alter the number of subintervals
+## that can exist before exiting.
 ##
 ## @item WayPoints
 ## Discontinuities in the first derivative of the function to integrate can be
-## flagged with the @qcode{"WayPoints"} property.  This forces the ends of
-## a subinterval to fall on the breakpoints of the function and can result in
+## flagged with the @qcode{"WayPoints"} property.  This forces the ends of a
+## subinterval to fall on the breakpoints of the function and can result in
 ## significantly improved estimation of the error in the integral, faster
 ## computation, or both.  For example,
 ##
 ## @example
 ## quadgk (@@(x) abs (1 - x.^2), 0, 2, "Waypoints", 1)
 ## @end example
 ##
 ## @noindent
 ## signals the breakpoint in the integrand at @code{@var{x} = 1}.
 ##
 ## @item Trace
-## If logically true @code{quadgk} prints information on the
-## convergence of the quadrature at each iteration.
+## If logically true @code{quadgk} prints information on the convergence of the
+## quadrature at each iteration.
 ## @end table
 ##
 ## If any of @var{a}, @var{b}, or @var{waypoints} is complex then the
-## quadrature is treated as a contour integral along a piecewise
-## continuous path defined by the above.  In this case the integral is
-## assumed to have no edge singularities.  For example,
+## quadrature is treated as a contour integral along a piecewise continuous
+## path defined by the above.  In this case the integral is assumed to have no
+## edge singularities.  For example,
 ##
 ## @example
 ## @group
 ## quadgk (@@(z) log (z), 1+1i, 1+1i, "WayPoints",
 ##         [1-1i, -1,-1i, -1+1i])
 ## @end group
 ## @end example
 ##
 ## @noindent
-## integrates @code{log (z)} along the square defined by @code{[1+1i,
-##  1-1i, -1-1i, -1+1i]}
+## integrates @code{log (z)} along the square defined by
+## @code{[1+1i, 1-1i, -1-1i, -1+1i]}.
 ##
 ## The result of the integration is returned in @var{q}.
+##
 ## @var{err} is an approximate bound on the error in the integral
 ## @code{abs (@var{q} - @var{I})}, where @var{I} is the exact value of the
 ## integral.
 ##
+## Reference: @nospell{L.F. Shampine},
+## @cite{"Vectorized adaptive quadrature in @sc{matlab}"}, Journal of
+## Computational and Applied Mathematics, pp. 131--140, Vol 211, Issue 2,
+## Feb 2008.
+##
 ## @seealso{quad, quadv, quadl, quadcc, trapz, dblquad, triplequad}
 ## @end deftypefn
 
 function [q, err] = quadgk (f, a, b, varargin)
   if (nargin < 3)
     print_usage ();
   endif
 
diff --git a/scripts/general/quadl.m b/scripts/general/quadl.m
--- a/scripts/general/quadl.m
+++ b/scripts/general/quadl.m
@@ -17,34 +17,33 @@
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {@var{q} =} quadl (@var{f}, @var{a}, @var{b})
 ## @deftypefnx {Function File} {@var{q} =} quadl (@var{f}, @var{a}, @var{b}, @var{tol})
 ## @deftypefnx {Function File} {@var{q} =} quadl (@var{f}, @var{a}, @var{b}, @var{tol}, @var{trace})
 ## @deftypefnx {Function File} {@var{q} =} quadl (@var{f}, @var{a}, @var{b}, @var{tol}, @var{trace}, @var{p1}, @var{p2}, @dots{})
 ##
-## Numerically evaluate the integral of @var{f} from @var{a} to @var{b}
-## using an adaptive Lobatto rule.
-## @var{f} is a function handle, inline function, or string
-## containing the name of the function to evaluate.
-## The function @var{f} must be vectorized and return a vector of output values
-## if given a vector of input values.
+## Numerically evaluate the integral of @var{f} from @var{a} to @var{b} using
+## an adaptive Lobatto rule.
+##
+## @var{f} is a function handle, inline function, or string containing the name
+## of the function to evaluate.  The function @var{f} must be vectorized and
+## return a vector of output values when given a vector of input values.
 ##
 ## @var{a} and @var{b} are the lower and upper limits of integration.  Both
 ## limits must be finite.
 ##
 ## The optional argument @var{tol} defines the relative tolerance with which
 ## to perform the integration.  The default value is @code{eps}.
 ##
 ## The algorithm used by @code{quadl} involves recursively subdividing the
-## integration interval.
-## If @var{trace} is defined then for each subinterval display: (1) the left
-## end of the subinterval, (2) the length of the subinterval, (3) the
-## approximation of the integral over the subinterval.
+## integration interval.  If @var{trace} is defined then for each subinterval
+## display: (1) the left end of the subinterval, (2) the length of the
+## subinterval, (3) the approximation of the integral over the subinterval.
 ##
 ## Additional arguments @var{p1}, etc., are passed directly to the function
 ## @var{f}.  To use default values for @var{tol} and @var{trace}, one may pass
 ## empty matrices ([]).
 ##
 ## Reference: @nospell{W. Gander and W. Gautschi}, @cite{Adaptive Quadrature -
 ## Revisited}, BIT Vol. 40, No. 1, March 2000, pp. 84--101.
 ## @url{http://www.inf.ethz.ch/personal/gander/}
diff --git a/scripts/general/quadv.m b/scripts/general/quadv.m
--- a/scripts/general/quadv.m
+++ b/scripts/general/quadv.m
@@ -21,45 +21,46 @@
 ## @deftypefn  {Function File} {@var{q} =} quadv (@var{f}, @var{a}, @var{b})
 ## @deftypefnx {Function File} {@var{q} =} quadv (@var{f}, @var{a}, @var{b}, @var{tol})
 ## @deftypefnx {Function File} {@var{q} =} quadv (@var{f}, @var{a}, @var{b}, @var{tol}, @var{trace})
 ## @deftypefnx {Function File} {@var{q} =} quadv (@var{f}, @var{a}, @var{b}, @var{tol}, @var{trace}, @var{p1}, @var{p2}, @dots{})
 ## @deftypefnx {Function File} {[@var{q}, @var{nfun}] =} quadv (@dots{})
 ##
 ## Numerically evaluate the integral of @var{f} from @var{a} to @var{b}
 ## using an adaptive Simpson's rule.
-## @var{f} is a function handle, inline function, or string
-## containing the name of the function to evaluate.
-## @code{quadv} is a vectorized version of @code{quad} and the function
-## defined by @var{f} must accept a scalar or vector as input and return a
-## scalar, vector, or array as output.
+##
+## @var{f} is a function handle, inline function, or string containing the name
+## of the function to evaluate.  @code{quadv} is a vectorized version of
+## @code{quad} and the function defined by @var{f} must accept a scalar or
+## vector as input and return a scalar, vector, or array as output.
 ##
 ## @var{a} and @var{b} are the lower and upper limits of integration.  Both
 ## limits must be finite.
 ##
-## The optional argument @var{tol} defines the tolerance used to stop
-## the adaptation procedure.  The default value is @math{1e^{-6}}.
+## The optional argument @var{tol} defines the tolerance used to stop the
+## adaptation procedure.  The default value is 1e-6.
 ##
 ## The algorithm used by @code{quadv} involves recursively subdividing the
 ## integration interval and applying Simpson's rule on each subinterval.
 ## If @var{trace} is true then after computing each of these partial
 ## integrals display: (1) the total number of function evaluations,
 ## (2) the left end of the subinterval, (3) the length of the subinterval,
 ## (4) the approximation of the integral over the subinterval.
 ##
 ## Additional arguments @var{p1}, etc., are passed directly to the function
 ## @var{f}.  To use default values for @var{tol} and @var{trace}, one may pass
 ## empty matrices ([]).
 ##
-## The result of the integration is returned in @var{q}.  @var{nfun} indicates
-## the number of function evaluations that were made.
+## The result of the integration is returned in @var{q}
+##
+## @var{nfun} indicates the number of function evaluations that were made.
 ##
 ## Note: @code{quadv} is written in Octave's scripting language and can be
 ## used recursively in @code{dblquad} and @code{triplequad}, unlike the
-## similar @code{quad} function.
+## @code{quad} function.
 ## @seealso{quad, quadl, quadgk, quadcc, trapz, dblquad, triplequad}
 ## @end deftypefn
 
 function [q, nfun] = quadv (f, a, b, tol, trace, varargin)
   ## TODO: Make norm for convergence testing configurable
 
   if (nargin < 3)
     print_usage ();
diff --git a/scripts/general/randi.m b/scripts/general/randi.m
--- a/scripts/general/randi.m
+++ b/scripts/general/randi.m
@@ -21,28 +21,28 @@
 ## @deftypefnx {Function File} {} randi (@var{imax}, @var{n})
 ## @deftypefnx {Function File} {} randi (@var{imax}, @var{m}, @var{n}, @dots{})
 ## @deftypefnx {Function File} {} randi ([@var{imin} @var{imax}], @dots{})
 ## @deftypefnx {Function File} {} randi (@dots{}, "@var{class}")
 ## Return random integers in the range 1:@var{imax}.
 ##
 ## Additional arguments determine the shape of the return matrix.  When no
 ## arguments are specified a single random integer is returned.  If one
-## argument @var{n} is specified then a square matrix @w{(@var{n} x @var{n})} is
-## returned.  Two or more arguments will return a multi-dimensional
-## matrix @w{(@var{m} x @var{n} x @dots{})}.
+## argument @var{n} is specified then a square matrix @w{(@var{n} x @var{n})}
+## is returned.  Two or more arguments will return a multi-dimensional matrix
+## @w{(@var{m} x @var{n} x @dots{})}.
 ##
-## The integer range may optionally be described by a two element matrix
-## with a lower and upper bound in which case the returned integers will be
-## on the interval @w{[@var{imin}, @var{imax}]}.
+## The integer range may optionally be described by a two element matrix with a
+## lower and upper bound in which case the returned integers will be on the
+## interval @w{[@var{imin}, @var{imax}]}.
 ##
 ## The optional argument @var{class} will return a matrix of the requested
 ## type.  The default is @qcode{"double"}.
 ##
-## The following example returns 150 integers in the range 1-10.
+## The following example returns 150 integers in the range 1--10.
 ##
 ## @example
 ## ri = randi (10, 150, 1)
 ## @end example
 ##
 ## Implementation Note: @code{randi} relies internally on @code{rand} which
 ## uses class @qcode{"double"} to represent numbers.  This limits the maximum
 ## integer (@var{imax}) and range (@var{imax} - @var{imin}) to the value
diff --git a/scripts/general/rat.m b/scripts/general/rat.m
--- a/scripts/general/rat.m
+++ b/scripts/general/rat.m
@@ -15,29 +15,31 @@
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {@var{s} =} rat (@var{x}, @var{tol})
 ## @deftypefnx {Function File} {[@var{n}, @var{d}] =} rat (@var{x}, @var{tol})
 ##
-## Find a rational approximation to @var{x} within the tolerance defined
-## by @var{tol} using a continued fraction expansion.  For example:
+## Find a rational approximation to @var{x} within the tolerance defined by
+## @var{tol} using a continued fraction expansion.
+##
+## For example:
 ##
 ## @example
 ## @group
 ## rat (pi) = 3 + 1/(7 + 1/16) = 355/113
 ## rat (e) = 3 + 1/(-4 + 1/(2 + 1/(5 + 1/(-2 + 1/(-7)))))
 ##         = 1457/536
 ## @end group
 ## @end example
 ##
-## Called with two arguments returns the numerator and denominator separately
-## as two matrices.
+## When called with two output arguments return the numerator and denominator
+## separately as two matrices.
 ## @seealso{rats}
 ## @end deftypefn
 
 function [n,d] = rat (x,tol)
 
   if (nargin != [1,2] || nargout > 2)
     print_usage ();
   endif
diff --git a/scripts/general/repmat.m b/scripts/general/repmat.m
--- a/scripts/general/repmat.m
+++ b/scripts/general/repmat.m
@@ -20,20 +20,22 @@
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {} repmat (@var{A}, @var{m})
 ## @deftypefnx {Function File} {} repmat (@var{A}, @var{m}, @var{n})
 ## @deftypefnx {Function File} {} repmat (@var{A}, @var{m}, @var{n}, @var{p} @dots{})
 ## @deftypefnx {Function File} {} repmat (@var{A}, [@var{m} @var{n}])
 ## @deftypefnx {Function File} {} repmat (@var{A}, [@var{m} @var{n} @var{p} @dots{}])
 ## Form a block matrix of size @var{m} by @var{n}, with a copy of matrix
-## @var{A} as each element.  If @var{n} is not specified, form an
-## @var{m} by @var{m} block matrix.  For copying along more than two
-## dimensions, specify the number of times to copy across each dimension
-## @var{m}, @var{n}, @var{p}, @dots{}, in a vector in the second argument.
+## @var{A} as each element.
+##
+## If @var{n} is not specified, form an @var{m} by @var{m} block matrix.  For
+## copying along more than two dimensions, specify the number of times to copy
+## across each dimension @var{m}, @var{n}, @var{p}, @dots{}, in a vector in the
+## second argument.
 ## @seealso{repelems}
 ## @end deftypefn
 
 ## Author: Paul Kienzle <pkienzle@kienzle.powernet.co.uk>
 ## Created: July 2000
 
 function x = repmat (A, m, varargin)
 
diff --git a/scripts/general/rot90.m b/scripts/general/rot90.m
--- a/scripts/general/rot90.m
+++ b/scripts/general/rot90.m
@@ -17,19 +17,21 @@
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {} rot90 (@var{A})
 ## @deftypefnx {Function File} {} rot90 (@var{A}, @var{k})
 ## Rotate array by 90 degree increments.
 ##
 ## Return a copy of @var{A} with the elements rotated counterclockwise in
-## 90-degree increments.  The second argument is optional, and specifies
-## how many 90-degree rotations are to be applied (the default value is 1).
-## Negative values of @var{k} rotate the matrix in a clockwise direction.
+## 90-degree increments.
+##
+## The second argument is optional, and specifies how many 90-degree rotations
+## are to be applied (the default value is 1).  Negative values of @var{k}
+## rotate the matrix in a clockwise direction.
 ## For example,
 ##
 ## @example
 ## @group
 ## rot90 ([1, 2; 3, 4], -1)
 ##     @result{}  3  1
 ##         4  2
 ## @end group
diff --git a/scripts/general/rotdim.m b/scripts/general/rotdim.m
--- a/scripts/general/rotdim.m
+++ b/scripts/general/rotdim.m
@@ -17,24 +17,26 @@
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {} rotdim (@var{x})
 ## @deftypefnx {Function File} {} rotdim (@var{x}, @var{n})
 ## @deftypefnx {Function File} {} rotdim (@var{x}, @var{n}, @var{plane})
 ## Return a copy of @var{x} with the elements rotated counterclockwise in
 ## 90-degree increments.
+##
 ## The second argument @var{n} is optional, and specifies how many 90-degree
-## rotations are to be applied (the default value is 1).
-## The third argument is also optional and defines the plane of the
-## rotation.  If present, @var{plane} is a two element vector containing two
-## different valid dimensions of the matrix.  When @var{plane} is not given
-## the first two non-singleton dimensions are used.
+## rotations are to be applied (the default value is 1).  Negative values of
+## @var{n} rotate the matrix in a clockwise direction.
 ##
-## Negative values of @var{n} rotate the matrix in a clockwise direction.
+## The third argument is also optional and defines the plane of the rotation.
+## If present, @var{plane} is a two element vector containing two different
+## valid dimensions of the matrix.  When @var{plane} is not given the first two
+## non-singleton dimensions are used.
+##
 ## For example,
 ##
 ## @example
 ## @group
 ## rotdim ([1, 2; 3, 4], -1, [1, 2])
 ##      @result{}  3  1
 ##          4  2
 ## @end group
diff --git a/scripts/general/saveobj.m b/scripts/general/saveobj.m
--- a/scripts/general/saveobj.m
+++ b/scripts/general/saveobj.m
@@ -14,16 +14,17 @@
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {@var{b} =} saveobj (@var{a})
 ## Method of a class to manipulate an object prior to saving it to a file.
+##
 ## The function @code{saveobj} is called when the object @var{a} is saved
 ## using the @code{save} function.  An example of the use of @code{saveobj}
 ## might be to remove fields of the object that don't make sense to be saved
 ## or it might be used to ensure that certain fields of the object are
 ## initialized before the object is saved.  For example:
 ##
 ## @example
 ## @group
diff --git a/scripts/general/shift.m b/scripts/general/shift.m
--- a/scripts/general/shift.m
+++ b/scripts/general/shift.m
@@ -18,18 +18,18 @@
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {} shift (@var{x}, @var{b})
 ## @deftypefnx {Function File} {} shift (@var{x}, @var{b}, @var{dim})
 ## If @var{x} is a vector, perform a circular shift of length @var{b} of
 ## the elements of @var{x}.
 ##
 ## If @var{x} is a matrix, do the same for each column of @var{x}.
-## If the optional @var{dim} argument is given, operate along this
-## dimension.
+##
+## If the optional @var{dim} argument is given, operate along this dimension.
 ## @end deftypefn
 
 ## Author: AW <Andreas.Weingessel@ci.tuwien.ac.at>
 ## Created: 14 September 1994
 ## Adapted-By: jwe
 
 function y = shift (x, b, dim)
 
diff --git a/scripts/general/shiftdim.m b/scripts/general/shiftdim.m
--- a/scripts/general/shiftdim.m
+++ b/scripts/general/shiftdim.m
@@ -15,25 +15,26 @@
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {@var{y} =} shiftdim (@var{x}, @var{n})
 ## @deftypefnx {Function File} {[@var{y}, @var{ns}] =} shiftdim (@var{x})
 ## Shift the dimensions of @var{x} by @var{n}, where @var{n} must be
-## an integer scalar.  When @var{n} is positive, the dimensions of
-## @var{x} are shifted to the left, with the leading dimensions
-## circulated to the end.  If @var{n} is negative, then the dimensions
-## of @var{x} are shifted to the right, with @var{n} leading singleton
-## dimensions added.
+## an integer scalar.
+##
+## When @var{n} is positive, the dimensions of @var{x} are shifted to the left,
+## with the leading dimensions circulated to the end.  If @var{n} is negative,
+## then the dimensions of @var{x} are shifted to the right, with @var{n}
+## leading singleton dimensions added.
 ##
 ## Called with a single argument, @code{shiftdim}, removes the leading
-## singleton dimensions, returning the number of dimensions removed
-## in the second output argument @var{ns}.
+## singleton dimensions, returning the number of dimensions removed in the
+## second output argument @var{ns}.
 ##
 ## For example:
 ##
 ## @example
 ## @group
 ## x = ones (1, 2, 3);
 ## size (shiftdim (x, -1))
 ##    @result{} [1, 1, 2, 3]
diff --git a/scripts/general/sortrows.m b/scripts/general/sortrows.m
--- a/scripts/general/sortrows.m
+++ b/scripts/general/sortrows.m
@@ -15,21 +15,22 @@
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {[@var{s}, @var{i}] =} sortrows (@var{A})
 ## @deftypefnx {Function File} {[@var{s}, @var{i}] =} sortrows (@var{A}, @var{c})
-## Sort the rows of the matrix @var{A} according to the order of the
-## columns specified in @var{c}.  If @var{c} is omitted, a
-## lexicographical sort is used.  By default ascending order is used
-## however if elements of @var{c} are negative then the corresponding
-## column is sorted in descending order.
+## Sort the rows of the matrix @var{A} according to the order of the columns
+## specified in @var{c}.
+##
+## If @var{c} is omitted, a lexicographical sort is used.  By default ascending
+## order is used however if elements of @var{c} are negative then the
+## corresponding column is sorted in descending order.
 ## @seealso{sort}
 ## @end deftypefn
 
 ## Author: Daniel Calvelo, Paul Kienzle
 ## Adapted-by: jwe
 
 function [s, i] = sortrows (A, c)
 
diff --git a/scripts/general/sph2cart.m b/scripts/general/sph2cart.m
--- a/scripts/general/sph2cart.m
+++ b/scripts/general/sph2cart.m
@@ -15,27 +15,30 @@
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {[@var{x}, @var{y}, @var{z}] =} sph2cart (@var{theta}, @var{phi}, @var{r})
 ## @deftypefnx {Function File} {[@var{x}, @var{y}, @var{z}] =} sph2cart (@var{S})
 ## @deftypefnx {Function File} {@var{C} =} sph2cart (@dots{})
-## Transform spherical to Cartesian coordinates.
+## Transform spherical coordinates to Cartesian coordinates.
+##
+## The inputs @var{theta}, @var{phi}, and @var{r} must be the same shape, or
+## scalar.  If called with a single matrix argument then each row of @var{S}
+## represents the spherical coordinate (@var{theta}, @var{phi}, @var{r}).
 ##
 ## @var{theta} describes the angle relative to the positive x-axis.
+##
 ## @var{phi} is the angle relative to the xy-plane.
+##
 ## @var{r} is the distance to the origin @w{(0, 0, 0)}.
-## @var{theta}, @var{phi}, and @var{r} must be the same shape, or scalar.
-## If called with a single matrix argument then each row of @var{S}
-## represents the spherical coordinate (@var{theta}, @var{phi}, @var{r}).
 ##
-## If only a single return argument is requested then return a matrix
-## @var{C} where each row represents one Cartesian coordinate
+## If only a single return argument is requested then return a matrix @var{C}
+## where each row represents one Cartesian coordinate
 ## (@var{x}, @var{y}, @var{z}).
 ## @seealso{cart2sph, pol2cart, cart2pol}
 ## @end deftypefn
 
 ## Author: Kai Habel <kai.habel@gmx.de>
 ## Adapted-by: jwe
 
 function [x, y, z] = sph2cart (theta, phi, r)
diff --git a/scripts/general/structfun.m b/scripts/general/structfun.m
--- a/scripts/general/structfun.m
+++ b/scripts/general/structfun.m
@@ -22,46 +22,44 @@
 ## @deftypefnx {Function File} {[@var{A}, @dots{}] =} structfun (@dots{})
 ## @deftypefnx {Function File} {} structfun (@dots{}, "ErrorHandler", @var{errfunc})
 ## @deftypefnx {Function File} {} structfun (@dots{}, "UniformOutput", @var{val})
 ##
 ## Evaluate the function named @var{name} on the fields of the structure
 ## @var{S}.  The fields of @var{S} are passed to the function @var{func}
 ## individually.
 ##
-## @code{structfun} accepts an arbitrary function @var{func} in the form of
-## an inline function, function handle, or the name of a function (in a
-## character string).  In the case of a character string argument, the
-## function must accept a single argument named @var{x}, and it must return
-## a string value.  If the function returns more than one argument, they are
-## returned as separate output variables.
+## @code{structfun} accepts an arbitrary function @var{func} in the form of an
+## inline function, function handle, or the name of a function (in a character
+## string).  In the case of a character string argument, the function must
+## accept a single argument named @var{x}, and it must return a string value.
+## If the function returns more than one argument, they are returned as
+## separate output variables.
 ##
-## If the parameter @qcode{"UniformOutput"} is set to true (the default),
-## then the function must return a single element which will be concatenated
-## into the return value.  If @qcode{"UniformOutput"} is false, the outputs
-## are placed into a structure with the same fieldnames as the input
-## structure.
+## If the parameter @qcode{"UniformOutput"} is set to true (the default), then
+## the function must return a single element which will be concatenated into
+## the return value.  If @qcode{"UniformOutput"} is false, the outputs are
+## placed into a structure with the same fieldnames as the input structure.
 ##
 ## @example
 ## @group
 ## s.name1 = "John Smith";
 ## s.name2 = "Jill Jones";
 ## structfun (@@(x) regexp (x, '(\w+)$', "matches")@{1@}, s,
 ##            "UniformOutput", false)
 ## @result{}
 ##    @{
 ##      name1 = Smith
 ##      name2 = Jones
 ##    @}
 ## @end group
 ## @end example
 ##
-## Given the parameter @qcode{"ErrorHandler"}, @var{errfunc} defines a
-## function to call in case @var{func} generates an error.  The form of the
-## function is
+## Given the parameter @qcode{"ErrorHandler"}, @var{errfunc} defines a function
+## to call in case @var{func} generates an error.  The form of the function is
 ##
 ## @example
 ## function [@dots{}] = errfunc (@var{se}, @dots{})
 ## @end example
 ##
 ## @noindent
 ## where there is an additional input argument to @var{errfunc} relative to
 ## @var{func}, given by @nospell{@var{se}}.  This is a structure with the
diff --git a/scripts/general/subsindex.m b/scripts/general/subsindex.m
--- a/scripts/general/subsindex.m
+++ b/scripts/general/subsindex.m
@@ -13,22 +13,23 @@
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {@var{idx} =} subsindex (@var{a})
-## Convert an object to an index vector.  When @var{a} is a class object
-## defined with a class constructor, then @code{subsindex} is the
-## overloading method that allows the conversion of this class object to
-## a valid indexing vector.  It is important to note that
-## @code{subsindex} must return a zero-based real integer vector of the
-## class @qcode{"double"}.  For example, if the class constructor
+## Convert an object to an index vector.
+##
+## When @var{a} is a class object defined with a class constructor, then
+## @code{subsindex} is the overloading method that allows the conversion of
+## this class object to a valid indexing vector.  It is important to note that
+## @code{subsindex} must return a zero-based real integer vector of the class
+## @qcode{"double"}.  For example, if the class constructor
 ##
 ## @example
 ## @group
 ## function b = myclass (a)
 ##   b = class (struct ("a", a), "myclass");
 ## endfunction
 ## @end group
 ## @end example
diff --git a/scripts/general/trapz.m b/scripts/general/trapz.m
--- a/scripts/general/trapz.m
+++ b/scripts/general/trapz.m
@@ -18,29 +18,31 @@
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {@var{q} =} trapz (@var{y})
 ## @deftypefnx {Function File} {@var{q} =} trapz (@var{x}, @var{y})
 ## @deftypefnx {Function File} {@var{q} =} trapz (@dots{}, @var{dim})
 ##
 ## Numerically evaluate the integral of points @var{y} using the trapezoidal
 ## method.
+##
 ## @w{@code{trapz (@var{y})}} computes the integral of @var{y} along the first
-## non-singleton dimension.  When the argument @var{x} is omitted an
-## equally spaced @var{x} vector with unit spacing (1) is assumed.
-## @code{trapz (@var{x}, @var{y})} evaluates the integral with respect
-## to the spacing in @var{x} and the values in @var{y}.  This is useful if
-## the points in @var{y} have been sampled unevenly.
+## non-singleton dimension.  When the argument @var{x} is omitted an equally
+## spaced @var{x} vector with unit spacing (1) is assumed.
+## @code{trapz (@var{x}, @var{y})} evaluates the integral with respect to the
+## spacing in @var{x} and the values in @var{y}.  This is useful if the points
+## in @var{y} have been sampled unevenly.
+##
 ## If the optional @var{dim} argument is given, operate along this dimension.
 ##
-## If @var{x} is not specified then unit spacing will be used.  To scale
-## the integral to the correct value you must multiply by the actual spacing
-## value (deltaX).  As an example, the integral of @math{x^3} over the range
-## [0, 1] is @math{x^4/4} or 0.25.  The following code uses @code{trapz} to
-## calculate the integral in three different ways.
+## Application Note: If @var{x} is not specified then unit spacing will be
+## used.  To scale the integral to the correct value you must multiply by the
+## actual spacing value (deltaX).  As an example, the integral of @math{x^3}
+## over the range [0, 1] is @math{x^4/4} or 0.25.  The following code uses
+## @code{trapz} to calculate the integral in three different ways.
 ##
 ## @example
 ## @group
 ## x = 0:0.1:1;
 ## y = x.^3;
 ## q = trapz (y)
 ##   @result{} q = 2.525   # No scaling
 ## q * 0.1
diff --git a/scripts/general/triplequad.m b/scripts/general/triplequad.m
--- a/scripts/general/triplequad.m
+++ b/scripts/general/triplequad.m
@@ -17,28 +17,29 @@
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {} triplequad (@var{f}, @var{xa}, @var{xb}, @var{ya}, @var{yb}, @var{za}, @var{zb})
 ## @deftypefnx {Function File} {} triplequad (@var{f}, @var{xa}, @var{xb}, @var{ya}, @var{yb}, @var{za}, @var{zb}, @var{tol})
 ## @deftypefnx {Function File} {} triplequad (@var{f}, @var{xa}, @var{xb}, @var{ya}, @var{yb}, @var{za}, @var{zb}, @var{tol}, @var{quadf})
 ## @deftypefnx {Function File} {} triplequad (@var{f}, @var{xa}, @var{xb}, @var{ya}, @var{yb}, @var{za}, @var{zb}, @var{tol}, @var{quadf}, @dots{})
 ## Numerically evaluate the triple integral of @var{f}.
-## @var{f} is a function handle, inline function, or string
-## containing the name of the function to evaluate.  The function @var{f} must
-## have the form @math{w = f(x,y,z)} where either @var{x} or @var{y} is a
-## vector and the remaining inputs are scalars.  It should return a vector of
-## the same length and orientation as @var{x} or @var{y}.
+##
+## @var{f} is a function handle, inline function, or string containing the name
+## of the function to evaluate.  The function @var{f} must have the form
+## @math{w = f(x,y,z)} where either @var{x} or @var{y} is a vector and the
+## remaining inputs are scalars.  It should return a vector of the same length
+## and orientation as @var{x} or @var{y}.
 ##
 ## @var{xa}, @var{ya}, @var{za} and @var{xb}, @var{yb}, @var{zb} are the lower
 ## and upper limits of integration for x, y, and z respectively.  The
 ## underlying integrator determines whether infinite bounds are accepted.
 ##
 ## The optional argument @var{tol} defines the absolute tolerance used to
-## integrate each sub-integral.  The default value is @math{1e^{-6}}.
+## integrate each sub-integral.  The default value is 1e-6.
 ##
 ## The optional argument @var{quadf} specifies which underlying integrator
 ## function to use.  Any choice but @code{quad} is available and the default
 ## is @code{quadcc}.
 ##
 ## Additional arguments, are passed directly to @var{f}.  To use the default
 ## value for @var{tol} or @var{quadf} one may pass @qcode{':'} or an empty
 ## matrix ([]).
diff --git a/scripts/geometry/delaunayn.m b/scripts/geometry/delaunayn.m
--- a/scripts/geometry/delaunayn.m
+++ b/scripts/geometry/delaunayn.m
@@ -15,23 +15,24 @@
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {@var{T} =} delaunayn (@var{pts})
 ## @deftypefnx {Function File} {@var{T} =} delaunayn (@var{pts}, @var{options})
 ## Compute the Delaunay triangulation for an N-dimensional set of points.
-## The Delaunay triangulation is a tessellation of the convex hull of a set
-## of points such that no N-sphere defined by the N-triangles contains
-## any other points from the set.
+##
+## The Delaunay triangulation is a tessellation of the convex hull of a set of
+## points such that no N-sphere defined by the N-triangles contains any other
+## points from the set.
 ##
 ## The input matrix @var{pts} of size [n, dim] contains n points in a space of
-## dimension dim.  The return matrix @var{T} has size [m, dim+1].  Each row
-## of @var{T} contains a set of indices back into the original set of points
+## dimension dim.  The return matrix @var{T} has size [m, dim+1].  Each row of
+## @var{T} contains a set of indices back into the original set of points
 ## @var{pts} which describes a simplex of dimension dim.  For example, a 2-D
 ## simplex is a triangle and 3-D simplex is a tetrahedron.
 ##
 ## An optional second argument, which must be a string or cell array of strings,
 ## contains options passed to the underlying qhull command.
 ## See the documentation for the Qhull library for details
 ## @url{http://www.qhull.org/html/qh-quick.htm#options}.
 ## The default options depend on the dimension of the input:
diff --git a/scripts/geometry/dsearch.m b/scripts/geometry/dsearch.m
--- a/scripts/geometry/dsearch.m
+++ b/scripts/geometry/dsearch.m
@@ -14,19 +14,20 @@
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {@var{idx} =} dsearch (@var{x}, @var{y}, @var{tri}, @var{xi}, @var{yi})
 ## @deftypefnx {Function File} {@var{idx} =} dsearch (@var{x}, @var{y}, @var{tri}, @var{xi}, @var{yi}, @var{s})
-## Return the index @var{idx} or the closest point in @code{@var{x}, @var{y}}
-## to the elements @code{[@var{xi}(:), @var{yi}(:)]}.  The variable @var{s} is
-## accepted for compatibility but is ignored.
+## Return the index @var{idx} of the closest point in @code{@var{x}, @var{y}}
+## to the elements @code{[@var{xi}(:), @var{yi}(:)]}.
+##
+## The variable @var{s} is accepted for compatibility but is ignored.
 ## @seealso{dsearchn, tsearch}
 ## @end deftypefn
 
 function idx = dsearch (x, y, tri, xi, yi, s)
   if (nargin < 5 || nargin > 6)
     print_usage ();
   endif
   idx = __dsearchn__ ([x(:), y(:)], [xi(:), yi(:)]);
diff --git a/scripts/geometry/dsearchn.m b/scripts/geometry/dsearchn.m
--- a/scripts/geometry/dsearchn.m
+++ b/scripts/geometry/dsearchn.m
@@ -16,21 +16,22 @@
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {@var{idx} =} dsearchn (@var{x}, @var{tri}, @var{xi})
 ## @deftypefnx {Function File} {@var{idx} =} dsearchn (@var{x}, @var{tri}, @var{xi}, @var{outval})
 ## @deftypefnx {Function File} {@var{idx} =} dsearchn (@var{x}, @var{xi})
 ## @deftypefnx {Function File} {[@var{idx}, @var{d}] =} dsearchn (@dots{})
-## Return the index @var{idx} or the closest point in @var{x} to the elements
-## @var{xi}.  If @var{outval} is supplied, then the values of @var{xi} that are
-## not contained within one of the simplices @var{tri} are set to
-## @var{outval}.  Generally, @var{tri} is returned from @code{delaunayn
-## (@var{x})}.
+## Return the index @var{idx} of the closest point in @var{x} to the elements
+## @var{xi}.
+##
+## If @var{outval} is supplied, then the values of @var{xi} that are not
+## contained within one of the simplices @var{tri} are set to @var{outval}.
+## Generally, @var{tri} is returned from @code{delaunayn (@var{x})}.
 ## @seealso{dsearch, tsearch}
 ## @end deftypefn
 
 function [idx, d] = dsearchn (x, tri, xi, outval)
   if (nargin < 2 || nargin > 4)
     print_usage ();
   endif
 
diff --git a/scripts/geometry/griddata.m b/scripts/geometry/griddata.m
--- a/scripts/geometry/griddata.m
+++ b/scripts/geometry/griddata.m
@@ -17,22 +17,23 @@
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {@var{zi} =} griddata (@var{x}, @var{y}, @var{z}, @var{xi}, @var{yi})
 ## @deftypefnx {Function File} {@var{zi} =} griddata (@var{x}, @var{y}, @var{z}, @var{xi}, @var{yi}, @var{method})
 ## @deftypefnx {Function File} {[@var{xi}, @var{yi}, @var{zi}] =} griddata (@dots{})
 ##
 ## Generate a regular mesh from irregular data using interpolation.
-## The function is defined by @code{@var{z} = f (@var{x}, @var{y})}.
-## Inputs @code{@var{x}, @var{y}, @var{z}} are vectors of the same length
-## or @code{@var{x}, @var{y}} are vectors and @code{@var{z}} is matrix.
 ##
-## The interpolation points are all @code{(@var{xi}, @var{yi})}.  If
-## @var{xi}, @var{yi} are vectors then they are made into a 2-D mesh.
+## The function is defined by @code{@var{z} = f (@var{x}, @var{y})}.  Inputs
+## @code{@var{x}, @var{y}, @var{z}} are vectors of the same length or
+## @code{@var{x}, @var{y}} are vectors and @code{@var{z}} is matrix.
+##
+## The interpolation points are all @code{(@var{xi}, @var{yi})}.  If @var{xi},
+## @var{yi} are vectors then they are made into a 2-D mesh.
 ##
 ## The interpolation method can be @qcode{"nearest"}, @qcode{"cubic"} or
 ## @qcode{"linear"}.  If method is omitted it defaults to @qcode{"linear"}.
 ## @seealso{griddata3, griddatan, delaunay}
 ## @end deftypefn
 
 ## Author:      Kai Habel <kai.habel@gmx.de>
 ## Adapted-by:  Alexander Barth <barth.alexander@gmail.com>
diff --git a/scripts/geometry/griddata3.m b/scripts/geometry/griddata3.m
--- a/scripts/geometry/griddata3.m
+++ b/scripts/geometry/griddata3.m
@@ -17,16 +17,17 @@
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {@var{vi} =} griddata3 (@var{x}, @var{y}, @var{z}, @var{v}, @var{xi}, @var{yi}, @var{zi})
 ## @deftypefnx {Function File} {@var{vi} =} griddata3 (@var{x}, @var{y}, @var{z}, @var{v}, @var{xi}, @var{yi}, @var{zi}, @var{method})
 ## @deftypefnx {Function File} {@var{vi} =} griddata3 (@var{x}, @var{y}, @var{z}, @var{v}, @var{xi}, @var{yi}, @var{zi}, @var{method}, @var{options})
 ##
 ## Generate a regular mesh from irregular data using interpolation.
+##
 ## The function is defined by @code{@var{v} = f (@var{x}, @var{y}, @var{z})}.
 ## The interpolation points are specified by @var{xi}, @var{yi}, @var{zi}.
 ##
 ## The interpolation method can be @qcode{"nearest"} or @qcode{"linear"}.
 ## If method is omitted it defaults to @qcode{"linear"}.
 ##
 ## The optional argument @var{options} is passed directly to Qhull when
 ## computing the Delaunay triangulation used for interpolation.  See
diff --git a/scripts/geometry/griddatan.m b/scripts/geometry/griddatan.m
--- a/scripts/geometry/griddatan.m
+++ b/scripts/geometry/griddatan.m
@@ -17,16 +17,17 @@
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {@var{yi} =} griddatan (@var{x}, @var{y}, @var{xi})
 ## @deftypefnx {Function File} {@var{yi} =} griddatan (@var{x}, @var{y}, @var{xi}, @var{method})
 ## @deftypefnx {Function File} {@var{yi} =} griddatan (@var{x}, @var{y}, @var{xi}, @var{method}, @var{options})
 ##
 ## Generate a regular mesh from irregular data using interpolation.
+##
 ## The function is defined by @code{@var{y} = f (@var{x})}.
 ## The interpolation points are all @var{xi}.
 ##
 ## The interpolation method can be @qcode{"nearest"} or @qcode{"linear"}.
 ## If method is omitted it defaults to @qcode{"linear"}.
 ##
 ## The optional argument @var{options} is passed directly to Qhull when
 ## computing the Delaunay triangulation used for interpolation.  See
diff --git a/scripts/geometry/inpolygon.m b/scripts/geometry/inpolygon.m
--- a/scripts/geometry/inpolygon.m
+++ b/scripts/geometry/inpolygon.m
@@ -20,19 +20,20 @@
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {@var{in} =} inpolygon (@var{x}, @var{y}, @var{xv}, @var{yv})
 ## @deftypefnx {Function File} {[@var{in}, @var{on}] =} inpolygon (@var{x}, @var{y}, @var{xv}, @var{yv})
 ##
 ## For a polygon defined by vertex points @code{(@var{xv}, @var{yv})}, return
 ## true if the points @code{(@var{x}, @var{y})} are inside (or on the boundary)
 ## of the polygon; Otherwise, return false.
 ##
-## The variables @var{x}, @var{y}, must have the same dimension.  The optional
-## output @var{on} returns true if the points are exactly on the polygon
-## edge, and false otherwise.
+## The input variables @var{x} and @var{y}, must have the same dimension.
+##
+## The optional output @var{on} returns true if the points are exactly on the
+## polygon edge, and false otherwise.
 ## @seealso{delaunay}
 ## @end deftypefn
 
 ## Author: Frederick (Rick) A Niles <niles@rickniles.com>
 ## Created: 14 November 2006
 
 ## Vectorized by Søren Hauberg <soren@hauberg.org>
 
diff --git a/scripts/geometry/rectint.m b/scripts/geometry/rectint.m
--- a/scripts/geometry/rectint.m
+++ b/scripts/geometry/rectint.m
@@ -13,33 +13,32 @@
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {@var{area} =} rectint (@var{a}, @var{b})
-## Compute area or volume of intersection of rectangles or ND boxes.
+## Compute area or volume of intersection of rectangles or N-D boxes.
+##
+## Compute the area of intersection of rectangles in @var{a} and rectangles in
+## @var{b}.  N-dimensional boxes are supported in which case the volume, or
+## hypervolume is computed according to the number of dimensions.
 ##
-## Compute the area of intersection of rectangles in @var{a} and
-## rectangles in @var{b}.  N dimensional boxes are supported in which
-## case the volume, or hypervolume is computed according to the number
-## of dimensions.
-##
-## 2 dimensional rectangles are defined as @code{[xpos ypos width height]}
-## where xpos and ypos are the position of the bottom left corner.
-## Higher dimensions are supported where the coordinates for the minimum
-## value of each dimension follow the length of the box in that dimension,
-## e.g., @code{[xpos ypos zpos kpos @dots{} width height depth k_length @dots{}]}.
+## 2-dimensional rectangles are defined as @code{[xpos ypos width height]}
+## where xpos and ypos are the position of the bottom left corner.  Higher
+## dimensions are supported where the coordinates for the minimum value of each
+## dimension follow the length of the box in that dimension, e.g.,
+## @code{[xpos ypos zpos kpos @dots{} width height depth k_length @dots{}]}.
 ##
 ## Each row of @var{a} and @var{b} define a rectangle, and if both define
-## multiple rectangles, then the output, @var{area}, is a matrix where
-## the i-th row corresponds to the i-th row of a and the j-th column
-## corresponds to the j-th row of b.
+## multiple rectangles, then the output, @var{area}, is a matrix where the i-th
+## row corresponds to the i-th row of a and the j-th column corresponds to the
+## j-th row of b.
 ##
 ## @seealso{polyarea}
 ## @end deftypefn
 
 ## Author: 2015 Carnë Draug <carandraug@octave.org>
 
 function dists = rectint (a, b)
 
diff --git a/scripts/geometry/tsearchn.m b/scripts/geometry/tsearchn.m
--- a/scripts/geometry/tsearchn.m
+++ b/scripts/geometry/tsearchn.m
@@ -12,20 +12,24 @@
 ## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
-## @deftypefn {Function File} {[@var{idx}, @var{p}] =} tsearchn (@var{x}, @var{t}, @var{xi})
-## Search for the enclosing Delaunay convex hull.  For @code{@var{t} =
-## delaunayn (@var{x})}, finds the index in @var{t} containing the
-## points @var{xi}.  For points outside the convex hull, @var{idx} is NaN.
+## @deftypefn  {Function File} {@var{idx} =} tsearchn (@var{x}, @var{t}, @var{xi})
+## @deftypefnx {Function File} {[@var{idx}, @var{p}] =} tsearchn (@var{x}, @var{t}, @var{xi})
+## Search for the enclosing Delaunay convex hull.
+##
+## For @code{@var{t} = delaunayn (@var{x})}, finds the index in @var{t}
+## containing the points @var{xi}.  For points outside the convex hull,
+## @var{idx} is NaN.
+##
 ## If requested @code{tsearchn} also returns the Barycentric coordinates @var{p}
 ## of the enclosing triangles.
 ## @seealso{delaunay, delaunayn}
 ## @end deftypefn
 
 function [idx, p] = tsearchn (x, t, xi)
   if (nargin != 3)
     print_usage ();
diff --git a/scripts/geometry/voronoi.m b/scripts/geometry/voronoi.m
--- a/scripts/geometry/voronoi.m
+++ b/scripts/geometry/voronoi.m
@@ -19,30 +19,33 @@
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {} voronoi (@var{x}, @var{y})
 ## @deftypefnx {Function File} {} voronoi (@var{x}, @var{y}, @var{options})
 ## @deftypefnx {Function File} {} voronoi (@dots{}, "linespec")
 ## @deftypefnx {Function File} {} voronoi (@var{hax}, @dots{})
 ## @deftypefnx {Function File} {@var{h} =} voronoi (@dots{})
 ## @deftypefnx {Function File} {[@var{vx}, @var{vy}] =} voronoi (@dots{})
 ## Plot the Voronoi diagram of points @code{(@var{x}, @var{y})}.
+##
 ## The Voronoi facets with points at infinity are not drawn.
 ##
-## If @qcode{"linespec"} is given it is used to set the color and line style
-## of the plot.  If an axis graphics handle @var{hax} is supplied then the
-## Voronoi diagram is drawn on the specified axis rather than in a new
-## figure.
-##
 ## The @var{options} argument, which must be a string or cell array of strings,
 ## contains options passed to the underlying qhull command.
 ## See the documentation for the Qhull library for details
 ## @url{http://www.qhull.org/html/qh-quick.htm#options}.
 ##
+## If @qcode{"linespec"} is given it is used to set the color and line style of
+## the plot.
+##
+## If an axis graphics handle @var{hax} is supplied then the Voronoi diagram is
+## drawn on the specified axis rather than in a new figure.
+##
 ## If a single output argument is requested then the Voronoi diagram will be
 ## plotted and a graphics handle @var{h} to the plot is returned.
+##
 ## [@var{vx}, @var{vy}] = voronoi (@dots{}) returns the Voronoi vertices
 ## instead of plotting the diagram.
 ##
 ## @example
 ## @group
 ## x = rand (10, 1);
 ## y = rand (size (x));
 ## h = convhull (x, y);
diff --git a/scripts/geometry/voronoin.m b/scripts/geometry/voronoin.m
--- a/scripts/geometry/voronoin.m
+++ b/scripts/geometry/voronoin.m
@@ -14,18 +14,21 @@
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {[@var{C}, @var{F}] =} voronoin (@var{pts})
 ## @deftypefnx {Function File} {[@var{C}, @var{F}] =} voronoin (@var{pts}, @var{options})
-## Compute N-dimensional Voronoi facets.  The input matrix @var{pts}
-## of size [n, dim] contains n points in a space of dimension dim.
+## Compute N-dimensional Voronoi facets.
+##
+## The input matrix @var{pts} of size [n, dim] contains n points in a space of
+## dimension dim.
+##
 ## @var{C} contains the points of the Voronoi facets.  The list @var{F}
 ## contains, for each facet, the indices of the Voronoi points.
 ##
 ## An optional second argument, which must be a string or cell array of strings,
 ## contains options passed to the underlying qhull command.
 ## See the documentation for the Qhull library for details
 ## @url{http://www.qhull.org/html/qh-quick.htm#options}.
 ##
diff --git a/scripts/gui/errordlg.m b/scripts/gui/errordlg.m
--- a/scripts/gui/errordlg.m
+++ b/scripts/gui/errordlg.m
@@ -17,20 +17,21 @@
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {@var{h} =} errordlg (@var{msg})
 ## @deftypefnx {Function File} {@var{h} =} errordlg (@var{msg}, @var{title})
 ## @deftypefnx {Function File} {@var{h} =} errordlg (@var{msg}, @var{title}, @var{createmode})
 ## Display @var{msg} using an error dialog box.
 ##
-## The message may have multiple lines separated by newline characters
-## ("\n"), or it may be a cellstr array with one element for each
-## line.  The optional input @var{title} (character string) can be used to
-## set the dialog caption.  The default title is @qcode{"Error Dialog"}.
+## The message may have multiple lines separated by newline characters ("\n"),
+## or it may be a cellstr array with one element for each line.
+##
+## The optional input @var{title} (character string) can be used to set the
+## dialog caption.  The default title is @qcode{"Error Dialog"}.
 ##
 ## The return value is always 1.
 ##
 ## Compatibility Note: The optional argument @var{createmode} is accepted for
 ## @sc{matlab} compatibility, but is not implemented.
 ##
 ## @seealso{helpdlg, inputdlg, listdlg, msgbox, questdlg, warndlg}
 ## @end deftypefn
diff --git a/scripts/gui/helpdlg.m b/scripts/gui/helpdlg.m
--- a/scripts/gui/helpdlg.m
+++ b/scripts/gui/helpdlg.m
@@ -18,17 +18,19 @@
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {@var{h} =} helpdlg (@var{msg})
 ## @deftypefnx {Function File} {@var{h} =} helpdlg (@var{msg}, @var{title})
 ## Display @var{msg} in a help dialog box.
 ##
 ## The message may have multiple lines separated by newline characters
 ## ("\n"), or it may be a cellstr array with one element for each
-## line.  The optional input @var{title} (character string) can be used to
+## line.
+##
+## The optional input @var{title} (character string) can be used to
 ## set the dialog caption.  The default title is @qcode{"Help Dialog"}.
 ##
 ## The return value is always 1.
 ## @seealso{errordlg, inputdlg, listdlg, msgbox, questdlg, warndlg}
 ## @end deftypefn
 
 function retval = helpdlg (msg, title = "Help Dialog")
 
diff --git a/scripts/gui/inputdlg.m b/scripts/gui/inputdlg.m
--- a/scripts/gui/inputdlg.m
+++ b/scripts/gui/inputdlg.m
@@ -16,49 +16,44 @@
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {@var{cstr} =} inputdlg (@var{prompt})
 ## @deftypefnx {Function File} {@var{cstr} =} inputdlg (@var{prompt}, @var{title})
 ## @deftypefnx {Function File} {@var{cstr} =} inputdlg (@var{prompt}, @var{title}, @var{rowscols})
 ## @deftypefnx {Function File} {@var{cstr} =} inputdlg (@var{prompt}, @var{title}, @var{rowscols}, @var{defaults})
-## Return user input from a multi-textfield dialog box in a cell array
-## of strings, or an empty cell array if the dialog is closed by the
-## Cancel button.
+## Return user input from a multi-textfield dialog box in a cell array of
+## strings, or an empty cell array if the dialog is closed by the Cancel
+## button.
 ##
 ## Inputs:
 ##
 ## @table @var
 ## @item prompt
 ## A cell array with strings labeling each text field.  This input is required.
 ##
 ## @item title
-## String to use for the caption of the dialog.  The default is @qcode{"Input
-## Dialog"}.
+## String to use for the caption of the dialog.  The default is
+## @qcode{"Input Dialog"}.
 ##
 ## @item rowscols
 ## Specifies the size of the text fields and can take three forms:
 ##
 ## @enumerate
-## @item a scalar value which defines the number of rows used for each
-## text field.
+## @item a scalar value which defines the number of rows used for each text field.
 ##
-## @item a vector which defines the individual number of rows
-## used for each text field.
+## @item a vector which defines the individual number of rows used for each text field.
 ##
-## @item a matrix which defines the individual number of rows and
-## columns used for each text field.  In the matrix each row describes
-## a single text field.  The first column specifies the number of input
-## rows to use and the second column specifies the text field width.
+## @item a matrix which defines the individual number of rows and columns used for each text field.  In the matrix each row describes a single text field.  The first column specifies the number of input rows to use and the second column specifies the text field width.
 ## @end enumerate
 ##
 ## @item defaults
-## A list of default values to place in each text fields.  It must be
-## a cell array of strings with the same size as @var{prompt}.
+## A list of default values to place in each text fields.  It must be a cell
+## array of strings with the same size as @var{prompt}.
 ## @end table
 ## @seealso{errordlg, helpdlg, listdlg, msgbox, questdlg, warndlg}
 ## @end deftypefn
 
 function cstr = inputdlg (prompt, title = "Input Dialog", varargin)
 
   if (nargin < 1 || nargin > 4)
     print_usage ();
diff --git a/scripts/gui/listdlg.m b/scripts/gui/listdlg.m
--- a/scripts/gui/listdlg.m
+++ b/scripts/gui/listdlg.m
@@ -13,50 +13,51 @@
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {[@var{sel}, @var{ok}] =} listdlg (@var{key}, @var{value}, @dots{})
-## Return user inputs from a list dialog box in a vector of
-## selection indices @var{sel} and a flag @var{ok} indicating how the
-## user closed the dialog box.  The value of @var{ok} is 1 if the user
-## closed the box with the OK button, otherwise it is 0 and @var{sel} is
-## empty.
+## Return user inputs from a list dialog box in a vector of selection indices
+## @var{sel} and a flag @var{ok} indicating how the user closed the dialog
+## box.
+##
+## The value of @var{ok} is 1 if the user closed the box with the OK button,
+## otherwise it is 0 and @var{sel} is empty.
 ##
 ## The indices in @var{sel} are 1-based.
 ##
 ## The arguments are specified in form of @var{key}, @var{value} pairs.
 ## The @qcode{"ListString"} argument pair must be specified.
 ##
 ## Valid @var{key} and @var{value} pairs are:
 ##
 ## @table @asis
 ## @item @qcode{"ListString"}
 ## a cell array of strings comprising the content of the list.
 ##
 ## @item @qcode{"SelectionMode"}
 ## can be either @qcode{"Single"} or @qcode{"Multiple"} (default).
 ##
 ## @item @qcode{"ListSize"}
-## a vector with two elements @var{width} and @var{height} defining
-## the size of the list field in pixels.  Default is [160 300].
+## a vector with two elements @var{width} and @var{height} defining the size
+## of the list field in pixels.  Default is [160 300].
 ##
 ## @item @qcode{"InitialValue"}
-## a vector containing 1-based indices of preselected elements.  Default
-## is 1 (first item).
+## a vector containing 1-based indices of preselected elements.
+## Default is 1 (first item).
 ##
 ## @item @qcode{"Name"}
 ## a string to be used as the dialog caption.  Default is "".
 ##
 ## @item @qcode{"PromptString"}
-## a cell array of strings to be displayed above the list field.  Default
-## is @{@}.
+## a cell array of strings to be displayed above the list field.
+## Default is @{@}.
 ##
 ## @item @qcode{"OKString"}
 ## a string used to label the OK button.  Default is @qcode{"OK"}.
 ##
 ## @item @qcode{"CancelString"}
 ## a string used to label the Cancel button.  Default is @qcode{"Cancel"}.
 ## @end table
 ##
diff --git a/scripts/gui/msgbox.m b/scripts/gui/msgbox.m
--- a/scripts/gui/msgbox.m
+++ b/scripts/gui/msgbox.m
@@ -18,30 +18,31 @@
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {@var{h} =} msgbox (@var{msg})
 ## @deftypefnx {Function File} {@var{h} =} msgbox (@var{msg}, @var{title})
 ## @deftypefnx {Function File} {@var{h} =} msgbox (@var{msg}, @var{title}, @var{icon})
 ## @deftypefnx {Function File} {@var{h} =} msgbox (@dots{}, @var{createmode})
 ## Display @var{msg} using a message dialog box.
 ##
-## The message may have multiple lines separated by newline characters
-## ("\n"), or it may be a cellstr array with one element for each
-## line.  The optional input @var{title} (character string) can be used to
-## decorate the dialog caption.
+## The message may have multiple lines separated by newline characters ("\n"),
+## or it may be a cellstr array with one element for each line.
+##
+## The optional input @var{title} (character string) can be used to decorate
+## the dialog caption.
 ##
 ## The optional argument @var{icon} selects a dialog icon.
-## It can be one of @qcode{"none"} (default), @qcode{"error"},
-## @qcode{"help"}, or @qcode{"warn"}.
+## It can be one of @qcode{"none"} (default), @qcode{"error"}, @qcode{"help"},
+## or @qcode{"warn"}.
 ##
 ## The return value is always 1.
 ##
 ## Compatibility Note: The optional argument @var{createmode} is accepted for
 ## @sc{matlab} compatibility, but is not implemented.
-#
+## 
 ## @seealso{errordlg, helpdlg, inputdlg, listdlg, questdlg, warndlg}
 ## @end deftypefn
 
 function retval = msgbox (msg, title = "", varargin)
 
   if (nargin < 1 || nargin > 4)
     print_usage ();
   endif
diff --git a/scripts/gui/private/__get_funcname__.m b/scripts/gui/private/__get_funcname__.m
--- a/scripts/gui/private/__get_funcname__.m
+++ b/scripts/gui/private/__get_funcname__.m
@@ -15,17 +15,17 @@
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {@var{funcname} =} __get_funcname__ (@var{basename})
 ## Internal function.
 ##
-## Build function name for the current graphics toolkit according to schema
+## Build function name for the current graphics toolkit according to the schema
 ## __[basename]_[graphics_toolkit]__, use fltk as default.
 ## @end deftypefn
 
 ## Author: Andreas Weber
 
 function funcname = __get_funcname__ (basename)
 
   if (! __octave_link_enabled__ ())
diff --git a/scripts/gui/private/__uiobject_split_args__.m b/scripts/gui/private/__uiobject_split_args__.m
--- a/scripts/gui/private/__uiobject_split_args__.m
+++ b/scripts/gui/private/__uiobject_split_args__.m
@@ -13,16 +13,17 @@
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {[@var{p}, @var{args}] =} __uiobject_split_args__ (@var{who}, @var{args}, @var{parent_type}, @var{use_gcf})
+## Undocumented internal function.
 ## @end deftypefn
 
 ## Author: goffioul
 
 function [parent, args] = __uiobject_split_args__ (who, in_args, parent_type = {}, use_gcf = 1)
 
   parent = [];
   args = {};
diff --git a/scripts/gui/questdlg.m b/scripts/gui/questdlg.m
--- a/scripts/gui/questdlg.m
+++ b/scripts/gui/questdlg.m
@@ -17,37 +17,36 @@
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {@var{btn} =} questdlg (@var{msg})
 ## @deftypefnx {Function File} {@var{btn} =} questdlg (@var{msg}, @var{title})
 ## @deftypefnx {Function File} {@var{btn} =} questdlg (@var{msg}, @var{title}, @var{default})
 ## @deftypefnx {Function File} {@var{btn} =} questdlg (@var{msg}, @var{title}, @var{btn1}, @var{btn2}, @var{default})
 ## @deftypefnx {Function File} {@var{btn} =} questdlg (@var{msg}, @var{title}, @var{btn1}, @var{btn2}, @var{btn3}, @var{default})
-## Display @var{msg} using a question dialog box and return the caption
-## of the activated button.
+## Display @var{msg} using a question dialog box and return the caption of
+## the activated button.
 ##
 ## The dialog may contain two or three buttons which will all close the dialog.
 ##
-## The message may have multiple lines separated by newline characters
-## ("\n"), or it may be a cellstr array with one element for each
-## line.  The optional @var{title} (character string) can be used to
-## decorate the dialog caption.
+## The message may have multiple lines separated by newline characters ("\n"),
+## or it may be a cellstr array with one element for each line.
+##
+## The optional @var{title} (character string) can be used to decorate the
+## dialog caption.
 ##
-## The string @var{default} identifies the default button,
-## which is activated by pressing the @key{ENTER} key.
-## It must match one of the strings given in @var{btn1}, @var{btn2}, or
-## @var{btn3}.
+## The string @var{default} identifies the default button, which is activated
+## by pressing the @key{ENTER} key.  It must match one of the strings given
+## in @var{btn1}, @var{btn2}, or @var{btn3}.
 ##
-## If only @var{msg} and @var{title} are specified, three buttons with
-## the default captions @qcode{"Yes"}, @qcode{"No"}, and @qcode{"Cancel"} are
-## used.
+## If only @var{msg} and @var{title} are specified, three buttons with the
+## default captions @qcode{"Yes"}, @qcode{"No"}, and @qcode{"Cancel"} are used.
 ##
-## If only two button captions, @var{btn1} and @var{btn2}, are specified
-## the dialog will have only these two buttons.
+## If only two button captions, @var{btn1} and @var{btn2}, are specified the
+## dialog will have only these two buttons.
 ##
 ## @seealso{errordlg, helpdlg, inputdlg, listdlg, warndlg}
 ## @end deftypefn
 
 function btn = questdlg (msg, title = "Question Dialog", varargin)
 
   if (nargin < 1 || nargin > 6)
     print_usage ();
diff --git a/scripts/gui/uigetdir.m b/scripts/gui/uigetdir.m
--- a/scripts/gui/uigetdir.m
+++ b/scripts/gui/uigetdir.m
@@ -18,16 +18,17 @@
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {@var{dirname} =} uigetdir ()
 ## @deftypefnx {Function File} {@var{dirname} =} uigetdir (@var{init_path})
 ## @deftypefnx {Function File} {@var{dirname} =} uigetdir (@var{init_path}, @var{dialog_name})
 ## Open a GUI dialog for selecting a directory.
 ##
 ## If @var{init_path} is not given the current working directory is used.
+##
 ## @var{dialog_name} may be used to customize the dialog title.
 ## @seealso{uigetfile, uiputfile}
 ## @end deftypefn
 
 ## Author: Kai Habel
 
 function dirname = uigetdir (init_path = pwd, dialog_name = "Select Directory to Open")
 
diff --git a/scripts/gui/uigetfile.m b/scripts/gui/uigetfile.m
--- a/scripts/gui/uigetfile.m
+++ b/scripts/gui/uigetfile.m
@@ -35,28 +35,29 @@
 ## If a filename is given then the file extension is extracted and used as
 ## filter.  In addition, the path is selected as current path and the filename
 ## is selected as default file.  Example: @code{uigetfile ("myfun.m")}
 ##
 ## @item A single file extension @qcode{"*.ext"}
 ## Example: @code{uigetfile ("*.ext")}
 ##
 ## @item A 2-column cell array
-## containing a file extension in the first column and a brief description
-## in the second column.
+## containing a file extension in the first column and a brief description in
+## the second column.
 ## Example: @code{uigetfile (@{"*.ext", "My Description";"*.xyz",
 ## "XYZ-Format"@})}
 ##
 ## The filter string can also contain a semicolon separated list of filter
 ## extensions.
 ## Example: @code{uigetfile (@{"*.gif;*.png;*.jpg", "Supported Picture
 ## Formats"@})}
 ## @end table
 ##
 ## @var{dialog_name} can be used to customize the dialog title.
+##
 ## If @var{default_file} is given then it will be selected in the GUI dialog.
 ## If, in addition, a path is given it is also used as current path.
 ##
 ## The screen position of the GUI dialog can be set using the
 ## @qcode{"Position"} key and a 2-element vector containing the pixel
 ## coordinates.  Two or more files can be selected when setting the
 ## @qcode{"MultiSelect"} key to @qcode{"on"}.  In that case @var{fname} is a
 ## cell array containing the files.
diff --git a/scripts/gui/uiwait.m b/scripts/gui/uiwait.m
--- a/scripts/gui/uiwait.m
+++ b/scripts/gui/uiwait.m
@@ -15,18 +15,18 @@
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {} uiwait
 ## @deftypefnx {Function File} {} uiwait (@var{h})
 ## @deftypefnx {Function File} {} uiwait (@var{h}, @var{timeout})
-## Suspend program execution until the figure with handle @var{h} is
-## deleted or @code{uiresume} is called.
+## Suspend program execution until the figure with handle @var{h} is deleted
+## or @code{uiresume} is called.
 ##
 ## When no figure handle is specified this function uses the current figure.
 ## If the figure handle is invalid or there is no current figure, this
 ## functions returns immediately.
 ##
 ## When specified, @var{timeout} defines the number of seconds to wait
 ## for the figure deletion or the @code{uiresume} call.  The timeout value
 ## must be at least 1.  If a smaller value is specified, a warning is issued
diff --git a/scripts/gui/waitbar.m b/scripts/gui/waitbar.m
--- a/scripts/gui/waitbar.m
+++ b/scripts/gui/waitbar.m
@@ -21,19 +21,22 @@
 ## @deftypefnx {Function File} {@var{h} =} waitbar (@var{frac}, @var{msg})
 ## @deftypefnx {Function File} {@var{h} =} waitbar (@dots{}, "FigureProperty", "Value", @dots{})
 ## @deftypefnx {Function File} {} waitbar (@var{frac})
 ## @deftypefnx {Function File} {} waitbar (@var{frac}, @var{hwbar})
 ## @deftypefnx {Function File} {} waitbar (@var{frac}, @var{hwbar}, @var{msg})
 ## Return a handle @var{h} to a new waitbar object.
 ##
 ## The waitbar is filled to fraction @var{frac} which must be in the range
-## [0, 1].  The optional message @var{msg} is centered and displayed above the
-## waitbar.  The appearance of the waitbar figure window can be configured by
-## passing property/value pairs to the function.
+## [0, 1].
+##
+## The optional message @var{msg} is centered and displayed above the waitbar.
+##
+## The appearance of the waitbar figure window can be configured by passing
+## property/value pairs to the function.
 ##
 ## When called with a single input the current waitbar, if it exists, is
 ## updated to the new value @var{frac}.  If there are multiple outstanding
 ## waitbars they can be updated individually by passing the handle @var{hwbar}
 ## of the specific waitbar to modify.
 ## @end deftypefn
 
 ## Author: jwe
diff --git a/scripts/gui/warndlg.m b/scripts/gui/warndlg.m
--- a/scripts/gui/warndlg.m
+++ b/scripts/gui/warndlg.m
@@ -17,20 +17,21 @@
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {@var{h} =} warndlg (@var{msg})
 ## @deftypefnx {Function File} {@var{h} =} warndlg (@var{msg}, @var{title})
 ## @deftypefnx {Function File} {@var{h} =} warndlg (@var{msg}, @var{title}, @var{createmode})
 ## Display @var{msg} using a warning dialog box.
 ##
-## The message may have multiple lines separated by newline characters
-## ("\n"), or it may be a cellstr array with one element for each
-## line.  The optional input @var{title} (character string) can be used to
-## set the dialog caption.  The default title is @qcode{"Warning Dialog"}.
+## The message may have multiple lines separated by newline characters ("\n"),
+## or it may be a cellstr array with one element for each line.
+##
+## The optional input @var{title} (character string) can be used to set the
+## dialog caption.  The default title is @qcode{"Warning Dialog"}.
 ##
 ## The return value is always 1.
 ##
 ## Compatibility Note: The optional argument @var{createmode} is accepted for
 ## @sc{matlab} compatibility, but is not implemented.
 ##
 ## @seealso{helpdlg, inputdlg, listdlg, questdlg}
 ## @end deftypefn
diff --git a/scripts/help/__unimplemented__.m b/scripts/help/__unimplemented__.m
--- a/scripts/help/__unimplemented__.m
+++ b/scripts/help/__unimplemented__.m
@@ -13,23 +13,24 @@
 ## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
-## @deftypefn {Function File} {@var{txt} =} unimplemented (@var{fcn})
+## @deftypefn {Function File} {@var{txt} =} __unimplemented__ (@var{fcn})
 ## Return specific help text for the unimplemented function @var{fcn}.
+##
 ## This is usually a suggestion for an existing compatible function to use in
 ## place of @var{fcn}.
 ##
-## This function is not called by users, but by the Octave interpreter when
-## it fails to recognize an input string as a valid function name.  See
+## This function is not called by users, but by the Octave interpreter when it
+## fails to recognize an input string as a valid function name.  See
 ## @code{missing_function_hook} for using a different handler for this event.
 ## @seealso{missing_function_hook}
 ## @end deftypefn
 
 
 function txt = __unimplemented__ (fcn)
 
   if (nargin != 1)
diff --git a/scripts/help/doc.m b/scripts/help/doc.m
--- a/scripts/help/doc.m
+++ b/scripts/help/doc.m
@@ -12,27 +12,28 @@
 ## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
-## @deftypefn {Command} {} doc @var{function_name}
-## Display documentation for the function @var{function_name}
-## directly from an online version of
-## the printed manual, using the GNU Info browser.  If invoked without
-## any arguments, the manual is shown from the beginning.
+## @deftypefn  {Command} {} doc @var{function_name}
+## @deftypefnx {Command} {} doc
+## Display documentation for the function @var{function_name} directly from an
+## online version of the printed manual, using the GNU Info browser.
 ##
-## For example, the command @kbd{doc rand} starts the GNU Info browser
-## at the @code{rand} node in the online version of the manual.
+## If invoked without an argument, the manual is shown from the beginning.
 ##
-## Once the GNU Info browser is running, help for using it is available
-## using the command @kbd{C-h}.
+## For example, the command @kbd{doc rand} starts the GNU Info browser at the
+## @code{rand} node in the online version of the manual.
+##
+## Once the GNU Info browser is running, help for using it is available using
+## the command @kbd{C-h}.
 ## @seealso{help}
 ## @end deftypefn
 
 ## Author: Soren Hauberg <soren@hauberg.org>
 ## Adapted-by: jwe
 
 function retval = doc (fname)
 
diff --git a/scripts/help/doc_cache_create.m b/scripts/help/doc_cache_create.m
--- a/scripts/help/doc_cache_create.m
+++ b/scripts/help/doc_cache_create.m
@@ -12,23 +12,27 @@
 ## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
-## @deftypefn {Function File} {} doc_cache_create (@var{out_file}, @var{directory})
-## Generate documentation caches for all functions in a given directory.
+## @deftypefn  {Function File} {} doc_cache_create (@var{out_file}, @var{directory})
+## @deftypefnx {Function File} {} doc_cache_create (@var{out_file})
+## @deftypefnx {Function File} {} doc_cache_create ()
+## Generate documentation cache for all functions in @var{directory}.
 ##
-## A documentation cache is generated for all functions in @var{directory}.
-## The
-## resulting cache is saved in the file @var{out_file}.
-## The cache is used to speed up @code{lookfor}.
+## A documentation cache is generated for all functions in @var{directory}
+## which may be a single string or a cell array of strings.  The cache is used
+## to speed up the function @code{lookfor}.
+##
+## The cache is saved in the file @var{out_file} which defaults to the value
+## @file{doc-cache} if not given.
 ##
 ## If no directory is given (or it is the empty matrix), a cache for built-in
 ## operators, etc. is generated.
 ##
 ## @seealso{doc_cache_file, lookfor, path}
 ## @end deftypefn
 
 function doc_cache_create (out_file = "doc-cache", directory = [])
diff --git a/scripts/help/get_first_help_sentence.m b/scripts/help/get_first_help_sentence.m
--- a/scripts/help/get_first_help_sentence.m
+++ b/scripts/help/get_first_help_sentence.m
@@ -12,24 +12,25 @@
 ## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
-## @deftypefn  {Function File} {[@var{text}, @var{status}] =} get_first_help_sentence (@var{name})
-## @deftypefnx {Function File} {[@var{text}, @var{status}] =} get_first_help_sentence (@var{name}, @var{max_len})
+## @deftypefn  {Function File} {@var{text} =} get_first_help_sentence (@var{name})
+## @deftypefnx {Function File} {@var{text} =} get_first_help_sentence (@var{name}, @var{max_len})
+## @deftypefnx {Function File} {[@var{text}, @var{status}] =} get_first_help_sentence (@dots{})
 ## Return the first sentence of a function's help text.
 ##
-## The first sentence is defined as the text after the function
-## declaration until either the first period (".") or the first appearance of
-## two consecutive newlines ("\n\n").  The text is truncated to a maximum
-## length of @var{max_len}, which defaults to 80.
+## The first sentence is defined as the text after the function declaration
+## until either the first period (".") or the first appearance of two
+## consecutive newlines ("\n\n").  The text is truncated to a maximum length of 
+## @var{max_len}, which defaults to 80.
 ##
 ## The optional output argument @var{status} returns the status reported by
 ## @code{makeinfo}.  If only one output argument is requested, and @var{status}
 ## is nonzero, a warning is displayed.
 ##
 ## As an example, the first sentence of this help text is
 ##
 ## @example
diff --git a/scripts/help/help.m b/scripts/help/help.m
--- a/scripts/help/help.m
+++ b/scripts/help/help.m
@@ -21,25 +21,25 @@
 ## @deftypefnx {Command} {} help @code{--list}
 ## @deftypefnx {Command} {} help @code{.}
 ## @deftypefnx {Command} {} help
 ## Display the help text for @var{name}.
 ##
 ## For example, the command @kbd{help help} prints a short message describing
 ## the @code{help} command.
 ##
-## Given the single argument @code{--list}, list all operators,
-## keywords, built-in functions, and loadable functions available
-## in the current session of Octave.
+## Given the single argument @code{--list}, list all operators, keywords,
+## built-in functions, and loadable functions available in the current session
+## of Octave.
 ##
-## Given the single argument @code{.}, list all operators available
-## in the current session of Octave.
+## Given the single argument @code{.}, list all operators available in the
+## current session of Octave.
 ##
-## If invoked without any arguments, @code{help} display instructions
-## on how to access help from the command line.
+## If invoked without any arguments, @code{help} display instructions on how to
+## access help from the command line.
 ##
 ## The help command can provide information about most operators, for example
 ## @code{help +}, but not the comma and semicolon characters which are used
 ## by the Octave interpreter as command separators.  For help on either of
 ## these type @kbd{help comma} or @kbd{help semicolon}.
 ## @seealso{doc, lookfor, which, info}
 ## @end deftypefn
 
diff --git a/scripts/help/lookfor.m b/scripts/help/lookfor.m
--- a/scripts/help/lookfor.m
+++ b/scripts/help/lookfor.m
@@ -16,36 +16,39 @@
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {Command} {} lookfor @var{str}
 ## @deftypefnx {Command} {} lookfor -all @var{str}
 ## @deftypefnx {Function File} {[@var{fcn}, @var{help1str}] =} lookfor (@var{str})
 ## @deftypefnx {Function File} {[@var{fcn}, @var{help1str}] =} lookfor ("-all", @var{str})
-## Search for the string @var{str} in all functions using the current function
-## search path.
+## Search for the string @var{str} in the documentation of all functions in the
+## current function search path.
 ##
-## By default, @code{lookfor} looks for @var{str} in the first sentence of the
-## help string for each function found.  The entire help text of each function
-## can be searched by using the @qcode{"-all"} argument.  All searches are case
-## insensitive.
+## By default, @code{lookfor} looks for @var{str} in just the first sentence of
+## the help string for each function found.  The entire help text of each
+## function can be searched by using the @qcode{"-all"} argument.  All searches 
+## are case insensitive.
 ##
 ## When called with no output arguments, @code{lookfor} prints the list of
 ## matching functions to the terminal.  Otherwise, the output argument
 ## @var{fcns} contains the function names and @var{help1str} contains the first
 ## sentence from the help string of each function.
 ##
 ## Programming Note: The ability of @code{lookfor} to correctly identify the
 ## first sentence of the help text is dependent on the format of the function's
 ## help.  All Octave core functions are correctly formatted, but the same can
 ## not be guaranteed for external packages and user-supplied functions.
 ## Therefore, the use of the @qcode{"-all"} argument may be necessary to find
 ## related functions that are not a part of Octave.
-## @seealso{help, doc, which}
+##
+## The speed of lookup is greatly enhanced by having a cached documentation
+## file.  See @code{doc_cache_create} for more information.
+## @seealso{help, doc, which, path, doc_cache_create}
 ## @end deftypefn
 
 function [fcn, help1str] = lookfor (str, arg2)
 
   if (strcmpi (str, "-all"))
     ## The difference between using '-all' and not is which part of the caches
     ## we search.  The cache is organized such that row
     ## 1) contains the function name
diff --git a/scripts/help/print_usage.m b/scripts/help/print_usage.m
--- a/scripts/help/print_usage.m
+++ b/scripts/help/print_usage.m
@@ -14,19 +14,20 @@
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {} print_usage ()
 ## @deftypefnx {Function File} {} print_usage (@var{name})
-## Print the usage message for a function.  When called with no input arguments
-## the @code{print_usage} function displays the usage message of the currently
-## executing function.
+## Print the usage message for the function @var{name}.
+##
+## When called with no input arguments the @code{print_usage} function displays
+## the usage message of the currently executing function.
 ## @seealso{help}
 ## @end deftypefn
 
 function print_usage (name)
   x = dbstack ();
   ## Handle input
   if (nargin == 0)
     ## Determine the name of the calling function
diff --git a/scripts/help/type.m b/scripts/help/type.m
--- a/scripts/help/type.m
+++ b/scripts/help/type.m
@@ -18,19 +18,19 @@
 
 ## -*- texinfo -*-
 ## @deftypefn  {Command} {} type @var{name} @dots{}
 ## @deftypefnx {Command} {} type -q @var{name} @dots{}
 ## @deftypefnx {Function File} {text =} type ("@var{name}", @dots{})
 ## Display the contents of @var{name} which may be a file, function (m-file),
 ## variable, operator, or keyword.
 ##
-## @code{type} normally prepends a header line describing the category
-## of @var{name} such as function or variable; The @option{-q} option
-## suppresses this behavior.
+## @code{type} normally prepends a header line describing the category of
+## @var{name} such as function or variable; The @option{-q} option suppresses
+## this behavior.
 ##
 ## If no output variable is used the contents are displayed on screen.
 ## Otherwise, a cell array of strings is returned, where each element
 ## corresponds to the contents of each requested function.
 ## @end deftypefn
 
 function text = type (varargin)
 
diff --git a/scripts/help/which.m b/scripts/help/which.m
--- a/scripts/help/which.m
+++ b/scripts/help/which.m
@@ -13,18 +13,20 @@
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Command} {} which name @dots{}
-## Display the type of each @var{name}.  If @var{name} is defined from a
-## function file, the full name of the file is also displayed.
+## Display the type of each @var{name}.
+##
+## If @var{name} is defined from a function file, the full name of the file is
+## also displayed.
 ## @seealso{help, lookfor}
 ## @end deftypefn
 
 function varargout = which (varargin)
 
   if (nargin > 0 && iscellstr (varargin))
     m = __which__ (varargin{:});
 
diff --git a/scripts/image/autumn.m b/scripts/image/autumn.m
--- a/scripts/image/autumn.m
+++ b/scripts/image/autumn.m
@@ -14,18 +14,19 @@
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {@var{map} =} autumn ()
 ## @deftypefnx {Function File} {@var{map} =} autumn (@var{n})
-## Create color colormap.  This colormap ranges from red through orange
-## to yellow.
+## Create color colormap.
+## This colormap ranges from red through orange to yellow.
+##
 ## The argument @var{n} must be a scalar.
 ## If unspecified, the length of the current colormap, or 64, is used.
 ## @seealso{colormap}
 ## @end deftypefn
 
 ## Author:  Kai Habel <kai.habel@gmx.de>
 
 ## PKG_ADD: colormap ("register", "autumn");
diff --git a/scripts/image/bone.m b/scripts/image/bone.m
--- a/scripts/image/bone.m
+++ b/scripts/image/bone.m
@@ -16,16 +16,17 @@
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {@var{map} =} bone ()
 ## @deftypefnx {Function File} {@var{map} =} bone (@var{n})
 ## Create color colormap.  This colormap varies from black to white with
 ## gray-blue shades.
+##
 ## The argument @var{n} must be a scalar.
 ## If unspecified, the length of the current colormap, or 64, is used.
 ## @seealso{colormap}
 ## @end deftypefn
 
 ## Author:  Kai Habel <kai.habel@gmx.de>
 
 ## PKG_ADD: colormap ("register", "bone");
diff --git a/scripts/image/brighten.m b/scripts/image/brighten.m
--- a/scripts/image/brighten.m
+++ b/scripts/image/brighten.m
@@ -12,26 +12,30 @@
 ## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
-## @deftypefn  {Function File} {@var{map_out} =} brighten (@var{map}, @var{beta})
-## @deftypefnx {Function File} {@var{map_out} =} brighten (@var{beta})
+## @deftypefn  {Function File} {@var{map_out} =} brighten (@var{beta})
+## @deftypefnx {Function File} {@var{map_out} =} brighten (@var{map}, @var{beta})
 ## @deftypefnx {Function File} {@var{map_out} =} brighten (@var{h}, @var{beta})
-## Brighten or darken a colormap.  If the @var{map} argument is omitted, the
-## function is applied to the current colormap.  The first argument can also be
-## a valid graphics handle @var{h}, in which case @code{brighten} is applied to
-## the colormap associated with this handle.
+## @deftypefnx {Function File} {} brighten (@dots{})
+## Brighten or darken a colormap.
+##
+## The argument @var{beta} must be a scalar between -1 and 1, where a negative
+## value darkens and a positive value brightens the colormap.
 ##
-## The argument @var{beta} must be a scalar between -1 and 1, where a
-## negative value darkens and a positive value brightens the colormap.
+## If the @var{map} argument is omitted, the function is applied to the current
+## colormap.
+##
+## The first argument can also be a valid graphics handle @var{h}, in which
+## case @code{brighten} is applied to the colormap associated with this handle.
 ##
 ## If no output is specified then the result is written to the current colormap.
 ## @seealso{colormap, contrast}
 ## @end deftypefn
 
 function rmap = brighten (arg1, beta)
 
   if (nargin < 1 || nargin > 2)
diff --git a/scripts/image/cmpermute.m b/scripts/image/cmpermute.m
--- a/scripts/image/cmpermute.m
+++ b/scripts/image/cmpermute.m
@@ -22,18 +22,18 @@
 ## @deftypefnx {Function File} {[@var{Y}, @var{newmap}] =} cmpermute (@var{X}, @var{map}, @var{index})
 ## Reorder colors in a colormap.
 ##
 ## When called with only two arguments, @code{cmpermute} randomly rearranges
 ## the colormap @var{map} and returns a new colormap @var{newmap}.  It also
 ## returns the indexed image @var{Y} which is the equivalent of the original
 ## input image @var{X} when displayed using @var{newmap}.
 ##
-## When called with an optional third argument the order of colors in the
-## new colormap is defined by @var{index}.
+## When called with an optional third argument the order of colors in the new
+## colormap is defined by @var{index}.
 ##
 ## @strong{Caution:} @code{index} should not have repeated elements or the
 ## function will fail.
 ##
 ## @end deftypefn
 
 ## Author:  Josep Mones i Teixidor <jmones@puntbarra.com>
 
diff --git a/scripts/image/colorcube.m b/scripts/image/colorcube.m
--- a/scripts/image/colorcube.m
+++ b/scripts/image/colorcube.m
@@ -15,20 +15,22 @@
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {@var{map} =} colorcube ()
 ## @deftypefnx {Function File} {@var{map} =} colorcube (@var{n})
 ## Create color colormap.  This colormap is composed of as many equally
-## spaced colors (not grays) in the RGB color space as possible.  If there
-## are not a perfect number @var{n} of regularly spaced colors then the
+## spaced colors (not grays) in the RGB color space as possible.
+##
+## If there are not a perfect number @var{n} of regularly spaced colors then the
 ## remaining entries in the colormap are gradients of pure red, green, blue,
 ## and gray.
+##
 ## The argument @var{n} must be a scalar.
 ## If unspecified, the length of the current colormap, or 64, is used.
 ## @seealso{colormap}
 ## @end deftypefn
 
 function map = colorcube (n)
 
   if (nargin == 0)
diff --git a/scripts/image/contrast.m b/scripts/image/contrast.m
--- a/scripts/image/contrast.m
+++ b/scripts/image/contrast.m
@@ -14,18 +14,19 @@
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {@var{cmap} =} contrast (@var{x})
 ## @deftypefnx {Function File} {@var{cmap} =} contrast (@var{x}, @var{n})
-## Return a gray colormap that maximizes the contrast in an image.  The
-## returned colormap will have @var{n} rows.  If @var{n} is not defined
+## Return a gray colormap that maximizes the contrast in an image.
+##
+## The returned colormap will have @var{n} rows.  If @var{n} is not defined
 ## then the size of the current colormap is used.
 ## @seealso{colormap, brighten}
 ## @end deftypefn
 
 function cmap = contrast (x, n)
 
   if (nargin == 1)
     n = rows (colormap ());
diff --git a/scripts/image/cool.m b/scripts/image/cool.m
--- a/scripts/image/cool.m
+++ b/scripts/image/cool.m
@@ -15,16 +15,17 @@
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {@var{map} =} cool ()
 ## @deftypefnx {Function File} {@var{map} =} cool (@var{n})
 ## Create color colormap.  The colormap varies from cyan to magenta.
+##
 ## The argument @var{n} must be a scalar.
 ## If unspecified, the length of the current colormap, or 64, is used.
 ## @seealso{colormap}
 ## @end deftypefn
 
 ## Author:  Kai Habel <kai.habel@gmx.de>
 
 ## PKG_ADD: colormap ("register", "cool");
diff --git a/scripts/image/copper.m b/scripts/image/copper.m
--- a/scripts/image/copper.m
+++ b/scripts/image/copper.m
@@ -14,18 +14,19 @@
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {@var{map} =} copper ()
 ## @deftypefnx {Function File} {@var{map} =} copper (@var{n})
-## Create color colormap.  This colormap varies from black to
-## a light copper tone.
+## Create color colormap.  This colormap varies from black to a light copper
+## tone.
+##
 ## The argument @var{n} must be a scalar.
 ## If unspecified, the length of the current colormap, or 64, is used.
 ## @seealso{colormap}
 ## @end deftypefn
 
 ## Author:  Kai Habel <kai.habel@gmx.de>
 
 ## PKG_ADD: colormap ("register", "copper");
diff --git a/scripts/image/cubehelix.m b/scripts/image/cubehelix.m
--- a/scripts/image/cubehelix.m
+++ b/scripts/image/cubehelix.m
@@ -26,22 +26,22 @@
 ## This is achieved by transversing a color cube from black to white through
 ## a helix, hence the name cubehelix, while taking into account the perceived
 ## brightness of each channel according to the NTSC specifications from 1953.
 ##
 ## @example
 ## rgbplot (cubehelix (256))
 ## @end example
 ##
-## The argument @var{n} must be a scalar and corresponds to the lenght of the
-## colormap.  Defaults to the length of the current colormap.
+## The argument @var{n} must be a scalar.
+## If unspecified, the length of the current colormap, or 64, is used.
 ##
-## Development of this colormap is described in @cite{Green, D. A., 2011,
-## "A @nospell{colour} scheme for the display of astronomical intensity images",
-## Bulletin of the Astronomical Society of India, 39, 289.}.
+## Reference: Green, D. A., 2011,
+## @cite{"A @nospell{colour} scheme for the display of astronomical intensity
+## images"}, Bulletin of the Astronomical Society of India, 39, 289.
 ##
 ## @seealso{colormap}
 ## @end deftypefn
 
 ## Author: Carnë Draug <carandraug@octave.org>
 
 ## PKG_ADD: colormap ("register", "cubehelix");
 ## PKG_DEL: colormap ("unregister", "cubehelix");
diff --git a/scripts/image/flag.m b/scripts/image/flag.m
--- a/scripts/image/flag.m
+++ b/scripts/image/flag.m
@@ -14,18 +14,19 @@
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {@var{map} =} flag ()
 ## @deftypefnx {Function File} {@var{map} =} flag (@var{n})
-## Create color colormap.  This colormap cycles through red, white, blue,
-## and black with each index change.
+## Create color colormap.  This colormap cycles through red, white, blue, and
+## black with each index change.
+##
 ## The argument @var{n} must be a scalar.
 ## If unspecified, the length of the current colormap, or 64, is used.
 ## @seealso{colormap}
 ## @end deftypefn
 
 ## Author:  Kai Habel <kai.habel@gmx.de>
 
 ## PKG_ADD: colormap ("register", "flag");
diff --git a/scripts/image/gray.m b/scripts/image/gray.m
--- a/scripts/image/gray.m
+++ b/scripts/image/gray.m
@@ -14,18 +14,19 @@
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {@var{map} =} gray ()
 ## @deftypefnx {Function File} {@var{map} =} gray (@var{n})
-## Create gray colormap.  This colormap varies from black to white with
-## shades of gray.
+## Create gray colormap.  This colormap varies from black to white with shades
+## of gray.
+##
 ## The argument @var{n} must be a scalar.
 ## If unspecified, the length of the current colormap, or 64, is used.
 ## @seealso{colormap}
 ## @end deftypefn
 
 ## Author: Tony Richardson <arichard@stark.cc.oh.us>
 ## Created: July 1994
 ## Adapted-By: jwe
diff --git a/scripts/image/gray2ind.m b/scripts/image/gray2ind.m
--- a/scripts/image/gray2ind.m
+++ b/scripts/image/gray2ind.m
@@ -20,21 +20,21 @@
 ## @deftypefn  {Function File} {@var{img} =} gray2ind (@var{I})
 ## @deftypefnx {Function File} {@var{img} =} gray2ind (@var{I}, @var{n})
 ## @deftypefnx {Function File} {@var{img} =} gray2ind (@var{BW})
 ## @deftypefnx {Function File} {@var{img} =} gray2ind (@var{BW}, @var{n})
 ## @deftypefnx {Function File} {[@var{img}, @var{map}] =} gray2ind (@dots{})
 ## Convert a grayscale or binary intensity image to an indexed image.
 ##
 ## The indexed image will consist of @var{n} different intensity values.
-## If not given @var{n} defaults to 64 for grayscale images or 2 for
-## binary black and white images.
+## If not given @var{n} defaults to 64 for grayscale images or 2 for binary
+## black and white images.
 ##
-## The output @var{img} is of class uint8 if @var{n} is less than or
-## equal to 256; Otherwise the return class is uint16.
+## The output @var{img} is of class uint8 if @var{n} is less than or equal to
+## 256; Otherwise the return class is uint16.
 ## @seealso{ind2gray, rgb2ind}
 ## @end deftypefn
 
 ## Author: Tony Richardson <arichard@stark.cc.oh.us>
 ## Created: July 1994
 ## Adapted-By: jwe
 
 function [I, map] = gray2ind (I, n = 64)
diff --git a/scripts/image/hot.m b/scripts/image/hot.m
--- a/scripts/image/hot.m
+++ b/scripts/image/hot.m
@@ -16,16 +16,17 @@
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {@var{map} =} hot ()
 ## @deftypefnx {Function File} {@var{map} =} hot (@var{n})
 ## Create color colormap.  This colormap ranges from black through dark red,
 ## red, orange, yellow, to white.
+##
 ## The argument @var{n} must be a scalar.
 ## If unspecified, the length of the current colormap, or 64, is used.
 ## @seealso{colormap}
 ## @end deftypefn
 
 ## Author:  Kai Habel <kai.habel@gmx.de>
 
 ## PKG_ADD: colormap ("register", "hot");
diff --git a/scripts/image/hsv.m b/scripts/image/hsv.m
--- a/scripts/image/hsv.m
+++ b/scripts/image/hsv.m
@@ -15,16 +15,17 @@
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} hsv (@var{n})
 ## Create color colormap.  This colormap begins with red, changes through
 ## yellow, green, cyan, blue, and magenta, before returning to red.
+##
 ## It is useful for displaying periodic functions.  The map is obtained by
 ## linearly varying the hue through all possible values while keeping constant
 ## maximum saturation and value.  The equivalent code is
 ## @code{hsv2rgb ([(0:N-1)'/N, ones(N,2)])}.
 ##
 ## The argument @var{n} must be a scalar.
 ## If unspecified, the length of the current colormap, or 64, is used.
 ## @seealso{colormap}
diff --git a/scripts/image/image.m b/scripts/image/image.m
--- a/scripts/image/image.m
+++ b/scripts/image/image.m
@@ -20,16 +20,17 @@
 ## @deftypefn  {Function File} {} image (@var{img})
 ## @deftypefnx {Function File} {} image (@var{x}, @var{y}, @var{img})
 ## @deftypefnx {Function File} {} image (@dots{}, "@var{prop}", @var{val}, @dots{})
 ## @deftypefnx {Function File} {} image ("@var{prop1}", @var{val1}, @dots{})
 ## @deftypefnx {Function File} {@var{h} =} image (@dots{})
 ## Display a matrix as an indexed color image.
 ##
 ## The elements of @var{img} are indices into the current colormap.
+##
 ## @var{x} and @var{y} are optional 2-element vectors, @w{@code{[min, max]}},
 ## which specify the range for the axis labels.  If a range is specified as
 ## @w{@code{[max, min]}} then the image will be reversed along that axis.  For
 ## convenience, @var{x} and @var{y} may be specified as N-element vectors
 ## matching the length of the data in @var{img}.  However, only the first and
 ## last elements will be used to determine the axis limits.
 ## @strong{Warning:} @var{x} and @var{y} are ignored when using gnuplot 4.0
 ## or earlier.
diff --git a/scripts/image/imagesc.m b/scripts/image/imagesc.m
--- a/scripts/image/imagesc.m
+++ b/scripts/image/imagesc.m
@@ -19,20 +19,21 @@
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {} imagesc (@var{img})
 ## @deftypefnx {Function File} {} imagesc (@var{x}, @var{y}, @var{img})
 ## @deftypefnx {Function File} {} imagesc (@dots{}, @var{climits})
 ## @deftypefnx {Function File} {} imagesc (@dots{}, "@var{prop}", @var{val}, @dots{})
 ## @deftypefnx {Function File} {} imagesc ("@var{prop1}", @var{val1}, @dots{})
 ## @deftypefnx {Function File} {} imagesc (@var{hax}, @dots{})
 ## @deftypefnx {Function File} {@var{h} =} imagesc (@dots{})
-## Display a scaled version of the matrix @var{img} as a color image.  The
-## colormap is scaled so that the entries of the matrix occupy the entire
-## colormap.  If @code{@var{climits} = [@var{lo}, @var{hi}]} is given, then that
-## range is set to the @qcode{"clim"} of the current axes.
+## Display a scaled version of the matrix @var{img} as a color image.
+##
+## The colormap is scaled so that the entries of the matrix occupy the entire
+## colormap.  If @code{@var{climits} = [@var{lo}, @var{hi}]} is given, then
+## that range is set to the @qcode{"clim"} of the current axes.
 ##
 ## The axis values corresponding to the matrix elements are specified in
 ## @var{x} and @var{y}, either as pairs giving the minimum and maximum
 ## values for the respective axes, or as values for each row and column
 ## of the matrix @var{img}.
 ##
 ## The optional return value @var{h} is a graphics handle to the image.
 ##
diff --git a/scripts/image/imfinfo.m b/scripts/image/imfinfo.m
--- a/scripts/image/imfinfo.m
+++ b/scripts/image/imfinfo.m
@@ -61,18 +61,18 @@
 ## @item YResolution
 ## Y resolution of the image.
 ##
 ## @item ResolutionUnit
 ## Units of image resolution.  Value is @qcode{"Inch"},
 ## @qcode{"Centimeter"}, or @qcode{"undefined"}.
 ##
 ## @item DelayTime
-## Time in 1/100ths of a second (0 to 65535) which must expire before displaying
-## the next image in an animated sequence.
+## Time in 1/100ths of a second (0 to 65535) which must expire before
+## displaying the next image in an animated sequence.
 ##
 ## @item LoopCount
 ## Number of iterations to loop an animation.
 ##
 ## @item ByteOrder
 ## Endian option for formats that support it.  Value is @qcode{"little-endian"},
 ## @qcode{"big-endian"}, or @qcode{"undefined"}.
 ##
@@ -115,18 +115,18 @@
 ## device used to generate the image.
 ##
 ## @item Make
 ## The manufacturer of the recording equipment.  This is the manufacture of the
 ## @nospell{DSC}, scanner, video digitizer or other equipment that generated
 ## the image.
 ##
 ## @item Model
-## The model name or model number of the recording equipment as mentioned
-## on the field @qcode{"Make"}.
+## The model name or model number of the recording equipment as mentioned on
+## the field @qcode{"Make"}.
 ##
 ## @item DateTime
 ## The date and time of image creation as defined by the Exif standard, i.e.,
 ## it is the date and time the file was changed.
 ##
 ## @item ImageDescription
 ## The title of the image as defined by the Exif standard.
 ##
diff --git a/scripts/image/imformats.m b/scripts/image/imformats.m
--- a/scripts/image/imformats.m
+++ b/scripts/image/imformats.m
@@ -52,19 +52,19 @@
 ##
 ## @item alpha
 ## Logical value if format supports alpha channel (transparency or matte).
 ##
 ## @item multipage
 ## Logical value if format supports multipage (multiple images per file).
 ## @end table
 ##
-## It is possible to change the way Octave manages file formats with the options
-## @qcode{"add"}, @qcode{"remove"}, and @qcode{"update"}, and supplying a
-## structure @var{format} with the required fields.  The option
+## It is possible to change the way Octave manages file formats with the
+## options @qcode{"add"}, @qcode{"remove"}, and @qcode{"update"}, and supplying
+## a structure @var{format} with the required fields.  The option
 ## @qcode{"factory"} resets the configuration to the default.
 ##
 ## This can be used by Octave packages to extend the image reading capabilities
 ## Octave, through use of the PKG_ADD and PKG_DEL commands.
 ##
 ## @seealso{imfinfo, imread, imwrite}
 ## @end deftypefn
 
diff --git a/scripts/image/imread.m b/scripts/image/imread.m
--- a/scripts/image/imread.m
+++ b/scripts/image/imread.m
@@ -24,64 +24,62 @@
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {[@var{img}, @var{map}, @var{alpha}] =} imread (@var{filename})
 ## @deftypefnx {Function File} {[@dots{}] =} imread (@var{url})
 ## @deftypefnx {Function File} {[@dots{}] =} imread (@dots{}, @var{ext})
 ## @deftypefnx {Function File} {[@dots{}] =} imread (@dots{}, @var{idx})
 ## @deftypefnx {Function File} {[@dots{}] =} imread (@dots{}, @var{param1}, @var{val1}, @dots{})
 ## Read images from various file formats.
 ##
-## Reads an image as a matrix from the file @var{filename}.  If there is
-## no file @var{filename}, and @var{ext} was specified, it will look for
-## a file with the extension @var{ext}.  Finally, it will attempt to download
-## and read an image from @var{url}.
+## Read an image as a matrix from the file @var{filename}.  If there is no file
+## @var{filename}, and @var{ext} was specified, it will look for a file with
+## the extension @var{ext}.  Finally, it will attempt to download and read an
+## image from @var{url}.
 ##
-## The size and class of the output depends on the
-## format of the image.  A color image is returned as an
-## @nospell{MxNx3} matrix.  Gray-level and black-and-white images are
-## of size @nospell{MxN}.  Multipage images will have an additional 4th
-## dimension.
+## The size and class of the output depends on the format of the image.  A
+## color image is returned as an @nospell{MxNx3} matrix.  Gray-level and
+## black-and-white images are of size @nospell{MxN}.  Multipage images will
+## have an additional 4th dimension.
 ##
-## The bit depth of the image determines the
-## class of the output: @qcode{"uint8"}, @qcode{"uint16"} or @qcode{"single"}
-## for gray and color, and @qcode{"logical"} for black and white.
-## Note that indexed images always return the indexes for a colormap,
-## independent if @var{map} is a requested output.  To obtain the actual
-## RGB image, use @code{ind2rgb}.  When more than one indexed image is being
-## read, @var{map} is obtained from the first.  In some rare cases this
-## may be incorrect and @code{imfinfo} can be used to obtain the colormap of
-## each image.
+## The bit depth of the image determines the class of the output:
+## @qcode{"uint8"}, @qcode{"uint16"} or @qcode{"single"} for gray and color,
+## and @qcode{"logical"} for black and white.  Note that indexed images always
+## return the indexes for a colormap, independent if @var{map} is a requested
+## output.  To obtain the actual RGB image, use @code{ind2rgb}.  When more
+## than one indexed image is being read, @var{map} is obtained from the
+## first.  In some rare cases this may be incorrect and @code{imfinfo} can be
+## used to obtain the colormap of each image.
 ##
 ## See the Octave manual for more information in representing images.
 ##
-## Some file formats, such as TIFF and GIF, are able to store multiple
-## images in a single file.  @var{idx} can be a scalar or vector
-## specifying the index of the images to read.  By default, Octave
-## will only read the first page.
+## Some file formats, such as TIFF and GIF, are able to store multiple images
+## in a single file.  @var{idx} can be a scalar or vector specifying the
+## index of the images to read.  By default, Octave will only read the first
+## page.
 ##
-## Depending on the file format, it is possible to configure the reading
-## of images with @var{param}, @var{val} pairs.  The following options
-## are supported:
+## Depending on the file format, it is possible to configure the reading of
+## images with @var{param}, @var{val} pairs.  The following options are
+## supported:
 ##
 ## @table @samp
 ## @item @qcode{"Frames"} or @qcode{"Index"}
 ## This is an alternative method to specify @var{idx}.  When specifying it
 ## in this way, its value can also be the string @qcode{"all"}.
 ##
 ## @item @qcode{"Info"}
 ## This option exists for @sc{matlab} compatibility and has no effect.  For
-## maximum performance while reading multiple images from a single file,
-## use the Index option.
+## maximum performance while reading multiple images from a single file, use
+## the Index option.
 ##
 ## @item @qcode{"PixelRegion"}
-## Controls the image region that is read.  Takes as value a cell array
-## with two arrays of 3 elements @code{@{@var{rows} @var{cols}@}}.  The
-## elements in the array are the start, increment and end pixel to be
-## read.  If the increment value is omitted, defaults to 1.  For example,
-## the following are all equivalent:
+## Controls the image region that is read.  Takes as value a cell array with
+## two arrays of 3 elements @code{@{@var{rows} @var{cols}@}}.  The elements
+## in the array are the start, increment and end pixel to be read.  If the
+## increment value is omitted, defaults to 1.  For example, the following are
+## all equivalent:
 ##
 ## @example
 ## @group
 ## imread (filename, "PixelRegion", @{[200 600] [300 700]@});
 ## imread (filename, "PixelRegion", @{[200 1 600] [300 1 700]@});
 ## imread (filename)(200:600, 300:700);
 ## @end group
 ## @end example
diff --git a/scripts/image/imshow.m b/scripts/image/imshow.m
--- a/scripts/image/imshow.m
+++ b/scripts/image/imshow.m
@@ -22,49 +22,45 @@
 ## @deftypefnx {Function File} {} imshow (@var{im}, @var{map})
 ## @deftypefnx {Function File} {} imshow (@var{rgb}, @dots{})
 ## @deftypefnx {Function File} {} imshow (@var{filename})
 ## @deftypefnx {Function File} {} imshow (@dots{}, @var{string_param1}, @var{value1}, @dots{})
 ## @deftypefnx {Function File} {@var{h} =} imshow (@dots{})
 ## Display the image @var{im}, where @var{im} can be a 2-dimensional
 ## (grayscale image) or a 3-dimensional (RGB image) matrix.
 ##
-## If @var{limits} is a 2-element vector @code{[@var{low}, @var{high}]},
-## the image is shown using a display range between @var{low} and
-## @var{high}.  If an empty matrix is passed for @var{limits}, the
-## display range is computed as the range between the minimal and the
-## maximal value in the image.
+## If @var{limits} is a 2-element vector @code{[@var{low}, @var{high}]}, the
+## image is shown using a display range between @var{low} and @var{high}.  If
+## an empty matrix is passed for @var{limits}, the display range is computed
+## as the range between the minimal and the maximal value in the image.
 ##
 ## If @var{map} is a valid color map, the image will be shown as an indexed
 ## image using the supplied color map.
 ##
-## If a file name is given instead of an image, the file will be read and
-## shown.
+## If a file name is given instead of an image, the file will be read and shown.
 ##
-## If given, the parameter @var{string_param1} has value
-## @var{value1}.  @var{string_param1} can be any of the following:
+## If given, the parameter @var{string_param1} has value @var{value1}.  
+## @var{string_param1} can be any of the following:
 ##
 ## @table @asis
 ## @item @qcode{"displayrange"}
 ## @var{value1} is the display range as described above.
 ##
 ## @item @qcode{"colormap"}
 ## @var{value1} is the colormap to use when displaying an indexed image.
 ##
 ## @item @qcode{"xdata"}
 ## If @var{value1} is a two element vector, it must contain horizontal axis
-## limits in the form [xmin xmax]; Otherwise @var{value1} must be a
-## vector and only the first and last elements will be used for xmin and
-## xmax respectively.
+## limits in the form [xmin xmax]; Otherwise @var{value1} must be a vector and
+## only the first and last elements will be used for xmin and xmax respectively.
 ##
 ## @item @qcode{"ydata"}
 ## If @var{value1} is a two element vector, it must contain vertical axis
-## limits in the form [ymin ymax]; Otherwise @var{value1} must be a
-## vector and only the first and last elements will be used for ymin and
-## ymax respectively.
+## limits in the form [ymin ymax]; Otherwise @var{value1} must be a vector and
+## only the first and last elements will be used for ymin and ymax respectively.
 ##
 ## @end table
 ##
 ## The optional return value @var{h} is a graphics handle to the image.
 ## @seealso{image, imagesc, colormap, gray2ind, rgb2ind}
 ## @end deftypefn
 
 ## Author: Stefan van der Walt  <stefan@sun.ac.za>
diff --git a/scripts/image/imwrite.m b/scripts/image/imwrite.m
--- a/scripts/image/imwrite.m
+++ b/scripts/image/imwrite.m
@@ -30,66 +30,65 @@
 ## reserved for color space, and multiple pages respectively.  If it's an
 ## indexed image, the colormap @var{map} must also be specified.
 ##
 ## If @var{ext} is not supplied, the file extension of @var{filename} is used
 ## to determine the format.  The actual supported formats are dependent on
 ## options made during the build of Octave.  Use @code{imformats} to check
 ## the support of the different image formats.
 ##
-## Depending on the file format, it is possible to configure the writing
-## of images with @var{param}, @var{val} pairs.  The following options
-## are supported:
+## Depending on the file format, it is possible to configure the writing of
+## images with @var{param}, @var{val} pairs.  The following options are
+## supported:
 ##
 ## @table @samp
 ## @item Alpha
 ## Alpha (transparency) channel for the image.  This must be a matrix with
 ## same class, and number of rows and columns of @var{img}.  In case of a
 ## multipage image, the size of the 4th dimension must also match and the third
-## dimension must be a singleton.  By default, image will be completely
-## opaque.
+## dimension must be a singleton.  By default, image will be completely opaque.
 ##
 ## @item DelayTime
 ## For formats that accept animations (such as GIF), controls for how long a
 ## frame is displayed until it moves to the next one.  The value must be scalar
 ## (which will applied to all frames in @var{img}), or a vector of length
 ## equal to the number of frames in @var{im}.  The value is in seconds, must
 ## be between 0 and 655.35, and defaults to 0.5.
 ##
 ## @item DisposalMethod
-## For formats that accept animations (such as GIF), controls what happens
-## to a frame before drawing the next one.  Its value can be one of the
+## For formats that accept animations (such as GIF), controls what happens to
+## a frame before drawing the next one.  Its value can be one of the
 ## following strings: "doNotSpecify" (default); "leaveInPlace"; "restoreBG";
 ## and "restorePrevious", or a cell array of those string with length equal
 ## to the number of frames in @var{img}.
 ##
 ## @item LoopCount
 ## For formats that accept animations (such as GIF), controls how many times
 ## the sequence is repeated.  A value of Inf means an infinite loop (default),
 ## a value of 0 or 1 that the sequence is played only once (loops zero times),
 ## while a value of 2 or above loops that number of times (looping twice means
 ## it plays the complete sequence 3 times).  This option is ignored when there
 ## is only a single image at the end of writing the file.
 ##
 ## @item Quality
-## Set the quality of the compression.  The value should be an
-## integer between 0 and 100, with larger values indicating higher visual
-## quality and lower compression.  Defaults to 75.
+## Set the quality of the compression.  The value should be an integer
+## between 0 and 100, with larger values indicating higher visual quality and
+## lower compression.  Defaults to 75.
 ##
 ## @item WriteMode
-## Some file formats, such as TIFF and GIF, are able to store multiple
-## images in a single file.  This option specifies if @var{img} should be
-## appended to the file (if it exists) or if a new file should be created
-## for it (possibly overwriting an existing file).  The value should be
-## the string @qcode{"Overwrite"} (default), or @qcode{"Append"}.
+## Some file formats, such as TIFF and GIF, are able to store multiple images
+## in a single file.  This option specifies if @var{img} should be appended
+## to the file (if it exists) or if a new file should be created for it
+## (possibly overwriting an existing file).  The value should be the string
+## @qcode{"Overwrite"} (default), or @qcode{"Append"}.
 ##
 ## Despite this option, the most efficient method of writing a multipage
-## image is to pass a 4 dimensional @var{img} to @code{imwrite}, the
-## same matrix that could be expected when using @code{imread} with the
-## option @qcode{"Index"} set to @qcode{"all"}.
+## image is to pass a 4 dimensional @var{img} to @code{imwrite}, the same
+## matrix that could be expected when using @code{imread} with the option
+## @qcode{"Index"} set to @qcode{"all"}.
 ##
 ## @end table
 ##
 ## @seealso{imread, imfinfo, imformats}
 ## @end deftypefn
 
 function imwrite (varargin)
   if (nargin < 2)
diff --git a/scripts/image/iscolormap.m b/scripts/image/iscolormap.m
--- a/scripts/image/iscolormap.m
+++ b/scripts/image/iscolormap.m
@@ -15,20 +15,19 @@
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} iscolormap (@var{cmap})
 ## Return true if @var{cmap} is a colormap.
 ##
-## A colormap is a real matrix with @var{n} rows and 3 columns.
-## Each row represents a single color.  The columns contain red, green,
-## and blue intensities respectively.  All entries must be between 0 and 1
-## inclusive.
+## A colormap is a real matrix with @var{n} rows and 3 columns.  Each row
+## represents a single color.  The columns contain red, green, and blue
+## intensities respectively.  All entries must be between 0 and 1 inclusive.
 ## @seealso{colormap, rgbplot}
 ## @end deftypefn
 
 ## Author: Carnë Draug <carandraug+dev@gmail.com>
 
 function retval = iscolormap (cmap)
 
   if (nargin != 1)
diff --git a/scripts/image/jet.m b/scripts/image/jet.m
--- a/scripts/image/jet.m
+++ b/scripts/image/jet.m
@@ -16,16 +16,17 @@
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {@var{map} =} jet ()
 ## @deftypefnx {Function File} {@var{map} =} jet (@var{n})
 ## Create color colormap.  This colormap ranges from dark blue through blue,
 ## cyan, green, yellow, red, to dark red.
+##
 ## The argument @var{n} must be a scalar.
 ## If unspecified, the length of the current colormap, or 64, is used.
 ## @seealso{colormap}
 ## @end deftypefn
 
 ## Author:  Kai Habel <kai.habel@gmx.de>
 
 ## PKG_ADD: colormap ("register", "jet");
diff --git a/scripts/image/lines.m b/scripts/image/lines.m
--- a/scripts/image/lines.m
+++ b/scripts/image/lines.m
@@ -17,16 +17,17 @@
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {@var{map} =} lines ()
 ## @deftypefnx {Function File} {@var{map} =} lines (@var{n})
 ## Create color colormap.  This colormap is composed of the list of colors
 ## in the current axes @qcode{"ColorOrder"} property.  The default is blue,
 ## green, red, cyan, pink, yellow, and gray.
+##
 ## The argument @var{n} must be a scalar.
 ## If unspecified, the length of the current colormap, or 64, is used.
 ## @seealso{colormap}
 ## @end deftypefn
 
 ## PKG_ADD: colormap ("register", "lines");
 ## PKG_DEL: colormap ("unregister", "lines");
 
diff --git a/scripts/image/module.mk b/scripts/image/module.mk
--- a/scripts/image/module.mk
+++ b/scripts/image/module.mk
@@ -16,17 +16,16 @@ image_FCN_FILES = \
   image/cmunique.m \
   image/colorcube.m \
   image/colormap.m \
   image/contrast.m \
   image/cool.m \
   image/copper.m \
   image/cubehelix.m \
   image/flag.m \
-  image/gmap40.m \
   image/gray.m \
   image/gray2ind.m \
   image/hot.m \
   image/hsv.m \
   image/hsv2rgb.m \
   image/iscolormap.m \
   image/image.m \
   image/imagesc.m \
diff --git a/scripts/image/ntsc2rgb.m b/scripts/image/ntsc2rgb.m
--- a/scripts/image/ntsc2rgb.m
+++ b/scripts/image/ntsc2rgb.m
@@ -18,25 +18,25 @@
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {@var{rgb_map} =} ntsc2rgb (@var{yiq_map})
 ## @deftypefnx {Function File} {@var{rgb_img} =} ntsc2rgb (@var{yiq_img})
 ## Transform a colormap or image from luminance-chrominance (NTSC) space to
 ## red-green-blue (RGB) color space.
 ##
 ## Implementation Note:
-## The conversion matrix is chosen to be the inverse of the
-## matrix used for rgb2ntsc such that
+## The conversion matrix is chosen to be the inverse of the matrix used for
+## rgb2ntsc such that
 ##
 ## @example
 ## x == ntsc2rgb (rgb2ntsc (x))
 ## @end example
 ##
-## @sc{matlab} uses a slightly different matrix where rounding
-## means the equality above does not hold.
+## @sc{matlab} uses a slightly different matrix where rounding means the
+## equality above does not hold.
 ## @seealso{rgb2ntsc, hsv2rgb, ind2rgb}
 ## @end deftypefn
 
 ## Author: Tony Richardson <arichard@stark.cc.oh.us>
 ## Created: July 1994
 ## Adapted-By: jwe
 
 function rgb = ntsc2rgb (yiq)
diff --git a/scripts/image/ocean.m b/scripts/image/ocean.m
--- a/scripts/image/ocean.m
+++ b/scripts/image/ocean.m
@@ -16,16 +16,17 @@
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {@var{map} =} ocean ()
 ## @deftypefnx {Function File} {@var{map} =} ocean (@var{n})
 ## Create color colormap.  This colormap varies from black to white with shades
 ## of blue.
+##
 ## The argument @var{n} must be a scalar.
 ## If unspecified, the length of the current colormap, or 64, is used.
 ## @seealso{colormap}
 ## @end deftypefn
 
 ## Author: Tony Richardson <arichard@stark.cc.oh.us>
 ## Created: July 1994
 ## Adapted-By: jwe
diff --git a/scripts/image/pink.m b/scripts/image/pink.m
--- a/scripts/image/pink.m
+++ b/scripts/image/pink.m
@@ -15,17 +15,20 @@
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {@var{map} =} pink ()
 ## @deftypefnx {Function File} {@var{map} =} pink (@var{n})
 ## Create color colormap.  This colormap varies from black to white with
-## shades of gray-pink.  It gives a sepia tone when used on grayscale images.
+## shades of gray-pink.
+##
+## This colormap gives a sepia tone when used on grayscale images.
+##
 ## The argument @var{n} must be a scalar.
 ## If unspecified, the length of the current colormap, or 64, is used.
 ## @seealso{colormap}
 ## @end deftypefn
 
 ## Author:  Kai Habel <kai.habel@gmx.de>
 
 ## PKG_ADD: colormap ("register", "pink");
diff --git a/scripts/image/prism.m b/scripts/image/prism.m
--- a/scripts/image/prism.m
+++ b/scripts/image/prism.m
@@ -16,16 +16,17 @@
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {@var{map} =} prism ()
 ## @deftypefnx {Function File} {@var{map} =} prism (@var{n})
 ## Create color colormap.  This colormap cycles through red, orange, yellow,
 ## green, blue and violet with each index change.
+##
 ## The argument @var{n} must be a scalar.
 ## If unspecified, the length of the current colormap, or 64, is used.
 ## @seealso{colormap}
 ## @end deftypefn
 
 ## Author:  Kai Habel <kai.habel@gmx.de>
 
 ## PKG_ADD: colormap ("register", "prism");
diff --git a/scripts/image/rainbow.m b/scripts/image/rainbow.m
--- a/scripts/image/rainbow.m
+++ b/scripts/image/rainbow.m
@@ -16,16 +16,17 @@
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {@var{map} =} rainbow ()
 ## @deftypefnx {Function File} {@var{map} =} rainbow (@var{n})
 ## Create color colormap.  This colormap ranges from red through orange,
 ## yellow, green, blue, to violet.
+##
 ## The argument @var{n} must be a scalar.
 ## If unspecified, the length of the current colormap, or 64, is used.
 ## @seealso{colormap}
 ## @end deftypefn
 
 ## Author:  Kai Habel <kai.habel@gmx.de>
 
 ## this colormap is not part of matlab, it is like the prism
diff --git a/scripts/image/rgb2ntsc.m b/scripts/image/rgb2ntsc.m
--- a/scripts/image/rgb2ntsc.m
+++ b/scripts/image/rgb2ntsc.m
@@ -31,18 +31,18 @@
 ## /Y\     0.299  0.587  0.114  /R\
 ## |I|  =  0.596 -0.274 -0.322  |G|
 ## \Q/     0.211 -0.523  0.312  \B/
 ## @end group
 ## @end example
 ##
 ## @noindent
 ## as documented in @url{http://en.wikipedia.org/wiki/YIQ} and truncated to 3
-## significant figures.  Note: The FCC version of NTSC uses only 2
-## significant digits and is slightly different.
+## significant figures.  Note: The FCC version of NTSC uses only 2 significant
+## digits and is slightly different.
 ## @seealso{ntsc2rgb, rgb2hsv, rgb2ind}
 ## @end deftypefn
 
 ## Author: Tony Richardson <arichard@stark.cc.oh.us>
 ## Created: July 1994
 ## Adapted-By: jwe
 
 function yiq = rgb2ntsc (rgb)
diff --git a/scripts/image/spinmap.m b/scripts/image/spinmap.m
--- a/scripts/image/spinmap.m
+++ b/scripts/image/spinmap.m
@@ -17,21 +17,22 @@
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {} spinmap ()
 ## @deftypefnx {Function File} {} spinmap (@var{t})
 ## @deftypefnx {Function File} {} spinmap (@var{t}, @var{inc})
 ## @deftypefnx {Function File} {} spinmap ("inf")
 ## Cycle the colormap for @var{t} seconds with a color increment of @var{inc}.
+##
 ## Both parameters are optional.  The default cycle time is 5 seconds and the
 ## default increment is 2.  If the option @qcode{"inf"} is given then cycle
 ## continuously until @kbd{Control-C} is pressed.
 ##
-## When rotating the original color 1 becomes color 2, color 2 becomes
+## When rotating, the original color 1 becomes color 2, color 2 becomes
 ## color 3, etc.  A positive or negative increment is allowed and a higher
 ## value of @var{inc} will cause faster cycling through the colormap.
 ## @seealso{colormap}
 ## @end deftypefn
 
 ## Author: Kai Habel <kai.habel at gmx.de>
 
 function spinmap (t = 5, inc = 2)
diff --git a/scripts/image/spring.m b/scripts/image/spring.m
--- a/scripts/image/spring.m
+++ b/scripts/image/spring.m
@@ -15,16 +15,17 @@
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {@var{map} =} spring ()
 ## @deftypefnx {Function File} {@var{map} =} spring (@var{n})
 ## Create color colormap.  This colormap varies from magenta to yellow.
+##
 ## The argument @var{n} must be a scalar.
 ## If unspecified, the length of the current colormap, or 64, is used.
 ## @seealso{colormap}
 ## @end deftypefn
 
 ## Author:  Kai Habel <kai.habel@gmx.de>
 
 ## PKG_ADD: colormap ("register", "spring");
diff --git a/scripts/image/summer.m b/scripts/image/summer.m
--- a/scripts/image/summer.m
+++ b/scripts/image/summer.m
@@ -15,16 +15,17 @@
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {@var{map} =} summer ()
 ## @deftypefnx {Function File} {@var{map} =} summer (@var{n})
 ## Create color colormap.  This colormap varies from green to yellow.
+##
 ## The argument @var{n} must be a scalar.
 ## If unspecified, the length of the current colormap, or 64, is used.
 ## @seealso{colormap}
 ## @end deftypefn
 
 ## Author:  Kai Habel <kai.habel@gmx.de>
 ## Date:  06/03/2000
 
diff --git a/scripts/image/white.m b/scripts/image/white.m
--- a/scripts/image/white.m
+++ b/scripts/image/white.m
@@ -15,18 +15,19 @@
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {@var{map} =} white ()
 ## @deftypefnx {Function File} {@var{map} =} white (@var{n})
 ## Create color colormap.  This colormap is completely white.
-## The argument @var{n} should be a scalar.  If it
-## is omitted, the length of the current colormap or 64 is assumed.
+##
+## The argument @var{n} must be a scalar.
+## If unspecified, the length of the current colormap, or 64, is used.
 ## @seealso{colormap}
 ## @end deftypefn
 
 ## Author:  Kai Habel <kai.habel@gmx.de>
 
 ## PKG_ADD: colormap ("register", "white");
 ## PKG_DEL: colormap ("unregister", "white");
 
diff --git a/scripts/image/winter.m b/scripts/image/winter.m
--- a/scripts/image/winter.m
+++ b/scripts/image/winter.m
@@ -15,16 +15,17 @@
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {@var{map} =} winter ()
 ## @deftypefnx {Function File} {@var{map} =} winter (@var{n})
 ## Create color colormap.  This colormap varies from blue to green.
+##
 ## The argument @var{n} must be a scalar.
 ## If unspecified, the length of the current colormap, or 64, is used.
 ## @seealso{colormap}
 ## @end deftypefn
 
 ## Author:  Kai Habel <kai.habel@gmx.de>
 
 ## PKG_ADD: colormap ("register", "winter");
diff --git a/scripts/io/beep.m b/scripts/io/beep.m
--- a/scripts/io/beep.m
+++ b/scripts/io/beep.m
@@ -14,16 +14,20 @@
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} beep ()
 ## Produce a beep from the speaker (or visual bell).
+##
+## This function sends the alarm character @qcode{"\a"} to the terminal.
+## Depending on the user's configuration this may produce an audible beep,
+## a visual bell, or nothing at all.
 ## @seealso{puts, fputs, printf, fprintf}
 ## @end deftypefn
 
 ## Author: jwe
 
 function beep ()
 
   if (nargin != 0)
diff --git a/scripts/io/dlmwrite.m b/scripts/io/dlmwrite.m
--- a/scripts/io/dlmwrite.m
+++ b/scripts/io/dlmwrite.m
@@ -21,55 +21,54 @@
 ## @deftypefnx {Function File} {} dlmwrite (@var{file}, @var{M}, @var{delim}, @var{r}, @var{c})
 ## @deftypefnx {Function File} {} dlmwrite (@var{file}, @var{M}, @var{key}, @var{val} @dots{})
 ## @deftypefnx {Function File} {} dlmwrite (@var{file}, @var{M}, "-append", @dots{})
 ## @deftypefnx {Function File} {} dlmwrite (@var{fid}, @dots{})
 ## Write the matrix @var{M} to the named file using delimiters.
 ##
 ## @var{file} should be a file name or writable file ID given by @code{fopen}.
 ##
-## The parameter @var{delim} specifies the delimiter to use to separate
-## values on a row.
+## The parameter @var{delim} specifies the delimiter to use to separate values
+## on a row.
 ##
-## The value of @var{r} specifies the number of delimiter-only lines to
-## add to the start of the file.
+## The value of @var{r} specifies the number of delimiter-only lines to add to
+## the start of the file.
 ##
-## The value of @var{c} specifies the number of delimiters to prepend to
-## each line of data.
+## The value of @var{c} specifies the number of delimiters to prepend to each
+## line of data.
 ##
-## If the argument @qcode{"-append"} is given, append to the end of
-## @var{file}.
+## If the argument @qcode{"-append"} is given, append to the end of @var{file}.
 ##
-## In addition, the following keyword value pairs may appear at the end
-## of the argument list:
+## In addition, the following keyword value pairs may appear at the end of
+## the argument list:
 ##
 ## @table @asis
 ## @item @qcode{"append"}
 ## Either @qcode{"on"} or @qcode{"off"}.  See @qcode{"-append"} above.
 ##
 ## @item @qcode{"delimiter"}
 ## See @var{delim} above.
 ##
 ## @item @qcode{"newline"}
-## The character(s) to use to separate each row.  Three special cases
-## exist for this option.  @qcode{"unix"} is changed into
+## The character(s) to use to separate each row.  Three special cases exist
+## for this option.  @qcode{"unix"} is changed into
 ## @qcode{"@xbackslashchar{}n"}, @qcode{"pc"} is changed into
-## @qcode{"@xbackslashchar{}r@xbackslashchar{}n"}, and @qcode{"mac"} is changed
-## into @qcode{"@xbackslashchar{}r"}.  Any other value is used directly as the
-## newline separator.
+## @qcode{"@xbackslashchar{}r@xbackslashchar{}n"}, and @qcode{"mac"} is
+## changed into @qcode{"@xbackslashchar{}r"}.  Any other value is used
+## directly as the newline separator.
 ##
 ## @item @qcode{"roffset"}
 ## See @var{r} above.
 ##
 ## @item @qcode{"coffset"}
 ## See @var{c} above.
 ##
 ## @item @qcode{"precision"}
-## The precision to use when writing the file.  It can either be a
-## format string (as used by fprintf) or a number of significant digits.
+## The precision to use when writing the file.  It can either be a format
+## string (as used by fprintf) or a number of significant digits.
 ## @end table
 ##
 ## @example
 ## dlmwrite ("file.csv", reshape (1:16, 4, 4));
 ## @end example
 ##
 ## @example
 ## dlmwrite ("file.tex", a, "delimiter", "&", "newline", "\n")
diff --git a/scripts/io/importdata.m b/scripts/io/importdata.m
--- a/scripts/io/importdata.m
+++ b/scripts/io/importdata.m
@@ -39,18 +39,18 @@
 ## files)
 ## @end itemize
 ##
 ## Different file types are supported:
 ##
 ## @itemize
 ## @item ASCII table
 ##
-## Import ASCII table using the specified number of header rows and
-## the specified delimiter.
+## Import ASCII table using the specified number of header rows and the
+## specified delimiter.
 ##
 ## @item Image file
 ##
 ## @item @sc{matlab} file
 ##
 ## @item Spreadsheet files (depending on external software)
 ##
 ## @item WAV file
diff --git a/scripts/io/strread.m b/scripts/io/strread.m
--- a/scripts/io/strread.m
+++ b/scripts/io/strread.m
@@ -27,18 +27,17 @@
 ##
 ## The string @var{str} is split into words that are repeatedly matched to the
 ## specifiers in @var{format}.  The first word is matched to the first
 ## specifier, the second to the second specifier and so forth.  If there are
 ## more words than specifiers, the process is repeated until all words have
 ## been processed.
 ##
 ## The string @var{format} describes how the words in @var{str} should be
-## parsed.
-## It may contain any combination of the following specifiers:
+## parsed.  It may contain any combination of the following specifiers:
 ##
 ## @table @code
 ## @item %s
 ## The word is parsed as a string.
 ##
 ## @item  %f
 ## @itemx %n
 ## The word is parsed as a number and converted to double.
@@ -78,30 +77,30 @@
 ##
 ## @noindent
 ## can be read using
 ##
 ## @example
 ## [@var{a}, @var{b}, @var{c}] = strread (@var{str}, "%s %s %f");
 ## @end example
 ##
-## Optional numeric argument @var{format_repeat} can be used for
-## limiting the number of items read:
+## Optional numeric argument @var{format_repeat} can be used for limiting the
+## number of items read:
 ##
 ## @table @asis
 ## @item -1
 ## (default) read all of the string until the end.
 ##
 ## @item N
-## Read N times @var{nargout} items.  0 (zero) is an acceptable
-## value for @var{format_repeat}.
+## Read N times @var{nargout} items.  0 (zero) is an acceptable value for
+## @var{format_repeat}.
 ## @end table
 ##
-## The behavior of @code{strread} can be changed via property-value
-## pairs.  The following properties are recognized:
+## The behavior of @code{strread} can be changed via property-value pairs.  The
+## following properties are recognized:
 ##
 ## @table @asis
 ## @item @qcode{"commentstyle"}
 ## Parts of @var{str} are considered comments and will be skipped.
 ## @var{value} is the comment style and can be any of the following.
 ##
 ## @itemize
 ## @item @qcode{"shell"}
@@ -123,52 +122,55 @@
 ## @end itemize
 ##
 ## @item @qcode{"delimiter"}
 ## Any character in @var{value} will be used to split @var{str} into words
 ## (default value = any whitespace).
 ##
 ## @item @qcode{"emptyvalue"}:
 ## Value to return for empty numeric values in non-whitespace delimited data.
-## The default is NaN@.  When the data type does not support NaN
-## (int32 for example), then default is zero.
+## The default is NaN@.  When the data type does not support NaN (int32 for
+## example), then default is zero.
 ##
 ## @item @qcode{"multipledelimsasone"}
 ## Treat a series of consecutive delimiters, without whitespace in between,
 ## as a single delimiter.  Consecutive delimiter series need not be vertically
 ## @qcode{"aligned"}.
 ##
 ## @item @qcode{"treatasempty"}
 ## Treat single occurrences (surrounded by delimiters or whitespace) of the
 ## string(s) in @var{value} as missing values.
 ##
 ## @item @qcode{"returnonerror"}
 ## If @var{value} true (1, default), ignore read errors and return normally.
 ## If false (0), return an error.
 ##
 ## @item @qcode{"whitespace"}
-## Any character in @var{value} will be interpreted as whitespace and
-## trimmed; the string defining whitespace must be enclosed in double
-## quotes for proper processing of special characters like
-## @qcode{"@xbackslashchar{}t"}.  The default value for whitespace is
-## @qcode{" @xbackslashchar{}b@xbackslashchar{}r@xbackslashchar{}n@xbackslashchar{}t"}
-## (note the space).
-## Unless whitespace is set to '' (empty) AND at least one @qcode{"%s"} format
-## conversion specifier is supplied, a space is always part of whitespace.
+## Any character in @var{value} will be interpreted as whitespace and trimmed;
+## the string defining whitespace must be enclosed in double quotes for proper
+## processing of special characters like @qcode{"@xbackslashchar{}t"}.  The
+## default value for whitespace is
+## @c Note: the next line specifically has a newline which generates a space
+## @c       in the output of qcode, but keeps the next line < 80 characters. 
+## @qcode{"
+## @xbackslashchar{}b@xbackslashchar{}r@xbackslashchar{}n@xbackslashchar{}t"}
+## (note the space).  Unless whitespace is set to @qcode{""} (empty) AND at
+## least one @qcode{"%s"} format conversion specifier is supplied, a space is
+## always part of whitespace.
 ##
 ## @end table
 ##
-## When the number of words in @var{str} doesn't match an exact multiple
-## of the number of format conversion specifiers, strread's behavior
-## depends on the last character of @var{str}:
+## When the number of words in @var{str} doesn't match an exact multiple of
+## the number of format conversion specifiers, strread's behavior depends on
+## the last character of @var{str}:
 ##
 ## @table @asis
 ## @item last character = @qcode{"@xbackslashchar{}n"}
-## Data columns are padded with empty fields or Nan so that all columns
-## have equal length
+## Data columns are padded with empty fields or Nan so that all columns have
+## equal length
 ##
 ## @item last character is not @qcode{"@xbackslashchar{}n"}
 ## Data columns are not padded; strread returns columns of unequal length
 ##
 ## @end table
 ##
 ## @seealso{textscan, textread, load, dlmread, fscanf}
 ## @end deftypefn
diff --git a/scripts/io/textread.m b/scripts/io/textread.m
--- a/scripts/io/textread.m
+++ b/scripts/io/textread.m
@@ -33,24 +33,24 @@
 ##
 ## @itemize
 ## @item @qcode{"headerlines"}:
 ## The first @var{value} number of lines of @var{filename} are skipped.
 ##
 ## @item @qcode{"endofline"}:
 ## Specify a single character or
 ## @qcode{"@xbackslashchar{}r@xbackslashchar{}n"}.  If no value is given, it
-## will be inferred from the file.  If set to "" (empty string) EOLs are
-## ignored as delimiters.
+## will be inferred from the file.  If set to @qcode{""} (empty string) EOLs
+## are ignored as delimiters.
 ## @end itemize
 ##
 ## The optional input @var{n} specifies the number of data lines to read; in
 ## this sense it differs slightly from the format repeat count in strread.
 ##
-## If the format string is empty (not: omitted) and the file contains only
+## If the format string is empty (not just omitted) and the file contains only
 ## numeric data (excluding headerlines), textread will return a rectangular
 ## matrix with the number of columns matching the number of numeric fields on
 ## the first data line of the file.  Empty fields are returned as zero values.
 ##
 ## @seealso{strread, load, dlmread, fscanf, textscan}
 ## @end deftypefn
 
 function varargout = textread (filename, format = "%f", varargin)
diff --git a/scripts/java/javaArray.m b/scripts/java/javaArray.m
--- a/scripts/java/javaArray.m
+++ b/scripts/java/javaArray.m
@@ -15,25 +15,25 @@
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {@var{jary} =} javaArray (@var{classname}, @var{sz})
 ## @deftypefnx {Function File} {@var{jary} =} javaArray (@var{classname}, @var{m}, @var{n}, @dots{})
 ##
-## Create a Java array of size @var{sz} with elements of class
-## @var{classname}.  @var{classname} may be a Java object representing a class
-## or a string containing the fully qualified class name.  The size of
-## the object may also be specified with individual integer arguments
-## @var{m}, @var{n}, etc.
+## Create a Java array of size @var{sz} with elements of class @var{classname}.
 ##
-## The generated array is uninitialized.  All elements are set to null
-## if @var{classname} is a reference type, or to a default value (usually 0)
-## if @var{classname} is a primitive type.
+## @var{classname} may be a Java object representing a class or a string
+## containing the fully qualified class name.  The size of the object may
+## also be specified with individual integer arguments @var{m}, @var{n}, etc.
+##
+## The generated array is uninitialized.  All elements are set to null if
+## @var{classname} is a reference type, or to a default value (usually 0) if
+## @var{classname} is a primitive type.
 ##
 ## Sample code:
 ##
 ## @example
 ## @group
 ## jary = javaArray ("java.lang.String", 2, 2);
 ## jary(1,1) = "Hello";
 ## @end group
diff --git a/scripts/java/java_get.m b/scripts/java/java_get.m
--- a/scripts/java/java_get.m
+++ b/scripts/java/java_get.m
@@ -13,22 +13,23 @@
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {@var{val} =} java_get (@var{obj}, @var{name})
-## Get the value of the field @var{name} of the Java object @var{obj}.  For
-## static fields, @var{obj} can be a string representing the fully qualified
-## name of the corresponding class.
+## Get the value of the field @var{name} of the Java object @var{obj}.
+##
+## For static fields, @var{obj} can be a string representing the fully
+## qualified name of the corresponding class.
 ##
 ## When @var{obj} is a regular Java object, structure-like indexing can be
-## used as a shortcut syntax.  For instance, the two following statements are
+## used as a shortcut syntax.  For instance, the following two statements are
 ## equivalent
 ##
 ## @example
 ## @group
 ##   java_get (x, "field1")
 ##   x.field1
 ## @end group
 ## @end example
diff --git a/scripts/java/java_set.m b/scripts/java/java_set.m
--- a/scripts/java/java_set.m
+++ b/scripts/java/java_set.m
@@ -14,21 +14,23 @@
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {@var{obj} =} java_set (@var{obj}, @var{name}, @var{val})
 ## Set the value of the field @var{name} of the Java object @var{obj} to
-## @var{val}.  For static fields, @var{obj} can be a string representing the
-## fully qualified named of the corresponding Java class.
+## @var{val}.
+##
+## For static fields, @var{obj} can be a string representing the fully
+## qualified named of the corresponding Java class.
 ##
 ## When @var{obj} is a regular Java object, structure-like indexing can be
-## used as a shortcut syntax.  For instance, the two following statements are
+## used as a shortcut syntax.  For instance, the following two statements are
 ## equivalent
 ##
 ## @example
 ## @group
 ##   java_set (x, "field1", val)
 ##   x.field1 = val
 ## @end group
 ## @end example
diff --git a/scripts/java/javaaddpath.m b/scripts/java/javaaddpath.m
--- a/scripts/java/javaaddpath.m
+++ b/scripts/java/javaaddpath.m
@@ -15,20 +15,21 @@
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {} javaaddpath (@var{clspath})
 ## @deftypefnx {Function File} {} javaaddpath (@var{clspath1}, @dots{})
-## Add @var{clspath} to the dynamic class path of the Java virtual
-## machine.  @var{clspath} may either be a directory where @file{.class}
-## files are found, or a @file{.jar} file containing Java classes.
-## Multiple paths may be added at once by specifying additional arguments.
+## Add @var{clspath} to the dynamic class path of the Java virtual machine.
+##
+## @var{clspath} may either be a directory where @file{.class} files are
+## found, or a @file{.jar} file containing Java classes.  Multiple paths may
+## be added at once by specifying additional arguments.
 ## @seealso{javarmpath, javaclasspath}
 ## @end deftypefn
 
 function javaaddpath (varargin)
 
   if (nargin < 1)
     print_usage ();
   endif
diff --git a/scripts/java/javachk.m b/scripts/java/javachk.m
--- a/scripts/java/javachk.m
+++ b/scripts/java/javachk.m
@@ -34,65 +34,63 @@
 ##
 ## @item @qcode{"jvm"}
 ## Java Virtual Machine.
 ##
 ## @item @qcode{"swing"}
 ## Swing components for lightweight GUIs.
 ## @end table
 ##
-## If @var{feature} is supported and:
+## If @var{feature} is supported and
 ##
 ## @itemize @bullet
 ## @item
-## No output argument is requested:
+## no output argument is requested:
 ##
 ## Return an empty string
 ##
 ## @item
-## An output argument is requested:
+## an output argument is requested:
 ##
 ## Return a struct with fields @qcode{"feature"} and @qcode{"identifier"}
 ## both empty
-##
 ## @end itemize
 ##
-## If @var{feature} is not supported and:
+## If @var{feature} is not supported and
 ##
 ## @itemize @bullet
 ## @item
-## No output argument is requested:
+## no output argument is requested:
 ##
-## Emit an error message.
+## Emit an error message
 ##
 ## @item
-## An output argument is requested:
+## an output argument is requested:
 ##
-## Return a struct with field @qcode{"feature"} set to @var{feature} and
-## field @qcode{"identifier"} set to @var{component}
-##
+## Return a struct with field @qcode{"feature"} set to @var{feature} and field
+## @qcode{"identifier"} set to @var{component}
 ## @end itemize
 ##
 ## The optional input @var{component} will be used in place of @var{feature}
 ## in any error messages for greater specificity.
 ##
 ## @code{javachk} determines if specific Java features are available in an
 ## Octave session.  This function is provided for scripts which may alter
 ## their behavior based on the availability of Java.  The feature
 ## @qcode{"desktop"} is never available as Octave has no Java-based desktop.
 ## Other features may be available if Octave was compiled with the Java
 ## Interface and Java is installed.
 ##
-## @seealso{error, usejava}
+## @seealso{usejava, error}
 ## @end deftypefn
 
 ## Author: Philip Nienhuis <prnienhuis at users.sf.net>
 ## Created: 2014-04-19
 
-function msg = javachk (feature, component="")
+function msg = javachk (feature, component = "")
 
   msg = "";
   chk = false;
   switch (feature)
     ## For each feature, try methods() on a Java class of a feature
     case "awt"
       try
         dum = methods ("java.awt.Frame");
diff --git a/scripts/java/javaclasspath.m b/scripts/java/javaclasspath.m
--- a/scripts/java/javaclasspath.m
+++ b/scripts/java/javaclasspath.m
@@ -26,22 +26,22 @@
 ## array of strings.
 ##
 ## If called with no inputs:
 ##
 ## @itemize
 ## @item If no output is requested, the dynamic and static classpaths are
 ## printed to the standard output.
 ##
-## @item If one output value @var{dpath} is requested, the result is
-## the dynamic classpath.
+## @item If one output value @var{dpath} is requested, the result is the
+## dynamic classpath.
 ##
-## @item If two output values@var{dpath} and @var{spath} are
-## requested, the first variable will contain the dynamic classpath and
-## the second will be contain the static classpath.
+## @item If two output values@var{dpath} and @var{spath} are requested, the
+## first variable will contain the dynamic classpath and the second will
+## contain the static classpath.
 ## @end itemize
 ##
 ## If called with a single input parameter @var{what}:
 ##
 ## @table @asis
 ## @item @qcode{"-dynamic"}
 ## Return the dynamic classpath.
 ##
diff --git a/scripts/java/javamem.m b/scripts/java/javamem.m
--- a/scripts/java/javamem.m
+++ b/scripts/java/javamem.m
@@ -14,54 +14,51 @@
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {} javamem ()
 ## @deftypefnx {Function File} {@var{jmem} =} javamem ()
-## Show the current memory usage of the Java virtual machine (JVM)
-## and run the garbage collector.
+## Show the current memory usage of the Java virtual machine (JVM) and run the
+## garbage collector.
 ##
 ## When no return argument is given the info is printed to the screen.
-## Otherwise, the output cell array @var{jmem} contains Maximum, Total,
-## and Free memory (in bytes).
+## Otherwise, the output cell array @var{jmem} contains Maximum, Total, and
+## Free memory (in bytes).
 ##
-## All Java-based routines are run in the JVM's shared memory pool,
-## a dedicated and separate part of memory claimed by the JVM from
-## your computer's total memory (which comprises physical RAM and
-## virtual memory / swap space on hard disk).
+## All Java-based routines are run in the JVM's shared memory pool, a
+## dedicated and separate part of memory claimed by the JVM from your
+## computer's total memory (which comprises physical RAM and virtual memory /
+## swap space on hard disk).
 ##
 ## The maximum allowable memory usage can be configured using the file
-## @file{java.opts}.  The directory where this file resides is
-## determined by the environment variable @w{@env{OCTAVE_JAVA_DIR}}.
-## If unset, the directory where @file{javaaddpath.m} resides is used instead
-## (typically
+## @file{java.opts}.  The directory where this file resides is determined by
+## the environment variable @w{@env{OCTAVE_JAVA_DIR}}.  If unset, the directory
+## where @file{javaaddpath.m} resides is used instead (typically
 ## @file{@w{@env{OCTAVE_HOME}}/share/octave/@w{@env{OCTAVE_VERSION}}/m/java/}).
 ##
-## @file{java.opts} is a plain text file with one option per line.  The
-## default initial memory size and default maximum memory size (which
-## are both system dependent) can be overridden like so:
+## @file{java.opts} is a plain text file with one option per line.  The default
+## initial memory size and default maximum memory size (which are both system
+## dependent) can be overridden like so:
 ##
 ## @nospell{-Xms64m}
 ##
 ## @nospell{-Xmx512m}
 ##
 ## (in megabytes in this example).
-## You can adapt these values to your own requirements if your system
-## has limited available physical memory or if you get Java memory
-## errors.
+## You can adapt these values to your own requirements if your system has
+## limited available physical memory or if you get Java memory errors.
 ##
-## "Total memory" is what the operating system has currently assigned
-## to the JVM and depends on actual and active memory usage.
-## "Free memory" is self-explanatory.  During operation of Java-based
-## Octave functions the amount of Total and Free memory will vary,
-## due to Java's own cleaning up and your operating system's memory
-## management.
+## @qcode{"Total memory"} is what the operating system has currently assigned
+## to the JVM and depends on actual and active memory usage.  
+## @qcode{"Free memory"} is self-explanatory.  During operation of Java-based
+## Octave functions the amount of Total and Free memory will vary, due to
+## Java's own cleaning up and your operating system's memory management.
 ## @end deftypefn
 
 ## Author: Philip Nienhuis
 ## Created: 2010-03-25
 ## Updates:
 ## 2010-03-26 Changed name to javamem & indentation to double spaces
 ## 2010-08-25 Corrected text on java memory assignments
 ## 2010-09-05 Further overhauled help text
diff --git a/scripts/java/javarmpath.m b/scripts/java/javarmpath.m
--- a/scripts/java/javarmpath.m
+++ b/scripts/java/javarmpath.m
@@ -16,19 +16,21 @@
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {} javarmpath (@var{clspath})
 ## @deftypefnx {Function File} {} javarmpath (@var{clspath1}, @dots{})
 ## Remove @var{clspath} from the dynamic class path of the Java virtual
-## machine.  @var{clspath} may either be a directory where @file{.class}
-## files are found, or a @file{.jar} file containing Java classes.
-## Multiple paths may be removed at once by specifying additional arguments.
+## machine.
+##
+## @var{clspath} may either be a directory where @file{.class} files are found,
+## or a @file{.jar} file containing Java classes.  Multiple paths may be
+## removed at once by specifying additional arguments.
 ## @seealso{javaaddpath, javaclasspath}
 ## @end deftypefn
 
 function javarmpath (varargin)
 
   if (nargin < 1)
     print_usage ();
   endif
diff --git a/scripts/linear-algebra/bandwidth.m b/scripts/linear-algebra/bandwidth.m
--- a/scripts/linear-algebra/bandwidth.m
+++ b/scripts/linear-algebra/bandwidth.m
@@ -17,19 +17,18 @@
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {@var{bw} =} bandwidth (@var{A}, @var{type})
 ## @deftypefnx {Function File} {[@var{lower}, @var{upper}] =} bandwidth (@var{A})
 ## Compute the bandwidth of @var{A}.
 ##
 ## The @var{type} argument is the string @qcode{"lower"} for the lower
-## bandwidth and @qcode{"upper"} for the upper bandwidth.
-## If no @var{type} is specified return both the lower and upper bandwidth
-## of @var{A}.
+## bandwidth and @qcode{"upper"} for the upper bandwidth.  If no @var{type} is
+## specified return both the lower and upper bandwidth of @var{A}.
 ##
 ## The lower/upper bandwidth of a matrix is the number of
 ## subdiagonals/superdiagonals with nonzero entries.
 ##
 ## @seealso{isbanded, isdiag, istril, istriu}
 ## @end deftypefn
 
 ## Author: Massimiliano Fasi
diff --git a/scripts/linear-algebra/commutation_matrix.m b/scripts/linear-algebra/commutation_matrix.m
--- a/scripts/linear-algebra/commutation_matrix.m
+++ b/scripts/linear-algebra/commutation_matrix.m
@@ -18,55 +18,55 @@
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} commutation_matrix (@var{m}, @var{n})
 ## Return the commutation matrix
 ## @tex
 ##  $K_{m,n}$
 ## @end tex
 ## @ifnottex
-##  K(m,n)
+## K(m,n)
 ## @end ifnottex
-##  which is the unique
+## which is the unique
 ## @tex
 ##  $m n \times m n$
 ## @end tex
 ## @ifnottex
-##  @var{m}*@var{n} by @var{m}*@var{n}
+## @var{m}*@var{n} by @var{m}*@var{n}
 ## @end ifnottex
-##  matrix such that
+## matrix such that
 ## @tex
 ##  $K_{m,n} \cdot {\rm vec} (A) = {\rm vec} (A^T)$
 ## @end tex
 ## @ifnottex
-##  @math{K(m,n) * vec(A) = vec(A')}
+## @math{K(m,n) * vec(A) = vec(A')}
 ## @end ifnottex
-##  for all
+## for all
 ## @tex
 ##  $m\times n$
 ## @end tex
 ## @ifnottex
-##  @math{m} by @math{n}
+## @math{m} by @math{n}
 ## @end ifnottex
-##  matrices
+## matrices
 ## @tex
 ##  $A$.
 ## @end tex
 ## @ifnottex
-##  @math{A}.
+## @math{A}.
 ## @end ifnottex
 ##
 ## If only one argument @var{m} is given,
 ## @tex
 ##  $K_{m,m}$
 ## @end tex
 ## @ifnottex
-##  @math{K(m,m)}
+## @math{K(m,m)}
 ## @end ifnottex
-##  is returned.
+## is returned.
 ##
 ## See @nospell{Magnus and Neudecker} (1988), @cite{Matrix Differential
 ## Calculus with Applications in Statistics and Econometrics.}
 ## @end deftypefn
 
 ## Author: KH <Kurt.Hornik@wu-wien.ac.at>
 ## Created: 8 May 1995
 ## Adapted-By: jwe
diff --git a/scripts/linear-algebra/cond.m b/scripts/linear-algebra/cond.m
--- a/scripts/linear-algebra/cond.m
+++ b/scripts/linear-algebra/cond.m
@@ -26,18 +26,18 @@
 ## $ {\parallel A \parallel_p * \parallel A^{-1} \parallel_p .} $
 ## @end tex
 ## @ifnottex
 ## @code{norm (@var{A}, @var{p}) * norm (inv (@var{A}), @var{p})}.
 ## @end ifnottex
 ##
 ## By default, @code{@var{p} = 2} is used which implies a (relatively slow)
 ## singular value decomposition.  Other possible selections are
-## @code{@var{p} = 1, Inf, "fro"} which are generally faster.  See
-## @code{norm} for a full discussion of possible @var{p} values.
+## @code{@var{p} = 1, Inf, "fro"} which are generally faster.  See @code{norm}
+## for a full discussion of possible @var{p} values.
 ##
 ## The condition number of a matrix quantifies the sensitivity of the matrix
 ## inversion operation when small changes are made to matrix elements.  Ideally
 ## the condition number will be close to 1.  When the number is large this
 ## indicates small changes (such as underflow or round-off error) will produce
 ## large changes in the resulting output.  In such cases the solution results
 ## from numerical computing are not likely to be accurate.
 ## @seealso{condest, rcond, norm, svd}
diff --git a/scripts/linear-algebra/condest.m b/scripts/linear-algebra/condest.m
--- a/scripts/linear-algebra/condest.m
+++ b/scripts/linear-algebra/condest.m
@@ -18,18 +18,19 @@
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {} condest (@var{A})
 ## @deftypefnx {Function File} {} condest (@var{A}, @var{t})
 ## @deftypefnx {Function File} {[@var{est}, @var{v}] =} condest (@dots{})
 ## @deftypefnx {Function File} {[@var{est}, @var{v}] =} condest (@var{A}, @var{solve}, @var{solve_t}, @var{t})
 ## @deftypefnx {Function File} {[@var{est}, @var{v}] =} condest (@var{apply}, @var{apply_t}, @var{solve}, @var{solve_t}, @var{n}, @var{t})
 ##
-## Estimate the 1-norm condition number of a matrix @var{A}
-## using @var{t} test vectors using a randomized 1-norm estimator.
+## Estimate the 1-norm condition number of a matrix @var{A} using @var{t} test
+## vectors using a randomized 1-norm estimator.
+##
 ## If @var{t} exceeds 5, then only 5 test vectors are used.
 ##
 ## If the matrix is not explicit, e.g., when estimating the condition
 ## number of @var{A} given an LU@tie{}factorization, @code{condest} uses the
 ## following functions:
 ##
 ## @table @var
 ## @item apply
@@ -42,21 +43,20 @@
 ## @code{A \ b} for a matrix @code{b} of size @var{n} by @var{t}.
 ##
 ## @item solve_t
 ## @code{A' \ b} for a matrix @code{b} of size @var{n} by @var{t}.
 ## @end table
 ##
 ## The implicit version requires an explicit dimension @var{n}.
 ##
-## @code{condest} uses a randomized algorithm to approximate
-## the 1-norms.
+## @code{condest} uses a randomized algorithm to approximate the 1-norms.
 ##
-## @code{condest} returns the 1-norm condition estimate @var{est} and
-## a vector @var{v} satisfying @code{norm (A*v, 1) == norm (A, 1) * norm
+## @code{condest} returns the 1-norm condition estimate @var{est} and a vector
+## @var{v} satisfying @code{norm (A*v, 1) == norm (A, 1) * norm
 ## (@var{v}, 1) / @var{est}}.  When @var{est} is large, @var{v} is an
 ## approximate null vector.
 ##
 ## References:
 ##
 ## @itemize
 ## @item
 ## @nospell{N.J. Higham and F. Tisseur}, @cite{A Block Algorithm
diff --git a/scripts/linear-algebra/cross.m b/scripts/linear-algebra/cross.m
--- a/scripts/linear-algebra/cross.m
+++ b/scripts/linear-algebra/cross.m
@@ -14,30 +14,34 @@
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {} cross (@var{x}, @var{y})
 ## @deftypefnx {Function File} {} cross (@var{x}, @var{y}, @var{dim})
-## Compute the vector cross product of two 3-dimensional vectors
-## @var{x} and @var{y}.
+## Compute the vector cross product of two 3-dimensional vectors @var{x} and
+## @var{y}.
+##
+## If @var{x} and @var{y} are matrices, the cross product is applied along the
+## first dimension with three elements.
+##
+## The optional argument  @var{dim} forces the cross product to be calculated
+## along the specified dimension.
+##
+## Example Code:
 ##
 ## @example
 ## @group
 ## cross ([1,1,0], [0,1,1])
 ##      @result{} [ 1; -1; 1 ]
 ## @end group
 ## @end example
 ##
-## If @var{x} and @var{y} are matrices, the cross product is applied
-## along the first dimension with 3 elements.  The optional argument
-## @var{dim} forces the cross product to be calculated along
-## the specified dimension.
 ## @seealso{dot, curl, divergence}
 ## @end deftypefn
 
 ## Author: Kurt Hornik <Kurt.Hornik@wu-wien.ac.at>
 ## Created: 15 October 1994
 ## Adapted-By: jwe
 
 function z = cross (x, y, dim)
diff --git a/scripts/linear-algebra/duplication_matrix.m b/scripts/linear-algebra/duplication_matrix.m
--- a/scripts/linear-algebra/duplication_matrix.m
+++ b/scripts/linear-algebra/duplication_matrix.m
@@ -18,45 +18,45 @@
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} duplication_matrix (@var{n})
 ## Return the duplication matrix
 ## @tex
 ##  $D_n$
 ## @end tex
 ## @ifnottex
-##  @nospell{@math{Dn}}
+## @nospell{@math{Dn}}
 ## @end ifnottex
-##  which is the unique
+## which is the unique
 ## @tex
 ##  $n^2 \times n(n+1)/2$
 ## @end tex
 ## @ifnottex
-##  @math{n^2} by @math{n*(n+1)/2}
+## @math{n^2} by @math{n*(n+1)/2}
 ## @end ifnottex
-##  matrix such that
+## matrix such that
 ## @tex
 ##  $D_n * {\rm vech} (A) = {\rm vec} (A)$
 ## @end tex
 ## @ifnottex
-##  @nospell{@math{Dn vech (A) = vec (A)}}
+## @nospell{@math{Dn vech (A) = vec (A)}}
 ## @end ifnottex
-##  for all symmetric
+## for all symmetric
 ## @tex
 ##  $n \times n$
 ## @end tex
 ## @ifnottex
-##  @math{n} by @math{n}
+## @math{n} by @math{n}
 ## @end ifnottex
-##  matrices
+## matrices
 ## @tex
 ##  $A$.
 ## @end tex
 ## @ifnottex
-##  @math{A}.
+## @math{A}.
 ## @end ifnottex
 ##
 ## See @nospell{Magnus and Neudecker} (1988), @cite{Matrix Differential
 ## Calculus with Applications in Statistics and Econometrics.}
 ## @end deftypefn
 
 ## Author: KH <Kurt.Hornik@wu-wien.ac.at>
 ## Created: 8 May 1995
diff --git a/scripts/linear-algebra/expm.m b/scripts/linear-algebra/expm.m
--- a/scripts/linear-algebra/expm.m
+++ b/scripts/linear-algebra/expm.m
@@ -13,31 +13,32 @@
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} expm (@var{A})
-## Return the exponential of a matrix, defined as the infinite Taylor
-## series
+## Return the exponential of a matrix.
+##
+## The matrix exponential is defined as the infinite Taylor series
 ## @tex
 ## $$
 ##  \exp (A) = I + A + {A^2 \over 2!} + {A^3 \over 3!} + \cdots
 ## $$
 ## @end tex
 ## @ifnottex
 ##
 ## @example
 ## expm (A) = I + A + A^2/2! + A^3/3! + @dots{}
 ## @end example
 ##
 ## @end ifnottex
-## The Taylor series is @emph{not} the way to compute the matrix
+## However, the Taylor series is @emph{not} the way to compute the matrix
 ## exponential; see @nospell{Moler and Van Loan}, @cite{Nineteen Dubious Ways
 ## to Compute the Exponential of a Matrix}, SIAM Review, 1978.  This routine
 ## uses Ward's diagonal Pad@'e approximation method with three step
 ## preconditioning (SIAM Journal on Numerical Analysis, 1977).  Diagonal
 ## Pad@'e approximations are rational polynomials of matrices
 ## @tex
 ## $D_q(A)^{-1}N_q(A)$
 ## @end tex
diff --git a/scripts/linear-algebra/housh.m b/scripts/linear-algebra/housh.m
--- a/scripts/linear-algebra/housh.m
+++ b/scripts/linear-algebra/housh.m
@@ -13,18 +13,18 @@
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {[@var{housv}, @var{beta}, @var{zer}] =} housh (@var{x}, @var{j}, @var{z})
-## Compute Householder reflection vector @var{housv} to reflect @var{x}
-## to be the j-th column of identity, i.e.,
+## Compute Householder reflection vector @var{housv} to reflect @var{x} to be
+## the j-th column of identity, i.e.,
 ##
 ## @example
 ## @group
 ## (I - beta*housv*housv')x =  norm (x)*e(j) if x(j) < 0,
 ## (I - beta*housv*housv')x = -norm (x)*e(j) if x(j) >= 0
 ## @end group
 ## @end example
 ##
diff --git a/scripts/linear-algebra/isdefinite.m b/scripts/linear-algebra/isdefinite.m
--- a/scripts/linear-algebra/isdefinite.m
+++ b/scripts/linear-algebra/isdefinite.m
@@ -16,18 +16,19 @@
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {} isdefinite (@var{A})
 ## @deftypefnx {Function File} {} isdefinite (@var{A}, @var{tol})
 ## Return 1 if @var{A} is symmetric positive definite within the
 ## tolerance specified by @var{tol} or 0 if @var{A} is symmetric
-## positive semidefinite.  Otherwise, return -1.  If @var{tol}
-## is omitted, use a tolerance of
+## positive semidefinite.  Otherwise, return -1.
+##
+## If @var{tol} is omitted, use a tolerance of
 ## @code{100 * eps * norm (@var{A}, "fro")}
 ## @seealso{issymmetric, ishermitian}
 ## @end deftypefn
 
 ## Author: Gabriele Pannocchia <g.pannocchia@ing.unipi.it>
 ## Created: November 2003
 ## Adapted-By: jwe
 
diff --git a/scripts/linear-algebra/ishermitian.m b/scripts/linear-algebra/ishermitian.m
--- a/scripts/linear-algebra/ishermitian.m
+++ b/scripts/linear-algebra/ishermitian.m
@@ -19,16 +19,17 @@
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {} ishermitian (@var{A})
 ## @deftypefnx {Function File} {} ishermitian (@var{A}, @var{tol})
 ## Return true if @var{A} is Hermitian within the tolerance specified by
 ## @var{tol}.
 ##
 ## The default tolerance is zero (uses faster code).
+##
 ## Matrix @var{A} is considered symmetric if
 ## @code{norm (@var{A} - @var{A}', Inf) / norm (@var{A}, Inf) < @var{tol}}.
 ## @seealso{issymmetric, isdefinite}
 ## @end deftypefn
 
 ## Author: A. S. Hodel <scotte@eng.auburn.edu>
 ## Created: August 1993
 ## Adapted-By: jwe
diff --git a/scripts/linear-algebra/issymmetric.m b/scripts/linear-algebra/issymmetric.m
--- a/scripts/linear-algebra/issymmetric.m
+++ b/scripts/linear-algebra/issymmetric.m
@@ -19,16 +19,17 @@
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {} issymmetric (@var{A})
 ## @deftypefnx {Function File} {} issymmetric (@var{A}, @var{tol})
 ## Return true if @var{A} is a symmetric matrix within the tolerance specified
 ## by @var{tol}.
 ##
 ## The default tolerance is zero (uses faster code).
+##
 ## Matrix @var{A} is considered symmetric if
 ## @code{norm (@var{A} - @var{A}.', Inf) / norm (@var{A}, Inf) < @var{tol}}.
 ## @seealso{ishermitian, isdefinite}
 ## @end deftypefn
 
 ## Author: A. S. Hodel <scotte@eng.auburn.edu>
 ## Created: August 1993
 ## Adapted-By: jwe
diff --git a/scripts/linear-algebra/istril.m b/scripts/linear-algebra/istril.m
--- a/scripts/linear-algebra/istril.m
+++ b/scripts/linear-algebra/istril.m
@@ -15,18 +15,18 @@
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} istril (@var{A})
 ## Return true if @var{A} is a lower triangular matrix.
 ##
-## A lower triangular matrix has nonzero entries only on the main diagonal
-## and below.
+## A lower triangular matrix has nonzero entries only on the main diagonal and
+## below.
 ## @seealso{istriu, isbanded, isdiag, tril, bandwidth}
 ## @end deftypefn
 
 ## Author: Massimiliano Fasi
 
 function retval = istril (A)
 
   if (nargin != 1)
diff --git a/scripts/linear-algebra/istriu.m b/scripts/linear-algebra/istriu.m
--- a/scripts/linear-algebra/istriu.m
+++ b/scripts/linear-algebra/istriu.m
@@ -15,18 +15,18 @@
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} istriu (@var{A})
 ## Return true if @var{A} is an upper triangular matrix.
 ##
-## An upper triangular matrix has nonzero entries only on the main diagonal
-## and above.
+## An upper triangular matrix has nonzero entries only on the main diagonal and
+## above.
 ## @seealso{isdiag, isbanded, istril, triu, bandwidth}
 ## @end deftypefn
 
 ## Author: Massimiliano Fasi
 
 function retval = istriu (A)
 
   if (nargin != 1)
diff --git a/scripts/linear-algebra/krylov.m b/scripts/linear-algebra/krylov.m
--- a/scripts/linear-algebra/krylov.m
+++ b/scripts/linear-algebra/krylov.m
@@ -20,39 +20,38 @@
 ## @deftypefn {Function File} {[@var{u}, @var{h}, @var{nu}] =} krylov (@var{A}, @var{V}, @var{k}, @var{eps1}, @var{pflg})
 ## Construct an orthogonal basis @var{u} of block Krylov subspace
 ##
 ## @example
 ## [v a*v a^2*v @dots{} a^(k+1)*v]
 ## @end example
 ##
 ## @noindent
-## Using Householder reflections to guard against loss of orthogonality.
+## using Householder reflections to guard against loss of orthogonality.
 ##
 ## If @var{V} is a vector, then @var{h} contains the Hessenberg matrix
-## such that @nospell{@tcode{a*u == u*h+rk*ek'}}, in which @code{rk =
-## a*u(:,k)-u*h(:,k)}, and @nospell{@tcode{ek'}} is the vector
+## such that @nospell{@tcode{a*u == u*h+rk*ek'}}, in which
+## @code{rk = a*u(:,k)-u*h(:,k)}, and @nospell{@tcode{ek'}} is the vector
 ## @code{[0, 0, @dots{}, 1]} of length @code{k}.  Otherwise, @var{h} is
 ## meaningless.
 ##
-## If @var{V} is a vector and @var{k} is greater than
-## @code{length (A) - 1}, then @var{h} contains the Hessenberg matrix such
-## that @code{a*u == u*h}.
+## If @var{V} is a vector and @var{k} is greater than @code{length (A) - 1},
+## then @var{h} contains the Hessenberg matrix such that @code{a*u == u*h}.
 ##
-## The value of @var{nu} is the dimension of the span of the Krylov
-## subspace (based on @var{eps1}).
+## The value of @var{nu} is the dimension of the span of the Krylov subspace
+## (based on @var{eps1}).
 ##
-## If @var{b} is a vector and @var{k} is greater than @var{m-1}, then
-## @var{h} contains the Hessenberg decomposition of @var{A}.
+## If @var{b} is a vector and @var{k} is greater than @var{m-1}, then @var{h}
+## contains the Hessenberg decomposition of @var{A}.
 ##
-## The optional parameter @var{eps1} is the threshold for zero.  The
-## default value is 1e-12.
+## The optional parameter @var{eps1} is the threshold for zero.  The default
+## value is 1e-12.
 ##
-## If the optional parameter @var{pflg} is nonzero, row pivoting is used
-## to improve numerical behavior.  The default value is 0.
+## If the optional parameter @var{pflg} is nonzero, row pivoting is used to
+## improve numerical behavior.  The default value is 0.
 ##
 ## Reference: @nospell{A. Hodel, P. Misra}, @cite{Partial Pivoting in the
 ## Computation of Krylov Subspaces of Large Sparse Systems}, Proceedings of
 ## the 42nd IEEE Conference on Decision and Control, December 2003.
 ## @end deftypefn
 
 ## Author: A. Scottedward Hodel <a.s.hodel@eng.auburn.edu>
 
diff --git a/scripts/linear-algebra/logm.m b/scripts/linear-algebra/logm.m
--- a/scripts/linear-algebra/logm.m
+++ b/scripts/linear-algebra/logm.m
@@ -17,26 +17,29 @@
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {@var{s} =} logm (@var{A})
 ## @deftypefnx {Function File} {@var{s} =} logm (@var{A}, @var{opt_iters})
 ## @deftypefnx {Function File} {[@var{s}, @var{iters}] =} logm (@dots{})
-## Compute the matrix logarithm of the square matrix @var{A}.  The
-## implementation utilizes a Pad@'e approximant and the identity
+## Compute the matrix logarithm of the square matrix @var{A}.
+##
+## The implementation utilizes a Pad@'e approximant and the identity
 ##
 ## @example
 ## logm (@var{A}) = 2^k * logm (@var{A}^(1 / 2^k))
 ## @end example
 ##
-## The optional argument @var{opt_iters} is the maximum number of square roots
-## to compute and defaults to 100.  The optional output @var{iters} is the
-## number of square roots actually computed.
+## The optional input @var{opt_iters} is the maximum number of square roots
+## to compute and defaults to 100.
+##
+## The optional output @var{iters} is the number of square roots actually
+## computed.
 ## @seealso{expm, sqrtm}
 ## @end deftypefn
 
 ## Reference: N. J. Higham, Functions of Matrices: Theory and Computation
 ##            (SIAM, 2008.)
 ##
 
 ## Author: N. J. Higham
diff --git a/scripts/linear-algebra/normest.m b/scripts/linear-algebra/normest.m
--- a/scripts/linear-algebra/normest.m
+++ b/scripts/linear-algebra/normest.m
@@ -16,23 +16,26 @@
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {@var{n} =} normest (@var{A})
 ## @deftypefnx {Function File} {@var{n} =} normest (@var{A}, @var{tol})
 ## @deftypefnx {Function File} {[@var{n}, @var{c}] =} normest (@dots{})
-## Estimate the 2-norm of the matrix @var{A} using a power series
-## analysis.  This is typically used for large matrices, where the cost
-## of calculating @code{norm (@var{A})} is prohibitive and an approximation
-## to the 2-norm is acceptable.
+## Estimate the 2-norm of the matrix @var{A} using a power series analysis.
+##
+## This is typically used for large matrices, where the cost of calculating
+## @code{norm (@var{A})} is prohibitive and an approximation to the 2-norm is
+## acceptable.
 ##
 ## @var{tol} is the tolerance to which the 2-norm is calculated.  By default
-## @var{tol} is 1e-6.  @var{c} returns the number of iterations needed for
+## @var{tol} is 1e-6.
+##
+## The optional output @var{c} returns the number of iterations needed for
 ## @code{normest} to converge.
 ## @end deftypefn
 
 function [n, c] = normest (A, tol = 1e-6)
 
   if (nargin != 1 && nargin != 2)
     print_usage ();
   endif
diff --git a/scripts/linear-algebra/null.m b/scripts/linear-algebra/null.m
--- a/scripts/linear-algebra/null.m
+++ b/scripts/linear-algebra/null.m
@@ -16,19 +16,19 @@
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {} null (@var{A})
 ## @deftypefnx {Function File} {} null (@var{A}, @var{tol})
 ## Return an orthonormal basis of the null space of @var{A}.
 ##
-## The dimension of the null space is taken as the number of singular
-## values of @var{A} not greater than @var{tol}.  If the argument @var{tol}
-## is missing, it is computed as
+## The dimension of the null space is taken as the number of singular values of
+## @var{A} not greater than @var{tol}.  If the argument @var{tol} is missing,
+## it is computed as
 ##
 ## @example
 ## max (size (@var{A})) * max (svd (@var{A})) * eps
 ## @end example
 ## @seealso{orth}
 ## @end deftypefn
 
 ## Author: KH <Kurt.Hornik@wu-wien.ac.at>
diff --git a/scripts/linear-algebra/onenormest.m b/scripts/linear-algebra/onenormest.m
--- a/scripts/linear-algebra/onenormest.m
+++ b/scripts/linear-algebra/onenormest.m
@@ -16,31 +16,31 @@
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {[@var{est}, @var{v}, @var{w}, @var{iter}] =} onenormest (@var{A}, @var{t})
 ## @deftypefnx {Function File} {[@var{est}, @var{v}, @var{w}, @var{iter}] =} onenormest (@var{apply}, @var{apply_t}, @var{n}, @var{t})
 ##
 ## Apply @nospell{Higham and Tisseur's} randomized block 1-norm estimator to
-## matrix @var{A} using @var{t} test vectors.  If @var{t} exceeds 5, then
-## only 5 test vectors are used.
+## matrix @var{A} using @var{t} test vectors.
+##
+## If @var{t} exceeds 5, then only 5 test vectors are used.
 ##
 ## If the matrix is not explicit, e.g., when estimating the norm of
 ## @code{inv (@var{A})} given an LU@tie{}factorization, @code{onenormest}
 ## applies @var{A} and its conjugate transpose through a pair of functions
 ## @var{apply} and @var{apply_t}, respectively, to a dense matrix of size
 ## @var{n} by @var{t}.  The implicit version requires an explicit dimension
 ## @var{n}.
 ##
-## Returns the norm estimate @var{est}, two vectors @var{v} and
-## @var{w} related by norm
-## @code{(@var{w}, 1) = @var{est} * norm (@var{v}, 1)},
-## and the number of iterations @var{iter}.  The number of
-## iterations is limited to 10 and is at least 2.
+## Returns the norm estimate @var{est}, two vectors @var{v} and @var{w} related
+## by norm @code{(@var{w}, 1) = @var{est} * norm (@var{v}, 1)}, and the number
+## of iterations @var{iter}.  The number of iterations is limited to 10 and is
+## at least 2.
 ##
 ## References:
 ##
 ## @itemize
 ## @item
 ## @nospell{N.J. Higham and F. Tisseur}, @cite{A Block Algorithm
 ## for Matrix 1-Norm Estimation, with an Application to 1-Norm
 ## Pseudospectra}. SIMAX vol 21, no 4, pp 1185-1201.
diff --git a/scripts/linear-algebra/orth.m b/scripts/linear-algebra/orth.m
--- a/scripts/linear-algebra/orth.m
+++ b/scripts/linear-algebra/orth.m
@@ -16,19 +16,19 @@
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {} orth (@var{A})
 ## @deftypefnx {Function File} {} orth (@var{A}, @var{tol})
 ## Return an orthonormal basis of the range space of @var{A}.
 ##
-## The dimension of the range space is taken as the number of singular
-## values of @var{A} greater than @var{tol}.  If the argument @var{tol} is
-## missing, it is computed as
+## The dimension of the range space is taken as the number of singular values
+## of @var{A} greater than @var{tol}.  If the argument @var{tol} is missing, it
+## is computed as
 ##
 ## @example
 ## max (size (@var{A})) * max (svd (@var{A})) * eps
 ## @end example
 ## @seealso{null}
 ## @end deftypefn
 
 ## Author: KH <Kurt.Hornik@wu-wien.ac.at>
diff --git a/scripts/linear-algebra/qzhess.m b/scripts/linear-algebra/qzhess.m
--- a/scripts/linear-algebra/qzhess.m
+++ b/scripts/linear-algebra/qzhess.m
@@ -17,17 +17,19 @@
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {[@var{aa}, @var{bb}, @var{q}, @var{z}] =} qzhess (@var{A}, @var{B})
 ## Compute the Hessenberg-triangular decomposition of the matrix pencil
 ## @code{(@var{A}, @var{B})}, returning
 ## @code{@var{aa} = @var{q} * @var{A} * @var{z}},
 ## @code{@var{bb} = @var{q} * @var{B} * @var{z}}, with @var{q} and @var{z}
-## orthogonal.  For example:
+## orthogonal.
+##
+## For example:
 ##
 ## @example
 ## @group
 ## [aa, bb, q, z] = qzhess ([1, 2; 3, 4], [5, 6; 7, 8])
 ##      @result{} aa = [ -3.02244, -4.41741;  0.92998,  0.69749 ]
 ##      @result{} bb = [ -8.60233, -9.99730;  0.00000, -0.23250 ]
 ##      @result{}  q = [ -0.58124, -0.81373; -0.81373,  0.58124 ]
 ##      @result{}  z = [ 1, 0; 0, 1 ]
diff --git a/scripts/linear-algebra/rank.m b/scripts/linear-algebra/rank.m
--- a/scripts/linear-algebra/rank.m
+++ b/scripts/linear-algebra/rank.m
@@ -16,48 +16,47 @@
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {} rank (@var{A})
 ## @deftypefnx {Function File} {} rank (@var{A}, @var{tol})
 ## Compute the rank of matrix @var{A}, using the singular value decomposition.
 ##
-## The rank is taken to be the number of singular values of @var{A} that
-## are greater than the specified tolerance @var{tol}.  If the second
-## argument is omitted, it is taken to be
+## The rank is taken to be the number of singular values of @var{A} that are
+## greater than the specified tolerance @var{tol}.  If the second argument is
+## omitted, it is taken to be
 ##
 ## @example
 ## tol = max (size (@var{A})) * sigma(1) * eps;
 ## @end example
 ##
 ## @noindent
 ## where @code{eps} is machine precision and @code{sigma(1)} is the largest
 ## singular value of @var{A}.
 ##
-## The rank of a matrix is the number of linearly independent rows or
-## columns and determines how many particular solutions exist to a system
-## of equations.  Use @code{null} for finding the remaining homogenous
-## solutions.
+## The rank of a matrix is the number of linearly independent rows or columns
+## and determines how many particular solutions exist to a system of equations.
+## Use @code{null} for finding the remaining homogenous solutions.
 ##
 ## Example:
 ##
 ## @example
 ## @group
 ## x = [1 2 3
 ##      4 5 6
 ##      7 8 9];
 ## rank (x)
 ##   @result{} 2
 ## @end group
 ## @end example
 ##
 ## @noindent
-## The number of linearly independent rows is only 2 because the final row
-## is a linear combination of -1*row1 + 2*row2.
+## The number of linearly independent rows is only 2 because the final row is a
+## linear combination of -1*row1 + 2*row2.
 ##
 ## @seealso{null, sprank, svd}
 ## @end deftypefn
 
 ## Author: jwe
 
 function retval = rank (A, tol)
 
diff --git a/scripts/linear-algebra/rref.m b/scripts/linear-algebra/rref.m
--- a/scripts/linear-algebra/rref.m
+++ b/scripts/linear-algebra/rref.m
@@ -15,22 +15,24 @@
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {} rref (@var{A})
 ## @deftypefnx {Function File} {} rref (@var{A}, @var{tol})
 ## @deftypefnx {Function File} {[@var{r}, @var{k}] =} rref (@dots{})
-## Return the reduced row echelon form of @var{A}.  @var{tol} defaults
-## to @code{eps * max (size (@var{A})) * norm (@var{A}, inf)}.
+## Return the reduced row echelon form of @var{A}.
 ##
-## Called with two return arguments, @var{k} returns the vector of
-## "bound variables", which are those columns on which elimination
-## has been performed.
+## @var{tol} defaults to
+## @code{eps * max (size (@var{A})) * norm (@var{A}, inf)}.
+##
+## The optional return argument @var{k} contains the vector of
+## "bound variables", which are those columns on which elimination has been
+## performed.
 ##
 ## @end deftypefn
 
 ## Author: Paul Kienzle <pkienzle@users.sf.net>
 ##         (based on an anonymous source from the public domain)
 
 function [A, k] = rref (A, tol)
 
diff --git a/scripts/linear-algebra/vech.m b/scripts/linear-algebra/vech.m
--- a/scripts/linear-algebra/vech.m
+++ b/scripts/linear-algebra/vech.m
@@ -16,19 +16,20 @@
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} vech (@var{x})
 ## Return the vector obtained by eliminating all superdiagonal elements of
 ## the square matrix @var{x} and stacking the result one column above the
-## other.  This has uses in matrix calculus where the underlying matrix
-## is symmetric and it would be pointless to keep values above the main
-## diagonal.
+## other.
+##
+## This has uses in matrix calculus where the underlying matrix is symmetric
+## and it would be pointless to keep values above the main diagonal.
 ## @seealso{vec}
 ## @end deftypefn
 
 ## See Magnus and Neudecker (1988), Matrix differential calculus with
 ## applications in statistics and econometrics.
 
 ## Author KH <Kurt.Hornik@wu-wien.ac.at>
 ## Created: 8 May 1995
diff --git a/scripts/miscellaneous/bzip2.m b/scripts/miscellaneous/bzip2.m
--- a/scripts/miscellaneous/bzip2.m
+++ b/scripts/miscellaneous/bzip2.m
@@ -17,21 +17,21 @@
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {@var{filelist} =} bzip2 (@var{files})
 ## @deftypefnx {Function File} {@var{filelist} =} bzip2 (@var{files}, @var{dir})
 ## Compress the list of files specified in @var{files}.
 ##
-## @var{files} is a character array or cell array of strings.  Shell
-## wildcards in the filename such as @samp{*} or @samp{?} are accepted and
-## expanded.  Each file is compressed separately and a new file with a
-## @file{".bz2"} extension is created.  The original files are not modified,
-## but existing compressed files will be silently overwritten.
+## @var{files} is a character array or cell array of strings.  Shell wildcards
+## in the filename such as @samp{*} or @samp{?} are accepted and expanded.
+## Each file is compressed separately and a new file with a @file{".bz2"}
+## extension is created.  The original files are not modified, but existing
+## compressed files will be silently overwritten.
 ##
 ## If @var{dir} is defined the compressed files are placed in this directory,
 ## rather than the original directory where the uncompressed file resides.
 ## If @var{dir} does not exist it is created.
 ##
 ## The optional output @var{filelist} is a list of the compressed files.
 ## @seealso{bunzip2, unpack, gzip, zip, tar}
 ## @end deftypefn
diff --git a/scripts/miscellaneous/citation.m b/scripts/miscellaneous/citation.m
--- a/scripts/miscellaneous/citation.m
+++ b/scripts/miscellaneous/citation.m
@@ -17,19 +17,21 @@
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {Command} {} citation
 ## @deftypefnx {Command} {} citation @var{package}
 ## Display instructions for citing GNU Octave or its packages in publications.
 ##
 ## When called without an argument, display information on how to cite the core
-## GNU Octave system.  When given a package name @var{package}, display
-## information on citing the specific named package.  Note that some packages
-## may not yet have instructions on how to cite them.
+## GNU Octave system.
+##
+## When given a package name @var{package}, display information on citing the
+## specific named package.  Note that some packages may not yet have
+## instructions on how to cite them.
 ##
 ## The GNU Octave developers and its active community of package authors have
 ## invested a lot of time and effort in creating GNU Octave as it is today.
 ## Please give credit where credit is due and cite GNU Octave and its packages
 ## when you use them.
 ##
 ## @end deftypefn
 
diff --git a/scripts/miscellaneous/compare_versions.m b/scripts/miscellaneous/compare_versions.m
--- a/scripts/miscellaneous/compare_versions.m
+++ b/scripts/miscellaneous/compare_versions.m
@@ -15,26 +15,25 @@
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} compare_versions (@var{v1}, @var{v2}, @var{operator})
 ## Compare two version strings using the given @var{operator}.
 ##
-## This function assumes that versions @var{v1} and @var{v2} are
-## arbitrarily long strings made of numeric and period characters
-## possibly followed by an arbitrary string (e.g., @qcode{"1.2.3"},
-## @qcode{"0.3"}, @qcode{"0.1.2+"}, or @qcode{"1.2.3.4-test1"}).
+## This function assumes that versions @var{v1} and @var{v2} are arbitrarily
+## long strings made of numeric and period characters possibly followed by an
+## arbitrary string (e.g., @qcode{"1.2.3"}, @qcode{"0.3"}, @qcode{"0.1.2+"},
+## or @qcode{"1.2.3.4-test1"}).
 ##
-## The version is first split into numeric and character portions
-## and then the parts are padded to be the same length (i.e., @qcode{"1.1"}
-## would be padded to be @qcode{"1.1.0"} when being compared with
-## @qcode{"1.1.1"}, and separately, the character parts of the strings are
-## padded with nulls).
+## The version is first split into numeric and character portions and then
+## the parts are padded to be the same length (i.e., @qcode{"1.1"} would be
+## padded to be @qcode{"1.1.0"} when being compared with @qcode{"1.1.1"}, and
+## separately, the character parts of the strings are padded with nulls).
 ##
 ## The operator can be any logical operator from the set
 ##
 ## @itemize @bullet
 ## @item
 ## @qcode{"=="}
 ## equal
 ##
diff --git a/scripts/miscellaneous/computer.m b/scripts/miscellaneous/computer.m
--- a/scripts/miscellaneous/computer.m
+++ b/scripts/miscellaneous/computer.m
@@ -17,39 +17,39 @@
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {} computer ()
 ## @deftypefnx {Function File} {@var{c} =} computer ()
 ## @deftypefnx {Function File} {[@var{c}, @var{maxsize}] =} computer ()
 ## @deftypefnx {Function File} {[@var{c}, @var{maxsize}, @var{endian}] =} computer ()
 ## @deftypefnx {Function File} {@var{arch} =} computer ("arch")
-## Print or return a string of the form @var{cpu}-@var{vendor}-@var{os}
-## that identifies the type of computer that Octave is running on.
+## Print or return a string of the form @var{cpu}-@var{vendor}-@var{os} that
+## identifies the type of computer that Octave is running on.
 ##
 ## If invoked with an output argument, the value is returned instead of
 ## printed.  For example:
 ##
 ## @example
 ## @group
 ## computer ()
 ##    @print{} i586-pc-linux-gnu
 ##
 ## mycomp = computer ()
 ##    @result{} mycomp = "i586-pc-linux-gnu"
 ## @end group
 ## @end example
 ##
-## If two output arguments are requested, also return the maximum number
-## of elements for an array.  This will depend on whether Octave has been
+## If two output arguments are requested, also return the maximum number of
+## elements for an array.  This will depend on whether Octave has been
 ## compiled with 32-bit or 64-bit index vectors.
 ##
-## If three output arguments are requested, also return the byte order
-## of the current system as a character (@qcode{"B"} for big-endian or
-## @qcode{"L"} for little-endian).
+## If three output arguments are requested, also return the byte order of the
+## current system as a character (@qcode{"B"} for big-endian or @qcode{"L"}
+## for little-endian).
 ##
 ## If the argument @qcode{"arch"} is specified, return a string indicating the
 ## architecture of the computer on which Octave is running.
 ## @seealso{isunix, ismac, ispc}
 ## @end deftypefn
 
 function [c, maxsize, endian] = computer (a)
 
diff --git a/scripts/miscellaneous/debug.m b/scripts/miscellaneous/debug.m
--- a/scripts/miscellaneous/debug.m
+++ b/scripts/miscellaneous/debug.m
@@ -79,18 +79,18 @@
 ## @item debug_on_interrupt
 ## Configure whether Octave enters debug mode when it encounters an interrupt.
 ##
 ## @item isdebugmode
 ## Return true if in debug mode.
 ## @end table
 ##
 ## @noindent
-## When Octave encounters a breakpoint, or other reason to enter debug
-## mode, the prompt changes to @qcode{"debug>"}.  The workspace of the function
+## When Octave encounters a breakpoint, or other reason to enter debug mode,
+## the prompt changes to @qcode{"debug>"}.  The workspace of the function
 ## where the breakpoint was encountered becomes available and any Octave
 ## command that is valid in that workspace context may be executed.
 ##
 ## @seealso{dbstop, dbclear, dbstatus, dbwhere, dbtype, dbcont, dbquit,
 ## dbstack, dbup, dbdown, keyboard, debug_on_error, debug_on_warning,
 ## debug_on_interrupt, isdebugmode}
 ## @end deftypefn
 
diff --git a/scripts/miscellaneous/dir.m b/scripts/miscellaneous/dir.m
--- a/scripts/miscellaneous/dir.m
+++ b/scripts/miscellaneous/dir.m
@@ -50,18 +50,18 @@
 ## information about the named file.  @var{directory} may also be a list rather
 ## than a single directory or file.
 ##
 ## @var{directory} is subject to shell expansion if it contains any wildcard
 ## characters @samp{*}, @samp{?}, @samp{[]}.  To find a literal example of a
 ## wildcard character the wildcard must be escaped using the backslash operator
 ## @samp{\}.
 ##
-## Note that for symbolic links, @code{dir} returns information about
-## the file that the symbolic link points to rather than the link itself.
+## Note that for symbolic links, @code{dir} returns information about the
+## file that the symbolic link points to rather than the link itself. 
 ## However, if the link points to a nonexistent file, @code{dir} returns
 ## information about the link.
 ## @seealso{ls, readdir, glob, what, stat, lstat}
 ## @end deftypefn
 
 ## Author: jwe
 
 ## FIXME: This is quite slow for large directories.
diff --git a/scripts/miscellaneous/edit.m b/scripts/miscellaneous/edit.m
--- a/scripts/miscellaneous/edit.m
+++ b/scripts/miscellaneous/edit.m
@@ -17,77 +17,77 @@
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {Command} {} edit @var{name}
 ## @deftypefnx {Command} {} edit @var{field} @var{value}
 ## @deftypefnx {Command} {@var{value} =} edit get @var{field}
 ## Edit the named function, or change editor settings.
 ##
-## If @code{edit} is called with the name of a file or function as
-## its argument it will be opened in the text editor defined by @env{EDITOR}.
+## If @code{edit} is called with the name of a file or function as its
+## argument it will be opened in the text editor defined by @env{EDITOR}.
 ##
 ## @itemize @bullet
 ## @item
-## If the function @var{name} is available in a file on your path and
-## that file is modifiable, then it will be edited in place.  If it
-## is a system function, then it will first be copied to the directory
-## @env{HOME} (see below) and then edited.
-## If no file is found, then the m-file
-## variant, ending with ".m", will be considered.  If still no file
-## is found, then variants with a leading "@@" and then with both a
-## leading "@@" and trailing ".m" will be considered.
+## If the function @var{name} is available in a file on your path and that
+## file is modifiable, then it will be edited in place.  If it is a system
+## function, then it will first be copied to the directory @env{HOME} (see
+## below) and then edited.  If no file is found, then the m-file variant,
+## ending with @qcode{".m"}, will be considered.  If still no file is found,
+## then variants with a leading @qcode{"@@"} and then with both a leading
+## @qcode{"@@"} and trailing @qcode{".m"} will be considered.
 ##
 ## @item
-## If @var{name} is the name of a function defined in the interpreter but
-## not in an m-file, then an m-file will be created in @env{HOME}
-## to contain that function along with its current definition.
+## If @var{name} is the name of a function defined in the interpreter but not
+## in an m-file, then an m-file will be created in @env{HOME} to contain that
+## function along with its current definition.
 ##
 ## @item
 ## If @code{@var{name}.cc} is specified, then it will search for
 ## @code{@var{name}.cc} in the path and try to modify it, otherwise it will
 ## create a new @file{.cc} file in the current directory.  If @var{name} happens
 ## to be an m-file or interpreter defined function, then the text of that
 ## function will be inserted into the .cc file as a comment.
 ##
 ## @item
 ## If @file{@var{name}.ext} is on your path then it will be edited, otherwise
 ## the editor will be started with @file{@var{name}.ext} in the current
 ## directory as the filename.  If @file{@var{name}.ext} is not modifiable,
 ## it will be copied to @env{HOME} before editing.
 ##
 ## @strong{Warning:} You may need to clear @var{name} before the new definition
-## is available.  If you are editing a .cc file, you will need
-## to execute @code{mkoctfile @file{@var{name}.cc}} before the definition
-## will be available.
+## is available.  If you are editing a .cc file, you will need to execute
+## @code{mkoctfile @file{@var{name}.cc}} before the definition will be
+## available.
 ## @end itemize
 ##
-## If @code{edit} is called with @var{field} and @var{value} variables,
-## the value of the control field @var{field} will be set to @var{value}.
-## If an output argument is requested and the first input argument is @code{get}
-## then @code{edit} will return the value of the control field @var{field}.
+## If @code{edit} is called with @var{field} and @var{value} variables, the
+## value of the control field @var{field} will be set to @var{value}.  If an
+## output argument is requested and the first input argument is @code{get}
+## then @code{edit} will return the value of the control field @var{field}. 
 ## If the control field does not exist, edit will return a structure
-## containing all fields and values.  Thus, @code{edit get all} returns
-## a complete control structure.
+## containing all fields and values.  Thus, @code{edit get all} returns a
+## complete control structure.
+##
 ## The following control fields are used:
 ##
 ## @table @samp
 ## @item home
-## This is the location of user local m-files.  Be sure it is in your
-## path.  The default is @file{~/octave}.
+## This is the location of user local m-files.  Be sure it is in your path. 
+## The default is @file{~/octave}.
 ##
 ## @item author
-## This is the name to put after the "## Author:" field of new functions.
-## By default it guesses from the @code{gecos} field of the password database.
+## This is the name to put after the "## Author:" field of new functions.  By
+## default it guesses from the @code{gecos} field of the password database.
 ##
 ## @item email
-## This is the e-mail address to list after the name in the author field.
-## By default it guesses @code{<$LOGNAME@@$HOSTNAME>}, and if @code{$HOSTNAME}
-## is not defined it uses @code{uname -n}.  You probably want to override this.
-## Be sure to use the format @code{<user@@host>}.
+## This is the e-mail address to list after the name in the author field.  By
+## default it guesses @code{<$LOGNAME@@$HOSTNAME>}, and if @code{$HOSTNAME}
+## is not defined it uses @code{uname -n}.  You probably want to override
+## this.  Be sure to use the format @code{@email{user@@host}}.
 ##
 ## @item license
 ##
 ## @table @samp
 ## @item gpl
 ## GNU General Public License (default).
 ##
 ## @item bsd
diff --git a/scripts/miscellaneous/error_ids.m b/scripts/miscellaneous/error_ids.m
--- a/scripts/miscellaneous/error_ids.m
+++ b/scripts/miscellaneous/error_ids.m
@@ -35,18 +35,18 @@
 ## @item Octave:invalid-indexing
 ## Indicates that a data-type was indexed incorrectly, e.g., real-value index
 ## for arrays, nonexistent field of a structure.
 ##
 ## @item Octave:bad-alloc
 ## Indicates that memory couldn't be allocated.
 ##
 ## @item Octave:undefined-function
-## Indicates a call to a function that is not defined.  The function may
-## exist but Octave is unable to find it in the search path.
+## Indicates a call to a function that is not defined.  The function may exist
+## but Octave is unable to find it in the search path.
 ##
 ## @end table
 ##
 
 function error_ids ()
   help ("error_ids");
 endfunction
 
diff --git a/scripts/miscellaneous/fileattrib.m b/scripts/miscellaneous/fileattrib.m
--- a/scripts/miscellaneous/fileattrib.m
+++ b/scripts/miscellaneous/fileattrib.m
@@ -15,18 +15,18 @@
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {[@var{status}, @var{result}, @var{msgid}] =} fileattrib (@var{file})
 ## Return information about @var{file}.
 ##
-## If successful, @var{status} is 1, with @var{result} containing a
-## structure with the following fields:
+## If successful, @var{status} is 1, with @var{result} containing a structure
+## with the following fields:
 ##
 ## @table @code
 ## @item Name
 ## Full name of @var{file}.
 ##
 ## @item archive
 ## True if @var{file} is an archive (Windows).
 ##
@@ -37,40 +37,36 @@
 ## True if @var{file} is a hidden file (Windows).
 ##
 ## @item directory
 ## True if @var{file} is a directory.
 ##
 ## @item  UserRead
 ## @itemx GroupRead
 ## @itemx OtherRead
-## True if the user (group; other users) has read permission for
-## @var{file}.
+## True if the user (group; other users) has read permission for @var{file}.
 ##
 ## @item  UserWrite
 ## @itemx GroupWrite
 ## @itemx OtherWrite
-## True if the user (group; other users) has write permission for
-## @var{file}.
+## True if the user (group; other users) has write permission for @var{file}.
 ##
 ## @item  UserExecute
 ## @itemx GroupExecute
 ## @itemx OtherExecute
-## True if the user (group; other users) has execute permission for
-## @var{file}.
+## True if the user (group; other users) has execute permission for @var{file}.
 ## @end table
 ##
-## If an attribute does not apply (i.e., archive on a Unix system) then
-## the field is set to NaN.
+## If an attribute does not apply (i.e., archive on a Unix system) then the
+## field is set to NaN.
 ##
-## With no input arguments, return information about the current
-## directory.
+## With no input arguments, return information about the current directory.
 ##
-## If @var{file} contains globbing characters, return information about
-## all the matching files.
+## If @var{file} contains globbing characters, return information about all
+## the matching files.
 ## @seealso{glob}
 ## @end deftypefn
 
 function [status, msg, msgid] = fileattrib (file)
 
   status = true;
   msg = "";
   msgid = "";
diff --git a/scripts/miscellaneous/fullfile.m b/scripts/miscellaneous/fullfile.m
--- a/scripts/miscellaneous/fullfile.m
+++ b/scripts/miscellaneous/fullfile.m
@@ -16,36 +16,36 @@
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {@var{filename} =} fullfile (@var{dir1}, @var{dir2}, @dots{}, @var{file})
 ## @deftypefnx {Function File} {@var{filenames} =} fullfile (@dots{}, @var{files})
 ## Build complete filename from separate parts.
 ##
-## Joins any number of path components intelligently.  The return value
-## is the concatenation of each component with exactly one file separator
+## Joins any number of path components intelligently.  The return value is
+## the concatenation of each component with exactly one file separator
 ## between each non empty part and at most one leading and/or trailing file
 ## separator.
 ##
 ## If the last component part is a cell array, returns a cell array of
 ## filepaths, one for each element in the last component, e.g.:
 ##
 ## @example
 ## @group
 ## fullfile ("/home/username", "data", @{"f1.csv", "f2.csv", "f3.csv"@})
 ## @result{}  /home/username/data/f1.csv
 ##     /home/username/data/f2.csv
 ##     /home/username/data/f3.csv
 ## @end group
 ## @end example
 ##
-## On Windows systems, while forward slash file separators do work, they
-## are replaced by backslashes; in addition drive letters are stripped of
-## leading file separators to obtain a valid file path.
+## On Windows systems, while forward slash file separators do work, they are
+## replaced by backslashes; in addition drive letters are stripped of leading
+## file separators to obtain a valid file path.
 ##
 ## @seealso{fileparts, filesep}
 ## @end deftypefn
 
 ## Author: Carnë Draug <carandraug@octave.org>
 
 function filename = fullfile (varargin)
 
diff --git a/scripts/miscellaneous/genvarname.m b/scripts/miscellaneous/genvarname.m
--- a/scripts/miscellaneous/genvarname.m
+++ b/scripts/miscellaneous/genvarname.m
@@ -16,45 +16,45 @@
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {@var{varname} =} genvarname (@var{str})
 ## @deftypefnx {Function File} {@var{varname} =} genvarname (@var{str}, @var{exclusions})
 ## Create valid unique variable name(s) from @var{str}.
 ##
-## If @var{str} is a cellstr, then a unique variable is created for each
-## cell in @var{str}.
+## If @var{str} is a cellstr, then a unique variable is created for each cell
+## in @var{str}.
 ##
 ## @example
 ## @group
 ## genvarname (@{"foo", "foo"@})
 ##   @result{}
 ##      @{
 ##        [1,1] = foo
 ##        [1,2] = foo1
 ##      @}
 ## @end group
 ## @end example
 ##
 ## If @var{exclusions} is given, then the variable(s) will be unique to each
-## other and to @var{exclusions} (@var{exclusions} may be either a string or
-## a cellstr).
+## other and to @var{exclusions} (@var{exclusions} may be either a string or a
+## cellstr).
 ##
 ## @example
 ## @group
 ## x = 3.141;
 ## genvarname ("x", who ())
 ##   @result{} x1
 ## @end group
 ## @end example
 ##
 ## Note that the result is a char array or cell array of strings, not the
-## variables themselves.  To define a variable, @code{eval()} can be
-## used.  The following trivial example sets @code{x} to @code{42}.
+## variables themselves.  To define a variable, @code{eval()} can be used. 
+## The following trivial example sets @code{x} to @code{42}.
 ##
 ## @example
 ## @group
 ## name = genvarname ("x");
 ## eval ([name " = 42"]);
 ##   @result{} x =  42
 ## @end group
 ## @end example
@@ -73,18 +73,18 @@
 ##        a1 =  2
 ##        a2 =  3
 ##      @}
 ## @end group
 ## @end example
 ##
 ## Since variable names may only contain letters, digits, and underscores,
 ## @code{genvarname} will replace any sequence of disallowed characters with
-## an underscore.  Also, variables may not begin with a digit; in this
-## case an @samp{x} is added before the variable name.
+## an underscore.  Also, variables may not begin with a digit; in this case
+## an @samp{x} is added before the variable name.
 ##
 ## Variable names beginning and ending with two underscores @qcode{"__"} are
 ## valid, but they are used internally by Octave and should generally be
 ## avoided; therefore, @code{genvarname} will not generate such names.
 ##
 ## @code{genvarname} will also ensure that returned names do not clash with
 ## keywords such as @qcode{"for"} and @qcode{"if"}.  A number will be
 ## appended if necessary.  Note, however, that this does @strong{not} include
diff --git a/scripts/miscellaneous/gzip.m b/scripts/miscellaneous/gzip.m
--- a/scripts/miscellaneous/gzip.m
+++ b/scripts/miscellaneous/gzip.m
@@ -16,26 +16,26 @@
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {@var{filelist} =} gzip (@var{files})
 ## @deftypefnx {Function File} {@var{filelist} =} gzip (@var{files}, @var{dir})
 ## Compress the list of files and directories specified in @var{files}.
 ##
-## @var{files} is a character array or cell array of strings.  Shell
-## wildcards in the filename such as @samp{*} or @samp{?} are accepted and
-## expanded.  Each file is compressed separately and a new file with a
-## @file{".gz"} extension is created.  The original files are not modified,
-## but existing compressed files will be silently overwritten.  If a directory
-## is specified then @code{gzip} recursively compresses all files in the
+## @var{files} is a character array or cell array of strings.  Shell wildcards
+## in the filename such as @samp{*} or @samp{?} are accepted and expanded.
+## Each file is compressed separately and a new file with a @file{".gz"}
+## extension is created.  The original files are not modified, but existing
+## compressed files will be silently overwritten.  If a directory is
+## specified then @code{gzip} recursively compresses all files in the
 ## directory.
 ##
 ## If @var{dir} is defined the compressed files are placed in this directory,
-## rather than the original directory where the uncompressed file resides.
+## rather than the original directory where the uncompressed file resides. 
 ## If @var{dir} does not exist it is created.
 ##
 ## The optional output @var{filelist} is a list of the compressed files.
 ## @seealso{gunzip, unpack, bzip2, zip, tar}
 ## @end deftypefn
 
 function filelist = gzip (varargin)
 
diff --git a/scripts/miscellaneous/mkoctfile.m b/scripts/miscellaneous/mkoctfile.m
--- a/scripts/miscellaneous/mkoctfile.m
+++ b/scripts/miscellaneous/mkoctfile.m
@@ -15,25 +15,25 @@
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {Command} {} mkoctfile [-options] file @dots{}
 ## @deftypefnx {Function File} {[@var{output}, @var{status}] =} mkoctfile (@dots{})
 ##
-## The @code{mkoctfile} function compiles source code written in C,
-## C++, or Fortran.  Depending on the options used with @code{mkoctfile}, the
+## The @code{mkoctfile} function compiles source code written in C, C++, or
+## Fortran.  Depending on the options used with @code{mkoctfile}, the
 ## compiled code can be called within Octave or can be used as a stand-alone
 ## application.
 ##
 ## @code{mkoctfile} can be called from the shell prompt or from the Octave
-## prompt.  Calling it from the Octave prompt simply delegates the
-## call to the shell prompt.  The output is stored in the @var{output}
-## variable and the exit status in the @var{status} variable.
+## prompt.  Calling it from the Octave prompt simply delegates the call to
+## the shell prompt.  The output is stored in the @var{output} variable and
+## the exit status in the @var{status} variable.
 ##
 ## @code{mkoctfile} accepts the following options, all of which are optional
 ## except for the file name of the code you wish to compile:
 ##
 ## @table @samp
 ## @item -I DIR
 ## Add the include directory DIR to compile commands.
 ##
@@ -64,19 +64,18 @@
 ## @item -c
 ## Compile but do not link.
 ##
 ## @item -g
 ## Enable debugging options for compilers.
 ##
 ## @item  -o FILE
 ## @itemx --output FILE
-## Output file name.  Default extension is .oct
-## (or .mex if @samp{--mex} is specified) unless linking
-## a stand-alone executable.
+## Output file name.  Default extension is .oct (or .mex if @samp{--mex} is
+## specified) unless linking a stand-alone executable.
 ##
 ## @item  -p VAR
 ## @itemx --print VAR
 ## Print the configuration variable VAR@.  Recognized variables are:
 ##
 ## @example
 ##    ALL_CFLAGS                  INCFLAGS
 ##    ALL_CXXFLAGS                INCLUDEDIR
@@ -106,18 +105,18 @@
 ##    FLIBS                       XTRA_CFLAGS
 ##    FPICFLAG                    XTRA_CXXFLAGS
 ## @end example
 ##
 ## @item --link-stand-alone
 ## Link a stand-alone executable file.
 ##
 ## @item --mex
-## Assume we are creating a MEX file.  Set the default output extension
-## to ".mex".
+## Assume we are creating a MEX file.  Set the default output extension to
+## ".mex".
 ##
 ## @item  -s
 ## @itemx --strip
 ## Strip the output file.
 ##
 ## @item  -v
 ## @itemx --verbose
 ## Echo commands as they are executed.
diff --git a/scripts/miscellaneous/news.m b/scripts/miscellaneous/news.m
--- a/scripts/miscellaneous/news.m
+++ b/scripts/miscellaneous/news.m
@@ -17,16 +17,17 @@
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {Command} {} news
 ## @deftypefnx {Command} {} news @var{package}
 ## Display the current NEWS file for Octave or an installed package.
 ##
 ## When called without an argument, display the NEWS file for Octave.
+##
 ## When given a package name @var{package}, display the current NEWS file for
 ## that package.
 ## @seealso{ver, pkg}
 ## @end deftypefn
 
 function news (package = "octave")
 
   if (nargin > 1)
diff --git a/scripts/miscellaneous/open.m b/scripts/miscellaneous/open.m
--- a/scripts/miscellaneous/open.m
+++ b/scripts/miscellaneous/open.m
@@ -14,18 +14,18 @@
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {@var{output} =} open @var{file}
 ## @deftypefnx {Function File} {@var{output} =} open (@var{file})
-## Open the file @var{file} in Octave or in an external application
-## based on the file type as determined by the file name extension.
+## Open the file @var{file} in Octave or in an external application based on
+## the file type as determined by the file name extension.
 ##
 ## Recognized file types are
 ##
 ## @table @code
 ## @item .m
 ## Open file in the editor.
 ##
 ## @item .mat
diff --git a/scripts/miscellaneous/parseparams.m b/scripts/miscellaneous/parseparams.m
--- a/scripts/miscellaneous/parseparams.m
+++ b/scripts/miscellaneous/parseparams.m
@@ -16,18 +16,20 @@
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {[@var{reg}, @var{prop}] =} parseparams (@var{params})
 ## @deftypefnx {Function File} {[@var{reg}, @var{var1}, @dots{}] =} parseparams (@var{params}, @var{name1}, @var{default1}, @dots{})
 ## Return in @var{reg} the cell elements of @var{param} up to the first
-## string element and in @var{prop} all remaining elements beginning
-## with the first string element.  For example:
+## string element and in @var{prop} all remaining elements beginning with the
+## first string element.
+##
+## For example:
 ##
 ## @example
 ## @group
 ## [reg, prop] = parseparams (@{1, 2, "linewidth", 10@})
 ## reg =
 ## @{
 ##   [1,1] = 1
 ##   [1,2] = 2
@@ -35,26 +37,28 @@
 ## prop =
 ## @{
 ##   [1,1] = linewidth
 ##   [1,2] = 10
 ## @}
 ## @end group
 ## @end example
 ##
-## The parseparams function may be used to separate regular numeric
-## arguments from additional arguments given as property/value pairs of
-## the @var{varargin} cell array.
+## The parseparams function may be used to separate regular numeric arguments
+## from additional arguments given as property/value pairs of the
+## @var{varargin} cell array.
 ##
 ## In the second form of the call, available options are specified directly
-## with their default values given as name-value pairs.
-## If @var{params} do not form name-value pairs, or if an option occurs
-## that does not match any of the available options, an error occurs.
-## When called from an m-file function, the error is prefixed with the
-## name of the caller function.
+## with their default values given as name-value pairs.  If @var{params} do
+## not form name-value pairs, or if an option occurs that does not match any
+## of the available options, an error occurs.
+##
+## When called from an m-file function, the error is prefixed with the name
+## of the caller function.
+##
 ## The matching of options is case-insensitive.
 ##
 ## @seealso{varargin, inputParser}
 ## @end deftypefn
 
 ## Author: Alexander Barth <abarth93@users.sourceforge.net>
 ## Author: Aida Alvera Azcarate <aida@netecho.info>
 
diff --git a/scripts/miscellaneous/recycle.m b/scripts/miscellaneous/recycle.m
--- a/scripts/miscellaneous/recycle.m
+++ b/scripts/miscellaneous/recycle.m
@@ -22,18 +22,17 @@
 ## Query or set the preference for recycling deleted files.
 ##
 ## When recycling is enabled, commands which would permanently erase files
 ## instead move them to a temporary location (such as the directory labeled
 ## Trash).
 ##
 ## Programming Note: This function is provided for @sc{matlab} compatibility,
 ## but recycling is not implemented in Octave.  To help avoid accidental data
-## loss an error will be raised if an attempt is made to enable file
-## recycling.
+## loss an error will be raised if an attempt is made to enable file recycling.
 ## @seealso{delete, rmdir}
 ## @end deftypefn
 
 ## Author: jwe
 
 function retval = recycle (state)
 
   persistent current_state = "off";
diff --git a/scripts/miscellaneous/run.m b/scripts/miscellaneous/run.m
--- a/scripts/miscellaneous/run.m
+++ b/scripts/miscellaneous/run.m
@@ -16,19 +16,19 @@
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {Command} {} run @var{script}
 ## @deftypefnx {Function File} {} run ("@var{script}")
 ## Run @var{script} in the current workspace.
 ##
-## Scripts which reside in directories specified in Octave's load
-## path, and which end with the extension @file{".m"}, can be run simply by
-## typing their name.  For scripts not located on the load path, use @code{run}.
+## Scripts which reside in directories specified in Octave's load path, and
+## which end with the extension @file{".m"}, can be run simply by typing
+## their name.  For scripts not located on the load path, use @code{run}.
 ##
 ## The file name @var{script} can be a bare, fully qualified, or relative
 ## filename and with or without a file extension.  If no extension is specified,
 ## Octave will first search for a script with the @file{".m"} extension before
 ## falling back to the script name without an extension.
 ##
 ## Implementation Note: If @var{script} includes a path component, then
 ## @code{run} first changes the working directory to the directory where
diff --git a/scripts/miscellaneous/swapbytes.m b/scripts/miscellaneous/swapbytes.m
--- a/scripts/miscellaneous/swapbytes.m
+++ b/scripts/miscellaneous/swapbytes.m
@@ -13,18 +13,18 @@
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} swapbytes (@var{x})
-## Swap the byte order on values, converting from little endian to big
-## endian and vice versa.
+## Swap the byte order on values, converting from little endian to big endian
+## and vice versa.
 ##
 ## For example:
 ##
 ## @example
 ## @group
 ## swapbytes (uint16 (1:4))
 ## @result{} [   256   512   768  1024]
 ## @end group
diff --git a/scripts/miscellaneous/tar.m b/scripts/miscellaneous/tar.m
--- a/scripts/miscellaneous/tar.m
+++ b/scripts/miscellaneous/tar.m
@@ -17,20 +17,20 @@
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {@var{filelist} =} tar (@var{tarfile}, @var{files})
 ## @deftypefnx {Function File} {@var{filelist} =} tar (@var{tarfile}, @var{files}, @var{rootdir})
 ## Pack the list of files and directories specified in @var{files} into the
 ## TAR archive @var{tarfile}.
 ##
-## @var{files} is a character array or cell array of strings.  Shell
-## wildcards in the filename such as @samp{*} or @samp{?} are accepted and
-## expanded.  Directories are recursively traversed and all files are added to
-## the archive.
+## @var{files} is a character array or cell array of strings.  Shell wildcards
+## in the filename such as @samp{*} or @samp{?} are accepted and expanded.
+## Directories are recursively traversed and all files are added to the
+## archive.
 ##
 ## If @var{rootdir} is defined then any files without absolute pathnames are
 ## located relative to @var{rootdir} rather than the current directory.
 ##
 ## The optional output @var{filelist} is a list of the files that were included
 ## in the archive.
 ## @seealso{untar, unpack, bzip2, gzip, zip}
 ## @end deftypefn
diff --git a/scripts/miscellaneous/tmpnam.m b/scripts/miscellaneous/tmpnam.m
--- a/scripts/miscellaneous/tmpnam.m
+++ b/scripts/miscellaneous/tmpnam.m
@@ -18,16 +18,17 @@
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {@var{fname} =} tmpnam ()
 ## @deftypefnx {Function File} {@var{fname} =} tmpnam (@var{dir})
 ## @deftypefnx {Function File} {@var{fname} =} tmpnam (@var{dir}, @var{prefix})
 ## Return a unique temporary file name as a string.
 ##
 ## If @var{prefix} is omitted, a value of @qcode{"oct-"} is used.
+##
 ## If @var{dir} is also omitted, the default directory for temporary files
 ## (@code{P_tmpdir} is used.  If @var{dir} is provided, it must exist,
 ## otherwise the default directory for temporary files is used.
 ##
 ## Programming Note: Because the named file is not opened by @code{tmpnam},
 ## it is possible, though relatively unlikely, that it will not be available
 ## by the time your program attempts to open it.  If this is a concern,
 ## see @code{tmpfile}.  The functions @code{tmpnam} and @code{tempname} are
diff --git a/scripts/miscellaneous/unpack.m b/scripts/miscellaneous/unpack.m
--- a/scripts/miscellaneous/unpack.m
+++ b/scripts/miscellaneous/unpack.m
@@ -19,18 +19,18 @@
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {@var{files} =} unpack (@var{file})
 ## @deftypefnx {Function File} {@var{files} =} unpack (@var{file}, @var{dir})
 ## @deftypefnx {Function File} {@var{files} =} unpack (@var{file}, @var{dir}, @var{filetype})
 ## Unpack the archive @var{file} based on its extension to the directory
 ## @var{dir}.
 ##
 ## If @var{file} is a list of strings, then each file is unpacked
-## individually.  Shell wildcards in the filename such as @samp{*} or @samp{?}
-## are accepted and expanded.
+## individually.  Shell wildcards in the filename such as @samp{*} or
+## @samp{?} are accepted and expanded.
 ##
 ## If @var{dir} is not specified or is empty (@code{[]}), it defaults to the
 ## current directory.  If a directory is in the file list, then @var{filetype}
 ## must also be specified.
 ##
 ## The specific archive filetype is inferred from the extension of the file.
 ## The @var{filetype} may also be specified directly using a string which
 ## corresponds to a known extension.
diff --git a/scripts/miscellaneous/what.m b/scripts/miscellaneous/what.m
--- a/scripts/miscellaneous/what.m
+++ b/scripts/miscellaneous/what.m
@@ -54,19 +54,19 @@
 ##
 ## @item classes
 ## Cell array of class directories (@file{@@@var{classname}/})
 ##
 ## @item packages
 ## Cell array of package directories (@file{+@var{pkgname}/})
 ## @end table
 ##
-## Compatibility Note: Octave does not support mdl, slx, and p files; nor
-## does it support package directories.  @code{what} will always return an
-## empty list for these categories.
+## Compatibility Note: Octave does not support mdl, slx, and p files; nor does
+## it support package directories.  @code{what} will always return an empty
+## list for these categories.
 ## @seealso{which, ls, exist}
 ## @end deftypefn
 
 function retval = what (dir)
 
   if (nargin > 1)
     print_usage ();
   endif
diff --git a/scripts/optimization/fminbnd.m b/scripts/optimization/fminbnd.m
--- a/scripts/optimization/fminbnd.m
+++ b/scripts/optimization/fminbnd.m
@@ -24,36 +24,37 @@
 ##
 ## @var{fun} should be a function handle or name.  @var{a}, @var{b} specify a
 ## starting interval.  @var{options} is a structure specifying additional
 ## options.  Currently, @code{fminbnd} recognizes these options:
 ## @qcode{"FunValCheck"}, @qcode{"OutputFcn"}, @qcode{"TolX"},
 ## @qcode{"MaxIter"}, @qcode{"MaxFunEvals"}.  For a description of these
 ## options, see @ref{XREFoptimset,,optimset}.
 ##
-## On exit, the function returns @var{x}, the approximate minimum point
-## and @var{fval}, the function value thereof.
+## On exit, the function returns @var{x}, the approximate minimum point and
+## @var{fval}, the function value thereof.
+##
 ## @var{info} is an exit flag that can have these values:
 ##
 ## @itemize
 ## @item 1
 ## The algorithm converged to a solution.
 ##
 ## @item 0
 ## Maximum number of iterations or function evaluations has been exhausted.
 ##
 ## @item -1
 ## The algorithm has been terminated from user output function.
 ## @end itemize
 ##
-## Notes: The search for a minimum is restricted to be in the interval
-## bound by @var{a} and @var{b}.  If you only have an initial point
-## to begin searching from you will need to use an unconstrained
-## minimization algorithm such as @code{fminunc} or @code{fminsearch}.
-## @code{fminbnd} internally uses a Golden Section search strategy.
+## Notes: The search for a minimum is restricted to be in the interval bound by
+## @var{a} and @var{b}.  If you only have an initial point to begin searching
+## from you will need to use an unconstrained minimization algorithm such as
+## @code{fminunc} or @code{fminsearch}.  @code{fminbnd} internally uses a
+## Golden Section search strategy.
 ## @seealso{fzero, fminunc, fminsearch, optimset}
 ## @end deftypefn
 
 ## This is patterned after opt/fmin.f from Netlib, which in turn is taken from
 ## Richard Brent: Algorithms For Minimization Without Derivatives,
 ## Prentice-Hall (1973)
 
 ## PKG_ADD: ## Discard result to avoid polluting workspace with ans at startup.
diff --git a/scripts/optimization/fminsearch.m b/scripts/optimization/fminsearch.m
--- a/scripts/optimization/fminsearch.m
+++ b/scripts/optimization/fminsearch.m
@@ -18,29 +18,29 @@
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {@var{x} =} fminsearch (@var{fun}, @var{x0})
 ## @deftypefnx {Function File} {@var{x} =} fminsearch (@var{fun}, @var{x0}, @var{options})
 ## @deftypefnx {Function File} {[@var{x}, @var{fval}] =} fminsearch (@dots{})
 ##
 ## Find a value of @var{x} which minimizes the function @var{fun}.
+##
 ## The search begins at the point @var{x0} and iterates using the
 ## @nospell{Nelder & Mead} Simplex algorithm (a derivative-free method).  This
 ## algorithm is better-suited to functions which have discontinuities or for
 ## which a gradient-based search such as @code{fminunc} fails.
 ##
-## Options for the search are provided in the parameter @var{options} using
-## the function @code{optimset}.  Currently, @code{fminsearch} accepts the
-## options: @qcode{"TolX"}, @qcode{"MaxFunEvals"}, @qcode{"MaxIter"},
-## @qcode{"Display"}.  For a description of these options, see
-## @code{optimset}.
+## Options for the search are provided in the parameter @var{options} using the
+## function @code{optimset}.  Currently, @code{fminsearch} accepts the options:
+## @qcode{"TolX"}, @qcode{"MaxFunEvals"}, @qcode{"MaxIter"}, @qcode{"Display"}.
+## For a description of these options, see @code{optimset}.
 ##
-## On exit, the function returns @var{x}, the minimum point,
-## and @var{fval}, the function value thereof.
+## On exit, the function returns @var{x}, the minimum point, and @var{fval},
+## the function value thereof.
 ##
 ## Example usages:
 ##
 ## @example
 ## @group
 ## fminsearch (@@(x) (x(1)-5).^2+(x(2)-8).^4, [0;0])
 ##
 ## fminsearch (inline ("(x(1)-5).^2+(x(2)-8).^4", "x"), [0;0])
diff --git a/scripts/optimization/fminunc.m b/scripts/optimization/fminunc.m
--- a/scripts/optimization/fminunc.m
+++ b/scripts/optimization/fminunc.m
@@ -20,41 +20,44 @@
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {} fminunc (@var{fcn}, @var{x0})
 ## @deftypefnx {Function File} {} fminunc (@var{fcn}, @var{x0}, @var{options})
 ## @deftypefnx {Function File} {[@var{x}, @var{fval}, @var{info}, @var{output}, @var{grad}, @var{hess}] =} fminunc (@var{fcn}, @dots{})
 ## Solve an unconstrained optimization problem defined by the function
 ## @var{fcn}.
 ##
-## @var{fcn} should accept a vector (array) defining the unknown variables,
-## and return the objective function value, optionally with gradient.
+## @var{fcn} should accept a vector (array) defining the unknown variables, and
+## return the objective function value, optionally with gradient.
 ## @code{fminunc} attempts to determine a vector @var{x} such that
-## @code{@var{fcn} (@var{x})} is a local minimum.  @var{x0} determines a
-## starting guess.  The shape of @var{x0} is preserved in all calls to
-## @var{fcn}, but otherwise is treated as a column vector.
-## @var{options} is a structure specifying additional options.
-## Currently, @code{fminunc} recognizes these options:
+## @code{@var{fcn} (@var{x})} is a local minimum.
+##
+## @var{x0} determines a starting guess.  The shape of @var{x0} is preserved in
+## all calls to @var{fcn}, but otherwise is treated as a column vector.
+##
+## @var{options} is a structure specifying additional options.  Currently,
+## @code{fminunc} recognizes these options:
 ## @qcode{"FunValCheck"}, @qcode{"OutputFcn"}, @qcode{"TolX"},
 ## @qcode{"TolFun"}, @qcode{"MaxIter"}, @qcode{"MaxFunEvals"},
-## @qcode{"GradObj"}, @qcode{"FinDiffType"},
-## @qcode{"TypicalX"}, @qcode{"AutoScaling"}.
+## @qcode{"GradObj"}, @qcode{"FinDiffType"}, @qcode{"TypicalX"},
+## @qcode{"AutoScaling"}.
 ##
-## If @qcode{"GradObj"} is @qcode{"on"}, it specifies that @var{fcn},
-## when called with 2 output arguments, also returns the Jacobian matrix
-## of partial first derivatives at the requested point.
-## @code{TolX} specifies the termination tolerance for the unknown variables
-## @var{x}, while @code{TolFun} is a tolerance for the objective function
-## value @var{fval}.  The default is @code{1e-7} for both options.
+## If @qcode{"GradObj"} is @qcode{"on"}, it specifies that @var{fcn}, when
+## called with 2 output arguments, also returns the Jacobian matrix of partial
+## first derivatives at the requested point.  @code{TolX} specifies the
+## termination tolerance for the unknown variables @var{x}, while @code{TolFun}
+## is a tolerance for the objective function value @var{fval}.  The default is
+## @code{1e-7} for both options.
 ##
 ## For a description of the other options, see @code{optimset}.
 ##
 ## On return, @var{x} is the location of the minimum and @var{fval} contains
-## the value of the objective function at @var{x}.  @var{info} may be one of the
-## following values:
+## the value of the objective function at @var{x}.
+##
+## @var{info} may be one of the following values:
 ##
 ## @table @asis
 ## @item 1
 ## Converged to a solution point.  Relative gradient error is less than
 ## specified by @code{TolFun}.
 ##
 ## @item 2
 ## Last relative step size was less than @code{TolX}.
@@ -72,21 +75,23 @@
 ## @item -3
 ## The trust region radius became excessively small.
 ## @end table
 ##
 ## Optionally, @code{fminunc} can return a structure with convergence statistics
 ## (@var{output}), the output gradient (@var{grad}) at the solution @var{x},
 ## and approximate Hessian (@var{hess}) at the solution @var{x}.
 ##
-## Notes: If have only a single nonlinear equation of one variable then using
-## @code{fminbnd} is usually a much better idea.  The algorithm used is a
-## gradient search which depends on the objective function being differentiable.
-## If the function has discontinuities it may be better to use a derivative-free
-## algorithm such as @code{fminsearch}.
+## Application Notes: If have only a single nonlinear equation of one variable
+## then using @code{fminbnd} is usually a better choice.
+##
+## The algorithm used by @code{fminsearch} is a gradient search which depends
+## on the objective function being differentiable.  If the function has
+## discontinuities it may be better to use a derivative-free algorithm such as
+## @code{fminsearch}.
 ## @seealso{fminbnd, fminsearch, optimset}
 ## @end deftypefn
 
 ## PKG_ADD: ## Discard result to avoid polluting workspace with ans at startup.
 ## PKG_ADD: [~] = __all_opts__ ("fminunc");
 
 function [x, fval, info, output, grad, hess] = fminunc (fcn, x0, options = struct ())
 
diff --git a/scripts/optimization/fsolve.m b/scripts/optimization/fsolve.m
--- a/scripts/optimization/fsolve.m
+++ b/scripts/optimization/fsolve.m
@@ -17,58 +17,63 @@
 ## <http://www.gnu.org/licenses/>.
 ##
 ## Author: Jaroslav Hajek <highegg@gmail.com>
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {} fsolve (@var{fcn}, @var{x0}, @var{options})
 ## @deftypefnx {Function File} {[@var{x}, @var{fvec}, @var{info}, @var{output}, @var{fjac}] =} fsolve (@var{fcn}, @dots{})
 ## Solve a system of nonlinear equations defined by the function @var{fcn}.
+##
 ## @var{fcn} should accept a vector (array) defining the unknown variables,
 ## and return a vector of left-hand sides of the equations.  Right-hand sides
-## are defined to be zeros.
-## In other words, this function attempts to determine a vector @var{x} such
-## that @code{@var{fcn} (@var{x})} gives (approximately) all zeros.
+## are defined to be zeros.  In other words, this function attempts to
+## determine a vector @var{x} such that @code{@var{fcn} (@var{x})} gives
+## (approximately) all zeros.
+##
 ## @var{x0} determines a starting guess.  The shape of @var{x0} is preserved
 ## in all calls to @var{fcn}, but otherwise it is treated as a column vector.
-## @var{options} is a structure specifying additional options.
-## Currently, @code{fsolve} recognizes these options:
+##
+## @var{options} is a structure specifying additional options.  Currently,
+## @code{fsolve} recognizes these options:
 ## @qcode{"FunValCheck"}, @qcode{"OutputFcn"}, @qcode{"TolX"},
 ## @qcode{"TolFun"}, @qcode{"MaxIter"}, @qcode{"MaxFunEvals"},
 ## @qcode{"Jacobian"}, @qcode{"Updating"}, @qcode{"ComplexEqn"}
 ## @qcode{"TypicalX"}, @qcode{"AutoScaling"} and @qcode{"FinDiffType"}.
 ##
-## If @qcode{"Jacobian"} is @qcode{"on"}, it specifies that @var{fcn},
-## called with 2 output arguments, also returns the Jacobian matrix
-## of right-hand sides at the requested point.  @qcode{"TolX"} specifies
-## the termination tolerance in the unknown variables, while
-## @qcode{"TolFun"} is a tolerance for equations.  Default is @code{1e-7}
-## for both @qcode{"TolX"} and @qcode{"TolFun"}.
+## If @qcode{"Jacobian"} is @qcode{"on"}, it specifies that @var{fcn}, called
+## with 2 output arguments also returns the Jacobian matrix of right-hand sides
+## at the requested point.  @qcode{"TolX"} specifies the termination tolerance
+## in the unknown variables, while @qcode{"TolFun"} is a tolerance for
+## equations.  Default is @code{1e-7} for both @qcode{"TolX"} and
+## @qcode{"TolFun"}.
 ##
 ## If @qcode{"AutoScaling"} is on, the variables will be automatically scaled
 ## according to the column norms of the (estimated) Jacobian.  As a result,
-## TolF becomes scaling-independent.  By default, this option is off, because
+## TolF becomes scaling-independent.  By default, this option is off because
 ## it may sometimes deliver unexpected (though mathematically correct) results.
 ##
 ## If @qcode{"Updating"} is @qcode{"on"}, the function will attempt to use
 ## @nospell{Broyden} updates to update the Jacobian, in order to reduce the
 ## amount of Jacobian calculations.  If your user function always calculates the
-## Jacobian (regardless of number of output arguments), this option provides
+## Jacobian (regardless of number of output arguments) then this option provides
 ## no advantage and should be set to false.
 ##
 ## @qcode{"ComplexEqn"} is @qcode{"on"}, @code{fsolve} will attempt to solve
-## complex equations in complex variables, assuming that the equations possess a
-## complex derivative (i.e., are holomorphic).  If this is not what you want,
-## should unpack the real and imaginary parts of the system to get a real
+## complex equations in complex variables, assuming that the equations possess
+## a complex derivative (i.e., are holomorphic).  If this is not what you want,
+## you should unpack the real and imaginary parts of the system to get a real
 ## system.
 ##
 ## For description of the other options, see @code{optimset}.
 ##
 ## On return, @var{fval} contains the value of the function @var{fcn}
-## evaluated at @var{x}, and @var{info} may be one of the following values:
+## evaluated at @var{x}.
+##
+## @var{info} may be one of the following values:
 ##
 ## @table @asis
 ## @item 1
 ## Converged to a solution point.  Relative residual error is less than
 ## specified by TolFun.
 ##
 ## @item 2
 ## Last relative step size was less that TolX.
@@ -82,18 +87,18 @@
 ## @item -3
 ## The trust region radius became excessively small.
 ## @end table
 ##
 ## Note: If you only have a single nonlinear equation of one variable, using
 ## @code{fzero} is usually a much better idea.
 ##
 ## Note about user-supplied Jacobians:
-## As an inherent property of the algorithm, Jacobian is always requested for a
-## solution vector whose residual vector is already known, and it is the last
+## As an inherent property of the algorithm, a Jacobian is always requested for
+## a solution vector whose residual vector is already known, and it is the last
 ## accepted successful step.  Often this will be one of the last two calls, but
 ## not always.  If the savings by reusing intermediate results from residual
 ## calculation in Jacobian calculation are significant, the best strategy is to
 ## employ OutputFcn: After a vector is evaluated for residuals, if OutputFcn is
 ## called with that vector, then the intermediate results should be saved for
 ## future Jacobian evaluation, and should be kept until a Jacobian evaluation
 ## is requested or until OutputFcn is called with a different vector, in which
 ## case they should be dropped in favor of this most recent vector.  A short
diff --git a/scripts/optimization/fzero.m b/scripts/optimization/fzero.m
--- a/scripts/optimization/fzero.m
+++ b/scripts/optimization/fzero.m
@@ -19,38 +19,41 @@
 ## Author: Jaroslav Hajek <highegg@gmail.com>
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {} fzero (@var{fun}, @var{x0})
 ## @deftypefnx {Function File} {} fzero (@var{fun}, @var{x0}, @var{options})
 ## @deftypefnx {Function File} {[@var{x}, @var{fval}, @var{info}, @var{output}] =} fzero (@dots{})
 ## Find a zero of a univariate function.
 ##
-## @var{fun} is a function handle, inline function, or string
-## containing the name of the function to evaluate.
+## @var{fun} is a function handle, inline function, or string containing the
+## name of the function to evaluate.
+##
 ## @var{x0} should be a two-element vector specifying two points which
 ## bracket a zero.  In other words, there must be a change in sign of the
 ## function between @var{x0}(1) and @var{x0}(2).  More mathematically, the
 ## following must hold
 ##
 ## @example
 ## sign (@var{fun}(@var{x0}(1))) * sign (@var{fun}(@var{x0}(2))) <= 0
 ## @end example
 ##
-## If @var{x0} is a single scalar then several nearby and distant
-## values are probed in an attempt to obtain a valid bracketing.  If this
-## is not successful, the function fails.
-## @var{options} is a structure specifying additional options.
-## Currently, @code{fzero}
-## recognizes these options: @qcode{"FunValCheck"}, @qcode{"OutputFcn"},
-## @qcode{"TolX"}, @qcode{"MaxIter"}, @qcode{"MaxFunEvals"}.
+## If @var{x0} is a single scalar then several nearby and distant values are
+## probed in an attempt to obtain a valid bracketing.  If this is not
+## successful, the function fails.
+##
+## @var{options} is a structure specifying additional options.  Currently,
+## @code{fzero} recognizes these options:
+## @qcode{"FunValCheck"}, @qcode{"OutputFcn"}, @qcode{"TolX"},
+## @qcode{"MaxIter"}, @qcode{"MaxFunEvals"}.
 ## For a description of these options, see @ref{XREFoptimset,,optimset}.
 ##
-## On exit, the function returns @var{x}, the approximate zero point
-## and @var{fval}, the function value thereof.
+## On exit, the function returns @var{x}, the approximate zero point and
+## @var{fval}, the function value thereof.
+##
 ## @var{info} is an exit flag that can have these values:
 ##
 ## @itemize
 ## @item 1
 ##  The algorithm converged to a solution.
 ##
 ## @item 0
 ##  Maximum number of iterations or function evaluations has been reached.
diff --git a/scripts/optimization/glpk.m b/scripts/optimization/glpk.m
--- a/scripts/optimization/glpk.m
+++ b/scripts/optimization/glpk.m
@@ -14,18 +14,19 @@
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {[@var{xopt}, @var{fmin}, @var{errnum}, @var{extra}] =} glpk (@var{c}, @var{A}, @var{b}, @var{lb}, @var{ub}, @var{ctype}, @var{vartype}, @var{sense}, @var{param})
-## Solve a linear program using the GNU @sc{glpk} library.  Given three
-## arguments, @code{glpk} solves the following standard LP:
+## Solve a linear program using the GNU @sc{glpk} library.
+##
+## Given three arguments, @code{glpk} solves the following standard LP:
 ## @tex
 ## $$
 ##   \min_x C^T x
 ## $$
 ## @end tex
 ## @ifnottex
 ##
 ## @example
@@ -85,33 +86,31 @@
 ## @table @var
 ## @item c
 ## A column array containing the objective function coefficients.
 ##
 ## @item A
 ## A matrix containing the constraints coefficients.
 ##
 ## @item b
-## A column array containing the right-hand side value for each constraint
-## in the constraint matrix.
+## A column array containing the right-hand side value for each constraint in
+## the constraint matrix.
 ##
 ## @item lb
-## An array containing the lower bound on each of the variables.  If
-## @var{lb} is not supplied, the default lower bound for the variables is
-## zero.
+## An array containing the lower bound on each of the variables.  If @var{lb}
+## is not supplied, the default lower bound for the variables is zero.
 ##
 ## @item ub
-## An array containing the upper bound on each of the variables.  If
-## @var{ub} is not supplied, the default upper bound is assumed to be
-## infinite.
+## An array containing the upper bound on each of the variables.  If @var{ub}
+## is not supplied, the default upper bound is assumed to be infinite.
 ##
 ## @item ctype
 ## An array of characters containing the sense of each constraint in the
-## constraint matrix.  Each element of the array may be one of the
-## following values
+## constraint matrix.  Each element of the array may be one of the following
+## values
 ##
 ## @table @asis
 ## @item @qcode{"F"}
 ## A free (unbounded) constraint (the constraint is ignored).
 ##
 ## @item @qcode{"U"}
 ## An inequality constraint with an upper bound (@code{A(i,:)*x <= b(i)}).
 ##
@@ -133,24 +132,24 @@
 ## @item @qcode{"C"}
 ## A continuous variable.
 ##
 ## @item @qcode{"I"}
 ## An integer variable.
 ## @end table
 ##
 ## @item sense
-## If @var{sense} is 1, the problem is a minimization.  If @var{sense} is
-## -1, the problem is a maximization.  The default value is 1.
+## If @var{sense} is 1, the problem is a minimization.  If @var{sense} is -1,
+## the problem is a maximization.  The default value is 1.
 ##
 ## @item param
 ## A structure containing the following parameters used to define the
 ## behavior of solver.  Missing elements in the structure take on default
-## values, so you only need to set the elements that you wish to change
-## from the default.
+## values, so you only need to set the elements that you wish to change from
+## the default.
 ##
 ## Integer parameters:
 ##
 ## @table @code
 ## @item msglev (default: 1)
 ## Level of messages output by solver routines:
 ##
 ## @table @asis
@@ -215,19 +214,18 @@
 ## @end table
 ##
 ## @item itlim (default: intmax)
 ## Simplex iterations limit.  It is decreased by one each time when one simplex
 ## iteration has been performed, and reaching zero value signals the solver to
 ## stop the search.
 ##
 ## @item outfrq (default: 200)
-## Output frequency, in iterations.  This parameter specifies how
-## frequently the solver sends information about the solution to the
-## standard output.
+## Output frequency, in iterations.  This parameter specifies how frequently
+## the solver sends information about the solution to the standard output.
 ##
 ## @item branch (default: 4)
 ## Branching technique option (for MIP only):
 ##
 ## @table @asis
 ## @item 1 (@w{@code{GLP_BR_FFV}})
 ## First fractional variable.
 ##
@@ -288,63 +286,62 @@
 ## Harris' two-pass ratio test.
 ## @end table
 ##
 ## @item tmlim (default: intmax)
 ## Searching time limit, in milliseconds.
 ##
 ## @item outdly (default: 0)
 ## Output delay, in seconds.  This parameter specifies how long the solver
-## should delay sending information about the solution to the standard
-## output.
+## should delay sending information about the solution to the standard output.
 ##
 ## @item save (default: 0)
-## If this parameter is nonzero, save a copy of the problem in
-## CPLEX LP format to the file @file{"outpb.lp"}.  There is currently no
-## way to change the name of the output file.
+## If this parameter is nonzero, save a copy of the problem in CPLEX LP
+## format to the file @file{"outpb.lp"}.  There is currently no way to change
+## the name of the output file.
 ## @end table
 ##
 ## Real parameters:
 ##
 ## @table @code
 ## @item tolbnd (default: 1e-7)
 ## Relative tolerance used to check if the current basic solution is primal
 ## feasible.  It is not recommended that you change this parameter unless you
 ## have a detailed understanding of its purpose.
 ##
 ## @item toldj (default: 1e-7)
 ## Absolute tolerance used to check if the current basic solution is dual
 ## feasible.  It is not recommended that you change this parameter unless you
 ## have a detailed understanding of its purpose.
 ##
 ## @item tolpiv (default: 1e-10)
-## Relative tolerance used to choose eligible pivotal elements of the
-## simplex table.  It is not recommended that you change this parameter unless
-## you have a detailed understanding of its purpose.
+## Relative tolerance used to choose eligible pivotal elements of the simplex
+## table.  It is not recommended that you change this parameter unless you have
+## a detailed understanding of its purpose.
 ##
 ## @item objll (default: -DBL_MAX)
-## Lower limit of the objective function.  If the objective
-## function reaches this limit and continues decreasing, the solver stops
-## the search.  This parameter is used in the dual simplex method only.
+## Lower limit of the objective function.  If the objective function reaches
+## this limit and continues decreasing, the solver stops the search.  This
+## parameter is used in the dual simplex method only.
 ##
 ## @item objul (default: +DBL_MAX)
-## Upper limit of the objective function.  If the objective
-## function reaches this limit and continues increasing, the solver stops
-## the search.  This parameter is used in the dual simplex only.
+## Upper limit of the objective function.  If the objective function reaches
+## this limit and continues increasing, the solver stops the search.  This
+## parameter is used in the dual simplex only.
 ##
 ## @item tolint (default: 1e-5)
 ## Relative tolerance used to check if the current basic solution is integer
-## feasible.  It is not recommended that you change this parameter unless
-## you have a detailed understanding of its purpose.
+## feasible.  It is not recommended that you change this parameter unless you
+## have a detailed understanding of its purpose.
 ##
 ## @item tolobj (default: 1e-7)
-## Relative tolerance used to check if the value of the objective function
-## is not better than in the best known integer feasible solution.  It is
-## not recommended that you change this parameter unless you have a
-## detailed understanding of its purpose.
+## Relative tolerance used to check if the value of the objective function is
+## not better than in the best known integer feasible solution.  It is not
+## recommended that you change this parameter unless you have a detailed
+## understanding of its purpose.
 ## @end table
 ## @end table
 ##
 ## Output values:
 ##
 ## @table @var
 ## @item xopt
 ## The optimizer (the value of the decision variables at the optimum).
diff --git a/scripts/optimization/lsqnonneg.m b/scripts/optimization/lsqnonneg.m
--- a/scripts/optimization/lsqnonneg.m
+++ b/scripts/optimization/lsqnonneg.m
@@ -23,39 +23,43 @@
 ## @deftypefnx {Function File} {@var{x} =} lsqnonneg (@var{c}, @var{d}, @var{x0})
 ## @deftypefnx {Function File} {@var{x} =} lsqnonneg (@var{c}, @var{d}, @var{x0}, @var{options})
 ## @deftypefnx {Function File} {[@var{x}, @var{resnorm}] =} lsqnonneg (@dots{})
 ## @deftypefnx {Function File} {[@var{x}, @var{resnorm}, @var{residual}] =} lsqnonneg (@dots{})
 ## @deftypefnx {Function File} {[@var{x}, @var{resnorm}, @var{residual}, @var{exitflag}] =} lsqnonneg (@dots{})
 ## @deftypefnx {Function File} {[@var{x}, @var{resnorm}, @var{residual}, @var{exitflag}, @var{output}] =} lsqnonneg (@dots{})
 ## @deftypefnx {Function File} {[@var{x}, @var{resnorm}, @var{residual}, @var{exitflag}, @var{output}, @var{lambda}] =} lsqnonneg (@dots{})
 ## Minimize @code{norm (@var{c}*@var{x} - d)} subject to
-## @code{@var{x} >= 0}.  @var{c} and @var{d} must be real.  @var{x0} is an
-## optional initial guess for @var{x}.
-## Currently, @code{lsqnonneg}
-## recognizes these options: @qcode{"MaxIter"}, @qcode{"TolX"}.
-## For a description of these options, see @ref{XREFoptimset,,optimset}.
+## @code{@var{x} >= 0}.
+##
+## @var{c} and @var{d} must be real.
+##
+## @var{x0} is an optional initial guess for @var{x}.
+##
+## Currently, @code{lsqnonneg} recognizes these options: @qcode{"MaxIter"},
+## @qcode{"TolX"}.  For a description of these options, see
+## @ref{XREFoptimset,,optimset}.
 ##
 ## Outputs:
 ##
 ## @itemize @bullet
 ## @item resnorm
 ##
 ## The squared 2-norm of the residual: norm (@var{c}*@var{x}-@var{d})^2
 ##
 ## @item residual
 ##
 ## The residual: @var{d}-@var{c}*@var{x}
 ##
 ## @item exitflag
 ##
-## An indicator of convergence.  0 indicates that the iteration count
-## was exceeded, and therefore convergence was not reached; >0 indicates
-## that the algorithm converged.  (The algorithm is stable and will
-## converge given enough iterations.)
+## An indicator of convergence.  0 indicates that the iteration count was
+## exceeded, and therefore convergence was not reached; >0 indicates that the
+## algorithm converged.  (The algorithm is stable and will converge given
+## enough iterations.)
 ##
 ## @item output
 ##
 ## A structure with two fields:
 ##
 ## @itemize @bullet
 ## @item @qcode{"algorithm"}: The algorithm used (@qcode{"nnls"})
 ##
diff --git a/scripts/optimization/pqpnonneg.m b/scripts/optimization/pqpnonneg.m
--- a/scripts/optimization/pqpnonneg.m
+++ b/scripts/optimization/pqpnonneg.m
@@ -20,33 +20,36 @@
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {@var{x} =} pqpnonneg (@var{c}, @var{d})
 ## @deftypefnx {Function File} {@var{x} =} pqpnonneg (@var{c}, @var{d}, @var{x0})
 ## @deftypefnx {Function File} {[@var{x}, @var{minval}] =} pqpnonneg (@dots{})
 ## @deftypefnx {Function File} {[@var{x}, @var{minval}, @var{exitflag}] =} pqpnonneg (@dots{})
 ## @deftypefnx {Function File} {[@var{x}, @var{minval}, @var{exitflag}, @var{output}] =} pqpnonneg (@dots{})
 ## @deftypefnx {Function File} {[@var{x}, @var{minval}, @var{exitflag}, @var{output}, @var{lambda}] =} pqpnonneg (@dots{})
-## Minimize @code{1/2*x'*c*x + d'*x} subject to @code{@var{x} >= 0}.  @var{c}
-## and @var{d} must be real, and @var{c} must be symmetric and positive
-## definite.  @var{x0} is an optional initial guess for @var{x}.
+## Minimize @code{1/2*x'*c*x + d'*x} subject to @code{@var{x} >= 0}.
+##
+## @var{c} ## and @var{d} must be real, and @var{c} must be symmetric and
+## positive definite.
+##
+## @var{x0} is an optional initial guess for @var{x}.
 ##
 ## Outputs:
 ##
 ## @itemize @bullet
 ## @item minval
 ##
 ## The minimum attained model value, 1/2*xmin'*c*xmin + d'*xmin
 ##
 ## @item exitflag
 ##
-## An indicator of convergence.  0 indicates that the iteration count
-## was exceeded, and therefore convergence was not reached; >0 indicates
-## that the algorithm converged.  (The algorithm is stable and will
-## converge given enough iterations.)
+## An indicator of convergence.  0 indicates that the iteration count was
+## exceeded, and therefore convergence was not reached; >0 indicates that the
+## algorithm converged.  (The algorithm is stable and will converge given
+## enough iterations.)
 ##
 ## @item output
 ##
 ## A structure with two fields:
 ##
 ## @itemize @bullet
 ## @item @qcode{"algorithm"}: The algorithm used (@qcode{"nnls"})
 ##
diff --git a/scripts/optimization/qp.m b/scripts/optimization/qp.m
--- a/scripts/optimization/qp.m
+++ b/scripts/optimization/qp.m
@@ -19,17 +19,19 @@
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {[@var{x}, @var{obj}, @var{info}, @var{lambda}] =} qp (@var{x0}, @var{H})
 ## @deftypefnx {Function File} {[@var{x}, @var{obj}, @var{info}, @var{lambda}] =} qp (@var{x0}, @var{H}, @var{q})
 ## @deftypefnx {Function File} {[@var{x}, @var{obj}, @var{info}, @var{lambda}] =} qp (@var{x0}, @var{H}, @var{q}, @var{A}, @var{b})
 ## @deftypefnx {Function File} {[@var{x}, @var{obj}, @var{info}, @var{lambda}] =} qp (@var{x0}, @var{H}, @var{q}, @var{A}, @var{b}, @var{lb}, @var{ub})
 ## @deftypefnx {Function File} {[@var{x}, @var{obj}, @var{info}, @var{lambda}] =} qp (@var{x0}, @var{H}, @var{q}, @var{A}, @var{b}, @var{lb}, @var{ub}, @var{A_lb}, @var{A_in}, @var{A_ub})
 ## @deftypefnx {Function File} {[@var{x}, @var{obj}, @var{info}, @var{lambda}] =} qp (@dots{}, @var{options})
-## Solve the quadratic program
+## Solve a quadratic program (QP).
+##
+## Solve the quadratic program defined by
 ## @tex
 ## $$
 ##  \min_x {1 \over 2} x^T H x + x^T q
 ## $$
 ## @end tex
 ## @ifnottex
 ##
 ## @example
@@ -55,26 +57,26 @@
 ## A_lb <= A_in*x <= A_ub
 ## @end group
 ## @end example
 ##
 ## @end ifnottex
 ## @noindent
 ## using a null-space active-set method.
 ##
-## Any bound (@var{A}, @var{b}, @var{lb}, @var{ub}, @var{A_lb},
-## @var{A_ub}) may be set to the empty matrix (@code{[]}) if not
-## present.  If the initial guess is feasible the algorithm is faster.
+## Any bound (@var{A}, @var{b}, @var{lb}, @var{ub}, @var{A_lb}, @var{A_ub})
+## may be set to the empty matrix (@code{[]}) if not present.  If the initial
+## guess is feasible the algorithm is faster.
 ##
 ## @table @var
 ## @item options
-## An optional structure containing the following
-## parameter(s) used to define the behavior of the solver.  Missing elements
-## in the structure take on default values, so you only need to set the
-## elements that you wish to change from the default.
+## An optional structure containing the following parameter(s) used to define
+## the behavior of the solver.  Missing elements in the structure take on
+## default values, so you only need to set the elements that you wish to
+## change from the default.
 ##
 ## @table @code
 ## @item MaxIter (default: 200)
 ## Maximum number of iterations.
 ## @end table
 ## @end table
 ##
 ## @table @var
diff --git a/scripts/optimization/sqp.m b/scripts/optimization/sqp.m
--- a/scripts/optimization/sqp.m
+++ b/scripts/optimization/sqp.m
@@ -19,16 +19,18 @@
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {[@var{x}, @var{obj}, @var{info}, @var{iter}, @var{nf}, @var{lambda}] =} sqp (@var{x0}, @var{phi})
 ## @deftypefnx {Function File} {[@dots{}] =} sqp (@var{x0}, @var{phi}, @var{g})
 ## @deftypefnx {Function File} {[@dots{}] =} sqp (@var{x0}, @var{phi}, @var{g}, @var{h})
 ## @deftypefnx {Function File} {[@dots{}] =} sqp (@var{x0}, @var{phi}, @var{g}, @var{h}, @var{lb}, @var{ub})
 ## @deftypefnx {Function File} {[@dots{}] =} sqp (@var{x0}, @var{phi}, @var{g}, @var{h}, @var{lb}, @var{ub}, @var{maxiter})
 ## @deftypefnx {Function File} {[@dots{}] =} sqp (@var{x0}, @var{phi}, @var{g}, @var{h}, @var{lb}, @var{ub}, @var{maxiter}, @var{tol})
+## Minimize an objective function using sequential quadratic programming (SQP).
+##
 ## Solve the nonlinear program
 ## @tex
 ## $$
 ## \min_x \phi (x)
 ## $$
 ## @end tex
 ## @ifnottex
 ##
@@ -57,41 +59,39 @@
 ## @end example
 ##
 ## @end ifnottex
 ## @noindent
 ## using a sequential quadratic programming method.
 ##
 ## The first argument is the initial guess for the vector @var{x0}.
 ##
-## The second argument is a function handle pointing to the objective
-## function @var{phi}.  The objective function must accept one vector
-## argument and return a scalar.
-##
-## The second argument may also be a 2- or 3-element cell array of
-## function handles.  The first element should point to the objective
-## function, the second should point to a function that computes the
-## gradient of the objective function, and the third should point to a
-## function that computes the Hessian of the objective function.  If the
-## gradient function is not supplied, the gradient is computed by finite
-## differences.  If the Hessian function is not supplied, a BFGS update
-## formula is used to approximate the Hessian.
+## The second argument is a function handle pointing to the objective function
+## @var{phi}.  The objective function must accept one vector argument and
+## return a scalar.
 ##
-## When supplied, the gradient function @code{@var{phi}@{2@}} must accept
-## one vector argument and return a vector.  When supplied, the Hessian
-## function @code{@var{phi}@{3@}} must accept one vector argument and
-## return a matrix.
+## The second argument may also be a 2- or 3-element cell array of function
+## handles.  The first element should point to the objective function, the
+## second should point to a function that computes the gradient of the
+## objective function, and the third should point to a function that computes
+## the Hessian of the objective function.  If the gradient function is not
+## supplied, the gradient is computed by finite differences.  If the Hessian
+## function is not supplied, a BFGS update formula is used to approximate the
+## Hessian.
 ##
-## The third and fourth arguments @var{g} and @var{h} are function
-## handles pointing to functions that compute the equality constraints
-## and the inequality constraints, respectively.  If the problem does
-## not have equality (or inequality) constraints, then use an empty
-## matrix ([]) for @var{g} (or @var{h}).  When supplied, these equality
-## and inequality constraint functions must accept one vector argument
-## and return a vector.
+## When supplied, the gradient function @code{@var{phi}@{2@}} must accept one
+## vector argument and return a vector.  When supplied, the Hessian function
+## @code{@var{phi}@{3@}} must accept one vector argument and return a matrix.
+##
+## The third and fourth arguments @var{g} and @var{h} are function handles
+## pointing to functions that compute the equality constraints and the
+## inequality constraints, respectively.  If the problem does not have
+## equality (or inequality) constraints, then use an empty matrix ([]) for
+## @var{g} (or @var{h}).  When supplied, these equality and inequality
+## constraint functions must accept one vector argument and return a vector.
 ##
 ## The third and fourth arguments may also be 2-element cell arrays of
 ## function handles.  The first element should point to the constraint
 ## function and the second should point to a function that computes the
 ## gradient of the constraint function:
 ## @tex
 ## $$
 ##  \Bigg( {\partial f(x) \over \partial x_1},
@@ -105,30 +105,29 @@
 ## @group
 ##             [ d f(x)   d f(x)        d f(x) ]
 ## transpose ( [ ------   -----   ...   ------ ] )
 ##             [  dx_1     dx_2          dx_N  ]
 ## @end group
 ## @end example
 ##
 ## @end ifnottex
-## The fifth and sixth arguments, @var{lb} and @var{ub}, contain lower
-## and upper bounds on @var{x}.  These must be consistent with the
-## equality and inequality constraints @var{g} and @var{h}.  If the
-## arguments are vectors then @var{x}(i) is bound by @var{lb}(i) and
-## @var{ub}(i).  A bound can also be a scalar in which case all elements
-## of @var{x} will share the same bound.  If only one bound (lb, ub) is
-## specified then the other will default to (-@var{realmax},
-## +@var{realmax}).
+## The fifth and sixth arguments, @var{lb} and @var{ub}, contain lower and
+## upper bounds on @var{x}.  These must be consistent with the equality and
+## inequality constraints @var{g} and @var{h}.  If the arguments are vectors
+## then @var{x}(i) is bound by @var{lb}(i) and @var{ub}(i).  A bound can also
+## be a scalar in which case all elements of @var{x} will share the same
+## bound.  If only one bound (lb, ub) is specified then the other will
+## default to (-@var{realmax}, +@var{realmax}).
 ##
 ## The seventh argument @var{maxiter} specifies the maximum number of
 ## iterations.  The default value is 100.
 ##
-## The eighth argument @var{tol} specifies the tolerance for the
-## stopping criteria.  The default value is @code{sqrt (eps)}.
+## The eighth argument @var{tol} specifies the tolerance for the stopping
+## criteria.  The default value is @code{sqrt (eps)}.
 ##
 ## The value returned in @var{info} may be one of the following:
 ##
 ## @table @asis
 ## @item 101
 ## The algorithm terminated normally.
 ## All constraints meet the specified tolerance.
 ##
diff --git a/scripts/path/matlabroot.m b/scripts/path/matlabroot.m
--- a/scripts/path/matlabroot.m
+++ b/scripts/path/matlabroot.m
@@ -15,18 +15,18 @@
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} matlabroot ()
 ## Return the name of the top-level Octave installation directory.
 ##
-## This is an alias for the function @w{@code{OCTAVE_HOME}} provided
-## for compatibility.
+## This is an alias for the function @w{@code{OCTAVE_HOME}} provided for
+## compatibility.
 ## @seealso{OCTAVE_HOME}
 ## @end deftypefn
 
 function retval = matlabroot ()
 
   retval = OCTAVE_HOME;
 
 endfunction
diff --git a/scripts/plot/appearance/annotation.m b/scripts/plot/appearance/annotation.m
--- a/scripts/plot/appearance/annotation.m
+++ b/scripts/plot/appearance/annotation.m
@@ -140,17 +140,17 @@
 ##
 ## @item  @qcode{"ellipse"}
 ##  Construct an ellipse.  @var{pos} specifies the
 ##  @qcode{"position"} property of the annotation.
 ##
 ##  See @qcode{"rectangle"} annotations for customization.
 ## @end table
 ##
-## @seealso{xlabel, title}
+## @seealso{xlabel, title, legend, colorbar}
 ## @end deftypefn
 
 function varargout = annotation (varargin)
 
   objtype = "";
   hf = [];
   lims = [];
   x = y = [];
diff --git a/scripts/plot/appearance/axis.m b/scripts/plot/appearance/axis.m
--- a/scripts/plot/appearance/axis.m
+++ b/scripts/plot/appearance/axis.m
@@ -34,34 +34,32 @@
 ## -Inf and Inf may be used to indicate that the limit should automatically be
 ## computed based on the data in the axis.
 ##
 ## Without any arguments, @code{axis} turns autoscaling on.
 ##
 ## With one output argument, @code{@var{limits} = axis} returns the current
 ## axis limits.
 ##
-## The vector argument specifying limits is optional, and additional
-## string arguments may be used to specify various axis properties.  For
-## example,
+## The vector argument specifying limits is optional, and additional string
+## arguments may be used to specify various axis properties.  For example,
 ##
 ## @example
 ## axis ([1, 2, 3, 4], "square");
 ## @end example
 ##
 ## @noindent
 ## forces a square aspect ratio, and
 ##
 ## @example
 ## axis ("tic", "labely");
 ## @end example
 ##
 ## @noindent
-## turns tic marks on for all axes and tic mark labels on for the y-axis
-## only.
+## turns tic marks on for all axes and tic mark labels on for the y-axis only.
 ##
 ## @noindent
 ## The following options control the aspect ratio of the axes.
 ##
 ## @table @asis
 ## @item @qcode{"square"}
 ## Force a square aspect ratio.
 ##
@@ -72,18 +70,18 @@
 ## Restore default aspect ratio.
 ## @end table
 ##
 ## @noindent
 ## The following options control the way axis limits are interpreted.
 ##
 ## @table @asis
 ## @item @qcode{"auto"}
-## Set the specified axes to have nice limits around the data
-## or all if no axes are specified.
+## Set the specified axes to have nice limits around the data or all if no
+## axes are specified.
 ##
 ## @item @qcode{"manual"}
 ## Fix the current axes limits.
 ##
 ## @item @qcode{"tight"}
 ## Fix axes to the limits of the data.
 ##
 ## @item @qcode{"image"}
@@ -96,22 +94,22 @@
 ## @table @asis
 ## @item @qcode{"on"}
 ## Turn tic marks and labels on for all axes.
 ##
 ## @item @qcode{"off"}
 ## Turn tic marks off for all axes.
 ##
 ## @item @qcode{"tic[xyz]"}
-## Turn tic marks on for all axes, or turn them on for the
-## specified axes and off for the remainder.
+## Turn tic marks on for all axes, or turn them on for the specified axes and
+## off for the remainder.
 ##
 ## @item @qcode{"label[xyz]"}
-## Turn tic labels on for all axes, or turn them on for the
-## specified axes and off for the remainder.
+## Turn tic labels on for all axes, or turn them on for the specified axes
+## and off for the remainder.
 ##
 ## @item @qcode{"nolabel"}
 ## Turn tic labels off for all axes.
 ## @end table
 ##
 ## Note, if there are no tic marks for an axis, there can be no labels.
 ##
 ## @noindent
@@ -120,18 +118,18 @@
 ## @table @asis
 ## @item @qcode{"ij"}
 ## Reverse y-axis, so lower values are nearer the top.
 ##
 ## @item @qcode{"xy"}
 ## Restore y-axis, so higher values are nearer the top.
 ## @end table
 ##
-## If the first argument @var{hax} is an axes handle, then operate on
-## this axes rather than the current axes returned by @code{gca}.
+## If the first argument @var{hax} is an axes handle, then operate on this
+## axes rather than the current axes returned by @code{gca}.
 ##
 ## @seealso{xlim, ylim, zlim, daspect, pbaspect, box, grid}
 ## @end deftypefn
 
 ## Author: jwe
 
 function limits = axis (varargin)
 
diff --git a/scripts/plot/appearance/box.m b/scripts/plot/appearance/box.m
--- a/scripts/plot/appearance/box.m
+++ b/scripts/plot/appearance/box.m
@@ -21,18 +21,18 @@
 ## @deftypefnx {Command} {} box off
 ## @deftypefnx {Command} {} box
 ## @deftypefnx {Function File} {} box (@var{hax}, @dots{})
 ## Control display of the axis border.
 ##
 ## The argument may be either @qcode{"on"} or @qcode{"off"}.  If it is
 ## omitted, the current box state is toggled.
 ##
-## If the first argument @var{hax} is an axes handle, then operate on
-## this axis rather than the current axes returned by @code{gca}.
+## If the first argument @var{hax} is an axes handle, then operate on this
+## axis rather than the current axes returned by @code{gca}.
 ## @seealso{axis, grid}
 ## @end deftypefn
 
 ## Author: jwe
 
 function box (varargin)
 
   [hax, varargin, nargs] = __plt_get_axis_arg__ ("box", varargin{:});
diff --git a/scripts/plot/appearance/caxis.m b/scripts/plot/appearance/caxis.m
--- a/scripts/plot/appearance/caxis.m
+++ b/scripts/plot/appearance/caxis.m
@@ -19,20 +19,20 @@
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {} caxis ([cmin cmax])
 ## @deftypefnx {Function File} {} caxis ("auto")
 ## @deftypefnx {Function File} {} caxis ("manual")
 ## @deftypefnx {Function File} {} caxis (@var{hax}, @dots{})
 ## @deftypefnx {Function File} {@var{limits} =} caxis ()
 ## Query or set color axis limits for plots.
 ##
-## The limits argument should be a 2-element vector specifying the
-## lower and upper limits to assign to the first and last value in the
-## colormap.  Data values outside this range are clamped to the first and last
-## colormap entries.
+## The limits argument should be a 2-element vector specifying the lower and
+## upper limits to assign to the first and last value in the colormap.  Data
+## values outside this range are clamped to the first and last colormap
+## entries.
 ##
 ## If the @qcode{"auto"} option is given then automatic colormap limits are
 ## applied.  The automatic algorithm sets @var{cmin} to the minimum data value
 ## and @var{cmax} to the maximum data value.  If @qcode{"manual"} is specified
 ## then the @qcode{"climmode"} property is set to @qcode{"manual"} and the
 ## numeric values in the @qcode{"clim"} property are used for limits.
 ##
 ## If the first argument @var{hax} is an axes handle, then operate on
diff --git a/scripts/plot/appearance/datetick.m b/scripts/plot/appearance/datetick.m
--- a/scripts/plot/appearance/datetick.m
+++ b/scripts/plot/appearance/datetick.m
@@ -18,20 +18,23 @@
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {} datetick ()
 ## @deftypefnx {Function File} {} datetick (@var{form})
 ## @deftypefnx {Function File} {} datetick (@var{axis}, @var{form})
 ## @deftypefnx {Function File} {} datetick (@dots{}, "keeplimits")
 ## @deftypefnx {Function File} {} datetick (@dots{}, "keepticks")
 ## @deftypefnx {Function File} {} datetick (@var{hax}, @dots{})
-## Add date formatted tick labels to an axis.  The axis to apply the
-## ticks to is determined by @var{axis} which can take the values @qcode{"x"},
-## @qcode{"y"}, or @qcode{"z"}.  The default value is @qcode{"x"}.  The
-## formatting of the labels is determined by the variable @var{form}, which
+## Add date formatted tick labels to an axis.
+##
+## The axis to apply the ticks to is determined by @var{axis} which can take
+## the values @qcode{"x"}, @qcode{"y"}, or @qcode{"z"}.  The default value is
+## @qcode{"x"}.
+##
+## The formatting of the labels is determined by the variable @var{form}, which
 ## can either be a string or positive integer that @code{datestr} accepts.
 ## @seealso{datenum, datestr}
 ## @end deftypefn
 
 function datetick (varargin)
 
   [hax, varargin, nargin] = __plt_get_axis_arg__ ("datetick", varargin{:});
 
diff --git a/scripts/plot/appearance/hidden.m b/scripts/plot/appearance/hidden.m
--- a/scripts/plot/appearance/hidden.m
+++ b/scripts/plot/appearance/hidden.m
@@ -19,16 +19,17 @@
 ## -*- texinfo -*-
 ## @deftypefn  {Command} {} hidden
 ## @deftypefnx {Command} {} hidden "on"
 ## @deftypefnx {Command} {} hidden "off"
 ## @deftypefnx {Function File} {@var{mode} =} hidden (@dots{})
 ## Control mesh hidden line removal.
 ##
 ## When called with no argument the hidden line removal state is toggled.
+##
 ## When called with one of the modes @qcode{"on"} or @qcode{"off"} the state
 ## is set accordingly.
 ##
 ## The optional output argument @var{mode} is the current state.
 ##
 ## Hidden Line Removal determines what graphic objects behind a mesh plot
 ## are visible.  The default is for the mesh to be opaque and lines behind
 ## the mesh are not visible.  If hidden line removal is turned off then
diff --git a/scripts/plot/appearance/legend.m b/scripts/plot/appearance/legend.m
--- a/scripts/plot/appearance/legend.m
+++ b/scripts/plot/appearance/legend.m
@@ -51,18 +51,18 @@
 ## @item @tab northeast @tab right top (default)
 ## @item @tab northwest @tab left top
 ## @item @tab southeast @tab right bottom
 ## @item @tab southwest @tab left bottom
 ## @item
 ## @item @tab outside @tab can be appended to any location string
 ## @end multitable
 ##
-## The optional parameter @var{orient} determines if the key elements
-## are placed vertically or horizontally.  The allowed values are
+## The optional parameter @var{orient} determines if the key elements are
+## placed vertically or horizontally.  The allowed values are
 ## @qcode{"vertical"} (default) or @qcode{"horizontal"}.
 ##
 ## The following customizations are available using @var{option}:
 ##
 ## @table @asis
 ## @item @qcode{"show"}
 ##   Show legend on the plot
 ##
diff --git a/scripts/plot/appearance/xlim.m b/scripts/plot/appearance/xlim.m
--- a/scripts/plot/appearance/xlim.m
+++ b/scripts/plot/appearance/xlim.m
@@ -21,18 +21,20 @@
 ## @deftypefnx {Function File} {@var{xmode} =} xlim ("mode")
 ## @deftypefnx {Function File} {} xlim ([@var{x_lo} @var{x_hi}])
 ## @deftypefnx {Function File} {} xlim ("auto")
 ## @deftypefnx {Function File} {} xlim ("manual")
 ## @deftypefnx {Function File} {} xlim (@var{hax}, @dots{})
 ## Query or set the limits of the x-axis for the current plot.
 ##
 ## Called without arguments @code{xlim} returns the x-axis limits of the
-## current plot.  With the input query @qcode{"mode"}, return the current
-## x-limit calculation mode which is either @qcode{"auto"} or @qcode{"manual"}.
+## current plot.
+##
+## With the input query @qcode{"mode"}, return the current x-limit
+## calculation mode which is either @qcode{"auto"} or @qcode{"manual"}.
 ##
 ## If passed a 2-element vector [@var{x_lo} @var{x_hi}], the limits of the
 ## x-axis are set to these values and the mode is set to @qcode{"manual"}.
 ##
 ## The current plotting mode can be changed by using either @qcode{"auto"}
 ## or @qcode{"manual"} as the argument.
 ##
 ## If the first argument @var{hax} is an axes handle, then operate on
diff --git a/scripts/plot/appearance/ylim.m b/scripts/plot/appearance/ylim.m
--- a/scripts/plot/appearance/ylim.m
+++ b/scripts/plot/appearance/ylim.m
@@ -21,17 +21,19 @@
 ## @deftypefnx {Function File} {@var{xmode} =} ylim ("mode")
 ## @deftypefnx {Function File} {} ylim ([@var{y_lo} @var{y_hi}])
 ## @deftypefnx {Function File} {} ylim ("auto")
 ## @deftypefnx {Function File} {} ylim ("manual")
 ## @deftypefnx {Function File} {} ylim (@var{hax}, @dots{})
 ## Query or set the limits of the y-axis for the current plot.
 ##
 ## Called without arguments @code{ylim} returns the y-axis limits of the
-## current plot.  With the input query @qcode{"mode"}, return the current
+## current plot.
+##
+## With the input query @qcode{"mode"}, return the current
 ## y-limit calculation mode which is either @qcode{"auto"} or @qcode{"manual"}.
 ##
 ## If passed a 2-element vector [@var{y_lo} @var{y_hi}], the limits of the
 ## y-axis are set to these values and the mode is set to @qcode{"manual"}.
 ##
 ## The current plotting mode can be changed by using either @qcode{"auto"}
 ## or @qcode{"manual"} as the argument.
 ##
diff --git a/scripts/plot/appearance/zlim.m b/scripts/plot/appearance/zlim.m
--- a/scripts/plot/appearance/zlim.m
+++ b/scripts/plot/appearance/zlim.m
@@ -21,17 +21,19 @@
 ## @deftypefnx {Function File} {@var{xmode} =} zlim ("mode")
 ## @deftypefnx {Function File} {} zlim ([@var{z_lo} @var{z_hi}])
 ## @deftypefnx {Function File} {} zlim ("auto")
 ## @deftypefnx {Function File} {} zlim ("manual")
 ## @deftypefnx {Function File} {} zlim (@var{hax}, @dots{})
 ## Query or set the limits of the z-axis for the current plot.
 ##
 ## Called without arguments @code{zlim} returns the z-axis limits of the
-## current plot.  With the input query @qcode{"mode"}, return the current
+## current plot.
+##
+## With the input query @qcode{"mode"}, return the current
 ## z-limit calculation mode which is either @qcode{"auto"} or @qcode{"manual"}.
 ##
 ## If passed a 2-element vector [@var{z_lo} @var{z_hi}], the limits of the
 ## x-axis are set to these values and the mode is set to @qcode{"manual"}.
 ##
 ## The current plotting mode can be changed by using either @qcode{"auto"}
 ## or @qcode{"manual"} as the argument.
 ##
diff --git a/scripts/plot/draw/area.m b/scripts/plot/draw/area.m
--- a/scripts/plot/draw/area.m
+++ b/scripts/plot/draw/area.m
@@ -21,18 +21,18 @@
 ## @deftypefn  {Function File} {} area (@var{y})
 ## @deftypefnx {Function File} {} area (@var{x}, @var{y})
 ## @deftypefnx {Function File} {} area (@dots{}, @var{lvl})
 ## @deftypefnx {Function File} {} area (@dots{}, @var{prop}, @var{val}, @dots{})
 ## @deftypefnx {Function File} {} area (@var{hax}, @dots{})
 ## @deftypefnx {Function File} {@var{h} =} area (@dots{})
 ## Area plot of the columns of @var{y}.
 ##
-## This plot shows the contributions of each column value to the row sum.  It
-## is functionally similar to @code{plot (@var{x}, cumsum (@var{y}, 2))},
+## This plot shows the contributions of each column value to the row sum.
+## It is functionally similar to @code{plot (@var{x}, cumsum (@var{y}, 2))},
 ## except that the area under the curve is shaded.
 ##
 ## If the @var{x} argument is omitted it defaults to @code{1:rows (@var{y})}.
 ## A value @var{lvl} can be defined that determines where the base level of
 ## the shading under the curve should be defined.  The default level is 0.
 ##
 ## Additional property/value pairs are passed directly to the underlying patch
 ## object.
diff --git a/scripts/plot/draw/comet.m b/scripts/plot/draw/comet.m
--- a/scripts/plot/draw/comet.m
+++ b/scripts/plot/draw/comet.m
@@ -17,18 +17,19 @@
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {} comet (@var{y})
 ## @deftypefnx {Function File} {} comet (@var{x}, @var{y})
 ## @deftypefnx {Function File} {} comet (@var{x}, @var{y}, @var{p})
 ## @deftypefnx {Function File} {} comet (@var{hax}, @dots{})
 ## Produce a simple comet style animation along the trajectory provided by
-## the input coordinate vectors (@var{x}, @var{y}).  If @var{x} is not
-## specified it defaults to the indices of @var{y}.
+## the input coordinate vectors (@var{x}, @var{y}).
+##
+## If @var{x} is not specified it defaults to the indices of @var{y}.
 ##
 ## The speed of the comet may be controlled by @var{p}, which represents the
 ## time each point is displayed before moving to the next one.  The default for
 ## @var{p} is 0.1 seconds.
 ##
 ## If the first argument @var{hax} is an axes handle, then plot into this axis,
 ## rather than the current axes returned by @code{gca}.
 ## @seealso{comet3}
diff --git a/scripts/plot/draw/comet3.m b/scripts/plot/draw/comet3.m
--- a/scripts/plot/draw/comet3.m
+++ b/scripts/plot/draw/comet3.m
@@ -17,18 +17,20 @@
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {} comet3 (@var{z})
 ## @deftypefnx {Function File} {} comet3 (@var{x}, @var{y}, @var{z})
 ## @deftypefnx {Function File} {} comet3 (@var{x}, @var{y}, @var{z}, @var{p})
 ## @deftypefnx {Function File} {} comet3 (@var{hax}, @dots{})
 ## Produce a simple comet style animation along the trajectory provided by
-## the input coordinate vectors (@var{x}, @var{y}, @var{z}).  If only @var{z}
-## is specified then @var{x}, @var{y} default to the indices of @var{z}.
+## the input coordinate vectors (@var{x}, @var{y}, @var{z}).
+##
+## If only @var{z} is specified then @var{x}, @var{y} default to the indices
+## of @var{z}.
 ##
 ## The speed of the comet may be controlled by @var{p}, which represents the
 ## time each point is displayed before moving to the next one.  The default for
 ## @var{p} is 0.1 seconds.
 ##
 ## If the first argument @var{hax} is an axes handle, then plot into this axis,
 ## rather than the current axes returned by @code{gca}.
 ## @seealso{comet}
diff --git a/scripts/plot/draw/contour.m b/scripts/plot/draw/contour.m
--- a/scripts/plot/draw/contour.m
+++ b/scripts/plot/draw/contour.m
@@ -32,17 +32,18 @@
 ##
 ## The appearance of contour lines can be defined with a line style @var{style}
 ## in the same manner as @code{plot}.  Only line style and color are used;
 ## Any markers defined by @var{style} are ignored.
 ##
 ## If the first argument @var{hax} is an axes handle, then plot into this axis,
 ## rather than the current axes returned by @code{gca}.
 ##
-## The optional output @var{c} are the contour levels in @code{contourc} format.
+## The optional output @var{c} contains the contour levels in @code{contourc}
+## format.
 ##
 ## The optional return value @var{h} is a graphics handle to the hggroup
 ## comprising the contour lines.
 ##
 ## Example:
 ##
 ## @example
 ## @group
diff --git a/scripts/plot/draw/contourf.m b/scripts/plot/draw/contourf.m
--- a/scripts/plot/draw/contourf.m
+++ b/scripts/plot/draw/contourf.m
@@ -36,17 +36,18 @@
 ##
 ## The appearance of contour lines can be defined with a line style @var{style}
 ## in the same manner as @code{plot}.  Only line style and color are used;
 ## Any markers defined by @var{style} are ignored.
 ##
 ## If the first argument @var{hax} is an axes handle, then plot into this axis,
 ## rather than the current axes returned by @code{gca}.
 ##
-## The optional output @var{c} are the contour levels in @code{contourc} format.
+## The optional output @var{c} contains the contour levels in @code{contourc}
+## format.
 ##
 ## The optional return value @var{h} is a graphics handle to the hggroup
 ## comprising the contour lines.
 ##
 ## The following example plots filled contours of the @code{peaks} function.
 ##
 ## @example
 ## @group
diff --git a/scripts/plot/draw/isocolors.m b/scripts/plot/draw/isocolors.m
--- a/scripts/plot/draw/isocolors.m
+++ b/scripts/plot/draw/isocolors.m
@@ -19,16 +19,18 @@
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {[@var{cd}] =} isocolors (@var{c}, @var{v})
 ## @deftypefnx {Function File} {[@var{cd}] =} isocolors (@var{x}, @var{y}, @var{z}, @var{c}, @var{v})
 ## @deftypefnx {Function File} {[@var{cd}] =} isocolors (@var{x}, @var{y}, @var{z}, @var{r}, @var{g}, @var{b}, @var{v})
 ## @deftypefnx {Function File} {[@var{cd}] =} isocolors (@var{r}, @var{g}, @var{b}, @var{v})
 ## @deftypefnx {Function File} {[@var{cd}] =} isocolors (@dots{}, @var{p})
 ## @deftypefnx {Function File} {} isocolors (@dots{})
 ##
+## Compute isosurface colors.
+##
 ## If called with one output argument and the first input argument
 ## @var{c} is a three-dimensional array that contains color values and
 ## the second input argument @var{v} keeps the vertices of a geometry
 ## then return a matrix @var{cd} with color data information for the
 ## geometry at computed points
 ## @command{[x, y, z] = meshgrid (1:l, 1:m, 1:n)}.  The output argument
 ## @var{cd} can be taken to manually set FaceVertexCData of a patch.
 ##
diff --git a/scripts/plot/draw/isonormals.m b/scripts/plot/draw/isonormals.m
--- a/scripts/plot/draw/isonormals.m
+++ b/scripts/plot/draw/isonormals.m
@@ -19,16 +19,18 @@
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {[@var{n}] =} isonormals (@var{val}, @var{v})
 ## @deftypefnx {Function File} {[@var{n}] =} isonormals (@var{val}, @var{p})
 ## @deftypefnx {Function File} {[@var{n}] =} isonormals (@var{x}, @var{y}, @var{z}, @var{val}, @var{v})
 ## @deftypefnx {Function File} {[@var{n}] =} isonormals (@var{x}, @var{y}, @var{z}, @var{val}, @var{p})
 ## @deftypefnx {Function File} {[@var{n}] =} isonormals (@dots{}, "negate")
 ## @deftypefnx {Function File} {} isonormals (@dots{}, @var{p})
 ##
+## Calculate normals to an isosurface.
+##
 ## If called with one output argument and the first input argument
 ## @var{val} is a three-dimensional array that contains the data for an
 ## isosurface geometry and the second input argument @var{v} keeps the
 ## vertices of an isosurface then return the normals @var{n} in form of
 ## a matrix with the same size than @var{v} at computed points
 ## @command{[x, y, z] = meshgrid (1:l, 1:m, 1:n)}.  The output argument
 ## @var{n} can be taken to manually set @var{VertexNormals} of a patch.
 ##
diff --git a/scripts/plot/draw/isosurface.m b/scripts/plot/draw/isosurface.m
--- a/scripts/plot/draw/isosurface.m
+++ b/scripts/plot/draw/isosurface.m
@@ -20,16 +20,18 @@
 ## @deftypefn  {Function File} {[@var{fv}] =} isosurface (@var{val}, @var{iso})
 ## @deftypefnx {Function File} {[@var{fv}] =} isosurface (@var{x}, @var{y}, @var{z}, @var{val}, @var{iso})
 ## @deftypefnx {Function File} {[@var{fv}] =} isosurface (@dots{}, "noshare", "verbose")
 ## @deftypefnx {Function File} {[@var{fvc}] =} isosurface (@dots{}, @var{col})
 ## @deftypefnx {Function File} {[@var{f}, @var{v}] =} isosurface (@var{x}, @var{y}, @var{z}, @var{val}, @var{iso})
 ## @deftypefnx {Function File} {[@var{f}, @var{v}, @var{c}] =} isosurface (@var{x}, @var{y}, @var{z}, @var{val}, @var{iso}, @var{col})
 ## @deftypefnx {Function File} {} isosurface (@var{x}, @var{y}, @var{z}, @var{val}, @var{iso}, @var{col}, @var{opt})
 ##
+## Calculate isosurface of 3-D data.
+##
 ## If called with one output argument and the first input argument
 ## @var{val} is a three-dimensional array that contains the data of an
 ## isosurface geometry and the second input argument @var{iso} keeps the
 ## isovalue as a scalar value then return a structure array @var{fv}
 ## that contains the fields @var{Faces} and @var{Vertices} at computed
 ## points @command{[x, y, z] = meshgrid (1:l, 1:m, 1:n)}.  The output
 ## argument @var{fv} can directly be taken as an input argument for the
 ## @command{patch} function.
diff --git a/scripts/plot/draw/plotmatrix.m b/scripts/plot/draw/plotmatrix.m
--- a/scripts/plot/draw/plotmatrix.m
+++ b/scripts/plot/draw/plotmatrix.m
@@ -19,24 +19,24 @@
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {} plotmatrix (@var{x}, @var{y})
 ## @deftypefnx {Function File} {} plotmatrix (@var{x})
 ## @deftypefnx {Function File} {} plotmatrix (@dots{}, @var{style})
 ## @deftypefnx {Function File} {} plotmatrix (@var{hax}, @dots{})
 ## @deftypefnx {Function File} {[@var{h}, @var{ax}, @var{bigax}, @var{p}, @var{pax}] =} plotmatrix (@dots{})
 ## Scatter plot of the columns of one matrix against another.
 ##
-## Given the arguments @var{x} and @var{y}, that have a matching number of
+## Given the arguments @var{x} and @var{y} that have a matching number of
 ## rows, @code{plotmatrix} plots a set of axes corresponding to
 ##
 ## @example
 ## plot (@var{x}(:, i), @var{y}(:, j))
 ## @end example
 ##
-## Given a single argument @var{x} this is equivalent to
+## When called with a single argument @var{x} this is equivalent to
 ##
 ## @example
 ## plotmatrix (@var{x}, @var{x})
 ## @end example
 ##
 ## @noindent
 ## except that the diagonal of the set of axes will be replaced with the
 ## histogram @code{hist (@var{x}(:, i))}.
@@ -44,21 +44,24 @@
 ## The marker to use can be changed with the @var{style} argument, that is a
 ## string defining a marker in the same manner as the @code{plot} command.
 ##
 ## If the first argument @var{hax} is an axes handle, then plot into this axis,
 ## rather than the current axes returned by @code{gca}.
 ##
 ## The optional return value @var{h} provides handles to the individual
 ## graphics objects in the scatter plots, whereas @var{ax} returns the
-## handles to the scatter plot axis objects.  @var{bigax} is a hidden
-## axis object that surrounds the other axes, such that the commands
-## @code{xlabel}, @code{title}, etc., will be associated with this hidden
-## axis.  Finally, @var{p} returns the graphics objects associated with
-## the histogram and @var{pax} the corresponding axes objects.
+## handles to the scatter plot axis objects.
+##
+## @var{bigax} is a hidden axis object that surrounds the other axes, such
+## that the commands @code{xlabel}, @code{title}, etc., will be associated
+## with this hidden axis.
+##
+## Finally, @var{p} returns the graphics objects associated with the histogram
+## and @var{pax} the corresponding axes objects.
 ##
 ## Example:
 ##
 ## @example
 ## plotmatrix (randn (100, 3), "g+")
 ## @end example
 ##
 ## @seealso{scatter, plot}
diff --git a/scripts/plot/draw/quiver.m b/scripts/plot/draw/quiver.m
--- a/scripts/plot/draw/quiver.m
+++ b/scripts/plot/draw/quiver.m
@@ -20,19 +20,21 @@
 ## @deftypefn  {Function File} {} quiver (@var{u}, @var{v})
 ## @deftypefnx {Function File} {} quiver (@var{x}, @var{y}, @var{u}, @var{v})
 ## @deftypefnx {Function File} {} quiver (@dots{}, @var{s})
 ## @deftypefnx {Function File} {} quiver (@dots{}, @var{style})
 ## @deftypefnx {Function File} {} quiver (@dots{}, "filled")
 ## @deftypefnx {Function File} {} quiver (@var{hax}, @dots{})
 ## @deftypefnx {Function File} {@var{h} =} quiver (@dots{})
 ##
+## Plot a 2-D vector field with arrows.
+##
 ## Plot the (@var{u}, @var{v}) components of a vector field in
-## an (@var{x}, @var{y}) meshgrid.  If the grid is uniform, you can
-## specify @var{x} and @var{y} as vectors.
+## an (@var{x}, @var{y}) meshgrid.  If the grid is uniform then @var{x} and
+## @var{y} can be specified as vectors.
 ##
 ## If @var{x} and @var{y} are undefined they are assumed to be
 ## @code{(1:@var{m}, 1:@var{n})} where
 ## @code{[@var{m}, @var{n}] = size (@var{u})}.
 ##
 ## The variable @var{s} is a scalar defining a scaling factor to use for
 ## the arrows of the field relative to the mesh spacing.  A value of 0
 ## disables all scaling.  The default value is 0.9.
diff --git a/scripts/plot/draw/quiver3.m b/scripts/plot/draw/quiver3.m
--- a/scripts/plot/draw/quiver3.m
+++ b/scripts/plot/draw/quiver3.m
@@ -20,19 +20,21 @@
 ## @deftypefn  {Function File} {} quiver3 (@var{u}, @var{v}, @var{w})
 ## @deftypefnx {Function File} {} quiver3 (@var{x}, @var{y}, @var{z}, @var{u}, @var{v}, @var{w})
 ## @deftypefnx {Function File} {} quiver3 (@dots{}, @var{s})
 ## @deftypefnx {Function File} {} quiver3 (@dots{}, @var{style})
 ## @deftypefnx {Function File} {} quiver3 (@dots{}, "filled")
 ## @deftypefnx {Function File} {} quiver3 (@var{hax}, @dots{})
 ## @deftypefnx {Function File} {@var{h} =} quiver3 (@dots{})
 ##
+## Plot a 3-D vector field with arrows.
+## 
 ## Plot the (@var{u}, @var{v}, @var{w}) components of a vector field in
-## an (@var{x}, @var{y}, @var{z}) meshgrid.  If the grid is uniform, you
-## can specify @var{x}, @var{y}, and @var{z} as vectors.
+## an (@var{x}, @var{y}, @var{z}) meshgrid.  If the grid is uniform then
+## @var{x}, @var{y}, and @var{z} can be specified as vectors.
 ##
 ## If @var{x}, @var{y}, and @var{z} are undefined they are assumed to be
 ## @code{(1:@var{m}, 1:@var{n}, 1:@var{p})} where @code{[@var{m}, @var{n}] =
 ## size (@var{u})} and @code{@var{p} = max (size (@var{w}))}.
 ##
 ## The variable @var{s} is a scalar defining a scaling factor to use for
 ## the arrows of the field relative to the mesh spacing.  A value of 0
 ## disables all scaling.  The default value is 0.9.
diff --git a/scripts/plot/draw/ribbon.m b/scripts/plot/draw/ribbon.m
--- a/scripts/plot/draw/ribbon.m
+++ b/scripts/plot/draw/ribbon.m
@@ -17,17 +17,17 @@
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {} ribbon (@var{y})
 ## @deftypefnx {Function File} {} ribbon (@var{x}, @var{y})
 ## @deftypefnx {Function File} {} ribbon (@var{x}, @var{y}, @var{width})
 ## @deftypefnx {Function File} {} ribbon (@var{hax}, @dots{})
 ## @deftypefnx {Function File} {@var{h} =} ribbon (@dots{})
-## Plot a ribbon plot for the columns of @var{y} vs. @var{x}.
+## Draw a ribbon plot for the columns of @var{y} vs. @var{x}.
 ##
 ## The optional parameter @var{width} specifies the width of a single ribbon
 ## (default is 0.75).  If @var{x} is omitted, a vector containing the
 ## row numbers is assumed (@code{1:rows (Y)}).
 ##
 ## If the first argument @var{hax} is an axes handle, then plot into this axis,
 ## rather than the current axes returned by @code{gca}.
 ##
diff --git a/scripts/plot/draw/semilogxerr.m b/scripts/plot/draw/semilogxerr.m
--- a/scripts/plot/draw/semilogxerr.m
+++ b/scripts/plot/draw/semilogxerr.m
@@ -22,18 +22,18 @@
 ## @deftypefnx {Function File} {} semilogxerr (@var{x}, @var{y}, @var{ey})
 ## @deftypefnx {Function File} {} semilogxerr (@var{x}, @var{y}, @var{err}, @var{fmt})
 ## @deftypefnx {Function File} {} semilogxerr (@var{x}, @var{y}, @var{lerr}, @var{uerr}, @var{fmt})
 ## @deftypefnx {Function File} {} semilogxerr (@var{x}, @var{y}, @var{ex}, @var{ey}, @var{fmt})
 ## @deftypefnx {Function File} {} semilogxerr (@var{x}, @var{y}, @var{lx}, @var{ux}, @var{ly}, @var{uy}, @var{fmt})
 ## @deftypefnx {Function File} {} semilogxerr (@var{x1}, @var{y1}, @dots{}, @var{fmt}, @var{xn}, @var{yn}, @dots{})
 ## @deftypefnx {Function File} {} semilogxerr (@var{hax}, @dots{})
 ## @deftypefnx {Function File} {@var{h} =} semilogxerr (@dots{})
-## Produce 2-D plots using a logarithmic scale for the x-axis and
-## errorbars at each data point.
+## Produce 2-D plots using a logarithmic scale for the x-axis and errorbars
+## at each data point.
 ##
 ## Many different combinations of arguments are possible.  The most common
 ## form is
 ##
 ## @example
 ## semilogxerr (@var{x}, @var{y}, @var{ey}, @var{fmt})
 ## @end example
 ##
diff --git a/scripts/plot/draw/semilogyerr.m b/scripts/plot/draw/semilogyerr.m
--- a/scripts/plot/draw/semilogyerr.m
+++ b/scripts/plot/draw/semilogyerr.m
@@ -22,18 +22,18 @@
 ## @deftypefnx {Function File} {} semilogyerr (@var{x}, @var{y}, @var{ey})
 ## @deftypefnx {Function File} {} semilogyerr (@var{x}, @var{y}, @var{err}, @var{fmt})
 ## @deftypefnx {Function File} {} semilogyerr (@var{x}, @var{y}, @var{lerr}, @var{uerr}, @var{fmt})
 ## @deftypefnx {Function File} {} semilogyerr (@var{x}, @var{y}, @var{ex}, @var{ey}, @var{fmt})
 ## @deftypefnx {Function File} {} semilogyerr (@var{x}, @var{y}, @var{lx}, @var{ux}, @var{ly}, @var{uy}, @var{fmt})
 ## @deftypefnx {Function File} {} semilogyerr (@var{x1}, @var{y1}, @dots{}, @var{fmt}, @var{xn}, @var{yn}, @dots{})
 ## @deftypefnx {Function File} {} semilogyerr (@var{hax}, @dots{})
 ## @deftypefnx {Function File} {@var{h} =} semilogyerr (@dots{})
-## Produce 2-D plots using a logarithmic scale for the y-axis and
-## errorbars at each data point.
+## Produce 2-D plots using a logarithmic scale for the y-axis and errorbars
+## at each data point.
 ##
 ## Many different combinations of arguments are possible.  The most common
 ## form is
 ##
 ## @example
 ## semilogyerr (@var{x}, @var{y}, @var{ey}, @var{fmt})
 ## @end example
 ##
diff --git a/scripts/plot/draw/sphere.m b/scripts/plot/draw/sphere.m
--- a/scripts/plot/draw/sphere.m
+++ b/scripts/plot/draw/sphere.m
@@ -19,17 +19,17 @@
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {} sphere ()
 ## @deftypefnx {Function File} {} sphere (@var{n})
 ## @deftypefnx {Function File} {} sphere (@var{hax}, @dots{})
 ## @deftypefnx {Function File} {[@var{x}, @var{y}, @var{z}] =} sphere (@dots{})
 ## Plot a 3-D unit sphere.
 ##
 ## The optional input @var{n} determines the number of faces around the
-## the circumference of the sphere.  The default value is 20.
+## circumference of the sphere.  The default value is 20.
 ##
 ## If the first argument @var{hax} is an axes handle, then plot into this axis,
 ## rather than the current axes returned by @code{gca}.
 ##
 ## If outputs are requested @code{sphere} returns three matrices in
 ## @code{meshgrid} format such that @code{surf (@var{x}, @var{y}, @var{z})}
 ## generates a unit sphere.
 ##
diff --git a/scripts/plot/draw/surfl.m b/scripts/plot/draw/surfl.m
--- a/scripts/plot/draw/surfl.m
+++ b/scripts/plot/draw/surfl.m
@@ -20,17 +20,16 @@
 ## @deftypefn  {Function File} {} surfl (@var{z})
 ## @deftypefnx {Function File} {} surfl (@var{x}, @var{y}, @var{z})
 ## @deftypefnx {Function File} {} surfl (@dots{}, @var{lsrc})
 ## @deftypefnx {Function File} {} surfl (@var{x}, @var{y}, @var{z}, @var{lsrc}, @var{P})
 ## @deftypefnx {Function File} {} surfl (@dots{}, "cdata")
 ## @deftypefnx {Function File} {} surfl (@dots{}, "light")
 ## @deftypefnx {Function File} {} surfl (@var{hax}, @dots{})
 ## @deftypefnx {Function File} {@var{h} =} surfl (@dots{})
-##
 ## Plot a 3-D surface using shading based on various lighting models.
 ##
 ## The surface mesh is plotted using shaded rectangles.  The vertices of the
 ## rectangles [@var{x}, @var{y}] are typically the output of @code{meshgrid}.
 ## over a 2-D rectangular region in the x-y plane.  @var{z} determines the
 ## height above the plane of each vertex.  If only a single @var{z} matrix is
 ## given, then it is plotted over the meshgrid
 ## @code{@var{x} = 1:columns (@var{z}), @var{y} = 1:rows (@var{z})}.
diff --git a/scripts/plot/draw/tetramesh.m b/scripts/plot/draw/tetramesh.m
--- a/scripts/plot/draw/tetramesh.m
+++ b/scripts/plot/draw/tetramesh.m
@@ -18,20 +18,20 @@
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {} tetramesh (@var{T}, @var{X})
 ## @deftypefnx {Function File} {} tetramesh (@var{T}, @var{X}, @var{C})
 ## @deftypefnx {Function File} {} tetramesh (@dots{}, @var{property}, @var{val}, @dots{})
 ## @deftypefnx {Function File} {@var{h} =} tetramesh (@dots{})
 ## Display the tetrahedrons defined in the m-by-4 matrix @var{T} as 3-D patches.
 ##
-## @var{T} is typically the output of a Delaunay triangulation
-## of a 3-D set of points.  Every row of @var{T} contains four indices into
-## the n-by-3 matrix @var{X} of the vertices of a tetrahedron.  Every row in
-## @var{X} represents one point in 3-D space.
+## @var{T} is typically the output of a Delaunay triangulation of a 3-D set
+## of points.  Every row of @var{T} contains four indices into the n-by-3
+## matrix @var{X} of the vertices of a tetrahedron.  Every row in @var{X}
+## represents one point in 3-D space.
 ##
 ## The vector @var{C} specifies the color of each tetrahedron as an index
 ## into the current colormap.  The default value is 1:m where m is the number
 ## of tetrahedrons; the indices are scaled to map to the full range of the
 ## colormap.  If there are more tetrahedrons than colors in the colormap then
 ## the values in @var{C} are cyclically repeated.
 ##
 ## Calling @code{tetramesh (@dots{}, "property", "value", @dots{})} passes all
diff --git a/scripts/plot/util/allchild.m b/scripts/plot/util/allchild.m
--- a/scripts/plot/util/allchild.m
+++ b/scripts/plot/util/allchild.m
@@ -16,20 +16,21 @@
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {@var{h} =} allchild (@var{handles})
 ## Find all children, including hidden children, of a graphics object.
 ##
 ## This function is similar to @code{get (h, "children")}, but also returns
-## hidden objects (HandleVisibility = @qcode{"off"}).  If @var{handles} is a
-## scalar, @var{h} will be a vector.  Otherwise, @var{h} will be a cell
-## matrix of the same size as @var{handles} and each cell will contain a
-## vector of handles.
+## hidden objects (HandleVisibility = @qcode{"off"}).
+##
+## If @var{handles} is a scalar, @var{h} will be a vector.  Otherwise,
+## @var{h} will be a cell matrix of the same size as @var{handles} and each
+## cell will contain a vector of handles.
 ## @seealso{findall, findobj, get, set}
 ## @end deftypefn
 
 ## Author: Bill Denney <bill@denney.ws>
 
 function h = allchild (handles)
 
   if (nargin != 1)
diff --git a/scripts/plot/util/ancestor.m b/scripts/plot/util/ancestor.m
--- a/scripts/plot/util/ancestor.m
+++ b/scripts/plot/util/ancestor.m
@@ -15,19 +15,20 @@
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {@var{parent} =} ancestor (@var{h}, @var{type})
 ## @deftypefnx {Function File} {@var{parent} =} ancestor (@var{h}, @var{type}, "toplevel")
 ## Return the first ancestor of handle object @var{h} whose type matches
-## @var{type}, where @var{type} is a character string.  If @var{type} is a
-## cell array of strings, return the first parent whose type matches
-## any of the given type strings.
+## @var{type}, where @var{type} is a character string.
+##
+## If @var{type} is a cell array of strings, return the first parent whose
+## type matches any of the given type strings.
 ##
 ## If the handle object @var{h} itself is of type @var{type}, return @var{h}.
 ##
 ## If @qcode{"toplevel"} is given as a third argument, return the highest
 ## parent in the object hierarchy that matches the condition, instead
 ## of the first (nearest) one.
 ## @seealso{findobj, findall, allchild}
 ## @end deftypefn
diff --git a/scripts/plot/util/axes.m b/scripts/plot/util/axes.m
--- a/scripts/plot/util/axes.m
+++ b/scripts/plot/util/axes.m
@@ -16,18 +16,18 @@
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {} axes ()
 ## @deftypefnx {Function File} {} axes (@var{property}, @var{value}, @dots{})
 ## @deftypefnx {Function File} {} axes (@var{hax})
 ## @deftypefnx {Function File} {@var{h} =} axes (@dots{})
-## Create an axes object and return a handle to it, or set the current
-## axes to @var{hax}.
+## Create an axes object and return a handle to it, or set the current axes
+## to @var{hax}.
 ##
 ## Called without any arguments, or with @var{property}/@var{value} pairs,
 ## construct a new axes.  For accepted properties and corresponding
 ## values, @pxref{XREFset,,set}.
 ##
 ## Called with a single axes handle argument @var{hax}, the function makes
 ## @var{hax} the current axis.  It also restacks the axes in the
 ## corresponding figure so that @var{hax} is the first entry in the list
diff --git a/scripts/plot/util/colstyle.m b/scripts/plot/util/colstyle.m
--- a/scripts/plot/util/colstyle.m
+++ b/scripts/plot/util/colstyle.m
@@ -14,16 +14,17 @@
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {[@var{style}, @var{color}, @var{marker}, @var{msg}] =} colstyle (@var{linespec})
 ## Parse @var{linespec} and return the line style, color, and markers given.
+##
 ## In the case of an error, the string @var{msg} will return the text of the
 ## error.
 ## @end deftypefn
 
 function [l, c, m, msg] = colstyle (style)
 
   if (nargin != 1)
     print_usage ();
diff --git a/scripts/plot/util/frame2im.m b/scripts/plot/util/frame2im.m
--- a/scripts/plot/util/frame2im.m
+++ b/scripts/plot/util/frame2im.m
@@ -20,18 +20,18 @@
 ## @deftypefn {Function File} {[@var{x}, @var{map}] =} frame2im (@var{f})
 ## Convert movie frame to indexed image.
 ##
 ## A movie frame is simply a struct with the fields @qcode{"cdata"} and
 ## @qcode{"colormap"}.
 ##
 ## Support for N-dimensional images or movies is given when @var{f} is a
 ## struct array.  In such cases, @var{x} will be a @nospell{MxNx1xK or MxNx3xK}
-## for indexed and RGB movies respectively, with each frame concatenated on
-## the 4th dimension.
+## for indexed and RGB movies respectively, with each frame concatenated
+## along the 4th dimension.
 ##
 ## @seealso{im2frame}
 ## @end deftypefn
 
 ## Author: Carnë Draug <carandraug@octave.org>
 
 function [x, map] = frame2im (frame)
 
diff --git a/scripts/plot/util/gnuplot_binary.in b/scripts/plot/util/gnuplot_binary.in
--- a/scripts/plot/util/gnuplot_binary.in
+++ b/scripts/plot/util/gnuplot_binary.in
@@ -14,20 +14,21 @@
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {Loadable Function} {[@var{prog}, @var{args}] =} gnuplot_binary ()
 ## @deftypefnx {Loadable Function} {[@var{old_prog}, @var{old_args}] =} gnuplot_binary (@var{new_prog}, @var{arg1}, @dots{})
-## Query or set the name of the program invoked by the plot command
-## when the graphics toolkit is set to "gnuplot".  Additional arguments to
-## pass to the external plotting program may also be given.
-## The default value is @qcode{"gnuplot"} with no additional arguments.
+## Query or set the name of the program invoked by the plot command when the
+## graphics toolkit is set to "gnuplot".
+##
+## Additional arguments to pass to the external plotting program may also be
+## given.  The default value is @qcode{"gnuplot"} with no additional arguments.
 ## @xref{Installation}.
 ## @seealso{graphics_toolkit}
 ## @end deftypefn
 
 ## Author: jwe
 
 function [prog, args] = gnuplot_binary (new_prog, varargin)
 
diff --git a/scripts/plot/util/hgsave.m b/scripts/plot/util/hgsave.m
--- a/scripts/plot/util/hgsave.m
+++ b/scripts/plot/util/hgsave.m
@@ -19,19 +19,21 @@
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {} hgsave (@var{filename})
 ## @deftypefnx {Function File} {} hgsave (@var{h}, @var{filename})
 ## @deftypefnx {Function File} {} hgsave (@var{h}, @var{filename}, @var{fmt})
 ## Save the graphics handle @var{h} to the file @var{filename} in the format
 ## @var{fmt}.
 ##
 ## If unspecified, @var{h} is the current figure as returned by @code{gcf}.
+##
 ## When @var{filename} does not have an extension the default filename
-## extension @file{.ofig} will be appended.  If present, @var{fmt} should
-## should be one of the following:
+## extension @file{.ofig} will be appended.
+##
+## If present, @var{fmt} should be one of the following:
 ##
 ## @itemize @bullet
 ## @item @option{-binary}, @option{-float-binary}
 ##
 ## @item @option{-hdf5}, @option{-float-hdf5}
 ##
 ## @item @option{-V7}, @option{-v7}, @code{-7}, @option{-mat7-binary}
 ##
diff --git a/scripts/plot/util/im2frame.m b/scripts/plot/util/im2frame.m
--- a/scripts/plot/util/im2frame.m
+++ b/scripts/plot/util/im2frame.m
@@ -20,18 +20,19 @@
 ## @deftypefn  {Function File} {} im2frame (@var{rgb})
 ## @deftypefnx {Function File} {} im2frame (@var{x}, @var{map})
 ## Convert image to movie frame.
 ##
 ## A movie frame is simply a struct with the fields @qcode{"cdata"} and
 ## @qcode{"colormap"}.
 ##
 ## Support for N-dimensional images is given when each image projection,
-## matrix sizes of @nospell{MxN and MxNx3} for RGB images, is concatenated on
-## the fourth dimension.  In such cases, the returned value is a struct array.
+## matrix sizes of @nospell{MxN and MxNx3} for RGB images, is concatenated
+## along the fourth dimension.  In such cases, the returned value is a struct
+## array.
 ##
 ## @seealso{frame2im}
 ## @end deftypefn
 
 ## Author: Carnë Draug <carandraug@octave.org>
 
 function [frame] = im2frame (x, map = [])
 
diff --git a/scripts/plot/util/isaxes.m b/scripts/plot/util/isaxes.m
--- a/scripts/plot/util/isaxes.m
+++ b/scripts/plot/util/isaxes.m
@@ -15,19 +15,18 @@
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} isaxes (@var{h})
 ## Return true if @var{h} is an axes graphics handle and false otherwise.
 ##
-## If @var{h} is a matrix then return a logical array which is true where
-## the elements of @var{h} are axes graphics handles and false where
-## they are not.
+## If @var{h} is a matrix then return a logical array which is true where the
+## elements of @var{h} are axes graphics handles and false where they are not.
 ## @seealso{isaxes, ishandle}
 ## @end deftypefn
 
 ## Author: jwe
 
 function retval = isaxes (h)
 
   if (nargin != 1)
diff --git a/scripts/plot/util/isfigure.m b/scripts/plot/util/isfigure.m
--- a/scripts/plot/util/isfigure.m
+++ b/scripts/plot/util/isfigure.m
@@ -15,19 +15,18 @@
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} isfigure (@var{h})
 ## Return true if @var{h} is a figure graphics handle and false otherwise.
 ##
-## If @var{h} is a matrix then return a logical array which is true where
-## the elements of @var{h} are figure graphics handles and false where
-## they are not.
+## If @var{h} is a matrix then return a logical array which is true where the
+## elements of @var{h} are figure graphics handles and false where they are not.
 ## @seealso{isaxes, ishandle}
 ## @end deftypefn
 
 ## Author: jwe
 
 function retval = isfigure (h)
 
   if (nargin != 1)
diff --git a/scripts/plot/util/linkaxes.m b/scripts/plot/util/linkaxes.m
--- a/scripts/plot/util/linkaxes.m
+++ b/scripts/plot/util/linkaxes.m
@@ -14,18 +14,18 @@
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {} linkaxes (@var{hax})
 ## @deftypefnx {Function File} {} linkaxes (@var{hax}, @var{optstr})
-## Link the axis limits of 2-D plots such that a change in one is
-## propagated to the others.
+## Link the axis limits of 2-D plots such that a change in one is propagated
+## to the others.
 ##
 ## The axes handles to be linked are passed as the first argument @var{hax}.
 ##
 ## The optional second argument is a string which defines which axis limits
 ## will be linked.  The possible values for @var{optstr} are:
 ##
 ## @table @asis
 ## @item @qcode{"x"}
diff --git a/scripts/plot/util/ndgrid.m b/scripts/plot/util/ndgrid.m
--- a/scripts/plot/util/ndgrid.m
+++ b/scripts/plot/util/ndgrid.m
@@ -14,22 +14,23 @@
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {[@var{y1}, @var{y2}, @dots{}, @var{y}n] =} ndgrid (@var{x1}, @var{x2}, @dots{}, @var{x}n)
 ## @deftypefnx {Function File} {[@var{y1}, @var{y2}, @dots{}, @var{y}n] =} ndgrid (@var{x})
-## Given n vectors @var{x1}, @dots{}, @var{x}n, @code{ndgrid} returns
-## n arrays of dimension n.  The elements of the i-th output argument
-## contains the elements of the vector @var{x}i repeated over all
-## dimensions different from the i-th dimension.  Calling ndgrid with
-## only one input argument @var{x} is equivalent to calling ndgrid with
-## all n input arguments equal to @var{x}:
+## Given n vectors @var{x1}, @dots{}, @var{x}n, @code{ndgrid} returns n
+## arrays of dimension n.
+##
+## The elements of the i-th output argument contains the elements of the
+## vector @var{x}i repeated over all dimensions different from the i-th
+## dimension.  Calling ndgrid with only one input argument @var{x} is
+## equivalent to calling ndgrid with all n input arguments equal to @var{x}:
 ##
 ## [@var{y1}, @var{y2}, @dots{}, @var{y}n] = ndgrid (@var{x}, @dots{}, @var{x})
 ##
 ## Programming Note: @code{ndgrid} is very similar to the function
 ## @code{meshgrid} except that the first two dimensions are transposed in
 ## comparison to @code{meshgrid}.  Some core functions expect @code{meshgrid}
 ## input and others expect @code{ndgrid} input.  Check the documentation for
 ## the function in question to determine the proper input format.
diff --git a/scripts/plot/util/pan.m b/scripts/plot/util/pan.m
--- a/scripts/plot/util/pan.m
+++ b/scripts/plot/util/pan.m
@@ -28,19 +28,18 @@
 ## Given the option @qcode{"on"} or @qcode{"off"}, set the interactive
 ## pan mode on or off.
 ##
 ## With no arguments, toggle the current pan mode on or off.
 ##
 ## Given the option @qcode{"xon"} or @qcode{"yon"}, enable pan mode
 ## for the x or y axis only.
 ##
-## If the first argument @var{hfig} is a figure, then operate on
-## the given figure rather than the current figure as returned by
-## @code{gcf}.
+## If the first argument @var{hfig} is a figure, then operate on the given
+## figure rather than the current figure as returned by @code{gcf}.
 ##
 ## @seealso{rotate3d, zoom}
 ## @end deftypefn
 
 function pan (varargin)
 
   hfig = NaN;
 
diff --git a/scripts/plot/util/print.m b/scripts/plot/util/print.m
--- a/scripts/plot/util/print.m
+++ b/scripts/plot/util/print.m
@@ -21,77 +21,75 @@
 ## @deftypefnx {Function File} {} print (@var{options})
 ## @deftypefnx {Function File} {} print (@var{filename}, @var{options})
 ## @deftypefnx {Function File} {} print (@var{h}, @var{filename}, @var{options})
 ## Print a plot, or save it to a file.
 ##
 ## Both output formatted for printing (PDF and PostScript), and many bitmapped
 ## and vector image formats are supported.
 ##
-## @var{filename} defines the name of the output file.  If the
-## file name has no suffix, one is inferred from the specified
-## device and appended to the file name.  If no filename is
-## specified, the output is sent to the printer.
+## @var{filename} defines the name of the output file.  If the file name has
+## no suffix, one is inferred from the specified device and appended to the
+## file name.  If no filename is specified, the output is sent to the
+## printer.
 ##
 ## @var{h} specifies the handle of the figure to print.  If no handle is
 ## specified the current figure is used.
 ##
-## For output to a printer, PostScript file, or PDF file,
-## the paper size is specified by the figure's @code{papersize}
-## property.  The location and size of the image on the page are
-## specified by the figure's @code{paperposition} property.  The
-## orientation of the page is specified by the figure's
-## @code{paperorientation} property.
+## For output to a printer, PostScript file, or PDF file, the paper size is
+## specified by the figure's @code{papersize} property.  The location and
+## size of the image on the page are specified by the figure's
+## @code{paperposition} property.  The orientation of the page is specified
+## by the figure's @code{paperorientation} property.
 ##
 ## The width and height of images are specified by the figure's
 ## @code{paperpositon(3:4)} property values.
 ##
 ## The @code{print} command supports many @var{options}:
 ##
 ## @table @code
 ## @item -f@var{h}
-##   Specify the handle, @var{h}, of the figure to be printed.  The
-## default is the current figure.
+##   Specify the handle, @var{h}, of the figure to be printed.  The default
+## is the current figure.
 ##
 ## @item -P@var{printer}
 ##   Set the @var{printer} name to which the plot is sent if no
 ## @var{filename} is specified.
 ##
 ## @item -G@var{ghostscript_command}
-##   Specify the command for calling Ghostscript.  For Unix and Windows
-## the defaults are @qcode{"gs"} and @qcode{"gswin32c"}, respectively.
+##   Specify the command for calling Ghostscript.  For Unix and Windows the
+## defaults are @qcode{"gs"} and @qcode{"gswin32c"}, respectively.
 ##
 ## @item  -color
 ## @itemx -mono
 ##   Color or monochrome output.
 ##
 ## @item  -solid
 ## @itemx -dashed
 ##   Force all lines to be solid or dashed, respectively.
 ##
 ## @item  -portrait
 ## @itemx -landscape
-##   Specify the orientation of the plot for printed output.  For
-## non-printed output the aspect ratio of the output corresponds to
-## the plot area defined by the @qcode{"paperposition"} property in the
-## orientation specified.  This option is equivalent to changing
-## the figure's @qcode{"paperorientation"} property.
+##   Specify the orientation of the plot for printed output.
+## For non-printed output the aspect ratio of the output corresponds to the
+## plot area defined by the @qcode{"paperposition"} property in the
+## orientation specified.  This option is equivalent to changing the figure's
+## @qcode{"paperorientation"} property.
 ##
 ## @item  -TextAlphaBits=@var{n}
 ## @itemx -GraphicsAlphaBits=@var{n}
 ##   Octave is able to produce output for various printers, bitmaps, and
-## vector formats by using Ghostscript.
-## For bitmap and printer output anti-aliasing is applied using
-## Ghostscript's TextAlphaBits and GraphicsAlphaBits options.
-## The default number of bits for each is 4.
+## vector formats by using Ghostscript.  For bitmap and printer output
+## anti-aliasing is applied using Ghostscript's TextAlphaBits and
+## GraphicsAlphaBits options.  The default number of bits for each is 4. 
 ## Allowed values for @var{N} are 1, 2, or 4.
 ##
 ## @item -d@var{device}
-##   The available output format is specified by the option @var{device},
-## and is one of:
+##   The available output format is specified by the option @var{device}, and
+## is one of:
 ##
 ##   @table @code
 ##   @item  ps
 ##   @itemx ps2
 ##   @itemx psc
 ##   @itemx psc2
 ##     PostScript (level 1 and 2, mono and color).  The FLTK graphics
 ## toolkit generates PostScript level 3.0.
@@ -143,19 +141,17 @@
 ##     AutoCAD
 ##
 ##   @item  emf
 ##   @itemx meta
 ##     Microsoft Enhanced Metafile
 ##
 ##   @item fig
 ##     XFig.  For the Gnuplot graphics toolkit, the additional options
-## @option{-textspecial} or @option{-textnormal} can be used to control
-## whether the special flag should be set for the text in
-## the figure.  (default is @option{-textnormal})
+## @option{-textspecial} or @option{-textnormal} can be used to control whether the special flag should be set for the text in the figure.  (default is @option{-textnormal})
 ##
 ##   @item hpgl
 ##     HP plotter language
 ##
 ##   @item mf
 ##     Metafont
 ##
 ##   @item png
@@ -197,28 +193,28 @@
 ##
 ##   @item ppm
 ##     Portable Pixel Map file format
 ##   @end table
 ##
 ##   For a complete list, type @code{system ("gs -h")} to see what formats
 ## and devices are available.
 ##
-##   When Ghostscript output is sent to a printer the size is determined
-## by the figure's @qcode{"papersize"} property.  When the output
-## is sent to a file the size is determined by the plot box defined by
-## the figure's @qcode{"paperposition"} property.
+##   When Ghostscript output is sent to a printer the size is determined by
+## the figure's @qcode{"papersize"} property.  When the output is sent to a
+## file the size is determined by the plot box defined by the figure's
+## @qcode{"paperposition"} property.
 ##
 ## @item -append
 ##   Append PostScript or PDF output to a pre-existing file of the same type.
 ##
 ## @item -r@var{NUM}
-##   Resolution of bitmaps in pixels per inch.  For both metafiles and
-## SVG the default is the screen resolution; for other formats it is 150 dpi.
-## To specify screen resolution, use @qcode{"-r0"}.
+##   Resolution of bitmaps in pixels per inch.  For both metafiles and SVG
+## the default is the screen resolution; for other formats it is 150 dpi.  To
+## specify screen resolution, use @qcode{"-r0"}.
 ##
 ## @item  -loose
 ## @itemx -tight
 ##   Force a tight or loose bounding box for eps files.  The default is loose.
 ##
 ## @item -@var{preview}
 ##   Add a preview to eps files.  Supported formats are:
 ##
@@ -232,22 +228,22 @@
 ##   @item -pict
 ##     Provide pict preview.
 ##
 ##   @item -tiff
 ##     Provide a tiff preview.
 ##   @end table
 ##
 ## @item -S@var{xsize},@var{ysize}
-##   Plot size in pixels for EMF, GIF, JPEG, PBM, PNG, and SVG@.  For
-## PS, EPS, PDF, and other vector formats the plot size is in points.
-## This option is equivalent to changing the size of the plot box
-## associated with the @qcode{"paperposition"} property.  When using the
-## command form of the print function you must quote the
-## @var{xsize},@var{ysize} option.  For example, by writing @w{"-S640,480"}.
+##   Plot size in pixels for EMF, GIF, JPEG, PBM, PNG, and SVG@.
+## For PS, EPS, PDF, and other vector formats the plot size is in points.
+## This option is equivalent to changing the size of the plot box associated
+## with the @qcode{"paperposition"} property.  When using the command form of
+## the print function you must quote the @var{xsize},@var{ysize} option.  For
+## example, by writing @w{"-S640,480"}.
 ##
 ## @item  -F@var{fontname}
 ## @itemx -F@var{fontname}:@var{size}
 ## @itemx -F:@var{size}
 ##   Use @var{fontname} and/or @var{fontsize} for all text.
 ## @var{fontname} is ignored for some devices: dxf, fig, hpgl, etc.
 ## @end table
 ##
diff --git a/scripts/plot/util/printd.m b/scripts/plot/util/printd.m
--- a/scripts/plot/util/printd.m
+++ b/scripts/plot/util/printd.m
@@ -17,22 +17,24 @@
 ## You should have received a copy of the GNU General Public
 ## License along with Octave; see the file COPYING. If not,
 ## see <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {} printd (@var{obj}, @var{filename})
 ## @deftypefnx {Function File} {@var{out_file} =} printd (@dots{})
 ##
-## Convert any object acceptable to @code{disp} into the format
-## selected by the suffix of @var{filename}.  If the return argument
-## @var{out_file} is given, the name of the created file is returned.
+## Convert any object acceptable to @code{disp} into the format selected by
+## the suffix of @var{filename}.
 ##
-## This function is intended to facilitate manipulation of the output
-## of functions such as @code{stemleaf}.
+## If the return argument @var{out_file} is given, the name of the created
+## file is returned.
+##
+## This function is intended to facilitate manipulation of the output of
+## functions such as @code{stemleaf}.
 ## @seealso{stemleaf}
 ## @end deftypefn
 
 ## Author: Michael D. Godfrey <michaeldgodfrey@gmail.com>
 ## Description: Convert objects into other file formats.
 
 function pr_out = printd (obj, filename)
   ## Convert any object acceptable to disp() into various display formats.
diff --git a/scripts/plot/util/private/__add_default_menu__.m b/scripts/plot/util/private/__add_default_menu__.m
--- a/scripts/plot/util/private/__add_default_menu__.m
+++ b/scripts/plot/util/private/__add_default_menu__.m
@@ -13,18 +13,20 @@
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} __add_default_menu__ (@var{fig})
-## Add default menu to figure.  All uimenu handles have
-## their @qcode{"HandleVisibility"} property set to @qcode{"off"}.
+## Add default menu to figure.
+##
+## All uimenu handles have their @qcode{"HandleVisibility"} property set to
+## @qcode{"off"}.
 ## @end deftypefn
 
 ## Author: Kai Habel
 
 function __add_default_menu__ (fig)
 
   ## Only FLTK toolkit currently provides menubar
   if (! strcmp (get (fig, "__graphics_toolkit__"), "fltk"))
diff --git a/scripts/plot/util/rotate.m b/scripts/plot/util/rotate.m
--- a/scripts/plot/util/rotate.m
+++ b/scripts/plot/util/rotate.m
@@ -14,27 +14,27 @@
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {} rotate (@var{h}, @var{dir}, @var{alpha})
 ## @deftypefnx {Function File} {} rotate (@dots{}, @var{origin})
-## Rotate the plot object @var{h} through @var{alpha} degrees around
-## the line with direction @var{dir} and origin @var{origin}.
+## Rotate the plot object @var{h} through @var{alpha} degrees around the line
+## with direction @var{dir} and origin @var{origin}.
 ##
-## The default value of @var{origin} is the center of the axes
-## object that is the parent of @var{h}.
+## The default value of @var{origin} is the center of the axes object that is
+## the parent of @var{h}.
 ##
-## If @var{h} is a vector of handles, they must all have the same
-## parent axes object.
+## If @var{h} is a vector of handles, they must all have the same parent axes
+## object.
 ##
-## Graphics objects that may be rotated are lines, surfaces, patches,
-## and images.
+## Graphics objects that may be rotated are lines, surfaces, patches, and
+## images.
 ## @end deftypefn
 
 function rotate (h, direction, alpha, origin)
 
   ## Note in doc string about compatibility issues with calculation of
   ## default origin due to possible differences in the auto-scaling
   ## algorithm between Octave and Matlab.
 
diff --git a/scripts/plot/util/rotate3d.m b/scripts/plot/util/rotate3d.m
--- a/scripts/plot/util/rotate3d.m
+++ b/scripts/plot/util/rotate3d.m
@@ -23,19 +23,18 @@
 ## @deftypefnx {Function File} {} rotate3d (@var{hfig}, @var{option})
 ## Control the interactive 3-D rotation mode of a figure in the GUI.
 ##
 ## Given the option @qcode{"on"} or @qcode{"off"}, set the interactive
 ## rotate mode on or off.
 ##
 ## With no arguments, toggle the current rotate mode on or off.
 ##
-## If the first argument @var{hfig} is a figure, then operate on
-## the given figure rather than the current figure as returned by
-## @code{gcf}.
+## If the first argument @var{hfig} is a figure, then operate on the given
+## figure rather than the current figure as returned by @code{gcf}.
 ##
 ## @seealso{pan, zoom}
 ## @end deftypefn
 
 function rotate3d (varargin)
 
   hfig = NaN;
 
diff --git a/scripts/plot/util/saveas.m b/scripts/plot/util/saveas.m
--- a/scripts/plot/util/saveas.m
+++ b/scripts/plot/util/saveas.m
@@ -14,18 +14,18 @@
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {} saveas (@var{h}, @var{filename})
 ## @deftypefnx {Function File} {} saveas (@var{h}, @var{filename}, @var{fmt})
-## Save graphic object @var{h} to the file @var{filename} in graphic
-## format @var{fmt}.
+## Save graphic object @var{h} to the file @var{filename} in graphic format
+## @var{fmt}.
 ##
 ## @var{fmt} should be one of the following formats:
 ##
 ## @table @code
 ##   @item ps
 ##     PostScript
 ##
 ##   @item eps
diff --git a/scripts/plot/util/struct2hdl.m b/scripts/plot/util/struct2hdl.m
--- a/scripts/plot/util/struct2hdl.m
+++ b/scripts/plot/util/struct2hdl.m
@@ -18,24 +18,25 @@
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {@var{h} =} struct2hdl (@var{s})
 ## @deftypefnx {Function File} {@var{h} =} struct2hdl (@var{s}, @var{p})
 ## @deftypefnx {Function File} {@var{h} =} struct2hdl (@var{s}, @var{p}, @var{hilev})
 ## Construct a graphics handle object @var{h} from the structure @var{s}.
 ##
 ## The structure must contain the fields @qcode{"handle"}, @qcode{"type"},
-## @qcode{"children"}, @qcode{"properties"}, and @qcode{"special"}.  If the
-## handle of an existing figure or axes is specified, @var{p}, the new object
-## will be created as a child of that object.  If no parent handle is provided
-## then a new figure and the necessary children will be constructed using the
-## default values from the root figure.
+## @qcode{"children"}, @qcode{"properties"}, and @qcode{"special"}.
 ##
-## A third boolean argument @var{hilev} can be passed to specify whether
-## the function should preserve listeners/callbacks, e.g., for legends or
+## If the handle of an existing figure or axes is specified, @var{p}, the new
+## object will be created as a child of that object.  If no parent handle is
+## provided then a new figure and the necessary children will be constructed
+## using the default values from the root figure.
+##
+## A third boolean argument @var{hilev} can be passed to specify whether the
+## function should preserve listeners/callbacks, e.g., for legends or
 ## hggroups.  The default is false.
 ## @seealso{hdl2struct, hgload, findobj}
 ## @end deftypefn
 
 ## Author: pdiribarne <pdiribarne@new-host.home>
 ## Created: 2012-03-04
 
 function [h, pout] = struct2hdl (s, p=[], hilev = false)
diff --git a/scripts/plot/util/subplot.m b/scripts/plot/util/subplot.m
--- a/scripts/plot/util/subplot.m
+++ b/scripts/plot/util/subplot.m
@@ -24,18 +24,18 @@
 ## @deftypefnx {Function File} {} subplot (@dots{}, "replace")
 ## @deftypefnx {Function File} {} subplot (@dots{}, "position", @var{pos})
 ## @deftypefnx {Function File} {} subplot (@dots{}, @var{prop}, @var{val}, @dots{})
 ## @deftypefnx {Function File} {@var{hax} =} subplot (@dots{})
 ## Set up a plot grid with @var{rows} by @var{cols} subwindows and set the
 ## current axes for plotting (@code{gca}) to the location given by @var{index}.
 ##
 ## If only one numeric argument is supplied, then it must be a three digit
-## value specifying the number of rows in digit 1, the number of
-## columns in digit 2, and the plot index in digit 3.
+## value specifying the number of rows in digit 1, the number of columns in
+## digit 2, and the plot index in digit 3.
 ##
 ## The plot index runs row-wise; First, all columns in a row are numbered
 ## and then the next row is filled.
 ##
 ## For example, a plot with 2x3 grid will have plot indices running as follows:
 ## @tex
 ## \vskip 10pt
 ## \hfil\vbox{\offinterlineskip\hrule
diff --git a/scripts/plot/util/zoom.m b/scripts/plot/util/zoom.m
--- a/scripts/plot/util/zoom.m
+++ b/scripts/plot/util/zoom.m
@@ -21,41 +21,40 @@
 ## @deftypefnx {Command} {} zoom (@var{factor})
 ## @deftypefnx {Command} {} zoom on
 ## @deftypefnx {Command} {} zoom off
 ## @deftypefnx {Command} {} zoom xon
 ## @deftypefnx {Command} {} zoom yon
 ## @deftypefnx {Command} {} zoom out
 ## @deftypefnx {Command} {} zoom reset
 ## @deftypefnx {Command} {} zoom (@var{hfig}, @var{option})
-## Zoom the current axes object or control the interactive zoom mode of
-## a figure in the GUI.
+## Zoom the current axes object or control the interactive zoom mode of a
+## figure in the GUI.
 ##
-## Given a numeric argument greater than zero, zoom by the given factor.
-## If the zoom factor is greater than one, zoom in on the plot.  If the
-## factor is less than one, zoom out.  If the zoom factor is a two- or
-## three-element vector, then the elements specify the zoom factors for
-## the x, y, and z axes respectively.
+## Given a numeric argument greater than zero, zoom by the given factor.  If
+## the zoom factor is greater than one, zoom in on the plot.  If the factor
+## is less than one, zoom out.  If the zoom factor is a two- or three-element
+## vector, then the elements specify the zoom factors for the x, y, and z
+## axes respectively.
 ##
-## Given the option @qcode{"on"} or @qcode{"off"}, set the interactive
-## zoom mode on or off.
+## Given the option @qcode{"on"} or @qcode{"off"}, set the interactive zoom
+## mode on or off.
 ##
 ## With no arguments, toggle the current zoom mode on or off.
 ##
-## Given the option @qcode{"xon"} or @qcode{"yon"}, enable zoom mode
-## for the x or y axis only.
+## Given the option @qcode{"xon"} or @qcode{"yon"}, enable zoom mode for the
+## x or y-axis only.
 ##
 ## Given the option @qcode{"out"}, zoom to the initial zoom setting.
 ##
-## Given the option @qcode{"reset"}, store the current zoom setting so
-## that @code{zoom out} will return to this zoom level.
+## Given the option @qcode{"reset"}, store the current zoom setting so that
+## @code{zoom out} will return to this zoom level.
 ##
-## If the first argument @var{hfig} is a figure, then operate on
-## the given figure rather than the current figure as returned by
-## @code{gcf}.
+## If the first argument @var{hfig} is a figure, then operate on the given
+## figure rather than the current figure as returned by @code{gcf}.
 ##
 ## @seealso{pan, rotate3d}
 ## @end deftypefn
 
 ## Eventually we need to also support these features:
 ## @deftypefnx {Command} {zoom_object_handle =} zoom (@var{hfig})
 
 function zoom (varargin)
diff --git a/scripts/polynomial/compan.m b/scripts/polynomial/compan.m
--- a/scripts/polynomial/compan.m
+++ b/scripts/polynomial/compan.m
@@ -13,18 +13,18 @@
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} compan (@var{c})
-## Compute the companion matrix corresponding to polynomial coefficient
-## vector @var{c}.
+## Compute the companion matrix corresponding to polynomial coefficient vector
+## @var{c}.
 ##
 ## The companion matrix is
 ## @tex
 ## $$
 ## A = \left[\matrix{
 ##  -c_2/c_1 & -c_3/c_1 & \cdots & -c_N/c_1 & -c_{N+1}/c_1\cr
 ##      1    &     0    & \cdots &     0    &         0   \cr
 ##      0    &     1    & \cdots &     0    &         0   \cr
diff --git a/scripts/polynomial/mkpp.m b/scripts/polynomial/mkpp.m
--- a/scripts/polynomial/mkpp.m
+++ b/scripts/polynomial/mkpp.m
@@ -16,34 +16,34 @@
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {@var{pp} =} mkpp (@var{breaks}, @var{coefs})
 ## @deftypefnx {Function File} {@var{pp} =} mkpp (@var{breaks}, @var{coefs}, @var{d})
 ##
 ## Construct a piecewise polynomial (pp) structure from sample points
-## @var{breaks} and coefficients @var{coefs}.  @var{breaks} must be a vector of
-## strictly increasing values.  The number of intervals is given by
-## @code{@var{ni} = length (@var{breaks}) - 1}.
-## When @var{m} is the polynomial order @var{coefs} must be of
-## size: @var{ni} x @var{m} + 1.
+## @var{breaks} and coefficients @var{coefs}.
 ##
-## The i-th row of @var{coefs},
-## @code{@var{coefs} (@var{i},:)}, contains the coefficients for the polynomial
-## over the @var{i}-th interval, ordered from highest (@var{m}) to
-## lowest (@var{0}).
+## @var{breaks} must be a vector of strictly increasing values.  The number of
+## intervals is given by @code{@var{ni} = length (@var{breaks}) - 1}.
+## 
+## When @var{m} is the polynomial order @var{coefs} must be of size:
+## @var{ni} x @var{m} + 1.
+##
+## The i-th row of @var{coefs}, @code{@var{coefs} (@var{i},:)}, contains the
+## coefficients for the polynomial over the @var{i}-th interval, ordered from
+## highest (@var{m}) to lowest (@var{0}).
 ##
 ## @var{coefs} may also be a multi-dimensional array, specifying a vector-valued
 ## or array-valued polynomial.  In that case the polynomial order is defined
-## by the length of the last dimension of @var{coefs}.
-## The size of first dimension(s) are given by the scalar or
-## vector @var{d}.  If @var{d} is not given it is set to @code{1}.
-## In any case @var{coefs} is reshaped to a 2-D matrix of
-## size @code{[@var{ni}*prod(@var{d} @var{m})] }
+## by the length of the last dimension of @var{coefs}.  The size of first
+## dimension(s) are given by the scalar or vector @var{d}.  If @var{d} is not
+## given it is set to @code{1}.  In any case @var{coefs} is reshaped to a 2-D
+## matrix of size @code{[@var{ni}*prod(@var{d} @var{m})] }
 ##
 ## @seealso{unmkpp, ppval, spline, pchip, ppder, ppint, ppjumps}
 ## @end deftypefn
 
 function pp = mkpp (x, P, d)
 
   ## check number of arguments
   if (nargin < 2 || nargin > 3)
diff --git a/scripts/polynomial/mpoles.m b/scripts/polynomial/mpoles.m
--- a/scripts/polynomial/mpoles.m
+++ b/scripts/polynomial/mpoles.m
@@ -15,27 +15,27 @@
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {[@var{multp}, @var{idxp}] =} mpoles (@var{p})
 ## @deftypefnx {Function File} {[@var{multp}, @var{idxp}] =} mpoles (@var{p}, @var{tol})
 ## @deftypefnx {Function File} {[@var{multp}, @var{idxp}] =} mpoles (@var{p}, @var{tol}, @var{reorder})
-## Identify unique poles in @var{p} and their associated multiplicity.  The
-## output is ordered from largest pole to smallest pole.
+## Identify unique poles in @var{p} and their associated multiplicity.
 ##
-## If the relative difference of two poles is less than @var{tol} then
-## they are considered to be multiples.  The default value for @var{tol}
-## is 0.001.
+## The output is ordered from largest pole to smallest pole.
+##
+## If the relative difference of two poles is less than @var{tol} then they are
+## considered to be multiples.  The default value for @var{tol} is 0.001.
 ##
 ## If the optional parameter @var{reorder} is zero, poles are not sorted.
 ##
-## The output @var{multp} is a vector specifying the multiplicity of the
-## poles.  @code{@var{multp}(n)} refers to the multiplicity of the Nth pole
+## The output @var{multp} is a vector specifying the multiplicity of the poles.
+## @code{@var{multp}(n)} refers to the multiplicity of the Nth pole
 ## @code{@var{p}(@var{idxp}(n))}.
 ##
 ## For example:
 ##
 ## @example
 ## @group
 ## p = [2 3 1 1 2];
 ## [m, n] = mpoles (p)
diff --git a/scripts/polynomial/pchip.m b/scripts/polynomial/pchip.m
--- a/scripts/polynomial/pchip.m
+++ b/scripts/polynomial/pchip.m
@@ -19,42 +19,44 @@
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {@var{pp} =} pchip (@var{x}, @var{y})
 ## @deftypefnx {Function File} {@var{yi} =} pchip (@var{x}, @var{y}, @var{xi})
 ## Return the Piecewise Cubic Hermite Interpolating Polynomial (pchip) of
 ## points @var{x} and @var{y}.
 ##
 ## If called with two arguments, return the piecewise polynomial @var{pp}
 ## that may be used with @code{ppval} to evaluate the polynomial at specific
-## points.  When called with a third input argument, @code{pchip} evaluates
-## the pchip polynomial at the points @var{xi}.  The third calling form is
-## equivalent to @code{ppval (pchip (@var{x}, @var{y}), @var{xi})}.
+## points.
+##
+## When called with a third input argument, @code{pchip} evaluates the pchip
+## polynomial at the points @var{xi}.  The third calling form is equivalent to
+## @code{ppval (pchip (@var{x}, @var{y}), @var{xi})}.
 ##
-## The variable @var{x} must be a strictly monotonic vector (either
-## increasing or decreasing) of length @var{n}.  @var{y} can be either a
-## vector or array.  If @var{y} is a vector then it must be the same length
-## @var{n} as @var{x}.  If @var{y} is an array then the size of @var{y} must
-## have the form
+## The variable @var{x} must be a strictly monotonic vector (either increasing
+## or decreasing) of length @var{n}.
+##
+## @var{y} can be either a vector or array.  If @var{y} is a vector then it
+## must be the same length @var{n} as @var{x}.  If @var{y} is an array then
+## the size of @var{y} must have the form
 ## @tex
 ## $$[s_1, s_2, \cdots, s_k, n]$$
 ## @end tex
 ## @ifnottex
 ## @code{[@var{s1}, @var{s2}, @dots{}, @var{sk}, @var{n}]}
 ## @end ifnottex
-## The array is reshaped internally to a matrix where the leading
-## dimension is given by
+## The array is reshaped internally to a matrix where the leading dimension is
+## given by
 ## @tex
 ## $$s_1 s_2 \cdots s_k$$
 ## @end tex
 ## @ifnottex
 ## @code{@var{s1} * @var{s2} * @dots{} * @var{sk}}
 ## @end ifnottex
-## and each row of this matrix is then treated separately.  Note that this
-## is exactly opposite to @code{interp1} but is done for @sc{matlab}
-## compatibility.
+## and each row of this matrix is then treated separately.  Note that this is
+## exactly opposite to @code{interp1} but is done for @sc{matlab} compatibility.
 ##
 ## @seealso{spline, ppval, mkpp, unmkpp}
 ## @end deftypefn
 
 ## Author:  Kai Habel <kai.habel@gmx.de>
 ## Date: 9. mar 2001
 ##
 ## S_k = a_k + b_k*x + c_k*x^2 + d_k*x^3; (spline polynom)
diff --git a/scripts/polynomial/poly.m b/scripts/polynomial/poly.m
--- a/scripts/polynomial/poly.m
+++ b/scripts/polynomial/poly.m
@@ -16,38 +16,40 @@
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {} poly (@var{A})
 ## @deftypefnx {Function File} {} poly (@var{x})
 ## If @var{A} is a square @math{N}-by-@math{N} matrix, @code{poly (@var{A})}
 ## is the row vector of the coefficients of @code{det (z * eye (N) - A)},
-## the characteristic polynomial of @var{A}.  For example,
-## the following code finds the eigenvalues of @var{A} which are the roots of
-## @code{poly (@var{A})}.
+## the characteristic polynomial of @var{A}.
+##
+## For example, the following code finds the eigenvalues of @var{A} which are
+## the roots of @code{poly (@var{A})}.
 ##
 ## @example
 ## @group
 ## roots (poly (eye (3)))
 ##     @result{} 1.00001 + 0.00001i
 ##        1.00001 - 0.00001i
 ##        0.99999 + 0.00000i
 ## @end group
 ## @end example
 ##
 ## In fact, all three eigenvalues are exactly 1 which emphasizes that for
 ## numerical performance the @code{eig} function should be used to compute
 ## eigenvalues.
 ##
 ## If @var{x} is a vector, @code{poly (@var{x})} is a vector of the
 ## coefficients of the polynomial whose roots are the elements of @var{x}.
-## That is, if @var{c} is a polynomial, then the elements of @code{@var{d} =
-## roots (poly (@var{c}))} are contained in @var{c}.  The vectors @var{c} and
-## @var{d} are not identical, however, due to sorting and numerical errors.
+## That is, if @var{c} is a polynomial, then the elements of
+## @code{@var{d} = roots (poly (@var{c}))} are contained in @var{c}.  The
+## vectors @var{c} and @var{d} are not identical, however, due to sorting and
+## numerical errors.
 ## @seealso{roots, eig}
 ## @end deftypefn
 
 ## Author: KH <Kurt.Hornik@wu-wien.ac.at>
 ## Created: 24 December 1993
 ## Adapted-By: jwe
 
 function y = poly (x)
diff --git a/scripts/polynomial/polyaffine.m b/scripts/polynomial/polyaffine.m
--- a/scripts/polynomial/polyaffine.m
+++ b/scripts/polynomial/polyaffine.m
@@ -14,19 +14,20 @@
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} polyaffine (@var{f}, @var{mu})
 ## Return the coefficients of the polynomial vector @var{f} after an affine
-## transformation.  If @var{f} is the vector representing the polynomial f(x),
-## then @code{@var{g} = polyaffine (@var{f}, @var{mu})} is the vector
-## representing:
+## transformation.
+##
+## If @var{f} is the vector representing the polynomial f(x), then
+## @code{@var{g} = polyaffine (@var{f}, @var{mu})} is the vector representing:
 ##
 ## @example
 ## g(x) = f( (x - @var{mu}(1)) / @var{mu}(2) )
 ## @end example
 ##
 ## @seealso{polyval, polyfit}
 ## @end deftypefn
 
diff --git a/scripts/polynomial/polyder.m b/scripts/polynomial/polyder.m
--- a/scripts/polynomial/polyder.m
+++ b/scripts/polynomial/polyder.m
@@ -16,18 +16,21 @@
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {} polyder (@var{p})
 ## @deftypefnx {Function File} {[@var{k}] =} polyder (@var{a}, @var{b})
 ## @deftypefnx {Function File} {[@var{q}, @var{d}] =} polyder (@var{b}, @var{a})
 ## Return the coefficients of the derivative of the polynomial whose
-## coefficients are given by the vector @var{p}.  If a pair of polynomials
-## is given, return the derivative of the product @math{@var{a}*@var{b}}.
+## coefficients are given by the vector @var{p}.
+##
+## If a pair of polynomials is given, return the derivative of the product
+## @math{@var{a}*@var{b}}.
+## 
 ## If two inputs and two outputs are given, return the derivative of the
 ## polynomial quotient @math{@var{b}/@var{a}}.  The quotient numerator is
 ## in @var{q} and the denominator in @var{d}.
 ## @seealso{polyint, polyval, polyreduce}
 ## @end deftypefn
 
 ## Author: Tony Richardson <arichard@stark.cc.oh.us>
 ## Created: June 1994
diff --git a/scripts/polynomial/polyeig.m b/scripts/polynomial/polyeig.m
--- a/scripts/polynomial/polyeig.m
+++ b/scripts/polynomial/polyeig.m
@@ -18,18 +18,21 @@
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {@var{z} =} polyeig (@var{C0}, @var{C1}, @dots{}, @var{Cl})
 ## @deftypefnx {Function File} {[@var{v}, @var{z}] =} polyeig (@var{C0}, @var{C1}, @dots{}, @var{Cl})
 ##
 ## Solve the polynomial eigenvalue problem of degree @var{l}.
 ##
 ## Given an @var{n*n} matrix polynomial
+##
 ## @code{@var{C}(s) = @var{C0} + @var{C1} s + @dots{} + @var{Cl} s^l}
-## polyeig solves the eigenvalue problem
+##
+## @code{polyeig} solves the eigenvalue problem
+##
 ## @code{(@var{C0} + @var{C1} + @dots{} + @var{Cl})v = 0}.
 ##
 ## Note that the eigenvalues @var{z} are the zeros of the matrix polynomial.
 ## @var{z} is a row vector with @var{n*l} elements.  @var{v} is a matrix
 ## (@var{n} x @var{n}*@var{l}) with columns that correspond to the
 ## eigenvectors.
 ##
 ## @seealso{eig, eigs, compan}
diff --git a/scripts/polynomial/polyfit.m b/scripts/polynomial/polyfit.m
--- a/scripts/polynomial/polyfit.m
+++ b/scripts/polynomial/polyfit.m
@@ -17,19 +17,20 @@
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {@var{p} =} polyfit (@var{x}, @var{y}, @var{n})
 ## @deftypefnx {Function File} {[@var{p}, @var{s}] =} polyfit (@var{x}, @var{y}, @var{n})
 ## @deftypefnx {Function File} {[@var{p}, @var{s}, @var{mu}] =} polyfit (@var{x}, @var{y}, @var{n})
 ## Return the coefficients of a polynomial @var{p}(@var{x}) of degree
 ## @var{n} that minimizes the least-squares-error of the fit to the points
-## @code{[@var{x}, @var{y}]}.  If @var{n} is a logical vector, it is used
-## as a mask to selectively force the corresponding polynomial
-## coefficients to be used or ignored.
+## @code{[@var{x}, @var{y}]}.
+##
+## If @var{n} is a logical vector, it is used as a mask to selectively force
+## the corresponding polynomial coefficients to be used or ignored.
 ##
 ## The polynomial coefficients are returned in a row vector.
 ##
 ## The optional output @var{s} is a structure containing the following fields:
 ##
 ## @table @samp
 ## @item R
 ## Triangular factor R from the QR@tie{}decomposition.
@@ -49,25 +50,28 @@
 ## The norm of the residuals.
 ##
 ## @item yf
 ## The values of the polynomial for each value of @var{x}.
 ## @end table
 ##
 ## The second output may be used by @code{polyval} to calculate the
 ## statistical error limits of the predicted values.  In particular, the
-## standard deviation of @var{p} coefficients is given by @*
+## standard deviation of @var{p} coefficients is given by
+##
 ## @code{sqrt (diag (s.C)/s.df)*s.normr}.
 ##
-## When the third output, @var{mu}, is present the
-## coefficients, @var{p}, are associated with a polynomial in
-## @var{xhat} = (@var{x}-@var{mu}(1))/@var{mu}(2).
-## Where @var{mu}(1) = mean (@var{x}), and @var{mu}(2) = std (@var{x}).
-## This linear transformation of @var{x} improves the numerical
-## stability of the fit.
+## When the third output, @var{mu}, is present the coefficients, @var{p}, are
+## associated with a polynomial in
+##
+## @code{@var{xhat} = (@var{x} - @var{mu}(1)) / @var{mu}(2)} @*
+## where @var{mu}(1) = mean (@var{x}), and @var{mu}(2) = std (@var{x}).
+##
+## This linear transformation of @var{x} improves the numerical stability of
+## the fit.
 ## @seealso{polyval, polyaffine, roots, vander, zscore}
 ## @end deftypefn
 
 ## Author: KH <Kurt.Hornik@wu-wien.ac.at>
 ## Created: 13 December 1994
 ## Adapted-By: jwe
 ## Modified on 20120204 by P. Dupuis; added the ability to specify a
 ## polynomial mask instead of a polynomial degree.
diff --git a/scripts/polynomial/polygcd.m b/scripts/polynomial/polygcd.m
--- a/scripts/polynomial/polygcd.m
+++ b/scripts/polynomial/polygcd.m
@@ -15,19 +15,22 @@
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {@var{q} =} polygcd (@var{b}, @var{a})
 ## @deftypefnx {Function File} {@var{q} =} polygcd (@var{b}, @var{a}, @var{tol})
 ##
-## Find the greatest common divisor of two polynomials.  This is equivalent
-## to the polynomial found by multiplying together all the common roots.
-## Together with deconv, you can reduce a ratio of two polynomials.
+## Find the greatest common divisor of two polynomials.
+##
+## This is equivalent to the polynomial found by multiplying together all the
+## common roots.  Together with deconv, you can reduce a ratio of two
+## polynomials.
+##
 ## The tolerance @var{tol} defaults to @code{sqrt (eps)}.
 ##
 ## @strong{Caution:} This is a numerically unstable algorithm and should not
 ## be used on large polynomials.
 ##
 ## Example code:
 ##
 ## @example
diff --git a/scripts/polynomial/polyint.m b/scripts/polynomial/polyint.m
--- a/scripts/polynomial/polyint.m
+++ b/scripts/polynomial/polyint.m
@@ -15,18 +15,20 @@
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {} polyint (@var{p})
 ## @deftypefnx {Function File} {} polyint (@var{p}, @var{k})
 ## Return the coefficients of the integral of the polynomial whose
-## coefficients are represented by the vector @var{p}.  The variable
-## @var{k} is the constant of integration, which by default is set to zero.
+## coefficients are represented by the vector @var{p}.
+##
+## The variable @var{k} is the constant of integration, which by default is
+## set to zero.
 ## @seealso{polyder, polyval}
 ## @end deftypefn
 
 ## Author: Tony Richardson <arichard@stark.cc.oh.us>
 ## Created: June 1994
 ## Adapted-By: jwe
 
 function retval = polyint (p, k)
diff --git a/scripts/polynomial/polyout.m b/scripts/polynomial/polyout.m
--- a/scripts/polynomial/polyout.m
+++ b/scripts/polynomial/polyout.m
@@ -15,29 +15,33 @@
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {} polyout (@var{c})
 ## @deftypefnx {Function File} {} polyout (@var{c}, @var{x})
 ## @deftypefnx {Function File} {@var{str} =} polyout (@dots{})
-## Write formatted polynomial
+## Display a formatted version of the polynomial @var{c}.
+##
+## The formatted polynomial
 ## @tex
 ## $$ c(x) = c_1 x^n + \ldots + c_n x + c_{n+1} $$
 ## @end tex
 ## @ifnottex
 ##
 ## @example
 ## c(x) = c(1) * x^n + @dots{} + c(n) x + c(n+1)
 ## @end example
 ##
 ## @end ifnottex
-## and return it as a string or write it to the screen (if @var{nargout} is
-## zero).  @var{x} defaults to the string @qcode{"s"}.
+## is returned as a string or written to the screen if @code{nargout} is zero.
+##
+## The second argument @var{x} specifies the variable name to use for each term
+## and defaults to the string @qcode{"s"}.
 ## @seealso{polyreduce}
 ## @end deftypefn
 
 ## Author: A. S. Hodel <a.s.hodel@eng.auburn.edu>
 ## Created: May 1995
 ## Nov 1998: Correctly handles complex coefficients
 
 function y = polyout (c, x)
diff --git a/scripts/polynomial/polyval.m b/scripts/polynomial/polyval.m
--- a/scripts/polynomial/polyval.m
+++ b/scripts/polynomial/polyval.m
@@ -17,27 +17,29 @@
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {@var{y} =} polyval (@var{p}, @var{x})
 ## @deftypefnx {Function File} {@var{y} =} polyval (@var{p}, @var{x}, [], @var{mu})
 ## @deftypefnx {Function File} {[@var{y}, @var{dy}] =} polyval (@var{p}, @var{x}, @var{s})
 ## @deftypefnx {Function File} {[@var{y}, @var{dy}] =} polyval (@var{p}, @var{x}, @var{s}, @var{mu})
 ##
-## Evaluate the polynomial @var{p} at the specified values of @var{x}.  When
-## @var{mu} is present, evaluate the polynomial for
-## (@var{x}-@var{mu}(1))/@var{mu}(2).
+## Evaluate the polynomial @var{p} at the specified values of @var{x}.
+##
 ## If @var{x} is a vector or matrix, the polynomial is evaluated for each of
 ## the elements of @var{x}.
 ##
-## In addition to evaluating the polynomial, the second output
-## represents the prediction interval, @var{y} +/- @var{dy}, which
-## contains at least 50% of the future predictions.  To calculate the
-## prediction interval, the structured variable @var{s}, originating
-## from @code{polyfit}, must be supplied.
+## When @var{mu} is present, evaluate the polynomial for
+## (@var{x}-@var{mu}(1))/@var{mu}(2).
+##
+## In addition to evaluating the polynomial, the second output represents the
+## prediction interval, @var{y} +/- @var{dy}, which contains at least 50% of
+## the future predictions.  To calculate the prediction interval, the
+## structured variable @var{s}, originating from @code{polyfit}, must be
+## supplied.
 ##
 ## @seealso{polyvalm, polyaffine, polyfit, roots, poly}
 ## @end deftypefn
 
 ## Author: Tony Richardson <arichard@stark.cc.oh.us>
 ## Created: June 1994
 ## Adapted-By: jwe
 
diff --git a/scripts/polynomial/ppder.m b/scripts/polynomial/ppder.m
--- a/scripts/polynomial/ppder.m
+++ b/scripts/polynomial/ppder.m
@@ -15,17 +15,19 @@
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {ppd =} ppder (pp)
 ## @deftypefnx {Function File} {ppd =} ppder (pp, m)
 ## Compute the piecewise @var{m}-th derivative of a piecewise polynomial
-## struct @var{pp}.  If @var{m} is omitted the first derivative is calculated.
+## struct @var{pp}.
+##
+## If @var{m} is omitted the first derivative is calculated.
 ## @seealso{mkpp, ppval, ppint}
 ## @end deftypefn
 
 function ppd = ppder (pp, m = 1)
 
   if (nargin < 1 || nargin > 2)
     print_usage ();
   endif
diff --git a/scripts/polynomial/ppint.m b/scripts/polynomial/ppint.m
--- a/scripts/polynomial/ppint.m
+++ b/scripts/polynomial/ppint.m
@@ -15,16 +15,17 @@
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {@var{ppi} =} ppint (@var{pp})
 ## @deftypefnx {Function File} {@var{ppi} =} ppint (@var{pp}, @var{c})
 ## Compute the integral of the piecewise polynomial struct @var{pp}.
+##
 ## @var{c}, if given, is the constant of integration.
 ## @seealso{mkpp, ppval, ppder}
 ## @end deftypefn
 
 function ppi = ppint (pp, c)
   if (nargin < 1 || nargin > 2)
     print_usage ();
   endif
diff --git a/scripts/polynomial/ppjumps.m b/scripts/polynomial/ppjumps.m
--- a/scripts/polynomial/ppjumps.m
+++ b/scripts/polynomial/ppjumps.m
@@ -14,16 +14,17 @@
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {@var{jumps} =} ppjumps (@var{pp})
 ## Evaluate the boundary jumps of a piecewise polynomial.
+##
 ## If there are @math{n} intervals, and the dimensionality of @var{pp} is
 ## @math{d}, the resulting array has dimensions @code{[d, n-1]}.
 ## @seealso{mkpp}
 ## @end deftypefn
 
 function jumps = ppjumps (pp)
   if (nargin != 1)
     print_usage ();
diff --git a/scripts/polynomial/ppval.m b/scripts/polynomial/ppval.m
--- a/scripts/polynomial/ppval.m
+++ b/scripts/polynomial/ppval.m
@@ -14,21 +14,21 @@
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {@var{yi} =} ppval (@var{pp}, @var{xi})
 ## Evaluate the piecewise polynomial structure @var{pp} at the points @var{xi}.
-## If @var{pp} describes a scalar polynomial function, the result is an
-## array of the same shape as @var{xi}.
-## Otherwise, the size of the result is @code{[pp.dim, length(@var{xi})]} if
-## @var{xi} is a vector, or @code{[pp.dim, size(@var{xi})]} if it is a
-## multi-dimensional array.
+##
+## If @var{pp} describes a scalar polynomial function, the result is an array
+## of the same shape as @var{xi}.  Otherwise, the size of the result is
+## @code{[pp.dim, length(@var{xi})]} if @var{xi} is a vector, or
+## @code{[pp.dim, size(@var{xi})]} if it is a multi-dimensional array.
 ## @seealso{mkpp, unmkpp, spline, pchip}
 ## @end deftypefn
 
 function yi = ppval (pp, xi)
 
   if (nargin != 2)
     print_usage ();
   endif
diff --git a/scripts/polynomial/residue.m b/scripts/polynomial/residue.m
--- a/scripts/polynomial/residue.m
+++ b/scripts/polynomial/residue.m
@@ -18,38 +18,40 @@
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {[@var{r}, @var{p}, @var{k}, @var{e}] =} residue (@var{b}, @var{a})
 ## @deftypefnx {Function File} {[@var{b}, @var{a}] =} residue (@var{r}, @var{p}, @var{k})
 ## @deftypefnx {Function File} {[@var{b}, @var{a}] =} residue (@var{r}, @var{p}, @var{k}, @var{e})
 ## The first calling form computes the partial fraction expansion for the
 ## quotient of the polynomials, @var{b} and @var{a}.
+##
+## The quotient is defined as
 ## @tex
 ## $$
 ## {B(s)\over A(s)} = \sum_{m=1}^M {r_m\over (s-p_m)^e_m}
 ##   + \sum_{i=1}^N k_i s^{N-i}.
 ## $$
 ## @end tex
 ## @ifnottex
 ##
 ## @example
 ## @group
-## B(s)    M       r(m)         N
-## ---- = SUM -------------  + SUM k(i)*s^(N-i)
-## A(s)   m=1 (s-p(m))^e(m)    i=1
+## B(s)    M       r(m)        N
+## ---- = SUM ------------- + SUM k(i)*s^(N-i)
+## A(s)   m=1 (s-p(m))^e(m)   i=1
 ## @end group
 ## @end example
 ##
 ## @end ifnottex
 ## @noindent
-## where @math{M} is the number of poles (the length of the @var{r},
-## @var{p}, and @var{e}), the @var{k} vector is a polynomial of order @math{N-1}
-## representing the direct contribution, and the @var{e} vector specifies
-## the multiplicity of the m-th residue's pole.
+## where @math{M} is the number of poles (the length of the @var{r}, @var{p},
+## and @var{e}), the @var{k} vector is a polynomial of order @math{N-1}
+## representing the direct contribution, and the @var{e} vector specifies the
+## multiplicity of the m-th residue's pole.
 ##
 ## For example,
 ##
 ## @example
 ## @group
 ## b = [1, 1, 1];
 ## a = [1, -5, 8, -4];
 ## [r, p, k, e] = residue (b, a)
@@ -74,21 +76,21 @@
 ##         s^2 + s + 1       -2        7        3
 ##    ------------------- = ----- + ------- + -----
 ##    s^3 - 5s^2 + 8s - 4   (s-2)   (s-2)^2   (s-1)
 ## @end group
 ## @end example
 ##
 ## @end ifnottex
 ##
-## The second calling form performs the inverse operation and computes
-## the reconstituted quotient of polynomials, @var{b}(s)/@var{a}(s),
-## from the partial fraction expansion; represented by the residues,
-## poles, and a direct polynomial specified by @var{r}, @var{p} and
-## @var{k}, and the pole multiplicity @var{e}.
+## The second calling form performs the inverse operation and computes the
+## reconstituted quotient of polynomials, @var{b}(s)/@var{a}(s), from the
+## partial fraction expansion; represented by the residues, poles, and a direct
+## polynomial specified by @var{r}, @var{p} and @var{k}, and the pole
+## multiplicity @var{e}.
 ##
 ## If the multiplicity, @var{e}, is not explicitly specified the multiplicity is
 ## determined by the function @code{mpoles}.
 ##
 ## For example:
 ##
 ## @example
 ## @group
diff --git a/scripts/polynomial/roots.m b/scripts/polynomial/roots.m
--- a/scripts/polynomial/roots.m
+++ b/scripts/polynomial/roots.m
@@ -12,29 +12,31 @@
 ## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
-## @deftypefn {Function File} {} roots (@var{v})
+## @deftypefn {Function File} {} roots (@var{c})
 ##
-## For a vector @var{v} with @math{N} components, return
-## the roots of the polynomial
+## Compute the roots of the polynomial @var{c}.
+##
+## For a vector @var{c} with @math{N} components, return the roots of the
+## polynomial
 ## @tex
 ## $$
-## v_1 z^{N-1} + \cdots + v_{N-1} z + v_N.
+## c_1 x^{N-1} + \cdots + c_{N-1} x + c_N.
 ## $$
 ## @end tex
 ## @ifnottex
 ##
 ## @example
-## v(1) * z^(N-1) + @dots{} + v(N-1) * z + v(N)
+## c(1) * x^(N-1) + @dots{} + c(N-1) * x + c(N)
 ## @end example
 ##
 ## @end ifnottex
 ##
 ## As an example, the following code finds the roots of the quadratic
 ## polynomial
 ## @tex
 ## $$ p(x) = x^2 - 5. $$
diff --git a/scripts/polynomial/spline.m b/scripts/polynomial/spline.m
--- a/scripts/polynomial/spline.m
+++ b/scripts/polynomial/spline.m
@@ -19,28 +19,31 @@
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {@var{pp} =} spline (@var{x}, @var{y})
 ## @deftypefnx {Function File} {@var{yi} =} spline (@var{x}, @var{y}, @var{xi})
 ## Return the cubic spline interpolant of points @var{x} and @var{y}.
 ##
 ## When called with two arguments, return the piecewise polynomial @var{pp}
 ## that may be used with @code{ppval} to evaluate the polynomial at specific
-## points.  When called with a third input argument, @code{spline} evaluates
-## the spline at the points @var{xi}.  The third calling form @code{spline
-## (@var{x}, @var{y}, @var{xi})} is equivalent to @code{ppval (spline
-## (@var{x}, @var{y}), @var{xi})}.
+## points.
+##
+## When called with a third input argument, @code{spline} evaluates the spline
+## at the points @var{xi}.  The third calling form
+## @code{spline (@var{x}, @var{y}, @var{xi})} is equivalent to
+## @code{ppval (spline (@var{x}, @var{y}), @var{xi})}.
 ##
-## The variable @var{x} must be a vector of length @var{n}.  @var{y} can be
-## either a vector or array.  If @var{y} is a vector it must have a length of
-## either @var{n} or @code{@var{n} + 2}.  If the length of @var{y} is
-## @var{n}, then the "not-a-knot" end condition is used.  If the length of
-## @var{y} is @code{@var{n} + 2}, then the first and last values of the
-## vector @var{y} are the values of the first derivative of the cubic spline
-## at the endpoints.
+## The variable @var{x} must be a vector of length @var{n}.
+##
+## @var{y} can be either a vector or array.  If @var{y} is a vector it must
+## have a length of either @var{n} or @code{@var{n} + 2}.  If the length of
+## @var{y} is @var{n}, then the @qcode{"not-a-knot"} end condition is used. 
+## If the length of @var{y} is @code{@var{n} + 2}, then the first and last
+## values of the vector @var{y} are the values of the first derivative of the
+## cubic spline at the endpoints.
 ##
 ## If @var{y} is an array, then the size of @var{y} must have the form
 ## @tex
 ## $$[s_1, s_2, \cdots, s_k, n]$$
 ## @end tex
 ## @ifnottex
 ## @code{[@var{s1}, @var{s2}, @dots{}, @var{sk}, @var{n}]}
 ## @end ifnottex
@@ -54,18 +57,18 @@
 ## The array is reshaped internally to a matrix where the leading
 ## dimension is given by
 ## @tex
 ## $$s_1 s_2 \cdots s_k$$
 ## @end tex
 ## @ifnottex
 ## @code{@var{s1} * @var{s2} * @dots{} * @var{sk}}
 ## @end ifnottex
-## and each row of this matrix is then treated separately.  Note that this
-## is exactly opposite to @code{interp1} but is done for @sc{matlab}
+## and each row of this matrix is then treated separately.  Note that this is
+## exactly the opposite of @code{interp1} but is done for @sc{matlab}
 ## compatibility.
 ##
 ## @seealso{pchip, ppval, mkpp, unmkpp}
 ## @end deftypefn
 
 ## This code is based on csape.m from octave-forge, but has been
 ## modified to use the sparse solver code in octave that itself allows
 ## special casing of tri-diagonal matrices, modified for NDArrays and
diff --git a/scripts/polynomial/splinefit.m b/scripts/polynomial/splinefit.m
--- a/scripts/polynomial/splinefit.m
+++ b/scripts/polynomial/splinefit.m
@@ -21,50 +21,51 @@
 ## @deftypefnx {Function File} {@var{pp} =} splinefit (@var{x}, @var{y}, @var{p})
 ## @deftypefnx {Function File} {@var{pp} =} splinefit (@dots{}, "periodic", @var{periodic})
 ## @deftypefnx {Function File} {@var{pp} =} splinefit (@dots{}, "robust", @var{robust})
 ## @deftypefnx {Function File} {@var{pp} =} splinefit (@dots{}, "beta", @var{beta})
 ## @deftypefnx {Function File} {@var{pp} =} splinefit (@dots{}, "order", @var{order})
 ## @deftypefnx {Function File} {@var{pp} =} splinefit (@dots{}, "constraints", @var{constraints})
 ##
 ## Fit a piecewise cubic spline with breaks (knots) @var{breaks} to the
-## noisy data, @var{x} and @var{y}.  @var{x} is a vector, and @var{y}
-## is a vector or N-D array.  If @var{y} is an N-D array, then @var{x}(j)
-## is matched to @var{y}(:,@dots{},:,j).
+## noisy data, @var{x} and @var{y}.
 ##
-## The fitted spline is returned as a piecewise polynomial, @var{pp}, and
-## may be evaluated using @code{ppval}.
+## @var{x} is a vector, and @var{y} is a vector or N-D array.  If @var{y} is an
+## N-D array, then @var{x}(j) is matched to @var{y}(:,@dots{},:,j).
 ##
 ## @var{p} is a positive integer defining the number of intervals along @var{x},
 ## and @var{p}+1 is the number of breaks.  The number of points in each interval
 ## differ by no more than 1.
 ##
 ## The optional property @var{periodic} is a logical value which specifies
 ## whether a periodic boundary condition is applied to the spline.  The
 ## length of the period is @code{max (@var{breaks}) - min (@var{breaks})}.
 ## The default value is @code{false}.
 ##
 ## The optional property @var{robust} is a logical value which specifies
 ## if robust fitting is to be applied to reduce the influence of outlying
 ## data points.  Three iterations of weighted least squares are performed.
 ## Weights are computed from previous residuals.  The sensitivity of outlier
 ## identification is controlled by the property @var{beta}.  The value of
-## @var{beta} is stricted to the range, 0 < @var{beta} < 1.  The default
+## @var{beta} is restricted to the range, 0 < @var{beta} < 1.  The default
 ## value is @var{beta} = 1/2.  Values close to 0 give all data equal
 ## weighting.  Increasing values of @var{beta} reduce the influence of
 ## outlying data.  Values close to unity may cause instability or rank
 ## deficiency.
 ##
+## The fitted spline is returned as a piecewise polynomial, @var{pp}, and
+## may be evaluated using @code{ppval}.
+##
 ## The splines are constructed of polynomials with degree @var{order}.
 ## The default is a cubic, @var{order}=3.  A spline with P pieces has
 ## P+@var{order} degrees of freedom.  With periodic boundary conditions
 ## the degrees of freedom are reduced to P.
 ##
-## The optional property, @var{constaints}, is a structure specifying
-## linear constraints on the fit.  The structure has three fields, @qcode{"xc"},
+## The optional property, @var{constaints}, is a structure specifying linear
+## constraints on the fit.  The structure has three fields, @qcode{"xc"},
 ## @qcode{"yc"}, and @qcode{"cc"}.
 ##
 ## @table @asis
 ## @item @qcode{"xc"}
 ## Vector of the x-locations of the constraints.
 ##
 ## @item @qcode{"yc"}
 ## Constraining values at the locations @var{xc}.
diff --git a/scripts/polynomial/unmkpp.m b/scripts/polynomial/unmkpp.m
--- a/scripts/polynomial/unmkpp.m
+++ b/scripts/polynomial/unmkpp.m
@@ -15,28 +15,29 @@
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {[@var{x}, @var{p}, @var{n}, @var{k}, @var{d}] =} unmkpp (@var{pp})
 ##
 ## Extract the components of a piecewise polynomial structure @var{pp}.
+##
 ## The components are:
 ##
 ## @table @asis
 ## @item @var{x}
 ## Sample points.
 ##
 ## @item @var{p}
-## Polynomial coefficients for points in sample interval.  @code{@var{p}
-## (@var{i}, :)} contains the coefficients for the polynomial over
-## interval @var{i} ordered from highest to lowest.  If @code{@var{d} >
-## 1}, @code{@var{p} (@var{r}, @var{i}, :)} contains the coefficients for
-## the r-th polynomial defined on interval @var{i}.
+## Polynomial coefficients for points in sample interval.
+## @code{@var{p} (@var{i}, :)} contains the coefficients for the polynomial 
+## over interval @var{i} ordered from highest to lowest.  If
+## @code{@var{d} > 1}, @code{@var{p} (@var{r}, @var{i}, :)} contains the
+## coefficients for the r-th polynomial defined on interval @var{i}.
 ##
 ## @item @var{n}
 ## Number of polynomial pieces.
 ##
 ## @item @var{k}
 ## Order of the polynomial plus 1.
 ##
 ## @item @var{d}
diff --git a/scripts/prefs/addpref.m b/scripts/prefs/addpref.m
--- a/scripts/prefs/addpref.m
+++ b/scripts/prefs/addpref.m
@@ -13,25 +13,27 @@
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} addpref (@var{group}, @var{pref}, @var{val})
-## Add a preference @var{pref} and associated value @var{val} to the
-## named preference group @var{group}.
+## Add a preference @var{pref} and associated value @var{val} to the named
+## preference group @var{group}.
 ##
 ## The named preference group must be a character string.
 ##
-## The preference @var{pref} may be a character string or a cell array
-## of character strings.  The corresponding value @var{val} may be any
-## value, or, if @var{pref} is a cell array of strings, @var{val}
-## must be a cell array of values with the same size as @var{pref}.
+## The preference @var{pref} may be a character string or a cell array of
+## character strings.
+##
+## The corresponding value @var{val} may be any value, or, if @var{pref} is a
+## cell array of strings, @var{val} must be a cell array of values with the
+## same size as @var{pref}.
 ## @seealso{setpref, getpref, ispref, rmpref}
 ## @end deftypefn
 
 ## Author: jwe
 
 function addpref (group, pref, val)
 
   if (nargin == 3)
diff --git a/scripts/prefs/getpref.m b/scripts/prefs/getpref.m
--- a/scripts/prefs/getpref.m
+++ b/scripts/prefs/getpref.m
@@ -12,36 +12,39 @@
 ## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
-## @deftypefn {Function File} {} getpref (@var{group}, @var{pref}, @var{default})
-## Return the preference value corresponding to the named preference
-## @var{pref} in the preference group @var{group}.
+## @deftypefn  {Function File} {} getpref (@var{group}, @var{pref})
+## @deftypefnx {Function File} {} getpref (@var{group}, @var{pref}, @var{default})
+## @deftypefnx {Function File} {} getpref (@var{group})
+## Return the preference value corresponding to the named preference @var{pref}
+## in the preference group @var{group}.
 ##
 ## The named preference group must be a character string.
 ##
 ## If @var{pref} does not exist in @var{group} and @var{default} is
 ## specified, return @var{default}.
 ##
-## The preference @var{pref} may be a character string or a cell array
-## of character strings.  The corresponding default value @var{default}
-## may be any value, or, if @var{pref} is a cell array of strings,
-## @var{default} must be a cell array of values with the same size as
-## @var{pref}.
+## The preference @var{pref} may be a character string or a cell array of
+## character strings.
 ##
-## If neither @var{pref} nor @var{default} are specified, return a
-## structure of preferences for the preference group @var{group}.
+## The corresponding default value @var{default} may be any value, or, if
+## @var{pref} is a cell array of strings, @var{default} must be a cell array
+## of values with the same size as @var{pref}.
 ##
-## If no arguments are specified, return a structure containing all
-## groups of preferences and their values.
+## If neither @var{pref} nor @var{default} are specified, return a structure
+## of preferences for the preference group @var{group}.
+##
+## If no arguments are specified, return a structure containing all groups of
+## preferences and their values.
 ## @seealso{addpref, setpref, ispref, rmpref}
 ## @end deftypefn
 
 ## Author: jwe
 
 function retval = getpref (group, pref, default)
 
   if (nargin == 0)
diff --git a/scripts/prefs/ispref.m b/scripts/prefs/ispref.m
--- a/scripts/prefs/ispref.m
+++ b/scripts/prefs/ispref.m
@@ -12,27 +12,28 @@
 ## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
-## @deftypefn {Function File} {} ispref (@var{group}, @var{pref})
-## Return true if the named preference @var{pref} exists in the
-## preference group @var{group}.
+## @deftypefn  {Function File} {} ispref (@var{group}, @var{pref})
+## @deftypefnx {Function File} {} ispref (@var{group})
+## Return true if the named preference @var{pref} exists in the preference
+## group @var{group}.
 ##
 ## The named preference group must be a character string.
 ##
-## The preference @var{pref} may be a character string or a cell array
-## of character strings.
+## The preference @var{pref} may be a character string or a cell array of
+## character strings.
 ##
-## If @var{pref} is not specified, return true if the preference
-## group @var{group} exists.
+## If @var{pref} is not specified, return true if the preference group
+## @var{group} exists.
 ## @seealso{getpref, addpref, setpref, rmpref}
 ## @end deftypefn
 
 ## Author: jwe
 
 function retval = ispref (group, pref)
 
   if (nargin == 1)
diff --git a/scripts/prefs/rmpref.m b/scripts/prefs/rmpref.m
--- a/scripts/prefs/rmpref.m
+++ b/scripts/prefs/rmpref.m
@@ -12,28 +12,25 @@
 ## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
-## @deftypefn  {Function File} {} rmpref (@var{group})
-## @deftypefnx {Function File} {} rmpref (@var{group}, @var{pref})
-## Remove the named preference @var{pref} from the preference group
-## @var{group}.
+## @deftypefn  {Function File} {} rmpref (@var{group}, @var{pref})
+## @deftypefnx {Function File} {} rmpref (@var{group})
+## Remove the named preference @var{pref} from the preference group @var{group}.
 ##
 ## The named preference group must be a character string.
 ##
-## The preference @var{pref} may be a character string or cell array
-## of strings.
+## The preference @var{pref} may be a character string or cell array of strings.
 ##
-## If @var{pref} is not specified, remove the preference group
-## @var{group}.
+## If @var{pref} is not specified, remove the preference group @var{group}.
 ##
 ## It is an error to remove a nonexistent preference or group.
 ## @seealso{addpref, ispref, setpref, getpref}
 ## @end deftypefn
 
 ## Author: jwe
 
 function retval = rmpref (group, pref)
diff --git a/scripts/prefs/setpref.m b/scripts/prefs/setpref.m
--- a/scripts/prefs/setpref.m
+++ b/scripts/prefs/setpref.m
@@ -13,25 +13,27 @@
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} setpref (@var{group}, @var{pref}, @var{val})
-## Set a preference @var{pref} to the given @var{val} in the named
-## preference group @var{group}.
+## Set a preference @var{pref} to the given @var{val} in the named preference
+## group @var{group}.
 ##
 ## The named preference group must be a character string.
 ##
-## The preference @var{pref} may be a character string or a cell array
-## of character strings.  The corresponding value @var{val} may be any
-## value, or, if @var{pref} is a cell array of strings, @var{val}
-## must be a cell array of values with the same size as @var{pref}.
+## The preference @var{pref} may be a character string or a cell array of
+## character strings.
+##
+## The corresponding value @var{val} may be any value, or, if @var{pref} is a
+## cell array of strings, @var{val} must be a cell array of values with the
+## same size as @var{pref}.
 ##
 ## If the named preference or group does not exist, it is added.
 ## @seealso{addpref, getpref, ispref, rmpref}
 ## @end deftypefn
 
 ## Author: jwe
 
 function setpref (group, pref, val)
diff --git a/scripts/set/powerset.m b/scripts/set/powerset.m
--- a/scripts/set/powerset.m
+++ b/scripts/set/powerset.m
@@ -19,19 +19,19 @@
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {} powerset (@var{a})
 ## @deftypefnx {Function File} {} powerset (@var{a}, "rows")
 ## Compute the powerset (all subsets) of the set @var{a}.
 ##
 ## The set @var{a} must be a numerical matrix or a cell array of strings.  The
 ## output will always be a cell array of either vectors or strings.
 ##
-## With the optional second argument @qcode{"rows"}, each row of the set @var{a}
-## is considered one element of the set.  The input must be a 2-D numeric
-## matrix to use this argument.
+## With the optional argument @qcode{"rows"}, each row of the set @var{a} is
+## considered one element of the set.  The input must be a 2-D numeric matrix
+## to use this argument.
 ##
 ## @seealso{unique, union, intersect, setdiff, setxor, ismember}
 ## @end deftypefn
 
 function p = powerset (a, byrows_arg)
 
   if (nargin < 1 || nargin > 2)
     print_usage ();
diff --git a/scripts/set/setdiff.m b/scripts/set/setdiff.m
--- a/scripts/set/setdiff.m
+++ b/scripts/set/setdiff.m
@@ -19,19 +19,18 @@
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {@var{c} =} setdiff (@var{a}, @var{b})
 ## @deftypefnx {Function File} {@var{c} =} setdiff (@var{a}, @var{b}, "rows")
 ## @deftypefnx {Function File} {[@var{c}, @var{ia}] =} setdiff (@dots{})
 ## Return the unique elements in @var{a} that are not in @var{b} sorted in
 ## ascending order.
 ##
-## If @var{a} is a row vector return a column vector;
-## Otherwise, return a column vector.  The inputs may also be cell arrays of
-## strings.
+## If @var{a} is a row vector return a column vector; Otherwise, return a
+## column vector.  The inputs may also be cell arrays of strings.
 ##
 ## If the optional input @qcode{"rows"} is given then return the rows in
 ## @var{a} that are not in @var{b}.  The inputs must be 2-D matrices to use
 ## this option.
 ##
 ## If requested, return the index vector @var{ia} such that
 ## @code{@var{c} = @var{a}(@var{ia})}.
 ## @seealso{unique, union, intersect, setxor, ismember}
diff --git a/scripts/signal/arch_fit.m b/scripts/signal/arch_fit.m
--- a/scripts/signal/arch_fit.m
+++ b/scripts/signal/arch_fit.m
@@ -13,43 +13,45 @@
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {[@var{a}, @var{b}] =} arch_fit (@var{y}, @var{x}, @var{p}, @var{iter}, @var{gamma}, @var{a0}, @var{b0})
-## Fit an ARCH regression model to the time series @var{y} using the
-## scoring algorithm in @nospell{Engle's} original ARCH paper.  The model is
+## Fit an ARCH regression model to the time series @var{y} using the scoring
+## algorithm in @nospell{Engle's} original ARCH paper.
+##
+## The model is
 ##
 ## @example
 ## @group
 ## y(t) = b(1) * x(t,1) + @dots{} + b(k) * x(t,k) + e(t),
 ## h(t) = a(1) + a(2) * e(t-1)^2 + @dots{} + a(p+1) * e(t-p)^2
 ## @end group
 ## @end example
 ##
 ## @noindent
 ## in which @math{e(t)} is @math{N(0, h(t))}, given a time-series vector
-## @var{y} up to time @math{t-1} and a matrix of (ordinary) regressors
-## @var{x} up to @math{t}.  The order of the regression of the residual
-## variance is specified by @var{p}.
+## @var{y} up to time @math{t-1} and a matrix of (ordinary) regressors @var{x}
+## up to @math{t}.  The order of the regression of the residual variance is
+## specified by @var{p}.
 ##
-## If invoked as @code{arch_fit (@var{y}, @var{k}, @var{p})} with a
-## positive integer @var{k}, fit an ARCH(@var{k}, @var{p}) process,
-## i.e., do the above with the @math{t}-th row of @var{x} given by
+## If invoked as @code{arch_fit (@var{y}, @var{k}, @var{p})} with a positive
+## integer @var{k}, fit an ARCH(@var{k}, @var{p}) process, i.e., do the above
+## with the @math{t}-th row of @var{x} given by
 ##
 ## @example
 ## [1, y(t-1), @dots{}, y(t-k)]
 ## @end example
 ##
 ## Optionally, one can specify the number of iterations @var{iter}, the
-## updating factor @var{gamma}, and initial values @math{a0} and
-## @math{b0} for the scoring algorithm.
+## updating factor @var{gamma}, and initial values @math{a0} and @math{b0}
+## for the scoring algorithm.
 ## @end deftypefn
 
 ## Author: KH <Kurt.Hornik@wu-wien.ac.at>
 ## Description: Fit an ARCH regression model
 
 function [a, b] = arch_fit (y, x, p, iter, gamma, a0, b0)
 
   if (nargin < 3 || nargin == 6 || nargin > 7)
diff --git a/scripts/signal/arch_rnd.m b/scripts/signal/arch_rnd.m
--- a/scripts/signal/arch_rnd.m
+++ b/scripts/signal/arch_rnd.m
@@ -13,19 +13,20 @@
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} arch_rnd (@var{a}, @var{b}, @var{t})
-## Simulate an ARCH sequence of length @var{t} with AR
-## coefficients @var{b} and CH coefficients @var{a}.  I.e., the result
-## @math{y(t)} follows the model
+## Simulate an ARCH sequence of length @var{t} with AR coefficients @var{b} and
+## CH coefficients @var{a}.
+##
+## The result @math{y(t)} follows the model
 ## @c Set example in small font to prevent overfull line
 ##
 ## @smallexample
 ## y(t) = b(1) + b(2) * y(t-1) + @dots{} + b(lb) * y(t-lb+1) + e(t),
 ## @end smallexample
 ##
 ## @noindent
 ## where @math{e(t)}, given @var{y} up to time @math{t-1}, is
diff --git a/scripts/signal/arma_rnd.m b/scripts/signal/arma_rnd.m
--- a/scripts/signal/arma_rnd.m
+++ b/scripts/signal/arma_rnd.m
@@ -13,34 +13,36 @@
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} arma_rnd (@var{a}, @var{b}, @var{v}, @var{t}, @var{n})
-## Return a simulation of the ARMA model
+## Return a simulation of the ARMA model.
+##
+## The ARMA model is defined by
 ##
 ## @example
 ## @group
 ## x(n) = a(1) * x(n-1) + @dots{} + a(k) * x(n-k)
 ##      + e(n) + b(1) * e(n-1) + @dots{} + b(l) * e(n-l)
 ## @end group
 ## @end example
 ##
 ## @noindent
-## in which @var{k} is the length of vector @var{a}, @var{l} is the
-## length of vector @var{b} and @var{e} is Gaussian white noise with
-## variance @var{v}.  The function returns a vector of length @var{t}.
+## in which @var{k} is the length of vector @var{a}, @var{l} is the length of
+## vector @var{b} and @var{e} is Gaussian white noise with variance @var{v}. 
+## The function returns a vector of length @var{t}.
 ##
-## The optional parameter @var{n} gives the number of dummy
-## @var{x}(@var{i}) used for initialization, i.e., a sequence of length
-## @var{t}+@var{n} is generated and @var{x}(@var{n}+1:@var{t}+@var{n})
-## is returned.  If @var{n} is omitted, @var{n} = 100 is used.
+## The optional parameter @var{n} gives the number of dummy @var{x}(@var{i})
+## used for initialization, i.e., a sequence of length @var{t}+@var{n} is
+## generated and @var{x}(@var{n}+1:@var{t}+@var{n}) is returned.  If @var{n}
+## is omitted, @var{n} = 100 is used.
 ## @end deftypefn
 
 ## Author: FL <Friedrich.Leisch@ci.tuwien.ac.at>
 ## Description: Simulate an ARMA process
 
 function x = arma_rnd (a, b, v, t, n)
 
   if (nargin == 4)
diff --git a/scripts/signal/autoreg_matrix.m b/scripts/signal/autoreg_matrix.m
--- a/scripts/signal/autoreg_matrix.m
+++ b/scripts/signal/autoreg_matrix.m
@@ -13,22 +13,24 @@
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} autoreg_matrix (@var{y}, @var{k})
-## Given a time series (vector) @var{y}, return a matrix with ones in the
-## first column and the first @var{k} lagged values of @var{y} in the
-## other columns.  I.e., for @var{t} > @var{k}, @code{[1,
-## @var{y}(@var{t}-1), @dots{}, @var{y}(@var{t}-@var{k})]} is the t-th row
-## of the result.  The resulting matrix may be used as a regressor matrix
-## in autoregressions.
+## Given a time series (vector) @var{y}, return a matrix with ones in the first
+## column and the first @var{k} lagged values of @var{y} in the other columns.
+##
+## In other words, for @var{t} > @var{k},
+## @code{[1, @var{y}(@var{t}-1), @dots{}, @var{y}(@var{t}-@var{k})]} is the
+## t-th row of the result.
+##
+## The resulting matrix may be used as a regressor matrix in autoregressions.
 ## @end deftypefn
 
 ## Author: KH <Kurt.Hornik@wu-wien.ac.at>
 ## Description: Design matrix for autoregressions
 
 function X = autoreg_matrix (y, k)
 
   if (nargin != 2)
diff --git a/scripts/signal/bartlett.m b/scripts/signal/bartlett.m
--- a/scripts/signal/bartlett.m
+++ b/scripts/signal/bartlett.m
@@ -13,20 +13,20 @@
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} bartlett (@var{m})
-## Return the filter coefficients of a Bartlett (triangular) window of
-## length @var{m}.
+## Return the filter coefficients of a Bartlett (triangular) window of length
+## @var{m}.
 ##
-## For a definition of the Bartlett window, see e.g.,
+## For a definition of the Bartlett window see, e.g.,
 ## @nospell{A.V. Oppenheim & R. W. Schafer},
 ## @cite{Discrete-Time Signal Processing}.
 ## @end deftypefn
 
 ## Author: AW <Andreas.Weingessel@ci.tuwien.ac.at>
 ## Description: Coefficients of the Bartlett (triangular) window
 
 function c = bartlett (m)
diff --git a/scripts/signal/blackman.m b/scripts/signal/blackman.m
--- a/scripts/signal/blackman.m
+++ b/scripts/signal/blackman.m
@@ -22,17 +22,17 @@
 ## @deftypefnx {Function File} {} blackman (@var{m}, "symmetric")
 ## Return the filter coefficients of a Blackman window of length @var{m}.
 ##
 ## If the optional argument @qcode{"periodic"} is given, the periodic form
 ## of the window is returned.  This is equivalent to the window of length
 ## @var{m}+1 with the last coefficient removed.  The optional argument
 ## @qcode{"symmetric"} is equivalent to not specifying a second argument.
 ##
-## For a definition of the Blackman window, see e.g.,
+## For a definition of the Blackman window, see, e.g.,
 ## @nospell{A.V. Oppenheim & R. W. Schafer},
 ## @cite{Discrete-Time Signal Processing}.
 ## @end deftypefn
 
 ## Author: AW <Andreas.Weingessel@ci.tuwien.ac.at>
 ## Description: Coefficients of the Blackman window
 
 function c = blackman (m, opt)
diff --git a/scripts/signal/detrend.m b/scripts/signal/detrend.m
--- a/scripts/signal/detrend.m
+++ b/scripts/signal/detrend.m
@@ -19,23 +19,22 @@
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} detrend (@var{x}, @var{p})
 ## If @var{x} is a vector, @code{detrend (@var{x}, @var{p})} removes the
 ## best fit of a polynomial of order @var{p} from the data @var{x}.
 ##
 ## If @var{x} is a matrix, @code{detrend (@var{x}, @var{p})} does the same
 ## for each column in @var{x}.
 ##
-## The second argument is optional.  If it is not specified, a value of 1
-## is assumed.  This corresponds to removing a linear trend.
+## The second argument @var{p} is optional.  If it is not specified, a value of
+## 1 is assumed.  This corresponds to removing a linear trend.
 ##
 ## The order of the polynomial can also be given as a string, in which case
-## @var{p} must be either @qcode{"constant"} (corresponds to
-## @code{@var{p}=0}) or
-## @qcode{"linear"} (corresponds to @code{@var{p}=1}).
+## @var{p} must be either @qcode{"constant"} (corresponds to @code{@var{p}=0})
+## or @qcode{"linear"} (corresponds to @code{@var{p}=1}).
 ## @seealso{polyfit}
 ## @end deftypefn
 
 ## Author: KH <Kurt.Hornik@wu-wien.ac.at>
 ## Created: 11 October 1994
 ## Adapted-By: jwe
 
 function y = detrend (x, p = 1)
diff --git a/scripts/signal/diffpara.m b/scripts/signal/diffpara.m
--- a/scripts/signal/diffpara.m
+++ b/scripts/signal/diffpara.m
@@ -18,24 +18,25 @@
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {[@var{d}, @var{dd}] =} diffpara (@var{x}, @var{a}, @var{b})
 ## Return the estimator @var{d} for the differencing parameter of an
 ## integrated time series.
 ##
 ## The frequencies from @math{[2*pi*a/t, 2*pi*b/T]} are used for the
 ## estimation.  If @var{b} is omitted, the interval
-## @math{[2*pi/T, 2*pi*a/T]} is used.  If both @var{b} and @var{a} are
-## omitted then @math{a = 0.5 * sqrt (T)} and @math{b = 1.5 * sqrt (T)}
-## is used, where @math{T} is the sample size.  If @var{x} is a matrix,
-## the differencing parameter of each column is estimated.
+## @math{[2*pi/T, 2*pi*a/T]} is used.  If both @var{b} and @var{a} are omitted
+## then @math{a = 0.5 * sqrt (T)} and @math{b = 1.5 * sqrt (T)} is used, where
+## @math{T} is the sample size.  If @var{x} is a matrix, the differencing
+## parameter of each column is estimated.
 ##
-## The estimators for all frequencies in the intervals
-## described above is returned in @var{dd}.  The value of @var{d} is
-## simply the mean of @var{dd}.
+## The estimators for all frequencies in the intervals described above is
+## returned in @var{dd}.
+##
+## The value of @var{d} is simply the mean of @var{dd}.
 ##
 ## Reference: @nospell{P.J. Brockwell & R.A. Davis}. @cite{Time Series:
 ## Theory and Methods}. Springer 1987.
 ## @end deftypefn
 
 ## Author: FL <Friedrich.Leisch@ci.tuwien.ac.at>
 ## Description: Estimate the fractional differencing parameter
 
diff --git a/scripts/signal/durbinlevinson.m b/scripts/signal/durbinlevinson.m
--- a/scripts/signal/durbinlevinson.m
+++ b/scripts/signal/durbinlevinson.m
@@ -15,23 +15,23 @@
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} durbinlevinson (@var{c}, @var{oldphi}, @var{oldv})
 ## Perform one step of the @nospell{Durbin-Levinson} algorithm.
 ##
-## The vector @var{c} specifies the autocovariances @code{[gamma_0, @dots{},
-## gamma_t]} from lag 0 to @var{t}, @var{oldphi} specifies the
-## coefficients based on @var{c}(@var{t}-1) and @var{oldv} specifies the
-## corresponding error.
+## The vector @var{c} specifies the autocovariances
+## @code{[gamma_0, @dots{}, gamma_t]} from lag 0 to @var{t}, @var{oldphi}
+## specifies the coefficients based on @var{c}(@var{t}-1) and @var{oldv}
+## specifies the corresponding error.
 ##
-## If @var{oldphi} and @var{oldv} are omitted, all steps from 1 to
-## @var{t} of the algorithm are performed.
+## If @var{oldphi} and @var{oldv} are omitted, all steps from 1 to @var{t} of
+## the algorithm are performed.
 ## @end deftypefn
 
 ## Author: FL <Friedrich.Leisch@ci.tuwien.ac.at>
 ## Description: Perform one step of the Durbin-Levinson algorithm
 
 function [newphi, newv] = durbinlevinson (c, oldphi, oldv)
 
   if (nargin != 1 && nargin != 3)
diff --git a/scripts/signal/fftconv.m b/scripts/signal/fftconv.m
--- a/scripts/signal/fftconv.m
+++ b/scripts/signal/fftconv.m
@@ -17,19 +17,19 @@
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {} fftconv (@var{x}, @var{y})
 ## @deftypefnx {Function File} {} fftconv (@var{x}, @var{y}, @var{n})
 ## Convolve two vectors using the FFT for computation.
 ##
 ## @code{c = fftconv (@var{x}, @var{y})} returns a vector of length equal to
-## @code{length (@var{x}) + length (@var{y}) - 1}.
-## If @var{x} and @var{y} are the coefficient vectors of two polynomials, the
-## returned value is the coefficient vector of the product polynomial.
+## @code{length (@var{x}) + length (@var{y}) - 1}.  If @var{x} and @var{y}
+## are the coefficient vectors of two polynomials, the returned value is the
+## coefficient vector of the product polynomial.
 ##
 ## The computation uses the FFT by calling the function @code{fftfilt}.  If
 ## the optional argument @var{n} is specified, an N-point FFT is used.
 ## @seealso{deconv, conv, conv2}
 ## @end deftypefn
 
 ## Author: KH <Kurt.Hornik@wu-wien.ac.at>
 ## Created: 3 September 1994
diff --git a/scripts/signal/fftfilt.m b/scripts/signal/fftfilt.m
--- a/scripts/signal/fftfilt.m
+++ b/scripts/signal/fftfilt.m
@@ -14,28 +14,26 @@
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {} fftfilt (@var{b}, @var{x})
 ## @deftypefnx {Function File} {} fftfilt (@var{b}, @var{x}, @var{n})
+## Filter @var{x} with the FIR filter @var{b} using the FFT.
 ##
-## With two arguments, @code{fftfilt} filters @var{x} with the FIR filter
-## @var{b} using the FFT.
+## If @var{x} is a matrix, filter each column of the matrix.
 ##
 ## Given the optional third argument, @var{n}, @code{fftfilt} uses the
-## overlap-add method to filter @var{x} with @var{b} using an N-point
-## FFT@.  The FFT size must be an even power of 2 and must be greater than
-## or equal to the length of @var{b}.  If the specified @var{n} does not
-## meet these criteria, it is automatically adjusted to the nearest value
-## that does.
+## overlap-add method to filter @var{x} with @var{b} using an N-point FFT@.
+## The FFT size must be an even power of 2 and must be greater than or equal to
+## the length of @var{b}.  If the specified @var{n} does not meet these
+## criteria, it is automatically adjusted to the nearest value that does.
 ##
-## If @var{x} is a matrix, filter each column of the matrix.
 ## @seealso{filter, filter2}
 ## @end deftypefn
 
 ## Author: Kurt Hornik <Kurt.Hornik@wu-wien.ac.at>
 ## Created: 3 September 1994
 ## Adapted-By: jwe
 
 function y = fftfilt (b, x, n)
diff --git a/scripts/signal/fftshift.m b/scripts/signal/fftshift.m
--- a/scripts/signal/fftshift.m
+++ b/scripts/signal/fftshift.m
@@ -14,36 +14,37 @@
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {} fftshift (@var{x})
 ## @deftypefnx {Function File} {} fftshift (@var{x}, @var{dim})
-## Perform a shift of the vector @var{x}, for use with the @code{fft}
-## and @code{ifft} functions, in order the move the frequency 0 to the
-## center of the vector or matrix.
+## Perform a shift of the vector @var{x}, for use with the @code{fft} and
+## @code{ifft} functions, in order the move the frequency 0 to the center of
+## the vector or matrix.
 ##
-## If @var{x} is a vector of @math{N} elements corresponding to @math{N}
-## time samples spaced by @nospell{@math{dt}}, then
+## If @var{x} is a vector of @math{N} elements corresponding to @math{N} time
+## samples spaced by @nospell{@math{dt}}, then
 ## @code{fftshift (fft (@var{x}))} corresponds to frequencies
 ##
 ## @example
 ## f = [ -(ceil((N-1)/2):-1:1)*df 0 (1:floor((N-1)/2))*df ]
 ## @end example
 ##
 ## @noindent
 ## where @nospell{@math{df} = 1 / @math{dt}}.
 ##
-## If @var{x} is a matrix, the same holds for rows and columns.  If
-## @var{x} is an array, then the same holds along each dimension.
+## If @var{x} is a matrix, the same holds for rows and columns.  If @var{x}
+## is an array, then the same holds along each dimension.
 ##
-## The optional @var{dim} argument can be used to limit the dimension
-## along which the permutation occurs.
+## The optional @var{dim} argument can be used to limit the dimension along
+## which the permutation occurs.
+## @seealso{ifftshift}
 ## @end deftypefn
 
 ## Author: Vincent Cautaerts <vincent@comf5.comm.eng.osaka-u.ac.jp>
 ## Created: July 1997
 ## Adapted-By: jwe
 
 function retval = fftshift (x, dim)
 
diff --git a/scripts/signal/filter2.m b/scripts/signal/filter2.m
--- a/scripts/signal/filter2.m
+++ b/scripts/signal/filter2.m
@@ -14,33 +14,34 @@
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {@var{y} =} filter2 (@var{b}, @var{x})
 ## @deftypefnx {Function File} {@var{y} =} filter2 (@var{b}, @var{x}, @var{shape})
-## Apply the 2-D FIR filter @var{b} to @var{x}.  If the argument
-## @var{shape} is specified, return an array of the desired shape.
-## Possible values are:
+## Apply the 2-D FIR filter @var{b} to @var{x}.
+##
+## If the argument @var{shape} is specified, return an array of the desired
+## shape.  Possible values are:
 ##
 ## @table @asis
 ## @item @qcode{"full"}
 ## pad @var{x} with zeros on all sides before filtering.
 ##
 ## @item @qcode{"same"}
 ## unpadded @var{x} (default)
 ##
 ## @item @qcode{"valid"}
 ## trim @var{x} after filtering so edge effects are no included.
 ## @end table
 ##
-## Note this is just a variation on convolution, with the parameters
-## reversed and @var{b} rotated 180 degrees.
+## Note this is just a variation on convolution, with the parameters reversed
+## and @var{b} rotated 180 degrees.
 ## @seealso{conv2}
 ## @end deftypefn
 
 ## Author: Paul Kienzle <pkienzle@users.sf.net>
 ## 2001-02-08
 ##    * initial release
 
 function y = filter2 (b, x, shape)
diff --git a/scripts/signal/freqz.m b/scripts/signal/freqz.m
--- a/scripts/signal/freqz.m
+++ b/scripts/signal/freqz.m
@@ -22,34 +22,34 @@
 ## @deftypefnx {Function File} {[@var{h}, @var{w}] =} freqz (@var{b}, @var{a})
 ## @deftypefnx {Function File} {[@var{h}, @var{w}] =} freqz (@var{b}, @var{a}, @var{n})
 ## @deftypefnx {Function File} {@var{h} =} freqz (@var{b}, @var{a}, @var{w})
 ## @deftypefnx {Function File} {[@var{h}, @var{w}] =} freqz (@dots{}, @var{Fs})
 ## @deftypefnx {Function File} {} freqz (@dots{})
 ##
 ## Return the complex frequency response @var{h} of the rational IIR filter
 ## whose numerator and denominator coefficients are @var{b} and @var{a},
-## respectively.  The response is evaluated at @var{n} angular frequencies
-## between 0 and
+## respectively.
+##
+## The response is evaluated at @var{n} angular frequencies between 0 and
 ## @ifnottex
 ## 2*pi.
 ## @end ifnottex
 ## @tex
 ## $2\pi$.
 ## @end tex
 ##
 ## @noindent
 ## The output value @var{w} is a vector of the frequencies.
 ##
 ## If @var{a} is omitted, the denominator is assumed to be 1 (this
 ## corresponds to a simple FIR filter).
 ##
-## If @var{n} is omitted, a value of 512 is assumed.
-## For fastest computation, @var{n} should factor into a small number of
-## small primes.
+## If @var{n} is omitted, a value of 512 is assumed.  For fastest computation,
+## @var{n} should factor into a small number of small primes.
 ##
 ## If the fourth argument, @qcode{"whole"}, is omitted the response is
 ## evaluated at frequencies between 0 and
 ## @ifnottex
 ## pi.
 ## @end ifnottex
 ## @tex
 ## $\pi$.
diff --git a/scripts/signal/hamming.m b/scripts/signal/hamming.m
--- a/scripts/signal/hamming.m
+++ b/scripts/signal/hamming.m
@@ -22,17 +22,17 @@
 ## @deftypefnx {Function File} {} hamming (@var{m}, "symmetric")
 ## Return the filter coefficients of a Hamming window of length @var{m}.
 ##
 ## If the optional argument @qcode{"periodic"} is given, the periodic form
 ## of the window is returned.  This is equivalent to the window of length
 ## @var{m}+1 with the last coefficient removed.  The optional argument
 ## @qcode{"symmetric"} is equivalent to not specifying a second argument.
 ##
-## For a definition of the Hamming window, see e.g.,
+## For a definition of the Hamming window see, e.g.,
 ## @nospell{A.V. Oppenheim & R. W. Schafer},
 ## @cite{Discrete-Time Signal Processing}.
 ## @end deftypefn
 
 ## Author: AW <Andreas.Weingessel@ci.tuwien.ac.at>
 ## Description: Coefficients of the Hamming window
 
 function c = hamming (m, opt)
diff --git a/scripts/signal/hanning.m b/scripts/signal/hanning.m
--- a/scripts/signal/hanning.m
+++ b/scripts/signal/hanning.m
@@ -22,17 +22,17 @@
 ## @deftypefnx {Function File} {} hanning (@var{m}, "symmetric")
 ## Return the filter coefficients of a Hanning window of length @var{m}.
 ##
 ## If the optional argument @qcode{"periodic"} is given, the periodic form
 ## of the window is returned.  This is equivalent to the window of length
 ## @var{m}+1 with the last coefficient removed.  The optional argument
 ## @qcode{"symmetric"} is equivalent to not specifying a second argument.
 ##
-## For a definition of the Hanning window, see e.g.,
+## For a definition of the Hanning window see, e.g.,
 ## @nospell{A.V. Oppenheim & R. W. Schafer},
 ## @cite{Discrete-Time Signal Processing}.
 ## @end deftypefn
 
 ## Author: AW <Andreas.Weingessel@ci.tuwien.ac.at>
 ## Description: Coefficients of the Hanning window
 
 function c = hanning (m, opt)
diff --git a/scripts/signal/hurst.m b/scripts/signal/hurst.m
--- a/scripts/signal/hurst.m
+++ b/scripts/signal/hurst.m
@@ -14,18 +14,19 @@
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} hurst (@var{x})
 ## Estimate the Hurst parameter of sample @var{x} via the rescaled range
-## statistic.  If @var{x} is a matrix, the parameter is estimated for
-## every single column.
+## statistic.
+##
+## If @var{x} is a matrix, the parameter is estimated for every column.
 ## @end deftypefn
 
 ## Author: FL <Friedrich.Leisch@ci.tuwien.ac.at>
 ## Description: Estimate the Hurst parameter
 
 function H = hurst (x)
 
   if (nargin != 1)
diff --git a/scripts/signal/ifftshift.m b/scripts/signal/ifftshift.m
--- a/scripts/signal/ifftshift.m
+++ b/scripts/signal/ifftshift.m
@@ -14,19 +14,21 @@
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {} ifftshift (@var{x})
 ## @deftypefnx {Function File} {} ifftshift (@var{x}, @var{dim})
-## Undo the action of the @code{fftshift} function.  For even length
-## @var{x}, @code{fftshift} is its own inverse, but odd lengths differ
-## slightly.
+## Undo the action of the @code{fftshift} function.
+##
+## For even length @var{x}, @code{fftshift} is its own inverse, but odd lengths
+## differ slightly.
+## @seealso{fftshift}
 ## @end deftypefn
 
 ## Author: Vincent Cautaerts <vincent@comf5.comm.eng.osaka-u.ac.jp>
 ## Created: July 1997
 ## Adapted-By: jwe
 ## Modified-By: Paul Kienzle, converted from fftshift
 ## Modified-By: David Bateman, add NDArray capability and option dim arg
 
diff --git a/scripts/signal/periodogram.m b/scripts/signal/periodogram.m
--- a/scripts/signal/periodogram.m
+++ b/scripts/signal/periodogram.m
@@ -20,17 +20,16 @@
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {[@var{Pxx}, @var{w}] =} periodogram (@var{x})
 ## @deftypefnx {Function File} {[@var{Pxx}, @var{w}] =} periodogram (@var{x}, @var{win})
 ## @deftypefnx {Function File} {[@var{Pxx}, @var{w}] =} periodogram (@var{x}, @var{win}, @var{nfft})
 ## @deftypefnx {Function File} {[@var{Pxx}, @var{f}] =} periodogram (@var{x}, @var{win}, @var{nfft}, @var{Fs})
 ## @deftypefnx {Function File} {[@var{Pxx}, @var{f}] =} periodogram (@dots{}, "@var{range}")
 ## @deftypefnx {Function File} {} periodogram (@dots{})
-##
 ## Return the periodogram (Power Spectral Density) of @var{x}.
 ##
 ## The possible inputs are:
 ##
 ## @table @var
 ## @item x
 ##
 ## data vector.  If @var{x} is real-valued a one-sided spectrum is estimated.
diff --git a/scripts/signal/sinc.m b/scripts/signal/sinc.m
--- a/scripts/signal/sinc.m
+++ b/scripts/signal/sinc.m
@@ -13,16 +13,18 @@
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} sinc (@var{x})
+## Compute the sinc function.
+##
 ## Return
 ## @tex
 ## $ \sin (\pi x)/(\pi x)$.
 ## @end tex
 ## @ifnottex
 ##  sin (pi*x) / (pi*x).
 ## @end ifnottex
 ## @end deftypefn
diff --git a/scripts/signal/sinetone.m b/scripts/signal/sinetone.m
--- a/scripts/signal/sinetone.m
+++ b/scripts/signal/sinetone.m
@@ -13,21 +13,23 @@
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} sinetone (@var{freq}, @var{rate}, @var{sec}, @var{ampl})
-## Return a sinetone of frequency @var{freq} with length of @var{sec}
+## Return a sinetone of frequency @var{freq} with a length of @var{sec}
 ## seconds at sampling rate @var{rate} and with amplitude @var{ampl}.
+##
 ## The arguments @var{freq} and @var{ampl} may be vectors of common size.
 ##
-## Defaults are @var{rate} = 8000, @var{sec} = 1 and @var{ampl} = 64.
+## The defaults are @var{rate} = 8000, @var{sec} = 1, and @var{ampl} = 64.
+## @seealso{sinewave}
 ## @end deftypefn
 
 ## Author: FL <Friedrich.Leisch@ci.tuwien.ac.at>
 ## Description: Compute a sine tone
 
 function retval = sinetone (freq, rate = 8000, sec = 1, ampl = 64)
 
   if (nargin < 1 || nargin > 4)
diff --git a/scripts/signal/sinewave.m b/scripts/signal/sinewave.m
--- a/scripts/signal/sinewave.m
+++ b/scripts/signal/sinewave.m
@@ -16,18 +16,19 @@
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} sinewave (@var{m}, @var{n}, @var{d})
 ## Return an @var{m}-element vector with @var{i}-th element given by
 ## @code{sin (2 * pi * (@var{i}+@var{d}-1) / @var{n})}.
 ##
-## The default value for @var{d} is 0 and the default value for @var{n}
-## is @var{m}.
+## The default value for @var{d} is 0 and the default value for @var{n} is
+## @var{m}.
+## @seealso{sinetone}
 ## @end deftypefn
 
 ## Author: AW <Andreas.Weingessel@ci.tuwien.ac.at>
 ## Description: Compute a sine wave
 
 function x = sinewave (m, n, d)
 
   if (nargin > 0 && nargin < 4)
diff --git a/scripts/signal/spectral_adf.m b/scripts/signal/spectral_adf.m
--- a/scripts/signal/spectral_adf.m
+++ b/scripts/signal/spectral_adf.m
@@ -15,25 +15,25 @@
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {} spectral_adf (@var{c})
 ## @deftypefnx {Function File} {} spectral_adf (@var{c}, @var{win})
 ## @deftypefnx {Function File} {} spectral_adf (@var{c}, @var{win}, @var{b})
-## Return the spectral density estimator given a vector of
-## autocovariances @var{c}, window name @var{win}, and bandwidth,
-## @var{b}.
+## Return the spectral density estimator given a vector of autocovariances
+## @var{c}, window name @var{win}, and bandwidth, @var{b}.
 ##
 ## The window name, e.g., @qcode{"triangle"} or @qcode{"rectangle"} is
 ## used to search for a function called @code{@var{win}_lw}.
 ##
-## If @var{win} is omitted, the triangle window is used.  If @var{b} is
-## omitted, @code{1 / sqrt (length (@var{x}))} is used.
+## If @var{win} is omitted, the triangle window is used.
+##
+## If @var{b} is omitted, @code{1 / sqrt (length (@var{x}))} is used.
 ## @seealso{spectral_xdf}
 ## @end deftypefn
 
 ## Author: FL <Friedrich.Leisch@ci.tuwien.ac.at>
 ## Description: Spectral density estimation
 
 function retval = spectral_adf (c, win, b)
 
diff --git a/scripts/signal/spectral_xdf.m b/scripts/signal/spectral_xdf.m
--- a/scripts/signal/spectral_xdf.m
+++ b/scripts/signal/spectral_xdf.m
@@ -15,24 +15,25 @@
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {} spectral_xdf (@var{x})
 ## @deftypefnx {Function File} {} spectral_xdf (@var{x}, @var{win})
 ## @deftypefnx {Function File} {} spectral_xdf (@var{x}, @var{win}, @var{b})
-## Return the spectral density estimator given a data vector @var{x},
-## window name @var{win}, and bandwidth, @var{b}.
+## Return the spectral density estimator given a data vector @var{x}, window
+## name @var{win}, and bandwidth, @var{b}.
 ##
-## The window name, e.g., @qcode{"triangle"} or @qcode{"rectangle"} is
-## used to search for a function called @code{@var{win}_sw}.
+## The window name, e.g., @qcode{"triangle"} or @qcode{"rectangle"} is used to
+## search for a function called @code{@var{win}_sw}.
 ##
-## If @var{win} is omitted, the triangle window is used.  If @var{b} is
-## omitted, @code{1 / sqrt (length (@var{x}))} is used.
+## If @var{win} is omitted, the triangle window is used.
+##
+## If @var{b} is omitted, @code{1 / sqrt (length (@var{x}))} is used.
 ## @seealso{spectral_adf}
 ## @end deftypefn
 
 ## Author: FL <Friedrich.Leisch@ci.tuwien.ac.at>
 ## Description: Spectral density estimation
 
 function retval = spectral_xdf (x, win, b)
 
diff --git a/scripts/signal/spencer.m b/scripts/signal/spencer.m
--- a/scripts/signal/spencer.m
+++ b/scripts/signal/spencer.m
@@ -13,18 +13,17 @@
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} spencer (@var{x})
-## Return Spencer's 15 point moving average of each column of
-## @var{x}.
+## Return Spencer's 15 point moving average of each column of @var{x}.
 ## @end deftypefn
 
 ## Author: FL <Friedrich.Leisch@ci.tuwien.ac.at>
 ## Description: Apply Spencer's 15-point MA filter
 
 function retval = spencer (x)
 
   if (nargin != 1)
diff --git a/scripts/signal/stft.m b/scripts/signal/stft.m
--- a/scripts/signal/stft.m
+++ b/scripts/signal/stft.m
@@ -42,24 +42,23 @@
 ## @end table
 ##
 ## The window names can be passed as strings or by the @var{win_type} number.
 ##
 ## The following defaults are used for unspecified arguments:
 ## @var{win_size} = 80, @var{inc} = 24, @var{num_coef} = 64, and
 ## @var{win_type} = 1.
 ##
-## @code{@var{y} = stft (@var{x}, @dots{})} returns the absolute values
-## of the Fourier coefficients according to the @var{num_coef} positive
-## frequencies.
+## @code{@var{y} = stft (@var{x}, @dots{})} returns the absolute values of the
+## Fourier coefficients according to the @var{num_coef} positive frequencies.
 ##
-## @code{[@var{y}, @var{c}] = stft (@code{x}, @dots{})} returns the
-## entire STFT-matrix @var{y} and a 3-element vector @var{c} containing
-## the window size, increment, and window type, which is needed by the
-## @code{synthesis} function.
+## @code{[@var{y}, @var{c}] = stft (@code{x}, @dots{})} returns the entire
+## STFT-matrix @var{y} and a 3-element vector @var{c} containing the window
+## size, increment, and window type, which is needed by the @code{synthesis}
+## function.
 ## @seealso{synthesis}
 ## @end deftypefn
 
 ## Author: AW <Andreas.Weingessel@ci.tuwien.ac.at>
 ## Description: Short-Time Fourier Transform
 
 function [y, c] = stft (x, win_size = 80, inc = 24, num_coef = 64, win_type = 1)
 
diff --git a/scripts/signal/synthesis.m b/scripts/signal/synthesis.m
--- a/scripts/signal/synthesis.m
+++ b/scripts/signal/synthesis.m
@@ -14,18 +14,17 @@
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {@var{x} =} synthesis (@var{y}, @var{c})
 ## Compute a signal from its short-time Fourier transform @var{y} and a
-## 3-element vector @var{c} specifying window size, increment, and
-## window type.
+## 3-element vector @var{c} specifying window size, increment, and window type.
 ##
 ## The values @var{y} and @var{c} can be derived by
 ##
 ## @example
 ## [@var{y}, @var{c}] = stft (@var{x} , @dots{})
 ## @end example
 ## @seealso{stft}
 ## @end deftypefn
diff --git a/scripts/signal/unwrap.m b/scripts/signal/unwrap.m
--- a/scripts/signal/unwrap.m
+++ b/scripts/signal/unwrap.m
@@ -16,18 +16,20 @@
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {@var{b} =} unwrap (@var{x})
 ## @deftypefnx {Function File} {@var{b} =} unwrap (@var{x}, @var{tol})
 ## @deftypefnx {Function File} {@var{b} =} unwrap (@var{x}, @var{tol}, @var{dim})
 ##
-## Unwrap radian phases by adding multiples of 2*pi as appropriate to
-## remove jumps greater than @var{tol}.  @var{tol} defaults to pi.
+## Unwrap radian phases by adding multiples of 2*pi as appropriate to remove
+## jumps greater than @var{tol}.
+##
+## @var{tol} defaults to pi.
 ##
 ## Unwrap will work along the dimension @var{dim}.  If @var{dim}
 ## is unspecified it defaults to the first non-singleton dimension.
 ## @end deftypefn
 
 ## Author: Bill Lash <lash@tellabs.com>
 
 function retval = unwrap (x, tol, dim)
diff --git a/scripts/signal/yulewalker.m b/scripts/signal/yulewalker.m
--- a/scripts/signal/yulewalker.m
+++ b/scripts/signal/yulewalker.m
@@ -13,21 +13,21 @@
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {[@var{a}, @var{v}] =} yulewalker (@var{c})
-## Fit an AR (p)-model with Yule-Walker estimates given a vector @var{c}
-## of autocovariances @code{[gamma_0, @dots{}, gamma_p]}.
+## Fit an AR (p)-model with Yule-Walker estimates given a vector @var{c} of
+## autocovariances @code{[gamma_0, @dots{}, gamma_p]}.
 ##
-## Returns the AR coefficients, @var{a}, and the variance of white
-## noise, @var{v}.
+## Returns the AR coefficients, @var{a}, and the variance of white noise,
+## @var{v}.
 ## @end deftypefn
 
 ## Author: FL <Friedrich.Leisch@ci.tuwien.ac.at>
 ## Description: Fit AR model by Yule-Walker method
 
 function [a, v] = yulewalker (c)
 
   if (nargin != 1)
diff --git a/scripts/sparse/bicg.m b/scripts/sparse/bicg.m
--- a/scripts/sparse/bicg.m
+++ b/scripts/sparse/bicg.m
@@ -18,36 +18,35 @@
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {@var{x} =} bicg (@var{A}, @var{b}, @var{rtol}, @var{maxit}, @var{M1}, @var{M2}, @var{x0})
 ## @deftypefnx {Function File} {@var{x} =} bicg (@var{A}, @var{b}, @var{rtol}, @var{maxit}, @var{P})
 ## @deftypefnx {Function File} {[@var{x}, @var{flag}, @var{relres}, @var{iter}, @var{resvec}] =} bicg (@var{A}, @var{b}, @dots{})
 ## Solve @code{A x = b} using the Bi-conjugate gradient iterative method.
 ##
 ## @itemize @minus
-## @item @var{rtol} is the relative tolerance, if not given
-## or set to [] the default value 1e-6 is used.
+## @item @var{rtol} is the relative tolerance, if not given or set to [] the
+## default value 1e-6 is used.
 ##
-## @item @var{maxit} the maximum number of outer iterations,
-## if not given or set to [] the default value
-## @code{min (20, numel (b))} is used.
+## @item @var{maxit} the maximum number of outer iterations, if not given or
+## set to [] the default value @code{min (20, numel (b))} is used.
 ##
-## @item @var{x0} the initial guess, if not given or set to []
-## the default value @code{zeros (size (b))} is used.
+## @item @var{x0} the initial guess, if not given or set to [] the default
+## value @code{zeros (size (b))} is used.
 ## @end itemize
 ##
-## @var{A} can be passed as a matrix or as a function handle or
-## inline function @code{f} such that @code{f(x, "notransp") = A*x}
-## and @code{f(x, "transp") = A'*x}.
+## @var{A} can be passed as a matrix or as a function handle or inline function
+## @code{f} such that @code{f(x, "notransp") = A*x} and
+## @code{f(x, "transp") = A'*x}.
 ##
-## The preconditioner @var{P} is given as @code{P = M1 * M2}.
-## Both @var{M1} and @var{M2} can be passed as a matrix or as
-## a function handle or inline function @code{g} such that
-## @code{g(x, "notransp") = M1 \ x} or @code{g(x, "notransp") = M2 \ x} and
-## @code{g(x, "transp") = M1' \ x} or @code{g(x, "transp") = M2' \ x}.
+## The preconditioner @var{P} is given as @code{P = M1 * M2}.  Both @var{M1}
+## and @var{M2} can be passed as a matrix or as a function handle or inline
+## function @code{g} such that @code{g(x, "notransp") = M1 \ x} or
+## @code{g(x, "notransp") = M2 \ x} and @code{g(x, "transp") = M1' \ x} or
+## @code{g(x, "transp") = M2' \ x}.
 ##
 ## If called with more than one output parameter
 ##
 ## @itemize @minus
 ## @item @var{flag} indicates the exit status:
 ##
 ## @itemize @minus
 ## @item 0: iteration converged to the within the chosen tolerance
diff --git a/scripts/sparse/bicgstab.m b/scripts/sparse/bicgstab.m
--- a/scripts/sparse/bicgstab.m
+++ b/scripts/sparse/bicgstab.m
@@ -20,34 +20,32 @@
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {@var{x} =} bicgstab (@var{A}, @var{b}, @var{rtol}, @var{maxit}, @var{M1}, @var{M2}, @var{x0})
 ## @deftypefnx {Function File} {@var{x} =} bicgstab (@var{A}, @var{b}, @var{rtol}, @var{maxit}, @var{P})
 ## @deftypefnx {Function File} {[@var{x}, @var{flag}, @var{relres}, @var{iter}, @var{resvec}] =} bicgstab (@var{A}, @var{b}, @dots{})
 ## Solve @code{A x = b} using the stabilizied Bi-conjugate gradient iterative
 ## method.
 ##
 ## @itemize @minus
-## @item @var{rtol} is the relative tolerance, if not given or set to
-## [] the default value 1e-6 is used.
+## @item @var{rtol} is the relative tolerance, if not given or set to [] the
+## default value 1e-6 is used.
 ##
-## @item @var{maxit} the maximum number of outer iterations, if not
-## given or set to [] the default value @code{min (20, numel (b))} is
-## used.
+## @item @var{maxit} the maximum number of outer iterations, if not given or
+## set to [] the default value @code{min (20, numel (b))} is used.
 ##
-## @item @var{x0} the initial guess, if not given or set to [] the
-## default value @code{zeros (size (b))} is used.
+## @item @var{x0} the initial guess, if not given or set to [] the default
+## value @code{zeros (size (b))} is used.
 ## @end itemize
 ##
-## @var{A} can be passed as a matrix or as a function handle or
-## inline function @code{f} such that @code{f(x) = A*x}.
+## @var{A} can be passed as a matrix or as a function handle or inline
+## function @code{f} such that @code{f(x) = A*x}.
 ##
-## The preconditioner @var{P} is given as @code{P = M1 * M2}.
-## Both @var{M1} and @var{M2} can be passed as a matrix or as a function
-## handle or inline function @code{g} such that @code{g(x) = M1 \ x} or
-## @code{g(x) = M2 \ x}.
+## The preconditioner @var{P} is given as @code{P = M1 * M2}.  Both @var{M1}
+## and @var{M2} can be passed as a matrix or as a function handle or inline
+## function @code{g} such that @code{g(x) = M1 \ x} or @code{g(x) = M2 \ x}.
 ##
 ## If called with more than one output parameter
 ##
 ## @itemize @minus
 ## @item @var{flag} indicates the exit status:
 ##
 ## @itemize @minus
 ## @item 0: iteration converged to the within the chosen tolerance
diff --git a/scripts/sparse/cgs.m b/scripts/sparse/cgs.m
--- a/scripts/sparse/cgs.m
+++ b/scripts/sparse/cgs.m
@@ -20,34 +20,32 @@
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {@var{x} =} cgs (@var{A}, @var{b}, @var{rtol}, @var{maxit}, @var{M1}, @var{M2}, @var{x0})
 ## @deftypefnx {Function File} {@var{x} =} cgs (@var{A}, @var{b}, @var{rtol}, @var{maxit}, @var{P})
 ## @deftypefnx {Function File} {[@var{x}, @var{flag}, @var{relres}, @var{iter}, @var{resvec}] =} cgs (@var{A}, @var{b}, @dots{})
 ## Solve @code{A x = b}, where @var{A} is a square matrix, using the
 ## Conjugate Gradients Squared method.
 ##
 ## @itemize @minus
-## @item @var{rtol} is the relative tolerance, if not given or set to []
-## the default value 1e-6 is used.
+## @item @var{rtol} is the relative tolerance, if not given or set to [] the
+## default value 1e-6 is used.
 ##
-## @item @var{maxit} the maximum number of outer iterations, if not
-## given or set to [] the default value @code{min (20, numel (b))} is
-## used.
+## @item @var{maxit} the maximum number of outer iterations, if not given or
+## set to [] the default value @code{min (20, numel (b))} is used.
 ##
-## @item @var{x0} the initial guess, if not given or set to [] the
-## default value @code{zeros (size (b))} is used.
+## @item @var{x0} the initial guess, if not given or set to [] the default
+## value @code{zeros (size (b))} is used.
 ## @end itemize
 ##
-## @var{A} can be passed as a matrix or as a function handle or
-## inline function @code{f} such that @code{f(x) = A*x}.
+## @var{A} can be passed as a matrix or as a function handle or inline
+## function @code{f} such that @code{f(x) = A*x}.
 ##
-## The preconditioner @var{P} is given as @code{P = M1 * M2}.
-## Both @var{M1} and @var{M2} can be passed as a matrix or as a function
-## handle or inline function @code{g} such that @code{g(x) = M1 \ x} or
-## @code{g(x) = M2 \ x}.
+## The preconditioner @var{P} is given as @code{P = M1 * M2}.  Both @var{M1}
+## and @var{M2} can be passed as a matrix or as a function handle or inline
+## function @code{g} such that @code{g(x) = M1 \ x} or @code{g(x) = M2 \ x}.
 ##
 ## If called with more than one output parameter
 ##
 ## @itemize @minus
 ## @item @var{flag} indicates the exit status:
 ##
 ## @itemize @minus
 ## @item 0: iteration converged to the within the chosen tolerance
diff --git a/scripts/sparse/colperm.m b/scripts/sparse/colperm.m
--- a/scripts/sparse/colperm.m
+++ b/scripts/sparse/colperm.m
@@ -14,20 +14,22 @@
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {@var{p} =} colperm (@var{s})
 ## Return the column permutations such that the columns of
-## @code{@var{s} (:, @var{p})} are ordered in terms of increase number
-## of nonzero elements.  If @var{s} is symmetric, then @var{p} is chosen
-## such that @code{@var{s} (@var{p}, @var{p})} orders the rows and
-## columns with increasing number of nonzeros elements.
+## @code{@var{s} (:, @var{p})} are ordered in terms of increasing number of
+## nonzero elements.
+##
+## If @var{s} is symmetric, then @var{p} is chosen such that
+## @code{@var{s} (@var{p}, @var{p})} orders the rows and columns with
+## increasing number of nonzeros elements.
 ## @end deftypefn
 
 function p = colperm (s)
 
   if (nargin != 1)
     print_usage ();
   endif
 
diff --git a/scripts/sparse/eigs.m b/scripts/sparse/eigs.m
--- a/scripts/sparse/eigs.m
+++ b/scripts/sparse/eigs.m
@@ -33,18 +33,20 @@
 ## @deftypefnx {Function File} {@var{d} =} eigs (@var{af}, @var{n}, @var{B}, @var{k}, @var{sigma})
 ## @deftypefnx {Function File} {@var{d} =} eigs (@var{af}, @var{n}, @var{k}, @var{sigma}, @var{opts})
 ## @deftypefnx {Function File} {@var{d} =} eigs (@var{af}, @var{n}, @var{B}, @var{k}, @var{sigma}, @var{opts})
 ## @deftypefnx {Function File} {[@var{V}, @var{d}] =} eigs (@var{A}, @dots{})
 ## @deftypefnx {Function File} {[@var{V}, @var{d}] =} eigs (@var{af}, @var{n}, @dots{})
 ## @deftypefnx {Function File} {[@var{V}, @var{d}, @var{flag}] =} eigs (@var{A}, @dots{})
 ## @deftypefnx {Function File} {[@var{V}, @var{d}, @var{flag}] =} eigs (@var{af}, @var{n}, @dots{})
 ## Calculate a limited number of eigenvalues and eigenvectors of @var{A},
-## based on a selection criteria.  The number of eigenvalues and eigenvectors to
-## calculate is given by @var{k} and defaults to 6.
+## based on a selection criteria.
+##
+## The number of eigenvalues and eigenvectors to calculate is given by
+## @var{k} and defaults to 6.
 ##
 ## By default, @code{eigs} solve the equation
 ## @tex
 ## $A \nu = \lambda \nu$,
 ## @end tex
 ## @ifinfo
 ## @code{A * v = lambda * v},
 ## @end ifinfo
@@ -142,34 +144,34 @@
 ## The permutation vector of the Cholesky@tie{}factorization of @var{B} if
 ## @code{cholB} is true.  That is @code{chol (@var{B}(permB, permB))}.  The
 ## default is @code{1:@var{n}}.
 ##
 ## @end table
 ##
 ## It is also possible to represent @var{A} by a function denoted @var{af}.
 ## @var{af} must be followed by a scalar argument @var{n} defining the length
-## of the vector argument accepted by @var{af}.  @var{af} can be
-## a function handle, an inline function, or a string.  When @var{af} is a
-## string it holds the name of the function to use.
+## of the vector argument accepted by @var{af}.  @var{af} can be a function
+## handle, an inline function, or a string.  When @var{af} is a string it
+## holds the name of the function to use.
 ##
-## @var{af} is a function of the form @code{y = af (x)}
-## where the required return value of @var{af} is determined by
-## the value of @var{sigma}.  The four possible forms are
+## @var{af} is a function of the form @code{y = af (x)} where the required
+## return value of @var{af} is determined by the value of @var{sigma}.  The
+## four possible forms are
 ##
 ## @table @code
 ## @item A * x
 ## if @var{sigma} is not given or is a string other than "sm".
 ##
 ## @item A \ x
 ## if @var{sigma} is 0 or "sm".
 ##
 ## @item (A - sigma * I) \ x
-## for the standard eigenvalue problem, where @code{I} is the identity matrix of
-## the same size as @var{A}.
+## for the standard eigenvalue problem, where @code{I} is the identity matrix
+## of the same size as @var{A}.
 ##
 ## @item (A - sigma * B) \ x
 ## for the general eigenvalue problem.
 ## @end table
 ##
 ## The return arguments of @code{eigs} depend on the number of return arguments
 ## requested.  With a single return argument, a vector @var{d} of length @var{k}
 ## is returned containing the @var{k} eigenvalues that have been found.  With
diff --git a/scripts/sparse/etreeplot.m b/scripts/sparse/etreeplot.m
--- a/scripts/sparse/etreeplot.m
+++ b/scripts/sparse/etreeplot.m
@@ -15,19 +15,20 @@
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {} etreeplot (@var{A})
 ## @deftypefnx {Function File} {} etreeplot (@var{A}, @var{node_style}, @var{edge_style})
 ## Plot the elimination tree of the matrix @var{A} or
-## @tcode{@var{A}+@var{A}'} if @var{A} in not symmetric.  The optional
-## parameters @var{node_style} and @var{edge_style} define the output
-## style.
+## @tcode{@var{A}+@var{A}'} if @var{A} in not symmetric.
+##
+## The optional parameters @var{node_style} and @var{edge_style} define the
+## output style.
 ## @seealso{treeplot, gplot}
 ## @end deftypefn
 
 function etreeplot (A, varargin)
 
   if (nargin < 1)
     print_usage ();
   endif
diff --git a/scripts/sparse/gmres.m b/scripts/sparse/gmres.m
--- a/scripts/sparse/gmres.m
+++ b/scripts/sparse/gmres.m
@@ -15,40 +15,39 @@
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {@var{x} =} gmres (@var{A}, @var{b}, @var{m}, @var{rtol}, @var{maxit}, @var{M1}, @var{M2}, @var{x0})
 ## @deftypefnx {Function File} {@var{x} =} gmres (@var{A}, @var{b}, @var{m}, @var{rtol}, @var{maxit}, @var{P})
 ## @deftypefnx {Function File} {[@var{x}, @var{flag}, @var{relres}, @var{iter}, @var{resvec}] =} gmres (@dots{})
-## Solve @code{A x = b} using the Preconditioned GMRES iterative method
-## with restart, a.k.a. PGMRES(m).
+## Solve @code{A x = b} using the Preconditioned GMRES iterative method with
+## restart, a.k.a. PGMRES(m).
 ##
 ## @itemize @minus
 ## @item @var{rtol} is the relative tolerance,
 ## if not given or set to [] the default value 1e-6 is used.
 ##
-## @item @var{maxit} is the maximum number of outer iterations,
-## if not given or set to [] the default value
-## @code{min (10, numel (b) / restart)} is used.
+## @item @var{maxit} is the maximum number of outer iterations, if not given or
+## set to [] the default value @code{min (10, numel (b) / restart)} is used.
 ##
 ## @item @var{x0} is the initial guess,
 ## if not given or set to [] the default value @code{zeros (size (b))} is used.
 ##
 ## @item @var{m} is the restart parameter,
 ## if not given or set to [] the default value @code{numel (b)} is used.
 ## @end itemize
 ##
-## Argument @var{A} can be passed as a matrix, function handle, or
-## inline function @code{f} such that @code{f(x) = A*x}.
+## Argument @var{A} can be passed as a matrix, function handle, or inline
+## function @code{f} such that @code{f(x) = A*x}.
 ##
-## The preconditioner @var{P} is given as @code{P = M1 * M2}.
-## Both @var{M1} and @var{M2} can be passed as a matrix, function handle, or
-## inline function @code{g} such that @code{g(x) = M1\x} or @code{g(x) = M2\x}.
+## The preconditioner @var{P} is given as @code{P = M1 * M2}.  Both @var{M1}
+## and @var{M2} can be passed as a matrix, function handle, or inline function
+## @code{g} such that @code{g(x) = M1\x} or @code{g(x) = M2\x}.
 ##
 ## Besides the vector @var{x}, additional outputs are:
 ##
 ## @itemize @minus
 ## @item @var{flag} indicates the exit status:
 ##
 ## @table @asis
 ## @item 0 : iteration converged to within the specified tolerance
diff --git a/scripts/sparse/gplot.m b/scripts/sparse/gplot.m
--- a/scripts/sparse/gplot.m
+++ b/scripts/sparse/gplot.m
@@ -15,25 +15,24 @@
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {} gplot (@var{A}, @var{xy})
 ## @deftypefnx {Function File} {} gplot (@var{A}, @var{xy}, @var{line_style})
 ## @deftypefnx {Function File} {[@var{x}, @var{y}] =} gplot (@var{A}, @var{xy})
-## Plot a graph defined by @var{A} and @var{xy} in the graph theory
-## sense.  @var{A} is the adjacency matrix of the array to be plotted
-## and @var{xy} is an @var{n}-by-2 matrix containing the coordinates of
-## the nodes of the graph.
+## Plot a graph defined by @var{A} and @var{xy} in the graph theory sense.
 ##
-## The optional parameter @var{line_style} defines the output style for
-## the plot.  Called with no output arguments the graph is plotted
-## directly.  Otherwise, return the coordinates of the plot in @var{x}
-## and @var{y}.
+## @var{A} is the adjacency matrix of the array to be plotted and @var{xy} is
+## an @var{n}-by-2 matrix containing the coordinates of the nodes of the graph.
+##
+## The optional parameter @var{line_style} defines the output style for the
+## plot.  Called with no output arguments the graph is plotted directly. 
+## Otherwise, return the coordinates of the plot in @var{x} and @var{y}.
 ## @seealso{treeplot, etreeplot, spy}
 ## @end deftypefn
 
 function [x, y] = gplot (A, xy, line_style)
 
   if (nargin < 2 || nargin > 3 || nargout > 2)
     print_usage ();
   endif
diff --git a/scripts/sparse/ichol.m b/scripts/sparse/ichol.m
--- a/scripts/sparse/ichol.m
+++ b/scripts/sparse/ichol.m
@@ -76,22 +76,22 @@
 ## The relationship preserved is: @code{@var{A} * e = @var{L} * @var{L}' * e},
 ## where e is a vector of ones.
 ## @end table
 ##
 ## @item shape
 ##
 ## @table @asis
 ## @item @qcode{"lower"} (default)
-## Use only the lower triangle of @var{A} and return a lower triangular
-## factor @var{L} such that @tcode{L*L'} approximates @var{A}.
+## Use only the lower triangle of @var{A} and return a lower triangular factor
+## @var{L} such that @tcode{L*L'} approximates @var{A}.
 ##
 ## @item @qcode{"upper"}
-## Use only the upper triangle of @var{A} and return an upper triangular
-## factor @var{U} such that @code{U'*U} approximates @var{A}.
+## Use only the upper triangle of @var{A} and return an upper triangular factor
+## @var{U} such that @code{U'*U} approximates @var{A}.
 ## @end table
 ## @end table
 ##
 ## EXAMPLES
 ##
 ## The following problem demonstrates how to factorize a sample symmetric
 ## positive definite matrix with the full Cholesky decomposition and with the
 ## incomplete one.
diff --git a/scripts/sparse/ilu.m b/scripts/sparse/ilu.m
--- a/scripts/sparse/ilu.m
+++ b/scripts/sparse/ilu.m
@@ -129,18 +129,18 @@
 ## nnz (lu (A))
 ## ans = 126478
 ##
 ## nnz (ilu (A, opts))
 ## ans = 7840
 ## @end group
 ## @end example
 ##
-## This shows that @var{A} has 7,840 nonzeros, the complete LU factorization has
-## 126,478 nonzeros, and the incomplete LU factorization, with 0 level of
+## This shows that @var{A} has 7,840 nonzeros, the complete LU factorization
+## has 126,478 nonzeros, and the incomplete LU factorization, with 0 level of
 ## fill-in, has 7,840 nonzeros, the same amount as @var{A}.  Taken from:
 ## http://www.mathworks.com/help/matlab/ref/ilu.html
 ##
 ## @example
 ## @group
 ## A = gallery ("wathen", 10, 10);
 ## b = sum (A, 2);
 ## tol = 1e-8;
diff --git a/scripts/sparse/pcg.m b/scripts/sparse/pcg.m
--- a/scripts/sparse/pcg.m
+++ b/scripts/sparse/pcg.m
@@ -16,18 +16,19 @@
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {@var{x} =} pcg (@var{A}, @var{b}, @var{tol}, @var{maxit}, @var{m1}, @var{m2}, @var{x0}, @dots{})
 ## @deftypefnx {Function File} {[@var{x}, @var{flag}, @var{relres}, @var{iter}, @var{resvec}, @var{eigest}] =} pcg (@dots{})
 ##
 ## Solve the linear system of equations @w{@code{@var{A} * @var{x} = @var{b}}}
-## by means of the Preconditioned Conjugate Gradient iterative method.  The
-## input arguments are
+## by means of the Preconditioned Conjugate Gradient iterative method.
+##
+## The input arguments are
 ##
 ## @itemize
 ## @item
 ## @var{A} can be either a square (preferably sparse) matrix or a function
 ## handle, inline function or string containing the name of a function which
 ## computes @w{@code{@var{A} * @var{x}}}.  In principle, @var{A} should be
 ## symmetric and positive definite; if @code{pcg} finds @var{A} not to be
 ## positive definite, a warning is printed and the @var{flag} output will be
@@ -47,24 +48,23 @@
 ## @var{maxit} is the maximum allowable number of iterations; if @var{maxit}
 ## is omitted or empty then a value of 20 is used.
 ##
 ## @item
 ## @var{m} = @var{m1} * @var{m2} is the (left) preconditioning matrix, so that
 ## the iteration is (theoretically) equivalent to solving by @code{pcg}
 ## @w{@code{@var{P} * @var{x} = @var{m} \ @var{b}}}, with
 ## @w{@code{@var{P} = @var{m} \ @var{A}}}.
-## Note that a proper choice of the preconditioner may dramatically
-## improve the overall performance of the method.  Instead of matrices
-## @var{m1} and @var{m2}, the user may pass two functions which return
-## the results of applying the inverse of @var{m1} and @var{m2} to
-## a vector (usually this is the preferred way of using the preconditioner).
-## If @var{m1} is omitted or empty @code{[]} then no preconditioning is
-## applied.  If @var{m2} is omitted, @var{m} = @var{m1} will be used as
-## a preconditioner.
+## Note that a proper choice of the preconditioner may dramatically improve
+## the overall performance of the method.  Instead of matrices @var{m1} and
+## @var{m2}, the user may pass two functions which return the results of
+## applying the inverse of @var{m1} and @var{m2} to a vector (usually this is
+## the preferred way of using the preconditioner).  If @var{m1} is omitted or
+## empty @code{[]} then no preconditioning is applied.  If @var{m2} is
+## omitted, @var{m} = @var{m1} will be used as a preconditioner.
 ##
 ## @item
 ## @var{x0} is the initial guess.  If @var{x0} is omitted or empty then the
 ## function sets @var{x0} to a zero vector by default.
 ## @end itemize
 ##
 ## The arguments which follow @var{x0} are treated as parameters, and passed in
 ## a proper way to any of the functions (@var{A} or @var{m}) which are passed
@@ -149,43 +149,43 @@
 ##
 ## @sc{Example 3:} @code{pcg} with a preconditioner: @var{l} * @var{u}
 ##
 ## @example
 ## x = pcg (A, b, 1.e-6, 500, l*u)
 ## @end example
 ##
 ## @sc{Example 4:} @code{pcg} with a preconditioner: @var{l} * @var{u}.
-## Faster than @sc{Example 3} since lower and upper triangular matrices
-## are easier to invert
+## Faster than @sc{Example 3} since lower and upper triangular matrices are
+## easier to invert
 ##
 ## @example
 ## x = pcg (A, b, 1.e-6, 500, l, u)
 ## @end example
 ##
 ## @sc{Example 5:} Preconditioned iteration, with full diagnostics.  The
-## preconditioner (quite strange, because even the original matrix
-## @var{A} is trivial) is defined as a function
+## preconditioner (quite strange, because even the original matrix @var{A} is
+## trivial) is defined as a function
 ##
 ## @example
 ## @group
 ## function y = apply_m (x)
 ##   k = floor (length (x) - 2);
 ##   y = x;
 ##   y(1:k) = x(1:k) ./ [1:k]';
 ## endfunction
 ##
 ## [x, flag, relres, iter, resvec, eigest] = ...
 ##                    pcg (A, b, [], [], "apply_m");
 ## semilogy (1:iter+1, resvec);
 ## @end group
 ## @end example
 ##
-## @sc{Example 6:} Finally, a preconditioner which depends on a
-## parameter @var{k}.
+## @sc{Example 6:} Finally, a preconditioner which depends on a parameter
+## @var{k}.
 ##
 ## @example
 ## @group
 ## function y = apply_M (x, varargin)
 ##   K = varargin@{1@};
 ##   y = x;
 ##   y(1:K) = x(1:K) ./ [1:K]';
 ## endfunction
diff --git a/scripts/sparse/pcr.m b/scripts/sparse/pcr.m
--- a/scripts/sparse/pcr.m
+++ b/scripts/sparse/pcr.m
@@ -15,90 +15,92 @@
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {@var{x} =} pcr (@var{A}, @var{b}, @var{tol}, @var{maxit}, @var{m}, @var{x0}, @dots{})
 ## @deftypefnx {Function File} {[@var{x}, @var{flag}, @var{relres}, @var{iter}, @var{resvec}] =} pcr (@dots{})
 ##
-## Solve the linear system of equations @code{@var{A} * @var{x} = @var{b}}
-## by means of the Preconditioned Conjugate Residuals iterative
-## method.  The input arguments are
+## Solve the linear system of equations @code{@var{A} * @var{x} = @var{b}} by
+## means of the Preconditioned Conjugate Residuals iterative method.
+##
+## The input arguments are
 ##
 ## @itemize
 ## @item
-## @var{A} can be either a square (preferably sparse) matrix or a
-## function handle, inline function or string containing the name
-## of a function which computes @code{@var{A} * @var{x}}.  In principle
-## @var{A} should be symmetric and non-singular; if @code{pcr}
-## finds @var{A} to be numerically singular, you will get a warning
-## message and the @var{flag} output parameter will be set.
+## @var{A} can be either a square (preferably sparse) matrix or a function
+## handle, inline function or string containing the name of a function which
+## computes @code{@var{A} * @var{x}}.  In principle @var{A} should be
+## symmetric and non-singular; if @code{pcr} finds @var{A} to be numerically
+## singular, you will get a warning message and the @var{flag} output
+## parameter will be set.
 ##
 ## @item
 ## @var{b} is the right hand side vector.
 ##
 ## @item
 ## @var{tol} is the required relative tolerance for the residual error,
 ## @code{@var{b} - @var{A} * @var{x}}.  The iteration stops if
 ## @code{norm (@var{b} - @var{A} * @var{x}) <=
 ##       @var{tol} * norm (@var{b} - @var{A} * @var{x0})}.
 ## If @var{tol} is empty or is omitted, the function sets
 ## @code{@var{tol} = 1e-6} by default.
 ##
 ## @item
-## @var{maxit} is the maximum allowable number of iterations; if
-## @code{[]} is supplied for @code{maxit}, or @code{pcr} has less
-## arguments, a default value equal to 20 is used.
+## @var{maxit} is the maximum allowable number of iterations; if @code{[]} is
+## supplied for @code{maxit}, or @code{pcr} has less arguments, a default
+## value equal to 20 is used.
 ##
 ## @item
 ## @var{m} is the (left) preconditioning matrix, so that the iteration is
-## (theoretically) equivalent to solving by @code{pcr} @code{@var{P} *
-## @var{x} = @var{m} \ @var{b}}, with @code{@var{P} = @var{m} \ @var{A}}.
-## Note that a proper choice of the preconditioner may dramatically
-## improve the overall performance of the method.  Instead of matrix
-## @var{m}, the user may pass a function which returns the results of
-## applying the inverse of @var{m} to a vector (usually this is the
-## preferred way of using the preconditioner).  If @code{[]} is supplied
-## for @var{m}, or @var{m} is omitted, no preconditioning is applied.
+## (theoretically) equivalent to solving by
+## @code{pcr} @code{@var{P} * @var{x} = @var{m} \ @var{b}}, with
+## @code{@var{P} = @var{m} \ @var{A}}.  Note that a proper choice of the
+## preconditioner may dramatically improve the overall performance of the
+## method.  Instead of matrix @var{m}, the user may pass a function which
+## returns the results of applying the inverse of @var{m} to a vector
+## (usually this is the preferred way of using the preconditioner).  If
+## @code{[]} is supplied for @var{m}, or @var{m} is omitted, no
+## preconditioning is applied.
 ##
 ## @item
 ## @var{x0} is the initial guess.  If @var{x0} is empty or omitted, the
 ## function sets @var{x0} to a zero vector by default.
 ## @end itemize
 ##
-## The arguments which follow @var{x0} are treated as parameters, and
-## passed in a proper way to any of the functions (@var{A} or @var{m})
-## which are passed to @code{pcr}.  See the examples below for further
-## details.  The output arguments are
+## The arguments which follow @var{x0} are treated as parameters, and passed
+## in a proper way to any of the functions (@var{A} or @var{m}) which are
+## passed to @code{pcr}.  See the examples below for further details.
+##
+## The output arguments are
 ##
 ## @itemize
 ## @item
 ## @var{x} is the computed approximation to the solution of
 ## @code{@var{A} * @var{x} = @var{b}}.
 ##
 ## @item
-## @var{flag} reports on the convergence.  @code{@var{flag} = 0} means
-## the solution converged and the tolerance criterion given by @var{tol}
-## is satisfied.  @code{@var{flag} = 1} means that the @var{maxit} limit
-## for the iteration count was reached.  @code{@var{flag} = 3} reports t
-## @code{pcr} breakdown, see [1] for details.
+## @var{flag} reports on the convergence.  @code{@var{flag} = 0} means the
+## solution converged and the tolerance criterion given by @var{tol} is
+## satisfied.  @code{@var{flag} = 1} means that the @var{maxit} limit for the
+## iteration count was reached.  @code{@var{flag} = 3} reports a @code{pcr}
+## breakdown, see [1] for details.
 ##
 ## @item
 ## @var{relres} is the ratio of the final residual to its initial value,
 ## measured in the Euclidean norm.
 ##
 ## @item
 ## @var{iter} is the actual number of iterations performed.
 ##
 ## @item
-## @var{resvec} describes the convergence history of the method,
-## so that @code{@var{resvec} (i)} contains the Euclidean norms of the
-## residual after the (@var{i}-1)-th iteration, @code{@var{i} =
-## 1,2, @dots{}, @var{iter}+1}.
+## @var{resvec} describes the convergence history of the method, so that
+## @code{@var{resvec} (i)} contains the Euclidean norms of the residual after
+## the (@var{i}-1)-th iteration, @code{@var{i} = 1,2, @dots{}, @var{iter}+1}.
 ## @end itemize
 ##
 ## Let us consider a trivial problem with a diagonal matrix (we exploit the
 ## sparsity of A)
 ##
 ## @example
 ## @group
 ## n = 10;
diff --git a/scripts/sparse/qmr.m b/scripts/sparse/qmr.m
--- a/scripts/sparse/qmr.m
+++ b/scripts/sparse/qmr.m
@@ -14,40 +14,39 @@
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; If not, see <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {@var{x} =} qmr (@var{A}, @var{b}, @var{rtol}, @var{maxit}, @var{M1}, @var{M2}, @var{x0})
 ## @deftypefnx {Function File} {@var{x} =} qmr (@var{A}, @var{b}, @var{rtol}, @var{maxit}, @var{P})
 ## @deftypefnx {Function File} {[@var{x}, @var{flag}, @var{relres}, @var{iter}, @var{resvec}] =} qmr (@var{A}, @var{b}, @dots{})
-## Solve @code{A x = b} using the Quasi-Minimal Residual iterative
-## method (without look-ahead).
+## Solve @code{A x = b} using the Quasi-Minimal Residual iterative method
+## (without look-ahead).
 ##
 ## @itemize @minus
-## @item @var{rtol} is the relative tolerance, if not given
-## or set to [] the default value 1e-6 is used.
+## @item @var{rtol} is the relative tolerance, if not given or set to [] the
+## default value 1e-6 is used.
 ##
-## @item @var{maxit} the maximum number of outer iterations,
-## if not given or set to [] the default value
-## @code{min (20, numel (b))} is used.
+## @item @var{maxit} the maximum number of outer iterations, if not given or
+## set to [] the default value @code{min (20, numel (b))} is used.
 ##
-## @item @var{x0} the initial guess, if not given or set to []
-## the default value @code{zeros (size (b))} is used.
+## @item @var{x0} the initial guess, if not given or set to [] the default
+## value @code{zeros (size (b))} is used.
 ## @end itemize
 ##
-## @var{A} can be passed as a matrix or as a function handle or
-## inline function @code{f} such that @code{f(x, "notransp") = A*x}
-## and @code{f(x, "transp") = A'*x}.
+## @var{A} can be passed as a matrix or as a function handle or inline
+## function @code{f} such that @code{f(x, "notransp") = A*x} and
+## @code{f(x, "transp") = A'*x}.
 ##
-## The preconditioner @var{P} is given as @code{P = M1 * M2}.
-## Both @var{M1} and @var{M2} can be passed as a matrix or as
-## a function handle or inline function @code{g} such that
-## @code{g(x, "notransp") = M1 \ x} or @code{g(x, "notransp") = M2 \ x} and
-## @code{g(x, "transp") = M1' \ x} or @code{g(x, "transp") = M2' \ x}.
+## The preconditioner @var{P} is given as @code{P = M1 * M2}.  Both @var{M1}
+## and @var{M2} can be passed as a matrix or as a function handle or inline
+## function @code{g} such that @code{g(x, "notransp") = M1 \ x} or
+## @code{g(x, "notransp") = M2 \ x} and @code{g(x, "transp") = M1' \ x} or
+## @code{g(x, "transp") = M2' \ x}.
 ##
 ## If called with more than one output parameter
 ##
 ## @itemize @minus
 ## @item @var{flag} indicates the exit status:
 ##
 ## @itemize @minus
 ## @item 0: iteration converged to the within the chosen tolerance
diff --git a/scripts/sparse/spaugment.m b/scripts/sparse/spaugment.m
--- a/scripts/sparse/spaugment.m
+++ b/scripts/sparse/spaugment.m
@@ -41,41 +41,41 @@
 ##
 ## @noindent
 ## where @var{r} is the residual error
 ##
 ## @example
 ## @var{r} = @var{b} - @var{A} * @var{x}
 ## @end example
 ##
-## As the matrix @var{s} is symmetric indefinite it can be factorized
-## with @code{lu}, and the minimum norm solution can therefore be found
-## without the need for a @code{qr} factorization.  As the residual
-## error will be @code{zeros (@var{m}, @var{m})} for underdetermined
-## problems, and example can be
+## As the matrix @var{s} is symmetric indefinite it can be factorized with
+## @code{lu}, and the minimum norm solution can therefore be found without the
+## need for a @code{qr} factorization.  As the residual error will be
+## @code{zeros (@var{m}, @var{m})} for underdetermined problems, and example
+## can be
 ##
 ## @example
 ## @group
 ## m = 11; n = 10; mn = max (m, n);
 ## A = spdiags ([ones(mn,1), 10*ones(mn,1), -ones(mn,1)],
 ##              [-1, 0, 1], m, n);
 ## x0 = A \ ones (m,1);
 ## s = spaugment (A);
 ## [L, U, P, Q] = lu (s);
 ## x1 = Q * (U \ (L \ (P  * [ones(m,1); zeros(n,1)])));
 ## x1 = x1(end - n + 1 : end);
 ## @end group
 ## @end example
 ##
-## To find the solution of an overdetermined problem needs an estimate
-## of the residual error @var{r} and so it is more complex to formulate
-## a minimum norm solution using the @code{spaugment} function.
+## To find the solution of an overdetermined problem needs an estimate of the
+## residual error @var{r} and so it is more complex to formulate a minimum norm
+## solution using the @code{spaugment} function.
 ##
-## In general the left division operator is more stable and faster than
-## using the @code{spaugment} function.
+## In general the left division operator is more stable and faster than using
+## the @code{spaugment} function.
 ## @seealso{mldivide}
 ## @end deftypefn
 
 function s = spaugment (A, c)
   if (nargin < 2)
     if (issparse (A))
       c = max (max (abs (A))) / 1000;
     else
diff --git a/scripts/sparse/spconvert.m b/scripts/sparse/spconvert.m
--- a/scripts/sparse/spconvert.m
+++ b/scripts/sparse/spconvert.m
@@ -16,20 +16,20 @@
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {@var{x} =} spconvert (@var{m})
 ## Convert a simple sparse matrix format easily generated by other programs
 ## into Octave's internal sparse format.
 ##
-## The input @var{m} is either a 3 or 4 column real matrix, containing
-## the row, column, real, and imaginary parts of the elements of the
-## sparse matrix.  An element with a zero real and imaginary part can
-## be used to force a particular matrix size.
+## The input @var{m} is either a 3 or 4 column real matrix, containing the
+## row, column, real, and imaginary parts of the elements of the sparse
+## matrix.  An element with a zero real and imaginary part can be used to
+## force a particular matrix size.
 ## @seealso{sparse}
 ## @end deftypefn
 
 function s = spconvert (m)
 
   if (issparse (m))
     s = m;
   else
diff --git a/scripts/sparse/spdiags.m b/scripts/sparse/spdiags.m
--- a/scripts/sparse/spdiags.m
+++ b/scripts/sparse/spdiags.m
@@ -17,31 +17,32 @@
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {@var{B} =} spdiags (@var{A})
 ## @deftypefnx {Function File} {[@var{B}, @var{d}] =} spdiags (@var{A})
 ## @deftypefnx {Function File} {@var{B} =} spdiags (@var{A}, @var{d})
 ## @deftypefnx {Function File} {@var{A} =} spdiags (@var{v}, @var{d}, @var{A})
 ## @deftypefnx {Function File} {@var{A} =} spdiags (@var{v}, @var{d}, @var{m}, @var{n})
-## A generalization of the function @code{diag}.  Called with a single
-## input argument, the nonzero diagonals @var{d} of @var{A} are extracted.
-## With two arguments the diagonals to extract are given by the vector
-## @var{d}.
+## A generalization of the function @code{diag}.
+##
+## Called with a single input argument, the nonzero diagonals @var{d} of
+## @var{A} are extracted.
+##
+## With two arguments the diagonals to extract are given by the vector @var{d}.
 ##
-## The other two forms of @code{spdiags} modify the input matrix by
-## replacing the diagonals.  They use the columns of @var{v} to replace
-## the diagonals represented by the vector @var{d}.  If the sparse matrix
-## @var{A} is defined then the diagonals of this matrix are replaced.
-## Otherwise a matrix of @var{m} by @var{n} is created with the
-## diagonals given by the columns of @var{v}.
+## The other two forms of @code{spdiags} modify the input matrix by replacing
+## the diagonals.  They use the columns of @var{v} to replace the diagonals
+## represented by the vector @var{d}.  If the sparse matrix @var{A} is
+## defined then the diagonals of this matrix are replaced.  Otherwise a
+## matrix of @var{m} by @var{n} is created with the diagonals given by the
+## columns of @var{v}.
 ##
-## Negative values of @var{d} represent diagonals below the main
-## diagonal, and positive values of @var{d} diagonals above the main
-## diagonal.
+## Negative values of @var{d} represent diagonals below the main diagonal, and
+## positive values of @var{d} diagonals above the main diagonal.
 ##
 ## For example:
 ##
 ## @example
 ## @group
 ## spdiags (reshape (1:12, 4, 3), [-1 0 1], 5, 4)
 ##    @result{} 5 10  0  0
 ##       1  6 11  0
diff --git a/scripts/sparse/spfun.m b/scripts/sparse/spfun.m
--- a/scripts/sparse/spfun.m
+++ b/scripts/sparse/spfun.m
@@ -14,19 +14,20 @@
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {@var{y} =} spfun (@var{f}, @var{S})
 ## Compute @code{f(@var{S})} for the nonzero values of @var{S}.
-## This results in a sparse matrix with the same structure as
-## @var{S}.  The function @var{f} can be passed as a string, a
-## function handle, or an inline function.
+##
+## This results in a sparse matrix with the same structure as @var{S}.  The
+## function @var{f} can be passed as a string, a function handle, or an
+## inline function.
 ## @seealso{arrayfun, cellfun, structfun}
 ## @end deftypefn
 
 function y = spfun (f, S)
 
   if (nargin != 2)
     print_usage ();
   endif
diff --git a/scripts/sparse/spones.m b/scripts/sparse/spones.m
--- a/scripts/sparse/spones.m
+++ b/scripts/sparse/spones.m
@@ -13,18 +13,19 @@
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {@var{r} =} spones (@var{S})
-## Replace the nonzero entries of @var{S} with ones.  This creates a
-## sparse matrix with the same structure as @var{S}.
+## Replace the nonzero entries of @var{S} with ones.
+##
+## This creates a sparse matrix with the same structure as @var{S}.
 ## @seealso{sparse, sprand, sprandn, sprandsym, spfun, spy}
 ## @end deftypefn
 
 function r = spones (S)
 
   if (nargin != 1)
     print_usage ();
   endif
diff --git a/scripts/sparse/sprandsym.m b/scripts/sparse/sprandsym.m
--- a/scripts/sparse/sprandsym.m
+++ b/scripts/sparse/sprandsym.m
@@ -22,17 +22,17 @@
 ## @deftypefnx {Function File} {} sprandsym (@var{s})
 ## Generate a symmetric random sparse matrix.
 ##
 ## The size of the matrix will be @var{n}x@var{n}, with a density of values
 ## given by @var{d}.  @var{d} must be between 0 and 1 inclusive.  Values will
 ## be normally distributed with a mean of zero and a variance of 1.
 ##
 ## If called with a single matrix argument, a random sparse matrix is generated
-## wherever the matrix @var{S} is nonzero in its lower triangular part.
+## wherever the matrix @var{s} is nonzero in its lower triangular part.
 ## @seealso{sprand, sprandn, spones, sparse}
 ## @end deftypefn
 
 function S = sprandsym (n, d)
 
   if (nargin != 1 && nargin != 2)
     print_usage ();
   endif
diff --git a/scripts/sparse/spstats.m b/scripts/sparse/spstats.m
--- a/scripts/sparse/spstats.m
+++ b/scripts/sparse/spstats.m
@@ -15,23 +15,24 @@
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {[@var{count}, @var{mean}, @var{var}] =} spstats (@var{S})
 ## @deftypefnx {Function File} {[@var{count}, @var{mean}, @var{var}] =} spstats (@var{S}, @var{j})
 ## Return the stats for the nonzero elements of the sparse matrix @var{S}.
-## @var{count} is the number of nonzeros in each column, @var{mean}
-## is the mean of the nonzeros in each column, and @var{var} is the
-## variance of the nonzeros in each column.
 ##
-## Called with two input arguments, if @var{S} is the data and @var{j}
-## is the bin number for the data, compute the stats for each bin.  In
-## this case, bins can contain data values of zero, whereas with
+## @var{count} is the number of nonzeros in each column, @var{mean} is the mean
+## of the nonzeros in each column, and @var{var} is the variance of the
+## nonzeros in each column.
+##
+## Called with two input arguments, if @var{S} is the data and @var{j} is the
+## bin number for the data, compute the stats for each bin.  In this case,
+## bins can contain data values of zero, whereas with
 ## @code{spstats (@var{S})} the zeros may disappear.
 ## @end deftypefn
 
 function [count, mean, var] = spstats (S, j)
 
   if (nargin < 1 || nargin > 2)
     print_usage ();
   endif
diff --git a/scripts/sparse/spy.m b/scripts/sparse/spy.m
--- a/scripts/sparse/spy.m
+++ b/scripts/sparse/spy.m
@@ -18,18 +18,20 @@
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {} spy (@var{x})
 ## @deftypefnx {Function File} {} spy (@dots{}, @var{markersize})
 ## @deftypefnx {Function File} {} spy (@dots{}, @var{line_spec})
 ## Plot the sparsity pattern of the sparse matrix @var{x}.
 ##
 ## If the argument @var{markersize} is given as a scalar value, it is used to
-## determine the point size in the plot.  If the string @var{line_spec} is
-## given it is passed to @code{plot} and determines the appearance of the plot.
+## determine the point size in the plot.
+##
+## If the string @var{line_spec} is given it is passed to @code{plot} and
+## determines the appearance of the plot.
 ## @seealso{plot, gplot}
 ## @end deftypefn
 
 function spy (x, varargin)
 
   if (nargin < 1)
     print_usage ();
   endif
diff --git a/scripts/sparse/svds.m b/scripts/sparse/svds.m
--- a/scripts/sparse/svds.m
+++ b/scripts/sparse/svds.m
@@ -19,18 +19,19 @@
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {@var{s} =} svds (@var{A})
 ## @deftypefnx {Function File} {@var{s} =} svds (@var{A}, @var{k})
 ## @deftypefnx {Function File} {@var{s} =} svds (@var{A}, @var{k}, @var{sigma})
 ## @deftypefnx {Function File} {@var{s} =} svds (@var{A}, @var{k}, @var{sigma}, @var{opts})
 ## @deftypefnx {Function File} {[@var{u}, @var{s}, @var{v}] =} svds (@dots{})
 ## @deftypefnx {Function File} {[@var{u}, @var{s}, @var{v}, @var{flag}] =} svds (@dots{})
 ##
-## Find a few singular values of the matrix @var{A}.  The singular values
-## are calculated using
+## Find a few singular values of the matrix @var{A}.
+##
+## The singular values are calculated using
 ##
 ## @example
 ## @group
 ## [@var{m}, @var{n}] = size (@var{A});
 ## @var{s} = eigs ([sparse(@var{m}, @var{m}), @var{A};
 ##                      @var{A}', sparse(@var{n}, @var{n})])
 ## @end group
 ## @end example
diff --git a/scripts/sparse/treelayout.m b/scripts/sparse/treelayout.m
--- a/scripts/sparse/treelayout.m
+++ b/scripts/sparse/treelayout.m
@@ -14,22 +14,24 @@
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {} treelayout (@var{tree})
 ## @deftypefnx {Function File} {} treelayout (@var{tree}, @var{permutation})
-## treelayout lays out a tree or a forest.  The first argument @var{tree} is a
-## vector of
-## predecessors, optional parameter @var{permutation} is an optional postorder
-## permutation.
-## The complexity of the algorithm is O(n) in
-## terms of time and memory requirements.
+## treelayout lays out a tree or a forest.
+##
+## The first argument @var{tree} is a vector of predecessors.
+##
+## The parameter @var{permutation} is an optional postorder permutation.
+##
+## The complexity of the algorithm is O(n) in terms of time and memory
+## requirements.
 ## @seealso{etreeplot, gplot, treeplot}
 ## @end deftypefn
 
 function [x_coordinate, y_coordinate, height, s] = treelayout (tree, permutation)
   if (nargin < 1 || nargin > 2 || nargout > 4)
     print_usage ();
   elseif (! isvector (tree) || rows (tree) != 1 || ! isnumeric (tree)
           || any (tree > length (tree)) || any (tree < 0))
diff --git a/scripts/sparse/treeplot.m b/scripts/sparse/treeplot.m
--- a/scripts/sparse/treeplot.m
+++ b/scripts/sparse/treeplot.m
@@ -14,20 +14,25 @@
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {} treeplot (@var{tree})
 ## @deftypefnx {Function File} {} treeplot (@var{tree}, @var{node_style}, @var{edge_style})
-## Produce a graph of tree or forest.  The first argument is vector of
-## predecessors, optional parameters @var{node_style} and @var{edge_style}
-## define the output style.  The complexity of the algorithm is O(n) in
-## terms of is time and memory requirements.
+## Produce a graph of tree or forest.
+##
+## The first argument is vector of predecessors.
+##
+## The optional parameters @var{node_style} and @var{edge_style} define the
+## output plot style.
+##
+## The complexity of the algorithm is O(n) in terms of is time and memory
+## requirements.
 ## @seealso{etreeplot, gplot}
 ## @end deftypefn
 
 function treeplot (tree, node_style = "ko", edge_style = "r")
 
   if (nargin < 1 || nargin > 3 || nargout > 0)
     print_usage ();
   endif
diff --git a/scripts/specfun/expint.m b/scripts/specfun/expint.m
--- a/scripts/specfun/expint.m
+++ b/scripts/specfun/expint.m
@@ -36,17 +36,17 @@
 ##           /
 ##          x
 ## @end group
 ## @end example
 ##
 ## @end ifnottex
 ## Note: For compatibility, this functions uses the @sc{matlab} definition
 ## of the exponential integral.  Most other sources refer to this particular
-## value as @math{E_1 (x)}, and the exponential integral is
+## value as @math{E_1 (x)}, and the exponential integral as
 ## @tex
 ## $$
 ## {\rm Ei} (x) = - \int_{-x}^\infty {e^{-t} \over t} dt.
 ## $$
 ## @end tex
 ## @ifnottex
 ##
 ## @example
diff --git a/scripts/specfun/isprime.m b/scripts/specfun/isprime.m
--- a/scripts/specfun/isprime.m
+++ b/scripts/specfun/isprime.m
@@ -14,18 +14,18 @@
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} isprime (@var{x})
-## Return a logical array which is true where the elements of @var{x} are
-## prime numbers and false where they are not.
+## Return a logical array which is true where the elements of @var{x} are prime
+## numbers and false where they are not.
 ##
 ## A prime number is conventionally defined as a positive integer greater than
 ## 1 (e.g., 2, 3, @dots{}) which is divisible only by itself and 1.  Octave
 ## extends this definition to include both negative integers and complex
 ## values.  A negative integer is prime if its positive counterpart is prime.
 ## This is equivalent to @code{isprime (abs (x))}.
 ##
 ## If @code{class (@var{x})} is complex, then primality is tested in the domain
diff --git a/scripts/specfun/legendre.m b/scripts/specfun/legendre.m
--- a/scripts/specfun/legendre.m
+++ b/scripts/specfun/legendre.m
@@ -18,18 +18,19 @@
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {@var{l} =} legendre (@var{n}, @var{x})
 ## @deftypefnx {Function File} {@var{l} =} legendre (@var{n}, @var{x}, @var{normalization})
 ## Compute the Legendre function of degree @var{n} and order
 ## @var{m} = 0 @dots{} @var{n}.
 ##
-## The value @var{n} must be a real non-negative integer.  @var{x} is a
-## vector with real-valued elements in the range [-1, 1].
+## The value @var{n} must be a real non-negative integer.
+##
+## @var{x} is a vector with real-valued elements in the range [-1, 1].
 ##
 ## The optional argument @var{normalization} may be one of @qcode{"unnorm"},
 ## @qcode{"sch"}, or @qcode{"norm"}.  The default if no normalization is given
 ## is @qcode{"unnorm"}.
 ##
 ## When the optional argument @var{normalization} is @qcode{"unnorm"}, compute
 ## the Legendre function of degree @var{n} and order @var{m} and return all
 ## values for @var{m} = 0 @dots{} @var{n}.  The return value has one dimension
@@ -83,20 +84,20 @@
 ## ------------------------------------
 ## m=0 | -1.00000 | -0.47250 | -0.08000
 ## m=1 |  0.00000 | -1.99420 | -1.98000
 ## m=2 |  0.00000 | -2.56500 | -4.32000
 ## m=3 |  0.00000 | -1.24229 | -3.24000
 ## @end group
 ## @end example
 ##
-## When the optional argument @code{normalization} is @qcode{"sch"},
-## compute the Schmidt semi-normalized associated Legendre function.
-## The Schmidt semi-normalized associated Legendre function is related
-## to the unnormalized Legendre functions by the following:
+## When the optional argument @code{normalization} is @qcode{"sch"}, compute
+## the Schmidt semi-normalized associated Legendre function.  The Schmidt
+## semi-normalized associated Legendre function is related to the unnormalized
+## Legendre functions by the following:
 ##
 ## For Legendre functions of degree @var{n} and order 0:
 ##
 ## @tex
 ## $$
 ## SP^0_n (x) = P^0_n (x)
 ## $$
 ## @end tex
@@ -126,20 +127,20 @@
 ##   m      m         m    2(n-m)! 0.5
 ## SP(x) = P(x) * (-1)  * [-------]
 ##   n      n              (n+m)!
 ## @end group
 ## @end example
 ##
 ## @end ifnottex
 ##
-## When the optional argument @var{normalization} is @qcode{"norm"},
-## compute the fully normalized associated Legendre function.
-## The fully normalized associated Legendre function is related
-## to the unnormalized Legendre functions by the following:
+## When the optional argument @var{normalization} is @qcode{"norm"}, compute
+## the fully normalized associated Legendre function.  The fully normalized
+## associated Legendre function is related to the unnormalized Legendre
+## functions by the following:
 ##
 ## For Legendre functions of degree @var{n} and order @var{m}
 ##
 ## @tex
 ## $$
 ## NP^m_n (x) = P^m_n (x)(-1)^m\biggl({(n+0.5)(n-m)!\over{(n+m)!}}\biggl)^{0.5}
 ## $$
 ## @end tex
diff --git a/scripts/specfun/primes.m b/scripts/specfun/primes.m
--- a/scripts/specfun/primes.m
+++ b/scripts/specfun/primes.m
@@ -15,33 +15,31 @@
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} primes (@var{n})
 ## Return all primes up to @var{n}.
 ##
-## The output data class (double, single, uint32, etc.) is the same as
-## the input class of @var{n}.  The algorithm used is the Sieve of
-## Eratosthenes.
+## The output data class (double, single, uint32, etc.) is the same as the
+## input class of @var{n}.  The algorithm used is the Sieve of Eratosthenes.
 ##
-## Notes: If you need a specific number of primes you can use the
-## fact that the distance from one prime to the next is, on average,
-## proportional to the logarithm of the prime.  Integrating, one finds
-## that there are about @math{k} primes less than
+## Notes: If you need a specific number of primes you can use the fact that the
+## distance from one prime to the next is, on average, proportional to the
+## logarithm of the prime.  Integrating, one finds that there are about
+## @math{k} primes less than
 ## @tex
 ## $k \log (5 k)$.
 ## @end tex
 ## @ifnottex
 ## k*log (5*k).
 ## @end ifnottex
 ##
-## See also @code{list_primes} if you need a specific number @var{n} of
-## primes.
+## See also @code{list_primes} if you need a specific number @var{n} of primes.
 ## @seealso{list_primes, isprime}
 ## @end deftypefn
 
 ## Author: Paul Kienzle
 ## Author: Francesco Potortì
 ## Author: Dirk Laurie
 
 function p = primes (n)
diff --git a/scripts/specfun/reallog.m b/scripts/specfun/reallog.m
--- a/scripts/specfun/reallog.m
+++ b/scripts/specfun/reallog.m
@@ -15,18 +15,18 @@
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} reallog (@var{x})
 ## Return the real-valued natural logarithm of each element of @var{x}.
 ##
-## If any element results in a complex return value @code{reallog} aborts
-## and issues an error.
+## If any element results in a complex return value @code{reallog} aborts and
+## issues an error.
 ## @seealso{log, realpow, realsqrt}
 ## @end deftypefn
 
 function y = reallog (x)
 
   if (nargin != 1)
     print_usage ();
   elseif (iscomplex (x) || any (x(:) < 0))
diff --git a/scripts/specfun/realsqrt.m b/scripts/specfun/realsqrt.m
--- a/scripts/specfun/realsqrt.m
+++ b/scripts/specfun/realsqrt.m
@@ -15,18 +15,18 @@
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} realsqrt (@var{x})
 ## Return the real-valued square root of each element of @var{x}.
 ##
-## If any element results in a complex return value @code{realsqrt} aborts
-## and issues an error.
+## If any element results in a complex return value @code{realsqrt} aborts and
+## issues an error.
 ## @seealso{sqrt, realpow, reallog}
 ## @end deftypefn
 
 function y = realsqrt (x)
 
   if (nargin != 1)
     print_usage ();
   elseif (iscomplex (x) || any (x(:) < 0))
diff --git a/scripts/special-matrix/gallery.m b/scripts/special-matrix/gallery.m
--- a/scripts/special-matrix/gallery.m
+++ b/scripts/special-matrix/gallery.m
@@ -152,19 +152,19 @@
 ## @deftypefnx {Function File} {@var{a} =} gallery ("integerdata", @dots{}, "@var{class}")
 ## Create a matrix with random integers in the range [1, @var{imax}].
 ## If @var{imin} is given then the integers are in the range
 ## [@var{imin}, @var{imax}].
 ##
 ## The second input is a matrix of dimensions describing the size of the output.
 ## The dimensions can also be input as comma-separated arguments.
 ##
-## The input @var{j} is an integer index in the range [0, 2^32-1].  The
-## values of the output matrix are always exactly the same
-## (reproducibility) for a given size input and @var{j} index.
+## The input @var{j} is an integer index in the range [0, 2^32-1].  The values
+## of the output matrix are always exactly the same (reproducibility) for a
+## given size input and @var{j} index.
 ##
 ## The final optional argument determines the class of the resulting matrix.
 ## Possible values for @var{class}: @qcode{"uint8"}, @qcode{"uint16"},
 ## @qcode{"uint32"}, @qcode{"int8"}, @qcode{"int16"}, int32", @qcode{"single"},
 ## @qcode{"double"}.  The default is @qcode{"double"}.
 ##
 ## @end deftypefn
 ##
@@ -176,17 +176,17 @@
 ##
 ## @deftypefn {Function File} {@var{a} =} gallery ("invol", @var{n})
 ## Create an involutory matrix.
 ##
 ## @end deftypefn
 ##
 ## @deftypefn  {Function File} {@var{a} =} gallery ("ipjfact", @var{n})
 ## @deftypefnx {Function File} {@var{a} =} gallery ("ipjfact", @var{n}, @var{k})
-## Create an Hankel matrix with factorial elements.
+## Create a Hankel matrix with factorial elements.
 ##
 ## @end deftypefn
 ##
 ## @deftypefn  {Function File} {@var{a} =} gallery ("jordbloc", @var{n})
 ## @deftypefnx {Function File} {@var{a} =} gallery ("jordbloc", @var{n}, @var{lambda})
 ## Create a Jordan block.
 ##
 ## @end deftypefn
@@ -252,19 +252,19 @@
 ## @deftypefnx {Function File} {@var{a} =} gallery ("normaldata", @var{M}, @var{N}, @dots{}, @var{j})
 ## @deftypefnx {Function File} {@var{a} =} gallery ("normaldata", @dots{}, "@var{class}")
 ## Create a matrix with random samples from the standard normal distribution
 ## (mean = 0, std = 1).
 ##
 ## The first input is a matrix of dimensions describing the size of the output.
 ## The dimensions can also be input as comma-separated arguments.
 ##
-## The input @var{j} is an integer index in the range [0, 2^32-1].  The
-## values of the output matrix are always exactly the same
-## (reproducibility) for a given size input and @var{j} index.
+## The input @var{j} is an integer index in the range [0, 2^32-1].  The values
+## of the output matrix are always exactly the same (reproducibility) for a
+## given size input and @var{j} index.
 ##
 ## The final optional argument determines the class of the resulting matrix.
 ## Possible values for @var{class}: @qcode{"single"}, @qcode{"double"}.
 ## The default is @qcode{"double"}.
 ##
 ## @end deftypefn
 ##
 ## @deftypefn  {Function File} {@var{q} =} gallery ("orthog", @var{n})
@@ -375,19 +375,19 @@
 ## @deftypefnx {Function File} {@var{a} =} gallery ("uniformdata", @var{M}, @var{N}, @dots{}, @var{j})
 ## @deftypefnx {Function File} {@var{a} =} gallery ("uniformdata", @dots{}, "@var{class}")
 ## Create a matrix with random samples from the standard uniform distribution
 ## (range [0,1]).
 ##
 ## The first input is a matrix of dimensions describing the size of the output.
 ## The dimensions can also be input as comma-separated arguments.
 ##
-## The input @var{j} is an integer index in the range [0, 2^32-1].  The
-## values of the output matrix are always exactly the same
-## (reproducibility) for a given size input and @var{j} index.
+## The input @var{j} is an integer index in the range [0, 2^32-1].  The values
+## of the output matrix are always exactly the same (reproducibility) for a
+## given size input and @var{j} index.
 ##
 ## The final optional argument determines the class of the resulting matrix.
 ## Possible values for @var{class}: @qcode{"single"}, @qcode{"double"}.
 ## The default is @qcode{"double"}.
 ##
 ## @end deftypefn
 ##
 ## @deftypefn  {Function File} {@var{a} =} gallery ("wathen", @var{nx}, @var{ny})
diff --git a/scripts/special-matrix/hadamard.m b/scripts/special-matrix/hadamard.m
--- a/scripts/special-matrix/hadamard.m
+++ b/scripts/special-matrix/hadamard.m
@@ -16,20 +16,21 @@
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 ##
 ## Original version by Paul Kienzle distributed as free software in the
 ## public domain.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} hadamard (@var{n})
-## Construct a Hadamard matrix (@nospell{Hn}) of size @var{n}-by-@var{n}.  The
-## size @var{n} must be of the form @math{2^k * p} in which
-## p is one of 1, 12, 20 or 28.  The returned matrix is normalized,
-## meaning @w{@code{Hn(:,1) == 1}} and @w{@code{Hn(1,:) == 1}}.
+## Construct a Hadamard matrix (@nospell{Hn}) of size @var{n}-by-@var{n}.
+##
+## The size @var{n} must be of the form @math{2^k * p} in which p is one of
+## 1, 12, 20 or 28.  The returned matrix is normalized, meaning
+## @w{@code{Hn(:,1) == 1}} and @w{@code{Hn(1,:) == 1}}.
 ##
 ## Some of the properties of Hadamard matrices are:
 ##
 ## @itemize @bullet
 ## @item
 ## @code{kron (Hm, Hn)} is a Hadamard matrix of size @var{m}-by-@var{n}.
 ##
 ## @item
diff --git a/scripts/special-matrix/hankel.m b/scripts/special-matrix/hankel.m
--- a/scripts/special-matrix/hankel.m
+++ b/scripts/special-matrix/hankel.m
@@ -15,23 +15,24 @@
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {} hankel (@var{c})
 ## @deftypefnx {Function File} {} hankel (@var{c}, @var{r})
 ## Return the Hankel matrix constructed from the first column @var{c}, and
-## (optionally) the last row @var{r}.  If the last element of @var{c} is
-## not the same as the first element of @var{r}, the last element of
-## @var{c} is used.  If the second argument is omitted, it is assumed to
-## be a vector of zeros with the same size as @var{c}.
+## (optionally) the last row @var{r}.
 ##
-## A Hankel matrix formed from an m-vector @var{c}, and an n-vector
-## @var{r}, has the elements
+## If the last element of @var{c} is not the same as the first element of
+## @var{r}, the last element of @var{c} is used.  If the second argument is
+## omitted, it is assumed to be a vector of zeros with the same size as @var{c}.
+##
+## A Hankel matrix formed from an m-vector @var{c}, and an n-vector @var{r},
+## has the elements
 ## @tex
 ## $$
 ## H(i, j) = \cases{c_{i+j-1},&$i+j-1\le m$;\cr r_{i+j-m},&otherwise.\cr}
 ## $$
 ## @end tex
 ## @ifnottex
 ##
 ## @example
diff --git a/scripts/special-matrix/hilb.m b/scripts/special-matrix/hilb.m
--- a/scripts/special-matrix/hilb.m
+++ b/scripts/special-matrix/hilb.m
@@ -13,35 +13,36 @@
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} hilb (@var{n})
-## Return the Hilbert matrix of order @var{n}.  The @math{i,j} element
-## of a Hilbert matrix is defined as
+## Return the Hilbert matrix of order @var{n}.
+##
+## The @math{i,j} element of a Hilbert matrix is defined as
 ## @tex
 ## $$
 ## H(i, j) = {1 \over (i + j - 1)}
 ## $$
 ## @end tex
 ## @ifnottex
 ##
 ## @example
 ## H(i, j) = 1 / (i + j - 1)
 ## @end example
 ##
 ## @end ifnottex
 ##
 ## Hilbert matrices are close to being singular which make them difficult to
-## invert with numerical routines.
-## Comparing the condition number of a random matrix 5x5 matrix with that of
-## a Hilbert matrix of order 5 reveals just how difficult the problem is.
+## invert with numerical routines.  Comparing the condition number of a random
+## matrix 5x5 matrix with that of a Hilbert matrix of order 5 reveals just how
+## difficult the problem is.
 ##
 ## @example
 ## @group
 ## cond (rand (5))
 ##    @result{} 14.392
 ## cond (hilb (5))
 ##    @result{} 4.7661e+05
 ## @end group
diff --git a/scripts/special-matrix/invhilb.m b/scripts/special-matrix/invhilb.m
--- a/scripts/special-matrix/invhilb.m
+++ b/scripts/special-matrix/invhilb.m
@@ -13,18 +13,19 @@
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} invhilb (@var{n})
-## Return the inverse of the Hilbert matrix of order @var{n}.  This can be
-## computed exactly using
+## Return the inverse of the Hilbert matrix of order @var{n}.
+##
+## This can be computed exactly using
 ## @tex
 ## $$\eqalign{
 ##   A_{ij} &= -1^{i+j} (i+j-1)
 ##              \left( \matrix{n+i-1 \cr n-j } \right)
 ##              \left( \matrix{n+j-1 \cr n-i } \right)
 ##              \left( \matrix{i+j-2 \cr i-2 } \right)^2 \cr
 ##          &= { p(i)p(j) \over (i+j-1) }
 ## }$$
@@ -55,20 +56,20 @@
 ## @group
 ##              k  /k+n-1\   /n\
 ##     p(k) = -1  (       ) (   )
 ##                 \ k-1 /   \k/
 ## @end group
 ## @end example
 ##
 ## @end ifnottex
-## The validity of this formula can easily be checked by expanding
-## the binomial coefficients in both formulas as factorials.  It can
-## be derived more directly via the theory of Cauchy matrices.
-## See @nospell{J. W. Demmel}, @cite{Applied Numerical Linear Algebra}, p. 92.
+## The validity of this formula can easily be checked by expanding the binomial
+## coefficients in both formulas as factorials.  It can be derived more
+## directly via the theory of Cauchy matrices.  See @nospell{J. W. Demmel},
+## @cite{Applied Numerical Linear Algebra}, p. 92.
 ##
 ## Compare this with the numerical calculation of @code{inverse (hilb (n))},
 ## which suffers from the ill-conditioning of the Hilbert matrix, and the
 ## finite precision of your computer's floating point arithmetic.
 ## @seealso{hilb}
 ## @end deftypefn
 
 ## Author: Dirk Laurie <dlaurie@na-net.ornl.gov>
diff --git a/scripts/special-matrix/magic.m b/scripts/special-matrix/magic.m
--- a/scripts/special-matrix/magic.m
+++ b/scripts/special-matrix/magic.m
@@ -14,19 +14,20 @@
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} magic (@var{n})
 ##
-## Create an @var{n}-by-@var{n} magic square.  A magic square is an arrangement
-## of the integers @code{1:n^2} such that the row sums, column sums, and
-## diagonal sums are all equal to the same value.
+## Create an @var{n}-by-@var{n} magic square.
+##
+## A magic square is an arrangement of the integers @code{1:n^2} such that the
+## row sums, column sums, and diagonal sums are all equal to the same value.
 ##
 ## Note: @var{n} must be greater than 2 for the magic square to exist.
 ## @end deftypefn
 
 function A = magic (n)
 
   if (nargin != 1)
     print_usage ();
diff --git a/scripts/special-matrix/pascal.m b/scripts/special-matrix/pascal.m
--- a/scripts/special-matrix/pascal.m
+++ b/scripts/special-matrix/pascal.m
@@ -15,25 +15,31 @@
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {} pascal (@var{n})
 ## @deftypefnx {Function File} {} pascal (@var{n}, @var{t})
-## Return the Pascal matrix of order @var{n} if @code{@var{t} = 0}.  @var{t}
-## defaults to 0.  Return the pseudo-lower triangular Cholesky@tie{}factor of
-## the Pascal matrix if @code{@var{t} = 1} (The sign of some columns may be
-## negative).  This matrix is its own inverse, that is @code{pascal (@var{n},
-## 1) ^ 2 == eye (@var{n})}.  If @code{@var{t} = -1}, return the true
-## Cholesky@tie{}factor with strictly positive values on the diagonal.  If
-## @code{@var{t} = 2}, return a transposed and permuted version of @code{pascal
-## (@var{n}, 1)}, which is the cube root of the identity matrix.  That is,
-## @code{pascal (@var{n}, 2) ^ 3 == eye (@var{n})}.
+## Return the Pascal matrix of order @var{n} if @code{@var{t} = 0}.
+##
+## The default value of @var{t} is 0.
+##
+## When @code{@var{t} = 1}, return the pseudo-lower triangular
+## Cholesky@tie{}factor of the Pascal matrix (The sign of some columns may be
+## negative).  This matrix is its own inverse, that is
+## @code{pascal (@var{n}, 1) ^ 2 == eye (@var{n})}.
+##
+## If @code{@var{t} = -1}, return the true Cholesky@tie{}factor with strictly
+## positive values on the diagonal.
+##
+## If @code{@var{t} = 2}, return a transposed and permuted version of
+## @code{pascal (@var{n}, 1)}, which is the cube root of the identity matrix.
+## That is, @code{pascal (@var{n}, 2) ^ 3 == eye (@var{n})}.
 ##
 ## @seealso{chol}
 ## @end deftypefn
 
 ## Author: Peter Ekberg
 ##         (peda)
 
 function retval = pascal (n, t = 0)
diff --git a/scripts/special-matrix/rosser.m b/scripts/special-matrix/rosser.m
--- a/scripts/special-matrix/rosser.m
+++ b/scripts/special-matrix/rosser.m
@@ -13,19 +13,19 @@
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} rosser ()
-## Return the Rosser matrix.  This is a difficult test case used to evaluate
-## eigenvalue algorithms.
+## Return the Rosser matrix.
 ##
+## This is a difficult test case used to evaluate eigenvalue algorithms.
 ## @seealso{wilkinson, eig}
 ## @end deftypefn
 
 ## Author: Peter Ekberg
 ##         (peda)
 
 function retval = rosser ()
 
diff --git a/scripts/special-matrix/toeplitz.m b/scripts/special-matrix/toeplitz.m
--- a/scripts/special-matrix/toeplitz.m
+++ b/scripts/special-matrix/toeplitz.m
@@ -16,20 +16,21 @@
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {} toeplitz (@var{c})
 ## @deftypefnx {Function File} {} toeplitz (@var{c}, @var{r})
 ## Return the Toeplitz matrix constructed from the first column @var{c},
-## and (optionally) the first row @var{r}.  If the first element of @var{r}
-## is not the same as the first element of @var{c}, the first element of
-## @var{c} is used.  If the second argument is omitted, the first row is
-## taken to be the same as the first column.
+## and (optionally) the first row @var{r}.
+##
+## If the first element of @var{r} is not the same as the first element of
+## @var{c}, the first element of @var{c} is used.  If the second argument is
+## omitted, the first row is taken to be the same as the first column.
 ##
 ## A square Toeplitz matrix has the form:
 ## @tex
 ## $$
 ## \left[\matrix{c_0    & r_1     & r_2      & \cdots & r_n\cr
 ##               c_1    & c_0     & r_1      & \cdots & r_{n-1}\cr
 ##               c_2    & c_1     & c_0      & \cdots & r_{n-2}\cr
 ##               \vdots & \vdots  & \vdots   & \ddots & \vdots\cr
diff --git a/scripts/special-matrix/vander.m b/scripts/special-matrix/vander.m
--- a/scripts/special-matrix/vander.m
+++ b/scripts/special-matrix/vander.m
@@ -16,18 +16,19 @@
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {} vander (@var{c})
 ## @deftypefnx {Function File} {} vander (@var{c}, @var{n})
 ## Return the Vandermonde matrix whose next to last column is @var{c}.
-## If @var{n} is specified, it determines the number of columns;
-## otherwise, @var{n} is taken to be equal to the length of @var{c}.
+##
+## If @var{n} is specified, it determines the number of columns; otherwise,
+## @var{n} is taken to be equal to the length of @var{c}.
 ##
 ## A Vandermonde matrix has the form:
 ## @tex
 ## $$
 ## \left[\matrix{c_1^{n-1}  & \cdots & c_1^2  & c_1    & 1      \cr
 ##               c_2^{n-1}  & \cdots & c_2^2  & c_2    & 1      \cr
 ##               \vdots     & \ddots & \vdots & \vdots & \vdots \cr
 ##               c_n^{n-1}  & \cdots & c_n^2  & c_n    & 1      }\right]
diff --git a/scripts/special-matrix/wilkinson.m b/scripts/special-matrix/wilkinson.m
--- a/scripts/special-matrix/wilkinson.m
+++ b/scripts/special-matrix/wilkinson.m
@@ -13,20 +13,21 @@
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} wilkinson (@var{n})
-## Return the Wilkinson matrix of order @var{n}.  Wilkinson matrices are
-## symmetric and tridiagonal with pairs of nearly, but not exactly, equal
-## eigenvalues.  They are useful in testing the behavior and performance
-## of eigenvalue solvers.
+## Return the Wilkinson matrix of order @var{n}.
+##
+## Wilkinson matrices are symmetric and tridiagonal with pairs of nearly, but
+## not exactly, equal eigenvalues.  They are useful in testing the behavior and
+## performance of eigenvalue solvers.
 ##
 ## @seealso{rosser, eig}
 ## @end deftypefn
 
 ## Author: Peter Ekberg
 ##         (peda)
 
 function retval = wilkinson (n)
diff --git a/scripts/statistics/base/center.m b/scripts/statistics/base/center.m
--- a/scripts/statistics/base/center.m
+++ b/scripts/statistics/base/center.m
@@ -15,19 +15,29 @@
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {} center (@var{x})
 ## @deftypefnx {Function File} {} center (@var{x}, @var{dim})
+## Center data by subtracting its mean.
+##
 ## If @var{x} is a vector, subtract its mean.
+##
 ## If @var{x} is a matrix, do the above for each column.
+##
 ## If the optional argument @var{dim} is given, operate along this dimension.
+##
+## Programming Note: @code{center} has obvious application for normalizing
+## statistical data.  It is also useful for improving the precision of general
+## numerical calculations.  Whenever there is a large value that is common
+## to a batch of data, the mean can be subtracted off, the calculation
+## performed, and then the mean added back to obtain the final answer.
 ## @seealso{zscore}
 ## @end deftypefn
 
 ## Author: KH <Kurt.Hornik@wu-wien.ac.at>
 ## Description: Center by subtracting means
 
 function retval = center (x, dim)
 
diff --git a/scripts/statistics/base/cloglog.m b/scripts/statistics/base/cloglog.m
--- a/scripts/statistics/base/cloglog.m
+++ b/scripts/statistics/base/cloglog.m
@@ -13,17 +13,19 @@
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} cloglog (@var{x})
-## Return the complementary log-log function of @var{x}, defined as
+## Return the complementary log-log function of @var{x}.
+##
+## The complementary log-log function is defined as
 ## @tex
 ## $$
 ## {\rm cloglog}(x) = - \log (- \log (x))
 ## $$
 ## @end tex
 ## @ifnottex
 ##
 ## @example
diff --git a/scripts/statistics/base/cov.m b/scripts/statistics/base/cov.m
--- a/scripts/statistics/base/cov.m
+++ b/scripts/statistics/base/cov.m
@@ -51,17 +51,17 @@
 ## @item 0:
 ##   normalize with @math{N-1}, provides the best unbiased estimator of the
 ## covariance [default]
 ##
 ## @item 1:
 ##   normalize with @math{N}, this provides the second moment around the mean
 ## @end table
 ##
-## @sc{matlab} compatibility: Octave always computes the covariance matrix.
+## Compatibility Note:: Octave always computes the covariance matrix.
 ## For two inputs, however, @sc{matlab} will calculate
 ## @code{cov (@var{x}(:), @var{y}(:))} whenever the number of elements in
 ## @var{x} and @var{y} are equal.  This will result in a scalar rather than
 ## a matrix output.  Code relying on this odd definition will need to be
 ## changed when running in Octave.
 ## @seealso{corr}
 ## @end deftypefn
 
diff --git a/scripts/statistics/base/gls.m b/scripts/statistics/base/gls.m
--- a/scripts/statistics/base/gls.m
+++ b/scripts/statistics/base/gls.m
@@ -13,17 +13,19 @@
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {[@var{beta}, @var{v}, @var{r}] =} gls (@var{y}, @var{x}, @var{o})
-## Generalized least squares estimation for the multivariate model
+## Generalized least squares model.
+##
+## Perform a generalized least squares estimation for the multivariate model
 ## @tex
 ## $y = x b + e$
 ## with $\bar{e} = 0$ and cov(vec($e$)) = $(s^2)o$,
 ## @end tex
 ## @ifnottex
 ## @w{@math{y = x*b + e}} with @math{mean (e) = 0} and
 ## @math{cov (vec (e)) = (s^2) o},
 ## @end ifnottex
diff --git a/scripts/statistics/base/histc.m b/scripts/statistics/base/histc.m
--- a/scripts/statistics/base/histc.m
+++ b/scripts/statistics/base/histc.m
@@ -16,29 +16,29 @@
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {@var{n} =} histc (@var{x}, @var{edges})
 ## @deftypefnx {Function File} {@var{n} =} histc (@var{x}, @var{edges}, @var{dim})
 ## @deftypefnx {Function File} {[@var{n}, @var{idx}] =} histc (@dots{})
-## Produce histogram counts.
+## Compute histogram counts.
 ##
 ## When @var{x} is a vector, the function counts the number of elements of
 ## @var{x} that fall in the histogram bins defined by @var{edges}.  This must be
 ## a vector of monotonically increasing values that define the edges of the
 ## histogram bins.  @code{@var{n}(k)} contains the number of elements in
 ## @var{x} for which @code{@var{edges}(k) <= @var{x} < @var{edges}(k+1)}.
 ## The final element of @var{n} contains the number of elements of @var{x}
 ## exactly equal to the last element of @var{edges}.
 ##
-## When @var{x} is an @math{N}-dimensional array, the computation is
-## carried out along dimension @var{dim}.  If not specified @var{dim} defaults
-## to the first non-singleton dimension.
+## When @var{x} is an @math{N}-dimensional array, the computation is carried
+## out along dimension @var{dim}.  If not specified @var{dim} defaults to the
+## first non-singleton dimension.
 ##
 ## When a second output argument is requested an index matrix is also returned.
 ## The @var{idx} matrix has the same size as @var{x}.  Each element of @var{idx}
 ## contains the index of the histogram bin in which the corresponding element
 ## of @var{x} was counted.
 ## @seealso{hist}
 ## @end deftypefn
 
diff --git a/scripts/statistics/base/iqr.m b/scripts/statistics/base/iqr.m
--- a/scripts/statistics/base/iqr.m
+++ b/scripts/statistics/base/iqr.m
@@ -15,18 +15,20 @@
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {} iqr (@var{x})
 ## @deftypefnx {Function File} {} iqr (@var{x}, @var{dim})
 ## Return the interquartile range, i.e., the difference between the upper
-## and lower quartile of the input data.  If @var{x} is a matrix, do the
-## above for first non-singleton dimension of @var{x}.
+## and lower quartile of the input data.
+##
+## If @var{x} is a matrix, do the above for first non-singleton dimension of
+## @var{x}.
 ##
 ## If the optional argument @var{dim} is given, operate along this dimension.
 ##
 ## As a measure of dispersion, the interquartile range is less affected by
 ## outliers than either @code{range} or @code{std}.
 ## @seealso{range, std}
 ## @end deftypefn
 
diff --git a/scripts/statistics/base/kendall.m b/scripts/statistics/base/kendall.m
--- a/scripts/statistics/base/kendall.m
+++ b/scripts/statistics/base/kendall.m
@@ -17,20 +17,20 @@
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {} kendall (@var{x})
 ## @deftypefnx {Function File} {} kendall (@var{x}, @var{y})
 ## @cindex Kendall's Tau
 ## Compute Kendall's @var{tau}.
 ##
-## For two data vectors @var{x}, @var{y} of common length @var{n},
-## Kendall's @var{tau} is the correlation of the signs of all rank
-## differences of @var{x} and @var{y}; i.e., if both @var{x} and
-## @var{y} have distinct entries, then
+## For two data vectors @var{x}, @var{y} of common length @var{n}, Kendall's
+## @var{tau} is the correlation of the signs of all rank differences of
+## @var{x} and @var{y}; i.e., if both @var{x} and @var{y} have distinct
+## entries, then
 ##
 ## @tex
 ## $$ \tau = {1 \over n(n-1)} \sum_{i,j} {\rm sign}(q_i-q_j) {\rm sign}(r_i-r_j) $$
 ## @end tex
 ## @ifnottex
 ##
 ## @example
 ## @group
diff --git a/scripts/statistics/base/kurtosis.m b/scripts/statistics/base/kurtosis.m
--- a/scripts/statistics/base/kurtosis.m
+++ b/scripts/statistics/base/kurtosis.m
@@ -16,17 +16,19 @@
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {} kurtosis (@var{x})
 ## @deftypefnx {Function File} {} kurtosis (@var{x}, @var{flag})
 ## @deftypefnx {Function File} {} kurtosis (@var{x}, @var{flag}, @var{dim})
-## Compute the sample kurtosis of the elements of @var{x}:
+## Compute the sample kurtosis of the elements of @var{x}.
+##
+## The sample kurtosis is defined as
 ## @tex
 ## $$
 ## \kappa_1 = {{{1\over N}\,
 ##          \sum_{i=1}^N (@var{x}_i - \bar{@var{x}})^4} \over \sigma^4},
 ## $$
 ## where $N$ is the length of @var{x}, $\bar{@var{x}}$ its mean, and $\sigma$
 ## its (uncorrected) standard deviation.
 ## @end tex
diff --git a/scripts/statistics/base/logit.m b/scripts/statistics/base/logit.m
--- a/scripts/statistics/base/logit.m
+++ b/scripts/statistics/base/logit.m
@@ -13,30 +13,32 @@
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} logit (@var{p})
-## For each component of @var{p}, return the logit of @var{p} defined as
+## Compute the logit for each value of @var{p}
+##
+## The logit is defined as
 ## @tex
 ## $$
 ## {\rm logit}(p) = \log\Big({p \over 1-p}\Big)
 ## $$
 ## @end tex
 ## @ifnottex
 ##
 ## @example
 ## logit (@var{p}) = log (@var{p} / (1-@var{p}))
 ## @end example
 ##
 ## @end ifnottex
-## @seealso{logistic_cdf}
+## @seealso{probit, logistic_cdf}
 ## @end deftypefn
 
 ## Author: KH <Kurt.Hornik@wu-wien.ac.at>
 ## Description: Logit transformation
 
 function y = logit (p)
 
   if (nargin != 1)
diff --git a/scripts/statistics/base/lscov.m b/scripts/statistics/base/lscov.m
--- a/scripts/statistics/base/lscov.m
+++ b/scripts/statistics/base/lscov.m
@@ -15,43 +15,43 @@
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {@var{x} =} lscov (@var{A}, @var{b})
 ## @deftypefnx {Function File} {@var{x} =} lscov (@var{A}, @var{b}, @var{V})
 ## @deftypefnx {Function File} {@var{x} =} lscov (@var{A}, @var{b}, @var{V}, @var{alg})
 ## @deftypefnx {Function File} {[@var{x}, @var{stdx}, @var{mse}, @var{S}] =} lscov (@dots{})
 ##
 ## Compute a generalized linear least squares fit.
+##
 ## Estimate @var{x} under the model @var{b} = @var{A}@var{x} + @var{w},
 ## where the noise @var{w} is assumed to follow a normal distribution
 ## with covariance matrix @math{{\sigma^2} V}.
 ##
 ## If the size of the coefficient matrix @var{A} is n-by-p, the
 ## size of the vector/array of constant terms @var{b} must be n-by-k.
 ##
 ## The optional input argument @var{V} may be a n-by-1 vector of positive
-## weights (inverse variances), or a n-by-n symmetric positive
-## semidefinite matrix representing the covariance of @var{b}.  If
-## @var{V} is not supplied, the ordinary least squares solution is
-## returned.
+## weights (inverse variances), or a n-by-n symmetric positive semidefinite
+## matrix representing the covariance of @var{b}.  If @var{V} is not
+## supplied, the ordinary least squares solution is returned.
 ##
-## The @var{alg} input argument, a guidance on solution method to use,
-## is currently ignored.
+## The @var{alg} input argument, a guidance on solution method to use, is
+## currently ignored.
 ##
-## Besides the least-squares estimate matrix @var{x} (p-by-k), the
-## function also returns @var{stdx} (p-by-k), the error standard
-## deviation of estimated @var{x}; @var{mse} (k-by-1), the estimated
-## data error covariance scale factors (@math{\sigma^2}); and @var{S}
-## (p-by-p, or p-by-p-by-k if k > 1), the error covariance of @var{x}.
+## Besides the least-squares estimate matrix @var{x} (p-by-k), the function
+## also returns @var{stdx} (p-by-k), the error standard deviation of
+## estimated @var{x}; @var{mse} (k-by-1), the estimated data error covariance
+## scale factors (@math{\sigma^2}); and @var{S} (p-by-p, or p-by-p-by-k if k
+## > 1), the error covariance of @var{x}.
 ##
 ## Reference: @nospell{Golub and Van Loan} (1996),
-## Matrix Computations (3rd Ed.), Johns Hopkins, Section 5.6.3
+## @cite{Matrix Computations (3rd Ed.)}, Johns Hopkins, Section 5.6.3
 ##
+## @seealso{ols, gls, lsqnonneg}
 ## @end deftypefn
-## @seealso{ols, gls, lsqnonneg}
 
 ## Author: Nir Krakauer
 
 function [x, stdx, mse, S] = lscov (A, b, V = [], alg)
 
   if (nargin < 2 || (rows (A) != rows (b)))
     print_usage ();
   endif
diff --git a/scripts/statistics/base/mahalanobis.m b/scripts/statistics/base/mahalanobis.m
--- a/scripts/statistics/base/mahalanobis.m
+++ b/scripts/statistics/base/mahalanobis.m
@@ -14,19 +14,20 @@
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} mahalanobis (@var{x}, @var{y})
 ## Return the Mahalanobis' D-square distance between the multivariate
-## samples @var{x} and @var{y}, which must have the same number of
-## components (columns), but may have a different number of observations
-## (rows).
+## samples @var{x} and @var{y}.
+##
+## The data @var{x} and @var{y} must have the same number of components
+## (columns), but may have a different number of observations (rows).
 ## @end deftypefn
 
 ## Author: Friedrich Leisch <leisch@ci.tuwien.ac.at>
 ## Created: July 1993
 ## Adapted-By: jwe
 
 function retval = mahalanobis (x, y)
 
diff --git a/scripts/statistics/base/mean.m b/scripts/statistics/base/mean.m
--- a/scripts/statistics/base/mean.m
+++ b/scripts/statistics/base/mean.m
@@ -17,47 +17,50 @@
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {} mean (@var{x})
 ## @deftypefnx {Function File} {} mean (@var{x}, @var{dim})
 ## @deftypefnx {Function File} {} mean (@var{x}, @var{opt})
 ## @deftypefnx {Function File} {} mean (@var{x}, @var{dim}, @var{opt})
 ## Compute the mean of the elements of the vector @var{x}.
+##
+## The mean is defined as
+##
 ## @tex
 ## $$ {\rm mean}(x) = \bar{x} = {1\over N} \sum_{i=1}^N x_i $$
 ## @end tex
 ## @ifnottex
 ##
 ## @example
 ## mean (x) = SUM_i x(i) / N
 ## @end example
 ##
 ## @end ifnottex
 ## If @var{x} is a matrix, compute the mean for each column and return them
 ## in a row vector.
 ##
+## If the optional argument @var{dim} is given, operate along this dimension.
+##
 ## The optional argument @var{opt} selects the type of mean to compute.
 ## The following options are recognized:
 ##
 ## @table @asis
 ## @item @qcode{"a"}
 ## Compute the (ordinary) arithmetic mean.  [default]
 ##
 ## @item @qcode{"g"}
 ## Compute the geometric mean.
 ##
 ## @item @qcode{"h"}
 ## Compute the harmonic mean.
 ## @end table
 ##
-## If the optional argument @var{dim} is given, operate along this dimension.
-##
-## Both @var{dim} and @var{opt} are optional.  If both are supplied,
-## either may appear first.
+## Both @var{dim} and @var{opt} are optional.  If both are supplied, either
+## may appear first.
 ## @seealso{median, mode}
 ## @end deftypefn
 
 ## Author: KH <Kurt.Hornik@wu-wien.ac.at>
 ## Description: Compute arithmetic, geometric, and harmonic mean
 
 function y = mean (x, opt1, opt2)
 
diff --git a/scripts/statistics/base/meansq.m b/scripts/statistics/base/meansq.m
--- a/scripts/statistics/base/meansq.m
+++ b/scripts/statistics/base/meansq.m
@@ -16,16 +16,18 @@
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {} meansq (@var{x})
 ## @deftypefnx {Function File} {} meansq (@var{x}, @var{dim})
 ## Compute the mean square of the elements of the vector @var{x}.
+##
+## The mean square is defined as
 ## @tex
 ## $$
 ## {\rm meansq} (x) = {\sum_{i=1}^N {x_i}^2 \over N}
 ## $$
 ## where $\bar{x}$ is the mean value of $x$.
 ## @end tex
 ## @ifnottex
 ##
diff --git a/scripts/statistics/base/median.m b/scripts/statistics/base/median.m
--- a/scripts/statistics/base/median.m
+++ b/scripts/statistics/base/median.m
@@ -16,18 +16,18 @@
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {} median (@var{x})
 ## @deftypefnx {Function File} {} median (@var{x}, @var{dim})
 ## Compute the median value of the elements of the vector @var{x}.
-## If the elements of @var{x} are sorted, the median is defined
-## as
+##
+## When the elements of @var{x} are sorted, the median is defined as
 ## @tex
 ## $$
 ## {\rm median} (x) =
 ##   \cases{x(\lceil N/2\rceil), & $N$ odd;\cr
 ##           (x(N/2)+x(N/2+1))/2, & $N$ even.}
 ## $$
 ## @end tex
 ## @ifnottex
@@ -36,19 +36,20 @@
 ## @group
 ##               x(ceil(N/2))             N odd
 ## median (x) =
 ##              (x(N/2) + x((N/2)+1))/2   N even
 ## @end group
 ## @end example
 ##
 ## @end ifnottex
-## If @var{x} is a matrix, compute the median value for each
-## column and return them in a row vector.  If the optional @var{dim}
-## argument is given, operate along this dimension.
+## If @var{x} is a matrix, compute the median value for each column and
+## return them in a row vector.
+##
+## If the optional @var{dim} argument is given, operate along this dimension.
 ## @seealso{mean, mode}
 ## @end deftypefn
 
 ## Author: jwe
 
 function retval = median (x, dim)
 
   if (nargin != 1 && nargin != 2)
diff --git a/scripts/statistics/base/mode.m b/scripts/statistics/base/mode.m
--- a/scripts/statistics/base/mode.m
+++ b/scripts/statistics/base/mode.m
@@ -16,25 +16,28 @@
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {} mode (@var{x})
 ## @deftypefnx {Function File} {} mode (@var{x}, @var{dim})
 ## @deftypefnx {Function File} {[@var{m}, @var{f}, @var{c}] =} mode (@dots{})
 ## Compute the most frequently occurring value in a dataset (mode).
+##
 ## @code{mode} determines the frequency of values along the first non-singleton
 ## dimension and returns the value with the highest frequency.  If two, or
 ## more, values have the same frequency @code{mode} returns the smallest.
 ##
 ## If the optional argument @var{dim} is given, operate along this dimension.
 ##
 ## The return variable @var{f} is the number of occurrences of the mode in
-## in the dataset.  The cell array @var{c} contains all of the elements
-## with the maximum frequency.
+## the dataset.
+##
+## The cell array @var{c} contains all of the elements with the maximum
+## frequency.
 ## @seealso{mean, median}
 ## @end deftypefn
 
 function [m, f, c] = mode (x, dim)
 
   if (nargin < 1 || nargin > 2)
     print_usage ();
   endif
diff --git a/scripts/statistics/base/moment.m b/scripts/statistics/base/moment.m
--- a/scripts/statistics/base/moment.m
+++ b/scripts/statistics/base/moment.m
@@ -37,16 +37,18 @@
 ## @end group
 ## @end example
 ##
 ## @end ifnottex
 ##
 ## If @var{x} is a matrix, return the row vector containing the @var{p}-th
 ## central moment of each column.
 ##
+## If the optional argument @var{dim} is given, operate along this dimension.
+##
 ## The optional string @var{type} specifies the type of moment to be computed.
 ## Valid options are:
 ##
 ## @table @asis
 ## @item @qcode{"c"}
 ##   Central Moment (default).
 ##
 ## @item  @qcode{"a"}
@@ -99,18 +101,16 @@
 ## @group
 ## 1/N SUM_i ( abs (x(i)) )^p
 ## @end group
 ## @end example
 ##
 ## @end ifnottex
 ## @end table
 ##
-## If the optional argument @var{dim} is given, operate along this dimension.
-##
 ## If both @var{type} and @var{dim} are given they may appear in any order.
 ## @seealso{var, skewness, kurtosis}
 ## @end deftypefn
 
 ## Can easily be made to work for continuous distributions (using quad)
 ## as well, but how does the general case work?
 
 ## Author: KH <Kurt.Hornik@wu-wien.ac.at>
diff --git a/scripts/statistics/base/ols.m b/scripts/statistics/base/ols.m
--- a/scripts/statistics/base/ols.m
+++ b/scripts/statistics/base/ols.m
@@ -13,39 +13,40 @@
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {[@var{beta}, @var{sigma}, @var{r}] =} ols (@var{y}, @var{x})
-## Ordinary least squares estimation for the multivariate model
+## Ordinary least squares estimation.
+##
+## OLS applies to the multivariate model
 ## @tex
 ## $y = x b + e$
 ## with
 ## $\bar{e} = 0$, and cov(vec($e$)) = kron ($s, I$)
 ## @end tex
 ## @ifnottex
 ## @w{@math{y = x*b + e}} with
 ## @math{mean (e) = 0} and @math{cov (vec (e)) = kron (s, I)}.
 ## @end ifnottex
 ##  where
 ## @tex
 ## $y$ is a $t \times p$ matrix, $x$ is a $t \times k$ matrix,
 ## $b$ is a $k \times p$ matrix, and $e$ is a $t \times p$ matrix.
 ## @end tex
 ## @ifnottex
-## @math{y} is a @math{t} by @math{p} matrix, @math{x} is a @math{t} by
-## @math{k} matrix, @math{b} is a @math{k} by @math{p} matrix, and
-## @math{e} is a @math{t} by @math{p} matrix.
+## @math{y} is a @math{t} by @math{p} matrix, @math{x} is a @math{t} by @math{k}
+## matrix, @math{b} is a @math{k} by @math{p} matrix, and @math{e} is a
+## @math{t} by @math{p} matrix.
 ## @end ifnottex
 ##
-## Each row of @var{y} and @var{x} is an observation and each column a
-## variable.
+## Each row of @var{y} and @var{x} is an observation and each column a variable.
 ##
 ## The return values @var{beta}, @var{sigma}, and @var{r} are defined as
 ## follows.
 ##
 ## @table @var
 ## @item beta
 ## The OLS estimator for @math{b}.
 ## @tex
diff --git a/scripts/statistics/base/ppplot.m b/scripts/statistics/base/ppplot.m
--- a/scripts/statistics/base/ppplot.m
+++ b/scripts/statistics/base/ppplot.m
@@ -16,36 +16,39 @@
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {[@var{p}, @var{y}] =} ppplot (@var{x}, @var{dist}, @var{params})
 ## Perform a PP-plot (probability plot).
 ##
 ## If F is the CDF of the distribution @var{dist} with parameters
-## @var{params} and @var{x} a sample vector of length @var{n}, the
-## PP-plot graphs ordinate @var{y}(@var{i}) = F (@var{i}-th largest
-## element of @var{x}) versus abscissa @var{p}(@var{i}) = (@var{i} -
-## 0.5)/@var{n}.  If the sample comes from F, the pairs will
-## approximately follow a straight line.
+## @var{params} and @var{x} a sample vector of length @var{n}, the PP-plot
+## graphs ordinate @var{y}(@var{i}) = F (@var{i}-th largest element of
+## @var{x}) versus abscissa @var{p}(@var{i}) = (@var{i} - 0.5)/@var{n}.  If
+## the sample comes from F, the pairs will approximately follow a straight
+## line.
 ##
-## The default for @var{dist} is the standard normal distribution.  The
-## optional argument @var{params} contains a list of parameters of
-## @var{dist}.  For example, for a probability plot of the uniform
-## distribution on [2,4] and @var{x}, use
+## The default for @var{dist} is the standard normal distribution.
+##
+## The optional argument @var{params} contains a list of parameters of
+## @var{dist}.
+##
+## For example, for a probability plot of the uniform distribution on [2,4]
+## and @var{x}, use
 ##
 ## @example
 ## ppplot (x, "uniform", 2, 4)
 ## @end example
 ##
 ## @noindent
-## @var{dist} can be any string for which a function @var{dist_cdf}
-## that calculates the CDF of distribution @var{dist} exists.
+## @var{dist} can be any string for which a function @var{dist_cdf} that
+## calculates the CDF of distribution @var{dist} exists.
 ##
-## If no output arguments are given, the data are plotted directly.
+## If no output is requested then the data are plotted immediately.
 ## @end deftypefn
 
 ## Author: KH <Kurt.Hornik@wu-wien.ac.at>
 ## Description: Perform a PP-plot (probability plot)
 
 function [p, y] = ppplot (x, dist, varargin)
 
   if (nargin < 1)
diff --git a/scripts/statistics/base/prctile.m b/scripts/statistics/base/prctile.m
--- a/scripts/statistics/base/prctile.m
+++ b/scripts/statistics/base/prctile.m
@@ -16,27 +16,29 @@
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {@var{q} =} prctile (@var{x})
 ## @deftypefnx {Function File} {@var{q} =} prctile (@var{x}, @var{p})
 ## @deftypefnx {Function File} {@var{q} =} prctile (@var{x}, @var{p}, @var{dim})
 ## For a sample @var{x}, compute the quantiles, @var{q}, corresponding
-## to the cumulative probability values, @var{p}, in percent.  All non-numeric
-## values (NaNs) of @var{x} are ignored.
+## to the cumulative probability values, @var{p}, in percent.
 ##
-## If @var{x} is a matrix, compute the percentiles for each column and
-## return them in a matrix, such that the i-th row of @var{y} contains the
+## If @var{x} is a matrix, compute the percentiles for each column and return
+## them in a matrix, such that the i-th row of @var{y} contains the
 ## @var{p}(i)th percentiles of each column of @var{x}.
 ##
 ## If @var{p} is unspecified, return the quantiles for @code{[0 25 50 75 100]}.
-## The optional argument @var{dim} determines the dimension along which
-## the percentiles are calculated.  If @var{dim} is omitted it defaults to the
-## the first non-singleton dimension.
+##
+## The optional argument @var{dim} determines the dimension along which the
+## percentiles are calculated.  If @var{dim} is omitted it defaults to the
+## first non-singleton dimension.
+##
+## Programming Note: All non-numeric values (NaNs) of @var{x} are ignored.
 ## @seealso{quantile}
 ## @end deftypefn
 
 ## Author: Ben Abbott <bpabbott@mac.com>
 ## Description: Matlab style prctile function.
 
 function q = prctile (x, p = [], dim)
 
diff --git a/scripts/statistics/base/probit.m b/scripts/statistics/base/probit.m
--- a/scripts/statistics/base/probit.m
+++ b/scripts/statistics/base/probit.m
@@ -13,18 +13,19 @@
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} probit (@var{p})
-## For each component of @var{p}, return the probit (the quantile of the
-## standard normal distribution) of @var{p}.
+## Return the probit (the quantile of the standard normal distribution) for
+## each element of @var{p}.
+## @seealso{logit}
 ## @end deftypefn
 
 ## Written by KH <Kurt.Hornik@wu-wien.ac.at> on 1995/02/04
 ## Description: Probit transformation
 
 function y = probit (p)
 
 
diff --git a/scripts/statistics/base/range.m b/scripts/statistics/base/range.m
--- a/scripts/statistics/base/range.m
+++ b/scripts/statistics/base/range.m
@@ -16,19 +16,21 @@
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {} range (@var{x})
 ## @deftypefnx {Function File} {} range (@var{x}, @var{dim})
 ## Return the range, i.e., the difference between the maximum and the minimum
-## of the input data.  If @var{x} is a vector, the range is calculated over
-## the elements of @var{x}.  If @var{x} is a matrix, the range is calculated
-## over each column of @var{x}.
+## of the input data.
+##
+## If @var{x} is a vector, the range is calculated over the elements of
+## @var{x}.  If @var{x} is a matrix, the range is calculated over each column
+## of @var{x}.
 ##
 ## If the optional argument @var{dim} is given, operate along this dimension.
 ##
 ## The range is a quickly computed measure of the dispersion of a data set, but
 ## is less accurate than @code{iqr} if there are outlying data points.
 ## @seealso{iqr, std}
 ## @end deftypefn
 
diff --git a/scripts/statistics/base/ranks.m b/scripts/statistics/base/ranks.m
--- a/scripts/statistics/base/ranks.m
+++ b/scripts/statistics/base/ranks.m
@@ -14,18 +14,19 @@
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} ranks (@var{x}, @var{dim})
 ## Return the ranks of @var{x} along the first non-singleton dimension
-## adjusted for ties.  If the optional argument @var{dim} is
-## given, operate along this dimension.
+## adjusted for ties.
+##
+## If the optional argument @var{dim} is given, operate along this dimension.
 ## @seealso{spearman, kendall}
 ## @end deftypefn
 
 ## Author: KH <Kurt.Hornik@wu-wien.ac.at>
 ## Description: Compute ranks
 
 ## This code was rather ugly, since it didn't use sort due to the
 ## fact of how to deal with ties. Now it does use sort and its
diff --git a/scripts/statistics/base/run_count.m b/scripts/statistics/base/run_count.m
--- a/scripts/statistics/base/run_count.m
+++ b/scripts/statistics/base/run_count.m
@@ -14,22 +14,22 @@
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {} run_count (@var{x}, @var{n})
 ## @deftypefnx {Function File} {} run_count (@var{x}, @var{n}, @var{dim})
-## Count the upward runs along the first non-singleton dimension of
-## @var{x} of length 1, 2, @dots{}, @var{n}-1 and greater than or equal
-## to @var{n}.
+## Count the upward runs along the first non-singleton dimension of @var{x}
+## of length 1, 2, @dots{}, @var{n}-1 and greater than or equal to @var{n}.
 ##
-## If the optional argument @var{dim} is given then operate
-## along this dimension.
+## If the optional argument @var{dim} is given then operate along this
+## dimension.
+## @seealso{runlength}
 ## @end deftypefn
 
 ## Author: FL <Friedrich.Leisch@ci.tuwien.ac.at>
 ## Description: Count upward runs
 
 function retval = run_count (x, n, dim)
 
   if (nargin != 2 && nargin != 3)
diff --git a/scripts/statistics/base/runlength.m b/scripts/statistics/base/runlength.m
--- a/scripts/statistics/base/runlength.m
+++ b/scripts/statistics/base/runlength.m
@@ -12,26 +12,32 @@
 ## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
-## @deftypefn {Function File} {[count, value] =} runlength (@var{x})
-## Find the lengths of all sequences of common values.  Return the
-## vector of lengths and the value that was repeated.
+## @deftypefn  {Function File} {count =} runlength (@var{x})
+## @deftypefnx {Function File} {[count, value] =} runlength (@var{x})
+## Find the lengths of all sequences of common values.
+##
+## @var{count} is a vector with the lengths of each repeated value.
+##
+## The optional output @var{value} contains the value that was repeated in
+## the sequence.
 ##
 ## @example
 ## @group
 ## runlength ([2, 2, 0, 4, 4, 4, 0, 1, 1, 1, 1])
 ## @result{}  [2, 1, 3, 1, 4]
 ## @end group
 ## @end example
+## @seealso{run_count}
 ## @end deftypefn
 
 function [count, value] = runlength (x)
 
   if (nargin != 1)
     print_usage ();
   endif
 
diff --git a/scripts/statistics/base/skewness.m b/scripts/statistics/base/skewness.m
--- a/scripts/statistics/base/skewness.m
+++ b/scripts/statistics/base/skewness.m
@@ -16,17 +16,19 @@
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {} skewness (@var{x})
 ## @deftypefnx {Function File} {} skewness (@var{x}, @var{flag})
 ## @deftypefnx {Function File} {} skewness (@var{x}, @var{flag}, @var{dim})
-## Compute the sample skewness of the elements of @var{x}:
+## Compute the sample skewness of the elements of @var{x}.
+##
+## The sample skewness is defined as
 ## @tex
 ## $$
 ## {\rm skewness} (@var{x}) = {{{1\over N}\,
 ##          \sum_{i=1}^N (@var{x}_i - \bar{@var{x}})^3} \over \sigma^3},
 ## $$
 ## where $N$ is the length of @var{x}, $\bar{@var{x}}$ its mean and $\sigma$
 ## its (uncorrected) standard deviation.
 ## @end tex
diff --git a/scripts/statistics/base/spearman.m b/scripts/statistics/base/spearman.m
--- a/scripts/statistics/base/spearman.m
+++ b/scripts/statistics/base/spearman.m
@@ -20,22 +20,22 @@
 ## @deftypefn  {Function File} {} spearman (@var{x})
 ## @deftypefnx {Function File} {} spearman (@var{x}, @var{y})
 ## @cindex Spearman's Rho
 ## Compute Spearman's rank correlation coefficient @var{rho}.
 ##
 ## For two data vectors @var{x} and @var{y}, Spearman's @var{rho} is the
 ## correlation coefficient of the ranks of @var{x} and @var{y}.
 ##
-## If @var{x} and @var{y} are drawn from independent distributions,
-## @var{rho} has zero mean and variance @code{1 / (n - 1)}, and is
-## asymptotically normally distributed.
+## If @var{x} and @var{y} are drawn from independent distributions, @var{rho}
+## has zero mean and variance @code{1 / (n - 1)}, and is asymptotically
+## normally distributed.
 ##
-## @code{spearman (@var{x})} is equivalent to @code{spearman (@var{x},
-## @var{x})}.
+## @code{spearman (@var{x})} is equivalent to
+## @code{spearman (@var{x}, @var{x})}.
 ## @seealso{ranks, kendall}
 ## @end deftypefn
 
 ## Author: KH <Kurt.Hornik@wu-wien.ac.at>
 ## Description: Spearman's rank correlation rho
 
 function rho = spearman (x, y = [])
 
diff --git a/scripts/statistics/base/statistics.m b/scripts/statistics/base/statistics.m
--- a/scripts/statistics/base/statistics.m
+++ b/scripts/statistics/base/statistics.m
@@ -18,18 +18,19 @@
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {} statistics (@var{x})
 ## @deftypefnx {Function File} {} statistics (@var{x}, @var{dim})
 ## Return a vector with the minimum, first quartile, median, third quartile,
 ## maximum, mean, standard deviation, skewness, and kurtosis of the elements of
 ## the vector @var{x}.
 ##
-## If @var{x} is a matrix, calculate statistics over the first
-## non-singleton dimension.
+## If @var{x} is a matrix, calculate statistics over the first non-singleton
+## dimension.
+##
 ## If the optional argument @var{dim} is given, operate along this dimension.
 ## @seealso{min, max, median, mean, std, skewness, kurtosis}
 ## @end deftypefn
 
 ## Author: KH <Kurt.Hornik@wu-wien.ac.at>
 ## Description: Compute basic statistics
 
 function stats = statistics (x, dim)
diff --git a/scripts/statistics/base/std.m b/scripts/statistics/base/std.m
--- a/scripts/statistics/base/std.m
+++ b/scripts/statistics/base/std.m
@@ -16,16 +16,18 @@
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {} std (@var{x})
 ## @deftypefnx {Function File} {} std (@var{x}, @var{opt})
 ## @deftypefnx {Function File} {} std (@var{x}, @var{opt}, @var{dim})
 ## Compute the standard deviation of the elements of the vector @var{x}.
+##
+## The standard deviation is defined as
 ## @tex
 ## $$
 ## {\rm std} (x) = \sigma = \sqrt{{\sum_{i=1}^N (x_i - \bar{x})^2 \over N - 1}}
 ## $$
 ## where $\bar{x}$ is the mean value of $x$ and $N$ is the number of elements.
 ## @end tex
 ## @ifnottex
 ##
@@ -34,18 +36,18 @@
 ## std (x) = sqrt ( 1/(N-1) SUM_i (x(i) - mean(x))^2 )
 ## @end group
 ## @end example
 ##
 ## @noindent
 ## where @math{N} is the number of elements.
 ## @end ifnottex
 ##
-## If @var{x} is a matrix, compute the standard deviation for
-## each column and return them in a row vector.
+## If @var{x} is a matrix, compute the standard deviation for each column and
+## return them in a row vector.
 ##
 ## The argument @var{opt} determines the type of normalization to use.
 ## Valid values are
 ##
 ## @table @asis
 ## @item 0:
 ##   normalize with @math{N-1}, provides the square root of the best unbiased
 ## estimator of the variance [default]
diff --git a/scripts/statistics/base/table.m b/scripts/statistics/base/table.m
--- a/scripts/statistics/base/table.m
+++ b/scripts/statistics/base/table.m
@@ -14,18 +14,19 @@
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {[@var{t}, @var{l_x}] =} table (@var{x})
 ## @deftypefnx {Function File} {[@var{t}, @var{l_x}, @var{l_y}] =} table (@var{x}, @var{y})
-## Create a contingency table @var{t} from data vectors.  The @var{l_x} and
-## @var{l_y} vectors are the corresponding levels.
+## Create a contingency table @var{t} from data vectors.
+##
+## The @var{l_x} and @var{l_y} vectors are the corresponding levels.
 ##
 ## Currently, only 1- and 2-dimensional tables are supported.
 ## @end deftypefn
 
 ## Author: KH <Kurt.Hornik@wu-wien.ac.at>
 ## Description: Cross tabulation
 
 function [t, v, w] = table (x, y)
diff --git a/scripts/statistics/base/var.m b/scripts/statistics/base/var.m
--- a/scripts/statistics/base/var.m
+++ b/scripts/statistics/base/var.m
@@ -16,48 +16,50 @@
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {} var (@var{x})
 ## @deftypefnx {Function File} {} var (@var{x}, @var{opt})
 ## @deftypefnx {Function File} {} var (@var{x}, @var{opt}, @var{dim})
 ## Compute the variance of the elements of the vector @var{x}.
+##
+## The variance is defined as
 ## @tex
 ## $$
 ## {\rm var} (x) = \sigma^2 = {\sum_{i=1}^N (x_i - \bar{x})^2 \over N - 1}
 ## $$
 ## where $\bar{x}$ is the mean value of $x$.
 ## @end tex
 ## @ifnottex
 ##
 ## @example
 ## @group
 ## var (x) = 1/(N-1) SUM_i (x(i) - mean(x))^2
 ## @end group
 ## @end example
 ##
 ## @end ifnottex
-## If @var{x} is a matrix, compute the variance for each column
-## and return them in a row vector.
+## If @var{x} is a matrix, compute the variance for each column and return
+## them in a row vector.
 ##
 ## The argument @var{opt} determines the type of normalization to use.
 ## Valid values are
 ##
 ## @table @asis
 ## @item 0:
 ##   normalize with @math{N-1}, provides the best unbiased estimator of the
 ## variance [default]
 ##
 ## @item 1:
 ##   normalizes with @math{N}, this provides the second moment around the mean
 ## @end table
 ##
-## If @math{N==1} the value of @var{opt} is ignored and normalization
-## by @math{N} is used.
+## If @math{N==1} the value of @var{opt} is ignored and normalization by
+## @math{N} is used.
 ##
 ## If the optional argument @var{dim} is given, operate along this dimension.
 ## @seealso{cov, std, skewness, kurtosis, moment}
 ## @end deftypefn
 
 ## Author: KH <Kurt.Hornik@wu-wien.ac.at>
 ## Description: Compute variance
 
diff --git a/scripts/statistics/base/zscore.m b/scripts/statistics/base/zscore.m
--- a/scripts/statistics/base/zscore.m
+++ b/scripts/statistics/base/zscore.m
@@ -12,31 +12,35 @@
 ## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
-## @deftypefn  {Function File} {[@var{z}, @var{mu}, @var{sigma}] =} zscore (@var{x})
-## @deftypefnx {Function File} {[@var{z}, @var{mu}, @var{sigma}] =} zscore (@var{x}, @var{opt})
-## @deftypefnx {Function File} {[@var{z}, @var{mu}, @var{sigma}] =} zscore (@var{x}, @var{opt}, @var{dim})
+## @deftypefn  {Function File} {@var{z} =} zscore (@var{x})
+## @deftypefnx {Function File} {@var{z} =} zscore (@var{x}, @var{opt})
+## @deftypefnx {Function File} {@var{z} =} zscore (@var{x}, @var{opt}, @var{dim})
+## @deftypefnx {Function File} {[@var{z}, @var{mu}, @var{sigma}] =} zscore (@dots{})
+## Compute the Z score of @var{x}
+##
 ## If @var{x} is a vector, subtract its mean and divide by its standard
 ## deviation.  If the standard deviation is zero, divide by 1 instead.
-## The optional parameter @var{opt} determines the normalization to use
-## when computing the standard deviation and is the same as the
+##
+## The optional parameter @var{opt} determines the normalization to use when
+## computing the standard deviation and has the same definition as the
 ## corresponding parameter for @code{std}.
 ##
-## If @var{x} is a matrix, do the above along the first non-singleton
-## dimension.  If the third optional argument @var{dim} is given, operate
-## along this dimension.
+## If @var{x} is a matrix, calculate along the first non-singleton dimension.
+## If the third optional argument @var{dim} is given, operate along this
+## dimension.
 ##
-## The mean and standard deviation along @var{dim} are given in @var{mu}
-## and @var{sigma} respectively.
+## The optional outputs @var{mu} and @var{sigma} contain the mean and standard
+## deviation.
 ##
 ## @seealso{mean, std, center}
 ## @end deftypefn
 
 ## Author: KH <Kurt.Hornik@wu-wien.ac.at>
 ## Description: Subtract mean and divide by standard deviation
 
 function [z, mu, sigma] = zscore (x, opt, dim)
diff --git a/scripts/statistics/distributions/betainv.m b/scripts/statistics/distributions/betainv.m
--- a/scripts/statistics/distributions/betainv.m
+++ b/scripts/statistics/distributions/betainv.m
@@ -14,19 +14,18 @@
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} betainv (@var{x}, @var{a}, @var{b})
-## For each element of @var{x}, compute the quantile (the inverse of
-## the CDF) at @var{x} of the Beta distribution with parameters @var{a}
-## and @var{b}.
+## For each element of @var{x}, compute the quantile (the inverse of the CDF)
+## at @var{x} of the Beta distribution with parameters @var{a} and @var{b}.
 ## @end deftypefn
 
 ## Author: KH <Kurt.Hornik@wu-wien.ac.at>
 ## Description: Quantile function of the Beta distribution
 
 function inv = betainv (x, a, b)
 
   if (nargin != 3)
diff --git a/scripts/statistics/distributions/binoinv.m b/scripts/statistics/distributions/binoinv.m
--- a/scripts/statistics/distributions/binoinv.m
+++ b/scripts/statistics/distributions/binoinv.m
@@ -14,18 +14,18 @@
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} binoinv (@var{x}, @var{n}, @var{p})
-## For each element of @var{x}, compute the quantile (the inverse of
-## the CDF) at @var{x} of the binomial distribution with parameters
+## For each element of @var{x}, compute the quantile (the inverse of the CDF)
+## at @var{x} of the binomial distribution with parameters
 ## @var{n} and @var{p}, where @var{n} is the number of trials and
 ## @var{p} is the probability of success.
 ## @end deftypefn
 
 ## Author: KH <Kurt.Hornik@wu-wien.ac.at>
 ## Description: Quantile function of the binomial distribution
 
 function inv = binoinv (x, n, p)
diff --git a/scripts/statistics/distributions/binopdf.m b/scripts/statistics/distributions/binopdf.m
--- a/scripts/statistics/distributions/binopdf.m
+++ b/scripts/statistics/distributions/binopdf.m
@@ -14,20 +14,20 @@
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} binopdf (@var{x}, @var{n}, @var{p})
-## For each element of @var{x}, compute the probability density function
-## (PDF) at @var{x} of the binomial distribution with parameters @var{n}
-## and @var{p}, where @var{n} is the number of trials and @var{p} is the
-## probability of success.
+## For each element of @var{x}, compute the probability density function (PDF)
+## at @var{x} of the binomial distribution with parameters @var{n} and @var{p},
+## where @var{n} is the number of trials and @var{p} is the probability of
+## success.
 ## @end deftypefn
 
 ## Author: KH <Kurt.Hornik@wu-wien.ac.at>
 ## Description: PDF of the binomial distribution
 
 function pdf = binopdf (x, n, p)
 
   if (nargin != 3)
diff --git a/scripts/statistics/distributions/cauchy_cdf.m b/scripts/statistics/distributions/cauchy_cdf.m
--- a/scripts/statistics/distributions/cauchy_cdf.m
+++ b/scripts/statistics/distributions/cauchy_cdf.m
@@ -15,20 +15,21 @@
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {} cauchy_cdf (@var{x})
 ## @deftypefnx {Function File} {} cauchy_cdf (@var{x}, @var{location}, @var{scale})
-## For each element of @var{x}, compute the cumulative distribution
-## function (CDF) at @var{x} of the Cauchy distribution with location
-## parameter @var{location} and scale parameter @var{scale}.  Default
-## values are @var{location} = 0, @var{scale} = 1.
+## For each element of @var{x}, compute the cumulative distribution function
+## (CDF) at @var{x} of the Cauchy distribution with location parameter
+## @var{location} and scale parameter @var{scale}.
+##
+## Default values are @var{location} = 0, @var{scale} = 1.
 ## @end deftypefn
 
 ## Author: KH <Kurt.Hornik@wu-wien.ac.at>
 ## Description: CDF of the Cauchy distribution
 
 function cdf = cauchy_cdf (x, location = 0, scale = 1)
 
   if (nargin != 1 && nargin != 3)
diff --git a/scripts/statistics/distributions/cauchy_inv.m b/scripts/statistics/distributions/cauchy_inv.m
--- a/scripts/statistics/distributions/cauchy_inv.m
+++ b/scripts/statistics/distributions/cauchy_inv.m
@@ -15,20 +15,21 @@
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {} cauchy_inv (@var{x})
 ## @deftypefnx {Function File} {} cauchy_inv (@var{x}, @var{location}, @var{scale})
-## For each element of @var{x}, compute the quantile (the inverse of the
-## CDF) at @var{x} of the Cauchy distribution with location parameter
-## @var{location} and scale parameter @var{scale}.  Default values are
-## @var{location} = 0, @var{scale} = 1.
+## For each element of @var{x}, compute the quantile (the inverse of the CDF)
+## at @var{x} of the Cauchy distribution with location parameter
+## @var{location} and scale parameter @var{scale}.
+##
+## Default values are @var{location} = 0, @var{scale} = 1.
 ## @end deftypefn
 
 ## Author: KH <Kurt.Hornik@wu-wien.ac.at>
 ## Description: Quantile function of the Cauchy distribution
 
 function inv = cauchy_inv (x, location = 0, scale = 1)
 
   if (nargin != 1 && nargin != 3)
diff --git a/scripts/statistics/distributions/cauchy_pdf.m b/scripts/statistics/distributions/cauchy_pdf.m
--- a/scripts/statistics/distributions/cauchy_pdf.m
+++ b/scripts/statistics/distributions/cauchy_pdf.m
@@ -15,20 +15,21 @@
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {} cauchy_pdf (@var{x})
 ## @deftypefnx {Function File} {} cauchy_pdf (@var{x}, @var{location}, @var{scale})
-## For each element of @var{x}, compute the probability density function
-## (PDF) at @var{x} of the Cauchy distribution with location parameter
-## @var{location} and scale parameter @var{scale} > 0.  Default values are
-## @var{location} = 0, @var{scale} = 1.
+## For each element of @var{x}, compute the probability density function (PDF)
+## at @var{x} of the Cauchy distribution with location parameter
+## @var{location} and scale parameter @var{scale} > 0.
+##
+## Default values are @var{location} = 0, @var{scale} = 1.
 ## @end deftypefn
 
 ## Author: KH <Kurt.Hornik@wu-wien.ac.at>
 ## Description: PDF of the Cauchy distribution
 
 function pdf = cauchy_pdf (x, location = 0, scale = 1)
 
   if (nargin != 1 && nargin != 3)
diff --git a/scripts/statistics/distributions/chi2cdf.m b/scripts/statistics/distributions/chi2cdf.m
--- a/scripts/statistics/distributions/chi2cdf.m
+++ b/scripts/statistics/distributions/chi2cdf.m
@@ -14,19 +14,19 @@
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} chi2cdf (@var{x}, @var{n})
-## For each element of @var{x}, compute the cumulative distribution
-## function (CDF) at @var{x} of the chi-square distribution with @var{n}
-## degrees of freedom.
+## For each element of @var{x}, compute the cumulative distribution function
+## (CDF) at @var{x} of the chi-square distribution with @var{n} degrees of
+## freedom.
 ## @end deftypefn
 
 ## Author: TT <Teresa.Twaroch@ci.tuwien.ac.at>
 ## Description: CDF of the chi-square distribution
 
 function cdf = chi2cdf (x, n)
 
   if (nargin != 2)
diff --git a/scripts/statistics/distributions/chi2inv.m b/scripts/statistics/distributions/chi2inv.m
--- a/scripts/statistics/distributions/chi2inv.m
+++ b/scripts/statistics/distributions/chi2inv.m
@@ -14,19 +14,18 @@
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} chi2inv (@var{x}, @var{n})
-## For each element of @var{x}, compute the quantile (the inverse of the
-## CDF) at @var{x} of the chi-square distribution with @var{n} degrees of
-## freedom.
+## For each element of @var{x}, compute the quantile (the inverse of the CDF)
+## at @var{x} of the chi-square distribution with @var{n} degrees of freedom.
 ## @end deftypefn
 
 ## Author: TT <Teresa.Twaroch@ci.tuwien.ac.at>
 ## Description: Quantile function of the chi-square distribution
 
 function inv = chi2inv (x, n)
 
   if (nargin != 2)
diff --git a/scripts/statistics/distributions/chi2pdf.m b/scripts/statistics/distributions/chi2pdf.m
--- a/scripts/statistics/distributions/chi2pdf.m
+++ b/scripts/statistics/distributions/chi2pdf.m
@@ -14,19 +14,18 @@
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} chi2pdf (@var{x}, @var{n})
-## For each element of @var{x}, compute the probability density function
-## (PDF) at @var{x} of the chi-square distribution with @var{n} degrees
-## of freedom.
+## For each element of @var{x}, compute the probability density function (PDF)
+## at @var{x} of the chi-square distribution with @var{n} degrees of freedom.
 ## @end deftypefn
 
 ## Author: TT <Teresa.Twaroch@ci.tuwien.ac.at>
 ## Description: PDF of the chi-square distribution
 
 function pdf = chi2pdf (x, n)
 
   if (nargin != 2)
diff --git a/scripts/statistics/distributions/discrete_cdf.m b/scripts/statistics/distributions/discrete_cdf.m
--- a/scripts/statistics/distributions/discrete_cdf.m
+++ b/scripts/statistics/distributions/discrete_cdf.m
@@ -14,19 +14,19 @@
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} discrete_cdf (@var{x}, @var{v}, @var{p})
-## For each element of @var{x}, compute the cumulative distribution
-## function (CDF) at @var{x} of a univariate discrete distribution which
-## assumes the values in @var{v} with probabilities @var{p}.
+## For each element of @var{x}, compute the cumulative distribution function
+## (CDF) at @var{x} of a univariate discrete distribution which assumes the
+## values in @var{v} with probabilities @var{p}.
 ## @end deftypefn
 
 function cdf = discrete_cdf (x, v, p)
 
   if (nargin != 3)
     print_usage ();
   endif
 
diff --git a/scripts/statistics/distributions/discrete_inv.m b/scripts/statistics/distributions/discrete_inv.m
--- a/scripts/statistics/distributions/discrete_inv.m
+++ b/scripts/statistics/distributions/discrete_inv.m
@@ -14,19 +14,19 @@
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} discrete_inv (@var{x}, @var{v}, @var{p})
-## For each element of @var{x}, compute the quantile (the inverse of
-## the CDF) at @var{x} of the univariate distribution which assumes the
-## values in @var{v} with probabilities @var{p}.
+## For each element of @var{x}, compute the quantile (the inverse of the CDF)
+## at @var{x} of the univariate distribution which assumes the values in
+## @var{v} with probabilities @var{p}.
 ## @end deftypefn
 
 ## Author: KH <Kurt.Hornik@wu-wien.ac.at>
 ## Description: Quantile function of a discrete distribution
 
 function inv = discrete_inv (x, v, p)
 
   if (nargin != 3)
diff --git a/scripts/statistics/distributions/discrete_pdf.m b/scripts/statistics/distributions/discrete_pdf.m
--- a/scripts/statistics/distributions/discrete_pdf.m
+++ b/scripts/statistics/distributions/discrete_pdf.m
@@ -14,19 +14,19 @@
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} discrete_pdf (@var{x}, @var{v}, @var{p})
-## For each element of @var{x}, compute the probability density function
-## (PDF) at @var{x} of a univariate discrete distribution which assumes
-## the values in @var{v} with probabilities @var{p}.
+## For each element of @var{x}, compute the probability density function (PDF)
+## at @var{x} of a univariate discrete distribution which assumes the values
+## in @var{v} with probabilities @var{p}.
 ## @end deftypefn
 
 ## Author: KH <Kurt.Hornik@wu-wien.ac.at>
 ## Description: PDF of a discrete distribution
 
 function pdf = discrete_pdf (x, v, p)
 
   if (nargin != 3)
diff --git a/scripts/statistics/distributions/empirical_cdf.m b/scripts/statistics/distributions/empirical_cdf.m
--- a/scripts/statistics/distributions/empirical_cdf.m
+++ b/scripts/statistics/distributions/empirical_cdf.m
@@ -14,18 +14,18 @@
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} empirical_cdf (@var{x}, @var{data})
-## For each element of @var{x}, compute the cumulative distribution
-## function (CDF) at @var{x} of the empirical distribution obtained from
+## For each element of @var{x}, compute the cumulative distribution function
+## (CDF) at @var{x} of the empirical distribution obtained from
 ## the univariate sample @var{data}.
 ## @end deftypefn
 
 ## Author: KH <Kurt.Hornik@wu-wien.ac.at>
 ## Description: CDF of the empirical distribution
 
 function cdf = empirical_cdf (x, data)
 
diff --git a/scripts/statistics/distributions/empirical_inv.m b/scripts/statistics/distributions/empirical_inv.m
--- a/scripts/statistics/distributions/empirical_inv.m
+++ b/scripts/statistics/distributions/empirical_inv.m
@@ -14,18 +14,18 @@
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} empirical_inv (@var{x}, @var{data})
-## For each element of @var{x}, compute the quantile (the inverse of the
-## CDF) at @var{x} of the empirical distribution obtained from the
+## For each element of @var{x}, compute the quantile (the inverse of the CDF)
+## at @var{x} of the empirical distribution obtained from the
 ## univariate sample @var{data}.
 ## @end deftypefn
 
 ## Author: KH <Kurt.Hornik@wu-wien.ac.at>
 ## Description: Quantile function of the empirical distribution
 
 function inv = empirical_inv (x, data)
 
diff --git a/scripts/statistics/distributions/empirical_pdf.m b/scripts/statistics/distributions/empirical_pdf.m
--- a/scripts/statistics/distributions/empirical_pdf.m
+++ b/scripts/statistics/distributions/empirical_pdf.m
@@ -14,18 +14,18 @@
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} empirical_pdf (@var{x}, @var{data})
-## For each element of @var{x}, compute the probability density function
-## (PDF) at @var{x} of the empirical distribution obtained from the
+## For each element of @var{x}, compute the probability density function (PDF)
+## at @var{x} of the empirical distribution obtained from the
 ## univariate sample @var{data}.
 ## @end deftypefn
 
 ## Author: KH <Kurt.Hornik@wu-wien.ac.at>
 ## Description: PDF of the empirical distribution
 
 function pdf = empirical_pdf (x, data)
 
diff --git a/scripts/statistics/distributions/expcdf.m b/scripts/statistics/distributions/expcdf.m
--- a/scripts/statistics/distributions/expcdf.m
+++ b/scripts/statistics/distributions/expcdf.m
@@ -14,19 +14,18 @@
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} expcdf (@var{x}, @var{lambda})
-## For each element of @var{x}, compute the cumulative distribution
-## function (CDF) at @var{x} of the exponential distribution with
-## mean @var{lambda}.
+## For each element of @var{x}, compute the cumulative distribution function
+## (CDF) at @var{x} of the exponential distribution with mean @var{lambda}.
 ##
 ## The arguments can be of common size or scalars.
 ## @end deftypefn
 
 ## Author: KH <Kurt.Hornik@wu-wien.ac.at>
 ## Description: CDF of the exponential distribution
 
 function cdf = expcdf (x, lambda)
diff --git a/scripts/statistics/distributions/expinv.m b/scripts/statistics/distributions/expinv.m
--- a/scripts/statistics/distributions/expinv.m
+++ b/scripts/statistics/distributions/expinv.m
@@ -14,18 +14,18 @@
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} expinv (@var{x}, @var{lambda})
-## For each element of @var{x}, compute the quantile (the inverse of the
-## CDF) at @var{x} of the exponential distribution with mean @var{lambda}.
+## For each element of @var{x}, compute the quantile (the inverse of the CDF)
+## at @var{x} of the exponential distribution with mean @var{lambda}.
 ## @end deftypefn
 
 ## Author: KH <Kurt.Hornik@wu-wien.ac.at>
 ## Description: Quantile function of the exponential distribution
 
 function inv = expinv (x, lambda)
 
   if (nargin != 2)
diff --git a/scripts/statistics/distributions/exppdf.m b/scripts/statistics/distributions/exppdf.m
--- a/scripts/statistics/distributions/exppdf.m
+++ b/scripts/statistics/distributions/exppdf.m
@@ -14,18 +14,18 @@
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} exppdf (@var{x}, @var{lambda})
-## For each element of @var{x}, compute the probability density function
-## (PDF) at @var{x} of the exponential distribution with mean @var{lambda}.
+## For each element of @var{x}, compute the probability density function (PDF)
+## at @var{x} of the exponential distribution with mean @var{lambda}.
 ## @end deftypefn
 
 ## Author: KH <Kurt.Hornik@wu-wien.ac.at>
 ## Description: PDF of the exponential distribution
 
 function pdf = exppdf (x, lambda)
 
   if (nargin != 2)
diff --git a/scripts/statistics/distributions/finv.m b/scripts/statistics/distributions/finv.m
--- a/scripts/statistics/distributions/finv.m
+++ b/scripts/statistics/distributions/finv.m
@@ -14,19 +14,18 @@
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} finv (@var{x}, @var{m}, @var{n})
-## For each element of @var{x}, compute the quantile (the inverse of
-## the CDF) at @var{x} of the F distribution with @var{m} and @var{n}
-## degrees of freedom.
+## For each element of @var{x}, compute the quantile (the inverse of the CDF)
+## at @var{x} of the F distribution with @var{m} and @var{n} degrees of freedom.
 ## @end deftypefn
 
 ## Author: KH <Kurt.Hornik@wu-wien.ac.at>
 ## Description: Quantile function of the F distribution
 
 function inv = finv (x, m, n)
 
   if (nargin != 3)
diff --git a/scripts/statistics/distributions/fpdf.m b/scripts/statistics/distributions/fpdf.m
--- a/scripts/statistics/distributions/fpdf.m
+++ b/scripts/statistics/distributions/fpdf.m
@@ -14,19 +14,18 @@
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} fpdf (@var{x}, @var{m}, @var{n})
-## For each element of @var{x}, compute the probability density function
-## (PDF) at @var{x} of the F distribution with @var{m} and @var{n}
-## degrees of freedom.
+## For each element of @var{x}, compute the probability density function (PDF)
+## at @var{x} of the F distribution with @var{m} and @var{n} degrees of freedom.
 ## @end deftypefn
 
 ## Author: KH <Kurt.Hornik@wu-wien.ac.at>
 ## Description: PDF of the F distribution
 
 function pdf = fpdf (x, m, n)
 
   if (nargin != 3)
diff --git a/scripts/statistics/distributions/gamcdf.m b/scripts/statistics/distributions/gamcdf.m
--- a/scripts/statistics/distributions/gamcdf.m
+++ b/scripts/statistics/distributions/gamcdf.m
@@ -14,19 +14,19 @@
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} gamcdf (@var{x}, @var{a}, @var{b})
-## For each element of @var{x}, compute the cumulative distribution
-## function (CDF) at @var{x} of the Gamma distribution with shape
-## parameter @var{a} and scale @var{b}.
+## For each element of @var{x}, compute the cumulative distribution function
+## (CDF) at @var{x} of the Gamma distribution with shape parameter @var{a} and
+## scale @var{b}.
 ## @end deftypefn
 
 ## Author: TT <Teresa.Twaroch@ci.tuwien.ac.at>
 ## Description: CDF of the Gamma distribution
 
 function cdf = gamcdf (x, a, b)
 
   if (nargin != 3)
diff --git a/scripts/statistics/distributions/gaminv.m b/scripts/statistics/distributions/gaminv.m
--- a/scripts/statistics/distributions/gaminv.m
+++ b/scripts/statistics/distributions/gaminv.m
@@ -14,19 +14,19 @@
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} gaminv (@var{x}, @var{a}, @var{b})
-## For each element of @var{x}, compute the quantile (the inverse of
-## the CDF) at @var{x} of the Gamma distribution with shape parameter
-## @var{a} and scale @var{b}.
+## For each element of @var{x}, compute the quantile (the inverse of the CDF)
+## at @var{x} of the Gamma distribution with shape parameter @var{a} and
+## scale @var{b}.
 ## @end deftypefn
 
 ## Author: KH <Kurt.Hornik@wu-wien.ac.at>
 ## Description: Quantile function of the Gamma distribution
 
 function inv = gaminv (x, a, b)
 
   if (nargin != 3)
diff --git a/scripts/statistics/distributions/gampdf.m b/scripts/statistics/distributions/gampdf.m
--- a/scripts/statistics/distributions/gampdf.m
+++ b/scripts/statistics/distributions/gampdf.m
@@ -15,18 +15,18 @@
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} gampdf (@var{x}, @var{a}, @var{b})
 ## For each element of @var{x}, return the probability density function
-## (PDF) at @var{x} of the Gamma distribution with shape parameter
-## @var{a} and scale @var{b}.
+## (PDF) at @var{x} of the Gamma distribution with shape parameter @var{a} and
+## scale @var{b}.
 ## @end deftypefn
 
 ## Author: TT <Teresa.Twaroch@ci.tuwien.ac.at>
 ## Description: PDF of the Gamma distribution
 
 function pdf = gampdf (x, a, b)
 
   if (nargin != 3)
diff --git a/scripts/statistics/distributions/geoinv.m b/scripts/statistics/distributions/geoinv.m
--- a/scripts/statistics/distributions/geoinv.m
+++ b/scripts/statistics/distributions/geoinv.m
@@ -14,18 +14,18 @@
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} geoinv (@var{x}, @var{p})
-## For each element of @var{x}, compute the quantile (the inverse of
-## the CDF) at @var{x} of the geometric distribution with parameter @var{p}.
+## For each element of @var{x}, compute the quantile (the inverse of the CDF)
+## at @var{x} of the geometric distribution with parameter @var{p}.
 ##
 ## The geometric distribution models the number of failures (@var{x}-1) of a
 ## Bernoulli trial with probability @var{p} before the first success (@var{x}).
 ## @end deftypefn
 
 ## Author: KH <Kurt.Hornik@wu-wien.ac.at>
 ## Description: Quantile function of the geometric distribution
 
diff --git a/scripts/statistics/distributions/geopdf.m b/scripts/statistics/distributions/geopdf.m
--- a/scripts/statistics/distributions/geopdf.m
+++ b/scripts/statistics/distributions/geopdf.m
@@ -14,18 +14,18 @@
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} geopdf (@var{x}, @var{p})
-## For each element of @var{x}, compute the probability density function
-## (PDF) at @var{x} of the geometric distribution with parameter @var{p}.
+## For each element of @var{x}, compute the probability density function (PDF)
+## at @var{x} of the geometric distribution with parameter @var{p}.
 ##
 ## The geometric distribution models the number of failures (@var{x}-1) of a
 ## Bernoulli trial with probability @var{p} before the first success (@var{x}).
 ## @end deftypefn
 
 ## Author: KH <Kurt.Hornik@wu-wien.ac.at>
 ## Description: PDF of the geometric distribution
 
diff --git a/scripts/statistics/distributions/hygecdf.m b/scripts/statistics/distributions/hygecdf.m
--- a/scripts/statistics/distributions/hygecdf.m
+++ b/scripts/statistics/distributions/hygecdf.m
@@ -15,21 +15,21 @@
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} hygecdf (@var{x}, @var{t}, @var{m}, @var{n})
 ## Compute the cumulative distribution function (CDF) at @var{x} of the
-## hypergeometric distribution with parameters @var{t}, @var{m}, and
-## @var{n}.  This is the probability of obtaining not more than @var{x}
-## marked items when randomly drawing a sample of size @var{n} without
-## replacement from a population of total size @var{t} containing
-## @var{m} marked items.
+## hypergeometric distribution with parameters @var{t}, @var{m}, and @var{n}.
+##
+## This is the probability of obtaining not more than @var{x} marked items
+## when randomly drawing a sample of size @var{n} without replacement from a
+## population of total size @var{t} containing @var{m} marked items.
 ##
 ## The parameters @var{t}, @var{m}, and @var{n} must be positive integers
 ## with @var{m} and @var{n} not greater than @var{t}.
 ## @end deftypefn
 
 ## Author: KH <Kurt.Hornik@wu-wien.ac.at>
 ## Description: CDF of the hypergeometric distribution
 
diff --git a/scripts/statistics/distributions/hygeinv.m b/scripts/statistics/distributions/hygeinv.m
--- a/scripts/statistics/distributions/hygeinv.m
+++ b/scripts/statistics/distributions/hygeinv.m
@@ -14,22 +14,23 @@
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} hygeinv (@var{x}, @var{t}, @var{m}, @var{n})
-## For each element of @var{x}, compute the quantile (the inverse of
-## the CDF) at @var{x} of the hypergeometric distribution with parameters
-## @var{t}, @var{m}, and @var{n}.  This is the probability of obtaining @var{x}
-## marked items when randomly drawing a sample of size @var{n} without
-## replacement from a population of total size @var{t} containing @var{m}
-## marked items.
+## For each element of @var{x}, compute the quantile (the inverse of the CDF)
+## at @var{x} of the hypergeometric distribution with parameters
+## @var{t}, @var{m}, and @var{n}.
+##
+## This is the probability of obtaining @var{x} marked items when randomly
+## drawing a sample of size @var{n} without replacement from a population of
+## total size @var{t} containing @var{m} marked items.
 ##
 ## The parameters @var{t}, @var{m}, and @var{n} must be positive integers
 ## with @var{m} and @var{n} not greater than @var{t}.
 ## @end deftypefn
 
 ## Author: KH <Kurt.Hornik@wu-wien.ac.at>
 ## Description: Random deviates from the hypergeometric distribution
 
diff --git a/scripts/statistics/distributions/hygepdf.m b/scripts/statistics/distributions/hygepdf.m
--- a/scripts/statistics/distributions/hygepdf.m
+++ b/scripts/statistics/distributions/hygepdf.m
@@ -15,20 +15,21 @@
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} hygepdf (@var{x}, @var{t}, @var{m}, @var{n})
 ## Compute the probability density function (PDF) at @var{x} of the
-## hypergeometric distribution with parameters @var{t}, @var{m}, and
-## @var{n}.  This is the probability of obtaining @var{x} marked items
-## when randomly drawing a sample of size @var{n} without replacement
-## from a population of total size @var{t} containing @var{m} marked items.
+## hypergeometric distribution with parameters @var{t}, @var{m}, and @var{n}.
+##
+## This is the probability of obtaining @var{x} marked items when randomly
+## drawing a sample of size @var{n} without replacement from a population of
+## total size @var{t} containing @var{m} marked items.
 ##
 ## The parameters @var{t}, @var{m}, and @var{n} must be positive integers
 ## with @var{m} and @var{n} not greater than @var{t}.
 ## @end deftypefn
 
 ## Author: KH <Kurt.Hornik@wu-wien.ac.at>
 ## Description: PDF of the hypergeometric distribution
 
diff --git a/scripts/statistics/distributions/kolmogorov_smirnov_cdf.m b/scripts/statistics/distributions/kolmogorov_smirnov_cdf.m
--- a/scripts/statistics/distributions/kolmogorov_smirnov_cdf.m
+++ b/scripts/statistics/distributions/kolmogorov_smirnov_cdf.m
@@ -15,17 +15,19 @@
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} kolmogorov_smirnov_cdf (@var{x}, @var{tol})
 ## Return the cumulative distribution function (CDF) at @var{x} of the
-## Kolmogorov-Smirnov distribution,
+## Kolmogorov-Smirnov distribution.
+##
+## This is defined as
 ## @tex
 ## $$ Q(x) = \sum_{k=-\infty}^\infty (-1)^k \exp (-2 k^2 x^2) $$
 ## @end tex
 ## @ifnottex
 ##
 ## @example
 ## @group
 ##          Inf
diff --git a/scripts/statistics/distributions/laplace_cdf.m b/scripts/statistics/distributions/laplace_cdf.m
--- a/scripts/statistics/distributions/laplace_cdf.m
+++ b/scripts/statistics/distributions/laplace_cdf.m
@@ -14,18 +14,18 @@
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} laplace_cdf (@var{x})
-## For each element of @var{x}, compute the cumulative distribution
-## function (CDF) at @var{x} of the Laplace distribution.
+## For each element of @var{x}, compute the cumulative distribution function
+## (CDF) at @var{x} of the Laplace distribution.
 ## @end deftypefn
 
 ## Author: KH <Kurt.Hornik@wu-wien.ac.at>
 ## Description: CDF of the Laplace distribution
 
 function cdf = laplace_cdf (x)
 
   if (nargin != 1)
diff --git a/scripts/statistics/distributions/laplace_inv.m b/scripts/statistics/distributions/laplace_inv.m
--- a/scripts/statistics/distributions/laplace_inv.m
+++ b/scripts/statistics/distributions/laplace_inv.m
@@ -14,18 +14,18 @@
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} laplace_inv (@var{x})
-## For each element of @var{x}, compute the quantile (the inverse of the
-## CDF) at @var{x} of the Laplace distribution.
+## For each element of @var{x}, compute the quantile (the inverse of the CDF)
+## at @var{x} of the Laplace distribution.
 ## @end deftypefn
 
 ## Author: KH <Kurt.Hornik@wu-wien.ac.at>
 ## Description: Quantile function of the Laplace distribution
 
 function inv = laplace_inv (x)
 
   if (nargin != 1)
diff --git a/scripts/statistics/distributions/laplace_pdf.m b/scripts/statistics/distributions/laplace_pdf.m
--- a/scripts/statistics/distributions/laplace_pdf.m
+++ b/scripts/statistics/distributions/laplace_pdf.m
@@ -14,18 +14,18 @@
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} laplace_pdf (@var{x})
-## For each element of @var{x}, compute the probability density function
-## (PDF) at @var{x} of the Laplace distribution.
+## For each element of @var{x}, compute the probability density function (PDF)
+## at @var{x} of the Laplace distribution.
 ## @end deftypefn
 
 ## Author: KH <Kurt.Hornik@wu-wien.ac.at>
 ## Description: PDF of the Laplace distribution
 
 function pdf = laplace_pdf (x)
 
   if (nargin != 1)
diff --git a/scripts/statistics/distributions/logistic_inv.m b/scripts/statistics/distributions/logistic_inv.m
--- a/scripts/statistics/distributions/logistic_inv.m
+++ b/scripts/statistics/distributions/logistic_inv.m
@@ -14,18 +14,18 @@
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} logistic_inv (@var{x})
-## For each element of @var{x}, compute the quantile (the inverse of
-## the CDF) at @var{x} of the logistic distribution.
+## For each element of @var{x}, compute the quantile (the inverse of the CDF)
+## at @var{x} of the logistic distribution.
 ## @end deftypefn
 
 ## Author: KH <Kurt.Hornik@wu-wien.ac.at>
 ## Description: Quantile function of the logistic distribution
 
 function inv = logistic_inv (x)
 
   if (nargin != 1)
diff --git a/scripts/statistics/distributions/logncdf.m b/scripts/statistics/distributions/logncdf.m
--- a/scripts/statistics/distributions/logncdf.m
+++ b/scripts/statistics/distributions/logncdf.m
@@ -17,19 +17,20 @@
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {} logncdf (@var{x})
 ## @deftypefnx {Function File} {} logncdf (@var{x}, @var{mu}, @var{sigma})
 ## For each element of @var{x}, compute the cumulative distribution function
 ## (CDF) at @var{x} of the lognormal distribution with parameters
-## @var{mu} and @var{sigma}.  If a random variable follows this distribution,
-## its logarithm is normally distributed with mean @var{mu} and standard
-## deviation @var{sigma}.
+## @var{mu} and @var{sigma}.
+##
+## If a random variable follows this distribution, its logarithm is normally
+## distributed with mean @var{mu} and standard deviation @var{sigma}.
 ##
 ## Default values are @var{mu} = 0, @var{sigma} = 1.
 ## @end deftypefn
 
 ## Author: KH <Kurt.Hornik@wu-wien.ac.at>
 ## Description: CDF of the log normal distribution
 
 function cdf = logncdf (x, mu = 0, sigma = 1)
diff --git a/scripts/statistics/distributions/logninv.m b/scripts/statistics/distributions/logninv.m
--- a/scripts/statistics/distributions/logninv.m
+++ b/scripts/statistics/distributions/logninv.m
@@ -15,21 +15,22 @@
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {} logninv (@var{x})
 ## @deftypefnx {Function File} {} logninv (@var{x}, @var{mu}, @var{sigma})
-## For each element of @var{x}, compute the quantile (the inverse of the
-## CDF) at @var{x} of the lognormal distribution with parameters
-## @var{mu} and @var{sigma}.  If a random variable follows this distribution,
-## its logarithm is normally distributed with mean @var{mu} and standard
-## deviation @var{sigma}.
+## For each element of @var{x}, compute the quantile (the inverse of the CDF)
+## at @var{x} of the lognormal distribution with parameters
+## @var{mu} and @var{sigma}.
+##
+## If a random variable follows this distribution, its logarithm is normally
+## distributed with mean @var{mu} and standard deviation @var{sigma}.
 ##
 ## Default values are @var{mu} = 0, @var{sigma} = 1.
 ## @end deftypefn
 
 ## Author: KH <Kurt.Hornik@wu-wien.ac.at>
 ## Description: Quantile function of the log normal distribution
 
 function inv = logninv (x, mu = 0, sigma = 1)
diff --git a/scripts/statistics/distributions/lognpdf.m b/scripts/statistics/distributions/lognpdf.m
--- a/scripts/statistics/distributions/lognpdf.m
+++ b/scripts/statistics/distributions/lognpdf.m
@@ -15,21 +15,22 @@
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {} lognpdf (@var{x})
 ## @deftypefnx {Function File} {} lognpdf (@var{x}, @var{mu}, @var{sigma})
-## For each element of @var{x}, compute the probability density function
-## (PDF) at @var{x} of the lognormal distribution with parameters
-## @var{mu} and @var{sigma}.  If a random variable follows this distribution,
-## its logarithm is normally distributed with mean @var{mu} and standard
-## deviation @var{sigma}.
+## For each element of @var{x}, compute the probability density function (PDF)
+## at @var{x} of the lognormal distribution with parameters
+## @var{mu} and @var{sigma}.
+##
+## If a random variable follows this distribution, its logarithm is normally
+## distributed with mean @var{mu} and standard deviation @var{sigma}.
 ##
 ## Default values are @var{mu} = 0, @var{sigma} = 1.
 ## @end deftypefn
 
 ## Author: KH <Kurt.Hornik@wu-wien.ac.at>
 ## Description: PDF of the log normal distribution
 
 function pdf = lognpdf (x, mu = 0, sigma = 1)
diff --git a/scripts/statistics/distributions/nbincdf.m b/scripts/statistics/distributions/nbincdf.m
--- a/scripts/statistics/distributions/nbincdf.m
+++ b/scripts/statistics/distributions/nbincdf.m
@@ -15,25 +15,24 @@
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} nbincdf (@var{x}, @var{n}, @var{p})
 ## For each element of @var{x}, compute the cumulative distribution function
-## (CDF) at @var{x} of the negative binomial distribution with
-## parameters @var{n} and @var{p}.
+## (CDF) at @var{x} of the negative binomial distribution with parameters
+## @var{n} and @var{p}.
 ##
-## When @var{n} is integer this is the Pascal distribution.  When
-## @var{n} is extended to real numbers this is the Polya distribution.
+## When @var{n} is integer this is the Pascal distribution.
+## When @var{n} is extended to real numbers this is the Polya distribution.
 ##
-## The number of failures in a Bernoulli experiment with success
-## probability @var{p} before the @var{n}-th success follows this
-## distribution.
+## The number of failures in a Bernoulli experiment with success probability
+## @var{p} before the @var{n}-th success follows this distribution.
 ## @end deftypefn
 
 ## Author: KH <Kurt.Hornik@wu-wien.ac.at>
 ## Description: CDF of the Pascal (negative binomial) distribution
 
 function cdf = nbincdf (x, n, p)
 
   if (nargin != 3)
diff --git a/scripts/statistics/distributions/nbininv.m b/scripts/statistics/distributions/nbininv.m
--- a/scripts/statistics/distributions/nbininv.m
+++ b/scripts/statistics/distributions/nbininv.m
@@ -14,26 +14,25 @@
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} nbininv (@var{x}, @var{n}, @var{p})
-## For each element of @var{x}, compute the quantile (the inverse of
-## the CDF) at @var{x} of the negative binomial distribution
-## with parameters @var{n} and @var{p}.
+## For each element of @var{x}, compute the quantile (the inverse of the CDF)
+## at @var{x} of the negative binomial distribution with parameters
+## @var{n} and @var{p}.
 ##
-## When @var{n} is integer this is the Pascal distribution.  When
-## @var{n} is extended to real numbers this is the Polya distribution.
+## When @var{n} is integer this is the Pascal distribution.
+## When @var{n} is extended to real numbers this is the Polya distribution.
 ##
-## The number of failures in a Bernoulli experiment with success
-## probability @var{p} before the @var{n}-th success follows this
-## distribution.
+## The number of failures in a Bernoulli experiment with success probability
+## @var{p} before the @var{n}-th success follows this distribution.
 ## @end deftypefn
 
 ## Author: KH <Kurt.Hornik@wu-wien.ac.at>
 ## Description: Quantile function of the Pascal distribution
 
 function inv = nbininv (x, n, p)
 
   if (nargin != 3)
diff --git a/scripts/statistics/distributions/nbinpdf.m b/scripts/statistics/distributions/nbinpdf.m
--- a/scripts/statistics/distributions/nbinpdf.m
+++ b/scripts/statistics/distributions/nbinpdf.m
@@ -14,26 +14,25 @@
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} nbinpdf (@var{x}, @var{n}, @var{p})
-## For each element of @var{x}, compute the probability density function
-## (PDF) at @var{x} of the negative binomial distribution with
-## parameters @var{n} and @var{p}.
+## For each element of @var{x}, compute the probability density function (PDF)
+## at @var{x} of the negative binomial distribution with parameters
+## @var{n} and @var{p}.
 ##
-## When @var{n} is integer this is the Pascal distribution.  When
-## @var{n} is extended to real numbers this is the Polya distribution.
+## When @var{n} is integer this is the Pascal distribution.
+## When @var{n} is extended to real numbers this is the Polya distribution.
 ##
-## The number of failures in a Bernoulli experiment with success
-## probability @var{p} before the @var{n}-th success follows this
-## distribution.
+## The number of failures in a Bernoulli experiment with success probability
+## @var{p} before the @var{n}-th success follows this distribution.
 ## @end deftypefn
 
 ## Author: KH <Kurt.Hornik@wu-wien.ac.at>
 ## Description: PDF of the Pascal (negative binomial) distribution
 
 function pdf = nbinpdf (x, n, p)
 
   if (nargin != 3)
diff --git a/scripts/statistics/distributions/nbinrnd.m b/scripts/statistics/distributions/nbinrnd.m
--- a/scripts/statistics/distributions/nbinrnd.m
+++ b/scripts/statistics/distributions/nbinrnd.m
@@ -17,18 +17,18 @@
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {} nbinrnd (@var{n}, @var{p})
 ## @deftypefnx {Function File} {} nbinrnd (@var{n}, @var{p}, @var{r})
 ## @deftypefnx {Function File} {} nbinrnd (@var{n}, @var{p}, @var{r}, @var{c}, @dots{})
 ## @deftypefnx {Function File} {} nbinrnd (@var{n}, @var{p}, [@var{sz}])
-## Return a matrix of random samples from the negative binomial
-## distribution with parameters @var{n} and @var{p}.
+## Return a matrix of random samples from the negative binomial distribution
+## with parameters @var{n} and @var{p}.
 ##
 ## When called with a single size argument, return a square matrix with
 ## the dimension specified.  When called with more than one scalar argument the
 ## first two arguments are taken as the number of rows and columns and any
 ## further arguments specify additional matrix dimensions.  The size may also
 ## be specified with a vector of dimensions @var{sz}.
 ##
 ## If no size arguments are given then the result matrix is the common size of
diff --git a/scripts/statistics/distributions/normcdf.m b/scripts/statistics/distributions/normcdf.m
--- a/scripts/statistics/distributions/normcdf.m
+++ b/scripts/statistics/distributions/normcdf.m
@@ -15,19 +15,19 @@
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {} normcdf (@var{x})
 ## @deftypefnx {Function File} {} normcdf (@var{x}, @var{mu}, @var{sigma})
-## For each element of @var{x}, compute the cumulative distribution
-## function (CDF) at @var{x} of the normal distribution with mean
-## @var{mu} and standard deviation @var{sigma}.
+## For each element of @var{x}, compute the cumulative distribution function
+## (CDF) at @var{x} of the normal distribution with mean @var{mu} and
+## standard deviation @var{sigma}.
 ##
 ## Default values are @var{mu} = 0, @var{sigma} = 1.
 ## @end deftypefn
 
 ## Author: TT <Teresa.Twaroch@ci.tuwien.ac.at>
 ## Description: CDF of the normal distribution
 
 function cdf = normcdf (x, mu = 0, sigma = 1)
diff --git a/scripts/statistics/distributions/norminv.m b/scripts/statistics/distributions/norminv.m
--- a/scripts/statistics/distributions/norminv.m
+++ b/scripts/statistics/distributions/norminv.m
@@ -15,18 +15,18 @@
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {} norminv (@var{x})
 ## @deftypefnx {Function File} {} norminv (@var{x}, @var{mu}, @var{sigma})
-## For each element of @var{x}, compute the quantile (the inverse of the
-## CDF) at @var{x} of the normal distribution with mean @var{mu} and
+## For each element of @var{x}, compute the quantile (the inverse of the CDF)
+## at @var{x} of the normal distribution with mean @var{mu} and
 ## standard deviation @var{sigma}.
 ##
 ## Default values are @var{mu} = 0, @var{sigma} = 1.
 ## @end deftypefn
 
 ## Author: KH <Kurt.Hornik@wu-wien.ac.at>
 ## Description: Quantile function of the normal distribution
 
diff --git a/scripts/statistics/distributions/normpdf.m b/scripts/statistics/distributions/normpdf.m
--- a/scripts/statistics/distributions/normpdf.m
+++ b/scripts/statistics/distributions/normpdf.m
@@ -15,18 +15,18 @@
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {} normpdf (@var{x})
 ## @deftypefnx {Function File} {} normpdf (@var{x}, @var{mu}, @var{sigma})
-## For each element of @var{x}, compute the probability density function
-## (PDF) at @var{x} of the normal distribution with mean @var{mu} and
+## For each element of @var{x}, compute the probability density function (PDF)
+## at @var{x} of the normal distribution with mean @var{mu} and
 ## standard deviation @var{sigma}.
 ##
 ## Default values are @var{mu} = 0, @var{sigma} = 1.
 ## @end deftypefn
 
 ## Author: TT <Teresa.Twaroch@ci.tuwien.ac.at>
 ## Description: PDF of the normal distribution
 
diff --git a/scripts/statistics/distributions/poisscdf.m b/scripts/statistics/distributions/poisscdf.m
--- a/scripts/statistics/distributions/poisscdf.m
+++ b/scripts/statistics/distributions/poisscdf.m
@@ -14,19 +14,18 @@
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} poisscdf (@var{x}, @var{lambda})
-## For each element of @var{x}, compute the cumulative distribution
-## function (CDF) at @var{x} of the Poisson distribution with parameter
-## lambda.
+## For each element of @var{x}, compute the cumulative distribution function
+## (CDF) at @var{x} of the Poisson distribution with parameter @var{lambda}.
 ## @end deftypefn
 
 ## Author: KH <Kurt.Hornik@wu-wien.ac.at>
 ## Description: CDF of the Poisson distribution
 
 function cdf = poisscdf (x, lambda)
 
   if (nargin != 2)
diff --git a/scripts/statistics/distributions/poissinv.m b/scripts/statistics/distributions/poissinv.m
--- a/scripts/statistics/distributions/poissinv.m
+++ b/scripts/statistics/distributions/poissinv.m
@@ -14,19 +14,18 @@
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} poissinv (@var{x}, @var{lambda})
-## For each element of @var{x}, compute the quantile (the inverse of
-## the CDF) at @var{x} of the Poisson distribution with parameter
-## @var{lambda}.
+## For each element of @var{x}, compute the quantile (the inverse of the CDF)
+## at @var{x} of the Poisson distribution with parameter @var{lambda}.
 ## @end deftypefn
 
 ## Author: KH <Kurt.Hornik@wu-wien.ac.at>
 ## Description: Quantile function of the Poisson distribution
 
 function inv = poissinv (x, lambda)
 
   if (nargin != 2)
diff --git a/scripts/statistics/distributions/poisspdf.m b/scripts/statistics/distributions/poisspdf.m
--- a/scripts/statistics/distributions/poisspdf.m
+++ b/scripts/statistics/distributions/poisspdf.m
@@ -14,18 +14,18 @@
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} poisspdf (@var{x}, @var{lambda})
-## For each element of @var{x}, compute the probability density function
-## (PDF) at @var{x} of the Poisson distribution with parameter @var{lambda}.
+## For each element of @var{x}, compute the probability density function (PDF)
+## at @var{x} of the Poisson distribution with parameter @var{lambda}.
 ## @end deftypefn
 
 ## Author: KH <Kurt.Hornik@wu-wien.ac.at>
 ## Description: PDF of the Poisson distribution
 
 function pdf = poisspdf (x, lambda)
 
   if (nargin != 2)
diff --git a/scripts/statistics/distributions/stdnormal_cdf.m b/scripts/statistics/distributions/stdnormal_cdf.m
--- a/scripts/statistics/distributions/stdnormal_cdf.m
+++ b/scripts/statistics/distributions/stdnormal_cdf.m
@@ -14,18 +14,18 @@
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} stdnormal_cdf (@var{x})
-## For each element of @var{x}, compute the cumulative distribution
-## function (CDF) at @var{x} of the standard normal distribution
+## For each element of @var{x}, compute the cumulative distribution function
+## (CDF) at @var{x} of the standard normal distribution
 ## (mean = 0, standard deviation = 1).
 ## @end deftypefn
 
 ## Author: KH <Kurt.Hornik@wu-wien.ac.at>
 ## Description: CDF of the standard normal distribution
 
 function cdf = stdnormal_cdf (x)
 
diff --git a/scripts/statistics/distributions/stdnormal_pdf.m b/scripts/statistics/distributions/stdnormal_pdf.m
--- a/scripts/statistics/distributions/stdnormal_pdf.m
+++ b/scripts/statistics/distributions/stdnormal_pdf.m
@@ -14,19 +14,19 @@
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} stdnormal_pdf (@var{x})
-## For each element of @var{x}, compute the probability density function
-## (PDF) at @var{x} of the standard normal distribution (mean = 0,
-## standard deviation = 1).
+## For each element of @var{x}, compute the probability density function (PDF)
+## at @var{x} of the standard normal distribution
+## (mean = 0, standard deviation = 1).
 ## @end deftypefn
 
 ## Author: TT <Teresa.Twaroch@ci.tuwien.ac.at>
 ## Description: PDF of the standard normal distribution
 
 function pdf = stdnormal_pdf (x)
 
   if (nargin != 1)
diff --git a/scripts/statistics/distributions/tcdf.m b/scripts/statistics/distributions/tcdf.m
--- a/scripts/statistics/distributions/tcdf.m
+++ b/scripts/statistics/distributions/tcdf.m
@@ -15,19 +15,19 @@
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} tcdf (@var{x}, @var{n})
-## For each element of @var{x}, compute the cumulative distribution
-## function (CDF) at @var{x} of the t (Student) distribution with
-## @var{n} degrees of freedom, i.e., PROB (t(@var{n}) @leq{} @var{x}).
+## For each element of @var{x}, compute the cumulative distribution function
+## (CDF) at @var{x} of the t (Student) distribution with
+## @var{n} degrees of freedom.
 ## @end deftypefn
 
 ## Author: KH <Kurt.Hornik@wu-wien.ac.at>
 ## Description: CDF of the t distribution
 
 function cdf = tcdf (x, n)
 
   if (nargin != 2)
diff --git a/scripts/statistics/distributions/tinv.m b/scripts/statistics/distributions/tinv.m
--- a/scripts/statistics/distributions/tinv.m
+++ b/scripts/statistics/distributions/tinv.m
@@ -14,20 +14,22 @@
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} tinv (@var{x}, @var{n})
-## For each element of @var{x}, compute the quantile (the inverse of
-## the CDF) at @var{x} of the t (Student) distribution with @var{n}
-## degrees of freedom.  This function is analogous to looking in a table
-## for the t-value of a single-tailed distribution.
+## For each element of @var{x}, compute the quantile (the inverse of the CDF)
+## at @var{x} of the t (Student) distribution with @var{n}
+## degrees of freedom.
+##
+## This function is analogous to looking in a table for the t-value of a
+## single-tailed distribution.
 ## @end deftypefn
 
 ## For very large n, the "correct" formula does not really work well,
 ## and the quantiles of the standard normal distribution are used
 ## directly.
 
 ## Author: KH <Kurt.Hornik@wu-wien.ac.at>
 ## Description: Quantile function of the t distribution
diff --git a/scripts/statistics/distributions/tpdf.m b/scripts/statistics/distributions/tpdf.m
--- a/scripts/statistics/distributions/tpdf.m
+++ b/scripts/statistics/distributions/tpdf.m
@@ -14,19 +14,19 @@
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} tpdf (@var{x}, @var{n})
-## For each element of @var{x}, compute the probability density function
-## (PDF) at @var{x} of the @var{t} (Student) distribution with @var{n}
-## degrees of freedom.
+## For each element of @var{x}, compute the probability density function (PDF)
+## at @var{x} of the @var{t} (Student) distribution with
+## @var{n} degrees of freedom.
 ## @end deftypefn
 
 ## Author: KH <Kurt.Hornik@wu-wien.ac.at>
 ## Description: PDF of the t distribution
 
 function pdf = tpdf (x, n)
 
   if (nargin != 2)
diff --git a/scripts/statistics/distributions/unidcdf.m b/scripts/statistics/distributions/unidcdf.m
--- a/scripts/statistics/distributions/unidcdf.m
+++ b/scripts/statistics/distributions/unidcdf.m
@@ -14,18 +14,18 @@
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} unidcdf (@var{x}, @var{n})
-## For each element of @var{x}, compute the cumulative distribution
-## function (CDF) at @var{x} of a discrete uniform distribution which assumes
+## For each element of @var{x}, compute the cumulative distribution function
+## (CDF) at @var{x} of a discrete uniform distribution which assumes
 ## the integer values 1--@var{n} with equal probability.
 ## @end deftypefn
 
 function cdf = unidcdf (x, n)
 
   if (nargin != 2)
     print_usage ();
   endif
diff --git a/scripts/statistics/distributions/unidinv.m b/scripts/statistics/distributions/unidinv.m
--- a/scripts/statistics/distributions/unidinv.m
+++ b/scripts/statistics/distributions/unidinv.m
@@ -14,18 +14,18 @@
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} unidinv (@var{x}, @var{n})
-## For each element of @var{x}, compute the quantile (the inverse of
-## the CDF) at @var{x} of the discrete uniform distribution which assumes
+## For each element of @var{x}, compute the quantile (the inverse of the CDF)
+## at @var{x} of the discrete uniform distribution which assumes
 ## the integer values 1--@var{n} with equal probability.
 ## @end deftypefn
 
 function inv = unidinv (x, n)
 
   if (nargin != 2)
     print_usage ();
   endif
diff --git a/scripts/statistics/distributions/unidpdf.m b/scripts/statistics/distributions/unidpdf.m
--- a/scripts/statistics/distributions/unidpdf.m
+++ b/scripts/statistics/distributions/unidpdf.m
@@ -14,23 +14,23 @@
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} unidpdf (@var{x}, @var{n})
-## For each element of @var{x}, compute the probability density function
-## (PDF) at @var{x} of a discrete uniform distribution which assumes
+## For each element of @var{x}, compute the probability density function (PDF)
+## at @var{x} of a discrete uniform distribution which assumes
 ## the integer values 1--@var{n} with equal probability.
 ##
-## Warning: The underlying implementation uses the double class and
-## will only be accurate for @var{n} @leq{} @code{bitmax}
-## (@w{@math{2^{53} - 1}} on IEEE-754 compatible systems).
+## Warning: The underlying implementation uses the double class and will only
+## be accurate for @var{n} @leq{} @code{bitmax} (@w{@math{2^{53} - 1}} on
+## IEEE-754 compatible systems).
 ## @end deftypefn
 
 function pdf = unidpdf (x, n)
 
   if (nargin != 2)
     print_usage ();
   endif
 
diff --git a/scripts/statistics/distributions/unidrnd.m b/scripts/statistics/distributions/unidrnd.m
--- a/scripts/statistics/distributions/unidrnd.m
+++ b/scripts/statistics/distributions/unidrnd.m
@@ -19,16 +19,17 @@
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {} unidrnd (@var{n})
 ## @deftypefnx {Function File} {} unidrnd (@var{n}, @var{r})
 ## @deftypefnx {Function File} {} unidrnd (@var{n}, @var{r}, @var{c}, @dots{})
 ## @deftypefnx {Function File} {} unidrnd (@var{n}, [@var{sz}])
 ## Return a matrix of random samples from the discrete uniform distribution
 ## which assumes the integer values 1--@var{n} with equal probability.
+##
 ## @var{n} may be a scalar or a multi-dimensional array.
 ##
 ## When called with a single size argument, return a square matrix with
 ## the dimension specified.  When called with more than one scalar argument the
 ## first two arguments are taken as the number of rows and columns and any
 ## further arguments specify additional matrix dimensions.  The size may also
 ## be specified with a vector of dimensions @var{sz}.
 ##
diff --git a/scripts/statistics/distributions/unifcdf.m b/scripts/statistics/distributions/unifcdf.m
--- a/scripts/statistics/distributions/unifcdf.m
+++ b/scripts/statistics/distributions/unifcdf.m
@@ -15,18 +15,18 @@
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {} unifcdf (@var{x})
 ## @deftypefnx {Function File} {} unifcdf (@var{x}, @var{a}, @var{b})
-## For each element of @var{x}, compute the cumulative distribution
-## function (CDF) at @var{x} of the uniform distribution on the interval
+## For each element of @var{x}, compute the cumulative distribution function
+## (CDF) at @var{x} of the uniform distribution on the interval
 ## [@var{a}, @var{b}].
 ##
 ## Default values are @var{a} = 0, @var{b} = 1.
 ## @end deftypefn
 
 ## Author: KH <Kurt.Hornik@wu-wien.ac.at>
 ## Description: CDF of the uniform distribution
 
diff --git a/scripts/statistics/distributions/unifinv.m b/scripts/statistics/distributions/unifinv.m
--- a/scripts/statistics/distributions/unifinv.m
+++ b/scripts/statistics/distributions/unifinv.m
@@ -15,19 +15,18 @@
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {} unifinv (@var{x})
 ## @deftypefnx {Function File} {} unifinv (@var{x}, @var{a}, @var{b})
-## For each element of @var{x}, compute the quantile (the inverse of the
-## CDF) at @var{x} of the uniform distribution on the interval
-## [@var{a}, @var{b}].
+## For each element of @var{x}, compute the quantile (the inverse of the CDF)
+## at @var{x} of the uniform distribution on the interval [@var{a}, @var{b}].
 ##
 ## Default values are @var{a} = 0, @var{b} = 1.
 ## @end deftypefn
 
 ## Author: KH <Kurt.Hornik@wu-wien.ac.at>
 ## Description: Quantile function of the uniform distribution
 
 function inv = unifinv (x, a = 0, b = 1)
diff --git a/scripts/statistics/distributions/wblcdf.m b/scripts/statistics/distributions/wblcdf.m
--- a/scripts/statistics/distributions/wblcdf.m
+++ b/scripts/statistics/distributions/wblcdf.m
@@ -18,17 +18,19 @@
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {} wblcdf (@var{x})
 ## @deftypefnx {Function File} {} wblcdf (@var{x}, @var{scale})
 ## @deftypefnx {Function File} {} wblcdf (@var{x}, @var{scale}, @var{shape})
 ## Compute the cumulative distribution function (CDF) at @var{x} of the
 ## Weibull distribution with scale parameter @var{scale} and shape
-## parameter @var{shape}, which is
+## parameter @var{shape}.
+##
+## This is defined as
 ## @tex
 ## $$ 1 - e^{-({x \over scale})^{shape}} $$
 ## for $x \geq 0$.
 ## @end tex
 ## @ifnottex
 ##
 ## @example
 ## 1 - exp (-(x/scale)^shape)
diff --git a/scripts/statistics/distributions/wblinv.m b/scripts/statistics/distributions/wblinv.m
--- a/scripts/statistics/distributions/wblinv.m
+++ b/scripts/statistics/distributions/wblinv.m
@@ -17,18 +17,18 @@
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {} wblinv (@var{x})
 ## @deftypefnx {Function File} {} wblinv (@var{x}, @var{scale})
 ## @deftypefnx {Function File} {} wblinv (@var{x}, @var{scale}, @var{shape})
 ## Compute the quantile (the inverse of the CDF) at @var{x} of the
-## Weibull distribution with scale parameter @var{scale} and shape
-## parameter @var{shape}.
+## Weibull distribution with scale parameter @var{scale} and
+## shape parameter @var{shape}.
 ##
 ## Default values are @var{scale} = 1, @var{shape} = 1.
 ## @end deftypefn
 
 ## Author: KH <Kurt.Hornik@wu-wien.ac.at>
 ## Description: Quantile function of the Weibull distribution
 
 function inv = wblinv (x, scale = 1, shape = 1)
diff --git a/scripts/statistics/distributions/wblpdf.m b/scripts/statistics/distributions/wblpdf.m
--- a/scripts/statistics/distributions/wblpdf.m
+++ b/scripts/statistics/distributions/wblpdf.m
@@ -17,18 +17,20 @@
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {} wblpdf (@var{x})
 ## @deftypefnx {Function File} {} wblpdf (@var{x}, @var{scale})
 ## @deftypefnx {Function File} {} wblpdf (@var{x}, @var{scale}, @var{shape})
 ## Compute the probability density function (PDF) at @var{x} of the
-## Weibull distribution with scale parameter @var{scale} and shape
-## parameter @var{shape} which is given by
+## Weibull distribution with scale parameter @var{scale} and
+## shape parameter @var{shape}.
+##
+## This is given by
 ## @tex
 ## $$  {shape \over scale^{shape}} \cdot x^{shape-1} \cdot e^{-({x \over scale})^{shape}} $$
 ## @end tex
 ## @ifnottex
 ##
 ## @example
 ## shape * scale^(-shape) * x^(shape-1) * exp (-(x/scale)^shape)
 ## @end example
diff --git a/scripts/statistics/distributions/wienrnd.m b/scripts/statistics/distributions/wienrnd.m
--- a/scripts/statistics/distributions/wienrnd.m
+++ b/scripts/statistics/distributions/wienrnd.m
@@ -14,21 +14,23 @@
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} wienrnd (@var{t}, @var{d}, @var{n})
 ## Return a simulated realization of the @var{d}-dimensional Wiener Process
-## on the interval [0, @var{t}].  If @var{d} is omitted, @var{d} = 1 is
-## used.  The first column of the return matrix contains time, the
-## remaining columns contain the Wiener process.
+## on the interval [0, @var{t}].
 ##
-## The optional parameter @var{n} gives the number of summands used for
+## If @var{d} is omitted, @var{d} = 1 is used.  The first column of the
+## return matrix contains time, the remaining columns contain the Wiener
+## process.
+##
+## The optional parameter @var{n} defines the number of summands used for
 ## simulating the process over an interval of length 1.  If @var{n} is
 ## omitted, @var{n} = 1000 is used.
 ## @end deftypefn
 
 ## Author: FL <Friedrich.Leisch@ci.tuwien.ac.at>
 ## Description: Simulate a Wiener process
 
 function retval = wienrnd (t, d, n)
diff --git a/scripts/statistics/models/private/logistic_regression_derivatives.m b/scripts/statistics/models/private/logistic_regression_derivatives.m
--- a/scripts/statistics/models/private/logistic_regression_derivatives.m
+++ b/scripts/statistics/models/private/logistic_regression_derivatives.m
@@ -15,16 +15,17 @@
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {[@var{dl}, @var{d2l}] =} logistic_regression_derivatives (@var{x}, @var{z}, @var{z1}, @var{g}, @var{g1}, @var{p})
 ## Calculate derivatives of the log-likelihood for ordinal logistic regression
 ## model.
+##
 ## Private function called by @code{logistic_regression}.
 ## @seealso{logistic_regression}
 ## @end deftypefn
 
 ## Author: Gordon K. Smyth <gks@maths.uq.oz.au>
 ## Adapted-By: KH <Kurt.Hornik@wu-wien.ac.at>
 ## Description: Derivates of log-likelihood in logistic regression
 
diff --git a/scripts/statistics/models/private/logistic_regression_likelihood.m b/scripts/statistics/models/private/logistic_regression_likelihood.m
--- a/scripts/statistics/models/private/logistic_regression_likelihood.m
+++ b/scripts/statistics/models/private/logistic_regression_likelihood.m
@@ -14,16 +14,17 @@
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {[@var{g}, @var{g1}, @var{p}, @var{dev}] =} logistic_regression_likelihood (@var{y}, @var{x}, @var{beta}, @var{z}, @var{z1})
 ## Calculate the likelihood for the ordinal logistic regression model.
+##
 ## Private function called by @code{logistic_regression}.
 ## @seealso{logistic_regression}
 ## @end deftypefn
 
 ## Author: Gordon K. Smyth <gks@maths.uq.oz.au>
 ## Adapted-By: KH <Kurt.Hornik@wu-wien.ac.at>
 ## Description: Likelihood in logistic regression
 
diff --git a/scripts/statistics/tests/anova.m b/scripts/statistics/tests/anova.m
--- a/scripts/statistics/tests/anova.m
+++ b/scripts/statistics/tests/anova.m
@@ -13,37 +13,38 @@
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {[@var{pval}, @var{f}, @var{df_b}, @var{df_w}] =} anova (@var{y}, @var{g})
-## Perform a one-way analysis of variance (ANOVA).  The goal is to test
-## whether the population means of data taken from @var{k} different
-## groups are all equal.
+## Perform a one-way analysis of variance (ANOVA).
+##
+## The goal is to test whether the population means of data taken from
+## @var{k} different groups are all equal.
 ##
-## Data may be given in a single vector @var{y} with groups specified by
-## a corresponding vector of group labels @var{g} (e.g., numbers from 1
-## to @var{k}).  This is the general form which does not impose any
-## restriction on the number of data in each group or the group labels.
+## Data may be given in a single vector @var{y} with groups specified by a
+## corresponding vector of group labels @var{g} (e.g., numbers from 1 to
+## @var{k}).  This is the general form which does not impose any restriction
+## on the number of data in each group or the group labels.
 ##
-## If @var{y} is a matrix and @var{g} is omitted, each column of @var{y}
-## is treated as a group.  This form is only appropriate for balanced
-## ANOVA in which the numbers of samples from each group are all equal.
+## If @var{y} is a matrix and @var{g} is omitted, each column of @var{y} is
+## treated as a group.  This form is only appropriate for balanced ANOVA in
+## which the numbers of samples from each group are all equal.
 ##
 ## Under the null of constant means, the statistic @var{f} follows an F
 ## distribution with @var{df_b} and @var{df_w} degrees of freedom.
 ##
-## The p-value (1 minus the CDF of this distribution at @var{f}) is
-## returned in @var{pval}.
+## The p-value (1 minus the CDF of this distribution at @var{f}) is returned
+## in @var{pval}.
 ##
-## If no output argument is given, the standard one-way ANOVA table is
-## printed.
+## If no output argument is given, the standard one-way ANOVA table is printed.
+## @seealso{manova}
 ## @end deftypefn
 
 ## Author: KH <Kurt.Hornik@wu-wien.ac.at>
 ## Description: One-way analysis of variance (ANOVA)
 
 function [pval, f, df_b, df_w] = anova (y, g)
 
   if (nargin < 1 || nargin > 2)
diff --git a/scripts/statistics/tests/chisquare_test_homogeneity.m b/scripts/statistics/tests/chisquare_test_homogeneity.m
--- a/scripts/statistics/tests/chisquare_test_homogeneity.m
+++ b/scripts/statistics/tests/chisquare_test_homogeneity.m
@@ -19,18 +19,18 @@
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {[@var{pval}, @var{chisq}, @var{df}] =} chisquare_test_homogeneity (@var{x}, @var{y}, @var{c})
 ## Given two samples @var{x} and @var{y}, perform a chisquare test for
 ## homogeneity of the null hypothesis that @var{x} and @var{y} come from
 ## the same distribution, based on the partition induced by the
 ## (strictly increasing) entries of @var{c}.
 ##
 ## For large samples, the test statistic @var{chisq} approximately follows a
-## chisquare distribution with @var{df} = @code{length (@var{c})}
-## degrees of freedom.
+## chisquare distribution with @var{df} = @code{length (@var{c})} degrees of
+## freedom.
 ##
 ## The p-value (1 minus the CDF of this distribution at @var{chisq}) is
 ## returned in @var{pval}.
 ##
 ## If no output argument is given, the p-value is displayed.
 ## @end deftypefn
 
 ## Author: KH <Kurt.Hornik@wu-wien.ac.at>
diff --git a/scripts/statistics/tests/chisquare_test_independence.m b/scripts/statistics/tests/chisquare_test_independence.m
--- a/scripts/statistics/tests/chisquare_test_independence.m
+++ b/scripts/statistics/tests/chisquare_test_independence.m
@@ -13,23 +13,24 @@
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {[@var{pval}, @var{chisq}, @var{df}] =} chisquare_test_independence (@var{x})
-## Perform a chi-square test for independence based on the contingency
-## table @var{x}.  Under the null hypothesis of independence,
-## @var{chisq} approximately has a chi-square distribution with
-## @var{df} degrees of freedom.
+## Perform a chi-square test for independence based on the contingency table
+## @var{x}.
 ##
-## The p-value (1 minus the CDF of this distribution at chisq) of the
-## test is returned in @var{pval}.
+## Under the null hypothesis of independence, @var{chisq} approximately has a
+## chi-square distribution with @var{df} degrees of freedom.
+##
+## The p-value (1 minus the CDF of this distribution at chisq) of the test is
+## returned in @var{pval}.
 ##
 ## If no output argument is given, the p-value is displayed.
 ## @end deftypefn
 
 ## Author: KH <Kurt.Hornik@wu-wien.ac.at>
 ## Description: Chi-square test for independence
 
 function [pval, chisq, df] = chisquare_test_independence (x)
diff --git a/scripts/statistics/tests/cor_test.m b/scripts/statistics/tests/cor_test.m
--- a/scripts/statistics/tests/cor_test.m
+++ b/scripts/statistics/tests/cor_test.m
@@ -17,29 +17,29 @@
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} cor_test (@var{x}, @var{y}, @var{alt}, @var{method})
 ## Test whether two samples @var{x} and @var{y} come from uncorrelated
 ## populations.
 ##
 ## The optional argument string @var{alt} describes the alternative
-## hypothesis, and can be @qcode{"!="} or @qcode{"<>"} (nonzero),
-## @qcode{">"} (greater than 0), or @qcode{"<"} (less than 0).  The
-## default is the two-sided case.
+## hypothesis, and can be @qcode{"!="} or @qcode{"<>"} (nonzero), @qcode{">"}
+## (greater than 0), or @qcode{"<"} (less than 0).  The default is the
+## two-sided case.
 ##
-## The optional argument string @var{method} specifies which
-## correlation coefficient to use for testing.  If @var{method} is
-## @qcode{"pearson"} (default), the (usual) Pearson's product moment
-## correlation coefficient is used.  In this case, the data should come
-## from a bivariate normal distribution.  Otherwise, the other two
-## methods offer nonparametric alternatives.  If @var{method} is
-## @qcode{"kendall"}, then Kendall's rank correlation tau is used.  If
-## @var{method} is @qcode{"spearman"}, then Spearman's rank correlation
-## rho is used.  Only the first character is necessary.
+## The optional argument string @var{method} specifies which correlation
+## coefficient to use for testing.  If @var{method} is @qcode{"pearson"}
+## (default), the (usual) Pearson's produt moment correlation coefficient is
+## used.  In this case, the data should come from a bivariate normal
+## distribution.  Otherwise, the other two methods offer nonparametric
+## alternatives.  If @var{method} is @qcode{"kendall"}, then Kendall's rank
+## correlation tau is used.  If @var{method} is @qcode{"spearman"}, then
+## Spearman's rank correlation rho is used.  Only the first character is
+## necessary.
 ##
 ## The output is a structure with the following elements:
 ##
 ## @table @var
 ## @item pval
 ## The p-value of the test.
 ##
 ## @item stat
diff --git a/scripts/statistics/tests/f_test_regression.m b/scripts/statistics/tests/f_test_regression.m
--- a/scripts/statistics/tests/f_test_regression.m
+++ b/scripts/statistics/tests/f_test_regression.m
@@ -16,21 +16,21 @@
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {[@var{pval}, @var{f}, @var{df_num}, @var{df_den}] =} f_test_regression (@var{y}, @var{x}, @var{rr}, @var{r})
 ## Perform an F test for the null hypothesis @nospell{rr * b = r} in a
 ## classical normal regression model y = X * b + e.
 ##
-## Under the null, the test statistic @var{f} follows an F distribution
-## with @var{df_num} and @var{df_den} degrees of freedom.
+## Under the null, the test statistic @var{f} follows an F distribution with
+## @var{df_num} and @var{df_den} degrees of freedom.
 ##
-## The p-value (1 minus the CDF of this distribution at @var{f}) is
-## returned in @var{pval}.
+## The p-value (1 minus the CDF of this distribution at @var{f}) is returned
+## in @var{pval}.
 ##
 ## If not given explicitly, @var{r} = 0.
 ##
 ## If no output argument is given, the p-value is displayed.
 ## @end deftypefn
 
 ## Author: KH <Kurt.Hornik@wu-wien.ac.at>
 ## Description: Test linear hypotheses in linear regression model
diff --git a/scripts/statistics/tests/hotelling_test.m b/scripts/statistics/tests/hotelling_test.m
--- a/scripts/statistics/tests/hotelling_test.m
+++ b/scripts/statistics/tests/hotelling_test.m
@@ -14,18 +14,18 @@
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {[@var{pval}, @var{tsq}] =} hotelling_test (@var{x}, @var{m})
 ## For a sample @var{x} from a multivariate normal distribution with unknown
-## mean and covariance matrix, test the null hypothesis that @code{mean
-## (@var{x}) == @var{m}}.
+## mean and covariance matrix, test the null hypothesis that
+## @code{mean (@var{x}) == @var{m}}.
 ##
 ## Hotelling's @math{T^2} is returned in @var{tsq}.  Under the null,
 ## @math{(n-p) T^2 / (p(n-1))} has an F distribution with @math{p} and
 ## @math{n-p} degrees of freedom, where @math{n} and @math{p} are the
 ## numbers of samples and variables, respectively.
 ##
 ## The p-value of the test is returned in @var{pval}.
 ##
diff --git a/scripts/statistics/tests/kolmogorov_smirnov_test.m b/scripts/statistics/tests/kolmogorov_smirnov_test.m
--- a/scripts/statistics/tests/kolmogorov_smirnov_test.m
+++ b/scripts/statistics/tests/kolmogorov_smirnov_test.m
@@ -14,41 +14,42 @@
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {[@var{pval}, @var{ks}] =} kolmogorov_smirnov_test (@var{x}, @var{dist}, @var{params}, @var{alt})
 ## Perform a Kolmogorov-Smirnov test of the null hypothesis that the
-## sample @var{x} comes from the (continuous) distribution dist.  I.e.,
+## sample @var{x} comes from the (continuous) distribution @var{dist}.
+##
 ## if F and G are the CDFs corresponding to the sample and dist,
 ## respectively, then the null is that F == G.
 ##
 ## The optional argument @var{params} contains a list of parameters of
 ## @var{dist}.  For example, to test whether a sample @var{x} comes from
 ## a uniform distribution on [2,4], use
 ##
 ## @example
 ## kolmogorov_smirnov_test (x, "unif", 2, 4)
 ## @end example
 ##
 ## @noindent
-## @var{dist} can be any string for which a function @var{dist_cdf}
+## @var{dist} can be any string for which a function @var{distcdf}
 ## that calculates the CDF of distribution @var{dist} exists.
 ##
-## With the optional argument string @var{alt}, the alternative of
-## interest can be selected.  If @var{alt} is @qcode{"!="} or
-## @qcode{"<>"}, the null is tested against the two-sided alternative F
-## != G@.  In this case, the test statistic @var{ks} follows a two-sided
-## Kolmogorov-Smirnov distribution.  If @var{alt} is @qcode{">"}, the
-## one-sided alternative F > G is considered.  Similarly for @qcode{"<"},
-## the one-sided alternative F > G is considered.  In this case, the
-## test statistic @var{ks} has a one-sided Kolmogorov-Smirnov
-## distribution.  The default is the two-sided case.
+## With the optional argument string @var{alt}, the alternative of interest
+## can be selected.  If @var{alt} is @qcode{"!="} or @qcode{"<>"}, the null
+## is tested against the two-sided alternative F != G@.  In this case, the
+## test statistic @var{ks} follows a two-sided Kolmogorov-Smirnov
+## distribution.  If @var{alt} is @qcode{">"}, the one-sided alternative F >
+## G is considered.  Similarly for @qcode{"<"}, the one-sided alternative F >
+## G is considered.  In this case, the test statistic @var{ks} has a
+## one-sided Kolmogorov-Smirnov distribution.  The default is the two-sided
+## case.
 ##
 ## The p-value of the test is returned in @var{pval}.
 ##
 ## If no output argument is given, the p-value is displayed.
 ## @end deftypefn
 
 ## Author: KH <Kurt.Hornik@wu-wien.ac.at>
 ## Description: One-sample Kolmogorov-Smirnov test
diff --git a/scripts/statistics/tests/kolmogorov_smirnov_test_2.m b/scripts/statistics/tests/kolmogorov_smirnov_test_2.m
--- a/scripts/statistics/tests/kolmogorov_smirnov_test_2.m
+++ b/scripts/statistics/tests/kolmogorov_smirnov_test_2.m
@@ -13,31 +13,31 @@
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {[@var{pval}, @var{ks}, @var{d}] =} kolmogorov_smirnov_test_2 (@var{x}, @var{y}, @var{alt})
-## Perform a 2-sample Kolmogorov-Smirnov test of the null hypothesis
-## that the samples @var{x} and @var{y} come from the same (continuous)
-## distribution.  I.e., if F and G are the CDFs corresponding to the
-## @var{x} and @var{y} samples, respectively, then the null is that F ==
-## G.
+## Perform a 2-sample Kolmogorov-Smirnov test of the null hypothesis that the
+## samples @var{x} and @var{y} come from the same (continuous) distribution.
+##
+## If F and G are the CDFs corresponding to the @var{x} and @var{y} samples,
+## respectively, then the null is that F == G.
 ##
-## With the optional argument string @var{alt}, the alternative of
-## interest can be selected.  If @var{alt} is @qcode{"!="} or
-## @qcode{"<>"}, the null is tested against the two-sided alternative F
-## != G@.  In this case, the test statistic @var{ks} follows a two-sided
-## Kolmogorov-Smirnov distribution.  If @var{alt} is @qcode{">"}, the
-## one-sided alternative F > G is considered.  Similarly for @qcode{"<"},
-## the one-sided alternative F < G is considered.  In this case, the
-## test statistic @var{ks} has a one-sided Kolmogorov-Smirnov
-## distribution.  The default is the two-sided case.
+## With the optional argument string @var{alt}, the alternative of interest
+## can be selected.  If @var{alt} is @qcode{"!="} or @qcode{"<>"}, the null
+## is tested against the two-sided alternative F != G@.  In this case, the
+## test statistic @var{ks} follows a two-sided Kolmogorov-Smirnov
+## distribution.  If @var{alt} is @qcode{">"}, the one-sided alternative F >
+## G is considered.  Similarly for @qcode{"<"}, the one-sided alternative F <
+## G is considered.  In this case, the test statistic @var{ks} has a
+## one-sided Kolmogorov-Smirnov distribution.  The default is the two-sided
+## case.
 ##
 ## The p-value of the test is returned in @var{pval}.
 ##
 ## The third returned value, @var{d}, is the test statistic, the maximum
 ## vertical distance between the two cumulative distribution functions.
 ##
 ## If no output argument is given, the p-value is displayed.
 ## @end deftypefn
diff --git a/scripts/statistics/tests/kruskal_wallis_test.m b/scripts/statistics/tests/kruskal_wallis_test.m
--- a/scripts/statistics/tests/kruskal_wallis_test.m
+++ b/scripts/statistics/tests/kruskal_wallis_test.m
@@ -15,39 +15,37 @@
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {[@var{pval}, @var{k}, @var{df}] =} kruskal_wallis_test (@var{x1}, @dots{})
 ## Perform a @nospell{Kruskal-Wallis} one-factor analysis of variance.
 ##
-## Suppose a variable is observed for @var{k} > 1 different groups, and
-## let @var{x1}, @dots{}, @var{xk} be the corresponding data vectors.
+## Suppose a variable is observed for @var{k} > 1 different groups, and let
+## @var{x1}, @dots{}, @var{xk} be the corresponding data vectors.
 ##
 ## Under the null hypothesis that the ranks in the pooled sample are not
 ## affected by the group memberships, the test statistic @var{k} is
-## approximately chi-square with @var{df} = @var{k} - 1 degrees of
-## freedom.
+## approximately chi-square with @var{df} = @var{k} - 1 degrees of freedom.
 ##
 ## If the data contains ties (some value appears more than once)
 ## @var{k} is divided by
 ##
 ## 1 - @var{sum_ties} / (@var{n}^3 - @var{n})
 ##
-## where @var{sum_ties} is the sum of @var{t}^2 - @var{t} over each group
-## of ties where @var{t} is the number of ties in the group and @var{n}
-## is the total number of values in the input data.  For more info on
-## this adjustment see @nospell{William H. Kruskal and W. Allen Wallis},
+## where @var{sum_ties} is the sum of @var{t}^2 - @var{t} over each group of
+## ties where @var{t} is the number of ties in the group and @var{n} is the
+## total number of values in the input data.  For more info on this
+## adjustment see @nospell{William H. Kruskal and W. Allen Wallis},
 ## @cite{Use of Ranks in One-Criterion Variance Analysis},
-## Journal of the American Statistical Association, Vol. 47,
-## No. 260 (Dec 1952).
+## Journal of the American Statistical Association, Vol. 47, No. 260 (Dec 1952).
 ##
-## The p-value (1 minus the CDF of this distribution at @var{k}) is
-## returned in @var{pval}.
+## The p-value (1 minus the CDF of this distribution at @var{k}) is returned
+## in @var{pval}.
 ##
 ## If no output argument is given, the p-value is displayed.
 ## @end deftypefn
 
 ## Author: KH <Kurt.Hornik@wu-wien.ac.at>
 ## Description: Kruskal-Wallis test
 
 function [pval, k, df] = kruskal_wallis_test (varargin)
diff --git a/scripts/statistics/tests/manova.m b/scripts/statistics/tests/manova.m
--- a/scripts/statistics/tests/manova.m
+++ b/scripts/statistics/tests/manova.m
@@ -13,28 +13,30 @@
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} manova (@var{x}, @var{g})
-## Perform a one-way multivariate analysis of variance (MANOVA).  The
-## goal is to test whether the p-dimensional population means of data
-## taken from @var{k} different groups are all equal.  All data are
-## assumed drawn independently from p-dimensional normal distributions
-## with the same covariance matrix.
+## Perform a one-way multivariate analysis of variance (MANOVA).
 ##
-## The data matrix is given by @var{x}.  As usual, rows are observations
-## and columns are variables.  The vector @var{g} specifies the
-## corresponding group labels (e.g., numbers from 1 to @var{k}).
+## The goal is to test whether the p-dimensional population means of data
+## taken from @var{k} different groups are all equal.  All data are assumed
+## drawn independently from p-dimensional normal distributions with the same
+## covariance matrix.
+##
+## The data matrix is given by @var{x}.  As usual, rows are observations and
+## columns are variables.  The vector @var{g} specifies the corresponding
+## group labels (e.g., numbers from 1 to @var{k}).
 ##
 ## The LR test statistic (@nospell{Wilks' Lambda}) and approximate p-values are
 ## computed and displayed.
+## @seealso{anova}
 ## @end deftypefn
 
 ## The Hotelling-Lawley and Pillai-Bartlett test statistics are coded.
 ## However, they are currently disabled until they can be verified by someone
 ## with sufficient understanding of the algorithms.  Please feel free to
 ## improve this.
 
 ## Author: TF <Thomas.Fuereder@ci.tuwien.ac.at>
diff --git a/scripts/statistics/tests/mcnemar_test.m b/scripts/statistics/tests/mcnemar_test.m
--- a/scripts/statistics/tests/mcnemar_test.m
+++ b/scripts/statistics/tests/mcnemar_test.m
@@ -13,22 +13,22 @@
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {[@var{pval}, @var{chisq}, @var{df}] =} mcnemar_test (@var{x})
-## For a square contingency table @var{x} of data cross-classified on
-## the row and column variables, @nospell{McNemar's} test can be used for
-## testing the null hypothesis of symmetry of the classification probabilities.
+## For a square contingency table @var{x} of data cross-classified on the row
+## and column variables, @nospell{McNemar's} test can be used for testing the
+## null hypothesis of symmetry of the classification probabilities.
 ##
-## Under the null, @var{chisq} is approximately distributed as chisquare
-## with @var{df} degrees of freedom.
+## Under the null, @var{chisq} is approximately distributed as chisquare with
+## @var{df} degrees of freedom.
 ##
 ## The p-value (1 minus the CDF of this distribution at @var{chisq}) is
 ## returned in @var{pval}.
 ##
 ## If no output argument is given, the p-value of the test is displayed.
 ## @end deftypefn
 
 ## Author: KH <Kurt.Hornik@wu-wien.ac.at>
diff --git a/scripts/statistics/tests/prop_test_2.m b/scripts/statistics/tests/prop_test_2.m
--- a/scripts/statistics/tests/prop_test_2.m
+++ b/scripts/statistics/tests/prop_test_2.m
@@ -13,29 +13,30 @@
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {[@var{pval}, @var{z}] =} prop_test_2 (@var{x1}, @var{n1}, @var{x2}, @var{n2}, @var{alt})
-## If @var{x1} and @var{n1} are the counts of successes and trials in
-## one sample, and @var{x2} and @var{n2} those in a second one, test the
-## null hypothesis that the success probabilities @var{p1} and @var{p2}
-## are the same.  Under the null, the test statistic @var{z}
-## approximately follows a standard normal distribution.
+## If @var{x1} and @var{n1} are the counts of successes and trials in one
+## sample, and @var{x2} and @var{n2} those in a second one, test the null
+## hypothesis that the success probabilities @var{p1} and @var{p2} are the
+## same.
 ##
-## With the optional argument string @var{alt}, the alternative of
-## interest can be selected.  If @var{alt} is @qcode{"!="} or
-## @qcode{"<>"}, the null is tested against the two-sided alternative
-## @var{p1} != @var{p2}.  If @var{alt} is @qcode{">"}, the one-sided
-## alternative @var{p1} > @var{p2} is used.  Similarly for @qcode{"<"},
-## the one-sided alternative @var{p1} < @var{p2} is used.
-## The default is the two-sided case.
+## Under the null, the test statistic @var{z} approximately follows a
+## standard normal distribution.
+##
+## With the optional argument string @var{alt}, the alternative of interest
+## can be selected.  If @var{alt} is @qcode{"!="} or @qcode{"<>"}, the null
+## is tested against the two-sided alternative @var{p1} != @var{p2}.  If
+## @var{alt} is @qcode{">"}, the one-sided alternative @var{p1} > @var{p2} is
+## used.  Similarly for @qcode{"<"}, the one-sided alternative
+## @var{p1} < @var{p2} is used.  The default is the two-sided case.
 ##
 ## The p-value of the test is returned in @var{pval}.
 ##
 ## If no output argument is given, the p-value of the test is displayed.
 ## @end deftypefn
 
 ## Author: KH <Kurt.Hornik@wu-wien.ac.at>
 ## Description: Compare two proportions
diff --git a/scripts/statistics/tests/run_test.m b/scripts/statistics/tests/run_test.m
--- a/scripts/statistics/tests/run_test.m
+++ b/scripts/statistics/tests/run_test.m
@@ -13,19 +13,21 @@
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {[@var{pval}, @var{chisq}] =} run_test (@var{x})
-## Perform a chi-square test with 6 degrees of freedom based on the
-## upward runs in the columns of @var{x}.  Can be used to test whether
-## @var{x} contains independent data.
+## Perform a chi-square test with 6 degrees of freedom based on the upward
+## runs in the columns of @var{x}.
+##
+## @code{run_test} can be used to decide whether @var{x} contains independent
+## data.
 ##
 ## The p-value of the test is returned in @var{pval}.
 ##
 ## If no output argument is given, the p-value is displayed.
 ## @end deftypefn
 
 ## Author: FL <Friedrich.Leisch@ci.tuwien.ac.at>
 ## Description: Run test for independence
diff --git a/scripts/statistics/tests/sign_test.m b/scripts/statistics/tests/sign_test.m
--- a/scripts/statistics/tests/sign_test.m
+++ b/scripts/statistics/tests/sign_test.m
@@ -14,30 +14,31 @@
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {[@var{pval}, @var{b}, @var{n}] =} sign_test (@var{x}, @var{y}, @var{alt})
 ## For two matched-pair samples @var{x} and @var{y}, perform a sign test
-## of the null hypothesis PROB (@var{x} > @var{y}) == PROB (@var{x} <
-## @var{y}) == 1/2.  Under the null, the test statistic @var{b} roughly
-## follows a binomial distribution with parameters @code{@var{n} = sum
-## (@var{x} != @var{y})} and @var{p} = 1/2.
+## of the null hypothesis
+## PROB (@var{x} > @var{y}) == PROB (@var{x} < @var{y}) == 1/2.
+##
+## Under the null, the test statistic @var{b} roughly follows a
+## binomial distribution with parameters
+## @code{@var{n} = sum (@var{x} != @var{y})} and @var{p} = 1/2.
 ##
-## With the optional argument @code{alt}, the alternative of interest
-## can be selected.  If @var{alt} is @qcode{"!="} or @qcode{"<>"}, the
-## null hypothesis is tested against the two-sided alternative PROB
-## (@var{x} < @var{y}) != 1/2.  If @var{alt} is @qcode{">"}, the
-## one-sided alternative PROB (@var{x} > @var{y}) > 1/2 ("x is
-## stochastically greater than y") is considered.  Similarly for
-## @qcode{"<"}, the one-sided alternative PROB (@var{x} > @var{y}) < 1/2
-## ("x is stochastically less than y") is considered.  The default is
-## the two-sided case.
+## With the optional argument @code{alt}, the alternative of interest can be
+## selected.  If @var{alt} is @qcode{"!="} or @qcode{"<>"}, the null
+## hypothesis is tested against the two-sided alternative
+## PROB (@var{x} < @var{y}) != 1/2.  If @var{alt} is @qcode{">"}, the one-sided
+## alternative PROB (@var{x} > @var{y}) > 1/2 ("x is stochastically greater
+## than y") is considered.  Similarly for @qcode{"<"}, the one-sided
+## alternative PROB (@var{x} > @var{y}) < 1/2 ("x is stochastically less than
+## y") is considered.  The default is the two-sided case.
 ##
 ## The p-value of the test is returned in @var{pval}.
 ##
 ## If no output argument is given, the p-value of the test is displayed.
 ## @end deftypefn
 
 ## Author: KH <Kurt.Hornik@wu-wien.ac.at>
 ## Description: Sign test
diff --git a/scripts/statistics/tests/t_test.m b/scripts/statistics/tests/t_test.m
--- a/scripts/statistics/tests/t_test.m
+++ b/scripts/statistics/tests/t_test.m
@@ -14,29 +14,29 @@
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {[@var{pval}, @var{t}, @var{df}] =} t_test (@var{x}, @var{m}, @var{alt})
 ## For a sample @var{x} from a normal distribution with unknown mean and
-## variance, perform a t-test of the null hypothesis @code{mean
-## (@var{x}) == @var{m}}.  Under the null, the test statistic @var{t}
-## follows a Student distribution with @code{@var{df} = length (@var{x})
-## - 1} degrees of freedom.
+## variance, perform a t-test of the null hypothesis
+## @code{mean (@var{x}) == @var{m}}.
+##
+## Under the null, the test statistic @var{t} follows a Student distribution
+## with @code{@var{df} = length (@var{x}) - 1} degrees of freedom.
 ##
-## With the optional argument string @var{alt}, the alternative of
-## interest can be selected.  If @var{alt} is @qcode{"!="} or
-## @qcode{"<>"}, the null is tested against the two-sided alternative
-## @code{mean (@var{x}) != @var{m}}.  If @var{alt} is @qcode{">"}, the
-## one-sided alternative @code{mean (@var{x}) > @var{m}} is considered.
-## Similarly for @var{"<"}, the one-sided alternative @code{mean
-## (@var{x}) < @var{m}} is considered.  The default is the two-sided
-## case.
+## With the optional argument string @var{alt}, the alternative of interest
+## can be selected.  If @var{alt} is @qcode{"!="} or @qcode{"<>"}, the null
+## is tested against the two-sided alternative @code{mean (@var{x}) !=
+## @var{m}}.  If @var{alt} is @qcode{">"}, the one-sided alternative
+## @code{mean (@var{x}) > @var{m}} is considered.  Similarly for @var{"<"},
+## the one-sided alternative @code{mean (@var{x}) < @var{m}} is considered. 
+## The default is the two-sided case.
 ##
 ## The p-value of the test is returned in @var{pval}.
 ##
 ## If no output argument is given, the p-value of the test is displayed.
 ## @end deftypefn
 
 ## Author: KH <Kurt.Hornik@wu-wien.ac.at>
 ## Description: Student's one-sample t test
diff --git a/scripts/statistics/tests/t_test_2.m b/scripts/statistics/tests/t_test_2.m
--- a/scripts/statistics/tests/t_test_2.m
+++ b/scripts/statistics/tests/t_test_2.m
@@ -13,30 +13,30 @@
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {[@var{pval}, @var{t}, @var{df}] =} t_test_2 (@var{x}, @var{y}, @var{alt})
-## For two samples x and y from normal distributions with unknown means
-## and unknown equal variances, perform a two-sample t-test of the null
-## hypothesis of equal means.  Under the null, the test statistic
-## @var{t} follows a Student distribution with @var{df} degrees of
-## freedom.
+## For two samples x and y from normal distributions with unknown means and
+## unknown equal variances, perform a two-sample t-test of the null
+## hypothesis of equal means.
+##
+## Under the null, the test statistic @var{t} follows a Student distribution
+## with @var{df} degrees of freedom.
 ##
-## With the optional argument string @var{alt}, the alternative of
-## interest can be selected.  If @var{alt} is @qcode{"!="} or
-## @qcode{"<>"}, the null is tested against the two-sided alternative
-## @code{mean (@var{x}) != mean (@var{y})}.  If @var{alt} is @qcode{">"},
-## the one-sided alternative @code{mean (@var{x}) > mean (@var{y})} is
-## used.  Similarly for @qcode{"<"}, the one-sided alternative @code{mean
-## (@var{x}) < mean (@var{y})} is used.  The default is the two-sided
-## case.
+## With the optional argument string @var{alt}, the alternative of interest
+## can be selected.  If @var{alt} is @qcode{"!="} or @qcode{"<>"}, the null
+## is tested against the two-sided alternative @code{mean (@var{x}) != mean
+## (@var{y})}.  If @var{alt} is @qcode{">"}, the one-sided alternative
+## @code{mean (@var{x}) > mean (@var{y})} is used.  Similarly for
+## @qcode{"<"}, the one-sided alternative @code{mean (@var{x}) < mean
+## (@var{y})} is used.  The default is the two-sided case.
 ##
 ## The p-value of the test is returned in @var{pval}.
 ##
 ## If no output argument is given, the p-value of the test is displayed.
 ## @end deftypefn
 
 ## Author: KH <Kurt.Hornik@wu-wien.ac.at>
 ## Description: Student's two-sample t test
diff --git a/scripts/statistics/tests/t_test_regression.m b/scripts/statistics/tests/t_test_regression.m
--- a/scripts/statistics/tests/t_test_regression.m
+++ b/scripts/statistics/tests/t_test_regression.m
@@ -15,31 +15,30 @@
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {[@var{pval}, @var{t}, @var{df}] =} t_test_regression (@var{y}, @var{x}, @var{rr}, @var{r}, @var{alt})
 ## Perform a t test for the null hypothesis
 ## @nospell{@code{@var{rr} * @var{b} = @var{r}}} in a classical normal
-## regression model @code{@var{y} = @var{x} * @var{b} + @var{e}}.  Under the
-## null, the test statistic @var{t} follows a @var{t} distribution with
-## @var{df} degrees of freedom.
+## regression model @code{@var{y} = @var{x} * @var{b} + @var{e}}.
+##
+## Under the null, the test statistic @var{t} follows a @var{t} distribution
+## with @var{df} degrees of freedom.
 ##
 ## If @var{r} is omitted, a value of 0 is assumed.
 ##
-## With the optional argument string @var{alt}, the alternative of
-## interest can be selected.  If @var{alt} is @qcode{"!="} or
-## @qcode{"<>"}, the null is tested against the two-sided alternative
-## @nospell{@code{@var{rr} * @var{b} != @var{r}}}.  If @var{alt} is @qcode{">"},
-## the one-sided alternative
-## @nospell{@code{@var{rr} * @var{b} > @var{r}}} is used.  Similarly for
-## @var{"<"}, the one-sided alternative
-## @nospell{@code{@var{rr} * @var{b} < @var{r}}} is used.  The default is the
-## two-sided case.
+## With the optional argument string @var{alt}, the alternative of interest
+## can be selected.  If @var{alt} is @qcode{"!="} or @qcode{"<>"}, the null
+## is tested against the two-sided alternative @nospell{@code{@var{rr} *
+## @var{b} != @var{r}}}.  If @var{alt} is @qcode{">"}, the one-sided
+## alternative @nospell{@code{@var{rr} * @var{b} > @var{r}}} is used. 
+## Similarly for @var{"<"}, the one-sided alternative @nospell{@code{@var{rr}
+## * @var{b} < @var{r}}} is used.  The default is the two-sided case.
 ##
 ## The p-value of the test is returned in @var{pval}.
 ##
 ## If no output argument is given, the p-value of the test is displayed.
 ## @end deftypefn
 
 ## Author: KH <Kurt.Hornik@wu-wien.ac.at>
 ## Description: Test one linear hypothesis in linear regression model
diff --git a/scripts/statistics/tests/u_test.m b/scripts/statistics/tests/u_test.m
--- a/scripts/statistics/tests/u_test.m
+++ b/scripts/statistics/tests/u_test.m
@@ -14,28 +14,30 @@
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {[@var{pval}, @var{z}] =} u_test (@var{x}, @var{y}, @var{alt})
 ## For two samples @var{x} and @var{y}, perform a Mann-Whitney U-test of
-## the null hypothesis PROB (@var{x} > @var{y}) == 1/2 == PROB (@var{x}
-## < @var{y}).  Under the null, the test statistic @var{z} approximately
-## follows a standard normal distribution.  Note that this test is
-## equivalent to the Wilcoxon rank-sum test.
+## the null hypothesis
+## PROB (@var{x} > @var{y}) == 1/2 == PROB (@var{x} < @var{y}).
+##
+## Under the null, the test statistic @var{z} approximately follows a
+## standard normal distribution.  Note that this test is equivalent to the
+## Wilcoxon rank-sum test.
 ##
-## With the optional argument string @var{alt}, the alternative of
-## interest can be selected.  If @var{alt} is @qcode{"!="} or
-## @qcode{"<>"}, the null is tested against the two-sided alternative
-## PROB (@var{x} > @var{y}) != 1/2.  If @var{alt} is @qcode{">"}, the
-## one-sided alternative PROB (@var{x} > @var{y}) > 1/2 is considered.
-## Similarly for @qcode{"<"}, the one-sided alternative PROB (@var{x} >
-## @var{y}) < 1/2 is considered.  The default is the two-sided case.
+## With the optional argument string @var{alt}, the alternative of interest
+## can be selected.  If @var{alt} is @qcode{"!="} or @qcode{"<>"}, the null
+## is tested against the two-sided alternative
+## PROB (@var{x} > @var{y}) != 1/2.  If @var{alt} is @qcode{">"}, the one-sided
+## alternative PROB (@var{x} > @var{y}) > 1/2 is considered.  Similarly for
+## @qcode{"<"}, the one-sided alternative PROB (@var{x} > @var{y}) < 1/2 is
+## considered.  The default is the two-sided case.
 ##
 ## The p-value of the test is returned in @var{pval}.
 ##
 ## If no output argument is given, the p-value of the test is displayed.
 ## @end deftypefn
 
 ## This implementation is still incomplete---for small sample sizes,
 ## the normal approximation is rather bad ...
diff --git a/scripts/statistics/tests/var_test.m b/scripts/statistics/tests/var_test.m
--- a/scripts/statistics/tests/var_test.m
+++ b/scripts/statistics/tests/var_test.m
@@ -15,28 +15,28 @@
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {[@var{pval}, @var{f}, @var{df_num}, @var{df_den}] =} var_test (@var{x}, @var{y}, @var{alt})
 ## For two samples @var{x} and @var{y} from normal distributions with
 ## unknown means and unknown variances, perform an F-test of the null
-## hypothesis of equal variances.  Under the null, the test statistic
-## @var{f} follows an F-distribution with @var{df_num} and @var{df_den}
-## degrees of freedom.
+## hypothesis of equal variances.
+##
+## Under the null, the test statistic @var{f} follows an F-distribution with
+## @var{df_num} and @var{df_den} degrees of freedom.
 ##
-## With the optional argument string @var{alt}, the alternative of
-## interest can be selected.  If @var{alt} is @qcode{"!="} or
-## @qcode{"<>"}, the null is tested against the two-sided alternative
-## @code{var (@var{x}) != var (@var{y})}.  If @var{alt} is @qcode{">"},
-## the one-sided alternative @code{var (@var{x}) > var (@var{y})} is
-## used.  Similarly for "<", the one-sided alternative @code{var
-## (@var{x}) > var (@var{y})} is used.  The default is the two-sided
-## case.
+## With the optional argument string @var{alt}, the alternative of interest
+## can be selected.  If @var{alt} is @qcode{"!="} or @qcode{"<>"}, the null
+## is tested against the two-sided alternative @code{var (@var{x}) != var
+## (@var{y})}.  If @var{alt} is @qcode{">"}, the one-sided alternative
+## @code{var (@var{x}) > var (@var{y})} is used.  Similarly for "<", the
+## one-sided alternative @code{var (@var{x}) > var (@var{y})} is used.  The
+## default is the two-sided case.
 ##
 ## The p-value of the test is returned in @var{pval}.
 ##
 ## If no output argument is given, the p-value of the test is displayed.
 ## @end deftypefn
 
 ## Author: KH <Kurt.Hornik@wu-wien.ac.at>
 ## Description: F test to compare two variances
diff --git a/scripts/statistics/tests/welch_test.m b/scripts/statistics/tests/welch_test.m
--- a/scripts/statistics/tests/welch_test.m
+++ b/scripts/statistics/tests/welch_test.m
@@ -16,26 +16,27 @@
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {[@var{pval}, @var{t}, @var{df}] =} welch_test (@var{x}, @var{y}, @var{alt})
 ## For two samples @var{x} and @var{y} from normal distributions with
 ## unknown means and unknown and not necessarily equal variances,
 ## perform a Welch test of the null hypothesis of equal means.
+##
 ## Under the null, the test statistic @var{t} approximately follows a
 ## Student distribution with @var{df} degrees of freedom.
 ##
-## With the optional argument string @var{alt}, the alternative of
-## interest can be selected.  If @var{alt} is @qcode{"!="} or
-## @qcode{"<>"}, the null is tested against the two-sided alternative
+## With the optional argument string @var{alt}, the alternative of interest
+## can be selected.  If @var{alt} is @qcode{"!="} or @qcode{"<>"}, the null
+## is tested against the two-sided alternative
 ## @code{mean (@var{x}) != @var{m}}.  If @var{alt} is @qcode{">"}, the
 ## one-sided alternative mean(x) > @var{m} is considered.  Similarly for
-## @qcode{"<"}, the one-sided alternative mean(x) < @var{m} is
-## considered.  The default is the two-sided case.
+## @qcode{"<"}, the one-sided alternative mean(x) < @var{m} is considered.
+## The default is the two-sided case.
 ##
 ## The p-value of the test is returned in @var{pval}.
 ##
 ## If no output argument is given, the p-value of the test is displayed.
 ## @end deftypefn
 
 ## Author: KH <Kurt.Hornik@wu-wien.ac.at>
 ## Description: Welch two-sample t test
diff --git a/scripts/statistics/tests/wilcoxon_test.m b/scripts/statistics/tests/wilcoxon_test.m
--- a/scripts/statistics/tests/wilcoxon_test.m
+++ b/scripts/statistics/tests/wilcoxon_test.m
@@ -14,30 +14,32 @@
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {[@var{pval}, @var{z}] =} wilcoxon_test (@var{x}, @var{y}, @var{alt})
 ## For two matched-pair sample vectors @var{x} and @var{y}, perform a
-## Wilcoxon signed-rank test of the null hypothesis PROB (@var{x} >
-## @var{y}) == 1/2.  Under the null, the test statistic @var{z}
-## approximately follows a standard normal distribution when @var{n} > 25.
+## Wilcoxon signed-rank test of the null hypothesis
+## PROB (@var{x} > @var{y}) == 1/2.
+##
+## Under the null, the test statistic @var{z} approximately follows a
+## standard normal distribution when @var{n} > 25.
 ##
 ## @strong{Caution:} This function assumes a normal distribution for @var{z}
 ## and thus is invalid for @var{n} @leq{} 25.
 ##
-## With the optional argument string @var{alt}, the alternative of
-## interest can be selected.  If @var{alt} is @qcode{"!="} or
-## @qcode{"<>"}, the null is tested against the two-sided alternative
+## With the optional argument string @var{alt}, the alternative of interest
+## can be selected.  If @var{alt} is @qcode{"!="} or @qcode{"<>"}, the null
+## is tested against the two-sided alternative
 ## PROB (@var{x} > @var{y}) != 1/2.  If alt is @qcode{">"}, the one-sided
-## alternative PROB (@var{x} > @var{y}) > 1/2 is considered.  Similarly
-## for @qcode{"<"}, the one-sided alternative PROB (@var{x} > @var{y}) <
-## 1/2 is considered.  The default is the two-sided case.
+## alternative PROB (@var{x} > @var{y}) > 1/2 is considered.  Similarly for
+## @qcode{"<"}, the one-sided alternative PROB (@var{x} > @var{y}) < 1/2 is
+## considered.  The default is the two-sided case.
 ##
 ## The p-value of the test is returned in @var{pval}.
 ##
 ## If no output argument is given, the p-value of the test is displayed.
 ## @end deftypefn
 
 ## Author: KH <Kurt.Hornik@wu-wien.ac.at>
 ## Description: Wilcoxon signed-rank test
diff --git a/scripts/statistics/tests/z_test.m b/scripts/statistics/tests/z_test.m
--- a/scripts/statistics/tests/z_test.m
+++ b/scripts/statistics/tests/z_test.m
@@ -13,34 +13,36 @@
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {[@var{pval}, @var{z}] =} z_test (@var{x}, @var{m}, @var{v}, @var{alt})
-## Perform a Z-test of the null hypothesis @code{mean (@var{x}) ==
-## @var{m}} for a sample @var{x} from a normal distribution with unknown
-## mean and known variance @var{v}.  Under the null, the test statistic
-## @var{z} follows a standard normal distribution.
+## Perform a Z-test of the null hypothesis @code{mean (@var{x}) == @var{m}}
+## for a sample @var{x} from a normal distribution with unknown mean and known
+## variance @var{v}.
 ##
-## With the optional argument string @var{alt}, the alternative of
-## interest can be selected.  If @var{alt} is @qcode{"!="} or
-## @qcode{"<>"}, the null is tested against the two-sided alternative
+## Under the null, the test statistic @var{z} follows a standard normal
+## distribution.
+##
+## With the optional argument string @var{alt}, the alternative of interest
+## can be selected.  If @var{alt} is @qcode{"!="} or @qcode{"<>"}, the null
+## is tested against the two-sided alternative
 ## @code{mean (@var{x}) != @var{m}}.  If @var{alt} is @qcode{">"}, the
 ## one-sided alternative @code{mean (@var{x}) > @var{m}} is considered.
-## Similarly for @qcode{"<"}, the one-sided alternative @code{mean
-## (@var{x}) < @var{m}} is considered.  The default is the two-sided
+## Similarly for @qcode{"<"}, the one-sided alternative
+## @code{mean (@var{x}) < @var{m}} is considered.  The default is the two-sided
 ## case.
 ##
 ## The p-value of the test is returned in @var{pval}.
 ##
-## If no output argument is given, the p-value of the test is displayed
-## along with some information.
+## If no output argument is given, the p-value of the test is displayed along
+## with some information.
 ## @end deftypefn
 
 ## Author: KH <Kurt.Hornik@wu-wien.ac.at>
 ## Description: Test for mean of a normal sample with known variance
 
 function [pval, z] = z_test (x, m, v, alt)
 
   if (nargin < 3 || nargin > 4)
diff --git a/scripts/statistics/tests/z_test_2.m b/scripts/statistics/tests/z_test_2.m
--- a/scripts/statistics/tests/z_test_2.m
+++ b/scripts/statistics/tests/z_test_2.m
@@ -13,34 +13,36 @@
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {[@var{pval}, @var{z}] =} z_test_2 (@var{x}, @var{y}, @var{v_x}, @var{v_y}, @var{alt})
-## For two samples @var{x} and @var{y} from normal distributions with
-## unknown means and known variances @var{v_x} and @var{v_y}, perform a
-## Z-test of the hypothesis of equal means.  Under the null, the test
-## statistic @var{z} follows a standard normal distribution.
+## For two samples @var{x} and @var{y} from normal distributions with unknown
+## means and known variances @var{v_x} and @var{v_y}, perform a Z-test of the
+## hypothesis of equal means.
 ##
-## With the optional argument string @var{alt}, the alternative of
-## interest can be selected.  If @var{alt} is @qcode{"!="} or
-## @qcode{"<>"}, the null is tested against the two-sided alternative
+## Under the null, the test statistic @var{z} follows a standard normal
+## distribution.
+##
+## With the optional argument string @var{alt}, the alternative of interest
+## can be selected.  If @var{alt} is @qcode{"!="} or @qcode{"<>"}, the null
+## is tested against the two-sided alternative
 ## @code{mean (@var{x}) != mean (@var{y})}.  If alt is @qcode{">"}, the
 ## one-sided alternative @code{mean (@var{x}) > mean (@var{y})} is used.
-## Similarly for @qcode{"<"}, the one-sided alternative @code{mean
-## (@var{x}) < mean (@var{y})} is used.  The default is the two-sided
-## case.
+## Similarly for @qcode{"<"}, the one-sided alternative
+## @code{mean (@var{x}) < mean (@var{y})} is used.  The default is the
+## two-sided case.
 ##
 ## The p-value of the test is returned in @var{pval}.
 ##
-## If no output argument is given, the p-value of the test is displayed
-## along with some information.
+## If no output argument is given, the p-value of the test is displayed along
+## with some information.
 ## @end deftypefn
 
 ## Author: KH <Kurt.Hornik@wu-wien.ac.at>
 ## Description: Compare means of two normal samples with known variances
 
 function [pval, z] = z_test_2 (x, y, v_x, v_y, alt)
 
   if (nargin < 4 || nargin > 5)
diff --git a/scripts/strings/base2dec.m b/scripts/strings/base2dec.m
--- a/scripts/strings/base2dec.m
+++ b/scripts/strings/base2dec.m
@@ -24,25 +24,24 @@
 ## @example
 ## @group
 ## base2dec ("11120", 3)
 ##    @result{} 123
 ## @end group
 ## @end example
 ##
 ## If @var{s} is a string matrix, return a column vector with one value per
-## row of @var{s}.  If a row contains invalid symbols then the
-## corresponding value will be NaN@.
+## row of @var{s}.  If a row contains invalid symbols then the corresponding
+## value will be NaN@.
 ##
 ## If @var{s} is a cell array of strings, return a column vector with one
 ## value per cell element in @var{s}.
 ##
 ## If @var{base} is a string, the characters of @var{base} are used as the
-## symbols for the digits of @var{s}.  Space (' ') may not be used as a
-## symbol.
+## symbols for the digits of @var{s}.  Space (' ') may not be used as a symbol.
 ##
 ## @example
 ## @group
 ## base2dec ("yyyzx", "xyz")
 ##    @result{} 123
 ## @end group
 ## @end example
 ## @seealso{dec2base, bin2dec, hex2dec}
diff --git a/scripts/strings/bin2dec.m b/scripts/strings/bin2dec.m
--- a/scripts/strings/bin2dec.m
+++ b/scripts/strings/bin2dec.m
@@ -14,17 +14,19 @@
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} bin2dec (@var{s})
 ## Return the decimal number corresponding to the binary number represented
-## by the string @var{s}.  For example:
+## by the string @var{s}.
+##
+## For example:
 ##
 ## @example
 ## @group
 ## bin2dec ("1110")
 ##      @result{} 14
 ## @end group
 ## @end example
 ##
diff --git a/scripts/strings/blanks.m b/scripts/strings/blanks.m
--- a/scripts/strings/blanks.m
+++ b/scripts/strings/blanks.m
@@ -13,17 +13,19 @@
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} blanks (@var{n})
-## Return a string of @var{n} blanks, for example:
+## Return a string of @var{n} blanks.
+##
+## For example:
 ##
 ## @example
 ## @group
 ## blanks (10);
 ## whos ans
 ##      @result{}
 ##       Attr Name        Size                     Bytes  Class
 ##       ==== ====        ====                     =====  =====
diff --git a/scripts/strings/cstrcat.m b/scripts/strings/cstrcat.m
--- a/scripts/strings/cstrcat.m
+++ b/scripts/strings/cstrcat.m
@@ -13,18 +13,20 @@
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} cstrcat (@var{s1}, @var{s2}, @dots{})
-## Return a string containing all the arguments concatenated
-## horizontally.  Trailing white space is preserved.  For example:
+## Return a string containing all the arguments concatenated horizontally
+## with trailing white space preserved.
+##
+## For example:
 ##
 ## @example
 ## @group
 ## cstrcat ("ab   ", "cd")
 ##       @result{} "ab   cd"
 ## @end group
 ## @end example
 ##
diff --git a/scripts/strings/deblank.m b/scripts/strings/deblank.m
--- a/scripts/strings/deblank.m
+++ b/scripts/strings/deblank.m
@@ -13,20 +13,21 @@
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} deblank (@var{s})
-## Remove trailing whitespace and nulls from @var{s}.  If @var{s}
-## is a matrix, @var{deblank} trims each row to the length of longest
-## string.  If @var{s} is a cell array of strings, operate recursively on each
-## string element.
+## Remove trailing whitespace and nulls from @var{s}.
+##
+## If @var{s} is a matrix, @var{deblank} trims each row to the length of
+## longest string.  If @var{s} is a cell array of strings, operate
+## recursively on each string element.
 ##
 ## Examples:
 ##
 ## @example
 ## @group
 ## deblank ("    abc  ")
 ##      @result{}  "    abc"
 ##
diff --git a/scripts/strings/dec2base.m b/scripts/strings/dec2base.m
--- a/scripts/strings/dec2base.m
+++ b/scripts/strings/dec2base.m
@@ -14,43 +14,43 @@
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {} dec2base (@var{d}, @var{base})
 ## @deftypefnx {Function File} {} dec2base (@var{d}, @var{base}, @var{len})
-## Return a string of symbols in base @var{base} corresponding to
-## the non-negative integer @var{d}.
+## Return a string of symbols in base @var{base} corresponding to the
+## non-negative integer @var{d}.
 ##
 ## @example
 ## @group
 ## dec2base (123, 3)
 ##    @result{} "11120"
 ## @end group
 ## @end example
 ##
-## If @var{d} is a matrix or cell array, return a string matrix with one
-## row per element in @var{d}, padded with leading zeros to the width of
-## the largest value.
+## If @var{d} is a matrix or cell array, return a string matrix with one row
+## per element in @var{d}, padded with leading zeros to the width of the
+## largest value.
 ##
 ## If @var{base} is a string then the characters of @var{base} are used as
-## the symbols for the digits of @var{d}.  Space (' ') may not be used
-## as a symbol.
+## the symbols for the digits of @var{d}.  Space (' ') may not be used as a
+## symbol.
 ##
 ## @example
 ## @group
 ## dec2base (123, "aei")
 ##    @result{} "eeeia"
 ## @end group
 ## @end example
 ##
-## The optional third argument, @var{len}, specifies the minimum
-## number of digits in the result.
+## The optional third argument, @var{len}, specifies the minimum number of
+## digits in the result.
 ## @seealso{base2dec, dec2bin, dec2hex}
 ## @end deftypefn
 
 ## Author: Daniel Calvelo <dcalvelo@yahoo.com>
 ## Adapted-by: Paul Kienzle <pkienzle@kienzle.powernet.co.uk>
 
 function retval = dec2base (d, base, len)
 
diff --git a/scripts/strings/dec2bin.m b/scripts/strings/dec2bin.m
--- a/scripts/strings/dec2bin.m
+++ b/scripts/strings/dec2bin.m
@@ -13,32 +13,34 @@
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} dec2bin (@var{d}, @var{len})
-## Return a binary number corresponding to the non-negative integer
-## @var{d}, as a string of ones and zeros.  For example:
+## Return a binary number corresponding to the non-negative integer @var{d},
+## as a string of ones and zeros.
+##
+## For example:
 ##
 ## @example
 ## @group
 ## dec2bin (14)
 ##      @result{} "1110"
 ## @end group
 ## @end example
 ##
-## If @var{d} is a matrix or cell array, return a string matrix with one
-## row per element in @var{d}, padded with leading zeros to the width of
-## the largest value.
+## If @var{d} is a matrix or cell array, return a string matrix with one row
+## per element in @var{d}, padded with leading zeros to the width of the
+## largest value.
 ##
-## The optional second argument, @var{len}, specifies the minimum
-## number of digits in the result.
+## The optional second argument, @var{len}, specifies the minimum number of
+## digits in the result.
 ## @seealso{bin2dec, dec2base, dec2hex}
 ## @end deftypefn
 
 ## Author: Daniel Calvelo <dcalvelo@yahoo.com>
 ## Adapted-by: Paul Kienzle <pkienzle@kienzle.powernet.co.uk>
 
 function b = dec2bin (d, len)
 
diff --git a/scripts/strings/dec2hex.m b/scripts/strings/dec2hex.m
--- a/scripts/strings/dec2hex.m
+++ b/scripts/strings/dec2hex.m
@@ -13,32 +13,34 @@
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} dec2hex (@var{d}, @var{len})
-## Return the hexadecimal string corresponding to the non-negative
-## integer @var{d}.  For example:
+## Return the hexadecimal string corresponding to the non-negative integer
+## @var{d}.
+##
+## For example:
 ##
 ## @example
 ## @group
 ## dec2hex (2748)
 ##      @result{} "ABC"
 ## @end group
 ## @end example
 ##
-## If @var{d} is a matrix or cell array, return a string matrix with one
-## row per element in @var{d}, padded with leading zeros to the width of
-## the largest value.
+## If @var{d} is a matrix or cell array, return a string matrix with one row
+## per element in @var{d}, padded with leading zeros to the width of the
+## largest value.
 ##
-## The optional second argument, @var{len}, specifies the minimum
-## number of digits in the result.
+## The optional second argument, @var{len}, specifies the minimum number of
+## digits in the result.
 ## @seealso{hex2dec, dec2base, dec2bin}
 ## @end deftypefn
 
 ## Author: Daniel Calvelo <dcalvelo@yahoo.com>
 ## Adapted-by: Paul Kienzle <pkienzle@kienzle.powernet.co.uk>
 
 function h = dec2hex (d, len)
 
diff --git a/scripts/strings/findstr.m b/scripts/strings/findstr.m
--- a/scripts/strings/findstr.m
+++ b/scripts/strings/findstr.m
@@ -14,20 +14,21 @@
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {} findstr (@var{s}, @var{t})
 ## @deftypefnx {Function File} {} findstr (@var{s}, @var{t}, @var{overlap})
-## Return the vector of all positions in the longer of the two strings
-## @var{s} and @var{t} where an occurrence of the shorter of the two starts.
-## If the optional argument @var{overlap} is true, the returned vector
-## can include overlapping positions (this is the default).  For example:
+## Return the vector of all positions in the longer of the two strings @var{s}
+## and @var{t} where an occurrence of the shorter of the two starts.
+##
+## If the optional argument @var{overlap} is true (default), the returned
+## vector can include overlapping positions.  For example:
 ##
 ## @example
 ## @group
 ## findstr ("ababab", "a")
 ##      @result{} [1, 3, 5];
 ## findstr ("abababa", "aba", 0)
 ##      @result{} [1, 5]
 ## @end group
diff --git a/scripts/strings/hex2dec.m b/scripts/strings/hex2dec.m
--- a/scripts/strings/hex2dec.m
+++ b/scripts/strings/hex2dec.m
@@ -13,18 +13,20 @@
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} hex2dec (@var{s})
-## Return the integer corresponding to the hexadecimal number represented
-## by the string @var{s}.  For example:
+## Return the integer corresponding to the hexadecimal number represented by
+## the string @var{s}.
+##
+## For example:
 ##
 ## @example
 ## @group
 ## hex2dec ("12B")
 ##       @result{} 299
 ## hex2dec ("12b")
 ##       @result{} 299
 ## @end group
diff --git a/scripts/strings/index.m b/scripts/strings/index.m
--- a/scripts/strings/index.m
+++ b/scripts/strings/index.m
@@ -15,18 +15,19 @@
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {} index (@var{s}, @var{t})
 ## @deftypefnx {Function File} {} index (@var{s}, @var{t}, @var{direction})
 ## Return the position of the first occurrence of the string @var{t} in the
-## string @var{s}, or 0 if no occurrence is found.  @var{s} may also be a
-## string array or cell array of strings.
+## string @var{s}, or 0 if no occurrence is found.
+##
+## @var{s} may also be a string array or cell array of strings.
 ##
 ## For example:
 ##
 ## @example
 ## @group
 ## index ("Teststring", "t")
 ##     @result{} 4
 ## @end group
diff --git a/scripts/strings/isletter.m b/scripts/strings/isletter.m
--- a/scripts/strings/isletter.m
+++ b/scripts/strings/isletter.m
@@ -14,18 +14,19 @@
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} isletter (@var{s})
 ## Return a logical array which is true where the elements of @var{s}
-## are letters and false where they are not.  This is an alias for
-## the @code{isalpha} function.
+## are letters and false where they are not.
+##
+## This is an alias for the @code{isalpha} function.
 ## @seealso{isalpha, isdigit, ispunct, isspace, iscntrl, isalnum}
 ## @end deftypefn
 
 ## Author: jwe
 
 function retval = isletter (s)
 
   if (nargin != 1)
diff --git a/scripts/strings/isstrprop.m b/scripts/strings/isstrprop.m
--- a/scripts/strings/isstrprop.m
+++ b/scripts/strings/isstrprop.m
@@ -13,27 +13,29 @@
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} isstrprop (@var{str}, @var{prop})
-## Test character string properties.  For example:
+## Test character string properties.
+##
+## For example:
 ##
 ## @example
 ## @group
 ## isstrprop ("abc123", "alpha")
 ## @result{} [1, 1, 1, 0, 0, 0]
 ## @end group
 ## @end example
 ##
-## If @var{str} is a cell array, @code{isstrpop} is applied recursively
-## to each element of the cell array.
+## If @var{str} is a cell array, @code{isstrpop} is applied recursively to
+## each element of the cell array.
 ##
 ## Numeric arrays are converted to character strings.
 ##
 ## The second argument @var{prop} must be one of
 ##
 ## @table @asis
 ## @item @qcode{"alpha"}
 ## True for characters that are alphabetic (letters).
@@ -51,22 +53,22 @@
 ## @item @qcode{"digit"}
 ## True for decimal digits (0-9).
 ##
 ## @item @qcode{"xdigit"}
 ## True for hexadecimal digits (@nospell{a-fA-F0-9}).
 ##
 ## @item  @qcode{"space"}
 ## @itemx @qcode{"wspace"}
-## True for whitespace characters (space, formfeed, newline, carriage
-## return, tab, vertical tab).
+## True for whitespace characters (space, formfeed, newline, carriage return,
+## tab, vertical tab).
 ##
 ## @item @qcode{"punct"}
-## True for punctuation characters (printing characters except space
-## or letter or digit).
+## True for punctuation characters (printing characters except space or
+## letter or digit).
 ##
 ## @item @qcode{"cntrl"}
 ## True for control characters.
 ##
 ## @item  @qcode{"graph"}
 ## @itemx @qcode{"graphic"}
 ## True for printing characters except space.
 ##
diff --git a/scripts/strings/mat2str.m b/scripts/strings/mat2str.m
--- a/scripts/strings/mat2str.m
+++ b/scripts/strings/mat2str.m
@@ -14,25 +14,26 @@
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {@var{s} =} mat2str (@var{x}, @var{n})
 ## @deftypefnx {Function File} {@var{s} =} mat2str (@var{x}, @var{n}, "class")
-## Format real, complex, and logical matrices as strings.  The
-## returned string may be used to reconstruct the original matrix by using
+## Format real, complex, and logical matrices as strings.
+##
+## The returned string may be used to reconstruct the original matrix by using
 ## the @code{eval} function.
 ##
-## The precision of the values is given by @var{n}.  If @var{n} is a
-## scalar then both real and imaginary parts of the matrix are printed
-## to the same precision.  Otherwise @code{@var{n}(1)} defines the
-## precision of the real part and @code{@var{n}(2)} defines the
-## precision of the imaginary part.  The default for @var{n} is 15.
+## The precision of the values is given by @var{n}.  If @var{n} is a scalar
+## then both real and imaginary parts of the matrix are printed to the same
+## precision.  Otherwise @code{@var{n}(1)} defines the precision of the real
+## part and @code{@var{n}(2)} defines the precision of the imaginary part. 
+## The default for @var{n} is 15.
 ##
 ## If the argument @qcode{"class"} is given then the class of @var{x} is
 ## included in the string in such a way that @code{eval} will result in the
 ## construction of a matrix of the same class.
 ##
 ## @example
 ## @group
 ## mat2str ([ -1/3 + i/7; 1/3 - i/7 ], [4 2])
diff --git a/scripts/strings/ostrsplit.m b/scripts/strings/ostrsplit.m
--- a/scripts/strings/ostrsplit.m
+++ b/scripts/strings/ostrsplit.m
@@ -15,19 +15,21 @@
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {[@var{cstr}] =} ostrsplit (@var{s}, @var{sep})
 ## @deftypefnx {Function File} {[@var{cstr}] =} ostrsplit (@var{s}, @var{sep}, @var{strip_empty})
 ## Split the string @var{s} using one or more separators @var{sep} and return
-## a cell array of strings.  Consecutive separators and separators at
-## boundaries result in empty strings, unless @var{strip_empty} is true.
-## The default value of @var{strip_empty} is false.
+## a cell array of strings.
+##
+## Consecutive separators and separators at boundaries result in empty
+## strings, unless @var{strip_empty} is true.  The default value of
+## @var{strip_empty} is false.
 ##
 ## 2-D character arrays are split at separators and at the original column
 ## boundaries.
 ##
 ## Example:
 ##
 ## @example
 ## @group
diff --git a/scripts/strings/regexptranslate.m b/scripts/strings/regexptranslate.m
--- a/scripts/strings/regexptranslate.m
+++ b/scripts/strings/regexptranslate.m
@@ -13,26 +13,27 @@
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} regexptranslate (@var{op}, @var{s})
-## Translate a string for use in a regular expression.  This may
-## include either wildcard replacement or special character escaping.
+## Translate a string for use in a regular expression.
+##
+## This may include either wildcard replacement or special character escaping.
+##
 ## The behavior is controlled by @var{op} which can take the following
 ## values
 ##
 ## @table @asis
 ## @item @qcode{"wildcard"}
-## The wildcard characters @code{.}, @code{*}, and @code{?} are replaced
-## with wildcards that are appropriate for a regular expression.
-## For example:
+## The wildcard characters @code{.}, @code{*}, and @code{?} are replaced with
+## wildcards that are appropriate for a regular expression.  For example:
 ##
 ## @example
 ## @group
 ## regexptranslate ("wildcard", "*.m")
 ##      @result{} ".*\.m"
 ## @end group
 ## @end example
 ##
diff --git a/scripts/strings/rindex.m b/scripts/strings/rindex.m
--- a/scripts/strings/rindex.m
+++ b/scripts/strings/rindex.m
@@ -15,17 +15,19 @@
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} rindex (@var{s}, @var{t})
 ## Return the position of the last occurrence of the character string
 ## @var{t} in the character string @var{s}, or 0 if no occurrence is
-## found.  @var{s} may also be a string array or cell array of strings.
+## found.
+##
+## @var{s} may also be a string array or cell array of strings.
 ##
 ## For example:
 ##
 ## @example
 ## @group
 ## rindex ("Teststring", "t")
 ##      @result{} 6
 ## @end group
diff --git a/scripts/strings/str2num.m b/scripts/strings/str2num.m
--- a/scripts/strings/str2num.m
+++ b/scripts/strings/str2num.m
@@ -14,38 +14,38 @@
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {@var{x} =} str2num (@var{s})
 ## @deftypefnx {Function File} {[@var{x}, @var{state}] =} str2num (@var{s})
-## Convert the string (or character array) @var{s} to a number (or an
-## array).  Examples:
+## Convert the string (or character array) @var{s} to a number (or an array).
+##
+## Examples:
 ##
 ## @example
 ## @group
 ## str2num ("3.141596")
 ##       @result{} 3.141596
 ##
 ## str2num (["1, 2, 3"; "4, 5, 6"])
 ##       @result{} 1  2  3
 ##          4  5  6
 ## @end group
 ## @end example
 ##
 ## The optional second output, @var{state}, is logically true when the
 ## conversion is successful.  If the conversion fails the numeric output,
 ## @var{x}, is empty and @var{state} is false.
 ##
-## @strong{Caution:} As @code{str2num} uses the @code{eval} function
-## to do the conversion, @code{str2num} will execute any code contained
-## in the string @var{s}.  Use @code{str2double} for a safer and faster
-## conversion.
+## @strong{Caution:} As @code{str2num} uses the @code{eval} function to do the
+## conversion, @code{str2num} will execute any code contained in the string
+## @var{s}.  Use @code{str2double} for a safer and faster conversion.
 ##
 ## For cell array of strings use @code{str2double}.
 ## @seealso{str2double, eval}
 ## @end deftypefn
 
 ## Author: jwe
 
 function [m, state] = str2num (s)
diff --git a/scripts/strings/strcat.m b/scripts/strings/strcat.m
--- a/scripts/strings/strcat.m
+++ b/scripts/strings/strcat.m
@@ -15,21 +15,22 @@
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} strcat (@var{s1}, @var{s2}, @dots{})
 ## Return a string containing all the arguments concatenated
-## horizontally.  If the arguments are cell strings, @code{strcat}
-## returns a cell string with the individual cells concatenated.
-## For numerical input, each element is converted to the
-## corresponding ASCII character.  Trailing white space for any
-## character string input is eliminated before the strings are
+## horizontally.
+##
+## If the arguments are cell strings, @code{strcat} returns a cell string
+## with the individual cells concatenated.  For numerical input, each element
+## is converted to the corresponding ASCII character.  Trailing white space
+## for any character string input is eliminated before the strings are
 ## concatenated.  Note that cell string values do @strong{not} have
 ## whitespace trimmed.
 ##
 ## For example:
 ##
 ## @example
 ## @group
 ## strcat ("|", " leading space is preserved", "|")
diff --git a/scripts/strings/strchr.m b/scripts/strings/strchr.m
--- a/scripts/strings/strchr.m
+++ b/scripts/strings/strchr.m
@@ -17,18 +17,20 @@
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {@var{idx} =} strchr (@var{str}, @var{chars})
 ## @deftypefnx {Function File} {@var{idx} =} strchr (@var{str}, @var{chars}, @var{n})
 ## @deftypefnx {Function File} {@var{idx} =} strchr (@var{str}, @var{chars}, @var{n}, @var{direction})
 ## @deftypefnx {Function File} {[@var{i}, @var{j}] =} strchr (@dots{})
 ## Search for the string @var{str} for occurrences of characters from
-## the set @var{chars}.  The return value(s), as well as the @var{n} and
-## @var{direction} arguments behave identically as in @code{find}.
+## the set @var{chars}.
+##
+## The return value(s), as well as the @var{n} and @var{direction} arguments
+## behave identically as in @code{find}.
 ##
 ## This will be faster than using regexp in most cases.
 ##
 ## @seealso{find}
 ## @end deftypefn
 
 function varargout = strchr (str, chars, varargin)
 
diff --git a/scripts/strings/strjoin.m b/scripts/strings/strjoin.m
--- a/scripts/strings/strjoin.m
+++ b/scripts/strings/strjoin.m
@@ -18,26 +18,26 @@
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {@var{str} =} strjoin (@var{cstr})
 ## @deftypefnx {Function File} {@var{str} =} strjoin (@var{cstr}, @var{delimiter})
 ## Join the elements of the cell string array, @var{cstr}, into a single
 ## string.
 ##
-## If no @var{delimiter} is specified, the elements of @var{cstr}
+## If no @var{delimiter} is specified, the elements of @var{cstr} are
 ## separated by a space.
 ##
 ## If @var{delimiter} is specified as a string, the cell string array is
 ## joined using the string.  Escape sequences are supported.
 ##
-## If @var{delimiter} is a cell string array whose length is one less
-## than @var{cstr}, then the elements of @var{cstr} are joined by
-## interleaving the cell string elements of @var{delimiter}.  Escape
-## sequences are not supported.
+## If @var{delimiter} is a cell string array whose length is one less than
+## @var{cstr}, then the elements of @var{cstr} are joined by interleaving the
+## cell string elements of @var{delimiter}.  Escape sequences are not
+## supported.
 ##
 ## @example
 ## @group
 ## strjoin (@{'Octave','Scilab','Lush','Yorick'@}, '*')
 ##       @result{} 'Octave*Scilab*Lush*Yorick'
 ## @end group
 ## @end example
 ## @seealso{strsplit}
diff --git a/scripts/strings/strjust.m b/scripts/strings/strjust.m
--- a/scripts/strings/strjust.m
+++ b/scripts/strings/strjust.m
@@ -16,21 +16,22 @@
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {} strjust (@var{s})
 ## @deftypefnx {Function File} {} strjust (@var{s}, @var{pos})
 ## Return the text, @var{s}, justified according to @var{pos}, which may
-## be @qcode{"left"}, @qcode{"center"}, or @qcode{"right"}.  If @var{pos}
-## is omitted it defaults to @qcode{"right"}.
+## be @qcode{"left"}, @qcode{"center"}, or @qcode{"right"}.
 ##
-## Null characters are replaced by spaces.  All other character
-## data are treated as non-white space.
+## If @var{pos} is omitted it defaults to @qcode{"right"}.
+##
+## Null characters are replaced by spaces.  All other character data are
+## treated as non-white space.
 ##
 ## Example:
 ##
 ## @example
 ## @group
 ## strjust (["a"; "ab"; "abc"; "abcd"])
 ##      @result{}
 ##         "   a"
diff --git a/scripts/strings/strmatch.m b/scripts/strings/strmatch.m
--- a/scripts/strings/strmatch.m
+++ b/scripts/strings/strmatch.m
@@ -17,20 +17,23 @@
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {} strmatch (@var{s}, @var{A})
 ## @deftypefnx {Function File} {} strmatch (@var{s}, @var{A}, "exact")
 ## Return indices of entries of @var{A} which begin with the string @var{s}.
+##
 ## The second argument @var{A} must be a string, character matrix, or a cell
-## array of strings.  If the third argument @qcode{"exact"} is not given, then
-## @var{s} only needs to match @var{A} up to the length of @var{s}.
-## Trailing spaces and nulls in @var{s} and @var{A} are ignored when matching.
+## array of strings.
+##
+## If the third argument @qcode{"exact"} is not given, then @var{s} only
+## needs to match @var{A} up to the length of @var{s}.  Trailing spaces and
+## nulls in @var{s} and @var{A} are ignored when matching.
 ##
 ## For example:
 ##
 ## @example
 ## @group
 ## strmatch ("apple", "apple juice")
 ##      @result{} 1
 ##
diff --git a/scripts/strings/strsplit.m b/scripts/strings/strsplit.m
--- a/scripts/strings/strsplit.m
+++ b/scripts/strings/strsplit.m
@@ -16,18 +16,18 @@
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {[@var{cstr}] =} strsplit (@var{str})
 ## @deftypefnx {Function File} {[@var{cstr}] =} strsplit (@var{str}, @var{del})
 ## @deftypefnx {Function File} {[@var{cstr}] =} strsplit (@dots{}, @var{name}, @var{value})
 ## @deftypefnx {Function File} {[@var{cstr}, @var{matches}] =} strsplit (@dots{})
-## Split the string @var{str} using the delimiters specified by @var{del}
-## and return a cell string array of substrings.
+## Split the string @var{str} using the delimiters specified by @var{del} and
+## return a cell string array of substrings.
 ##
 ## If a delimiter is not specified the string is split at whitespace
 ## @code{@{" ", "\f", "\n", "\r", "\t", "\v"@}}.  Otherwise, the delimiter,
 ## @var{del} must be a string or cell array of strings.  By default,
 ## consecutive delimiters in the input string @var{s} are collapsed into one
 ## resulting in a single split.
 ##
 ## Supported @var{name}/@var{value} pair arguments are:
diff --git a/scripts/strings/strtok.m b/scripts/strings/strtok.m
--- a/scripts/strings/strtok.m
+++ b/scripts/strings/strtok.m
@@ -16,22 +16,27 @@
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {[@var{tok}, @var{rem}] =} strtok (@var{str})
 ## @deftypefnx {Function File} {[@var{tok}, @var{rem}] =} strtok (@var{str}, @var{delim})
 ##
 ## Find all characters in the string @var{str} up to, but not including, the
-## first character which is in the string @var{delim}.  If @var{rem} is
-## requested, it contains the remainder of the string, starting at the first
-## delimiter.  Leading delimiters are ignored.  If @var{delim} is not
-## specified, whitespace is assumed.  @var{str} may also be a cell array of
-## strings in which case the function executes on every individual string
-## and returns a cell array of tokens and remainders.
+## first character which is in the string @var{delim}.
+##
+## @var{str} may also be a cell array of strings in which case the function
+## executes on every individual string and returns a cell array of tokens and
+## remainders.
+##
+## Leading delimiters are ignored.  If @var{delim} is not specified,
+## whitespace is assumed.
+##
+## If @var{rem} is requested, it contains the remainder of the string, starting
+## at the first delimiter.
 ##
 ## Examples:
 ##
 ## @example
 ## @group
 ## strtok ("this is the life")
 ##      @result{} "this"
 ##
diff --git a/scripts/strings/strtrim.m b/scripts/strings/strtrim.m
--- a/scripts/strings/strtrim.m
+++ b/scripts/strings/strtrim.m
@@ -13,20 +13,23 @@
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} strtrim (@var{s})
-## Remove leading and trailing whitespace from @var{s}.  If
-## @var{s} is a matrix, @var{strtrim} trims each row to the length of
+## Remove leading and trailing whitespace from @var{s}.
+##
+## If @var{s} is a matrix, @var{strtrim} trims each row to the length of
 ## longest string.  If @var{s} is a cell array of strings, operate recursively
-## on each string element.  For example:
+## on each string element.
+##
+## For example:
 ##
 ## @example
 ## @group
 ## strtrim ("    abc  ")
 ##      @result{}  "abc"
 ##
 ## strtrim ([" abc   "; "   def   "])
 ##      @result{}  ["abc  "  ; "  def"]
diff --git a/scripts/strings/strtrunc.m b/scripts/strings/strtrunc.m
--- a/scripts/strings/strtrunc.m
+++ b/scripts/strings/strtrunc.m
@@ -13,18 +13,20 @@
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} strtrunc (@var{s}, @var{n})
-## Truncate the character string @var{s} to length @var{n}.  If @var{s}
-## is a character matrix, then the number of columns is adjusted.
+## Truncate the character string @var{s} to length @var{n}.
+##
+## If @var{s} is a character matrix, then the number of columns is adjusted.
+## 
 ## If @var{s} is a cell array of strings, then the operation is performed
 ## on each cell element and the new cell array is returned.
 ## @end deftypefn
 
 function s = strtrunc (s, n)
 
   if (nargin != 2)
     print_usage ();
diff --git a/scripts/strings/substr.m b/scripts/strings/substr.m
--- a/scripts/strings/substr.m
+++ b/scripts/strings/substr.m
@@ -20,17 +20,17 @@
 ## @deftypefn  {Function File} {} substr (@var{s}, @var{offset})
 ## @deftypefnx {Function File} {} substr (@var{s}, @var{offset}, @var{len})
 ## Return the substring of @var{s} which starts at character number
 ## @var{offset} and is @var{len} characters long.
 ##
 ## Position numbering for offsets begins with 1.  If @var{offset} is negative,
 ## extraction starts that far from the end of the string.
 ##
-## If @var{len} is omitted, the substring extends to the end of @var{S}.  A
+## If @var{len} is omitted, the substring extends to the end of @var{s}.  A
 ## negative value for @var{len} extracts to within @var{len} characters of
 ## the end of the string
 ##
 ## Examples:
 ##
 ## @example
 ## @group
 ## substr ("This is a test string", 6, 9)
diff --git a/scripts/strings/untabify.m b/scripts/strings/untabify.m
--- a/scripts/strings/untabify.m
+++ b/scripts/strings/untabify.m
@@ -15,27 +15,28 @@
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {} untabify (@var{t})
 ## @deftypefnx {Function File} {} untabify (@var{t}, @var{tw})
 ## @deftypefnx {Function File} {} untabify (@var{t}, @var{tw}, @var{deblank})
-## Replace TAB characters in @var{t}, with spaces.
-## The tab width is specified by @var{tw}, or defaults to eight.
-## The input, @var{t}, may be either a 2-D character array, or a cell
-## array of character strings.  The output is the same class
-## as the input.
+## Replace TAB characters in @var{t} with spaces.
 ##
-## If the optional argument @var{deblank} is true, then the spaces will
-## be removed from the end of the character data.
+## The input, @var{t}, may be either a 2-D character array, or a cell array of
+## character strings.  The output is the same class as the input.
+## 
+## The tab width is specified by @var{tw}, and defaults to eight.
 ##
-## The following example reads a file and writes an untabified version
-## of the same file with trailing spaces stripped.
+## If the optional argument @var{deblank} is true, then the spaces will be
+## removed from the end of the character data.
+##
+## The following example reads a file and writes an untabified version of the
+## same file with trailing spaces stripped.
 ##
 ## @example
 ## @group
 ## fid = fopen ("tabbed_script.m");
 ## text = char (fread (fid, "uchar")');
 ## fclose (fid);
 ## fid = fopen ("untabified_script.m", "w");
 ## text = untabify (strsplit (text, "\n"), 8, true);
diff --git a/scripts/testfun/assert.m b/scripts/testfun/assert.m
--- a/scripts/testfun/assert.m
+++ b/scripts/testfun/assert.m
@@ -28,37 +28,45 @@
 ##
 ## @code{assert} can be called in three different ways.
 ##
 ## @table @code
 ## @item  assert (@var{cond})
 ## @itemx assert (@var{cond}, @var{errmsg})
 ## @itemx assert (@var{cond}, @var{errmsg}, @dots{})
 ## @itemx assert (@var{cond}, @var{msg_id}, @var{errmsg}, @dots{})
-## Called with a single argument @var{cond}, @code{assert} produces an
-## error if @var{cond} is false (numeric zero).  Any additional arguments are
-## passed to the @code{error} function for processing.
+## Called with a single argument @var{cond}, @code{assert} produces an error if
+## @var{cond} is false (numeric zero).
+##
+## Any additional arguments are passed to the @code{error} function for
+## processing.
 ##
 ## @item assert (@var{observed}, @var{expected})
-## Produce an error if observed is not the same as expected.  Note that
-## @var{observed} and @var{expected} can be scalars, vectors, matrices,
-## strings, cell arrays, or structures.
+## Produce an error if observed is not the same as expected.
+##
+## Note that @var{observed} and @var{expected} can be scalars, vectors,
+## matrices, strings, cell arrays, or structures.
 ##
 ## @item assert (@var{observed}, @var{expected}, @var{tol})
 ## Produce an error if observed is not the same as expected but equality
 ## comparison for numeric data uses a tolerance @var{tol}.
+## 
 ## If @var{tol} is positive then it is an absolute tolerance which will produce
 ## an error if @code{abs (@var{observed} - @var{expected}) > abs (@var{tol})}.
+## 
 ## If @var{tol} is negative then it is a relative tolerance which will produce
 ## an error if @code{abs (@var{observed} - @var{expected}) >
 ## abs (@var{tol} * @var{expected})}.
+##
 ## If @var{expected} is zero @var{tol} will always be interpreted as an
-## absolute tolerance.  If @var{tol} is not scalar its dimensions must agree
-## with those of @var{observed} and @var{expected} and tests are performed on
-## an element-by-element basis.
+## absolute tolerance.
+##
+## If @var{tol} is not scalar its dimensions must agree with those of
+## @var{observed} and @var{expected} and tests are performed on an
+## element-by-element basis.
 ## @end table
 ## @seealso{fail, test, error, isequal}
 ## @end deftypefn
 
 function assert (cond, varargin)
 
   if (nargin == 0)
     print_usage ();
diff --git a/scripts/testfun/demo.m b/scripts/testfun/demo.m
--- a/scripts/testfun/demo.m
+++ b/scripts/testfun/demo.m
@@ -18,16 +18,17 @@
 
 ## -*- texinfo -*-
 ## @deftypefn  {Command} {} demo @var{name}
 ## @deftypefnx {Command} {} demo @var{name} @var{n}
 ## @deftypefnx {Function File} {} demo ("@var{name}")
 ## @deftypefnx {Function File} {} demo ("@var{name}", @var{n})
 ##
 ## Run example code block @var{n} associated with the function @var{name}.
+##
 ## If @var{n} is not specified, all examples are run.
 ##
 ## The preferred location for example code blocks is embedded within the script
 ## m-file immediately following the code that it exercises.  Alternatively,
 ## the examples may be stored in a file with the same name but no extension
 ## located on Octave's load path.  To separate examples from regular script
 ## code all lines are prefixed by @code{%!}.  Each example must also be
 ## introduced by the keyword @qcode{"demo"} flush left to the prefix with no
@@ -56,30 +57,29 @@
 ## initialization code.  Alternatively, all demos can be combined into a single
 ## large demo with the code
 ##
 ## @example
 ## %! input ("Press <enter> to continue: ", "s");
 ## @end example
 ##
 ## @noindent
-## between the sections, but this usage is discouraged.  Other techniques
-## to avoid multiple initialization blocks include using multiple plots
-## with a new @code{figure} command between each plot, or using @code{subplot}
-## to put multiple plots in the same window.
+## between the sections, but this usage is discouraged.  Other techniques to
+## avoid multiple initialization blocks include using multiple plots with a new
+## @code{figure} command between each plot, or using @code{subplot} to put
+## multiple plots in the same window.
 ##
-## Finally, because @code{demo} evaluates within a function context it is
-## not possible to define new functions within the code.  Anonymous functions
-## make a good substitute in most instances.  If function blocks
-## @strong{must} be used then the code @code{eval (example ("function", n))}
-## will allow Octave to see them.  This has its own problems, however, as
-## @code{eval} only evaluates one line or statement at a time.  In this case
-## the function declaration must be wrapped with
-## @qcode{"if 1 <demo stuff> endif"} where @qcode{"if"} is on the same line
-## as @qcode{"demo"}.  For example:
+## Finally, because @code{demo} evaluates within a function context it is not
+## possible to define new functions within the code.  Anonymous functions make
+## a good substitute in most instances.  If function blocks @strong{must} be
+## used then the code @code{eval (example ("function", n))} will allow Octave
+## to see them.  This has its own problems, however, as @code{eval} only
+## evaluates one line or statement at a time.  In this case the function
+## declaration must be wrapped with @qcode{"if 1 <demo stuff> endif"} where
+## @qcode{"if"} is on the same line as @qcode{"demo"}.  For example:
 ##
 ## @example
 ## @group
 ## %!demo if 1
 ## %!  function y = f(x)
 ## %!    y = x;
 ## %!  endfunction
 ## %!  f(3)
diff --git a/scripts/testfun/example.m b/scripts/testfun/example.m
--- a/scripts/testfun/example.m
+++ b/scripts/testfun/example.m
@@ -19,18 +19,19 @@
 ## -*- texinfo -*-
 ## @deftypefn  {Command} {} example @var{name}
 ## @deftypefnx {Command} {} example @var{name} @var{n}
 ## @deftypefnx {Function File} {} example ("@var{name}")
 ## @deftypefnx {Function File} {} example ("@var{name}", @var{n})
 ## @deftypefnx {Function File} {[@var{s}, @var{idx}] =} example (@dots{})
 ##
 ## Display the code for example @var{n} associated with the function
-## @var{name}, but do not run it.  If @var{n} is not specified, all examples
-## are displayed.
+## @var{name}, but do not run it.
+##
+## If @var{n} is not specified, all examples are displayed.
 ##
 ## When called with output arguments, the examples are returned in the form of
 ## a string @var{s}, with @var{idx} indicating the ending position of the
 ## various examples.
 ##
 ## See @code{demo} for a complete explanation.
 ## @seealso{demo, test}
 ## @end deftypefn
diff --git a/scripts/testfun/fail.m b/scripts/testfun/fail.m
--- a/scripts/testfun/fail.m
+++ b/scripts/testfun/fail.m
@@ -48,35 +48,44 @@
 ## @group
 ##           expected <@var{pattern}>
 ##           but got <text of actual error>
 ## @end group
 ## @end example
 ##
 ## The angle brackets are not part of the output.
 ##
-## When called with the @qcode{"warning"} option @code{fail} will produce
-## an error if executing the code produces no warning.
+## When called with the @qcode{"warning"} option @code{fail} will produce an
+## error if executing the code produces no warning.
 ## @seealso{assert, error}
 ## @end deftypefn
 
 ## Author: Paul Kienzle <pkienzle@users.sf.net>
 
 function retval = fail (code, pattern, warning_pattern)
 
   if (nargin < 1 || nargin > 3)
     print_usage ();
   endif
 
   ## Parse input arguments
-  test_warning = (nargin > 1 && strcmp (pattern, "warning"));
-  if (nargin == 3)
-    pattern = warning_pattern;
-  elseif (nargin == 1 || (nargin == 2 && test_warning))
+  test_warning = false;
+  if (nargin == 1)
     pattern = "";
+  elseif (nargin == 2 && ! strcmp (pattern, "warning"))
+    ## Normal error test
+  elseif (nargin >= 2 && strcmp (pattern, "warning"))
+    test_warning = true;
+    if (nargin == 2)
+      pattern = "";
+    else
+      pattern = warning_pattern;
+    endif
+  else
+    print_usage ();
   endif
 
   ## Match any nonempty message
   if (isempty (pattern))
     pattern = ".";
   endif
 
   ## Allow assert (fail ())
@@ -84,51 +93,44 @@ function retval = fail (code, pattern, w
     retval = true;
   endif
 
   if (test_warning)
     ## Perform the warning test.
     ## Clear old warnings.
     lastwarn ("");
     ## Make sure warnings are turned on.
-    state = warning ("query", "quiet");
+    wstate = warning ("query", "quiet");
     warning ("on", "quiet");
     try
       evalin ("caller", [code ";"]);
       ## Retrieve new warnings.
       warn = lastwarn ();
-      warning (state.state, "quiet");
+      warning (wstate.state, "quiet");
       if (isempty (warn))
         msg = sprintf ("expected warning <%s> but got none", pattern);
       else
-        ## Transform "warning: ...\n" to "...".
-        warn([1:9, end]) = [];
         if (! isempty (regexp (warn, pattern, "once")))
           return;
         endif
         msg = sprintf ("expected warning <%s>\nbut got <%s>", pattern, warn);
       endif
     catch
-      warning (state.state, "quiet");
-      err = lasterr;
-      ## Transform "error: ...\n", to "...".
-      err([1:6, end]) = [];
+      warning (wstate.state, "quiet");
+      err = lasterr ();
       msg = sprintf ("expected warning <%s>\nbut got error <%s>", pattern, err);
     end_try_catch
 
   else
     ## Perform the error test.
     try
       evalin ("caller", [code ";"]);
       msg = sprintf ("expected error <%s> but got none", pattern);
     catch
       err = lasterr ();
-      if (strcmp (err(1:7), "error:"))
-         err([1:6, end]) = []; # transform "error: ...\n", to "..."
-      endif
       if (! isempty (regexp (err, pattern, "once")))
         return;
       endif
       msg = sprintf ("expected error <%s>\nbut got <%s>", pattern, err);
     end_try_catch
   endif
 
   ## If we get here, then code didn't fail or error didn't match.
@@ -148,9 +150,10 @@ endfunction
 %!error <expected error> fail ("1")
 %!error <'__a__' undefined> fail ("__a__*[2;3]", "nonconformant")
 %!error <expected error .usage:>  fail ("__a__*[2,3]", "usage:")
 %!error <warning failure> fail ("warning ('warning failure')", "warning", "success")
 
 ## Test input validation
 %!error fail ()
 %!error fail (1,2,3,4)
+%!error fail (1, "nowarning", "foo")
 
diff --git a/scripts/testfun/rundemos.m b/scripts/testfun/rundemos.m
--- a/scripts/testfun/rundemos.m
+++ b/scripts/testfun/rundemos.m
@@ -19,18 +19,18 @@
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {} rundemos ()
 ## @deftypefnx {Function File} {} rundemos (@var{directory})
 ## Execute built-in demos for all m-files in the specified @var{directory}.
 ##
 ## Demo blocks in any C++ source files (@file{*.cc}) will also be executed
 ## for use with dynamically linked oct-file functions.
 ##
-## If no directory is specified, operate on all directories in Octave's
-## search path for functions.
+## If no directory is specified, operate on all directories in Octave's search
+## path for functions.
 ## @seealso{demo, runtests, path}
 ## @end deftypefn
 
 ## Author: jwe
 
 function rundemos (directory)
 
   if (nargin == 0)
diff --git a/scripts/testfun/runtests.m b/scripts/testfun/runtests.m
--- a/scripts/testfun/runtests.m
+++ b/scripts/testfun/runtests.m
@@ -19,18 +19,18 @@
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {} runtests ()
 ## @deftypefnx {Function File} {} runtests (@var{directory})
 ## Execute built-in tests for all m-files in the specified @var{directory}.
 ##
 ## Test blocks in any C++ source files (@file{*.cc}) will also be executed
 ## for use with dynamically linked oct-file functions.
 ##
-## If no directory is specified, operate on all directories in Octave's
-## search path for functions.
+## If no directory is specified, operate on all directories in Octave's search
+## path for functions.
 ## @seealso{rundemos, test, path}
 ## @end deftypefn
 
 ## Author: jwe
 
 function runtests (directory)
 
   if (nargin == 0)
diff --git a/scripts/testfun/speed.m b/scripts/testfun/speed.m
--- a/scripts/testfun/speed.m
+++ b/scripts/testfun/speed.m
@@ -16,108 +16,106 @@
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {} speed (@var{f}, @var{init}, @var{max_n}, @var{f2}, @var{tol})
 ## @deftypefnx {Function File} {[@var{order}, @var{n}, @var{T_f}, @var{T_f2}] =} speed (@dots{})
 ##
 ## Determine the execution time of an expression (@var{f}) for various input
-## values (@var{n}).  The @var{n} are log-spaced from 1 to @var{max_n}.  For
-## each @var{n}, an initialization expression (@var{init}) is computed to
-## create any data needed for the test.  If a second expression (@var{f2}) is
-## given then the execution times of the two expressions are compared.  When
-## called without output arguments the results are printed to stdout and
-## displayed graphically.
+## values (@var{n}).
+##
+## The @var{n} are log-spaced from 1 to @var{max_n}.  For each @var{n}, an
+## initialization expression (@var{init}) is computed to create any data needed
+## for the test.  If a second expression (@var{f2}) is given then the
+## execution times of the two expressions are compared.  When called without
+## output arguments the results are printed to stdout and displayed
+## graphically.
 ##
 ## @table @code
 ## @item @var{f}
 ## The code expression to evaluate.
 ##
 ## @item @var{max_n}
 ## The maximum test length to run.  The default value is 100.  Alternatively,
 ## use @code{[min_n, max_n]} or specify the @var{n} exactly with
 ## @code{[n1, n2, @dots{}, nk]}.
 ##
 ## @item @var{init}
-## Initialization expression for function argument values.  Use @var{k}
-## for the test number and @var{n} for the size of the test.  This should
-## compute values for all variables used by @var{f}.  Note that @var{init} will
-## be evaluated first for @math{k = 0}, so things which are constant throughout
+## Initialization expression for function argument values.  Use @var{k} for
+## the test number and @var{n} for the size of the test.  This should compute
+## values for all variables used by @var{f}.  Note that @var{init} will be
+## evaluated first for @math{k = 0}, so things which are constant throughout
 ## the test series can be computed once.  The default value is
 ## @code{@var{x} = randn (@var{n}, 1)}.
 ##
 ## @item @var{f2}
 ## An alternative expression to evaluate, so that the speed of two
 ## expressions can be directly compared.  The default is @code{[]}.
 ##
 ## @item @var{tol}
 ## Tolerance used to compare the results of expression @var{f} and expression
 ## @var{f2}.  If @var{tol} is positive, the tolerance is an absolute one.
 ## If @var{tol} is negative, the tolerance is a relative one.  The default is
 ## @code{eps}.  If @var{tol} is @code{Inf}, then no comparison will be made.
 ##
 ## @item @var{order}
-## The time complexity of the expression @math{O(a*n^p)}.  This
-## is a structure with fields @code{a} and @code{p}.
+## The time complexity of the expression @math{O(a*n^p)}.  This is a
+## structure with fields @code{a} and @code{p}.
 ##
 ## @item @var{n}
 ## The values @var{n} for which the expression was calculated @strong{AND}
 ## the execution time was greater than zero.
 ##
 ## @item @var{T_f}
 ## The nonzero execution times recorded for the expression @var{f} in seconds.
 ##
 ## @item @var{T_f2}
 ## The nonzero execution times recorded for the expression @var{f2} in seconds.
 ## If required, the mean time ratio is simply @code{mean (T_f ./ T_f2)}.
 ##
 ## @end table
 ##
-## The slope of the execution time graph shows the approximate
-## power of the asymptotic running time @math{O(n^p)}.  This
-## power is plotted for the region over which it is approximated
-## (the latter half of the graph).  The estimated power is not
-## very accurate, but should be sufficient to determine the
-## general order of an algorithm.  It should indicate if, for
-## example, the implementation is unexpectedly @math{O(n^2)}
-## rather than @math{O(n)} because it extends a vector each
-## time through the loop rather than pre-allocating storage.
-## In the current version of Octave, the following is not the
-## expected @math{O(n)}.
+## The slope of the execution time graph shows the approximate power of the
+## asymptotic running time @math{O(n^p)}.  This power is plotted for the
+## region over which it is approximated (the latter half of the graph).  The
+## estimated power is not very accurate, but should be sufficient to
+## determine the general order of an algorithm.  It should indicate if, for
+## example, the implementation is unexpectedly @math{O(n^2)} rather than
+## @math{O(n)} because it extends a vector each time through the loop rather
+## than pre-allocating storage.  In the current version of Octave, the
+## following is not the expected @math{O(n)}.
 ##
 ## @example
 ## speed ("for i = 1:n, y@{i@} = x(i); endfor", "", [1000, 10000])
 ## @end example
 ##
 ## @noindent
 ## But it is if you preallocate the cell array @code{y}:
 ##
 ## @example
 ## @group
 ## speed ("for i = 1:n, y@{i@} = x(i); endfor", ...
 ##        "x = rand (n, 1); y = cell (size (x));", [1000, 10000])
 ## @end group
 ## @end example
 ##
-## An attempt is made to approximate the cost of individual
-## operations, but it is wildly inaccurate.  You can improve the
-## stability somewhat by doing more work for each @code{n}.  For
-## example:
+## An attempt is made to approximate the cost of individual operations, but
+## it is wildly inaccurate.  You can improve the stability somewhat by doing
+## more work for each @code{n}.  For example:
 ##
 ## @example
 ## speed ("airy(x)", "x = rand (n, 10)", [10000, 100000])
 ## @end example
 ##
-## When comparing two different expressions (@var{f}, @var{f2}), the slope
-## of the line on the speedup ratio graph should be larger than 1 if the new
+## When comparing two different expressions (@var{f}, @var{f2}), the slope of
+## the line on the speedup ratio graph should be larger than 1 if the new
 ## expression is faster.  Better algorithms have a shallow slope.  Generally,
-## vectorizing an algorithm will not change the slope of the execution
-## time graph, but will shift it relative to the original.  For
-## example:
+## vectorizing an algorithm will not change the slope of the execution time
+## graph, but will shift it relative to the original.  For example:
 ##
 ## @example
 ## @group
 ## speed ("sum (x)", "", [10000, 100000], ...
 ##        "v = 0; for i = 1:length (x), v += x(i); endfor")
 ## @end group
 ## @end example
 ##
@@ -130,22 +128,22 @@
 ## @group
 ## speed ("xcorr (x, n)", "x = rand (128, 1);", 100,
 ##        "xcorr_orig (x, n)", -100*eps)
 ## speed ("xcorr (x, 15)", "x = rand (20+n, 1);", 100,
 ##        "xcorr_orig (x, n)", -100*eps)
 ## @end group
 ## @end example
 ##
-## Assuming one of the two versions is in xcorr_orig, this
-## would compare their speed and their output values.  Note that the
-## FFT version is not exact, so one must specify an acceptable tolerance on
-## the comparison @code{100*eps}.  In this case, the comparison should be
-## computed relatively, as @code{abs ((@var{x} - @var{y}) ./ @var{y})} rather
-## than absolutely as @code{abs (@var{x} - @var{y})}.
+## Assuming one of the two versions is in xcorr_orig, this would compare their
+## speed and their output values.  Note that the FFT version is not exact, so
+## one must specify an acceptable tolerance on the comparison @code{100*eps}.
+## In this case, the comparison should be computed relatively, as
+## @code{abs ((@var{x} - @var{y}) ./ @var{y})} rather than absolutely as
+## @code{abs (@var{x} - @var{y})}.
 ##
 ## Type @kbd{example ("speed")} to see some real examples or
 ## @kbd{demo ("speed")} to run them.
 ## @end deftypefn
 
 ## FIXME: consider two dimensional speedup surfaces for functions like kron.
 function [__order, __test_n, __tnew, __torig] = speed (__f1, __init, __max_n = 100, __f2 = "", __tol = eps)
 
diff --git a/scripts/time/asctime.m b/scripts/time/asctime.m
--- a/scripts/time/asctime.m
+++ b/scripts/time/asctime.m
@@ -14,17 +14,19 @@
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} asctime (@var{tm_struct})
 ## Convert a time structure to a string using the following
-## format: @qcode{"ddd mmm mm HH:MM:SS yyyy"}.  For example:
+## format: @qcode{"ddd mmm mm HH:MM:SS yyyy"}.
+##
+## For example:
 ##
 ## @example
 ## @group
 ## asctime (localtime (time ()))
 ##      @result{} "Mon Feb 17 01:15:06 1997"
 ## @end group
 ## @end example
 ##
diff --git a/scripts/time/calendar.m b/scripts/time/calendar.m
--- a/scripts/time/calendar.m
+++ b/scripts/time/calendar.m
@@ -18,18 +18,18 @@
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {@var{c} =} calendar ()
 ## @deftypefnx {Function File} {@var{c} =} calendar (@var{d})
 ## @deftypefnx {Function File} {@var{c} =} calendar (@var{y}, @var{m})
 ## @deftypefnx {Function File} {} calendar (@dots{})
 ## Return the current monthly calendar in a 6x7 matrix.
 ##
-## If @var{d} is specified, return the calendar for the month containing
-## the date @var{d}, which must be a serial date number or a date string.
+## If @var{d} is specified, return the calendar for the month containing the
+## date @var{d}, which must be a serial date number or a date string.
 ##
 ## If @var{y} and @var{m} are specified, return the calendar for year @var{y}
 ## and month @var{m}.
 ##
 ## If no output arguments are specified, print the calendar on the screen
 ## instead of returning a matrix.
 ## @seealso{datenum, datestr}
 ## @end deftypefn
diff --git a/scripts/time/clock.m b/scripts/time/clock.m
--- a/scripts/time/clock.m
+++ b/scripts/time/clock.m
@@ -13,32 +13,33 @@
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} clock ()
-## Return the current local date and time as a date vector.  The date vector
-## contains the following fields: current year, month (1-12), day (1-31),
-## hour (0-23), minute (0-59), and second (0-61).  The seconds field has
-## a fractional part after the decimal point for extended accuracy.
+## Return the current local date and time as a date vector.
+##
+## The date vector contains the following fields: current year, month (1-12),
+## day (1-31), hour (0-23), minute (0-59), and second (0-61).  The seconds
+## field has a fractional part after the decimal point for extended accuracy.
 ##
 ## For example:
 ##
 ## @example
 ## @group
 ## fix (clock ())
 ##      @result{} [ 1993, 8, 20, 4, 56, 1 ]
 ## @end group
 ## @end example
 ##
-## The function clock is more accurate on systems that have the
-## @code{gettimeofday} function.
+## @code{clock} is more accurate on systems that have the @code{gettimeofday}
+## function.
 ## @seealso{now, date, datevec}
 ## @end deftypefn
 
 ## Author: jwe
 
 function retval = clock ()
 
   tm = localtime (time ());
diff --git a/scripts/time/ctime.m b/scripts/time/ctime.m
--- a/scripts/time/ctime.m
+++ b/scripts/time/ctime.m
@@ -15,17 +15,19 @@
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} ctime (@var{t})
 ## Convert a value returned from @code{time} (or any other non-negative
 ## integer), to the local time and return a string of the same form as
-## @code{asctime}.  The function @code{ctime (time)} is equivalent to
+## @code{asctime}.
+##
+## The function @code{ctime (time)} is equivalent to
 ## @code{asctime (localtime (time))}.  For example:
 ##
 ## @example
 ## @group
 ## ctime (time ())
 ##    @result{} "Mon Feb 17 01:15:06 1997"
 ## @end group
 ## @end example
diff --git a/scripts/time/datenum.m b/scripts/time/datenum.m
--- a/scripts/time/datenum.m
+++ b/scripts/time/datenum.m
@@ -70,25 +70,24 @@
 ##
 ## @item
 ## Days before the beginning of the month go to the previous month.
 ##
 ## @item
 ## Days can be fractional.
 ## @end itemize
 ##
-## @strong{Caution:} this function does not attempt to handle Julian
-## calendars so dates before October 15, 1582 are wrong by as much
-## as eleven days.  Also, be aware that only Roman Catholic countries
-## adopted the calendar in 1582.  It took until 1924 for it to be
-## adopted everywhere.  See the Wikipedia entry on the Gregorian
-## calendar for more details.
+## @strong{Caution:} this function does not attempt to handle Julian calendars
+## so dates before October 15, 1582 are wrong by as much as eleven days.  Also,
+## be aware that only Roman Catholic countries adopted the calendar in 1582.
+## It took until 1924 for it to be adopted everywhere.  See the Wikipedia entry
+## on the Gregorian calendar for more details.
 ##
-## @strong{Warning:} leap seconds are ignored.  A table of leap seconds
-## is available on the Wikipedia entry for leap seconds.
+## @strong{Warning:} leap seconds are ignored.  A table of leap seconds is
+## available on the Wikipedia entry for leap seconds.
 ## @seealso{datestr, datevec, now, clock, date}
 ## @end deftypefn
 
 ## Algorithm: Peter Baum (http://vsg.cape.com/~pbaum/date/date0.htm)
 ## Author: pkienzle <pkienzle@users.sf.net>
 
 function [days, secs] = datenum (year, month = [], day = [], hour = 0, minute = 0, second = 0)
 
diff --git a/scripts/time/datestr.m b/scripts/time/datestr.m
--- a/scripts/time/datestr.m
+++ b/scripts/time/datestr.m
@@ -16,26 +16,28 @@
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {@var{str} =} datestr (@var{date})
 ## @deftypefnx {Function File} {@var{str} =} datestr (@var{date}, @var{f})
 ## @deftypefnx {Function File} {@var{str} =} datestr (@var{date}, @var{f}, @var{p})
 ## Format the given date/time according to the format @code{f} and return
-## the result in @var{str}.  @var{date} is a serial date number (see
-## @code{datenum}) or a date vector (see @code{datevec}).  The value of
-## @var{date} may also be a string or cell array of strings.
+## the result in @var{str}.
+##
+## @var{date} is a serial date number (see @code{datenum}) or a date vector
+## (see @code{datevec}).  The value of @var{date} may also be a string or cell
+## array of strings.
 ##
-## @var{f} can be an integer which corresponds to one of the codes in
-## the table below, or a date format string.
+## @var{f} can be an integer which corresponds to one of the codes in the table
+## below, or a date format string.
 ##
-## @var{p} is the year at the start of the century in which two-digit years
-## are to be interpreted in.  If not specified, it defaults to the current
-## year minus 50.
+## @var{p} is the year at the start of the century in which two-digit years are
+## to be interpreted in.  If not specified, it defaults to the current year
+## minus 50.
 ##
 ## For example, the date 730736.65149 (2000-09-07 15:38:09.0934) would be
 ## formatted as follows:
 ##
 ## @multitable @columnfractions 0.1 0.45 0.35
 ## @headitem Code @tab Format @tab Example
 ## @item 0 @tab dd-mmm-yyyy HH:MM:SS    @tab 07-Sep-2000 15:38:09
 ## @item 1 @tab dd-mmm-yyyy             @tab 07-Sep-2000
@@ -89,19 +91,18 @@
 ## @item      @tab and not padded with zeros otherwise          @tab 9:00 AM
 ## @item MM   @tab Minute of hour (padded with zeros)           @tab 10:05
 ## @item SS   @tab Second of minute (padded with zeros)         @tab 10:05:03
 ## @item FFF  @tab Milliseconds of second (padded with zeros)   @tab 10:05:03.012
 ## @item AM   @tab Use 12-hour time format                      @tab 11:30 AM
 ## @item PM   @tab Use 12-hour time format                      @tab 11:30 PM
 ## @end multitable
 ##
-## If @var{f} is not specified or is @code{-1}, then use 0, 1 or 16,
-## depending on whether the date portion or the time portion of
-## @var{date} is empty.
+## If @var{f} is not specified or is @code{-1}, then use 0, 1 or 16, depending
+## on whether the date portion or the time portion of @var{date} is empty.
 ##
 ## If @var{p} is nor specified, it defaults to the current year minus 50.
 ##
 ## If a matrix or cell array of dates is given, a column vector of date strings
 ## is returned.
 ##
 ## @seealso{datenum, datevec, date, now, clock}
 ## @end deftypefn
diff --git a/scripts/time/datevec.m b/scripts/time/datevec.m
--- a/scripts/time/datevec.m
+++ b/scripts/time/datevec.m
@@ -26,24 +26,24 @@
 ## @code{datestr}) into a date vector.
 ##
 ## A date vector is a row vector with six members, representing the year,
 ## month, day, hour, minute, and seconds respectively.
 ##
 ## @var{f} is the format string used to interpret date strings
 ## (see @code{datestr}).  If @var{date} is a string, but no format is
 ## specified, then a relatively slow search is performed through various
-## formats.  It is always preferable to specify the format string @var{f}
-## if it is known.  Formats which do not specify a particular time component
-## will have the value set to zero.  Formats which do not specify a date will
+## formats.  It is always preferable to specify the format string @var{f} if it
+## is known.  Formats which do not specify a particular time component will
+## have the value set to zero.  Formats which do not specify a date will
 ## default to January 1st of the current year.
 ##
 ## @var{p} is the year at the start of the century to which two-digit years
-## will be referenced.  If not specified, it defaults to the current year
-## minus 50.
+## will be referenced.  If not specified, it defaults to the current year minus
+## 50.
 ## @seealso{datenum, datestr, clock, now, date}
 ## @end deftypefn
 
 ## Algorithm: Peter Baum (http://vsg.cape.com/~pbaum/date/date0.htm)
 
 ## Author: pkienzle <pkienzle@users.sf.net>
 ## Modified: bdenney <bill@givebillmoney.com>
 ## Created: 10 October 2001 (CVS)
diff --git a/scripts/time/etime.m b/scripts/time/etime.m
--- a/scripts/time/etime.m
+++ b/scripts/time/etime.m
@@ -14,29 +14,31 @@
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} etime (@var{t2}, @var{t1})
 ## Return the difference in seconds between two time values returned from
-## @code{clock} (@math{@var{t2} - @var{t1}}).  For example:
+## @code{clock} (@math{@var{t2} - @var{t1}}).
+##
+## For example:
 ##
 ## @example
 ## @group
 ## t0 = clock ();
 ## # many computations later@dots{}
 ## elapsed_time = etime (clock (), t0);
 ## @end group
 ## @end example
 ##
 ## @noindent
-## will set the variable @code{elapsed_time} to the number of seconds since
-## the variable @code{t0} was set.
+## will set the variable @code{elapsed_time} to the number of seconds since the
+## variable @code{t0} was set.
 ## @seealso{tic, toc, clock, cputime, addtodate}
 ## @end deftypefn
 
 ## Author: jwe
 
 function secs = etime (t2, t1)
 
   if (nargin != 2)
diff --git a/scripts/time/is_leap_year.m b/scripts/time/is_leap_year.m
--- a/scripts/time/is_leap_year.m
+++ b/scripts/time/is_leap_year.m
@@ -14,18 +14,20 @@
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {} is_leap_year ()
 ## @deftypefnx {Function File} {} is_leap_year (@var{year})
-## Return true if @var{year} is a leap year and false otherwise.  If no
-## year is specified, @code{is_leap_year} uses the current year.
+## Return true if @var{year} is a leap year and false otherwise.
+##
+## If no year is specified, @code{is_leap_year} uses the current year.
+##
 ## For example:
 ##
 ## @example
 ## @group
 ## is_leap_year (2000)
 ##    @result{} 1
 ## @end group
 ## @end example
diff --git a/scripts/time/now.m b/scripts/time/now.m
--- a/scripts/time/now.m
+++ b/scripts/time/now.m
@@ -19,18 +19,17 @@
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {t =} now ()
 ## Return the current local date/time as a serial day number
 ## (see @code{datenum}).
 ##
 ## The integral part, @code{floor (now)} corresponds to the number of days
 ## between today and Jan 1, 0000.
 ##
-## The fractional part, @code{rem (now, 1)} corresponds to the current
-## time.
+## The fractional part, @code{rem (now, 1)} corresponds to the current time.
 ## @seealso{clock, date, datenum}
 ## @end deftypefn
 
 ## Author: pkienzle <pkienzle@users.sf.net>
 ## Created: 10 October 2001 (CVS)
 ## Adapted-By: William Poetra Yoga Hadisoeseno <williampoetra@gmail.com>
 
 function t = now ()
diff --git a/scripts/time/weekday.m b/scripts/time/weekday.m
--- a/scripts/time/weekday.m
+++ b/scripts/time/weekday.m
@@ -15,23 +15,24 @@
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {[@var{n}, @var{s}] =} weekday (@var{d})
 ## @deftypefnx {Function File} {[@var{n}, @var{s}] =} weekday (@var{d}, @var{format})
 ## Return the day of the week as a number in @var{n} and as a string in @var{s}.
+##
 ## The days of the week are numbered 1--7 with the first day being Sunday.
 ##
 ## @var{d} is a serial date number or a date string.
 ##
-## If the string @var{format} is not present or is equal to @qcode{"short"} then
-## @var{s} will contain the abbreviated name of the weekday.  If @var{format}
-## is @qcode{"long"} then @var{s} will contain the full name.
+## If the string @var{format} is not present or is equal to @qcode{"short"}
+## then @var{s} will contain the abbreviated name of the weekday.  If
+## @var{format} is @qcode{"long"} then @var{s} will contain the full name.
 ##
 ## Table of return values based on @var{format}:
 ##
 ## @multitable @columnfractions .06 .13 .16
 ## @headitem @var{n} @tab @qcode{"short"} @tab @qcode{"long"}
 ## @item 1 @tab Sun @tab Sunday
 ## @item 2 @tab Mon @tab Monday
 ## @item 3 @tab Tue @tab Tuesday
