# HG changeset patch
# User jwe
# Date 1029623585 0
#      Sat Aug 17 22:33:05 2002 +0000
# Node ID 1fb249b4d1bbfcf315afac3b36f450a7ed094955
# Parent  c2562b2593e2a9d2f0c7ffba6fe3e648fb5e92ff
[project @ 2002-08-17 22:33:05 by jwe]

diff --git a/liboctave/Array2-idx.h b/liboctave/Array2-idx.h
--- a/liboctave/Array2-idx.h
+++ b/liboctave/Array2-idx.h
@@ -276,17 +276,17 @@ Array2<T>::maybe_delete_elements (idx_ve
 
 		  ii++;
 		}
 	    }
 
 	  if (--rep->count <= 0)
 	    delete rep;
 
-	  rep = new ArrayRep (new_data, new_n);
+	  rep = new Array<T>::ArrayRep (new_data, new_n);
 
 	  if (nr == 1)
 	    {
 	      d1 = 1;
 	      d2 = new_n;
 	    }
 	  else
 	    {
@@ -390,17 +390,17 @@ Array2<T>::maybe_delete_elements (idx_ve
 				new_data[nr*jj+i] = elem (i, j);
 			      jj++;
 			    }
 			}
 
 		      if (--rep->count <= 0)
 			delete rep;
 
-		      rep = new ArrayRep (new_data, nr * new_nc);
+		      rep = new Array<T>::ArrayRep (new_data, nr * new_nc);
 
 		      d2 = new_nc;
 
 		      set_max_indices (2);
 		    }
 		  else
 		    (*current_liboctave_error_handler)
 		      ("A(idx) = []: index out of range");
@@ -454,17 +454,17 @@ Array2<T>::maybe_delete_elements (idx_ve
 				new_data[new_nr*j+ii] = elem (i, j);
 			      ii++;
 			    }
 			}
 
 		      if (--rep->count <= 0)
 			delete rep;
 
-		      rep = new ArrayRep (new_data, new_nr * nc);
+		      rep = new Array<T>::ArrayRep (new_data, new_nr * nc);
 
 		      d1 = new_nr;
 
 		      set_max_indices (2);
 		    }
 		  else
 		    (*current_liboctave_error_handler)
 		      ("A(idx) = []: index out of range");
diff --git a/liboctave/Array2.cc b/liboctave/Array2.cc
--- a/liboctave/Array2.cc
+++ b/liboctave/Array2.cc
@@ -117,17 +117,17 @@ Array2<T>::resize (int r, int c)
       (*current_liboctave_error_handler)
 	("can't resize to negative dimension");
       return;
     }
 
   if (r == dim1 () && c == dim2 ())
     return;
 
-  Array<T>::ArrayRep *old_rep = rep;
+  typename Array<T>::ArrayRep *old_rep = rep;
   const T *old_data = data ();
 
   int old_d1 = dim1 ();
   int old_d2 = dim2 ();
   int old_len = length ();
 
   rep = new Array<T>::ArrayRep (get_size (r, c));
 
@@ -157,17 +157,17 @@ Array2<T>::resize (int r, int c, const T
       (*current_liboctave_error_handler)
 	("can't resize to negative dimension");
       return;
     }
 
   if (r == dim1 () && c == dim2 ())
     return;
 
-  Array<T>::ArrayRep *old_rep = rep;
+  typename Array<T>::ArrayRep *old_rep = rep;
   const T *old_data = data ();
 
   int old_d1 = dim1 ();
   int old_d2 = dim2 ();
   int old_len = length ();
 
   rep = new Array<T>::ArrayRep (get_size (r, c));
 
diff --git a/liboctave/Array3.cc b/liboctave/Array3.cc
--- a/liboctave/Array3.cc
+++ b/liboctave/Array3.cc
@@ -53,27 +53,27 @@ Array3<T>::resize (int r, int c, int p)
       (*current_liboctave_error_handler)
 	("can't resize to negative dimension");
       return;
     }
 
   if (r == dim1 () && c == dim2 () && p == dim3 ())
     return;
 
-  ArrayRep *old_rep = rep;
+  typename Array<T>::ArrayRep *old_rep = rep;
   const T *old_data = data ();
 
   int old_d1 = dim1 ();
   int old_d2 = dim2 ();
   int old_d3 = dim3 ();
   int old_len = length ();
 
   int ts = get_size (get_size (r, c), p);
 
-  rep = new ArrayRep (ts);
+  rep = new Array<T>::ArrayRep (ts);
 
   d1 = r;
   d2 = c;
   d3 = p;
 
   if (old_data && old_len > 0)
     {
       int min_r = old_d1 < r ? old_d1 : r;
@@ -99,28 +99,28 @@ Array3<T>::resize (int r, int c, int p, 
       (*current_liboctave_error_handler)
 	("can't resize to negative dimension");
       return;
     }
 
   if (r == dim1 () && c == dim2 () && p == dim3 ())
     return;
 
-  ArrayRep *old_rep = rep;
+  typename Array<T>::ArrayRep *old_rep = rep;
   const T *old_data = data ();
 
   int old_d1 = dim1 ();
   int old_d2 = dim2 ();
   int old_d3 = dim3 ();
 
   int old_len = length ();
 
   int ts = get_size (get_size (r, c), p);
 
-  rep = new ArrayRep (ts);
+  rep = new Array<T>::ArrayRep (ts);
 
   d1 = r;
   d2 = c;
   d3 = p;
 
   int min_r = old_d1 < r ? old_d1 : r;
   int min_c = old_d2 < c ? old_d2 : c;
   int min_p = old_d3 < p ? old_d3 : p;
diff --git a/liboctave/ArrayN.cc b/liboctave/ArrayN.cc
--- a/liboctave/ArrayN.cc
+++ b/liboctave/ArrayN.cc
@@ -222,17 +222,17 @@ ArrayN<T>::resize (const Array<int>& dim
 	  no_change = false;
 	  break;
 	}
     }
 
   if (no_change)
     return;
 
-  Array<T>::ArrayRep *old_rep = rep;
+  typename Array<T>::ArrayRep *old_rep = rep;
   const T *old_data = data ();
 
   rep = new Array<T>::ArrayRep (get_size (dims));
 
   Array<int> old_dimensions = dimensions;
 
   int old_len = length ();
 
@@ -277,17 +277,17 @@ ArrayN<T>::resize (const Array<int>& dim
 	  no_change = false;
 	  break;
 	}
     }
 
   if (no_change)
     return;
 
-  Array<T>::ArrayRep *old_rep = rep;
+  typename Array<T>::ArrayRep *old_rep = rep;
   const T *old_data = data ();
 
   int len = get_size (dims);
 
   rep = new Array<T>::ArrayRep (len);
 
   Array<int> old_dimensions = dimensions;
 
diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,10 +1,13 @@
 2002-08-17  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
+	* Array2-idx.h, DiagArray2.cc, Array2.cc, Array3.cc, ArrayN.cc:
+	Try to avoid implicit typename warnings from g++-3.2.
+
 	* DASPK.cc: Include lo-sstream.h and use macros instead of using
 	strstream classes directly.
 	* DASRT.cc: Likewise.
 	* DASSL.cc: Likewise.
 	* LSODE.cc: Likewise.
 	* ODESSA.cc: Likewise.
 
 	* cmd-hist.cc: Don't include <strstream>.
diff --git a/liboctave/DiagArray2.cc b/liboctave/DiagArray2.cc
--- a/liboctave/DiagArray2.cc
+++ b/liboctave/DiagArray2.cc
@@ -129,23 +129,23 @@ DiagArray2<T>::resize (int r, int c)
     {
       (*current_liboctave_error_handler) ("can't resize to negative dimensions");
       return;
     }
 
   if (r == dim1 () && c == dim2 ())
     return;
 
-  ArrayRep *old_rep = rep;
+  typename Array<T>::ArrayRep *old_rep = rep;
   const T *old_data = data ();
   int old_len = length ();
 
   int new_len = r < c ? r : c;
 
-  rep = new ArrayRep (new_len);
+  rep = new Array<T>::ArrayRep (new_len);
 
   nr = r;
   nc = c;
 
   if (old_data && old_len > 0)
     {
       int min_len = old_len < new_len ? old_len : new_len;
 
@@ -165,23 +165,23 @@ DiagArray2<T>::resize (int r, int c, con
     {
       (*current_liboctave_error_handler) ("can't resize to negative dimensions");
       return;
     }
 
   if (r == dim1 () && c == dim2 ())
     return;
 
-  ArrayRep *old_rep = rep;
+  typename Array<T>::ArrayRep *old_rep = rep;
   const T *old_data = data ();
   int old_len = length ();
 
   int new_len = r < c ? r : c;
 
-  rep = new ArrayRep (new_len);
+  rep = new Array<T>::ArrayRep (new_len);
 
   nr = r;
   nc = c;
 
   int min_len = old_len < new_len ? old_len : new_len;
 
   if (old_data && old_len > 0)
     {
