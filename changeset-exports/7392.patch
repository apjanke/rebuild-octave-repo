# HG changeset patch
# User jwe
# Date 1200557672 0
#      Thu Jan 17 08:14:32 2008 +0000
# Node ID 17f2cdb5232e60dcde56bb2b66717a95d3c635cc
# Parent  f071480b7eac0fd08e0d243a278667bafdeabcbe
[project @ 2008-01-17 08:14:32 by jwe]

diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,20 +1,32 @@
+2008-01-17  John W. Eaton  <jwe@octave.org>
+
+	* path/pathdef.m: Use fullfile instead of concatenating with filesep.
+	* path/__extractpath__.m, path/savepath.m: Use unwind_protect to
+	avoid possible file descriptor leak.
+
+2008-01-17  Ben Abbott  <bpabbott@mac.com>
+
+	* path/savepath.m: Warn if modified file is not explicitly specified.
+	* startup/main-rcfile: Call atexit ("__finish__").
+
 2008-01-16  John W. Eaton  <jwe@octave.org>
 
 	* plot/__go_draw_axes__.m (__do_enhanced_option__): New subfunction.
 	Use it to disable enhanced mode for individual labels and titles.
 
-	* startup/__finish__.m: New file.
-	* startup/Makefile.in (SOURCES): Add it to the list.
+	* startup/Makefile.in (SOURCES): Add __finish__.m to the list.
 	(install install-strip, uninstall): Handle function files.
 
 2008-01-16  Ben Abbott  <bpabbott@mac.com>
 
-	* path/__extractpath__.m, path/matlabroot.m, path/pathdef.m: New files.
+	* startup/__finish__.m: New file.
+	* path/__extractpath__.m, path/matlabroot.m,
+	path/pathdef.m: New files.
 	* path/Makefile.in (SOURCES): Add them to the list.
 
 2008-01-15  Thomas Weber  <thomas.weber.mail@gmail.com>
 
 	* special-matrix/vander.m: Vectorize.  New test.
 
 	* elfun/acot.m, elfun/acoth.m, elfun/acsc.m, elfun/acsch.m,
 	elfun/asec.m, elfun/asech.m, elfun/cot.m, elfun/coth.m,
diff --git a/scripts/path/__extractpath__.m b/scripts/path/__extractpath__.m
--- a/scripts/path/__extractpath__.m
+++ b/scripts/path/__extractpath__.m
@@ -25,60 +25,66 @@
 ## returns the path specified in @var{file}.
 ## @seealso{path, addpath, rmpath, genpath, pathdef, savepath, pathsep}
 ## @end deftypefn
 
 ## Author: Ben Abbott <bpabbott@mac.com>
 
 function specifiedpath = __extractpath__ (savefile)
 
-  ## The majority of this code was borrowed from savepath.m
+  ## The majority of this code was borrowed from savepath.m.
+  ## FIXME -- is there some way to share the common parts instead of
+  ## duplicating?
 
   beginstring = "## Begin savepath auto-created section, do not edit";
   endstring   = "## End savepath auto-created section";
 
   if (nargin == 0)
     savefile = tilde_expand ("~/.octaverc");
   endif
 
-  ## parse the file if it exists to see if we should replace a section
-  ## or create a section
+  ## Parse the file if it exists to see if we should replace a section
+  ## or create a section.
   startline = 0;
   endline = 0;
   filelines = {};
   if (exist (savefile) == 2)
     ## read in all lines of the file
     [fid, msg] = fopen (savefile, "rt");
     if (fid < 0)
       error ("__extractpath__: could not open savefile, %s: %s", savefile, msg);
     endif
-    linenum = 0;
-    while (linenum >= 0)
-      result = fgetl (fid);
-      if (isnumeric (result))
-        ## end at the end of file
-        linenum = -1;
-      else
-        linenum = linenum + 1;
-        filelines{linenum} = result;
-        ## find the first and last lines if they exist in the file
-        if (strcmp (result, beginstring))
-          startline = linenum+1;
-        elseif (strcmp (result, endstring))
-          endline = linenum-1;
-        endif
+    unwind_protect
+      linenum = 0;
+      while (linenum >= 0)
+	result = fgetl (fid);
+	if (isnumeric (result))
+	  ## End at the end of file.
+	  linenum = -1;
+	else
+	  linenum++;
+	  filelines{linenum} = result;
+	  ## Find the first and last lines if they exist in the file.
+	  if (strcmp (result, beginstring))
+	    startline = linenum + 1;
+	  elseif (strcmp (result, endstring))
+	    endline = linenum - 1;
+	  endif
+	endif
+      endwhile
+    unwind_protect_cleanup
+      closeread = fclose (fid);
+      if (closeread < 0)
+	error ("savepath: could not close savefile after reading, %s",
+	       savefile);
       endif
-    endwhile
-    closeread = fclose (fid);
-    if (closeread < 0)
-      error ("savepath: could not close savefile after reading, %s", savefile);
-    endif
+    end_unwind_protect
   endif
 
-  ## extract the path specifiation
+  ## Extract the path specifiation.
   if (startline > endline || (startline > 0 && endline == 0))
     error ("savepath: unable to parse file, %s", savefile);
   elseif startline > 0
     specifiedpath = filelines(startline:endline);
   else
     specifiedpath = {};
   endif
 
diff --git a/scripts/path/pathdef.m b/scripts/path/pathdef.m
--- a/scripts/path/pathdef.m
+++ b/scripts/path/pathdef.m
@@ -20,74 +20,75 @@
 ## @deftypefn {Function File} {@var{val} =} pathdef ()
 ## Return the default path for Octave.
 ## The path information is extracted from one of three sources.
 ## In order of preference, those are;
 ##
 ## @enumerate
 ## @item @file{~/.octaverc}
 ## @item @file{<octave-home>/.../<version>/m/startup/octaverc}
-## @item Octave"s path prior to changes by any octaverc.
+## @item Octave's path prior to changes by any octaverc.
 ## @end enumerate
 ## @seealso{path, addpath, rmpath, genpath, savepath, pathsep}
 ## @end deftypefn
 
 function val = pathdef ()
 
-  ## Use Octave"s orignal path as the default default.
+  ## Use Octave's orignal path as the default default.
   val = __pathorig__ ();
 
-  ## Locate the site octaverc file (is there a better way?).
+  ## Locate the site octaverc file.
   pathdir = octave_config_info ("localstartupfiledir");
-  site_octaverc = [pathdir, filesep, "octaverc"];
+  site_octaverc = fullfile (pathdir, "octaverc");
 
   ## locate the user ~\.octaverc file.
-  user_octaverc = ["~", filesep, ".octaverc"];
-  user_octaverc = sprintf ("~%s.octaverc", filesep);
+  user_octaverc = fullfile ("~", ".octaverc");
 
   ## Extract the specified paths from the site and user octaverc"s.
   site_pathscript = __extractpath__ (site_octaverc);
-  if exist (user_octaverc, "file")
+  if (exist (user_octaverc, "file"))
     user_pathscript = __extractpath__ (user_octaverc);
   else
     user_pathscript = "";
   endif
 
-  ## A path definition in the user octaverc has precedence over the site
-  if numel (user_pathscript)
+  ## A path definition in the user octaverc has precedence over the
+  ## site.
+
+  ## FIXME -- use a subfunction here to avoid code duplication?
+
+  if (numel (user_pathscript))
     try
       if (numel (user_pathscript) == 1)
-        n = strfind (user_pathscript{1},"'");
+        n = strfind (user_pathscript{1}, "'");
         if (numel(n) == 1)
-          n = strfind (user_pathscript{1},"""");
+          n = strfind (user_pathscript{1}, "\"");
         endif
         val = user_pathscript{1}(n(1):n(end));
       else
         presentpath = path;
         eval (user_pathscript);
         val = path;
         path (presentpath);
       endif
     catch
-      warning ("pathdef: Path defined in `%s' produced an error.",user_octaverc)
+      warning ("pathdef: invalid path found in `%s'", user_octaverc);
     end_try_catch
-  elseif numel (site_pathscript)
+  elseif (numel (site_pathscript))
     try
       if (numel (site_pathscript) == 1)
-        n = strfind (site_pathscript{1},"'");
+        n = strfind (site_pathscript{1}, "'");
         if (numel(n) == 1)
-          n = strfind (site_pathscript{1},"""");
+          n = strfind (site_pathscript{1}, "\"");
         endif
         val = site_pathscript{1}(n(1):n(end));
       else
         presentpath = path;
         eval (site_pathscript);
         val = path;
         path (presentpath);
       endif
     catch
-      warning ("pathdef: Path defined in `%s' produced an error.",site_octaverc)
+      warning ("pathdef: invalid path found in `%s'", site_octaverc);
     end_try_catch
   endif
 
 endfunction
-
-
diff --git a/scripts/path/savepath.m b/scripts/path/savepath.m
--- a/scripts/path/savepath.m
+++ b/scripts/path/savepath.m
@@ -45,37 +45,41 @@ function varargout = savepath (savefile)
   endline = 0;
   filelines = {};
   if (exist (savefile) == 2)
     ## read in all lines of the file
     [fid, msg] = fopen (savefile, "rt");
     if (fid < 0)
       error ("savepath: could not open savefile, %s: %s", savefile, msg);
     endif
-    linenum = 0;
-    while (linenum >= 0)
-      result = fgetl (fid);
-      if (isnumeric (result))
-        ## end at the end of file
-        linenum = -1;
-      else
-        linenum = linenum + 1;
-        filelines{linenum} = result;
-        ## find the first and last lines if they exist in the file
-        if (strcmp (result, beginstring))
-          startline = linenum;
-        elseif (strcmp (result, endstring))
-          endline = linenum;
-        endif
+    unwind_protect
+      linenum = 0;
+      while (linenum >= 0)
+	result = fgetl (fid);
+	if (isnumeric (result))
+	  ## end at the end of file
+	  linenum = -1;
+	else
+	  linenum = linenum + 1;
+	  filelines{linenum} = result;
+	  ## find the first and last lines if they exist in the file
+	  if (strcmp (result, beginstring))
+	    startline = linenum;
+	  elseif (strcmp (result, endstring))
+	    endline = linenum;
+	  endif
+	endif
+      endwhile
+    unwind_protect_cleanup
+      closeread = fclose (fid);
+      if (closeread < 0)
+	error ("savepath: could not close savefile after reading, %s",
+	       savefile);
       endif
-    endwhile
-    closeread = fclose (fid);
-    if (closeread < 0)
-      error ("savepath: could not close savefile after reading, %s", savefile);
-    endif
+    end_unwind_protect
   endif
 
   if (startline > endline || (startline > 0 && endline == 0))
     error ("savepath: unable to parse file, %s", savefile);
   endif
 
   ## put the current savepath lines into the file
   if (isempty (filelines)
@@ -98,34 +102,37 @@ function varargout = savepath (savefile)
     post = filelines(endline+1:end);
   endif
 
   ## write the results
   [fid, msg] = fopen (savefile, "wt");
   if (fid < 0)
     error ("savepath: unable to open file for writing, %s, %s", savefile, msg);
   endif
-  for i = 1:length (pre)
-    fprintf (fid, "%s\n", pre{i})
-  endfor
+  unwind_protect
+    for i = 1:length (pre)
+      fprintf (fid, "%s\n", pre{i})
+    endfor
 
-  ## Use single quotes for PATH argument to avoid string escape
-  ## processing.
-  fprintf (fid, "%s\n  path ('%s');\n%s\n",
-	   beginstring, path (), endstring);
+    ## Use single quotes for PATH argument to avoid string escape
+    ## processing.
+    fprintf (fid, "%s\n  path ('%s');\n%s\n",
+	     beginstring, path (), endstring);
 
-  for i = 1:length (post)
-    fprintf (fid, "%s\n", post{i});
-  endfor
-  closeread = fclose (fid);
-  if (closeread < 0)
-    error ("savepath: could not close savefile after writing, %s", savefile);
-  elseif (nargin == 0)
-    warning ("savepath: current path saved to %s",savefile)
-  endif
+    for i = 1:length (post)
+      fprintf (fid, "%s\n", post{i});
+    endfor
+  unwind_protect_cleanup
+    closeread = fclose (fid);
+    if (closeread < 0)
+      error ("savepath: could not close savefile after writing, %s", savefile);
+    elseif (nargin == 0)
+      warning ("savepath: current path saved to %s", savefile);
+    endif
+  end_unwind_protect
 
   retval = 0;
 
   if (nargout == 1)
     varargout{1} = retval;
   endif
   
 endfunction  
diff --git a/scripts/startup/__finish__.m b/scripts/startup/__finish__.m
--- a/scripts/startup/__finish__.m
+++ b/scripts/startup/__finish__.m
@@ -25,15 +25,15 @@
 ## This functin is intended to be called upon a clean exit from Octave.
 ## This is accomplished in the system script @file{startup/octaverc} by 
 ## use of the built in function @code{onexit}.
 ## @seealso{octaverc, onexit}
 ## @end deftypefn
 
 function __finish__ ()
 
-  if exist ('finish','file')
+  if (exist ("finish", "file"))
     ## No arg list here since finish might be a script.
     finish;
   endif
 
 endfunction
 
diff --git a/scripts/startup/main-rcfile b/scripts/startup/main-rcfile
--- a/scripts/startup/main-rcfile
+++ b/scripts/startup/main-rcfile
@@ -14,10 +14,9 @@ if (strcmp (PAGER (), "less") && isempty
   PAGER_FLAGS ('-e -X -P"-- less ?pB(%pB\\%):--. (f)orward, (b)ack, (q)uit$"');
 endif
 
 ## This appears here instead of in the pkg/PKG_ADD file so that --norc
 ## will also skip automatic loading of packages.
 
 pkg ("load", "auto");
 
-atexit ('__finish__');
-
+atexit ("__finish__");
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,13 @@
+2008-01-17  Ben Abbott <bpabbott@mac.com>
+
+	* load-path.cc (F__pathorig__): Rename from Fpathdef.
+	(Frestoredefaultpath): New function.
+
 2008-01-16  John W. Eaton  <jwe@octave.org>
 
 	* pt-assign.cc (tree_simple_assignment::rvalue,
 	tree_multi_assignment::rvalue): Handle assignment of
 	comma-separated lists.
 
 2008-01-15  John W. Eaton  <jwe@octave.org>
 
