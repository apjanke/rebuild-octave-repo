# HG changeset patch
# User Marco Caliari <marco.caliari@univr.it>
# Date 1491478247 -7200
#      Thu Apr 06 13:30:47 2017 +0200
# Node ID 6bd7d2eb6434696752ef1b303f3496482a8cf2e9
# Parent  0350da83c04915075c533d8af8bdc9b606eb3a8d
Display the right number/order of Ritz estimates in eigs when OPTS.disp = 2.

* eigs-base.cc: Display the right number/order of Ritz estimates in eigs when OPTS.disp = 2.

diff --git a/liboctave/numeric/eigs-base.cc b/liboctave/numeric/eigs-base.cc
--- a/liboctave/numeric/eigs-base.cc
+++ b/liboctave/numeric/eigs-base.cc
@@ -775,18 +775,27 @@ EigsRealSymmetricMatrix (const M& m, con
 
       if (disp > 0 && ! octave::math::isnan (workl[iptr (5)-1]))
         {
           if (iter++)
             {
               os << "Iteration " << iter - 1 <<
                  ": a few Ritz values of the " << p << "-by-" <<
                  p << " matrix\n";
-              for (int i = 0 ; i < k; i++)
-                os << "    " << workl[iptr(5)+i-1] << "\n";
+              if (ido == 99) // convergence
+                {
+                  for (F77_INT i = 0; i < k; i++)
+                    os << "    " << workl[iptr(5)+i-1] << "\n";
+                }
+              else
+                {
+                  // the wanted Ritz estimates are at the end
+                  for (F77_INT i = p - k; i < p; i++)
+                    os << "    " << workl[iptr(5)+i-1] << "\n";
+                }
             }
 
           // This is a kludge, as ARPACK doesn't give its
           // iteration pointer.  But as workl[iptr(5)-1] is
           // an output value updated at each iteration, setting
           // a value in this array to NaN and testing for it
           // is a way of obtaining the iteration counter.
           if (ido != 99)
@@ -1025,32 +1034,40 @@ EigsRealSymmetricMatrixShift (const M& m
       F77_INT tmp_info = octave::to_f77_int (info);
 
       F77_FUNC (dsaupd, DSAUPD)
         (ido, F77_CONST_CHAR_ARG2 (&bmat, 1), n,
          F77_CONST_CHAR_ARG2 ((typ.c_str ()), 2),
          k, tol, presid, p, v, n, iparam,
          ipntr, workd, workl, lwork, tmp_info
          F77_CHAR_ARG_LEN(1) F77_CHAR_ARG_LEN(2));
-
       info = tmp_info;
 
       if (f77_exception_encountered)
         (*current_liboctave_error_handler)
           ("eigs: unrecoverable exception encountered in dsaupd");
 
       if (disp > 0 && ! octave::math::isnan (workl[iptr (5)-1]))
         {
           if (iter++)
             {
               os << "Iteration " << iter - 1 <<
                  ": a few Ritz values of the " << p << "-by-" <<
                  p << " matrix\n";
-              for (int i = 0 ; i < k; i++)
-                os << "    " << workl[iptr(5)+i-1] << "\n";
+              if (ido == 99) // convergence
+                {
+                  for (F77_INT i = 0; i < k; i++)
+                    os << "    " << workl[iptr(5)+i-1] << "\n";
+                }
+              else
+                {
+                  // the wanted Ritz estimates are at the end
+                  for (F77_INT i = p - k; i < p; i++)
+                    os << "    " << workl[iptr(5)+i-1] << "\n";
+                }
             }
 
           // This is a kludge, as ARPACK doesn't give its
           // iteration pointer.  But as workl[iptr(5)-1] is
           // an output value updated at each iteration, setting
           // a value in this array to NaN and testing for it
           // is a way of obtaining the iteration counter.
           if (ido != 99)
@@ -1315,18 +1332,27 @@ EigsRealSymmetricFunc (EigsFunc fun, oct
 
       if (disp > 0 && ! octave::math::isnan (workl[iptr (5)-1]))
         {
           if (iter++)
             {
               os << "Iteration " << iter - 1 <<
                  ": a few Ritz values of the " << p << "-by-" <<
                  p << " matrix\n";
-              for (int i = 0 ; i < k; i++)
-                os << "    " << workl[iptr(5)+i-1] << "\n";
+              if (ido == 99) // convergence
+                {
+                  for (F77_INT i = 0; i < k; i++)
+                    os << "    " << workl[iptr(5)+i-1] << "\n";
+                }
+              else
+                {
+                  // the wanted Ritz estimates are at the end
+                  for (F77_INT i = p - k; i < p; i++)
+                    os << "    " << workl[iptr(5)+i-1] << "\n";
+                }
             }
 
           // This is a kludge, as ARPACK doesn't give its
           // iteration pointer.  But as workl[iptr(5)-1] is
           // an output value updated at each iteration, setting
           // a value in this array to NaN and testing for it
           // is a way of obtaining the iteration counter.
           if (ido != 99)
@@ -1596,18 +1622,28 @@ EigsRealNonSymmetricMatrix (const M& m, 
 
       if (disp > 0 && ! octave::math::isnan(workl[iptr(5)-1]))
         {
           if (iter++)
             {
               os << "Iteration " << iter - 1 <<
                  ": a few Ritz values of the " << p << "-by-" <<
                  p << " matrix\n";
-              for (int i = 0 ; i < k; i++)
-                os << "    " << workl[iptr(5)+i-1] << "\n";
+              if (ido == 99) // convergence
+                {
+                  os << "    " << workl[iptr(5)+k] << "\n";
+                  for (F77_INT i = 0; i < k; i++)
+                    os << "    " << workl[iptr(5)+i-1] << "\n";
+                }
+              else
+                {
+                  // the wanted Ritz estimates are at the end
+                  for (F77_INT i = p - k - 1; i < p; i++)
+                    os << "    " << workl[iptr(5)+i-1] << "\n";
+                }
             }
 
           // This is a kludge, as ARPACK doesn't give its
           // iteration pointer.  But as workl[iptr(5)-1] is
           // an output value updated at each iteration, setting
           // a value in this array to NaN and testing for it
           // is a way of obtaining the iteration counter.
           if (ido != 99)
@@ -1897,18 +1933,28 @@ EigsRealNonSymmetricMatrixShift (const M
 
       if (disp > 0 && ! octave::math::isnan (workl[iptr (5)-1]))
         {
           if (iter++)
             {
               os << "Iteration " << iter - 1 <<
                  ": a few Ritz values of the " << p << "-by-" <<
                  p << " matrix\n";
-              for (int i = 0 ; i < k; i++)
-                os << "    " << workl[iptr(5)+i-1] << "\n";
+              if (ido == 99) // convergence
+                {
+                  os << "    " << workl[iptr(5)+k] << "\n";
+                  for (F77_INT i = 0; i < k; i++)
+                    os << "    " << workl[iptr(5)+i-1] << "\n";
+                }
+              else
+                {
+                  // the wanted Ritz estimates are at the end
+                  for (F77_INT i = p - k - 1; i < p; i++)
+                    os << "    " << workl[iptr(5)+i-1] << "\n";
+                }
             }
 
           // This is a kludge, as ARPACK doesn't give its
           // iteration pointer.  But as workl[iptr(5)-1] is
           // an output value updated at each iteration, setting
           // a value in this array to NaN and testing for it
           // is a way of obtaining the iteration counter.
           if (ido != 99)
@@ -2215,18 +2261,28 @@ EigsRealNonSymmetricFunc (EigsFunc fun, 
 
       if (disp > 0 && ! octave::math::isnan(workl[iptr(5)-1]))
         {
           if (iter++)
             {
               os << "Iteration " << iter - 1 <<
                  ": a few Ritz values of the " << p << "-by-" <<
                  p << " matrix\n";
-              for (int i = 0 ; i < k; i++)
-                os << "    " << workl[iptr(5)+i-1] << "\n";
+              if (ido == 99) // convergence
+                {
+                  os << "    " << workl[iptr(5)+k] << "\n";
+                  for (F77_INT i = 0; i < k; i++)
+                    os << "    " << workl[iptr(5)+i-1] << "\n";
+                }
+              else
+                {
+                  // the wanted Ritz estimates are at the end
+                  for (F77_INT i = p - k - 1; i < p; i++)
+                    os << "    " << workl[iptr(5)+i-1] << "\n";
+                }
             }
 
           // This is a kludge, as ARPACK doesn't give its
           // iteration pointer.  But as workl[iptr(5)-1] is
           // an output value updated at each iteration, setting
           // a value in this array to NaN and testing for it
           // is a way of obtaining the iteration counter.
           if (ido != 99)
@@ -2531,18 +2587,27 @@ EigsComplexNonSymmetricMatrix (const M& 
 
       if (disp > 0 && ! octave::math::isnan (workl[iptr (5)-1]))
         {
           if (iter++)
             {
               os << "Iteration " << iter - 1 <<
                  ": a few Ritz values of the " << p << "-by-" <<
                  p << " matrix\n";
-              for (int i = 0; i < k; i++)
-                os << "    " << workl[iptr(5)+i-1] << "\n";
+              if (ido == 99) // convergence
+                {
+                  for (F77_INT i = 0; i < k; i++)
+                    os << "    " << workl[iptr(5)+i-1] << "\n";
+                }
+              else
+                {
+                  // the wanted Ritz estimates are at the end
+                  for (F77_INT i = p - k; i < p; i++)
+                    os << "    " << workl[iptr(5)+i-1] << "\n";
+                }
             }
 
           // This is a kludge, as ARPACK doesn't give its
           // iteration pointer.  But as workl[iptr(5)-1] is
           // an output value updated at each iteration, setting
           // a value in this array to NaN and testing for it
           // is a way of obtaining the iteration counter.
           if (ido != 99)
@@ -2803,18 +2868,27 @@ EigsComplexNonSymmetricMatrixShift (cons
 
       if (disp > 0 && ! octave::math::isnan(workl[iptr(5)-1]))
         {
           if (iter++)
             {
               os << "Iteration " << iter - 1 <<
                  ": a few Ritz values of the " << p << "-by-" <<
                  p << " matrix\n";
-              for (int i = 0 ; i < k; i++)
-                os << "    " << workl[iptr(5)+i-1] << "\n";
+              if (ido == 99) // convergence
+                {
+                  for (F77_INT i = 0; i < k; i++)
+                    os << "    " << workl[iptr(5)+i-1] << "\n";
+                }
+              else
+                {
+                  // the wanted Ritz estimates are at the end
+                  for (F77_INT i = p - k; i < p; i++)
+                    os << "    " << workl[iptr(5)+i-1] << "\n";
+                }
             }
 
           // This is a kludge, as ARPACK doesn't give its
           // iteration pointer.  But as workl[iptr(5)-1] is
           // an output value updated at each iteration, setting
           // a value in this array to NaN and testing for it
           // is a way of obtaining the iteration counter.
           if (ido != 99)
@@ -3094,18 +3168,27 @@ EigsComplexNonSymmetricFunc (EigsComplex
 
       if (disp > 0 && ! octave::math::isnan(workl[iptr(5)-1]))
         {
           if (iter++)
             {
               os << "Iteration " << iter - 1 <<
                  ": a few Ritz values of the " << p << "-by-" <<
                  p << " matrix\n";
-              for (int i = 0 ; i < k; i++)
-                os << "    " << workl[iptr(5)+i-1] << "\n";
+              if (ido == 99) // convergence
+                {
+                  for (F77_INT i = 0; i < k; i++)
+                    os << "    " << workl[iptr(5)+i-1] << "\n";
+                }
+              else
+                {
+                  // the wanted Ritz estimates are at the end
+                  for (F77_INT i = p - k; i < p; i++)
+                    os << "    " << workl[iptr(5)+i-1] << "\n";
+                }
             }
 
           // This is a kludge, as ARPACK doesn't give its
           // iteration pointer.  But as workl[iptr(5)-1] is
           // an output value updated at each iteration, setting
           // a value in this array to NaN and testing for it
           // is a way of obtaining the iteration counter.
           if (ido != 99)
