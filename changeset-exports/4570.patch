# HG changeset patch
# User jwe
# Date 1067527689 0
#      Thu Oct 30 15:28:09 2003 +0000
# Node ID 32b491743d40f47cf5649add2648f0a3d07dd72c
# Parent  01e4957409a45b038dc5d6707bda3edb525ccb48
[project @ 2003-10-30 15:28:08 by jwe]

diff --git a/ChangeLog b/ChangeLog
--- a/ChangeLog
+++ b/ChangeLog
@@ -1,8 +1,17 @@
+2003-10-24  Stefan Monnier  <monnier@iro.umontreal.ca>
+
+	* emacs/octave-mod.el (octave-comment-start): Simplify.
+	(octave-point): Remove.
+	(octave-in-comment-p, octave-in-string-p)
+	(octave-not-in-string-or-comment-p, calculate-octave-indent)
+	(octave-blink-matching-block-open, octave-auto-fill):
+	Use line-(beginning|end)-position instead.
+
 2003-10-29  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* emacs/octave-inf.el (inferior-octave-prompt): Don't bother
 	matching "octave.bin".
 
 2003-10-29  Lute Kamstra  <lute@gnu.org>
 
 	* emacs/octave-inf.el (inferior-octave-prompt): Recognize
diff --git a/emacs/octave-mod.el b/emacs/octave-mod.el
--- a/emacs/octave-mod.el
+++ b/emacs/octave-mod.el
@@ -91,17 +91,17 @@ All Octave abbrevs start with a grave ac
     (define-abbrev octave-abbrev-table "`up" "unwind_protect" nil)
     (define-abbrev octave-abbrev-table "`upc" "unwind_protect_cleanup" nil)
     (define-abbrev octave-abbrev-table "`w" "while ()" nil)
     (setq abbrevs-changed ac)))
 
 (defvar octave-comment-char ?#
   "Character to start an Octave comment.")
 (defvar octave-comment-start
-  (concat (make-string 1 octave-comment-char) " ")
+  (string octave-comment-char ?\ )
   "String to insert to start a new Octave in-line comment.")
 (defvar octave-comment-start-skip "\\s<+\\s-*"
   "Regexp to match the start of an Octave comment up to its body.")
 
 (defvar octave-begin-keywords
   '("do" "for" "function" "if" "switch" "try" "unwind_protect" "while"))
 (defvar octave-else-keywords
   '("case" "catch" "else" "elseif" "otherwise" "unwind_protect_cleanup"))
@@ -287,20 +287,17 @@ parenthetical grouping.")
 	["Toggle Auto-Fill Mode"	auto-fill-mode t]
 	"-"
 	["Submit Bug Report"		octave-submit-bug-report t]
 	"-"
 	["Describe Octave Mode"		octave-describe-major-mode t]
 	["Lookup Octave Index"		octave-help t])
   "Menu for Octave mode.")
 
-(defvar octave-mode-syntax-table nil
-  "Syntax table in use in octave-mode buffers.")
-(if octave-mode-syntax-table
-    ()
+(defvar octave-mode-syntax-table
   (let ((table (make-syntax-table)))
     (modify-syntax-entry ?\r " "  table)
     (modify-syntax-entry ?+ "."   table)
     (modify-syntax-entry ?- "."   table)
     (modify-syntax-entry ?= "."   table)
     (modify-syntax-entry ?* "."   table)
     (modify-syntax-entry ?/ "."   table)
     (modify-syntax-entry ?> "."   table)
@@ -312,17 +309,18 @@ parenthetical grouping.")
     (modify-syntax-entry ?\' "."  table)
     (modify-syntax-entry ?\` "w"  table)
     (modify-syntax-entry ?\" "\"" table)
     (modify-syntax-entry ?. "w"   table)
     (modify-syntax-entry ?_ "w"   table)
     (modify-syntax-entry ?\% "<"  table)
     (modify-syntax-entry ?\# "<"  table)
     (modify-syntax-entry ?\n ">"  table)
-    (setq octave-mode-syntax-table table)))
+    table)
+  "Syntax table in use in `octave-mode' buffers.")
 
 (defcustom octave-auto-indent nil
   "*Non-nil means indent line after a semicolon or space in Octave mode."
   :type 'boolean
   :group 'octave)
 
 (defcustom octave-auto-newline nil
   "*Non-nil means automatically newline after a semicolon in Octave mode."
@@ -566,43 +564,31 @@ including a reproducible test case and s
   (run-hooks 'octave-mode-hook))
 
 ;;; Miscellaneous useful functions
 (defun octave-describe-major-mode ()
   "Describe the current major mode."
   (interactive)
   (describe-function major-mode))
 
-(defun octave-point (position)
-  "Returns the value of point at certain positions." 
-  (save-excursion
-    (cond
-     ((eq position 'bol)  (beginning-of-line))
-     ((eq position 'eol)  (end-of-line))
-     ((eq position 'boi)  (back-to-indentation))
-     ((eq position 'bonl) (forward-line 1))
-     ((eq position 'bopl) (forward-line -1))
-     (t (error "unknown buffer position requested: %s" position)))
-    (point)))
-
 (defsubst octave-in-comment-p ()
   "Returns t if point is inside an Octave comment, nil otherwise."
   (interactive)
   (save-excursion
-    (nth 4 (parse-partial-sexp (octave-point 'bol) (point)))))
+    (nth 4 (parse-partial-sexp (line-beginning-position) (point)))))
 
 (defsubst octave-in-string-p ()
   "Returns t if point is inside an Octave string, nil otherwise."
   (interactive)
   (save-excursion
-    (nth 3 (parse-partial-sexp (octave-point 'bol) (point)))))
+    (nth 3 (parse-partial-sexp (line-beginning-position) (point)))))
 
 (defsubst octave-not-in-string-or-comment-p ()
   "Returns t iff point is not inside an Octave string or comment."
-  (let ((pps (parse-partial-sexp (octave-point 'bol) (point))))
+  (let ((pps (parse-partial-sexp (line-beginning-position) (point))))
     (not (or (nth 3 pps) (nth 4 pps)))))
 
 (defun octave-in-block-p ()
   "Returns t if point is inside an Octave block, nil otherwise.
 The block is taken to start at the first letter of the begin keyword and
 to end after the end keyword."
   (let ((pos (point)))
     (save-excursion
@@ -683,17 +669,17 @@ level."
 	    (error nil))
 	  (setq icol (+ 1 (current-column)))
 	(if (zerop (octave-previous-code-line))
 	    (progn
 	      (octave-beginning-of-line)
 	      (back-to-indentation)
 	      (setq icol (current-column))
 	      (let ((bot (point))
-		    (eol (octave-point 'eol)))
+		    (eol (line-end-position)))
 		(while (< (point) eol)
 		  (if (octave-not-in-string-or-comment-p)
 		      (cond
 		       ((looking-at "\\<switch\\>")
 			(setq icol (+ icol (* 2 octave-block-offset))))
 		       ((looking-at octave-block-begin-regexp)
 			(setq icol (+ icol octave-block-offset)))
 		       ((looking-at octave-block-else-regexp)
@@ -1018,17 +1004,17 @@ Signal an error if the keywords are inco
 		  (buffer-substring-no-properties
 		   (match-beginning 2) (match-end 2)))
 	    (octave-backward-block)))
 	  (setq pos (match-end 0)
 		bb-keyword
 		(buffer-substring-no-properties
 		 (match-beginning 0) pos)
 		pos (+ pos 1)
-		eol (octave-point 'eol)
+		eol (line-end-position)
 		bb-arg
 		(save-excursion
 		  (save-restriction
 		    (goto-char pos)
 		    (while (and (skip-syntax-forward "^<" eol)
 				(octave-in-string-p)
 				(not (forward-char 1))))
 		    (skip-syntax-backward " ")
@@ -1124,17 +1110,17 @@ otherwise."
 		  ;; the first word
 		  (if (bolp)
 		      (re-search-forward "[ \t]" opoint t))
 		  ;; If we're in a comment line, don't break after the
 		  ;; comment chars
 		  (if (save-excursion
 			(skip-syntax-backward " <")
 			(bolp))
-		      (re-search-forward "[ \t]" (octave-point 'eol)
+		      (re-search-forward "[ \t]" (line-end-position)
 					 'move))
 		  ;; If we're not in a comment line and just ahead the
 		  ;; continuation string, don't break here.
 		  (if (and (not (octave-in-comment-p))
 			   (looking-at
 			    (concat "\\s-*"
 				    (regexp-quote
 				     octave-continuation-string)
