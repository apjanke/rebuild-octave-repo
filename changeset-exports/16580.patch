# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1367170897 14400
#      Sun Apr 28 13:41:37 2013 -0400
# Node ID adc150db18099fdd02f4ad184faf3e3fe55a612b
# Parent  7f8db1942dc06b5c7590ab54b6c818b0338e24ed
style fixes for uigetfile changes

* dialog.cc, dialog.h, main-window.cc, octave-qt-link.cc,
octave-qt-link.h, octave-link.cc, octave-link.h, uigetfile.m:
Style fixes.

diff --git a/libgui/src/dialog.cc b/libgui/src/dialog.cc
--- a/libgui/src/dialog.cc
+++ b/libgui/src/dialog.cc
@@ -69,40 +69,42 @@ QUIWidgetCreator::dialog_button_clicked 
   dialog_result = 1;
 
   // Wake up Octave process so that it continues.
   waitcondition.wakeAll ();
 }
 
 
 void
-QUIWidgetCreator::list_select_finished (const QIntList& selected, const int button_pressed)
+QUIWidgetCreator::list_select_finished (const QIntList& selected,
+                                        int button_pressed)
 {
   // Store the value so that builtin functions can retrieve.
   *list_index = selected;
   dialog_result = button_pressed;
 
   // Wake up Octave process so that it continues.
   waitcondition.wakeAll ();
 }
 
 
 void
-QUIWidgetCreator::input_finished (const QStringList& input, const int button_pressed)
+QUIWidgetCreator::input_finished (const QStringList& input, int button_pressed)
 {
   // Store the value so that builtin functions can retrieve.
   *string_list = input;
   dialog_result = button_pressed;
 
   // Wake up Octave process so that it continues.
   waitcondition.wakeAll ();
 }
 
 void
-QUIWidgetCreator::filedialog_finished (const QStringList& files, const QString & path, const int filterindex)
+QUIWidgetCreator::filedialog_finished (const QStringList& files,
+                                       const QString& path, int filterindex)
 {
   // Store the value so that builtin functions can retrieve.
   *string_list = files;
   dialog_result = filterindex;
   *path_name = path;
 
   // Wake up Octave process so that it continues.
   waitcondition.wakeAll ();
@@ -271,19 +273,19 @@ ListDialog::ListDialog (const QStringLis
            view, SLOT (selectAll ()));
 
   connect (buttonOk, SIGNAL (clicked ()),
            this, SLOT (buttonOk_clicked ()));
 
   connect (buttonCancel, SIGNAL (clicked ()),
            this, SLOT (buttonCancel_clicked ()));
 
-  connect (this, SIGNAL (finish_selection (const QIntList&, const int)),
+  connect (this, SIGNAL (finish_selection (const QIntList&, int)),
            &uiwidget_creator,
-           SLOT (list_select_finished (const QIntList&, const int)));
+           SLOT (list_select_finished (const QIntList&, int)));
 }
 
 
 void
 ListDialog::buttonOk_clicked (void)
 {
   // Store information about what button was pressed so that builtin
   // functions can retrieve.
@@ -378,19 +380,19 @@ InputDialog::InputDialog (const QStringL
     setWindowTitle (title.isEmpty () ? " " : title);
 
     connect (buttonOk, SIGNAL (clicked ()),
              this, SLOT (buttonOk_clicked ()));
 
     connect (buttonCancel, SIGNAL (clicked ()),
              this, SLOT (buttonCancel_clicked ()));
 
-    connect (this, SIGNAL (finish_input (const QStringList&, const int)),
+    connect (this, SIGNAL (finish_input (const QStringList&, int)),
              &uiwidget_creator,
-             SLOT (input_finished (const QStringList&, const int)));
+             SLOT (input_finished (const QStringList&, int)));
 }
 
 
 void
 InputDialog::buttonOk_clicked (void)
 {
   // Store information about what button was pressed so that builtin
   // functions can retrieve.
@@ -413,20 +415,20 @@ InputDialog::buttonCancel_clicked (void)
 
   
 void
 InputDialog::reject (void)
 {
   buttonCancel_clicked ();
 }
 
-FileDialog::FileDialog (const QStringList &filters,
+FileDialog::FileDialog (const QStringList& filters,
                         const QString& title,
                         const QString& filename,
-                        const QString &dirname,
+                        const QString& dirname,
                         bool multiselect)
   : QFileDialog()
 {
   // Create a NonModal message.
   setWindowModality (Qt::NonModal);
 
   setWindowTitle (title.isEmpty () ? " " : title);
   setDirectory (dirname);
@@ -435,19 +437,21 @@ FileDialog::FileDialog (const QStringLis
     setFileMode (QFileDialog::ExistingFiles);
   else
     setFileMode (QFileDialog::ExistingFile);
 
   setNameFilters (filters);
   setAcceptMode (QFileDialog::AcceptOpen);
   selectFile (filename);
   
-  connect (this, SIGNAL (finish_input (const QStringList&, const QString &, const int)),
+  connect (this,
+           SIGNAL (finish_input (const QStringList&, const QString&, int)),
            &uiwidget_creator,
-           SLOT (filedialog_finished (const QStringList&, const QString &, const int)));
+           SLOT (filedialog_finished (const QStringList&, const QString&,
+                                      int)));
 }
 
 void
 FileDialog::reject (void)
 {
   QStringList empty;
   emit finish_input (empty, "", 0);
   done (QDialog::Rejected);
@@ -455,28 +459,27 @@ FileDialog::reject (void)
 }
 
 void FileDialog::accept(void)
 {
   QStringList string_result;
   QString path;
   int idx = 1;
 
-  string_result = selectedFiles();
+  string_result = selectedFiles ();
 
-  // matlab expects just the file name, whereas the file dialog gave us
-  // pull path names, so fix it
-  for(int i=0;i<string_result.size ();i++)
-    {
-      string_result[i] = QFileInfo (string_result[i]).fileName ();
-    }
+  // Matlab expects just the file name, whereas the file dialog gave us
+  // pull path names, so fix it.
+
+  for (int i = 0; i < string_result.size (); i++)
+    string_result[i] = QFileInfo (string_result[i]).fileName ();
 
 
   path = directory ().absolutePath ();
 
   QStringList filters = nameFilters ();
-  idx = filters.indexOf( selectedNameFilter ()) + 1;
+  idx = filters.indexOf (selectedNameFilter ()) + 1;
   
   // send the selected info
   emit finish_input (string_result, path, idx);
   done (QDialog::Accepted);
 }
 
diff --git a/libgui/src/dialog.h b/libgui/src/dialog.h
--- a/libgui/src/dialog.h
+++ b/libgui/src/dialog.h
@@ -99,25 +99,25 @@ public:
 
     emit create_inputlayout (prompt, title, nr, nc, defaults);
 
     return true;
   };
 
   const QStringList *get_string_list (void) { return string_list; }
 
-  bool signal_filedialog (const QStringList &filters, const QString &title, 
-                          const QString &filename, const QString &dirname, 
+  bool signal_filedialog (const QStringList& filters, const QString& title, 
+                          const QString& filename, const QString& dirname, 
                           bool multiselect)
   {
     emit create_filedialog (filters, title, filename, dirname, multiselect);
     return true;
   }
 
-  const QString * get_dialog_path(void) { return path_name; }
+  const QString *get_dialog_path (void) { return path_name; }
 
   void wait (void)
   {
     // Wait while the user is responding to message box.
     waitcondition.wait (&mutex);
   }
 
 signals:
@@ -128,43 +128,41 @@ signals:
   void create_listview (const QStringList&, const QString&, int, int,
                         const QIntList&, const QString&, const QStringList&,
                         const QString&, const QString&);
 
   void create_inputlayout (const QStringList&, const QString&,
                            const QFloatList&, const QFloatList&,
                            const QStringList&);
 
-  void create_filedialog (const QStringList &filters,
-                          const QString &title,
-                          const QString &filename,
-                          const QString &dirname,
+  void create_filedialog (const QStringList& filters, const QString& title,
+                          const QString& filename, const QString& dirname,
                           bool multiselect);
 public slots:
 
   void dialog_button_clicked (QAbstractButton *button);
 
-  void list_select_finished (const QIntList& selected,
-                             const int button_pressed);
+  void list_select_finished (const QIntList& selected, int button_pressed);
 
-  void input_finished (const QStringList& input, const int button_pressed);
+  void input_finished (const QStringList& input, int button_pressed);
 
-  void filedialog_finished (const QStringList& files, const QString &path, const int filterindex);
+  void filedialog_finished (const QStringList& files, const QString& path,
+                            int filterindex);
 
 private:
 
   int dialog_result;
   QString dialog_button;
 
   // The list could conceivably be big.  Not sure how things are
   // stored internally, so keep off of the stack.
   QStringList *string_list;
   QIntList *list_index;
 
-  QString * path_name;
+  QString *path_name;
 
   // GUI objects cannot be accessed in the non-GUI thread.  However,
   // signals can be sent to slots across threads with proper
   // synchronization.  Hence, the use of QWaitCondition.
 
   QMutex mutex;
 
   QWaitCondition waitcondition;
@@ -205,17 +203,17 @@ public:
 
   explicit ListDialog (const QStringList& list, const QString& mode,
                        int width, int height, const QList<int>& initial,
                        const QString& name, const QStringList& prompt,
                        const QString& ok_string, const QString& cancel_string);
 
 signals:
 
-  void finish_selection (const QIntList&, const int);
+  void finish_selection (const QIntList&, int);
 
 public slots:
 
   void buttonOk_clicked (void);
 
   void buttonCancel_clicked (void);
 
   void reject (void);
@@ -231,40 +229,41 @@ class InputDialog : public QDialog
 public:
 
   explicit InputDialog (const QStringList& prompt, const QString& title,
                         const QFloatList& nr, const QFloatList& nc,
                         const QStringList& defaults);
 
 signals:
 
-  void finish_input (const QStringList&, const int);
+  void finish_input (const QStringList&, int);
 
 public slots:
 
   void buttonOk_clicked (void);
 
   void buttonCancel_clicked (void);
 
   void reject (void);
 };
 
 class FileDialog : public QFileDialog
 {
   Q_OBJECT
 
 public:
 
-  explicit FileDialog (const QStringList &filters,
+  explicit FileDialog (const QStringList& filters,
                        const QString& title, const QString& filename, 
                        const QString& dirname, bool multiselect);
 
 signals:
 
-  void finish_input (const QStringList&, const QString &, const int);
+  void finish_input (const QStringList&, const QString&, int);
 
 private slots:
-  void reject();
-  void accept();
 
+  void reject (void);
+
+  void accept (void);
 };
 
 #endif
diff --git a/libgui/src/main-window.cc b/libgui/src/main-window.cc
--- a/libgui/src/main-window.cc
+++ b/libgui/src/main-window.cc
@@ -648,19 +648,22 @@ main_window::connect_uiwidget_links ()
                                        const QFloatList&, const QFloatList&,
                                        const QStringList&)),
            this,
            SLOT (handle_create_inputlayout (const QStringList&, const QString&,
                                             const QFloatList&, const QFloatList&,
                                             const QStringList&)));
 
   connect (&uiwidget_creator,
-           SIGNAL (create_filedialog (const QStringList &,const QString&, const QString&, const QString&, bool)),
+           SIGNAL (create_filedialog (const QStringList &,const QString&,
+                                      const QString&, const QString&, bool)),
            this,
-           SLOT (handle_create_filedialog (const QStringList &,const QString&, const QString&,const QString&, bool)));
+           SLOT (handle_create_filedialog (const QStringList &, const QString&,
+                                           const QString&, const QString&,
+                                           bool)));
 }
 
 // Create a message dialog with specified string, buttons and decorative
 // text.
 
 void
 main_window::handle_create_dialog (const QString& message,
                                    const QString& title,
@@ -708,24 +711,25 @@ main_window::handle_create_inputlayout (
   InputDialog *input_dialog = new InputDialog (prompt, title, nr, nc,
                                                defaults);
 
   input_dialog->setAttribute (Qt::WA_DeleteOnClose);
   input_dialog->show ();
 }
 
 void
-main_window::handle_create_filedialog (const QStringList &filters,
+main_window::handle_create_filedialog (const QStringList& filters,
                                        const QString& title, 
                                        const QString& filename, 
-                                       const QString &dirname,
+                                       const QString& dirname,
                                        bool multiselect)
 {
-  FileDialog * file_dialog = new FileDialog(filters, title, 
-                                            filename, dirname, multiselect);
+  FileDialog *file_dialog = new FileDialog (filters, title, filename,
+                                            dirname, multiselect);
+
   file_dialog->setAttribute (Qt::WA_DeleteOnClose);
   file_dialog->show ();
 }
 
 // Main subroutine of the constructor
 void
 main_window::construct (void)
 {
diff --git a/libgui/src/octave-qt-link.cc b/libgui/src/octave-qt-link.cc
--- a/libgui/src/octave-qt-link.cc
+++ b/libgui/src/octave-qt-link.cc
@@ -124,39 +124,41 @@ make_qstring_list (const std::list<std::
     {
       retval.append (QString::fromStdString (*it));
     }
 
   return retval;
 }
 
 static QStringList
-make_filter_list (const std::list< std::pair<std::string, std::string> >& lst)
+make_filter_list (const octave_link::filter_list& lst)
 {
   QStringList retval;
 
-  // we have pairs of data, first being the list of extensions exta;exb;extc etc
-  // second the name to use as filter name (optional).
-  // Qt wants a a list of filters in the format of 'FilterName (spacfe separated exts)'
+  // We have pairs of data, first being the list of extensions
+  // exta;exb;extc etc second the name to use as filter name
+  // (optional).  Qt wants a a list of filters in the format of
+  // 'FilterName (space separated exts)'.
 
-  for (std::list< std::pair<std::string,std::string> >::const_iterator it = lst.begin ();
+  for (octave_link::filter_list::const_iterator it = lst.begin ();
        it != lst.end (); it++)
     {
-      QString ext = QString::fromStdString ((*it).first);
-      QString name = QString::fromStdString ((*it).second);
+      QString ext = QString::fromStdString (it->first);
+      QString name = QString::fromStdString (it->second);
 
-      // strip out (exts) from name (if any)
-      name.replace(QRegExp("\\(.*\\)"), "");
-      // replace ';' with spaces in ext list
-      ext.replace(";"," ");
+      // Strip out extensions from name and replace ';' with spaces in
+      // list.
+
+      name.replace (QRegExp ("\\(.*\\)"), "");
+      ext.replace (";", " ");
 
       if (name.length() == 0)
         {
-           // no name field - so need build one from teh extendiions
-           name = ext.toUpper() + " Files";
+          // No name field.  Build one from the extensions.
+          name = ext.toUpper() + " Files";
         }
 
       retval.append (name + " (" + ext + ")");
     }
 
   return retval;
 }
 
@@ -215,41 +217,39 @@ octave_qt_link::do_input_dialog (const s
     {
       retval.push_back (it->toStdString ());
     }
 
   return retval;
 }
 
 std::list<std::string>
-octave_qt_link::do_file_dialog (const std::list< std::pair< std::string, std::string > > filter,
+octave_qt_link::do_file_dialog (const filter_list& filter,
                                 const std::string& title,
                                 const std::string& filename,
                                 const std::string& dirname,
                                 bool multiselect)
 {
   std::list<std::string> retval;
 
-  uiwidget_creator.signal_filedialog ( make_filter_list (filter),
-                                       QString::fromStdString (title),
-                                       QString::fromStdString (filename),
-                                       QString::fromStdString (dirname),
-                                       multiselect);
+  uiwidget_creator.signal_filedialog (make_filter_list (filter),
+                                      QString::fromStdString (title),
+                                      QString::fromStdString (filename),
+                                      QString::fromStdString (dirname),
+                                      multiselect);
 
   // Wait while the user is responding to dialog.
   uiwidget_creator.wait ();
 
-  // add all the file dialog result to a string list
+  // Add all the file dialog results to a string list.
   const QStringList *inputLine = uiwidget_creator.get_string_list ();
 
   for (QStringList::const_iterator it = inputLine->begin ();
        it != inputLine->end (); it++)
-    {
-      retval.push_back (it->toStdString ());
-    }
+    retval.push_back (it->toStdString ());
 
   retval.push_back (uiwidget_creator.get_dialog_path ()->toStdString ());
   retval.push_back ((QString ("%1").arg (uiwidget_creator.get_dialog_result ())).toStdString ());
 
   return retval;
 }
 
 int
diff --git a/libgui/src/octave-qt-link.h b/libgui/src/octave-qt-link.h
--- a/libgui/src/octave-qt-link.h
+++ b/libgui/src/octave-qt-link.h
@@ -80,20 +80,18 @@ public:
   std::list<std::string>
   do_input_dialog (const std::list<std::string>& prompt,
                    const std::string& title,
                    const std::list<float>& nr,
                    const std::list<float>& nc,
                    const std::list<std::string>& defaults);
 
   std::list<std::string>
-  do_file_dialog (const std::list< std::pair< std::string, std::string > > filter,
-                  const std::string& title, 
-                  const std::string &filename,
-                  const std::string &pathname,
+  do_file_dialog (const filter_list& filter, const std::string& title, 
+                  const std::string &filename, const std::string &pathname,
                   bool multiselect);
 
   int
   do_debug_cd_or_addpath_error (const std::string& file,
                                 const std::string& dir,
                                 bool addpath_option);
 
   void do_change_directory (const std::string& dir);
diff --git a/libinterp/interpfcn/octave-link.cc b/libinterp/interpfcn/octave-link.cc
--- a/libinterp/interpfcn/octave-link.cc
+++ b/libinterp/interpfcn/octave-link.cc
@@ -194,83 +194,87 @@ Undocumented internal function.\n\
 }
 
 DEFUN (__octave_link_file_dialog__, args, ,
   "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} __octave_link_file_dialog__ (@var{filterlist}, @var{title}, @var{filename}, @var{size} @var{multiselect}, @var{pathname})\n\
 Undocumented internal function.\n\
 @end deftypefn")
 {
-  octave_value_list retval(3, octave_value (0));
+  octave_value_list retval;
 
   if (args.length () == 6)
     {
 
       const Array<std::string> flist = args (0).cellstr_value ();
       std::string title = args (1).string_value ();
       std::string filename = args (2).string_value ();
       Matrix pos = args (3).matrix_value ();
       std::string multi_on = args (4).string_value (); // on, off
       std::string pathname = args (5).string_value ();
 
       octave_idx_type nel = flist.numel ();
-      std::list< std::pair<std::string, std::string> > filter_lst;
+      octave_link::filter_list filter_lst;
 
-      for(octave_idx_type i = 0; i < flist.rows (); i++)
-        {
-          filter_lst.push_back ( std::make_pair (flist.elem (i,0), flist.columns ()>1 ? flist.elem (i, 1) : "" ) );
-        }
+      for (octave_idx_type i = 0; i < flist.rows (); i++)
+        filter_lst.push_back (std::make_pair (flist(i,0),
+                                              (flist.columns () > 1
+                                               ? flist(i,1) : "")));
 
       if (! error_state)
         {
-
           flush_octave_stdout ();
 
           std::list<std::string> items_lst
-            = octave_link::file_dialog (filter_lst, title, filename, pathname, multi_on == "on" ? true : false);
+            = octave_link::file_dialog (filter_lst, title, filename, pathname,
+                                        multi_on == "on" ? true : false);
 
           nel = items_lst.size ();
 
-          // if 3, then is filename, dolder and selected index,
-          if (items_lst.size () <= 3)
+          retval.resize (3);
+
+          // If 3, then is filename, directory and selected index.
+          if (nel <= 3)
             {
-             int idx = 0;
-             for (std::list<std::string>::iterator it = items_lst.begin ();
-                  it != items_lst.end (); it++)
-               {
-                 retval (idx++) = *(it);
+              int idx = 0;
+              for (std::list<std::string>::iterator it = items_lst.begin ();
+                   it != items_lst.end (); it++)
+                {
+                  retval(idx++) = *it;
 
-                 if (idx == 1 && retval (0).string_value ().length () == 0)
-                   retval (0) = 0;
-                 if(idx == 3) retval (2) = atoi (retval (2).string_value ().c_str ());
-               }
+                  if (idx == 1 && retval (0).string_value ().length () == 0)
+                    retval(0) = 0;
+
+                  if (idx == 3)
+                    retval(2) = atoi (retval (2).string_value ().c_str ());
+                }
             }
           else
             {
-              // multiple files
+              // Multiple files.
               nel = items_lst.size ();
               Cell items (dim_vector (1, nel));
 
               std::list<std::string>::iterator it = items_lst.begin ();
-              for (int idx=0;idx<items_lst.size ()-2;idx++)
+
+              for (int idx = 0; idx < items_lst.size ()-2; idx++)
                 {
                   items.xelem (idx) = *it;
                   it++;
                 }
-              retval (0) = items;
-              retval (1) = *it;
-              it++;
-              retval (2) = atoi ((*it).c_str ());
+
+              retval(0) = items;
+              retval(1) = *it++;
+              retval(2) = atoi (it->c_str ());
             }
-
         }
       else
         error ("invalid arguments");
+    }
 
-    }
   return retval;
 }
 
 DEFUN (__octave_link_list_dialog__, args, ,
   "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} __octave_link_list_dialog__ (@var{list}, @var{mode}, @var{size}, @var{intial}, @var{name}, @var{prompt}, @var{ok_string}, @var{cancel_string})\n\
 Undocumented internal function.\n\
 @end deftypefn")
diff --git a/libinterp/interpfcn/octave-link.h b/libinterp/interpfcn/octave-link.h
--- a/libinterp/interpfcn/octave-link.h
+++ b/libinterp/interpfcn/octave-link.h
@@ -174,22 +174,22 @@ public:
                 const std::list<float>& nc,
                 const std::list<std::string>& defaults)
   {
     return enabled ()
       ? instance->do_input_dialog (prompt, title, nr, nc, defaults)
       : std::list<std::string> ();
   }
 
+  typedef std::list<std::pair<std::string, std::string> > filter_list;
+
   static std::list<std::string>
-  file_dialog ( const std::list< std::pair< std::string, std::string > > filter,
-                const std::string& title,
-                const std::string& filename,
-                const std::string& dirname,
-                bool multiselect)
+  file_dialog (const filter_list& filter, const std::string& title,
+               const std::string& filename, const std::string& dirname,
+               bool multiselect)
   {
     return enabled ()
       ? instance->do_file_dialog (filter, title, filename, dirname, multiselect)
       : std::list<std::string> ();
   }
 
 
   static int debug_cd_or_addpath_error (const std::string& file,
@@ -379,20 +379,18 @@ protected:
   virtual std::list<std::string>
   do_input_dialog (const std::list<std::string>& prompt,
                    const std::string& title,
                    const std::list<float>& nr,
                    const std::list<float>& nc,
                    const std::list<std::string>& defaults) = 0;
 
   virtual std::list<std::string>
-  do_file_dialog (const std::list< std::pair< std::string, std::string > > filter,
-                  const std::string& title,
-                  const std::string& filename,
-                  const std::string& dirname,
+  do_file_dialog (const filter_list& filter, const std::string& title,
+                  const std::string& filename, const std::string& dirname,
                   bool multiselect) = 0;
 
   virtual int
   do_debug_cd_or_addpath_error (const std::string& file,
                                 const std::string& dir,
                                 bool addpath_option) = 0;
 
   virtual void do_change_directory (const std::string& dir) = 0;
diff --git a/scripts/plot/uigetfile.m b/scripts/plot/uigetfile.m
--- a/scripts/plot/uigetfile.m
+++ b/scripts/plot/uigetfile.m
@@ -19,17 +19,17 @@
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {[@var{fname}, @var{fpath}, @var{fltidx}] =} uigetfile ()
 ## @deftypefnx {Function File} {[@dots{}] =} uigetfile (@var{flt})
 ## @deftypefnx {Function File} {[@dots{}] =} uigetfile (@var{flt}, @var{dialog_name})
 ## @deftypefnx {Function File} {[@dots{}] =} uigetfile (@var{flt}, @var{dialog_name}, @var{default_file})
 ## @deftypefnx {Function File} {[@dots{}] =} uigetfile (@dots{}, "Position", [@var{px} @var{py}])
 ## @deftypefnx {Function File} {[@dots{}] =} uigetfile (@dots{}, "MultiSelect", @var{mode})
 ##
-## Open a GUI dialog for selecting a file.  It returns the filename @var{fname},
+## Open a GUI dialog for selecting a file and return the filename @var{fname},
 ## the path to this file @var{fpath}, and the filter index @var{fltidx}.
 ## @var{flt} contains a (list of) file filter string(s) in one of the following
 ## formats:
 ##
 ## @table @asis
 ## @item "/path/to/filename.ext"
 ## If a filename is given then the file extension is extracted and used as
 ## filter.  In addition, the path is selected as current path and the filename
