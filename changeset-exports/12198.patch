# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1296241559 18000
#      Fri Jan 28 14:05:59 2011 -0500
# Node ID 30ca5a0b0e2fe9c4f45b0670da0e000756700491
# Parent  9ed4018d538c8f37a42b9eef13e954fe0d7df07b
don't let uninitialized values escape from DNEUPD

diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,14 @@
+2011-01-28  John W. Eaton  <jwe@octave.org>
+
+	* eigs-base.cc (EigsRealNonSymmetricFunc,
+	EigsRealNonSymmetricMatrix, EigsRealNonSymmetricMatrixShift):
+	Initialize eig_vec2 to 0 before calling dneupd.
+
 2011-01-28  John W. Eaton  <jwe@octave.org>
 
 	* eigs-base.cc: Assume we have ARPACK.
 
 2011-01-27  John W. Eaton  <jwe@octave.org>
 
 	* Sparse.cc (Sparse<T>::assign (const idx_vector&, const idx_vector&,
 	const Sparse<T>&)): Allow 0x0 LHS with colon dimensions to
diff --git a/liboctave/eigs-base.cc b/liboctave/eigs-base.cc
--- a/liboctave/eigs-base.cc
+++ b/liboctave/eigs-base.cc
@@ -1919,17 +1919,24 @@ EigsRealNonSymmetricMatrix (const M& m, 
   // that fortran uses 4- or 8-bytes per logical and C++ 1-byte
   // per bool, though this might be system dependent. As
   // long as the HOWMNY arg is not "S", the logical array
   // is just workspace for ARPACK, so use int type to
   // avoid problems.
   Array<octave_idx_type> s (dim_vector (p, 1));
   octave_idx_type *sel = s.fortran_vec ();
 
-  Matrix eig_vec2 (n, k + 1);
+  // FIXME -- initialize eig_vec2 to zero; apparently dneupd can skip
+  // the assignment to elements of Z that represent imaginary parts.
+  // Found with valgrind and
+  //
+  //   A = [1,0,0,-1;0,1,0,0;0,0,1,0;0,0,2,1];
+  //   [vecs, vals, f] = eigs (A, 1)
+
+  Matrix eig_vec2 (n, k + 1, 0.0);
   double *z = eig_vec2.fortran_vec ();
 
   OCTAVE_LOCAL_BUFFER (double, dr, k + 1);
   OCTAVE_LOCAL_BUFFER (double, di, k + 1);
   OCTAVE_LOCAL_BUFFER (double, workev, 3 * p);
   for (octave_idx_type i = 0; i < k+1; i++)
     dr[i] = di[i] = 0.;
 
@@ -2298,17 +2305,24 @@ EigsRealNonSymmetricMatrixShift (const M
   // that fortran uses 4- or 8-bytes per logical and C++ 1-byte
   // per bool, though this might be system dependent. As
   // long as the HOWMNY arg is not "S", the logical array
   // is just workspace for ARPACK, so use int type to
   // avoid problems.
   Array<octave_idx_type> s (dim_vector (p, 1));
   octave_idx_type *sel = s.fortran_vec ();
 
-  Matrix eig_vec2 (n, k + 1);
+  // FIXME -- initialize eig_vec2 to zero; apparently dneupd can skip
+  // the assignment to elements of Z that represent imaginary parts.
+  // Found with valgrind and
+  //
+  //   A = [1,0,0,-1;0,1,0,0;0,0,1,0;0,0,2,1];
+  //   [vecs, vals, f] = eigs (A, 1)
+
+  Matrix eig_vec2 (n, k + 1, 0.0);
   double *z = eig_vec2.fortran_vec ();
 
   OCTAVE_LOCAL_BUFFER (double, dr, k + 1);
   OCTAVE_LOCAL_BUFFER (double, di, k + 1);
   OCTAVE_LOCAL_BUFFER (double, workev, 3 * p);
   for (octave_idx_type i = 0; i < k+1; i++)
     dr[i] = di[i] = 0.;
 
@@ -2603,17 +2617,24 @@ EigsRealNonSymmetricFunc (EigsFunc fun, 
   // that fortran uses 4- or 8-bytes per logical and C++ 1-byte
   // per bool, though this might be system dependent. As
   // long as the HOWMNY arg is not "S", the logical array
   // is just workspace for ARPACK, so use int type to
   // avoid problems.
   Array<octave_idx_type> s (dim_vector (p, 1));
   octave_idx_type *sel = s.fortran_vec ();
 
-  Matrix eig_vec2 (n, k + 1);
+  // FIXME -- initialize eig_vec2 to zero; apparently dneupd can skip
+  // the assignment to elements of Z that represent imaginary parts.
+  // Found with valgrind and
+  //
+  //   A = [1,0,0,-1;0,1,0,0;0,0,1,0;0,0,2,1];
+  //   [vecs, vals, f] = eigs (A, 1)
+
+  Matrix eig_vec2 (n, k + 1, 0.0);
   double *z = eig_vec2.fortran_vec ();
 
   OCTAVE_LOCAL_BUFFER (double, dr, k + 1);
   OCTAVE_LOCAL_BUFFER (double, di, k + 1);
   OCTAVE_LOCAL_BUFFER (double, workev, 3 * p);
   for (octave_idx_type i = 0; i < k+1; i++)
     dr[i] = di[i] = 0.;
 
