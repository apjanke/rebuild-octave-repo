# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1271226457 -7200
#      Wed Apr 14 08:27:37 2010 +0200
# Node ID 72c90e7132a974f6d4798bb09216c41d951aa6c1
# Parent  f6959aff84ca19e9d0c19bb0aea8cb4d2e258f06
fix failing sparse assignment tests

diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,12 @@
+2010-04-14  Jaroslav Hajek  <highegg@gmail.com>
+
+	* Sparse.cc: Update failing tests.
+
 2010-04-13  Jaroslav Hajek  <highegg@gmail.com>
 
 	* Sparse.cc (Sparse<T>::index): If S is a sparse column vector,
 	forward S(I,1) and S(I,:) to 1D indexing. Handle permutation indexing
 	in the 1D case.
 	(Sparse<T>::assign): If S is a sparse column vector,
 	forward S(I,1) = X and S(I,:) =X to 1D indexed assignment.
 	* idx-vector.cc (idx_vector::inverse_permutation): Add missing break.
diff --git a/liboctave/Sparse.cc b/liboctave/Sparse.cc
--- a/liboctave/Sparse.cc
+++ b/liboctave/Sparse.cc
@@ -861,18 +861,17 @@ template <class T>
 void
 Sparse<T>::resize1 (octave_idx_type n)
 {
   octave_idx_type nr = rows (), nc = cols ();
 
   if (nr == 0)
     resize (1, std::max (nc, n));
   else if (nc == 0)
-    // FIXME: Due to Matlab 2007a, but some existing tests fail on this.
-    resize (nr, (n + nr - 1) / nr);
+    resize (nr, (n + nr - 1) / nr); // Ain't it wicked?
   else if (nr == 1)
     resize (1, n);
   else if (nc == 1)
     resize (n, 1);
   else
     gripe_invalid_resize ();
 }
 
@@ -1100,19 +1099,16 @@ lblookup (const octave_idx_type *ridx, o
 template <class T>
 void
 Sparse<T>::delete_elements (const idx_vector& idx)
 {
   Sparse<T> retval;
 
   assert (ndims () == 2);
 
-  // FIXME: please don't fix the shadowed member warning yet because
-  // Sparse<T>::idx will eventually go away.
-
   octave_idx_type nr = dim1 ();
   octave_idx_type nc = dim2 ();
   octave_idx_type nz = nnz ();
 
   octave_idx_type nel = numel (); // Can throw.
 
   const dim_vector idx_dims = idx.orig_dimensions ();
 
@@ -1282,19 +1278,16 @@ Sparse<T>::delete_elements (int dim, con
 template <class T>
 Sparse<T>
 Sparse<T>::index (const idx_vector& idx, bool resize_ok) const
 {
   Sparse<T> retval;
 
   assert (ndims () == 2);
 
-  // FIXME: please don't fix the shadowed member warning yet because
-  // Sparse<T>::idx will eventually go away.
-
   octave_idx_type nr = dim1 ();
   octave_idx_type nc = dim2 ();
   octave_idx_type nz = nnz ();
 
   octave_idx_type nel = numel (); // Can throw.
 
   const dim_vector idx_dims = idx.orig_dimensions ();
 
@@ -1699,19 +1692,16 @@ Sparse<T>::index (const idx_vector& idx_
 template <class T>
 void
 Sparse<T>::assign (const idx_vector& idx, const Sparse<T>& rhs)
 {
   Sparse<T> retval;
 
   assert (ndims () == 2);
 
-  // FIXME: please don't fix the shadowed member warning yet because
-  // Sparse<T>::idx will eventually go away.
-
   octave_idx_type nr = dim1 ();
   octave_idx_type nc = dim2 ();
   octave_idx_type nz = nnz ();
 
   octave_idx_type n = numel (); // Can throw.
 
   octave_idx_type rhl = rhs.numel ();
 
@@ -1848,19 +1838,16 @@ template <class T>
 void
 Sparse<T>::assign (const idx_vector& idx_i,
                    const idx_vector& idx_j, const Sparse<T>& rhs)
 {
   Sparse<T> retval;
 
   assert (ndims () == 2);
 
-  // FIXME: please don't fix the shadowed member warning yet because
-  // Sparse<T>::idx will eventually go away.
-
   octave_idx_type nr = dim1 ();
   octave_idx_type nc = dim2 ();
   octave_idx_type nz = nnz ();
 
   octave_idx_type n = rhs.rows ();
   octave_idx_type m = rhs.columns ();
 
   if (idx_i.length (nr) == n && idx_j.length (nc) == m)
@@ -2454,18 +2441,18 @@ Sparse<T>::array_value () const
 %! endfunction
 
 #### 1d indexing
 
 ## size = [2 0]
 %!test test_sparse_slice([2 0], 11, []);
 %!assert(set_slice(sparse(ones([2 0])), 11, 1), sparse([2 0]'));  # sparse different from full
 %!assert(set_slice(sparse(ones([2 0])), 11, 2), sparse([0 2]'));  # sparse different from full
-%!assert(set_slice(sparse(ones([2 0])), 11, 3), sparse([0 0 2]'));  # sparse different from full
-%!assert(set_slice(sparse(ones([2 0])), 11, 4), sparse([0 0 0 2]'));  # sparse different from full
+%!assert(set_slice(sparse(ones([2 0])), 11, 3), sparse([0 0; 2 0]'));  # sparse different from full
+%!assert(set_slice(sparse(ones([2 0])), 11, 4), sparse([0 0; 0 2]'));  # sparse different from full
 
 ## size = [0 2]
 %!test test_sparse_slice([0 2], 11, []);
 %!assert(set_slice(sparse(ones([0 2])), 11, 1), sparse(1,2));  # sparse different from full
 %!test test_sparse_slice([0 2], 11, 2);
 %!test test_sparse_slice([0 2], 11, 3);
 %!test test_sparse_slice([0 2], 11, 4);
 %!test test_sparse_slice([0 2], 11, [4, 4]);
