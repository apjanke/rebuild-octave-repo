# HG changeset patch
# User jwe
# Date 1067375279 0
#      Tue Oct 28 21:07:59 2003 +0000
# Node ID e84592dc70b9d836d6e97d564787df7a81c6b8e2
# Parent  661246155bbc838062f1ecbbdf31c4edd0a48990
[project @ 2003-10-28 21:07:59 by jwe]

diff --git a/libcruft/ChangeLog b/libcruft/ChangeLog
--- a/libcruft/ChangeLog
+++ b/libcruft/ChangeLog
@@ -1,8 +1,13 @@
+2003-10-28  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* misc/quit.h (octave_interrupt_hook, octave_bad_alloc_hook):
+	Move declarations outside of extern "C" block.
+
 2003-10-27  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* misc/f77-fcn.h: Only use inline if this is C++.
 
 	* misc/f77-fcn.c (xstopx): Return type is now F77_RET_T.
 	Use F77_RETURN.
 	* misc/machar.c (machar): Likewise.
 
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,10 +1,24 @@
 2003-10-28  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
+	* load-save.cc (save_mat5_binary_element): Use numel instead of
+	array_length.
+	* ov-struct.cc (octave_struct::print_raw): Likewise.
+	* pt-loop.cc (tree_complex_for_command::eval): Likewise.
+	* oct-map.cc (Octave_map::numel): New function.
+	* oct-map.h: Provide decl.
+
+	* oct-map.cc, oct-map.h (Octave_map::array_length): Delete.
+	(common_size): New static function.
+	(Octave_map::assign): Make resizing work for N-d cell objects.
+
+	* oct-map.cc (Octave_map::dims): New function.
+	* oct-map.h: Provide decl.
+
 	* pr-output.cc 	(print_empty_nd_array): New static function.
 	(PRINT_ND_ARRAY): Use it.
 
 	* ov.h (octave_value::is_empty): No longer virtual.  Return value
 	based on numel.
 	* data.cc (Fisempty): Use it.
 	(Fnumel): New function.
 
diff --git a/src/load-save.cc b/src/load-save.cc
--- a/src/load-save.cc
+++ b/src/load-save.cc
@@ -4417,17 +4417,17 @@ save_mat5_binary_element (std::ostream& 
 	  {
 	    // write the name of each element
 	    std::string tstr = m.key (i);
 	    memset (buf, 0, 32);
 	    strncpy (buf, tstr.c_str (), 31); // only 31 char names permitted
 	    os.write (buf, 32);
 	  }
 
-	int len = m.array_length ();
+	int len = m.numel ();
 
 	for (Octave_map::iterator i = m.begin (); i != m.end (); i++)
 	  {
 	    // write the data of each element
 	    Cell elts = m.contents (i);
 
 	    for (int j = 0; j < len; j++)
 	      {
diff --git a/src/oct-map.cc b/src/oct-map.cc
--- a/src/oct-map.cc
+++ b/src/oct-map.cc
@@ -52,25 +52,29 @@ Octave_map::keys (void) const
   int i = 0;
   for (const_iterator p = begin (); p != end (); p++)
     names[i++] = key (p);
 
   return names;
 }
 
 int
-Octave_map::array_length (void) const
+Octave_map::numel (void) const
 {
-  if (array_len == 0 && length () != 0)
+  int retval;
+
+  if (empty ())
+    retval = 0;
+  else
     {
-      const_iterator p = begin ();
-      array_len = contents(p).length ();
+      Cell tmp = contents (begin ());
+      retval = tmp.numel ();
     }
 
-  return array_len;
+  return retval;
 }
 
 static string_vector
 equiv_keys (const Octave_map& a, const Octave_map& b)
 {
   string_vector retval;
 
   string_vector a_keys = a.keys().qsort ();
@@ -115,60 +119,94 @@ Octave_map::assign (const octave_value_l
 	}
     }
   else
     error ("field name mismatch in structure assignment");
 
   return *this;
 }
 
+static dim_vector
+common_size (const dim_vector& a, const dim_vector& b)
+{
+  dim_vector retval;
+
+  int a_len = a.length ();
+  int b_len = b.length ();
+
+  int new_len = std::max (a_len, b_len);
+  int min_len = std::min (a_len, b_len);
+
+  retval.resize (new_len);
+
+  for (int i = 0; i < min_len; i++)
+    retval(i) = std::max (a(i), b(i));
+
+  if (a_len < b_len)
+    {
+      for (int i = min_len; i < b_len; i++)
+	retval(i) = b(i);
+    }
+  else if (a_len > b_len)
+    {
+      for (int i = min_len; i < a_len; i++)
+	retval(i) = a(i);
+    }
+
+  std::cerr << a.str () << std::endl;
+  std::cerr << b.str () << std::endl;
+  std::cerr << retval.str () << std::endl;
+
+  return retval;
+}
+
 Octave_map&
 Octave_map::assign (const octave_value_list& idx, const std::string& key,
 		    const Cell& rhs)
 {
   Cell tmp = map[key];
 
   octave_value fill_value = Matrix ();
 
   tmp.assign (idx, rhs, fill_value);
 
   if (! error_state)
     {
-      int rhs_len = tmp.length ();
+      dim_vector rhs_dims = tmp.dims ();
 
-      int len = array_length ();
+      dim_vector curr_dims = dims ();
+
+      dim_vector new_dims = common_size (rhs_dims, curr_dims);
 
-      if (rhs_len < len)
+      if (new_dims != rhs_dims)
 	{
-	  tmp.resize_and_fill (len, fill_value);
+	  tmp.resize_and_fill (new_dims, fill_value);
 	}
-      else if (rhs_len > len)
+      else if (new_dims != curr_dims)
 	{
 	  for (iterator p = begin (); p != end (); p++)
-	    contents(p).resize_and_fill (rhs_len, fill_value);
+	    contents(p).resize_and_fill (rhs_dims, fill_value);
+	}
 
-	  array_len = rhs_len;
-	}
+      dimensions = new_dims;
 
       map[key] = tmp;
     }
 
   return *this;
 }
 
 Octave_map&
 Octave_map::assign (const std::string& key, const Cell& rhs)
 {
   if (empty ())
     map[key] = rhs;
   else
     {
-      Cell tmp = contents (begin ());
-
-      if (tmp.length () == rhs.length ())
+      if (dimensions () == rhs.dims ())
 	map[key] = rhs;
       else
 	error ("invalid structure assignment");
     }
 
   return *this;
 }
 
diff --git a/src/oct-map.h b/src/oct-map.h
--- a/src/oct-map.h
+++ b/src/oct-map.h
@@ -37,46 +37,40 @@ class string_vector;
 class
 Octave_map
 {
  public:
 
   typedef std::map<std::string, Cell>::iterator iterator;
   typedef std::map<std::string, Cell>::const_iterator const_iterator;
 
-  Octave_map (void) : map (), array_len (0) { }
+  Octave_map (void) : map (), dimensions (0, 0) { }
 
   Octave_map (const std::string& key, const octave_value& value)
-    : map (), array_len (1)
-      {
-	map[key] = Cell (value);
-      }
+    : map (), dimensions (1, 1)
+    { map[key] = Cell (value); }
 
   Octave_map (const std::string& key, const Cell& vals)
-    : map (), array_len (vals.length ())
-      {
-	map[key] = vals;
-      }
+    : map (), dimensions (vals.dims ())
+    { map[key] = vals; }
 
   Octave_map (const std::string& key, const octave_value_list& val_list)
-    : map (), array_len (val_list.length ())
-      {
-	map[key] = val_list;
-      }
+    : map (), dimensions (1, val_list.length ())
+  { map[key] = val_list; }
 
-  Octave_map (const Octave_map& m)
-    : map (m.map), array_len (m.array_len) { }
+  Octave_map (const Octave_map& m) : map (m.map), dimensions (m.dimensions) { }
 
   Octave_map& operator = (const Octave_map& m)
     {
       if (this != &m)
 	{
 	  map = m.map;
-	  array_len = m.array_len;
+	  dimensions = m.dimensions;
 	}
+
       return *this;
     }
 
   ~Octave_map (void) { }
 
   // This is the number of keys.
   int length (void) const { return map.size (); }
 
@@ -111,38 +105,40 @@ Octave_map
 
   int contains (const std::string& key) const
     { return (seek (key) != map.end ()); }
 
   void clear (void) { map.clear (); }
 
   string_vector keys (void) const;
 
-  int rows (void) const { return 1; }
+  int rows (void) const { return dimensions(0); }
+
+  int columns (void) const { return dimensions(1); }
 
-  int columns (void) const { return array_length (); }
+  dim_vector dims (void) const { return dimensions; }
 
-  int array_length (void) const;
+  int numel (void) const;
 
   Octave_map& assign (const octave_value_list& idx, const Octave_map& rhs);
 
   Octave_map& assign (const octave_value_list& idx, const std::string& key,
 		      const Cell& rhs);
 
   Octave_map& assign (const std::string& key, const Cell& rhs);
 
   Octave_map index (const octave_value_list& idx);
 
 private:
 
   // The map of names to values.
   std::map<std::string, Cell> map;
 
-  // The current size of this struct array;
-  mutable int array_len;
+  // The current size.
+  mutable dim_vector dimensions;
 };
 
 #endif
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
diff --git a/src/ov-struct.cc b/src/ov-struct.cc
--- a/src/ov-struct.cc
+++ b/src/ov-struct.cc
@@ -369,17 +369,17 @@ octave_struct::print_raw (std::ostream& 
       Vstruct_levels_to_print--;
 
       indent (os);
       os << "{";
       newline (os);
 
       increment_indent_level ();
 
-      int n = map.array_length ();
+      int n = map.numel ();
 
       for (Octave_map::const_iterator p = map.begin (); p != map.end (); p++)
 	{
 	  std::string key = map.key (p);
 	  Cell val = map.contents (p);
 
 	  octave_value tmp = (n == 1) ? val(0) : octave_value (val, true);
 
diff --git a/src/pt-loop.cc b/src/pt-loop.cc
--- a/src/pt-loop.cc
+++ b/src/pt-loop.cc
@@ -487,17 +487,17 @@ tree_complex_for_command::eval (void)
       Octave_map tmp_val (rhs.map_value ());
 
       for (Octave_map::iterator q = tmp_val.begin (); q != tmp_val.end (); q++)
 	{
 	  octave_value key = tmp_val.key (q);
 
 	  Cell val_lst = tmp_val.contents (q);
 
-	  int n = tmp_val.array_length ();
+	  int n = tmp_val.numel ();
 
 	  octave_value val = (n == 1) ? val_lst(0) : octave_value (val_lst);
 
 	  MAYBE_DO_BREAKPOINT;
 
 	  bool quit = false;
 
 	  do_for_loop_once (key_ref, val_ref, key, val, quit);
