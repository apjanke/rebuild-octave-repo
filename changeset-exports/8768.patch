# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1234821677 18000
#      Mon Feb 16 17:01:17 2009 -0500
# Node ID e0fbf17a17bb7af7f371dcc9e42f36af9a8771e6
# Parent  026c6732ec7ac8265fc2847e20c8eb0970461d31
__makeinfo__.m: rename from makeinfo.m

diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,8 +1,17 @@
+2009-02-16  John W. Eaton  <jwe@octave.org>
+
+	* help/__makeinfo__.m: Rename from help/makeinfo.m.  Delete tmp file.
+	* help/Makefile.in (SOURCES): Add __makeinfo__.m, delete makeinfo.m.
+	* help/get_first_help_sentence.m, help/help.m, help/lookfor.m,
+	help/print_usage.m: Call __makeinfo__ instead of makeinfo.
+	* help/__strip_html_tags__.m, help/__additional_help_message__.m:
+	Doc fix.
+
 2009-02-16  Ben Abbott <bpabbott@mac.com>
 
 	* plot/shading.m: No new figure windows for the demos.
 	* plot/surfl.m: Clear figure before running demos.
 
 2009-02-16  Jaroslav Hajek  <highegg@gmail.com>
 
 	* linear-algebra/expm.m: Fix invalid unscaling.
diff --git a/scripts/help/Makefile.in b/scripts/help/Makefile.in
--- a/scripts/help/Makefile.in
+++ b/scripts/help/Makefile.in
@@ -29,23 +29,23 @@ VPATH = @srcdir@
 include $(TOPDIR)/Makeconf
 
 INSTALL = @INSTALL@
 INSTALL_PROGRAM = @INSTALL_PROGRAM@
 INSTALL_DATA = @INSTALL_DATA@
 
 SOURCES = \
   __additional_help_message__.m \
+  __makeinfo__.m \
   __strip_html_tags__.m \
   doc.m \
   gen_doc_cache.m \
   get_first_help_sentence.m \
   help.m \
   lookfor.m \
-  makeinfo.m \
   print_usage.m \
   type.m \
   which.m
 
 DISTFILES = $(addprefix $(srcdir)/, Makefile.in $(SOURCES))
 
 FCN_FILES = $(addprefix $(srcdir)/, $(SOURCES))
 FCN_FILES_NO_DIR = $(notdir $(FCN_FILES))
diff --git a/scripts/help/__additional_help_message__.m b/scripts/help/__additional_help_message__.m
--- a/scripts/help/__additional_help_message__.m
+++ b/scripts/help/__additional_help_message__.m
@@ -10,21 +10,18 @@
 ## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with this program; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
-## @deftypefn {Function File} __additional_help_message__ ()
-## Return additional help message.
-##
-## This is an internal function and should not be used directly.
-## @seealso{suppress_verbose_help_message}
+## @deftypefn {Function File} {} __additional_help_message__ ()
+## Undocumented internal function.
 ## @end deftypefn
 
 function msg = __additional_help_message__ ()
 
   if (suppress_verbose_help_message ())
     msg = "";
   else
     msg = "\
diff --git a/scripts/help/makeinfo.m b/scripts/help/__makeinfo__.m
rename from scripts/help/makeinfo.m
rename to scripts/help/__makeinfo__.m
--- a/scripts/help/makeinfo.m
+++ b/scripts/help/__makeinfo__.m
@@ -10,25 +10,26 @@
 ## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with this program; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
-## @deftypefn {Function File} {[@var{retval}, @var{status}] =} makeinfo (@var{text}, @
-## @var{output_type})
-## @deftypefnx{Function File} {[@var{retval}, @var{status}] =} makeinfo (@var{text}, @
-## @var{output_type}, @var{see_also})
+## @deftypefn {Function File} {[@var{retval}, @var{status}] =} __makeinfo__ (@var{text}, @var{output_type})
+## @deftypefnx{Function File} {[@var{retval}, @var{status}] =} __makeinfo__ (@var{text}, @var{output_type}, @var{see_also})
+## Undocumented internal function.
+## @end deftypefn
+
 ## Run @code{makeinfo} on a given text.
 ##
-## The string @var{text} is run through the @code{makeinfo} program to generate
-## output in various formats. This string must contain valid Texinfo formatted
-## text.
+## The string @var{text} is run through the @code{__makeinfo__} program
+## to generate output in various formats. This string must contain valid
+## Texinfo formatted text.
 ##
 ## The @var{output_type} selects the format of the output. This can be either
 ## @t{"html"}, @t{"texinfo"}, or @t{"plain text"}. By default this is
 ## @t{"plain text"}. If @var{output_type} is @t{"texinfo"}, the @t{@@seealso}
 ## macro is expanded, but otherwise the text is unaltered.
 ##
 ## If the optional argument @var{see_also} is present, it is used to expand the
 ## Octave specific @t{@@seealso} macro. This argument must be a function handle,
@@ -48,43 +49,43 @@
 ## See also: @@ref@{arg1@}, @@ref@{arg2@}, ...
 ## @end example
 ##
 ## @noindent
 ## otherwise.
 ##
 ## The optional output argument @var{status} contains the exit status of the
 ## @code{makeinfo} program as returned by @code{system}.
-## @end deftypefn
 
-function [retval, status] = makeinfo (text, output_type = "plain text", see_also = [])
+function [retval, status] = __makeinfo__ (text, output_type = "plain text", see_also = [])
+
   ## Check input
   if (nargin == 0)
     print_usage ();
   endif
   
   if (!ischar (text))
-    error ("makeinfo: first input argument must be a string");
+    error ("__makeinfo__: first input argument must be a string");
   endif
   
   if (!ischar (output_type))
-    error ("makeinfo: second input argument must be a string");
+    error ("__makeinfo__: second input argument must be a string");
   endif
   
   ## Define the @seealso macro
   if (isempty (see_also))
     if (strcmpi (output_type, "plain text"))
       see_also = @simple_see_also;
     else
       see_also = @simple_see_also_with_refs;
     endif
   endif
   
   if (!isa (see_also, "function_handle"))
-    error ("makeinfo: third input argument must be the empty matrix, or a function handle");
+    error ("__makeinfo__: third input argument must be the empty matrix, or a function handle");
   endif
   
   ## It seems like makeinfo sometimes gets angry if the character on a line is
   ## a space, so we remove these.
   text = strrep (text, "\n ", "\n");
   
   ## Handle @seealso macro
   SEE_ALSO = "@seealso";
@@ -131,26 +132,26 @@ function [retval, status] = makeinfo (te
     switch (lower (output_type))
       case "plain text"
          cmd = sprintf ("%s --no-headers --no-warn --force --no-validate %s",
                         makeinfo_program (), name);
       case "html"
          cmd = sprintf ("%s --no-headers --html --no-warn --no-validate --force %s",
                         makeinfo_program (), name);
       otherwise
-        error ("makeinfo: unsupported output type: '%s'", output_type);
+        error ("__makeinfo__: unsupported output type: '%s'", output_type);
     endswitch
   
     ## Call makeinfo
     [status, retval] = system (cmd);
    
   unwind_protect_cleanup
-#    if (exist (name, "file"))
-#      delete (name);
-#    endif
+    if (exist (name, "file"))
+      delete (name);
+    endif
   end_unwind_protect
 endfunction
 
 function expanded = simple_see_also (args)
   expanded = strcat ("\nSee also:", sprintf (" %s,", args {:}));
   expanded = strcat (expanded (1:end-1), "\n\n");
 endfunction
 
diff --git a/scripts/help/__strip_html_tags__.m b/scripts/help/__strip_html_tags__.m
--- a/scripts/help/__strip_html_tags__.m
+++ b/scripts/help/__strip_html_tags__.m
@@ -11,22 +11,22 @@
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with this program; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {[@var{text}, @var{status}] =} __strip_html_tags__ (@var{html_text})
-## This function removes html tags from a text. This is used as a simple
-## html-to-text function.
-##
-## This is an internal function and should not be used directly.
+## Undocumented internal function.
 ## @end deftypefn
 
+## Remove HTML tags from text.  This is used as a simple HTML-to-text
+## function. 
+
 function [text, status] = __strip_html_tags__ (html_text)
   start = find (html_text == "<");
   stop  = find (html_text == ">");
   if (length (start) == length (stop))
     text = html_text;
     for n = length(start):-1:1
       text (start (n):stop (n)) = [];
     endfor
diff --git a/scripts/help/get_first_help_sentence.m b/scripts/help/get_first_help_sentence.m
--- a/scripts/help/get_first_help_sentence.m
+++ b/scripts/help/get_first_help_sentence.m
@@ -128,17 +128,17 @@ function [retval, status] = first_senten
     else
       keep (end_idx:endl) = false;
     endif
     
     help_text = help_text (keep);
   endif
   
   ## Run makeinfo to generate plain text
-  [help_text, status] = makeinfo (help_text, "plain text");
+  [help_text, status] = __makeinfo__ (help_text, "plain text");
   
   ## Extract first line with plain text method.
   retval = first_sentence_plain_text (help_text, max_len);
 endfunction
 
 ## This function extracts the first sentence from a html help text.
 ## The function simply removes the tags and treats the text as plain text.
 function [retval, status] = first_sentence_html (help_text, max_len)
diff --git a/scripts/help/help.m b/scripts/help/help.m
--- a/scripts/help/help.m
+++ b/scripts/help/help.m
@@ -54,33 +54,33 @@ function help (name)
     ## Get help text
     [text, format] = get_help_text (name);
     
     ## Take action depending on help text format
     switch (lower (format))
       case "plain text"
         status = 0;
       case "texinfo"
-        [text, status] = makeinfo (text, "plain text");
+        [text, status] = __makeinfo__ (text, "plain text");
       case "html"
         [text, status] = strip_html_tags (text);
       case "not documented"
         error ("help: `%s' is not documented\n", name);
       case "not found"
         [text, status] = do_contents (name);
         if (status != 0)
           error ("help: `%s' not found\n", name);
         endif
       otherwise
         error ("help: internal error: unsupported help text format: '%s'\n", format);
     endswitch
     
     ## Print text
     if (status != 0)
-      warning ("makeinfo: Texinfo formatting filter exited abnormally; raw Texinfo source of help text follows...\n");
+      warning ("help: Texinfo formatting filter exited abnormally; raw Texinfo source of help text follows...\n");
     endif
 
     which (name);
     printf ("\n%s\n%s", text, __additional_help_message__ ());
 
   else
     error ("help: invalid input\n");
   endif
@@ -99,17 +99,17 @@ function [text, status] = do_contents (n
       path (d);
       [text, format] = get_help_text ("Contents");
 
       ## Take action depending on help text format
       switch (lower (format))
         case "plain text"
           status = 0;
         case "texinfo"
-          [text, status] = makeinfo (text, "plain text");
+          [text, status] = __makeinfo__ (text, "plain text");
         case "html"
           [text, status] = strip_html_tags (text);
       endswitch
     unwind_protect_cleanup
       ## Restore path
       path (p);
     end_unwind_protect
   endif
diff --git a/scripts/help/lookfor.m b/scripts/help/lookfor.m
--- a/scripts/help/lookfor.m
+++ b/scripts/help/lookfor.m
@@ -100,17 +100,17 @@ function [out_fun, out_help_text] = look
           if (search_type == 2) # search entire help text
             [text, format] = get_help_text (fn);
     
             ## Take action depending on help text format
             switch (lower (format))
               case "plain text"
                 status = 0;
               case "texinfo"
-                [text, status] = makeinfo (text, "plain text");
+                [text, status] = __makeinfo__ (text, "plain text");
               case "html"
                 [text, status] = strip_html_tags (text);
               otherwise
                 status = 1;
             endswitch
 
           elseif (status == 0) # only search the first sentence of the help text
             text = first_sentence;
diff --git a/scripts/help/print_usage.m b/scripts/help/print_usage.m
--- a/scripts/help/print_usage.m
+++ b/scripts/help/print_usage.m
@@ -52,18 +52,18 @@ function print_usage (name)
     case "not found"
       error ("print_usage: `%s' not found\n", name);
     otherwise
       error ("print_usage: internal error: unsupported help text format: '%s'\n", format);
   endswitch
   
   ## Raise the final error
   if (status != 0)
-    warning ("makeinfo: Texinfo formatting filter exited abnormally");
-    warning ("makeinfo: raw Texinfo source of help text follows...\n");
+    warning ("print_usage: Texinfo formatting filter exited abnormally");
+    warning ("print_usage: raw Texinfo source of help text follows...\n");
   endif
 
   error ("Invalid call to %s.  Correct usage is:\n\n%s\n%s",
 	 name, usage_string, __additional_help_message__ ());
 endfunction
 
 function [retval, status] = get_usage_plain_text (help_text, max_len)
   ## Extract first line by searching for a double line-end.
@@ -96,17 +96,17 @@ function [retval, status] = get_usage_te
     if (!isempty (end_def_idx))
       buffer = strcat (buffer, help_text (end_def_idx:end));
     endif
   else
     [retval, status] = get_usage_plain_text (help_text, max_len);
   endif
 
   ## Run makeinfo to generate plain text
-  [retval, status] = makeinfo (buffer, "plain text");
+  [retval, status] = __makeinfo__ (buffer, "plain text");
 endfunction
 
 function [retval, status] = get_usage_html (help_text, max_len)
   ## Strip tags
   [help_text, status] = strip_html_tags (help_text);
   
   ## Extract first line with plain text method.
   retval = get_usage_plain_text (help_text, max_len);
