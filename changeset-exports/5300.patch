# HG changeset patch
# User jwe
# Date 1114187266 0
#      Fri Apr 22 16:27:46 2005 +0000
# Node ID 643a4d5b2b881b65180e5d0faf3a24c140c5390b
# Parent  db290db95b335f183c6963073a91a78adcaa3620
[project @ 2005-04-22 16:27:46 by jwe]

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,16 @@
+2005-04-22  John W. Eaton  <jwe@octave.org>
+
+	* DLD-FUNCTIONS/dispatch.cc (Fdispatch): Dispatch help on "string"
+	and "sq_string" types.
+	(dispatch_record): Add extra space to force new paragraph after
+	each dispatched function name if we are formatting with Texinfo.
+	Force noindent of preceding "Overloaded function:" tag.
+
 2005-04-21  John W Eaton  <jwe@octave.org>
 
 	* ls-mat5.cc (read_mat5_binary_element): Only read sparse matrix
 	values if sizeof (int) == sizeof (octave_idx_type).
 
 	* DLD-FUNCTIONS/colamd.cc: These functions only work if
 	sizeof (int) == sizeof (octave_idx_type).
 
diff --git a/src/DLD-FUNCTIONS/dispatch.cc b/src/DLD-FUNCTIONS/dispatch.cc
--- a/src/DLD-FUNCTIONS/dispatch.cc
+++ b/src/DLD-FUNCTIONS/dispatch.cc
@@ -430,17 +430,17 @@ dispatch_record (const std::string &f, c
   
       // Create a symbol record for the dispatch object.
       sr = fbi_sym_tab->lookup (f, true);
       sr->unprotect ();
       sr->define (octave_value (dispatch), symbol_record::BUILTIN_FUNCTION); 
       // std::cout << "iscommand('"<<f<<"')=" << iscommand << std::endl;
       if (iscommand)
 	sr->mark_as_command();
-      sr->document (basedoc + "\n\nOverloaded function\n");
+      sr->document (basedoc + "\n\n@noindent\nOverloaded function:\n");
       sr->make_eternal (); // XXX FIXME XXX why??
       sr->mark_as_static ();
       sr->protect ();
     }
 
   // clear/replace/extend the map with the new type-function pair
   const octave_dispatch& rep
     = reinterpret_cast<const octave_dispatch&> (sr->def().get_rep ());
@@ -461,17 +461,17 @@ dispatch_record (const std::string &f, c
   else
     {
       // XXX FIXME XXX -- seems bad to cast away const here...
       octave_dispatch& xrep = const_cast<octave_dispatch&> (rep);
 
       xrep.add (t, n);
 
       if (! sr->help().empty ())
-	sr->document (sr->help() + "\n   " + n + "(" + t + ",...)");
+	sr->document (sr->help() + "\n" + n + " (" + t + ", ...)\n");
     }
 }
 
 DEFUN_DLD (dispatch, args, ,
   "-*- texinfo -*-\n\
 @deftypefn {Loadable Function} {} dispatch (@var{f}, @var{r}, @var{type})\n\
 \n\
 Replace the function @var{f} with a dispatch so that function @var{r}\n\
@@ -515,16 +515,17 @@ for @var{f}\n\
 
   // register dispatch function type if you have not already done so
   if (register_type)
     {
       octave_dispatch::register_type ();
       register_type = false;
       fbi_sym_tab->lookup("dispatch")->mark_as_static ();
       dispatch_record ("help", "dispatch_help", "string");
+      dispatch_record ("help", "dispatch_help", "sq_string");
     }
 
   dispatch_record (f, n, t);
 
   return retval;
 }
 
 /*
