# HG changeset patch
# User Rik <rik@octave.org>
# Date 1500489685 25200
#      Wed Jul 19 11:41:25 2017 -0700
# Branch stable
# Node ID fdce2b73f5cefc4fa1aafd0b3784b09d616b5e1e
# Parent  efba56b2406f050b0cd8b8040b27e76e7d904ee8
regexp.cc: Correctly size temporary buffer to avoid segfault when re-arranging outputs.

* regexp.cc (octregexp): Change OCTAVE_LOCAL_BUFFER to
OCTAVE_LOCAL_BUFFER_INIT.  Change size of temporary buffer to 7 (number of
return args for function) rather than 6.  Initialize temporary to false.
Change for loop bound to 7 to operate over all possible outputs.

diff --git a/libinterp/corefcn/regexp.cc b/libinterp/corefcn/regexp.cc
--- a/libinterp/corefcn/regexp.cc
+++ b/libinterp/corefcn/regexp.cc
@@ -463,19 +463,17 @@ octregexp (const octave_value_list &args
   // Alter the order of the output arguments
 
   if (extra_options)
     {
       int n = 0;
       octave_value_list new_retval;
       new_retval.resize (nargout);
 
-      OCTAVE_LOCAL_BUFFER (int, arg_used, 6);
-      for (int j = 0; j < 6; j++)
-        arg_used[j] = false;
+      OCTAVE_LOCAL_BUFFER_INIT (int, arg_used, 7, false);
 
       for (int j = 2; j < nargin; j++)
         {
           int k = 0;
           std::string str = args(j).string_value ();
           std::transform (str.begin (), str.end (), str.begin (), tolower);
 
           if (str.find ("once", 0) == 0
@@ -510,17 +508,17 @@ octregexp (const octave_value_list &args
 
           if (n == nargout)
             break;
         }
 
       // Fill in the rest of the arguments
       if (n < nargout)
         {
-          for (int j = 0; j < 6; j++)
+          for (int j = 0; j < 7; j++)
             {
               if (! arg_used[j])
                 new_retval(n++) = retval(j);
             }
         }
 
       retval = new_retval;
     }
