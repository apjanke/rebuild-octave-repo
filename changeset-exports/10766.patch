# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1278072657 -7200
#      Fri Jul 02 14:10:57 2010 +0200
# Node ID f0304c545588862fa021ed5d3b411d604b12c90d
# Parent  3952b4c4e44a911594e9f025275662932dcdef4e
make map constructors from octave_fields public

diff --git a/src/oct-map.cc b/src/oct-map.cc
--- a/src/oct-map.cc
+++ b/src/oct-map.cc
@@ -37,16 +37,24 @@ octave_fields::fields_rep octave_fields:
 octave_fields::octave_fields (const string_vector& fields)
   : rep (new fields_rep)
 {
   octave_idx_type n = fields.numel ();
   for (octave_idx_type i = 0; i < n; i++)
     (*rep)[fields(i)] = i;
 }
 
+octave_fields::octave_fields (const char * const *fields)
+  : rep (new fields_rep)
+{
+  octave_idx_type n = 0;
+  while (*fields)
+    (*rep)[std::string (*fields++)] = n++;
+}
+
 bool
 octave_fields::isfield (const std::string& field) const
 {
   return rep->find (field) != rep->end ();
 }
 
 octave_idx_type
 octave_fields::getfield (const std::string& field) const
@@ -107,18 +115,16 @@ octave_fields::orderfields (Array<octave
 }
 
 bool 
 octave_fields::equal_up_to_order (const octave_fields& other,
                                   octave_idx_type* perm) const
 {
   bool retval = true;
 
-  octave_idx_type n = nfields ();
-
   iterator p = begin (), q = other.begin ();
   for (; p != end () && q != other.end (); p++, q++)
     {
       if (p->first == q->first)
         perm[p->second] = q->second;
       else
         {
           retval = false;
@@ -130,18 +136,16 @@ octave_fields::equal_up_to_order (const 
 
   return retval;
 }
 
 bool 
 octave_fields::equal_up_to_order (const octave_fields& other,
                                   Array<octave_idx_type>& perm) const
 {
-  bool retval = true;
-
   octave_idx_type n = nfields ();
   if (perm.length () != n)
     perm.clear (1, n);
 
   return equal_up_to_order (other, perm.fortran_vec ());
 }
 
 string_vector
diff --git a/src/oct-map.h b/src/oct-map.h
--- a/src/oct-map.h
+++ b/src/oct-map.h
@@ -53,16 +53,17 @@ octave_fields
   fields_rep *rep;
 
   static fields_rep nil_rep; 
 
 public:
 
   octave_fields (void) : rep (&nil_rep) { rep->count++; }
   octave_fields (const string_vector&);
+  octave_fields (const char * const *);
 
   ~octave_fields (void)
     {
       if (--rep->count == 0)
         delete rep;
     }
 
   void make_unique (void)
@@ -140,21 +141,21 @@ public:
       *this = octave_fields ();
     }
 };
 
 
 class OCTINTERP_API
 octave_scalar_map
 {
+public:
+
   octave_scalar_map (const octave_fields& k)
     : xkeys (k), xvals (k.nfields ()) { }
 
-public:
-
   octave_scalar_map (void) : xkeys (), xvals () { }
 
   octave_scalar_map (const string_vector& k)
     : xkeys (k), xvals (k.length ()) { }
 
   octave_scalar_map (const octave_scalar_map& m)
     : xkeys (m.xkeys), xvals(m.xvals) { }
 
@@ -248,24 +249,24 @@ private:
 
 template<>
 inline octave_scalar_map octave_value_extract<octave_scalar_map> (const octave_value& v)
   { return v.scalar_map_value (); }
 
 class OCTINTERP_API
 octave_map
 {
+public:
+
   octave_map (const octave_fields& k)
     : xkeys (k), xvals (k.nfields ()), dimensions () { }
 
   octave_map (const dim_vector& dv, const octave_fields& k)
     : xkeys (k), xvals (k.nfields (), Cell (dv)), dimensions (dv) { }
 
-public:
-
   typedef octave_scalar_map element_type;
 
   octave_map (void) : xkeys (), xvals (), dimensions () { }
 
   octave_map (const dim_vector& dv) : xkeys (), xvals (), dimensions (dv) { }
 
   octave_map (const string_vector& k)
     : xkeys (k), xvals (k.length ()), dimensions (1, 1) { }
