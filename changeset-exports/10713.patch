# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1276757079 -7200
#      Thu Jun 17 08:44:39 2010 +0200
# Node ID 0e05ed9f2a62a8576c2620ad23e5a6750433c49e
# Parent  6a5a0c9df5d7786fd14904d94150e484f45c4b3a
improve some MatrixType code

diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,15 @@
+2010-06-17  Jaroslav Hajek  <highegg@gmail.com>
+
+	* MatrixType.cc (matrix_real_probe): Use OCTAVE_LOCAL_BUFFER for
+	temporary array.
+	(matrix_complex_probe): Parametrize by real type. Use
+	OCTAVE_LOCAL_BUFFER for temporary array.
+
 2010-06-16  Rik <octave@nomad.inbox5.com>
 
         * DASSL-opts.in: Periodic grammar check on documentation.
 
 2010-06-16  David Bateman  <dbateman@free.fr>
 
 	* oct-rand.cc (void octave_rand:do_reset (void),
 	void octave_rand:do_reset (const std::string&)): New functions
diff --git a/liboctave/MatrixType.cc b/liboctave/MatrixType.cc
--- a/liboctave/MatrixType.cc
+++ b/liboctave/MatrixType.cc
@@ -69,38 +69,38 @@ matrix_real_probe (const MArray<T>& a)
  
   if (ncols == nrows)
     {
       bool upper = true;
       bool lower = true;
       bool hermitian = true;
 
       // do the checks for lower/upper/hermitian all in one pass.
-      ColumnVector diag(ncols);
+      OCTAVE_LOCAL_BUFFER(T, diag, ncols);
 
       for (octave_idx_type j = 0; 
            j < ncols && upper; j++)
         {
           T d = a.elem (j,j);
           upper = upper && (d != zero);
           lower = lower && (d != zero);
           hermitian = hermitian && (d > zero);
-          diag(j) = d;
+          diag[j] = d;
         }
 
       for (octave_idx_type j = 0; 
            j < ncols && (upper || lower || hermitian); j++)
         {
           for (octave_idx_type i = 0; i < j; i++)
             {
               double aij = a.elem (i,j), aji = a.elem (j,i);
               lower = lower && (aij == zero);
               upper = upper && (aji == zero);
               hermitian = hermitian && (aij == aji 
-                                        && aij*aij < diag(i)*diag(j));
+                                        && aij*aij < diag[i]*diag[j]);
             }
         }
 
       if (upper)
         typ = MatrixType::Upper;
       else if (lower)
         typ = MatrixType::Lower;
       else if (hermitian)
@@ -111,53 +111,54 @@ matrix_real_probe (const MArray<T>& a)
   else
     typ = MatrixType::Rectangular;
 
   return typ;
 }
 
 template<class T> 
 MatrixType::matrix_type 
-matrix_complex_probe (const MArray<T>& a)
+matrix_complex_probe (const MArray<std::complex<T> >& a)
 {
   MatrixType::matrix_type typ;
   octave_idx_type nrows = a.rows ();
   octave_idx_type ncols = a.cols ();
 
-  const typename T::value_type zero = 0;
+  const T zero = 0;
+  // get the real type
 
   if (ncols == nrows)
     {
       bool upper = true;
       bool lower = true;
       bool hermitian = true;
 
       // do the checks for lower/upper/hermitian all in one pass.
-      ColumnVector diag(ncols);
+      OCTAVE_LOCAL_BUFFER(T, diag, ncols);
 
       for (octave_idx_type j = 0; 
            j < ncols && upper; j++)
         {
-          T d = a.elem (j,j);
+          std::complex<T> d = a.elem (j,j);
           upper = upper && (d != zero);
           lower = lower && (d != zero);
           hermitian = hermitian && (d.real() > zero && d.imag() == zero);
-          diag (j) = d.real();
+          diag[j] = d.real();
         }
 
       for (octave_idx_type j = 0; 
            j < ncols && (upper || lower || hermitian); j++)
         {
           for (octave_idx_type i = 0; i < j; i++)
             {
-              T aij = a.elem (i,j), aji = a.elem (j,i);
+              std::complex<T> aij = a.elem (i,j), aji = a.elem (j,i);
               lower = lower && (aij == zero);
               upper = upper && (aji == zero);
               hermitian = hermitian && (aij == std::conj (aji)
-                                        && std::norm (aij) < diag(i)*diag(j));
+                                        && std::norm (aij) < diag[i]*diag[j]);
             }
         }
 
 
       if (upper)
         typ = MatrixType::Upper;
       else if (lower)
         typ = MatrixType::Lower;
