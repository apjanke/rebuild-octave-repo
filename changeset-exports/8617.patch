# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1233147229 -3600
#      Wed Jan 28 13:53:49 2009 +0100
# Node ID 4b26e9fbbb379382fd83e39cdd03ff2ae2fb1515
# Parent  3d75d717cbe05ebb3c83a4a560465ed58f4d3916
fix lookup's docstring

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,12 @@
+2009-01-28  Jaroslav Hajek  <highegg@gmail.com>
+
+	* DLD-FUNCTIONS/lookup.cc (Flookup): Fix doc string.
+
 2009-01-27  John W. Eaton  <jwe@octave.org>
 
 	* load-path.cc (Fcommand_line_path): Rename from Fcommandlinepath.
 
 2009-01-27 Ben Abbott <bpabbott@mac.com>
 
 	* graphics.cc (convert_position): Handle character units.
 	(default_axes_tick, default_figure_papersize,
diff --git a/src/DLD-FUNCTIONS/lookup.cc b/src/DLD-FUNCTIONS/lookup.cc
--- a/src/DLD-FUNCTIONS/lookup.cc
+++ b/src/DLD-FUNCTIONS/lookup.cc
@@ -97,30 +97,34 @@ ov_stri_greater (const octave_value& a, 
 
   return std::lexicographical_compare (as.begin (), as.end (), 
                                        bs.begin (), bs.end (),
                                        icmp_char_gt());
 }
 
 DEFUN_DLD (lookup, args, ,
   "-*- texinfo -*-\n\
-@deftypefn {Function File} {@var{idx} =} lookup (@var{table}, @var{y}, @var{opt})\n\
+@deftypefn {Loadable Function} {@var{idx} =} lookup (@var{table}, @var{y}, @var{opt})\n\
 Lookup values in a sorted table.  Usually used as a prelude to\n\
 interpolation.\n\
 \n\
 If table is strictly increasing and @code{idx = lookup (table, y)}, then\n\
 @code{table(idx(i)) <= y(i) < table(idx(i+1))} for all @code{y(i)}\n\
-within the table.  If @code{y(i)} is before the table, then\n\
-@code{idx(i)} is 0. If @code{y(i)} is after the table then\n\
+within the table.  If @code{y(i) < table (1)} then\n\
+@code{idx(i)} is 0. If @code{y(i) >= table(end)} then\n\
 @code{idx(i)} is @code{table(n)}.\n\
 \n\
 If the table is strictly decreasing, then the tests are reversed.\n\
 There are no guarantees for tables which are non-monotonic or are not\n\
 strictly monotonic.\n\
 \n\
+The algorithm used by lookup is standard binary search, with optimizations\n\
+to speed up the case of partially ordered arrays (dense downsampling).\n\
+In particular, looking up a single entry is of binary complexity.\n\
+\n\
 @var{table} and @var{y} can also be a cell array of strings\n\
 (or @var{y} can be a single string). In this case, string lookup\n\
 is performed using lexicographical comparison.\n\
 If @var{opts} is specified, it shall be a string with letters indicating\n\
 additional options.\n\
 \n\
 For numeric lookup, 'l' in @var{opts} indicates that\n\
 the leftmost subinterval shall be extended to infinity (i.e. all indices\n\
