# HG changeset patch
# User Rik <rik@octave.org>
# Date 1377133585 25200
#      Wed Aug 21 18:06:25 2013 -0700
# Node ID 5a65b2cc950831026c0f800d6456c4cfb06fe0a6
# Parent  5a6caf617f56c820feca766fa9d770d88bd4a941
test: Add tests for 'end' form of 'endfor', 'endif', etc.

* test/for.tst, test/if.tst, test/jit.tst, test/switch.tst, test/try.tst,
test/unwind.tst, test/while.tst: Add tests for 'end' form of 'endfor', 'endif',
etc.

diff --git a/test/for.tst b/test/for.tst
--- a/test/for.tst
+++ b/test/for.tst
@@ -14,17 +14,17 @@
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 %!test
 %! for i = 1
 %!   __printf_assert__ ("%d", i);
-%! end
+%! end  # "end" is part of test, check not using "endfor"
 %! __printf_assert__ ("\n");
 %! assert (__prog_output_assert__ ("1"));
 
 %!test
 %! for i = 1:4
 %!   __printf_assert__ ("%d", i);
 %! endfor
 %! __printf_assert__ ("\n");
@@ -96,15 +96,15 @@
 
 %!test
 %! a = {1,3;2,4};
 %! j = 0;
 %! for i = cat (3, a, cellfun (@(x) 4 + x, a, "UniformOutput", 0))
 %!   assert (i, {1 + 2*j; 2 + 2*j++})
 %! endfor
 
-%% test parsing of single-quoted character string appearing at the
-%% beginning of a for loop
+## test parsing of single-quoted character string appearing at the
+## beginning of a for loop
 %!test
 %! for i = 1:5
 %!   'foo';
 %! endfor
 %! assert (i, 5);
diff --git a/test/if.tst b/test/if.tst
--- a/test/if.tst
+++ b/test/if.tst
@@ -16,25 +16,25 @@
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 %!test
 %! i = 0;
 %! if (i == 0)
 %!   i++;
 %!   __printf_assert__ ("%d\n", i);
-%! endif
+%! end  # "end" is part of test, check not using "endif"
 %! assert (__prog_output_assert__ ("1"));
 
 %!test
 %! if (eye (2))
 %!   __printf_assert__ ("fail\n");
 %! else
 %!   __printf_assert__ ("pass\n");
-%! end
+%! endif
 %! assert (__prog_output_assert__ ("pass"));
 
 %!test
 %! x = 2;
 %! if (eye (2))
 %!   __printf_assert__ ("fail\n");
 %! elseif (x)
 %!   __printf_assert__ ("pass\n");
@@ -45,17 +45,17 @@
 %! x = 0;
 %! y = -2;
 %! if (eye (2))
 %!   __printf_assert__ ("fail\n");
 %! elseif (x)
 %!   __printf_assert__ ("fail\n");
 %! elseif (y)
 %!   __printf_assert__ ("pass\n");
-%! end
+%! endif
 %! assert (__prog_output_assert__ ("pass"));
 
 %!test
 %! x = 0;
 %! y = -2;
 %! if (eye (2))
 %!   __printf_assert__ ("fail\n");
 %! elseif (x)
@@ -71,30 +71,31 @@
 %! x = 0;
 %! y = -2;
 %! if (y)
 %!   __printf_assert__ ("pass\n");
 %! elseif (x)
 %!   __printf_assert__ ("fail\n");
 %! elseif (x)
 %!   __printf_assert__ ("fail\n");
-%! end
+%! endif
 %! assert (__prog_output_assert__ ("pass"));
 
-%% test parsing of single-quoted character string appearing at the
-%% beginning of an if condition
+## test parsing of single-quoted character string appearing at the
+## beginning of an if condition
 %!test
 %! if (1)
 %!   'foo';
 %!   x = 13;
 %! endif
 %! assert (x, 13);
 
-%% test parsing of single-quoted character string appearing at the
-%% beginning of an if condition
+## test parsing of single-quoted character string appearing at the
+## beginning of an if condition
 %!test
 %! if (0)
 %!   x = 42;
 %! elseif (1)
 %!   'foo';
 %!   x = 13;
 %! endif
 %! assert (x, 13);
+
diff --git a/test/jit.tst b/test/jit.tst
--- a/test/jit.tst
+++ b/test/jit.tst
@@ -125,17 +125,17 @@
 %!   for i = 1:nr
 %!     if (i > 500)
 %!       result = mat(100);
 %!     else
 %!       result = i;
 %!     endif
 %!   endfor
 %! catch
-%! end
+%! end_try_catch
 %! assert (result == 500);
 
 %!function result = gen_test (n)
 %!  result = double (rand (1, n) > .01);
 %!endfunction
 
 %!function z = vectorized (A, K)
 %!  temp = ones (1, K);
diff --git a/test/switch.tst b/test/switch.tst
--- a/test/switch.tst
+++ b/test/switch.tst
@@ -16,17 +16,18 @@
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 %!test
 %! a = 1;
 %! b = 2;
 %! c = 3;
 %!
-%! switch (0) case 1 x = a; case 2 x = b; otherwise x = c; endswitch
+%! ## "end" is part of test, check not using "endswitch"
+%! switch (0) case 1 x = a; case 2 x = b; otherwise x = c; end
 %! switch (1) case 1 y = a; case 2 y = b; otherwise y = c; endswitch
 %! switch (2) case 1 z = a; case 2 z = b; otherwise z = c; endswitch
 %! switch (3) case 1 p = a; case 2 p = b; otherwise p = c; endswitch
 %!
 %! assert (x == c && y == a && z == b && p == c);
 
 %!test
 %! a = 1;
diff --git a/test/try.tst b/test/try.tst
--- a/test/try.tst
+++ b/test/try.tst
@@ -15,17 +15,17 @@
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 %!test
 %! try
 %! catch
 %!   error ("Shoudn't get here");
-%! end_try_catch
+%! end  # "end" is part of test, check not using "end_try_catch"
 
 %!test
 %! try
 %!   clear a;
 %!   a;
 %! catch
 %! end_try_catch
 %! a = 1;
diff --git a/test/unwind.tst b/test/unwind.tst
--- a/test/unwind.tst
+++ b/test/unwind.tst
@@ -23,17 +23,17 @@
 %!    g = 0;
 %!    y = g;
 %!    [1,2;x];
 %!    g = 1;
 %!    y = [y, g];
 %!  unwind_protect_cleanup
 %!    g = save_g;
 %!    y = [y, g];
-%!  end_unwind_protect
+%!  end  # "end" is part of test, check not using "end_unwind_protect"
 %!endfunction
 %!
 %!test
 %! global g = -1;
 %! y = f ([3,4]);
 %! assert (y, [0,1,-1]);
 
 %!function y = f (x)
diff --git a/test/while.tst b/test/while.tst
--- a/test/while.tst
+++ b/test/while.tst
@@ -16,17 +16,17 @@
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 %!test
 %! i = 0;
 %! while (eye (2))
 %!   i++;
 %!   __printf_assert__ ("%d\n", i);
-%! endwhile
+%! end  # "end" is part of test, check not using "endwhile"
 %! assert (__prog_output_assert__ (""));
 
 %!test
 %! i = 5;
 %! while (--i)
 %!   __printf_assert__ ("%d", i);
 %! endwhile
 %! __printf_assert__ ("\n");
