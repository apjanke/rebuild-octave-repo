# HG changeset patch
# User David Bateman <dbateman@free.fr>
# Date 1226488864 -3600
#      Wed Nov 12 12:21:04 2008 +0100
# Node ID e9687c313d5fd80378ffc456c8e3f55b9e5608ab
# Parent  eb0fb4a9859cf2b7676a3a9bb4de9d14e1b7ea58
Fix callbacks in stem and quiver for change in order of children. Fix for scaling in quiver for single arrow

diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,13 +1,19 @@
 2008-11-10  John W. Eaton  <jwe@octave.org>
 
 	* polynomial/spline.m: Delete debugging statements.  From
 	Sebastian Schöps <sebastian@schoeps.org>.
 
+2008-11-12  David Bateman  <dbateman@free.fr>
+
+	* plot/__quiver__.m: Only autoscale if more than one element to
+	plot. Modify callbacks for change in order of children.
+	* plot/__stem__.m: Modify callbacks for change in order of children.
+
 2008-09-28  Jaroslav Hajek <highegg@gmail.com>
 
 	* optimization/__fdjac__.m: New function file.
 	* optimization/__dogleg__.m: New function file.
 	* optimization/fsolve.m: New function file.
 	* optimization/Makefile.in: Include the new sources.
 	
 2008-09-28  Jaroslav Hajek <highegg@gmail.com>
diff --git a/scripts/plot/__quiver__.m b/scripts/plot/__quiver__.m
--- a/scripts/plot/__quiver__.m
+++ b/scripts/plot/__quiver__.m
@@ -97,17 +97,17 @@ function hg = __quiver__ (varargin)
     else
       args {end + 1} = arg;
       if (ioff <= nargin)
         args {end + 1} = varargin{ioff++};
       endif
     endif
   endwhile
 
-  if (autoscale)
+  if (autoscale && numel (u) > 1)
     ## Scale the arrows to fit in the grid
     dx = (max(x(:)) - min(x(:))) ./ size (x, 2);
     dy = (max(y(:)) - min(y(:))) ./ size (y, 1);
     if (is3d)
       ## What should this be divided by? The below seems right
       dz = (max(z(:)) - min(z(:))) ./ max (size (z));
       len = max (sqrt (u(:).^2 + dy(:).^2) + dz(:).^2);
     else
@@ -117,16 +117,22 @@ function hg = __quiver__ (varargin)
     if (len > 0)
       s = 2 * autoscale / sqrt (2) * sqrt (dx.^2 + dy.^2 + dz.^2) / len; 
       uu = s * u;
       vv = s * v;
       if (is3d)
 	ww = s*w;
       endif
     endif
+  else
+    uu = u;
+    vv = v;
+    if (is3d)
+      ww = w;
+    endif
   endif
 
   hstate = get (h, "nextplot");
   unwind_protect
     hg = hggroup ();
     if (is3d)
       args = __add_datasource__ ("quiver3", hg, 
 				 {"x", "y", "z", "u", "v", "w"}, args{:});
@@ -350,20 +356,20 @@ function update_data (h, d)
   y = y(:);
   xend = x + u(:);
   yend = y + v(:);
   if (is3d)
     z = z(:);
     zend = z + w(:);
   endif
 
-  set (kids (1), "xdata", [x.'; xend.'; NaN(1, length (x))](:));
-  set (kids (1), "ydata", [y.'; yend.'; NaN(1, length (y))](:));
+  set (kids (3), "xdata", [x.'; xend.'; NaN(1, length (x))](:));
+  set (kids (3), "ydata", [y.'; yend.'; NaN(1, length (y))](:));
   if (is3d)
-    set (kids (1), "zdata", [z.'; zend.'; NaN(1, length (z))](:));
+    set (kids (3), "zdata", [z.'; zend.'; NaN(1, length (z))](:));
   endif
 
   xtmp = x + u(:) .* (1 - arrowsize);
   ytmp = y + v(:) .* (1 - arrowsize);
   xarrw1 = xtmp + (y - yend) * arrowsize / 3;
   xarrw2 = xtmp - (y - yend) * arrowsize / 3;
   yarrw1 = ytmp - (x - xend) * arrowsize / 3;
   yarrw2 = ytmp + (x - xend) * arrowsize / 3;
@@ -378,35 +384,35 @@ function update_data (h, d)
   endif
 
   set (kids (2), "xdata", [xarrw1.'; xend.'; xarrw2.'; NaN(1, length (x))](:));
   set (kids (2), "ydata", [yarrw1.'; yend.'; yarrw2.'; NaN(1, length (y))](:));
   if (is3d)
     set (kids (2), "zdata", [zarrw1.'; zend.'; zarrw2.'; NaN(1, length (z))](:));
   endif
 
-  set (kids (3), "xdata", x);
-  set (kids (3), "ydata", y);
+  set (kids (1), "xdata", x);
+  set (kids (1), "ydata", y);
   if (is3d)
-    set (kids (3), "zdata", z);
+    set (kids (1), "zdata", z);
   endif
 
 endfunction
 
 function update_props (h, d)
   kids = get (h, "children");
 
-  set (kids(1), "color", get (h, "color"), 
+  set (kids(3), "color", get (h, "color"), 
        "linewidth", get (h, "linewidth"),
        "linestyle", get (h, "linestyle"));
   set (kids(2), "color", get (h, "color"), 
        "linewidth", get (h, "linewidth"),
        "linestyle", get (h, "linestyle"));
   if (strcmpi (get (h, "showarrowhead"), "on"))
     set (kids (2), "visible", "on");
   else
     set (kids (2), "visible", "off");
   endif
-  set (kids(3), "color", get (h, "color"), 
+  set (kids(1), "color", get (h, "color"), 
        "marker", get (h, "marker"),
        "markerfacecolor", get (h, "markerfacecolor"),
        "markersize", get (h, "markersize"));
 endfunction
diff --git a/scripts/plot/__stem__.m b/scripts/plot/__stem__.m
--- a/scripts/plot/__stem__.m
+++ b/scripts/plot/__stem__.m
@@ -492,25 +492,25 @@ function move_baseline (h, d)
   if (get (bl, "ydata") != [b0, b0])
     set (bl, "ydata", [b0, b0]);
   endif
 
   kids = get (h, "children");
   yt = get(h, "ydata")(:)';
   ny = length (yt);
   yt = [b0 * ones(1, ny); yt; NaN(1, ny)](:);
-  set (kids(end), "ydata", yt);
+  set (kids(2), "ydata", yt);
 endfunction
 
 function update_props (h, d)
   kids = get (h, "children");
-  set (kids(1), "color", get (h, "color"), 
+  set (kids(2), "color", get (h, "color"), 
        "linewidth", get (h, "linewidth"),
        "linestyle", get (h, "linestyle"));
-  set (kids(2), "color", get (h, "color"), 
+  set (kids(1), "color", get (h, "color"), 
        "marker", get (h, "marker"),
        "markerfacecolor", get (h, "markerfacecolor"),
        "markersize", get (h, "markersize"));
 endfunction
 
 function update_data (h, d)
   x = get (h, "xdata");
   y = get (h, "ydata");
@@ -532,12 +532,12 @@ function update_data (h, d)
       zt = [bl * ones(1, nx); z; NaN(1, nx)](:);
     else
       y = y(:)';
       yt = [bl * ones(1, nx); y; NaN(1, nx)](:);
       zt = [];
     endif
 
     kids = get (h, "children");
-    set (kids(1), "xdata", xt, "ydata", yt, "zdata", zt)
-    set (kids(2), "xdata", x, "ydata", y, "zdata", z)
+    set (kids(2), "xdata", xt, "ydata", yt, "zdata", zt)
+    set (kids(1), "xdata", x, "ydata", y, "zdata", z)
   endif
 endfunction
