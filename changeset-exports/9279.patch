# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1243489033 -7200
#      Thu May 28 07:37:13 2009 +0200
# Node ID 1673a0dc019f9889e3cf76dd58527dcec4059b5e
# Parent  2b35cb600d5038a9ec5e6229eb1f8b70cd4e8f12
fix & improve preconditioning strategy in cgs & bicgstab

diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,8 +1,13 @@
+2009-05-28  Jaroslav Hajek  <highegg@gmail.com>
+
+	* sparse/bicgstab.m: Improve preconditioning; avoid explicit inverse.
+	* sparse/cgs.m: Improve preconditioning; avoid explicit inverse.
+
 2009-05-28  Radek Salac  <salac.r@gmail.com>
 
 	* sparse/bicgstab.m: New output when calling without arguments.
 	Time optimization - remove certain checks linked to preconditioner which
 	are unacceptably slow.
 	* sparse/cgs.m: New output when calling without arguments.
 	Time optimization - remove certain checks linked to preconditioner which
 	are unacceptably slow. Rename internal variable to match bicgstab.
diff --git a/scripts/sparse/bicgstab.m b/scripts/sparse/bicgstab.m
--- a/scripts/sparse/bicgstab.m
+++ b/scripts/sparse/bicgstab.m
@@ -70,30 +70,30 @@ function [x, flag, relres, iter, resvec]
 
   ## Default maximum number of iteration.
   if (nargin < 4)
     maxit = min (rows (b), 20);
   endif
 
   ## Left preconditioner.
   if (nargin == 5)
-    precon = M1;
+    if (isnumeric (M1))
+      precon = @(x) M1 \ x;
+    endif
   elseif (nargin > 5)
-    if (isparse(M1) && issparse(M2))
-      precon = @(x) M1 * (M2 * x);
+    if (issparse (M1) && issparse (M2))
+      precon = @(x) M2 \ (M1 \ x);
     else
-      precon = M1 * M2;
-    endif 
+      M = M1*M2;
+      precon = @(x) M \ x;
+    endif
+  else
+    precon = @(x) x;
   endif
 
-  if (nargin > 4 && isnumeric(precon) )
-    precon = inv(precon);
-  endif
-
-
   ## specifies initial estimate x0
   if (nargin < 7)
     x = zeros (rows (b), 1);
   else
     x = x0;
   endif
 
   norm_b = norm (b);
@@ -112,37 +112,23 @@ function [x, flag, relres, iter, resvec]
 
     if (iter == 1)
       p = res;
     else
       beta = (rho_1 / rho_2) * (alpha / omega);
       p = res + beta * (p - omega * v);
     endif
 
-    if (nargin > 4 && isnumeric (precon))
-      phat = precon * p;
-    elseif (nargin > 4)
-      ## Our preconditioner is a function.
-      phat = feval (precon, p);
-    else
-      phat = p;
-    endif
+    phat = precon (p);
 
     v = A * phat;
     alpha = rho_1 / (rr' * v);
     s = res - alpha * v;
 
-    if (nargin > 4 && isnumeric (precon))
-      shat = precon * s;
-    elseif (nargin > 4)
-      ## Our preconditioner is a function.
-      shat = feval (precon, s);
-    else
-      shat = s;
-    endif
+    shat = precon (s);
 
     t = A * shat; 
     omega = (t' * s) / (t' * t);
     x = x + alpha * phat + omega * shat;
     res = s - omega * t;
     rho_2 = rho_1;
 
     relres = norm (res) / norm_b;
diff --git a/scripts/sparse/cgs.m b/scripts/sparse/cgs.m
--- a/scripts/sparse/cgs.m
+++ b/scripts/sparse/cgs.m
@@ -60,29 +60,29 @@ function [x, flag, relres, iter, resvec]
   endif
 
   ## Default maximum number of iteration.
   if (nargin < 4)
     maxit = min (rows (b),20);
   endif
 
   ## Left preconditioner.
-  precon = [];
   if (nargin == 5)
-    precon = M1;
+    if (isnumeric (M1))
+      precon = @(x) M1 \ x;
+    endif
   elseif (nargin > 5)
-    if (isparse(M1) && issparse(M2))
-      precon = @(x) M1 * (M2 * x);
+    if (issparse (M1) && issparse (M2))
+      precon = @(x) M2 \ (M1 \ x);
     else
-      precon = M1 * M2;
+      M = M1*M2;
+      precon = @(x) M \ x;
     endif
-  endif
-
-  if (nargin > 4 && isnumeric(precon) )
-    precon = inv(precon);
+  else
+    precon = @(x) x;
   endif
 
   ## Specifies initial estimate x0.
   if (nargin < 7)
     x = zeros (rows (b), 1);
   else
     x = x0;
   endif
@@ -91,25 +91,17 @@ function [x, flag, relres, iter, resvec]
   norm_b = norm (b);
   ## Vector of the residual norms for each iteration.
   resvec = [ norm(res)/norm_b ];
   ro = 0;
   ## Default behavior we don't reach tolerance tol within maxit iterations.
   flag = 1;
   for iter = 1 : maxit
 
-    if (nargin > 4 && isnumeric (precon))
-      z = precon * res;
-    elseif (nargin > 4)
-      ## Our preconditioner is a function.
-      z = feval (precon, res);
-    else
-      ## We don't use preconditioning.
-      z = res;
-    endif
+    z = precon (res);
 
     ## Cache.
     ro_old = ro;
     ro = res' * z;
     if (iter == 1)
       p = z;
     else
       beta = ro / ro_old;
