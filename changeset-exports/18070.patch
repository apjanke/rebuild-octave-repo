# HG changeset patch
# User Rik <rik@octave.org>
# Date 1386115196 28800
#      Tue Dec 03 15:59:56 2013 -0800
# Node ID ff05d5b70411a74dc11de04794189e157890e42d
# Parent  76006571e45a407ed084734cc9961638fa942d8d
Deprecate find_dir_in_path in favor of dir_in_path.

* NEWS: Announce deprecation of find_dir_in_path and new function dir_in_path.

* scripts/deprecated/find_dir_in_path.m: Add script to call dir_in_path and
give deprecation warning.

* scripts/deprecated/module.mk: Add deprecated find_dir_in_path.m to build
system.

* utils.cc (Fdir_in_path): Renamed find_dir_in_path to dir_in_path.

* help.m, what.m, rundemos.m, runtests.m: Chane instances of find_dir_in_path
to dir_in_path.

* utils.cc, variables.cc: Change seealso links to point to dir_in_path.

* func.txi: Document dir_in_path function.

diff --git a/NEWS b/NEWS
--- a/NEWS
+++ b/NEWS
@@ -1,14 +1,14 @@
 Summary of important user-visible changes for version 4.2:
 ---------------------------------------------------------
 
  ** Other new functions added in 4.2:
 
-      *none*
+      dir_in_path
 
  ** Deprecated functions.
 
     The following functions were deprecated in Octave 3.8 and have been
     removed from Octave 4.2.
 
       default_save_options    java_new            
       gen_doc_cache           java_set                   
@@ -19,17 +19,17 @@ Summary of important user-visible change
       java_get                read_readline_init_file   
       java_invoke             saving_history            
 
 
     The following functions have been deprecated in Octave 4.2 and will
     be removed from Octave 4.6 (or whatever version is the second major
     release after 4.2):
 
-      *none*
+      find_dir_in_path
 
 
     The following keywords were deprecated in Octave 3.8 and have been
     removed from Octave 4.2
 
       static
 
     The following configuration variables were deprecated in Octave 3.8
diff --git a/doc/interpreter/func.txi b/doc/interpreter/func.txi
--- a/doc/interpreter/func.txi
+++ b/doc/interpreter/func.txi
@@ -797,17 +797,17 @@ After this the directory @samp{~/Octave}
 @DOCSTRING(rehash)
 
 @DOCSTRING(file_in_loadpath)
 
 @DOCSTRING(restoredefaultpath)
 
 @DOCSTRING(command_line_path)
 
-@DOCSTRING(find_dir_in_path)
+@DOCSTRING(dir_in_path)
 
 @node Subfunctions
 @subsection Subfunctions
 
 A function file may contain secondary functions called
 @dfn{subfunctions}.  These secondary functions are only visible to the
 other functions in the same function file.  For example, a file
 @file{f.m} containing
diff --git a/libinterp/corefcn/utils.cc b/libinterp/corefcn/utils.cc
--- a/libinterp/corefcn/utils.cc
+++ b/libinterp/corefcn/utils.cc
@@ -298,17 +298,17 @@ If no file is found, return an empty cha
 \n\
 If the first argument is a cell array of strings, search each\n\
 directory of the loadpath for element of the cell array and return\n\
 the first that matches.\n\
 \n\
 If the second optional argument @qcode{\"all\"} is supplied, return\n\
 a cell array containing the list of all files that have the same\n\
 name in the path.  If no files are found, return an empty cell array.\n\
-@seealso{file_in_path, find_dir_in_path, path}\n\
+@seealso{file_in_path, dir_in_path, path}\n\
 @end deftypefn")
 {
   octave_value retval;
 
   int nargin = args.length ();
 
   if (nargin == 1 || nargin == 2)
     {
@@ -375,17 +375,17 @@ file_in_path (EXEC_PATH, \"sh\")\n\
 \n\
 If the second argument is a cell array of strings, search each\n\
 directory of the path for element of the cell array and return\n\
 the first that matches.\n\
 \n\
 If the third optional argument @qcode{\"all\"} is supplied, return\n\
 a cell array containing the list of all files that have the same\n\
 name in the path.  If no files are found, return an empty cell array.\n\
-@seealso{file_in_loadpath, find_dir_in_path, path}\n\
+@seealso{file_in_loadpath, dir_in_path, path}\n\
 @end deftypefn")
 {
   octave_value retval;
 
   int nargin = args.length ();
 
   if (nargin == 2 || nargin == 3)
     {
@@ -887,20 +887,20 @@ system.  No check is done for the existe
 
 /*
 ## FIXME: We need system-dependent tests here.
 
 %!error make_absolute_filename ()
 %!error make_absolute_filename ("foo", "bar")
 */
 
-DEFUN (find_dir_in_path, args, ,
+DEFUN (dir_in_path, args, ,
        "-*- texinfo -*-\n\
-@deftypefn  {Built-in Function} {} find_dir_in_path (@var{dir})\n\
-@deftypefnx {Built-in Function} {} find_dir_in_path (@var{dir}, \"all\")\n\
+@deftypefn  {Built-in Function} {} dir_in_path (@var{dir})\n\
+@deftypefnx {Built-in Function} {} dir_in_path (@var{dir}, \"all\")\n\
 Return the full name of the path element matching @var{dir}.  The\n\
 match is performed at the end of each path element.  For example, if\n\
 @var{dir} is @qcode{\"foo/bar\"}, it matches the path element\n\
 @nospell{@qcode{\"/some/dir/foo/bar\"}}, but not\n\
 @nospell{@qcode{\"/some/dir/foo/bar/baz\"}}\n\
 @nospell{@qcode{\"/some/dir/allfoo/bar\"}}.\n\
 \n\
 The second argument is optional.  If it is supplied, return a cell array\n\
@@ -921,29 +921,29 @@ containing all name matches rather than 
       if (! error_state)
         {
           if (nargin == 1)
             retval = load_path::find_dir (dir);
           else if (nargin == 2)
             retval = Cell (load_path::find_matching_dirs (dir));
         }
       else
-        error ("find_dir_in_path: DIR must be a directory name");
+        error ("dir_in_path: DIR must be a directory name");
     }
   else
     print_usage ();
 
   return retval;
 }
 
 /*
 ## FIXME: We need system-dependent tests here.
 
-%!error find_dir_in_path ()
-%!error find_dir_in_path ("foo", "bar", 1)
+%!error dir_in_path ()
+%!error dir_in_path ("foo", "bar", 1)
 */
 
 DEFUNX ("errno", Ferrno, args, ,
         "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {@var{err} =} errno ()\n\
 @deftypefnx {Built-in Function} {@var{err} =} errno (@var{val})\n\
 @deftypefnx {Built-in Function} {@var{err} =} errno (@var{name})\n\
 Return the current value of the system-dependent variable errno,\n\
diff --git a/libinterp/corefcn/variables.cc b/libinterp/corefcn/variables.cc
--- a/libinterp/corefcn/variables.cc
+++ b/libinterp/corefcn/variables.cc
@@ -543,17 +543,17 @@ Check only for built-in functions.\n\
 \n\
 @item @qcode{\"file\"}\n\
 Check only for files and directories.\n\
 \n\
 @item @qcode{\"dir\"}\n\
 Check only for directories.\n\
 @end table\n\
 \n\
-@seealso{file_in_loadpath, file_in_path, find_dir_in_path, stat}\n\
+@seealso{file_in_loadpath, file_in_path, dir_in_path, stat}\n\
 @end deftypefn")
 {
   octave_value retval = false;
 
   int nargin = args.length ();
 
   if (nargin == 1 || nargin == 2)
     {
diff --git a/scripts/deprecated/find_dir_in_path.m b/scripts/deprecated/find_dir_in_path.m
new file mode 100644
--- /dev/null
+++ b/scripts/deprecated/find_dir_in_path.m
@@ -0,0 +1,40 @@
+## Copyright (C) 2013 John W. Eaton
+##
+## This file is part of Octave.
+##
+## Octave is free software; you can redistribute it and/or modify it
+## under the terms of the GNU General Public License as published by
+## the Free Software Foundation; either version 3 of the License, or (at
+## your option) any later version.
+##
+## Octave is distributed in the hope that it will be useful, but
+## WITHOUT ANY WARRANTY; without even the implied warranty of
+## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+## General Public License for more details.
+##
+## You should have received a copy of the GNU General Public License
+## along with Octave; see the file COPYING.  If not, see
+## <http://www.gnu.org/licenses/>.
+
+## -*- texinfo -*-
+## @deftypefn  {Built-in Function} {} find_dir_in_path (@var{dir})
+## @deftypefnx {Built-in Function} {} find_dir_in_path (@var{dir}, "all")
+## This function has been deprecated.  Use @code{dir_in_path} instead.
+## @seealso{dir_in_path}
+## @end deftypefn
+
+## Deprecated in version 4.2
+
+function retval = find_dir_in_path (varargin)
+
+  persistent warned = false;
+  if (! warned)
+    warned = true;
+    warning ("Octave:deprecated-function",
+             "find_dir_in_path is obsolete and will be removed from a future version of Octave, please use dir_in_path instead");
+  endif
+
+  retval = dir_in_path (varargin{:});
+
+endfunction
+
diff --git a/scripts/deprecated/module.mk b/scripts/deprecated/module.mk
--- a/scripts/deprecated/module.mk
+++ b/scripts/deprecated/module.mk
@@ -1,10 +1,11 @@
 FCN_FILE_DIRS += deprecated
 
 deprecated_FCN_FILES = \
+  deprecated/find_dir_in_path.m \
   deprecated/isstr.m
 
 FCN_FILES += $(deprecated_FCN_FILES)
 
 PKG_ADD_FILES += deprecated/PKG_ADD
 
 DIRSTAMP_FILES += deprecated/$(octave_dirstamp)
diff --git a/scripts/help/help.m b/scripts/help/help.m
--- a/scripts/help/help.m
+++ b/scripts/help/help.m
@@ -158,17 +158,17 @@ function retval = do_list_functions ()
   retval = [operators, keywords, builtins, flist];
 
 endfunction
 
 function do_contents (name)
 
   found = false;
 
-  dlist = find_dir_in_path (name, "all");
+  dlist = dir_in_path (name, "all");
 
   for i = 1:numel (dlist)
     fname = make_absolute_filename (fullfile (dlist{i}, "Contents.m"));
 
     [text, format] = get_help_text_from_file (fname);
 
     ## Take action depending on help text format
     switch (lower (format))
diff --git a/scripts/miscellaneous/what.m b/scripts/miscellaneous/what.m
--- a/scripts/miscellaneous/what.m
+++ b/scripts/miscellaneous/what.m
@@ -32,17 +32,17 @@ function ret = what (d)
     d = pwd ();
   else
     dtmp = canonicalize_file_name (d);
     if (isempty (dtmp))
       ## Search for directory name in path
       if (d(end) == '/' || d(end) == '\')
         d(end) = [];
       endif
-      dtmp = find_dir_in_path (d);
+      dtmp = dir_in_path (d);
       if (isempty (dtmp))
         error ("what: could not find the directory %s", d);
       endif
     endif
     d = dtmp;
   endif
 
   files = dir (d);
diff --git a/scripts/testfun/rundemos.m b/scripts/testfun/rundemos.m
--- a/scripts/testfun/rundemos.m
+++ b/scripts/testfun/rundemos.m
@@ -37,17 +37,17 @@ function rundemos (directory)
     do_class_dirs = true;
   elseif (nargin == 1)
     dirs = {canonicalize_file_name(directory)};
     if (isempty (dirs{1}))
       ## Search for directory name in path
       if (directory(end) == '/' || directory(end) == '\')
         directory(end) = [];
       endif
-      fullname = find_dir_in_path (directory);
+      fullname = dir_in_path (directory);
       if (isempty (fullname))
         error ("rundemos: DIRECTORY argument must be a valid pathname");
       endif
       dirs = {fullname};
     endif
     do_class_dirs = false;
   else
     print_usage ();
diff --git a/scripts/testfun/runtests.m b/scripts/testfun/runtests.m
--- a/scripts/testfun/runtests.m
+++ b/scripts/testfun/runtests.m
@@ -37,17 +37,17 @@ function runtests (directory)
     do_class_dirs = true;
   elseif (nargin == 1)
     dirs = {canonicalize_file_name(directory)};
     if (isempty (dirs{1}))
       ## Search for directory name in path
       if (directory(end) == '/' || directory(end) == '\')
         directory(end) = [];
       endif
-      fullname = find_dir_in_path (directory);
+      fullname = dir_in_path (directory);
       if (isempty (fullname))
         error ("runtests: DIRECTORY argument must be a valid pathname");
       endif
       dirs = {fullname};
     endif
     do_class_dirs = false;
   else
     print_usage ();
