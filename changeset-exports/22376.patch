# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1472083492 14400
#      Wed Aug 24 20:04:52 2016 -0400
# Node ID 3473246a824e8eafbf0e9be3abfe3dfcbe36d567
# Parent  179d088a6375c9494506b8eff835bf7a0a1f71d8
allow %!test blocks to be tagged with messages or bug ids

* test.m: Handle <MESSAGE> option for assert, fail, test, testif, and
xtest blocks.
* doc/interpreter/testfun.txi: Update docs.

diff --git a/doc/interpreter/testfun.txi b/doc/interpreter/testfun.txi
--- a/doc/interpreter/testfun.txi
+++ b/doc/interpreter/testfun.txi
@@ -327,53 +327,84 @@ This code generates an error
 PASSES 3 out of 4 tests (1 expected failure)
 @end group
 @end example
 
 @subsubheading Block type summary:
 
 @table @code
 @item %!test
-check that entire block is correct
+@itemx %!test <MESSAGE>
+Check that entire block is correct.  If @code{<MESSAGE>} is present, the
+test block is interpreted as for @code{xtest}.
 
 @item %!testif HAVE_XXX
-check block only if Octave was compiled with feature HAVE_XXX.
+@itemx %!testif HAVE_XXX, HAVE_YYY, @dots{}
+@itemx %!testif @dots{} <MESSAGE>
+Check block only if Octave was compiled with feature HAVE_XXX.  If
+@code{<MESSAGE>} is present, the test block is interpreted as for
+@code{xtest}.
 
 @item %!xtest
-check block, report a test failure but do not abort testing.
+@itemx %!xtest <MESSAGE>
+Check block, report a test failure but do not abort testing.  If
+@code{<MESSAGE>} is present, then the text of the message is displayed
+if the test fails, like this:
+
+@example
+!!!!! Known bug:  MESSAGE
+@end example
+
+@noindent
+If the message is an integer, it is interpreted as a bug ID for the
+Octave bug tracker and reported as
+
+@example
+!!!!! Known bug: http://octave.org/testfailure/?BUG-ID
+@end example
+
+@noindent
+in which BUG-ID is the integer bug number.  The intent is to allow
+clearer documentation of known problems.
 
 @item %!error
-check for correct error message
-
-@item %!warning
-check for correct warning message
+@itemx %!error <MESSAGE>
+@itemx %!warning
+@itemx %!warning <MESSAGE>
+Check for correct error or warning message.  If @code{<MESSAGE>} is
+supplied it is interpreted as a regular expression pattern that is
+expected to match the error or warning message.
 
 @item %!demo
-demo only executes in interactive mode
+Demo only executes in interactive mode.
 
 @item %!#
-comment: ignore everything within the block
+Comment.  Ignore everything within the block
 
 @item %!shared x,y,z
-declare variables for use in multiple tests
+Declare variables for use in multiple tests.
 
 @item %!function
-define a function for use in multiple tests
+Define a function for use in multiple tests.
 
 @item %!endfunction
-close a function definition
+Close a function definition.
 
 @item %!assert (x, y, tol)
-shorthand for @code{%!test assert (x, y, tol)}
-
+@item %!assert <MESSAGE> (x, y, tol)
 @item %!fail (CODE, PATTERN)
-shorthand for @code{%!test fail (CODE, PATTERN)}
+@item %!fail <MESSAGE> (CODE, PATTERN)
+Shorthand for @code{%!test assert (x, y, tol)} or
+@code{%!test fail (CODE, PATTERN)}.  If @code{<MESSAGE>} is present, the
+test block is interpreted as for @code{xtest}.
 
 @end table
 
+@anchor{test-message-anchor}
+
 When coding tests the Octave convention is that lines that begin with a block
 type do not have a semicolon at the end.  Any code that is within a block,
 however, is normal Octave code and usually will have a trailing semicolon.
 For example,
 
 @example
 @group
 ## bare block instantiation
diff --git a/scripts/testfun/test.m b/scripts/testfun/test.m
--- a/scripts/testfun/test.m
+++ b/scripts/testfun/test.m
@@ -322,29 +322,29 @@ function [__n, __nmax, __nxfail, __nskip
       else
         __type = __block(1:__idx(1)-1);
         __code = __block(__idx(1):length (__block));
       endif
 
       ## Assume the block will succeed.
       __success = true;
       __msg = [];
+      __istest = false;
       __isxtest = false;
+      __bug_id = "";
 
 ### DEMO
 
       ## If in __grabdemo mode, then don't process any other block type.
       ## So that the other block types don't have to worry about
       ## this __grabdemo mode, the demo block processor grabs all block
       ## types and skips those which aren't demo blocks.
 
       __isdemo = strcmp (__type, "demo");
       if (__grabdemo || __isdemo)
-        __istest = false;
-
         if (__grabdemo && __isdemo)
           if (isempty (__demo_code))
             __demo_code = __code;
             __demo_idx = [1, length(__demo_code)+1];
           else
             __demo_code = [__demo_code, __code];
             __demo_idx = [__demo_idx, length(__demo_code)+1];
           endif
@@ -363,18 +363,16 @@ function [__n, __nmax, __nxfail, __nskip
 
         endif
         ## Code already processed.
         __code = "";
 
 ### SHARED
 
       elseif (strcmp (__type, "shared"))
-        __istest = false;
-
         ## Separate initialization code from variables.
         __idx = find (__code == "\n");
         if (isempty (__idx))
           __vars = __code;
           __code = "";
         else
           __vars = __code (1:__idx(1)-1);
           __code = __code (__idx(1):length (__code));
@@ -404,17 +402,16 @@ function [__n, __nmax, __nxfail, __nskip
           __msg = [__signal_fail "shared variable initialization failed\n"];
         end_try_catch
 
         ## Initialization code will be evaluated below.
 
 ### FUNCTION
 
       elseif (strcmp (__type, "function"))
-        __istest = false;
         persistent __fn = 0;
         __name_position = function_name (__block);
         if (isempty (__name_position))
           __success = false;
           __msg = [__signal_fail "test failed: missing function name\n"];
         else
           __name = __block(__name_position(1):__name_position(2));
           __code = __block;
@@ -428,25 +425,29 @@ function [__n, __nmax, __nxfail, __nskip
         endif
         __code = "";
 
 ### ENDFUNCTION
 
       elseif (strcmp (__type, "endfunction"))
         ## endfunction simply declares the end of a previous function block.
         ## There is no processing to be done here, just skip to next block.
-        __istest = false;
         __code = "";
 
 ### ASSERT/FAIL
 
       elseif (strcmp (__type, "assert") || strcmp (__type, "fail"))
-        __istest = true;
+        [__bug_id, __code] = getbugid (__code);
+        if (isempty (__bug_id))
+          __istest = true;
+        else
+          __isxtest = true;
+        endif
         ## Put the keyword back on the code.
-        __code = __block;
+        __code = [__type __code];
         ## The code will be evaluated below as a test block.
 
 ### ERROR/WARNING
 
       elseif (strcmp (__type, "error") || strcmp (__type, "warning"))
         __istest = true;
         __iswarning = strcmp (__type, "warning");
         [__pattern, __id, __code] = getpattern (__code);
@@ -523,48 +524,65 @@ function [__n, __nmax, __nxfail, __nskip
         endif
         ## Code already processed.
         __code = "";
 
 ### TESTIF
 
       elseif (strcmp (__type, "testif"))
         __e = regexp (__code, '.$', 'lineanchors', 'once');
-        ## Strip any comment from testif line before looking for features
+        ## Strip any comment and bug-id from testif line before
+        ## looking for features
         __feat_line = strtok (__code(1:__e), '#%');
+        __idx1 = index (__feat_line, "<");
+        if (__idx1)
+          __tmp = __feat_line(__idx1+1:end);
+          __idx2 = index (__tmp, ">");
+          if (__idx2)
+            __bug_id = __tmp(1:__idx2-1);
+            __feat_line = __feat_line(1:__idx1-1);
+          endif
+        endif
         __feat = regexp (__feat_line, '\w+', 'match');
         __feat = strrep (__feat, "HAVE_", "");
         __have_feat = __have_feature__ (__feat);
         if (__have_feat)
-          __istest = true;
+          if (isempty (__bug_id))
+            __istest = true;
+          else
+            __isxtest = true;
+          endif
           __code = __code(__e + 1 : end);
         else
           __xskip += 1;
-          __istest = false;
           __code = ""; # Skip the code.
           __msg = [__signal_skip "skipped test\n"];
         endif
 
 ### TEST
 
       elseif (strcmp (__type, "test"))
-        __istest = true;
+        [__bug_id, __code] = getbugid (__code);
+        if (! isempty (__bug_id))
+          __isxtest = true;
+        else
+          __istest = true;
+        endif
         ## Code will be evaluated below.
 
 ### XTEST
 
       elseif (strcmp (__type, "xtest"))
-        __istest = false;
         __isxtest = true;
+        [__bug_id, __code] = getbugid (__code);
         ## Code will be evaluated below.
 
 ### Comment block.
 
       elseif (strcmp (__block(1:1), "#"))
-        __istest = false;
         __code = ""; # skip the code
 
 ### Unknown block.
 
       else
         __istest = true;
         __success = false;
         __msg = [__signal_fail "unknown test type!\n"];
@@ -581,26 +599,34 @@ function [__n, __nmax, __nxfail, __nskip
             eval (sprintf ("function %s__test__(%s)\n%s\nendfunction",
                            __shared_r, __shared, __code));
             eval (sprintf ("%s__test__(%s);", __shared_r, __shared));
           else
             error (["Functions embedded in %!test blocks are not allowed.\n", ...
                     "Use the %!function/%!endfunction syntax instead to define shared functions for testing.\n"]);
           endif
         catch
-          if (strcmp (__type, "xtest"))
-            __msg = [__signal_fail "known failure\n"];
-            __xfail += 1;
-            __success = false;
-          else
-            __msg = [__signal_fail "test failed\n" lasterr()];
-            __success = false;
-          endif
           if (isempty (lasterr ()))
             error ("test: empty error text, probably Ctrl-C --- aborting");
+          else
+            __success = false;
+            if (__isxtest)
+              __xfail += 1;
+              if (isempty (__bug_id))
+                __msg = [__signal_fail "known failure\n"];
+              else
+                if (all (isdigit (__bug_id)))
+                  __bug_id = ["http://octave.org/testfailure/?" __bug_id];
+                endif
+                __msg = ["known bug: " __bug_id "\n"];
+              endif
+            else
+              __msg = "test failed\n";
+            endif
+            __msg = [__signal_fail __msg lasterr()];
           endif
         end_try_catch
         clear __test__;
       endif
 
       ## All done.  Remember if we were successful and print any messages.
       if (! isempty (__msg) && (__verbose >= 0 || __logfile))
         ## Make sure the user knows what caused the error.
@@ -646,17 +672,17 @@ function [__n, __nmax, __nxfail, __nskip
   endfor
 
   ## Clear any functions created during test run
   eval (__clearfcn, "");
 
   if (nargout == 0)
     if (__tests || __xfail || __xskip)
       if (__xfail)
-        printf ("PASSES %d out of %d test%s (%d expected failure%s)\n",
+        printf ("PASSES %d out of %d test%s (%d known failure%s)\n",
                 __successes, __tests, ifelse (__tests > 1, "s", ""),
                 __xfail, ifelse (__xfail > 1, "s", ""));
       else
         printf ("PASSES %d out of %d test%s\n", __successes, __tests,
                ifelse (__tests > 1, "s", ""));
       endif
       if (__xskip)
         printf ("Skipped %d test%s due to missing features\n", __xskip,
@@ -708,17 +734,17 @@ function pos = function_name (def)
   left += 1;
 
   ## Return the end points of the name.
   pos = [left, right];
 
 endfunction
 
 ## Strip <pattern> from '<pattern> code'.
-## Also handles 'id=ID code'
+## Optionally also handles 'id=ID code'
 function [pattern, id, rest] = getpattern (str)
 
   pattern = ".";
   id = [];
   rest = str;
   str = trimleft (str);
   if (! isempty (str) && str(1) == "<")
     close = index (str, ">");
@@ -727,16 +753,34 @@ function [pattern, id, rest] = getpatter
       rest = str(close+1:end);
     endif
   elseif (strncmp (str, "id=", 3))
     [id, rest] = strtok (str(4:end));
   endif
 
 endfunction
 
+## Strip <bug-id> from '<pattern> code'.
+function [bug_id, rest] = getbugid (str)
+
+  bug_id = "";
+  id = [];
+  rest = str;
+  str = trimleft (str);
+  if (! isempty (str) && str(1) == "<")
+    close = index (str, ">");
+    if (close)
+      bug_id = str(2:close-1);
+      rest = str(close+1:end);
+    endif
+  endif
+
+endfunction
+
+
 ## Strip '.*prefix:' from '.*prefix: msg\n' and strip trailing blanks.
 function msg = trimerr (msg, prefix)
   idx = index (msg, [prefix ":"]);
   if (idx > 0)
     msg(1:idx+length(prefix)) = [];
   endif
   msg = strtrim (msg);
 endfunction
@@ -896,17 +940,17 @@ endfunction
 
 ## Test test() input validation
 %!error <NAME must be a string> test (1)
 %!error <second argument must be a string> test ("ls", 1)
 %!error test ([], "normal")
 
 ## All of the following tests should fail.  These tests should
 ## be disabled unless you are developing test() since users don't
-## like to be presented with expected failures.
+## like to be presented with known failures.
 ## %!test   error("---------Failure tests.  Use test('test','verbose',1)");
 ## %!test   assert([a,b,c],[1,3,6]);   # variables have wrong values
 ## %!invalid                   # unknown block type
 ## %!error  toeplitz([1,2,3]); # correct usage
 ## %!test   syntax errors)     # syntax errors fail properly
 ## %!shared garbage in         # variables must be comma separated
 ## %!error  syntax++error      # error test fails on syntax errors
 ## %!error  "succeeds.";       # error test fails if code succeeds
