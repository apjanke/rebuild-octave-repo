# HG changeset patch
# User jwe
# Date 954492650 0
#      Fri Mar 31 08:50:50 2000 +0000
# Node ID 25e84fcef38a3cbfe347cf1c86f4ac2c9171ddb5
# Parent  c2305b99fbd78006f8da06ffab9e3a9e69c016fc
[project @ 2000-03-31 08:50:48 by jwe]

diff --git a/scripts/general/postpad.m b/scripts/general/postpad.m
--- a/scripts/general/postpad.m
+++ b/scripts/general/postpad.m
@@ -28,33 +28,34 @@
 function y = postpad (x, l, c)
 
   if (nargin == 2)
     c = 0;
   elseif (nargin < 2 || nargin > 3)
     usage ("postpad (x, l) or postpad (x, l, c)");
   endif
 
-  if (! is_vector (x))
-    error ("first argument must be a vector");
+  if (! is_matrix (x))
+    error ("first argument must be a vector or matrix");
   elseif (! is_scalar (l))
     error ("second argument must be a scaler");
   endif
 
   if (l < 0)
     error ("second argument must be non-negative");
   endif
 
-  lx = length (x);
-
-  if (lx >= l)
-    y = x(1:l);
+  [nr, nc] = size (x);
+  if (nr == 1)
+    if (nc >= l)
+      y = x(1:l);
+    else
+      y = [x, c*ones(1,l-nc)];
+    endif
   else
-    if (rows (x) > 1)
-      tmp = c * ones (l-lx, 1);
-      y = [x; tmp];
+    if (nr >= l)
+      y = x(1:l,:);
     else
-      tmp = c * ones (1, l-lx);
-      y = [x, tmp];
+      y = [x ; c*ones(l-nr,nc)];
     endif
   endif
 
 endfunction
diff --git a/scripts/general/prepad.m b/scripts/general/prepad.m
--- a/scripts/general/prepad.m
+++ b/scripts/general/prepad.m
@@ -22,46 +22,49 @@
 ## @deftypefnx {Function File} {} postpad (@var{x}, @var{l}, @var{c})
 ##
 ## Prepends (appends) the scalar value @var{c} to the vector @var{x}
 ## until it is of length @var{l}.  If the third argument is not
 ## supplied, a value of 0 is used.
 ##
 ## If @code{length (@var{x}) > @var{l}}, elements from the beginning (end) of
 ## @var{x} are removed until a vector of length @var{l} is obtained.
+##
+## If @var{x} is a matrix, elements are prepended or removed from each row.
 ## @end deftypefn
 
 ## Author: Tony Richardson <arichard@stark.cc.oh.us>
 ## Created: June 1994
 
 function y = prepad (x, l, c)
 
   if (nargin == 2)
     c = 0;
   elseif (nargin < 2 || nargin > 3)
     usage ("prepad (x, l) or prepad (x, l, c)");
   endif
 
-  if (! is_vector (x))
-    error ("first argument must be a vector");
+  if (! is_matrix (x))
+    error ("first argument must be a vector or matrix");
   elseif (! is_scalar (l))
     error ("second argument must be a scaler");
   endif
 
   if (l < 0)
     error ("second argument must be non-negative");
   endif
 
-  lx = length (x);
-
-  if (lx >= l)
-    y = x(lx-l+1:lx);
+  [nr, nc] = size (x);
+  if (nr == 1)
+    if (nc >= l)
+      y = x(nc-l+1:nc);
+    else
+      y = [c*ones(1,l-nc), x];
+    endif
   else
-    if (rows (x) > 1)
-      tmp = c * ones (l-lx, 1);
-      y = [tmp; x];
+    if (nr >= l)
+      y = x(nr-l+1:nr,:);
     else
-      tmp = c * ones (1, l-lx);
-      y = [tmp, x];
+      y = [c*ones(l-nr,nc); x];
     endif
   endif
 
 endfunction
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,29 @@
+2000-03-31  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* oct-fstrm.cc (octave_fstream::do_close): New function.
+	* oct-stdstrm.cc (octave_istdiostream::do_close): Ditto.
+	(octave_ostdiostream::do_close): Ditto.
+	* c-file-ptr-stream.cc (c_file_ptr_buf::close): Ditto.
+	(i_c_file_ptr_stream::close): Ditto.
+	(o_c_file_ptr_stream::close): Ditto.
+	* oct-prcstrm.cc (octave_iprocstream::do_close): Ditto.
+	(octave_oprocstream::do_close): Ditto.
+	(octave_iprocstram::~octave_iprocstram): Call do_close here.
+	(octave_iprocstram::~octave_oprocstram): Likewise.
+
+	* oct-stream.h (octave_base_stream::do_close): New virtual function.
+	(octave_base_stream::close): If stream is open, call do_close.
+
+	* c-file-ptr-stream.cc (c_file_ptr_buf::flush): New function.
+	(c_file_ptr_buf::~c_file_ptr_buf): Use it.
+	(c_file_ptr_buf::overflow): Ditto.
+	(c_file_ptr_buf::sync): Ditto.
+
 2000-03-30  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* oct-procbuf.cc (octave_procbuf::open): Make output streams line
 	buffered.
 
 2000-03-24  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* sighandlers.cc (my_friendly_exit): Prefix failure messages with
diff --git a/src/c-file-ptr-stream.cc b/src/c-file-ptr-stream.cc
--- a/src/c-file-ptr-stream.cc
+++ b/src/c-file-ptr-stream.cc
@@ -39,27 +39,26 @@ Software Foundation, 59 Temple Place - S
 #endif
 
 #ifndef SEEK_END
 #define SEEK_END 2
 #endif
 
 c_file_ptr_buf::~c_file_ptr_buf (void)
 {
-  if (f)
-    fflush (f);
+  flush ();
 }
 
 // XXX FIXME XXX -- I'm sure there is room for improvement here...
 
 int
 c_file_ptr_buf::overflow (int c)
 {
   if (f)
-    return (c != EOF) ? fputc (c, f) : fflush (f);
+    return (c != EOF) ? fputc (c, f) : flush ();
   else
     return EOF;
 }
 
 int
 c_file_ptr_buf::underflow (void)
 {
   if (f)
@@ -136,17 +135,46 @@ c_file_ptr_buf::seekpos (std::streampos 
     }
   else
     return 0;
 }
 
 int
 c_file_ptr_buf::sync (void)
 {
+  flush ();
+
   return 0;
 }
 
+int
+c_file_ptr_buf::flush (void)
+{
+  return f ? fflush (f) : EOF;
+}
+
+int
+c_file_ptr_buf::close (void)
+{
+  if (f)
+    return fclose (f);
+}
+
+void
+i_c_file_ptr_stream::close (void)
+{
+  if (buf)
+    buf->close ();
+}
+
+void
+o_c_file_ptr_stream::close (void)
+{
+  if (buf)
+    buf->close ();
+}
+
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
 
diff --git a/src/c-file-ptr-stream.h b/src/c-file-ptr-stream.h
--- a/src/c-file-ptr-stream.h
+++ b/src/c-file-ptr-stream.h
@@ -56,16 +56,20 @@ public:
   std::streampos seekoff (std::streamoff, std::ios::seekdir,
 			  std::ios::openmode = std::ios::in | std::ios::out);
   
   std::streampos seekpos (std::streampos,
 			  std::ios::openmode = std::ios::in | std::ios::out);
 
   int sync (void);
 
+  int flush (void);
+
+  int close (void);
+
 protected:
 
   FILE *f;
 };
 
 class
 i_c_file_ptr_stream : public std::istream
 {
@@ -73,16 +77,18 @@ public:
 
   i_c_file_ptr_stream (FILE* f)
     : std::istream (), buf (new c_file_ptr_buf (f)) { init (buf); }
 
   ~i_c_file_ptr_stream (void) { delete buf; buf = 0; }
 
   c_file_ptr_buf *rdbuf (void) { return buf; }
 
+  void close (void);
+
 private:
 
   c_file_ptr_buf *buf;
 };
 
 class
 o_c_file_ptr_stream : public std::ostream
 {
@@ -90,16 +96,18 @@ public:
 
   o_c_file_ptr_stream (FILE* f)
     : std::ostream (), buf (new c_file_ptr_buf (f)) { init (buf); }
 
   ~o_c_file_ptr_stream (void) { delete buf; buf = 0; }
 
   c_file_ptr_buf *rdbuf (void) { return buf; }
 
+  void close (void);
+
 private:
 
   c_file_ptr_buf *buf;
 };
 
 #endif
 
 /*
diff --git a/src/oct-fstrm.cc b/src/oct-fstrm.cc
--- a/src/oct-fstrm.cc
+++ b/src/oct-fstrm.cc
@@ -97,16 +97,22 @@ octave_fstream::tell (void) const
 // Return non-zero if EOF has been reached on this stream.
 
 bool
 octave_fstream::eof (void) const
 {
   return fs.eof ();
 }
 
+void
+octave_fstream::do_close (void)
+{
+  fs.close ();
+}
+
 std::istream *
 octave_fstream::input_stream (void)
 {
   std::istream *retval = 0;
 
   if (mode () & std::ios::in)
     retval = &fs;
 
diff --git a/src/oct-fstrm.h b/src/oct-fstrm.h
--- a/src/oct-fstrm.h
+++ b/src/oct-fstrm.h
@@ -49,16 +49,18 @@ public:
   // Return current stream position.
 
   long tell (void) const;
 
   // Return non-zero if EOF has been reached on this stream.
 
   bool eof (void) const;
 
+  void do_close (void);
+
   // The name of the file.
 
   std::string name (void) const { return nm; }
 
   std::istream *input_stream (void);
 
   std::ostream *output_stream (void);
 
diff --git a/src/oct-prcstrm.cc b/src/oct-prcstrm.cc
--- a/src/oct-prcstrm.cc
+++ b/src/oct-prcstrm.cc
@@ -46,16 +46,22 @@ octave_iprocstream::octave_iprocstream (
     {
       delete is;
       is = new i_c_file_ptr_stream (fp);
     }
 }
 
 octave_iprocstream::~octave_iprocstream (void)
 {
+  do_close ();
+}
+
+void
+octave_iprocstream::do_close (void)
+{
   if (fp)
     {
       pclose (fp);
       fp = 0;
     }
 }
 
 octave_stream
@@ -76,16 +82,22 @@ octave_oprocstream::octave_oprocstream (
     {
       delete os;
       os = new o_c_file_ptr_stream (fp);
     }
 }
 
 octave_oprocstream::~octave_oprocstream (void)
 {
+  do_close ();
+}
+
+void
+octave_oprocstream::do_close (void)
+{
   if (fp)
     {
       pclose (fp);
       fp = 0;
     }
 }
 
 /*
diff --git a/src/oct-prcstrm.h b/src/oct-prcstrm.h
--- a/src/oct-prcstrm.h
+++ b/src/oct-prcstrm.h
@@ -20,30 +20,35 @@ Software Foundation, 59 Temple Place - S
 
 */
 
 #if !defined (octave_octave_procstream_h)
 #define octave_octave_procstream_h 1
 
 #include "oct-stdstrm.h"
 
+// XXX FIXME XXX -- why don't these classes use iprocstream and
+// oprocstream, which in turn use the octave_procbuf class?
+
 class
 octave_iprocstream : public octave_istdiostream
 {
 public:
 
   octave_iprocstream (const std::string& n,
 		      std::ios::openmode arg_md = std::ios::in,
 		      oct_mach_info::float_format flt_fmt =
 		      oct_mach_info::native);
 
   static octave_stream
   create (const std::string& n, std::ios::openmode arg_md = std::ios::in,
 	  oct_mach_info::float_format flt_fmt = oct_mach_info::native);
 
+  void do_close (void);
+
 protected:
 
   ~octave_iprocstream (void);
 
 private:
 
   // No copying!
 
@@ -61,16 +66,18 @@ public:
 		      std::ios::openmode arg_md = std::ios::out,
 		      oct_mach_info::float_format flt_fmt =
 		      oct_mach_info::native);
 
   static octave_stream
   create (const std::string& n, std::ios::openmode arg_md = std::ios::out,
 	  oct_mach_info::float_format flt_fmt = oct_mach_info::native);
 
+  void do_close (void);
+
 protected:
 
   ~octave_oprocstream (void);
 
 private:
 
   // No copying!
 
diff --git a/src/oct-stdstrm.cc b/src/oct-stdstrm.cc
--- a/src/oct-stdstrm.cc
+++ b/src/oct-stdstrm.cc
@@ -100,16 +100,23 @@ octave_istdiostream::octave_istdiostream
     is = new i_c_file_ptr_stream (f);
 }
 
 octave_istdiostream::~octave_istdiostream (void)
 {
   delete is;
 }
 
+void
+octave_istdiostream::do_close (void)
+{
+  if (is)
+    is->close ();
+}
+
 octave_stream
 octave_ostdiostream::create (const std::string& n, FILE *f,
 			     std::ios::openmode arg_md,
 			     oct_mach_info::float_format flt_fmt)
 {
   return octave_stream (new octave_ostdiostream (n, f, arg_md, flt_fmt));
 }
 
@@ -122,13 +129,20 @@ octave_ostdiostream::octave_ostdiostream
     os = new o_c_file_ptr_stream (f);
 }
 
 octave_ostdiostream::~octave_ostdiostream (void)
 {
   delete os;
 }
 
+void
+octave_ostdiostream::do_close (void)
+{
+  if (os)
+    os->close ();
+}
+
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
diff --git a/src/oct-stdstrm.h b/src/oct-stdstrm.h
--- a/src/oct-stdstrm.h
+++ b/src/oct-stdstrm.h
@@ -89,26 +89,29 @@ public:
 
   bool eof (void) const { return is ? is->eof () : true; }
 
   std::istream *input_stream (void) { return is; }
 
   std::ostream *output_stream (void) { return 0; }
 
   // XXX FIXME XXX -- should not have to cast away const here.
-  c_file_ptr_buf *rdbuf (void) const { return is ? is->rdbuf () : 0; }
+  c_file_ptr_buf *rdbuf (void) const
+    { return is ? (const_cast<i_c_file_ptr_stream *> (is))->rdbuf () : 0; }
 
   bool bad (void) const { return is ? is->bad () : true; }
 
   void clear (void)
     {
       if (is)
 	is->clear ();
     }
 
+  void do_close (void);
+
 protected:
 
   i_c_file_ptr_stream *is;
 
   ~octave_istdiostream (void);
 
 private:
 
@@ -149,16 +152,18 @@ public:
   bool bad (void) const { return os ? os->bad () : true; }
 
   void clear (void)
     {
       if (os)
 	os->clear ();
     }
 
+  void do_close (void);
+
 protected:
 
   o_c_file_ptr_stream *os;
 
   ~octave_ostdiostream (void);
 
 private:
 
diff --git a/src/oct-stream.h b/src/oct-stream.h
--- a/src/oct-stream.h
+++ b/src/oct-stream.h
@@ -359,17 +359,26 @@ public:
   // automatically work for this stream.
 
   virtual std::ostream *output_stream (void) { return 0; }
 
   // Return TRUE if this stream is open.
 
   bool is_open (void) const { return open_state; }
 
-  void close (void) { open_state = false; }
+  virtual void do_close (void) { }
+
+  void close (void)
+    {
+      if (is_open ())
+	{
+	  open_state = false;
+	  do_close ();
+	}
+    }
 
   int file_number (void);
 
   bool ok (void) const { return ! fail; }
 
   // Return current error message for this stream.
 
   std::string error (bool clear, int& err_num);
diff --git a/src/procstream.h b/src/procstream.h
--- a/src/procstream.h
+++ b/src/procstream.h
@@ -68,17 +68,17 @@ private:
 class
 iprocstream : public procstreambase, public std::istream
 {
 public:
 
   iprocstream (void) : procstreambase () { }
 
   iprocstream (const char *name, int mode = std::ios::in)
-    : procstreambase(name, mode) { }
+    : procstreambase (name, mode) { }
 
   ~iprocstream (void) { }
 
   void open (const char *name, int mode = std::ios::in)
     { procstreambase::open (name, mode); }
 
 private:
 
@@ -95,39 +95,39 @@ public:
   oprocstream (void) : procstreambase () { }
 
   oprocstream (const char *name, int mode = std::ios::out)
     : procstreambase(name, mode) { }
 
   ~oprocstream (void) { }
 
   void open (const char *name, int mode = std::ios::out)
-    { procstreambase::open(name, mode); }
+    { procstreambase::open (name, mode); }
 
 private:
 
   oprocstream (const oprocstream&);
 
   oprocstream& operator = (const oprocstream&);
 };
 
 class
 procstream : public procstreambase, public std::iostream
 {
 public:
 
   procstream (void) : procstreambase () { }
 
   procstream (const char *name, int mode)
-    : procstreambase(name, mode) { }
+    : procstreambase (name, mode) { }
 
   ~procstream (void) { }
 
   void open (const char *name, int mode)
-    { procstreambase::open(name, mode); }
+    { procstreambase::open (name, mode); }
 
 private:
 
   procstream (const procstream&);
 
   procstream& operator = (const procstream&);
 };
 
