# HG changeset patch
# User Vytautas Janƒçauskas <unaudio@gmail.com>
# Date 1379630263 -10800
#      Fri Sep 20 01:37:43 2013 +0300
# Node ID 0ac6a4e7369b46697d156ccaa8a732ac9c650baa
# Parent  77b52b86b419e2402df62b4b2af0f2015b0e8f3d
change docstrings in audio defundld cc files to work with new texinfo

* audiodevinfo.cc, audioread.cc, audiowrite.cc: fix stand-alone deftypefnx
tags

diff --git a/libinterp/dldfcn/audiodevinfo.cc b/libinterp/dldfcn/audiodevinfo.cc
--- a/libinterp/dldfcn/audiodevinfo.cc
+++ b/libinterp/dldfcn/audiodevinfo.cc
@@ -34,36 +34,46 @@ DEFUN_DLD(audiodevinfo, args, ,
 "-*- texinfo -*-\n\
 @deftypefn{Loadable Function} @var{devinfo} = audiodevinfo\n\
 \n\
 Returns a structure with two fields called \"input\" and \"output\". \
 Each structure contains an array of structures with three fields called \
 \"Name\", \"DriverVersion\" and \"ID\". Each structure contains information \
 about a PortAudio device.\n\
 \n\
-@deftypefnx{Loadable Function} @var{devs} = audiodevinfo(@var{IO})\n\
+@end deftypefn\n\
+\n\
+@deftypefn{Loadable Function} @var{devs} = audiodevinfo(@var{IO})\n\
 \n\
 Returns the number of input or output devices available. Set @var{IO} to 1 \
 for input devices and to 0 for output devices.\n\
-@deftypefnx{Loadable Function} @var{name} = audiodevinfo(@var{IO}, @var{ID})\n\
+@end deftypefn\n\
+\n\
+@deftypefn{Loadable Function} @var{name} = audiodevinfo(@var{IO}, @var{ID})\n\
 \n\
 Returns the name of a device specified by numerical @var{ID}. Set @var{IO} \
 to 1 for input devices and to 0 for output devices.\n\
-@deftypefnx{Loadable Function} @var{id} = audiodevinfo(@var{IO}, @var{name})\n\
+@end deftypefn\n\
+\n\
+@deftypefn{Loadable Function} @var{id} = audiodevinfo(@var{IO}, @var{name})\n\
 \n\
 Returns the id of a device specified by name. Set @var{IO} \
 to 1 for input devices and to 0 for output devices.\n\
-@deftypefnx{Loadable Function} @var{id} = audiodevinfo(@var{IO}, @var{rate},\
+@end deftypefn\n\
+\n\
+@deftypefn{Loadable Function} @var{id} = audiodevinfo(@var{IO}, @var{rate},\
  @var{bits}, @var{chans})\n\
 \n\
 Returns the id of the first device that supports playback or recording\
  using the specified sampling rate (@var{rate}), bits per sample (@var{bits})\
  and number of channels (@var{chans}). Set @var{IO} to 1 for input devices\
  ant to 0 for output devices.\
-@deftypefnx{Loadable Function} @var{supports} = audiodevinfo(@var{IO}, @var{ID},\
+@end deftypefn\n\
+\n\
+@deftypefn{Loadable Function} @var{supports} = audiodevinfo(@var{IO}, @var{ID},\
  @var{rate}, @var{bits}, @var{chans})\n\
 \n\
 Returns 1 if the device bearing @var{ID} supports specified sampling rate\
  (@var{rate}), bits per sample (@var{bits}) and number of channels (@var{chans}).\
  Returns 0 otherwise. Set @var{IO} to 1 for input devices and to 0 for output\
  devices.\n\
 @end deftypefn"
 )
diff --git a/libinterp/dldfcn/audioread.cc b/libinterp/dldfcn/audioread.cc
--- a/libinterp/dldfcn/audioread.cc
+++ b/libinterp/dldfcn/audioread.cc
@@ -7,29 +7,32 @@
 DEFUN_DLD(audioread, args, ,
 "-*- texinfo -*-\n\
 @deftypefn{Loadable Function} [@var{y}, @var{Fs}] = audioread(@var{filename})\n\
 \n\
 Load an audio file that is specified by @var{filename}. It will be loaded in to \
 a column matrix with as many rows as there are audio frames and as many columns \
 as there are channels in the file. Sampling rate will be stored in @var{Fs}. \
 \n\
-@deftypefnx{Loadable Function} [@var{y}, @var{Fs}] = audioread(@var{filename}, @var{samples})\n\
+@end deftypefn\n\
+@deftypefn{Loadable Function} [@var{y}, @var{Fs}] = audioread(@var{filename}, @var{samples})\n\
 \n\
 Read a specified range of samples from a file specified by @var{filename}. \
 Argument @var{samples} is a vector with two values specifying starting frame \
 and ending frame. \
 \n\
-@deftypefnx{Loadable Function} [@var{y}, @var{Fs}] = audioread(@var{filename}, @var{dataType})\n\
+@end deftypefn\n\
+@deftypefn{Loadable Function} [@var{y}, @var{Fs}] = audioread(@var{filename}, @var{dataType})\n\
 \n\
 Read a file and return an array of specified type. If @var{dataType} is \"native\" then \
 an array of fixed width integer type will be returned depending on how data is stored \
 in the audio file. If @var{dataType} is \"double\" a double matrix will be returned. \
 \n\
-@deftypefnx{Loadable Function} [@var{y}, @var{Fs}] = audioread(@var{filename}, @var{samples}, @var{dataType})\n\
+@end deftypefn\n\
+@deftypefn{Loadable Function} [@var{y}, @var{Fs}] = audioread(@var{filename}, @var{samples}, @var{dataType})\n\
 \n\
 Read a file and return a specified range of frames in an array of specified type. \
 \n\
 @end deftypefn"
 )
 {
   octave_value_list retval;
 #ifdef HAVE_SNDFILE
diff --git a/libinterp/dldfcn/audiowrite.cc b/libinterp/dldfcn/audiowrite.cc
--- a/libinterp/dldfcn/audiowrite.cc
+++ b/libinterp/dldfcn/audiowrite.cc
@@ -39,17 +39,18 @@ static void fill_extension_table(std::ma
   
 DEFUN_DLD(audiowrite, args, ,
 "-*- texinfo -*-\n\
 @deftypefn{Loadable Function} audiowrite(@var{filename}, @var{y}, @var{Fs})\n\
 \n\
 Write audio data from the matrix @var{y} to a file specified by @var{filename}, \
 file format will be determined by the file extension.\
 \n\
-@deftypefnx{Loadable Function} audiowrite(@var{filename}, @var{y}, @var{Fs}, @var{Name}, @var{Value})\n\
+@end deftypefn\n\
+@deftypefn{Loadable Function} audiowrite(@var{filename}, @var{y}, @var{Fs}, @var{Name}, @var{Value})\n\
 \n\
 Lets you specify additional parameters when writing the file. Those parameters are given in the table below:\n\
 \n\
 @table @samp\n\
 @item BitsPerSample\n\
 Number of bits per sample, valid values are 8, 16, 24 and 32. Default is 16.\n\
 @item BitRate\n\
 Valid argument name, but ignored. Left for compatibility with MATLAB.\n\
