# HG changeset patch
# User Rik <octave@nomad.inbox5.com>
# Date 1310668824 25200
#      Thu Jul 14 11:40:24 2011 -0700
# Branch stable
# Node ID 4e70c4e61c24bf978b0f4853f9f5e2ff1e510b51
# Parent  944cf42c699e32978009df6ab1baea9284795b8c
strfind.cc: Fix infinite loop when pattern contains 255 (Bug #33670).

strfind.cc: Increase match table size by 1 to account for possible
UCHAR_MAX of 255.

diff --git a/src/DLD-FUNCTIONS/strfind.cc b/src/DLD-FUNCTIONS/strfind.cc
--- a/src/DLD-FUNCTIONS/strfind.cc
+++ b/src/DLD-FUNCTIONS/strfind.cc
@@ -45,17 +45,17 @@ along with Octave; see the file COPYING.
 // http://www-igm.univ-mlv.fr/~lecroq/string/node19.html
 static void
 qs_preprocess (const Array<char>& needle,
                octave_idx_type table[TABSIZE])
 {
   const char *x = needle.data ();
   octave_idx_type m = needle.numel ();
 
-   for (octave_idx_type i = 0; i < UCHAR_MAX; i++)
+   for (octave_idx_type i = 0; i < TABSIZE; i++)
       table[i] = m + 1;
    for (octave_idx_type i = 0; i < m; i++)
       table[ORD(x[i])] = m - i;
 }
 
 
 static Array<octave_idx_type>
 qs_search (const Array<char>& needle,
@@ -198,17 +198,17 @@ strfind (@{\"abababa\", \"bebebe\", \"ab
     }
 
   if (nargin == 2)
     {
       octave_value argstr = args(0), argpat = args(1);
       if (argpat.is_string ())
         {
           Array<char> needle = argpat.char_array_value ();
-          OCTAVE_LOCAL_BUFFER (octave_idx_type, table, UCHAR_MAX);
+          OCTAVE_LOCAL_BUFFER (octave_idx_type, table, TABSIZE);
           qs_preprocess (needle, table);
 
           if (argstr.is_string ())
             retval = octave_value (qs_search (needle, argstr.char_array_value (),
                                               table, overlaps),
                                    true, true);
           else if (argstr.is_cell ())
             {
@@ -362,17 +362,17 @@ done for each element and a cell array i
   if (nargin == 3)
     {
       octave_value argstr = args(0), argpat = args(1), argrep = args(2);
       if (argpat.is_string () && argrep.is_string ())
         {
           const Array<char> pat = argpat.char_array_value ();
           const Array<char> rep = argrep.char_array_value ();
 
-          OCTAVE_LOCAL_BUFFER (octave_idx_type, table, UCHAR_MAX);
+          OCTAVE_LOCAL_BUFFER (octave_idx_type, table, TABSIZE);
           qs_preprocess (pat, table);
 
           if (argstr.is_string ())
             retval = qs_replace (argstr.char_array_value (), pat, rep, table, overlaps);
           else if (argstr.is_cell ())
             {
               const Cell argsc = argstr.cell_value ();
               Cell retc (argsc.dims ());
