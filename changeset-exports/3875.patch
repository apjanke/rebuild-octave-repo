# HG changeset patch
# User jwe
# Date 1015437580 0
#      Wed Mar 06 17:59:40 2002 +0000
# Node ID 09323fcea5ab324fd6a023f432204d1234cd4f45
# Parent  24bf1bcbba8a374e7a8a6cc1145209f9c024cdbd
[project @ 2002-03-06 17:59:40 by jwe]

diff --git a/src/Makefile.in b/src/Makefile.in
--- a/src/Makefile.in
+++ b/src/Makefile.in
@@ -85,17 +85,17 @@ INCLUDES := BaseSLList.h Cell.h DLList.h
 	oct-prcstrm.h oct-procbuf.h oct-stdstrm.h oct-stream.h \
 	oct-strstrm.h oct-lvalue.h oct.h ops.h pager.h parse.h \
 	pr-output.h procstream.h sighandlers.h siglist.h symtab.h \
 	sysdep.h token.h toplev.h unwind-prot.h utils.h \
 	variables.h version.h xdiv.h xpow.h $(OV_INCLUDES) $(PT_INCLUDES)
 
 TI_XSRC := Array-oc.cc Array-os.cc Array-sym.cc Array-tc.cc Map-fnc.cc \
 	Map-tc.cc SLList-expr.cc SLList-misc.cc SLList-plot.cc \
-	SLList-tc.cc SLList-tm.cc SLStack-i.cc SLStack-pc.cc \
+	SLList-tc.cc SLList-tm.cc SLStack-i.cc SLStack-ovl.cc SLStack-pc.cc \
 	SLStack-str.cc SLStack-sym.cc SLStack-tok.cc \
 	SLStack-ue.cc SLStack-ui.cc
 
 TI_SRC := $(addprefix TEMPLATE-INST/, $(TI_XSRC))
 
 OP_XSRC := op-b-b.cc op-bm-bm.cc op-chm.cc op-cm-cm.cc op-cm-cs.cc \
 	op-cm-m.cc op-cm-s.cc op-cs-cm.cc op-cs-cs.cc op-cs-m.cc \
 	op-cs-s.cc op-fil-b.cc op-fil-bm.cc op-fil-cm.cc op-fil-cs.cc \
diff --git a/src/ov-usr-fcn.cc b/src/ov-usr-fcn.cc
--- a/src/ov-usr-fcn.cc
+++ b/src/ov-usr-fcn.cc
@@ -236,22 +236,22 @@ clear_param_list (void *lst)
 {
   tree_parameter_list *tmp = static_cast<tree_parameter_list *> (lst);
 
   if (tmp)
     tmp->clear ();
 }
 
 static void
-clear_args_passed (void *fcn)
+restore_args_passed (void *fcn)
 {
   octave_user_function *tmp = static_cast<octave_user_function *> (fcn);
 
   if (tmp)
-    tmp->clear_args_passed ();
+    tmp->restore_args_passed ();
 }
 
 static void
 unprotect_function (void *sr_arg)
 {
   symbol_record *sr = static_cast<symbol_record *> (sr_arg);
   sr->unprotect ();
 }
@@ -318,26 +318,21 @@ octave_user_function::do_multi_index_op 
   // eval_undefined_error().
 
   unwind_protect_ptr (curr_sym_tab);
   curr_sym_tab = sym_tab;
 
   unwind_protect_ptr (curr_function);
   curr_function = this;
 
-  // XXX FIXME XXX -- ???
-  // unwind_protect_ptr (args_passed);
-
-  args_passed = args;
+  // Save and restore args passed for recursive calls.
 
-  // Force cache of arguments to be undefined when this function exits.
-  // Doing so decrements the reference counts on the values of local
-  // variables that are also named function parameters.
+  save_args_passed (args);
 
-  unwind_protect::add (::clear_args_passed, this);
+  unwind_protect::add (::restore_args_passed, this);
 
   string_vector arg_names = args.name_tags ();
 
   unwind_protect_int (num_args_passed);
   num_args_passed = nargin;
 
   unwind_protect_int (num_named_args);
   unwind_protect_int (curr_va_arg_number);
diff --git a/src/ov-usr-fcn.h b/src/ov-usr-fcn.h
--- a/src/ov-usr-fcn.h
+++ b/src/ov-usr-fcn.h
@@ -31,16 +31,18 @@ Software Foundation, 59 Temple Place - S
 
 #include <string>
 
 #include "comment-list.h"
 #include "oct-obj.h"
 #include "ov-fcn.h"
 #include "ov-typeinfo.h"
 
+#include "SLStack.h"
+
 class string_vector;
 
 class octave_value;
 class tree_parameter_list;
 class tree_statement_list;
 class tree_va_return_list;
 class tree_walker;
 class symbol_table;
@@ -110,18 +112,29 @@ public:
 
   void octave_vr_val (const octave_value& val);
 
   void stash_function_name (const std::string& s);
 
   std::string function_name (void)
     { return fcn_name; }
 
-  void clear_args_passed (void)
-    { args_passed = octave_value_list (); }
+  void save_args_passed (const octave_value_list& args)
+    {
+      if (call_depth > 1)
+	saved_args.push (args_passed);
+
+      args_passed = args;
+    }
+
+  void restore_args_passed (void)
+    {
+      if (! saved_args.empty ())
+	args_passed = saved_args.pop ();
+    }
 
   octave_value_list
   do_multi_index_op (int nargout, const octave_value_list& args);
 
   void traceback_error (void);
 
   tree_parameter_list *parameter_list (void) { return param_list; }
 
@@ -182,16 +195,19 @@ private:
   int call_depth;
 
   // The number of arguments that have names.
   int num_named_args;
 
   // The values that were passed as arguments.
   octave_value_list args_passed;
 
+  // A place to store the passed args for recursive calls.
+  SLStack<octave_value_list> saved_args;
+
   // The number of arguments passed in.
   int num_args_passed;
 
   // Used to keep track of the current offset into the list of va_args.
   int curr_va_arg_number;
 
   // The list of return values when an unspecified number can be
   // returned.
