# HG changeset patch
# User John Donoghue <john.donoghue@ieee.org>
# Date 1372638800 14400
#      Sun Jun 30 20:33:20 2013 -0400
# Node ID 944ade6e7f66cc0ea985e09b72a16941bd5989df
# Parent  1aebb613a5ac08d4c7ece9d041cd5a56e2a05f8e
Make main window copy and paste global for current focused window

* libgui/src/workspace-view.h, libgui/src/workspace-view.cc
  (workspace_view::copyClipboard): New function.

* libgui/src/qtinfo/webinfo.h, libgui/src/qtinfo/webinfo.cc
  (webinfo::pasteClipboard): New function.
  (webinfo::copyClipboard): New function.

* libgui/src/octave-dock-widget.h, libgui/src/octave-dock-widget.cc
  (octave_dock_widget::copyClipboard): New function.
  (octave_dock_widget::pasteClipboard): New function.
  (octave_dock_widget::focusWidget): New function.
  (octave_dock_widget::octave_dock_widget): Connect copy/paste to main window signals.

* libgui/src/main-window.cc
  (main_window::copyClipboard): process current directory copy if is focused.
  (main_window::pasteClipboard): process current directory paste if is focused.

* libgui/src/m-editor/file-editor.h, libgui/src/m-editor/file-editor.cc
  (file_editor::copyClipboard): New function.
  (file_editor::pasteClipboard): New function.

* libgui/src/history-dock-widget.h, libgui/src/history-dock-widget.cc
  (history_dock_widget::pasteClipboard): New function.
  (history_dock_widget::copyClipboard): New function.

* libgui/src/files-dock-widget.h, libgui/src/files-dock-widget.cc
  (files_dock_widget::copyClipboard): New function.
  (files_dock_widget::pasteClipboard): New function.

* libgui/src/documentation-dock-widget.h, libgui/src/documentation-dock-widget.cc
  (documentation_dock_widget::copyClipboard): New function.
  (documentation_dock_widget::pasteClipboard): New function.

* libgui/qterminal/libqterminal/win32/QWinTerminalImpl.h, libgui/qterminal/libqterminal/win32/QWinTerminalImpl.cc
  (QWinTerminalImpl::copyClipboard): dont copy unless is focused widget.
  (QWinTerminalImpl::pasteClipboard): dont paste unless is focused widget.

* libgui/qterminal/libqterminal/unix/TerminalView.h, libgui/qterminal/libqterminal/unix/TerminalView.cc
  (TerminalView::copyClipboard):  only copy is focused widget.
  (TerminalView::pasteClipboard):  only paste is focused widget.

diff --git a/libgui/qterminal/libqterminal/unix/TerminalView.cpp b/libgui/qterminal/libqterminal/unix/TerminalView.cpp
--- a/libgui/qterminal/libqterminal/unix/TerminalView.cpp
+++ b/libgui/qterminal/libqterminal/unix/TerminalView.cpp
@@ -2255,17 +2255,17 @@ void TerminalView::emitSelection(bool us
 
 void TerminalView::setSelection(const QString& t)
 {
   QApplication::clipboard()->setText(t, QClipboard::Selection);
 }
 
 void TerminalView::copyClipboard()
 {
-  if ( !_screenWindow )
+  if ( !_screenWindow || !hasFocus())
     return;
 
   QString text = _screenWindow->selectedText(_preserveLineBreaks);
 
   if (text.isEmpty ())
     {
       // FIXME -- interrupt is only appropriate here if CTRL-C is bound
       // to the copy action.  How can we determine that?
@@ -2273,17 +2273,20 @@ void TerminalView::copyClipboard()
       ::raise (SIGINT);
     }
   else
     QApplication::clipboard()->setText(text);
 }
 
 void TerminalView::pasteClipboard()
 {
-  emitSelection(false,false);
+  if(hasFocus ())
+    {
+      emitSelection(false,false);
+    }
 }
 
 void TerminalView::pasteSelection()
 {
   emitSelection(true,false);
 }
 
 /* ------------------------------------------------------------------------- */
diff --git a/libgui/qterminal/libqterminal/win32/QWinTerminalImpl.cpp b/libgui/qterminal/libqterminal/win32/QWinTerminalImpl.cpp
--- a/libgui/qterminal/libqterminal/win32/QWinTerminalImpl.cpp
+++ b/libgui/qterminal/libqterminal/win32/QWinTerminalImpl.cpp
@@ -1431,16 +1431,18 @@ void QWinTerminalImpl::setSize (int colu
   Q_UNUSED (columns);
   Q_UNUSED (lines);
 }
 
 //////////////////////////////////////////////////////////////////////////////
 
 void QWinTerminalImpl::copyClipboard (void)
 {
+  if(!hasFocus()) return;
+
   QClipboard *clipboard = QApplication::clipboard ();
 
   QString selection = d->getSelection ();
 
   if (selection.isEmpty ())
     {
       ::raise (SIGINT);
     }
@@ -1451,16 +1453,18 @@ void QWinTerminalImpl::copyClipboard (vo
       emit report_status_message (tr ("copied selection to clipboard"));
     }
 }
 
 //////////////////////////////////////////////////////////////////////////////
 
 void QWinTerminalImpl::pasteClipboard (void)
 {
+  if(!hasFocus()) return;
+
   QString text = QApplication::clipboard()->text (QClipboard::Clipboard);
 
   if (! text.isEmpty ())
     sendText (text);
 }
 
 
 //////////////////////////////////////////////////////////////////////////////
diff --git a/libgui/src/documentation-dock-widget.cc b/libgui/src/documentation-dock-widget.cc
--- a/libgui/src/documentation-dock-widget.cc
+++ b/libgui/src/documentation-dock-widget.cc
@@ -32,8 +32,19 @@ documentation_dock_widget::documentation
   setObjectName ("DocumentationDockWidget");
   setWindowIcon (QIcon (":/actions/icons/logo.png"));
   set_title (tr ("Documentation"));
   setStatusTip (tr ("See the documentation for help."));
 
   _webinfo = new webinfo (this);
   setWidget (_webinfo);
 }
+
+void
+documentation_dock_widget::copyClipboard ()
+{
+  _webinfo->copyClipboard ();
+}
+void
+documentation_dock_widget::pasteClipboard ()
+{
+  _webinfo->pasteClipboard ();
+}
diff --git a/libgui/src/documentation-dock-widget.h b/libgui/src/documentation-dock-widget.h
--- a/libgui/src/documentation-dock-widget.h
+++ b/libgui/src/documentation-dock-widget.h
@@ -30,14 +30,18 @@ along with Octave; see the file COPYING.
 class documentation_dock_widget : public octave_dock_widget
 {
   Q_OBJECT
 
 public:
 
   documentation_dock_widget (QWidget *parent = 0);
 
+protected slots:
+  void copyClipboard ();
+  void pasteClipboard ();
+
 private:
 
   webinfo *_webinfo;
 };
 
 #endif // DOCUMENTATIONDOCKWIDGET_H
diff --git a/libgui/src/files-dock-widget.cc b/libgui/src/files-dock-widget.cc
--- a/libgui/src/files-dock-widget.cc
+++ b/libgui/src/files-dock-widget.cc
@@ -703,8 +703,40 @@ void files_dock_widget::process_set_curr
   emit displayed_directory_changed (dir);
 }
 
 void files_dock_widget::process_find_files(const QString & dir)
 {
   emit find_files_signal(dir);
 }
 
+void
+files_dock_widget::copyClipboard ()
+{
+  if (_file_tree_view->hasFocus ())
+    contextmenu_copy_selection (true);
+  if (_current_directory->hasFocus ())
+    {
+      QClipboard *clipboard = QApplication::clipboard ();
+
+      QLineEdit * edit = _current_directory->lineEdit ();
+      if (edit && edit->hasSelectedText ())
+        {
+          clipboard->setText (edit->selectedText ());
+        }
+    }
+}
+
+void
+files_dock_widget::pasteClipboard ()
+{
+  if (_current_directory->hasFocus ())
+    {
+      QClipboard *clipboard = QApplication::clipboard ();
+      QString str =  clipboard->text ();
+      QLineEdit * edit = _current_directory->lineEdit ();
+      if (edit && str.length () > 0) 
+        edit->insert (str);
+    }
+}
+
+
+
diff --git a/libgui/src/files-dock-widget.h b/libgui/src/files-dock-widget.h
--- a/libgui/src/files-dock-widget.h
+++ b/libgui/src/files-dock-widget.h
@@ -98,16 +98,20 @@ private slots:
 
   /* popdown menu options */
   void popdownmenu_newfile(bool);
   void popdownmenu_newdir(bool);
   void popdownmenu_search_dir (bool);
   void popdownmenu_findfiles (bool);
   void popdownmenu_home (bool);
 
+  /* from octave_doc_widget */
+  void copyClipboard ();
+  void pasteClipboard ();
+
 signals:
 
   /** Emitted, whenever the user requested to open a file. */
   void open_file (const QString& fileName);
 
   /** Emitted, whenever the currently displayed directory changed. */
   void displayed_directory_changed (const QString& dir);
 
diff --git a/libgui/src/history-dock-widget.cc b/libgui/src/history-dock-widget.cc
--- a/libgui/src/history-dock-widget.cc
+++ b/libgui/src/history-dock-widget.cc
@@ -164,8 +164,33 @@ history_dock_widget::append_history (con
   _history_list_view->scrollToBottom ();
 }
 
 void
 history_dock_widget::clear_history (void)
 {
   _history_model->setStringList (QStringList ());
 }
+
+void
+history_dock_widget::copyClipboard ()
+{
+  if(_history_list_view->hasFocus())
+    handle_contextmenu_copy(true);
+  if(_filter_line_edit->hasFocus () && _filter_line_edit->hasSelectedText ())
+    {
+      QClipboard *clipboard = QApplication::clipboard ();
+      clipboard->setText ( _filter_line_edit->selectedText ());
+    }
+}
+
+void
+history_dock_widget::pasteClipboard ()
+{
+  if(_filter_line_edit->hasFocus ())
+  {
+     QClipboard *clipboard = QApplication::clipboard ();
+     QString str =  clipboard->text ();
+     if (str.length() > 0)
+       _filter_line_edit->insert (str);
+  } 
+}
+
diff --git a/libgui/src/history-dock-widget.h b/libgui/src/history-dock-widget.h
--- a/libgui/src/history-dock-widget.h
+++ b/libgui/src/history-dock-widget.h
@@ -57,16 +57,19 @@ signals:
 private slots:
 
   void handle_double_click (QModelIndex modelIndex);
   void handle_contextmenu_copy(bool flag);
   void handle_contextmenu_evaluate(bool flag);
   void handle_contextmenu_create_script(bool flag);
   void ctxMenu(const QPoint &pos);
 
+  void copyClipboard ();
+  void pasteClipboard ();
+
 private:
 
   void construct ();
   QListView *_history_list_view;
   QLineEdit *_filter_line_edit;
   QSortFilterProxyModel _sort_filter_proxy_model;
 
   /** Stores the current history_model. */
diff --git a/libgui/src/m-editor/file-editor.cc b/libgui/src/m-editor/file-editor.cc
--- a/libgui/src/m-editor/file-editor.cc
+++ b/libgui/src/m-editor/file-editor.cc
@@ -1166,9 +1166,30 @@ file_editor::add_file_editor_tab (file_e
 
   connect (this, SIGNAL (fetab_do_breakpoint_marker (bool, const QWidget*,
                                                      int)),
            f, SLOT (do_breakpoint_marker (bool, const QWidget*, int)));
 
   _tab_widget->setCurrentWidget (f);
 }
 
+void
+file_editor::copyClipboard ()
+{
+  QWidget * foc_w = focusWidget ();
+
+  if(foc_w && foc_w->inherits ("octave_qscintilla"))
+  {
+    request_copy ();
+  }
+}
+void
+file_editor::pasteClipboard ()
+{
+  QWidget * foc_w = focusWidget ();
+
+  if(foc_w && foc_w->inherits ("octave_qscintilla"))
+  {
+    request_paste ();
+  }
+}
+
 #endif
diff --git a/libgui/src/m-editor/file-editor.h b/libgui/src/m-editor/file-editor.h
--- a/libgui/src/m-editor/file-editor.h
+++ b/libgui/src/m-editor/file-editor.h
@@ -147,16 +147,20 @@ public slots:
   void handle_update_breakpoint_marker_request (bool insert,
                                                 const QString& file, int line);
 
   void handle_edit_file_request (const QString& file);
 
   // Tells the editor to react on changed settings.
   void notice_settings (const QSettings *settings);
 
+protected slots:
+  void copyClipboard ();
+  void pasteClipboard ();
+
 private slots:
 
   void request_open_file (const QString& fileName, int line = -1,
                           bool debug_pointer = false,
                           bool breakpoint_marker = false, bool insert = true);
 
 private:
 
diff --git a/libgui/src/main-window.cc b/libgui/src/main-window.cc
--- a/libgui/src/main-window.cc
+++ b/libgui/src/main-window.cc
@@ -608,23 +608,44 @@ main_window::connect_visibility_changed 
   editor_window->connect_visibility_changed ();
 #endif
   workspace_window->connect_visibility_changed ();
 }
 
 void
 main_window::copyClipboard (void)
 {
-  emit copyClipboard_signal ();
+  if (_current_directory_combo_box->hasFocus ())
+    {
+      QLineEdit * edit = _current_directory_combo_box->lineEdit ();
+      if (edit && edit->hasSelectedText ())
+        {
+          QClipboard *clipboard = QApplication::clipboard ();
+          clipboard->setText (edit->selectedText ()); 
+        }
+    } 
+  else
+    emit copyClipboard_signal ();
 }
 
 void
 main_window::pasteClipboard (void)
 {
-  emit pasteClipboard_signal ();
+  if (_current_directory_combo_box->hasFocus ())
+    {
+      QLineEdit * edit = _current_directory_combo_box->lineEdit ();
+      QClipboard *clipboard = QApplication::clipboard ();
+      QString str =  clipboard->text ();
+      if (edit && str.length () > 0)
+        {
+          edit->insert (str); 
+        }
+    } 
+  else
+    emit pasteClipboard_signal ();
 }
 
 // Connect the signals emitted when the Octave thread wants to create
 // a dialog box of some sort.  Perhaps a better place for this would be
 // as part of the QUIWidgetCreator class.  However, mainWindow currently
 // is not a global variable and not accessible for connecting.
 
 void
diff --git a/libgui/src/octave-dock-widget.cc b/libgui/src/octave-dock-widget.cc
--- a/libgui/src/octave-dock-widget.cc
+++ b/libgui/src/octave-dock-widget.cc
@@ -16,17 +16,17 @@ FITNESS FOR A PARTICULAR PURPOSE.  See t
 for more details.
 
 You should have received a copy of the GNU General Public License
 along with Octave; see the file COPYING.  If not, see
 <http://www.gnu.org/licenses/>.
 
 */
 
-
+#include <QApplication>
 #include <QToolBar>
 #include <QToolButton>
 #include <QAction>
 #include <QHBoxLayout>
 #include <QLabel>
 #include <QSettings>
 
 #include "resource-manager.h"
@@ -71,16 +71,19 @@ octave_dock_widget::octave_dock_widget (
   h_layout->addWidget (close_button);
   h_layout->setSpacing (0);
   h_layout->setContentsMargins (6,0,0,0);
 
   QWidget *title_widget = new QWidget ();
   title_widget->setLayout (h_layout);
   setTitleBarWidget (title_widget);
 
+  // copy & paste handling
+  connect (p, SIGNAL (copyClipboard_signal ()), this, SLOT (copyClipboard ()));
+  connect (p, SIGNAL (pasteClipboard_signal()), this, SLOT (pasteClipboard ()));
 }
 
 octave_dock_widget::~octave_dock_widget ()
 {
   // save state of this dock-widget
   bool floating = false;
   bool visible;
   QString name = objectName ();
@@ -188,8 +191,16 @@ octave_dock_widget::change_floating (boo
 // slot for hiding the widget
 void
 octave_dock_widget::change_visibility (bool)
 {
   setVisible (false);
   emit active_changed (false);
 }
 
+// get focus widget
+QWidget *
+octave_dock_widget::focusWidget ()
+{
+    QWidget * w = QApplication::focusWidget ();
+    if(w && w->focusProxy ()) w = w->focusProxy ();
+    return w;
+}
diff --git a/libgui/src/octave-dock-widget.h b/libgui/src/octave-dock-widget.h
--- a/libgui/src/octave-dock-widget.h
+++ b/libgui/src/octave-dock-widget.h
@@ -53,16 +53,17 @@ signals:
 protected:
 
   virtual void closeEvent (QCloseEvent *e)
   {
     emit active_changed (false);
     QDockWidget::closeEvent (e);
   }
 
+  QWidget * focusWidget();
 
 public slots:
 
   virtual void focus (void)
   {
     if (! isVisible ())
       setVisible (true);
 
@@ -86,16 +87,23 @@ public slots:
 protected slots:
 
   /** Slot to steer changing visibility from outside. */
   virtual void handle_visibility_changed (bool visible)
   {
     if (visible)
       emit active_changed (true);
   }
+  /** slots to handle copy & paste */
+  virtual void copyClipboard ()
+  {
+  }
+  virtual void pasteClipboard ()
+  {
+  }
 
 private slots:
 
   void change_floating (bool);
   void change_visibility (bool);
 
 private:
 
diff --git a/libgui/src/qtinfo/webinfo.cc b/libgui/src/qtinfo/webinfo.cc
--- a/libgui/src/qtinfo/webinfo.cc
+++ b/libgui/src/qtinfo/webinfo.cc
@@ -26,16 +26,18 @@ along with Octave; see the file COPYING.
 
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
 #include "webinfo.h"
 #include <QVBoxLayout>
 #include <QHBoxLayout>
+#include <QApplication>
+#include <QClipboard>
 
 #include "file-ops.h"
 #include "help.h"
 #include "defaults.h"
 
 
 webinfo::webinfo (QWidget *p)
   : QWidget (p)
@@ -213,8 +215,35 @@ webinfo::zoom_in ()
 
 void
 webinfo::zoom_out ()
 {
   _font_web.setPointSize (_font_web.pointSize() - 1);
   _text_browser->setFont (_font_web);
 }
 
+void
+webinfo::copyClipboard ()
+{
+  if (_search_line_edit->hasFocus () && _search_line_edit->hasSelectedText ())
+    {
+      QClipboard *clipboard = QApplication::clipboard ();
+
+      clipboard->setText (_search_line_edit->selectedText ());
+    }
+  if (_text_browser->hasFocus ())
+    {
+      _text_browser->copy ();
+    }
+}
+
+void
+webinfo::pasteClipboard ()
+{
+  if (_search_line_edit->hasFocus ())
+    {
+      QClipboard *clipboard = QApplication::clipboard ();
+      QString str =  clipboard->text ();
+      if (str.length () > 0) 
+        _search_line_edit->insert (str);
+    }
+}
+
diff --git a/libgui/src/qtinfo/webinfo.h b/libgui/src/qtinfo/webinfo.h
--- a/libgui/src/qtinfo/webinfo.h
+++ b/libgui/src/qtinfo/webinfo.h
@@ -44,16 +44,19 @@ public:
 public slots:
   void link_clicked (const QUrl& link);
   void current_tab_changed (int index);
   void close_tab (int index);
   void search ();
   void zoom_in ();
   void zoom_out ();
 
+  void copyClipboard ();
+  void pasteClipboard ();
+
 private:
   QTextBrowser        *_text_browser;
   QTabBar             *_tab_bar;
   QStackedWidget      *_stacked_widget;
   QLineEdit           *_search_line_edit;
   QCheckBox           *_search_check_box;
   QToolButton         *_zoom_in_button;
   QToolButton         *_zoom_out_button;
diff --git a/libgui/src/workspace-view.cc b/libgui/src/workspace-view.cc
--- a/libgui/src/workspace-view.cc
+++ b/libgui/src/workspace-view.cc
@@ -261,8 +261,16 @@ workspace_view::notice_settings (const Q
   for (int i = 0; i < resource_manager::storage_class_chars ().length (); i++)
     {
       tool_tip +=  QString ("<div style=\"background-color:%1;color:#000000\">%2</div>")
                .arg (_model->storage_class_color (i).name ())
                .arg (resource_manager::storage_class_names ().at (i));
     }
   setToolTip (tool_tip);
 }
+
+void
+workspace_view::copyClipboard ()
+{
+  if (view->hasFocus ())
+    handle_contextmenu_copy ();
+}
+
diff --git a/libgui/src/workspace-view.h b/libgui/src/workspace-view.h
--- a/libgui/src/workspace-view.h
+++ b/libgui/src/workspace-view.h
@@ -64,16 +64,18 @@ protected slots:
   void handle_contextmenu_copy (void);
   void handle_contextmenu_rename (void);
   void handle_contextmenu_disp (void);
   void handle_contextmenu_plot (void);
   void handle_contextmenu_stem (void);
 
   void handle_model_changed (void);
 
+  void copyClipboard();
+
 private:
 
   void relay_contextmenu_command (const QString& cmdname);
 
   QTableView *view;
   int view_previous_row_count;
   workspace_model *_model;
 };
