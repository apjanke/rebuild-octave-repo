# HG changeset patch
# User Lachlan Andrew <lachlanbis@gmail.com>
# Date 1460728977 -36000
#      Sat Apr 16 00:02:57 2016 +1000
# Node ID 4c080cbc4ef946449deec8872e2a39bc6ea9633a
# Parent  cce4eb3f6f7cfcab5aacc9e9fbd47c56f47f279c
Make source() not re-parse a file if it is already loaded (bug #33411).

* oct-parse.cc (source_file): Check if file name is already in the
  symbol table or in the path.
  If so, and it is for the same full path, skip parsing.
  Throw an error if the file is not a valid script or function

* oct-parse.cc (Fsource): Document the second "context" parameter.

diff --git a/libinterp/parse-tree/oct-parse.in.yy b/libinterp/parse-tree/oct-parse.in.yy
--- a/libinterp/parse-tree/oct-parse.in.yy
+++ b/libinterp/parse-tree/oct-parse.in.yy
@@ -4590,45 +4590,89 @@ source_file (const std::string& file_nam
         octave_call_stack::goto_base_frame ();
       else
         error ("source: context must be \"caller\" or \"base\"");
 
       frame.add_fcn (octave_call_stack::pop);
     }
 
   octave_function *fcn = 0;
-
-  try
+  // Don't delete a function already in symbol_table
+  bool delete_fcn = false;
+
+  // Find symbol name that would be in symbol_table, if it were loaded.
+  size_t dir_end = file_name.find_last_of (file_ops::dir_sep_chars ());
+  dir_end = (dir_end == std::string::npos) ? 0 : dir_end + 1;
+
+  size_t extension = file_name.find_last_of ('.');
+  if (extension == std::string::npos)
+    extension = file_name.length ();
+
+  std::string symbol = file_name.substr (dir_end, extension - dir_end);
+  std::string full_name = octave_canonicalize_file_name (file_name);
+
+  // Check if this file is already loaded (or in the path)
+  octave_value loaded_sym = symbol_table::find (symbol);
+  if (loaded_sym.is_function ())
     {
-      fcn = parse_fcn_file (file_full_name, file_name, "", "",
-                            require_file, true, false, false, warn_for);
+      fcn = loaded_sym.function_value ();
+      if (fcn)
+        {
+          if (octave_canonicalize_file_name (fcn->fcn_file_name ())
+              == full_name)
+            delete_fcn = true;
+          else
+            fcn = 0;             // wrong file, so load it below
+        }
     }
-  catch (octave_execution_exception& e)
-    {
-      error (e, "source: error sourcing file '%s'", file_full_name.c_str ());
-    }
-
-  if (fcn && fcn->is_user_script ())
+
+  // If no symbol of this name, or the symbol is for a different file, load
+  if (! fcn)
     {
-      octave_value_list args;
-
-      if (verbose)
+      try
         {
-          std::cout << "executing commands from " << file_full_name << " ... ";
-          reading_startup_message_printed = true;
-          std::cout.flush ();
+          fcn = parse_fcn_file (file_full_name, file_name, "", "",
+                                require_file, true, false, false, warn_for);
+        }
+      catch (octave_execution_exception& e)
+        {
+          error (e, "source: error sourcing file '%s'",
+                 file_full_name.c_str ());
         }
-
-      fcn->do_multi_index_op (0, args);
-
-      if (verbose)
-        std::cout << "done." << std::endl;
-
-      delete fcn;
+    }
+
+  // Return or error if we don't have a valid script
+  if (! fcn)
+    return;
+
+  if (! fcn->is_user_code ())
+    {
+      if (delete_fcn)
+        delete fcn;
+      error ("source: %s is not a script", full_name.c_str ());
     }
+
+  // Parameter checking is over.  Now run.
+  octave_value_list args;
+
+  if (verbose)
+    {
+      std::cout << "executing commands from " << full_name << " ... ";
+      reading_startup_message_printed = true;
+      std::cout.flush ();
+    }
+
+  fcn->do_multi_index_op (0, args);
+
+  if (verbose)
+    std::cout << "done." << std::endl;
+
+  // Delete scripts not on the path, so they don't shadow ones that are.
+  if (delete_fcn)
+    delete fcn;
 }
 
 DEFUN (mfilename, args, ,
   "-*- texinfo -*-\n\
 @deftypefn  {} {} mfilename ()\n\
 @deftypefnx {} {} mfilename (\"fullpath\")\n\
 @deftypefnx {} {} mfilename (\"fullpathext\")\n\
 Return the name of the currently executing file.\n\
@@ -4684,21 +4728,27 @@ the filename and the extension.\n\
         retval = (dpos != std::string::npos) ? fname.substr (dpos+1) : fname;
     }
 
   return retval;
 }
 
 DEFUN (source, args, ,
   "-*- texinfo -*-\n\
-@deftypefn {} {} source (@var{file})\n\
+@deftypefn  {} {} source (@var{file})\n\
+@deftypefnx {} {} source (@var{file}, @var{context})\n\
 Parse and execute the contents of @var{file}.\n\
 \n\
-This is equivalent to executing commands from a script file, but without\n\
-requiring the file to be named @file{@var{file}.m}.\n\
+Without specifying @var{context}, this is equivalent to executing commands\n\
+from a script file, but without requiring the file to be named\n\
+@file{@var{file}.m} or to be on the execution path.\n\
+\n\
+Instead of the current context, the script may be executed in either the\n\
+context of the function that called the present function\n\
+(@qcode{\"caller\"}), or the top-level context (@qcode{\"base\"}).\n\
 @seealso{run}\n\
 @end deftypefn")
 {
   octave_value_list retval;
 
   int nargin = args.length ();
 
   if (nargin < 1 || nargin > 2)
