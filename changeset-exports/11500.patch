# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1294904887 18000
#      Thu Jan 13 02:48:07 2011 -0500
# Node ID 7aeb4eb7403ff633ea39c9e46f4265e9a2d0880f
# Parent  8f23b6757225d842296be594eb20fbb3c5bb2024
cmd-hist.h, cmd-hist.cc: sprinkle with const

diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,12 @@
+2011-01-13  John W. Eaton  <jwe@octave.org>
+
+	* cmd-hist.h, cmd-hist.cc: Sprinkle with const.
+
 2011-01-13  John W. Eaton  <jwe@octave.org>
 
 	* CmplxCHOL.h (ComplexCHOL::ComplexCHOL): Initialize all data
 	members in constructor initialization lists.
 	* CmplxGEPBAL.h (ComplexGEPBALANCE::ComplexGEPBALANCE): Likewise.
 	* CmplxHESS.h (ComplexHESS::ComplexHESS): Likewise.
 	* CmplxSCHUR.h, CmplxSCHUR.cc (ComplexSCHUR::ComplexSCHUR): Likewise.
 	* CmplxSVD.h (ComplexSVD::ComplexSVD): Likewise.
diff --git a/liboctave/cmd-hist.cc b/liboctave/cmd-hist.cc
--- a/liboctave/cmd-hist.cc
+++ b/liboctave/cmd-hist.cc
@@ -60,49 +60,49 @@ public:
     : command_history (), mark (0) { }
 
   ~gnu_history (void) { }
 
   void do_add (const std::string&);
 
   void do_remove (int);
 
-  int do_where (void);
+  int do_where (void) const;
 
-  int do_length (void);
+  int do_length (void) const;
 
-  int do_max_input_history (void);
+  int do_max_input_history (void) const;
 
-  int do_base (void);
+  int do_base (void) const;
 
-  int do_current_number (void);
+  int do_current_number (void) const;
 
   void do_stifle (int);
 
   int do_unstifle (void);
 
-  int do_is_stifled (void);
+  int do_is_stifled (void) const;
 
   void do_set_mark (int);
 
   int do_goto_mark (void);
 
   void do_read (const std::string&, bool);
 
   void do_read_range (const std::string&, int, int, bool);
 
-  void do_write (const std::string&);
+  void do_write (const std::string&) const;
 
   void do_append (const std::string&);
 
-  void do_truncate_file (const std::string&, int);
+  void do_truncate_file (const std::string&, int) const;
 
-  string_vector do_list (int, bool);
+  string_vector do_list (int, bool) const;
 
-  std::string do_get_entry (int);
+  std::string do_get_entry (int) const;
 
   void do_replace_entry (int, const std::string&);
 
   void do_clean_up_and_save (const std::string&, int);
 
 private:
 
   int mark;
@@ -123,41 +123,41 @@ gnu_history::do_add (const std::string& 
 
 void
 gnu_history::do_remove (int n)
 {
   ::octave_remove_history (n);
 }
 
 int
-gnu_history::do_where (void)
+gnu_history::do_where (void) const
 {
   return ::octave_where_history ();
 }
 
 int
-gnu_history::do_length (void)
+gnu_history::do_length (void) const
 {
   return ::octave_history_length ();
 }
 
 int
-gnu_history::do_max_input_history (void)
+gnu_history::do_max_input_history (void) const
 {
   return ::octave_max_input_history ();
 }
 
 int
-gnu_history::do_base (void)
+gnu_history::do_base (void) const
 {
   return ::octave_history_base ();
 }
 
 int
-gnu_history::do_current_number (void)
+gnu_history::do_current_number (void) const
 {
   return (xsize > 0) ? do_base () + do_where () : -1;
 }
 
 void
 gnu_history::do_stifle (int n)
 {
   ::octave_stifle_history (n);
@@ -165,17 +165,17 @@ gnu_history::do_stifle (int n)
 
 int
 gnu_history::do_unstifle (void)
 {
   return ::octave_unstifle_history ();
 }
 
 int
-gnu_history::do_is_stifled (void)
+gnu_history::do_is_stifled (void) const
 {
   return ::octave_history_is_stifled ();
 }
 
 void
 gnu_history::do_set_mark (int n)
 {
   mark = n;
@@ -244,17 +244,17 @@ gnu_history::do_read_range (const std::s
           ::octave_using_history ();
         }
     }
   else
     error ("gnu_history::read_range: missing file name");
 }
 
 void
-gnu_history::do_write (const std::string& f_arg)
+gnu_history::do_write (const std::string& f_arg) const
 {
   if (initialized)
     {
       std::string f = f_arg;
 
       if (f.empty ())
         f = xfile;
 
@@ -311,45 +311,45 @@ gnu_history::do_append (const std::strin
               else
                 error ("gnu_history::append: missing file name");
             }
         }
     }
 }
 
 void
-gnu_history::do_truncate_file (const std::string& f_arg, int n)
+gnu_history::do_truncate_file (const std::string& f_arg, int n) const
 {
   if (initialized)
     {
       std::string f = f_arg;
 
       if (f.empty ())
         f = xfile;
 
       if (! f.empty ())
         ::octave_history_truncate_file (f.c_str (), n);
       else
         error ("gnu_history::truncate_file: missing file name");
     }
 }
 
 string_vector
-gnu_history::do_list (int limit, bool number_lines)
+gnu_history::do_list (int limit, bool number_lines) const
 {
   string_vector retval;
 
   if (limit)
     retval = ::octave_history_list (limit, number_lines);
 
   return retval;
 }
 
 std::string
-gnu_history::do_get_entry (int n)
+gnu_history::do_get_entry (int n) const
 {
   std::string retval;
 
   char *line = ::octave_history_get (do_base () + n);
 
   if (line)
     retval = line;
 
@@ -760,86 +760,86 @@ command_history::do_file (void)
 
 void
 command_history::do_set_size (int n)
 {
   xsize = n;
 }
 
 int
-command_history::do_size (void)
+command_history::do_size (void) const
 {
   return xsize;
 }
 
 void
 command_history::do_ignore_entries (bool flag)
 {
   ignoring_additions = flag;
 }
 
 bool
-command_history::do_ignoring_entries (void)
+command_history::do_ignoring_entries (void) const
 {
   return ignoring_additions;
 }
 
 void
 command_history::do_add (const std::string&)
 {
 }
 
 void
 command_history::do_remove (int)
 {
 }
 
 int
-command_history::do_where (void)
+command_history::do_where (void) const
 {
   return 0;
 }
 
 int
-command_history::do_length (void)
+command_history::do_length (void) const
 {
   return 0;
 }
 
 int
-command_history::do_max_input_history (void)
+command_history::do_max_input_history (void) const
 {
   return 0;
 }
 
 int
-command_history::do_base (void)
+command_history::do_base (void) const
 {
   return 0;
 }
 
 int
-command_history::do_current_number (void)
+command_history::do_current_number (void) const
 {
   return (xsize > 0) ? do_base () + do_where () : -1;
 }
 
 void
 command_history::do_stifle (int)
 {
 }
 
 int
 command_history::do_unstifle (void)
 {
   return -1;
 }
 
 int
-command_history::do_is_stifled (void)
+command_history::do_is_stifled (void) const
 {
   return 0;
 }
 
 void
 command_history::do_set_mark (int)
 {
 }
@@ -860,17 +860,17 @@ command_history::do_read (const std::str
 void
 command_history::do_read_range (const std::string& f, int, int, bool)
 {
   if (f.empty ())
     error ("command_history::read_range: missing file name");
 }
 
 void
-command_history::do_write (const std::string& f_arg)
+command_history::do_write (const std::string& f_arg) const
 {
   if (initialized)
     {
       std::string f = f_arg;
 
       if (f.empty ())
         f = xfile;
 
@@ -898,38 +898,38 @@ command_history::do_append (const std::s
               if (f.empty ())
                 error ("command_history::append: missing file name");
             }
         }
     }
 }
 
 void
-command_history::do_truncate_file (const std::string& f_arg, int)
+command_history::do_truncate_file (const std::string& f_arg, int) const
 {
   if (initialized)
     {
       std::string f = f_arg;
 
       if (f.empty ())
         f = xfile;
 
       if (f.empty ())
         error ("command_history::truncate_file: missing file name");
     }
 }
 
 string_vector
-command_history::do_list (int, bool)
+command_history::do_list (int, bool) const
 {
   return string_vector ();
 }
 
 std::string
-command_history::do_get_entry (int)
+command_history::do_get_entry (int) const
 {
   return std::string ();
 }
 
 void
 command_history::do_replace_entry (int, const std::string&)
 {
 }
@@ -945,18 +945,18 @@ command_history::do_clean_up_and_save (c
         f = xfile;
 
       if (f.empty ())
         error ("command_history::clean_up_and_save: missing file name");
     }
 }
 
 void
-command_history::error (int err_num)
+command_history::error (int err_num) const
 {
   (*current_liboctave_error_handler) ("%s", gnulib::strerror (err_num));
 }
 
 void
-command_history::error (const std::string& s)
+command_history::error (const std::string& s) const
 {
   (*current_liboctave_error_handler) ("%s", s.c_str ());
 }
diff --git a/liboctave/cmd-hist.h b/liboctave/cmd-hist.h
--- a/liboctave/cmd-hist.h
+++ b/liboctave/cmd-hist.h
@@ -141,67 +141,67 @@ protected:
   virtual std::string do_histcontrol (void) const;
 
   virtual void do_initialize (bool, const std::string&, int, const std::string&);
 
   virtual bool do_is_initialized (void) const;
 
   virtual void do_set_size (int);
 
-  virtual int do_size (void);
+  virtual int do_size (void) const;
 
   virtual void do_ignore_entries (bool);
 
-  virtual bool do_ignoring_entries (void);
+  virtual bool do_ignoring_entries (void) const;
 
   virtual void do_add (const std::string&);
 
   virtual void do_remove (int);
 
-  virtual int do_where (void);
+  virtual int do_where (void) const;
 
-  virtual int do_length (void);
+  virtual int do_length (void) const;
 
-  virtual int do_max_input_history (void);
+  virtual int do_max_input_history (void) const;
 
-  virtual int do_base (void);
+  virtual int do_base (void) const;
 
-  virtual int do_current_number (void);
+  virtual int do_current_number (void) const;
 
   virtual void do_stifle (int);
 
   virtual int do_unstifle (void);
 
-  virtual int do_is_stifled (void);
+  virtual int do_is_stifled (void) const;
 
   virtual void do_set_mark (int);
 
   virtual int do_goto_mark (void);
 
   virtual void do_read (const std::string&, bool);
 
   virtual void do_read_range (const std::string&, int, int, bool);
 
-  virtual void do_write (const std::string&);
+  virtual void do_write (const std::string&) const;
 
   virtual void do_append (const std::string&);
 
-  virtual void do_truncate_file (const std::string&, int);
+  virtual void do_truncate_file (const std::string&, int) const;
 
-  virtual string_vector do_list (int, bool);
+  virtual string_vector do_list (int, bool) const;
 
-  virtual std::string do_get_entry (int);
+  virtual std::string do_get_entry (int) const;
 
   virtual void do_replace_entry (int, const std::string&);
 
   virtual void do_clean_up_and_save (const std::string&, int);
 
-  void error (int);
+  void error (int) const;
 
-  void error (const std::string&);
+  void error (const std::string&) const;
 
   // TRUE means we have initialized the history file name and number of
   // lines to save.
   bool initialized;
 
   // TRUE means we are ignoring new additions.
   bool ignoring_additions;
 
