# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1464376785 14400
#      Fri May 27 15:19:45 2016 -0400
# Node ID c9f8a7f7915ef1a8639715052ec1fcafcb467695
# Parent  d13883644981f51e49b447884aa9dc7930f71b1e
use forward declarations instead of including oct-inttypes.h where possible

* oct-inttypes-fwd.h: New file.
* liboctave/util/module.mk: Update.
* oct-inttypes.h, pr-output.h, Array.cc, dNDArray.h, fNDArray.h,
idx-vector.h, int16NDArray.h, int32NDArray.h, int64NDArray.h,
int8NDArray.h, uint16NDArray.h, uint32NDArray.h, uint64NDArray.h,
uint8NDArray.h, lo-mappers.h, data-conv.h: Include oct-inttypes-fwd.h
instead of oct-inttypes.h where possible.

diff --git a/libinterp/corefcn/pr-output.h b/libinterp/corefcn/pr-output.h
--- a/libinterp/corefcn/pr-output.h
+++ b/libinterp/corefcn/pr-output.h
@@ -23,16 +23,17 @@ along with Octave; see the file COPYING.
 #if ! defined (octave_pr_output_h)
 #define octave_pr_output_h 1
 
 #include "octave-config.h"
 
 #include <iosfwd>
 
 #include "oct-cmplx.h"
+#include "oct-inttypes-fwd.h"
 
 template <typename T> class Array;
 class ComplexMatrix;
 class FloatComplexMatrix;
 class ComplexDiagMatrix;
 class FloatComplexDiagMatrix;
 class ComplexNDArray;
 class FloatComplexNDArray;
@@ -46,19 +47,17 @@ class Range;
 class boolMatrix;
 class boolNDArray;
 class charMatrix;
 class charNDArray;
 class PermMatrix;
 class Cell;
 class octave_value;
 
-#include "intNDArray.h"
-#include "oct-inttypes.h"
-
+template <typename T> class intNDArray;
 
 extern OCTINTERP_API void
 octave_print_internal (std::ostream& os, bool d,
                        bool pr_as_read_syntax = false);
 
 extern OCTINTERP_API void
 octave_print_internal (std::ostream& os, char c,
                        bool pr_as_read_syntax = false);
diff --git a/liboctave/array/Array.cc b/liboctave/array/Array.cc
--- a/liboctave/array/Array.cc
+++ b/liboctave/array/Array.cc
@@ -34,16 +34,17 @@ along with Octave; see the file COPYING.
 #include <vector>
 #include <algorithm>
 #include <new>
 
 #include "Array.h"
 #include "Array-util.h"
 #include "idx-vector.h"
 #include "lo-error.h"
+#include "lo-mappers.h"
 #include "oct-locbuf.h"
 
 // One dimensional array class.  Handles the reference counting for
 // all the derived classes.
 
 template <typename T>
 typename Array<T>::ArrayRep *
 Array<T>::nil_rep (void)
diff --git a/liboctave/array/dNDArray.h b/liboctave/array/dNDArray.h
--- a/liboctave/array/dNDArray.h
+++ b/liboctave/array/dNDArray.h
@@ -21,22 +21,23 @@ along with Octave; see the file COPYING.
 */
 
 #if ! defined (octave_dNDArray_h)
 #define octave_dNDArray_h 1
 
 #include "octave-config.h"
 
 #include "MArray.h"
-#include "intNDArray.h"
 
 #include "mx-defs.h"
 #include "mx-op-decl.h"
 #include "bsxfun-decl.h"
 
+template <typename T> class intNDArray;
+
 class
 OCTAVE_API
 NDArray : public MArray<double>
 {
 public:
 
   NDArray (void) : MArray<double> () { }
 
diff --git a/liboctave/array/fNDArray.h b/liboctave/array/fNDArray.h
--- a/liboctave/array/fNDArray.h
+++ b/liboctave/array/fNDArray.h
@@ -21,22 +21,23 @@ along with Octave; see the file COPYING.
 */
 
 #if ! defined (octave_fNDArray_h)
 #define octave_fNDArray_h 1
 
 #include "octave-config.h"
 
 #include "MArray.h"
-#include "intNDArray.h"
 
 #include "mx-defs.h"
 #include "mx-op-decl.h"
 #include "bsxfun-decl.h"
 
+template <typename T> class intNDArray;
+
 class
 OCTAVE_API
 FloatNDArray : public MArray<float>
 {
 public:
 
   FloatNDArray (void) : MArray<float> () { }
 
diff --git a/liboctave/array/idx-vector.h b/liboctave/array/idx-vector.h
--- a/liboctave/array/idx-vector.h
+++ b/liboctave/array/idx-vector.h
@@ -30,17 +30,17 @@ along with Octave; see the file COPYING.
 #include <cassert>
 #include <cstring>
 
 #include <algorithm>
 #include <iosfwd>
 #include <memory>
 
 #include "dim-vector.h"
-#include "oct-inttypes.h"
+#include "oct-inttypes-fwd.h"
 #include "oct-refcount.h"
 
 template <typename T> class Array;
 template <typename T> class Sparse;
 class Range;
 
 // Design rationale:
 // idx_vector is a reference-counting, polymorphic pointer, that can contain
diff --git a/liboctave/array/int16NDArray.h b/liboctave/array/int16NDArray.h
--- a/liboctave/array/int16NDArray.h
+++ b/liboctave/array/int16NDArray.h
@@ -22,17 +22,17 @@ along with Octave; see the file COPYING.
 
 #if ! defined (octave_int16NDArray_h)
 #define octave_int16NDArray_h 1
 
 #include "octave-config.h"
 
 #include "intNDArray.h"
 #include "mx-op-decl.h"
-#include "oct-inttypes.h"
+#include "oct-inttypes-fwd.h"
 #include "bsxfun-decl.h"
 
 typedef intNDArray<octave_int16> int16NDArray;
 
 NDS_CMP_OP_DECLS (int16NDArray, octave_int16, OCTAVE_API)
 NDS_BOOL_OP_DECLS (int16NDArray, octave_int16, OCTAVE_API)
 
 SND_CMP_OP_DECLS (octave_int16, int16NDArray, OCTAVE_API)
diff --git a/liboctave/array/int32NDArray.h b/liboctave/array/int32NDArray.h
--- a/liboctave/array/int32NDArray.h
+++ b/liboctave/array/int32NDArray.h
@@ -22,17 +22,17 @@ along with Octave; see the file COPYING.
 
 #if ! defined (octave_int32NDArray_h)
 #define octave_int32NDArray_h 1
 
 #include "octave-config.h"
 
 #include "intNDArray.h"
 #include "mx-op-decl.h"
-#include "oct-inttypes.h"
+#include "oct-inttypes-fwd.h"
 #include "bsxfun-decl.h"
 
 typedef intNDArray<octave_int32> int32NDArray;
 
 NDS_CMP_OP_DECLS (int32NDArray, octave_int32, OCTAVE_API)
 NDS_BOOL_OP_DECLS (int32NDArray, octave_int32, OCTAVE_API)
 
 SND_CMP_OP_DECLS (octave_int32, int32NDArray, OCTAVE_API)
diff --git a/liboctave/array/int64NDArray.h b/liboctave/array/int64NDArray.h
--- a/liboctave/array/int64NDArray.h
+++ b/liboctave/array/int64NDArray.h
@@ -22,17 +22,17 @@ along with Octave; see the file COPYING.
 
 #if ! defined (octave_int64NDArray_h)
 #define octave_int64NDArray_h 1
 
 #include "octave-config.h"
 
 #include "intNDArray.h"
 #include "mx-op-decl.h"
-#include "oct-inttypes.h"
+#include "oct-inttypes-fwd.h"
 #include "bsxfun-decl.h"
 
 typedef intNDArray<octave_int64> int64NDArray;
 
 NDS_CMP_OP_DECLS (int64NDArray, octave_int64, OCTAVE_API)
 NDS_BOOL_OP_DECLS (int64NDArray, octave_int64, OCTAVE_API)
 
 SND_CMP_OP_DECLS (octave_int64, int64NDArray, OCTAVE_API)
diff --git a/liboctave/array/int8NDArray.h b/liboctave/array/int8NDArray.h
--- a/liboctave/array/int8NDArray.h
+++ b/liboctave/array/int8NDArray.h
@@ -22,17 +22,17 @@ along with Octave; see the file COPYING.
 
 #if ! defined (octave_int8NDArray_h)
 #define octave_int8NDArray_h 1
 
 #include "octave-config.h"
 
 #include "intNDArray.h"
 #include "mx-op-decl.h"
-#include "oct-inttypes.h"
+#include "oct-inttypes-fwd.h"
 #include "bsxfun-decl.h"
 
 typedef intNDArray<octave_int8> int8NDArray;
 
 NDS_CMP_OP_DECLS (int8NDArray, octave_int8, OCTAVE_API)
 NDS_BOOL_OP_DECLS (int8NDArray, octave_int8, OCTAVE_API)
 
 SND_CMP_OP_DECLS (octave_int8, int8NDArray, OCTAVE_API)
diff --git a/liboctave/array/uint16NDArray.h b/liboctave/array/uint16NDArray.h
--- a/liboctave/array/uint16NDArray.h
+++ b/liboctave/array/uint16NDArray.h
@@ -22,17 +22,17 @@ along with Octave; see the file COPYING.
 
 #if ! defined (octave_uint16NDArray_h)
 #define octave_uint16NDArray_h 1
 
 #include "octave-config.h"
 
 #include "intNDArray.h"
 #include "mx-op-decl.h"
-#include "oct-inttypes.h"
+#include "oct-inttypes-fwd.h"
 #include "bsxfun-decl.h"
 
 typedef intNDArray<octave_uint16> uint16NDArray;
 
 NDS_CMP_OP_DECLS (uint16NDArray, octave_uint16, OCTAVE_API)
 NDS_BOOL_OP_DECLS (uint16NDArray, octave_uint16, OCTAVE_API)
 
 SND_CMP_OP_DECLS (octave_uint16, uint16NDArray, OCTAVE_API)
diff --git a/liboctave/array/uint32NDArray.h b/liboctave/array/uint32NDArray.h
--- a/liboctave/array/uint32NDArray.h
+++ b/liboctave/array/uint32NDArray.h
@@ -22,17 +22,17 @@ along with Octave; see the file COPYING.
 
 #if ! defined (octave_uint32NDArray_h)
 #define octave_uint32NDArray_h 1
 
 #include "octave-config.h"
 
 #include "intNDArray.h"
 #include "mx-op-decl.h"
-#include "oct-inttypes.h"
+#include "oct-inttypes-fwd.h"
 #include "bsxfun-decl.h"
 
 typedef intNDArray<octave_uint32> uint32NDArray;
 
 NDS_CMP_OP_DECLS (uint32NDArray, octave_uint32, OCTAVE_API)
 NDS_BOOL_OP_DECLS (uint32NDArray, octave_uint32, OCTAVE_API)
 
 SND_CMP_OP_DECLS (octave_uint32, uint32NDArray, OCTAVE_API)
diff --git a/liboctave/array/uint64NDArray.h b/liboctave/array/uint64NDArray.h
--- a/liboctave/array/uint64NDArray.h
+++ b/liboctave/array/uint64NDArray.h
@@ -22,17 +22,17 @@ along with Octave; see the file COPYING.
 
 #if ! defined (octave_uint64NDArray_h)
 #define octave_uint64NDArray_h 1
 
 #include "octave-config.h"
 
 #include "intNDArray.h"
 #include "mx-op-decl.h"
-#include "oct-inttypes.h"
+#include "oct-inttypes-fwd.h"
 #include "bsxfun-decl.h"
 
 typedef intNDArray<octave_uint64> uint64NDArray;
 
 NDS_CMP_OP_DECLS (uint64NDArray, octave_uint64, OCTAVE_API)
 NDS_BOOL_OP_DECLS (uint64NDArray, octave_uint64, OCTAVE_API)
 
 SND_CMP_OP_DECLS (octave_uint64, uint64NDArray, OCTAVE_API)
diff --git a/liboctave/array/uint8NDArray.h b/liboctave/array/uint8NDArray.h
--- a/liboctave/array/uint8NDArray.h
+++ b/liboctave/array/uint8NDArray.h
@@ -22,17 +22,17 @@ along with Octave; see the file COPYING.
 
 #if ! defined (octave_uint8NDArray_h)
 #define octave_uint8NDArray_h 1
 
 #include "octave-config.h"
 
 #include "intNDArray.h"
 #include "mx-op-decl.h"
-#include "oct-inttypes.h"
+#include "oct-inttypes-fwd.h"
 #include "bsxfun-decl.h"
 
 typedef intNDArray<octave_uint8> uint8NDArray;
 
 NDS_CMP_OP_DECLS (uint8NDArray, octave_uint8, OCTAVE_API)
 NDS_BOOL_OP_DECLS (uint8NDArray, octave_uint8, OCTAVE_API)
 
 SND_CMP_OP_DECLS (octave_uint8, uint8NDArray, OCTAVE_API)
diff --git a/liboctave/numeric/lo-mappers.h b/liboctave/numeric/lo-mappers.h
--- a/liboctave/numeric/lo-mappers.h
+++ b/liboctave/numeric/lo-mappers.h
@@ -24,17 +24,16 @@ along with Octave; see the file COPYING.
 #if ! defined (octave_lo_mappers_h)
 #define octave_lo_mappers_h 1
 
 #include "octave-config.h"
 
 #include <limits>
 
 #include "oct-cmplx.h"
-#include "oct-inttypes.h"
 #include "lo-math.h"
 #include "lo-ieee.h"
 
 namespace octave
 {
   namespace math
   {
     extern OCTAVE_API bool is_NA (double x);
diff --git a/liboctave/util/data-conv.h b/liboctave/util/data-conv.h
--- a/liboctave/util/data-conv.h
+++ b/liboctave/util/data-conv.h
@@ -23,17 +23,17 @@ along with Octave; see the file COPYING.
 #if ! defined (octave_data_conv_h)
 #define octave_data_conv_h 1
 
 #include "octave-config.h"
 
 #include <limits>
 
 #include "mach-info.h"
-#include "oct-inttypes.h"
+#include "oct-inttypes-fwd.h"
 
 class
 OCTAVE_API
 oct_data_conv
 {
 public:
 
   enum data_type
diff --git a/liboctave/util/module.mk b/liboctave/util/module.mk
--- a/liboctave/util/module.mk
+++ b/liboctave/util/module.mk
@@ -17,16 +17,17 @@ UTIL_INC = \
   liboctave/util/lo-traits.h \
   liboctave/util/lo-utils.h \
   liboctave/util/oct-alloc.h \
   liboctave/util/oct-base64.h \
   liboctave/util/oct-binmap.h \
   liboctave/util/oct-cmplx.h \
   liboctave/util/oct-glob.h \
   liboctave/util/oct-inttypes.h \
+  liboctave/util/oct-inttypes-fwd.h \
   liboctave/util/oct-locbuf.h \
   liboctave/util/oct-mutex.h \
   liboctave/util/oct-refcount.h \
   liboctave/util/oct-rl-edit.h \
   liboctave/util/oct-rl-hist.h \
   liboctave/util/oct-shlib.h \
   liboctave/util/oct-sort.h \
   liboctave/util/pathsearch.h \
diff --git a/liboctave/util/oct-inttypes-fwd.h b/liboctave/util/oct-inttypes-fwd.h
new file mode 100644
--- /dev/null
+++ b/liboctave/util/oct-inttypes-fwd.h
@@ -0,0 +1,40 @@
+/*
+
+Copyright (C) 2016 John W. Eaton
+
+This file is part of Octave.
+
+Octave is free software; you can redistribute it and/or modify it
+under the terms of the GNU General Public License as published by the
+Free Software Foundation; either version 3 of the License, or (at your
+option) any later version.
+
+Octave is distributed in the hope that it will be useful, but WITHOUT
+ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+for more details.
+
+You should have received a copy of the GNU General Public License
+along with Octave; see the file COPYING.  If not, see
+<http://www.gnu.org/licenses/>.
+
+*/
+
+#if ! defined (octave_oct_inttypes_fwd_h)
+#define octave_oct_inttypes_fwd_h 1
+
+#include "octave-config.h"
+
+template <typename T> class octave_int;
+
+typedef octave_int<int8_t> octave_int8;
+typedef octave_int<int16_t> octave_int16;
+typedef octave_int<int32_t> octave_int32;
+typedef octave_int<int64_t> octave_int64;
+
+typedef octave_int<uint8_t> octave_uint8;
+typedef octave_int<uint16_t> octave_uint16;
+typedef octave_int<uint32_t> octave_uint32;
+typedef octave_int<uint64_t> octave_uint64;
+
+#endif
diff --git a/liboctave/util/oct-inttypes.h b/liboctave/util/oct-inttypes.h
--- a/liboctave/util/oct-inttypes.h
+++ b/liboctave/util/oct-inttypes.h
@@ -30,16 +30,28 @@ along with Octave; see the file COPYING.
 
 #include <limits>
 #include <iosfwd>
 
 #include "lo-traits.h"
 #include "lo-math.h"
 #include "lo-mappers.h"
 
+template <typename T> class octave_int;
+
+typedef octave_int<int8_t> octave_int8;
+typedef octave_int<int16_t> octave_int16;
+typedef octave_int<int32_t> octave_int32;
+typedef octave_int<int64_t> octave_int64;
+
+typedef octave_int<uint8_t> octave_uint8;
+typedef octave_int<uint16_t> octave_uint16;
+typedef octave_int<uint32_t> octave_uint32;
+typedef octave_int<uint64_t> octave_uint64;
+
 #if defined (OCTAVE_INT_USE_LONG_DOUBLE)
 
 namespace octave
 {
   namespace math
   {
     inline long double round (long double x) { return roundl (x); }
 
@@ -1128,26 +1140,16 @@ bitshift (const octave_int<T>& a, int n,
   if (n > 0)
     return (a << n) & mask;
   else if (n < 0)
     return (a >> -n) & mask;
   else
     return a & mask;
 }
 
-typedef octave_int<int8_t> octave_int8;
-typedef octave_int<int16_t> octave_int16;
-typedef octave_int<int32_t> octave_int32;
-typedef octave_int<int64_t> octave_int64;
-
-typedef octave_int<uint8_t> octave_uint8;
-typedef octave_int<uint16_t> octave_uint16;
-typedef octave_int<uint32_t> octave_uint32;
-typedef octave_int<uint64_t> octave_uint64;
-
 #if defined (OCTAVE_ENSURE_LONG_DOUBLE_OPERATIONS_ARE_NOT_TRUNCATED)
 
 #define DECLARE_EXTERNAL_LONG_DOUBLE_OP(T, OP) \
   extern OCTAVE_API T \
   external_double_ ## T ## _ ## OP (double x, T y); \
   extern OCTAVE_API T \
   external_ ## T ## _double_ ## OP (T x, double y)
 
