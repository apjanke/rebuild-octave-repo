# HG changeset patch
# User jwe
# Date 1170838884 0
#      Wed Feb 07 09:01:24 2007 +0000
# Node ID d26c558691cdaf42f749cfba6947d5d147a1afa7
# Parent  6e5835ef21f84f91ce6de4a1f739b71bf37719bb
[project @ 2007-02-07 09:01:24 by jwe]

diff --git a/ChangeLog b/ChangeLog
--- a/ChangeLog
+++ b/ChangeLog
@@ -1,8 +1,13 @@
+2007-02-07  Michael Goffioul  <michael.goffioul@swing.be>
+
+	* aclocal.m4 (OCTAVE_HDF5_DLL): New macro.
+	* configure.in: Use it.
+
 2007-02-05  John W. Eaton  <jwe@octave.org>
 
 	* configure.in: Check for realpath function.
 
 	* demo.m: Delete obsolete file.
 
 2007-01-29  Michael Goffioul  <michael.goffioul@swing.be>
 
diff --git a/aclocal.m4 b/aclocal.m4
--- a/aclocal.m4
+++ b/aclocal.m4
@@ -982,8 +982,26 @@ if test "$cross_compiling" = yes; then
   AC_MSG_RESULT([$octave_cv_umfpack_seperate_split assumed for cross compilation])
 else
   AC_MSG_RESULT($octave_cv_umfpack_seperate_split)
 fi
 if test "$octave_cv_umfpack_seperate_split" = yes; then
   AC_DEFINE(UMFPACK_SEPARATE_SPLIT, 1, [Define if the UMFPACK Complex solver allow matrix and RHS to be split independently])
 fi
 ])
+dnl
+dnl Check whether using HDF5 DLL under Windows. This is done by
+dnl testing for a data symbol in the HDF5 library, which would
+dnl requires the definition of _HDF5USEDL_ under MSVC compiler.
+dnl
+AC_DEFUN([OCTAVE_HDF5_DLL], [
+  AC_CACHE_CHECK([if _HDF5USEDLL_ needs to be defined],octave_cv_hdf5_dll, [
+    AC_TRY_LINK([#include <hdf5.h>], [hid_t x = H5T_NATIVE_DOUBLE;],
+      octave_cv_hdf5_dll=no, [
+      CFLAGS_old=$CFLAGS
+      CFLAGS="$CFLAGS -DWIN32 -D_HDF5USEDLL_"
+      AC_TRY_LINK([#include <hdf5.h>], [hid_t x = H5T_NATIVE_DOUBLE;],
+        octave_cv_hdf5_dll=yes,
+	octave_cv_hdf5_dll=no)
+      CFLAGS=$CFLAGS_old])])
+  if test "$octave_cv_hdf5_dll" = yes; then
+    AC_DEFINE(_HDF5USEDLL_, 1, [Define if using HDF5 dll (Win32)])
+  fi])
diff --git a/configure.in b/configure.in
--- a/configure.in
+++ b/configure.in
@@ -24,17 +24,17 @@ dnl Copyright (C) 1996, 1997 John W. Eat
 ### Preserve CFLAGS and CXXFLAGS from the environment before doing
 ### anything else because we don't know which macros might call
 ### AC_PROG_CC or AC_PROG_CXX.
 
 EXTERN_CFLAGS="$CFLAGS"
 EXTERN_CXXFLAGS="$CXXFLAGS"
 
 AC_INIT
-AC_REVISION($Revision: 1.552 $)
+AC_REVISION($Revision: 1.553 $)
 AC_PREREQ(2.57)
 AC_CONFIG_SRCDIR([src/octave.cc])
 AC_CONFIG_HEADER(config.h)
 
 OCTAVE_HOST_TYPE
 
 AC_DEFINE(OCTAVE_SOURCE, 1, [Define if this is Octave.])
   
@@ -522,16 +522,21 @@ if $WITH_ZLIB; then
         HDF5_LIBS="-l$hdf5_lib"
         LIBS="$HDF5_LIBS $LIBS"
         AC_DEFINE(HAVE_HDF5, 1, [Define if HDF5 is available.])
 	AC_CHECK_LIB($hdf5_lib, H5Gget_num_objs, [
 	  AC_DEFINE(HAVE_H5GGET_NUM_OBJS, 1, [Define if HDF5 has H5Gget_num_objs.])])])])
   fi
 
   if $WITH_HDF5; then
+    case "$canonical_host_type" in
+      *-*-msdosmsvc)
+        OCTAVE_HDF5_DLL
+        ;;
+    esac
     true
   else
     warn_hdf5="HDF5 library not found.  Octave will not be able to save or load HDF5 data files."
     AC_MSG_WARN($warn_hdf5)
   fi
 else
   warn_zlib="ZLIB library not found.  Octave will not be able to save or load compressed data files or HDF5 files."
   AC_MSG_WARN($warn_zlib)
@@ -1908,16 +1913,17 @@ typedef int sigset_t;
 #endif
 
 #if !defined(HAVE_SIG_ATOMIC_T)
 typedef int sig_atomic_t;
 #endif
 
 #if defined (_MSC_VER)
 #define __WIN32__
+#define WIN32
 /* missing parameters in macros */
 #pragma warning (disable: 4003)
 /* missing implementations in template instantiation */
 #pragma warning (disable: 4996)
 /* deprecated function names (FIXME?) */
 #pragma warning (disable: 4661)
 #endif
 
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,24 @@
+2007-02-07  John W. Eaton  <jwe@octave.org>
+
+	* defaults.cc (subst_octave_home):
+	Only substitute at beginning of string.
+
+	* ls-hdf5.cc (save_hdf5_empty): Use OCTAVE_LOCAL_BUFFER.
+	* ov-bool-mat.cc (octave_bool_matrix::save_hdf5,
+	octave_bool_matrix::load_hdf5): Likewise.
+	* ov-bool-sparse.cc (octave_sparse_bool_matrix::save_hdf5,
+	octave_sparse_bool_matrix::load_hdf5): Likewise.
+
+2007-02-07  Michael Goffioul  <michael.goffioul@swing.be>
+
+	* ov-cell.cc (octave_cell::save_hdf5): Correct test for H5Dwrite
+	return value.
+
 2007-02-07  John W. Eaton  <jwe@octave.org>
 
 	* zfstream.cc (gzfilebuf::open_mode): Always append "b" to c_mode.
 
 	* toplev.cc (Foctave_config_info): Use struct for conf_info.
 	Call subst_octave_home on selected values when initializing map.
 	* defaults.cc (subst_octave_home): Now extern.
 	* defaults.h.in: Provide decl.
diff --git a/src/defaults.cc b/src/defaults.cc
--- a/src/defaults.cc
+++ b/src/defaults.cc
@@ -103,22 +103,19 @@ subst_octave_home (const std::string& s)
 
   std::string prefix = OCTAVE_PREFIX;
 
   retval = s;
 
   if (Voctave_home != prefix)
     {
       octave_idx_type len = prefix.length ();
-      size_t start = 0;
-      while ((start = retval.find (prefix, start)) != NPOS)
-	{
-	  retval.replace (start, len, Voctave_home);
-	  start += len;
-	}
+
+      if (s.substr (0, len) == prefix)
+	retval.replace (0, len, Voctave_home);
     }
 
   if (file_ops::dir_sep_char != '/')
     std::replace (retval.begin (), retval.end (), '/', file_ops::dir_sep_char);
 
   return retval;
 }
 
diff --git a/src/ls-hdf5.cc b/src/ls-hdf5.cc
--- a/src/ls-hdf5.cc
+++ b/src/ls-hdf5.cc
@@ -619,17 +619,17 @@ hdf5_add_attr (hid_t loc_id, const char 
 // Save an empty matrix, if needed. Returns
 //    > 0  Saved empty matrix
 //    = 0  Not an empty matrix; did nothing
 //    < 0  Error condition
 int
 save_hdf5_empty (hid_t loc_id, const char *name, const dim_vector d)
 {
   hsize_t sz = d.length ();
-  octave_idx_type dims[sz];
+  OCTAVE_LOCAL_BUFFER (octave_idx_type, dims, sz);
   bool empty = false;
   hid_t space_hid = -1, data_hid = -1;
   int retval;
   for (hsize_t i = 0; i < sz; i++)
     {
       dims[i] = d(i);
       if (dims[i] < 1)
 	empty = true;
diff --git a/src/ov-bool-mat.cc b/src/ov-bool-mat.cc
--- a/src/ov-bool-mat.cc
+++ b/src/ov-bool-mat.cc
@@ -386,17 +386,17 @@ octave_bool_matrix::save_hdf5 (hid_t loc
   if (data_hid < 0)
     {
       H5Sclose (space_hid);
       return false;
     }
 
   octave_idx_type nel = m.nelem ();
   bool *mtmp = m.fortran_vec ();
-  hbool_t htmp[nel];
+  OCTAVE_LOCAL_BUFFER (hbool_t, htmp, nel);
   
   for (octave_idx_type i = 0; i < nel; i++)
     htmp[i] = mtmp[i];
 
   retval = H5Dwrite (data_hid, H5T_NATIVE_HBOOL, H5S_ALL, H5S_ALL,
 		     H5P_DEFAULT, htmp) >= 0;
 
   H5Dclose (data_hid);
@@ -444,19 +444,19 @@ octave_bool_matrix::load_hdf5 (hid_t loc
   else
     {
       dv.resize (rank);
       for (hsize_t i = 0, j = rank - 1; i < rank; i++, j--)
 	dv(j) = hdims[i];
     }
 
   octave_idx_type nel = dv.numel ();
-  hbool_t htmp[nel];
+  OCTAVE_LOCAL_BUFFER (hbool_t, htmp, nel);
   if (H5Dread (data_hid, H5T_NATIVE_HBOOL, H5S_ALL, H5S_ALL, 
-	       H5P_DEFAULT, htmp) >= 0) 
+	       H5P_DEFAULT, &htmp[0]) >= 0) 
     {
       retval = true;
 
       boolNDArray btmp (dv);
       for (octave_idx_type i = 0; i < nel; i++)
 	  btmp.elem (i) = htmp[i];
 
       matrix = btmp;
diff --git a/src/ov-bool-sparse.cc b/src/ov-bool-sparse.cc
--- a/src/ov-bool-sparse.cc
+++ b/src/ov-bool-sparse.cc
@@ -474,23 +474,23 @@ octave_sparse_bool_matrix::save_hdf5 (hi
   data_hid = H5Dcreate (group_hid, "data", H5T_NATIVE_HBOOL, space_hid, 
 			H5P_DEFAULT);
   if (data_hid < 0) 
     {
       H5Sclose (space_hid);
       H5Gclose (group_hid);
       return false;
     }
-  
-  hbool_t htmp[m.nzmax ()];
+
+  OCTAVE_LOCAL_BUFFER (hbool_t, htmp, m.nzmax ());  
   for (int i = 0; i < m.nzmax (); i++)
     htmp[i] = m.xdata(i);
 
   retval = H5Dwrite (data_hid, H5T_NATIVE_HBOOL, H5S_ALL, H5S_ALL,
-		     H5P_DEFAULT, htmp) >= 0;
+		     H5P_DEFAULT, &htmp[0]) >= 0;
   H5Dclose (data_hid);
   H5Sclose (space_hid);
   H5Gclose (group_hid);
 
   return retval;
 }
 
 bool
@@ -666,19 +666,23 @@ octave_sparse_bool_matrix::load_hdf5 (hi
       static_cast<int> (hdims[1]) != 1)
     {
       H5Sclose (space_hid);
       H5Dclose (data_hid);
       H5Gclose (group_hid);
       return false;
     }
 
+#ifndef _MSC_VER
   hbool_t htmp[nz];
+#else
+  std::vector<hbool_t> htmp (nz);
+#endif
   bool retval = false;
-  if (H5Dread (data_hid, H5T_NATIVE_HBOOL, H5S_ALL, H5S_ALL, H5P_DEFAULT, htmp) >= 0) 
+  if (H5Dread (data_hid, H5T_NATIVE_HBOOL, H5S_ALL, H5S_ALL, H5P_DEFAULT, &htmp[0]) >= 0) 
     {
       retval = true;
 
       for (int i = 0; i < nz; i++)
 	m.xdata(i) = htmp[i];
 
       matrix = m;
     }
diff --git a/src/ov-cell.cc b/src/ov-cell.cc
--- a/src/ov-cell.cc
+++ b/src/ov-cell.cc
@@ -770,18 +770,18 @@ octave_cell::save_hdf5 (hid_t loc_id, co
 			H5P_DEFAULT);
   if (size_hid < 0) 
     {
       H5Sclose (space_hid);
       H5Gclose (data_hid);
       return false;
     }
 
-  if (! H5Dwrite (size_hid, H5T_NATIVE_IDX, H5S_ALL, H5S_ALL,
-		  H5P_DEFAULT, hdims) < 0)
+  if (H5Dwrite (size_hid, H5T_NATIVE_IDX, H5S_ALL, H5S_ALL,
+		H5P_DEFAULT, hdims) < 0)
     {
       H5Dclose (size_hid);
       H5Sclose (space_hid);
       H5Gclose (data_hid);
       return false;
     }
 
   H5Dclose (size_hid);
@@ -791,17 +791,17 @@ octave_cell::save_hdf5 (hid_t loc_id, co
 
   Cell tmp = cell_value ();
 
   octave_idx_type nel = dv.numel ();
 
   for (octave_idx_type i = 0; i < nel; i++)
     {
       std::ostringstream buf;
-      int digits = static_cast<int> (floor (log10 (nel) + 1.0));
+      int digits = static_cast<int> (floor (log10 (static_cast<double> (nel)) + 1.0));
       buf << "_" << std::setw (digits) << std::setfill ('0') << i;
       std::string s = buf.str ();
 
       if (! add_hdf5_data (data_hid, tmp.elem (i), s.c_str (), "", false,
 			   save_as_floats))
 	{
 	  H5Gclose (data_hid);
 	  return false;
diff --git a/src/toplev.cc b/src/toplev.cc
--- a/src/toplev.cc
+++ b/src/toplev.cc
@@ -809,22 +809,22 @@ specified option.\n\
       { false, "YFLAGS", OCTAVE_CONF_YFLAGS },
       { false, "api_version", OCTAVE_API_VERSION },
       { true, "archlibdir", OCTAVE_ARCHLIBDIR },
       { true, "bindir", OCTAVE_BINDIR },
       { false, "canonical_host_type", OCTAVE_CANONICAL_HOST_TYPE },
       { false, "config_opts", OCTAVE_CONF_config_opts },
       { true, "datadir", OCTAVE_DATADIR },
       { true, "datarootdir", OCTAVE_DATAROOTDIR },
-      { false, "exec_prefix", OCTAVE_EXEC_PREFIX },
+      { true, "exec_prefix", OCTAVE_EXEC_PREFIX },
       { true, "fcnfiledir", OCTAVE_FCNFILEDIR },
       { true, "imagedir", OCTAVE_IMAGEDIR },
       { true, "includedir", OCTAVE_INCLUDEDIR },
       { true, "infodir", OCTAVE_INFODIR },
-      { false, "infofile", OCTAVE_INFOFILE },
+      { true, "infofile", OCTAVE_INFOFILE },
       { true, "libdir", OCTAVE_LIBDIR },
       { true, "libexecdir", OCTAVE_LIBEXECDIR },
       { true, "localapifcnfiledir", OCTAVE_LOCALAPIFCNFILEDIR },
       { true, "localapioctfiledir", OCTAVE_LOCALAPIOCTFILEDIR },
       { true, "localarchlibdir", OCTAVE_LOCALARCHLIBDIR },
       { true, "localfcnfiledir", OCTAVE_LOCALFCNFILEDIR },
       { true, "localoctfiledir", OCTAVE_LOCALOCTFILEDIR },
       { true, "localstartupfiledir", OCTAVE_LOCALSTARTUPFILEDIR },
@@ -833,17 +833,17 @@ specified option.\n\
       { true, "localverfcnfiledir", OCTAVE_LOCALVERFCNFILEDIR },
       { true, "localveroctfiledir", OCTAVE_LOCALVEROCTFILEDIR },
       { true, "man1dir", OCTAVE_MAN1DIR },
       { false, "man1ext", OCTAVE_MAN1EXT },
       { true, "mandir", OCTAVE_MANDIR },
       { true, "octfiledir", OCTAVE_OCTFILEDIR },
       { true, "octincludedir", OCTAVE_OCTINCLUDEDIR },
       { true, "octlibdir", OCTAVE_OCTLIBDIR },
-      { false, "prefix", OCTAVE_PREFIX },
+      { true, "prefix", OCTAVE_PREFIX },
       { true, "startupfiledir", OCTAVE_STARTUPFILEDIR },
       { false, "version", OCTAVE_VERSION },
       { false, 0, 0 }
     };
 
   if (! initialized)
     {
       m.assign ("dld", octave_value (octave_supports_dynamic_linking));
