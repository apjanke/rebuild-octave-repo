# HG changeset patch
# User Jacob Dawid <jacob.dawid@googlemail.com>
# Date 1302100779 -7200
#      Wed Apr 06 16:39:39 2011 +0200
# Node ID 0a3a2d4e3d8613b54fdfb114ee582f0f8acd8cf2
# Parent  0c9cf8be675e7bb2d6773bac784108b4bd534ff0
Added comments.

diff --git a/gui//client.h b/gui//client.h
--- a/gui//client.h
+++ b/gui//client.h
@@ -20,46 +20,63 @@
 #define CLIENT_H
 
 #include "clientmanager.h"
 #include <QProcess>
 #include <QObject>
 #include <QThread>
 #include <QMutex>
 
+/**
+  * \class Client
+  *
+  * A client is a representation of another external unit Quint is communicating with.
+  * Usually this will be the octave process. A client is launched by providing a command
+  * that will be executed. It will handle the process itself.
+  */
 class Client : public QObject {
     Q_OBJECT
     friend class ClientManager;
 
 public:
     QMutex *accessMutex();
 
 public slots:
     void send(QString content);
 
 signals:
     void dataAvailable(QString data);
     void errorAvailable(QString error);
     void lostConnection();
 
 protected:
+    /** Clients may only be created by the client manager. */
     Client(QString command);
 
 private slots:
     void reemitDataAvailable();
     void reemitErrorAvailable();
     void handleProcessFinished(int exitCode, QProcess::ExitStatus exitStatus);
 
 private:
     QString m_command;
     QProcess m_process;
     QThread m_thread;
     QMutex m_access;
 };
 
+/**
+  * \class PendingRequest
+  *
+  * The PendingRequest class helps to communicate with clients. It automatically locks
+  * the client until the PendingRequest is deleted. As soon as the request is being
+  * answered, it will send out the answered()-Signal. It buffers all input and delivers
+  * it by offering the fetchData() and fetchError()-methods. A request is considered
+  * as answered, when the termination string is found in the buffer.
+  */
 class PendingRequest : public QObject {
     Q_OBJECT
 public:
     PendingRequest(Client *client)
         : QObject(),
           m_client(client),
           m_dataBuffer(""),
           m_errorBuffer("") {
diff --git a/gui//clientmanager.h b/gui//clientmanager.h
--- a/gui//clientmanager.h
+++ b/gui//clientmanager.h
@@ -18,21 +18,28 @@
 
 #ifndef CLIENTMANAGER_H
 #define CLIENTMANAGER_H
 
 #include <QList>
 #include <QObject>
 #include "client.h"
 
+/**
+  * \class ClientManager
+  *
+  * The client manager is a singleton that keeps track of all current clients.
+  */
 class Client;
 class ClientManager : public QObject {
     Q_OBJECT
 public:
     static ClientManager& clientManager();
+
+    /** Factory function to produce new clients. */
     Client *startProcess(QString command);
 
 private:
     ClientManager();
     static ClientManager m_clientManager;
     QList<Client*> m_activeClients;
 };
 
diff --git a/gui//mainwindow.h b/gui//mainwindow.h
--- a/gui//mainwindow.h
+++ b/gui//mainwindow.h
@@ -17,16 +17,21 @@
  */
 
 #ifndef MAINWINDOW_H
 #define MAINWINDOW_H
 
 #include <QtGui/QMainWindow>
 #include <QMdiArea>
 
+/**
+  * \class MainWindow
+  *
+  * Represents the main window.
+  */
 class MainWindow : public QMainWindow
 {
     Q_OBJECT
 
 public:
     MainWindow(QWidget *parent = 0);
     ~MainWindow();
 
diff --git a/gui//octaveterminal.h b/gui//octaveterminal.h
--- a/gui//octaveterminal.h
+++ b/gui//octaveterminal.h
@@ -27,16 +27,21 @@
 #include <QMenu>
 #include <QToolBar>
 #include <QKeyEvent>
 #include <QQueue>
 
 #include "client.h"
 #include "terminalhighlighter.h"
 
+/**
+  * \class TerminalCommandLine
+  *
+  * Extends the QLineEdit by a history function.
+  */
 class TerminalCommandLine : public QLineEdit {
     Q_OBJECT
 public:
     TerminalCommandLine(QWidget *parent = 0)
         : QLineEdit(parent),
           m_commandHistoryIndex(0) {
     }
 
@@ -97,16 +102,22 @@ protected:
     }
 
 private:
     QList<QString> m_commandHistory;
     QString m_currentlyEditedCommand;
     int m_commandHistoryIndex;
 };
 
+/**
+  * \class OctaveTerminal
+  *
+  * Provides a complete OctaveTerminal. Unless there is no octave client assigned to
+  * this terminal it will be not functional.
+  */
 class OctaveTerminal : public QMdiSubWindow {
     Q_OBJECT
 public:
     explicit OctaveTerminal(QWidget *parent = 0);
 
 signals:
 
 public slots:
diff --git a/gui//terminalhighlighter.h b/gui//terminalhighlighter.h
--- a/gui//terminalhighlighter.h
+++ b/gui//terminalhighlighter.h
@@ -15,16 +15,22 @@
  * You should have received a copy of the GNU General Public License
  * along with this program.  If not, see <http://www.gnu.org/licenses/>.
  */
 
 #ifndef TERMINALHIGHLIGHTER_H
 #define TERMINALHIGHLIGHTER_H
 
 #include <QSyntaxHighlighter>
+
+/**
+  * \class TerminalHighlighter
+  *
+  * Subclass Qt's QSyntaxHighlighter-class to provide syntac highlighting.
+  */
 class QTextDocument;
 class TerminalHighlighter : public QSyntaxHighlighter {
     Q_OBJECT
 
 public:
     TerminalHighlighter(QTextDocument *parent = 0);
 
 protected:
