# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1478032655 14400
#      Tue Nov 01 16:37:35 2016 -0400
# Node ID 843b45bd99120e5faa93f4330ef83db878400d7f
# Parent  5a5d6c8647f67de6bf85c0ae34db306ec04981d0
# Parent  413a19bca7f37082e042a5add7e13a9afee17163
maint: Periodic merge of stable to default.

diff --git a/libinterp/corefcn/cellfun.cc b/libinterp/corefcn/cellfun.cc
--- a/libinterp/corefcn/cellfun.cc
+++ b/libinterp/corefcn/cellfun.cc
@@ -1022,17 +1022,17 @@ The named function can also take more th
 the input arguments given as third input argument @var{b}, fourth
 input argument @var{c}, @dots{}  If given more than one array input
 argument then all input arguments must have the same sizes, for
 example:
 
 @example
 @group
 arrayfun (@@atan2, [1, 0], [0, 1])
-     @result{} [ 1.5708   0.0000 ]
+     @result{} [ 1.57080   0.00000 ]
 @end group
 @end example
 
 If the parameter @var{val} after a further string input argument
 @qcode{"UniformOutput"} is set @code{true} (the default), then the named
 function @var{func} must return a single element which then will be
 concatenated into the return value and is of type matrix.  Otherwise,
 if that parameter is set to @code{false}, then the outputs are
diff --git a/libinterp/corefcn/data.cc b/libinterp/corefcn/data.cc
--- a/libinterp/corefcn/data.cc
+++ b/libinterp/corefcn/data.cc
@@ -2739,48 +2739,71 @@ indexing, i.e., @code{object@{@dots{}@}}
       retval = dims_to_numel (args(0).dims (), args.slice (1, nargin-1));
     }
 
   return retval;
 }
 
 DEFUN (size, args, nargout,
        doc: /* -*- texinfo -*-
-@deftypefn  {} {} size (@var{a})
-@deftypefnx {} {} size (@var{a}, @var{dim})
-Return the number of rows and columns of @var{a}.
-
-With one input argument and one output argument, the result is returned
-in a row vector.  If there are multiple output arguments, the number of
-rows is assigned to the first, and the number of columns to the second,
-etc.  For example:
+@deftypefn  {} {@var{sz} =} size (@var{a})
+@deftypefnx {} {@var{dim_sz} =} size (@var{a}, @var{dim})
+@deftypefnx {} {[@var{rows}, @var{cols}, @dots{}, @var{dim_N_sz}] =} size (@dots{})
+Return a row vector with the size (number of elements) of each dimension for
+the object @var{a}.
+
+When given a second argument, @var{dim}, return the size of the corresponding
+dimension.
+
+With a single output argument, @code{size} returns a row vector.  When called
+with multiple output arguments, @code{size} returns the size of dimension N
+in the Nth argument.  The number of rows, dimension 1, is returned in the
+first argument, the number of columns, dimension 2, is returned in the
+second argument, etc.  If there are more dimensions in @var{a} then there are
+output arguments, @code{size} returns the total number of elements in the
+remaining dimensions in the final output argument.
+
+Example 1: single row vector output
 
 @example
 @group
 size ([1, 2; 3, 4; 5, 6])
    @result{} [ 3, 2 ]
-
-[nr, nc] = size ([1, 2; 3, 4; 5, 6])
-    @result{} nr = 3
-    @result{} nc = 2
 @end group
 @end example
 
-If given a second argument, @code{size} will return the size of the
-corresponding dimension.  For example,
+Example 2: number of elements in 2nd dimension (columns)
 
 @example
 @group
 size ([1, 2; 3, 4; 5, 6], 2)
     @result{} 2
 @end group
 @end example
 
-@noindent
-returns the number of columns in the given matrix.
+Example 3: number of output arguments == number of dimensions
+
+@example
+@group
+[nr, nc] = size ([1, 2; 3, 4; 5, 6])
+    @result{} nr = 3
+    @result{} nc = 2
+@end group
+@end example
+
+Example 4: number of output arguments != number of dimensions
+
+@example
+@group
+[nr, remainder] = size (ones (2, 3, 4, 5)
+    @result{} nr = 2
+    @result{} remainder = 60
+@end group
+@end example
+
 @seealso{numel, ndims, length, rows, columns, size_equal, common_size}
 @end deftypefn */)
 {
   octave_value_list retval;
 
   int nargin = args.length ();
 
   if (nargin == 1)
diff --git a/libinterp/corefcn/fft.cc b/libinterp/corefcn/fft.cc
--- a/libinterp/corefcn/fft.cc
+++ b/libinterp/corefcn/fft.cc
@@ -110,17 +110,17 @@ do_fft (const octave_value_list &args, c
         return octave_value (NDArray (dims));
     }
 
   if (n_points == 1)
     {
       octave_value_list idx (ndims);
       for (octave_idx_type i = 0; i < ndims; i++)
         idx(i) = idx_vector::colon;
-      idx(dim) = idx_vector (0);
+      idx(dim) = idx_vector (static_cast<octave_idx_type> (0));
 
       return arg.do_index_op (idx);
     }
 
   if (arg.is_single_type ())
     {
       if (arg.is_real_type ())
         {
@@ -296,9 +296,8 @@ dimension of the matrix along which the 
 %! s = cos (n*t);
 %!
 %! S = zeros (size (t), "single");
 %! S(n+1) = N/2;
 %! S(N-n+1) = N/2;
 %!
 %! assert (ifft (S), s, 4*N*eps ("single"));
 */
-
diff --git a/libinterp/parse-tree/pt-eval.cc b/libinterp/parse-tree/pt-eval.cc
--- a/libinterp/parse-tree/pt-eval.cc
+++ b/libinterp/parse-tree/pt-eval.cc
@@ -110,18 +110,17 @@ namespace octave
   }
 
   void
   tree_evaluator::visit_continue_command (tree_continue_command& cmd)
   {
     if (debug_mode)
       do_breakpoint (cmd.is_breakpoint (true));
 
-    if (statement_context == function || statement_context == script
-        || in_loop_command)
+    if (in_loop_command)
       tree_continue_command::continuing = 1;
   }
 
   void
   tree_evaluator::reset_debug_state (void)
   {
     debug_mode = bp_table::have_breakpoints () || Vdebugging;
 
diff --git a/scripts/general/deal.m b/scripts/general/deal.m
--- a/scripts/general/deal.m
+++ b/scripts/general/deal.m
@@ -59,17 +59,17 @@
 ## Programming Note: @code{deal} is often used with comma separated lists
 ## derived from cell arrays or structures.  This is unnecessary as the
 ## interpreter can perform the same action without the overhead of a function
 ## call.  For example:
 ##
 ## @example
 ## @group
 ## c = @{[1 2], "Three", 4@};
-## [x, y, z ] = c@{:@}
+## [x, y, z] = c@{:@}
 ## @result{}
 ##    x =
 ##
 ##       1   2
 ##
 ##    y = Three
 ##    z =  4
 ## @end group
diff --git a/scripts/geometry/voronoi.m b/scripts/geometry/voronoi.m
--- a/scripts/geometry/voronoi.m
+++ b/scripts/geometry/voronoi.m
@@ -128,17 +128,17 @@ function [vx, vy] = voronoi (varargin)
 
   [p, c, infi] = __voronoi__ ("voronoi", [[x; xbox], [y; ybox]], opts{:});
 
   ## Build list of edges from points in facet.
   c = c(! infi).';
   edges = zeros (2, 0);
   for i = 1:numel (c)
     facet = c{i};
-    if (isempty (facet)) 
+    if (isempty (facet))
       continue;
     endif
     edges = [edges, [facet; [facet(end), facet(1:end-1)]]];
   endfor
 
   ## Keep only the unique edges of the Voronoi diagram
   edges = sortrows (sort (edges).').';
   edges = edges(:, [any(diff(edges, 1, 2)), true]);
@@ -147,17 +147,17 @@ function [vx, vy] = voronoi (varargin)
     ## Eliminate the edges of the diagram representing the box.
     ## Exclude points outside a certain radius from the center of distribution.
     ## FIXME: Factor should be at least 1.0.  Octave uses 1.1 for margin.
     ## There is no theoretical justification for this choice.
     ctr = [(xmax + xmin)/2 , (ymax + ymin)/2];
     radius = 1.1 * sumsq ([xmin, ymin] - ctr);
     dist = sumsq (p - ctr, 2);
 
-    p_inside = (1:rows (p))(dist < radius); 
+    p_inside = (1:rows (p))(dist < radius);
     edge_inside = any (ismember (edges, p_inside));
     edges = edges(:, edge_inside);
   else
     ## look for the edge between the two given points
     for edge = edges
       if (det ([[[1;1],p(edge,1:2)];1,x(1),y(1)])
           * det ([[[1;1],p(edge,1:2)];1,x(2),y(2)]) < 0)
         edges = edge;
@@ -207,17 +207,17 @@ endfunction
 %! assert (vx, [-0.7; 1.7], eps);
 %! assert (vy, [-0.7; 1.7], eps);
 
 %!testif HAVE_QHULL <38295>
 %! x = [1,2,3];  y = [2,3,1];
 %! [vx, vy] = voronoi (x,y);
 %! assert (columns (vx), 3);
 
-%!testif HAVE_QHULL <37270> 
+%!testif HAVE_QHULL <37270>
 %! ## Duplicate points can cause an internal error
 %! x = [1,2,3, 3];  y = [2,3,1, 1];
 %! [vx, vy] = voronoi (x,y);
 
 
 ## Input validation tests
 %!error voronoi ()
 %!error voronoi (ones (3,1))
diff --git a/scripts/ode/ode23.m b/scripts/ode/ode23.m
--- a/scripts/ode/ode23.m
+++ b/scripts/ode/ode23.m
@@ -154,17 +154,17 @@ function varargout = ode23 (fun, trange,
   ## Start preprocessing, have a look which options are set in odeopts,
   ## check if an invalid or unused option is set.
   [defaults, classes, attributes] = odedefaults (numel (init),
                                                  trange(1), trange(end));
 
   persistent ode23_ignore_options = ...
     {"BDF", "InitialSlope", "Jacobian", "JPattern",
      "MassSingular", "MaxOrder", "MvPattern", "Vectorized"};
-  
+
   defaults   = rmfield (defaults, ode23_ignore_options);
   classes    = rmfield (classes, ode23_ignore_options);
   attributes = rmfield (attributes, ode23_ignore_options);
 
   odeopts = odemergeopts ("ode23", odeopts, defaults, classes, attributes);
 
   odeopts.funarguments = funarguments;
   odeopts.direction    = direction;
