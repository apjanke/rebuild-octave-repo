# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1499456577 14400
#      Fri Jul 07 15:42:57 2017 -0400
# Node ID 0b4d1575a2e262cd2e22f351356cf865ab3c348b
# Parent  7f176909ab86c29615688c7b21c4728dda2b576d
move action_container and event_queue classes inside octave namespace

* action-container.h (class action_container): Move inside octave
namespace.

* event-queue.h, event-queue.cc (class event_queue,
(class event_queue_safe): Move inside octave namespace.
Change all uses.

diff --git a/libinterp/corefcn/event-queue.cc b/libinterp/corefcn/event-queue.cc
--- a/libinterp/corefcn/event-queue.cc
+++ b/libinterp/corefcn/event-queue.cc
@@ -22,15 +22,18 @@ along with Octave; see the file COPYING.
 
 #if defined (HAVE_CONFIG_H)
 #  include "config.h"
 #endif
 
 #include "error.h"
 #include "event-queue.h"
 
-void
-event_queue_safe::warn_unhandled_exception (void) const
+namespace octave
 {
-  warning ("unhandled exception in event_queue_safe handler.  "
-           "It is a bug in Octave for this to happen.  "
-           "Please help improve Octave by reporting it.");
+  void
+  event_queue_safe::warn_unhandled_exception (void) const
+  {
+    warning ("unhandled exception in event_queue_safe handler.  "
+             "It is a bug in Octave for this to happen.  "
+             "Please help improve Octave by reporting it.");
+  }
 }
diff --git a/libinterp/corefcn/event-queue.h b/libinterp/corefcn/event-queue.h
--- a/libinterp/corefcn/event-queue.h
+++ b/libinterp/corefcn/event-queue.h
@@ -25,98 +25,111 @@ along with Octave; see the file COPYING.
 
 #include "octave-config.h"
 
 #include <queue>
 #include <memory>
 
 #include "action-container.h"
 
-class
-event_queue : public action_container
+namespace octave
 {
-public:
-
-  event_queue (void) : fifo () { }
-
-  // No copying!
-
-  event_queue (const event_queue&) = delete;
-
-  event_queue& operator = (const event_queue&) = delete;
-
-  // Destructor should not raise an exception, so all actions
-  // registered should be exception-safe.  If you're not sure, see
-  // event_queue_safe.
-
-  ~event_queue (void) { run (); }
-
-  void add (elem *new_elem)
-  {
-    fifo.push (new_elem);
-  }
-
-  void run_first (void)
-  {
-    if (! empty ())
-      {
-        // No leak on exception!
-        std::unique_ptr<elem> ptr (fifo.front ());
-        fifo.pop ();
-        ptr->run ();
-      }
-  }
-
-  void discard_first (void)
+  class
+  event_queue : public action_container
   {
-    if (! empty ())
-      {
-        elem *ptr = fifo.front ();
-        fifo.pop ();
-        delete ptr;
-      }
-  }
+  public:
+
+    event_queue (void) : fifo () { }
+
+    // No copying!
+
+    event_queue (const event_queue&) = delete;
+
+    event_queue& operator = (const event_queue&) = delete;
 
-  size_t size (void) const { return fifo.size (); }
+    // Destructor should not raise an exception, so all actions
+    // registered should be exception-safe.  If you're not sure, see
+    // event_queue_safe.
 
-protected:
+    ~event_queue (void) { run (); }
+
+    void add (elem *new_elem)
+    {
+      fifo.push (new_elem);
+    }
 
-  std::queue<elem *> fifo;
-};
-
-// Like event_queue, but this one will guard against the
-// possibility of seeing an exception (or interrupt) in the cleanup actions.
-// Not that we can do much about it, but at least we won't crash.
+    void run_first (void)
+    {
+      if (! empty ())
+        {
+          // No leak on exception!
+          std::unique_ptr<elem> ptr (fifo.front ());
+          fifo.pop ();
+          ptr->run ();
+        }
+    }
 
-class
-event_queue_safe : public event_queue
-{
-private:
+    void discard_first (void)
+    {
+      if (! empty ())
+        {
+          elem *ptr = fifo.front ();
+          fifo.pop ();
+          delete ptr;
+        }
+    }
 
-  void warn_unhandled_exception (void) const;
+    size_t size (void) const { return fifo.size (); }
+
+  protected:
 
-public:
-
-  event_queue_safe (void) : event_queue () { }
-
-  // No copying!
+    std::queue<elem *> fifo;
+  };
 
-  event_queue_safe (const event_queue_safe&) = delete;
+  // Like event_queue, but this one will guard against the
+  // possibility of seeing an exception (or interrupt) in the cleanup actions.
+  // Not that we can do much about it, but at least we won't crash.
 
-  event_queue_safe& operator = (const event_queue_safe&) = delete;
-
-  ~event_queue_safe (void)
+  class
+  event_queue_safe : public event_queue
   {
-    while (! empty ())
-      {
-        try
-          {
-            run_first ();
-          }
-        catch (...) // Yes, the black hole.  Remember we're in a dtor.
-          {
-            warn_unhandled_exception ();
-          }
-      }
-  }
-};
+  private:
+
+    void warn_unhandled_exception (void) const;
+
+  public:
+
+    event_queue_safe (void) : event_queue () { }
+
+    // No copying!
+
+    event_queue_safe (const event_queue_safe&) = delete;
+
+    event_queue_safe& operator = (const event_queue_safe&) = delete;
+
+    ~event_queue_safe (void)
+    {
+      while (! empty ())
+        {
+          try
+            {
+              run_first ();
+            }
+          catch (...) // Yes, the black hole.  Remember we're in a dtor.
+            {
+              warn_unhandled_exception ();
+            }
+        }
+    }
+  };
+}
+
+#if defined (OCTAVE_USE_DEPRECATED_FUNCTIONS)
+
+OCTAVE_DEPRECATED (4.4, "use 'octave::event_queue' instead")
+typedef octave::event_queue event_queue;
+
+OCTAVE_DEPRECATED (4.4, "use 'octave::event_queue_safe' instead")
+typedef octave::event_queue_safe event_queue_safe;
 
 #endif
+
+#endif
diff --git a/libinterp/corefcn/octave-link.h b/libinterp/corefcn/octave-link.h
--- a/libinterp/corefcn/octave-link.h
+++ b/libinterp/corefcn/octave-link.h
@@ -395,17 +395,17 @@ private:
   static bool instance_ok (void) { return instance != 0; }
 
 protected:
 
   // Semaphore to lock access to the event queue.
   octave::mutex *event_queue_mutex;
 
   // Event Queue.
-  event_queue gui_event_queue;
+  octave::event_queue gui_event_queue;
 
   bool debugging;
   bool link_enabled;
 
   void do_generate_events (void);
   void do_process_events (void);
   void do_discard_events (void);
 
diff --git a/liboctave/util/action-container.h b/liboctave/util/action-container.h
--- a/liboctave/util/action-container.h
+++ b/liboctave/util/action-container.h
@@ -29,358 +29,368 @@ along with Octave; see the file COPYING.
 #include <cstddef>
 
 // This class allows registering actions in a list for later
 // execution, either explicitly or when the container goes out of
 // scope.
 
 // FIXME: is there a better name for this class?
 
-class
-action_container
+namespace octave
 {
-public:
-
-  // A generic unwind_protect element.  Knows how to run itself and
-  // discard itself.  Also, contains a pointer to the next element.
-  class elem
-  {
-  public:
-
-    friend class action_container;
-
-    elem (void) { }
-
-    // No copying!
-
-    elem (const elem&) = delete;
-
-    elem& operator = (const elem&) = delete;
-
-    virtual ~elem (void) = default;
-
-    virtual void run (void) { }
-  };
-
-  // An element that merely runs a void (*)(void) function.
-
-  class fcn_elem : public elem
-  {
-  public:
-
-    fcn_elem (void (*fptr) (void))
-      : e_fptr (fptr) { }
-
-    void run (void) { e_fptr (); }
-
-  private:
-
-    void (*e_fptr) (void);
-  };
-
-  // An element that stores a variable of type T along with a void (*) (T)
-  // function pointer, and calls the function with the parameter.
-
-  template <typename T>
-  class fcn_arg_elem : public elem
-  {
-  public:
-
-    fcn_arg_elem (void (*fcn) (T), T arg)
-      : e_fcn (fcn), e_arg (arg) { }
-
-    // No copying!
-
-    fcn_arg_elem (const fcn_arg_elem&) = delete;
-
-    fcn_arg_elem& operator = (const fcn_arg_elem&) = delete;
-
-    void run (void) { e_fcn (e_arg); }
-
-  private:
-
-    void (*e_fcn) (T);
-
-    T e_arg;
-  };
-
-  // An element that stores a variable of type T along with a
-  // void (*) (const T&) function pointer, and calls the function with
-  // the parameter.
-
-  template <typename T>
-  class fcn_crefarg_elem : public elem
+  class
+  action_container
   {
   public:
 
-    fcn_crefarg_elem (void (*fcn) (const T&), const T& arg)
-      : e_fcn (fcn), e_arg (arg) { }
+    // A generic unwind_protect element.  Knows how to run itself and
+    // discard itself.  Also, contains a pointer to the next element.
+    class elem
+    {
+    public:
+
+      friend class action_container;
+
+      elem (void) { }
+
+      // No copying!
 
-    void run (void) { e_fcn (e_arg); }
+      elem (const elem&) = delete;
+
+      elem& operator = (const elem&) = delete;
+
+      virtual ~elem (void) = default;
 
-  private:
+      virtual void run (void) { }
+    };
 
-    void (*e_fcn) (const T&);
+    // An element that merely runs a void (*)(void) function.
+
+    class fcn_elem : public elem
+    {
+    public:
 
-    T e_arg;
-  };
+      fcn_elem (void (*fptr) (void))
+        : e_fptr (fptr) { }
+
+      void run (void) { e_fptr (); }
 
-  // An element for calling a member function.
+    private:
+
+      void (*e_fptr) (void);
+    };
+
+    // An element that stores a variable of type T along with a void (*) (T)
+    // function pointer, and calls the function with the parameter.
 
-  template <typename T>
-  class method_elem : public elem
-  {
-  public:
+    template <typename T>
+    class fcn_arg_elem : public elem
+    {
+    public:
+
+      fcn_arg_elem (void (*fcn) (T), T arg)
+        : e_fcn (fcn), e_arg (arg) { }
+
+      // No copying!
+
+      fcn_arg_elem (const fcn_arg_elem&) = delete;
+
+      fcn_arg_elem& operator = (const fcn_arg_elem&) = delete;
 
-    method_elem (T *obj, void (T::*method) (void))
-      : e_obj (obj), e_method (method) { }
+      void run (void) { e_fcn (e_arg); }
+
+    private:
+
+      void (*e_fcn) (T);
+
+      T e_arg;
+    };
+
+    // An element that stores a variable of type T along with a
+    // void (*) (const T&) function pointer, and calls the function with
+    // the parameter.
 
-    method_elem (T& obj, void (T::*method) (void))
-      : e_obj (&obj), e_method (method) { }
+    template <typename T>
+    class fcn_crefarg_elem : public elem
+    {
+    public:
 
-    // No copying!
+      fcn_crefarg_elem (void (*fcn) (const T&), const T& arg)
+        : e_fcn (fcn), e_arg (arg) { }
 
-    method_elem (const method_elem&) = delete;
+      void run (void) { e_fcn (e_arg); }
+
+    private:
+
+      void (*e_fcn) (const T&);
 
-    method_elem operator = (const method_elem&) = delete;
+      T e_arg;
+    };
+
+    // An element for calling a member function.
 
-    void run (void) { (e_obj->*e_method) (); }
+    template <typename T>
+    class method_elem : public elem
+    {
+    public:
+
+      method_elem (T *obj, void (T::*method) (void))
+        : e_obj (obj), e_method (method) { }
 
-  private:
+      method_elem (T& obj, void (T::*method) (void))
+        : e_obj (&obj), e_method (method) { }
+
+      // No copying!
+
+      method_elem (const method_elem&) = delete;
 
-    T *e_obj;
+      method_elem operator = (const method_elem&) = delete;
+
+      void run (void) { (e_obj->*e_method) (); }
 
-    void (T::*e_method) (void);
-  };
+    private:
+
+      T *e_obj;
 
-  // An element for calling a member function with a single argument
+      void (T::*e_method) (void);
+    };
+
+    // An element for calling a member function with a single argument
+
+    template <typename T, typename A>
+    class method_arg_elem : public elem
+    {
+    public:
+
+      method_arg_elem (T *obj, void (T::*method) (A), A arg)
+        : e_obj (obj), e_method (method), e_arg (arg) { }
 
-  template <typename T, typename A>
-  class method_arg_elem : public elem
-  {
-  public:
+      method_arg_elem (T& obj, void (T::*method) (A), A arg)
+        : e_obj (&obj), e_method (method), e_arg (arg) { }
+
+      // No copying!
 
-    method_arg_elem (T *obj, void (T::*method) (A), A arg)
-      : e_obj (obj), e_method (method), e_arg (arg) { }
+      method_arg_elem (const method_arg_elem&) = delete;
+
+      method_arg_elem operator = (const method_arg_elem&) = delete;
+
+      void run (void) { (e_obj->*e_method) (e_arg); }
+
+    private:
 
-    method_arg_elem (T& obj, void (T::*method) (A), A arg)
-      : e_obj (&obj), e_method (method), e_arg (arg) { }
+      T *e_obj;
+
+      void (T::*e_method) (A);
+
+      A e_arg;
+    };
 
-    // No copying!
+    // An element for calling a member function with a single argument
+
+    template <typename T, typename A>
+    class method_crefarg_elem : public elem
+    {
+    public:
 
-    method_arg_elem (const method_arg_elem&) = delete;
+      method_crefarg_elem (T *obj, void (T::*method) (const A&), const A& arg)
+        : e_obj (obj), e_method (method), e_arg (arg) { }
+
+      method_crefarg_elem (T& obj, void (T::*method) (const A&), const A& arg)
+        : e_obj (&obj), e_method (method), e_arg (arg) { }
 
-    method_arg_elem operator = (const method_arg_elem&) = delete;
+      // No copying!
+
+      method_crefarg_elem (const method_crefarg_elem&) = delete;
 
-    void run (void) { (e_obj->*e_method) (e_arg); }
+      method_crefarg_elem operator = (const method_crefarg_elem&) = delete;
+
+      void run (void) { (e_obj->*e_method) (e_arg); }
 
-  private:
+    private:
+
+      T *e_obj;
 
-    T *e_obj;
+      void (T::*e_method) (const A&);
+
+      A e_arg;
+    };
+
+    // An element that stores arbitrary variable, and restores it.
 
-    void (T::*e_method) (A);
+    template <typename T>
+    class restore_var_elem : public elem
+    {
+    public:
+
+      restore_var_elem (T& ref, const T& val)
+        : e_ptr (&ref), e_val (val) { }
 
-    A e_arg;
-  };
+      // No copying!
+
+      restore_var_elem (const restore_var_elem&) = delete;
 
-  // An element for calling a member function with a single argument
+      restore_var_elem& operator = (const restore_var_elem&) = delete;
+
+      void run (void) { *e_ptr = e_val; }
 
-  template <typename T, typename A>
-  class method_crefarg_elem : public elem
-  {
-  public:
+    private:
+
+      T *e_ptr, e_val;
+    };
+
+    // Deletes a class allocated using new.
+
+    template <typename T>
+    class delete_ptr_elem : public elem
+    {
+    public:
+
+      delete_ptr_elem (T *ptr)
+        : e_ptr (ptr) { }
 
-    method_crefarg_elem (T *obj, void (T::*method) (const A&), const A& arg)
-      : e_obj (obj), e_method (method), e_arg (arg) { }
+      // No copying!
+
+      delete_ptr_elem (const delete_ptr_elem&) = delete;
+
+      delete_ptr_elem operator = (const delete_ptr_elem&) = delete;
 
-    method_crefarg_elem (T& obj, void (T::*method) (const A&), const A& arg)
-      : e_obj (&obj), e_method (method), e_arg (arg) { }
+      void run (void) { delete e_ptr; }
+
+    private:
+
+      T *e_ptr;
+    };
+
+    action_container (void) { }
 
     // No copying!
 
-    method_crefarg_elem (const method_crefarg_elem&) = delete;
-
-    method_crefarg_elem operator = (const method_crefarg_elem&) = delete;
+    action_container (const action_container&) = delete;
 
-    void run (void) { (e_obj->*e_method) (e_arg); }
+    action_container& operator = (const action_container&) = delete;
 
-  private:
-
-    T *e_obj;
+    virtual ~action_container (void) = default;
 
-    void (T::*e_method) (const A&);
-
-    A e_arg;
-  };
+    virtual void add (elem *new_elem) = 0;
 
-  // An element that stores arbitrary variable, and restores it.
-
-  template <typename T>
-  class restore_var_elem : public elem
-  {
-  public:
+    // Call to void func (void).
+    void add_fcn (void (*fcn) (void))
+    {
+      add (new fcn_elem (fcn));
+    }
 
-    restore_var_elem (T& ref, const T& val)
-      : e_ptr (&ref), e_val (val) { }
-
-    // No copying!
-
-    restore_var_elem (const restore_var_elem&) = delete;
-
-    restore_var_elem& operator = (const restore_var_elem&) = delete;
-
-    void run (void) { *e_ptr = e_val; }
+    // Call to void func (T).
+    template <typename T>
+    void add_fcn (void (*action) (T), T val)
+    {
+      add (new fcn_arg_elem<T> (action, val));
+    }
 
-  private:
-
-    T *e_ptr, e_val;
-  };
-
-  // Deletes a class allocated using new.
-
-  template <typename T>
-  class delete_ptr_elem : public elem
-  {
-  public:
+    // Call to void func (const T&).
+    template <typename T>
+    void add_fcn (void (*action) (const T&), const T& val)
+    {
+      add (new fcn_crefarg_elem<T> (action, val));
+    }
 
-    delete_ptr_elem (T *ptr)
-      : e_ptr (ptr) { }
-
-    // No copying!
-
-    delete_ptr_elem (const delete_ptr_elem&) = delete;
-
-    delete_ptr_elem operator = (const delete_ptr_elem&) = delete;
-
-    void run (void) { delete e_ptr; }
+    // Call to T::method (void).
+    template <typename T>
+    void add_method (T *obj, void (T::*method) (void))
+    {
+      add (new method_elem<T> (obj, method));
+    }
 
-  private:
-
-    T *e_ptr;
-  };
-
-  action_container (void) { }
-
-  // No copying!
-
-  action_container (const action_container&) = delete;
-
-  action_container& operator = (const action_container&) = delete;
+    template <typename T>
+    void add_method (T& obj, void (T::*method) (void))
+    {
+      add (new method_elem<T> (obj, method));
+    }
 
-  virtual ~action_container (void) = default;
-
-  virtual void add (elem *new_elem) = 0;
-
-  // Call to void func (void).
-  void add_fcn (void (*fcn) (void))
-  {
-    add (new fcn_elem (fcn));
-  }
+    // Call to T::method (A).
+    template <typename T, typename A>
+    void add_method (T *obj, void (T::*method) (A), A arg)
+    {
+      add (new method_arg_elem<T, A> (obj, method, arg));
+    }
 
-  // Call to void func (T).
-  template <typename T>
-  void add_fcn (void (*action) (T), T val)
-  {
-    add (new fcn_arg_elem<T> (action, val));
-  }
+    template <typename T, typename A>
+    void add_method (T& obj, void (T::*method) (A), A arg)
+    {
+      add (new method_arg_elem<T, A> (obj, method, arg));
+    }
 
-  // Call to void func (const T&).
-  template <typename T>
-  void add_fcn (void (*action) (const T&), const T& val)
-  {
-    add (new fcn_crefarg_elem<T> (action, val));
-  }
+    // Call to T::method (const A&).
+    template <typename T, typename A>
+    void add_method (T *obj, void (T::*method) (const A&), const A& arg)
+    {
+      add (new method_crefarg_elem<T, A> (obj, method, arg));
+    }
 
-  // Call to T::method (void).
-  template <typename T>
-  void add_method (T *obj, void (T::*method) (void))
-  {
-    add (new method_elem<T> (obj, method));
-  }
+    template <typename T, typename A>
+    void add_method (T& obj, void (T::*method) (const A&), const A& arg)
+    {
+      add (new method_crefarg_elem<T, A> (obj, method, arg));
+    }
 
-  template <typename T>
-  void add_method (T& obj, void (T::*method) (void))
-  {
-    add (new method_elem<T> (obj, method));
-  }
+    // Call to delete (T*).
 
-  // Call to T::method (A).
-  template <typename T, typename A>
-  void add_method (T *obj, void (T::*method) (A), A arg)
-  {
-    add (new method_arg_elem<T, A> (obj, method, arg));
-  }
+    template <typename T>
+    void add_delete (T *obj)
+    {
+      add (new delete_ptr_elem<T> (obj));
+    }
 
-  template <typename T, typename A>
-  void add_method (T& obj, void (T::*method) (A), A arg)
-  {
-    add (new method_arg_elem<T, A> (obj, method, arg));
-  }
-
-  // Call to T::method (const A&).
-  template <typename T, typename A>
-  void add_method (T *obj, void (T::*method) (const A&), const A& arg)
-  {
-    add (new method_crefarg_elem<T, A> (obj, method, arg));
-  }
+    // Protect any variable.
+    template <typename T>
+    void protect_var (T& var)
+    {
+      add (new restore_var_elem<T> (var, var));
+    }
 
-  template <typename T, typename A>
-  void add_method (T& obj, void (T::*method) (const A&), const A& arg)
-  {
-    add (new method_crefarg_elem<T, A> (obj, method, arg));
-  }
+    // Protect any variable, value given.
+    template <typename T>
+    void protect_var (T& var, const T& val)
+    {
+      add (new restore_var_elem<T> (var, val));
+    }
 
-  // Call to delete (T*).
+    operator bool (void) const { return ! empty (); }
 
-  template <typename T>
-  void add_delete (T *obj)
-  {
-    add (new delete_ptr_elem<T> (obj));
-  }
+    virtual void run_first (void) = 0;
 
-  // Protect any variable.
-  template <typename T>
-  void protect_var (T& var)
-  {
-    add (new restore_var_elem<T> (var, var));
-  }
+    void run (size_t num)
+    {
+      if (num > size ())
+        num = size ();
 
-  // Protect any variable, value given.
-  template <typename T>
-  void protect_var (T& var, const T& val)
-  {
-    add (new restore_var_elem<T> (var, val));
-  }
+      for (size_t i = 0; i < num; i++)
+        run_first ();
+    }
 
-  operator bool (void) const { return ! empty (); }
-
-  virtual void run_first (void) = 0;
+    void run (void) { run (size ()); }
 
-  void run (size_t num)
-  {
-    if (num > size ())
-      num = size ();
+    virtual void discard_first (void) = 0;
 
-    for (size_t i = 0; i < num; i++)
-      run_first ();
-  }
+    void discard (size_t num)
+    {
+      if (num > size ())
+        num = size ();
 
-  void run (void) { run (size ()); }
+      for (size_t i = 0; i < num; i++)
+        discard_first ();
+    }
 
-  virtual void discard_first (void) = 0;
+    void discard (void) { discard (size ()); }
 
-  void discard (size_t num)
-  {
-    if (num > size ())
-      num = size ();
+    virtual size_t size (void) const = 0;
 
-    for (size_t i = 0; i < num; i++)
-      discard_first ();
-  }
+    bool empty (void) const { return size () == 0; }
+  };
+}
 
-  void discard (void) { discard (size ()); }
+#if defined (OCTAVE_USE_DEPRECATED_FUNCTIONS)
 
-  virtual size_t size (void) const = 0;
-
-  bool empty (void) const { return size () == 0; }
-};
+OCTAVE_DEPRECATED (4.4, "use 'octave::action_container' instead")
+typedef octave::action_container action_container;
 
 #endif
+
+#endif
