# HG changeset patch
# User jwe
# Date 1082662694 0
#      Thu Apr 22 19:38:14 2004 +0000
# Node ID 05d464a13f43fe29f162bd7126976f35579af14e
# Parent  e674c7111b887c32ed75e00968b16172548ef017
[project @ 2004-04-22 19:38:14 by jwe]

diff --git a/liboctave/Array.cc b/liboctave/Array.cc
--- a/liboctave/Array.cc
+++ b/liboctave/Array.cc
@@ -1999,17 +1999,17 @@ Array<T>::index2 (idx_vector& idx_arg, i
   else if (nr == 1 && nc == 1)
     {
       Array<T> tmp = Array<T>::index1 (idx_arg, resize_ok);
 
       int len = tmp.length ();
 
       if (len == 0 && idx_arg.one_zero_only ())
 	retval = Array<T> (tmp, dim_vector (0, 0));
-      else
+      else if (len >= idx_orig_dims.numel ())
 	retval = Array<T> (tmp, idx_orig_dims);
     }
   else if (nr == 1 || nc == 1)
     {
       // If indexing a vector with a matrix, return value has same
       // shape as the index.  Otherwise, it has same orientation as
       // indexed object.
 
@@ -2020,17 +2020,17 @@ Array<T>::index2 (idx_vector& idx_arg, i
       if ((len != 0 && idx_arg.one_zero_only ())
 	  || idx_orig_rows == 1 || idx_orig_columns == 1)
 	{
 	  if (nr == 1)
 	    retval = Array<T> (tmp, dim_vector (1, len));
 	  else
 	    retval = Array<T> (tmp, dim_vector (len, 1));
 	}
-      else
+      else if (len >= idx_orig_dims.numel ())
 	retval = Array<T> (tmp, idx_orig_dims);
     }
   else
     {
       if (liboctave_wfi_flag
 	  && ! (idx_arg.one_zero_only ()
 		&& idx_orig_rows == nr
 		&& idx_orig_columns == nc))
@@ -2096,18 +2096,23 @@ Array<T>::indexN (idx_vector& ra_idx, in
       retval = Array<T> (*this, dim_vector (orig_len, 1));
     }
   else if (length () == 1)
     {
       // Only one element in array.
 
       Array<T> tmp = Array<T>::index (ra_idx, resize_ok);
 
-      if (tmp.length () != 0)
-	retval = Array<T> (tmp, idx_orig_dims);
+      int len = tmp.length ();
+
+      if (len != 0)
+	{
+	  if (len >= idx_orig_dims.numel ())
+	    retval = Array<T> (tmp, idx_orig_dims);
+	}
       else
 	retval = Array<T> (tmp, dim_vector (0, 0));
     }
   else if (vector_equivalent (dims ()))
     {
       // We're getting elements from a vector equivalent i.e. (1x4x1).
 
       Array<T> tmp = Array<T>::index (ra_idx, resize_ok);
@@ -2149,17 +2154,17 @@ Array<T>::indexN (idx_vector& ra_idx, in
 		  if ((dims ())(i) == 1)
 		    new_dims(i) = 1;
 	        }
 
 	      new_dims.chop_trailing_singletons ();
 
 	      retval = Array<T> (tmp, new_dims);
 	    }
-	  else
+	  else if (tmp.length () >= idx_orig_dims.numel ())
 	    retval = Array<T> (tmp, idx_orig_dims);
 
 	  (*current_liboctave_error_handler)
 	    ("I do not know what to do here yet!");
 	}
     }
   else
     {
diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,13 @@
+2004-04-22  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* Array.cc (Array<T>::index2, Array<T>::indexN):
+	Don't set invalid dimensions on return value.
+
 2004-04-21  John W. Eaton  <jwe@octave.org>
 
 	* mx-inlines.cc (MX_ND_REDUCTION): Chop trailing singletons.
 
 2004-04-06  David Bateman  <dbateman@free.fr>
 
 	* Array.cc (Array<T>::resize_no_fill (const dim_vector& dv),
 	Array<T>::resize_and_fill (const dim_vector& dv, const T& val)):
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,13 @@
+2004-04-22  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* pt-colon.cc (tree_colon_expression::rvalue): Also check for
+	error_state after evaluating each subexpression.
+
 2004-04-22  David Bateman  <dbateman@free.fr>
 
 	* ov-base-scalar.h (octave_base_scalar<ST>::permute): New function.
 
 	* ov-base-mat.cc (octave_base_matrix<MT>::is_true): Make N-d aware.
 
 2004-04-22  John W. Eaton  <jwe@octave.org>
 
diff --git a/src/pt-colon.cc b/src/pt-colon.cc
--- a/src/pt-colon.cc
+++ b/src/pt-colon.cc
@@ -91,35 +91,35 @@ tree_colon_expression::rvalue (void)
 
   MAYBE_DO_BREAKPOINT;
   
   if (error_state || ! op_base || ! op_limit)
     return retval;
 
   octave_value tmp = op_base->rvalue ();
 
-  if (tmp.is_undefined ())
+  if (error_state || tmp.is_undefined ())
     {
-      eval_error ("invalid null value in colon expression");
+      eval_error ("invalid value in colon expression");
       return retval;
     }
 
   double xbase = tmp.double_value ();
 
   if (error_state)
     {
       eval_error ("colon expression elements must be scalars");
       return retval;
     }
 
   tmp = op_limit->rvalue ();
 
-  if (tmp.is_undefined ())
+  if (error_state || tmp.is_undefined ())
     {
-      eval_error ("invalid null value in colon expression");
+      eval_error ("invalid value in colon expression");
       return retval;
     }
 
   double xlimit = tmp.double_value ();
 
   if (error_state)
     {
       eval_error ("colon expression elements must be scalars");
@@ -127,19 +127,19 @@ tree_colon_expression::rvalue (void)
     }
 
   double xinc = 1.0;
 
   if (op_increment)
     {
       tmp = op_increment->rvalue ();
 
-      if (tmp.is_undefined ())
+      if (error_state || tmp.is_undefined ())
 	{
-	  eval_error ("invalid null value in colon expression");
+	  eval_error ("invalid value in colon expression");
 	  return retval;
 	}
 
       xinc = tmp.double_value ();
 
       if (error_state)
 	{
 	  eval_error ("colon expression elements must be scalars");
