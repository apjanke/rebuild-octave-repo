# HG changeset patch
# User Rik <rik@octave.org>
# Date 1380738711 25200
#      Wed Oct 02 11:31:51 2013 -0700
# Node ID 8a186cd5b9a6b1788faf3d1afbd94eeb38ee9f29
# Parent  5eae41c8c07f54eb26c4f814bf61de287ff5e5aa
legend.m: Updating of font properties which affect box size, now redraws correctly sized legend.

* scripts/plot/legend.m: Change listener for "fontsize", "fontunits", and
"interpreter" to point to updatelegend().  Cut off listener recursive loops by
deleting listener properties for "location", "orientation", "string", and
"textposition" before modifying values and then re-installing listener
functions.

diff --git a/scripts/plot/legend.m b/scripts/plot/legend.m
--- a/scripts/plot/legend.m
+++ b/scripts/plot/legend.m
@@ -231,17 +231,17 @@ function [hleg, hleg_obj, hplot, labels]
 
   ## Find any existing legend object on figure
   hlegend = [];
   fkids = get (fig, "children");
   for i = 1 : numel (fkids)
     if (   strcmp (get (fkids(i), "type"), "axes")
         && strcmp (get (fkids(i), "tag"), "legend"))
       udata = get (fkids(i), "userdata");
-      if (! isempty (intersect (udata.handle, ca)))
+      if (any (udata.handle == ca))
         hlegend = fkids(i);
         break;
       endif
     endif
   endfor
 
   if (nargs == 1)
     arg = varargin{1};
@@ -327,39 +327,35 @@ function [hleg, hleg_obj, hplot, labels]
   elseif (strcmp (box, "on"))
     if (! isempty (hlegend))
       set (hlegend, "box", "on", "visible", "on");
     endif
   elseif (strcmp (box, "off"))
     if (! isempty (hlegend))
       set (hlegend, "box", "off", "visible", "off");
     endif
-  elseif (! have_labels && !(strcmp (location, "default") &&
-                             strcmp (orientation, "default")))
+  elseif (! have_labels && ! (strcmp (location, "default") &&
+                              strcmp (orientation, "default")))
     ## Changing location or orientation of existing legend
     if (! isempty (hlegend))
-      hax = getfield (get (hlegend, "userdata"), "handle");
-      [hplots, text_strings] = __getlegenddata__ (hlegend);
-
       if (strcmp (location, "default"))
-        h = legend (hax, hplots, text_strings, "orientation", orientation);
+        set (hlegend, "orientation", orientation);
       elseif (strcmp (orientation, "default"))
         if (outside)
-          h = legend (hax, hplots, text_strings, "location",
-                      strcat (location, "outside"));
+          set (hlegend, "location", [location "outside"]);
         else
-          h = legend (hax, hplots, text_strings, "location", location);
+          set (hlegend, "location", location);
         endif
       else
         if (outside)
-          h = legend (hax, hplots, text_strings, "location",
-                      strcat (location, "outside"), "orientation", orientation);
+          set (hlegend, "location", [location "outside"],
+                        "orientation", orientation);
         else
-          h = legend (hax, hplots, text_strings, "location", location,
-                      "orientation", orientation);
+          set (hlegend, "location", location,
+                        "orientation", orientation);
         endif
       endif
     endif
   else
     ## Create new legend
     hobjects = [];
     hplots  = [];
     text_strings = {};
@@ -539,38 +535,35 @@ function [hleg, hleg_obj, hplot, labels]
           orientation = "vertical";
         endif
         box = "on";
       endif
 
       ## Get axis size and fontsize in points.
       ## Rely on listener to handle coversion.
       units = get (ca(1), "units");
-      #fontunits = get (ca(1), "fontunits");
       unwind_protect
         set (ca(1), "units", "points");
         set (ca(1), "fontunits", "points");
         if (isempty (hlegend) || ! isprop (hlegend, "unmodified_axes_position"))
           unmodified_axes_position = get (ca(1), "position");
           unmodified_axes_outerposition = get (ca(1), "outerposition");
         else
           unmodified_axes_position = get (hlegend, "unmodified_axes_position");
           unmodified_axes_outerposition = get (hlegend, ...
                                                "unmodified_axes_outerposition");
         endif
         ca_pos = unmodified_axes_position;
         ca_outpos = unmodified_axes_outerposition;
-      #  ca_fontsize = get (ca(1), "fontsize");
         tightinset = get (ca(1), "tightinset");
         for i = 2 : numel (ca)
           tightinset = max (tightinset, get (ca(i), "tightinset"));
         endfor
       unwind_protect_cleanup
         set (ca(1), "units", units);
-      #  set (ca(1), "fontunits", fontunits);
       end_unwind_protect
 
       ## Padding between legend entries horizontally and vertically
       xpad = 2;
       ypad = 2;
 
       linelength = 15;
 
@@ -599,26 +592,26 @@ function [hleg, hleg_obj, hplot, labels]
           addprops = false;
           axes (hlegend);
           delete (get (hlegend, "children"));
         endif
         if (addprops)
           addproperty ("edgecolor", hlegend, "color", [0, 0, 0]);
           addproperty ("textcolor", hlegend, "color", [0, 0, 0]);
           locations = {"north", "south", "east", "west", ...
-                       "northeast", "southeast", "northwest", "southwest", ...
+                       "{northeast}", "southeast", "northwest", "southwest", ...
                        "northoutside", "southoutside", ...
                        "eastoutside", "westoutside", ...
                        "northeastoutside", "southeastoutside", ...
                        "northwestoutside", "southwestoutside"};
           addproperty ("location", hlegend, "radio", strjoin (locations, "|"));
           addproperty ("orientation", hlegend, "radio",
                        "{vertical}|horizontal");
           addproperty ("string", hlegend, "any", text_strings);
-          addproperty ("textposition", hlegend, "radio", "{left}|right");
+          addproperty ("textposition", hlegend, "radio", "left|{right}");
         endif
         ## Inherit visual properties from legend object
         fontunits = get (hlegend, "fontunits");
         fontangle = get (hlegend, "fontangle");
         fontname = get (hlegend, "fontname");
         fontsize = get (hlegend, "fontsize");
         fontweight = get (hlegend, "fontweight");
         interpreter = get (hlegend, "interpreter");
@@ -872,19 +865,19 @@ function [hleg, hleg_obj, hplot, labels]
                            {@updateline, hlegend, linelength});
 
             case "patch"
               facecolor = get (hplots(k), "facecolor");
               edgecolor = get (hplots(k), "edgecolor");
               cdata = get (hplots(k), "cdata");
               if (! strcmp (facecolor, "none") || ! strcmp (edgecolor, "none"))
                 p1 = patch ("xdata", ([0, linelength, linelength, 0] +
-                                     xoffset + xk * xstep) / lpos(3),
-                           "ydata", (lpos(4) - yoffset -
-                                     [yk-0.3, yk-0.3, yk+0.3, yk+0.3] .* ystep) / lpos(4),
+                                      xoffset + xk * xstep) / lpos(3),
+                            "ydata", (lpos(4) - yoffset -
+                                      [yk-0.3, yk-0.3, yk+0.3, yk+0.3] .* ystep) / lpos(4),
                            "facecolor", facecolor, "edgecolor", edgecolor,
                            "cdata", cdata, "userdata", hplots(k));
                 hobjects = [hobjects, p1];
               endif
 
             case "surface"
               ## FIXME: Would be nice to do something here
 
@@ -959,42 +952,58 @@ function [hleg, hleg_obj, hplot, labels]
           addlistener (hlegend, "visible", {@hideshowlegend, ca, ...
                                             unmodified_axes_position, ...
                                             new_pos});
         else
           set (hlegend, "deletefcn", {@deletelegend2, ca, [], [], t1, hplots});
         endif
 
         if (! addprops)
+          ## Remove listener's on existing legend temporarily
+          dellistener (hlegend, "location");
+          dellistener (hlegend, "orientation");
+          dellistener (hlegend, "string");
+          dellistener (hlegend, "textposition");
+        endif
+
+        if (! addprops)
           set (hlegend, "string", text_strings);
         endif
 
         if (outside)
           set (hlegend, "location", [location "outside"],
-               "orientation", orientation, "textposition", textpos);
+                        "orientation", orientation, "textposition", textpos);
         else
           set (hlegend, "location", location, "orientation", orientation,
-               "textposition", textpos);
+                        "textposition", textpos);
         endif
         if (addprops)
           addlistener (hlegend, "edgecolor", @updatelegendtext);
-          addlistener (hlegend, "textcolor", @updatelegendtext);
           addlistener (hlegend, "fontangle", @updatelegendtext);
           addlistener (hlegend, "fontname", @updatelegendtext);
-          addlistener (hlegend, "fontsize", @updatelegendtext);
-          addlistener (hlegend, "fontunits", @updatelegendtext);
           addlistener (hlegend, "fontweight", @updatelegendtext);
-          addlistener (hlegend, "interpreter", @updatelegendtext);
+          addlistener (hlegend, "textcolor", @updatelegendtext);
+          ## Properties which could change size of box, such as fontsize,
+          ## require legend to be redrawn.
+          addlistener (hlegend, "fontsize", @updatelegend);
+          addlistener (hlegend, "fontunits", @updatelegend);
+          addlistener (hlegend, "interpreter", @updatelegend);
           addlistener (hlegend, "location", @updatelegend);
           addlistener (hlegend, "orientation", @updatelegend);
           addlistener (hlegend, "string", @updatelegend);
           addlistener (hlegend, "textposition", @updatelegend);
-          ## FIXME: need to add listeners for tighinset and position
+          ## FIXME: need to add listeners for tightinset and position
           ##        addlistener (ca, "tightinset", @update????);
           ##        addlistener (ca, "position", @update????);
+        else
+          ## Restore certain listeners
+          addlistener (hlegend, "location", @updatelegend);
+          addlistener (hlegend, "orientation", @updatelegend);
+          addlistener (hlegend, "string", @updatelegend);
+          addlistener (hlegend, "textposition", @updatelegend);
         endif
       unwind_protect_cleanup
         set (fig, "currentaxes", curaxes);
       end_unwind_protect
     endif
   endif
 
   if (nargout > 0)
@@ -1031,22 +1040,26 @@ function updatelegend (h, ~)
     unwind_protect_cleanup
       recursive = false;
     end_unwind_protect
   endif
 
 endfunction
 
 function updatelegendtext (h, ~)
-  htext = findobj (get (h, "children"), "type", "text");
+  kids = get (h, "children");
+  htext = [];
+  for i = 1:numel (kids)
+    if (strcmp (get (kids(i), "type"), "text"))
+      htext(end+1) = kids(i);
+    endif
+  endfor
 
-  tprops = {"interpreter", "fontunits", "fontangle", "fontname", "fontsize",...
-            "fontweight", "color"};
-  lprops = {"interpreter", "fontunits", "fontangle", "fontname", "fontsize",...
-            "fontweight", "textcolor"};
+  tprops = {"fontangle", "fontname", "fontweight", "color"};
+  lprops = {"fontangle", "fontname", "fontweight", "textcolor"};
   set (htext, tprops, get (h, lprops));
 
   ec = get (h, "edgecolor");
   set (h, "xcolor", ec, "ycolor", ec);
 endfunction
 
 function hideshowlegend (h, ~, ca, pos1, pos2)
   isvisible = strcmp (get (h, "visible"), "off");
@@ -1084,81 +1097,80 @@ function deletelegend1 (h, ~, ca)
   endif
 endfunction
 
 function deletelegend2 (h, ~, ca, pos, outpos, t1, hplots)
   for i = 1 : numel (ca)
     if (isaxes (ca(i))
         && (isempty (gcbf ()) || strcmp (get (gcbf (), "beingdeleted"), "off"))
         && strcmp (get (ca(i), "beingdeleted"), "off"))
-      if (!isempty (pos) && !isempty(outpos))
+      if (! isempty (pos) && ! isempty (outpos))
         units = get (ca(i), "units");
         unwind_protect
           set (ca(i), "units", "points");
           set (ca(i), "position", pos, "deletefcn", "");
         unwind_protect_cleanup
           set (ca(i), "units", units);
         end_unwind_protect
       endif
     endif
   endfor
   set (t1, "deletefcn", "");
   delete (t1);
   for i = 1 : numel (hplots)
-    if (ishandle (hplots(i)) && strcmp (get (hplots (i), "type"), "line"))
+    if (ishandle (hplots(i)) && strcmp (get (hplots(i), "type"), "line"))
       dellistener (hplots(i), "color");
       dellistener (hplots(i), "linestyle");
       dellistener (hplots(i), "marker");
       dellistener (hplots(i), "markeredgecolor");
       dellistener (hplots(i), "markerfacecolor");
       dellistener (hplots(i), "markersize");
       dellistener (hplots(i), "displayname");
     endif
   endfor
 endfunction
 
 function updateline (h, ~, hlegend, linelength)
+
   lm = [];
   ll = [];
   kids = get (hlegend, "children");
   for i = 1 : numel (kids)
     if (get (kids(i), "userdata") == h
         && strcmp (get (kids(i), "type"), "line"))
-      if (strcmp (get (kids (i), "marker"), "none"))
+      if (strcmp (get (kids(i), "marker"), "none"))
         ll = kids(i);
       else
         lm = kids(i);
       endif
     endif
   endfor
 
-  linestyle = get (h, "linestyle");
-  marker = get (h, "marker");
-  displayname = get (h, "displayname");
+  [linestyle, marker, displayname] = ...
+    get (h, {"linestyle", "marker", "displayname"}){:};
 
   if ((isempty (displayname)
        || (strcmp (marker, "none") && strcmp (linestyle, "none")))
        && (! isempty (lm) || isempty (ll)))
-    ## An element was removed from the legend. Need to recall the
-    ## legend function to recreate a new legend
+    ## An element was removed from the legend.
+    ## Need to call the legend function to re-create a new legend.
     [hplots, text_strings] = __getlegenddata__ (hlegend);
-    idx = find (hplots == h, 1);
-    if (idx)
-      hplots(idx) = [];
-      text_strings(idx) = [];
-    endif
+    idx = (hplots == h);
+    hplots(idx) = [];
+    text_strings(idx) = [];
     legend (hplots, text_strings);
   elseif ((! isempty (displayname)
            && (! strcmp (marker, "none") || ! strcmp (linestyle, "none")))
           && isempty (lm) && isempty (ll))
-    ## An element was added to the legend.  Need to re-call the
+    ## An element was added to the legend.
+    ## Need to call the legend function to re-create a new legend.
     ## legend function to recreate a new legend.
     [hplots, text_strings] = __getlegenddata__ (hlegend);
-    hplots = [hplots, h];
-    text_strings = {text_strings{:}, displayname};
+    hplots(end+1) = h;
+    text_strings(end+1) = displayname;
     legend (hplots, text_strings);
   else
     if (! isempty (ll))
       ypos1 = get (ll,"ydata");
       xpos1 = get (ll,"xdata");
       ypos2 = ypos1(1);
       xpos2 = sum (xpos1) / 2;
       delete (ll);
