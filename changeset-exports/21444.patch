# HG changeset patch
# User Rik <rik@octave.org>
# Date 1457879667 25200
#      Sun Mar 13 07:34:27 2016 -0700
# Node ID 74b07936fd05086f0046a3ab6b20c98dcdde2e4b
# Parent  acd6e203031d942e6454b9508099289b1f4c9726
lo-utils.cc: Add note about inevitable memory leak from using putenv.

* lo-utils.cc: Add note about inevitable memory leak from using putenv.

diff --git a/liboctave/util/lo-utils.cc b/liboctave/util/lo-utils.cc
--- a/liboctave/util/lo-utils.cc
+++ b/liboctave/util/lo-utils.cc
@@ -92,16 +92,19 @@ strsave (const char *s)
 
 // FIXME: make this do the right thing if we don't have a SMART_PUTENV.
 
 void
 octave_putenv (const std::string& name, const std::string& value)
 {
   int new_len = name.length () + value.length () + 2;
 
+  // FIXME: This leaks memory, but so would a call to setenv.
+  // Short of extreme measures to track memory, altering the environment
+  // always leaks memory, but the saving grace is that the leaks are small.
   char *new_item = static_cast<char*> (gnulib::malloc (new_len));
 
   sprintf (new_item, "%s=%s", name.c_str (), value.c_str ());
 
   // As far as I can see there's no way to distinguish between the
   // various errors; putenv doesn't have errno values.
 
   if (gnulib::putenv (new_item) < 0)
