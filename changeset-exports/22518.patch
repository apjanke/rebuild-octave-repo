# HG changeset patch
# User Markus MÃ¼tzel <markus.muetzel@gmx.de>
# Date 1474381973 -7200
#      Tue Sep 20 16:32:53 2016 +0200
# Node ID e15b89c4c2dda57f218140aa6990c85253c74215
# Parent  34f98c1e4d568a59e6aecb2eb6abe0a9a5c34419
patch.m: Update docstring and demo (bug #47672)

* patch.m: Update docstring and change demo #4 for input mixed between
property/value pairs and structures.

Reviewed and pushed by Andreas Weber <andy.weber.aw@gmail.com>

diff --git a/scripts/plot/draw/patch.m b/scripts/plot/draw/patch.m
--- a/scripts/plot/draw/patch.m
+++ b/scripts/plot/draw/patch.m
@@ -15,19 +15,19 @@
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {} {} patch ()
 ## @deftypefnx {} {} patch (@var{x}, @var{y}, @var{c})
 ## @deftypefnx {} {} patch (@var{x}, @var{y}, @var{z}, @var{c})
-## @deftypefnx {} {} patch (@var{fv})
 ## @deftypefnx {} {} patch ("Faces", @var{faces}, "Vertices", @var{verts}, @dots{})
 ## @deftypefnx {} {} patch (@dots{}, @var{prop}, @var{val}, @dots{})
+## @deftypefnx {} {} patch (@dots{}, @var{propstruct}, @dots{})
 ## @deftypefnx {} {} patch (@var{hax}, @dots{})
 ## @deftypefnx {} {@var{h} =} patch (@dots{})
 ## Create patch object in the current axes with vertices at locations
 ## (@var{x}, @var{y}) and of color @var{c}.
 ##
 ## If the vertices are matrices of size @nospell{MxN} then each polygon patch
 ## has M vertices and a total of N polygons will be created.  If some polygons
 ## do not have M vertices use NaN to represent "no vertex".  If the @var{z}
@@ -50,19 +50,18 @@
 ## @nospell{Nx3} (3-D patch).  The @nospell{MxN} @qcode{"Faces"} matrix
 ## describes M polygons having N vertices---each row describes a
 ## single polygon and each column entry is an index into the
 ## @qcode{"Vertices"} matrix to identify a vertex.  The patch object
 ## can be created by directly passing the property/value pairs
 ## @qcode{"Vertices"}/@var{verts}, @qcode{"Faces"}/@var{faces} as
 ## inputs.
 ##
-## A third input form is to create a structure @var{fv} with the fields
-## @qcode{"vertices"}, @qcode{"faces"}, and optionally
-## @qcode{"facevertexcdata"}.
+## Instead of using property/value pairs, any property can be set by passing a
+## structure @var{propstruct} with the respective field names.
 ##
 ## If the first argument @var{hax} is an axes handle, then plot into this axis,
 ## rather than the current axes returned by @code{gca}.
 ##
 ## The optional return value @var{h} is a graphics handle to the created patch
 ## object.
 ##
 ## Implementation Note: Patches are highly configurable objects.  To truly
@@ -145,19 +144,19 @@ endfunction
 %! clf;
 %! t1 = (1/16:1/8:1)' * 2*pi;
 %! t2 = ((1/16:1/16:1)' + 1/32) * 2*pi;
 %! x1 = sin (t1) - 0.8;
 %! y1 = cos (t1);
 %! x2 = sin (t2) + 0.8;
 %! y2 = cos (t2);
 %! vert = [x1, y1; x2, y2];
-%! fac = [1:8,NaN(1,8);9:24];
-%! patch ("Faces",fac, "Vertices",vert, ...
-%!        "FaceVertexCData",[0, 1, 0; 0, 0, 1], "FaceColor", "flat");
+%! p.Faces = [1:8,NaN(1,8);9:24];
+%! p.FaceColor = "flat";
+%! patch (p, 'Vertices', vert, 'FaceVertexCData', [0, 1, 0; 0, 0, 1]);
 %! title ("patch() with specification of color for each vertex");
 
 %!demo
 %! ## Property change on multiple patches
 %! clf;
 %! t1 = (1/16:1/8:1)' * 2*pi;
 %! t2 = ((1/16:1/8:1)' + 1/32) * 2*pi;
 %! x1 = sin (t1) - 0.8;
