# HG changeset patch
# User jwe
# Date 1076111806 0
#      Fri Feb 06 23:56:46 2004 +0000
# Node ID 3f28979bbe2c17f4a44cd76702c0b3e26c582203
# Parent  c43a0c0b6d44cfe76bdc65d238c6f53f1ab478b8
[project @ 2004-02-06 23:56:46 by jwe]

diff --git a/liboctave/Array-util.cc b/liboctave/Array-util.cc
--- a/liboctave/Array-util.cc
+++ b/liboctave/Array-util.cc
@@ -34,17 +34,17 @@ index_in_bounds (const Array<int>& ra_id
   bool retval = true;
 
   int n = ra_idx.length ();
 
   if (n == dimensions.length ())
     {
       for (int i = 0; i < n; i++)
 	{
-	  if (ra_idx(i) < 0 || ra_idx(i) > dimensions(i))
+	  if (ra_idx(i) < 0 || ra_idx(i) >= dimensions(i))
 	    {
 	      retval = false;
 	      break;
 	    }
 	}
     }
   else
     retval = false;
@@ -231,35 +231,16 @@ vector_equivalent (const Array<int>& ra_
 	    return false;
 	}
     }
 
   return true;
 }
 
 bool
-equal_arrays (const dim_vector& a, const dim_vector& b)
-{
-  bool retval = true;
-
-  if (a.length () != b.length ())
-    retval = false;
-  else
-    {
-      for (int i = 0; i < a.length (); i++)
-	{
-	  if (a(i) != b(i))
-	    retval = false;
-	}
-    }
-
-  return retval;
-}
-
-bool
 all_ok (const Array<idx_vector>& ra_idx)
 {
   bool retval = true;
 
   int n = ra_idx.length ();
 
   for (int i = 0; i < n; i++)
     {
@@ -288,35 +269,16 @@ any_orig_empty (const Array<idx_vector>&
 	  break;
 	}
     }
 
   return retval;
 }
 
 bool
-any_zero_len (const dim_vector& frozen_lengths)
-{
-  bool retval = false;
-
-  int n = frozen_lengths.length ();
-
-  for (int i = 0; i < n; i++)
-    {
-      if (frozen_lengths(i) == 0)
-	{
-	  retval = true;
-	  break;
-	}
-    }
-
-  return retval;
-}
-
-bool
 all_colon_equiv (const Array<idx_vector>& ra_idx,
 		 const dim_vector& frozen_lengths)
 {
   bool retval = true;
 
   int idx_n = ra_idx.length ();
 
   int n = frozen_lengths.length ();
@@ -388,45 +350,29 @@ get_elt_idx (const Array<idx_vector>& ra
   Array<int> retval (n);
 
   for (int i = 0; i < n; i++)
     retval(i) = ra_idx(i).elem (result_idx(i));
 
   return retval;
 }
 
-int
-number_of_elements (const dim_vector ra_idx)
-{
-  int retval = 1;
-
-  int n = ra_idx.length ();
-
-  if (n == 0)
-    retval = 0;
-
-  for (int i = 0; i < n; i++)
-    retval *= ra_idx(i);
-
-  return retval;
-}
-
 Array<int>
 get_ra_idx (int idx, const dim_vector& dims)
 {
   Array<int> retval;
 
   int n_dims = dims.length ();
 
   retval.resize (n_dims);
 
   for (int i = 0; i < n_dims; i++)
     retval(i) = 0;
 
-  assert (idx > 0 || idx < number_of_elements (dims));
+  assert (idx > 0 || idx < dims.numel ());
 
   for (int i = 0; i < idx; i++)
     increment_index (retval, dims);
 
   // XXX FIXME XXX -- the solution using increment_index is not
   // efficient.
 
 #if 0
diff --git a/liboctave/Array-util.h b/liboctave/Array-util.h
--- a/liboctave/Array-util.h
+++ b/liboctave/Array-util.h
@@ -51,41 +51,32 @@ extern Array<int> conv_to_int_array (con
 
 extern Array<idx_vector> conv_to_array (const idx_vector *tmp, const int len);
 
 extern dim_vector freeze (Array<idx_vector>& ra_idx,
 			  const dim_vector& dimensions, int resize_ok);
 
 extern bool vector_equivalent (const Array<int>& ra_idx);
 
-extern bool equal_arrays (const dim_vector& a, const dim_vector& b);
-
 extern bool all_ok (const Array<idx_vector>& ra_idx);
 
 extern bool any_orig_empty (const Array<idx_vector>& ra_idx);
 
-extern bool any_zero_len (const dim_vector& frozen_lengths);
-
-extern dim_vector get_zero_len_size (const dim_vector& frozen_lengths,
-				     const dim_vector& dimensions);
-
 extern bool all_colon_equiv (const Array<idx_vector>& ra_idx,
 			     const dim_vector& frozen_lengths);
 
 extern bool is_in (int num, const idx_vector& idx);
 
 extern int how_many_lgt (const int num, idx_vector& idxv);
 
 extern bool all_ones (const Array<int>& arr);
 
 extern Array<int> get_elt_idx (const Array<idx_vector>& ra_idx,
 			       const Array<int>& result_idx);
 
-extern int number_of_elements (const dim_vector ra_idx);
-
 extern Array<int> get_ra_idx (int idx, const dim_vector& dims);
 
 extern dim_vector short_freeze (Array<idx_vector>& ra_idx,
 				const dim_vector& dimensions,
 				int resize_ok);
 
 extern Array<int> calc_permutated_idx (const Array<int>& old_idx, 
 				       const Array<int>& perm_vec, bool inv);
diff --git a/liboctave/Array.cc b/liboctave/Array.cc
--- a/liboctave/Array.cc
+++ b/liboctave/Array.cc
@@ -470,17 +470,17 @@ Array<T>::resize_no_fill (int n)
   typename Array<T>::ArrayRep *old_rep = rep;
   const T *old_data = data ();
   int old_len = length ();
 
   rep = new typename Array<T>::ArrayRep (n);
 
   dimensions = dim_vector (n);
 
-  if (old_data && old_len > 0)
+  if (n > 0 && old_data && old_len > 0)
     {
       int min_len = old_len < n ? old_len : n;
 
       for (int i = 0; i < min_len; i++)
 	xelem (i) = old_data[i];
     }
 
   if (--old_rep->count <= 0)
@@ -524,28 +524,33 @@ Array<T>::resize_no_fill (const dim_vect
   if (same_size)
     return;
 
   int old_len = length ();
 
   typename Array<T>::ArrayRep *old_rep = rep;
   const T *old_data = data ();
 
-  rep = new typename Array<T>::ArrayRep (get_size (dv));
+  int ts = get_size (dv);
+
+  rep = new typename Array<T>::ArrayRep (ts);
 
   dimensions = dv;
 
-  Array<int> ra_idx (dimensions.length (), 0);
-
-  for (int i = 0; i < old_len; i++)
+  if (ts > 0)
     {
-      if (index_in_bounds (ra_idx, dimensions))
-	xelem (ra_idx) = old_data[i];
-
-      increment_index (ra_idx, dimensions);
+      Array<int> ra_idx (dimensions.length (), 0);
+
+      for (int i = 0; i < old_len; i++)
+	{
+	  if (index_in_bounds (ra_idx, dimensions))
+	    xelem (ra_idx) = old_data[i];
+
+	  increment_index (ra_idx, dimensions);
+	}
     }
 
   if (--old_rep->count <= 0)
     delete old_rep;
 }
 
 template <class T>
 void
@@ -570,21 +575,23 @@ Array<T>::resize_no_fill (int r, int c)
 
   typename Array<T>::ArrayRep *old_rep = Array<T>::rep;
   const T *old_data = data ();
 
   int old_d1 = dim1 ();
   int old_d2 = dim2 ();
   int old_len = length ();
 
-  rep = new typename Array<T>::ArrayRep (get_size (r, c));
+  int ts = get_size (r, c);
+
+  rep = new typename Array<T>::ArrayRep (ts);
 
   dimensions = dim_vector (r, c);
 
-  if (old_data && old_len > 0)
+  if (ts > 0 && old_data && old_len > 0)
     {
       int min_r = old_d1 < r ? old_d1 : r;
       int min_c = old_d2 < c ? old_d2 : c;
 
       for (int j = 0; j < min_c; j++)
 	for (int i = 0; i < min_r; i++)
 	  xelem (i, j) = old_data[old_d1*j+i];
     }
@@ -623,17 +630,17 @@ Array<T>::resize_no_fill (int r, int c, 
   int old_len = length ();
 
   int ts = get_size (get_size (r, c), p);
 
   rep = new typename Array<T>::ArrayRep (ts);
 
   dimensions = dim_vector (r, c, p);
 
-  if (old_data && old_len > 0)
+  if (ts > 0 && old_data && old_len > 0)
     {
       int min_r = old_d1 < r ? old_d1 : r;
       int min_c = old_d2 < c ? old_d2 : c;
       int min_p = old_d3 < p ? old_d3 : p;
 
       for (int k = 0; k < min_p; k++)
 	for (int j = 0; j < min_c; j++)
 	  for (int i = 0; i < min_r; i++)
@@ -661,27 +668,30 @@ Array<T>::resize_and_fill (int n, const 
   typename Array<T>::ArrayRep *old_rep = rep;
   const T *old_data = data ();
   int old_len = length ();
 
   rep = new typename Array<T>::ArrayRep (n);
 
   dimensions = dim_vector (n);
 
-  int min_len = old_len < n ? old_len : n;
-
-  if (old_data && old_len > 0)
+  if (n > 0)
     {
-      for (int i = 0; i < min_len; i++)
-	xelem (i) = old_data[i];
+      int min_len = old_len < n ? old_len : n;
+
+      if (old_data && old_len > 0)
+	{
+	  for (int i = 0; i < min_len; i++)
+	    xelem (i) = old_data[i];
+	}
+
+      for (int i = old_len; i < n; i++)
+	xelem (i) = val;
     }
 
-  for (int i = old_len; i < n; i++)
-    xelem (i) = val;
-
   if (--old_rep->count <= 0)
     delete old_rep;
 }
 
 template <class T>
 void
 Array<T>::resize_and_fill (int r, int c, const T& val)
 {
@@ -702,38 +712,43 @@ Array<T>::resize_and_fill (int r, int c,
 
   typename Array<T>::ArrayRep *old_rep = Array<T>::rep;
   const T *old_data = data ();
 
   int old_d1 = dim1 ();
   int old_d2 = dim2 ();
   int old_len = length ();
 
-  rep = new typename Array<T>::ArrayRep (get_size (r, c));
+  int ts = get_size (r, c);
+
+  rep = new typename Array<T>::ArrayRep (ts);
 
   dimensions = dim_vector (r, c);
 
-  int min_r = old_d1 < r ? old_d1 : r;
-  int min_c = old_d2 < c ? old_d2 : c;
-
-  if (old_data && old_len > 0)
+  if (ts > 0)
     {
+      int min_r = old_d1 < r ? old_d1 : r;
+      int min_c = old_d2 < c ? old_d2 : c;
+
+      if (old_data && old_len > 0)
+	{
+	  for (int j = 0; j < min_c; j++)
+	    for (int i = 0; i < min_r; i++)
+	      xelem (i, j) = old_data[old_d1*j+i];
+	}
+
       for (int j = 0; j < min_c; j++)
-	for (int i = 0; i < min_r; i++)
-	  xelem (i, j) = old_data[old_d1*j+i];
+	for (int i = min_r; i < r; i++)
+	  xelem (i, j) = val;
+
+      for (int j = min_c; j < c; j++)
+	for (int i = 0; i < r; i++)
+	  xelem (i, j) = val;
     }
 
-  for (int j = 0; j < min_c; j++)
-    for (int i = min_r; i < r; i++)
-      xelem (i, j) = val;
-
-  for (int j = min_c; j < c; j++)
-    for (int i = 0; i < r; i++)
-      xelem (i, j) = val;
-
   if (--old_rep->count <= 0)
     delete old_rep;
 }
 
 template <class T>
 void
 Array<T>::resize_and_fill (int r, int c, int p, const T& val)
 {
@@ -762,44 +777,47 @@ Array<T>::resize_and_fill (int r, int c,
   int old_len = length ();
 
   int ts = get_size (get_size (r, c), p);
 
   rep = new typename Array<T>::ArrayRep (ts);
 
   dimensions = dim_vector (r, c, p);
 
-  int min_r = old_d1 < r ? old_d1 : r;
-  int min_c = old_d2 < c ? old_d2 : c;
-  int min_p = old_d3 < p ? old_d3 : p;
-
-  if (old_data && old_len > 0)
-    for (int k = 0; k < min_p; k++)
-      for (int j = 0; j < min_c; j++)
-	for (int i = 0; i < min_r; i++)
-	  xelem (i, j, k) = old_data[old_d1*(old_d2*k+j)+i];
-
-  // XXX FIXME XXX -- if the copy constructor is expensive, this may
-  // win.  Otherwise, it may make more sense to just copy the value
-  // everywhere when making the new ArrayRep.
-
-  for (int k = 0; k < min_p; k++)
-    for (int j = min_c; j < c; j++)
-      for (int i = 0; i < min_r; i++)
-	xelem (i, j, k) = val;
-
-  for (int k = 0; k < min_p; k++)
-    for (int j = 0; j < c; j++)
-      for (int i = min_r; i < r; i++)
-	xelem (i, j, k) = val;
-
-  for (int k = min_p; k < p; k++)
-    for (int j = 0; j < c; j++)
-      for (int i = 0; i < r; i++)
-	xelem (i, j, k) = val;
+  if (ts > 0)
+    {
+      int min_r = old_d1 < r ? old_d1 : r;
+      int min_c = old_d2 < c ? old_d2 : c;
+      int min_p = old_d3 < p ? old_d3 : p;
+
+      if (old_data && old_len > 0)
+	for (int k = 0; k < min_p; k++)
+	  for (int j = 0; j < min_c; j++)
+	    for (int i = 0; i < min_r; i++)
+	      xelem (i, j, k) = old_data[old_d1*(old_d2*k+j)+i];
+
+      // XXX FIXME XXX -- if the copy constructor is expensive, this
+      // may win.  Otherwise, it may make more sense to just copy the
+      // value everywhere when making the new ArrayRep.
+
+      for (int k = 0; k < min_p; k++)
+	for (int j = min_c; j < c; j++)
+	  for (int i = 0; i < min_r; i++)
+	    xelem (i, j, k) = val;
+
+      for (int k = 0; k < min_p; k++)
+	for (int j = 0; j < c; j++)
+	  for (int i = min_r; i < r; i++)
+	    xelem (i, j, k) = val;
+
+      for (int k = min_p; k < p; k++)
+	for (int j = 0; j < c; j++)
+	  for (int i = 0; i < r; i++)
+	    xelem (i, j, k) = val;
+    }
 
   if (--old_rep->count <= 0)
     delete old_rep;
 }
 
 template <class T>
 void
 Array<T>::resize_and_fill (const dim_vector& dv, const T& val)
@@ -853,33 +871,36 @@ Array<T>::resize_and_fill (const dim_vec
       dv_old.resize (n);
 
       for (int i = dv_old.length (); i < n; i++)
 	dv_old.elem (i) = 1;
     }
 
   dimensions = dv;
 
-  Array<int> ra_idx (dimensions.length (), 0);
-
-  // XXX FIXME XXX -- it is much simpler to fill the whole array
-  // first, but probably slower for large arrays, or if the assignment
-  // operator for the type T is expensive.  OTOH, the logic for
-  // deciding whether an element needs the copied value or the filled
-  // value might be more expensive.
-
-  for (int i = 0; i < len; i++)
-    rep->elem (i) = val;
-
-  for (int i = 0; i < old_len; i++)
+  if (len > 0)
     {
-      if (index_in_bounds (ra_idx, dv_old))
-	xelem (ra_idx) = old_data[get_scalar_idx (ra_idx, dv_old)];
-
-      increment_index (ra_idx, dv_old);
+      Array<int> ra_idx (dimensions.length (), 0);
+
+      // XXX FIXME XXX -- it is much simpler to fill the whole array
+      // first, but probably slower for large arrays, or if the assignment
+      // operator for the type T is expensive.  OTOH, the logic for
+      // deciding whether an element needs the copied value or the filled
+      // value might be more expensive.
+
+      for (int i = 0; i < len; i++)
+	rep->elem (i) = val;
+
+      for (int i = 0; i < old_len; i++)
+	{
+	  if (index_in_bounds (ra_idx, dv_old))
+	    xelem (ra_idx) = old_data[get_scalar_idx (ra_idx, dv_old)];
+
+	  increment_index (ra_idx, dv_old);
+	}
     }
 
   if (--old_rep->count <= 0)
     delete old_rep;
 }
 
 template <class T>
 Array<T>&
@@ -1835,19 +1856,19 @@ Array<T>::index2 (idx_vector& idx_arg, i
 }
 
 template <class T>
 Array<T>
 Array<T>::indexN (idx_vector& ra_idx, int resize_ok, const T& rfv) const
 {
   Array<T> retval;
 
-  int n_dims = dims ().length ();
-
-  int orig_len = number_of_elements (dims ());
+  int n_dims = dims().length ();
+
+  int orig_len = dims().numel ();
 
   dim_vector idx_orig_dims = ra_idx.orig_dimensions (); 
 
   if (ra_idx.is_colon ())
     {
       // Fast magic colon processing.
 
       retval = Array<T> (*this, dim_vector (orig_len, 1));
@@ -1868,17 +1889,17 @@ Array<T>::indexN (idx_vector& ra_idx, in
       // We're getting elements from a vector equivalent i.e. (1x4x1).
 
       Array<T> tmp = Array<T>::index (ra_idx, resize_ok);
 
       int len = tmp.length ();
 
       if (len == 0)
 	{
-	  if (any_zero_len (idx_orig_dims))
+	  if (idx_orig_dims.any_zero ())
 	    retval = Array<T> (idx_orig_dims);
 	  else
 	    {
 	      dim_vector new_dims;
 
 	      new_dims.resize (n_dims);
 
 	      for (int i = 0; i < n_dims; i++)
@@ -1917,18 +1938,17 @@ Array<T>::indexN (idx_vector& ra_idx, in
 	  (*current_liboctave_error_handler)
 	    ("I do not know what to do here yet!");
 	}
     }
   else
     {
       if (liboctave_wfi_flag
 	  && ! (ra_idx.is_colon ()
-		|| (ra_idx.one_zero_only ()
-		    && equal_arrays (idx_orig_dims, dims ()))))
+		|| (ra_idx.one_zero_only () && idx_orig_dims == dims ())))
 	(*current_liboctave_warning_handler)
 	  ("single index used for N-d array");
 
       ra_idx.freeze (orig_len, "nd-array", resize_ok);
 
       if (ra_idx)
 	{ 
 	  dim_vector result_dims (idx_orig_dims);
@@ -1940,17 +1960,17 @@ Array<T>::indexN (idx_vector& ra_idx, in
 	      result_dims(0) = ntot;
 	      result_dims(1) = (ntot > 0 ? 1 : 0);
 	    }
 
 	  result_dims.chop_trailing_singletons ();
 
 	  retval.resize (result_dims);
 
-	  int n = number_of_elements (result_dims);
+	  int n = result_dims.numel ();
 
 	  int r_dims = result_dims.length ();
 
 	  Array<int> iidx (r_dims, 0);
 
 	  int k = 0;
 
 	  for (int i = 0; i < n; i++)
@@ -2058,17 +2078,17 @@ Array<T>::index (Array<idx_vector>& ra_i
     }
 
   dim_vector frozen_lengths = short_freeze (ra_idx, dimensions, resize_ok);
 
   if (frozen_lengths.length () <= n_dims)
     {
       if (all_ok (ra_idx))
 	{
-	  if (any_orig_empty (ra_idx) || any_zero_len (frozen_lengths))
+	  if (any_orig_empty (ra_idx) || frozen_lengths.any_zero ())
 	    {
 	      frozen_lengths.chop_trailing_singletons ();
 
 	      retval.resize (frozen_lengths);
 	    }
 	  else if (frozen_lengths.length () == n_dims
 		   && all_colon_equiv (ra_idx, dimensions))
 	    {
@@ -2639,169 +2659,179 @@ assignN (Array<LT>& lhs, const Array<RT>
       // Maybe expand to more dimensions.
 
       dim_vector lhs_dims = lhs.dims ();
 
       int lhs_dims_len = lhs_dims.length ();
 
       dim_vector final_lhs_dims = lhs_dims;
 
-      bool rhs_is_empty = rhs_dims_len == 0 ? true : any_zero_len (rhs_dims);
-
-      Array<int> idx_is_colon (n_idx, 0);
-      Array<int> idx_is_colon_equiv (n_idx, 0);
-
       dim_vector frozen_len;
 
-      if (! rhs_is_empty)
+      int orig_lhs_dims_len = lhs_dims_len;
+
+      bool orig_empty = lhs_dims.all_zero ();
+
+      if (n_idx < lhs_dims_len)
 	{
-	  int orig_lhs_dims_len = lhs_dims_len;
-
-	  if (n_idx < lhs_dims_len)
+	  // Collapse dimensions beyond last index.
+
+	  if (liboctave_wfi_flag && ! (idx(n_idx-1).is_colon ()))
+	    (*current_liboctave_warning_handler)
+	      ("fewer indices than dimensions for N-d array");
+
+	  for (int i = n_idx; i < lhs_dims_len; i++)
+	    lhs_dims(n_idx-1) *= lhs_dims(i);
+
+	  lhs_dims.resize (n_idx);
+
+	  lhs.resize (lhs_dims);
+
+	  lhs_dims = lhs.dims ();
+
+	  lhs_dims_len = lhs_dims.length ();
+	}
+
+      // Resize.
+
+      dim_vector new_dims;
+      new_dims.resize (n_idx);
+
+      for (int i = 0; i < n_idx; i++)
+	{
+	  if (orig_empty)
 	    {
-	      // Collapse dimensions beyond last index.
-
-	      if (liboctave_wfi_flag && ! (idx(n_idx-1).is_colon ()))
-		(*current_liboctave_warning_handler)
-		  ("fewer indices than dimensions for N-d array");
-
-	      for (int i = n_idx; i < lhs_dims_len; i++)
-		lhs_dims(n_idx-1) *= lhs_dims(i);
-
-	      lhs_dims.resize (n_idx);
-
-	      lhs.resize (lhs_dims);
-
-	      lhs_dims = lhs.dims ();
-
-	      lhs_dims_len = lhs_dims.length ();
-	    }
-
-	  // Resize.
-
-	  dim_vector new_dims;
-	  new_dims.resize (n_idx);
-
-	  for (int i = 0; i < n_idx; i++)
-	    {
-	      int tmp = (i < rhs_dims.length () && idx(i).is_colon ())
-		? rhs_dims(i) : idx(i).max () + 1;
+	      // If index is a colon, resizing to RHS dimensions is
+	      // allowed because we started out empty.
 
 	      new_dims(i)
-		= ((lhs_dims_len == 0 || i >= lhs_dims_len || tmp > lhs_dims(i))
-		   ? tmp : lhs_dims(i));
+		= (i < rhs_dims.length () && idx(i).is_colon ())
+		? rhs_dims(i) : idx(i).max () + 1;
 	    }
-
-	  if (n_idx < orig_lhs_dims_len && new_dims(n_idx-1) != lhs_dims(n_idx-1))
+	  else
 	    {
-	      // We reshaped and the last dimension changed.  This has to
-	      // be an error, because we don't know how to undo that
-	      // later...
-
-	      (*current_liboctave_error_handler)
-		("array index %d (= %d) for assignment requires invalid resizing operation",
-		 n_idx, new_dims(n_idx-1));
-
-	      retval = 0;
-	      goto done;
+	      // We didn't start out with all zero dimensions, so if
+	      // index is a colon, it refers to the current LHS
+	      // dimension.  Otherwise, it is OK to enlarge to a
+	      // dimension given by the largest index.
+
+	      new_dims(i)
+		= (idx(i).is_colon () || idx(i).max () < lhs_dims(i))
+		? lhs_dims(i) : idx(i).max () + 1;
 	    }
-
-	  if (n_idx > orig_lhs_dims_len)
-	    final_lhs_dims = new_dims;
-	  else
+	}
+
+      if (! orig_empty
+	  && n_idx < orig_lhs_dims_len
+	  && new_dims(n_idx-1) != lhs_dims(n_idx-1))
+	{
+	  // We reshaped and the last dimension changed.  This has to
+	  // be an error, because we don't know how to undo that
+	  // later...
+
+	  (*current_liboctave_error_handler)
+	    ("array index %d (= %d) for assignment requires invalid resizing operation",
+	     n_idx, new_dims(n_idx-1));
+
+	  retval = 0;
+	}
+      else
+	{
+	  if (n_idx < orig_lhs_dims_len)
 	    {
 	      for (int i = 0; i < n_idx-1; i++)
 		final_lhs_dims(i) = new_dims(i);
 	    }
+	  else
+	    final_lhs_dims = new_dims;
 
 	  lhs.resize_and_fill (new_dims, rfv);
 	  lhs_dims = lhs.dims ();
 	  lhs_dims_len = lhs_dims.length ();
-	}
-
-      for (int i = 0; i < n_idx; i++)
-	{
-	  idx_is_colon_equiv(i) = idx(i).is_colon_equiv (lhs_dims(i), 1);
-
-	  idx_is_colon(i) = idx(i).is_colon ();
-	}
-
-      frozen_len = freeze (idx, lhs_dims, true);
-
-      if (rhs_is_scalar)
-	{
-	  int n = Array<LT>::get_size (frozen_len);
-
-	  Array<int> result_idx (lhs_dims_len, 0);
-
-	  RT scalar = rhs.elem (0);
-
-	  for (int i = 0; i < n; i++)
+
+	  frozen_len = freeze (idx, lhs_dims, true);
+
+	  if (rhs_is_scalar)
 	    {
-	      Array<int> elt_idx = get_elt_idx (idx, result_idx);
-
-	      lhs.checkelem (elt_idx) = scalar;
-
-	      increment_index (result_idx, frozen_len);
-	    }
-	}
-      else
-	{
-	  // RHS is matrix or higher dimension.
-
-	  // Check that non-singleton RHS dimensions conform to
-	  // non-singleton LHS index dimensions.
-
-	  dim_vector t_rhs_dims = rhs_dims.squeeze ();
-	  dim_vector t_frozen_len = frozen_len.squeeze ();
-
-	  // If after sqeezing out singleton dimensions, RHS is vector
-	  // and LHS is vector, force them to have the same orientation
-	  // so that operations like
-	  //
-	  //   a = zeros (3, 3, 3);
-	  //   a(1:3,1,1) = [1,2,3];
-	  //
-	  // will work.
-
-	  if (t_rhs_dims.length () == 2 && t_frozen_len.length () == 2
-	      && (t_rhs_dims.elem(1) == 1 && t_frozen_len.elem(0) == 1 
-		  || t_rhs_dims.elem(0) == 1 && t_frozen_len.elem(1) == 1))
-	    {
-	      int t0 = t_rhs_dims.elem(0);
-	      t_rhs_dims.elem(0) = t_rhs_dims.elem(1);
-	      t_rhs_dims.elem(1) = t0;
-	    }
-
-	  if (t_rhs_dims != t_frozen_len)
-	    {
-	      (*current_liboctave_error_handler)
-		("A(IDX-LIST) = X: X must be a scalar or size of X must equal number of elements indexed by IDX-LIST");
-
-	      retval = 0;
+	      if  (! final_lhs_dims.any_zero ())
+		{
+		  int n = Array<LT>::get_size (frozen_len);
+
+		  Array<int> result_idx (lhs_dims_len, 0);
+
+		  RT scalar = rhs.elem (0);
+
+		  for (int i = 0; i < n; i++)
+		    {
+		      Array<int> elt_idx = get_elt_idx (idx, result_idx);
+
+		      lhs.elem (elt_idx) = scalar;
+
+		      increment_index (result_idx, frozen_len);
+		    }
+		}
 	    }
 	  else
 	    {
-	      int n = Array<LT>::get_size (frozen_len);
-
-	      Array<int> result_idx (lhs_dims_len, 0);
-
-	      for (int i = 0; i < n; i++)
+	      // RHS is matrix or higher dimension.
+
+	      // Check that non-singleton RHS dimensions conform to
+	      // non-singleton LHS index dimensions.
+
+	      dim_vector t_rhs_dims = rhs_dims.squeeze ();
+	      dim_vector t_frozen_len = frozen_len.squeeze ();
+
+	      // If after sqeezing out singleton dimensions, RHS is
+	      // vector and LHS is vector, force them to have the same
+	      // orientation so that operations like
+	      //
+	      //   a = zeros (3, 3, 3);
+	      //   a(1:3,1,1) = [1,2,3];
+	      //
+	      // will work.
+
+	      if (t_rhs_dims.length () == 2 && t_frozen_len.length () == 2
+		  && ((t_rhs_dims.elem(1) == 1
+		       && t_frozen_len.elem(0) == 1)
+		      || (t_rhs_dims.elem(0) == 1
+			  && t_frozen_len.elem(1) == 1)))
 		{
-		  Array<int> elt_idx = get_elt_idx (idx, result_idx);
-
-		  lhs.elem (elt_idx) = rhs.elem (i);
-
-		  increment_index (result_idx, frozen_len);
+		  int t0 = t_rhs_dims.elem(0);
+		  t_rhs_dims.elem(0) = t_rhs_dims.elem(1);
+		  t_rhs_dims.elem(1) = t0;
+		}
+
+	      if (t_rhs_dims != t_frozen_len)
+		{
+		  (*current_liboctave_error_handler)
+		    ("A(IDX-LIST) = X: X must be a scalar or size of X must equal number of elements indexed by IDX-LIST");
+
+		      retval = 0;
+		}
+	      else
+		{
+		  if  (! final_lhs_dims.any_zero ())
+		    {
+		      int n = Array<LT>::get_size (frozen_len);
+
+		      Array<int> result_idx (lhs_dims_len, 0);
+
+		      for (int i = 0; i < n; i++)
+			{
+			  Array<int> elt_idx = get_elt_idx (idx, result_idx);
+
+			  lhs.elem (elt_idx) = rhs.elem (i);
+
+			  increment_index (result_idx, frozen_len);
+			}
+		    }
 		}
 	    }
 	}
 
-    done:
-
       lhs.resize (final_lhs_dims);
     }
 
   lhs.chop_trailing_singletons ();
   
   lhs.clear_index ();
 
   return retval;
diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,13 +1,36 @@
 2004-02-06  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
+	* Array.cc (Array<T>::resize_and_fill): Don't bother to assign any
+	values unless the length of the new array is greater than 0.
+	(Array<T>::resize_no_fill): Likewise.
+
+	* Array-util.cc (index_in_bounds): Also return false if ra_idx(i)
+	is equal to dimensions(i).
+
+	* Array-util.h, Array-util.cc (equal_arrays, any_zero_len,
+	get_zero_len_size, number_of_elements):
+	Delete unused functions.
+
+	* Array-util.cc (get_ra_idx): Use dim_vector::numel instead of
+	number_of_elements function.
+	* Array.cc (Array<T>::indexN): Likewise.
+
+	* Array.cc (Array<T>::indexN): Use dim_vector::operator == instead
+	of equal_arrays function.
+	(Array<T>::index, Array<T>::indexN, Array<T>::assignN) Use
+	dim_vector::any_zero instead of any_zero_len function.
+
+	* Array.cc (Array<T>::assignN): Eliminate special case for empty index.
+	Don't skip reshaping and resizing if RHS is empty.
+
 	* Array.cc (Array<T>::assignN): Simplify loop for array	assignment.
 	Move body of MAYBE_RESIZE_ND_DIMS here since it is only used once.  
-	Eliminate special case for empty index.
+	Delete unused variables is_colon and is_colon_equiv.
 	Correctly resize for expressions like x(:,:,2) = ones(3,3) when
 	LHS is not yet defined.
 	Error for resizing if number of indices is less than number of LHS
 	dimensions.
 
 	* Array.cc (Array<T>::maybe_delete_elements): Maybe warn about
 	Fortran-style indexing.
 
