# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1235162966 -3600
#      Fri Feb 20 21:49:26 2009 +0100
# Node ID 8dd69187c4a27e5bfc23a2882a6d93c4e7afe8d7
# Parent  b86b42f77899b4131713ec747fbd826bcf24d833
specialize sqrt for diagonal matrices

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,20 @@
+2009-02-20  Jaroslav Hajek  <highegg@gmail.com>
+
+	* ov-base-diag.h (octave_base_diag::sqrt): Remove.
+	* ov-re-diag.cc (octave_diag_matrix::sqrt): New method.
+	* ov-re-diag.h: Declare it.
+	* ov-flt-re-diag.cc (octave_float_diag_matrix::sqrt): New method.
+	* ov-flt-re-diag.h: Declare it.
+	* ov-cx-diag.cc (octave_complex_diag_matrix::sqrt): New method.
+	* ov-cx-diag.h: Declare it.
+	* ov-flt-cx-diag.cc (octave_float_complex_diag_matrix::sqrt): New method.
+	* ov-flt-cx-diag.h: Declare it.
+
 2009-02-20  John W. Eaton  <jwe@octave.org>
 
 	* dynamic-ld.cc (octave_dynamic_loader::do_load_mex): Clear and
 	reload mex file if it is out of date.  Don't check path for file.
 
 	* pt-bp.cc (tree_breakpoint::visit_octave_user_script,
 	tree_breakpoint::visit_octave_user_function):
 	Don't panic.  Call accept on command list if it exists.
diff --git a/src/ov-base-diag.cc b/src/ov-base-diag.cc
--- a/src/ov-base-diag.cc
+++ b/src/ov-base-diag.cc
@@ -574,16 +574,15 @@ FORWARD_MAPPER (log)
 FORWARD_MAPPER (log2)
 FORWARD_MAPPER (log10)
 FORWARD_MAPPER (log1p)
 FORWARD_MAPPER (round)
 FORWARD_MAPPER (roundb)
 FORWARD_MAPPER (signum)
 FORWARD_MAPPER (sin)
 FORWARD_MAPPER (sinh)
-FORWARD_MAPPER (sqrt)
 FORWARD_MAPPER (tan)
 FORWARD_MAPPER (tanh)
 FORWARD_MAPPER (finite)
 FORWARD_MAPPER (isinf)
 FORWARD_MAPPER (isna)
 FORWARD_MAPPER (isnan)
 
diff --git a/src/ov-base-diag.h b/src/ov-base-diag.h
--- a/src/ov-base-diag.h
+++ b/src/ov-base-diag.h
@@ -211,17 +211,17 @@ public:
   mxArray *as_mxArray (void) const;
 
   bool print_as_scalar (void) const;
 
   void print (std::ostream& os, bool pr_as_read_syntax = false) const;
 
   void print_info (std::ostream& os, const std::string& prefix) const;
 
-  // We forward everything except abs, real, imag, conj.
+  // We forward everything except abs, real, imag, conj, sqrt.
   octave_value erf (void) const;
   octave_value erfc (void) const;
   octave_value gamma (void) const;
   octave_value lgamma (void) const;
   octave_value acos (void) const;
   octave_value acosh (void) const;
   octave_value angle (void) const;
   octave_value arg (void) const;
@@ -240,17 +240,16 @@ public:
   octave_value log2 (void) const;
   octave_value log10 (void) const;
   octave_value log1p (void) const;
   octave_value round (void) const;
   octave_value roundb (void) const;
   octave_value signum (void) const;
   octave_value sin (void) const;
   octave_value sinh (void) const;
-  octave_value sqrt (void) const;
   octave_value tan (void) const;
   octave_value tanh (void) const;
   octave_value finite (void) const;
   octave_value isinf (void) const;
   octave_value isna (void) const;
   octave_value isnan (void) const;
 
 protected:
diff --git a/src/ov-cx-diag.cc b/src/ov-cx-diag.cc
--- a/src/ov-cx-diag.cc
+++ b/src/ov-cx-diag.cc
@@ -154,16 +154,31 @@ octave_complex_diag_matrix::conj (void) 
 }
 
 octave_value
 octave_complex_diag_matrix::imag (void) const
 {
   return ::imag (matrix);
 }
 
+octave_value
+octave_complex_diag_matrix::sqrt (void) const
+{    
+  octave_value retval;
+
+  static ComplexNDArray::cmapper csqrt = std::sqrt;
+
+  ComplexColumnVector dvec = matrix.diag ();
+  retval = ComplexDiagMatrix (dvec.map (csqrt));
+
+  retval.resize (dims ());
+
+  return retval;
+}
+
 bool 
 octave_complex_diag_matrix::save_binary (std::ostream& os, bool& save_as_floats)
 {
 
   int32_t r = matrix.rows (), c = matrix.cols ();
   os.write (reinterpret_cast<char *> (&r), 4);
   os.write (reinterpret_cast<char *> (&c), 4);
 
diff --git a/src/ov-cx-diag.h b/src/ov-cx-diag.h
--- a/src/ov-cx-diag.h
+++ b/src/ov-cx-diag.h
@@ -77,16 +77,17 @@ public:
 
   bool load_binary (std::istream& is, bool swap, 
 		    oct_mach_info::float_format fmt);
 
   octave_value abs (void) const;
   octave_value conj (void) const;
   octave_value imag (void) const;
   octave_value real (void) const;
+  octave_value sqrt (void) const;
 
 private:
 
   bool chk_valid_scalar (const octave_value&, 
                          Complex&) const;
 
   DECLARE_OCTAVE_ALLOCATOR
 
diff --git a/src/ov-flt-cx-diag.cc b/src/ov-flt-cx-diag.cc
--- a/src/ov-flt-cx-diag.cc
+++ b/src/ov-flt-cx-diag.cc
@@ -138,16 +138,31 @@ octave_float_complex_diag_matrix::conj (
 }
 
 octave_value
 octave_float_complex_diag_matrix::imag (void) const
 {
   return ::imag (matrix);
 }
 
+octave_value
+octave_float_complex_diag_matrix::sqrt (void) const
+{    
+  octave_value retval;
+
+  static FloatComplexNDArray::cmapper csqrt = std::sqrt;
+
+  FloatComplexColumnVector dvec = matrix.diag ();
+  retval = FloatComplexDiagMatrix (dvec.map (csqrt));
+
+  retval.resize (dims ());
+
+  return retval;
+}
+
 bool 
 octave_float_complex_diag_matrix::save_binary (std::ostream& os, 
                                                bool& /* save_as_floats */)
 {
 
   int32_t r = matrix.rows (), c = matrix.cols ();
   os.write (reinterpret_cast<char *> (&r), 4);
   os.write (reinterpret_cast<char *> (&c), 4);
diff --git a/src/ov-flt-cx-diag.h b/src/ov-flt-cx-diag.h
--- a/src/ov-flt-cx-diag.h
+++ b/src/ov-flt-cx-diag.h
@@ -75,16 +75,17 @@ public:
 
   bool load_binary (std::istream& is, bool swap, 
 		    oct_mach_info::float_format fmt);
 
   octave_value abs (void) const;
   octave_value conj (void) const;
   octave_value imag (void) const;
   octave_value real (void) const;
+  octave_value sqrt (void) const;
 
 private:
 
   bool chk_valid_scalar (const octave_value&, 
                          FloatComplex&) const;
 
   DECLARE_OCTAVE_ALLOCATOR
 
diff --git a/src/ov-flt-re-diag.cc b/src/ov-flt-re-diag.cc
--- a/src/ov-flt-re-diag.cc
+++ b/src/ov-flt-re-diag.cc
@@ -109,16 +109,35 @@ octave_float_diag_matrix::conj (void) co
 }
 
 octave_value
 octave_float_diag_matrix::imag (void) const
 {
   return DiagMatrix (matrix.rows (), matrix.cols (), 0.0f);
 }
 
+octave_value
+octave_float_diag_matrix::sqrt (void) const
+{    
+  octave_value retval;
+
+  static FloatNDArray::dmapper dsqrt = ::sqrtf;
+  static FloatNDArray::cmapper csqrt = std::sqrt;
+
+  FloatColumnVector dvec = matrix.diag ();
+  if (FloatMatrix (dvec).any_element_is_negative ())
+    retval = FloatComplexDiagMatrix (dvec.map (csqrt));
+  else
+    retval = FloatDiagMatrix (dvec.map (dsqrt));
+
+  retval.resize (dims ());
+
+  return retval;
+}
+
 bool 
 octave_float_diag_matrix::save_binary (std::ostream& os,
 				       bool& /* save_as_floats*/)
 {
 
   int32_t r = matrix.rows (), c = matrix.cols ();
   os.write (reinterpret_cast<char *> (&r), 4);
   os.write (reinterpret_cast<char *> (&c), 4);
diff --git a/src/ov-flt-re-diag.h b/src/ov-flt-re-diag.h
--- a/src/ov-flt-re-diag.h
+++ b/src/ov-flt-re-diag.h
@@ -75,16 +75,17 @@ public:
 
   bool load_binary (std::istream& is, bool swap, 
 		    oct_mach_info::float_format fmt);
 
   octave_value abs (void) const;
   octave_value conj (void) const;
   octave_value imag (void) const;
   octave_value real (void) const;
+  octave_value sqrt (void) const;
 
 private:
 
   bool chk_valid_scalar (const octave_value&, 
                          float&) const;
 
   DECLARE_OCTAVE_ALLOCATOR
 
diff --git a/src/ov-re-diag.cc b/src/ov-re-diag.cc
--- a/src/ov-re-diag.cc
+++ b/src/ov-re-diag.cc
@@ -124,16 +124,35 @@ octave_diag_matrix::conj (void) const
 }
 
 octave_value
 octave_diag_matrix::imag (void) const
 {
   return DiagMatrix (matrix.rows (), matrix.cols (), 0.0);
 }
 
+octave_value
+octave_diag_matrix::sqrt (void) const
+{    
+  octave_value retval;
+
+  static NDArray::dmapper dsqrt = ::sqrt;
+  static NDArray::cmapper csqrt = std::sqrt;
+
+  ColumnVector dvec = matrix.diag ();
+  if (Matrix (dvec).any_element_is_negative ())
+    retval = ComplexDiagMatrix (dvec.map (csqrt));
+  else
+    retval = DiagMatrix (dvec.map (dsqrt));
+
+  retval.resize (dims ());
+
+  return retval;
+}
+
 bool 
 octave_diag_matrix::save_binary (std::ostream& os, bool& save_as_floats)
 {
 
   int32_t r = matrix.rows (), c = matrix.cols ();
   os.write (reinterpret_cast<char *> (&r), 4);
   os.write (reinterpret_cast<char *> (&c), 4);
 
diff --git a/src/ov-re-diag.h b/src/ov-re-diag.h
--- a/src/ov-re-diag.h
+++ b/src/ov-re-diag.h
@@ -77,16 +77,17 @@ public:
 
   bool load_binary (std::istream& is, bool swap, 
 		    oct_mach_info::float_format fmt);
 
   octave_value abs (void) const;
   octave_value conj (void) const;
   octave_value imag (void) const;
   octave_value real (void) const;
+  octave_value sqrt (void) const;
 
 private:
 
   bool chk_valid_scalar (const octave_value&, 
                          double&) const;
 
   DECLARE_OCTAVE_ALLOCATOR
 
