# HG changeset patch
# User CarnÃ« Draug <carandraug@octave.org>
# Date 1446575218 0
#      Tue Nov 03 18:26:58 2015 +0000
# Node ID 1672bb8882dd2e8153d15ff713137be12f22c43b
# Parent  ae83fda9929f4c0a23a4f4bdfae6cda801c7c9be
Remove unused arguments in private functions for colorspace arguments.

* scripts/image/private/colorspace_conversion_revert.m: originally, this
  function made use of the cls argument but not anymore since a5ed88c9eb14.
* scripts/image/private/colorspace_conversion_input_check.m: no longer
  return cls argument which not needed.
* scripts/image/hsv2rgb.m, scripts/image/ntsc2rgb.m, scripts/image/rgb2hsv.m,
  scripts/image/rgb2ntsc.m: fix calls to the modified private functions.

diff --git a/scripts/image/hsv2rgb.m b/scripts/image/hsv2rgb.m
--- a/scripts/image/hsv2rgb.m
+++ b/scripts/image/hsv2rgb.m
@@ -58,17 +58,17 @@ function rgb = hsv2rgb (hsv)
   ## x = (1-sat)*val+sat*val*f_x(hue)
   ## where f_x(hue) is a piecewise defined function for
   ## each color with f_r(hue-2/3) = f_g(hue) = f_b(hue-1/3).
 
   if (nargin != 1)
     print_usage ();
   endif
 
-  [hsv, cls, sz, is_im, is_nd] ...
+  [hsv, sz, is_im, is_nd] ...
     = colorspace_conversion_input_check ("hsv2rgb", "HSV", hsv);
 
   h = hsv(:,1);
   s = hsv(:,2);
   v = hsv(:,3);
 
   ## Values of Saturation and Value should also be in the [0 1] range.  With
   ## the exception of hue, values outside this range don't make any sense
@@ -87,17 +87,17 @@ function rgb = hsv2rgb (hsv)
   ## factor s*v -> f
   f = repmat (s .* v, 1, 3);
 
   ## add s*v*hue-function to rgb map
   rgb += f .* (6 * (hue < 1/6) .* hue
                + (hue >= 1/6 & hue < 1/2)
                + (hue >= 1/2 & hue < 2/3) .* (4 - 6 * hue));
 
-  rgb = colorspace_conversion_revert (rgb, cls, sz, is_im, is_nd);
+  rgb = colorspace_conversion_revert (rgb, sz, is_im, is_nd);
 
 endfunction
 
 ## Test pure colors
 %!assert (hsv2rgb ([0 0 1]), [1 1 1])
 %!assert (hsv2rgb ([1 1 0]), [0 0 0])
 %!assert (hsv2rgb ([0 1 1]), [1 0 0])
 %!assert (hsv2rgb ([1 1 1]), [1 0 0])
diff --git a/scripts/image/ntsc2rgb.m b/scripts/image/ntsc2rgb.m
--- a/scripts/image/ntsc2rgb.m
+++ b/scripts/image/ntsc2rgb.m
@@ -55,17 +55,17 @@ function rgb = ntsc2rgb (yiq)
   ## from their integer range into the ranges:
   ##    Y = [ 0      1.106]
   ##    I = [-0.797  0.587]
   ##    Q = [-0.322  0.426]
   ## See https://savannah.gnu.org/patch/?8709#comment11
   if (! isfloat (yiq))
     error ("ntsc2rgb: YIQ must be of floating point class");
   endif
-  [yiq, cls, sz, is_im, is_nd] ...
+  [yiq, sz, is_im, is_nd] ...
     = colorspace_conversion_input_check ("ntsc2rgb", "YIQ", yiq);
 
   ## Conversion matrix constructed from 'inv (rgb2ntsc matrix)'.
   ## See programming notes in rgb2ntsc.m.  Note: Matlab matrix for inverse
   ## is slightly different.  We prefer this matrix so that
   ## x == ntsc2rgb (rgb2ntsc (x)) rather than maintaining strict compatibility
   ## with Matlab.
   trans = [ 1.0,      1.0,      1.0;
@@ -76,17 +76,17 @@ function rgb = ntsc2rgb (yiq)
   ## of class single.  This is Matlab incompatible by design, since
   ## Matlab always returning class double, is a Matlab bug (see patch #8709)
 
   ## truncating / scaling of double rgb values for Matlab compatibility
   rgb = max (0, rgb);
   idx = any (rgb > 1, 2);
   rgb(idx,:) = rgb(idx,:) ./ max (rgb(idx,:), [], 2);
 
-  rgb = colorspace_conversion_revert (rgb, cls, sz, is_im, is_nd);
+  rgb = colorspace_conversion_revert (rgb, sz, is_im, is_nd);
 endfunction
 
 %!shared trans
 %! trans = [ 1.0,      1.0,      1.0;
 %!          0.95617, -0.27269, -1.10374;
 %!          0.62143, -0.64681,  1.70062 ];
 
 ## Test pure R, G, B colors
diff --git a/scripts/image/private/colorspace_conversion_input_check.m b/scripts/image/private/colorspace_conversion_input_check.m
--- a/scripts/image/private/colorspace_conversion_input_check.m
+++ b/scripts/image/private/colorspace_conversion_input_check.m
@@ -16,17 +16,17 @@
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## Private function the functions that convert between color spaces, i.e.,
 ## rgb2ntsc, rgb2hsv, hsv2rgb, and ntsc2rgb.  All of these functions need to
 ## handle input in the same way.  The returned flags are meant to be handled
 ## by the complementary private function colorspace_conversion_revert()
 
-function [in_arg, cls, sz, is_im, is_nd] ...
+function [in_arg, sz, is_im, is_nd] ...
             = colorspace_conversion_input_check (func, arg_name, in_arg)
 
   cls = class (in_arg);
   sz = size (in_arg);
 
   ## If we have an image convert it into a color map.
   if (! iscolormap (in_arg))
     if (! any (strcmp (cls, {"uint8", "int8", "int16", "uint16", ...
diff --git a/scripts/image/private/colorspace_conversion_revert.m b/scripts/image/private/colorspace_conversion_revert.m
--- a/scripts/image/private/colorspace_conversion_revert.m
+++ b/scripts/image/private/colorspace_conversion_revert.m
@@ -17,17 +17,17 @@
 ## <http://www.gnu.org/licenses/>.
 
 ## Private function the functions that convert between color spaces, i.e.,
 ## rgb2ntsc, rgb2hsv, hsv2rgb, and ntsc2rgb.  This reverts a colormap type
 ## into the same shape and class as it was in the input.  The flags are meant
 ## to come from  complementary private function
 ## colorspace_conversion_input_check()
 
-function rv = colorspace_conversion_revert (rv, cls, sz, is_im, is_nd)
+function rv = colorspace_conversion_revert (rv, sz, is_im, is_nd)
   if (is_im)
     if (is_nd)
       rv = reshape (rv, [sz(1:2) sz(4) sz(3)]);
       rv = permute (rv, [1 2 4 3]);
     else
       rv = reshape (rv, sz);
     endif
   endif
diff --git a/scripts/image/rgb2hsv.m b/scripts/image/rgb2hsv.m
--- a/scripts/image/rgb2hsv.m
+++ b/scripts/image/rgb2hsv.m
@@ -38,17 +38,17 @@
 ## Adapted-by: jwe
 
 function hsv = rgb2hsv (rgb)
 
   if (nargin != 1)
     print_usage ();
   endif
 
-  [rgb, cls, sz, is_im, is_nd] ...
+  [rgb, sz, is_im, is_nd] ...
     = colorspace_conversion_input_check ("rgb2hsv", "RGB", rgb);
 
   ## get the max and min for each row
   s = min (rgb, [], 2);
   v = max (rgb, [], 2);
 
   ## set hue to zero for undefined values (gray has no hue)
   h = zeros (rows (rgb), 1);
@@ -73,17 +73,17 @@ function hsv = rgb2hsv (rgb)
   endif
   h(h < 0) += 1;   # correct for negative red
 
   ## set the saturation
   s(! notgray) = 0;
   s(notgray) = 1 - s(notgray) ./ v(notgray);
 
   hsv = [h, s, v];
-  hsv = colorspace_conversion_revert (hsv, cls, sz, is_im, is_nd);
+  hsv = colorspace_conversion_revert (hsv, sz, is_im, is_nd);
 
 endfunction
 
 ## Test pure colors and gray
 %!assert (rgb2hsv ([1 0 0]), [0 1 1])
 %!assert (rgb2hsv ([0 1 0]), [1/3 1 1])
 %!assert (rgb2hsv ([0 0 1]), [2/3 1 1])
 %!assert (rgb2hsv ([1 1 0]), [1/6 1 1])
diff --git a/scripts/image/rgb2ntsc.m b/scripts/image/rgb2ntsc.m
--- a/scripts/image/rgb2ntsc.m
+++ b/scripts/image/rgb2ntsc.m
@@ -46,31 +46,31 @@
 ## Adapted-By: jwe
 
 function yiq = rgb2ntsc (rgb)
 
   if (nargin != 1)
     print_usage ();
   endif
 
-  [rgb, cls, sz, is_im, is_nd] ...
+  [rgb, sz, is_im, is_nd] ...
     = colorspace_conversion_input_check ("rgb2ntsc", "RGB", rgb);
 
   ## Reference matrix for transformation from http://en.wikipedia.org/wiki/YIQ
   ## and truncated to 3 significant figures.  Matlab uses this matrix for their
   ## conversion.
   trans = [ 0.299,  0.596,  0.211;
             0.587, -0.274, -0.523;
             0.114, -0.322,  0.312 ];
   yiq = rgb * trans;
   ## Note that if the input is of class single, we also return an image
   ## of class single.  This is Matlab incompatible by design, since
   ## Matlab always returning class double, is a Matlab bug (see patch #8709)
 
-  yiq = colorspace_conversion_revert (yiq, cls, sz, is_im, is_nd);
+  yiq = colorspace_conversion_revert (yiq, sz, is_im, is_nd);
 
 endfunction
 
 ## Test pure RED, GREEN, BLUE colors
 %!assert (rgb2ntsc ([1 0 0]), [.299  .596  .211])
 %!assert (rgb2ntsc ([0 1 0]), [.587 -.274 -.523])
 %!assert (rgb2ntsc ([0 0 1]), [.114 -.322  .312])
 
