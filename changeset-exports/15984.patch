# HG changeset patch
# User Daniel J Sebald <daniel.sebald@ieee.org>
# Date 1359333893 21600
#      Sun Jan 27 18:44:53 2013 -0600
# Node ID 1eb3c67139f6915bfa07285404490993913adced
# Parent  200dab2eecd4980b085f8046b890118ea40ebf81
Add full-length-name tool tip to editor file tab when name is not full length.

* file-editor-tab.cc (file_editor_tab::update_window_title): Add and construct
tooltip variable then signal file_name_changed() with second input string.

* file-editor-tab.h (file_editor_tab::file_name_changed): Add second input
string to accommodate tool tip.

* file-editor.cc, file-editor.h (file_editor::handle_file_name_changed): Add
second input string and set tool tip via Qt setTabToolTip() member function.

diff --git a/libgui/src/m-editor/file-editor-tab.cc b/libgui/src/m-editor/file-editor-tab.cc
--- a/libgui/src/m-editor/file-editor-tab.cc
+++ b/libgui/src/m-editor/file-editor-tab.cc
@@ -653,35 +653,37 @@ file_editor_tab::do_comment_selected_tex
       _edit_area->endUndoAction ();
     }
 }
 
 void
 file_editor_tab::update_window_title (bool modified)
 {
   QString title ("");
+  QString tooltip ("");
   if (_file_name.isEmpty () || _file_name.at (_file_name.count () - 1) == '/')
     title = tr("<unnamed>");
   else
     {
       if ( _long_title )
         title = _file_name;
       else
         {
           QFileInfo file(_file_name);
           title = file.fileName();
+          tooltip = _file_name;
         }
     }
 
   if ( modified )
     {
-      emit file_name_changed (title.prepend("* "));
+      emit file_name_changed (title.prepend("* "), tooltip);
     }
   else
-    emit file_name_changed (title);
+    emit file_name_changed (title, tooltip);
 }
 
 void
 file_editor_tab::handle_copy_available(bool enableCopy)
 {
   _copy_available = enableCopy;
   emit editor_state_changed (_copy_available, QDir::cleanPath (_file_name));
 }
diff --git a/libgui/src/m-editor/file-editor-tab.h b/libgui/src/m-editor/file-editor-tab.h
--- a/libgui/src/m-editor/file-editor-tab.h
+++ b/libgui/src/m-editor/file-editor-tab.h
@@ -81,17 +81,17 @@ public slots:
   void set_modified (bool modified = true);
 
   QString load_file (const QString& fileName);
   void new_file ();
 
   void file_has_changed (const QString& fileName);
 
 signals:
-  void file_name_changed (const QString& fileName);
+  void file_name_changed (const QString& fileName, const QString& toolTip);
   void editor_state_changed (bool copy_available, const QString& fileName);
   void tab_remove_request ();
   void add_filename_to_list (const QString& fileName);
   void mru_add_file (const QString& file_name);
   void editor_check_conflict_save (const QString& saveFileName, bool remove_on_success);
   void process_octave_code (const QString& command);
 
 protected:
diff --git a/libgui/src/m-editor/file-editor.cc b/libgui/src/m-editor/file-editor.cc
--- a/libgui/src/m-editor/file-editor.cc
+++ b/libgui/src/m-editor/file-editor.cc
@@ -418,26 +418,27 @@ file_editor::mru_menu_update ()
       _mru_files.removeLast ();
     // save actual mru-list in settings
     QSettings *settings = resource_manager::get_settings ();
     // FIXME -- what should happen if settings is 0?
     settings->setValue ("editor/mru_file_list",_mru_files);
 }
 
 void
-file_editor::handle_file_name_changed (const QString& fileName)
+file_editor::handle_file_name_changed (const QString& fileName, const QString& toolTip)
 {
   QObject *fileEditorTab = sender();
   if (fileEditorTab)
     {
       for(int i = 0; i < _tab_widget->count (); i++)
         {
           if (_tab_widget->widget (i) == fileEditorTab)
             {
               _tab_widget->setTabText (i, fileName);
+              _tab_widget->setTabToolTip (i, toolTip);
             }
         }
     }
 }
 
 void
 file_editor::handle_tab_close_request (int index)
 {
@@ -761,18 +762,18 @@ file_editor::construct ()
 }
 
 void
 file_editor::add_file_editor_tab (file_editor_tab *f, const QString &fn)
 {
   _tab_widget->addTab (f, fn);
 
   // Signals from the file editor_tab
-  connect (f, SIGNAL (file_name_changed (const QString&)),
-           this, SLOT (handle_file_name_changed (const QString&)));
+  connect (f, SIGNAL (file_name_changed (const QString&, const QString&)),
+           this, SLOT (handle_file_name_changed (const QString&, const QString&)));
   connect (f, SIGNAL (editor_state_changed (bool, const QString&)),
            this, SLOT (handle_editor_state_changed (bool, const QString&)));
   connect (f, SIGNAL (tab_remove_request ()),
            this, SLOT (handle_tab_remove_request ()));
   connect (f, SIGNAL (add_filename_to_list (const QString&)),
            this, SLOT (handle_add_filename_to_list (const QString&)));
   connect (f, SIGNAL (editor_check_conflict_save (const QString&, bool)),
            this, SLOT (check_conflict_save (const QString&, bool)));
diff --git a/libgui/src/m-editor/file-editor.h b/libgui/src/m-editor/file-editor.h
--- a/libgui/src/m-editor/file-editor.h
+++ b/libgui/src/m-editor/file-editor.h
@@ -108,17 +108,17 @@ public slots:
   void request_next_breakpoint ();
   void request_previous_breakpoint ();
   void request_remove_breakpoint ();
 
   void request_comment_selected_text ();
   void request_uncomment_selected_text ();
   void request_find ();
 
-  void handle_file_name_changed (const QString& fileName);
+  void handle_file_name_changed (const QString& fileName, const QString& toolTip);
   void handle_tab_close_request (int index);
   void handle_tab_remove_request ();
   void handle_add_filename_to_list (const QString& fileName);
   void active_tab_changed (int index);
   void handle_editor_state_changed (bool enableCopy, const QString& fileName);
   void handle_mru_add_file (const QString& file_name);
   void check_conflict_save (const QString& fileName, bool remove_on_success);
 
