# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1517370609 18000
#      Tue Jan 30 22:50:09 2018 -0500
# Node ID dd19b0b9a9a1e67475c9dde59735bd60da61f4e2
# Parent  cd79f32fba85e54aa4b6e6f87a0f94f7edbb322b
allow empty strings to be edited (bug #51848)

* variable-editor-model.cc (get_rows_and_columns,
variable_editor_model::impl, variable_editor_model::type_is_editable):
Also allow empty strings.

* ov-base.h (octave_base_value::is_zero_by_zero): New function.
* ov-str-mat.cc (octave_char_matrix_str::edit_display):
Allow empty strings.

diff --git a/libgui/src/variable-editor-model.cc b/libgui/src/variable-editor-model.cc
--- a/libgui/src/variable-editor-model.cc
+++ b/libgui/src/variable-editor-model.cc
@@ -78,18 +78,29 @@ get_quote_char (const octave_value& val)
     return '"';
 
   return 0;
 }
 
 static void
 get_rows_and_columns (const octave_value& val, int& rows, int& cols)
 {
-  rows = val.rows ();
-  cols = (val.is_string () ? 1 : val.columns ());
+  if (val.is_string ())
+    {
+      // VAL will either be "" or a char array with a single row.
+      // Either way, edit it as a single string.
+
+      rows = 1;
+      cols = 1;
+    }
+  else
+    {
+      rows = val.rows ();
+      cols = val.columns ();
+    }
 }
 
 struct variable_editor_model::impl
 {
   struct cell
   {
     cell (void) : m_defined (false) { }
 
@@ -100,17 +111,17 @@ struct variable_editor_model::impl
     {
       if (val.iscell ())
         {
           Cell cval = val.cell_value ();
 
           octave_value ov = cval(r,c);
 
           if ((ov.numel () == 1 && (ov.isnumeric () || ov.islogical ()))
-              || (ov.rows () == 1 && ov.is_string ()))
+              || (ov.is_string () && (ov.rows () == 1 || ov.isempty ())))
             {
               m_data = QString::fromStdString (ov.edit_display (r, c));
 
               return;
             }
           else
             m_requires_sub_editor = true;
         }
@@ -178,17 +189,17 @@ struct variable_editor_model::impl
     if (m_value.is_string ())
       return get_quote_char (m_value);
     else if (m_value.iscell ())
       {
         Cell cval = m_value.cell_value ();
 
         octave_value ov = cval(r,c);
 
-        if (ov.rows () == 1)
+        if (ov.rows () == 1 || ov.is_zero_by_zero ())
           return get_quote_char (ov);
       }
 
     return 0;
   }
 
   QString subscript_expression (int r, int c) const
   {
@@ -827,17 +838,17 @@ variable_editor_model::clear_data_cell (
 }
 
 bool
 variable_editor_model::type_is_editable (const octave_value& val,
                                          bool display_error) const
 {
   if (((val.isnumeric () || val.islogical () || val.iscell ())
        && val.ndims () == 2)
-      || (val.is_string () && val.rows () == 1))
+      || (val.is_string () && (val.rows () == 1 || val.is_zero_by_zero ())))
     return true;
 
   if (display_error)
     {
       QString tname = QString::fromStdString (val.type_name ());
 
       dim_vector dv = val.dims ();
       QString dimstr = QString::fromStdString (dv.str ());
diff --git a/libinterp/octave-value/ov-base.h b/libinterp/octave-value/ov-base.h
--- a/libinterp/octave-value/ov-base.h
+++ b/libinterp/octave-value/ov-base.h
@@ -352,16 +352,18 @@ public:
   virtual MatrixType matrix_type (void) const;
 
   virtual MatrixType matrix_type (const MatrixType& typ) const;
 
   virtual bool is_defined (void) const { return false; }
 
   bool isempty (void) const { return (dims ().any_zero ()); }
 
+  bool is_zero_by_zero (void) const { return dims().zero_by_zero (); }
+
   virtual bool iscell (void) const { return false; }
 
   virtual bool iscellstr (void) const { return false; }
 
   virtual bool is_real_scalar (void) const { return false; }
 
   virtual bool is_real_matrix (void) const { return false; }
 
diff --git a/libinterp/octave-value/ov-str-mat.cc b/libinterp/octave-value/ov-str-mat.cc
--- a/libinterp/octave-value/ov-str-mat.cc
+++ b/libinterp/octave-value/ov-str-mat.cc
@@ -273,34 +273,38 @@ octave_char_matrix_str::short_disp (std:
       // FIXME: should this be configurable?
       size_t max_len = 100;
 
       os << (tmp.length () > max_len ? tmp.substr (0, 100) : tmp);
     }
 }
 
 std::string
-octave_char_matrix_str::edit_display (octave_idx_type i, octave_idx_type) const
+octave_char_matrix_str::edit_display (octave_idx_type i,
+                                      octave_idx_type) const
 {
-  if (matrix.rows () == 1 && i == 0)
+  if (i == 0)
     {
-      std::string retval = string_value ();
-
-      if (! is_sq_string ())
-        retval = undo_string_escapes (retval);
+      if (rows () == 1)
+        {
+          std::string retval = string_value ();
 
-      return retval;
+          if (! is_sq_string ())
+            retval = undo_string_escapes (retval);
+
+          return retval;
+        }
+      else if (is_zero_by_zero ())
+        return "";
     }
-  else
-    {
-      std::string tname = type_name ();
-      dim_vector dv = matrix.dims ();
-      std::string dimstr = dv.str ();
-      return "[" + dimstr + " " + tname + "]";
-    }
+
+  std::string tname = type_name ();
+  dim_vector dv = matrix.dims ();
+  std::string dimstr = dv.str ();
+  return "[" + dimstr + " " + tname + "]";
 }
 
 bool
 octave_char_matrix_str::save_ascii (std::ostream& os)
 {
   dim_vector dv = dims ();
   if (dv.ndims () > 2)
     {
