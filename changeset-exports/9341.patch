# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1244815313 -7200
#      Fri Jun 12 16:01:53 2009 +0200
# Node ID 9fd5c56ce57a4b33cb23e275e1b75e9d5c6b7b11
# Parent  49fe8721bae10637d0e82eda50bd848187e73736
extend lookup capabilities

diff --git a/liboctave/Array.cc b/liboctave/Array.cc
--- a/liboctave/Array.cc
+++ b/liboctave/Array.cc
@@ -2465,16 +2465,66 @@ Array<T>::lookup (const Array<T>& values
   lsort.lookup (data () + offset, n, values.data (), values.numel (),
                 idx.fortran_vec (), offset);
 
   return idx;
 }
 
 template <class T>
 Array<octave_idx_type> 
+Array<T>::lookupm (const Array<T>& values, sortmode mode) const
+{
+  octave_idx_type n = numel ();
+  octave_sort<T> lsort;
+  Array<octave_idx_type> idx (values.dims ());
+
+  if (mode == UNSORTED)
+    {
+      // auto-detect mode
+      if (n > 1 && lsort.descending_compare (elem (0), elem (n-1)))
+        mode = DESCENDING;
+      else
+        mode = ASCENDING;
+    }
+
+  lsort.set_compare (mode);
+
+  lsort.lookupm (data (), n, values.data (), values.numel (),
+                 idx.fortran_vec ());
+
+  return idx;
+}
+
+template <class T>
+Array<bool> 
+Array<T>::lookupb (const Array<T>& values, sortmode mode) const
+{
+  octave_idx_type n = numel ();
+  octave_sort<T> lsort;
+  Array<bool> match (values.dims ());
+
+  if (mode == UNSORTED)
+    {
+      // auto-detect mode
+      if (n > 1 && lsort.descending_compare (elem (0), elem (n-1)))
+        mode = DESCENDING;
+      else
+        mode = ASCENDING;
+    }
+
+  lsort.set_compare (mode);
+
+  lsort.lookupb (data (), n, values.data (), values.numel (),
+                 match.fortran_vec ());
+
+  return match;
+}
+
+template <class T>
+Array<octave_idx_type> 
 Array<T>::find (octave_idx_type n, bool backward) const
 {
   Array<octave_idx_type> retval;
   const T *src = data ();
   octave_idx_type nel = nelem ();
   const T zero = T ();
   if (n < 0 || n >= nel)
     {
@@ -2576,16 +2626,22 @@ Array<T>::is_sorted_rows (sortmode) cons
 { return UNSORTED; } \
  \
 template <> octave_idx_type  \
 Array<T>::lookup (T const &, sortmode) const \
 { return 0; } \
 template <> Array<octave_idx_type>  \
 Array<T>::lookup (const Array<T>&, sortmode, bool, bool) const \
 { return Array<octave_idx_type> (); } \
+template <> Array<octave_idx_type>  \
+Array<T>::lookupm (const Array<T>&, sortmode) const \
+{ return Array<octave_idx_type> (); } \
+template <> Array<bool>  \
+Array<T>::lookupb (const Array<T>&, sortmode) const \
+{ return Array<bool> (); } \
 template <> Array<octave_idx_type> \
 Array<T>::find (octave_idx_type, bool) const\
 { return Array<octave_idx_type> (); } \
 
 
 template <class T>
 Array<T>
 Array<T>::diag (octave_idx_type k) const
diff --git a/liboctave/Array.h b/liboctave/Array.h
--- a/liboctave/Array.h
+++ b/liboctave/Array.h
@@ -577,16 +577,23 @@ public:
   // Ditto, but for an array of values, specializing on long runs.
   // If linf is true, the leftmost interval is extended to infinity 
   // (indices will be >= 1).
   // If rinf is true, the rightmost interval is extended to infinity 
   // (indices will be <= length ()-1).
   Array<octave_idx_type> lookup (const Array<T>& values, sortmode mode = UNSORTED, 
                                  bool linf = false, bool rinf = false) const;
 
+  // This looks up only exact matches, giving their indices. Non-exact matches get
+  // the value -1.
+  Array<octave_idx_type> lookupm (const Array<T>& values, sortmode mode = UNSORTED) const;
+
+  // This looks up only exact matches, returning true/false if match.
+  Array<bool> lookupb (const Array<T>& values, sortmode mode = UNSORTED) const;
+
   // Find indices of (at most n) nonzero elements. If n is specified, backward
   // specifies search from backward.
   Array<octave_idx_type> find (octave_idx_type n = -1, bool backward = false) const;
 
   Array<T> diag (octave_idx_type k = 0) const;
 
   template <class U, class F>
   Array<U>
diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,16 @@
+2009-06-12  Jaroslav Hajek  <highegg@gmail.com>
+
+	* oct-sort.cc (octave_sort::lookupm, octave_sort::lookupb): New
+	overloaded methods.
+	* oct-sort.h: Declare them.
+	* Array.cc (Array<T>::lookupm, Array<T>::lookupb): New methods.
+	* Array.h: Declare them.
+
 2009-06-09  Jaroslav Hajek  <highegg@gmail.com>
 
 	* cmd-edit.cc (command_editor::force_default_editor): New static
 	method.
 	* cmd-edit.h: Declare it.
 
 2009-06-09  Jaroslav Hajek  <highegg@gmail.com>
 
diff --git a/liboctave/oct-sort.cc b/liboctave/oct-sort.cc
--- a/liboctave/oct-sort.cc
+++ b/liboctave/oct-sort.cc
@@ -1920,16 +1920,84 @@ octave_sort<T>::lookup (const T *data, o
     if (compare == descending_compare)
       lookup (data, nel, values, nvalues, idx, offset, std::greater<T> ());
   else
 #endif
     if (compare)
       lookup (data, nel, values, nvalues, idx, offset, std::ptr_fun (compare));
 }
 
+template <class T> template <class Comp>
+void 
+octave_sort<T>::lookupm (const T *data, octave_idx_type nel,
+                         const T *values, octave_idx_type nvalues,
+                         octave_idx_type *idx, Comp comp)
+{
+  const T *end = data + nel;
+  for (octave_idx_type i = 0; i < nvalues; i++)
+    {
+      const T *ptr = std::lower_bound (data, end, values[i], comp);
+      if (ptr != end && ! comp (values[i], *ptr))
+        idx[i] = ptr - data;
+      else
+        idx[i] = -1;
+    }
+}
+
+template <class T>
+void 
+octave_sort<T>::lookupm (const T *data, octave_idx_type nel,
+                         const T* values, octave_idx_type nvalues,
+                         octave_idx_type *idx)
+{
+#ifdef INLINE_ASCENDING_SORT
+  if (compare == ascending_compare)
+    lookupm (data, nel, values, nvalues, idx, std::less<T> ());
+  else
+#endif
+#ifdef INLINE_DESCENDING_SORT    
+    if (compare == descending_compare)
+      lookupm (data, nel, values, nvalues, idx, std::greater<T> ());
+  else
+#endif
+    if (compare)
+      lookupm (data, nel, values, nvalues, idx, std::ptr_fun (compare));
+}
+
+template <class T> template <class Comp>
+void 
+octave_sort<T>::lookupb (const T *data, octave_idx_type nel,
+                         const T *values, octave_idx_type nvalues,
+                         bool *match, Comp comp)
+{
+  const T *end = data + nel;
+  for (octave_idx_type i = 0; i < nvalues; i++)
+    match[i] = std::binary_search (data, end, values[i], comp);
+}
+
+template <class T>
+void 
+octave_sort<T>::lookupb (const T *data, octave_idx_type nel,
+                         const T* values, octave_idx_type nvalues,
+                         bool *match)
+{
+#ifdef INLINE_ASCENDING_SORT
+  if (compare == ascending_compare)
+    lookupb (data, nel, values, nvalues, match, std::less<T> ());
+  else
+#endif
+#ifdef INLINE_DESCENDING_SORT    
+    if (compare == descending_compare)
+      lookupb (data, nel, values, nvalues, match, std::greater<T> ());
+  else
+#endif
+    if (compare)
+      lookupb (data, nel, values, nvalues, match, std::ptr_fun (compare));
+}
+
 template <class T>
 bool 
 octave_sort<T>::ascending_compare (typename ref_param<T>::type x,
 				   typename ref_param<T>::type y)
 {
   return x < y;
 }
 
diff --git a/liboctave/oct-sort.h b/liboctave/oct-sort.h
--- a/liboctave/oct-sort.h
+++ b/liboctave/oct-sort.h
@@ -143,16 +143,27 @@ public:
                           const T& value);
 
   // Ditto, but for an array of values, specializing on long runs.
   // Adds offset to all indices.
   void lookup (const T *data, octave_idx_type nel,
                const T* values, octave_idx_type nvalues,
                octave_idx_type *idx, octave_idx_type offset = 0);
 
+  // Lookup an array of values, only returning indices of
+  // exact matches. Non-matches are returned as -1.
+  void lookupm (const T *data, octave_idx_type nel,
+                const T* values, octave_idx_type nvalues,
+                octave_idx_type *idx);
+
+  // Lookup an array of values, only indicating exact matches.
+  void lookupb (const T *data, octave_idx_type nel,
+                const T* values, octave_idx_type nvalues,
+                bool *match);
+
   static bool ascending_compare (typename ref_param<T>::type,
 				 typename ref_param<T>::type);
 
   static bool descending_compare (typename ref_param<T>::type,
 				  typename ref_param<T>::type);
 
 private:
 
@@ -297,16 +308,25 @@ private:
   octave_idx_type lookup (const T *data, octave_idx_type nel,
                           const T& value, Comp comp);
 
   template <class Comp>
   void lookup (const T *data, octave_idx_type nel,
                const T* values, octave_idx_type nvalues,
                octave_idx_type *idx, octave_idx_type offset, Comp comp);
 
+  template <class Comp>
+  void lookupm (const T *data, octave_idx_type nel,
+                const T* values, octave_idx_type nvalues,
+                octave_idx_type *idx, Comp comp);
+
+  template <class Comp>
+  void lookupb (const T *data, octave_idx_type nel,
+                const T* values, octave_idx_type nvalues,
+                bool *match, Comp comp);
 };
 
 template <class T>
 class
 vec_index
 {
 public:
   T vec;
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,14 @@
+2009-06-12  Jaroslav Hajek  <highegg@gmail.com>
+
+	* DLD-FUNCTIONS/lookup.cc (do_numeric_lookup): New template function.
+	(Flookup): Extend to support b and m options, improve diagnostic.
+	Refactor.
+
 2009-06-12  Kai NODA  <nodakai@gmail.com>
 
 	* ls-mat4.h: Fix include guard
 	* ov-type-conv.h: Add missing include guard.
 
 2009-06-12  Jaroslav Hajek  <highegg@gmail.com>
 
 	* data.cc (BINARY_ASSOC_OP_DEFUN_BODY): New helper macro.
diff --git a/src/DLD-FUNCTIONS/lookup.cc b/src/DLD-FUNCTIONS/lookup.cc
--- a/src/DLD-FUNCTIONS/lookup.cc
+++ b/src/DLD-FUNCTIONS/lookup.cc
@@ -94,82 +94,135 @@ get_sort_mode (const Array<T>& array,
 }
 
 // FIXME: perhaps there should be octave_value::lookup?
 // The question is, how should it behave w.r.t. the second argument's type. 
 // We'd need a dispatch on two arguments. Hmmm...
 
 #define INT_ARRAY_LOOKUP(TYPE) \
   (table.is_ ## TYPE ## _type () && y.is_ ## TYPE ## _type ()) \
-    idx = table.TYPE ## _array_value ().lookup (y.TYPE ## _array_value (), \
-                                                UNSORTED, left_inf, right_inf);
+    retval = do_numeric_lookup (table.TYPE ## _array_value (), \
+                                y.TYPE ## _array_value (), \
+                                left_inf, right_inf, \
+                                match_idx, match_bool);
+template <class ArrayT>
+static octave_value
+do_numeric_lookup (const ArrayT& array, const ArrayT& values, 
+                   bool left_inf, bool right_inf,
+                   bool match_idx, bool match_bool)
+{
+  octave_value retval;
+
+  if (match_bool)
+    {
+      boolNDArray match = ArrayN<bool> (array.lookupb (values));
+      retval = match;
+    }
+  else
+    {
+      Array<octave_idx_type> idx;
+
+      if (match_idx)
+        idx = array.lookupm (values);
+      else
+        idx = array.lookup (values, UNSORTED, left_inf, right_inf);
+
+      retval = NDArray (idx, match_idx);
+    }
+
+  return retval;
+}
 
 DEFUN_DLD (lookup, args, ,
   "-*- texinfo -*-\n\
 @deftypefn {Loadable Function} {@var{idx} =} lookup (@var{table}, @var{y}, @var{opt})\n\
 Lookup values in a sorted table.  Usually used as a prelude to\n\
 interpolation.\n\
 \n\
 If table is strictly increasing and @code{idx = lookup (table, y)}, then\n\
 @code{table(idx(i)) <= y(i) < table(idx(i+1))} for all @code{y(i)}\n\
 within the table.  If @code{y(i) < table (1)} then\n\
 @code{idx(i)} is 0. If @code{y(i) >= table(end)} then\n\
-@code{idx(i)} is @code{table(n)}.\n\
+@code{idx(i)} is @code{n}.\n\
 \n\
 If the table is strictly decreasing, then the tests are reversed.\n\
 There are no guarantees for tables which are non-monotonic or are not\n\
 strictly monotonic.\n\
 \n\
 The algorithm used by lookup is standard binary search, with optimizations\n\
 to speed up the case of partially ordered arrays (dense downsampling).\n\
 In particular, looking up a single entry is of logarithmic complexity\n\
 (unless a conversion occurs due to non-numeric or unequal types).\n\
 \n\
 @var{table} and @var{y} can also be cell arrays of strings\n\
 (or @var{y} can be a single string).  In this case, string lookup\n\
 is performed using lexicographical comparison.\n\
 \n\
 If @var{opts} is specified, it shall be a string with letters indicating\n\
 additional options.\n\
+\n\
+If 'm' is specified as option, @code{table(idx(i)) == val(i)} if @code{val(i)}\n\
+occurs in table; otherwise, @code{idx(i)} is zero.\n\
+If 'b' is specified, then @code{idx(i)} is a logical 1 or 0, indicating whether\n\
+@code{val(i)} is contained in table or not.\n\
+\n\
 For numeric lookup, 'l' in @var{opts} indicates that\n\
 the leftmost subinterval shall be extended to infinity (i.e., all indices\n\
 at least 1), and 'r' indicates that the rightmost subinterval shall be\n\
 extended to infinity (i.e., all indices at most n-1).\n\
 \n\
 For string lookup, 'i' indicates case-insensitive comparison.\n\
 @end deftypefn") 
 {
-  octave_value_list retval;
+  octave_value retval;
 
   int nargin = args.length ();
 
   if (nargin < 2 || nargin > 3 || (nargin == 3 && ! args(2).is_string ()))
     {
       print_usage ();
       return retval;
     }
 
   octave_value table = args(0), y = args(1);
   if (table.ndims () > 2 || (table.columns () > 1 && table.rows () > 1))
     warning ("lookup: table is not a vector");
 
   bool num_case = table.is_numeric_type () && y.is_numeric_type ();
   bool str_case = table.is_cellstr () && (y.is_string () || y.is_cellstr ());
+  bool left_inf = false;
+  bool right_inf = false;
+  bool match_idx = false;
+  bool match_bool = false;
+  bool icase = false;
+
+  if (nargin == 3)
+    {
+      std::string opt = args(2).string_value ();
+      left_inf = contains_char (opt, 'l');
+      right_inf = contains_char (opt, 'r');
+      icase = contains_char (opt, 'i');
+      match_idx = contains_char (opt, 'm');
+      match_bool = contains_char (opt, 'b');
+    }
+
+  if ((match_idx || match_bool) && (left_inf || right_inf))
+    error ("lookup: m, b cannot be specified with l or r");
+  else if (match_idx && match_bool)
+    error ("lookup: only one of m, b can be specified");
+  else if (str_case && (left_inf || right_inf))
+    error ("lookup: l,r not recognized for string lookups");
+  else if (num_case && icase)
+    error ("lookup: i not recognized for numeric lookups");
+
+  if (error_state)
+    return retval;
 
   if (num_case) 
     {
-      bool left_inf = false;
-      bool right_inf = false;
-
-      if (nargin == 3)
-        {
-          std::string opt = args(2).string_value ();
-          left_inf = contains_char (opt, 'l');
-          right_inf = contains_char (opt, 'r');
-        }
 
       // In the case of a complex array, absolute values will be used for compatibility
       // (though it's not too meaningful).
       
       if (table.is_complex_type ())
         table = table.abs ();
 
       if (y.is_complex_type ())
@@ -182,100 +235,115 @@ For string lookup, 'i' indicates case-in
       else if INT_ARRAY_LOOKUP (int16)
       else if INT_ARRAY_LOOKUP (int32)
       else if INT_ARRAY_LOOKUP (int64)
       else if INT_ARRAY_LOOKUP (uint8)
       else if INT_ARRAY_LOOKUP (uint16)
       else if INT_ARRAY_LOOKUP (uint32)
       else if INT_ARRAY_LOOKUP (uint64)
       else if (table.is_single_type () || y.is_single_type ())
-        idx = table.float_array_value ().lookup (y.float_array_value (), 
-                                                 UNSORTED, left_inf, right_inf);
+        retval = do_numeric_lookup (table.float_array_value (),
+                                    y.float_array_value (),
+                                    left_inf, right_inf,
+                                    match_idx, match_bool);
       else
-        idx = table.array_value ().lookup (y.array_value (), 
-                                           UNSORTED, left_inf, right_inf);
-
-      retval(0) = NDArray (idx);
+        retval = do_numeric_lookup (table.array_value (),
+                                    y.array_value (),
+                                    left_inf, right_inf,
+                                    match_idx, match_bool);
 
     }
   else if (str_case)
     {
       Array<std::string> str_table = table.cellstr_value ();
       
       // Here we'll use octave_sort directly to avoid converting the array
       // for case-insensitive comparison.
 
-      bool icase = false;
 
       // check for case-insensitive option
       if (nargin == 3)
         {
           std::string opt = args(2).string_value ();
-          icase = contains_char (opt, 'i');
         }
 
       sortmode mode = (icase ? get_sort_mode (str_table, stri_comp_gt)
                        : get_sort_mode (str_table));
 
       bool (*str_comp) (const std::string&, const std::string&);
 
       // pick the correct comparator
       if (mode == DESCENDING)
         str_comp = icase ? stri_comp_gt : octave_sort<std::string>::descending_compare;
       else
         str_comp = icase ? stri_comp_lt : octave_sort<std::string>::ascending_compare;
 
       octave_sort<std::string> lsort (str_comp);
+      Array<std::string> str_y (1);
+
       if (y.is_cellstr ())
+        str_y = y.cellstr_value ();
+      else
+        str_y(0) = y.string_value ();
+
+      if (match_bool)
         {
-          Array<std::string> str_y = y.cellstr_value ();
+          boolNDArray match (str_y.dims ());
+
+          lsort.lookupb (str_table.data (), str_table.nelem (), str_y.data (),
+                         str_y.nelem (), match.fortran_vec ());
 
+          retval = match;
+        }
+      else
+        {
           Array<octave_idx_type> idx (str_y.dims ());
 
-          lsort.lookup (str_table.data (), str_table.nelem (), str_y.data (),
-                        str_y.nelem (), idx.fortran_vec ());
+          if (match_idx)
+            {
+              lsort.lookupm (str_table.data (), str_table.nelem (), str_y.data (),
+                             str_y.nelem (), idx.fortran_vec ());
+            }
+          else
+            {
+              lsort.lookup (str_table.data (), str_table.nelem (), str_y.data (),
+                            str_y.nelem (), idx.fortran_vec ());
+            }
 
-          retval(0) = NDArray (idx);
-        }
-      else if (y.is_string ())
-        {
-          std::string str_y = y.string_value ();
-
-          octave_idx_type idx;
-
-          lsort.lookup (str_table.data (), str_table.nelem (), &str_y,
-                        1, &idx);
-
-          retval(0) = idx;
+          retval = NDArray (idx, match_idx);
         }
     }
   else
     print_usage ();
 
   return retval;
 
 }  
 
 /*
-%!assert (real(lookup(1:3, 0.5)), 0)     # value before table
-%!assert (real(lookup(1:3, 3.5)), 3)     # value after table error
-%!assert (real(lookup(1:3, 1.5)), 1)     # value within table error
-%!assert (real(lookup(1:3, [3,2,1])), [3,2,1])
-%!assert (real(lookup([1:4]', [1.2, 3.5]')), [1, 3]');
-%!assert (real(lookup([1:4], [1.2, 3.5]')), [1, 3]');
-%!assert (real(lookup([1:4]', [1.2, 3.5])), [1, 3]);
-%!assert (real(lookup([1:4], [1.2, 3.5])), [1, 3]);
-%!assert (real(lookup(1:3, [3, 2, 1])), [3, 2, 1]);
-%!assert (real(lookup([3:-1:1], [3.5, 3, 1.2, 2.5, 2.5])), [0, 1, 2, 1, 1])
+%!assert (lookup(1:3, 0.5), 0)     # value before table
+%!assert (lookup(1:3, 3.5), 3)     # value after table error
+%!assert (lookup(1:3, 1.5), 1)     # value within table error
+%!assert (lookup(1:3, [3,2,1]), [3,2,1])
+%!assert (lookup([1:4]', [1.2, 3.5]'), [1, 3]');
+%!assert (lookup([1:4], [1.2, 3.5]'), [1, 3]');
+%!assert (lookup([1:4]', [1.2, 3.5]), [1, 3]);
+%!assert (lookup([1:4], [1.2, 3.5]), [1, 3]);
+%!assert (lookup(1:3, [3, 2, 1]), [3, 2, 1]);
+%!assert (lookup([3:-1:1], [3.5, 3, 1.2, 2.5, 2.5]), [0, 1, 2, 1, 1])
 %!assert (isempty(lookup([1:3], [])))
 %!assert (isempty(lookup([1:3]', [])))
-%!assert (real(lookup(1:3, [1, 2; 3, 0.5])), [1, 2; 3, 0]);
+%!assert (lookup(1:3, [1, 2; 3, 0.5]), [1, 2; 3, 0]);
+%!assert (lookup(1:4, [1, 1.2; 3, 2.5], "m"), [1, 0; 3, 0]);
+%!assert (lookup(4:-1:1, [1, 1.2; 3, 2.5], "m"), [4, 0; 2, 0]);
+%!assert (lookup(1:4, [1, 1.2; 3, 2.5], "b"), logical ([1, 0; 3, 0]));
+%!assert (lookup(4:-1:1, [1, 1.2; 3, 2.5], "b"), logical ([4, 0; 2, 0]));
 %!
-%!assert (real(lookup({"apple","lemon","orange"}, {"banana","kiwi"; "ananas","mango"})), [1,1;0,2])
-%!assert (real(lookup({"apple","lemon","orange"}, "potato")), 3)
-%!assert (real(lookup({"orange","lemon","apple"}, "potato")), 0)
+%!assert (lookup({"apple","lemon","orange"}, {"banana","kiwi"; "ananas","mango"}), [1,1;0,2])
+%!assert (lookup({"apple","lemon","orange"}, "potato"), 3)
+%!assert (lookup({"orange","lemon","apple"}, "potato"), 0)
 */
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
