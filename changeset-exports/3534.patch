# HG changeset patch
# User jwe
# Date 949492331 0
#      Wed Feb 02 11:52:11 2000 +0000
# Node ID 096ad38d7ab543e157ddaa5f72ebf882d1dfc8a1
# Parent  a99cf9fc22fe453159af18c64d79c9f4ec39f8f1
[project @ 2000-02-02 11:52:05 by jwe]

diff --git a/src/defaults.cc b/src/defaults.cc
--- a/src/defaults.cc
+++ b/src/defaults.cc
@@ -228,17 +228,17 @@ set_local_site_defaults_file (void)
 
 static void
 set_site_defaults_file (void)
 {
   Vsite_defaults_file = subst_octave_home (OCTAVE_STARTUPFILEDIR);
   Vsite_defaults_file.append ("/octaverc");
 }
 
-string
+std::string
 maybe_add_default_load_path (const std::string& pathstring)
 {
   std::string retval;
 
   if (! pathstring.empty ())
     {
       if (pathstring[0] == SEPCHAR)
 	{
diff --git a/src/dynamic-ld.cc b/src/dynamic-ld.cc
--- a/src/dynamic-ld.cc
+++ b/src/dynamic-ld.cc
@@ -303,17 +303,17 @@ octave_dynamic_loader::load (const std::
 }
 
 bool
 octave_dynamic_loader::remove (const std::string& fcn_name, octave_shlib& shl)
 {
   return (instance_ok ()) ? instance->do_remove (fcn_name, shl) : false;
 }
 
-string
+std:string
 octave_dynamic_loader::mangle_name (const std::string& name)
 {
 #if defined (CXX_PREPENDS_UNDERSCORE)
   std::string retval ("_FS");
 #else
   std::string retval ("FS");
 #endif
   retval.append (name);
diff --git a/src/input.cc b/src/input.cc
--- a/src/input.cc
+++ b/src/input.cc
@@ -151,17 +151,17 @@ do_input_echo (const std::string& input_
 	  octave_stdout << input_string;
 
 	  if (input_string[input_string.length () - 1] != '\n')
 	    octave_stdout << "\n";
 	}
     }
 }
 
-string
+std:string
 gnu_readline (const std::string& s, bool force_readline)
 {
   std::string retval;
 
   if (line_editing || force_readline)
     {
       bool eof;
 
diff --git a/src/oct-hist.cc b/src/oct-hist.cc
--- a/src/oct-hist.cc
+++ b/src/oct-hist.cc
@@ -100,17 +100,17 @@ default_history_size (void)
 
       if (sscanf (env_size.c_str (), "%d", &val) == 1)
 	size = val > 0 ? val : 0;
     }
 
   return size;
 }
 
-string
+std:string
 default_history_file (void)
 {
   std::string file;
 
   std::string env_file = octave_env::getenv ("OCTAVE_HISTFILE");
 
   if (! env_file.empty ())
     {
diff --git a/src/oct-stream.cc b/src/oct-stream.cc
--- a/src/oct-stream.cc
+++ b/src/oct-stream.cc
@@ -872,17 +872,17 @@ octave_base_stream::clear (void)
 {
   fail = false;
   errmsg = "";
 }
 
 // Functions that are defined for all input streams (input streams
 // are those that define is).
 
-string
+std:string
 octave_base_stream::do_gets (int max_len, bool& err,
 			     bool strip_newline, const char *fcn)
 {
   std::string retval;
 
   err = false;
 
   std::istream *isp = input_stream ();
@@ -945,23 +945,23 @@ octave_base_stream::do_gets (int max_len
     {
       err = true;
       invalid_operation (fcn, "reading");
     }
 
   return retval;
 }
 
-string
+std:string
 octave_base_stream::getl (int max_len, bool& err)
 {
   return do_gets (max_len, err, true, "fgetl");
 }
 
-string
+std:string
 octave_base_stream::gets (int max_len, bool& err)
 {
   return do_gets (max_len, err, false, "fgets");
 }
 
 octave_value
 octave_base_stream::read (const Matrix& size,
 			  oct_data_conv::data_type dt, int skip,
@@ -2066,17 +2066,17 @@ printf_value_cache::int_value (void)
 	retval = NINT (dval);
       else
 	curr_state = conversion_error;
     }
 
   return retval;
 }
 
-string
+std:string
 printf_value_cache::string_value (void)
 {
   std::string retval;
 
   if (looking_at_string ())
     {
       if (elt_idx != 0)
 	{
@@ -2366,17 +2366,17 @@ octave_base_stream::puts (const std::str
 int
 octave_base_stream::rewind (void)
 {
   return seek (0, ios::beg);
 }
 
 // Return current error message for this stream.
 
-string
+std:string
 octave_base_stream::error (bool clear_err, int& err_num)
 {
   err_num = fail ? -1 : 0;
 
   std::string tmp = errmsg;
 
   if (clear_err)
     clear ();
@@ -2436,28 +2436,28 @@ octave_stream::flush (void)
   int retval = -1;
 
   if (stream_ok ("fflush"))
     retval = rep->flush ();
 
   return retval;
 }
 
-string
+std:string
 octave_stream::getl (int max_len, bool& err)
 {
   std::string retval;
 
   if (stream_ok ("getl"))
     retval = rep->getl (max_len, err);
 
   return retval;
 }
 
-string
+std:string
 octave_stream::getl (const octave_value& tc_max_len, bool& err)
 {
   std::string retval;
 
   err = false;
 
   int conv_err = 0;
 
@@ -2469,28 +2469,28 @@ octave_stream::getl (const octave_value&
       ::error ("fgetl: invalid maximum length specified");
     }
   else
     retval = getl (max_len, err);
 
   return retval;
 }
 
-string
+std:string
 octave_stream::gets (int max_len, bool& err)
 {
   std::string retval;
 
   if (stream_ok ("fgets"))
     retval = rep->gets (max_len, err);
 
   return retval;
 }
 
-string
+std:string
 octave_stream::gets (const octave_value& tc_max_len, bool& err)
 {
   std::string retval;
 
   err = false;
 
   int conv_err = 0;
 
@@ -2707,28 +2707,28 @@ octave_stream::eof (void) const
   int retval = -1;
 
   if (stream_ok ("feof"))
     retval = rep->eof ();
 
   return retval;
 }
 
-string
+std:string
 octave_stream::error (bool clear, int& err_num)
 {
   std::string retval;
 
   if (stream_ok ("ferror", false))
     retval = rep->error (clear, err_num);
 
   return retval;
 }
 
-string
+std:string
 octave_stream::name (void) const
 {
   std::string retval;
 
   if (stream_ok ("name"))
     retval = rep->name ();
 
   return retval;
@@ -2751,17 +2751,17 @@ octave_stream::float_format (void) const
   oct_mach_info::float_format retval = oct_mach_info::unknown;
 
   if (stream_ok ("float_format"))
     retval = rep->float_format ();
 
   return retval;
 }
 
-string
+std:string
 octave_stream::mode_as_string (int mode)
 {
   std::string retval = "???";
 
   switch (mode)
     {
     case ios::in:
       retval = "r";
@@ -2890,17 +2890,17 @@ octave_stream_list::get_info (int fid)
 }
 
 string_vector
 octave_stream_list::get_info (const octave_value& fid)
 {
   return (instance_ok ()) ? instance->do_get_info (fid) : string_vector ();
 }
 
-string
+std:string
 octave_stream_list::list_open_files (void)
 {
   return (instance_ok ()) ? instance->do_list_open_files () : std::string ();
 }
 
 octave_value
 octave_stream_list::open_file_numbers (void)
 {
@@ -3074,17 +3074,17 @@ octave_stream_list::do_get_info (const o
   if (! conv_err)
     retval = do_get_info (int_fid);
   else
     ::error ("file id must be a file object or integer value");
 
   return retval;
 }
 
-string
+std:string
 octave_stream_list::do_list_open_files (void) const
 {
   std::string retval;
 
   // XXX FIXME XXX -- this should probably be converted to use sstream
   // when that is available.
   std::ostrstream buf;
 
diff --git a/src/ov-base.cc b/src/ov-base.cc
--- a/src/ov-base.cc
+++ b/src/ov-base.cc
@@ -242,17 +242,17 @@ octave_base_value::char_matrix_value (bo
 string_vector
 octave_base_value::all_strings (void) const
 {
   string_vector retval;
   gripe_wrong_type_arg ("octave_base_value::all_strings()", type_name ());
   return retval;
 }
 
-string
+std:string
 octave_base_value::string_value (void) const
 {
   std::string retval;
   gripe_wrong_type_arg ("octave_base_value::string_value()", type_name ());
   return retval;
 }
 
 Range
diff --git a/src/ov-dld-fcn.cc b/src/ov-dld-fcn.cc
--- a/src/ov-dld-fcn.cc
+++ b/src/ov-dld-fcn.cc
@@ -57,17 +57,17 @@ octave_dld_function::octave_dld_function
        && Vfcn_file_dir.compare (file_name, 0, Vfcn_file_dir.length ()) == 0);
 }
 
 octave_dld_function::~octave_dld_function (void)
 {
   octave_dynamic_loader::remove (my_name, sh_lib);
 }
 
-string
+std:string
 octave_dld_function::fcn_file_name (void) const
 {
   return sh_lib.file_name ();
 }
 
 octave_time
 octave_dld_function::time_parsed (void) const
 {
diff --git a/src/ov-str-mat.cc b/src/ov-str-mat.cc
--- a/src/ov-str-mat.cc
+++ b/src/ov-str-mat.cc
@@ -177,17 +177,17 @@ octave_char_matrix_str::all_strings (voi
   string_vector retval (n);
 
   for (int i = 0; i < n; i++)
     retval[i] = matrix.row_as_string (i, true);
 
   return retval;
 }
 
-string
+std:string
 octave_char_matrix_str::string_value (void) const
 {
   return matrix.row_as_string (0);  // XXX FIXME??? XXX
 }
 
 void
 octave_char_matrix_str::print_raw (std::ostream& os, bool pr_as_read_syntax) const
 {
diff --git a/src/ov.cc b/src/ov.cc
--- a/src/ov.cc
+++ b/src/ov.cc
@@ -116,17 +116,17 @@ bool Vwarn_divide_by_zero;
 // If TRUE, resize matrices when performing and indexed assignment and
 // the indices are outside the current bounds.
 bool Vresize_on_range_error;
 
 // XXX FIXME XXX
 
 // Octave's value type.
 
-string
+std:string
 octave_value::unary_op_as_string (unary_op op)
 {
   std::string retval;
 
   switch (op)
     {
     case op_not:
       retval = "!";
@@ -154,17 +154,17 @@ octave_value::unary_op_as_string (unary_
 
     default:
       retval = "<unknown>";
     }
 
   return retval;
 }
 
-string
+std:string
 octave_value::binary_op_as_string (binary_op op)
 {
   std::string retval;
 
   switch (op)
     {
     case op_add:
       retval = "+";
@@ -252,17 +252,17 @@ octave_value::binary_op_as_string (binar
 
     default:
       retval = "<unknown>";
     }
 
   return retval;
 }
 
-string
+std:string
 octave_value::assign_op_as_string (assign_op op)
 {
   std::string retval;
 
   switch (op)
     {
     case op_asn_eq:
       retval = "=";
diff --git a/src/parse.y b/src/parse.y
--- a/src/parse.y
+++ b/src/parse.y
@@ -2898,17 +2898,17 @@ gobble_leading_white_space (FILE *ffile,
 
       if (in_parts && help_txt.empty ())
 	help_txt = gobble_leading_white_space (ffile, in_parts, update_pos);
     }
 
   return help_txt;
 }
 
-string
+std:string
 get_help_from_file (const std::string& path)
 {
   std::string retval;
 
   if (! path.empty ())
     {
       FILE *fptr = fopen (path.c_str (), "r");
 
diff --git a/src/pt-assign.cc b/src/pt-assign.cc
--- a/src/pt-assign.cc
+++ b/src/pt-assign.cc
@@ -155,17 +155,17 @@ tree_simple_assignment::eval_error (void
       int c = column ();
 
       if (l != -1 && c != -1)
 	::error ("evaluating assignment expression near line %d, column %d",
 		 l, c);
     }
 }
 
-string
+std:string
 tree_simple_assignment::oper (void) const
 {
   return octave_value::assign_op_as_string (etype);
 }
 
 void
 tree_simple_assignment::accept (tree_walker& tw)
 {
@@ -304,17 +304,17 @@ tree_multi_assignment::eval_error (void)
       int c = column ();
 
       if (l != -1 && c != -1)
 	::error ("evaluating assignment expression near line %d, column %d",
 		 l, c);
     }
 }
 
-string
+std:string
 tree_multi_assignment::oper (void) const
 {
   return octave_value::assign_op_as_string (etype);
 }
 
 void
 tree_multi_assignment::accept (tree_walker& tw)
 {
diff --git a/src/pt-binop.cc b/src/pt-binop.cc
--- a/src/pt-binop.cc
+++ b/src/pt-binop.cc
@@ -95,17 +95,17 @@ tree_binary_expression::rvalue (void)
 void
 tree_binary_expression::eval_error (void)
 {
   if (error_state > 0)
     ::error ("evaluating binary operator `%s' near line %d, column %d",
 	     oper () . c_str (), line (), column ());
 }
 
-string
+std:string
 tree_binary_expression::oper (void) const
 {
   return octave_value::binary_op_as_string (etype);
 }
 
 void
 tree_binary_expression::accept (tree_walker& tw)
 {
@@ -191,17 +191,17 @@ tree_boolean_expression::rvalue (void)
 	}
     }
   else
     eval_error ();
 
   return retval;
 }
 
-string
+std:string
 tree_boolean_expression::oper (void) const
 {
   std::string retval = "<unknown>";
 
   switch (etype)
     {
     case bool_and:
       retval = "&&";
diff --git a/src/pt-exp.cc b/src/pt-exp.cc
--- a/src/pt-exp.cc
+++ b/src/pt-exp.cc
@@ -77,17 +77,17 @@ tree_expression::rvalue (int)
 
 octave_lvalue
 tree_expression::lvalue (void)
 {
   ::error ("invalid lvalue function called in expression");
   return octave_lvalue ();
 }
 
-string
+std:string
 tree_expression::original_text (void) const
 {
   return std::string ();
 }
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
diff --git a/src/pt-id.cc b/src/pt-id.cc
--- a/src/pt-id.cc
+++ b/src/pt-id.cc
@@ -36,17 +36,17 @@ Software Foundation, 59 Temple Place - S
 #include "pt-id.h"
 #include "pt-walk.h"
 #include "symtab.h"
 #include "utils.h"
 #include "variables.h"
 
 // Symbols from the symbol table.
 
-string
+std:string
 tree_identifier::name (void) const
 {
   std::string retval;
   if (sym)
     retval = sym->name ();
   return retval;
 }
 
diff --git a/src/pt-idx.cc b/src/pt-idx.cc
--- a/src/pt-idx.cc
+++ b/src/pt-idx.cc
@@ -48,17 +48,17 @@ tree_index_expression::~tree_index_expre
 {
   delete expr;
   delete list;
 }
 
 // This is useful for printing the name of the variable in an indexed
 // assignment.
 
-string
+std:string
 tree_index_expression::name (void) const
 {
   return expr->name ();
 }
 
 octave_value_list
 tree_index_expression::rvalue (int nargout)
 {
diff --git a/src/pt-indir.cc b/src/pt-indir.cc
--- a/src/pt-indir.cc
+++ b/src/pt-indir.cc
@@ -41,17 +41,17 @@ Software Foundation, 59 Temple Place - S
 
 // Indirect references to values (structure elements).
 
 tree_indirect_ref::~tree_indirect_ref (void)
 {
   delete expr;
 }
 
-string
+std:string
 tree_indirect_ref::name (void) const
 {
   // ??? FIXME ???
   std::string xname = expr->name ();
 
   return (xname == "<unknown>") ? xname : xname + "." + nm;
 }
 
diff --git a/src/pt-plot.cc b/src/pt-plot.cc
--- a/src/pt-plot.cc
+++ b/src/pt-plot.cc
@@ -850,17 +850,17 @@ subplot_list::print (int ndim, std::ostr
 }
 
 void
 subplot_list::accept (tree_walker& tw)
 {
   tw.visit_subplot_list (*this);
 }
 
-string
+std:string
 save_in_tmp_file (octave_value& t, int ndim, bool parametric)
 {
   std::string name = file_ops::tempnam ("", "oct-");
 
   if (! name.empty ())
     {
       std::ofstream file (name.c_str ());
 
diff --git a/src/pt-unop.cc b/src/pt-unop.cc
--- a/src/pt-unop.cc
+++ b/src/pt-unop.cc
@@ -32,17 +32,17 @@ Software Foundation, 59 Temple Place - S
 #include "oct-obj.h"
 #include "oct-lvalue.h"
 #include "ov.h"
 #include "pt-unop.h"
 #include "pt-walk.h"
 
 // Unary expressions.
 
-string
+std:string
 tree_unary_expression::oper (void) const
 {
   return octave_value::unary_op_as_string (etype);
 }
 
 // Prefix expressions.
 
 octave_value_list
diff --git a/src/pt.cc b/src/pt.cc
--- a/src/pt.cc
+++ b/src/pt.cc
@@ -33,17 +33,17 @@ Software Foundation, 59 Temple Place - S
 #include <string>
 
 #include "pt.h"
 #include "pt-pr-code.h"
 
 // Hide the details of the string buffer so that we are less likely to
 // create a memory leak.
 
-string
+std:string
 tree::str_print_code (void)
 {
   std::ostrstream buf;
 
   tree_print_code tpc (buf);
 
   accept (tpc);
 
diff --git a/src/symtab.cc b/src/symtab.cc
--- a/src/symtab.cc
+++ b/src/symtab.cc
@@ -53,17 +53,17 @@ Software Foundation, 59 Temple Place - S
 // warning message.  Zero means it should be considered an error.
 static int Vvariables_can_hide_functions;
 
 octave_allocator
 symbol_record::symbol_def::allocator (sizeof (symbol_record::symbol_def));
 
 #define SYMBOL_DEF symbol_record::symbol_def
 
-string
+std:string
 SYMBOL_DEF::type_as_string (void) const
 {
   std::string retval = "<unknown type>";
 
   if (is_user_variable ())
     retval = "user-defined variable";
   else if (is_text_function ())
     retval = "built-in text function";
@@ -132,17 +132,17 @@ SYMBOL_DEF::type (std::ostream& os, cons
 
       if (pr_type_info)
 	os << "\n";
     }
   else
     os << name << " is a " << type_as_string () << "\n";
 }
 
-string
+std:string
 SYMBOL_DEF::which (const std::string& name)
 {
   std::string retval;
 
   if (is_user_function () || is_dld_function ())
     {
       octave_function *defn = definition.function_value ();
 
diff --git a/src/token.cc b/src/token.cc
--- a/src/token.cc
+++ b/src/token.cc
@@ -85,17 +85,17 @@ token::token (symbol_record *s, int l, i
 }
 
 token::~token (void)
 {
   if (type_tag == string_token)
     delete str;
 }
 
-string
+std:string
 token::text (void)
 {
   assert (type_tag == string_token);
   return *str;
 }
 
 double
 token::number (void)
@@ -120,17 +120,17 @@ token::pttype (void)
 
 symbol_record *
 token::sym_rec (void)
 {
   assert (type_tag == sym_rec_token);
   return sr;
 }
 
-string
+std:string
 token::text_rep (void)
 {
   return orig_text;
 }
 
 token::token (const token& /* tok */)
 {
   panic_impossible ();
diff --git a/src/utils.cc b/src/utils.cc
--- a/src/utils.cc
+++ b/src/utils.cc
@@ -223,17 +223,17 @@ empty_arg (const char *name, int nr, int
 	is_empty = 1;
     }
 
   return is_empty;
 }
 
 // See if the given file is in the path.
 
-string
+std:string
 search_path_for_file (const std::string& path, const std::string& name)
 {
   dir_path p (path);
 
   return octave_env::make_absolute (p.find (name), octave_env::getcwd ());
 }
 
 DEFUN (file_in_loadpath, args, ,
@@ -298,32 +298,32 @@ file_in_path (LOADPATH, \"nargchk.m\")\n
 	retval = fname;
     }
   else
     print_usage ("file_in_path");
 
   return retval;
 }
 
-string
+std:string
 file_in_path (const std::string& name, const std::string& suffix)
 {
   std::string nm = name;
 
   if (! suffix.empty ())
     nm.append (suffix);
 
   return octave_env::make_absolute (Vload_path_dir_path.find (nm),
 				    octave_env::getcwd ());
 }
 
 // See if there is an function file in the path.  If so, return the
 // full path to the file.
 
-string
+std:string
 fcn_file_in_path (const std::string& name)
 {
   std::string retval;
 
   int len = name.length ();
   
   if (len > 0)
     {
@@ -334,17 +334,17 @@ fcn_file_in_path (const std::string& nam
     }
 
   return retval;
 }
 
 // See if there is an octave file in the path.  If so, return the
 // full path to the file.
 
-string
+std:string
 oct_file_in_path (const std::string& name)
 {
   std::string retval;
 
   int len = name.length ();
   
   if (len > 0)
     {
@@ -355,17 +355,17 @@ oct_file_in_path (const std::string& nam
 	retval = file_in_path (name, ".oct");
     }
 
   return retval;
 }
 
 // Replace backslash escapes in a string with the real values.
 
-string
+std:string
 do_string_escapes (const std::string& s)
 {
   std::string retval;
 
   size_t i = 0;
   size_t j = 0;
   size_t len = s.length ();
 
@@ -501,17 +501,17 @@ undo_string_escape (char c)
 	static char retval[2];
 	retval[0] = c;
 	retval[1] = '\0';
 	return retval;
       }
     }
 }
 
-string
+std:string
 undo_string_escapes (const std::string& s)
 {
   std::string retval;
 
   for (size_t i = 0; i < s.length (); i++)
     retval.append (undo_string_escape (s[i]));
 
   return retval;
