# HG changeset patch
# User Torsten <mttl@mailbox.org>
# Date 1551650723 -3600
#      Sun Mar 03 23:05:23 2019 +0100
# Node ID e255897f353daca3f5216f81c99bc3ef410dbafb
# Parent  fab67369e8027436b2502e05a1ed7f75ea56613c
gui: allow entering shorcuts with shift modifier and numbers (bug #50555)

* shortcut-manager.cc (enter_shortcut::enter_shortcut): initialize new
  class variable m_shift_modifier;
  (enter_shortcut::event): use more robust static method
  QGuiApplication::keyboardModifiers for getting modifiers, add Qt::SHIFT
  if selected in the new checkbox;
  (handle_shift_modifier): new slot for updateing new class variable
  depending on new checkbox;
  (shortcut_manager::shortcut_dialog): add new checkbox and connect
  related signals

* shortcut-manager.h: new method handle_shift_modifier and new class
  variable m_shift_modifier

diff --git a/libgui/src/shortcut-manager.cc b/libgui/src/shortcut-manager.cc
--- a/libgui/src/shortcut-manager.cc
+++ b/libgui/src/shortcut-manager.cc
@@ -23,16 +23,17 @@ along with Octave; see the file COPYING.
 #if defined (HAVE_CONFIG_H)
 #  include "config.h"
 #endif
 
 #include <QtCore>
 #include <QMessageBox>
 #include <QDebug>
 #include <QGridLayout>
+#include <QGuiApplication>
 #include <QVBoxLayout>
 #include <QDialogButtonBox>
 #include <QKeySequence>
 #include <QPushButton>
 #include <QLineEdit>
 #include <QCheckBox>
 #include <QHeaderView>
 #include <QAction>
@@ -45,16 +46,17 @@ along with Octave; see the file COPYING.
 namespace octave
 {
   // enter_shortcut:
   // class derived from QLineEdit for directly entering key sequences which
 
   enter_shortcut::enter_shortcut (QWidget *p) : QLineEdit (p)
   {
     m_direct_shortcut = true;      // the shortcut is directly entered
+    m_shift_modifier = false;      // the shift modifier is not added
   }
 
   // new keyPressEvent
   void enter_shortcut::keyPressEvent (QKeyEvent *e)
   {
     if (! m_direct_shortcut)
       {
         QLineEdit::keyPressEvent (e);
@@ -63,19 +65,19 @@ namespace octave
 
     if (e->type () == QEvent::KeyPress)
       {
         int key = e->key ();
 
         if (key == Qt::Key_unknown || key == 0)
           return;
 
-        Qt::KeyboardModifiers modifiers = e->modifiers ();
+        Qt::KeyboardModifiers modifiers = QGuiApplication::keyboardModifiers (); //e->modifiers ();
 
-        if (modifiers & Qt::ShiftModifier)
+        if (m_shift_modifier || (modifiers & Qt::ShiftModifier))
           key += Qt::SHIFT;
         if (modifiers & Qt::ControlModifier)
           key += Qt::CTRL;
         if (modifiers & Qt::AltModifier)
           key += Qt::ALT;
         if (modifiers & Qt::MetaModifier)
           key += Qt::META;
 
@@ -87,16 +89,26 @@ namespace octave
   void enter_shortcut::handle_direct_shortcut (int state)
   {
     if (state)
       m_direct_shortcut = true;  // the shortcut is directly entered
     else
       m_direct_shortcut = false; // the shortcut has to be written as text
   }
 
+  // slot for checkbox whether the shift modifier should be added
+  void enter_shortcut::handle_shift_modifier (int state)
+  {
+    if (state)
+      m_shift_modifier = true;  // the shortcut is directly entered
+    else
+      m_shift_modifier = false; // the shortcut has to be written as text
+  }
+
+
   shortcut_manager *shortcut_manager::instance = nullptr;
 
   shortcut_manager::shortcut_manager (void)
   {
     setObjectName ("Shortcut_Manager");
 
     // Mac: don't let Qt interpret CMD key ("Meta" in Qt terminology) as Ctrl
 #if defined (Q_OS_MAC)
@@ -714,27 +726,41 @@ namespace octave
   {
     if (! m_dialog)
       {
         m_dialog = new QDialog (this);
 
         m_dialog->setWindowTitle (tr ("Enter new Shortcut"));
 
         QVBoxLayout *box = new QVBoxLayout (m_dialog);
+        box->setSpacing (2);
+        box->setContentsMargins (12, 12, 12, 12);
 
         QLabel *help = new QLabel (tr ("Apply the desired shortcut or click "
                                        "on the right button to reset the "
                                        "shortcut to its default."));
         help->setWordWrap (true);
         box->addWidget (help);
 
         QCheckBox *direct = new QCheckBox (
                                            tr ("Enter shortcut directly by performing it"));
+        QCheckBox *shift = new QCheckBox (
+                                 tr ("Add Shift modifier\n"
+                                     "(allows to enter number keys)"));
+        shift->setStyleSheet ("QCheckBox::indicator { subcontrol-position: left top; }");
+
+        connect (direct, SIGNAL (clicked (bool)),
+                 shift, SLOT (setEnabled (bool)));
+
         direct->setCheckState (Qt::Checked);
+
         box->addWidget (direct);
+        box->addWidget (shift);
+
+        box->addSpacing (15);
 
         QGridLayout *grid = new QGridLayout ();
 
         QLabel *actual = new QLabel (tr ("Actual shortcut"));
         m_edit_actual = new enter_shortcut (m_dialog);
         m_edit_actual->setAlignment (Qt::AlignHCenter);
         grid->addWidget (actual, 0, 0);
         grid->addWidget (m_edit_actual, 0, 1);
@@ -747,29 +773,33 @@ namespace octave
 
         QPushButton *set_default = new QPushButton (tr ("Set to default"));
         grid->addWidget (set_default, 0, 2);
         connect (set_default, SIGNAL (clicked ()),
                  this, SLOT (shortcut_dialog_set_default ()));
 
         box->addLayout (grid);
 
+        box->addSpacing (18);
+
         QDialogButtonBox *button_box = new QDialogButtonBox (QDialogButtonBox::Ok
                                                              | QDialogButtonBox::Cancel);
         QList<QAbstractButton *> buttons = button_box->buttons ();
         for (int i = 0; i < buttons.count (); i++)
           buttons.at (i)->setShortcut (QKeySequence ());
         connect (button_box, SIGNAL (accepted ()), m_dialog, SLOT (accept ()));
         connect (button_box, SIGNAL (rejected ()), m_dialog, SLOT (reject ()));
         box->addWidget (button_box);
 
         m_dialog->setLayout (box);
 
         connect (direct, SIGNAL (stateChanged (int)),
                  m_edit_actual, SLOT (handle_direct_shortcut (int)));
+        connect (shift, SIGNAL (stateChanged (int)),
+                 m_edit_actual, SLOT (handle_shift_modifier (int)));
         connect (m_dialog, SIGNAL (finished (int)),
                  this, SLOT (shortcut_dialog_finished (int)));
 
       }
 
     m_edit_actual->setText (m_sc.at (index).m_actual_sc.toString ());
     m_label_default->setText (m_sc.at (index).m_default_sc.toString ());
     m_handled_index = index;
diff --git a/libgui/src/shortcut-manager.h b/libgui/src/shortcut-manager.h
--- a/libgui/src/shortcut-manager.h
+++ b/libgui/src/shortcut-manager.h
@@ -43,20 +43,22 @@ namespace octave
 
     ~enter_shortcut (void) = default;
 
     virtual void keyPressEvent (QKeyEvent *e);
 
   public slots:
 
     void handle_direct_shortcut (int);
+    void handle_shift_modifier (int);
 
   private:
 
     bool m_direct_shortcut;
+    bool m_shift_modifier;
 
   };
 
   class shortcut_manager : public QWidget
   {
     Q_OBJECT
 
   public:
