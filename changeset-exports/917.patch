# HG changeset patch
# User jwe
# Date 784519602 0
#      Fri Nov 11 02:06:42 1994 +0000
# Node ID b843a65fa97767fd5d699cea03178b6ff7501e2f
# Parent  2f35156aa18b429273ab45a5a523d5dfa39842d4
[project @ 1994-11-11 02:00:28 by jwe]

diff --git a/scripts/general/reshape.m b/scripts/general/reshape.m
--- a/scripts/general/reshape.m
+++ b/scripts/general/reshape.m
@@ -26,18 +26,21 @@ function retval = reshape (a, m, n)
 # See also: `:', do_fortran_indexing
 
   if (nargin != 3)
     usage ("reshape (a, m, n)");
   else
     [nr, nc] = size (a);
     if (nr * nc == m * n)
       tmp = do_fortran_indexing;
-      do_fortran_indexing = "true";
-      retval = zeros (m, n);
-      retval (:) = a;
-      do_fortran_indexing = tmp;
+      unwind_protect
+        do_fortran_indexing = "true";
+        retval = zeros (m, n);
+        retval (:) = a;
+      unwind_protect_cleanup
+        do_fortran_indexing = tmp;
+      end_unwind_protect
     else
       error ("reshape: sizes must match");
     endif
   endif
 
 endfunction
diff --git a/scripts/image/ind2gray.m b/scripts/image/ind2gray.m
--- a/scripts/image/ind2gray.m
+++ b/scripts/image/ind2gray.m
@@ -14,23 +14,29 @@ function Y = ind2gray(X,map)
   if (nargin == 1)
     map = colormap;
   endif
 
   # Convert colormap to intensity values.
   yiq = rgb2ntsc(map);
   y = yiq(:,1);
 
-  # We need Fortran indexing capability, but be sure to save the user's
-  # preference.
+# We need Fortran indexing capability, but be sure to save the user's
+# preference.
+
   pref = do_fortran_indexing;
-  do_fortran_indexing = "true";
+
+  unwind_protect
+
+    do_fortran_indexing = "true";
 
-  # Replace indices in the input matrix with indexed values in the output
-  # matrix.
-  [rows, cols] = size(X);
-  Y = y(X(:));
-  Y = reshape(Y,rows,cols);
+# Replace indices in the input matrix with indexed values in the output
+# matrix.
 
-  # Restore the user's preference.
-  do_fortran_indexing = pref;
+    [rows, cols] = size(X);
+    Y = y(X(:));
+    Y = reshape(Y,rows,cols);
+
+  unwind_protect_cleanup
+    do_fortran_indexing = pref;
+  end_unwind_protect
 
 endfunction
diff --git a/scripts/image/ind2rgb.m b/scripts/image/ind2rgb.m
--- a/scripts/image/ind2rgb.m
+++ b/scripts/image/ind2rgb.m
@@ -10,21 +10,26 @@ function [R G B] = ind2rgb(X,map)
 
   if(nargin == 1)
     map = colormap;
   endif
 
   [hi wi] = size(X);
 
   pref = do_fortran_indexing;
-  do_fortran_indexing = "true";
 
-  R = map(X(:),1);
-  G = map(X(:),2);
-  B = map(X(:),3);
+  unwind_protect
+
+    do_fortran_indexing = "true";
 
-  R = reshape(R,hi,wi);
-  G = reshape(G,hi,wi);
-  B = reshape(B,hi,wi);
+    R = map(X(:),1);
+    G = map(X(:),2);
+    B = map(X(:),3);
 
-  do_fortran_indexing = pref;
+    R = reshape(R,hi,wi);
+    G = reshape(G,hi,wi);
+    B = reshape(B,hi,wi);
+
+  unwind_protect_cleanup
+    do_fortran_indexing = pref;
+  end_unwind_protect
 
 endfunction
diff --git a/scripts/image/rgb2ind.m b/scripts/image/rgb2ind.m
--- a/scripts/image/rgb2ind.m
+++ b/scripts/image/rgb2ind.m
@@ -14,19 +14,24 @@ function [X map] = rgb2ind(R,G,B)
 
   [hi wi] = size(R);
 
   X = zeros(hi,wi);
 
   map = zeros(hi*wi,3);
 
   pref = do_fortran_indexing;
-  do_fortran_indexing = "true";
+
+  unwind_protect
+
+    do_fortran_indexing = "true";
 
-  map(:,1) = R(:);
-  map(:,2) = G(:);
-  map(:,3) = B(:);
+    map(:,1) = R(:);
+    map(:,2) = G(:);
+    map(:,3) = B(:);
 
-  X(:) = 1:(hi*wi);
+    X(:) = 1:(hi*wi);
 
-  do_fortran_indexing = pref;
+  unwind_protect_cleanup
+    do_fortran_indexing = pref;
+  end_unwind_protect
 
 endfunction
diff --git a/scripts/miscellaneous/menu.m b/scripts/miscellaneous/menu.m
--- a/scripts/miscellaneous/menu.m
+++ b/scripts/miscellaneous/menu.m
@@ -29,41 +29,48 @@ function num = menu (t, ...)
 # Force pending output to appear before the menu.
 
   fflush (stdout);
 
 # Don't send the menu through the pager since doing that can cause
 # major confusion.
 
   save_page_screen_output = page_screen_output;
-  page_screen_output = "false";
+
+  unwind_protect
+
+    page_screen_output = "false";
 
-  if (! isempty (t))
-    disp (t);
-    printf ("\n");
-  endif
+    if (! isempty (t))
+      disp (t);
+      printf ("\n");
+    endif
 
-  nopt = nargin - 1;
+    nopt = nargin - 1;
 
-  while (1)
-    va_start ();
-    for i = 1:nopt
-      printf ("  [%2d] ", i);
-      disp (va_arg ());
-    endfor
-    printf ("\n");
-    s = "";
-    s = input ("pick a number, any number: ", "s");
-    if (strcmp (s, ""))
+    while (1)
+      va_start ();
+      for i = 1:nopt
+	printf ("  [%2d] ", i);
+	disp (va_arg ());
+      endfor
       printf ("\n");
-      continue;
-    endif
-    eval (sprintf ("num = %s;", s));
-    if (! is_scalar (num) || num < 1 || num > nopt)
-      printf ("\nerror: input invalid or out of range\n\n");
-    else
-      break;
-    endif
-  endwhile
+      s = "";
+      s = input ("pick a number, any number: ", "s");
+      if (strcmp (s, ""))
+	printf ("\n");
+	continue;
+      endif
+      eval (sprintf ("num = %s;", s));
+      if (! is_scalar (num) || num < 1 || num > nopt)
+	printf ("\nerror: input invalid or out of range\n\n");
+      else
+	break;
+      endif
+    endwhile
 
-  page_screen_output = save_page_screen_output;
+  unwind_protect_cleanup
+
+    page_screen_output = save_page_screen_output;
+
+  end_unwind_protect
 
 endfunction
diff --git a/scripts/strings/strcmp.m b/scripts/strings/strcmp.m
--- a/scripts/strings/strcmp.m
+++ b/scripts/strings/strcmp.m
@@ -34,16 +34,19 @@ function status = strcmp (s1, s2)
   if (isstr (s1) && isstr(s2))
     len_s1 = columns (s1);
     len_s2 = columns (s2);
     if (len_s1 == len_s2)
       if (len_s1 == 0)
         status = 1;
       else
         tmp = implicit_str_to_num_ok;
-        implicit_str_to_num_ok = "true";
-        status = all (s1 == s2);
-        implicit_str_to_num_ok = tmp;
+        unwind_protect
+          implicit_str_to_num_ok = "true";
+          status = all (s1 == s2);
+        unwind_protect_cleanup
+          implicit_str_to_num_ok = tmp;
+        end_unwind_protect
       endif
     endif
   endif
 
 endfunction
