# HG changeset patch
# User Michael Goffioul <michael.goffioul@gmail.com>
# Date 1242937727 -3600
#      Thu May 21 21:28:47 2009 +0100
# Node ID 3c1762c7e787508d44a15bdcfd418a1c6a9d8a21
# Parent  c02224afead667683be30e023f0212ceaa457b85
Add missing xxx_API decoration and remove misplaced ones

diff --git a/liboctave/Array-C.cc b/liboctave/Array-C.cc
--- a/liboctave/Array-C.cc
+++ b/liboctave/Array-C.cc
@@ -101,15 +101,16 @@ template class OCTAVE_API Array2<Complex
 
 template class OCTAVE_API ArrayN<Complex>;
 
 template OCTAVE_API std::ostream& operator << (std::ostream&, const ArrayN<Complex>&);
 
 #include "DiagArray2.h"
 #include "DiagArray2.cc"
 
+template class OCTAVE_API DiagArray2<Complex>::Proxy;
 template class OCTAVE_API DiagArray2<Complex>;
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
diff --git a/liboctave/Array-d.cc b/liboctave/Array-d.cc
--- a/liboctave/Array-d.cc
+++ b/liboctave/Array-d.cc
@@ -97,15 +97,16 @@ template class OCTAVE_API Array2<double>
 
 template class OCTAVE_API ArrayN<double>;
 
 template OCTAVE_API std::ostream& operator << (std::ostream&, const ArrayN<double>&);
 
 #include "DiagArray2.h"
 #include "DiagArray2.cc"
 
+template class OCTAVE_API DiagArray2<double>::Proxy;
 template class OCTAVE_API DiagArray2<double>;
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
diff --git a/liboctave/Array-f.cc b/liboctave/Array-f.cc
--- a/liboctave/Array-f.cc
+++ b/liboctave/Array-f.cc
@@ -97,15 +97,16 @@ template class OCTAVE_API Array2<float>;
 
 template class OCTAVE_API ArrayN<float>;
 
 template OCTAVE_API std::ostream& operator << (std::ostream&, const ArrayN<float>&);
 
 #include "DiagArray2.h"
 #include "DiagArray2.cc"
 
+template class OCTAVE_API DiagArray2<float>::Proxy;
 template class OCTAVE_API DiagArray2<float>;
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
diff --git a/liboctave/Array-fC.cc b/liboctave/Array-fC.cc
--- a/liboctave/Array-fC.cc
+++ b/liboctave/Array-fC.cc
@@ -102,15 +102,16 @@ template class OCTAVE_API Array2<FloatCo
 
 template class OCTAVE_API ArrayN<FloatComplex>;
 
 template OCTAVE_API std::ostream& operator << (std::ostream&, const ArrayN<FloatComplex>&);
 
 #include "DiagArray2.h"
 #include "DiagArray2.cc"
 
+template class OCTAVE_API DiagArray2<FloatComplex>::Proxy;
 template class OCTAVE_API DiagArray2<FloatComplex>;
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
diff --git a/liboctave/Array.cc b/liboctave/Array.cc
--- a/liboctave/Array.cc
+++ b/liboctave/Array.cc
@@ -2541,17 +2541,17 @@ Array<T>::find (octave_idx_type n, bool 
     retval.dimensions = dim_vector ();
   else if (rows () == 1 && ndims () == 2)
     retval.dimensions = dim_vector (1, retval.length ());
 
   return retval;
 }
 
 
-#define INSTANTIATE_ARRAY_SORT(T) template class octave_sort<T>;
+#define INSTANTIATE_ARRAY_SORT(T) template class OCTAVE_API octave_sort<T>;
 
 #define NO_INSTANTIATE_ARRAY_SORT(T) \
  \
 template <> Array<T>  \
 Array<T>::sort (octave_idx_type, sortmode) const { return *this; } \
  \
 template <> Array<T>  \
 Array<T>::sort (Array<octave_idx_type> &sidx, octave_idx_type, sortmode) const \
diff --git a/liboctave/CColVector.h b/liboctave/CColVector.h
--- a/liboctave/CColVector.h
+++ b/liboctave/CColVector.h
@@ -70,68 +70,68 @@ public:
   ComplexColumnVector& fill (const Complex& val, octave_idx_type r1, octave_idx_type r2);
 
   ComplexColumnVector stack (const ColumnVector& a) const;
   ComplexColumnVector stack (const ComplexColumnVector& a) const;
 
   ComplexRowVector hermitian (void) const;
   ComplexRowVector transpose (void) const;
 
-  friend ComplexColumnVector conj (const ComplexColumnVector& a);
+  friend OCTAVE_API ComplexColumnVector conj (const ComplexColumnVector& a);
 
   // resize is the destructive equivalent for this one
 
   ComplexColumnVector extract (octave_idx_type r1, octave_idx_type r2) const;
 
   ComplexColumnVector extract_n (octave_idx_type r1, octave_idx_type n) const;
 
   // column vector by column vector -> column vector operations
 
   ComplexColumnVector& operator += (const ColumnVector& a);
   ComplexColumnVector& operator -= (const ColumnVector& a);
 
   // matrix by column vector -> column vector operations
 
-  friend ComplexColumnVector operator * (const ComplexMatrix& a,
+  friend OCTAVE_API ComplexColumnVector operator * (const ComplexMatrix& a,
 					 const ColumnVector& b);
 
-  friend ComplexColumnVector operator * (const ComplexMatrix& a,
+  friend OCTAVE_API ComplexColumnVector operator * (const ComplexMatrix& a,
 					 const ComplexColumnVector& b);
 
   // matrix by column vector -> column vector operations
 
-  friend ComplexColumnVector operator * (const Matrix& a,
+  friend OCTAVE_API ComplexColumnVector operator * (const Matrix& a,
 					 const ComplexColumnVector& b);
 
   // diagonal matrix by column vector -> column vector operations
 
-  friend ComplexColumnVector operator * (const DiagMatrix& a,
+  friend OCTAVE_API ComplexColumnVector operator * (const DiagMatrix& a,
 					 const ComplexColumnVector& b);
 
-  friend ComplexColumnVector operator * (const ComplexDiagMatrix& a,
+  friend OCTAVE_API ComplexColumnVector operator * (const ComplexDiagMatrix& a,
 					 const ColumnVector& b);
 
-  friend ComplexColumnVector operator * (const ComplexDiagMatrix& a,
+  friend OCTAVE_API ComplexColumnVector operator * (const ComplexDiagMatrix& a,
 					 const ComplexColumnVector& b);
 
   // other operations
 
   typedef double (*dmapper) (const Complex&);
   typedef Complex (*cmapper) (const Complex&);
 
   ColumnVector map (dmapper fcn) const;
   ComplexColumnVector map (cmapper fcn) const;
 
   Complex min (void) const;
   Complex max (void) const;
 
   // i/o
 
-  friend std::ostream& operator << (std::ostream& os, const ComplexColumnVector& a);
-  friend std::istream& operator >> (std::istream& is, ComplexColumnVector& a);
+  friend OCTAVE_API std::ostream& operator << (std::ostream& os, const ComplexColumnVector& a);
+  friend OCTAVE_API std::istream& operator >> (std::istream& is, ComplexColumnVector& a);
 
 private:
 
   ComplexColumnVector (Complex *d, octave_idx_type l) : MArray<Complex> (d, l) { }
 };
 
 MARRAY_FORWARD_DEFS (MArray, ComplexColumnVector, Complex)
 
diff --git a/liboctave/CDiagMatrix.h b/liboctave/CDiagMatrix.h
--- a/liboctave/CDiagMatrix.h
+++ b/liboctave/CDiagMatrix.h
@@ -30,16 +30,17 @@ along with Octave; see the file COPYING.
 #include "CRowVector.h"
 #include "dColVector.h"
 #include "CColVector.h"
 #include "DET.h"
 
 #include "mx-defs.h"
 
 class
+OCTAVE_API
 ComplexDiagMatrix : public MDiagArray2<Complex>
 {
 public:
 
   ComplexDiagMatrix (void) : MDiagArray2<Complex> () { }
 
   ComplexDiagMatrix (octave_idx_type r, octave_idx_type c) : MDiagArray2<Complex> (r, c) { }
 
@@ -91,17 +92,17 @@ public:
   ComplexDiagMatrix& fill (const ComplexColumnVector& a, octave_idx_type beg);
   ComplexDiagMatrix& fill (const RowVector& a, octave_idx_type beg);
   ComplexDiagMatrix& fill (const ComplexRowVector& a, octave_idx_type beg);
 
   ComplexDiagMatrix hermitian (void) const { return MDiagArray2<Complex>::hermitian (std::conj); }
   ComplexDiagMatrix transpose (void) const { return MDiagArray2<Complex>::transpose(); }
   DiagMatrix abs (void) const; 
 
-  friend ComplexDiagMatrix conj (const ComplexDiagMatrix& a);
+  friend OCTAVE_API ComplexDiagMatrix conj (const ComplexDiagMatrix& a);
 
   // resize is the destructive analog for this one
 
   ComplexMatrix extract (octave_idx_type r1, octave_idx_type c1, octave_idx_type r2, octave_idx_type c2) const;
 
   // extract row or column i
 
   ComplexRowVector row (octave_idx_type i) const;
@@ -134,27 +135,27 @@ public:
   friend std::ostream& operator << (std::ostream& os, const ComplexDiagMatrix& a);
 
 private:
 
   ComplexDiagMatrix (Complex *d, octave_idx_type nr, octave_idx_type nc)
     : MDiagArray2<Complex> (d, nr, nc) { }
 };
 
-ComplexDiagMatrix conj (const ComplexDiagMatrix& a);
+OCTAVE_API ComplexDiagMatrix conj (const ComplexDiagMatrix& a);
 
 // diagonal matrix by diagonal matrix -> diagonal matrix operations
 
-ComplexDiagMatrix
+OCTAVE_API ComplexDiagMatrix
 operator * (const ComplexDiagMatrix& a, const ComplexDiagMatrix& b);
 
-ComplexDiagMatrix
+OCTAVE_API ComplexDiagMatrix
 operator * (const ComplexDiagMatrix& a, const DiagMatrix& b);
 
-ComplexDiagMatrix
+OCTAVE_API ComplexDiagMatrix
 operator * (const DiagMatrix& a, const ComplexDiagMatrix& b);
 
 MDIAGARRAY2_FORWARD_DEFS (MDiagArray2, ComplexDiagMatrix, Complex)
 
 #endif
 
 /*
 ;;; Local Variables: ***
diff --git a/liboctave/CMatrix.h b/liboctave/CMatrix.h
--- a/liboctave/CMatrix.h
+++ b/liboctave/CMatrix.h
@@ -127,17 +127,17 @@ public:
   ComplexMatrix stack (const ComplexColumnVector& a) const;
   ComplexMatrix stack (const ComplexDiagMatrix& a) const;
 
   ComplexMatrix hermitian (void) const
     { return MArray2<Complex>::hermitian (std::conj); }
   ComplexMatrix transpose (void) const
     { return MArray2<Complex>::transpose (); }
 
-  friend ComplexMatrix conj (const ComplexMatrix& a);
+  friend OCTAVE_API ComplexMatrix conj (const ComplexMatrix& a);
 
   // resize is the destructive equivalent for this one
 
   ComplexMatrix extract (octave_idx_type r1, octave_idx_type c1, octave_idx_type r2, octave_idx_type c2) const;
 
   ComplexMatrix extract_n (octave_idx_type r1, octave_idx_type c1, octave_idx_type nr, octave_idx_type nc) const;
 
   // extract row or column i.
diff --git a/liboctave/CNDArray.h b/liboctave/CNDArray.h
--- a/liboctave/CNDArray.h
+++ b/liboctave/CNDArray.h
@@ -97,17 +97,17 @@ public:
   ComplexNDArray& insert (const ComplexNDArray& a, octave_idx_type r, octave_idx_type c);
   ComplexNDArray& insert (const ComplexNDArray& a, const Array<octave_idx_type>& ra_idx);
   
   NDArray abs (void) const;
   boolNDArray isnan (void) const;
   boolNDArray isinf (void) const;
   boolNDArray isfinite (void) const;
 
-  friend ComplexNDArray conj (const ComplexNDArray& a);
+  friend OCTAVE_API ComplexNDArray conj (const ComplexNDArray& a);
 
   ComplexNDArray fourier (int dim = 1) const;
   ComplexNDArray ifourier (int dim = 1) const;
 
   ComplexNDArray fourier2d (void) const;
   ComplexNDArray ifourier2d (void) const;
 
   ComplexNDArray fourierNd (void) const;
diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,10 +1,34 @@
 2009-05-21  Michael Goffioul  <michael.goffioul@gmail.com>
 
+	* Array-C.cc (class DiagArray2<Complex>::Proxy): Tag with OCTAVE_API.
+	* Array-d.cc (class DiagArray2<double>::Proxy): Ditto.
+	* Array-f.cc (class DiagArray2<float>::Proxy): Ditto.
+	* Array-fC.cc (class DiagArray2<FloatComplex>::Proxy): Ditto.
+	* Array.cc (class octave_sort<T>): Ditto.
+	* CColVector.h (conj, operator*, operator>>, operator<<): Ditto.
+	* CDiagMatrix.h (class ComplexDiagMatrix, conj, operator*): Ditto.
+	* CMatrix.h (conj): Ditto.
+	* CNDArray.h (conj): Ditto.
+	* PermMatrix.h (class PermMatrix, operator*): Ditto.
+	* dDiagMatrix.h (class DiagMatrix): Ditto.
+	* fCColVector.h (conj, operator*, operator>>, operator<<): Ditto.
+	* fCDiagMatrix.h (class FloatComplexDiagMatrix, conj, operator*):
+	Ditto.
+	* fCMatrix.h (conj): Ditto.
+	* fCNDArray.h (conj): Ditto.
+	* fDiagMatrix.h (operator*): Ditto.
+	* oct-locbuf.h (octave_chunk_buffer::octave_chunk_buffer,
+	octave_chunk_buffer::~octave_chunk_buffer): Ditto.
+	* oct-inttypes.cc (octave_int_cmp_op::emulate_op): Ditto.
+	* DET.h (class base_det<T>): Remove OCTAVE_API (cannot be applied on
+	templates).
+	* oct-inttypes.cc (octave_int_cmp_op::emulate_op<class xop>): Ditto.
+
 	* CmplxQR.cc (ComplexQR::insert_col, ComplexQR::delete_col): Copy
 	volatile variable to avoid MSVC compilation error (cannot pass
 	volatile variable as const& argument).
 	* dbleQR.cc (QR::insert_col, QR::delete_col): Ditto.
 	* fCmplxQR.cc (FloatComplexQR::insert_col,
 	FloatComplexQR::delete_col): Ditto.
 	* floatQR.cc (FloatQR::insert_col, FloatQR::delete_col): Ditto.
 
diff --git a/liboctave/DET.h b/liboctave/DET.h
--- a/liboctave/DET.h
+++ b/liboctave/DET.h
@@ -24,17 +24,16 @@ along with Octave; see the file COPYING.
 #define octave_DET_h 1
 
 #include <cmath>
 #include "oct-cmplx.h"
 #include "lo-mappers.h"
 
 template <class T>
 class
-OCTAVE_API
 base_det
 {
 public:
 
   base_det (T c = 1, int e = 0) 
     { 
       c2 = xlog2 (c, e2); 
       e2 += e; 
diff --git a/liboctave/PermMatrix.h b/liboctave/PermMatrix.h
--- a/liboctave/PermMatrix.h
+++ b/liboctave/PermMatrix.h
@@ -24,17 +24,17 @@ along with Octave; see the file COPYING.
 #define octave_PermMatrix_h 1
 
 #include "Array.h"
 #include "mx-defs.h"
 
 // Array<T> is inherited privately so that some methods, like index, don't
 // produce unexpected results.
 
-class PermMatrix : protected Array<octave_idx_type>
+class OCTAVE_API PermMatrix : protected Array<octave_idx_type>
 {
 
 public:
 
   PermMatrix (void) : Array<octave_idx_type> (), _colp (false) { }
 
   PermMatrix (octave_idx_type n);
 
@@ -98,17 +98,17 @@ public:
   octave_idx_type determinant (void) const;
 
   // Efficient integer power of a permutation.
   PermMatrix power (octave_idx_type n) const;
 
   bool is_col_perm (void) const { return _colp; }
   bool is_row_perm (void) const { return !_colp; }
 
-  friend PermMatrix operator *(const PermMatrix& a, const PermMatrix& b);
+  friend OCTAVE_API PermMatrix operator *(const PermMatrix& a, const PermMatrix& b);
 
   const octave_idx_type *data (void) const 
     { return Array<octave_idx_type>::data (); }
 
   const octave_idx_type *fortran_vec (void) const 
     { return Array<octave_idx_type>::fortran_vec (); }
 
   octave_idx_type *fortran_vec (void) 
@@ -118,11 +118,12 @@ public:
     { Array<octave_idx_type>::print_info (os, prefix); }
 
 private:
   bool _colp;
 };
 
 // Multiplying permutations together.
 PermMatrix 
+OCTAVE_API
 operator *(const PermMatrix& a, const PermMatrix& b);
 
 #endif
diff --git a/liboctave/dDiagMatrix.h b/liboctave/dDiagMatrix.h
--- a/liboctave/dDiagMatrix.h
+++ b/liboctave/dDiagMatrix.h
@@ -113,17 +113,17 @@ private:
   DiagMatrix (double *d, octave_idx_type nr, octave_idx_type nc) : MDiagArray2<double> (d, nr, nc) { }
 };
 
 OCTAVE_API DiagMatrix real (const ComplexDiagMatrix& a);
 OCTAVE_API DiagMatrix imag (const ComplexDiagMatrix& a);
 
 // diagonal matrix by diagonal matrix -> diagonal matrix operations
 
-DiagMatrix
+OCTAVE_API DiagMatrix
 operator * (const DiagMatrix& a, const DiagMatrix& b);
 
 MDIAGARRAY2_FORWARD_DEFS (MDiagArray2, DiagMatrix, double)
 
 #endif
 
 /*
 ;;; Local Variables: ***
diff --git a/liboctave/fCColVector.h b/liboctave/fCColVector.h
--- a/liboctave/fCColVector.h
+++ b/liboctave/fCColVector.h
@@ -70,68 +70,68 @@ public:
   FloatComplexColumnVector& fill (const FloatComplex& val, octave_idx_type r1, octave_idx_type r2);
 
   FloatComplexColumnVector stack (const FloatColumnVector& a) const;
   FloatComplexColumnVector stack (const FloatComplexColumnVector& a) const;
 
   FloatComplexRowVector hermitian (void) const;
   FloatComplexRowVector transpose (void) const;
 
-  friend FloatComplexColumnVector conj (const FloatComplexColumnVector& a);
+  friend OCTAVE_API FloatComplexColumnVector conj (const FloatComplexColumnVector& a);
 
   // resize is the destructive equivalent for this one
 
   FloatComplexColumnVector extract (octave_idx_type r1, octave_idx_type r2) const;
 
   FloatComplexColumnVector extract_n (octave_idx_type r1, octave_idx_type n) const;
 
   // column vector by column vector -> column vector operations
 
   FloatComplexColumnVector& operator += (const FloatColumnVector& a);
   FloatComplexColumnVector& operator -= (const FloatColumnVector& a);
 
   // matrix by column vector -> column vector operations
 
-  friend FloatComplexColumnVector operator * (const FloatComplexMatrix& a,
+  friend OCTAVE_API FloatComplexColumnVector operator * (const FloatComplexMatrix& a,
 					 const FloatColumnVector& b);
 
-  friend FloatComplexColumnVector operator * (const FloatComplexMatrix& a,
+  friend OCTAVE_API FloatComplexColumnVector operator * (const FloatComplexMatrix& a,
 					 const FloatComplexColumnVector& b);
 
   // matrix by column vector -> column vector operations
 
-  friend FloatComplexColumnVector operator * (const FloatMatrix& a,
+  friend OCTAVE_API FloatComplexColumnVector operator * (const FloatMatrix& a,
 					 const FloatComplexColumnVector& b);
 
   // diagonal matrix by column vector -> column vector operations
 
-  friend FloatComplexColumnVector operator * (const FloatDiagMatrix& a,
+  friend OCTAVE_API FloatComplexColumnVector operator * (const FloatDiagMatrix& a,
 					 const FloatComplexColumnVector& b);
 
-  friend FloatComplexColumnVector operator * (const FloatComplexDiagMatrix& a,
+  friend OCTAVE_API FloatComplexColumnVector operator * (const FloatComplexDiagMatrix& a,
 					 const ColumnVector& b);
 
-  friend FloatComplexColumnVector operator * (const FloatComplexDiagMatrix& a,
+  friend OCTAVE_API FloatComplexColumnVector operator * (const FloatComplexDiagMatrix& a,
 					 const FloatComplexColumnVector& b);
 
   // other operations
 
   typedef float (*dmapper) (const FloatComplex&);
   typedef FloatComplex (*cmapper) (const FloatComplex&);
 
   FloatColumnVector map (dmapper fcn) const;
   FloatComplexColumnVector map (cmapper fcn) const;
 
   FloatComplex min (void) const;
   FloatComplex max (void) const;
 
   // i/o
 
-  friend std::ostream& operator << (std::ostream& os, const FloatComplexColumnVector& a);
-  friend std::istream& operator >> (std::istream& is, FloatComplexColumnVector& a);
+  friend OCTAVE_API std::ostream& operator << (std::ostream& os, const FloatComplexColumnVector& a);
+  friend OCTAVE_API std::istream& operator >> (std::istream& is, FloatComplexColumnVector& a);
 
 private:
 
   FloatComplexColumnVector (FloatComplex *d, octave_idx_type l) : MArray<FloatComplex> (d, l) { }
 };
 
 MARRAY_FORWARD_DEFS (MArray, FloatComplexColumnVector, FloatComplex)
 
diff --git a/liboctave/fCDiagMatrix.h b/liboctave/fCDiagMatrix.h
--- a/liboctave/fCDiagMatrix.h
+++ b/liboctave/fCDiagMatrix.h
@@ -30,16 +30,17 @@ along with Octave; see the file COPYING.
 #include "fCRowVector.h"
 #include "fColVector.h"
 #include "fCColVector.h"
 #include "DET.h"
 
 #include "mx-defs.h"
 
 class
+OCTAVE_API
 FloatComplexDiagMatrix : public MDiagArray2<FloatComplex>
 {
 public:
 
   FloatComplexDiagMatrix (void) : MDiagArray2<FloatComplex> () { }
 
   FloatComplexDiagMatrix (octave_idx_type r, octave_idx_type c) : MDiagArray2<FloatComplex> (r, c) { }
 
@@ -91,17 +92,17 @@ public:
   FloatComplexDiagMatrix& fill (const FloatComplexColumnVector& a, octave_idx_type beg);
   FloatComplexDiagMatrix& fill (const FloatRowVector& a, octave_idx_type beg);
   FloatComplexDiagMatrix& fill (const FloatComplexRowVector& a, octave_idx_type beg);
 
   FloatComplexDiagMatrix hermitian (void) const { return MDiagArray2<FloatComplex>::hermitian (std::conj); }
   FloatComplexDiagMatrix transpose (void) const { return MDiagArray2<FloatComplex>::transpose(); }
   FloatDiagMatrix abs (void) const; 
 
-  friend FloatComplexDiagMatrix conj (const FloatComplexDiagMatrix& a);
+  friend OCTAVE_API FloatComplexDiagMatrix conj (const FloatComplexDiagMatrix& a);
 
   // resize is the destructive analog for this one
 
   FloatComplexMatrix extract (octave_idx_type r1, octave_idx_type c1, octave_idx_type r2, octave_idx_type c2) const;
 
   // extract row or column i
 
   FloatComplexRowVector row (octave_idx_type i) const;
@@ -134,27 +135,27 @@ public:
   friend std::ostream& operator << (std::ostream& os, const FloatComplexDiagMatrix& a);
 
 private:
 
   FloatComplexDiagMatrix (FloatComplex *d, octave_idx_type nr, octave_idx_type nc)
     : MDiagArray2<FloatComplex> (d, nr, nc) { }
 };
 
-FloatComplexDiagMatrix conj (const FloatComplexDiagMatrix& a);
+OCTAVE_API FloatComplexDiagMatrix conj (const FloatComplexDiagMatrix& a);
 
 // diagonal matrix by diagonal matrix -> diagonal matrix operations
 
-FloatComplexDiagMatrix
+OCTAVE_API FloatComplexDiagMatrix
 operator * (const FloatComplexDiagMatrix& a, const FloatComplexDiagMatrix& b);
 
-FloatComplexDiagMatrix
+OCTAVE_API FloatComplexDiagMatrix
 operator * (const FloatComplexDiagMatrix& a, const FloatDiagMatrix& b);
 
-FloatComplexDiagMatrix
+OCTAVE_API FloatComplexDiagMatrix
 operator * (const FloatDiagMatrix& a, const FloatComplexDiagMatrix& b);
 
 MDIAGARRAY2_FORWARD_DEFS (MDiagArray2, FloatComplexDiagMatrix, FloatComplex)
 
 #endif
 
 /*
 ;;; Local Variables: ***
diff --git a/liboctave/fCMatrix.h b/liboctave/fCMatrix.h
--- a/liboctave/fCMatrix.h
+++ b/liboctave/fCMatrix.h
@@ -127,17 +127,17 @@ public:
   FloatComplexMatrix stack (const FloatComplexColumnVector& a) const;
   FloatComplexMatrix stack (const FloatComplexDiagMatrix& a) const;
 
   FloatComplexMatrix hermitian (void) const
     { return MArray2<FloatComplex>::hermitian (std::conj); }
   FloatComplexMatrix transpose (void) const
     { return MArray2<FloatComplex>::transpose (); }
 
-  friend FloatComplexMatrix conj (const FloatComplexMatrix& a);
+  friend OCTAVE_API FloatComplexMatrix conj (const FloatComplexMatrix& a);
 
   // resize is the destructive equivalent for this one
 
   FloatComplexMatrix extract (octave_idx_type r1, octave_idx_type c1, octave_idx_type r2, octave_idx_type c2) const;
 
   FloatComplexMatrix extract_n (octave_idx_type r1, octave_idx_type c1, octave_idx_type nr, octave_idx_type nc) const;
 
   // extract row or column i.
diff --git a/liboctave/fCNDArray.h b/liboctave/fCNDArray.h
--- a/liboctave/fCNDArray.h
+++ b/liboctave/fCNDArray.h
@@ -97,17 +97,17 @@ public:
   FloatComplexNDArray& insert (const FloatComplexNDArray& a, octave_idx_type r, octave_idx_type c);
   FloatComplexNDArray& insert (const FloatComplexNDArray& a, const Array<octave_idx_type>& ra_idx);
   
   FloatNDArray abs (void) const;
   boolNDArray isnan (void) const;
   boolNDArray isinf (void) const;
   boolNDArray isfinite (void) const;
 
-  friend FloatComplexNDArray conj (const FloatComplexNDArray& a);
+  friend OCTAVE_API FloatComplexNDArray conj (const FloatComplexNDArray& a);
 
   FloatComplexNDArray fourier (int dim = 1) const;
   FloatComplexNDArray ifourier (int dim = 1) const;
 
   FloatComplexNDArray fourier2d (void) const;
   FloatComplexNDArray ifourier2d (void) const;
 
   FloatComplexNDArray fourierNd (void) const;
diff --git a/liboctave/fDiagMatrix.h b/liboctave/fDiagMatrix.h
--- a/liboctave/fDiagMatrix.h
+++ b/liboctave/fDiagMatrix.h
@@ -113,17 +113,17 @@ private:
   FloatDiagMatrix (float *d, octave_idx_type nr, octave_idx_type nc) : MDiagArray2<float> (d, nr, nc) { }
 };
 
 OCTAVE_API FloatDiagMatrix real (const FloatComplexDiagMatrix& a);
 OCTAVE_API FloatDiagMatrix imag (const FloatComplexDiagMatrix& a);
 
 // diagonal matrix by diagonal matrix -> diagonal matrix operations
 
-FloatDiagMatrix
+OCTAVE_API FloatDiagMatrix
 operator * (const FloatDiagMatrix& a, const FloatDiagMatrix& b);
 
 MDIAGARRAY2_FORWARD_DEFS (MDiagArray2, FloatDiagMatrix, float)
 
 #endif
 
 /*
 ;;; Local Variables: ***
diff --git a/liboctave/oct-inttypes.cc b/liboctave/oct-inttypes.cc
--- a/liboctave/oct-inttypes.cc
+++ b/liboctave/oct-inttypes.cc
@@ -50,17 +50,17 @@ DECLARE_OCTAVE_INT_TYPENAME (uint16_t, "
 DECLARE_OCTAVE_INT_TYPENAME (uint32_t, "uint32")
 DECLARE_OCTAVE_INT_TYPENAME (uint64_t, "uint64")
 
 #ifndef OCTAVE_INT_USE_LONG_DOUBLE
 
 // Define comparison operators
 
 template <class xop> 
-OCTAVE_API bool 
+bool 
 octave_int_cmp_op::emulate_mop (uint64_t x, double y)
 {
   static const double xxup = std::numeric_limits<uint64_t>::max ();
   // This converts to the nearest double. Unless there's an equality, the
   // result is clear.
   double xx = x;
   if (xx != y)
     return xop::op (xx, y);
@@ -70,17 +70,17 @@ octave_int_cmp_op::emulate_mop (uint64_t
       if (xx == xxup)
         return xop::gtval;
       else
         return xop::op (x, static_cast<uint64_t> (xx));
     }
 }
 
 template <class xop> 
-OCTAVE_API bool 
+bool 
 octave_int_cmp_op::emulate_mop (int64_t x, double y)
 {
   static const double xxup = std::numeric_limits<int64_t>::max ();
   static const double xxlo = std::numeric_limits<int64_t>::min ();
   // This converts to the nearest double. Unless there's an equality, the
   // result is clear.
   double xx = x;
   if (xx != y)
@@ -117,25 +117,25 @@ public:
   }
 
 DEFINE_REVERTED_OPERATOR(lt,gt);
 DEFINE_REVERTED_OPERATOR(gt,lt);
 DEFINE_REVERTED_OPERATOR(le,ge);
 DEFINE_REVERTED_OPERATOR(ge,le);
 
 template <class xop> 
-OCTAVE_API bool 
+bool 
 octave_int_cmp_op::emulate_mop (double x, uint64_t y)
 {
   typedef typename rev_op<xop>::op rop;
   return mop<rop> (y, x);
 }
 
 template <class xop> 
-OCTAVE_API bool 
+bool 
 octave_int_cmp_op::emulate_mop (double x, int64_t y)
 {
   typedef typename rev_op<xop>::op rop;
   return mop<rop> (y, x);
 }
 
 
 // Define handlers for int64 multiplication
@@ -494,17 +494,17 @@ INT_DOUBLE_BINOP_DECL (/, int64)
     {
       return x / octave_int64 (y);
     }
   else
     return x * (1.0/y);
 }
 
 #define INSTANTIATE_INT64_DOUBLE_CMP_OP0(OP,T1,T2) \
-  template bool \
+  template OCTAVE_API bool \
   octave_int_cmp_op::emulate_mop<octave_int_cmp_op::OP> (T1 x, T2 y)
 
 #define INSTANTIATE_INT64_DOUBLE_CMP_OP(OP) \
   INSTANTIATE_INT64_DOUBLE_CMP_OP0(OP, double, int64_t); \
   INSTANTIATE_INT64_DOUBLE_CMP_OP0(OP, double, uint64_t); \
   INSTANTIATE_INT64_DOUBLE_CMP_OP0(OP, int64_t, double); \
   INSTANTIATE_INT64_DOUBLE_CMP_OP0(OP, uint64_t, double)
 
diff --git a/liboctave/oct-locbuf.h b/liboctave/oct-locbuf.h
--- a/liboctave/oct-locbuf.h
+++ b/liboctave/oct-locbuf.h
@@ -64,19 +64,19 @@ class octave_chunk_buffer
   static char *top, *chunk;
   static size_t left;
 
   char *cnk;
   char *dat;
 
 public:
 
-  octave_chunk_buffer (size_t size);
+  OCTAVE_API octave_chunk_buffer (size_t size);
 
-  ~octave_chunk_buffer (void);
+  OCTAVE_API ~octave_chunk_buffer (void);
 
   char *data (void) const { return dat; }
 };
 
 // This specializes octave_local_buffer to use the chunked buffer mechanism
 // for POD types.
 #define SPECIALIZE_POD_BUFFER(TYPE) \
 template <> \
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,10 +1,15 @@
 2009-05-21  Michael Goffioul  <michael.goffioul@gmail.com>
 
+	* debug.h (class bp_table): Tag with OCTINTERP_API.
+	* input.h (Vdebugging): Ditto.
+	* pt-eval.h (class tree_evaluator): Ditto.
+	* toplev.h (class octave_call_stack): Ditto.
+
 	* file-io.cc (mkstemp): Add mktemp-based implementation of mkstemp on
 	platforms that do not have it (mkstemp is required by the new help
 	system).
 
 	* TEMPLATE-INST/Array-os.cc: Add "extern template" declaration for
 	Array<octave_idx_type> to avoid implicit instantiation (and duplicate
 	symbols at link-time) [Win32]
 
diff --git a/src/debug.h b/src/debug.h
--- a/src/debug.h
+++ b/src/debug.h
@@ -28,17 +28,19 @@ along with Octave; see the file COPYING.
 #include "ov.h"
 #include "dRowVector.h"
 
 class octave_value_list;
 class octave_user_code;
 
 // Interface to breakpoints,.
 
-class bp_table
+class
+OCTINTERP_API
+bp_table
 {
 private:
 
   bp_table (void) { }
 
   ~bp_table (void) { }
 
 public:
diff --git a/src/input.h b/src/input.h
--- a/src/input.h
+++ b/src/input.h
@@ -84,17 +84,17 @@ extern std::string current_input_line;
 // TRUE after a call to completion_matches.
 extern bool octave_completion_matches_called;
 
 // TRUE if the plotting system has requested a call to drawnow at
 // the next user prompt.
 extern OCTINTERP_API bool Vdrawnow_requested;
 
 // TRUE if we are in debugging mode.
-extern bool Vdebugging;
+extern OCTINTERP_API bool Vdebugging;
 
 extern std::string gnu_readline (const std::string& s, bool force_readline = false);
 
 extern void initialize_command_input (void);
 
 extern bool octave_yes_or_no (const std::string& prompt);
 
 extern octave_value do_keyboard (const octave_value_list& args = octave_value_list ());
diff --git a/src/pt-eval.h b/src/pt-eval.h
--- a/src/pt-eval.h
+++ b/src/pt-eval.h
@@ -30,16 +30,17 @@ along with Octave; see the file COPYING.
 #include "oct-obj.h"
 #include "pt-walk.h"
 
 class tree_expression;
 
 // How to evaluate the code that the parse trees represent.
 
 class
+OCTINTERP_API
 tree_evaluator : public tree_walker
 {
 public:
 
   typedef void (*decl_elt_init_fcn) (tree_decl_elt&);
 
   tree_evaluator (void) { }
 
diff --git a/src/toplev.h b/src/toplev.h
--- a/src/toplev.h
+++ b/src/toplev.h
@@ -78,16 +78,17 @@ extern OCTINTERP_API tree_statement_list
 // TRUE means we are ready to interpret commands, but not everything
 // is ready for interactive use.
 extern OCTINTERP_API bool octave_interpreter_ready;
 
 // TRUE means we've processed all the init code and we are good to go.
 extern OCTINTERP_API bool octave_initialized;
 
 class
+OCTINTERP_API
 octave_call_stack
 {
 private:
 
   struct call_stack_elt
   {
     call_stack_elt (octave_function *f, symbol_table::scope_id s,
 		    symbol_table::context_id c, size_t p = 0)
