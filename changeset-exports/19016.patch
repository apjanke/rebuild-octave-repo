# HG changeset patch
# User Rik <rik@octave.org>
# Date 1408254266 25200
#      Sat Aug 16 22:44:26 2014 -0700
# Node ID b155fad47055e1a37c9066ece6bb5d554dbaa915
# Parent  ffa20d28735590cce138d34b4bcd1a3b95a018fc
Fix error messages and %!fail tests for schur().

* schur.cc (Fschur): Use '%s' instead of '%c' format code when issuing warning
about incorrect second argument.  Fix up %!error tests to match new output.

diff --git a/libinterp/corefcn/schur.cc b/libinterp/corefcn/schur.cc
--- a/libinterp/corefcn/schur.cc
+++ b/libinterp/corefcn/schur.cc
@@ -58,17 +58,17 @@ mark_upper_triangular (const Matrix& a)
 }
 
 DEFUN (schur, args, nargout,
        "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {@var{S} =} schur (@var{A})\n\
 @deftypefnx {Built-in Function} {@var{S} =} schur (@var{A}, \"real\")\n\
 @deftypefnx {Built-in Function} {@var{S} =} schur (@var{A}, \"complex\")\n\
 @deftypefnx {Built-in Function} {@var{S} =} schur (@var{A}, @var{opt})\n\
-@deftypefnx {Built-in Function} {[@var{U}, @var{S}] =} schur (@var{A}, @dots{})\n\
+@deftypefnx {Built-in Function} {[@var{U}, @var{S}] =} schur (@dots{})\n\
 @cindex Schur decomposition\n\
 Compute the Schur@tie{}decomposition of @var{A}\n\
 @tex\n\
 $$\n\
  S = U^T A U\n\
 $$\n\
 @end tex\n\
 @ifnottex\n\
@@ -165,17 +165,17 @@ Riccati equations in control (see @code{
     }
   else
     {
       char ord_char = ord.empty () ? 'U' : ord[0];
 
       if (ord_char != 'U' && ord_char != 'A' && ord_char != 'D'
           && ord_char != 'u' && ord_char != 'a' && ord_char != 'd')
         {
-          warning ("schur: incorrect ordered schur argument '%c'",
+          warning ("schur: incorrect ordered schur argument '%s'",
                    ord.c_str ());
           return retval;
         }
     }
 
   octave_idx_type nr = arg.rows ();
   octave_idx_type nc = arg.columns ();
 
@@ -282,20 +282,24 @@ Riccati equations in control (see @code{
 %! assert (u' * a * u, s, sqrt (eps));
 
 %!test
 %! a = single ([1, 2, 3; 4, 5, 9; 7, 8, 6]);
 %! [u, s] = schur (a);
 %! assert (u' * a * u, s, sqrt (eps ("single")));
 
 %!test
-%! fail ("schur ([1, 2; 3, 4], 2)", "warning");
+%! fail ('schur ([1, 2; 3, 4], "bad_opt")',
+%!       "warning", "incorrect ordered schur argument");
 
 %!error schur ()
+%!error schur (1,2,3)
+%!error [a,b,c] = schur (1)
 %!error <argument must be a square matrix> schur ([1, 2, 3; 4, 5, 6])
+%!error <wrong type argument 'cell'> schur ({1})
 */
 
 DEFUN (rsf2csf, args, nargout,
        "-*- texinfo -*-\n\
 @deftypefn {Function File} {[@var{U}, @var{T}] =} rsf2csf (@var{UR}, @var{TR})\n\
 Convert a real, upper quasi-triangular Schur@tie{}form @var{TR} to a complex,\n\
 upper triangular Schur@tie{}form @var{T}.\n\
 \n\
