# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1518023178 18000
#      Wed Feb 07 12:06:18 2018 -0500
# Node ID e25ace7690913bb43ce559ea40d0b1e01efbe5b3
# Parent  aaf7bcea71dd0de9ab0a0411e4a2fa0be52b00c4
don't store label in variable editor model

* variable-editor-model.h, variable-editor-model.h
(variable_editor_model::m_label): Delete data member and all uses.
(variable_editor_model::update_description): Rename from update_label.
Accept description as argument.
(variable_editor_model::make_description_text): Rename from
make_label_text.
(base_ve_model::make_description_text): Rename from make_label_text.
Change all derived classes.
(variable_editor_model::description_updated): New signal.

* variable-editor.cc (variable_editor::edit_variable): Don't pass
label to model constructor.  Connect model description_updated signal
to label setText slot.

diff --git a/libgui/src/variable-editor-model.cc b/libgui/src/variable-editor-model.cc
--- a/libgui/src/variable-editor-model.cc
+++ b/libgui/src/variable-editor-model.cc
@@ -267,17 +267,17 @@ base_ve_model::header_data (int section,
 
 QString
 base_ve_model::subscript_expression (const QModelIndex&) const
 {
   return "";
 }
 
 QString
-base_ve_model::make_label_text (void) const
+base_ve_model::make_description_text (void) const
 {
   QString lbl_txt = QString::fromStdString (m_name);
 
   if (m_value.is_defined ())
     {
       if (! lbl_txt.isEmpty ())
         lbl_txt += " ";
 
@@ -621,20 +621,20 @@ public:
 
     octave_value tval = m_value;
 
     tval.print_with_name (buf, m_name);
 
     return QString::fromStdString (buf.str ());
   }
 
-  QString make_label_text (void) const
+  QString make_description_text (void) const
   {
     return (QString ("unable to edit %1")
-            .arg (base_ve_model::make_label_text ()));
+            .arg (base_ve_model::make_description_text ()));
   }
 };
 
 // Vector struct.  Columns are fields, rows are values.
 
 class vector_struct_model : public base_ve_model
 {
 public:
@@ -868,22 +868,20 @@ variable_editor_model::create (const QSt
         }
     }
 
   return new display_only_model (expr, val);
 }
 
 variable_editor_model::variable_editor_model (const QString& expr,
                                               const octave_value& val,
-                                              QLabel *label,
                                               QObject *parent)
-  : QAbstractTableModel (parent), m_label (label),
-    rep (create (expr, val))
+  : QAbstractTableModel (parent), rep (create (expr, val))
 {
-  update_label ();
+  update_description ();
 
   if (is_editable ())
     {
       connect (this, SIGNAL (user_error_signal (const QString&, const QString&)),
                this, SLOT (user_error (const QString&, const QString&)));
 
       connect (this, SIGNAL (update_data_signal (const octave_value&)),
                this, SLOT (update_data (const octave_value&)));
@@ -1212,46 +1210,41 @@ variable_editor_model::update_data (cons
   emit maybe_resize_columns_signal ();
 }
 
 void
 variable_editor_model::data_error (const QString& msg)
 {
   invalidate ();
 
-  m_label->setTextFormat (Qt::PlainText);
-
-  m_label->setText (msg);
-
-  dynamic_cast<QWidget *> (parent ())->setVisible (false);
+  update_description (msg);
 }
 
 void
 variable_editor_model::reset (const octave_value& val)
 {
   base_ve_model *old_rep = rep;
 
   rep = create (QString::fromStdString (name ()), val);
 
   delete old_rep;
 
-  update_label ();
+  update_description ();
 
   emit set_editable_signal (is_editable ());
 }
 
 void
 variable_editor_model::invalidate (void)
 {
   beginResetModel ();
 
   reset (octave_value ());
 
   endResetModel ();
 }
 
 void
-variable_editor_model::update_label (void)
+variable_editor_model::update_description (const QString& description)
 {
-  m_label->setTextFormat (Qt::PlainText);
-
-  m_label->setText (make_label_text ());
+  emit description_changed (description.isEmpty ()
+                            ? make_description_text () : description);
 }
diff --git a/libgui/src/variable-editor-model.h b/libgui/src/variable-editor-model.h
--- a/libgui/src/variable-editor-model.h
+++ b/libgui/src/variable-editor-model.h
@@ -27,18 +27,16 @@ along with Octave; see the file COPYING.
 
 #include <QAbstractTableModel>
 #include <QMap>
 #include <QString>
 
 #include "ov.h"
 #include "pr-flt-fmt.h"
 
-class QLabel;
-
 class
 base_ve_model
 {
 public:
 
   base_ve_model (const QString &expr, const octave_value& val);
 
   virtual ~base_ve_model (void) = default;
@@ -95,17 +93,17 @@ public:
   octave_idx_type data_rows (void) const { return m_data_rows; }
 
   octave_idx_type data_columns (void) const { return m_data_cols; }
 
   int display_rows (void) const { return m_display_rows; }
 
   int display_columns (void) const { return m_display_cols; }
 
-  virtual QString make_label_text (void) const;
+  virtual QString make_description_text (void) const;
 
   void reset (const octave_value& val);
 
 protected:
 
   std::string m_name;
 
   octave_value m_value;
@@ -131,17 +129,17 @@ variable_editor_model : public QAbstract
 
 private:
 
   static base_ve_model * create (const QString &expr, const octave_value& val);
 
 public:
 
   variable_editor_model (const QString &expr, const octave_value& val,
-                         QLabel *label, QObject *parent = nullptr);
+                         QObject *parent = nullptr);
 
   ~variable_editor_model (void)
   {
     delete rep;
   }
 
   // No copying!
 
@@ -262,31 +260,30 @@ signals: // private
   void data_error_signal (const QString& name) const;
 
   void user_error_signal (const QString& title, const QString& msg) const;
 
   void maybe_resize_columns_signal (void);
 
   void set_editable_signal (bool);
 
+  void description_changed (const QString& description);
+
 private slots:
 
   void data_error (const QString& msg);
 
   void user_error (const QString& title, const QString& msg);
 
   void update_data_cache (void);
 
   void update_data (const octave_value& val);
 
 private:
 
-  // Owned by parent, stored here for convenience.
-  QLabel *m_label;
-
   base_ve_model *rep;
 
   void set_data_oct (const std::string& name, const std::string& expr,
                      const QModelIndex&);
 
   void init_from_oct (const std::string& str);
 
   void eval_oct (const std::string& name, const std::string& expr);
@@ -313,23 +310,23 @@ private:
     return rep->display_rows ();
   }
 
   int display_columns (void) const
   {
     return rep->display_columns ();
   }
 
-  QString make_label_text (void) const
+  QString make_description_text (void) const
   {
-    return rep->make_label_text ();
+    return rep->make_description_text ();
   }
 
   void reset (const octave_value& val);
 
   void invalidate (void);
 
-  void update_label (void);
+  void update_description (const QString& description = QString ());
 
   void evaluation_error (const std::string& expr) const;
 };
 
 #endif
diff --git a/libgui/src/variable-editor.cc b/libgui/src/variable-editor.cc
--- a/libgui/src/variable-editor.cc
+++ b/libgui/src/variable-editor.cc
@@ -326,37 +326,38 @@ variable_editor::edit_variable (const QS
 
   var_editor_tab *page = new var_editor_tab (widget_stack);
 
   QVBoxLayout *vbox = new QVBoxLayout (page);
   page->setLayout (vbox);
 
   QLabel *label = new QLabel (page);
   label->setTextFormat (Qt::PlainText);
-  label->setText (name);
   vbox->addWidget (label, 0, Qt::AlignTop);
 
-  variable_editor_model *model
-    = new variable_editor_model (name, val, label);
+  variable_editor_model *model = new variable_editor_model (name, val);
 
   QTableView *edit_view = make_edit_view (page, model);
 
   QTextEdit *disp_view = make_disp_view (page, model);
 
   page->set_model (model);
 
   page->set_edit_view (edit_view);
   page->set_disp_view (disp_view);
 
   vbox->addWidget (widget_stack);
 
   int tab_idx = m_tab_widget->addTab (page, name);
 
   m_tab_widget->setCurrentIndex (tab_idx);
 
+  connect (model, SIGNAL (description_changed (const QString&)),
+           label, SLOT (setText (const QString&)));
+
   connect (model, SIGNAL (dataChanged (const QModelIndex&, const QModelIndex&)),
            this, SLOT (callUpdate (const QModelIndex&, const QModelIndex&)));
 
   connect (this, SIGNAL (refresh_signal (void)),
            model, SLOT (update_data_cache (void)));
 
   connect (model, SIGNAL (set_editable_signal (bool)),
            page, SLOT (set_editable (bool)));
