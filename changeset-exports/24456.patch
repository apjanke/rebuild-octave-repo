# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1513985527 18000
#      Fri Dec 22 18:32:07 2017 -0500
# Node ID 2706adccf4e9b01a50bf01b3f7bd741d2469b096
# Parent  6558d0d3fdac9b8e00be3ca61097b90826b07f03
fix binding for global variables in script files (bug #52722)

* load-save.cc (install_loaded_variable): Make assignment in current
scope, not just in the global scope.

* symrec.h (symbol_record::symbol_record_rep::clear):
Handle global objects first.
(symbol_record::symbol_record_rep::bind_fwd_rep):
Recurse to bind forwarded references properly.

diff --git a/libinterp/corefcn/load-save.cc b/libinterp/corefcn/load-save.cc
--- a/libinterp/corefcn/load-save.cc
+++ b/libinterp/corefcn/load-save.cc
@@ -150,17 +150,17 @@ install_loaded_variable (const std::stri
 
   octave::symbol_scope scope
     = symtab.require_current_scope ("install_loaded_variable");
 
   if (global)
     {
       scope.clear_variable (name);
       scope.mark_global (name);
-      symtab.global_assign (name, val);
+      symtab.assign (name, val);
     }
   else
     scope.assign (name, val);
 }
 
 // Return TRUE if NAME matches one of the given globbing PATTERNS.
 
 static bool
diff --git a/libinterp/corefcn/symrec.cc b/libinterp/corefcn/symrec.cc
--- a/libinterp/corefcn/symrec.cc
+++ b/libinterp/corefcn/symrec.cc
@@ -39,16 +39,21 @@ along with Octave; see the file COPYING.
 #include "symscope.h"
 #include "symtab.h"
 
 namespace octave
 {
   symbol_record::context_id
   symbol_record::symbol_record_rep::get_fwd_scope_context (void) const
   {
+    // This should NOT recurse.  We only want to know the current
+    // context of the immediately forwarded rep object.  This is used
+    // only in symbol_record::symbol_record_rep::varref and
+    // symbol_record::symbol_record_rep::varval.
+
     return m_fwd_scope ? m_fwd_scope->current_context () : 0;
   }
 
   void
   symbol_record::symbol_record_rep::init_persistent (void)
   {
     if (auto t_fwd_rep = m_fwd_rep.lock ())
       {
diff --git a/libinterp/corefcn/symrec.h b/libinterp/corefcn/symrec.h
--- a/libinterp/corefcn/symrec.h
+++ b/libinterp/corefcn/symrec.h
@@ -206,24 +206,27 @@ namespace octave
         //
         // For globals, we are only interested in breaking the link to
         // the global value and clearing the local value, not the
         // global one.
 
         // For persistent values, we clear the value then unmark so
         // that we clear the first element of the value stack.
 
+        if (is_global ())
+          {
+            unbind_fwd_rep ();
+            return;
+          }
+
         if (auto t_fwd_rep = m_fwd_rep.lock ())
           return;
 
         if (! (is_hidden () || is_inherited ()))
           {
-            if (is_global ())
-              unbind_fwd_rep ();
-
             assign (octave_value (), context);
 
             if (is_persistent ())
               unmark_persistent ();
           }
       }
 
       bool is_defined (context_id context) const
@@ -471,22 +474,39 @@ namespace octave
 
       unsigned int storage_class (void) const { return m_storage_class; }
 
       void init_persistent (void);
 
       void bind_fwd_rep (symbol_scope_rep *fwd_scope,
                          const std::shared_ptr<symbol_record_rep>& fwd_rep)
       {
+        // If this object is already bound to another scope (for
+        // example, a variable in a script or nested function is bound
+        // to the enclosing scope), then bind that object to the next
+        // scope.  FIXME: can this happen for any other reason than we
+        // are making a variable in a script global?
+
+        if (auto t_fwd_rep = m_fwd_rep.lock ())
+          {
+            t_fwd_rep->bind_fwd_rep (fwd_scope, fwd_rep);
+            return;
+          }
+
         m_fwd_scope = fwd_scope;
         m_fwd_rep = fwd_rep;
       }
 
       void unbind_fwd_rep (void)
       {
+        // When unbinding an object, only break the immediate link.
+        // By doing that, we ensure that any variables that are made
+        // global in a script remain linked as globals in the
+        // enclosing scope.
+
         m_fwd_scope = nullptr;
         m_fwd_rep.reset ();
       }
 
       symbol_record_rep * dup (symbol_scope_rep *new_scope) const;
 
       octave_value dump (context_id context) const;
 
