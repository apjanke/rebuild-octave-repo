# HG changeset patch
# User Shai Ayal <shaiay@sourceforge.net>
# Date 1203792803 -7200
#      Sat Feb 23 20:53:23 2008 +0200
# Node ID 71eb1793f0db7fc16810bd40d2c3b6e563358558
# Parent  0a2ba0053fbd8e30498da9672565826ba047dffc
fltk_backend can now handle figure.position changes

diff --git a/src/graphics/ChangeLog b/src/graphics/ChangeLog
--- a/src/graphics/ChangeLog
+++ b/src/graphics/ChangeLog
@@ -1,8 +1,17 @@
+2008-02-23  Shai Ayal  <shaiay@users.sourceforge.net>
+
+	* fltk_backend/fltk_backend.cc (plot_window::mark_modifed): mark
+	the whole window as damaged (otherwise changing figure.postion
+	does not have immediate effect)
+	(plot_window::draw): New function, checks for window size 
+	(__fltk_maxtime__): New DEFUN to allow tweaking of fltk timeout
+	(__fltk_redraw__): Use fltk_maxtime as timeout
+
 2008-02-21  Michael Goffioul  <michael.goffioul@gmail.com>
 
 	* opengl/gl-render.cc (opengl_renderer::patch_tesselator::combine):
 	Protect against NULL vertex data.
 
 	* opengl/gl-render.cc (opengl_renderer::draw(patch)): Add marker
 	rendering of patch objects.
 
diff --git a/src/graphics/fltk_backend/Makefile.in b/src/graphics/fltk_backend/Makefile.in
--- a/src/graphics/fltk_backend/Makefile.in
+++ b/src/graphics/fltk_backend/Makefile.in
@@ -63,8 +63,9 @@ OCT_LINK_DEPS = \
   -L../../ $(LIBOCTINTERP) -L../opengl -loctgraphics_gl $(CHOLMOD_LIBS) $(UMFPACK_LIBS) $(AMD_LIBS) \
    $(CAMD_LIBS) $(COLAMD_LIBS) $(CCOLAMD_LIBS) $(CXSPARSE_LIBS) $(BLAS_LIBS) \
    $(FFTW_LIBS) $(LIBS) $(FLIBS) $(FLTK_EXTRA_LIBS) $(GRAPHICS_LIBS)
 
 
 fltk_backend.oct : fltk_backend.o
 	$(DL_LD) $(DL_LDFLAGS) -o $@ $< $(OCT_LINK_DEPS) 
 
+all : fltk_backend.oct
diff --git a/src/graphics/fltk_backend/fltk_backend.cc b/src/graphics/fltk_backend/fltk_backend.cc
--- a/src/graphics/fltk_backend/fltk_backend.cc
+++ b/src/graphics/fltk_backend/fltk_backend.cc
@@ -20,35 +20,34 @@ along with Octave; see the file COPYING.
 
 */
 
 #include <map>
 #include <set>
 #include <sstream>
 #include <iostream>
 
+#ifdef HAVE_CONFIG_H
+#include <config.h>
+#endif
+
+#include "gl-render.h"
+
 #include <FL/Fl.H>
 #include <FL/Fl_Window.H>
 #include <FL/Fl_Output.H>
-#include <FL/Fl_Button.H>
+ #include <FL/Fl_Button.H>
 #include <FL/Fl_Gl_Window.H>
 #include <FL/fl_ask.H>
 #include <FL/fl_draw.H>
 
 #include "oct.h"
 #include "parse.h"
 #include "graphics.h"
 
-#ifdef HAVE_CONFIG_H
-#include <config.h>
-#endif
-
-#include "gl-render.h"
-
-
 const char* help_text = "\
 Keyboard Shortcuts\n\
 a - autoscale\n\
 g - toggle grid\n\
 \n\
 Mouse\n\
 left drag - zoom\n\
 right click - unzoom\n\
@@ -186,17 +185,17 @@ public:
     status->hide();
     this->hide();
     delete canvas;
     delete status;
   };
 
   double number () { return _number;};
   
-  void mark_modified () { canvas->damage (FL_DAMAGE_ALL); }
+  void mark_modified () { damage (FL_DAMAGE_ALL); }
 
 private:
   // figure number
   double _number;
   figure::properties err_props;
 
   // status area height
   static const int status_h = 20;
@@ -294,16 +293,25 @@ private:
     pos(3) = _h;
 
     octave_value_list args;    
     args(0) = number ();
     args(1) = "position";
     args(2) = pos;
     feval("set",args);
   }
+
+  void draw (void)
+  {
+    figure::properties& fp = get_figure_props ();
+    Matrix pos = fp.get_position ().matrix_value ();
+    Fl_Window::resize (pos(0), pos(1) , pos(2), pos(3));
+
+    return Fl_Window::draw ();
+  }
  
   int handle (int event) {
     static double x0,y0;
     static graphics_handle h0 = graphics_handle ();
     static bool in_drag = false;
 
     int retval = Fl_Window::handle (event);
 
@@ -486,17 +494,17 @@ public:
   { 
     Matrix sz (1, 2, 0.0); 
     sz(0) = Fl::w ();
     sz(1) = Fl::h ();
     return sz;
   }
 };
 
-bool backend_registered = false;
+static bool backend_registered = false;
 // call this to init the fltk backend
 DEFUN_DLD (__init_fltk__, args, nargout,"")
 {
   graphics_backend::register_backend (new fltk_backend);
   backend_registered = true;
 
   octave_value retval;
   return retval;	
@@ -505,24 +513,44 @@ DEFUN_DLD (__init_fltk__, args, nargout,
 // call this to delete the fltk backend
 DEFUN_DLD (__remove_fltk__, args, nargout,"")
 {
   figure_manager::Instance ().close_all ();
   graphics_backend::unregister_backend (FLTK_BACKEND_NAME);
   backend_registered = false;
 
 
-  // give FLTK no more than 0.01 sec to do it's stuff
-  Fl::wait(1e-2);	
+  // give FLTK 10 seconds to wrap it up
+  Fl::wait(10);	
   octave_value retval;
   return retval;	
 }
 
+// give FLTK no more than 0.01 sec to do it's stuff
+static double fltk_maxtime = 1e-2;
+
+// call this to delete the fltk backend
+DEFUN_DLD (__fltk_maxtime__, args, nargout,"")
+{
+  octave_value retval=fltk_maxtime;  
+
+  if (args.length () == 1 ) 
+    {
+      if (args(0).is_real_scalar ())
+      fltk_maxtime = args(0).double_value ();
+    else
+      error("argument must be a real scalar");
+    }
+
+  return retval;
+}
+
 // call this from the idle_callback to refresh windows
-DEFUN_DLD (__fltk_redraw__, args, nargout,"internal function for the fltk backend")
+DEFUN_DLD (__fltk_redraw__, args, nargout,\
+	   "internal function for the fltk backend")
 {
   octave_value retval;
 
   if (!backend_registered)
     return retval;
 
   // we scan all figures and add those which use FLTK as a backend
   graphics_object obj = gh_manager::get_object (0);
@@ -555,24 +583,25 @@ DEFUN_DLD (__fltk_redraw__, args, nargou
 		  oargs(1) = "__plot_stream__";
 		  oargs(2) = fp.get___myhandle__ ().value ();
 		  feval ("set" , oargs);
 		}
 	    }
         }
     }
 
-  // give FLTK no more than 0.01 sec to do it's stuff
-  Fl::wait(1e-2);	
+  Fl::wait(fltk_maxtime);	
 
   return retval;	
 }
 
 /* to init
 autoload("__init_fltk__",[pwd(),"/fltk_backend.oct"])
 autoload("__remove_fltk__",[pwd(),"/fltk_backend.oct"])
 autoload("__fltk_redraw__",[pwd(),"/fltk_backend.oct"])
+autoload("__fltk_maxtime__",[pwd(),"/fltk_backend.oct"])
 input_event_hook ("__fltk_redraw__");
 __init_fltk__ ();
 set(gcf(),"__backend__","fltk")
+plot(randn(1e3,1));
 
 
 */
