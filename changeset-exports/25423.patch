# HG changeset patch
# User Markus MÃ¼tzel <markus.muetzel@gmx.de>
# Date 1528048271 -7200
#      Sun Jun 03 19:51:11 2018 +0200
# Node ID 13b1b9a0d9c5982f45df3dca019a4837a757a650
# Parent  156876229e8f6d637555775a29fd26e05cfdcc2d
Move management of lights in axes from GL to graphics backend.

* gl-render.h: Remove property "num_lights".

* gl-render.cc: Warn about surplus lights only once per draw.

* graphics.in.h, graphics.cc:
(axes::properties): Add overload for adopt. Add property "num_lights". Add
functions "increase_num_lights", "decrease_num_lights" and "get_num_lights".
(light::properties): Add function "update_visible".
(patch::properties, surface::properties): Add function "get_do_lighting".
(gh_manager::do_free): Call "remove_child" while object is still valid.
(adopt and remove_child of axes and hggroup): Keep track of lights in axes.

diff --git a/libinterp/corefcn/gl-render.cc b/libinterp/corefcn/gl-render.cc
--- a/libinterp/corefcn/gl-render.cc
+++ b/libinterp/corefcn/gl-render.cc
@@ -1937,27 +1937,22 @@ namespace octave
 
         base_properties p = go.get_properties ();
 
         if (p.is_visible ()
             || (selecting && p.pickableparts_is ("all")))
           {
             if (go.isa ("light") && ! selecting)
               {
-                if (num_lights < max_lights)
+                if (current_light-GL_LIGHT0 < max_lights)
                   {
-                    current_light = GL_LIGHT0 + num_lights;
                     set_clipping (p.is_clipping ());
                     draw (go);
-                    num_lights++;
+                    current_light++;
                   }
-                else
-                  warning_with_id ("Octave:max-lights-exceeded",
-                                   "light: Maximum number of lights (%d) in these axes is "
-                                   "exceeded.", max_lights);
               }
             else if (go.isa ("hggroup")
                      && ! (selecting && p.pickableparts_is ("none")))
               draw_all_lights (go.get_properties (), obj_list);
             else if (! (selecting && p.pickableparts_is ("none")))
               obj_list.push_back (go);
           }
       }
@@ -2012,22 +2007,26 @@ namespace octave
     // but this seems to lead to calls of OpenGL functions before the context
     // is actually initialized.  See bug #48669.
     // Check actual maximum number of lights possible
     max_lights = get_maxlights ();
 
     // Start with the last element of the array of child objects to
     // display them in the order they were added to the array.
 
-    num_lights = 0;
+    if (props.get_num_lights () > max_lights)
+      warning_with_id ("Octave:max-lights-exceeded",
+                       "light: Maximum number of lights (%d) in these axes is "
+                       "exceeded.", max_lights);
+
     current_light = GL_LIGHT0;
     draw_all_lights (props, obj_list);
 
     // disable other OpenGL lights
-    for (int i = num_lights; i < max_lights; i++)
+    for (unsigned int i = props.get_num_lights (); i < max_lights; i++)
       glDisable (GL_LIGHT0 + i);
 
     // save camera position and set ambient light color before drawing
     // other objects
     view_vector = props.get_cameraposition ().matrix_value ();
 
     float cb[4] = { 1.0, 1.0, 1.0, 1.0 };
     ColumnVector ambient_color = props.get_ambientlightcolor_rgb ();
@@ -2333,16 +2332,17 @@ namespace octave
                    (props.edgecolor_is ("flat") ? 1 :
                     (props.edgecolor_is ("interp") ? 2 : -1)));
     int el_mode = (props.edgelighting_is ("none") ? 0 :
                    (props.edgelighting_is ("flat") ? 1 : 2));
     int ea_mode = (props.edgealpha_is_double () ? 0 :
                    (props.edgealpha_is ("flat") ? 1 : 2));
     int bfl_mode = (props.backfacelighting_is ("lit") ? 0 :
                     (props.backfacelighting_is ("reverselit") ? 1 : 2));
+    bool do_lighting = props.get_do_lighting ();
 
     Matrix fcolor = (fc_mode == TEXTURE ? Matrix (1, 3, 1.0)
                                         : props.get_facecolor_rgb ());
     Matrix ecolor = props.get_edgecolor_rgb ();
     double fa = 1.0;
 
     float as = props.get_ambientstrength ();
     float ds = props.get_diffusestrength ();
@@ -2411,17 +2411,17 @@ namespace octave
                     glMaterialfv (LIGHT_MODE, GL_DIFFUSE, cb);
 
                     for (int i = 0; i < 3; i++)
                       cb[i] = ss * (scr + (1-scr) * fcolor(i));
                     glMaterialfv (LIGHT_MODE, GL_SPECULAR, cb);
                   }
               }
 
-            if ((fl_mode > 0) && (num_lights > 0))
+            if ((fl_mode > 0) && do_lighting)
               glEnable (GL_LIGHTING);
             glShadeModel ((fc_mode == INTERP || fl_mode == GOURAUD)
                           ? GL_SMOOTH : GL_FLAT);
             set_polygon_offset (true, 1.0);
             if (fc_mode == TEXTURE)
               glEnable (GL_TEXTURE_2D);
 
             for (int i = 1; i < zc; i++)
@@ -2587,17 +2587,17 @@ namespace octave
                     glEnd ();
                   }
               }
 
             set_polygon_offset (false);
             if (fc_mode == TEXTURE)
               glDisable (GL_TEXTURE_2D);
 
-            if ((fl_mode > 0) && (num_lights > 0))
+            if ((fl_mode > 0) && do_lighting)
               glDisable (GL_LIGHTING);
           }
         else
           {
             // FIXME: implement flat, interp and texturemap transparency
           }
       }
 
@@ -2619,17 +2619,17 @@ namespace octave
                     glMaterialfv (LIGHT_MODE, GL_DIFFUSE, cb);
 
                     for (int i = 0; i < 3; i++)
                       cb[i] = ss * (scr + (1-scr) * ecolor(i));
                     glMaterialfv (LIGHT_MODE, GL_SPECULAR, cb);
                   }
               }
 
-            if ((el_mode > 0) && (num_lights > 0))
+            if ((el_mode > 0) && do_lighting)
               glEnable (GL_LIGHTING);
             glShadeModel ((ec_mode == INTERP || el_mode == GOURAUD)
                           ? GL_SMOOTH : GL_FLAT);
 
             set_linestyle (props.get_linestyle (), false,
                            props.get_linewidth ());
             set_linewidth (props.get_linewidth ());
             set_linecap ("butt");
@@ -2827,17 +2827,17 @@ namespace octave
                         glEnd ();
                       }
                   }
               }
 
             set_linestyle ("-");  // Disable LineStipple
             set_linewidth (0.5f);
 
-            if ((el_mode > 0) && (num_lights > 0))
+            if ((el_mode > 0) && do_lighting)
               glDisable (GL_LIGHTING);
           }
         else
           {
             // FIXME: implement transparency
           }
       }
 
@@ -2967,16 +2967,17 @@ namespace octave
                     || props.edgecolor_is_rgb ()) ? 0 :
                    (props.edgecolor_is ("flat") ? 1 : 2));
     int el_mode = (props.edgelighting_is ("none") ? 0 :
                    (props.edgelighting_is ("flat") ? 1 : 2));
     int ea_mode = (props.edgealpha_is_double () ? 0 :
                    (props.edgealpha_is ("flat") ? 1 : 2));
     int bfl_mode = (props.backfacelighting_is ("lit") ? 0 :
                     (props.backfacelighting_is ("reverselit") ? 1 : 2));
+    bool do_lighting = props.get_do_lighting ();
 
     Matrix fcolor = props.get_facecolor_rgb ();
     Matrix ecolor = props.get_edgecolor_rgb ();
 
     float as = props.get_ambientstrength ();
     float ds = props.get_diffusestrength ();
     float ss = props.get_specularstrength ();
     float se = props.get_specularexponent () * 5; // to fit Matlab
@@ -3120,17 +3121,17 @@ namespace octave
                     glMaterialfv (LIGHT_MODE, GL_DIFFUSE, cb);
 
                     for (int i = 0; i < 3; i++)
                       cb[i] = ss * (scr + (1-scr) * fcolor(i));
                     glMaterialfv (LIGHT_MODE, GL_SPECULAR, cb);
                   }
               }
 
-            if ((fl_mode > 0) && (num_lights > 0) && has_normals)
+            if ((fl_mode > 0) && do_lighting && has_normals)
               glEnable (GL_LIGHTING);
 
             // NOTE: Push filled part of patch backwards to avoid Z-fighting
             // with tesselator outline.  A value of 1.0 seems to work fine.
             // Value can't be too large or the patch will be pushed below the
             // axes planes at +2.5.
             patch_tesselator tess (this, fc_mode, fl_mode, 1.0);
 
@@ -3223,17 +3224,17 @@ namespace octave
                     tess.end_contour ();
                     tess.end_polygon ();
                   } while (i_start > 0);
 
                 if (is_non_planar)
                   it1++;
               }
 
-            if ((fl_mode > 0) && (num_lights > 0) && has_normals)
+            if ((fl_mode > 0) && do_lighting && has_normals)
               glDisable (GL_LIGHTING);
           }
         else
           {
             // FIXME: implement flat and interp transparency
           }
       }
 
@@ -3259,17 +3260,17 @@ namespace octave
                     glMaterialfv (LIGHT_MODE, GL_DIFFUSE, cb);
 
                     for (int i = 0; i < 3; i++)
                       cb[i] = ss * (scr + (1-scr) * ecolor(i));
                     glMaterialfv (LIGHT_MODE, GL_SPECULAR, cb);
                   }
               }
 
-            if ((el_mode > 0) && (num_lights > 0) && has_normals)
+            if ((el_mode > 0) && do_lighting && has_normals)
               glEnable (GL_LIGHTING);
 
             double linewidth = props.get_linewidth ();
             set_linestyle (props.get_linestyle (), false, linewidth);
             set_linewidth (linewidth);
             set_linecap ("butt");
             set_linejoin ("miter");
 
@@ -3362,17 +3363,17 @@ namespace octave
                   }
                 if (is_non_planar)
                   it1++;
               }
 
             set_linestyle ("-");  // Disable LineStipple
             set_linewidth (0.5f);
 
-            if ((el_mode > 0) && (num_lights > 0) && has_normals)
+            if ((el_mode > 0) && do_lighting && has_normals)
               glDisable (GL_LIGHTING);
           }
         else
           {
             // FIXME: implement transparency
           }
       }
 
diff --git a/libinterp/corefcn/gl-render.h b/libinterp/corefcn/gl-render.h
--- a/libinterp/corefcn/gl-render.h
+++ b/libinterp/corefcn/gl-render.h
@@ -211,19 +211,18 @@ namespace octave
     ColumnVector camera_pos, camera_dir, view_vector;
 
     // interpreter to be used by text_to_pixels
     caseless_str interpreter;
 
     text_renderer txt_renderer;
 
     // light object present and visible
-    int num_lights;
     unsigned int current_light;
-    int max_lights;
+    unsigned int max_lights;
 
     // Indicate we are drawing for selection purpose
     bool selecting;
   private:
     class patch_tesselator;
   };
 }
 
diff --git a/libinterp/corefcn/graphics.cc b/libinterp/corefcn/graphics.cc
--- a/libinterp/corefcn/graphics.cc
+++ b/libinterp/corefcn/graphics.cc
@@ -1723,23 +1723,18 @@ children_property::do_get_children (bool
     }
 
   return retval;
 }
 
 void
 children_property::do_delete_children (bool clear)
 {
-  for (auto& hchild : children_list)
-    {
-      graphics_object go = gh_manager::get_object (hchild);
-
-      if (go.valid_object () && ! go.get_properties ().is_beingdeleted ())
-        gh_manager::free (hchild);
-    }
+  while (! children_list.empty ())
+    gh_manager::free (children_list.front ());
 
   if (clear)
     children_list.clear ();
 }
 
 bool
 callback_property::validate (const octave_value& v) const
 {
@@ -2650,27 +2645,39 @@ gh_manager::do_free (const graphics_hand
 
       auto p = handle_map.find (h);
 
       if (p == handle_map.end ())
         error ("graphics_handle::free: invalid object %g", h.value ());
 
       base_properties& bp = p->second.get_properties ();
 
+      if (!p->second.valid_object () || bp.is_beingdeleted ())
+        return;
+
+      graphics_handle parent_h = p->second.get_parent ();
+      graphics_object parent_go = gh_manager::get_object (parent_h);
+
       bp.set_beingdeleted (true);
 
       bp.delete_children ();
 
+      // NOTE: Call the delete function while the object's state is still valid.
       octave_value val = bp.get_deletefcn ();
 
       bp.execute_deletefcn ();
 
       // Notify graphics toolkit.
       p->second.finalize ();
 
+      // NOTE: Call remove_child before erasing the go from the map.
+      // A callback function might have already deleted the parent
+      if (parent_go.valid_object () && h.ok ())
+        parent_go.remove_child (h);
+
       // Note: this will be valid only for first explicitly deleted
       // object.  All its children will then have an
       // unknown graphics toolkit.
 
       // Graphics handles for non-figure objects are negative
       // integers plus some random fractional part.  To avoid
       // running out of integers, we recycle the integer part
       // but tack on a new random part each time.
@@ -2796,30 +2803,21 @@ delete_graphics_object (const graphics_h
 {
   if (h.ok ())
     {
       graphics_object go = gh_manager::get_object (h);
 
       // Don't do recursive deleting, due to callbacks
       if (! go.get_properties ().is_beingdeleted ())
         {
-          graphics_handle parent_h = go.get_parent ();
-
-          graphics_object parent_go = gh_manager::get_object (parent_h);
-
-          // NOTE: free the handle before removing it from its parent's
-          //       children, such that the object's state is correct when the
-          //       deletefcn callback is executed
+          // NOTE: Freeing the handle also calls any deletefcn.  It also calls
+          //       the parent's delete_child function.
 
           gh_manager::free (h);
 
-          // A callback function might have already deleted the parent
-          if (parent_go.valid_object ())
-            parent_go.remove_child (h);
-
           Vdrawnow_requested = true;
         }
     }
 }
 
 static void
 delete_graphics_object (double val)
 {
@@ -5038,18 +5036,16 @@ axes::properties::set_text_child (handle
       error ("set: expecting text graphics object or character string for %s property, found %s",
              who.c_str (), cname.c_str ());
     }
 
   xset (val, "handlevisibility", "off");
 
   gh_manager::free (hp.handle_value ());
 
-  base_properties::remove_child (hp.handle_value ());
-
   hp = val;
 
   adopt (hp.handle_value ());
 }
 
 void
 axes::properties::set_xlabel (const octave_value& v)
 {
@@ -5337,18 +5333,16 @@ axes::properties::delete_text_child (han
   graphics_handle h = hp.handle_value ();
 
   if (h.ok ())
     {
       graphics_object go = gh_manager::get_object (h);
 
       if (go.valid_object ())
         gh_manager::free (h);
-
-      base_properties::remove_child (h);
     }
 
   // FIXME: is it necessary to check whether the axes object is
   // being deleted now?  I think this function is only called when an
   // individual child object is delete and not when the parent axes
   // object is deleted.
 
   if (! is_beingdeleted ())
@@ -5360,16 +5354,21 @@ axes::properties::delete_text_child (han
 
       adopt (hp.handle_value ());
     }
 }
 
 void
 axes::properties::remove_child (const graphics_handle& h)
 {
+  graphics_object go = gh_manager::get_object (h);
+
+  if (go.isa ("light") && go.get_properties ().is_visible ())
+    decrease_num_lights ();
+
   if (xlabel.handle_value ().ok () && h == xlabel.handle_value ())
     {
       delete_text_child (xlabel);
       update_xlabel_position ();
     }
   else if (ylabel.handle_value ().ok () && h == ylabel.handle_value ())
     {
       delete_text_child (ylabel);
@@ -5380,18 +5379,31 @@ axes::properties::remove_child (const gr
       delete_text_child (zlabel);
       update_zlabel_position ();
     }
   else if (title.handle_value ().ok () && h == title.handle_value ())
     {
       delete_text_child (title);
       update_title_position ();
     }
-  else
-    base_properties::remove_child (h);
+
+  if (go.valid_object ())
+      base_properties::remove_child (h);
+
+}
+
+void
+axes::properties::adopt (const graphics_handle& h)
+{
+  graphics_object go (gh_manager::get_object (h));
+  if (go.isa ("light") && go.get_properties ().is_visible ())
+    increase_num_lights ();
+
+  base_properties::adopt (h);
+
 }
 
 inline Matrix
 xform_matrix (void)
 {
   Matrix m (4, 4, 0.0);
 
   for (int i = 0; i < 4; i++)
@@ -8870,16 +8882,40 @@ text::properties::get___fontsize_points_
 octave_value
 image::properties::get_color_data (void) const
 {
   return convert_cdata (*this, get_cdata (), cdatamapping_is ("scaled"), 3);
 }
 
 // ---------------------------------------------------------------------
 
+void
+light::properties::update_visible (void)
+{
+  graphics_object go = gh_manager::get_object (get___myhandle__ ());
+  axes::properties& ax_props = dynamic_cast<axes::properties&>
+    (go.get_ancestor ("axes").get_properties ());
+  if (is_visible ())
+    ax_props.increase_num_lights ();
+  else
+    ax_props.decrease_num_lights ();
+}
+
+// ---------------------------------------------------------------------
+
+bool
+patch::properties::get_do_lighting (void) const
+{
+  graphics_object go = gh_manager::get_object (get___myhandle__ ());
+  axes::properties& ax_props = dynamic_cast<axes::properties&>
+    (go.get_ancestor ("axes").get_properties ());
+
+  return (ax_props.get_num_lights () > 0);
+}
+
 octave_value
 patch::properties::get_color_data (void) const
 {
   octave_value fvc = get_facevertexcdata ();
   if (fvc.is_undefined () || fvc.isempty ())
     return Matrix ();
   else
     return convert_cdata (*this, fvc, cdatamapping_is ("scaled"), 2);
@@ -9133,16 +9169,26 @@ cross_product (double x1, double y1, dou
                double x2, double y2, double z2,
                double& x, double& y, double& z)
 {
   x += (y1 * z2 - z1 * y2);
   y += (z1 * x2 - x1 * z2);
   z += (x1 * y2 - y1 * x2);
 }
 
+bool
+surface::properties::get_do_lighting (void) const
+{
+  graphics_object go = gh_manager::get_object (get___myhandle__ ());
+  axes::properties& ax_prop = dynamic_cast<axes::properties&>
+    (go.get_ancestor ("axes").get_properties ());
+
+  return (ax_prop.get_num_lights () > 0);
+}
+
 void
 surface::properties::update_vertex_normals (void)
 {
   if (vertexnormalsmode_is ("auto"))
     {
       Matrix x = get_xdata ().matrix_value ();
       Matrix y = get_ydata ().matrix_value ();
       Matrix z = get_zdata ().matrix_value ();
@@ -9227,16 +9273,46 @@ surface::properties::update_vertex_norma
         }
       vertexnormals = n;
     }
 }
 
 // ---------------------------------------------------------------------
 
 void
+hggroup::properties::remove_child (const graphics_handle& h)
+{
+  graphics_object go = gh_manager::get_object (h);
+  if (go.isa ("light") && go.get_properties ().is_visible ())
+    {
+      axes::properties& ax_props =
+        dynamic_cast<axes::properties&>
+        (go.get_ancestor ("axes").get_properties ());
+      ax_props.decrease_num_lights ();
+    }
+  base_properties::remove_child (h);
+  update_limits ();
+}
+
+void
+hggroup::properties::adopt (const graphics_handle& h)
+{
+  graphics_object go = gh_manager::get_object (h);
+  if (go.isa ("light") && go.get_properties ().is_visible ())
+    {
+      axes::properties& ax_props =
+        dynamic_cast<axes::properties&>
+        (go.get_ancestor ("axes").get_properties ());
+      ax_props.increase_num_lights ();
+    }
+  base_properties::adopt (h);
+  update_limits (h);
+}
+
+void
 hggroup::properties::update_limits (void) const
 {
   graphics_object go = gh_manager::get_object (__myhandle__);
 
   if (go)
     {
       go.update_axis_limits ("xlim");
       go.update_axis_limits ("ylim");
diff --git a/libinterp/corefcn/graphics.in.h b/libinterp/corefcn/graphics.in.h
--- a/libinterp/corefcn/graphics.in.h
+++ b/libinterp/corefcn/graphics.in.h
@@ -3395,16 +3395,18 @@ class OCTINTERP_API axes : public base_g
 public:
   class OCTINTERP_API properties : public base_properties
   {
   public:
     void set_defaults (base_graphics_object& obj, const std::string& mode);
 
     void remove_child (const graphics_handle& h);
 
+    void adopt (const graphics_handle& h);
+
     const scaler& get_x_scaler (void) const { return sx; }
     const scaler& get_y_scaler (void) const { return sy; }
     const scaler& get_z_scaler (void) const { return sz; }
 
     Matrix get_boundingbox (bool internal = false,
                             const Matrix& parent_pix_size = Matrix ()) const;
     Matrix get_extent (bool with_text = false,
                        bool only_text_height=false) const;
@@ -3518,16 +3520,20 @@ public:
     void update_handlevisibility (void);
     void push_zoom_stack (void);
     void clear_zoom_stack (bool do_unzoom = true);
 
     void update_units (const caseless_str& old_units);
 
     void update_fontunits (const caseless_str& old_fontunits);
 
+    void increase_num_lights (void) { num_lights++; }
+    void decrease_num_lights (void) { num_lights--; }
+    unsigned int get_num_lights (void) const { return num_lights; }
+
   private:
 
     scaler sx = scaler ();
     scaler sy = scaler ();
     scaler sz = scaler ();
 
     Matrix x_render = Matrix ();
     Matrix x_render_inv = Matrix ();
@@ -3575,16 +3581,18 @@ public:
     bool layer2Dtop = false;
     bool is2D = false;
     bool has3Dkids = false;
     bool xySym = false;
     bool xyzSym = false;
     bool zSign = false;
     bool nearhoriz = false;
 
+    unsigned int num_lights = 0;
+
     // Text renderer, used for calculation of text (tick labels) size
     octave::text_renderer txt_renderer;
 
     void set_text_child (handle_property& h, const std::string& who,
                          const octave_value& v);
 
     void delete_text_child (handle_property& h);
 
@@ -4767,16 +4775,17 @@ public:
     // See the genprops.awk script for an explanation of the
     // properties declarations.
     // Programming note: Keep property list sorted if new ones are added.
 
     BEGIN_PROPERTIES (light)
       color_property color , color_values (1, 1, 1)
       array_property position , default_light_position ()
       radio_property style , "{infinite}|local"
+      bool_property visible U , "on"
     END_PROPERTIES
 
   protected:
     void init (void)
     {
       position.add_constraint (dim_vector (1, 3));
     }
   };
@@ -4829,16 +4838,18 @@ public:
     std::string get_aliminclude (void) const
     { return aliminclude.current_value (); }
 
     bool is_climinclude (void) const
     { return (climinclude.is_on () && cdatamapping.is ("scaled")); }
     std::string get_climinclude (void) const
     { return climinclude.current_value (); }
 
+    bool get_do_lighting (void) const;
+
     std::list<std::list<octave_idx_type>> coplanar_last_idx;
 
     // See the genprops.awk script for an explanation of the
     // properties declarations.
     // Programming note: Keep property list sorted if new ones are added.
 
     BEGIN_PROPERTIES (patch)
       radio_property alphadatamapping l , "none|{scaled}|direct"
@@ -5026,16 +5037,18 @@ public:
     std::string get_aliminclude (void) const
     { return aliminclude.current_value (); }
 
     bool is_climinclude (void) const
     { return (climinclude.is_on () && cdatamapping.is ("scaled")); }
     std::string get_climinclude (void) const
     { return climinclude.current_value (); }
 
+    bool get_do_lighting (void) const;
+
     // See the genprops.awk script for an explanation of the
     // properties declarations.
     // Programming note: Keep property list sorted if new ones are added.
 
     BEGIN_PROPERTIES (surface)
       array_property alphadata u , Matrix (1, 1, 1.0)
       radio_property alphadatamapping l , "none|direct|{scaled}"
       double_property ambientstrength , 0.3
@@ -5188,28 +5201,19 @@ public:
 // ---------------------------------------------------------------------
 
 class OCTINTERP_API hggroup : public base_graphics_object
 {
 public:
   class OCTINTERP_API properties : public base_properties
   {
   public:
-    void remove_child (const graphics_handle& h)
-    {
-      base_properties::remove_child (h);
-      update_limits ();
-    }
-
-    void adopt (const graphics_handle& h)
-    {
-
-      base_properties::adopt (h);
-      update_limits (h);
-    }
+    void remove_child (const graphics_handle& h);
+
+    void adopt (const graphics_handle& h);
 
     // See the genprops.awk script for an explanation of the
     // properties declarations.
     // Programming note: Keep property list sorted if new ones are added.
 
     BEGIN_PROPERTIES (hggroup)
       string_property displayname , ""
       radio_property erasemode h , "{normal}|none|xor|background"
