# HG changeset patch
# User Jacob Dawid <jacob.dawid@googlemail.com>
# Date 1302642688 -7200
#      Tue Apr 12 23:11:28 2011 +0200
# Node ID 5464586889ae1e722b4f7f1128c7cc4be3b669c8
# Parent  9a0e32b207437fb39c0010ca36067b9e858d45c8
Repaired line numbers.

diff --git a/gui//src/CodeEdit.cpp b/gui//src/CodeEdit.cpp
--- a/gui//src/CodeEdit.cpp
+++ b/gui//src/CodeEdit.cpp
@@ -15,17 +15,17 @@
  * Foundation, Inc., 59 Temple Place, Suite 330,
  * Boston, MA 02111-1307, USA.
  */
 
 #include <QContextMenuEvent>
 #include "CodeEdit.h"
 
 CodeEdit::CodeEdit(QWidget *parent)
-    : QTextEdit(parent),
+    : QPlainTextEdit(parent),
       contextMenu(this) {
 
     m_syntaxHighlighter=new SyntaxHighlighter(document());
 
     setUndoRedoEnabled(true);
     setTabStopWidth(32);
     setFrameStyle(QFrame::NoFrame);
 
@@ -149,22 +149,22 @@ bool CodeEdit::event(QEvent * event) {
                     if(re.exactMatch( line.trimmed() ) )
                             start_blank.append("\t");
                 }
 
                 cursor.setPosition(pos);
                 cursor.insertText(start_blank);
                 setTextCursor(cursor);
             } else {
-                return QTextEdit::event(event);
+                return QPlainTextEdit::event(event);
             }
             return true;
         }
     }
-    return QTextEdit::event(event);
+    return QPlainTextEdit::event(event);
 }
 
 void CodeEdit::buildAutoCompletionList(int pos, int charsRemoved, int charsAdded) {
     octaveCommandTimer.stop();
     document()->setModified(true);
     context_changed_ok=true;
 
     completionPosition=pos;
@@ -292,26 +292,25 @@ void CodeEdit::doCompletion(const QModel
 void CodeEdit::textModified_cb(bool ok) {
     //printf("[CodeEdit::textModified_cb] Entered\n");
     if(text_modified_stop_ok) return;
     emit textModified(ok);
     //printf("[CodeEdit::textModified_cb] text_modified emit\n");
 }
 
 void CodeEdit::publicBlockBoundingRectList(QVector<qreal> &list, int &first_line){
-    /*
+
     qreal pageBottom = viewport()->height();
     QPointF offset=contentOffset();
     QTextBlock block=firstVisibleBlock();
     first_line=block.blockNumber()+1;
     qreal first_position=blockBoundingGeometry(block).topLeft().y();
 
     for ( ; block.isValid(); block = block.next() )
     {
             QRectF position=blockBoundingGeometry(block);
             qreal y=position.topLeft().y()+offset.y()-first_position;
 
             if(y>pageBottom) break;
 
             list.append(y);
-    }
-    */
+    }  
 }
diff --git a/gui//src/CodeEdit.h b/gui//src/CodeEdit.h
--- a/gui//src/CodeEdit.h
+++ b/gui//src/CodeEdit.h
@@ -14,34 +14,34 @@
  * along with this program; if not, write to the Free Software
  * Foundation, Inc., 59 Temple Place, Suite 330,
  * Boston, MA 02111-1307, USA.
  */
 
 #ifndef CODEEDIT_H
 #define CODEEDIT_H
 
-#include <QTextEdit>
+#include <QPlainTextEdit>
 #include <QMenu>
 #include <QTextCursor>
 #include "SyntaxHighlighter.h"
 #include <QCompleter>
 #include <QStringListModel>
 #include <QTimer>
 #include "config.h"
 #include <QUndoStack>
 
 struct UndoRedoItem
 {
 	int size, pos;
 	QString text;
 };
 
 /**TextEdit that supports highlited syntax and autocompletion.*/
-class CodeEdit: public QTextEdit {
+class CodeEdit: public QPlainTextEdit {
     Q_OBJECT
 public:
     CodeEdit(QWidget *parent = 0);
     ~CodeEdit();
 
     /**List of y top left positions of bounding rects of each visible block of text.
     * @param list List of top left positions.
     * @param first_line First visible block in TextEdit.
diff --git a/gui//src/FileEditorMdiSubWindow.cpp b/gui//src/FileEditorMdiSubWindow.cpp
--- a/gui//src/FileEditorMdiSubWindow.cpp
+++ b/gui//src/FileEditorMdiSubWindow.cpp
@@ -61,18 +61,18 @@ void FileEditorMdiSubWindow::showToolTip
 void FileEditorMdiSubWindow::construct() {
     QStyle *style = QApplication::style();
     setWidget(new QWidget());
     m_toolBar = new QToolBar(this);
     m_codeEdit = new CodeEdit(this);
     m_statusBar = new QStatusBar(this);
     m_numberedTextView = new NumberedTextView(this, m_codeEdit);
 
-    m_codeEdit->setFontFamily("Courier");
-    m_codeEdit->setLineWrapMode(QTextEdit::NoWrap);
+    m_codeEdit->setFont(QFont("Courier"));
+    m_codeEdit->setLineWrapMode(QPlainTextEdit::NoWrap);
 
     QAction *newAction = new QAction(style->standardIcon(QStyle::SP_FileIcon),
         "", m_toolBar);
     QAction *saveAction = new QAction(style->standardIcon(QStyle::SP_DriveHDIcon),
         "", m_toolBar);
     QAction *undoAction = new QAction(style->standardIcon(QStyle::SP_ArrowLeft),
         "", m_toolBar);
     QAction *redoAction = new QAction(style->standardIcon(QStyle::SP_ArrowRight),
diff --git a/gui//src/NumberedCodeEdit.cpp b/gui//src/NumberedCodeEdit.cpp
--- a/gui//src/NumberedCodeEdit.cpp
+++ b/gui//src/NumberedCodeEdit.cpp
@@ -33,16 +33,17 @@
 NumberBar::NumberBar( QWidget *parent )
     : QWidget( parent ), edit(0), currentLine(-1), bugLine(-1)
 {
     // Make room for 4 digits and the breakpoint icon
     setFixedWidth( fontMetrics().width( QString("0000") + 10 + 32 ) );
     stopMarker = QPixmap(); //QString(ICON_PATH) + "/stop.png" );
     currentMarker = QPixmap(); // QString(ICON_PATH) + "/bookmark.png" );
     bugMarker = QPixmap(); // QString(ICON_PATH) + "/bug.png" );
+    setFont(QFont("Courier"));
 }
 
 NumberBar::~NumberBar()
 {
 }
 
 void NumberBar::setCurrentLine( int lineno )
 {
@@ -81,17 +82,17 @@ void NumberBar::setTextEdit( CodeEdit *e
 
 void NumberBar::paintEvent( QPaintEvent * )
 {
     QVector<qreal> lines_list;
     int first_line_no;
     edit->publicBlockBoundingRectList(lines_list, first_line_no);
     
     const QFontMetrics fm = edit->fontMetrics();
-    const int ascent = fontMetrics().ascent() + 1; // height = ascent + descent + 1
+    const int ascent = fontMetrics().ascent(); // height = ascent + descent + 1
    
     QPainter p(this);
     p.setPen(palette().windowText().color());
     
     bugRect = QRect();
     stopRect = QRect();
     currentRect = QRect();
     
@@ -101,17 +102,17 @@ void NumberBar::paintEvent( QPaintEvent 
     const int lines_list_size=lines_list.size();
     
     for(int i=0;i<lines_list_size;i++)
     {
     	position_y=qRound( lines_list[i] );
     	lineCount=first_line_no+i;
     	
     	const QString txt = QString::number( lineCount );
-        p.drawText( width() - fm.width(txt), position_y+ascent, txt );
+        p.drawText( width() - fm.width(txt) - 2, position_y+ascent, txt );
         
         // Bug marker
 	if ( bugLine == lineCount ) {
 	    p.drawPixmap( 1, position_y, bugMarker );
 	    bugRect = QRect( 19, position_y, bugMarker.width(), bugMarker.height() );
 	}
 	
 	// Stop marker
