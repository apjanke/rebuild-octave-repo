# HG changeset patch
# User Torsten <mttl@mailbox.org>
# Date 1486536868 -3600
#      Wed Feb 08 07:54:28 2017 +0100
# Node ID 0b59e37dd83e3b19c224140a1bf7f76126db5159
# Parent  5f7c675b39543b615cc59d548d435231e3292175
unhide editor when a file was changed by an external application (bug #50106)

* file-editor-tab.h: new signal set_focus_editor_signal

* file-editor-tab.cc (file_has_changed): emit new signal for showing the
  editor if hidden and making the tab of the changed file the current one;
  set the focus to this tab

* file-editor.h: new slot set_focus ()

* file-editor.cc (set_focus): new slot for getting the focus and making the
  given edtior tab the current one;
  (add_file_editor_tab): connect the new signal with the related new slot

diff --git a/libgui/src/m-editor/file-editor-tab.cc b/libgui/src/m-editor/file-editor-tab.cc
--- a/libgui/src/m-editor/file-editor-tab.cc
+++ b/libgui/src/m-editor/file-editor-tab.cc
@@ -2183,16 +2183,21 @@ file_editor_tab::file_has_changed (const
   if (QFile::exists (_file_name))
     {
       if (_always_reload_changed_files)
 
               load_file (_file_name);
 
       else
         {
+          // give editor and this tab the focus,
+          // possibly making the editor visible if it is hidden
+          emit set_focus_editor_signal (this);
+          _edit_area->setFocus ();
+
           // Create a WindowModal message that blocks the edit area
           // by making _edit_area parent.
           QMessageBox* msgBox
             = new QMessageBox (QMessageBox::Warning,
                                tr ("Octave Editor"),
                                tr ("It seems that \'%1\' has been modified by another application. Do you want to reload it?").
                                arg (_file_name),
                                QMessageBox::Yes | QMessageBox::No, this);
@@ -2202,16 +2207,21 @@ file_editor_tab::file_has_changed (const
 
           msgBox->setWindowModality (Qt::WindowModal);
           msgBox->setAttribute (Qt::WA_DeleteOnClose);
           msgBox->show ();
         }
     }
   else
     {
+      // give editor and this tab the focus,
+      // possibly making the editor visible  if it is hidden
+      emit set_focus_editor_signal (this);
+      _edit_area->setFocus ();
+
       QString modified = "";
       if (_edit_area->isModified ())
         modified = tr ("\n\nWarning: The contents in the editor is modified!");
 
       // Create a WindowModal message. The file editor tab can't be made
       // parent because it may be deleted depending upon the response.
       // Instead, change the _edit_area to read only.
       QMessageBox* msgBox
diff --git a/libgui/src/m-editor/file-editor-tab.h b/libgui/src/m-editor/file-editor-tab.h
--- a/libgui/src/m-editor/file-editor-tab.h
+++ b/libgui/src/m-editor/file-editor-tab.h
@@ -146,16 +146,17 @@ public slots:
 
   void handle_octave_result (QObject *requester, QString& command,
                              octave_value_list &result);
 
 signals:
 
   void file_name_changed (const QString& fileName, const QString& toolTip);
   void editor_state_changed (bool copy_available, bool is_octave_file);
+  void set_focus_editor_signal (QWidget *);
   void tab_remove_request ();
   void add_filename_to_list (const QString&, const QString&, QWidget *);
   void mru_add_file (const QString& file_name, const QString& encoding);
   void editor_check_conflict_save (const QString& saveFileName,
                                    bool remove_on_success);
   void run_file_signal (const QFileInfo& info);
   void request_open_file (const QString&);
   void edit_mfile_request (const QString&, const QString&,
diff --git a/libgui/src/m-editor/file-editor.cc b/libgui/src/m-editor/file-editor.cc
--- a/libgui/src/m-editor/file-editor.cc
+++ b/libgui/src/m-editor/file-editor.cc
@@ -157,16 +157,26 @@ file_editor::focus (void)
 
   // set focus to current tab
   QWidget *fileEditorTab = _tab_widget->currentWidget ();
   if (fileEditorTab)
     emit fetab_set_focus (fileEditorTab);
 }
 
 void
+file_editor::set_focus (QWidget *fet)
+{
+  octave_dock_widget::focus ();
+
+  // set focus to desired tab
+  if (fet)
+    _tab_widget->setCurrentWidget (fet);
+}
+
+void
 file_editor::update_octave_directory (const QString& dir)
 {
   ced = dir;
   emit fetab_set_directory (ced);  // for save dialog
 }
 
 QMenu *
 file_editor::debug_menu (void)
@@ -2008,16 +2018,19 @@ file_editor::add_file_editor_tab (file_e
            this, SLOT (request_open_file (const QString&)));
 
   connect (f, SIGNAL (edit_mfile_request (const QString&, const QString&,
                                           const QString&, int)),
            this, SLOT (handle_edit_mfile_request (const QString&,
                                                   const QString&,
                                                   const QString&, int)));
 
+  connect (f, SIGNAL (set_focus_editor_signal (QWidget*)),
+           this, SLOT (set_focus (QWidget*)));
+
   // Signals from the file_editor non-trivial operations
   connect (this, SIGNAL (fetab_settings_changed (const QSettings *)),
            f, SLOT (settings_changed (const QSettings *)));
 
   connect (this, SIGNAL (fetab_change_request (const QWidget*)),
            f, SLOT (change_editor_state (const QWidget*)));
 
   connect (this, SIGNAL (fetab_file_name_query (const QWidget*)),
diff --git a/libgui/src/m-editor/file-editor.h b/libgui/src/m-editor/file-editor.h
--- a/libgui/src/m-editor/file-editor.h
+++ b/libgui/src/m-editor/file-editor.h
@@ -159,16 +159,17 @@ signals:
 
   void request_settings_dialog (const QString&);
   void execute_command_in_terminal_signal (const QString&);
   void file_loaded_signal ();
 
 public slots:
 
   void focus (void);
+  void set_focus (QWidget* fet);
   void enable_menu_shortcuts (bool);
   bool check_closing (void);
 
   void request_new_file (const QString& commands);
   void request_new_script (const QString& commands);
   void request_new_function (bool triggered = true);
   void request_open_file (void);
   void request_close_file (bool);
