# HG changeset patch
# User Mike Miller <mtmiller@octave.org>
# Date 1495480365 25200
#      Mon May 22 12:12:45 2017 -0700
# Node ID 4d7928872999b4ffeb1c90c77616169c71808b63
# Parent  fd7a1659461466f4f27b25db100f96cd20374601
Fix concatenation of a struct with an empty cell array (bug #39041)

* pt-tm-const.cc (tm_row_const::tm_row_const_rep::do_init_element): Don't
ignore empty cell array that occurs first in a row vector, allow structs to
convert properly.
* data.cc, pt-mat.cc: Add BIST tests for this fix.  Add failing tests for
a similar compatibility bug.

diff --git a/libinterp/corefcn/data.cc b/libinterp/corefcn/data.cc
--- a/libinterp/corefcn/data.cc
+++ b/libinterp/corefcn/data.cc
@@ -2196,16 +2196,19 @@ new matrices.  For example:
 %! assert (class (horzcat ("a", double (1))), "char");
 %! assert (class (horzcat ("a", cell (1))), "cell");
 %! assert (class (horzcat ("a", true)), "char");
 %! assert (class (horzcat ("a", "a")), "char");
 
 %!assert (class (horzcat (cell (1), struct ("foo", "bar"))), "cell")
 
 %!error horzcat (struct ("foo", "bar"), cell (1))
+
+%!test <39041> assert (class (horzcat (cell(0), struct())), "cell")
+%!test <51086> assert (class (horzcat (struct(), cell(0))), "struct")
 */
 
 DEFUN (vertcat, args, ,
        doc: /* -*- texinfo -*-
 @deftypefn {} {} vertcat (@var{array1}, @var{array2}, @dots{}, @var{arrayN})
 Return the vertical concatenation of N-D array objects, @var{array1},
 @var{array2}, @dots{}, @var{arrayN} along dimension 1.
 
diff --git a/libinterp/parse-tree/pt-mat.cc b/libinterp/parse-tree/pt-mat.cc
--- a/libinterp/parse-tree/pt-mat.cc
+++ b/libinterp/parse-tree/pt-mat.cc
@@ -338,16 +338,19 @@ namespace octave
 %!assert (class (["a", double(1)]), "char")
 %!assert (class (["a", cell(1)]), "cell")
 %!assert (class (["a", true]), "char")
 %!assert (class (["a", "a"]), "char")
 
 %!assert (class ([cell(1), struct("foo", "bar")]), "cell")
 %!error [struct("foo", "bar"), cell(1)]
 
+%!test <39041> assert (class ([cell(0), struct()]), "cell")
+%!test <51086> assert (class ([struct(), cell(0)]), "struct")
+
 %!assert ([,1], 1)
 %!assert ([1,], 1)
 %!assert ([,1,], 1)
 %!assert ([,1,;;], 1)
 %!assert ([,1,;,;], 1)
 
 %!assert ([1,1], ones (1, 2))
 %!assert ([,1,1], ones (1, 2))
diff --git a/libinterp/parse-tree/pt-tm-const.cc b/libinterp/parse-tree/pt-tm-const.cc
--- a/libinterp/parse-tree/pt-tm-const.cc
+++ b/libinterp/parse-tree/pt-tm-const.cc
@@ -77,16 +77,18 @@ namespace octave
         if (first_elem)
           {
             if (val.is_map ())
               first_elem_is_struct = true;
 
             first_elem = false;
           }
       }
+    else if (val.is_cell ())
+      first_elem = false;
 
     append (val);
 
     if (all_str && ! val.is_string ())
       all_str = false;
 
     if (all_sq_str && ! val.is_sq_string ())
       all_sq_str = false;
