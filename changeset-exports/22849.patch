# HG changeset patch
# User Rik <rik@octave.org>
# Date 1480466795 28800
#      Tue Nov 29 16:46:35 2016 -0800
# Node ID 1d242ae7224012b78dd114c780c3396b8beb6e27
# Parent  a3bd04422a870a2ad663c8a151a1d88b727d77ec
Return 0 for special case of scalar Inf input to inverse (bug #49690).

* inv.cc (Finv): Add BIST tests for new behavior.

* CMatrix.cc, fCMatrix.cc, dMatrix.cc, fMatrix.cc (::inverse):
If function has had to calculate the reciprocal condition number, and
the rcond value is zero, then return 0 if the input was a scalar, or
a matrix of all Inf values.

diff --git a/libinterp/corefcn/inv.cc b/libinterp/corefcn/inv.cc
--- a/libinterp/corefcn/inv.cc
+++ b/libinterp/corefcn/inv.cc
@@ -202,29 +202,38 @@ sparse matrix if possible.
 
   return retval;
 }
 
 /*
 %!assert (inv ([1, 2; 3, 4]), [-2, 1; 1.5, -0.5], sqrt (eps))
 %!assert (inv (single ([1, 2; 3, 4])), single ([-2, 1; 1.5, -0.5]), sqrt (eps ("single")))
 
+## Test special inputs
+%!assert (inv (zeros (2,0)), [])
+%!warning <matrix singular> assert (inv (Inf), 0)
+%!warning <matrix singular> assert (inv (-Inf), -0)
+%!warning <matrix singular> assert (inv (single (Inf)), single (0))
+%!warning <matrix singular> assert (inv (complex (1, Inf)), 0)
+%!warning <matrix singular> assert (inv (single (complex (1,Inf))), single (0))
+
+%!test
+%! [xinv, rcond] = inv (single ([1,2;3,4]));
+%! assert (isa (xinv, "single"));
+%! assert (isa (rcond, "single"));
+
+%!test
+%! [xinv, rcond] = inv ([1,2;3,4]);
+%! assert (isa (xinv, "double"));
+%! assert (isa (rcond, "double"));
+
 %!error inv ()
 %!error inv ([1, 2; 3, 4], 2)
 %!error <must be a square matrix> inv ([1, 2; 3, 4; 5, 6])
 
-%!test
-%! [xinv, rcond] = inv (single ([1,2;3,4]));
-%! assert (isa (xinv, 'single'));
-%! assert (isa (rcond, 'single'));
-
-%!test
-%! [xinv, rcond] = inv ([1,2;3,4]);
-%! assert (isa (xinv, 'double'));
-%! assert (isa (rcond, 'double'));
 */
 
 // FIXME: this should really be done with an alias, but
 // alias_builtin() won't do the right thing if we are actually using
 // dynamic linking.
 
 DEFUN (inverse, args, nargout,
        doc: /* -*- texinfo -*-
diff --git a/liboctave/array/CMatrix.cc b/liboctave/array/CMatrix.cc
--- a/liboctave/array/CMatrix.cc
+++ b/liboctave/array/CMatrix.cc
@@ -919,19 +919,24 @@ ComplexMatrix::inverse (MatrixType &matt
             }
           else
             mattype.mark_as_unsymmetric ();
         }
 
       if (! mattype.is_hermitian ())
         ret = finverse (mattype, info, rcon, force, calc_cond);
 
-      if ((mattype.is_hermitian () || calc_cond) && rcon == 0.)
-        ret = ComplexMatrix (rows (), columns (),
-                             Complex (octave::numeric_limits<double>::Inf (), 0.));
+      if ((calc_cond || mattype.is_hermitian ()) && rcon == 0.)
+        {
+          if (numel () == 1)
+            ret = ComplexMatrix (1, 1, 0.);
+          else
+            ret = ComplexMatrix (rows (), columns (),
+                                 Complex (octave::numeric_limits<double>::Inf (), 0.));
+        }
     }
 
   return ret;
 }
 
 ComplexMatrix
 ComplexMatrix::pseudo_inverse (double tol) const
 {
diff --git a/liboctave/array/dMatrix.cc b/liboctave/array/dMatrix.cc
--- a/liboctave/array/dMatrix.cc
+++ b/liboctave/array/dMatrix.cc
@@ -627,18 +627,20 @@ Matrix::inverse (MatrixType &mattype, oc
             }
           else
             mattype.mark_as_unsymmetric ();
         }
 
       if (! mattype.is_hermitian ())
         ret = finverse (mattype, info, rcon, force, calc_cond);
 
-      if ((mattype.is_hermitian () || calc_cond) && rcon == 0.)
-        ret = Matrix (rows (), columns (), octave::numeric_limits<double>::Inf ());
+      if ((calc_cond || mattype.is_hermitian ()) && rcon == 0.
+          && ! (numel () == 1))
+        ret = Matrix (rows (), columns (),
+                      octave::numeric_limits<double>::Inf ());
     }
 
   return ret;
 }
 
 Matrix
 Matrix::pseudo_inverse (double tol) const
 {
diff --git a/liboctave/array/fCMatrix.cc b/liboctave/array/fCMatrix.cc
--- a/liboctave/array/fCMatrix.cc
+++ b/liboctave/array/fCMatrix.cc
@@ -921,19 +921,24 @@ FloatComplexMatrix::inverse (MatrixType 
             }
           else
             mattype.mark_as_unsymmetric ();
         }
 
       if (! mattype.is_hermitian ())
         ret = finverse (mattype, info, rcon, force, calc_cond);
 
-      if ((mattype.is_hermitian () || calc_cond) && rcon == 0.)
-        ret = FloatComplexMatrix (rows (), columns (),
-                                  FloatComplex (octave::numeric_limits<float>::Inf (), 0.));
+      if ((calc_cond || mattype.is_hermitian ()) && rcon == 0.)
+        {
+          if (numel () == 1)
+            ret = FloatComplexMatrix (1, 1, 0.);
+          else
+            ret = FloatComplexMatrix (rows (), columns (),
+                                      FloatComplex (octave::numeric_limits<float>::Inf (), 0.));
+        }
     }
 
   return ret;
 }
 
 FloatComplexMatrix
 FloatComplexMatrix::pseudo_inverse (float tol) const
 {
diff --git a/liboctave/array/fMatrix.cc b/liboctave/array/fMatrix.cc
--- a/liboctave/array/fMatrix.cc
+++ b/liboctave/array/fMatrix.cc
@@ -633,18 +633,20 @@ FloatMatrix::inverse (MatrixType &mattyp
             }
           else
             mattype.mark_as_unsymmetric ();
         }
 
       if (! mattype.is_hermitian ())
         ret = finverse (mattype, info, rcon, force, calc_cond);
 
-      if ((mattype.is_hermitian () || calc_cond) && rcon == 0.)
-        ret = FloatMatrix (rows (), columns (), octave::numeric_limits<float>::Inf ());
+      if ((calc_cond || mattype.is_hermitian ()) && rcon == 0.
+          && ! (numel () == 1))
+        ret = FloatMatrix (rows (), columns (),
+                           octave::numeric_limits<float>::Inf ());
     }
 
   return ret;
 }
 
 FloatMatrix
 FloatMatrix::pseudo_inverse (float tol) const
 {
