# HG changeset patch
# User jwe
# Date 1147243845 0
#      Wed May 10 06:50:45 2006 +0000
# Node ID e8be7fe586f91aa7e381401f9894d8876bc4740b
# Parent  9ad09b44beba365da261febe2acbf73240bc892a
[project @ 2006-05-10 06:50:45 by jwe]

diff --git a/README.Windows b/README.Windows
--- a/README.Windows
+++ b/README.Windows
@@ -52,22 +52,22 @@ 12. To run Octave, start Cygwin.  This w
       octave
 
     That should present you with an Octave prompt.  Type
 
       sombrero (41)
 
     at this prompt and a new window with the sombrero plot should appear.
 
-13. To build .oct files (dynamically loaded functions) for Octave, you
-    will also need the octave-headers package.  Currently, due to some
-    bugs in the most recent version of the C++ compiler and libraries
-    for Cygwin, you will also need gcc and g++ 3.3 rather than 3.4.
-    You can use the setup.exe installer to select and install the
-    older version.
+13. IMPORTANT: to build .oct files (dynamically loaded functions) for
+    Octave, you will also need the octave-headers package.  Currently,
+    due to some bugs in the most recent version of the C++ compiler
+    and libraries for Cygwin, you will also need gcc and g++ 3.3
+    rather than 3.4.  You can use the setup.exe installer to select
+    and install the older version.
 
 
 John W. Eaton
 jwe@bevo.che.wisc.edu
 University of Wisconsin-Madison
 Department of Chemical Engineering
 
 Tue Apr 18 15:22:59 2006
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,16 @@
+2006-05-10  John W. Eaton  <jwe@octave.org>
+
+	* oct-hist.cc (initialize_history, Fhistory_size):
+	Also call command_history::set_size here.
+
+	* defun.cc (Fprint_usage): New function.
+	* help.cc (display_usage_text): New function.
+
 2006-05-09  Keith Goodman  <kwgoodman@gmail.com>
 
 	* DLD-FUNCTIONS/rand.cc: Doc string fix.
 
 2006-05-09  Jorge Barros de Abreu  <ficmatin01@solar.com.br>
 
 	* data.cc (FInf, FNaN): Fix typo in doc string.
 
diff --git a/src/defun.cc b/src/defun.cc
--- a/src/defun.cc
+++ b/src/defun.cc
@@ -58,30 +58,56 @@ print_usage (const std::string& nm, bool
       if (h.length () > 0)
 	{
 	  std::ostringstream buf;
 
 	  buf << "\nInvalid call to " << nm << ".  Correct usage is:\n\n";
 
 	  h = extract_help_from_dispatch (nm) + h;
 
-	  display_help_text (buf, h);
+	  display_usage_text (buf, h);
 
 	  buf << extra_msg << "\n";
 
 	  if (! just_usage)
 	    additional_help_message (buf);
 
 	  defun_usage_message (buf.str ());
 	}
     }
   else
     warning ("no usage message found for `%s'", nm.c_str ());
 }
 
+DEFUN (print_usage, args, ,
+  "-*- texinfo -*-\n\
+@deftypefn {Loadable Function} {} print_usage (@var{fname})\n\
+Print the usage message for the function named @var{fname}.  The\n\
+@code{print_usage} function is only intended to work inside the\n\
+named function.\n\
+@seealso{help}\n\
+@end deftypefn")
+{
+  octave_value retval;
+
+  if (args.length () == 1)
+    {
+      std::string fname = args(0).string_value ();
+
+      if (! error_state)
+	print_usage (fname);
+      else
+	error ("print_usage: expecting character string");
+    }
+  else
+    print_usage ("print_usage");
+
+  return retval;
+}
+
 void
 check_version (const std::string& version, const std::string& fcn)
 {
   if (version != OCTAVE_API_VERSION)
     {
       error ("API version %s found in .oct file function `%s'\n"
 	     "       does not match the running Octave (API version %s)\n"
 	     "       this can lead to incorrect results or other failures\n"
diff --git a/src/help.cc b/src/help.cc
--- a/src/help.cc
+++ b/src/help.cc
@@ -690,16 +690,59 @@ display_help_text (std::ostream& os, con
 	}
       else
 	os << msg;
     }
   else
     os << msg;
 }
 
+void
+display_usage_text (std::ostream& os, const std::string& msg)
+{
+  std::string filtered_msg = msg;
+
+  size_t pos;
+
+  if (looks_like_texinfo (msg, pos))
+    {
+      std::ostringstream buf;
+
+      buf << "-*- texinfo -*-\n";
+
+      bool found_def = false;
+
+      size_t msg_len = msg.length ();
+
+      while (pos < msg_len)
+	{
+	  size_t new_pos = msg.find_first_of ('\n', pos);
+
+	  if (new_pos == NPOS)
+	    new_pos = msg_len-1;
+
+	  std::string line = msg.substr (pos, new_pos-pos+1);
+
+	  if (line.substr (0, 4) == "@def"
+	      || line.substr (0, 8) == "@end def")
+	    {
+	      found_def = true;
+	      buf << line;
+	    }
+
+	  pos = new_pos + 1;
+	}
+
+      if (found_def)
+	filtered_msg = buf.str ();
+    }
+
+  display_help_text (os, filtered_msg);
+}
+
 static bool
 help_from_list (std::ostream& os, const help_list *list,
 		const std::string& nm, int usage, bool& symbol_found)
 {
   bool retval = false;
 
   const char *name;
 
diff --git a/src/help.h b/src/help.h
--- a/src/help.h
+++ b/src/help.h
@@ -30,16 +30,18 @@ 02110-1301, USA.
 class string_vector;
 
 extern string_vector make_name_list (void);
 
 extern std::string extract_help_from_dispatch (const std::string&);
 
 extern void display_help_text (std::ostream&, const std::string&);
 
+extern void display_usage_text (std::ostream&, const std::string&);
+
 extern void additional_help_message (std::ostream&);
 
 // Name of the info file specified on command line.
 // (--info-file file)
 extern std::string Vinfo_file;
 
 // Name of the info reader we'd like to use.
 // (--info-program program)
diff --git a/src/oct-hist.cc b/src/oct-hist.cc
--- a/src/oct-hist.cc
+++ b/src/oct-hist.cc
@@ -547,17 +547,18 @@ do_run_history (int argc, const string_v
 
   unlink (name.c_str ());
 }
 
 void
 initialize_history (void)
 {
   command_history::set_file (file_ops::tilde_expand (Vhistory_file));
-  
+  command_history::set_size (Vhistory_size);
+
   command_history::read (false);
 }
 
 void
 octave_history_write_timestamp (void)
 {
   octave_localtime now;
 
@@ -686,17 +687,25 @@ DEFUN (history_size, args, nargout,
 @deftypefn {Built-in Function} {@var{val} =} history_size ()\n\
 @deftypefnx {Built-in Function} {@var{old_val} =} history_size (@var{new_val})\n\
 Query or set the internal variable that specifies how many entries\n\
 to store in the history file.  The default value is @code{1024},\n\
 but may be overridden by the environment variable @code{OCTAVE_HISTSIZE}.\n\
 @seealso{history_file, history_timestamp_format, saving_history}\n\
 @end deftypefn")
 {
-  return SET_INTERNAL_VARIABLE_WITH_LIMITS (history_size, -1, INT_MAX);
+  int saved_history_size = Vhistory_size;
+
+  octave_value retval
+    = SET_INTERNAL_VARIABLE_WITH_LIMITS (history_size, -1, INT_MAX);
+
+  if (Vhistory_size != saved_history_size)
+    command_history::set_size (Vhistory_size);
+
+  return retval;
 }
 
 DEFUN (history_file, args, nargout,
   "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {@var{val} =} history_file ()\n\
 @deftypefnx {Built-in Function} {@var{old_val} =} history_file (@var{new_val})\n\
 Query or set the internal variable that specifies the name of the\n\
 file used to store command history.  The default value is\n\
@@ -707,17 +716,17 @@ variable @code{OCTAVE_HISTFILE}.\n\
 {
   std::string saved_history_file = Vhistory_file;
 
   octave_value retval = SET_INTERNAL_VARIABLE (history_file);
 
   if (Vhistory_file != saved_history_file)
     command_history::set_file (file_ops::tilde_expand (Vhistory_file));
 
-  return retval;;
+  return retval;
 }
 
 DEFUN (history_timestamp_format_string, args, nargout,
   "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {@var{val} =} history_timestamp_format_string ()\n\
 @deftypefnx {Built-in Function} {@var{old_val} =} history_timestamp_format_string (@var{new_val})\n\
 Query or set the internal variable that specifies the the format string\n\
 for the comment line that is written to the history file when Octave\n\
diff --git a/src/variables.cc b/src/variables.cc
--- a/src/variables.cc
+++ b/src/variables.cc
@@ -1243,21 +1243,21 @@ set_global_value (const std::string& nm,
 // Variable values.
 
 octave_value
 set_internal_variable (bool& var, const octave_value_list& args,
 		       int nargout, const char *nm)
 {
   octave_value retval;
 
-  if (nargout > 0)
+  int nargin = args.length ();
+
+  if (nargout > 0 || nargin == 0)
     retval = var;
 
-  int nargin = args.length ();
-
   if (nargin == 1)
     {
       bool bval = args(0).bool_value ();
 
       if (! error_state)
 	var = bval;
       else
 	error ("%s: expecting arg to be a logical value", nm);
@@ -1269,21 +1269,21 @@ set_internal_variable (bool& var, const 
 }
 
 octave_value
 set_internal_variable (char& var, const octave_value_list& args,
 		       int nargout, const char *nm)
 {
   octave_value retval;
 
-  if (nargout > 0)
+  int nargin = args.length ();
+
+  if (nargout > 0 || nargin == 0)
     retval = var;
 
-  int nargin = args.length ();
-
   if (nargin == 1)
     {
       std::string sval = args(0).string_value ();
 
       if (! error_state)
 	{
 	  switch (sval.length ())
 	    {
@@ -1311,21 +1311,21 @@ set_internal_variable (char& var, const 
 
 octave_value
 set_internal_variable (int& var, const octave_value_list& args,
 		       int nargout, const char *nm,
 		       int minval, int maxval)
 {
   octave_value retval;
 
-  if (nargout > 0)
+  int nargin = args.length ();
+
+  if (nargout > 0 || nargin == 0)
     retval = var;
 
-  int nargin = args.length ();
-
   if (nargin == 1)
     {
       int ival = args(0).int_value ();
 
       if (! error_state)
 	{
 	  if (ival < minval)
 	    error ("%s: expecting arg to be greater than %d", minval);
@@ -1345,21 +1345,21 @@ set_internal_variable (int& var, const o
 
 octave_value
 set_internal_variable (double& var, const octave_value_list& args,
 		       int nargout, const char *nm,
 		       double minval, double maxval)
 {
   octave_value retval;
 
-  if (nargout > 0)
+  int nargin = args.length ();
+
+  if (nargout > 0 || nargin == 0)
     retval = var;
 
-  int nargin = args.length ();
-
   if (nargin == 1)
     {
       double dval = args(0).scalar_value ();
 
       if (! error_state)
 	{
 	  if (dval < minval)
 	    error ("%s: expecting arg to be greater than %g", minval);
@@ -1378,21 +1378,21 @@ set_internal_variable (double& var, cons
 }
 
 octave_value
 set_internal_variable (std::string& var, const octave_value_list& args,
 		       int nargout, const char *nm, bool empty_ok)
 {
   octave_value retval;
 
-  if (nargout > 0)
+  int nargin = args.length ();
+
+  if (nargout > 0 || nargin == 0)
     retval = var;
 
-  int nargin = args.length ();
-
   if (nargin == 1)
     {
       std::string sval = args(0).string_value ();
 
       if (! error_state)
 	{
 	  if (empty_ok || ! sval.empty ())
 	    var = sval;
