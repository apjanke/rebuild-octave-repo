# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1483561484 18000
#      Wed Jan 04 15:24:44 2017 -0500
# Node ID ae6c01558d251c476a2d3334d254b8b68e33f6ac
# Parent  5fdf29cb4ab831c66f3560b05418795025bba1d5
# Parent  36df0e0072a50c9075906bd86f525c1a5d46cad4
maint: Merge stable to default.

diff --git a/libinterp/corefcn/input.cc b/libinterp/corefcn/input.cc
--- a/libinterp/corefcn/input.cc
+++ b/libinterp/corefcn/input.cc
@@ -1027,16 +1027,18 @@ functions.
 
 @item off all
 Disable echoing of commands as they are executed in script files and
 functions.
 @end table
 
 @noindent
 With no arguments, @code{echo} toggles the current echo state.
+
+@seealso{echo_executing_commands}
 @end deftypefn */)
 {
   string_vector argv = args.make_argv ();
 
   switch (args.length ())
     {
     case 0:
       {
@@ -1475,16 +1477,18 @@ More than one state can be active at onc
 equivalent to the command @kbd{echo on all}.
 
 The value of @code{echo_executing_commands} may be set by the @kbd{echo}
 command or the command line option @option{--echo-commands}.
 
 When called from inside a function with the @qcode{"local"} option, the
 variable is changed locally for the function and any subroutines it calls.
 The original variable value is restored when exiting the function.
+
+@seealso{echo}
 @end deftypefn */)
 {
   return SET_INTERNAL_VARIABLE (echo_executing_commands);
 }
 
 DEFUN (__request_drawnow__, args, ,
        doc: /* -*- texinfo -*-
 @deftypefn  {} {} __request_drawnow__ ()
diff --git a/libinterp/corefcn/oct-stream.cc b/libinterp/corefcn/oct-stream.cc
--- a/libinterp/corefcn/oct-stream.cc
+++ b/libinterp/corefcn/oct-stream.cc
@@ -107,33 +107,37 @@ convert_to_valid_int (const octave_value
         }
       else
         conv_err = 2;
     }
 
   return retval;
 }
 
-static int
+static octave_idx_type
 get_size (double d, const std::string& who)
 {
-  int retval = -1;
+  octave_idx_type retval = -1;
 
   if (lo_ieee_isnan (d))
     ::error ("%s: NaN is invalid as size specification", who.c_str ());
 
   if (octave::math::isinf (d))
     retval = -1;
   else
     {
       if (d < 0.0)
         ::error ("%s: negative value invalid as size specification",
                  who.c_str ());
 
-      retval = octave::math::nint (d);
+      if (d > std::numeric_limits<octave_idx_type>::max ())
+        ::error ("%s: dimension too large for Octave's index type",
+                 who.c_str ());
+
+      retval = octave::math::nint_big (d);
     }
 
   return retval;
 }
 
 static void
 get_size (const Array<double>& size, octave_idx_type& nr, octave_idx_type& nc,
           bool& one_elt_size_spec, const std::string& who)
@@ -6466,31 +6470,31 @@ octave_stream::read (const Array<double>
 
   // FIXME: we may eventually want to make this extensible.
 
   // FIXME: we need a better way to ensure that this
   // numbering stays consistent with the order of the elements in the
   // data_type enum in the oct_data_conv class.
 
   // Expose this in a future version?
-  octave_idx_type char_count = 0;
-
-  count = 0;
+  size_t char_count = 0;
+
+  ptrdiff_t tmp_count = 0;
 
   try
     {
       get_size (size, nr, nc, one_elt_size_spec, "fread");
     }
   catch (const octave::execution_exception&)
     {
       invalid_operation ("fread", "reading");
+
+      return retval;
     }
 
-  octave_idx_type elts_to_read;
-
   if (one_elt_size_spec)
     {
       // If NR == 0, Matlab returns [](0x0).
 
       // If NR > 0, the result will be a column vector with the given
       // number of rows.
 
       // If NR < 0, then we have Inf and the result will be a column
@@ -6511,17 +6515,17 @@ octave_stream::read (const Array<double>
 
       if (nr == 0 || nc == 0)
         nr = nc = 0;
     }
 
   // FIXME: Ensure that this does not overflow.
   //        Maybe try comparing nr * nc computed in double with
   //        std::numeric_limits<octave_idx_type>::max ();
-  elts_to_read = nr * nc;
+  octave_idx_type elts_to_read = nr * nc;
 
   bool read_to_eof = elts_to_read < 0;
 
   octave_idx_type input_buf_elts = -1;
 
   if (skip == 0)
     {
       if (read_to_eof)
@@ -6530,54 +6534,55 @@ octave_stream::read (const Array<double>
         input_buf_elts = elts_to_read;
     }
   else
     input_buf_elts = block_size;
 
   octave_idx_type input_elt_size
     = oct_data_conv::data_type_size (input_type);
 
-  octave_idx_type input_buf_size = input_buf_elts * input_elt_size;
+  ptrdiff_t input_buf_size
+    = static_cast<ptrdiff_t> (input_buf_elts) * input_elt_size;
 
   assert (input_buf_size >= 0);
 
   // Must also work and return correct type object
   // for 0 elements to read.
   std::istream *isp = input_stream ();
 
   if (! isp)
     error ("fread: invalid input stream");
   else
     {
       std::istream& is = *isp;
 
       std::list <void *> input_buf_list;
 
       while (is && ! is.eof ()
-             && (read_to_eof || count < elts_to_read))
+             && (read_to_eof || tmp_count < elts_to_read))
         {
           if (! read_to_eof)
             {
-              octave_idx_type remaining_elts = elts_to_read - count;
+              octave_idx_type remaining_elts = elts_to_read - tmp_count;
 
               if (remaining_elts < input_buf_elts)
                 input_buf_size = remaining_elts * input_elt_size;
             }
 
           char *input_buf = new char [input_buf_size];
 
           is.read (input_buf, input_buf_size);
 
           size_t gcount = is.gcount ();
 
           char_count += gcount;
 
           octave_idx_type nel = gcount / input_elt_size;
 
-          count += nel;
+          tmp_count += nel;
 
           input_buf_list.push_back (input_buf);
 
           if (is && skip != 0 && nel == block_size)
             {
               // Seek to skip.
               // If skip would move past EOF, position at EOF.
 
@@ -6602,40 +6607,45 @@ octave_stream::read (const Array<double>
                 break;
             }
         }
 
       if (read_to_eof)
         {
           if (nc < 0)
             {
-              nc = count / nr;
-
-              if (count % nr != 0)
+              nc = tmp_count / nr;
+
+              if (tmp_count % nr != 0)
                 nc++;
             }
           else
-            nr = count;
+            nr = tmp_count;
         }
-      else if (count == 0)
+      else if (tmp_count == 0)
         {
           nr = 0;
           nc = 0;
         }
-      else if (count != nr * nc)
+      else if (tmp_count != nr * nc)
         {
-          if (count % nr != 0)
-            nc = count / nr + 1;
+          if (tmp_count % nr != 0)
+            nc = tmp_count / nr + 1;
           else
-            nc = count / nr;
-
-          if (count < nr)
-            nr = count;
+            nc = tmp_count / nr;
+
+          if (tmp_count < nr)
+            nr = tmp_count;
         }
 
+      if (tmp_count > std::numeric_limits<octave_idx_type>::max ())
+        error ("fread: number of elements read exceeds max index size");
+      else
+        count = static_cast<octave_idx_type> (tmp_count);
+
       retval = finalize_read (input_buf_list, input_buf_elts, count,
                               nr, nc, input_type, output_type, ffmt);
     }
 
   return retval;
 }
 
 octave_idx_type
diff --git a/libinterp/octave-value/ov-fcn-handle.cc b/libinterp/octave-value/ov-fcn-handle.cc
--- a/libinterp/octave-value/ov-fcn-handle.cc
+++ b/libinterp/octave-value/ov-fcn-handle.cc
@@ -1694,19 +1694,20 @@ The function is a subfunction within an 
 The m-file that will be called to perform the function.  This field is empty
 for anonymous and built-in functions.
 @end table
 
 In addition, some function types may return more information in additional
 fields.
 
 @strong{Warning:} @code{functions} is provided for debugging purposes only.
-Its behavior may change in the future and programs should not depend on a
-particular output.
+Its behavior may change in the future and programs should not depend on any
+particular output format.
 
+@seealso{func2str, str2func}
 @end deftypefn */)
 {
   if (args.length () != 1)
     print_usage ();
 
   octave_fcn_handle *fh = args(0).fcn_handle_value ("functions: FCN_HANDLE argument must be a function handle object");
 
   octave_function *fcn = fh ? fh->function_value () : 0;
@@ -1816,17 +1817,17 @@ function handle @var{fcn_handle}.
 DEFUN (str2func, args, ,
        doc: /* -*- texinfo -*-
 @deftypefn  {} {} str2func (@var{fcn_name})
 @deftypefnx {} {} str2func (@var{fcn_name}, "global")
 Return a function handle constructed from the string @var{fcn_name}.
 
 If the optional @qcode{"global"} argument is passed, locally visible
 functions are ignored in the lookup.
-@seealso{func2str, inline}
+@seealso{func2str, inline, functions}
 @end deftypefn */)
 {
   int nargin = args.length ();
 
   if (nargin < 1 || nargin > 2)
     print_usage ();
 
   std::string nm = args(0).xstring_value ("str2func: FCN_NAME must be a string");
