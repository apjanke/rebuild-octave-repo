# HG changeset patch
# User Rik <rik@octave.org>
# Date 1489620306 25200
#      Wed Mar 15 16:25:06 2017 -0700
# Branch stable
# Node ID a21f8372bb76224b2bcf2d94151bfb730b259716
# Parent  afa48a26e684d7c2641ec6e262038532a17de087
datenum.m: Allow horizontal vectors of dates with fractional months (bug #50508).

* datenum.m: Remember shape of input in sz_reshape.  Convert inputs to uniform
size using common_size().  Perform all of the remainder of function with
column vectors only.  Restore shape at end of function if necessary with reshape.

diff --git a/scripts/time/datenum.m b/scripts/time/datenum.m
--- a/scripts/time/datenum.m
+++ b/scripts/time/datenum.m
@@ -95,30 +95,46 @@ function [days, secs] = datenum (year, m
   persistent monthstart = [306; 337; 0; 31; 61; 92; 122; 153; 184; 214; 245; 275];
   persistent monthlength = [31; 28; 31; 30; 31; 30; 31; 31; 30; 31; 30; 31];
 
   if (nargin == 0 || nargin > 6
       || (nargin > 2 && (ischar (year) || iscellstr (year))))
     print_usage ();
   endif
 
+  do_reshape = false;
   if (ischar (year) || iscellstr (year))
     [year, month, day, hour, minute, second] = datevec (year, month);
   else
     if (nargin == 1)
       nc = columns (year);
       if (nc > 6 || nc < 3)
         error ("datenum: expected date vector containing [YEAR, MONTH, DAY, HOUR, MINUTE, SECOND]");
       endif
       if (nc >= 6) second = year(:,6); endif
       if (nc >= 5) minute = year(:,5); endif
       if (nc >= 4) hour   = year(:,4); endif
       day   = year(:,3);
       month = year(:,2);
       year  = year(:,1);
+    else
+      [err, year, month, day] = common_size (year, month, day);
+      if (err)
+        error ("datenum: incompatible sizes for YEAR, MONTH, DAY");
+      endif
+      ## Preserve shape if necessary, and work with column vectors
+      ## for the remainder of the function.
+      do_reshape = (columns (year) > 1 || columns (month) > 1
+                    || columns (day) > 1);
+      if (do_reshape)
+        sz_reshape = size (day);
+        year = year(:);
+        month = month(:);
+        day = day(:);
+      endif
     endif
   endif
 
   if (! (isa (year, "double") && isa (month, "double")
          && isa (day, "double") && isa (hour, "double")
          && isa (minute, "double") && isa (second, "double")))
     error ("datenum: all inputs must be of class double");
   endif
@@ -127,40 +143,35 @@ function [days, secs] = datenum (year, m
   month(month < 1) = 1;
 
   ## Treat fractional months, by converting the fraction to days
   if (any (month != fix (month)))
     fracmonth = month - floor (month);
     month = floor (month);
     ## Separate regular months from leap months
     idx = mod (month-1,12) + 1 != 2 | ! is_leap_year (floor (year));
-    day(idx) += fracmonth(idx) .* monthlength ((mod (month(idx)-1,12) + 1));
+    day(idx) += fracmonth(idx) .* monthlength(mod (month(idx)-1,12) + 1);
     day(! idx) += fracmonth(! idx) * 29;
   endif
 
   ## Set start of year to March by moving Jan. and Feb. to previous year.
   ## Correct for months > 12 by moving to subsequent years.
   year += ceil ((month-14)/12);
 
   ## Lookup number of days since start of the current year.
-  if (numel (month) == 1 || numel (day) == 1)
-    ## Allow month or day to be scalar while other values may be vectors or
-    ## matrices.
-    day += monthstart (mod (month-1,12) + 1) + 60;
-    if (numel (month) > 1)
-      day = reshape (day, size (month));
-    endif
-  else
-    day += reshape (monthstart (mod (month-1,12) + 1), size (day)) + 60;
-  endif
+  day += monthstart(mod (month-1,12) + 1) + 60;
 
   ## Add number of days to the start of the current year.  Correct
   ## for leap year every 4 years except centuries not divisible by 400.
   day += 365*year + floor (year/4) - floor (year/100) + floor (year/400);
 
+  if (do_reshape)
+    day = reshape (day, sz_reshape);
+  endif
+
   ## Add fraction representing current second of the day.
   days = day + (hour + (minute + second/60)/60)/24;
 
   ## Output seconds if asked so that etime can be more accurate
   if (isargout (2))
     secs = day*86400 + hour*3600 + minute*60 + second;
   endif
 
