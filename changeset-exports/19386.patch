# HG changeset patch
# User Rik <rik@octave.org>
# Date 1417846629 28800
#      Fri Dec 05 22:17:09 2014 -0800
# Node ID f054112912dffa71dad3bbaee937f26d5527ad10
# Parent  3b4d6780d6b81b4ac8cd8d5345b07ad71cb50c2d
Change strfind to return empty array for empty pattern for compatibility (bug #43649).

* NEWS: Announce change.
* strfind.cc (Fstrfind): Add note to docstring about change.  Return Matrix ()
if pattern is empty.

diff --git a/NEWS b/NEWS
--- a/NEWS
+++ b/NEWS
@@ -34,16 +34,27 @@ Summary of important user-visible change
 
  ** The trigonometric functions asin and acos return different phase values
     from previous versions of Octave when the input is outside the principal
     branch ([-1, 1]).  If the real portion of the input is greater than 1 then
     the limit from below is taken.  If the real portion is less than 1 then the
     limit from above is taken.  This criteria is consistent with several other
     numerical analysis software packages.
 
+ ** strfind changes when using empty pattern ("") for Matlab compatibility
+
+    strfind now returns an empty array when the pattern itself is empty.
+    In previous versions of Octave, strfind matched at every character
+    location when the pattern was empty.
+
+      NEW
+      strfind ("abc", "") => []
+      OLD
+      strfind ("abc", "") => [1, 2, 3, 4]
+
  ** Integer formats used in the printf family of functions now work for
     64-bit integers and are more compatible with Matlab when printing
     non-integer values.  Now instead of truncating, Octave will switch
     the effective format to '%g' in the following circumstances:
 
       * the value of an integer type (int8, uint32, etc.) value exceeds
         the maximum for the format specifier.  For '%d', the limit is
         intmax ('int64') and for '%u' it is intmax ('uint64').
diff --git a/libinterp/corefcn/strfind.cc b/libinterp/corefcn/strfind.cc
--- a/libinterp/corefcn/strfind.cc
+++ b/libinterp/corefcn/strfind.cc
@@ -152,17 +152,18 @@ DEFUN (strfind, args, ,
        "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {@var{idx} =} strfind (@var{str}, @var{pattern})\n\
 @deftypefnx {Built-in Function} {@var{idx} =} strfind (@var{cellstr}, @var{pattern})\n\
 @deftypefnx {Built-in Function} {@var{idx} =} strfind (@dots{}, \"overlaps\", @var{val})\n\
 Search for @var{pattern} in the string @var{str} and return the\n\
 starting index of every such occurrence in the vector @var{idx}.\n\
 \n\
 If there is no such occurrence, or if @var{pattern} is longer\n\
-than @var{str}, then @var{idx} is the empty array @code{[]}.\n\
+than @var{str}, or if @var{pattern} itself is empty, then @var{idx} is the\n\
+empty array @code{[]}.\n\
 The optional argument @qcode{\"overlaps\"} determines whether the pattern\n\
 can match at every position in @var{str} (true), or only for unique\n\
 occurrences of the complete pattern (false).  The default is true.\n\
 \n\
 If a cell array of strings @var{cellstr} is specified\n\
 then @var{idx} is a cell array of vectors, as specified above.\n\
 \n\
 Examples:\n\
@@ -215,35 +216,43 @@ strfind (@{\"abababa\", \"bebebe\", \"ab
       octave_value argpat = args(1);
       if (argpat.is_string ())
         {
           Array<char> needle = argpat.char_array_value ();
           OCTAVE_LOCAL_BUFFER (octave_idx_type, table, TABSIZE);
           qs_preprocess (needle, table);
 
           if (argstr.is_string ())
-            retval = octave_value (qs_search (needle,
-                                              argstr.char_array_value (),
-                                              table, overlaps),
-                                   true, true);
+            if (argpat.is_empty ())
+              // Return a null matrix for null pattern for MW compatibility
+              retval = Matrix ();
+            else
+              retval = octave_value (qs_search (needle,
+                                                argstr.char_array_value (),
+                                                table, overlaps),
+                                     true, true);
           else if (argstr.is_cell ())
             {
               const Cell argsc = argstr.cell_value ();
               Cell retc (argsc.dims ());
               octave_idx_type ns = argsc.numel ();
 
               for (octave_idx_type i = 0; i < ns; i++)
                 {
                   octave_value argse = argsc(i);
                   if (argse.is_string ())
-                    retc(i)
-                      = octave_value (qs_search (needle,
-                                                 argse.char_array_value (),
-                                                 table, overlaps),
-                                      true, true);
+                    {
+                      if (argpat.is_empty ())
+                        retc(i) = Matrix ();
+                      else
+                        retc(i) = octave_value (qs_search (needle,
+                                                     argse.char_array_value (),
+                                                     table, overlaps),
+                                                true, true);
+                    }
                   else
                     {
                       error ("strfind: each element of CELLSTR must be a string");
                       break;
                     }
                 }
 
               retval = retc;
@@ -262,21 +271,26 @@ strfind (@{\"abababa\", \"bebebe\", \"ab
   return retval;
 }
 
 /*
 %!assert (strfind ("abababa", "aba"), [1, 3, 5])
 %!assert (strfind ("abababa", "aba", "overlaps", false), [1, 5])
 %!assert (strfind ({"abababa", "bla", "bla"}, "a"), {[1, 3, 5, 7], 3, 3})
 %!assert (strfind ("Linux _is_ user-friendly. It just isn't ignorant-friendly or idiot-friendly.", "friendly"), [17, 50, 68])
+%!assert (strfind ("abc", ""), [])
+%!assert (strfind ("abc", {"", "b", ""}), {[], 2, []})
+%!assert (strfind ({"abc", "def"}, ""), {[], []})
 
 %!error strfind ()
 %!error strfind ("foo", "bar", 1)
+%!error <unknown option: foobar> strfind ("foo", 100, "foobar", 1)
+%!error <each element of CELLSTR must be a string> strfind ({"A", 1}, "foo")
+%!error <first argument must be a string> strfind (100, "foo")
 %!error <PATTERN must be a string> strfind ("foo", 100)
-%!error <first argument must be a string> strfind (100, "foo")
 */
 
 static Array<char>
 qs_replace (const Array<char>& str, const Array<char>& pat,
             const Array<char>& rep,
             const octave_idx_type *table,
             bool overlaps = true)
 {
