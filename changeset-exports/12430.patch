# HG changeset patch
# User Konstantinos Poulios <logari81@gmail.com>
# Date 1297271143 -3600
#      Wed Feb 09 18:05:43 2011 +0100
# Branch release-3-4-x
# Node ID 3ca18cf5141303b8b96ae80ff7d88eda30e09305
# Parent  54009686c6dc8760ccdd55aa74726ae09ac7c897
simplifications in position updating functions for axes labels and titles

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,18 @@
+2011-02-09  Konstantinos Poulios  <logari81@googlemail.com>
+
+	* graphics.cc (axes::properties::update_xlabel_position,
+	axes::properties::update_ylabel_position,
+	axes::properties::update_zlabel_position,
+	axes::properties::update_title_position): Use get_transform only
+	when it is required.
+	(text::properties::request_autopos): Remove redundant temporary
+	settting of autopos_tag to none.
+
 2011-02-08  John W. Eaton  <jwe@octave.org>
 
 	* pr-output.cc (INSTANTIATE_ABS): Omit inline keyword from
 	template instantiation.  From Orion Poplawski <orion@cora.nwra.com>.
 
 2011-02-08  John W. Eaton  <jwe@octave.org>
 
 	* oct-parse.yy (parse_fcn_file): Don't warn about coercing
diff --git a/src/graphics.cc b/src/graphics.cc
--- a/src/graphics.cc
+++ b/src/graphics.cc
@@ -4116,18 +4116,16 @@ axes::properties::update_ticklengths (vo
   update_ylabel_position ();
   update_zlabel_position ();
   update_title_position ();
 }
 
 void
 axes::properties::update_xlabel_position (void)
 {
-  graphics_xform xform = get_transform ();
-
   text::properties& xlabel_props = reinterpret_cast<text::properties&>
     (gh_manager::get_object (get_xlabel ()).get_properties ());
 
   if (! xlabel_props.get_string ().empty ())
     {
       xlabel_props.set_autopos_tag ("none");
 
       if (xlabel_props.horizontalalignmentmode_is ("auto"))
@@ -4145,16 +4143,18 @@ axes::properties::update_xlabel_position
             (xstate == AXE_VERT_DIR || x2Dtop ? "bottom" : "top");
 
           xlabel_props.set_verticalalignmentmode ("auto");
         }
 
       if (xlabel_props.positionmode_is ("auto")
           || xlabel_props.rotationmode_is ("auto"))
         {
+          graphics_xform xform = get_transform ();
+
           Matrix ext (1, 2, 0.0);
           ext = get_ticklabel_extents (get_xtick ().matrix_value (),
                                        get_xticklabel ().all_strings (),
                                        get_xlim ().matrix_value ());
 
           double wmax = ext(0), hmax = ext(1), angle = 0;
           ColumnVector p =
             graphics_xform::xform_vector ((xpTickN+xpTick)/2, ypTick, zpTick);
@@ -4200,18 +4200,16 @@ axes::properties::update_xlabel_position
 
       xlabel_props.set_autopos_tag ("xlabel");
     }
 }
 
 void
 axes::properties::update_ylabel_position (void)
 {
-  graphics_xform xform = get_transform ();
-
   text::properties& ylabel_props = reinterpret_cast<text::properties&>
     (gh_manager::get_object (get_ylabel ()).get_properties ());
 
   if (! ylabel_props.get_string ().empty ())
     {
       ylabel_props.set_autopos_tag ("none");
 
       if (ylabel_props.horizontalalignmentmode_is ("auto"))
@@ -4229,16 +4227,18 @@ axes::properties::update_ylabel_position
             (ystate == AXE_VERT_DIR && !y2Dright ? "bottom" : "top");
 
           ylabel_props.set_verticalalignmentmode ("auto");
         }
 
       if (ylabel_props.positionmode_is ("auto")
           || ylabel_props.rotationmode_is ("auto"))
         {
+          graphics_xform xform = get_transform ();
+
           Matrix ext (1, 2, 0.0);
           ext = get_ticklabel_extents (get_ytick ().matrix_value (),
                                        get_yticklabel ().all_strings (),
                                        get_ylim ().matrix_value ());
 
           double wmax = ext(0), hmax = ext(1), angle = 0;
           ColumnVector p =
             graphics_xform::xform_vector (xpTick, (ypTickN+ypTick)/2, zpTick);
@@ -4284,18 +4284,16 @@ axes::properties::update_ylabel_position
 
       ylabel_props.set_autopos_tag ("ylabel");
     }
 }
 
 void
 axes::properties::update_zlabel_position (void)
 {
-  graphics_xform xform = get_transform ();
-
   text::properties& zlabel_props = reinterpret_cast<text::properties&>
     (gh_manager::get_object (get_zlabel ()).get_properties ());
 
   if (! zlabel_props.get_string ().empty ())
     {
       zlabel_props.set_autopos_tag ("none");
 
       bool camAuto = cameraupvectormode_is ("auto");
@@ -4315,16 +4313,18 @@ axes::properties::update_zlabel_position
              ? "bottom" : ((zSign || camAuto) ? "bottom" : "top"));
 
           zlabel_props.set_verticalalignmentmode ("auto");
         }
 
       if (zlabel_props.positionmode_is ("auto")
           || zlabel_props.rotationmode_is ("auto"))
         {
+          graphics_xform xform = get_transform ();
+
           Matrix ext (1, 2, 0.0);
           ext = get_ticklabel_extents (get_ztick ().matrix_value (),
                                        get_zticklabel ().all_strings (),
                                        get_zlim ().matrix_value ());
 
           double wmax = ext(0), hmax = ext(1), angle = 0;
           ColumnVector p;
 
@@ -4391,27 +4391,27 @@ axes::properties::update_zlabel_position
 
       zlabel_props.set_autopos_tag ("zlabel");
     }
 }
 
 void
 axes::properties::update_title_position (void)
 {
-  graphics_xform xform = get_transform ();
-
   text::properties& title_props = reinterpret_cast<text::properties&>
     (gh_manager::get_object (get_title ()).get_properties ());
 
   if (! title_props.get_string ().empty ())
     {
       title_props.set_autopos_tag ("none");
 
       if (title_props.positionmode_is ("auto"))
         {
+          graphics_xform xform = get_transform ();
+
           // FIXME: bbox should be stored in axes::properties
           ColumnVector bbox(4);
           bbox(0) = octave_Inf;
           bbox(1) = octave_Inf;
           bbox(2) = -octave_Inf;
           bbox(3) = -octave_Inf;
           for (int i = 0; i <= 1; i++)
             for (int j = 0; j <= 1; j++)
@@ -5726,22 +5726,17 @@ text::properties::update_text_extent (vo
 #endif
 }
 
 void
 text::properties::request_autopos (void)
 {
   if (autopos_tag_is ("xlabel") || autopos_tag_is ("ylabel") ||
       autopos_tag_is ("zlabel") || autopos_tag_is ("title"))
-    {
-      const std::string text_type = get_autopos_tag ();
-      set_autopos_tag ("none");
-      update_autopos (text_type);
-      set_autopos_tag (text_type);
-    }
+    update_autopos (get_autopos_tag ());
 }
 
 void
 text::properties::update_units (void)
 {
   if (! units_is ("data"))
     {
       set_xliminclude ("off");
