# HG changeset patch
# User jwe
# Date 1069700195 0
#      Mon Nov 24 18:56:35 2003 +0000
# Node ID a9b22513b7a60440398714fbe6914526295fd482
# Parent  14ab7b05a572a4f5fff3c1a77dc0fc3b5b018684
[project @ 2003-11-24 18:56:35 by jwe]

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,27 @@
+2003-11-24  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* OPERATORS/op-fcn-handle.cc: New file.
+	* Makefile.in (OP_XSRC): Add it to the list.
+
+	* ov-fcn-handle.h, ov-fcn-handle.cc (octave_fcn_handle):
+	Now an array of function handle objects.
+
+	* ov.h, ov.cc (octave_value::octave_value (const fcn_handle_array&),
+	(octave_value::octave_value (octave_function *f, const std::string&)):
+	New constructors.
+	(octave_value::octave_value (const octave_fcn_handle&)): Delete.
+
+	* ov-base-mat.cc (octave_base_matrix<T>::print_as_scalar):
+	Check dims instead of rows and columns.
+
+	* ov.h (octave_value::is_function_handle): New function.
+	* ov-base.h (octave_base_value::is_function_handle): New function.
+
 2003-11-23  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* ov-bool-mat.h (octave_bool_matrix::array_value): Construct return
 	value directly from matrix data member, not matrix.matrix_value ().
 
 	* ov-re-mat.h (octave_matrix::index_vector): Construct idx_vector
 	from NDArray, not Matrix.
 
diff --git a/src/Makefile.in b/src/Makefile.in
--- a/src/Makefile.in
+++ b/src/Makefile.in
@@ -98,17 +98,17 @@ TI_SRC := $(addprefix TEMPLATE-INST/, $(
 OP_XSRC := op-b-b.cc op-bm-b.cc op-bm-bm.cc op-cell.cc \
 	op-chm.cc op-cm-cm.cc op-cm-cs.cc op-cm-m.cc \
 	op-cm-s.cc op-cs-cm.cc op-cs-cs.cc op-cs-m.cc \
 	op-cs-s.cc op-fil-b.cc op-fil-bm.cc op-fil-cm.cc \
 	op-fil-cs.cc op-fil-m.cc op-fil-s.cc op-fil-lis.cc \
 	op-fil-rec.cc op-fil-str.cc op-list.cc op-m-cm.cc \
 	op-m-cs.cc op-m-m.cc op-m-s.cc op-range.cc op-s-cm.cc \
 	op-s-cs.cc op-s-m.cc op-s-s.cc op-str-m.cc \
-	op-str-s.cc op-str-str.cc op-streamoff.cc
+	op-str-s.cc op-str-str.cc op-streamoff.cc op-fcn-handle.cc
 
 OP_SRC := $(addprefix OPERATORS/, $(OP_XSRC))
 
 OV_SRC := ov-base.cc ov-base-mat.cc ov-base-scalar.cc ov-ch-mat.cc \
 	ov-cs-list.cc ov-list.cc ov-re-mat.cc ov-cx-mat.cc \
 	ov-range.cc ov-scalar.cc ov-complex.cc ov-str-mat.cc \
 	ov-streamoff.cc ov-struct.cc ov-va-args.cc \
 	ov-colon.cc ov-bool-mat.cc ov-bool.cc ov-file.cc ov-cell.cc \
diff --git a/src/OPERATORS/op-fcn-handle.cc b/src/OPERATORS/op-fcn-handle.cc
new file mode 100644
--- /dev/null
+++ b/src/OPERATORS/op-fcn-handle.cc
@@ -0,0 +1,63 @@
+/*
+
+Copyright (C) 2003 John W. Eaton
+
+This file is part of Octave.
+
+Octave is free software; you can redistribute it and/or modify it
+under the terms of the GNU General Public License as published by the
+Free Software Foundation; either version 2, or (at your option) any
+later version.
+
+Octave is distributed in the hope that it will be useful, but WITHOUT
+ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+for more details.
+
+You should have received a copy of the GNU General Public License
+along with Octave; see the file COPYING.  If not, write to the Free
+Software Foundation, 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
+
+*/
+
+#ifdef HAVE_CONFIG_H
+#include <config.h>
+#endif
+
+#include "gripes.h"
+#include "ov.h"
+#include "ov-fcn-handle.h"
+#include "ov-typeinfo.h"
+#include "ops.h"
+
+// fcn_handle unary ops.
+
+DEFUNOP (transpose, fcn_handle)
+{
+  CAST_UNOP_ARG (const octave_fcn_handle&);
+
+  return octave_value (fcn_handle_array (v.fcn_handle_array_value().transpose ()));
+}
+
+DEFASSIGNOP (assign, fcn_handle, fcn_handle)
+{
+  CAST_BINOP_ARGS (octave_fcn_handle&, const octave_fcn_handle&);
+
+  v1.assign (idx, v2.fcn_handle_array_value ());
+  return octave_value ();
+}
+
+void
+install_fcn_handle_ops (void)
+{
+  INSTALL_UNOP (op_transpose, octave_fcn_handle, transpose);
+  INSTALL_UNOP (op_hermitian, octave_fcn_handle, transpose);
+
+  INSTALL_ASSIGNOP (op_asn_eq, octave_fcn_handle, octave_fcn_handle, assign);
+}
+
+/*
+;;; Local Variables: ***
+;;; mode: C++ ***
+;;; End: ***
+*/
diff --git a/src/ov-base-mat.cc b/src/ov-base-mat.cc
--- a/src/ov-base-mat.cc
+++ b/src/ov-base-mat.cc
@@ -200,20 +200,19 @@ octave_base_matrix<MT>::is_true (void) c
   
   return retval;
 }
 
 template <class MT>
 bool
 octave_base_matrix<MT>::print_as_scalar (void) const
 {
-  int nr = rows ();
-  int nc = columns ();
+  dim_vector dv = dims ();
 
-  return (nr == 1 && nc == 1 || (nr == 0 || nc == 0));
+  return (dv.all_ones () || dv.any_zero ());
 }
 
 template <class MT>
 void
 octave_base_matrix<MT>::print (std::ostream& os, bool pr_as_read_syntax) const
 {
   print_raw (os, pr_as_read_syntax);
   newline (os);
diff --git a/src/ov-base.h b/src/ov-base.h
--- a/src/ov-base.h
+++ b/src/ov-base.h
@@ -160,16 +160,18 @@ public:
 
   bool is_true (void) const { return false; }
 
   bool is_zero_by_zero (void) const
     { return (rows () == 0 && columns () == 0); }
 
   bool is_constant (void) const { return false; }
 
+  bool is_function_handle (void) const { return false; }
+
   bool is_function (void) const { return false; }
 
   bool is_builtin_function (void) const { return false; }
 
   bool is_dld_function (void) const { return false; }
 
   short int short_value (bool = false, bool = false) const;
 
@@ -225,19 +227,19 @@ public:
   octave_stream stream_value (void) const;
 
   int stream_number (void) const;
 
   std::streamoff streamoff_value (void) const;
 
   streamoff_array streamoff_array_value (void) const;
 
-  octave_function *function_value (bool silent);
+  octave_function *function_value (bool silent = false);
 
-  octave_fcn_handle *fcn_handle_value (bool silent);
+  octave_fcn_handle *fcn_handle_value (bool silent = false);
 
   octave_value_list list_value (void) const;
 
   octave_value convert_to_str_internal (bool pad, bool force) const;
 
   void convert_to_row_or_column_vector (void);
 
   bool print_as_scalar (void) const { return false; }
diff --git a/src/ov-builtin.h b/src/ov-builtin.h
--- a/src/ov-builtin.h
+++ b/src/ov-builtin.h
@@ -58,17 +58,17 @@ public:
       panic_impossible ();
       return octave_value ();
     }
 
   octave_value_list subsref (const std::string& type,
 			     const std::list<octave_value_list>& idx,
 			     int nargout);
 
-  octave_function *function_value (bool) { return this; }
+  octave_function *function_value (bool = false) { return this; }
 
   bool is_builtin_function (void) const { return true; }
 
   octave_value_list
   do_multi_index_op (int nargout, const octave_value_list& args);
 
 protected:
 
diff --git a/src/ov-fcn-handle.cc b/src/ov-fcn-handle.cc
--- a/src/ov-fcn-handle.cc
+++ b/src/ov-fcn-handle.cc
@@ -26,55 +26,156 @@ Software Foundation, 59 Temple Place - S
 
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
 #include <iostream>
 
 #include "defun.h"
+#include "error.h"
+#include "gripes.h"
 #include "oct-map.h"
 #include "ov-base.h"
+#include "ov-base-mat.h"
+#include "ov-base-mat.cc"
 #include "ov-fcn-handle.h"
 #include "pr-output.h"
 #include "variables.h"
 
+// Instantiate Arrays of fcn_handle_elt values.
+
+#include "Array.h"
+#include "Array.cc"
+
+INSTANTIATE_ARRAY_AND_ASSIGN (fcn_handle_elt);
+
+#include "Array2.h"
+
+template class Array2<fcn_handle_elt>;
+
+#include "ArrayN.h"
+#include "ArrayN.cc"
+
+template class ArrayN<fcn_handle_elt>;
+
+template class octave_base_matrix<fcn_handle_array>;
+
+boolNDArray
+fcn_handle_array::all (int) const
+{
+  error ("all: invalid call for function handle object");
+  return boolNDArray ();
+}
+
+boolNDArray
+fcn_handle_array::any (int) const
+{
+  error ("any: invalid call for function handle object");
+  return boolNDArray ();
+}
+
 DEFINE_OCTAVE_ALLOCATOR (octave_fcn_handle);
 
 DEFINE_OV_TYPEID_FUNCTIONS_AND_DATA (octave_fcn_handle,
 				     "function handle",
 				     "function handle");
 
+octave_function *
+octave_fcn_handle::function_value (bool)
+{
+  octave_function *retval = 0;
+
+  if (numel () > 0)
+    {
+      // XXX FIXME XXX -- is warn_fortran_indexing the right variable here?
+      if (Vwarn_fortran_indexing)
+	gripe_implicit_conversion ("function handle array",
+				   "scalar function handle");
+
+      fcn_handle_elt elt = matrix(0);
+
+      retval = elt.function_value ();
+    }
+  else
+    gripe_invalid_conversion ("function handle array",
+			      "scalar function handle");
+
+  return retval;
+}
+
+std::string
+octave_fcn_handle::name (void) const
+{
+  std::string retval;
+
+  if (numel () > 0)
+    {
+      // XXX FIXME XXX -- is warn_fortran_indexing the right variable here?
+      if (Vwarn_fortran_indexing)
+	gripe_implicit_conversion ("function handle array",
+				   "scalar function handle");
+
+      fcn_handle_elt elt = matrix(0);
+
+      retval = elt.name ();
+    }
+  else
+    gripe_invalid_conversion ("function handle array",
+			      "scalar function handle");
+
+  return retval;
+}
+
+ArrayN<std::string>
+fcn_handle_array::names (void) const
+{
+  ArrayN<std::string> retval (dims ());
+
+  int nel = length ();
+
+  for (int i = 0; i < nel; i++)
+    {
+      fcn_handle_elt elt = elem (i);
+
+      retval(i) = elt.name ();
+    }
+
+  return retval;
+}
+
 void
 octave_fcn_handle::print (std::ostream& os, bool pr_as_read_syntax) const
 {
   print_raw (os, pr_as_read_syntax);
   newline (os);
 }
 
 void
 octave_fcn_handle::print_raw (std::ostream& os, bool pr_as_read_syntax) const
 {
+  dim_vector dv = matrix.dims ();
+  os << "<" << dv.str () << " function handle object>";
+
+#if 0
   indent (os);
-  os << name ();
+  octave_print_internal (os, name_array (), pr_as_read_syntax,
+			 current_print_indent_level (), true);
+#endif
 }
 
 octave_value
 make_fcn_handle (const std::string& nm)
 {
   octave_value retval;
 
   octave_function *f = lookup_function (nm);
 
   if (f)
-    {
-      octave_fcn_handle fh (f, nm);
-
-      retval = octave_value (fh);
-    }
+    return fcn_handle_array (f, nm);
   else
     error ("error creating function handle \"@%s\"", nm.c_str ());
 
   return retval;
 }
 
 DEFUN (functions, args, ,
   "-*- texinfo -*-\n\
diff --git a/src/ov-fcn-handle.h b/src/ov-fcn-handle.h
--- a/src/ov-fcn-handle.h
+++ b/src/ov-fcn-handle.h
@@ -28,68 +28,152 @@ Software Foundation, 59 Temple Place - S
 #endif
 
 #include <iostream>
 #include <string>
 
 #include "oct-alloc.h"
 
 #include "ov-base.h"
+#include "ov-base-mat.h"
 #include "ov-fcn.h"
+#include "ov-typeinfo.h"
 #include "symtab.h"
 
 // Function handles.
 
-class
-octave_fcn_handle : public octave_base_value
+class fcn_handle_elt
 {
 public:
 
-  octave_fcn_handle (void) : fcn (0), nm ("[]") { }
+  fcn_handle_elt (void) : fcn (0), nm ("@[]") { }
 
-  octave_fcn_handle (octave_function *f, const std::string& n)
+  fcn_handle_elt (octave_function *f, const std::string& n)
     : fcn (f), nm (std::string ("@") + n) { }
 
-  octave_fcn_handle (const octave_fcn_handle& fh)
-    : fcn (fh.fcn), nm (fh.nm) { }
+  fcn_handle_elt (const fcn_handle_elt& fhe)
+    : fcn (fhe.fcn), nm (fhe.nm) { }
 
-  octave_fcn_handle& operator = (const octave_fcn_handle& fh)
+  fcn_handle_elt& operator = (const fcn_handle_elt& fhe)
     {
-      if (this != &fh)
+      if (this != &fhe)
 	{
-	  fcn = fh.fcn;
-	  nm  = fh.nm;
+	  fcn = fhe.fcn;
+	  nm  = fhe.nm;
 	}
 
       return *this;
     }
 
-  ~octave_fcn_handle (void) { }
-
-  bool is_defined (void) const { return fcn; }
-
-  octave_function *function_value (bool) { return fcn; }
+  ~fcn_handle_elt (void) { }
 
-  octave_fcn_handle *fcn_handle_value (bool) { return this; }
-
-  bool print_as_scalar (void) const { return true; }
-
-  void print (std::ostream& os, bool pr_as_read_syntax = false) const;
-
-  void print_raw (std::ostream& os, bool pr_as_read_syntax = false) const;
+  octave_function *function_value (void) { return fcn; }
 
   std::string name (void) const { return nm; }
 
 private:
 
   // The function we are handling.
   octave_function *fcn;
 
   // The name of the handle, including the "@".
   std::string nm;
+};
+
+class fcn_handle_array : public ArrayN<fcn_handle_elt>
+{
+public:
+
+  fcn_handle_array (void) : ArrayN<fcn_handle_elt> () { }
+
+  fcn_handle_array (const dim_vector& dv,
+		    const fcn_handle_elt& val = resize_fill_value ())
+    : ArrayN<fcn_handle_elt> (dv, val) { }
+
+  fcn_handle_array (octave_function *f, const std::string& nm)
+    : ArrayN<fcn_handle_elt> (dim_vector (1, 1), fcn_handle_elt (f, nm)) { }
+
+  fcn_handle_array (const ArrayN<fcn_handle_elt>& fa)
+    : ArrayN<fcn_handle_elt> (fa) { }
+
+  fcn_handle_array (const fcn_handle_array& fa)
+    : ArrayN<fcn_handle_elt> (fa) { }
+
+  ~fcn_handle_array (void) { }
+
+  fcn_handle_array& operator = (const fcn_handle_array& fa)
+    {
+      if (this != &fa)
+	ArrayN<fcn_handle_elt>::operator = (fa);
+
+      return *this;
+    }
+
+  fcn_handle_array squeeze (void) const
+    { return ArrayN<fcn_handle_elt>::squeeze (); }
+
+  boolNDArray all (int dim = -1) const;
+  boolNDArray any (int dim = -1) const;
+
+  ArrayN<std::string> names (void) const;
+
+  static int compute_index (Array<int>& ra_idx,
+			    const dim_vector& dimensions);
+
+  static fcn_handle_elt resize_fill_value (void)
+    {
+      static fcn_handle_elt nil_handle = fcn_handle_elt ();
+      return nil_handle;
+    }
+};
+
+class
+octave_fcn_handle : public octave_base_matrix<fcn_handle_array>
+{
+public:
+
+  octave_fcn_handle (void)
+    : octave_base_matrix<fcn_handle_array> () { }
+
+  octave_fcn_handle (octave_function *f, const std::string& n)
+    : octave_base_matrix<fcn_handle_array>
+        (fcn_handle_array (dim_vector (1, 1), fcn_handle_elt (f, n))) { }
+
+  octave_fcn_handle (const fcn_handle_array& fha)
+    : octave_base_matrix<fcn_handle_array> (fha) { }
+
+  octave_fcn_handle (const octave_fcn_handle& fh)
+    : octave_base_matrix<fcn_handle_array> (fh) { }
+
+  ~octave_fcn_handle (void) { }
+
+  octave_value *clone (void) const { return new octave_fcn_handle (*this); }
+  octave_value *empty_clone (void) const { return new octave_fcn_handle (); }
+
+  bool is_defined (void) const { return true; }
+
+  bool is_function_handle (void) const { return true; }
+
+  octave_function *function_value (bool = false);
+
+  std::string name (void) const;
+
+  octave_fcn_handle *fcn_handle_value (bool = false) { return this; }
+
+  fcn_handle_array fcn_handle_array_value (void) const { return matrix; }
+
+  ArrayN<std::string> name_array (void) const { return matrix.names (); }
+
+  bool print_as_scalar (void) const { return true; }
+
+  void print (std::ostream& os, bool pr_as_read_syntax = false) const;
+
+  void print_raw (std::ostream& os, bool pr_as_read_syntax = false) const;
+
+private:
 
   DECLARE_OCTAVE_ALLOCATOR
 
   DECLARE_OV_TYPEID_FUNCTIONS_AND_DATA
 };
 
 extern octave_value make_fcn_handle (const std::string& nm);
 
diff --git a/src/ov-mapper.h b/src/ov-mapper.h
--- a/src/ov-mapper.h
+++ b/src/ov-mapper.h
@@ -61,17 +61,17 @@ public:
     : octave_function (nm, ds), ch_map_fcn (ch),
       d_b_map_fcn (db), c_b_map_fcn (cb),
       d_d_map_fcn (dd), d_c_map_fcn (dc), c_c_map_fcn (cc),
       lower_limit (ll), upper_limit (ul), ch_map_flag (cmf),
       can_ret_cmplx_for_real (crcfr) { }
 
   ~octave_mapper (void) { }
 
-  octave_function *function_value (bool) { return this; }
+  octave_function *function_value (bool = false) { return this; }
 
   octave_value subsref (const std::string& type,
 			const std::list<octave_value_list>& idx)
     {
       panic_impossible ();
       return octave_value ();
     }
 
diff --git a/src/ov-usr-fcn.h b/src/ov-usr-fcn.h
--- a/src/ov-usr-fcn.h
+++ b/src/ov-usr-fcn.h
@@ -56,17 +56,17 @@ public:
 
   octave_user_function (tree_parameter_list *pl = 0,
 			tree_parameter_list *rl = 0,
 			tree_statement_list *cl = 0,
 			symbol_table *st = 0);
 
   ~octave_user_function (void);
 
-  octave_function *function_value (bool) { return this; }
+  octave_function *function_value (bool = false) { return this; }
 
   octave_user_function *define_param_list (tree_parameter_list *t);
 
   octave_user_function *define_ret_list (tree_parameter_list *t);
 
   void stash_fcn_file_name (const std::string& nm);
 
   void stash_leading_comment (octave_comment_list *lc) { lead_comm = lc; }
diff --git a/src/ov.cc b/src/ov.cc
--- a/src/ov.cc
+++ b/src/ov.cc
@@ -601,18 +601,24 @@ octave_value::octave_value (const stream
 }
 
 octave_value::octave_value (octave_function *f)
   : rep (f)
 {
   rep->count = 1;
 }
 
-octave_value::octave_value (const octave_fcn_handle& fh)
-  : rep (new octave_fcn_handle (fh))
+octave_value::octave_value (const fcn_handle_array& fha)
+  : rep (new octave_fcn_handle (fha))
+{
+  rep->count = 1;
+}
+
+octave_value::octave_value (octave_function *f, const std::string& nm)
+  : rep (new octave_fcn_handle (f, nm))
 {
   rep->count = 1;
 }
 
 octave_value::octave_value (const octave_value_list& l, bool is_csl)
   : rep (0)
 {
   if (is_csl)
diff --git a/src/ov.h b/src/ov.h
--- a/src/ov.h
+++ b/src/ov.h
@@ -37,16 +37,17 @@ Software Foundation, 59 Temple Place - S
 #include "Range.h"
 #include "idx-vector.h"
 #include "mx-base.h"
 #include "oct-alloc.h"
 #include "oct-time.h"
 #include "str-vec.h"
 
 class Cell;
+class fcn_handle_array;
 class streamoff_array;
 class Octave_map;
 class octave_stream;
 class octave_streamoff;
 class octave_function;
 class octave_fcn_handle;
 class octave_value_list;
 class octave_lvalue;
@@ -208,17 +209,18 @@ public:
   octave_value (const charMatrix& chm, bool is_string = false);
   octave_value (const charNDArray& chnda, bool is_string = false);
   octave_value (double base, double limit, double inc);
   octave_value (const Range& r);
   octave_value (const Octave_map& m);
   octave_value (const octave_stream& s, int n);
   octave_value (const streamoff_array& off);
   octave_value (octave_function *f);
-  octave_value (const octave_fcn_handle& fh);
+  octave_value (const fcn_handle_array& fha);
+  octave_value (octave_function *f, const std::string &nm); // function handle
   octave_value (const octave_value_list& m, bool is_cs_list = false);
   octave_value (octave_value::magic_colon);
   octave_value (octave_value::all_va_args);
 
   octave_value (octave_value *new_rep, int count = 1);
 
   // Copy constructor.
 
@@ -447,16 +449,19 @@ public:
   // Are the dimensions of this constant zero by zero?
 
   virtual bool is_zero_by_zero (void) const
     { return rep->is_zero_by_zero (); }
 
   virtual bool is_constant (void) const
     { return rep->is_constant (); }
 
+  virtual bool is_function_handle (void) const
+    { return rep->is_function_handle (); }
+
   virtual bool is_function (void) const
     { return rep->is_function (); }
 
   virtual bool is_builtin_function (void) const
     { return rep->is_builtin_function (); }
 
   virtual bool is_dld_function (void) const
     { return rep->is_dld_function (); }
