# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1289423347 18000
#      Wed Nov 10 16:09:07 2010 -0500
# Node ID 8d8e10058df65c39aa9d090c6271ac1f85845b40
# Parent  e0db3f9e926799b4f7adf8611756902d8f650273
move builtin function from dispatch.cc to oct-parse.yy

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,12 @@
+2010-11-10  John W. Eaton  <jwe@octave.org>
+
+	* oct-parse.yy (Fbuiltin): Move here from DLD-FUNCTIONS/dispatch.cc.
+
 2010-11-10  Kai Habel  <kai.habel@gmx.de>
 
 	* fltk-backend.cc (update_accelerator), (update_callback), (update_enable),
 	(update_foregroundcolor), (update_visible): Check if find_item
 	was succesful. (update_seperator): Make sure we don't write 
 	beyond limits of menubar structure.
 
 2010-11-10  John W. Eaton  <jwe@octave.org>
diff --git a/src/DLD-FUNCTIONS/dispatch.cc b/src/DLD-FUNCTIONS/dispatch.cc
--- a/src/DLD-FUNCTIONS/dispatch.cc
+++ b/src/DLD-FUNCTIONS/dispatch.cc
@@ -35,51 +35,16 @@ along with Octave; see the file COPYING.
 #include "ov.h"
 #include "ov-fcn.h"
 #include "ov-typeinfo.h"
 #include "pager.h"
 #include "parse.h"
 #include "symtab.h"
 #include "variables.h"
 
-DEFUN_DLD (builtin, args, nargout,
-  "-*- texinfo -*-\n\
-@deftypefn {Loadable Function} {[@dots{}]} builtin (@var{f}, @dots{})\n\
-Call the base function @var{f} even if @var{f} is overloaded to\n\
-some other function for the given type signature.\n\
-@seealso{dispatch}\n\
-@end deftypefn")
-{
-  octave_value_list retval; 
-
-  int nargin = args.length ();
-
-  if (nargin > 0)
-    {
-      const std::string name (args(0).string_value ());
- 
-      if (! error_state)
-        {
-          octave_value fcn = symbol_table::builtin_find (name);
-
-          if (fcn.is_defined ())
-            retval = feval (fcn.function_value (), args.splice (0, 1),
-                            nargout);
-          else
-            error ("builtin: lookup for symbol `%s' failed", name.c_str ());
-        }
-      else
-        error ("builtin: expecting function name as first argument");
-    }
-  else
-    print_usage ();
-
-  return retval;
-}
-
 DEFUN_DLD (dispatch, args, nargout,
   "-*- texinfo -*-\n\
 @deftypefn {Loadable Function} {} dispatch (@var{f}, @var{r}, @var{type})\n\
 \n\
 Replace the function @var{f} with a dispatch so that function @var{r}\n\
 is called when @var{f} is called with the first argument of the named\n\
 @var{type}.  If the type is @var{any} then call @var{r} if no other type\n\
 matches.  The original function @var{f} is accessible using\n\
diff --git a/src/oct-parse.yy b/src/oct-parse.yy
--- a/src/oct-parse.yy
+++ b/src/oct-parse.yy
@@ -4226,16 +4226,51 @@ by name, and use @code{feval} to call th
   if (nargin > 0)
     retval = feval (args, nargout);
   else
     print_usage ();
 
   return retval;
 }
 
+DEFUN (builtin, args, nargout,
+  "-*- texinfo -*-\n\
+@deftypefn {Loadable Function} {[@dots{}]} builtin (@var{f}, @dots{})\n\
+Call the base function @var{f} even if @var{f} is overloaded to\n\
+some other function for the given type signature.\n\
+@seealso{dispatch}\n\
+@end deftypefn")
+{
+  octave_value_list retval; 
+
+  int nargin = args.length ();
+
+  if (nargin > 0)
+    {
+      const std::string name (args(0).string_value ());
+ 
+      if (! error_state)
+        {
+          octave_value fcn = symbol_table::builtin_find (name);
+
+          if (fcn.is_defined ())
+            retval = feval (fcn.function_value (), args.splice (0, 1),
+                            nargout);
+          else
+            error ("builtin: lookup for symbol `%s' failed", name.c_str ());
+        }
+      else
+        error ("builtin: expecting function name as first argument");
+    }
+  else
+    print_usage ();
+
+  return retval;
+}
+
 octave_value_list
 eval_string (const std::string& s, bool silent, int& parse_status, int nargout)
 {
   octave_value_list retval;
 
   unwind_protect frame;
 
   frame.protect_var (input_line_number);
