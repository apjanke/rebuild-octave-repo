# HG changeset patch
# User jwe
# Date 863198358 0
#      Fri May 09 17:19:18 1997 +0000
# Node ID c41e4dca98b95d5eac44935134c5ee7303bcf67e
# Parent  dfffbf305468f6e2719c6314d4e8cd5f3cda01fb
[project @ 1997-05-09 17:17:43 by jwe]

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -16,25 +16,28 @@ Fri May  9 07:40:59 1997  John W. Eaton 
 	* symtab.h, defun-int.h: Don't include variables.h.
 
 	* symtab.h (symbol_record::sv_function): Move typedef here.
 	* variables.h: From here.
 
 	* oct-var-ref.h, oct-var-ref.cc: New files for
 	octave_variable_reference class, extracted from variables.h and
 	variables.cc
+	* Makefile.in: Add them to the appropriate lists.
 
 	* oct-obj.h (octave_value_list::empty): New function.
 
 	* variables.h (class octave_variable_reference):  Rewrite to work
 	as a proxy class to store a pointer to octave_value and,
 	optionally, the change function to call and the name of the
 	structure element we are referencing.  Handle assignment,
 	increment, decrement, and value operations.
 
+Thu May  8 23:40:59 1997  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
 	* ov-re-mat.h, ov-re-mat.cc (struct_elt_ref, struct_elt_val,
 	assign_struct_elt): Provide functions for looking up and setting
 	matrix dimensions.
 
 	* symtab.cc (symbol_record::define): Don't call sv_fcn here.
 	Don't save and restore value here.
 	(symbol_record::define_builtin_var): Do call sv_fcn here.
 	(symbol_record::variable_reference): Don't make value unique here.
diff --git a/src/pt-cmd.cc b/src/pt-cmd.cc
--- a/src/pt-cmd.cc
+++ b/src/pt-cmd.cc
@@ -38,18 +38,19 @@ int continuing = 0;
 
 // Nonzero means we're returning from a function.  Global because it
 // is also needed in tree-expr.cc.
 int returning = 0;
 
 #include "error.h"
 #include "gripes.h"
 #include "oct-map.h"
+#include "oct-var-ref.h"
+#include "pt-cmd.h"
 #include "symtab.h"
-#include "pt-cmd.h"
 #include "ov.h"
 #include "pt-exp.h"
 #include "pt-id.h"
 #include "pt-indir.h"
 #include "pt-misc.h"
 #include "pt-mvr.h"
 #include "pt-walk.h"
 #include "unwind-prot.h"
diff --git a/src/pt-cmd.h b/src/pt-cmd.h
--- a/src/pt-cmd.h
+++ b/src/pt-cmd.h
@@ -35,17 +35,16 @@ class tree_statement_list;
 class tree_decl_init_list;
 class tree_if_command_list;
 class tree_switch_case_list;
 class tree_expression;
 class tree_index_expression;
 class tree_identifier;
 class tree_return_list;
 class octave_value;
-class symbol_record;
 
 class tree_command;
 class tree_decl_command;
 class tree_global_command;
 class tree_static_command;
 class tree_while_command;
 class tree_for_command;
 class tree_if_command;
diff --git a/src/pt-id.cc b/src/pt-id.cc
--- a/src/pt-id.cc
+++ b/src/pt-id.cc
@@ -34,16 +34,17 @@ Software Foundation, 59 Temple Place - S
 #include "oct-sym.h"
 #include "oct-var-ref.h"
 #include "pager.h"
 #include "pt-const.h"
 #include "pt-id.h"
 #include "pt-walk.h"
 #include "symtab.h"
 #include "utils.h"
+#include "variables.h"
 
 // Symbols from the symbol table.
 
 string
 tree_identifier::name (void) const
 {
   string retval;
   if (sym)
diff --git a/src/pt-indir.cc b/src/pt-indir.cc
--- a/src/pt-indir.cc
+++ b/src/pt-indir.cc
@@ -36,16 +36,17 @@ Software Foundation, 59 Temple Place - S
 #include "oct-var-ref.h"
 #include "pager.h"
 #include "pt-const.h"
 #include "pt-id.h"
 #include "pt-indir.h"
 #include "pt-walk.h"
 #include "symtab.h"
 #include "utils.h"
+#include "variables.h"
 
 // Indirect references to values (structure elements).
 
 tree_indirect_ref::~tree_indirect_ref (void)
 {
   if (! preserve_ident)
     delete id;
 
diff --git a/src/pt-misc.cc b/src/pt-misc.cc
--- a/src/pt-misc.cc
+++ b/src/pt-misc.cc
@@ -40,16 +40,17 @@ Software Foundation, 59 Temple Place - S
 
 #include "str-vec.h"
 
 #include "defun.h"
 #include "error.h"
 #include "input.h"
 #include "oct-obj.h"
 #include "oct-usr-fcn.h"
+#include "oct-var-ref.h"
 #include "ov.h"
 #include "pager.h"
 #include "pt-cmd.h"
 #include "pt-const.h"
 #include "pt-exp.h"
 #include "pt-id.h"
 #include "pt-indir.h"
 #include "pt-misc.h"
diff --git a/src/symtab.h b/src/symtab.h
--- a/src/symtab.h
+++ b/src/symtab.h
@@ -34,16 +34,18 @@ Software Foundation, 59 Temple Place - S
 #include "str-vec.h"
 
 // Must be multiple of 2.
 #define HASH_TABLE_SIZE 1024
 #define HASH_MASK (HASH_TABLE_SIZE - 1)
 
 class octave_symbol;
 class octave_function;
+class octave_value;
+class octave_variable_reference;
 
 class string_vector;
 
 class symbol_def;
 class symbol_record;
 class symbol_record_info;
 class symbol_table;
 
diff --git a/src/token.cc b/src/token.cc
--- a/src/token.cc
+++ b/src/token.cc
@@ -26,16 +26,17 @@ Software Foundation, 59 Temple Place - S
 
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
 #include <cassert>
 
 #include "error.h"
+#include "ov.h"
 #include "symtab.h"
 #include "token.h"
 #include "utils.h"
 
 token::token (int l, int c)
 {
   line_num = l;
   column_num = c;
diff --git a/src/variables.cc b/src/variables.cc
--- a/src/variables.cc
+++ b/src/variables.cc
@@ -1531,17 +1531,17 @@ install_builtin_function (octave_builtin
   sym_rec->make_eternal ();
   sym_rec->protect ();
 }
 
 void
 install_builtin_variable (const string& name, const octave_value& value,
 			  bool install_as_function, bool protect,
 			  bool eternal, symbol_record::sv_function sv_fcn,
-			  const string& help_string);
+			  const string& help_string)
 {
   if (install_as_function)
     install_builtin_variable_as_function (name, value, protect,
 					  eternal, help_string);
   else
     bind_builtin_variable (name, value, protect, eternal,
 			   sv_fcn, help_string);
 }
