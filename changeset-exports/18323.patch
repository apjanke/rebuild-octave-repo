# HG changeset patch
# User LYH <lyh.kernel@gmail.com>
# Date 1389214723 -3600
#      Wed Jan 08 21:58:43 2014 +0100
# Node ID 0122fad2743585ac98c4d6015ffc5a7fc8c42d43
# Parent  8b22a9215ec246a4d17a2cd7b3a034d4b16ceffd
jit compiler: Fix uminus op support with scalar type

* libinterp/corefcn/jit-typeinfo.cc: Add missing overload for uminus support.

diff --git a/libinterp/corefcn/jit-typeinfo.cc b/libinterp/corefcn/jit-typeinfo.cc
--- a/libinterp/corefcn/jit-typeinfo.cc
+++ b/libinterp/corefcn/jit-typeinfo.cc
@@ -1242,16 +1242,18 @@ jit_typeinfo::jit_typeinfo (llvm::Module
   // destroy
   destroy_fn = release_fn;
   destroy_fn.stash_name ("destroy");
   destroy_fn.add_overload (create_identity(scalar));
   destroy_fn.add_overload (create_identity(boolean));
   destroy_fn.add_overload (create_identity(index));
   destroy_fn.add_overload (create_identity(complex));
 
+  // -------------------- scalar related operations --------------------
+
   // now for binary scalar operations
   add_binary_op (scalar, octave_value::op_add, llvm::Instruction::FAdd);
   add_binary_op (scalar, octave_value::op_sub, llvm::Instruction::FSub);
   add_binary_op (scalar, octave_value::op_mul, llvm::Instruction::FMul);
   add_binary_op (scalar, octave_value::op_el_mul, llvm::Instruction::FMul);
 
   add_binary_fcmp (scalar, octave_value::op_lt, llvm::CmpInst::FCMP_ULT);
   add_binary_fcmp (scalar, octave_value::op_le, llvm::CmpInst::FCMP_ULE);
@@ -1330,16 +1332,17 @@ jit_typeinfo::jit_typeinfo (llvm::Module
   body = fn.new_block ();
   builder.SetInsertPoint (body);
   {
     llvm::Value *mone = llvm::ConstantFP::get (scalar_t, -1);
     llvm::Value *val = fn.argument (builder, 0);
     val = builder.CreateFMul (val, mone);
     fn.do_return (builder, val);
   }
+  unary_ops[octave_value::op_uminus].add_overload (fn);
 
   fn = create_identity (scalar);
   unary_ops[octave_value::op_uplus].add_overload (fn);
   unary_ops[octave_value::op_transpose].add_overload (fn);
   unary_ops[octave_value::op_hermitian].add_overload (fn);
 
   // now for binary complex operations
   fn = create_internal ("octave_jit_+_complex_complex", complex, complex,
