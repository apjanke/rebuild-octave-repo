# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1260997898 -3600
#      Wed Dec 16 22:11:38 2009 +0100
# Node ID b22a2f4b34aadfa6fe0f40e9e44e668378d237e7
# Parent  a5a05b2ebb9df9d3999ab8dd73363f894570db74
support min/max with logical arrays

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,14 @@
+2009-12-16  Jaroslav Hajek  <highegg@gmail.com>
+
+	* DLD-FUNCTIONS/max.cc (do_minmax_red_op<boolNDArray>): New
+	specialization.
+	(do_minmax_body): Handle btyp_bool.
+
 2009-12-16  Jaroslav Hajek  <highegg@gmail.com>
 
 	* symtab.cc (symbol_table::cleanup): Call clear_variables rather than
 	clear_all on the top and global scopes.
 
 2009-12-16  John W. Eaton  <jwe@octave.org>
 
 	* DLD-FUNCTIONS/fltk_backend.cc (F__init_fltk__):
diff --git a/src/DLD-FUNCTIONS/max.cc b/src/DLD-FUNCTIONS/max.cc
--- a/src/DLD-FUNCTIONS/max.cc
+++ b/src/DLD-FUNCTIONS/max.cc
@@ -70,16 +70,47 @@ do_minmax_red_op (const octave_value& ar
         retval(0) = array.min (dim);
       else
         retval(0) = array.max (dim);
     }
 
   return retval;
 }
 
+// Specialization for bool arrays.
+template <>
+octave_value_list
+do_minmax_red_op<boolNDArray> (const octave_value& arg,
+                               int nargout, int dim, bool ismin)
+{
+  octave_value_list retval;
+
+  if (nargout <= 1)
+    {
+      // This case can be handled using any/all.
+      boolNDArray array = arg.bool_array_value ();
+
+      if (array.is_empty ())
+        retval(0) = array;
+      else if (ismin)
+        retval(0) = array.all (dim);
+      else
+        retval(0) = array.any (dim);
+    }
+  else
+    {
+      // any/all don't have indexed versions, so do it via a conversion.
+      retval = do_minmax_red_op<int8NDArray> (arg, nargout, dim, ismin);
+      if (! error_state)
+        retval(0) = retval(0).bool_array_value ();
+    }
+
+  return retval;
+}
+
 template <class ArrayType>
 static octave_value
 do_minmax_bin_op (const octave_value& argx, const octave_value& argy,
                   bool ismin)
 {
   typedef typename ArrayType::element_type ScalarType;
 
   octave_value retval;
@@ -205,16 +236,19 @@ do_minmax_body (const octave_value_list&
         MAKE_INT_BRANCH (int16);
         MAKE_INT_BRANCH (int32);
         MAKE_INT_BRANCH (int64);
         MAKE_INT_BRANCH (uint8);
         MAKE_INT_BRANCH (uint16);
         MAKE_INT_BRANCH (uint32);
         MAKE_INT_BRANCH (uint64);
 #undef MAKE_INT_BRANCH
+        case btyp_bool:
+          retval = do_minmax_red_op<boolNDArray> (arg, nargout, dim, ismin);
+          break;
         default:
           gripe_wrong_type_arg (func, arg);
       }
     }
   else if (nargin == 2)
     {
       octave_value argx = args(0), argy = args(1);
       builtin_type_t xtyp = argx.builtin_type (), ytyp = argy.builtin_type ();
