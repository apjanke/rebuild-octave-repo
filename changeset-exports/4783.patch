# HG changeset patch
# User jwe
# Date 1077038197 0
#      Tue Feb 17 17:16:37 2004 +0000
# Node ID 55975a3073be116947be0136c1bad36c1aa7b30e
# Parent  3dfdf6f36854c3713e5f33796f1d32a849c5ec66
[project @ 2004-02-17 17:16:37 by jwe]

diff --git a/liboctave/oct-fftw.cc b/liboctave/oct-fftw.cc
--- a/liboctave/oct-fftw.cc
+++ b/liboctave/oct-fftw.cc
@@ -104,22 +104,22 @@ fftw_plan
 octave_fftw_planner::create_plan (int dir, const int rank,
 				  const dim_vector dims, int howmany,
 				  int stride, int dist, 
 				  const Complex *in, Complex *out)
 {
   int which = (dir == FFTW_FORWARD) ? 0 : 1;
   fftw_plan *cur_plan_p = &plan[which];
   bool create_new_plan = false;
-  char in_align = (X_CAST (int, in)) & 0xF;
-  char out_align = (X_CAST (int, out)) & 0xF;
+  char in_align = (reinterpret_cast<long> (in)) & 0xF;
+  char out_align = (reinterpret_cast<long> (out)) & 0xF;
 
-  if (plan[which] == 0 || d[which] != dist || s[which] != stride ||
-      r[which] != rank || h[which] != howmany ||
-      ialign[which] != in_align || oalign[which] != out_align)
+  if (plan[which] == 0 || d[which] != dist || s[which] != stride
+      || r[which] != rank || h[which] != howmany
+      || ialign[which] != in_align || oalign[which] != out_align)
     create_new_plan = true;
   else
     // We still might not have the same shape of array
     for (int i = 0; i < rank; i++)
       if (dims(i) != n[which](i))
 	{
 	  create_new_plan = true;
 	  break;
@@ -158,22 +158,21 @@ octave_fftw_planner::create_plan (int di
  
 fftw_plan
 octave_fftw_planner::create_plan (const int rank, const dim_vector dims, 
 				  int howmany, int stride, int dist, 
 				  const double *in, Complex *out)
 {
   fftw_plan *cur_plan_p = &rplan;
   bool create_new_plan = false;
-  char in_align = (X_CAST (int, in)) & 0xF;
-  char out_align = (X_CAST (int, out)) & 0xF;
+  char in_align = (reinterpret_cast<long> (in)) & 0xF;
+  char out_align = (reinterpret_cast<long> (out)) & 0xF;
 
-  if (rplan == 0 || rd != dist || rs != stride ||
-      rr != rank || rh != howmany ||
-      rialign != in_align || roalign != out_align)
+  if (rplan == 0 || rd != dist || rs != stride || rr != rank
+      || rh != howmany || rialign != in_align || roalign != out_align)
     create_new_plan = true;
   else
     // We still might not have the same shape of array
     for (int i = 0; i < rank; i++)
       if (dims(i) != rn(i))
 	{
 	  create_new_plan = true;
 	  break;
diff --git a/src/utils.cc b/src/utils.cc
--- a/src/utils.cc
+++ b/src/utils.cc
@@ -805,17 +805,17 @@ get_dimensions (const octave_value& a, c
           Array<double> v = a.vector_value ();
 
           if (error_state)
             return;
 
           int n = v.length ();
           dim.resize (n);
           for (int i = 0; i < n; i++)
-            dim(i) = fix (v(i));
+            dim(i) = static_cast<int> (fix (v(i)));
         }
       else
         warning ("%s (A): use %s (size (A)) instead", warn_for, warn_for);
     }
 
   check_dimensions (dim, warn_for); // May set error_state.
 }
 
@@ -835,18 +835,18 @@ get_dimensions (const octave_value& a, c
 
       if ((nr == 1 && nc == 2) || (nr == 2 && nc == 1))
 	{
 	  Array<double> v = a.vector_value ();
 
 	  if (error_state)
 	    return;
 
-	  nr = fix (v (0));
-	  nc = fix (v (1));
+	  nr = static_cast<int> (fix (v (0)));
+	  nc = static_cast<int> (fix (v (1)));
 	}
       else
 	warning ("%s (A): use %s (size (A)) instead", warn_for, warn_for);
     }
 
   check_dimensions (nr, nc, warn_for); // May set error_state.
 }
 
@@ -1067,20 +1067,20 @@ octave_snprintf (const char *fmt, ...)
 void
 octave_sleep (double seconds)
 {
   if (seconds > 0)
     {
       double t;
 
       unsigned int usec
-	= static_cast <unsigned int> (modf (seconds, &t) * 1000000);
+	= static_cast<unsigned int> (modf (seconds, &t) * 1000000);
 
       unsigned int sec
-	= (t > UINT_MAX) ? UINT_MAX : static_cast <unsigned int> (t);
+	= (t > UINT_MAX) ? UINT_MAX : static_cast<unsigned int> (t);
 
       octave_sleep (sec);
       octave_usleep (usec);
     }
 }
 
 static int
 warn_neg_dim_as_zero (void)
