# HG changeset patch
# User CarnÃ« Draug <carandraug@octave.org>
# Date 1412188565 -3600
#      Wed Oct 01 19:36:05 2014 +0100
# Node ID 3a6fd52e1458d4f6876bd7a0b56720c1a04fc3e3
# Parent  931cc13a6f3b8cd3a13739a35165c767fac873d4
liboctave/array/dim-vector.h: convert comments to doxygen

diff --git a/liboctave/array/dim-vector.h b/liboctave/array/dim-vector.h
--- a/liboctave/array/dim-vector.h
+++ b/liboctave/array/dim-vector.h
@@ -57,46 +57,46 @@ dim_vector
 private:
 
   octave_idx_type *rep;
 
   octave_idx_type& ndims (void) const { return rep[-1]; }
 
   octave_idx_type& count (void) const { return rep[-2]; }
 
-  // Construct a new rep with count = 1 and ndims given.
+  //! Construct a new rep with count = 1 and ndims given.
 
   static octave_idx_type *newrep (int ndims)
   {
     octave_idx_type *r = new octave_idx_type [ndims + 2];
 
     *r++ = 1;
     *r++ = ndims;
 
     return r;
   }
 
-  // Clone this->rep.
+  //! Clone this->rep.
 
   octave_idx_type *clonerep (void)
   {
     int l = ndims ();
 
     octave_idx_type *r = new octave_idx_type [l + 2];
 
     *r++ = 1;
     *r++ = l;
 
     for (int i = 0; i < l; i++)
       r[i] = rep[i];
 
     return r;
   }
 
-  // Clone and resize this->rep to length n, filling by given value.
+  //! Clone and resize this->rep to length n, filling by given value.
 
   octave_idx_type *resizerep (int n, octave_idx_type fill_value)
   {
     int l = ndims ();
 
     if (n < 2)
       n = 2;
 
@@ -112,17 +112,17 @@ private:
     for (j = 0; j < l; j++)
       r[j] = rep[j];
     for (; j < n; j++)
       r[j] = fill_value;
 
     return r;
   }
 
-  // Free the rep.
+  //! Free the rep.
 
   void freerep (void)
   {
     assert (count () == 0);
     delete [] (rep - 2);
   }
 
   void make_unique (void)
@@ -332,39 +332,44 @@ public:
 
   int num_ones (void) const;
 
   bool all_ones (void) const
   {
     return (num_ones () == length ());
   }
 
-  // Return the number of elements that a matrix with this dimension
-  // vector would have, NOT the number of dimensions (elements in the
-  // dimension vector).
+  //! Number of elements that a matrix with this dimensions would have.
+   /*!
+      Return the number of elements that a matrix with this dimension
+      vector would have, NOT the number of dimensions (elements in the
+      dimension vector).
+  */
 
   octave_idx_type numel (int n = 0) const
   {
     int n_dims = length ();
 
     octave_idx_type retval = 1;
 
     for (int i = n; i < n_dims; i++)
       retval *= elem (i);
 
     return retval;
   }
 
-  // The following function will throw a std::bad_alloc ()
-  // exception if the requested size is larger than can be indexed by
-  // octave_idx_type. This may be smaller than the actual amount of
-  // memory that can be safely allocated on a system.  However, if we
-  // don't fail here, we can end up with a mysterious crash inside a
-  // function that is iterating over an array using octave_idx_type
-  // indices.
+   /*!
+      The following function will throw a std::bad_alloc ()
+      exception if the requested size is larger than can be indexed by
+      octave_idx_type. This may be smaller than the actual amount of
+      memory that can be safely allocated on a system.  However, if we
+      don't fail here, we can end up with a mysterious crash inside a
+      function that is iterating over an array using octave_idx_type
+      indices.
+  */
 
   octave_idx_type safe_numel (void) const;
 
   bool any_neg (void) const
   {
     int n_dims = length ();
     int i;
 
@@ -372,28 +377,29 @@ public:
       if (elem (i) < 0)
         break;
 
     return i < n_dims;
   }
 
   dim_vector squeeze (void) const;
 
-  // This corresponds to cat().
+  //! This corresponds to cat().
   bool concat (const dim_vector& dvb, int dim);
 
-  // This corresponds to [,] (horzcat, dim = 0) and [;] (vertcat, dim = 1).
+  //! This corresponds to [,] (horzcat, dim = 0) and [;] (vertcat, dim = 1).
   // The rules are more relaxed here.
   bool hvcat (const dim_vector& dvb, int dim);
 
-  // Force certain dimensionality, preserving numel ().  Missing
-  // dimensions are set to 1, redundant are folded into the trailing
-  // one.  If n = 1, the result is 2d and the second dim is 1
-  // (dim_vectors are always at least 2D).
-
+  /*!
+      Force certain dimensionality, preserving numel ().  Missing
+      dimensions are set to 1, redundant are folded into the trailing
+      one.  If n = 1, the result is 2d and the second dim is 1
+      (dim_vectors are always at least 2D).
+  */
   dim_vector redim (int n) const;
 
   dim_vector as_column (void) const
   {
     if (length () == 2 && elem (1) == 1)
       return *this;
     else
       return dim_vector (numel (), 1);
@@ -418,71 +424,73 @@ public:
       {
         if (elem (i) != 1)
           return i;
       }
 
     return def;
   }
 
-  // Compute a linear index from an index tuple.
+  //! Compute a linear index from an index tuple.
 
   octave_idx_type compute_index (const octave_idx_type *idx) const
   {
     octave_idx_type k = 0;
     for (int i = length () - 1; i >= 0; i--)
       k = k * rep[i] + idx[i];
 
     return k;
   }
 
-  // Ditto, but the tuple may be incomplete (nidx < length ()).
+  //! Ditto, but the tuple may be incomplete (nidx < length ()).
 
   octave_idx_type compute_index (const octave_idx_type *idx, int nidx) const
   {
     octave_idx_type k = 0;
     for (int i = nidx - 1; i >= 0; i--)
       k = k * rep[i] + idx[i];
 
     return k;
   }
 
-  // Increment a multi-dimensional index tuple, optionally starting
-  // from an offset position and return the index of the last index
-  // position that was changed, or length () if just cycled over.
+  /*/!
+      Increment a multi-dimensional index tuple, optionally starting
+      from an offset position and return the index of the last index
+      position that was changed, or length () if just cycled over.
+  */
 
   int increment_index (octave_idx_type *idx, int start = 0) const
   {
     int i;
     for (i = start; i < length (); i++)
       {
         if (++(*idx) == rep[i])
           *idx++ = 0;
         else
           break;
       }
     return i;
   }
 
-  // Return cumulative dimensions.
+  //! Return cumulative dimensions.
 
   dim_vector cumulative (void) const
   {
     int nd = length ();
     dim_vector retval = alloc (nd);
 
     octave_idx_type k = 1;
     for (int i = 0; i < nd; i++)
       retval.rep[i] = k *= rep[i];
 
     return retval;
   }
 
-  // Compute a linear index from an index tuple.  Dimensions are
-  // required to be cumulative.
+  //! Compute a linear index from an index tuple.  Dimensions are
+  //! required to be cumulative.
 
   octave_idx_type cum_compute_index (const octave_idx_type *idx) const
   {
     octave_idx_type k = idx[0];
 
     for (int i = 1; i < length (); i++)
       k += rep[i-1] * idx[i];
 
