# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1518985956 21600
#      Sun Feb 18 14:32:36 2018 -0600
# Node ID 0eb41237424e29128a70421a1217d5ec2dbf2d43
# Parent  e6f380f9b2a4b45f7557a0858d337cb288a3a972
more templates for pr-output.cc functions

* pr-output.h, pr-output.cc (pr_max_internal, pr_min_internal,
make_complex_format, make_format, make_format_internal,
make_real_format): Define with templates where possible.

(pr_plus_format): New template function.  Use to eliminate some
duplicate code.

(octave_print_internal): Define versions for float and FloatComplex.

diff --git a/libinterp/corefcn/pr-output.cc b/libinterp/corefcn/pr-output.cc
--- a/libinterp/corefcn/pr-output.cc
+++ b/libinterp/corefcn/pr-output.cc
@@ -130,17 +130,17 @@ calc_scale_exp (const int& x)
   // ISO/IEC 14882:2003 : Programming languages -- C++. 5.6.4: ISO,
   // IEC. 2003 . "the binary % operator yields the remainder from the
   // division of the first expression by the second. .... If both
   // operands are nonnegative then the remainder is nonnegative; if not,
   // the sign of the remainder is implementation-defined".
 }
 
 template <typename T>
-static int
+static inline int
 engineering_exponent (T x)
 {
   int ex = 0;
 
   if (x != 0)
     {
       T absval = (x < 0 ? -x : x);
       int logabsval = static_cast<int> (std::floor (log10 (absval)));
@@ -153,17 +153,17 @@ engineering_exponent (T x)
       else
         ex = logabsval - (logabsval % 3);
     }
 
   return ex;
 }
 
 template <typename T>
-static int
+static inline int
 num_digits (T x)
 {
   return 1 + (print_eng
               ? engineering_exponent (x)
               : static_cast<int> (std::floor (log10 (x))));
 }
 
 template <typename T>
@@ -364,59 +364,64 @@ operator << (std::ostream& os, const pr_
   if (fw > 0 && s.length () > static_cast<unsigned int> (fw))
     os << '*';
   else
     os << s;
 
   return os;
 }
 
-static double
-pr_max_internal (const Matrix& m)
+template <typename T>
+static inline T
+pr_max_internal (const MArray<T>& m)
 {
+  // We expect a 2-d array.
+  assert (m.ndims () == 2);
+
   octave_idx_type nr = m.rows ();
   octave_idx_type nc = m.columns ();
 
-  double result = -std::numeric_limits<double>::max ();
+  T result = std::numeric_limits<T>::lowest ();
 
   bool all_inf_or_nan = true;
 
   for (octave_idx_type j = 0; j < nc; j++)
     for (octave_idx_type i = 0; i < nr; i++)
       {
-        double val = m(i,j);
+        T val = m(i,j);
         if (! octave::math::isfinite (val))
           continue;
 
         all_inf_or_nan = false;
 
         if (val > result)
           result = val;
       }
 
   if (all_inf_or_nan)
     result = 0;
 
   return result;
 }
 
-static double
-pr_min_internal (const Matrix& m)
+template <typename T>
+static inline T
+pr_min_internal (const MArray<T>& m)
 {
   octave_idx_type nr = m.rows ();
   octave_idx_type nc = m.columns ();
 
-  double result = std::numeric_limits<double>::max ();
+  T result = std::numeric_limits<T>::max ();
 
   bool all_inf_or_nan = true;
 
   for (octave_idx_type j = 0; j < nc; j++)
     for (octave_idx_type i = 0; i < nr; i++)
       {
-        double val = m(i,j);
+        T val = m(i,j);
         if (! octave::math::isfinite (val))
           continue;
 
         all_inf_or_nan = false;
 
         if (val < result)
           result = val;
       }
@@ -424,18 +429,20 @@ pr_min_internal (const Matrix& m)
   if (all_inf_or_nan)
     result = 0;
 
   return result;
 }
 
 // FIXME: it would be nice to share more code among these functions,..
 
-static float_display_format
-make_real_format (int digits, bool inf_or_nan, bool int_only, int& fw)
+template <typename T>
+static inline float_display_format
+make_real_format (int digits, bool inf_or_nan,
+                  bool int_only, int& fw)
 {
   float_format fmt;
 
   int prec = output_precision ();
 
   int ld, rd;
 
   if (rat_format)
@@ -447,22 +454,22 @@ make_real_format (int digits, bool inf_o
     {
       fw = (digits < 0 ? 5 : digits + 4);
       if (inf_or_nan && fw < 5)
         fw = 5;
       rd = 2;
     }
   else if (hex_format)
     {
-      fw = 2 * sizeof (double);
+      fw = 2 * sizeof (T);
       rd = 0;
     }
   else if (bit_format)
     {
-      fw = 8 * sizeof (double);
+      fw = 8 * sizeof (T);
       rd = 0;
     }
   else if (inf_or_nan || int_only)
     {
       fw = 1 + digits;
       if (inf_or_nan && fw < 4)
         fw = 4;
       rd = fw;
@@ -519,34 +526,36 @@ make_real_format (int digits, bool inf_o
   else if (! bank_format && (inf_or_nan || int_only))
     fmt = float_format (fw, rd);
   else
     fmt = float_format (fw, rd, std::ios::fixed);
 
   return float_display_format (fmt);
 }
 
+template <typename T>
 float_display_format
-make_format (double d, int& fw)
+make_format (T val, int& fw)
 {
   if (free_format)
     return float_display_format ();
 
-  bool inf_or_nan = (octave::math::isinf (d) || octave::math::isnan (d));
-
-  bool int_only = (! inf_or_nan && octave::math::x_nint (d) == d);
-
-  double d_abs = (d < 0 ? -d : d);
-
-  int digits = (inf_or_nan || d_abs == 0) ? 0 : num_digits (d_abs);
-
-  return make_real_format (digits, inf_or_nan, int_only, fw);
+  bool inf_or_nan = (octave::math::isinf (val) || octave::math::isnan (val));
+
+  bool int_only = (! inf_or_nan && octave::math::x_nint (val) == val);
+
+  T val_abs = (val < 0 ? -val : val);
+
+  int digits = (inf_or_nan || val_abs == 0) ? 0 : num_digits (val_abs);
+
+  return make_real_format<T> (digits, inf_or_nan, int_only, fw);
 }
 
-static float_display_format
+template <typename T>
+static inline float_display_format
 make_real_matrix_format (int x_max, int x_min, bool inf_or_nan,
                          int int_or_inf_or_nan, int& fw)
 {
   float_format fmt;
 
   int prec = output_precision ();
 
   int ld, rd;
@@ -561,22 +570,22 @@ make_real_matrix_format (int x_max, int 
       int digits = (x_max > x_min ? x_max : x_min);
       fw = (digits <= 0 ? 5 : digits + 4);
       if (inf_or_nan && fw < 5)
         fw = 5;
       rd = 2;
     }
   else if (hex_format)
     {
-      fw = 2 * sizeof (double);
+      fw = 2 * sizeof (T);
       rd = 0;
     }
   else if (bit_format)
     {
-      fw = 8 * sizeof (double);
+      fw = 8 * sizeof (T);
       rd = 0;
     }
   else if (Vfixed_point_format && ! print_g)
     {
       rd = prec;
       fw = rd + 3;
       if (inf_or_nan && fw < 4)
         fw = 4;
@@ -662,44 +671,60 @@ make_real_matrix_format (int x_max, int 
   else if (! bank_format && int_or_inf_or_nan)
     fmt = float_format (fw, rd);
   else
     fmt = float_format (fw, rd, std::ios::fixed);
 
   return float_display_format (fmt);
 }
 
-float_display_format
-make_format (const Matrix& m, int& fw, double& scale)
+template <typename MT, typename ELT_T>
+static inline float_display_format
+make_format_internal (const MT& m, int& fw, ELT_T& scale)
 {
+  assert (m.ndims () == 2);
+
   if (free_format)
     return float_display_format ();
 
   bool inf_or_nan = m.any_element_is_inf_or_nan ();
 
   bool int_or_inf_or_nan = m.all_elements_are_int_or_inf_or_nan ();
 
-  Matrix m_abs = m.abs ();
-  double max_abs = pr_max_internal (m_abs);
-  double min_abs = pr_min_internal (m_abs);
+  MT m_abs = m.abs ();
+  ELT_T max_abs = pr_max_internal (m_abs);
+  ELT_T min_abs = pr_min_internal (m_abs);
 
   int x_max = (max_abs == 0 ? 0 : num_digits (max_abs));
 
   int x_min = (min_abs == 0 ? 0 : num_digits (min_abs));
 
   scale = ((x_max == 0 || int_or_inf_or_nan)
            ? 1 : std::pow (10.0, calc_scale_exp (x_max - 1)));
 
-  return make_real_matrix_format (x_max, x_min, inf_or_nan,
-                                  int_or_inf_or_nan, fw);
+  return make_real_matrix_format<ELT_T> (x_max, x_min, inf_or_nan,
+                                         int_or_inf_or_nan, fw);
+}
+
+float_display_format
+make_format (const Matrix& m, int& fw, double& scale)
+{
+  return make_format_internal<Matrix, double> (m, fw, scale);
 }
 
-static float_display_format
-make_complex_format (int x_max, int x_min, int r_x, bool inf_or_nan,
-                     int int_only, int& r_fw, int& i_fw)
+float_display_format
+make_format (const FloatMatrix& m, int& fw, float& scale)
+{
+  return make_format_internal<FloatMatrix, float> (m, fw, scale);
+}
+
+template <typename T>
+static inline float_display_format
+make_complex_format (int x_max, int x_min, int r_x,
+                     bool inf_or_nan, int int_only, int& r_fw, int& i_fw)
 {
   float_format r_fmt;
   float_format i_fmt;
 
   int prec = output_precision ();
 
   int ld, rd;
 
@@ -715,24 +740,24 @@ make_complex_format (int x_max, int x_mi
       i_fw = 0;
       r_fw = (digits <= 0 ? 5 : digits + 4);
       if (inf_or_nan && r_fw < 5)
         r_fw = 5;
       rd = 2;
     }
   else if (hex_format)
     {
-      r_fw = 2 * sizeof (double);
-      i_fw = 2 * sizeof (double);
+      r_fw = 2 * sizeof (T);
+      i_fw = 2 * sizeof (T);
       rd = 0;
     }
   else if (bit_format)
     {
-      r_fw = 8 * sizeof (double);
-      i_fw = 8 * sizeof (double);
+      r_fw = 8 * sizeof (T);
+      i_fw = 8 * sizeof (T);
       rd = 0;
     }
   else if (inf_or_nan || int_only)
     {
       int digits = (x_max > x_min ? x_max : x_min);
       i_fw = (digits <= 0 ? 1 : digits);
       r_fw = i_fw + 1;
       if (inf_or_nan && i_fw < 3)
@@ -839,32 +864,33 @@ make_complex_format (int x_max, int x_mi
     {
       r_fmt = float_format (r_fw, rd, std::ios::fixed);
       i_fmt = float_format (i_fw, rd, std::ios::fixed);
     }
 
   return float_display_format (r_fmt, i_fmt);
 }
 
+template <typename T>
 float_display_format
-make_format (const Complex& c, int& r_fw, int& i_fw)
+make_format (const std::complex<T>& c, int& r_fw, int& i_fw)
 {
   if (free_format)
     return float_display_format ();
 
-  double rp = c.real ();
-  double ip = c.imag ();
+  T rp = c.real ();
+  T ip = c.imag ();
 
   bool inf_or_nan = (octave::math::isinf (c) || octave::math::isnan (c));
 
   bool int_only = (octave::math::x_nint (rp) == rp
                    && octave::math::x_nint (ip) == ip);
 
-  double r_abs = (rp < 0 ? -rp : rp);
-  double i_abs = (ip < 0 ? -ip : ip);
+  T r_abs = (rp < 0 ? -rp : rp);
+  T i_abs = (ip < 0 ? -ip : ip);
 
   int r_x = (! octave::math::isfinite (rp)
              || r_abs == 0) ? 0 : num_digits (r_abs);
 
   int i_x = (! octave::math::isfinite (ip)
              || i_abs == 0) ? 0 : num_digits (i_abs);
 
   int x_max, x_min;
@@ -875,21 +901,22 @@ make_format (const Complex& c, int& r_fw
       x_min = i_x;
     }
   else
     {
       x_max = i_x;
       x_min = r_x;
     }
 
-  return make_complex_format (x_max, x_min, r_x, inf_or_nan, int_only,
-                              r_fw, i_fw);
+  return make_complex_format<T> (x_max, x_min, r_x, inf_or_nan, int_only,
+                                 r_fw, i_fw);
 }
 
-static float_display_format
+template <typename T>
+static inline float_display_format
 make_complex_matrix_format (int x_max, int x_min, int r_x_max,
                             int r_x_min, bool inf_or_nan,
                             int int_or_inf_or_nan, int& r_fw, int& i_fw)
 {
   float_format r_fmt;
   float_format i_fmt;
 
   int prec = output_precision ();
@@ -908,24 +935,24 @@ make_complex_matrix_format (int x_max, i
       i_fw = 0;
       r_fw = (digits <= 0 ? 5 : digits + 4);
       if (inf_or_nan && r_fw < 5)
         r_fw = 5;
       rd = 2;
     }
   else if (hex_format)
     {
-      r_fw = 2 * sizeof (double);
-      i_fw = 2 * sizeof (double);
+      r_fw = 2 * sizeof (T);
+      i_fw = 2 * sizeof (T);
       rd = 0;
     }
   else if (bit_format)
     {
-      r_fw = 8 * sizeof (double);
-      i_fw = 8 * sizeof (double);
+      r_fw = 8 * sizeof (T);
+      i_fw = 8 * sizeof (T);
       rd = 0;
     }
   else if (Vfixed_point_format && ! print_g)
     {
       rd = prec;
       i_fw = rd + 1;
       r_fw = i_fw + 1;
       if (inf_or_nan && i_fw < 3)
@@ -1045,58 +1072,72 @@ make_complex_matrix_format (int x_max, i
     {
       r_fmt = float_format (r_fw, rd, std::ios::fixed);
       i_fmt = float_format (i_fw, rd, std::ios::fixed);
     }
 
   return float_display_format (r_fmt, i_fmt);
 }
 
-float_display_format
-make_format (const ComplexMatrix& cm, int& r_fw, int& i_fw, double& scale)
+template <typename CMT, typename RMT, typename ELT_T>
+static inline float_display_format
+make_format_internal (const CMT& cm, int& r_fw, int& i_fw, ELT_T& scale)
 {
   if (free_format)
     return float_display_format ();
 
-  Matrix rp = real (cm);
-  Matrix ip = imag (cm);
+  RMT rp = real (cm);
+  RMT ip = imag (cm);
 
   bool inf_or_nan = cm.any_element_is_inf_or_nan ();
 
   bool int_or_inf_or_nan = (rp.all_elements_are_int_or_inf_or_nan ()
                             && ip.all_elements_are_int_or_inf_or_nan ());
 
-  Matrix r_m_abs = rp.abs ();
-  double r_max_abs = pr_max_internal (r_m_abs);
-  double r_min_abs = pr_min_internal (r_m_abs);
-
-  Matrix i_m_abs = ip.abs ();
-  double i_max_abs = pr_max_internal (i_m_abs);
-  double i_min_abs = pr_min_internal (i_m_abs);
+  RMT r_m_abs = rp.abs ();
+  ELT_T r_max_abs = pr_max_internal (r_m_abs);
+  ELT_T r_min_abs = pr_min_internal (r_m_abs);
+
+  RMT i_m_abs = ip.abs ();
+  ELT_T i_max_abs = pr_max_internal (i_m_abs);
+  ELT_T i_min_abs = pr_min_internal (i_m_abs);
 
   int r_x_max = (r_max_abs == 0 ? 0 : num_digits (r_max_abs));
 
   int r_x_min = (r_min_abs == 0 ? 0 : num_digits (r_min_abs));
 
   int i_x_max = (i_max_abs == 0 ? 0 : num_digits (i_max_abs));
 
   int i_x_min = (i_min_abs == 0 ? 0 : num_digits (i_min_abs));
 
   int x_max = (r_x_max > i_x_max ? r_x_max : i_x_max);
   int x_min = (r_x_min > i_x_min ? r_x_min : i_x_min);
 
   scale = ((x_max == 0 || int_or_inf_or_nan)
            ? 1 : std::pow (10.0, calc_scale_exp (x_max - 1)));
 
-  return make_complex_matrix_format (x_max, x_min, r_x_max, r_x_min,
-                                     inf_or_nan, int_or_inf_or_nan,
-                                     r_fw, i_fw);
+  return make_complex_matrix_format<ELT_T> (x_max, x_min, r_x_max, r_x_min,
+                                            inf_or_nan, int_or_inf_or_nan,
+                                            r_fw, i_fw);
+}
+
+float_display_format
+make_format (const ComplexMatrix& cm, int& r_fw, int& i_fw, double& scale)
+{
+  return make_format_internal<ComplexMatrix, Matrix, double> (cm, r_fw, i_fw, scale);
 }
 
-static float_display_format
+float_display_format
+make_format (const FloatComplexMatrix& cm, int& r_fw, int& i_fw, float& scale)
+{
+  return make_format_internal<FloatComplexMatrix, FloatMatrix, float> (cm, r_fw, i_fw, scale);
+}
+
+template <typename T>
+static inline float_display_format
 make_range_format (int x_max, int x_min, int all_ints, int& fw)
 {
   float_format fmt;
 
   int prec = output_precision ();
 
   int ld, rd;
 
@@ -1108,22 +1149,22 @@ make_range_format (int x_max, int x_min,
   else if (bank_format)
     {
       int digits = (x_max > x_min ? x_max : x_min);
       fw = (digits < 0 ? 5 : digits + 4);
       rd = 2;
     }
   else if (hex_format)
     {
-      fw = 2 * sizeof (double);
+      fw = 2 * sizeof (T);
       rd = 0;
     }
   else if (bit_format)
     {
-      fw = 8 * sizeof (double);
+      fw = 8 * sizeof (T);
       rd = 0;
     }
   else if (all_ints)
     {
       int digits = (x_max > x_min ? x_max : x_min);
       fw = digits + 1;
       rd = fw;
     }
@@ -1227,17 +1268,17 @@ make_format (const Range& r, int& fw, do
 
   int x_max = (max_abs == 0 ? 0 : num_digits (max_abs));
 
   int x_min = (min_abs == 0 ? 0 : num_digits (min_abs));
 
   scale = ((x_max == 0 || all_ints)
            ? 1 : std::pow (10.0, calc_scale_exp (x_max - 1)));
 
-  return make_range_format (x_max, x_min, all_ints, fw);
+  return make_range_format<double> (x_max, x_min, all_ints, fw);
 }
 
 template <typename T>
 union equiv
 {
   T val;
   unsigned char i[sizeof (T)];
 };
@@ -1274,17 +1315,17 @@ union equiv
       stmp[6] = (ctmp & 0x40) ? '1' : '0';      \
       stmp[7] = (ctmp & 0x80) ? '1' : '0';      \
       stmp[8] = '\0';                           \
       os << stmp;                               \
     }                                           \
   while (0)
 
 template <typename T>
-static void
+static inline void
 pr_any_float (std::ostream& os, const float_format& fmt, T val, int fw = 0)
 {
   // Unless explicitly asked for, always print in big-endian format
   // for hex and bit formats.
   //
   //   {bit,hex}_format == 1: print big-endian
   //   {bit,hex}_format == 2: print native
 
@@ -1402,17 +1443,17 @@ template <typename T>
 static inline void
 pr_imag_float (std::ostream& os, const float_display_format& fmt,
                T val, int fw = 0)
 {
   pr_any_float (os, fmt.imag_format (), val, fw);
 }
 
 template <typename T>
-static void
+static inline void
 pr_complex (std::ostream& os, const float_display_format& fmt,
             const std::complex<T>& cval, int r_fw = 0, int i_fw = 0,
             T scale = 1)
 {
   std::complex<T> tmp
     = ((Vfixed_point_format && ! print_g && scale != 1)
        ? cval / scale : cval);
 
@@ -1437,17 +1478,17 @@ pr_complex (std::ostream& os, const floa
             os << " + ";
 
           pr_imag_float (os, fmt, i, i_fw);
         }
       os << 'i';
     }
 }
 
-static void
+static inline void
 print_empty_matrix (std::ostream& os, octave_idx_type nr, octave_idx_type nc,
                     bool pr_as_read_syntax)
 {
   assert (nr == 0 || nc == 0);
 
   if (pr_as_read_syntax)
     {
       if (nr == 0 && nc == 0)
@@ -1459,17 +1500,17 @@ print_empty_matrix (std::ostream& os, oc
     {
       os << "[]";
 
       if (Vprint_empty_dimensions)
         os << '(' << nr << 'x' << nc << ')';
     }
 }
 
-static void
+static inline void
 print_empty_nd_array (std::ostream& os, const dim_vector& dims,
                       bool pr_as_read_syntax)
 {
   assert (dims.any_zero ());
 
   if (pr_as_read_syntax)
     os << "zeros (" << dims.str (',') << ')';
   else
@@ -1477,17 +1518,17 @@ print_empty_nd_array (std::ostream& os, 
       os << "[]";
 
       if (Vprint_empty_dimensions)
         os << '(' << dims.str () << ')';
     }
 }
 
 template <typename T>
-static void
+static inline void
 pr_scale_header (std::ostream& os, T scale)
 {
   if (Vfixed_point_format && ! print_g && scale != 1)
     {
       octave::preserve_stream_state stream_state (os);
 
       os << "  "
          << std::setw (8) << std::setprecision (1)
@@ -1495,17 +1536,17 @@ pr_scale_header (std::ostream& os, T sca
          << scale
          << "*\n";
 
       if (! Vcompact_format)
         os << "\n";
     }
 }
 
-static void
+static inline void
 pr_col_num_header (std::ostream& os, octave_idx_type total_width, int max_width,
                    octave_idx_type lim, octave_idx_type col, int extra_indent)
 {
   if (total_width > max_width && Vsplit_long_rows)
     {
       octave::preserve_stream_state stream_state (os);
 
       if (col != 0)
@@ -1528,17 +1569,17 @@ pr_col_num_header (std::ostream& os, oct
         os << " Columns " << col + 1 << " through " << lim << ":\n";
 
       if (! Vcompact_format)
         os << "\n";
     }
 }
 
 template <typename T>
-/* static */ inline void
+static inline void
 pr_plus_format (std::ostream& os, const T& val)
 {
   if (val > T (0))
     os << plus_format_chars[0];
   else if (val < T (0))
     os << plus_format_chars[1];
   else
     os << plus_format_chars[2];
@@ -1562,17 +1603,17 @@ make_format (const NDArray& nda)
   return make_format (Matrix (nda), fw, scale);
 }
 
 template <>
 float_display_format
 make_format (const FloatNDArray& nda)
 {
   int fw = 0;
-  double scale = 0;
+  float scale = 0;
   return make_format (FloatMatrix (nda), fw, scale);
 }
 
 template <>
 float_display_format
 make_format (const ComplexNDArray& nda)
 {
   int r_fw = 0;
@@ -1582,17 +1623,17 @@ make_format (const ComplexNDArray& nda)
 }
 
 template <>
 float_display_format
 make_format (const FloatComplexNDArray& nda)
 {
   int r_fw = 0;
   int i_fw = 0;
-  double scale = 0;
+  float scale = 0;
   return make_format (FloatComplexMatrix (nda), r_fw, i_fw, scale);
 }
 
 template <>
 float_display_format
 make_format (const boolNDArray&)
 {
   return float_display_format (float_format (1, 1));
@@ -1600,34 +1641,34 @@ make_format (const boolNDArray&)
 
 // FIXME: all this mess with abs is an attempt to avoid seeing
 //
 //   warning: comparison of unsigned expression < 0 is always false
 //
 // from GCC.  Isn't there a better way?
 
 template <typename T>
-/* static */ inline T
+static inline T
 abs (T x)
 {
   return x < 0 ? -x : x;
 }
 
 #define INSTANTIATE_ABS(T)                      \
-  template /* static */ T abs (T)
+  template T abs (T)
 
 INSTANTIATE_ABS(signed char);
 INSTANTIATE_ABS(short);
 INSTANTIATE_ABS(int);
 INSTANTIATE_ABS(long);
 INSTANTIATE_ABS(long long);
 
 #define SPECIALIZE_UABS(T)                      \
   template <>                                   \
-  /* static */ inline unsigned T                \
+  inline unsigned T                             \
   abs (unsigned T x)                            \
   {                                             \
     return x;                                   \
   }
 
 SPECIALIZE_UABS(char)
 SPECIALIZE_UABS(short)
 SPECIALIZE_UABS(int)
@@ -1757,18 +1798,35 @@ octave_print_internal (std::ostream& os,
     {
       if (free_format)
         os << d;
       else
         pr_float (os, fmt, d);
     }
 }
 
+void
+octave_print_internal (std::ostream& os, const float_display_format& fmt,
+                       float d, bool pr_as_read_syntax)
+{
+  if (pr_as_read_syntax)
+    os << d;
+  else if (plus_format)
+    pr_plus_format (os, d);
+  else
+    {
+      if (free_format)
+        os << d;
+      else
+        pr_float (os, fmt, d);
+    }
+}
+
 template <typename MT>
-static void
+static inline void
 octave_print_free (std::ostream& os, const MT& m, bool pr_as_read_syntax)
 {
   octave_idx_type nr = m.rows ();
   octave_idx_type nc = m.columns ();
 
   if (pr_as_read_syntax)
     os << "[\n";
 
@@ -2138,22 +2196,22 @@ octave_print_internal (std::ostream& os,
       break;
 
     default:
       print_nd_array <NDArray, double, Matrix> (os, nda, pr_as_read_syntax);
       break;
     }
 }
 
-template <>
-/* static */ inline void
-pr_plus_format<> (std::ostream& os, const Complex& c)
+template <typename T>
+static inline void
+pr_plus_format (std::ostream& os, const std::complex<T>& c)
 {
-  double rp = c.real ();
-  double ip = c.imag ();
+  T rp = c.real ();
+  T ip = c.imag ();
 
   if (rp == 0)
     {
       if (ip == 0)
         os << ' ';
       else
         os << 'i';
     }
@@ -2176,16 +2234,33 @@ octave_print_internal (std::ostream& os,
       if (free_format)
         os << c;
       else
         pr_complex (os, fmt, c);
     }
 }
 
 void
+octave_print_internal (std::ostream& os, const float_display_format& fmt,
+                       const FloatComplex& c, bool pr_as_read_syntax)
+{
+  if (pr_as_read_syntax)
+    os << c;
+  else if (plus_format)
+    pr_plus_format (os, c);
+  else
+    {
+      if (free_format)
+        os << c;
+      else
+        pr_complex (os, fmt, c);
+    }
+}
+
+void
 octave_print_internal (std::ostream& os, const ComplexMatrix& cm,
                        bool pr_as_read_syntax, int extra_indent)
 {
   octave_idx_type nr = cm.rows ();
   octave_idx_type nc = cm.columns ();
 
   if (nr == 0 || nc == 0)
     print_empty_matrix (os, nr, nc, pr_as_read_syntax);
@@ -2927,17 +3002,17 @@ public:
   }
 
 PRINT_CONV (octave_int8, octave_int16);
 PRINT_CONV (octave_uint8, octave_uint16);
 
 #undef PRINT_CONV
 
 template <typename T>
-/* static */ inline void
+static inline void
 pr_int (std::ostream& os, const T& d, int fw = 0)
 {
   size_t sz = d.byte_size ();
   const unsigned char *tmpi = d.iptr ();
 
   // Unless explicitly asked for, always print in big-endian
   // format for hex and bit formats.
   //
@@ -3053,17 +3128,17 @@ PRINT_INT_SCALAR_INTERNAL (uint8_t)
 PRINT_INT_SCALAR_INTERNAL (int16_t)
 PRINT_INT_SCALAR_INTERNAL (uint16_t)
 PRINT_INT_SCALAR_INTERNAL (int32_t)
 PRINT_INT_SCALAR_INTERNAL (uint32_t)
 PRINT_INT_SCALAR_INTERNAL (int64_t)
 PRINT_INT_SCALAR_INTERNAL (uint64_t)
 
 template <typename T>
-/* static */ inline void
+static inline void
 octave_print_internal_template (std::ostream& os, const intNDArray<T>& nda,
                                 bool pr_as_read_syntax, int extra_indent)
 {
   // FIXME: this mostly duplicates the code in the print_nd_array<>
   // function.  Can fix this with std::is_same from C++11.
 
   if (nda.isempty ())
     print_empty_nd_array (os, nda.dims (), pr_as_read_syntax);
@@ -3594,35 +3669,35 @@ of properly displaying the object's name
 %! str = evalc ("display (1.1)");
 %! assert (str, " 1.1000\n");
 
 ## Test input validation
 %!error display ()
 %!error display (1,2)
 */
 
-static void
+static inline void
 init_format_state (void)
 {
   free_format = false;
   plus_format = false;
   rat_format = false;
   bank_format = false;
   hex_format = 0;
   bit_format = 0;
   Vcompact_format = false;
   print_e = false;
   print_big_e = false;
   print_g = false;
   print_eng = false;
 }
 
-static std::string format_string ("short");
-
-static void
+static inline std::string format_string ("short");
+
+static inline void
 set_format_style (int argc, const string_vector& argv)
 {
   int idx = 1;
   std::string format;
 
   if (--argc > 0)
     {
       std::string arg = argv[idx++];
diff --git a/libinterp/corefcn/pr-output.h b/libinterp/corefcn/pr-output.h
--- a/libinterp/corefcn/pr-output.h
+++ b/libinterp/corefcn/pr-output.h
@@ -51,29 +51,37 @@ class boolNDArray;
 class charMatrix;
 class charNDArray;
 class PermMatrix;
 class Cell;
 class octave_value;
 
 template <typename T> class intNDArray;
 
+template <typename T>
 extern float_display_format
-make_format (double d, int& fw);
+make_format (T val, int& fw);
 
 extern float_display_format
 make_format (const Matrix& m, int& fw, double& scale);
 
 extern float_display_format
-make_format (const Complex& c, int& r_fw, int& i_fw);
+make_format (const FloatMatrix& m, int& fw, float& scale);
+
+template <typename T>
+extern float_display_format
+make_format (const std::complex<T>& c, int& r_fw, int& i_fw);
 
 extern float_display_format
 make_format (const ComplexMatrix& cm, int& r_fw, int& i_fw, double& scale);
 
 extern float_display_format
+make_format (const FloatComplexMatrix& cm, int& r_fw, int& i_fw, double& scale);
+
+extern float_display_format
 make_format (const Range& r, int& fw, double& scale);
 
 template <typename MT>
 float_display_format
 make_format (const MT&)
 {
   return float_display_format ();
 }
@@ -210,28 +218,25 @@ octave_print_internal (std::ostream& os,
 
 inline void
 octave_print_internal (std::ostream& os, double d,
                        bool pr_as_read_syntax = false)
 {
   octave_print_internal (os, make_format (d), d, pr_as_read_syntax);
 }
 
-inline void
+extern OCTINTERP_API void
 octave_print_internal (std::ostream& os, const float_display_format& fmt,
-                       float d, bool pr_as_read_syntax = false)
-{
-  octave_print_internal (os, fmt, double (d), pr_as_read_syntax);
-}
+                       float d, bool pr_as_read_syntax = false);
 
 inline void
 octave_print_internal (std::ostream& os, float d,
                        bool pr_as_read_syntax = false)
 {
-  octave_print_internal (os, double (d), pr_as_read_syntax);
+  octave_print_internal (os, make_format (d), d, pr_as_read_syntax);
 }
 
 extern OCTINTERP_API void
 octave_print_internal (std::ostream& os, const Matrix& m,
                        bool pr_as_read_syntax = false,
                        int extra_indent = 0);
 
 extern OCTINTERP_API void
@@ -265,28 +270,25 @@ octave_print_internal (std::ostream& os,
 
 inline void
 octave_print_internal (std::ostream& os, const Complex& c,
                        bool pr_as_read_syntax = false)
 {
   octave_print_internal (os, make_format (c), c, pr_as_read_syntax);
 }
 
-inline void
+extern OCTINTERP_API void
 octave_print_internal (std::ostream& os, const float_display_format& fmt,
-                       const FloatComplex& c, bool pr_as_read_syntax = false)
-{
-  octave_print_internal (os, fmt, Complex (c), pr_as_read_syntax);
-}
+                       const FloatComplex& c, bool pr_as_read_syntax = false);
 
 inline void
 octave_print_internal (std::ostream& os, const FloatComplex& c,
                        bool pr_as_read_syntax = false)
 {
-  octave_print_internal (os, Complex (c), pr_as_read_syntax);
+  octave_print_internal (os, make_format (c), c, pr_as_read_syntax);
 }
 
 extern OCTINTERP_API void
 octave_print_internal (std::ostream& os, const ComplexMatrix& cm,
                        bool pr_as_read_syntax = false,
                        int extra_indent = 0);
 
 extern OCTINTERP_API void
