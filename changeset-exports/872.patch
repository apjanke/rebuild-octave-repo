# HG changeset patch
# User jwe
# Date 783910764 0
#      Fri Nov 04 00:59:24 1994 +0000
# Node ID fb24794ef0e2bb52f937083438aaddd4efcb2ee9
# Parent  1a137429b26e3051a0208e411b866042a0026b63
[project @ 1994-11-04 00:59:24 by jwe]

diff --git a/src/load-save.cc b/src/load-save.cc
--- a/src/load-save.cc
+++ b/src/load-save.cc
@@ -69,16 +69,22 @@ LOSE! LOSE!
 #if SIZEOF_INT == 4
 #define FOUR_BYTE_INT int
 #elif SIZEOF_LONG == 4
 #define FOUR_BYTE_INT long
 #else
 LOSE! LOSE!
 #endif
 
+// Used when converting Inf to something that gnuplot can read.
+
+#ifndef OCT_RBV
+#define OCT_RBV DBL_MAX / 100.0
+#endif
+
 enum load_save_format
   {
     LS_ASCII,
     LS_BINARY,
     LS_MAT_BINARY,
     LS_UNKNOWN,
   };
 
@@ -2484,87 +2490,216 @@ ascii_save_type (ostream& os, char *type
   if (mark_as_global)
     os << "# type: global ";
   else
     os << "# type: ";
 
   os << type << "\n";
 }
 
+static Matrix
+strip_infnan (const Matrix& m)
+{
+  int nr = m.rows ();
+  int nc = m.columns ();
+
+  Matrix retval (nr, nc);
+
+  int k = 0;
+  for (int i = 0; i < nr; i++)
+    {
+      for (int j = 0; j < nc; j++)
+	{
+	  double d = m.elem (i, j);
+	  if (xisnan (d))
+	    goto next_row;
+	  else
+	    retval.elem (k, j) = xisinf (d) ? (d > 0 ? OCT_RBV : -OCT_RBV) : d;
+	}
+      k++;
+
+    next_row:
+      continue;
+    }
+
+  if (k > 0)
+    retval.resize (k, nc);
+
+  return retval;
+}
+
+static ComplexMatrix
+strip_infnan (const ComplexMatrix& m)
+{
+  int nr = m.rows ();
+  int nc = m.columns ();
+
+  ComplexMatrix retval (nr, nc);
+
+  int k = 0;
+  for (int i = 0; i < nr; i++)
+    {
+      for (int j = 0; j < nc; j++)
+	{
+	  Complex c = m.elem (i, j);
+	  if (xisnan (c))
+	    goto next_row;
+	  else
+	    {
+	      double re = real (c);
+	      double im = imag (c);
+
+	      re = xisinf (re) ? (re > 0 ? OCT_RBV : -OCT_RBV) : re;
+	      im = xisinf (im) ? (im > 0 ? OCT_RBV : -OCT_RBV) : im;
+
+	      retval.elem (k, j) = Complex (re, im);
+	    }
+	}
+      k++;
+
+    next_row:
+      continue;
+    }
+
+  if (k > 0)
+    retval.resize (k, nc);
+
+  return retval;
+}
+
 // Save the data from TC along with the corresponding NAME, and global
 // flag MARK_AS_GLOBAL on stream OS in the plain text format described
 // above for load_ascii_data.  If NAME is null, the name: line is not
 // generated.  PRECISION specifies the number of decimal digits to print. 
+// If STRIP_NAN_AND_INF is nonzero, rows containing NaNs are deleted,
+// and Infinite values are converted to +/-OCT_RBV (A Real Big Value,
+// but not so big that gnuplot can't handle it when trying to compute
+// axis ranges, etc.).
+//
+// Assumes ranges and strings cannot contain Inf or NaN values.
+//
+// Returns 1 for success and 0 for failure.
 
 // XXX FIXME XXX -- should probably write the help string here too.
 
 int
 save_ascii_data (ostream& os, const tree_constant& tc,
-		 char *name, int mark_as_global, int precision)
+		 char *name, int strip_nan_and_inf,
+		 int mark_as_global, int precision) 
 {
-  int fail = 0;
+  int success = 1;
 
   if (! precision)
     precision = user_pref.save_precision;
 
   if (name)
     os << "# name: " << name << "\n";
 
   long old_precision = os.precision ();
   os.precision (precision);
 
   if (tc.is_real_scalar ())
     {
       ascii_save_type (os, "scalar", mark_as_global);
-      os << tc.double_value () << "\n";
+
+      double d = tc.double_value ();
+      if (strip_nan_and_inf)
+	{
+	  if (xisnan (d))
+	    {
+	      error ("only value to plot is NaN");
+	      success = 0;
+	    }
+	  else
+	    {
+	      d = xisinf (d) ? (d > 0 ? OCT_RBV : -OCT_RBV) : d;
+	      os << d << "\n";
+	    }
+	}
+      else
+	os << d << "\n";
     }
   else if (tc.is_real_matrix ())
     {
       ascii_save_type (os, "matrix", mark_as_global);
       os << "# rows: " << tc.rows () << "\n"
-	 << "# columns: " << tc.columns () << "\n"
-	 << tc.matrix_value () ;
+	 << "# columns: " << tc.columns () << "\n";
+
+      Matrix tmp = tc.matrix_value ();
+      if (strip_nan_and_inf)
+	tmp = strip_infnan (tmp);
+
+      os << tmp;
     }
   else if (tc.is_complex_scalar ())
     {
       ascii_save_type (os, "complex scalar", mark_as_global);
-      os << tc.complex_value () << "\n";
+
+      Complex c = tc.complex_value ();
+      if (strip_nan_and_inf)
+	{
+	  if (xisnan (c))
+	    {
+	      error ("only value to plot is NaN");
+	      success = 0;
+	    }
+	  else
+	    {
+	      double re = real (c);
+	      double im = imag (c);
+
+	      re = xisinf (re) ? (re > 0 ? OCT_RBV : -OCT_RBV) : re;
+	      im = xisinf (im) ? (im > 0 ? OCT_RBV : -OCT_RBV) : im;
+
+	      c = Complex (re, im);
+
+	      os << c << "\n";
+	    }
+	}
+      else
+	os << c << "\n";
     }
   else if (tc.is_complex_matrix ())
     {
       ascii_save_type (os, "complex matrix", mark_as_global);
       os << "# rows: " << tc.rows () << "\n"
 	 << "# columns: " << tc.columns () << "\n"
 	 << tc.complex_matrix_value () ;
+
+      ComplexMatrix tmp = tc.matrix_value ();
+      if (strip_nan_and_inf)
+	tmp = strip_infnan (tmp);
+
+      os << tmp;
     }
   else if (tc.is_string ())
     {
       ascii_save_type (os, "string", mark_as_global);
       char *tmp = tc.string_value ();
       os << "# length: " << strlen (tmp) << "\n"
 	 << tmp << "\n";
     }
-  else if (tc.is_string ())
+  else if (tc.is_range ())
     {
       ascii_save_type (os, "range", mark_as_global);
       Range tmp = tc.range_value ();
       os << "# base, limit, increment\n"
 	 << tmp.base () << " "
 	 << tmp.limit () << " "
 	 << tmp.inc () << "\n";
     }
   else
     {
       gripe_wrong_type_arg ("save", tc);
-      fail = 1;
+      success = 0;
     }
 
   os.precision (old_precision);
 
-  return (os && ! fail);
+  return (os && success);
 }
 
 // Save the info from sr on stream os in the format specified by fmt.
 
 static void
 do_save (ostream& os, symbol_record *sr, load_save_format fmt,
 	 int save_as_floats)
 {
@@ -2580,17 +2715,17 @@ do_save (ostream& os, symbol_record *sr,
   tree_constant tc = *((tree_constant *) sr->def ());
 
   if (! name || ! tc.is_defined ())
     return;
 
   switch (fmt)
     {
     case LS_ASCII:
-      save_ascii_data (os, tc, name, global);
+      save_ascii_data (os, tc, name, 0, global);
       break;
 
     case LS_BINARY:
       save_binary_data (os, tc, name, help, global, save_as_floats);
       break;
 
     case LS_MAT_BINARY:
       save_mat_binary_data (os, tc, name);
@@ -2848,26 +2983,32 @@ save_three_d (ostream& os, const tree_co
 
       if (parametric)
 	{
 	  int extras = nc % 3;
 	  if (extras)
 	    warning ("ignoring last %d columns", extras);
 
 	  Matrix tmp = tc.matrix_value ();
+	  tmp = strip_infnan (tmp);
+	  nr = tmp.rows ();
+
 	  for (int i = 0; i < nc-extras; i += 3)
 	    {
 	      os << tmp.extract (0, i, nr-1, i+2);
 	      if (i+3 < nc-extras)
 		os << "\n";
 	    }
 	}
       else
 	{
 	  Matrix tmp = tc.matrix_value ();
+	  tmp = strip_infnan (tmp);
+	  nr = tmp.rows ();
+
 	  for (int i = 0; i < nc; i++)
 	    {
 	      os << tmp.extract (0, i, nr-1, i);
 	      if (i+1 < nc)
 		os << "\n";
 	    }
 	}
     }
diff --git a/src/load-save.h b/src/load-save.h
--- a/src/load-save.h
+++ b/src/load-save.h
@@ -23,18 +23,18 @@ Software Foundation, 675 Mass Ave, Cambr
 
 #if !defined (octave_load_save_h)
 #define octave_load_save_h 1
 
 class tree_constant;
 class ostream;
 
 extern int save_ascii_data (ostream& os, const tree_constant& t,
-			    char *name = 0, int mark_as_global = 0,
-			    int precision = 0);
+			    char *name = 0, int strip_nan_and_inf = 0,
+			    int mark_as_global = 0, int precision = 0);
 
 extern int save_three_d (ostream& os, const tree_constant& t,
 			 int parametric = 0);
 
 #endif
 
 /*
 ;;; Local Variables: ***
diff --git a/src/pt-plot.cc b/src/pt-plot.cc
--- a/src/pt-plot.cc
+++ b/src/pt-plot.cc
@@ -477,31 +477,27 @@ plot_range::print_code (ostream& os)
     upper->print_code (os);
 
   os << "]";
 }
 
 subplot_using::subplot_using (void)
 {
   qualifier_count = 0;
-  x[0] = 0;
-  x[1] = 0;
-  x[2] = 0;
-  x[3] = 0;
+  x[0] = x[1] = x[2] = x[3] = 0;
   scanf_fmt = 0;
+  have_values = 0;
 }
 
-subplot_using::subplot_using (tree_expression *fmt)
+subplot_using::subplot_using (tree_expression *fmt) : val (4, -1)
 {
   qualifier_count = 0;
-  x[0] = 0;
-  x[1] = 0;
-  x[2] = 0;
-  x[3] = 0;
+  x[0] = x[1] = x[2] = x[3] = 0;
   scanf_fmt = fmt;
+  have_values = 0;
 }
 
 subplot_using::~subplot_using (void)
 {
   delete scanf_fmt;
 }
 
 subplot_using *
@@ -518,62 +514,100 @@ subplot_using::add_qualifier (tree_expre
     x[qualifier_count] = t;
 
   qualifier_count++;
 
   return this;
 }
 
 int
-subplot_using::print (int ndim, int n_max, ostrstream& plot_buf)
+subplot_using::eval (int ndim, int n_max)
 {
   if ((ndim == 2 && qualifier_count > 4)
       || (ndim == 3 && qualifier_count > 3))
     return -1;
 
+  if (have_values)
+    return 1;
+
+  if (qualifier_count > 0)
+    val.resize (qualifier_count);
+
   for (int i = 0; i < qualifier_count; i++)
     {
       if (x[i])
 	{
 	  tree_constant tmp = x[i]->eval (0);
 	  if (error_state)
 	    {
 	      ::error ("evaluating plot using command");
 	      return -1;
 	    }
 
-	  double val;
+	  double val_tmp;
 	  if (tmp.is_defined ())
 	    {
-	      val = tmp.double_value ();
-	      if (i == 0)
-		plot_buf << " " << GNUPLOT_COMMAND_USING << " ";
-	      else
-		plot_buf << ":";
+	      val_tmp = tmp.double_value ();
 
-	      int n = NINT (val);
+	      if (error_state)
+		return -1;
 
+	      int n = NINT (val_tmp);
 	      if (n < 1 || n_max > 0 && n > n_max)
 		{
 		  ::error ("using: column %d out of range", n); 
 		  return -1;
 		}
 	      else
-		plot_buf << n;
+		val.elem (i) = n;
 	    }
 	  else
 	    return -1;
 	}
       else
 	return -1;
     }
 
   if (scanf_fmt)
     warning ("ignoring scanf format in plot command");
 
+  have_values = 1;
+
+  return 0;
+}
+
+ColumnVector
+subplot_using::values (int ndim, int n_max)
+{
+  int status = eval (ndim, n_max);
+
+  if (status < 0 || ! have_values)
+    return -1;
+
+  return val;
+}
+
+int
+subplot_using::print (int ndim, int n_max, ostrstream& plot_buf)
+{
+  int status = eval (ndim, n_max);
+
+  if (status < 0 || ! have_values)
+    return -1;
+
+  for (int i = 0; i < qualifier_count; i++)
+    {
+      if (i == 0)
+	plot_buf << " " << GNUPLOT_COMMAND_USING << " ";
+      else
+	plot_buf << ":";
+
+      plot_buf << val.elem (i);
+    }
+
   return 0;
 }
 
 void
 subplot_using::print_code (ostream& os)
 {
   os << " using ";
   for (int i = 0; i < qualifier_count; i++)
@@ -660,16 +694,24 @@ subplot_style::print (ostrstream& plot_b
 	}
     }
   else
     return -1;
 
   return 0;
 }
 
+int
+subplot_style::errorbars (void)
+{
+  return (style
+	  && (almost_match ("errorbars", style, 1, 0)
+	      || almost_match ("boxerrorbars", style, 5, 0)));
+}
+
 void
 subplot_style::print_code (ostream& os)
 {
   os << " with " << style;
 
   if (linetype)
     {
       os << " ";
@@ -678,84 +720,144 @@ subplot_style::print_code (ostream& os)
 
   if (pointtype)
     {
       os << " ";
       pointtype->print_code (os);
     }
 }
 
+tree_constant
+subplot::extract_plot_data (int ndim, tree_constant& data)
+{
+  tree_constant retval;
+
+  if (using)
+    {
+      ColumnVector val = using->values (ndim);
+
+      Octave_object args;
+      args(1) = val;
+      args(0) = tree_constant::magic_colon_t;
+
+      Octave_object tmp = data.eval (0, 1, args);
+      retval = tmp(0);
+
+      if (error_state)
+	return tree_constant ();
+    }
+  else
+    {
+      retval = data;
+    }
+
+  if (ndim == 2 && style && style->errorbars ())
+    {
+      int nc = retval.columns ();
+
+      if (nc < 3 || nc > 4)
+	{
+	  error ("plots with errorbars require 3 or 4 columns of data");
+	  error ("but %d were provided", nc);
+	  return tree_constant ();
+	}
+    }
+
+  return retval;
+}
+
 int
-subplot::print (int ndim, ostrstream& plot_buf)
+subplot::handle_plot_data (int ndim, ostrstream& plot_buf)
 {
-  int nc = 0;
   if (plot_data)
     {
       tree_constant data = plot_data->eval (0);
+
       if (! error_state && data.is_defined ())
 	{
 	  char *file = 0;
 	  if (data.is_string ())
 	    {
+// Should really try to look at data file to determine n_max.  Can't
+// do much about other arbitrary gnuplot commands though...
+
+	      int n_max = 0;
+
 	      file = tilde_expand (data.string_value ());
 	      ifstream ftmp (file);
 	      if (ftmp)
 		{
 		  plot_buf << " \"" << file << '"';
 		  free (file);
-		  goto have_existing_file_or_command;
 		}
 	      else
 		{
 		  free (file);
 		  file = 0;
 
 // Opening as a file failed.  Let's try passing it along as a plot
 // command.
 		  plot_buf << " " << data.string_value ();
-		  goto have_existing_file_or_command;
+		}
+
+	      if (using)
+		{
+		  int status = using->print (ndim, n_max, plot_buf);
+		  if (status < 0)
+		    return -1;
 		}
 	    }
-
-	  nc = data.columns ();
-	  switch (ndim)
+	  else
 	    {
-	    case 2:
-	      file = save_in_tmp_file (data, ndim);
-	      break;
+// Eliminate the need for printing a using clause to plot_buf.
+
+	      tree_constant tmp_data = extract_plot_data (ndim, data);
+
+	      if (tmp_data.is_defined ())
+		{
+		  switch (ndim)
+		    {
+		    case 2:
+		      file = save_in_tmp_file (tmp_data, ndim);
+		      break;
 
-	    case 3:
-	      file = save_in_tmp_file (data, ndim, parametric_plot);
-	      break;
+		    case 3:
+		      file = save_in_tmp_file (tmp_data, ndim,
+					       parametric_plot);
+		      break;
 
-	    default:
-	      gripe_2_or_3_dim_plot ();
-	      break;
-	    }
+		    default:
+		      gripe_2_or_3_dim_plot ();
+		      break;
+		    }
 
-	  if (file)
-	    {
-	      mark_for_deletion (file);
-	      plot_buf << " \"" << file << '"';
+		  if (file)
+		    {
+		      mark_for_deletion (file);
+		      plot_buf << " \"" << file << '"';
+		    }
+		}
 	    }
 	}
       else
 	return -1;
     }
   else
     return -1;
 
- have_existing_file_or_command:
+  return 0;
+}
 
-  if (using)
-    {
-      int status = using->print (ndim, nc, plot_buf);
-      if (status < 0)
-	return -1;
-    }
+int
+subplot::print (int ndim, ostrstream& plot_buf)
+{
+  int status = handle_plot_data (ndim, plot_buf);
+
+  if (status < 0)
+    return -1;
 
   if (title)
     {
       tree_constant tmp = title->eval (0);
       if (! error_state && tmp.is_string ())
 	plot_buf << " " << GNUPLOT_COMMAND_TITLE << " "
 	  << '"' << tmp.string_value () << '"';
       else
diff --git a/src/pt-plot.h b/src/pt-plot.h
--- a/src/pt-plot.h
+++ b/src/pt-plot.h
@@ -36,16 +36,19 @@ class plot_limits;
 class plot_range;
 class subplot_using;
 class subplot_style;
 class subplot;
 class subplot_list;
 
 #include <SLList.h>
 
+#include "dColVector.h"
+
+#include "idx-vector.h"
 #include "tree-cmd.h"
 #include "tree-expr.h"
 
 class
 tree_plot_command : public tree_command
 {
 public:
   tree_plot_command (void);
@@ -112,39 +115,47 @@ public:
   subplot_using (tree_expression *fmt);
 
   ~subplot_using (void);
 
   subplot_using *set_format (tree_expression *fmt);
 
   subplot_using *add_qualifier (tree_expression *t);
 
+  int eval (int ndim, int n_max);
+
+  ColumnVector values (int ndim, int n_max = 0);
+
   int print (int ndim, int n_max, ostrstream& plot_buf);
 
   void print_code (ostream& os);
 
 private:
   int qualifier_count;
   tree_expression *x[4];
   tree_expression *scanf_fmt;
+  int have_values;
+  ColumnVector val;
 };
 
 class
 subplot_style : public tree_print_code
 {
 public:
   subplot_style (void);
   subplot_style (char *s);
   subplot_style (char *s, tree_expression *lt);
   subplot_style (char *s, tree_expression *lt, tree_expression *pt);
 
   ~subplot_style (void);
 
   int print (ostrstream& plot_buf);
 
+  int errorbars (void);
+
   void print_code (ostream& os);
 
 private:
   char *style;
   tree_expression *linetype;
   tree_expression *pointtype;
 };
 
@@ -185,16 +196,20 @@ public:
       delete style;
     }
 
   void set_data (tree_expression *data)
     { plot_data = data; }
 
   int print (int ndim, ostrstream& plot_buf);
 
+  tree_constant extract_plot_data (int ndim, tree_constant& data);
+
+  int handle_plot_data (int ndim, ostrstream& plot_buf);
+
   void print_code (ostream& os);
 
 private:
   tree_expression *plot_data;
   subplot_using *using;
   tree_expression *title;
   subplot_style *style;
 };
