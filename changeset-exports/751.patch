# HG changeset patch
# User jwe
# Date 780950787 0
#      Fri Sep 30 18:46:27 1994 +0000
# Node ID c9f3cb77478d3387e9ccff8f5f91eb52b279b3d4
# Parent  09d3f476c85b36080391047469ff997966cdbc42
[project @ 1994-09-30 18:46:17 by jwe]

diff --git a/src/Makefile.in b/src/Makefile.in
--- a/src/Makefile.in
+++ b/src/Makefile.in
@@ -62,32 +62,32 @@ DLD_OBJ = f-balance.o f-chol.o f-colloc.
 	f-log.o f-lpsolve.o f-lsode.o f-lu.o f-minmax.o f-npsol.o \
 	f-pinv.o f-qpsol.o f-qr.o f-quad.o f-qzval.o f-rand.o \
 	f-schur.o f-sort.o f-svd.o f-syl.o
 
 INCLUDES = arith-ops.h builtins.h defaults.h.in defun.h defun-dld.h \
 	defun-int.h dirfns.h dynamic-ld.h error.h file-io.h fnmatch.h \
 	getopt.h gripes.h help.h idx-vector.h input.h lex.h \
 	load-save.h mappers.h missing-math.h octave.h octave-hist.h \
-	oct-obj.h pager.h parse.h pr-output.h procstream.h \
+	oct-map.h oct-obj.h pager.h parse.h pr-output.h procstream.h \
 	sighandlers.h statdefs.h symtab.h sysdep.h token.h \
 	tree-base.h tree-cmd.h tree-const.h tree-expr.h tree-misc.h \
 	tree-plot.h tc-rep.h unwind-prot.h user-prefs.h utils.h \
-	variables.h version.h xdiv.h xpow.h SLStack.h Stack.h
+	variables.h version.h xdiv.h xpow.h Map.h SLStack.h Stack.h
 
 SOURCES = arith-ops.cc data.cc dirfns.cc dynamic-ld.cc \
 	error.cc file-io.cc fnmatch.c getopt.c getopt1.c gripes.cc \
 	help.cc idx-vector.cc input.cc lex.l load-save.cc mappers.cc \
-	octave.cc oct-obj.cc octave-hist.cc pager.cc parse.y \
+	octave.cc octave-hist.cc oct-obj.cc pager.cc parse.y \
 	pr-output.cc procstream.cc sighandlers.cc strcasecmp.c \
 	strncase.c symtab.cc sysdep.cc tc-inlines.cc tc-rep.cc \
-	timefns.cc token.cc tree-base.cc tree-cmd.cc tree-const.cc \
-	tree-expr.cc tree-misc.cc tree-plot.cc unwind-prot.cc \
-	user-prefs.cc utils.cc variables.cc xdiv.cc xpow.cc \
-	SLStack.cc \
+	tc-rep-ass.cc tc-rep-idx.cc timefns.cc token.cc tree-base.cc \
+	tree-cmd.cc tree-const.cc tree-expr.cc tree-misc.cc \
+	tree-plot.cc unwind-prot.cc user-prefs.cc utils.cc \
+	variables.cc xdiv.cc xpow.cc Map.cc SLStack.cc \
 	$(DLD_SRC)
 
 # Ugh.
 
 DEP_SOURCES_2 = $(patsubst %.l, %.cc, $(SOURCES)) builtins.cc
 DEP_SOURCES_1 = $(patsubst %.y, %.cc, $(DEP_SOURCES_2))
 DEP_SOURCES = $(patsubst %.c, %.d, $(DEP_SOURCES_1))
 MAKEDEPS = $(patsubst %.cc, %.d, $(DEP_SOURCES))
@@ -101,19 +101,20 @@ DEF_FILES = $(patsubst %.cc, %.def, $(DE
 # XXX FIXME XXX -- Should these be generated automatically from the
 # list of source files?
 
 OBJECTS = arith-ops.o builtins.o data.o dirfns.o dynamic-ld.o error.o \
 	file-io.o fnmatch.o getopt.o getopt1.o gripes.o help.o \
 	idx-vector.o input.o lex.o load-save.o mappers.o octave.o \
 	octave-hist.o oct-obj.o pager.o parse.o pr-output.o \
 	procstream.o sighandlers.o strcasecmp.o strncase.o symtab.o \
-	sysdep.o tc-rep.o timefns.o token.o tree-base.o tree-cmd.o \
-	tree-const.o tree-expr.o tree-plot.o tree-misc.o unwind-prot.o \
-	user-prefs.o utils.o variables.o xdiv.o xpow.o SLStack.o
+	sysdep.o tc-rep.o tc-rep-ass.o tc-rep-idx.o timefns.o token.o \
+	tree-base.o tree-cmd.o tree-const.o tree-expr.o tree-plot.o \
+	tree-misc.o unwind-prot.o user-prefs.o utils.o variables.o \
+	xdiv.o xpow.o Map.o SLStack.o 
 
 OCTAVE_LIBS = @LIBOCTDLD@ ../liboctave.a ../libcruft.a ../libinfo.a \
 	../libreadline.a ../libkpathsea.a @LIBDLD@
 
 DISTFILES = Makefile.in mkdefs mkbuiltins \
 	parse.cc lex.cc y.tab.h $(INCLUDES) $(SOURCES)
 
 all: defaults.h octave
diff --git a/src/parse.y b/src/parse.y
--- a/src/parse.y
+++ b/src/parse.y
@@ -106,16 +106,20 @@ int past_plot_range = 0;
 int in_plot_range = 0;
 
 // Nonzero means we're looking at the using part of a plot command.
 int in_plot_using = 0;
 
 // Nonzero means we're looking at the style part of a plot command.
 int in_plot_style = 0;
 
+// Nonzero means we're looking at an indirect reference to a structure
+// element.
+int looking_at_indirect_ref = 0;
+
 // Forward declarations for some functions defined at the bottom of
 // the file.
 
 // Generic error messages.
 static void yyerror (char *s);
 
 // Error mesages for mismatched end tokens.
 static void end_error (char *type, token::end_tok_type ettype, int l, int c);
@@ -127,35 +131,38 @@ static int check_end (token *tok, token:
 // assignment to the builtin variable ans.
 static tree_expression *maybe_convert_to_ans_assign (tree_expression *expr);
 
 // Maybe print a warning if an assignment expression is used as the
 // test in a logical expression.
 static void maybe_warn_assign_as_truth_value (tree_expression *expr);
 
 // Build a binary expression.
-static tree_expression *make_binary_op (int op, tree_expression *op1,
-				    	token *tok_val,
-					tree_expression *op2);
+static tree_expression *make_binary_op
+	 (int op, tree_expression *op1,	token *tok_val, tree_expression *op2);
 
 // Build a prefix expression.
-static tree_expression *make_prefix_op (int op, tree_identifier *op1,
-					token *tok_val);
+static tree_expression *make_prefix_op
+	 (int op, tree_identifier *op1, token *tok_val);
 
 // Build a postfix expression.
-static tree_expression *make_postfix_op (int op, tree_identifier *op1,
-					 token *tok_val);
+static tree_expression *make_postfix_op
+	 (int op, tree_identifier *op1, token *tok_val);
 
 // Build a binary expression.
-static tree_expression *make_unary_op (int op, tree_expression *op1,
-				       token *tok_val);
+static tree_expression *make_unary_op
+	 (int op, tree_expression *op1, token *tok_val);
 
 // Make an expression that handles assignment of multiple values.
-static tree_expression *make_multi_val_ret (tree_expression *rhs,
-					    int l = -1, int c = -1);
+static tree_expression *make_multi_val_ret
+	 (tree_expression *rhs, int l = -1, int c = -1);
+
+// Make an index expression.
+static tree_index_expression *make_index_expression
+	 (tree_indirect_ref *indir, tree_argument_list *args);
 
 #define ABORT_PARSE \
   do \
     { \
       global_command = 0; \
       reset_parser (); \
       yyerrok; \
       if (interactive) \
@@ -175,16 +182,17 @@ static tree_expression *make_multi_val_r
   token *tok_val;
 
 // Types for the nonterminals we generate.
   tree *tree_type;
   tree_expression *tree_expression_type;
   tree_constant *tree_constant_type;
   tree_matrix *tree_matrix_type;
   tree_identifier *tree_identifier_type;
+  tree_indirect_ref *tree_indirect_ref_type;
   tree_function *tree_function_type;
   tree_index_expression *tree_index_expression_type;
   tree_colon_expression *tree_colon_expression_type;
   tree_argument_list *tree_argument_list_type;
   tree_parameter_list *tree_parameter_list_type;
   tree_command *tree_command_type;
   tree_if_command *tree_if_command_type;
   tree_if_clause *tree_if_clause_type;
@@ -212,30 +220,32 @@ static tree_expression *make_multi_val_r
 %token <tok_val> PLUS_PLUS MINUS_MINUS POW EPOW
 %token <tok_val> NUM IMAG_NUM
 %token <tok_val> NAME SCREW
 %token <tok_val> END
 %token <tok_val> PLOT
 %token <tok_val> TEXT STYLE
 %token <tok_val> FOR WHILE IF ELSEIF ELSE BREAK CONTINUE FUNC_RET
 %token <tok_val> GLOBAL
+%token <tok_val> TEXT_ID
 
 // Other tokens.
 %token LEXICAL_ERROR
 %token FCN SCREW_TWO
 %token ELLIPSIS
 %token END_OF_INPUT
 %token USING TITLE WITH COLON OPEN_BRACE CLOSE_BRACE
 
 // Nonterminals we construct.
 %type <tree_type> input
 %type <tree_expression_type> expression simple_expr simple_expr1
 %type <tree_expression_type> ans_expression title
 %type <tree_matrix_type> matrix
 %type <tree_identifier_type> identifier
+%type <tree_indirect_ref_type> indirect_ref indirect_ref1
 %type <tree_function_type> func_def1 func_def2 func_def3
 %type <tree_index_expression_type> variable word_list_cmd
 %type <tree_colon_expression_type> colon_expr
 %type <tree_argument_list_type> arg_list word_list
 %type <tree_parameter_list_type> param_list param_list1
 %type <tree_parameter_list_type> return_list return_list1
 %type <tree_command_type> command func_def
 %type <tree_if_command_type> if_command
@@ -994,32 +1004,38 @@ fcn_end_or_eof	: END
 		  }
 		| END_OF_INPUT
 		  {
 		    if (! (reading_fcn_file || reading_script_file))
 		      YYABORT;
 		  }
 		;
 
-variable	: identifier
+indirect_ref	: indirect_ref1
 		  {
-		    $$ = new tree_index_expression
-			   ($1, $1->line (), $1->column ());
+		    looking_at_indirect_ref = 0;
+		    $$ = $1;
 		  }
-		| identifier '(' arg_list ')'
+
+indirect_ref1	: identifier
 		  {
-		    $$ = new tree_index_expression
-			   ($1, $3, $1->line (), $1->column ());
+		    $$ = new tree_indirect_ref ($1, $1->line (),
+						$1->column ());
 		  }
-		| identifier '(' ')'
-		  {
-		    $$ = new tree_index_expression ($1, 0, $1->line (),
-						    $1->column ()); 
-		  }
-		| identifier '['
+		| indirect_ref1 '.' { looking_at_indirect_ref = 1; } TEXT_ID
+		  { $$ = $1->chain ($4->string ()); }
+		;
+
+variable	: indirect_ref
+		  { $$ = make_index_expression ($1, 0); }
+		| indirect_ref '(' ')'
+		  { $$ = make_index_expression ($1, 0); }
+		| indirect_ref '(' arg_list ')'
+		  { $$ = make_index_expression ($1, $3); }
+		| indirect_ref '['
 		  {
 		    yyerror ("parse error");
 		    error ("use `(\' and `)\' as index operators, not\
  `[\' and `]\'"); 
 		    $$ = 0;
 		    ABORT_PARSE;
 		  }
 		;
@@ -1509,8 +1525,28 @@ make_multi_val_ret (tree_expression *rhs
   else
     {
       yyerror ("parse error");
       error ("invalid identifier list for assignment");
     }
 
   return retval;
 }
+
+static tree_index_expression *
+make_index_expression (tree_indirect_ref *indir, tree_argument_list *args)
+{
+  tree_index_expression *retval = 0;
+
+  int l = indir->line ();
+  int c = indir->column ();
+
+  if (indir->is_identifier_only ())
+    {
+      indir->preserve_identifier ();
+      retval = new tree_index_expression (indir->ident (), args, l, c);
+      delete indir;
+    }
+  else
+    retval =  new tree_index_expression (indir, args, l, c);
+
+  return retval;
+}
