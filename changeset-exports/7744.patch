# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1209580361 14400
#      Wed Apr 30 14:32:41 2008 -0400
# Node ID 14b841c47a5f35d752b5d29dd94f5fbd112bc797
# Parent  fbe27e4775789df7920d3097004015286f140f41
handle load/save for handles to built-in functions

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,15 +1,23 @@
 2008-04-30  John W. Eaton  <jwe@octave.org>
 
+	* ls-oct-ascii.cc (extract_keyword): Return early if first char is
+	not a comment character.
+	(read_ascii_data): Accept .nargin. and .nargout. as valid identifiers.
+
+	* ov-fcn-handle.cc: Combine tests.  Test saving and loading
+	handles for built-in, .oct, and .m functions.
+	(octave_fcn_handle::save_ascii, octave_fcn_handle::save_binary,
+	octave_fcn_handle::save_hdf5, octave_fcn_handle::print):
+	Avoid dereferencing invalid pointer.
+
 	* data.cc: Fix tests.  Use "%!assert", not "%! assert" for
 	individual assert tests.
 
-	* ov-fcn-handle.cc: Create handle pointing to flops instead of log2.
-
 2008-04-30  Jaroslav Hajek <highegg@gmail.com>
 
 	* ov-base.cc, ov-base.h, ov-bool-mat.h, ov-bool-sparse.h,
 	ov-bool.h, ov-complex.cc, ov-complex.h, ov-cx-mat.cc, ov-cx-mat.h,
 	ov-cx-sparse.cc, ov-cx-sparse.h, ov-intx.h, ov-range.h,
 	ov-re-mat.cc, ov-re-mat.h, ov-re-sparse.cc, ov-re-sparse.h,
 	ov-scalar.cc, ov-scalar.h, ov.h:
  	Provide log2 mapper function.
diff --git a/src/ls-oct-ascii.cc b/src/ls-oct-ascii.cc
--- a/src/ls-oct-ascii.cc
+++ b/src/ls-oct-ascii.cc
@@ -76,16 +76,20 @@ static int Vsave_precision = 16;
 //
 //  [%#][ \t]*keyword[ \t]*:[ \t]*string-value[ \t]*\n
 
 std::string
 extract_keyword (std::istream& is, const char *keyword, const bool next_only)
 {
   std::string retval;
 
+  int ch = is.peek ();
+  if (next_only && ch != '%' && ch != '#')
+    return retval;
+
   char c;
   while (is.get (c))
     {
       if (c == '%' || c == '#')
 	{
 	  std::ostringstream buf;
 	
 	  while (is.get (c) && (c == ' ' || c == '\t' || c == '%' || c == '#'))
@@ -250,21 +254,18 @@ read_ascii_data (std::istream& is, const
     {
       if (count == 0)
 	error ("load: empty name keyword or no data found in file `%s'",
 	       filename.c_str ());
 
       return std::string ();
     }
 
-  if (name == CELL_ELT_TAG)
-    {
-      // This is OK -- name won't be used.
-    }
-  else if (! valid_identifier (name))
+  if (! (name == ".nargin." || name == ".nargout."
+	 || name == CELL_ELT_TAG || valid_identifier (name)))
     {
       error ("load: bogus identifier `%s' found in file `%s'",
 	     name.c_str (), filename.c_str ());
       return std::string ();
     }
 
   // Look for type keyword.
 
diff --git a/src/ov-fcn-handle.cc b/src/ov-fcn-handle.cc
--- a/src/ov-fcn-handle.cc
+++ b/src/ov-fcn-handle.cc
@@ -245,18 +245,22 @@ octave_fcn_handle::save_ascii (std::ostr
 	    {
 	      if (! save_ascii_data (os, p->varval (), p->name (), false, 0))
 		return os;
 	    }
 	}
     }
   else
     {
+      octave_function *f = function_value ();
+      std::string fnm = f ? f->fcn_file_name () : std::string ();
+
       os << "# octaveroot: " << OCTAVE_EXEC_PREFIX << "\n";
-      os << "# path: " << user_function_value ()-> fcn_file_name () << "\n";
+      if (! fnm.empty ())
+	os << "# path: " << fnm << "\n";
       os << nm << "\n";
     }
 
   return true;
 }
 
 bool
 octave_fcn_handle::load_ascii (std::istream& is)
@@ -370,42 +374,16 @@ octave_fcn_handle::load_ascii (std::istr
       symbol_table::erase_scope (local_scope);
     }
   else
     success = set_fcn (octaveroot, fpath);
 
   return success;
 }
 
-/* 
-
-%!test
-%! a = 2;
-%! f = @(x) a + x;
-%! g = @(x) 2 * x;
-%! h = @flops;
-%! f2 = f;
-%! g2 = g;
-%! h2 = h;
-%! nm = tmpnam();
-%! unwind_protect
-%!   save ("-text", nm, "f2", "g2", "h2");
-%!   clear f2 g2 h2
-%!   load (nm);
-%!   assert (f(2),f2(2));
-%!   assert (g(2),g2(2));
-%!   assert (g(3),g2(3));
-%!   unlink (nm);
-%!   save ("-text", nm, "f2", "g2", "h2");
-%! unwind_protect_cleanup
-%!   unlink (nm);
-%! end_unwind_protect
-
-*/
-
 bool
 octave_fcn_handle::save_binary (std::ostream& os, bool& save_as_floats)
 {
   if (nm == "@<anonymous>")
     {
       std::ostringstream nmbuf;
 
       if (fcn.is_undefined ())
@@ -445,18 +423,20 @@ octave_fcn_handle::save_binary (std::ost
 		return os;
 	    }
 	}
     }
   else
     {
       std::ostringstream nmbuf;
 
-      nmbuf << nm << "\n" << OCTAVE_EXEC_PREFIX << "\n" 
-	    << user_function_value ()-> fcn_file_name () ;
+      octave_function *f = function_value ();
+      std::string fnm = f ? f->fcn_file_name () : std::string ();
+
+      nmbuf << nm << "\n" << OCTAVE_EXEC_PREFIX << "\n" << fnm;
 
       std::string buf_str = nmbuf.str ();
       int32_t tmp = buf_str.length ();
       os.write (reinterpret_cast<char *> (&tmp), 4);
       os.write (buf_str.c_str (), buf_str.length ());
     }
 
   return true;
@@ -567,42 +547,16 @@ octave_fcn_handle::load_binary (std::ist
 	}
 
       success = set_fcn (octaveroot, fpath);
      }
  
  return success;
 }
 
-/* 
-
-%!test
-%! a = 2;
-%! f = @(x) a + x;
-%! g = @(x) 2 * x;
-%! h = @flops;
-%! f2 = f;
-%! g2 = g;
-%! h2 = h;
-%! nm = tmpnam();
-%! unwind_protect
-%!   save ("-binary", nm, "f2", "g2", "h2");
-%!   clear f2 g2 h2
-%!   load (nm);
-%!   assert (f(2),f2(2));
-%!   assert (g(2),g2(2));
-%!   assert (g(3),g2(3));
-%!   unlink (nm);
-%!   save ("-binary", nm, "f2", "g2", "h2");
-%! unwind_protect_cleanup
-%!   unlink (nm);
-%! end_unwind_protect
-
-*/
-
 #if defined (HAVE_HDF5)
 bool
 octave_fcn_handle::save_hdf5 (hid_t loc_id, const char *name,
 			      bool save_as_floats)
 {
   bool retval = true;
 
   hid_t group_hid = -1;
@@ -718,17 +672,19 @@ octave_fcn_handle::save_hdf5 (hid_t loc_
 		break;
 	    }
 	  H5Gclose (data_hid);
 	}
     }
   else
     {
       std::string octaveroot = OCTAVE_EXEC_PREFIX;
-      std::string fpath = user_function_value ()-> fcn_file_name ();
+
+      octave_function *f = function_value ();
+      std::string fpath = f ? f->fcn_file_name () : std::string ();
 
       H5Sclose (space_hid);
       hdims[0] = 1;
       hdims[1] = octaveroot.length ();
       space_hid = H5Screate_simple (0 , hdims, 0);
       if (space_hid < 0)
 	{
 	  H5Tclose (type_hid);
@@ -1107,44 +1063,54 @@ octave_fcn_handle::load_hdf5 (hid_t loc_
 
   H5Tclose (type_hid);
   H5Sclose (space_hid);
   H5Gclose (group_hid);
 
   return success;
 }
 
+#endif
+
 /* 
 
 %!test
+%! a = 2;
+%! f = @(x) a + x;
+%! g = @(x) 2 * x;
+%! hm = @flops;
+%! hdld = @time;
+%! hbi = @log2;
+%! f2 = f;
+%! g2 = g;
+%! hm2 = hm;
+%! hdld2 = hdld;
+%! hbi2 = hbi;
+%! modes = {"-text", "-binary"};
 %! if (!isempty(findstr(octave_config_info ("DEFS"),"HAVE_HDF5")))
-%!   a = 2;
-%!   f = @(x) a + x;
-%!   g = @(x) 2 * x;
-%!   h = @flops;
-%!   f2 = f;
-%!   g2 = g;
-%!   h2 = h;
+%!   modes(end+1) = "-hdf5";
+%! endif
+%! for i = modes
+%!   mode = modes{1};
 %!   nm = tmpnam();
 %!   unwind_protect
-%!     save ("-hdf5", nm, "f2", "g2", "h2");
-%!     clear f2 g2 h2
+%!     save (mode, nm, "f2", "g2", "hm2", "hdld2", "hbi2");
+%!     clear f2 g2 hm2 hdld2 hbi2
 %!     load (nm);
 %!     assert (f(2),f2(2));
 %!     assert (g(2),g2(2));
 %!     assert (g(3),g2(3));
 %!     unlink (nm);
-%!     save ("-hdf5", nm, "f2", "g2", "h2");
+%!     save (mode, nm, "f2", "g2", "hm2", "hdld2", "hbi2");
 %!   unwind_protect_cleanup
 %!     unlink (nm);
 %!   end_unwind_protect
-%! endif
+%! endfor
 
 */
-#endif
 
 void
 octave_fcn_handle::print (std::ostream& os, bool pr_as_read_syntax) const
 {
   print_raw (os, pr_as_read_syntax);
   newline (os);
 }
 
@@ -1237,17 +1203,17 @@ Return a struct containing information a
   octave_value retval;
 
   if (args.length () == 1)
     {
       octave_fcn_handle *fh = args(0).fcn_handle_value ();
 
       if (! error_state)
 	{
-	  octave_function *fcn = fh ? fh->function_value (true) : 0;
+	  octave_function *fcn = fh ? fh->function_value () : 0;
 
 	  if (fcn)
 	    {
 	      Octave_map m;
 
 	      std::string fh_nm = fh->fcn_name ();
 
 	      if (fh_nm == "@<anonymous>")
@@ -1296,19 +1262,19 @@ Return a struct containing information a
 			       p != vars.end (); p++)
 			    {
 			      ws.assign (p->name (), p->varval ());
 			    }
 
 			  m.assign ("workspace", ws);
 			}
 		    }
-		  else if (fcn->is_user_function ())
+		  else if (fcn->is_user_function () || fcn->is_user_script ())
 		    {
-		      octave_user_function *fu = fh->user_function_value ();
+		      octave_function *fu = fh->function_value ();
 		      m.assign ("file", fu->fcn_file_name ());
 		    }
 		  else
 		    m.assign ("file", "");
 		}
 	      else
 		m.assign ("file", nm);
 
