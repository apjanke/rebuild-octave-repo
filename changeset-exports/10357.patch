# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1267092705 -3600
#      Thu Feb 25 11:11:45 2010 +0100
# Node ID 7658cd4bdcf280612290a08e8b80a105673a0e47
# Parent  1d7930b77ab9074c86426ac5f768f696d915a0ec
handle Infs and NaNs in str2double

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,14 @@
+2010-02-25  Jaroslav Hajek  <highegg@gmail.com>
+
+	* DLD-FUNCTIONS/str2double.cc (single_number): New helper func.
+	(extract_number): Call it instead of >> to get Inf's and NaN's
+	correctly.
+
 2010-02-25  Jaroslav Hajek  <highegg@gmail.com>
 
 	* DLD-FUNCTIONS/str2double.cc: New source.
 
 2010-02-19  John W. Eaton  <jwe@octave.org>
 
 	* DLD-FUNCTIONS/qr.cc: Increase tolerance for test.
 
diff --git a/src/DLD-FUNCTIONS/str2double.cc b/src/DLD-FUNCTIONS/str2double.cc
--- a/src/DLD-FUNCTIONS/str2double.cc
+++ b/src/DLD-FUNCTIONS/str2double.cc
@@ -35,54 +35,89 @@ along with Octave; see the file COPYING.
 #include "Cell.h"
 #include "ov.h"
 #include "defun-dld.h"
 #include "gripes.h"
 #include "utils.h"
 
 static inline bool 
 is_imag_unit (int c)
-{ return c == 'i' || c == 'j' || c == 'I' || c == 'J'; }
+{ return c == 'i' || c == 'j'; }
+
+static std::istringstream&
+single_num (std::istringstream& is, double& num)
+{
+  char c = is.peek ();
+  if (c == 'I')
+    {
+      // It's infinity.
+      is.get ();
+      char c1 = is.get (), c2 = is.get ();
+      if (c1 == 'n' && c2 == 'f')
+        {
+          num = octave_Inf;
+          is.peek (); // Sets eof bit.
+        }
+      else
+        is.setstate (std::ios::failbit); // indicate that read has failed.
+    }
+  else if (c == 'N')
+    {
+      // It's NaN.
+      is.get ();
+      char c1 = is.get (), c2 = is.get ();
+      if (c1 == 'a' && c2 == 'N')
+        {
+          num = octave_NaN;
+          is.peek (); // Sets eof bit.
+        }
+      else
+        is.setstate (std::ios::failbit); // indicate that read has failed.
+    }
+  else
+    is >> num;
+
+  return is;
+}
 
 static std::istringstream&
 extract_num (std::istringstream& is, double& num, bool& imag, bool& have_sign)
 {
-  if (is.eof ())
-    return is;
   have_sign = imag = false;
 
   char c = is.peek ();
   bool negative = false;
 
   // Accept leading sign.
   if (c == '+' || c == '-')
     {
       negative = c == '-';
       is.get ();
       c = is.peek ();
       have_sign = true;
     }
 
   if (is_imag_unit (c))
     {
-      is.get ();
+      c = is.get ();
       // It's i*num or just i.
       imag = true;
-      if (is.peek () == '*')
+      char cn = is.peek ();
+      if (cn == '*')
         {
           // Multiplier follows, we extract it as a number.
           is.get ();
-          is >> num;
+          single_num (is, num);
         }
       else
         num = 1.0;
     }
   else
     {
-      is >> num;
+      single_num (is, num);
       if (is.good ())
         {
           c = is.peek ();
           if (c == '*')
             {
               is.get ();
               c = is.get ();
               if (is_imag_unit (c))
@@ -110,17 +145,19 @@ str2double1 (std::string str)
   se = std::remove (str.begin (), se, ',');
   se = std::remove (str.begin (), se, ' ');
   str.erase (se, str.end ());
 
   std::istringstream is (str);
   double num;
   bool i1, i2, s1, s2;
 
-  if (! extract_num (is, num, i1, s1))
+  if (is.eof ())
+    val = octave_NaN;
+  else if (! extract_num (is, num, i1, s1))
     val = octave_NaN;
   else
     {
       if (i1)
         val.imag () = num;
       else
         val.real () = num;
 
@@ -203,10 +240,17 @@ and an array of the same dimensions is r
 %!assert (str2double ("1,222.5"), 1222.5)
 %!assert (str2double ("i"), i)
 %!assert (str2double ("2 + j"), 2+j)
 %!assert (str2double ("i*2 + 3"), 3+2i)
 %!assert (str2double (".5*i + 3.5"), 3.5+0.5i)
 %!assert (str2double ("1e-3 + i*.25"), 1e-3 + i*.25)
 %!assert (str2double (["2 + j";"1.25e-3";"-05"]), [2+i; 1.25e-3; -05])
 %!assert (str2double ({"2 + j","1.25e-3","-05"}), [2+i, 1.25e-3, -05])
+%!assert (str2double ("NaN"), NaN)
+%!assert (str2double ("Inf"), Inf)
+%!assert (str2double ("-Inf"), -Inf)
+%!assert (str2double ("i*Inf"), complex (0, Inf))
+%!assert (str2double ("NaN + Inf*i"), complex (NaN, Inf))
+%!assert (str2double ("Inf - Inf*i"), complex (Inf, -Inf))
+%!assert (str2double ("-i*NaN - Inf"), complex (-Inf, -NaN))
 
 */
