# HG changeset patch
# User jwe
# Date 751590950 0
#      Mon Oct 25 23:15:50 1993 +0000
# Node ID 7a647cf4850c18550b6975110a9ffb267a309145
# Parent  2c7bce68e3d8f9fd528a34368a297ff605be7bc8
[project @ 1993-10-25 23:15:50 by jwe]

diff --git a/src/lex.l b/src/lex.l
--- a/src/lex.l
+++ b/src/lex.l
@@ -1012,21 +1012,23 @@ is_keyword (char *s)
  * Try to find an identifier in one symbol table or another.
  */
 static symbol_record *
 lookup_identifier (char *name)
 {
   if (curr_sym_tab == top_level_sym_tab)
     {
       symbol_record *lsr = curr_sym_tab->lookup (name, 0, 0);
-      if (lsr != (symbol_record *) NULL)
+      if (lsr != (symbol_record *) NULL && lsr->is_defined ())
 	return lsr;
 
       symbol_record *gsr = global_sym_tab->lookup (name, 0, 0);
-      if (gsr != (symbol_record *) NULL && ! (looping || iffing))
+      if (gsr != (symbol_record *) NULL
+	  && ! (looping || iffing)
+	  && (gsr->is_defined () || gsr->is_forced_global ()))
 	return gsr;
     }
 
   return curr_sym_tab->lookup (name, 1, 0);
 }
 
 /*
  * Grab the help text from an M-file.
diff --git a/src/octave.cc b/src/octave.cc
--- a/src/octave.cc
+++ b/src/octave.cc
@@ -93,16 +93,19 @@ char *host_name = (char *) NULL;
 char *home_directory = (char *) NULL;
 
 // Guess what?
 char *the_current_working_directory = (char *) NULL;
 
 // Load path specified on command line.
 char *load_path = (char *) NULL;
 
+// Name of the info file specified on command line.
+char *info_file = (char *) NULL;
+
 // If nonzero, don't do fancy line editing.
 int no_line_editing = 0;
 
 // Command number, counting from the beginning of this session.
 int current_command_number = 1;
 
 // Nonzero means we are exiting via the builtin exit or quit functions.
 int quitting_gracefully = 0;
@@ -117,29 +120,31 @@ jmp_buf toplevel;
 static int read_init_files = 1;
 
 // Nonzero means we don\'t print the usual startup message.
 static int inhibit_startup_message = 0;
 
 // Usage message
 static const char *usage_string = 
   "octave [-?dfhiqvx] [-p path] [--debug] [--help] [--interactive]\n\
-         [--norc] [--path path] [--quiet] [--version] [--echo-commands]\n\
-         [file]";
+         [--info-file file] [--norc] [--path path] [--quiet] [--version]\n\
+         [--echo-commands] [file]";
 
 // This is here so that it\'s more likely that the usage message and
 // the real set of options will agree.
 static const char *short_opts = "?dfhip:qvx";
 
 // Long options.
+#define INFO_FILE_OPTION 1
 static struct option long_opts[] =
   {
     { "debug", 0, 0, 'd' },
     { "help", 0, 0, 'h' },
     { "interactive", 0, 0, 'i' },
+    { "info-file", 1, 0, INFO_FILE_OPTION },
     { "norc", 0, 0, 'f' },
     { "path", 1, 0, 'p' },
     { "quiet", 0, 0, 'q' },
     { "version", 0, 0, 'v' },
     { "echo-commands", 0, 0, 'x' },
     { 0, 0, 0, 0 }
   };
 
@@ -167,16 +172,18 @@ initialize_globals (char *name)
     home_directory = strsave ("I have no home~!");
   else
     home_directory = strsave (hd);
 
   raw_prog_name = strsave (name);
   prog_name = strsave ("octave");
 
   load_path = default_path ();
+
+  info_file = default_info_file ();
 }
 
 void
 parse_and_execute (FILE *f, int print)
 {
   begin_unwind_frame ("parse_and_execute");
   
   YY_BUFFER_STATE old_buf = current_buffer ();
@@ -379,16 +386,20 @@ main (int argc, char **argv)
 	  inhibit_startup_message = 1;
 	  break;
 	case 'x':
 	  echo_input = 1;
 	  break;
 	case 'v':
 	  print_version_and_exit ();
 	  break;
+	case INFO_FILE_OPTION:
+	  if (optarg != (char *) NULL)
+	    info_file = strsave (optarg);
+	  break;
 	default:
 	  usage ();
 	  break;
 	}
     }
 
 // Make sure we clean up when we exit.
   atexit (cleanup_tmp_files);
diff --git a/src/symtab.cc b/src/symtab.cc
--- a/src/symtab.cc
+++ b/src/symtab.cc
@@ -420,32 +420,43 @@ symbol_record::save (ostream& os, int ma
 // does seem reasonable to print them for other undefined variables.
       if (strcmp (nm, "ans") != 0)
 	warning ("not saving undefined symbol `%s'", nm);
     }
 
   return status;
 }
 
-void
+int
 symbol_record::clear_visible (void)
 {
-  if (var != (symbol_def *) NULL && var->lifespan != symbol_def::eternal)
+  int status = 0;
+
+  if (is_defined ())
     {
-      if (--var->count <= 0)
-	delete var;
-      var = (symbol_def *) NULL;
-      forced_global = 0;
+      if (var != (symbol_def *) NULL
+	  && var->lifespan != symbol_def::eternal)
+	{
+	  if (--var->count <= 0)
+	    delete var;
+	  var = (symbol_def *) NULL;
+	  forced_global = 0;
+	  status = 1;
+	}
+      else if (fcn != (symbol_def *) NULL
+	       && fcn->lifespan != symbol_def::eternal)
+	{
+	  if (--fcn->count <= 0)
+	    delete fcn;
+	  fcn = (symbol_def *) NULL;
+	  status = 1;
+	}
     }
-  else if (fcn != (symbol_def *) NULL && fcn->lifespan != symbol_def::eternal)
-    {
-      if (--fcn->count <= 0)
-	delete fcn;
-      fcn = (symbol_def *) NULL;
-    }
+
+  return status;
 }
 
 void
 symbol_record::clear_all (void)
 {
   if (var != (symbol_def *) NULL && var->lifespan != symbol_def::eternal)
     {
       if (--var->count <= 0)
@@ -578,19 +589,18 @@ symbol_table::clear (const char *nm)
 
   symbol_record *prev = &table[index];
   symbol_record *curr = prev->next ();
 
   while (curr != (symbol_record *) NULL)
     {
       if (strcmp (curr->name (), nm) == 0)
 	{
-	  curr->clear_visible ();
-
-	  return 1;
+	  if (curr->clear_visible ())
+	    return 1;
 	}
       prev = curr;
       curr = curr->next ();
     }
 
   return 0;
 }
 
diff --git a/src/symtab.h b/src/symtab.h
--- a/src/symtab.h
+++ b/src/symtab.h
@@ -149,17 +149,17 @@ public:
   void document (const char *h);
 
   void protect (void);
   void unprotect (void);
   void make_eternal (void);
 
   int save (ostream& os, int mark_as_global = 0);
 
-  void clear_visible (void);
+  int clear_visible (void);
   void clear_all (void);
 
   void mark_as_formal_parameter (void);
   int is_formal_parameter (void) const;
 
   void mark_as_forced_global (void);
   int is_forced_global (void) const;
 
@@ -172,17 +172,17 @@ private:
   char *nm;
   int formal_param;
   int forced_global;
   symbol_def *var;
   symbol_def *fcn;
   sv_Function sv_fcn;
   symbol_record *next_elem;
 
-  symbol_record (const symbol_record& s);
+  symbol_record (const symbol_record& s) { assert (0); }
   symbol_record& operator = (const symbol_record& s);
 };
 
 /*
  * A symbol table.
  */
 class
 symbol_table
diff --git a/src/t-builtins.cc b/src/t-builtins.cc
--- a/src/t-builtins.cc
+++ b/src/t-builtins.cc
@@ -418,68 +418,70 @@ simple_help (void)
   maybe_page_output (output_buf);
 }
 
 static int
 try_info (const char *string, int force = 0)
 {
   int status = 0;
 
-  char *directory_name = strsave (DEFAULT_INFO_FILE);
+  char *directory_name = strsave (user_pref.info_file);
   char *temp = filename_non_directory (directory_name);
 
   if (temp != directory_name)
     {
       *temp = 0;
       info_add_path (directory_name, INFOPATH_PREPEND);
     }
 
   delete [] directory_name;
 
-  NODE *initial_node = info_get_node (DEFAULT_INFO_FILE, (char *)NULL);
+  NODE *initial_node = info_get_node (user_pref.info_file, (char *)NULL);
 
   if (! initial_node)
     {
       warning ("can't find info file!\n");
-      return status;
+      status = -1;
     }
-
-  initialize_info_session (initial_node, 0);
-
-  if (force || index_entry_exists (windows, string))
+  else
     {
-      terminal_clear_screen ();
+      initialize_info_session (initial_node, 0);
 
-      terminal_prep_terminal ();
+      if (force || index_entry_exists (windows, string))
+	{
+	  terminal_clear_screen ();
 
-      display_update_display (windows);
+	  terminal_prep_terminal ();
 
-      info_last_executed_command = (VFunction *)NULL;
+	  display_update_display (windows);
 
-      if (! force)
-	do_info_index_search (windows, 0, string);
+	  info_last_executed_command = (VFunction *)NULL;
+
+	  if (! force)
+	    do_info_index_search (windows, 0, string);
 
-      char *format = replace_in_documentation
-	("Type \"\\[quit]\" to quit, \"\\[get-help-window]\" for help.");
+	  char *format = replace_in_documentation
+	    ("Type \"\\[quit]\" to quit, \"\\[get-help-window]\" for help.");
 
-      window_message_in_echo_area (format);
+	  window_message_in_echo_area (format);
 
-      info_read_and_dispatch ();
+	  info_read_and_dispatch ();
 
-      terminal_goto_xy (0, screenheight - 1);
+	  terminal_goto_xy (0, screenheight - 1);
 
-      terminal_clear_to_eol ();
+	  terminal_clear_to_eol ();
 
-      terminal_unprep_terminal ();
+	  terminal_unprep_terminal ();
 
-      status = 1;
+	  status = 1;
+	}
+
+      finish_info_session (initial_node, 0);
     }
 
-  finish_info_session (initial_node, 0);
-
   return status;
 }
 
 /*
  * Print cryptic yet witty messages.
  */
 tree_constant
 builtin_help (int argc, char **argv)
diff --git a/src/toplev.h b/src/toplev.h
--- a/src/toplev.h
+++ b/src/toplev.h
@@ -48,16 +48,19 @@ extern char *host_name;
 extern char *home_directory;
 
 // Guess what?
 extern char *the_current_working_directory;
 
 // Load path specified on command line.
 extern char *load_path;
 
+// Name of the info file specified on command line.
+extern char *info_file;
+
 // If nonzero, don't do fancy line editing.
 extern int no_line_editing;
 
 // Command number, counting from the beginning of this session.
 extern int current_command_number;
 
 // Nonzero means we are exiting via the builtin exit or quit functions.
 extern int quitting_gracefully;
diff --git a/src/user-prefs.cc b/src/user-prefs.cc
--- a/src/user-prefs.cc
+++ b/src/user-prefs.cc
@@ -392,16 +392,36 @@ sv_loadpath (void)
       warning ("invalid value specified for LOADPATH");
       status = -1;
     }
 
   return status;
 }
 
 int
+sv_info_file (void)
+{
+  int status = 0;
+
+  char *s = octave_string_variable ("INFO_FILE");
+  if (s != (char *) NULL)
+    {
+      delete [] user_pref.info_file;
+      user_pref.info_file = s;
+    }
+  else
+    {
+      warning ("invalid value specified for INFO_FILE");
+      status = -1;
+    }
+
+  return status;
+}
+
+int
 sv_ps1 (void)
 {
   int status = 0;
 
   char *s = octave_string_variable ("PS1");
   if (s != (char *) NULL)
     {
       delete [] user_pref.ps1;
diff --git a/src/user-prefs.h b/src/user-prefs.h
--- a/src/user-prefs.h
+++ b/src/user-prefs.h
@@ -47,16 +47,17 @@ struct user_preferences
   int warn_comma_in_global_decl;
   int warn_divide_by_zero;
   int warn_assign_as_truth_value;
   int page_screen_output;
   int output_max_field_width;
   int output_precision;
 
   char *loadpath;
+  char *info_file;
   char *ps1;
   char *ps2;
   char *pwd;
   char *gnuplot_binary;
   char *pager_binary;
 };
 
 extern user_preferences user_pref;
@@ -79,16 +80,17 @@ extern int warn_comma_in_global_decl (vo
 extern int warn_divide_by_zero (void);
 extern int warn_assign_as_truth_value (void);
 extern int page_screen_output (void);
 
 extern int set_output_max_field_width (void);
 extern int set_output_precision (void);
 
 extern int sv_loadpath (void);
+extern int sv_info_file (void);
 extern int sv_pager_binary (void);
 extern int sv_ps1 (void);
 extern int sv_ps2 (void);
 extern int sv_pwd (void);
 extern int sv_gnuplot_binary (void);
 
 #endif
 
diff --git a/src/utils.cc b/src/utils.cc
--- a/src/utils.cc
+++ b/src/utils.cc
@@ -405,16 +405,26 @@ octave_lib_dir (void)
   static char *ol = (char *) NULL;
   delete [] ol;
   char *oh = octave_home ();
   char *tmp = strconcat (oh, "/lib/octave/");
   ol = strconcat (tmp, version_string);
   return ol;
 }
 
+static char *
+octave_info_dir (void)
+{
+  static char *oi = (char *) NULL;
+  delete [] oi;
+  char *oh = octave_home ();
+  oi = strconcat (oh, "/info/");
+  return oi;
+}
+
 char *
 default_path (void)
 {
   static char *pathstring = (char *) NULL;
   delete [] pathstring;
   char *oct_path = getenv ("OCTAVE_PATH");
   if (oct_path != (char *) NULL)
     pathstring = strsave (oct_path);
@@ -422,16 +432,32 @@ default_path (void)
     {
       char *libdir = octave_lib_dir ();
       pathstring = strconcat (".:", libdir);
     }
   return pathstring;
 }
 
 char *
+default_info_file (void)
+{
+  static char *info_file_string = (char *) NULL;
+  delete [] info_file_string;
+  char *oct_info_file = getenv ("OCTAVE_INFO_FILE");
+  if (oct_info_file != (char *) NULL)
+    info_file_string = strsave (oct_info_file);
+  else
+    {
+      char *infodir = octave_info_dir ();
+      info_file_string = strconcat (infodir, "octave.info");
+    }
+  return info_file_string;
+}
+
+char *
 get_site_defaults (void)
 {
   static char *sd = (char *) NULL;
   delete [] sd;
   char *libdir = octave_lib_dir ();
   sd = strconcat (libdir, "/octaverc");
   return sd;
 }
diff --git a/src/utils.h b/src/utils.h
--- a/src/utils.h
+++ b/src/utils.h
@@ -37,16 +37,17 @@ class tree_constant;
 extern char *strsave (const char *);
 extern char *strconcat (const char *, const char *);
 extern void discard_until (istream&, char);
 extern void check_dimensions (int& nr, int& nc, const char *warnfor);
 extern void raw_mode (int);
 extern int kbhit (void);
 extern char **pathstring_to_vector (char *);
 extern char *default_path (void);
+extern char *default_info_file (void);
 extern char *get_site_defaults (void);
 extern char *default_pager (void);
 extern char *file_in_path (const char *, const char *);
 extern char *m_file_in_path (const char *);
 extern char *polite_directory_format (const char *);
 extern int absolute_pathname (const char *);
 extern int absolute_program (const char *);
 extern char *base_pathname (char *);
