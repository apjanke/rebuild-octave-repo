# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1234784515 -3600
#      Mon Feb 16 12:41:55 2009 +0100
# Node ID d0755c9db5edd59baf5f142ad2ac748a2cfb2365
# Parent  59c0fde890a05e29b4a60a0a9a6ab52faa02289a
implement fast logical sum (counting)

diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,15 @@
+2009-02-16  Jaroslav Hajek  <highegg@gmail.com>
+	
+	* mx-inlines.cc (OP_RED_FCNN): Use explicit type qualification.
+	(mx_inline_count): New overloaded template function.
+	* boolNDArray.h (boolNDArray::sum): Return NDArray.
+	* boolNDArray.cc (boolNDArray::sum): Return NDArray, use do_mx-red_op.
+
 2009-02-16  Jaroslav Hajek  <highegg@gmail.com>
 
 	* Array-C.cc, Array-fC.cc: Don't redefine complex comparison.
 	* Sparse.cc (Sparse::sort): Don't use vec_index.
 	* Sparse-C.cc, Sparse-d.cc, Sparse-b.cc: Don't reinstantiate
 	octave_sort, reflect changes.
 	* sparse-sort.cc: Explicitly instantiate octave_sort for requested
 	pointer types.
diff --git a/liboctave/boolNDArray.cc b/liboctave/boolNDArray.cc
--- a/liboctave/boolNDArray.cc
+++ b/liboctave/boolNDArray.cc
@@ -52,20 +52,21 @@ boolNDArray::all (int dim) const
 }
 
 boolNDArray
 boolNDArray::any (int dim) const
 {
   return do_mx_red_op<boolNDArray> (*this, dim, mx_inline_any);
 }
 
-boolNDArray 
+NDArray 
 boolNDArray::sum (int dim) const
 {
-  MX_ND_REDUCTION (retval(result_idx) |= elem (iter_idx), true, boolNDArray);
+  // NOTE: going via octave_idx_type is faster even though it requires a conversion.
+  return do_mx_red_op<Array<octave_idx_type> > (*this, dim, mx_inline_count);
 }
 
 boolNDArray
 boolNDArray::concat (const boolNDArray& rb, const Array<octave_idx_type>& ra_idx)
 {
   if (rb.numel () > 0)
     insert (rb, ra_idx);
   return *this;
diff --git a/liboctave/boolNDArray.h b/liboctave/boolNDArray.h
--- a/liboctave/boolNDArray.h
+++ b/liboctave/boolNDArray.h
@@ -61,17 +61,17 @@ public:
 
   bool any_element_is_nan (void) const { return false; }
 
   // FIXME -- this is not quite the right thing.
 
   boolNDArray all (int dim = -1) const;
   boolNDArray any (int dim = -1) const;
 
-  boolNDArray sum (int dim = -1) const;
+  NDArray sum (int dim = -1) const;
 
   boolNDArray concat (const boolNDArray& rb, const Array<octave_idx_type>& ra_idx);
 
   boolNDArray& insert (const boolNDArray& a, octave_idx_type r, octave_idx_type c);
   boolNDArray& insert (const boolNDArray& a, const Array<octave_idx_type>& ra_idx);
 
   boolMatrix matrix_value (void) const;
 
diff --git a/liboctave/mx-inlines.cc b/liboctave/mx-inlines.cc
--- a/liboctave/mx-inlines.cc
+++ b/liboctave/mx-inlines.cc
@@ -334,16 +334,17 @@ F (const TSRC* v, octave_idx_type n) \
 { \
   TRES ac = ZERO; \
   for (octave_idx_type i = 0; i < n; i++) \
     OP(ac, v[i]); \
   return ac; \
 }
 
 OP_RED_FCN (mx_inline_sum, T, T, OP_RED_SUM, 0)
+OP_RED_FCN (mx_inline_count, bool, T, OP_RED_SUM, 0)
 OP_RED_FCN (mx_inline_prod, T, T, OP_RED_PROD, 1)
 OP_RED_FCN (mx_inline_sumsq, T, T, OP_RED_SUMSQ, 0)
 OP_RED_FCN (mx_inline_sumsq, std::complex<T>, T, OP_RED_SUMSQC, 0)
 OP_RED_FCN (mx_inline_any, T, bool, OP_RED_ANYC, false)
 OP_RED_FCN (mx_inline_all, T, bool, OP_RED_ALLC, true)
 
 
 #define OP_RED_FCN2(F, TSRC, TRES, OP, ZERO) \
@@ -357,48 +358,50 @@ F (const TSRC* v, TRES *r, octave_idx_ty
     { \
       for (octave_idx_type i = 0; i < m; i++) \
         OP(r[i], v[i]); \
       v += m; \
     } \
 }
 
 OP_RED_FCN2 (mx_inline_sum, T, T, OP_RED_SUM, 0)
+OP_RED_FCN2 (mx_inline_count, bool, T, OP_RED_SUM, 0)
 OP_RED_FCN2 (mx_inline_prod, T, T, OP_RED_PROD, 1)
 OP_RED_FCN2 (mx_inline_sumsq, T, T, OP_RED_SUMSQ, 0)
 OP_RED_FCN2 (mx_inline_sumsq, std::complex<T>, T, OP_RED_SUMSQC, 0)
 OP_RED_FCN2 (mx_inline_any, T, bool, OP_RED_ANYR, false)
 OP_RED_FCN2 (mx_inline_all, T, bool, OP_RED_ALLR, true)
 
 #define OP_RED_FCNN(F, TSRC, TRES) \
 template <class T> \
 inline void \
 F (const TSRC *v, TRES *r, octave_idx_type l, \
    octave_idx_type n, octave_idx_type u) \
 { \
   if (l == 1) \
     { \
       for (octave_idx_type i = 0; i < u; i++) \
         { \
-          r[i] = F (v, n); \
+          r[i] = F<T> (v, n); \
           v += n; \
         } \
     } \
   else \
     { \
       for (octave_idx_type i = 0; i < u; i++) \
         { \
           F (v, r, l, n); \
           v += l*n; \
           r += l; \
         } \
     } \
 }
 
 OP_RED_FCNN (mx_inline_sum, T, T)
+OP_RED_FCNN (mx_inline_count, bool, T)
 OP_RED_FCNN (mx_inline_prod, T, T)
 OP_RED_FCNN (mx_inline_sumsq, T, T)
 OP_RED_FCNN (mx_inline_sumsq, std::complex<T>, T)
 OP_RED_FCNN (mx_inline_any, T, bool)
 OP_RED_FCNN (mx_inline_all, T, bool)
 
 #define OP_CUM_FCN(F, OP) \
 template <class T> \
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,13 @@
+2009-02-16  Jaroslav Hajek  <highegg@gmail.com>
+
+	* data.cc (NATIVE_REDUCTION): Use boolNDArray::any for native bool
+	summation, boolNDArray::sum for double-valued.
+
 2009-02-16  Jaroslav Hajek  <highegg@gmail.com>
 
 	* ov-base-mat.cc (octave_base_matrix<MT>::assign (const octave_value_list&,
 	typename MT::element_type): Fix invalid index.
 	* ov-re-mat.cc (default_numeric_demotion_function): Use
 	float_array_value instead of float_matrix_value.
 
 2009-02-16  John W. Eaton  <jwe@octave.org>
diff --git a/src/data.cc b/src/data.cc
--- a/src/data.cc
+++ b/src/data.cc
@@ -1330,17 +1330,23 @@ sign as @var{x}.  If @var{y} is zero, th
 		      if NATIVE_REDUCTION_1 (FCN, uint8, dim) \
 		      else if NATIVE_REDUCTION_1 (FCN, uint16, dim) \
                       else if NATIVE_REDUCTION_1 (FCN, uint32, dim) \
                       else if NATIVE_REDUCTION_1 (FCN, uint64, dim) \
                       else if NATIVE_REDUCTION_1 (FCN, int8, dim) \
                       else if NATIVE_REDUCTION_1 (FCN, int16, dim) \
                       else if NATIVE_REDUCTION_1 (FCN, int32, dim) \
                       else if NATIVE_REDUCTION_1 (FCN, int64, dim) \
-                      else if NATIVE_REDUCTION_1 (FCN, bool, dim) \
+                      else if (arg.is_bool_type ()) \
+                        { \
+                          boolNDArray tmp = arg. bool_array_value (); \
+                          if (! error_state) \
+                            retval = tmp.any (dim); \
+                        } \
+                      \
                       else if (arg.is_char_matrix ()) \
                         { \
 			  error (#FCN, ": invalid char type"); \
 			} \
 		      else if (!isdouble && arg.is_single_type ()) \
                         { \
 	                  if (arg.is_complex_type ()) \
 		            { \
@@ -1373,16 +1379,22 @@ sign as @var{x}.  If @var{y} is zero, th
 		            retval = tmp.FCN (dim); \
 		        } \
                       else \
 		        { \
 		          gripe_wrong_type_arg (#FCN, arg); \
 		          return retval; \
 		        } \
                     } \
+                  else if (arg.is_bool_type ()) \
+                    { \
+                      boolNDArray tmp = arg.bool_array_value (); \
+                      if (! error_state) \
+                        retval = tmp.FCN (dim); \
+                    } \
 		  else if (!isdouble && arg.is_single_type ()) \
 		    { \
 	              if (arg.is_real_type ()) \
 		        { \
 		          FloatNDArray tmp = arg.float_array_value (); \
                           \
 		          if (! error_state) \
 		            retval = tmp.FCN (dim); \
