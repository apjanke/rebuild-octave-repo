# HG changeset patch
# User Marco Caliari <marco.caliari@univr.it>
# Date 1496904941 -7200
#      Thu Jun 08 08:55:41 2017 +0200
# Branch stable
# Node ID 5faf1767f9a96ad0326078c6ffce363a99e2894f
# Parent  8133a5041662a084aebea76bf5f32ec6c18bcaaf
Improve accuracy of residue for inputs with very different magnitudes (bug #51148).

* residue.m: compute pn as product of remaining denominators,
and not as the division of least common multiple by pm.

diff --git a/scripts/polynomial/residue.m b/scripts/polynomial/residue.m
--- a/scripts/polynomial/residue.m
+++ b/scripts/polynomial/residue.m
@@ -291,17 +291,16 @@ function [pnum, pden, e] = rresidue (r, 
     indx = 1:numel (p);
   else
     [e, indx] = mpoles (p, toler, 0);
     p = p(indx);
     r = r(indx);
   endif
 
   indx = 1:numel (p);
-
   for n = indx
     pn = [1, -p(n)];
     if (n == 1)
       pden = pn;
     else
       pden = conv (pden, pn);
     endif
   endfor
@@ -315,24 +314,26 @@ function [pnum, pden, e] = rresidue (r, 
   ## pn is the numerator contribution for the nth residue
 
   D = numel (pden) - 1;
   K = numel (k) - 1;
   N = K + D;
   pnum = zeros (1, N+1);
   for n = indx(abs (r) > 0)
     p1 = [1, -p(n)];
-    for m = 1:e(n)
-      if (m == 1)
-        pm = p1;
-      else
-        pm = conv (pm, p1);
-      endif
-    endfor
-    pn = deconv (pden, pm);
+    pn = 1;
+    for j = 1:n - 1
+      pn = conv (pn, [1, -p(j)]);
+    end
+    for j = n + 1:numel (p)
+      pn = conv (pn, [1, -p(j)]);
+    end
+    for j = 1:e(n) - 1
+      pn = deconv (pn, p1);
+    end
     pn = r(n) * pn;
     pnum += prepad (pn, N+1, 0, 2);
   endfor
 
   ## Add the direct term.
   if (numel (k))
     pnum += conv (pden, k);
   endif
@@ -425,8 +426,15 @@ endfunction
 
 %!test <49291>
 %! rf = [1e3, 2e3, 1e3, 2e3];
 %! cf = [316.2e-9, 50e-9, 31.6e-9, 5e-9];
 %! [num, den] = residue (1./cf,-1./(rf.*cf),0);
 %! assert (numel (num), 4);
 %! assert (numel (den), 5);
 %! assert (den(1), 1);
+
+%!test <51148>
+%! r = [1.0000e+18, 3.5714e+12, 2.2222e+11, 2.1739e+10];
+%! pin = [-1.9231e+15, -1.6234e+09, -4.1152e+07, -1.8116e+06];
+%! k = 0;
+%! [p, q] = residue (r, pin, k);
+%! assert (p(4), 4.6828e+42, -1e-5);
