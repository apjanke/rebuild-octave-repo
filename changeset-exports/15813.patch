# HG changeset patch
# User Rik <rik@octave.org>
# Date 1355855391 28800
#      Tue Dec 18 10:29:51 2012 -0800
# Node ID 10d6ab9b1b4f570df5a6bf705a933e893e0e59fb
# Parent  83bf6fd9e46d841c06a40ab53b6098487f215b9f
Implement octave_value function class_name() for class "octave_java"

* libinterp/octave-value/ov-class.cc(Fclass): Remove special code
for Java objects; Just call class_name() on octave_value object.

* libinterp/octave-value/ov-java.h: Declare octave_value type functions.
Rename confusing octave_java class private variable java_type to
java_classname.

* libinterp/octave-value/ov-java.cc: Replace tests for Java object
from class_name() == "octave_java" to is_java().

diff --git a/libinterp/octave-value/ov-class.cc b/libinterp/octave-value/ov-class.cc
--- a/libinterp/octave-value/ov-class.cc
+++ b/libinterp/octave-value/ov-class.cc
@@ -1937,25 +1937,17 @@ derived.\n\
   octave_value retval;
 
   int nargin = args.length ();
 
   if (nargin == 0)
     print_usage ();
   else if (nargin == 1)
     // Called for class of object
-    if (! args(0).is_java ())
-      retval = args(0).class_name ();
-    else
-      {
-#ifdef HAVE_JAVA
-        octave_java *jobj = dynamic_cast<octave_java*>(args(0).internal_rep ());
-        retval = jobj->java_class_name ();
-#endif
-      }
+    retval = args(0).class_name ();
   else
     {
       // Called as class constructor
       octave_function *fcn = octave_call_stack::caller ();
 
       std::string id = args(1).string_value ();
 
       if (! error_state)
diff --git a/libinterp/octave-value/ov-java.cc b/libinterp/octave-value/ov-java.cc
--- a/libinterp/octave-value/ov-java.cc
+++ b/libinterp/octave-value/ov-java.cc
@@ -1058,17 +1058,17 @@ box (JNIEnv* jni_env, jobject jobj, jcla
   return retval;
 }
 
 octave_value
 box_more (JNIEnv* jni_env, jobject jobj, jclass jcls)
 {
   octave_value retval = box (jni_env, jobj, jcls);
 
-  if (retval.class_name () == "octave_java")
+  if (retval.is_java ())
     {
       retval = octave_value ();
 
       jclass_ref cls (jni_env);
 
       if (retval.is_undefined ())
         {
           cls = jni_env->FindClass ("[D");
@@ -1148,17 +1148,17 @@ box_more (JNIEnv* jni_env, jobject jobj,
 }
 
 int
 unbox (JNIEnv* jni_env, const octave_value& val, jobject_ref& jobj,
        jclass_ref& jcls)
 {
   int found = 1;
 
-  if (val.class_name () == "octave_java")
+  if (val.is_java ())
     {
       octave_java *ovj = TO_JAVA (val);
       jobj = ovj->to_java ();
       jobj.detach ();
       jcls = jni_env->GetObjectClass (jobj);
     }
   else if (val.is_string ())
     {
@@ -1509,17 +1509,26 @@ Java_org_octave_Octave_needThreadedInvok
 {
   return (get_current_thread_ID (env) != octave_thread_ID);
 }
 
 // octave_java class definition
 
 DEFINE_OCTAVE_ALLOCATOR (octave_java);
 
-DEFINE_OV_TYPEID_FUNCTIONS_AND_DATA (octave_java, "octave_java", "octave_java");
+int octave_java::t_id (-1);
+
+const std::string octave_java::t_name ("octave_java");
+
+void
+octave_java::register_type (void)
+{
+  t_id = octave_value_typeinfo::register_type
+    (octave_java::t_name, "<unknown>", octave_value (new octave_java ()));
+}
 
 dim_vector
 octave_java::dims (void) const
 {
   JNIEnv *current_env = thread_jni_env ();
 
   if (current_env && java_object)
     return compute_array_dimensions (current_env, java_object);
@@ -1973,17 +1982,17 @@ equivalent\n\
         {
           std::string methodname = args(0).string_value ();
           if (! error_state)
             {
               octave_value_list tmp;
               for (int i=2; i<args.length (); i++)
                 tmp(i-2) = args(i);
 
-              if (args(1).class_name () == "octave_java")
+              if (args(1).is_java ())
                 {
                   octave_java *jobj = TO_JAVA (args(1));
                   retval = jobj->do_javaMethod (current_env, methodname, tmp);
                 }
               else if (args(1).is_string ())
                 {
                   std::string cls = args(1).string_value ();
                   retval = octave_java::do_javaMethod (current_env, cls, methodname, tmp);
@@ -2035,17 +2044,17 @@ equivalent\n\
     {
       JNIEnv *current_env = octave_java::thread_jni_env ();
 
       if (args.length () == 2)
         {
           std::string name = args(1).string_value ();
           if (! error_state)
             {
-              if (args(0).class_name () == "octave_java")
+              if (args(0).is_java ())
                 {
                   octave_java *jobj = TO_JAVA (args(0));
                   retval = jobj->do_java_get (current_env, name);
                 }
               else if (args(0).is_string ())
                 {
                   std::string cls = args(0).string_value ();
                   retval = octave_java::do_java_get (current_env, cls, name);
@@ -2097,17 +2106,17 @@ equivalent\n\
     {
       JNIEnv *current_env = octave_java::thread_jni_env ();
 
       if (args.length () == 3)
         {
           std::string name = args(1).string_value ();
           if (! error_state)
             {
-              if (args(0).class_name () == "octave_java")
+              if (args(0).is_java ())
                 {
                   octave_java *jobj = TO_JAVA (args(0));
                   retval = jobj->do_java_set (current_env, name, args(2));
                 }
               else if (args(0).is_string ())
                 {
                   std::string cls = args(0).string_value ();
                   retval = octave_java::do_java_set (current_env, cls, name, args(2));
@@ -2141,17 +2150,17 @@ Undocumented internal function.\n\
   initialize_java ();
 
   if (! error_state)
     {
       JNIEnv *current_env = octave_java::thread_jni_env ();
 
       if (args.length () == 1)
         {
-          if (args(0).class_name () == "octave_java")
+          if (args(0).is_java ())
             {
               octave_java *jobj = TO_JAVA (args(0));
               retval(0) = box_more (current_env, jobj->to_java (), 0);
             }
           else
             retval(0) = args(0);
         }
       else
diff --git a/libinterp/octave-value/ov-java.h b/libinterp/octave-value/ov-java.h
--- a/libinterp/octave-value/ov-java.h
+++ b/libinterp/octave-value/ov-java.h
@@ -135,34 +135,34 @@ public:
     init (obj, cls);
   }
 
   ~octave_java (void) { release (); }
 
   jobject to_java (void) const { return java_object; }
   jclass to_class (void) const { return java_class; }
 
-  std::string java_class_name (void) const { return java_type; }
+  std::string java_class_name (void) const { return java_classname; }
 
   octave_base_value* clone (void) const { return new octave_java (*this); }
   octave_base_value* empty_clone (void) const { return new octave_java (); }
 
   bool is_defined (void) const { return true; }
 
   bool is_map (void) const { return false; }
 
   bool is_java (void) const { return true; }
 
   string_vector map_keys (void) const;
 
   dim_vector dims (void) const;
 
   void print (std::ostream& os, bool pr_as_read_syntax = false) const
   {
-    os << "<Java object: " << java_type << ">";
+    os << "<Java object: " << java_classname << ">";
     newline(os);
   }
 
   void print_raw (std::ostream& os, bool pr_as_read_syntax = false) const
   {
     print(os, pr_as_read_syntax);
   }
 
@@ -283,17 +283,17 @@ private:
             java_class = reinterpret_cast<jclass> (current_env->NewGlobalRef (jclass (ocls)));
           }
 
         if (java_class)
           {
             jclass_ref clsCls (current_env, current_env->GetObjectClass (java_class));
             jmethodID mID = current_env->GetMethodID (clsCls, "getCanonicalName", "()Ljava/lang/String;");
             jobject_ref resObj (current_env, current_env->CallObjectMethod (java_class, mID));
-            java_type = jstring_to_string (current_env, resObj);
+            java_classname = jstring_to_string (current_env, resObj);
           }
       }
   }
 
   void release (void)
   {
     JNIEnv *current_env = thread_jni_env ();
 
@@ -307,20 +307,32 @@ private:
 
         java_object = 0;
         java_class = 0;
       }
   }
 
 private:
 
-  DECLARE_OCTAVE_ALLOCATOR
-
-  DECLARE_OV_TYPEID_FUNCTIONS_AND_DATA
-
   jobject java_object;
 
   jclass java_class;
 
-  std::string java_type;
+  std::string java_classname;
+
+  DECLARE_OCTAVE_ALLOCATOR
+
+public:
+  int type_id (void) const { return t_id; }
+  std::string type_name (void) const { return t_name; }
+  std::string class_name (void) const { return java_classname; }
+
+  static int static_type_id (void) { return t_id; }
+  static std::string static_type_name (void) { return t_name; }
+  static std::string static_class_name (void) { return "<unknown>"; }
+  static void register_type (void);
+
+private:
+  static int t_id;
+  static const std::string t_name;
 };
 
 #endif
