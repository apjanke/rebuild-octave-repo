# HG changeset patch
# User Rik <rik@octave.org>
# Date 1515198955 28800
#      Fri Jan 05 16:35:55 2018 -0800
# Node ID a6753fc10731e9c94fb8a5aeb37e9c46423e58d3
# Parent  c85871d2a10e08367ba32eb7b6f7b222dbf0d04c
Mark certain hyperbolic BIST tests as Mac-only failures (bug #52627).

* mappers.cc (Facos): Relax tolerance from 2*eps to 3*eps.
* mappers.cc (Facosh): Use run-time conditional (! ismac ()) to run
regular BIST code on non-mac platforms.  Create xtest which only executes on
Macs to document failure.

* asech.m: Use run-time conditional (! ismac ()) to run regular BIST code on
non-mac platforms.  Create xtest which only executes on Macs to document
failure.

diff --git a/libinterp/corefcn/mappers.cc b/libinterp/corefcn/mappers.cc
--- a/libinterp/corefcn/mappers.cc
+++ b/libinterp/corefcn/mappers.cc
@@ -111,23 +111,23 @@ Compute the inverse cosine in radians fo
 %! assert (acos (x), v, sqrt (eps ("single")));
 
 ## Test values on either side of branch cut
 %!test
 %! rval = 0;
 %! ival = 1.31695789692481671;
 %! obs = acos ([2, 2-i*eps, 2+i*eps]);
 %! exp = [rval + ival*i, rval + ival*i, rval - ival*i];
-%! assert (obs, exp, 2*eps);
+%! assert (obs, exp, 3*eps);
 %! rval = pi;
 %! obs = acos ([-2, -2-i*eps, -2+i*eps]);
 %! exp = [rval - ival*i, rval + ival*i, rval - ival*i];
-%! assert (obs, exp, 2*eps);
-%! assert (acos ([2 0]),  [ival*i, pi/2], 2*eps);
-%! assert (acos ([2 0i]), [ival*i, pi/2], 2*eps);
+%! assert (obs, exp, 3*eps);
+%! assert (acos ([2 0]),  [ival*i, pi/2], 3*eps);
+%! assert (acos ([2 0i]), [ival*i, pi/2], 3*eps);
 
 ## Test large magnitude arguments (bug #45507)
 ## Test fails with older versions of libm, solution is to upgrade.
 %!test <*45507>
 %! x = [1, -1, i, -i] .* 1e150;
 %! v = [0, pi, pi/2, pi/2];
 %! assert (real (acos (x)), v);
 
@@ -144,32 +144,48 @@ Compute the inverse hyperbolic cosine fo
 {
   if (args.length () != 1)
     print_usage ();
 
   return ovl (args(0).acosh ());
 }
 
 /*
-%!test
+%!testif ; ! ismac ()
+%! x = [1, 0, -1, 0];
+%! v = [0, pi/2*i, pi*i, pi/2*i];
+%! assert (acosh (x), v, sqrt (eps));
+
+%!xtest <52627>
+%! ## Same test code as above, but intended only for test statistics on Mac.
+%! ## Mac trig/hyperbolic functions have huge tolerances.
+%! if (! ismac ()), return; endif
 %! x = [1, 0, -1, 0];
 %! v = [0, pi/2*i, pi*i, pi/2*i];
 %! assert (acosh (x), v, sqrt (eps));
 
 ## FIXME: std::acosh on Windows platforms, returns a result that differs
 ## by 1 in the last significant digit.  This is ~30*eps which is quite large.
 ## The decision now (9/15/2016) is to mark the test with a bug number so
 ## it is understood why it is failing, and wait for MinGw to improve their
 ## std library.
 %!test <49091>
 %! re = 2.99822295029797;
 %! im = pi/2;
 %! assert (acosh (-10i), re - i*im);
 
-%!test
+%!testif ; ! ismac ()
+%! x = single ([1, 0, -1, 0]);
+%! v = single ([0, pi/2*i, pi*i, pi/2*i]);
+%! assert (acosh (x), v, sqrt (eps ("single")));
+
+%!xtest <52627>
+%! ## Same test code as above, but intended only for test statistics on Mac.
+%! ## Mac trig/hyperbolic functions have huge tolerances.
+%! if (! ismac ()), return; endif
 %! x = single ([1, 0, -1, 0]);
 %! v = single ([0, pi/2*i, pi*i, pi/2*i]);
 %! assert (acosh (x), v, sqrt (eps ("single")));
 
 %!test <49091>
 %! re = single (2.99822295029797);
 %! im = single (pi/2);
 %! assert (acosh (single (10i)), re + i*im, 5*eps ("single"));
diff --git a/scripts/elfun/asech.m b/scripts/elfun/asech.m
--- a/scripts/elfun/asech.m
+++ b/scripts/elfun/asech.m
@@ -30,15 +30,23 @@ function y = asech (x)
     print_usage ();
   endif
 
   y = acosh (1 ./ x);
 
 endfunction
 
 
-%!test
+%!testif ; ! ismac ()
+%! v = [0, pi*i];
+%! x = [1, -1];
+%! assert (asech (x), v, sqrt (eps));
+
+%!xtest <52627>
+%! ## Same test code as above, but intended only for test statistics on Mac.
+%! ## Mac trig/hyperbolic functions have huge tolerances.
+%! if (! ismac ()), return; endif
 %! v = [0, pi*i];
 %! x = [1, -1];
 %! assert (asech (x), v, sqrt (eps));
 
 %!error asech ()
 %!error asech (1, 2)
