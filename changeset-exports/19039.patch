# HG changeset patch
# User CarnÃ« Draug <carandraug@octave.org>
# Date 1408643387 -3600
#      Thu Aug 21 18:49:47 2014 +0100
# Node ID f45b60897316287d0704dfa1a615bc0f6c6fb326
# Parent  9e3c35d934ab5a3f53983269edb2a417b1ead8ff
dox: fix inputParser help text for newer Texinfo versions.

* general/inputParser.m: we can no longer use the deftypefnx macro in the
middle of the text, it must come right after a deftypefn.  To use in the
middle of the help text, we must end the previous deftypefn, and start a
new one. Fix this accordingly.

diff --git a/scripts/general/inputParser.m b/scripts/general/inputParser.m
--- a/scripts/general/inputParser.m
+++ b/scripts/general/inputParser.m
@@ -32,46 +32,54 @@
 ##
 ## @item switch (see @command{addSwitch}).
 ## @end enumerate
 ##
 ## After defining the function API with these methods, the supplied arguments
 ## can be parsed with the @command{parse} method and the parsing results
 ## accessed with the @command{Results} accessor.
 ##
-## @deftypefnx {Accessor method} {} parser.Parameters
+## @end deftypefn
+## @deftypefn {Accessor method} {} inputParser.Parameters
 ## Return list of parameter names already defined.
 ##
-## @deftypefnx {Accessor method} {} parser.Results
+## @end deftypefn
+## @deftypefn {Accessor method} {} inputParser.Results
 ## Return structure with argument names as fieldnames and corresponding values.
 ##
-## @deftypefnx {Accessor method} {} parser.Unmatched
+## @end deftypefn
+## @deftypefn {Accessor method} {} inputParser.Unmatched
 ## Return structure similar to @command{Results}, but for unmatched parameters.
 ## See the @command{KeepUnmatched} property.
 ##
-## @deftypefnx {Accessor method} {} parser.UsingDefaults
+## @end deftypefn
+## @deftypefn {Accessor method} {} inputParser.UsingDefaults
 ## Return cell array with the names of arguments that are using default values.
 ##
-## @deftypefnx {Class property} {} parser.CaseSensitive = @var{boolean}
+## @end deftypefn
+## @deftypefn {Class property} {} inputParser.CaseSensitive = @var{boolean}
 ## Set whether matching of argument names should be case sensitive.  Defaults
 ## to false.
 ##
-## @deftypefnx {Class property} {} parser.FunctionName = @var{name}
+## @end deftypefn
+## @deftypefn {Class property} {} inputParser.FunctionName = @var{name}
 ## Set function name to be used in error messages; Defaults to empty string.
 ##
-## @deftypefnx {Class property} {} parser.KeepUnmatched = @var{boolean}
+## @end deftypefn
+## @deftypefn {Class property} {} inputParser.KeepUnmatched = @var{boolean}
 ## Set whether an error should be given for non-defined arguments.  Defaults to
 ## false.  If set to true, the extra arguments can be accessed through
 ## @code{Unmatched} after the @code{parse} method.  Note that since
 ## @command{Switch} and @command{ParamValue} arguments can be mixed, it is
 ## not possible to know the unmatched type.  If argument is found unmatched
 ## it is assumed to be of the @command{ParamValue} type and it is expected to
 ## be followed by a value.
 ##
-## @deftypefnx {Class property} {} parser.StructExpand = @var{boolean}
+## @end deftypefn
+## @deftypefn {Class property} {} inputParser.StructExpand = @var{boolean}
 ## Set whether a structure can be passed to the function instead of
 ## parameter/value pairs.  Defaults to true.  Not implemented yet.
 ##
 ## The following example shows how to use this class:
 ##
 ## @example
 ## @group
 ## function check (varargin)
@@ -129,17 +137,17 @@
 ## validate it will be considered the end of the @command{Optional}
 ## arguments.  The remaining arguments will be compared against any
 ## @command{ParamValue} or @command{Switch} arguments.
 ##
 ## @seealso{nargin, validateattributes, validatestring, varargin}
 ## @end deftypefn
 
 ## -*- texinfo -*-
-## @deftypefnx {Function File} {} addOptional (@var{argname}, @var{default})
+## @deftypefn  {Function File} {} addOptional (@var{argname}, @var{default})
 ## @deftypefnx {Function File} {} addOptional (@var{argname}, @var{default}, @var{validator})
 ## Add new optional argument to the object @var{parser} of the class inputParser
 ## to implement an ordered arguments type of API 
 ##
 ## @var{argname} must be a string with the name of the new argument.  The order
 ## in which new arguments are added with @command{addOptional}, represents the
 ## expected order of arguments.
 ##
