# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1208981014 14400
#      Wed Apr 23 16:03:34 2008 -0400
# Node ID 13820b9f5fd9c15cea7639bf9b71ffb34c2fa61d
# Parent  c8da61051ea23e1516ac375c0ae5cad1fbde0292
more consistent handling of CR/CRLF/LF line endings in lexer and parser

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,19 @@
+2008-04-23  John W. Eaton  <jwe@octave.org>
+
+	* lex.l (text_yyinput): New function.  Use it in place of yyinput.
+	(next_token_is_sep_op, scan_for_comments, eat_whitespace,
+	have_continuation): No need to check for CR or CRLF.
+	* parse.y (text_getc): Also return NL for single CR.
+
+2008-04-32  Michael Goffioul  <michael.goffioul@gmail.com>
+
+	* input.cc (get_input_from_file): Open file in binary mode.
+
 2008-04-20  John W. Eaton  <jwe@octave.org>
 
 	* oct-stream.cc (octave_stream::read): Allow single data type
 	specification but return double.
 
 2008-04-18  John W. Eaton  <jwe@octave.org>
 
 	* lex.l, lex.h (process_comment): New arg, start_in_block.  Call
diff --git a/src/input.cc b/src/input.cc
--- a/src/input.cc
+++ b/src/input.cc
@@ -393,17 +393,17 @@ octave_read (char *buf, unsigned max_siz
 // warning if the file doesn't exist.
 
 FILE *
 get_input_from_file (const std::string& name, int warn)
 {
   FILE *instream = 0;
 
   if (name.length () > 0)
-    instream = fopen (name.c_str (), "r");
+    instream = fopen (name.c_str (), "rb");
 
   if (! instream && warn)
     warning ("%s: no such file or directory", name.c_str ());
 
   if (reading_fcn_file || reading_script_file)
     ff_instream = instream;
   else
     command_editor::set_input_stream (instream);
diff --git a/src/lex.l b/src/lex.l
--- a/src/lex.l
+++ b/src/lex.l
@@ -250,16 +250,17 @@ static unsigned int Vtoken_count = 0;
 
 // The start state that was in effect when the beginning of a block
 // comment was noticed.
 static int block_comment_nesting_level = 0;
 
 // Forward declarations for functions defined at the bottom of this
 // file.
 
+static int text_yyinput (void);
 static void fixup_column_count (char *s);
 static void do_comma_insert_check (void);
 static int is_keyword_token (const std::string& s);
 static void prep_for_function (void);
 static void prep_for_nested_function (void);
 static int process_comment (bool start_in_block, bool& eof);
 static bool match_any (char c, const char *s);
 static bool next_token_is_sep_op (void);
@@ -801,17 +802,17 @@ NUMBER	(({D}+\.?{D}*{EXPON}?)|(\.{D}+{EX
 // Unrecognized input is a lexical error.
 %}
 
 . {
     // EOF happens here if we are parsing nested functions.
 
     yyunput (yytext[0], yytext);
 
-    int c = yyinput ();
+    int c = text_yyinput ();
 
     if (c != EOF)
       {
 	current_input_column++;
 
 	error ("invalid character `%s' (ASCII %d) near line %d, column %d",
 	       undo_string_escape (static_cast<char> (c)), c,
 	       input_line_number, current_input_column);
@@ -829,17 +830,17 @@ NUMBER	(({D}+\.?{D}*{EXPON}?)|(\.{D}+{EX
 // If we're reading a matrix and the next character is '[', make sure
 // that we insert a comma ahead of it.
 
 void
 do_comma_insert_check (void)
 {
   int spc_gobbled = eat_continuation ();
 
-  int c = yyinput ();
+  int c = text_yyinput ();
 
   yyunput (c, yytext);
 
   if (spc_gobbled)
     yyunput (' ', yytext);
 
   lexer_flags.do_comma_insert = (lexer_flags.bracketflag && c == '[');
 }
@@ -898,16 +899,37 @@ reset_parser (void)
   // Clear the buffer for help text.
   while (! help_buf.empty ())
     help_buf.pop ();
 
   // Reset other flags.
   lexer_flags.init ();
 }
 
+static int
+text_yyinput (void)
+{
+  int c = yyinput ();
+
+  // Convert CRLF into just LF and single CR into LF.
+
+  if (c == '\r')
+    {
+      c = yyinput ();
+
+      if (c != '\n')
+	{
+	  yyunput (c, yytext);
+	  c = '\n';
+	}
+    }
+
+  return c;
+}
+
 // If we read some newlines, we need figure out what column we're
 // really looking at.
 
 static void
 fixup_column_count (char *s)
 {
   char c;
   while ((c = *s++) != '\0')
@@ -1426,17 +1448,17 @@ grab_comment_block (stream_reader& reade
 }
 
 class
 flex_stream_reader : public stream_reader
 {
 public:
   flex_stream_reader (char *buf_arg) : stream_reader (), buf (buf_arg) { }
 
-  int getc (void) { return ::yyinput (); }
+  int getc (void) { return ::text_yyinput (); }
   int ungetc (int c) { ::yyunput (c, buf); return 0; }
   
 private:
   char *buf;
 };
 
 static int
 process_comment (bool start_in_block, bool& eof)
@@ -1519,68 +1541,54 @@ looks_like_bin_op (bool spc_prev, int ne
 // Recognize separators.  If the separator is a CRLF pair, it is
 // replaced by a single LF.
 
 static bool
 next_token_is_sep_op (void)
 {
   bool retval = false;
 
-  int c1 = yyinput ();
-
-  if (c1 == '\r')
-    {
-      int c2 = yyinput ();
-
-      if (c2 == '\n')
-	{
-	  c1 = '\n';
-
-	  retval = true;
-	}
-      else
-	yyunput (c2, yytext);
-    }
-  else
-    retval = match_any (c1, ",;\n]");
-
-  yyunput (c1, yytext);
+  int c = text_yyinput ();
+
+  retval = match_any (c, ",;\n]");
+
+  yyunput (c, yytext);
 
   return retval;
 }
 
 // Try to determine if the next token should be treated as a postfix
 // unary operator.  This is ugly, but it seems to do the right thing.
 
 static bool
 next_token_is_postfix_unary_op (bool spc_prev)
 {
   bool un_op = false;
 
-  int c0 = yyinput ();
+  int c0 = text_yyinput ();
 
   if (c0 == '\'' && ! spc_prev)
     {
       un_op = true;
     }
   else if (c0 == '.')
     {
-      int c1 = yyinput ();
+      int c1 = text_yyinput ();
       un_op = (c1 == '\'');
       yyunput (c1, yytext);
     }
   else if (c0 == '+')
     {
-      int c1 = yyinput ();
+      int c1 = text_yyinput ();
       un_op = (c1 == '+');
       yyunput (c1, yytext);
     }
   else if (c0 == '-')
     {
-      int c1 = yyinput ();
+      int c1 = text_yyinput ();
       un_op = (c1 == '-');
       yyunput (c1, yytext);
     }
 
   yyunput (c0, yytext);
 
   return un_op;
 }
@@ -1597,24 +1605,24 @@ next_token_is_postfix_unary_op (bool spc
 // (e.g., the characters '[' 'a' ' ' '+' '\' LFD 'b' ']') will be
 // parsed as a binary operator.
 
 static bool
 next_token_is_bin_op (bool spc_prev)
 {
   bool bin_op = false;
 
-  int c0 = yyinput ();
+  int c0 = text_yyinput ();
 
   switch (c0)
     {
     case '+':
     case '-':
       {
-	int c1 = yyinput ();
+	int c1 = text_yyinput ();
 
 	switch (c1)
 	  {
 	  case '+':
 	  case '-':
 	    // Unary ops, spacing doesn't matter.
 	    break;
 
@@ -1639,17 +1647,17 @@ next_token_is_bin_op (bool spc_prev)
     case '^':
       // Always a binary op (may also include /=, \=, and ^=).
       bin_op = true;
       break;
 
     // .+ .- ./ .\ .^ .* .**
     case '.':
       {
-	int c1 = yyinput ();
+	int c1 = text_yyinput ();
 
 	if (match_any (c1, "+-/\\^*"))
 	  // Always a binary op (may also include .+=, .-=, ./=, ...).
 	  bin_op = true;
 	else if (! isdigit (c1) && c1 != ' ' && c1 != '\t' && c1 != '.')
 	  // A structure element reference is a binary op.
 	  bin_op = true;
 
@@ -1672,17 +1680,17 @@ next_token_is_bin_op (bool spc_prev)
       // Always a binary op (may also include <=, <>, >=).
       bin_op = true;
       break;
 
     // ~= !=
     case '~':
     case '!':
       {
-	int c1 = yyinput ();
+	int c1 = text_yyinput ();
 
 	// ~ and ! can be unary ops, so require following =.
 	if (c1 == '=')
 	  bin_op = true;
 
 	yyunput (c1, yytext);
       }
       break;
@@ -1751,35 +1759,16 @@ scan_for_comments (const char *text)
 	      comment_buf += static_cast<char> (c);
 	      octave_comment_buffer::append (comment_buf);
 	      comment_buf.resize (0);
 	      in_comment = false;
 	      beginning_of_comment = false;
 	    }
 	  break;
 
-	case '\r':
-	  if (in_comment)
-	    comment_buf += static_cast<char> (c);
-	  if (i < len)
-	    {
-	      c = text[i++];
-
-	      if (c == '\n')
-		{
-		  if (in_comment)
-		    {
-		      comment_buf += static_cast<char> (c);
-		      octave_comment_buffer::append (comment_buf);
-		      in_comment = false;
-		      beginning_of_comment = false;
-		    }
-		}
-	    }
-
 	default:
 	  if (in_comment)
 	    {
 	      comment_buf += static_cast<char> (c);
 	      beginning_of_comment = false;
 	    }
 	  break;
 	}
@@ -1806,17 +1795,17 @@ eat_whitespace (void)
 
   std::string comment_buf;
 
   bool in_comment = false;
   bool beginning_of_comment = false;
 
   int c = 0;
 
-  while ((c = yyinput ()) != EOF)
+  while ((c = text_yyinput ()) != EOF)
     {
       current_input_column++;
 
       switch (c)
 	{
 	case ' ':
 	case '\t':
 	  if (in_comment)
@@ -1880,38 +1869,16 @@ eat_whitespace (void)
 	  else
 	    {
 	      if (have_continuation ())
 		break;
 	      else
 		goto done;
 	    }
 
-	case '\r':
-	  if (in_comment)
-	    comment_buf += static_cast<char> (c);
-	  c = yyinput ();
-	  if (c == EOF)
-	    break;
-	  else if (c == '\n')
-	    {
-	      retval |= ATE_NEWLINE;
-	      if (in_comment)
-		{
-		  comment_buf += static_cast<char> (c);
-		  octave_comment_buffer::append (comment_buf);
-		  in_comment = false;
-		  beginning_of_comment = false;
-		}
-	      current_input_column = 0;
-	      break;
-	    }
-
-	  // Fall through...
-
 	default:
 	  if (in_comment)
 	    {
 	      comment_buf += static_cast<char> (c);
 	      beginning_of_comment = false;
 	      break;
 	    }
 	  else
@@ -1997,17 +1964,17 @@ have_continuation (bool trailing_comment
 
   std::string comment_buf;
 
   bool in_comment = false;
   bool beginning_of_comment = false;
 
   int c = 0;
 
-  while ((c = yyinput ()) != EOF)
+  while ((c = text_yyinput ()) != EOF)
     {
       buf << static_cast<char> (c);
 
       switch (c)
 	{
 	case ' ':
 	case '\t':
 	  if (in_comment)
@@ -2043,37 +2010,16 @@ have_continuation (bool trailing_comment
 	      comment_buf += static_cast<char> (c);
 	      octave_comment_buffer::append (comment_buf);
 	    }
 	  current_input_column = 0;
 	  promptflag--;
 	  gripe_matlab_incompatible_continuation ();
 	  return true;
 
-	case '\r':
-	  if (in_comment)
-	    comment_buf += static_cast<char> (c);
-	  c = yyinput ();
-	  if (c == EOF)
-	    break;
-	  else if (c == '\n')
-	    {
-	      if (in_comment)
-		{
-		  comment_buf += static_cast<char> (c);
-		  octave_comment_buffer::append (comment_buf);
-		}
-	      current_input_column = 0;
-	      promptflag--;
-	      gripe_matlab_incompatible_continuation ();
-	      return true;
-	    }
-
-	  // Fall through...
-
 	default:
 	  if (in_comment)
 	    {
 	      comment_buf += static_cast<char> (c);
 	      beginning_of_comment = false;
 	    }
 	  else
 	    goto cleanup;
@@ -2097,20 +2043,20 @@ cleanup:
 
 // We have seen a `.' and need to see if it is the start of a
 // continuation.  If so, this eats it, up to and including the new
 // line character.
 
 static bool
 have_ellipsis_continuation (bool trailing_comments_ok)
 {
-  char c1 = yyinput ();
+  char c1 = text_yyinput ();
   if (c1 == '.')
     {
-      char c2 = yyinput ();
+      char c2 = text_yyinput ();
       if (c2 == '.' && have_continuation (trailing_comments_ok))
 	return true;
       else
 	{
 	  yyunput (c2, yytext);
 	  yyunput (c1, yytext);
 	}
     }
@@ -2125,17 +2071,17 @@ have_ellipsis_continuation (bool trailin
 //
 // Return value is the same as described for eat_whitespace().
 
 static yum_yum
 eat_continuation (void)
 {
   int retval = ATE_NOTHING;
 
-  int c = yyinput ();
+  int c = text_yyinput ();
 
   if ((c == '.' && have_ellipsis_continuation ())
       || (c == '\\' && have_continuation ()))
     retval = eat_whitespace ();
   else
     yyunput (c, yytext);
 
   return retval;
@@ -2147,17 +2093,17 @@ handle_string (char delim, int text_styl
   std::ostringstream buf;
 
   int bos_line = input_line_number;
   int bos_col = current_input_column;
 
   int c;
   int escape_pending = 0;
 
-  while ((c = yyinput ()) != EOF)
+  while ((c = text_yyinput ()) != EOF)
     {
       current_input_column++;
 
       if (c == '\\')
 	{
 	  if (delim == '\'' || escape_pending)
 	    {
 	      buf << static_cast<char> (c);
@@ -2186,17 +2132,17 @@ handle_string (char delim, int text_styl
 	  break;
 	}
       else if (c == delim)
 	{
 	  if (escape_pending)
 	    buf << static_cast<char> (c);
 	  else
 	    {
-	      c = yyinput ();
+	      c = text_yyinput ();
 	      if (c == delim)
 		{
 		  buf << static_cast<char> (c);		    
 		  if (lexer_flags.doing_rawcommand)
 		    buf << static_cast<char> (c);
 		}
 	      else
 		{
@@ -2239,78 +2185,78 @@ handle_string (char delim, int text_styl
   return LEXICAL_ERROR;
 }
 
 static bool
 next_token_is_assign_op (void)
 {
   bool retval = false;
 
-  int c0 = yyinput ();
+  int c0 = text_yyinput ();
 
   switch (c0)
     {
     case '=':
       {
-	int c1 = yyinput ();
+	int c1 = text_yyinput ();
 	yyunput (c1, yytext);
 	if (c1 != '=')
 	  retval = true;
       }
       break;
 
     case '+':
     case '-':
     case '*':
     case '/':
     case '\\':
     case '&':
     case '|':
       {
-	int c1 = yyinput ();
+	int c1 = text_yyinput ();
 	yyunput (c1, yytext);
 	if (c1 == '=')
 	  retval = true;
       }
       break;
 
     case '.':
       {
-	int c1 = yyinput ();
+	int c1 = text_yyinput ();
 	if (match_any (c1, "+-*/\\"))
 	  {
-	    int c2 = yyinput ();
+	    int c2 = text_yyinput ();
 	    yyunput (c2, yytext);
 	    if (c2 == '=')
 	      retval = true;
 	  }
 	yyunput (c1, yytext);
       }
       break;
 
     case '>':
       {
-	int c1 = yyinput ();
+	int c1 = text_yyinput ();
 	if (c1 == '>')
 	  {
-	    int c2 = yyinput ();
+	    int c2 = text_yyinput ();
 	    yyunput (c2, yytext);
 	    if (c2 == '=')
 	      retval = true;
 	  }
 	yyunput (c1, yytext);
       }
       break;
 
     case '<':
       {
-	int c1 = yyinput ();
+	int c1 = text_yyinput ();
 	if (c1 == '<')
 	  {
-	    int c2 = yyinput ();
+	    int c2 = text_yyinput ();
 	    yyunput (c2, yytext);
 	    if (c2 == '=')
 	      retval = true;
 	  }
 	yyunput (c1, yytext);
       }
       break;
 
@@ -2321,17 +2267,17 @@ next_token_is_assign_op (void)
   yyunput (c0, yytext);
 
   return retval;
 }
 
 static bool
 next_token_is_index_op (void)
 {
-  int c = yyinput ();
+  int c = text_yyinput ();
   yyunput (c, yytext);
   return c == '(' || c == '{';
 }
 
 static int
 handle_close_bracket (bool spc_gobbled, int bracket_type)
 {
   int retval = bracket_type;
@@ -2403,18 +2349,18 @@ maybe_unput_comma (int spc_gobbled)
   if (nesting_level.is_bracket ()
       || (nesting_level.is_brace ()
 	  && ! lexer_flags.looking_at_object_index))
     {
       int bin_op = next_token_is_bin_op (spc_gobbled);
 
       int postfix_un_op = next_token_is_postfix_unary_op (spc_gobbled);
 
-      int c1 = yyinput ();
-      int c2 = yyinput ();
+      int c1 = text_yyinput ();
+      int c2 = text_yyinput ();
 
       yyunput (c2, yytext);
       yyunput (c1, yytext);
 
       int sep_op = next_token_is_sep_op ();
 
       int dot_op = (c1 == '.'
 		    && (isalpha (c2) || isspace (c2) || c2 == '_'));
@@ -2512,24 +2458,24 @@ handle_identifier (void)
 	  lexer_flags.convert_spaces_to_comma = true;
 	}
 
       return kw_token;
     }
 
   // See if we have a plot keyword (title, using, with, or clear).
 
-  int c1 = yyinput ();
+  int c1 = text_yyinput ();
 
   bool next_tok_is_paren = (c1 == '(');
 
   bool next_tok_is_eq = false;
   if (c1 == '=')
     {
-      int c2 = yyinput ();
+      int c2 = text_yyinput ();
       yyunput (c2, yytext);
 
       if (c2 != '=')
 	next_tok_is_eq = true;
     }
 
   yyunput (c1, yytext);
 
diff --git a/src/parse.y b/src/parse.y
--- a/src/parse.y
+++ b/src/parse.y
@@ -2834,28 +2834,28 @@ looks_like_copyright (const std::string&
   return retval;
 }
 
 static int
 text_getc (FILE *f)
 {
   int c = getc (f);
 
-  // Convert CRLF into just LF.
+  // Convert CRLF into just LF and single CR into LF.
 
   if (c == '\r')
     {
       c = getc (f);
 
       if (c == '\n')
         input_line_number++;
       else
 	{
 	  ungetc (c, f);
-	  c = '\r';
+	  c = '\n';
 	}
     }
   else if (c == '\n')
     input_line_number++;
 
   return c;
 }
 
