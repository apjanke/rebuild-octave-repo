# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1255350200 -7200
#      Mon Oct 12 14:23:20 2009 +0200
# Node ID 9f27172fbd1ee786f9db102b162d1737d867b0b0
# Parent  0407883e1a330fcab1e8ca612ccca41a7ea1c8bb
auto-set MatrixType from certain functions

diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,15 @@
+2009-10-12  Jaroslav Hajek  <highegg@gmail.com>
+
+	* base-qr.cc (base_qr::regular): New method.
+	* base-qr.h: Declare it.
+	* base-lu.cc (base_lu::regular): New method.
+	* base-lu.h: Declare it.
+
 2009-10-12  Jaroslav Hajek  <highegg@gmail.com>
 
 	* base-qr.h: New source.
 	* base-qr.cc: New source.
 	* dbleQR.h (QR): Rebase on base_qr<Matrix>.
 	* dbleQR.cc: Ditto.
 	* floatQR.h (QR): Rebase on base_qr<FloatMatrix>.
 	* floatQR.cc: Ditto.
diff --git a/liboctave/base-lu.cc b/liboctave/base-lu.cc
--- a/liboctave/base-lu.cc
+++ b/liboctave/base-lu.cc
@@ -163,13 +163,29 @@ base_lu <lu_type> :: P_vec (void) const
   Array<octave_idx_type> pvt = getp ();
 
   for (octave_idx_type i = 0; i < a_nr; i++)
     p.xelem (i) = static_cast<double> (pvt.xelem (i) + 1);
 
   return p;
 }
 
+template <class lu_type>
+bool
+base_lu<lu_type>::regular (void) const
+{
+  octave_idx_type k = std::min (a_fact.rows (), a_fact.columns ());
+  bool retval = true;
+  for (octave_idx_type i = 0; i < k; i++)
+    if (a_fact(i, i) == lu_elt_type ())
+      {
+        retval = false;
+        break;
+      }
+
+  return true;
+}
+
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
diff --git a/liboctave/base-lu.h b/liboctave/base-lu.h
--- a/liboctave/base-lu.h
+++ b/liboctave/base-lu.h
@@ -65,16 +65,18 @@ public:
   lu_type U (void) const;
 
   lu_type Y (void) const;
 
   PermMatrix P (void) const;
 
   ColumnVector P_vec (void) const;
 
+  bool regular (void) const;
+
 protected:
 
   Array<octave_idx_type> getp (void) const;
   lu_type a_fact, l_fact;
   Array<octave_idx_type> ipvt;
 };
 
 #endif
diff --git a/liboctave/base-qr.cc b/liboctave/base-qr.cc
--- a/liboctave/base-qr.cc
+++ b/liboctave/base-qr.cc
@@ -49,8 +49,24 @@ base_qr<qr_type>::get_type (void) const
     retval = qr_type_std;
   else if (q.rows () > q.columns () && r.is_square ())
     retval = qr_type_economy;
   else
     retval = qr_type_raw;
   return retval;
 }
 
+template <class qr_type>
+bool
+base_qr<qr_type>::regular (void) const
+{
+  octave_idx_type k = std::min (r.rows (), r.columns ());
+  bool retval = true;
+  for (octave_idx_type i = 0; i < k; i++)
+    if (r(i, i) == qr_elt_type ())
+      {
+        retval = false;
+        break;
+      }
+
+  return true;
+}
+
diff --git a/liboctave/base-qr.h b/liboctave/base-qr.h
--- a/liboctave/base-qr.h
+++ b/liboctave/base-qr.h
@@ -60,16 +60,18 @@ public:
     }
 
   qr_type Q (void) const { return q; }
 
   qr_type R (void) const { return r; }
 
   qr_type_t get_type (void) const;
 
+  bool regular (void) const;
+
 protected:
 
   qr_type q, r;
 };
 
 #ifndef HAVE_QRUPDATE
 void warn_qrupdate_once (void);
 #endif
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,21 @@
+2009-10-12  Jaroslav Hajek  <highegg@gmail.com>
+
+	* DLD-FUNCTIONS/lu.cc (maybe_set_triangular): Remove.
+	(get_lu_l, get_lu_u): New helper funcs.
+	(Flu, Fluupdate): Use them to auto-set MatrixType of results.
+	* DLD-FUNCTIONS/qr.cc (maybe_set_triangular): Remove.
+	(get_qr_r): New helper func.
+	(Fqr, Fqrupdate, Fqrinsert, Fqrdelete,
+	Fqrshift): Use it to auto-set MatrixType of results.
+	* DLD-FUNCTIONS/chol.cc (get_chol_r): New helper func.
+	(Fchol, Fcholupdate, Fcholinsert, Fcholdelete, Fcholshift): Use it
+	to auto-set MatrixType of result.
+
 2009-10-12  Jaroslav Hajek  <highegg@gmail.com>
 
 	* DLD-FUNCTIONS/matrix_type.cc (Fmatrix_type): Support 'nocompute'
 	option.
 
 2009-10-08  Jaroslav Hajek  <highegg@gmail.com>
 
 	* DLD-FUNCTIONS/lu.cc (Fluupdate): New DEFUN_DLD.
diff --git a/src/DLD-FUNCTIONS/chol.cc b/src/DLD-FUNCTIONS/chol.cc
--- a/src/DLD-FUNCTIONS/chol.cc
+++ b/src/DLD-FUNCTIONS/chol.cc
@@ -40,16 +40,24 @@ along with Octave; see the file COPYING.
 #include "ov-re-sparse.h"
 #include "ov-cx-sparse.h"
 #include "defun-dld.h"
 #include "error.h"
 #include "gripes.h"
 #include "oct-obj.h"
 #include "utils.h"
 
+template <class CHOLT>
+static octave_value
+get_chol_r (const CHOLT& fact)
+{
+  return octave_value (fact.chol_matrix (), 
+                       MatrixType (MatrixType::Upper));
+}
+
 DEFUN_DLD (chol, args, nargout,
   "-*- texinfo -*-\n\
 @deftypefn {Loadable Function} {@var{r} =} chol (@var{a})\n\
 @deftypefnx {Loadable Function} {[@var{r}, @var{p}] =} chol (@var{a})\n\
 @deftypefnx {Loadable Function} {[@var{r}, @var{p}, @var{q}] =} chol (@var{s})\n\
 @deftypefnx {Loadable Function} {[@var{r}, @var{p}, @var{q}] =} chol (@var{s}, 'vector')\n\
 @deftypefnx {Loadable Function} {[@var{l}, @dots{}] =} chol (@dots{}, 'lower')\n\
 @cindex Cholesky factorization\n\
@@ -242,17 +250,17 @@ sparse matrices.\n\
 		  octave_idx_type info;
 		  FloatCHOL fact (m, info);
 		  if (nargout == 2 || info == 0)
 		    {
 		      retval(1) = static_cast<float> (info);
 		      if (LLt)
 			retval(0) = fact.chol_matrix ().transpose ();
 		      else
-			retval(0) = fact.chol_matrix ();
+			retval(0) = get_chol_r (fact);
 		    }
 		  else
 		    error ("chol: matrix not positive definite");
 		}
 	    }
 	  else if (arg.is_complex_type ())
 	    {
 	      FloatComplexMatrix m = arg.float_complex_matrix_value ();
@@ -262,17 +270,17 @@ sparse matrices.\n\
 		  octave_idx_type info;
 		  FloatComplexCHOL fact (m, info);
 		  if (nargout == 2 || info == 0)
 		    {
 		      retval(1) = static_cast<float> (info);
 		      if (LLt)
 			retval(0) = fact.chol_matrix ().hermitian ();
 		      else
-			retval(0) = fact.chol_matrix ();
+			retval(0) = get_chol_r (fact);
 		    }
 		  else
 		    error ("chol: matrix not positive definite");
 		}
 	    }
 	  else
 	    gripe_wrong_type_arg ("chol", arg);
 	}
@@ -287,17 +295,17 @@ sparse matrices.\n\
 		  octave_idx_type info;
 		  CHOL fact (m, info);
 		  if (nargout == 2 || info == 0)
 		    {
 		      retval(1) = static_cast<double> (info);
 		      if (LLt)
 			retval(0) = fact.chol_matrix ().transpose ();
 		      else
-			retval(0) = fact.chol_matrix ();
+			retval(0) = get_chol_r (fact);
 		    }
 		  else
 		    error ("chol: matrix not positive definite");
 		}
 	    }
 	  else if (arg.is_complex_type ())
 	    {
 	      ComplexMatrix m = arg.complex_matrix_value ();
@@ -307,17 +315,17 @@ sparse matrices.\n\
 		  octave_idx_type info;
 		  ComplexCHOL fact (m, info);
 		  if (nargout == 2 || info == 0)
 		    {
 		      retval(1) = static_cast<double> (info);
 		      if (LLt)
 			retval(0) = fact.chol_matrix ().hermitian ();
 		      else
-			retval(0) = fact.chol_matrix ();
+			retval(0) = get_chol_r (fact);
 		    }
 		  else
 		    error ("chol: matrix not positive definite");
 		}
 	    }
 	  else
 	    gripe_wrong_type_arg ("chol", arg);
 	}
@@ -643,33 +651,33 @@ If @var{info} is not present, an error m
 		    FloatCHOL fact;
 		    fact.set (R);
 
 		    if (down)
 		      err = fact.downdate (u);
 		    else
 		      fact.update (u);
 
-		    retval(0) = fact.chol_matrix ();
+		    retval(0) = get_chol_r (fact);
 		  }
 		else
 		  {
 		    // complex case
 		    FloatComplexMatrix R = argr.float_complex_matrix_value ();
 		    FloatComplexColumnVector u = argu.float_complex_column_vector_value ();
 
 		    FloatComplexCHOL fact;
 		    fact.set (R);
 
 		    if (down)
 		      err = fact.downdate (u);
 		    else
 		      fact.update (u);
 
-		    retval(0) = fact.chol_matrix ();
+		    retval(0) = get_chol_r (fact);
 		  }
 	      }
 	    else
 	      {
 		if (argr.is_real_type () && argu.is_real_type ())
 		  {
 		    // real case
 		    Matrix R = argr.matrix_value ();
@@ -678,33 +686,33 @@ If @var{info} is not present, an error m
 		    CHOL fact;
 		    fact.set (R);
 
 		    if (down)
 		      err = fact.downdate (u);
 		    else
 		      fact.update (u);
 
-		    retval(0) = fact.chol_matrix ();
+		    retval(0) = get_chol_r (fact);
 		  }
 		else
 		  {
 		    // complex case
 		    ComplexMatrix R = argr.complex_matrix_value ();
 		    ComplexColumnVector u = argu.complex_column_vector_value ();
 
 		    ComplexCHOL fact;
 		    fact.set (R);
 
 		    if (down)
 		      err = fact.downdate (u);
 		    else
 		      fact.update (u);
 
-		    retval(0) = fact.chol_matrix ();
+		    retval(0) = get_chol_r (fact);
 		  }
 	      }
 
             if (nargout > 1)
               retval(1) = err;
             else if (err == 1)
               error ("cholupdate: downdate violates positiveness");
             else if (err == 2)
@@ -848,56 +856,56 @@ If @var{info} is not present, an error m
 		      // real case
 		      FloatMatrix R = argr.float_matrix_value ();
 		      FloatColumnVector u = argu.float_column_vector_value ();
 
 		      FloatCHOL fact;
 		      fact.set (R);
 		      err = fact.insert_sym (u, j-1);
 
-		      retval(0) = fact.chol_matrix ();
+		      retval(0) = get_chol_r (fact);
 		    }
 		  else
 		    {
 		      // complex case
 		      FloatComplexMatrix R = argr.float_complex_matrix_value ();
 		      FloatComplexColumnVector u = argu.float_complex_column_vector_value ();
 
 		      FloatComplexCHOL fact;
 		      fact.set (R);
 		      err = fact.insert_sym (u, j-1);
 
-		      retval(0) = fact.chol_matrix ();
+		      retval(0) = get_chol_r (fact);
 		    }
 		}
 	      else
 		{
 		  if (argr.is_real_type () && argu.is_real_type ())
 		    {
 		      // real case
 		      Matrix R = argr.matrix_value ();
 		      ColumnVector u = argu.column_vector_value ();
 
 		      CHOL fact;
 		      fact.set (R);
 		      err = fact.insert_sym (u, j-1);
 
-		      retval(0) = fact.chol_matrix ();
+		      retval(0) = get_chol_r (fact);
 		    }
 		  else
 		    {
 		      // complex case
 		      ComplexMatrix R = argr.complex_matrix_value ();
 		      ComplexColumnVector u = argu.complex_column_vector_value ();
 
 		      ComplexCHOL fact;
 		      fact.set (R);
 		      err = fact.insert_sym (u, j-1);
 
-		      retval(0) = fact.chol_matrix ();
+		      retval(0) = get_chol_r (fact);
 		    }
 		}
 
               if (nargout > 1)
                 retval(1) = err;
               else if (err == 1)
                 error ("cholinsert: insertion violates positiveness");
               else if (err == 2)
@@ -1018,53 +1026,53 @@ return the Cholesky@tie{}factorization o
 		    {
 		      // real case
 		      FloatMatrix R = argr.float_matrix_value ();
 
 		      FloatCHOL fact;
 		      fact.set (R);
 		      fact.delete_sym (j-1);
 
-		      retval(0) = fact.chol_matrix ();
+		      retval(0) = get_chol_r (fact);
 		    }
 		  else
 		    {
 		      // complex case
 		      FloatComplexMatrix R = argr.float_complex_matrix_value ();
 
 		      FloatComplexCHOL fact;
 		      fact.set (R);
 		      fact.delete_sym (j-1);
 
-		      retval(0) = fact.chol_matrix ();
+		      retval(0) = get_chol_r (fact);
 		    }
 		}
 	      else
 		{
 		  if (argr.is_real_type ())
 		    {
 		      // real case
 		      Matrix R = argr.matrix_value ();
 
 		      CHOL fact;
 		      fact.set (R);
 		      fact.delete_sym (j-1);
 
-		      retval(0) = fact.chol_matrix ();
+		      retval(0) = get_chol_r (fact);
 		    }
 		  else
 		    {
 		      // complex case
 		      ComplexMatrix R = argr.complex_matrix_value ();
 
 		      ComplexCHOL fact;
 		      fact.set (R);
 		      fact.delete_sym (j-1);
 
-		      retval(0) = fact.chol_matrix ();
+		      retval(0) = get_chol_r (fact);
 		    }
 		}
             }
           else
             error ("choldelete: index out of range");
         }
       else
         error ("choldelete: dimension mismatch");
@@ -1159,53 +1167,53 @@ return the Cholesky@tie{}factorization o
 		    {
 		      // real case
 		      FloatMatrix R = argr.float_matrix_value ();
 
 		      FloatCHOL fact;
 		      fact.set (R);
 		      fact.shift_sym (i-1, j-1);
 
-		      retval(0) = fact.chol_matrix ();
+		      retval(0) = get_chol_r (fact);
 		    }
 		  else
 		    {
 		      // complex case
 		      FloatComplexMatrix R = argr.float_complex_matrix_value ();
 
 		      FloatComplexCHOL fact;
 		      fact.set (R);
 		      fact.shift_sym (i-1, j-1);
 
-		      retval(0) = fact.chol_matrix ();
+		      retval(0) = get_chol_r (fact);
 		    }
 		}
 	      else
 		{
 		  if (argr.is_real_type ())
 		    {
 		      // real case
 		      Matrix R = argr.matrix_value ();
 
 		      CHOL fact;
 		      fact.set (R);
 		      fact.shift_sym (i-1, j-1);
 
-		      retval(0) = fact.chol_matrix ();
+		      retval(0) = get_chol_r (fact);
 		    }
 		  else
 		    {
 		      // complex case
 		      ComplexMatrix R = argr.complex_matrix_value ();
 
 		      ComplexCHOL fact;
 		      fact.set (R);
 		      fact.shift_sym (i-1, j-1);
 
-		      retval(0) = fact.chol_matrix ();
+		      retval(0) = get_chol_r (fact);
 		    }
 		}
             }
           else
             error ("cholshift: index out of range");
         }
       else
         error ("cholshift: dimension mismatch");
diff --git a/src/DLD-FUNCTIONS/lu.cc b/src/DLD-FUNCTIONS/lu.cc
--- a/src/DLD-FUNCTIONS/lu.cc
+++ b/src/DLD-FUNCTIONS/lu.cc
@@ -37,35 +37,34 @@ along with Octave; see the file COPYING.
 #include "gripes.h"
 #include "oct-obj.h"
 #include "utils.h"
 #include "ov-re-sparse.h"
 #include "ov-cx-sparse.h"
 
 template <class MT>
 static octave_value
-maybe_set_triangular (const MT& m, MatrixType::matrix_type t = MatrixType::Upper)
+get_lu_l (const base_lu<MT>& fact)
 {
-  typedef typename MT::element_type T;
-  octave_value retval;
-  octave_idx_type r = m.rows (), c = m.columns ();
-  if (r == c)
-    {
-      const T zero = T();
-      octave_idx_type i = 0;
-      for (;i != r && m(i,i) != zero; i++) ;
-      if (i == r)
-        retval = octave_value (m, MatrixType (t));
-      else
-        retval = m;
-    }
+  MT L = fact.L ();
+  if (L.is_square ())
+    return octave_value (L, MatrixType (MatrixType::Lower));
   else
-    retval = m;
+    return L;
+}
 
-  return retval;
+template <class MT>
+static octave_value
+get_lu_u (const base_lu<MT>& fact)
+{
+  MT U = fact.U ();
+  if (U.is_square () && fact.regular ())
+    return octave_value (U, MatrixType (MatrixType::Upper));
+  else
+    return U;
 }
 
 DEFUN_DLD (lu, args, nargout,
   "-*- texinfo -*-\n\
 @deftypefn {Loadable Function} {[@var{l}, @var{u}, @var{p}] =} lu (@var{a})\n\
 @deftypefnx {Loadable Function} {[@var{l}, @var{u}, @var{p}, @var{q}] =} lu (@var{s})\n\
 @deftypefnx {Loadable Function} {[@var{l}, @var{u}, @var{p}, @var{q}, @var{r}] =} lu (@var{s})\n\
 @deftypefnx {Loadable Function} {[@dots{}] =} lu (@var{s}, @var{thres})\n\
@@ -378,30 +377,30 @@ information.\n\
 		    case 1:
 		      retval(0) = fact.Y ();
 		      break;
 
 		    case 2:
 		      {
 			PermMatrix P = fact.P ();
 			FloatMatrix L = P.transpose () * fact.L ();
-			retval(1) = maybe_set_triangular (fact.U (), MatrixType::Upper);
+			retval(1) = get_lu_u (fact);
 			retval(0) = L;
 		      }
 		      break;
 
 		    case 3:
 		    default:
 		      {
 			if (vecout)
 			  retval(2) = fact.P_vec ();
 			else
 			  retval(2) = fact.P ();
-			retval(1) = maybe_set_triangular (fact.U (), MatrixType::Upper);
-			retval(0) = maybe_set_triangular (fact.L (), MatrixType::Lower);
+			retval(1) = get_lu_u (fact);
+			retval(0) = get_lu_l (fact);
 		      }
 		      break;
 		    }
 		}
 	    }
 	  else
 	    {
 	      Matrix m = arg.matrix_value ();
@@ -416,30 +415,30 @@ information.\n\
 		    case 1:
 		      retval(0) = fact.Y ();
 		      break;
 
 		    case 2:
 		      {
 			PermMatrix P = fact.P ();
 			Matrix L = P.transpose () * fact.L ();
-			retval(1) = maybe_set_triangular (fact.U (), MatrixType::Upper);
+			retval(1) = get_lu_u (fact);
 			retval(0) = L;
 		      }
 		      break;
 
 		    case 3:
 		    default:
 		      {
 			if (vecout)
 			  retval(2) = fact.P_vec ();
 			else
 			  retval(2) = fact.P ();
-			retval(1) = maybe_set_triangular (fact.U (), MatrixType::Upper);
-			retval(0) = maybe_set_triangular (fact.L (), MatrixType::Lower);
+			retval(1) = get_lu_u (fact);
+			retval(0) = get_lu_l (fact);
 		      }
 		      break;
 		    }
 		}
 	    }
 	}
       else if (arg.is_complex_type ())
 	{
@@ -457,30 +456,30 @@ information.\n\
 		    case 1:
 		      retval(0) = fact.Y ();
 		      break;
 
 		    case 2:
 		      {
 			PermMatrix P = fact.P ();
 			FloatComplexMatrix L = P.transpose () * fact.L ();
-			retval(1) = maybe_set_triangular (fact.U (), MatrixType::Upper);
+			retval(1) = get_lu_u (fact);
 			retval(0) = L;
 		      }
 		      break;
 
 		    case 3:
 		    default:
 		      {
 			if (vecout)
 			  retval(2) = fact.P_vec ();
 			else
 			  retval(2) = fact.P ();
-			retval(1) = maybe_set_triangular (fact.U (), MatrixType::Upper);
-			retval(0) = maybe_set_triangular (fact.L (), MatrixType::Lower);
+			retval(1) = get_lu_u (fact);
+			retval(0) = get_lu_l (fact);
 		      }
 		      break;
 		    }
 		}
 	    }
 	  else
 	    {
 	      ComplexMatrix m = arg.complex_matrix_value ();
@@ -495,30 +494,30 @@ information.\n\
 		    case 1:
 		      retval(0) = fact.Y ();
 		      break;
 
 		    case 2:
 		      {
 			PermMatrix P = fact.P ();
 			ComplexMatrix L = P.transpose () * fact.L ();
-			retval(1) = maybe_set_triangular (fact.U (), MatrixType::Upper);
+			retval(1) = get_lu_u (fact);
 			retval(0) = L;
 		      }
 		      break;
 
 		    case 3:
 		    default:
 		      {
 			if (vecout)
 			  retval(2) = fact.P_vec ();
 			else
 			  retval(2) = fact.P ();
-			retval(1) = maybe_set_triangular (fact.U (), MatrixType::Upper);
-			retval(0) = maybe_set_triangular (fact.L (), MatrixType::Lower);
+			retval(1) = get_lu_u (fact);
+			retval(0) = get_lu_l (fact);
 		      }
 		      break;
 		    }
 		}
 	    }
 	}
       else
 	gripe_wrong_type_arg ("lu", arg);
@@ -683,36 +682,36 @@ the factorization from scratch.\n\
 		  FloatLU fact (L, U, P);
                   if (pivoted)
                     fact.update_piv (x, y);
                   else
                     fact.update (x, y);
 
                   if (pivoted)
                     retval(2) = fact.P ();
-		  retval(1) = fact.U ();
-		  retval(0) = fact.L ();
+		  retval(1) = get_lu_u (fact);
+		  retval(0) = get_lu_l (fact);
 		}
 	      else
 		{
 		  Matrix L = argl.matrix_value ();
 		  Matrix U = argu.matrix_value ();
 		  Matrix x = argx.matrix_value ();
 		  Matrix y = argy.matrix_value ();
 
 		  LU fact (L, U, P);
                   if (pivoted)
                     fact.update_piv (x, y);
                   else
                     fact.update (x, y);
 
                   if (pivoted)
                     retval(2) = fact.P ();
-		  retval(1) = fact.U ();
-		  retval(0) = fact.L ();
+		  retval(1) = get_lu_u (fact);
+		  retval(0) = get_lu_l (fact);
 		}
             }
           else
             {
               // complex case
 	      if (argl.is_single_type () 
 		  || argu.is_single_type () 
 		  || argx.is_single_type () 
@@ -726,36 +725,36 @@ the factorization from scratch.\n\
 		  FloatComplexLU fact (L, U, P);
                   if (pivoted)
                     fact.update_piv (x, y);
                   else
                     fact.update (x, y);
               
                   if (pivoted)
                     retval(2) = fact.P ();
-		  retval(1) = fact.U ();
-		  retval(0) = fact.L ();
+		  retval(1) = get_lu_u (fact);
+		  retval(0) = get_lu_l (fact);
 		}
 	      else
 		{
 		  ComplexMatrix L = argl.complex_matrix_value ();
 		  ComplexMatrix U = argu.complex_matrix_value ();
 		  ComplexMatrix x = argx.complex_matrix_value ();
 		  ComplexMatrix y = argy.complex_matrix_value ();
 
 		  ComplexLU fact (L, U, P);
                   if (pivoted)
                     fact.update_piv (x, y);
                   else
                     fact.update (x, y);
               
                   if (pivoted)
                     retval(2) = fact.P ();
-		  retval(1) = fact.U ();
-		  retval(0) = fact.L ();
+		  retval(1) = get_lu_u (fact);
+		  retval(0) = get_lu_l (fact);
 		}
             }
         }
       else
 	error ("luupdate: dimensions mismatch");
     }
   else
     error ("luupdate: expecting numeric arguments");
diff --git a/src/DLD-FUNCTIONS/qr.cc b/src/DLD-FUNCTIONS/qr.cc
--- a/src/DLD-FUNCTIONS/qr.cc
+++ b/src/DLD-FUNCTIONS/qr.cc
@@ -41,35 +41,23 @@ along with Octave; see the file COPYING.
 #include "defun-dld.h"
 #include "error.h"
 #include "gripes.h"
 #include "oct-obj.h"
 #include "utils.h"
 
 template <class MT>
 static octave_value
-maybe_set_triangular (const MT& m, MatrixType::matrix_type t = MatrixType::Upper)
+get_qr_r (const base_qr<MT>& fact)
 {
-  typedef typename MT::element_type T;
-  octave_value retval;
-  octave_idx_type r = m.rows (), c = m.columns ();
-  if (r == c)
-    {
-      const T zero = T();
-      octave_idx_type i = 0;
-      for (;i != r && m(i,i) != zero; i++) ;
-      if (i == r)
-        retval = octave_value (m, MatrixType (t));
-      else
-        retval = m;
-    }
+  MT R = fact.R ();
+  if (R.is_square () && fact.regular ())
+    return octave_value (R, MatrixType (MatrixType::Upper));
   else
-    retval = m;
-
-  return retval;
+    return R;
 }
 
 // [Q, R] = qr (X):      form Q unitary and R upper triangular such
 //                        that Q * R = X
 //
 // [Q, R] = qr (X, 0):    form the economy decomposition such that if X is
 //                        m by n then only the first n columns of Q are
 //                        computed.
@@ -320,29 +308,29 @@ as\n\
 			FloatQR fact (m, type);
 			retval(0) = fact.R ();
 		      }
 		      break;
 
 		    case 2:
 		      {
 			FloatQR fact (m, type);
-			retval(1) = maybe_set_triangular (fact.R ());
+			retval(1) = get_qr_r (fact);
 			retval(0) = fact.Q ();
 		      }
 		      break;
 
 		    default:
 		      {
 			FloatQRP fact (m, type);
                         if (type == QR::economy)
                           retval(2) = fact.Pvec ();
                         else
                           retval(2) = fact.P ();
-			retval(1) = maybe_set_triangular (fact.R ());
+			retval(1) = get_qr_r (fact);
 			retval(0) = fact.Q ();
 		      }
 		      break;
 		    }
 		}
 	    }
 	  else if (arg.is_complex_type ())
 	    {
@@ -358,29 +346,29 @@ as\n\
 			FloatComplexQR fact (m, type);
 			retval(0) = fact.R ();
 		      }
 		      break;
 
 		    case 2:
 		      {
 			FloatComplexQR fact (m, type);
-			retval(1) = maybe_set_triangular (fact.R ());
+			retval(1) = get_qr_r (fact);
 			retval(0) = fact.Q ();
 		      }
 		      break;
 
 		    default:
 		      {
 			FloatComplexQRP fact (m, type);
                         if (type == QR::economy)
                           retval(2) = fact.Pvec ();
                         else
                           retval(2) = fact.P ();
-			retval(1) = maybe_set_triangular (fact.R ());
+			retval(1) = get_qr_r (fact);
 			retval(0) = fact.Q ();
 		      }
 		      break;
 		    }
 		}
 	    }
 	}
       else
@@ -399,29 +387,29 @@ as\n\
 			QR fact (m, type);
 			retval(0) = fact.R ();
 		      }
 		      break;
 
 		    case 2:
 		      {
 			QR fact (m, type);
-			retval(1) = maybe_set_triangular (fact.R ());
+			retval(1) = get_qr_r (fact);
 			retval(0) = fact.Q ();
 		      }
 		      break;
 
 		    default:
 		      {
 			QRP fact (m, type);
                         if (type == QR::economy)
                           retval(2) = fact.Pvec ();
                         else
                           retval(2) = fact.P ();
-			retval(1) = maybe_set_triangular (fact.R ());
+			retval(1) = get_qr_r (fact);
 			retval(0) = fact.Q ();
 		      }
 		      break;
 		    }
 		}
 	    }
 	  else if (arg.is_complex_type ())
 	    {
@@ -437,29 +425,29 @@ as\n\
 			ComplexQR fact (m, type);
 			retval(0) = fact.R ();
 		      }
 		      break;
 
 		    case 2:
 		      {
 			ComplexQR fact (m, type);
-			retval(1) = maybe_set_triangular (fact.R ());
+			retval(1) = get_qr_r (fact);
 			retval(0) = fact.Q ();
 		      }
 		      break;
 
 		    default:
 		      {
 			ComplexQRP fact (m, type);
                         if (type == QR::economy)
                           retval(2) = fact.Pvec ();
                         else
                           retval(2) = fact.P ();
-			retval(1) = maybe_set_triangular (fact.R ());
+			retval(1) = get_qr_r (fact);
 			retval(0) = fact.Q ();
 		      }
 		      break;
 		    }
 		}
 	    }
 	  else
 	    gripe_wrong_type_arg ("qr", arg);
@@ -833,30 +821,30 @@ The QR factorization supplied may be eit
 		  FloatMatrix Q = argq.float_matrix_value ();
 		  FloatMatrix R = argr.float_matrix_value ();
 		  FloatMatrix u = argu.float_matrix_value ();
 		  FloatMatrix v = argv.float_matrix_value ();
 
 		  FloatQR fact (Q, R);
 		  fact.update (u, v);
 
-		  retval(1) = fact.R ();
+		  retval(1) = get_qr_r (fact);
 		  retval(0) = fact.Q ();
 		}
 	      else
 		{
 		  Matrix Q = argq.matrix_value ();
 		  Matrix R = argr.matrix_value ();
 		  Matrix u = argu.matrix_value ();
 		  Matrix v = argv.matrix_value ();
 
 		  QR fact (Q, R);
 		  fact.update (u, v);
 
-		  retval(1) = fact.R ();
+		  retval(1) = get_qr_r (fact);
 		  retval(0) = fact.Q ();
 		}
             }
           else
             {
               // complex case
 	      if (argq.is_single_type () 
 		  || argr.is_single_type () 
@@ -866,30 +854,30 @@ The QR factorization supplied may be eit
 		  FloatComplexMatrix Q = argq.float_complex_matrix_value ();
 		  FloatComplexMatrix R = argr.float_complex_matrix_value ();
 		  FloatComplexMatrix u = argu.float_complex_matrix_value ();
 		  FloatComplexMatrix v = argv.float_complex_matrix_value ();
 
 		  FloatComplexQR fact (Q, R);
 		  fact.update (u, v);
               
-		  retval(1) = fact.R ();
+		  retval(1) = get_qr_r (fact);
 		  retval(0) = fact.Q ();
 		}
 	      else
 		{
 		  ComplexMatrix Q = argq.complex_matrix_value ();
 		  ComplexMatrix R = argr.complex_matrix_value ();
 		  ComplexMatrix u = argu.complex_matrix_value ();
 		  ComplexMatrix v = argv.complex_matrix_value ();
 
 		  ComplexQR fact (Q, R);
 		  fact.update (u, v);
               
-		  retval(1) = fact.R ();
+		  retval(1) = get_qr_r (fact);
 		  retval(0) = fact.Q ();
 		}
             }
         }
       else
 	error ("qrupdate: dimensions mismatch");
     }
   else
@@ -1036,34 +1024,34 @@ If @var{orient} is @code{\"row\"}, full 
 
 			FloatQR fact (Q, R);
 
 			if (col) 
 			  fact.insert_col (x, j-1);
 			else 
 			  fact.insert_row (x.row (0), j(0)-1);
 
-			retval(1) = fact.R ();
+			retval(1) = get_qr_r (fact);
 			retval(0) = fact.Q ();
 
 		      }
 		    else
 		      {
 			Matrix Q = argq.matrix_value ();
 			Matrix R = argr.matrix_value ();
 			Matrix x = argx.matrix_value ();
 
 			QR fact (Q, R);
 
 			if (col) 
 			  fact.insert_col (x, j-1);
 			else 
 			  fact.insert_row (x.row (0), j(0)-1);
 
-			retval(1) = fact.R ();
+			retval(1) = get_qr_r (fact);
 			retval(0) = fact.Q ();
 
 		      }
                   }
                 else
                   {
                     // complex case
 		    if (argq.is_single_type () 
@@ -1076,33 +1064,33 @@ If @var{orient} is @code{\"row\"}, full 
 
 			FloatComplexQR fact (Q, R);
 
 			if (col) 
 			  fact.insert_col (x, j-1);
 			else 
 			  fact.insert_row (x.row (0), j(0)-1);
 
-			retval(1) = fact.R ();
+			retval(1) = get_qr_r (fact);
 			retval(0) = fact.Q ();
 		      }
 		    else
 		      {
 			ComplexMatrix Q = argq.complex_matrix_value ();
 			ComplexMatrix R = argr.complex_matrix_value ();
 			ComplexMatrix x = argx.complex_matrix_value ();
 
 			ComplexQR fact (Q, R);
 
 			if (col) 
 			  fact.insert_col (x, j-1);
 			else 
 			  fact.insert_row (x.row (0), j(0)-1);
 
-			retval(1) = fact.R ();
+			retval(1) = get_qr_r (fact);
 			retval(0) = fact.Q ();
 		      }
                   }
 
               }
             else
               error ("qrinsert: invalid index");
           }
@@ -1247,32 +1235,32 @@ If @var{orient} is @code{\"row\"}, full 
 
 			FloatQR fact (Q, R);
 
 			if (col) 
                           fact.delete_col (j-1);
 			else 
 			  fact.delete_row (j(0)-1);
 
-			retval(1) = fact.R ();
+			retval(1) = get_qr_r (fact);
 			retval(0) = fact.Q ();
 		      }
 		    else
 		      {
 			Matrix Q = argq.matrix_value ();
 			Matrix R = argr.matrix_value ();
 
 			QR fact (Q, R);
 
 			if (col) 
                           fact.delete_col (j-1);
 			else 
 			  fact.delete_row (j(0)-1);
 
-			retval(1) = fact.R ();
+			retval(1) = get_qr_r (fact);
 			retval(0) = fact.Q ();
 		      }
                   }
                 else
                   {
                     // complex case
 		    if (argq.is_single_type ()
 			|| argr.is_single_type ())
@@ -1282,32 +1270,32 @@ If @var{orient} is @code{\"row\"}, full 
 
 			FloatComplexQR fact (Q, R);
 
 			if (col) 
                           fact.delete_col (j-1);
 			else 
 			  fact.delete_row (j(0)-1);
 
-			retval(1) = fact.R ();
+			retval(1) = get_qr_r (fact);
 			retval(0) = fact.Q ();
 		      }
 		    else
 		      {
 			ComplexMatrix Q = argq.complex_matrix_value ();
 			ComplexMatrix R = argr.complex_matrix_value ();
 
 			ComplexQR fact (Q, R);
 
 			if (col) 
                           fact.delete_col (j-1);
 			else 
 			  fact.delete_row (j(0)-1);
 
-			retval(1) = fact.R ();
+			retval(1) = get_qr_r (fact);
 			retval(0) = fact.Q ();
 		      }
                   }
               }
             else
               error ("qrdelete: invalid index");
           }
         else
@@ -1473,55 +1461,55 @@ of @w{@var{A}(:,p)}, where @w{p} is the 
 		      && argr.is_single_type ())
 		    {
 		      FloatMatrix Q = argq.float_matrix_value ();
 		      FloatMatrix R = argr.float_matrix_value ();
 
 		      FloatQR fact (Q, R);
 		      fact.shift_cols (i-1, j-1);
 
-		      retval(1) = fact.R ();
+		      retval(1) = get_qr_r (fact);
 		      retval(0) = fact.Q ();
 		    }
 		  else
 		    {
 		      Matrix Q = argq.matrix_value ();
 		      Matrix R = argr.matrix_value ();
 
 		      QR fact (Q, R);
 		      fact.shift_cols (i-1, j-1);
 
-		      retval(1) = fact.R ();
+		      retval(1) = get_qr_r (fact);
 		      retval(0) = fact.Q ();
 		    }
                 }
               else
                 {
                   // complex case
 		  if (argq.is_single_type () 
 		      && argr.is_single_type ())
 		    {
 		      FloatComplexMatrix Q = argq.float_complex_matrix_value ();
 		      FloatComplexMatrix R = argr.float_complex_matrix_value ();
 
 		      FloatComplexQR fact (Q, R);
 		      fact.shift_cols (i-1, j-1);
                   
-		      retval(1) = fact.R ();
+		      retval(1) = get_qr_r (fact);
 		      retval(0) = fact.Q ();
 		    }
 		  else
 		    {
 		      ComplexMatrix Q = argq.complex_matrix_value ();
 		      ComplexMatrix R = argr.complex_matrix_value ();
 
 		      ComplexQR fact (Q, R);
 		      fact.shift_cols (i-1, j-1);
                   
-		      retval(1) = fact.R ();
+		      retval(1) = get_qr_r (fact);
 		      retval(0) = fact.Q ();
 		    }
                 }
             }
           else
             error ("qrshift: invalid index");
         }
       else
