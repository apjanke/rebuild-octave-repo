# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1295289419 18000
#      Mon Jan 17 13:36:59 2011 -0500
# Node ID e9d72a3caa46a99b0caa4293a305cd62f8dbb183
# Parent  e582adc89d55dd49481604ee9be954c10e371658
mark automatic variables as automatic

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,16 @@
+2011-01-17  John W. Eaton  <jwe@octave.org>
+
+	* ov-usr-fcn.cc (bind_automatic_vars): Mark variables created
+	here as automatic.
+
+	* symtab.h (symbol_table::mark_automatic): New function.
+	(symbol_table::do_mark_automatic): New function.
+
 2011-01-17  Michael Godfrey <godfrey@isl.stanford.edu>
 
 	* variables.cc (Fwhos): Describe a and f attributes in help text.
 
 2011-01-17  John W. Eaton  <jwe@octave.org>
 
 	* sighandlers.cc (octave_signal_handler): Wait for children here.
 	(sigchld_handler): Not here.
diff --git a/src/ov-usr-fcn.cc b/src/ov-usr-fcn.cc
--- a/src/ov-usr-fcn.cc
+++ b/src/ov-usr-fcn.cc
@@ -538,24 +538,31 @@ octave_user_function::print_code_functio
 }
 
 void
 octave_user_function::bind_automatic_vars
   (const string_vector& arg_names, int nargin, int nargout,
    const octave_value_list& va_args, const std::list<octave_lvalue> *lvalue_list)
 {
   if (! arg_names.empty ())
-    symbol_table::varref ("argn") = arg_names;
+    {
+      symbol_table::varref ("argn") = arg_names;
+
+      symbol_table::mark_automatic ("argn");
+    }
 
   symbol_table::varref (".nargin.") = nargin;
   symbol_table::varref (".nargout.") = nargout;
 
   symbol_table::mark_hidden (".nargin.");
   symbol_table::mark_hidden (".nargout.");
 
+  symbol_table::mark_automatic (".nargin.");
+  symbol_table::mark_automatic (".nargout.");
+
   if (takes_varargs ())
     symbol_table::varref ("varargin") = va_args.cell_value ();
   
   if (lvalue_list)
     {
       octave_idx_type nbh = 0;
       for (std::list<octave_lvalue>::const_iterator p = lvalue_list->begin ();
            p != lvalue_list->end (); p++)
@@ -570,17 +577,19 @@ octave_user_function::bind_automatic_var
                p != lvalue_list->end (); p++)
             {
               if (p->is_black_hole ())
                 bh(l++) = k+1;
               k += p->numel ();
             }
 
           symbol_table::varref (".ignored.") = bh;
+
           symbol_table::mark_hidden (".ignored.");
+          symbol_table::mark_automatic (".ignored.");
         }
     }
 }
 
 DEFUN (nargin, args, ,
   "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {} nargin ()\n\
 @deftypefnx {Built-in Function} {} nargin (@var{fcn_name})\n\
diff --git a/src/symtab.h b/src/symtab.h
--- a/src/symtab.h
+++ b/src/symtab.h
@@ -1573,16 +1573,24 @@ public:
         if (inst)
           inst->do_pop_context ();
       }
   }
 
   // For unwind_protect.
   static void pop_context (void *) { pop_context (); }
 
+  static void mark_automatic (const std::string& name)
+  {
+    symbol_table *inst = get_instance (xcurrent_scope);
+
+    if (inst)
+      inst->do_mark_automatic (name);
+  }
+
   static void mark_hidden (const std::string& name)
   {
     symbol_table *inst = get_instance (xcurrent_scope);
 
     if (inst)
       inst->do_mark_hidden (name);
   }
 
@@ -2262,16 +2270,21 @@ private:
         if (sr.is_defined () || sr.is_global ())
           {
             if (pattern.match (sr.name ()))
               sr.clear ();
           }
       }
   }
 
+  void do_mark_automatic (const std::string& name)
+  {
+    do_insert (name).mark_automatic ();
+  }
+
   void do_mark_hidden (const std::string& name)
   {
     do_insert (name).mark_hidden ();
   }
 
   void do_mark_global (const std::string& name)
   {
     do_insert (name).mark_global ();
