# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1287081839 14400
#      Thu Oct 14 14:43:59 2010 -0400
# Node ID dcde7c5a1d293255d274d9b2808f5b974e022c08
# Parent  ffb2f1ef209743fc0ab88ba67452d05e82ddbd0c
new tests for special-matrix functions

diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,8 +1,15 @@
+2010-10-14  John W. Eaton  <jwe@octave.org>
+
+	* special-matrix/rosser.m: New tests.
+	* special-matrix/wilkinson.m: Fix error message.  New tests.
+	* special-matrix/pascal.m: Error if T is out of range.
+	New tests.
+
 2010-10-14  John W. Eaton  <jwe@octave.org>
 
 	* set/unique.m: Remove check for issparse existence since it is
 	now a built-in function.
 
 2010-10-14  Ben Abbott <bpabbott@mac.com>
 
 	* strings/strjust.m: Clarify that justification  applies to spaces and
diff --git a/scripts/special-matrix/pascal.m b/scripts/special-matrix/pascal.m
--- a/scripts/special-matrix/pascal.m
+++ b/scripts/special-matrix/pascal.m
@@ -15,17 +15,16 @@
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {} pascal (@var{n})
 ## @deftypefnx {Function File} {} pascal (@var{n}, @var{t})
-##
 ## Return the Pascal matrix of order @var{n} if @code{@var{t} = 0}.
 ## @var{t} defaults to 0.  Return lower triangular Cholesky factor of 
 ## the Pascal matrix if @code{@var{t} = 1}.  This matrix is its own
 ## inverse, that is @code{pascal (@var{n}, 1) ^ 2 == eye (@var{n})}.
 ## If @code{@var{t} = -1}, return its absolute value.  This is the
 ## standard Pascal triangle as a lower-triangular matrix.
 ## If @code{@var{t} = 2}, return a transposed and permuted version of
 ## @code{pascal (@var{n}, 1)}, which is the cube-root of the identity
@@ -47,16 +46,20 @@ function retval = pascal (n, t)
   if (nargin == 1)
     t = 0;
   endif
 
   if (! isscalar (n) || ! isscalar (t))
     error ("pascal: expecting scalar arguments, found something else");
   endif
 
+  if (t < -1 || t > 2)
+    error ("pascal: expecting t to be -1, 0, 1, or 2, found %d", t);
+  endif
+
   retval = zeros (n);
   retval(:,1) = 1;
 
   if (t == -1)
     for j = 2:n
       retval(j:n,j) = cumsum (retval (j-1:n-1,j-1));
     endfor
   else
@@ -73,8 +76,18 @@ function retval = pascal (n, t)
     retval(:,n) = -retval(:,n);
     retval(n,:) = -retval(n,:);
     if (rem(n,2) != 1)
       retval = -retval;
     endif
   endif
 
 endfunction
+
+%!assert (pascal(3,-1), [1,0,0;1,1,0;1,2,1])
+%!assert (pascal(3,0), [1,1,1;1,2,3;1,3,6])
+%!assert (pascal(3,0), pascal(3))
+%!assert (pascal(3,1), [1,0,0;1,-1,0;1,-2,1])
+%!assert (pascal(3,2), [0,0,-1;0,-1,2;-1,-1,1])
+%!error (pascal(3,4))
+%!error (pascal(3,-2))
+%!error (pascal())
+%!error (pascal(1,2,3))
diff --git a/scripts/special-matrix/rosser.m b/scripts/special-matrix/rosser.m
--- a/scripts/special-matrix/rosser.m
+++ b/scripts/special-matrix/rosser.m
@@ -13,17 +13,16 @@
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} rosser ()
-##
 ## Return the Rosser matrix.  This is a difficult test case used to evaluate
 ## eigenvalue algorithms.
 ##
 ## @seealso{hankel, vander, sylvester_matrix, hilb, invhilb, toeplitz
 ##          hadamard, wilkinson, compan, pascal}
 ## @end deftypefn
 
 ## Author: Peter Ekberg
@@ -39,8 +38,11 @@ function retval = rosser ()
             196,   899,   113,  -192,   -71,   -43,    -8,   -44;
            -192,   113,   899,   196,    61,    49,     8,    52;
             407,  -192,   196,   611,     8,    44,    59,   -23;
              -8,   -71,    61,     8,   411,  -599,   208,   208;
             -52,   -43,    49,    44,  -599,   411,   208,   208;
             -49,    -8,     8,    59,   208,   208,    99,  -911;
              29,   -44,    52,   -23,   208,   208,  -911,    99];
 endfunction
+
+%!assert (size(rosser()), [8,8])
+%!error (rosser(1))
diff --git a/scripts/special-matrix/wilkinson.m b/scripts/special-matrix/wilkinson.m
--- a/scripts/special-matrix/wilkinson.m
+++ b/scripts/special-matrix/wilkinson.m
@@ -13,17 +13,16 @@
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} wilkinson (@var{n})
-##
 ## Return the Wilkinson matrix of order @var{n}.  Wilkinson matrices are
 ## symmetric and tridiagonal with pairs of nearly, but not exactly, equal
 ## eigenvalues.
 ##
 ## @seealso{hankel, vander, sylvester_matrix, hilb, invhilb, toeplitz
 ##           hadamard, rosser, compan, pascal}
 ## @end deftypefn
 
@@ -32,16 +31,23 @@
 
 function retval = wilkinson (n)
 
   if (nargin != 1)
     print_usage ();
   endif
 
   if (! (isscalar (n) && (n == fix (n)) && n > 0))
-    error ("wilkinson: N must be an integer greater than 1");
+    error ("wilkinson: N must be an integer greater than 0");
   endif
 
   side = ones (n-1, 1);
   center = abs (-(n-1)/2:(n-1)/2);
   retval = diag (side, -1) + diag (center) + diag (side, 1);
 
 endfunction
+
+%!assert (wilkinson(1), [])
+%!assert (wilkinson(2), [0.5,1;1,0.5])
+%!assert (wilkinson(3), [1,1,0;1,0,1;0,1,1])
+%!assert (wilkinson(4), [1.5,1,0,0;1,0.5,1,0;0,1,0.5,1;0,0,1,1.5])
+%!error (wilkinson())
+%!error (wilkinson(1,2))
\ No newline at end of file
