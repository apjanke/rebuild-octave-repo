# HG changeset patch
# User jwe
# Date 1196442596 0
#      Fri Nov 30 17:09:56 2007 +0000
# Node ID 64d6f4dc37e0e98be981d05c541dcfd47c0cd050
# Parent  685c186d8f62f8471334c6c2396fb8b155bfcec1
[project @ 2007-11-30 17:09:55 by jwe]

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,16 +1,18 @@
 2007-11-30  Moritz Borgmann  <octave@moriborg.de>
 
 	* ls-mat5.h (mat5_data_type): Delete trailing comma in enum decl.
 	* oct-stream.cc (octave_base_stream::do_printf): Use
 	OCTAVE_EMPTY_CPP_ARG to avoid annoying Sun compiler warning.
 	* OPERATORS/op-sbm-sbm.cc (DEFDBLCONVFN): Delete useless macro
 	invocation.
 
+	* DLD-FUNCTIONS/typecast.cc (typecast): No longer static.
+
 2007-11-30  John W. Eaton  <jwe@octave.org>
 
 	* graphics.cc (updating_axis_limits): New static variable.
 	(check_limit_val, check_limit_vals, get_axis_limits): New functions.
 	(axes::update_axis_limits): Make it work.
 	* graphics.h.in (base_properties::get_children): New function.
 	(base_properties::get_xdata, base_properties::get_ydata,
 	base_properties::get_zdata, base_properties::get_ldata,
diff --git a/src/DLD-FUNCTIONS/typecast.cc b/src/DLD-FUNCTIONS/typecast.cc
--- a/src/DLD-FUNCTIONS/typecast.cc
+++ b/src/DLD-FUNCTIONS/typecast.cc
@@ -25,38 +25,38 @@ along with Octave; see the file COPYING.
 #endif
 
 #include <algorithm>
 #include <string>
 
 #include "oct.h"
 
 template <class LT, class RT>
-static void
+/* static */ void
 typecast (const Array<RT>& x, Array<LT>& y)
 {
   octave_idx_type n = x.length ();
   size_t ns = sizeof (RT);
   size_t ms = sizeof (LT);
 
   if (n * ns % ms != 0)
-      error ("typecast: incorrect number of input values to make output value");
+    error ("typecast: incorrect number of input values to make output value");
   else
     {
       octave_idx_type m = n * ns / ms;
       dim_vector dv = x.dims ();
       for (octave_idx_type i = 0; i < dv.length(); i++)
 	if (dv(i) == n)
 	  {
 	    dv(i) = m;
 	    break;
 	  }
       y.resize (dv);
-      const unsigned char *xp = reinterpret_cast<const unsigned char *>
-	(x.fortran_vec ());
+      const unsigned char *xp
+	= reinterpret_cast<const unsigned char *> (x.fortran_vec ());
       unsigned char *yp = reinterpret_cast<unsigned char *>(y.fortran_vec ());
       for (octave_idx_type i = 0; 
 	   i < n * static_cast<octave_idx_type>(ns); i++)
 	*yp++ = *xp++;
     }
 }
 
 template <class T>
@@ -152,21 +152,21 @@ typecast (@var{x}, 'uint8')\n\
       std::string type = args (1).string_value ();
 
       if (! error_state)
 	{
 	  std::transform (type.begin (), type.end (), type.begin (), tolower);
 
 	  if (type == "single")
 	    error ("typecast: type 'single' is not supported");
-	  else if (type != "uint8" && type != "uint16" &&
-	      type != "uint32" && type != "uint64" &&
-	      type != "int8" && type != "int16" &&
-	      type != "int32" && type != "int64" &&
-	      type != "single" && type != "double")
+	  else if (type != "uint8" && type != "uint16"
+		   && type != "uint32" && type != "uint64"
+		   && type != "int8" && type != "int16"
+		   && type != "int32" && type != "int64"
+		   && type != "single" && type != "double")
 	    error ("typecast: unrecognized or invalid type");
 	  else if (args(0).is_sparse_type () || args(0).is_complex_type ())
 	    error ("typecast: sparse and complex types are invalid");
 	  else
 	    {
 	      dim_vector dv = args(0).dims ();
 	      bool seen = false;
 
