# HG changeset patch
# User Jacob Dawid <jacob.dawid@googlemail.com>
# Date 1303295721 -7200
#      Wed Apr 20 12:35:21 2011 +0200
# Node ID bf51c1bb70330adfafc0f5b33c8bac6ce7ab4795
# Parent  d65b8f5373b4617568e2c9f65d14ed068590a6f3
Changing background color is possible now.

diff --git a/gui/src/Plot2dWidget.cpp b/gui/src/Plot2dWidget.cpp
--- a/gui/src/Plot2dWidget.cpp
+++ b/gui/src/Plot2dWidget.cpp
@@ -1,33 +1,47 @@
 #include "Plot2dWidget.h"
 #include <QVBoxLayout>
 #include <QHBoxLayout>
 #include <QPushButton>
 #include <QTimer>
 #include <QLabel>
+#include <QColorDialog>
 #include <math.h>
 
 Plot2dView::Plot2dView(QWidget *parent)
     : QGLWidget(parent) {
     construct();
 }
 
 void Plot2dView::construct() {
     QTimer *animationTimer = new QTimer(this);
     animationTimer->setInterval(20);
     animationTimer->start();
     m_zoom = 1.0;
     m_zoomAcceleration = 0.0;
     m_scrollX = 0.0;
     m_scrollY = 0.0;
     m_leftMouseButtonDown = false;
+    setBackgroundColor(QColor(0, 0, 0));
     connect(animationTimer, SIGNAL(timeout()), this, SLOT(animate()));
 }
 
+QColor Plot2dView::backgroundColor() {
+    return m_backgroundColor;
+}
+
+void Plot2dView::setBackgroundColor(QColor color) {
+    m_backgroundColor = color;
+    glClearColor((double)color.red() / 255.0,
+                 (double)color.green() / 255.0,
+                 (double)color.blue() / 255.0, 0.0);
+    updateGL();
+}
+
 void Plot2dView::initializeGL() {
     glClearColor(0.0,0.0, 0.0, 0.0);
     glEnable(GL_POINT_SMOOTH);
     // glEnable(GL_LINE_SMOOTH);
     glEnable(GL_POLYGON_SMOOTH);
     glEnable(GL_BLEND);
     glBlendFunc(GL_SRC_ALPHA,GL_ONE_MINUS_SRC_ALPHA);
 }
@@ -125,37 +139,47 @@ Plot2dWidget::Plot2dWidget(QWidget *pare
 void Plot2dWidget::dataSourceTypeChanged(QString type) {
     if(type == "Sampled") {
         m_dataSourceStackedWidget->setCurrentIndex(0);
     } else if(type == "Parameterized") {
         m_dataSourceStackedWidget->setCurrentIndex(1);
     }
 }
 
+void Plot2dWidget::selectBackgroundColor() {
+    QColorDialog dialog(this);
+    dialog.setCurrentColor(m_plot2dView->backgroundColor());
+    dialog.setOption(QColorDialog::NoButtons);
+    connect(&dialog, SIGNAL(currentColorChanged(QColor)), m_plot2dView, SLOT(setBackgroundColor(QColor)));
+    dialog.exec();
+}
+
 void Plot2dWidget::construct() {
     QVBoxLayout *layout = new QVBoxLayout();
     m_plot2dView = new Plot2dView(this);
     m_plot2dView->setSizePolicy(QSizePolicy::Expanding, QSizePolicy::Expanding);
     layout->addWidget(m_plot2dView);
 
     m_tabWidget = new QTabWidget(this);
     m_tabWidget->setSizePolicy(QSizePolicy::Expanding, QSizePolicy::Minimum);
     layout->addWidget(m_tabWidget);
 
     m_generalTab = new QWidget(this);
     m_dataSourceTab = new QWidget(this);
-    m_verticalAxisTab = new QWidget(this);
-    m_horizontalAxisTab = new QWidget(this);
+    m_seriesTab = new QWidget(this);
     m_tabWidget->addTab(m_generalTab, tr("General"));
     m_tabWidget->addTab(m_dataSourceTab, tr("Data Source"));
-    m_tabWidget->addTab(m_verticalAxisTab, tr("Vertical Axis"));
-    m_tabWidget->addTab(m_horizontalAxisTab, tr("Horizontal Axis"));
+    m_tabWidget->addTab(m_seriesTab, tr("Series"));
 
         // Build general tab.
         QHBoxLayout *generalTabLayout = new QHBoxLayout();
+        m_backgroundColorSelectionButton = new QPushButton(tr("Change"), this);
+        generalTabLayout->addWidget(new QLabel(tr("Background Color:"), this));
+        generalTabLayout->addWidget(m_backgroundColorSelectionButton);
+        generalTabLayout->addStretch();
         m_generalTab->setLayout(generalTabLayout);
 
         // Build data source tab.
         QHBoxLayout *dataSourceTabLayout = new QHBoxLayout();
         m_dataSourceTypeComboBox = new QComboBox(this);
         m_dataSourceTypeComboBox->addItem(tr("Sampled"));
         m_dataSourceTypeComboBox->addItem(tr("Parameterized"));
 
@@ -199,9 +223,10 @@ void Plot2dWidget::construct() {
         dataSourceTabLayout->addWidget(m_dataSourceStackedWidget);
         dataSourceTabLayout->addWidget(m_refreshDataRangeButton);
         m_dataSourceTab->setLayout(dataSourceTabLayout);
 
     layout->setMargin(0);
     setLayout(layout);
 
     connect(m_dataSourceTypeComboBox, SIGNAL(currentIndexChanged(QString)), this, SLOT(dataSourceTypeChanged(QString)));
+    connect(m_backgroundColorSelectionButton, SIGNAL(clicked()), this, SLOT(selectBackgroundColor()));
 }
diff --git a/gui/src/Plot2dWidget.h b/gui/src/Plot2dWidget.h
--- a/gui/src/Plot2dWidget.h
+++ b/gui/src/Plot2dWidget.h
@@ -5,21 +5,26 @@
 #include <QGLWidget>
 #include <QTabWidget>
 #include <QStackedWidget>
 #include <QComboBox>
 #include <QWheelEvent>
 #include <QMouseEvent>
 #include <QLineEdit>
 #include <QPushButton>
+#include <QColor>
 
 class Plot2dView : public QGLWidget {
     Q_OBJECT
 public:
     explicit Plot2dView(QWidget *parent = 0);
+    QColor backgroundColor();
+
+public slots:
+    void setBackgroundColor(QColor color);
 
 protected:
     void initializeGL();
     void paintGL();
     void resizeGL(int w, int h);
     void wheelEvent(QWheelEvent *wheelEvent);
     void mousePressEvent(QMouseEvent *mouseEvent);
     void mouseReleaseEvent(QMouseEvent *mouseEvent);
@@ -32,38 +37,40 @@ private:
     void construct();
     bool m_leftMouseButtonDown;
     double m_lastMouseButtonDownX;
     double m_lastMouseButtonDownY;
     double m_scrollX;
     double m_scrollY;
     double m_zoom;
     double m_zoomAcceleration;
+    QColor m_backgroundColor;
 };
 
 class Plot2dWidget : public QWidget
 {
     Q_OBJECT
 public:
     explicit Plot2dWidget(QWidget *parent = 0);
 
 signals:
 
 public slots:
     void dataSourceTypeChanged(QString type);
+    void selectBackgroundColor();
 
 private:
     void construct();
 
     Plot2dView *m_plot2dView;
     QTabWidget *m_tabWidget;
     QWidget *m_generalTab;
     QWidget *m_dataSourceTab;
-    QWidget *m_verticalAxisTab;
-    QWidget *m_horizontalAxisTab;
+    QWidget *m_seriesTab;
+    QPushButton *m_backgroundColorSelectionButton;
     QComboBox *m_dataSourceTypeComboBox;
     QStackedWidget *m_dataSourceStackedWidget;
     QLineEdit *m_sampledFromLineEdit;
     QLineEdit *m_sampledToLineEdit;
     QLineEdit *m_parameterizedFromLineEdit;
     QLineEdit *m_parameterizedToLineEdit;
     QPushButton *m_refreshDataRangeButton;
 };
