# HG changeset patch
# User Rik <rik@octave.org>
# Date 1515347852 28800
#      Sun Jan 07 09:57:32 2018 -0800
# Node ID d3a507ca2d5d9c6bfd3011ab5f581b0128217663
# Parent  0c204cd762a4c3c8af1981f3b442b631067f3b2a
# Parent  ba8b828ee4f2be8eab61111e2316b66158f22d90
maint: merge stable to default.

diff --git a/doc/interpreter/diffeq.txi b/doc/interpreter/diffeq.txi
--- a/doc/interpreter/diffeq.txi
+++ b/doc/interpreter/diffeq.txi
@@ -67,17 +67,17 @@ Here is an example of solving a set of t
 
 @example
 @group
 ## oregonator differential equation
 function xdot = f (x, t)
 
   xdot = zeros (3,1);
 
-  xdot(1) = 77.27 * (x(2) - x(1)*x(2) + x(1) \
+  xdot(1) = 77.27 * (x(2) - x(1)*x(2) + x(1) ...
             - 8.375e-06*x(1)^2);
   xdot(2) = (x(3) - x(1)*x(2) - x(2)) / 77.27;
   xdot(3) = 0.161*(x(1) - x(3));
 
 endfunction
 @end group
 @end example
 
@@ -94,17 +94,17 @@ y = lsode ("f", x0, t);
 @end example
 
 If you try this, you will see that the value of the result changes
 dramatically between @var{t} = 0 and 5, and again around @var{t} = 305.
 A more efficient set of output points might be
 
 @example
 @group
-t = [0, logspace(-1, log10(303), 150), \
+t = [0, logspace(-1, log10(303), 150), ...
         logspace(log10(304), log10(500), 150)];
 @end group
 @end example
 
 See @nospell{Alan C. Hindmarsh},
 @cite{ODEPACK, A Systematized Collection of ODE Solvers},
 in Scientific Computing, @nospell{R. S. Stepleman}, editor, (1983)
 for more information about the inner workings of @code{lsode}.
diff --git a/doc/interpreter/quad.txi b/doc/interpreter/quad.txi
--- a/doc/interpreter/quad.txi
+++ b/doc/interpreter/quad.txi
@@ -76,17 +76,17 @@ discontinuities, singularities, oscillat
 When the integrand is smooth @code{quadgk} may be the fastest of the
 algorithms.
 
 @multitable @columnfractions 0.05 0.15 .80
 @headitem @tab Function @tab Characteristics
 @item @tab quad   @tab Low accuracy with nonsmooth integrands
 @item @tab quadv  @tab Medium accuracy with smooth integrands
 @item @tab quadl  @tab Medium accuracy with smooth integrands.  Slower than quadgk.
-@item @tab quadgk @tab Medium accuracy (@math{1e^{-6}}--@math{1e^{-9}}) with smooth integrands.
+@item @tab quadgk @tab Medium accuracy (1e-6 -- 1e-9) with smooth integrands.
 @item @tab        @tab Handles oscillatory functions and infinite bounds
 @item @tab quadcc @tab Low to High accuracy with nonsmooth/smooth integrands
 @item @tab        @tab Handles oscillatory functions, singularities, and infinite bounds
 @end multitable
 
 
 Here is an example of using @code{quad} to integrate the function
 @tex
diff --git a/libinterp/corefcn/quad.cc b/libinterp/corefcn/quad.cc
--- a/libinterp/corefcn/quad.cc
+++ b/libinterp/corefcn/quad.cc
@@ -147,17 +147,17 @@ f (x)} where @var{y} and @var{x} are sca
 or both may be infinite.
 
 The optional argument @var{tol} is a vector that specifies the desired
 accuracy of the result.  The first element of the vector is the desired
 absolute tolerance, and the second element is the desired relative
 tolerance.  To choose a relative test only, set the absolute
 tolerance to zero.  To choose an absolute test only, set the relative
 tolerance to zero.  Both tolerances default to @code{sqrt (eps)} or
-approximately @math{1.5e^{-8}}.
+approximately 1.5e-8.
 
 The optional argument @var{sing} is a vector of values at which the
 integrand is known to be singular.
 
 The result of the integration is returned in @var{q}.
 
 @var{ier} contains an integer error code (0 indicates a successful
 integration).
diff --git a/libinterp/corefcn/quadcc.cc b/libinterp/corefcn/quadcc.cc
--- a/libinterp/corefcn/quadcc.cc
+++ b/libinterp/corefcn/quadcc.cc
@@ -1508,18 +1508,18 @@ which uses the element-by-element ``dot'
 both limits may be infinite.  @code{quadcc} handles an infinite limit by
 substituting the variable of integration with @code{x = tan (pi/2*u)}.
 
 The optional argument @var{tol} is a 1- or 2-element vector that specifies the
 desired accuracy of the result.  The first element of the vector is the desired
 absolute tolerance, and the second element is the desired relative tolerance.
 To choose a relative test only, set the absolute tolerance to zero.  To choose
 an absolute test only, set the relative tolerance to zero.  The default
-absolute tolerance is @math{1e^{-10}} (@math{1e^{-5}} for single), and the
-default relative tolerance is @math{1e^{-6}} (@math{1e^{-4}} for single).
+absolute tolerance is 1e-10 (1e-5 for single), and the default relative
+tolerance is 1e-6 (1e-4 for single).
 
 The optional argument @var{sing} contains a list of points where the integrand
 has known singularities, or discontinuities in any of its derivatives, inside
 the integration interval.  For the example above, which has a discontinuity at
 x=1, the call to @code{quadcc} would be as follows
 
 @example
 int = quadcc (f, a, b, [], [ 1 ]);
diff --git a/scripts/general/dblquad.m b/scripts/general/dblquad.m
--- a/scripts/general/dblquad.m
+++ b/scripts/general/dblquad.m
@@ -28,17 +28,17 @@
 ## @math{z = f(x,y)} where @var{x} is a vector and @var{y} is a scalar.  It
 ## should return a vector of the same length and orientation as @var{x}.
 ##
 ## @var{xa}, @var{ya} and @var{xb}, @var{yb} are the lower and upper limits of
 ## integration for x and y respectively.  The underlying integrator determines
 ## whether infinite bounds are accepted.
 ##
 ## The optional argument @var{tol} defines the absolute tolerance used to
-## integrate each sub-integral.  The default value is @math{1e^{-6}}.
+## integrate each sub-integral.  The default value is 1e-6.
 ##
 ## The optional argument @var{quadf} specifies which underlying integrator
 ## function to use.  Any choice but @code{quad} is available and the default
 ## is @code{quadcc}.
 ##
 ## Additional arguments, are passed directly to @var{f}.  To use the default
 ## value for @var{tol} or @var{quadf} one may pass @qcode{':'} or an empty
 ## matrix ([]).
diff --git a/scripts/general/quadl.m b/scripts/general/quadl.m
--- a/scripts/general/quadl.m
+++ b/scripts/general/quadl.m
@@ -29,17 +29,17 @@
 ## @var{f} is a function handle, inline function, or string containing the name
 ## of the function to evaluate.  The function @var{f} must be vectorized and
 ## return a vector of output values when given a vector of input values.
 ##
 ## @var{a} and @var{b} are the lower and upper limits of integration.  Both
 ## limits must be finite.
 ##
 ## The optional argument @var{tol} defines the absolute tolerance with which
-## to perform the integration.  The default value is @math{1e-6}.
+## to perform the integration.  The default value is 1e-6.
 ##
 ## The algorithm used by @code{quadl} involves recursively subdividing the
 ## integration interval.  If @var{trace} is defined then for each subinterval
 ## display: (1) the total number of function evaluations, (2) the left end of
 ## the subinterval, (3) the length of the subinterval, (4) the approximation of
 ## the integral over the subinterval.
 ##
 ## Additional arguments @var{p1}, etc., are passed directly to the function
