# HG changeset patch
# User jwe
# Date 758670208 0
#      Sat Jan 15 21:43:28 1994 +0000
# Node ID d8f9567f9e41213c0536b928654cd13379fec580
# Parent  5325afdb0ef5a4671acc203b2cadeec3c4f6f073
[project @ 1994-01-15 21:43:28 by jwe]

diff --git a/liboctave/Matrix.h b/liboctave/Matrix.h
--- a/liboctave/Matrix.h
+++ b/liboctave/Matrix.h
@@ -99,17 +99,20 @@ public:
   Matrix (int r, int c, double val) : Array2<double> (r, c, val) { }
   Matrix (const Array2<double>& a) : Array2<double> (a) { }
   Matrix (const Matrix& a) : Array2<double> (a) { }
   Matrix (const DiagArray<double>& a) : Array2<double> (a) { }
   Matrix (const DiagMatrix& a);
 //  Matrix (double a) : Array2<double> (1, 1, a) { }
 
   Matrix& operator = (const Matrix& a)
-    { return Array2<double>::operator = (a); }
+    {
+      Array2<double>::operator = (a);
+      return *this;
+    }
 
   int operator == (const Matrix& a) const;
   int operator != (const Matrix& a) const;
 
 // destructive insert/delete/reorder operations
 
   Matrix& insert (const Matrix& a, int r, int c);
   Matrix& insert (const RowVector& a, int r, int c);
@@ -293,27 +296,32 @@ private:
 };
 
 /*
  * Column Vector class
  */
 
 class ColumnVector : public Array<double>
 {
+friend class RowVector;
+
 public:
 
   ColumnVector (void) : Array<double> () { }
   ColumnVector (int n) : Array<double> (n) { }
   ColumnVector (int n, double val) : Array<double> (n, val) { }
   ColumnVector (const Array<double>& a) : Array<double> (a) { }
   ColumnVector (const ColumnVector& a) : Array<double> (a) { }
 //  ColumnVector (double a) : Array<double> (1, a) { }
 
   ColumnVector& operator = (const ColumnVector& a)
-    { return Array<double>::operator = (a); }
+    {
+      Array<double>::operator = (a);
+      return *this;
+    }
 
 //  operator Array<double>& () const { return *this; }
 
   int operator == (const ColumnVector& a) const;
   int operator != (const ColumnVector& a) const;
 
 // destructive insert/delete/reorder operations
 
@@ -404,27 +412,32 @@ private:
 };
 
 /*
  * Row Vector class
  */
 
 class RowVector : public Array<double>
 {
+friend class ColumnVector;
+
 public:
 
   RowVector (void) : Array<double> () { }
   RowVector (int n) : Array<double> (n) { }
   RowVector (int n, double val) : Array<double> (n, val) { }
   RowVector (const Array<double>& a) : Array<double> (a) { }
   RowVector (const RowVector& a) : Array<double> (a) { }
 //  RowVector (double a) : Array<double> (1, a) { }
 
   RowVector& operator = (const RowVector& a)
-    { return Array<double>::operator = (a); }
+    {
+      Array<double>::operator = (a);
+      return *this;
+    }
 
 //  operator Array<double>& () const { return *this; }
 
   int operator == (const RowVector& a) const;
   int operator != (const RowVector& a) const;
 
 // destructive insert/delete/reorder operations
 
@@ -528,17 +541,20 @@ public:
   DiagMatrix (int r, int c, double val) : DiagArray<double> (r, c, val) { }
   DiagMatrix (const RowVector& a) : DiagArray<double> (a) { }
   DiagMatrix (const ColumnVector& a) : DiagArray<double> (a) { }
   DiagMatrix (const DiagArray<double>& a) : DiagArray<double> (a) { }
   DiagMatrix (const DiagMatrix& a) : DiagArray<double> (a) { }
 //  DiagMatrix (double a) : DiagArray<double> (1, a) { }
 
   DiagMatrix& operator = (const DiagMatrix& a)
-    { return DiagArray<double>::operator = (a); }
+    {
+      DiagArray<double>::operator = (a);
+      return *this;
+    }
 
 //  operator DiagArray<double>& () const { return *this; }
 
   int operator == (const DiagMatrix& a) const;
   int operator != (const DiagMatrix& a) const;
 
   DiagMatrix& fill (double val);
   DiagMatrix& fill (double val, int beg, int end);
@@ -666,17 +682,20 @@ public:
   ComplexMatrix (const ComplexMatrix& a) : Array2<Complex> (a) { }
   ComplexMatrix (const DiagMatrix& a);
   ComplexMatrix (const DiagArray<Complex>& a) : Array2<Complex> (a) { }
   ComplexMatrix (const ComplexDiagMatrix& a);
 //  ComplexMatrix (double a) : Array2<Complex> (1, 1, a) { }
 //  ComplexMatrix (const Complex& a) : Array2<Complex> (1, 1, a) { }
 
   ComplexMatrix& operator = (const ComplexMatrix& a)
-    { return Array2<Complex>::operator = (a); }
+    {
+      Array2<Complex>::operator = (a);
+      return *this;
+    }
 
 //  operator Array2<Complex>& () const { return *this; }
 
   int operator == (const ComplexMatrix& a) const;
   int operator != (const ComplexMatrix& a) const;
 
 // destructive insert/delete/reorder operations
 
@@ -887,30 +906,35 @@ private:
 };
 
 /*
  * Complex Column Vector class
  */
 
 class ComplexColumnVector : public Array<Complex>
 {
+friend class ComplexRowVector;
+
 public:
 
   ComplexColumnVector (void) : Array<Complex> () { }
   ComplexColumnVector (int n) : Array<Complex> (n) { }
   ComplexColumnVector (int n, const Complex& val)
     : Array<Complex> (n, val) { }
   ComplexColumnVector (const ColumnVector& a);
   ComplexColumnVector (const Array<Complex>& a) : Array<Complex> (a) { }
   ComplexColumnVector (const ComplexColumnVector& a) : Array<Complex> (a) { }
 //  ComplexColumnVector (double a) : Array<Complex> (1, a) { }
 //  ComplexColumnVector (const Complex& a) : Array<Complex> (1, a) { }
 
   ComplexColumnVector& operator = (const ComplexColumnVector& a)
-    { return Array<Complex>::operator = (a); }
+    {
+      Array<Complex>::operator = (a);
+      return *this;
+    }
 
 //  operator Array<Complex>& () const { return *this; }
 
   int operator == (const ComplexColumnVector& a) const;
   int operator != (const ComplexColumnVector& a) const;
 
 // destructive insert/delete/reorder operations
 
@@ -1010,29 +1034,34 @@ private:
 };
 
 /*
  * Complex Row Vector class
  */
 
 class ComplexRowVector : public Array<Complex>
 {
+friend class ComplexColumnVector;
+
 public:
 
   ComplexRowVector (void) : Array<Complex> () { }
   ComplexRowVector (int n) : Array<Complex> (n) { }
   ComplexRowVector (int n, const Complex& val) : Array<Complex> (n, val) { }
   ComplexRowVector (const RowVector& a);
   ComplexRowVector (const Array<Complex>& a) : Array<Complex> (a) { }
   ComplexRowVector (const ComplexRowVector& a) : Array<Complex> (a) { }
 //  ComplexRowVector (double a) : Array<Complex> (1, a) { }
 //  ComplexRowVector (const Complex& a) : Array<Complex> (1, a) { }
 
   ComplexRowVector& operator = (const ComplexRowVector& a)
-    { return Array<Complex>::operator = (a); }
+    {
+      Array<Complex>::operator = (a);
+      return *this;
+    }
 
 //  operator Array<Complex>& () const { return *this; }
 
   int operator == (const ComplexRowVector& a) const;
   int operator != (const ComplexRowVector& a) const;
 
 // destructive insert/delete/reorder operations
 
@@ -1152,17 +1181,20 @@ public:
     : DiagArray<Complex> (a) { }
   ComplexDiagMatrix (const DiagMatrix& a);
   ComplexDiagMatrix (const DiagArray<Complex>& a)
     : DiagArray<Complex> (a) { }
   ComplexDiagMatrix (const ComplexDiagMatrix& a) : DiagArray<Complex> (a) { }
 //  ComplexDiagMatrix (const Complex& a) : DiagArray<Complex> (1, a) { }
 
   ComplexDiagMatrix& operator = (const ComplexDiagMatrix& a)
-    { return DiagArray<Complex>::operator = (a); }
+    {
+      DiagArray<Complex>::operator = (a);
+      return *this;
+    }
 
 //  operator DiagArray<Complex>& () const { return *this; }
 
   int operator == (const ComplexDiagMatrix& a) const;
   int operator != (const ComplexDiagMatrix& a) const;
 
   ComplexDiagMatrix& fill (double val);
   ComplexDiagMatrix& fill (const Complex& val);
@@ -1336,21 +1368,26 @@ inline AEPBALANCE::AEPBALANCE (const AEP
 inline AEPBALANCE&
 AEPBALANCE::operator = (const AEPBALANCE& a)
 {
   balanced_mat = a.balanced_mat;
   balancing_mat = a.balancing_mat;
 
   return *this;
 }
+
 inline Matrix AEPBALANCE::balanced_matrix (void) const
-  { return balanced_mat; }
+{
+  return balanced_mat;
+}
 
 inline Matrix AEPBALANCE::balancing_matrix (void) const
-  { return balancing_mat; }
+{
+  return balancing_mat;
+}
 
 /*
  * Result of a Complex balancing operation
  */
 
 class ComplexAEPBALANCE
 {
 friend class ComplexMatrix;
@@ -1372,17 +1409,17 @@ private:
 
   ComplexMatrix balanced_mat;
   ComplexMatrix balancing_mat;
 };
 
 inline ComplexAEPBALANCE::ComplexAEPBALANCE (const ComplexMatrix& a,
 					     const char * balance_job)
 {
-  init(a, balance_job); 
+  init (a, balance_job); 
 }
 
 inline ComplexAEPBALANCE::ComplexAEPBALANCE (const ComplexAEPBALANCE& a)
 {
   balanced_mat = a.balanced_mat;
   balancing_mat = a.balancing_mat;
 }
 
@@ -1391,20 +1428,24 @@ ComplexAEPBALANCE::operator = (const Com
 {
   balanced_mat = a.balanced_mat;
   balancing_mat = a.balancing_mat;
 
   return *this;
 }
 
 inline ComplexMatrix ComplexAEPBALANCE::balanced_matrix (void) const
-  { return balanced_mat; }
+{
+  return balanced_mat;
+}
 
 inline ComplexMatrix ComplexAEPBALANCE::balancing_matrix (void) const
-  { return balancing_mat; }
+{
+  return balancing_mat;
+}
 
 /*
  * Result of a Determinant calculation.
  */
 
 class DET
 {
 public:
@@ -1425,22 +1466,34 @@ public:
 
 private:
 
   DET (const double *d);
 
   double det [2];
 };
 
-inline DET::DET (const DET& a) { det[0] = a.det[0]; det[1] = a.det[1]; }
+inline DET::DET (const DET& a)
+{
+  det[0] = a.det[0];
+  det[1] = a.det[1];
+}
 
 inline DET& DET::operator = (const DET& a)
-  { det[0] = a.det[0]; det[1] = a.det[1]; return *this; }
-
-inline DET::DET (const double *d) { det[0] = d[0]; det[1] = d[1]; }
+{
+  det[0] = a.det[0];
+  det[1] = a.det[1];
+  return *this;
+}
+
+inline DET::DET (const double *d)
+{
+  det[0] = d[0];
+  det[1] = d[1];
+}
 
 /*
  * Result of a Determinant calculation.
  */
 
 class ComplexDET
 {
 public:
@@ -1462,23 +1515,33 @@ public:
 private:
 
   ComplexDET (const Complex *d);
 
   Complex det [2];
 };
 
 inline ComplexDET::ComplexDET (const ComplexDET& a)
-  { det[0] = a.det[0]; det[1] = a.det[1]; }
+{
+  det[0] = a.det[0];
+  det[1] = a.det[1];
+}
 
 inline ComplexDET& ComplexDET::operator = (const ComplexDET& a)
-  { det[0] = a.det[0]; det[1] = a.det[1]; return *this; }
+{
+  det[0] = a.det[0];
+  det[1] = a.det[1];
+  return *this;
+}
 
 inline ComplexDET::ComplexDET (const Complex *d)
-  { det[0] = d[0]; det[1] = d[1]; }
+{
+  det[0] = d[0];
+  det[1] = d[1];
+}
 
 /*
  * Result of a GEP Balance operation
  * Note: currenlty only do balancing on real data.  Complex balancing
  * done on magnitudes of complex data.
  */
 
 class GEPBALANCE
@@ -1506,17 +1569,17 @@ private:
 
   Matrix balanced_a_mat;
   Matrix balanced_b_mat;
   Matrix left_balancing_mat;
   Matrix right_balancing_mat;
 };
 
 inline GEPBALANCE::GEPBALANCE (const Matrix& a, const Matrix& b, 
-  const char * balance_job) 
+			       const char * balance_job) 
 {
   init (a, b, balance_job); 
 }
 
 inline GEPBALANCE::GEPBALANCE (const GEPBALANCE& a)
 {
   balanced_a_mat = a.balanced_a_mat;
   balanced_b_mat = a.balanced_b_mat;
@@ -1531,26 +1594,34 @@ GEPBALANCE::operator = (const GEPBALANCE
   balanced_b_mat = a.balanced_b_mat;
   left_balancing_mat = a.left_balancing_mat;
   right_balancing_mat = a.right_balancing_mat;
 
   return *this;
 }
 
 inline Matrix GEPBALANCE::balanced_a_matrix (void) const 
-  { return balanced_a_mat; }
+{
+  return balanced_a_mat;
+}
 
 inline Matrix GEPBALANCE::balanced_b_matrix (void) const 
-  { return balanced_b_mat; }
+{
+  return balanced_b_mat;
+}
 
 inline Matrix GEPBALANCE::left_balancing_matrix (void) const 
-  { return left_balancing_mat; }
+{
+  return left_balancing_mat;
+}
 
 inline Matrix GEPBALANCE::right_balancing_matrix (void) const 
-  { return right_balancing_mat; }
+{
+  return right_balancing_mat;
+}
 
 /*
  * Result of a Cholesky Factorization
  */
 
 class CHOL
 {
 friend class Matrix;
@@ -1570,19 +1641,30 @@ public:
 
 private:
 
   int init (const Matrix& a);
 
   Matrix chol_mat;
 };
 
-inline CHOL::CHOL (const Matrix& a) {init (a); }
-inline CHOL::CHOL (const Matrix& a, int& info) { info = init (a); }
-inline CHOL::CHOL (const CHOL& a) { chol_mat = a.chol_mat; }
+inline CHOL::CHOL (const Matrix& a)
+{
+  init (a);
+}
+
+inline CHOL::CHOL (const Matrix& a, int& info)
+{
+  info = init (a);
+}
+
+inline CHOL::CHOL (const CHOL& a)
+{
+  chol_mat = a.chol_mat;
+}
 
 inline CHOL&
 CHOL::operator = (const CHOL& a)
 {
   chol_mat = a.chol_mat;
 
   return *this;
 }
@@ -1610,33 +1692,43 @@ public:
 
 private:
 
   int init (const ComplexMatrix& a);
 
   ComplexMatrix chol_mat;
 };
 
-inline ComplexCHOL::ComplexCHOL (const ComplexMatrix& a) { init (a); }
+inline ComplexCHOL::ComplexCHOL (const ComplexMatrix& a)
+{
+  init (a);
+}
+
 inline ComplexCHOL::ComplexCHOL (const ComplexMatrix& a, int& info)
-  { info = init (a); }
+{
+  info = init (a);
+}
 
 inline ComplexCHOL::ComplexCHOL (const ComplexCHOL& a)
-  { chol_mat = a.chol_mat; }
+{
+  chol_mat = a.chol_mat;
+}
 
 inline ComplexCHOL&
 ComplexCHOL::operator = (const ComplexCHOL& a)
 {
   chol_mat = a.chol_mat;
 
   return *this;
 }
 
 inline ComplexMatrix ComplexCHOL::chol_matrix (void) const
-  { return chol_mat; }
+{
+  return chol_mat;
+}
 
   
 /*
  * Result of a Hessenberg Decomposition
  */
 
 class HESS
 {
@@ -1659,36 +1751,50 @@ public:
 private:
 
   int init (const Matrix& a);
 
   Matrix hess_mat;
   Matrix unitary_hess_mat;
 };
 
-inline HESS::HESS (const Matrix& a) {init (a); }
-inline HESS::HESS (const Matrix& a, int& info) { info = init(a); }
+inline HESS::HESS (const Matrix& a)
+{
+  init (a);
+}
+
+inline HESS::HESS (const Matrix& a, int& info)
+{
+  info = init (a);
+}
 
 inline HESS::HESS (const HESS& a)
 {
   hess_mat = a.hess_mat;
   unitary_hess_mat = a.unitary_hess_mat;
 }
 
 inline HESS&
 HESS::operator = (const HESS& a)
 {
   hess_mat = a.hess_mat;
   unitary_hess_mat = a.unitary_hess_mat;
 
   return *this;
 }
 
-inline Matrix HESS::hess_matrix (void) const { return hess_mat; }
-inline Matrix HESS::unitary_hess_matrix (void) const {return unitary_hess_mat;}
+inline Matrix HESS::hess_matrix (void) const
+{
+  return hess_mat;
+}
+
+inline Matrix HESS::unitary_hess_matrix (void) const
+{
+  return unitary_hess_mat;
+}
 
 /*
  * Result of a Hessenberg Decomposition
  */
 
 class ComplexHESS
 {
 friend class ComplexMatrix;
@@ -1708,19 +1814,25 @@ public:
 private:
 
   int init (const ComplexMatrix& a);
 
   ComplexMatrix hess_mat;
   ComplexMatrix unitary_hess_mat;
 };
 
-inline ComplexHESS::ComplexHESS (const ComplexMatrix& a) { init(a); }
+inline ComplexHESS::ComplexHESS (const ComplexMatrix& a)
+{
+  init (a);
+}
+
 inline ComplexHESS::ComplexHESS (const ComplexMatrix& a, int& info)
-  { info = init(a); }
+{
+  info = init (a);
+}
 
 inline ComplexHESS::ComplexHESS (const ComplexHESS& a)
 {
   hess_mat = a.hess_mat;
   unitary_hess_mat = a.unitary_hess_mat;
 }
 
 inline ComplexHESS&
@@ -1728,20 +1840,24 @@ ComplexHESS::operator = (const ComplexHE
 {
   hess_mat = a.hess_mat;
   unitary_hess_mat = a.unitary_hess_mat;
 
   return *this;
 }
 
 inline ComplexMatrix ComplexHESS::hess_matrix (void) const
-  { return hess_mat; }
+{
+  return hess_mat;
+}
 
 inline ComplexMatrix ComplexHESS::unitary_hess_matrix (void) const
-  { return unitary_hess_mat; }
+{
+  return unitary_hess_mat;
+}
 
 /*
  * Result of a Schur Decomposition
  */
 
 class SCHUR
 {
 friend class Matrix;
@@ -1765,37 +1881,50 @@ public:
 private:
 
   int init (const Matrix& a, const char *ord);
 
   Matrix schur_mat;
   Matrix unitary_mat;
 };
 
-inline SCHUR::SCHUR (const Matrix& a, const char *ord) { init (a, ord); }
+inline SCHUR::SCHUR (const Matrix& a, const char *ord)
+{
+  init (a, ord);
+}
+
 inline SCHUR::SCHUR (const Matrix& a, const char *ord, int& info) 
-  { info = init (a, ord); }
+{
+  info = init (a, ord);
+}
 
 inline SCHUR::SCHUR (const SCHUR& a, const char *ord)
 {
   schur_mat = a.schur_mat;
   unitary_mat = a.unitary_mat;
 }
 
 inline SCHUR&
 SCHUR::operator = (const SCHUR& a)
 {
   schur_mat = a.schur_mat;
   unitary_mat = a.unitary_mat;
   
   return *this;
 }
 
-inline Matrix SCHUR::schur_matrix (void) const { return schur_mat; }
-inline Matrix SCHUR::unitary_matrix (void) const { return unitary_mat; }
+inline Matrix SCHUR::schur_matrix (void) const
+{
+  return schur_mat;
+}
+
+inline Matrix SCHUR::unitary_matrix (void) const
+{
+  return unitary_mat;
+}
 
 /*
  * Result of a Schur Decomposition
  */
 
 class ComplexSCHUR
 {
 friend class ComplexMatrix;
@@ -1820,21 +1949,25 @@ private:
 
   int init (const ComplexMatrix& a, const char *ord);
 
   ComplexMatrix schur_mat;
   ComplexMatrix unitary_mat;
 };
 
 inline ComplexSCHUR::ComplexSCHUR (const ComplexMatrix& a, const char *ord) 
-  { init (a,ord); }
+{
+  init (a,ord);
+}
 
 inline ComplexSCHUR::ComplexSCHUR (const ComplexMatrix& a, const char *ord,
 				   int& info)
-  { info = init (a,ord); }
+{
+  info = init (a,ord);
+}
 
 inline ComplexSCHUR::ComplexSCHUR (const ComplexSCHUR& a, const char *ord)
 {
   schur_mat = a.schur_mat;
   unitary_mat = a.unitary_mat;
 }
 
 inline ComplexSCHUR&
@@ -1842,20 +1975,24 @@ ComplexSCHUR::operator = (const ComplexS
 {
   schur_mat = a.schur_mat;
   unitary_mat = a.unitary_mat;
 
   return *this;
 }
 
 inline ComplexMatrix ComplexSCHUR::schur_matrix (void) const
-  { return schur_mat; }
+{
+  return schur_mat;
+}
 
 inline ComplexMatrix ComplexSCHUR::unitary_matrix (void) const
-  { return unitary_mat; }
+{
+  return unitary_mat;
+}
 
 
 /*
  * Result of a Singular Value Decomposition.
  */
 
 class SVD
 {
@@ -1882,18 +2019,25 @@ private:
 
   int init (const Matrix& a);
 
   DiagMatrix sigma;
   Matrix left_sm;
   Matrix right_sm;
 };
 
-inline SVD::SVD (const Matrix& a) { init (a); }
-inline SVD::SVD (const Matrix& a, int& info) { info = init (a); }
+inline SVD::SVD (const Matrix& a)
+{
+  init (a);
+}
+
+inline SVD::SVD (const Matrix& a, int& info)
+{
+  info = init (a);
+}
 
 inline SVD::SVD (const SVD& a)
 {
   sigma = a.sigma;
   left_sm = a.left_sm;
   right_sm = a.right_sm;
 }
 
@@ -1902,19 +2046,30 @@ SVD::operator = (const SVD& a)
 {
   sigma = a.sigma;
   left_sm = a.left_sm;
   right_sm = a.right_sm;
 
   return *this;
 }
 
-inline DiagMatrix SVD::singular_values (void) const { return sigma; }
-inline Matrix SVD::left_singular_matrix (void) const { return left_sm; }
-inline Matrix SVD::right_singular_matrix (void) const { return right_sm; }
+inline DiagMatrix SVD::singular_values (void) const
+{
+  return sigma;
+}
+
+inline Matrix SVD::left_singular_matrix (void) const
+{
+  return left_sm;
+}
+
+inline Matrix SVD::right_singular_matrix (void) const
+{
+  return right_sm;
+}
 
 /*
  * Result of a Singular Value Decomposition.
  */
 
 class ComplexSVD
 {
 friend class ComplexMatrix;
@@ -1940,19 +2095,25 @@ private:
 
   int init (const ComplexMatrix& a);
 
   DiagMatrix sigma;
   ComplexMatrix left_sm;
   ComplexMatrix right_sm;
 };
 
-inline ComplexSVD::ComplexSVD (const ComplexMatrix& a) { init (a); }
+inline ComplexSVD::ComplexSVD (const ComplexMatrix& a)
+{
+  init (a);
+}
+
 inline ComplexSVD::ComplexSVD (const ComplexMatrix& a, int& info)
-  { info = init (a); } 
+{
+  info = init (a);
+} 
 
 inline ComplexSVD::ComplexSVD (const ComplexSVD& a)
 {
   sigma = a.sigma;
   left_sm = a.left_sm;
   right_sm = a.right_sm;
 }
 
@@ -1962,23 +2123,29 @@ ComplexSVD::operator = (const ComplexSVD
   sigma = a.sigma;
   left_sm = a.left_sm;
   right_sm = a.right_sm;
 
   return *this;
 }
 
 inline DiagMatrix ComplexSVD::singular_values (void) const
-  { return sigma; }
+{
+  return sigma;
+}
 
 inline ComplexMatrix ComplexSVD::left_singular_matrix (void) const
-  { return left_sm; }
+{
+  return left_sm;
+}
 
 inline ComplexMatrix ComplexSVD::right_singular_matrix (void) const
-  { return right_sm; }
+{
+  return right_sm;
+}
 
 /*
  * Result of an Eigenvalue computation.
  */
 
 class EIG
 {
 friend class Matrix;
@@ -2007,30 +2174,58 @@ private:
 
   int init (const Matrix& a);
   int init (const ComplexMatrix& a);
 
   ComplexColumnVector lambda;
   ComplexMatrix v;
 };
 
-inline EIG::EIG (const Matrix& a) { init (a); }
-inline EIG::EIG (const Matrix& a, int& info) { info = init (a); }
-
-inline EIG::EIG (const ComplexMatrix& a) { init (a); }
-inline EIG::EIG (const ComplexMatrix& a, int& info) { info = init (a); }
-
-inline EIG::EIG (const EIG& a) { lambda = a.lambda; v = a.v; }
+inline EIG::EIG (const Matrix& a)
+{
+  init (a);
+}
+
+inline EIG::EIG (const Matrix& a, int& info)
+{
+  info = init (a);
+}
+
+inline EIG::EIG (const ComplexMatrix& a)
+{
+  init (a);
+}
+
+inline EIG::EIG (const ComplexMatrix& a, int& info)
+{
+  info = init (a);
+}
+
+inline EIG::EIG (const EIG& a)
+{
+  lambda = a.lambda;
+  v = a.v;
+}
 
 inline EIG& EIG::operator = (const EIG& a)
-  { lambda = a.lambda; v = a.v; return *this; }
-
-inline ComplexColumnVector EIG::eigenvalues (void) const { return lambda; } 
-
-inline ComplexMatrix EIG::eigenvectors (void) const { return v; }
+{
+  lambda = a.lambda;
+  v = a.v;
+  return *this;
+}
+
+inline ComplexColumnVector EIG::eigenvalues (void) const
+{
+  return lambda;
+}
+
+inline ComplexMatrix EIG::eigenvectors (void) const
+{
+  return v;
+}
 
 /*
  * Result of an LU decomposition.
  */
 
 class LU
 {
 friend class Matrix;
@@ -2053,24 +2248,45 @@ public:
 
 private:
 
   Matrix l;
   Matrix u;
   Matrix p;
 };
 
-inline LU::LU (const LU& a) { l = a.l; u = a.u; p = a.p; }
+inline LU::LU (const LU& a)
+{
+  l = a.l;
+  u = a.u;
+  p = a.p;
+}
 
 inline LU& LU::operator = (const LU& a)
-  { l = a.l; u = a.u; p = a.p; return *this; }
-
-inline Matrix LU::L (void) const { return l; }
-inline Matrix LU::U (void) const { return u; }
-inline Matrix LU::P (void) const { return p; }
+{
+  l = a.l;
+  u = a.u;
+  p = a.p;
+  return *this;
+}
+
+inline Matrix LU::L (void) const
+{
+  return l;
+}
+
+inline Matrix LU::U (void) const
+{
+  return u;
+}
+
+inline Matrix LU::P (void) const
+{
+  return p;
+}
 
 class ComplexLU
 {
 friend class ComplexMatrix;
 
 public:
 
   ComplexLU (void) {}
@@ -2089,24 +2305,45 @@ public:
 
 private:
 
   ComplexMatrix l;
   ComplexMatrix u;
   Matrix p;
 };
 
-inline ComplexLU::ComplexLU (const ComplexLU& a) { l = a.l; u = a.u; p = a.p; }
+inline ComplexLU::ComplexLU (const ComplexLU& a)
+{
+  l = a.l;
+  u = a.u;
+  p = a.p;
+}
 
 inline ComplexLU& ComplexLU::operator = (const ComplexLU& a)
-  { l = a.l; u = a.u; p = a.p; return *this; }
-
-inline ComplexMatrix ComplexLU::L (void) const { return l; }
-inline ComplexMatrix ComplexLU::U (void) const { return u; }
-inline Matrix ComplexLU::P (void) const { return p; }
+{
+  l = a.l;
+  u = a.u;
+  p = a.p;
+  return *this;
+}
+
+inline ComplexMatrix ComplexLU::L (void) const
+{
+  return l;
+}
+
+inline ComplexMatrix ComplexLU::U (void) const
+{
+  return u;
+}
+
+inline Matrix ComplexLU::P (void) const
+{
+  return p;
+}
 
 /*
  * Result of a QR decomposition.
  */
 
 class QR
 {
 public:
@@ -2125,22 +2362,38 @@ public:
   friend ostream&  operator << (ostream& os, const QR& a);
 
 private:
 
   Matrix q;
   Matrix r;
 };
 
-inline QR::QR (const QR& a) { q = a.q; r = a.r; }
-
-inline QR& QR::operator = (const QR& a) { q = a.q; r = a.r; return *this; }
-
-inline Matrix QR::Q (void) const { return q; }
-inline Matrix QR::R (void) const { return r; }
+inline QR::QR (const QR& a)
+{
+  q = a.q;
+  r = a.r;
+}
+
+inline QR& QR::operator = (const QR& a)
+{
+  q = a.q;
+  r = a.r;
+  return *this;
+}
+
+inline Matrix QR::Q (void) const
+{
+  return q;
+}
+
+inline Matrix QR::R (void) const
+{
+  return r;
+}
 
 class ComplexQR
 {
 public:
 
   ComplexQR (void) {}
 
   ComplexQR (const ComplexMatrix& A);
@@ -2155,23 +2408,38 @@ public:
   friend ostream&  operator << (ostream& os, const ComplexQR& a);
 
 private:
 
   ComplexMatrix q;
   ComplexMatrix r;
 };
 
-inline ComplexQR::ComplexQR (const ComplexQR& a) { q = a.q; r = a.r; }
+inline ComplexQR::ComplexQR (const ComplexQR& a)
+{
+  q = a.q;
+  r = a.r;
+}
 
 inline ComplexQR& ComplexQR::operator = (const ComplexQR& a)
-  { q = a.q; r = a.r; return *this; }
-
-inline ComplexMatrix ComplexQR::Q (void) const { return q; }
-inline ComplexMatrix ComplexQR::R (void) const { return r; }
+{
+  q = a.q;
+  r = a.r;
+  return *this;
+}
+
+inline ComplexMatrix ComplexQR::Q (void) const
+{
+  return q;
+}
+
+inline ComplexMatrix ComplexQR::R (void) const
+{
+  return r;
+}
 
 #endif
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; page-delimiter: "^/\\*" ***
 ;;; End: ***
