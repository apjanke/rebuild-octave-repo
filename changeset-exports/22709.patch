# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1478032714 14400
#      Tue Nov 01 16:38:34 2016 -0400
# Node ID 5c04055aa767ba1ef8b8e255ead454dd30f8791f
# Parent  843b45bd99120e5faa93f4330ef83db878400d7f
maint: Strip trailing whitespace from source files.

diff --git a/libinterp/corefcn/gsvd.cc b/libinterp/corefcn/gsvd.cc
--- a/libinterp/corefcn/gsvd.cc
+++ b/libinterp/corefcn/gsvd.cc
@@ -469,19 +469,19 @@ and zggsvd routines.
 %! [U,V,X,C,S,R] = gsvd (single ([]), B);
 %! assert (class (U), "single");
 %! assert (class (V), "single");
 %! assert (class (X), "single");
 %! assert (class (C), "single");
 %! assert (class (S), "single");
 %! assert (class (R), "single");
 %!
-%! s = gsvd (single (A), B); 
+%! s = gsvd (single (A), B);
 %! assert (class (s), "single");
-%! [U,V,X,C,S,R] = gsvd (single (A), B); 
+%! [U,V,X,C,S,R] = gsvd (single (A), B);
 %! assert (class (U), "single");
 %! assert (class (V), "single");
 %! assert (class (X), "single");
 %! assert (class (C), "single");
 %! assert (class (S), "single");
 %! assert (class (R), "single");
 
 */
diff --git a/libinterp/corefcn/svd.cc b/libinterp/corefcn/svd.cc
--- a/libinterp/corefcn/svd.cc
+++ b/libinterp/corefcn/svd.cc
@@ -146,17 +146,17 @@ v =
 @end example
 
 When given a second argument that is not 0, @code{svd} returns an economy-sized
 decomposition, eliminating the unnecessary rows or columns of @var{U} or
 @var{V}.
 
 If the second argument is exactly 0, then the choice of decomposition is based
 on the matrix @var{A}.  If @var{A} has more rows than columns then an
-economy-sized decomposition is returned, otherwise a regular decomposition 
+economy-sized decomposition is returned, otherwise a regular decomposition
 is calculated.
 @seealso{svd_driver, svds, eig, lu, chol, hess, qr, qz}
 @end deftypefn */)
 {
   int nargin = args.length ();
 
   if (nargin < 1 || nargin > 2 || nargout == 2 || nargout > 3)
     print_usage ();
diff --git a/scripts/plot/appearance/whitebg.m b/scripts/plot/appearance/whitebg.m
--- a/scripts/plot/appearance/whitebg.m
+++ b/scripts/plot/appearance/whitebg.m
@@ -170,17 +170,17 @@ function whitebg (varargin)
           factoryvalue = fac.(factoryfield);
           if (strncmp (factoryfield, "factoryfigure", 13))
             ## Strip off "factoryfigure" part of fieldname before applying
             set (fig, factoryfield(14:end), factoryvalue);
           endif
           ## Remove applied default from root
           defaultfield = strrep (factoryfield, "factory", "default");
           set (0, defaultfield, "remove");
-        endfor 
+        endfor
       endif
 
       hlist = sort (findobj (fig));
       for h = hlist'
         props = get (h);
         fields = fieldnames (props);
         ## Find all fields with the word color in them and restore to factory.
         idx = find (! cellfun ("isempty", regexp (fields, 'color$')));
@@ -199,32 +199,32 @@ endfunction
 ## Input color bg must be in HSV space.  Input color corig is in RGB space.
 ##
 ## FIXME: Calculation is segregated into its own function in case anyone wants
 ## to try and improve the selection of a "contrasting" color.
 ##
 ## This algorithm maintains at least 90 degrees separation between corig and bg
 ## in Hue rotation space.  No modifications are done for saturation or value.
 function cnew = calc_contrast_color (bg, corig)
-  
+
   hsv = rgb2hsv (corig);
   contrast_hue = mod (bg(1) + 0.5, 1);  # Generate a contrasting bg color
 
   ## If close to existing contrast color, leave alone
   delta = abs (hsv(1) - contrast_hue);
   if (delta < 0.25 || delta > 0.75)
     cnew(1) = hsv(1);
   else
     cnew(1) = mod (hsv(1) + 0.5, 1);
   endif
 
   ## No modifications to saturation or value.
   cnew(2:3) = hsv(2:3);
 
-  cnew = hsv2rgb (cnew);   
+  cnew = hsv2rgb (cnew);
 
 endfunction
 
 
 %!test
 %! dac = get (0, "defaultaxescolor");
 %! dfc = get (0, "defaultfigurecolor");
 %! hf = figure ("visible", "off");
