# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1237987790 -3600
#      Wed Mar 25 14:29:50 2009 +0100
# Node ID 3b1908b586621e81a9b704500881eca2267884a6
# Parent  9f5e095555fc93563702e4ef05baea4436ece035
fixes in mixed int64-double multiply emulation

diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,13 @@
+2009-03-25  Jaroslav Hajek  <highegg@gmail.com>
+	
+	* oct-inttypes.cc (INT_DOUBLE_BINOP_DECL (*, uint64),
+	INT_DOUBLE_BINOP_DECL (*, int64)): x -> y where appropriate.
+
 2009-03-25  Jaroslav Hajek  <highegg@gmail.com>
 
 	* Array.cc (rec_permute_helper::use_blk): New field.
 	(rec_permute_helper::blk_trans): New method.
 	(rec_permute_helper::rec_permute_helper): Use smart reductions,
 	detect possibility of using blocked transpose.
 	(rec_permute_helper::do_permute): Use blocked transpose if possible.
 
diff --git a/liboctave/oct-inttypes.cc b/liboctave/oct-inttypes.cc
--- a/liboctave/oct-inttypes.cc
+++ b/liboctave/oct-inttypes.cc
@@ -402,17 +402,17 @@ INT_DOUBLE_BINOP_DECL (*, uint64)
   if (y >= 0 && y < octave_uint64::max () && y == xround (y))
     {
       return x * octave_uint64 (static_cast<uint64_t> (y));
     }
   else if (y == 0.5)
     {
       return x / octave_uint64 (static_cast<uint64_t> (2));
     }
-  else if (y < 0 || xisnan (x) || xisinf (x))
+  else if (y < 0 || xisnan (y) || xisinf (y))
     {
       return octave_uint64 (x.value () * y); 
     }
   else
     {
       bool sign;
       uint64_t my;
       int e;
@@ -437,17 +437,17 @@ INT_DOUBLE_BINOP_DECL (*, int64)
   if (fabs (y) < octave_int64::max () && y == xround (y))
     {
       return x * octave_int64 (static_cast<int64_t> (y));
     }
   else if (fabs (y) == 0.5)
     {
       return x / octave_int64 (static_cast<uint64_t> (4*y));
     }
-  else if (xisnan (x) || xisinf (x))
+  else if (xisnan (y) || xisinf (y))
     {
       return octave_int64 (x.value () * y); 
     }
   else
     {
       bool sign;
       uint64_t my;
       int e;
