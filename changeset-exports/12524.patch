# HG changeset patch
# User Ben Abbott  <bpabbott@mac.com>
# Date 1300547272 14400
#      Sat Mar 19 11:07:52 2011 -0400
# Node ID 482cf3aad91501b6a181541bf78c335d78839bb3
# Parent  33f7d8f95f5bb28e79fce20c711f16c08d41204c
trisurf.m: Set default edgecolor as Matlab does. Add demos.

diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,8 +1,12 @@
+2011-03-19  Ben Abbott  <bpabbott@mac.com>
+
+	* geometry/trisurf.m: Set default edgecolor as Matlab does. Add demos.
+
 2010-03-18  Rik  <octave@nomad.inbox5.com>
 
 	* plot/uigetdir.m, plot/uigetfile.m, plot/uimenu.m, plot/uiputfile.m:
 	Improve docstrings.  Check for error conditions (missing FLTK, wrong
 	number of arguments) at top of code.
 
 2010-03-18  Rik  <octave@nomad.inbox5.com>
 
diff --git a/scripts/geometry/trisurf.m b/scripts/geometry/trisurf.m
--- a/scripts/geometry/trisurf.m
+++ b/scripts/geometry/trisurf.m
@@ -22,45 +22,49 @@
 ## Plot a triangular surface in 3D@.  The variable @var{tri} is the triangular
 ## meshing of the points @code{(@var{x}, @var{y})} which is returned
 ## from @code{delaunay}.  The variable @var{z} is value at the point
 ## @code{(@var{x}, @var{y})}.  The output argument @var{h} is the graphic
 ## handle of the plot.
 ## @seealso{triplot, trimesh, delaunay3}
 ## @end deftypefn
 
-function h = trisurf (tri, x, y, z, varargin)
+function varargout = trisurf (tri, x, y, z, varargin)
 
   if (nargin < 3)
     print_usage ();
   endif
 
   if (nargin == 3)
     triplot (tri, x, y);
   elseif (ischar (z))
     triplot (tri, x, y, z, varargin{:});
   else
     if (nargin > 4 && isnumeric (varargin{1}))
       c = varargin{1};
       varargin(1) = [];
     else
       c = z;
     endif
-
+    if (! any (strcmpi (varargin, "FaceColor")))
+      nfc = numel (varargin) + 1;
+      varargin(nfc+(0:1)) = {"FaceColor", "flat"};
+    else
+      nfc = find (any (strcmpi (varargin, "FaceColor")), 1);
+    endif
+    if (! any (strcmpi (varargin, "EdgeColor"))
+        && strcmpi (varargin{nfc+1}, "interp"))
+      varargin(end+(1:2)) = {"EdgeColor", "none"};
+    endif
     newplot ();
+    h = patch ("Faces", tri, "Vertices", [x(:), y(:), z(:)],
+               "FaceVertexCData", reshape (c, numel (c), 1),
+               varargin{:});
     if (nargout > 0)
-      h = patch ("Faces", tri, "Vertices", [x(:), y(:), z(:)],
-             "FaceVertexCData", reshape (c, numel (c), 1),
-             "FaceColor", "flat", "EdgeColor", "none",
-             varargin{:});
-    else
-      patch ("Faces", tri, "Vertices", [x(:), y(:), z(:)],
-             "FaceVertexCData", reshape (c, numel (c), 1),
-             "FaceColor", "flat", "EdgeColor", "none",
-             varargin{:});
+      varargout = {h};
     endif
 
     if (! ishold ())
       set (gca(), "view", [-37.5, 30],
            "xgrid", "on", "ygrid", "on", "zgrid", "on");
     endif
   endif
 endfunction
@@ -68,8 +72,31 @@ endfunction
 %!demo
 %! N = 10;
 %! rand ('state', 10)
 %! x = 3 - 6 * rand (N, N);
 %! y = 3 - 6 * rand (N, N);
 %! z = peaks (x, y);
 %! tri = delaunay (x(:), y(:));
 %! trisurf (tri, x(:), y(:), z(:));
+
+%!demo
+%! x = rand (100, 1);
+%! y = rand (100, 1);
+%! z = x.^2 + y.^2; 
+%! tri = delaunay (x, y); 
+%! trisurf (tri, x, y, z)
+
+%!demo
+%! x = rand (100, 1);
+%! y = rand (100, 1);
+%! z = x.^2 + y.^2; 
+%! tri = delaunay (x, y); 
+%! trisurf (tri, x, y, z, "facecolor", "interp")
+
+%!demo
+%! x = rand (100, 1);
+%! y = rand (100, 1);
+%! z = x.^2 + y.^2; 
+%! tri = delaunay (x, y); 
+%! trisurf (tri, x, y, z, "facecolor", "interp", "edgecolor", "k")
+
+
