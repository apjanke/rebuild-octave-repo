# HG changeset patch
# User Rik <rik@octave.org>
# Date 1546668460 28800
#      Fri Jan 04 22:07:40 2019 -0800
# Branch stable
# Node ID 5c91daa02f875abd04db40b141f1d323acaf3e87
# Parent  6dfb842362ddbf74c27475f0689f565fc23b7a23
Fix static analyzer detected issues with UNSORTED enum (bug #55347).

* ov-range.h (is_sorted_rows): Replace test on mode with (mode == UNSORTED).

* Array-d.cc (issorted): Replace test on mode with (mode == UNSORTED).
Replace test on !mode with (mode == UNSORTED).

* Array-f.cc (issorted): Replace test on mode with (mode == UNSORTED).
Replace test on !mode with (mode == UNSORTED).

* Range.cc (issorted): Replace test on mode with (mode == UNSORTED).

diff --git a/libinterp/octave-value/ov-range.h b/libinterp/octave-value/ov-range.h
--- a/libinterp/octave-value/ov-range.h
+++ b/libinterp/octave-value/ov-range.h
@@ -150,17 +150,17 @@ public:
 
   sortmode issorted (sortmode mode = UNSORTED) const
   { return range.issorted (mode); }
 
   Array<octave_idx_type> sort_rows_idx (sortmode) const
   { return Array<octave_idx_type> (dim_vector (1, 0)); }
 
   sortmode is_sorted_rows (sortmode mode = UNSORTED) const
-  { return mode ? mode : ASCENDING; }
+  { return (mode == UNSORTED) ? ASCENDING : mode; }
 
   builtin_type_t builtin_type (void) const { return btyp_double; }
 
   bool isreal (void) const { return true; }
 
   bool is_double_type (void) const { return true; }
 
   bool isfloat (void) const { return true; }
diff --git a/liboctave/array/Array-d.cc b/liboctave/array/Array-d.cc
--- a/liboctave/array/Array-d.cc
+++ b/liboctave/array/Array-d.cc
@@ -97,19 +97,19 @@ OCTAVE_API
 sortmode
 Array<double>::issorted (sortmode mode) const
 {
   octave_idx_type n = numel ();
 
   const double *el = data ();
 
   if (n <= 1)
-    return mode ? mode : ASCENDING;
+    return (mode == UNSORTED) ? ASCENDING : mode;
 
-  if (! mode)
+  if (mode == UNSORTED)
     {
       // Auto-detect mode.
       if (el[n-1] < el[0] || octave::math::isnan (el[0]))
         mode = DESCENDING;
       else
         mode = ASCENDING;
     }
 
diff --git a/liboctave/array/Array-f.cc b/liboctave/array/Array-f.cc
--- a/liboctave/array/Array-f.cc
+++ b/liboctave/array/Array-f.cc
@@ -97,19 +97,19 @@ OCTAVE_API
 sortmode
 Array<float>::issorted (sortmode mode) const
 {
   octave_idx_type n = numel ();
 
   const float *el = data ();
 
   if (n <= 1)
-    return mode ? mode : ASCENDING;
+    return (mode == UNSORTED) ? ASCENDING : mode;
 
-  if (! mode)
+  if (mode == UNSORTED)
     {
       // Auto-detect mode.
       if (el[n-1] < el[0] || octave::math::isnan (el[0]))
         mode = DESCENDING;
       else
         mode = ASCENDING;
     }
 
diff --git a/liboctave/array/Range.cc b/liboctave/array/Range.cc
--- a/liboctave/array/Range.cc
+++ b/liboctave/array/Range.cc
@@ -334,17 +334,17 @@ Range::sort (Array<octave_idx_type>& sid
 sortmode
 Range::issorted (sortmode mode) const
 {
   if (rng_numel > 1 && rng_inc > 0)
     mode = (mode == DESCENDING) ? UNSORTED : ASCENDING;
   else if (rng_numel > 1 && rng_inc < 0)
     mode = (mode == ASCENDING) ? UNSORTED : DESCENDING;
   else
-    mode = (mode ? mode : ASCENDING);
+    mode = (mode == UNSORTED) ? ASCENDING : mode;
 
   return mode;
 }
 
 void
 Range::set_base (double b)
 {
   if (rng_base != b)
