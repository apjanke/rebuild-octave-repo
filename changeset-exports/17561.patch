# HG changeset patch
# User Mike Miller <mtmiller@ieee.org>
# Date 1380853152 14400
#      Thu Oct 03 22:19:12 2013 -0400
# Node ID b41860a0bc2418db91a7465184b9073cfd5ec24f
# Parent  225ec9a0222a9fcbd4c5962dc944ea0553b97491
Fix integer overflow in imwrite with floating point and uint32 images

* __magick_read__.cc (encode_uint_image): Use uint64_t to avoid integer
overflow with default integer type.

diff --git a/libinterp/dldfcn/__magick_read__.cc b/libinterp/dldfcn/__magick_read__.cc
--- a/libinterp/dldfcn/__magick_read__.cc
+++ b/libinterp/dldfcn/__magick_read__.cc
@@ -1028,17 +1028,17 @@ encode_uint_image (std::vector<Magick::I
 
   // We will be passing the values as integers with depth as specified
   // by QuantumDepth (maximum value specified by MaxRGB). This is independent
   // of the actual depth of the image. GM will then convert the values but
   // while in memory, it always keeps the values as specified by QuantumDepth.
   // From GM documentation:
   //  Color arguments are must be scaled to fit the Quantum size according to
   //  the range of MaxRGB
-  const double divisor = static_cast<double>((1 << bitdepth) - 1) / MaxRGB;
+  const double divisor = static_cast<double>((uint64_t (1) << bitdepth) - 1) / MaxRGB;
 
   const P *img_fvec = img.fortran_vec ();
   const P *a_fvec   = alpha.fortran_vec ();
   switch (type)
     {
     case Magick::GrayscaleType:
       {
         octave_idx_type GM_idx = 0;
