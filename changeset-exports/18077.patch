# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1386124779 18000
#      Tue Dec 03 21:39:39 2013 -0500
# Branch stable
# Node ID ac74b0c4c564ebd786fb61ed6587cc331595c446
# Parent  24759ac2b8cb735e02583d2dc9c316711b7ade06
avoid overflow when passing problem dimensions to qhull with --enable-64

* __delaunayn__.cc, __voronoi__.cc, convhulln.cc
(octave_qhull_dims_ok): New function.  Use it to avoid overflowing
the range of integer values used in Qhull when Octave uses 64-bit
integer indexing.

diff --git a/libinterp/dldfcn/__delaunayn__.cc b/libinterp/dldfcn/__delaunayn__.cc
--- a/libinterp/dldfcn/__delaunayn__.cc
+++ b/libinterp/dldfcn/__delaunayn__.cc
@@ -59,16 +59,33 @@ char qh_version[] = "__delaunayn__.oct 2
 #endif
 
 static void
 close_fcn (FILE *f)
 {
   gnulib::fclose (f);
 }
 
+static bool
+octave_qhull_dims_ok (octave_idx_type dim, octave_idx_type n, const char *who)
+{
+  if (sizeof (octave_idx_type) > sizeof (int))
+    {
+      int maxval = std::numeric_limits<int>::max ();
+
+      if (dim > maxval || n > maxval)
+        {
+          error ("%s: dimension too large for Qhull", who);
+          return false;
+        }
+    }
+
+  return true;
+}
+
 DEFUN_DLD (__delaunayn__, args, ,
            "-*- texinfo -*-\n\
 @deftypefn  {Loadable Function} {@var{T} =} __delaunayn__ (@var{pts})\n\
 @deftypefnx {Loadable Function} {@var{T} =} __delaunayn__ (@var{pts}, @var{options})\n\
 Undocumented internal function.\n\
 @end deftypefn")
 
 {
@@ -84,16 +101,19 @@ Undocumented internal function.\n\
       print_usage ();
       return retval;
     }
 
   Matrix p (args(0).matrix_value ());
   const octave_idx_type dim = p.columns ();
   const octave_idx_type n = p.rows ();
 
+  if (! octave_qhull_dims_ok (dim, n, "__delaynayn__"))
+    return retval;
+
   // Default options
   std::string options;
   if (dim <= 3)
     options = "Qt Qbb Qc Qz";
   else
     options = "Qt Qbb Qc Qx";
 
   if (nargin == 2)
diff --git a/libinterp/dldfcn/__voronoi__.cc b/libinterp/dldfcn/__voronoi__.cc
--- a/libinterp/dldfcn/__voronoi__.cc
+++ b/libinterp/dldfcn/__voronoi__.cc
@@ -54,16 +54,33 @@ char qh_version[] = "__voronoi__.oct 200
 #endif
 
 static void
 close_fcn (FILE *f)
 {
   gnulib::fclose (f);
 }
 
+static bool
+octave_qhull_dims_ok (octave_idx_type dim, octave_idx_type n, const char *who)
+{
+  if (sizeof (octave_idx_type) > sizeof (int))
+    {
+      int maxval = std::numeric_limits<int>::max ();
+
+      if (dim > maxval || n > maxval)
+        {
+          error ("%s: dimension too large for Qhull", who);
+          return false;
+        }
+    }
+
+  return true;
+}
+
 DEFUN_DLD (__voronoi__, args, ,
            "-*- texinfo -*-\n\
 @deftypefn  {Loadable Function} {@var{C}, @var{F} =} __voronoi__ (@var{caller}, @var{pts})\n\
 @deftypefnx {Loadable Function} {@var{C}, @var{F} =} __voronoi__ (@var{caller}, @var{pts}, @var{options})\n\
 @deftypefnx {Loadable Function} {@var{C}, @var{F}, @var{Inf_Pts} =} __voronoi__ (@dots{})\n\
 Undocumented internal function.\n\
 @end deftypefn")
 {
@@ -81,16 +98,19 @@ Undocumented internal function.\n\
       print_usage ();
       return retval;
     }
 
   Matrix points = args(1).matrix_value ();
   const octave_idx_type dim = points.columns ();
   const octave_idx_type num_points = points.rows ();
 
+  if (! octave_qhull_dims_ok (dim, num_points, "__voronoi__"))
+    return retval;
+
   points = points.transpose ();
 
   std::string options;
 
   if (dim <= 3)
     options = " Qbb";
   else
     options = " Qbb Qx";
diff --git a/libinterp/dldfcn/convhulln.cc b/libinterp/dldfcn/convhulln.cc
--- a/libinterp/dldfcn/convhulln.cc
+++ b/libinterp/dldfcn/convhulln.cc
@@ -50,16 +50,33 @@ char qh_version[] = "convhulln.oct 2007-
 #endif
 
 static void
 close_fcn (FILE *f)
 {
   gnulib::fclose (f);
 }
 
+static bool
+octave_qhull_dims_ok (octave_idx_type dim, octave_idx_type n, const char *who)
+{
+  if (sizeof (octave_idx_type) > sizeof (int))
+    {
+      int maxval = std::numeric_limits<int>::max ();
+
+      if (dim > maxval || n > maxval)
+        {
+          error ("%s: dimension too large for Qhull", who);
+          return false;
+        }
+    }
+
+  return true;
+}
+
 DEFUN_DLD (convhulln, args, nargout,
            "-*- texinfo -*-\n\
 @deftypefn  {Loadable Function} {@var{h} =} convhulln (@var{pts})\n\
 @deftypefnx {Loadable Function} {@var{h} =} convhulln (@var{pts}, @var{options})\n\
 @deftypefnx {Loadable Function} {[@var{h}, @var{v}] =} convhulln (@dots{})\n\
 Compute the convex hull of the set of points @var{pts} which is a matrix\n\
 of size [n, dim] containing n points in a space of dimension dim.\n\
 The hull @var{h} is an index vector into the set of points and specifies\n\
@@ -97,16 +114,19 @@ convex hull is calculated.\n\n\
       print_usage ();
       return retval;
     }
 
   Matrix points (args(0).matrix_value ());
   const octave_idx_type dim = points.columns ();
   const octave_idx_type num_points = points.rows ();
 
+  if (! octave_qhull_dims_ok (dim, num_points, "convhulln"))
+    return retval;
+
   points = points.transpose ();
 
   std::string options;
 
   if (dim <= 4)
     options = " Qt";
   else
     options = " Qt Qx";
