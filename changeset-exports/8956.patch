# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1236763868 -3600
#      Wed Mar 11 10:31:08 2009 +0100
# Node ID d91fa4b20bbbfa35b91a9cbf332e41babfa329fe
# Parent  6d3fcbf89267c97f621c1d1e90645c8d27728522
ensure nonnegative char -> real conversion

diff --git a/liboctave/CMatrix.cc b/liboctave/CMatrix.cc
--- a/liboctave/CMatrix.cc
+++ b/liboctave/CMatrix.cc
@@ -307,17 +307,17 @@ ComplexMatrix::ComplexMatrix (const bool
       elem (i, j) = a.elem (i, j);
 }
 
 ComplexMatrix::ComplexMatrix (const charMatrix& a)
   : MArray2<Complex> (a.rows (), a.cols (), 0.0)
 {
   for (octave_idx_type i = 0; i < a.rows (); i++)
     for (octave_idx_type j = 0; j < a.cols (); j++)
-      elem (i, j) = a.elem (i, j);
+      elem (i, j) = static_cast<unsigned char> (a.elem (i, j));
 }
 
 bool
 ComplexMatrix::operator == (const ComplexMatrix& a) const
 {
   if (rows () != a.rows () || cols () != a.cols ())
     return false;
 
diff --git a/liboctave/CNDArray.cc b/liboctave/CNDArray.cc
--- a/liboctave/CNDArray.cc
+++ b/liboctave/CNDArray.cc
@@ -56,16 +56,24 @@ extern "C"
   F77_RET_T
   F77_FUNC (zfftf, ZFFTF) (const octave_idx_type&, Complex*, Complex*);
 
   F77_RET_T
   F77_FUNC (zfftb, ZFFTB) (const octave_idx_type&, Complex*, Complex*);
 }
 #endif
 
+ComplexNDArray::ComplexNDArray (const charNDArray& a)
+  : MArrayN<Complex> (a.dims ())
+{
+  octave_idx_type n = a.numel ();
+  for (octave_idx_type i = 0; i < n; i++)
+    xelem (i) = static_cast<unsigned char> (a(i));
+}
+
 #if defined (HAVE_FFTW3)
 ComplexNDArray
 ComplexNDArray::fourier (int dim) const
 {
   dim_vector dv = dims ();
 
   if (dim > dv.length () || dim < 0)
     return ComplexNDArray ();
diff --git a/liboctave/CNDArray.h b/liboctave/CNDArray.h
--- a/liboctave/CNDArray.h
+++ b/liboctave/CNDArray.h
@@ -47,16 +47,18 @@ public:
   ComplexNDArray (const ComplexMatrix& a) : MArrayN<Complex> (a) { }
 
   template <class U>
   ComplexNDArray (const MArrayN<U>& a) : MArrayN<Complex> (a) { }
 
   template <class U>
   ComplexNDArray (const ArrayN<U>& a) : MArrayN<Complex> (a) { }
 
+  ComplexNDArray (const charNDArray&); 
+
   ComplexNDArray& operator = (const ComplexNDArray& a)
     {
       MArrayN<Complex>::operator = (a);
       return *this;
     }
 
   // unary operations
 
diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,35 @@
+2009-03-11  Jaroslav Hajek  <highegg@gmail.com>
+
+	* dNDArray.cc (NDArray::NDArray (const charNDArray&)): New
+	constructor.
+	* fNDArray.cc (FloatNDArray::FloatNDArray (const charNDArray&)):
+	Ditto.
+	* CNDArray.cc (ComplexNDArray::ComplexNDArray (const charNDArray&)):
+	Ditto.
+	* fCNDArray.cc (FloatComplexNDArray::FloatComplexNDArray 
+	(const charNDArray&)): Ditto.
+
+	* dNDArray.h (NDArray::NDArray (const charNDArray&)): Declare.
+	* fNDArray.h (FloatNDArray::FloatNDArray (const charNDArray&)):
+	Ditto.
+	* CNDArray.h (ComplexNDArray::ComplexNDArray (const charNDArray&)):
+	Ditto.
+	* fCNDArray.h (FloatComplexNDArray::FloatComplexNDArray 
+	(const charNDArray&)): Ditto.
+
+	* dMatrix.cc (Matrix::Matrix (const charMatrix&)): Cast to unsigned
+	chars.
+	* fMatrix.cc (FloatMatrix::FloatMatrix (const charMatrix&)): Likewise.
+	* CMatrix.cc (ComplexMatrix::ComplexMatrix (const charMatrix&)):
+	Likewise.
+	* fCMatrix.cc (FloatComplexMatrix::FloatComplexMatrix 
+	(const charMatrix&)): Likewise.
+
 2009-03-10  Jason Riedy  <jason@acm.org>
 
 	* sparse-base-lu.cc (Pc_vec): The column permutation should be
 	Ufact.cols ()-long, not Lfact.rows ()-long.
 
 2009-03-10  Jason Riedy  <jason@acm.org>
 
 	* dSparse.cc (SparseMatrix::SparseMatrix (const PermMatrix&)):
diff --git a/liboctave/dMatrix.cc b/liboctave/dMatrix.cc
--- a/liboctave/dMatrix.cc
+++ b/liboctave/dMatrix.cc
@@ -270,17 +270,17 @@ Matrix::Matrix (const boolMatrix& a)
       elem (i, j) = a.elem (i, j);
 }
 
 Matrix::Matrix (const charMatrix& a)
   : MArray2<double> (a.rows (), a.cols ())
 {
   for (octave_idx_type i = 0; i < a.rows (); i++)
     for (octave_idx_type j = 0; j < a.cols (); j++)
-      elem (i, j) = a.elem (i, j);
+      elem (i, j) = static_cast<unsigned char> (a.elem (i, j));
 }
 
 bool
 Matrix::operator == (const Matrix& a) const
 {
   if (rows () != a.rows () || cols () != a.cols ())
     return false;
 
diff --git a/liboctave/dNDArray.cc b/liboctave/dNDArray.cc
--- a/liboctave/dNDArray.cc
+++ b/liboctave/dNDArray.cc
@@ -82,16 +82,24 @@ NDArray::NDArray (const Array<octave_idx
 	  ptmp[i] = static_cast<double> 
 	    (pa[i] + static_cast<octave_idx_type> (1));
       else
 	for (octave_idx_type i = 0; i < a.numel (); i++)
 	  ptmp[i] = static_cast<double> (pa[i]);
     }
 }
 
+NDArray::NDArray (const charNDArray& a)
+  : MArrayN<double> (a.dims ())
+{
+  octave_idx_type n = a.numel ();
+  for (octave_idx_type i = 0; i < n; i++)
+    xelem (i) = static_cast<unsigned char> (a(i));
+}
+
 #if defined (HAVE_FFTW3)
 
 ComplexNDArray
 NDArray::fourier (int dim) const
 {
   dim_vector dv = dims ();
 
   if (dim > dv.length () || dim < 0)
diff --git a/liboctave/dNDArray.h b/liboctave/dNDArray.h
--- a/liboctave/dNDArray.h
+++ b/liboctave/dNDArray.h
@@ -55,16 +55,18 @@ public:
   NDArray (const MArrayN<U>& a) : MArrayN<double> (a) { }
 
   template <class U>
   NDArray (const ArrayN<U>& a) : MArrayN<double> (a) { }
 
   template <class U>
   explicit NDArray (const intNDArray<U>& a) : MArrayN<double> (a) { }
 
+  NDArray (const charNDArray&); 
+
   NDArray& operator = (const NDArray& a)
     {
       MArrayN<double>::operator = (a);
       return *this;
     }
 
   // unary operations
 
diff --git a/liboctave/fCMatrix.cc b/liboctave/fCMatrix.cc
--- a/liboctave/fCMatrix.cc
+++ b/liboctave/fCMatrix.cc
@@ -301,17 +301,17 @@ FloatComplexMatrix::FloatComplexMatrix (
       elem (i, j) = a.elem (i, j);
 }
 
 FloatComplexMatrix::FloatComplexMatrix (const charMatrix& a)
   : MArray2<FloatComplex> (a.rows (), a.cols (), 0.0)
 {
   for (octave_idx_type i = 0; i < a.rows (); i++)
     for (octave_idx_type j = 0; j < a.cols (); j++)
-      elem (i, j) = a.elem (i, j);
+      elem (i, j) = static_cast<unsigned char> (a.elem (i, j));
 }
 
 bool
 FloatComplexMatrix::operator == (const FloatComplexMatrix& a) const
 {
   if (rows () != a.rows () || cols () != a.cols ())
     return false;
 
diff --git a/liboctave/fCNDArray.cc b/liboctave/fCNDArray.cc
--- a/liboctave/fCNDArray.cc
+++ b/liboctave/fCNDArray.cc
@@ -51,16 +51,24 @@ extern "C"
   F77_RET_T
   F77_FUNC (cfftf, CFFTF) (const octave_idx_type&, FloatComplex*, FloatComplex*);
 
   F77_RET_T
   F77_FUNC (cfftb, CFFTB) (const octave_idx_type&, FloatComplex*, FloatComplex*);
 }
 #endif
 
+FloatComplexNDArray::FloatComplexNDArray (const charNDArray& a)
+  : MArrayN<FloatComplex> (a.dims ())
+{
+  octave_idx_type n = a.numel ();
+  for (octave_idx_type i = 0; i < n; i++)
+    xelem (i) = static_cast<unsigned char> (a(i));
+}
+
 #if defined (HAVE_FFTW3)
 FloatComplexNDArray
 FloatComplexNDArray::fourier (int dim) const
 {
   dim_vector dv = dims ();
 
   if (dim > dv.length () || dim < 0)
     return FloatComplexNDArray ();
diff --git a/liboctave/fCNDArray.h b/liboctave/fCNDArray.h
--- a/liboctave/fCNDArray.h
+++ b/liboctave/fCNDArray.h
@@ -47,16 +47,18 @@ public:
   FloatComplexNDArray (const FloatComplexMatrix& a) : MArrayN<FloatComplex> (a) { }
 
   template <class U>
   FloatComplexNDArray (const MArrayN<U>& a) : MArrayN<FloatComplex> (a) { }
 
   template <class U>
   FloatComplexNDArray (const ArrayN<U>& a) : MArrayN<FloatComplex> (a) { }
 
+  FloatComplexNDArray (const charNDArray&); 
+
   FloatComplexNDArray& operator = (const FloatComplexNDArray& a)
     {
       MArrayN<FloatComplex>::operator = (a);
       return *this;
     }
 
   // unary operations
 
diff --git a/liboctave/fMatrix.cc b/liboctave/fMatrix.cc
--- a/liboctave/fMatrix.cc
+++ b/liboctave/fMatrix.cc
@@ -269,17 +269,17 @@ FloatMatrix::FloatMatrix (const boolMatr
       elem (i, j) = a.elem (i, j);
 }
 
 FloatMatrix::FloatMatrix (const charMatrix& a)
   : MArray2<float> (a.rows (), a.cols ())
 {
   for (octave_idx_type i = 0; i < a.rows (); i++)
     for (octave_idx_type j = 0; j < a.cols (); j++)
-      elem (i, j) = a.elem (i, j);
+      elem (i, j) = static_cast<unsigned char> (a.elem (i, j));
 }
 
 bool
 FloatMatrix::operator == (const FloatMatrix& a) const
 {
   if (rows () != a.rows () || cols () != a.cols ())
     return false;
 
diff --git a/liboctave/fNDArray.cc b/liboctave/fNDArray.cc
--- a/liboctave/fNDArray.cc
+++ b/liboctave/fNDArray.cc
@@ -36,16 +36,24 @@ along with Octave; see the file COPYING.
 #include "mx-base.h"
 #include "f77-fcn.h"
 #include "lo-error.h"
 #include "lo-ieee.h"
 #include "lo-mappers.h"
 #include "oct-locbuf.h"
 #include "mx-op-defs.h"
 
+FloatNDArray::FloatNDArray (const charNDArray& a)
+  : MArrayN<float> (a.dims ())
+{
+  octave_idx_type n = a.numel ();
+  for (octave_idx_type i = 0; i < n; i++)
+    xelem (i) = static_cast<unsigned char> (a(i));
+}
+
 #if defined (HAVE_FFTW3)
 #include "oct-fftw.h"
 
 FloatComplexNDArray
 FloatNDArray::fourier (int dim) const
 {
   dim_vector dv = dims ();
 
diff --git a/liboctave/fNDArray.h b/liboctave/fNDArray.h
--- a/liboctave/fNDArray.h
+++ b/liboctave/fNDArray.h
@@ -52,16 +52,18 @@ public:
   FloatNDArray (const MArrayN<U>& a) : MArrayN<float> (a) { }
 
   template <class U>
   FloatNDArray (const ArrayN<U>& a) : MArrayN<float> (a) { }
 
   template <class U>
   explicit FloatNDArray (const intNDArray<U>& a) : MArrayN<float> (a) { }
 
+  FloatNDArray (const charNDArray&); 
+
   FloatNDArray& operator = (const FloatNDArray& a)
     {
       MArrayN<float>::operator = (a);
       return *this;
     }
 
   // unary operations
 
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,14 @@
+2009-03-11  Jaroslav Hajek  <highegg@gmail.com>
+
+	* ov-ch-mat.cc (octave_char_matrix::double_value, 
+	octave_char_matrix::float_value, octave_char_matrix::complex_value,
+	octave_char_matrix::float_complex_value): Cast to unsigned char.
+
 2009-03-10  Jason Riedy  <jason@acm.org>
 
 	* DLD-FUNCTIONS/find.cc (find_nonzero_elem_idx): New override
 	for find on PermMatrix.
 	(find): Add a branch testing arg.is_perm_matrix () and calling the
 	above override.
 
 2009-03-10  John W. Eaton  <jwe@octave.org>
diff --git a/src/ov-ch-mat.cc b/src/ov-ch-mat.cc
--- a/src/ov-ch-mat.cc
+++ b/src/ov-ch-mat.cc
@@ -59,17 +59,17 @@ octave_char_matrix::double_value (bool) 
 {
   double retval = lo_ieee_nan_value ();
 
   if (rows () > 0 && columns () > 0)
     {
       gripe_implicit_conversion ("Octave:array-as-scalar",
 				 "character matrix", "real scalar");
 
-      retval = matrix (0, 0);
+      retval = static_cast<unsigned char> (matrix (0, 0));
     }
   else
     gripe_invalid_conversion ("character matrix", "real scalar");
 
   return retval;
 }
 
 float
@@ -77,17 +77,17 @@ octave_char_matrix::float_value (bool) c
 {
   float retval = lo_ieee_float_nan_value ();
 
   if (rows () > 0 && columns () > 0)
     {
       gripe_implicit_conversion ("Octave:array-as-scalar",
 				 "character matrix", "real scalar");
 
-      retval = matrix (0, 0);
+      retval = static_cast<unsigned char> (matrix (0, 0));
     }
   else
     gripe_invalid_conversion ("character matrix", "real scalar");
 
   return retval;
 }
 
 Complex
@@ -97,17 +97,17 @@ octave_char_matrix::complex_value (bool)
 
   Complex retval (tmp, tmp);
 
   if (rows () > 0 && columns () > 0)
     {
       gripe_implicit_conversion ("Octave:array-as-scalar",
 				 "character matrix", "complex scalar");
 
-      retval = matrix (0, 0);
+      retval = static_cast<unsigned char> (matrix (0, 0));
     }
   else
     gripe_invalid_conversion ("character matrix", "complex scalar");
 
   return retval;
 }
 
 FloatComplex
@@ -117,17 +117,17 @@ octave_char_matrix::float_complex_value 
 
   FloatComplex retval (tmp, tmp);
 
   if (rows () > 0 && columns () > 0)
     {
       gripe_implicit_conversion ("Octave:array-as-scalar",
 				 "character matrix", "complex scalar");
 
-      retval = matrix (0, 0);
+      retval = static_cast<unsigned char> (matrix (0, 0));
     }
   else
     gripe_invalid_conversion ("character matrix", "complex scalar");
 
   return retval;
 }
 
 void
