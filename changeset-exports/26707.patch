# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1549607738 0
#      Fri Feb 08 06:35:38 2019 +0000
# Node ID f35db7d5b7a4a54db32fae746851549a9852a45c
# Parent  ccea3574f36b9e1e4d2f6bc4dde31bc0dc5e4c3d
use dynamic_cast instead of static_cast as appropriate parser

* oct-parse.yy: Use dynamic_cast instead of static_cast when casting
within the parse tree class hierarchy.

diff --git a/libinterp/parse-tree/oct-parse.yy b/libinterp/parse-tree/oct-parse.yy
--- a/libinterp/parse-tree/oct-parse.yy
+++ b/libinterp/parse-tree/oct-parse.yy
@@ -3866,18 +3866,18 @@ namespace octave
         int l = expr->line ();
         int c = expr->column ();
 
         if (! expr->is_postfix_indexed ())
           expr->set_postfix_index (type);
 
         if (expr->is_index_expression ())
           {
-            tree_index_expression *tmp =
-              static_cast<tree_index_expression *> (expr);
+            tree_index_expression *tmp
+              = dynamic_cast<tree_index_expression *> (expr);
 
             tmp->append (args, type);
 
             retval = tmp;
           }
         else
           retval = new tree_index_expression (expr, args, l, c, type);
       }
@@ -3896,17 +3896,18 @@ namespace octave
     int l = expr->line ();
     int c = expr->column ();
 
     if (! expr->is_postfix_indexed ())
       expr->set_postfix_index ('.');
 
     if (expr->is_index_expression ())
       {
-        tree_index_expression *tmp = static_cast<tree_index_expression *> (expr);
+        tree_index_expression *tmp
+          = dynamic_cast<tree_index_expression *> (expr);
 
         tmp->append (elt);
 
         retval = tmp;
       }
     else
       retval = new tree_index_expression (expr, elt, l, c);
 
@@ -3926,17 +3927,18 @@ namespace octave
     int l = expr->line ();
     int c = expr->column ();
 
     if (! expr->is_postfix_indexed ())
       expr->set_postfix_index ('.');
 
     if (expr->is_index_expression ())
       {
-        tree_index_expression *tmp = static_cast<tree_index_expression *> (expr);
+        tree_index_expression *tmp
+          = dynamic_cast<tree_index_expression *> (expr);
 
         tmp->append (elt);
 
         retval = tmp;
       }
     else
       retval = new tree_index_expression (expr, elt, l, c);
 
