# HG changeset patch
# User Konstantinos Poulios <logari81@googlemail.com>
# Date 1298400775 -3600
#      Tue Feb 22 19:52:55 2011 +0100
# Node ID 2f83974d5a6d5f247de8d5b786d05faefa7c4c90
# Parent  67f98480b18163c28907f9171714b0a34de1eec5
implement looseinset property for axes

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,18 @@
+2011-02-22  Konstantinos Poulios  <logari81@googlemail.com>
+
+	* graphics.h.in (class axes::properties): New hidden property
+	looseinset.
+	(axes::properties::update_looseinset): New function.
+	* graphics.cc (axes::properties::init): Initialize looseinset.
+	(axes::properties::sync_positions): Take looseinset into account
+	instead of default_axes_position.
+	(axes::properties::set_defaults): Default values for looseinset.
+
 2011-02-21  Kai Habel  <kai.habel@gmx.de>
 
 	* src/DLD-FUNCTIONS/__fltk_uigetfile__cc:
 	Use forward slash as file seperator for fltk file path processing only.
 
 2011-02-21  Kai Habel  <kai.habel@gmx.de>
 
 	* src/DLD-FUNCTIONS/__init_fltk__.cc(plot_window::plot_window):
diff --git a/src/graphics.cc b/src/graphics.cc
--- a/src/graphics.cc
+++ b/src/graphics.cc
@@ -3171,16 +3171,17 @@ axes::properties::init (void)
   cameraposition.add_constraint (dim_vector (1, 3));
   Matrix upv (1, 3, 0.0);
   upv(2) = 1.0;
   cameraupvector = upv;
   cameraupvector.add_constraint (dim_vector (1, 3));
   currentpoint.add_constraint (dim_vector (2, 3));
   ticklength.add_constraint (dim_vector (1, 2));
   tightinset.add_constraint (dim_vector (1, 4));
+  looseinset.add_constraint (dim_vector (1, 4));
 
   x_zlim.resize (1, 2);
 
   sx = "linear";
   sy = "linear";
   sz = "linear";
 
   calc_ticklabels (xtick, xticklabel, xscale.is ("log"));
@@ -3222,16 +3223,21 @@ axes::properties::init (void)
   xset (ylabel.handle_value (), "autopos_tag", "ylabel");
   xset (zlabel.handle_value (), "autopos_tag", "zlabel");
   xset (title.handle_value (), "autopos_tag", "title");
 
   adopt (xlabel.handle_value ());
   adopt (ylabel.handle_value ());
   adopt (zlabel.handle_value ());
   adopt (title.handle_value ());
+
+  Matrix tlooseinset = default_axes_position ();
+  tlooseinset(2) = 1-tlooseinset(0)-tlooseinset(2);
+  tlooseinset(3) = 1-tlooseinset(1)-tlooseinset(3);
+  looseinset = tlooseinset;
 }
 
 Matrix
 axes::properties::calc_tightbox (const Matrix& init_pos)
 {
   Matrix pos = init_pos;
   graphics_object obj = gh_manager::get_object (get_parent ());
   Matrix parent_bb = obj.get_properties ().get_boundingbox (true);
@@ -3257,26 +3263,30 @@ axes::properties::calc_tightbox (const M
   if (ext(1)+ext(3) > pos(1)+pos(3))
     pos(3) = ext(1)+ext(3)-pos(1);
   return pos;
 }
 
 void
 axes::properties::sync_positions (void)
 {
-  Matrix defpos = default_axes_position ();
   Matrix pos = position.get ().matrix_value ();
   Matrix outpos = outerposition.get ().matrix_value ();
+  Matrix lins = looseinset.get ().matrix_value ();
+  double lratio = lins(0);
+  double bratio = lins(1);
+  double wratio = 1-lins(0)-lins(2);
+  double hratio = 1-lins(1)-lins(3);
   if (activepositionproperty.is ("outerposition"))
     {
       pos = outpos;
-      pos(0) = outpos(0) + defpos(0) * outpos(2);
-      pos(1) = outpos(1) + defpos(1) * outpos(3);
-      pos(2) = outpos(2) * defpos(2);
-      pos(3) = outpos(3) * defpos(3);
+      pos(0) = outpos(0)+lratio*outpos(2);
+      pos(1) = outpos(1)+bratio*outpos(3);
+      pos(2) = wratio*outpos(2);
+      pos(3) = hratio*outpos(3);
 
       position = pos;
       update_transform ();
       Matrix tightpos = calc_tightbox (pos);
 
       double thrshldx = 0.005*outpos(2);
       double thrshldy = 0.005*outpos(3);
       double minsizex = 0.2*outpos(2);
@@ -3336,20 +3346,20 @@ axes::properties::sync_positions (void)
           else
             break;
         }
     }
   else
     {
       update_transform ();
 
-      outpos(0) = pos(0)-pos(2)*defpos(0)/defpos(2);
-      outpos(1) = pos(1)-pos(3)*defpos(1)/defpos(3);
-      outpos(2) = pos(2)/defpos(2);
-      outpos(3) = pos(3)/defpos(3);
+      outpos(0) = pos(0)-pos(2)*lratio/wratio;
+      outpos(1) = pos(1)-pos(3)*bratio/hratio;
+      outpos(2) = pos(2)/wratio;
+      outpos(3) = pos(3)/hratio;
 
       outerposition = calc_tightbox (outpos);
     }
 
   Matrix inset (1, 4, 1.0);
   inset(0) = pos(0)-outpos(0);
   inset(1) = pos(1)-outpos(1);
   inset(2) = outpos(0)+outpos(2)-pos(0)-pos(2);
@@ -3552,16 +3562,21 @@ axes::properties::set_defaults (base_gra
 
       Matrix touterposition (1, 4, 0.0);
       touterposition(2) = 1;
       touterposition(3) = 1;
       outerposition = touterposition;
 
       position = default_axes_position ();
 
+      Matrix tlooseinset = default_axes_position ();
+      tlooseinset(2) = 1-tlooseinset(0)-tlooseinset(2);
+      tlooseinset(3) = 1-tlooseinset(1)-tlooseinset(3);
+      looseinset = tlooseinset;
+
       activepositionproperty = "outerposition";
     }
 
   delete_children (true);
 
   xlabel = gh_manager::make_graphics_handle ("text", __myhandle__, false);
   ylabel = gh_manager::make_graphics_handle ("text", __myhandle__, false);
   zlabel = gh_manager::make_graphics_handle ("text", __myhandle__, false);
diff --git a/src/graphics.h.in b/src/graphics.h.in
--- a/src/graphics.h.in
+++ b/src/graphics.h.in
@@ -3291,16 +3291,18 @@ public:
       array_property x_projectiontransform h , Matrix (4, 4, 0.0)
       array_property x_viewporttransform h , Matrix (4, 4, 0.0)
       array_property x_normrendertransform h , Matrix (4, 4, 0.0)
       array_property x_rendertransform h , Matrix (4, 4, 0.0)
       // hidden properties for minor ticks
       row_vector_property xmtick h , Matrix ()
       row_vector_property ymtick h , Matrix ()
       row_vector_property zmtick h , Matrix ()
+      // hidden properties for inset
+      array_property looseinset hu , Matrix (1, 4, 0.0)
    END_PROPERTIES
 
   protected:
     void init (void);
 
   private:
     void update_xscale (void) { sx = get_xscale (); }
     void update_yscale (void) { sy = get_yscale (); }
@@ -3389,16 +3391,18 @@ public:
     }
 
     void update_position (void)
     {
       set_activepositionproperty ("position");
       sync_positions ();
     }
 
+    void update_looseinset (void) { sync_positions (); }
+
     double calc_tick_sep (double minval, double maxval);
     void calc_ticks_and_lims (array_property& lims, array_property& ticks, array_property& mticks,
                               bool limmode_is_auto, bool is_logscale);
     void calc_ticklabels (const array_property& ticks, any_property& labels, bool is_logscale);
     Matrix get_ticklabel_extents (const Matrix& ticks,
                                   const string_vector& ticklabels,
                                   const Matrix& limits);
 
