# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1263471369 -3600
#      Thu Jan 14 13:16:09 2010 +0100
# Node ID fd262afea1d15c1ce77ef797191ea91c191e0fa6
# Parent  edbe47bc0f8827ccdd0389ce11440794891c621f
optimize bsxfun for chars

diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,13 @@
+2010-01-14  Jaroslav Hajek  <highegg@gmail.com>
+
+	* chNDArray.h: Declare relational bsxfun ops.
+	* chNDArray.cc: Define them.
+
 2010-01-14  John W. Eaton  <jwe@octave.org>
 
 	* CMatrix.cc: Fix prototype for zherk.
 	* fCMatrix.cc: Fix prototype for cherk.
 
 2010-01-14  John W. Eaton  <jwe@octave.org>
 
 	* oct-rl-edit.c (octave_rl_set_name): Save arg before setting
diff --git a/liboctave/chNDArray.cc b/liboctave/chNDArray.cc
--- a/liboctave/chNDArray.cc
+++ b/liboctave/chNDArray.cc
@@ -27,16 +27,18 @@ along with Octave; see the file COPYING.
 
 #include "Array-util.h"
 #include "chNDArray.h"
 #include "mx-base.h"
 #include "lo-ieee.h"
 #include "lo-mappers.h"
 #include "mx-op-defs.h"
 
+#include "bsxfun-defs.cc"
+
 // FIXME -- this is not quite the right thing.
 
 boolNDArray
 charNDArray::all (int dim) const
 {
   return do_mx_red_op<boolMatrix, char> (*this, dim, mx_inline_all);
 }
 
@@ -156,13 +158,15 @@ NDS_CMP_OPS (charNDArray, char)
 NDS_BOOL_OPS (charNDArray, char)
 
 SND_CMP_OPS (char, charNDArray)
 SND_BOOL_OPS (char, charNDArray)
 
 NDND_CMP_OPS (charNDArray, charNDArray)
 NDND_BOOL_OPS (charNDArray, charNDArray)
 
+BSXFUN_STDREL_DEFS_MXLOOP (charNDArray)
+
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
diff --git a/liboctave/chNDArray.h b/liboctave/chNDArray.h
--- a/liboctave/chNDArray.h
+++ b/liboctave/chNDArray.h
@@ -23,16 +23,17 @@ along with Octave; see the file COPYING.
 #if !defined (octave_charNDArray_h)
 #define octave_charNDArray_h 1
 
 #include "MArrayN.h"
 #include "chMatrix.h"
 
 #include "mx-defs.h"
 #include "mx-op-decl.h"
+#include "bsxfun-decl.h"
 
 class
 OCTAVE_API
 charNDArray : public MArrayN<char>
 {
 public:
 
   typedef charMatrix matrix_type;
@@ -106,15 +107,17 @@ NDS_BOOL_OP_DECLS (charNDArray, char, OC
 SND_CMP_OP_DECLS (char, charNDArray, OCTAVE_API)
 SND_BOOL_OP_DECLS (char, charNDArray, OCTAVE_API)
 
 NDND_CMP_OP_DECLS (charNDArray, charNDArray, OCTAVE_API)
 NDND_BOOL_OP_DECLS (charNDArray, charNDArray, OCTAVE_API)
 
 MARRAY_FORWARD_DEFS (MArrayN, charNDArray, char)
 
+BSXFUN_STDREL_DECLS (charNDArray, OCTAVE_API)
+
 #endif
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,13 @@
+2010-01-14  Jaroslav Hajek  <highegg@gmail.com>
+
+	* DLD-FUNCTIONS/bsxfun.cc (maybe_fill_table): register relational
+	handlers for char arrays.
+
 2010-01-14  Jaroslav Hajek  <highegg@gmail.com>
 
 	* ov-class.cc (octave_class::numel (const octave_value_list&)): Don't
 	attempt to query overloaded size.
 
 2010-01-13  John W. Eaton  <jwe@octave.org>
 
 	* ov-fcn.h (octave_function (const std::string&, const std::string&)):
diff --git a/src/DLD-FUNCTIONS/bsxfun.cc b/src/DLD-FUNCTIONS/bsxfun.cc
--- a/src/DLD-FUNCTIONS/bsxfun.cc
+++ b/src/DLD-FUNCTIONS/bsxfun.cc
@@ -170,16 +170,24 @@ static void maybe_fill_table (void)
   bsxfun_handler_table[bsxfun_builtin_power][btyp_double] = 
     do_bsxfun_real_pow<NDArray, ComplexNDArray>;
   bsxfun_handler_table[bsxfun_builtin_power][btyp_float] = 
     do_bsxfun_real_pow<FloatNDArray, FloatComplexNDArray>;
 
   REGISTER_OP_HANDLER (bsxfun_builtin_power, btyp_complex, ComplexNDArray, bsxfun_pow);
   REGISTER_OP_HANDLER (bsxfun_builtin_power, btyp_float_complex, FloatComplexNDArray, bsxfun_pow);
 
+  // For chars, we want just relational handlers.
+  REGISTER_REL_HANDLER (bsxfun_builtin_eq, btyp_char, charNDArray, bsxfun_eq);
+  REGISTER_REL_HANDLER (bsxfun_builtin_ne, btyp_char, charNDArray, bsxfun_ne);
+  REGISTER_REL_HANDLER (bsxfun_builtin_lt, btyp_char, charNDArray, bsxfun_lt);
+  REGISTER_REL_HANDLER (bsxfun_builtin_le, btyp_char, charNDArray, bsxfun_le);
+  REGISTER_REL_HANDLER (bsxfun_builtin_gt, btyp_char, charNDArray, bsxfun_gt);
+  REGISTER_REL_HANDLER (bsxfun_builtin_ge, btyp_char, charNDArray, bsxfun_ge);
+
   filled = true;
 }
 
 static octave_value
 maybe_optimized_builtin (const std::string& name,
                          const octave_value& a, const octave_value& b)
 {
   octave_value retval;
