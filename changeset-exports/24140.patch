# HG changeset patch
# User Ernst Reissner <rei3ner@arcor.de>
# Date 1507901579 -7200
#      Fri Oct 13 15:32:59 2017 +0200
# Node ID 0b7662d8bd023d65b4a3d2b5a9f9f6c123132d8c
# Parent  5d2d0e570e468acbb6145633afd1c95af21da07f
doc: libinterp/octave-value/ov-java.cc: Improve (Doxygen) comments.

Pushed by Kai T. Ohlhus <k.ohlhus@gmail.com>.

diff --git a/libinterp/octave-value/ov-java.cc b/libinterp/octave-value/ov-java.cc
--- a/libinterp/octave-value/ov-java.cc
+++ b/libinterp/octave-value/ov-java.cc
@@ -15,16 +15,21 @@ MERCHANTABILITY or FITNESS FOR A PARTICU
 GNU General Public License for more details.
 
 You should have received a copy of the GNU General Public License
 along with Octave; see the file COPYING.  If not, see
 <http://www.gnu.org/licenses/>.
 
 */
 
+
+//! @file ov-java.cc
+//!
+//! Provides Octave's Java interface.
+
 #if defined (HAVE_CONFIG_H)
 #  include "config.h"
 #endif
 
 #include "defun.h"
 #include "error.h"
 #include "errwarn.h"
 #include "fpucw-wrappers.h"
@@ -163,25 +168,42 @@ extern "C"
 
   JNIEXPORT void JNICALL
   Java_org_octave_Octave_doEvalString (JNIEnv *, jclass, jstring);
 
   JNIEXPORT jboolean JNICALL
   Java_org_octave_Octave_needThreadedInvokation (JNIEnv *, jclass);
 }
 
+//! The pointer to a java virtual machine either created in the current thread
+//! or attached this thread to it.
+
 static JavaVM *jvm = nullptr;
+
+//! Whether the current thread is attached to the jvm given by #jvm.
+//! This is @c false also if no jvm exists, i.e. if #jvm is @c nullptr.
+//! @see #initialize_jvm()
+//! @see #terminate_jvm()
+
 static bool jvm_attached = false;
 
-// Need to keep hold of the shared library handle until exit.
+//! Need to keep hold of the shared library handle until exit.
+//! @see #initialize_jvm()
+//! @see #terminate_jvm()
+
 static octave::dynamic_library jvm_lib;
 
 static std::map<int,octave_value> listener_map;
 static std::map<int,octave_value> octave_ref_map;
 static int octave_java_refcount = 0;
+
+//! The thread id of the currently executing thread or @c -1 if this is
+//! unknown.
+//! @see #initialize_java()
+
 static long octave_thread_ID = -1;
 
 bool Vjava_matrix_autoconversion = false;
 bool Vjava_unsigned_autoconversion = true;
 bool Vdebug_java = false;
 
 namespace octave
 {
@@ -330,16 +352,35 @@ get_module_filename (HMODULE hMod)
         }
     }
 
   return (found ? retval : "");
 }
 
 #endif
 
+//! The java initialization directory is given by the environment variable
+//! @c OCTAVE_JAVA_DIR if defined; otherwise it is the directory of Octave's
+//! m-files defining Java functions.
+//!
+//! The Java initialization directory is the directory where resides:
+//!
+//! - @c octave.jar, defining the java classes implementing octave's java
+//!   interface,
+//! - @c javaclasspath.txt, defining the installation defined portion of the
+//!   (static) classpath,
+//! - @c java.opts, defining the configurable options of the java virtual
+//!   machine.
+//!
+//! Note that the (static) java classpath of the java virtual machine starts
+//! with @c octave.jar, and that the static java classpath ends with what
+//! is read from @c javaclasspath.txt located in the initial java directory.
+//! Moreover, the java virtual machine is created essentially with
+//! the options given by @c java.opts.
+
 static std::string
 initial_java_dir (void)
 {
   static std::string java_dir;
 
   if (java_dir.empty ())
     {
       java_dir = octave::sys::env::getenv ("OCTAVE_JAVA_DIR");
@@ -347,26 +388,29 @@ initial_java_dir (void)
       if (java_dir.empty ())
         java_dir = (octave::config::fcn_file_dir ()
                     + octave::sys::file_ops::dir_sep_str () + "java");
     }
 
   return java_dir;
 }
 
-// Read the content of a file filename (usually "classpath.txt")
-//
-// Returns a string with all lines concatenated and separated
-// by the path separator character.
-// The return string also starts with a path separator so that
-// it can be appended easily to a base classpath.
-//
-// The file "classpath.txt" must contain single lines, each
-// with a classpath.
-// Comment lines starting with a '#' or a '%' in column 1 are allowed.
+//! Return the classpath in the given file @c filepath as a string.
+//!
+//! In the classpath file, each line which is neither empty nor a comment, is
+//! interpreted as a segment of a path.  Comment lines are those starting with
+//! a @c # or with a @c % in the very first column.
+//!
+//! @param filepath The path to the file (usually @c classpath.txt) containing
+//!   a portion of the classpath.
+//!
+//! @returns A string consisting of the lines of @c filepath which are neither
+//!   comments nor empty without trailing whitespace separated by
+//!   `octave::directory_path::path_sep_str()`.  The returned string also
+//!   starts with that path separator.
 
 static std::string
 read_classpath_txt (const std::string& filepath)
 {
   std::string classpath;
 
   std::ifstream fs (filepath.c_str ());
 
@@ -394,35 +438,54 @@ read_classpath_txt (const std::string& f
                 }
             }
         }
     }
 
   return (classpath);
 }
 
+
+//! Return the initial classpath.
+//!
+//! The initial classpath starts with a pointer to @c octave.jar which is
+//! located in the initial java directory given by #java_init_dir().
+//!
+//! @attention This is nowhere documented and also the script
+//! @c javaclasspath.m drops this.  On the other hand, this is vital because
+//! @c octave.jar contains the java core classes of octave's java interface.
+//!
+//! The rest of the classpath is read sequentially from files
+//! @c javaclasspath.txt located in either:
+//!
+//! - the current directory,
+//! - the user's home directory,
+//! - the initial java directory returned by #initial_java_dir()
+//!
+//! @returns The initial classpath.
+
 static std::string
 initial_class_path (void)
 {
   std::string java_dir = initial_java_dir ();
 
   std::string retval = java_dir;
 
-  // find octave.jar file
+  // Find octave.jar file.
   if (! retval.empty ())
     {
       std::string sep = octave::sys::file_ops::dir_sep_str ();
 
       std::string jar_file = java_dir + sep + "octave.jar";
 
       octave::sys::file_stat jar_exists (jar_file);
 
       if (jar_exists)
         {
-          // initialize static classpath to octave.jar
+          // Initialize static classpath to octave.jar.
           retval = jar_file;
 
           // The base classpath has been set.
           // Try to find an optional file specifying classpaths in 3 places.
           // 1) Current directory
           // 2) User's home directory
           // 3) Octave installation directory where octave.jar resides
 
@@ -483,36 +546,62 @@ initial_class_path (void)
         error ("octave.jar does not exist: %s", jar_file.c_str ());
     }
   else
     error ("initial java dir is empty");
 
   return retval;
 }
 
+//! Initialize the java virtual machine (jvm) and field #jvm if necessary.
+//!
+//! If the jvm exists and is initialized, #jvm points to it, i.e. is not 0
+//! and there is nothing to do.
+//!
+//! If #jvm is 0 and if at least one jvm exists, attach the current thread to
+//! it by setting #jvm_attached.  Otherwise, create a #jvm with some hard-
+//! coded options:
+//!
+//! - `-Djava.class.path=classpath`, where @c classpath is given by
+//!   #initial_class_path().
+//! - `-Djava.system.class.loader=org.octave.OctClassLoader`.
+//! - `-Xrs`
+//!
+//! Further options are read from the file @c java.opts in the directory given
+//! by #java_init_dir().
+//!
+//! Note that #initial_class_path() determines the initial classpath.  This
+//! is the static classpath which cannot be changed.  Elements of the dynamic
+//! classpath can be added and removed using the m-file scripts
+//! @c javaaddpath.m and @c javarmpath.m.
+//!
+//! @see #terminate_jvm()
+
 static void
 initialize_jvm (void)
 {
   // Most of the time JVM already exists and has been initialized.
+  // Also it seems, as if jvm is set, the jvm is already attached.
+  // This does not fit terminate_jvm.
   if (jvm)
     return;
 
   JNIEnv *current_env;
   const char *static_locale = setlocale (LC_ALL, nullptr);
   const std::string locale (static_locale);
 
 #if defined (OCTAVE_USE_WINDOWS_API)
 
   HMODULE hMod = GetModuleHandle ("jvm.dll");
   std::string jvm_lib_path;
 
   if (hMod)
     {
-      // JVM seems to be already loaded, better to use that DLL instead
-      // of looking in the registry, to avoid opening a different JVM.
+      // JVM seems to be already loaded, better to use that DLL instead of
+      // looking in the registry, to avoid opening a different JVM.
       jvm_lib_path = get_module_filename (hMod);
 
       if (jvm_lib_path.empty ())
         error ("unable to find Java Runtime Environment");
     }
   else
     {
       // In windows, find the location of the JRE from the registry
@@ -549,16 +638,17 @@ initialize_jvm (void)
 #  if defined (__APPLE__)
   std::string jvm_lib_path = JAVA_LDPATH + std::string ("/libjvm.dylib");
 #  else
   std::string jvm_lib_path = JAVA_LDPATH + std::string ("/libjvm.so");
 #  endif
 
 #endif
 
+  //! The number of created jvm's.
   jsize nVMs = 0;
 
 #if ! defined (__APPLE__) && ! defined (__MACH__)
 
   octave::dynamic_library lib (jvm_lib_path);
 
   if (! lib)
     error ("unable to load Java Runtime Environment from %s",
@@ -583,17 +673,17 @@ initialize_jvm (void)
   //   octave::dynamic_library lib (jvm_lib_path)
   // doesn't work with 'not-bundled' *.oct files.
 
   if (JNI_GetCreatedJavaVMs (&jvm, 1, &nVMs) == 0 && nVMs > 0)
 
 #endif
 
     {
-      // At least one JVM exists, try to attach to it
+      // At least one JVM exists, try to attach the current thread to it.
 
       switch (jvm->GetEnv (reinterpret_cast<void **> (&current_env),
                            JNI_VERSION_1_6))
         {
         case JNI_EDETACHED:
           // Attach the current thread
           JavaVMAttachArgs vm_args;
           vm_args.version = JNI_VERSION_1_6;
@@ -609,27 +699,29 @@ initialize_jvm (void)
           break;
 
         case JNI_OK:
           // Don't do anything, the current thread is already attached to JVM
           break;
         }
 
       jvm_attached = true;
-      //printf ("JVM attached\n");
     }
   else
     {
       // No JVM exists, create one
 
       octave::JVMArgs vm_args;
 
+      // Hard-coded options for the jvm.
       vm_args.add ("-Djava.class.path=" + initial_class_path ());
+      vm_args.add ("-Djava.system.class.loader=org.octave.OctClassLoader");
       vm_args.add ("-Xrs");
-      vm_args.add ("-Djava.system.class.loader=org.octave.OctClassLoader");
+
+      // Additional options given by file java.opts.
       vm_args.read_java_opts (initial_java_dir () +
                               octave::sys::file_ops::dir_sep_str () +
                               "java.opts");
 
 #if ! defined (__APPLE__) && ! defined (__MACH__)
 
       if (create_vm (&jvm, &current_env, vm_args.to_args ()) != JNI_OK)
         error ("unable to start Java VM in %s", jvm_lib_path.c_str ());
@@ -645,36 +737,47 @@ initialize_jvm (void)
 
     }
 
 #endif
 
   setlocale (LC_ALL, locale.c_str ());
 }
 
+//! Terminate the current jvm, if there is any.
+//!
+//! Otherwise, detach the jvm if this thread is attached to it and unload it
+//! if this thread created it itself.
+//!
+//! @see #initialize_jvm()
+
 static void
 terminate_jvm (void)
 {
+  // There is nothing to do if jvm is not set (= nullptr).
   if (jvm)
     {
+      // FIXME: Seems that if jvm_attached is always true if jvm is not null.
       if (jvm_attached)
         jvm->DetachCurrentThread ();
       else
         jvm->DestroyJavaVM ();
 
       jvm = nullptr;
       jvm_attached = false;
 
       if (jvm_lib)
         jvm_lib.close ();
 
       octave_set_default_fpucw ();
     }
 }
 
+//! Converts a Java string object to std::string.
+//!{
 static std::string
 jstring_to_string (JNIEnv *jni_env, jstring s)
 {
   std::string retval;
 
   if (jni_env)
     {
       const char *cstr = jni_env->GetStringUTFChars (s, nullptr);
@@ -698,16 +801,22 @@ jstring_to_string (JNIEnv *jni_env, jobj
           if (jni_env->IsInstanceOf (obj, cls))
             retval = jstring_to_string (jni_env,
                                         reinterpret_cast<jstring> (obj));
         }
     }
 
   return retval;
 }
+//!}
+
+//! Returns a reference to the jni (java native interface) environment of the
+//! Java virtual machine #jvm.
+//!
+//! @returns A reference to jni, if #jvm is present, otherwise @c nullptr.
 
 static inline JNIEnv *
 thread_jni_env (void)
 {
   JNIEnv *env = nullptr;
 
   if (jvm)
     jvm->GetEnv (reinterpret_cast<void **> (&env), JNI_VERSION_1_6);
@@ -729,18 +838,18 @@ octave_java::is_java_string (void) const
       jclass_ref cls (current_env, current_env->FindClass ("java/lang/String"));
       return current_env->IsInstanceOf (TO_JOBJECT (java_object), cls);
     }
 
   return false;
 
 #else
 
-  // This shouldn't happen because construction of octave_java
-  // objects is supposed to be impossible if Java is not available.
+  // This shouldn't happen because construction of octave_java objects is
+  // supposed to be impossible if Java is not available.
 
   panic_impossible ();
 
 #endif
 }
 
 bool
 octave_java::is_instance_of (const std::string& cls_name) const
@@ -761,18 +870,18 @@ octave_java::is_instance_of (const std::
         return current_env->IsInstanceOf (TO_JOBJECT (java_object), cls);
     }
   return false;
 
 #else
 
   octave_unused_parameter (cls_name);
 
-  // This shouldn't happen because construction of octave_java
-  // objects is supposed to be impossible if Java is not available.
+  // This shouldn't happen because construction of octave_java objects is
+  // supposed to be impossible if Java is not available.
 
   panic_impossible ();
 
 #endif
 }
 
 #if defined (HAVE_JAVA)
 
@@ -932,21 +1041,21 @@ make_java_index (JNIEnv *jni_env, const 
     try
       {
         idx_vector v = idx(i).index_vector ();
 
         jintArray_ref i_array (jni_env, jni_env->NewIntArray (v.length ()));
         jint *buf = jni_env->GetIntArrayElements (i_array, nullptr);
         // Here, buf points to the beginning of i_array
 
-        // Copy v to buf
+        // Copy v to buf.
         for (int k = 0; k < v.length (); k++)
           buf[k] = v(k);
 
-        // set retval[i]=i_array
+        // Set retval[i] = i_array
         jni_env->ReleaseIntArrayElements (i_array, buf, 0);
         jni_env->SetObjectArrayElement (retval, i, i_array);
 
         check_exception (jni_env);
       }
     catch (octave::index_exception& e)
       {
         // Rethrow to allow more info to be reported later.
@@ -1170,30 +1279,33 @@ is_auto_convertible_number (JNIEnv *jni_
     return true;
 
   return false;
 }
 
 //! Convert the Java object pointed to by @c jobj_arg with class @c jcls_arg
 //! to an Octave value.
 //!
-//! @param jni_env JNI environment pointer
-//! @param jobj_arg pointer to a Java object
-//! @param jcls_arg optional pointer to the Java class of @c jobj_arg
+//! @param jni_env JNI environment pointer.
+//! @param jobj_arg Pointer to a Java object.
+//! @param jcls_arg Optional pointer to the Java class of @c jobj_arg.
+//!
 //! @return
 //!   @arg numeric value as a @c double if @c jobj_arg is of type @c Byte,
 //!     @c Short, @c Integer, @c Long, @c Float or @c Double
 //!   @arg logical value if @c jobj_arg is of type @c Boolean
 //!   @arg string value if @c jobj_arg is of type @c Character or @c String
 //!   @arg Octave array of numeric, logical, or char type if @c jobj_arg is
 //!     a Java array of primitive types
 //!   @arg Octave matrix if @c jobj_arg is of type @c org.octave.Matrix and
 //!     #Vjava_matrix_autoconversion is enabled
-//!   @arg Octave object if @c jobj_arg is of type @c org.octave.OctaveReference
-//!   @arg @c octave_java object wrapping the Java object otherwise
+//!   @arg Octave object if @c jobj_arg is of type
+//!     @c org.octave.OctaveReference
+//!   @arg @c octave_java object wrapping the Java object otherwise.
+
 static octave_value
 box (JNIEnv *jni_env, void *jobj_arg, void *jcls_arg)
 {
   octave_value retval;
 
   jobject jobj = TO_JOBJECT (jobj_arg);
   jclass jcls = TO_JCLASS (jcls_arg);
 
@@ -1370,17 +1482,17 @@ box (JNIEnv *jni_env, void *jobj_arg, vo
           int ID = jni_env->CallIntMethod (jobj, mID);
           std::map<int,octave_value>::iterator it = octave_ref_map.find (ID);
 
           if (it != octave_ref_map.end ())
             retval = it->second;
           break;
         }
 
-      // No suitable class found.  Return a generic octave_java object
+      // No suitable class found.  Return a generic octave_java object.
       retval = octave_value (new octave_java (jobj, jcls));
       break;
     }
 
   return retval;
 }
 
 static octave_value
@@ -1735,73 +1847,92 @@ unbox (JNIEnv *jni_env, const octave_val
 
       jni_env->SetObjectArrayElement (jobjs, i, jobj);
       jni_env->SetObjectArrayElement (jclss, i, jcls);
     }
 
   return found;
 }
 
+//! Returns the id of the current thread.
+//!
+//! @param jni_env The current environment or @c nullptr.
+//!
+//! @returns The id of the current thread or -1 otherwise.  The latter happens
+//!   if @c jni_env is @c nullptr, for example.
+
 static long
 get_current_thread_ID (JNIEnv *jni_env)
 {
   if (jni_env)
     {
+      // Call Java method static Thread java.lang.Thread.currentThread().
       jclass_ref cls (jni_env, jni_env->FindClass ("java/lang/Thread"));
       jmethodID mID = jni_env->GetStaticMethodID (cls, "currentThread",
                                                   "()Ljava/lang/Thread;");
       jobject_ref jthread (jni_env, jni_env->CallStaticObjectMethod (cls, mID));
 
       if (jthread)
         {
+          // Call Java method long java.lang.Thread.getId().
           jclass_ref jth_cls (jni_env, jni_env->GetObjectClass (jthread));
           mID = jni_env->GetMethodID (jth_cls, "getId", "()J");
           long result = jni_env->CallLongMethod (jthread, mID);
-          //printf ("current java thread ID = %ld\n", result);
           return result;
         }
     }
 
   return -1;
 }
 
+//! Run the java method @c org.octave.Octave.checkPendingAction().
+//!
+//! @returns 0 in any case for good reason.
+
 static int
 java_event_hook (void)
 {
   JNIEnv *current_env = thread_jni_env ();
 
   if (current_env)
     {
+      // Invoke static void org.octave.Octave.checkPendingAction().
       jclass_ref cls (current_env, find_octave_class (current_env,
                                                       "org/octave/Octave"));
       jmethodID mID = current_env->GetStaticMethodID
         (cls, "checkPendingAction", "()V");
       current_env->CallStaticVoidMethod (cls, mID);
 
       octave_set_default_fpucw ();
     }
 
   return 0;
 }
 
+//! Initialize java including the virtual machine (jvm) if necessary.
+//!
+//! Initializes the fields #jvm, #jvm_attached, #jvm_lib, and
+//! #octave_thread_ID.  To ensure that java is initialized, this method is
+//! used as part of octave functions @c javaObject, @c javaMethod,
+//! @c __java_get__, @c __java_set__, and @c java2mat.
+
 static void
 initialize_java (void)
 {
   if (! jvm)
     {
       try
         {
           initialize_jvm ();
 
           JNIEnv *current_env = thread_jni_env ();
 
           octave::command_editor::add_event_hook (java_event_hook);
 
           octave_thread_ID = get_current_thread_ID (current_env);
-          //printf ("octave thread ID=%ld\n", octave_thread_ID);
         }
       catch (std::string msg)
         {
           error (msg.c_str ());
         }
 
       octave_set_default_fpucw ();
     }
@@ -1889,17 +2020,17 @@ Java_org_octave_Octave_doEvalString (JNI
 JNIEXPORT jboolean JNICALL
 Java_org_octave_Octave_needThreadedInvokation (JNIEnv *env, jclass)
 {
   return (get_current_thread_ID (env) != octave_thread_ID);
 }
 
 #endif
 
-// octave_java class definition
+//! Ctor.
 
 octave_java::octave_java (void)
   : octave_base_value (), java_object (nullptr), java_class (nullptr)
 {
 #if ! defined (HAVE_JAVA)
 
   err_disabled_feature ("Java Objects", "Java");
 
@@ -1947,18 +2078,18 @@ octave_java::dims (void) const
 
   if (current_env && java_object)
     return compute_array_dimensions (current_env, TO_JOBJECT (java_object));
   else
     return dim_vector (1, 1);
 
 #else
 
-  // This shouldn't happen because construction of octave_java
-  // objects is supposed to be impossible if Java is not available.
+  // This shouldn't happen because construction of octave_java objects is
+  // supposed to be impossible if Java is not available.
 
   panic_impossible ();
 
 #endif
 }
 
 octave_value_list
 octave_java::subsref (const std::string& type,
@@ -2012,18 +2143,18 @@ octave_java::subsref (const std::string&
   return retval;
 
 #else
 
   octave_unused_parameter (type);
   octave_unused_parameter (idx);
   octave_unused_parameter (nargout);
 
-  // This shouldn't happen because construction of octave_java
-  // objects is supposed to be impossible if Java is not available.
+  // This shouldn't happen because construction of octave_java objects is
+  // supposed to be impossible if Java is not available.
 
   panic_impossible ();
 
 #endif
 }
 
 octave_value
 octave_java::subsasgn (const std::string& type,
@@ -2102,18 +2233,18 @@ octave_java::subsasgn (const std::string
   return retval;
 
 #else
 
   octave_unused_parameter (type);
   octave_unused_parameter (idx);
   octave_unused_parameter (rhs);
 
-  // This shouldn't happen because construction of octave_java
-  // objects is supposed to be impossible if Java is not available.
+  // This shouldn't happen because construction of octave_java objects is
+  // supposed to be impossible if Java is not available.
 
   panic_impossible ();
 
 #endif
 }
 
 string_vector
 octave_java::map_keys (void) const
@@ -2124,18 +2255,18 @@ octave_java::map_keys (void) const
 
   if (current_env)
     return get_invoke_list (current_env, to_java ());
   else
     return string_vector ();
 
 #else
 
-  // This shouldn't happen because construction of octave_java
-  // objects is supposed to be impossible if Java is not available.
+  // This shouldn't happen because construction of octave_java objects is
+  // supposed to be impossible if Java is not available.
 
   panic_impossible ();
 
 #endif
 }
 
 octave_value
 octave_java::convert_to_str_internal (bool, bool force, char type) const
@@ -2149,18 +2280,18 @@ octave_java::convert_to_str_internal (bo
   else
     return octave_value ("");
 
 #else
 
   octave_unused_parameter (force);
   octave_unused_parameter (type);
 
-  // This shouldn't happen because construction of octave_java
-  // objects is supposed to be impossible if Java is not available.
+  // This shouldn't happen because construction of octave_java objects is
+  // supposed to be impossible if Java is not available.
 
   panic_impossible ();
 
 #endif
 }
 
 void
 octave_java::print (std::ostream& os, bool)
@@ -2258,18 +2389,18 @@ octave_java::do_javaMethod (void *jni_en
   return retval;
 
 #else
 
   octave_unused_parameter (jni_env_arg);
   octave_unused_parameter (name);
   octave_unused_parameter (args);
 
-  // This shouldn't happen because construction of octave_java
-  // objects is supposed to be impossible if Java is not available.
+  // This shouldn't happen because construction of octave_java objects is
+  // supposed to be impossible if Java is not available.
 
   panic_impossible ();
 
 #endif
 }
 
 octave_value
 octave_java::do_javaMethod (const std::string& name,
@@ -2752,26 +2883,26 @@ octave_java::release (void)
         current_env->DeleteGlobalRef (TO_JCLASS (java_class));
 
       java_object = nullptr;
       java_class = nullptr;
     }
 
 #else
 
-  // This shouldn't happen because construction of octave_java
-  // objects is supposed to be impossible if Java is not available.
+  // This shouldn't happen because construction of octave_java objects is
+  // supposed to be impossible if Java is not available.
 
   panic_impossible ();
 
 #endif
 }
 
-// DEFUN blocks below must be outside of HAVE_JAVA block so that
-// documentation strings are always available, even when functions are not.
+// DEFUN blocks below must be outside of HAVE_JAVA block so that documentation
+// strings are always available, even when functions are not.
 
 DEFUN (__java_init__, , ,
        doc: /* -*- texinfo -*-
 @deftypefn {} {} __java_init__ ()
 Internal function used @strong{only} when debugging Java interface.
 
 Function will directly call initialize_java to create an instance of a JVM.
 @end deftypefn */)
