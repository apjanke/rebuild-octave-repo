# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1522084820 14400
#      Mon Mar 26 13:20:20 2018 -0400
# Node ID 91fea65408d58b5e58f8205ca51253b4e28f0608
# Parent  a70fa26c74f8d81e8f6e78237723641ede9101d4
# Parent  3d5a3907770869d25f96bb20ef4ef69f0eab2ddd
maint: merge stable to default.

diff --git a/etc/icons/org.octave.Octave.desktop.in b/etc/icons/org.octave.Octave.desktop.in
--- a/etc/icons/org.octave.Octave.desktop.in
+++ b/etc/icons/org.octave.Octave.desktop.in
@@ -1,11 +1,12 @@
 [Desktop Entry]
 Name=GNU Octave
 Comment=Interactive programming environment for numerical computations
+Comment[de]=Interaktive Programmierumgebung fÃ¼r numerische Berechnungen
 TryExec=%OCTAVE_PREFIX%/bin/octave
 Exec=%OCTAVE_PREFIX%/bin/octave --gui %f
 Icon=octave
 Terminal=false
 Type=Application
 Categories=Education;Science;Math;
 StartupNotify=false
 StartupWMClass=octave-gui
diff --git a/libgui/src/thread-manager.h b/libgui/src/thread-manager.h
--- a/libgui/src/thread-manager.h
+++ b/libgui/src/thread-manager.h
@@ -49,19 +49,19 @@ namespace octave
   class thread_manager
   {
   public:
 
     thread_manager (void);
 
     ~thread_manager (void) = default;
 
-    thread_manager (const thread_manager& tm) = default;
+    thread_manager (const thread_manager&) = default;
 
-    thread_manager& operator = (const thread_manager& tm) = default;
+    thread_manager& operator = (const thread_manager&) = default;
 
     void register_current_thread (void) { m_rep->register_current_thread (); }
 
     void interrupt (void) { m_rep->interrupt (); }
 
     static void block_interrupt_signal (void);
 
     static void unblock_interrupt_signal (void);
diff --git a/libinterp/corefcn/fcn-info.h b/libinterp/corefcn/fcn-info.h
--- a/libinterp/corefcn/fcn-info.h
+++ b/libinterp/corefcn/fcn-info.h
@@ -227,19 +227,19 @@ namespace octave
       octave_value x_builtin_find (void);
     };
 
   public:
 
     fcn_info (const std::string& nm = "")
       : m_rep (new fcn_info_rep (nm)) { }
 
-    fcn_info (const fcn_info& fi) = default;
+    fcn_info (const fcn_info&) = default;
 
-    fcn_info& operator = (const fcn_info& fi) = default;
+    fcn_info& operator = (const fcn_info&) = default;
 
     ~fcn_info (void) = default;
 
     octave_value find (const octave_value_list& args = octave_value_list (),
                        bool local_funcs = true)
     {
       return m_rep->find (args, local_funcs);
     }
diff --git a/libinterp/corefcn/graphics.in.h b/libinterp/corefcn/graphics.in.h
--- a/libinterp/corefcn/graphics.in.h
+++ b/libinterp/corefcn/graphics.in.h
@@ -2660,19 +2660,19 @@ protected:
 class OCTINTERP_API graphics_object
 {
 public:
 
   graphics_object (void) : rep (new base_graphics_object ()) { }
 
   graphics_object (base_graphics_object *new_rep) : rep (new_rep) { }
 
-  graphics_object (const graphics_object& obj) = default;
-
-  graphics_object& operator = (const graphics_object& obj) = default;
+  graphics_object (const graphics_object&) = default;
+
+  graphics_object& operator = (const graphics_object&) = default;
 
   ~graphics_object (void) = default;
 
   void mark_modified (void) { rep->mark_modified (); }
 
   void override_defaults (base_graphics_object& obj)
   {
     rep->override_defaults (obj);
@@ -5949,21 +5949,21 @@ graphics_event
 public:
 
   typedef void (*event_fcn) (void*);
 
   graphics_event (void) = default;
 
   graphics_event (base_graphics_event *new_rep) : rep (new_rep) { }
 
-  graphics_event (const graphics_event& e) = default;
+  graphics_event (const graphics_event&) = default;
 
   ~graphics_event (void) = default;
 
-  graphics_event& operator = (const graphics_event& e) = default;
+  graphics_event& operator = (const graphics_event&) = default;
 
   void execute (void)
   {
     if (ok ())
       rep->execute ();
   }
 
   bool ok (void) const { return (rep != nullptr); }
diff --git a/libinterp/corefcn/load-path.h b/libinterp/corefcn/load-path.h
--- a/libinterp/corefcn/load-path.h
+++ b/libinterp/corefcn/load-path.h
@@ -254,21 +254,21 @@ namespace octave
       dir_info (const std::string& d)
         : dir_name (d), abs_dir_name (), is_relative (false),
           dir_mtime (), dir_time_last_checked (), all_files (), fcn_files (),
           private_file_map (), method_file_map (), package_dir_map ()
       {
         initialize ();
       }
 
-      dir_info (const dir_info& di) = default;
+      dir_info (const dir_info&) = default;
 
       ~dir_info (void) = default;
 
-      dir_info& operator = (const dir_info& di) = default;
+      dir_info& operator = (const dir_info&) = default;
 
       void update (void);
 
       std::string dir_name;
       std::string abs_dir_name;
       bool is_relative;
       sys::time dir_mtime;
       sys::time dir_time_last_checked;
diff --git a/libinterp/corefcn/oct-stream.cc b/libinterp/corefcn/oct-stream.cc
--- a/libinterp/corefcn/oct-stream.cc
+++ b/libinterp/corefcn/oct-stream.cc
@@ -233,19 +233,19 @@ namespace octave
 
     scanf_format_elt (const std::string& txt = "", int w = 0, bool d = false,
                       char typ = '\0', char mod = '\0',
                       const std::string& ch_class = "")
       : text (txt), width (w), discard (d), type (typ),
         modifier (mod), char_class (ch_class)
     { }
 
-    scanf_format_elt (const scanf_format_elt& e) = default;
-
-    scanf_format_elt& operator = (const scanf_format_elt& e) = default;
+    scanf_format_elt (const scanf_format_elt&) = default;
+
+    scanf_format_elt& operator = (const scanf_format_elt&) = default;
 
     ~scanf_format_elt (void) = default;
 
     // The C-style format string.
     std::string text;
 
     // The maximum field width.
     int width;
@@ -729,19 +729,19 @@ namespace octave
 
     printf_format_elt (const std::string& txt = "", int n = 0, int w = -1,
                        int p = -1, const std::string& f = "",
                        char typ = '\0', char mod = '\0')
       : text (txt), args (n), fw (w), prec (p), flags (f),
         type (typ), modifier (mod)
     { }
 
-    printf_format_elt (const printf_format_elt& e) = default;
-
-    printf_format_elt& operator = (const printf_format_elt& e) = default;
+    printf_format_elt (const printf_format_elt&) = default;
+
+    printf_format_elt& operator = (const printf_format_elt&) = default;
 
     ~printf_format_elt (void) = default;
 
     // The C-style format string.
     std::string text;
 
     // How many args do we expect to consume?
     int args;
diff --git a/libinterp/corefcn/pr-flt-fmt.h b/libinterp/corefcn/pr-flt-fmt.h
--- a/libinterp/corefcn/pr-flt-fmt.h
+++ b/libinterp/corefcn/pr-flt-fmt.h
@@ -47,19 +47,19 @@ float_format
 public:
 
   float_format (int w = 0, int p = output_precision (), int f = 0)
     : fw (w), ex (0), prec (p), fmt (f), up (0), sp (0) { }
 
   float_format (int w, int e, int p, int f)
     : fw (w), ex (e), prec (p), fmt (f), up (0), sp (0) { }
 
-  float_format (const float_format& ff) = default;
+  float_format (const float_format&) = default;
 
-  float_format& operator = (const float_format& ff) = default;
+  float_format& operator = (const float_format&) = default;
 
   ~float_format (void) = default;
 
   float_format& scientific (void)
   {
     fmt = std::ios::scientific;
     return *this;
   }
diff --git a/libinterp/corefcn/rand.cc b/libinterp/corefcn/rand.cc
--- a/libinterp/corefcn/rand.cc
+++ b/libinterp/corefcn/rand.cc
@@ -569,17 +569,17 @@ J. Statistical Software, vol 5, 2000,
 {
   return do_rand (args, args.length (), "randn", "normal");
 }
 
 /*
 %!test
 %! ## Test a known fixed state
 %! randn ("state", 1);
-%! assert (randn (1, 6), [-2.666521678978671 -0.7381719971724564 1.507903992673601 0.6019427189162239 -0.450661261143348 -0.7054431351574116], eps);
+%! assert (randn (1, 6), [-2.666521678978671 -0.7381719971724564 1.507903992673601 0.6019427189162239 -0.450661261143348 -0.7054431351574116], 14*eps);
 %!test
 %! ## Test a known fixed seed
 %! randn ("seed", 1);
 %! assert (randn (1, 6), [-1.039402365684509 -1.25938892364502 0.1968704611063004 0.3874166905879974 -0.5976632833480835 -0.6615074276924133], 1e-6);
 %!test
 %! if (__random_statistical_tests__)
 %!   ## statistical tests may fail occasionally.
 %!   randn ("state", 12);
@@ -786,29 +786,29 @@ classes.
 
 %!test
 %! ## Test a known fixed state
 %! randg ("state", 1);
 %! assert (randg (0.1, 1, 6), [0.0103951513331241 8.335671459898252e-05 0.00138691397249762 0.000587308416993855 0.495590518784736 2.3921917414795e-12], eps);
 %!test
 %! ## Test a known fixed state
 %! randg ("state", 1);
-%! assert (randg (0.95, 1, 6), [3.099382433255327 0.3974529788871218 0.644367450750855 1.143261091802246 1.964111762696822 0.04011915547957939], 2*eps);
+%! assert (randg (0.95, 1, 6), [3.099382433255327 0.3974529788871218 0.644367450750855 1.143261091802246 1.964111762696822 0.04011915547957939], 12*eps);
 %!test
 %! ## Test a known fixed state
 %! randg ("state", 1);
-%! assert (randg (1, 1, 6), [0.2273389379645993 1.288822625058359 0.2406335209340746 1.218869553370733 1.024649860162554 0.09631230343599533], 4*eps);
+%! assert (randg (1, 1, 6), [0.2273389379645993 1.288822625058359 0.2406335209340746 1.218869553370733 1.024649860162554 0.09631230343599533], 40*eps);
 %!test
 %! ## Test a known fixed state
 %! randg ("state", 1);
-%! assert (randg (10, 1, 6), [3.520369644331133 15.15369864472106 8.332112081991205 8.406211067432674 11.81193475187611 10.88792728177059], 16*eps);
+%! assert (randg (10, 1, 6), [3.520369644331133 15.15369864472106 8.332112081991205 8.406211067432674 11.81193475187611 10.88792728177059], 56*eps);
 %!test
 %! ## Test a known fixed state
 %! randg ("state", 1);
-%! assert (randg (100, 1, 6), [75.34570255262264 115.4911985594699 95.23493031356388 95.48926019250911 106.2397448229803 103.4813150404118], 132*eps);
+%! assert (randg (100, 1, 6), [75.34570255262264 115.4911985594699 95.23493031356388 95.48926019250911 106.2397448229803 103.4813150404118], 256*eps);
 %!test
 %! ## Test a known fixed seed
 %! randg ("seed", 1);
 %! assert (randg (0.1, 1, 6), [0.07144210487604141 0.460641473531723 0.4749028384685516 0.06823389977216721 0.000293838675133884 1.802567535340305e-12], 1e-6);
 %!test
 %! ## Test a known fixed seed
 %! randg ("seed", 1);
 %! assert (randg (0.95, 1, 6), [1.664905071258545 1.879976987838745 1.905677795410156 0.9948706030845642 0.5606933236122131 0.0766092911362648], 1e-6);
diff --git a/libinterp/corefcn/symrec.h b/libinterp/corefcn/symrec.h
--- a/libinterp/corefcn/symrec.h
+++ b/libinterp/corefcn/symrec.h
@@ -552,19 +552,19 @@ namespace octave
   public:
 
     symbol_record (const std::string& nm = "",
                    const octave_value& v = octave_value (),
                    unsigned int sc = local)
       : m_rep (new symbol_record_rep (nm, v, sc))
     { }
 
-    symbol_record (const symbol_record& sr) = default;
+    symbol_record (const symbol_record&) = default;
 
-    symbol_record& operator = (const symbol_record& sr) = default;
+    symbol_record& operator = (const symbol_record&) = default;
 
     ~symbol_record (void) = default;
 
     symbol_record dup (const std::shared_ptr<symbol_scope_rep>& sid) const
     {
       return symbol_record (m_rep->dup (sid));
     }
 
diff --git a/libinterp/octave.h b/libinterp/octave.h
--- a/libinterp/octave.h
+++ b/libinterp/octave.h
@@ -39,19 +39,19 @@ namespace octave
   class OCTINTERP_API cmdline_options
   {
   public:
 
     cmdline_options (void);
 
     cmdline_options (int argc, char **argv);
 
-    cmdline_options (const cmdline_options& opts) = default;
+    cmdline_options (const cmdline_options&) = default;
 
-    cmdline_options& operator = (const cmdline_options& opts) = default;
+    cmdline_options& operator = (const cmdline_options&) = default;
 
     bool debug_jit (void) const { return m_debug_jit; }
     bool echo_commands (void) const { return m_echo_commands; }
 
     OCTAVE_DEPRECATED (4.4, "use 'gui' instead")
     bool force_gui (void) const { return m_gui; }
 
     bool forced_interactive (void) const { return m_forced_interactive; }
diff --git a/libinterp/parse-tree/oct-lvalue.h b/libinterp/parse-tree/oct-lvalue.h
--- a/libinterp/parse-tree/oct-lvalue.h
+++ b/libinterp/parse-tree/oct-lvalue.h
@@ -41,19 +41,19 @@ namespace octave
         m_idx (), m_nel (1)
     { }
 
     octave_lvalue (const symbol_record& sr, symbol_record::context_id context)
       : m_sym (sr), m_context (context), m_black_hole (false),
         m_type (), m_idx (), m_nel (1)
     { }
 
-    octave_lvalue (const octave_lvalue& vr) = default;
+    octave_lvalue (const octave_lvalue&) = default;
 
-    octave_lvalue& operator = (const octave_lvalue& vr) = default;
+    octave_lvalue& operator = (const octave_lvalue&) = default;
 
     ~octave_lvalue (void) = default;
 
     bool is_black_hole (void) const { return m_black_hole; }
 
     void mark_black_hole (void) { m_black_hole = true; }
 
     bool is_defined (void) const
diff --git a/liboctave/system/child-list.h b/liboctave/system/child-list.h
--- a/liboctave/system/child-list.h
+++ b/liboctave/system/child-list.h
@@ -44,19 +44,19 @@ namespace octave
     // the child_list.
 
     typedef bool (*child_event_handler) (pid_t, int);
 
     child (pid_t id = -1, child_event_handler f = nullptr)
       : pid (id), handler (f), have_status (0), status (0)
     { }
 
-    child (const child& oc) = default;
+    child (const child&) = default;
 
-    child& operator = (const child& oc) = default;
+    child& operator = (const child&) = default;
 
     ~child (void) = default;
 
     // The process id of this child.
     pid_t pid;
 
     // The function we call if an event happens for this child.
     child_event_handler handler;
diff --git a/liboctave/util/pathsearch.h b/liboctave/util/pathsearch.h
--- a/liboctave/util/pathsearch.h
+++ b/liboctave/util/pathsearch.h
@@ -33,19 +33,19 @@ namespace octave
   class
   OCTAVE_API
   directory_path
   {
   public:
 
     directory_path (const std::string& s = "", const std::string& d = "");
 
-    directory_path (const directory_path& dp) = default;
+    directory_path (const directory_path&) = default;
 
-    directory_path& operator = (const directory_path& dp) = default;
+    directory_path& operator = (const directory_path&) = default;
 
     ~directory_path (void) = default;
 
     void set (const std::string& s)
     {
       m_initialized = false;
       m_orig_path = s;
       init ();
diff --git a/liboctave/util/url-transfer.h b/liboctave/util/url-transfer.h
--- a/liboctave/util/url-transfer.h
+++ b/liboctave/util/url-transfer.h
@@ -171,19 +171,19 @@ namespace octave
 
     url_transfer (void);
 
     url_transfer (const std::string& host, const std::string& user,
                   const std::string& passwd, std::ostream& os);
 
     url_transfer (const std::string& url, std::ostream& os);
 
-    url_transfer (const url_transfer& h) = default;
+    url_transfer (const url_transfer&) = default;
 
-    url_transfer& operator = (const url_transfer& h) = default;
+    url_transfer& operator = (const url_transfer&) = default;
 
     ~url_transfer (void) = default;
 
     bool is_valid (void) const { return rep->is_valid (); }
 
     bool good (void) const { return rep->good (); }
 
     std::string lasterror (void) const { return rep->lasterror (); }
diff --git a/scripts/sparse/bicg.m b/scripts/sparse/bicg.m
--- a/scripts/sparse/bicg.m
+++ b/scripts/sparse/bicg.m
@@ -160,17 +160,17 @@
 ## @end example
 ##
 ## @sc{Example 6:} @code{bicg} with functions as preconditioners
 ##
 ## @example
 ## x = bicg (Afun, b, 1e-6, n, M1fun, M2fun)
 ## @end example
 ##
-## @sc{Example 7:} @code {bicg} with as input a function requiring an argument
+## @sc{Example 7:} @code{bicg} with as input a function requiring an argument
 ##
 ## @example
 ## @group
 ## function y = Ap (A, x, string, z) # compute A^z * x or (A^z)' * x
 ##    y = x;
 ##    if (strcmp (string, "notransp"))
 ##      for i = 1:z
 ##        y = A * y;
diff --git a/scripts/sparse/bicgstab.m b/scripts/sparse/bicgstab.m
--- a/scripts/sparse/bicgstab.m
+++ b/scripts/sparse/bicgstab.m
@@ -47,17 +47,17 @@
 ## @item @var{maxit} the maximum number of outer iterations, if not given or
 ## set to [] the default value @code{min (20, numel (b))} is used.
 ##
 ## @item @var{M1}, @var{M2} are the preconditioners.  The preconditioner
 ## @var{M} is given as @code{@var{M} = @var{M1} * @var{M2}}.
 ## Both @var{M1} and @var{M2} can be passed as a matrix or as a function
 ## handle or inline function @code{g} such that
 ## @code{g(@var{x}) = @var{M1} \ @var{x}} or
-## @code {g(@var{x}) = @var{M2} \ @var{x}}.
+## @code{g(@var{x}) = @var{M2} \ @var{x}}.
 ## The techinque used is the right preconditioning, i.e., it is
 ## solved @code{@var{A} * inv (@var{M}) * @var{y} = @var{b}} and then
 ## @code{@var{x} = inv (@var{M}) * @var{y}}.
 ##
 ## @item @var{x0} the initial guess, if not given or set to [] the default
 ## value @code{zeros (size (@var{b}))} is used.
 ##
 ## @end itemize
@@ -153,17 +153,17 @@
 ## @end example
 ##
 ## @sc{Example 6:} @code{bicgstab} with functions as preconditioners
 ##
 ## @example
 ## x = bicgstab (Afun, b, 1e-6, n, M1fun, M2fun)
 ## @end example
 ##
-## @sc{Example 7:} @code {bicgstab} with as input a function requiring
+## @sc{Example 7:} @code{bicgstab} with as input a function requiring
 ## an argument
 ##
 ## @example
 ## @group
 ## function y = Ap (A, x, z) # compute A^z * x
 ##    y = x;
 ##    for i = 1:z
 ##      y = A * y;
diff --git a/scripts/sparse/cgs.m b/scripts/sparse/cgs.m
--- a/scripts/sparse/cgs.m
+++ b/scripts/sparse/cgs.m
@@ -142,17 +142,17 @@
 ## @end example
 ##
 ## @sc{Example 6:} @code{cgs} with functions as preconditioners
 ##
 ## @example
 ## x = cgs (Afun, b, 1e-6, n, M1fun, M2fun)
 ## @end example
 ##
-## @sc{Example 7:} @code {cgs} with as input a function requiring an argument
+## @sc{Example 7:} @code{cgs} with as input a function requiring an argument
 ##
 ## @example
 ## @group
 ## function y = Ap (A, x, z) # compute A^z * x
 ##    y = x;
 ##    for i = 1:z
 ##      y = A * y;
 ##    endfor
diff --git a/scripts/sparse/gmres.m b/scripts/sparse/gmres.m
--- a/scripts/sparse/gmres.m
+++ b/scripts/sparse/gmres.m
@@ -185,17 +185,17 @@
 ## @end example
 ##
 ## @sc{Example 7:} @code{gmres} with functions as preconditioners
 ##
 ## @example
 ## x = gmres (Afun, b, 1e-6, n, M1fun, M2fun)
 ## @end example
 ##
-## @sc{Example 8:} @code {gmres} with as input a function requiring an argument
+## @sc{Example 8:} @code{gmres} with as input a function requiring an argument
 ##
 ## @example
 ## @group
 ##   function y = Ap (A, x, p) # compute A^p * x
 ##      y = x;
 ##      for i = 1:p
 ##        y = A * y;
 ##      endfor
diff --git a/scripts/sparse/pcg.m b/scripts/sparse/pcg.m
--- a/scripts/sparse/pcg.m
+++ b/scripts/sparse/pcg.m
@@ -48,17 +48,17 @@
 ## If @var{tol} is omitted or empty, then a tolerance of 1e-6 is used.
 ##
 ## @item
 ## @var{maxit} is the maximum allowed number of iterations; if @var{maxit}
 ## is omitted or empty then a value of 20 is used.
 ##
 ## @item
 ## @var{m} is a HPD preconditioning matrix.  For any decomposition
-## @code{@var{m} = @var{p1} * @var {p2}} such that
+## @code{@var{m} = @var{p1} * @var{p2}} such that
 ## @w{@code{inv (@var{p1}) * @var{A} * inv (@var{p2})}} is HPD, the
 ## conjugate gradient method is formally applied to the linear system
 ## @w{@code{inv (@var{p1}) * @var{A} * inv (@var{p2}) * @var{y} = inv
 ## (@var{p1}) * @var{b}}},
 ## with @code{@var{x} = inv (@var{p2}) * @var{y}} (split preconditioning).
 ## In practice, at each iteration of the conjugate gradient method a
 ## linear system with matrix @var{m} is solved with @code{mldivide}.
 ## If a particular factorization
diff --git a/scripts/sparse/tfqmr.m b/scripts/sparse/tfqmr.m
--- a/scripts/sparse/tfqmr.m
+++ b/scripts/sparse/tfqmr.m
@@ -43,17 +43,17 @@
 ## number is odd or even, is considered as iteration in @code{tfqmr} the
 ## entire odd-even cycle.  That is, to make an entire iteration, the algorithm
 ## performs two sub-iterations: the odd one and the even one.
 ##
 ## @item @var{M1}, @var{M2} are the preconditioners.  The preconditioner
 ## @var{M} is given as @code{M = M1 * M2}.
 ## Both @var{M1} and @var{M2} can be passed as a matrix or as a function
 ## handle or inline function @code{g} such that @code{g(x) = M1 \ x} or
-## @code {g(x) = M2 \ x}.
+## @code{g(x) = M2 \ x}.
 ## The technique used is the rigth-preconditioning, i.e., it is solved
 ## @code{A*inv(M)*y = b} and then @code{x = inv(M)*y}, instead of
 ## @code{A x = b}.
 ##
 ## @item @var{x0} the initial guess, if not given or set to [] the default
 ## value @code{zeros (size (b))} is used.
 ##
 ## @end itemize
