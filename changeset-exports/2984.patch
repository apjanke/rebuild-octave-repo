# HG changeset patch
# User jwe
# Date 863759674 0
#      Fri May 16 05:14:34 1997 +0000
# Node ID 84c33881d0bc337dae1ae5addf578deb0cb0502e
# Parent  145d5acfc68b8da5cb8388b4a822005a0ed94765
[project @ 1997-05-16 05:14:33 by jwe]

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,18 @@
+Fri May 16 00:07:11 1997  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* pt-assign.cc (tree_simple_assignment_expression::eval,
+	tree_multi_assignment_expression::eval): Clear lvalue index here.
+
+	* oct-lvalue.cc (octave_lvalue::assign): Don't clear index here.
+	* oct-lvalue.h (octave_lvalue::clear_index): New function.
+	(octave_lvalue::set_index): Rename from octave_lvalue::index.
+	Change all callers.
+
 Thu May 15 11:48:10 1997  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* pt-select.h, pt-select.cc (class tree_if_command_list,
 	class tree_if_clause, class tree_switch_case_list,
 	class tree_switch_case): Move here from pt-misc.h, pt-misc.cc.
 	* pt-decl.h, pt-decl.cc (class tree_decl_init_list,
 	class tree_decl_elt): Move here from pt-mist.h, pt-misc.cc
 
diff --git a/src/oct-lvalue.cc b/src/oct-lvalue.cc
--- a/src/oct-lvalue.cc
+++ b/src/oct-lvalue.cc
@@ -48,20 +48,15 @@ octave_lvalue::assign (octave_value::ass
       if (struct_elt_name.empty ())
 	val->assign (op, idx, rhs);
       else
 	val->assign_struct_elt (op, struct_elt_name, idx, rhs);
     }
 
   if (chg_fcn && chg_fcn () < 0)
     *val = saved_val;
-
-  // Clear index so subsequent value() operations will not perform an
-  // indexing operation.
-
-  idx = octave_value_list ();
 }
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
diff --git a/src/oct-lvalue.h b/src/oct-lvalue.h
--- a/src/oct-lvalue.h
+++ b/src/oct-lvalue.h
@@ -70,17 +70,21 @@ public:
 
   void define (const octave_value& v) { *val = v; }
 
   void assign (octave_value::assign_op, const octave_value&);
 
   octave_lvalue struct_elt_ref (const string& nm)
     { return val->struct_elt_ref (nm); }
 
-  void index (const octave_value_list& i) { idx = i; }
+  void set_index (const octave_value_list& i) { idx = i; }
+
+  void clear_index (void) { idx = octave_value_list (); }
+
+  // XXX FIXME XXX -- need to handle index increment and decrement too.
 
   void increment (void) { val->increment (); }
 
   void decrement (void) { val->decrement (); }
 
   octave_value value (void)
     {
       return struct_elt_name.empty ()
diff --git a/src/pt-assign.cc b/src/pt-assign.cc
--- a/src/pt-assign.cc
+++ b/src/pt-assign.cc
@@ -72,16 +72,19 @@ tree_simple_assignment::rvalue (int narg
   if (nargout > 1)
     error ("invalid number of output arguments for expression X = RHS");
   else
     retval = rvalue ();
 
   return retval;
 }
 
+// XXX FIXME XXX -- this works, but it would look a little better if
+// it were broken up into a couple of separate functions.
+
 octave_value
 tree_simple_assignment::rvalue (void)
 {
   octave_value rhs_val;
 
   if (error_state)
     return rhs_val;
 
@@ -103,16 +106,23 @@ tree_simple_assignment::rvalue (void)
 	      octave_lvalue ult = lhs->lvalue ();
 
 	      if (error_state)
 		eval_error ();
 	      else
 		{
 		  ult.assign (etype, rhs_val);
 
+		  // We clear any index here so that we can get the
+		  // new value of the referenced object below, instead
+		  // of the indexed value (which should be the same as
+		  // the right hand side value).
+
+		  ult.clear_index ();
+
 		  if (error_state)
 		    eval_error ();
 		  else if (! Vprint_rhs_assign_val)
 		    {
 		      octave_value lhs_val = ult.value ();
 
 		      if (! error_state && print_result ())
 			{
@@ -191,16 +201,19 @@ tree_multi_assignment::rvalue (void)
   octave_value_list tmp = rvalue (1);
 
   if (! tmp.empty ())
     retval = tmp(0);
 
   return retval;
 }
 
+// XXX FIXME XXX -- this works, but it would look a little better if
+// it were broken up into a couple of separate functions.
+
 octave_value_list
 tree_multi_assignment::rvalue (int)
 {
   octave_value_list rhs_val;
 
   if (error_state)
     return rhs_val;
 
@@ -237,16 +250,25 @@ tree_multi_assignment::rvalue (int)
 			{
 			  octave_value tmp = k < n
 			    ? rhs_val(k++) : octave_value ();
 
 			  if (tmp.is_defined ())
 			    {
 			      // XXX FIXME XXX -- handle other assignment ops.
 			      ult.assign (octave_value::asn_eq, tmp);
+
+			      // We clear any index here so that we
+			      // can get the new value of the
+			      // referenced object below, instead of
+			      // the indexed value (which should be
+			      // the same as the right hand side
+			      // value).
+
+			      ult.clear_index ();
 			    }
 			  else
 			    error ("element number %d undefined in return list", k);
 
 			  if (error_state)
 			    eval_error ();
 			  else if (! Vprint_rhs_assign_val)
 			    {
diff --git a/src/pt-idx.cc b/src/pt-idx.cc
--- a/src/pt-idx.cc
+++ b/src/pt-idx.cc
@@ -105,17 +105,17 @@ tree_index_expression::lvalue (void)
 
       if (! error_state)
 	{
 	  octave_value_list args;
 	  
 	  if (list)
 	    args = list->convert_to_const_vector ();
 
-	  retval.index (args);
+	  retval.set_index (args);
 	}
     }
 
   return retval;
 }
 
 void
 tree_index_expression::eval_error (void)
