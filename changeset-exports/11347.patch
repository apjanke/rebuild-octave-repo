# HG changeset patch
# User Rik <octave@nomad.inbox5.com>
# Date 1292263577 28800
#      Mon Dec 13 10:06:17 2010 -0800
# Node ID 2726132f77f644e77fd012cc17061aa043dbaf54
# Parent  30f54b3b99532cfc9503d4fdfa33d0d7c632df72
sqp.m: Remove never violated Inf bounds from computation (bug #31742)

diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,8 +1,15 @@
+2010-12-13  Olaf Till <olaf.till@uni-jena.de>
+
+	* optimization/sqp.m: Remove never violated Inf bounds from
+	computation in function for inequality constraints (bug
+	#31742). Remove non-functional check for inequality constraints
+	being +Inf in each iteration.
+
 2010-12-12  Jaroslav Hajek  <highegg@gmail.com>
 
 	* optimization/optimget.m: Use explicit toupper conversion rather than
 	lookup(..., "i").
 	* optimization/optimset.m: Ditto.
 	* miscellaneous/parseparams.m: Ditto.
 
 2010-12-12  Kai Habel  <kai.habel@gmx.de>
diff --git a/scripts/optimization/sqp.m b/scripts/optimization/sqp.m
--- a/scripts/optimization/sqp.m
+++ b/scripts/optimization/sqp.m
@@ -302,46 +302,55 @@ function [x, obj, info, iter, nf, lambda
           error ("sqp: invalid inequality constraint function specification");
         endswitch
       elseif (! isempty (cif))
         ci_fun = cif;   # No cell array, only constraint inequality function set
       endif
     else
       ## constraint inequality function with bounds present
       global __sqp_lb__;
+      lb_idx = ub_idx = true (size (x));
+      ub_grad = - (lb_grad = eye (rows (x)));
       if (isvector (lb))
-        __sqp_lb__ = lb(:);
+        __sqp_lb__ = tmp_lb = lb(:);
+        lb_idx(:) = tmp_idx = (lb != -Inf);
+        __sqp_lb__ = __sqp_lb__(tmp_idx);
+        lb_grad = lb_grad(lb_idx, :);
       elseif (isempty (lb))
         if (isa (x, "single"))
-          __sqp_lb__ = -realmax ("single");
+          __sqp_lb__ = tmp_lb = -realmax ("single");
         else
-          __sqp_lb__ = -realmax;
+          __sqp_lb__ = tmp_lb = -realmax;
         endif
       else
         error ("sqp: invalid lower bound");
       endif
 
       global __sqp_ub__;
       if (isvector (ub))
-        __sqp_ub__ = ub(:);
+        __sqp_ub__ = tmp_ub = ub(:);
+        ub_idx(:) = tmp_idx = (ub != Inf);
+        __sqp_ub__ = __sqp_ub__(tmp_idx);
+        ub_grad = ub_grad(ub_idx, :);
       elseif (isempty (ub))
         if (isa (x, "single"))
-          __sqp_ub__ = realmax ("single");
+          __sqp_ub__ = tmp_ub = realmax ("single");
         else
-          __sqp_ub__ = realmax;
+          __sqp_ub__ = tmp_ub = realmax;
         endif
       else
         error ("sqp: invalid upper bound");
       endif
 
-      if (__sqp_lb__ > __sqp_ub__)
+      if (any (tmp_lb > tmp_ub))
         error ("sqp: upper bound smaller than lower bound");
       endif
-      ci_fun = @cf_ub_lb;
-      ci_grd = @cigrad_ub_lb;
+      bounds_grad = [lb_grad; ub_grad];
+      ci_fun = @ (x) cf_ub_lb (x, lb_idx, ub_idx);
+      ci_grd = @ (x) cigrad_ub_lb (x, bounds_grad);
     endif
 
     __sqp_ci_fun__ = ci_fun;
   endif   # if (nargin > 3)
 
   iter_max = 100;
   if (nargin > 6 && ! isempty (maxiter))
     if (isscalar (maxiter) && maxiter > 0 && fix (maxiter) == maxiter)
@@ -430,22 +439,16 @@ function [x, obj, info, iter, nf, lambda
       break;
     endif
 
     ## Compute search direction p by solving QP.
 
     g = -ce;
     d = -ci;
 
-    ## Discard inequality constraints that have -Inf bounds since those
-    ## will never be active.
-    idx = isinf (d) & d < 0;
-    d(idx) = [];
-    C(idx,:) = [];
-
     [p, obj_qp, INFO, lambda] = qp (x, B, c, F, g, [], [], d, C,
                                     Inf (size (d)));
 
     info = INFO.info;
 
     ## Check QP solution and attempt to recover if it has failed.
 
     ## Choose mu such that p is a descent direction for the chosen
@@ -718,44 +721,45 @@ function jac = fd_ci_jac (x)
 
   global __sqp_cifcn__;
   ## __sqp_cifcn__ = constraint function without gradients and lb or ub
   jac = fdjac (__sqp_cifcn__, x);
 
 endfunction
 
 
-function res = cf_ub_lb (x)
+function res = cf_ub_lb (x, lbidx, ubidx)
 
   ## combine constraint function with ub and lb
   global __sqp_cifcn__ __sqp_lb__ __sqp_ub__
 
-  res = [x-__sqp_lb__; __sqp_ub__-x];
-
-  if (! isempty (__sqp_cifcn__))
-    res = [feval(__sqp_cifcn__,x); x-__sqp_lb__; __sqp_ub__-x];
+  if (isempty (__sqp_cifcn__))
+    res = [x(lbidx,1)-__sqp_lb__; __sqp_ub__-x(ubidx,1)];
+  else
+    res = [feval(__sqp_cifcn__,x); \
+           x(lbidx,1)-__sqp_lb__; __sqp_ub__-x(ubidx,1)];
   endif
 
 endfunction
 
 
-function res = cigrad_ub_lb (x)
+function res = cigrad_ub_lb (x, bgrad)
 
   global __sqp_cif__
 
-  res = [eye(numel(x)); -eye(numel(x))];
-
   cigradfcn = @fd_ci_jac;
 
   if (iscell (__sqp_cif__) && length (__sqp_cif__) > 1)
     cigradfcn = __sqp_cif__{2};
   endif
         
-  if (! isempty (cigradfcn))
-    res = [feval(cigradfcn,x); eye(numel(x)); -eye(numel(x))];
+  if (isempty (cigradfcn))
+    res = bgrad;
+  else
+    res = [feval(cigradfcn,x); bgrad];
   endif
 
 endfunction
 
 %!function r = g (x)
 %!  r = [sumsq(x)-10;
 %!       x(2)*x(3)-5*x(4)*x(5);
 %!       x(1)^3+x(2)^3+1 ];
