# HG changeset patch
# User jwe
# Date 847003707 0
#      Sun Nov 03 06:48:27 1996 +0000
# Node ID 4516c3b75851f14b58f300c660b9c3547b2e8db0
# Parent  5edc0b8b05439d6f0bf4dc193fdc1912fa3bee89
[project @ 1996-11-03 06:48:26 by jwe]

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,16 @@
+Sun Nov  3 00:45:30 1996  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* pt-pr-code.cc (tree_print_code::visit_constant): Check for
+	string before checking for char_matrix.
+
+	* ov-ch-mat.cc (octave_char_matrix::print): Supply correct number
+	of args to octave_print_internal().
+
 Sat Nov  2 20:44:55 1996  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* file-io.cc (Ftmpnam): Rename from Foctave_temp_file_name.
 
 	* Makefile.in (DLD_SRC): Move time.cc and getrusage.cc here from
 	SOURCES.  Add getpwent.cc.
 
 	* getrusage.cc: Rename from resource.cc.  Make getrusage a
diff --git a/src/ov-ch-mat.cc b/src/ov-ch-mat.cc
--- a/src/ov-ch-mat.cc
+++ b/src/ov-ch-mat.cc
@@ -86,16 +86,16 @@ octave_char_matrix::complex_value (bool)
     gripe_invalid_conversion ("character matrix", "complex scalar");
 
   return retval;
 }
 
 void
 octave_char_matrix::print (ostream& os)
 {
-  octave_print_internal (os, matrix, false, struct_indent);
+  octave_print_internal (os, matrix, false, false, struct_indent);
 }
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
diff --git a/src/pt-pr-code.cc b/src/pt-pr-code.cc
--- a/src/pt-pr-code.cc
+++ b/src/pt-pr-code.cc
@@ -554,16 +554,19 @@ tree_print_code::visit_multi_assignment_
 }
 
 void
 tree_print_code::visit_oct_obj (tree_oct_obj&)
 {
   ::error ("visit_oct_obj: internal error");
 }
 
+// XXX FIXME XXX -- this should just call val.print_internal () or
+// something.  Checking the types here is a big no-no.
+
 void
 tree_print_code::visit_constant (tree_constant& val)
 {
   indent ();
 
   bool in_parens = val.is_in_parens ();
 
   if (in_parens)
@@ -599,24 +602,24 @@ tree_print_code::visit_constant (tree_co
 	os << orig_text;
       else
 	octave_print_internal (os, cs, 1);
     }
   else if (val.is_complex_matrix ())
     {
       octave_print_internal (os, val.complex_matrix_value (), 1);
     }
+  else if (val.is_string ())
+    {
+      octave_print_internal (os, val.all_strings (), 1, 1);
+    }
   else if (val.is_char_matrix ())
     {
       octave_print_internal (os, val.char_matrix_value (), 1);
     }
-  else if (val.is_string ())
-    {
-      octave_print_internal (os, val.all_strings (), 1, 1);
-    }
   else if (val.is_range ())
     {
       octave_print_internal (os, val.range_value (), 1);
     }
   else if (val.is_magic_colon ())
     {
       os << ":";
     }
