# HG changeset patch
# User jwe
# Date 845078997 0
#      Sat Oct 12 00:09:57 1996 +0000
# Node ID dd29ab8af9e70d9f3073170df17671eff14f28a6
# Parent  a45c7d64b5e30ed50b4680de3bdbb8db58e505d5
[project @ 1996-10-12 00:09:55 by jwe]

diff --git a/src/help.cc b/src/help.cc
--- a/src/help.cc
+++ b/src/help.cc
@@ -783,17 +783,17 @@ display the definition of each NAME that
 		output_buf << argv[i] << " is a builtin function\n";
 	      else if (sym_rec->is_user_variable ()
 		       || sym_rec->is_builtin_variable ())
 		{
 		  tree_fvc *defn = sym_rec->def ();
 
 		  assert (defn && defn->is_constant ());
 
-		  octave_value *tmp = (octave_value *) defn;
+		  tree_constant *tmp = (tree_constant *) defn;
 
 		  int var_ok = 1;
 		  if (tmp && tmp->is_map ())
 		    {
 		      if (! elts.empty ())
 			{
 			  octave_value ult =
 			    tmp->lookup_map_element (elts, 0, 1);
diff --git a/src/input.cc b/src/input.cc
--- a/src/input.cc
+++ b/src/input.cc
@@ -674,19 +674,19 @@ generate_struct_completions (const char 
   symbol_record *sr = curr_sym_tab->lookup (id, 0, 0);
   if (! sr)
     sr = global_sym_tab->lookup (id, 0, 0);
 
   if (sr && sr->is_defined ())
     {
       tree_fvc *tmp_fvc = sr->def ();
 
-      octave_value *def = 0;
+      tree_constant *def = 0;
       if (tmp_fvc->is_constant ())
-	def = (octave_value *) tmp_fvc;
+	def = (tree_constant *) tmp_fvc;
 
       if (def && def->is_map ())
 	{
 	  if (elts && *elts)
 	    {
 	      octave_value ult = def->lookup_map_element (elts, 0, 1);
 
 	      if (ult.is_map ())
@@ -768,19 +768,19 @@ looks_like_struct (const char *nm)
   symbol_record *sr = curr_sym_tab->lookup (id, 0, 0);
   if (! sr)
     sr = global_sym_tab->lookup (id, 0, 0);
 
   if (sr && sr->is_defined ())
     {
       tree_fvc *tmp_fvc = sr->def ();
 
-      octave_value *def = 0;
+      tree_constant *def = 0;
       if (tmp_fvc->is_constant ())
-	def = (octave_value *) tmp_fvc;
+	def = (tree_constant *) tmp_fvc;
 
       if (def && def->is_map ())
 	{
 	  if (elts && *elts)
 	    {
 	      octave_value ult = def->lookup_map_element (elts, 0, 1);
 
 	      if (ult.is_map ())
@@ -1077,17 +1077,17 @@ get_user_input (const octave_value_list&
 	}
       else
 	{
 	  int parse_status = 0;
 	  retval = eval_string (input_buf, 0, parse_status);
 	  if (retval.is_defined ())
 	    {
 	      if (debug)
-		retval.eval (1);
+		retval.print ();
 	    }
 	  else
 	    retval = Matrix ();
 	}
     }
   else
     error ("input: reading user-input failed!");
 
diff --git a/src/load-save.cc b/src/load-save.cc
--- a/src/load-save.cc
+++ b/src/load-save.cc
@@ -44,20 +44,22 @@ Software Foundation, 59 Temple Place - S
 #include "error.h"
 #include "gripes.h"
 #include "help.h"
 #include "load-save.h"
 #include "mappers.h"
 #include "oct-obj.h"
 #include "pager.h"
 #include "pt-exp.h"
+#include "pt-fvc.h"
 #include "symtab.h"
 #include "sysdep.h"
 #include "unwind-prot.h"
 #include "utils.h"
+#include "variables.h"
 
 // The default output format.  May be one of "binary", "text", or
 // "mat-binary".
 static string Vdefault_save_format;
 
 // The number of decimal digits to use when writing ascii data.
 static int Vsave_precision;
 
@@ -80,17 +82,17 @@ enum load_save_format
 
 // Install a variable with name NAME and the value specified TC in the
 // symbol table.  If FORCE is nonzero, replace any existing definition
 // for NAME.  If GLOBAL is nonzero, make the variable global.
 //
 // Assumes TC is defined.
 
 static void
-install_loaded_variable (int force, char *name, const octave_value& tc,
+install_loaded_variable (int force, char *name, const octave_value& val,
 			 int global, char *doc)
 {
   // Is there already a symbol by this name?  If so, what is it?
 
   symbol_record *lsr = curr_sym_tab->lookup (name, 0, 0);
 
   int is_undefined = 1;
   int is_variable = 0;
@@ -198,18 +200,17 @@ install_loaded_variable (int force, char
 	    }
 	}
       else
 	error ("load: unable to load data for unknown symbol type");
     }
 
   if (sr)
     {
-      octave_value *tmp_tc = new octave_value (tc);
-      sr->define (tmp_tc);
+      sr->define (val);
       if (doc)
 	sr->document (doc);
       return;
     }
   else
     error ("load: unable to load variable `%s'", name);
 
   return;
@@ -1359,17 +1360,18 @@ do_load (istream& stream, const string& 
 		    {
 		      if (verbose)
 			{
 			  if (count == 1)
 			    output_buf
 			      << "type               rows   cols   name\n"
 			      << "====               ====   ====   ====\n";
 
-			  output_buf.form ("%-16s", tc.type_as_string ());
+			  string type = tc.type_name ();
+			  output_buf.form ("%-16s", type.c_str ());
 			  output_buf.form ("%7d", tc.rows ());
 			  output_buf.form ("%7d", tc.columns ());
 			  output_buf << "   ";
 			}
 		      output_buf << name << "\n";
 		    }
 		  else
 		    {
@@ -2078,17 +2080,18 @@ do_save (ostream& os, symbol_record *sr,
     {
       error ("save: can only save variables, not functions");
       return;
     }
 
   string name = sr->name ();
   string help = sr->help ();
   int global = sr->is_linked_to_global ();
-  octave_value tc = *((octave_value *) sr->def ());
+  tree_fvc *tmp = sr->def ();
+  octave_value tc = tmp->eval (0);
 
   if (tc.is_undefined ())
     return;
 
   switch (fmt)
     {
     case LS_ASCII:
       save_ascii_data (os, tc, name, 0, global);
diff --git a/src/pt-mat.cc b/src/pt-mat.cc
--- a/src/pt-mat.cc
+++ b/src/pt-mat.cc
@@ -29,24 +29,25 @@ Software Foundation, 59 Temple Place - S
 #endif
 
 #include <iostream.h>
 #include <strstream.h>
 
 #include "defun.h"
 #include "error.h"
 #include "oct-obj.h"
-#include "pt-const.h"
 #include "pt-exp.h"
 #include "pt-fvc.h"
 #include "pt-mat.h"
 #include "pt-misc.h"
 #include "pt-mvr.h"
 #include "pt-walk.h"
 #include "utils.h"
+#include "ov.h"
+#include "variables.h"
 
 // Are empty elements in a matrix list ok?  For example, is the empty
 // matrix in an expression like `[[], 1]' ok?  A positive value means
 // yes.  A negative value means yes, but print a warning message.
 // Zero means it should be considered an error.
 static int Vempty_list_elements_ok;
 
 // The character to fill with when creating string arrays.
diff --git a/src/pt-misc.cc b/src/pt-misc.cc
--- a/src/pt-misc.cc
+++ b/src/pt-misc.cc
@@ -35,24 +35,24 @@ Software Foundation, 59 Temple Place - S
 #include <unistd.h>
 #endif
 
 #include "error.h"
 #include "oct-obj.h"
 #include "pager.h"
 #include "toplev.h"
 #include "pt-cmd.h"
-#include "pt-const.h"
 #include "pt-exp.h"
 #include "pt-fcn.h"
 #include "pt-fvc.h"
 #include "pt-misc.h"
 #include "pt-mvr.h"
 #include "pt-walk.h"
 #include "pt-pr-code.h"
+#include "ov.h"
 #include "variables.h"
 
 // Nonzero means we're breaking out of a loop or function body.
 extern int breaking;
 
 // Nonzero means we're jumping to the end of a loop.
 extern int continuing;
 
@@ -301,17 +301,20 @@ tree_parameter_list::mark_as_formal_para
 
 void
 tree_parameter_list::initialize_undefined_elements (octave_value& val)
 {
   for (Pix p = first (); p != 0; next (p))
     {
       tree_identifier *elt = this->operator () (p);
       if (! elt->is_defined ())
-	elt->assign (val);
+	{
+	  octave_variable_reference tmp (elt);
+	  tmp.assign (val);
+	}
     }
 }
 
 void
 tree_parameter_list::define_from_arg_vector (const octave_value_list& args)
 {
   int nargin = args.length ();
 
@@ -321,26 +324,26 @@ tree_parameter_list::define_from_arg_vec
   int expected_nargin = length ();
 
   Pix p = first ();
 
   for (int i = 0; i < expected_nargin; i++)
     {
       tree_identifier *elt = this->operator () (p);
 
-      octave_value *tmp = 0;
+      tree_constant *tmp = 0;
 
       if (i < nargin)
 	{
 	  if (args(i).is_defined () && args(i).is_magic_colon ())
 	    {
 	      ::error ("invalid use of colon in function argument list");
 	      return;
 	    }
-	  tmp = new octave_value (args(i));
+	  tmp = new tree_constant (args (i));
 	}
 
       elt->define (tmp);
 
       next (p);
     }
 }
 
diff --git a/src/pt-plot.cc b/src/pt-plot.cc
--- a/src/pt-plot.cc
+++ b/src/pt-plot.cc
@@ -56,16 +56,17 @@ Software Foundation, 59 Temple Place - S
 #include "oct-obj.h"
 #include "pt-cmd.h"
 #include "pt-exp.h"
 #include "pt-plot.h"
 #include "pt-walk.h"
 #include "sighandlers.h"
 #include "sysdep.h"
 #include "utils.h"
+#include "variables.h"
 
 // If TRUE, a replot command is issued automatically each time a plot
 // changes in some way.
 static bool Vautomatic_replot;
 
 // The name of the shell command to execute to start gnuplot.
 static string Vgnuplot_binary;
 
@@ -622,18 +623,17 @@ subplot::extract_plot_data (int ndim, oc
   if (sp_using_clause)
     {
       ColumnVector val = sp_using_clause->values (ndim);
 
       octave_value_list args;
       args(1) = val;
       args(0) = octave_value::magic_colon_t;
 
-      octave_value_list tmp = data.eval (0, 1, args);
-      retval = tmp(0);
+      retval = data.index (args);
 
       if (error_state)
 	return octave_value ();
     }
   else
     {
       retval = data;
     }
