# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1255012985 -7200
#      Thu Oct 08 16:43:05 2009 +0200
# Node ID f8e2e9fdaa8f1e004ffd5cff1d9d1b603e6b8aea
# Parent  6f3ffe11d926840a83ffa13d039a19224bb31927
document luupdate

diff --git a/doc/ChangeLog b/doc/ChangeLog
--- a/doc/ChangeLog
+++ b/doc/ChangeLog
@@ -1,8 +1,12 @@
+2009-10-08  Jaroslav Hajek  <highegg@gmail.com>
+
+	* intepreter/linalg.txi: Add reference to luupdate.
+
 2009-10-07  Jaroslav Hajek  <highegg@gmail.com>
 
 	* interpreter/io.txi: Add reference to fskipl.
 
 2009-09-30  John W. Eaton  <jwe@octave.org>
 
 	* interpreter/data.txi (Built-in Data Types):
 	Document bitpack and bitunpack.
diff --git a/doc/interpreter/linalg.txi b/doc/interpreter/linalg.txi
--- a/doc/interpreter/linalg.txi
+++ b/doc/interpreter/linalg.txi
@@ -134,16 +134,18 @@ flag a non-Hermitian matrix.
 @DOCSTRING(choldelete)
 
 @DOCSTRING(cholshift)
 
 @DOCSTRING(hess)
 
 @DOCSTRING(lu)
 
+@DOCSTRING(luupdate)
+
 @DOCSTRING(qr)
 
 @DOCSTRING(qrupdate)
 
 @DOCSTRING(qrinsert)
 
 @DOCSTRING(qrdelete)
 
diff --git a/src/DLD-FUNCTIONS/lu.cc b/src/DLD-FUNCTIONS/lu.cc
--- a/src/DLD-FUNCTIONS/lu.cc
+++ b/src/DLD-FUNCTIONS/lu.cc
@@ -589,21 +589,57 @@ bool check_lu_dims (const octave_value& 
                     const octave_value& p)
 {
   octave_idx_type m = l.rows (), k = u.rows (), n = u.columns ();
   return ((l.ndims () == 2 && u.ndims () == 2 && k == l.columns ())
             && k == std::min (m, n) &&
             (p.is_undefined () || p.rows () == m));
 }
 
-DEFUN_DLD (luupdate, args, nargout,
+DEFUN_DLD (luupdate, args, ,
   "-*- texinfo -*-\n\
-@deftypefn {Loadable Function} {[@var{l}, @var{u}] =} luupdate (@var{l}, @var{u}, @var{x}, @var{y})\n\
-@deftypefn {Loadable Function} {[@var{l}, @var{u}, @var{p}] =}\
-luupdate (@var{l}, @var{u}, @var{p}, @var{x}, @var{y})\n\
+@deftypefn {Loadable Function} {[@var{L}, @var{U}] =} luupdate (@var{l}, @var{u}, @var{x}, @var{y})\n\
+@deftypefnx {Loadable Function} {[@var{L}, @var{U}, @var{P}] =}\
+luupdate (@var{L}, @var{U}, @var{P}, @var{x}, @var{y})\n\
+Given an LU@tie{}factorization of a real or complex matrix\n\
+@w{@var{A} = @var{L}*@var{U}}, @var{L}@tie{}lower unit trapezoidal and\n\
+@var{U}@tie{}upper trapezoidal, return the LU@tie{}factorization\n\
+of @w{@var{A} + @var{x}*@var{y}.'}, where @var{x} and @var{y} are\n\
+column vectors (rank-1 update) or matrices with equal number of columns\n\
+(rank-k update).\n\
+Optionally, row-pivoted updating can be used by supplying\n\
+a row permutation (pivoting) matrix @var{P};\n\
+in that case, an updated permutation matrix is returned.\n\
+Note that if @var{L}, @var{U}, @var{P} is a pivoted LU@tie{}factorization\n\
+as obtained by @code{lu}:\n\
+\n\
+@example\n\
+  [@var{L}, @var{U}, @var{P}] = lu (@var{A});\n\
+@end example\n\
+\n\
+then a factorization of @code{@var{a}+@var{x}*@var{y}.'} can be obtained either as\n\
+\n\
+@example\n\
+  [@var{L1}, @var{U1}] = lu (@var{L}, @var{U}, @var{P}*@var{x}, @var{y})\n\
+@end example\n\
+\n\
+or\n\
+\n\
+@example\n\
+  [@var{L1}, @var{U1}, @var{P1}] = lu (@var{L}, @var{U}, @var{P}, @var{x}, @var{y})\n\
+@end example\n\
+\n\
+The first form uses the unpivoted algorithm, which is faster, but less stable.\n\
+The second form uses a slower pivoted algorithm, which is more stable.\n\
+\n\
+Note that the matrix case is done as a sequence of rank-1 updates;\n\
+thus, for k large enough, it will be both faster and more accurate to recompute\n\
+the factorization from scratch.\n\
+@seealso{lu,qrupdate,cholupdate}\n\
+@end deftypefn\n\
 ")
 {
   octave_idx_type nargin = args.length ();
   octave_value_list retval;
 
   bool pivoted = nargin == 5;
 
   if (nargin != 4 && nargin != 5)
