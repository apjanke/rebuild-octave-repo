# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1475770222 14400
#      Thu Oct 06 12:10:22 2016 -0400
# Branch stable
# Node ID dd80fb1ef949cbd5c5846f0c51c4f12c03908971
# Parent  51b395d247820e6110f6d2216286ed6d68814d16
maint: minor style fixes for C++ code.

diff --git a/libgui/src/m-editor/file-editor.h b/libgui/src/m-editor/file-editor.h
--- a/libgui/src/m-editor/file-editor.h
+++ b/libgui/src/m-editor/file-editor.h
@@ -66,17 +66,18 @@ public:
   typedef std::map<QString, tab_info>::const_iterator editor_tab_map_const_iterator;
 
   // struct that allows to sort with respect to the tab index
   struct session_data
   {
     QString index;
     QString file_name;
     QString encoding;
-    bool operator<(const session_data &other) const
+
+    bool operator < (const session_data &other) const
     {
       return index < other.index;
     }
   };
 
   file_editor (QWidget *p);
   ~file_editor (void);
 
diff --git a/libinterp/corefcn/call-stack.cc b/libinterp/corefcn/call-stack.cc
--- a/libinterp/corefcn/call-stack.cc
+++ b/libinterp/corefcn/call-stack.cc
@@ -60,17 +60,17 @@ octave_call_stack::stack_frame::fcn_name
     }
   else
     retval = "<unknown>";
 
   return retval;
 }
 
 bool
-octave_call_stack::stack_frame::operator== (const octave_call_stack::stack_frame &rhs) const
+octave_call_stack::stack_frame::operator == (const octave_call_stack::stack_frame &rhs) const
 {
   if (this->line () != rhs.line ())
     return false;
   else if (this->column () != rhs.column ())
     return false;
   else if (this->fcn_file_name () != rhs.fcn_file_name ())
     return false;
   else if (this->fcn_name () != rhs.fcn_name ())
diff --git a/libinterp/corefcn/call-stack.h b/libinterp/corefcn/call-stack.h
--- a/libinterp/corefcn/call-stack.h
+++ b/libinterp/corefcn/call-stack.h
@@ -66,17 +66,17 @@ public:
     int line (void) const { return m_line; }
 
     int column (void) const { return m_column; }
 
     std::string fcn_file_name (void) const;
 
     std::string fcn_name (bool print_subfn = true) const;
 
-    bool operator== (const stack_frame &rhs) const;
+    bool operator == (const stack_frame &rhs) const;
 
   private:
 
     octave_function *m_fcn;
     int m_line;
     int m_column;
     symbol_table::scope_id m_scope;
     symbol_table::context_id m_context;
diff --git a/libinterp/corefcn/jit-typeinfo.cc b/libinterp/corefcn/jit-typeinfo.cc
--- a/libinterp/corefcn/jit-typeinfo.cc
+++ b/libinterp/corefcn/jit-typeinfo.cc
@@ -880,18 +880,18 @@ jit_operation::do_generate (const signat
 
 jit_function *
 jit_operation::generate (const signature_vec&) const
 {
   return 0;
 }
 
 bool
-jit_operation::signature_cmp
-::operator() (const signature_vec *lhs, const signature_vec *rhs) const
+jit_operation::signature_cmp::operator () (const signature_vec *lhs,
+                                           const signature_vec *rhs) const
 {
   const signature_vec& l = *lhs;
   const signature_vec& r = *rhs;
 
   if (l.size () < r.size ())
     return true;
   else if (l.size () > r.size ())
     return false;
diff --git a/libinterp/corefcn/jit-typeinfo.h b/libinterp/corefcn/jit-typeinfo.h
--- a/libinterp/corefcn/jit-typeinfo.h
+++ b/libinterp/corefcn/jit-typeinfo.h
@@ -367,17 +367,17 @@ protected:
   virtual jit_function *generate (const signature_vec& types) const;
 private:
   Array<octave_idx_type> to_idx (const signature_vec& types) const;
 
   const jit_function& do_generate (const signature_vec& types) const;
 
   struct signature_cmp
   {
-    bool operator() (const signature_vec *lhs, const signature_vec *rhs) const;
+    bool operator () (const signature_vec *lhs, const signature_vec *rhs) const;
   };
 
   typedef std::map<const signature_vec *, jit_function *, signature_cmp>
   generated_map;
 
   mutable generated_map generated;
 
   std::vector<Array<jit_function> > overloads;
diff --git a/libinterp/octave-value/ov-classdef.h b/libinterp/octave-value/ov-classdef.h
--- a/libinterp/octave-value/ov-classdef.h
+++ b/libinterp/octave-value/ov-classdef.h
@@ -779,17 +779,17 @@ public:
     // This should never happen...
     if (! is_class ())
       error ("internal error: invalid assignment from %s to meta.class object",
              class_name ().c_str ());
   }
 
   cdef_class& operator = (const cdef_class& cls)
   {
-    cdef_object::operator= (cls);
+    cdef_object::operator = (cls);
 
     return *this;
   }
 
   cdef_method find_method (const std::string& nm, bool local = false);
 
   void install_method (const cdef_method& meth)
   { get_rep ()->install_method (meth); }
@@ -978,17 +978,17 @@ public:
     // This should never happen...
     if (! is_property ())
       error ("internal error: invalid assignment from %s to meta.property object",
              class_name ().c_str ());
   }
 
   cdef_property& operator = (const cdef_property& prop)
   {
-    cdef_object::operator= (prop);
+    cdef_object::operator = (prop);
 
     return *this;
   }
 
   octave_value get_value (const cdef_object& obj, bool do_check_access = true,
                           const std::string& who = "")
   { return get_rep ()->get_value (obj, do_check_access, who); }
 
@@ -1111,17 +1111,17 @@ public:
     // This should never happen...
     if (! is_method ())
       error ("internal error: invalid assignment from %s to meta.method object",
              class_name ().c_str ());
   }
 
   cdef_method& operator = (const cdef_method& meth)
   {
-    cdef_object::operator= (meth);
+    cdef_object::operator = (meth);
 
     return *this;
   }
 
   // normal invocation
   octave_value_list execute (const octave_value_list& args, int nargout,
                              bool do_check_access = true,
                              const std::string& who = "")
@@ -1346,17 +1346,17 @@ public:
     // This should never happen...
     if (! is_package ())
       error ("internal error: invalid assignment from %s to meta.package object",
              class_name ().c_str ());
   }
 
   cdef_package& operator = (const cdef_package& pack)
   {
-    cdef_object::operator= (pack);
+    cdef_object::operator = (pack);
 
     return *this;
   }
 
   void install_class (const cdef_class& cls, const std::string& nm)
   { get_rep ()->install_class (cls, nm); }
 
   void install_function (const octave_value& fcn, const std::string& nm)
diff --git a/liboctave/array/CMatrix.cc b/liboctave/array/CMatrix.cc
--- a/liboctave/array/CMatrix.cc
+++ b/liboctave/array/CMatrix.cc
@@ -2359,17 +2359,17 @@ ComplexMatrix::lssolve (const ComplexMat
 
   octave_idx_type m = rows ();
   octave_idx_type n = cols ();
 
   if (m != b.rows ())
     (*current_liboctave_error_handler)
       ("matrix dimension mismatch solution of linear equations");
 
-  if (m== 0 || n == 0 || b.cols () == 0)
+  if (m == 0 || n == 0 || b.cols () == 0)
     retval = ComplexMatrix (n, b.cols (), Complex (0.0, 0.0));
   else
     {
       volatile octave_idx_type minmn = (m < n ? m : n);
       octave_idx_type maxmn = m > n ? m : n;
       rcon = -1.0;
 
       if (m != n)
diff --git a/liboctave/array/Sparse.cc b/liboctave/array/Sparse.cc
--- a/liboctave/array/Sparse.cc
+++ b/liboctave/array/Sparse.cc
@@ -2196,17 +2196,18 @@ Sparse<T>::assign (const idx_vector& idx
     {
       n = idx_i.length (nr);
       m = idx_j.length (nc);
       if (rhs.nnz () != 0)
         assign (idx_i, idx_j, Sparse<T> (n, m, rhs.data (0)));
       else
         assign (idx_i, idx_j, Sparse<T> (n, m));
     }
-  else if (idx_i.length (nr) == m && idx_j.length (nc) == n && (n==1 || m==1))
+  else if (idx_i.length (nr) == m && idx_j.length (nc) == n
+           && (n == 1 || m == 1))
     {
       assign (idx_i, idx_j, rhs.transpose ());
     }
   else
     octave::err_nonconformant  ("=", idx_i.length (nr), idx_j.length (nc), n, m);
 }
 
 // Can't use versions of these in Array.cc due to duplication of the
diff --git a/liboctave/array/fCMatrix.cc b/liboctave/array/fCMatrix.cc
--- a/liboctave/array/fCMatrix.cc
+++ b/liboctave/array/fCMatrix.cc
@@ -2376,17 +2376,17 @@ FloatComplexMatrix::lssolve (const Float
 
   octave_idx_type m = rows ();
   octave_idx_type n = cols ();
 
   if (m != b.rows ())
     (*current_liboctave_error_handler)
       ("matrix dimension mismatch solution of linear equations");
 
-  if (m== 0 || n == 0 || b.cols () == 0)
+  if (m == 0 || n == 0 || b.cols () == 0)
     retval = FloatComplexMatrix (n, b.cols (), FloatComplex (0.0, 0.0));
   else
     {
       volatile octave_idx_type minmn = (m < n ? m : n);
       octave_idx_type maxmn = m > n ? m : n;
       rcon = -1.0;
 
       if (m != n)
