# HG changeset patch
# User Torsten <mttl@mailbox.org>
# Date 1541938957 -3600
#      Sun Nov 11 13:22:37 2018 +0100
# Node ID ecd86b8b8979462f3bc779364a1c6f7c6afd0a99
# Parent  afc3d1da58e533989abdb6f350ecd4c2da7f515a
use constants for icon size preferences instead of hard coded numbers

* gui-preferences.h: define constants for icons size preferences key and
  default value as well as array with possible icon sizes

* documentation.cc (notice_settings): use constants for preferences key and
  default value, get index for array with possible sizes from preferences
  value and set icons size accordingly

* files-dock-widget.cc (notice_settings): dito

* file-editor.cc (notice_settings): dito

* main-window.cc (notice_settings): dito

* variable-editor.cc (notice_settings): dito

diff --git a/libgui/src/documentation.cc b/libgui/src/documentation.cc
--- a/libgui/src/documentation.cc
+++ b/libgui/src/documentation.cc
@@ -44,16 +44,17 @@ along with Octave; see the file COPYING.
 #include <QMessageBox>
 #include <QTabWidget>
 #include <QToolButton>
 #include <QVBoxLayout>
 
 #include "documentation.h"
 #include "resource-manager.h"
 #include "shortcut-manager.h"
+#include "gui-preferences.h"
 
 namespace octave
 {
   // The documentation splitter, which is the main widget
   // of the doc dock widget
   documentation::documentation (QWidget *p)
     : QSplitter (Qt::Horizontal, p),
       m_doc_widget (p),
@@ -417,28 +418,22 @@ namespace octave
       }
 
     qApp->restoreOverrideCursor();
   }
 
   void documentation::notice_settings (const QSettings *settings)
   {
     // Icon size in the toolbar.
-
-    int icon_size_settings = settings->value ("toolbar_icon_size", 0).toInt ();
-    QStyle *st = style ();
-    int icon_size = st->pixelMetric (QStyle::PM_ToolBarIconSize);
+    int size_idx = settings->value (global_icon_size.key,
+                                    global_icon_size.def).toInt ();
+    size_idx = (size_idx > 0) - (size_idx < 0) + 1;  // Make valid index from 0 to 2
 
-    // FIXME: Magic numbers.  Use enum?
-
-    if (icon_size_settings == 1)
-      icon_size = st->pixelMetric (QStyle::PM_LargeIconSize);
-    else if (icon_size_settings == -1)
-      icon_size = st->pixelMetric (QStyle::PM_SmallIconSize);
-
+    QStyle *st = style ();
+    int icon_size = st->pixelMetric (global_icon_sizes[size_idx]);
     m_tool_bar->setIconSize (QSize (icon_size, icon_size));
 
     // Shortcuts
     shortcut_manager::set_shortcut (m_action_find, "editor_edit:find_replace");
     shortcut_manager::shortcut (m_findnext_shortcut, "editor_edit:find_next");
     shortcut_manager::shortcut (m_findprev_shortcut, "editor_edit:find_previous");
     shortcut_manager::set_shortcut (m_action_zoom_in, "editor_view:zoom_in");
     shortcut_manager::set_shortcut (m_action_zoom_out, "editor_view:zoom_out");
diff --git a/libgui/src/files-dock-widget.cc b/libgui/src/files-dock-widget.cc
--- a/libgui/src/files-dock-widget.cc
+++ b/libgui/src/files-dock-widget.cc
@@ -795,25 +795,22 @@ namespace octave
           }
       }
   }
 
   void files_dock_widget::notice_settings (const QSettings *settings)
   {
     // Qsettings pointer is checked before emitting.
 
-    int icon_size_settings = settings->value ("toolbar_icon_size",0).toInt ();
-    QStyle *st = style ();
-    int icon_size = st->pixelMetric (QStyle::PM_ToolBarIconSize);
+    int size_idx = settings->value (global_icon_size.key,
+                                    global_icon_size.def).toInt ();
+    size_idx = (size_idx > 0) - (size_idx < 0) + 1;  // Make valid index from 0 to 2
 
-    if (icon_size_settings == 1)
-      icon_size = st->pixelMetric (QStyle::PM_LargeIconSize);
-    else if (icon_size_settings == -1)
-      icon_size = st->pixelMetric (QStyle::PM_SmallIconSize);
-
+    QStyle *st = style ();
+    int icon_size = st->pixelMetric (global_icon_sizes[size_idx]);
     m_navigation_tool_bar->setIconSize (QSize (icon_size,icon_size));
 
     // filenames are always shown, other columns can be hidden by settings
     for (int i = 0; i < 3; i++)
       m_file_tree_view->setColumnHidden (i + 1,
                                          ! settings->value (m_columns_shown_keys.at (i),false).toBool ());
 
     if (settings->value (m_columns_shown_keys.at (3),false).toBool ())
diff --git a/libgui/src/gui-preferences.h b/libgui/src/gui-preferences.h
--- a/libgui/src/gui-preferences.h
+++ b/libgui/src/gui-preferences.h
@@ -24,16 +24,17 @@ along with Octave; see the file COPYING.
 #define octave_editor_settings_h 1
 
 //#if defined (HAVE_CONFIG_H)
 //#  include "config.h"
 //#endif
 
 #include <QStringList>
 #include <QVariant>
+#include <QStyle>
 
 // Structure for the definition of pairs: key and default value
 
 struct gui_pref
 {
   gui_pref (const QString& key_, QVariant def_): key (key_), def (def_) {}
   QString   key;  // the key name
   QVariant  def;  // the default value
@@ -47,16 +48,26 @@ struct gui_pref
 const QString global_font_family = "Monospace";
 #elif defined (Q_WS_WIN) || defined (Q_WS_MAC)
 const QString global_font_family = "Courier";
 #else
 const QString global_font_family = "Courier";
 #endif
 const gui_pref global_mono_font ("monospace_font", global_font_family);
 
+// Icon size (in preferences: values -1, 0, 1)
+const QStyle::PixelMetric global_icon_sizes[3] =
+{
+  QStyle::PM_SmallIconSize,
+  QStyle::PM_LargeIconSize,
+  QStyle::PM_ToolBarIconSize
+};
+
+const gui_pref global_icon_size ("toolbar_icon_size", QVariant (0));
+
 
 // Console preferences
 
 const gui_pref cs_font ("terminal/fontName", QVariant ());
 
 
 // Variable Editor preferences
 
diff --git a/libgui/src/m-editor/file-editor.cc b/libgui/src/m-editor/file-editor.cc
--- a/libgui/src/m-editor/file-editor.cc
+++ b/libgui/src/m-editor/file-editor.cc
@@ -1055,26 +1055,23 @@ namespace octave
     m_no_focus = false;  // Back to normal focus
 
     // Clear the list of file data
     m_tmp_closed_files.clear ();
   }
 
   void file_editor::notice_settings (const QSettings *settings)
   {
-    int icon_size_settings = settings->value ("toolbar_icon_size",0).toInt ();
+    int size_idx = settings->value (global_icon_size.key,
+                                    global_icon_size.def).toInt ();
+    size_idx = (size_idx > 0) - (size_idx < 0) + 1;  // Make valid index from 0 to 2
+
     QStyle *st = style ();
-    int icon_size = st->pixelMetric (QStyle::PM_ToolBarIconSize);
-
-    if (icon_size_settings == 1)
-      icon_size = st->pixelMetric (QStyle::PM_LargeIconSize);
-    else if (icon_size_settings == -1)
-      icon_size = st->pixelMetric (QStyle::PM_SmallIconSize);
-
-    m_tool_bar->setIconSize (QSize (icon_size,icon_size));
+    int icon_size = st->pixelMetric (global_icon_sizes[size_idx]);
+    m_tool_bar->setIconSize (QSize (icon_size, icon_size));
 
     int tab_width_min = settings->value ("editor/notebook_tab_width_min", 160)
                         .toInt ();
     int tab_width_max = settings->value ("editor/notebook_tab_width_max", 300)
                         .toInt ();
 
     if (settings->value ("editor/longWindowTitle", false).toBool ())
       {
diff --git a/libgui/src/main-window.cc b/libgui/src/main-window.cc
--- a/libgui/src/main-window.cc
+++ b/libgui/src/main-window.cc
@@ -758,25 +758,22 @@ namespace octave
           }
       }
     if (widget_icon_data[icon_set_found].name != "NONE")
       m_release_notes_icon = widget_icon_data[icon_set_found].path
                              + "ReleaseWidget.png";
     else
       m_release_notes_icon = ":/actions/icons/logo.png";
 
-    int icon_size_settings = settings->value ("toolbar_icon_size",0).toInt ();
+    int size_idx = settings->value (global_icon_size.key,
+                                    global_icon_size.def).toInt ();
+    size_idx = (size_idx > 0) - (size_idx < 0) + 1;  // Make valid index from 0 to 2
+
     QStyle *st = style ();
-    int icon_size = st->pixelMetric (QStyle::PM_ToolBarIconSize);
-
-    if (icon_size_settings == 1)
-      icon_size = st->pixelMetric (QStyle::PM_LargeIconSize);
-    else if (icon_size_settings == -1)
-      icon_size = st->pixelMetric (QStyle::PM_SmallIconSize);
-
+    int icon_size = st->pixelMetric (global_icon_sizes[size_idx]);
     m_main_tool_bar->setIconSize (QSize (icon_size,icon_size));
 
     if (settings->value ("show_status_bar",true).toBool ())
       m_status_bar->show ();
     else
       m_status_bar->hide ();
 
     m_prevent_readline_conflicts
diff --git a/libgui/src/variable-editor.cc b/libgui/src/variable-editor.cc
--- a/libgui/src/variable-editor.cc
+++ b/libgui/src/variable-editor.cc
@@ -1398,27 +1398,22 @@ namespace octave
         if (i < m_table_colors.length ())
           m_table_colors.replace (i, setting_color);
       }
 
     update_colors ();
 
     // Icon size in the toolbar.
 
-    int icon_size_settings = settings->value ("toolbar_icon_size", 0).toInt ();
-    QStyle *st = style ();
-    int icon_size = st->pixelMetric (QStyle::PM_ToolBarIconSize);
-
-    // FIXME: Magic numbers.  Use enum?
+    int size_idx = settings->value (global_icon_size.key,
+                                    global_icon_size.def).toInt ();
+    size_idx = (size_idx > 0) - (size_idx < 0) + 1;  // Make valid index from 0 to 2
 
-    if (icon_size_settings == 1)
-      icon_size = st->pixelMetric (QStyle::PM_LargeIconSize);
-    else if (icon_size_settings == -1)
-      icon_size = st->pixelMetric (QStyle::PM_SmallIconSize);
-
+    QStyle *st = style ();
+    int icon_size = st->pixelMetric (global_icon_sizes[size_idx]);
     m_tool_bar->setIconSize (QSize (icon_size, icon_size));
   }
 
   void
   variable_editor::closeEvent (QCloseEvent *e)
   {
     emit finished ();
 
