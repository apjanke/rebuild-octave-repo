# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1515444712 18000
#      Mon Jan 08 15:51:52 2018 -0500
# Node ID 07876b7127bf4f33d63f062f5f3d7a66dc3024bc
# Parent  8f2c479eb125642510901cebdfa4f8e43ca38293
reorganize binding to ans in evaluator for clarity

* pt-eval.cc (tree_evaluator::visit_statement):
Evaluate expression first, then decide whether to bind to ans.

diff --git a/libinterp/parse-tree/pt-eval.cc b/libinterp/parse-tree/pt-eval.cc
--- a/libinterp/parse-tree/pt-eval.cc
+++ b/libinterp/parse-tree/pt-eval.cc
@@ -2275,39 +2275,41 @@ namespace octave
                 // one virtual function that returns a flag saying whether
                 // or not the expression will take care of binding ans and
                 // printing the result.
 
                 // FIXME: it seems that we should just have to
                 // evaluate the expression and that should take care of
                 // everything, binding ans as necessary?
 
-                bool do_bind_ans = false;
-
-                if (expr->is_identifier ())
+                octave_value tmp_result = evaluate (expr, 0);
+
+                if (tmp_result.is_defined ())
                   {
-                    symbol_scope scope = get_current_scope ();
-
-                    symbol_record::context_id context = scope.current_context ();
-
-                    tree_identifier *id = dynamic_cast<tree_identifier *> (expr);
-
-                    do_bind_ans = (! id->is_variable (context));
+                    bool do_bind_ans = false;
+
+                    if (expr->is_identifier ())
+                      {
+                        symbol_scope scope = get_current_scope ();
+
+                        symbol_record::context_id context
+                          = scope.current_context ();
+
+                        tree_identifier *id
+                          = dynamic_cast<tree_identifier *> (expr);
+
+                        do_bind_ans = (! id->is_variable (context));
+                      }
+                    else
+                      do_bind_ans = (! expr->is_assignment_expression ());
+
+                    if (do_bind_ans)
+                      bind_ans (tmp_result, expr->print_result ()
+                                && statement_printing_enabled ());
                   }
-                else
-                  do_bind_ans = (! expr->is_assignment_expression ());
-
-                octave_value tmp_result = evaluate (expr, 0);
-
-                if (do_bind_ans && tmp_result.is_defined ())
-                  bind_ans (tmp_result, expr->print_result ()
-                            && statement_printing_enabled ());
-
-                //              if (tmp_result.is_defined ())
-                //                result_values(0) = tmp_result;
               }
           }
         catch (const std::bad_alloc&)
           {
             // FIXME: We want to use error_with_id here so that give users
             // control over this error message but error_with_id will
             // require some memory allocations.  Is there anything we can
             // do to make those more likely to succeed?
