# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1489608126 14400
#      Wed Mar 15 16:02:06 2017 -0400
# Node ID 67d741321e215bd15dfa908a3475e7be4bb44b9f
# Parent  eb19c1545fb85397efb0f36fb288f2e4f03bda99
allow skipping of tests based on run-time conditions

* test.m (TESTIF): Handle optional run-time condition for skipping tests.

* __run_test_suite__.m: Differentiate between tests skipped because of
  missing features or failed runtime conditions.

* graphics.cc, audiodevinfo.cc, uimenu.m, allchild.m, findall.m,
graphics_toolkit.m, test.m: Use new TESTIF feature to skip tests based
on run-time condition.

diff --git a/libinterp/corefcn/graphics.cc b/libinterp/corefcn/graphics.cc
--- a/libinterp/corefcn/graphics.cc
+++ b/libinterp/corefcn/graphics.cc
@@ -4784,20 +4784,17 @@ axes::properties::sync_positions (void)
   update_transform ();
   if (activepositionproperty.is ("position"))
     update_position ();
   else
     update_outerposition ();
 }
 
 /*
-%!testif HAVE_OPENGL, HAVE_FLTK
-%! if (! have_window_system)
-%!  return;
-%! endif
+%!testif HAVE_OPENGL, HAVE_FLTK; have_window_system
 %! hf = figure ("visible", "off");
 %! graphics_toolkit (hf, "fltk");
 %! unwind_protect
 %!   subplot(2,1,1); plot(rand(10,1)); subplot(2,1,2); plot(rand(10,1));
 %!   hax = findall (gcf (), "type", "axes");
 %!   positions = cell2mat (get (hax, "position"));
 %!   outerpositions = cell2mat (get (hax, "outerposition"));
 %!   looseinsets = cell2mat (get (hax, "looseinset"));
@@ -4807,20 +4804,17 @@ axes::properties::sync_positions (void)
 %!   assert (cell2mat (get (hax, "position")), positions, 1e-4);
 %!   assert (cell2mat (get (hax, "outerposition")), outerpositions, 1e-4);
 %!   assert (cell2mat (get (hax, "looseinset")), looseinsets, 1e-4);
 %!   assert (cell2mat (get (hax, "tightinset")), tightinsets, 1e-4);
 %! unwind_protect_cleanup
 %!   close (hf);
 %! end_unwind_protect
 
-%!testif HAVE_OPENGL, HAVE_FLTK
-%! if (! have_window_system)
-%!  return;
-%! endif
+%!testif HAVE_OPENGL, HAVE_FLTK; have_window_system
 %! hf = figure ("visible", "off");
 %! graphics_toolkit (hf, "fltk");
 %! fpos = get (hf, "position");
 %! unwind_protect
 %!   plot (rand (3));
 %!   position = get (gca, "position");
 %!   outerposition = get (gca, "outerposition");
 %!   looseinset = get (gca, "looseinset");
@@ -4830,20 +4824,17 @@ axes::properties::sync_positions (void)
 %!   assert (get (gca, "outerposition"), outerposition, 0.001);
 %!   assert (get (gca, "position"), position, 0.001);
 %!   assert (get (gca, "looseinset"), looseinset, 0.001);
 %!   assert (get (gca, "tightinset"), tightinset, 0.001);
 %! unwind_protect_cleanup
 %!   close (hf);
 %! end_unwind_protect
 
-%!testif HAVE_OPENGL, HAVE_FLTK
-%! if (! have_window_system)
-%!  return;
-%! endif
+%!testif HAVE_OPENGL, HAVE_FLTK; have_window_system
 %! hf = figure ("visible", "off");
 %! graphics_toolkit (hf, "fltk");
 %! fpos = get (hf, "position");
 %! set (gca, "activepositionproperty", "position");
 %! unwind_protect
 %!   plot (rand (3));
 %!   position = get (gca, "position");
 %!   outerposition = get (gca, "outerposition");
diff --git a/libinterp/dldfcn/audiodevinfo.cc b/libinterp/dldfcn/audiodevinfo.cc
--- a/libinterp/dldfcn/audiodevinfo.cc
+++ b/libinterp/dldfcn/audiodevinfo.cc
@@ -119,17 +119,18 @@ recording using those parameters.
   PaError err = Pa_Initialize ();
 
   if (err != paNoError)
     error ("audiodevinfo: PortAudio initialization failed");
 
   int num_devices = Pa_GetDeviceCount ();
 
   if (num_devices < 0)
-    error ("audiodevinfo: no audio device found");
+    num_devices = 0;
+  num_devices = 0;
 
   octave_idx_type numinput = 0, numoutput = 0;
   for (int i = 0; i < num_devices; i++)
     {
       const PaDeviceInfo *device_info = Pa_GetDeviceInfo (i);
 
       if (! device_info)
         {
diff --git a/scripts/gui/uimenu.m b/scripts/gui/uimenu.m
--- a/scripts/gui/uimenu.m
+++ b/scripts/gui/uimenu.m
@@ -98,56 +98,47 @@ endfunction
 %! surfl (peaks);
 %! colormap (copper (64));
 %! shading ('interp');
 %! f = uimenu ('label', '&File', 'accelerator', 'f');
 %! e = uimenu ('label', '&Edit', 'accelerator', 'e');
 %! uimenu (f, 'label', 'Close', 'accelerator', 'q', 'callback', 'close (gcf)');
 %! uimenu (e, 'label', 'Toggle &Grid', 'accelerator', 'g', 'callback', 'grid (gca)');
 
-%!testif HAVE_OPENGL, HAVE_FLTK
-%! if (! have_window_system)
-%!  return;
-%! endif
+%!testif HAVE_OPENGL, HAVE_FLTK; have_window_system
 %! toolkit = graphics_toolkit ("fltk");
 %! hf = figure ("visible", "off");
 %! unwind_protect
 %!   ui = uimenu ("label", "mylabel");
 %!   assert (findobj (hf, "type", "uimenu"), ui);
 %!   assert (get (ui, "label"), "mylabel");
 %!   assert (get (ui, "checked"), "off");
 %!   assert (get (ui, "separator"), "off");
 %!   assert (get (ui, "enable"), "on");
 %!   assert (get (ui, "position"), 0);
 %! unwind_protect_cleanup
 %!   close (hf);
 %!   graphics_toolkit (toolkit);
 %! end_unwind_protect
 
 ## check for top level menus file and edit
-%!testif HAVE_OPENGL, HAVE_FLTK
-%! if (! have_window_system)
-%!  return;
-%! endif
+%!testif HAVE_OPENGL, HAVE_FLTK; have_window_system
 %! toolkit = graphics_toolkit ("fltk");
 %! hf = figure ("visible", "off");
 %! unwind_protect
 %!   uif = findall (hf, "label", "&file");
 %!   assert (ishghandle (uif));
 %!   uie = findall (hf, "label", "&edit");
 %!   assert (ishghandle (uie));
 %! unwind_protect_cleanup
 %!   close (hf);
 %!   graphics_toolkit (toolkit);
 %! end_unwind_protect
 
-%!testif HAVE_OPENGL, HAVE_FLTK
-%! if (! have_window_system)
-%!  return;
-%! endif
+%!testif HAVE_OPENGL, HAVE_FLTK; have_window_system
 %! toolkit = graphics_toolkit ("fltk");
 %! hf = figure ("visible", "off");
 %! unwind_protect
 %!   uie = findall (hf, "label", "&edit");
 %!   myui = uimenu (uie, "label", "mylabel");
 %!   assert (ancestor (myui, "uimenu", "toplevel"), uie);
 %! unwind_protect_cleanup
 %!   close (hf);
diff --git a/scripts/plot/util/allchild.m b/scripts/plot/util/allchild.m
--- a/scripts/plot/util/allchild.m
+++ b/scripts/plot/util/allchild.m
@@ -43,20 +43,17 @@ function h = allchild (handles)
     h = get (handles, "children");
   unwind_protect_cleanup
     set (0, "showhiddenhandles", shh);
   end_unwind_protect
 
 endfunction
 
 
-%!testif HAVE_OPENGL, HAVE_FLTK
-%! if (! have_window_system)
-%!  return;
-%! endif
+%!testif HAVE_OPENGL, HAVE_FLTK; have_window_system
 %! toolkit = graphics_toolkit ("fltk");
 %! hf = figure ("visible", "off");
 %! unwind_protect
 %!   l = line;
 %!   kids = allchild (hf);
 %!   assert (get (kids, "type"), {"axes"; "uimenu"; "uimenu"});
 %! unwind_protect_cleanup
 %!   close (hf);
diff --git a/scripts/plot/util/findall.m b/scripts/plot/util/findall.m
--- a/scripts/plot/util/findall.m
+++ b/scripts/plot/util/findall.m
@@ -45,20 +45,17 @@ function h = findall (varargin)
     h = findobj (varargin{:});
   unwind_protect_cleanup
     set (0, "showhiddenhandles", shh);
   end_unwind_protect
 
 endfunction
 
 
-%!testif HAVE_OPENGL, HAVE_FLTK
-%! if (! have_window_system)
-%!  return;
-%! endif
+%!testif HAVE_OPENGL, HAVE_FLTK; have_window_system
 %! toolkit = graphics_toolkit ("fltk");
 %! hf = figure ("visible", "off");
 %! unwind_protect
 %!   h = findall (hf);
 %!   all_handles(1) = {"figure"};
 %!   all_handles(2:18,1) = {"uimenu"};
 %!   assert (get (h, "type"), all_handles);
 %! unwind_protect_cleanup
diff --git a/scripts/plot/util/graphics_toolkit.m b/scripts/plot/util/graphics_toolkit.m
--- a/scripts/plot/util/graphics_toolkit.m
+++ b/scripts/plot/util/graphics_toolkit.m
@@ -98,34 +98,28 @@ function retval = graphics_toolkit (name
     set (0, "defaultfigure__graphics_toolkit__", name);
   else
     set (hlist, "__graphics_toolkit__", name);
   endif
 
 endfunction
 
 
-%!testif HAVE_OPENGL, HAVE_FLTK
-%! if (! have_window_system)
-%!  return;
-%! endif
+%!testif HAVE_OPENGL, HAVE_FLTK; have_window_system
 %! unwind_protect
 %!   hf = figure ("visible", "off");
 %!   toolkit = graphics_toolkit ();
 %!   assert (get (0, "defaultfigure__graphics_toolkit__"), toolkit);
 %!   graphics_toolkit (hf, "fltk");
 %!   assert (graphics_toolkit (hf), "fltk");
 %! unwind_protect_cleanup
 %!   close (hf);
 %! end_unwind_protect
 
-%!testif HAVE_OPENGL, HAVE_FLTK
-%! if (! have_window_system)
-%!  return;
-%! endif
+%!testif HAVE_OPENGL, HAVE_FLTK; have_window_system
 %! old_toolkit = graphics_toolkit ();
 %! switch (old_toolkit)
 %!   case {"gnuplot"}
 %!     new_toolkit = "fltk";
 %!   otherwise
 %!     new_toolkit = "gnuplot";
 %! endswitch
 %! assert (graphics_toolkit (new_toolkit), old_toolkit);
diff --git a/scripts/testfun/__run_test_suite__.m b/scripts/testfun/__run_test_suite__.m
--- a/scripts/testfun/__run_test_suite__.m
+++ b/scripts/testfun/__run_test_suite__.m
@@ -16,17 +16,17 @@
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {} {} __run_test_suite__ (@var{fcndirs}, @var{fixedtestdirs})
 ## Undocumented internal function.
 ## @end deftypefn
 
-function [pass, fail, xfail, skip] = __run_test_suite__ (fcndirs, fixedtestdirs)
+function [pass, fail, xfail, skip, rtskip] = __run_test_suite__ (fcndirs, fixedtestdirs)
 
   testsdir = __octave_config_info__ ("octtestsdir");
   libinterptestdir = fullfile (testsdir, "libinterp");
   liboctavetestdir = fullfile (testsdir, "liboctave");
   fixedtestdir = fullfile (testsdir, "fixed");
   fcnfiledir = __octave_config_info__ ("fcnfiledir");
   if (nargin == 0)
     fcndirs = { liboctavetestdir, libinterptestdir, fcnfiledir };
@@ -48,53 +48,58 @@ function [pass, fail, xfail, skip] = __r
     warning ("on", "quiet");
     warning ("off", "Octave:deprecated-function");
     try
       fid = fopen (logfile, "wt");
       if (fid < 0)
         error ("__run_test_suite__: could not open %s for writing", logfile);
       endif
       test ("", "explain", fid);
-      dp = dn = dxf = dsk = 0;
+      dp = dn = dxf = dsk = drtsk = 0;
       puts ("\nIntegrated test scripts:\n\n");
       for i = 1:length (fcndirs)
-        [p, n, xf, sk] = run_test_script (fid, fcndirs{i});
+        [p, n, xf, sk, rtsk] = run_test_script (fid, fcndirs{i});
         dp += p;
         dn += n;
         dxf += xf;
         dsk += sk;
+        drtsk += rtsk;
       endfor
       puts ("\nFixed test scripts:\n\n");
       for i = 1:length (fixedtestdirs)
-        [p, n, xf, sk] = run_test_dir (fid, fixedtestdirs{i});
+        [p, n, xf, sk, rtsk] = run_test_dir (fid, fixedtestdirs{i});
         dp += p;
         dn += n;
         dxf += xf;
         dsk += sk;
+        drtsk += rtsk;
       endfor
       puts ("\nSummary:\n\n");
       nfail = dn - dp - dxf;
-      printf ("  PASS    %6d\n", dp);
-      printf ("  FAIL    %6d\n", nfail);
+      printf ("  PASS                   %6d\n", dp);
+      printf ("  FAIL                   %6d\n", nfail);
       if (dxf > 0)
-        printf ("  XFAIL   %6d\n", dxf);
+        printf ("  XFAIL                  %6d\n", dxf);
       endif
       if (dsk > 0)
-        printf ("  SKIPPED %6d\n", dsk);
+        printf ("  SKIPPED (feature)      %6d\n", dsk);
+      endif
+      if (drtsk > 0)
+        printf ("  SKIPPED (runtime test) %6d\n", drtsk);
       endif
       puts ("\n");
       printf ("See the file %s for additional details.\n", logfile);
       if (dxf > 0)
         puts ("\n");
         puts ("Items listed as XFAIL above are known bugs.\n");
         puts ("Bug report numbers for them may be found in the log file:\n");
         puts (logfile);
         puts ("\nPlease help improve Octave by contributing fixes for them.\n");
       endif
-      if (dsk > 0)
+      if (dsk > 0 || drtsk > 0)
         puts ("\n");
         puts ("Tests are most often skipped because the features they require\n");
         puts ("have been disabled.  Features are most often disabled because\n");
         puts ("they require dependencies that were not present when Octave\n");
         puts ("was built.  The configure script should have printed a summary\n");
         puts ("at the end of its run indicating which dependencies were not found.\n");
       endif
 
@@ -121,35 +126,39 @@ function [pass, fail, xfail, skip] = __r
     page_screen_output (pso);
   end_unwind_protect
 
   if (nargout > 0)
     pass = dp;
     fail = nfail;
     xfail = dxf;
     skip = dsk;
+    rtskip = drtsk;
   endif
 
 endfunction
 
 function print_test_file_name (nm)
   filler = repmat (".", 1, 60-length (nm));
   printf ("  %s %s", nm, filler);
 endfunction
 
-function print_pass_fail (p, n, xf, sk)
+function print_pass_fail (p, n, xf, sk, rtsk)
 
-  if ((n + sk) > 0)
+  if ((n + sk + rtsk) > 0)
     printf (" PASS   %4d/%-4d", p, n);
     nfail = n - p - xf;
     if (nfail > 0)
       printf ("\n%71s %3d", "FAIL ", nfail);
     endif
     if (sk > 0)
-      printf ("\n%71s %3d", "SKIP ", sk);
+      printf ("\n%71s %3d", "(feature) SKIP ", sk);
+    endif
+    if (rtsk > 0)
+      printf ("\n%71s %3d", "(runtime test) SKIP ", rtsk);
     endif
     if (xf > 0)
       printf ("\n%71s %3d", "XFAIL", xf);
     endif
   endif
   puts ("\n");
 
 endfunction
@@ -184,78 +193,81 @@ function retval = has_tests (f)
   str = fread (fid, "*char")';
   fclose (fid);
   retval = ! isempty (regexp (str,
                               '^%!(assert|error|fail|test|xtest|warning)',
                               'lineanchors', 'once'));
 
 endfunction
 
-function [dp, dn, dxf, dsk] = run_test_dir (fid, d)
+function [dp, dn, dxf, dsk, drtsk] = run_test_dir (fid, d)
   global files_with_tests;
   global files_with_no_tests;
 
   lst = dir (d);
-  dp = dn = dxf = dsk = 0;
+  dp = dn = dxf = dsk = drtsk = 0;
   for i = 1:length (lst)
     nm = lst(i).name;
     if (lst(i).isdir
         && nm(1) != "." && ! strcmp (nm, "private") && nm(1) != "@")
-      [p, n, xf, sk] = run_test_dir (fid, [d, filesep, nm]);
+      [p, n, xf, sk, rtsk] = run_test_dir (fid, [d, filesep, nm]);
       dp += p;
       dn += n;
       dxf += xf;
       dsk += sk;
+      drtsk += rtsk;
     endif
   endfor
 
   saved_dir = pwd ();
   unwind_protect
     cd (d);
     for i = 1:length (lst)
       nm = lst(i).name;
       if (length (nm) > 4 && strcmpi (nm((end-3):end), ".tst"))
-        p = n = xf = sk = 0;
+        p = n = xf = sk = rtsk = 0;
         ffnm = fullfile (d, nm);
         if (has_tests (ffnm))
           print_test_file_name (nm);
-          [p, n, xf, sk] = test (nm, "quiet", fid);
-          print_pass_fail (p, n, xf, sk);
+          [p, n, xf, sk, rtsk] = test (nm, "quiet", fid);
+          print_pass_fail (p, n, xf, sk, rtsk);
           files_with_tests(end+1) = ffnm;
         else
           files_with_no_tests(end+1) = ffnm;
         endif
         dp += p;
         dn += n;
         dxf += xf;
         dsk += sk;
+        drtsk += rtsk;
       endif
     endfor
   unwind_protect_cleanup
     cd (saved_dir);
   end_unwind_protect
 
 endfunction
 
-function [dp, dn, dxf, dsk] = run_test_script (fid, d)
+function [dp, dn, dxf, dsk, drtsk] = run_test_script (fid, d)
   global files_with_tests;
   global files_with_no_tests;
   global topsrcdir;
   global topbuilddir;
 
   lst = dir (d);
-  dp = dn = dxf = dsk = 0;
+  dp = dn = dxf = dsk = drtsk = 0;
   for i = 1:length (lst)
     nm = lst(i).name;
     if (lst(i).isdir && nm(1) != ".")
-      [p, n, xf, sk] = run_test_script (fid, [d, filesep, nm]);
+      [p, n, xf, sk, rtsk] = run_test_script (fid, [d, filesep, nm]);
       dp += p;
       dn += n;
       dxf += xf;
       dsk += sk;
+      drtsk += rtsk;
     endif
   endfor
 
   for i = 1:length (lst)
     nm = lst(i).name;
     ## Ignore hidden files
     if (nm(1) == '.')
       continue
@@ -266,22 +278,23 @@ function [dp, dn, dxf, dsk] = run_test_s
             && (   strcmpi (nm((end-3):end), "-tst")
                 || strcmpi (nm((end-3):end), ".tst"))))
       p = n = xf = 0;
       ## Only run if it contains %!test, %!assert, %!error, %!fail, or %!warning
       if (has_tests (f))
         tmp = strrep (f, [topsrcdir, filesep], "");
         tmp = strrep (tmp, [topbuilddir, filesep], "");
         print_test_file_name (tmp);
-        [p, n, xf, sk] = test (f, "quiet", fid);
-        print_pass_fail (p, n, xf, sk);
+        [p, n, xf, sk, rtsk] = test (f, "quiet", fid);
+        print_pass_fail (p, n, xf, sk, rtsk);
         dp += p;
         dn += n;
         dxf += xf;
         dsk += sk;
+        drtsk += rtsk;
         files_with_tests(end+1) = f;
       else
         ## To reduce the list length, only mark .cc files that contain
         ## DEFUN definitions.
         files_with_no_tests(end+1) = f;
       endif
     endif
   endfor
diff --git a/scripts/testfun/test.m b/scripts/testfun/test.m
--- a/scripts/testfun/test.m
+++ b/scripts/testfun/test.m
@@ -17,17 +17,17 @@
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {} {} test @var{name}
 ## @deftypefnx {} {} test @var{name} quiet|normal|verbose
 ## @deftypefnx {} {} test ("@var{name}", "quiet|normal|verbose", @var{fid})
 ## @deftypefnx {} {} test ("@var{name}", "quiet|normal|verbose", @var{fname})
 ## @deftypefnx {} {@var{success} =} test (@dots{})
-## @deftypefnx {} {[@var{n}, @var{nmax}, @var{nxfail}, @var{nskip}] =} test (@dots{})
+## @deftypefnx {} {[@var{n}, @var{nmax}, @var{nxfail}, @var{nskip}, @var{nrtskip}] =} test (@dots{})
 ## @deftypefnx {} {[@var{code}, @var{idx}] =} test ("@var{name}", "grabdemo")
 ## @deftypefnx {} {} test ([], "explain", @var{fid})
 ## @deftypefnx {} {} test ([], "explain", @var{fname})
 ##
 ## Perform built-in self-tests from the first file in the loadpath matching
 ## @var{name}.
 ##
 ## @code{test} can be called in either command or functional form.  The exact
@@ -76,18 +76,19 @@
 ## (@var{fname}) or an open file descriptor ID (@var{fid}).  To enable batch
 ## processing, but still print the results to the screen, use @code{stdout} for
 ## @var{fid}.
 ##
 ## When called with just a single output argument @var{success}, @code{test}
 ## returns true if all of the tests were successful.  If called with more
 ## than one output argument then the number of successful tests (@var{n}),
 ## the total number of tests in the file (@var{nmax}), the number of xtest
-## failures (@var{nxfail}), and the number of skipped tests (@var{nskip}) are
-## returned.
+## failures (@var{nxfail}), the number of tests skipped due to missing
+## features (@var{nskip}), and the number of tests skipped due to
+## runtime conditions (@var{nrtskip}) are returned.
 ##
 ## Example
 ##
 ## @example
 ## @group
 ## test sind
 ## @result{}
 ## PASSES 5 out of 5 tests
@@ -113,17 +114,17 @@
 ##
 ## @seealso{assert, fail, demo, example, error}
 ## @end deftypefn
 
 ## Programming Note: All variables for test() must use the internal prefix "__".
 ## Shared variables are eval'ed into the current workspace and therefore might
 ## collide with the names used in the test.m function itself.
 
-function [__n, __nmax, __nxfail, __nskip] = test (__name, __flag = "normal", __fid = [])
+function [__n, __nmax, __nxfail, __nskip, __nrtskip] = test (__name, __flag = "normal", __fid = [])
 
   ## Output from test is prefixed by a "key" to quickly understand the issue.
   persistent __signal_fail  = "!!!!! ";
   persistent __signal_empty = "????? ";
   persistent __signal_block = "***** ";
   persistent __signal_file  = ">>>>> ";
   persistent __signal_skip  = "----- ";
 
@@ -290,17 +291,17 @@ function [__n, __nmax, __nxfail, __nskip
     disp ([__signal_file, __file]);
   endif
 
   ## Assume all tests will pass.
   __all_success = true;
 
   ## Process each block separately, initially with no shared variables.
   __tests = __successes = 0;
-  __xfail = __xskip = 0;
+  __xfail = __xskip = __xrtskip = 0;
   __shared = " ";
   __shared_r = " ";
   __clearfcn = "";
   for __i = 1:numel (__blockidx)-1
 
     ## FIXME: Should other global settings be similarly saved and restored?
     orig_wstate = warning ();
     unwind_protect
@@ -520,60 +521,84 @@ function [__n, __nmax, __nxfail, __nskip
               __success = true;
             endif
           end_try_catch
           clear __test__;
         endif
         ## Code already processed.
         __code = "";
 
-### TESTIF
+### TESTIF HAVE_FEATURE
+### TESTIF HAVE_FEATURE ; RUNTIME_CONDITION
+### TESTIF <bug-id> HAVE_FEATURE
+### TESTIF <bug-id> HAVE_FEATURE ; RUNTIME_CONDITION
+###
+###   HAVE_FEATURE is a comma- or whitespace separated list of
+###   macro names that may be checked with __have_feature__.
+###
+###   RUNTIME_CONDITION is an expression to evaluate to check
+###   whether some condition is met when the test is executed.  For
+###   example, have_window_system.
 
       elseif (strcmp (__type, "testif"))
         __e = regexp (__code, '.$', 'lineanchors', 'once');
         ## Strip any comment and bug-id from testif line before
         ## looking for features
         __feat_line = strtok (__code(1:__e), '#%');
         __idx1 = index (__feat_line, "<");
         if (__idx1)
           __tmp = __feat_line(__idx1+1:end);
           __idx2 = index (__tmp, ">");
           if (__idx2)
             __bug_id = __tmp(1:__idx2-1);
             __feat_line = __feat_line(1:__idx1-1);
           endif
         endif
+        __idx = index (__feat_line, ";");
+        if (__idx)
+          __runtime_feat_test = __feat_line(__idx+1:end);
+          __feat_line = __feat_line(1:__idx-1);
+        else          
+          __runtime_feat_test = "";
+        endif
         __feat = regexp (__feat_line, '\w+', 'match');
         __feat = strrep (__feat, "HAVE_", "");
         __have_feat = __have_feature__ (__feat);
         if (__have_feat)
-          if (isempty (__bug_id))
-            __istest = true;
+          if (isempty (__runtime_feat_test) || eval (__runtime_feat_test))
+            if (isempty (__bug_id))
+              __istest = true;
+            else
+              __isxtest = true;
+            endif
+            __code = __code(__e + 1 : end);
           else
-            __isxtest = true;
+            __xrtskip += 1;
+            __code = ""; # Skip the code.
+            __msg = [__signal_skip "skipped test (runtime test)\n"];
           endif
-          __code = __code(__e + 1 : end);
         else
           __xskip += 1;
           __code = ""; # Skip the code.
-          __msg = [__signal_skip "skipped test\n"];
+          __msg = [__signal_skip "skipped test (missing feature)\n"];
         endif
 
 ### TEST
+### TEST <bug-id>
 
       elseif (strcmp (__type, "test"))
         [__bug_id, __code] = getbugid (__code);
         if (! isempty (__bug_id))
           __isxtest = true;
         else
           __istest = true;
         endif
         ## Code will be evaluated below.
 
-### XTEST
+### XTEST <bug-id>
 
       elseif (strcmp (__type, "xtest"))
         __isxtest = true;
         [__bug_id, __code] = getbugid (__code);
         ## Code will be evaluated below.
 
 ### Comment block.
 
@@ -670,42 +695,47 @@ function [__n, __nmax, __nxfail, __nskip
       warning (orig_wstate);
     end_unwind_protect
   endfor
 
   ## Clear any functions created during test run
   eval (__clearfcn, "");
 
   if (nargout == 0)
-    if (__tests || __xfail || __xskip)
+    if (__tests || __xfail || __xskip || __xrtskip)
       if (__xfail)
         printf ("PASSES %d out of %d test%s (%d known failure%s)\n",
                 __successes, __tests, ifelse (__tests > 1, "s", ""),
                 __xfail, ifelse (__xfail > 1, "s", ""));
       else
         printf ("PASSES %d out of %d test%s\n", __successes, __tests,
                ifelse (__tests > 1, "s", ""));
       endif
       if (__xskip)
         printf ("Skipped %d test%s due to missing features\n", __xskip,
                 ifelse (__xskip > 1, "s", ""));
       endif
+      if (__xrtskip)
+        printf ("Skipped %d test%s due to runtime tests\n", __xrtskip,
+                ifelse (__xrtskip > 1, "s", ""));
+      endif
     else
       printf ("%s%s has no tests available\n", __signal_empty, __file);
     endif
   elseif (__grabdemo)
     __n    = __demo_code;
     __nmax = __demo_idx;
   elseif (nargout == 1)
     __n = __all_success;
   else
     __n      = __successes;
     __nmax   = __tests;
     __nxfail = __xfail;
     __nskip  = __xskip;
+    __nrtskip = __xrtskip;
   endif
 
 endfunction
 
 
 ## Create structure with fieldnames the name of the input variables.
 function s = var2struct (varargin)
   for i = 1:nargin
