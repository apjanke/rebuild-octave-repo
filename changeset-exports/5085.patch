# HG changeset patch
# User jwe
# Date 1100834792 0
#      Fri Nov 19 03:26:32 2004 +0000
# Node ID 6861a84b1d47cc4d958561370e582cd2652cef2c
# Parent  252e8c2a492b3b321fb9969a77888b5f7f05da1d
[project @ 2004-11-19 03:26:32 by jwe]

diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,10 +1,24 @@
+2004-11-18  John W. Eaton  <jwe@octave.org>
+
+	* int32NDArray.cc (pow): Delete instantiation.
+	* int16NDArray.cc (pow): Likewise.
+	* int8NDArray.cc (pow): Likewise.
+	* uint32NDArray.cc (pow): Likewise.
+	* uint16NDArray.cc (pow): Likewise.
+	* uint8NDArray.cc (pow): Likewise.
+
 2004-11-17  John W. Eaton  <jwe@octave.org>
 
+	* kpse.cc (str_llist_float, str_llist_add, kpse_var_expand):
+	Now static.
+	(DB_ENVS, DB_HASH_SIZE, DB_NAME, ALIAS_NAME, ALIAS_HASH_SIZE,
+	DEFAULT_TEXMFDBS): Delete unused macros.
+
 	* Array.cc (Array<T>::index): Call generic N-d indexing function
 	if idx_arg is N-d.
 
 2004-11-09  David Bateman  <dbateman@free.fr>
 
 	* dNDArray.cc (concat): Delete.
 	(NDArray::concat): New methods.
 	* dNDArray.h: Provide decls.
diff --git a/liboctave/int16NDArray.cc b/liboctave/int16NDArray.cc
--- a/liboctave/int16NDArray.cc
+++ b/liboctave/int16NDArray.cc
@@ -30,18 +30,16 @@ Software Foundation, 59 Temple Place - S
 #endif
 
 #include "int16NDArray.h"
 
 #include "intNDArray.cc"
 
 template class intNDArray<octave_int16>;
 
-template octave_int16 pow (const octave_int16& a, const octave_int16& b);
-
 template
 std::ostream&
 operator << (std::ostream& os, const intNDArray<octave_int16>& a);
 
 template
 std::istream&
 operator >> (std::istream& is, intNDArray<octave_int16>& a);
 
diff --git a/liboctave/int32NDArray.cc b/liboctave/int32NDArray.cc
--- a/liboctave/int32NDArray.cc
+++ b/liboctave/int32NDArray.cc
@@ -30,18 +30,16 @@ Software Foundation, 59 Temple Place - S
 #endif
 
 #include "int32NDArray.h"
 
 #include "intNDArray.cc"
 
 template class intNDArray<octave_int32>;
 
-template octave_int32 pow (const octave_int32& a, const octave_int32& b);
-
 template
 std::ostream&
 operator << (std::ostream& os, const intNDArray<octave_int32>& a);
 
 template
 std::istream&
 operator >> (std::istream& is, intNDArray<octave_int32>& a);
 
diff --git a/liboctave/int8NDArray.cc b/liboctave/int8NDArray.cc
--- a/liboctave/int8NDArray.cc
+++ b/liboctave/int8NDArray.cc
@@ -30,18 +30,16 @@ Software Foundation, 59 Temple Place - S
 #endif
 
 #include "int8NDArray.h"
 
 #include "intNDArray.cc"
 
 template class intNDArray<octave_int8>;
 
-template octave_int8 pow (const octave_int8& a, const octave_int8& b);
-
 template
 std::ostream&
 operator << (std::ostream& os, const intNDArray<octave_int8>& a);
 
 template
 std::istream&
 operator >> (std::istream& is, intNDArray<octave_int8>& a);
 
diff --git a/liboctave/kpse.cc b/liboctave/kpse.cc
--- a/liboctave/kpse.cc
+++ b/liboctave/kpse.cc
@@ -1647,22 +1647,16 @@ brace_gobbler (const std::string& text, 
       else if (c == '}' && level)
 	level--;
     }
 
   indx = i;
   return c;
 }
 
-/* An external database to avoid filesystem lookups.  */
-
-#ifndef DEFAULT_TEXMFDBS
-#define DEFAULT_TEXMFDBS "/usr/local/share/texmf:/var/tmp/texfonts"
-#endif
-
 /* For each file format, we record the following information.  The main
    thing that is not part of this structure is the environment variable
    lists. They are used directly in tex-file.c. We could incorporate
    them here, but it would complicate the code a bit. We could also do
    it via variable expansion, but not now, maybe not ever:
    ${PKFONTS-${TEXFONTS-/usr/local/lib/texmf/fonts//}}.  */
 
 struct kpse_format_info_type
@@ -1677,51 +1671,33 @@ struct kpse_format_info_type
   std::string default_path;  /* If all else fails.  */
   string_vector suffix;	     /* For kpse_find_file to check for/append.  */
 };
 
 /* The sole variable of that type, indexed by `kpse_file_format_type'.
    Initialized by calls to `kpse_find_file' for `kpse_init_format'.  */
 static kpse_format_info_type kpse_format_info;
 
-#define DB_ENVS "TEXMFDBS"
-
 /* And EXPAND_DEFAULT calls kpse_expand_default on try_path and the
    present info->path.  */
 #define EXPAND_DEFAULT(try_path, source_string) \
   do \
     { \
       if (! try_path.empty ()) \
         { \
           info.raw_path = try_path;	\
           info.path = kpse_expand_default (try_path, info.path); \
           info.path_source = source_string;	\
         } \
     } \
   while (0)
 
 static hash_table_type db; /* The hash table for all the ls-R's.  */
 
-/* SMALL: The old size of the hash table was 7603, with the assumption
-   that a minimal ls-R bas about 3500 entries.  But a typical ls-R will
-   be more like double that size.  */
-#ifndef DB_HASH_SIZE
-#define DB_HASH_SIZE 15991
-#endif
-#ifndef DB_NAME
-#define DB_NAME "ls-R"
-#endif
-
 static hash_table_type alias_db;
-#ifndef ALIAS_NAME
-#define ALIAS_NAME "aliases"
-#endif
-#ifndef ALIAS_HASH_SIZE
-#define ALIAS_HASH_SIZE 1009
-#endif
 
 static string_vector db_dir_list;
 
 /* Return true if FILENAME could be in PATH_ELT, i.e., if the directory
    part of FILENAME matches PATH_ELT.  Have to consider // wildcards, but
    $ and ~ expansion have already been done.  */
 
 static bool
@@ -2443,17 +2419,17 @@ fopen (const char *filename, const char 
 }
 
 #endif
 
 /* Implementation of a linked list of strings.  */
 
 /* Add the new string STR to the end of the list L.  */
 
-void
+static void
 str_llist_add (str_llist_type *l, const std::string& str)
 {
   str_llist_elt_type *e;
   str_llist_elt_type *new_elt = new str_llist_elt_type;
 
   /* The new element will be at the end of the list.  */
   STR_LLIST (*new_elt) = str;
   STR_LLIST_MOVED (*new_elt) = 0;
@@ -2469,17 +2445,17 @@ str_llist_add (str_llist_type *l, const 
     STR_LLIST_NEXT (*e) = new_elt;
 }
 
 /* Move an element towards the top. The idea is that when a file is
    found in a given directory, later files will likely be in that same
    directory, and looking for the file in all the directories in between
    is thus a waste.  */
 
-void
+static void
 str_llist_float (str_llist_type *l, str_llist_elt_type *mover)
 {
   str_llist_elt_type *last_moved, *unmoved;
 
   /* If we've already moved this element, never mind.  */
   if (STR_LLIST_MOVED (*mover))
     return;
 
@@ -2584,17 +2560,17 @@ expand (std::string &expansion, const st
 #endif
 #ifndef IS_VAR_END_DELIMITER
 #define IS_VAR_END_DELIMITER(c) ((c) == '}')
 #endif
 
 /* Maybe we should support some or all of the various shell ${...}
    constructs, especially ${var-value}.  */
 
-std::string
+static std::string
 kpse_var_expand (const std::string& src)
 {
   std::string expansion;
 
   size_t src_len = src.length ();
 
   /* Copy everything but variable constructs.  */
   for (size_t i = 0; i < src_len; i++)
diff --git a/liboctave/uint16NDArray.cc b/liboctave/uint16NDArray.cc
--- a/liboctave/uint16NDArray.cc
+++ b/liboctave/uint16NDArray.cc
@@ -30,18 +30,16 @@ Software Foundation, 59 Temple Place - S
 #endif
 
 #include "uint16NDArray.h"
 
 #include "intNDArray.cc"
 
 template class intNDArray<octave_uint16>;
 
-template octave_uint16 pow (const octave_uint16& a, const octave_uint16& b);
-
 template
 std::ostream&
 operator << (std::ostream& os, const intNDArray<octave_uint16>& a);
 
 template
 std::istream&
 operator >> (std::istream& is, intNDArray<octave_uint16>& a);
 
diff --git a/liboctave/uint32NDArray.cc b/liboctave/uint32NDArray.cc
--- a/liboctave/uint32NDArray.cc
+++ b/liboctave/uint32NDArray.cc
@@ -30,18 +30,16 @@ Software Foundation, 59 Temple Place - S
 #endif
 
 #include "uint32NDArray.h"
 
 #include "intNDArray.cc"
 
 template class intNDArray<octave_uint32>;
 
-template octave_uint32 pow (const octave_uint32& a, const octave_uint32& b);
-
 template
 std::ostream&
 operator << (std::ostream& os, const intNDArray<octave_uint32>& a);
 
 template
 std::istream&
 operator >> (std::istream& is, intNDArray<octave_uint32>& a);
 
diff --git a/liboctave/uint8NDArray.cc b/liboctave/uint8NDArray.cc
--- a/liboctave/uint8NDArray.cc
+++ b/liboctave/uint8NDArray.cc
@@ -30,18 +30,16 @@ Software Foundation, 59 Temple Place - S
 #endif
 
 #include "uint8NDArray.h"
 
 #include "intNDArray.cc"
 
 template class intNDArray<octave_uint8>;
 
-template octave_uint8 pow (const octave_uint8& a, const octave_uint8& b);
-
 template
 std::ostream&
 operator << (std::ostream& os, const intNDArray<octave_uint8>& a);
 
 template
 std::istream&
 operator >> (std::istream& is, intNDArray<octave_uint8>& a);
 
