# HG changeset patch
# User Lachlan Andrew <lachlanbis@gmail.com>
# Date 1468641814 -36000
#      Sat Jul 16 14:03:34 2016 +1000
# Node ID 289409b2992d05feeee9498d59275be0cea02b19
# Parent  ff54e7882863ab891c4a947b257c2c80e44bdb9f
Allow  dir  to accept [ and ] in arguments. (bug #47950)

* liboctave/util/oct-glob.{cc,h} (windows_glob): New function

* libinterp/corefcn/dirfns.cc (__wglob__): New wrapper for the above

* dir.m: Call __wglob__ instead of glob.

diff --git a/libinterp/corefcn/dirfns.cc b/libinterp/corefcn/dirfns.cc
--- a/libinterp/corefcn/dirfns.cc
+++ b/libinterp/corefcn/dirfns.cc
@@ -32,16 +32,17 @@ along with Octave; see the file COPYING.
 
 #include <sstream>
 #include <string>
 
 #include "file-ops.h"
 #include "file-stat.h"
 #include "glob-match.h"
 #include "oct-env.h"
+#include "oct-glob.h"
 #include "pathsearch.h"
 #include "str-vec.h"
 
 #include "Cell.h"
 #include "defun.h"
 #include "dir-ops.h"
 #include "dirfns.h"
 #include "error.h"
@@ -481,16 +482,83 @@ glob ("file[12]")
 
   string_vector pat = args(0).xstring_vector_value ("glob: PATTERN must be a string");
 
   glob_match pattern (octave::sys::file_ops::tilde_expand (pat));
 
   return ovl (Cell (pattern.glob ()));
 }
 
+
+DEFUN (__wglob__, args, ,
+       doc: /* -*- texinfo -*-
+@deftypefn {} {} __wglob__ (@var{pattern})
+Windows-like glob for dir.
+
+Given an array of pattern strings (as a char array or a cell array) in
+@var{pattern}, return a cell array of filenames that match any of
+them, or an empty cell array if no patterns match.
+
+The pattern strings are interpreted as filename globbing patterns
+(roughly as they are used by Windows dir).
+
+Within a pattern
+
+@table @code
+@item *
+matches any string, including the null string,
+
+@item ?
+matches any single character, and
+
+@item *.*
+matches any string, even if no . is present.
+@end table
+
+Tilde expansion is performed on each of the patterns before looking for
+matching filenames.  For example:
+
+@example
+ls
+   @result{}
+      file1  file2  file3  myfile1 myfile1b
+glob ("*file1")
+   @result{}
+      @{
+        [1,1] = file1
+        [2,1] = myfile1
+      @}
+glob ("myfile?")
+   @result{}
+      @{
+        [1,1] = myfile1
+      @}
+glob ("*.*")
+   @result{}
+      @{
+        [1,1] = file1
+        [2,1] = file2
+        [3,1] = file3
+        [4,1] = myfile1
+        [5,1] = myfile1b
+      @}
+@end example
+@seealso{glob, dir}
+@end deftypefn */)
+{
+  if (args.length () == 0)
+    return ovl ();
+
+  string_vector pat = args(0).string_vector_value ();
+
+  string_vector pattern (octave::sys::file_ops::tilde_expand (pat));
+
+  return ovl (Cell (octave::sys::windows_glob (pattern)));
+}
+
 /*
 %!test
 %! tmpdir = tempname;
 %! filename = {"file1", "file2", "file3", "myfile1", "myfile1b"};
 %! if (mkdir (tmpdir))
 %!   cwd = pwd;
 %!   cd (tmpdir);
 %!   if (strcmp (canonicalize_file_name (pwd), canonicalize_file_name (tmpdir)))
diff --git a/liboctave/util/oct-glob.cc b/liboctave/util/oct-glob.cc
--- a/liboctave/util/oct-glob.cc
+++ b/liboctave/util/oct-glob.cc
@@ -134,10 +134,115 @@ namespace octave
 
                   octave_globfree_wrapper (glob_info);
                 }
             }
         }
 
       return retval.sort ();
     }
+
+    // Glob like Windows "dir".  Treat only * and ? as wildcards,
+    // and "*.*" matches filenames even if they do not contain ".".
+    string_vector
+    windows_glob (const string_vector& pat)
+    {
+      string_vector retval;
+
+      int npat = pat.numel ();
+
+      int k = 0;
+
+      octave::unwind_protect frame;
+
+      void *glob_info = octave_create_glob_info_struct ();
+
+      frame.add_fcn (octave_destroy_glob_info_struct, glob_info);
+
+      for (int i = 0; i < npat; i++)
+        {
+          std::string xpat = pat(i);
+
+          if (! xpat.empty ())
+            {
+              std::string escaped;
+              escaped.reserve (xpat.length ());
+
+              for (size_t j = 0; j < xpat.length (); j++)
+                {
+#if (defined (OCTAVE_HAVE_WINDOWS_FILESYSTEM) \
+     && ! defined (OCTAVE_HAVE_POSIX_FILESYSTEM))
+                  if (xpat[j] == '\\')
+                      escaped += '/';
+                  else
+#endif
+                  {
+                    if (xpat[j] == ']' || xpat[j] == '[')
+                      escaped += '\\';
+
+                    escaped += xpat[j];
+                  }
+                }
+
+              // Replace trailing "*.*" by "*".
+              int len = escaped.length ();
+              if (len >= 3 && escaped.substr (len - 3) == "*.*")
+                escaped = escaped.substr (0, len - 2);
+
+              int err = octave_glob_wrapper (escaped.c_str (),
+                                             octave_glob_nosort_wrapper (),
+                                             glob_info);
+
+              if (! err)
+                {
+                  int n = octave_glob_num_matches (glob_info);
+
+                  const char * const *matches
+                    = octave_glob_match_list (glob_info);
+
+                  // FIXME: we shouldn't have to check to see if
+                  // a single match exists, but it seems that glob() won't
+                  // check for us unless the pattern contains globbing
+                  // characters.  Hmm.
+
+                  if (n > 1
+                      || (n == 1
+                          && single_match_exists (std::string (matches[0]))))
+                    {
+                      retval.resize (k + n);
+
+                      for (int j = 0; j < n; j++)
+                        {
+                          std::string tmp = matches[j];
+
+                          std::string unescaped;
+                          unescaped.reserve (tmp.length ());
+
+                          for (size_t m = 0; m < tmp.length (); m++)
+                            {
+#if (defined (OCTAVE_HAVE_WINDOWS_FILESYSTEM) \
+     && ! defined (OCTAVE_HAVE_POSIX_FILESYSTEM))
+                              if (tmp[m] == '/')
+                                  unescaped += '\\';
+                              else
+#endif
+                              {
+                                if (tmp[m] == '\\'
+                                    && ++m == tmp.length ())
+                                  break;
+
+                                unescaped += tmp[m];
+                              }
+                            }
+
+                          retval[k++] = unescaped;
+                        }
+                    }
+
+                  octave_globfree_wrapper (glob_info);
+                }
+            }
+        }
+
+      return retval.sort ();
+    }
   }
 }
diff --git a/liboctave/util/oct-glob.h b/liboctave/util/oct-glob.h
--- a/liboctave/util/oct-glob.h
+++ b/liboctave/util/oct-glob.h
@@ -32,16 +32,19 @@ namespace octave
   namespace sys
   {
     extern bool
     fnmatch (const string_vector& pat, const std::string& str,
              int fnmatch_flags);
 
     extern string_vector
     glob (const string_vector&);
+
+    extern string_vector
+    windows_glob (const string_vector&);
   }
 }
 
 #if defined (OCTAVE_USE_DEPRECATED_FUNCTIONS)
 
 OCTAVE_DEPRECATED ("use 'octave::sys::fnmatch' instead")
 const auto octave_fnmatch = octave::sys::fnmatch;
 
diff --git a/scripts/miscellaneous/dir.m b/scripts/miscellaneous/dir.m
--- a/scripts/miscellaneous/dir.m
+++ b/scripts/miscellaneous/dir.m
@@ -86,17 +86,17 @@ function retval = dir (directory)
 
   if (strcmp (directory, "*"))
     directory = ".";
   endif
   if (strcmp (directory, "."))
     flst = {"."};
     nf = 1;
   else
-    flst = glob (directory);
+    flst = __wglob__ (directory);
     nf = numel (flst);
   endif
 
   ## Determine the file list for the case where a single directory is specified.
   if (nf == 1)
     fn = flst{1};
     [st, err, msg] = stat (fn);
     if (err < 0)
