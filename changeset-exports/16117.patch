# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1361897279 18000
#      Tue Feb 26 11:47:59 2013 -0500
# Node ID 771186909285aa8d216ab1a6b2e6e72bb3c2c026
# Parent  67f71e2a619033632fd2afd5c16497d724a9d80e
maint: move class definition in lex.ll

* lex.ll: Move flex_stream_reader definition just before
lexical_feedback member functions.

diff --git a/libinterp/parse-tree/lex.ll b/libinterp/parse-tree/lex.ll
--- a/libinterp/parse-tree/lex.ll
+++ b/libinterp/parse-tree/lex.ll
@@ -1228,40 +1228,16 @@ restore_input_buffer (void *buf)
 // Delete a buffer (for unwind-prot).
 
 void
 delete_input_buffer (void *buf)
 {
   delete_buffer (static_cast<YY_BUFFER_STATE> (buf));
 }
 
-class
-flex_stream_reader : public stream_reader
-{
-public:
-  flex_stream_reader (lexical_feedback *l, char *buf_arg)
-    : lexer (l), stream_reader (), buf (buf_arg)
-  { }
-
-  int getc (void) { return lexer->text_yyinput (); }
-  int ungetc (int c) { lexer->xunput (c, buf); return 0; }
-
-private:
-
-  // No copying!
-
-  flex_stream_reader (const flex_stream_reader&);
-
-  flex_stream_reader& operator = (const flex_stream_reader&);
-
-  lexical_feedback *lexer;
-
-  char *buf;
-};
-
 // Return 1 if the given character matches any character in the given
 // string.
 
 static bool
 match_any (char c, const char *s)
 {
   char tmp;
   while ((tmp = *s++) != '\0')
@@ -1647,16 +1623,40 @@ Undocumented internal function.\n\
   octave_value retval;
 
   retval = set_internal_variable (lexer_debug_flag, args, nargout,
                                   "__lexer_debug_flag__");
 
   return retval;
 }
 
+class
+flex_stream_reader : public stream_reader
+{
+public:
+  flex_stream_reader (lexical_feedback *l, char *buf_arg)
+    : stream_reader (), lexer (l), buf (buf_arg)
+  { }
+
+  int getc (void) { return lexer->text_yyinput (); }
+  int ungetc (int c) { lexer->xunput (c, buf); return 0; }
+
+private:
+
+  // No copying!
+
+  flex_stream_reader (const flex_stream_reader&);
+
+  flex_stream_reader& operator = (const flex_stream_reader&);
+
+  lexical_feedback *lexer;
+
+  char *buf;
+};
+
 lexical_feedback::~lexical_feedback (void)
 {
   // Clear out the stack of token info used to track line and
   // column numbers.
 
   while (! token_stack.empty ())
     {
       delete token_stack.top ();
