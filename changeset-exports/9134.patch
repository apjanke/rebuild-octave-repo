# HG changeset patch
# User Rik <rdrider0-list@yahoo.com>
# Date 1240011514 25200
#      Fri Apr 17 16:38:34 2009 -0700
# Node ID a3739e27b017ee79851e1db649a0985bb485eadd
# Parent  c0cef14367889ef17f838c8107c862ba05a53bb8
Update section 2.4 of basics.txi

diff --git a/doc/ChangeLog b/doc/ChangeLog
--- a/doc/ChangeLog
+++ b/doc/ChangeLog
@@ -1,8 +1,12 @@
+2009-04-17  Rik  <rdrider0-list@yahoo.com>
+
+	* interpreter/basics.txi: Update help text for sections 2.4 of basics.txi 
+
 2009-04-17  Rik  <rdrider0-list@yahoo.com>
 
 	* interpreter/basics.txi: Update help text for sections 2.2 
 	and 2.3 of basics.txi
 
 2009-04-17  Rik  <rdrider0-list@yahoo.com>
 
 	* interpreter/basics.txi: Update help strings for command line options
diff --git a/doc/interpreter/basics.txi b/doc/interpreter/basics.txi
--- a/doc/interpreter/basics.txi
+++ b/doc/interpreter/basics.txi
@@ -386,36 +386,40 @@ found.
 
 @DOCSTRING(suppress_verbose_help_message)
 
 @node Command Line Editing
 @section Command Line Editing
 @cindex command-line editing
 @cindex editing the command line
 
-Octave uses the GNU readline library to provide an extensive set of
+Octave uses the GNU Readline library to provide an extensive set of
 command-line editing and history features.  Only the most common
-features are described in this manual.  Please see The GNU Readline
-Library manual for more information.
+features are described in this manual.  In addition, all of the editing
+functions can be bound to different key strokes at the user's discretion.  
+This manual assumes no changes from the default Emacs bindings.  See the GNU 
+Readline Library manual for more information on customizing Readline and 
+for a complete feature list.
 
 To insert printing characters (letters, digits, symbols, etc.), simply
 type the character.  Octave will insert the character at the cursor and
 advance the cursor forward.
 
 Many of the command-line editing functions operate using control
 characters.  For example, the character @kbd{Control-a} moves the cursor
 to the beginning of the line.  To type @kbd{C-a}, hold down @key{CTRL}
 and then press @key{a}.  In the following sections, control characters
 such as @kbd{Control-a} are written as @kbd{C-a}.
 
-Another set of command-line editing functions use Meta characters.  On
-some terminals, you type @kbd{M-u} by holding down @key{META} and
-pressing @key{u}.  If your terminal does not have a @key{META} key, you
+Another set of command-line editing functions use Meta characters.  To 
+type @kbd{M-u}, hold down the @key{META} key and press @key{u}.  Depending
+on the keyboard, the @key{META} key may be labeled @key{ALT} or
+even @key{WINDOWS}.  If your terminal does not have a @key{META} key, you
 can still type Meta characters using two-character sequences starting
-with @kbd{ESC}.  Thus, to enter @kbd{M-u}, you could type
+with @kbd{ESC}.  Thus, to enter @kbd{M-u}, you would type
 @key{ESC} @key{u}.  The @kbd{ESC} character sequences are also allowed on
 terminals with real Meta keys.  In the following sections, Meta
 characters such as @kbd{Meta-u} are written as @kbd{M-u}.
 
 
 @menu
 * Cursor Motion::               
 * Killing and Yanking::         
@@ -457,41 +461,38 @@ Move to the start of the line.
 @item C-e
 Move to the end of the line.
 
 @item C-l
 Clear the screen, reprinting the current line at the top.
 
 @item C-_
 @itemx C-/
-Undo the last thing that you did.  You can undo all the way back to an
-empty line.
+Undo the last action.  You can undo all the way back to an empty line.
 
 @item M-r
 Undo all changes made to this line.  This is like typing the `undo'
 command enough times to get back to the beginning.
 @end table
 
 The above table describes the most basic possible keystrokes that you need
 in order to do editing of the input line.  On most terminals, you can
-also use the arrow keys in place of @kbd{C-f} and @kbd{C-b} to move
-forward and backward.
+also use the left and right arrow keys in place of @kbd{C-f} and @kbd{C-b}
+to move forward and backward.
 
 Notice how @kbd{C-f} moves forward a character, while @kbd{M-f} moves
 forward a word.  It is a loose convention that control keystrokes
 operate on characters while meta keystrokes operate on words.
 
 @cindex clearing the screen
 
 The function @code{clc} will allow you to clear the screen from within
 Octave programs.
 
-@ifinfo
 @DOCSTRING(clc)
-@end ifinfo
 
 @node Killing and Yanking
 @subsection Killing and Yanking
 
 @dfn{Killing} text means to delete the text from the line, but to save
 it away for later use, usually by @dfn{yanking} it back into the line.
 If the description for a command says that it `kills' text, then you can
 be sure that you can get the text back in a different (or the same)
@@ -633,50 +634,57 @@ Move to the end of the input history, i.
 Search backward starting at the current line and moving `up' through
 the history as necessary.  This is an incremental search.
 
 @item C-s
 Search forward starting at the current line and moving `down' through
 the history as necessary.
 @end table
 
-On most terminals, you can also use the arrow keys in place of @kbd{C-p}
-and @kbd{C-n} to move through the history list.
+On most terminals, you can also use the up and down arrow keys in place 
+of @kbd{C-p} and @kbd{C-n} to move through the history list.
 
 In addition to the keyboard commands for moving through the history
 list, Octave provides three functions for viewing, editing, and
 re-running chunks of commands from the history list.
 
 @DOCSTRING(history)
 
 @DOCSTRING(edit_history)
 
 @DOCSTRING(run_history)
 
-Octave also allows you customize the details of how and where the history
+@noindent
+Octave also allows you customize the details of when, where, and how history
 is saved.
 
+@DOCSTRING(saving_history)
+
 @DOCSTRING(history_file)
 
 @DOCSTRING(history_size)
 
-@DOCSTRING(saving_history)
-
 @DOCSTRING(history_timestamp_format_string)
 
 @DOCSTRING(EDITOR)
 
 @node Customizing readline
 @subsection Customizing @code{readline}
+@cindex @file{~/.inputrc}
+@cindex customizing @code{readline}
+@cindex @code{readline} customization
 
-As mentioned earlier Octave uses the GNU readline library for
-command-line editing and history features.  It is possible to
-customize how readline works through a configuration file.
+Octave uses the GNU Readline library for command-line editing and
+history features.  Readline is very flexible and can be modified through
+a configuration file of commands (See the GNU Readline library for the
+exact command syntax).  The default configuration file is normally
+@file{~/.inputrc}.
 
-@c FIXME -- need a brief description of the ~/.inputrc file here.
+Octave provides two commands for initializing Readline and thereby changing
+the command line behavior.
 
 @DOCSTRING(read_readline_init_file)
 
 @DOCSTRING(re_read_readline_init_file)
 
 @node Customizing the Prompt
 @subsection Customizing the Prompt
 @cindex prompt customization
diff --git a/src/defaults.cc b/src/defaults.cc
--- a/src/defaults.cc
+++ b/src/defaults.cc
@@ -398,19 +398,19 @@ install_defaults (void)
   set_site_defaults_file ();
 }
 
 DEFUN (EDITOR, args, nargout,
   "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {@var{val} =} EDITOR ()\n\
 @deftypefnx {Built-in Function} {@var{old_val} =} EDITOR (@var{new_val})\n\
 Query or set the internal variable that specifies the editor to\n\
-use with the @code{edit_history} command.  If the environment\n\
-variable @code{EDITOR} is set when Octave starts, its\n\
-value is used as the default.  Otherwise, @code{EDITOR} is set to\n\
+use with the @code{edit_history} command.  The default value is taken from\n\
+the environment variable @w{@code{EDITOR}} when Octave starts.  If the\n\ 
+enironment variable is not initialized, @w{@code{EDITOR}} will be set to\n\
 @code{\"emacs\"}.\n\
 @seealso{edit_history}\n\
 @end deftypefn")
 {
   return SET_NONEMPTY_INTERNAL_STRING_VARIABLE (EDITOR);
 }
 
 DEFUN (EXEC_PATH, args, nargout,
diff --git a/src/input.cc b/src/input.cc
--- a/src/input.cc
+++ b/src/input.cc
@@ -976,18 +976,17 @@ Enable echoing of commands as they are e
 functions.\n\
 \n\
 @item off all\n\
 Disable echoing of commands as they are executed in script files and\n\
 functions.\n\
 @end table\n\
 \n\
 @noindent\n\
-If invoked without any arguments, @code{echo} toggles the current echo\n\
-state.\n\
+With no arguments, @code{echo} toggles the current echo state.\n\
 @end deffn")
 {
   octave_value_list retval;
 
   int argc = args.length () + 1;
 
   string_vector argv = args.make_argv ("echo");
 
@@ -1290,21 +1289,20 @@ string is @code{\"> \"}.\n\
   return SET_INTERNAL_VARIABLE (PS2);
 }
 
 DEFUN (PS4, args, nargout,
   "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {@var{val} =} PS4 ()\n\
 @deftypefnx {Built-in Function} {@var{old_val} =} PS4 (@var{new_val})\n\
 Query or set the character string used to prefix output produced\n\
-when echoing commands when @code{echo_executing_commands} is enabled.\n\
+when echoing commands is enabled.\n\
 The default value is @code{\"+ \"}.\n\
-@xref{Invoking Octave from the Command Line}, for a description of\n\
-@code{--echo-commands}.\n\
-@seealso{echo_executing_commands, PS1, PS2}\n\
+@xref{Diary and Echo Commands}, for a description of echoing commands.\n\
+@seealso{echo, echo_executing_commands, PS1, PS2}\n\
 @end deftypefn")
 {
   return SET_INTERNAL_VARIABLE (PS4);
 }
 
 DEFUN (completion_append_char, args, nargout,
   "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {@var{val} =} completion_append_char ()\n\
@@ -1333,18 +1331,18 @@ Echo commands from functions.\n\
 \n\
 @item 4\n\
 Echo commands read from command line.\n\
 @end table\n\
 \n\
 More than one state can be active at once.  For example, a value of 3 is\n\
 equivalent to the command @kbd{echo on all}.\n\
 \n\
-The value of @code{echo_executing_commands} is set by the @kbd{echo}\n\
-command and the command line option @code{--echo-input}.\n\
+The value of @code{echo_executing_commands} may be set by the @kbd{echo}\n\
+command or the command line option @code{--echo-commands}.\n\
 @end deftypefn")
 {
   return SET_INTERNAL_VARIABLE (echo_executing_commands);
 }
 
 DEFUN (__request_drawnow__, args, ,
   "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} __request_drawnow__ ()\n\
diff --git a/src/oct-hist.cc b/src/oct-hist.cc
--- a/src/oct-hist.cc
+++ b/src/oct-hist.cc
@@ -548,17 +548,17 @@ octave_history_write_timestamp (void)
   if (! timestamp.empty ())
     command_history::add (timestamp);
 }
 
 DEFUN (edit_history, args, ,
   "-*- texinfo -*-\n\
 @deffn {Command} edit_history [@var{first}] [@var{last}]\n\
 If invoked with no arguments, @code{edit_history} allows you to edit the\n\
-history list using the editor named by the variable @code{EDITOR}.  The\n\
+history list using the editor named by the variable @w{@code{EDITOR}}.  The\n\
 commands to be edited are first copied to a temporary file.  When you\n\
 exit the editor, Octave executes the commands that remain in the file.\n\
 It is often more convenient to use @code{edit_history} to define functions \n\
 rather than attempting to enter them directly on the command line.\n\
 By default, the block of commands is executed as soon as you exit the\n\
 editor.  To avoid executing any commands, simply delete all the lines\n\
 from the buffer before exiting the editor.\n\
 \n\
@@ -666,17 +666,17 @@ and the commands are simply executed as 
 }
 
 DEFUN (history_size, args, nargout,
   "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {@var{val} =} history_size ()\n\
 @deftypefnx {Built-in Function} {@var{old_val} =} history_size (@var{new_val})\n\
 Query or set the internal variable that specifies how many entries\n\
 to store in the history file.  The default value is @code{1024},\n\
-but may be overridden by the environment variable @code{OCTAVE_HISTSIZE}.\n\
+but may be overridden by the environment variable @w{@code{OCTAVE_HISTSIZE}}.\n\
 @seealso{history_file, history_timestamp_format_string, saving_history}\n\
 @end deftypefn")
 {
   int saved_history_size = Vhistory_size;
 
   octave_value retval
     = SET_INTERNAL_VARIABLE_WITH_LIMITS (history_size, -1, INT_MAX);
 
@@ -687,18 +687,18 @@ but may be overridden by the environment
 }
 
 DEFUN (history_file, args, nargout,
   "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {@var{val} =} history_file ()\n\
 @deftypefnx {Built-in Function} {@var{old_val} =} history_file (@var{new_val})\n\
 Query or set the internal variable that specifies the name of the\n\
 file used to store command history.  The default value is\n\
-@code{\"~/.octave_hist\"}, but may be overridden by the environment\n\
-variable @code{OCTAVE_HISTFILE}.\n\
+@file{~/.octave_hist}, but may be overridden by the environment\n\
+variable @w{@code{OCTAVE_HISTFILE}}.\n\
 @seealso{history_size, saving_history, history_timestamp_format_string}\n\
 @end deftypefn")
 {
   std::string saved_history_file = Vhistory_file;
 
   octave_value retval = SET_INTERNAL_VARIABLE (history_file);
 
   if (Vhistory_file != saved_history_file)
diff --git a/src/pager.cc b/src/pager.cc
--- a/src/pager.cc
+++ b/src/pager.cc
@@ -417,32 +417,32 @@ open_diary_file (void)
 
   if (! external_diary_file)
     error ("diary: can't open diary file `%s'", diary_file.c_str ());
 }
 
 DEFUN (diary, args, ,
   "-*- texinfo -*-\n\
 @deffn {Command} diary options\n\
-Create a list of all commands @emph{and} the output they produce, mixed\n\
+Record a list of all commands @emph{and} the output they produce, mixed\n\
 together just as you see them on your terminal.  Valid options are:\n\
 \n\
 @table @code\n\
 @item on\n\
 Start recording your session in a file called @file{diary} in your\n\
 current working directory.\n\
 \n\
 @item off\n\
 Stop recording your session in the diary file.\n\
 \n\
 @item @var{file}\n\
 Record your session in the file named @var{file}.\n\
 @end table\n\
 \n\
-Without any arguments, @code{diary} toggles the current diary state.\n\
+With no arguments, @code{diary} toggles the current diary state.\n\
 @end deffn")
 {
   octave_value_list retval;
 
   int argc = args.length () + 1;
 
   string_vector argv = args.make_argv ("diary");
 
