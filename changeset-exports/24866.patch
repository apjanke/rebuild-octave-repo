# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1520903173 14400
#      Mon Mar 12 21:06:13 2018 -0400
# Node ID 441b27c0fd5e9c4c736dacec4b667870e0f61000
# Parent  5f7b9ee5b878e48a7a00220688cdd30209bfaefb
use C++11 features to eliminate some macros in oct-rand.cc

* oct-rand.cc (MAKE_RAND): Delete macro.
(octave_rand::fill): Use std::generate_n, std::fill_n, and C++11
lambda expressions to replace MAKE_RAND and RAND_FUNC macros.

* liboctave/external/ranlib/wrap.f: Provide wrappers with REAL args.
* lo-ranlib-proto.h: Provide decls for them.

diff --git a/liboctave/external/ranlib/wrap.f b/liboctave/external/ranlib/wrap.f
--- a/liboctave/external/ranlib/wrap.f
+++ b/liboctave/external/ranlib/wrap.f
@@ -28,8 +28,43 @@
       end
       subroutine dignpoi (mu, result)
       double precision mu, result
       integer*4 ignpoi
       external ignpoi
       result = ignpoi (real (mu))
       return
       end
+      subroutine fgennor (av, sd, result)
+      real av, sd, result
+      real gennor
+      external gennor
+      result = gennor (av, sd)
+      return
+      end
+      subroutine fgenunf (low, high, result)
+      real low, high, result
+      real genunf
+      external genunf
+      result = genunf (low, high)
+      return
+      end
+      subroutine fgenexp (av, result)
+      real av, result
+      real genexp
+      external genexp
+      result = genexp (av)
+      return
+      end
+      subroutine fgengam (a, r, result)
+      real a, r, result
+      real gengam
+      external gengam
+      result = gengam (a, r)
+      return
+      end
+      subroutine fignpoi (mu, result)
+      real mu, result
+      integer*4 ignpoi
+      external ignpoi
+      result = ignpoi (mu)
+      return
+      end
diff --git a/liboctave/numeric/lo-ranlib-proto.h b/liboctave/numeric/lo-ranlib-proto.h
--- a/liboctave/numeric/lo-ranlib-proto.h
+++ b/liboctave/numeric/lo-ranlib-proto.h
@@ -40,16 +40,31 @@ extern "C"
 
   F77_RET_T
   F77_FUNC (dgenunf, DGENUNF) (const F77_DBLE&, const F77_DBLE&, F77_DBLE&);
 
   F77_RET_T
   F77_FUNC (dignpoi, DIGNPOI) (const F77_DBLE&, F77_DBLE&);
 
   F77_RET_T
+  F77_FUNC (fgenexp, FGENEXP) (const F77_REAL&, F77_REAL&);
+
+  F77_RET_T
+  F77_FUNC (fgengam, FGENGAM) (const F77_REAL&, const F77_REAL&, F77_REAL&);
+
+  F77_RET_T
+  F77_FUNC (fgennor, FGENNOR) (const F77_REAL&, const F77_REAL&, F77_REAL&);
+
+  F77_RET_T
+  F77_FUNC (fgenunf, FGENUNF) (const F77_REAL&, const F77_REAL&, F77_REAL&);
+
+  F77_RET_T
+  F77_FUNC (fignpoi, FIGNPOI) (const F77_REAL&, F77_REAL&);
+
+  F77_RET_T
   F77_FUNC (getsd, GETSD) (F77_INT4&, F77_INT4&);
 
   F77_RET_T
   F77_FUNC (setall, SETALL) (const F77_INT4&, const F77_INT4&);
 
   F77_RET_T
   F77_FUNC (setcgn, SETCGN) (const F77_INT4&);
 
diff --git a/liboctave/numeric/oct-rand.cc b/liboctave/numeric/oct-rand.cc
--- a/liboctave/numeric/oct-rand.cc
+++ b/liboctave/numeric/oct-rand.cc
@@ -82,16 +82,17 @@ octave_rand::do_seed (void)
 
   octave::mach_info::float_format ff = octave::mach_info::native_float_format ();
 
   switch (ff)
     {
     case octave::mach_info::flt_fmt_ieee_big_endian:
       F77_FUNC (getsd, GETSD) (u.i[1], u.i[0]);
       break;
+
     default:
       F77_FUNC (getsd, GETSD) (u.i[0], u.i[1]);
       break;
     }
 
   return u.d;
 }
 
@@ -123,16 +124,17 @@ octave_rand::do_seed (double s)
   octave::mach_info::float_format ff = octave::mach_info::native_float_format ();
 
   switch (ff)
     {
     case octave::mach_info::flt_fmt_ieee_big_endian:
       i1 = force_to_fit_range (u.i[0], 1, 2147483563);
       i0 = force_to_fit_range (u.i[1], 1, 2147483399);
       break;
+
     default:
       i0 = force_to_fit_range (u.i[0], 1, 2147483563);
       i1 = force_to_fit_range (u.i[1], 1, 2147483399);
       break;
     }
 
   F77_FUNC (setsd, SETSD) (i0, i1);
 }
@@ -386,56 +388,53 @@ octave_rand::do_scalar (double a)
 
 float
 octave_rand::do_float_scalar (float a)
 {
   float retval = 0.0;
 
   if (use_old_generators)
     {
-      double da = a;
-      double dretval = 0.0;
       switch (current_distribution)
         {
         case uniform_dist:
-          F77_FUNC (dgenunf, DGENUNF) (0.0, 1.0, dretval);
+          F77_FUNC (fgenunf, FGENUNF) (0.0f, 1.0f, retval);
           break;
 
         case normal_dist:
-          F77_FUNC (dgennor, DGENNOR) (0.0, 1.0, dretval);
+          F77_FUNC (fgennor, FGENNOR) (0.0f, 1.0f, retval);
           break;
 
         case expon_dist:
-          F77_FUNC (dgenexp, DGENEXP) (1.0, dretval);
+          F77_FUNC (fgenexp, FGENEXP) (1.0f, retval);
           break;
 
         case poisson_dist:
-          if (da < 0.0 || ! octave::math::isfinite (a))
-            dretval = octave::numeric_limits<double>::NaN ();
+          if (a < 0.0f || ! octave::math::isfinite (a))
+            retval = octave::numeric_limits<float>::NaN ();
           else
             {
               // workaround bug in ignpoi, by calling with different Mu
-              F77_FUNC (dignpoi, DIGNPOI) (da + 1, dretval);
-              F77_FUNC (dignpoi, DIGNPOI) (da, dretval);
+              F77_FUNC (fignpoi, FIGNPOI) (a + 1, retval);
+              F77_FUNC (fignpoi, FIGNPOI) (a, retval);
             }
           break;
 
         case gamma_dist:
-          if (da <= 0.0 || ! octave::math::isfinite (a))
-            dretval = octave::numeric_limits<double>::NaN ();
+          if (a <= 0.0f || ! octave::math::isfinite (a))
+            retval = octave::numeric_limits<float>::NaN ();
           else
-            F77_FUNC (dgengam, DGENGAM) (1.0, da, dretval);
+            F77_FUNC (fgengam, FGENGAM) (1.0, a, retval);
           break;
 
         default:
           (*current_liboctave_error_handler)
             ("rand: invalid distribution ID = %d", current_distribution);
           break;
         }
-      retval = dretval;
     }
   else
     {
       switch (current_distribution)
         {
         case uniform_dist:
           retval = oct_float_randu ();
           break;
@@ -646,102 +645,69 @@ octave_rand::switch_to_generator (int di
   if (dist != current_distribution)
     {
       current_distribution = dist;
 
       set_internal_state (rand_states[dist]);
     }
 }
 
-#define MAKE_RAND(len)                                          \
-  do                                                            \
-    {                                                           \
-      double val;                                               \
-      for (volatile octave_idx_type i = 0; i < len; i++)        \
-        {                                                       \
-          octave_quit ();                                       \
-          RAND_FUNC (val);                                      \
-          v[i] = val;                                           \
-        }                                                       \
-    }                                                           \
-  while (0)
-
 void
 octave_rand::fill (octave_idx_type len, double *v, double a)
 {
   if (len < 1)
     return;
 
   switch (current_distribution)
     {
     case uniform_dist:
       if (use_old_generators)
-        {
-#define RAND_FUNC(x) F77_FUNC (dgenunf, DGENUNF) (0.0, 1.0, x)
-          MAKE_RAND (len);
-#undef RAND_FUNC
-        }
+        std::generate_n (v, len, [](void) { double x; F77_FUNC (dgenunf, DGENUNF) (0.0, 1.0, x); return x; });
       else
         oct_fill_randu (len, v);
       break;
 
     case normal_dist:
       if (use_old_generators)
-        {
-#define RAND_FUNC(x) F77_FUNC (dgennor, DGENNOR) (0.0, 1.0, x)
-          MAKE_RAND (len);
-#undef RAND_FUNC
-        }
+        std::generate_n (v, len, [](void) { double x; F77_FUNC (dgennor, DGENNOR) (0.0, 1.0, x); return x; });
       else
         oct_fill_randn (len, v);
       break;
 
     case expon_dist:
       if (use_old_generators)
-        {
-#define RAND_FUNC(x) F77_FUNC (dgenexp, DGENEXP) (1.0, x)
-          MAKE_RAND (len);
-#undef RAND_FUNC
-        }
+        std::generate_n (v, len, [](void) { double x; F77_FUNC (dgenexp, DGENEXP) (1.0, x); return x; });
       else
         oct_fill_rande (len, v);
       break;
 
     case poisson_dist:
       if (use_old_generators)
         {
           if (a < 0.0 || ! octave::math::isfinite (a))
-#define RAND_FUNC(x) x = octave::numeric_limits<double>::NaN ();
-            MAKE_RAND (len);
-#undef RAND_FUNC
+            std::fill_n (v, len, octave::numeric_limits<double>::NaN ());
           else
             {
               // workaround bug in ignpoi, by calling with different Mu
               double tmp;
               F77_FUNC (dignpoi, DIGNPOI) (a + 1, tmp);
-#define RAND_FUNC(x) F77_FUNC (dignpoi, DIGNPOI) (a, x)
-              MAKE_RAND (len);
-#undef RAND_FUNC
+              std::generate_n (v, len, [a](void) { double x; F77_FUNC (dignpoi, DIGNPOI) (a, x); return x; });
             }
         }
       else
         oct_fill_randp (a, len, v);
       break;
 
     case gamma_dist:
       if (use_old_generators)
         {
           if (a <= 0.0 || ! octave::math::isfinite (a))
-#define RAND_FUNC(x) x = octave::numeric_limits<double>::NaN ();
-            MAKE_RAND (len);
-#undef RAND_FUNC
+            std::fill_n (v, len, octave::numeric_limits<double>::NaN ());
           else
-#define RAND_FUNC(x) F77_FUNC (dgengam, DGENGAM) (1.0, a, x)
-            MAKE_RAND (len);
-#undef RAND_FUNC
+            std::generate_n (v, len, [a](void) { double x; F77_FUNC (dgengam, DGENGAM) (1.0, a, x); return x; });
         }
       else
         oct_fill_randg (a, len, v);
       break;
 
     default:
       (*current_liboctave_error_handler)
         ("rand: invalid distribution ID = %d", current_distribution);
@@ -758,81 +724,59 @@ octave_rand::fill (octave_idx_type len, 
 {
   if (len < 1)
     return;
 
   switch (current_distribution)
     {
     case uniform_dist:
       if (use_old_generators)
-        {
-#define RAND_FUNC(x) F77_FUNC (dgenunf, DGENUNF) (0.0, 1.0, x)
-          MAKE_RAND (len);
-#undef RAND_FUNC
-        }
+        std::generate_n (v, len, [](void) { float x; F77_FUNC (fgenunf, FGENUNF) (0.0f, 1.0f, x); return x; });
       else
         oct_fill_float_randu (len, v);
       break;
 
     case normal_dist:
       if (use_old_generators)
-        {
-#define RAND_FUNC(x) F77_FUNC (dgennor, DGENNOR) (0.0, 1.0, x)
-          MAKE_RAND (len);
-#undef RAND_FUNC
-        }
+        std::generate_n (v, len, [](void) { float x; F77_FUNC (fgennor, FGENNOR) (0.0f, 1.0f, x); return x; });
       else
         oct_fill_float_randn (len, v);
       break;
 
     case expon_dist:
       if (use_old_generators)
-        {
-#define RAND_FUNC(x) F77_FUNC (dgenexp, DGENEXP) (1.0, x)
-          MAKE_RAND (len);
-#undef RAND_FUNC
-        }
+        std::generate_n (v, len, [](void) { float x; F77_FUNC (fgenexp, FGENEXP) (1.0f, x); return x; });
       else
         oct_fill_float_rande (len, v);
       break;
 
     case poisson_dist:
       if (use_old_generators)
         {
-          double da = a;
-          if (da < 0.0 || ! octave::math::isfinite (a))
-#define RAND_FUNC(x) x = octave::numeric_limits<double>::NaN ();
-            MAKE_RAND (len);
-#undef RAND_FUNC
+          if (a < 0.0f || ! octave::math::isfinite (a))
+            std::fill_n (v, len, octave::numeric_limits<float>::NaN ());
           else
             {
               // workaround bug in ignpoi, by calling with different Mu
-              double tmp;
-              F77_FUNC (dignpoi, DIGNPOI) (da + 1, tmp);
-#define RAND_FUNC(x) F77_FUNC (dignpoi, DIGNPOI) (da, x)
-              MAKE_RAND (len);
-#undef RAND_FUNC
+              float tmp;
+              F77_FUNC (fignpoi, FIGNPOI) (a + 1, tmp);
+              std::generate_n (v, len, [a](void) { float x; F77_FUNC (fignpoi, FIGNPOI) (a, x); return x; });
             }
         }
       else
         oct_fill_float_randp (a, len, v);
       break;
 
     case gamma_dist:
       if (use_old_generators)
         {
-          double da = a;
-          if (da <= 0.0 || ! octave::math::isfinite (a))
-#define RAND_FUNC(x) x = octave::numeric_limits<double>::NaN ();
-            MAKE_RAND (len);
-#undef RAND_FUNC
+          if (a <= 0.0f || ! octave::math::isfinite (a))
+            std::fill_n (v, len, octave::numeric_limits<float>::NaN ());
           else
-#define RAND_FUNC(x) F77_FUNC (dgengam, DGENGAM) (1.0, da, x)
-            MAKE_RAND (len);
-#undef RAND_FUNC
+            std::generate_n (v, len, [a](void) { float x; F77_FUNC (fgengam, FGENGAM) (1.0f, a, x); return x; });
         }
       else
         oct_fill_float_randg (a, len, v);
       break;
 
     default:
       (*current_liboctave_error_handler)
         ("rand: invalid distribution ID = %d", current_distribution);
