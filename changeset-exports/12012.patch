# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1245822021 -7200
#      Wed Jun 24 07:40:21 2009 +0200
# Branch release-3-2-x
# Node ID 664597f882843224b55eaf0772d45f1836cc2ed7
# Parent  67ad3b58b99a20736f526e13118c026f11191717
workaround sig_atomic_t != int in pt-eval.cc

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,13 @@
+2009-06-24  Jaroslav Hajek  <highegg@gmail.com>
+
+	* pt-eval.cc (do_unwind_protect_cleanup_code):
+	Workaround sig_atomic_t != int.
+
 2009-06-23  Jaroslav Hajek  <highegg@gmail.com>
 
 	* quit.h (octave_quit_exception): Delete.
 	(exit_status, quitting_gracefully): New globals.
 	* quit.cc: Initialize them.
 	(Fquit): Set the globals, simulate interrupt.
 	(main_loop): Handle exit properly.
 	* octave.cc (execute_eval_option_code): Ditto.
diff --git a/src/pt-eval.cc b/src/pt-eval.cc
--- a/src/pt-eval.cc
+++ b/src/pt-eval.cc
@@ -899,22 +899,28 @@ tree_evaluator::visit_try_catch_command 
       unwind_protect::run ();
       unwind_protect::run ();
 
       // Also clear the frame marker.
       unwind_protect::discard ();
     }
 }
 
+void restore_interrupt_state (void *ptr)
+{
+  octave_interrupt_state = *(reinterpret_cast<sig_atomic_t *> (ptr));
+}
+
 static void
 do_unwind_protect_cleanup_code (void *ptr)
 {
   tree_statement_list *list = static_cast<tree_statement_list *> (ptr);
 
-  unwind_protect_int (octave_interrupt_state);
+  sig_atomic_t saved_octave_interrupt_state = octave_interrupt_state;
+  unwind_protect::add (restore_interrupt_state, &saved_octave_interrupt_state);
   octave_interrupt_state = 0;
 
   // We want to run the cleanup code without error_state being set,
   // but we need to restore its value, so that any errors encountered
   // in the first part of the unwind_protect are not completely
   // ignored.
 
   unwind_protect_int (error_state);
