# HG changeset patch
# User Mike Miller <mtmiller@octave.org>
# Date 1495071914 25200
#      Wed May 17 18:45:14 2017 -0700
# Node ID 7648014dccc6bf8bceb14f807346f16f5dc705cd
# Parent  7626613f39786f10d909a23217346f7fd51a4f42
Allow compile-time feature tests to pass with an empty set of features

* __have_feature__.m: Return true on an empty cell array of features.
Add actual %!tests.

diff --git a/scripts/testfun/__have_feature__.m b/scripts/testfun/__have_feature__.m
--- a/scripts/testfun/__have_feature__.m
+++ b/scripts/testfun/__have_feature__.m
@@ -26,20 +26,24 @@ function retval = __have_feature__ (feat
   if (strncmp (feature, "ENABLE_", 7))
     features = __octave_config_info__ ();
   else
     features = __octave_config_info__ ("build_features");
   endif
 
   if (iscellstr (feature))
     retval = (all (isfield (features, feature))
-              && cellfun (@(x) features.(x), feature));
+              && all (cellfun (@(x) features.(x), feature)));
   elseif (ischar (feature))
     retval = isfield (features, feature) && features.(feature);
   else
     retval = false;
   endif
 
 endfunction
 
 
-## No test coverage for internal function.  It is tested through calling fcn.
-%!assert (1)
+%!assert (islogical (__have_feature__ ("MAGICK")))
+%!assert (isscalar (__have_feature__ ("MAGICK")))
+%!assert (__have_feature__ ("MAGICK") == __have_feature__ ({"MAGICK", "MAGICK"}))
+
+## Test that an empty feature set returns true
+%!assert (__have_feature__ ({}))
