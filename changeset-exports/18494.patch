# HG changeset patch
# User Rik <rik@octave.org>
# Date 1392745176 28800
#      Tue Feb 18 09:39:36 2014 -0800
# Node ID 1fa5bba1621876012258d53d450273e67f7298fd
# Parent  8473198fd005a7d538dd0c9cb9c29f28cf62f427
[mq]: pinv

diff --git a/libinterp/corefcn/pinv.cc b/libinterp/corefcn/pinv.cc
--- a/libinterp/corefcn/pinv.cc
+++ b/libinterp/corefcn/pinv.cc
@@ -207,9 +207,25 @@ where @code{sigma_max (@var{x})} is the 
 %!assert (a*b*a, a, tol)
 %!assert (b*a*b, b, tol)
 %!assert ((b*a)', b*a, tol)
 %!assert ((a*b)', a*b, tol)
 %!assert (x*y*x, x, -hitol)
 %!assert (y*x*y, y, -hitol)
 %!assert ((x*y)', x*y, hitol)
 %!assert ((y*x)', y*x, hitol)
+
+## Clear shared variables
+%!shared
+
+## Test pinv for Diagonal matrices
+%!test
+%! x = diag ([3 2 1 0 -0.5]);
+%! y = pinv (x);
+%! assert (typeinfo (y)(1:8), "diagonal");
+%! assert (isa (y, "double"));
+%! assert (diag (y), [1/3, 1/2, 1, 0  1/-0.5]');
+%! y = pinv (x, 1);
+%! assert (diag (y), [1/3 1/2 1 0 0]');
+%! y = pinv (x, 2);
+%! assert (diag (y), [1/3 1/2 0 0 0]');
+
 */
diff --git a/liboctave/array/CDiagMatrix.cc b/liboctave/array/CDiagMatrix.cc
--- a/liboctave/array/CDiagMatrix.cc
+++ b/liboctave/array/CDiagMatrix.cc
@@ -389,20 +389,20 @@ ComplexDiagMatrix::pseudo_inverse (doubl
   octave_idx_type c = cols ();
   octave_idx_type len = length ();
 
   ComplexDiagMatrix retval (c, r);
 
   for (octave_idx_type i = 0; i < len; i++)
     {
       double val = std::abs (elem (i, i));
-      if (val < tol || val == 0.0)
+      if (val < tol)
         retval.elem (i, i) = 0.0;
-      else
-        retval.elem (i, i) = 1.0 / val;
+      else if (val != 0.0)
+        retval.elem (i, i) = 1.0 / elem (i, i);
     }
 
   return retval;
 }
 
 bool
 ComplexDiagMatrix::all_elements_are_real (void) const
 {
diff --git a/liboctave/array/dDiagMatrix.cc b/liboctave/array/dDiagMatrix.cc
--- a/liboctave/array/dDiagMatrix.cc
+++ b/liboctave/array/dDiagMatrix.cc
@@ -298,20 +298,20 @@ DiagMatrix::pseudo_inverse (double tol) 
   octave_idx_type c = cols ();
   octave_idx_type len = length ();
 
   DiagMatrix retval (c, r);
 
   for (octave_idx_type i = 0; i < len; i++)
     {
       double val = std::abs (elem (i, i));
-      if (val < tol || val == 0.0)
+      if (val < tol)
         retval.elem (i, i) = 0.0;
-      else
-        retval.elem (i, i) = 1.0 / val;
+      else if (val != 0.0)
+        retval.elem (i, i) = 1.0 / elem (i, i);
     }
 
   return retval;
 }
 
 // diagonal matrix by diagonal matrix -> diagonal matrix operations
 
 // diagonal matrix by diagonal matrix -> diagonal matrix operations
diff --git a/liboctave/array/fCDiagMatrix.cc b/liboctave/array/fCDiagMatrix.cc
--- a/liboctave/array/fCDiagMatrix.cc
+++ b/liboctave/array/fCDiagMatrix.cc
@@ -393,20 +393,20 @@ FloatComplexDiagMatrix::pseudo_inverse (
   octave_idx_type c = cols ();
   octave_idx_type len = length ();
 
   FloatComplexDiagMatrix retval (c, r);
 
   for (octave_idx_type i = 0; i < len; i++)
     {
       float val = std::abs (elem (i, i));
-      if (val < tol || val == 0.0f)
+      if (val < tol)
         retval.elem (i, i) = 0.0f;
-      else
-        retval.elem (i, i) = 1.0f / val;
+      else if (val != 0.0f)
+        retval.elem (i, i) = 1.0f / elem (i, i);
     }
 
   return retval;
 }
 
 bool
 FloatComplexDiagMatrix::all_elements_are_real (void) const
 {
diff --git a/liboctave/array/fDiagMatrix.cc b/liboctave/array/fDiagMatrix.cc
--- a/liboctave/array/fDiagMatrix.cc
+++ b/liboctave/array/fDiagMatrix.cc
@@ -298,20 +298,20 @@ FloatDiagMatrix::pseudo_inverse (float t
   octave_idx_type c = cols ();
   octave_idx_type len = length ();
 
   FloatDiagMatrix retval (c, r);
 
   for (octave_idx_type i = 0; i < len; i++)
     {
       float val = std::abs (elem (i, i));
-      if (val < tol || val == 0.0f)
+      if (val < tol)
         retval.elem (i, i) = 0.0f;
-      else
-        retval.elem (i, i) = 1.0f / val;
+      else if (val != 0.0f)
+        retval.elem (i, i) = 1.0f / elem (i, i);
     }
 
   return retval;
 }
 
 // diagonal matrix by diagonal matrix -> diagonal matrix operations
 
 // diagonal matrix by diagonal matrix -> diagonal matrix operations
