# HG changeset patch
# User Rik <rik@octave.org>
# Date 1375624949 25200
#      Sun Aug 04 07:02:29 2013 -0700
# Node ID 0a761f218d8dbfbe2a940b0581b897bec1d6f3e2
# Parent  0e34c475c956113cdc2f0f1c796d2746e660973c
Fix contour plot axis to x-y data range, not axis ("tight").

* scripts/plot/private/__contour__.m: Remove axis ("tight").  Set axis range
before adding patches so that axis limits aren't re-calculated for each patch.

* scripts/plot/meshc.m, scripts/plot/surfc.m: Set xlimmode, ylimmode to manual.

scripts/plot/private/__ezplot__.m: Remove FIXME comment and manually setting
axis which was workaround for old behavior.

diff --git a/scripts/plot/meshc.m b/scripts/plot/meshc.m
--- a/scripts/plot/meshc.m
+++ b/scripts/plot/meshc.m
@@ -69,17 +69,18 @@ function h = meshc (varargin)
 
     ## FIXME - gnuplot does not support a filled surface and a
     ## non-filled contour.  3D filled patches are also not supported.
     ## Thus, the facecolor will be transparent for the gnuplot backend.
     set (htmp, "facecolor", "w");
     set (htmp, "edgecolor", "flat");
     if (! ishold ())
       set (hax, "view", [-37.5, 30],
-                "xgrid", "on", "ygrid", "on", "zgrid", "on");
+                "xgrid", "on", "ygrid", "on", "zgrid", "on",
+                "xlimmode", "manual", "ylimmode", "manual");
     endif
 
     drawnow ();
 
     zmin = get (hax, "zlim")(1);
     [~, htmp2] = __contour__ (hax, zmin, varargin{:});
 
     htmp = [htmp; htmp2];
diff --git a/scripts/plot/private/__contour__.m b/scripts/plot/private/__contour__.m
--- a/scripts/plot/private/__contour__.m
+++ b/scripts/plot/private/__contour__.m
@@ -135,19 +135,18 @@ function [c, hg] = __contour__ (varargin
 
   addlistener (hg, "xdata", @update_data);
   addlistener (hg, "ydata", @update_data);
   addlistener (hg, "zdata", @update_data);
   addlistener (hg, "contourmatrix", @update_data);
 
   addproperty ("fill", hg, "radio", "on|{off}", filled);
 
-  ## The properties zlevel and zlevelmode don't exist in matlab, but
-  ## allow the use of contourgroups with the contour3, meshc and surfc
-  ## functions.
+  ## The properties zlevel and zlevelmode don't exist in matlab, but allow the
+  ## use of contourgroups with the contour3, meshc, and surfc functions.
   if (isnumeric (zlevel))
     addproperty ("zlevelmode", hg, "radio", "{none}|auto|manual", "manual");
     addproperty ("zlevel", hg, "data", zlevel);
   else
     addproperty ("zlevelmode", hg, "radio", "{none}|auto|manual", zlevel);
     if (ischar (zlevel) && strcmpi (zlevel, "manual"))
       z = varargin{3};
       z = 2 * (min (z(:)) - max (z(:)));
@@ -178,18 +177,18 @@ function [c, hg] = __contour__ (varargin
   addproperty ("textstep", hg, "double", lvlstep);
   addproperty ("textstepmode", hg, "radio", "{auto}|manual", "auto");
   addproperty ("showtext", hg, "radio", "on|{off}", "off");
 
   addproperty ("linecolor", hg, "color", linespec.color, "{auto}|none");
   addproperty ("linestyle", hg, "linelinestyle", linespec.linestyle);
   addproperty ("linewidth", hg, "linelinewidth", 0.5);
 
-  ## FIXME It would be good to hide this property which is just an undocumented
-  ## alias for linecolor
+  ## FIXME: It would be good to hide this property which is just an
+  ##        undocumented alias for linecolor
   addproperty ("edgecolor", hg, "color", edgecolor, "{flat}|none");
 
   addlistener (hg, "fill", @update_data);
 
   addlistener (hg, "zlevelmode", @update_zlevel);
   addlistener (hg, "zlevel", @update_zlevel);
 
   addlistener (hg, "levellist", {@update_data, "levellist"});
@@ -205,23 +204,28 @@ function [c, hg] = __contour__ (varargin
   addlistener (hg, "showtext", @update_text);
 
   addlistener (hg, "linecolor", @update_line);
   addlistener (hg, "linestyle", @update_line);
   addlistener (hg, "linewidth", @update_line);
 
   addlistener (hg, "edgecolor", @update_edgecolor);
 
+  ## Set axis before adding patches so that each new patch does not trigger
+  ## new axis calculation.  No need if mode is already "manual".
+  if (all (strcmp (get (gca (), {"xlimmode", "ylimmode"}), "auto")))
+    axis ([min(x1(:)) max(x1(:)) min(y1(:)) max(y1(:))]);
+  endif
+
   add_patch_children (hg);
 
-  axis ("tight");
-
-  if (!isempty (opts))
+  if (! isempty (opts))
     set (hg, opts{:});
   endif
+
 endfunction
 
 function add_patch_children (hg)
   c = get (hg, "contourmatrix");
   lev = get (hg, "levellist");
   fill = get (hg, "fill");
   zlev = get (hg, "zlevel");
   zmode = get (hg, "zlevelmode");
@@ -387,16 +391,17 @@ function add_patch_children (hg)
       endswitch
       i1 += clen + 1;
     endwhile
   endif
 
 endfunction
 
 function update_zlevel (h, d)
+
   z = get (h, "zlevel");
   zmode = get (h, "zlevelmode");
   kids = get (h, "children");
 
   switch (zmode)
     case "none"
       set (kids, "zdata", []);
     case "auto"
@@ -549,17 +554,17 @@ function update_text (h, d)
       endswitch
     endif
 
     recursive = false;
   endif
 endfunction
 
 function lvl_eps = get_lvl_eps (lev)
-  ## FIXME -- is this the right thing to do for this tolerance?  Should
+  ## FIXME: is this the right thing to do for this tolerance?  Should
   ## it be an absolute or relative tolerance, or switch from one to the
   ## other depending on the value of lev?
   if (isscalar (lev))
     lvl_eps = abs (lev) * sqrt (eps) + sqrt (eps);
   else
     tmp = min (abs (diff (lev)));
     if (tmp < 10*eps)
       lvl_eps = sqrt (eps);
diff --git a/scripts/plot/private/__ezplot__.m b/scripts/plot/private/__ezplot__.m
--- a/scripts/plot/private/__ezplot__.m
+++ b/scripts/plot/private/__ezplot__.m
@@ -427,19 +427,16 @@ function [h, needusage] = __ezplot__ (pl
   until (domain_ok)
 
   ## Now, actually call the correct plot function with valid data and domain.
   oldfig = ifelse (isempty (hax), [], get (0, "currentfigure"));
   unwind_protect
     hax = newplot (hax);
     if (iscontour)
       [~, h] = feval (pltfunc, hax, X, Y, Z);
-      ## FIXME: Work around contour setting axis tight.
-      ##        Fix should really be in __countour__.
-      axis (hax, domain);
     elseif (isplot && nargs == 2)
       h = zeros (length (XX), 1);
       hold_state = get (hax, "nextplot");
       for i = 1 : length (XX)
         h(i) = plot(hax, XX{i}, YY{i});
         if (i == 1)
           set (hax, "nextplot", "add");
         endif
diff --git a/scripts/plot/surfc.m b/scripts/plot/surfc.m
--- a/scripts/plot/surfc.m
+++ b/scripts/plot/surfc.m
@@ -68,17 +68,18 @@ function h = surfc (varargin)
   unwind_protect
     hax = newplot (hax);
     
     htmp = surface (varargin{:});
 
     set (htmp, "facecolor", "flat");
     if (! ishold ())
       set (hax, "view", [-37.5, 30],
-                "xgrid", "on", "ygrid", "on", "zgrid", "on");
+                "xgrid", "on", "ygrid", "on", "zgrid", "on",
+                "xlimmode", "manual", "ylimmode", "manual");
     endif
 
     drawnow ();
 
     # don't pass string arguments to __contour__()
     stop_idx = find (cellfun ("isclass", varargin, "char"), 1);
     if (isempty (stop_idx))
       stop_idx = nargin;
