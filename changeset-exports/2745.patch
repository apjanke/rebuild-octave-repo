# HG changeset patch
# User jwe
# Date 856943537 0
#      Wed Feb 26 07:52:17 1997 +0000
# Node ID 76411ce43c05d5a4ed47986ec7897dd2341d285c
# Parent  b1474687fb838b3d3fd381a29c97f640b390cc32
[project @ 1997-02-26 07:52:14 by jwe]

diff --git a/NEWS b/NEWS
--- a/NEWS
+++ b/NEWS
@@ -1,8 +1,16 @@
+Summary of changes for version 2.0.5:
+------------------------------------
+
+  * Commands like ls, save, and cd may now also be used as formal
+    parameters for functions.
+
+  * More tests.
+
 Summary of changes for version 2.0.4:
 ------------------------------------
 
   * It is now possible to use commands like ls, save, and cd as simple
     variable names.  They still cannot be used as formal parameters
     for functions, or as the names of structure variables.  Failed
     assignments leave them undefined (you can recover the orginal
     function definition using clear).
diff --git a/WWW/index.html b/WWW/index.html
--- a/WWW/index.html
+++ b/WWW/index.html
@@ -68,17 +68,17 @@ for posting sources and enhancements to 
 A <a href="mailing-lists/index.html">complete archive</a> of postings
 and <a href="mailing-lists/index.html#JOIN">instructions for joining
 the lists</a> is also available.
 </p>
 
 <h3>Contributed Functions</h3>
 <p>
 An archive of contributed functions for Octave is available from
-<a href="http://www.tsc.uvigo.es/GTS/Octave/oct_arch.html">http://www.tsc.uvigo.es/GTS/Octave/oct_arch.html</a>.
+<a href="http://www.tsc.uvigo.es/GTS/Octave">http://www.tsc.uvigo.es/GTS/Octave</a>.
 </p>
 
 <hr>
 <p>
 <a href="http://www.che.wisc.edu/~jwe">John W. Eaton</a><br>
 <a href="mailto:jwe@bevo.che.wisc.edu"><i>jwe@bevo.che.wisc.edu</i></a><br>
 University of Wisconsin<br>
 Department of Chemical Engineering<br>
diff --git a/doc/interpreter/eval.texi b/doc/interpreter/eval.texi
--- a/doc/interpreter/eval.texi
+++ b/doc/interpreter/eval.texi
@@ -61,23 +61,23 @@ calls the function @code{acos} with the 
 The function @code{feval} is necessary in order to be able to write
 functions that call user-supplied functions, because Octave does not
 have a way to declare a pointer to a function (like C) or to declare a
 special kind of variable that can be used to hold the name of a function
 (like @code{EXTERNAL} in Fortran).  Instead, you must refer to functions
 by name, and use @code{feval} to call them.
 @end deftypefn
 
-@cindex Fordyce, A. P.
-@findex newtroot
 Here is a simple-minded function using @code{feval} that finds the root
 of a user-supplied function of one variable using Newton's method.
 
 @example
 @group
+@cindex Fordyce, A. P.
+@findex newtroot
 function result = newtroot (fname, x)
 
 # usage: newtroot (fname, x)
 #
 #   fname : a string naming a function f(x).
 #   x     : initial guess
 
   delta = tol = sqrt (eps);
diff --git a/doc/interpreter/set.texi b/doc/interpreter/set.texi
--- a/doc/interpreter/set.texi
+++ b/doc/interpreter/set.texi
@@ -22,18 +22,18 @@ create_set ([ 1, 2; 3, 4; 4, 2 ])
 @end deftypefn
 
 @deftypefn {Function File} {} union (@var{x}, @var{y})
 Return the set of elements that are in either of the sets @var{x} and
 @var{y}.  For example,
 
 @example
 @group
-union ([ 1, 2, 3 ], [ 2, 3, 5 ])
-     @result{} [ 1, 2, 5 ]
+union ([ 1, 2, 4 ], [ 2, 3, 5 ])
+     @result{} [ 1, 2, 3, 4, 5 ]
 @end group
 @end example
 @end deftypefn
 
 @deftypefn {Function File} {} intersection (@var{x}, @var{y})
 Return the set of elements that are in both sets @var{x} and @var{y}.
 For example,
 
diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,8 +1,16 @@
+Wed Feb 26 01:48:28 1997  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* general/is_matrix.m: Return zero for empty matrices.
+
+Tue Feb 25 15:16:04 1997  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* linear-algebra/vech.m: Size result just once.
+
 Sun Feb 23 00:15:57 1997  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* general/is_square.m: Handle empty matrices correctly.
 	* general/is_symmetric.m: Handle empty matrices and strings.
 
 Sat Feb 22 01:06:22 1997  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* polynomial/conv.m: Check inputs with is_vector(), not is_matrix().
diff --git a/scripts/general/is_matrix.m b/scripts/general/is_matrix.m
--- a/scripts/general/is_matrix.m
+++ b/scripts/general/is_matrix.m
@@ -24,14 +24,14 @@
 ## See also: size, rows, columns, length, is_scalar, is_vector
 
 ## Author: jwe
 
 function retval = is_matrix (x)
 
   if (nargin == 1)
     [nr, nc] = size (x);
-    retval = (nr >= 0 && nc >= 0);
+    retval = (nr > 0 && nc > 0);
   else
     usage ("is_matrix (x)");
   endif
 
 endfunction
diff --git a/scripts/linear-algebra/vech.m b/scripts/linear-algebra/vech.m
--- a/scripts/linear-algebra/vech.m
+++ b/scripts/linear-algebra/vech.m
@@ -35,16 +35,17 @@ function v = vech (x)
   
   if (! is_square (x))
     error ("vech:  x must be square");
   endif
   
   ## This should be quicker than having an inner `for' loop as well.
   ## Ideally, vech should be written in C++.
   n = rows (x);
+  v = zeros ((n+1)*n/2, 1);
   count = 0;
   for j = 1 : n
     i = j : n; 
     v (count + i) = x (i, j);
     count = count + n - j;
   endfor
 
 endfunction
diff --git a/scripts/special-matrix/hadamard.m b/scripts/special-matrix/hadamard.m
--- a/scripts/special-matrix/hadamard.m
+++ b/scripts/special-matrix/hadamard.m
@@ -26,16 +26,20 @@
 ## Author: jwe
 
 function retval = hadamard (k)
 
   if (nargin != 1)
     usage ("hadamard (n)");
   endif
 
-  if (k < 1)
-    retval = 1;
+  if (is_scalar (k))
+    if (k < 1)
+      retval = 1;
+    else
+      tmp = hadamard (k-1);
+      retval = [tmp, tmp; tmp, -tmp];
+    endif
   else
-    tmp = hadamard (k-1);
-    retval = [tmp, tmp; tmp, -tmp];
+    error ("hadamard: expecting scalar argument");
   endif
 
 endfunction
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,27 @@
+Tue Feb 25 22:21:05 1997  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* time.cc (strftime): increase initial buffer size.
+
+Mon Feb 24 17:49:21 1997  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* pt-fvc.cc (tree_builtin::eval): Enable checking for max number
+	of arguments.
+
+	* error.cc (handle_message): Don't fail if args is empty.
+
+Sun Feb 23 22:42:52 1997  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* lex.h (lexical_feedback::looking_at_return_list): New field.
+	(lexical_feedback::looking_at_parameter_list): Ditto.
+	* lex.l (lexical_feedback::init): Initialize them.
+	(handle_identifier): Use them.
+	* parse.y: Likewise.
+
 Fri Feb 21 15:35:18 1997  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* lex.l: Require flex 2.5 or later (we really want 2.5.4 or later,
 	but there seems to be no good way to check the patchlevel).
 
 	* oct-stream.cc (octave_base_stream::oscanf): Instead of returning
 	an error, just quit processing after a conversion fails.
 
diff --git a/src/error.cc b/src/error.cc
--- a/src/error.cc
+++ b/src/error.cc
@@ -206,30 +206,33 @@ static octave_value_list
 handle_message (error_fun f, const char *msg, const octave_value_list& args)
 {
   octave_value_list retval;
 
   string tstr;
 
   int nargin = args.length ();
 
-  octave_value arg = ((nargin > 1) ? Fsprintf (args, 1) : args) (0);
-
-  if (arg.is_defined ())
+  if (nargin > 0)
     {
-      if (arg.is_string ())
+      octave_value arg = ((nargin > 1) ? Fsprintf (args, 1) : args) (0);
+
+      if (arg.is_defined ())
 	{
-	  tstr = arg.string_value ();
-	  msg = tstr.c_str ();
-
-	  if (! msg)
+	  if (arg.is_string ())
+	    {
+	      tstr = arg.string_value ();
+	      msg = tstr.c_str ();
+	      
+	      if (! msg)
+		return retval;
+	    }
+	  else if (arg.is_empty ())
 	    return retval;
 	}
-      else if (arg.is_empty ())
-	return retval;
     }
 
 // Ugh.
 
   int len = strlen (msg);
   if (msg[len - 1] == '\n')
     {
       if (len > 1)
diff --git a/src/lex.h b/src/lex.h
--- a/src/lex.h
+++ b/src/lex.h
@@ -132,16 +132,22 @@ public:
 
   // Nonzero means that we should convert spaces to a comma inside a
   // matrix definition.
   int convert_spaces_to_comma;
 
   // Nonzero means we're in the middle of defining a function.
   int defining_func;
 
+  // Nonzero means we're parsing the return list for a function.
+  int looking_at_return_list;
+
+  // Nonzero means we're parsing the parameter list for a function.
+  int looking_at_parameter_list;
+
   // GAG.  Stupid kludge so that [[1,2][3,4]] will work.
   int do_comma_insert;
 
   // Nonzero means we think we are looking at a set command.
   int doing_set;
 
   // Nonzero means we're in the middle of defining a conditional
   // expression.
diff --git a/src/lex.l b/src/lex.l
--- a/src/lex.l
+++ b/src/lex.l
@@ -1754,23 +1754,30 @@ handle_identifier (const string& tok, in
 
   if (next_tok_is_eq
       && lexer_flags.defining_func && lexer_flags.maybe_screwed)
     curr_sym_tab = tmp_local_sym_tab;
 
   // Kluge alert.
   //
   // If we are looking at a text style function, set up to gobble its
-  // arguments.  If the following token is `=', force the symbol to be
+  // arguments.
+  //
+  // If the following token is `=', or if we are parsing a function
+  // return list or function parameter list, force the symbol to be
   // inserted as a variable in the current symbol table.
 
   if (is_text_function_name (tok) && ! is_variable (tok))
     {
-      if (next_tok_is_eq)
-	force_local_variable (tok);
+      if (next_tok_is_eq
+	  || lexer_flags.looking_at_return_list
+	  || lexer_flags.looking_at_parameter_list)
+	{
+	  force_local_variable (tok);
+	}
       else if (! next_tok_is_paren)
 	{
 	  if (tok == "gset")
 	    lexer_flags.doing_set = 1;
 
 	  BEGIN TEXT_FCN;
 	}
     }
@@ -1872,16 +1879,20 @@ check_for_garbage_after_fcn_def (void)
 
 void
 lexical_feedback::init (void)
 {
   // Not initially defining a function.
   beginning_of_function = 0;
   defining_func = 0;
 
+  // Not parsing a function return or parameter list.
+  looking_at_return_list = 0;
+  looking_at_parameter_list = 0;
+
   // Not initially defining a matrix list.
   braceflag = 0;
 
   // Next token can be identifier.
   cant_be_identifier = 0;
 
   // No need to do comma insert or convert spaces to comma at
   // beginning of input. 
diff --git a/src/parse.y b/src/parse.y
--- a/src/parse.y
+++ b/src/parse.y
@@ -850,16 +850,20 @@ word_list	: TEXT
 		;
 
 // This is truly disgusting.
 
 g_symtab	: // empty
 		  { curr_sym_tab = global_sym_tab; }
 		;
 
+in_return_list	: // empty
+		  { lexer_flags.looking_at_return_list = 1; }
+		;
+
 local_symtab	: // empty
 		  { curr_sym_tab = tmp_local_sym_tab; }
 		;
 
 safe		: // empty
 		  { lexer_flags.maybe_screwed = 0; }
 		;
 
@@ -882,31 +886,39 @@ func_def	: FCN g_symtab are_we_screwed f
 		;
 
 func_def1	: SCREW safe g_symtab '=' func_def2
 		  { $$ = finish_function_def ($1, $5); }
 		| return_list g_symtab '=' func_def2
 		  { $$ = finish_function_def ($1, $4); }
 		;
 
-return_list_x	: '[' safe local_symtab
+return_list_x	: '[' safe local_symtab in_return_list
 		;
 
 return_list	: return_list_x ']'
-		  { $$ = new tree_parameter_list (); }
+		  {
+		    lexer_flags.looking_at_return_list = 0;
+		    $$ = new tree_parameter_list ();
+		  }
 		| return_list_x ELLIPSIS ']'
 		  {
+		    lexer_flags.looking_at_return_list = 0;
 		    tree_parameter_list *tmp = new tree_parameter_list ();
 		    tmp->mark_varargs_only ();
 		    $$ = tmp;
 		  }
 		| return_list1 ']'
-		  { $$ = $1; }
+		  {
+		    lexer_flags.looking_at_return_list = 0;
+		    $$ = $1;
+		  }
 		| return_list1 ',' ELLIPSIS ']'
 		  {
+		    lexer_flags.looking_at_return_list = 0;
 		    $1->mark_varargs ();
 		    $$ = $1;
 		  }
 		;
 
 return_list1	: return_list_x identifier
 		  { $$ = new tree_parameter_list ($2); }
 		| return_list_x error
@@ -976,45 +988,51 @@ variable	: indirect_ref
 		  {
 		    yyerror ("use `(\' and `)\' as index operators, not\
  `[\' and `]\'"); 
 		    $$ = 0;
 		    ABORT_PARSE;
 		  }
 		;
 
+in_param_list	: // empty
+		  { lexer_flags.looking_at_parameter_list = 1; }
+		;
+
 param_list	: '(' ')'
 		  {
 		    lexer_flags.quote_is_transpose = 0;
 		    $$ = 0;
 		  }
 		| '(' ELLIPSIS ')'
 		  {
 		    lexer_flags.quote_is_transpose = 0;
 		    tree_parameter_list *tmp = new tree_parameter_list ();
 		    tmp->mark_varargs_only ();
 		    $$ = tmp;
 		  }
 		| param_list1 ')'
 		  {
+		    lexer_flags.looking_at_parameter_list = 0;
 		    lexer_flags.quote_is_transpose = 0;
 		    $1->mark_as_formal_parameters ();
 		    $$ = $1;
 		  }
 		| param_list1 ',' ELLIPSIS ')'
 		  {
+		    lexer_flags.looking_at_parameter_list = 0;
 		    lexer_flags.quote_is_transpose = 0;
 		    $1->mark_as_formal_parameters ();
 		    $1->mark_varargs ();
 		    $$ = $1;
 		  }
 		;
 
-param_list1	: '(' identifier
-		  { $$ = new tree_parameter_list ($2); }
+param_list1	: '(' in_param_list identifier
+		  { $$ = new tree_parameter_list ($3); }
 		| param_list1 ',' identifier
 		  {
 		    $1->append ($3);
 		    $$ = $1;
 		  }
 		| '(' error
 		  {
 		    yyerror ("invalid parameter list");
diff --git a/src/pt-fvc.cc b/src/pt-fvc.cc
--- a/src/pt-fvc.cc
+++ b/src/pt-fvc.cc
@@ -774,29 +774,29 @@ tree_builtin::eval (bool /* print */, in
     {
       if (any_arg_is_magic_colon (args))
 	::error ("invalid use of colon in function argument list");
       else
 	retval = (*fcn) (args, nargout);
     }
   else if (is_mapper)
     {
-// XXX FIXME XXX -- should we just assume nargin_max == 1?
-//
-//      if (nargin > nargin_max)
-//	::error ("%s: too many arguments", my_name.c_str ());
-//      else
-      if (nargin > 0 && args(0).is_defined ())
-	{
-	  octave_value tmp = apply_mapper_fcn (args(0), mapper_fcn, 0);
-	  retval(0) = tmp;
-	}
+      if (nargin > 1)
+	::error ("%s: too many arguments", my_name.c_str ());
+      else if (nargin < 1)
+	::error ("%s: too few arguments", my_name.c_str ());
       else
 	{
-	  ::error ("%s: too few arguments", my_name.c_str ());
+	  if (args(0).is_defined ())
+	    {
+	      octave_value tmp = apply_mapper_fcn (args(0), mapper_fcn, 0);
+	      retval(0) = tmp;
+	    }
+	  else
+	    ::error ("%s: argument undefined", my_name.c_str ());
 	}
     }
   else
     panic_impossible ();
 
   return retval;
 }
 
diff --git a/src/time.cc b/src/time.cc
--- a/src/time.cc
+++ b/src/time.cc
@@ -50,20 +50,18 @@ mk_tm_map (struct tm *tm, double fractio
   m ["mon"] = (double) tm->tm_mon;
   m ["year"] = (double) tm->tm_year;
   m ["wday"] = (double) tm->tm_wday;
   m ["yday"] = (double) tm->tm_yday;
   m ["isdst"] = (double) tm->tm_isdst;
 #if defined (HAVE_TM_ZONE)
   m ["zone"]  = tm->tm_zone;
 #elif defined (HAVE_TZNAME)
-  if (tm->tm_isdst && tzname[1] && *tzname[1])
-    m ["zone"] = tzname[1];
-  else
-    m ["zone"] = tzname[0];
+  if (tm->tm_isdst == 0 || tm->tm_isdst == 1)
+    m ["zone"] = tzname[tm->tm_isdst];
 #else
   m ["zone"] = zone_name (tm);
 #endif
 
   return m;
 }
 
 static struct tm*
@@ -280,17 +278,17 @@ Date fields:\n\
       Octave_map map = args(1).map_value ();
 
       double fraction;
 
       struct tm *tm = extract_tm (map, fraction);
 
       if (! error_state)
 	{
-	  int bufsize = 128;
+	  int bufsize = 1024;
 	  char *buf = new char [bufsize];
 
 	  while (! strftime (buf, bufsize, fmt.c_str (), tm))
 	    {
 	      delete [] buf;
 	      bufsize *= 2;
 	      buf = new char [bufsize];
 	    }
