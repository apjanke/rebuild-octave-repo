# HG changeset patch
# User Rik <rdrider0-list@yahoo.com>
# Date 1255493437 25200
#      Tue Oct 13 21:10:37 2009 -0700
# Node ID f22bbc5d56e97ed307b9a2c650fe3e3229ef9fb6
# Parent  f426899f4b9c9a0919aaeecd8b34fa84bd5c681a
Fix various incorrect usages of TeXinfo deffn and deftypefn macros
which were causing bad entries in the function index.

diff --git a/doc/ChangeLog b/doc/ChangeLog
--- a/doc/ChangeLog
+++ b/doc/ChangeLog
@@ -1,8 +1,12 @@
+2009-10-13  Rik <octave@nomad.inbox5.com>
+
+	* various: Fix various incorrect usages of deffn and deftypefn macros
+
 2009-10-12  Rik <octave@nomad.inbox5.com>
 
 	* liboctave/Makefile.in: Simplify Makefile using GNU Make functions
 	* liboctave/liboctave.texi: Stop header of file, which was meant to be
 	commented, from being transferred into the documentation.
 
 2009-10-12  Rik <octave@nomad.inbox5.com>
 
diff --git a/scripts/help/doc.m b/scripts/help/doc.m
--- a/scripts/help/doc.m
+++ b/scripts/help/doc.m
@@ -12,29 +12,29 @@
 ## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
-## @deftypefn {Command} doc @var{function_name}
+## @deffn {Command} doc @var{function_name}
 ## Display documentation for the function @var{function_name}
 ## directly from an on-line version of
 ## the printed manual, using the GNU Info browser.  If invoked without
 ## any arguments, the manual is shown from the beginning.
 ##
 ## For example, the command @kbd{doc rand} starts the GNU Info browser
 ## at the @code{rand} node in the on-line version of the manual.
 ##
 ## Once the GNU Info browser is running, help for using it is available
 ## using the command @kbd{C-h}.
 ## @seealso{help}
-## @end deftypefn
+## @end deffn
 
 ## Author: Soren Hauberg <soren@hauberg.org>
 ## Adapted-by: jwe
 
 function retval = doc (fname)
 
   if (nargin == 0 || nargin == 1)
 
diff --git a/scripts/help/help.m b/scripts/help/help.m
--- a/scripts/help/help.m
+++ b/scripts/help/help.m
@@ -10,29 +10,29 @@
 ## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with this program; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
-## @deftypefn {Command} help @var{name}
+## @deffn {Command} help @var{name}
 ## Display the help text for @var{name}.
 ## If invoked without any arguments, @code{help} prints a list
 ## of all the available operators and functions.
 ## 
 ## For example, the command @kbd{help help} prints a short message
 ## describing the @code{help} command.
 ## 
 ## The help command can give you information about operators, but not the
 ## comma and semicolons that are used as command separators.  To get help
 ## for those, you must type @kbd{help comma} or @kbd{help semicolon}.
 ## @seealso{doc, lookfor, which}
-## @end deftypefn
+## @end deffn
 
 function help (name)
 
   if (nargin == 0)
 
     puts ("\n\
   For help with individual commands and functions type\n\
 \n\
diff --git a/scripts/help/lookfor.m b/scripts/help/lookfor.m
--- a/scripts/help/lookfor.m
+++ b/scripts/help/lookfor.m
@@ -10,20 +10,20 @@
 ## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with this program; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
-## @deftypefn {Command} lookfor @var{str}
-## @deftypefnx {Command} lookfor -all @var{str}
-## @deftypefnx {Function} {[@var{func}, @var{helpstring}] =} lookfor (@var{str})
-## @deftypefnx {Function} {[@var{func}, @var{helpstring}] =} lookfor ('-all', @var{str})
+## @deftypefn  {Command} {} lookfor @var{str}
+## @deftypefnx {Command} {} lookfor -all @var{str}
+## @deftypefnx {Function File} {[@var{func}, @var{helpstring}] =} lookfor (@var{str})
+## @deftypefnx {Function File} {[@var{func}, @var{helpstring}] =} lookfor ('-all', @var{str})
 ## Search for the string @var{str} in all functions found in the current 
 ## function search path.  By default, @code{lookfor} searches for @var{str}
 ## in the first sentence of the help string of each function found.  The entire
 ## help text of each function can be searched if the '-all' argument is 
 ## supplied.  All searches are case insensitive.
 ## 
 ## Called with no output arguments, @code{lookfor} prints the list of 
 ## matching functions to the terminal.  Otherwise, the output arguments 
diff --git a/scripts/help/type.m b/scripts/help/type.m
--- a/scripts/help/type.m
+++ b/scripts/help/type.m
@@ -10,17 +10,19 @@
 ## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with this program; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
-## @deftypefn {Command} type options name @dots{}
+## @deftypefn  {Command} {} type @var{name} @dots{}
+## @deftypefnx {Command} {} type -q @var{name} @dots{}
+## @deftypefnx {Function File} {defs =} type ("@var{name}", @dots{})
 ## Display the definition of each @var{name} that refers to a function.
 ## 
 ## Normally also displays whether each @var{name} is user-defined or built-in;
 ## the @code{-q} option suppresses this behavior.
 ##
 ## If an output argument is requested nothing is displayed.  Instead, a cell 
 ## array of strings is returned, where each element corresponds to the 
 ## definition of each requested function.
diff --git a/scripts/miscellaneous/edit.m b/scripts/miscellaneous/edit.m
--- a/scripts/miscellaneous/edit.m
+++ b/scripts/miscellaneous/edit.m
@@ -12,18 +12,18 @@
 ## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
-## @deftypefn {Command} edit @var{name}
-## @deftypefnx {Command} edit @var{field} @var{value}
+## @deftypefn  {Command} {} edit @var{name}
+## @deftypefnx {Command} {} edit @var{field} @var{value}
 ## @deftypefnx {Command} {@var{value} =} edit get @var{field}
 ## Edit the named function, or change editor settings.
 ##
 ## If @code{edit} is called with the name of a file or function as
 ## its argument it will be opened in a text editor.
 ## 
 ## @itemize @bullet
 ## @item
diff --git a/scripts/miscellaneous/run.m b/scripts/miscellaneous/run.m
--- a/scripts/miscellaneous/run.m
+++ b/scripts/miscellaneous/run.m
@@ -12,21 +12,21 @@
 ## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
-## @deftypefn {Function File} {} run (@var{f})
-## @deftypefnx {Command} {} run @var{f}
+## @deftypefn  {Command} {} run @var{f}
+## @deftypefnx {Function File} {} run (@var{f})
 ## Run scripts in the current workspace that are not necessarily on the
 ## path.  If @var{f} is the script to run, including its path, then @code{run}
-## change the directory to the directory where @var{f} is found.  @code{run}
+## changes the directory to the directory where @var{f} is found.  @code{run}
 ## then executes the script, and returns to the original directory.
 ## @seealso{system}
 ## @end deftypefn
 
 function run (s)
 
   if (nargin != 1)
     print_usage ();
diff --git a/scripts/miscellaneous/what.m b/scripts/miscellaneous/what.m
--- a/scripts/miscellaneous/what.m
+++ b/scripts/miscellaneous/what.m
@@ -12,17 +12,17 @@
 ## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
-## @deftypefn {Command} {} what 
+## @deftypefn  {Command} {} what 
 ## @deftypefnx {Command} {} what @var{dir}
 ## @deftypefnx {Function File} {w =} what (@var{dir})
 ## List the Octave specific files in a directory.  If the variable @var{dir}
 ## is given then check that directory rather than the current directory.  If
 ## a return argument is requested, the files found are returned in the 
 ## structure @var{w}.
 ## @seealso{which}
 ## @end deftypefn
diff --git a/scripts/optimization/fsolve.m b/scripts/optimization/fsolve.m
--- a/scripts/optimization/fsolve.m
+++ b/scripts/optimization/fsolve.m
@@ -15,17 +15,17 @@
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 ##
 ## Author: Jaroslav Hajek <highegg@gmail.com>
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {} fsolve (@var{fcn}, @var{x0}, @var{options})
-## @deftypefnx {Function File} {[@var{x}, @var{fvec}, @var{info}, @var{output}, @var{fjac}]} = fsolve (@var{fcn}, @dots{})
+## @deftypefnx {Function File} {[@var{x}, @var{fvec}, @var{info}, @var{output}, @var{fjac}] =} fsolve (@var{fcn}, @dots{})
 ## Solve a system of nonlinear equations defined by the function @var{fcn}.
 ## @var{fcn} should accepts a vector (array) defining the unknown variables,
 ## and return a vector of left-hand sides of the equations.  Right-hand sides
 ## are defined to be zeros.
 ## In other words, this function attempts to determine a vector @var{x} such 
 ## that @code{@var{fcn} (@var{x})} gives (approximately) all zeros.
 ## @var{x0} determines a starting guess.  The shape of @var{x0} is preserved
 ## in all calls to @var{fcn}, but otherwise it is treated as a column vector.
diff --git a/scripts/pkg/pkg.m b/scripts/pkg/pkg.m
--- a/scripts/pkg/pkg.m
+++ b/scripts/pkg/pkg.m
@@ -12,18 +12,18 @@
 ## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
-## @deftypefn  {Command} pkg @var{command} @var{pkg_name}
-## @deftypefnx {Command} pkg @var{command} @var{option} @var{pkg_name}
+## @deffn  {Command} pkg @var{command} @var{pkg_name}
+## @deffnx {Command} pkg @var{command} @var{option} @var{pkg_name}
 ## This command interacts with the package manager.  Different actions will
 ## be taken depending on the value of @var{command}.
 ##
 ## @table @samp
 ## @item install
 ## Install named packages.  For example,
 ## @example
 ## pkg install image-1.0.0.tar.gz
@@ -188,17 +188,17 @@
 ## @end example
 ##
 ## @noindent
 ## where @code{builddir} is the name of a directory where the temporary
 ## installation will be produced and the binary packages will be found.
 ## The options @code{-verbose} and @code{-nodeps} are respected, while 
 ## the other options are ignored.
 ## @end table
-## @end deftypefn
+## @end deffn
 
 function [local_packages, global_packages] = pkg (varargin)
   ## Installation prefix (FIXME: what should these be on windows?)
   persistent user_prefix = false;
   persistent prefix = -1;
   persistent archprefix = -1;
   persistent local_list = tilde_expand (fullfile ("~", ".octave_packages"));
   persistent global_list = fullfile (OCTAVE_HOME (), "share", "octave",
diff --git a/src/DLD-FUNCTIONS/eigs.cc b/src/DLD-FUNCTIONS/eigs.cc
--- a/src/DLD-FUNCTIONS/eigs.cc
+++ b/src/DLD-FUNCTIONS/eigs.cc
@@ -126,65 +126,59 @@ eigs_complex_func (const ComplexColumnVe
 	}
     }
 
   return retval;
 }
 
 DEFUN_DLD (eigs, args, nargout,
   "-*- texinfo -*-\n\
-@deftypefn {Loadable Function} {@var{d}} = eigs (@var{a})\n\
-@deftypefnx {Loadable Function} {@var{d}} = eigs (@var{a}, @var{k})\n\
-@deftypefnx {Loadable Function} {@var{d}} = eigs (@var{a}, @var{k}, @var{sigma})\n\
-@deftypefnx {Loadable Function} {@var{d}} = eigs (@var{a}, @var{k}, @var{sigma},@var{opts})\n\
-@deftypefnx {Loadable Function} {@var{d}} = eigs (@var{a}, @var{b})\n\
-@deftypefnx {Loadable Function} {@var{d}} = eigs (@var{a}, @var{b}, @var{k})\n\
-@deftypefnx {Loadable Function} {@var{d}} = eigs (@var{a}, @var{b}, @var{k}, @var{sigma})\n\
-@deftypefnx {Loadable Function} {@var{d}} = eigs (@var{a}, @var{b}, @var{k}, @var{sigma}, @var{opts})\n\
-@deftypefnx {Loadable Function} {@var{d}} = eigs (@var{af}, @var{n})\n\
-@deftypefnx {Loadable Function} {@var{d}} = eigs (@var{af}, @var{n}, @var{b})\n\
-@deftypefnx {Loadable Function} {@var{d}} = eigs (@var{af}, @var{n}, @var{k})\n\
-@deftypefnx {Loadable Function} {@var{d}} = eigs (@var{af}, @var{n}, @var{b}, @var{k})\n\
-@deftypefnx {Loadable Function} {@var{d}} = eigs (@var{af}, @var{n}, @var{k}, @var{sigma})\n\
-@deftypefnx {Loadable Function} {@var{d}} = eigs (@var{af}, @var{n}, @var{b}, @var{k}, @var{sigma})\n\
-@deftypefnx {Loadable Function} {@var{d}} = eigs (@var{af}, @var{n}, @var{k}, @var{sigma}, @var{opts})\n\
-@deftypefnx {Loadable Function} {@var{d}} = eigs (@var{af}, @var{n}, @var{b}, @var{k}, @var{sigma}, @var{opts})\n\
-@deftypefnx {Loadable Function} {[@var{v}, @var{d}]} = eigs (@var{a}, @dots{})\n\
-@deftypefnx {Loadable Function} {[@var{v}, @var{d}]} = eigs (@var{af}, @var{n}, @dots{})\n\
-@deftypefnx {Loadable Function} {[@var{v}, @var{d}, @var{flag}]} = eigs (@var{a}, @dots{})\n\
-@deftypefnx {Loadable Function} {[@var{v}, @var{d}, @var{flag}]} = eigs (@var{af}, @var{n}, @dots{})\n\
+@deftypefn  {Loadable Function} {@var{d} =} eigs (@var{a})\n\
+@deftypefnx {Loadable Function} {@var{d} =} eigs (@var{a}, @var{k})\n\
+@deftypefnx {Loadable Function} {@var{d} =} eigs (@var{a}, @var{k}, @var{sigma})\n\
+@deftypefnx {Loadable Function} {@var{d} =} eigs (@var{a}, @var{k}, @var{sigma},@var{opts})\n\
+@deftypefnx {Loadable Function} {@var{d} =} eigs (@var{a}, @var{b})\n\
+@deftypefnx {Loadable Function} {@var{d} =} eigs (@var{a}, @var{b}, @var{k})\n\
+@deftypefnx {Loadable Function} {@var{d} =} eigs (@var{a}, @var{b}, @var{k}, @var{sigma})\n\
+@deftypefnx {Loadable Function} {@var{d} =} eigs (@var{a}, @var{b}, @var{k}, @var{sigma}, @var{opts})\n\
+@deftypefnx {Loadable Function} {@var{d} =} eigs (@var{af}, @var{n})\n\
+@deftypefnx {Loadable Function} {@var{d} =} eigs (@var{af}, @var{n}, @var{b})\n\
+@deftypefnx {Loadable Function} {@var{d} =} eigs (@var{af}, @var{n}, @var{k})\n\
+@deftypefnx {Loadable Function} {@var{d} =} eigs (@var{af}, @var{n}, @var{b}, @var{k})\n\
+@deftypefnx {Loadable Function} {@var{d} =} eigs (@var{af}, @var{n}, @var{k}, @var{sigma})\n\
+@deftypefnx {Loadable Function} {@var{d} =} eigs (@var{af}, @var{n}, @var{b}, @var{k}, @var{sigma})\n\
+@deftypefnx {Loadable Function} {@var{d} =} eigs (@var{af}, @var{n}, @var{k}, @var{sigma}, @var{opts})\n\
+@deftypefnx {Loadable Function} {@var{d} =} eigs (@var{af}, @var{n}, @var{b}, @var{k}, @var{sigma}, @var{opts})\n\
+@deftypefnx {Loadable Function} {[@var{v}, @var{d}] =} eigs (@var{a}, @dots{})\n\
+@deftypefnx {Loadable Function} {[@var{v}, @var{d}] =} eigs (@var{af}, @var{n}, @dots{})\n\
+@deftypefnx {Loadable Function} {[@var{v}, @var{d}, @var{flag}] =} eigs (@var{a}, @dots{})\n\
+@deftypefnx {Loadable Function} {[@var{v}, @var{d}, @var{flag}] =} eigs (@var{af}, @var{n}, @dots{})\n\
 Calculate a limited number of eigenvalues and eigenvectors of @var{a},\n\
 based on a selection criteria.  The number eigenvalues and eigenvectors to\n\
 calculate is given by @var{k} whose default value is 6.\n\
 \n\
 By default @code{eigs} solve the equation\n\
-@iftex\n\
 @tex\n\
 $A \\nu = \\lambda \\nu$\n\
 @end tex\n\
-@end iftex\n\
 @ifinfo\n\
 @code{A * v = lambda * v}\n\
 @end ifinfo\n\
 , where\n\
-@iftex\n\
 @tex\n\
 $\\lambda$ is a scalar representing one of the eigenvalues, and $\\nu$\n\
 @end tex\n\
-@end iftex\n\
 @ifinfo\n\
 @code{lambda} is a scalar representing one of the eigenvalues, and @code{v}\n\
 @end ifinfo\n\
 is the corresponding eigenvector.  If given the positive definite matrix\n\
 @var{B} then @code{eigs} solves the general eigenvalue equation\n\
-@iftex\n\
 @tex\n\
 $A \\nu = \\lambda B \\nu$\n\
 @end tex\n\
-@end iftex\n\
 @ifinfo\n\
 @code{A * v = lambda * B * v}\n\
 @end ifinfo\n\
 .\n\
 \n\
 The argument @var{sigma} determines which eigenvalues are returned.\n\
 @var{sigma} can be either a scalar or a string.  When @var{sigma} is a scalar,\n\
 the @var{k} eigenvalues closest to @var{sigma} are returned.  If @var{sigma}\n\
@@ -299,22 +293,22 @@ the @var{k} eigenvectors corresponding t
 eigenvalues themselves are then returned in @var{d} in the form of a\n\
 @var{n}-by-@var{k} matrix, where the elements on the diagonal are the\n\
 eigenvalues.\n\
 \n\
 Given a third return argument @var{flag}, @code{eigs} also returns the status\n\
 of the convergence.  If @var{flag} is 0, then all eigenvalues have converged,\n\
 otherwise not.\n\
 \n\
-This function is based on the @sc{Arpack} package, written by R Lehoucq,\n\
+This function is based on the @sc{arpack} package, written by R Lehoucq,\n\
 K Maschhoff, D Sorensen and C Yang.  For more information see\n\
 @url{http://www.caam.rice.edu/software/ARPACK/}.\n\
 \n\
-@end deftypefn\n\
-@seealso{eig, svds}")
+@seealso{eig, svds}\n\
+@end deftypefn")
 {
   octave_value_list retval;
 #ifdef HAVE_ARPACK
   int nargin = args.length ();
   std::string fcn_name;
   octave_idx_type n = 0;
   octave_idx_type k = 6;
   Complex sigma = 0.;
diff --git a/src/DLD-FUNCTIONS/lu.cc b/src/DLD-FUNCTIONS/lu.cc
--- a/src/DLD-FUNCTIONS/lu.cc
+++ b/src/DLD-FUNCTIONS/lu.cc
@@ -590,19 +590,18 @@ bool check_lu_dims (const octave_value& 
   octave_idx_type m = l.rows (), k = u.rows (), n = u.columns ();
   return ((l.ndims () == 2 && u.ndims () == 2 && k == l.columns ())
             && k == std::min (m, n) &&
             (p.is_undefined () || p.rows () == m));
 }
 
 DEFUN_DLD (luupdate, args, ,
   "-*- texinfo -*-\n\
-@deftypefn {Loadable Function} {[@var{L}, @var{U}] =} luupdate (@var{l}, @var{u}, @var{x}, @var{y})\n\
-@deftypefnx {Loadable Function} {[@var{L}, @var{U}, @var{P}] =}\
-luupdate (@var{L}, @var{U}, @var{P}, @var{x}, @var{y})\n\
+@deftypefn  {Loadable Function} {[@var{L}, @var{U}] =} luupdate (@var{l}, @var{u}, @var{x}, @var{y})\n\
+@deftypefnx {Loadable Function} {[@var{L}, @var{U}, @var{P}] =} luupdate (@var{L}, @var{U}, @var{P}, @var{x}, @var{y})\n\
 Given an LU@tie{}factorization of a real or complex matrix\n\
 @w{@var{A} = @var{L}*@var{U}}, @var{L}@tie{}lower unit trapezoidal and\n\
 @var{U}@tie{}upper trapezoidal, return the LU@tie{}factorization\n\
 of @w{@var{A} + @var{x}*@var{y}.'}, where @var{x} and @var{y} are\n\
 column vectors (rank-1 update) or matrices with equal number of columns\n\
 (rank-k update).\n\
 Optionally, row-pivoted updating can be used by supplying\n\
 a row permutation (pivoting) matrix @var{P};\n\
@@ -628,18 +627,17 @@ or\n\
 \n\
 The first form uses the unpivoted algorithm, which is faster, but less stable.\n\
 The second form uses a slower pivoted algorithm, which is more stable.\n\
 \n\
 Note that the matrix case is done as a sequence of rank-1 updates;\n\
 thus, for k large enough, it will be both faster and more accurate to recompute\n\
 the factorization from scratch.\n\
 @seealso{lu,qrupdate,cholupdate}\n\
-@end deftypefn\n\
-")
+@end deftypefn")
 {
   octave_idx_type nargin = args.length ();
   octave_value_list retval;
 
   bool pivoted = nargin == 5;
 
   if (nargin != 4 && nargin != 5)
     {
diff --git a/src/debug.cc b/src/debug.cc
--- a/src/debug.cc
+++ b/src/debug.cc
@@ -955,55 +955,59 @@ do_dbupdown (const octave_value_list& ar
 
       if (! octave_call_stack::goto_frame_relative (n, true))
 	error ("%s: invalid stack frame", who.c_str ());
     }
 }
 
 DEFUN (dbup, args, ,
   "-*- texinfo -*-\n\
-@deftypefn {Loadable Function} {} dbup (@var{n})\n\
+@deftypefn  {Loadable Function} {} dbup\n\
+@deftypefnx {Loadable Function} {} dbup (@var{n})\n\
 In debugging mode, move up the execution stack @var{n} frames.\n\
 If @var{n} is omitted, move up one frame.\n\
 @seealso{dbstack}\n\
 @end deftypefn")
 {
   octave_value retval;
 
   do_dbupdown (args, "dbup");
 
   return retval;
 }
 
 DEFUN (dbdown, args, ,
   "-*- texinfo -*-\n\
-@deftypefn {Loadable Function} {} dbdown (@var{n})\n\
+@deftypefn  {Loadable Function} {} dbdown\n\
+@deftypefnx {Loadable Function} {} dbdown (@var{n})\n\
 In debugging mode, move down the execution stack @var{n} frames.\n\
 If @var{n} is omitted, move down one frame.\n\
 @seealso{dbstack}\n\
 @end deftypefn")
 {
   octave_value retval;
 
   do_dbupdown (args, "dbdown");
 
   return retval;
 }
 
 DEFUN (dbstep, args, ,
   "-*- texinfo -*-\n\
-@deftypefn {Command} {} dbstep @var{n}\n\
+@deftypefn  {Command} {} dbstep\n\
+@deftypefnx {Command} {} dbstep @var{n}\n\
 @deftypefnx {Command} {} dbstep in\n\
 @deftypefnx {Command} {} dbstep out\n\
-In debugging mode, execute the next @var{n} lines of code.  If @var{n} is\n\
-omitted execute the next line of code.  If the next line of code is itself\n\
+In debugging mode, execute the next @var{n} lines of code.\n\
+If @var{n} is omitted , execute the next single line of code.\n\
+If the next line of code is itself\n\
 defined in terms of an m-file remain in the existing function.\n\
 \n\
 Using @code{dbstep in} will cause execution of the next line to step into\n\
-any m-files defined on the next line.  Using @code{dbstep out} with cause\n\
+any m-files defined on the next line.  Using @code{dbstep out} will cause\n\
 execution to continue until the current function returns.\n\
 @seealso{dbcont, dbquit}\n\
 @end deftypefn")
 {
   if (Vdebugging)
     {
       int nargin = args.length ();
       
@@ -1059,19 +1063,19 @@ execution to continue until the current 
 
   return octave_value_list ();
 }
 
 DEFALIAS (dbnext, dbstep);
 
 DEFUN (dbcont, args, ,
   "-*- texinfo -*-\n\
-@deftypefn {Command} {} dbcont ()\n\
+@deftypefn {Command} {} dbcont\n\
 In debugging mode, quit debugging mode and continue execution.\n\
-@seealso{dbstep, dbstep}\n\
+@seealso{dbstep, dbquit}\n\
 @end deftypefn")
 {
   if (Vdebugging)
     {
       if (args.length () == 0)
 	{
 	  Vdebugging = false;
 
@@ -1083,17 +1087,17 @@ In debugging mode, quit debugging mode a
   else
     error ("dbcont: can only be called in debug mode");
 
   return octave_value_list ();
 }
 
 DEFUN (dbquit, args, ,
   "-*- texinfo -*-\n\
-@deftypefn {Command} {} dbquit ()\n\
+@deftypefn {Command} {} dbquit\n\
 In debugging mode, quit debugging mode and return to the top level.\n\
 @seealso{dbstep, dbcont}\n\
 @end deftypefn")
 {
   if (Vdebugging)
     {
       if (args.length () == 0)
 	{
@@ -1107,17 +1111,17 @@ In debugging mode, quit debugging mode a
   else
     error ("dbquit: can only be called in debug mode");
 
   return octave_value_list ();
 }
 
 DEFUN (isdebugmode, args, ,
   "-*- texinfo -*-\n\
-@deftypefn {Command} {} isdebugmode ()\n\
+@deftypefn {Loadable Function} {} isdebugmode ()\n\
 Return true if debug mode is on, otherwise false.\n\
 @seealso{dbstack, dbclear, dbstop, dbstatus}\n\
 @end deftypefn")
 {
   octave_value retval;
 
   if (args.length () == 0)
     retval = Vdebugging;
diff --git a/src/octave.cc b/src/octave.cc
--- a/src/octave.cc
+++ b/src/octave.cc
@@ -920,17 +920,17 @@ for an example of how to create an execu
   else
     print_usage ();
 
   return retval;
 }
 
 DEFUN (program_invocation_name, args, ,
   "-*- texinfo -*-\n\
-@deftypefn {Built-in Function} program_invocation_name ()\n\
+@deftypefn {Built-in Function} {} program_invocation_name ()\n\
 Return the name that was typed at the shell prompt to run Octave.\n\
 \n\
 If executing a script from the command line (e.g., @code{octave foo.m})\n\
 or using an executable Octave script, the program name is set to the\n\
 name of the script.  @xref{Executable Octave Programs}, for an example of\n\
 how to create an executable Octave script.\n\
 @seealso{program_name}\n\
 @end deftypefn")
diff --git a/src/syscalls.cc b/src/syscalls.cc
--- a/src/syscalls.cc
+++ b/src/syscalls.cc
@@ -1889,17 +1889,17 @@ if the child process has stopped but is 
 }
 
 #if !defined (WCONTINUE)
 #define WCONTINUE 0
 #endif
 
 DEFUNX ("WCONTINUE", FWCONTINUE, args, ,
   "-*- texinfo -*-\n\
-@deftypefn {Built-in Function} WCONINTUE ()\n\
+@deftypefn {Built-in Function} {} WCONTINUE ()\n\
 Return the numerical value of the option argument that may be\n\
 passed to @code{waitpid} to indicate that it should also return\n\
 if a stopped child has been resumed by delivery of a @code{SIGCONT}\n\
 signal.\n\
 @seealso{waitpid, WNOHANG, WUNTRACED}\n\
 @end deftypefn")
 {
   return const_value (args, WCONTINUE);
diff --git a/src/variables.cc b/src/variables.cc
--- a/src/variables.cc
+++ b/src/variables.cc
@@ -1595,20 +1595,20 @@ do_who (int argc, const string_vector& a
       octave_stdout << "\n";
     }
 
   return retval;
 }
 
 DEFUN (who, args, nargout,
   "-*- texinfo -*-\n\
-@deffn  {Command} who\n\
-@deffnx {Command} who pattern @dots{}\n\
-@deffnx {Command} who option pattern @dots{}\n\
-@deffnx {Command} C = who(\"pattern\", @dots{})\n\
+@deftypefn  {Command} {} who\n\
+@deftypefnx {Command} {} who pattern @dots{}\n\
+@deftypefnx {Command} {} who option pattern @dots{}\n\
+@deftypefnx {Command} {C =} who(\"pattern\", @dots{})\n\
 List currently defined variables matching the given patterns.  Valid\n\
 pattern syntax is the same as described for the @code{clear} command.\n\
 If no patterns are supplied, all variables are listed.\n\
 By default, only variables visible in the local scope are displayed.\n\
 \n\
 The following are valid options but may not be combined.\n\
 \n\
 @table @code\n\
@@ -1622,17 +1622,17 @@ the @code{regexp} function is used.\n\
 The next argument is treated as a filename.  All variables found within the\n\
 specified file are listed.  No patterns are accepted when reading variables\n\
 from a file.\n\
 @end table\n\
 \n\
 If called as a function, return a cell array of defined variable names\n\
 matching the given patterns.\n\
 @seealso{whos, regexp}\n\
-@end deffn")
+@end deftypefn")
 {
   octave_value retval;
 
   if (nargout < 2)
     {
       int argc = args.length () + 1;
 
       string_vector argv = args.make_argv ("who");
@@ -1643,20 +1643,20 @@ matching the given patterns.\n\
   else
     print_usage ();
 
   return retval;
 }
 
 DEFUN (whos, args, nargout,
   "-*- texinfo -*-\n\
-@deffn  {Command} whos\n\
-@deffnx {Command} whos pattern @dots{}\n\
-@deffnx {Command} whos option pattern @dots{}\n\
-@deffnx {Command} S = whos(\"pattern\", @dots{})\n\
+@deftypefn  {Command} {} whos\n\
+@deftypefnx {Command} {} whos pattern @dots{}\n\
+@deftypefnx {Command} {} whos option pattern @dots{}\n\
+@deftypefnx {Command} {S =} whos(\"pattern\", @dots{})\n\
 Provide detailed information on currently defined variables matching the\n\
 given patterns.  Options and pattern syntax are the same as for the\n\
 @code{who} command.  Extended information about each variable is\n\
 summarized in a table with the following default entries.\n\
 \n\
 @table @asis\n\
 @item Attr\n\
 Attributes of the listed variable.  Possible attributes are:\n\
@@ -1683,17 +1683,17 @@ cell, and struct.\n\
 The table can be customized to display more or less information through\n\
 the function @code{whos_line_format}.\n\
 \n\
 If @code{whos} is called as a function, return a struct array of defined\n\
 variable names matching the given patterns.  Fields in the structure\n\
 describing each variable are: name, size, bytes, class, global, sparse, \n\
 complex, nesting, persistent.\n\
 @seealso{who, whos_line_format}\n\
-@end deffn")
+@end deftypefn")
 {
   octave_value retval;
 
   if (nargout < 2)
     {
       int argc = args.length () + 1;
 
       string_vector argv = args.make_argv ("whos");
