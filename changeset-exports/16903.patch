# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1373045330 14400
#      Fri Jul 05 13:28:50 2013 -0400
# Node ID f21194531877e4ca405f574c38159e3ed4ae32ab
# Parent  51c1076a9c1352065d6cb4e5182253122879d68a
improve character string handling in the lexer

* lex.ll: Add calls to lexer_debug for character string patterns.
Attempt to be consistent with handling of backslash characters in
patterns passed to lexer_debug.
(<DQ_STRING_START>\\{NL}): Handle EOF and EOB conditions explicitly.
(octave_base_lexer::display_start_state): Handle DQ_STRING_START and
SQ_STRING_START states.

diff --git a/libinterp/parse-tree/lex.ll b/libinterp/parse-tree/lex.ll
--- a/libinterp/parse-tree/lex.ll
+++ b/libinterp/parse-tree/lex.ll
@@ -447,17 +447,17 @@ ANY_INCLUDING_NL (.|{NL})
 
 %{
 // Start of a block comment.  If the comment marker appears immediately
 // after a block of full-line comments, finish the full line comment
 // block.
 %}
 
 ^{S}*{CCHAR}\{{S}*{NL} {
-    curr_lexer->lexer_debug ("^{S}*{CCHAR}\{{S}*{NL}");
+    curr_lexer->lexer_debug ("^{S}*{CCHAR}\\{{S}*{NL}");
 
     yyless (0);
 
     if (curr_lexer->start_state () == LINE_COMMENT_START)
       {
         if (! curr_lexer->comment_text.empty ())
           curr_lexer->finish_comment (octave_comment_elt::full_line);
 
@@ -466,17 +466,17 @@ ANY_INCLUDING_NL (.|{NL})
 
     curr_lexer->decrement_promptflag ();
 
     curr_lexer->push_start_state (BLOCK_COMMENT_START);
 
   }
 
 <BLOCK_COMMENT_START>^{S}*{CCHAR}\{{S}*{NL} {
-    curr_lexer->lexer_debug ("<BLOCK_COMMENT_START>^{S}*{CCHAR}\{{S}*{NL}");
+    curr_lexer->lexer_debug ("<BLOCK_COMMENT_START>^{S}*{CCHAR}\\{{S}*{NL}");
 
     curr_lexer->input_line_number++;
     curr_lexer->current_input_column = 1;
 
     if (curr_lexer->block_comment_nesting_level)
       curr_lexer->comment_text = "\n";
 
     curr_lexer->block_comment_nesting_level++;
@@ -624,73 +624,144 @@ ANY_INCLUDING_NL (.|{NL})
     curr_lexer->pop_start_state ();
   }
 
 %{
 // Double-quoted character strings.
 %}
 
 <DQ_STRING_START>\"\" {
+    curr_lexer->lexer_debug ("<DQ_STRING_START>\\\"\\\"");
+
     curr_lexer->current_input_column += yyleng;
     curr_lexer->string_text += '"';
   }
 
 <DQ_STRING_START>\" {
+    curr_lexer->lexer_debug ("<DQ_STRING_START>\\\"");
 
     curr_lexer->pop_start_state ();
 
     curr_lexer->looking_for_object_index = true;
     curr_lexer->at_beginning_of_statement = false;
 
     curr_lexer->push_token (new token (DQ_STRING,
                                        curr_lexer->string_text,
                                        curr_lexer->string_line,
                                        curr_lexer->string_column));
 
     curr_lexer->string_text = "";
 
     return curr_lexer->count_token_internal (DQ_STRING);
   }
 
-<DQ_STRING_START>{NL} {
-    error ("unterminated character string constant");
-    return LEXICAL_ERROR;
-  }
-
 <DQ_STRING_START>\\[0-7]{1,3} {
+    curr_lexer->lexer_debug ("<DQ_STRING_START>\\\\[0-7]{1,3}");
+
     int result;
     sscanf (yytext+1, "%o", &result);
 
     if (result > 0xff)
       error ("invalid octal escape sequence in character string");
     else
       curr_lexer->string_text += static_cast<unsigned char> (result);
   }
 
-<DQ_STRING_START>"\\a" { curr_lexer->string_text += '\a'; }
-<DQ_STRING_START>"\\b" { curr_lexer->string_text += '\b'; }
-<DQ_STRING_START>"\\f" { curr_lexer->string_text += '\f'; }
-<DQ_STRING_START>"\\n" { curr_lexer->string_text += '\n'; }
-<DQ_STRING_START>"\\r" { curr_lexer->string_text += '\r'; }
-<DQ_STRING_START>"\\t" { curr_lexer->string_text += '\t'; }
-<DQ_STRING_START>"\\v" { curr_lexer->string_text += '\v'; }
-
-<DQ_STRING_START>\\{ANY_INCLUDING_NL} {
+<DQ_STRING_START>"\\a" {
+    curr_lexer->lexer_debug ("<DQ_STRING_START>\"\\\\a\"");
+
+    curr_lexer->string_text += '\a';
+  }
+
+<DQ_STRING_START>"\\b" {
+    curr_lexer->lexer_debug ("<DQ_STRING_START>\"\\\\b\"");
+
+    curr_lexer->string_text += '\b';
+  }
+
+<DQ_STRING_START>"\\f" {
+    curr_lexer->lexer_debug ("<DQ_STRING_START>\"\\\\f\"");
+
+    curr_lexer->string_text += '\f';
+  }
+
+<DQ_STRING_START>"\\n" {
+    curr_lexer->lexer_debug ("<DQ_STRING_START>\"\\\\n\"");
+
+    curr_lexer->string_text += '\n';
+  }
+
+<DQ_STRING_START>"\\r" {
+    curr_lexer->lexer_debug ("<DQ_STRING_START>\"\\\\r\"");
+
+    curr_lexer->string_text += '\r';
+  }
+
+<DQ_STRING_START>"\\t" {
+    curr_lexer->lexer_debug ("<DQ_STRING_START>\"\\\\t\"");
+
+    curr_lexer->string_text += '\t';
+  }
+
+<DQ_STRING_START>"\\v" {
+    curr_lexer->lexer_debug ("<DQ_STRING_START>\"\\\\v\"");
+
+    curr_lexer->string_text += '\v';
+  }
+
+<DQ_STRING_START>\\{NL} {
+    curr_lexer->lexer_debug ("<DQ_STRING_START>\\\\{NL}");
+
+    curr_lexer->decrement_promptflag ();
+    curr_lexer->input_line_number++;
+    curr_lexer->current_input_column = 1;
+
+    // We can't rely on the trick used elsewhere of sticking ASCII 1
+    // in the intput buffer and recognizing it as a special case
+    // because ASCII 1 is a valid character for a character string.
+
+    if (curr_lexer->at_end_of_buffer ())
+      return -1;
+
+    if (curr_lexer->at_end_of_file ())
+      return curr_lexer->handle_end_of_input ();
+
+    // Otherwise, just keep going with the text from the current buffer.
+  }
+
+<DQ_STRING_START>\\. {
+    curr_lexer->lexer_debug ("<DQ_STRING_START>\\\\.");
+
     curr_lexer->string_text += yytext[1];
   }
 
-<DQ_STRING_START>[^\\\n\"]+ {
+<DQ_STRING_START>[^\\\r\n\"]+ {
+    curr_lexer->lexer_debug ("<DQ_STRING_START>[^\\\\\\r\\n\\\"]+");
+
     curr_lexer->string_text += yytext;
   }
 
+<DQ_STRING_START>{NL} {
+    curr_lexer->lexer_debug ("<DQ_STRING_START>{NL}");
+
+    curr_lexer->input_line_number++;
+    curr_lexer->current_input_column = 1;
+
+    error ("unterminated character string constant");
+
+    return LEXICAL_ERROR;
+  }
+
 %{
 // Single-quoted character strings.
 %}
 
 <SQ_STRING_START>[^\'\n\r]*\' {
+    curr_lexer->lexer_debug ("<SQ_STRING_START>[^\\'\\n\\r]*\\'");
+
     yytext[yyleng-1] = 0;
     curr_lexer->string_text += yytext;
 
     curr_lexer->current_input_column += yyleng;
 
     int c = curr_lexer->text_yyinput ();
 
     if (c == '\'')
@@ -715,17 +786,23 @@ ANY_INCLUDING_NL (.|{NL})
 
         curr_lexer->string_text = "";
 
         return curr_lexer->count_token_internal (SQ_STRING);
       }      
   }
 
 <SQ_STRING_START>{NL} {
+    curr_lexer->lexer_debug ("<SQ_STRING_START>{NL}");
+
+    curr_lexer->input_line_number++;
+    curr_lexer->current_input_column = 1;
+
     error ("unterminated character string constant");
+
     return LEXICAL_ERROR;
   }
 
 %{
 // Imaginary numbers.
 %}
 
 {NUMBER}{Im} {
@@ -759,17 +836,17 @@ ANY_INCLUDING_NL (.|{NL})
 
 %{
 // Real numbers.  Don't grab the '.' part of a dot operator as part of
 // the constant.
 %}
 
 {D}+/\.[\*/\\^\'] |
 {NUMBER} {
-    curr_lexer->lexer_debug ("{D}+/\\.[\\*/\\^\\']|{NUMBER}");
+    curr_lexer->lexer_debug ("{D}+/\\.[\\*/\\\\^\\']|{NUMBER}");
 
     if (curr_lexer->previous_token_may_be_command ()
         &&  curr_lexer->space_follows_previous_token ())
       {
         yyless (0);
         curr_lexer->push_start_state (COMMAND_START);
       }
     else
@@ -1029,17 +1106,17 @@ ANY_INCLUDING_NL (.|{NL})
       }
   }
 
 %{
 // Double quotes always begin strings.
 %}
 
 \" {
-    curr_lexer->lexer_debug ("\"");
+    curr_lexer->lexer_debug ("\\\"");
 
     if (curr_lexer->previous_token_may_be_command ()
         &&  curr_lexer->space_follows_previous_token ())
       {
         curr_lexer->current_input_column++;
         curr_lexer->push_start_state (COMMAND_START);
         curr_lexer->begin_string (DQ_STRING_START);
       }
@@ -2883,16 +2960,24 @@ octave_base_lexer::display_start_state (
     case BLOCK_COMMENT_START:
       std::cerr << "BLOCK_COMMENT_START" << std::endl;
       break;
 
     case LINE_COMMENT_START:
       std::cerr << "LINE_COMMENT_START" << std::endl;
       break;
 
+    case DQ_STRING_START:
+      std::cerr << "DQ_STRING_START" << std::endl;
+      break;
+
+    case SQ_STRING_START:
+      std::cerr << "SQ_STRING_START" << std::endl;
+      break;
+
     default:
       std::cerr << "UNKNOWN START STATE!" << std::endl;
       break;
     }
 }
 
 int
 octave_base_lexer::handle_op (const char *pattern, int tok, bool bos)
