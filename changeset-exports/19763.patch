# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1424329873 18000
#      Thu Feb 19 02:11:13 2015 -0500
# Node ID 84772c2722887f69183c2842d09dc3e65ad28024
# Parent  eebe8da58f8d40054642ee55c21d71490ec1ccec
style fixes

* __osmesa_print__.cc: Style fixes.  Use gnulib::fopen.  Use
unwind_protet to preserve visibility.

diff --git a/libinterp/dldfcn/__osmesa_print__.cc b/libinterp/dldfcn/__osmesa_print__.cc
--- a/libinterp/dldfcn/__osmesa_print__.cc
+++ b/libinterp/dldfcn/__osmesa_print__.cc
@@ -43,74 +43,83 @@ from git://anongit.freedesktop.org/mesa/
 #endif
 
 #if defined (HAVE_OSMESA) && defined (HAVE_OPENGL)
 static void
 close_fcn (FILE *f)
 {
   gnulib::fclose (f);
 }
+
+static void
+reset_visibility (figure::properties *fp)
+{
+  fp->set_visible ("on");
+}
 #endif
 
 DEFUN_DLD(__osmesa_print__, args, ,
           "-*- texinfo -*-\n\
 @deftypefn {Loadable Function}  __osmesa_print__ (@var{h}, @var{file}, @var{term})\n\
 @deftypefnx {Loadable Function} {@var{img}  =} __osmesa_print__ (@var{h})\n\
 Print figure @var{h} using OSMesa and gl2ps for vector formats.\n\
 \n\
 This is a private internal function.\n\
+\n\
 The first method calls gl2ps with the appropriate @var{term} and writes\n\
 the output of gl2ps to @var{file}. If the first character of @var{file}\n\
-is @qcode{|}, then a process is started and the output of gl2ps is piped to it.\n\
+is @qcode{|}, then a process is started and the output of gl2ps is piped\n\
+to it.\n\
 \n\
 Valid options for @var{term}, which can be concatenated in one string, are:\n\
 @table @asis\n\
 @item @qcode{eps}, @qcode{pdf}, @qcode{ps}, @qcode{svg}, @qcode{pgf}, @qcode{tex}\n\
 Select output format.\n\
 @item @qcode{is2D}\n\
 Use GL2PS_SIMPLE_SORT instead of GL2PS_BSP_SORT as Z-depth sorting algorithm.\n\
 @item @qcode{notext}\n\
 Don't render text.\n\
 @end table\n\
 \n\
-The second method doesn't use gl2ps and returns a RGB image in @var{img} instead.\n\
+The second method doesn't use gl2ps and returns a RGB image in @var{img}\n\
+instead.\n\
 \n\
 @end deftypefn")
 {
   octave_value_list retval;
 
 #if ! defined (HAVE_OSMESA)
-  gripe_disabled_feature ("__osmesa_print__", "Offscreen rendering");
+  gripe_disabled_feature ("__osmesa_print__", "offscreen rendering");
 #else
 
   int nargin = args.length ();
 
   if (! (nargin == 1 || nargin == 3))
     {
       print_usage ();
       return retval;
     }
 
-  if ((nargin == 3))
+  if (nargin == 3)
     {
-      if(! (args(1).is_string () && args(2).is_string ()))
+      if (! (args(1).is_string () && args(2).is_string ()))
         {
           error ("__osmesa_print__: FILE and TERM has to be strings");
           return retval;
         }
 
-      #ifndef HAVE_GL2PS_H
+#ifndef HAVE_GL2PS_H
         error ("__osmesa_print__: Octave has been compiled without gl2ps");
         return retval;
-      #endif
+#endif
     }
 
   int h = args(0).double_value ();
   graphics_object fobj = gh_manager::get_object (h);
-  if (! (fobj &&  fobj.isa ("figure")))
+  if (! (fobj && fobj.isa ("figure")))
     {
       error ("__osmesa_print__: H has to be a valid figure handle");
       return retval;
     }
 
   figure::properties& fp =
     dynamic_cast<figure::properties&> (fobj.get_properties ());
 
@@ -134,30 +143,38 @@ The second method doesn't use gl2ps and 
   // Bind the buffer to the context and make it current
   if (! OSMesaMakeCurrent (ctx, buffer, GL_UNSIGNED_BYTE, Width, Height))
     {
       error ("__osmesa_print__: OSMesaMakeCurrent failed!\n");
       return retval;
     }
 
   // Test for a bug in OSMesa with version < 9.0
-  // Unfortunately the macros OSMESA_MAJOR_VERSION and OSMESA_MINOR_VERSION weren't
-  // updated between many releases and can't be used for detection therefore.
-  // (Version 8.0 until 9.1.4 all return MAJOR 6, MINOR 5)
+  //
+  // Unfortunately the macros OSMESA_MAJOR_VERSION and
+  // OSMESA_MINOR_VERSION weren't updated between many releases and
+  // can't be used for detection.  (Version 8.0 until 9.1.4 all return
+  // MAJOR 6, MINOR 5)
   int z, s;
   glGetIntegerv (GL_DEPTH_BITS, &z);
   glGetIntegerv (GL_STENCIL_BITS, &s);
-  if ((z != 16) || (s != 0))
+  if (z != 16 || s != 0)
     error ("__osmesa_print__: Depth and stencil doesn't match,"
            " are you sure you are using OSMesa >= 9.0?");
 
-  // check if the figure is visible
+  unwind_protect outer_frame;
+
   bool v = fp.is_visible ();
+
   if (v)
-    fp.set_visible ("off");
+    {
+      outer_frame.add_fcn (reset_visibility, &fp);
+
+      fp.set_visible ("off");
+    }
 
   if (nargin == 3)
     {
       // use gl2ps
       std::string file = args(1).string_value ();
       std::string term = args(2).string_value ();
 
       if (! error_state)
@@ -167,17 +184,17 @@ The second method doesn't use gl2ps and 
             {
               // create process and pipe gl2ps output to it
               std::string cmd = file.substr (pos);
               gl2ps_print (fobj, cmd, term);
             }
           else
             {
               // write gl2ps output directly to file
-              FILE *filep = fopen (file.c_str (), "w");
+              FILE *filep = gnulib::fopen (file.c_str (), "w");
 
               if (filep)
                 {
                   unwind_protect frame;
 
                   frame.add_fcn (close_fcn, filep);
 
                   glps_renderer rend (filep, term);
@@ -220,20 +237,16 @@ The second method doesn't use gl2ps and 
       idx(0) = idx_vector::make_range (Height - 1, -1, Height);
       idx(1) = idx_vector::colon;
 
       // Remove alpha channel
       idx(2) = idx_vector (0, 3);
       retval = octave_value (img.permute (perm). index(idx));
     }
 
-  // restore visibility if necessary
-  if (v)
-    fp.set_visible ("on");
-
   OSMesaDestroyContext (ctx);
 
 #endif
   return retval;
 }
 
 /*
 %!testif HAVE_OSMESA
