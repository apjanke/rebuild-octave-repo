# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1364318794 14400
#      Tue Mar 26 13:26:34 2013 -0400
# Node ID c97e82b2b5b9677bd74da4d4a2f4559e9608d749
# Parent  4e7a9f950cdcce34ce078406cf52039f293bcc02
allow initial args to be passed to input hook functions

* input.cc (hook_function::eval, base_hook_function::eval):
New argument, intial_args.
(named_hook_function::eval): Likewise.  Append data to initial_args
and pass to feval.
(fcn_handle_hook_function::eval): Likewise.  Append data to
initial_args and pass to do_multi_index_op.
(process_input_event_hook_functions): New arg, initial_args.  Pass to
hook_function::eval.

diff --git a/libinterp/interpfcn/input.cc b/libinterp/interpfcn/input.cc
--- a/libinterp/interpfcn/input.cc
+++ b/libinterp/interpfcn/input.cc
@@ -133,17 +133,17 @@ public:
   base_hook_function (const base_hook_function&) : count (1) { }
 
   virtual ~base_hook_function (void) { }
 
   virtual std::string id (void) { return std::string (); }
 
   virtual bool is_valid (void) { return false; }
 
-  virtual void eval (void) { }
+  virtual void eval (const octave_value_list&) { }
 
 protected:
 
   size_t count;
 };
 
 class
 hook_function
@@ -185,38 +185,43 @@ public:
 
     return *this;
   }
 
   std::string id (void) { return rep->id (); }
 
   bool is_valid (void) { return rep->is_valid (); }
 
-  void eval (void) { rep->eval (); }
+  void eval (const octave_value_list& initial_args)
+  {
+    rep->eval (initial_args);
+  }
 
 private:
 
   base_hook_function *rep;
 };
 
 class
 named_hook_function : public base_hook_function
 {
 public:
 
   named_hook_function (const std::string& n, const octave_value& d)
     : name (n), data (d)
   { }
 
-  void eval (void)
+  void eval (const octave_value_list& initial_args)
   {
+    octave_value_list args = initial_args;
+
     if (data.is_defined ())
-      feval (name, data, 0);
-    else
-      feval (name, octave_value_list (), 0);
+      args.append (data);
+
+    feval (name, args, 0);
   }
 
   std::string id (void) { return name; }
 
   bool is_valid (void) { return is_valid_function (name); }
 
 private:
 
@@ -240,22 +245,24 @@ public:
         valid = true;
 
         std::ostringstream buf;
         buf << fh;
         ident = fh->fcn_name () + ":" + buf.str ();
       }
   }
 
-  void eval (void)
+  void eval (const octave_value_list& initial_args)
   {
+    octave_value_list args = initial_args;
+
     if (data.is_defined ())
-      fcn_handle.do_multi_index_op (0, data);
-    else
-      fcn_handle.do_multi_index_op (0, octave_value_list ());
+      args.append (data);
+
+    fcn_handle.do_multi_index_op (0, args);
   }
 
   std::string id (void) { return ident; }
 
   bool is_valid (void) { return valid; }
 
 private:
 
@@ -286,29 +293,31 @@ hook_function::hook_function (const octa
 
 typedef std::map<std::string, hook_function> hook_fcn_map_type;
 
 static hook_fcn_map_type pre_input_event_hook_fcn_map;
 static hook_fcn_map_type input_event_hook_fcn_map;
 static hook_fcn_map_type post_input_event_hook_fcn_map;
 
 static void
-process_input_event_hook_functions (hook_fcn_map_type& hook_fcn_map)
+process_input_event_hook_functions
+  (hook_fcn_map_type& hook_fcn_map,
+   const octave_value_list& initial_args = octave_value_list ())
 {
   hook_fcn_map_type::iterator p = hook_fcn_map.begin ();
 
   while (p != hook_fcn_map.end ())
     {
       std::string hook_fcn_id = p->first;
       hook_function hook_fcn = p->second;
 
       hook_fcn_map_type::iterator q = p++;
 
       if (hook_fcn.is_valid ())
-        hook_fcn.eval ();
+        hook_fcn.eval (initial_args);
       else
         hook_fcn_map.erase (q);
     }
 }
 
 // For octave_quit.
 void
 remove_input_event_hook_functions (void)
