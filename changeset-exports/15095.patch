# HG changeset patch
# User Max Brister <max@2bass.com>
# Date 1344006897 18000
#      Fri Aug 03 10:14:57 2012 -0500
# Node ID 9df70a18aa2714e726deb0c8baf33de2fa2e80ad
# Parent  f51f0f288997964ee87576898021768d71f53cde
Correct division by zero check in JIT

* src/jit-typeinfo.cc (jit_typinfo::jit_typinfo): Correct division by zero
check.
* src/pt-jit.cc: Add division by zero tests.

diff --git a/src/jit-typeinfo.cc b/src/jit-typeinfo.cc
--- a/src/jit-typeinfo.cc
+++ b/src/jit-typeinfo.cc
@@ -1157,17 +1157,17 @@ jit_typeinfo::jit_typeinfo (llvm::Module
 
   llvm::BasicBlock *body = fn.new_block ();
   builder.SetInsertPoint (body);
   {
     llvm::BasicBlock *warn_block = fn.new_block ("warn");
     llvm::BasicBlock *normal_block = fn.new_block ("normal");
 
     llvm::Value *zero = llvm::ConstantFP::get (scalar_t, 0);
-    llvm::Value *check = builder.CreateFCmpUEQ (zero, fn.argument (builder, 0));
+    llvm::Value *check = builder.CreateFCmpUEQ (zero, fn.argument (builder, 1));
     builder.CreateCondBr (check, warn_block, normal_block);
 
     builder.SetInsertPoint (warn_block);
     gripe_div0.call (builder);
     builder.CreateBr (normal_block);
 
     builder.SetInsertPoint (normal_block);
     llvm::Value *ret = builder.CreateFDiv (fn.argument (builder, 0),
diff --git a/src/pt-jit.cc b/src/pt-jit.cc
--- a/src/pt-jit.cc
+++ b/src/pt-jit.cc
@@ -1899,9 +1899,32 @@ Test some simple cases that compile.
 %!     endfor
 %!   endfor
 %!   i0 = i0 + 1;
 %! endwhile
 %! expected = ones (ndim, ndim, ndim, ndim);
 %! assert (all (m == expected));
 %! assert (result == sum (expected (:)));
 
+%!function test_divide ()
+%! state = warning ("query", "Octave:divide-by-zero").state;
+%! unwind_protect
+%!   warning ("error", "Octave:divide-by-zero");
+%!   for i=1:1e5
+%!     a = 1;
+%!     a / 0;
+%!   endfor
+%! unwind_protect_cleanup
+%!   warning (state, "Octave:divide-by-zero");
+%! end_unwind_protect
+%!endfunction
+
+%!error <division by zero> test_divide ()
+
+%!test
+%! while 1
+%!   a = 0;
+%!   result = a / 1;
+%!   break;
+%! endwhile
+%! assert (result, 0);
+
 */
