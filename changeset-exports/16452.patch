# HG changeset patch
# User John Donoghue <john.donoghue@ieee.org>
# Date 1365307138 14400
#      Sat Apr 06 23:58:58 2013 -0400
# Node ID 744ff2fe11ce1322672f01830afe2204ea34e8ce
# Parent  d4c3736e1e28c63b9df5fd93a80ecf688f15a9a8
add create script context menu to history window

* history-dockwidget.h (history_doc_widget::command_create_script):
New signal.

* history-dockwidget.cc, history-dockwidget.h
(history_dock_widget::ctxMenu): New menu item, Create script.
(history_dock_widget::handle_contextmenu_create_script): New function.

* file-editor-interface.h (file-editor-interface::request_new_file):
New argument, commands.

* file-editor-tab.h, file-editor-tab.cc (file_editor_tab::new_file):
New argument, commands.

* m-editor/file-editor.h, m-editor/file-editor.cc
(file_editor::new_file, file_editor::request_new_file):
New argument, commands.

* main-window.h, main-window.cc (main_window::new_file):
New argument, commands.
main_window::construct): Connect history_window::command_create_script
signal to main_window::new_file.

diff --git a/libgui/src/history-dockwidget.cc b/libgui/src/history-dockwidget.cc
--- a/libgui/src/history-dockwidget.cc
+++ b/libgui/src/history-dockwidget.cc
@@ -93,16 +93,17 @@ history_dock_widget::construct ()
 
   setFocusProxy (_filter_line_edit);
 }
 
 void history_dock_widget::ctxMenu(const QPoint &xpos) {
     QMenu menu(this);
     menu.addAction(tr("Copy"), this, SLOT(handle_contextmenu_copy(bool)));
     menu.addAction(tr("Evaluate"), this, SLOT(handle_contextmenu_evaluate(bool)));
+    menu.addAction(tr("Create script"), this, SLOT(handle_contextmenu_create_script(bool)));
     menu.exec(_history_list_view->mapToGlobal(xpos));
 }
 
 void history_dock_widget::handle_contextmenu_copy(bool)
 {
   QString text;
   QItemSelectionModel *selectionModel = _history_list_view->selectionModel();
   QModelIndexList rows = selectionModel->selectedRows();
@@ -123,16 +124,34 @@ void history_dock_widget::handle_context
   for (it=rows.begin() ; it != rows.end(); it++) {
     if ((*it).isValid()) {
       emit command_double_clicked ((*it).data().toString()+"\n");
     }
   }
 }
 
 void
+history_dock_widget::handle_contextmenu_create_script (bool)
+{
+  QString text;
+  QItemSelectionModel *selectionModel = _history_list_view->selectionModel ();
+  QModelIndexList rows = selectionModel->selectedRows ();
+
+  for (QModelIndexList::iterator it = rows.begin (); it != rows.end (); it++)
+    {
+      if ((*it).isValid ())
+        text += (*it).data().toString() + "\n";
+    }
+
+  if (text.length () > 0)
+    emit command_create_script (text);
+}
+
+
+void
 history_dock_widget::handle_double_click (QModelIndex modelIndex)
 {
   emit command_double_clicked (modelIndex.data().toString()+"\n");
 }
 
 void
 history_dock_widget::set_history (const QStringList& hist)
 {
diff --git a/libgui/src/history-dockwidget.h b/libgui/src/history-dockwidget.h
--- a/libgui/src/history-dockwidget.h
+++ b/libgui/src/history-dockwidget.h
@@ -50,21 +50,26 @@ public slots:
 
 signals:
 
   void information (const QString& message);
 
   /** Emitted, whenever the user double-clicked a command in the history. */
   void command_double_clicked (const QString& command);
 
+  /** Emitted whenever the user selects command and chooses Create
+      script from popupmenu. */
+  void command_create_script (const QString& commands);
+
 private slots:
 
   void handle_double_click (QModelIndex modelIndex);
   void handle_contextmenu_copy(bool flag);
   void handle_contextmenu_evaluate(bool flag);
+  void handle_contextmenu_create_script(bool flag);
   void ctxMenu(const QPoint &pos);
 
 private:
 
   void construct ();
   QListView *_history_list_view;
   QLineEdit *_filter_line_edit;
   QSortFilterProxyModel _sort_filter_proxy_model;
diff --git a/libgui/src/m-editor/file-editor-interface.h b/libgui/src/m-editor/file-editor-interface.h
--- a/libgui/src/m-editor/file-editor-interface.h
+++ b/libgui/src/m-editor/file-editor-interface.h
@@ -57,17 +57,17 @@ class file_editor_interface : public oct
   handle_update_breakpoint_marker_request (bool insert, const QString& file,
                                            int line) = 0;
 
   virtual void handle_edit_file_request (const QString& file) = 0;
 
   virtual void set_focus () = 0;
 
 public slots:
-  virtual void request_new_file () = 0;
+  virtual void request_new_file (const QString& command = QString ()) = 0;
   virtual void request_open_file () = 0;
   virtual void request_open_file (const QString& openFileName, int line = -1,
                                   bool debug_pointer = false,
                                   bool breakpoint_marker = false,
                                   bool insert = true) = 0;
 //signals:
 
 //protected:
diff --git a/libgui/src/m-editor/file-editor-tab.cc b/libgui/src/m-editor/file-editor-tab.cc
--- a/libgui/src/m-editor/file-editor-tab.cc
+++ b/libgui/src/m-editor/file-editor-tab.cc
@@ -789,20 +789,20 @@ file_editor_tab::load_file(const QString
   set_file_name (fileName);
   update_window_title (false); // window title (no modification)
   _edit_area->setModified (false); // loaded file is not modified yet
 
   return QString ();
 }
 
 void
-file_editor_tab::new_file ()
+file_editor_tab::new_file (const QString &commands)
 {
   update_window_title (false); // window title (no modification)
-  _edit_area->setText ("");
+  _edit_area->setText (commands);
   _edit_area->setModified (false); // new file is not modified yet
 }
 
 void
 file_editor_tab::save_file (const QString& saveFileName, bool remove_on_success)
 {
   // If it is a new file with no name, signal that saveFileAs
   // should be performed.
diff --git a/libgui/src/m-editor/file-editor-tab.h b/libgui/src/m-editor/file-editor-tab.h
--- a/libgui/src/m-editor/file-editor-tab.h
+++ b/libgui/src/m-editor/file-editor-tab.h
@@ -82,17 +82,17 @@ public slots:
   void insert_debugger_pointer (const QWidget *ID, int line = -1);
   void delete_debugger_pointer (const QWidget *ID, int line = -1);
 
   void do_breakpoint_marker (bool insert, const QWidget *ID, int line = -1);
 
   void set_modified (bool modified = true);
 
   QString load_file (const QString& fileName);
-  void new_file ();
+  void new_file (const QString& commands = QString ());
 
   void file_has_changed (const QString& fileName);
 
 signals:
   void file_name_changed (const QString& fileName, const QString& toolTip);
   void editor_state_changed (bool copy_available, const QString& fileName);
   void tab_remove_request ();
   void add_filename_to_list (const QString&, QWidget *);
diff --git a/libgui/src/m-editor/file-editor.cc b/libgui/src/m-editor/file-editor.cc
--- a/libgui/src/m-editor/file-editor.cc
+++ b/libgui/src/m-editor/file-editor.cc
@@ -107,27 +107,27 @@ file_editor::handle_enter_debug_mode (vo
 
 void
 file_editor::handle_exit_debug_mode (void)
 {
   _run_action->setEnabled (true);
 }
 
 void
-file_editor::request_new_file ()
+file_editor::request_new_file (const QString& commands)
 {
   // New file isn't a file_editor_tab function since the file
   // editor tab has yet to be created and there is no object to
   // pass a signal to.  Hence, functionality is here.
 
   file_editor_tab *fileEditorTab = new file_editor_tab (ced);
   if (fileEditorTab)
     {
       add_file_editor_tab (fileEditorTab, "");  // new tab with empty title
-      fileEditorTab->new_file ();               // title is updated here
+      fileEditorTab->new_file (commands);       // title is updated here
       set_focus ();                             // focus editor and new tab
     }
 }
 
 void
 file_editor::request_open_file ()
 {
   // Open file isn't a file_editor_tab function since the file
diff --git a/libgui/src/m-editor/file-editor.h b/libgui/src/m-editor/file-editor.h
--- a/libgui/src/m-editor/file-editor.h
+++ b/libgui/src/m-editor/file-editor.h
@@ -91,17 +91,17 @@ signals:
   void fetab_find (const QWidget* ID);
   void fetab_goto_line (const QWidget* ID, int line = -1);
   void fetab_insert_debugger_pointer (const QWidget* ID, int line = -1);
   void fetab_delete_debugger_pointer (const QWidget* ID, int line = -1);
   void fetab_do_breakpoint_marker (bool insert, const QWidget* ID, int line = -1);
   void fetab_set_focus (const QWidget* ID);
 
 public slots:
-  void request_new_file ();
+  void request_new_file (const QString& commands);
   void request_open_file ();
   void request_mru_open_file ();
   void request_print_file ();
 
   void request_undo ();
   void request_redo ();
   void request_copy ();
   void request_cut ();
diff --git a/libgui/src/main-window.cc b/libgui/src/main-window.cc
--- a/libgui/src/main-window.cc
+++ b/libgui/src/main-window.cc
@@ -98,20 +98,20 @@ main_window::~main_window ()
 
 void
 main_window::focus_command_window (void)
 {
   command_window->focus ();
 }
 
 void
-main_window::new_file ()
+main_window::new_file (const QString& commands)
 {
 #ifdef HAVE_QSCINTILLA
-  _file_editor->request_new_file ();
+  _file_editor->request_new_file (commands);
 #endif
 }
 
 void
 main_window::open_file ()
 {
 #ifdef HAVE_QSCINTILLA
   _file_editor->request_open_file ();
@@ -1017,16 +1017,18 @@ main_window::construct ()
   connect (this,                        SIGNAL (settings_changed (const QSettings *)),
            this,                        SLOT   (notice_settings (const QSettings *)));
   connect (file_browser_window,         SIGNAL (open_file (QString)),
            this,                        SLOT   (open_file (QString)));
   connect (file_browser_window,         SIGNAL (displayed_directory_changed(QString)),
            this,                        SLOT   (set_current_working_directory(QString)));
   connect (this,                        SIGNAL (relay_command_signal (const QString&)),
            command_window,              SLOT   (relay_command (const QString&)));
+  connect (history_window,              SIGNAL (command_create_script (const QString&)),
+           this,                        SLOT   (new_file (const QString&)));
   connect (save_workspace_action,       SIGNAL (triggered ()),
            this,                        SLOT   (handle_save_workspace_request ()));
   connect (load_workspace_action,       SIGNAL (triggered ()),
            this,                        SLOT   (handle_load_workspace_request ()));
   connect (clear_workspace_action,      SIGNAL (triggered ()),
            this,                        SLOT   (handle_clear_workspace_request ()));
   connect (current_directory_tool_button, SIGNAL (clicked ()),
            this,                        SLOT   (browse_for_directory ()));
diff --git a/libgui/src/main-window.h b/libgui/src/main-window.h
--- a/libgui/src/main-window.h
+++ b/libgui/src/main-window.h
@@ -1,11 +1,10 @@
 /*
 
-Copyright (C) 2013 John W. Eaton
 Copyright (C) 2011-2012 Jacob Dawid
 
 This file is part of Octave.
 
 Octave is free software; you can redistribute it and/or modify it
 under the terms of the GNU General Public License as published by the
 Free Software Foundation; either version 3 of the License, or (at your
 option) any later version.
@@ -76,17 +75,17 @@ signals:
   void relay_command_signal (const QString&);
 
 public slots:
   void report_status_message (const QString& statusMessage);
   void handle_save_workspace_request ();
   void handle_load_workspace_request ();
   void handle_clear_workspace_request ();
   void handle_clear_history_request (void);
-  void new_file ();
+  void new_file (const QString& commands = QString ());
   void open_file ();
   void open_file (const QString& file_name);
   void open_online_documentation_page ();
   void open_bug_tracker_page ();
   void open_octave_forge_page ();
   void open_agora_page ();
   void process_settings_dialog_request ();
   void show_about_octave ();
