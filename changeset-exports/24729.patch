# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1518304906 18000
#      Sat Feb 10 18:21:46 2018 -0500
# Node ID 22e60ef42640aa72bd1f1bb03cdecbf4e2d911ca
# Parent  af11cc7cd33639f6081f04ce1fb6e0bc36ed2d8e
deprecate some function installing functions

* defun-int.h (install_builtin_function, alias_builtin,
install_builtin_dispatch): Deprecate.
* __init_qt__.h, __init_qt__.cc (install___init_qt___functions):
New argument, symtab.  Call symtab::install_built_in_function instead
of deprecated install_builtin_function.  Change all uses.

diff --git a/libgui/graphics/__init_qt__.cc b/libgui/graphics/__init_qt__.cc
--- a/libgui/graphics/__init_qt__.cc
+++ b/libgui/graphics/__init_qt__.cc
@@ -26,20 +26,21 @@ along with Octave; see the file COPYING.
 
 #include <QApplication>
 #include <QDir>
 #include <QFileDialog>
 #include <QMetaType>
 #include <QPalette>
 #include <QRegExp>
 
+#include "defun.h"
 #include "graphics.h"
 #include "gtk-manager.h"
 #include "interpreter.h"
-#include "defun.h"
+#include "symtab.h"
 
 #include "Backend.h"
 #include "QtHandlesUtils.h"
 #include "__init_qt__.h"
 
 namespace QtHandles
 {
 
@@ -136,23 +137,27 @@ DEFMETHOD (__init_qt__, interp, , , "")
 DEFUN (__shutdown_qt__, , , "")
 {
   QtHandles::__shutdown__ ();
 
   return octave_value ();
 }
 
 void
-install___init_qt___functions (void)
+install___init_qt___functions (octave::symbol_table& symtab)
 {
-  install_builtin_function (F__init_qt__, "__init_qt__",
-                            "__init_qt__.cc", "");
+  symtab.install_built_in_function
+    ("__init_qt__", octave_value (new octave_builtin
+                                  (F__init_qt__, "__init_qt__",
+                                   "__init_qt__.cc", "")));
 
-  install_builtin_function (F__shutdown_qt__, "__shutdown_qt__",
-                            "__init_qt__.cc", "");
+  symtab.install_built_in_function
+    ("__shutdown_qt__", octave_value (new octave_builtin
+                                      (F__shutdown_qt__, "__shutdown_qt__",
+                                       "__init_qt__.cc", "")));
 }
 
 #if 0
 
 static QStringList
 makeFilterSpecs (const Cell& filters)
 {
   using namespace QtHandles::Utils;
diff --git a/libgui/graphics/__init_qt__.h b/libgui/graphics/__init_qt__.h
--- a/libgui/graphics/__init_qt__.h
+++ b/libgui/graphics/__init_qt__.h
@@ -25,11 +25,16 @@ along with Octave; see the file COPYING.
 
 namespace QtHandles
 {
 
   bool __init__ (void);
 
 }
 
-extern void install___init_qt___functions (void);
+namespace octave
+{
+  class symbol_table;
+}
+
+extern void install___init_qt___functions (octave::symbol_table&);
 
 #endif
diff --git a/libgui/src/main-window.cc b/libgui/src/main-window.cc
--- a/libgui/src/main-window.cc
+++ b/libgui/src/main-window.cc
@@ -114,17 +114,19 @@ namespace octave
             emit octave_ready_signal ();
 
             // Start executing commands in the command window.
 
 #if defined (HAVE_QT_GRAPHICS)
             // The qt graphics toolkit must be initialized before startup
             // files are executed.
 
-            install___init_qt___functions ();
+            symbol_table& symtab = interp.get_symbol_table ();
+
+            install___init_qt___functions (symtab);
 
             Fregister_graphics_toolkit (interp, ovl ("qt"));
 #endif
 
             exit_status = interp.execute ();
           }
       }
     catch (const exit_exception& ex)
diff --git a/libinterp/corefcn/defun-int.h b/libinterp/corefcn/defun-int.h
--- a/libinterp/corefcn/defun-int.h
+++ b/libinterp/corefcn/defun-int.h
@@ -40,45 +40,28 @@ class octave_value;
 
 extern OCTINTERP_API void print_usage (void);
 extern OCTINTERP_API void print_usage (const std::string&);
 
 extern OCTINTERP_API void check_version (const std::string& version,
                                          const std::string& fcn);
 
 extern OCTINTERP_API void
-install_builtin_function (octave_builtin::fcn f, const std::string& name,
-                          const std::string& file, const std::string& doc,
-                          bool can_hide_function = true);
-
-extern OCTINTERP_API void
-install_builtin_function (octave_builtin::meth m, const std::string& name,
-                          const std::string& file, const std::string& doc,
-                          bool can_hide_function = true);
-
-extern OCTINTERP_API void
 install_dld_function (octave_dld_function::fcn f, const std::string& name,
                       const octave::dynamic_library& shl, const std::string& doc,
                       bool relative = false);
 
 extern OCTINTERP_API void
 install_dld_function (octave_dld_function::meth m, const std::string& name,
                       const octave::dynamic_library& shl, const std::string& doc,
                       bool relative = false);
 
 extern OCTINTERP_API void
 install_mex_function (void *fptr, bool fmex, const std::string& name,
                       const octave::dynamic_library& shl, bool relative = false);
-
-extern OCTINTERP_API void
-alias_builtin (const std::string& alias, const std::string& name);
-
-extern OCTINTERP_API void
-install_builtin_dispatch (const std::string& name, const std::string& klass);
-
 // Gets the shlib of the currently executing DLD function, if any.
 extern OCTINTERP_API octave::dynamic_library
 get_current_shlib (void);
 
 namespace octave
 {
   // FIXME: this class doesn't seem to be used in Octave.  Is it
   // really needed?
@@ -105,16 +88,36 @@ typedef octave::auto_shlib octave_auto_s
 OCTAVE_DEPRECATED (4.4, "use 'tree_evaluator::isargout' instead")
 extern OCTINTERP_API bool
 defun_isargout (int, int);
 
 OCTAVE_DEPRECATED (4.4, "use 'tree_evaluator::isargout' instead")
 extern OCTINTERP_API void
 defun_isargout (int, int, bool *);
 
+OCTAVE_DEPRECATED (4.4, "use 'octave::symbol_table::install_built_in_function' instead")
+extern OCTINTERP_API void
+install_builtin_function (octave_builtin::fcn f, const std::string& name,
+                          const std::string& file, const std::string& doc,
+                          bool can_hide_function = true);
+
+OCTAVE_DEPRECATED (4.4, "use 'octave::symbol_table::install_built_in_function' instead")
+extern OCTINTERP_API void
+install_builtin_function (octave_builtin::meth m, const std::string& name,
+                          const std::string& file, const std::string& doc,
+                          bool can_hide_function = true);
+
+OCTAVE_DEPRECATED (4.4, "use 'octave::symbol_table::alias_built_in_function' instead")
+extern OCTINTERP_API void
+alias_builtin (const std::string& alias, const std::string& name);
+
+OCTAVE_DEPRECATED (4.4, "use 'octave::symbol_table::install_built_in_dispatch' instead")
+extern OCTINTERP_API void
+install_builtin_dispatch (const std::string& name, const std::string& klass);
+
 #endif
 
 #define FORWARD_DECLARE_FUNX(name)              \
   extern OCTAVE_EXPORT octave_value_list        \
   name (const octave_value_list&, int)
 
 #define FORWARD_DECLARE_METHODX(name)                           \
   extern OCTAVE_EXPORT octave_value_list                        \
diff --git a/libinterp/corefcn/symtab.h b/libinterp/corefcn/symtab.h
--- a/libinterp/corefcn/symtab.h
+++ b/libinterp/corefcn/symtab.h
@@ -337,16 +337,18 @@ namespace octave
           fcn_info finfo (name);
 
           finfo.install_user_function (fcn);
 
           m_fcn_table[name] = finfo;
         }
     }
 
+    // FIXME: should we ensure that FCN really is a built-in function
+    // object?
     void install_built_in_function (const std::string& name,
                                     const octave_value& fcn)
     {
       fcn_table_iterator p = m_fcn_table.find (name);
 
       if (p != m_fcn_table.end ())
         {
           fcn_info& finfo = p->second;
