# HG changeset patch
# User jwe
# Date 811544889 0
#      Tue Sep 19 21:08:09 1995 +0000
# Node ID b44fe7cf2a6b329830742f09bb157dcf922550fa
# Parent  f18c5b5db882ac222a0397e230faaf597e6233b2
[project @ 1995-09-19 21:06:07 by jwe]

diff --git a/readline/parens.c b/readline/parens.c
--- a/readline/parens.c
+++ b/readline/parens.c
@@ -23,16 +23,26 @@
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
 #define READLINE_LIBRARY
 
 #include "rlconf.h"
 
+#if defined (HAVE_STRING_H)
+#  include <string.h>
+#else /* !HAVE_STRING_H */
+#  include <strings.h>
+#endif /* !HAVE_STRING_H */  
+
+/* List of characters treated as string delimiters if doing paren
+   matching.  By default this is "'\"". */
+char *rl_paren_string_delimiters = "'\"";
+
 #if !defined (PAREN_MATCHING)
 
 rl_insert_close (count, invoking_key)
      int count, invoking_key;
 {
   return (rl_insert (count, invoking_key));
 }
 
@@ -126,20 +136,23 @@ find_matching_open (string, from, closer
       return (-1);
     }
 
   level = 1;			/* The closer passed in counts as 1. */
   delimiter = 0;		/* Delimited state unknown. */
 
   for (i = from; i > -1; i--)
     {
+      char *match = 0;
+
       if (delimiter && (string[i] == delimiter))
 	delimiter = 0;
-      else if ((string[i] == '\'') || (string[i] == '"'))
-	delimiter = rl_line_buffer[i];
+      else if (rl_paren_string_delimiters
+	       && (match = strchr (rl_paren_string_delimiters, string[i])))
+	delimiter = *match;
       else if (!delimiter && (string[i] == closer))
 	level++;
       else if (!delimiter && (string[i] == opener))
 	level--;
 
       if (!level)
 	break;
     }
diff --git a/readline/readline.h b/readline/readline.h
--- a/readline/readline.h
+++ b/readline/readline.h
@@ -167,16 +167,20 @@ extern char *rl_completer_word_break_cha
    unless they also appear within this list. */
 extern char *rl_completer_quote_characters;
 
 /* Character to add after a single completion alternative matches
    at the end of line.  By default this is a space.
    Nothing is added if this is '\0'. */
 extern char rl_completion_append_character;
 
+/* List of characters treated as string delimiters if doing paren
+   matching.  By default this is "'\"". */
+extern char *rl_paren_string_delimiters;
+
 /* List of characters that are word break characters, but should be left
    in TEXT when it is passed to the completion function.  The shell uses
    this to help determine what kind of completing to do. */
 extern char *rl_special_prefixes;
 
 /* Pointer to the generator function for completion_matches ().
    NULL means to use filename_entry_function (), the default filename
    completer. */
diff --git a/src/input.cc b/src/input.cc
--- a/src/input.cc
+++ b/src/input.cc
@@ -940,16 +940,21 @@ initialize_readline (void)
   // Tell the completer that we want to try first.
 
   rl_attempted_completion_function = (CPPFunction *) command_completer;
 
   // Bind operate-and-get-next.
 
   rl_add_defun ("operate-and-get-next",
 		(Function *) operate_and_get_next, CTRL ('O'));
+
+  // Don't treat single quotes as string delimiters when doing paren
+  // matching.
+
+  rl_paren_string_delimiters = "\"";
 }
 
 static int
 match_sans_spaces (const char *standard, const char *test)
 {
   char *tmp = strsave (test);
 
   char *tp = tmp;
