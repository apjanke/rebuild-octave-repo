# HG changeset patch
# User Markus MÃ¼tzel <markus.muetzel@gmx.de>
# Date 1533246765 -7200
#      Thu Aug 02 23:52:45 2018 +0200
# Node ID c7ea6c3cd8de236dfa71f8f59d27b535bfc8a8ed
# Parent  bf89eea6652e875cade200780f7e11b9b29db5b5
# Parent  c799c0dbe0b5ed0b9375c2a8606c48d744f8e352
maint: Merge stable to default.

diff --git a/libgui/qterminal/libqterminal/win32/QWinTerminalImpl.cpp b/libgui/qterminal/libqterminal/win32/QWinTerminalImpl.cpp
--- a/libgui/qterminal/libqterminal/win32/QWinTerminalImpl.cpp
+++ b/libgui/qterminal/libqterminal/win32/QWinTerminalImpl.cpp
@@ -234,16 +234,17 @@ private:
   QString m_command;
   QConsoleColors m_colors;
   bool m_inWheelEvent;
   QString m_title;
 
   QSize m_charSize;
   QSize m_bufferSize;
   QRect m_consoleRect;
+  bool m_auto_scroll;
   QPoint m_cursorPos;
   bool m_cursorBlinking;
   bool m_hasBlinkingCursor;
   QTimer *m_blinkCursorTimer;
   KeyboardCursorType m_cursorType;
 
   QPoint m_beginSelection;
   QPoint m_endSelection;
@@ -273,17 +274,17 @@ static void maybeSwapPoints (QPoint& beg
   if (end.y () < begin.y ()
       || (end.y () == begin.y () && end.x () < begin.x ()))
     qSwap (begin, end);
 }
 
 //////////////////////////////////////////////////////////////////////////////
 
 QConsolePrivate::QConsolePrivate (QWinTerminalImpl* parent, const QString& cmd)
-  : q (parent), m_command (cmd), m_cursorBlinking (false),
+  : q (parent), m_command (cmd), m_auto_scroll (true), m_cursorBlinking (false),
     m_hasBlinkingCursor (true), m_cursorType (BlockCursor),
     m_beginSelection (0, 0), m_endSelection (0, 0), m_settingSelection (false),
     m_process (NULL), m_inWheelEvent (false)
 {
   log (NULL);
 
   // Possibly detach from any existing console
   log ("Detaching from existing console (if any)...\n");
@@ -1120,16 +1121,17 @@ void QConsolePrivate::grabConsoleBuffer 
   bc.X = 0;
   bc.Y = 0;
 
   r.Left   = m_consoleRect.left ();
   r.Top    = m_consoleRect.top ();
   r.Right  = m_consoleRect.right ();
   r.Bottom = m_consoleRect.bottom ();
 
+  log ("ReadConsoleOutput (%d,%d) -> (%d,%d)\n", r.Left, r.Top, r.Right, r.Bottom);
   if (! ReadConsoleOutput (m_stdOut, (buf ? buf : m_buffer), bs, bc, &r))
     qCritical ("cannot read console output");
 }
 
 //////////////////////////////////////////////////////////////////////////////
 
 void QConsolePrivate::updateHorizontalScrollBar (void)
 {
@@ -1212,16 +1214,26 @@ void QConsolePrivate::setVerticalScrollV
 
   log ("Scrolling window vertically: (%d, %d) -> (%d, %d) [%d x %d]\n",
        r.Left, r.Top, r.Right, r.Bottom,
        r.Right - r.Left + 1, r.Bottom - r.Top + 1);
 
   if (SetConsoleWindowInfo (hStdOut, TRUE, &r))
     {
       m_consoleRect.moveTop (value);
+
+      CONSOLE_SCREEN_BUFFER_INFO sbi;
+      if (GetConsoleScreenBufferInfo (hStdOut, &sbi))
+        {
+          if (sbi.dwCursorPosition.Y > m_consoleRect.bottom ())
+            m_auto_scroll = false;
+          else
+            m_auto_scroll = true;
+        }
+
       updateConsoleView ();
     }
 }
 
 //////////////////////////////////////////////////////////////////////////////
 
 void QConsolePrivate::updateConsoleView (bool grab)
 {
@@ -1274,20 +1286,22 @@ void QConsolePrivate::monitorConsole (vo
           m_consoleView->update
             ((m_cursorPos.x () - sbi.srWindow.Left) * m_charSize.width (),
              (m_cursorPos.y () - sbi.srWindow.Top) * m_charSize.height (),
              m_charSize.width (), m_charSize.height ());
         }
 
       if (m_consoleRect.left () != sbi.srWindow.Left
           || m_consoleRect.right () != sbi.srWindow.Right
-          || m_consoleRect.top () != sbi.srWindow.Top
-          || m_consoleRect.bottom () != sbi.srWindow.Bottom)
+          || (m_auto_scroll &&
+              (m_consoleRect.top () != sbi.srWindow.Top
+               || m_consoleRect.bottom () != sbi.srWindow.Bottom)))
         {
           // Console window changed
+          log ("--> Console window changed\n");
           m_consoleRect = QRect (sbi.srWindow.Left, sbi.srWindow.Top,
                                  sbi.srWindow.Right - sbi.srWindow.Left + 1,
                                  sbi.srWindow.Bottom - sbi.srWindow.Top + 1);
           updateHorizontalScrollBar ();
           updateVerticalScrollBar ();
           updateConsoleView ();
           return;
         }
@@ -1352,16 +1366,18 @@ void QConsolePrivate::sendConsoleText (c
 {
   // Send the string in chunks of 512 characters. Each character is
   // translated into an equivalent keypress event.
 
 #define TEXT_CHUNK_SIZE 512
 
   // clear any selection on inserting text
   clearSelection();
+  // enable auto-scrolling
+  m_auto_scroll = true;
 
   int len = s.length ();
   INPUT_RECORD events[TEXT_CHUNK_SIZE];
   DWORD nEvents = 0, written;
   HANDLE hStdIn = GetStdHandle (STD_INPUT_HANDLE);
 
   ZeroMemory (events, sizeof (events));
 
