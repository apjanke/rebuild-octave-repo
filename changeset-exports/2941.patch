# HG changeset patch
# User jwe
# Date 863057872 0
#      Thu May 08 02:17:52 1997 +0000
# Node ID b779a5b8aed42aa083dcd6fab3c4a1cad6137948
# Parent  c05d4e1a9beec9eda68641ba1ddafa29231b2e2e
[project @ 1997-05-08 02:14:34 by jwe]

diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,10 +1,21 @@
+Wed May  7 21:14:06 1997  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* oct-syscalls.h, oct-syscalls.cc: New files.
+
+	* cmd-edit.h, cmd-edit.cc: Handle completion function.
+
+	* str-vec.h, str-vec.cc (string_vector::uniq): New function.
+
 Tue May  6 00:52:02 1997  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
+	* Makefile.in (INCLUDES_FOR_INSTALL): New variable.
+	(install-inc): Use it.
+
 	* file-ops.h, file-ops.cc (tempnam): Add DIR and PREFIX args.
 	Handle errors and missing functions consistently.
 
 	* oct-group.h, oct-group.cc: New files.
 
 	* oct-passwd.cc: Handle errors and missing functions consistently.
 
 	* str-vec.h, str-vec.cc (c_str_vec, delete_c_str_vec): New functions.
diff --git a/liboctave/Makefile.in b/liboctave/Makefile.in
--- a/liboctave/Makefile.in
+++ b/liboctave/Makefile.in
@@ -86,16 +86,18 @@ SOURCES := Bounds.cc CollocWt.cc DAE.cc 
 	tempname.c tempnam.c \
 	$(TEMPLATE_SRC) \
 	$(TI_SRC) \
 	$(MATRIX_SRC) \
 	$(MX_OP_SRC)
 
 EXTRAS := mx-inlines.cc
 
+INCLUDES_FOR_INSTALL := $(INCLUDES) $(TEMPLATE_SRC) $(EXTRAS)
+
 DISTFILES := Makefile.in ChangeLog safe-xstat.cin safe-xstat.hin \
 	$(SOURCES) $(INCLUDES) $(EXTRAS)
 
 ifeq ($(SHARED_LIBS), true)
   BINDISTFILES = liboctave.$(SHLEXT)
   BINDISTLIBS = $(addprefix liboctave/, liboctave.$(SHLEXT))
 endif
 
@@ -193,17 +195,17 @@ install-lib:
 	  rm -f $(libdir)/liboctave.$(SHLEXT); \
 	  $(INSTALL_PROGRAM) liboctave.$(SHLEXT) \
 	    $(libdir)/liboctave.$(SHLEXT); \
 	fi
 .PHONY: install-lib
 
 install-inc:
 	$(top_srcdir)/mkinstalldirs $(octincludedir)
-	for f in $(INCLUDES) $(TEMPLATE_SRC) ; do \
+	for f in $(INCLUDES_FOR_INSTALL) ; do \
 	  rm -f $(octincludedir)/$$f ; \
 	  $(INSTALL_DATA) $(srcdir)/$$f $(octincludedir)/$$f ; \
 	done
 	tmp=`echo $(octincludedir) | sed 's|/*$$||'` ; \
 	dir=`echo $$tmp | sed 's|[^/]*$$||'` ; \
 	src=`echo $$tmp | sed 's|^.*/||'` ; \
 	dest=`echo $$src | sed 's|-$(version)$$||'` ; \
 	if [ "$$src" = "$$dest" ] ; then \
diff --git a/liboctave/cmd-edit.cc b/liboctave/cmd-edit.cc
--- a/liboctave/cmd-edit.cc
+++ b/liboctave/cmd-edit.cc
@@ -63,16 +63,18 @@ extern int screenwidth;
 
 class
 gnu_readline : public command_editor
 {
 public:
 
   typedef command_editor::fcn fcn;
 
+  typedef command_editor::completion_fcn completion_fcn;
+
   gnu_readline (void);
 
   ~gnu_readline (void) { }
 
   void do_set_name (const string& n);
 
   string do_readline (const string& prompt);
 
@@ -95,17 +97,19 @@ public:
   void do_restore_terminal_state (void);
 
   void do_blink_matching_paren (bool flag);
 
   void do_set_paren_string_delimiters (const string& s);
 
   void do_set_completion_append_character (char c);
 
-  void do_set_attempted_completion_function (fcn f);
+  void do_set_completion_function (completion_fcn f);
+
+  completion_fcn do_get_completion_function (void) const;
 
   void do_insert_text (const string& text);
 
   void do_newline (void);
 
   void do_clear_undo_list (void);
 
   void do_set_startup_hook (fcn f);
@@ -113,22 +117,25 @@ public:
   void do_restore_startup_hook (void);
 
   static void operate_and_get_next (int, int);
 
 private:
 
   fcn previous_startup_hook;
 
-  fcn attempted_completion_function;
+  completion_fcn completion_function;
+
+  static char *command_generator (const char *text, int state);
+
+  static char **command_completer (char *text, int start, int end);
 };
 
 gnu_readline::gnu_readline ()
-  : command_editor (), previous_startup_hook (0),
-    attempted_completion_function (0)
+  : command_editor (), previous_startup_hook (0), completion_function (0)
 {
   rl_initialize ();
 
   do_blink_matching_paren (true);
 
   // Bind operate-and-get-next.
 
   rl_add_defun ("operate-and-get-next",
@@ -258,19 +265,31 @@ gnu_readline::do_set_paren_string_delimi
 
 void
 gnu_readline::do_set_completion_append_character (char c)
 {
   rl_completion_append_character = c;
 }
 
 void
-gnu_readline::do_set_attempted_completion_function (fcn f)
+gnu_readline::do_set_completion_function (completion_fcn f)
 {
-  attempted_completion_function = f;
+  completion_function = f;
+
+  typedef char** (*foo) (...);
+
+  rl_attempted_completion_function
+    = completion_function
+    ? static_cast<foo> (gnu_readline::command_completer) : 0;
+}
+
+gnu_readline::completion_fcn
+gnu_readline::do_get_completion_function (void) const
+{
+  return completion_function;
 }
 
 void
 gnu_readline::do_insert_text (const string& text)
 {
   rl_insert_text (text.c_str ());
 }
 
@@ -323,16 +342,45 @@ gnu_readline::operate_and_get_next (int 
       || (x_where >= x_length - 1))
     command_history::set_mark (x_where);
   else
     command_history::set_mark (x_where + 1);
 
   command_editor::set_startup_hook (command_history::goto_mark);
 }
 
+char *
+gnu_readline::command_generator (const char *text, int state)
+{
+  char *retval = 0;
+
+  completion_fcn f = command_editor::get_completion_function ();
+
+  string tmp = f (text, state);
+
+  size_t len = tmp.length ();
+
+  if (len > 0)
+    {
+      retval = static_cast<char *> (malloc (len+1));
+
+      strcpy (retval, tmp.c_str ());
+    }
+
+  return retval;
+}
+
+char **
+gnu_readline::command_completer (char *text, int /* start */, int /* end */)
+{
+  char **matches = 0;
+  matches = completion_matches (text, gnu_readline::command_generator);
+  return matches;
+}
+
 #endif
 
 class
 default_command_editor : public command_editor
 {
 public:
 
   default_command_editor (void)
@@ -411,17 +459,17 @@ command_editor::instance_ok (void)
 {
   bool retval = true;
 
   if (! instance)
     make_command_editor ();
 
   if (! instance)
     {
-      (*current_liboctave_error_handler)
+      current_liboctave_error_handler
 	("unable to create command history object!");
 
       retval = false;
     }
 
   return retval;
 }
 
@@ -543,20 +591,27 @@ command_editor::set_paren_string_delimit
 void
 command_editor::set_completion_append_character (char c)
 {
   if (instance_ok ())
     instance->do_set_completion_append_character (c);
 }
 
 void
-command_editor::set_attempted_completion_function (fcn f)
+command_editor::set_completion_function (completion_fcn f)
 {
   if (instance_ok ())
-    instance->do_set_attempted_completion_function (f);
+    instance->do_set_completion_function (f);
+}
+
+command_editor::completion_fcn
+command_editor::get_completion_function (void)
+{
+  return (instance_ok ())
+    ? instance->do_get_completion_function () : 0;
 }
 
 void
 command_editor::insert_text (const string& text)
 {
   if (instance_ok ())
     instance->do_insert_text (text);
 }
@@ -829,22 +884,22 @@ command_editor::read_octal (const string
     result = -1;
 
   return result;
 }
 
 void
 command_editor::error (int err_num)
 {
-  (*current_liboctave_error_handler) ("%s", strerror (err_num));
+  current_liboctave_error_handler ("%s", strerror (err_num));
 }
 
 void
 command_editor::error (const string& s)
 {
-  (*current_liboctave_error_handler) ("%s", s.c_str ());
+  current_liboctave_error_handler ("%s", s.c_str ());
 }
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
diff --git a/liboctave/cmd-edit.h b/liboctave/cmd-edit.h
--- a/liboctave/cmd-edit.h
+++ b/liboctave/cmd-edit.h
@@ -34,16 +34,18 @@ protected:
 
   command_editor (void)
     : command_number (0) { }
 
 public:
 
   typedef int (*fcn) (...);
 
+  typedef string (*completion_fcn) (const string&, int);
+
   virtual ~command_editor (void) { }
 
   static void set_name (const string& n);
 
   static string readline (const string& prompt);
 
   static void set_input_stream (FILE *f);
 
@@ -64,17 +66,19 @@ public:
   static void restore_terminal_state (void);
 
   static void blink_matching_paren (bool flag);
 
   static void set_paren_string_delimiters (const string& s);
 
   static void set_completion_append_character (char c);
 
-  static void set_attempted_completion_function (fcn f);
+  static void set_completion_function (completion_fcn f);
+
+  static completion_fcn get_completion_function (void);
 
   static void insert_text (const string& text);
 
   static void newline (void);
 
   static void clear_undo_list (void);
 
   static void set_startup_hook (fcn f);
@@ -131,17 +135,19 @@ protected:
   virtual void do_restore_terminal_state (void) { }
 
   virtual void do_blink_matching_paren (bool) { }
 
   virtual void do_set_paren_string_delimiters (const string&) { }
 
   virtual void do_set_completion_append_character (char) { }
 
-  virtual void do_set_attempted_completion_function (fcn) { }
+  virtual void do_set_completion_function (completion_fcn) { }
+
+  virtual completion_fcn do_get_completion_function (void) const { return 0; }
 
   virtual void do_insert_text (const string&) = 0;
 
   virtual void do_newline (void) = 0;
 
   virtual void do_clear_undo_list (void) { }
 
   virtual void do_set_startup_hook (fcn) { }
diff --git a/liboctave/oct-syscalls.cc b/liboctave/oct-syscalls.cc
new file mode 100644
--- /dev/null
+++ b/liboctave/oct-syscalls.cc
@@ -0,0 +1,283 @@
+/*
+
+Copyright (C) 1996, 1997 John W. Eaton
+
+This file is part of Octave.
+
+Octave is free software; you can redistribute it and/or modify it
+under the terms of the GNU General Public License as published by the
+Free Software Foundation; either version 2, or (at your option) any
+later version.
+
+Octave is distributed in the hope that it will be useful, but WITHOUT
+ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+for more details.
+
+You should have received a copy of the GNU General Public License
+along with Octave; see the file COPYING.  If not, write to the Free
+Software Foundation, 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
+
+*/
+
+#ifdef HAVE_CONFIG_H
+#include <config.h>
+#endif
+
+#include <cerrno>
+
+#include <string.h>
+
+#ifdef HAVE_SYS_TYPES_H
+#include <sys/types.h>
+#endif
+
+#ifdef HAVE_UNISTD_H
+#include <unistd.h>
+#endif
+
+#ifdef HAVE_FCNTL_H
+#include <fcntl.h>
+#endif
+
+#include "oct-syscalls.h"
+#include "str-vec.h"
+#include "syswait.h"
+
+#define NOT_SUPPORTED(nm) \
+  nm ## ": not supported on this system"
+
+int
+octave_syscalls::dup2 (int old_fd, int new_fd)
+{
+  string msg;
+  return dup2 (old_fd, new_fd, msg);
+}
+
+int
+octave_syscalls::dup2 (int old_fd, int new_fd, string& msg)
+{
+  msg = string ();
+
+  int status = -1;
+
+#if defined (HAVE_DUP2)
+  status = ::dup2 (old_fd, new_fd);
+
+  if (status < 0)
+    msg = ::strerror (errno);
+#else
+  msg = NOT_SUPPORTED ("dup2");
+#endif
+
+  return status;
+}
+
+int
+octave_syscalls::execvp (const string& file, const string_vector& argv)
+{
+  string msg;
+  return execvp (file, argv, msg);
+}
+
+int
+octave_syscalls::execvp (const string& file, const string_vector& args,
+			 string& msg)
+{
+  msg = string ();
+
+  int status = -1;
+
+#if defined (HAVE_EXECVP)
+  char **argv = args.c_str_vec ();
+
+  status = ::execvp (file.c_str (), argv);
+
+  string_vector::delete_c_str_vec (argv);
+
+  if (status < 0)
+    msg = ::strerror (errno);
+#else
+  msg = NOT_SUPPORTED ("execvp");
+#endif
+
+  return status;
+}
+
+int
+octave_syscalls::fcntl (int fd, int cmd, long arg)
+{
+  string msg;
+  return fcntl (fd, cmd, arg, msg);
+}
+
+int
+octave_syscalls::fcntl (int fd, int cmd, long arg, string& msg)
+{
+  msg = string ();
+
+  int status = -1;
+
+#if defined (HAVE_FCNTL)
+  status = ::fcntl (fd, cmd, arg);
+
+  if (status < 0)
+    msg = ::strerror (errno);
+#else
+  msg = NOT_SUPPORTED ("fcntl");
+#endif
+
+  return status;
+}
+
+pid_t
+octave_syscalls::fork (string& msg)
+{
+  pid_t status = -1;
+
+#if defined (HAVE_FORK)
+  status = ::fork ();
+
+  if (status < 0)
+    msg = ::strerror (errno);
+#else
+  msg = NOT_SUPPORTED ("fork");
+#endif
+
+  return status;
+}
+
+pid_t
+octave_syscalls::getpgrp (string& msg)
+{
+  pid_t status = -1;
+
+#if defined (HAVE_GETPGRP)
+  status = ::getpgrp ();
+
+  if (status < 0)
+    msg = ::strerror (errno);
+#else
+  msg = NOT_SUPPORTED ("getpgrp");
+#endif
+
+  return status;
+}
+
+pid_t
+octave_syscalls::getpid (void)
+{
+#if defined (HAVE_GETPID)
+  return ::getpid ();
+#else
+  return 0;
+#endif
+}
+
+pid_t
+octave_syscalls::getppid (void)
+{
+#if defined (HAVE_GETPPID)
+  return ::getppid ();
+#else
+  return 0;
+#endif
+}
+
+gid_t
+octave_syscalls::getgid (void)
+{
+#if defined (HAVE_GETGID)
+  return ::getgid ();
+#else
+  return 0;
+#endif
+}
+
+gid_t
+octave_syscalls::getegid (void)
+{
+#if defined (HAVE_GETEGID)
+  return ::getegid ();
+#else
+  return 0;
+#endif
+}
+
+uid_t
+octave_syscalls::getuid (void)
+{
+#if defined (HAVE_GETUID)
+  return ::getuid ();
+#else
+  return 0;
+#endif
+}
+
+uid_t
+octave_syscalls::geteuid (void)
+{
+#if defined (HAVE_GETEUID)
+  return ::geteuid ();
+#else
+  return 0;
+#endif
+}
+
+int
+octave_syscalls::pipe (int *fildes)
+{
+  string msg;
+  return pipe (fildes);
+}
+
+int
+octave_syscalls::pipe (int *fildes, string& msg)
+{
+  msg = string ();
+
+  int status = -1;
+
+#if defined (HAVE_PIPE)
+  status = ::pipe (fildes);
+
+  if (status < 0)
+    msg = ::strerror (errno);
+#else
+  msg = NOT_SUPPORTED ("pipe");
+#endif
+
+  return status;
+}
+
+pid_t
+octave_syscalls::waitpid (pid_t pid, int options)
+{
+  string msg;
+  return waitpid (pid, options, msg);
+}
+
+pid_t
+octave_syscalls::waitpid (pid_t pid, int options, string& msg)
+{
+  msg = string ();
+
+  int status = -1;
+
+#if defined (HAVE_WAITPID)
+  status = ::waitpid (pid, 0, options);
+
+  if (status < 0)
+    msg = ::strerror (errno);
+#else
+  msg = NOT_SUPPORTED ("waitpid");
+#endif
+
+  return status;
+}
+
+/*
+;;; Local Variables: ***
+;;; mode: C++ ***
+;;; End: ***
+*/
diff --git a/liboctave/oct-syscalls.h b/liboctave/oct-syscalls.h
new file mode 100644
--- /dev/null
+++ b/liboctave/oct-syscalls.h
@@ -0,0 +1,72 @@
+/*
+
+Copyright (C) 1996, 1997 John W. Eaton
+
+This file is part of Octave.
+
+Octave is free software; you can redistribute it and/or modify it
+under the terms of the GNU General Public License as published by the
+Free Software Foundation; either version 2, or (at your option) any
+later version.
+
+Octave is distributed in the hope that it will be useful, but WITHOUT
+ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+for more details.
+
+You should have received a copy of the GNU General Public License
+along with Octave; see the file COPYING.  If not, write to the Free
+Software Foundation, 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
+
+*/
+
+#if !defined (octave_syscalls_h)
+#define octave_syscalls_h 1
+
+#include <string>
+
+class string_vector;
+
+#ifdef HAVE_SYS_TYPES_H
+#include <sys/types.h>
+#endif
+
+struct
+octave_syscalls
+{
+  static int dup2 (int, int);
+  static int dup2 (int, int, string&);
+
+  static int execvp (const string&, const string_vector&);
+  static int execvp (const string&, const string_vector&, string&);
+
+  static int fcntl (int, int, long);
+  static int fcntl (int, int, long, string&);
+
+  static pid_t fork (string&);
+
+  static pid_t getpgrp (string&);
+
+  static pid_t getpid (void);
+  static pid_t getppid (void);
+
+  static gid_t getgid (void);
+  static gid_t getegid (void);
+
+  static uid_t getuid (void);
+  static uid_t geteuid (void);
+
+  static int pipe (int *);
+  static int pipe (int *, string&);
+
+  static pid_t waitpid (pid_t, int);
+  static pid_t waitpid (pid_t, int, string&);
+};
+
+#endif
+
+/*
+;;; Local Variables: ***
+;;; mode: C++ ***
+;;; End: ***
+*/
diff --git a/liboctave/str-vec.cc b/liboctave/str-vec.cc
--- a/liboctave/str-vec.cc
+++ b/liboctave/str-vec.cc
@@ -61,16 +61,37 @@ string_vector::string_vector (const char
 
 string_vector::string_vector (const char * const *s, int n)
   : Array<string> (n)
 {
   for (int i = 0; i < n; i++)
     elem (i) = s[i];
 }
 
+string_vector&
+string_vector::uniq (void)
+{
+  int len = length ();
+
+  if (len > 0)
+    {
+      int k = 0;
+
+      for (int i = 1; i < len; i++)
+	if (elem(i) != elem(k))
+	  if (++k != i)
+	    elem(k) = elem(i);
+
+      if (len != ++k)
+	resize (k);
+    }
+
+  return *this;
+}
+
 char **
 string_vector::c_str_vec (void) const
 {
   int len = length ();
 
   char **retval = new char * [len + 1];
 
   retval [len] = 0;
diff --git a/liboctave/str-vec.h b/liboctave/str-vec.h
--- a/liboctave/str-vec.h
+++ b/liboctave/str-vec.h
@@ -53,52 +53,58 @@ public:
 
   string_vector (const string_vector& s) : Array<string> (s) { }
 
   string_vector (const char * const *s);
 
   string_vector (const char * const *s, int n);
 
   string_vector& operator = (const string_vector& s)
-    {
-      if (this != &s)
-	Array<string>::operator = (s);
+  {
+    if (this != &s)
+      Array<string>::operator = (s);
 
-      return *this;
-    }
+    return *this;
+  }
 
   ~string_vector (void) { }
 
   int empty (void) const { return length () == 0; }
 
   int max_length (void) const
-    {
-      int n = length ();
-      int longest = 0;
+  {
+    int n = length ();
+    int longest = 0;
 
-      for (int i = 0; i < n; i++)
-	{
-	  int tmp = elem(i).length ();
+    for (int i = 0; i < n; i++)
+      {
+	int tmp = elem(i).length ();
 
-	  if (tmp > longest)
-	    longest = tmp;
-	}
+	if (tmp > longest)
+	  longest = tmp;
+      }
 
-      return longest;
-    }
+    return longest;
+  }
 
   string& operator[] (int i) { return Array<string>::elem (i); }
 
   string operator[] (int i) const { return Array<string>::elem (i); }
 
-  string_vector& qsort (void)
-    {
-      Array<string>::qsort (str_vec_compare);
-      return *this;
-    }
+  string_vector& qsort (bool make_unique = false)
+  {
+    Array<string>::qsort (str_vec_compare);
+
+    if (make_unique)
+      uniq ();
+
+    return *this;
+  }
+
+  string_vector& uniq (void);
 
   char **c_str_vec (void) const;
 
   static void delete_c_str_vec (const char * const*);
 
   ostream& list_in_columns (ostream&) const;
 };
 
diff --git a/src/mkops b/src/mkops
--- a/src/mkops
+++ b/src/mkops
@@ -7,31 +7,31 @@ cat << \EOF
 #include "config.h"
 #endif
 
 extern void install_base_type_conversions (void);
 
 EOF
 
 for file in "$@"; do
-  f=`echo $file | sed 's/^op-//; s/\.cc//; s/-/_/g'`
+  f=`echo $file | sed 's%^OPERATORS/op-%%; s%\.cc%%; s%-%_%g'`
   echo "extern void install_${f}_ops (void);"
 done
 
 cat << \EOF
 
 void
 install_ops (void)
 {
   install_base_type_conversions ();
 
 EOF
 
 for file in "$@"; do
-  f=`echo $file | sed 's/^op-//; s/\.cc//; s/-/_/g'`
+  f=`echo $file | sed 's%^OPERATORS/op-%%; s%\.cc%%; s%-%_%g'`
   echo "  install_${f}_ops ();"
 done
 
 cat << \EOF
 }
 EOF
 
 exit 0
