# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1263881940 -3600
#      Tue Jan 19 07:19:00 2010 +0100
# Node ID 30817aa3889a911f5923d3c1ab2c9930d146190d
# Parent  0c3609dd34cf0bdc50d8cb82bbe3c1681e1fc24a
allow print_usage to print backtrace if called from functions

diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,8 +1,13 @@
+2010-01-19  Jaroslav Hajek  <highegg@gmail.com>
+
+	* help/print_usage.m: Try determining whether called from top level.
+	If not, don't print additional help and enable backtrace instead.
+
 2010-01-18  John W. Eaton  <jwe@octave.org>
 
 	* testfun/test.m: Undo previous change.
 
 2010-01-18  David Grundberg  <davidg@cs.umu.se>
 
 	* testfun/test.m: Append endfunction to function test blocks.
 
diff --git a/scripts/help/print_usage.m b/scripts/help/print_usage.m
--- a/scripts/help/print_usage.m
+++ b/scripts/help/print_usage.m
@@ -19,35 +19,38 @@
 ## @deftypefnx{Function File} {} print_usage (@var{name})
 ## Print the usage message for a function.  When called with no input arguments
 ## the @code{print_usage} function displays the usage message of the currently
 ## executing function.
 ## @seealso{help}
 ## @end deftypefn
 
 function print_usage (name)
+  x = dbstack ();
   ## Handle input
   if (nargin == 0)
     ## Determine the name of the calling function
-    x = dbstack ();
     if (numel (x) > 1)
       name = x (2).name;
     else
       error ("print_usage: invalid function\n");
     endif
     fullpath = evalin ("caller", "mfilename (""fullpath"")");
     if (strcmp (fullpath(end-length(name)+1:end), name))
       fullname = [fullpath, ".m"];
     endif
   elseif (!ischar (name))
     error ("print_usage: input argument must be a string");
   else
     fullname = name;
   endif
   
+  ## Determine if we're called from top level.
+  at_toplev = length (x) < 2 || (length (x) == 2 && strcmp (x(2).name, name));
+
   ## Do the actual work
   [text, format] = get_help_text (fullname);
   max_len = 80;
   switch (lower (format))
     case "plain text"
       [usage_string, status] = get_usage_plain_text (text, max_len);
     case "texinfo"
       [usage_string, status] = get_usage_texinfo (text, max_len);
@@ -62,18 +65,31 @@ function print_usage (name)
   endswitch
   
   ## Raise the final error
   if (status != 0)
     warning ("print_usage: Texinfo formatting filter exited abnormally");
     warning ("print_usage: raw Texinfo source of help text follows...\n");
   endif
 
-  error ("Invalid call to %s.  Correct usage is:\n\n%s\n%s",
-	 name, usage_string, __additional_help_message__ ());
+  if (at_toplev)
+    error ("Invalid call to %s.  Correct usage is:\n\n%s\n%s",
+           name, usage_string, __additional_help_message__ ());
+  else
+    msg = sprintf ("Invalid call to %s.  Correct usage is:\n\n%s",
+                   name, usage_string);
+    ## Ensure that the error doesn't end up with a newline, as that disables
+    ## backtraces.
+    if (msg(end) == "\n")
+      msg(end) = " ";
+    endif
+
+    error (msg);
+  endif
+
 endfunction
 
 function [retval, status] = get_usage_plain_text (help_text, max_len)
   ## Extract first line by searching for a double line-end.
   line_end_idx = strfind (help_text, "\n\n");
   retval = help_text (1:min ([line_end_idx , max_len, length(help_text)]));
   status = 0;
 endfunction
