# HG changeset patch
# User Mike Miller <mtmiller@octave.org>
# Date 1533938382 25200
#      Fri Aug 10 14:59:42 2018 -0700
# Node ID 374edade7b1b8f8a1946d957bf150f7294061cf2
# Parent  3c9134d90d6ed5d46a970d656bf304b0d30edf3d
fix use of JAVA_HOME to fail if not found and fall back correctly (bug #40111)

* ov-java.cc (LIBJVM_FILE_NAME): Define to system dependent library name.
(get_jvm_lib_path_in_subdir): Use it.
(initialize_jvm): Always attempt to use JAVA_HOME when set in the environment.
Fall back to compiled-in default (or Windows registry) only when not set.

diff --git a/libinterp/octave-value/ov-java.cc b/libinterp/octave-value/ov-java.cc
--- a/libinterp/octave-value/ov-java.cc
+++ b/libinterp/octave-value/ov-java.cc
@@ -61,16 +61,24 @@ along with Octave; see the file COPYING.
 #include "variables.h"
 
 #if defined (HAVE_JAVA)
 #include <jni.h>
 #endif
 
 #if defined (HAVE_JAVA)
 
+#if defined (OCTAVE_USE_WINDOWS_API)
+#  define LIBJVM_FILE_NAME "jvm.dll"
+#elif defined (__APPLE__)
+#  define LIBJVM_FILE_NAME "libjvm.dylib"
+#else
+#  define LIBJVM_FILE_NAME "libjvm.so"
+#endif
+
 #define TO_JOBJECT(obj) reinterpret_cast<jobject> (obj)
 #define TO_JCLASS(obj) reinterpret_cast<jclass> (obj)
 
 #define TO_JNIENV(env) reinterpret_cast<JNIEnv *> (env)
 
 typedef jint (JNICALL *JNI_CreateJavaVM_t) (JavaVM **pvm, JNIEnv **penv,
                                             void *args);
 
@@ -498,31 +506,26 @@ initial_class_path (void)
 
 static std::string
 get_jvm_lib_path_in_subdir (std::string java_home_path)
 {
   // This assumes that whatever architectures are installed are appropriate for
   // this machine
 #if defined (OCTAVE_USE_WINDOWS_API)
   std::string subdirs[] = {"bin/client", "bin/server"};
-  std::string libjvm = "jvm.dll";
 #else
   std::string subdirs[] = {"jre/lib/server", "jre/lib", "lib/client",
     "lib/server", "jre/lib/amd64/client", "jre/lib/amd64/server",
     "jre/lib/i386/client", "jre/lib/i386/server"};
-#  if defined (__APPLE__)
-  std::string libjvm = "libjvm.dylib";
-#  else
-  std::string libjvm = "libjvm.so";
-#  endif
 #endif
 
   for (size_t i = 0; i < sizeof (subdirs) / sizeof (subdirs[0]); i++)
     {
-      std::string candidate = java_home_path + "/" + subdirs[i] + "/" + libjvm;
+      std::string candidate = java_home_path + "/" + subdirs[i]
+                            + "/" LIBJVM_FILE_NAME;
       if (octave::sys::file_stat (candidate))
         return candidate;
     }
   return "";
 }
 
 #if defined (OCTAVE_USE_WINDOWS_API)
 // Declare function defined in sysdep.cc
@@ -637,28 +640,33 @@ initialize_jvm (void)
   JNI_GetCreatedJavaVMs_t get_vm = reinterpret_cast<JNI_GetCreatedJavaVMs_t>
                                    (lib.search ("JNI_GetCreatedJavaVMs"));
 
   if (! create_vm || ! get_vm)
     {
       // JAVA_HOME environment variable takes precedence
       std::string java_home_env = octave::sys::env::getenv ("JAVA_HOME");
       if (! java_home_env.empty ())
-        jvm_lib_path = get_jvm_lib_path_in_subdir (java_home_env);
-
-      if (jvm_lib_path.empty ())
+        {
+          jvm_lib_path = get_jvm_lib_path_in_subdir (java_home_env);
+
+          // If JAVA_HOME does not look like a Java directory, use it anyway
+          // to fail with a useful error message indicating the directory
+          if (jvm_lib_path.empty ())
+            jvm_lib_path = java_home_env + "/" LIBJVM_FILE_NAME;
+        }
+      else
+        {
 #if defined (OCTAVE_USE_WINDOWS_API)
-        jvm_lib_path = get_jvm_lib_path_from_registry ();
-#elif defined (__APPLE__)
-        // Fall back to JAVA_LDPATH determined by configure and set in config.h
-        jvm_lib_path = std::string (JAVA_LDPATH) + "/libjvm.dylib";
+          jvm_lib_path = get_jvm_lib_path_from_registry ();
 #else
-        // Fall back to JAVA_LDPATH determined by configure and set in config.h
-        jvm_lib_path = std::string (JAVA_LDPATH) + "/libjvm.so";
+          // Fall back to JAVA_LDPATH, determined by the build system
+          jvm_lib_path = std::string (JAVA_LDPATH) + "/" LIBJVM_FILE_NAME;
 #endif
+        }
 
       lib = octave::dynamic_library (jvm_lib_path);
 
       if (! lib)
         error ("unable to load Java Runtime Environment from %s",
                jvm_lib_path.c_str ());
 
       create_vm = reinterpret_cast<JNI_CreateJavaVM_t>
