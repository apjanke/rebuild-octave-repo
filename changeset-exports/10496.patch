# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1270671834 14400
#      Wed Apr 07 16:23:54 2010 -0400
# Node ID 3b77db443cc0bae97000511d9804e4bb512f3dd8
# Parent  f7d8b2bd7b57499a33563aa192ea4d8e87d70d8a
scripts/testfun/runtests.m: new function

diff --git a/doc/ChangeLog b/doc/ChangeLog
--- a/doc/ChangeLog
+++ b/doc/ChangeLog
@@ -1,8 +1,12 @@
+2010-04-07  John W. Eaton  <jwe@octave.org>
+
+	* interpreter/testfun.txi: Document runtests.
+
 2010-03-24  John W. Eaton  <jwe@octave.org>
 
 	* interpreter/bugs.txi: Update for bug tracker.
 
 2010-02-11  Jaroslav Hajek  <highegg@gmail.com>
 
 	* interpreter/expr.txi: Mention no ternary operator and the ifelse
 	fucntion as a possible replacement.
diff --git a/doc/interpreter/testfun.txi b/doc/interpreter/testfun.txi
--- a/doc/interpreter/testfun.txi
+++ b/doc/interpreter/testfun.txi
@@ -300,11 +300,13 @@ them in plain files with no extension ra
 
 @node Demonstration Functions
 @section Demonstration Functions
 
 @DOCSTRING(demo)
 
 @DOCSTRING(rundemos)
 
+@DOCSTRING(runtests)
+
 @DOCSTRING(example)
 
 @DOCSTRING(speed)
diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,8 +1,13 @@
+2010-04-07  John W. Eaton  <jwe@octave.org>
+
+	* testfun/runtests.m: New function.
+	* testfun/module.mk (testfun_FCN_FILES): Add it to the list.
+
 2010-02-19  Rik <octave@nomad.inbox5.com>
 
 	* statistics/cut.m: Modify cut to use the same decision criteria as histc
    when deciding whether a data point is inside or outside interval
 
 2010-04-02  Marc Vinyals  <mrc_timer@users.sourceforge.net>
 
 	* signal/arma_rnd.m: fix typo in test.
diff --git a/scripts/testfun/module.mk b/scripts/testfun/module.mk
--- a/scripts/testfun/module.mk
+++ b/scripts/testfun/module.mk
@@ -1,16 +1,17 @@
 FCN_FILE_DIRS += testfun
 
 testfun_FCN_FILES = \
   testfun/assert.m \
   testfun/demo.m \
   testfun/example.m \
   testfun/fail.m \
   testfun/rundemos.m \
+  testfun/runtests.m \
   testfun/speed.m \
   testfun/test.m
 
 FCN_FILES += $(testfun_FCN_FILES)
 
 PKG_ADD_FILES += testfun/PKG_ADD
 
 DIRSTAMP_FILES += testfun/$(octave_dirstamp)
diff --git a/scripts/testfun/runtests.m b/scripts/testfun/runtests.m
new file mode 100644
--- /dev/null
+++ b/scripts/testfun/runtests.m
@@ -0,0 +1,108 @@
+## Copyright (C) 2010 John W. Eaton
+##
+## This file is part of Octave.
+##
+## Octave is free software; you can redistribute it and/or modify it
+## under the terms of the GNU General Public License as published by
+## the Free Software Foundation; either version 3 of the License, or (at
+## your option) any later version.
+##
+## Octave is distributed in the hope that it will be useful, but
+## WITHOUT ANY WARRANTY; without even the implied warranty of
+## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+## General Public License for more details.
+##
+## You should have received a copy of the GNU General Public License
+## along with Octave; see the file COPYING.  If not, see
+## <http://www.gnu.org/licenses/>.
+
+## -*- texinfo -*-
+## @deftypefn {Function File} {} rundtests (@var{directory})
+## @end deftypefn
+
+## Author: jwe
+
+function runtests (directory)
+
+  if (nargin == 0)
+    dirs = strsplit (path (), pathsep ());
+  elseif (nargin == 1)
+    if (is_absolute_filename (directory))
+      dirs = {directory};
+    else
+      fullname = find_dir_in_path (directory);
+      if (! isempty (fullname))
+	dirs = {fullname};
+      else
+	error ("runtests: expecting argument to be a directory name");
+      endif
+    endif
+  else
+    print_usage ();
+  endif
+
+  for i = 1:numel (dirs)
+    d = dirs{i};
+    run_all_tests (d);
+  endfor
+
+endfunction
+
+function run_all_tests (directory)
+  dirinfo = dir (directory);
+  flist = {dirinfo.name};
+  no_tests = {};
+  printf ("Processing files in %s:\n\n", directory);
+  fflush (stdout);
+  for i = 1:numel (flist)
+    f = flist{i};
+    if (length (f) > 2 && strcmp (f((end-1):end), ".m"))
+      ff = fullfile (directory, f);
+      if (has_tests (ff))
+        print_test_file_name (f);
+        [p, n, xf, sk] = test (ff, "quiet");
+        print_pass_fail (n, p)
+        fflush (stdout);
+      else
+        no_tests{end+1} = f;
+      endif
+    endif
+  endfor
+  if (! isempty (no_tests))
+    printf ("\nThe following files in have no tests:\n\n", directory);
+    printf ("%s", list_in_columns (no_tests));
+  endif
+endfunction
+
+function retval = has_tests (f)
+  retval = false;
+  fid = fopen (f);
+  if (fid >= 0)
+    while (! feof (fid))
+      ln = fgetl (fid);
+      if (! isempty (regexp (ln, "%!(assert|error|test)", "lineanchors")))
+        retval = true;
+        break;
+      endif
+    endwhile
+    fclose (fid);
+  else
+    error ("fopen failed: %s", f);
+  endif
+endfunction
+
+function print_pass_fail (n, p)
+  if (n > 0)
+    printf (" PASS %4d/%-4d", p, n);
+    nfail = n - p;
+    if (nfail > 0)
+      printf (" FAIL %d", nfail);
+    endif
+  endif
+  puts ("\n");
+endfunction
+
+function print_test_file_name (nm)
+  filler = repmat (".", 1, 55-length (nm));
+  printf ("  %s %s", nm, filler);
+endfunction
