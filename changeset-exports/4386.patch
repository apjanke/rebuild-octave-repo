# HG changeset patch
# User jwe
# Date 1051209662 0
#      Thu Apr 24 18:41:02 2003 +0000
# Node ID 112a509bd2e64fa14ce507059c9934d50136c9ec
# Parent  de8c1d2ee7288a4badf148c7ed2d97d8bd6dd2af
[project @ 2003-04-24 18:41:02 by jwe]

diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,14 @@
+2003-04-24  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* kpse.cc (xclosedir): Don't define or declare for Windows.
+	(READABLE): Now a static function to avoid warnings from MinGW
+	compiler.	
+
 2003-04-23  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* kpse.cc: Move most functions from kpse-xfns.c here and make
 	static.  Include most of kpse-xfns.h directly, removing
 	unnecessary bits.
 
 	* dMatrix.cc (Matrix::pseudo_inverse): Now const.
 	* CMatrix.cc (ComplexMatrix::pseudo_inverse): Likewise.
diff --git a/liboctave/kpse.cc b/liboctave/kpse.cc
--- a/liboctave/kpse.cc
+++ b/liboctave/kpse.cc
@@ -334,17 +334,19 @@ typedef struct
 extern "C" char *xbasename (const char *name);
 
 static FILE *xfopen (const char *filename, const char *mode);
 
 static void xfclose (FILE *f, const char *filename);
 
 unsigned long xftell (FILE *f, char *filename);
 
+#ifndef WIN32
 static void xclosedir (DIR *d);
+#endif
 
 static void *xmalloc (unsigned size);
 
 static void *xrealloc (void *old_ptr, unsigned size);
 
 static char *xstrdup (const char *s);
 
 extern char *xbasename (const char *name);
@@ -2795,28 +2797,30 @@ xftell (FILE *f, char *filename)
   long where = ftell (f);
 
   if (where < 0)
     FATAL_PERROR (filename);
 
   return where;
 }
 
+#ifndef WIN32
 void
 xclosedir (DIR *d)
 {
 #ifdef CLOSEDIR_VOID
   closedir (d);
 #else
   int ret = closedir (d);
   
   if (ret != 0)
     FATAL ("closedir failed");
 #endif
 }
+#endif
 
 /* xmalloc.c: malloc with error checking.  */
 
 void *
 xmalloc (unsigned size)
 {
   void *new_mem = (void *) malloc (size);
 
@@ -2876,17 +2880,17 @@ xstrdup (const char *s)
 
 /* Return true if FN is a directory or a symlink to a directory,
    false if not. */
 
 int
 dir_p (const char *fn)
 {
 #ifdef WIN32
-  int fa = GetFileAttributes(fn);
+  unsigned int fa = GetFileAttributes(fn);
   return (fa != 0xFFFFFFFF && (fa & FILE_ATTRIBUTE_DIRECTORY));
 #else
   struct stat stats;
   return stat (fn, &stats) == 0 && S_ISDIR (stats.st_mode);
 #endif
 }
 
 #ifndef WIN32
@@ -3277,22 +3281,30 @@ kpse_truncate_filename (const char *name
 }
 
 /* If access can read FN, run stat (assigning to stat buffer ST) and
    check that fn is not a directory.  Don't check for just being a
    regular file, as it is potentially useful to read fifo's or some
    kinds of devices.  */
 
 #ifdef WIN32
-#define READABLE(fn, st) \
-  (GetFileAttributes(fn) != 0xFFFFFFFF && \
-   !(GetFileAttributes(fn) & FILE_ATTRIBUTE_DIRECTORY))
+static inline bool
+READABLE (const char *fn, struct stat&)
+{
+  return (GetFileAttributes(fn) != 0xFFFFFFFF
+	  && !(GetFileAttributes(fn) & FILE_ATTRIBUTE_DIRECTORY));
+}
 #else
-#define READABLE(fn, st) \
-  (access (fn, R_OK) == 0 && stat (fn, &(st)) == 0 && !S_ISDIR (st.st_mode))
+static inline bool
+READABLE (const char *fn, struct stat& st)
+{
+  return (access (fn, R_OK) == 0
+	  && stat (fn, &(st)) == 0
+	  && !S_ISDIR (st.st_mode));
+}
 #endif
 
 /* POSIX invented the brain-damage of not necessarily truncating
    filename components; the system's behavior is defined by the value of
    the symbol _POSIX_NO_TRUNC, but you can't change it dynamically!
    
    Generic const return warning.  See extend-fname.c.  */
 
