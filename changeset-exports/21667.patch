# HG changeset patch
# User CarnÃ« Draug <carandraug@octave.org>
# Date 1462186089 -10800
#      Mon May 02 13:48:09 2016 +0300
# Node ID 84092ccb45e24fb787b9d04976f6bf31f2567e1a
# Parent  09517e0a8aa02922649ba0d5d5b467ccc5310e51
inputParser.m: implement StructExpand option (struct with param/value pairs).

diff --git a/scripts/general/inputParser.m b/scripts/general/inputParser.m
--- a/scripts/general/inputParser.m
+++ b/scripts/general/inputParser.m
@@ -71,17 +71,17 @@
 ## @command{Switch} and @command{ParamValue} arguments can be mixed, it is
 ## not possible to know the unmatched type.  If argument is found unmatched
 ## it is assumed to be of the @command{ParamValue} type and it is expected to
 ## be followed by a value.
 ##
 ## @end deftypefn
 ## @deftypefn {} {} inputParser.StructExpand = @var{boolean}
 ## Set whether a structure can be passed to the function instead of
-## parameter/value pairs.  Defaults to true.  Not implemented yet.
+## parameter/value pairs.  Defaults to true.
 ##
 ## The following example shows how to use this class:
 ##
 ## @example
 ## @group
 ## function check (varargin)
 ## @c The next two comments need to be indented by one for alignment
 ##   p = inputParser ();                      # create object
@@ -245,17 +245,17 @@
 
 classdef inputParser < handle
   properties
     ## FIXME: set input checking for these properties
     CaseSensitive = false;
     FunctionName  = "";
     KeepUnmatched = false;
     # PartialMatching = true;   # FIXME: unimplemented
-    # StructExpand    = true;   # FIXME: unimplemented
+    StructExpand    = true;
   endproperties
 
   properties (SetAccess = protected)
     Parameters    = cell ();
     Results       = struct ();
     Unmatched     = struct ();
     UsingDefaults = cell ();
   endproperties
@@ -359,17 +359,19 @@ classdef inputParser < handle
         catch
           valid_option = false;
         end_try_catch
         if (! valid_option)
           ## If it does not match there's two options:
           ##    1) input is actually wrong and we should error;
           ##    2) it's a ParamValue or Switch name and we should use the
           ##       the default for the rest.
-          if (ischar (in))
+          ##    3) it's a struct with the ParamValue pairs.
+          if (ischar (in) || (this.StructExpand && isstruct (in)
+                              && isscalar (in)))
             idx -= 1;
             vidx -= 1;
             break
           else
             this.error (sprintf ("failed validation of %s",
                                  toupper (opt.name)));
           endif
         endif
@@ -381,16 +383,26 @@ classdef inputParser < handle
         opt = this.Optional{idx};
         this.UsingDefaults{end+1} = opt.name;
         this.Results.(opt.name) = opt.def;
       endwhile
 
       ## Search unordered Options (Switch and ParamValue)
       while (vidx++ < pnargin)
         name = varargin{vidx};
+
+        if (this.StructExpand && isstruct (name) && isscalar (name))
+          expanded_options = [fieldnames(name) struct2cell(name)]'(:);
+          n_new_args = numel (expanded_options) -1;
+          pnargin += n_new_args;
+          varargin(vidx+n_new_args+1:pnargin) = varargin(vidx+1:end);
+          varargin(vidx:vidx+n_new_args) = expanded_options;
+          name = varargin{vidx};
+        endif
+
         if (this.is_argname ("ParamValue", name))
           if (vidx++ > pnargin)
             this.error (sprintf ("no matching value for option '%s'",
                                  toupper (name)));
           endif
           this.validate_arg (this.last_name,
                              this.ParamValue.(this.last_name).val,
                              varargin{vidx});
@@ -600,16 +612,59 @@ endclassdef
 %! p = inputParser ();
 %! p.addOptional ("err", "foo", @error);
 %! p.addParamValue ("not_err", "bar", @ischar);
 %! p.parse ("not_err", "qux");
 %! assert (p.Results.err, "foo")
 %! assert (p.Results.not_err, "qux")
 
 
+## With more ParamValues to test StructExpand
+%!function p3 = create_p3 ();
+%!  p3 = inputParser;
+%!  addOptional (p3, "op1", "val", @(x) any (strcmp (x, {"val", "foo"})));
+%!  addOptional (p3, "op2", 78, @(x) x > 50);
+%!  addSwitch (p3, "verbose");
+%!  addParamValue (p3, "line", "tree", @(x) any (strcmp (x, {"tree", "circle"})));
+%!  addParamValue (p3, "color", "red", @(x) any (strcmp (x, {"red", "green"})));
+%!  addParamValue (p3, "style", "tt", @(x) any (strcmp (x, {"tt", "f", "i"})));
+%!endfunction
+
+## Test StructExpand
+%!test
+%! p3 = create_p3 ();
+%! p3.parse (struct ("line", "circle", "color", "green"));
+%! assert (p3.Results, struct ("op1", "val", "op2", 78, "verbose", false,
+%!                             "line", "circle", "color", "green",
+%!                             "style", "tt"))
+
+%!test
+%! p3 = create_p3 ();
+%! p3.parse (struct ("line", "circle", "color", "green"), "line", "tree");
+%! assert (p3.Results.line, "tree")
+%! p3.parse ("line", "tree", struct ("line", "circle", "color", "green"));
+%! assert (p3.Results.line, "circle")
+
+%!test # unmatched parameters with StructExpand
+%! p3 = create_p3 ();
+%! p3.KeepUnmatched = true;
+%! p3.parse (struct ("line", "circle", "color", "green", "bar", "baz"));
+%! assert (p3.Unmatched.bar, "baz")
+
+## The validation for the second optional argument throws an error with
+## a struct so check that we can handle it.
+%!test
+%! p3 = create_p3 ();
+%! p3.parse ("foo", struct ("color", "green"), "line", "tree");
+%! assert (p3.Results.op1, "foo")
+%! assert (p3.Results.line, "tree")
+%! assert (p3.Results.color, "green")
+%! assert (p3.Results.verbose, false)
+
+
 %!function r = foobar (varargin)
 %!  p = inputParser ();
 %!  p.addParamValue ("foo", "bar", @ischar);
 %!  p.parse (varargin{2:end});
 %!  r = p.Results;
 %!endfunction
 
 %!xtest assert (foobar (), struct ("foo", "bar"))
