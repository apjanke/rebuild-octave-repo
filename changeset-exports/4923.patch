# HG changeset patch
# User jwe
# Date 1091464391 0
#      Mon Aug 02 16:33:11 2004 +0000
# Node ID b11223097ad43aae78313bfee40673747a5a4b99
# Parent  cee8d88cf6194f3aa6263692a07e0bdc97680867
[project @ 2004-08-02 16:33:11 by jwe]

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,18 @@
+2004-08-02  John W. Eaton  <jwe@octave.org>
+
+	* ov-cx-mat.cc (try_narrowing_conversion): Also allow complex to
+	real conversion for N-d arrays.
+
+2004-07-30  John W. Eaton  <jwe@octave.org>
+
+	* lex.l (<COMMAND_START>[^#% \t\r\n\;\,\"\'][^ \t\r\n\;\,]*{S}*):
+	Also recognize \r as a word list separator.
+
 2004-07-27  John W. Eaton  <jwe@octave.org>
 
 	* bitfcns.cc (DO_BITSHIFT): Pass mask to bitshift.
 	(bitshift (double, int, EIGHT_BYTE_INT): New arg, mask.
 	(DO_UBITSHIFT, DO_SBITSHIFT): Use bitshfit, not operator >>.
 	Use nbits function from octave_int type to set bits_in_type.
 
 	* ov-struct.cc (Fisfield): Only print usage message if number of
diff --git a/src/lex.l b/src/lex.l
--- a/src/lex.l
+++ b/src/lex.l
@@ -332,17 +332,17 @@ NUMBER	(({D}+\.?{D}*{EXPON}?)|(\.{D}+{EX
       }
   }
 
 <COMMAND_START>[\"\'] {
     current_input_column++;
     COUNT_TOK_AND_RETURN (handle_string (yytext[0], true));
   }
 
-<COMMAND_START>[^#% \t\n\;\,\"\'][^ \t\n\;\,]*{S}* {
+<COMMAND_START>[^#% \t\r\n\;\,\"\'][^ \t\r\n\;\,]*{S}* {
     std::string tok = strip_trailing_whitespace (yytext);
     TOK_PUSH_AND_RETURN (tok, STRING);
   }
 
 %{
 // For this and the next two rules, we're looking at ']', and we
 // need to know if the next token is `=' or `=='.
 //
diff --git a/src/ov-cx-mat.cc b/src/ov-cx-mat.cc
--- a/src/ov-cx-mat.cc
+++ b/src/ov-cx-mat.cc
@@ -79,16 +79,18 @@ octave_complex_matrix::try_narrowing_con
 	  else
 	    retval = new octave_complex (c);
 	}
       else if (nr == 0 || nc == 0)
 	retval = new octave_matrix (Matrix (nr, nc));
       else if (cm.all_elements_are_real ())
 	retval = new octave_matrix (::real (cm));
     }
+  else if (matrix.all_elements_are_real ())
+    retval = new octave_matrix (::real (matrix));
 
   return retval;
 }
 
 void
 octave_complex_matrix::assign (const octave_value_list& idx,
 			       const ComplexNDArray& rhs)
 {
