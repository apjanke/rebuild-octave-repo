# HG changeset patch
# User David Bateman <dbateman@free.fr>
# Date 1259046032 -3600
#      Tue Nov 24 08:00:32 2009 +0100
# Branch release-3-2-x
# Node ID ae70ce64beb7968ea0417dab36a62dddd0941ca3
# Parent  38f3c198ba630c26880db38bc978703e5fdbd426
Fix test for valid threshold value in sparse LU factorization

diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,20 @@
+2009-10-27  David Bateman  <dbateman@free.fr>
+
+	* SparsedbleLU.cc (SparseLU::SparseLU (const SparseMatrix&,
+	const Matrix&, bool), SparseLU::SparseLU (const SparseMatrix&,
+	const ColumnVector&, const Matrix&, boo, bool, double, bool,
+	bool)): Fix test for valid pivot tolerance.
+	* SparseCmplxLU.cc (SparseComplexLU::SparseComplexLU 
+	(const SparseComplexMatrix&, const Matrix&, bool), 
+	SparseComplexLU::SparseComplexLU (const SparseComplexMatrix&,
+	const ColumnVector&, const Matrix&, boo, bool, double, bool,
+	bool)): Ditto.
+
 	2009-09-18  Jaroslav Hajek  <highegg@gmail.com>
 
 	Version 3.2.3 released.
 
 2009-08-31  John W. Eaton  <jwe@octave.org>
 
 	* liboctave/lo-ieee.cc (octave_ieee_init): Abort if floating point
 	format is not recognized as IEEE.
diff --git a/liboctave/SparseCmplxLU.cc b/liboctave/SparseCmplxLU.cc
--- a/liboctave/SparseCmplxLU.cc
+++ b/liboctave/SparseCmplxLU.cc
@@ -52,17 +52,17 @@ SparseComplexLU::SparseComplexLU (const 
   // Setup the control parameters
   Matrix Control (UMFPACK_CONTROL, 1);
   double *control = Control.fortran_vec ();
   UMFPACK_ZNAME (defaults) (control);
 
   double tmp = octave_sparse_params::get_key ("spumoni");
   if (!xisnan (tmp))
     Control (UMFPACK_PRL) = tmp;
-  if (piv_thres.nelem() != 2)
+  if (piv_thres.nelem() == 2)
     {
       tmp = (piv_thres (0) > 1. ? 1. : piv_thres (0));
       if (!xisnan (tmp))
 	Control (UMFPACK_PIVOT_TOLERANCE) = tmp;
       tmp = (piv_thres (1) > 1. ? 1. : piv_thres (1));
       if (!xisnan (tmp))
 	Control (UMFPACK_SYM_PIVOT_TOLERANCE) = tmp;
     }
@@ -261,17 +261,17 @@ SparseComplexLU::SparseComplexLU (const 
       // Setup the control parameters
       Matrix Control (UMFPACK_CONTROL, 1);
       double *control = Control.fortran_vec ();
       UMFPACK_ZNAME (defaults) (control);
 
       double tmp = octave_sparse_params::get_key ("spumoni");
       if (!xisnan (tmp))
 	Control (UMFPACK_PRL) = tmp;
-      if (piv_thres.nelem() != 2)
+      if (piv_thres.nelem() == 2)
 	{
 	  tmp = (piv_thres (0) > 1. ? 1. : piv_thres (0));
 	  if (!xisnan (tmp))
 	    Control (UMFPACK_PIVOT_TOLERANCE) = tmp;
 	  tmp = (piv_thres (1) > 1. ? 1. : piv_thres (1));
 	  if (!xisnan (tmp))
 	    Control (UMFPACK_SYM_PIVOT_TOLERANCE) = tmp;
 	}
diff --git a/liboctave/SparsedbleLU.cc b/liboctave/SparsedbleLU.cc
--- a/liboctave/SparsedbleLU.cc
+++ b/liboctave/SparsedbleLU.cc
@@ -52,17 +52,17 @@ SparseLU::SparseLU (const SparseMatrix& 
   Matrix Control (UMFPACK_CONTROL, 1);
   double *control = Control.fortran_vec ();
   UMFPACK_DNAME (defaults) (control);
 
   double tmp = octave_sparse_params::get_key ("spumoni");
   if (!xisnan (tmp))
     Control (UMFPACK_PRL) = tmp;
 
-  if (piv_thres.nelem() != 2)
+  if (piv_thres.nelem() == 2)
     {
       tmp = (piv_thres (0) > 1. ? 1. : piv_thres (0));
       if (!xisnan (tmp))
 	Control (UMFPACK_PIVOT_TOLERANCE) = tmp;
       tmp = (piv_thres (1) > 1. ? 1. : piv_thres (1));
       if (!xisnan (tmp))
 	Control (UMFPACK_SYM_PIVOT_TOLERANCE) = tmp;
     }
@@ -248,17 +248,17 @@ SparseLU::SparseLU (const SparseMatrix& 
       Matrix Control (UMFPACK_CONTROL, 1);
       double *control = Control.fortran_vec ();
       UMFPACK_DNAME (defaults) (control);
 
       double tmp = octave_sparse_params::get_key ("spumoni");
       if (!xisnan (tmp))
 	Control (UMFPACK_PRL) = tmp;
 
-      if (piv_thres.nelem() != 2)
+      if (piv_thres.nelem() == 2)
 	{
 	  tmp = (piv_thres (0) > 1. ? 1. : piv_thres (0));
 	  if (!xisnan (tmp))
 	    Control (UMFPACK_PIVOT_TOLERANCE) = tmp;
 	  tmp = (piv_thres (1) > 1. ? 1. : piv_thres (1));
 	  if (!xisnan (tmp))
 	    Control (UMFPACK_SYM_PIVOT_TOLERANCE) = tmp;
 	}
