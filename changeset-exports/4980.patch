# HG changeset patch
# User jwe
# Date 1094744837 0
#      Thu Sep 09 15:47:17 2004 +0000
# Node ID 003bbf6c13d81084e8835e25e1cab0385158f389
# Parent  ce4e3d39d05bc14e3dbe9a1d9c2c210726441d8e
[project @ 2004-09-09 15:47:17 by jwe]

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,24 @@
+2004-09-09  John W. Eaton  <jwe@octave.org>
+
+	* pt-pr-code.h (tree_print_code::newline): New optional arg, alt_nl.
+	* pt-pr-code.cc (tree_print_code::newline): Use it if not printing
+	newlines.
+	(tree_print_code::visit_statement): If we printed ";", call
+	newline with optional arg set to "".
+	(tree_print_code::printing_newlines): New data member.
+	(tree_print_code::tree_print_code): Initialize it.
+	(tree_print_code::suspend_newline, tree_print_code::resume_newline):
+	New functions.
+	(tree_print_code::newline, tree_print_code::indent): Use it
+
+	* ov-fcn-handle.cc (octave_fcn_handle::print_raw):
+	Print code for anonymous function handles.
+
 2004-09-08  John W. Eaton  <jwe@octave.org>
 
 	* ov-fcn-handle.cc (Ffunc2str, Ffunctions): Don't call substr(1)
 	on fh_nm, since we no longer need to skip "@" in the name.
 
 	* error.cc (pr_where): Do a better job of printing location info.
 
 	* input.cc (get_user_input): Print location info before the debug
diff --git a/src/ov-fcn-handle.cc b/src/ov-fcn-handle.cc
--- a/src/ov-fcn-handle.cc
+++ b/src/ov-fcn-handle.cc
@@ -31,17 +31,24 @@ Software Foundation, 59 Temple Place - S
 #include <iostream>
 
 #include "defun.h"
 #include "error.h"
 #include "gripes.h"
 #include "oct-map.h"
 #include "ov-base.h"
 #include "ov-fcn-handle.h"
+#include "ov-usr-fcn.h"
 #include "pr-output.h"
+#include "pt-pr-code.h"
+#include "pt-misc.h"
+#include "pt-stmt.h"
+#include "pt-cmd.h"
+#include "pt-exp.h"
+#include "pt-assign.h"
 #include "variables.h"
 
 DEFINE_OCTAVE_ALLOCATOR (octave_fcn_handle);
 
 DEFINE_OV_TYPEID_FUNCTIONS_AND_DATA (octave_fcn_handle,
 				     "function handle",
 				     "function handle");
 
@@ -89,18 +96,91 @@ octave_fcn_handle::print (std::ostream& 
 {
   print_raw (os, pr_as_read_syntax);
   newline (os);
 }
 
 void
 octave_fcn_handle::print_raw (std::ostream& os, bool pr_as_read_syntax) const
 {
-  octave_print_internal (os, nm, pr_as_read_syntax,
-			 current_print_indent_level ());
+  bool printed = false;
+
+  if (nm == "@<anonymous>")
+    {
+      tree_print_code tpc (os);
+
+      // FCN is const becuase this member function is, so we can't
+      // use it to call user_function_value, so we make a copy first.
+
+      octave_value ftmp = fcn;
+
+      octave_user_function *f = ftmp.user_function_value ();
+
+      if (f)
+	{
+	  tree_parameter_list *p = f->parameter_list ();
+
+	  os << "@(";
+
+	  if (p)
+	    p->accept (tpc);
+
+	  os << ") ";
+
+	  tree_statement_list *b = f->body ();
+
+	  if (b)
+	    {
+	      assert (b->length () == 1);
+
+	      tree_statement *s = b->front ();
+
+	      if (s)
+		{
+		  if (s->is_expression ())
+		    {
+		      tree_expression *e = s->expression ();
+
+		      if (e)
+			{
+			  if (e->is_assignment_expression ())
+			    {
+			      // The parser builds an assignment to
+			      // __retval__, and we don't want to
+			      // display that part.
+
+			      tree_simple_assignment *tsa
+				= reinterpret_cast <tree_simple_assignment *> (e);
+			      tree_expression *rhs = tsa->right_hand_side ();
+
+			      if (rhs)
+				rhs->accept (tpc);
+			    }
+			  else
+			    e->accept (tpc);
+			}
+		    }
+		  else
+		    {
+		      tree_command *c = s->command ();
+
+		      tpc.suspend_newline ();
+		      c->accept (tpc);
+		      tpc.resume_newline ();
+		    }
+		}
+	    }
+
+	  printed = true;
+	}
+    }
+
+  if (! printed)
+    octave_print_internal (os, nm, pr_as_read_syntax,
+			   current_print_indent_level ());
 }
 
 octave_value
 make_fcn_handle (const std::string& nm)
 {
   octave_value retval;
 
   octave_value f = lookup_function (nm);
diff --git a/src/pt-pr-code.cc b/src/pt-pr-code.cc
--- a/src/pt-pr-code.cc
+++ b/src/pt-pr-code.cc
@@ -878,32 +878,38 @@ tree_print_code::visit_statement (tree_s
 
   tree_command *cmd = stmt.command ();
 
   if (cmd)
     {
       cmd->accept (*this);
 
       if (! stmt.print_result ())
-	os << ";";
-
-      newline ();
+	{
+	  os << ";";
+	  newline (" ");
+	}
+      else
+	newline ();
     }
   else
     {
       tree_expression *expr = stmt.expression ();
 
       if (expr)
 	{
 	  expr->accept (*this);
 
 	  if (! stmt.print_result ())
-	    os << ";";
-
-	  newline ();
+	    {
+	      os << ";";
+	      newline (" ");
+	    }
+	  else
+	    newline ();
 	}
     }
 }
 
 void
 tree_print_code::visit_statement_list (tree_statement_list& lst)
 {
   for (tree_statement_list::iterator p = lst.begin (); p != lst.end (); p++)
@@ -1278,34 +1284,37 @@ tree_print_code::visit_do_until_command 
 // anything.
 //
 // This doesn't need to be fast, but isn't there a better way?
 
 void
 tree_print_code::indent (void)
 {
   assert (curr_print_indent_level >= 0);
- 
-  if (beginning_of_line)
-    {
-      os << prefix;
 
-      for (int i = 0; i < curr_print_indent_level; i++)
-	os << " ";
+  if (printing_newlines)
+    {
+      if (beginning_of_line)
+	{
+	  os << prefix;
 
-      beginning_of_line = false;
+	  for (int i = 0; i < curr_print_indent_level; i++)
+	    os << " ";
+
+	  beginning_of_line = false;
+	}
     }
 }
 
 // All print_code() functions should use this to print new lines.
 
 void
-tree_print_code::newline (void)
+tree_print_code::newline (const char *alt_txt)
 {
-  os << "\n";
+  os << (printing_newlines ? "\n" : alt_txt);
 
   beginning_of_line = true;
 }
 
 // For ressetting print_code state.
 
 void
 tree_print_code::reset (void)
diff --git a/src/pt-pr-code.h b/src/pt-pr-code.h
--- a/src/pt-pr-code.h
+++ b/src/pt-pr-code.h
@@ -42,17 +42,18 @@ tree_print_code : public tree_walker
 {
 public:
 
   tree_print_code (std::ostream& os_arg,
 		   const std::string& pfx = std::string (),
 		   bool pr_orig_txt = true)
     : os (os_arg), prefix (pfx), nesting (),
       print_original_text (pr_orig_txt),
-      curr_print_indent_level (0), beginning_of_line (true)
+      curr_print_indent_level (0), beginning_of_line (true),
+      printing_newlines (true)
   {
     // For "none".
     nesting.push ('n');
   }
 
   ~tree_print_code (void) { }
 
   void visit_argument_list (tree_argument_list&);
@@ -144,39 +145,46 @@ public:
   void visit_try_catch_command (tree_try_catch_command&);
 
   void visit_unwind_protect_command (tree_unwind_protect_command&);
 
   void visit_while_command (tree_while_command&);
 
   void visit_do_until_command (tree_do_until_command&);
 
+  void suspend_newline (void) { printing_newlines = false; }
+
+  void resume_newline (void) { printing_newlines = true; }
+
 private:
 
   std::ostream& os;
 
   std::string prefix;
 
   std::stack<char> nesting;
 
   bool print_original_text;
 
   // Current indentation.
   int curr_print_indent_level;
 
   // TRUE means we are at the beginning of a line.
   bool beginning_of_line;
 
+  // TRUE means we are printing newlines and indenting.
+  bool printing_newlines;
+
   void reset_indent_level (void) { curr_print_indent_level = 0; }
 
   void increment_indent_level (void) { curr_print_indent_level += 2; }
 
   void decrement_indent_level (void) { curr_print_indent_level -= 2; }
 
-  void newline (void);
+  void newline (const char *alt_txt = ", ");
 
   void indent (void);
 
   void reset (void);
 
   void print_parens (const tree_expression& expr, const char *txt);
 
   void print_comment_list (octave_comment_list *comment_list);
