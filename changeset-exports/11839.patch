# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1221459078 -7200
#      Mon Sep 15 08:11:18 2008 +0200
# Branch release-3-0-x
# Node ID 3497833c876cdd0e62dba8391470b1e7f3f73c92
# Parent  8c69552f590648bcd39f2143a4dd32fcb82ef263
fix integer exponentiation with negative exponent

diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,13 @@
+2008-09-12  Jaroslav Hajek  <highegg@gmail.com>
+
+	* oct-inttypes.h (pow (const octave_int<T>&, const octave_int<T>&)): 
+	Handle negative exponent correctly.
+
 2008-08-14  Jaroslav Hajek <highegg@gmail.com>
 
 	Version 3.0.2 released.
 
 2008-08-12  Jaroslav Hajek <highegg@gmail.com>
 
 	* lo-ieee.cc (octave_ieee_init): Try to ensure that octave_NaN is
 	classified as positive by lo_ieee_signbit.
diff --git a/liboctave/oct-inttypes.h b/liboctave/oct-inttypes.h
--- a/liboctave/oct-inttypes.h
+++ b/liboctave/oct-inttypes.h
@@ -343,20 +343,25 @@ template <class T>
 octave_int<T>
 pow (const octave_int<T>& a, const octave_int<T>& b)
 {
   octave_int<T> retval;
 
   octave_int<T> zero = octave_int<T> (0);
   octave_int<T> one = octave_int<T> (1);
 
-  if (b == zero)
+  if (b == zero || a == one)
     retval = one;
   else if (b < zero)
-    retval = zero;
+    {
+      if (std::numeric_limits<T>::is_signed && a.value () == -1)
+        retval = (b.value () % 2) ? a : one;
+      else
+        retval = zero;
+    }
   else
     {
       octave_int<T> a_val = a;
       octave_int<T> b_val = b;
 
       retval = a;
 
       b_val -= 1;
