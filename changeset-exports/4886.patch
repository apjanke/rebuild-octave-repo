# HG changeset patch
# User jwe
# Date 1083299511 0
#      Fri Apr 30 04:31:51 2004 +0000
# Node ID 54b076a24718707d817f4f0ded00d54151d926cc
# Parent  28ab079d8f0e531f3c585775bc8cac6895335e75
[project @ 2004-04-30 04:31:51 by jwe]

diff --git a/scripts/statistics/base/iqr.m b/scripts/statistics/base/iqr.m
--- a/scripts/statistics/base/iqr.m
+++ b/scripts/statistics/base/iqr.m
@@ -35,37 +35,38 @@ function y = iqr (x, dim)
   if (nargin != 1 && nargin != 2)
     usage ("iqr (x, dim)");
   endif
 
   nd = ndims (x);
   sz = size (x);
   nel = numel (x);
   if (nargin != 2)
-    %% Find the first non-singleton dimension
+    ## Find the first non-singleton dimension.
     dim  = 1;
-    while (dim < nd + 1 && sz (dim) == 1)
+    while (dim < nd + 1 && sz(dim) == 1)
       dim = dim + 1;
     endwhile
     if (dim > nd)
       dim = 1;
     endif
   else
-    if (! (isscalar (dim) && dim == round (dim)) && dim > 0 && 
-	dim < (nd + 1))
+    if (! (isscalar (dim) && dim == round (dim))
+	&& dim > 0
+	&& dim < (nd + 1))
       error ("iqr: dim must be an integer and valid dimension");
     endif
   endif
 
   ## This code is a bit heavy, but is needed until empirical_inv 
   ## takes other than vector arguments.
-  c = sz (dim);
-  sz (dim) = 1;
+  c = sz(dim);
+  sz(dim) = 1;
   y = zeros (sz);
-  stride = prod (sz (1:dim-1));
+  stride = prod (sz(1:dim-1));
   for i = 1 : nel / c;
     offset = i;
     offset2 = 0;
     while (offset > stride)
       offset -= stride;
       offset2++;
     endwhile
     offset += offset2 * stride * c;
diff --git a/scripts/statistics/base/kurtosis.m b/scripts/statistics/base/kurtosis.m
--- a/scripts/statistics/base/kurtosis.m
+++ b/scripts/statistics/base/kurtosis.m
@@ -49,39 +49,40 @@ function retval = kurtosis (x, dim)
 
   if (nargin != 1 && nargin != 2)
     usage ("kurtosis (x, dim)");
   endif
 
   nd = ndims (x);
   sz = size (x);
   if (nargin != 2)
-    %% Find the first non-singleton dimension
+    ## Find the first non-singleton dimension.
     dim  = 1;
-    while (dim < nd + 1 && sz (dim) == 1)
+    while (dim < nd + 1 && sz(dim) == 1)
       dim = dim + 1;
     endwhile
     if (dim > nd)
       dim = 1;
     endif
   else
-    if (! (isscalar (dim) && dim == round (dim)) && dim > 0 && 
-	dim < (nd + 1))
+    if (! (isscalar (dim) && dim == round (dim))
+	&& dim > 0
+	&& dim < (nd + 1))
       error ("kurtosis: dim must be an integer and valid dimension");
     endif
   endif
   
   if (! ismatrix (x))
     error ("kurtosis: x has to be a matrix or a vector");
   endif
 
-  c = sz (dim);
-  sz (dim) = 1;
+  c = sz(dim);
+  sz(dim) = 1;
   idx = ones (1, nd);
-  idx (dim) = c;
+  idx(dim) = c;
   x = x - repmat (mean (x, dim), idx);
   retval = zeros (sz);
   s = std (x, [], dim);
   x = sum(x.^4, dim);
   ind = find (s > 0);
-  retval (ind) = x (ind) ./ (c * s (ind) .^ 4) - 3;
+  retval(ind) = x(ind) ./ (c * s(ind) .^ 4) - 3;
 
 endfunction
diff --git a/scripts/statistics/base/ranks.m b/scripts/statistics/base/ranks.m
--- a/scripts/statistics/base/ranks.m
+++ b/scripts/statistics/base/ranks.m
@@ -38,57 +38,57 @@ function y = ranks (x, dim)
 
   if (nargin != 1 && nargin != 2)
     usage ("ranks (x, dim)");
   endif
 
   nd = ndims (x);
   sz = size (x);
   if (nargin != 2)
-    %% Find the first non-singleton dimension
+    ## Find the first non-singleton dimension.
     dim  = 1;
-    while (dim < nd + 1 && sz (dim) == 1)
+    while (dim < nd + 1 && sz(dim) == 1)
       dim = dim + 1;
     endwhile
     if (dim > nd)
       dim = 1;
     endif
   else
-    if (! (isscalar (dim) && dim == round (dim)) && dim > 0 && 
-	dim < (nd + 1))
+    if (! (isscalar (dim) && dim == round (dim))
+	&& dim > 0
+	&& dim < (nd + 1))
       error ("ranks: dim must be an integer and valid dimension");
     endif
   endif
 
-  if (sz (dim) == 1)
+  if (sz(dim) == 1)
     y = ones(sz);
   else
     ## The algorithm works only on dim=1, so permute if necesary
     if (dim != 1)
       perm = [1 : nd];
-      perm (1) = dim;
-      perm (dim) = 1;
+      perm(1) = dim;
+      perm(dim) = 1;
       x = permute (x, perm);
     endif
-    sz  = size (x);
+    sz = size (x);
     infvec = -Inf * ones ([1, sz(2 : end)]);
     [xs, y] = sort (x);
     eq_el = find (diff ([xs; infvec]) == 0);
     if (isempty (eq_el))
       [eq_el, y] = sort (y);  
     else
       runs = complement (eq_el+1, eq_el);
-      runs = reshape (y (runs), size (runs)) + 
-             floor (runs ./ sz (1)) * sz(1);
+      runs = reshape (y (runs), size (runs)) + floor (runs ./ sz(1)) * sz(1);
       len = diff (find (diff ([Inf; eq_el; -Inf]) != 1)) + 1;
-      [eq_el, y] = sort (y);  
+      [eq_el, y] = sort (y);
       for i = 1 : length(runs)
-	p = y (runs (i)) + (len (i) - 1) / 2;
-	for j = 0 : len (i) - 1
-	  y (runs (i) + j) = p;
+	p = y(runs(i)) + (len(i) - 1) / 2;
+	for j = 0 : len(i) - 1
+	  y(runs(i) + j) = p;
 	endfor
       endfor
     endif  
     if (dim != 1)
       y = permute (y, perm);
     endif
   endif
 
diff --git a/scripts/statistics/base/run_count.m b/scripts/statistics/base/run_count.m
--- a/scripts/statistics/base/run_count.m
+++ b/scripts/statistics/base/run_count.m
@@ -32,62 +32,63 @@ function retval = run_count (x, n, dim)
 
   if (nargin != 2 && nargin != 3)
     usage ("run_count (x, n) or run_count (x, n, dim)");
   endif
 
   nd = ndims (x);
   sz = size (x);
   if (nargin != 3)
-    %% Find the first non-singleton dimension
+    ## Find the first non-singleton dimension.
     dim  = 1;
-    while (dim < nd + 1 && sz (dim) == 1)
+    while (dim < nd + 1 && sz(dim) == 1)
       dim = dim + 1;
     endwhile
     if (dim > nd)
       dim = 1;
     endif
   else
-    if (! (isscalar (dim) && dim == round (dim)) && dim > 0 && 
-	dim < (nd + 1))
+    if (! (isscalar (dim) && dim == round (dim))
+	&& dim > 0
+	&& dim < (nd + 1))
       error ("run_count: dim must be an integer and valid dimension");
     endif
   endif
 
-  if (! (isscalar (n) && n == round (n)) && n > 0 )
+  if (! (isscalar (n) && n == round (n)) && n > 0)
     error ("run_count: n must be a positive integer");
   endif
   
   nd = ndims (x);
   if (dim != 1)
     perm = [1 : nd];
-    perm (1) = dim;
-    perm (dim) = 1;
+    perm(1) = dim;
+    perm(dim) = 1;
     x = permute (x, perm);
   endif
 
   sz = size (x);
   idx = cell ();
   for i = 1 : nd
-    idx {i} = 1 : sz(i);
+    idx{i} = 1 : sz(i);
   endfor
-  c = sz (1); 
+  c = sz(1); 
   tmp = zeros ([c + 1, sz(2 : end)]);
   infvec = Inf * ones ([1, sz(2 : end)]);
 
   ind = find (diff ([infvec; x; -infvec]) < 0);
-  tmp (ind (2 : end) - 1) = diff (ind);
-  tmp = tmp (idx {:});
+  tmp(ind(2:end) - 1) = diff(ind);
+  tmp = tmp(idx{:});
 
-  sz (1) = n;
+  sz(1) = n;
   retval = zeros (sz);
-  for k=1 : (n-1)
-    idx {1} = k;
-    retval (idx {:}) = sum (tmp == k);
+  for k = 1 : (n-1)
+    idx{1} = k;
+    retval(idx{:}) = sum (tmp == k);
   endfor
-  idx {1} = n;
+  idx{1} = n;
   retval (idx {:}) = sum (tmp >= n);
 
   if (dim != 1)
     retval = ipermute (retval, perm);
   endif
 
 endfunction
diff --git a/scripts/statistics/base/skewness.m b/scripts/statistics/base/skewness.m
--- a/scripts/statistics/base/skewness.m
+++ b/scripts/statistics/base/skewness.m
@@ -48,39 +48,40 @@ function retval = skewness (x, dim)
 
   if (nargin != 1 && nargin != 2)
     usage ("skewness (x, dim)");
   endif
 
   nd = ndims (x);
   sz = size (x);
   if (nargin != 2)
-    %% Find the first non-singleton dimension
+    ## Find the first non-singleton dimension.
     dim  = 1;
-    while (dim < nd + 1 && sz (dim) == 1)
+    while (dim < nd + 1 && sz(dim) == 1)
       dim = dim + 1;
     endwhile
     if (dim > nd)
       dim = 1;
     endif
   else
-    if (! (isscalar (dim) && dim == round (dim)) && dim > 0 && 
-	dim < (nd + 1))
+    if (! (isscalar (dim) && dim == round (dim))
+	&& dim > 0
+	&& dim < (nd + 1))
       error ("skewness: dim must be an integer and valid dimension");
     endif
   endif
 
   if (! ismatrix (x))
     error ("skewness: x has to be a matrix or a vector");
   endif
 
-  c = sz (dim);
+  c = sz(dim);
   idx = ones (1, nd);
   idx (dim) = c;
   x = x - repmat (mean (x, dim), idx);
-  sz (dim) = 1;
+  sz(dim) = 1;
   retval = zeros (sz);
   s = std (x, [], dim);
   ind = find (s > 0);
   x = sum (x .^ 3, dim);
-  retval (ind) = x (ind) ./ (c * s (ind) .^ 3);
+  retval(ind) = x(ind) ./ (c * s(ind) .^ 3);
   
 endfunction
diff --git a/scripts/statistics/base/statistics.m b/scripts/statistics/base/statistics.m
--- a/scripts/statistics/base/statistics.m
+++ b/scripts/statistics/base/statistics.m
@@ -34,40 +34,41 @@ function S = statistics (X, dim)
   if (nargin != 1 && nargin != 2)
     usage ("S = statistics (X, dim)");
   endif
 
   nd = ndims (X);
   sz = size (X);
   nel = numel (X);
   if (nargin != 2)
-    %% Find the first non-singleton dimension
+    ## Find the first non-singleton dimension.
     dim  = 1;
-    while (dim < nd + 1 && sz (dim) == 1)
+    while (dim < nd + 1 && sz(dim) == 1)
       dim = dim + 1;
     endwhile
     if (dim > nd)
       dim = 1;
     endif
   else
-    if (! (isscalar (dim) && dim == round (dim)) && dim > 0 && 
-	dim < (nd + 1))
+    if (! (isscalar (dim) && dim == round (dim))
+	&& dim > 0
+	&& dim < (nd + 1))
       error ("statistics: dim must be an integer and valid dimension");
     endif
   endif
   
-  if (! ismatrix (X) || sz (dim) < 2)
+  if (! ismatrix (X) || sz(dim) < 2)
     error ("statistics: invalid argument");
   endif    
 
   ## This code is a bit heavy, but is needed until empirical_inv 
   ## takes other than vector arguments.
-  c = sz (dim);
-  stride = prod (sz (1:dim-1));
-  sz (dim) = 3;
+  c = sz(dim);
+  stride = prod (sz(1:dim-1));
+  sz(dim) = 3;
   emp_inv = zeros (sz);
   for i = 1 : nel / c;
     offset = i;
     offset2 = 0;
     while (offset > stride)
       offset -= stride;
       offset2++;
     endwhile
diff --git a/scripts/statistics/base/studentize.m b/scripts/statistics/base/studentize.m
--- a/scripts/statistics/base/studentize.m
+++ b/scripts/statistics/base/studentize.m
@@ -34,34 +34,35 @@ function t = studentize (x, dim)
 
   if (nargin != 1 && nargin != 2)
     usage ("studentize (x, dim)");
   endif
 
   nd = ndims (x);
   sz = size (x);
   if (nargin != 2)
-    %% Find the first non-singleton dimension
+    ## Find the first non-singleton dimension.
     dim  = 1;
-    while (dim < nd + 1 && sz (dim) == 1)
+    while (dim < nd + 1 && sz(dim) == 1)
       dim = dim + 1;
     endwhile
     if (dim > nd)
       dim = 1;
     endif
   else
-    if (! (isscalar (dim) && dim == round (dim)) && dim > 0 && 
-	dim < (nd + 1))
+    if (! (isscalar (dim) && dim == round (dim))
+	&& dim > 0
+	&& dim < (nd + 1))
       error ("studentize: dim must be an integer and valid dimension");
     endif
   endif
 
   if (! ismatrix (x))
     error ("studentize: x must be a vector or a matrix");
   endif
 
-  c = sz (dim);
+  c = sz(dim);
   idx = ones (1, nd);
-  idx (dim) = c;
+  idx(dim) = c;
   t = x - repmat (mean (x, dim), idx);
   t = t ./ repmat (max (cat (dim, std(t, [], dim), ! any (t, dim)), [], dim), idx);
 
 endfunction
