# HG changeset patch
# User Mike Miller <mtmiller@octave.org>
# Date 1444881402 14400
#      Wed Oct 14 23:56:42 2015 -0400
# Node ID ab705b42cfd8b7bc55b5f714467531dbc06d34e9
# Parent  48fedd8fbff72bad75aaea5b610e146b07652b4b
build: Fix compilation error when building with --without-qrupdate

* CmplxCHOL.cc (ComplexCHOL::update, ComplexCHOL::downdate,
ComplexCHOL::insert_sym, ComplxCHOL::delete_sym, ComplexCHOL::shift_sym):
Insert new required argument to init function.

* dbleCHOL.cc (CHOL::update, CHOL::downdate, CHOL::insert_sym, CHOL::delete_sym,
CHOL::shift_sym): Likewise.

* fCmplxCHOL.cc (FloatComplexCHOL::update, FloatComplexCHOL::downdate,
FloatComplexCHOL::insert_sym, FloatComplexCHOL::delete_sym,
FloatComplexCHOL::shift_sym): Likewise.

* floatCHOL.cc (FloatCHOL::update, FloatCHOL::downdate, FloatCHOL::insert_sym,
FloatCHOL::delete_sym, FloatCHOL::shift_sym): Likewise.

diff --git a/liboctave/numeric/CmplxCHOL.cc b/liboctave/numeric/CmplxCHOL.cc
--- a/liboctave/numeric/CmplxCHOL.cc
+++ b/liboctave/numeric/CmplxCHOL.cc
@@ -330,17 +330,17 @@ ComplexCHOL::update (const ComplexColumn
 {
   warn_qrupdate_once ();
 
   octave_idx_type n = chol_mat.rows ();
 
   if (u.numel () == n)
     {
       init (chol_mat.hermitian () * chol_mat
-            + ComplexMatrix (u) * ComplexMatrix (u).hermitian (), false);
+            + ComplexMatrix (u) * ComplexMatrix (u).hermitian (), true, false);
     }
   else
     (*current_liboctave_error_handler) ("cholupdate: dimension mismatch");
 }
 
 static bool
 singular (const ComplexMatrix& a)
 {
@@ -361,17 +361,17 @@ ComplexCHOL::downdate (const ComplexColu
   if (u.numel () == n)
     {
       if (singular (chol_mat))
         info = 2;
       else
         {
           info = init (chol_mat.hermitian () * chol_mat
                        - ComplexMatrix (u) * ComplexMatrix (u).hermitian (),
-                       false);
+                       true, false);
           if (info) info = 1;
         }
     }
   else
     (*current_liboctave_error_handler) ("cholupdate: dimension mismatch");
 
   return info;
 }
@@ -404,17 +404,17 @@ ComplexCHOL::insert_sym (const ComplexCo
               {
                 if (l == j)
                   a1(k, l) = u(k);
                 else if (k == j)
                   a1(k, l) = std::conj (u(l));
                 else
                   a1(k, l) = a(k < j ? k : k-1, l < j ? l : l-1);
               }
-          info = init (a1, false);
+          info = init (a1, true, false);
           if (info) info = 1;
         }
     }
 
   return info;
 }
 
 void
@@ -426,17 +426,17 @@ ComplexCHOL::delete_sym (octave_idx_type
 
   if (j < 0 || j > n-1)
     (*current_liboctave_error_handler) ("choldelete: index out of range");
   else
     {
       ComplexMatrix a = chol_mat.hermitian () * chol_mat;
       a.delete_elements (1, idx_vector (j));
       a.delete_elements (0, idx_vector (j));
-      init (a, false);
+      init (a, true, false);
     }
 }
 
 void
 ComplexCHOL::shift_sym (octave_idx_type i, octave_idx_type j)
 {
   warn_qrupdate_once ();
 
@@ -455,17 +455,17 @@ ComplexCHOL::shift_sym (octave_idx_type 
           p(j) = i;
         }
       else if (j < i)
         {
           p(j) = i;
           for (octave_idx_type k = j+1; k < i+1; k++) p(k) = k-1;
         }
 
-      init (a.index (idx_vector (p), idx_vector (p)), false);
+      init (a.index (idx_vector (p), idx_vector (p)), true, false);
     }
 }
 
 #endif
 
 ComplexMatrix
 chol2inv (const ComplexMatrix& r)
 {
diff --git a/liboctave/numeric/dbleCHOL.cc b/liboctave/numeric/dbleCHOL.cc
--- a/liboctave/numeric/dbleCHOL.cc
+++ b/liboctave/numeric/dbleCHOL.cc
@@ -338,17 +338,17 @@ CHOL::update (const ColumnVector& u)
 {
   warn_qrupdate_once ();
 
   octave_idx_type n = chol_mat.rows ();
 
   if (u.numel () == n)
     {
       init (chol_mat.transpose () * chol_mat
-            + Matrix (u) * Matrix (u).transpose (), false);
+            + Matrix (u) * Matrix (u).transpose (), true, false);
     }
   else
     (*current_liboctave_error_handler) ("cholupdate: dimension mismatch");
 }
 
 static bool
 singular (const Matrix& a)
 {
@@ -368,17 +368,17 @@ CHOL::downdate (const ColumnVector& u)
 
   if (u.numel () == n)
     {
       if (singular (chol_mat))
         info = 2;
       else
         {
           info = init (chol_mat.transpose () * chol_mat
-                       - Matrix (u) * Matrix (u).transpose (), false);
+                       - Matrix (u) * Matrix (u).transpose (), true, false);
           if (info) info = 1;
         }
     }
   else
     (*current_liboctave_error_handler) ("cholupdate: dimension mismatch");
 
   return info;
 }
@@ -409,17 +409,17 @@ CHOL::insert_sym (const ColumnVector& u,
               {
                 if (l == j)
                   a1(k, l) = u(k);
                 else if (k == j)
                   a1(k, l) = u(l);
                 else
                   a1(k, l) = a(k < j ? k : k-1, l < j ? l : l-1);
               }
-          info = init (a1, false);
+          info = init (a1, true, false);
           if (info) info = 1;
         }
     }
 
   return info;
 }
 
 void
@@ -431,17 +431,17 @@ CHOL::delete_sym (octave_idx_type j)
 
   if (j < 0 || j > n-1)
     (*current_liboctave_error_handler) ("choldelete: index out of range");
   else
     {
       Matrix a = chol_mat.transpose () * chol_mat;
       a.delete_elements (1, idx_vector (j));
       a.delete_elements (0, idx_vector (j));
-      init (a, false);
+      init (a, true, false);
     }
 }
 
 void
 CHOL::shift_sym (octave_idx_type i, octave_idx_type j)
 {
   warn_qrupdate_once ();
 
@@ -460,17 +460,17 @@ CHOL::shift_sym (octave_idx_type i, octa
           p(j) = i;
         }
       else if (j < i)
         {
           p(j) = i;
           for (octave_idx_type k = j+1; k < i+1; k++) p(k) = k-1;
         }
 
-      init (a.index (idx_vector (p), idx_vector (p)), false);
+      init (a.index (idx_vector (p), idx_vector (p)), true, false);
     }
 }
 
 #endif
 
 Matrix
 chol2inv (const Matrix& r)
 {
diff --git a/liboctave/numeric/fCmplxCHOL.cc b/liboctave/numeric/fCmplxCHOL.cc
--- a/liboctave/numeric/fCmplxCHOL.cc
+++ b/liboctave/numeric/fCmplxCHOL.cc
@@ -332,17 +332,17 @@ FloatComplexCHOL::update (const FloatCom
   warn_qrupdate_once ();
 
   octave_idx_type n = chol_mat.rows ();
 
   if (u.length () == n)
     {
       init (chol_mat.hermitian () * chol_mat
             + FloatComplexMatrix (u) * FloatComplexMatrix (u).hermitian (),
-            false);
+            true, false);
     }
   else
     (*current_liboctave_error_handler) ("cholupdate: dimension mismatch");
 }
 
 static bool
 singular (const FloatComplexMatrix& a)
 {
@@ -364,17 +364,17 @@ FloatComplexCHOL::downdate (const FloatC
     {
       if (singular (chol_mat))
         info = 2;
       else
         {
           info = init (chol_mat.hermitian () * chol_mat
                        - FloatComplexMatrix (u)
                        * FloatComplexMatrix (u).hermitian (),
-                       false);
+                       true, false);
           if (info) info = 1;
         }
     }
   else
     (*current_liboctave_error_handler) ("cholupdate: dimension mismatch");
 
   return info;
 }
@@ -408,17 +408,17 @@ FloatComplexCHOL::insert_sym (const Floa
               {
                 if (l == j)
                   a1(k, l) = u(k);
                 else if (k == j)
                   a1(k, l) = std::conj (u(l));
                 else
                   a1(k, l) = a(k < j ? k : k-1, l < j ? l : l-1);
               }
-          info = init (a1, false);
+          info = init (a1, true, false);
           if (info) info = 1;
         }
     }
 
   return info;
 }
 
 void
@@ -430,17 +430,17 @@ FloatComplexCHOL::delete_sym (octave_idx
 
   if (j < 0 || j > n-1)
     (*current_liboctave_error_handler) ("choldelete: index out of range");
   else
     {
       FloatComplexMatrix a = chol_mat.hermitian () * chol_mat;
       a.delete_elements (1, idx_vector (j));
       a.delete_elements (0, idx_vector (j));
-      init (a, false);
+      init (a, true, false);
     }
 }
 
 void
 FloatComplexCHOL::shift_sym (octave_idx_type i, octave_idx_type j)
 {
   warn_qrupdate_once ();
 
@@ -459,17 +459,17 @@ FloatComplexCHOL::shift_sym (octave_idx_
           p(j) = i;
         }
       else if (j < i)
         {
           p(j) = i;
           for (octave_idx_type k = j+1; k < i+1; k++) p(k) = k-1;
         }
 
-      init (a.index (idx_vector (p), idx_vector (p)), false);
+      init (a.index (idx_vector (p), idx_vector (p)), true, false);
     }
 }
 
 #endif
 
 FloatComplexMatrix
 chol2inv (const FloatComplexMatrix& r)
 {
diff --git a/liboctave/numeric/floatCHOL.cc b/liboctave/numeric/floatCHOL.cc
--- a/liboctave/numeric/floatCHOL.cc
+++ b/liboctave/numeric/floatCHOL.cc
@@ -338,17 +338,17 @@ FloatCHOL::update (const FloatColumnVect
 {
   warn_qrupdate_once ();
 
   octave_idx_type n = chol_mat.rows ();
 
   if (u.numel () == n)
     {
       init (chol_mat.transpose () * chol_mat
-            + FloatMatrix (u) * FloatMatrix (u).transpose (), false);
+            + FloatMatrix (u) * FloatMatrix (u).transpose (), true, false);
     }
   else
     (*current_liboctave_error_handler) ("cholupdate: dimension mismatch");
 }
 
 static bool
 singular (const FloatMatrix& a)
 {
@@ -368,17 +368,18 @@ FloatCHOL::downdate (const FloatColumnVe
 
   if (u.numel () == n)
     {
       if (singular (chol_mat))
         info = 2;
       else
         {
           info = init (chol_mat.transpose () * chol_mat
-                       - FloatMatrix (u) * FloatMatrix (u).transpose (), false);
+                       - FloatMatrix (u) * FloatMatrix (u).transpose (), true,
+                       false);
           if (info) info = 1;
         }
     }
   else
     (*current_liboctave_error_handler) ("cholupdate: dimension mismatch");
 
   return info;
 }
@@ -409,17 +410,17 @@ FloatCHOL::insert_sym (const FloatColumn
               {
                 if (l == j)
                   a1(k, l) = u(k);
                 else if (k == j)
                   a1(k, l) = u(l);
                 else
                   a1(k, l) = a(k < j ? k : k-1, l < j ? l : l-1);
               }
-          info = init (a1, false);
+          info = init (a1, true, false);
           if (info) info = 1;
         }
     }
 
   return info;
 }
 
 void
@@ -431,17 +432,17 @@ FloatCHOL::delete_sym (octave_idx_type j
 
   if (j < 0 || j > n-1)
     (*current_liboctave_error_handler) ("choldelete: index out of range");
   else
     {
       FloatMatrix a = chol_mat.transpose () * chol_mat;
       a.delete_elements (1, idx_vector (j));
       a.delete_elements (0, idx_vector (j));
-      init (a, false);
+      init (a, true, false);
     }
 }
 
 void
 FloatCHOL::shift_sym (octave_idx_type i, octave_idx_type j)
 {
   warn_qrupdate_once ();
 
@@ -460,17 +461,17 @@ FloatCHOL::shift_sym (octave_idx_type i,
           p(j) = i;
         }
       else if (j < i)
         {
           p(j) = i;
           for (octave_idx_type k = j+1; k < i+1; k++) p(k) = k-1;
         }
 
-      init (a.index (idx_vector (p), idx_vector (p)), false);
+      init (a.index (idx_vector (p), idx_vector (p)), true, false);
     }
 }
 
 #endif
 
 FloatMatrix
 chol2inv (const FloatMatrix& r)
 {
