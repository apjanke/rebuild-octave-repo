# HG changeset patch
# User Rik <rik@octave.org>
# Date 1510634886 28800
#      Mon Nov 13 20:48:06 2017 -0800
# Node ID 97e628756971e9bd545b1085668ba138975f8524
# Parent  1310d8b50ec2d173e81f1224762c96a9e311c6e3
Adjust coding code in cset 1310d8b50ec2 for Octave coding conventions.

* eigs-base.cc, eigs.m: Adjust coding code in cset 1310d8b50ec2 for Octave
coding conventions.

diff --git a/liboctave/numeric/eigs-base.cc b/liboctave/numeric/eigs-base.cc
--- a/liboctave/numeric/eigs-base.cc
+++ b/liboctave/numeric/eigs-base.cc
@@ -277,17 +277,17 @@ LuAminusSigmaB (const SparseMatrix& m, c
   SparseMatrix AminusSigmaB (m);
 
   if (have_b)
     {
       if (cholB)
         {
           if (permB.numel ())
             {
-              SparseMatrix tmp(n,n,n);
+              SparseMatrix tmp (n,n,n);
               for (octave_idx_type i = 0; i < n; i++)
                 {
                   tmp.xcidx (i) = i;
                   tmp.xridx (i) =
                     static_cast<octave_idx_type>(permB(i));
                   tmp.xdata (i) = 1;
                 }
               tmp.xcidx (n) = n;
@@ -441,17 +441,17 @@ LuAminusSigmaB (const SparseComplexMatri
   SparseComplexMatrix AminusSigmaB (m);
 
   if (have_b)
     {
       if (cholB)
         {
           if (permB.numel ())
             {
-              SparseMatrix tmp(n,n,n);
+              SparseMatrix tmp (n,n,n);
               for (octave_idx_type i = 0; i < n; i++)
                 {
                   tmp.xcidx (i) = i;
                   tmp.xridx (i) =
                     static_cast<octave_idx_type>(permB(i));
                   tmp.xdata (i) = 1;
                 }
               tmp.xcidx (n) = n;
@@ -622,19 +622,17 @@ EigsRealSymmetricMatrix (const M& m, con
   if (resid.isempty ())
     {
       std::string rand_dist = octave_rand::distribution ();
       octave_rand::distribution ("uniform");
       resid = ColumnVector (octave_rand::vector (n));
       octave_rand::distribution (rand_dist);
     }
   else if (m.cols () != resid.numel ())
-    {
-      (*current_liboctave_error_handler) ("eigs: opts.v0 must be n-by-1");
-    }
+    (*current_liboctave_error_handler) ("eigs: opts.v0 must be n-by-1");
 
   if (n < 3)
     (*current_liboctave_error_handler) ("eigs: n must be at least 3");
 
   if (p < 0)
     {
       p = k * 2;
 
@@ -648,17 +646,17 @@ EigsRealSymmetricMatrix (const M& m, con
   if (k < 1 || k > n - 2)
     (*current_liboctave_error_handler)
       ("eigs: Invalid number of eigenvalues to extract"
        " (must be 0 < k < n-1-1).\n"
        "      Use 'eig (full (A))' instead");
 
   if (p <= k || p > n)
     (*current_liboctave_error_handler)
-      ("eigs: opts.p must be greater than k and less or equal to n");
+      ("eigs: opts.p must be greater than k and less than or equal to n");
 
   if (have_b && cholB && ! permB.isempty ())
     {
       // Check the we really have a permutation vector
       if (permB.numel () != n)
         (*current_liboctave_error_handler) ("eigs: permB vector invalid");
 
       Array<bool> checked (dim_vector (n, 1), false);
@@ -907,19 +905,17 @@ EigsRealSymmetricMatrixShift (const M& m
   if (resid.isempty ())
     {
       std::string rand_dist = octave_rand::distribution ();
       octave_rand::distribution ("uniform");
       resid = ColumnVector (octave_rand::vector (n));
       octave_rand::distribution (rand_dist);
     }
   else if (m.cols () != resid.numel ())
-    {
-      (*current_liboctave_error_handler) ("eigs: opts.v0 must be n-by-1");
-    }
+    (*current_liboctave_error_handler) ("eigs: opts.v0 must be n-by-1");
 
   if (n < 3)
     (*current_liboctave_error_handler) ("eigs: n must be at least 3");
 
   if (k <= 0 || k >= n - 1)
     (*current_liboctave_error_handler)
       ("eigs: Invalid number of eigenvalues to extract"
        " (must be 0 < k < n-1-1).\n"
@@ -933,17 +929,17 @@ EigsRealSymmetricMatrixShift (const M& m
         p = 20;
 
       if (p > n)
         p = n;
     }
 
   if (p <= k || p > n)
     (*current_liboctave_error_handler)
-      ("eigs: opts.p must be greater than k and less or equal to n");
+      ("eigs: opts.p must be greater than k and less than or equal to n");
 
   if (have_b && cholB && ! permB.isempty ())
     {
       // Check the we really have a permutation vector
       if (permB.numel () != n)
         (*current_liboctave_error_handler) ("eigs: permB vector invalid");
 
       Array<bool> checked (dim_vector (n, 1), false);
@@ -1039,50 +1035,49 @@ EigsRealSymmetricMatrixShift (const M& m
           if (have_b)
             {
               if (ido == -1)
                 {
                   OCTAVE_LOCAL_BUFFER (double, dtmp, n);
 
                   vector_product (b, workd+iptr(0)-1, dtmp);
 
-                  Matrix tmp(n, 1);
+                  Matrix tmp (n, 1);
 
                   for (F77_INT i = 0; i < n; i++)
                     tmp(i,0) = dtmp[P[i]];
 
                   lusolve (L, U, tmp);
 
                   double *ip2 = workd+iptr(1)-1;
                   for (F77_INT i = 0; i < n; i++)
                     ip2[Q[i]] = tmp(i,0);
                 }
               else if (ido == 2)
                 vector_product (b, workd+iptr(0)-1, workd+iptr(1)-1);
               else
                 {
                   double *ip2 = workd+iptr(2)-1;
-                  Matrix tmp(n, 1);
+                  Matrix tmp (n, 1);
 
                   for (F77_INT i = 0; i < n; i++)
                     tmp(i,0) = ip2[P[i]];
 
                   lusolve (L, U, tmp);
 
                   ip2 = workd+iptr(1)-1;
                   for (F77_INT i = 0; i < n; i++)
                     ip2[Q[i]] = tmp(i,0);
                 }
             }
           else
             {
-              // ido cannot be 2 for non-generalized problems
-              // see dsaupd2
+              // ido cannot be 2 for non-generalized problems (see dsaupd2).
               double *ip2 = workd+iptr(0)-1;
-              Matrix tmp(n, 1);
+              Matrix tmp (n, 1);
 
               for (F77_INT i = 0; i < n; i++)
                 tmp(i,0) = ip2[P[i]];
 
               lusolve (L, U, tmp);
 
               ip2 = workd+iptr(1)-1;
               for (F77_INT i = 0; i < n; i++)
@@ -1189,19 +1184,17 @@ EigsRealSymmetricFunc (EigsFunc fun, oct
   if (resid.isempty ())
     {
       std::string rand_dist = octave_rand::distribution ();
       octave_rand::distribution ("uniform");
       resid = ColumnVector (octave_rand::vector (n));
       octave_rand::distribution (rand_dist);
     }
   else if (n != resid.numel ())
-    {
-      (*current_liboctave_error_handler) ("eigs: opts.v0 must be n-by-1");
-    }
+    (*current_liboctave_error_handler) ("eigs: opts.v0 must be n-by-1");
 
   if (n < 3)
     (*current_liboctave_error_handler) ("eigs: n must be at least 3");
 
   if (p < 0)
     {
       p = k * 2;
 
@@ -1215,17 +1208,17 @@ EigsRealSymmetricFunc (EigsFunc fun, oct
   if (k <= 0 || k >= n - 1)
     (*current_liboctave_error_handler)
       ("eigs: Invalid number of eigenvalues to extract"
        " (must be 0 < k < n-1).\n"
        "      Use 'eig (full (A))' instead");
 
   if (p <= k || p > n)
     (*current_liboctave_error_handler)
-      ("eigs: opts.p must be greater than k and less or equal to n");
+      ("eigs: opts.p must be greater than k and less than or equal to n");
 
   if (! have_sigma)
     {
       if (typ != "LM" && typ != "SM" && typ != "LA" && typ != "SA"
           && typ != "BE" && typ != "LR" && typ != "SR" && typ != "LI"
           && typ != "SI")
         (*current_liboctave_error_handler) ("eigs: unrecognized sigma value");
 
@@ -1446,19 +1439,17 @@ EigsRealNonSymmetricMatrix (const M& m, 
   if (resid.isempty ())
     {
       std::string rand_dist = octave_rand::distribution ();
       octave_rand::distribution ("uniform");
       resid = ColumnVector (octave_rand::vector (n));
       octave_rand::distribution (rand_dist);
     }
   else if (m.cols () != resid.numel ())
-    {
-      (*current_liboctave_error_handler) ("eigs: opts.v0 must be n-by-1");
-    }
+    (*current_liboctave_error_handler) ("eigs: opts.v0 must be n-by-1");
 
   if (n < 3)
     (*current_liboctave_error_handler) ("eigs: n must be at least 3");
 
   if (p < 0)
     {
       p = k * 2 + 1;
 
@@ -1472,17 +1463,17 @@ EigsRealNonSymmetricMatrix (const M& m, 
   if (k <= 0 || k >= n - 1)
     (*current_liboctave_error_handler)
       ("eigs: Invalid number of eigenvalues to extract"
        " (must be 0 < k < n-1).\n"
        "      Use 'eig (full (A))' instead");
 
   if (p <= k || p > n)
     (*current_liboctave_error_handler)
-      ("eigs: opts.p must be greater than k and less or equal to n");
+      ("eigs: opts.p must be greater than k and less than or equal to n");
 
   if (have_b && cholB && ! permB.isempty ())
     {
       // Check the we really have a permutation vector
       if (permB.numel () != n)
         (*current_liboctave_error_handler) ("eigs: permB vector invalid");
 
       Array<bool> checked (dim_vector (n, 1), false);
@@ -1555,25 +1546,25 @@ EigsRealNonSymmetricMatrix (const M& m, 
   OCTAVE_LOCAL_BUFFER (double, workl, lwork + 1);
   OCTAVE_LOCAL_BUFFER (double, workd, 3 * n + 1);
   double *presid = resid.fortran_vec ();
 
   do
     {
       F77_INT tmp_info = octave::to_f77_int (info);
 
-      // on exit, ip(4) <= k + 1 is the number of converged eigenvalues
-      // see dnaupd2
+      // On exit, ip(4) <= k + 1 is the number of converged eigenvalues.
+      // See dnaupd2.
       F77_FUNC (dnaupd, DNAUPD)
         (ido, F77_CONST_CHAR_ARG2 (&bmat, 1), n,
          F77_CONST_CHAR_ARG2 ((typ.c_str ()), 2),
          k, tol, presid, p, v, n, iparam,
          ipntr, workd, workl, lwork, tmp_info
          F77_CHAR_ARG_LEN(1) F77_CHAR_ARG_LEN(2));
-       // k is not changed
+      // k is not changed
 
       info = tmp_info;
 
       if (f77_exception_encountered)
         (*current_liboctave_error_handler)
           ("eigs: unrecoverable exception encountered in dnaupd");
 
       if (disp > 0 && ! octave::math::isnan(workl[iptr(5)-1]))
@@ -1647,25 +1638,25 @@ EigsRealNonSymmetricMatrix (const M& m, 
   double *z = eig_vec2.fortran_vec ();
 
   OCTAVE_LOCAL_BUFFER (double, dr, k + 1);
   OCTAVE_LOCAL_BUFFER (double, di, k + 1);
   OCTAVE_LOCAL_BUFFER (double, workev, 3 * p);
   for (F77_INT i = 0; i < k+1; i++)
     dr[i] = di[i] = 0.;
 
-  F77_INT k0 = k; // original number of eigenvalues required
+  F77_INT k0 = k;  // original number of eigenvalues required
   F77_FUNC (dneupd, DNEUPD)
     (rvec, F77_CONST_CHAR_ARG2 ("A", 1), sel, dr, di, z, n, sigmar,
      sigmai, workev,  F77_CONST_CHAR_ARG2 (&bmat, 1), n,
      F77_CONST_CHAR_ARG2 ((typ.c_str ()), 2), k, tol, presid, p, v, n, iparam,
      ipntr, workd, workl, lwork, info2 F77_CHAR_ARG_LEN(1) F77_CHAR_ARG_LEN(1)
      F77_CHAR_ARG_LEN(2));
   // on exit, if (and only if) rvec == true, k may have been increased by one
-  // and be equal to ip(4), see dngets
+  // and be equal to ip(4), see dngets.
 
   if (f77_exception_encountered)
     (*current_liboctave_error_handler)
       ("eigs: unrecoverable exception encountered in dneupd");
 
   if (! rvec && ip(4) > k)
     k = ip(4);
 
@@ -1768,19 +1759,17 @@ EigsRealNonSymmetricMatrixShift (const M
   if (resid.isempty ())
     {
       std::string rand_dist = octave_rand::distribution ();
       octave_rand::distribution ("uniform");
       resid = ColumnVector (octave_rand::vector (n));
       octave_rand::distribution (rand_dist);
     }
   else if (m.cols () != resid.numel ())
-    {
-      (*current_liboctave_error_handler) ("eigs: opts.v0 must be n-by-1");
-    }
+    (*current_liboctave_error_handler) ("eigs: opts.v0 must be n-by-1");
 
   if (n < 3)
     (*current_liboctave_error_handler) ("eigs: n must be at least 3");
 
   if (p < 0)
     {
       p = k * 2 + 1;
 
@@ -1794,17 +1783,17 @@ EigsRealNonSymmetricMatrixShift (const M
   if (k <= 0 || k >= n - 1)
     (*current_liboctave_error_handler)
       ("eigs: Invalid number of eigenvalues to extract"
        " (must be 0 < k < n-1).\n"
        "      Use 'eig (full (A))' instead");
 
   if (p <= k || p > n)
     (*current_liboctave_error_handler)
-      ("eigs: opts.p must be greater than k and less or equal to n");
+      ("eigs: opts.p must be greater than k and less than or equal to n");
 
   if (have_b && cholB && ! permB.isempty ())
     {
       // Check that we really have a permutation vector
       if (permB.numel () != n)
         (*current_liboctave_error_handler) ("eigs: permB vector invalid");
 
       Array<bool> checked (dim_vector (n, 1), false);
@@ -1857,18 +1846,18 @@ EigsRealNonSymmetricMatrixShift (const M
   OCTAVE_LOCAL_BUFFER (double, workl, lwork + 1);
   OCTAVE_LOCAL_BUFFER (double, workd, 3 * n + 1);
   double *presid = resid.fortran_vec ();
 
   do
     {
       F77_INT tmp_info = octave::to_f77_int (info);
 
-      // on exit, ip(4) <= k + 1 is the number of converged eigenvalues
-      // see dnaupd2
+      // On exit, ip(4) <= k + 1 is the number of converged eigenvalues.
+      // See dnaupd2.
       F77_FUNC (dnaupd, DNAUPD)
         (ido, F77_CONST_CHAR_ARG2 (&bmat, 1), n,
          F77_CONST_CHAR_ARG2 ((typ.c_str ()), 2),
          k, tol, presid, p, v, n, iparam,
          ipntr, workd, workl, lwork, tmp_info
          F77_CHAR_ARG_LEN(1) F77_CHAR_ARG_LEN(2));
       // k is not changed
 
@@ -1903,50 +1892,49 @@ EigsRealNonSymmetricMatrixShift (const M
           if (have_b)
             {
               if (ido == -1)
                 {
                   OCTAVE_LOCAL_BUFFER (double, dtmp, n);
 
                   vector_product (b, workd+iptr(0)-1, dtmp);
 
-                  Matrix tmp(n, 1);
+                  Matrix tmp (n, 1);
 
                   for (F77_INT i = 0; i < n; i++)
                     tmp(i,0) = dtmp[P[i]];
 
                   lusolve (L, U, tmp);
 
                   double *ip2 = workd+iptr(1)-1;
                   for (F77_INT i = 0; i < n; i++)
                     ip2[Q[i]] = tmp(i,0);
                 }
               else if (ido == 2)
                 vector_product (b, workd+iptr(0)-1, workd+iptr(1)-1);
               else
                 {
                   double *ip2 = workd+iptr(2)-1;
-                  Matrix tmp(n, 1);
+                  Matrix tmp (n, 1);
 
                   for (F77_INT i = 0; i < n; i++)
                     tmp(i,0) = ip2[P[i]];
 
                   lusolve (L, U, tmp);
 
                   ip2 = workd+iptr(1)-1;
                   for (F77_INT i = 0; i < n; i++)
                     ip2[Q[i]] = tmp(i,0);
                 }
             }
           else
             {
-              // ido cannot be 2 for non-generalized problems
-              // see dnaupd2
+              // ido cannot be 2 for non-generalized problems (see dnaupd2).
               double *ip2 = workd+iptr(0)-1;
-              Matrix tmp(n, 1);
+              Matrix tmp (n, 1);
 
               for (F77_INT i = 0; i < n; i++)
                 tmp(i,0) = ip2[P[i]];
 
               lusolve (L, U, tmp);
 
               ip2 = workd+iptr(1)-1;
               for (F77_INT i = 0; i < n; i++)
@@ -1987,25 +1975,25 @@ EigsRealNonSymmetricMatrixShift (const M
   double *z = eig_vec2.fortran_vec ();
 
   OCTAVE_LOCAL_BUFFER (double, dr, k + 1);
   OCTAVE_LOCAL_BUFFER (double, di, k + 1);
   OCTAVE_LOCAL_BUFFER (double, workev, 3 * p);
   for (F77_INT i = 0; i < k+1; i++)
     dr[i] = di[i] = 0.;
 
-  F77_INT k0 = k; // original number of eigenvalues required
+  F77_INT k0 = k;  // original number of eigenvalues required
   F77_FUNC (dneupd, DNEUPD)
     (rvec, F77_CONST_CHAR_ARG2 ("A", 1), sel, dr, di, z, n, sigmar,
      sigmai, workev,  F77_CONST_CHAR_ARG2 (&bmat, 1), n,
      F77_CONST_CHAR_ARG2 ((typ.c_str ()), 2), k, tol, presid, p, v, n, iparam,
      ipntr, workd, workl, lwork, info2 F77_CHAR_ARG_LEN(1) F77_CHAR_ARG_LEN(1)
      F77_CHAR_ARG_LEN(2));
-  // on exit, if (and only if) rvec == true, k may have been increased by one
-  // and be equal to ip(4), see dngets
+  // On exit, if (and only if) rvec == true, k may have been increased by one
+  // and be equal to ip(4), see dngets.
 
   if (f77_exception_encountered)
     (*current_liboctave_error_handler)
       ("eigs: unrecoverable exception encountered in dneupd");
 
   if (! rvec && ip(4) > k)
     k = ip(4);
 
@@ -2092,19 +2080,17 @@ EigsRealNonSymmetricFunc (EigsFunc fun, 
   if (resid.isempty ())
     {
       std::string rand_dist = octave_rand::distribution ();
       octave_rand::distribution ("uniform");
       resid = ColumnVector (octave_rand::vector (n));
       octave_rand::distribution (rand_dist);
     }
   else if (n != resid.numel ())
-    {
-      (*current_liboctave_error_handler) ("eigs: opts.v0 must be n-by-1");
-    }
+    (*current_liboctave_error_handler) ("eigs: opts.v0 must be n-by-1");
 
   if (n < 3)
     (*current_liboctave_error_handler) ("eigs: n must be at least 3");
 
   if (p < 0)
     {
       p = k * 2 + 1;
 
@@ -2118,17 +2104,17 @@ EigsRealNonSymmetricFunc (EigsFunc fun, 
   if (k <= 0 || k >= n - 1)
     (*current_liboctave_error_handler)
       ("eigs: Invalid number of eigenvalues to extract"
        " (must be 0 < k < n-1).\n"
        "      Use 'eig (full (A))' instead");
 
   if (p <= k || p > n)
     (*current_liboctave_error_handler)
-      ("eigs: opts.p must be greater than k and less or equal to n");
+      ("eigs: opts.p must be greater than k and less than or equal to n");
 
   if (! have_sigma)
     {
       if (typ != "LM" && typ != "SM" && typ != "LA" && typ != "SA"
           && typ != "BE" && typ != "LR" && typ != "SR" && typ != "LI"
           && typ != "SI")
         (*current_liboctave_error_handler) ("eigs: unrecognized sigma value");
 
@@ -2178,25 +2164,25 @@ EigsRealNonSymmetricFunc (EigsFunc fun, 
   OCTAVE_LOCAL_BUFFER (double, workl, lwork + 1);
   OCTAVE_LOCAL_BUFFER (double, workd, 3 * n + 1);
   double *presid = resid.fortran_vec ();
 
   do
     {
       F77_INT tmp_info = octave::to_f77_int (info);
 
-      // on exit, ip(4) <= k + 1 is the number of converged eigenvalues
-      // see dnaupd2
+      // On exit, ip(4) <= k + 1 is the number of converged eigenvalues
+      // see dnaupd2.
       F77_FUNC (dnaupd, DNAUPD)
          (ido, F77_CONST_CHAR_ARG2 (&bmat, 1), n,
          F77_CONST_CHAR_ARG2 ((typ.c_str ()), 2),
          k, tol, presid, p, v, n, iparam,
          ipntr, workd, workl, lwork, tmp_info
          F77_CHAR_ARG_LEN(1) F77_CHAR_ARG_LEN(2));
-       // k is not changed
+      // k is not changed
 
       info = tmp_info;
 
       if (f77_exception_encountered)
         (*current_liboctave_error_handler)
           ("eigs: unrecoverable exception encountered in dnaupd");
 
       if (disp > 0 && ! octave::math::isnan(workl[iptr(5)-1]))
@@ -2270,25 +2256,25 @@ EigsRealNonSymmetricFunc (EigsFunc fun, 
   double *z = eig_vec2.fortran_vec ();
 
   OCTAVE_LOCAL_BUFFER (double, dr, k + 1);
   OCTAVE_LOCAL_BUFFER (double, di, k + 1);
   OCTAVE_LOCAL_BUFFER (double, workev, 3 * p);
   for (F77_INT i = 0; i < k+1; i++)
     dr[i] = di[i] = 0.;
 
-  F77_INT k0 = k; // original number of eigenvalues required
+  F77_INT k0 = k;  // original number of eigenvalues required
   F77_FUNC (dneupd, DNEUPD)
     (rvec, F77_CONST_CHAR_ARG2 ("A", 1), sel, dr, di, z, n, sigmar,
      sigmai, workev,  F77_CONST_CHAR_ARG2 (&bmat, 1), n,
      F77_CONST_CHAR_ARG2 ((typ.c_str ()), 2), k, tol, presid, p, v, n, iparam,
      ipntr, workd, workl, lwork, info2 F77_CHAR_ARG_LEN(1) F77_CHAR_ARG_LEN(1)
      F77_CHAR_ARG_LEN(2));
-  // on exit, if (and only if) rvec == true, k may have been increased by one
-  // and be equal to ip(4), see dngets
+  // On exit, if (and only if) rvec == true, k may have been increased by one
+  // and be equal to ip(4), see dngets.
 
   if (f77_exception_encountered)
     (*current_liboctave_error_handler)
       ("eigs: unrecoverable exception encountered in dneupd");
 
   if (! rvec && ip(4) > k)
     k = ip(4);
 
@@ -2388,19 +2374,17 @@ EigsComplexNonSymmetricMatrix (const M& 
       Array<double> rr (octave_rand::vector (n));
       Array<double> ri (octave_rand::vector (n));
       cresid = ComplexColumnVector (n);
       for (F77_INT i = 0; i < n; i++)
         cresid(i) = Complex (rr(i),ri(i));
       octave_rand::distribution (rand_dist);
     }
   else if (m.cols () != cresid.numel ())
-    {
-      (*current_liboctave_error_handler) ("eigs: opts.v0 must be n-by-1");
-    }
+    (*current_liboctave_error_handler) ("eigs: opts.v0 must be n-by-1");
 
   if (n < 3)
     (*current_liboctave_error_handler) ("eigs: n must be at least 3");
 
   if (p < 0)
     {
       p = k * 2 + 1;
 
@@ -2414,17 +2398,17 @@ EigsComplexNonSymmetricMatrix (const M& 
   if (k <= 0 || k >= n - 1)
     (*current_liboctave_error_handler)
       ("eigs: Invalid number of eigenvalues to extract"
        " (must be 0 < k < n-1).\n"
        "      Use 'eig (full (A))' instead");
 
   if (p <= k || p > n)
     (*current_liboctave_error_handler)
-      ("eigs: opts.p must be greater than k and less or equal to n");
+      ("eigs: opts.p must be greater than k and less than or equal to n");
 
   if (have_b && cholB && ! permB.isempty ())
     {
       // Check the we really have a permutation vector
       if (permB.numel () != n)
         (*current_liboctave_error_handler) ("eigs: permB vector invalid");
 
       Array<bool> checked (dim_vector (n, 1), false);
@@ -2681,19 +2665,17 @@ EigsComplexNonSymmetricMatrixShift (cons
       Array<double> rr (octave_rand::vector (n));
       Array<double> ri (octave_rand::vector (n));
       cresid = ComplexColumnVector (n);
       for (F77_INT i = 0; i < n; i++)
         cresid(i) = Complex (rr(i),ri(i));
       octave_rand::distribution (rand_dist);
     }
   else if (m.cols () != cresid.numel ())
-    {
-      (*current_liboctave_error_handler) ("eigs: opts.v0 must be n-by-1");
-    }
+    (*current_liboctave_error_handler) ("eigs: opts.v0 must be n-by-1");
 
   if (n < 3)
     (*current_liboctave_error_handler) ("eigs: n must be at least 3");
 
   if (p < 0)
     {
       p = k * 2 + 1;
 
@@ -2707,17 +2689,17 @@ EigsComplexNonSymmetricMatrixShift (cons
   if (k <= 0 || k >= n - 1)
     (*current_liboctave_error_handler)
       ("eigs: Invalid number of eigenvalues to extract"
        " (must be 0 < k < n-1).\n"
        "      Use 'eig (full (A))' instead");
 
   if (p <= k || p > n)
     (*current_liboctave_error_handler)
-      ("eigs: opts.p must be greater than k and less or equal to n");
+      ("eigs: opts.p must be greater than k and less than or equal to n");
 
   if (have_b && cholB && ! permB.isempty ())
     {
       // Check that we really have a permutation vector
       if (permB.numel () != n)
         (*current_liboctave_error_handler) ("eigs: permB vector invalid");
 
       Array<bool> checked (dim_vector (n, 1), false);
@@ -2815,50 +2797,49 @@ EigsComplexNonSymmetricMatrixShift (cons
           if (have_b)
             {
               if (ido == -1)
                 {
                   OCTAVE_LOCAL_BUFFER (Complex, ctmp, n);
 
                   vector_product (b, workd+iptr(0)-1, ctmp);
 
-                  ComplexMatrix tmp(n, 1);
+                  ComplexMatrix tmp (n, 1);
 
                   for (F77_INT i = 0; i < n; i++)
                     tmp(i,0) = ctmp[P[i]];
 
                   lusolve (L, U, tmp);
 
                   Complex *ip2 = workd+iptr(1)-1;
                   for (F77_INT i = 0; i < n; i++)
                     ip2[Q[i]] = tmp(i,0);
                 }
               else if (ido == 2)
                 vector_product (b, workd + iptr(0) - 1, workd + iptr(1) - 1);
               else
                 {
                   Complex *ip2 = workd+iptr(2)-1;
-                  ComplexMatrix tmp(n, 1);
+                  ComplexMatrix tmp (n, 1);
 
                   for (F77_INT i = 0; i < n; i++)
                     tmp(i,0) = ip2[P[i]];
 
                   lusolve (L, U, tmp);
 
                   ip2 = workd+iptr(1)-1;
                   for (F77_INT i = 0; i < n; i++)
                     ip2[Q[i]] = tmp(i,0);
                 }
             }
           else
             {
-              // ido cannot be 2 for non-generalized problems
-              // see znaup2
+              // ido cannot be 2 for non-generalized problems (see znaup2).
               Complex *ip2 = workd+iptr(0)-1;
-              ComplexMatrix tmp(n, 1);
+              ComplexMatrix tmp (n, 1);
 
               for (F77_INT i = 0; i < n; i++)
                 tmp(i,0) = ip2[P[i]];
 
               lusolve (L, U, tmp);
 
               ip2 = workd+iptr(1)-1;
               for (F77_INT i = 0; i < n; i++)
@@ -2978,23 +2959,20 @@ EigsComplexNonSymmetricFunc (EigsComplex
       Array<double> rr (octave_rand::vector (n));
       Array<double> ri (octave_rand::vector (n));
       cresid = ComplexColumnVector (n);
       for (F77_INT i = 0; i < n; i++)
         cresid(i) = Complex (rr(i),ri(i));
       octave_rand::distribution (rand_dist);
     }
   else if (n != cresid.numel ())
-    {
-      (*current_liboctave_error_handler) ("eigs: opts.v0 must be n-by-1");
-    }
+    (*current_liboctave_error_handler) ("eigs: opts.v0 must be n-by-1");
 
   if (n < 3)
-    (*current_liboctave_error_handler)
-      ("eigs: n must be at least 3");
+    (*current_liboctave_error_handler) ("eigs: n must be at least 3");
 
   if (p < 0)
     {
       p = k * 2 + 1;
 
       if (p < 20)
         p = 20;
 
@@ -3005,17 +2983,17 @@ EigsComplexNonSymmetricFunc (EigsComplex
   if (k <= 0 || k >= n - 1)
     (*current_liboctave_error_handler)
       ("eigs: Invalid number of eigenvalues to extract"
        " (must be 0 < k < n-1).\n"
        "      Use 'eig (full (A))' instead");
 
   if (p <= k || p > n)
     (*current_liboctave_error_handler)
-      ("eigs: opts.p must be greater than k and less or equal to n");
+      ("eigs: opts.p must be greater than k and less than or equal to n");
 
   if (! have_sigma)
     {
       if (typ != "LM" && typ != "SM" && typ != "LA" && typ != "SA"
           && typ != "BE" && typ != "LR" && typ != "SR" && typ != "LI"
           && typ != "SI")
         (*current_liboctave_error_handler) ("eigs: unrecognized sigma value");
 
diff --git a/scripts/sparse/eigs.m b/scripts/sparse/eigs.m
--- a/scripts/sparse/eigs.m
+++ b/scripts/sparse/eigs.m
@@ -119,19 +119,18 @@
 ## @code{tol * norm (A)}.  The default is @code{eps}.
 ##
 ## @item maxit
 ## The maximum number of iterations.  The default is 300.
 ##
 ## @item p
 ## The number of Lanzcos basis vectors to use.  More vectors will result in
 ## faster convergence, but a greater use of memory.  The optimal value of
-## @code{p} is problem dependent and should be in the range
-## @code{@var{k} + 1} to @var{n}.
-## The default value is @code{2 * @var{k}}.
+## @code{p} is problem dependent and should be in the range @code{@var{k} + 1}
+## to @var{n}.  The default value is @code{2 * @var{k}}.
 ##
 ## @item v0
 ## The starting vector for the algorithm.  An initial vector close to the
 ## final vector will speed up convergence.  The default is for @sc{arpack}
 ## to randomly generate a starting vector.  If specified, @code{v0} must be
 ## an @var{n}-by-1 vector where @code{@var{n} = rows (@var{A})}
 ##
 ## @item disp
@@ -1243,64 +1242,64 @@ endfunction
 %! reseig = eig (A, B);
 %! [~, idx] = sort (abs (reseig), "ascend");
 %! assert (eigs (A, B, 10, 0), reseig (idx));
 %!testif HAVE_ARPACK
 %! A = eye (9);
 %! A(1, 1) = 0;
 %! A(1, 9) = 1;
 %! [V, L] = eigs (A, 4, -1);
-%! assert (!any (isnan (diag (L))))
-%! assert (any (abs (diag (L)) <= 2 * eps))
+%! assert (!any (isnan (diag (L))));
+%! assert (any (abs (diag (L)) <= 2 * eps));
 %!testif HAVE_ARPACK
 %! A = diag (ones (9, 1), 1);
 %! A(10,:) = [-1, zeros(1, 8), -1];
 %! opts.v0 = (1:10)';
 %! typ = "lr";
 %! [v, m] = eigs (A, 5, typ, opts);
 %! assert (sort (real (diag (m))), ...
-%!         [-0.081751; 0.514038; 0.514038; 0.880290; 0.880290], 1e-4)
+%!         [-0.081751; 0.514038; 0.514038; 0.880290; 0.880290], 1e-4);
 %! m = eigs (A, 5, typ, opts);
 %! assert (sort (real (m)), ...
-%!         [-0.081751; 0.514038; 0.514038; 0.880290; 0.880290], 1e-4)
+%!         [-0.081751; 0.514038; 0.514038; 0.880290; 0.880290], 1e-4);
 %! typ = "li";
 %! [v, m] = eigs (A, 5, typ, opts);
 %! assert (sort (abs (imag (diag (m)))), ...
-%!         [0.75447; 0.78972; 0.78972; 0.96518; 0.96518], 1e-4)
+%!         [0.75447; 0.78972; 0.78972; 0.96518; 0.96518], 1e-4);
 %! m = eigs (A, 5, typ, opts);
 %! assert (sort (abs (imag (m))), ...
-%!         [0.75447; 0.78972; 0.78972; 0.96518; 0.96518], 1e-4)
+%!         [0.75447; 0.78972; 0.78972; 0.96518; 0.96518], 1e-4);
 %! typ = "sr";
 %! [v, m] = eigs (A, 5, typ, opts);
 %! assert (sort (real (diag (m))), ...
-%!         [-1.12180; -1.12180; -0.69077; -0.08175; -0.08175], 1e-4)
+%!         [-1.12180; -1.12180; -0.69077; -0.08175; -0.08175], 1e-4);
 %! m = eigs (A, 5, typ, opts);
 %! assert (sort (real (m)), ...
-%!         [-1.12180; -1.12180; -0.69077; -0.69077; -0.08175], 1e-4)
+%!         [-1.12180; -1.12180; -0.69077; -0.69077; -0.08175], 1e-4);
 %! typ = "si";
 %! [v, m] = eigs (A, 5, typ, opts);
 %! assert (sort (abs (imag (diag (m)))), ...
-%!         [0.25552; 0.25552; 0.30282; 0.30282; 0.75447], 1e-4)
+%!         [0.25552; 0.25552; 0.30282; 0.30282; 0.75447], 1e-4);
 %! m = eigs (A, 5, typ, opts);
 %! assert (sort (abs (imag (m))), ...
-%!         [0.25552; 0.25552; 0.30282; 0.30282; 0.75447], 1e-4)
+%!         [0.25552; 0.25552; 0.30282; 0.30282; 0.75447], 1e-4);
 %! typ = "lm";
 %! [v, m] = eigs (A, 5, typ, opts);
 %! assert (sort (abs (diag (m))), ...
-%!         [0.96863; 0.96863;  1.02294; 1.15054; 1.15054], 1e-4)
+%!         [0.96863; 0.96863;  1.02294; 1.15054; 1.15054], 1e-4);
 %! m = eigs (A, 5, typ, opts);
 %! assert (sort (abs (m)), ...
-%!         [0.96863; 1.02294; 1.02294; 1.15054; 1.15054], 1e-4)
+%!         [0.96863; 1.02294; 1.02294; 1.15054; 1.15054], 1e-4);
 %! typ = "sm";
 %! [v, m] = eigs (A, 5, typ, opts);
 %! assert (sort (abs (diag (m))), ...
-%!         [0.93092; 0.93092; 0.94228; 0.94228; 0.96863], 1e-4)
+%!         [0.93092; 0.93092; 0.94228; 0.94228; 0.96863], 1e-4);
 %! m = eigs (A, 5, typ, opts);
 %! assert (sort (abs (m)), ...
-%!         [0.93092; 0.93092; 0.94228; 0.94228; 0.96863], 1e-4)
+%!         [0.93092; 0.93092; 0.94228; 0.94228; 0.96863], 1e-4);
 %!testif HAVE_ARPACK
 %! A = toeplitz (sparse ([2, 1, zeros(1,8)]));
 %! opts.v0 = (1:10)';
 %! [v, m] = eigs (A, 3, "sa", opts);
 %! assert (diag (m), [0.081014; 0.317493; 0.690279], 1e-4);
 %! m = eigs (A, 3, "sa", opts);
 %! assert (m, [0.081014; 0.317493; 0.690279], 1e-4);
 
