# HG changeset patch
# User jwe
# Date 773505312 0
#      Wed Jul 06 14:35:12 1994 +0000
# Node ID 89ed09321d1621ffeefe492d8d6cedf26e888b76
# Parent  4481fdfb01b4de54eba02092d1463b66bca38a76
[project @ 1994-07-06 14:34:51 by jwe]

diff --git a/src/symtab.cc b/src/symtab.cc
--- a/src/symtab.cc
+++ b/src/symtab.cc
@@ -70,17 +70,17 @@ symbol_def::symbol_def (tree_function *t
 void
 symbol_def::init_state (void)
 {
   type = UNKNOWN;
   eternal = 0;
   read_only = 0;
 
   help_string = (char *) NULL;
-  definition = NULL_TREE;
+  definition = (tree_fvc *) NULL;
   next_elem = (symbol_def *) NULL;
   count = 0;
 }
 
 symbol_def::~symbol_def (void)
 {
   delete [] help_string;
   delete definition;
@@ -158,17 +158,17 @@ symbol_def::unprotect (void)
 }
 
 void
 symbol_def::make_eternal (void)
 {
   eternal = 1;
 }
 
-tree *
+tree_fvc *
 symbol_def::def (void) const
 {
   return definition;
 }
 
 char *
 symbol_def::help (void) const
 {
@@ -254,23 +254,23 @@ symbol_record::help (void) const
 
 void
 symbol_record::rename (const char *n)
 {
   delete [] nm;
   nm = strsave (n);
 }
 
-tree *
+tree_fvc *
 symbol_record::def (void) const
 {
   if (definition != (symbol_def *) NULL)
     return definition->def ();
   else
-    return NULL_TREE;
+    return (tree_fvc *) NULL;
 }
 
 int
 symbol_record::is_function (void) const
 {
   if (definition != (symbol_def *) NULL)
     return definition->is_function ();
   else
@@ -396,17 +396,17 @@ symbol_record::set_sv_function (sv_Funct
 }
 
 int
 symbol_record::define (tree_constant *t)
 {
   if (is_variable () && read_only_error ())
     return 0;
 
-  tree *saved_def = NULL_TREE;
+  tree_fvc *saved_def = (tree_fvc *) NULL;
   if (definition == (symbol_def *) NULL)
     {
       definition = new symbol_def ();
       definition->count = 1;
     }
   else if (is_function ())
     {
       symbol_def *new_def = new symbol_def ();
diff --git a/src/symtab.h b/src/symtab.h
--- a/src/symtab.h
+++ b/src/symtab.h
@@ -41,16 +41,17 @@ Software Foundation, 675 Mass Ave, Cambr
 typedef int (*sv_Function)(void);
 
 #endif
 
 #define HASH_TABLE_SIZE 1024             /* Must be multiple of 2 */
 #define HASH_MASK (HASH_TABLE_SIZE - 1)
 
 class tree;
+class tree_fvc;
 class tree_builtin;
 class tree_constant;
 class tree_function;
 
 class symbol_def;
 class symbol_record;
 class symbol_record_info;
 class symbol_table;
@@ -82,17 +83,17 @@ public:
   void define (tree_constant *t);
   void define (tree_builtin *t);
   void define (tree_function *t);
 
   void protect (void);
   void unprotect (void);
   void make_eternal (void);
 
-  tree *def (void) const;
+  tree_fvc *def (void) const;
   char *help (void) const;
   void document (const char *h);
 
   int save (ostream& os, int mark_as_global, int precision);
 
   enum TYPE
     {
       UNKNOWN = 0,
@@ -106,17 +107,17 @@ public:
 
 private:
 
   unsigned type : 4;
   unsigned eternal : 1;
   unsigned read_only : 1;
 
   char *help_string;
-  tree *definition;
+  tree_fvc *definition;
   symbol_def *next_elem;
   int count;
 
   void init_state (void);
 
   symbol_def (const symbol_def& sd);
   symbol_def& operator = (const symbol_def& sd);
 };
@@ -132,17 +133,17 @@ symbol_record
 public:
   symbol_record (void);
   symbol_record (const char *n, symbol_record *nxt = (symbol_record *) NULL);
 
  ~symbol_record (void);
 
   char *name (void) const;
   char *help (void) const; 
-  tree *def (void) const;
+  tree_fvc *def (void) const;
 
   void rename (const char *n);
 
   int is_function (void) const;
   int is_user_function (void) const;
   int is_builtin_function (void) const;
   int is_variable (void) const;
   int is_user_variable (void) const;
