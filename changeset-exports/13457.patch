# HG changeset patch
# User Jacob Dawid <jacob.dawid@googlemail.com>
# Date 1302962093 -7200
#      Sat Apr 16 15:54:53 2011 +0200
# Node ID aa1d4754edc34417e3efe191c1d8e9e3063cf17a
# Parent  8a8a479c2e7854ef2abd5d35ef1319726515ee5d
Improved octave value conversion.

diff --git a/gui//src/OctaveLink.cpp b/gui//src/OctaveLink.cpp
--- a/gui//src/OctaveLink.cpp
+++ b/gui//src/OctaveLink.cpp
@@ -47,16 +47,45 @@ get_user_code (const std::string& fname 
 int OctaveLink::readlineEventHook() {
   // TODO: No need to run too quickly.  The documentation says it will run
   // at most 10 times per second.  This may be too fast and we will need to
   // artificially slow it down somehow.  Not sure at this time how.
   OctaveLink::instance()->processOctaveServerData();
   return 0;
 }
 
+QString OctaveLink::octaveValueAsQString(OctaveValue octaveValue) {
+    // Convert string.
+    if(octaveValue.is_string()) {
+        return QString("\"%1\"").arg(octaveValue.string_value().c_str());
+
+    // Convert real scalar.
+    } else if(octaveValue.is_real_scalar()) {
+        return QString("%1").arg(octaveValue.scalar_value());
+
+    // Convert complex scalar.
+    } else if(octaveValue.is_complex_scalar()) {
+        return QString("%1 + %2i").arg(octaveValue.scalar_value()).arg(octaveValue.complex_value().imag());
+
+    // Convert real matrix.
+    } else if(octaveValue.is_real_matrix()) {
+        // TODO: Convert real matrix into a string.
+        return QString("{matrix}");
+
+    // Convert complex matrix.
+    } else if(octaveValue.is_complex_matrix()) {
+        // TODO: Convert complex matrix into a string.
+        return QString("{complex matrix}");
+
+    // If everything else does not fit, we could not recognize the type.
+    } else {
+        return QString("<Type not recognized>");
+    }
+}
+
 //*************************************************************************
 OctaveLink::OctaveLink()
     : m_previousHistoryLength(0) {
 }
 
 OctaveLink::~OctaveLink() {
 }
 
diff --git a/gui//src/OctaveLink.h b/gui//src/OctaveLink.h
--- a/gui//src/OctaveLink.h
+++ b/gui//src/OctaveLink.h
@@ -69,26 +69,28 @@
 #include <QMutexLocker>
 #include <QMutex>
 #include <QFileInfo>
 #include <QList>
 #include <QString>
 #include <QVector>
 
 typedef symbol_table::symbol_record SymbolRecord;
+typedef octave_value OctaveValue;
 
 /**
   * \class OctaveLink
   * Manages a link to an octave instance.
   */
 class OctaveLink
 {
 public:
     static OctaveLink *instance() { return &m_singleton; }
     static int readlineEventHook(void);
+    static QString octaveValueAsQString(OctaveValue octaveValue);
 
     /**
      * Enumeration used to identify breakpoint actions
      */
     enum BreakPointAction
     {
         None,
         StepInto,
diff --git a/gui//src/VariablesDockWidget.cpp b/gui//src/VariablesDockWidget.cpp
--- a/gui//src/VariablesDockWidget.cpp
+++ b/gui//src/VariablesDockWidget.cpp
@@ -42,31 +42,17 @@ void VariablesDockWidget::construct() {
     m_variablesTreeWidget->expandAll();
     m_variablesTreeWidget->setAlternatingRowColors(true);
     m_variablesTreeWidget->setAnimated(true);
 }
 
 void VariablesDockWidget::updateTreeEntry(QTreeWidgetItem *treeItem, SymbolRecord symbolRecord) {
     treeItem->setData(0, 0, QString(symbolRecord.name().c_str()));
     treeItem->setData(1, 0, QString(symbolRecord.varval().type_name().c_str()));
-
-    QString type = QString(symbolRecord.varval().type_name().c_str());
-    if(type == "string") {
-        QString stringValue = QString("\"%1\"").arg(symbolRecord.varval().string_value().c_str());
-        treeItem->setData(2, 0, stringValue);
-    } else if(type == "scalar") {
-        double scalarValue = symbolRecord.varval().scalar_value();
-        treeItem->setData(2, 0, QString("%1").arg(scalarValue));
-    } else if(type == "matrix") {
-        //Matrix matrixValue = symbolRecord.varval().matrix_value();
-        // TODO: Display matrix values.
-        treeItem->setData(2, 0, QString("{matrix}"));
-    } else {
-        treeItem->setData(2, 0, QString("<Type not recognized>"));
-    }
+    treeItem->setData(2, 0, OctaveLink::octaveValueAsQString(symbolRecord.varval()));
 }
 
 void VariablesDockWidget::setVariablesList(QList<SymbolRecord> symbolTable) {
 
     // Split the symbol table into its different scopes.
     QList<SymbolRecord> localSymbolTable;
     QList<SymbolRecord> globalSymbolTable;
     QList<SymbolRecord> persistentSymbolTable;
