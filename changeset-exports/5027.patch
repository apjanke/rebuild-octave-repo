# HG changeset patch
# User jwe
# Date 1095903478 0
#      Thu Sep 23 01:37:58 2004 +0000
# Node ID da607e9daf12d842596929b88b2bc104ebff8ee7
# Parent  06f7ff1aee5abc3563c1dca1633429cd70194c36
[project @ 2004-09-23 01:37:57 by jwe]

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,13 +1,17 @@
 2004-09-22  John W. Eaton  <jwe@octave.org>
 
 	* pt-plot.cc (send_to_plot_stream): Skip automatic replot if in
 	multiplot mode.
 
+	* variables.cc (get_global_value): New arg, silent.
+	* variables.h (get_global_value): Default value for silent arg is
+	false.
+
 2004-09-22  David Bateman  <dbateman@free.fr>
 
 	* ov-fcn-inline.cc (Finline): When called with a single arg, derive
 	argument of inline function in a compatible manner.
 
 2004-09-22  Federico Zenith  <zenith@chemeng.ntnu.no>
 
 	* DLD-FUNCTIONS/qz.cc (Fqz): New @tex section(s) in doc string for
diff --git a/src/pt-plot.cc b/src/pt-plot.cc
--- a/src/pt-plot.cc
+++ b/src/pt-plot.cc
@@ -212,17 +212,17 @@ send_to_plot_stream (const std::string& 
   bool is_plot = (Vgnuplot_command_plot == cmd.substr (0, plot_len));
 
   if (plot_line_count == 0 && is_replot)
     error ("replot: no previous plot");
   else
     {
       *plot_stream << cmd;
 
-      octave_value mm = get_global_value ("__multiplot_mode__");
+      octave_value mm = get_global_value ("__multiplot_mode__", true);
 
       bool is_multiplot_mode = mm.is_true ();
 
       if (! (is_replot || is_splot || is_plot || is_multiplot_mode)
 	  && plot_line_count > 0
 	  && Vautomatic_replot)
 	*plot_stream << Vgnuplot_command_replot << Vgnuplot_command_end;
 
diff --git a/src/variables.cc b/src/variables.cc
--- a/src/variables.cc
+++ b/src/variables.cc
@@ -914,32 +914,32 @@ lookup_function_handle (const std::strin
 
   if (sr && sr->def ().is_function_handle ())
     retval = sr->def ();
 
   return retval;
 }
 
 octave_value
-get_global_value (const std::string& nm)
+get_global_value (const std::string& nm, bool silent)
 {
   octave_value retval;
 
   symbol_record *sr = global_sym_tab->lookup (nm);
 
   if (sr)
     {
       octave_value sr_def = sr->def ();
 
-      if (sr_def.is_undefined ())
+      if (sr_def.is_defined ())
+	retval = sr_def;
+      else if (! silent)
 	error ("get_global_by_name: undefined symbol `%s'", nm.c_str ());
-      else
-	retval = sr_def;
     }
-  else
+  else if (! silent)
     error ("get_global_by_name: unknown symbol `%s'", nm.c_str ());
 
   return retval;
 }
 
 void
 set_global_value (const std::string& nm, const octave_value& val)
 {
diff --git a/src/variables.h b/src/variables.h
--- a/src/variables.h
+++ b/src/variables.h
@@ -86,17 +86,18 @@ extern symbol_record *
 lookup_by_name (const std::string& nm, bool exec_script = true);
 
 extern octave_value lookup_function (const std::string& nm);
 
 extern octave_value lookup_user_function (const std::string& nm);
 
 extern octave_value lookup_function_handle (const std::string& nm);
 
-extern octave_value get_global_value (const std::string& nm);
+extern octave_value
+get_global_value (const std::string& nm, bool silent = false);
 
 extern void set_global_value (const std::string& nm, const octave_value& val);
 
 extern std::string builtin_string_variable (const std::string&);
 extern int builtin_real_scalar_variable (const std::string&, double&);
 extern octave_value builtin_any_variable (const std::string&);
 
 extern void link_to_global_variable (symbol_record *sr);
