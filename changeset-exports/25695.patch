# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1532712110 14400
#      Fri Jul 27 13:21:50 2018 -0400
# Branch stable
# Node ID cfc32b131755c3c3612922f06a97524774604d25
# Parent  1fa7459a869702b50aaa2585e99f1bda513aa2ce
avoid questionable cast

* load-save.cc (write_header): Use octave::mach_info::words_big_endian
instead of tricky cast.

diff --git a/libinterp/corefcn/load-save.cc b/libinterp/corefcn/load-save.cc
--- a/libinterp/corefcn/load-save.cc
+++ b/libinterp/corefcn/load-save.cc
@@ -1187,17 +1187,16 @@ write_header (std::ostream& os, load_sav
         os.write (&tmp, 1);
       }
       break;
 
     case LS_MAT5_BINARY:
     case LS_MAT7_BINARY:
       {
         char const *versionmagic;
-        int16_t number = *(reinterpret_cast<const int16_t *>("\x00\x01"));
         char headertext[128];
         octave::sys::gmtime now;
 
         // ISO 8601 format date
         const char *matlab_format = "MATLAB 5.0 MAT-file, written by Octave "
             OCTAVE_VERSION ", %Y-%m-%d %T UTC";
         std::string comment_string = now.strftime (matlab_format);
 
@@ -1207,17 +1206,17 @@ write_header (std::ostream& os, load_sav
 
         // The first pair of bytes give the version of the MAT file
         // format.  The second pair of bytes form a magic number which
         // signals a MAT file.  MAT file data are always written in
         // native byte order.  The order of the bytes in the second
         // pair indicates whether the file was written by a big- or
         // little-endian machine.  However, the version number is
         // written in the *opposite* byte order from everything else!
-        if (number == 1)
+        if (octave::mach_info::words_big_endian ())
           versionmagic = "\x01\x00\x4d\x49"; // this machine is big endian
         else
           versionmagic = "\x00\x01\x49\x4d"; // this machine is little endian
 
         memcpy (headertext+124, versionmagic, 4);
         os.write (headertext, 128);
       }
 
