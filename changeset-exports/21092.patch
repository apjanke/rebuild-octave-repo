# HG changeset patch
# User Rik <rik@octave.org>
# Date 1453041488 28800
#      Sun Jan 17 06:38:08 2016 -0800
# Node ID 429f8390340076c7f4a4ba1417c8e00aaa12bb4b
# Parent  72eefc36c6b7fd36e38fc29b53d0260639d49883
maint: Use "FIXME:" more places in code base.

* mk-opts.pl, func.txi, io.txi, linalg.txi, module.mk, oct-conf-post.in.h,
run-octave.in, module.mk, fieldnames.m, textread.m, textscan.m,
libinterp/octave-value/module.mk, odeset.m:
Use "FIXME:" more places in code base.

diff --git a/build-aux/mk-opts.pl b/build-aux/mk-opts.pl
--- a/build-aux/mk-opts.pl
+++ b/build-aux/mk-opts.pl
@@ -618,17 +618,17 @@ sub emit_option_table_entry
     }
   print " }, $MIN_TOKS_TO_MATCH[$i], ";
 
   print "},\n";
 }
 
 sub emit_print_function
 {
-  ## FIXME -- determine the width of the table automatically.
+  ## FIXME: determine the width of the table automatically.
 
   print qq|static void
 print_$CLASS_NAME (std::ostream& os)
 {
   std::ostringstream buf;
 
   os << "\\n"
      << "Options for $CLASS include:\\n\\n"
diff --git a/doc/interpreter/func.txi b/doc/interpreter/func.txi
--- a/doc/interpreter/func.txi
+++ b/doc/interpreter/func.txi
@@ -746,17 +746,17 @@ assumption and provides a significant im
 function files that are distributed with Octave.
 
 If you know that your own function files will not change while you are
 running Octave, you can improve performance by calling
 @code{ignore_function_time_stamp ("all")}, so that Octave will
 ignore the time stamps for all function files.  Passing
 @qcode{"system"} to this function resets the default behavior.
 
-@c FIXME -- note about time stamps on files in NFS environments?
+@c FIXME: note about time stamps on files in NFS environments?
 
 @DOCSTRING(edit)
 
 @DOCSTRING(mfilename)
 
 @DOCSTRING(ignore_function_time_stamp)
 
 @menu
diff --git a/doc/interpreter/io.txi b/doc/interpreter/io.txi
--- a/doc/interpreter/io.txi
+++ b/doc/interpreter/io.txi
@@ -106,18 +106,17 @@ function, and you can turn paging off by
 @DOCSTRING(PAGER_FLAGS)
 
 @DOCSTRING(page_screen_output)
 
 @DOCSTRING(page_output_immediately)
 
 @DOCSTRING(fflush)
 
-@c FIXME -- maybe this would be a good place to describe the
-@c following message:
+@c FIXME: maybe this would be a good place to describe the following message:
 @c
 @c warning: connection to external pager (pid = 9334) lost --
 @c warning: pending computations and output may be lost
 @c warning: broken pipe
 
 @node Terminal Input
 @subsection Terminal Input
 
diff --git a/doc/interpreter/linalg.txi b/doc/interpreter/linalg.txi
--- a/doc/interpreter/linalg.txi
+++ b/doc/interpreter/linalg.txi
@@ -178,17 +178,17 @@ detect a non-Hermitian matrix.
 @DOCSTRING(ordschur)
 
 @DOCSTRING(subspace)
 
 @DOCSTRING(svd)
 
 @DOCSTRING(svd_driver)
 
-@c FIXME -- should there be a new section here?
+@c FIXME: should there be a new section here?
 
 @DOCSTRING(housh)
 
 @DOCSTRING(krylov)
 
 @node Functions of a Matrix
 @section Functions of a Matrix
 @cindex matrix, functions of
diff --git a/libinterp/octave-value/module.mk b/libinterp/octave-value/module.mk
--- a/libinterp/octave-value/module.mk
+++ b/libinterp/octave-value/module.mk
@@ -145,17 +145,17 @@ OV_JAVA_DF = \
 	$(srcdir)/libinterp/mkdefs $(srcdir)/libinterp $< < $@-t1 > $@-t && \
 	mv $@-t $@ && \
 	rm -f $@-t1
 
 noinst_LTLIBRARIES += libinterp/octave-value/liboctave-value.la
 
 libinterp_octave_value_liboctave_value_la_SOURCES = $(OCTAVE_VALUE_SRC)
 
-## FIXME -- maybe it would be better to limit the JAVA flags to
+## FIXME: maybe it would be better to limit the JAVA flags to
 ## the compile commands for ov-java.cc?  Does JAVA_LIBS need to be
 ## added to LIBOCTINTERP_LINK_DEPS (see libinterp/link-deps.mk)?
 ## Should we have a separate set of JAVA_LDFLAGS?
 
 libinterp_octave_value_liboctave_value_la_CPPFLAGS = \
   $(libinterp_liboctinterp_la_CPPFLAGS) \
   $(HDF5_CPPFLAGS) \
   $(JAVA_CPPFLAGS)
diff --git a/oct-conf-post.in.h b/oct-conf-post.in.h
--- a/oct-conf-post.in.h
+++ b/oct-conf-post.in.h
@@ -67,17 +67,17 @@ typedef unsigned long ino_t;
 
 #if defined (_MSC_VER)
 #define __WIN32__
 #define WIN32
 /* missing parameters in macros */
 #pragma warning (disable: 4003)
 /* missing implementations in template instantiation */
 #pragma warning (disable: 4996)
-/* deprecated function names (FIXME?) */
+/* deprecated function names (FIXME: ???) */
 #pragma warning (disable: 4661)
 #endif
 
 #if defined (__WIN32__) && ! defined (__CYGWIN__)
 #define OCTAVE_HAVE_WINDOWS_FILESYSTEM 1
 #elif defined (__CYGWIN__)
 #define OCTAVE_HAVE_WINDOWS_FILESYSTEM 1
 #define OCTAVE_HAVE_POSIX_FILESYSTEM 1
diff --git a/run-octave.in b/run-octave.in
--- a/run-octave.in
+++ b/run-octave.in
@@ -20,18 +20,18 @@
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 : ${AWK=%AWK%}
 : ${FIND=%FIND%}
 : ${SED=%SED%}
 : ${ADDRESS_SANITIZER_OPTIONS="%ADRESS_SANITIZER_OPTIONS%"}
 
-# FIXME -- is there a better way to handle the possibility of spaces
-# in these names?
+# FIXME: is there a better way to handle the possibility of spaces
+#        in these names?
 
 top_srcdir='%abs_top_srcdir%'
 builddir='%builddir%'
 
 d1="$top_srcdir/scripts"
 d2="$builddir/scripts"
 d3="$builddir/libinterp"
 d4="$top_srcdir/examples/data"
diff --git a/scripts/@ftp/module.mk b/scripts/@ftp/module.mk
--- a/scripts/@ftp/module.mk
+++ b/scripts/@ftp/module.mk
@@ -1,4 +1,5 @@
-## FIXME -- including scripts/@ftp/module.mk fails.
+## FIXME: including scripts/@ftp/module.mk fails.
 ## Is that an automake bug?
+## Would getting the quoting character right fix it?
 ##
 ## What should be in this file is in scripts/module.mk.
diff --git a/scripts/general/fieldnames.m b/scripts/general/fieldnames.m
--- a/scripts/general/fieldnames.m
+++ b/scripts/general/fieldnames.m
@@ -43,17 +43,17 @@ function names = fieldnames (obj)
   endif
 
   if (isstruct (obj) || isobject (obj))
     ## Call internal C++ function for structs or Octave objects
     names = __fieldnames__ (obj);
   elseif (isjava (obj) || ischar (obj))
     ## FIXME: Function prototype that excepts java obj exists, but doesn't
     ##        work if obj is java.lang.String.  Convert obj to classname.
-    ## FIXME this is now working for objects whose class is in the dynamic
+    ## FIXME: this is now working for objects whose class is in the dynamic
     ##        classpath but will continue to fail if such classnames are used
     ##        instead (see bug #42710)
     if (isa (obj, "java.lang.String"))
       obj = class (obj);
     endif
     names_str = javaMethod ("getFields", "org.octave.ClassHelper", obj);
     names = ostrsplit (names_str, ';');
   else
diff --git a/scripts/io/textread.m b/scripts/io/textread.m
--- a/scripts/io/textread.m
+++ b/scripts/io/textread.m
@@ -178,17 +178,17 @@ function varargout = textread (filename,
         error ("textread: invalid EndOfLine character value specified");
       endif
     else
       error ("textread: character value required for EndOfLine");
     endif
   else
     ## Determine EOL from file.
     ## Search for EOL candidates in the first BUFLENGTH chars
-    ## FIXME Ignore risk of 2-byte EOL (\r\n) being split at exactly BUFLENGTH
+    ## FIXME: Ignore risk of 2-byte EOL (\r\n) being split at exactly BUFLENGTH
     eol_srch_len = min (length (str), BUFLENGTH);
     ## First try DOS (CRLF)
     if (! isempty (strfind (str(1 : eol_srch_len), "\r\n")))
       eol_char = "\r\n";
     ## Perhaps old Macintosh? (CR)
     elseif (! isempty (strfind (str(1 : eol_srch_len), "\r")))
       eol_char = "\r";
     ## Otherwise, use plain *nix (LF)
diff --git a/scripts/io/textscan.m b/scripts/io/textscan.m
--- a/scripts/io/textscan.m
+++ b/scripts/io/textscan.m
@@ -252,17 +252,17 @@ function [C, position] = textscan (fid, 
       eol_char = "\n";
     endif
     ## Set up the default endofline param value
     args(end+1:end+2) = {"endofline", eol_char};
   endif
 
   if (! ischar (fid))
     ## Now that we know what EOL looks like, we can process format_repeat_count.
-    ## FIXME The below isn't ML-compatible: counts lines, not format string uses
+    ## FIXME: below isn't ML-compatible: counts lines, not format string uses
     if (isfinite (nlines) && (nlines >= 0))
       l_eol_char = length (eol_char);
       eoi = findstr (str, eol_char);
       n_eoi = length (eoi);
       nblks = 0;
       ## Avoid slow repeated str concatenation, first seek requested end of data
       while (n_eoi < nlines && count == BUFLENGTH)
         [nstr, count] = fscanf (fid, "%c", BUFLENGTH);
diff --git a/scripts/module.mk b/scripts/module.mk
--- a/scripts/module.mk
+++ b/scripts/module.mk
@@ -1,15 +1,15 @@
 scripts_EXTRA_DIST =
 
 scripts_CLEANFILES =
 scripts_DISTCLEANFILES =
 scripts_MAINTAINERCLEANFILES =
 
-## FIXME -- including scripts/@ftp/module.mk fails.  Is that an automake bug?
+## FIXME: including scripts/@ftp/module.mk fails.  Is that an automake bug?
 
 FCN_FILE_DIRS += scripts/@ftp
 
 scripts_@ftp_FCN_FILES = \
   scripts/@ftp/ascii.m \
   scripts/@ftp/binary.m  \
   scripts/@ftp/cd.m  \
   scripts/@ftp/close.m  \
diff --git a/scripts/ode/odeset.m b/scripts/ode/odeset.m
--- a/scripts/ode/odeset.m
+++ b/scripts/ode/odeset.m
@@ -259,18 +259,18 @@ endfunction
 %! # A new ODE options structure is created from odeoptB with
 %! # a modified value for option "NormControl".
 %!
 %! odeoptB = odeset ("AbsTol", 1e-2, "RelTol", 1e-1);
 %! odeoptC = odeset (odeoptB, "NormControl", "on");
 
 ## All tests that are needed to check if a valid option has been set are
 ## implemented in ode_struct_value_check.m
-## ## FIXME ## currently fails as there are two extra options to control
-##             fixed step integratio options.
+## FIXME: xtest currently fails as there are two extra options to control
+##        fixed step integration options.
 %!xtest
 %! odeoptA = odeset ();
 %! assert (isstruct (odeoptA));
 %! assert (numfields (odeoptA), 23);
 %! assert (all (structfun ("isempty", odeoptA)));
 
 %!shared odeoptB, odeoptC
 %!test
