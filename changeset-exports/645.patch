# HG changeset patch
# User jwe
# Date 777709629 0
#      Wed Aug 24 06:27:09 1994 +0000
# Node ID 21cb3c7dc9e39d444870f90f10bbbc072c285658
# Parent  3a7c78b38ca3b476589b05ee68b76036e6a70271
[project @ 1994-08-24 06:19:54 by jwe]

diff --git a/liboctave/Array.cc b/liboctave/Array.cc
--- a/liboctave/Array.cc
+++ b/liboctave/Array.cc
@@ -825,17 +825,17 @@ DiagArray<T>::cols (void) const
 
 template <class T>
 int
 DiagArray<T>::columns (void) const
 {
   return nc;
 }
 
-#if defined (_AIX)
+#if defined (_AIX) && defined (__GNUG__) && __GNUC__ > 1 && __GNUC_MINOR__ < 6
 template <class T>
 T&
 DiagArray<T>::elem (int r, int c)
 {
   static T foo (0);
   return (r == c) ? Array<T>::elem (r) : foo;
 }
 
diff --git a/liboctave/Array.h b/liboctave/Array.h
--- a/liboctave/Array.h
+++ b/liboctave/Array.h
@@ -232,23 +232,23 @@ public:
 
 template <class T>
 class DiagArray : public Array<T>
 {
 private:
   inline T get (int i) { return Array<T>::elem (i); }
   inline void set (const T& val, int i) { Array<T>::elem (i) = val; }
 
-#if ! defined (_AIX)
+#if ! (defined (_AIX) && defined (__GNUG__) && __GNUC__ > 1 && __GNUC_MINOR__ < 6)
   class Proxy
   {
   public:
 
     inline Proxy (DiagArray<T> *ref, int r, int c)
-      : object (ref), i (r), j (c) { } 
+      : i (r), j (c), object (ref) { } 
 
     inline const Proxy& operator = (const T& val) const
     {
       if (i == j)
 	{
 	  if (object)
 	    object->set (val, i);
 	}
@@ -309,17 +309,17 @@ public:
 
   int dim1 (void) const;
   int dim2 (void) const;
 
   int rows (void) const;
   int cols (void) const;
   int columns (void) const;
 
-#if defined (_AIX)
+#if defined (_AIX) && defined (__GNUG__) && __GNUC__ > 1 && __GNUC_MINOR__ < 6
   T& elem (int r, int c);
   T& checkelem (int r, int c);
   T& operator () (int r, int c);
 #else
   inline Proxy elem (int r, int c)
   {
     return Proxy (this, r, c);
   }
diff --git a/liboctave/FSQP.h b/liboctave/FSQP.h
--- a/liboctave/FSQP.h
+++ b/liboctave/FSQP.h
@@ -19,39 +19,39 @@ You should have received a copy of the G
 along with Octave; see the file COPYING.  If not, write to the Free
 Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.
 
 */
 
 #if !defined (octave_FSQP_h)
 #define octave_FSQP_h 1
 
+#ifndef FSQP_MISSING
+
 #if defined (__GNUG__)
 #pragma interface
 #endif
 
-#ifndef FSQP_MISSING
-
 #include "NLP.h"
 
 extern "C++" {
 
 #ifndef Vector
 #define Vector ColumnVector
 #endif
 
 class FSQP : public NLP
 {
  public:
  private:
 };
 
-#endif /* FSQP_MISSING */
+} // extern "C++"
 
-} // extern "C++"
+#endif /* FSQP_MISSING */
 
 #endif
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; page-delimiter: "^/\\*" ***
 ;;; End: ***
diff --git a/liboctave/NLEqn.cc b/liboctave/NLEqn.cc
--- a/liboctave/NLEqn.cc
+++ b/liboctave/NLEqn.cc
@@ -56,22 +56,22 @@ static jacobian_fcn user_jac;
 void
 NLEqn::error (const char* msg)
 {
   (*current_liboctave_error_handler) ("fatal NLEqn error: %s", msg);
 }
 
 // Constructors
 
-NLEqn::NLEqn (void) : NLFunc (), x (), n (0) {}
+NLEqn::NLEqn (void) : NLFunc (), n (0), x () { }
 
 NLEqn::NLEqn (const Vector& xvec, const NLFunc f) 
-  : NLFunc (f), x (xvec), n (xvec.capacity ()) {}
+  : NLFunc (f), n (xvec.capacity ()), x (xvec) { }
 
-NLEqn::NLEqn (const NLEqn& a) : NLFunc (a.fun, a.jac), x (a.x), n (a.n) {}
+NLEqn::NLEqn (const NLEqn& a) : NLFunc (a.fun, a.jac), n (a.n), x (a.x) { }
 
 void
 NLEqn::resize (int nn)
 {
   if (n != nn)
     {
       n = nn;
       x.resize (n);
diff --git a/liboctave/NPSOL.h b/liboctave/NPSOL.h
--- a/liboctave/NPSOL.h
+++ b/liboctave/NPSOL.h
@@ -19,22 +19,22 @@ You should have received a copy of the G
 along with Octave; see the file COPYING.  If not, write to the Free
 Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.
 
 */
 
 #if !defined (octave_NPSOL_h)
 #define octave_NPSOL_h 1
 
+#ifndef NPSOL_MISSING
+
 #if defined (__GNUG__)
 #pragma interface
 #endif
 
-#ifndef NPSOL_MISSING
-
 #include "dColVector.h"
 #include "NLP.h"
 
 extern "C++" {
 
 #ifndef Vector
 #define Vector ColumnVector
 #endif
@@ -187,19 +187,19 @@ class NPSOL : public NLP, public NPSOL_o
 // variable.
 // Nonzero means an error occurred in the calculation of the objective
 // function, and the user wants us to quit.
 extern int npsol_objective_error;
 
 inline NPSOL::NPSOL (const NPSOL& a) : NLP (a.x, a.phi, a.bnds, a.lc, a.nlc)
   { }
 
-#endif /* NPSOL_MISSING */
+} // extern "C++"
 
-} // extern "C++"
+#endif /* NPSOL_MISSING */
 
 #endif
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; page-delimiter: "^/\\*" ***
 ;;; End: ***
diff --git a/liboctave/QPSOL.h b/liboctave/QPSOL.h
--- a/liboctave/QPSOL.h
+++ b/liboctave/QPSOL.h
@@ -19,22 +19,22 @@ You should have received a copy of the G
 along with Octave; see the file COPYING.  If not, write to the Free
 Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.
 
 */
 
 #if !defined (octave_QPSOL_h)
 #define octave_QPSOL_h 1
 
+#ifndef QPSOL_MISSING
+
 #if defined (__GNUG__)
 #pragma interface
 #endif
 
-#ifndef QPSOL_MISSING
-
 #include "dMatrix.h"
 #include "dColVector.h"
 #include "QP.h"
 
 extern "C++" {
 
 #ifndef Vector
 #define Vector ColumnVector
@@ -122,19 +122,19 @@ QPSOL::operator = (const QPSOL& a)
   x = a.x;
   H = a.H;
   c = a.c;
   bnds = a.bnds;
   lc = a.lc;
   return *this;
 }
 
-#endif /* QPSOL_MISSING */
+} // extern "C++"
 
-} // extern "C++"
+#endif /* QPSOL_MISSING */
 
 #endif
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; page-delimiter: "^/\\*" ***
 ;;; End: ***
diff --git a/liboctave/Range.cc b/liboctave/Range.cc
--- a/liboctave/Range.cc
+++ b/liboctave/Range.cc
@@ -28,16 +28,34 @@ Software Foundation, 675 Mass Ave, Cambr
 #if defined (__GNUG__)
 #pragma implementation
 #endif
 
 #include <iostream.h>
 #include <limits.h>
 
 #include "Range.h"
+#include "dMatrix.h"
+
+Matrix
+Range::matrix_value (void) const
+{
+  Matrix retval;
+
+  if (rng_nelem > 0)
+    {
+      retval.resize (1, rng_nelem);
+      double b = rng_base;
+      double increment = rng_inc;
+      for (int i = 0; i < rng_nelem; i++)
+	retval.elem (0, i) = b + i * increment;
+    }
+
+  return retval;
+}
 
 // NOTE: max and min only return useful values if nelem > 0.
 
 double
 Range::min (void) const
 {
   double retval = 0.0;
   if (rng_nelem > 0)
diff --git a/liboctave/Range.h b/liboctave/Range.h
--- a/liboctave/Range.h
+++ b/liboctave/Range.h
@@ -27,30 +27,33 @@ Software Foundation, 675 Mass Ave, Cambr
 #if defined (__GNUG__)
 #pragma interface
 #endif
 
 extern "C++" {
 
 class istream;
 class ostream;
+class Matrix;
 
 class Range
 {
  public:
   Range (void);
   Range (const Range& r);
   Range (double b, double l);
   Range (double b, double l, double i);
 
   double base (void) const;
   double limit (void) const;
   double inc (void) const;
   int nelem (void) const;
 
+  Matrix matrix_value (void) const;
+
   double min (void) const;
   double max (void) const;
 
   void sort (void);
 
   void set_base (double b);
   void set_limit (double l);
   void set_inc (double i);
