# HG changeset patch
# User Rik <rik@octave.org>
# Date 1383067719 25200
#      Tue Oct 29 10:28:39 2013 -0700
# Node ID 224e76250443553a6e11dada44fdb1212c987711
# Parent  86c6ae5f969ee6eaae7fd47b4964f5202c36d8b7
Use GNU style coding conventions for code in examples/

* examples/embedded.cc, examples/fortdemo.cc, examples/helloworld.cc,
examples/make_int.cc, examples/mycell.c, examples/myfeval.c, examples/myfunc.c,
examples/mypow2.c, examples/myprop.c, examples/myset.c, examples/mystring.c,
examples/mystruct.c, examples/oct_demo.cc, examples/oregonator.cc:
Use GNU style coding conventions for code in examples/

diff --git a/examples/embedded.cc b/examples/embedded.cc
--- a/examples/embedded.cc
+++ b/examples/embedded.cc
@@ -11,25 +11,25 @@ main (void)
   argv(0) = "embedded";
   argv(1) = "-q";
 
   octave_main (2, argv.c_str_vec (), 1);
 
   octave_idx_type n = 2;
   octave_value_list in;
 
-  for (octave_idx_type i = 0; i < n; i++)  
+  for (octave_idx_type i = 0; i < n; i++)
     in(i) = octave_value (5 * (i + 2));
-  
+
   octave_value_list out = feval ("gcd", in, 1);
 
-  if (!error_state && out.length () > 0)
-    std::cout << "GCD of [" 
-              << in(0).int_value () 
-              << ", " 
+  if (! error_state && out.length () > 0)
+    std::cout << "GCD of ["
+              << in(0).int_value ()
+              << ", "
               << in(1).int_value ()
-              << "] is " << out(0).int_value () 
+              << "] is " << out(0).int_value ()
               << std::endl;
   else
     std::cout << "invalid\n";
-  
+
   clean_up_and_exit (0);
 }
diff --git a/examples/fortdemo.cc b/examples/fortdemo.cc
--- a/examples/fortdemo.cc
+++ b/examples/fortdemo.cc
@@ -1,17 +1,16 @@
 #include <octave/oct.h>
 #include <octave/f77-fcn.h>
 
 extern "C"
 {
   F77_RET_T
   F77_FUNC (fortsub, FORTSUB)
-        (const int&, double*, F77_CHAR_ARG_DECL
-         F77_CHAR_ARG_LEN_DECL);
+    (const int&, double*, F77_CHAR_ARG_DECL F77_CHAR_ARG_LEN_DECL);
 }
 
 DEFUN_DLD (fortdemo, args, , "Fortran Demo")
 {
   octave_value_list retval;
   int nargin = args.length ();
 
   if (nargin != 1)
@@ -20,17 +19,17 @@ DEFUN_DLD (fortdemo, args, , "Fortran De
     {
       NDArray a = args(0).array_value ();
       if (! error_state)
         {
           double *av = a.fortran_vec ();
           octave_idx_type na = a.numel ();
           OCTAVE_LOCAL_BUFFER (char, ctmp, 128);
 
-          F77_XFCN (fortsub, FORTSUB, (na, av, ctmp
-                    F77_CHAR_ARG_LEN (128)));
+          F77_XFCN (fortsub, FORTSUB,
+                    (na, av, ctmp F77_CHAR_ARG_LEN (128)));
 
           retval(1) = std::string (ctmp);
           retval(0) = a;
         }
     }
   return retval;
 }
diff --git a/examples/helloworld.cc b/examples/helloworld.cc
--- a/examples/helloworld.cc
+++ b/examples/helloworld.cc
@@ -1,12 +1,12 @@
 #include <octave/oct.h>
 
 DEFUN_DLD (helloworld, args, nargout,
-  "Hello World Help String")
+           "Hello World Help String")
 {
   int nargin = args.length ();
 
   octave_stdout << "Hello World has "
                 << nargin << " input arguments and "
                 << nargout << " output arguments.\n";
 
   return octave_value_list ();
diff --git a/examples/make_int.cc b/examples/make_int.cc
--- a/examples/make_int.cc
+++ b/examples/make_int.cc
@@ -67,33 +67,33 @@ public:
   octave_value all (void) const { return (double) (scalar != 0); }
   octave_value any (void) const { return (double) (scalar != 0); }
 
   bool is_real_type (void) const { return true; }
   bool is_scalar_type (void) const { return true; }
   bool is_numeric_type (void) const { return true; }
 
   bool valid_as_scalar_index (void) const
-    { return scalar == 1; }
+  { return scalar == 1; }
 
   bool valid_as_zero_index (void) const
-    { return scalar == 0; }
+  { return scalar == 0; }
 
   bool is_true (void) const { return (scalar != 0); }
 
   double double_value (bool = false) const { return (double) scalar; }
 
   int integer_value (bool = false) const { return scalar; }
 
   Matrix matrix_value (bool = false) const { return Matrix (1, 1, scalar); }
 
   Complex complex_value (bool = false) const { return scalar; }
 
   ComplexMatrix complex_matrix_value (bool = false) const
-    { return  ComplexMatrix (1, 1, Complex (scalar)); }
+  { return  ComplexMatrix (1, 1, Complex (scalar)); }
 
   octave_value gnot (void) const { return octave_value ((double) ! scalar); }
 
   octave_value uminus (void) const { return new octave_integer (- scalar); }
 
   octave_value transpose (void) const { return new octave_integer (scalar); }
 
   octave_value hermitian (void) const { return new octave_integer (scalar); }
@@ -226,29 +226,29 @@ DEFBINOP (el_ldiv, integer, integer)
 
   return new octave_integer (v2.integer_value () / d);
 }
 
 DEFBINOP_OP (el_and, integer, integer, &&)
 DEFBINOP_OP (el_or, integer, integer, ||)
 
 DEFUN_DLD (make_int, args, ,
-  "int_val = make_int (val)\n\
+           "int_val = make_int (val)\n\
 \n\
 Creates an integer variable from VAL.")
 {
   static bool type_loaded = false;
 
   if (! type_loaded)
     {
       octave_integer::register_type ();
       mlock ();
 
       octave_stdout << "installing integer type at type-id = "
-           << octave_integer::static_type_id () << "\n";
+                    << octave_integer::static_type_id () << "\n";
 
       INSTALL_UNOP (op_not, octave_integer, gnot);
       INSTALL_UNOP (op_uminus, octave_integer, uminus);
       INSTALL_UNOP (op_transpose, octave_integer, transpose);
       INSTALL_UNOP (op_hermitian, octave_integer, hermitian);
 
       INSTALL_NCUNOP (op_incr, octave_integer, incr);
       INSTALL_NCUNOP (op_decr, octave_integer, decr);
@@ -284,17 +284,17 @@ Creates an integer variable from VAL.")
     }
   else
     usage ("make_int");
 
   return retval;
 }
 
 DEFUN_DLD (doit, args, ,
-  "doit (I)")
+           "doit (I)")
 {
   octave_value_list retval;
 
   if (args(0).type_id () == octave_integer::static_type_id ())
     {
       // At this point, we know we have a handle for an octave_integer
       // object, so we can peek at the representation and extract the
       // data.
diff --git a/examples/mycell.c b/examples/mycell.c
--- a/examples/mycell.c
+++ b/examples/mycell.c
@@ -7,12 +7,12 @@ mexFunction (int nlhs, mxArray* plhs[],
   mwSize n;
   mwIndex i;
 
   if (nrhs != 1 || ! mxIsCell (prhs[0]))
     mexErrMsgTxt ("ARG1 must be a cell");
 
   n = mxGetNumberOfElements (prhs[0]);
   n = (n > nlhs ? nlhs : n);
-  
+
   for (i = 0; i < n; i++)
     plhs[i] = mxDuplicateArray (mxGetCell (prhs[0], i));
 }
diff --git a/examples/myfeval.c b/examples/myfeval.c
--- a/examples/myfeval.c
+++ b/examples/myfeval.c
@@ -5,17 +5,17 @@ mexFunction (int nlhs, mxArray* plhs[],
              int nrhs, const mxArray* prhs[])
 {
   char *str;
 
   mexPrintf ("Hello, World!\n");
 
   mexPrintf ("I have %d inputs and %d outputs\n", nrhs, nlhs);
 
-  if (nrhs < 1 || ! mxIsString (prhs[0])) 
+  if (nrhs < 1 || ! mxIsString (prhs[0]))
     mexErrMsgTxt ("ARG1 must be a function name");
 
   str = mxArrayToString (prhs[0]);
 
   mexPrintf ("I'm going to call the function %s\n", str);
 
   mexCallMATLAB (nlhs, plhs, nrhs-1, (mxArray*)prhs+1, str);
 
diff --git a/examples/myfunc.c b/examples/myfunc.c
--- a/examples/myfunc.c
+++ b/examples/myfunc.c
@@ -6,10 +6,10 @@ mexFunction (int nlhs, mxArray *plhs[],
 {
   const char *nm;
 
   nm = mexFunctionName ();
   mexPrintf ("You called function: %s\n", nm);
   if (strcmp (nm, "myfunc") == 0)
     mexPrintf ("This is the principal function\n", nm);
 
-  return; 
+  return;
 }
diff --git a/examples/mypow2.c b/examples/mypow2.c
--- a/examples/mypow2.c
+++ b/examples/mypow2.c
@@ -2,24 +2,25 @@
 
 void
 mexFunction (int nlhs, mxArray* plhs[],
              int nrhs, const mxArray* prhs[])
 {
   mwSize n;
   mwIndex i;
   double *vri, *vro;
-  
+
   if (nrhs != 1 || ! mxIsNumeric (prhs[0]))
     mexErrMsgTxt ("ARG1 must be a matrix");
 
   n = mxGetNumberOfElements (prhs[0]);
-  plhs[0] = mxCreateNumericArray 
-    (mxGetNumberOfDimensions (prhs[0]), mxGetDimensions (prhs[0]),
-     mxGetClassID (prhs[0]), mxIsComplex (prhs[0]));
+  plhs[0] = mxCreateNumericArray (mxGetNumberOfDimensions (prhs[0]),
+                                  mxGetDimensions (prhs[0]),
+                                  mxGetClassID (prhs[0]),
+                                  mxIsComplex (prhs[0]));
   vri = mxGetPr (prhs[0]);
   vro = mxGetPr (plhs[0]);
 
   if (mxIsComplex (prhs[0]))
     {
       double *vii, *vio;
       vii = mxGetPi (prhs[0]);
       vio = mxGetPi (plhs[0]);
diff --git a/examples/myprop.c b/examples/myprop.c
--- a/examples/myprop.c
+++ b/examples/myprop.c
@@ -8,17 +8,17 @@ mexFunction (int nlhs, mxArray* plhs[],
   char property[256];
 
   if (nrhs < 2 || nrhs > 3)
     mexErrMsgTxt ("incorrect number of arguments");
   if (!mxIsDouble (prhs[0]))
     mexErrMsgTxt ("handle expected to be a double scalar");
   if (!mxIsChar (prhs[1]))
     mexErrMsgTxt ("expected property to be a string");
-  
+
   handle = mxGetScalar (prhs[0]);
   mxGetString (prhs[1], property, 256);
   plhs[0] = mxDuplicateArray (mexGet (handle, property));
-  
+
   if (nrhs == 3)
     if (mexSet (handle, property, mxDuplicateArray (prhs[2])))
       mexErrMsgTxt ("failed to set property");
 }
diff --git a/examples/myset.c b/examples/myset.c
--- a/examples/myset.c
+++ b/examples/myset.c
@@ -24,11 +24,11 @@ mexFunction (int nlhs, mxArray* plhs[],
 
   if (v)
     {
       mexPrintf ("%s is a caller variable with the following value:\n", str);
       mexCallMATLAB (0, NULL, 1, &v, "disp");
     }
 
   // WARNING!! Can't do this in MATLAB!  Must copy variable first.
-  mxSetName (prhs[1], str);  
+  mxSetName (prhs[1], str);
   mexPutArray (prhs[1], "caller");
 }
diff --git a/examples/mystring.c b/examples/mystring.c
--- a/examples/mystring.c
+++ b/examples/mystring.c
@@ -4,18 +4,18 @@
 void
 mexFunction (int nlhs, mxArray *plhs[],
              int nrhs, const mxArray *prhs[])
 {
   mwSize m, n;
   mwIndex i, j;
   mxChar *pi, *po;
 
-  if (nrhs != 1 || ! mxIsChar (prhs[0]) || 
-      mxGetNumberOfDimensions (prhs[0]) > 2)
+  if (nrhs != 1 || ! mxIsChar (prhs[0])
+      || mxGetNumberOfDimensions (prhs[0]) > 2)
     mexErrMsgTxt ("ARG1 must be a char matrix");
 
   m = mxGetM (prhs[0]);
   n = mxGetN (prhs[0]);
   pi = mxGetChars (prhs[0]);
   plhs[0] = mxCreateNumericMatrix (m, n, mxCHAR_CLASS, mxREAL);
   po = mxGetChars (plhs[0]);
 
diff --git a/examples/mystruct.c b/examples/mystruct.c
--- a/examples/mystruct.c
+++ b/examples/mystruct.c
@@ -10,18 +10,17 @@ mexFunction (int nlhs, mxArray* plhs[],
   const char *keys[] = { "this", "that" };
 
   if (nrhs != 1 || ! mxIsStruct (prhs[0]))
     mexErrMsgTxt ("expects struct");
 
   for (i = 0; i < mxGetNumberOfFields (prhs[0]); i++)
     for (j = 0; j < mxGetNumberOfElements (prhs[0]); j++)
       {
-        mexPrintf ("field %s(%d) = ", 
-                   mxGetFieldNameByNumber (prhs[0], i), j);
+        mexPrintf ("field %s(%d) = ", mxGetFieldNameByNumber (prhs[0], i), j);
         v = mxGetFieldByNumber (prhs[0], j, i);
         mexCallMATLAB (0, NULL, 1, &v, "disp");
       }
 
   v = mxCreateStructMatrix (2, 2, 2, keys);
 
   mxSetFieldByNumber (v, 0, 0, mxCreateString ("this1"));
   mxSetFieldByNumber (v, 0, 1, mxCreateString ("that1"));
diff --git a/examples/oct_demo.cc b/examples/oct_demo.cc
--- a/examples/oct_demo.cc
+++ b/examples/oct_demo.cc
@@ -46,17 +46,17 @@
 // 3) The number of output arguments
 // 4) A string to use as help text if 'help <function_name>' is entered.
 //
 // Note below that the third parameter (nargout) of DEFUN_DLD is not used,
 // so it is omitted from the list of arguments in order to avoid a warning
 // from gcc about an unused function parameter.
 
 DEFUN_DLD (oct_demo, args, ,
-  "[...] = oct_demo (...)\n\
+           "[...] = oct_demo (...)\n\
 \n\
 Print a greeting followed by the values of all the arguments passed.\n\
 Return all arguments in reverse order.")
 {
   // The list of values to return.  See the declaration in oct-obj.h
 
   octave_value_list retval;
 
diff --git a/examples/oregonator.cc b/examples/oregonator.cc
--- a/examples/oregonator.cc
+++ b/examples/oregonator.cc
@@ -1,12 +1,12 @@
 #include <octave/oct.h>
 
 DEFUN_DLD (oregonator, args, ,
-  "The `oregonator'.\n\
+           "The `oregonator'.\n\
 \n\
 Reference:\n\
 \n\
   Oscillations in chemical systems.  IV.  Limit cycle behavior in a\n\
   model of a real chemical reaction. Richard J. Field and Richard\n\
   M. Noyes, The Journal of Chemical Physics, Volume 60 Number 5,\n\
   March 1974.")
 {
