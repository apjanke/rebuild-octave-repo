# HG changeset patch
# User Jordi Gutiérrez Hermoso <jordigh@octave.org>
# Date 1316986857 18000
#      Sun Sep 25 16:40:57 2011 -0500
# Node ID 410de573089a0defce445c22b5ecc2a41b86e9c4
# Parent  cf5ebc0e47e4c023d7602484cbae38de9da82b6f
Avoid overflow in sprandsym

diff --git a/scripts/sparse/sprandsym.m b/scripts/sparse/sprandsym.m
--- a/scripts/sparse/sprandsym.m
+++ b/scripts/sparse/sprandsym.m
@@ -108,29 +108,43 @@ function r = pick_rand_diag (n, k)
   ## Then, after prepending 1, the cumprod of these quotients is
   ##
   ##      C = [ T(1)/T(1), T(2)/T(1), T(3)/T(1), ..., T(N)/T(1) ]
   ##
   ## Their sum is thus S = sum (T)/T(1), and then C(i)/S is the desired
   ## probability P(i) for i=1:N. The cumsum will finally give the
   ## distribution function for computing the random number of entries on
   ## the diagonal R.
+  ##
+  ## Thanks to Zsbán Ambrus <ambrus@math.bme.hu> for most of the ideas
+  ## of the implementation here, especially how to do the computation
+  ## numerically to avoid overflow.
 
   ## Degenerate case
   if k == 1
     r = 1;
     return
   endif
 
   ## Compute the stuff described above
   a = n*(n - 1)/2;
   d = [mod(k,2):2:min(n,k)-2];
   m = (k - d)/2;
   q = (n - d).*(n - d - 1).*m ./ (d + 2)./(d + 1)./(a - m + 1);
-  c = [1 cumprod(q)];
+
+  ## Slight modification from discussion above: pivot around the max in
+  ## order to avoid overflow (underflow is fine, just means effectively
+  ## zero probabilities).
+  [~, midx] = max (cumsum (log (q))) ;
+  midx++;
+  lc = fliplr (cumprod (1./q(midx-1:-1:1)));
+  rc = cumprod (q(midx:end));
+
+  ## Now c = t(i)/t(midx), so c > 1 == [].
+  c = [lc, 1, rc];
   s = sum (c);
   p = c/s;
 
   ## Add final d
   d(end+1) = d(end) + 2;
 
   ## Pick a random r using this distribution
   r = d(sum (cumsum (p) < rand) + 1);
