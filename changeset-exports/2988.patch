# HG changeset patch
# User jwe
# Date 863767397 0
#      Fri May 16 07:23:17 1997 +0000
# Node ID daa1ed1f5462886126488b949fcb9c72d8b049b7
# Parent  ae20b3f37f5e9e406e1dd0159c2cecd9b99dae87
[project @ 1997-05-16 07:23:15 by jwe]

diff --git a/src/pt-arg-list.h b/src/pt-arg-list.h
--- a/src/pt-arg-list.h
+++ b/src/pt-arg-list.h
@@ -55,16 +55,24 @@ public:
 
   bool all_elements_are_constant (void) const;
 
   octave_value_list convert_to_const_vector (void);
 
   string_vector get_arg_names (void) const;
 
   void accept (tree_walker& tw);
+
+private:
+
+  // No copying!
+
+  tree_argument_list (const tree_argument_list&);
+
+  tree_argument_list& operator = (const tree_argument_list&);
 };
 
 #endif
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
diff --git a/src/pt-assign.h b/src/pt-assign.h
--- a/src/pt-assign.h
+++ b/src/pt-assign.h
@@ -96,16 +96,23 @@ private:
   // True if we should not delete the lhs.
   bool preserve;
 
   // True if this is an assignment to the built-in variable ans.
   bool ans_ass;
 
   // The type of the expression.
   octave_value::assign_op etype;
+
+  // No copying!
+
+  tree_simple_assignment_expression (const tree_simple_assignment_expression&);
+
+  tree_simple_assignment_expression&
+  operator = (const tree_simple_assignment_expression&);
 };
 
 // Multi-valued assignment expressions.
 
 class
 tree_multi_assignment : public tree_expression
 {
 public:
@@ -137,16 +144,23 @@ public:
 
   void accept (tree_walker& tw);
 
 private:
 
   bool preserve;
   tree_argument_list *lhs;
   tree_expression *rhs;
+
+  // No copying!
+
+  tree_multi_assignment_expression (const tree_multi_assignment_expression&);
+
+  tree_multi_assignment_expression&
+  operator = (const tree_multi_assignment_expression&);
 };
 
 #endif
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
diff --git a/src/pt-binop.h b/src/pt-binop.h
--- a/src/pt-binop.h
+++ b/src/pt-binop.h
@@ -83,16 +83,22 @@ protected:
   // The operands for the expression.
   tree_expression *op_lhs;
   tree_expression *op_rhs;
 
 private:
 
   // The type of the expression.
   octave_value::binary_op etype;
+
+  // No copying!
+
+  tree_binary_expression (const tree_binary_expression&);
+
+  tree_binary_expression& operator = (const tree_binary_expression&);
 };
 
 // Boolean expressions.
 
 class
 tree_boolean_expression : public tree_binary_expression
 {
 public:
@@ -121,16 +127,22 @@ public:
   octave_value_list rvalue (int nargout);
 
   string oper (void) const;
 
 private:
 
   // The type of the expression.
   type etype;
+
+  // No copying!
+
+  tree_boolean_expression (const tree_boolean_expression&);
+
+  tree_boolean_expression& operator = (const tree_boolean_expression&);
 };
 
 #endif
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
diff --git a/src/pt-cmd.h b/src/pt-cmd.h
--- a/src/pt-cmd.h
+++ b/src/pt-cmd.h
@@ -26,31 +26,39 @@ Software Foundation, 59 Temple Place - S
 #if defined (__GNUG__)
 #pragma interface
 #endif
 
 #include <string>
 
 class tree_walker;
 
-#include "pt-base.h"
+#include "pt.h"
 
 // A base class for commands.
 
 class
 tree_command : public tree
 {
 public:
 
   tree_command (int l = -1, int c = -1)
     : tree (l, c) { }
 
   virtual ~tree_command (void) { }
 
   virtual void eval (void) = 0;
+
+private:
+
+  // No copying!
+
+  tree_command (const tree_command&);
+
+  tree_command& operator = (const tree_command&);
 };
 
 // No-op.
 
 class
 tree_no_op_command : public tree_command
 {
 public:
@@ -64,16 +72,22 @@ public:
 
   void accept (tree_walker& tw);
 
   string original_command (void) { return orig_cmd; }
 
 private:
 
   string orig_cmd;
+
+  // No copying!
+
+  tree_no_op_command (const tree_no_op_command&);
+
+  tree_no_op_command& operator = (const tree_no_op_command&);
 };
 
 #endif
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
diff --git a/src/pt-colon.h b/src/pt-colon.h
--- a/src/pt-colon.h
+++ b/src/pt-colon.h
@@ -77,16 +77,22 @@ public:
   void accept (tree_walker& tw);
 
 private:
 
   // The components of the expression.
   tree_expression *op_base;
   tree_expression *op_limit;
   tree_expression *op_increment;
+
+  // No copying!
+
+  tree_colon_expression (const tree_colon_expression&);
+
+  tree_colon_expression& operator = (const tree_colon_expression&);
 };
 
 #endif
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
diff --git a/src/pt-const.h b/src/pt-const.h
--- a/src/pt-const.h
+++ b/src/pt-const.h
@@ -111,16 +111,22 @@ private:
   // For custom memory management.
   static octave_allocator allocator;
 
   // The actual value that this constant refers to.
   octave_value val;
 
   // The original text form of this constant.
   string orig_text;
+
+  // No copying!
+
+  tree_constant (const tree_constant&);
+
+  tree_constant& operator = (const tree_constant&);
 };
 
 #endif
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
diff --git a/src/pt-decl.h b/src/pt-decl.h
--- a/src/pt-decl.h
+++ b/src/pt-decl.h
@@ -62,16 +62,22 @@ public:
 
 private:
 
   // An identifier to tag with the declared property.
   tree_identifier *id;
 
   // An initializer expression (may be zero);
   tree_expression *expr;
+
+  // No copying!
+
+  tree_decl_elt (const tree_decl_elt&);
+
+  tree_decl_elt& operator = (const tree_decl_elt&);
 };
 
 class
 tree_decl_init_list : public SLList<tree_decl_elt *>
 {
 public:
 
   tree_decl_init_list (void)
@@ -87,16 +93,24 @@ public:
 	  tree_decl_elt *t = remove_front ();
 	  delete t;
 	}
     }
 
   void eval (tree_decl_elt::eval_fcn, bool);
 
   void accept (tree_walker& tw);
+
+private:
+
+  // No copying!
+
+  tree_decl_init_list (const tree_decl_init_list&);
+
+  tree_decl_init_list& operator = (const tree_decl_init_list&);
 };
 
 // Base class for declaration commands -- global, static, etc.
 
 class
 tree_decl_command : public tree_command
 {
 public:
@@ -121,16 +135,24 @@ protected:
   // The name of this command -- global, static, etc.
   string cmd_name;
 
   // TRUE if this command has been evaluated.
   bool initialized;
 
   // The list of variables or initializers in this declaration command.
   tree_decl_init_list *init_list;
+
+private:
+
+  // No copying!
+
+  tree_decl_command (const tree_decl_command&);
+
+  tree_decl_command& operator = (const tree_decl_command&);
 };
 
 // Global.
 
 class
 tree_global_command : public tree_decl_command
 {
 public:
@@ -139,16 +161,24 @@ public:
     : tree_decl_command ("global", l, c) { }
 
   tree_global_command (tree_decl_init_list *t, int l = -1, int c = -1)
     : tree_decl_command ("global", t, l, c) { }
 
   ~tree_global_command (void) { }
 
   void eval (void);
+
+private:
+
+  // No copying!
+
+  tree_global_command (const tree_global_command&);
+
+  tree_global_command& operator = (const tree_global_command&);
 };
 
 // Static.
 
 class
 tree_static_command : public tree_decl_command
 {
 public:
@@ -157,16 +187,24 @@ public:
     : tree_decl_command ("static", l, c) { }
 
   tree_static_command (tree_decl_init_list *t, int l = -1, int c = -1)
     : tree_decl_command ("static", t, l, c) { }
 
   ~tree_static_command (void) { }
 
   void eval (void);
+
+private:
+
+  // No copying!
+
+  tree_static_command (const tree_static_command&);
+
+  tree_static_command& operator = (const tree_static_command&);
 };
 
 #endif
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
diff --git a/src/pt-except.h b/src/pt-except.h
--- a/src/pt-except.h
+++ b/src/pt-except.h
@@ -59,16 +59,22 @@ public:
 
 private:
 
   // The first block of code to attempt to execute.
   tree_statement_list *try_code;
 
   // The code to execute if an error occurs in the first block.
   tree_statement_list *catch_code;
+
+  // No copying!
+
+  tree_try_catch_command (const tree_try_catch_command&);
+
+  tree_try_catch_command& operator = (const tree_try_catch_command&);
 };
 
 // Simple exception handling.
 
 class
 tree_unwind_protect_command : public tree_command
 {
 public:
@@ -94,16 +100,22 @@ public:
 private:
 
   // The first body of code to attempt to execute.
   tree_statement_list *unwind_protect_code;
 
   // The body of code to execute no matter what happens in the first
   // body of code.
   tree_statement_list *cleanup_code;
+
+  // No copying!
+
+  tree_unwind_protect_command (const tree_unwind_protect_command&);
+
+  tree_unwind_protect_command& operator = (const tree_unwind_protect_command&);
 };
 
 #endif
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
diff --git a/src/pt-exp.h b/src/pt-exp.h
--- a/src/pt-exp.h
+++ b/src/pt-exp.h
@@ -27,17 +27,17 @@ Software Foundation, 59 Temple Place - S
 #pragma interface
 #endif
 
 #include <string>
 
 class octave_value;
 class octave_lvalue;
 
-#include "pt-base.h"
+#include "pt.h"
 
 // A base class for expressions.
 
 class
 tree_expression : public tree
 {
 public:
 
@@ -128,16 +128,24 @@ protected:
   int num_parens;
 
   // A flag that says whether this expression has an index associated
   // with it.  See the code in tree_identifier::rvalue for the rationale.
   bool postfix_indexed;
 
   // Print result of rvalue for this expression?
   bool print_flag;
+
+private:
+
+  // No copying!
+
+  tree_expression (const tree_expression&);
+
+  tree_expression& operator = (const tree_expression&);
 };
 
 #endif
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
diff --git a/src/pt-id.h b/src/pt-id.h
--- a/src/pt-id.h
+++ b/src/pt-id.h
@@ -88,16 +88,22 @@ public:
   void eval_undefined_error (void);
 
   void accept (tree_walker& tw);
 
 private:
 
   // The symbol record that this identifier references.
   symbol_record *sym;
+
+  // No copying!
+
+  tree_identifier (const tree_identifier&);
+
+  tree_identifier& operator = (const tree_identifier&);
 };
 
 #endif
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
diff --git a/src/pt-idx.h b/src/pt-idx.h
--- a/src/pt-idx.h
+++ b/src/pt-idx.h
@@ -76,16 +76,22 @@ public:
 
 private:
 
   tree_expression *expr;
 
   tree_argument_list *list;
 
   string_vector arg_nm;
+
+  // No copying!
+
+  tree_index_expression (const tree_index_expression&);
+
+  tree_index_expression& operator = (const tree_index_expression&);
 };
 
 #endif
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
diff --git a/src/pt-indir.h b/src/pt-indir.h
--- a/src/pt-indir.h
+++ b/src/pt-indir.h
@@ -79,16 +79,22 @@ private:
 
   // The LHS of this structure reference.
   tree_expression *expr;
 
   // The sub-element name.
   string nm;
 
   void eval_error (void) const;
+
+  // No copying!
+
+  tree_indirect_ref (const tree_indirect_ref&);
+
+  tree_indirect_ref& operator = (const tree_indirect_ref&);
 };
 
 #endif
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
diff --git a/src/pt-jump.h b/src/pt-jump.h
--- a/src/pt-jump.h
+++ b/src/pt-jump.h
@@ -43,16 +43,24 @@ public:
 
   ~tree_break_command (void) { }
 
   void eval (void);
 
   void accept (tree_walker& tw);
 
   static int breaking;
+
+private:
+
+  // No copying!
+
+  tree_break_command (const tree_break_command&);
+
+  tree_break_command& operator = (const tree_break_command&);
 };
 
 // Continue.
 
 class
 tree_continue_command : public tree_command
 {
 public:
@@ -62,16 +70,24 @@ public:
 
   ~tree_continue_command (void) { }
 
   void eval (void);
 
   void accept (tree_walker& tw);
 
   static int continuing;
+
+private:
+
+  // No copying!
+
+  tree_continue_command (const tree_continue_command&);
+
+  tree_continue_command& operator = (const tree_continue_command&);
 };
 
 // Return.
 
 class
 tree_return_command : public tree_command
 {
 public:
@@ -81,16 +97,24 @@ public:
 
   ~tree_return_command (void) { }
 
   void eval (void);
 
   void accept (tree_walker& tw);
 
   static int returning;
+
+private:
+
+  // No copying!
+
+  tree_return_command (const tree_return_command&);
+
+  tree_return_command& operator = (const tree_return_command&);
 };
 
 #endif
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
diff --git a/src/pt-loop.h b/src/pt-loop.h
--- a/src/pt-loop.h
+++ b/src/pt-loop.h
@@ -69,16 +69,22 @@ public:
 
 private:
 
   // Expression to test.
   tree_expression *expr;
 
   // List of commands to execute.
   tree_statement_list *list;
+
+  // No copying!
+
+  tree_while_command (const tree_while_command&);
+
+  tree_while_command& operator = (const tree_while_command&);
 };
 
 // For.
 
 class
 tree_simple_for_command : public tree_command
 {
 public:
@@ -112,16 +118,22 @@ private:
   // Expression to evaluate.
   tree_expression *expr;
 
   // List of commands to execute.
   tree_statement_list *list;
 
   void do_for_loop_once (octave_lvalue &ult, const octave_value& rhs,
 			 bool& quit);
+
+  // No copying!
+
+  tree_simple_for_command (const tree_simple_for_command&);
+
+  tree_simple_for_command& operator = (const tree_simple_for_command&);
 };
 
 class
 tree_complex_for_command : public tree_command
 {
 public:
 
   tree_complex_for_command (int l = -1, int c = -1)
@@ -154,16 +166,22 @@ private:
   tree_expression *expr;
 
   // List of commands to execute.
   tree_statement_list *list;
 
   void do_for_loop_once (octave_lvalue &val_ref, octave_lvalue &key_ref,
 			 const octave_value& val, const octave_value& key,
 			 bool& quit);
+
+  // No copying!
+
+  tree_complex_for_command (const tree_complex_for_command&);
+
+  tree_complex_for_command& operator = (const tree_complex_for_command&);
 };
 
 #endif
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
diff --git a/src/pt-mat.h b/src/pt-mat.h
--- a/src/pt-mat.h
+++ b/src/pt-mat.h
@@ -61,16 +61,24 @@ public:
   bool rvalue_ok (void) const
     { return true; }
 
   octave_value rvalue (void);
 
   octave_value_list rvalue (int nargout);
 
   void accept (tree_walker& tw);
+
+private:
+
+  // No copying!
+
+  tree_matrix (const tree_matrix&);
+
+  tree_matrix& operator = (const tree_matrix&);
 };
 
 #endif
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
diff --git a/src/pt-misc.h b/src/pt-misc.h
--- a/src/pt-misc.h
+++ b/src/pt-misc.h
@@ -77,16 +77,22 @@ public:
 
   octave_value_list convert_to_const_vector (tree_va_return_list *vr_list);
 
   void accept (tree_walker& tw);
 
 private:
 
   int marked_for_varargs;
+
+  // No copying!
+
+  tree_parameter_list (const tree_parameter_list&);
+
+  tree_parameter_list& operator = (const tree_parameter_list&);
 };
 
 // Return lists.  Used to hold the right hand sides of multiple
 // assignment expressions.
 
 class
 tree_return_list : public SLList<tree_index_expression *>
 {
@@ -96,26 +102,42 @@ public:
     : SLList<tree_index_expression *> () { }
 
   tree_return_list (tree_index_expression *t)
     : SLList<tree_index_expression *> () { append (t); }
 
   ~tree_return_list (void);
 
   void accept (tree_walker& tw);
+
+private:
+
+  // No copying!
+
+  tree_return_list (const tree_return_list&);
+
+  tree_return_list& operator = (const tree_return_list&);
 };
 
 class
 tree_va_return_list : public SLList<octave_value>
 {
 public:
 
   tree_va_return_list (void) : SLList<octave_value> () { }
 
   ~tree_va_return_list (void) { }
+
+private:
+
+  // No copying!
+
+  tree_va_return_list (const tree_va_return_list&);
+
+  tree_va_return_list& operator = (const tree_va_return_list&);
 };
 
 #endif
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
diff --git a/src/pt-plot.h b/src/pt-plot.h
--- a/src/pt-plot.h
+++ b/src/pt-plot.h
@@ -77,16 +77,22 @@ private:
   int ndim;
 
   // The data ranges for the plot.
   plot_limits *range;
 
   // The list of plots for this plot command.  For example, the
   // command "plot sin(x), cos(x)" has two subplot commands.
   subplot_list *plot_list;
+
+  // No copying!
+
+  tree_plot_command (const tree_plot_command&);
+
+  tree_plot_command& operator = (const tree_plot_command&);
 };
 
 class
 plot_limits
 {
 public:
 
   plot_limits (plot_range *xlim = 0, plot_range *ylim = 0,
@@ -105,16 +111,22 @@ public:
 
 private:
 
   // Specified limits of the x, y, and z axes we should display for
   // this plot.
   plot_range *x_range;
   plot_range *y_range;
   plot_range *z_range;
+
+  // No copying!
+
+  plot_limits (const plot_limits&);
+
+  plot_limits& operator = (const plot_limits&);
 };
 
 class
 plot_range
 {
 public:
 
   plot_range (tree_expression *l = 0, tree_expression *u = 0)
@@ -131,16 +143,22 @@ public:
   void accept (tree_walker& tw);
 
 private:
 
   // A range can specify a lower or upper bound or both.  If neither
   // is specified, the range to display is determined from the data.
   tree_expression *lower;
   tree_expression *upper;
+
+  // No copying!
+
+  plot_range (const plot_range&);
+
+  plot_range& operator = (const plot_range&);
 };
 
 class
 subplot_using
 {
 public:
 
   subplot_using (tree_expression *fmt = 0)
@@ -192,16 +210,22 @@ private:
   tree_expression *scanf_fmt;
 
   // This is a cache for evaluated versions of the qualifiers stored
   // in x.
   ColumnVector val;
 
   // A vector to hold using qualifiers.
   tree_expression *x[4];
+
+  // No copying!
+
+  subplot_using (const subplot_using&);
+
+  subplot_using& operator = (const subplot_using&);
 };
 
 class
 subplot_style
 {
 public:
 
   subplot_style (const string& s = string (),
@@ -227,16 +251,22 @@ private:
   // The style we are using: `lines', `points', etc.
   string sp_style;
 
   // The number of the line type to use.
   tree_expression *sp_linetype;
 
   // The number of the point type to use.
   tree_expression *sp_pointtype;
+
+  // No copying!
+
+  subplot_style (const subplot_style&);
+
+  subplot_style& operator = (const subplot_style&);
 };
 
 class
 subplot
 {
 public:
 
   subplot (tree_expression *data = 0)
@@ -279,16 +309,22 @@ private:
   // The `using' option
   subplot_using *sp_using_clause;
 
   // The `title' option
   tree_expression *sp_title_clause;
 
   // The `style' option
   subplot_style *sp_style_clause;
+
+  // No copying!
+
+  subplot (const subplot&);
+
+  subplot& operator = (const subplot&);
 };
 
 class
 subplot_list : public SLList<subplot *>
 {
 public:
 
   subplot_list (void)
@@ -297,16 +333,24 @@ public:
   subplot_list (subplot *t)
     : SLList<subplot *> () { append (t); }
 
   ~subplot_list (void);
 
   int print (int ndim, ostrstream& plot_buf);
 
   void accept (tree_walker& tw);
+
+private:
+
+  // No copying!
+
+  subplot_list (const subplot_list&);
+
+  subplot_list& operator = (const subplot_list&);
 };
 
 extern string save_in_tmp_file (octave_value& t, int ndim = 2,
 				bool parametric = false);
 
 extern void mark_for_deletion (const string&);
 
 extern void cleanup_tmp_files (void);
diff --git a/src/pt-pr-code.cc b/src/pt-pr-code.cc
--- a/src/pt-pr-code.cc
+++ b/src/pt-pr-code.cc
@@ -28,40 +28,17 @@ Software Foundation, 59 Temple Place - S
 #include <config.h>
 #endif
 
 #include <iostream.h>
 
 #include "error.h"
 #include "ov-usr-fcn.h"
 #include "pr-output.h"
-#include "pt-arg-list.h"
-#include "pt-assign.h"
-#include "pt-base.h"
-#include "pt-binop.h"
-#include "pt-cmd.h"
-#include "pt-colon.h"
-#include "pt-const.h"
-#include "pt-decl.h"
-#include "pt-except.h"
-#include "pt-exp.h"
-#include "pt-id.h"
-#include "pt-idx.h"
-#include "pt-indir.h"
-#include "pt-jump.h"
-#include "pt-loop.h"
-#include "pt-mat.h"
-#include "pt-misc.h"
-#include "pt-plot.h"
-#include "pt-pr-code.h"
-#include "pt-select.h"
-#include "pt-stmt.h"
-#include "pt-unop.h"
-#include "pt-pr-code.h"
-#include "pt-walk.h"
+#include "pt-all.h"
 
 void
 tree_print_code::visit_argument_list (tree_argument_list& lst)
 {
   Pix p = lst.first ();
 
   while (p)
     {
diff --git a/src/pt-select.h b/src/pt-select.h
--- a/src/pt-select.h
+++ b/src/pt-select.h
@@ -67,16 +67,22 @@ public:
 
 private:
 
   // The condition to test.
   tree_expression *expr;
 
   // The list of statements to evaluate if expr is true.
   tree_statement_list *list;
+
+  // No copying!
+
+  tree_if_clause (const tree_if_clause&);
+
+  tree_if_clause& operator = (const tree_if_clause&);
 };
 
 class
 tree_if_command_list : public SLList<tree_if_clause *>
 {
 public:
 
   tree_if_command_list (void)
@@ -92,16 +98,24 @@ public:
 	  tree_if_clause *t = remove_front ();
 	  delete t;
 	}
     }
 
   void eval (void);
 
   void accept (tree_walker& tw);
+
+private:
+
+  // No copying!
+
+  tree_if_command_list (const tree_if_command_list&);
+
+  tree_if_command_list& operator = (const tree_if_command_list&);
 };
 
 class
 tree_if_command : public tree_command
 {
 public:
 
   tree_if_command (int l = -1, int c = -1)
@@ -117,16 +131,22 @@ public:
   tree_if_command_list *cmd_list (void) { return list; }
 
   void accept (tree_walker& tw);
 
 private:
 
   // List of if commands (if, elseif, elseif, ... else, endif)
   tree_if_command_list *list;
+
+  // No copying!
+
+  tree_if_command (const tree_if_command&);
+
+  tree_if_command& operator = (const tree_if_command&);
 };
 
 // Switch.
 
 class
 tree_switch_case
 {
 public:
@@ -159,16 +179,22 @@ public:
 
 private:
 
   // The case label.
   tree_expression *label;
 
   // The list of statements to evaluate if the label matches.
   tree_statement_list *list;
+
+  // No copying!
+
+  tree_switch_case (const tree_switch_case&);
+
+  tree_switch_case& operator = (const tree_switch_case&);
 };
 
 class
 tree_switch_case_list : public SLList<tree_switch_case *>
 {
 public:
 
   tree_switch_case_list (void)
@@ -184,16 +210,24 @@ public:
 	  tree_switch_case *t = remove_front ();
 	  delete t;
 	}
     }
 
   void eval (const octave_value& val);
 
   void accept (tree_walker& tw);
+
+private:
+
+  // No copying!
+
+  tree_switch_case_list (const tree_switch_case_list&);
+
+  tree_switch_case_list& operator = (const tree_switch_case_list&);
 };
 
 class
 tree_switch_command : public tree_command
 {
 public:
 
   tree_switch_command (int l = -1, int c = -1)
@@ -217,16 +251,22 @@ public:
 
 private:
 
   // Value on which to switch.
   tree_expression *expr;
 
   // List of cases (case 1, case 2, ..., default)
   tree_switch_case_list *list;
+
+  // No copying!
+
+  tree_switch_command (const tree_switch_command&);
+
+  tree_switch_command& operator = (const tree_switch_command&);
 };
 
 #endif
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
diff --git a/src/pt-stmt.h b/src/pt-stmt.h
--- a/src/pt-stmt.h
+++ b/src/pt-stmt.h
@@ -86,16 +86,22 @@ private:
   // Command to execute.
   tree_command *cmd;
 
   // Expression to evaluate.
   tree_expression *expr;
 
   // Print result of eval for this command?
   bool print_flag;
+
+  // No copying!
+
+  tree_statement (const tree_statement&);
+
+  tree_statement& operator = (const tree_statement&);
 };
 
 // A list of statements to evaluate.
 
 class
 tree_statement_list : public SLList<tree_statement *>
 {
 public:
@@ -120,16 +126,22 @@ public:
   octave_value_list eval (bool silent = false, int nargout = 0);
 
   void accept (tree_walker& tw);
 
 private:
 
   // Does this list of statements make up the body of a function?
   bool function_body;
+
+  // No copying!
+
+  tree_statement_list (const tree_statement_list&);
+
+  tree_statement_list& operator = (const tree_statement_list&);
 };
 
 #endif
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
diff --git a/src/pt-unop.h b/src/pt-unop.h
--- a/src/pt-unop.h
+++ b/src/pt-unop.h
@@ -53,16 +53,22 @@ public:
   ~tree_unary_expression (void) { delete op; }
 
   tree_expression *operand (void) { return op; }
 
 protected:
 
   // The operand for the expression.
   tree_expression *op;
+
+  // No copying!
+
+  tree_unary_expression (const tree_unary_expression&);
+
+  tree_unary_expression& operator = (const tree_unary_expression&);
 };
 
 // Prefix expressions.
 
 class
 tree_prefix_expression : public tree_unary_expression
 {
 public:
@@ -97,16 +103,22 @@ public:
   string oper (void) const;
 
   void accept (tree_walker& tw);
 
 private:
 
   // The type of the expression.
   type etype;
+
+  // No copying!
+
+  tree_prefix_expression (const tree_prefix_expression&);
+
+  tree_prefix_expression& operator = (const tree_prefix_expression&);
 };
 
 // Postfix expressions.
 
 class
 tree_postfix_expression : public tree_unary_expression
 {
 public:
@@ -141,16 +153,22 @@ public:
   string oper (void) const;
 
   void accept (tree_walker& tw);
 
 private:
 
   // The type of the expression.
   type etype;
+
+  // No copying!
+
+  tree_postfix_expression (const tree_postfix_expression&);
+
+  tree_postfix_expression& operator = (const tree_postfix_expression&);
 };
 
 #endif
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
