# HG changeset patch
# User jwe
# Date 1188244223 0
#      Mon Aug 27 19:50:23 2007 +0000
# Node ID ea6ae3af82d1a5e1d5b012f159cf21a37c1ad148
# Parent  293913e2b15bd29b233019b50bb5c77c5bd72561
[project @ 2007-08-27 19:50:22 by jwe]

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,10 +1,16 @@
 2007-08-27  John W. Eaton  <jwe@octave.org>
 
+	* graphics.cc (base_properties::mark_modified,
+	base_properties::override_defaults,
+	base_properties::delete_children, figure::get_default,
+	axes::get_default): Move definitions here, from graphics.h.
+	* graphics.h (class gh_manager): Move decl to end of file.
+
 	* Cell.h (Cell::Cell (const octave_value_list&)): Create row
 	vector instead of column vector.
 
 	* pt-idx.cc (tree_index_expression::lvalue): Handle [x.a] =
 	... style assignments.
 	* ov-struct.cc (octave_struct::subsasgn): Handle case of RHS as
 	comma-separated list.
 
diff --git a/src/graphics.cc b/src/graphics.cc
--- a/src/graphics.cc
+++ b/src/graphics.cc
@@ -682,17 +682,18 @@ base_properties::remove_child (const gra
 	{
 	  if (i != k)
 	    new_kids(j++) = children(i);
 	}
       children = new_kids;
     }
 }
 
-void base_properties::set_parent (const octave_value& val)
+void
+base_properties::set_parent (const octave_value& val)
 {
   double tmp = val.double_value ();
 
   graphics_handle new_parent = octave_NaN;
 
   if (! error_state)
     {
       new_parent = gh_manager::lookup (tmp);
@@ -710,16 +711,40 @@ void base_properties::set_parent (const 
       else
 	error ("set: invalid graphics handle (= %g) for parent", tmp);
     }
   else
     error ("set: expecting parent to be a graphics handle");
 }
 
 void
+base_properties::mark_modified (void)
+{
+  __modified__ = true;
+  graphics_object parent_obj = gh_manager::get_object (parent);
+  parent_obj.mark_modified ();
+}
+
+void
+base_properties::override_defaults (base_graphics_object& obj)
+{
+  graphics_object parent_obj = gh_manager::get_object (parent);
+  parent_obj.override_defaults (obj);
+}
+
+void
+base_properties::delete_children (void)
+{
+  octave_idx_type n = children.numel ();
+
+  for (octave_idx_type i = 0; i < n; i++)
+    gh_manager::free (children(i));
+}
+
+void
 root_figure::root_figure_properties::set (const property_name& name,
 					  const octave_value& val)
 {
   if (name.compare ("currentfigure"))
     {
       octave_value tval = empty_to_nan (val);
 
       if (is_handle (tval))
@@ -891,17 +916,18 @@ figure::figure_properties::get (const pr
   else if (name.compare ("paperorientation"))
     retval = paperorientation;
   else
     warning ("get: invalid property `%s'", name.c_str ());
 
   return retval;
 }
 
-void figure::figure_properties::close (void)
+void
+figure::figure_properties::close (void)
 {
   if (! __plot_stream__.is_empty ())
     {
       octave_value_list args;
       args(1) = "\nquit;\n";
       args(0) = __plot_stream__;
       feval ("fputs", args);
       args.resize (1);
@@ -909,29 +935,46 @@ void figure::figure_properties::close (v
       feval ("pclose", args);
     }
 
   gh_manager::pop_figure (__myhandle__);
 
   xset (0, "currentfigure", gh_manager::current_figure ());
 }
 
-property_list::pval_map_type figure::figure_properties::factory_defaults (void)
+property_list::pval_map_type
+figure::figure_properties::factory_defaults (void)
 {
   property_list::pval_map_type m;
 
   m["nextplot"] = "replace";
   // m["closerequestfcn"] = make_fcn_handle ("closereq");
   m["colormap"] = colormap_property ();
   m["visible"] = "on";
   m["paperorientation"] = "portrait";
 
   return m;
 }
 
+octave_value
+figure::get_default (const property_name& name) const
+{
+  octave_value retval = default_properties.lookup (name);
+
+  if (retval.is_undefined ())
+    {
+      graphics_handle parent = get_parent ();
+      graphics_object parent_obj = gh_manager::get_object (parent);
+
+      retval = parent_obj.get_default (name);
+    }
+
+  return retval;
+}
+
 std::string figure::figure_properties::go_name ("figure");
 
 // ---------------------------------------------------------------------
 
 axes::axes_properties::axes_properties (const graphics_handle& mh,
 					const graphics_handle& p)
   : base_properties (go_name, mh, p),
     position (Matrix ()),
@@ -1519,17 +1562,18 @@ axes::axes_properties::delete_children (
 
   if (! xisnan (ylabel))
     gh_manager::free (ylabel);
 
   if (! xisnan (zlabel))
     gh_manager::free (zlabel);
 }
 
-property_list::pval_map_type axes::axes_properties::factory_defaults (void)
+property_list::pval_map_type
+axes::axes_properties::factory_defaults (void)
 {
   property_list::pval_map_type m;
 
   m["position"] = Matrix ();
   m["title"] = octave_NaN;
   m["box"] = "on";
   m["key"] = "off";
   m["keybox"] = "off";
@@ -1595,16 +1639,32 @@ property_list::pval_map_type axes::axes_
   touterposition(2) = 1;
   touterposition(3) = 1;
 
   m["outerposition"] = touterposition;
 
   return m;
 }
 
+octave_value
+axes::get_default (const property_name& name) const
+{
+  octave_value retval = default_properties.lookup (name);
+
+  if (retval.is_undefined ())
+    {
+      graphics_handle parent = get_parent ();
+      graphics_object parent_obj = gh_manager::get_object (parent);
+
+      retval = parent_obj.get_default (name);
+    }
+
+  return retval;
+}
+
 std::string axes::axes_properties::go_name ("axes");
 
 // ---------------------------------------------------------------------
 
 static Matrix
 default_data (void)
 {
   Matrix retval (1, 2);
@@ -1761,17 +1821,18 @@ line::line_properties::get (const proper
   else if (name.compare ("keylabel"))
     retval = keylabel;
   else
     warning ("get: invalid property `%s'", name.c_str ());
 
   return retval;
 }
 
-property_list::pval_map_type line::line_properties::factory_defaults (void)
+property_list::pval_map_type
+line::line_properties::factory_defaults (void)
 {
   property_list::pval_map_type m;
 
   m["xdata"] = default_data ();
   m["ydata"] = default_data ();
   m["zdata"] = Matrix ();
   m["ldata"] = Matrix ();
   m["udata"] = Matrix ();
@@ -1984,17 +2045,18 @@ image::image_properties::get (const prop
   else if (name.compare ("ydata"))
     retval = ydata;
   else
     warning ("get: invalid property `%s'", name.c_str ());
 
   return retval;
 }
 
-property_list::pval_map_type image::image_properties::factory_defaults (void)
+property_list::pval_map_type
+image::image_properties::factory_defaults (void)
 {
   property_list::pval_map_type m;
 
   m["cdata"] = Matrix ();
   m["xdata"] = Matrix ();
   m["ydata"] = Matrix ();
 
   return m;
@@ -2140,17 +2202,18 @@ patch::patch_properties::get (const prop
   else if (name.compare ("markersize"))
     retval = markersize;
   else
     warning ("get: invalid property `%s'", name.c_str ());
 
   return retval;
 }
 
-property_list::pval_map_type patch::patch_properties::factory_defaults (void)
+property_list::pval_map_type
+patch::patch_properties::factory_defaults (void)
 {
   property_list::pval_map_type m;
 
   m["cdata"] = Matrix ();
   m["xdata"] = Matrix ();
   m["ydata"] = Matrix ();
   m["zdata"] = Matrix ();
   m["facecolor"] = color_property();
diff --git a/src/graphics.h b/src/graphics.h
--- a/src/graphics.h
+++ b/src/graphics.h
@@ -628,211 +628,32 @@ public:
   bool valid_object (void) const { return rep->valid_object (); }
 
   operator bool (void) const { return rep->valid_object (); }
 
 private:
   base_graphics_object *rep;
 };
 
-// ---------------------------------------------------------------------
-
-class gh_manager
-{
-protected:
-
-  gh_manager (void);
-
-public:
-
-  static bool instance_ok (void)
-  {
-    bool retval = true;
-
-    if (! instance)
-      instance = new gh_manager ();
-
-    if (! instance)
-      {
-	::error ("unable to create gh_manager!");
-
-	retval = false;
-      }
-
-    return retval;
-  }
-
-  static void free (const graphics_handle& h)
-  {
-    if (instance_ok ())
-      instance->do_free (h);
-  }
-
-  static graphics_handle lookup (double val)
-  {
-    return instance_ok () ? instance->do_lookup (val) : graphics_handle ();
-  }
-
-  static graphics_object get_object (const graphics_handle& h)
-  {
-    return instance_ok () ? instance->do_get_object (h) : graphics_object ();
-  }
-
-  static graphics_handle
-  make_graphics_handle (const std::string& go_name,
-			const graphics_handle& parent)
-  {
-    return instance_ok ()
-      ? instance->do_make_graphics_handle (go_name, parent) : octave_NaN;
-  }
-
-  static graphics_handle make_figure_handle (double val)
-  {
-    return instance_ok ()
-      ? instance->do_make_figure_handle (val) : octave_NaN;
-  }
-
-  static void push_figure (const graphics_handle& h)
-  {
-    if (instance_ok ())
-      instance->do_push_figure (h);
-  }
-
-  static void pop_figure (const graphics_handle& h)
-  {
-    if (instance_ok ())
-      instance->do_pop_figure (h);
-  }
-
-  static graphics_handle current_figure (void)
-  {
-    return instance_ok () ? instance->do_current_figure () : octave_NaN;
-  }
-
-  static Matrix handle_list (void)
-  {
-    return instance_ok () ? instance->do_handle_list () : Matrix ();
-  }
-
-  static Matrix figure_handle_list (void)
-  {
-    return instance_ok () ? instance->do_figure_handle_list () : Matrix ();
-  }
-
-private:
-
-  static gh_manager *instance;
-
-  typedef std::map<graphics_handle, graphics_object>::iterator iterator;
-  typedef std::map<graphics_handle, graphics_object>::const_iterator const_iterator;
-
-  typedef std::set<graphics_handle>::iterator free_list_iterator;
-  typedef std::set<graphics_handle>::const_iterator const_free_list_iterator;
-
-  typedef std::list<graphics_handle>::iterator figure_list_iterator;
-  typedef std::list<graphics_handle>::const_iterator const_figure_list_iterator;
-
-  // A map of handles to graphics objects.
-  std::map<graphics_handle, graphics_object> handle_map;
-
-  // The available graphics handles.
-  std::set<graphics_handle> handle_free_list;
-
-  // The next handle available if handle_free_list is empty.
-  graphics_handle next_handle;
-
-  // The allocated figure handles.  Top of the stack is most recently
-  // created.
-  std::list<graphics_handle> figure_list;
-
-  graphics_handle get_handle (const std::string& go_name);
-
-  void do_free (const graphics_handle& h);
-
-  graphics_handle do_lookup (double val)
-  {
-    iterator p = handle_map.find (val);
-
-    return (p != handle_map.end ()) ? p->first : octave_NaN;
-  }
-
-  graphics_object do_get_object (const graphics_handle& h)
-  {
-    iterator p = handle_map.find (h);
-
-    return (p != handle_map.end ()) ? p->second : graphics_object ();
-  }
-
-  graphics_handle do_make_graphics_handle (const std::string& go_name,
-					   const graphics_handle& p);
-
-  graphics_handle do_make_figure_handle (double val);
-
-  Matrix do_handle_list (void)
-  {
-    Matrix retval (1, handle_map.size ());
-    octave_idx_type i = 0;
-    for (const_iterator p = handle_map.begin (); p != handle_map.end (); p++)
-      retval(i++) = p->first;
-    return retval;
-  }
-
-  Matrix do_figure_handle_list (void)
-  {
-    Matrix retval (1, figure_list.size ());
-    octave_idx_type i = 0;
-    for (const_figure_list_iterator p = figure_list.begin ();
-	 p != figure_list.end ();
-	 p++)
-      retval(i++) = *p;
-    return retval;
-  }
-
-  void do_push_figure (const graphics_handle& h);
-
-  void do_pop_figure (const graphics_handle& h);
-
-  graphics_handle do_current_figure (void) const
-  {
-    return figure_list.empty () ? octave_NaN : figure_list.front ();
-  }
-};
-
-
-// This function is NOT equivalent to the scripting language function gcf.
-graphics_handle gcf (void);
-
-// This function is NOT equivalent to the scripting language function gca.
-graphics_handle gca (void);
-
 class base_properties
 {
 public:
   base_properties (const std::string& t = "unknown",
 		   const graphics_handle& mh = octave_NaN,
 		   const graphics_handle& p = octave_NaN)
     : type (t), __modified__ (true), __myhandle__ (mh), parent (p),
       children () { }
 
   virtual ~base_properties (void) { }
 
   virtual std::string graphics_object_name (void) const = 0;
 
-  void mark_modified (void)
-  {
-    __modified__ = true;
-    graphics_object parent_obj = gh_manager::get_object (parent);
-    parent_obj.mark_modified ();
-  }
+  void mark_modified (void);
 
-  void override_defaults (base_graphics_object& obj)
-  {
-    graphics_object parent_obj = gh_manager::get_object (parent);
-    parent_obj.override_defaults (obj);
-  }
+  void override_defaults (base_graphics_object& obj);
 
   // Look through DEFAULTS for properties with given CLASS_NAME, and
   // apply them to the current object with set (virtual method).
 
   void set_from_list (base_graphics_object& obj, property_list& defaults);
 
   virtual void set (const property_name& name, const octave_value& val) = 0;
 
@@ -846,23 +667,17 @@ public:
     children.resize (1, n+1);
     children(n) = h;
   }
 
   void set_parent (const octave_value& val);
 
   void reparent (const graphics_handle& new_parent) { parent = new_parent; }
 
-  virtual void delete_children (void)
-  {
-    octave_idx_type n = children.numel ();
-
-    for (octave_idx_type i = 0; i < n; i++)
-      gh_manager::free (children(i));
-  }
+  virtual void delete_children (void);
 
 protected:
   std::string type;
   bool __modified__;
   graphics_handle __myhandle__;
   graphics_handle parent;
   Matrix children;
 };
@@ -1100,30 +915,17 @@ public:
     if (name.compare ("default", 7))
       retval = get_default (name.substr (7));
     else
       retval = properties.get (name);
 
     return retval;
   }
 
-  octave_value get_default (const property_name& name) const
-  {
-    octave_value retval = default_properties.lookup (name);
-
-    if (retval.is_undefined ())
-      {
-	graphics_handle parent = get_parent ();
-	graphics_object parent_obj = gh_manager::get_object (parent);
-
-	retval = parent_obj.get_default (name);
-      }
-
-    return retval;
-  }
+  octave_value get_default (const property_name& name) const;
 
   octave_value get_defaults (void) const
   {
     return default_properties.as_struct ("default");
   }
 
   graphics_handle get_parent (void) const { return properties.get_parent (); }
 
@@ -1284,30 +1086,17 @@ public:
     if (name.compare ("default", 7))
       retval = get_default (name.substr (7));
     else
       retval = properties.get (name);
 
     return retval;
   }
 
-  octave_value get_default (const property_name& name) const
-  {
-    octave_value retval = default_properties.lookup (name);
-
-    if (retval.is_undefined ())
-      {
-	graphics_handle parent = get_parent ();
-	graphics_object parent_obj = gh_manager::get_object (parent);
-
-	retval = parent_obj.get_default (name);
-      }
-
-    return retval;
-  }
+  octave_value get_default (const property_name& name) const;
 
   octave_value get_defaults (void) const
   {
     return default_properties.as_struct ("default");
   }
 
   graphics_handle get_parent (void) const { return properties.get_parent (); }
 
@@ -1771,15 +1560,185 @@ bool
 set_property_in_handle (double handle, const std::string &property,
 			const octave_value &arg, const std::string &func);
 
 
 #undef OCTAVE_GRAPHICS_PROPERTY_INTERNAL
 #undef OCTAVE_GRAPHICS_PROPERTY
 #undef OCTAVE_GRAPHICS_MUTABLE_PROPERTY
 
+// ---------------------------------------------------------------------
+
+class gh_manager
+{
+protected:
+
+  gh_manager (void);
+
+public:
+
+  static bool instance_ok (void)
+  {
+    bool retval = true;
+
+    if (! instance)
+      instance = new gh_manager ();
+
+    if (! instance)
+      {
+	::error ("unable to create gh_manager!");
+
+	retval = false;
+      }
+
+    return retval;
+  }
+
+  static void free (const graphics_handle& h)
+  {
+    if (instance_ok ())
+      instance->do_free (h);
+  }
+
+  static graphics_handle lookup (double val)
+  {
+    return instance_ok () ? instance->do_lookup (val) : graphics_handle ();
+  }
+
+  static graphics_object get_object (const graphics_handle& h)
+  {
+    return instance_ok () ? instance->do_get_object (h) : graphics_object ();
+  }
+
+  static graphics_handle
+  make_graphics_handle (const std::string& go_name,
+			const graphics_handle& parent)
+  {
+    return instance_ok ()
+      ? instance->do_make_graphics_handle (go_name, parent) : octave_NaN;
+  }
+
+  static graphics_handle make_figure_handle (double val)
+  {
+    return instance_ok ()
+      ? instance->do_make_figure_handle (val) : octave_NaN;
+  }
+
+  static void push_figure (const graphics_handle& h)
+  {
+    if (instance_ok ())
+      instance->do_push_figure (h);
+  }
+
+  static void pop_figure (const graphics_handle& h)
+  {
+    if (instance_ok ())
+      instance->do_pop_figure (h);
+  }
+
+  static graphics_handle current_figure (void)
+  {
+    return instance_ok () ? instance->do_current_figure () : octave_NaN;
+  }
+
+  static Matrix handle_list (void)
+  {
+    return instance_ok () ? instance->do_handle_list () : Matrix ();
+  }
+
+  static Matrix figure_handle_list (void)
+  {
+    return instance_ok () ? instance->do_figure_handle_list () : Matrix ();
+  }
+
+private:
+
+  static gh_manager *instance;
+
+  typedef std::map<graphics_handle, graphics_object>::iterator iterator;
+  typedef std::map<graphics_handle, graphics_object>::const_iterator const_iterator;
+
+  typedef std::set<graphics_handle>::iterator free_list_iterator;
+  typedef std::set<graphics_handle>::const_iterator const_free_list_iterator;
+
+  typedef std::list<graphics_handle>::iterator figure_list_iterator;
+  typedef std::list<graphics_handle>::const_iterator const_figure_list_iterator;
+
+  // A map of handles to graphics objects.
+  std::map<graphics_handle, graphics_object> handle_map;
+
+  // The available graphics handles.
+  std::set<graphics_handle> handle_free_list;
+
+  // The next handle available if handle_free_list is empty.
+  graphics_handle next_handle;
+
+  // The allocated figure handles.  Top of the stack is most recently
+  // created.
+  std::list<graphics_handle> figure_list;
+
+  graphics_handle get_handle (const std::string& go_name);
+
+  void do_free (const graphics_handle& h);
+
+  graphics_handle do_lookup (double val)
+  {
+    iterator p = handle_map.find (val);
+
+    return (p != handle_map.end ()) ? p->first : octave_NaN;
+  }
+
+  graphics_object do_get_object (const graphics_handle& h)
+  {
+    iterator p = handle_map.find (h);
+
+    return (p != handle_map.end ()) ? p->second : graphics_object ();
+  }
+
+  graphics_handle do_make_graphics_handle (const std::string& go_name,
+					   const graphics_handle& p);
+
+  graphics_handle do_make_figure_handle (double val);
+
+  Matrix do_handle_list (void)
+  {
+    Matrix retval (1, handle_map.size ());
+    octave_idx_type i = 0;
+    for (const_iterator p = handle_map.begin (); p != handle_map.end (); p++)
+      retval(i++) = p->first;
+    return retval;
+  }
+
+  Matrix do_figure_handle_list (void)
+  {
+    Matrix retval (1, figure_list.size ());
+    octave_idx_type i = 0;
+    for (const_figure_list_iterator p = figure_list.begin ();
+	 p != figure_list.end ();
+	 p++)
+      retval(i++) = *p;
+    return retval;
+  }
+
+  void do_push_figure (const graphics_handle& h);
+
+  void do_pop_figure (const graphics_handle& h);
+
+  graphics_handle do_current_figure (void) const
+  {
+    return figure_list.empty () ? octave_NaN : figure_list.front ();
+  }
+};
+
+
+// This function is NOT equivalent to the scripting language function gcf.
+graphics_handle gcf (void);
+
+// This function is NOT equivalent to the scripting language function gca.
+graphics_handle gca (void);
+
 #endif
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
