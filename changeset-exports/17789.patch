# HG changeset patch
# User Rik <rik@octave.org>
# Date 1383018553 25200
#      Mon Oct 28 20:49:13 2013 -0700
# Node ID f2b047f9b6054cdeb70b5ff497e184af99dc329c
# Parent  4155838569715b2bfd242246c8ddf797d68e8a41
Use GNU style coding conventions for code in src/.

* src/main.in.cc, src/mkoctfile.in.cc, src/octave-config.in.cc:
Use GNU style coding conventions for code in src/.

diff --git a/src/main.in.cc b/src/main.in.cc
--- a/src/main.in.cc
+++ b/src/main.in.cc
@@ -79,17 +79,17 @@ w32_get_octave_home (void)
 
                   if (bin_dir[bin_dir.length () - 1] != '\\')
                     bin_dir.append (1, '\\');
 
                   break;
                 }
             }
           while (Module32Next (h, &mod_info));
-       }
+        }
 
       CloseHandle (h);
     }
 
   if (! bin_dir.empty ())
     {
       size_t pos = bin_dir.rfind ("\\bin\\");
 
diff --git a/src/mkoctfile.in.cc b/src/mkoctfile.in.cc
--- a/src/mkoctfile.in.cc
+++ b/src/mkoctfile.in.cc
@@ -182,21 +182,21 @@ initialize (void)
   vars["OCTINCLUDEDIR"] = get_variable ("OCTINCLUDEDIR", DEFAULT_OCTINCLUDEDIR);
   vars["INCLUDEDIR"] = get_variable ("INCLUDEDIR", DEFAULT_INCLUDEDIR);
   vars["LIBDIR"] = get_variable ("LIBDIR", DEFAULT_LIBDIR);
   vars["OCTLIBDIR"] = get_variable ("OCTLIBDIR", DEFAULT_OCTLIBDIR);
 
 #if defined (__WIN32__) && ! defined (_POSIX_VERSION)
   string DEFAULT_INCFLAGS
     = "-I" + quote_path (vars["OCTINCLUDEDIR"] + "\\..")
-    + " -I" + quote_path (vars["OCTINCLUDEDIR"]);
+      + " -I" + quote_path (vars["OCTINCLUDEDIR"]);
 #else
   string DEFAULT_INCFLAGS
     = "-I" + quote_path (vars["OCTINCLUDEDIR"] + "/..")
-    + " -I" + quote_path (vars["OCTINCLUDEDIR"]);
+      + " -I" + quote_path (vars["OCTINCLUDEDIR"]);
 #endif
   if (vars["INCLUDEDIR"] != "/usr/include")
     DEFAULT_INCFLAGS += " -I" + quote_path (vars["INCLUDEDIR"]);
 
   string DEFAULT_LFLAGS = "-L" + quote_path (vars["OCTLIBDIR"]);
   if (vars["LIBDIR"] != "/usr/lib")
     DEFAULT_LFLAGS += " -L" + quote_path (vars["LIBDIR"]);
 
@@ -207,65 +207,75 @@ initialize (void)
   vars["FPICFLAG"] = get_variable ("FPICFLAG", %OCTAVE_CONF_FPICFLAG%);
   vars["CC"] = get_variable ("CC", %OCTAVE_CONF_MKOCTFILE_CC%);
   vars["CFLAGS"] = get_variable ("CFLAGS", %OCTAVE_CONF_CFLAGS%);
   vars["CPICFLAG"] = get_variable ("CPICFLAG", %OCTAVE_CONF_CPICFLAG%);
   vars["CXX"] = get_variable ("CXX", %OCTAVE_CONF_MKOCTFILE_CXX%);
   vars["CXXFLAGS"] = get_variable ("CXXFLAGS", %OCTAVE_CONF_CXXFLAGS%);
   vars["CXXPICFLAG"] = get_variable ("CXXPICFLAG", %OCTAVE_CONF_CXXPICFLAG%);
   vars["XTRA_CFLAGS"] = get_variable ("XTRA_CFLAGS", %OCTAVE_CONF_XTRA_CFLAGS%);
-  vars["XTRA_CXXFLAGS"] = get_variable ("XTRA_CXXFLAGS", %OCTAVE_CONF_XTRA_CXXFLAGS%);
+  vars["XTRA_CXXFLAGS"] = get_variable ("XTRA_CXXFLAGS",
+                                        %OCTAVE_CONF_XTRA_CXXFLAGS%);
 
   vars["AR"] = get_variable ("AR", %OCTAVE_CONF_MKOCTFILE_AR%);
   vars["RANLIB"] = get_variable ("RANLIB", %OCTAVE_CONF_MKOCTFILE_RANLIB%);
 
-  vars["DEPEND_FLAGS"] = get_variable ("DEPEND_FLAGS", %OCTAVE_CONF_DEPEND_FLAGS%);
-  vars["DEPEND_EXTRA_SED_PATTERN"] = get_variable ("DEPEND_EXTRA_SED_PATTERN", %OCTAVE_CONF_DEPEND_EXTRA_SED_PATTERN%);
+  vars["DEPEND_FLAGS"] = get_variable ("DEPEND_FLAGS",
+                                       %OCTAVE_CONF_DEPEND_FLAGS%);
+  vars["DEPEND_EXTRA_SED_PATTERN"] = get_variable ("DEPEND_EXTRA_SED_PATTERN",
+                                       %OCTAVE_CONF_DEPEND_EXTRA_SED_PATTERN%);
 
   vars["DL_LD"] = get_variable ("DL_LD", %OCTAVE_CONF_MKOCTFILE_DL_LD%);
-  vars["DL_LDFLAGS"] = get_variable ("DL_LDFLAGS", %OCTAVE_CONF_MKOCTFILE_DL_LDFLAGS%);
+  vars["DL_LDFLAGS"] = get_variable ("DL_LDFLAGS",
+                                     %OCTAVE_CONF_MKOCTFILE_DL_LDFLAGS%);
 
-  vars["RDYNAMIC_FLAG"] = get_variable ("RDYNAMIC_FLAG", %OCTAVE_CONF_RDYNAMIC_FLAG%);
+  vars["RDYNAMIC_FLAG"] = get_variable ("RDYNAMIC_FLAG",
+                                        %OCTAVE_CONF_RDYNAMIC_FLAG%);
   vars["LIBOCTAVE"] = "-loctave";
   vars["LIBOCTINTERP"] = "-loctinterp";
   vars["READLINE_LIBS"] = "-lreadline";
   vars["LAPACK_LIBS"] = get_variable ("LAPACK_LIBS", %OCTAVE_CONF_LAPACK_LIBS%);
   vars["BLAS_LIBS"] = get_variable ("BLAS_LIBS", %OCTAVE_CONF_BLAS_LIBS%);
-  vars["FFTW3_LDFLAGS"] = get_variable ("FFTW3_LDFLAGS", %OCTAVE_CONF_FFTW3_LDFLAGS%);
+  vars["FFTW3_LDFLAGS"] = get_variable ("FFTW3_LDFLAGS",
+                                        %OCTAVE_CONF_FFTW3_LDFLAGS%);
   vars["FFTW3_LIBS"] = get_variable ("FFTW3_LIBS", %OCTAVE_CONF_FFTW3_LIBS%);
-  vars["FFTW3F_LDFLAGS"] = get_variable ("FFTW3F_LDFLAGS", %OCTAVE_CONF_FFTW3F_LDFLAGS%);
+  vars["FFTW3F_LDFLAGS"] = get_variable ("FFTW3F_LDFLAGS",
+                                         %OCTAVE_CONF_FFTW3F_LDFLAGS%);
   vars["FFTW3F_LIBS"] = get_variable ("FFTW3F_LIBS", %OCTAVE_CONF_FFTW3F_LIBS%);
   vars["LIBS"] = get_variable ("LIBS", %OCTAVE_CONF_LIBS%);
   vars["FLIBS"] = get_variable ("FLIBS", %OCTAVE_CONF_FLIBS%);
-  vars["OCTAVE_LINK_DEPS"] = get_variable ("FLIBS", %OCTAVE_CONF_OCTAVE_LINK_DEPS%);
+  vars["OCTAVE_LINK_DEPS"] = get_variable ("FLIBS",
+                                           %OCTAVE_CONF_OCTAVE_LINK_DEPS%);
   vars["OCT_LINK_DEPS"] = get_variable ("FLIBS", %OCTAVE_CONF_OCT_LINK_DEPS%);
   vars["FLIBS"] = get_variable ("FLIBS", %OCTAVE_CONF_FLIBS%);
 
   vars["LD_CXX"] = get_variable ("LD_CXX", %OCTAVE_CONF_MKOCTFILE_LD_CXX%);
   vars["LDFLAGS"] = get_variable ("LDFLAGS", %OCTAVE_CONF_LDFLAGS%);
-  vars["LD_STATIC_FLAG"] = get_variable ("LD_STATIC_FLAG", %OCTAVE_CONF_LD_STATIC_FLAG%);
+  vars["LD_STATIC_FLAG"] = get_variable ("LD_STATIC_FLAG",
+                                         %OCTAVE_CONF_LD_STATIC_FLAG%);
   vars["LFLAGS"] = get_variable ("LFLAGS", DEFAULT_LFLAGS);
-  vars["F77_INTEGER8_FLAG"] = get_variable ("F77_INTEGER8_FLAG", %OCTAVE_CONF_F77_INTEGER_8_FLAG%);
+  vars["F77_INTEGER8_FLAG"] = get_variable ("F77_INTEGER8_FLAG",
+                                            %OCTAVE_CONF_F77_INTEGER_8_FLAG%);
 
   vars["ALL_FFLAGS"] = vars["FFLAGS"] + " " + vars["F77_INTEGER8_FLAG"];
 
-  vars["ALL_CFLAGS"] = vars["INCFLAGS"] + " " + vars["XTRA_CFLAGS"]
-    + " " + vars["CFLAGS"];
+  vars["ALL_CFLAGS"] = vars["INCFLAGS"] + " " + vars["XTRA_CFLAGS"] + " "
+                       + vars["CFLAGS"];
 
-  vars["ALL_CXXFLAGS"] = vars["INCFLAGS"] + " " + vars["XTRA_CXXFLAGS"]
-    + " " + vars["CXXFLAGS"];
+  vars["ALL_CXXFLAGS"] = vars["INCFLAGS"] + " " + vars["XTRA_CXXFLAGS"] + " "
+                         + vars["CXXFLAGS"];
 
-  vars["ALL_LDFLAGS"] = vars["LD_STATIC_FLAG"] + " " + vars["CPICFLAG"]
-    + " " + vars["LDFLAGS"];
+  vars["ALL_LDFLAGS"] = vars["LD_STATIC_FLAG"] + " " + vars["CPICFLAG"] + " "
+                        + vars["LDFLAGS"];
 
-  vars["OCTAVE_LIBS"] = vars["LIBOCTINTERP"] + " " + vars["LIBOCTAVE"]
-    + " " + vars["SPECIAL_MATH_LIB"];
+  vars["OCTAVE_LIBS"] = vars["LIBOCTINTERP"] + " " + vars["LIBOCTAVE"] + " "
+                        + vars["SPECIAL_MATH_LIB"];
 
-  vars["FFTW_LIBS"] = vars["FFTW3_LDFLAGS"] + " " + vars["FFTW3_LIBS"]
-    + " " + vars["FFTW3F_LDFLAGS"] + " " + vars["FFTW3F_LIBS"];
+  vars["FFTW_LIBS"] = vars["FFTW3_LDFLAGS"] + " " + vars["FFTW3_LIBS"] + " "
+                      + vars["FFTW3F_LDFLAGS"] + " " + vars["FFTW3F_LIBS"];
 }
 
 static string usage_msg = "usage: mkoctfile [options] file ...";
 static string version_msg = "mkoctfile, version " + OCTAVE_VERSION;
 static bool debug = false;
 static string help_msg =
 "\n"
 "Options:\n"
@@ -606,58 +616,64 @@ main (int argc, char **argv)
   if (depend)
     {
       for (it = cfiles.begin (); it != cfiles.end (); ++it)
         {
           string f = *it, dfile = basename (f, true) + ".d", line;
 
           unlink (dfile.c_str ());
           string cmd = vars["CC"] + " " + vars["DEPEND_FLAGS"] + " "
-            + vars["CPPFLAGS"] + " " + vars["ALL_CFLAGS"] + " "
-            + incflags  + " " + defs + " " + quote_path (f);
+                       + vars["CPPFLAGS"] + " " + vars["ALL_CFLAGS"] + " "
+                       + incflags  + " " + defs + " " + quote_path (f);
 
           FILE *fd = popen (cmd.c_str (), "r");
           ofstream fo (dfile.c_str ());
           size_t pos;
           while (!feof (fd))
             {
               line = get_line (fd);
               if ((pos = line.rfind (".o:")) != string::npos)
                 {
                   size_t spos = line.rfind ('/', pos);
-                  string ofile = (spos == string::npos ? line.substr (0, pos+2) : line.substr (spos+1, pos-spos+1));
-                  fo << "pic/" << ofile << " " << ofile << " " << dfile << line.substr (pos) << endl;
+                  string ofile =
+                    (spos == string::npos ? line.substr (0, pos+2)
+                                          : line.substr (spos+1, pos-spos+1));
+                  fo << "pic/" << ofile << " " << ofile << " "
+                     << dfile << line.substr (pos) << endl;
                 }
               else
                 fo << line << endl;
             }
           pclose (fd);
           fo.close ();
         }
 
       for (it = ccfiles.begin (); it != ccfiles.end (); ++it)
         {
           string f = *it, dfile = basename (f, true) + ".d", line;
 
           unlink (dfile.c_str ());
           string cmd = vars["CC"] + " " + vars["DEPEND_FLAGS"] + " "
-            + vars["CPPFLAGS"] + " " + vars["ALL_CXXFLAGS"] + " "
-            + incflags  + " " + defs + " " + quote_path (f);
+                       + vars["CPPFLAGS"] + " " + vars["ALL_CXXFLAGS"] + " "
+                       + incflags  + " " + defs + " " + quote_path (f);
 
           FILE *fd = popen (cmd.c_str (), "r");
           ofstream fo (dfile.c_str ());
           size_t pos;
           while (!feof (fd))
             {
               line = get_line (fd);
               if ((pos = line.rfind (".o:")) != string::npos)
                 {
                   size_t spos = line.rfind ('/', pos);
-                  string ofile = (spos == string::npos ? line.substr (0, pos+2) : line.substr (spos+1, pos-spos+1));
-                  fo << "pic/" << ofile << " " << ofile << " " << dfile << line.substr (pos+2) << endl;
+                  string ofile =
+                    (spos == string::npos ? line.substr (0, pos+2)
+                                          : line.substr (spos+1, pos-spos+1));
+                  fo << "pic/" << ofile << " " << ofile << " "
+                     << dfile << line.substr (pos+2) << endl;
                 }
               else
                 fo << line << endl;
             }
           pclose (fd);
           fo.close ();
         }
 
@@ -676,18 +692,18 @@ main (int argc, char **argv)
                 o = b + ".o";
               else
                 o = outputfile;
             }
           else
             o = b + ".o";
           objfiles += (" " + o);
           string cmd = vars["F77"] + " -c " + vars["FPICFLAG"] + " "
-            + vars["ALL_FFLAGS"] + " " + incflags + " " + defs + " "
-            + pass_on_options + " " + f + " -o " + o;
+                       + vars["ALL_FFLAGS"] + " " + incflags + " " + defs + " "
+                       + pass_on_options + " " + f + " -o " + o;
           result = run_command (cmd);
         }
       else
         {
           cerr << "mkoctfile: no way to compile Fortran file " << f << endl;
           return 1;
         }
     }
@@ -704,19 +720,19 @@ main (int argc, char **argv)
                 o = b + ".o";
               else
                 o = outputfile;
             }
           else
             o = b + ".o";
           objfiles += (" " + o);
           string cmd = vars["CC"] + " -c " + vars["CPPFLAGS"] + " "
-            + vars["CPICFLAG"] + " " + vars["ALL_CFLAGS"] + " "
-            + pass_on_options + " " + incflags + " " + defs + " "
-            + quote_path (f) + " -o " + quote_path (o);
+                       + vars["CPICFLAG"] + " " + vars["ALL_CFLAGS"] + " "
+                       + pass_on_options + " " + incflags + " " + defs + " "
+                       + quote_path (f) + " -o " + quote_path (o);
           result = run_command (cmd);
         }
       else
         {
           cerr << "mkoctfile: no way to compile C file " << f << endl;
           return 1;
         }
     }
@@ -733,58 +749,60 @@ main (int argc, char **argv)
                 o = b + ".o";
               else
                 o = outputfile;
             }
           else
             o = b + ".o";
           objfiles += (" " + o);
           string cmd = vars["CXX"] + " -c " + vars["CPPFLAGS"] + " "
-            + vars["CXXPICFLAG"] + " " + vars["ALL_CXXFLAGS"] + " "
-            + pass_on_options + " " + incflags + " " + defs + " "
-            + quote_path (f) + " -o " + quote_path (o);
+                       + vars["CXXPICFLAG"] + " " + vars["ALL_CXXFLAGS"] + " "
+                       + pass_on_options + " " + incflags + " " + defs + " "
+                       + quote_path (f) + " -o " + quote_path (o);
           result = run_command (cmd);
         }
       else
         {
           cerr << "mkoctfile: no way to compile C++ file " << f << endl;
           return 1;
         }
     }
 
   if (link && !objfiles.empty ())
     {
       if (link_stand_alone)
         {
           if (!vars["LD_CXX"].empty ())
             {
               string cmd = vars["LD_CXX"] + " " + vars["CPPFLAGS"] + " "
-                + vars["ALL_CXXFLAGS"] + " " + vars["RDYNAMIC_FLAG"]
-                + " " + vars["ALL_LDFLAGS"] + " " +  pass_on_options
-                + " " + output_option + " " + objfiles + " " + libfiles
-                + " " + ldflags + " " + vars["LFLAGS"]
-                + " -loctinterp -loctave "
-                + " " + vars["OCT_LINK_OPTS"]
-                + " " + vars["OCTAVE_LINK_DEPS"];
+                           + vars["ALL_CXXFLAGS"] + " " + vars["RDYNAMIC_FLAG"]
+                           + " " + vars["ALL_LDFLAGS"] + " "
+                           + pass_on_options + " " + output_option + " "
+                           + objfiles + " " + libfiles + " "
+                           + ldflags + " " + vars["LFLAGS"]
+                           + " -loctinterp -loctave "
+                           + " " + vars["OCT_LINK_OPTS"]
+                           + " " + vars["OCTAVE_LINK_DEPS"];
               result = run_command (cmd);
             }
           else
             {
               cerr << "mkoctfile: no way to link stand-alone executable file"
                    << endl;
               return 1;
             }
         }
       else
         {
           string cmd = vars["DL_LD"] + " " + vars["DL_LDFLAGS"] + " "
-            + pass_on_options + " -o " + octfile + " " + objfiles + " "
-            + libfiles + " " + ldflags + " " + vars["LFLAGS"]
-            + " -loctinterp -loctave "
-            + vars["OCT_LINK_OPTS"] + " " + vars["OCT_LINK_DEPS"];
+                       + pass_on_options + " -o " + octfile + " "
+                       + objfiles + " " + libfiles + " "
+                       + ldflags + " " + vars["LFLAGS"]
+                       + " -loctinterp -loctave "
+                       + vars["OCT_LINK_OPTS"] + " " + vars["OCT_LINK_DEPS"];
           result = run_command (cmd);
         }
 
       if (strip)
         {
           string cmd = "strip " + octfile;
           result = run_command (cmd);
         }
diff --git a/src/octave-config.in.cc b/src/octave-config.in.cc
--- a/src/octave-config.in.cc
+++ b/src/octave-config.in.cc
@@ -71,25 +71,25 @@ static std::string help_msg =
 "			  LIBDIR	         STARTUPFILEDIR\n"
 "			  LIBEXECDIR		 VERSION\n"
 "\n"
 "  -v, --version         Print the Octave version number.\n"
 "\n";
 
 static std::string
 substitute_prefix (const std::string& s, const std::string& prefix,
-		   const std::string new_prefix)
+                   const std::string new_prefix)
 {
   std::string retval = s;
 
   if (!prefix.empty () && new_prefix != prefix)
     {
       int len = prefix.length ();
       if (retval.find (prefix) == 0)
-	retval.replace (0, len, new_prefix);
+        retval.replace (0, len, new_prefix);
     }
 
 #if defined (__WIN32__) && ! defined (_POSIX_VERSION)
   std::replace (retval.begin (), retval.end (), '/', '\\');
 #endif
 
   return retval;
 }
@@ -111,69 +111,89 @@ initialize (void)
 
   std::string bin_dir (n, '\0');
 
   while (true)
     {
       int status = GetModuleFileName (0, &bin_dir[0], n);
 
       if (status < n)
-	{
-	  bin_dir.resize (status);
-	  break;
-	}
+        {
+          bin_dir.resize (status);
+          break;
+        }
       else
-	{
-	  n *= 2;
-	  bin_dir.resize (n);
-	}
+        {
+          n *= 2;
+          bin_dir.resize (n);
+        }
     }
 
   if (! bin_dir.empty ())
     {
       size_t pos = bin_dir.rfind ("\\bin\\");
 
       if (pos != std::string::npos)
-	OCTAVE_HOME = bin_dir.substr (0, pos);
+        OCTAVE_HOME = bin_dir.substr (0, pos);
     }
 #endif
 
   vars["API_VERSION"] = %OCTAVE_API_VERSION%;
   vars["CANONICAL_HOST_TYPE"] = %OCTAVE_CANONICAL_HOST_TYPE%;
   vars["DEFAULT_PAGER"] = %OCTAVE_DEFAULT_PAGER%;
-  vars["ARCHLIBDIR"] = substitute_prefix (%OCTAVE_ARCHLIBDIR%, PREFIX, OCTAVE_HOME);
+  vars["ARCHLIBDIR"] = substitute_prefix (%OCTAVE_ARCHLIBDIR%,
+                                          PREFIX, OCTAVE_HOME);
   vars["BINDIR"] = substitute_prefix (%OCTAVE_BINDIR%, PREFIX, OCTAVE_HOME);
-  vars["DATADIR"] =substitute_prefix (%OCTAVE_DATADIR%, PREFIX, OCTAVE_HOME);
-  vars["DATAROOTDIR"] =substitute_prefix (%OCTAVE_DATAROOTDIR%, PREFIX, OCTAVE_HOME);
-  vars["EXEC_PREFIX"] =substitute_prefix (%OCTAVE_EXEC_PREFIX%, PREFIX, OCTAVE_HOME);
-  vars["FCNFILEDIR"] =substitute_prefix (%OCTAVE_FCNFILEDIR%, PREFIX, OCTAVE_HOME);
-  vars["IMAGEDIR"] =substitute_prefix (%OCTAVE_IMAGEDIR%, PREFIX, OCTAVE_HOME);
-  vars["INCLUDEDIR"] =substitute_prefix (%OCTAVE_INCLUDEDIR%, PREFIX, OCTAVE_HOME);
-  vars["INFODIR"] =substitute_prefix (%OCTAVE_INFODIR%, PREFIX, OCTAVE_HOME);
-  vars["INFOFILE"] =substitute_prefix (%OCTAVE_INFOFILE%, PREFIX, OCTAVE_HOME);
-  vars["LIBDIR"] =substitute_prefix (%OCTAVE_LIBDIR%, PREFIX, OCTAVE_HOME);
-  vars["LIBEXECDIR"] =substitute_prefix (%OCTAVE_LIBEXECDIR%, PREFIX, OCTAVE_HOME);
-  vars["LOCALAPIARCHLIBDIR"] =substitute_prefix (%OCTAVE_LOCALAPIARCHLIBDIR%, PREFIX, OCTAVE_HOME);
-  vars["LOCALAPIFCNFILEDIR"] =substitute_prefix (%OCTAVE_LOCALAPIFCNFILEDIR%, PREFIX, OCTAVE_HOME);
-  vars["LOCALAPIOCTFILEDIR"] =substitute_prefix (%OCTAVE_LOCALAPIOCTFILEDIR%, PREFIX, OCTAVE_HOME);
-  vars["LOCALARCHLIBDIR"] =substitute_prefix (%OCTAVE_LOCALARCHLIBDIR%, PREFIX, OCTAVE_HOME);
-  vars["LOCALFCNFILEDIR"] =substitute_prefix (%OCTAVE_LOCALFCNFILEDIR%, PREFIX, OCTAVE_HOME);
-  vars["LOCALOCTFILEDIR"] =substitute_prefix (%OCTAVE_LOCALOCTFILEDIR%, PREFIX, OCTAVE_HOME);
-  vars["LOCALSTARTUPFILEDIR"] =substitute_prefix (%OCTAVE_LOCALSTARTUPFILEDIR%, PREFIX, OCTAVE_HOME);
-  vars["LOCALVERARCHLIBDIR"] =substitute_prefix (%OCTAVE_LOCALVERARCHLIBDIR%, PREFIX, OCTAVE_HOME);
-  vars["LOCALVERFCNFILEDIR"] =substitute_prefix (%OCTAVE_LOCALVERFCNFILEDIR%, PREFIX, OCTAVE_HOME);
-  vars["LOCALVEROCTFILEDIR"] =substitute_prefix (%OCTAVE_LOCALVEROCTFILEDIR%, PREFIX, OCTAVE_HOME);
-  vars["MAN1DIR"] =substitute_prefix (%OCTAVE_MAN1DIR%, PREFIX, OCTAVE_HOME);
+  vars["DATADIR"] = substitute_prefix (%OCTAVE_DATADIR%, PREFIX, OCTAVE_HOME);
+  vars["DATAROOTDIR"] = substitute_prefix (%OCTAVE_DATAROOTDIR%,
+                                           PREFIX, OCTAVE_HOME);
+  vars["EXEC_PREFIX"] = substitute_prefix (%OCTAVE_EXEC_PREFIX%,
+                                           PREFIX, OCTAVE_HOME);
+  vars["FCNFILEDIR"] = substitute_prefix (%OCTAVE_FCNFILEDIR%,
+                                          PREFIX, OCTAVE_HOME);
+  vars["IMAGEDIR"] = substitute_prefix (%OCTAVE_IMAGEDIR%, PREFIX, OCTAVE_HOME);
+  vars["INCLUDEDIR"] = substitute_prefix (%OCTAVE_INCLUDEDIR%,
+                                          PREFIX, OCTAVE_HOME);
+  vars["INFODIR"] = substitute_prefix (%OCTAVE_INFODIR%, PREFIX, OCTAVE_HOME);
+  vars["INFOFILE"] = substitute_prefix (%OCTAVE_INFOFILE%, PREFIX, OCTAVE_HOME);
+  vars["LIBDIR"] = substitute_prefix (%OCTAVE_LIBDIR%, PREFIX, OCTAVE_HOME);
+  vars["LIBEXECDIR"] = substitute_prefix (%OCTAVE_LIBEXECDIR%,
+                                          PREFIX, OCTAVE_HOME);
+  vars["LOCALAPIARCHLIBDIR"] = substitute_prefix (%OCTAVE_LOCALAPIARCHLIBDIR%,
+                                                  PREFIX, OCTAVE_HOME);
+  vars["LOCALAPIFCNFILEDIR"] = substitute_prefix (%OCTAVE_LOCALAPIFCNFILEDIR%,
+                                                  PREFIX, OCTAVE_HOME);
+  vars["LOCALAPIOCTFILEDIR"] = substitute_prefix (%OCTAVE_LOCALAPIOCTFILEDIR%,
+                                                  PREFIX, OCTAVE_HOME);
+  vars["LOCALARCHLIBDIR"] = substitute_prefix (%OCTAVE_LOCALARCHLIBDIR%,
+                                               PREFIX, OCTAVE_HOME);
+  vars["LOCALFCNFILEDIR"] = substitute_prefix (%OCTAVE_LOCALFCNFILEDIR%,
+                                               PREFIX, OCTAVE_HOME);
+  vars["LOCALOCTFILEDIR"] = substitute_prefix (%OCTAVE_LOCALOCTFILEDIR%,
+                                               PREFIX, OCTAVE_HOME);
+  vars["LOCALSTARTUPFILEDIR"] = substitute_prefix (%OCTAVE_LOCALSTARTUPFILEDIR%,
+                                                   PREFIX, OCTAVE_HOME);
+  vars["LOCALVERARCHLIBDIR"] = substitute_prefix (%OCTAVE_LOCALVERARCHLIBDIR%,
+                                                  PREFIX, OCTAVE_HOME);
+  vars["LOCALVERFCNFILEDIR"] = substitute_prefix (%OCTAVE_LOCALVERFCNFILEDIR%,
+                                                  PREFIX, OCTAVE_HOME);
+  vars["LOCALVEROCTFILEDIR"] = substitute_prefix (%OCTAVE_LOCALVEROCTFILEDIR%,
+                                                  PREFIX, OCTAVE_HOME);
+  vars["MAN1DIR"] = substitute_prefix (%OCTAVE_MAN1DIR%, PREFIX, OCTAVE_HOME);
   vars["MAN1EXT"] = %OCTAVE_MAN1EXT%;
-  vars["MANDIR"] =substitute_prefix (%OCTAVE_MANDIR%, PREFIX, OCTAVE_HOME);
-  vars["OCTFILEDIR"] =substitute_prefix (%OCTAVE_OCTFILEDIR%, PREFIX, OCTAVE_HOME);
-  vars["OCTINCLUDEDIR"] =substitute_prefix (%OCTAVE_OCTINCLUDEDIR%, PREFIX, OCTAVE_HOME);
-  vars["OCTLIBDIR"] =substitute_prefix (%OCTAVE_OCTLIBDIR%, PREFIX, OCTAVE_HOME);
+  vars["MANDIR"] = substitute_prefix (%OCTAVE_MANDIR%, PREFIX, OCTAVE_HOME);
+  vars["OCTFILEDIR"] = substitute_prefix (%OCTAVE_OCTFILEDIR%,
+                                          PREFIX, OCTAVE_HOME);
+  vars["OCTINCLUDEDIR"] = substitute_prefix (%OCTAVE_OCTINCLUDEDIR%,
+                                             PREFIX, OCTAVE_HOME);
+  vars["OCTLIBDIR"] = substitute_prefix (%OCTAVE_OCTLIBDIR%,
+                                         PREFIX, OCTAVE_HOME);
   vars["PREFIX"] = (OCTAVE_HOME.empty () ? PREFIX : OCTAVE_HOME);
-  vars["STARTUPFILEDIR"] =substitute_prefix (%OCTAVE_STARTUPFILEDIR%, PREFIX, OCTAVE_HOME);
+  vars["STARTUPFILEDIR"] = substitute_prefix (%OCTAVE_STARTUPFILEDIR%,
+                                              PREFIX, OCTAVE_HOME);
   vars["VERSION"] = %OCTAVE_VERSION%;
 }
 
 int
 main (int argc, char **argv)
 {
   initialize ();
 
@@ -183,42 +203,43 @@ main (int argc, char **argv)
       return 1;
     }
 
   for (int i = 1; i < argc; i++)
     {
       std::string arg (argv[i]);
 
       if (arg == "-h" || arg == "-?" || arg == "--help")
-	{
-	  std::cout << usage_msg << std::endl;
-	  std::cout << help_msg;
-	  return 0;
-	}
+        {
+          std::cout << usage_msg << std::endl;
+          std::cout << help_msg;
+          return 0;
+        }
       else if (arg == "--m-site-dir")
-	std::cout << vars["LOCALVERFCNFILEDIR"] << std::endl;
+        std::cout << vars["LOCALVERFCNFILEDIR"] << std::endl;
       else if (arg == "--oct-site-dir")
-	std::cout << vars["LOCALVEROCTFILEDIR"] << std::endl;
+        std::cout << vars["LOCALVEROCTFILEDIR"] << std::endl;
       else if (arg == "-v" || arg == "--version")
-	std::cout << vars["VERSION"] << std::endl;
+        std::cout << vars["VERSION"] << std::endl;
       else if (arg == "-p" || arg == "--print")
-	{
-	  if (i < argc-1)
-	    {
-	      arg = argv[++i];
-	      std::cout << vars[arg] << std::endl;
-	    }
-	  else
-	    {
-	      std::cerr << "octave-config: " << arg
-			<< " options requires argument" << std::endl;
-	      return 1;
-	    }
-	}
+        {
+          if (i < argc-1)
+            {
+              arg = argv[++i];
+              std::cout << vars[arg] << std::endl;
+            }
+          else
+            {
+              std::cerr << "octave-config: " << arg
+                        << " options requires argument" << std::endl;
+              return 1;
+            }
+        }
       else
-	{
-	  std::cerr << "octave-config: unrecognized argument " << arg << std::endl;
-	  return 1;
-	}
+        {
+          std::cerr << "octave-config: unrecognized argument " << arg
+                    << std::endl;
+          return 1;
+        }
     }
 
   return 0;
 }
