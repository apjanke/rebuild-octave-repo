# HG changeset patch
# User Markus MÃ¼tzel <markus.muetzel@gmx.de>
# Date 1531502003 -7200
#      Fri Jul 13 19:13:23 2018 +0200
# Node ID ca413f326224a59eddeb1827a0b52c24dc785050
# Parent  e55fb9685803d95e1723d5274ce765ba0b11e2df
Fix lifetime issues with temporary char arrays returned by get_ASCII_filename (bug #54299).

* debug.cc, dlmread.cc, help.cc, load-save.cc, ls-hdf5.cc, urlwrite.cc,
ov-java.cc, file-info.cc, url-transfer.cc: Assign return value of
get_ASCII_filename to variable to fix lifetime errors with the previous
approach.

diff --git a/libinterp/corefcn/debug.cc b/libinterp/corefcn/debug.cc
--- a/libinterp/corefcn/debug.cc
+++ b/libinterp/corefcn/debug.cc
@@ -589,17 +589,19 @@ static void
 do_dbtype (std::ostream& os, const std::string& name, int start, int end)
 {
   std::string ff = fcn_file_in_path (name);
 
   if (ff.empty ())
     os << "dbtype: unknown function " << name << "\n";
   else
     {
-      std::ifstream fs (octave::sys::get_ASCII_filename (ff).c_str (), std::ios::in);
+      std::string ascii_fname = octave::sys::get_ASCII_filename (ff);
+
+      std::ifstream fs (ascii_fname.c_str (), std::ios::in);
 
       if (! fs)
         os << "dbtype: unable to open '" << ff << "' for reading!\n";
       else
         {
           int line = 1;
           std::string text;
 
diff --git a/libinterp/corefcn/dlmread.cc b/libinterp/corefcn/dlmread.cc
--- a/libinterp/corefcn/dlmread.cc
+++ b/libinterp/corefcn/dlmread.cc
@@ -216,17 +216,19 @@ such as text, are also replaced by the @
     {
       // Filename.
       std::string fname (args(0).string_value ());
 
       std::string tname = octave::sys::file_ops::tilde_expand (fname);
 
       tname = find_data_file_in_load_path ("dlmread", tname);
 
-      input_file.open (octave::sys::get_ASCII_filename (tname).c_str (), std::ios::in);
+      std::string ascii_fname = octave::sys::get_ASCII_filename (tname);
+
+      input_file.open (ascii_fname.c_str (), std::ios::in);
 
       if (! input_file)
         error ("dlmread: unable to open file '%s'", fname.c_str ());
 
       input = &input_file;
     }
   else if (args(0).is_scalar_type ())
     {
diff --git a/libinterp/corefcn/help.cc b/libinterp/corefcn/help.cc
--- a/libinterp/corefcn/help.cc
+++ b/libinterp/corefcn/help.cc
@@ -577,19 +577,21 @@ namespace octave
     symbol_found = false;
 
     // FIXME: Should we cache the timestamp of the file and reload the
     // offsets if it changes?  Or just warn about that?  Or just ignore
     // it, and assume it won't change?
 
     if (! initialized)
       {
-        std::ifstream file (
-          octave::sys::get_ASCII_filename (m_built_in_docstrings_file).c_str (),
-          std::ios::in | std::ios::binary);
+        std::string ascii_fname
+          = octave::sys::get_ASCII_filename (m_built_in_docstrings_file);
+
+        std::ifstream file (ascii_fname.c_str (),
+                            std::ios::in | std::ios::binary);
 
         if (! file)
           error ("failed to open docstrings file: %s",
                  m_built_in_docstrings_file.c_str ());
 
         // Ignore header;
         file.ignore (std::numeric_limits<std::streamsize>::max(), 0x1d);
 
@@ -661,19 +663,21 @@ namespace octave
 
     if (it != help_txt_map.end ())
       {
         txt_limits_type txt_limits = it->second;
 
         std::streampos beg = txt_limits.first;
         std::streamoff len = txt_limits.second;
 
-        std::ifstream file (
-          octave::sys::get_ASCII_filename (m_built_in_docstrings_file).c_str (),
-          std::ios::in | std::ios::binary);
+        std::string ascii_fname
+          = octave::sys::get_ASCII_filename (m_built_in_docstrings_file);
+
+        std::ifstream file (ascii_fname.c_str (),
+                            std::ios::in | std::ios::binary);
 
         if (! file)
           error ("failed to open docstrings file: %s",
                  m_built_in_docstrings_file.c_str ());
 
         file.seekg (beg);
 
         size_t txt_len = len;
diff --git a/libinterp/corefcn/load-save.cc b/libinterp/corefcn/load-save.cc
--- a/libinterp/corefcn/load-save.cc
+++ b/libinterp/corefcn/load-save.cc
@@ -221,17 +221,19 @@ read_binary_file_header (std::istream& i
 }
 
 #if defined (HAVE_ZLIB)
 static bool
 check_gzip_magic (const std::string& fname)
 {
   bool retval = false;
 
-  std::ifstream file (octave::sys::get_ASCII_filename (fname).c_str (),
+  std::string ascii_fname = octave::sys::get_ASCII_filename (fname);
+
+  std::ifstream file (ascii_fname.c_str (),
                       std::ios::in | std::ios::binary);
 
   unsigned char magic[2];
   if (file.read (reinterpret_cast<char *> (&magic[0]), 2)
       && magic[0] == 0x1f && magic[1] == 0x8b)
     retval = true;
 
   file.close ();
@@ -308,31 +310,33 @@ get_file_format (std::istream& file, con
 }
 
 static load_save_format
 get_file_format (const std::string& fname, const std::string& orig_fname,
                  bool& use_zlib, bool quiet = false)
 {
   load_save_format retval = LS_UNKNOWN;
 
+  std::string ascii_fname = octave::sys::get_ASCII_filename (fname);
+
 #if defined (HAVE_HDF5)
   // check this before we open the file
-  if (H5Fis_hdf5 (octave::sys::get_ASCII_filename (fname).c_str ()) > 0)
+  if (H5Fis_hdf5 (ascii_fname.c_str ()) > 0)
     return LS_HDF5;
 #endif
 
 #if defined (HAVE_ZLIB)
   use_zlib = check_gzip_magic (fname);
 #else
   use_zlib = false;
 #endif
 
   if (! use_zlib)
     {
-      std::ifstream file (octave::sys::get_ASCII_filename (fname).c_str (),
+      std::ifstream file (ascii_fname.c_str (),
                           std::ios::in | std::ios::binary);
       if (file)
         {
           retval = get_file_format (file, orig_fname);
           file.close ();
         }
       else if (! quiet)
         err_file_open ("load", orig_fname);
@@ -831,18 +835,19 @@ Force Octave to assume the file is in Oc
                                 flt_fmt, list_only, swap, verbose,
                                 argv, i, argc, nargout);
 
               file.close ();
             }
           else
 #endif
             {
-              std::ifstream file (
-                octave::sys::get_ASCII_filename (fname).c_str (), mode);
+              std::string ascii_fname = octave::sys::get_ASCII_filename (fname);
+
+              std::ifstream file (ascii_fname.c_str (), mode);
 
               if (! file)
                 error ("load: unable to open input file '%s'",
                        orig_fname.c_str ());
 
               if (format == LS_BINARY)
                 {
                   if (read_binary_file_header (file, swap, flt_fmt) < 0)
@@ -1695,19 +1700,20 @@ file @file{data} in Octave's binary form
 
 #if defined (HAVE_HDF5)
       if (format == LS_HDF5)
         {
           // FIXME: It should be possible to append to HDF5 files.
           if (append)
             error ("save: appending to HDF5 files is not implemented");
 
+          std::string ascii_fname = octave::sys::get_ASCII_filename (fname);
+
           bool write_header_info
-            = ! (append && H5Fis_hdf5 (
-                 octave::sys::get_ASCII_filename (fname).c_str ()) > 0);
+            = ! (append && H5Fis_hdf5 (ascii_fname.c_str ()) > 0);
 
           hdf5_ofstream hdf5_file (fname.c_str (), mode);
 
           if (hdf5_file.file_id == -1)
             err_file_open ("save", fname);
 
           save_vars (argv, i, argc, hdf5_file, format,
                      save_as_floats, write_header_info);
diff --git a/libinterp/corefcn/ls-hdf5.cc b/libinterp/corefcn/ls-hdf5.cc
--- a/libinterp/corefcn/ls-hdf5.cc
+++ b/libinterp/corefcn/ls-hdf5.cc
@@ -84,18 +84,21 @@ check_hdf5_id_value (octave_hdf5_id id, 
 
 #endif
 
 hdf5_fstreambase::hdf5_fstreambase (const char *name, int mode, int /* prot */)
   : file_id (-1), current_item (-1)
 {
 #if defined (HAVE_HDF5)
 
-  const char *s_name = 
-     octave::sys::get_ASCII_filename (std::string (name)).c_str ();
+  std::string fname (name);
+
+  std::string ascii_fname = octave::sys::get_ASCII_filename (fname);
+
+  const char *s_name = ascii_fname.c_str ();
 
   if (mode & std::ios::in)
     file_id = H5Fopen (s_name, H5F_ACC_RDONLY, octave_H5P_DEFAULT);
   else if (mode & std::ios::out)
     {
       if (mode & std::ios::app && H5Fis_hdf5 (s_name) > 0)
         file_id = H5Fopen (s_name, H5F_ACC_RDWR, octave_H5P_DEFAULT);
       else
@@ -137,17 +140,21 @@ hdf5_fstreambase::close (void)
 
 void
 hdf5_fstreambase::open (const char *name, int mode, int)
 {
 #if defined (HAVE_HDF5)
 
   clear ();
 
-  const char *s_name = octave::sys::get_ASCII_filename (std::string (name)).c_str ();
+  std::string fname (name);
+
+  std::string ascii_fname = octave::sys::get_ASCII_filename (fname);
+
+  const char *s_name = ascii_fname.c_str ();
 
   if (mode & std::ios::in)
     file_id = H5Fopen (s_name, H5F_ACC_RDONLY, octave_H5P_DEFAULT);
   else if (mode & std::ios::out)
     {
       if (mode & std::ios::app && H5Fis_hdf5 (s_name) > 0)
         file_id = H5Fopen (s_name, H5F_ACC_RDWR, octave_H5P_DEFAULT);
       else
diff --git a/libinterp/corefcn/urlwrite.cc b/libinterp/corefcn/urlwrite.cc
--- a/libinterp/corefcn/urlwrite.cc
+++ b/libinterp/corefcn/urlwrite.cc
@@ -632,18 +632,20 @@ Undocumented internal function
         {
           file_list.append (url_xfer.mput_directory ("", file));
 
           if (! url_xfer.good ())
             error ("__ftp_mput__: %s", url_xfer.lasterror ().c_str ());
         }
       else
         {
+          std::string ascii_fname = octave::sys::get_ASCII_filename (file);
+
           // FIXME: Does ascii mode need to be flagged here?
-          std::ifstream ifile (octave::sys::get_ASCII_filename (file).c_str (),
+          std::ifstream ifile (ascii_fname.c_str (),
                                std::ios::in | std::ios::binary);
 
           if (! ifile.is_open ())
             error ("__ftp_mput__: unable to open file");
 
           url_xfer.put (file, ifile);
 
           ifile.close ();
diff --git a/libinterp/octave-value/ov-java.cc b/libinterp/octave-value/ov-java.cc
--- a/libinterp/octave-value/ov-java.cc
+++ b/libinterp/octave-value/ov-java.cc
@@ -233,17 +233,19 @@ namespace octave
 
     void add (const std::string& opt)
     {
       java_opts.push_back (opt);
     }
 
     void read_java_opts (const std::string& filename)
     {
-      std::ifstream js (octave::sys::get_ASCII_filename (filename).c_str ());
+      std::string ascii_fname = octave::sys::get_ASCII_filename (filename);
+
+      std::ifstream js (ascii_fname.c_str ());
 
       if (! js.bad () && ! js.fail ())
         {
           std::string line;
 
           while (! js.eof () && ! js.fail ())
             {
               std::getline (js, line);
@@ -354,17 +356,19 @@ initial_java_dir (void)
 //!   `octave::directory_path::path_sep_str()`.  The returned string also
 //!   starts with that path separator.
 
 static std::string
 read_classpath_txt (const std::string& filepath)
 {
   std::string classpath;
 
-  std::ifstream fs (octave::sys::get_ASCII_filename (filepath).c_str ());
+  std::string ascii_fname = octave::sys::get_ASCII_filename (filepath);
+
+  std::ifstream fs (ascii_fname.c_str ());
 
   if (! fs.bad () && ! fs.fail ())
     {
       std::string line;
 
       while (! fs.eof () && ! fs.fail ())
         {
           std::getline (fs, line);
diff --git a/liboctave/util/file-info.cc b/liboctave/util/file-info.cc
--- a/liboctave/util/file-info.cc
+++ b/liboctave/util/file-info.cc
@@ -76,18 +76,19 @@ namespace octave
 
     sys::file_stat fs (fname);
 
     if (! fs)
       (*current_liboctave_error_handler) ("no such file, '%s'", fname.c_str ());
 
     size_t sz = fs.size ();
 
-    std::ifstream file (octave::sys::get_ASCII_filename (fname).c_str (),
-                        std::ios::in | std::ios::binary);
+    std::string ascii_fname = octave::sys::get_ASCII_filename (fname);
+
+    std::ifstream file (ascii_fname.c_str (), std::ios::in | std::ios::binary);
 
     if (file)
       {
         std::string buf (sz+1, 0);
 
         file.read (&buf[0], sz+1);
 
         if (! file.eof ())
diff --git a/liboctave/util/url-transfer.cc b/liboctave/util/url-transfer.cc
--- a/liboctave/util/url-transfer.cc
+++ b/liboctave/util/url-transfer.cc
@@ -197,19 +197,21 @@ namespace octave
                   file_list.append (mput_directory (realdir, file));
 
                   if (! good ())
                     break;
                 }
               else
                 {
                   // FIXME: Does ascii mode need to be flagged here?
-                  std::ifstream ifile (
-                    octave::sys::get_ASCII_filename (realfile).c_str (),
-                    std::ios::in | std::ios::binary);
+                  std::string ascii_fname
+                    = octave::sys::get_ASCII_filename (realfile);
+
+                  std::ifstream ifile (ascii_fname.c_str (),
+                                       std::ios::in | std::ios::binary);
 
                   if (! ifile.is_open ())
                     {
                       ok = false;
                       errmsg = "__ftp_mput__: unable to open file '"
                                + realfile + "'";
                       break;
                     }
