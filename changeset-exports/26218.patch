# HG changeset patch
# User Rik <rik@octave.org>
# Date 1544678386 28800
#      Wed Dec 12 21:19:46 2018 -0800
# Node ID 29387b9ccfbbcf93b38543166cfc13b04011176a
# Parent  31267a10f8a9d8dab2fd1164bf4e01b2ac4a7b48
Fix audiodevinfo recording when using 24-bit samples (bug #52228).

* audiodevinfo.cc (octave_record_callback, portaudio_record_callback):
Set the 32-bit data sample_l32, sample_r32 to 0 at the start of each
loop to clear any high bits > 24.

diff --git a/libinterp/dldfcn/audiodevinfo.cc b/libinterp/dldfcn/audiodevinfo.cc
--- a/libinterp/dldfcn/audiodevinfo.cc
+++ b/libinterp/dldfcn/audiodevinfo.cc
@@ -1341,23 +1341,24 @@ octave_record_callback (const void *inpu
     }
   else if (recorder->get_nbits () == 24)
     {
       static double scale_factor = std::pow (2.0, 23);
 
       // FIXME: Is there a better way?
       const uint8_t *input24 = static_cast<const uint8_t *> (input);
 
-      int32_t sample_l32 = 0, sample_r32 = 0;
+      int32_t sample_l32, sample_r32;
 
       uint8_t *sample_l = reinterpret_cast<uint8_t *> (&sample_l32);
       uint8_t *sample_r = reinterpret_cast<uint8_t *> (&sample_r32);
 
       for (unsigned long i = 0; i < frames; i++)
         {
+          sample_l32 = sample_r32 = 0;
           for (int j = 0; j < 3; j++)
             {
               sample_l[j] = input24[i*channels*3 + j];
               sample_r[j] = input24[i*channels*3 + (channels - 1)*3 + j];
             }
 
           if (sample_l32 & 0x00800000)
             sample_l32 |= 0xff000000;
@@ -1418,23 +1419,24 @@ portaudio_record_callback (const void *i
     }
   else if (recorder->get_nbits () == 24)
     {
       static float scale_factor = std::pow (2.0f, 23);
 
       // FIXME: Is there a better way?
       const uint8_t *input24 = static_cast<const uint8_t *> (input);
 
-      int32_t sample_l32 = 0, sample_r32 = 0;
+      int32_t sample_l32, sample_r32;
 
       uint8_t *sample_l = reinterpret_cast<uint8_t *> (&sample_l32);
       uint8_t *sample_r = reinterpret_cast<uint8_t *> (&sample_r32);
 
       for (unsigned long i = 0; i < frames; i++)
         {
+          sample_l32 = sample_r32 = 0;
           for (int j = 0; j < 3; j++)
             {
               sample_l[j] = input24[i*channels*3 + j];
               sample_r[j] = input24[i*channels*3 + (channels - 1)*3 + j];
             }
 
           if (sample_l32 & 0x00800000)
             sample_l32 |= 0xff000000;
