# HG changeset patch
# User Michele Ginesi <michele.ginesi@gmail.com>
# Date 1519513364 -3600
#      Sun Feb 25 00:02:44 2018 +0100
# Branch stable
# Node ID 40ab8be7d7ec78d9984fa74ec6274dbea48b2388
# Parent  aece120e1ec108683ea56db226befd9c0f14a10c
Fixed style in specfun scripts

--
changed scripts/specfun/betainc.m
changed scripts/specfun/cosint.m
changed scripts/specfun/expint.m
changed scripts/specfun/gammainc.m
changed scripts/specfun/sinint.m

diff --git a/scripts/specfun/betainc.m b/scripts/specfun/betainc.m
--- a/scripts/specfun/betainc.m
+++ b/scripts/specfun/betainc.m
@@ -65,40 +65,40 @@
 ## ch. 18.
 ##
 ## @seealso{beta, betaincinv, betaln}
 ##
 ## @end deftypefn
 
 function [y] = betainc (x, a, b, tail = "lower")
 
-  if (nargin > 4 || nargin < 3)
+  if ((nargin > 4) || (nargin < 3))
     print_usage ();
   endif
 
-  if (! isscalar (x) || ! isscalar (a) || ! isscalar (b))
+  if ((! isscalar (x)) || (! isscalar (a)) || (! isscalar (b)))
     [err, x, a, b] = common_size (x, a, b);
     if (err > 0)
       error ("betainc: x, a and b must be of common size or scalars");
     endif
   endif
 
-  if (iscomplex (x) || iscomplex (a) || iscomplex (b))
+  if ((iscomplex (x)) || (iscomplex (a)) || (iscomplex (b)))
     error ("betainc: inputs must be real or integer");
   endif
 
   if (any (a <= 0))
     error ("betainc: a must be strictly positive");
   endif
 
     if (any (b <= 0))
     error ("betainc: b must be strictly positive");
   endif
 
-  if (any (x > 1 | x < 0))
+  if (any ((x > 1) | (x < 0)))
     error ("betainc: x must be between 0 and 1");
   endif
 
   if (isinteger (x))
     y = double (x);
   endif
 
   if (isinteger (a))
@@ -112,55 +112,55 @@ function [y] = betainc (x, a, b, tail = 
   sz = size (x);
   x = x(:);
   a = a(:);
   b = b(:);
   y = zeros (size (x));
 
   # If any of the argument is single, also the output should be
 
-  if (strcmpi (class (y), "single") || strcmpi (class (a), "single") || strcmpi (class (b), "single"))
+  if ((strcmpi (class (y), "single")) || (strcmpi (class (a), "single")) || (strcmpi (class (b), "single")))
     a = single (a);
     b = single (b);
     x = single (x);
     y = single (y);
   endif
 
   # In the following, we use the fact that the continued fraction we will
-  # use is more efficient when x <= a / (a+b).
+  # use is more efficient when x <= a / (a + b).
   # Moreover, to compute the upper version, which is defined as
   # I_x(a,b,"upper") = 1 - I_x(a,b) we used the property
   # I_x(a,b) + I_(1-x) (b,a) = 1.
 
   if (strcmpi (tail, "upper"))
-    flag = (x < a./(a+b));
-    x(!flag) = 1 - x(!flag);
-    [a(!flag), b(!flag)] = deal (b(!flag), a(!flag));
+    fflag = (x < (a ./ (a + b)));
+    x(! fflag) = 1 - x(! fflag);
+    [a(! fflag), b(! fflag)] = deal (b(! fflag), a(! fflag));
   elseif (strcmpi (tail, "lower"))
-    flag = (x > a./(a+b));
-    x (flag) = 1 - x(flag);
-    [a(flag), b(flag)] = deal (b(flag), a(flag));
+    fflag = (x > a./(a+b));
+    x (fflag) = 1 - x(fflag);
+    [a(fflag), b(fflag)] = deal (b(fflag), a(fflag));
   else
-    error ("betainc: invalid value for flag")
+    error ("betainc: invalid value for fflag")
   endif
 
   f = zeros (size (x), class (x));
 
   ## Continued fractions: CPVWJ, formula 18.5.20, modified Lentz algorithm
   ## implemented in a separate .cc file. This particular continued fraction
   ## gives (B(a,b) * I_x(a,b)) / (x^a * (1-x)^b).
 
   f = __betainc_lentz__ (x, a, b, strcmpi (class (x), "single"));
 
   # We divide the continued fraction by B(a,b) / (x^a * (1-x)^b)
   # to obtain I_x(a,b).
   y = a .* log (x) + b .* log1p (-x) + gammaln (a + b) - ...
     gammaln (a) - gammaln (b) + log (f);
   y = real (exp (y));
-  y(flag) = 1 - y(flag);
+  y(fflag) = 1 - y(fflag);
   y = reshape (y, sz);
 
 endfunction
 
 ## Tests from betainc.cc
 
 # Double precision
 %!test
diff --git a/scripts/specfun/cosint.m b/scripts/specfun/cosint.m
--- a/scripts/specfun/cosint.m
+++ b/scripts/specfun/cosint.m
@@ -109,17 +109,17 @@ function [y] = cosint (x)
   ii_nw = (real (xx) < 0);
   xx(ii_nw) *= -1;
   yy = -0.5 * (expint (1i * xx) + expint (-1i * xx));
   yy(ii_nw) += 1i * pi;
   yy(ii_sw) = conj (yy(ii_sw));
   y(i_miss & flag_large) = yy;
 
   ## For values small in modulus, use the series expansion (also near (-oo, 0])
-  i_miss = ((i_miss) & (!flag_large));
+  i_miss = ((i_miss) & (! flag_large));
   if (iscomplex (x))
     ## indexing can lose imag part: if it was -0, we could end up on the
     ## wrong right side of the branch cut along the negative real axis.
     xx = complex (real (x)(i_miss), imag (x)(i_miss));
   else
     xx = x(i_miss);
   end
   ssum = - xx .^ 2 / 4; # First term of the series expansion
diff --git a/scripts/specfun/expint.m b/scripts/specfun/expint.m
--- a/scripts/specfun/expint.m
+++ b/scripts/specfun/expint.m
@@ -1,10 +1,10 @@
 ## Copyright (C) 2006-2017 Sylvain Pelissier
-## Copyright (C) 2017 Michele Ginesi
+## Copyright (C) 2018 Michele Ginesi
 ##
 ## This file is part of Octave.
 ##
 ## Octave is free software: you can redistribute it and/or modify it
 ## under the terms of the GNU General Public License as published by
 ## the Free Software Foundation, either version 3 of the License, or
 ## (at your option) any later version.
 ##
@@ -102,87 +102,90 @@ function E1 = expint (x)
     x = double (x);
   endif
 
   sparse_x = issparse (x);
   orig_sz = size (x);
   x = x(:);  # convert to column vector
 
   ## Initialize the result
-  if (isreal (x) && x >= 0)
+  if ((isreal (x)) && (x >= 0))
     E1 = zeros (size (x), class (x));
   else
     E1 = complex (zeros (size (x), class (x)));
   endif
   tol = eps (class (x));
 
   ## Divide the input into 3 regions and apply a different algorithm for each.
-  s_idx = (((real (x) + 19.5).^2 ./ (20.5^2) + imag (x).^2 ./ (10^2)) <= 1) ...
-          | (real (x) < 0 & abs (imag (x)) <= 1e-8);
-  cf_idx = ((((real (x) + 1).^2 ./ (38^2) + imag (x).^2 ./ (40^2)) <= 1) ...
+  s_idx = (((real (x) + 19.5) .^ 2 ./ (20.5 ^ 2) + ...
+          imag (x) .^ 2 ./ (10 ^ 2)) <= 1) ...
+          | (real (x) < 0 & abs (imag (x)) <= 1e-08);
+  cf_idx = ((((real (x) + 1) .^ 2 ./ (38 ^ 2) + ...
+            imag (x) .^ 2 ./ (40 ^ 2)) <= 1) ...
             & (! s_idx)) & (real (x) <= 35);
-  a_idx = ! s_idx & ! cf_idx;
+  a_idx = ((! s_idx) & (! cf_idx));
   x_s  = x(s_idx);
   x_cf = x(cf_idx);
   x_a  = x(a_idx);
 
   ## FIXME: The performance of these routines need improvement.
   ## There are numerous temporary variables created, some of which could
   ## probably be eliminated.
 
   ## Series expansion
   ## Abramowitz, Stegun, "Handbook of Mathematical Functions",
   ## formula 5.1.11, p 229.
   ## FIXME: Why so long?  IEEE double doesn't have this much precision.
   gm = 0.577215664901532860606512090082402431042159335;
-  e1_s = -gm - log (x_s);
-  res = -x_s;
+  e1_s = - gm - log (x_s);
+  res = - x_s;
   ssum = res;
   k = 1;
   fflag = true (size (res));
-  while (k < 1e3 && any (fflag))
+  while ((k < 1e03) && (any (fflag)))
     res_tmp = res(fflag);
     x_s_tmp = x_s(fflag);
     ssum_tmp = ssum(fflag);
-    res_tmp .*= (k * -x_s_tmp/((k + 1)^2));
+    res_tmp .*= (k * (- x_s_tmp) / ((k + 1) ^ 2));
     ssum_tmp += res_tmp;
     k += 1;
     res(fflag) = res_tmp;
     ssum(fflag) = ssum_tmp;
     x_s(fflag) = x_s_tmp;
-    fflag = abs (res) > tol*abs (ssum);
+    fflag = (abs (res) > (tol * abs (ssum)));
   endwhile
   e1_s -= ssum;
 
   ## Continued fraction,
   ## Abramowitz, Stegun, "Handbook of Mathematical Functions",
   ## formula 5.1.22, p 229.
   ## modified Lentz's algorithm, from "Numerical recipes in Fortran 77" p.165.
 
   e1_cf = exp(- x_cf);
   e1_cf .*= __expint_lentz__ (x_cf, strcmpi (class (x_cf), "single"));
 
-  # Remove spurious imaginary part if needed
+  # Remove spurious imaginary part if needed (__expint_lentz__ works
+  # automathically with complex values)
 
   if (isreal (x_cf) && x_cf >= 0)
     e1_cf = real (e1_cf);
   endif
 
   ## Asymptotic series, from N. Bleistein and R.A. Handelsman
   ## "Asymptotic expansion of integrals"
   ## pages 1 -- 4.
   e1_a = exp (-x_a) ./ x_a;
   oldres = ssum = res = ones (size (x_a), class (x_a));
   k = 0;
   fflag = true (size (x_a));
   while (k < 1e3 && any (fflag))
     res_tmp = res(fflag);
     oldres_tmp = res_tmp;
     x_a_tmp = x_a(fflag);
-    res_tmp ./= (-x_a_tmp / (k+1));
+    res_tmp ./= (- x_a_tmp / (k + 1));
     ssum(fflag) += res_tmp;
     k += 1;
     res(fflag) = res_tmp;
     oldres(fflag) = oldres_tmp;
     fflag = abs (x_a) > k;
   endwhile
   e1_a .*= ssum;
 
diff --git a/scripts/specfun/gammainc.m b/scripts/specfun/gammainc.m
--- a/scripts/specfun/gammainc.m
+++ b/scripts/specfun/gammainc.m
@@ -1,12 +1,12 @@
 ## Copyright (C) 2016 Marco Caliari
 ## Copyright (C) 2016 Nir Krakauer
-## Copyright (C) 2017 Michele Ginesi
 ## Copyright (C) 2018 Stefan SchlÃ¶gl
+## Copyright (C) 2018 Michele Ginesi
 ##
 ## This file is part of Octave.
 ##
 ## Octave is free software; you can redistribute it and/or modify it
 ## under the terms of the GNU General Public License as published by
 ## the Free Software Foundation; either version 3 of the License, or
 ## (at your option) any later version.
 ##
@@ -89,41 +89,41 @@
 ## @seealso{gamma, gammainc, gammaln}
 ## @end deftypefn
 
 ## P(a,x) = gamma(a,x)/Gamma(a), upper
 ## 1-P(a,x)=Q(a,x)=Gamma(a,x)/Gamma(a), lower
 
 function y = gammainc (x, a, tail = "lower")
 
-  if (nargin >= 4 || nargin <= 1)
+  if ((nargin >= 4) || (nargin <= 1))
     print_usage ();
   endif
 
   if ((! isscalar (x)) || (! isscalar (a)))
     [err, x, a] = common_size (x, a);
     if (err > 0)
       error ("gammainc: x, a must be of common size or scalars");
     endif
   endif
 
-  if (any (a < 0) || any (imag (a) != 0))
+  if ((any (a < 0)) || (any (imag (a) != 0)))
     error ("gammainc: a must be real and non negative");
   endif
 
   if (any (imag (x) != 0))
     error ("gammainc: x must be real");
   endif
 
   ## Initialize output array.
   if (isinteger (x))
     x = double (x);
   endif
 
-  if (strcmpi (class (a), "single") || strcmpi (class (x), "single"))
+  if ((strcmpi (class (a), "single")) || (strcmpi (class (x), "single")))
     x = single (x);
     a = single (a);
   endif
 
   y = zeros (size (x), class (x));
 
   ## Different x, a combinations are handled by different subfunctions.
   i_done = false (size (x)); # Track which elements have been calculated.
@@ -189,17 +189,17 @@ function y = gammainc (x, a, tail = "low
   endif
 
   ## For a < 2, x < 0, we increment a by 2 and use a recurrence formula after
   ## the computations.
 
   flag_a_small = ((abs (a) < 2) & (abs(a) > 0) & (! i_done) & (x < 0));
   a(flag_a_small) += 2;
 
-  flag_s = (((x + 0.25 < a | x < 0 | a < 5) & (x > -20)) | (abs (x) < 1));
+  flag_s = ((((x + 0.25 < a) | (x < 0) | (a < 5)) & (x > -20)) | (abs (x) < 1));
 
   ## Case 8: x, a relatively small.
   ii = ((! i_done) & flag_s);
   if (any (ii(:)))
     y(ii) = gammainc_s (x(ii), a(ii), tail);
     i_done(ii) = true;
   endif
 
@@ -229,50 +229,50 @@ function y = gammainc (x, a, tail = "low
   endif
 
 endfunction
 
 ## Subfunctions to handle each case:
 
 ## x == 0, a == 0.
 function y = gammainc_00 (tail)
-  if (strcmpi (tail, "upper") || strcmpi (tail, "scaledupper"))
+  if ((strcmpi (tail, "upper")) || (strcmpi (tail, "scaledupper")))
     y = 0;
   else
     y = 1;
   endif
 endfunction
 
 ## x == 0.
 function y = gammainc_x0 (tail)
-  if (strcmpi (tail, "upper") || strcmpi (tail, "scaledlower"))
+  if ((strcmpi (tail, "upper")) || (strcmpi (tail, "scaledlower")))
     y = 1;
   elseif (strcmpi (tail, "lower"))
     y = 0;
   else
     y = Inf;
   endif
 endfunction
 
 ## x == Inf.
 function y = gammainc_x_inf (tail)
   if (strcmpi (tail, "lower"))
     y = 1;
-  elseif (strcmpi (tail, "upper") || strcmpi (tail, "scaledupper"))
+  elseif ((strcmpi (tail, "upper")) || (strcmpi (tail, "scaledupper")))
     y = 0;
   else
     y = Inf;
   endif
 endfunction
 
 ## a == Inf.
 function y = gammainc_a_inf (tail)
   if (strcmpi (tail, "lower"))
     y = 0;
-  elseif (strcmpi (tail, "upper") || strcmpi (tail, "scaledlower"))
+  elseif ((strcmpi (tail, "upper")) || (strcmpi (tail, "scaledlower")))
     y = 1;
   else
     y = Inf;
   endif
 endfunction
 
 ## a == 0.
 function y = gammainc_a0 (x, tail)
@@ -324,27 +324,27 @@ function y = gammainc_an (x, a, tail)
     y = (1 - exp (-x) .* y) ./ D(x, a);
   endif
 endfunction
 
 ## x + 0.25 < a | x < 0 | x not real | abs(x) < 1 | a < 5.
 ## Numerical Recipes in Fortran 77 (6.2.5)
 ## series
 function y = gammainc_s (x, a, tail)
-  if (strcmpi (tail, "scaledlower") || strcmpi (tail, "scaledupper"))
+  if ((strcmpi (tail, "scaledlower")) || (strcmpi (tail, "scaledupper")))
     y = ones (size (x), class (x));
     term = x ./ (a + 1);
   else
     ## Of course it is possible to scale at the end, but some tests fail.
     ## And try gammainc (1,1000), it take 0 iterations if you scale now.
     y = D (x,a);
     term = y .* x ./ (a + 1);
   endif
   n = 1;
-  while (any (abs (term(:)) > abs (y(:)) * eps))
+  while ((any (abs (term(:))) > (abs (y(:)) * eps)))
     ## y can be zero from the beginning (gammainc (1,1000))
     jj = abs (term) > abs (y) * eps;
     n += 1;
     y(jj) += term(jj);
     term(jj) .*= x(jj) ./ (a(jj) + n);
   endwhile
   if (strcmpi (tail, "upper"))
     y = 1 - y;
diff --git a/scripts/specfun/sinint.m b/scripts/specfun/sinint.m
--- a/scripts/specfun/sinint.m
+++ b/scripts/specfun/sinint.m
@@ -79,17 +79,17 @@ function [y] = sinint (x)
   xx(ii_conj) = conj (xx(ii_conj));
   yy = -0.5i * (expint (1i * xx) - expint (-1i * xx)) + pi / 2;
   yy(ii_neg) *= -1;
   yy(ii_conj) = conj (yy(ii_conj));
   y(i_miss & flag_large) = yy;
 
   ## For values small in modulus we use the series expansion
 
-  i_miss = ((i_miss) & (!flag_large));
+  i_miss = ((i_miss) & (! flag_large));
   xx = x(i_miss);
   ssum = xx; # First term of the series expansion
   yy = ssum;
   flag_sum = true (nnz (i_miss), 1);
   it = 0;
   maxit = 300;
   while ((any (flag_sum)) && (it < maxit));
     ssum .*= - xx .^ 2 * (2 * it + 1) / ((2 * it + 3) ^ 2 * (2 * it + 2));
