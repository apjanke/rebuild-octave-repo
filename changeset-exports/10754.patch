# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1277453966 -7200
#      Fri Jun 25 10:19:26 2010 +0200
# Node ID 92eb5fb58ebc1701ea7dcaac38298d285206b432
# Parent  bee1b1a2e29a1d1cb10ddcda4feef323edd2bf26
fix resize with structs

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,13 @@
+2010-06-25  Jaroslav Hajek  <highegg@gmail.com>
+
+	* ov-struct.h (octave_scalar_struct::resize, octave_struct::resize):
+	Don't ignore fill argument.
+
 2010-06-25  Jaroslav Hajek  <highegg@gmail.com>
 
 	* oct-map.h (octave_map::octave_map (const dim_vector&, const
 	octave_fields&)): New internal ctor.
 
 	* oct-map.cc (octave_map::assign): Handle no fields case.
 
 2010-06-25  Jaroslav Hajek  <highegg@gmail.com>
diff --git a/src/ov-struct.cc b/src/ov-struct.cc
--- a/src/ov-struct.cc
+++ b/src/ov-struct.cc
@@ -550,16 +550,18 @@ octave_struct::subsasgn (const std::stri
 
         default:
           panic_impossible ();
         }
     }
   else
     gripe_failed_assignment ();
 
+  retval.maybe_mutate ();
+
   return retval;
 }
 
 octave_value
 octave_struct::do_index_op (const octave_value_list& idx, bool resize_ok)
 {
   // octave_map handles indexing itself.
   return map.index (idx, resize_ok);
diff --git a/src/ov-struct.h b/src/ov-struct.h
--- a/src/ov-struct.h
+++ b/src/ov-struct.h
@@ -110,18 +110,18 @@ public:
     return map.numel ();
   }
 
   octave_idx_type nfields (void) const { return map.nfields (); }
 
   octave_value reshape (const dim_vector& new_dims) const
     { return map.reshape (new_dims); }
 
-  octave_value resize (const dim_vector& dv, bool = false) const
-    { octave_map tmap = map; tmap.resize (dv); return tmap; }
+  octave_value resize (const dim_vector& dv, bool fill = false) const
+    { octave_map tmap = map; tmap.resize (dv, fill); return tmap; }
 
   bool is_defined (void) const { return true; }
 
   bool is_constant (void) const { return true; }
 
   bool is_map (void) const { return true; }
 
   builtin_type_t builtin_type (void) const { return btyp_struct; }
@@ -223,18 +223,18 @@ public:
     return 1;
   }
 
   octave_idx_type nfields (void) const { return map.nfields (); }
 
   octave_value reshape (const dim_vector& new_dims) const
     { return octave_map (map).reshape (new_dims); }
 
-  octave_value resize (const dim_vector& dv, bool = false) const
-    { octave_map tmap = map; tmap.resize (dv); return tmap; }
+  octave_value resize (const dim_vector& dv, bool fill = false) const
+    { octave_map tmap = map; tmap.resize (dv, fill); return tmap; }
 
   bool is_defined (void) const { return true; }
 
   bool is_constant (void) const { return true; }
 
   bool is_map (void) const { return true; }
 
   builtin_type_t builtin_type (void) const { return btyp_struct; }
diff --git a/src/ov.cc b/src/ov.cc
--- a/src/ov.cc
+++ b/src/ov.cc
@@ -2588,28 +2588,28 @@ octave_value::empty_conv (const std::str
 
   if (type.length () > 0)
     {
       switch (type[0])
         {
         case '(':
           {
             if (type.length () > 1 && type[1] == '.')
-              retval = Octave_map ();
+              retval = octave_map ();
             else
               retval = octave_value (rhs.empty_clone ());
           }
           break;
 
         case '{':
           retval = Cell ();
           break;
 
         case '.':
-          retval = Octave_map ();
+          retval = octave_scalar_map ();
           break;
 
         default:
           panic_impossible ();
         }
     }
   else
     retval = octave_value (rhs.empty_clone ());
