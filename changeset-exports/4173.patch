# HG changeset patch
# User jwe
# Date 1037142341 0
#      Tue Nov 12 23:05:41 2002 +0000
# Node ID 2aea727f516f1c9b5795f706483aff07fe9d3629
# Parent  2e94b2abfe6de3ab9a80a8e6d29a6196dacda2ab
[project @ 2002-11-12 23:05:40 by jwe]

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,10 +1,21 @@
 2002-11-12  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
+	* pt-jump.h, pt-jump.cc (tree_break_expression,
+	tree_continue_expression, tree_return_expression): Rename from
+	tree_break_command, tree_continue_command, tree_return_command.
+	Implement as expressions that return TRUE instead of commands.
+	Change all uses.
+	* parse.y (make_break_expression, make_continue_expression,
+	make_return_expression): Rename from make_break_command,
+	make_continue_command, make_return_command.  Change all uses.
+	(jump_expr): Rename from jump_command, type is now expression.
+	Use in simple_expr, not command.	
+
 	* toplev.cc (octave_initialized): New global variable.
 	(main_loop): Set it to true here.
 	* sighandlers.cc (sigint_handler): Exit immediately if we have not
 	finished init process.
 
 	* load-save.cc (extract_keyword): Return std::string, not char *.
 	Change all uses.
 	(read_ascii_data): Likewise.
diff --git a/src/ov-usr-fcn.cc b/src/ov-usr-fcn.cc
--- a/src/ov-usr-fcn.cc
+++ b/src/ov-usr-fcn.cc
@@ -461,21 +461,21 @@ octave_user_function::do_multi_index_op 
     octave_value last_computed_value;
 
     if (! tmp.empty ())
       last_computed_value = tmp(0);
 
     if (echo_commands)
       print_code_function_trailer ();
 
-    if (tree_return_command::returning)
-      tree_return_command::returning = 0;
+    if (tree_return_expression::returning)
+      tree_return_expression::returning = 0;
 
-    if (tree_break_command::breaking)
-      tree_break_command::breaking--;
+    if (tree_break_expression::breaking)
+      tree_break_expression::breaking--;
 
     if (error_state)
       {
 	traceback_error ();
 	goto abort;
       }
     
     // Copy return values out.
diff --git a/src/parse.y b/src/parse.y
--- a/src/parse.y
+++ b/src/parse.y
@@ -214,27 +214,27 @@ make_do_until_command (token *do_tok, tr
 		       tree_expression *expr, octave_comment_list *lc);
 
 // Build a for command.
 static tree_command *
 make_for_command (token *for_tok, tree_argument_list *lhs,
 		  tree_expression *expr, tree_statement_list *body,
 		  token *end_tok, octave_comment_list *lc);
 
-// Build a break command.
-static tree_command *
-make_break_command (token *break_tok);
-
-// Build a continue command.
-static tree_command *
-make_continue_command (token *continue_tok);
-
-// Build a return command.
-static tree_command *
-make_return_command (token *return_tok);
+// Build a break expression.
+static tree_expression *
+make_break_expression (token *break_tok);
+
+// Build a continue expression.
+static tree_expression *
+make_continue_expression (token *continue_tok);
+
+// Build a return expression.
+static tree_expression *
+make_return_expression (token *return_tok);
 
 // Start an if command.
 static tree_if_command_list *
 start_if_command (tree_expression *expr, tree_statement_list *list);
 
 // Finish an if command.
 static tree_if_command *
 finish_if_command (token *if_tok, tree_if_command_list *list,
@@ -413,28 +413,29 @@ set_stmt_print_flag (tree_statement_list
 // Nonterminals we construct.
 %type <comment_type> stash_comment function_beg
 %type <sep_type> sep_no_nl opt_sep_no_nl sep opt_sep
 %type <tree_type> input
 %type <tree_constant_type> constant magic_colon
 %type <tree_matrix_type> matrix_rows matrix_rows1
 %type <tree_cell_type> cell_rows cell_rows1
 %type <tree_expression_type> title matrix cell
-%type <tree_expression_type> primary_expr postfix_expr prefix_expr binary_expr
-%type <tree_expression_type> simple_expr colon_expr assign_expr expression
+%type <tree_expression_type> primary_expr postfix_expr prefix_expr
+%type <tree_expression_type> binary_expr simple_expr colon_expr
+%type <tree_expression_type> assign_expr jump_expr expression
 %type <tree_identifier_type> identifier
 %type <octave_user_function_type> function1 function2 function3
 %type <tree_index_expression_type> word_list_cmd
 %type <tree_colon_expression_type> colon_expr1
 %type <tree_argument_list_type> arg_list word_list assign_lhs
 %type <tree_argument_list_type> cell_or_matrix_row
 %type <tree_parameter_list_type> param_list param_list1
 %type <tree_parameter_list_type> return_list return_list1
 %type <tree_command_type> command select_command loop_command
-%type <tree_command_type> jump_command except_command function
+%type <tree_command_type> except_command function
 %type <tree_if_command_type> if_command
 %type <tree_if_clause_type> elseif_clause else_clause
 %type <tree_if_command_list_type> if_cmd_list1 if_cmd_list
 %type <tree_switch_command_type> switch_command
 %type <tree_switch_case_type> switch_case default_case
 %type <tree_switch_case_list_type> case_list1 case_list
 %type <tree_decl_elt_type> decl2
 %type <tree_decl_init_list_type> decl1
@@ -781,16 +782,18 @@ colon_expr1	: prefix_expr
 		  {
 		    if (! ($$ = $1->append ($3)))
 		      ABORT_PARSE;
 		  }
 		;
 
 simple_expr	: colon_expr
 		  { $$ = $1; }
+		| jump_expr
+		  { $$ = $1; }
 		| simple_expr LSHIFT simple_expr
 		  { $$ = make_binary_op (LSHIFT, $1, $2, $3); }
 		| simple_expr RSHIFT simple_expr
 		  { $$ = make_binary_op (RSHIFT, $1, $2, $3); }
 		| simple_expr EXPR_LT simple_expr
 		  { $$ = make_binary_op (EXPR_LT, $1, $2, $3); }
 		| simple_expr EXPR_LE simple_expr
 		  { $$ = make_binary_op (EXPR_LE, $1, $2, $3); }
@@ -886,18 +889,16 @@ expression	: simple_expr
 // ================================================
 
 command		: declaration
 		  { $$ = $1; }
 		| select_command
 		  { $$ = $1; }
 		| loop_command
 		  { $$ = $1; }
-		| jump_command
-		  { $$ = $1; }
 		| except_command
 		  { $$ = $1; }
 		| function
 		  { $$ = $1; }
 		| plot_command
 		  { $$ = $1; }
 		;
 
@@ -1036,29 +1037,29 @@ loop_command	: WHILE stash_comment expre
 		      ABORT_PARSE;
 		  }
 		;
 
 // =======
 // Jumping
 // =======
 
-jump_command	: BREAK
+jump_expr	: BREAK
 		  {
-		    if (! ($$ = make_break_command ($1)))
+		    if (! ($$ = make_break_expression ($1)))
 		      ABORT_PARSE;
 		  }
 		| CONTINUE
 		  {
-		    if (! ($$ = make_continue_command ($1)))
+		    if (! ($$ = make_continue_expression ($1)))
 		      ABORT_PARSE;
 		  }
 		| FUNC_RET
 		  {
-		    if (! ($$ = make_return_command ($1)))
+		    if (! ($$ = make_return_expression ($1)))
 		      ABORT_PARSE;
 		  }
 		;
 
 // ==========
 // Exceptions
 // ==========
 
@@ -2238,69 +2239,69 @@ make_for_command (token *for_tok, tree_a
       else
 	retval = new tree_complex_for_command (lhs, expr, body,
 					       lc, tc, l, c);
     }
 
   return retval;
 }
 
-// Build a break command.
-
-static tree_command *
-make_break_command (token *break_tok)
+// Build a break expression.
+
+static tree_expression *
+make_break_expression (token *break_tok)
 {
-  tree_command *retval = 0;
+  tree_expression *retval = 0;
 
   int l = break_tok->line ();
   int c = break_tok->column ();
 
   if (lexer_flags.looping || lexer_flags.defining_func
       || reading_script_file || evaluating_function_body
       || evaluating_looping_command)
-    retval = new tree_break_command (l, c);
+    retval = new tree_break_expression (l, c);
   else
-    retval = new tree_no_op_command ("break", l, c);
+    yyerror ("invalid use of break");
 
   return retval;
 }
 
-// Build a continue command.
-
-static tree_command *
-make_continue_command (token *continue_tok)
+// Build a continue expression.
+
+static tree_expression *
+make_continue_expression (token *continue_tok)
 {
-  tree_command *retval = 0;
+  tree_expression *retval = 0;
 
   int l = continue_tok->line ();
   int c = continue_tok->column ();
 
   if (lexer_flags.looping || evaluating_looping_command)
-    retval = new tree_continue_command (l, c);
+    retval = new tree_continue_expression (l, c);
   else
-    retval = new tree_no_op_command ("continue", l, c);
+    yyerror ("invalid use of continue");
 
   return retval;
 }
 
-// Build a return command.
-
-static tree_command *
-make_return_command (token *return_tok)
+// Build a return expression.
+
+static tree_expression *
+make_return_expression (token *return_tok)
 {
-  tree_command *retval = 0;
+  tree_expression *retval = 0;
 
   int l = return_tok->line ();
   int c = return_tok->column ();
 
   if (lexer_flags.defining_func || reading_script_file
       || evaluating_function_body)
-    retval = new tree_return_command (l, c);
+    retval = new tree_return_expression (l, c);
   else
-    retval = new tree_no_op_command ("return", l, c);
+    yyerror ("invalid use of return");
 
   return retval;
 }
 
 // Start an if command.
 
 static tree_if_command_list *
 start_if_command (tree_expression *expr, tree_statement_list *list)
@@ -2860,24 +2861,24 @@ parse_and_execute (FILE *f)
 	      global_command->eval ();
 
 	      delete global_command;
 
 	      global_command = 0;
 
 	      OCTAVE_QUIT;
 
-	      bool quit = (tree_return_command::returning
-			   || tree_break_command::breaking);
-
-	      if (tree_return_command::returning)
-		tree_return_command::returning = 0;
-
-	      if (tree_break_command::breaking)
-		tree_break_command::breaking--;
+	      bool quit = (tree_return_expression::returning
+			   || tree_break_expression::breaking);
+
+	      if (tree_return_expression::returning)
+		tree_return_expression::returning = 0;
+
+	      if (tree_break_expression::breaking)
+		tree_break_expression::breaking--;
 
 	      if (error_state)
 		{
 		  error ("near line %d of file `%s'", input_line_number,
 			 curr_fcn_file_full_name.c_str ());
 
 		  break;
 		}
@@ -3553,19 +3554,19 @@ eval_string (const std::string& s, bool 
 	    {
 	      retval = command->eval (silent, nargout);
 
 	      delete command;
 
 	      command = 0;
 
 	      if (error_state
-		  || tree_return_command::returning
-		  || tree_break_command::breaking
-		  || tree_continue_command::continuing)
+		  || tree_return_expression::returning
+		  || tree_break_expression::breaking
+		  || tree_continue_expression::continuing)
 		break;
 	    }
 	  else if (parser_end_of_input)
 	    break;
         }
     }
   while (parse_status == 0);
 
diff --git a/src/pt-bp.cc b/src/pt-bp.cc
--- a/src/pt-bp.cc
+++ b/src/pt-bp.cc
@@ -131,17 +131,17 @@ tree_breakpoint::visit_binary_expression
   if (lhs && lhs->line () >= line)
     lhs->accept (*this);
 
   if (rhs && rhs->line () >= line)
     rhs->accept (*this);  
 }
 
 void 
-tree_breakpoint::visit_break_command (tree_break_command& cmd)
+tree_breakpoint::visit_break_expression (tree_break_expression& cmd)
 {
   if (found)
     return;
 
   if (cmd.line () >= line)
     take_action (cmd);
 }
 
@@ -166,17 +166,17 @@ tree_breakpoint::visit_colon_expression 
 
   tree_expression *limit = expr.limit (); 
 
   if (limit)
     limit->accept (*this);
 }
 
 void 
-tree_breakpoint::visit_continue_command (tree_continue_command& cmd)
+tree_breakpoint::visit_continue_expression (tree_continue_expression& cmd)
 {
   if (found)
     return;
 
   if (cmd.line () >= line)
     take_action (cmd);
 }
 
@@ -505,17 +505,17 @@ tree_breakpoint::visit_prefix_expression
 
   tree_expression *e = expr.operand ();
 
   if (e)
     e->accept (*this);    
 }
 
 void 
-tree_breakpoint::visit_return_command (tree_return_command& cmd)
+tree_breakpoint::visit_return_expression (tree_return_expression& cmd)
 {
   if (found)
     return;
 
   if (cmd.line () >= line)
     take_action (cmd);
 }
 
diff --git a/src/pt-bp.h b/src/pt-bp.h
--- a/src/pt-bp.h
+++ b/src/pt-bp.h
@@ -48,21 +48,21 @@ tree_breakpoint : public tree_walker
   ~tree_breakpoint (void) { }
 
   bool success (void) const { return found; }
 
   void visit_argument_list (tree_argument_list&);
 
   void visit_binary_expression (tree_binary_expression&);
 
-  void visit_break_command (tree_break_command&);
+  void visit_break_expression (tree_break_expression&);
 
   void visit_colon_expression (tree_colon_expression&);
 
-  void visit_continue_command (tree_continue_command&);
+  void visit_continue_expression (tree_continue_expression&);
 
   void visit_decl_command (tree_decl_command&);
 
   void visit_decl_elt (tree_decl_elt&);
 
   void visit_decl_init_list (tree_decl_init_list&);  
 
   void visit_while_command (tree_while_command&);
@@ -106,17 +106,17 @@ tree_breakpoint : public tree_walker
   void visit_plot_limits (plot_limits&);
 
   void visit_plot_range (plot_range&);
 
   void visit_postfix_expression (tree_postfix_expression&);
 
   void visit_prefix_expression (tree_prefix_expression&);
 
-  void visit_return_command (tree_return_command&);
+  void visit_return_expression (tree_return_expression&);
 
   void visit_return_list (tree_return_list&);
 
   void visit_simple_assignment (tree_simple_assignment&);
 
   void visit_statement (tree_statement&);
 
   void visit_statement_list (tree_statement_list&);
diff --git a/src/pt-check.cc b/src/pt-check.cc
--- a/src/pt-check.cc
+++ b/src/pt-check.cc
@@ -62,17 +62,17 @@ tree_checker::visit_binary_expression (t
 
   tree_expression *op2 = expr.rhs ();
 
   if (op2)
     op2->accept (*this);
 }
 
 void
-tree_checker::visit_break_command (tree_break_command&)
+tree_checker::visit_break_expression (tree_break_expression&)
 {
 }
 
 void
 tree_checker::visit_colon_expression (tree_colon_expression& expr)
 {
   tree_expression *op1 = expr.base ();
 
@@ -86,17 +86,17 @@ tree_checker::visit_colon_expression (tr
 
   tree_expression *op2 = expr.limit ();
 
   if (op2)
     op2->accept (*this);
 }
 
 void
-tree_checker::visit_continue_command (tree_continue_command&)
+tree_checker::visit_continue_expression (tree_continue_expression&)
 {
 }
 
 void
 tree_checker::visit_decl_command (tree_decl_command& cmd)
 {
   tree_decl_init_list *init_list = cmd.initializer_list ();
 
@@ -386,17 +386,17 @@ tree_checker::visit_prefix_expression (t
 {
   tree_expression *e = expr.operand ();
 
   if (e)
     e->accept (*this);
 }
 
 void
-tree_checker::visit_return_command (tree_return_command&)
+tree_checker::visit_return_expression (tree_return_expression&)
 {
 }
 
 void
 tree_checker::visit_return_list (tree_return_list& lst)
 {
   Pix p = lst.first ();
 
diff --git a/src/pt-check.h b/src/pt-check.h
--- a/src/pt-check.h
+++ b/src/pt-check.h
@@ -40,21 +40,21 @@ public:
     : do_lvalue_check (false) { }
 
   ~tree_checker (void) { }
 
   void visit_argument_list (tree_argument_list&);
 
   void visit_binary_expression (tree_binary_expression&);
 
-  void visit_break_command (tree_break_command&);
+  void visit_break_expression (tree_break_expression&);
 
   void visit_colon_expression (tree_colon_expression&);
 
-  void visit_continue_command (tree_continue_command&);
+  void visit_continue_expression(tree_continue_expression&);
 
   void visit_decl_command (tree_decl_command&);
 
   void visit_decl_elt (tree_decl_elt&);
 
   void visit_decl_init_list (tree_decl_init_list&);
 
   void visit_simple_for_command (tree_simple_for_command&);
@@ -88,17 +88,17 @@ public:
   void visit_plot_limits (plot_limits&);
 
   void visit_plot_range (plot_range&);
 
   void visit_postfix_expression (tree_postfix_expression&);
 
   void visit_prefix_expression (tree_prefix_expression&);
 
-  void visit_return_command (tree_return_command&);
+  void visit_return_expression (tree_return_expression&);
 
   void visit_return_list (tree_return_list&);
 
   void visit_simple_assignment (tree_simple_assignment&);
 
   void visit_statement (tree_statement&);
 
   void visit_statement_list (tree_statement_list&);
diff --git a/src/pt-except.cc b/src/pt-except.cc
--- a/src/pt-except.cc
+++ b/src/pt-except.cc
@@ -144,21 +144,21 @@ do_unwind_protect_cleanup_code (void *pt
   unwind_protect_int (error_state);
   error_state = 0;
 
   // Similarly, if we have seen a return or break statement, allow all
   // the cleanup code to run before returning or handling the break.
   // We don't have to worry about continue statements because they can
   // only occur in loops.
 
-  unwind_protect_int (tree_return_command::returning);
-  tree_return_command::returning = 0;
+  unwind_protect_int (tree_return_expression::returning);
+  tree_return_expression::returning = 0;
 
-  unwind_protect_int (tree_break_command::breaking);
-  tree_break_command::breaking = 0;
+  unwind_protect_int (tree_break_expression::breaking);
+  tree_break_expression::breaking = 0;
 
   if (list)
     list->eval ();
 
   // The unwind_protects are popped off the stack in the reverse of
   // the order they are pushed on.
 
   // XXX FIXME XXX -- these statements say that if we see a break or
@@ -180,17 +180,17 @@ do_unwind_protect_cleanup_code (void *pt
   //   endfunction
   //
   // If we reset the value of the breaking flag, both the returning
   // flag and the breaking flag will be set, and we shouldn't have
   // both.  So, use the most recent one.  If there is no return or
   // break in the cleanup block, the values should be reset to
   // whatever they were when the cleanup block was entered.
 
-  if (tree_break_command::breaking || tree_return_command::returning)
+  if (tree_break_expression::breaking || tree_return_expression::returning)
     {
       unwind_protect::discard ();
       unwind_protect::discard ();
     }
   else
     {
       unwind_protect::run ();
       unwind_protect::run ();
diff --git a/src/pt-jump.cc b/src/pt-jump.cc
--- a/src/pt-jump.cc
+++ b/src/pt-jump.cc
@@ -34,72 +34,78 @@ Software Foundation, 59 Temple Place - S
 #include "pt-jump.h"
 #include "pt-walk.h"
 
 class octave_value_list;
 
 // Break.
 
 // Nonzero means we're breaking out of a loop or function body.
-int tree_break_command::breaking = 0;
+int tree_break_expression::breaking = 0;
 
-void
-tree_break_command::eval (void)
+octave_value
+tree_break_expression::rvalue (void)
 {
   // Even if we have an error we should still enter debug mode.
   MAYBE_DO_BREAKPOINT;
 
   if (! error_state)
     breaking = 1;
+
+  return true;
 }
 
 void
-tree_break_command::accept (tree_walker& tw)
+tree_break_expression::accept (tree_walker& tw)
 {
-  tw.visit_break_command (*this);
+  tw.visit_break_expression (*this);
 }
 
 // Continue.
 
 // Nonzero means we're jumping to the end of a loop.
-int tree_continue_command::continuing = 0;
+int tree_continue_expression::continuing = 0;
 
-void
-tree_continue_command::eval (void)
+octave_value
+tree_continue_expression::rvalue (void)
 {
   MAYBE_DO_BREAKPOINT;
 
   if (! error_state)
     continuing = 1;
+
+  return true;
 }
 
 void
-tree_continue_command::accept (tree_walker& tw)
+tree_continue_expression::accept (tree_walker& tw)
 {
-  tw.visit_continue_command (*this);
+  tw.visit_continue_expression (*this);
 }
 
 // Return.
 
 // Nonzero means we're returning from a function.  Global because it
 // is also needed in tree-expr.cc.
-int tree_return_command::returning = 0;
+int tree_return_expression::returning = 0;
 
-void
-tree_return_command::eval (void)
+octave_value
+tree_return_expression::rvalue (void)
 {
   MAYBE_DO_BREAKPOINT;
 
   if (! error_state)
     returning = 1;
+
+  return true;
 }
 
 void
-tree_return_command::accept (tree_walker& tw)
+tree_return_expression::accept (tree_walker& tw)
 {
-  tw.visit_return_command (*this);
+  tw.visit_return_expression (*this);
 }
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
diff --git a/src/pt-jump.h b/src/pt-jump.h
--- a/src/pt-jump.h
+++ b/src/pt-jump.h
@@ -24,97 +24,109 @@ Software Foundation, 59 Temple Place - S
 #define octave_tree_jump_h 1
 
 #if defined (__GNUG__) && ! defined (NO_PRAGMA_INTERFACE_IMPLEMENTATION)
 #pragma interface
 #endif
 
 class tree_walker;
 
-#include "pt-cmd.h"
+#include "pt-exp.h"
 
 // Break.
 
 class
-tree_break_command : public tree_command
+tree_break_expression : public tree_expression
 {
 public:
 
-  tree_break_command (int l = -1, int c = -1)
-    : tree_command (l, c) { }
+  tree_break_expression (int l = -1, int c = -1)
+    : tree_expression (l, c) { }
+
+  ~tree_break_expression (void) { }
 
-  ~tree_break_command (void) { }
+  bool rvalue_ok (void) { return true; }
 
-  void eval (void);
+  octave_value rvalue (void);
+
+  octave_value_list rvalue (int nargout) { return rvalue (); }
 
   void accept (tree_walker& tw);
 
   static int breaking;
 
 private:
 
   // No copying!
 
-  tree_break_command (const tree_break_command&);
+  tree_break_expression (const tree_break_expression&);
 
-  tree_break_command& operator = (const tree_break_command&);
+  tree_break_expression& operator = (const tree_break_expression&);
 };
 
 // Continue.
 
 class
-tree_continue_command : public tree_command
+tree_continue_expression : public tree_expression
 {
 public:
 
-  tree_continue_command (int l = -1, int c = -1)
-    : tree_command (l, c) { }
+  tree_continue_expression (int l = -1, int c = -1)
+    : tree_expression (l, c) { }
+
+  ~tree_continue_expression (void) { }
 
-  ~tree_continue_command (void) { }
+  bool rvalue_ok (void) { return true; }
 
-  void eval (void);
+  octave_value rvalue (void);
+
+  octave_value_list rvalue (int nargout) { return rvalue (); }
 
   void accept (tree_walker& tw);
 
   static int continuing;
 
 private:
 
   // No copying!
 
-  tree_continue_command (const tree_continue_command&);
+  tree_continue_expression (const tree_continue_expression&);
 
-  tree_continue_command& operator = (const tree_continue_command&);
+  tree_continue_expression& operator = (const tree_continue_expression&);
 };
 
 // Return.
 
 class
-tree_return_command : public tree_command
+tree_return_expression : public tree_expression
 {
 public:
 
-  tree_return_command (int l = -1, int c = -1)
-    : tree_command (l, c) { }
+  tree_return_expression (int l = -1, int c = -1)
+    : tree_expression (l, c) { }
+
+  ~tree_return_expression (void) { }
 
-  ~tree_return_command (void) { }
+  bool rvalue_ok (void) { return true; }
 
-  void eval (void);
+  octave_value rvalue (void);
+
+  octave_value_list rvalue (int nargout) { return rvalue (); }
 
   void accept (tree_walker& tw);
 
   static int returning;
 
 private:
 
   // No copying!
 
-  tree_return_command (const tree_return_command&);
+  tree_return_expression (const tree_return_expression&);
 
-  tree_return_command& operator = (const tree_return_command&);
+  tree_return_expression& operator = (const tree_return_expression&);
 };
 
 #endif
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
diff --git a/src/pt-loop.cc b/src/pt-loop.cc
--- a/src/pt-loop.cc
+++ b/src/pt-loop.cc
@@ -51,26 +51,26 @@ bool evaluating_looping_command = false;
 // Decide if it's time to quit a for or while loop.
 static inline bool
 quit_loop_now (void)
 {
   OCTAVE_QUIT;
 
   // Maybe handle `continue N' someday...
 
-  if (tree_continue_command::continuing)
-    tree_continue_command::continuing--;
+  if (tree_continue_expression::continuing)
+    tree_continue_expression::continuing--;
 
   bool quit = (error_state
-	       || tree_return_command::returning
-	       || tree_break_command::breaking
-	       || tree_continue_command::continuing);
+	       || tree_return_expression::returning
+	       || tree_break_expression::breaking
+	       || tree_continue_expression::continuing);
 
-  if (tree_break_command::breaking)
-    tree_break_command::breaking--;
+  if (tree_break_expression::breaking)
+    tree_break_expression::breaking--;
 
   return quit;
 }
 
 // While.
 
 tree_while_command::~tree_while_command (void)
 {
diff --git a/src/pt-pr-code.cc b/src/pt-pr-code.cc
--- a/src/pt-pr-code.cc
+++ b/src/pt-pr-code.cc
@@ -77,17 +77,17 @@ tree_print_code::visit_binary_expression
 
   if (op2)
     op2->accept (*this);
 
   print_parens (expr, ")");
 }
 
 void
-tree_print_code::visit_break_command (tree_break_command&)
+tree_print_code::visit_break_expression (tree_break_expression&)
 {
   indent ();
 
   os << "break";
 }
 
 void
 tree_print_code::visit_colon_expression (tree_colon_expression& expr)
@@ -118,17 +118,17 @@ tree_print_code::visit_colon_expression 
       os << ":";
       op2->accept (*this);
     }
 
   print_parens (expr, ")");
 }
 
 void
-tree_print_code::visit_continue_command (tree_continue_command&)
+tree_print_code::visit_continue_expression (tree_continue_expression&)
 {
   indent ();
 
   os << "continue";
 }
 
 void
 tree_print_code::visit_decl_command (tree_decl_command& cmd)
@@ -777,17 +777,17 @@ tree_print_code::visit_prefix_expression
 
   if (e)
     e->accept (*this);
 
   print_parens (expr, ")");
 }
 
 void
-tree_print_code::visit_return_command (tree_return_command&)
+tree_print_code::visit_return_expression (tree_return_expression&)
 {
   indent ();
 
   os << "return";
 }
 
 void
 tree_print_code::visit_return_list (tree_return_list& lst)
diff --git a/src/pt-pr-code.h b/src/pt-pr-code.h
--- a/src/pt-pr-code.h
+++ b/src/pt-pr-code.h
@@ -48,21 +48,21 @@ public:
       curr_print_indent_level (0), beginning_of_line (true) { }
 
   ~tree_print_code (void) { }
 
   void visit_argument_list (tree_argument_list&);
 
   void visit_binary_expression (tree_binary_expression&);
 
-  void visit_break_command (tree_break_command&);
+  void visit_break_expression (tree_break_expression&);
 
   void visit_colon_expression (tree_colon_expression&);
 
-  void visit_continue_command (tree_continue_command&);
+  void visit_continue_expression (tree_continue_expression&);
 
   void visit_decl_command (tree_decl_command&);
 
   void visit_decl_elt (tree_decl_elt&);
 
   void visit_decl_init_list (tree_decl_init_list&);
 
   void visit_simple_for_command (tree_simple_for_command&);
@@ -102,17 +102,17 @@ public:
   void visit_plot_limits (plot_limits&);
 
   void visit_plot_range (plot_range&);
 
   void visit_postfix_expression (tree_postfix_expression&);
 
   void visit_prefix_expression (tree_prefix_expression&);
 
-  void visit_return_command (tree_return_command&);
+  void visit_return_expression (tree_return_expression&);
 
   void visit_return_list (tree_return_list&);
 
   void visit_simple_assignment (tree_simple_assignment&);
 
   void visit_statement (tree_statement&);
 
   void visit_statement_list (tree_statement_list&);
diff --git a/src/pt-stmt.cc b/src/pt-stmt.cc
--- a/src/pt-stmt.cc
+++ b/src/pt-stmt.cc
@@ -160,21 +160,21 @@ tree_statement_list::eval (bool silent, 
 	{
 	  OCTAVE_QUIT;
 
 	  retval = elt->eval (silent, nargout, function_body);
 
 	  if (error_state)
 	    break;
 
-	  if (tree_break_command::breaking
-	      || tree_continue_command::continuing)
+	  if (tree_break_expression::breaking
+	      || tree_continue_expression::continuing)
 	    break;
 
-	  if (tree_return_command::returning)
+	  if (tree_return_expression::returning)
 	    break;
 	}
       else
 	error ("invalid statement found in statement list!");
 
 
     }
 
diff --git a/src/pt-walk.h b/src/pt-walk.h
--- a/src/pt-walk.h
+++ b/src/pt-walk.h
@@ -20,19 +20,19 @@ Software Foundation, 59 Temple Place - S
 
 */
 
 #if !defined (octave_tree_walker_h)
 #define octave_tree_walker_h 1
 
 class tree_argument_list;
 class tree_binary_expression;
-class tree_break_command;
+class tree_break_expression;
 class tree_colon_expression;
-class tree_continue_command;
+class tree_continue_expression;
 class tree_decl_command;
 class tree_decl_elt;
 class tree_decl_init_list;
 class tree_simple_for_command;
 class tree_complex_for_command;
 class octave_user_function;
 class tree_identifier;
 class tree_if_clause;
@@ -48,17 +48,17 @@ class tree_multi_assignment;
 class tree_no_op_command;
 class tree_constant;
 class tree_parameter_list;
 class tree_plot_command;
 class plot_limits;
 class plot_range;
 class tree_postfix_expression;
 class tree_prefix_expression;
-class tree_return_command;
+class tree_return_expression;
 class tree_return_list;
 class tree_simple_assignment;
 class tree_statement;
 class tree_statement_list;
 class subplot;
 class subplot_axes;
 class subplot_list;
 class subplot_style;
@@ -75,23 +75,23 @@ public:
 
   virtual void
   visit_argument_list (tree_argument_list&) = 0;
 
   virtual void
   visit_binary_expression (tree_binary_expression&) = 0;
 
   virtual void
-  visit_break_command (tree_break_command&) = 0;
+  visit_break_expression (tree_break_expression&) = 0;
 
   virtual void
   visit_colon_expression (tree_colon_expression&) = 0;
 
   virtual void
-  visit_continue_command (tree_continue_command&) = 0;
+  visit_continue_expression (tree_continue_expression&) = 0;
 
   virtual void
   visit_decl_command (tree_decl_command&) = 0;
 
   virtual void
   visit_decl_elt (tree_decl_elt&) = 0;
 
   virtual void
@@ -159,17 +159,17 @@ public:
 
   virtual void
   visit_postfix_expression (tree_postfix_expression&) = 0;
 
   virtual void
   visit_prefix_expression (tree_prefix_expression&) = 0;
 
   virtual void
-  visit_return_command (tree_return_command&) = 0;
+  visit_return_expression (tree_return_expression&) = 0;
 
   virtual void
   visit_return_list (tree_return_list&) = 0;
 
   virtual void
   visit_simple_assignment (tree_simple_assignment&) = 0;
 
   virtual void
diff --git a/src/toplev.cc b/src/toplev.cc
--- a/src/toplev.cc
+++ b/src/toplev.cc
@@ -135,24 +135,24 @@ main_loop (void)
 		  delete global_command;
 
 		  global_command = 0;
 
 		  OCTAVE_QUIT;
 
 		  if (! (interactive || forced_interactive))
 		    {
-		      bool quit = (tree_return_command::returning
-				   || tree_break_command::breaking);
+		      bool quit = (tree_return_expression::returning
+				   || tree_break_expression::breaking);
 
-		      if (tree_return_command::returning)
-			tree_return_command::returning = 0;
+		      if (tree_return_expression::returning)
+			tree_return_expression::returning = 0;
 
-		      if (tree_break_command::breaking)
-			tree_break_command::breaking--;
+		      if (tree_break_expression::breaking)
+			tree_break_expression::breaking--;
 
 		      if (quit)
 			break;
 		    }
 
 		  if (error_state)
 		    {
 		      if (! (interactive || forced_interactive))
