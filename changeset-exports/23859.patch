# HG changeset patch
# User Pantxo Diribarne <pantxo.diribarne@gmail.com>
# Date 1500584367 -7200
#      Thu Jul 20 22:59:27 2017 +0200
# Node ID 7148b237f94f0944dcd8ddc965f14536a0c5b13c
# Parent  cb825133768911cc2d197db6e4877573b237256a
Fix regression introduced by cset 06805aabbdd1 (bug #50750).

* graphics.in.h (axes::properties::has3Dkids, axes::properties::set_has3Dkids):
  New private attribute and corresponding setter
* graphics.in.h (axes::properties::get_is2D): add bool argument to specify
  whether to include kids in the dimensionality check.  Make use of new
  "has3Dkids" propetrty when necessary.

* graphics.cc (axes::update_axis_limits): Set has3Dkids attribute based on
  Z limits.  Allow zlim to be checked (but unchanged) even when zlimmode is
  manual and add a FIXME note.

* gl2ps-print.cc (gl2ps_renderer::has_2D_axes): New method to check all axes
  are 2D.
* gl2ps-print.cc (gl2ps_renderer::draw): Choose sorting algorithm depending on
  has_2D_axes.

* __opengl_print__.m: Don't check dimensionality here.

* gl-render.cc (opengl_renderer::draw_axes): include children in dimensionality
  check.

diff --git a/libinterp/corefcn/gl-render.cc b/libinterp/corefcn/gl-render.cc
--- a/libinterp/corefcn/gl-render.cc
+++ b/libinterp/corefcn/gl-render.cc
@@ -2103,18 +2103,19 @@ namespace octave
         || x_min < -floatmax || y_min < -floatmax || z_min < -floatmax)
       {
         warning ("opengl_renderer: data values greater than float capacity.  (1) Scale data, or (2) Use gnuplot");
         return;
       }
 
     setup_opengl_transformation (props);
 
-    // For 2D axes, draw from back to front without depth sorting
-    bool is2D = props.get_is2D ();
+    // For 2D axes with only 2D primitives, draw from back to front without 
+    // depth sorting
+    bool is2D = props.get_is2D (true);
     if (is2D)
       glDisable (GL_DEPTH_TEST);
     else
       glEnable (GL_DEPTH_TEST);
 
     draw_axes_planes (props);
 
     if (! is2D || props.layer_is ("bottom"))
diff --git a/libinterp/corefcn/gl2ps-print.cc b/libinterp/corefcn/gl2ps-print.cc
--- a/libinterp/corefcn/gl2ps-print.cc
+++ b/libinterp/corefcn/gl2ps-print.cc
@@ -196,16 +196,45 @@ namespace octave
     int alignment_to_mode (int ha, int va) const;
     FILE *fp;
     caseless_str term;
     double fontsize;
     std::string fontname;
     bool buffer_overflow;
   };
 
+  static bool
+  has_2D_axes (const graphics_handle& h)
+  {
+    bool retval = true;
+    graphics_object go = gh_manager::get_object (h);
+  
+    if (! go.valid_object ())
+      return retval;
+
+    if (go.isa ("figure") || go.isa ("uipanel"))
+      {
+        Matrix  children = go.get ("children").matrix_value ();
+        for (octave_idx_type ii = 0; ii < children.numel (); ii++)
+          {
+            retval = has_2D_axes (graphics_handle (children(ii)));
+            if (! retval)
+              break;
+          }
+      }
+    else if (go.isa ("axes"))
+      {
+        axes::properties& ap
+          = reinterpret_cast<axes::properties&> (go.get_properties ());
+        retval = ap.get_is2D (true);
+      }
+
+    return retval;
+  }
+
   void
   gl2ps_renderer::draw (const graphics_object& go, const std::string& print_cmd)
   {
     static bool in_draw = false;
     static std::string old_print_cmd;
     static GLint buffsize;
 
     if (! in_draw)
@@ -235,20 +264,19 @@ namespace octave
 
         GLint gl2ps_text = 0;
         if (term.find ("notxt") != std::string::npos)
           gl2ps_text = GL2PS_NO_TEXT;
 
         // Default sort order optimizes for 3D plots
         GLint gl2ps_sort = GL2PS_BSP_SORT;
 
-        // For 2D plots we can use a simpler Z-depth sorting algorithm
         // FIXME: gl2ps does not provide a way to change the sorting algorythm
         // on a viewport basis, we thus disable sorting only if all axes are 2D
-        if (term.find ("is2D") != std::string::npos)
+        if (has_2D_axes (go.get ("__myhandle__")))
           gl2ps_sort = GL2PS_NO_SORT;
 
         // Use a temporary file in case an overflow happens
         FILE *tmpf = octave_tmpfile_wrapper ();
 
         if (! tmpf)
           error ("gl2ps_renderer::draw: couldn't open temporary file for printing");
 
diff --git a/libinterp/corefcn/graphics.cc b/libinterp/corefcn/graphics.cc
--- a/libinterp/corefcn/graphics.cc
+++ b/libinterp/corefcn/graphics.cc
@@ -7553,22 +7553,34 @@ axes::update_axis_limits (const std::str
     {
       if (xproperties.zlimmode_is ("auto"))
         {
           limits = xproperties.get_zlim ().matrix_value ();
           FIX_LIMITS;
 
           get_children_limits (min_val, max_val, min_pos, max_neg, kids, 'z');
 
+          xproperties.set_has3Dkids ((max_val - min_val) > 
+                                      std::numeric_limits<double>::epsilon ());
+
           limits = xproperties.get_axis_limits (min_val, max_val,
                                                 min_pos, max_neg,
                                                 xproperties.zscale_is ("log"));
 
           update_type = 'z';
         }
+      else
+        {
+          // FIXME: get_children_limits is only needed here in order to know 
+          // if there are 3D children. Is there a way to avoid this call?
+          get_children_limits (min_val, max_val, min_pos, max_neg, kids, 'z');
+
+          xproperties.set_has3Dkids ((max_val - min_val) > 
+                                      std::numeric_limits<double>::epsilon ());
+        }
     }
   else if (axis_type == "cdata" || axis_type == "climmode"
            || axis_type == "cdatamapping" || axis_type == "climinclude"
            || axis_type == "clim")
     {
       if (xproperties.climmode_is ("auto"))
         {
           limits = xproperties.get_clim ().matrix_value ();
@@ -7722,22 +7734,34 @@ axes::update_axis_limits (const std::str
   else if (axis_type == "zdata" || axis_type == "zscale"
            || axis_type == "zlimmode" || axis_type == "zliminclude"
            || axis_type == "zlim")
     {
       if (xproperties.zlimmode_is ("auto"))
         {
           get_children_limits (min_val, max_val, min_pos, max_neg, kids, 'z');
 
+          xproperties.set_has3Dkids ((max_val - min_val) > 
+                                      std::numeric_limits<double>::epsilon ());
+
           limits = xproperties.get_axis_limits (min_val, max_val,
                                                 min_pos, max_neg,
                                                 xproperties.zscale_is ("log"));
 
           update_type = 'z';
         }
+      else
+        {
+          // FIXME: get_children_limits is only needed here in order to know 
+          // if there are 3D children. Is there a way to avoid this call?
+          get_children_limits (min_val, max_val, min_pos, max_neg, kids, 'z');
+
+          xproperties.set_has3Dkids ((max_val - min_val) > 
+                                      std::numeric_limits<double>::epsilon ());
+        }
     }
   else if (axis_type == "cdata" || axis_type == "climmode"
            || axis_type == "cdatamapping" || axis_type == "climinclude"
            || axis_type == "clim")
     {
       if (xproperties.climmode_is ("auto"))
         {
           get_children_limits (min_val, max_val, min_pos, max_neg, kids, 'c');
diff --git a/libinterp/corefcn/graphics.in.h b/libinterp/corefcn/graphics.in.h
--- a/libinterp/corefcn/graphics.in.h
+++ b/libinterp/corefcn/graphics.in.h
@@ -3478,17 +3478,19 @@ public:
     double get_yticklen (void) const { return yticklen; }
     double get_zticklen (void) const { return zticklen; }
     double get_xtickoffset (void) const { return xtickoffset; }
     double get_ytickoffset (void) const { return ytickoffset; }
     double get_ztickoffset (void) const { return ztickoffset; }
     bool get_x2Dtop (void) const { return x2Dtop; }
     bool get_y2Dright (void) const { return y2Dright; }
     bool get_layer2Dtop (void) const { return layer2Dtop; }
-    bool get_is2D (void) const { return is2D; }
+    bool get_is2D (bool include_kids = false) const
+    { return (include_kids ? (is2D && ! has3Dkids) : is2D); }
+    void set_has3Dkids (bool val) { has3Dkids = val; }
     bool get_xySym (void) const { return xySym; }
     bool get_xyzSym (void) const { return xyzSym; }
     bool get_zSign (void) const { return zSign; }
     bool get_nearhoriz (void) const { return nearhoriz; }
 
     ColumnVector pixel2coord (double px, double py) const
     { return get_transform ().untransform (px, py, (x_zlim(0)+x_zlim(1))/2); }
 
@@ -3569,16 +3571,17 @@ public:
     double xtickoffset = 0.0;
     double ytickoffset = 0.0;
     double ztickoffset = 0.0;
 
     bool x2Dtop = false;
     bool y2Dright = false;
     bool layer2Dtop = false;
     bool is2D = false;
+    bool has3Dkids = false;
     bool xySym = false;
     bool xyzSym = false;
     bool zSign = false;
     bool nearhoriz = false;
 
     // Text renderer, used for calculation of text (tick labels) size
     octave::text_renderer txt_renderer;
 
diff --git a/scripts/plot/util/private/__opengl_print__.m b/scripts/plot/util/private/__opengl_print__.m
--- a/scripts/plot/util/private/__opengl_print__.m
+++ b/scripts/plot/util/private/__opengl_print__.m
@@ -143,27 +143,16 @@ function opts = __opengl_print__ (opts)
     otherwise
       error (sprintf ("print:no%soutput", opts.devopt),
              "print.m: %s output is not available for GL2PS output",
              upper (opts.devopt));
   endswitch
 
   opts.pipeline = pipeline;
 
-  ## Tell gl2ps to use different rendering options for 2D plots
-  haxes = findall (opts.figure, "type", "axes");
-  vw = get (haxes, "view");
-  if (iscell (vw))
-    vw = vertcat (vw{:});
-  endif
-  is2D = all (abs (vw(:,2)) == 90);
-  if (is2D)
-    gl2ps_device{end} = [gl2ps_device{end}, "is2D"];
-  endif
-
   for n = 1:numel (pipeline)
     if (opts.debug)
       fprintf ("opengl-pipeline: '%s'\n", pipeline{n});
     endif
 
     if (strcmp (get (opts.figure, "visible"), "on"))
       ## Use toolkits "print_figure" method
       drawnow (gl2ps_device{n}, ['|' pipeline{n}]);
