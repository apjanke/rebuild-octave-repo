# HG changeset patch
# User jwe
# Date 1035926505 0
#      Tue Oct 29 21:21:45 2002 +0000
# Node ID 87eb044020aeaa2466b1e5d444e8d002b8a8ea0e
# Parent  597fbc55ea404a63bd092932618374f1f3566aea
[project @ 2002-10-29 21:21:45 by jwe]

diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,13 @@
+2002-10-29  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* NLEqn.cc (NLEqn::solve): Return current estimate of solution
+	instead of empty vector if user termninates iteration.
+
 2002-10-28  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* lo-utils.cc (read_inf_nan_na, octave_read_double,
 	octave_read_complex, octave_write_double, octave_write_complex):
 	New functions.
 	* CMatrix.cc (operator << (std::ostream&, const ComplexMatrix&)):
 	Use octave_write_complex.
 	(operator >> (std::istream&, const ComplexMatrix&)):
diff --git a/liboctave/NLEqn.cc b/liboctave/NLEqn.cc
--- a/liboctave/NLEqn.cc
+++ b/liboctave/NLEqn.cc
@@ -182,19 +182,16 @@ NLEqn::solve (int& info)
 				 pwa, lwa));
 
       solution_status = info;
 
       if (f77_exception_encountered)
 	(*current_liboctave_error_handler) ("unrecoverable error in hybrd1");
     }
 
-  if (info < 0)
-    retval.resize (0);
-
   return retval;
 }
 
 std::string
 NLEqn::error_message (void) const
 {
   std::string retval;
 
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,10 +1,13 @@
 2002-10-29  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
+	* DLD-FUNCTIONS/fsolve.cc (Ffsolve): Always return solution.
+	Don't barf on nargout == 3.
+
 	* pt-idx.h (tree_index_expression::dyn_field): New data member.
 	* pt-idx.cc (tree_index_expression::tree_index_expression
 	(tree_expression*, tree_expression*, int, int)): New constructor.
 	(tree_index_expression::append (tree_expression*)): New function.
 	(tree_index_expression::get_struct_index): New function.
 	(tree_index_expression::make_arg_struct): Handle dynamic fields.
 	(tree_index_expression::rvalue): Likewise.
 	(tree_index_expression::lvalue): Likewise.
diff --git a/src/DLD-FUNCTIONS/fsolve.cc b/src/DLD-FUNCTIONS/fsolve.cc
--- a/src/DLD-FUNCTIONS/fsolve.cc
+++ b/src/DLD-FUNCTIONS/fsolve.cc
@@ -180,45 +180,40 @@ parameters for @code{fsolve}.\n\
       if (! fsolve_fcn)
 	FSOLVE_ABORT ();
 
       ColumnVector x (args(1).vector_value ());
 
       if (error_state)
 	FSOLVE_ABORT1 ("expecting vector as second argument");
 
-      if (nargin > 2)
+      if (nargin > 3)
 	warning ("fsolve: ignoring extra arguments");
 
-      if (nargout > 2)
+      if (nargout > 3)
 	warning ("fsolve: can't compute path output yet");
 
       NLFunc nleqn_fcn (fsolve_user_function);
       NLEqn nleqn (x, nleqn_fcn);
       nleqn.set_options (fsolve_opts);
 
       int info;
       ColumnVector soln = nleqn.solve (info);
 
       if (! error_state)
 	{
 	  std::string msg = nleqn.error_message ();
 
 	  retval(2) = msg;
 	  retval(1) = static_cast<double> (hybrd_info_to_fsolve_info (info));
 
-	  if (nleqn.solution_ok ())
-	    retval(0) = soln;
-	  else
-	    {
-	      retval(0) = Matrix ();
+	  retval(0) = soln;
 
-	      if (nargout < 2)
-		error ("fsolve: %s", msg.c_str ());
-	    }
+	  if (! nleqn.solution_ok () && nargout < 2)
+	    error ("fsolve: %s", msg.c_str ());
 	}
     }
   else
     print_usage ("fsolve");
 
   unwind_protect::run_frame ("Ffsolve");
 
   return retval;
