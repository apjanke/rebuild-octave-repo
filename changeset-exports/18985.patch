# HG changeset patch
# User Rik <rik@octave.org>
# Date 1407255301 25200
#      Tue Aug 05 09:15:01 2014 -0700
# Node ID f84361735a4071a88015f97642c385dd1b094c3c
# Parent  04dc55bf71e87f13f46482ba17d949c2db5f027f
maint: Use Octave coding conventions for some recent patches.

* __init_fltk__.cc: Wrap long lines to 80 characters.  Use space between
function name and opening '(' when calling function.

* __go_draw_axes__.m: Wrap long lines to 80 characters.  Use space between
function name and opening '(' when calling function.

diff --git a/libinterp/dldfcn/__init_fltk__.cc b/libinterp/dldfcn/__init_fltk__.cc
--- a/libinterp/dldfcn/__init_fltk__.cc
+++ b/libinterp/dldfcn/__init_fltk__.cc
@@ -663,36 +663,40 @@ public:
     : Fl_Window (xx, yy, ww, hh + menu_h + status_h + 2, "octave"),
       window_label (), shift (0), fp (xfp), canvas (0),
       autoscale (0), togglegrid (0), panzoom (0), rotate (0), help (0),
       status (0), resize_dummy (0), ax_obj (), pos_x (0), pos_y (0)
   {
     callback (window_close, static_cast<void*> (this));
 
     // The size of the resize_dummy box also determines the minimum window size
-    resize_dummy = new Fl_Box(5 * status_h + 1, menu_h + 1, ww - 5 * status_h - 1, hh);
-    // read on http://fltk.org/articles.php?L415+I0+T+M1000+P1 how resizable works
+    resize_dummy = new Fl_Box (5 * status_h + 1, menu_h + 1,
+                               ww - 5 * status_h - 1, hh);
+    // See http://fltk.org/articles.php?L415+I0+T+M1000+P1
+    // for how resizable works
     resizable (resize_dummy);
 
     // FIXME: The function below is only available in FLTK >= 1.3
     // At some point support for FLTK 1.1 will be dropped in Octave.
     // At that point this function should be uncommented.
     // The current solution is to call xclass() before show() for each window.
     // Set WM_CLASS which allows window managers to properly group related
     // windows.  Otherwise, the class is just "FLTK"
     //default_xclass ("Octave");
 
     uimenu = new fltk_uimenu (0, 0, ww, menu_h);
     canvas = new OpenGL_fltk (0, menu_h, ww, hh, number ());
 
     // The bottom toolbar is a composite of "autoscale", "togglegrid",
-    // "panzoom", "rotate", "help", and "status". Only "status" should be resized.
+    // "panzoom", "rotate", "help", and "status".
+    // Only "status" should be resized.
 
     int toolbar_y = menu_h + hh + 1;
-    status = new Fl_Output (5 * status_h + 1, toolbar_y, ww - 5 * status_h - 1, status_h, "");
+    status = new Fl_Output (5 * status_h + 1, toolbar_y,
+                            ww - 5 * status_h - 1, status_h, "");
 
     status->textcolor (FL_BLACK);
     status->color (FL_GRAY);
     status->textfont (FL_COURIER);
     status->textsize (10);
     status->box (FL_ENGRAVED_BOX);
 
     autoscale = new Fl_Button (0, toolbar_y, status_h, status_h, "A");
@@ -865,33 +869,34 @@ public:
 
   // Move the toolbar at the bottom of the plot_window.
   // The only reason for moving the toolbar is hiding and
   // showing the menubar. All other resizing is done by fltk.
 
   void update_toolbar_position ()
   {
     int old_canvas_h = canvas->h ();
-    size(w (), old_canvas_h + menu_dy () + status_h + 2);
+    size (w (), old_canvas_h + menu_dy () + status_h + 2);
     canvas->resize (0, menu_dy (), w (), old_canvas_h);
 
     int toolbar_y = canvas->h () + menu_dy () + 1;
     autoscale->position (0, toolbar_y);
     togglegrid->position (status_h, toolbar_y);
     panzoom->position (2 * status_h, toolbar_y);
     rotate->position (3 * status_h, toolbar_y);
     help->position (4 * status_h, toolbar_y);
-    status->resize (5 * status_h + 1, toolbar_y, w () - 5 * status_h - 1, status_h);
+    status->resize (5 * status_h + 1, toolbar_y,
+                    w () - 5 * status_h - 1, status_h);
 
-    init_sizes();
+    init_sizes ();
     redraw ();
   }
 
   // Called from figure::properties::ID_POSITION
-  // (someone has requested a position change with set(h, "position", [...]))
+  // (someone has requested a position change with set (h, "position", [...]))
   // ww and hh refers to the canvas size, not the plot_window size.
 
   void update_position (int xx, int yy, int ww, int hh)
   {
     Fl_Window::resize (xx, yy + menu_dy (), ww, hh + menu_dy () + status_h + 2);
   }
 
   void mark_modified (void)
@@ -957,26 +962,28 @@ private:
       fl_message ("%s", help_text);
   }
 
   void set_on_ax_obj (const std::string& name, const std::string& value)
   {
     // ax_obj is the last clicked axes object
     if (ax_obj && ax_obj.isa ("axes"))
       {
-        axes::properties& ap = dynamic_cast<axes::properties&>(ax_obj.get_properties ());
+        axes::properties& ap =
+          dynamic_cast<axes::properties&>(ax_obj.get_properties ());
         ap.set (name, value);
       }
     else // no axes object clicked so far, take currentaxes
       {
         graphics_handle gh = fp.get_currentaxes ();
         if (gh.ok ())
           {
             graphics_object go = gh_manager::get_object (gh);
-            axes::properties& ap = dynamic_cast<axes::properties&>(go.get_properties ());
+            axes::properties& ap =
+              dynamic_cast<axes::properties&>(go.get_properties ());
             ap.set (name, value);
           }
       }
   }
 
   fltk_uimenu* uimenu;
   OpenGL_fltk* canvas;
   Fl_Button* autoscale;
@@ -1283,17 +1290,17 @@ private:
 
           case FL_PUSH:
             pos_x = Fl::event_x ();
             pos_y = Fl::event_y () - menu_dy ();
 
             set_currentpoint (pos_x, pos_y);
 
             if (fp.get_windowbuttonupfcn ().is_defined ())
-              fp.execute_windowbuttondownfcn (Fl::event_button());
+              fp.execute_windowbuttondownfcn (Fl::event_button ());
 
             gh = pixel2axes_or_ca (pos_x, pos_y);
 
             if (gh.ok ())
               {
                 ax_obj = gh_manager::get_object (gh);
                 set_axes_currentpoint (ax_obj, pos_x, pos_y);
 
@@ -1322,17 +1329,17 @@ private:
               {
                 if (ax_obj && ax_obj.isa ("axes"))
                   {
                     axes::properties& ap =
                       dynamic_cast<axes::properties&>
                       (ax_obj.get_properties ());
 
                     // Don't pan or rotate legend
-                    if (ap.get_tag().compare ("legend") < 0)
+                    if (ap.get_tag ().compare ("legend") < 0)
                       {
                         if (ap.rotate3d_is ("on"))
                           view2status (ax_obj);
                         else
                           pixel2status (ax_obj, pos_x, pos_y,
                                         Fl::event_x (),
                                         Fl::event_y () - menu_dy ());
 
@@ -1356,18 +1363,20 @@ private:
                             del = (Fl::event_y () - menu_dy () - pos_y)
                                   / pos(3) * 360;
                             ap.rotate_view (del, daz);
                           }
                       }
                     else
                       {  // move the position of the legend
                         Matrix pos = ap.get_position ().matrix_value ();
-                        pos(0) += double (Fl::event_x () - pos_x) / canvas->w();
-                        pos(1) -= double (Fl::event_y () - menu_dy () - pos_y) / canvas->h();
+                        pos(0) += double (Fl::event_x () - pos_x)
+                                  / canvas->w ();
+                        pos(1) -= double (Fl::event_y () - menu_dy () - pos_y)
+                                  / canvas->h ();
                         ap.set_position (pos);
                       }
 
                     pos_x = Fl::event_x ();
                     pos_y = Fl::event_y () - menu_dy ();
                     mark_modified ();
                   }
                 return 1;
@@ -1395,17 +1404,17 @@ private:
                 gh_manager::get_object (pixel2axes_or_ca (Fl::event_x (),
                                                           Fl::event_y ()
                                                           - menu_dy ()));
               if (ax && ax.isa ("axes"))
                 {
                   axes::properties& ap =
                     dynamic_cast<axes::properties&> (ax.get_properties ());
 
-                  // Parameter controlling how fast we zoom when using the scrool wheel.
+                  // Control how fast to zoom when using scroll wheel.
                   double Vwheel_zoom_speed = ap.get_mouse_wheel_zoom ();
 
                   // Determine if we're zooming in or out.
                   const double factor =
                     (Fl::event_dy () > 0) ? 1 / (1.0 - Vwheel_zoom_speed)
                                           : 1.0 - Vwheel_zoom_speed;
 
                   // Get the point we're zooming about.
@@ -1421,18 +1430,19 @@ private:
 
           case FL_RELEASE:
             if (fp.get_windowbuttonupfcn ().is_defined ())
               {
                 set_currentpoint (Fl::event_x (), Fl::event_y () - menu_dy ());
                 fp.execute_windowbuttonupfcn ();
               }
 
-            if ((Fl::event_button () == 1) && Fl::event_clicks ()) //double click
+            if ((Fl::event_button () == 1) && Fl::event_clicks ())
               {
+                // Double click
                 set_on_ax_obj ("xlimmode", "auto");
                 set_on_ax_obj ("ylimmode", "auto");
                 set_on_ax_obj ("zlimmode", "auto");
                 return 1;
               }
             if (Fl::event_button () == 3)
               {
                 // End of drag -- zoom.
@@ -1616,17 +1626,18 @@ public:
     if (instance_ok ())
       instance->do_update_position (str2idx (fig_idx_str), pos);
   }
 
   static void toggle_menubar_visibility (const std::string& fig_idx_str,
                                          bool menubar_is_figure)
   {
     if (instance_ok ())
-      instance->do_toggle_menubar_visibility (str2idx (fig_idx_str), menubar_is_figure);
+      instance->do_toggle_menubar_visibility (str2idx (fig_idx_str),
+                                              menubar_is_figure);
   }
 
 private:
 
   static figure_manager *instance;
 
   figure_manager (void) { }
 
diff --git a/scripts/plot/util/private/__go_draw_axes__.m b/scripts/plot/util/private/__go_draw_axes__.m
--- a/scripts/plot/util/private/__go_draw_axes__.m
+++ b/scripts/plot/util/private/__go_draw_axes__.m
@@ -556,38 +556,42 @@ function __go_draw_axes__ (h, plot_strea
         data_idx++;
         is_image_data(data_idx) = false;
         parametric(data_idx) = true;
         have_cdata(data_idx) = false;
         have_3d_patch(data_idx) = false;
         if (isempty (obj.displayname))
           titlespec{data_idx} = "title \"\"";
         else
-          tmp = undo_string_escapes (__maybe_munge_text__ (enhanced, obj, "displayname"));
+          tmp = undo_string_escapes (
+                  __maybe_munge_text__ (enhanced, obj, "displayname")
+                );
           titlespec{data_idx} = ['title "' tmp '"'];
         endif
         usingclause{data_idx} = sprintf ("record=%d", numel (obj.xdata));
         errbars = "";
         if (nd == 3)
           xdat = obj.xdata(:);
           ydat = obj.ydata(:);
           if (! isempty (obj.zdata))
             zdat = obj.zdata(:);
           else
             zdat = zeros (size (xdat));
           endif
           data{data_idx} = [xdat, ydat, zdat]';
-          usingclause{data_idx} = sprintf ("record=%d using ($1):($2):($3)", numel (xdat));
+          usingclause{data_idx} = sprintf ("record=%d using ($1):($2):($3)",
+                                           numel (xdat));
           ## fputs (plot_stream, "set parametric;\n");
         else
           xdat = obj.xdata(:);
           ydat = obj.ydata(:);
           data{data_idx} = [xdat, ydat]';
-          usingclause{data_idx} = sprintf ("record=%d using ($1):($2) axes %s%s",
-                                          rows (xdat), xaxisloc_using, yaxisloc_using);
+          usingclause{data_idx} = ...
+            sprintf ("record=%d using ($1):($2) axes %s%s",
+                     rows (xdat), xaxisloc_using, yaxisloc_using);
         endif
 
         style = do_linestyle_command (obj, obj.color, data_idx, mono,
                                       plot_stream, errbars);
 
         withclause{data_idx} = sprintf ("with %s linestyle %d",
                                         style{1}, data_idx);
 
@@ -675,17 +679,19 @@ function __go_draw_axes__ (h, plot_strea
                parametric(data_idx) = false;
                have_cdata(data_idx) = false;
                have_3d_patch(data_idx) = false;
              endif
 
              if (i > 1 || isempty (obj.displayname))
                titlespec{local_idx} = "title \"\"";
              else
-               tmp = undo_string_escapes (__maybe_munge_text__ (enhanced, obj, "displayname"));
+               tmp = undo_string_escapes (
+                       __maybe_munge_text__ (enhanced, obj, "displayname")
+                     );
                titlespec{local_idx} = ['title "' tmp '"'];
              endif
              if (isfield (obj, "facecolor"))
                if ((strcmp (obj.facecolor, "flat")
                    || strcmp (obj.facecolor, "interp"))
                    && isfield (obj, "cdata"))
                  if (ndims (obj.cdata) == 2
                      && (columns (obj.cdata) == nc
@@ -761,17 +767,17 @@ function __go_draw_axes__ (h, plot_strea
                                     [[xcol; xcol(end)], [ycol; ycol(end)], ...
                                     [zcol; zcol(end)], [ccdat; ccdat(end)]]'];
              else
                if (mono)
                  colorspec = "";
                elseif (__gnuplot_has_feature__ ("transparent_patches")
                        && isscalar (obj.facealpha))
                  colorspec = sprintf ("lc rgb \"#%02x%02x%02x\" fillstyle transparent solid %f",
-                                    round (255*color), obj.facealpha);
+                                      round (255*color), obj.facealpha);
                else
                  colorspec = sprintf ("lc rgb \"#%02x%02x%02x\"",
                                       round (255*color));
                endif
 
                withclause{data_idx} = sprintf ("with filledcurve %s",
                                              colorspec);
                data{data_idx} = [xcol, ycol]';
@@ -1110,17 +1116,19 @@ function __go_draw_axes__ (h, plot_strea
           have_3d_patch(data_idx) = false;
           style = do_linestyle_command (obj, obj.edgecolor,
                                         data_idx, mono,
                                         plot_stream);
 
           if (isempty (obj.displayname))
             titlespec{data_idx} = "title \"\"";
           else
-            tmp = undo_string_escapes (__maybe_munge_text__ (enhanced, obj, "displayname"));
+            tmp = undo_string_escapes (
+                    __maybe_munge_text__ (enhanced, obj, "displayname")
+                  );
             titlespec{data_idx} = ['title "' tmp '"'];
           endif
           withclause{data_idx} = sprintf ("with pm3d linestyle %d",
                                           data_idx);
           withpm3d = true;
           pm3didx = data_idx;
 
           xdat = obj.xdata;
@@ -1206,30 +1214,33 @@ function __go_draw_axes__ (h, plot_strea
           if (doing_interp_color)
             ## "depthorder" interferes with interpolation of colors.
             dord = "scansautomatic";
           else
             dord = "depthorder";
           endif
 
           if (flat_interp_face && strcmp (obj.edgecolor, "flat"))
-            fprintf (plot_stream, "set pm3d explicit at s %s %s corners2color c3;\n",
+            fprintf (plot_stream,
+                     "set pm3d explicit at s %s %s corners2color c3;\n",
                      interp_str, dord);
           elseif (!facecolor_none_or_white)
             if (strcmp (obj.edgecolor, "none"))
               if (__gnuplot_has_feature__ ("transparent_surface")
                   && isscalar (obj.facealpha))
                 fprintf (plot_stream,
                          "set style fill transparent solid %f;\n",
                          obj.facealpha);
               endif
-              fprintf (plot_stream, "set pm3d explicit at s %s corners2color c3;\n",
+              fprintf (plot_stream,
+                       "set pm3d explicit at s %s corners2color c3;\n",
                        interp_str, dord);
             else
-              fprintf (plot_stream, "set pm3d explicit at s hidden3d %d %s %s corners2color c3;\n",
+              fprintf (plot_stream,
+                       "set pm3d explicit at s hidden3d %d %s %s corners2color c3;\n",
                        data_idx, interp_str, dord);
 
               if (__gnuplot_has_feature__ ("transparent_surface")
                   && isscalar (obj.facealpha))
                 fprintf (plot_stream,
                          "set style fill transparent solid %f;\n",
                          obj.facealpha);
               endif
@@ -1438,18 +1449,18 @@ function __go_draw_axes__ (h, plot_strea
   if (! any (isinf (clim)))
     if (truecolor || ! cdatadirect)
       if (rows (addedcmap) > 0)
         for i = 1:data_idx
           if (have_3d_patch(i))
             data{i}(end,:) = clim(2) * (data{i}(end, :) - 0.5) / cmap_sz;
            endif
         endfor
-        fprintf (plot_stream, "set cbrange [%.15e:%.15e];\n", clim(1), clim(2) *
-                 (cmap_sz + rows (addedcmap)) / cmap_sz);
+        fprintf (plot_stream, "set cbrange [%.15e:%.15e];\n",
+                 clim(1), clim(2) * (cmap_sz + rows (addedcmap)) / cmap_sz);
       else
         fprintf (plot_stream, "set cbrange [%.15e:%.15e];\n", clim);
       endif
     else
       fprintf (plot_stream, "set cbrange [1:%d];\n", cmap_sz +
                rows (addedcmap));
     endif
   endif
@@ -1581,17 +1592,18 @@ function __go_draw_axes__ (h, plot_strea
         warning ("legend: 'Best' not yet implemented for location specifier.\n");
         ## Least conflict with data in plot.
         ## Least unused space outside plot.
       otherwise
         pos = "";
     endswitch
     if (__gnuplot_has_feature__ ("key_has_font_properties"))
       [fontname, fontsize] = get_fontname_and_size (hlgnd);
-      fontspacespec = [ create_spacingspec(fontname, fontsize, gnuplot_term) create_fontspec(fontname, fontsize, gnuplot_term) ];
+      fontspacespec = [ create_spacingspec(fontname, fontsize, gnuplot_term),
+                        create_fontspec(fontname, fontsize, gnuplot_term) ];
     else
       fontspacespec = "";
     endif
     textcolors = get (findobj (hlgnd.children, "type", "text"), "color");
     if (iscell (textcolors))
       textcolors = cell2mat (textcolors);
       textcolors = unique (textcolors, "rows");
     endif
@@ -1653,18 +1665,18 @@ function __go_draw_axes__ (h, plot_strea
         n = max (strfind (withclause{1}, ";"));
         if (! isempty (n))
           withclause{1} = withclause{1}(1:n-1);
         endif
       endif
       fprintf (plot_stream, "%s \"-\" %s %s %s \\\n", plot_cmd,
                usingclause{1}, titlespec{1}, withclause{1});
     else
-      fprintf (plot_stream, "%s \"-\" binary format='%%float64' %s %s %s \\\n", plot_cmd,
-               usingclause{1}, titlespec{1}, withclause{1});
+      fprintf (plot_stream, "%s \"-\" binary format='%%float64' %s %s %s \\\n",
+               plot_cmd, usingclause{1}, titlespec{1}, withclause{1});
     endif
     for i = 2:data_idx
       if (have_3d_patch (i))
         fprintf (plot_stream, ", \"-\" %s %s %s \\\n",
                  usingclause{i}, titlespec{i}, withclause{i});
       elseif (is_image_data (i))
         if (! is_image_data (i-1))
           fputs (plot_stream, "; ");
@@ -1694,35 +1706,35 @@ function __go_draw_axes__ (h, plot_strea
         if (bg_is_set)
           fputs (plot_stream, "unset obj 1; \\\n");
           bg_is_set = false;
         endif
         if (fg_is_set)
           fputs (plot_stream, "unset obj 2; \\\n");
           fg_is_set = false;
         endif
-        fprintf (plot_stream, "%s \"-\" binary format='%%float64' %s %s %s \\\n", plot_cmd,
-                 usingclause{i}, titlespec{i}, withclause{i});
+        fprintf (plot_stream,"%s \"-\" binary format='%%float64' %s %s %s \\\n",
+                 plot_cmd, usingclause{i}, titlespec{i}, withclause{i});
       else
         fprintf (plot_stream, ", \"-\" binary format='%%float64' %s %s %s \\\n",
                  usingclause{i}, titlespec{i}, withclause{i});
       endif
     endfor
     fputs (plot_stream, ";\n");
     for i = 1:data_idx
       if (have_3d_patch (i))
         ## Can't write 3d patch data as binary as can't plot more than
         ## a single patch at a time and have to plot all patches together
         ## so that the gnuplot depth ordering is done correctly
         for j = 1 : 4 : columns (data{i})
           if (j != 1)
             fputs (plot_stream, "\n\n");
           endif
           fprintf (plot_stream, "%.15g %.15g %.15g %.15g\n", data{i}(:,j).');
-          fprintf (plot_stream, "%.15g %.15g %.15g %.15g\n\n", data{i}(:,j+1).');
+          fprintf (plot_stream, "%.15g %.15g %.15g %.15g\n\n",data{i}(:,j+1).');
           fprintf (plot_stream, "%.15g %.15g %.15g %.15g\n", data{i}(:,j+2).');
           fprintf (plot_stream, "%.15g %.15g %.15g %.15g\n", data{i}(:,j+3).');
         endfor
         fputs (plot_stream, "e\n");
       elseif (is_image_data(i))
         fwrite (plot_stream, data{i}, "float32");
       else
         __gnuplot_write_data__ (plot_stream, data{i}, nd, parametric(i),
@@ -1752,17 +1764,17 @@ function x = flip (x)
     x = fliplr (x);
   elseif (columns (x) == 1 || ischar (x))
     x = flipud (x);
   else
     x = flipud (fliplr (x));
   endif
 endfunction
 
-function spacing_spec = create_spacingspec(f, s, gp_term)
+function spacing_spec = create_spacingspec (f, s, gp_term)
   # The gnuplot default font size is 10, and default spacing is 1.25.
   # gnuplot has a concept of a figure global font, and sizes everything
   # appropriate to that, including the legend spacing.
   #
   # This means that if an alternative size is used, gnuplot will use an
   # inappropriate spacing in the legend by default.
   spc = s / 10 * 1.25;
   spacing_spec = sprintf ("spacing %d", spc);
