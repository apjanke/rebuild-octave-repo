# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1365272632 14400
#      Sat Apr 06 14:23:52 2013 -0400
# Node ID 3f8d3fc907afaa36b2c8c58ebde45f51a71a102c
# Parent  6cd66a5a76e835faf3712c78d38cae44d2b93f74
store workspace model in main_window, not in workspace view

* main-window.h, main-window.cc (main_window::_workspace_model):
New data member.
(main_window::construct): Create _workspace_model and make it the
model for _workspace_view.  connect _workspace_model::model_changed
to _workspace_view::model_changed.
(main_window::~main_window): Delete _workspace_model.

* workspace-view.h, workspace-view.cc
(workspace_view::_workspace_model): Delete.  Use model() method to get
model where needed.
(workspace_view::setModel): New function.
(workspace_view::view): Rename from _workspace_tree_view.  Change all
uses.
(workspace_view::workspace_view): Don't connect
_workspace_model::model_changed signal to
workspace_view::model_changed here.

diff --git a/libgui/src/main-window.cc b/libgui/src/main-window.cc
--- a/libgui/src/main-window.cc
+++ b/libgui/src/main-window.cc
@@ -88,18 +88,18 @@ main_window::~main_window ()
     delete _documentation_dock_widget;
 
   if (_files_dock_widget)
     delete _files_dock_widget;
 
   if (_history_dock_widget)
     delete _history_dock_widget;
 
-  if (_workspace_view)
-    delete _workspace_view;
+  delete _workspace_model;
+  delete _workspace_view;
 }
 
 void
 main_window::new_file ()
 {
 #ifdef HAVE_QSCINTILLA
   _file_editor->request_new_file ();
 #endif
@@ -656,19 +656,28 @@ main_window::connect_visibility_changed 
 
 // Main subroutine of the constructor
 void
 main_window::construct ()
 {
   _closing = false;   // flag for editor files when closed
   setWindowIcon (QIcon(":/actions/icons/logo.png"));
 
+  // Create a new workspace model.
+  _workspace_model = new workspace_model ();
+
   // Setup dockable widgets and the status bar.
   _workspace_view           = new workspace_view (this);
+
+  _workspace_view->setModel (_workspace_model);
   _workspace_view->setStatusTip (tr ("View the variables in the active workspace."));
+
+  connect (_workspace_model, SIGNAL (model_changed ()),
+           _workspace_view, SLOT (model_changed ()));
+
   _history_dock_widget      = new history_dock_widget (this);
   _history_dock_widget->setStatusTip (tr ("Browse and search the command history."));
   _files_dock_widget        = new files_dock_widget (this);
   _files_dock_widget->setStatusTip (tr ("Browse your files."));
   _documentation_dock_widget= new documentation_dock_widget (this);
   _documentation_dock_widget->setStatusTip (tr ("See the documentation for help."));
   _status_bar               = new QStatusBar (this);
 
diff --git a/libgui/src/main-window.h b/libgui/src/main-window.h
--- a/libgui/src/main-window.h
+++ b/libgui/src/main-window.h
@@ -39,16 +39,17 @@ along with Octave; see the file COPYING.
 // Editor includes
 #include "file-editor-interface.h"
 
 // QTerminal includes
 #include "QTerminal.h"
 
 // Own includes
 #include "resource-manager.h"
+#include "workspace-model.h"
 #include "workspace-view.h"
 #include "history-dockwidget.h"
 #include "files-dockwidget.h"
 #include "terminal-dockwidget.h"
 #include "documentation-dockwidget.h"
 #include "octave-qt-event-listener.h"
 #include "octave-qt-link.h"
 
@@ -153,16 +154,19 @@ private:
   QMenu *                   _debug_menu;
 
   QAction *                 _debug_continue;
   QAction *                 _debug_step_into;
   QAction *                 _debug_step_over;
   QAction *                 _debug_step_out;
   QAction *                 _debug_quit;
 
+  // Data models.
+  workspace_model *         _workspace_model;
+
   // Dock widgets.
   workspace_view *          _workspace_view;
   history_dock_widget *     _history_dock_widget;
   files_dock_widget *       _files_dock_widget;
   terminal_dock_widget *    _terminal_dock_widget;
   documentation_dock_widget*_documentation_dock_widget;
 
   // Toolbars.
diff --git a/libgui/src/workspace-view.cc b/libgui/src/workspace-view.cc
--- a/libgui/src/workspace-view.cc
+++ b/libgui/src/workspace-view.cc
@@ -33,33 +33,29 @@ along with Octave; see the file COPYING.
 
 workspace_view::workspace_view (QWidget *p)
   : QDockWidget (p)
 {
   setObjectName ("WorkspaceView");
   setWindowIcon (QIcon(":/actions/icons/logo.png"));
   setWindowTitle (tr ("Workspace"));
 
-  // Create a new workspace model.
-  _workspace_model = new workspace_model ();
-
-  _workspace_tree_view = new QTreeView (this);            // Create a new tree view.
-  _workspace_tree_view->setHeaderHidden (false);          // Do not show header columns.
-  _workspace_tree_view->setAlternatingRowColors (true);   // Activate alternating row colors.
-  _workspace_tree_view->setAnimated (false);              // Deactivate animations because of strange glitches.
-  _workspace_tree_view->setTextElideMode (Qt::ElideRight);// Elide text to the right side of the cells.
-  _workspace_tree_view->setWordWrap (false);              // No wordwrapping in cells.
-  _workspace_tree_view->setModel (_workspace_model);      // Assign model.
+  view = new QTreeView (this);            // Create a new tree view.
+  view->setHeaderHidden (false);          // Do not show header columns.
+  view->setAlternatingRowColors (true);   // Activate alternating row colors.
+  view->setAnimated (false);              // Deactivate animations because of strange glitches.
+  view->setTextElideMode (Qt::ElideRight);// Elide text to the right side of the cells.
+  view->setWordWrap (false);              // No wordwrapping in cells.
 
   // Set an empty widget, so we can assign a layout to it.
   setWidget (new QWidget (this));
 
   // Create a new layout and add widgets to it.
   QVBoxLayout *vbox_layout = new QVBoxLayout ();
-  vbox_layout->addWidget (_workspace_tree_view);
+  vbox_layout->addWidget (view);
   vbox_layout->setMargin (2);
 
   // Set the empty widget to have our layout.
   widget ()->setLayout (vbox_layout);
 
   // Initialize collapse/expand state of the workspace subcategories.
 
   QSettings *settings = resource_manager::get_settings ();
@@ -67,94 +63,93 @@ workspace_view::workspace_view (QWidget 
   // FIXME -- what should happen if settings is 0?
 
   _explicit_collapse.local      = settings->value ("workspaceview/local_collapsed", false).toBool ();
   _explicit_collapse.global     = settings->value ("workspaceview/global_collapsed", false).toBool ();;
   _explicit_collapse.persistent = settings->value ("workspaceview/persistent_collapsed", false).toBool ();;
 
   // Initialize column order and width of the workspace
   
-  _workspace_tree_view->header ()->restoreState (settings->value("workspaceview/column_state").toByteArray ());
+  view->header ()->restoreState (settings->value("workspaceview/column_state").toByteArray ());
 
   // Connect signals and slots.
   connect (this, SIGNAL (visibilityChanged (bool)),
            this, SLOT(handle_visibility_changed (bool)));
 
-  connect (_workspace_model, SIGNAL (model_changed ()),
-           this, SLOT (model_changed ()));
-
-  connect (_workspace_tree_view, SIGNAL (collapsed (QModelIndex)),
+  connect (view, SIGNAL (collapsed (QModelIndex)),
            this, SLOT (collapse_requested (QModelIndex)));
-  connect (_workspace_tree_view, SIGNAL (expanded (QModelIndex)),
+  connect (view, SIGNAL (expanded (QModelIndex)),
            this, SLOT (expand_requested (QModelIndex)));
 
-  connect (_workspace_tree_view, SIGNAL (doubleClicked (QModelIndex)),
+  connect (view, SIGNAL (doubleClicked (QModelIndex)),
            this, SLOT (item_double_clicked (QModelIndex)));
 
   // topLevelChanged is emitted when floating property changes (floating = true)
   connect (this, SIGNAL (topLevelChanged(bool)), this, SLOT(top_level_changed(bool)));
 
 }
 
 workspace_view::~workspace_view ()
 {
   QSettings *settings = resource_manager::get_settings ();
   settings->setValue("workspaceview/local_collapsed", _explicit_collapse.local);
   settings->setValue("workspaceview/global_collapsed", _explicit_collapse.global);
   settings->setValue("workspaceview/persistent_collapsed", _explicit_collapse.persistent);
-  settings->setValue("workspaceview/column_state", _workspace_tree_view->header ()->saveState ());
+  settings->setValue("workspaceview/column_state", view->header ()->saveState ());
   settings->sync ();
 }
 
 void
 workspace_view::handle_visibility_changed (bool visible)
 {
   if (visible)
     emit active_changed (true);
 }
 
 void
 workspace_view::model_changed ()
 {
-  _workspace_model->update_workspace_callback ();
+  QAbstractItemModel *m = view->model ();
+
+  dynamic_cast<workspace_model *> (m)->update_workspace_callback ();
 
   // This code is very quirky and requires some explanation.
   // Usually, we should not deal with collapsing or expanding ourselves,
   // because the view itself determines (based on the model) whether it
   // is appropriate to collapse or expand items.
   //
   // Now, the logic requires that we update our model item by item, which
   // would make it work correctly, but this is extremely slow and scales
   // very bad (O(n^2)). That's why we throw away our model and rebuild it
   // completely from scratch (O(n)), which is why the view renders all
   // displayed data as invalid.
   //
   // In order to make collapsing/expanding work again, we need to set
   // flags ourselves here.
 
-  QModelIndex local_model_index = _workspace_model->index (0, 0);
-  QModelIndex global_model_index = _workspace_model->index (1, 0);
-  QModelIndex persistent_model_index = _workspace_model->index (2, 0);
+  QModelIndex local_model_index = m->index (0, 0);
+  QModelIndex global_model_index = m->index (1, 0);
+  QModelIndex persistent_model_index = m->index (2, 0);
 
   if (_explicit_collapse.local) {
-    _workspace_tree_view->collapse (local_model_index);
+    view->collapse (local_model_index);
   } else {
-    _workspace_tree_view->expand (local_model_index);
+    view->expand (local_model_index);
   }
 
   if (_explicit_collapse.global) {
-    _workspace_tree_view->collapse (global_model_index);
+    view->collapse (global_model_index);
   } else {
-    _workspace_tree_view->expand (global_model_index);
+    view->expand (global_model_index);
   }
 
   if (_explicit_collapse.persistent) {
-    _workspace_tree_view->collapse (persistent_model_index);
+    view->collapse (persistent_model_index);
   } else {
-    _workspace_tree_view->expand (persistent_model_index);
+    view->expand (persistent_model_index);
   }
 }
 
 void
 workspace_view::collapse_requested (QModelIndex index)
 {
   // This code is very quirky and requires some explanation.
   // Usually, we should not deal with collapsing or expanding ourselves,
@@ -164,18 +159,19 @@ workspace_view::collapse_requested (QMod
   // Now, the logic requires that we update our model item by item, which
   // would make it work correctly, but this is extremely slow and scales
   // very bad (O(n^2)). That's why we throw away our model and rebuild it
   // completely from scratch (O(n)), which is why the view renders all
   // displayed data as invalid.
   //
   // In order to make collapsing/expanding work again, we need to set
   // flags ourselves here.
-  QMap<int, QVariant> item_data
-    = _workspace_model->itemData (index);
+  QAbstractItemModel *m = view->model ();
+
+  QMap<int, QVariant> item_data = m->itemData (index);
 
   if (item_data[0] == "Local")
     _explicit_collapse.local = true;
   if (item_data[0] == "Global")
     _explicit_collapse.global = true;
   if (item_data[0] == "Persistent")
     _explicit_collapse.persistent = true;
 }
@@ -191,18 +187,19 @@ workspace_view::expand_requested (QModel
   // Now, the logic requires that we update our model item by item, which
   // would make it work correctly, but this is extremely slow and scales
   // very bad (O(n^2)). That's why we throw away our model and rebuild it
   // completely from scratch (O(n)), which is why the view renders all
   // displayed data as invalid.
   //
   // In order to make collapsing/expanding work again, we need to do set
   // flags ourselves here.
-  QMap<int, QVariant> item_data
-    = _workspace_model->itemData (index);
+  QAbstractItemModel *m = view->model ();
+
+  QMap<int, QVariant> item_data = m->itemData (index);
 
   if (item_data[0] == "Local")
     _explicit_collapse.local = false;
   if (item_data[0] == "Global")
     _explicit_collapse.global = false;
   if (item_data[0] == "Persistent")
     _explicit_collapse.persistent = false;
 }
diff --git a/libgui/src/workspace-view.h b/libgui/src/workspace-view.h
--- a/libgui/src/workspace-view.h
+++ b/libgui/src/workspace-view.h
@@ -31,16 +31,20 @@ along with Octave; see the file COPYING.
 
 class workspace_view : public QDockWidget
 {
   Q_OBJECT
   public:
   workspace_view (QWidget * parent = 0);
   ~workspace_view ();
 
+public:
+
+  void setModel (workspace_model *model) { view->setModel (model); }
+
 public slots:
   void handle_visibility_changed (bool visible);
   void model_changed ();
   /** Slot when floating property changes */
   void top_level_changed (bool floating);
 
 signals:
   /** Custom signal that tells if a user has clicke away that dock widget. */
@@ -50,20 +54,17 @@ protected:
   void closeEvent (QCloseEvent *event);
 
 protected slots:
   void collapse_requested (QModelIndex index);
   void expand_requested (QModelIndex index);
   void item_double_clicked (QModelIndex index);
 
 private:
-  QTreeView *_workspace_tree_view;
-
-  /** Stores the current workspace model. */
-  workspace_model *_workspace_model;
+  QTreeView *view;
 
   struct
   {
     bool local;
     bool global;
     bool persistent;
   } _explicit_collapse;
 };
