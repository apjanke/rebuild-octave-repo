# HG changeset patch
# User jwe
# Date 1077108740 0
#      Wed Feb 18 12:52:20 2004 +0000
# Node ID fc316bde0053928962de93e48a45e38ed7bc78c9
# Parent  d3018a33c5847a258edc62b8ed2f8757b722c564
[project @ 2004-02-18 12:52:20 by jwe]

diff --git a/ChangeLog b/ChangeLog
--- a/ChangeLog
+++ b/ChangeLog
@@ -1,8 +1,12 @@
+2004-02-18  Per Persson  <persquare@mac.com>
+
+	* configure.in (*-*-darwin*): Define SONAME_FLAGS.
+
 2004-02-16  David Bateman  <dbateman@free.fr>
 
 	* configure.in: Test for the presence of FFTW 3.x and use it in
 	preference to FFTW 2.x.  Define HAVE_FFTW3
 
 2004-02-16  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* mkoctfile.in (LINK_DEPS): Include $LIBS and $RLD_FLAG.
diff --git a/configure.in b/configure.in
--- a/configure.in
+++ b/configure.in
@@ -24,17 +24,17 @@ dnl Copyright (C) 1996, 1997 John W. Eat
 ### Preserve CFLAGS and CXXFLAGS from the environment before doing
 ### anything else because we don't know which macros might call
 ### AC_PROG_CC or AC_PROG_CXX.
 
 EXTERN_CFLAGS="$CFLAGS"
 EXTERN_CXXFLAGS="$CXXFLAGS"
 
 AC_INIT
-AC_REVISION($Revision: 1.446 $)
+AC_REVISION($Revision: 1.447 $)
 AC_PREREQ(2.57)
 AC_CONFIG_SRCDIR([src/octave.cc])
 AC_CONFIG_HEADER(config.h)
 
 AC_DEFINE(OCTAVE_SOURCE, 1, [Define if this is Octave.])
   
 OCTAVE_HOST_TYPE
 
@@ -695,16 +695,17 @@ case "$canonical_host_type" in
     CXXPICFLAG=
     CPICFLAG=
     FPICFLAG=
     SHLEXT=dylib 
     SHLLIB='$(SHLEXT)'
     SHLEXT_VER='$(version).$(SHLEXT)'
     SHLLIB_VER='$(version).$(SHLLIB)'
     NO_OCT_FILE_STRIP=true
+    SONAME_FLAGS='-install_name $(octlibdir)/$@'
     library_path_var=DYLD_LIBRARY_PATH	
   ;;
   *-*-cygwin* | *-*-mingw*)
     CXXPICFLAG=
     CPICFLAG=
     FPICFLAG=
     SHLEXT=dll
     SHLLIB=dll.a
diff --git a/liboctave/Array.cc b/liboctave/Array.cc
--- a/liboctave/Array.cc
+++ b/liboctave/Array.cc
@@ -926,16 +926,49 @@ Array<T>::resize_and_fill (const dim_vec
   if (--old_rep->count <= 0)
     delete old_rep;
 }
 
 template <class T>
 Array<T>&
 Array<T>::insert (const Array<T>& a, int r, int c)
 {
+  if (ndims () == 2 && a.ndims () == 2)
+    insert2 (a, r, c);
+  else
+    insertN (a, r, c);
+
+  return *this;
+}
+
+
+template <class T>
+Array<T>&
+Array<T>::insert2 (const Array<T>& a, int r, int c)
+{
+  int a_rows = a.rows ();
+  int a_cols = a.cols ();
+
+  if (r < 0 || r + a_rows > rows () || c < 0 || c + a_cols > cols ())
+    {
+      (*current_liboctave_error_handler) ("range error for insert");
+      return *this;
+    }
+
+  for (int j = 0; j < a_cols; j++)
+    for (int i = 0; i < a_rows; i++)
+      elem (r+i, c+j) = a.elem (i, j);
+
+  return *this;
+}
+
+template <class T>
+Array<T>&
+Array<T>::insertN (const Array<T>& a, int r, int c)
+{
   dim_vector a_dv = a.dims ();
 
   int n = a_dv.length ();
 
   if (n == dimensions.length ())
     {
       Array<int> a_ra_idx (a_dv.length (), 0);
 
diff --git a/liboctave/Array.h b/liboctave/Array.h
--- a/liboctave/Array.h
+++ b/liboctave/Array.h
@@ -441,18 +441,20 @@ public:
   void resize (int n, const T& val) { resize_and_fill (n, val); }
 
   void resize (const dim_vector& dv) { resize_no_fill (dv); }
 
   void resize (const dim_vector& dv, const T& val)
     { resize_and_fill (dv, val); }
 
   Array<T>& insert (const Array<T>& a, int r, int c);
+  Array<T>& insert2 (const Array<T>& a, int r, int c);
+  Array<T>& insertN (const Array<T>& a, int r, int c);
 
-  Array<T>& insert (const Array<T>& a, const Array<int>& dv);
+  Array<T>& insert (const Array<T>& a, const Array<int>& idx);
 
   bool is_square (void) const { return (dim1 () == dim2 ()); }
 
   bool is_empty (void) const { return numel () == 0; }
 
   Array<T> transpose (void) const;
 
   const T *data (void) const { return rep->data; }
diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,17 @@
+2004-02-18  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* Array.cc (Array<T>::insertN (const Array<T>&, int, int)):
+	Rename from Array<T>::insert.
+	(Array<T>::insert2 (const Array<T>&, int, int)):
+	Reinstate old Array<T>::insert function under this name.
+	(Array<T>::insert (const Array<T>&, int, int)):
+	New function.  Dispatch to insert2 or insertN as appropriate.
+
 2004-02-17  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* oct-fftw.cc (convert_packcomplex_1d, convert_packcomplex_Nd): 
 	Sprinkle with OCTAVE_QUIT.
 
 2004-02-16  David Bateman <dbateman@free.fr>
 
 	* oct-fftw.cc (octave_fftw_planner::create_plan, octave_fftw::fftNd):
diff --git a/liboctave/oct-fftw.cc b/liboctave/oct-fftw.cc
--- a/liboctave/oct-fftw.cc
+++ b/liboctave/oct-fftw.cc
@@ -22,18 +22,19 @@ Software Foundation, 59 Temple Place - S
 #include <config.h>
 #endif
 
 #if defined (HAVE_FFTW3)
 
 #include <iostream>
 #include <vector>
 
+#include "lo-error.h"
 #include "oct-fftw.h"
-#include "lo-error.h"
+#include "quit.h"
 
 // Helper class to create and cache fftw plans for both 1d and 2d. This
 // implementation uses FFTW_ESTIMATE to create the plans, which in theory
 // is suboptimal, but provides quite reasonable performance.
 
 // Also note that if FFTW_ESTIMATE is not used the planner in FFTW3
 // destroys the input and output arrays. So with the form of the 
 // current code we definitely want FFTW_ESTIMATE!! However, we use
