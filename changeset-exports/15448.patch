# HG changeset patch
# User Jordi Guti√©rrez Hermoso <jordigh@octave.org>
# Date 1348779645 14400
#      Thu Sep 27 17:00:45 2012 -0400
# Node ID 0a0912a9ab6ead16e39a902f9e2f821b94131de5
# Parent  352349219529006de2e72479455ad1450fd0c443
Replace deprecated DiagArray2<T>::diag calls with DiagArray2<T>::extract_diag

diff --git a/libinterp/corefcn/__qp__.cc b/libinterp/corefcn/__qp__.cc
--- a/libinterp/corefcn/__qp__.cc
+++ b/libinterp/corefcn/__qp__.cc
@@ -46,17 +46,17 @@ null (const Matrix& A, octave_idx_type& 
   rank = 0;
 
   if (! A.is_empty ())
     {
       SVD A_svd (A);
 
       DiagMatrix S = A_svd.singular_values ();
 
-      ColumnVector s = S.diag ();
+      ColumnVector s = S.extract_diag ();
 
       Matrix V = A_svd.right_singular_matrix ();
 
       octave_idx_type A_nr = A.rows ();
       octave_idx_type A_nc = A.cols ();
 
       octave_idx_type tmp = A_nr > A_nc ? A_nr : A_nc;
 
diff --git a/libinterp/corefcn/svd.cc b/libinterp/corefcn/svd.cc
--- a/libinterp/corefcn/svd.cc
+++ b/libinterp/corefcn/svd.cc
@@ -211,17 +211,17 @@ decomposition, eliminating the unnecessa
                     }
 
                   FloatSVD result (tmp, type, driver);
 
                   FloatDiagMatrix sigma = result.singular_values ();
 
                   if (nargout == 0 || nargout == 1)
                     {
-                      retval(0) = sigma.diag ();
+                      retval(0) = sigma.extract_diag ();
                     }
                   else
                     {
                       retval(2) = result.right_singular_matrix ();
                       retval(1) = sigma;
                       retval(0) = result.left_singular_matrix ();
                     }
                 }
@@ -239,17 +239,17 @@ decomposition, eliminating the unnecessa
                     }
 
                   FloatComplexSVD result (ctmp, type, driver);
 
                   FloatDiagMatrix sigma = result.singular_values ();
 
                   if (nargout == 0 || nargout == 1)
                     {
-                      retval(0) = sigma.diag ();
+                      retval(0) = sigma.extract_diag ();
                     }
                   else
                     {
                       retval(2) = result.right_singular_matrix ();
                       retval(1) = sigma;
                       retval(0) = result.left_singular_matrix ();
                     }
                 }
@@ -270,17 +270,17 @@ decomposition, eliminating the unnecessa
                     }
 
                   SVD result (tmp, type, driver);
 
                   DiagMatrix sigma = result.singular_values ();
 
                   if (nargout == 0 || nargout == 1)
                     {
-                      retval(0) = sigma.diag ();
+                      retval(0) = sigma.extract_diag ();
                     }
                   else
                     {
                       retval(2) = result.right_singular_matrix ();
                       retval(1) = sigma;
                       retval(0) = result.left_singular_matrix ();
                     }
                 }
@@ -298,17 +298,17 @@ decomposition, eliminating the unnecessa
                     }
 
                   ComplexSVD result (ctmp, type, driver);
 
                   DiagMatrix sigma = result.singular_values ();
 
                   if (nargout == 0 || nargout == 1)
                     {
-                      retval(0) = sigma.diag ();
+                      retval(0) = sigma.extract_diag ();
                     }
                   else
                     {
                       retval(2) = result.right_singular_matrix ();
                       retval(1) = sigma;
                       retval(0) = result.left_singular_matrix ();
                     }
                 }
diff --git a/libinterp/octave-value/ov-base-diag.cc b/libinterp/octave-value/ov-base-diag.cc
--- a/libinterp/octave-value/ov-base-diag.cc
+++ b/libinterp/octave-value/ov-base-diag.cc
@@ -421,17 +421,17 @@ octave_base_diag<DMT, MT>::convert_to_st
 
 template <class DMT, class MT>
 bool
 octave_base_diag<DMT, MT>::save_ascii (std::ostream& os)
 {
   os << "# rows: " << matrix.rows () << "\n"
     << "# columns: " << matrix.columns () << "\n";
 
-  os << matrix.diag ();
+  os << matrix.extract_diag ();
 
   return true;
 }
 
 template <class DMT, class MT>
 bool
 octave_base_diag<DMT, MT>::load_ascii (std::istream& is)
 {
diff --git a/libinterp/octave-value/ov-cx-diag.cc b/libinterp/octave-value/ov-cx-diag.cc
--- a/libinterp/octave-value/ov-cx-diag.cc
+++ b/libinterp/octave-value/ov-cx-diag.cc
@@ -144,17 +144,17 @@ octave_complex_diag_matrix::map (unary_m
     case umap_real:
       return ::real (matrix);
     case umap_conj:
       return ::conj (matrix);
     case umap_imag:
       return ::imag (matrix);
     case umap_sqrt:
       {
-        ComplexColumnVector tmp = matrix.diag ().map<Complex> (std::sqrt);
+        ComplexColumnVector tmp = matrix.extract_diag ().map<Complex> (std::sqrt);
         ComplexDiagMatrix retval (tmp);
         retval.resize (matrix.rows (), matrix.columns ());
         return retval;
       }
     default:
       return to_dense ().map (umap);
     }
 }
@@ -162,17 +162,17 @@ octave_complex_diag_matrix::map (unary_m
 bool
 octave_complex_diag_matrix::save_binary (std::ostream& os, bool& save_as_floats)
 {
 
   int32_t r = matrix.rows (), c = matrix.cols ();
   os.write (reinterpret_cast<char *> (&r), 4);
   os.write (reinterpret_cast<char *> (&c), 4);
 
-  ComplexMatrix m = ComplexMatrix (matrix.diag ());
+  ComplexMatrix m = ComplexMatrix (matrix.extract_diag ());
   save_type st = LS_DOUBLE;
   if (save_as_floats)
     {
       if (m.too_large_for_float ())
         {
           warning ("save: some values too large to save as floats --");
           warning ("save: saving as doubles instead");
         }
diff --git a/libinterp/octave-value/ov-flt-cx-diag.cc b/libinterp/octave-value/ov-flt-cx-diag.cc
--- a/libinterp/octave-value/ov-flt-cx-diag.cc
+++ b/libinterp/octave-value/ov-flt-cx-diag.cc
@@ -128,17 +128,17 @@ octave_float_complex_diag_matrix::map (u
     case umap_real:
       return ::real (matrix);
     case umap_conj:
       return ::conj (matrix);
     case umap_imag:
       return ::imag (matrix);
     case umap_sqrt:
       {
-        FloatComplexColumnVector tmp = matrix.diag ().map<FloatComplex> (std::sqrt);
+        FloatComplexColumnVector tmp = matrix.extract_diag ().map<FloatComplex> (std::sqrt);
         FloatComplexDiagMatrix retval (tmp);
         retval.resize (matrix.rows (), matrix.columns ());
         return retval;
       }
     default:
       return to_dense ().map (umap);
     }
 }
@@ -148,17 +148,17 @@ bool
 octave_float_complex_diag_matrix::save_binary (std::ostream& os,
                                                bool& /* save_as_floats */)
 {
 
   int32_t r = matrix.rows (), c = matrix.cols ();
   os.write (reinterpret_cast<char *> (&r), 4);
   os.write (reinterpret_cast<char *> (&c), 4);
 
-  FloatComplexMatrix m = FloatComplexMatrix (matrix.diag ());
+  FloatComplexMatrix m = FloatComplexMatrix (matrix.extract_diag ());
   save_type st = LS_FLOAT;
   if (matrix.length () > 4096) // FIXME -- make this configurable.
     {
       float max_val, min_val;
       if (m.all_integers (max_val, min_val))
         st = get_save_type (max_val, min_val);
     }
 
diff --git a/libinterp/octave-value/ov-flt-re-diag.cc b/libinterp/octave-value/ov-flt-re-diag.cc
--- a/libinterp/octave-value/ov-flt-re-diag.cc
+++ b/libinterp/octave-value/ov-flt-re-diag.cc
@@ -98,17 +98,17 @@ octave_float_diag_matrix::map (unary_map
       return matrix.abs ();
     case umap_real:
     case umap_conj:
       return matrix;
     case umap_imag:
       return DiagMatrix (matrix.rows (), matrix.cols (), 0.0);
     case umap_sqrt:
       {
-        FloatComplexColumnVector tmp = matrix.diag ().map<FloatComplex> (rc_sqrt);
+        FloatComplexColumnVector tmp = matrix.extract_diag ().map<FloatComplex> (rc_sqrt);
         FloatComplexDiagMatrix retval (tmp);
         retval.resize (matrix.rows (), matrix.columns ());
         return retval;
       }
     default:
       return to_dense ().map (umap);
     }
 }
@@ -117,17 +117,17 @@ bool
 octave_float_diag_matrix::save_binary (std::ostream& os,
                                        bool& /* save_as_floats*/)
 {
 
   int32_t r = matrix.rows (), c = matrix.cols ();
   os.write (reinterpret_cast<char *> (&r), 4);
   os.write (reinterpret_cast<char *> (&c), 4);
 
-  FloatMatrix m = FloatMatrix (matrix.diag ());
+  FloatMatrix m = FloatMatrix (matrix.extract_diag ());
   save_type st = LS_FLOAT;
   if (matrix.length () > 8192) // FIXME -- make this configurable.
     {
       float max_val, min_val;
       if (m.all_integers (max_val, min_val))
         st = get_save_type (max_val, min_val);
     }
 
diff --git a/libinterp/octave-value/ov-re-diag.cc b/libinterp/octave-value/ov-re-diag.cc
--- a/libinterp/octave-value/ov-re-diag.cc
+++ b/libinterp/octave-value/ov-re-diag.cc
@@ -158,17 +158,17 @@ octave_diag_matrix::map (unary_mapper_t 
       return matrix.abs ();
     case umap_real:
     case umap_conj:
       return matrix;
     case umap_imag:
       return DiagMatrix (matrix.rows (), matrix.cols (), 0.0);
     case umap_sqrt:
       {
-        ComplexColumnVector tmp = matrix.diag ().map<Complex> (rc_sqrt);
+        ComplexColumnVector tmp = matrix.extract_diag ().map<Complex> (rc_sqrt);
         ComplexDiagMatrix retval (tmp);
         retval.resize (matrix.rows (), matrix.columns ());
         return retval;
       }
     default:
       return to_dense ().map (umap);
     }
 }
@@ -176,17 +176,17 @@ octave_diag_matrix::map (unary_mapper_t 
 bool
 octave_diag_matrix::save_binary (std::ostream& os, bool& save_as_floats)
 {
 
   int32_t r = matrix.rows (), c = matrix.cols ();
   os.write (reinterpret_cast<char *> (&r), 4);
   os.write (reinterpret_cast<char *> (&c), 4);
 
-  Matrix m = Matrix (matrix.diag ());
+  Matrix m = Matrix (matrix.extract_diag ());
   save_type st = LS_DOUBLE;
   if (save_as_floats)
     {
       if (m.too_large_for_float ())
         {
           warning ("save: some values too large to save as floats --");
           warning ("save: saving as doubles instead");
         }
diff --git a/liboctave/array/CDiagMatrix.cc b/liboctave/array/CDiagMatrix.cc
--- a/liboctave/array/CDiagMatrix.cc
+++ b/liboctave/array/CDiagMatrix.cc
@@ -231,23 +231,23 @@ ComplexDiagMatrix::fill (const ComplexRo
     elem (i+beg, i+beg) = a.elem (i);
 
   return *this;
 }
 
 DiagMatrix
 ComplexDiagMatrix::abs (void) const
 {
-  return DiagMatrix (diag ().abs (), rows (), columns ());
+  return DiagMatrix (extract_diag ().abs (), rows (), columns ());
 }
 
 ComplexDiagMatrix
 conj (const ComplexDiagMatrix& a)
 {
-  return ComplexDiagMatrix (conj (a.diag ()), a.rows (), a.columns ());
+  return ComplexDiagMatrix (conj (a.extract_diag ()), a.rows (), a.columns ());
 }
 
 // resize is the destructive analog for this one
 
 ComplexMatrix
 ComplexDiagMatrix::extract (octave_idx_type r1, octave_idx_type c1, octave_idx_type r2, octave_idx_type c2) const
 {
   if (r1 > r2) { octave_idx_type tmp = r1; r1 = r2; r2 = tmp; }
@@ -541,17 +541,17 @@ ComplexDiagMatrix::determinant (void) co
     }
 
   return det;
 }
 
 double
 ComplexDiagMatrix::rcond (void) const
 {
-  ColumnVector av = diag (0).map<double> (std::abs);
+  ColumnVector av = extract_diag (0).map<double> (std::abs);
   double amx = av.max (), amn = av.min ();
   return amx == 0 ? 0.0 : amn / amx;
 }
 
 // i/o
 
 std::ostream&
 operator << (std::ostream& os, const ComplexDiagMatrix& a)
diff --git a/liboctave/array/CDiagMatrix.h b/liboctave/array/CDiagMatrix.h
--- a/liboctave/array/CDiagMatrix.h
+++ b/liboctave/array/CDiagMatrix.h
@@ -115,18 +115,18 @@ public:
 
   // diagonal matrix by diagonal matrix -> diagonal matrix operations
 
   ComplexDiagMatrix& operator += (const DiagMatrix& a);
   ComplexDiagMatrix& operator -= (const DiagMatrix& a);
 
   // other operations
 
-  ComplexColumnVector diag (octave_idx_type k = 0) const
-    { return MDiagArray2<Complex>::diag (k); }
+  ComplexColumnVector extract_diag (octave_idx_type k = 0) const
+    { return MDiagArray2<Complex>::extract_diag (k); }
 
   ComplexDET determinant (void) const;
   double rcond (void) const;
 
   // i/o
 
   friend std::ostream& operator << (std::ostream& os, const ComplexDiagMatrix& a);
 
diff --git a/liboctave/array/CMatrix.cc b/liboctave/array/CMatrix.cc
--- a/liboctave/array/CMatrix.cc
+++ b/liboctave/array/CMatrix.cc
@@ -1178,17 +1178,17 @@ ComplexMatrix::pseudo_inverse (double to
   ComplexMatrix retval;
 
   ComplexSVD result (*this, SVD::economy);
 
   DiagMatrix S = result.singular_values ();
   ComplexMatrix U = result.left_singular_matrix ();
   ComplexMatrix V = result.right_singular_matrix ();
 
-  ColumnVector sigma = S.diag ();
+  ColumnVector sigma = S.extract_diag ();
 
   octave_idx_type r = sigma.length () - 1;
   octave_idx_type nr = rows ();
   octave_idx_type nc = cols ();
 
   if (tol <= 0.0)
     {
       if (nr > nc)
diff --git a/liboctave/array/dDiagMatrix.cc b/liboctave/array/dDiagMatrix.cc
--- a/liboctave/array/dDiagMatrix.cc
+++ b/liboctave/array/dDiagMatrix.cc
@@ -136,29 +136,29 @@ DiagMatrix::fill (const RowVector& a, oc
     elem (i+beg, i+beg) = a.elem (i);
 
   return *this;
 }
 
 DiagMatrix
 DiagMatrix::abs (void) const
 {
-  return DiagMatrix (diag ().abs (), rows (), columns ());
+  return DiagMatrix (extract_diag ().abs (), rows (), columns ());
 }
 
 DiagMatrix
 real (const ComplexDiagMatrix& a)
 {
-  return DiagMatrix (real (a.diag ()), a.rows (), a.cols ());
+  return DiagMatrix (real (a.extract_diag ()), a.rows (), a.cols ());
 }
 
 DiagMatrix
 imag (const ComplexDiagMatrix& a)
 {
-  return DiagMatrix (imag (a.diag ()), a.rows (), a.cols ());
+  return DiagMatrix (imag (a.extract_diag ()), a.rows (), a.cols ());
 }
 
 Matrix
 DiagMatrix::extract (octave_idx_type r1, octave_idx_type c1, octave_idx_type r2, octave_idx_type c2) const
 {
   if (r1 > r2) { octave_idx_type tmp = r1; r1 = r2; r2 = tmp; }
   if (c1 > c2) { octave_idx_type tmp = c1; c1 = c2; c2 = tmp; }
 
@@ -357,17 +357,17 @@ DiagMatrix::determinant (void) const
     }
 
   return det;
 }
 
 double
 DiagMatrix::rcond (void) const
 {
-  ColumnVector av = diag (0).map<double> (fabs);
+  ColumnVector av = extract_diag (0).map<double> (fabs);
   double amx = av.max (), amn = av.min ();
   return amx == 0 ? 0.0 : amn / amx;
 }
 
 std::ostream&
 operator << (std::ostream& os, const DiagMatrix& a)
 {
 //  int field_width = os.precision () + 7;
diff --git a/liboctave/array/dDiagMatrix.h b/liboctave/array/dDiagMatrix.h
--- a/liboctave/array/dDiagMatrix.h
+++ b/liboctave/array/dDiagMatrix.h
@@ -93,18 +93,18 @@ public:
   ColumnVector column (char *s) const;
 
   DiagMatrix inverse (void) const;
   DiagMatrix inverse (octave_idx_type& info) const;
   DiagMatrix pseudo_inverse (void) const;
 
   // other operations
 
-  ColumnVector diag (octave_idx_type k = 0) const
-    { return MDiagArray2<double>::diag (k); }
+  ColumnVector extract_diag (octave_idx_type k = 0) const
+    { return MDiagArray2<double>::extract_diag (k); }
 
   DET determinant (void) const;
   double rcond (void) const;
 
   // i/o
 
   friend OCTAVE_API std::ostream& operator << (std::ostream& os, const DiagMatrix& a);
 
diff --git a/liboctave/array/dMatrix.cc b/liboctave/array/dMatrix.cc
--- a/liboctave/array/dMatrix.cc
+++ b/liboctave/array/dMatrix.cc
@@ -851,17 +851,17 @@ Matrix
 Matrix::pseudo_inverse (double tol) const
 {
   SVD result (*this, SVD::economy);
 
   DiagMatrix S = result.singular_values ();
   Matrix U = result.left_singular_matrix ();
   Matrix V = result.right_singular_matrix ();
 
-  ColumnVector sigma = S.diag ();
+  ColumnVector sigma = S.extract_diag ();
 
   octave_idx_type r = sigma.length () - 1;
   octave_idx_type nr = rows ();
   octave_idx_type nc = cols ();
 
   if (tol <= 0.0)
     {
       if (nr > nc)
diff --git a/liboctave/array/fCDiagMatrix.cc b/liboctave/array/fCDiagMatrix.cc
--- a/liboctave/array/fCDiagMatrix.cc
+++ b/liboctave/array/fCDiagMatrix.cc
@@ -231,23 +231,23 @@ FloatComplexDiagMatrix::fill (const Floa
     elem (i+beg, i+beg) = a.elem (i);
 
   return *this;
 }
 
 FloatDiagMatrix
 FloatComplexDiagMatrix::abs (void) const
 {
-  return FloatDiagMatrix (diag ().abs (), rows (), columns ());
+  return FloatDiagMatrix (extract_diag ().abs (), rows (), columns ());
 }
 
 FloatComplexDiagMatrix
 conj (const FloatComplexDiagMatrix& a)
 {
-  return FloatComplexDiagMatrix (conj (a.diag ()), a.rows (), a.columns ());
+  return FloatComplexDiagMatrix (conj (a.extract_diag ()), a.rows (), a.columns ());
 }
 
 // resize is the destructive analog for this one
 
 FloatComplexMatrix
 FloatComplexDiagMatrix::extract (octave_idx_type r1, octave_idx_type c1, octave_idx_type r2, octave_idx_type c2) const
 {
   if (r1 > r2) { octave_idx_type tmp = r1; r1 = r2; r2 = tmp; }
@@ -541,17 +541,17 @@ FloatComplexDiagMatrix::determinant (voi
     }
 
   return det;
 }
 
 float
 FloatComplexDiagMatrix::rcond (void) const
 {
-  FloatColumnVector av = diag (0).map<float> (std::abs);
+  FloatColumnVector av = extract_diag (0).map<float> (std::abs);
   float amx = av.max (), amn = av.min ();
   return amx == 0 ? 0.0f : amn / amx;
 }
 
 // i/o
 
 std::ostream&
 operator << (std::ostream& os, const FloatComplexDiagMatrix& a)
diff --git a/liboctave/array/fCDiagMatrix.h b/liboctave/array/fCDiagMatrix.h
--- a/liboctave/array/fCDiagMatrix.h
+++ b/liboctave/array/fCDiagMatrix.h
@@ -115,18 +115,18 @@ public:
 
   // diagonal matrix by diagonal matrix -> diagonal matrix operations
 
   FloatComplexDiagMatrix& operator += (const FloatDiagMatrix& a);
   FloatComplexDiagMatrix& operator -= (const FloatDiagMatrix& a);
 
   // other operations
 
-  FloatComplexColumnVector diag (octave_idx_type k = 0) const
-    { return MDiagArray2<FloatComplex>::diag (k); }
+  FloatComplexColumnVector extract_diag (octave_idx_type k = 0) const
+    { return MDiagArray2<FloatComplex>::extract_diag (k); }
 
   FloatComplexDET determinant (void) const;
   float rcond (void) const;
 
   // i/o
 
   friend std::ostream& operator << (std::ostream& os, const FloatComplexDiagMatrix& a);
 
diff --git a/liboctave/array/fCMatrix.cc b/liboctave/array/fCMatrix.cc
--- a/liboctave/array/fCMatrix.cc
+++ b/liboctave/array/fCMatrix.cc
@@ -1180,17 +1180,17 @@ FloatComplexMatrix::pseudo_inverse (floa
   FloatComplexMatrix retval;
 
   FloatComplexSVD result (*this, SVD::economy);
 
   FloatDiagMatrix S = result.singular_values ();
   FloatComplexMatrix U = result.left_singular_matrix ();
   FloatComplexMatrix V = result.right_singular_matrix ();
 
-  FloatColumnVector sigma = S.diag ();
+  FloatColumnVector sigma = S.extract_diag ();
 
   octave_idx_type r = sigma.length () - 1;
   octave_idx_type nr = rows ();
   octave_idx_type nc = cols ();
 
   if (tol <= 0.0)
     {
       if (nr > nc)
diff --git a/liboctave/array/fDiagMatrix.cc b/liboctave/array/fDiagMatrix.cc
--- a/liboctave/array/fDiagMatrix.cc
+++ b/liboctave/array/fDiagMatrix.cc
@@ -136,29 +136,29 @@ FloatDiagMatrix::fill (const FloatRowVec
     elem (i+beg, i+beg) = a.elem (i);
 
   return *this;
 }
 
 FloatDiagMatrix
 FloatDiagMatrix::abs (void) const
 {
-  return FloatDiagMatrix (diag ().abs (), rows (), columns ());
+  return FloatDiagMatrix (extract_diag ().abs (), rows (), columns ());
 }
 
 FloatDiagMatrix
 real (const FloatComplexDiagMatrix& a)
 {
-  return FloatDiagMatrix (real (a.diag ()), a.rows (), a.columns ());
+  return FloatDiagMatrix (real (a.extract_diag ()), a.rows (), a.columns ());
 }
 
 FloatDiagMatrix
 imag (const FloatComplexDiagMatrix& a)
 {
-  return FloatDiagMatrix (imag (a.diag ()), a.rows (), a.columns ());
+  return FloatDiagMatrix (imag (a.extract_diag ()), a.rows (), a.columns ());
 }
 
 FloatMatrix
 FloatDiagMatrix::extract (octave_idx_type r1, octave_idx_type c1, octave_idx_type r2, octave_idx_type c2) const
 {
   if (r1 > r2) { octave_idx_type tmp = r1; r1 = r2; r2 = tmp; }
   if (c1 > c2) { octave_idx_type tmp = c1; c1 = c2; c2 = tmp; }
 
@@ -357,17 +357,17 @@ FloatDiagMatrix::determinant (void) cons
     }
 
   return det;
 }
 
 float
 FloatDiagMatrix::rcond (void) const
 {
-  FloatColumnVector av = diag (0).map<float> (fabsf);
+  FloatColumnVector av = extract_diag (0).map<float> (fabsf);
   float amx = av.max (), amn = av.min ();
   return amx == 0 ? 0.0f : amn / amx;
 }
 
 std::ostream&
 operator << (std::ostream& os, const FloatDiagMatrix& a)
 {
 //  int field_width = os.precision () + 7;
diff --git a/liboctave/array/fDiagMatrix.h b/liboctave/array/fDiagMatrix.h
--- a/liboctave/array/fDiagMatrix.h
+++ b/liboctave/array/fDiagMatrix.h
@@ -93,18 +93,18 @@ public:
   FloatColumnVector column (char *s) const;
 
   FloatDiagMatrix inverse (void) const;
   FloatDiagMatrix inverse (octave_idx_type& info) const;
   FloatDiagMatrix pseudo_inverse (void) const;
 
   // other operations
 
-  FloatColumnVector diag (octave_idx_type k = 0) const
-    { return MDiagArray2<float>::diag (k); }
+  FloatColumnVector extract_diag (octave_idx_type k = 0) const
+    { return MDiagArray2<float>::extract_diag (k); }
 
   FloatDET determinant (void) const;
   float rcond (void) const;
 
   // i/o
 
   friend OCTAVE_API std::ostream& operator << (std::ostream& os, const FloatDiagMatrix& a);
 
diff --git a/liboctave/array/fMatrix.cc b/liboctave/array/fMatrix.cc
--- a/liboctave/array/fMatrix.cc
+++ b/liboctave/array/fMatrix.cc
@@ -851,17 +851,17 @@ FloatMatrix
 FloatMatrix::pseudo_inverse (float tol) const
 {
   FloatSVD result (*this, SVD::economy);
 
   FloatDiagMatrix S = result.singular_values ();
   FloatMatrix U = result.left_singular_matrix ();
   FloatMatrix V = result.right_singular_matrix ();
 
-  FloatColumnVector sigma = S.diag ();
+  FloatColumnVector sigma = S.extract_diag ();
 
   octave_idx_type r = sigma.length () - 1;
   octave_idx_type nr = rows ();
   octave_idx_type nc = cols ();
 
   if (tol <= 0.0)
     {
       if (nr > nc)
