# HG changeset patch
# User Soren Hauberg <hauberg@gmail.com>
# Date 1234425863 18000
#      Thu Feb 12 03:04:23 2009 -0500
# Node ID 5a5dbdacbf5d2d8beb869417f55df76772058ca8
# Parent  0f6683a8150a2e586f306abdf3e62998fe137130
scripts/help/lookfor.m: Adapt to new cache scheme.

diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,8 +1,12 @@
+2009-02-12  Soren Hauberg  <hauberg@gmail.com>
+
+	* help/lookfor.m: Adapt to new cache scheme.
+
 2009-02-11  Jaroslav Hajek  <highegg@gmail.com>
 
 	* general/sortrows.m: Employ __sortrows_idx__ when applicable,
 	gripe for sparse matrices.
 
 2009-02-11  John W. Eaton  <jwe@octave.org>
 
 	* miscellaneous/news.m: Look in octetcdir for NEWS file.
diff --git a/scripts/help/lookfor.m b/scripts/help/lookfor.m
--- a/scripts/help/lookfor.m
+++ b/scripts/help/lookfor.m
@@ -49,80 +49,87 @@ function [out_fun, out_help_text] = look
     ## third column contains the first sentence of the help text.
     str = extra;
     search_type = 2; # when using caches, search its second column
   else
     search_type = 3; # when using caches, search its third column
   endif
   str = lower (str);
 
-  ## Search operators, keywords, and built-ins
-  cache_file = fullfile (octave_config_info.datadir, "builtin_cache.mat");
+  ## Search functions, operators, and keywords that come with Octave
+  cache_file = fullfile (octave_config_info.datadir, "etc", "DOC");
   if (exist (cache_file, "file"))
     [fun, help_text] = search_cache (str, cache_file, search_type);
+    had_core_cache = true;
   else
     fun = help_text = {};
+    had_core_cache = false;
   endif
   
   ## Search functions in path
+  pathorig = __pathorig__ ();
   p = path ();
   idx = find (p == pathsep ());
   prev_idx = 1;
   for n = 1:length (idx)
     f = p (prev_idx:idx (n)-1);
-    cache_file = fullfile (f, "help_cache.mat");
-    if (exist (cache_file, "file"))
-      ## We have a cache. Read it and search it!
-      [funs, hts] = search_cache (str, cache_file, search_type);
-      fun (end+1:end+length (funs)) = funs;
-      help_text (end+1:end+length (hts)) = hts;
-    else
+    
+    ## Should we search the directory or has it been covered by the cache?
+    if (!had_core_cache || isempty (findstr (f, pathorig)))
+      cache_file = fullfile (f, "DOC");
+      if (exist (cache_file, "file"))
+        ## We have a cache in the directory, then read it and search it!
+        [funs, hts] = search_cache (str, cache_file, search_type);
+        fun (end+1:end+length (funs)) = funs;
+        help_text (end+1:end+length (hts)) = hts;
+      else
       ## We don't have a cache. Search files
-      funs_in_f = __list_functions__ (f);
-      for m = 1:length (funs_in_f)
-        fn = funs_in_f {m};
+        funs_in_f = __list_functions__ (f);
+        for m = 1:length (funs_in_f)
+          fn = funs_in_f {m};
         
-        ## Skip files that start with __
-        if (length (fn) > 2 && strcmp (fn (1:2), "__"))
-          continue;
-        endif
+          ## Skip files that start with __
+          if (length (fn) > 2 && strcmp (fn (1:2), "__"))
+            continue;
+          endif
         
-        ## Extract first sentence
-        try
-          first_sentence = get_first_help_sentence (fn);
-          status = 0;
-        catch
-          status = 1;
-        end_try_catch
+          ## Extract first sentence
+          try
+            first_sentence = get_first_help_sentence (fn);
+            status = 0;
+          catch
+            status = 1;
+          end_try_catch
 
-        if (search_type == 2) # search entire help text
-          [text, format] = get_help_text (fn);
+          if (search_type == 2) # search entire help text
+            [text, format] = get_help_text (fn);
     
-          ## Take action depending on help text format
-          switch (lower (format))
-            case "plain text"
-              status = 0;
-            case "texinfo"
-              [text, status] = makeinfo (text, "plain text");
-            case "html"
-              [text, status] = strip_html_tags (text);
-            otherwise
-              status = 1;
-          endswitch
+            ## Take action depending on help text format
+            switch (lower (format))
+              case "plain text"
+                status = 0;
+              case "texinfo"
+                [text, status] = makeinfo (text, "plain text");
+              case "html"
+                [text, status] = strip_html_tags (text);
+              otherwise
+                status = 1;
+            endswitch
 
-        elseif (status == 0) # only search the first sentence of the help text
-          text = first_sentence;
-        endif
+          elseif (status == 0) # only search the first sentence of the help text
+            text = first_sentence;
+          endif
         
-        ## Search the help text, if we can
-        if (status == 0 && !isempty (strfind (text, str)))
-          fun (end+1) = fn;
-          help_text (end+1) = first_sentence;
-        endif
-      endfor
+          ## Search the help text, if we can
+          if (status == 0 && !isempty (strfind (text, str)))
+            fun (end+1) = fn;
+            help_text (end+1) = first_sentence;
+          endif
+        endfor
+      endif
     endif
     prev_idx = idx (n) + 1;
   endfor
   
   if (nargout == 0)
     ## Print the results (FIXME: improve this to make it look better.
     indent = 20;
     term_width = terminal_size() (2);
