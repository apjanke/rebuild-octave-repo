# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1363335782 14400
#      Fri Mar 15 04:23:02 2013 -0400
# Node ID 49ebf4ad558b30892aed811161d13489fad83094
# Parent  62791b1f06cb31f985cc5e9443e2a2811d0e5290
* symbfact.cc (Fsymbfact): Use CHOLMOD_NAME to access allocate_sparse and free_sparse functions.

diff --git a/libinterp/dldfcn/symbfact.cc b/libinterp/dldfcn/symbfact.cc
--- a/libinterp/dldfcn/symbfact.cc
+++ b/libinterp/dldfcn/symbfact.cc
@@ -287,35 +287,36 @@ factorization as determined by @var{typ}
 
 
           /* create a copy of the column pointers */
           octave_idx_type *W = First;
           for (octave_idx_type j = 0 ; j < n ; j++)
             W[j] = L.xcidx (j);
 
           // get workspace for computing one row of L
-          cholmod_sparse *R = cholmod_allocate_sparse (n, 1, n, false, true,
-                                                       0, CHOLMOD_PATTERN, cm);
+          cholmod_sparse *R
+            = CHOLMOD_NAME (allocate_sparse) (n, 1, n, false, true,
+                                              0, CHOLMOD_PATTERN, cm);
           octave_idx_type *Rp = static_cast<octave_idx_type *>(R->p);
           octave_idx_type *Ri = static_cast<octave_idx_type *>(R->i);
 
           // compute L one row at a time
           for (octave_idx_type k = 0 ; k < n ; k++)
             {
               // get the kth row of L and store in the columns of L
               CHOLMOD_NAME (row_subtree) (A1, A2, k, Parent, R, cm) ;
               for (octave_idx_type p = 0 ; p < Rp[1] ; p++)
                 L.xridx (W[Ri[p]]++) = k ;
 
               // add the diagonal entry
               L.xridx (W[k]++) = k ;
             }
 
           // free workspace
-          cholmod_free_sparse (&R, cm) ;
+          CHOLMOD_NAME (free_sparse) (&R, cm) ;
 
 
           // transpose L to get R, or leave as is
           if (nargin < 3)
             L = L.transpose ();
 
           // fill numerical values of L with one's
           for (octave_idx_type p = 0 ; p < lnz ; p++)
