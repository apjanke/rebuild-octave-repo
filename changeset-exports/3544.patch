# HG changeset patch
# User jwe
# Date 949525361 0
#      Wed Feb 02 21:02:41 2000 +0000
# Node ID 71bd2d12411972526632a7b076014f0da06a10dd
# Parent  c5b996022ef78adf6f217d15bd6bdc043bea3b35
[project @ 2000-02-02 21:02:31 by jwe]

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,10 +1,14 @@
 2000-02-02  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
+	* ov.h (octave_value::do_multi_index_op): Rename from do_index_op.
+
+	* ov-fcn.h (octave_function::is_system_fcn_file): Now const.
+
 	* Map.cc (index_to_CHptr): Now a macro.
 	(CHMap<C>::hash): Now a member function.
 
 	* defun-int.h (UNDERSCORIFY): New macro.
 	(DEFCONST_INTERNAL, DEFCONSTX_INTERNAL): Use it.
 
 	* data.cc (Fis_list): Fix continuation char.
 	* defaults.cc (IMAGEPATH): Likewise.
diff --git a/src/DLD-FUNCTIONS/dassl.cc b/src/DLD-FUNCTIONS/dassl.cc
--- a/src/DLD-FUNCTIONS/dassl.cc
+++ b/src/DLD-FUNCTIONS/dassl.cc
@@ -81,17 +81,17 @@ dassl_user_function (const ColumnVector&
       octave_value state (d1);
       octave_value deriv (d2);
       args(1) = deriv;
       args(0) = state;
     }
 
   if (dassl_fcn)
     {
-      octave_value_list tmp = dassl_fcn->do_index_op (1, args);
+      octave_value_list tmp = dassl_fcn->do_multi_index_op (1, args);
 
       if (error_state)
 	{
 	  gripe_user_supplied_eval ("dassl");
 	  return retval;
 	}
 
       if (tmp.length () > 0 && tmp(0).is_defined ())
diff --git a/src/DLD-FUNCTIONS/fsolve.cc b/src/DLD-FUNCTIONS/fsolve.cc
--- a/src/DLD-FUNCTIONS/fsolve.cc
+++ b/src/DLD-FUNCTIONS/fsolve.cc
@@ -104,17 +104,17 @@ fsolve_user_function (const ColumnVector
     {
       double d = x (0);
       octave_value vars (d);
       args(0) = vars;
     }
 
   if (fsolve_fcn)
     {
-      octave_value_list tmp = fsolve_fcn->do_index_op (1, args);
+      octave_value_list tmp = fsolve_fcn->do_multi_index_op (1, args);
       if (tmp.length () > 0 && tmp(0).is_defined ())
 	{
 	  retval = ColumnVector (tmp(0).vector_value ());
 
 	  if (error_state || retval.length () <= 0)
 	    gripe_user_supplied_eval ("fsolve");
 	}
       else
diff --git a/src/DLD-FUNCTIONS/lsode.cc b/src/DLD-FUNCTIONS/lsode.cc
--- a/src/DLD-FUNCTIONS/lsode.cc
+++ b/src/DLD-FUNCTIONS/lsode.cc
@@ -65,17 +65,17 @@ lsode_user_function (const ColumnVector&
   Matrix m (nstates, 1);
   for (int i = 0; i < nstates; i++)
     m (i, 0) = x (i);
   octave_value state (m);
   args(0) = state;
 
   if (lsode_fcn)
     {
-      octave_value_list tmp = lsode_fcn->do_index_op (1, args);
+      octave_value_list tmp = lsode_fcn->do_multi_index_op (1, args);
 
       if (error_state)
 	{
 	  gripe_user_supplied_eval ("lsode");
 	  return retval;
 	}
 
       if (tmp.length () > 0 && tmp(0).is_defined ())
@@ -105,17 +105,17 @@ lsode_user_jacobian (const ColumnVector&
   Matrix m (nstates, 1);
   for (int i = 0; i < nstates; i++)
     m (i, 0) = x (i);
   octave_value state (m);
   args(0) = state;
 
   if (lsode_jac)
     {
-      octave_value_list tmp = lsode_jac->do_index_op (1, args);
+      octave_value_list tmp = lsode_jac->do_multi_index_op (1, args);
 
       if (error_state)
 	{
 	  gripe_user_supplied_eval ("lsode");
 	  return retval;
 	}
 
       if (tmp.length () > 0 && tmp(0).is_defined ())
diff --git a/src/DLD-FUNCTIONS/quad.cc b/src/DLD-FUNCTIONS/quad.cc
--- a/src/DLD-FUNCTIONS/quad.cc
+++ b/src/DLD-FUNCTIONS/quad.cc
@@ -58,17 +58,17 @@ quad_user_function (double x)
 {
   double retval = 0.0;
 
   octave_value_list args;
   args(0) = x;
 
   if (quad_fcn)
     {
-      octave_value_list tmp = quad_fcn->do_index_op (1, args);
+      octave_value_list tmp = quad_fcn->do_multi_index_op (1, args);
 
       if (error_state)
 	{
 	  quad_integration_error = 1;  // XXX FIXME XXX
 	  gripe_user_supplied_eval ("quad");
 	  return retval;
 	}
 
diff --git a/src/file-io.cc b/src/file-io.cc
--- a/src/file-io.cc
+++ b/src/file-io.cc
@@ -99,39 +99,39 @@ fopen_mode_to_ios_mode (const std::strin
 {
   int retval = 0;
 
   if (! mode.empty ())
     {
       // Could probably be faster, but does it really matter?
 
       if (mode == "r")
-	retval = ios::in;
+	retval = std::ios::in;
       else if (mode == "w")
-	retval = ios::out | ios::trunc;
+	retval = std::ios::out | std::ios::trunc;
       else if (mode == "a")
-	retval = ios::out | ios::app;
+	retval = std::ios::out | std::ios::app;
       else if (mode == "r+")
-	retval = ios::in | ios::out;
+	retval = std::ios::in | std::ios::out;
       else if (mode == "w+")
-	retval = ios::in | ios::out | ios::trunc;
+	retval = std::ios::in | std::ios::out | std::ios::trunc;
       else if (mode == "a+")
-	retval = ios::in | ios::out | ios::app;
+	retval = std::ios::in | std::ios::out | std::ios::app;
       else if (mode == "rb")
-	retval = ios::in | ios::bin;
+	retval = std::ios::in | std::ios::bin;
       else if (mode == "wb")
-	retval = ios::out | ios::trunc | ios::bin;
+	retval = std::ios::out | std::ios::trunc | std::ios::bin;
       else if (mode == "ab")
-	retval = ios::out | ios::app | ios::bin;
+	retval = std::ios::out | std::ios::app | std::ios::bin;
       else if (mode == "r+b")
-	retval = ios::in | ios::out | ios::bin;
+	retval = std::ios::in | std::ios::out | std::ios::bin;
       else if (mode == "w+b")
-	retval = ios::in | ios::out | ios::trunc | ios::bin;
+	retval = std::ios::in | std::ios::out | std::ios::trunc | std::ios::bin; 
       else if (mode == "a+b")
-	retval = ios::in | ios::out | ios::app | ios::bin;
+	retval = std::ios::in | std::ios::out | std::ios::app | std::ios::bin;
       else
 	::error ("invalid mode specified");
     }
 
   return retval;
 }
 
 DEFUN (is_stream, args, ,
diff --git a/src/oct-fstrm.cc b/src/oct-fstrm.cc
--- a/src/oct-fstrm.cc
+++ b/src/oct-fstrm.cc
@@ -26,25 +26,26 @@ Software Foundation, 59 Temple Place - S
 
 #include <cerrno>
 #include <cstring>
 
 #include "error.h"
 #include "oct-fstrm.h"
 
 octave_stream
-octave_fstream::create (const std::string& nm_arg, ios::openmode md,
+octave_fstream::create (const std::string& nm_arg, std::ios::openmode md,
 			oct_mach_info::float_format flt_fmt)
 {
   return octave_stream (new octave_fstream (nm_arg, md, flt_fmt));
 }
 
-octave_fstream::octave_fstream (const std::string& nm_arg,
-				ios::openmode md = ios::in|ios::out,
-				oct_mach_info::float_format flt_fmt)
+octave_fstream::octave_fstream
+  (const std::string& nm_arg,
+   std::ios::openmode md = std::ios::in|std::ios::out,
+   oct_mach_info::float_format flt_fmt)
   : octave_base_stream (md, flt_fmt), nm (nm_arg)
 {
   // Override default protection of 0664 so that umask will appear to
   // do the right thing.
 
   fs.open (nm.c_str (), md, 0666);
 
   if (! fs)
@@ -53,17 +54,17 @@ octave_fstream::octave_fstream (const st
 
       error (strerror (errno));
     }
 }
 
 // Position a stream at OFFSET relative to ORIGIN.
 
 int
-octave_fstream::seek (streamoff offset, ios::seek_dir origin)
+octave_fstream::seek (streamoff offset, std::ios::seek_dir origin)
 {
   int retval = -1;
 
   if (! fs.bad ())
     {
       fs.clear ();
 
       filebuf *fb = fs.rdbuf ();
@@ -83,17 +84,17 @@ octave_fstream::seek (streamoff offset, 
 long
 octave_fstream::tell (void) const
 {
   long retval = -1;
 
   if (fs)
     {
       filebuf *fb = fs.rdbuf ();
-      retval = static_cast<long> (fb->seekoff (0, ios::cur));
+      retval = static_cast<long> (fb->seekoff (0, std::ios::cur));
     }
 
   return retval;
 }
 
 // Return non-zero if EOF has been reached on this stream.
 
 bool
@@ -102,28 +103,28 @@ octave_fstream::eof (void) const
   return fs.eof ();
 }
 
 std::istream *
 octave_fstream::input_stream (void)
 {
   std::istream *retval = 0;
 
-  if (mode () & ios::in)
+  if (mode () & std::ios::in)
     retval = &fs;
 
   return retval;
 }
 
 std::ostream *
 octave_fstream::output_stream (void)
 {
   std::ostream *retval = 0;
 
-  if (mode () & ios::out)
+  if (mode () & std::ios::out)
     retval = &fs;
 
   return retval;
 }
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
diff --git a/src/oct-fstrm.h b/src/oct-fstrm.h
--- a/src/oct-fstrm.h
+++ b/src/oct-fstrm.h
@@ -28,27 +28,28 @@ Software Foundation, 59 Temple Place - S
 #include "oct-stream.h"
 
 class
 octave_fstream : public octave_base_stream
 {
 public:
 
   octave_fstream (const std::string& nm_arg,
-		  ios::openmode md = ios::in|ios::out,
+		  std::ios::openmode md = std::ios::in|std::ios::out,
 		  oct_mach_info::float_format flt_fmt =
 		  oct_mach_info::native);
 
   static octave_stream
-  create (const std::string& nm_arg, ios::openmode md = ios::in|ios::out,
+  create (const std::string& nm_arg,
+	  std::ios::openmode md = std::ios::in|std::ios::out,
 	  oct_mach_info::float_format flt_fmt = oct_mach_info::native);
 
   // Position a stream at OFFSET relative to ORIGIN.
 
-  int seek (streamoff offset, ios::seek_dir origin);
+  int seek (streamoff offset, std::ios::seek_dir origin);
 
   // Return current stream position.
 
   long tell (void) const;
 
   // Return non-zero if EOF has been reached on this stream.
 
   bool eof (void) const;
diff --git a/src/oct-hist.cc b/src/oct-hist.cc
--- a/src/oct-hist.cc
+++ b/src/oct-hist.cc
@@ -109,17 +109,17 @@ std::string
 default_history_file (void)
 {
   std::string file;
 
   std::string env_file = octave_env::getenv ("OCTAVE_HISTFILE");
 
   if (! env_file.empty ())
     {
-      fstream f (env_file.c_str (), (ios::in | ios::out));
+      fstream f (env_file.c_str (), (std::ios::in | std::ios::out));
 
       if (f)
 	{
 	  file = env_file;
 	  f.close ();
 	}
     }
 
@@ -400,17 +400,17 @@ mk_tmp_hist_file (int argc, const string
       int t = hist_end;
       hist_end = hist_beg;
       hist_beg = t;
       reverse = 1;
     }
 
   std::string name = file_ops::tempnam ("", "oct-");
 
-  fstream file (name.c_str (), ios::out);
+  fstream file (name.c_str (), std::ios::out);
 
   if (! file)
     {
       error ("%s: couldn't open temporary file `%s'", warn_for,
 	     name.c_str ());
       return retval;
     }
 
@@ -452,17 +452,17 @@ do_edit_history (int argc, const string_
 
   system (cmd.c_str ());
 
   octave_set_interrupt_handler (old_interrupt_handler);
 
   // Write the commands to the history file since parse_and_execute
   // disables command line history while it executes.
 
-  fstream file (name.c_str (), ios::in);
+  fstream file (name.c_str (), std::ios::in);
 
   char *line;
   int first = 1;
   while ((line = edit_history_readline (file)) != 0)
     {
       // Skip blank lines.
 
       if (line[0] == '\n')
diff --git a/src/oct-iostrm.cc b/src/oct-iostrm.cc
--- a/src/oct-iostrm.cc
+++ b/src/oct-iostrm.cc
@@ -25,17 +25,17 @@ Software Foundation, 59 Temple Place - S
 #endif
 
 #include "error.h"
 #include "oct-iostrm.h"
 
 // Position a stream at OFFSET relative to ORIGIN.
 
 int
-octave_base_iostream::seek (streamoff, ios::seek_dir)
+octave_base_iostream::seek (streamoff, std::ios::seek_dir)
 {
   invalid_operation ();
   return -1;
 }
 
 // Return current stream position.
 
 long
diff --git a/src/oct-iostrm.h b/src/oct-iostrm.h
--- a/src/oct-iostrm.h
+++ b/src/oct-iostrm.h
@@ -28,24 +28,24 @@ Software Foundation, 59 Temple Place - S
 #include "oct-stream.h"
 
 class
 octave_base_iostream : public octave_base_stream
 {
 public:
 
   octave_base_iostream (const std::string& n = std::string (),
-			ios::openmode md = ios::in|ios::out,
+			std::ios::openmode md = std::ios::in|std::ios::out,
 			oct_mach_info::float_format flt_fmt =
 			oct_mach_info::native)
     : octave_base_stream (md, flt_fmt), nm (n) { }
 
   // Position a stream at OFFSET relative to ORIGIN.
 
-  int seek (streamoff offset, ios::seek_dir origin);
+  int seek (streamoff offset, std::ios::seek_dir origin);
 
   // Return current stream position.
 
   long tell (void) const;
 
   // Return non-zero if EOF has been reached on this stream.
 
   bool eof (void) const;
@@ -74,17 +74,17 @@ private:
 };
 
 class
 octave_istream : public octave_base_iostream
 {
 public:
 
   octave_istream (std::istream *arg = 0, const std::string& nm = std::string ())
-    : octave_base_iostream (nm, ios::in, oct_mach_info::native),
+    : octave_base_iostream (nm, std::ios::in, oct_mach_info::native),
       is (arg) { }
 
   static octave_stream
   create (std::istream *arg = 0, const std::string& nm = std::string ());
 
   // Return non-zero if EOF has been reached on this stream.
 
   bool eof (void) const;
@@ -111,17 +111,17 @@ private:
 };
 
 class
 octave_ostream : public octave_base_iostream
 {
 public:
 
   octave_ostream (std::ostream *arg, const std::string& nm = std::string ())
-    : octave_base_iostream (nm, ios::out, oct_mach_info::native),
+    : octave_base_iostream (nm, std::ios::out, oct_mach_info::native),
       os (arg) { }
 
   static octave_stream
   create (std::ostream *arg, const std::string& nm = std::string ());
 
   // Return non-zero if EOF has been reached on this stream.
 
   bool eof (void) const;
diff --git a/src/oct-prcstrm.cc b/src/oct-prcstrm.cc
--- a/src/oct-prcstrm.cc
+++ b/src/oct-prcstrm.cc
@@ -24,24 +24,24 @@ Software Foundation, 59 Temple Place - S
 #include <config.h>
 #endif
 
 #include <cstdio>
 
 #include "oct-prcstrm.h"
 
 octave_stream
-octave_iprocstream::create (const std::string& n, ios::openmode arg_md,
+octave_iprocstream::create (const std::string& n, std::ios::openmode arg_md,
 			    oct_mach_info::float_format flt_fmt)
 {
   return octave_stream (new octave_iprocstream (n, arg_md, flt_fmt));
 }
 
 octave_iprocstream::octave_iprocstream (const std::string& n,
-					ios::openmode arg_md,
+					std::ios::openmode arg_md,
 					oct_mach_info::float_format flt_fmt)
   : octave_istdiostream (n, 0, arg_md, flt_fmt)
 {
   fp = popen (n.c_str (), "r");
 
   if (fp)
     {
       delete is;
@@ -54,24 +54,24 @@ octave_iprocstream::~octave_iprocstream 
   if (fp)
     {
       pclose (fp);
       fp = 0;
     }
 }
 
 octave_stream
-octave_oprocstream::create (const std::string& n, ios::openmode arg_md,
+octave_oprocstream::create (const std::string& n, std::ios::openmode arg_md,
 			    oct_mach_info::float_format flt_fmt)
 {
   return octave_stream (new octave_oprocstream (n, arg_md, flt_fmt));
 }
 
 octave_oprocstream::octave_oprocstream (const std::string& n,
-					ios::openmode arg_md,
+					std::ios::openmode arg_md,
 					oct_mach_info::float_format flt_fmt)
   : octave_ostdiostream (n, 0, arg_md, flt_fmt)
 {
   fp = popen (n.c_str (), "w");
 
   if (fp)
     {
       delete os;
diff --git a/src/oct-prcstrm.h b/src/oct-prcstrm.h
--- a/src/oct-prcstrm.h
+++ b/src/oct-prcstrm.h
@@ -26,22 +26,22 @@ Software Foundation, 59 Temple Place - S
 #include "oct-stdstrm.h"
 
 class
 octave_iprocstream : public octave_istdiostream
 {
 public:
 
   octave_iprocstream (const std::string& n,
-		      ios::openmode arg_md = ios::in,
+		      std::ios::openmode arg_md = std::ios::in,
 		      oct_mach_info::float_format flt_fmt =
 		      oct_mach_info::native);
 
   static octave_stream
-  create (const std::string& n, ios::openmode arg_md = ios::in,
+  create (const std::string& n, std::ios::openmode arg_md = std::ios::in,
 	  oct_mach_info::float_format flt_fmt = oct_mach_info::native);
 
 protected:
 
   ~octave_iprocstream (void);
 
 private:
 
@@ -53,22 +53,22 @@ private:
 };
 
 class
 octave_oprocstream : public octave_ostdiostream
 {
 public:
 
   octave_oprocstream (const std::string& n,
-		      ios::openmode arg_md = ios::out,
+		      std::ios::openmode arg_md = std::ios::out,
 		      oct_mach_info::float_format flt_fmt =
 		      oct_mach_info::native);
 
   static octave_stream
-  create (const std::string& n, ios::openmode arg_md = ios::out,
+  create (const std::string& n, std::ios::openmode arg_md = std::ios::out,
 	  oct_mach_info::float_format flt_fmt = oct_mach_info::native);
 
 protected:
 
   ~octave_oprocstream (void);
 
 private:
 
diff --git a/src/oct-procbuf.cc b/src/oct-procbuf.cc
--- a/src/oct-procbuf.cc
+++ b/src/oct-procbuf.cc
@@ -64,27 +64,27 @@ static octave_procbuf *octave_procbuf_li
 
 octave_procbuf *
 octave_procbuf::open (const char *command, int mode)
 {
 #if defined (HAVE_SYS_WAIT_H)
 
   int pipe_fds[2];
 
-  volatile int child_std_end = (mode & ios::in) ? 1 : 0;
+  volatile int child_std_end = (mode & std::ios::in) ? 1 : 0;
 
   volatile int parent_end, child_end;
 
   if (is_open ())
     return 0;
 
   if (pipe (pipe_fds) < 0)
     return 0;
 
-  if (mode & ios::in)
+  if (mode & std::ios::in)
     {
       parent_end = pipe_fds[0];
       child_end = pipe_fds[1];
     }
   else
     {
       parent_end = pipe_fds[1];
       child_end = pipe_fds[0];
diff --git a/src/oct-stdstrm.cc b/src/oct-stdstrm.cc
--- a/src/oct-stdstrm.cc
+++ b/src/oct-stdstrm.cc
@@ -35,17 +35,17 @@ octave_base_stdiostream::~octave_base_st
       fclose (fp);
       fp = 0;
     }
 }
 
 // Position a stream at OFFSET relative to ORIGIN.
 
 int
-octave_base_stdiostream::seek (streamoff offset, ios::seek_dir origin)
+octave_base_stdiostream::seek (streamoff offset, std::ios::seek_dir origin)
 {
   int retval = -1;
 
   if (! bad ())
     {
       stdiobuf *sb = rdbuf ();
 
       if (sb)
diff --git a/src/oct-stdstrm.h b/src/oct-stdstrm.h
--- a/src/oct-stdstrm.h
+++ b/src/oct-stdstrm.h
@@ -27,25 +27,25 @@ Software Foundation, 59 Temple Place - S
 
 #include "oct-stream.h"
 
 class
 octave_base_stdiostream : public octave_base_stream
 {
 public:
 
-  octave_base_stdiostream (const std::string& n, FILE *f,
-			   ios::openmode arg_md = ios::in|ios::out,
-			   oct_mach_info::float_format flt_fmt =
-			   oct_mach_info::native)
+  octave_base_stdiostream
+    (const std::string& n, FILE *f,
+     std::ios::openmode arg_md = std::ios::in|std::ios::out,
+     oct_mach_info::float_format flt_fmt = oct_mach_info::native)
     : octave_base_stream (arg_md, flt_fmt), nm (n), fp (f) { }
 
   // Position a stream at OFFSET relative to ORIGIN.
 
-  int seek (streamoff offset, ios::seek_dir origin);
+  int seek (streamoff offset, std::ios::seek_dir origin);
 
   // Return current stream position.
 
   long tell (void) const;
 
   // The name of the file.
 
   std::string name (void) const { return nm; }
@@ -72,22 +72,23 @@ protected:
 };
 
 class
 octave_istdiostream : public octave_base_stdiostream
 {
 public:
 
   octave_istdiostream (const std::string& n, FILE *f = 0,
-		       ios::openmode arg_md = ios::in,
+		       std::ios::openmode arg_md = std::ios::in,
 		       oct_mach_info::float_format flt_fmt =
 		       oct_mach_info::native);
 
   static octave_stream
-  create (const std::string& n, FILE *f = 0, ios::openmode arg_md = ios::in,
+  create (const std::string& n, FILE *f = 0,
+	  std::ios::openmode arg_md = std::ios::in,
 	  oct_mach_info::float_format flt_fmt = oct_mach_info::native);
 
   // Return non-zero if EOF has been reached on this stream.
 
   bool eof (void) const { return is ? is->eof () : true; }
 
   std::istream *input_stream (void) { return is; }
 
@@ -121,22 +122,23 @@ private:
 };
 
 class
 octave_ostdiostream : public octave_base_stdiostream
 {
 public:
 
   octave_ostdiostream (const std::string& n, FILE *f = 0,
-		       ios::openmode arg_md = ios::out,
+		       std::ios::openmode arg_md = std::ios::out,
 		       oct_mach_info::float_format flt_fmt =
 		       oct_mach_info::native);
 
   static octave_stream
-  create (const std::string& n, FILE *f = 0, ios::openmode arg_md = ios::out,
+  create (const std::string& n, FILE *f = 0,
+	  std::ios::openmode arg_md = std::ios::out,
 	  oct_mach_info::float_format flt_fmt = oct_mach_info::native);
 
   // Return non-zero if EOF has been reached on this stream.
 
   bool eof (void) const { return os ? os->eof () : true; }
 
   std::istream *input_stream (void) { return 0; }
 
diff --git a/src/oct-stream.h b/src/oct-stream.h
--- a/src/oct-stream.h
+++ b/src/oct-stream.h
@@ -222,29 +222,29 @@ private:
 
 class
 octave_base_stream
 {
 friend class octave_stream;
 
 public:
 
-  octave_base_stream (ios::openmode arg_md = ios::in|ios::out,
+  octave_base_stream (std::ios::openmode arg_md = std::ios::in|std::ios::out,
 		      oct_mach_info::float_format ff = oct_mach_info::native)
     : count (0), md (arg_md), flt_fmt (ff), fail (false), open_state (true)
   { }
 
   virtual ~octave_base_stream (void) { }
 
   // The remaining functions are not specific to input or output only,
   // and must be provided by the derived classes.
 
   // Position a stream at OFFSET relative to ORIGIN.
 
-  virtual int seek (streamoff offset, ios::seek_dir origin) = 0;
+  virtual int seek (streamoff offset, std::ios::seek_dir origin) = 0;
 
   // Return current stream position.
 
   virtual long tell (void) const = 0;
 
   // Return TRUE if EOF has been reached on this stream.
 
   virtual bool eof (void) const = 0;
@@ -294,17 +294,17 @@ protected:
   void clear (void);
 
 private:
 
   // A reference count.
   int count;
 
   // The permission bits for the file.  Should be some combination of
-  // ios::open_mode bits.
+  // std::ios::open_mode bits.
   int md;
 
   // Data format.
   oct_mach_info::float_format flt_fmt;
 
   // TRUE if an error has occurred.
   bool fail;
 
@@ -393,17 +393,17 @@ public:
   int flush (void);
 
   std::string getl (int max_len, bool& err);
   std::string getl (const octave_value& max_len, bool& err);
 
   std::string gets (int max_len, bool& err);
   std::string gets (const octave_value& max_len, bool& err);
 
-  int seek (streamoff offset, ios::seek_dir origin);
+  int seek (streamoff offset, std::ios::seek_dir origin);
   int seek (const octave_value& offset, const octave_value& origin);
 
   long tell (void) const;
 
   int rewind (void);
 
   bool is_open (void) const;
 
diff --git a/src/oct-strstrm.cc b/src/oct-strstrm.cc
--- a/src/oct-strstrm.cc
+++ b/src/oct-strstrm.cc
@@ -24,17 +24,17 @@ Software Foundation, 59 Temple Place - S
 #include <config.h>
 #endif
 
 #include "oct-strstrm.h"
 
 // Position a stream at OFFSET relative to ORIGIN.
 
 int
-octave_base_strstream::seek (streamoff offset, ios::seek_dir origin)
+octave_base_strstream::seek (streamoff offset, std::ios::seek_dir origin)
 {
   int retval = -1;
 
   if (! bad ())
     {
       std::streambuf *sb = rdbuf ();
 
       if (sb)
@@ -59,42 +59,42 @@ octave_base_strstream::tell (void) const
   if (! bad ())
     {
       // XXX FIXME XXX -- shouldn't have to do this!
 
       std::streambuf *sb = (const_cast<octave_base_strstream *>(this))->rdbuf ();
 
       if (sb)
 	{
-	  retval = static_cast<long> (sb->seekoff (0, ios::cur));
+	  retval = static_cast<long> (sb->seekoff (0, std::ios::cur));
 
 	  if (bad ())
 	    retval = -1;
 	}
     }
 
   return retval;
 }
 
 octave_stream
-octave_istrstream::create (const char *data, ios::openmode arg_md,
+octave_istrstream::create (const char *data, std::ios::openmode arg_md,
 			   oct_mach_info::float_format flt_fmt)
 {
   return octave_stream (new octave_istrstream (data, arg_md, flt_fmt));
 }
 
 octave_stream
-octave_istrstream::create (const std::string& data, ios::openmode arg_md,
+octave_istrstream::create (const std::string& data, std::ios::openmode arg_md,
 			   oct_mach_info::float_format flt_fmt)
 {
   return octave_stream (new octave_istrstream (data, arg_md, flt_fmt));
 }
 
 octave_stream
-octave_ostrstream::create (ios::openmode arg_md,
+octave_ostrstream::create (std::ios::openmode arg_md,
 			   oct_mach_info::float_format flt_fmt)
 {
   return octave_stream (new octave_ostrstream (arg_md, flt_fmt));
 }
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
diff --git a/src/ov-base.cc b/src/ov-base.cc
--- a/src/ov-base.cc
+++ b/src/ov-base.cc
@@ -56,17 +56,17 @@ octave_value
 octave_base_value::do_index_op (const octave_value_list&)
 {
   std::string nm = type_name ();
   error ("can't perform indexing operations for %s type", nm.c_str ());
   return octave_value ();
 }
 
 octave_value_list
-octave_base_value::do_index_op (int, const octave_value_list&)
+octave_base_value::do_multi_index_op (int, const octave_value_list&)
 {
   std::string nm = type_name ();
   error ("can't perform indexing operations for %s type", nm.c_str ());
   return octave_value ();
 }
 
 idx_vector
 octave_base_value::index_vector (void) const
diff --git a/src/ov-base.h b/src/ov-base.h
--- a/src/ov-base.h
+++ b/src/ov-base.h
@@ -67,17 +67,18 @@ public:
   type_conv_fcn numeric_conversion_function (void) const
     { return static_cast<type_conv_fcn> (0); }
 
   octave_value *try_narrowing_conversion (void)
     { return static_cast<octave_value *> (0); }
 
   octave_value do_index_op (const octave_value_list& idx);
 
-  octave_value_list do_index_op (int nargout, const octave_value_list& idx);
+  octave_value_list
+  do_multi_index_op (int nargout, const octave_value_list& idx);
 
   idx_vector index_vector (void) const;
 
   octave_value
   do_struct_elt_index_op (const std::string& nm, const octave_value_list& idx,
 			  bool silent);
 
   octave_value do_struct_elt_index_op (const std::string& nm, bool silent);
diff --git a/src/ov-builtin.cc b/src/ov-builtin.cc
--- a/src/ov-builtin.cc
+++ b/src/ov-builtin.cc
@@ -47,17 +47,17 @@ any_arg_is_magic_colon (const octave_val
   for (int i = 0; i < nargin; i++)
     if (args(i).is_magic_colon ())
       return true;
 
   return false;
 }
 
 octave_value_list
-octave_builtin::do_index_op (int nargout, const octave_value_list& args)
+octave_builtin::do_multi_index_op (int nargout, const octave_value_list& args)
 {
   octave_value_list retval;
 
   if (error_state)
     return retval;
 
   if (any_arg_is_magic_colon (args))
     ::error ("invalid use of colon in function argument list");
diff --git a/src/ov-builtin.h b/src/ov-builtin.h
--- a/src/ov-builtin.h
+++ b/src/ov-builtin.h
@@ -49,17 +49,18 @@ public:
     : octave_function (nm, ds), f (ff) { }
 
   ~octave_builtin (void) { }
 
   octave_function *function_value (bool) { return this; }
 
   bool is_builtin_function (void) const { return true; }
 
-  octave_value_list do_index_op (int nargout, const octave_value_list& args);
+  octave_value_list
+  do_multi_index_op (int nargout, const octave_value_list& args);
 
 protected:
 
   // A pointer to the actual function.
   fcn f;
 
 private:
 
diff --git a/src/ov-fcn.h b/src/ov-fcn.h
--- a/src/ov-fcn.h
+++ b/src/ov-fcn.h
@@ -55,17 +55,17 @@ public:
   octave_function *clone (void);
 
   bool is_defined (void) const { return true; }
 
   bool is_function (void) const { return true; }
 
   virtual bool is_dynamically_loaded_function (void) const { return false; }
 
-  virtual bool is_system_fcn_file (void) { return false; }
+  virtual bool is_system_fcn_file (void) const { return false; }
 
   virtual std::string fcn_file_name (void) const { return std::string (); }
 
   virtual void mark_fcn_file_up_to_date (const octave_time&) { }
 
   virtual octave_time time_parsed (void) const
     { return octave_time (static_cast<time_t> (0)); }
 
diff --git a/src/ov-mapper.cc b/src/ov-mapper.cc
--- a/src/ov-mapper.cc
+++ b/src/ov-mapper.cc
@@ -226,17 +226,17 @@ octave_mapper::apply (const octave_value
       else
 	gripe_wrong_type_arg ("mapper", arg);
     }
 
   return retval;
 }
 
 octave_value_list
-octave_mapper::do_index_op (int, const octave_value_list& args)
+octave_mapper::do_multi_index_op (int, const octave_value_list& args)
 {
   octave_value retval;
 
   if (error_state)
     return retval;
 
   int nargin = args.length ();
 
diff --git a/src/ov-mapper.h b/src/ov-mapper.h
--- a/src/ov-mapper.h
+++ b/src/ov-mapper.h
@@ -58,17 +58,18 @@ public:
       d_b_map_fcn (db), c_b_map_fcn (cb),
       d_d_map_fcn (dd), d_c_map_fcn (dc), c_c_map_fcn (cc),
       lower_limit (ll), upper_limit (ul), flag (f) { }
 
   ~octave_mapper (void) { }
 
   octave_function *function_value (bool) { return this; }
 
-  octave_value_list do_index_op (int nargout, const octave_value_list& args);
+  octave_value_list
+  do_multi_index_op (int nargout, const octave_value_list& args);
 
 private:
 
   octave_mapper (void);
 
   octave_mapper (const octave_mapper& m);
 
   octave_value apply (const octave_value& arg) const;
diff --git a/src/ov-usr-fcn.cc b/src/ov-usr-fcn.cc
--- a/src/ov-usr-fcn.cc
+++ b/src/ov-usr-fcn.cc
@@ -249,17 +249,18 @@ clear_args_passed (void *fcn)
 static void
 unprotect_function (void *sr_arg)
 {
   symbol_record *sr = static_cast<symbol_record *> (sr_arg);
   sr->unprotect ();
 }
 
 octave_value_list
-octave_user_function::do_index_op (int nargout, const octave_value_list& args)
+octave_user_function::do_multi_index_op (int nargout,
+					 const octave_value_list& args)
 {
   octave_value_list retval;
 
   if (error_state)
     return retval;
 
   if (! cmd_list)
     return retval;
diff --git a/src/ov-usr-fcn.h b/src/ov-usr-fcn.h
--- a/src/ov-usr-fcn.h
+++ b/src/ov-usr-fcn.h
@@ -108,17 +108,18 @@ public:
   void stash_function_name (const std::string& s);
 
   std::string function_name (void)
     { return fcn_name; }
 
   void clear_args_passed (void)
     { args_passed = octave_value_list (); }
 
-  octave_value_list do_index_op (int nargout, const octave_value_list& args);
+  octave_value_list
+  do_multi_index_op (int nargout, const octave_value_list& args);
 
   void traceback_error (void);
 
   tree_parameter_list *parameter_list (void) { return param_list; }
 
   tree_parameter_list *return_list (void) { return ret_list; }
 
   tree_statement_list *body (void) { return cmd_list; }
diff --git a/src/ov.cc b/src/ov.cc
--- a/src/ov.cc
+++ b/src/ov.cc
@@ -545,19 +545,19 @@ octave_value::maybe_mutate (void)
 	delete rep;
 
       rep = tmp;
       rep->count = 1;
     }    
 }
 
 octave_value_list
-octave_value::do_index_op (int nargout, const octave_value_list& idx)
+octave_value::do_multi_index_op (int nargout, const octave_value_list& idx)
 {
-  return rep->do_index_op (nargout, idx);
+  return rep->do_multi_index_op (nargout, idx);
 }
 
 static void
 gripe_no_conversion (const std::string& on, const std::string& tn1, const std::string& tn2)
 {
   error ("operator %s: no conversion for assignment of `%s' to indexed `%s'",
 	 on.c_str (), tn2.c_str (), tn1.c_str ());
 }
diff --git a/src/ov.h b/src/ov.h
--- a/src/ov.h
+++ b/src/ov.h
@@ -232,17 +232,17 @@ public:
 
   virtual octave_value *try_narrowing_conversion (void)
     { return rep->try_narrowing_conversion (); }
 
   virtual octave_value do_index_op (const octave_value_list& idx)
     { return rep->do_index_op (idx); }
 
   virtual octave_value_list
-  do_index_op (int nargout, const octave_value_list& idx);
+  do_multi_index_op (int nargout, const octave_value_list& idx);
 
   void assign (assign_op, const octave_value& rhs);
 
   void assign (assign_op, const octave_value_list& idx,
 	       const octave_value& rhs);
 
   virtual void
   assign_struct_elt (assign_op, const std::string& elt_nm,
diff --git a/src/pager.cc b/src/pager.cc
--- a/src/pager.cc
+++ b/src/pager.cc
@@ -236,17 +236,17 @@ octave_pager_buf::sync (void)
 			       && Vpage_screen_output
 			       && ! Vpage_output_immediately
 			       && ! more_than_a_screenful (buf, len)));
 
       if (len > 0)
 	{
 	  do_sync (buf, len, bypass_pager);
 
-	  seekoff (0, ios::beg);
+	  seekoff (0, std::ios::beg);
 
 	  octave_diary.write (buf, len);
 	}
     }
 
   return 0;
 }
 
@@ -266,17 +266,17 @@ octave_diary_buf::sync (void)
   if (write_to_diary_file && external_diary_file)
     {
       int len = pptr () - eback ();
 
       if (len > 0)
 	external_diary_file.write (eback (), len);
     }
 
-  seekoff (0, ios::beg);
+  seekoff (0, std::ios::beg);
 
   return 0;
 }
 
 octave_pager_stream *octave_pager_stream::instance = 0;
 
 octave_pager_stream::octave_pager_stream (void) : std::ostream (), pb (0)
 {
@@ -376,17 +376,17 @@ close_diary_file (void)
     }
 }
 
 static void
 open_diary_file (void)
 {
   close_diary_file ();
 
-  external_diary_file.open (diary_file.c_str (), ios::app);
+  external_diary_file.open (diary_file.c_str (), std::ios::app);
 
   if (! external_diary_file)
     error ("diary: can't open diary file `%s'", diary_file.c_str ());
 }
 
 DEFUN_TEXT (diary, args, ,
   "-*- texinfo -*-\n\
 @deffn {Command} diary options\n\
diff --git a/src/parse.y b/src/parse.y
--- a/src/parse.y
+++ b/src/parse.y
@@ -3164,17 +3164,17 @@ be named @file{@var{file}.m}.\n\
 octave_value_list
 feval (const std::string& name, const octave_value_list& args, int nargout)
 {
   octave_value_list retval;
 
   octave_function *fcn = is_valid_function (name, "feval", 1);
 
   if (fcn)
-    retval = fcn->do_index_op (nargout, args);
+    retval = fcn->do_multi_index_op (nargout, args);
 
   return retval;
 }
 
 octave_value_list
 feval (const octave_value_list& args, int nargout)
 {
   octave_value_list retval;
diff --git a/src/procstream.cc b/src/procstream.cc
--- a/src/procstream.cc
+++ b/src/procstream.cc
@@ -30,37 +30,37 @@ Software Foundation, 59 Temple Place - S
 
 #include "procstream.h"
 
 procstreambase::procstreambase (const char *command, int mode)
 {
   pb_init ();
 
   if (! pb.open (command, mode))
-    set (ios::badbit);
+    set (std::ios::badbit);
 }
 
 void
 procstreambase::open (const char *command, int mode)
 {
   clear ();
 
   if (! pb.open (command, mode))
-    set (ios::badbit);
+    set (std::ios::badbit);
 }
 
 int
 procstreambase::close (void)
 {
   int status = 0;
 
   if (is_open ())
     {
       if (! pb.close ())
-	set (ios::failbit);
+	set (std::ios::failbit);
 
       status = pb.wait_status ();
     }
 
   return status;
 }
 
 /*
diff --git a/src/procstream.h b/src/procstream.h
--- a/src/procstream.h
+++ b/src/procstream.h
@@ -31,17 +31,17 @@ Software Foundation, 59 Temple Place - S
 
 #ifdef HAVE_SYS_TYPES_H
 #include <sys/types.h>
 #endif
 
 #include "oct-procbuf.h"
 
 class
-procstreambase : virtual public ios
+procstreambase : virtual public std::ios
 {
 public:
 
   procstreambase (void) { pb_init (); }
 
   procstreambase (const char *name, int mode);
 
   ~procstreambase (void) { close (); }
@@ -67,44 +67,44 @@ private:
 
 class
 iprocstream : public procstreambase, public std::istream
 {
 public:
 
   iprocstream (void) : procstreambase () { }
 
-  iprocstream (const char *name, int mode=ios::in)
+  iprocstream (const char *name, int mode = std::ios::in)
     : procstreambase(name, mode) { }
 
   ~iprocstream (void) { }
 
-  void open (const char *name, int mode=ios::in)
+  void open (const char *name, int mode = std::ios::in)
     { procstreambase::open (name, mode); }
 
 private:
 
   iprocstream (const iprocstream&);
 
   iprocstream& operator = (const iprocstream&);
 };
 
 class
 oprocstream : public procstreambase, public std::ostream
 {
 public:
  
   oprocstream (void) : procstreambase () { }
 
-  oprocstream (const char *name, int mode=ios::out)
+  oprocstream (const char *name, int mode = std::ios::out)
     : procstreambase(name, mode) { }
 
   ~oprocstream (void) { }
 
-  void open (const char *name, int mode=ios::out)
+  void open (const char *name, int mode = std::ios::out)
     { procstreambase::open(name, mode); }
 
 private:
 
   oprocstream (const oprocstream&);
 
   oprocstream& operator = (const oprocstream&);
 };
diff --git a/src/pt-id.cc b/src/pt-id.cc
--- a/src/pt-id.cc
+++ b/src/pt-id.cc
@@ -161,17 +161,17 @@ tree_identifier::rvalue (int nargout)
 	  // handle indexing.  Otherwise, arrange to call the function
 	  // here, so that we don't return the function definition as
 	  // a value.
 
 	  if (val.is_function () && ! is_postfix_indexed ())
 	    {
 	      octave_value_list tmp_args;
 
-	      retval = val.do_index_op (nargout, tmp_args);
+	      retval = val.do_multi_index_op (nargout, tmp_args);
 	    }
 	  else
 	    {
 	      if (print_result () && nargout == 0)
 		val.print_with_name (octave_stdout, name ());
 
 	      retval = val;
 	    }
diff --git a/src/pt-idx.cc b/src/pt-idx.cc
--- a/src/pt-idx.cc
+++ b/src/pt-idx.cc
@@ -80,17 +80,17 @@ tree_index_expression::rvalue (int nargo
 	{
 	  if (! args.empty ())
 	    args.stash_name_tags (arg_nm);
 
 	  // XXX FIXME XXX -- is this the right thing to do?
 	  if (tmp.is_constant ())
 	    retval = tmp.do_index_op (args);
 	  else
-	    retval = tmp.do_index_op (nargout, args);
+	    retval = tmp.do_multi_index_op (nargout, args);
 	}
       else
 	eval_error ();
     }
   else
     eval_error ();
 
   return retval;
diff --git a/src/symtab.cc b/src/symtab.cc
--- a/src/symtab.cc
+++ b/src/symtab.cc
@@ -90,17 +90,17 @@ SYMBOL_DEF::type (std::ostream& os, cons
   if (is_user_function ())
     {
       octave_function *defn = definition.function_value ();
 
       std::string fn = defn ? defn->fcn_file_name () : std::string ();
 
       if (pr_orig_txt && ! fn.empty ())
 	{
-	  std::ifstream fs (fn.c_str (), ios::in);
+	  std::ifstream fs (fn.c_str (), std::ios::in);
 
 	  if (fs)
 	    {
 	      if (pr_type_info && ! quiet)
 		os << name << " is the " << type_as_string ()
 		   << " defined from: " << fn << "\n\n";
 
 	      char ch;
@@ -448,34 +448,34 @@ void
 symbol_record::print_symbol_info_line (std::ostream& os)
 {
   os << (is_read_only () ? " r-" : " rw")
      << (is_eternal () ? "-" : "d")
 #if 0
      << (hides_fcn () ? "f" : (hides_builtin () ? "F" : "-"))
 #endif
      << "  "
-     << setiosflags (ios::left) << setw (24) << type_name () . c_str ();
+     << setiosflags (std::ios::left) << setw (24) << type_name () . c_str ();
 
-  os << resetiosflags (ios::left);
+  os << resetiosflags (std::ios::left);
 
   int nr = rows ();
   int nc = columns ();
 
   if (nr < 0)
     os << "      -";
   else
-    os << setiosflags (ios::right) << setw (7) << nr;
+    os << setiosflags (std::ios::right) << setw (7) << nr;
 
   if (nc < 0)
     os << "      -";
   else
-    os << setiosflags (ios::right) << setw (7) << nc;
+    os << setiosflags (std::ios::right) << setw (7) << nc;
 
-  os << resetiosflags (ios::right);
+  os << resetiosflags (std::ios::right);
 
   os << "  " << name () << "\n";
 }
 
 void
 symbol_record::dump_symbol_info (void)
 {
   if (definition)
