# HG changeset patch
# User Rik <rik@octave.org>
# Date 1551662140 28800
#      Sun Mar 03 17:15:40 2019 -0800
# Node ID 10c9f39d0d17ac1e5de81d5c293b15a16fe2037c
# Parent  ca40628fff391cac4b1b36f28ce3fc680a05ace8
# Parent  677764865056ce97f892c0c6a011e7772749823f
maint: merge stable to default.

diff --git a/scripts/plot/draw/private/__quiver__.m b/scripts/plot/draw/private/__quiver__.m
--- a/scripts/plot/draw/private/__quiver__.m
+++ b/scripts/plot/draw/private/__quiver__.m
@@ -38,24 +38,25 @@ function hg = __quiver__ (varargin)
   if (isempty (firstnonnumeric))
     firstnonnumeric = Inf;
   else
     firstnonnumeric += 2;
   endif
 
   ioff = 3;
   if (nargin < (6 + is3d) || firstnonnumeric < (6 + is3d))
+    if (is3d)
+      z = varargin{ioff++};
+    endif
     u = varargin{ioff++};
     v = varargin{ioff++};
     if (is3d)
       w = varargin{ioff++};
-      [x, y, z] = meshgrid (1:columns (u), 1:rows (u), 1:max (size (w)));
-    else
-      [x, y] = meshgrid (1:columns (u), 1:rows (u));
     endif
+    [x, y] = meshgrid (1:columns (u), 1:rows (u));
     if (nargin >= ioff && isnumeric (varargin{ioff})
         && isscalar (varargin{ioff}))
       autoscale = varargin{ioff++};
     endif
   else
     x = varargin{ioff++};
     y = varargin{ioff++};
     if (is3d)
diff --git a/scripts/plot/draw/quiver3.m b/scripts/plot/draw/quiver3.m
--- a/scripts/plot/draw/quiver3.m
+++ b/scripts/plot/draw/quiver3.m
@@ -12,35 +12,34 @@
 ## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 ## GNU General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <https://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
-## @deftypefn  {} {} quiver3 (@var{u}, @var{v}, @var{w})
 ## @deftypefnx {} {} quiver3 (@var{x}, @var{y}, @var{z}, @var{u}, @var{v}, @var{w})
+## @deftypefn  {} {} quiver3 (@var{z}, @var{u}, @var{v}, @var{w})
 ## @deftypefnx {} {} quiver3 (@dots{}, @var{s})
 ## @deftypefnx {} {} quiver3 (@dots{}, @var{style})
 ## @deftypefnx {} {} quiver3 (@dots{}, "filled")
 ## @deftypefnx {} {} quiver3 (@var{hax}, @dots{})
 ## @deftypefnx {} {@var{h} =} quiver3 (@dots{})
 ##
 ## Plot a 3-D vector field with arrows.
 ##
 ## Plot the (@var{u}, @var{v}, @var{w}) components of a vector field at the
 ## grid points defined by (@var{x}, @var{y}, @var{z}).  If the grid is uniform
 ## then @var{x}, @var{y}, and @var{z} can be specified as vectors and
 ## @code{meshgrid} is used to create the 3-D grid.
 ##
-## If @var{x}, @var{y}, and @var{z} are not given they are assumed to be
-## @code{(1:@var{m}, 1:@var{n}, 1:@var{p})} where
-## @code{[@var{m}, @var{n}] = size (@var{u})} and
-## @code{@var{p} = max (size (@var{w}))}.
+## If @var{x} and @var{y} are not given they are assumed to be
+## @code{(1:@var{m}, 1:@var{n})} where
+## @code{[@var{m}, @var{n}] = size (@var{u})}.
 ##
 ## The optional input @var{s} is a scalar defining a scaling factor to use for
 ## the arrows of the field relative to the mesh spacing.  A value of 1.0 will
 ## result in the longest vector exactly filling one grid cube.  A value of 0
 ## disables all scaling.  The default value is 0.9.
 ##
 ## The style to use for the plot can be defined with a line style @var{style}
 ## of the same format as the @code{plot} command.  If a marker is specified
