# HG changeset patch
# User Richard Zweig <richard.zweig@gmx.de>
# Date 1502497436 -7200
#      Sat Aug 12 02:23:56 2017 +0200
# Branch stable
# Node ID 437ba51e8bcf2626058c8ebe8f0c185dd81f42fc
# Parent  6ae0292aaa5c3a43db197076db82541831d5a204
Fix segfault in ichol under certain conditions (bug #51736).

* __ichol__.cc (ichol_t): New variable std::vector<bool> mark to record whether
column has been processed.  Test whether column has already been processed
before beginning operations.

diff --git a/libinterp/corefcn/__ichol__.cc b/libinterp/corefcn/__ichol__.cc
--- a/libinterp/corefcn/__ichol__.cc
+++ b/libinterp/corefcn/__ichol__.cc
@@ -253,37 +253,39 @@ void ichol_t (const octave_matrix_t& sm,
   Array <T> data_out_l (dim_vector (max_len, 1));
   T* data_l = data_out_l.fortran_vec ();
 
   // Working arrays
   OCTAVE_LOCAL_BUFFER (T, w_data, n);
   OCTAVE_LOCAL_BUFFER (octave_idx_type, Lfirst, n);
   OCTAVE_LOCAL_BUFFER (octave_idx_type, Llist, n);
   OCTAVE_LOCAL_BUFFER (T, col_drops, n);
-  std::vector <octave_idx_type> vec;
-  vec.resize (n);
+  std::vector<octave_idx_type> vec (n, 0);
+  std::vector<bool> mark (n, false);
 
   T zero = T (0);
   cidx_l[0] = cidx[0];
   for (i = 0; i < n; i++)
     {
       Llist[i] = -1;
       Lfirst[i] = -1;
       w_data[i] = 0;
       col_drops[i] = zero;
-      vec[i] = 0;
     }
 
   total_len = 0;
   for (k = 0; k < n; k++)
     {
       ind = 0;
       for (j = cidx[k]; j < cidx[k+1]; j++)
         {
           w_data[ridx[j]] = data[j];
+          // Mark column index, intentionally outside the if-clause to ensure
+          // that mark[k] will be set to true as well.
+          mark[ridx[j]] = true;
           if (ridx[j] != k)
             {
               vec[ind] = ridx[j];
               ind++;
             }
         }
       jrow = Llist[k];
       while (jrow != -1)
@@ -291,18 +293,19 @@ void ichol_t (const octave_matrix_t& sm,
           jjrow = Lfirst[jrow];
           jend = cidx_l[jrow+1];
           for (jj = jjrow; jj < jend; jj++)
             {
               j = ridx_l[jj];
               // If the element in the j position of the row is zero,
               // then it will become non-zero, so we add it to the
               // vector that tracks non-zero elements in the working row.
-              if (w_data[j] == zero)
+              if (! mark[j])
                 {
+                  mark[j] = true;
                   vec[ind] = j;
                   ind++;
                 }
               w_data[j] -= ichol_mult (data_l[jj], data_l[jjrow]);
             }
           // Update the actual column first element and
           // update the linked list of the jrow row.
           if ((jjrow + 1) < jend)
@@ -354,18 +357,20 @@ void ichol_t (const octave_matrix_t& sm,
                     }
                 }
               else
                 {
                   data_l[total_len + w_len] = w_data[jrow];
                   ridx_l[total_len + w_len] = jrow;
                   w_len++;
                 }
-              vec[i] = 0;
             }
+          // Clear mark, vec, and w_data.  However, mark[k] is not set to zero.
+          mark[jrow] = false;
+          vec[i] = 0;
           w_data[jrow] = zero;
         }
 
       // Compensate column sums --> michol option
       if (opt == ON)
         data_l[total_len] += col_drops[k];
 
       if (data_l[total_len] == zero)
