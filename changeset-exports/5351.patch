# HG changeset patch
# User dbateman
# Date 1116274056 0
#      Mon May 16 20:07:36 2005 +0000
# Node ID 05adf9de76572dd68eb75c4ce5b30898eee1e2bc
# Parent  ad44a165950dcc373f14a2412458e92a60a35e3e
[project @ 2005-05-16 20:07:36 by dbateman]

diff --git a/ChangeLog b/ChangeLog
--- a/ChangeLog
+++ b/ChangeLog
@@ -1,8 +1,12 @@
+2005-05-16  David Bateman  <dbateman@free.fr>
+
+	* configure.in: Change UMFPACK_LONG_IDX to IDX_TYPE_LONG.
+
 2005-05-04  John W. Eaton  <jwe@octave.org>
 
 	* configure.in (AC_CHECK_LIB($zlib_lib, ...)): Check for
 	gzclearerr instead of deflate.
 
 2005-05-02  John W. Eaton  <jwe@octave.org>
 
 	* configure.in (AC_ARG_WITH(umfpack)): List -lumfpack ahead of -lamd.
diff --git a/configure.in b/configure.in
--- a/configure.in
+++ b/configure.in
@@ -24,17 +24,17 @@ dnl Copyright (C) 1996, 1997 John W. Eat
 ### Preserve CFLAGS and CXXFLAGS from the environment before doing
 ### anything else because we don't know which macros might call
 ### AC_PROG_CC or AC_PROG_CXX.
 
 EXTERN_CFLAGS="$CFLAGS"
 EXTERN_CXXFLAGS="$CXXFLAGS"
 
 AC_INIT
-AC_REVISION($Revision: 1.477 $)
+AC_REVISION($Revision: 1.478 $)
 AC_PREREQ(2.57)
 AC_CONFIG_SRCDIR([src/octave.cc])
 AC_CONFIG_HEADER(config.h)
 
 AC_DEFINE(OCTAVE_SOURCE, 1, [Define if this is Octave.])
   
 OCTAVE_HOST_TYPE
 
@@ -155,17 +155,17 @@ if $USE_64_BIT_IDX_T; then
   AC_CHECK_SIZEOF(void *)
   AC_CHECK_SIZEOF(int)
   AC_CHECK_SIZEOF(long)
   if test $ac_cv_sizeof_void_p -eq 8; then
     if test $ac_cv_sizeof_int -eq 8; then
       OCTAVE_IDX_TYPE=int
     elif test $ac_cv_sizeof_long -eq 8; then
       OCTAVE_IDX_TYPE=long
-      AC_DEFINE(UMFPACK_LONG_IDX, 1, [Define to 1 to use long int versions of UMFPACK])
+      AC_DEFINE(IDX_TYPE_LONG, 1, [Define to 1 if octave index type is long])
     else
       AC_MSG_WARN([no suitable type found for octave_idx_type so disabling 64-bit features])    
       USE_64_BIT_IDX_T=false
     fi
   else
     warn_64_bit="pointers are not 64-bits wide so disabling 64-bit features"
     AC_MSG_WARN($warn_64_bit)
     USE_64_BIT_IDX_T=false
diff --git a/liboctave/CSparse.h b/liboctave/CSparse.h
--- a/liboctave/CSparse.h
+++ b/liboctave/CSparse.h
@@ -418,17 +418,17 @@ SPARSE_SMS_BOOL_OP_DECLS (SparseComplexM
 SPARSE_SSM_CMP_OP_DECLS (Complex, SparseComplexMatrix)
 SPARSE_SSM_BOOL_OP_DECLS (Complex, SparseComplexMatrix)
 
 SPARSE_SMSM_CMP_OP_DECLS (SparseComplexMatrix, SparseComplexMatrix)
 SPARSE_SMSM_BOOL_OP_DECLS (SparseComplexMatrix, SparseComplexMatrix)
 
 SPARSE_FORWARD_DEFS (MSparse, SparseComplexMatrix, ComplexMatrix, Complex)
 
-#ifdef UMFPACK_LONG_IDX
+#ifdef IDX_TYPE_LONG
 #define UMFPACK_ZNAME(name) umfpack_zl_ ## name
 #else
 #define UMFPACK_ZNAME(name) umfpack_zi_ ## name
 #endif
 
 #endif
 
 /*
diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,13 @@
+2005-05-16  David Bateman  <dbateman@free.fr>
+
+	* dSparse.h: Change UMFPACK_LONG_IDX to IDX_TYPE_LONG.
+	* CSparse.h: ditto.
+
 2005-05-10  David Bateman <dbateman@free.fr>
 
 	* dSparse.cc (determinant): Free numeric factorization after
 	sucessful calculation.
 	* CSparse.cc (determinant): ditto.
 
 2005-05-06  John W. Eaton  <jwe@octave.org>
 
diff --git a/liboctave/dSparse.h b/liboctave/dSparse.h
--- a/liboctave/dSparse.h
+++ b/liboctave/dSparse.h
@@ -399,17 +399,17 @@ SPARSE_SMS_BOOL_OP_DECLS (SparseMatrix, 
 SPARSE_SSM_CMP_OP_DECLS (double, SparseMatrix)
 SPARSE_SSM_BOOL_OP_DECLS (double, SparseMatrix)
 
 SPARSE_SMSM_CMP_OP_DECLS (SparseMatrix, SparseMatrix)
 SPARSE_SMSM_BOOL_OP_DECLS (SparseMatrix, SparseMatrix)
 
 SPARSE_FORWARD_DEFS (MSparse, SparseMatrix, Matrix, double)
 
-#ifdef UMFPACK_LONG_IDX
+#ifdef IDX_TYPE_LONG
 #define UMFPACK_DNAME(name) umfpack_dl_ ## name
 #else
 #define UMFPACK_DNAME(name) umfpack_di_ ## name
 #endif
 
 #endif
 
 /*
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,30 @@
+2005-05-16  David Bateman  <dbateman@free.fr>
+
+	* ls-mat.cc (save_mat5_binary_element): Increase size of 
+	compression buffer.
+	(load_mat5_binary_element): Allow ASCII encoded as UTF8,
+	and give error messages for multi-byte UTF8 and UTF16 and UTF32
+	encodings.
+
+	* ls-hdf5.h (H5T_NATIVE_IDX): New macro defining native indexing
+	type for HDF5 files
+
+	* ls-hdf5.cc (save_hdf5_empty, load_hdf5_empty): Use 
+	H5T_NATIVE_IDX to allow 64-bit indexing.
+	* ov-bool-sparse.cc (save_hdf5, load_hdf5): ditto.
+	* ov-re-sparse.cc (save_hdf5, load_hdf5): ditto.
+	* ov-cx-sparse.cc (save_hdf5, load_hdf5): ditto.
+	* ov-cell.cc (save_hdf5, load_hdf5): ditto.
+
+	* load-save.cc (parse_save_options): Remove -nozip option.
+	(Fsave): If user defines file format, ignore completely the default
+	file format options.
+	
 2005-05-12  John W. Eaton  <jwe@octave.org>
 
 	* Makefile.in (oct-gperf.h): Try harder to cause Make to exit here
 	if gperf is missing or fails to create a valid file.
 
 2005-05-10  John W. Eaton  <jwe@octave.org>
 
 	* lex.l (<MATRIX_START>{SNLCMT}*\]{S}*): If whitespace was gobbled,
diff --git a/src/load-save.cc b/src/load-save.cc
--- a/src/load-save.cc
+++ b/src/load-save.cc
@@ -1146,20 +1146,16 @@ parse_save_options (const string_vector 
 	{
 	  save_builtins = true;
 	}
 #ifdef HAVE_ZLIB
       else if (argv[i] == "-zip" || argv[i] == "-z")
 	{
 	  use_zlib  = true;
 	}
-      else if (argv[i] == "-nozip" || argv[i] == "-nz")
-	{
-	  use_zlib  = false;
-	}
 #endif
       else
 	break;
     }
 
   return i;
 }
 
@@ -1510,22 +1506,16 @@ Octave does not save built-in variables.
 @item -zip\n\
 @itemx -z\n\
 Use the gzip algorithm to compress the file. This works equally on files that\n\
 are compressed with gzip outside of octave, and gzip can equally be used to\n\
 convert the files for backward compatibility."
 
 HAVE_ZLIB_HELP_STRING
 
-"@item -nozip\n\
-@itemx -nz\n\
-Disable the use of the file compression."
-
-HAVE_ZLIB_HELP_STRING
-
 "@end table\n\
 \n\
 The list of variables to save may include wildcard patterns containing\n\
 the following special characters:\n\
 @table @code\n\
 @item ?\n\
 Match any single character.\n\
 \n\
@@ -1575,21 +1565,29 @@ the file @file{data} in Octave's binary 
   bool save_as_floats = false;
 
   load_save_format format = LS_ASCII;
 
   bool append = false;
 
   bool use_zlib = false;
 
-  parse_save_options (Vdefault_save_options, format, append, save_as_floats, 
-		      save_builtins, use_zlib, 0);
-  
+  load_save_format user_file_format = LS_UNKNOWN;
+  bool dummy;
+
+  // Get user file format
+  parse_save_options (argv, argc, user_file_format, dummy, 
+		      dummy, dummy, dummy, 1);
+
+  if (user_file_format == LS_UNKNOWN)
+    parse_save_options (Vdefault_save_options, format, append, save_as_floats, 
+			save_builtins, use_zlib, 0);
+
   int i = parse_save_options (argv, argc, format, append, save_as_floats, 
-			      save_builtins, use_zlib, 1);
+			  save_builtins, use_zlib, 1);
 
   if (error_state)
     return retval;
 
   if (i == argc)
     {
       print_usage ("save");
       return retval;
diff --git a/src/ls-hdf5.cc b/src/ls-hdf5.cc
--- a/src/ls-hdf5.cc
+++ b/src/ls-hdf5.cc
@@ -331,17 +331,19 @@ hdf5_read_next_data (hid_t group_id, con
 
 	  H5Sclose (space_id);
 	}
       else if (type_class_id == H5T_INTEGER)
 	{
 	  // What integer type do we really have..
 	  std::string int_typ;
 #ifdef HAVE_H5T_GET_NATIVE_TYPE
-	  // XXX FIXME XX test this code and activated with an autoconf test!!
+	  // XXX FIXME XX test this code and activated with an autoconf 
+	  // test!! It is also incorrect for 64-bit indexing!!
+	  
 	  switch (H5Tget_native_type (type_id, H5T_DIR_ASCEND))
 	    {
 	    case H5T_NATIVE_CHAR:
 	      int_typ = "int8 ";
 	      break;
  
 	    case H5T_NATIVE_SHORT:
 	      int_typ = "int16 ";
@@ -618,42 +620,42 @@ hdf5_add_attr (hid_t loc_id, const char 
 // Save an empty matrix, if needed. Returns
 //    > 0  Saved empty matrix
 //    = 0  Not an empty matrix; did nothing
 //    < 0  Error condition
 int
 save_hdf5_empty (hid_t loc_id, const char *name, const dim_vector d)
 {
   hsize_t sz = d.length ();
-  int dims[sz];
+  octave_idx_type dims[sz];
   bool empty = false;
   hid_t space_hid = -1, data_hid = -1;
   int retval;
   for (hsize_t i = 0; i < sz; i++)
     {
       dims[i] = d(i);
       if (dims[i] < 1)
 	empty = true;
     }
 
   if (!empty)
     return 0;
 
   space_hid = H5Screate_simple (1, &sz, (hsize_t *) 0);
   if (space_hid < 0) return space_hid;
 
-  data_hid = H5Dcreate (loc_id, name, H5T_NATIVE_INT, space_hid, 
+  data_hid = H5Dcreate (loc_id, name, H5T_NATIVE_IDX, space_hid, 
 			H5P_DEFAULT);
   if (data_hid < 0)
     {
       H5Sclose (space_hid);
       return data_hid;
     }
   
-  retval = H5Dwrite (data_hid, H5T_NATIVE_INT, H5S_ALL, H5S_ALL,
+  retval = H5Dwrite (data_hid, H5T_NATIVE_IDX, H5S_ALL, H5S_ALL,
 		     H5P_DEFAULT, (void*) dims) >= 0;
 
   H5Dclose (data_hid);
   H5Sclose (space_hid);
 
   if (retval >= 0)
     retval = hdf5_add_attr (loc_id, "OCTAVE_EMPTY_MATRIX");
   
@@ -669,20 +671,21 @@ load_hdf5_empty (hid_t loc_id, const cha
 {
   if (!hdf5_check_attr(loc_id, "OCTAVE_EMPTY_MATRIX"))
     return 0;
 
   hsize_t hdims, maxdims;
   hid_t data_hid = H5Dopen (loc_id, name);
   hid_t space_id = H5Dget_space (data_hid);
   H5Sget_simple_extent_dims (space_id, &hdims, &maxdims);
-  int dims[hdims];
   int retval;
 
-  retval = H5Dread (data_hid, H5T_NATIVE_INT, H5S_ALL, H5S_ALL, 
+  OCTAVE_LOCAL_BUFFER (octave_idx_type, dims, hdims);
+
+  retval = H5Dread (data_hid, H5T_NATIVE_IDX, H5S_ALL, H5S_ALL, 
 		    H5P_DEFAULT, (void *) dims);
   if (retval >= 0)
     {
       d.resize (hdims);
       for (hsize_t i = 0; i < hdims; i++)
 	d(i) = dims[i];
     }
 
diff --git a/src/ls-hdf5.h b/src/ls-hdf5.h
--- a/src/ls-hdf5.h
+++ b/src/ls-hdf5.h
@@ -168,16 +168,22 @@ extern std::string
 read_hdf5_data (std::istream& is,  const std::string& filename, bool& global,
 		octave_value& tc, std::string& doc);
 
 extern bool
 save_hdf5_data (std::ostream& os, const octave_value& tc,
 		const std::string& name, const std::string& doc,
 		bool mark_as_global, bool save_as_floats);
 
+#ifdef IDX_TYPE_LONG
+#define H5T_NATIVE_IDX H5T_NATIVE_LONG
+#else
+#define H5T_NATIVE_IDX H5T_NATIVE_INT
+#endif
+
 #endif
 
 #endif
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
diff --git a/src/ls-mat5.cc b/src/ls-mat5.cc
--- a/src/ls-mat5.cc
+++ b/src/ls-mat5.cc
@@ -109,16 +109,17 @@ read_mat5_binary_data (std::istream& is,
 {
   
   switch (type)
     {
     case miINT8:
       read_doubles (is, data, LS_CHAR, count, swap, flt_fmt);
       break;
 
+    case miUTF8:
     case miUINT8:
       read_doubles (is, data, LS_U_CHAR, count, swap, flt_fmt);
       break;
 
     case miINT16:
       read_doubles (is, data, LS_SHORT, count, swap, flt_fmt);
       break;
 
@@ -900,20 +901,57 @@ read_mat5_binary_element (std::istream& 
 
 	    for (int i = 0; i < n; i++)
 	      ctmp(i) = Complex (re(i), im(i));
 
 	    tc = ctmp;
 	  }
 	else
 	  {
-	    tc = re;
+	    if (arrayclass == mxCHAR_CLASS)
+	      {
+		if (type == miUTF16 || type == miUTF32)
+		  {
+		    error ("load: can not read Unicode UTF16 and UTF32 encoded characters");
+		    goto data_read_error;
+		  }
+		else if (type == miUTF8)
+		  {
+		    // Search for multi-byte encoded UTF8 characters and
+		    // replace with 0x3F for '?'... Give the user a warning
 
-	    if (arrayclass == mxCHAR_CLASS)
-	      tc = tc.convert_to_str (false, true, '\'');
+		    bool utf8_multi_byte = false;
+		    for (int i = 0; i < n; i++)
+		      {
+			unsigned char a = static_cast<char> (re(i));
+			if (a > 0x7f)
+			  utf8_multi_byte = true;
+			else
+			  i++;
+		      }
+		    
+		    if (utf8_multi_byte)
+		      {
+			warning ("load: can not read multi-byte encoded UTF8 characters.");
+			warning ("      Replacing unreadable characters with '?'.");
+			for (int i = 0; i < n; i++)
+			  {
+			    unsigned char a = static_cast<char> (re(i));
+			    if (a > 0x7f)
+			      re(i) = 0x3F;
+			  }
+		      }
+		  }
+		tc = re;
+		tc = tc.convert_to_str (false, true, '\'');
+	      }
+	    else
+	      tc = re;
+
+	    tc = tc.convert_to_str (false, true, '\'');
 	  }
       }
     }
 
   is.seekg (pos + static_cast<std::streamoff> (element_length));
 
   if (is.eof ())
     is.clear ();
@@ -1431,19 +1469,20 @@ save_mat5_binary_element (std::ostream& 
       // do this with zlib, so use a stringstream.
       ret = save_mat5_binary_element (buf, tc, name, mark_as_global, true,
 				      save_as_floats, true);
 
       if (ret)
 	{
 	  OSSTREAM_FREEZE (buf);
       
-	  // destLen must be 0.1% larger than source buffer + 12 bytes
+	  // destLen must be at least 0.1% larger than source buffer 
+	  // + 12 bytes. Reality is it must be larger again than that.
 	  uLongf srcLen = OSSTREAM_STR (buf).length ();
-	  uLongf destLen = srcLen * 1001 / 1000 + 12; 
+	  uLongf destLen = srcLen * 101 / 100 + 12; 
 	  OCTAVE_LOCAL_BUFFER (char, out_buf, destLen);
 
 	  if (compress (X_CAST (Bytef *, out_buf), &destLen, 
 			X_CAST (Bytef *, OSSTREAM_C_STR (buf)), srcLen) == Z_OK)
 	    {
 	      write_mat5_tag (os, miCOMPRESSED, X_CAST(int, destLen)); 
 	      os.write (out_buf, destLen);
 	    }
diff --git a/src/ov-bool-sparse.cc b/src/ov-bool-sparse.cc
--- a/src/ov-bool-sparse.cc
+++ b/src/ov-bool-sparse.cc
@@ -331,78 +331,78 @@ octave_sparse_bool_matrix::save_hdf5 (hi
 
   hid_t group_hid = H5Gcreate (loc_id, name, 0);
   if (group_hid < 0)
     return false;
 
   hid_t space_hid = -1, data_hid = -1;
   bool retval = true;
   SparseBoolMatrix m = sparse_bool_matrix_value ();
-  int tmp;
+  octave_idx_type tmp;
   hsize_t hdims[2];
 
   space_hid = H5Screate_simple (0, hdims, (hsize_t*) 0);
   if (space_hid < 0) 
     {
       H5Gclose (group_hid);
       return false;
     }
 
-  data_hid = H5Dcreate (group_hid, "nr", H5T_NATIVE_INT, space_hid, 
+  data_hid = H5Dcreate (group_hid, "nr", H5T_NATIVE_IDX, space_hid, 
 			H5P_DEFAULT);
   if (data_hid < 0) 
     {
       H5Sclose (space_hid);
       H5Gclose (group_hid);
       return false;
     }
   
   tmp = m.rows ();
-  retval = H5Dwrite (data_hid, H5T_NATIVE_INT, H5S_ALL, H5S_ALL, H5P_DEFAULT,
-		     (void*) &tmp) >= 0;
+  retval = H5Dwrite (data_hid, H5T_NATIVE_IDX, H5S_ALL, H5S_ALL, 
+		     H5P_DEFAULT, (void*) &tmp) >= 0;
   H5Dclose (data_hid);
   if (!retval)
     {
       H5Sclose (space_hid);
       H5Gclose (group_hid);
       return false;
     }    
 
-  data_hid = H5Dcreate (group_hid, "nc", H5T_NATIVE_INT, space_hid, 
+  data_hid = H5Dcreate (group_hid, "nc", H5T_NATIVE_IDX, space_hid, 
 			H5P_DEFAULT);
   if (data_hid < 0) 
     {
       H5Sclose (space_hid);
       H5Gclose (group_hid);
       return false;
     }
   
   tmp = m.cols ();
-  retval = H5Dwrite (data_hid, H5T_NATIVE_INT, H5S_ALL, H5S_ALL, H5P_DEFAULT,
-		     (void*) &tmp) >= 0;
+  retval = H5Dwrite (data_hid, H5T_NATIVE_IDX, H5S_ALL, H5S_ALL,
+		     H5P_DEFAULT, (void*) &tmp) >= 0;
   H5Dclose (data_hid);
   if (!retval)
     {
       H5Sclose (space_hid);
       H5Gclose (group_hid);
       return false;
     }    
 
-  data_hid = H5Dcreate (group_hid, "nz", H5T_NATIVE_INT, space_hid, 
+  data_hid = H5Dcreate (group_hid, "nz", H5T_NATIVE_IDX, space_hid, 
 			H5P_DEFAULT);
   if (data_hid < 0) 
     {
       H5Sclose (space_hid);
       H5Gclose (group_hid);
       return false;
     }
   
   tmp = m.nnz ();
-  retval = H5Dwrite (data_hid, H5T_NATIVE_INT, H5S_ALL, H5S_ALL, H5P_DEFAULT,
-		     (void*) &tmp) >= 0;
+  retval = H5Dwrite (data_hid, H5T_NATIVE_IDX, H5S_ALL, H5S_ALL,
+		     H5P_DEFAULT, (void*) &tmp) >= 0;
   H5Dclose (data_hid);
   if (!retval)
     {
       H5Sclose (space_hid);
       H5Gclose (group_hid);
       return false;
     }
 
@@ -414,28 +414,28 @@ octave_sparse_bool_matrix::save_hdf5 (hi
   space_hid = H5Screate_simple (2, hdims, 0);
 
   if (space_hid < 0) 
     {
       H5Gclose (group_hid);
       return false;
     }
 
-  data_hid = H5Dcreate (group_hid, "cidx", H5T_NATIVE_INT, space_hid, 
+  data_hid = H5Dcreate (group_hid, "cidx", H5T_NATIVE_IDX, space_hid, 
 			H5P_DEFAULT);
   if (data_hid < 0) 
     {
       H5Sclose (space_hid);
       H5Gclose (group_hid);
       return false;
     }
   
-  int * itmp = m.xcidx ();
-  retval = H5Dwrite (data_hid, H5T_NATIVE_INT, H5S_ALL, H5S_ALL, H5P_DEFAULT,
-		     (void*) itmp) >= 0;
+  octave_idx_type * itmp = m.xcidx ();
+  retval = H5Dwrite (data_hid, H5T_NATIVE_IDX, H5S_ALL, H5S_ALL,
+		     H5P_DEFAULT, (void*) itmp) >= 0;
   H5Dclose (data_hid);
   if (!retval)
     {
       H5Sclose (space_hid);
       H5Gclose (group_hid);
       return false;
     }    
 
@@ -447,28 +447,28 @@ octave_sparse_bool_matrix::save_hdf5 (hi
   space_hid = H5Screate_simple (2, hdims, 0);
 
   if (space_hid < 0) 
     {
       H5Gclose (group_hid);
       return false;
     }
 
-  data_hid = H5Dcreate (group_hid, "ridx", H5T_NATIVE_INT, space_hid, 
+  data_hid = H5Dcreate (group_hid, "ridx", H5T_NATIVE_IDX, space_hid, 
 			H5P_DEFAULT);
   if (data_hid < 0) 
     {
       H5Sclose (space_hid);
       H5Gclose (group_hid);
       return false;
     }
   
   itmp = m.xridx ();
-  retval = H5Dwrite (data_hid, H5T_NATIVE_INT, H5S_ALL, H5S_ALL, H5P_DEFAULT,
-		     (void*) itmp) >= 0;
+  retval = H5Dwrite (data_hid, H5T_NATIVE_IDX, H5S_ALL, H5S_ALL,
+		     H5P_DEFAULT, (void*) itmp) >= 0;
   H5Dclose (data_hid);
   if (!retval)
     {
       H5Sclose (space_hid);
       H5Gclose (group_hid);
       return false;
     }
 
@@ -493,17 +493,17 @@ octave_sparse_bool_matrix::save_hdf5 (hi
 
   return retval;
 }
 
 bool
 octave_sparse_bool_matrix::load_hdf5 (hid_t loc_id, const char *name,
 				      bool /* have_h5giterate_bug */)
 {
-  int nr, nc, nz;
+  octave_idx_type nr, nc, nz;
   hid_t group_hid, data_hid, space_hid;
   hsize_t rank;
   
   dim_vector dv;
   int empty = load_hdf5_empty (loc_id, name, dv);
   if (empty > 0)
     matrix.resize(dv);
   if (empty)
@@ -518,17 +518,17 @@ octave_sparse_bool_matrix::load_hdf5 (hi
 
   if (rank != 0)
     { 
       H5Dclose (data_hid);
       H5Gclose (group_hid);
       return false;
     }
 
-  if (H5Dread (data_hid, H5T_NATIVE_INT, H5S_ALL, H5S_ALL, 
+  if (H5Dread (data_hid, H5T_NATIVE_IDX, H5S_ALL, H5S_ALL, 
 	       H5P_DEFAULT, (void *) &nr) < 0)
     { 
       H5Dclose (data_hid);
       H5Gclose (group_hid);
       return false;
     }
 
   H5Dclose (data_hid);
@@ -539,17 +539,17 @@ octave_sparse_bool_matrix::load_hdf5 (hi
 
   if (rank != 0)
     { 
       H5Dclose (data_hid);
       H5Gclose (group_hid);
       return false;
     }
 
-  if (H5Dread (data_hid, H5T_NATIVE_INT, H5S_ALL, H5S_ALL, 
+  if (H5Dread (data_hid, H5T_NATIVE_IDX, H5S_ALL, H5S_ALL, 
 	       H5P_DEFAULT, (void *) &nc) < 0)
     { 
       H5Dclose (data_hid);
       H5Gclose (group_hid);
       return false;
     }
 
   H5Dclose (data_hid);
@@ -560,17 +560,17 @@ octave_sparse_bool_matrix::load_hdf5 (hi
 
   if (rank != 0)
     { 
       H5Dclose (data_hid);
       H5Gclose (group_hid);
       return false;
     }
 
-  if (H5Dread (data_hid, H5T_NATIVE_INT, H5S_ALL, H5S_ALL, 
+  if (H5Dread (data_hid, H5T_NATIVE_IDX, H5S_ALL, H5S_ALL, 
 	       H5P_DEFAULT, (void *) &nz) < 0)
     { 
       H5Dclose (data_hid);
       H5Gclose (group_hid);
       return false;
     }
 
   H5Dclose (data_hid);
@@ -600,18 +600,18 @@ octave_sparse_bool_matrix::load_hdf5 (hi
       static_cast<int> (hdims[1]) != 1)
     {
       H5Sclose (space_hid);
       H5Dclose (data_hid);
       H5Gclose (group_hid);
       return false;
     }
 
-  int *itmp = m.xcidx ();
-  if (H5Dread (data_hid, H5T_NATIVE_INT, H5S_ALL, H5S_ALL, 
+  octave_idx_type *itmp = m.xcidx ();
+  if (H5Dread (data_hid, H5T_NATIVE_IDX, H5S_ALL, H5S_ALL, 
 	       H5P_DEFAULT, (void *) itmp) < 0) 
     {
       H5Sclose (space_hid);
       H5Dclose (data_hid);
       H5Gclose (group_hid);
       return false;
     }
 
@@ -627,26 +627,27 @@ octave_sparse_bool_matrix::load_hdf5 (hi
       H5Sclose (space_hid);
       H5Dclose (data_hid);
       H5Gclose (group_hid);
       return false;
     }
 
   H5Sget_simple_extent_dims (space_hid, hdims, maxdims);
 
-  if (static_cast<int> (hdims[0]) != nz || static_cast<int> (hdims[1]) != 1)
+  if (static_cast<int> (hdims[0]) != nz || 
+      static_cast<int> (hdims[1]) != 1)
     {
       H5Sclose (space_hid);
       H5Dclose (data_hid);
       H5Gclose (group_hid);
       return false;
     }
 
   itmp = m.xridx ();
-  if (H5Dread (data_hid, H5T_NATIVE_INT, H5S_ALL, H5S_ALL, 
+  if (H5Dread (data_hid, H5T_NATIVE_IDX, H5S_ALL, H5S_ALL, 
 	       H5P_DEFAULT, (void *) itmp) < 0) 
     {
       H5Sclose (space_hid);
       H5Dclose (data_hid);
       H5Gclose (group_hid);
       return false;
     }
 
@@ -662,17 +663,18 @@ octave_sparse_bool_matrix::load_hdf5 (hi
       H5Sclose (space_hid);
       H5Dclose (data_hid);
       H5Gclose (group_hid);
       return false;
     }
 
   H5Sget_simple_extent_dims (space_hid, hdims, maxdims);
 
-  if (static_cast<int> (hdims[0]) != nz || static_cast<int> (hdims[1]) != 1)
+  if (static_cast<int> (hdims[0]) != nz || 
+      static_cast<int> (hdims[1]) != 1)
     {
       H5Sclose (space_hid);
       H5Dclose (data_hid);
       H5Gclose (group_hid);
       return false;
     }
 
   hbool_t htmp[nz];
diff --git a/src/ov-cell.cc b/src/ov-cell.cc
--- a/src/ov-cell.cc
+++ b/src/ov-cell.cc
@@ -743,32 +743,32 @@ octave_cell::save_hdf5 (hid_t loc_id, co
   space_hid = H5Screate_simple (1, &rank, 0);
 
   if (space_hid < 0) 
     {
       H5Gclose (data_hid);
       return false;
     }
 
-  OCTAVE_LOCAL_BUFFER (int, hdims, rank);
+  OCTAVE_LOCAL_BUFFER (octave_idx_type, hdims, rank);
 
   // Octave uses column-major, while HDF5 uses row-major ordering
   for (hsize_t i = 0; i < rank; i++)
     hdims[i] = dv(rank-i-1);
 
-  size_hid = H5Dcreate (data_hid, "dims", H5T_NATIVE_INT, space_hid, 
+  size_hid = H5Dcreate (data_hid, "dims", H5T_NATIVE_IDX, space_hid, 
 			H5P_DEFAULT);
   if (size_hid < 0) 
     {
       H5Sclose (space_hid);
       H5Gclose (data_hid);
       return false;
     }
 
-  if (! H5Dwrite (size_hid, H5T_NATIVE_INT, H5S_ALL, H5S_ALL,
+  if (! H5Dwrite (size_hid, H5T_NATIVE_IDX, H5S_ALL, H5S_ALL,
 		  H5P_DEFAULT, hdims) < 0)
     {
       H5Dclose (size_hid);
       H5Sclose (space_hid);
       H5Gclose (data_hid);
       return false;
     }
 
@@ -829,19 +829,19 @@ octave_cell::load_hdf5 (hid_t loc_id, co
   OCTAVE_LOCAL_BUFFER (hsize_t, maxdims, rank);
 
   H5Sget_simple_extent_dims (space_hid, hdims, maxdims);
 
   // Octave uses column-major, while HDF5 uses row-major ordering.
 
   dv.resize (hdims[0]);
 
-  OCTAVE_LOCAL_BUFFER (int, tmp, hdims[0]);
+  OCTAVE_LOCAL_BUFFER (octave_idx_type, tmp, hdims[0]);
   
-  if (H5Dread (data_hid, H5T_NATIVE_INT, H5S_ALL, H5S_ALL, 
+  if (H5Dread (data_hid, H5T_NATIVE_IDX, H5S_ALL, H5S_ALL, 
 	       H5P_DEFAULT, tmp) < 0)
     {
       H5Dclose (data_hid);
       H5Gclose (group_id);
       return false;
     }
 
   H5Dclose (data_hid);
diff --git a/src/ov-cx-sparse.cc b/src/ov-cx-sparse.cc
--- a/src/ov-cx-sparse.cc
+++ b/src/ov-cx-sparse.cc
@@ -350,78 +350,78 @@ octave_sparse_complex_matrix::save_hdf5 
 
   hid_t group_hid = H5Gcreate (loc_id, name, 0);
   if (group_hid < 0)
     return false;
 
   hid_t space_hid = -1, data_hid = -1;
   bool retval = true;
   SparseComplexMatrix m = sparse_complex_matrix_value ();
-  int tmp;
+  octave_idx_type tmp;
   hsize_t hdims[2];
 
   space_hid = H5Screate_simple (0, hdims, (hsize_t*) 0);
   if (space_hid < 0) 
     {
       H5Gclose (group_hid);
       return false;
     }
 
-  data_hid = H5Dcreate (group_hid, "nr", H5T_NATIVE_INT, space_hid, 
+  data_hid = H5Dcreate (group_hid, "nr", H5T_NATIVE_IDX, space_hid, 
 			H5P_DEFAULT);
   if (data_hid < 0) 
     {
       H5Sclose (space_hid);
       H5Gclose (group_hid);
       return false;
     }
   
   tmp = m.rows ();
-  retval = H5Dwrite (data_hid, H5T_NATIVE_INT, H5S_ALL, H5S_ALL, H5P_DEFAULT,
-		     (void*) &tmp) >= 0;
+  retval = H5Dwrite (data_hid, H5T_NATIVE_IDX, H5S_ALL, H5S_ALL,
+		     H5P_DEFAULT, (void*) &tmp) >= 0;
   H5Dclose (data_hid);
   if (!retval)
     {
       H5Sclose (space_hid);
       H5Gclose (group_hid);
       return false;
     }    
 
-  data_hid = H5Dcreate (group_hid, "nc", H5T_NATIVE_INT, space_hid, 
+  data_hid = H5Dcreate (group_hid, "nc", H5T_NATIVE_IDX, space_hid, 
 			H5P_DEFAULT);
   if (data_hid < 0) 
     {
       H5Sclose (space_hid);
       H5Gclose (group_hid);
       return false;
     }
   
   tmp = m.cols ();
-  retval = H5Dwrite (data_hid, H5T_NATIVE_INT, H5S_ALL, H5S_ALL, H5P_DEFAULT,
-		     (void*) &tmp) >= 0;
+  retval = H5Dwrite (data_hid, H5T_NATIVE_IDX, H5S_ALL, H5S_ALL,
+		     H5P_DEFAULT, (void*) &tmp) >= 0;
   H5Dclose (data_hid);
   if (!retval)
     {
       H5Sclose (space_hid);
       H5Gclose (group_hid);
       return false;
     }    
 
-  data_hid = H5Dcreate (group_hid, "nz", H5T_NATIVE_INT, space_hid, 
+  data_hid = H5Dcreate (group_hid, "nz", H5T_NATIVE_IDX, space_hid, 
 			H5P_DEFAULT);
   if (data_hid < 0) 
     {
       H5Sclose (space_hid);
       H5Gclose (group_hid);
       return false;
     }
   
   tmp = m.nnz ();
-  retval = H5Dwrite (data_hid, H5T_NATIVE_INT, H5S_ALL, H5S_ALL, H5P_DEFAULT,
-		     (void*) &tmp) >= 0;
+  retval = H5Dwrite (data_hid, H5T_NATIVE_IDX, H5S_ALL, H5S_ALL,
+		     H5P_DEFAULT, (void*) &tmp) >= 0;
   H5Dclose (data_hid);
   if (!retval)
     {
       H5Sclose (space_hid);
       H5Gclose (group_hid);
       return false;
     }
 
@@ -433,28 +433,28 @@ octave_sparse_complex_matrix::save_hdf5 
   space_hid = H5Screate_simple (2, hdims, 0);
 
   if (space_hid < 0) 
     {
       H5Gclose (group_hid);
       return false;
     }
 
-  data_hid = H5Dcreate (group_hid, "cidx", H5T_NATIVE_INT, space_hid, 
+  data_hid = H5Dcreate (group_hid, "cidx", H5T_NATIVE_IDX, space_hid, 
 			H5P_DEFAULT);
   if (data_hid < 0) 
     {
       H5Sclose (space_hid);
       H5Gclose (group_hid);
       return false;
     }
   
-  int * itmp = m.xcidx ();
-  retval = H5Dwrite (data_hid, H5T_NATIVE_INT, H5S_ALL, H5S_ALL, H5P_DEFAULT,
-		     (void*) itmp) >= 0;
+  octave_idx_type * itmp = m.xcidx ();
+  retval = H5Dwrite (data_hid, H5T_NATIVE_IDX, H5S_ALL, H5S_ALL,
+		     H5P_DEFAULT, (void*) itmp) >= 0;
   H5Dclose (data_hid);
   if (!retval)
     {
       H5Sclose (space_hid);
       H5Gclose (group_hid);
       return false;
     }    
 
@@ -466,28 +466,28 @@ octave_sparse_complex_matrix::save_hdf5 
   space_hid = H5Screate_simple (2, hdims, 0);
 
   if (space_hid < 0) 
     {
       H5Gclose (group_hid);
       return false;
     }
 
-  data_hid = H5Dcreate (group_hid, "ridx", H5T_NATIVE_INT, space_hid, 
+  data_hid = H5Dcreate (group_hid, "ridx", H5T_NATIVE_IDX, space_hid, 
 			H5P_DEFAULT);
   if (data_hid < 0) 
     {
       H5Sclose (space_hid);
       H5Gclose (group_hid);
       return false;
     }
   
   itmp = m.xridx ();
-  retval = H5Dwrite (data_hid, H5T_NATIVE_INT, H5S_ALL, H5S_ALL, H5P_DEFAULT,
-		     (void*) itmp) >= 0;
+  retval = H5Dwrite (data_hid, H5T_NATIVE_IDX, H5S_ALL, H5S_ALL,
+		     H5P_DEFAULT, (void*) itmp) >= 0;
   H5Dclose (data_hid);
   if (!retval)
     {
       H5Sclose (space_hid);
       H5Gclose (group_hid);
       return false;
     }
 
@@ -518,17 +518,18 @@ octave_sparse_complex_matrix::save_hdf5 
   hid_t type_hid = hdf5_make_complex_type (save_type_hid);
   if (type_hid < 0)
     {
       H5Sclose (space_hid);
       H5Gclose (group_hid);
       return false;
     }
 
-  data_hid = H5Dcreate (group_hid, "data", type_hid, space_hid, H5P_DEFAULT);
+  data_hid = H5Dcreate (group_hid, "data", type_hid, space_hid, 
+			H5P_DEFAULT);
   if (data_hid < 0)
     {
       H5Sclose (space_hid);
       H5Tclose (type_hid);
       H5Gclose (group_hid);
       return false;
     }
 
@@ -549,17 +550,17 @@ octave_sparse_complex_matrix::save_hdf5 
 
   return retval;
 }
 
 bool
 octave_sparse_complex_matrix::load_hdf5 (hid_t loc_id, const char *name,
 					 bool /* have_h5giterate_bug */)
 {
-  int nr, nc, nz;
+  octave_idx_type nr, nc, nz;
   hid_t group_hid, data_hid, space_hid;
   hsize_t rank;
   
   dim_vector dv;
   int empty = load_hdf5_empty (loc_id, name, dv);
   if (empty > 0)
     matrix.resize(dv);
   if (empty)
@@ -574,17 +575,17 @@ octave_sparse_complex_matrix::load_hdf5 
 
   if (rank != 0)
     { 
       H5Dclose (data_hid);
       H5Gclose (group_hid);
       return false;
     }
 
-  if (H5Dread (data_hid, H5T_NATIVE_INT, H5S_ALL, H5S_ALL, 
+  if (H5Dread (data_hid, H5T_NATIVE_IDX, H5S_ALL, H5S_ALL, 
 	       H5P_DEFAULT, (void *) &nr) < 0)
     { 
       H5Dclose (data_hid);
       H5Gclose (group_hid);
       return false;
     }
 
   H5Dclose (data_hid);
@@ -595,17 +596,17 @@ octave_sparse_complex_matrix::load_hdf5 
 
   if (rank != 0)
     { 
       H5Dclose (data_hid);
       H5Gclose (group_hid);
       return false;
     }
 
-  if (H5Dread (data_hid, H5T_NATIVE_INT, H5S_ALL, H5S_ALL, 
+  if (H5Dread (data_hid, H5T_NATIVE_IDX, H5S_ALL, H5S_ALL, 
 	       H5P_DEFAULT, (void *) &nc) < 0)
     { 
       H5Dclose (data_hid);
       H5Gclose (group_hid);
       return false;
     }
 
   H5Dclose (data_hid);
@@ -616,17 +617,17 @@ octave_sparse_complex_matrix::load_hdf5 
 
   if (rank != 0)
     { 
       H5Dclose (data_hid);
       H5Gclose (group_hid);
       return false;
     }
 
-  if (H5Dread (data_hid, H5T_NATIVE_INT, H5S_ALL, H5S_ALL, 
+  if (H5Dread (data_hid, H5T_NATIVE_IDX, H5S_ALL, H5S_ALL, 
 	       H5P_DEFAULT, (void *) &nz) < 0)
     { 
       H5Dclose (data_hid);
       H5Gclose (group_hid);
       return false;
     }
 
   H5Dclose (data_hid);
@@ -656,18 +657,18 @@ octave_sparse_complex_matrix::load_hdf5 
       static_cast<int> (hdims[1]) != 1)
     {
       H5Sclose (space_hid);
       H5Dclose (data_hid);
       H5Gclose (group_hid);
       return false;
     }
 
-  int *itmp = m.xcidx ();
-  if (H5Dread (data_hid, H5T_NATIVE_INT, H5S_ALL, H5S_ALL, 
+  octave_idx_type *itmp = m.xcidx ();
+  if (H5Dread (data_hid, H5T_NATIVE_IDX, H5S_ALL, H5S_ALL, 
 	       H5P_DEFAULT, (void *) itmp) < 0) 
     {
       H5Sclose (space_hid);
       H5Dclose (data_hid);
       H5Gclose (group_hid);
       return false;
     }
 
@@ -683,26 +684,27 @@ octave_sparse_complex_matrix::load_hdf5 
       H5Sclose (space_hid);
       H5Dclose (data_hid);
       H5Gclose (group_hid);
       return false;
     }
 
   H5Sget_simple_extent_dims (space_hid, hdims, maxdims);
 
-  if (static_cast<int> (hdims[0]) != nz || static_cast<int> (hdims[1]) != 1)
+  if (static_cast<int> (hdims[0]) != nz || 
+      static_cast<int> (hdims[1]) != 1)
     {
       H5Sclose (space_hid);
       H5Dclose (data_hid);
       H5Gclose (group_hid);
       return false;
     }
 
   itmp = m.xridx ();
-  if (H5Dread (data_hid, H5T_NATIVE_INT, H5S_ALL, H5S_ALL, 
+  if (H5Dread (data_hid, H5T_NATIVE_IDX, H5S_ALL, H5S_ALL, 
 	       H5P_DEFAULT, (void *) itmp) < 0) 
     {
       H5Sclose (space_hid);
       H5Dclose (data_hid);
       H5Gclose (group_hid);
       return false;
     }
 
@@ -730,17 +732,18 @@ octave_sparse_complex_matrix::load_hdf5 
       H5Sclose (space_hid);
       H5Dclose (data_hid);
       H5Gclose (group_hid);
       return false;
     }
 
   H5Sget_simple_extent_dims (space_hid, hdims, maxdims);
 
-  if (static_cast<int> (hdims[0]) != nz || static_cast<int> (hdims[1]) != 1)
+  if (static_cast<int> (hdims[0]) != nz || 
+      static_cast<int> (hdims[1]) != 1)
     {
       H5Sclose (space_hid);
       H5Dclose (data_hid);
       H5Gclose (group_hid);
       return false;
     }
 
   Complex *ctmp = m.xdata ();
diff --git a/src/ov-re-sparse.cc b/src/ov-re-sparse.cc
--- a/src/ov-re-sparse.cc
+++ b/src/ov-re-sparse.cc
@@ -394,77 +394,77 @@ octave_sparse_matrix::save_hdf5 (hid_t l
 
   hid_t group_hid = H5Gcreate (loc_id, name, 0);
   if (group_hid < 0)
     return false;
 
   hid_t space_hid = -1, data_hid = -1;
   bool retval = true;
   SparseMatrix m = sparse_matrix_value ();
-  int tmp;
+  octave_idx_type tmp;
   hsize_t hdims[2];
 
   space_hid = H5Screate_simple (0, hdims, (hsize_t*) 0);
   if (space_hid < 0) 
     {
       H5Gclose (group_hid);
       return false;
     }
 
-  data_hid = H5Dcreate (group_hid, "nr", H5T_NATIVE_INT, space_hid, 
+  data_hid = H5Dcreate (group_hid, "nr", H5T_NATIVE_IDX, space_hid, 
 			H5P_DEFAULT);
   if (data_hid < 0) 
     {
       H5Sclose (space_hid);
       H5Gclose (group_hid);
       return false;
     }
   
   tmp = m.rows ();
-  retval = H5Dwrite (data_hid, H5T_NATIVE_INT, H5S_ALL, H5S_ALL, H5P_DEFAULT,
+  retval = H5Dwrite (data_hid, H5T_NATIVE_IDX, H5S_ALL, H5S_ALL, H5P_DEFAULT,
 		     (void*) &tmp) >= 0;
   H5Dclose (data_hid);
   if (!retval)
     {
       H5Sclose (space_hid);
       H5Gclose (group_hid);
       return false;
     }    
 
-  data_hid = H5Dcreate (group_hid, "nc", H5T_NATIVE_INT, space_hid, 
+  data_hid = H5Dcreate (group_hid, "nc", H5T_NATIVE_IDX, space_hid, 
 			H5P_DEFAULT);
   if (data_hid < 0) 
     {
       H5Sclose (space_hid);
       H5Gclose (group_hid);
       return false;
     }
   
   tmp = m.cols ();
-  retval = H5Dwrite (data_hid, H5T_NATIVE_INT, H5S_ALL, H5S_ALL, H5P_DEFAULT,
+  retval = H5Dwrite (data_hid, H5T_NATIVE_IDX, H5S_ALL, H5S_ALL, H5P_DEFAULT,
 		     (void*) &tmp) >= 0;
   H5Dclose (data_hid);
   if (!retval)
     {
       H5Sclose (space_hid);
       H5Gclose (group_hid);
       return false;
     }    
 
-  data_hid = H5Dcreate (group_hid, "nz", H5T_NATIVE_INT, space_hid, 
+  data_hid = H5Dcreate (group_hid, "nz", H5T_NATIVE_IDX, space_hid, 
 			H5P_DEFAULT);
   if (data_hid < 0) 
     {
       H5Sclose (space_hid);
       H5Gclose (group_hid);
       return false;
     }
   
   tmp = m.nnz ();
-  retval = H5Dwrite (data_hid, H5T_NATIVE_INT, H5S_ALL, H5S_ALL, H5P_DEFAULT,
+  retval = H5Dwrite (data_hid, H5T_NATIVE_IDX, H5S_ALL, H5S_ALL, H5P_DEFAULT,
 		     (void*) &tmp) >= 0;
   H5Dclose (data_hid);
   if (!retval)
     {
       H5Sclose (space_hid);
       H5Gclose (group_hid);
       return false;
     }
@@ -477,27 +477,27 @@ octave_sparse_matrix::save_hdf5 (hid_t l
   space_hid = H5Screate_simple (2, hdims, 0);
 
   if (space_hid < 0) 
     {
       H5Gclose (group_hid);
       return false;
     }
 
-  data_hid = H5Dcreate (group_hid, "cidx", H5T_NATIVE_INT, space_hid, 
+  data_hid = H5Dcreate (group_hid, "cidx", H5T_NATIVE_IDX, space_hid, 
 			H5P_DEFAULT);
   if (data_hid < 0) 
     {
       H5Sclose (space_hid);
       H5Gclose (group_hid);
       return false;
     }
   
-  int * itmp = m.xcidx ();
-  retval = H5Dwrite (data_hid, H5T_NATIVE_INT, H5S_ALL, H5S_ALL, H5P_DEFAULT,
+  octave_idx_type * itmp = m.xcidx ();
+  retval = H5Dwrite (data_hid, H5T_NATIVE_IDX, H5S_ALL, H5S_ALL, H5P_DEFAULT,
 		     (void*) itmp) >= 0;
   H5Dclose (data_hid);
   if (!retval)
     {
       H5Sclose (space_hid);
       H5Gclose (group_hid);
       return false;
     }    
@@ -510,27 +510,27 @@ octave_sparse_matrix::save_hdf5 (hid_t l
   space_hid = H5Screate_simple (2, hdims, 0);
 
   if (space_hid < 0) 
     {
       H5Gclose (group_hid);
       return false;
     }
 
-  data_hid = H5Dcreate (group_hid, "ridx", H5T_NATIVE_INT, space_hid, 
+  data_hid = H5Dcreate (group_hid, "ridx", H5T_NATIVE_IDX, space_hid, 
 			H5P_DEFAULT);
   if (data_hid < 0) 
     {
       H5Sclose (space_hid);
       H5Gclose (group_hid);
       return false;
     }
   
   itmp = m.xridx ();
-  retval = H5Dwrite (data_hid, H5T_NATIVE_INT, H5S_ALL, H5S_ALL, H5P_DEFAULT,
+  retval = H5Dwrite (data_hid, H5T_NATIVE_IDX, H5S_ALL, H5S_ALL, H5P_DEFAULT,
 		     (void*) itmp) >= 0;
   H5Dclose (data_hid);
   if (!retval)
     {
       H5Sclose (space_hid);
       H5Gclose (group_hid);
       return false;
     }
@@ -577,17 +577,17 @@ octave_sparse_matrix::save_hdf5 (hid_t l
 
   return retval;
 }
 
 bool
 octave_sparse_matrix::load_hdf5 (hid_t loc_id, const char *name,
 				      bool /* have_h5giterate_bug */)
 {
-  int nr, nc, nz;
+  octave_idx_type nr, nc, nz;
   hid_t group_hid, data_hid, space_hid;
   hsize_t rank;
   
   dim_vector dv;
   int empty = load_hdf5_empty (loc_id, name, dv);
   if (empty > 0)
     matrix.resize(dv);
   if (empty)
@@ -602,17 +602,17 @@ octave_sparse_matrix::load_hdf5 (hid_t l
 
   if (rank != 0)
     { 
       H5Dclose (data_hid);
       H5Gclose (group_hid);
       return false;
     }
 
-  if (H5Dread (data_hid, H5T_NATIVE_INT, H5S_ALL, H5S_ALL, 
+  if (H5Dread (data_hid, H5T_NATIVE_IDX, H5S_ALL, H5S_ALL, 
 	       H5P_DEFAULT, (void *) &nr) < 0)
     { 
       H5Dclose (data_hid);
       H5Gclose (group_hid);
       return false;
     }
 
   H5Dclose (data_hid);
@@ -623,17 +623,17 @@ octave_sparse_matrix::load_hdf5 (hid_t l
 
   if (rank != 0)
     { 
       H5Dclose (data_hid);
       H5Gclose (group_hid);
       return false;
     }
 
-  if (H5Dread (data_hid, H5T_NATIVE_INT, H5S_ALL, H5S_ALL, 
+  if (H5Dread (data_hid, H5T_NATIVE_IDX, H5S_ALL, H5S_ALL, 
 	       H5P_DEFAULT, (void *) &nc) < 0)
     { 
       H5Dclose (data_hid);
       H5Gclose (group_hid);
       return false;
     }
 
   H5Dclose (data_hid);
@@ -644,17 +644,17 @@ octave_sparse_matrix::load_hdf5 (hid_t l
 
   if (rank != 0)
     { 
       H5Dclose (data_hid);
       H5Gclose (group_hid);
       return false;
     }
 
-  if (H5Dread (data_hid, H5T_NATIVE_INT, H5S_ALL, H5S_ALL, 
+  if (H5Dread (data_hid, H5T_NATIVE_IDX, H5S_ALL, H5S_ALL, 
 	       H5P_DEFAULT, (void *) &nz) < 0)
     { 
       H5Dclose (data_hid);
       H5Gclose (group_hid);
       return false;
     }
 
   H5Dclose (data_hid);
@@ -684,18 +684,18 @@ octave_sparse_matrix::load_hdf5 (hid_t l
       static_cast<int> (hdims[1]) != 1)
     {
       H5Sclose (space_hid);
       H5Dclose (data_hid);
       H5Gclose (group_hid);
       return false;
     }
 
-  int *itmp = m.xcidx ();
-  if (H5Dread (data_hid, H5T_NATIVE_INT, H5S_ALL, H5S_ALL, 
+  octave_idx_type *itmp = m.xcidx ();
+  if (H5Dread (data_hid, H5T_NATIVE_IDX, H5S_ALL, H5S_ALL, 
 	       H5P_DEFAULT, (void *) itmp) < 0) 
     {
       H5Sclose (space_hid);
       H5Dclose (data_hid);
       H5Gclose (group_hid);
       return false;
     }
 
@@ -720,17 +720,17 @@ octave_sparse_matrix::load_hdf5 (hid_t l
     {
       H5Sclose (space_hid);
       H5Dclose (data_hid);
       H5Gclose (group_hid);
       return false;
     }
 
   itmp = m.xridx ();
-  if (H5Dread (data_hid, H5T_NATIVE_INT, H5S_ALL, H5S_ALL, 
+  if (H5Dread (data_hid, H5T_NATIVE_IDX, H5S_ALL, H5S_ALL, 
 	       H5P_DEFAULT, (void *) itmp) < 0) 
     {
       H5Sclose (space_hid);
       H5Dclose (data_hid);
       H5Gclose (group_hid);
       return false;
     }
 
