# HG changeset patch
# User jwe
# Date 1065746995 0
#      Fri Oct 10 00:49:55 2003 +0000
# Node ID 01ee68d180694245a3df0c7babe810a1cbff99f6
# Parent  b570d7825fb946d7413727370157c3a7ecb0d135
[project @ 2003-10-10 00:49:54 by jwe]

diff --git a/ChangeLog b/ChangeLog
--- a/ChangeLog
+++ b/ChangeLog
@@ -1,8 +1,12 @@
+2003-10-07  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* configure.in (AC_PREREQ): Require 2.57.
+
 2003-09-19  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* configure.in (AH_BOTTOM): Don't define HEAVYWEIGHT_INDEXING here.
 
 2003-07-30  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* emacs/octave-mod.el (octave-variables): Delete
 	propagate_empty_matrices from the list.
diff --git a/liboctave/Array.cc b/liboctave/Array.cc
--- a/liboctave/Array.cc
+++ b/liboctave/Array.cc
@@ -47,16 +47,53 @@ template <class T>
 Array<T>::~Array (void)
 {
   if (--rep->count <= 0)
     delete rep;
 
   delete [] idx;
 }
 
+template <class T>
+Array<T>
+Array<T>::squeeze (void) const
+{
+  Array<T> retval = *this;
+
+  bool dims_changed = false;
+
+  dim_vector new_dimensions = dimensions;
+
+  int k = 0;
+
+  for (int i = 0; i < ndims (); i++)
+    {
+      if (dimensions(i) == 1)
+	dims_changed = true;
+      else
+	new_dimensions(k++) = dimensions(i);
+    }
+
+  if (dims_changed)
+    {
+      if (k == 0)
+	new_dimensions = dim_vector (1);
+      else
+	new_dimensions.resize (k);
+
+      Array<T> retval = *this;
+
+      retval.make_unique ();
+
+      retval.dimensions = new_dimensions;
+    }
+
+  return retval;
+}
+
 // A guess (should be quite conservative).
 #define MALLOC_OVERHEAD 1024
 
 template <class T>
 int
 Array<T>::get_size (int r, int c)
 {
   // XXX KLUGE XXX
@@ -80,23 +117,20 @@ Array<T>::get_size (int r, int c)
 
   int nr, nc;
   double dr = frexp (static_cast<double> (r), &nr);
   double dc = frexp (static_cast<double> (c), &nc);
 
   int nt = nr + nc;
   double dt = dr * dc;
 
-  if (dt <= 0.5)
+  if (dt < 0.5)
     {
       nt--;
       dt *= 2;
-
-      if (dt <= 0.5)
-	nt--;
     }
 
   return (nt < nl || (nt == nl && dt < dl)) ? r * c : max_items;
 }
 
 template <class T>
 int
 Array<T>::get_size (int r, int c, int p)
@@ -123,23 +157,26 @@ Array<T>::get_size (int r, int c, int p)
   int nr, nc, np;
   double dr = frexp (static_cast<double> (r), &nr);
   double dc = frexp (static_cast<double> (c), &nc);
   double dp = frexp (static_cast<double> (p), &np);
 
   int nt = nr + nc + np;
   double dt = dr * dc * dp;
 
-  if (dt <= 0.5)
+  if (dt < 0.5)
     {
       nt--;
       dt *= 2;
 
-      if (dt <= 0.5)
-	nt--;
+      if (dt < 0.5)
+	{
+	  nt--;
+	  dt *= 2;
+	}
     }
 
   return (nt < nl || (nt == nl && dt < dl)) ? r * c * p : max_items;
 }
 
 template <class T>
 int
 Array<T>::get_size (const dim_vector& ra_idx)
@@ -173,25 +210,22 @@ Array<T>::get_size (const dim_vector& ra
 
   for (int i = 0; i < n; i++)
     {
       int nra_idx;
       double dra_idx = frexp (static_cast<double> (ra_idx(i)), &nra_idx);
 
       nt += nra_idx;
       dt *= dra_idx;
-    }
-
-  if (dt <= 0.5)
-    {
-      nt--;
-      dt *= 2;
-
-      if (dt <= 0.5)
-	nt--;
+
+      if (dt < 0.5)
+	{
+	  nt--;
+	  dt *= 2;
+	}
     }
 
   if (nt < nl || (nt == nl && dt < dl))
     {
       retval = 1;
 
       for (int i = 0; i < n; i++)
 	retval *= ra_idx(i);
diff --git a/liboctave/Array.h b/liboctave/Array.h
--- a/liboctave/Array.h
+++ b/liboctave/Array.h
@@ -241,16 +241,18 @@ public:
 
   int rows (void) const { return dim1 (); }
   int cols (void) const { return dim2 (); }
   int columns (void) const { return dim2 (); }
   int pages (void) const { return dim3 (); }
 
   dim_vector dims (void) const { return dimensions; }
 
+  Array<T> squeeze (void) const;
+
   static int get_size (int r, int c);
   static int get_size (int r, int c, int p);
   static int get_size (const dim_vector& dims);
 
   int compute_index (const Array<int>& ra_idx) const;
 
   T range_error (const char *fcn, int n) const;
   T& range_error (const char *fcn, int n);
diff --git a/liboctave/ArrayN.h b/liboctave/ArrayN.h
--- a/liboctave/ArrayN.h
+++ b/liboctave/ArrayN.h
@@ -66,16 +66,18 @@ public:
 
   ArrayN (const dim_vector& dims, const T& val)
     : Array<T> (dims) { fill (val); }
 
   ArrayN (const Array2<T>& a) : Array<T> (a, a.dims ()) { }
 
   ArrayN (const ArrayN<T>& a) : Array<T> (a, a.dims ()) { }
 
+  ArrayN (const Array<T>& a) : Array<T> (a) { }
+
   ArrayN (const Array<T>& a, const dim_vector& dims) : Array<T> (a, dims) { }
 
   ~ArrayN (void) { }
 
   ArrayN<T>& operator = (const ArrayN<T>& a)
     {
       if (this != &a)
 	Array<T>::operator = (a);
@@ -84,16 +86,18 @@ public:
     }
 
   void resize (const dim_vector& dims)
     { Array<T>resize_no_fill (dims); }
 
   void resize (const dim_vector& dims, const T& val)
     { Array<T>::resize (dims, val); }
 
+  ArrayN<T> squeeze (void) const { return Array<T>::squeeze (); }
+
   ArrayN<T>& insert (const ArrayN<T>& a, const dim_vector& dims)
     {
       Array<T>::insert (a, dims);
       return *this;
     }
 
   ArrayN<T> index (idx_vector& i, int resize_ok = 0,
 		   const T& rfv = resize_fill_value (T ())) const
diff --git a/liboctave/CNDArray.cc b/liboctave/CNDArray.cc
--- a/liboctave/CNDArray.cc
+++ b/liboctave/CNDArray.cc
@@ -28,16 +28,18 @@ Software Foundation, 59 Temple Place - S
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
 #include "CNDArray.h"
 #include "mx-base.h"
 #include "lo-ieee.h"
 
+#include "ArrayN-inline.h"
+
 // XXX FIXME XXX -- this is not quite the right thing.
 
 boolMatrix
 ComplexNDArray::all (int dim) const
 {
   boolMatrix retval;
 
   if (dimensions.length () == 2)
@@ -91,13 +93,21 @@ ComplexNDArray::matrix_value (void) cons
       (*current_liboctave_error_handler)
 	("invalid converstion of ComplexNDArray to ComplexMatrix");
       break;
     }
 
   return retval;
 }
 
+void
+ComplexNDArray::increment_index (Array<int>& ra_idx,
+				 const dim_vector& dimensions,
+				 int start_dimension)
+{
+  ::increment_index (ra_idx, dimensions, start_dimension);
+}
+
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
diff --git a/liboctave/CNDArray.h b/liboctave/CNDArray.h
--- a/liboctave/CNDArray.h
+++ b/liboctave/CNDArray.h
@@ -64,16 +64,22 @@ public:
 
   // XXX FIXME XXX -- this is not quite the right thing.
 
   boolMatrix all (int dim = -1) const;
   boolMatrix any (int dim = -1) const;
 
   ComplexMatrix matrix_value (void) const;
 
+  ComplexNDArray squeeze (void) const { return ArrayN<Complex>::squeeze (); }
+
+  static void increment_index (Array<int>& ra_idx,
+			       const dim_vector& dimensions,
+			       int start_dimension = 0);
+
   // i/o
 
   // friend std::ostream& operator << (std::ostream& os, const NDArray& a);
   // friend std::istream& operator >> (std::istream& is, NDArray& a);
 
   static Complex resize_fill_value (void) { return Complex (0.0, 0.0); }
 
   //  bool all_elements_are_real (void) const;
diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,27 @@
+2003-10-09  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* CNDArray.cc (ComplexNDArray::increment_index): New function.
+	* dNDArray.cc (NDArray::increment_index): Likewise.
+	* boolNDArray.cc (boolNDArray::increment_index): Likewise.
+	* chNDArray.cc (charNDArray::increment_index): Likewise.
+
+	* dim-vector.h (rows, cols): Delete unused data members.
+
+	* Array.cc (Array<T>::get_size): Fix thinko.
+
+2003-10-08  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* Array.cc (Array<T>::squeeze): New function.
+	* CNDArray.h (ComplexNDArray::squeeze): Likewise.
+	* dNDArray.h (NDArray::squeeze): Likewise.
+	* boolNDArray.h (boolNDArray::squeeze): Likewise.
+	* chNDArray.h (charNDArray::squeeze): Likewise.
+
 2003-10-06  Petter Risholm  <risholm@stud.ntnu.no>
 
 	* Array.cc (ArrayN<T>::indexN): New definition.
 	* Array.h (Array<T>::indexN): Provide decl.
 	* Array.cc (ArrayN<T>::index (idx_vector&, int, const T&):
 	Call indexN if more than 2 indices.
 	(ArrayN<T>::index (Array<idx_vector>&, int, const T&)):
 	Make it (mostly) work.
diff --git a/liboctave/boolNDArray.cc b/liboctave/boolNDArray.cc
--- a/liboctave/boolNDArray.cc
+++ b/liboctave/boolNDArray.cc
@@ -28,16 +28,18 @@ Software Foundation, 59 Temple Place - S
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
 #include "CNDArray.h"
 #include "mx-base.h"
 #include "lo-ieee.h"
 
+#include "ArrayN-inline.h"
+
 // XXX FIXME XXX -- this is not quite the right thing.
 
 boolMatrix
 boolNDArray::all (int dim) const
 {
   boolMatrix retval;
 
   if (dimensions.length () == 2)
@@ -91,13 +93,21 @@ boolNDArray::matrix_value (void) const
       (*current_liboctave_error_handler)
 	("invalid converstion of boolNDArray to boolMatrix");
       break;
     }
 
   return retval;
 }
 
+void
+boolNDArray::increment_index (Array<int>& ra_idx,
+			      const dim_vector& dimensions,
+			      int start_dimension)
+{
+  ::increment_index (ra_idx, dimensions, start_dimension);
+}
+
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
diff --git a/liboctave/boolNDArray.h b/liboctave/boolNDArray.h
--- a/liboctave/boolNDArray.h
+++ b/liboctave/boolNDArray.h
@@ -64,16 +64,22 @@ public:
 
   // XXX FIXME XXX -- this is not quite the right thing.
 
   boolMatrix all (int dim = -1) const;
   boolMatrix any (int dim = -1) const;
 
   boolMatrix matrix_value (void) const;
 
+  boolNDArray squeeze (void) const { return ArrayN<bool>::squeeze (); }
+
+  static void increment_index (Array<int>& ra_idx,
+			       const dim_vector& dimensions,
+			       int start_dimension = 0);
+
   // i/o
 
   // friend std::ostream& operator << (std::ostream& os, const NDArray& a);
   // friend std::istream& operator >> (std::istream& is, NDArray& a);
 
   static bool resize_fill_value (void) { return false; }
 
   //  bool all_elements_are_real (void) const;
diff --git a/liboctave/chNDArray.cc b/liboctave/chNDArray.cc
--- a/liboctave/chNDArray.cc
+++ b/liboctave/chNDArray.cc
@@ -28,16 +28,18 @@ Software Foundation, 59 Temple Place - S
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
 #include "chNDArray.h"
 #include "mx-base.h"
 #include "lo-ieee.h"
 
+#include "ArrayN-inline.h"
+
 // XXX FIXME XXX -- this is not quite the right thing.
 
 boolMatrix
 charNDArray::all (int dim) const
 {
   boolMatrix retval;
 
   if (dimensions.length () == 2)
@@ -91,13 +93,21 @@ charNDArray::matrix_value (void) const
       (*current_liboctave_error_handler)
 	("invalid converstion of charNDArray to charMatrix");
       break;
     }
 
   return retval;
 }
 
+void
+charNDArray::increment_index (Array<int>& ra_idx,
+			      const dim_vector& dimensions,
+			      int start_dimension)
+{
+  ::increment_index (ra_idx, dimensions, start_dimension);
+}
+
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
diff --git a/liboctave/chNDArray.h b/liboctave/chNDArray.h
--- a/liboctave/chNDArray.h
+++ b/liboctave/chNDArray.h
@@ -69,16 +69,22 @@ public:
 
   // XXX FIXME XXX -- this is not quite the right thing.
 
   boolMatrix all (int dim = -1) const;
   boolMatrix any (int dim = -1) const;
 
   charMatrix matrix_value (void) const;
 
+  charNDArray squeeze (void) const { return ArrayN<char>::squeeze (); }
+
+  static void increment_index (Array<int>& ra_idx,
+			       const dim_vector& dimensions,
+			       int start_dimension = 0);
+
   // i/o
 
   // friend std::ostream& operator << (std::ostream& os, const charNDArray& a);
   // friend std::istream& operator >> (std::istream& is, charNDArray& a);
 
   static char resize_fill_value (void) { return '\0'; }
 
 private:
diff --git a/liboctave/dNDArray.cc b/liboctave/dNDArray.cc
--- a/liboctave/dNDArray.cc
+++ b/liboctave/dNDArray.cc
@@ -29,16 +29,18 @@ Software Foundation, 59 Temple Place - S
 #include <config.h>
 #endif
 
 #include "dNDArray.h"
 #include "mx-base.h"
 #include "lo-error.h"
 #include "lo-ieee.h"
 
+#include "ArrayN-inline.h"
+
 // XXX FIXME XXX -- this is not quite the right thing.
 
 boolMatrix
 NDArray::all (int dim) const
 {
   boolMatrix retval;
 
   if (dimensions.length () == 2)
@@ -65,16 +67,50 @@ NDArray::any (int dim) const
     }
   else
     (*current_liboctave_error_handler)
       ("any is not yet implemented for N-d Arrays");
 
   return retval;
 }
 
+Matrix
+NDArray::matrix_value (void) const
+{
+  Matrix retval;
+
+  int nd = ndims ();
+
+  switch (nd)
+    {
+    case 1:
+      retval = Matrix (Array2<double> (*this, dimensions(0), 1));
+      break;
+
+    case 2:
+      retval = Matrix (Array2<double> (*this, dimensions(0), dimensions(1)));
+      break;
+
+    default:
+      (*current_liboctave_error_handler)
+	("invalid converstion of NDArray to Matrix");
+      break;
+    }
+
+  return retval;
+}
+
+void
+NDArray::increment_index (Array<int>& ra_idx,
+			  const dim_vector& dimensions,
+			  int start_dimension)
+{
+  ::increment_index (ra_idx, dimensions, start_dimension);
+}
+
 bool
 NDArray::any_element_is_negative (bool neg_zero) const
 {
   int n = length (); 
   if (neg_zero)
     {
       for (int i = 0; i < n; i++)
 	if (lo_ieee_signbit (Array<double>::elem (i)))
@@ -115,39 +151,13 @@ NDArray::all_integers (double& max_val, 
 
       if (D_NINT (val) != val)
 	return false;
     }
 
   return true;
 }
 
-Matrix
-NDArray::matrix_value (void) const
-{
-  Matrix retval;
-
-  int nd = ndims ();
-
-  switch (nd)
-    {
-    case 1:
-      retval = Matrix (Array2<double> (*this, dimensions(0), 1));
-      break;
-
-    case 2:
-      retval = Matrix (Array2<double> (*this, dimensions(0), dimensions(1)));
-      break;
-
-    default:
-      (*current_liboctave_error_handler)
-	("invalid converstion of NDArray to Matrix");
-      break;
-    }
-
-  return retval;
-}
-
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
diff --git a/liboctave/dNDArray.h b/liboctave/dNDArray.h
--- a/liboctave/dNDArray.h
+++ b/liboctave/dNDArray.h
@@ -63,16 +63,22 @@ public:
 
   // XXX FIXME XXX -- this is not quite the right thing.
 
   boolMatrix all (int dim = -1) const;
   boolMatrix any (int dim = -1) const;
 
   Matrix matrix_value (void) const;
 
+  NDArray squeeze (void) const { return ArrayN<double>::squeeze (); }
+
+  static void increment_index (Array<int>& ra_idx,
+			       const dim_vector& dimensions,
+			       int start_dimension = 0);
+
   // i/o
 
   // friend std::ostream& operator << (std::ostream& os, const NDArray& a);
   // friend std::istream& operator >> (std::istream& is, NDArray& a);
 
   static double resize_fill_value (void) { return 0; }
 
   bool any_element_is_negative (bool = false) const;
diff --git a/liboctave/dim-vector.h b/liboctave/dim-vector.h
--- a/liboctave/dim-vector.h
+++ b/liboctave/dim-vector.h
@@ -113,18 +113,16 @@ public:
 	  ndims = n;
 	}
       else
 	ndims = n;
     }
 
 private:
 
-  int rows;
-  int cols;
   int ndims;
   int *dims;
 };
 
 #endif
 
 /*
 ;;; Local Variables: ***
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,24 @@
+2003-10-09  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* pr-output.cc (PRINT_ND_ARRAY): New macro.
+	(octave_print_internal): Use it.
+
+2003-10-08  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* ov.cc	(octave_value::octave_value (const ArrayN<octave_value>&,
+	bool)):	New constructor.
+	* ov.h: Provide decl.
+
+	* ov.h (octave_value::squeeze): New virtual function.
+	* ov-base.cc (squeeze): Provide default implementation.
+	* ov-base-mat.h (octave_base_matrix::squeeze): New function.
+	* data.cc (Fsqueeze): New function.
+
 2003-10-03  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* load-save.cc (make_valid_identifier): Return new string.
 	Arg is now string, not char *.
 	(ident_is_all_digits): New function.
 	(hdf5_read_next_data): Use it.
 
 2003-10-02  John W. Eaton  <jwe@bevo.che.wisc.edu>
diff --git a/src/OPERATORS/op-m-m.cc b/src/OPERATORS/op-m-m.cc
--- a/src/OPERATORS/op-m-m.cc
+++ b/src/OPERATORS/op-m-m.cc
@@ -83,16 +83,30 @@ DEFBINOP (el_ldiv, matrix, matrix)
   CAST_BINOP_ARGS (const octave_matrix&, const octave_matrix&);
 
   return octave_value (quotient (v2.matrix_value (), v1.matrix_value ()));
 }
 
 DEFBINOP_FN (el_and, matrix, matrix, mx_el_and)
 DEFBINOP_FN (el_or, matrix, matrix, mx_el_or)
 
+#if 0
+static octave_value
+oct_assignop_assign (octave_value& a1,
+		     const octave_value_list& idx,
+		     const octave_value& a2)
+{
+  CAST_BINOP_ARGS (octave_matrix&, const octave_matrix&);
+
+  v1.assign (idx, v2.double_nd_array_value ());
+
+  return octave_value ();
+}
+#endif
+
 DEFASSIGNOP_FN (assign, matrix, matrix, assign)
 
 void
 install_m_m_ops (void)
 {
   INSTALL_UNOP (op_not, octave_matrix, not);
   INSTALL_UNOP (op_uminus, octave_matrix, uminus);
   INSTALL_UNOP (op_transpose, octave_matrix, transpose);
diff --git a/src/data.cc b/src/data.cc
--- a/src/data.cc
+++ b/src/data.cc
@@ -1179,16 +1179,32 @@ The @code{linspace} function always retu
 		retval = rv;
 	    }
 	}
     }
 
   return retval;
 }
 
+DEFUN (squeeze, args, ,
+  "-*- texinfo -*-\n\
+@deftypefn {Built-in Function} {} squeeze (@var{x})\n\
+Remove singleton dimensions from @var{x} and return the result.\n\
+@end deftypefn")
+{
+  octave_value retval;
+
+  if (args.length () == 1)
+    return args(0).squeeze ();
+  else
+    print_usage ("squeeze");    
+
+  return retval;
+}
+
 void
 symbols_of_data (void)
 {
 
 #define IMAGINARY_DOC_STRING "-*- texinfo -*-\n\
 @defvr {Built-in Variable} I\n\
 @defvrx {Built-in Variable} J\n\
 @defvrx {Built-in Variable} i\n\
diff --git a/src/ov-base-mat.h b/src/ov-base-mat.h
--- a/src/ov-base-mat.h
+++ b/src/ov-base-mat.h
@@ -61,16 +61,18 @@ public:
   octave_base_matrix (const octave_base_matrix& m)
     : octave_base_value (), matrix (m.matrix) { }
 
   ~octave_base_matrix (void) { }
 
   octave_value *clone (void) const { return new octave_base_matrix (*this); }
   octave_value *empty_clone (void) const { return new octave_base_matrix (); }
 
+  octave_value squeeze (void) const { return matrix.squeeze (); }
+
   octave_value subsref (const std::string& type,
 			const std::list<octave_value_list>& idx);
 
   octave_value_list subsref (const std::string& type,
 			     const std::list<octave_value_list>& idx,
     			     int nargout)
     {
       panic_impossible ();
diff --git a/src/ov-base.cc b/src/ov-base.cc
--- a/src/ov-base.cc
+++ b/src/ov-base.cc
@@ -51,16 +51,24 @@ Software Foundation, 59 Temple Place - S
 #include "ov-scalar.h"
 #include "ov-str-mat.h"
 #include "ov-fcn-handle.h"
 #include "variables.h"
 
 DEFINE_OV_TYPEID_FUNCTIONS_AND_DATA (octave_base_value, "<unknown type>");
 
 octave_value
+octave_base_value::squeeze (void) const
+{
+  std::string nm = type_name ();
+  error ("squeeze: invalid operation for %s type", nm.c_str ());
+  return octave_value ();
+}
+
+octave_value
 octave_base_value::subsref (const std::string&,
 			    const std::list<octave_value_list>&)
 {
   std::string nm = type_name ();
   error ("can't perform indexing operations for %s type", nm.c_str ());
   return octave_value ();
 }
 
diff --git a/src/ov-base.h b/src/ov-base.h
--- a/src/ov-base.h
+++ b/src/ov-base.h
@@ -63,16 +63,18 @@ public:
   ~octave_base_value (void) { }
 
   octave_value *clone (void) const { return new octave_base_value (*this); }
   octave_value *empty_clone (void) const { return new octave_base_value (); }
 
   type_conv_fcn numeric_conversion_function (void) const
     { return static_cast<type_conv_fcn> (0); }
 
+  octave_value squeeze (void) const;
+
   octave_value *try_narrowing_conversion (void)
     { return static_cast<octave_value *> (0); }
 
   octave_value subsref (const std::string& type,
 			const std::list<octave_value_list>& idx);
 
   octave_value_list subsref (const std::string& type,
 			     const std::list<octave_value_list>& idx,
diff --git a/src/ov.cc b/src/ov.cc
--- a/src/ov.cc
+++ b/src/ov.cc
@@ -405,16 +405,29 @@ octave_value::octave_value (const Cell& 
   if (is_cs_list)
     rep = new octave_cs_list (c);
   else
     rep = new octave_cell (c);
 
   rep->count = 1;
 }
 
+octave_value::octave_value (const ArrayN<octave_value>& a, bool is_cs_list)
+  : rep (0)
+{
+  Cell c (a);
+
+  if (is_cs_list)
+    rep = new octave_cs_list (c);
+  else
+    rep = new octave_cell (c);
+
+  rep->count = 1;
+}
+
 octave_value::octave_value (const Matrix& m)
   : rep (new octave_matrix (m))
 {
   rep->count = 1;
   maybe_mutate ();
 }
 
 octave_value::octave_value (const NDArray& a)
diff --git a/src/ov.h b/src/ov.h
--- a/src/ov.h
+++ b/src/ov.h
@@ -177,17 +177,18 @@ public:
   octave_value (long long int i);
 #endif
 #if defined (HAVE_UNSIGNED_LONG_LONG_INT)
   octave_value (unsigned long long int i);
 #endif
 
   octave_value (octave_time t);
   octave_value (double d);
-  octave_value (const Cell& m, bool is_cs_list = false);
+  octave_value (const ArrayN<octave_value>& a, bool is_cs_list = false);
+  octave_value (const Cell& c, bool is_cs_list = false);
   octave_value (const Matrix& m);
   octave_value (const NDArray& nda);
   octave_value (const DiagMatrix& d);
   octave_value (const RowVector& v);
   octave_value (const ColumnVector& v);
   octave_value (const Complex& C);
   octave_value (const ComplexMatrix& m);
   octave_value (const ComplexNDArray& cnda);
@@ -264,16 +265,19 @@ public:
 
   int get_count (void) const { return rep->count; }
 
   virtual type_conv_fcn numeric_conversion_function (void) const
     { return rep->numeric_conversion_function (); }
 
   void maybe_mutate (void);
 
+  virtual octave_value squeeze (void) const
+    { return rep->squeeze (); }
+
   virtual octave_value *try_narrowing_conversion (void)
     { return rep->try_narrowing_conversion (); }
 
   octave_value single_subsref (const std::string& type,
 			       const octave_value_list& idx);
 
   virtual octave_value subsref (const std::string& type,
 				const std::list<octave_value_list>& idx)
diff --git a/src/pr-output.cc b/src/pr-output.cc
--- a/src/pr-output.cc
+++ b/src/pr-output.cc
@@ -1480,30 +1480,93 @@ octave_print_internal (std::ostream& os,
 		  if (i < nr - 1)
 		    os << "\n";
 		}
 	    }
 	}
     }
 }
 
+#define PRINT_ND_ARRAY(os, nda, NDA_T, ELT_T, MAT_T) \
+  do \
+    { \
+      int ndims = nda.ndims (); \
+ \
+      dim_vector dims = nda.dims (); \
+ \
+      Array<int> ra_idx (ndims, 0); \
+ \
+      int m = 1; \
+ \
+      for (int i = 2; i < ndims; i++) \
+	m *= dims(i); \
+ \
+      int nr = dims(0); \
+      int nc = dims(1); \
+ \
+      for (int i = 0; i < m; i++) \
+	{ \
+	  std::string nm = "ans"; \
+ \
+	  if (m > 1) \
+	    { \
+	      nm += "(:,:,"; \
+ \
+	      OSSTREAM buf; \
+ \
+	      for (int k = 2; k < ndims; k++) \
+		{ \
+		  buf << ra_idx(k) + 1; \
+ \
+		  if (k < ndims - 1) \
+		    buf << ","; \
+		  else \
+		    buf << ")"; \
+		} \
+ \
+	      buf << OSSTREAM_ENDS; \
+ \
+	      nm += OSSTREAM_STR (buf); \
+ \
+	      OSSTREAM_FREEZE (buf); \
+	    } \
+ \
+	  Array<idx_vector> idx (ndims); \
+ \
+	  idx(0) = idx_vector (':'); \
+	  idx(1) = idx_vector (':'); \
+ \
+	  for (int k = 2; k < ndims; k++) \
+	    idx(k) = idx_vector (ra_idx(k) + 1); \
+ \
+          octave_value page \
+            = MAT_T (Array2<ELT_T> (nda.index (idx), nr, nc)); \
+ \
+	  page.print_with_name (os, nm); \
+ \
+	  if (i < m) \
+	    NDA_T::increment_index (ra_idx, dims, 2); \
+	} \
+    } \
+  while (0)
+
 void
 octave_print_internal (std::ostream& os, const NDArray& nda,
 		       bool pr_as_read_syntax, int extra_indent)
 {
   switch (nda.ndims ())
     {
     case 1:
     case 2:
       octave_print_internal (os, nda.matrix_value (),
 			     pr_as_read_syntax, extra_indent);
       break;
 
     default:
-      os << nda;
+      PRINT_ND_ARRAY (os, nda, NDArray, double, Matrix);
       break;
     }
 }
 
 static inline void
 pr_plus_format (std::ostream& os, const Complex& c)
 {
   double rp = c.real ();
@@ -1686,17 +1749,17 @@ octave_print_internal (std::ostream& os,
     {
     case 1:
     case 2:
       octave_print_internal (os, nda.matrix_value (),
 			     pr_as_read_syntax, extra_indent);
       break;
 
     default:
-      os << nda;
+      PRINT_ND_ARRAY (os, nda, ComplexNDArray, Complex, ComplexMatrix);
       break;
     }
 }
 
 void
 octave_print_internal (std::ostream& os, const Range& r,
 		       bool pr_as_read_syntax, int extra_indent)
 {
@@ -1821,17 +1884,17 @@ octave_print_internal (std::ostream& os,
     {
     case 1:
     case 2:
       octave_print_internal (os, nda.matrix_value (),
 			     pr_as_read_syntax, extra_indent);
       break;
 
     default:
-      os << nda;
+      PRINT_ND_ARRAY (os, nda, boolNDArray, bool, boolMatrix);
       break;
     }
 }
 
 void
 octave_print_internal (std::ostream& os, const charMatrix& chm,
 		       bool pr_as_read_syntax,
 		       int /* extra_indent XXX FIXME XXX */,
@@ -1887,17 +1950,17 @@ octave_print_internal (std::ostream& os,
     {
     case 1:
     case 2:
       octave_print_internal (os, nda.matrix_value (),
 			     pr_as_read_syntax, extra_indent, pr_as_string);
       break;
 
     default:
-      os << nda;
+      PRINT_ND_ARRAY (os, nda, charNDArray, char, charMatrix);
       break;
     }
 }
 
 extern void
 octave_print_internal (std::ostream&, const Cell&, bool, int, bool)
 {
   panic_impossible ();
