# HG changeset patch
# User jwe
# Date 830690974 0
#      Sun Apr 28 11:29:34 1996 +0000
# Node ID 49cdc5b183bc598dbebac7a46e01698be170b8fe
# Parent  dcf899227c2403b9d5d481d193da312ae69d424c
[project @ 1996-04-28 11:26:32 by jwe]

diff --git a/src/pager.cc b/src/pager.cc
--- a/src/pager.cc
+++ b/src/pager.cc
@@ -33,16 +33,17 @@ Software Foundation, 59 Temple Place - S
 
 #include "defaults.h"
 #include "defun.h"
 #include "error.h"
 #include "help.h"
 #include "oct-obj.h"
 #include "pager.h"
 #include "sighandlers.h"
+#include "unwind-prot.h"
 #include "user-prefs.h"
 
 pid_t octave_pager_pid = -1;
 
 // Our actual connection to the external pager.
 static oprocstream *external_pager = 0;
 
 // Nonzero means we write to the diary file.
@@ -51,16 +52,18 @@ static int write_to_diary_file = 0;
 // The name of the current diary file.
 static string diary_file;
 
 // The diary file.
 static ofstream external_diary_file;
 
 static sig_handler *saved_sigint_handler = 0;
 
+static int really_flush_to_pager = 0;
+
 static void
 do_sync (const char *msg)
 {
   if (! error_state)
     {
       if (msg && *msg)
 	{
 	  if (! external_pager)
@@ -103,25 +106,30 @@ do_sync (const char *msg)
 	    cout << msg;
 	}
     }
 }
 
 int
 octave_pager_buf::sync (void)
 {
-  sputc ('\0');
-
-  char *buf = eback ();
+  if (really_flush_to_pager
+      || (user_pref.page_screen_output && user_pref.page_output_immediately)
+      || ! user_pref.page_screen_output)
+    {
+      sputc ('\0');
 
-  do_sync (buf);
+      char *buf = eback ();
+
+      do_sync (buf);
 
-  octave_diary << buf;
+      octave_diary << buf;
 
-  seekoff (0, ios::beg);
+      seekoff (0, ios::beg);
+    }
 
   return 0;
 }
 
 int
 octave_diary_buf::sync (void)
 {
   sputc ('\0');
@@ -180,31 +188,39 @@ octave_diary_stream::stream (void)
     instance = new octave_diary_stream ();
 
   return *instance;
 }
 
 void
 flush_octave_stdout (void)
 {
+  begin_unwind_frame ("flush_octave_stdout");
+
+  unwind_protect_int (really_flush_to_pager);
+  
+  really_flush_to_pager = 1;
+
   octave_stdout.flush ();
 
   if (external_pager)
     {
       octave_pager_pid = -1;
 
       delete external_pager;
       external_pager = 0;
 
       if (saved_sigint_handler)
 	{
 	  octave_set_signal_handler (SIGINT, saved_sigint_handler);
 	  saved_sigint_handler = 0;
 	}
     }
+
+  run_unwind_frame ("flush_octave_stdout");
 }
 
 static void
 close_diary_file (void)
 {
   if (external_diary_file.is_open ())
     {
       octave_diary.flush ();
@@ -339,16 +355,19 @@ default_pager (void)
 }
 
 void
 symbols_of_pager (void)
 {
   DEFVAR (PAGER, default_pager (), 0, sv_pager_binary,
     "path to pager binary");
 
+  DEFVAR (page_output_immediately, 1.0, 0, page_output_immediately,
+    "if possible, send output intended for the screen through the pager");
+
   DEFVAR (page_screen_output, 1.0, 0, page_screen_output,
     "if possible, send output intended for the screen through the pager");
 }
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
diff --git a/src/user-prefs.cc b/src/user-prefs.cc
--- a/src/user-prefs.cc
+++ b/src/user-prefs.cc
@@ -56,16 +56,17 @@ init_user_prefs (void)
   user_pref.empty_list_elements_ok = 0;
   user_pref.gnuplot_has_multiplot = 0;
   user_pref.history_size = 0;
   user_pref.ignore_function_time_stamp = 0;
   user_pref.implicit_str_to_num_ok = 0;
   user_pref.ok_to_lose_imaginary_part = 0;
   user_pref.output_max_field_width = 0;
   user_pref.output_precision = 0;
+  user_pref.page_output_immediately = 0;
   user_pref.page_screen_output = 0;
   user_pref.prefer_column_vectors = 0;
   user_pref.prefer_zero_one_indexing = 0;
   user_pref.print_answer_id_name = 0;
   user_pref.print_empty_dimensions = 0;
   user_pref.propagate_empty_matrices = 0;
   user_pref.read_only_constants = 1;
   user_pref.resize_on_range_error = 0;
@@ -165,34 +166,33 @@ beep_on_error (void)
 
 
 // Should variables returned from functions have default values if
 // they are otherwise uninitialized?
 
 int
 define_all_return_values (void)
 {
-  user_pref.define_all_return_values =
-    check_preference ("define_all_return_values");
+  user_pref.define_all_return_values
+    = check_preference ("define_all_return_values");
 
   return 0;
 }
 
 
 // Should we allow assignments like:
 //
 //   octave> A(1) = 3; A(2) = 5
 //
 // for A already defined and a matrix type?
 
 int
 do_fortran_indexing (void)
 {
-  user_pref.do_fortran_indexing =
-    check_preference ("do_fortran_indexing"); 
+  user_pref.do_fortran_indexing = check_preference ("do_fortran_indexing");
 
   liboctave_dfi_flag = user_pref.do_fortran_indexing;
 
   return 0;
 }
 
 
 // Echo commands as they are executed?
@@ -201,43 +201,43 @@ do_fortran_indexing (void)
 //   2  ==>  echo commands from functions
 //   4  ==>  echo commands read from command line
 //
 // more than one state can be active at once.
 
 int
 echo_executing_commands (void)
 {
-  user_pref.echo_executing_commands =
-    check_preference ("echo_executing_commands"); 
+  user_pref.echo_executing_commands
+    = check_preference ("echo_executing_commands"); 
 
   return 0;
 }
 
 
 // Should ignore empty elements in a matrix list (i.e., is an
 //  expression like `[[], 1]' ok?
 
 int
 empty_list_elements_ok (void)
 {
-  user_pref.empty_list_elements_ok =
-    check_preference ("empty_list_elements_ok");
+  user_pref.empty_list_elements_ok
+    = check_preference ("empty_list_elements_ok");
 
   return 0;
 }
 
 
 // Does gnuplot appear to support multiplot?
 
 int
 gnuplot_has_multiplot (void)
 {
-  user_pref.gnuplot_has_multiplot =
-    check_preference ("gnuplot_has_multiplot");
+  user_pref.gnuplot_has_multiplot
+    = check_preference ("gnuplot_has_multiplot");
 
   return 0;
 }
 
 
 // How many lines of command history should we save?
 
 int
@@ -289,31 +289,44 @@ ignore_function_time_stamp (void)
 //   octave> 'abc' + 0
 //   97 98 99
 //
 // to happen?
 
 int
 implicit_str_to_num_ok (void)
 {
-  user_pref.implicit_str_to_num_ok =
-    check_preference ("implicit_str_to_num_ok");
+  user_pref.implicit_str_to_num_ok
+    = check_preference ("implicit_str_to_num_ok");
 
   return 0;
 }
 
 
 // Should we allow silent conversion of complex to real when a real
 // type is what we're really looking for?
 
 int
 ok_to_lose_imaginary_part (void)
 {
-  user_pref.ok_to_lose_imaginary_part =
-    check_preference ("ok_to_lose_imaginary_part");
+  user_pref.ok_to_lose_imaginary_part
+    = check_preference ("ok_to_lose_imaginary_part");
+
+  return 0;
+}
+
+
+// If output is going to the pager, should we send it as soon as it is
+// available, or wait until we are ready to prompt for input?
+
+int
+page_output_immediately (void)
+{
+  user_pref.page_output_immediately
+    = check_preference ("page_output_immediately");
 
   return 0;
 }
 
 
 // If possible, send all output intended for the screen through the
 // pager. 
 
@@ -331,36 +344,36 @@ page_screen_output (void)
 //   octave> A(1) = 3; A(2) = 5
 //
 // (for A undefined) should we build column vectors?  Returning true
 // only matters when resize_on_range_error is also true.
 
 int
 prefer_column_vectors (void)
 {
-  user_pref.prefer_column_vectors =
-    check_preference ("prefer_column_vectors");
+  user_pref.prefer_column_vectors
+    = check_preference ("prefer_column_vectors");
 
   liboctave_pcv_flag = user_pref.prefer_column_vectors;
 
   return 0;
 }
 
 
 // For things like
 //
 //   a = [2,3]; a([1,1])
 //
 // return [2 3] instead of [2 2].
 
 int
 prefer_zero_one_indexing (void)
 {
-  user_pref.prefer_zero_one_indexing =
-    check_preference ("prefer_zero_one_indexing");
+  user_pref.prefer_zero_one_indexing
+    = check_preference ("prefer_zero_one_indexing");
 
   liboctave_pzo_flag = user_pref.prefer_zero_one_indexing;
 
   return 0;
 }
 
 
 // Should we print things like
@@ -369,43 +382,42 @@ prefer_zero_one_indexing (void)
 //   a = 
 //
 //      1  2
 //      3  4
 
 int
 print_answer_id_name (void)
 {
-  user_pref.print_answer_id_name =
-    check_preference ("print_answer_id_name");
+  user_pref.print_answer_id_name = check_preference ("print_answer_id_name");
 
   return 0;
 }
 
 
 // Should we also print the dimensions of empty matrices?
 
 int
 print_empty_dimensions (void)
 {
-  user_pref.print_empty_dimensions =
-    check_preference ("print_empty_dimensions");
+  user_pref.print_empty_dimensions
+    = check_preference ("print_empty_dimensions");
 
   return 0;
 }
 
 
 // Should operations on empty matrices return empty matrices or an
 // error?
 
 int
 propagate_empty_matrices (void)
 {
-  user_pref.propagate_empty_matrices =
-    check_preference ("propagate_empty_matrices");
+  user_pref.propagate_empty_matrices
+    = check_preference ("propagate_empty_matrices");
 
   return 0;
 }
 
 // Should built-in constants always be read only?
 
 int
 read_only_constants (void)
@@ -416,33 +428,33 @@ read_only_constants (void)
 }
 
 // When doing assignments, should we resize matrices if the indices
 // are outside the current bounds?
 
 int
 resize_on_range_error (void)
 {
-  user_pref.resize_on_range_error =
-    check_preference ("resize_on_range_error");
+  user_pref.resize_on_range_error
+    = check_preference ("resize_on_range_error");
 
   liboctave_rre_flag = user_pref.resize_on_range_error;
 
   return 0;
 }
 
 
 // If a function does not return any values explicitly, return the
 // last computed value.
 
 int
 return_last_computed_value (void)
 {
-  user_pref.return_last_computed_value =
-    check_preference ("return_last_computed_value");
+  user_pref.return_last_computed_value
+    = check_preference ("return_last_computed_value");
 
   return 0;
 }
 
 
 // Should we save command history?
 
 int
@@ -454,18 +466,17 @@ saving_history (void)
 }
 
 
 // Suppress printing results in called functions.
 
 int
 silent_functions (void)
 {
-  user_pref.silent_functions =
-    check_preference ("silent_functions");
+  user_pref.silent_functions = check_preference ("silent_functions");
 
   return 0;
 }
 
 
 // Should should big matrices be split into smaller slices for output?
 
 int
@@ -515,50 +526,50 @@ suppress_verbose_help_message (void)
 //
 //   octave> ones (-1, 5)
 //
 // result in an empty matrix or an error?
 
 int
 treat_neg_dim_as_zero (void)
 {
-  user_pref.treat_neg_dim_as_zero =
-    check_preference ("treat_neg_dim_as_zero");
+  user_pref.treat_neg_dim_as_zero
+    = check_preference ("treat_neg_dim_as_zero");
 
   return 0;
 }
 
 
 // Generate a warning for the assignment in things like
 //
 //   octave> if (a = 2 < n)
 //
 // but not
 //
 //   octave> if ((a = 2) < n)
 
 int
 warn_assign_as_truth_value (void)
 {
-  user_pref.warn_assign_as_truth_value =
-    check_preference ("warn_assign_as_truth_value");
+  user_pref.warn_assign_as_truth_value
+    = check_preference ("warn_assign_as_truth_value");
 
   return 0;
 }
 
 
 // Generate a warning for the comma in things like
 //
 //   octave> global a, b = 2
 
 int
 warn_comma_in_global_decl (void)
 {
-  user_pref.warn_comma_in_global_decl =
-    check_preference ("warn_comma_in_global_decl");
+  user_pref.warn_comma_in_global_decl
+    = check_preference ("warn_comma_in_global_decl");
 
   return 0;
 }
 
 
 // On IEEE machines, allow divide by zero errors to be suppressed.
 
 int
@@ -570,32 +581,32 @@ warn_divide_by_zero (void)
 }
 
 // Generate warning if declared function name disagrees with the name
 // of the file in which it is defined.
 
 int
 warn_function_name_clash (void)
 {
-  user_pref.warn_function_name_clash =
-    check_preference ("warn_function_name_clash");
+  user_pref.warn_function_name_clash
+    = check_preference ("warn_function_name_clash");
 
   return 0;
 }
 
 
 // Generate warning if a statement in a function is not terminated
 // with a semicolon.  Useful for checking functions that should only
 // produce output using explicit printing statements.
 
 int
 warn_missing_semicolon (void)
 {
-  user_pref.warn_missing_semicolon = 
-    check_preference ("warn_missing_semicolon");
+  user_pref.warn_missing_semicolon
+    = check_preference ("warn_missing_semicolon");
 
   return 0;
 }
 
 
 // Should whitespace in a literal matrix list be automatically
 // converted to commas and semicolons?
 //
diff --git a/src/user-prefs.h b/src/user-prefs.h
--- a/src/user-prefs.h
+++ b/src/user-prefs.h
@@ -35,16 +35,17 @@ struct user_preferences
   int empty_list_elements_ok;
   int gnuplot_has_multiplot;
   int history_size;
   int ignore_function_time_stamp;
   int implicit_str_to_num_ok;
   int ok_to_lose_imaginary_part;
   int output_max_field_width;
   int output_precision;
+  int page_output_immediately;
   int page_screen_output;
   int prefer_column_vectors;
   int prefer_zero_one_indexing;
   int print_answer_id_name;
   int print_empty_dimensions;
   int propagate_empty_matrices;
   int read_only_constants;
   int resize_on_range_error;
@@ -91,16 +92,17 @@ extern int define_all_return_values (voi
 extern int do_fortran_indexing (void);
 extern int echo_executing_commands (void);
 extern int empty_list_elements_ok (void);
 extern int gnuplot_has_multiplot (void);
 extern int history_size (void);
 extern int ignore_function_time_stamp (void);
 extern int implicit_str_to_num_ok (void);
 extern int ok_to_lose_imaginary_part (void);
+extern int page_output_immediately (void);
 extern int page_screen_output (void);
 extern int prefer_column_vectors (void);
 extern int prefer_zero_one_indexing (void);
 extern int print_answer_id_name (void);
 extern int print_empty_dimensions (void);
 extern int propagate_empty_matrices (void);
 extern int read_only_constants (void);
 extern int resize_on_range_error (void);
