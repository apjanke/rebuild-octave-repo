# HG changeset patch
# User Rik <rik@octave.org>
# Date 1365659010 25200
#      Wed Apr 10 22:43:30 2013 -0700
# Node ID b10a23fe80bb55570a9c0af98541590ae7ad8059
# Parent  f50fe9c50f553a27c429f4788ddf00aa53a9aacc
doc: Tweak docstrings of functions changed for Texinfo 5.0 compatibility.

* scripts/audio/wavread.m, scripts/miscellaneous/getappdata.m,
scripts/miscellaneous/license.m, scripts/miscellaneous/ver.m,
scripts/plot/daspect.m, scripts/plot/graphics_toolkit.m,
scripts/plot/pbaspect.m, scripts/polynomial/splinefit.m, scripts/set/union.m,
scripts/signal/freqz.m: Improve docstring wording.

diff --git a/scripts/audio/wavread.m b/scripts/audio/wavread.m
--- a/scripts/audio/wavread.m
+++ b/scripts/audio/wavread.m
@@ -12,38 +12,42 @@
 ## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
-## @deftypefn {Function File} {@var{y} =} wavread (@var{filename})
+## @deftypefn  {Function File} {@var{y} =} wavread (@var{filename})
 ## @deftypefnx {Function File} {[@var{y}, @var{Fs}, @var{bps}] =} wavread (@var{filename})
 ## @deftypefnx {Function File} {[@dots{}] =} wavread (@var{filename}, @var{n})
-## @deftypefnx {Function File} {[@dots{}] =} wavread (@var{filename}, @var{n1} @var{n2})
+## @deftypefnx {Function File} {[@dots{}] =} wavread (@var{filename}, [@var{n1} @var{n2}])
 ## @deftypefnx {Function File} {[@var{samples}, @var{channels}] =} wavread (@var{filename}, "size")
 ## 
 ## Load the RIFF/WAVE sound file @var{filename}, and return the samples
 ## in vector @var{y}.  If the file contains multichannel data, then
 ## @var{y} is a matrix with the channels represented as columns.
 ##
 ## @code{[@var{y}, @var{Fs}, @var{bps}] = wavread (@var{filename})}
+##
 ## Additionally return the sample rate (@var{fs}) in Hz and the number of bits
 ## per sample (@var{bps}).
 ##
 ## @code{[@dots{}] = wavread (@var{filename}, @var{n})}
+##
 ## Read only the first @var{n} samples from each channel.
 ##
-## @code{wavread (@var{filename}, @var{n1} @var{n2})}
+## @code{wavread (@var{filename}, [@var{n1} @var{n2}])}
+##
 ## Read only samples @var{n1} through @var{n2} from each channel.
 ##
 ## @code{[@var{samples}, @var{channels}] = wavread (@var{filename}, "size")}
-## Return the number of samples (@var{n}) and channels (@var{ch})
+##
+## Return the number of samples (@var{n}) and number of channels (@var{ch})
 ## instead of the audio data.
 ## @seealso{wavwrite}
 ## @end deftypefn
 
 ## Author: Michael Zeising <michael@michaels-website.de>
 ## Created: 06 December 2005
 
 function [y, samples_per_sec, bits_per_sample] = wavread (filename, param)
diff --git a/scripts/miscellaneous/getappdata.m b/scripts/miscellaneous/getappdata.m
--- a/scripts/miscellaneous/getappdata.m
+++ b/scripts/miscellaneous/getappdata.m
@@ -10,24 +10,24 @@
 ## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 ## GNU General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
-## @deftypefn {Function File} {@var{value} =} getappdata (@var{h}, @var{name})
+## @deftypefn  {Function File} {@var{value} =} getappdata (@var{h}, @var{name})
 ## @deftypefnx {Function File} {@var{appdata} =} getappdata (@var{h})
 ## 
 ## Return the @var{value} for named application data for the object(s) with
 ## handle(s) @var{h}.
 ## 
-## @code{getappdata(@var{h})} returns a structure, @var{appdata}, whose fields correspond to the appdata
-## properties.
+## @code{getappdata(@var{h})} returns a structure, @var{appdata}, whose fields
+## correspond to the appdata properties.
 ## @end deftypefn
 
 ## Author: Ben Abbott <bpabbott@mac.com>
 ## Created: 2010-07-15
 
 function val = getappdata (h, name)
 
   if (all (ishandle (h)) && nargin == 2 && ischar (name))
diff --git a/scripts/miscellaneous/license.m b/scripts/miscellaneous/license.m
--- a/scripts/miscellaneous/license.m
+++ b/scripts/miscellaneous/license.m
@@ -12,50 +12,55 @@
 ## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
-## @deftypefn {Function File} {} license
+## @deftypefn  {Command} {} license
 ## @deftypefnx {Function File} {} license ("inuse")
 ## @deftypefnx {Function File} {@var{retval} =} license ("inuse")
 ## @deftypefnx {Function File} {@var{retval} =} license ("test", @var{feature})
 ## @deftypefnx {Function File} {} license ("test", @var{feature}, @var{toggle})
 ## @deftypefnx {Function File} {@var{retval} =} license ("checkout", @var{feature})
 ## 
 ## Display the license of Octave.
 ##
 ## @code{license ("inuse")}
+##
 ## Display a list of packages currently being used.
 ##
 ## @code{@var{retval} = license ("inuse")}
+##
 ## Return a structure containing the fields @code{feature} and @code{user}.
 ##
 ## @code{@var{retval} = license ("test", @var{feature})}
+##
 ## Return 1 if a license exists for the product identified by the string
 ## @var{feature} and 0 otherwise.  The argument @var{feature} is case
 ## insensitive and only the first 27 characters are checked.
 ##
 ## @code{license ("test", @var{feature}, @var{toggle})}
+##
 ## Enable or disable license testing for @var{feature}, depending on
 ## @var{toggle}, which may be one of:
 ##
 ## @table @asis
 ## @item "enable"
 ## Future tests for the specified license of @var{feature} are conducted
 ## as usual.
 ##
 ## @item "disable"
 ## Future tests for the specified license of @var{feature} return 0.
 ## @end table
 ##
 ## @code{@var{retval} = license ("checkout", @var{feature})}
+##
 ## Check out a license for @var{feature}, returning 1 on success and 0
 ## on failure.
 ##
 ## This function is provided for compatibility with @sc{matlab}.
 ## @seealso{ver, version}
 ## @end deftypefn
 
 ## Author: William Poetra Yoga Hadisoeseno <williampoetra@gmail.com>
diff --git a/scripts/miscellaneous/ver.m b/scripts/miscellaneous/ver.m
--- a/scripts/miscellaneous/ver.m
+++ b/scripts/miscellaneous/ver.m
@@ -12,47 +12,50 @@
 ## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
-## @deftypefn {Function File} {} ver ()
+## @deftypefn  {Function File} {} ver ()
 ## @deftypefnx {Function File} {v =} ver ()
 ## @deftypefnx {Function File} {v =} ver ("Octave")
 ## @deftypefnx {Function File} {v =} ver (@var{package})
 ## 
 ## Display a header containing the current Octave version number, license
-## string and operating system, followed by the installed package names,
+## string, and operating system followed by a list of installed packages,
 ## versions, and installation directories.
 ##
 ## @code{v = ver ()}
-## Return a vector of structures, respecting Octave and each installed package.
+##
+## Return a vector of structures describing Octave and each installed package.
 ## The structure includes the following fields.
 ##
 ## @table @code
 ## @item Name
 ## Package name.
 ##
 ## @item Version
 ## Version of the package.
 ##
 ## @item Revision
 ## Revision of the package.
 ##
 ## @item Date
-## Date respecting the version/revision.
+## Date of the version/revision.
 ## @end table
 ##
 ## @code{v = ver ("Octave")}
+##
 ## Return version information for Octave only.
 ##
 ## @code{v = ver (@var{package})}
+##
 ## Return version information for @var{package}.
 ##
 ## @seealso{version, octave_config_info}
 ## @end deftypefn
 
 ## Author: William Poetra Yoga Hadisoeseno <williampoetra@gmail.com>
 
 function varargout = ver (package = "")
diff --git a/scripts/plot/daspect.m b/scripts/plot/daspect.m
--- a/scripts/plot/daspect.m
+++ b/scripts/plot/daspect.m
@@ -12,33 +12,37 @@
 ## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
-## @deftypefn {Function File} {} daspect (@var{data_aspect_ratio})
-## @deftypefnx {Function File} {@var{data_aspect_ratio} =} daspect ()
+## @deftypefn  {Function File} {@var{data_aspect_ratio} =} daspect ()
+## @deftypefnx {Function File} {} daspect (@var{data_aspect_ratio})
 ## @deftypefnx {Function File} {} daspect (@var{mode})
 ## @deftypefnx {Function File} {@var{data_aspect_ratio_mode} =} daspect ("mode")
 ## @deftypefnx {Function File} {} daspect (@var{hax}, @dots{})
-## @code{daspect} sets the data aspect ratio of the current axes.  The aspect 
-## ratio is a normalized 3-element vector representing the span of the x, y, and
-## z-axes limits.
-## 
-## When called without any arguments it returns data aspect ratio of the current axes.
+## Query or set the data aspect ratio of the current axes.  The aspect 
+## ratio is a normalized 3-element vector representing the span of the x, y,
+## and z-axis limits.
 ## 
-## @code{(daspect (@var{mode}))} sets the data aspect ratio mode of the current axes.
+## @code{(daspect (@var{mode}))}
+##
+## Set the data aspect ratio mode of the current axes.  @var{mode} is
+## either "auto" or "manual".
 ## 
-## @code{daspect ("mode")} returns the data aspect ratio mode of the current axes.
+## @code{daspect ("mode")}
+##
+## Return the data aspect ratio mode of the current axes.
 ## 
-## @code{daspect (@var{hax}, @dots{})} uses the axes, with handle @var{hax},
-## instead of the current axes.
+## @code{daspect (@var{hax}, @dots{})}
+##
+## Operate on the axes in handle @var{hax} instead of the current axes.
 ## 
 ## @seealso{axis, pbaspect, xlim, ylim, zlim}
 ## @end deftypefn
 
 ## Author: Ben Abbott <bpabbott@mac.com>
 ## Created: 2010-01-26
 
 function varargout = daspect (varargin)
diff --git a/scripts/plot/graphics_toolkit.m b/scripts/plot/graphics_toolkit.m
--- a/scripts/plot/graphics_toolkit.m
+++ b/scripts/plot/graphics_toolkit.m
@@ -12,33 +12,37 @@
 ## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
-## @deftypefn {Function File} {@var{name} =} graphics_toolkit ()
+## @deftypefn  {Function File} {@var{name} =} graphics_toolkit ()
 ## @deftypefnx {Function File} {@var{name} =} graphics_toolkit (@var{hlist})
 ## @deftypefnx {Function File} {} graphics_toolkit (@var{name})
 ## @deftypefnx {Function File} {} graphics_toolkit (@var{hlist}, @var{name})
+## Return the default graphics toolkit.  The default graphics toolkit value
+## is assigned to new figures.
 ## 
-## @code{graphics_toolkit (@var{hlist})} returns the default graphics toolkit.  
-## The default graphics toolkit value is assigned to new figures.
+## @code{graphics_toolkit (@var{hlist})}
 ## 
-## @code{graphics_toolkit (@var{name})} returns the graphics toolkits 
-## for the figures with handles @var{hlist}.
+## Return the graphics toolkits for the figures with handles @var{hlist}.
+## 
+## @code{graphics_toolkit (@var{name})}
 ## 
-## @code{graphics_toolkit (@var{name})} sets the default graphics toolkit 
-## to @var{name}.  If the toolkit is not already loaded, it is initialized 
-## by calling the function @code{__init_@var{name}__}.
+## Set the default graphics toolkit to @var{name}.  If the toolkit is not
+## already loaded, it is initialized by calling the function
+## @code{__init_@var{name}__}.
 ## 
-## @code{graphics_toolkit (@var{hlist}, @var{name})} sets the graphics toolkit 
-## for the figures with handles @var{hlist} to @var{name}.
+## @code{graphics_toolkit (@var{hlist}, @var{name})}
+##
+## Set the graphics toolkit for the figures with handles @var{hlist} to
+## @var{name}.
 ## 
 ## @seealso{available_graphics_toolkits}
 ## @end deftypefn
 
 function retval = graphics_toolkit (name, hlist = [])
 
   if (nargin > 2)
     print_usage ();
diff --git a/scripts/plot/pbaspect.m b/scripts/plot/pbaspect.m
--- a/scripts/plot/pbaspect.m
+++ b/scripts/plot/pbaspect.m
@@ -12,35 +12,38 @@
 ## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
-## @deftypefn {Function File} {} pbaspect (@var{plot_box_aspect_ratio})
-## @deftypefnx {Function File} {@var{plot_box_aspect_ratio} =} pbaspect ( )
+## @deftypefn  {Function File} {@var{plot_box_aspect_ratio} =} pbaspect ( )
+## @deftypefnx {Function File} {} pbaspect (@var{plot_box_aspect_ratio})
 ## @deftypefnx {Function File} {} pbaspect (@var{mode})
 ## @deftypefnx {Function File} {@var{plot_box_aspect_ratio_mode} =} pbaspect ("mode")
 ## @deftypefnx {Function File} {} pbaspect (@var{hax}, @dots{})
-## 
-## Set the plot box aspect ratio of the current axes.  The aspect ratio
-## is a normalized 3-element vector representing the rendered lengths of
-## the x, y, and z-axes.
-## 
-## When called without any arguments, returns the plot box aspect ratio of 
-## the current axes.
-## 
-## @code{pbaspect(@var{mode})} sets the plot box aspect ratio mode of the current axes.
-## 
-## @code{pbaspect ("mode")} returns the plot box aspect ratio mode of the current axes.
-## 
-## @code{pbaspect (@var{hax}, @dots{})} uses the axes, with handle @var{hax}, instead 
-## of the current axes.
+##
+## Query or set the plot box aspect ratio of the current axes.  The aspect
+## ratio is a normalized 3-element vector representing the rendered lengths of
+## the x, y, and z axes.
+##
+## @code{pbaspect(@var{mode})}
+##
+## Set the plot box aspect ratio mode of the current axes.  @var{mode} is
+## either "auto" or "manual".
+##
+## @code{pbaspect ("mode")}
+##
+## Return the plot box aspect ratio mode of the current axes.
+##
+## @code{pbaspect (@var{hax}, @dots{})}
+##
+## Operate on the axes in handle @var{hax} instead of the current axes.
 ##
 ## @seealso{axis, daspect, xlim, ylim, zlim}
 ## @end deftypefn
 
 ## Author: Ben Abbott <bpabbott@mac.com>
 ## Created: 2010-01-26
 
 function varargout = pbaspect (varargin)
diff --git a/scripts/polynomial/splinefit.m b/scripts/polynomial/splinefit.m
--- a/scripts/polynomial/splinefit.m
+++ b/scripts/polynomial/splinefit.m
@@ -12,27 +12,27 @@
 ## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
-## @deftypefn {Function File} {@var{pp} =} splinefit (@var{x}, @var{y}, @var{breaks})
+## @deftypefn  {Function File} {@var{pp} =} splinefit (@var{x}, @var{y}, @var{breaks})
 ## @deftypefnx {Function File} {@var{pp} =} splinefit (@var{x}, @var{y}, @var{p})
 ## @deftypefnx {Function File} {@var{pp} =} splinefit (@dots{}, "periodic", @var{periodic})
 ## @deftypefnx {Function File} {@var{pp} =} splinefit (@dots{}, "robust", @var{robust})
 ## @deftypefnx {Function File} {@var{pp} =} splinefit (@dots{}, "beta", @var{beta})
 ## @deftypefnx {Function File} {@var{pp} =} splinefit (@dots{}, "order", @var{order})
 ## @deftypefnx {Function File} {@var{pp} =} splinefit (@dots{}, "constraints", @var{constraints})
 ##
 ## Fit a piecewise cubic spline with breaks (knots) @var{breaks} to the
 ## noisy data, @var{x} and @var{y}.  @var{x} is a vector, and @var{y}
-## a vector or N-D array.  If @var{y} is an N-D array, then @var{x}(j)
+## is a vector or N-D array.  If @var{y} is an N-D array, then @var{x}(j)
 ## is matched to @var{y}(:,@dots{},:,j).
 ##
 ## The fitted spline is returned as a piecewise polynomial, @var{pp}, and
 ## may be evaluated using @code{ppval}.
 ##
 ## @var{p} is a positive integer defining the number of intervals along @var{x},
 ## and @var{p}+1 is the number of breaks.  The number of points in each interval
 ## differ by no more than 1.
@@ -62,17 +62,17 @@
 ## linear constraints on the fit.  The structure has three fields, "xc",
 ## "yc", and "cc".
 ##
 ## @table @asis
 ## @item "xc"
 ## Vector of the x-locations of the constraints.
 ##
 ## @item "yc"
-## Constraining values at the locations, @var{xc}.
+## Constraining values at the locations @var{xc}.
 ## The default is an array of zeros.
 ##
 ## @item "cc"
 ## Coefficients (matrix).  The default is an array of ones.  The number of
 ## rows is limited to the order of the piecewise polynomials, @var{order}.
 ## @end table
 ##
 ## Constraints are linear combinations of derivatives of order 0 to
@@ -87,16 +87,69 @@
 ## cc(1,j) * y(xc(j)) + cc(2,j) * y'(xc(j)) + ... = yc(:,...,:,j).
 ## @end ifnottex
 ## @end group
 ## @end example
 ##
 ## @seealso{interp1, unmkpp, ppval, spline, pchip, ppder, ppint, ppjumps}
 ## @end deftypefn
 
+function pp = splinefit (x, y, breaks, varargin)
+  if (nargin > 3)
+    n = cellfun (@ischar, varargin, "uniformoutput", true);
+    varargin(n) = lower (varargin(n));
+    try
+      props = struct (varargin{:});
+    catch
+      print_usage ();
+    end_try_catch
+  else
+    props = struct ();
+  endif
+  fields = fieldnames (props);
+  for f = 1:numel (fields)
+    if (! any (strcmp (fields{f},
+                       {"periodic", "robust", "beta", "order", "constraints"})))
+      error ("splinefit:invalidproperty",
+             "unrecognized property '%s'", fields{f});
+    endif
+  endfor
+  args = {};
+  if (isfield (props, "periodic") && props.periodic)
+    args{end+1} = "p";
+  endif
+  if (isfield (props, "robust") && props.robust)
+    args{end+1} = "r";
+  endif
+  if (isfield (props, "beta"))
+    if (0 < props.beta && props.beta < 1)
+      args{end+1} = props.beta;
+    else
+      error ("splinefit:invalidbeta", "invalid beta parameter (0 < beta < 1)");
+    endif
+  endif
+  if (isfield (props, "order"))
+    if (props.order >= 0)
+      args{end+1} = props.order + 1;
+    else
+      error ("splinefit:invalidorder", "invalid order");
+    endif
+  endif
+  if (isfield (props, "constraints"))
+    args{end+1} = props.constraints;
+  endif
+  if (nargin < 3)
+    print_usage ();
+  elseif (! isnumeric (breaks) || ! isvector (breaks))
+    print_usage ();
+  endif
+  pp = __splinefit__ (x, y, breaks, args{:});
+endfunction
+
+
 %!demo
 %! % Noisy data
 %! x = linspace (0, 2*pi, 100);
 %! y = sin (x) + 0.1 * randn (size (x));
 %! % Breaks
 %! breaks = [0:5, 2*pi];
 %! % Fit a spline of order 5
 %! pp = splinefit (x, y, breaks, "order", 4);
@@ -164,69 +217,16 @@
 %! plot (x, y, "s", x, ppval (pp, x), "r", breaks, ppval (pp, breaks), "+r")
 %! xlabel ("Independent Variable")
 %! ylabel ("Dependent Variable")
 %! title ("Fit a 5th order piece-wise periodic polynomial with constraints")
 %! legend ({"data", "fit", "breaks"})
 %! axis tight
 %! ylim auto
 
-function pp = splinefit (x, y, breaks, varargin)
-  if (nargin > 3)
-    n = cellfun (@ischar, varargin, "uniformoutput", true);
-    varargin(n) = lower (varargin(n));
-    try
-      props = struct (varargin{:});
-    catch
-      print_usage ();
-    end_try_catch
-  else
-    props = struct ();
-  endif
-  fields = fieldnames (props);
-  for f = 1:numel (fields)
-    if (! any (strcmp (fields{f},
-                       {"periodic", "robust", "beta", "order", "constraints"})))
-      error ("splinefit:invalidproperty",
-             "unrecognized property '%s'", fields{f});
-    endif
-  endfor
-  args = {};
-  if (isfield (props, "periodic") && props.periodic)
-    args{end+1} = "p";
-  endif
-  if (isfield (props, "robust") && props.robust)
-    args{end+1} = "r";
-  endif
-  if (isfield (props, "beta"))
-    if (0 < props.beta && props.beta < 1)
-      args{end+1} = props.beta;
-    else
-      error ("splinefit:invalidbeta", "invalid beta parameter (0 < beta < 1)");
-    endif
-  endif
-  if (isfield (props, "order"))
-    if (props.order >= 0)
-      args{end+1} = props.order + 1;
-    else
-      error ("splinefit:invalidorder", "invalid order");
-    endif
-  endif
-  if (isfield (props, "constraints"))
-    args{end+1} = props.constraints;
-  endif
-  if (nargin < 3)
-    print_usage ();
-  elseif (! isnumeric (breaks) || ! isvector (breaks))
-    print_usage ();
-  endif
-  pp = __splinefit__ (x, y, breaks, args{:});
-endfunction
-
-
 %!shared xb, yb, x
 %! xb = 0:2:10;
 %! yb = 2*rand (size (xb)) - 1;
 %! x = 0:0.1:10;
 
 %!test
 %! y = interp1 (xb, yb, x, "linear");
 %! assert (ppval (splinefit (x, y, xb, "order", 1), x), y, 15 * eps ());
diff --git a/scripts/set/union.m b/scripts/set/union.m
--- a/scripts/set/union.m
+++ b/scripts/set/union.m
@@ -18,42 +18,41 @@
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {} union (@var{a}, @var{b})
 ## @deftypefnx {Function File} {} union (@var{a}, @var{b}, "rows")
 ## @deftypefnx {Function File} {[@var{c}, @var{ia}, @var{ib}] =} union (@var{a}, @var{b})
 ##
 ## Return the set of elements that are in either of the sets @var{a} and
-## @var{b}.  @var{a}, @var{b} may be cell arrays of string(s).
+## @var{b}.  @var{a}, @var{b} may be cell arrays of strings.
 ## For example:
 ##
 ## @example
 ## @group
 ## union ([1, 2, 4], [2, 3, 5])
 ##     @result{} [1, 2, 3, 4, 5]
 ## @end group
 ## @end example
 ##
-## If the optional third input argument is the string "rows" each row of
-## the matrices @var{a} and @var{b} will be considered an element of sets.
+## If the optional third input argument is the string "rows" then each row of
+## the matrices @var{a} and @var{b} will be considered as a single set element.
 ## For example:
 ##
 ## @example
 ## @group
 ## union ([1, 2; 2, 3], [1, 2; 3, 4], "rows")
 ##    @result{}  1   2
 ##        2   3
 ##        3   4
 ## @end group
 ## @end example
 ##
-##
-## Return index vectors @var{ia} and @var{ib} such that @code{a(ia)} and
-## @code{b(ib)} are disjoint sets whose union is @var{c}.
+## The optional outputs @var{ia} and @var{ib} are index vectors such that
+## @code{a(ia)} and @code{b(ib)} are disjoint sets whose union is @var{c}.
 ##
 ## @seealso{intersect, setdiff, unique}
 ## @end deftypefn
 
 ## Author: jwe
 
 function [y, ia, ib] = union (a, b, varargin)
 
diff --git a/scripts/signal/freqz.m b/scripts/signal/freqz.m
--- a/scripts/signal/freqz.m
+++ b/scripts/signal/freqz.m
@@ -12,17 +12,17 @@
 ## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
-## @deftypefn {Function File} {[@var{h}, @var{w}] =} freqz (@var{b}, @var{a}, @var{n}, "whole")
+## @deftypefn  {Function File} {[@var{h}, @var{w}] =} freqz (@var{b}, @var{a}, @var{n}, "whole")
 ## @deftypefnx {Function File} {@var{h} =} freqz (@var{b}, @var{a}, @var{w})
 ## @deftypefnx {Function File} {[@dots{}] =} freqz (@dots{}, @var{Fs})
 ## @deftypefnx {Function File} {} freqz (@dots{})
 ## 
 ## Return the complex frequency response @var{h} of the rational IIR filter
 ## whose numerator and denominator coefficients are @var{b} and @var{a},
 ## respectively.  The response is evaluated at @var{n} angular frequencies
 ## between 0 and
@@ -31,43 +31,46 @@
 ## @end ifnottex
 ## @tex
 ##  $2\pi$.
 ## @end tex
 ##
 ## @noindent
 ## The output value @var{w} is a vector of the frequencies.
 ##
-## If the fourth argument is omitted, the response is evaluated at
+## If @var{a} is omitted, the denominator is assumed to be 1 (this
+## corresponds to a simple FIR filter).
+##
+## If @var{n} is omitted, a value of 512 is assumed.
+##
+## For fastest computation, @var{n} should factor into a small number of
+## small primes.
+##
+## If the fourth argument, "whole", is omitted the response is evaluated at
 ## frequencies between 0 and
 ## @ifnottex
 ##  pi.
 ## @end ifnottex
 ## @tex
 ##  $\pi$.
 ## @end tex
 ##
-## If @var{n} is omitted, a value of 512 is assumed.
-##
-## If @var{a} is omitted, the denominator is assumed to be 1 (this
-## corresponds to a simple FIR filter).
+## @code{freqz (@var{b}, @var{a}, @var{w})}
 ##
-## For fastest computation, @var{n} should factor into a small number of
-## small primes.
-##
-## @code{freqz (@var{b}, @var{a}, @var{w})}
 ## Evaluate the response at the specific frequencies in the vector @var{w}.
 ## The values for @var{w} are measured in radians.
 ##
 ## @code{[@dots{}] = freqz (@dots{}, @var{Fs})}
+##
 ## Return frequencies in Hz instead of radians assuming a sampling rate
 ## @var{Fs}.  If you are evaluating the response at specific frequencies
 ## @var{w}, those frequencies should be requested in Hz rather than radians.
 ##
 ## @code{freqz (@dots{})}
+##
 ## Plot the pass band, stop band and phase response of @var{h} rather
 ## than returning them.
 ## @end deftypefn
 
 ## Author: jwe ???
 
 function [h_r, f_r] = freqz (b, a, n, region, Fs)
 
