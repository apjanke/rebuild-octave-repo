# HG changeset patch
# User CarnÃ« Draug <carandraug@octave.org>
# Date 1377843553 -3600
#      Fri Aug 30 07:19:13 2013 +0100
# Node ID 80bf005cdf8e2e0a6f730e71daded707857e9582
# Parent  ba79ba4e83ab47b6e9ccc1dc8769013ebb93386d
New function __magick_ping__ to speed reading of images.

* __magick_read__.cc (__magick_ping__): New function that only pings
  one of the images in a file to obtain height, width and format
  information. This becomes an alternative to imfinfo for internal
  Octave functions. Because imfinfo requires reading of the whole
  file and all images, this has a large speed increase, specially
  for multipage images.
* imformats.m: use __magick_ping__() to check image format.
* private/__imread__.m: use __magick_ping__() to get rows and columns
  of an image which is used to set the reading defaults.

diff --git a/libinterp/dldfcn/__magick_read__.cc b/libinterp/dldfcn/__magick_read__.cc
--- a/libinterp/dldfcn/__magick_read__.cc
+++ b/libinterp/dldfcn/__magick_read__.cc
@@ -1406,16 +1406,62 @@ use @code{imwrite}.\n\
   return retval;
 }
 
 /*
 ## No test needed for internal helper function.
 %!assert (1)
 */
 
+// Gets the minimum information from images such as its size and format. Much
+// faster than using imfinfo, which slows down a lot since. Note than without
+// this, we need to read the image once for imfinfo to set defaults (which is
+// done in Octave language), and then again for the actual reading.
+DEFUN_DLD (__magick_ping__, args, ,
+  "-*- texinfo -*-\n\
+@deftypefn {Loadable Function} {} __magick_ping__ (@var{fname}, @var{idx})\n\
+Ping image information with GraphicsMagick or ImageMagick.\n\
+\n\
+This is a private internal function not intended for direct use.\n\
+\n\
+@seealso{imfinfo}\n\
+@end deftypefn")
+{
+  octave_value retval;
+#ifndef HAVE_MAGICK
+  gripe_disabled_feature ("imfinfo", "Image IO");
+#else
+  maybe_initialize_magick ();
+
+  if (args.length () < 1 || ! args(0).is_string ())
+    {
+      print_usage ();
+      return retval;
+    }
+  const std::string filename = args(0).string_value ();
+  int idx;
+  if (args.length () > 1)
+    idx = args(1).int_value () -1;
+  else
+    idx = 0;
+
+  Magick::Image img;
+  img.subImage (idx);
+  img.subRange (1);
+  img.ping (filename);
+  static const char *fields[] = {"rows", "columns", "format", 0};
+  octave_scalar_map ping = octave_scalar_map (string_vector (fields));
+  ping.setfield ("rows",    octave_value (img.rows ()));
+  ping.setfield ("columns", octave_value (img.columns ()));
+  ping.setfield ("format",  octave_value (img.magick ()));
+  retval = octave_value (ping);
+#endif
+  return retval;
+}
+
 #ifdef HAVE_MAGICK
 static octave_value
 magick_to_octave_value (const Magick::CompressionType& magick)
 {
   switch (magick)
     {
       case Magick::NoCompression:
         return octave_value ("none");
diff --git a/scripts/image/imformats.m b/scripts/image/imformats.m
--- a/scripts/image/imformats.m
+++ b/scripts/image/imformats.m
@@ -272,17 +272,17 @@ function match = find_ext_idx (formats, 
   ##      Should this function prevent the addition of
   ##      duplicated extensions?
   match = cellfun (@(x) any (strcmp (x, ext)), {formats.ext});
 endfunction
 
 function bool = isa_magick (coder, filename)
   bool = false;
   try
-    info = __imfinfo__ (filename);
+    info = __magick_ping__ (filename, 1);
     bool = strcmp (coder, info.Format);
   end_try_catch
 endfunction
 
 
 ## changing the function to read
 %!testif HAVE_MAGICK
 %! fmt = imformats ("jpg");
diff --git a/scripts/image/private/__imread__.m b/scripts/image/private/__imread__.m
--- a/scripts/image/private/__imread__.m
+++ b/scripts/image/private/__imread__.m
@@ -87,20 +87,20 @@ function varargout = __imread__ (filenam
     if (! (is_valid_index_option (options.index)) &&
         ! (ischar (options.index) && strcmpi (options.index, "all")))
       error ("imread: value for %s must be a vector or the string `all'");
     endif
   endif
 
   try
     ## Use information from the first image to be read to set defaults.
-    info = imfinfo (fn)(options.index(1));
+    info = __magick_ping__ (fn, options.index(1));
 
     ## Set default for options.
-    options.region = {1:1:info.Height 1:1:info.Width};
+    options.region = {1:1:info.rows 1:1:info.columns};
 
     for idx = offset:2:(numel (varargin) - offset + 1)
       switch (tolower (varargin{idx}))
 
         case "pixelregion",
           options.region = varargin{idx+1};
           if (! iscell (options.region) || numel (options.region) != 2)
             error ("imread: value for %s must be a 2 element cell array",
@@ -115,19 +115,19 @@ function varargout = __imread__ (filenam
             else
               error ("imread: range for %s must be a 2 or 3 element vector",
                      varargin{idx});
             endif
             options.region{reg_idx} = floor (options.region{reg_idx}(1)): ...
                                       floor (options.region{reg_idx}(2)): ...
                                       floor (options.region{reg_idx}(3));
           endfor
-          if (options.region{1}(end) > info.Height)
+          if (options.region{1}(end) > info.rows)
             error ("imread: end ROWS for PixelRegions option is larger than image height");
-          elseif (options.region{2}(end) > info.Width)
+          elseif (options.region{2}(end) > info.columns)
             error ("imread: end COLS for PixelRegions option is larger than image width");
           endif
 
         case "info",
           ## We ignore this option. This parameter exists in Matlab to
           ## speed up the reading of multipage TIFF by passing a structure
           ## that contains information about the start on the file of each
           ## page.  We can't control it through GraphicsMagic but at least
