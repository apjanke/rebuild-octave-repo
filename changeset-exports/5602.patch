# HG changeset patch
# User jwe
# Date 1138679021 0
#      Tue Jan 31 03:43:41 2006 +0000
# Node ID dfa2da0563e5e93dd6539ccdda8e56331c3c5af3
# Parent  c8ed37d879232dd5d57a1be60e09521e178f7d20
[project @ 2006-01-31 03:43:40 by jwe]

diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,15 @@
+2006-01-30  John W. Eaton  <jwe@octave.org>
+
+	* so-array.h (streamoff_array::nnz): New funtion.
+	* boolNDArray.h (boolNDArray::nnz): New function.
+	* MArrayN.h (MArrayN<T>::nnz): New function.
+	* MArray.h (MArray<T>::nnz): New function.
+
 2006-01-04  David Bateman  <dbateman@free.fr>
 
 	* Spars-op-defs.h (SPARSE_SPARSE_MUL): Previous change resulted in
 	elements not being sorted in return matrix. Sort them, and make
 	solver select between two algorithms to further improve the 
 	performance.
 	* dSparse.cc: include oct-sort.h.
 	* CSparse.cc: ditto.
diff --git a/liboctave/MArray.h b/liboctave/MArray.h
--- a/liboctave/MArray.h
+++ b/liboctave/MArray.h
@@ -58,16 +58,34 @@ public:
   ~MArray (void) { }
 
   MArray<T>& operator = (const MArray<T>& a)
     {
       Array<T>::operator = (a);
       return *this;
     }
 
+  octave_idx_type nnz (void) const
+    {
+      octave_idx_type retval = 0;
+
+      const T *d = this->data ();
+
+      octave_idx_type nel = this->numel ();
+
+      for (octave_idx_type i = 0; i < nel; i++)
+	{
+	  if (d[i] != T ())
+	    retval++;
+	}
+
+      return retval;
+    }
+
+
   // Currently, the OPS functions don't need to be friends, but that
   // may change.
 
   // MARRAY_OPS_FRIEND_DECLS (MArray)
 };
 
 #endif
 
diff --git a/liboctave/MArrayN.h b/liboctave/MArrayN.h
--- a/liboctave/MArrayN.h
+++ b/liboctave/MArrayN.h
@@ -65,16 +65,33 @@ public:
   ~MArrayN (void) { }
 
   MArrayN<T>& operator = (const MArrayN<T>& a)
     {
       ArrayN<T>::operator = (a);
       return *this;
     }
 
+  octave_idx_type nnz (void) const
+    {
+      octave_idx_type retval = 0;
+
+      const T *d = this->data ();
+
+      octave_idx_type nel = this->numel ();
+
+      for (octave_idx_type i = 0; i < nel; i++)
+	{
+	  if (d[i] != T ())
+	    retval++;
+	}
+
+      return retval;
+    }
+
   MArrayN<T> reshape (const dim_vector& new_dims) const
     { return ArrayN<T>::reshape (new_dims); }
 
   MArrayN<T> permute (const Array<int>& vec, bool inv = false) const
     { return ArrayN<T>::permute (vec, inv); }
 
   MArrayN<T> ipermute (const Array<int>& vec) const
     { return ArrayN<T>::ipermute (vec); }
diff --git a/liboctave/boolNDArray.h b/liboctave/boolNDArray.h
--- a/liboctave/boolNDArray.h
+++ b/liboctave/boolNDArray.h
@@ -88,16 +88,33 @@ public:
   // friend std::ostream& operator << (std::ostream& os, const NDArray& a);
   // friend std::istream& operator >> (std::istream& is, NDArray& a);
 
   static bool resize_fill_value (void) { return false; }
 
   //  bool all_elements_are_real (void) const;
   //  bool all_integers (double& max_val, double& min_val) const;
 
+  octave_idx_type nnz (void) const
+    {
+      octave_idx_type retval = 0;
+
+      const bool *d = this->data ();
+
+      octave_idx_type nel = this->numel ();
+
+      for (octave_idx_type i = 0; i < nel; i++)
+	{
+	  if (d[i])
+	    retval++;
+	}
+
+      return retval;
+    }
+
 private:
 
   boolNDArray (bool *d, dim_vector& dv) : ArrayN<bool> (d, dv) { }
 };
 
 NDND_BOOL_OP_DECLS (boolNDArray, boolNDArray)
 NDND_CMP_OP_DECLS (boolNDArray, boolNDArray)
 
diff --git a/liboctave/so-array.h b/liboctave/so-array.h
--- a/liboctave/so-array.h
+++ b/liboctave/so-array.h
@@ -57,16 +57,33 @@ public:
 	ArrayN<std::streamoff>::operator = (sa);
 
       return *this;
     }
 
   streamoff_array squeeze (void) const
     { return ArrayN<std::streamoff>::squeeze (); }
 
+  octave_idx_type nnz (void) const
+    {
+      octave_idx_type retval = 0;
+
+      const std::streamoff *d = this->data ();
+
+      octave_idx_type nel = this->numel ();
+
+      for (octave_idx_type i = 0; i < nel; i++)
+	{
+	  if (d[i])
+	    retval++;
+	}
+
+      return retval;
+    }
+
   boolNDArray all (int dim = -1) const;
   boolNDArray any (int dim = -1) const;
 
   static octave_idx_type compute_index (Array<int>& ra_idx,
 			    const dim_vector& dimensions);
 
   static std::streamoff resize_fill_value (void) { return 0; }
 };
diff --git a/src/Cell.cc b/src/Cell.cc
--- a/src/Cell.cc
+++ b/src/Cell.cc
@@ -24,16 +24,17 @@ 02110-1301, USA.
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
 #include "idx-vector.h"
 
 #include "Cell.h"
 #include "error.h"
+#include "gripes.h"
 
 Cell::Cell (const string_vector& sv)
   : ArrayN<octave_value> ()
 {
   octave_idx_type n = sv.length ();
 
   if (n > 0)
     {
@@ -109,16 +110,23 @@ Cell::assign (const octave_value_list& i
   for (octave_idx_type i = 0; i < idx_arg.length (); i++)
     set_index (idx_arg(i).index_vector ());
 
   ::assign (*this, rhs, fill_val);
 
   return *this;
 }
 
+octave_idx_type
+Cell::nnz (void) const
+{
+  gripe_wrong_type_arg ("nnz", "cell array");
+  return -1;
+}
+
 Cell
 Cell::column (octave_idx_type i) const
 {
   Cell retval;
 
   if (ndims () < 3)
     {
       if (i < 0 || i >= cols ())
diff --git a/src/Cell.h b/src/Cell.h
--- a/src/Cell.h
+++ b/src/Cell.h
@@ -85,16 +85,18 @@ public:
     { return Cell (ArrayN<octave_value>::index (ra_idx, resize_ok, rfv)); }
 
   Cell& assign (const octave_value_list& idx, const Cell& rhs,
 		const octave_value& fill_val = octave_value ());
 
   Cell reshape (const dim_vector& new_dims) const
     { return ArrayN<octave_value>::reshape (new_dims); }
 
+  octave_idx_type nnz (void) const;
+
   Cell column (octave_idx_type i) const;
 
   // XXX FIXME XXX
   boolMatrix all (int /* dim */ = 0) const { return boolMatrix (); }
 
   // XXX FIXME XXX
   boolMatrix any (int /* dim */ = 0) const { return boolMatrix (); }
 
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,27 @@
+2006-01-30  John W. Eaton  <jwe@octave.org>
+
+	* gripes.cc (gripe_wrong_type_arg (const char*, const char*, bool)):
+	New function.
+	(gripe_wrong_type_arg (const char*, const std::string&, bool)):
+	Define using const char*, const char*, bool version.
+	(gripe_wrong_type_arg (const char*, const octave_value&, bool)):
+	Define using const char*, const std::string&, bool version.
+
+	* ov.h (octave_value::nnz): New function.
+	* ov-base.cc (octave_base_value::nnz): New function.
+	* ov-base.h: Provide decl.
+	* ov-base-mat.h (octave_base_matrix<MT>::nnz): New function.
+	* ov-base-scalar.h (octave_base_scalar<MT>::nnz): New function.
+	* Cell.cc (Cell::nnz): New function.
+	* Cell.h: Provide decl.
+	* data.cc (Fnnz): New function.	
+	* DLD-FUNCTIONS/sparse.cc (Fnnz): Delete.
+
 2006-01-13  John W. Eaton  <jwe@octave.org>
 
 	* ov-struct.cc (octave_struct::print_raw): Correctly print scalar
 	structs and empty struct arrays.
 
 	* DLD-FUNCTIONS/__gnuplot_raw__.l (Fclearplot): For compatibility,
 	also turn off hold state for current figure.
 
diff --git a/src/DLD-FUNCTIONS/sparse.cc b/src/DLD-FUNCTIONS/sparse.cc
--- a/src/DLD-FUNCTIONS/sparse.cc
+++ b/src/DLD-FUNCTIONS/sparse.cc
@@ -399,84 +399,16 @@ DEFUN_DLD (full, args, ,
   else if (args(0).is_complex_type())
     retval = args(0).complex_matrix_value();
   else
     gripe_wrong_type_arg ("full", args(0));
 
   return retval;
 }
 
-DEFUN_DLD (nnz, args, ,
-   "-*- texinfo -*-\n\
-@deftypefn {Loadable Function} {@var{scalar} =} nnz (@var{SM})\n\
-returns number of non zero elements in SM\n\
-@seealso{sparse}\n\
-@end deftypefn")
-{
-  octave_value retval;
-
-  if (args.length() < 1) 
-    {
-      print_usage ("nnz");
-      return retval;
-    }
-
-  if (args(0).class_name () == "sparse") 
-    {
-      // XXX FIXME XXX should nonzero be a method of octave_base_value so that the
-      // below can be replaced with "retval = (double) (args(0).nonzero ());"
-      const octave_value& rep = args(0).get_rep ();
-
-      if (args(0).type_name () == "sparse matrix")
-	retval = (double) ((const octave_sparse_matrix&) rep) .nonzero ();
-      else if (args(0).type_name () == "sparse complex matrix")
-	retval = (double) ((const octave_sparse_complex_matrix&) rep) .nonzero ();
-      else if (args(0).type_name () == "sparse bool matrix")
-	retval = (double) ((const octave_sparse_bool_matrix&) rep) .nonzero ();
-    } 
-  else if (args(0).type_name () == "complex matrix") 
-    {
-      const ComplexMatrix M = args(0).complex_matrix_value();
-      octave_idx_type nnz = 0;
-      for( octave_idx_type j = 0; j < M.cols(); j++)
-	for( octave_idx_type i = 0; i < M.rows(); i++)
-	  if (M (i, j) != 0.) 
-	    nnz++;
-      retval = (double) nnz;
-    } 
-  else if (args(0).type_name () == "matrix") 
-    {
-      const Matrix M = args(0).matrix_value();
-      octave_idx_type nnz = 0;
-      for( octave_idx_type j = 0; j < M.cols(); j++)
-	for( octave_idx_type i = 0; i < M.rows(); i++)
-	  if (M (i, j) != 0.) 
-	    nnz++;
-      retval = (double) nnz;
-    } 
-  else if (args(0).type_name () == "string") 
-    {
-      const charMatrix M = args(0).char_matrix_value();
-      octave_idx_type nnz = 0;
-      for( octave_idx_type j = 0; j < M.cols(); j++)
-	for( octave_idx_type i = 0; i < M.rows(); i++)
-	  if (M (i, j) != 0) 
-	    nnz++;
-      retval = (double) nnz;
-    } 
-  else if (args(0).type_name () == "scalar") 
-      retval = args(0).scalar_value() != 0.0 ? 1.0 : 0.0;
-  else if (args(0).type_name () == "complex scalar")
-    retval = args(0).complex_value() != 0.0 ? 1.0 : 0.0;
-  else
-     gripe_wrong_type_arg ("nnz", args(0));
-
-  return retval;
-}
-
 DEFUN_DLD (nzmax, args, ,
    "-*- texinfo -*-\n\
 @deftypefn {Loadable Function} {@var{scalar} =} nzmax (@var{SM})\n\
 Return the amount of storage allocated to the sparse matrix @var{SM}.\n\
 Note that Octave tends to crop unused memory at the first oppurtunity\n\
 for sparse objects. There are some cases of user created sparse objects\n\
 where the value returned by @dfn{nzmaz} will not be the same as @dfn{nnz},\n\
 but in general they will give the same result.\n\
diff --git a/src/data.cc b/src/data.cc
--- a/src/data.cc
+++ b/src/data.cc
@@ -1072,16 +1072,33 @@ returns the number of columns in the giv
 	}
     }
   else
     print_usage ("size");
 
   return retval;
 }
 
+DEFUN (nnz, args, ,
+   "-*- texinfo -*-\n\
+@deftypefn {Loadable Function} {@var{scalar} =} nnz (@var{a})\n\
+returns number of non zero elements in @var{a}.\n\
+@seealso{sparse}\n\
+@end deftypefn")
+{
+  octave_value retval;
+
+  if (args.length () == 1)
+    retval = args(0).nnz ();
+  else
+    print_usage ("nnz");
+
+  return retval;
+}
+
 DEFUN (sum, args, ,
   "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} sum (@var{x}, @var{dim})\n\
 Sum of elements along dimension @var{dim}.  If @var{dim} is\n\
 omitted, it defaults to 1 (column-wise sum).\n\
 \n\
 As a special case, if @var{x} is a vector and @var{dim} is omitted,\n\
 return the sum of the elements.\n\
diff --git a/src/gripes.cc b/src/gripes.cc
--- a/src/gripes.cc
+++ b/src/gripes.cc
@@ -119,34 +119,37 @@ gripe_unrecognized_data_fmt (const char 
 
 void
 gripe_data_conversion (const char *from, const char *to)
 {
   error ("unable to convert from %s to %s format", from, to);
 }
 
 void
-gripe_wrong_type_arg (const char *name, const std::string& s, bool is_error)
+gripe_wrong_type_arg (const char *name, const char *s, bool is_error)
 {
   if (is_error)
-    error ("%s: wrong type argument `%s'", name, s.c_str ());
+    error ("%s: wrong type argument `%s'", name, s);
   else
-    warning ("%s: wrong type argument `%s'", name, s.c_str ());
+    warning ("%s: wrong type argument `%s'", name, s);
+}
+
+void
+gripe_wrong_type_arg (const char *name, const std::string& s, bool is_error)
+{
+  gripe_wrong_type_arg (name, s.c_str (), is_error);
 }
 
 void
 gripe_wrong_type_arg (const char *name, const octave_value& tc,
 		      bool is_error)
 {
   std::string type = tc.type_name ();
 
-  if (is_error)
-    error ("%s: wrong type argument `%s'", name, type.c_str ());
-  else
-    warning ("%s: wrong type argument `%s'", name, type.c_str ());
+  gripe_wrong_type_arg (name, type, is_error);
 }
 
 void
 gripe_wrong_type_arg_for_unary_op (const octave_value& op)
 {
   std::string type = op.type_name ();
   error ("invalid operand `%s' for unary operator", type.c_str ());
 }
diff --git a/src/gripes.h b/src/gripes.h
--- a/src/gripes.h
+++ b/src/gripes.h
@@ -71,16 +71,20 @@ gripe_unrecognized_float_fmt (void);
 
 extern void
 gripe_unrecognized_data_fmt (const char *warn_for);
 
 extern void
 gripe_data_conversion (const char *from, const char *to);
 
 extern void
+gripe_wrong_type_arg (const char *name, const char *s,
+		      bool is_error = true);
+
+extern void
 gripe_wrong_type_arg (const char *name, const std::string& s,
 		      bool is_error = true);
 
 extern void
 gripe_wrong_type_arg (const char *name, const octave_value& tc,
 		      bool is_error = true);
 
 extern void
diff --git a/src/ov-base-mat.h b/src/ov-base-mat.h
--- a/src/ov-base-mat.h
+++ b/src/ov-base-mat.h
@@ -89,16 +89,18 @@ public:
 
   octave_value do_index_op (const octave_value_list& idx)
     { return do_index_op (idx, 0); }
 
   void assign (const octave_value_list& idx, const MT& rhs);
 
   dim_vector dims (void) const { return matrix.dims (); }
 
+  octave_idx_type nnz (void) const { return matrix.nnz (); }
+
   octave_value reshape (const dim_vector& new_dims) const
     { return MT (matrix.reshape (new_dims)); }
 
   octave_value permute (const Array<int>& vec, bool inv = false) const
     { return MT (matrix.permute (vec, inv)); }
 
   octave_value resize (const dim_vector& dv) const
     { MT retval (matrix); retval.resize (dv); return retval; }
diff --git a/src/ov-base-scalar.h b/src/ov-base-scalar.h
--- a/src/ov-base-scalar.h
+++ b/src/ov-base-scalar.h
@@ -76,16 +76,18 @@ public:
 			 const octave_value& rhs);
 
   bool is_constant (void) const { return true; }
 
   bool is_defined (void) const { return true; }
 
   dim_vector dims (void) const { static dim_vector dv (1, 1); return dv; }
 
+  octave_idx_type nnz (void) const { return (scalar != ST ()) ? 1 : 0; }
+
   octave_value permute (const Array<int>&, bool = false) const
     { return scalar; }
 
   size_t byte_size (void) const { return sizeof (ST); }
 
   octave_value all (int = 0) const { return (scalar != ST ()); }
 
   octave_value any (int = 0) const { return (scalar != ST ()); }
diff --git a/src/ov-base.cc b/src/ov-base.cc
--- a/src/ov-base.cc
+++ b/src/ov-base.cc
@@ -168,16 +168,23 @@ octave_base_value::subsasgn (const std::
       octave_value tmp = octave_value::empty_conv (type, rhs);
 
       retval = tmp.subsasgn (type, idx, rhs);
     }
 
   return retval;
 }
 
+octave_idx_type
+octave_base_value::nnz (void) const
+{
+  gripe_wrong_type_arg ("octave_base_value::nnz ()", type_name ());
+  return -1;
+}
+
 octave_value
 octave_base_value::reshape (const dim_vector&) const
 {
   gripe_wrong_type_arg ("octave_base_value::reshape ()", type_name ());
   return octave_value ();
 }
 
 octave_value
diff --git a/src/ov-base.h b/src/ov-base.h
--- a/src/ov-base.h
+++ b/src/ov-base.h
@@ -94,16 +94,18 @@ public:
   dim_vector dims (void) const { return dim_vector (-1, -1); }
 
   octave_idx_type numel (void) const { return dims ().numel (); }
 
   octave_idx_type capacity (void) const { return numel (); }
 
   size_t byte_size (void) const { return 0; }
 
+  octave_idx_type nnz (void) const;
+
   octave_value reshape (const dim_vector&) const;
 
   octave_value permute (const Array<int>& vec, bool = false) const;
 
   octave_value resize (const dim_vector&) const;
 
   bool is_defined (void) const { return false; }
 
diff --git a/src/ov.h b/src/ov.h
--- a/src/ov.h
+++ b/src/ov.h
@@ -371,16 +371,18 @@ public:
     { return rep->numel (); }
 
   virtual octave_idx_type capacity (void) const
     { return rep->capacity (); }
 
   virtual size_t byte_size (void) const
     { return rep->byte_size (); }
 
+  virtual octave_idx_type nnz (void) const { return rep->nnz (); }
+
   virtual octave_value reshape (const dim_vector& dv) const
     { return rep->reshape (dv); }
 
   virtual octave_value permute (const Array<int>& vec, bool inv = false) const
     { return rep->permute (vec, inv); }
 
   octave_value ipermute (const Array<int>& vec) const
     { return rep->permute (vec, true); }
