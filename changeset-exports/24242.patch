# HG changeset patch
# User Julien Bect <jbect@users.sourceforge.net>
# Date 1500723823 -7200
#      Sat Jul 22 13:43:43 2017 +0200
# Node ID 545657c20e6025d6fa4e56d7d1014692262d9a95
# Parent  ca25f6e48ca5d5f49d62997b0e27a3c6ca34e6ff
jit: jit-typeinfo.cc: Do not use assignment with llvm::Twine objects

* libinterp/corefcn/jit-typeinfo.cc: Do not use assignment with llvm::Twine
  objects.  Such assignments were allowed in LLVM 3.4 but have been disallowed
  since LLVM 3.5.

diff --git a/libinterp/parse-tree/jit-typeinfo.cc b/libinterp/parse-tree/jit-typeinfo.cc
--- a/libinterp/parse-tree/jit-typeinfo.cc
+++ b/libinterp/parse-tree/jit-typeinfo.cc
@@ -1171,19 +1171,19 @@ namespace octave
       {
         octave_value::unary_op op = static_cast<octave_value::unary_op> (i);
         std::string op_name = octave_value::unary_op_as_string (op);
         unary_ops[i].stash_name ("unary" + op_name);
       }
 
     for (int op = 0; op < octave_value::num_binary_ops; ++op)
       {
-        llvm::Twine fn_name ("octave_jit_binary_any_any_");
-        fn_name = fn_name + llvm::Twine (op);
-
+        const llvm::Twine &fn_name =
+          "octave_jit_binary_any_any_" + llvm::Twine (op);
+ 
         fn = create_internal (fn_name, any, any, any);
         fn.mark_can_error ();
         llvm::BasicBlock *block = fn.new_block ();
         builder.SetInsertPoint (block);
         llvm::APInt op_int(sizeof (octave_value::binary_op) * 8, op,
                            std::numeric_limits<octave_value::binary_op>::is_signed);
         llvm::Value *op_as_llvm = llvm::ConstantInt::get (llvm_bo_type, op_int);
         llvm::Value *ret = any_binary.call (builder, op_as_llvm,
