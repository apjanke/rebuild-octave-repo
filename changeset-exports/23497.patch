# HG changeset patch
# User Torsten <mttl@mailbox.org>
# Date 1494910525 -7200
#      Tue May 16 06:55:25 2017 +0200
# Node ID f45402b9dcc435f1f64fb733c0802ac4c7abf2e1
# Parent  427c55a82f35b0f0f6fdc3dddbc55a545a242134
parse error messages clickable in gui console for opening the file (bug #35619)

* Filter.cpp (UrlFilter::HotSpot::urlType): return new kind ParseErrorLink
  when found hotspot matches the related regular expression;
  (UrlFilter::HotSpot::activate): get file and line number from the error
  message and called related function for opening the file;
  add constants with the regular expression for the parse error;
  (UrlFilter::HotSpot::actions): add the open action for the parse error file;
  (UrlFilter::request_open_file): emit the suitable signal for opening the file

* Filter.h: new signal for opening a file given by absolute path,
  new kind of url hotspot, new regular expressions for the filter

* QUnixTerminalImpl.cpp (initialize): connect the two signal for editing
  function files and files with given absolute path to the related slots

* main-window.cc (open_file): add new parameter for the line and emit
  the related signal depending on the existence of parameter line

* main-window.h: open_file with new parameter line (default -1)

diff --git a/libgui/qterminal/libqterminal/unix/Filter.cpp b/libgui/qterminal/libqterminal/unix/Filter.cpp
--- a/libgui/qterminal/libqterminal/unix/Filter.cpp
+++ b/libgui/qterminal/libqterminal/unix/Filter.cpp
@@ -497,16 +497,18 @@ UrlFilter::HotSpot::UrlType UrlFilter::H
     QString url = capturedTexts().first();
 
     if ( FullUrlRegExp.exactMatch(url) )
         return StandardUrl;
     else if ( EmailAddressRegExp.exactMatch(url) )
         return Email;
     else if ( ErrorLinkRegExp.exactMatch(url) )
         return ErrorLink;
+    else if ( ParseErrorLinkRegExp.exactMatch(url) )
+        return ParseErrorLink;
     else
         return Unknown;
 }
 
 void UrlFilter::HotSpot::activate(QObject* object)
 {
     QString url = capturedTexts().first();
 
@@ -518,49 +520,58 @@ void UrlFilter::HotSpot::activate(QObjec
     {
         //kDebug() << "Copying url to clipboard:" << url;
 
         QApplication::clipboard()->setText(url);
         return;
     }
 
     if ( !object || actionName == "open-action" )
-    {
+      {
         if ( kind == StandardUrl )
-        {
+          {
             // if the URL path does not include the protocol ( eg. "www.kde.org" ) then
             // prepend http:// ( eg. "www.kde.org" --> "http://www.kde.org" )
             if (!url.contains("://"))
-            {
-                url.prepend("http://");
-            }
-        }
+              url.prepend("http://");
+            QDesktopServices::openUrl (QUrl (url));
+          }
         else if ( kind == Email )
-        {
+          {
             url.prepend("mailto:");
-        }
-
-        if (kind == ErrorLink)
+            QDesktopServices::openUrl (QUrl (url));
+          }
+        else if (kind == ErrorLink)
           {
             int pos = ErrorLinkRegExp.indexIn (url);
             if (pos > -1)
               {
                 QString file_name = ErrorLinkRegExp.cap (1);
                 QString line = ErrorLinkRegExp.cap (2);
-
                 // call the urlobject's method for opening a file; this
                 // method then signals to the filter
                 _urlObject->request_open_file (file_name, line.toInt ());
               }
           }
-        else
+        else if (kind == ParseErrorLink)
           {
-            QDesktopServices::openUrl (QUrl (url));
+            int pos = ParseErrorLinkRegExp.indexIn (url);
+            if (pos > -1)
+              {
+                QString line = ParseErrorLinkRegExp.cap (1);
+                QString file_name = ParseErrorLinkRegExp.cap (2);
+                // call the urlobject's method for opening a file; this
+                // method then signals to the filter
+                _urlObject->request_open_file (file_name, line.toInt ());
+              }
           }
-    }
+
+
+      }
+
 }
 
 // Note:  Altering these regular expressions can have a major effect on the performance of the filters
 // used for finding URLs in the text, especially if they are very general and could match very long
 // pieces of text.
 // Please be careful when altering them.
 
 //regexp matches:
@@ -568,24 +579,31 @@ void UrlFilter::HotSpot::activate(QObjec
 // protocolname:// or www. followed by anything other than whitespaces, <, >, ' or ", and ends before whitespaces, <, >, ', ", ], !, comma and dot
 const QRegExp UrlFilter::FullUrlRegExp("(www\\.(?!\\.)|[a-z][a-z0-9+.-]*://)[^\\s<>'\"]+[^!,\\.\\s<>'\"\\]]");
 // email address:
 // [word chars, dots or dashes]@[word chars, dots or dashes].[word chars]
 const QRegExp UrlFilter::EmailAddressRegExp("\\b(\\w|\\.|-)+@(\\w|\\.|-)+\\.\\w+\\b");
 // matches full url or email address
 const QRegExp UrlFilter::CompleteUrlRegExp('('+FullUrlRegExp.pattern()+'|'+
                                             EmailAddressRegExp.pattern()+')');
-// error link
-const QRegExp UrlFilter::ErrorLinkRegExp("(\\S+) at line (\\d+) column (?:\\d+)");
+// error link:
+//   normal error
+const QRegExp UrlFilter::ErrorLinkRegExp ("(\\S+) at line (\\d+) column (?:\\d+)");
+//   parse error
+const QRegExp UrlFilter::ParseErrorLinkRegExp ("parse error near line (\\d+) of file (\\S+)");
+//   complete regexp
+const QRegExp UrlFilter::CompleteErrorLinkRegExp ('('+ErrorLinkRegExp.pattern ()+'|'+
+                                                     ParseErrorLinkRegExp.pattern ()+')');
+
 
 UrlFilter::UrlFilter (Type t)
     : RegExpFilter (t)
 {
     if (_type == ErrorLink)
-      setRegExp (ErrorLinkRegExp);
+      setRegExp (CompleteErrorLinkRegExp);
     else
       setRegExp (CompleteUrlRegExp);
 }
 UrlFilter::HotSpot::~HotSpot()
 {
     delete _urlObject;
 }
 void FilterObject::activated()
@@ -596,17 +614,19 @@ QList<QAction*> UrlFilter::HotSpot::acti
 {
     QList<QAction*> list;
 
     const UrlType kind = urlType();
 
     QAction* openAction = new QAction(_urlObject);
     QAction* copyAction = new QAction(_urlObject);;
 
-    Q_ASSERT (kind == StandardUrl || kind == Email || kind == ErrorLink);
+    Q_ASSERT (kind == StandardUrl || kind == Email
+                                  || kind == ErrorLink
+                                  || kind == ParseErrorLink);
 
     if ( kind == StandardUrl )
     {
         openAction->setText(tr ("Open Link"));
         copyAction->setText(tr ("Copy Link Address"));
     }
     else if ( kind == Email )
     {
@@ -620,34 +640,55 @@ QList<QAction*> UrlFilter::HotSpot::acti
       if (pos >= 0)
         {
           QString file_name = ErrorLinkRegExp.cap (1);
           QString line = ErrorLinkRegExp.cap (2);
           openAction->setText(tr ("Edit %1 at line %2")
                               .arg (file_name).arg (line));
         }
     }
+    else if ( kind == ParseErrorLink )
+    {
+      QString url = capturedTexts().first();
+      int pos = ParseErrorLinkRegExp.indexIn (url);
+      if (pos >= 0)
+        {
+          QString line = ParseErrorLinkRegExp.cap (1);
+          QString file_name = ParseErrorLinkRegExp.cap (2);
+          openAction->setText(tr ("Edit %1 at line %2")
+                              .arg (file_name).arg (line));
+        }
+    }
 
     // object names are set here so that the hotspot performs the
     // correct action when activated() is called with the triggered
     // action passed as a parameter.
     openAction->setObjectName("open-action");
     copyAction->setObjectName("copy-action");
 
     QObject::connect( openAction , SIGNAL(triggered()) , _urlObject , SLOT(activated()) );
     list << openAction;
 
-    if (kind != ErrorLink)
+    if (kind != ErrorLink && kind != ParseErrorLink)
       {
         QObject::connect ( copyAction , SIGNAL(triggered()) ,
                            _urlObject , SLOT(activated()) );
         list << copyAction;
       }
     return list;
 }
 
 void
 UrlFilter::request_open_file (const QString& file, int line)
 {
-  emit request_open_file_signal (file, line);
+  QFileInfo file_info = QFileInfo (file);
+
+  // We have to distinguish between a parse error, where we get the full
+  // path of the file or a general error in a script, where we only get
+  // the function name. depending on this we have to invoke different
+  // slots in main_window
+  if (file_info.isAbsolute () && file_info.exists ())
+    emit request_open_file_signal (file, line);
+  else
+    emit request_edit_mfile_signal (file, line);
 }
 
 //#include "moc_Filter.cpp"
diff --git a/libgui/qterminal/libqterminal/unix/Filter.h b/libgui/qterminal/libqterminal/unix/Filter.h
--- a/libgui/qterminal/libqterminal/unix/Filter.h
+++ b/libgui/qterminal/libqterminal/unix/Filter.h
@@ -239,16 +239,17 @@ public:
      *
      * If regexp matches the empty string, then process() will return immediately
      * without finding results.
      */
     virtual void process();
 
 signals:
 
+    void request_edit_mfile_signal (const QString&, int);
     void request_open_file_signal (const QString&, int);
 
 protected:
     /**
      * Called when a match for the regular expression is encountered.  Subclasses should reimplement this
      * to return custom hotspot types
      */
     virtual RegExpFilter::HotSpot* newHotSpot(int startLine,int startColumn,
@@ -290,16 +291,17 @@ public:
         FilterObject* get_urlObject () { return _urlObject; }
 
     private:
         enum UrlType
         {
             StandardUrl,
             Email,
             ErrorLink,
+            ParseErrorLink,
             Unknown
         };
         UrlType urlType() const;
 
         FilterObject* _urlObject;
     };
 
     UrlFilter (Type t = Link);
@@ -312,16 +314,18 @@ public slots:
 protected:
     virtual HotSpot* newHotSpot(int,int,int,int,Type);
 
 private:
 
     static const QRegExp FullUrlRegExp;
     static const QRegExp EmailAddressRegExp;
     static const QRegExp ErrorLinkRegExp;
+    static const QRegExp ParseErrorLinkRegExp;
+    static const QRegExp CompleteErrorLinkRegExp;
 
     // combined OR of FullUrlRegExp and EmailAddressRegExp
     static const QRegExp CompleteUrlRegExp;
 };
 
 class FilterObject : public QObject
 {
 Q_OBJECT
diff --git a/libgui/qterminal/libqterminal/unix/QUnixTerminalImpl.cpp b/libgui/qterminal/libqterminal/unix/QUnixTerminalImpl.cpp
--- a/libgui/qterminal/libqterminal/unix/QUnixTerminalImpl.cpp
+++ b/libgui/qterminal/libqterminal/unix/QUnixTerminalImpl.cpp
@@ -46,18 +46,20 @@ void QUnixTerminalImpl::initialize()
     m_terminalView->setScrollBarPosition(TerminalView::ScrollBarRight);
 
     UrlFilter *url_filter = new UrlFilter();
     m_terminalView->filterChain ()->addFilter (url_filter);
 
     UrlFilter *file_filter = new UrlFilter (Filter::Type::ErrorLink);
     m_terminalView->filterChain ()->addFilter (file_filter);
 
+    connect (file_filter, SIGNAL (request_edit_mfile_signal (const QString&, int)),
+             _parent, SLOT (edit_mfile (const QString&, int)));
     connect (file_filter, SIGNAL (request_open_file_signal (const QString&, int)),
-             _parent, SLOT (edit_mfile (const QString&, int)));
+             _parent, SLOT (open_file (const QString&, int)));
 
     connect(m_terminalView, SIGNAL(customContextMenuRequested(QPoint)),
             this, SLOT(handleCustomContextMenuRequested(QPoint)));
 
     connect (m_terminalView, SIGNAL (interrupt_signal (void)),
              this, SLOT (terminal_interrupt ()));
 
 #ifdef Q_OS_MAC
diff --git a/libgui/src/main-window.cc b/libgui/src/main-window.cc
--- a/libgui/src/main-window.cc
+++ b/libgui/src/main-window.cc
@@ -308,19 +308,22 @@ main_window::focus_command_window (void)
 
 void
 main_window::new_file (const QString& commands)
 {
   emit new_file_signal (commands);
 }
 
 void
-main_window::open_file (const QString& file_name)
+main_window::open_file (const QString& file_name, int line)
 {
-  emit open_file_signal (file_name);
+  if (line < 0)
+    emit open_file_signal (file_name);
+  else
+    emit open_file_signal (file_name, QString (), line);
 }
 
 void
 main_window::edit_mfile (const QString& name, int line)
 {
   handle_edit_mfile_request (name, QString (), QString (), line);
 }
 
diff --git a/libgui/src/main-window.h b/libgui/src/main-window.h
--- a/libgui/src/main-window.h
+++ b/libgui/src/main-window.h
@@ -151,17 +151,17 @@ public slots:
   void handle_load_workspace_request (const QString& file = QString ());
   void handle_clear_command_window_request (void);
   void handle_clear_workspace_request (void);
   void handle_clear_history_request (void);
   void handle_rename_variable_request (const QString& old_name,
                                        const QString& new_name);
   void handle_undo_request (void);
   void new_file (const QString& commands = QString ());
-  void open_file (const QString& file_name = QString ());
+  void open_file (const QString& file_name = QString (), int line = -1);
   void edit_mfile (const QString&, int);
   void open_online_documentation_page (void);
   void display_release_notes (void);
   void load_and_display_community_news (int serial = -1);
   void display_community_news (const QString& news);
   void open_bug_tracker_page (void);
   void open_octave_packages_page (void);
   void open_contribute_page (void);
