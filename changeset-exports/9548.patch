# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1250690071 -7200
#      Wed Aug 19 15:54:31 2009 +0200
# Node ID e5f7aee2ab8c11da4809b0c28311e4149cc7a915
# Parent  588c6bb6fdcbc02a1f56fb95ab0b904e89cfe2f1
optimize &=, |= operators

diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,14 @@
+2009-08-19  Jaroslav Hajek  <highegg@gmail.com>
+
+	* MArrayN.cc (operator+=, operator-=): Test matching dimensions first.
+	* boolNDArray.cc (mx_el_and_assign, mx_el_or_assign): New functions.
+	* boolNDArray.h: Declare them.
+
 2009-08-19  Jaroslav Hajek  <highegg@gmail.com>
 
 	* Array.cc (Array<T>::clear): New method.
 	* Array.h: Declare it.
 	* MArray-decl.h (MARRAY_OP_ASSIGN_DECLS1, MARRAY_OP_ASSIGN_FWD_DECLS1,
 	MARRAY_OP_ASSIGN_FRIENDS1, MARRAY_OP_ASSIGN_FWD_DEFS1): New macros.
 	(MARRAY_OPS_FORWARD_DECLS, MARRAY_OPS_FRIEND_DECLS): Use them.
 	* MArray-defs.h (MARRAY_OP_ASSIGN_DEFS1): New macro.
diff --git a/liboctave/MArrayN.cc b/liboctave/MArrayN.cc
--- a/liboctave/MArrayN.cc
+++ b/liboctave/MArrayN.cc
@@ -77,50 +77,53 @@ operator /= (MArrayN<T>& a, const T& s)
 // Element by element MArrayN by MArrayN ops.
 
 template <class T>
 MArrayN<T>&
 operator += (MArrayN<T>& a, const MArrayN<T>& b)
 {
   if (a.is_shared ())
     return a = a + b;
-  octave_idx_type l = a.length ();
+
+  dim_vector a_dims = a.dims ();
+  dim_vector b_dims = b.dims ();
 
-  if (l > 0)
+  if (a_dims != b_dims)
+    gripe_nonconformant ("operator +=", a_dims, b_dims);
+  else 
     {
-      dim_vector a_dims = a.dims ();
-      dim_vector b_dims = b.dims ();
+      octave_idx_type l = a.length ();
 
-      if (a_dims != b_dims)
-	gripe_nonconformant ("operator +=", a_dims, b_dims);
-      else
-	DO_VV_OP2 (T, a, +=, b);
+      if (l > 0)
+        DO_VV_OP2 (T, a, +=, b);
     }
 
   return a;
 }
 
 template <class T>
 MArrayN<T>&
 operator -= (MArrayN<T>& a, const MArrayN<T>& b)
 {
   if (a.is_shared ())
     return a = a - b;
-  octave_idx_type l = a.length ();
+
+  dim_vector a_dims = a.dims ();
+  dim_vector b_dims = b.dims ();
 
-  if (l > 0)
+  if (a_dims != b_dims)
+    gripe_nonconformant ("operator -=", a_dims, b_dims);
+  else 
     {
-      dim_vector a_dims = a.dims ();
-      dim_vector b_dims = b.dims ();
+      octave_idx_type l = a.length ();
 
-      if (a_dims != b_dims)
-	gripe_nonconformant ("operator -=", a_dims, b_dims);
-      else
-	DO_VV_OP2 (T, a, -=, b);
+      if (l > 0)
+        DO_VV_OP2 (T, a, -=, b);
     }
+
   return a;
 }
 
 // Element by element MArrayN by scalar ops.
 
 #define MARRAYN_NDS_OP(OP) \
   template <class T> \
   MArrayN<T> \
diff --git a/liboctave/boolNDArray.cc b/liboctave/boolNDArray.cc
--- a/liboctave/boolNDArray.cc
+++ b/liboctave/boolNDArray.cc
@@ -26,16 +26,17 @@ along with Octave; see the file COPYING.
 #include <config.h>
 #endif
 
 #include "Array-util.h"
 #include "CNDArray.h"
 #include "mx-base.h"
 #include "lo-ieee.h"
 #include "mx-op-defs.h"
+#include "MArray-defs.h"
 
 // unary operations
 
 boolNDArray
 boolNDArray::operator ! (void) const
 {
   boolNDArray b (dims ());
 
@@ -149,13 +150,57 @@ NDND_BOOL_OPS (boolNDArray, boolNDArray,
 NDND_CMP_OPS (boolNDArray, , boolNDArray, )
 
 NDS_BOOL_OPS (boolNDArray, bool, false)
 NDS_CMP_OPS (boolNDArray, , bool, )
 
 SND_BOOL_OPS (bool, boolNDArray, false)
 SND_CMP_OPS (bool, , boolNDArray, )
 
+boolNDArray& 
+mx_el_and_assign (boolNDArray& a, const boolNDArray& b)
+{
+  if (a.is_shared ())
+    return a = mx_el_and (a, b);
+
+  dim_vector a_dims = a.dims ();
+  dim_vector b_dims = b.dims ();
+
+  if (a_dims != b_dims)
+    gripe_nonconformant ("operator &=", a_dims, b_dims);
+  else
+    {
+      octave_idx_type l = a.length ();
+
+      if (l > 0)
+        DO_VV_OP2 (bool, a, &=, b);
+    }
+
+  return a;
+}
+
+boolNDArray& 
+mx_el_or_assign (boolNDArray& a, const boolNDArray& b)
+{
+  if (a.is_shared ())
+    return a = mx_el_and (a, b);
+
+  dim_vector a_dims = a.dims ();
+  dim_vector b_dims = b.dims ();
+
+  if (a_dims != b_dims)
+    gripe_nonconformant ("operator |=", a_dims, b_dims);
+  else
+    {
+      octave_idx_type l = a.length ();
+
+      if (l > 0)
+        DO_VV_OP2 (bool, a, |=, b);
+    }
+
+  return a;
+}
+
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
diff --git a/liboctave/boolNDArray.h b/liboctave/boolNDArray.h
--- a/liboctave/boolNDArray.h
+++ b/liboctave/boolNDArray.h
@@ -123,15 +123,20 @@ NDND_BOOL_OP_DECLS (boolNDArray, boolNDA
 NDND_CMP_OP_DECLS (boolNDArray, boolNDArray, OCTAVE_API)
 
 NDS_BOOL_OP_DECLS (boolNDArray, bool, OCTAVE_API)
 NDS_CMP_OP_DECLS (boolNDArray, bool, OCTAVE_API)
 
 SND_BOOL_OP_DECLS (bool, boolNDArray, OCTAVE_API)
 SND_CMP_OP_DECLS (bool, boolNDArray, OCTAVE_API)
 
+extern OCTAVE_API boolNDArray& 
+mx_el_and_assign (boolNDArray& m, const boolNDArray& a);
+extern OCTAVE_API boolNDArray& 
+mx_el_or_assign (boolNDArray& m, const boolNDArray& a);
+
 #endif
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,13 @@
+2009-08-17  Jaroslav Hajek  <highegg@gmail.com>
+
+	* ops.h (DEFNDASSIGNOP_FNOP): New macro.
+	* OPERATORS/op-bm-bm.cc: Define and install &= and |= operators.
+
 2009-08-17  Jaroslav Hajek  <highegg@gmail.com>
 
 	* OPERATORS/op-m-m.cc: Define and install += and -= operators.
 	* OPERATORS/op-fm-fm.cc: Ditto.
 	* OPERATORS/op-cm-cm.cc: Ditto.
 	* OPERATORS/op-fcm-fcm.cc: Ditto.
 	* OPERATORS/op-m-s.cc: Define and install +=,-=,*=,/= operators.
 	* OPERATORS/op-fm-fs.cc: Ditto.
diff --git a/src/OPERATORS/op-bm-bm.cc b/src/OPERATORS/op-bm-bm.cc
--- a/src/OPERATORS/op-bm-bm.cc
+++ b/src/OPERATORS/op-bm-bm.cc
@@ -93,16 +93,18 @@ DEFNDBINOP_FN (el_or_not,  bool_matrix, 
 
 DEFNDCATOP_FN (bm_bm, bool_matrix, bool_matrix, bool_array, bool_array, concat)
 DEFNDCATOP_FN (bm_m, bool_matrix, matrix, array, array, concat)
 DEFNDCATOP_FN (m_bm, matrix, bool_matrix, array, array, concat)
 DEFNDCATOP_FN (bm_fm, bool_matrix, float_matrix, float_array, float_array, concat)
 DEFNDCATOP_FN (fm_bm, float_matrix, bool_matrix, float_array, float_array, concat)
 
 DEFNDASSIGNOP_FN (assign, bool_matrix, bool_matrix, bool_array, assign)
+DEFNDASSIGNOP_FNOP (assign_and, bool_matrix, bool_matrix, bool_array, mx_el_and_assign)
+DEFNDASSIGNOP_FNOP (assign_or, bool_matrix, bool_matrix, bool_array, mx_el_or_assign)
 
 DEFNULLASSIGNOP_FN (null_assign, bool_matrix, delete_elements)
 
 static octave_value
 oct_assignop_conv_and_assign (octave_base_value& a1,
 			      const octave_value_list& idx,
 			      const octave_base_value& a2)
 {
@@ -168,15 +170,18 @@ install_bm_bm_ops (void)
   INSTALL_ASSIGNOP (op_asn_eq, octave_bool_matrix, octave_uint8_matrix, conv_and_assign);
   INSTALL_ASSIGNOP (op_asn_eq, octave_bool_matrix, octave_uint16_matrix, conv_and_assign);
   INSTALL_ASSIGNOP (op_asn_eq, octave_bool_matrix, octave_uint32_matrix, conv_and_assign);
   INSTALL_ASSIGNOP (op_asn_eq, octave_bool_matrix, octave_uint64_matrix, conv_and_assign);
 
   INSTALL_ASSIGNOP (op_asn_eq, octave_bool_matrix, octave_null_matrix, null_assign);
   INSTALL_ASSIGNOP (op_asn_eq, octave_bool_matrix, octave_null_str, null_assign);
   INSTALL_ASSIGNOP (op_asn_eq, octave_bool_matrix, octave_null_sq_str, null_assign);
+
+  INSTALL_ASSIGNOP (op_el_and_eq, octave_bool_matrix, octave_bool_matrix, assign_and);
+  INSTALL_ASSIGNOP (op_el_or_eq, octave_bool_matrix, octave_bool_matrix, assign_or);
 }
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
diff --git a/src/ops.h b/src/ops.h
--- a/src/ops.h
+++ b/src/ops.h
@@ -196,28 +196,39 @@ extern void install_ops (void);
   ASSIGNOPDECL (name) \
   { \
     CAST_BINOP_ARGS (CONCAT2(octave_, t1)&, const CONCAT2(octave_, t2)&); \
  \
     v1.f (idx, v2.CONCAT2(e, _value) ()); \
     return octave_value (); \
   }
 
-// FIXME: the following currently doesn't handle index.
+// FIXME: the following currently don't handle index.
 #define DEFNDASSIGNOP_OP(name, t1, t2, f, op) \
   ASSIGNOPDECL (name) \
   { \
     CAST_BINOP_ARGS (CONCAT2(octave_, t1)&, const CONCAT2(octave_, t2)&); \
  \
     assert (idx.empty ()); \
     v1.matrix_ref () op v2.CONCAT2(f, _value) (); \
  \
     return octave_value (); \
   }
 
+#define DEFNDASSIGNOP_FNOP(name, t1, t2, f, fnop) \
+  ASSIGNOPDECL (name) \
+  { \
+    CAST_BINOP_ARGS (CONCAT2(octave_, t1)&, const CONCAT2(octave_, t2)&); \
+ \
+    assert (idx.empty ()); \
+    fnop (v1.matrix_ref (), v2.CONCAT2(f, _value) ()); \
+ \
+    return octave_value (); \
+  }
+
 #define DEFASSIGNANYOP_FN(name, t1, f) \
   ASSIGNANYOPDECL (name) \
   { \
     CONCAT2(octave_, t1)& v1 = dynamic_cast<CONCAT2(octave_, t1)&> (a1); \
  \
     v1.f (idx, a2); \
     return octave_value (); \
   }
