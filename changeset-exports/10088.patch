# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1263311425 -3600
#      Tue Jan 12 16:50:25 2010 +0100
# Node ID 5edee330d4cb9140936bc06946c469f01ef208d1
# Parent  090173f2db40896bccd925c70799ae07743a225d
better argument checking and handling in set functions

diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,8 +1,18 @@
+2010-01-12  Jaroslav Hajek  <highegg@gmail.com>, Ben Barrowes  <benjamin.e.barrowes@usace.army.mil>
+
+	* set/private/validargs.m: New function.
+	* set/module.mk: Add it here.
+	* set/ismember.m: Use it here.
+	* set/intersect.m: Ditto.
+	* set/union.m: Ditto.
+	* set/setdiff.m: Ditto.
+	* set/setxor.m: Ditto.
+
 2010-01-11  Rik <octave@nomad.inbox5.com>
 
 	* Makefile.am: Update DOCSTRINGS rules to avoid simple_move_if_change_rule
 	and allow Make to update timestamps.
 
 2010-01-11  Jaroslav Hajek  <highegg@gmail.com>
 
 	* plot/private/__scatter__.m: Use patch objects instead of lines,
@@ -20,16 +30,20 @@ 2010-01-10  Jaroslav Hajek  <highegg@gma
 
 	* plot/private/__scatter__.m: Use alternative strategy for larger
 	point sets.
 
 2010-01-06  Ben Abbott <bpabbott@mac.com>
 
 	* /optimization/qp.m: Add missing semicolon.
 
+2010-01-11  Ben Barrowes  <benjamin.e.barrowes@usace.army.mil>
+
+	* set/: allow set scripts to handle cell inputs
+
 2010-01-05  Jaroslav Hajek  <highegg@gmail.com>
 
 	* optimization/qp.m: Supply default values on request and register
 	options.
 
 2010-01-05  John W. Eaton  <jwe@octave.org>
 
 	* qp.m: Allow linear term and constraint arguments to be
diff --git a/scripts/set/intersect.m b/scripts/set/intersect.m
--- a/scripts/set/intersect.m
+++ b/scripts/set/intersect.m
@@ -19,33 +19,31 @@
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} intersect (@var{a}, @var{b})
 ## @deftypefnx {Function File} {[@var{c}, @var{ia}, @var{ib}] =} intersect (@var{a}, @var{b})
 ##
 ## Return the elements in both @var{a} and @var{b}, sorted in ascending
 ## order.  If @var{a} and @var{b} are both column vectors return a column
 ## vector, otherwise return a row vector.
+## @var{a}, @var{b} may be cell arrays of string(s).
 ##
 ## Return index vectors @var{ia} and @var{ib} such that @code{a(ia)==c} and
 ## @code{b(ib)==c}.
 ##
 ## @end deftypefn
 ## @seealso{unique, union, setxor, setdiff, ismember}
 
 function [c, ia, ib] = intersect (a, b, varargin)
 
   if (nargin < 2 || nargin > 3)
     print_usage ();
   endif
 
-  if (nargin == 3 && ! strcmpi (varargin{1}, "rows"))
-    error ("intersect: if a third input argument is present, it must be the string 'rows'");
-  endif
-
+  [a, b] = validargs ("intersect", a, b, varargin{:});
 
   if (isempty (a) || isempty (b))
     c = ia = ib = [];
   else
     ## form a and b into sets
     if (nargout > 1)
       [a, ja] = unique (a, varargin{:});
       [b, jb] = unique (b, varargin{:});
@@ -65,23 +63,21 @@ function [c, ia, ib] = intersect (a, b, 
       if (iscellstr (c))
 	ii = find (strcmp (c(1:end-1), c(2:end)));
       else
 	ii = find (c(1:end-1) == c(2:end));
       endif
       c = c(ii);
     endif
 
-
     if (nargout > 1)
       ia = ja(ic(ii));                  ## a(ia) == c
       ib = jb(ic(ii+1) - length (a));   ## b(ib) == c
     endif
 
-
     if (nargin == 2 && (size (b, 1) == 1 || size (a, 1) == 1))
       c = c.';
     endif
   endif
 
 endfunction
 
 
diff --git a/scripts/set/ismember.m b/scripts/set/ismember.m
--- a/scripts/set/ismember.m
+++ b/scripts/set/ismember.m
@@ -66,35 +66,25 @@
 ## @end deftypefn
 
 ## Author: Paul Kienzle <pkienzle@users.sf.net>
 ## Author: SÃ¸ren Hauberg <hauberg@gmail.com>
 ## Author: Ben Abbott <bpabbott@mac.com>
 ## Adapted-by: jwe
 ## Reimplemented using lookup & unique: Jaroslav Hajek <highegg@gmail.com>
 
-function [tf, a_idx] = ismember (a, s, rows_opt) 
+function [tf, a_idx] = ismember (a, s, varargin) 
+
+  if (nargin < 2 || nargin > 3)
+    print_usage ();
+  endif
+
+  [a, s] = validargs ("ismember", a, s, varargin{:});
 
   if (nargin == 2)
-    ica = iscellstr (a);
-    ics = iscellstr (s);
-    if (ica || ics)
-      if (ica && ischar (s))
-        s = cellstr (s);
-      elseif (ics && ischar (a))
-        a = cellstr (a);
-      elseif (! (ica && ics))
-        error ("ismember: invalid argument types");
-      endif
-    elseif (! isa (a, class (s))) 
-      error ("ismember: both input arguments must be the same type");
-    elseif (! ischar (a) && ! isnumeric (a))
-      error ("ismember: input arguments must be arrays, cell arrays, or strings"); 
-    endif
-
     s = s(:);
     ## We do it this way, because we expect the array to be often sorted.
     if (issorted (s))
       is = [];
     else
       [s, is] = sort (s);
     endif
 
@@ -108,44 +98,34 @@ function [tf, a_idx] = ismember (a, s, r
       tf = logical (a_idx);
       if (! isempty (is))
         a_idx(tf) = is (a_idx(tf));
       endif
     else
       tf = lookup (s, a, "b");
     endif
 
-  elseif (nargin == 3 && strcmpi (rows_opt, "rows"))
-    if (iscell (a) || iscell (s))
-      error ("ismember: cells not supported with ""rows""");
-    elseif (! isa (a, class (s))) 
-      error ("ismember: both input arguments must be the same type");
-    elseif (! ischar (a) && ! isnumeric (a))
-      error ("ismember: input arguments must be arrays, cell arrays, or strings"); 
-    endif
+  else
+
     if (isempty (a) || isempty (s))
       tf = false (rows (a), 1);
       a_idx = zeros (rows (a), 1);
-    elseif (columns (a) != columns (s))
-      error ("ismember: number of columns must match");
     else
 
       ## FIXME: lookup does not support "rows", so we just use unique.
       [xx, ii, jj] = unique ([a; s], "rows", "last");
       na = rows (a);
       jj = ii(jj(1:na));
       tf = jj > na;
 
       if (nargout > 1)
         a_idx = max (0, jj - na);
       endif
 
     endif
-  else
-    print_usage ();
   endif
 
 endfunction
 
 %!assert (ismember ({''}, {'abc', 'def'}), false);
 %!assert (ismember ('abc', {'abc', 'def'}), true);
 %!assert (isempty (ismember ([], [1, 2])), true);
 %!assert (isempty (ismember ({}, {'a', 'b'})), true);
diff --git a/scripts/set/module.mk b/scripts/set/module.mk
--- a/scripts/set/module.mk
+++ b/scripts/set/module.mk
@@ -2,15 +2,16 @@ FCN_FILE_DIRS += set
 
 set_FCN_FILES = \
   set/intersect.m \
   set/ismember.m \
   set/powerset.m \
   set/setdiff.m \
   set/setxor.m \
   set/union.m \
-  set/unique.m
+  set/unique.m \
+  set/private/validargs.m
 
 FCN_FILES += $(set_FCN_FILES)
 
 PKG_ADD_FILES += set/PKG_ADD
 
 DIRSTAMP_FILES += set/$(octave_dirstamp)
diff --git a/scripts/set/private/validargs.m b/scripts/set/private/validargs.m
new file mode 100644
--- /dev/null
+++ b/scripts/set/private/validargs.m
@@ -0,0 +1,57 @@
+## Copyright (C) 2000, 2005, 2006, 2007, 2008, 2009 Paul Kienzle
+## Copyright (C) 2009, 2010 Jaroslav Hajek
+##
+## This file is part of Octave.
+##
+## Octave is free software; you can redistribute it and/or modify it
+## under the terms of the GNU General Public License as published by
+## the Free Software Foundation; either version 3 of the License, or (at
+## your option) any later version.
+##
+## Octave is distributed in the hope that it will be useful, but
+## WITHOUT ANY WARRANTY; without even the implied warranty of
+## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+## General Public License for more details.
+##
+## You should have received a copy of the GNU General Public License
+## along with Octave; see the file COPYING.  If not, see
+## <http://www.gnu.org/licenses/>.
+
+## Validate arguments for binary set operation.
+function [x, y] = validargs (caller, x, y, byrows_arg)
+
+  if (nargin == 3)
+    icx = iscellstr (x);
+    icy = iscellstr (y);
+    if (icx || icy)
+      if (icx && ischar (y))
+        y = cellstr (y);
+      elseif (icy && ischar (x))
+        x = cellstr (x);
+      elseif (! (icx && icy))
+        error ("%s: cell array of strings cannot be combined with a nonstring value", caller);
+      endif
+    elseif (! (ismatrix (x) && ismatrix (y)))
+      error ("%s: input arguments must be arrays or cell arrays of strings", caller); 
+    endif
+  elseif (nargin == 4)
+    if (strcmpi (byrows_arg, "rows"))
+      if (iscell (x) || iscell (y))
+        error ("%s: cells not supported with ""rows""");
+      elseif (! (ismatrix (x) && ismatrix (y)))
+        error ("%s: input arguments must be arrays or cell arrays of strings", caller); 
+      else
+        if (ndims (x) > 2 || ndims (y) > 2)
+          error ("%s: need 2-dimensional matrices for ""rows""", caller);
+        elseif (columns (x) != columns (y) && ! (isempty (x) || isempty (y)))
+          error ("%s: number of columns must match", caller);
+        endif
+      endif
+    else
+      error ("%s: invalid option: %s", caller, byrows_arg);
+    endif
+  else
+    print_usage (caller);
+  endif
+
+endfunction
diff --git a/scripts/set/setdiff.m b/scripts/set/setdiff.m
--- a/scripts/set/setdiff.m
+++ b/scripts/set/setdiff.m
@@ -19,46 +19,37 @@
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} setdiff (@var{a}, @var{b})
 ## @deftypefnx {Function File} {} setdiff (@var{a}, @var{b}, "rows")
 ## @deftypefnx {Function File} {[@var{c}, @var{i}] =} setdiff (@var{a}, @var{b})
 ## Return the elements in @var{a} that are not in @var{b}, sorted in
 ## ascending order.  If @var{a} and @var{b} are both column vectors
 ## return a column vector, otherwise return a row vector.
+## @var{a}, @var{b} may be cell arrays of string(s).
 ##
 ## Given the optional third argument @samp{"rows"}, return the rows in
 ## @var{a} that are not in @var{b}, sorted in ascending order by rows.
 ##
 ## If requested, return @var{i} such that @code{c = a(i)}.
 ## @seealso{unique, union, intersect, setxor, ismember}
 ## @end deftypefn
 
 ## Author: Paul Kienzle
 ## Adapted-by: jwe
 
-function [c, i] = setdiff (a, b, byrows_arg)
+function [c, i] = setdiff (a, b, varargin)
 
   if (nargin < 2 || nargin > 3)
     print_usage ();
   endif
 
-  byrows = false;
+  [a, b] = validargs ("setdiff", a, b, varargin{:});
 
-  if (nargin == 3)
-    if (! strcmpi (byrows_arg, "rows"))
-      error ("expecting third argument to be \"rows\"");
-    elseif (iscell (a) || iscell (b))
-      warning ("setdiff: \"rows\" not valid for cell arrays");
-    else
-      byrows = true;
-    endif
-  endif
-
-  if (byrows)
+  if (nargin > 2)
     if (nargout > 1)
       [c, i] = unique (a, "rows");
     else
       c = unique (a, "rows");
     endif
     if (! isempty (c) && ! isempty (b))
       ## Form a and b into combined set.
       b = unique (b, "rows");
diff --git a/scripts/set/setxor.m b/scripts/set/setxor.m
--- a/scripts/set/setxor.m
+++ b/scripts/set/setxor.m
@@ -19,34 +19,33 @@
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} setxor (@var{a}, @var{b})
 ## @deftypefnx {Function File} {} setxor (@var{a}, @var{b}, 'rows')
 ##
 ## Return the elements exclusive to @var{a} or @var{b}, sorted in ascending
 ## order.  If @var{a} and @var{b} are both column vectors return a column
 ## vector, otherwise return a row vector.
+## @var{a}, @var{b} may be cell arrays of string(s).
 ##
 ## @deftypefnx {Function File} {[@var{c}, @var{ia}, @var{ib}] =} setxor (@var{a}, @var{b})
 ##
 ## Return index vectors @var{ia} and @var{ib} such that @code{a(ia)} and @code{b(ib)} are
 ## disjoint sets whose union is @var{c}.
 ## 
 ## @seealso{unique, union, intersect, setdiff, ismember}
 ## @end deftypefn
 
 function [c, ia, ib] = setxor (a, b, varargin)
 
   if (nargin < 2 || nargin > 3)
     print_usage ();
   endif
 
-  if (nargin == 3 && ! strcmpi (varargin{1}, "rows"))
-    error ("setxor: if a third input argument is present, it must be the string 'rows'");
-  endif
+  [a, b] = validargs ("setxor", a, b, varargin{:});
 
   ## Form A and B into sets.
   if (nargout > 1)
     [a, ia] = unique (a, varargin{:});
     [b, ib] = unique (b, varargin{:});
   else
     a = unique (a, varargin{:});
     b = unique (b, varargin{:});
diff --git a/scripts/set/union.m b/scripts/set/union.m
--- a/scripts/set/union.m
+++ b/scripts/set/union.m
@@ -17,17 +17,18 @@
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} union (@var{a}, @var{b})
 ## @deftypefnx{Function File} {} union (@var{a}, @var{b}, "rows")
 ## Return the set of elements that are in either of the sets @var{a} and
-## @var{b}.  For example,
+## @var{b}. @var{a}, @var{b} may be cell arrays of string(s).
+## For example,
 ##
 ## @example
 ## @group
 ## union ([1, 2, 4], [2, 3, 5])
 ##      @result{} [1, 2, 3, 4, 5]
 ## @end group
 ## @end example
 ##
@@ -54,31 +55,27 @@
 ## Author: jwe
 
 function [y, ia, ib] = union (a, b, varargin)
 
   if (nargin < 2 || nargin > 3)
     print_usage ();
   endif
 
-  if (nargin == 3 && ! strcmpi (varargin{1}, "rows"))
-    error ("union: if a third input argument is present, it must be the string 'rows'");
-  endif
+  [a, b] = validargs ("union", a, b, varargin{:});
 
   if (nargin == 2)
     y = [a(:); b(:)];
     na = numel (a); nb = numel (b);
     if (size (a, 1) == 1 || size (b, 1) == 1)
       y = y.';
     endif
-  elseif (ndims (a) == 2 && ndims (b) == 2 && columns (a) == columns (b))
+  else
     y = [a; b];
     na = rows (a); nb = rows (b);
-  else
-    error ("union: input arguments must contain the same number of columns when \"rows\" is specified");
   endif
 
   if (nargout == 1)
     y = unique (y, varargin{:});
   else
     [y, i] = unique (y, varargin{:});
     ia = i(i <= na);
     ib = i(i > na) - na;
diff --git a/scripts/set/unique.m b/scripts/set/unique.m
--- a/scripts/set/unique.m
+++ b/scripts/set/unique.m
@@ -21,16 +21,17 @@
 ## @deftypefn {Function File} {} unique (@var{x})
 ## @deftypefnx {Function File} {} unique (@var{x}, "rows")
 ## @deftypefnx {Function File} {} unique (@dots{}, "first")
 ## @deftypefnx {Function File} {} unique (@dots{}, "last")
 ## @deftypefnx {Function File} {[@var{y}, @var{i}, @var{j}] =} unique (@dots{})
 ## Return the unique elements of @var{x}, sorted in ascending order.
 ## If @var{x} is a row vector, return a row vector, but if @var{x}
 ## is a column vector or a matrix return a column vector.
+## @var{x} can be a cell array of strings.
 ##
 ## If the optional argument @code{"rows"} is supplied, return the unique
 ## rows of @var{x}, sorted in ascending order.
 ##
 ## If requested, return index vectors @var{i} and @var{j} such that
 ## @code{x(i)==y} and @code{y(j)==x}.
 ##
 ## Additionally, one of @code{"first"} or @code{"last"} may be given as
