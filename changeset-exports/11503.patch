# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1294907249 18000
#      Thu Jan 13 03:27:29 2011 -0500
# Node ID b3f511c48b14dba0a99e3d6b548d0534ce9505e8
# Parent  4638800cd660d2e19b2e767d620197b35fccabc1
idx-vector.h, idx-vector.cc: data member initialization and constructor fixes

diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,20 @@
+2011-01-13  John W. Eaton  <jwe@octave.org>
+
+	* idx-vector.h (idx_vector_rep::idx_vector_rep,
+	idx_vector::idx_mask_rep::idx_mask_rep):
+	Initialize all data members in initialization lists.
+
+	* idx-vector.cc (idx_vector::idx_scalar_rep::idx_scalar_rep):
+	Initialize data in member initialization list.
+	(class idx_base_rep, class idx_colon_rep, class idx_range_rep,
+	class idx_scalar_rep, class idx_vector_rep, class idx_mask_rep):
+	Don't allow assignment.
+
 2011-01-13  John W. Eaton  <jwe@octave.org>
 
 	* DAE.h (DAE::~DAE): Now virtual.
 	* DAERT.h (DAERT::~DAERT): Likewise.
 	* ODE.h (ODE::~ODE): Likewise.
 	* DAEFunc.h (DAEFunc::~DAEFunc): Likewise.
 	* DAERTFunc.h (DAEFunc::~DAEFunc): Likewise.
 	* ODEFunc.h (ODE::~ODE): Likewise.
diff --git a/liboctave/idx-vector.cc b/liboctave/idx-vector.cc
--- a/liboctave/idx-vector.cc
+++ b/liboctave/idx-vector.cc
@@ -259,16 +259,17 @@ convert_index (octave_int<T> x, bool& co
 
   return convert_index (i, conv_error, ext);
 }
 
 DEFINE_OCTAVE_ALLOCATOR(idx_vector::idx_scalar_rep);
 
 template <class T>
 idx_vector::idx_scalar_rep::idx_scalar_rep (T x)
+  : data (0)
 {
   octave_idx_type dummy = 0;
 
   data = convert_index (x, err, dummy);
 
   if (err)
     gripe_invalid_index ();
 }
@@ -335,17 +336,17 @@ idx_vector::idx_vector_rep::idx_vector_r
         gripe_invalid_index ();
     }
 }
 
 // Note that this makes a shallow copy of the index array.
 
 idx_vector::idx_vector_rep::idx_vector_rep (const Array<octave_idx_type>& inda)
   : data (inda.data ()), len (inda.numel ()), ext (0), 
-  aowner (new Array<octave_idx_type> (inda)), orig_dims (inda.dims ())
+    aowner (new Array<octave_idx_type> (inda)), orig_dims (inda.dims ())
 {
   if (len != 0)
     {
       octave_idx_type max = -1;
       for (octave_idx_type i = 0; i < len; i++)
         {
           octave_idx_type k = inda.xelem (i);
           if (k < 0) 
diff --git a/liboctave/idx-vector.h b/liboctave/idx-vector.h
--- a/liboctave/idx-vector.h
+++ b/liboctave/idx-vector.h
@@ -106,16 +106,17 @@ private:
     int count;
 
     bool err;
 
   private:
 
     // No copying!
     idx_base_rep (const idx_base_rep&);
+    idx_base_rep& operator = (const idx_base_rep&);
   };
 
   // The magic colon index.
   class OCTAVE_API idx_colon_rep : public idx_base_rep
   {
   public:
     idx_colon_rep (void) { }
 
@@ -141,16 +142,17 @@ private:
     std::ostream& print (std::ostream& os) const;
 
   private:
 
     DECLARE_OCTAVE_ALLOCATOR
 
     // No copying!
     idx_colon_rep (const idx_colon_rep& idx);
+    idx_colon_rep& operator = (const idx_colon_rep& idx);
   };
 
   // To distinguish the "direct" constructors that blindly trust the data.
   enum direct { DIRECT };
 
   // The integer range index.
   class OCTAVE_API idx_range_rep : public idx_base_rep
   {
@@ -201,16 +203,17 @@ private:
     Array<octave_idx_type> as_array (void);
 
   private:
 
     DECLARE_OCTAVE_ALLOCATOR
 
     // No copying!
     idx_range_rep (const idx_range_rep& idx);
+    idx_range_rep& operator = (const idx_range_rep& idx);
 
     octave_idx_type start, len, step;
 
   };
 
   // The integer scalar index.
   class OCTAVE_API idx_scalar_rep : public idx_base_rep
   {
@@ -257,32 +260,33 @@ private:
     Array<octave_idx_type> as_array (void);
 
   private:
 
     DECLARE_OCTAVE_ALLOCATOR
 
     // No copying!
     idx_scalar_rep (const idx_scalar_rep& idx);
+    idx_scalar_rep& operator = (const idx_scalar_rep& idx);
 
     octave_idx_type data;
 
   };
 
   // The integer vector index.
   class OCTAVE_API idx_vector_rep : public idx_base_rep
   {
   public:
     // Direct constructor.
     idx_vector_rep (octave_idx_type *_data, octave_idx_type _len, 
                     octave_idx_type _ext, const dim_vector& od, direct)
       : data (_data), len (_len), ext (_ext), aowner (0), orig_dims (od) { }
 
     idx_vector_rep (void) 
-      : data (0), len (0), aowner (0)
+      : data (0), len (0), ext (0), aowner (0), orig_dims ()
       { }
 
     // Zero-based constructor.
     idx_vector_rep (const Array<octave_idx_type>& inda);
 
     idx_vector_rep (const Array<octave_idx_type>& inda,
                     octave_idx_type _ext, direct);
 
@@ -323,19 +327,21 @@ private:
     Array<octave_idx_type> as_array (void);
     
   private:
 
     DECLARE_OCTAVE_ALLOCATOR
 
     // No copying!
     idx_vector_rep (const idx_vector_rep& idx);
+    idx_vector_rep& operator = (const idx_vector_rep& idx);
 
     const octave_idx_type *data;
-    octave_idx_type len, ext;
+    octave_idx_type len;
+    octave_idx_type ext;
 
     // This is a trick to allow user-given zero-based arrays to be used
     // as indices without copying.  If the following pointer is nonzero,
     // we do not own the data, but rather have an Array<octave_idx_type>
     // object that provides us the data.  Note that we need a pointer
     // because we deferred the Array<T> declaration and we do not want
     // it yet to be defined.
     
@@ -346,20 +352,22 @@ private:
 
   // The logical mask index.
   class OCTAVE_API idx_mask_rep : public idx_base_rep
   {
   public:
     // Direct constructor.
     idx_mask_rep (bool *_data, octave_idx_type _len, 
                   octave_idx_type _ext, const dim_vector& od, direct)
-      : data (_data), len (_len), ext (_ext), aowner (0), orig_dims (od) { }
+      : data (_data), len (_len), ext (_ext), lsti (-1), lste (-1),
+        aowner (0), orig_dims (od) { }
 
     idx_mask_rep (void) 
-      : data (0), len (0), aowner (0)
+      : data (0), len (0), ext (0), lsti (-1), lste (-1), aowner (0),
+        orig_dims ()
       { }
 
     idx_mask_rep (bool);
 
     idx_mask_rep (const Array<bool>&, octave_idx_type = -1);
 
     ~idx_mask_rep (void);
 
@@ -393,23 +401,26 @@ private:
     Array<octave_idx_type> as_array (void);
     
   private:
 
     DECLARE_OCTAVE_ALLOCATOR
 
     // No copying!
     idx_mask_rep (const idx_mask_rep& idx);
+    idx_mask_rep& operator = (const idx_mask_rep& idx);
 
     const bool *data;
-    octave_idx_type len, ext;
+    octave_idx_type len;
+    octave_idx_type ext;
 
     // FIXME: I'm not sure if this is a good design. Maybe it would be
     // better to employ some sort of generalized iteration scheme.
-    mutable octave_idx_type lsti, lste;
+    mutable octave_idx_type lsti;
+    mutable octave_idx_type lste;
 
     // This is a trick to allow user-given mask arrays to be used as
     // indices without copying.  If the following pointer is nonzero, we
     // do not own the data, but rather have an Array<bool> object that
     // provides us the data.  Note that we need a pointer because we
     // deferred the Array<T> declaration and we do not want it yet to be
     // defined.
     
