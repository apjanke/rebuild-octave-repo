# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1251893900 -7200
#      Wed Sep 02 14:18:20 2009 +0200
# Node ID 8bea4e89326f4f59e8630f8432538c3f26eb839f
# Parent  dba091e1ee39b5feb4e6fd9f3d7c665fb1b89a29
implement FLOAT_STORE to allow safer complex comparisons on x87

diff --git a/ChangeLog b/ChangeLog
--- a/ChangeLog
+++ b/ChangeLog
@@ -1,8 +1,12 @@
+2009-09-02  Jaroslav Hajek  <highegg@gmail.com>
+
+	* configure.in (FLOAT_STORE): New config macro.
+
 2009-09-02  Jaroslav Hajek  <highegg@gmail.com>
 
 	* acx_blas_f77_func.m4 (ACX_BLAS_F77_FUNC): Check for correct INTEGER
 	size.
 
 2009-09-01  John W. Eaton  <jwe@octave.org>
 
 	* aclocal.m4 (OCTAVE_REQUIRE_64_BIT_FORTRAN_INTEGERS): New macro.
diff --git a/configure.in b/configure.in
--- a/configure.in
+++ b/configure.in
@@ -284,16 +284,33 @@ OCTAVE_HAVE_FRAMEWORK(Carbon, [#include 
   [have_framework_carbon="yes"], [have_framework_carbon="no"])
 if test $have_framework_carbon = "yes"; then
   AC_DEFINE(HAVE_FRAMEWORK_CARBON, 1, [Define if framework CARBON is available.])
   CARBON_LIBS="-Wl,-framework -Wl,Carbon"
   AC_MSG_NOTICE([adding -Wl,-framework -Wl,Carbon to CARBON_LIBS])
   AC_SUBST(CARBON_LIBS)
 fi
 
+### When compiling math for x87, problems may arise in some code comparing
+### floating-point intermediate results.
+### Generally, it helps to store the result in a local volatile variable,
+### but it also degrades performance.
+### Thus, we provide a FLOAT_TRUNCATE macro that may be defined to "volatile"
+### when compiling for x87 target, or left empty for modern SSE math, that
+### doesn't suffer from this problem at all.
+AC_ARG_ENABLE(float-truncate,
+  [AS_HELP_STRING([--enable-float-truncate],
+     [enables truncating intermediate FP results.])],
+  [if test "$enableval" = yes; then ac_float_truncate=volatile;
+   else ac_float_truncate=; fi],
+  ac_float_truncate=)
+
+AC_DEFINE_UNQUOTED(FLOAT_TRUNCATE, $ac_float_truncate, 
+	  [Define to volatile if you need truncating intermediate FP results])
+
 ### On Intel systems with gcc, we may need to compile with -mieee-fp
 ### and -ffloat-store to get full support for IEEE floating point.
 ###
 ### On Alpha/OSF systems, we need -mieee.
 
 ieee_fp_flag=
 case "$canonical_host_type" in
   ## Keep this pattern first, so that it is preferred over the
diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,12 @@
+2009-09-02  Jaroslav Hajek  <highegg@gmail.com>
+
+	* oct-cmplx.h: Rewrite the comaprison ops. Use FLOAT_STORE.
+
 2009-09-01  Jaroslav Hajek  <highegg@gmail.com>
 
 	* oct-cmplx.h: Correct strict operators in macros.
 
 2009-08-31  John W. Eaton  <jwe@octave.org>
 
 	* liboctave/lo-ieee.cc (octave_ieee_init): Abort if floating point
 	format is not recognized as IEEE.
diff --git a/liboctave/oct-cmplx.h b/liboctave/oct-cmplx.h
--- a/liboctave/oct-cmplx.h
+++ b/liboctave/oct-cmplx.h
@@ -1,12 +1,13 @@
 /*
 
 Copyright (C) 1995, 1996, 1997, 2000, 2001, 2004, 2005, 2007, 2008, 2009
               John W. Eaton
+Copyright (C) 2009 VZLU Prague, a.s.
 
 This file is part of Octave.
 
 Octave is free software; you can redistribute it and/or modify it
 under the terms of the GNU General Public License as published by the
 Free Software Foundation; either version 3 of the License, or (at your
 option) any later version.
 
@@ -35,31 +36,49 @@ typedef std::complex<float> FloatComplex
 // by their real parts; OTOH, it uses the same definition for max/min and sort.
 // The abs/arg comparison is definitely more useful (the other one is emulated rather
 // trivially), so let's be consistent and use that all over.
 
 #define DEF_COMPLEXR_COMP(OP, OPS) \
 template <class T> \
 inline bool operator OP (const std::complex<T>& a, const std::complex<T>& b) \
 { \
-  T ax = std::abs (a), bx = std::abs (b); \
-  return ax OPS bx || (ax == bx && std::arg (a) OP std::arg (b)); \
+  FLOAT_TRUNCATE const T ax = std::abs (a), bx = std::abs (b); \
+  if (ax == bx) \
+    { \
+      FLOAT_TRUNCATE const T ay = std::arg (a), by = std::arg (b); \
+      return ay OP by; \
+    } \
+  else \
+    return ax OPS bx; \
 } \
 template <class T> \
 inline bool operator OP (const std::complex<T>& a, T b) \
 { \
-  T ax = std::abs (a); \
-  return ax OPS b || (ax == b && std::arg (a) OP 0); \
+  FLOAT_TRUNCATE const T ax = std::abs (a); \
+  if (ax == b) \
+    { \
+      FLOAT_TRUNCATE const T ay = std::arg (a); \
+      return ay OP 0; \
+    } \
+  else \
+    return ax OPS b; \
 } \
 template <class T> \
 inline bool operator OP (T a, const std::complex<T>& b) \
 { \
-  T bx = std::abs (b); \
-  return a OPS bx || (a == bx && 0 OP std::arg (b)); \
-} \
+  FLOAT_TRUNCATE const T bx = std::abs (b); \
+  if (a == bx) \
+    { \
+      FLOAT_TRUNCATE const T by = std::arg (b); \
+      return 0 OP by; \
+    } \
+  else \
+    return a OPS bx; \
+}
 
 DEF_COMPLEXR_COMP (>, >)
 DEF_COMPLEXR_COMP (<, <)
 DEF_COMPLEXR_COMP (<=, <)
 DEF_COMPLEXR_COMP (>=, >)
 
 #endif
 
