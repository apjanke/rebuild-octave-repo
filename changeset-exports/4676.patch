# HG changeset patch
# User jwe
# Date 1071593272 0
#      Tue Dec 16 16:47:52 2003 +0000
# Node ID c0aa75a64635a0ea03cf9efad47f9fd4ff0185a6
# Parent  f6d6335c08f61309d4fcb95630984a6ece088484
[project @ 2003-12-16 16:47:52 by jwe]

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,25 @@
+2003-12-16  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* pt-pr-code.cc (tree_print_code::visit_complex_for_command, 
+	tree_print_code::visit_octave_user_function_header,
+	tree_print_code::visit_matrix, tree_print_code::visit_cell,
+	tree_print_code::visit_multi_assignment): Keep track of nearest
+	[, {, or ( nesting level.
+	(tree_print_code::visit_index_expression): Likewise.  Check nesting
+	level to decide how to print index.
+	(tree_print_code::reset): Also reset nesting level stack.
+
+	* pt-pr-code.h (tree_print_code::nesting): New data member.
+	(tree_print_code::tree_print_code): Initialize it.
+
+	* ov-base-mat.h (octave_base_matrix::octave_base_matrix (const MT&)):
+	If arg has no dimensions, resize to be 0x0.
+
 2003-12-15  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* oct-map.cc (Octave_map::assign): Use Octave_map::contents member
 	function instead of operator [].
 	* ov-struct.cc (octave_struct::subsasgn): Likewise.
 	* DLD-FUNCTIONS/time.cc (extract_tm): Likewise.
 
 	* DLD-FUNCTIONS/time.cc	(mk_tm_map): Use Octave_map::assign member
diff --git a/src/ov-base-mat.h b/src/ov-base-mat.h
--- a/src/ov-base-mat.h
+++ b/src/ov-base-mat.h
@@ -51,17 +51,21 @@ class
 octave_base_matrix : public octave_base_value
 {
 public:
 
   octave_base_matrix (void)
     : octave_base_value () { }
 
   octave_base_matrix (const MT& m)
-    : octave_base_value (), matrix (m) { }
+    : octave_base_value (), matrix (m)
+  {
+    if (matrix.ndims () == 0)
+      matrix.resize (dim_vector (0, 0));
+  }
 
   octave_base_matrix (const octave_base_matrix& m)
     : octave_base_value (), matrix (m.matrix) { }
 
   ~octave_base_matrix (void) { }
 
   octave_value *clone (void) const { return new octave_base_matrix (*this); }
   octave_value *empty_clone (void) const { return new octave_base_matrix (); }
diff --git a/src/pt-pr-code.cc b/src/pt-pr-code.cc
--- a/src/pt-pr-code.cc
+++ b/src/pt-pr-code.cc
@@ -222,22 +222,24 @@ tree_print_code::visit_simple_for_comman
 void
 tree_print_code::visit_complex_for_command (tree_complex_for_command& cmd)
 {
   print_comment_list (cmd.leading_comment ());
 
   indent ();
 
   os << "for [";
+  nesting.push ('[');
 
   tree_argument_list *lhs = cmd.left_hand_side ();
 
   if (lhs)
     lhs->accept (*this);
 
+  nesting.pop ();
   os << "] = ";
 
   tree_expression *expr = cmd.control_expr ();
 
   if (expr)
     expr->accept (*this);
 
   newline ();
@@ -300,30 +302,36 @@ tree_print_code::visit_octave_user_funct
 
   if (ret_list)
     {
       bool takes_var_return = fcn.takes_var_return ();
 
       int len = ret_list->length ();
 
       if (len > 1 || takes_var_return)
-	os << "[";
+	{
+	  os << "[";
+	  nesting.push ('[');
+	}
 
       ret_list->accept (*this);
 
       if (takes_var_return)
 	{
 	  if (len > 0)
 	    os << ", ";
 
 	  os << "...";
 	}
 
       if (len > 1 || takes_var_return)
-	os << "]";
+	{
+	  nesting.pop ();
+	  os << "]";
+	}
 
       os << " = ";
     }
 
   std::string fcn_name = fcn.function_name ();
 
   os << (fcn_name.empty () ? std::string ("(empty)") : fcn_name) << " ";
 
@@ -331,30 +339,34 @@ tree_print_code::visit_octave_user_funct
 
   if (param_list)
     {
       bool takes_varargs = fcn.takes_varargs ();
 
       int len = param_list->length ();
 
       if (len > 0 || takes_varargs)
-	os << "(";
+	{
+	  os << "(";
+	  nesting.push ('(');
+	}
 
       param_list->accept (*this);
 
       if (takes_varargs)
 	{
 	  if (len > 0)
 	    os << ", ";
 
 	  os << "...";
 	}
 
       if (len > 0 || takes_varargs)
 	{
+	  nesting.pop ();
 	  os << ")";
 	  newline ();
 	}
     }
   else
     {
       os << "()";
       newline ();
@@ -489,30 +501,48 @@ tree_print_code::visit_index_expression 
   std::list<string_vector>::iterator p_arg_names = arg_names.begin ();
 
   for (int i = 0; i < n; i++)
     {
       switch (type_tags[i])
 	{
 	case '(':
 	  {
-	    os << " (";
+	    char nc = nesting.top ();
+	    if ((nc == '[' || nc == '{') && expr.paren_count () == 0)
+	      os << "(";
+	    else
+	      os << " (";
+	    nesting.push ('(');
+
 	    tree_argument_list *l = *p_arg_lists;
 	    if (l)
 	      l->accept (*this);
+
+	    nesting.pop ();
 	    os << ")";
 	  }
 	  break;
 	    
 	case '{':
 	  {
-	    os << " {";
+	    char nc = nesting.top ();
+	    if ((nc == '[' || nc == '{') && expr.paren_count () == 0)
+	      os << "{";
+	    else
+	      os << " {";
+	    // We only care about whitespace inside [] and {} when we
+	    // are defining matrix and cell objects, not when indexing.
+	    nesting.push ('(');
+
 	    tree_argument_list *l = *p_arg_lists;
 	    if (l)
 	      l->accept (*this);
+
+	    nesting.pop ();
 	    os << "}";
 	  }
 	  break;
 	    
 	case '.':
 	  {
 	    string_vector nm = *p_arg_names;
 	    assert (nm.length () == 1);
@@ -534,61 +564,65 @@ tree_print_code::visit_index_expression 
 void
 tree_print_code::visit_matrix (tree_matrix& lst)
 {
   indent ();
 
   print_parens (lst, "(");
 
   os << "[";
+  nesting.push ('[');
 
   tree_matrix::iterator p = lst.begin ();
 
   while (p != lst.end ())
     {
       tree_argument_list *elt = *p++;
 
       if (elt)
 	{
 	  elt->accept (*this);
 
 	  if (p != lst.end ())
 	    os << "; ";
 	}
     }
 
+  nesting.pop ();
   os << "]";
 
   print_parens (lst, ")");
 }
 
 void
 tree_print_code::visit_cell (tree_cell& lst)
 {
   indent ();
 
   print_parens (lst, "(");
 
   os << "{";
+  nesting.push ('{');
 
   tree_cell::iterator p = lst.begin ();
 
   while (p != lst.end ())
     {
       tree_argument_list *elt = *p++;
 
       if (elt)
 	{
 	  elt->accept (*this);
 
 	  if (p != lst.end ())
 	    os << "; ";
 	}
     }
 
+  nesting.pop ();
   os << "}";
 
   print_parens (lst, ")");
 }
 
 void
 tree_print_code::visit_multi_assignment (tree_multi_assignment& expr)
 {
@@ -598,22 +632,28 @@ tree_print_code::visit_multi_assignment 
 
   tree_argument_list *lhs = expr.left_hand_side ();
 
   if (lhs)
     {
       int len = lhs->length ();
 
       if (len > 1)
-	os << "[";
+	{
+	  os << "[";
+	  nesting.push ('[');
+	}
 
       lhs->accept (*this);
 
       if (len > 1)
-	os << "]";
+	{
+	  nesting.pop ();
+	  os << "]";
+	}
     }
 
   os << " " << expr.oper () << " ";
 
   tree_expression *rhs = expr.right_hand_side ();
 
   if (rhs)
     rhs->accept (*this);
@@ -1267,16 +1307,18 @@ tree_print_code::newline (void)
 
 // For ressetting print_code state.
 
 void
 tree_print_code::reset (void)
 {
   beginning_of_line = true;
   curr_print_indent_level = 0;
+  while (nesting.top () != 'n')
+    nesting.pop ();
 }
 
 void
 tree_print_code::print_parens (const tree_expression& expr, const char *txt)
 {
   int n = expr.paren_count ();
 
   for (int i = 0; i < n; i++)
diff --git a/src/pt-pr-code.h b/src/pt-pr-code.h
--- a/src/pt-pr-code.h
+++ b/src/pt-pr-code.h
@@ -22,16 +22,17 @@ Software Foundation, 59 Temple Place - S
 
 #if !defined (octave_tree_print_code_h)
 #define octave_tree_print_code_h 1
 
 #if defined (__GNUG__) && defined (USE_PRAGMA_INTERFACE_IMPLEMENTATION)
 #pragma interface
 #endif
 
+#include <stack>
 #include <string>
 
 #include "comment-list.h"
 #include "pt-walk.h"
 
 class tree_expression;
 
 // How to print the code that the parse trees represent.
@@ -39,18 +40,23 @@ class tree_expression;
 class
 tree_print_code : public tree_walker
 {
 public:
 
   tree_print_code (std::ostream& os_arg,
 		   const std::string& pfx = std::string (),
 		   bool pr_orig_txt = true)
-    : os (os_arg), prefix (pfx), print_original_text (pr_orig_txt),
-      curr_print_indent_level (0), beginning_of_line (true) { }
+    : os (os_arg), prefix (pfx), nesting (),
+      print_original_text (pr_orig_txt),
+      curr_print_indent_level (0), beginning_of_line (true)
+  {
+    // For "none".
+    nesting.push ('n');
+  }
 
   ~tree_print_code (void) { }
 
   void visit_argument_list (tree_argument_list&);
 
   void visit_binary_expression (tree_binary_expression&);
 
   void visit_break_command (tree_break_command&);
@@ -144,16 +150,18 @@ public:
   void visit_do_until_command (tree_do_until_command&);
 
 private:
 
   std::ostream& os;
 
   std::string prefix;
 
+  std::stack<char> nesting;
+
   bool print_original_text;
 
   // Current indentation.
   int curr_print_indent_level;
 
   // TRUE means we are at the beginning of a line.
   bool beginning_of_line;
 
