# HG changeset patch
# User Kai T. Ohlhus <k.ohlhus@gmail.com>
# Date 1548138423 -3600
#      Tue Jan 22 07:27:03 2019 +0100
# Node ID ec3c4f31823bac27fb3c7df1eed90b03cd5b5948
# Parent  c0fa4a9eef9501366392edc8ae9ccf31e8a5d3fa
assert.m: Check sparsity of logical values.

* scripts/testfun/assert.m: Check sparsity of logical values.  For example
"assert (sparse (true), true)" is *not* the same.  The first argument occupies
25 bytes, while the latter just occupies a single byte.

In Matlab this test would be treated by
"verifyEqual (testCase, sparse (true), true);" which also fails.

Checking for semantic equivalence are done by "isequal (sparse (true), true)",
which is true for Octave and Matlab.

diff --git a/scripts/testfun/assert.m b/scripts/testfun/assert.m
--- a/scripts/testfun/assert.m
+++ b/scripts/testfun/assert.m
@@ -220,17 +220,17 @@ function assert (cond, varargin)
       else  # Numeric comparison
         if (nargin < 3)
           ## Without explicit tolerance, be more strict.
           if (! strcmp (class (cond), class (expected)))
             err.index{end+1} = "()";
             err.observed{end+1} = "O";
             err.expected{end+1} = "E";
             err.reason{end+1} = ["Class " class(cond) " != " class(expected)];
-          elseif (isnumeric (cond))
+          elseif (isnumeric (cond) || islogical (cond))
             if (issparse (cond) != issparse (expected))
               err.index{end+1} = "()";
               err.observed{end+1} = "O";
               err.expected{end+1} = "E";
               if (issparse (cond))
                 err.reason{end+1} = "sparse != non-sparse";
               else
                 err.reason{end+1} = "non-sparse != sparse";
