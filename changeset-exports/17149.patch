# HG changeset patch
# User CarnÃ« Draug <carandraug@octave.org>
# Date 1375466742 -3600
#      Fri Aug 02 19:05:42 2013 +0100
# Node ID 73a3c15809743e2d91a71670d77e478e34ac6c99
# Parent  fa14aa77b5145380671c07b4b2c049dcb67058c9
Correctly identify PNG image types (bug #32986, bug #36820 and bug #37689)

* __magick_read_.cc (read_images): check original color type from PNG image
  attribute because GraphicsMagick changes it for optimization.

diff --git a/libinterp/dldfcn/__magick_read__.cc b/libinterp/dldfcn/__magick_read__.cc
--- a/libinterp/dldfcn/__magick_read__.cc
+++ b/libinterp/dldfcn/__magick_read__.cc
@@ -218,16 +218,18 @@ read_images (std::vector<Magick::Image>&
   // a floating point image. In this case, the values need to be rescaled
   // for the range [0 1] (this is what Matlab has documented on the page
   // about image types but in some cases seems to be doing something else.
   // See bug #39249).
   // Finally, we must do the division ourselves (set a divisor) instead of
   // using quantumOperator for the cases where we will be returning floating
   // point and want things in the range [0 1]. This is the same reason why
   // the divisor is of type double.
+  // uint64_t is used in expression because default 32-bit value overflows
+  // when depth() is 32.
   // TODO in the next release of GraphicsMagick, MaxRGB should be replaced
   //      with QuantumRange since MaxRGB is already deprecated in ImageMagick.
   const double divisor   = imvec[0].depth () == 32 ?
                            std::numeric_limits<uint32_t>::max () :
                            MaxRGB / ((uint64_t (1) << imvec[0].depth ()) - 1);
 
   // FIXME: this workaround should probably be fixed in GM by creating a
   //        new ImageType BilevelMatteType
@@ -237,16 +239,52 @@ read_images (std::vector<Magick::Image>&
   // color). Its type will be bilevel since there is no BilevelMatte. The
   // only way to check for this seems to be by checking matte ().
   Magick::ImageType type = imvec[0].type ();
   if (type == Magick::BilevelType && imvec[0].matte ())
     {
       type = Magick::GrayscaleMatteType;
     }
 
+  // FIXME: ImageType is the type being used to represent the image in memory
+  // by GM. The real type may be different (see among others bug #36820). For
+  // example, a png file where all channels are equal may report being
+  // grayscale or even bilevel. But we must always return the real image in
+  // file. In some cases, the original image attributes are stored in the
+  // attributes but this is undocumented. This should be fixed in GM so that
+  // a method such as original_type returns an actual Magick::ImageType
+  if (imvec[0].magick () == "PNG")
+    {
+      // These values come from libpng, not GM:
+      //      Grayscale         = 0
+      //      Palette           = 2 + 1
+      //      RGB               = 2
+      //      RGB + Alpha       = 2 + 4
+      //      Grayscale + Alpha = 4
+      // We won't bother with case 3 (palette) since those should be
+      // read by the function to read indexed images
+      const std::string type_str = imvec[0].attribute ("PNG:IHDR.color-type-orig");
+      if (type_str == "0")
+        {
+          type = Magick::GrayscaleType;
+        }
+      else if (type_str == "2")
+        {
+          type = Magick::TrueColorType;
+        }
+      else if (type_str == "6")
+        {
+          type = Magick::TrueColorMatteType;
+        }
+      else if (type_str == "4")
+        {
+          type = Magick::GrayscaleMatteType;
+        }
+    }
+
   // If the alpha channel was not requested, treat images as if
   // it doesn't exist.
   if (nargout < 3)
     {
       switch (type)
         {
         case Magick::GrayscaleMatteType:
           {
