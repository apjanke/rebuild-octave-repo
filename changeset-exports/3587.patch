# HG changeset patch
# User jwe
# Date 949989385 0
#      Tue Feb 08 05:56:25 2000 +0000
# Node ID b11f9c33558f3119cca3b89b8a508a93ed632a7f
# Parent  2a38a5ddf20dc2903436964e14a3735b5065dfeb
[project @ 2000-02-08 05:54:21 by jwe]

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,10 +1,29 @@
 2000-02-07  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
+	* DLD-FUNCTIONS/balance.cc (Fbalance): Explicitly request
+	conversion from Matrix to ComplexMatrix.
+	* DLD-FUNCTIONS/qz.cc (Fqz): Likewise.
+
+	* ov-re-mat.h (octave_matrix::complex_matrix_value): Explicitly
+	request conversion from Matrix type.
+
+	* ov-ch-mat.h (octave_char_matrix::matrix_value): Explicitly
+	request conversion from charMatrix type.
+	(octave_char_matrix::complex_matrix_value): Likewise.
+	* ov-bool-mat.h (octave_bool_matrix::matrix_value): Likewise.
+	(octave_bool_matrix::complex_matrix_value): Likewise.
+
+	* ov-range.h (octave_range::complex_matrix_value): Explicitly
+	request conversion from Matrix type.
+
+	* ov-cx-mat.h, ov-re-mat.h: Explicitly request conversions from
+	diagonal matrix types in constructors.
+
 	* mappers.cc (ximag, xreal): Return double, not Complex.
 
 	* error.cc (panic): Turn off buffering of error messages.
 	Don't call flush_octave_stdout here, verror will do it for us.	
 	(verror): Don't call flush_octave_stdout if buffering error messages.
 
 	* pt-except.cc (tree_try_catch_command::eval): Only restore
 	buffer_error_message value (by running the unwind_protect element
diff --git a/src/DLD-FUNCTIONS/balance.cc b/src/DLD-FUNCTIONS/balance.cc
--- a/src/DLD-FUNCTIONS/balance.cc
+++ b/src/DLD-FUNCTIONS/balance.cc
@@ -227,20 +227,20 @@ Generalized eigenvalue problem balancing
 
       static int complex_case
 	= (args(0).is_complex_type () || args(1).is_complex_type ());
 
       // now balance
       if (complex_case)
 	{
 	  if (args(0).is_real_type ())
-	    caa = aa;
+	    caa = ComplexMatrix (aa);
 
 	  if (args(1).is_real_type ())
-	    cbb = bb;
+	    cbb = ComplexMatrix (bb);
   
 	  F77_XFCN (zggbal, ZGGBAL,
 		    (&job, nn, caa.fortran_vec(), nn,
 		     cbb.fortran_vec(), nn, ilo, ihi,
 		     lscale.fortran_vec(), rscale.fortran_vec(),
 		     work.fortran_vec(), info, 1L));
 
 	  if (f77_exception_encountered)
diff --git a/src/DLD-FUNCTIONS/log.cc b/src/DLD-FUNCTIONS/log.cc
--- a/src/DLD-FUNCTIONS/log.cc
+++ b/src/DLD-FUNCTIONS/log.cc
@@ -20,16 +20,17 @@ Software Foundation, 59 Temple Place - S
 
 */
 
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
 #include "EIG.h"
+#include "mx-cm-cdm.h"
 
 #include "defun-dld.h"
 #include "error.h"
 #include "gripes.h"
 #include "oct-obj.h"
 #include "utils.h"
 
 // XXX FIXME XXX -- the next two functions should really be just
diff --git a/src/DLD-FUNCTIONS/lu.cc b/src/DLD-FUNCTIONS/lu.cc
--- a/src/DLD-FUNCTIONS/lu.cc
+++ b/src/DLD-FUNCTIONS/lu.cc
@@ -134,17 +134,17 @@ p =\n\
 	  ComplexLU fact (m);
 
 	  switch (nargout)
 	    {
 	    case 0:
 	    case 1:
 	    case 2:
 	      {
-		ComplexMatrix P = fact.P ();
+		Matrix P = fact.P ();
 		ComplexMatrix L = P.transpose () * fact.L ();
 		retval(1) = fact.U ();
 		retval(0) = L;
 	      }
 	      break;
 
 	    case 3:
 	    default:
diff --git a/src/DLD-FUNCTIONS/qz.cc b/src/DLD-FUNCTIONS/qz.cc
--- a/src/DLD-FUNCTIONS/qz.cc
+++ b/src/DLD-FUNCTIONS/qz.cc
@@ -472,26 +472,26 @@ See also: balance, dare, eig, schur\n\
 
   static char qz_job;
   qz_job = (nargout < 2 ? 'E' : 'S');	
 
   if (complex_case)
     {
       // complex case
       if (args(0).is_real_type ())
-	caa = aa;
+	caa = ComplexMatrix (aa);
 
       if (args(1).is_real_type ())
-	cbb = bb;
+	cbb = ComplexMatrix (bb);
 
       if (compq == 'V')
-	CQ = QQ;
+	CQ = ComplexMatrix (QQ);
 
       if (compz == 'V')
-	CZ = ZZ;
+	CZ = ComplexMatrix (ZZ);
 
       error ("complex case not done yet");
       return retval;
     }
   else  	// real matrices case
     {
 #ifdef DEBUG
       std::cout << "qz: peforming qr decomposition of bb" << std::endl;
diff --git a/src/ov-bool-mat.h b/src/ov-bool-mat.h
--- a/src/ov-bool-mat.h
+++ b/src/ov-bool-mat.h
@@ -84,22 +84,22 @@ public:
 
   bool valid_as_scalar_index (void) const;
 
   double double_value (bool = false) const;
 
   double scalar_value (bool frc_str_conv = false) const
     { return double_value (frc_str_conv); }
 
-  Matrix matrix_value (bool = false) const { return matrix; }
+  Matrix matrix_value (bool = false) const { return Matrix (matrix); }
 
   Complex complex_value (bool = false) const;
 
   ComplexMatrix complex_matrix_value (bool = false) const
-    { return matrix; }
+    { return ComplexMatrix (matrix); }
 
   boolMatrix bool_matrix_value (void) const
     { return matrix; }
 
   octave_value convert_to_str (void) const
     { return octave_value (matrix); }
 
 protected:
diff --git a/src/ov-ch-mat.h b/src/ov-ch-mat.h
--- a/src/ov-ch-mat.h
+++ b/src/ov-ch-mat.h
@@ -85,22 +85,22 @@ public:
 
   bool valid_as_scalar_index (void) const;
 
   double double_value (bool = false) const;
 
   double scalar_value (bool frc_str_conv = false) const
     { return double_value (frc_str_conv); }
 
-  Matrix matrix_value (bool = false) const { return matrix; }
+  Matrix matrix_value (bool = false) const { return Matrix (matrix); }
 
   Complex complex_value (bool = false) const;
 
   ComplexMatrix complex_matrix_value (bool = false) const
-    { return matrix; }
+    { return ComplexMatrix (matrix); }
 
   charMatrix char_matrix_value (bool = false) const
     { return matrix; }
 
   octave_value convert_to_str (void) const
     { return octave_value (matrix, true); }
 
 protected:
diff --git a/src/ov-cx-mat.h b/src/ov-cx-mat.h
--- a/src/ov-cx-mat.h
+++ b/src/ov-cx-mat.h
@@ -55,17 +55,17 @@ public:
 
   octave_complex_matrix (void)
     : octave_base_matrix<ComplexMatrix> () { }
 
   octave_complex_matrix (const ComplexMatrix& m)
     : octave_base_matrix<ComplexMatrix> (m) { }
 
   octave_complex_matrix (const ComplexDiagMatrix& d)
-    : octave_base_matrix<ComplexMatrix> (d) { }
+    : octave_base_matrix<ComplexMatrix> (ComplexMatrix (d)) { }
 
   octave_complex_matrix (const ComplexRowVector& v)
     : octave_base_matrix<ComplexMatrix> (ComplexMatrix (v)) { }
 
   octave_complex_matrix (const ComplexColumnVector& v)
     : octave_base_matrix<ComplexMatrix> (ComplexMatrix (v)) { }
 
   octave_complex_matrix (const octave_complex_matrix& cm)
diff --git a/src/ov-range.h b/src/ov-range.h
--- a/src/ov-range.h
+++ b/src/ov-range.h
@@ -128,17 +128,17 @@ public:
     { return double_value (frc_str_conv); }
 
   Matrix matrix_value (bool = false) const
     { return range.matrix_value (); }
 
   Complex complex_value (bool = false) const;
 
   ComplexMatrix complex_matrix_value (bool = false) const
-    { return range.matrix_value (); }
+    { return ComplexMatrix (range.matrix_value ()); }
 
   Range range_value (void) const { return range; }
 
   octave_value convert_to_str (void) const;
 
   void print (std::ostream& os, bool pr_as_read_syntax = false) const;
 
   void print_raw (std::ostream& os, bool pr_as_read_syntax = false) const;
diff --git a/src/ov-re-mat.h b/src/ov-re-mat.h
--- a/src/ov-re-mat.h
+++ b/src/ov-re-mat.h
@@ -55,17 +55,17 @@ public:
 
   octave_matrix (void)
     : octave_base_matrix<Matrix> () { }
 
   octave_matrix (const Matrix& m)
     : octave_base_matrix<Matrix> (m) { }
 
   octave_matrix (const DiagMatrix& d)
-    : octave_base_matrix<Matrix> (d) { }
+    : octave_base_matrix<Matrix> (Matrix (d)) { }
 
   octave_matrix (const RowVector& v)
     : octave_base_matrix<Matrix> (Matrix (v)) { }
 
   octave_matrix (const ColumnVector& v)
     : octave_base_matrix<Matrix> (Matrix (v)) { }
 
   octave_matrix (const octave_matrix& m)
@@ -92,17 +92,17 @@ public:
   double scalar_value (bool frc_str_conv = false) const
     { return double_value (frc_str_conv); }
 
   Matrix matrix_value (bool = false) const { return matrix; }
 
   Complex complex_value (bool = false) const;
 
   ComplexMatrix complex_matrix_value (bool = false) const
-    { return matrix; }
+    { return ComplexMatrix (matrix); }
 
   void increment (void) { matrix += 1.0; }
 
   void decrement (void) { matrix -= 1.0; }
 
   octave_value convert_to_str (void) const;
 
 private:
diff --git a/src/pt-plot.cc b/src/pt-plot.cc
--- a/src/pt-plot.cc
+++ b/src/pt-plot.cc
@@ -491,18 +491,19 @@ subplot_using::eval (int ndim, int n_max
   return 0;
 }
 
 ColumnVector
 subplot_using::values (int ndim, int n_max)
 {
   int status = eval (ndim, n_max);
 
+  // XXX FIXME XXX -- is the following really right?
   if (status < 0)
-    return -1;
+    return ColumnVector (1, -1.0);
 
   return val;
 }
 
 int
 subplot_using::print (int ndim, int n_max, std::ostrstream& plot_buf)
 {
   int status = eval (ndim, n_max);
diff --git a/src/version.h b/src/version.h
--- a/src/version.h
+++ b/src/version.h
@@ -18,17 +18,17 @@ You should have received a copy of the G
 along with Octave; see the file COPYING.  If not, write to the Free
 Software Foundation, 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 
 */
 
 #if !defined (octave_version_h)
 #define octave_version_h 1
 
-#define OCTAVE_VERSION "2.1.25"
+#define OCTAVE_VERSION "2.1.26"
 
 #define OCTAVE_COPYRIGHT \
   "Copyright (C) 1996, 1997, 1998, 1999, 2000 John W. Eaton."
 
 #define OCTAVE_NAME_AND_VERSION \
   "GNU Octave, version " OCTAVE_VERSION " (" OCTAVE_CANONICAL_HOST_TYPE ")"
 
 #define OCTAVE_NAME_VERSION_AND_COPYRIGHT \
