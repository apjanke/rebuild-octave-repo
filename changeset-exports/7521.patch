# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1203839881 18000
#      Sun Feb 24 02:58:01 2008 -0500
# Node ID 6f10bbb2854afddb9f2660d8146fde76b83f184f
# Parent  b166043585a87263340b2ce69b5c159d9791aac8
avoid some GCC warnings for unsigned comparisons

diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,20 @@
+2008-02-24  John W. Eaton  <jwe@octave.org>
+
+	* oct-inttypes.h (octave_int_helper): New class.  Provide
+	specializations for signed and unsigned types.
+	(octave_int<T>::operator >>=, octave_int<T>::abs,
+	octave_int<T>::signum): Use static functions from
+	octave_int_helper class.
+
+	* oct-inttypes.h, oct-inttypes.cc (OCTAVE_US_TYPE1_CMP_OP,
+	OCTAVE_US_TYPE2_CMP_OP): Tag function declarations and definitions
+	with "template <>".
+
 2008-02-22  John W. Eaton  <jwe@octave.org>
 
 	* CSparse.cc, SparseCmplxLU.cc, SparsedbleLU.cc, dSparse.cc,
 	file-ops.cc, oct-group.cc, oct-shlib.cc, sparse-base-chol.h,
 	sparse-dmsolve.cc: Use 0 instead of NULL.
 
 2008-02-22  David Bateman  <dbateman@free.fr>
 
diff --git a/liboctave/oct-inttypes.cc b/liboctave/oct-inttypes.cc
--- a/liboctave/oct-inttypes.cc
+++ b/liboctave/oct-inttypes.cc
@@ -281,32 +281,34 @@ INSTANTIATE_OCTAVE_INT_CMP_OPS (uint64_t
 INSTANTIATE_OCTAVE_INT_CMP_OPS (uint64_t, uint32_t);
 INSTANTIATE_OCTAVE_INT_CMP_OPS (uint64_t, uint64_t);
 
 // The following apply if the unsigned type is at least as wide as the
 // signed type (then we can cast postive signed values to the unsigned
 // type and compare).
 
 #define OCTAVE_US_TYPE1_CMP_OP(OP, LTZ_VAL, UT, ST) \
+  template <> \
   bool \
   operator OP (const octave_int<UT>& lhs, const octave_int<ST>& rhs) \
   { \
     return rhs.value () < 0 ? LTZ_VAL \
       : lhs.value () OP static_cast<UT> (rhs.value ()); \
   }
 
 #define OCTAVE_US_TYPE1_CMP_OPS(UT, ST) \
   OCTAVE_US_TYPE1_CMP_OP (<, false, UT, ST) \
   OCTAVE_US_TYPE1_CMP_OP (<=, false, UT, ST) \
   OCTAVE_US_TYPE1_CMP_OP (>=, true, UT, ST) \
   OCTAVE_US_TYPE1_CMP_OP (>, true, UT, ST) \
   OCTAVE_US_TYPE1_CMP_OP (==, false, UT, ST) \
   OCTAVE_US_TYPE1_CMP_OP (!=, true, UT, ST)
 
 #define OCTAVE_SU_TYPE1_CMP_OP(OP, LTZ_VAL, ST, UT) \
+  template <> \
   bool \
   operator OP (const octave_int<ST>& lhs, const octave_int<UT>& rhs) \
   { \
     return lhs.value () < 0 ? LTZ_VAL \
       : static_cast<UT> (lhs.value ()) OP rhs.value (); \
   }
 
 #define OCTAVE_SU_TYPE1_CMP_OPS(ST, UT) \
@@ -330,32 +332,34 @@ OCTAVE_TYPE1_CMP_OPS (uint64_t, int16_t)
 OCTAVE_TYPE1_CMP_OPS (uint64_t, int32_t)
 OCTAVE_TYPE1_CMP_OPS (uint64_t, int64_t)
 
 // The following apply if the signed type is wider than the unsigned
 // type (then we can cast unsigned values to the signed type and
 // compare if the signed value is positive).
 
 #define OCTAVE_US_TYPE2_CMP_OP(OP, LTZ_VAL, UT, ST) \
+  template <> \
   bool \
   operator OP (const octave_int<UT>& lhs, const octave_int<ST>& rhs) \
   { \
     return rhs.value () < 0 ? LTZ_VAL \
       : static_cast<ST> (lhs.value ()) OP rhs.value (); \
   }
 
 #define OCTAVE_US_TYPE2_CMP_OPS(ST, UT) \
   OCTAVE_US_TYPE2_CMP_OP (<, false, ST, UT) \
   OCTAVE_US_TYPE2_CMP_OP (<=, false, ST, UT) \
   OCTAVE_US_TYPE2_CMP_OP (>=, true, ST, UT) \
   OCTAVE_US_TYPE2_CMP_OP (>, true, ST, UT) \
   OCTAVE_US_TYPE2_CMP_OP (==, false, ST, UT) \
   OCTAVE_US_TYPE2_CMP_OP (!=, true, ST, UT)
 
 #define OCTAVE_SU_TYPE2_CMP_OP(OP, LTZ_VAL, ST, UT) \
+  template <> \
   bool \
   operator OP (const octave_int<ST>& lhs, const octave_int<UT>& rhs) \
   { \
     return lhs.value () < 0 ? LTZ_VAL \
       : lhs.value () OP static_cast<ST> (rhs.value ()); \
   }
 
 #define OCTAVE_SU_TYPE2_CMP_OPS(ST, UT) \
diff --git a/liboctave/oct-inttypes.h b/liboctave/oct-inttypes.h
--- a/liboctave/oct-inttypes.h
+++ b/liboctave/oct-inttypes.h
@@ -194,16 +194,71 @@ OCTAVE_S_US_FTR_FCNS (long long)
 #define OCTAVE_INT_MAX_VAL2(T1, T2) \
   std::numeric_limits<typename octave_int_binop_traits<T1, T2>::TR>::max ()
 
 #define OCTAVE_INT_FIT_TO_RANGE2(r, T1, T2) \
   octave_int_fit_to_range (r, \
                            OCTAVE_INT_MIN_VAL2 (T1, T2), \
                            OCTAVE_INT_MAX_VAL2 (T1, T2))
 
+// By using these classes/functions we avoid warnings from GCC about
+// comparisons always being false due to limited range of data type.
+
+// FIXME -- it would be nice to nest the helper class inside the
+// octave_int class, but I don't see the magic for that at the moment.
+
+template <class T> class octave_int;
+
+template <class T, bool is_signed>
+class octave_int_helper
+{
+public:
+  static octave_int<T> abs (const T& x);
+
+  static octave_int<T> signum (const T& x);
+
+  template <class T2> static void rshift_eq (T& ival, const T2& x);
+};
+
+template <class T>
+class octave_int_helper<T, false>
+{
+public:
+  static octave_int<T>
+  abs (const T& x) { return x; }
+
+  static octave_int<T>
+  signum (const T& x) { return x > 0 ? 1 : 0; }
+
+  template <class T2>
+  static void
+  rshift_eq (T& ival, const T2& x) { ival = ival >> x; }
+};
+
+template <class T>
+class octave_int_helper<T, true>
+{
+public:
+  static octave_int<T>
+  abs (const T& x) { return x < 0 ? -x : x; }
+
+  static octave_int<T>
+  signum (const T& x) { return x < 0 ? -1 : (x > 0 ? 1 : 0); }
+
+  template <class T2>
+  static void
+  rshift_eq (T& ival, const T2& x)
+  {
+    if (ival < 0)
+      ival = - (((-ival) >> x) & std::numeric_limits<T>::max());
+    else
+      ival = ival >> x;
+  }
+};
+
 template <class T>
 class
 octave_int
 {
 public:
 
   typedef T val_type;
 
@@ -301,42 +356,36 @@ public:
 
   template <class T2>
   octave_int<T>& operator <<= (const T2& x)
   {
     ival = ival << x;
     return *this;
   }
 
+  // Use helper functions in the operator >>=, abs, and signum
+  // functions to avoid "comparison of unsigned expression < 0 is
+  // always false" warnings from GCC when instantiating these funtions
+  // for unsigned types.
+
   template <class T2>
   octave_int<T>& operator >>= (const T2& x)
   {
-    if (ival < 0)
-      ival = - (((-ival) >> x) & std::numeric_limits<T>::max());
-    else
-      ival = ival >> x;
+    octave_int_helper<T, std::numeric_limits<T>::is_signed>::rshift_eq (ival, x);
     return *this;
   }
 
-  octave_int<T> abs (void) const 
-  { 
-    T val = value (); 
-    if (val < static_cast <T> (0))
-      val = - val;
-    return val;
+  octave_int<T> abs (void) const
+  {
+    return octave_int_helper<T, std::numeric_limits<T>::is_signed>::abs (value ());
   }
 
   octave_int<T> signum (void) const 
   { 
-    T val = value (); 
-    if (val < static_cast <T> (0))
-      val = - static_cast <T> (1);
-    else if (val > static_cast <T> (0))
-      val = static_cast <T> (1);
-    return val;
+    return octave_int_helper<T, std::numeric_limits<T>::is_signed>::signum (value ());
   }
 
   octave_int<T> min (void) const { return std::numeric_limits<T>::min (); }
   octave_int<T> max (void) const { return std::numeric_limits<T>::max (); }
 
   static int nbits (void) { return sizeof (T) * CHAR_BIT; }
 
   static int byte_size (void) { return sizeof(T); }
@@ -580,28 +629,32 @@ OCTAVE_INT_CMP_OP (>)
 OCTAVE_INT_CMP_OP (==)
 OCTAVE_INT_CMP_OP (!=)
 
 // The following apply if the unsigned type is at least as wide as the
 // signed type (then we can cast postive signed values to the unsigned
 // type and compare).
 
 #define OCTAVE_US_TYPE1_CMP_OP_DECL(OP, LTZ_VAL, UT, ST) \
-  bool OCTAVE_API operator OP (const octave_int<UT>& lhs, const octave_int<ST>& rhs);
+  template <> \
+  bool \
+  OCTAVE_API operator OP (const octave_int<UT>& lhs, const octave_int<ST>& rhs);
 
 #define OCTAVE_US_TYPE1_CMP_OP_DECLS(UT, ST) \
   OCTAVE_US_TYPE1_CMP_OP_DECL (<, false, UT, ST) \
   OCTAVE_US_TYPE1_CMP_OP_DECL (<=, false, UT, ST) \
   OCTAVE_US_TYPE1_CMP_OP_DECL (>=, true, UT, ST) \
   OCTAVE_US_TYPE1_CMP_OP_DECL (>, true, UT, ST) \
   OCTAVE_US_TYPE1_CMP_OP_DECL (==, false, UT, ST) \
   OCTAVE_US_TYPE1_CMP_OP_DECL (!=, true, UT, ST)
 
 #define OCTAVE_SU_TYPE1_CMP_OP_DECL(OP, LTZ_VAL, ST, UT) \
-  bool OCTAVE_API operator OP (const octave_int<ST>& lhs, const octave_int<UT>& rhs);
+  template <> \
+  bool \
+  OCTAVE_API operator OP (const octave_int<ST>& lhs, const octave_int<UT>& rhs);
 
 #define OCTAVE_SU_TYPE1_CMP_OP_DECLS(ST, UT) \
   OCTAVE_SU_TYPE1_CMP_OP_DECL (<, true, ST, UT) \
   OCTAVE_SU_TYPE1_CMP_OP_DECL (<=, true, ST, UT) \
   OCTAVE_SU_TYPE1_CMP_OP_DECL (>=, false, ST, UT) \
   OCTAVE_SU_TYPE1_CMP_OP_DECL (>, false, ST, UT) \
   OCTAVE_SU_TYPE1_CMP_OP_DECL (==, false, ST, UT) \
   OCTAVE_SU_TYPE1_CMP_OP_DECL (!=, true, ST, UT)
@@ -619,28 +672,32 @@ OCTAVE_TYPE1_CMP_OP_DECLS (uint64_t, int
 OCTAVE_TYPE1_CMP_OP_DECLS (uint64_t, int32_t)
 OCTAVE_TYPE1_CMP_OP_DECLS (uint64_t, int64_t)
 
 // The following apply if the signed type is wider than the unsigned
 // type (then we can cast unsigned values to the signed type and
 // compare if the signed value is positive).
 
 #define OCTAVE_US_TYPE2_CMP_OP_DECL(OP, LTZ_VAL, UT, ST) \
-  bool OCTAVE_API operator OP (const octave_int<UT>& lhs, const octave_int<ST>& rhs);
+  template <> \
+  bool \
+  OCTAVE_API operator OP (const octave_int<UT>& lhs, const octave_int<ST>& rhs);
 
 #define OCTAVE_US_TYPE2_CMP_OP_DECLS(ST, UT) \
   OCTAVE_US_TYPE2_CMP_OP_DECL (<, false, ST, UT) \
   OCTAVE_US_TYPE2_CMP_OP_DECL (<=, false, ST, UT) \
   OCTAVE_US_TYPE2_CMP_OP_DECL (>=, true, ST, UT) \
   OCTAVE_US_TYPE2_CMP_OP_DECL (>, true, ST, UT) \
   OCTAVE_US_TYPE2_CMP_OP_DECL (==, false, ST, UT) \
   OCTAVE_US_TYPE2_CMP_OP_DECL (!=, true, ST, UT)
 
 #define OCTAVE_SU_TYPE2_CMP_OP_DECL(OP, LTZ_VAL, ST, UT) \
-  bool OCTAVE_API operator OP (const octave_int<ST>& lhs, const octave_int<UT>& rhs);
+  template <> \
+  bool \
+  OCTAVE_API operator OP (const octave_int<ST>& lhs, const octave_int<UT>& rhs);
 
 #define OCTAVE_SU_TYPE2_CMP_OP_DECLS(ST, UT) \
   OCTAVE_SU_TYPE2_CMP_OP_DECL (<, true, ST, UT) \
   OCTAVE_SU_TYPE2_CMP_OP_DECL (<=, true, ST, UT) \
   OCTAVE_SU_TYPE2_CMP_OP_DECL (>=, false, ST, UT) \
   OCTAVE_SU_TYPE2_CMP_OP_DECL (>, false, ST, UT) \
   OCTAVE_SU_TYPE2_CMP_OP_DECL (==, false, ST, UT) \
   OCTAVE_SU_TYPE2_CMP_OP_DECL (!=, true, ST, UT)
