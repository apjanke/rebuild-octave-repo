# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1248255701 -7200
#      Wed Jul 22 11:41:41 2009 +0200
# Node ID c5f03874ea2a2b2d3ad8d04e0d7ac88dbd139bc8
# Parent  0c785ad961fa7921c667b1e7ca6c3a0f4cb7e78f
simplify symbol_table::find and associated functions

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,23 @@
+2009-07-22  Jaroslav Hajek  <highegg@gmail.com>
+
+	* symtab.cc (symbol_table::find, 
+	symbol_table::find_function, 
+	symbol_table::symbol_record::find,
+	symbol_table::fcn_info::find,
+	symbol_table::fcn_info::fcn_info_rep::find,
+	symbol_table::fcn_info::fcn_info_rep::xfind): Simplify argument lists.
+	* symtab.h: Update declarations.
+	* pt-id.cc (tree_identifier::rvalue): Simplify.
+	* pt-id.h (tree_identifier::do_lookup): Simplify.
+	* pt-idx.cc (tree_index_expression::rvalue): Update.
+	* variables.cc (symbol_exist): Update.
+
+
 2009-07-21  John W. Eaton  <jwe@octave.org>
 
 	* symtab.cc (symbol_table::builtin_find,
 	symbol_table::do_builtin_find,
 	symbol_table::fcn_info::builtin_find,
 	symbol_table::fcn_info::fcn_info_rep::builtin_find,
 	symbol_table::fcn_info::fcn_info_rep::x_builtin_find): New functions.
 	* symtab.h: Provide decls.
diff --git a/src/pt-id.cc b/src/pt-id.cc
--- a/src/pt-id.cc
+++ b/src/pt-id.cc
@@ -55,21 +55,17 @@ tree_identifier::eval_undefined_error (v
 octave_value_list
 tree_identifier::rvalue (int nargout)
 {
   octave_value_list retval;
 
   if (error_state)
     return retval;
 
-  octave_value_list evaluated_args;
-  bool args_evaluated = false;
-
-  octave_value val = xsym().find (0, string_vector (), evaluated_args,
-				  args_evaluated);
+  octave_value val = xsym ().find ();
 
   if (val.is_defined ())
     {
       // GAGME -- this would be cleaner if we required
       // parens to indicate function calls.
       //
       // If this identifier refers to a function, we need to know
       // whether it is indexed so that we can do the same thing
diff --git a/src/pt-id.h b/src/pt-id.h
--- a/src/pt-id.h
+++ b/src/pt-id.h
@@ -79,20 +79,19 @@ public:
   //
   //   * If the identifier is still undefined, try looking for an
   //     function file to parse.
   //
   //   * On systems that support dynamic linking, we prefer .oct files,
   //     then .mex files, then .m files.
 
   octave_value
-  do_lookup (tree_argument_list *args, const string_vector& arg_names,
-	     octave_value_list& evaluated_args, bool& args_evaluated)
+  do_lookup (const octave_value_list& args = octave_value_list ())
   {
-    return xsym().find (args, arg_names, evaluated_args, args_evaluated);
+    return xsym().find (args);
   }
 
   void mark_global (void) { xsym().mark_global (); }
 
   void mark_as_static (void) { xsym().init_persistent (); }
 
   void mark_as_formal_parameter (void) { xsym().mark_formal (); }
 
diff --git a/src/pt-idx.cc b/src/pt-idx.cc
--- a/src/pt-idx.cc
+++ b/src/pt-idx.cc
@@ -291,18 +291,22 @@ tree_index_expression::rvalue (int nargo
 	{
 	  tree_argument_list *al = *(args.begin ());
 
 	  size_t n = al ? al->length () : 0;
 
 	  if (n > 0)
 	    {
 	      string_vector anm = *(arg_nm.begin ());
+              have_args = true;
+              first_args = al -> convert_to_const_vector ();
+              first_args.stash_name_tags (anm);
 
-	      first_expr_val = id->do_lookup  (al, anm, first_args, have_args);
+              if (! error_state)
+                first_expr_val = id->do_lookup  (first_args);
 	    }
 	}
     }
 
   if (! error_state)
     {
       if (first_expr_val.is_undefined ())
 	first_expr_val = expr->rvalue1 ();
diff --git a/src/symtab.cc b/src/symtab.cc
--- a/src/symtab.cc
+++ b/src/symtab.cc
@@ -91,39 +91,34 @@ symbol_table::symbol_record::symbol_reco
 	 << "] ";
       val.dump (os);
     }
 
   os << "\n";
 }
 
 octave_value
-symbol_table::symbol_record::find (tree_argument_list *args,
-				   const string_vector& arg_names,
-				   octave_value_list& evaluated_args,
-				   bool& args_evaluated) const
+symbol_table::symbol_record::find (const octave_value_list& args) const
 {
   octave_value retval;
 
   if (is_global ())
     retval = symbol_table::global_varref (name ());
   else
     {
       retval = varval ();
 
       if (retval.is_undefined ())
         {
           // Use cached fcn_info pointer if possible.
           if (rep->finfo)
-            retval = rep->finfo->find (args, arg_names,
-                                       evaluated_args, args_evaluated);
+            retval = rep->finfo->find (args);
           else
             { 
-              retval = symbol_table::find_function (name (), args, arg_names,
-                                                    evaluated_args, args_evaluated);
+              retval = symbol_table::find_function (name (), args);
 
               if (retval.is_defined ())
                 rep->finfo = get_fcn_info (name ());
             }
         }
     }
 
   return retval;
@@ -424,42 +419,42 @@ symbol_table::fcn_info::fcn_info_rep::he
 	   p != dispatch_map.end (); p++)
 	retval += "  " + p->second + " (" + p->first + ", ...)\n\n";
     }
 
   return retval;
 }
 
 static std::string
-get_dispatch_type (const octave_value_list& evaluated_args)
+get_dispatch_type (const octave_value_list& args)
 {
   std::string dispatch_type;
 
-  int n = evaluated_args.length ();
+  int n = args.length ();
 
   if (n > 0)
     {
       // Find first object, if any.
 
       int i;
 
       for (i = 0; i < n; i++)
 	{
-	  octave_value arg = evaluated_args(i);
+	  octave_value arg = args(i);
 
 	  if (arg.is_object ())
 	    {
 	      dispatch_type = arg.class_name ();
 	      break;
 	    }
 	}
 
       for (int j = i+1; j < n; j++)
 	{
-	  octave_value arg = evaluated_args(j);
+	  octave_value arg = args(j);
 
 	  if (arg.is_object ())
 	    {
 	      std::string cname = arg.class_name ();
 
 	      // Only switch to type of ARG if it is marked superior
 	      // to the current DISPATCH_TYPE.
 	      if (! symbol_table::is_superiorto (dispatch_type, cname)
@@ -467,17 +462,17 @@ get_dispatch_type (const octave_value_li
 		dispatch_type = cname;
 	    }
 	}
 
       if (dispatch_type.empty ())
 	{
 	  // No object found, so use class of first argument.
 
-	  dispatch_type = evaluated_args(0).class_name ();
+	  dispatch_type = args(0).class_name ();
 	}
     }
 
   return dispatch_type;
 }
 
 // Find the definition of NAME according to the following precedence
 // list:
@@ -488,59 +483,37 @@ get_dispatch_type (const octave_value_li
 //   class constructor
 //   class method
 //   legacy dispatch
 //   command-line function
 //   autoload function
 //   function on the path
 //   built-in function
 
-// Notes:
-//
-// FIXME -- we need to evaluate the argument list to determine the
-// dispatch type.  The method used here works (pass in the args, pass
-// out the evaluated args and a flag saying whether the evaluation was
-// needed), but it seems a bit inelegant.  We do need to save the
-// evaluated args in some way to avoid evaluating them multiple times.
-//  Maybe evaluated args could be attached to the tree_argument_list
-// object?  Then the argument list could be evaluated outside of this
-// function and we could elimnate the arg_names, evaluated_args, and
-// args_evaluated arguments.  We would still want to avoid computing
-// the dispatch type unless it is needed, so the args should be passed
-// rather than the dispatch type.  But the arguments will need to be
-// evaluated no matter what, so evaluating them beforehand should be
-// OK.  If the evaluated arguments are attached to args, then we would
-// need to determine the appropriate place(s) to clear them (for
-// example, before returning from tree_index_expression::rvalue).
-
 octave_value
-symbol_table::fcn_info::fcn_info_rep::find
-  (tree_argument_list *args, const string_vector& arg_names,
-   octave_value_list& evaluated_args, bool& args_evaluated)
+symbol_table::fcn_info::fcn_info_rep::find (const octave_value_list& args)
 {
-  octave_value retval = xfind (args, arg_names, evaluated_args, args_evaluated);
+  octave_value retval = xfind (args);
 
   if (! retval.is_defined ())
     {
       // It is possible that the user created a file on the fly since
       // the last prompt or chdir, so try updating the load path and
       // searching again.
 
       load_path::update ();
 
-      retval = xfind (args, arg_names, evaluated_args, args_evaluated);
+      retval = xfind (args);
     }
 
   return retval;
 }
 
 octave_value
-symbol_table::fcn_info::fcn_info_rep::xfind
-  (tree_argument_list *args, const string_vector& arg_names,
-   octave_value_list& evaluated_args, bool& args_evaluated)
+symbol_table::fcn_info::fcn_info_rep::xfind (const octave_value_list& args)
 {
   // Subfunction.  I think it only makes sense to check for
   // subfunctions if we are currently executing a function defined
   // from a .m file.
 
   scope_val_iterator r = subfunctions.find (xcurrent_scope);
 
   octave_function *curr_fcn = 0;
@@ -639,66 +612,45 @@ symbol_table::fcn_info::fcn_info_rep::xf
 
 	  if (val.is_defined ())
 	    return val;
 	}
     }
 
   // Class methods.
 
-  if (args_evaluated || (args && args->length () > 0))
+  if (! args.empty ())
     {
-      if (! args_evaluated)
-	evaluated_args = args->convert_to_const_vector ();
-
-      if (! error_state)
-	{
-	  int n = evaluated_args.length ();
-
-	  if (n > 0 && ! args_evaluated)
-	    evaluated_args.stash_name_tags (arg_names);
+      std::string dispatch_type = get_dispatch_type (args);
 
-	  args_evaluated = true;
-
-	  if (n > 0)
-	    {
-	      std::string dispatch_type = get_dispatch_type (evaluated_args);
+      octave_value fcn = find_method (dispatch_type);
 
-	      octave_value fcn = find_method (dispatch_type);
-
-	      if (fcn.is_defined ())
-		return fcn;
-	    }
-	}
-      else
-	return octave_value ();
+      if (fcn.is_defined ())
+        return fcn;
     }
 
-  // Legacy dispatch.  We just check args_evaluated here because the
-  // actual evaluation will have happened already when searching for
-  // class methods.
+  // Legacy dispatch.  
 
-  if (args_evaluated && ! dispatch_map.empty ())
+  if (! args.empty () && ! dispatch_map.empty ())
     {
-      std::string dispatch_type = 
-        const_cast<const octave_value_list&>(evaluated_args)(0).type_name ();
+      std::string dispatch_type = args(0).type_name ();
 
       std::string fname;
 
       dispatch_map_iterator p = dispatch_map.find (dispatch_type);
 
       if (p == dispatch_map.end ())
 	p = dispatch_map.find ("any");
 
       if (p != dispatch_map.end ())
 	{
 	  fname = p->second;
 
 	  octave_value fcn
-	    = symbol_table::find_function (fname, evaluated_args);
+	    = symbol_table::find_function (fname, args);
 
 	  if (fcn.is_defined ())
 	    return fcn;
 	}
     }
 
   // Command-line function.
 
@@ -1075,51 +1027,44 @@ symbol_table::fcn_info::fcn_info_rep::du
       for (dispatch_map_const_iterator p = dispatch_map.begin ();
 	   p != dispatch_map.end (); p++)
 	os << tprefix << "dispatch: " << fcn_file_name (p->second)
 	   << " [" << p->first << "]\n";
     }
 }
 
 octave_value
-symbol_table::fcn_info::find (tree_argument_list *args,
-			      const string_vector& arg_names,
-			      octave_value_list& evaluated_args,
-			      bool& args_evaluated)
+symbol_table::fcn_info::find (const octave_value_list& args)
 {
-  return rep->find (args, arg_names, evaluated_args, args_evaluated);
+  return rep->find (args);
 }
 
 octave_value
-symbol_table::find (const std::string& name, tree_argument_list *args,
-		    const string_vector& arg_names,
-		    octave_value_list& evaluated_args, bool& args_evaluated,
-		    bool skip_variables)
+symbol_table::find (const std::string& name, 
+                    const octave_value_list& args, 
+                    bool skip_variables)
 {
   symbol_table *inst = get_instance (xcurrent_scope);
 
   return inst
-    ? inst->do_find (name, args, arg_names, evaluated_args,
-		     args_evaluated, skip_variables)
+    ? inst->do_find (name, args, skip_variables)
     : octave_value ();
 }
 
 octave_value
 symbol_table::builtin_find (const std::string& name)
 {
   symbol_table *inst = get_instance (xcurrent_scope);
 
   return inst ? inst->do_builtin_find (name) : octave_value ();
 }
 
 octave_value
-symbol_table::find_function (const std::string& name, tree_argument_list *args,
-			     const string_vector& arg_names,
-			     octave_value_list& evaluated_args,
-			     bool& args_evaluated)
+symbol_table::find_function (const std::string& name,
+                             const octave_value_list& args)
 {
   octave_value retval;
 
   if (! name.empty () && name[0] == '@')
     {
       // Look for a class specific function.
       std::string dispatch_type = 
 	name.substr (1, name.find_first_of (file_ops::dir_sep_str ()) - 1);
@@ -1130,37 +1075,34 @@ symbol_table::find_function (const std::
 
       retval = find_method (method, dispatch_type);
     }
   else
     {
       size_t pos = name.find_first_of (Vfilemarker);
 
       if (pos == std::string::npos)
-	retval = find (name, args, arg_names, evaluated_args,
-		       args_evaluated, true);
+	retval = find (name, args, true);
       else
 	{
 	  std::string fcn_scope = name.substr (0, pos);
 	  scope_id stored_scope = xcurrent_scope;
 	  xcurrent_scope = xtop_scope;
 	  octave_value parent = find_function (name.substr(0, pos));
 
 	  if (parent.is_defined ())
 	    {
 	      octave_function *parent_fcn = parent.function_value ();
 
 	      if (parent_fcn)
 		{
 		  xcurrent_scope = parent_fcn->scope ();
 
 		  if (xcurrent_scope > 1)
-		    retval = find_function (name.substr (pos + 1), args,
-					    arg_names, evaluated_args, 
-					    args_evaluated);
+		    retval = find_function (name.substr (pos + 1), args);
 		}
 	    }
 
 	  xcurrent_scope = stored_scope;
 	}
     }
 
   return retval;
@@ -1259,20 +1201,19 @@ symbol_table::stash_dir_name_for_subfunc
 
 	  if (f)
 	    f->stash_dir_name (dir_name);
 	}
     }
 }
 
 octave_value
-symbol_table::do_find (const std::string& name, tree_argument_list *args,
-		       const string_vector& arg_names,
-		       octave_value_list& evaluated_args,
-		       bool& args_evaluated, bool skip_variables)
+symbol_table::do_find (const std::string& name, 
+                       const octave_value_list& args,
+		       bool skip_variables)
 {
   octave_value retval;
 
   // Variable.
 
   if (! skip_variables)
     {
       table_iterator p = table.find (name);
@@ -1293,23 +1234,22 @@ symbol_table::do_find (const std::string
 		return val;
 	    }
 	}
     }
 
   fcn_table_iterator p = fcn_table.find (name);
 
   if (p != fcn_table.end ())
-    return p->second.find (args, arg_names, evaluated_args, args_evaluated);
+    return p->second.find (args);
   else
     {
       fcn_info finfo (name);
 
-      octave_value fcn = finfo.find (args, arg_names, evaluated_args,
-				     args_evaluated);
+      octave_value fcn = finfo.find (args);
 
       if (fcn.is_defined ())
 	fcn_table[name] = finfo;
 
       return fcn;
     }
 
   return retval;
diff --git a/src/symtab.h b/src/symtab.h
--- a/src/symtab.h
+++ b/src/symtab.h
@@ -419,19 +419,17 @@ public:
       if (--rep->count == 0)
 	delete rep;
     }
 
     symbol_record dup (void) const { return symbol_record (rep->dup ()); }
 
     std::string name (void) const { return rep->name; }
 
-    octave_value
-    find (tree_argument_list *args, const string_vector& arg_names,
-	  octave_value_list& evaluated_args, bool& args_evaluated) const;
+    octave_value find (const octave_value_list& args = octave_value_list ()) const;
 
     octave_value builtin_find (void) const;
 
     void force_variable (context_id context = xcurrent_context)
     {
       rep->force_variable (context);
     }
 
@@ -537,47 +535,34 @@ public:
 	  count (1) { }
 
       octave_value load_private_function (const std::string& dir_name);
 
       octave_value load_class_constructor (void);
 
       octave_value load_class_method (const std::string& dispatch_type);
 
-      octave_value
-      find (tree_argument_list *args, const string_vector& arg_names,
-	    octave_value_list& evaluated_args, bool& args_evaluated);
+      octave_value find (const octave_value_list& args = octave_value_list ());
 
       octave_value builtin_find (void);
 
       octave_value find_method (const std::string& dispatch_type);
 
       octave_value find_autoload (void);
 
       octave_value find_user_function (void);
 
       bool is_user_function_defined (void) const
       {
 	return function_on_path.is_defined ();
       }
 
-      octave_value find_function (void)
+      octave_value find_function (const octave_value_list& args = octave_value_list ())
       {
-	octave_value_list args;
-
-	return find_function (args);
-      }
-
-      octave_value find_function (const octave_value_list& args)
-      {
-	string_vector arg_names;
-	octave_value_list evaluated_args = args;
-	bool args_evaluated = false;
-
-	return find (0, arg_names, evaluated_args, args_evaluated);
+	return find (args);
       }
 
       void lock_subfunction (scope_id scope)
       {
 	scope_val_iterator p = subfunctions.find (scope);
 
 	if (p != subfunctions.end ())
 	  p->second.lock ();
@@ -730,19 +715,17 @@ public:
       octave_value function_on_path;
 
       octave_value built_in_function;
 
       size_t count;
 
     private:
 
-      octave_value
-      xfind (tree_argument_list *args, const string_vector& arg_names,
-	     octave_value_list& evaluated_args, bool& args_evaluated);
+      octave_value xfind (const octave_value_list& args);
 
       octave_value x_builtin_find (void);
 
       // No copying!
 
       fcn_info_rep (const fcn_info_rep&);
 
       fcn_info_rep& operator = (const fcn_info_rep&);
@@ -773,19 +756,17 @@ public:
     }
 
     ~fcn_info (void)
     {
       if (--rep->count == 0)
 	delete rep;
     }
 
-    octave_value
-    find (tree_argument_list *args, const string_vector& arg_names,
-	  octave_value_list& evaluated_args, bool& args_evaluated);
+    octave_value find (const octave_value_list& args);
 
     octave_value builtin_find (void)
     {
       return rep->builtin_find ();
     }
 
     octave_value find_method (const std::string& dispatch_type) const
     {
@@ -1047,19 +1028,18 @@ public:
 	  inst->do_inherit (*donor_symbol_table, donor_context);
       }
   }
 
   static bool at_top_level (void) { return xcurrent_scope == xtop_scope; }
 
   // Find a value corresponding to the given name in the table.
   static octave_value
-  find (const std::string& name, tree_argument_list *args,
-	const string_vector& arg_names,
-	octave_value_list& evaluated_args, bool& args_evaluated,
+  find (const std::string& name, 
+        const octave_value_list& args = octave_value_list (),
 	bool skip_variables = false);
 
   static octave_value builtin_find (const std::string& name);
 
   // Insert a new name in the table.
   static symbol_record& insert (const std::string& name)
   {
     static symbol_record foobar;
@@ -1188,45 +1168,27 @@ public:
   {
     fcn_table_iterator p = fcn_table.find (name);
 
     return (p != fcn_table.end ())
       ? p->second.find_autoload () : octave_value ();
   }
 
   static octave_value
-  find_function (const std::string& name, tree_argument_list *args,
-		 const string_vector& arg_names,
-		 octave_value_list& evaluated_args, bool& args_evaluated);
+  find_function (const std::string& name, 
+                 const octave_value_list& args = octave_value_list ());
 
   static octave_value find_user_function (const std::string& name)
   {
     fcn_table_iterator p = fcn_table.find (name);
 
     return (p != fcn_table.end ())
       ? p->second.find_user_function () : octave_value ();
   }
 
-  static octave_value find_function (const std::string& name)
-  {
-    octave_value_list evaluated_args;
-
-    return find_function (name, evaluated_args);
-  }
-
-  static octave_value
-  find_function (const std::string& name, const octave_value_list& args)
-  {
-    string_vector arg_names;
-    octave_value_list evaluated_args = args;
-    bool args_evaluated = ! args.empty ();
-
-    return find_function (name, 0, arg_names, evaluated_args, args_evaluated);
-  }
-
   static void install_cmdline_function (const std::string& name,
 					const octave_value& fcn)
   {
     fcn_table_iterator p = fcn_table.find (name);
 
     if (p != fcn_table.end ())
       {
 	fcn_info& finfo = p->second;
@@ -2007,20 +1969,18 @@ private:
 
   static fcn_info *get_fcn_info (const std::string& name)
     {
       fcn_table_iterator p = fcn_table.find (name);
       return p != fcn_table.end () ? &p->second : 0;
     }
 
   octave_value
-  do_find (const std::string& name, tree_argument_list *args,
-	   const string_vector& arg_names,
-	   octave_value_list& evaluated_args, bool& args_evaluated,
-	   bool skip_variables);
+  do_find (const std::string& name, const octave_value_list& args,
+           bool skip_variables);
 
   octave_value do_builtin_find (const std::string& name);
 
   symbol_record& do_insert (const std::string& name)
   {
     table_iterator p = table.find (name);
 
     return p == table.end ()
diff --git a/src/variables.cc b/src/variables.cc
--- a/src/variables.cc
+++ b/src/variables.cc
@@ -390,21 +390,17 @@ symbol_exist (const std::string& name, c
       struct_elts = name.substr (pos+1);
       symbol_name = name.substr (0, pos);
     }
 
   // We shouldn't need to look in the global symbol table, since any
   // name that is visible in the current scope will be in the local
   // symbol table.
 
-  octave_value_list evaluated_args;
-  bool args_evaluated = false;
-
-  octave_value val = symbol_table::find (symbol_name, 0, string_vector (),
-					 evaluated_args, args_evaluated);
+  octave_value val = symbol_table::find (symbol_name);
 
   if (val.is_defined ())
     {
       bool not_a_struct = struct_elts.empty ();
       bool var_ok = not_a_struct /* || val.is_map_element (struct_elts) */;
 
       if (! retval
 	  && var_ok
