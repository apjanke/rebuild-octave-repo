# HG changeset patch
# User jwe
# Date 1181881333 0
#      Fri Jun 15 04:22:13 2007 +0000
# Node ID 230f9c49857ef03d1bb9cb648054b4b695af2872
# Parent  9b4c16beea1c3685871430630b9a034352151d8e
[project @ 2007-06-15 04:22:13 by jwe]

diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,10 +1,16 @@
+2007-06-15  John W. Eaton  <jwe@octave.org>
+
+	* testfun/test.m: Also return number of expected failures.
+
 2007-06-14  John W. Eaton  <jwe@octave.org>
 
+	* set/ismember.m: Mark two tests known to fail with xtest.
+
 	* plot/__go_draw_axes__.m: Handle text rotation property.
 
 2007-06-14  Paul Kienzle  <pkienzle@users.sf.net>
 
 	* testfun/test.m: Add xtest support for tests known to fail.
 
 2007-06-14  Sebastian Schubert  <sebastian-schubert@gmx.de>
 
diff --git a/scripts/set/ismember.m b/scripts/set/ismember.m
--- a/scripts/set/ismember.m
+++ b/scripts/set/ismember.m
@@ -115,17 +115,17 @@ function c = ismember (a, S)
     endif
   endif
 
 endfunction
 
 %!assert (ismember ({''}, {'abc', 'def'}), false);
 %!assert (ismember ('abc', {'abc', 'def'}), true);
 %!assert (isempty (ismember ([], [1, 2])), true);
-%!assert (ismember ('', {'abc', 'def'}), false);
-%!fail ('ismember ([], {1, 2})', 'error:.*');
+%!xtest assert (ismember ('', {'abc', 'def'}), false);
+%!xtest fail ('ismember ([], {1, 2})', 'error:.*');
 %!fail ('ismember ({[]}, {1, 2})', 'error:.*');
 %!assert (ismember ({'foo', 'bar'}, {'foobar'}), logical ([0, 0]))
 %!assert (ismember ({'foo'}, {'foobar'}), false)
 %!assert (ismember ({'bar'}, {'foobar'}), false)
 %!assert (ismember ({'bar'}, {'foobar', 'bar'}), true)
 %!assert (ismember ({'foo', 'bar'}, {'foobar', 'bar'}), logical ([0, 1]))
 %!assert (ismember ({'xfb', 'f', 'b'}, {'fb', 'b'}), logical ([0, 0, 1]))
diff --git a/scripts/testfun/test.m b/scripts/testfun/test.m
--- a/scripts/testfun/test.m
+++ b/scripts/testfun/test.m
@@ -48,17 +48,17 @@
 ## can be written to the already open file defined by @var{fid}, and 
 ## hopefully when octave crashes this file will tell you what was happening
 ## when it did. You can use @code{stdout} if you want to see the results as
 ## they happen.  You can also give a file name rather than an @var{fid}, in
 ## which case the contents of the file will be replaced with the log from 
 ## the current test.
 ##
 ## Called with a single output argument @var{success}, @code{test} returns
-## true is all of the tests were successful. Called with two output arguments
+## true if all of the tests were successful. Called with two output arguments
 ## @var{n} and @var{max}, the number of sucessful test and the total number
 ## of tests in the file @var{name} are returned.
 ##
 ## If the second argument is the string 'grabdemo', the contents of the demo
 ## blocks are extracted but not executed. Code for all code blocks is
 ## concatented and returned as @var{code} with @var{idx} being a vector of
 ## positions of the ends of the demo blocks.
 ##
@@ -69,23 +69,25 @@
 
 ## TODO: * Consider using keyword fail rather then error?  This allows us
 ## TODO: to make a functional form of error blocks, which means we
 ## TODO: can include them in test sections which means that we can use
 ## TODO: octave flow control for both kinds of tests.
 
 ## PKG_ADD: mark_as_command test
 
-function [__ret1, __ret2] = test (__name, __flag, __fid)
+function [__ret1, __ret2, __ret3] = test (__name, __flag, __fid)
   ## information from test will be introduced by "key" 
   persistent __signal_fail =  "!!!!! ";
   persistent __signal_empty = "????? ";
   persistent __signal_block = "  ***** ";
   persistent __signal_file =  ">>>>> ";
 
+  __xfail = 0;
+
   if (nargin < 2 || isempty (__flag))
     __flag = "quiet";
   endif
   if (nargin < 3)
     __fid = []; 
   endif
   if (nargin < 1 || nargin > 3
       || (! ischar (__name) && ! isempty (__name)) || ! ischar (__flag))
@@ -294,17 +296,17 @@ function [__ret1, __ret2] = test (__name
 	__vars = __code;
 	__code = "";
       else
       	__vars = __code (1:__idx(1)-1);
       	__code = __code (__idx(1):length(__code));
       endif
       
       ## strip comments off the variables
-      __idx = find (__vars=="%" | __vars == "#");
+      __idx = find (__vars == "%" | __vars == "#");
       if (! isempty (__idx))
 	__vars = __vars(1:__idx(1)-1);
       endif
       
       ## assign default values to variables
       try
 	__vars = deblank (__vars);
 	if (! isempty (__vars))
@@ -433,16 +435,17 @@ function [__ret1, __ret2] = test (__name
     if (! isempty(__code))
       try
       	eval (sprintf ("function %s__test__(%s)\n%s\nendfunction",
 		       __shared_r,__shared, __code));
 	eval (sprintf ("%s__test__(%s);", __shared_r, __shared));
       catch
         if (strcmp (__type, "xtest"))
            __msg = sprintf ("%sknown failure\n%s", __signal_fail, __error_text__);
+	   __xfail++;
         else
            __msg = sprintf ("%stest failed\n%s", __signal_fail, __error_text__);
 	   __success = 0;
         endif
 	if (isempty (__error_text__))
 	  error ("empty error text, probably Ctrl-C --- aborting"); 
 	endif
       end_try_catch
@@ -479,25 +482,31 @@ function [__ret1, __ret2] = test (__name
       endif
     endif
     __tests += __istest;
     __successes += __success * __istest;
   endfor
   eval (__clear, "");
 
   if (nargout == 0)
-    printf ("PASSES %d out of %d tests\n", __successes, __tests);
+    if (__xfail)
+      printf ("PASSES %d out of %d tests (%d expected failures)\n",
+	      __successes, __tests, __xfail);
+    else
+      printf ("PASSES %d out of %d tests\n", __successes, __tests);
+    endif
   elseif (__grabdemo)
     __ret1 = __demo_code;
     __ret2 = __demo_idx;
   elseif (nargout == 1)
     __ret1 = __all_success; 
   else
     __ret1 = __successes;
     __ret2 = __tests;
+    __ret3 = __xfail;
   endif
 endfunction
 
 ## create structure with fieldnames the name of the input variables
 function s = varstruct (varargin)
   for i = 1:nargin
     s.(deblank (argn(i,:))) = varargin{i};
   endfor
diff --git a/test/ChangeLog b/test/ChangeLog
--- a/test/ChangeLog
+++ b/test/ChangeLog
@@ -1,8 +1,12 @@
+2007-06-15  John W. Eaton  <jwe@octave.org>
+
+	* fntests.m: Also report expected failures in summary.
+
 2007-06-06  John W. Eaton  <jwe@octave.org>
 
 	* test_signal.m: Rename internal assert function to xassert.
 
 2007-04-26  David Bateman  <dbateman@free.fr>
 
 	* test_for.m: Add tests for multi-dimensional matrices and cell
 	arrays.
diff --git a/test/fntests.m b/test/fntests.m
--- a/test/fntests.m
+++ b/test/fntests.m
@@ -53,72 +53,75 @@ endfunction
 function y = hastests (f)
   fid = fopen (f);
   str = fscanf (fid, "%s");
   fclose (fid);
   y = (findstr (str, "%!test") || findstr (str, "%!assert")
        || findstr (str, "%!error") || findstr (str, "%!warning"));
 endfunction
 
-function [dp, dn] = run_test_dir (fid, d);
+function [dp, dn, dxf] = run_test_dir (fid, d);
   global files_with_tests;
   global files_with_no_tests;
   lst = dir (d);
-  dp = dn = 0;
+  dp = dn = dxf = 0;
   for i = 1:length (lst)
     nm = lst(i).name;
     if (length (nm) > 5 && strcmp (nm(1:5), "test_")
 	&& strcmp (nm((end-1):end), ".m"))
       p = n = 0;
       ffnm = fullfile (d, nm);
       if (hastests (ffnm))
 	print_test_file_name (nm);
-	[p, n] = test (nm(1:(end-2)), "quiet", fid);
+	[p, n, xf] = test (nm(1:(end-2)), "quiet", fid);
 	print_pass_fail (n, p);
 	files_with_tests(end+1) = ffnm;
       else
 	files_with_no_tests(end+1) = ffnm;
       endif
       dp += p;
       dn += n;
+      dxf += xf;
     endif
   endfor
 endfunction
 
-function [dp, dn] = run_test_script (fid, d);
+function [dp, dn, dxf] = run_test_script (fid, d);
   global files_with_tests;
   global files_with_no_tests;
   global topsrcdir;
   global topbuilddir;
   lst = dir (d);
-  dp = dn = 0;
+  dp = dn = dxf = 0;
   for i = 1:length (lst)
     nm = lst(i).name;
     if (lst(i).isdir && ! strcmp (nm, ".") && ! strcmp (nm, "..")
 	&& ! strcmp (nm, "CVS"))
-      [p, n] = run_test_script (fid, [d, "/", nm]);
+      [p, n, xf] = run_test_script (fid, [d, "/", nm]);
       dp += p;
       dn += n;
+      dxf += xf;
     endif
   endfor
   for i = 1:length (lst)
     nm = lst(i).name;
     if ((length (nm) > 3 && strcmp (nm((end-2):end), ".cc"))
 	|| (length (nm) > 2 && strcmp (nm((end-1):end), ".m")))
       f = fullfile (d, nm);
-      p = n = 0;
+      p = n = xf = 0;
       ## Only run if it contains %!test, %!assert %!error or %!warning
       if (hastests (f))
 	tmp = strrep (f, [topsrcdir, "/"], "");
 	tmp = strrep (tmp, [topbuilddir, "/"], "../");
 	print_test_file_name (tmp);
-	[p, n] = test (f, "quiet", fid);
+	[p, n, xf] = test (f, "quiet", fid);
 	print_pass_fail (n, p);
 	dp += p;
 	dn += n;
+	dxf += xf;
 	files_with_tests(end+1) = f;
       else
 	files_with_no_tests(end+1) = f;
       endif
     endif
   endfor 
   ##  printf("%s%s -> passes %d of %d tests\n", ident, d, dp, dn);
 endfunction
@@ -145,32 +148,38 @@ warn_state = warning ("query", "quiet");
 warning ("on", "quiet");
 try
   page_screen_output (0);
   fid = fopen ("fntests.log", "wt");
   if (fid < 0)
     error ("could not open fntests.log for writing");
   endif
   test ("", "explain", fid);
-  dp = dn = 0;
+  dp = dn = dxf = 0;
   printf ("\nIntegrated test scripts:\n\n");
   for i = 1:length (fundirs)
-    [p, n] = run_test_script (fid, fundirs{i});
+    [p, n, xf] = run_test_script (fid, fundirs{i});
     dp += p;
     dn += n;
+    dxf += xf;
   endfor
   printf ("\nFixed test scripts:\n\n");
   for i = 1:length (testdirs)
-    [p, n] = run_test_dir (fid, testdirs{i});
+    [p, n, xf] = run_test_dir (fid, testdirs{i});
     dp += p;
     dn += n;
+    dxf += xf;
   endfor
   printf ("\nSummary:\n\n  PASS %6d\n", dp);
   nfail = dn - dp;
   printf ("  FAIL %6d\n", nfail);
+  if (dxf > 0)
+    printf ("\nThere were %d expected failures (see fntests.log for details).\n",
+	    dxf);
+  endif
   n_files_with_no_tests = length (files_with_no_tests);
   n_files = n_files_with_no_tests + length (files_with_tests);
   printf ("\n%d (of %d) files have no tests.  Please help improve Octave by\n",
 	  n_files_with_no_tests, n_files);
   printf ("contributing tests for these files (see the list in the file fntests.log).\n");
   fprintf (fid, "\nFiles with no tests:\n\n%s",
 	  list_in_columns (files_with_no_tests, 80));
   fclose (fid);
