# HG changeset patch
# User Rik <octave@nomad.inbox5.com>
# Date 1296184351 28800
#      Thu Jan 27 19:12:31 2011 -0800
# Node ID 87926ee2358178c3be4e28717e441dd8ff9e5ac5
# Parent  75f12ba604b4b28ba41ecd8027a7d2ba4e9aedef
Add undocumented function trisurf to manual.

diff --git a/doc/ChangeLog b/doc/ChangeLog
--- a/doc/ChangeLog
+++ b/doc/ChangeLog
@@ -1,8 +1,12 @@
+2011-01-27  Rik  <octave@nomad.inbox5.com>
+
+	* interpreter/geometry.txi: Add trisurf to documentation.
+
 2011-01-27  John W. Eaton  <jwe@octave.org>
 
 	* interpreter/arith.txi (Rational Approximations): Move here.
 	Update menu.
 	* interpreter/io.txi: From here.
 	Update menu.
 	* interpreter/octave.texi (Top): Update detailed menu.
 
diff --git a/doc/interpreter/geometry.txi b/doc/interpreter/geometry.txi
--- a/doc/interpreter/geometry.txi
+++ b/doc/interpreter/geometry.txi
@@ -89,40 +89,42 @@ The result of which can be seen in @ref{
 @menu
 * Plotting the Triangulation::
 * Identifying Points in Triangulation::
 @end menu
 
 @node Plotting the Triangulation
 @subsection Plotting the Triangulation
 
-Octave has the functions @code{triplot} and @code{trimesh} to plot the
-Delaunay triangulation of a 2-dimensional set of points.
+Octave has the functions @code{triplot}, @code{trimesh}, and @code{trisurf}
+to plot the Delaunay triangulation of a 2-dimensional set of points.
 
 @DOCSTRING(triplot)
 
 @DOCSTRING(trimesh)
 
-The difference between @code{triplot} and @code{trimesh} is that the
-former only plots the 2-dimensional triangulation itself, whereas the
-second plots the value of some function @code{f (@var{x}, @var{y})}.
-An example of the use of the @code{triplot} function is
+@DOCSTRING(trisurf)
+
+The difference between @code{triplot}, and @code{trimesh} or @code{triplot},
+is that the former only plots the 2-dimensional triangulation itself, whereas
+the second two plot the value of a function @code{f (@var{x}, @var{y})}.  An
+example of the use of the @code{triplot} function is
 
 @example
 @group
 rand ("state", 2)
 x = rand (20, 1);
 y = rand (20, 1);
 tri = delaunay (x, y);
 triplot (tri, x, y);
 @end group
 @end example
 
 @noindent
-that plot the Delaunay triangulation of a set of random points in
+which plots the Delaunay triangulation of a set of random points in
 2-dimensions.
 @ifnotinfo
 The output of the above can be seen in @ref{fig:triplot}.
 
 @float Figure,fig:triplot
 @center @image{triplot,4in}
 @caption{Delaunay triangulation of a random set of points}
 @end float
diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,8 +1,14 @@
+2011-01-27  Rik  <octave@nomad.inbox5.com>
+
+	* geometry/trimesh.m, geometry/triplot.m, geometry/trisurf.m: Add
+	undocumented function trisurf to documentation.  Update seealso
+	strings.
+
 2011-01-27  John W. Eaton  <jwe@octave.org>
 
 	* general/rat.m: Move @seealso inside @deftypefn in docstring.
 
 2011-01-27  Kai Habel  <kai.habel@gmx.de>
 
 	* plot/uigetfile.m, plot/uiputfile.m, plot/uigetdir.m: Check
 	for __fltk_uigetfile__.
diff --git a/scripts/geometry/trimesh.m b/scripts/geometry/trimesh.m
--- a/scripts/geometry/trimesh.m
+++ b/scripts/geometry/trimesh.m
@@ -18,18 +18,18 @@
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {} trimesh (@var{tri}, @var{x}, @var{y}, @var{z})
 ## @deftypefnx {Function File} {@var{h} =} trimesh (@dots{})
 ## Plot a triangular mesh in 3D@.  The variable @var{tri} is the triangular
 ## meshing of the points @code{(@var{x}, @var{y})} which is returned
 ## from @code{delaunay}.  The variable @var{z} is value at the point
 ## @code{(@var{x}, @var{y})}.  The output argument @var{h} is the graphic
-## handle to the plot.
-## @seealso{triplot, delaunay3}
+## handle of the plot.
+## @seealso{triplot, trisurf, delaunay3}
 ## @end deftypefn
 
 function h = trimesh (tri, x, y, z, varargin)
 
   if (nargin < 3)
     print_usage ();
   endif
 
diff --git a/scripts/geometry/triplot.m b/scripts/geometry/triplot.m
--- a/scripts/geometry/triplot.m
+++ b/scripts/geometry/triplot.m
@@ -19,18 +19,18 @@
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {} triplot (@var{tri}, @var{x}, @var{y})
 ## @deftypefnx {Function File} {} triplot (@var{tri}, @var{x}, @var{y}, @var{linespec})
 ## @deftypefnx {Function File} {@var{h} =} triplot (@dots{})
 ## Plot a triangular mesh in 2D@.  The variable @var{tri} is the triangular
 ## meshing of the points @code{(@var{x}, @var{y})} which is returned from
 ## @code{delaunay}.  If given, the @var{linespec} determines the properties
 ## to use for the lines.  The output argument @var{h} is the graphic handle
-## to the plot.
-## @seealso{plot, trimesh, delaunay}
+## of the plot.
+## @seealso{plot, trimesh, trisurf, delaunay}
 ## @end deftypefn
 
 function h = triplot (tri, x, y, varargin)
 
   if (nargin < 3)
     print_usage ();
   endif
 
diff --git a/scripts/geometry/trisurf.m b/scripts/geometry/trisurf.m
--- a/scripts/geometry/trisurf.m
+++ b/scripts/geometry/trisurf.m
@@ -18,18 +18,18 @@
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {} trisurf (@var{tri}, @var{x}, @var{y}, @var{z})
 ## @deftypefnx {Function File} {@var{h} =} trisurf (@dots{})
 ## Plot a triangular surface in 3D@.  The variable @var{tri} is the triangular
 ## meshing of the points @code{(@var{x}, @var{y})} which is returned
 ## from @code{delaunay}.  The variable @var{z} is value at the point
 ## @code{(@var{x}, @var{y})}.  The output argument @var{h} is the graphic
-## handle to the plot.
-## @seealso{triplot, delaunay3}
+## handle of the plot.
+## @seealso{triplot, trimesh, delaunay3}
 ## @end deftypefn
 
 function h = trisurf (tri, x, y, z, varargin)
 
   if (nargin < 3)
     print_usage ();
   endif
 
