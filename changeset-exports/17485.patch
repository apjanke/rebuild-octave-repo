# HG changeset patch
# User Rik <rik@octave.org>
# Date 1380131178 25200
#      Wed Sep 25 10:46:18 2013 -0700
# Node ID edd15fceff14e35962b4fd327520aeda3ae4013c
# Parent  995decfed6cc58a968ffb5372b5e7b3e15f634ac
guihandles.m: Overhaul function.

* scripts/plot/guihandles.m: Add docstring which was missing.  Match function
variables to docstring.  Put input validation first.

diff --git a/scripts/plot/guihandles.m b/scripts/plot/guihandles.m
--- a/scripts/plot/guihandles.m
+++ b/scripts/plot/guihandles.m
@@ -12,47 +12,54 @@
 ## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
-## @deftypefn  {Function File} {@var{hdata} =} guihandles (@var{handle})
+## @deftypefn  {Function File} {@var{hdata} =} guihandles (@var{h})
 ## @deftypefnx {Function File} {@var{hdata} =} guihandles
+## Return a structure of object handles for the figure associated with
+## handle @var{h}.
+## 
+## If no handle is specified the current figure returned by @code{gcf} is used.
 ##
-## @seealso{guidata, getappdata, setappdata}
+## The fieldname for each entry of @var{hdata} is taken from the @qcode{"tag"}
+## property of the graphic object.  If the tag is empty then the handle is not
+## returned.  If there are multiple graphic objects with the same tag then
+## the entry in @var{hdata} will be a vector of handles.  @code{guihandles}
+## includes all possible handles, including those for
+## which @qcode{"HandleVisibility"} is @qcode{"off"}.
+## @seealso{guidata, findobj, findall, allchild}
 ## @end deftypefn
 
 ## Author: goffioul
 
-function hdata = guihandles (varargin)
-
-  hdata = [];
+function hdata = guihandles (h)
 
-  if (nargin == 0 || nargin == 1)
-    if (nargin == 1)
-      h = varargin{1};
-      if (ishandle (h))
-        h = ancestor (h, "figure");
-        if (isempty (h))
-          error ("no ancestor figure found");
-        endif
-      else
-        error ("invalid object handle");
-      endif
-    else
-      h = gcf ();
-    endif
-    hdata = __make_guihandles_struct__ (h, hdata);
-  else
+  if (nargin > 2)
     print_usage ();
   endif
 
+  if (nargin == 1)
+    if (! ishandle (h))
+      error ("guidata: H must be a valid object handle");
+    endif
+    h = ancestor (h, "figure");
+    if (isempty (h))
+      error ("guidata: no ancestor figure of H found");
+    endif
+  else
+    h = gcf ();
+  endif
+
+  hdata = __make_guihandles_struct__ (h, []);
+
 endfunction
 
 function hdata = __make_guihandles_struct__ (h, hdata)
 
   tag = get (h, "tag");
   if (! isempty (tag))
     if (isfield (hdata, tag))
       hdata.(tag) = [hdata.(tag), h];
@@ -60,14 +67,14 @@ function hdata = __make_guihandles_struc
       try
         hdata.(tag) = h;
       catch
       end_try_catch
     endif
   endif
 
   kids = allchild (h);
-  for i = 1 : length (kids)
-    hdata = __make_guihandles_struct__ (kids(i), hdata);
+  for hkid = kids'
+    hdata = __make_guihandles_struct__ (hkid, hdata);
   endfor
 
 endfunction
 
