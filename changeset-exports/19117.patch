# HG changeset patch
# User Rik <rik@octave.org>
# Date 1411269641 25200
#      Sat Sep 20 20:20:41 2014 -0700
# Node ID a4c226a963c5c490e90512ae743dffb419ceb42b
# Parent  d657ed3f5f2554740445c1b6cbba0f5f19422e84
Deprecate finite in favor of isfinite.

* NEWS: Announce change.

* mappers.cc: Remove DEFALIAS of finite to isfinite.  Replace finite with
isfinite in %!tests.

* scripts/deprecated/finite.m: New m-file script to replace C++ DEFALIAS.

* scripts/deprecated/module.mk: Add finite.m to build system.

* cosd.m, sind.m, tand.m, nthroot.m: Replace occurrences of finite with
isfinite in core m-files.

diff --git a/NEWS b/NEWS
--- a/NEWS
+++ b/NEWS
@@ -89,19 +89,20 @@ Summary of important user-visible change
     The following functions have been deprecated in Octave 4.2 and will
     be removed from Octave 4.6 (or whatever version is the second major
     release after 4.2):
 
       Function           | Replacement
       -------------------|------------------
       bicubic            | interp2
       find_dir_in_path   | dir_in_loadpath
+      finite             | isfinite
       nfields            | numfields
+      syl                | sylvester
       usage              | print_usage
-      syl                | sylvester
 
     The following functions were deprecated in Octave 3.8 and have been
     removed from Octave 4.2.
 
       default_save_options    java_new
       gen_doc_cache           java_unsigned_conversion
       interp1q                javafields
       isequalwithequalnans    javamethods
diff --git a/libinterp/corefcn/mappers.cc b/libinterp/corefcn/mappers.cc
--- a/libinterp/corefcn/mappers.cc
+++ b/libinterp/corefcn/mappers.cc
@@ -890,51 +890,51 @@ accurately in the neighborhood of zero.\
 %!assert (expm1 (single ([Inf, -Inf, NaN])), single ([Inf -1 NaN]))
 
 %!error expm1 ()
 %!error expm1 (1, 2)
 */
 
 DEFUN (isfinite, args, ,
        "-*- texinfo -*-\n\
-@deftypefn  {Mapping Function} {} isfinite (@var{x})\n\
-@deftypefnx {Mapping Function} {} finite (@var{x})\n\
+@deftypefn {Mapping Function} {} isfinite (@var{x})\n\
 Return a logical array which is true where the elements of @var{x} are\n\
 finite values and false where they are not.\n\
+\n\
 For example:\n\
 \n\
 @example\n\
 @group\n\
-finite ([13, Inf, NA, NaN])\n\
+isfinite ([13, Inf, NA, NaN])\n\
      @result{} [ 1, 0, 0, 0 ]\n\
 @end group\n\
 @end example\n\
 @seealso{isinf, isnan, isna}\n\
 @end deftypefn")
 {
   octave_value retval;
   if (args.length () == 1)
     retval = args(0).finite ();
   else
     print_usage ();
 
   return retval;
 }
 
 /*
-%!assert (!finite (Inf))
-%!assert (!finite (NaN))
-%!assert (finite (rand (1,10)))
+%!assert (!isfinite (Inf))
+%!assert (!isfinite (NaN))
+%!assert (isfinite (rand (1,10)))
 
-%!assert (!finite (single (Inf)))
-%!assert (!finite (single (NaN)))
-%!assert (finite (single (rand (1,10))))
+%!assert (!isfinite (single (Inf)))
+%!assert (!isfinite (single (NaN)))
+%!assert (isfinite (single (rand (1,10))))
 
-%!error finite ()
-%!error finite (1, 2)
+%!error isfinite ()
+%!error isfinite (1, 2)
 */
 
 DEFUN (fix, args, ,
        "-*- texinfo -*-\n\
 @deftypefn {Mapping Function} {} fix (@var{x})\n\
 Truncate fractional portion of @var{x} and return the integer portion.  This\n\
 is equivalent to rounding towards zero.  If @var{x} is complex, return\n\
 @code{fix (real (@var{x})) + fix (imag (@var{x})) * I}.\n\
@@ -2238,9 +2238,8 @@ DEFALIAS (upper, toupper);
 
 %!error <Invalid call to toupper> toupper ()
 %!error <Invalid call to toupper> upper ()
 %!error toupper (1, 2)
 */
 
 DEFALIAS (gammaln, lgamma);
 
-DEFALIAS (finite, isfinite);
diff --git a/scripts/deprecated/finite.m b/scripts/deprecated/finite.m
new file mode 100644
--- /dev/null
+++ b/scripts/deprecated/finite.m
@@ -0,0 +1,52 @@
+## Copyright (C) 2014 John W. Eaton
+##
+## This file is part of Octave.
+##
+## Octave is free software; you can redistribute it and/or modify it
+## under the terms of the GNU General Public License as published by
+## the Free Software Foundation; either version 3 of the License, or (at
+## your option) any later version.
+##
+## Octave is distributed in the hope that it will be useful, but
+## WITHOUT ANY WARRANTY; without even the implied warranty of
+## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+## General Public License for more details.
+##
+## You should have received a copy of the GNU General Public License
+## along with Octave; see the file COPYING.  If not, see
+## <http://www.gnu.org/licenses/>.
+
+## -*- texinfo -*-
+## @deftypefn {Mapping Function} {} finite (@var{x})
+##
+## @code{finite} is deprecated and will be removed in Octave version 4.6.
+## Please use @code{isfinite} in all new code.
+##
+## Return a logical array which is true where the elements of @var{x} are
+## finite values and false where they are not.
+## For example:
+## 
+## @example
+## @group
+## finite ([13, Inf, NA, NaN])
+##      @result{} [ 1, 0, 0, 0 ]
+## @end group
+## @end example
+## @seealso{isfinite, isinf, isnan, isna}
+## @end deftypefn
+
+## Deprecated in version 4.2
+
+function retval = finite (varargin)
+
+  persistent warned = false;
+  if (! warned)
+    warned = true;
+    warning ("Octave:deprecated-function",
+             "finite is obsolete and will be removed from a future version of Octave, please use isfinite instead");
+  endif
+
+  retval = isfinite (varargin{:});
+
+endfunction
+
diff --git a/scripts/deprecated/module.mk b/scripts/deprecated/module.mk
--- a/scripts/deprecated/module.mk
+++ b/scripts/deprecated/module.mk
@@ -1,13 +1,14 @@
 FCN_FILE_DIRS += deprecated
 
 deprecated_FCN_FILES = \
   deprecated/bicubic.m \
   deprecated/find_dir_in_path.m \
+  deprecated/finite.m \
   deprecated/isstr.m \
   deprecated/nfields.m \
   deprecated/strmatch.m \
   deprecated/syl.m \
   deprecated/usage.m
 
 FCN_FILES += $(deprecated_FCN_FILES)
 
diff --git a/scripts/elfun/cosd.m b/scripts/elfun/cosd.m
--- a/scripts/elfun/cosd.m
+++ b/scripts/elfun/cosd.m
@@ -29,17 +29,17 @@ function y = cosd (x)
 
   if (nargin != 1)
     print_usage ();
   endif
 
   I = x / 180;
   y = cos (I .* pi);
   I = I + 0.5;
-  y(I == fix (I) & finite (I)) = 0;
+  y(I == fix (I) & isfinite (I)) = 0;
 
 endfunction
 
 
 %!assert (cosd (0:10:80), cos (pi*[0:10:80]/180), -10*eps)
 %!assert (cosd ([0, 180, 360]) != 0)
 %!assert (cosd ([90, 270]) == 0)
 
diff --git a/scripts/elfun/sind.m b/scripts/elfun/sind.m
--- a/scripts/elfun/sind.m
+++ b/scripts/elfun/sind.m
@@ -28,17 +28,17 @@
 function y = sind (x)
 
   if (nargin != 1)
     print_usage ();
   endif
 
   I = x / 180;
   y = sin (I .* pi);
-  y(I == fix (I) & finite (I)) = 0;
+  y(I == fix (I) & isfinite (I)) = 0;
 
 endfunction
 
 
 %!assert (sind (10:10:90), sin (pi*[10:10:90]/180), -10*eps)
 %!assert (sind ([0, 180, 360]) == 0)
 %!assert (sind ([90, 270]) != 0)
 
diff --git a/scripts/elfun/tand.m b/scripts/elfun/tand.m
--- a/scripts/elfun/tand.m
+++ b/scripts/elfun/tand.m
@@ -30,18 +30,18 @@ function y = tand (x)
 
   if (nargin != 1)
     print_usage ();
   endif
 
   I0 = x / 180;
   I90 = (x-90) / 180;
   y = tan (I0 .* pi);
-  y(I0 == fix (I0) & finite (I0)) = 0;
-  y(I90 == fix (I90) & finite (I90)) = Inf;
+  y(I0 == fix (I0) & isfinite (I0)) = 0;
+  y(I90 == fix (I90) & isfinite (I90)) = Inf;
 
 endfunction
 
 
 %!assert (tand (10:10:80), tan (pi*[10:10:80]/180), -10*eps)
 %!assert (tand ([0, 180, 360]) == 0)
 %!assert (tand ([90, 270]) == Inf)
 
diff --git a/scripts/specfun/nthroot.m b/scripts/specfun/nthroot.m
--- a/scripts/specfun/nthroot.m
+++ b/scripts/specfun/nthroot.m
@@ -68,20 +68,20 @@ function y = nthroot (x, n)
     if (integer_n && mod (n, 2) == 1)
       y = abs (x) .^ (1/n) .* sign (x);
     elseif (any (x(:) < 0))
       error ("nthroot: N must be an odd integer if X contains negative values");
     else
       y = x .^ (1/n);
     endif
 
-    if (integer_n && n > 0 && finite (n))
+    if (integer_n && n > 0 && isfinite (n))
       ## FIXME: What is this correction for?
       y = ((n-1)*y + x ./ (y.^(n-1))) / n;
-      y = merge (finite (y), y, x);
+      y = merge (isfinite (y), y, x);
     endif
 
   endif
 
 endfunction
 
 
 %!assert (nthroot (-32, 5), -2)
