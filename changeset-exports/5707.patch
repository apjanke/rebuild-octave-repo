# HG changeset patch
# User jwe
# Date 1143004049 0
#      Wed Mar 22 05:07:29 2006 +0000
# Node ID 6286c96121c2e41d3471e9a5519c002cdf0a4f0e
# Parent  5b9b492f9e98903ee66b062d82e34f391920fc68
[project @ 2006-03-22 05:07:28 by jwe]

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,14 +1,24 @@
 2006-03-21  John W. Eaton  <jwe@octave.org>
 
 	* version.h (OCTAVE_VERSION): Now 2.9.5.
 	(OCTAVE_API_VERSION): Now api-v18.
 	(OCTAVE_RELEASE_DATE): Now 2006-03-20.
 
+	* ov-cell.h (octave_cell::convert_to_str_internal):
+	Ignore pad and force args.
+	* ov-cell.cc (octave_cell::all_strings): Delete args.  Never pad.
+	* ov-base.cc (octave_base_value::all_strings): Delete args.
+	Always force string conversion, never pad.
+	* ov-str-mat.cc (octave_char_matrix_str::all_strings):
+	Delete args.  Don't strip whitespace.
+	* ov.h, ov-base.h, ov-cell.h, ov-str-mat.h: Fix all_strings decls.
+	* strfns.cc (Fchar): No args for all_strings.
+
 2006-03-21  David bateman  <dbateman@free.fr>
 
 	* DLD-FUNCTIONS/getrusage.cc (Fgetrusage): Use GetProcessTimes for
 	MinGW to obtain user and system times.
 
 2006-03-17  John W. Eaton  <jwe@octave.org>
 
 	* strfns.cc (F__list_in_columns__): New function.
diff --git a/src/ov-base.cc b/src/ov-base.cc
--- a/src/ov-base.cc
+++ b/src/ov-base.cc
@@ -592,21 +592,21 @@ octave_base_value::uint64_array_value (v
 {
   uint64NDArray retval;
   gripe_wrong_type_arg ("octave_base_value::uint64_array_value()",
 			type_name ());
   return retval;
 }
 
 string_vector
-octave_base_value::all_strings (bool pad, bool force) const
+octave_base_value::all_strings (void) const
 {
   string_vector retval;
 
-  octave_value tmp = convert_to_str (pad, force);
+  octave_value tmp = convert_to_str (false, true);
 
   if (! error_state)
     retval = tmp.all_strings ();
 
   return retval;
 }
 
 std::string
diff --git a/src/ov-base.h b/src/ov-base.h
--- a/src/ov-base.h
+++ b/src/ov-base.h
@@ -260,17 +260,17 @@ public:
   uint8NDArray uint8_array_value (void) const;
 
   uint16NDArray uint16_array_value (void) const;
 
   uint32NDArray uint32_array_value (void) const;
 
   uint64NDArray uint64_array_value (void) const;
 
-  string_vector all_strings (bool pad = false, bool force = false) const;
+  string_vector all_strings (void) const;
 
   std::string string_value (bool force = false) const;
 
   Range range_value (void) const;
 
   Octave_map map_value (void) const;
 
   string_vector map_keys (void) const;
diff --git a/src/ov-cell.cc b/src/ov-cell.cc
--- a/src/ov-cell.cc
+++ b/src/ov-cell.cc
@@ -286,17 +286,17 @@ octave_cell::list_value (void) const
     }
   else
     error ("invalid conversion from cell array to list");
 
   return retval;
 }
 
 string_vector
-octave_cell::all_strings (bool pad, bool) const
+octave_cell::all_strings (void) const
 {
   string_vector retval;
 
   octave_idx_type nr = rows ();
   octave_idx_type nc = columns ();
 
   int n_elts = 0;
 
@@ -328,25 +328,17 @@ octave_cell::all_strings (bool pad, bool
     {
       for (octave_idx_type i = 0; i < nr; i++)
 	{
 	  string_vector s = matrix(i,j).all_strings ();
 
 	  int n = s.length ();
 
 	  for (octave_idx_type ii = 0; ii < n; ii++)
-	    {
-	      std::string t = s[ii];
-	      int t_len = t.length ();
-
-	      if (pad && max_len > t_len)
-		t += std::string (max_len - t_len, ' ');
-
-	      retval[k++] = t;
-	    }
+	    retval[k++] = s[ii];
 	}
     }
 
   return retval;
 }
 
 bool
 octave_cell::print_as_scalar (void) const
diff --git a/src/ov-cell.h b/src/ov-cell.h
--- a/src/ov-cell.h
+++ b/src/ov-cell.h
@@ -96,20 +96,20 @@ public:
   bool is_constant (void) const { return false; }
 
   bool is_cell (void) const { return true; }
 
   Cell cell_value (void) const { return matrix; }
 
   octave_value_list list_value (void) const;
 
-  octave_value convert_to_str_internal (bool pad, bool force, char type) const
-    { return octave_value (all_strings (pad, force), type); }
+  octave_value convert_to_str_internal (bool, bool, char type) const
+    { return octave_value (all_strings (), type); }
 
-  string_vector all_strings (bool pad = false, bool force = false) const;
+  string_vector all_strings (void) const;
 
   bool print_as_scalar (void) const;
 
   void print (std::ostream& os, bool pr_as_read_syntax = false) const;
 
   void print_raw (std::ostream& os, bool pr_as_read_syntax = false) const;
 
 
diff --git a/src/ov-str-mat.cc b/src/ov-str-mat.cc
--- a/src/ov-str-mat.cc
+++ b/src/ov-str-mat.cc
@@ -205,30 +205,30 @@ octave_char_matrix_str::array_value (boo
 ComplexNDArray
 octave_char_matrix_str::complex_array_value (bool force_string_conv) const
 {
   CHAR_MATRIX_CONV (ComplexNDArray, , "complex N-d array",
 		    complex_array_value);
 }
 
 string_vector
-octave_char_matrix_str::all_strings (bool, bool) const
+octave_char_matrix_str::all_strings (void) const
 {
   string_vector retval;
 
   if (matrix.ndims () == 2)
     {
       charMatrix chm = matrix.matrix_value ();
 
       octave_idx_type n = chm.rows ();
 
       retval.resize (n);
 
       for (octave_idx_type i = 0; i < n; i++)
-	retval[i] = chm.row_as_string (i, true);
+	retval[i] = chm.row_as_string (i);
     }
   else
     error ("invalid conversion of charNDArray to string_vector");
 
   return retval;
 }
 
 std::string
diff --git a/src/ov-str-mat.h b/src/ov-str-mat.h
--- a/src/ov-str-mat.h
+++ b/src/ov-str-mat.h
@@ -120,17 +120,17 @@ public:
   NDArray array_value (bool = false) const;
 
   Complex complex_value (bool = false) const;
 
   ComplexMatrix complex_matrix_value (bool = false) const;
 
   ComplexNDArray complex_array_value (bool = false) const;
 
-  string_vector all_strings (bool pad = false, bool force = false) const;
+  string_vector all_strings (void) const;
 
   std::string string_value (bool force = false) const;
 
   bool print_as_scalar (void) const { return (rows () <= 1); }
 
   void print_raw (std::ostream& os, bool pr_as_read_syntax = false) const;
 
   bool save_ascii (std::ostream& os, bool& infnan_warned,
diff --git a/src/ov.h b/src/ov.h
--- a/src/ov.h
+++ b/src/ov.h
@@ -646,19 +646,18 @@ public:
     { return rep->uint16_array_value (); }
 
   virtual uint32NDArray uint32_array_value (void) const
     { return rep->uint32_array_value (); }
 
   virtual uint64NDArray uint64_array_value (void) const
     { return rep->uint64_array_value (); }
 
-  virtual string_vector all_strings (bool pad = false,
-				     bool force = false) const
-    { return rep->all_strings (pad, force); }
+  virtual string_vector all_strings (void) const
+    { return rep->all_strings (); }
 
   virtual std::string string_value (bool force = false) const
     { return rep->string_value (force); }
 
   virtual Range range_value (void) const
     { return rep->range_value (); }
 
   virtual Octave_map map_value (void) const;
diff --git a/src/strfns.cc b/src/strfns.cc
--- a/src/strfns.cc
+++ b/src/strfns.cc
@@ -75,17 +75,17 @@ of the string array have the same length
   else if (nargin > 1)
     {
       int n_elts = 0;
 
       int max_len = 0;
 
       for (int i = 0; i < nargin; i++)
 	{
-	  string_vector s = args(i).all_strings (false, true);
+	  string_vector s = args(i).all_strings ();
 
 	  if (error_state)
 	    {
 	      error ("char: unable to convert some args to strings");
 	      return retval;
 	    }
 
 	  n_elts += s.length ();
@@ -97,17 +97,17 @@ of the string array have the same length
 	}
 
       string_vector result (n_elts);
 
       int k = 0;
 
       for (int i = 0; i < nargin; i++)
 	{
-	  string_vector s = args(i).all_strings (false, true);
+	  string_vector s = args(i).all_strings ();
 
 	  int n = s.length ();
 
 	  for (int j = 0; j < n; j++)
 	    {
 	      std::string t = s[j];
 	      int t_len = t.length ();
 
diff --git a/test/ChangeLog b/test/ChangeLog
--- a/test/ChangeLog
+++ b/test/ChangeLog
@@ -1,8 +1,13 @@
+2006-03-21  John W. Eaton  <jwe@octave.org>
+
+	* test_system.m: Use cell arrays of character strings in fnmatch
+	tests.
+
 2006-03-16  John W. Eaton  <jwe@octave.org>
 
 	* test_system.m: End all *pwent tests with a call to endpwent.
 	End all *grent tests with a call to endgrent.
 
 2006-03-14  John W. Eaton  <jwe@octave.org>
 
 	* fntests.m: Prettier printing of output.
diff --git a/test/test_system.m b/test/test_system.m
--- a/test/test_system.m
+++ b/test/test_system.m
@@ -329,21 +329,21 @@
 %!error <... glob:*> glob ();
 
 %% test/octave.test/system/glob-3.m
 %!error <... glob:.*> glob ("foo", 1);
 
 %% test/octave.test/system/fnmatch-1.m
 %!test
 %! string_fill_char = setstr (0);
-%! assert((fnmatch ("a*a", ["aba"; "xxxba"; "aa"]) == [1; 0; 1]
-%! && fnmatch (["a*a"; "b*b"], "bob")
-%! && fnmatch ("x[0-5]*", ["x1"; "x6"]) == [1; 0]
-%! && fnmatch ("x[0-5]*", ["x1"; "x6"; "x001"]) == [1; 0; 1]
-%! && fnmatch ("x???y", ["xabcy"; "xy"]) == [1; 0]));
+%! assert((fnmatch ("a*a", {"aba"; "xxxba"; "aa"}) == [1; 0; 1]
+%! && fnmatch ({"a*a"; "b*b"}, "bob")
+%! && fnmatch ("x[0-5]*", {"x1"; "x6"}) == [1; 0]
+%! && fnmatch ("x[0-5]*", {"x1"; "x6"; "x001"}) == [1; 0; 1]
+%! && fnmatch ("x???y", {"xabcy"; "xy"}) == [1; 0]));
 
 %% test/octave.test/system/fnmatch-2.m
 %!error <... fnmatch:.*> fnmatch ();
 
 %% test/octave.test/system/fnmatch-3.m
 %!error <... fnmatch:.*> fnmatch ("foo", "bar", 3);
 
 %% test/octave.test/system/file_in_path-1.m
