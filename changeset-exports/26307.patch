# HG changeset patch
# User Torsten <mttl@mailbox.org>
# Date 1545947414 -3600
#      Thu Dec 27 22:50:14 2018 +0100
# Branch stable
# Node ID a21f58c5e573087abd1f7502104f9d899068b607
# Parent  039c61366f24efb272d8408d7751b7c1608d153d
fix resetting gui window layout

* main-window.cc (reset_windows): do not use default settings file, hide
  main window, call window setup with nullptr for settings, and show;
  (set_window_layout): if settings is nullptr, make all dock widgets visible
  and not floating, then restore default geometry and finally default state

diff --git a/libgui/src/main-window.cc b/libgui/src/main-window.cc
--- a/libgui/src/main-window.cc
+++ b/libgui/src/main-window.cc
@@ -876,19 +876,18 @@ namespace octave
     if (m_find_files_dlg)
       m_find_files_dlg->save_settings ();
 
     write_settings ();
   }
 
   void main_window::reset_windows (void)
   {
-    QSettings *settings = resource_manager::get_default_settings ();
-
-    set_window_layout (settings);
+    hide ();
+    set_window_layout (nullptr);  // do not use the settings file
     showNormal ();  // make sure main window is not minimized
     focus_command_window ();
   }
 
   void main_window::change_directory (const QString& dir)
   {
     // Remove existing entry, if any, then add new directory at top and
     // mark it as the current directory.  Finally, update the file list
@@ -1278,61 +1277,76 @@ namespace octave
   {
     emit init_terminal_size_signal ();
   }
 
   void main_window::set_window_layout (QSettings *settings)
   {
     // Restore main window state and geometry from settings file or, in case
     // of an error from the default layout
-    if (! restoreState (
-            settings->value (mw_state.key, mw_state.def).toByteArray ()))
-      restoreState (mw_state.def.toByteArray ());
-
-    if (! restoreGeometry (
-            settings->value (mw_geometry.key, mw_geometry.def).toByteArray ()))
-      restoreGeometry (mw_geometry.def.toByteArray ());
+    if (settings)
+      {
+        if (! restoreState (
+                settings->value (mw_state.key, mw_state.def).toByteArray ()))
+          restoreState (mw_state.def.toByteArray ());
+
+        if (! restoreGeometry (
+                settings->value (mw_geometry.key, mw_geometry.def).toByteArray ()))
+          restoreGeometry (mw_geometry.def.toByteArray ());
+      }
 
     // Restore the geometry of all dock-widgets
     foreach (octave_dock_widget *widget, dock_widget_list ())
       {
         QString name = widget->objectName ();
 
         if (! name.isEmpty ())
           {
-            bool floating = settings->value
-              ("DockWidgets/" + name + "Floating", false).toBool ();
-            bool visible = settings->value
-              ("DockWidgets/" + name + "Visible", true).toBool ();
+            bool floating = false;
+            bool visible = true;
+            if (settings)
+              {
+                floating = settings->value
+                  ("DockWidgets/" + name + "Floating", false).toBool ();
+                visible = settings->value
+                  ("DockWidgets/" + name + "Visible", true).toBool ();
+              }
 
             // If floating, make window from widget.
             if (floating)
               {
                 widget->make_window ();
 
                 if (visible)
                   {
-                    if (settings->value ("DockWidgets/" + name
-                                         + "_minimized").toBool ())
+                    if (settings &&
+                        settings->value ("DockWidgets/" + name
+                                           + "_minimized").toBool ())
                       widget->showMinimized ();
                     else
                       widget->setVisible (true);
                   }
               }
             else  // not floating
               {
                 if (! widget->parent ())        // should not be floating but is
                   widget->make_widget (false);  // no docking, just reparent
 
                 widget->make_widget ();
                 widget->setVisible (visible);   // not floating -> show
               }
           }
       }
 
+    if (! settings)
+      {
+        restoreGeometry (mw_geometry.def.toByteArray ());
+        restoreState (mw_state.def.toByteArray ());
+      }
+
     show ();
   }
 
   void main_window::write_settings (void)
   {
     QSettings *settings = resource_manager::get_settings ();
     if (! settings)
       {
