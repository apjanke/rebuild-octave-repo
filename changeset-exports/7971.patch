# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1216928560 14400
#      Thu Jul 24 15:42:40 2008 -0400
# Node ID dd5cc5016487f81a49b0f17a8127cdabc61a4c6c
# Parent  b6d4c644b4b61ada8f5f7ede36072a9b64005389
handle private functions in class directories

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,10 +1,18 @@
 2008-07-24  John W. Eaton  <jwe@octave.org>
 
+	* load-path.h (load_path::dir_info::class_info): New struct.
+	(load_path::dir_info::method_file_map_type): Now a map from
+	class name to a to a class_info object.  Change all uses.
+	* load-path.cc (load_path::dir_info::get_method_file_map):
+	Also look for private functions in the class directory.
+	(load_path::add_to_method_map): Also add private functions from
+	class directories to private_fcn_map.
+
 	* dirfns.cc (Fmkdir): If directory already exists, return status =
 	true, but also set error message.
 
 2008-07-23  John W. Eaton  <jwe@octave.org>
 
 	* ov-usr_fcn.cc (octave_user_function::do_multi_index_op):
 	Don't unwind_protect and set curr_parent_function here.
 	* toplev.cc (curr_parent_function): Delete definition.
diff --git a/src/load-path.cc b/src/load-path.cc
--- a/src/load-path.cc
+++ b/src/load-path.cc
@@ -213,17 +213,24 @@ load_path::dir_info::get_private_file_ma
 {
   private_file_map = get_fcn_files (d);
 }
 
 void
 load_path::dir_info::get_method_file_map (const std::string& d,
 					  const std::string& class_name)
 {
-  method_file_map[class_name] = get_fcn_files (d);
+  method_file_map[class_name].method_file_map = get_fcn_files (d);
+
+  std::string pd = file_ops::concat (d, "private");
+
+  file_stat fs (pd);
+
+  if (fs && fs.is_dir ())
+    method_file_map[class_name].private_file_map = get_fcn_files (pd);
 }
 
 bool
 load_path::instance_ok (void)
 {
   bool retval = true;
 
   if (! instance)
@@ -1341,17 +1348,19 @@ load_path::do_display (std::ostream& os)
 	{
 	  for (dir_info::const_method_file_map_iterator p = method_file_map.begin ();
 	       p != method_file_map.end ();
 	       p++)
 	    {
 	      os << "\n*** methods in " << i->dir_name
 		 << "/@" << p->first << ":\n\n";
 
-	      string_vector method_files = get_file_list (p->second);
+	      const dir_info::class_info& ci = p->second;
+
+	      string_vector method_files = get_file_list (ci.method_file_map);
 
 	      method_files.list_in_columns (os);
 	    }
 	}
     }
 
   for (const_private_fcn_map_iterator i = private_fcn_map.begin ();
        i != private_fcn_map.end (); i++)
@@ -1489,32 +1498,34 @@ load_path::add_to_private_fcn_map (const
     private_fcn_map[di.dir_name] = private_file_map;
 }
 
 void
 load_path::add_to_method_map (const dir_info& di, bool at_end) const
 {
   std::string dir_name = di.dir_name;
 
-  // <CLASS_NAME, <FCN_NAME, TYPES>>
+  // <CLASS_NAME, CLASS_INFO>
   dir_info::method_file_map_type method_file_map = di.method_file_map;
 
   for (dir_info::const_method_file_map_iterator q = method_file_map.begin ();
        q != method_file_map.end ();
        q++)
     {
       std::string class_name = q->first;
 
       fcn_map_type& fm = method_map[class_name];
 
       std::string full_dir_name
 	= file_ops::concat (dir_name, "@" + class_name);
 
+      const dir_info::class_info& ci = q->second;
+
       // <FCN_NAME, TYPES>
-      const dir_info::fcn_file_map_type& m = q->second;
+      const dir_info::fcn_file_map_type& m = ci.method_file_map;
 
       for (dir_info::const_fcn_file_map_iterator p = m.begin ();
 	   p != m.end ();
 	   p++)
 	{
 	  std::string base = p->first;
 
 	  int types = p->second;
@@ -1544,16 +1555,22 @@ load_path::add_to_method_map (const dir_
 	    {
 	      // FIXME -- is this possible?
 
 	      file_info& fi = *p2;
 
 	      fi.types = types;
 	    }
 	}
+
+      // <FCN_NAME, TYPES>
+      dir_info::fcn_file_map_type private_file_map = ci.private_file_map;
+
+      if (! private_file_map.empty ())
+	private_fcn_map[full_dir_name] = private_file_map;
     }
 }
 
 std::string
 genpath (const std::string& dirname, const string_vector& skip)
 {
   std::string retval;
 
diff --git a/src/load-path.h b/src/load-path.h
--- a/src/load-path.h
+++ b/src/load-path.h
@@ -228,18 +228,24 @@ private:
   public:
 
     // <FCN_NAME, TYPE>
     typedef std::map<std::string, int> fcn_file_map_type;
 
     typedef fcn_file_map_type::const_iterator const_fcn_file_map_iterator;
     typedef fcn_file_map_type::iterator fcn_file_map_iterator;
 
-    // <CLASS_NAME, <FCN_NAME, TYPE>>
-    typedef std::map<std::string, fcn_file_map_type> method_file_map_type;
+    struct class_info
+    {
+      fcn_file_map_type method_file_map;
+      fcn_file_map_type private_file_map;
+    };
+
+    // <CLASS_NAME, CLASS_INFO>
+    typedef std::map<std::string, class_info> method_file_map_type;
 
     typedef method_file_map_type::const_iterator const_method_file_map_iterator;
     typedef method_file_map_type::iterator method_file_map_iterator;
 
     dir_info (const std::string& d) : dir_name (d) { initialize (); }
 
     dir_info (const dir_info& di)
       : dir_name (di.dir_name), is_relative (di.is_relative),
