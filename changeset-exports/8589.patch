# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1232952544 -3600
#      Mon Jan 26 07:49:04 2009 +0100
# Node ID 0131fa223dbc9dffaea9e27e367d865c41ad516c
# Parent  79845b1793cf079861840b800a51b1b399b2dd63
make length invariant in range-scalar ops

diff --git a/liboctave/Range.cc b/liboctave/Range.cc
--- a/liboctave/Range.cc
+++ b/liboctave/Range.cc
@@ -286,47 +286,47 @@ operator >> (std::istream& is, Range& a)
     }
 
   return is;
 }
 
 Range
 operator - (const Range& r)
 {
-  return Range (-r.base (), -r.limit (), -r.inc ());
+  return Range (-r.base (), -r.inc (), r.nelem ());
 }
 
 Range operator + (double x, const Range& r)
 {
-  return Range (x + r.base (), x + r.limit (), r.inc ());
+  return Range (x + r.base (), r.inc (), r.nelem ());
 }
 
 Range operator + (const Range& r, double x)
 {
-  return Range (r.base () + x, r.limit () + x, r.inc ());
+  return Range (r.base () + x, r.inc (), r.nelem ());
 }
 
 Range operator - (double x, const Range& r)
 {
-  return Range (x - r.base (), x - r.limit (), -r.inc ());
+  return Range (x - r.base (), -r.inc (), r.nelem ());
 }
 
 Range operator - (const Range& r, double x)
 {
-  return Range (r.base () - x, r.limit () - x, r.inc ());
+  return Range (r.base () - x, r.inc (), r.nelem ());
 }
 
 Range operator * (double x, const Range& r)
 {
-  return Range (x * r.base (), x * r.limit (), x * r.inc ());
+  return Range (x * r.base (), x * r.inc (), r.nelem ());
 }
 
 Range operator * (const Range& r, double x)
 {
-  return Range (r.base () * x, r.limit () * x, r.inc () * x);
+  return Range (r.base () * x, r.inc () * x, r.nelem ());
 }
 
 
 // C  See Knuth, Art Of Computer Programming, Vol. 1, Problem 1.2.4-5.
 // C
 // C===Tolerant FLOOR function.
 // C
 // C    X  -  is given as a Double Precision argument to be operated on.
diff --git a/liboctave/Range.h b/liboctave/Range.h
--- a/liboctave/Range.h
+++ b/liboctave/Range.h
@@ -45,16 +45,21 @@ Range
   Range (double b, double l)
     : rng_base (b), rng_limit (l), rng_inc (1),
       rng_nelem (nelem_internal ()), cache () { }
 
   Range (double b, double l, double i)
     : rng_base (b), rng_limit (l), rng_inc (i),
       rng_nelem (nelem_internal ()), cache () { }
 
+  // For operators' usage (to preserve element count).
+  Range (double b, double i, octave_idx_type n)
+    : rng_base (b), rng_limit (b + n * i), rng_inc (i), 
+      rng_nelem (n), cache () { }
+
   double base (void) const { return rng_base; }
   double limit (void) const { return rng_limit; }
   double inc (void) const { return rng_inc; }
   octave_idx_type nelem (void) const { return rng_nelem; }
 
   bool all_elements_are_ints (void) const;
 
   Matrix matrix_value (void) const;
