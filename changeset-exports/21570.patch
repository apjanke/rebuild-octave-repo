# HG changeset patch
# User Rik <rik@octave.org>
# Date 1459453619 25200
#      Thu Mar 31 12:46:59 2016 -0700
# Node ID faa23d2161f8ea5e6f98c40fe468e196ee83e673
# Parent  6a550a383bf1740a2dd9f0b6546c6cdff64d6206
Stricter input validation for rundemos, runtests.

* rundemos.m: Check that input is definitely a directory.

* runtests.m: Check that input is definitely a directory.
Change output to distinguish between true FAIL tests and XFAIL tests.

diff --git a/scripts/testfun/rundemos.m b/scripts/testfun/rundemos.m
--- a/scripts/testfun/rundemos.m
+++ b/scripts/testfun/rundemos.m
@@ -33,17 +33,17 @@
 
 function rundemos (directory)
 
   if (nargin == 0)
     dirs = ostrsplit (path (), pathsep ());
     do_class_dirs = true;
   elseif (nargin == 1)
     dirs = {canonicalize_file_name(directory)};
-    if (isempty (dirs{1}))
+    if (isempty (dirs{1}) || ! isdir (dirs{1}))
       ## Search for directory name in path
       if (directory(end) == '/' || directory(end) == '\')
         directory(end) = [];
       endif
       fullname = dir_in_loadpath (directory);
       if (isempty (fullname))
         error ("rundemos: DIRECTORY argument must be a valid pathname");
       endif
diff --git a/scripts/testfun/runtests.m b/scripts/testfun/runtests.m
--- a/scripts/testfun/runtests.m
+++ b/scripts/testfun/runtests.m
@@ -33,17 +33,17 @@
 
 function runtests (directory)
 
   if (nargin == 0)
     dirs = ostrsplit (path (), pathsep ());
     do_class_dirs = true;
   elseif (nargin == 1)
     dirs = {canonicalize_file_name(directory)};
-    if (isempty (dirs{1}))
+    if (isempty (dirs{1}) || ! isdir (dirs{1}))
       ## Search for directory name in path
       if (directory(end) == '/' || directory(end) == '\')
         directory(end) = [];
       endif
       fullname = dir_in_loadpath (directory);
       if (isempty (fullname))
         error ("runtests: DIRECTORY argument must be a valid pathname");
       endif
@@ -70,17 +70,17 @@ function run_all_tests (directory, do_cl
   for i = 1:numel (flist)
     f = flist{i};
     if ((length (f) > 2 && strcmpi (f((end-1):end), ".m"))
         || (length (f) > 3 && strcmpi (f((end-2):end), ".cc")))
       ff = fullfile (directory, f);
       if (has_tests (ff))
         print_test_file_name (f);
         [p, n, xf, sk] = test (ff, "quiet");
-        print_pass_fail (n, p);
+        print_pass_fail (n, p, xf);
         fflush (stdout);
       elseif (has_functions (ff))
         no_tests(end+1) = f;
       endif
     elseif (f(1) == "@")
       f = fullfile (directory, f);
       if (isdir (f))
         dirs(end+1) = f;
@@ -127,22 +127,26 @@ function retval = has_tests (f)
     fclose (fid);
     retval = ! isempty (regexp (str, '^%!(?:test|xtest|assert|error|warning)',
                                      'lineanchors', 'once'));
   else
     error ("runtests: fopen failed: %s", f);
   endif
 endfunction
 
-function print_pass_fail (n, p)
+function print_pass_fail (n, p, xf)
   if (n > 0)
     printf (" PASS %4d/%-4d", p, n);
     nfail = n - p;
     if (nfail > 0)
-      printf (" FAIL %d", nfail);
+      if (nfail != xf)
+        printf (" FAIL %d", nfail - xf);
+      else
+        printf (" XFAIL %d", xf);
+      endif
     endif
   endif
   puts ("\n");
 endfunction
 
 function print_test_file_name (nm)
   filler = repmat (".", 1, 55-length (nm));
   printf ("  %s %s", nm, filler);
