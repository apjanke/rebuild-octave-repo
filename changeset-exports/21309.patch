# HG changeset patch
# User Rik <rik@octave.org>
# Date 1455946023 28800
#      Fri Feb 19 21:27:03 2016 -0800
# Node ID 7fbecef105caaa701a09f83b53240a25a2184632
# Parent  c53bfd6d8e08c95154de691469b5b35caed13b00
Allow statistics functions to work over non-existent dimension (bug #33523).

* var.m, center.m, kurtosis.m, mean.m, meansq.m, median.m, moment.m,
skewness.m, std.m: Remove check for input dimension being within the range
of ndims (x).  Add BIST tests for new behavior and update input validation
tests.

diff --git a/scripts/statistics/base/center.m b/scripts/statistics/base/center.m
--- a/scripts/statistics/base/center.m
+++ b/scripts/statistics/base/center.m
@@ -54,23 +54,22 @@ function retval = center (x, dim)
   endif
 
   nd = ndims (x);
   sz = size (x);
   if (nargin != 2)
     ## Find the first non-singleton dimension.
     (dim = find (sz > 1, 1)) || (dim = 1);
   else
-    if (!(isscalar (dim) && dim == fix (dim))
-        || !(1 <= dim && dim <= nd))
+    if (! (isscalar (dim) && dim == fix (dim) && dim > 0))
       error ("center: DIM must be an integer and a valid dimension");
     endif
   endif
 
-  n = sz(dim);
+  n = size (x, dim);
 
   if (n == 0)
     retval = x;
   else
     retval = x - mean (x, dim);
   endif
 
 endfunction
@@ -79,17 +78,17 @@ endfunction
 %!assert (center ([1,2,3]), [-1,0,1])
 %!assert (center (single ([1,2,3])), single ([-1,0,1]))
 %!assert (center (int8 ([1,2,3])), [-1,0,1])
 %!assert (center (logical ([1, 0, 0, 1])), [0.5, -0.5, -0.5, 0.5])
 %!assert (center (ones (3,2,0,2)), zeros (3,2,0,2))
 %!assert (center (ones (3,2,0,2, "single")), zeros (3,2,0,2, "single"))
 %!assert (center (magic (3)), [3,-4,1;-2,0,2;-1,4,-3])
 %!assert (center ([1 2 3; 6 5 4], 2), [-1 0 1; 1 0 -1])
+%!assert (center (1, 3), 0)
 
 ## Test input validation
 %!error center ()
 %!error center (1, 2, 3)
-%!error center (1, ones (2,2))
-%!error center (1, 1.5)
-%!error center (1, 0)
-%!error center (1, 3)
+%!error <DIM must be an integer> center (1, ones (2,2))
+%!error <DIM must be an integer> center (1, 1.5)
+%!error <DIM must be .* a valid dimension> center (1, 0)
 
diff --git a/scripts/statistics/base/kurtosis.m b/scripts/statistics/base/kurtosis.m
--- a/scripts/statistics/base/kurtosis.m
+++ b/scripts/statistics/base/kurtosis.m
@@ -100,22 +100,22 @@ function y = kurtosis (x, flag, dim)
   endif
 
   nd = ndims (x);
   sz = size (x);
   if (nargin < 3)
     ## Find the first non-singleton dimension.
     (dim = find (sz > 1, 1)) || (dim = 1);
   else
-    if (! (isscalar (dim) && dim == fix (dim)) || ! (1 <= dim && dim <= nd))
+    if (! (isscalar (dim) && dim == fix (dim) && dim > 0))
       error ("kurtosis: DIM must be an integer and a valid dimension");
     endif
   endif
 
-  n = sz(dim);
+  n = size (x, dim);
   sz(dim) = 1;
 
   x = center (x, dim);   # center also promotes integer, logical to double
   v = var (x, 1, dim);   # normalize with 1/N
   y = sum (x .^ 4, dim);
   idx = (v != 0);
   y(idx) = y(idx) ./ (n * v(idx) .^ 2);
   y(! idx) = NaN;
@@ -135,16 +135,17 @@ endfunction
 
 %!test
 %! x = [-1; 0; 0; 0; 1];
 %! y = [x, 2*x];
 %! assert (kurtosis (y), [2.5, 2.5], sqrt (eps));
 
 %!assert (kurtosis ([-3, 0, 1]) == kurtosis ([-1, 0, 3]))
 %!assert (kurtosis (ones (3, 5)), NaN (1, 5))
+%!assert (kurtosis (1, [], 3), NaN)
 
 %!assert (kurtosis ([1:5 10; 1:5 10],  0, 2), 5.4377317925288901 * [1; 1], 8 * eps)
 %!assert (kurtosis ([1:5 10; 1:5 10],  1, 2), 2.9786509002956195 * [1; 1], 8 * eps)
 %!assert (kurtosis ([1:5 10; 1:5 10], [], 2), 2.9786509002956195 * [1; 1], 8 * eps)
 
 ## Test behavior on single input
 %!assert (kurtosis (single ([1:5 10])), single (2.9786513), eps ("single"))
 %!assert (kurtosis (single ([1 2]), 0), single (NaN))
@@ -160,10 +161,9 @@ endfunction
 %!error kurtosis ()
 %!error kurtosis (1, 2, 3)
 %!error <X must be a numeric vector or matrix> kurtosis (['A'; 'B'])
 %!error <FLAG must be 0 or 1> kurtosis (1, 2)
 %!error <FLAG must be 0 or 1> kurtosis (1, [1 0])
 %!error <DIM must be an integer> kurtosis (1, [], ones (2,2))
 %!error <DIM must be an integer> kurtosis (1, [], 1.5)
 %!error <DIM must be .* a valid dimension> kurtosis (1, [], 0)
-%!error <DIM must be .* a valid dimension> kurtosis (1, [], 3)
 
diff --git a/scripts/statistics/base/mean.m b/scripts/statistics/base/mean.m
--- a/scripts/statistics/base/mean.m
+++ b/scripts/statistics/base/mean.m
@@ -100,23 +100,22 @@ function y = mean (x, opt1, opt2)
   endif
 
   nd = ndims (x);
   sz = size (x);
   if (need_dim)
     ## Find the first non-singleton dimension.
     (dim = find (sz > 1, 1)) || (dim = 1);
   else
-    if (!(isscalar (dim) && dim == fix (dim))
-      || !(1 <= dim && dim <= nd))
+    if (! (isscalar (dim) && dim == fix (dim) && dim > 0))
       error ("mean: DIM must be an integer and a valid dimension");
     endif
   endif
 
-  n = sz(dim);
+  n = size (x, dim);
 
   if (strcmp (opt, "a"))
     y = sum (x, dim) / n;
   elseif (strcmp (opt, "g"))
     if (all (x(:) >= 0))
       y = exp (sum (log (x), dim) ./ n);
     else
       error ("mean: X must not contain any negative values");
@@ -142,20 +141,21 @@ endfunction
 %!assert (mean (repmat (0.1,1,1000), "g"), 0.1, 20*eps)
 
 %!assert (mean (magic (3), 1), [5, 5, 5])
 %!assert (mean (magic (3), 2), [5; 5; 5])
 %!assert (mean ([2 8], "g"), 4)
 %!assert (mean ([4 4 2], "h"), 3)
 %!assert (mean (logical ([1 0 1 1])), 0.75)
 %!assert (mean (single ([1 0 1 1])), single (0.75))
+%!assert (mean ([1 2], 3), [1 2])
 
 ## Test input validation
 %!error mean ()
 %!error mean (1, 2, 3, 4)
-%!error mean ({1:5})
-%!error mean (1, 2, 3)
-%!error mean (1, ones (2,2))
-%!error mean (1, 1.5)
-%!error mean (1, 0)
-%!error mean (1, 3)
-%!error mean (1, "b")
+%!error <X must be a numeric> mean ({1:5})
+%!error <OPT must be a string> mean (1, 2, 3)
+%!error <DIM must be an integer> mean (1, ones (2,2))
+%!error <DIM must be an integer> mean (1, 1.5)
+%!error <DIM must be .* a valid dimension> mean (1, 0)
+%!error <X must not contain any negative values> mean ([1 -1], "g")
+%!error <option 'b' not recognized> mean (1, "b")
 
diff --git a/scripts/statistics/base/meansq.m b/scripts/statistics/base/meansq.m
--- a/scripts/statistics/base/meansq.m
+++ b/scripts/statistics/base/meansq.m
@@ -59,33 +59,32 @@ function y = meansq (x, dim)
   endif
 
   nd = ndims (x);
   sz = size (x);
   if (nargin < 2)
     ## Find the first non-singleton dimension.
     (dim = find (sz > 1, 1)) || (dim = 1);
   else
-    if (!(isscalar (dim) && dim == fix (dim))
-        || !(1 <= dim && dim <= nd))
+    if (! (isscalar (dim) && dim == fix (dim) && dim > 0))
       error ("mean: DIM must be an integer and a valid dimension");
     endif
   endif
 
-  y = sumsq (x, dim) / sz(dim);
+  y = sumsq (x, dim) / size (x, dim);
 
 endfunction
 
 
 %!assert (meansq (1:5), 11)
 %!assert (meansq (single (1:5)), single (11))
 %!assert (meansq (magic (4)), [94.5, 92.5, 92.5, 94.5])
 %!assert (meansq (magic (4), 2), [109.5; 77.5; 77.5; 109.5])
+%!assert (meansq ([1 2], 3), [1 4])
 
 ## Test input validation
 %!error meansq ()
 %!error meansq (1, 2, 3)
-%!error meansq (['A'; 'B'])
-%!error meansq (1, ones (2,2))
-%!error meansq (1, 1.5)
-%!error meansq (1, 0)
-%!error meansq (1, 3)
+%!error <X must be a numeric> meansq (['A'; 'B'])
+%!error <DIM must be an integer> meansq (1, ones (2,2))
+%!error <DIM must be an integer> meansq (1, 1.5)
+%!error <DIM must be .* a valid dimension> meansq (1, 0)
 
diff --git a/scripts/statistics/base/median.m b/scripts/statistics/base/median.m
--- a/scripts/statistics/base/median.m
+++ b/scripts/statistics/base/median.m
@@ -65,23 +65,22 @@ function retval = median (x, dim)
   endif
 
   nd = ndims (x);
   sz = size (x);
   if (nargin < 2)
     ## Find the first non-singleton dimension.
     (dim = find (sz > 1, 1)) || (dim = 1);
   else
-    if (!(isscalar (dim) && dim == fix (dim))
-        || !(1 <= dim && dim <= nd))
+    if (! (isscalar (dim) && dim == fix (dim) && dim > 0))
       error ("median: DIM must be an integer and a valid dimension");
     endif
   endif
 
-  n = sz(dim);
+  n = size (x, dim);
   k = floor ((n+1) / 2);
   if (mod (n, 2) == 1)
     retval = nth_element (x, k, dim);
   else
     retval = mean (nth_element (x, k:k+1, dim), dim);
   endif
   ## Inject NaNs where needed, to be consistent with Matlab.
   retval(any (isnan (x), dim)) = NaN;
@@ -97,28 +96,29 @@ endfunction
 %!
 %! assert (median (x) == median (x2) && median (x) == 3.5);
 %! assert (median (y) == median (y2) && median (y) == 4);
 %! assert (median ([x2, 2*x2]), [3.5, 7]);
 %! assert (median ([y2, 3*y2]), [4, 12]);
 
 %!assert (median (single ([1,2,3])), single (2))
 %!assert (median ([1,2,NaN;4,5,6;NaN,8,9]), [NaN, 5, NaN])
+%!assert (median ([1,2], 3), [1,2])
 
 ## Test multidimensional arrays (bug #35679)
 %!shared a, b, x, y
 %! rand ("seed", 2);
 %! a = rand (2,3,4,5);
 %! b = rand (3,4,6,5);
 %! x = sort (a, 4);
 %! y = sort (b, 3);
 %!assert (median (a, 4), x(:, :, :, 3));
 %!assert (median (b, 3), (y(:, :, 3, :) + y(:, :, 4, :))/2);
 
 ## Test input validation
 %!error median ()
 %!error median (1, 2, 3)
-%!error median ({1:5})
-%!error median (['A'; 'B'])
-%!error median (1, ones (2,2))
-%!error median (1, 1.5)
-%!error median (1, 0)
+%!error <X must be a numeric> median ({1:5})
+%!error <X cannot be an empty matrix> median ([])
+%!error <DIM must be an integer> median (1, ones (2,2))
+%!error <DIM must be an integer> median (1, 1.5)
+%!error <DIM must be .* a valid dimension> median (1, 0)
 
diff --git a/scripts/statistics/base/moment.m b/scripts/statistics/base/moment.m
--- a/scripts/statistics/base/moment.m
+++ b/scripts/statistics/base/moment.m
@@ -156,22 +156,22 @@ function m = moment (x, p, opt1, opt2)
   endif
 
   nd = ndims (x);
   sz = size (x);
   if (need_dim)
     ## Find the first non-singleton dimension.
     (dim = find (sz > 1, 1)) || (dim = 1);
   else
-    if (! (isscalar (dim) && dim == fix (dim)) || ! (1 <= dim && dim <= nd))
+    if (! (isscalar (dim) && dim == fix (dim) && dim > 0))
       error ("moment: DIM must be an integer and a valid dimension");
     endif
   endif
 
-  n = sz(dim);
+  n = size (x, dim);
 
   if (! any (type == "r"))
     x = center (x, dim);
   endif
   if (any (type == "a"))
     x = abs (x);
   endif
 
@@ -186,21 +186,22 @@ endfunction
 %!assert (moment (x,2), meansq (center (x)), eps)
 %!assert (moment (x,1,2), mean (center (x, 2), 2), eps)
 %!assert (moment (x,1,"a"), mean (abs (center (x))), eps)
 %!assert (moment (x,1,"r"), mean (x), eps)
 %!assert (moment (x,1,"ar"), mean (abs (x)), eps)
 
 %!assert (moment (single ([1 2 3]), 1, "r"), single (2))
 
+%!assert (moment (1, 2, 4), 0)
+
 ## Test input validation
 %!error moment ()
 %!error moment (1)
 %!error moment (1, 2, 3, 4, 5)
 %!error <X must be a non-empty numeric matrix> moment (['A'; 'B'], 2)
 %!error <X must be a non-empty numeric matrix> moment (ones (2,0,3), 2)
 %!error <P must be a numeric scalar> moment (1, true)
 %!error <P must be a numeric scalar> moment (1, ones (2,2))
 %!error <TYPE must be a string> moment (1, 2, 3, 4)
 %!error <DIM must be an integer and a valid dimension> moment (1, 2, ones (2,2))
 %!error <DIM must be an integer and a valid dimension> moment (1, 2, 1.5)
-%!error <DIM must be an integer and a valid dimension> moment (1, 2, 4)
 
diff --git a/scripts/statistics/base/skewness.m b/scripts/statistics/base/skewness.m
--- a/scripts/statistics/base/skewness.m
+++ b/scripts/statistics/base/skewness.m
@@ -87,34 +87,32 @@ function y = skewness (x, flag, dim)
   endif
 
   if (! (isnumeric (x) || islogical (x)))
     error ("skewness: X must be a numeric vector or matrix");
   endif
 
   if (nargin < 2 || isempty (flag))
     flag = 1;  # default: do not use the "bias corrected" version
-  else
-    if (! isscalar (flag) || (flag != 0 && flag != 1))
-      error ("skewness: FLAG must be 0 or 1");
-    endif
+  elseif (! isscalar (flag) || (flag != 0 && flag != 1))
+    error ("skewness: FLAG must be 0 or 1");
   endif
 
   nd = ndims (x);
   sz = size (x);
   if (nargin < 3)
     ## Find the first non-singleton dimension.
     (dim = find (sz > 1, 1)) || (dim = 1);
   else
-    if (!(isscalar (dim) && dim == fix (dim)) || !(1 <= dim && dim <= nd))
+    if (! (isscalar (dim) && dim == fix (dim) && dim > 0))
       error ("skewness: DIM must be an integer and a valid dimension");
     endif
   endif
 
-  n = sz(dim);
+  n = size (x, dim);
   sz(dim) = 1;
 
   x = center (x, dim);   # center also promotes integer, logical to double
   s = std (x, 1, dim);   # Normalize with 1/N
   y = sum (x .^ 3, dim);
   idx = (s != 0);
   y(idx) ./= (n * s(idx) .^ 3);
   y(! idx) = NaN;
@@ -131,16 +129,17 @@ function y = skewness (x, flag, dim)
 endfunction
 
 
 %!assert (skewness ([-1, 0, 1]), 0)
 %!assert (skewness ([-2, 0, 1]) < 0)
 %!assert (skewness ([-1, 0, 2]) > 0)
 %!assert (skewness ([-3, 0, 1]) == -1 * skewness ([-1, 0, 3]))
 %!assert (skewness (ones (3, 5)), NaN (1, 5))
+%!assert (skewness (1, [], 3), NaN)
 
 %!test
 %! x = [0; 0; 0; 1];
 %! y = [x, 2*x];
 %! assert (skewness (y), 1.154700538379251 * [1 1], 5*eps);
 
 %!assert (skewness ([1:5 10; 1:5 10],  0, 2), 1.439590274527954 * [1; 1], eps)
 %!assert (skewness ([1:5 10; 1:5 10],  1, 2), 1.051328089232020 * [1; 1], 2*eps)
@@ -161,10 +160,9 @@ endfunction
 %!error skewness ()
 %!error skewness (1, 2, 3)
 %!error <X must be a numeric vector or matrix> skewness (['A'; 'B'])
 %!error <FLAG must be 0 or 1> skewness (1, 2)
 %!error <FLAG must be 0 or 1> skewness (1, [1 0])
 %!error <DIM must be an integer> skewness (1, [], ones (2,2))
 %!error <DIM must be an integer> skewness (1, [], 1.5)
 %!error <DIM must be .* a valid dimension> skewness (1, [], 0)
-%!error <DIM must be .* a valid dimension> skewness (1, [], 3)
 
diff --git a/scripts/statistics/base/std.m b/scripts/statistics/base/std.m
--- a/scripts/statistics/base/std.m
+++ b/scripts/statistics/base/std.m
@@ -70,34 +70,32 @@ function retval = std (x, opt = 0, dim)
   endif
 
   if (! (isnumeric (x) || islogical (x)))
     error ("std: X must be a numeric vector or matrix");
   endif
 
   if (isempty (opt))
     opt = 0;
-  endif
-  if (opt != 0 && opt != 1)
+  elseif (! isscalar (opt) || (opt != 0 && opt != 1))
     error ("std: normalization OPT must be 0 or 1");
   endif
 
   nd = ndims (x);
   sz = size (x);
   if (nargin < 3)
     ## Find the first non-singleton dimension.
     (dim = find (sz > 1, 1)) || (dim = 1);
   else
-    if (!(isscalar (dim) && dim == fix (dim))
-        || !(1 <= dim && dim <= nd))
+    if (! (isscalar (dim) && dim == fix (dim) && dim > 0))
       error ("std: DIM must be an integer and a valid dimension");
     endif
   endif
 
-  n = sz(dim);
+  n = size (x, dim);
   if (n == 1 || isempty (x))
     if (isa (x, "single"))
       retval = zeros (sz, "single");
     else
       retval = zeros (sz);
     endif
   else
     retval = sqrt (sumsq (center (x, dim), dim) / (n - 1 + opt));
@@ -108,22 +106,26 @@ endfunction
 
 %!test
 %! x = ones (10, 2);
 %! y = [1, 3];
 %! assert (std (x), [0, 0]);
 %! assert (std (y), sqrt (2), sqrt (eps));
 %! assert (std (x, 0, 2), zeros (10, 1));
 
-%!assert (std (ones (3, 1, 2), 0, 2), zeros (3, 1, 2));
-%!assert (std ([1 2], 0), sqrt (2)/2, 5*eps);
-%!assert (std ([1 2], 1), 0.5, 5*eps);
-%!assert (std (1), 0);
-%!assert (std (single (1)), single (0));
-%!assert (std ([]), []);
-%!assert (std (ones (1,3,0,2)), ones (1,3,0,2));
+%!assert (std (ones (3, 1, 2), 0, 2), zeros (3, 1, 2))
+%!assert (std ([1 2], 0), sqrt (2)/2, 5*eps)
+%!assert (std ([1 2], 1), 0.5, 5*eps)
+%!assert (std (1), 0)
+%!assert (std (single (1)), single (0))
+%!assert (std ([]), [])
+%!assert (std (ones (1,3,0,2)), ones (1,3,0,2))
+%!assert (std ([1 2 3], [], 3), [0 0 0])
 
 ## Test input validation
 %!error std ()
 %!error std (1, 2, 3, 4)
-%!error std (['A'; 'B'])
-%!error std (1, -1)
+%!error <X must be a numeric> std (['A'; 'B'])
+%!error <OPT must be 0 or 1> std (1, 2)
+%!error <DIM must be an integer> std (1, [], ones (2,2))
+%!error <DIM must be an integer> std (1, [], 1.5)
+%!error <DIM must be .* a valid dimension> std (1, [], 0)
 
diff --git a/scripts/statistics/base/var.m b/scripts/statistics/base/var.m
--- a/scripts/statistics/base/var.m
+++ b/scripts/statistics/base/var.m
@@ -70,34 +70,32 @@ function retval = var (x, opt = 0, dim)
   endif
 
   if (! (isnumeric (x) || islogical (x)))
     error ("var: X must be a numeric vector or matrix");
   endif
 
   if (isempty (opt))
     opt = 0;
-  endif
-  if (opt != 0 && opt != 1)
+  elseif (opt != 0 && opt != 1)
     error ("var: normalization OPT must be 0 or 1");
   endif
 
   nd = ndims (x);
   sz = size (x);
   if (nargin < 3)
     ## Find the first non-singleton dimension.
     (dim = find (sz > 1, 1)) || (dim = 1);
   else
-    if (!(isscalar (dim) && dim == fix (dim))
-        || !(1 <= dim && dim <= nd))
+    if (! (isscalar (dim) && dim == fix (dim) && dim > 0))
       error ("var: DIM must be an integer and a valid dimension");
     endif
   endif
 
-  n = sz(dim);
+  n = size (x, dim);
   if (n == 1)
     if (isa (x, "single"))
       retval = zeros (sz, "single");
     else
       retval = zeros (sz);
     endif
   elseif (numel (x) > 0)
     retval = sumsq (center (x, dim), dim) / (n - 1 + opt);
@@ -108,16 +106,22 @@ function retval = var (x, opt = 0, dim)
 endfunction
 
 
 %!assert (var (13), 0)
 %!assert (var (single (13)), single (0))
 %!assert (var ([1,2,3]), 1)
 %!assert (var ([1,2,3], 1), 2/3, eps)
 %!assert (var ([1,2,3], [], 1), [0,0,0])
+%!assert (var ([1,2,3], [], 3), [0,0,0])
 
 ## Test input validation
 %!error var ()
 %!error var (1,2,3,4)
-%!error var (['A'; 'B'])
-%!error var (1, -1)
-%!error var ([], 1)
+%!error <X must be a numeric> var (['A'; 'B'])
+%!error <OPT must be 0 or 1> var (1, -1)
+%!error <FLAG must be 0 or 1> skewness (1, 2)
+%!error <FLAG must be 0 or 1> skewness (1, [1 0])
+%!error <DIM must be an integer> var (1, [], ones (2,2))
+%!error <DIM must be an integer> var (1, [], 1.5)
+%!error <DIM must be .* a valid dimension> var (1, [], 0)
+%!error <X must not be empty> var ([], 1)
 
