# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1217450218 14400
#      Wed Jul 30 16:36:58 2008 -0400
# Node ID f7f2d867c5235fe762677d1b1e3470ad6deeea13
# Parent  a4acda9fc3e7e985d7e8e9c3699d5a8d8d7107e7
style fixes

diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,14 +1,19 @@
+2008-07-30  John W. Eaton  <jwe@octave.org>
+
+	* oct-inttypes.h: Style fixes.
+
 2008-07-30  Jaroslav Hajek <highegg@gmail.com>
 
 	* oct-inttypes.h (octave_int<T>::trunc_flag): New member static field.
 	(octave_int<T>::get_trunc_flag, octave_int<T>::clear_trunc_flag): New
 	member functions.
-	(octave_int<T>::octave_int (const octave_int<U>&)): set trunc_flag on truncation.
+	(octave_int<T>::octave_int (const octave_int<U>&)): set trunc_flag
+	on truncation.
 	(SPECIALIZE_WIDENING_CONVERSION): New macro.
 	(DECLARE_OCTAVE_INT_TYPENAME): New macro.
 
 2008-07-29  David Bateman  <dbateman@free.fr>
 
 	* lo-ieee.h (LO_IEEE_NA_HW, LO_IEEE_NA_LW, LO_IEEE_NA_FLOAT):
 	Change definition so cast from single to double and visa versa
 	maintains NA value.
diff --git a/liboctave/oct-inttypes.h b/liboctave/oct-inttypes.h
--- a/liboctave/oct-inttypes.h
+++ b/liboctave/oct-inttypes.h
@@ -38,17 +38,17 @@ class
 octave_int_binop_traits
 {
 public:
   // The return type for a T1 by T2 binary operation.
   typedef T1 TR;
 };
 
 #define OCTAVE_INT_BINOP_TRAIT(T1, T2, T3) \
-  template<> \
+  template <> \
   class octave_int_binop_traits <T1, T2> \
   { \
   public: \
     typedef T3 TR; \
   }
 
 OCTAVE_INT_BINOP_TRAIT (int8_t, int8_t, int8_t);
 OCTAVE_INT_BINOP_TRAIT (int8_t, int16_t, int8_t);
@@ -501,47 +501,50 @@ operator >> (std::istream& is, octave_in
   return is;
 }
 
 // specialize the widening conversions to make them faster
 // gosh. the syntax is tricky!
 
 #define SPECIALIZE_WIDENING_CONVERSION(T1, T2) \
   template <> template <> \
-  inline octave_int<T2>::octave_int (T1 i) : ival (i) {} \
+  inline octave_int<T2>::octave_int (T1 i) \
+    : ival (i) { } \
+ \
   template <> template <> \
-  inline octave_int<T2>::octave_int (const octave_int<T1>& i) : ival (i.value ()) {}
+  inline octave_int<T2>::octave_int (const octave_int<T1>& i) \
+    : ival (i.value ()) { }
 
-SPECIALIZE_WIDENING_CONVERSION(int8_t, int16_t)
-SPECIALIZE_WIDENING_CONVERSION(int8_t, int32_t)
-SPECIALIZE_WIDENING_CONVERSION(int8_t, int64_t)
-SPECIALIZE_WIDENING_CONVERSION(int16_t, int32_t)
-SPECIALIZE_WIDENING_CONVERSION(int16_t, int64_t)
-SPECIALIZE_WIDENING_CONVERSION(int32_t, int64_t)
-SPECIALIZE_WIDENING_CONVERSION(uint8_t, uint16_t)
-SPECIALIZE_WIDENING_CONVERSION(uint8_t, uint32_t)
-SPECIALIZE_WIDENING_CONVERSION(uint8_t, uint64_t)
-SPECIALIZE_WIDENING_CONVERSION(uint16_t, uint32_t)
-SPECIALIZE_WIDENING_CONVERSION(uint16_t, uint64_t)
-SPECIALIZE_WIDENING_CONVERSION(uint32_t, uint64_t)
+SPECIALIZE_WIDENING_CONVERSION (int8_t, int16_t)
+SPECIALIZE_WIDENING_CONVERSION (int8_t, int32_t)
+SPECIALIZE_WIDENING_CONVERSION (int8_t, int64_t)
+SPECIALIZE_WIDENING_CONVERSION (int16_t, int32_t)
+SPECIALIZE_WIDENING_CONVERSION (int16_t, int64_t)
+SPECIALIZE_WIDENING_CONVERSION (int32_t, int64_t)
+SPECIALIZE_WIDENING_CONVERSION (uint8_t, uint16_t)
+SPECIALIZE_WIDENING_CONVERSION (uint8_t, uint32_t)
+SPECIALIZE_WIDENING_CONVERSION (uint8_t, uint64_t)
+SPECIALIZE_WIDENING_CONVERSION (uint16_t, uint32_t)
+SPECIALIZE_WIDENING_CONVERSION (uint16_t, uint64_t)
+SPECIALIZE_WIDENING_CONVERSION (uint32_t, uint64_t)
 
 // declare type names
 #define DECLARE_OCTAVE_INT_TYPENAME(TYPE, TYPENAME) \
-  template<> \
+  template <> \
   inline const char * \
   octave_int<TYPE>::type_name () { return TYPENAME; }
 
-DECLARE_OCTAVE_INT_TYPENAME(int8_t, "int8")
-DECLARE_OCTAVE_INT_TYPENAME(int16_t, "int16")
-DECLARE_OCTAVE_INT_TYPENAME(int32_t, "int32")
-DECLARE_OCTAVE_INT_TYPENAME(int64_t, "int64")
-DECLARE_OCTAVE_INT_TYPENAME(uint8_t, "uint8")
-DECLARE_OCTAVE_INT_TYPENAME(uint16_t, "uint16")
-DECLARE_OCTAVE_INT_TYPENAME(uint32_t, "uint32")
-DECLARE_OCTAVE_INT_TYPENAME(uint64_t, "uint64")
+DECLARE_OCTAVE_INT_TYPENAME (int8_t, "int8")
+DECLARE_OCTAVE_INT_TYPENAME (int16_t, "int16")
+DECLARE_OCTAVE_INT_TYPENAME (int32_t, "int32")
+DECLARE_OCTAVE_INT_TYPENAME (int64_t, "int64")
+DECLARE_OCTAVE_INT_TYPENAME (uint8_t, "uint8")
+DECLARE_OCTAVE_INT_TYPENAME (uint16_t, "uint16")
+DECLARE_OCTAVE_INT_TYPENAME (uint32_t, "uint32")
+DECLARE_OCTAVE_INT_TYPENAME (uint64_t, "uint64")
 
 typedef octave_int<int8_t> octave_int8;
 typedef octave_int<int16_t> octave_int16;
 typedef octave_int<int32_t> octave_int32;
 typedef octave_int<int64_t> octave_int64;
 
 typedef octave_int<uint8_t> octave_uint8;
 typedef octave_int<uint16_t> octave_uint16;
@@ -554,19 +557,19 @@ typedef octave_int<uint64_t> octave_uint
   operator OP (const octave_int<T1>& x, const octave_int<T2>& y) \
   { \
     double tx = static_cast<double> (x.value ()); \
     double ty = static_cast<double> (y.value ()); \
     double r = tx OP ty; \
     return OCTAVE_INT_FIT_TO_RANGE2 (r, T1, T2); \
   }
 
-OCTAVE_INT_BIN_OP(+)
-OCTAVE_INT_BIN_OP(-)
-OCTAVE_INT_BIN_OP(*)
+OCTAVE_INT_BIN_OP (+)
+OCTAVE_INT_BIN_OP (-)
+OCTAVE_INT_BIN_OP (*)
 
 template <class T1, class T2>
 octave_int<typename octave_int_binop_traits<T1, T2>::TR>
 operator / (const octave_int<T1>& x, const octave_int<T2>& y)
 {
   double tx = static_cast<double> (x.value ());
   double ty = static_cast<double> (y.value ());
   double r = (tx == 0 && ty == 0) ? 0 : xround (tx / ty);
@@ -579,36 +582,36 @@ operator / (const octave_int<T1>& x, con
   operator OP (const octave_int<T>& x, double y) \
   { \
     double tx = static_cast<double> (x.value ()); \
     double r = xround (tx OP y); \
     r = __lo_ieee_isnan (r) ? 0 : xround (r); \
     return OCTAVE_INT_FIT_TO_RANGE (r, T); \
   }
 
-OCTAVE_INT_DOUBLE_BIN_OP(+)
-OCTAVE_INT_DOUBLE_BIN_OP(-)
-OCTAVE_INT_DOUBLE_BIN_OP(*)
-OCTAVE_INT_DOUBLE_BIN_OP(/)
+OCTAVE_INT_DOUBLE_BIN_OP (+)
+OCTAVE_INT_DOUBLE_BIN_OP (-)
+OCTAVE_INT_DOUBLE_BIN_OP (*)
+OCTAVE_INT_DOUBLE_BIN_OP (/)
 
 #define OCTAVE_DOUBLE_INT_BIN_OP(OP) \
   template <class T> \
   octave_int<T> \
   operator OP (double x, const octave_int<T>& y) \
   { \
     double ty = static_cast<double> (y.value ()); \
     double r = x OP ty; \
     r = __lo_ieee_isnan (r) ? 0 : xround (r); \
     return OCTAVE_INT_FIT_TO_RANGE (r, T); \
   }
 
-OCTAVE_DOUBLE_INT_BIN_OP(+)
-OCTAVE_DOUBLE_INT_BIN_OP(-)
-OCTAVE_DOUBLE_INT_BIN_OP(*)
-OCTAVE_DOUBLE_INT_BIN_OP(/)
+OCTAVE_DOUBLE_INT_BIN_OP (+)
+OCTAVE_DOUBLE_INT_BIN_OP (-)
+OCTAVE_DOUBLE_INT_BIN_OP (*)
+OCTAVE_DOUBLE_INT_BIN_OP (/)
 
 #define OCTAVE_INT_DOUBLE_CMP_OP(OP) \
   template <class T> \
   bool \
   operator OP (const octave_int<T>& x, const double& y) \
   { \
     double tx = static_cast<double> (x.value ()); \
     return tx OP y; \
@@ -643,36 +646,36 @@ OCTAVE_DOUBLE_INT_CMP_OP (!=)
   operator OP (const octave_int<T>& x, float y) \
   { \
     double tx = static_cast<double> (x.value ()); \
     double r = xround (tx OP y); \
     r = __lo_ieee_isnan (r) ? 0 : xround (r); \
     return OCTAVE_INT_FIT_TO_RANGE (r, T); \
   }
 
-OCTAVE_INT_FLOAT_BIN_OP(+)
-OCTAVE_INT_FLOAT_BIN_OP(-)
-OCTAVE_INT_FLOAT_BIN_OP(*)
-OCTAVE_INT_FLOAT_BIN_OP(/)
+OCTAVE_INT_FLOAT_BIN_OP (+)
+OCTAVE_INT_FLOAT_BIN_OP (-)
+OCTAVE_INT_FLOAT_BIN_OP (*)
+OCTAVE_INT_FLOAT_BIN_OP (/)
 
 #define OCTAVE_FLOAT_INT_BIN_OP(OP) \
   template <class T> \
   octave_int<T> \
   operator OP (float x, const octave_int<T>& y) \
   { \
     double ty = static_cast<double> (y.value ()); \
     double r = x OP ty; \
     r = __lo_ieee_isnan (r) ? 0 : xround (r); \
     return OCTAVE_INT_FIT_TO_RANGE (r, T); \
   }
 
-OCTAVE_FLOAT_INT_BIN_OP(+)
-OCTAVE_FLOAT_INT_BIN_OP(-)
-OCTAVE_FLOAT_INT_BIN_OP(*)
-OCTAVE_FLOAT_INT_BIN_OP(/)
+OCTAVE_FLOAT_INT_BIN_OP (+)
+OCTAVE_FLOAT_INT_BIN_OP (-)
+OCTAVE_FLOAT_INT_BIN_OP (*)
+OCTAVE_FLOAT_INT_BIN_OP (/)
 
 #define OCTAVE_INT_FLOAT_CMP_OP(OP) \
   template <class T> \
   bool \
   operator OP (const octave_int<T>& x, const float& y) \
   { \
     double tx = static_cast<double> (x.value ()); \
     return tx OP y; \
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,10 +1,12 @@
 2008-07-30  John W. Eaton  <jwe@octave.org>
 
+	* ov-intx.h, ov.cc: Style fixes.
+
 	* gripes.cc (gripe_truncated_conversion): Use the warning ID
 	Octave:int-convert-overflow.
 
 2008-07-30  Jaroslav Hajek <highegg@gmail.com>
 
 	* gripes.cc (gripe_truncated_conversion): New function.
 	* gripes.h (gripe_truncated_conversion): Declare it.
 	* ops.h (DEFCONVFNX2): New macro.
diff --git a/src/ov-intx.h b/src/ov-intx.h
--- a/src/ov-intx.h
+++ b/src/ov-intx.h
@@ -64,29 +64,28 @@ public:
     { return new OCTAVE_VALUE_INT_MATRIX_T (); }
 
   bool OCTAVE_TYPE_PREDICATE_FUNCTION (void) const { return true; }
 
   bool is_integer_type (void) const { return true; }
 
 private:
 
-  template <class _int_matrix>
-  _int_matrix convert_gripe () const
+  template <class IM>
+  IM convert_gripe () const
     {
-      typedef typename _int_matrix::element_type dest_el_type;
+      typedef typename IM::element_type dest_el_type;
       typedef OCTAVE_INT_NDARRAY_T::element_type src_el_type;
       dest_el_type::clear_trunc_flag ();
-      _int_matrix retval (matrix);
+      IM retval (matrix);
       if (dest_el_type::get_trunc_flag ())
         {
           gripe_truncated_conversion (src_el_type::type_name (),
                                       dest_el_type::type_name ());
           dest_el_type::clear_trunc_flag ();
-
         }
 
       return retval;
     }
 
 public:
 
   int8NDArray
@@ -424,23 +423,23 @@ public:
     }
 
   bool OCTAVE_TYPE_PREDICATE_FUNCTION (void) const { return true; }
 
   bool is_integer_type (void) const { return true; }
 
 private:
 
-  template <class _int_scalar>
-  _int_scalar convert_gripe () const
+  template <class IS>
+  IS convert_gripe () const
     {
-      typedef _int_scalar dest_el_type;
+      typedef IS dest_el_type;
       typedef OCTAVE_INT_T src_el_type;
       dest_el_type::clear_trunc_flag ();
-      _int_scalar retval (scalar);
+      IS retval (scalar);
       if (dest_el_type::get_trunc_flag ())
         {
           gripe_truncated_conversion (src_el_type::type_name (),
                                       dest_el_type::type_name ());
           dest_el_type::clear_trunc_flag ();
 
         }
 
diff --git a/src/ov.cc b/src/ov.cc
--- a/src/ov.cc
+++ b/src/ov.cc
@@ -1345,29 +1345,29 @@ octave_value::vector_value (bool force_s
                                              force_vector_conversion,
                                              type_name (), "real vector"));
 }
 
 template <class T>
 static Array<int>
 convert_to_int_array (const Array<octave_int<T> >& A)
 {
-  Array<int> O (A.dims ());
+  Array<int> retval (A.dims ());
   octave_idx_type n = A.numel ();
 
   octave_int<int>::clear_trunc_flag ();
   for (octave_idx_type i = 0; i < n; i++)
-    O.xelem (i) = octave_int<int> (A.xelem (i));
+    retval.xelem (i) = octave_int<int> (A.xelem (i));
   if (octave_int<int>::get_trunc_flag ())
     {
       gripe_truncated_conversion (octave_int<T>::type_name (), "int");
       octave_int<int>::clear_trunc_flag ();
     }
 
-  return O;
+  return retval;
 }
 
 Array<int>
 octave_value::int_vector_value (bool force_string_conv, bool require_int,
 				bool force_vector_conversion) const
 {
   Array<int> retval;
 
