# HG changeset patch
# User CarnÃ« Draug <carandraug@octave.org>
# Date 1494860975 -3600
#      Mon May 15 16:09:35 2017 +0100
# Node ID b9c66b9b5fc856de332b22b64bcf5e8074324ed6
# Parent  bf063fafeca506428d904e2a3213717e20d188c2
gray2ind.m: revert accidental changes included in bf063fafeca5

diff --git a/scripts/image/gray2ind.m b/scripts/image/gray2ind.m
--- a/scripts/image/gray2ind.m
+++ b/scripts/image/gray2ind.m
@@ -38,18 +38,18 @@
 ## Adapted-By: jwe
 
 function [I, map] = gray2ind (I, n = 64)
 
   if (nargin < 1 || nargin > 2)
     print_usage ();
   elseif (! isreal (I) || issparse (I) || ! ismatrix(I))
     error ("gray2ind: I must be a grayscale or binary image");
-  elseif (! isscalar (n) || n < 1 )
-    error ("gray2ind: N must be a positive integer");
+  elseif (! isscalar (n) || n < 1 || n > 65536)
+    error ("gray2ind: N must be a positive integer in the range [1, 65536]");
   endif
 
   ## default n is different if image is logical
   if (nargin == 1 && islogical (I))
     n = 2;
   endif
 
   cls = class (I);
@@ -71,24 +71,18 @@ function [I, map] = gray2ind (I, n = 64)
     scale = 1;
   endif
   I *= (n-1)/scale;
 
   ## Note: no separate call to round () necessary because
   ##       type conversion does that automatically.
   if (n <= 256)
     I = uint8 (I);
-  elseif (n <= 65536)
+  else
     I = uint16 (I);
-  elseif (n <= 4294967296)
-    I = uint32 (I);
-  elseif (n <= intmax ("uint64"))
-    I = uint64 (I);
-  else
-    error ("gray2ind: N is larger than uint64 max value");
   endif
 
 endfunction
 
 
 %!assert (gray2ind ([0 0.25 0.5 1]), uint8 ([0 16 32 63]))
 %!assert (gray2ind ([0 0.25 0.5 1], 400), uint16 ([0 100 200 399]))
 %!assert (gray2ind (logical ([1 0 0 1])), uint8 ([1 0 0 1]))
@@ -102,17 +96,16 @@ endfunction
 %!assert (gray2ind ([0 0.25 0.5 1], 256), uint8 ([0 64 128 255]))
 %!assert (gray2ind ([0 (1/511) (1/510) 1-(1/509) 1-(1/510) 1], 256),
 %!        uint8 ([0 0 1 254 255 255]))
 
 %!test
 %! assert (class (gray2ind ([0.0 0.5 1.0], 255)), "uint8");
 %! assert (class (gray2ind ([0.0 0.5 1.0], 256)), "uint8");
 %! assert (class (gray2ind ([0.0 0.5 1.0], 257)), "uint16");
-%! assert (class (gray2ind ([0.0 0.5 1.0], 655537)), "uint32")
 
 ## Test input validation
 %!error gray2ind ()
 %!error gray2ind (1,2,3)
 %!error <I must be a grayscale or binary image> gray2ind ({1})
 %!error <I must be a grayscale or binary image> gray2ind ([1+i])
 %!error <I must be a grayscale or binary image> gray2ind (sparse ([1]))
 %!error <I must be a grayscale or binary image> gray2ind (ones (2,2,3))
