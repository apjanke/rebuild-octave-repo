# HG changeset patch
# User Torsten <ttl@justmail.de>
# Date 1422135980 -3600
#      Sat Jan 24 22:46:20 2015 +0100
# Branch gui-release
# Node ID 8ef79bc61d8a2377e0760f64ba7866ce249c9b1f
# Parent  9803fd881504b0327d83e24136472fb8343e1622
add actions for moving/selecting to matching brace

* file-editor-tab.cc (move_match_brace): new slot for signal from editor for
  moving or selecting to the matching brace

* file-editor-tab.h: new slot move_match_brace

* file-editor.cc (request_move_match_brace): new slot for new action;
  (request_sel_match_brace): new slot for new action;
  (construct): add new action for moving/selecting to matching brace into
  edit/navigation menu;
  (add_file_editor_tab): connect new signal to new slot in file_editor_tab;
  (set_shortcuts): set the shortcuts from the settings for the new actions

* file-editor.h: new actions, new related slots, new signals for editor tabs

* shortcut-manager.cc (do_init_data): initialize shortcuts for new actions
  from settings or with default values

diff --git a/libgui/src/m-editor/file-editor-tab.cc b/libgui/src/m-editor/file-editor-tab.cc
--- a/libgui/src/m-editor/file-editor-tab.cc
+++ b/libgui/src/m-editor/file-editor-tab.cc
@@ -1043,16 +1043,28 @@ file_editor_tab::goto_line (const QWidge
           center_current_line ();
         }
     }
   else  // go to given line without dialog
     _edit_area->setCursorPosition (line-1, 0);
 }
 
 void
+file_editor_tab::move_match_brace (const QWidget *ID, bool select)
+{
+  if (ID != this)
+    return;
+
+  if (select)
+    _edit_area->selectToMatchingBrace ();
+  else
+    _edit_area->moveToMatchingBrace ();
+}
+
+void
 file_editor_tab::show_auto_completion (const QWidget *ID)
 {
   if (ID != this)
     return;
 
   QsciScintilla::AutoCompletionSource s = _edit_area->autoCompletionSource ();
   switch (s)
     {
diff --git a/libgui/src/m-editor/file-editor-tab.h b/libgui/src/m-editor/file-editor-tab.h
--- a/libgui/src/m-editor/file-editor-tab.h
+++ b/libgui/src/m-editor/file-editor-tab.h
@@ -101,16 +101,17 @@ public slots:
   void convert_eol (const QWidget *ID, QsciScintilla::EolMode);
 
   void zoom_in (const QWidget *ID);
   void zoom_out (const QWidget *ID);
   void zoom_normal (const QWidget *ID);
 
   void find (const QWidget *ID);
   void goto_line (const QWidget *ID, int line = -1);
+  void move_match_brace (const QWidget *ID, bool select);
   void show_auto_completion (const QWidget *ID);
 
   void insert_debugger_pointer (const QWidget *ID, int line = -1);
   void delete_debugger_pointer (const QWidget *ID, int line = -1);
 
   void do_breakpoint_marker (bool insert, const QWidget *ID, int line = -1);
 
   void set_modified (bool modified = true);
diff --git a/libgui/src/m-editor/file-editor.cc b/libgui/src/m-editor/file-editor.cc
--- a/libgui/src/m-editor/file-editor.cc
+++ b/libgui/src/m-editor/file-editor.cc
@@ -855,16 +855,27 @@ file_editor::request_find (bool)
 }
 
 void
 file_editor::request_goto_line (bool)
 {
   emit fetab_goto_line (_tab_widget->currentWidget ());
 }
 
+void
+file_editor::request_move_match_brace (bool)
+{
+  emit fetab_move_match_brace (_tab_widget->currentWidget (), false);
+}
+
+void
+file_editor::request_sel_match_brace (bool)
+{
+  emit fetab_move_match_brace (_tab_widget->currentWidget (), true);
+}
 
 void
 file_editor::request_completion (bool)
 {
   emit fetab_completion (_tab_widget->currentWidget ());
 }
 
 void
@@ -1397,16 +1408,23 @@ file_editor::construct (void)
           tr ("Convert Line Endings to &Mac (CR)"),
           SLOT (request_conv_eol_mac (bool)));
 
   _edit_nav_menu = editMenu->addMenu (tr ("Navi&gation"));
 
   _goto_line_action = add_action (_edit_nav_menu, QIcon (),
           tr ("Go &to Line..."), SLOT (request_goto_line (bool)));
 
+  _edit_cmd_menu->addSeparator ();
+
+  _move_to_matching_brace  = add_action (_edit_nav_menu, QIcon (),
+          tr ("Move to Matching Brace"), SLOT (request_move_match_brace (bool)));
+  _sel_to_matching_brace  = add_action (_edit_nav_menu, QIcon (),
+          tr ("Select to Matching Brace"), SLOT (request_sel_match_brace (bool)));
+
   _edit_nav_menu->addSeparator ();
 
   _next_bookmark_action =  add_action (_edit_nav_menu, QIcon (),
           tr ("&Next Bookmark"), SLOT (request_next_bookmark (bool)));
   _previous_bookmark_action =  add_action (_edit_nav_menu, QIcon (),
           tr ("Pre&vious Bookmark"), SLOT (request_previous_bookmark (bool)));
   _toggle_bookmark_action =  add_action (_edit_nav_menu, QIcon (),
           tr ("Toggle &Bookmark"), SLOT (request_toggle_bookmark (bool)));
@@ -1710,16 +1728,19 @@ file_editor::add_file_editor_tab (file_e
            f, SLOT (convert_eol (const QWidget*, QsciScintilla::EolMode)));
 
   connect (this, SIGNAL (fetab_find (const QWidget*)),
            f, SLOT (find (const QWidget*)));
 
   connect (this, SIGNAL (fetab_goto_line (const QWidget*, int)),
            f, SLOT (goto_line (const QWidget*, int)));
 
+  connect (this, SIGNAL (fetab_move_match_brace (const QWidget*, bool)),
+           f, SLOT (move_match_brace (const QWidget*, bool)));
+
   connect (this, SIGNAL (fetab_completion (const QWidget*)),
            f, SLOT (show_auto_completion (const QWidget*)));
 
   connect (this, SIGNAL (fetab_set_focus (const QWidget*)),
            f, SLOT (set_focus (const QWidget*)));
 
   connect (this, SIGNAL (fetab_insert_debugger_pointer (const QWidget*, int)),
            f, SLOT (insert_debugger_pointer (const QWidget*, int)));
@@ -1801,16 +1822,18 @@ file_editor::set_shortcuts ()
   shortcut_manager::set_shortcut (_uncomment_selection_action, "editor_edit:uncomment_selection");
 
   shortcut_manager::set_shortcut (_upper_case_action, "editor_edit:upper_case");
   shortcut_manager::set_shortcut (_lower_case_action, "editor_edit:lower_case");
   shortcut_manager::set_shortcut (_indent_selection_action, "editor_edit:indent_selection");
   shortcut_manager::set_shortcut (_unindent_selection_action, "editor_edit:unindent_selection");
   shortcut_manager::set_shortcut (_completion_action, "editor_edit:completion_list");
   shortcut_manager::set_shortcut (_goto_line_action, "editor_edit:goto_line");
+  shortcut_manager::set_shortcut (_move_to_matching_brace, "editor_edit:move_to_brace");
+  shortcut_manager::set_shortcut (_sel_to_matching_brace, "editor_edit:select_to_brace");
   shortcut_manager::set_shortcut (_toggle_bookmark_action, "editor_edit:toggle_bookmark");
   shortcut_manager::set_shortcut (_next_bookmark_action, "editor_edit:next_bookmark");
   shortcut_manager::set_shortcut (_previous_bookmark_action, "editor_edit:previous_bookmark");
   shortcut_manager::set_shortcut (_remove_bookmark_action, "editor_edit:remove_bookmark");
   shortcut_manager::set_shortcut (_preferences_action, "editor_edit:preferences");
   shortcut_manager::set_shortcut (_styles_preferences_action, "editor_edit:styles_preferences");
 
   shortcut_manager::set_shortcut (_conv_eol_windows_action, "editor_edit:conv_eol_winows");
diff --git a/libgui/src/m-editor/file-editor.h b/libgui/src/m-editor/file-editor.h
--- a/libgui/src/m-editor/file-editor.h
+++ b/libgui/src/m-editor/file-editor.h
@@ -91,16 +91,17 @@ signals:
   void fetab_remove_all_breakpoints (const QWidget* ID);
   void fetab_comment_selected_text (const QWidget* ID);
   void fetab_uncomment_selected_text (const QWidget* ID);
   void fetab_indent_selected_text (const QWidget* ID);
   void fetab_unindent_selected_text (const QWidget* ID);
   void fetab_convert_eol (const QWidget* ID, QsciScintilla::EolMode eol_mode);
   void fetab_find (const QWidget* ID);
   void fetab_goto_line (const QWidget* ID, int line = -1);
+  void fetab_move_match_brace (const QWidget* ID, bool select);
   void fetab_completion (const QWidget*);
   void fetab_insert_debugger_pointer (const QWidget* ID, int line = -1);
   void fetab_delete_debugger_pointer (const QWidget* ID, int line = -1);
   void fetab_do_breakpoint_marker (bool insert, const QWidget* ID,
                                    int line = -1);
   void fetab_set_focus (const QWidget* ID);
   void fetab_scintilla_command (const QWidget* ID, unsigned int sci_msg);
 
@@ -141,16 +142,18 @@ public slots:
   void request_save_file_as (bool);
   void request_run_file (bool);
   void request_context_run (bool);
   void request_toggle_bookmark (bool);
   void request_next_bookmark (bool);
   void request_previous_bookmark (bool);
   void request_remove_bookmark (bool);
 
+  void request_move_match_brace (bool);
+  void request_sel_match_brace (bool);
   void request_toggle_breakpoint (bool);
   void request_next_breakpoint (bool);
   void request_previous_breakpoint (bool);
   void request_remove_breakpoint (bool);
 
   void request_delete_start_word (bool);
   void request_delete_end_word (bool);
   void request_delete_start_line (bool);
@@ -300,16 +303,18 @@ private:
   QAction *_cut_line_action;
   QAction *_duplicate_selection_action;
   QAction *_transpose_line_action;
 
   QAction *_find_action;
   QAction *_goto_line_action;
   QAction *_completion_action;
 
+  QAction *_move_to_matching_brace;
+  QAction *_sel_to_matching_brace;
   QAction *_next_bookmark_action;
   QAction *_previous_bookmark_action;
   QAction *_toggle_bookmark_action;
   QAction * _remove_bookmark_action;
 
   QAction *_print_action;
   QAction *_run_action;
   QAction *_run_selection_action;
diff --git a/libgui/src/shortcut-manager.cc b/libgui/src/shortcut-manager.cc
--- a/libgui/src/shortcut-manager.cc
+++ b/libgui/src/shortcut-manager.cc
@@ -250,16 +250,20 @@ shortcut_manager::do_init_data ()
         QKeySequence ());
   init (tr ("Convert Line Ednings to Unix"), "editor_edit:conv_eol_unix",
         QKeySequence ());
   init (tr ("Convert Line Ednings to Mac"), "editor_edit:conv_eol_mac",
         QKeySequence ());
 
   init (tr ("Goto Line"), "editor_edit:goto_line",
         QKeySequence (ctrl + Qt::Key_G));
+  init (tr ("Move to Matching Brace"), "editor_edit:move_to_brace",
+        QKeySequence (ctrl + Qt::Key_M));
+  init (tr ("Select to Matching Brace"), "editor_edit:select_to_brace",
+        QKeySequence (ctrl_shift + Qt::Key_M));
   init (tr ("Toggle Bookmark"), "editor_edit:toggle_bookmark",
         QKeySequence (prefix + Qt::Key_F7));
   init (tr ("Next Bookmark"), "editor_edit:next_bookmark",
         QKeySequence (prefix + Qt::Key_F2));
   init (tr ("Previous Bookmark"), "editor_edit:previous_bookmark",
         QKeySequence (prefix + Qt::SHIFT + Qt::Key_F2));
   init (tr ("Remove All Bookmark"), "editor_edit:remove_bookmark",
         QKeySequence ());
