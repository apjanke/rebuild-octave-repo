# HG changeset patch
# User Daniel J Sebald <daniel.sebald@ieee.org>
# Date 1365756536 18000
#      Fri Apr 12 03:48:56 2013 -0500
# Node ID 17941fedd4ce4fd2ec168cf33ae2396222396b14
# Parent  4d8462fe15b93f06b687b447b4242d64d6850b1d
Change workspace row height to font height.

* main-window.cc (main_window::construct): Connect workspace_model signal to
workspace_view slot.

* workspace-view.cc, workspace-view.h (workspace_view::workspace_view): New
variable view_previous_row_count initialized to zero.
(workspace_view::contextmenu_requested): Rename pos from shadow to qpos.
(workspace_view::handle_model_changed): New slot to adjust appearance.

diff --git a/libgui/src/main-window.cc b/libgui/src/main-window.cc
--- a/libgui/src/main-window.cc
+++ b/libgui/src/main-window.cc
@@ -665,16 +665,18 @@ main_window::handle_create_inputlayout (
 // Main subroutine of the constructor
 void
 main_window::construct (void)
 {
   _closing = false;   // flag for editor files when closed
   setWindowIcon (QIcon (":/actions/icons/logo.png"));
 
   workspace_window->setModel (_workspace_model);
+  connect (_workspace_model, SIGNAL (model_changed (void)),
+           workspace_window, SLOT (handle_model_changed (void)));
 
   // Create and set the central widget.  QMainWindow takes ownership of
   // the widget (pointer) so there is no need to delete the object upon
   // destroying this main_window.
 
   QWidget *dummyWidget = new QWidget ();
   dummyWidget->setObjectName ("CentralDummyWidget");
   dummyWidget->resize (10, 10);
diff --git a/libgui/src/workspace-view.cc b/libgui/src/workspace-view.cc
--- a/libgui/src/workspace-view.cc
+++ b/libgui/src/workspace-view.cc
@@ -44,16 +44,17 @@ workspace_view::workspace_view (QWidget 
 {
   setObjectName ("WorkspaceView");
   setWindowIcon (QIcon (":/actions/icons/logo.png"));
   setWindowTitle (tr ("Workspace"));
   setStatusTip (tr ("View the variables in the active workspace."));
 
   view->setWordWrap (false);
   view->setContextMenuPolicy (Qt::CustomContextMenu);
+  view_previous_row_count = 0;
 
   // Set an empty widget, so we can assign a layout to it.
   setWidget (new QWidget (this));
 
   // Create a new layout and add widgets to it.
   QVBoxLayout *vbox_layout = new QVBoxLayout ();
   vbox_layout->addWidget (view);
   vbox_layout->setMargin (2);
@@ -91,21 +92,21 @@ workspace_view::~workspace_view (void)
 void
 workspace_view::closeEvent (QCloseEvent *e)
 {
   emit active_changed (false);
   QDockWidget::closeEvent (e);
 }
 
 void
-workspace_view::contextmenu_requested (const QPoint& pos)
+workspace_view::contextmenu_requested (const QPoint& qpos)
 {
   QMenu menu (this);
 
-  QModelIndex index = view->indexAt (pos);
+  QModelIndex index = view->indexAt (qpos);
   QAbstractItemModel *m = view->model ();
 
   // if it isnt Local, Glocal etc, allow the ctx menu
   if (index.isValid() && index.column () == 0)
     {
       index = index.sibling (index.row(), 0);
 
       QMap<int, QVariant> item_data = m->itemData (index);
@@ -132,17 +133,17 @@ workspace_view::contextmenu_requested (c
                       SLOT (handle_contextmenu_disp ()));
 
       menu.addAction ("plot(" + var_name + ")", this,
                       SLOT (handle_contextmenu_plot ()));
 
       menu.addAction ("stem(" + var_name + ")", this,
                       SLOT (handle_contextmenu_stem ()));
 
-      menu.exec (view->mapToGlobal (pos));
+      menu.exec (view->mapToGlobal (qpos));
     }
 }
 
 void
 workspace_view::handle_contextmenu_copy (void)
 {
   QModelIndex index = view->currentIndex ();
 
@@ -223,8 +224,21 @@ workspace_view::relay_contextmenu_comman
 
       QMap<int, QVariant> item_data = m->itemData (index);
   
       QString var_name = item_data[0].toString ();
 
       emit command_requested (cmdname + "(" + var_name + ")\n");
     }
 }
+
+void
+workspace_view::handle_model_changed (void)
+{
+  // Just modify those rows that have been added rather than go through
+  // the whole list.  For-loop test will handle when number of rows reduced.
+  QFontMetrics fm = view->fontMetrics ();
+  int row_height =  fm.height ();
+  int new_row_count = view->model ()->rowCount ();
+  for (int i = view_previous_row_count; i < new_row_count; i++)
+    view->setRowHeight (i, row_height);
+  view_previous_row_count = new_row_count;
+}
diff --git a/libgui/src/workspace-view.h b/libgui/src/workspace-view.h
--- a/libgui/src/workspace-view.h
+++ b/libgui/src/workspace-view.h
@@ -60,16 +60,19 @@ protected slots:
 
   // context menu slots
   void handle_contextmenu_copy (void);
   void handle_contextmenu_rename (void);
   void handle_contextmenu_disp (void);
   void handle_contextmenu_plot (void);
   void handle_contextmenu_stem (void);
 
+  void handle_model_changed (void);
+
 private:
 
   void relay_contextmenu_command (const QString& cmdname);
 
   QTableView *view;
+  int view_previous_row_count;
 };
 
 #endif
