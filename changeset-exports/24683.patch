# HG changeset patch
# User Markus MÃ¼tzel <markus.muetzel@gmx.de>
# Date 1517692629 -3600
#      Sat Feb 03 22:17:09 2018 +0100
# Node ID 328053e1d23248a568db947d34d36712b2e631b6
# Parent  d14321ad1b718c233e6b5c25ad564af60d865ca2
Avoid warnings when compiling for win32 (bug #53049)

* signal-wrappers.c (octave_async_signals, signal_watcher): Don't compile
unused functions for win32.

diff --git a/liboctave/wrappers/signal-wrappers.c b/liboctave/wrappers/signal-wrappers.c
--- a/liboctave/wrappers/signal-wrappers.c
+++ b/liboctave/wrappers/signal-wrappers.c
@@ -541,16 +541,17 @@ octave_save_signal_mask (void)
 }
 
 void
 octave_restore_signal_mask (void)
 {
   sigprocmask (SIG_SETMASK, &octave_signal_mask, 0);
 }
 
+#if ! defined (__WIN32__)
 static const sigset_t *
 octave_async_signals (void)
 {
   static bool initialized = false;
   static sigset_t sigmask;
 
   if (! initialized)
     {
@@ -623,16 +624,17 @@ octave_async_signals (void)
       sigaddset (&sigmask, SIGXFSZ);
 #endif
 
       initialized = true;
     }
 
   return &sigmask;
 }
+#endif
 
 void
 octave_block_async_signals (void)
 {
 #if ! defined (__WIN32__) || defined (__CYGWIN__)
   pthread_sigmask (SIG_BLOCK, octave_async_signals (), 0);
 #endif
 }
@@ -646,16 +648,17 @@ octave_unblock_async_signals (void)
 }
 
 int
 octave_raise_wrapper (int signum)
 {
   return raise (signum);
 }
 
+#if ! defined (__WIN32__)
 static void *
 signal_watcher (void *arg)
 {
   octave_sig_handler *handler = (octave_sig_handler *) arg;
 
   octave_unblock_async_signals ();
 
   const sigset_t *async_signals = octave_async_signals ();
@@ -669,16 +672,17 @@ signal_watcher (void *arg)
           // FIXME: what else should we do?
           abort ();
         }
 
       // Let handler have complete control over what to do.
       (*handler) (sig_caught);
     }
 }
+#endif
 
 void
 octave_create_interrupt_watcher_thread (octave_sig_handler *handler)
 {
 #if ! defined (__WIN32__)
   pthread_t sighandler_thread_id;
 
   if (pthread_create (&sighandler_thread_id, 0, signal_watcher, handler))
