# HG changeset patch
# User Rik <rik@octave.org>
# Date 1473358981 25200
#      Thu Sep 08 11:23:01 2016 -0700
# Node ID 809989ceb5d34a045cba2c3a526a3fe8361aa2c5
# Parent  25122f114a242c1a56659539a50bda5c41ffe8c0
Overhaul scatter function for visual compatibility with Matlab.

* scatter.m: Change docstring to note that the markersize is in units
of points squared and the default is 36.  Change output of function
from "retval" to "h" to match documentation.  Use double quotes in
%!demo blocks per Octave style guidelines.  Update demos to display
better now that SizeData definition has changed.

* __scatter__.m: Change default size data s to 36.  Use sqrt (s) when
calculating MarkerSize property.  Validate that first non-numeric
argument is a ColorSpec before assigning it to color data c.  Change
validation to accept the optional arguments in any order after the
numeric arguments.

diff --git a/scripts/plot/draw/private/__scatter__.m b/scripts/plot/draw/private/__scatter__.m
--- a/scripts/plot/draw/private/__scatter__.m
+++ b/scripts/plot/draw/private/__scatter__.m
@@ -34,23 +34,23 @@ function hg = __scatter__ (varargin)
   else
     z = varargin{6}(:);
     istart = 7;
   endif
 
   if (istart <= nargin)
     s = varargin{istart}(:);
     if (isempty (s) || ischar (s))
-      s = 6;
+      s = 36;
     endif
     if (! ischar (varargin{istart}))
       istart += 1;
     endif
   else
-    s = 6;
+    s = 36;
   endif
 
   ## Remove NaNs
   idx = isnan (x) | isnan (y) | isnan (s);
   if (nd == 3)
     idx |= isnan (z);
     z(idx) = [];
   endif
@@ -71,20 +71,24 @@ function hg = __scatter__ (varargin)
   endif
 
   if (istart <= nargin && firstnonnumeric > istart)
     c = varargin{istart};
     if (isvector (c) && columns (c) != 3)
       c = c(:);
     endif
   elseif (firstnonnumeric == istart && ischar (varargin{istart})
-          && ! (   strcmpi (varargin{istart}, "filled")
-                || strcmpi (varargin{istart}, "fill")))
-    c = varargin{istart};
-    firstnonnumeric += 1;
+          && any (tolower (varargin{istart}(1)) == "ymcrgbwk"))
+    [linespec, valid] = __pltopt__ (fcn, varargin{istart}, false);
+    if (valid)
+      c = varargin{istart};
+      firstnonnumeric += 1;
+    else
+      c = [];
+    endif
   else
     c = [];
   endif
 
   ## Validate inputs
   if (nd == 2 && ! size_equal (x, y))
     error ([fcn ": X and Y must have the same size"]);
   elseif (nd == 3 && ! size_equal (x, y, z))
@@ -106,28 +110,34 @@ function hg = __scatter__ (varargin)
   iarg = firstnonnumeric;
   while (iarg <= nargin)
     arg = varargin{iarg++};
     if (ischar (arg) && (strcmpi (arg, "filled") || strcmpi (arg, "fill")))
       filled = true;
     elseif ((ischar (arg) || iscellstr (arg)) && ! have_marker)
       [linespec, valid] = __pltopt__ (fcn, arg, false);
       if (valid)
+        ## Valid linestyle, but possibly not valid marker
         have_marker = true;
         marker = linespec.marker;
         if (strcmp (marker, "none"))
           marker = "o";
         elseif (isempty (marker))
           have_marker = false;
-          [~, marker] = __next_line_style__ ();
+          marker = "o";
         endif
       else
-        error ("%s: invalid linespec", fcn);
+        ## Prop/Val pair
+        newargs{end+1} = arg;
+        if (iarg <= nargin)
+          newargs{end+1} = varargin{iarg++};
+        endif
       endif
     else
+      ## Prop/Val pair
       newargs{end+1} = arg;
       if (iarg <= nargin)
         newargs{end+1} = varargin{iarg++};
       endif
     endif
   endwhile
 
   if (isempty (c))
@@ -151,16 +161,17 @@ function hg = __scatter__ (varargin)
   addproperty ("sizedata", hg, "data", s);
   addlistener (hg, "xdata", @update_data);
   addlistener (hg, "ydata", @update_data);
   addlistener (hg, "zdata", @update_data);
   addlistener (hg, "cdata", @update_data);
   addlistener (hg, "sizedata", @update_data);
 
   one_explicit_color = ischar (c) || isequal (size (c), [1, 3]);
+  s = sqrt (s);  # size adjustment for visual compatibility w/Matlab
 
   if (numel (x) <= 100)
 
     ## For small number of points, we'll construct an object for each point.
 
     if (numel (s) == 1)
       s = repmat (s, numel (x), 1);
     endif
@@ -372,16 +383,17 @@ function update_data (h, d)
   one_explicit_color = ischar (c) || isequal (size (c), [1, 3]);
   if (! one_explicit_color)
     if (rows (c) == 1)
       c = repmat (c, numel (x), 1);
     endif
   endif
   filled = ! strcmp (get (h, "markerfacecolor"), "none");
   s = get (h, "sizedata");
+  s = sqrt (s);  # size adjustment for visual compatibility w/Matlab 
   if (numel (s) == 1)
     s = repmat (s, numel (x), 1);
   endif
   hlist = get (h, "children");
 
   if (one_explicit_color)
     if (filled)
       if (isempty (z))
diff --git a/scripts/plot/draw/scatter.m b/scripts/plot/draw/scatter.m
--- a/scripts/plot/draw/scatter.m
+++ b/scripts/plot/draw/scatter.m
@@ -27,53 +27,53 @@
 ## @deftypefnx {} {@var{h} =} scatter (@dots{})
 ## Draw a 2-D scatter plot.
 ##
 ## A marker is plotted at each point defined by the coordinates in the vectors
 ## @var{x} and @var{y}.
 ##
 ## The size of the markers is determined by @var{s}, which can be a scalar
 ## or a vector of the same length as @var{x} and @var{y}.  If @var{s}
-## is not given, or is an empty matrix, then a default value of 8 points is
-## used.
+## is not given, or is an empty matrix, then a default value of 36 square
+## points is used (The marker size itself is @code{sqrt (s)}).
 ##
 ## The color of the markers is determined by @var{c}, which can be a string
 ## defining a fixed color; a 3-element vector giving the red, green, and blue
 ## components of the color; a vector of the same length as @var{x} that gives
 ## a scaled index into the current colormap; or an @nospell{Nx3} matrix
 ## defining the RGB color of each marker individually.
 ##
-## The marker to use can be changed with the @var{style} argument, that is a
+## The marker to use can be changed with the @var{style} argument; it is a
 ## string defining a marker in the same manner as the @code{plot} command.
 ## If no marker is specified it defaults to @qcode{"o"} or circles.
 ## If the argument @qcode{"filled"} is given then the markers are filled.
 ##
 ## Additional property/value pairs are passed directly to the underlying
 ## patch object.
 ##
 ## If the first argument @var{hax} is an axes handle, then plot into this axis,
 ## rather than the current axes returned by @code{gca}.
 ##
-## The optional return value @var{h} is a graphics handle to the created patch
-## object.
+## The optional return value @var{h} is a graphics handle to the created
+## scatter object.
 ##
 ## Example:
 ##
 ## @example
 ## @group
 ## x = randn (100, 1);
 ## y = randn (100, 1);
 ## scatter (x, y, [], sqrt (x.^2 + y.^2));
 ## @end group
 ## @end example
 ##
 ## @seealso{scatter3, patch, plot}
 ## @end deftypefn
 
-function retval = scatter (varargin)
+function h = scatter (varargin)
 
   [hax, varargin, nargin] = __plt_get_axis_arg__ ("scatter", varargin{:});
 
   if (nargin < 2)
     print_usage ();
   endif
 
   oldfig = [];
@@ -86,77 +86,75 @@ function retval = scatter (varargin)
     htmp = __scatter__ (hax, 2, "scatter", varargin{:});
   unwind_protect_cleanup
     if (! isempty (oldfig))
       set (0, "currentfigure", oldfig);
     endif
   end_unwind_protect
 
   if (nargout > 0)
-    retval = htmp;
+    h = htmp;
   endif
 
 endfunction
 
 
 %!demo
 %! clf;
 %! x = randn (100, 1);
 %! y = randn (100, 1);
-%! scatter (x, y, 'r');
-%! title ('scatter() plot with red bubbles');
+%! scatter (x, y, "r");
+%! title ("scatter() plot with red bubbles");
 
 %!demo
 %! clf;
 %! x = randn (100, 1);
 %! y = randn (100, 1);
 %! c = x .* y;
-%! scatter (x, y, 20, c, 'filled');
-%! title ('scatter() with colored filled bubbles');
+%! scatter (x, y, 50, c, "filled");
+%! title ("scatter() with colored filled bubbles");
 
 %!demo
 %! clf;
 %! x = randn (100, 1);
 %! y = randn (100, 1);
 %! scatter (x, y, [], sqrt (x.^2 + y.^2));
-%! title ({'scatter() plot'; ...
-%!         'bubble color determined by distance from origin'});
+%! title ({"scatter() plot"; ...
+%!         "bubble color determined by distance from origin"});
 
 %!demo
 %! clf;
 %! rand_10x1_data5 = [0.777753, 0.093848, 0.183162, 0.399499, 0.337997, 0.686724, 0.073906, 0.651808, 0.869273, 0.137949];
 %! rand_10x1_data6 = [0.37460, 0.25027, 0.19510, 0.51182, 0.54704, 0.56087, 0.24853, 0.75443, 0.42712, 0.44273];
 %! x = rand_10x1_data5;
 %! y = rand_10x1_data6;
-%! s = 10 - 10*log (x.^2 + y.^2);
-%! h = scatter (x, y, [], 'r', 's');
-%! title ({'scatter() plot'; ...
-%!         'marker is square, color is red'});
+%! h = scatter (x, y, [], "r", "s");
+%! title ({"scatter() plot"; ...
+%!         "color is red, marker is square"});
 
 %!demo
 %! clf;
 %! rand_10x1_data3 = [0.42262, 0.51623, 0.65992, 0.14999, 0.68385, 0.55929, 0.52251, 0.92204, 0.19762, 0.93726];
 %! rand_10x1_data4 = [0.020207, 0.527193, 0.443472, 0.061683, 0.370277, 0.947349, 0.249591, 0.666304, 0.134247, 0.920356];
 %! x = rand_10x1_data3;
 %! y = rand_10x1_data4;
-%! s = 10 - 10*log (x.^2 + y.^2);
-%! h = scatter (x, y, [], 'r', 's', 'filled');
-%! title ({'scatter() plot'; ...
-%!         'marker is square, marker is filled, color is red'});
+%! h = scatter (x, y, [], "r", "s", "filled");
+%! title ({"scatter() plot"; ...
+%!         "color is red, marker is square, marker is filled"});
 
 %!demo
 %! clf;
 %! rand_10x1_data1 = [0.171577, 0.404796, 0.025469, 0.335309, 0.047814, 0.898480, 0.639599, 0.700247, 0.497798, 0.737940];
 %! rand_10x1_data2 = [0.75495, 0.83991, 0.80850, 0.73603, 0.19360, 0.72573, 0.69371, 0.74388, 0.13837, 0.54143];
 %! x = rand_10x1_data1;
 %! y = rand_10x1_data2;
-%! s = 10 - 10*log (x.^2 + y.^2);
-%! h = scatter (x, y, s, s, 's', 'filled');
-%! title ({'scatter() plot with filled square markers', ...
-%!         'size and color of markers determined by algorithm'});
+%! s = 36 - 30*log (x.^2 + y.^2);
+%! h = scatter (x, y, s, s, "s", "filled");
+%! title ({"scatter() plot with filled square markers", ...
+%!         "size and color of markers determined by algorithm"});
 
 %!demo
 %! clf;
 %! k = 1;
 %! for m = [1, 3]
 %!   for n = [101, 50, 1]
 %!     x = rand (n, 1);
 %!     y = rand (n, 1);
@@ -173,17 +171,17 @@ endfunction
 %!       str = sprintf ("%s: 1 point", str);
 %!     elseif (n < 100)
 %!       str = sprintf ("%s: < 100 points", str);
 %!     else
 %!       str = sprintf ("%s: > 100 points", str);
 %!     endif
 %!     subplot (2,3,k);
 %!     k = k + 1;
-%!     scatter (x, y, 15, colors, "filled");
+%!     scatter (x, y, [], colors, "filled");
 %!     axis ([0 1 0 1]);
 %!     title (str);
 %!   endfor
 %! endfor
 
 %!demo
 %! clf;
 %! k = 1;
@@ -204,14 +202,14 @@ endfunction
 %!       str = sprintf ("%s: 1 point", str);
 %!     elseif (n < 100)
 %!       str = sprintf ("%s: < 100 points", str);
 %!     else
 %!       str = sprintf ("%s: > 100 points", str);
 %!     endif
 %!     subplot (2,3,k);
 %!     k = k + 1;
-%!     scatter (x, y, 15, colors);
+%!     scatter (x, y, [], colors);
 %!     axis ([0 1 0 1]);
 %!     title (str);
 %!   endfor
 %! endfor
 
