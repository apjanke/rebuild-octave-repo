# HG changeset patch
# User jwe
# Date 837384389 0
#      Sun Jul 14 22:46:29 1996 +0000
# Node ID 31e7eb125d89b1be44fe1f21e9ddc7537fa1c056
# Parent  8c09c04f7747bea5cbdbec47170e8b911af22852
[project @ 1996-07-14 22:44:50 by jwe]

diff --git a/src/file-io.cc b/src/file-io.cc
--- a/src/file-io.cc
+++ b/src/file-io.cc
@@ -253,21 +253,21 @@ do_stream_open (const string& name, cons
   octave_base_stream *retval = 0;
 
   fid = -1;
 
   int md = fopen_mode_to_ios_mode (mode);
 
   if (! error_state)
     {
-      octave_base_stream::arch_type at
-	= octave_stream::string_to_arch_type (arch);
+      oct_mach_info::float_format flt_fmt =
+	oct_mach_info::string_to_float_format (arch);
 
       if (! error_state)
-	retval = new octave_fstream (name, md, at);
+	retval = new octave_fstream (name, md, flt_fmt);
     }
 
   return retval;
 }
 
 static octave_base_stream *
 do_stream_open (const octave_value& tc_name, const octave_value& tc_mode,
 		const octave_value& tc_arch, const char *fcn, int& fid)
@@ -296,28 +296,49 @@ do_stream_open (const octave_value& tc_n
     }
   else
     ::error ("%s: file name must be a string", fcn);
 
   return retval;
 }
 
 DEFUN (fopen, args, ,
-  "FILENUM = fopen (FILENAME, MODE [, ARCH]): open a file\n\
+  "[FILENUM, ERRMSG] = fopen (FILENAME, MODE [, ARCH]): open a file\n\
 \n\
-  Valid values for mode include:\n\
+  FILENAME is a string specifying the name of the file.\n\
+\n\
+  MODE is a string specifying whether the file should be opened for\n\
+  reading, writing, or both.  Valid values for MODE include:\n\
 \n\
     r  : open text file for reading\n\
     w  : open text file for writing; discard previous contents if any\n\
     a  : append; open or create text file for writing at end of file\n\
     r+ : open text file for update (i.e., reading and writing)\n\
     w+ : create text file for update; discard previous contents if any\n\
     a+ : append; open or create text file for update, writing at end\n\
 \n\
-  Update mode permits reading from and writing to the same file.")
+  Update mode permits reading from and writing to the same file.\n\
+\n\
+  ARCH is a string specifying the default data format for the file.\n\
+  Valid values for ARCH are:\n\
+\n\
+    native   --  the format of the current machine (this is the default)\n\
+    ieee-le  --  IEEE big endian\n\
+    ieee-be  --  IEEE little endian\n\
+    vaxd     --  VAX D floating format\n\
+    vaxg     --  VAX G floating format\n\
+    cray     --  Cray floating format\n
+\n\
+  however, conversions are currently only supported for ieee-be, and\n\
+  ieee-le formats.\n\
+\n\
+\n\
+  FILENUM is a number that can be used to refer to the open file.\n\
+  If fopen fails, FILENUM is set to -1 and ERRMSG contains a\n\
+  system-dependent error message")
 {
   octave_value_list retval = -1.0;
 
   int nargin = args.length ();
 
   if (nargin == 1)
     {
       if (args(0).is_string () && args(0).string_value () == "all")
@@ -802,38 +823,38 @@ do_fread (octave_stream& os, const octav
   Matrix size = size_arg.matrix_value ();
 
   if (! error_state)
     {
       string prec = prec_arg.string_value ();
 
       if (! error_state)
 	{
-	  octave_base_stream::data_type dt
-	    = octave_stream::string_to_data_type (prec);
+	  oct_data_conv::data_type dt
+	    = oct_data_conv::string_to_data_type (prec);
 
 	  if (! error_state)
 	    {
 	      double dskip = skip_arg.double_value ();
 
 	      if (! error_state)
 		{
 		  if (D_NINT (dskip) == dskip)
 		    {
 		      int skip = NINT (dskip);
 
 		      string arch = arch_arg.string_value ();
 
 		      if (! error_state)
 			{
-			  octave_base_stream::arch_type at
-			    = octave_stream::string_to_arch_type (arch);
+			  oct_mach_info::float_format flt_fmt
+			    = oct_mach_info::string_to_float_format (arch);
 
 			  if (! error_state)
-			    retval = os.read (size, dt, skip, at, count);
+			    retval = os.read (size, dt, skip, flt_fmt, count);
 			}
 		      else
 			::error ("fread: architecture type must be a string");
 		    }
 		  else
 		    ::error ("fread: skip must be an integer");
 		}
 	      else
@@ -849,33 +870,64 @@ do_fread (octave_stream& os, const octav
     ::error ("fread: invalid size specified");
 
   return retval;
 }
 
 DEFUN (fread, args, ,
   "[DATA, COUNT] = fread (FILENUM [, SIZE] [, PRECISION] [, SKIP] [, ARCH])\n\
 \n\
- Reads data in binary form of type PRECISION from a file.\n\
+Reads data in binary form of type PRECISION from a file.\n\
+\n\
+  FILENUM   : file number from fopen\n\
 \n\
- FILENUM   : file number from fopen\n\
- SIZE      : size specification for the Data matrix\n\
- PRECISION : type of data to read, valid types are\n\
+  SIZE      : size specification for the data matrix\n\
+\n\
+  PRECISION : string specifying type of data to read, valid types are\n\
 \n\
-             \"char\"   \"schar\" \"short\"  \"int\"  \"long\" \"float\"\n\
-             \"double\" \"uchar\" \"ushort\" \"uint\" \"ulong\"\n\
+   char, char*1, integer*1, int8  --  character\n\
+   schar, signed char             --  signed character\n\
+   uchar, unsigned char           --  unsigned character (default)\n\
+   short                          --  short integer\n\
+   ushort, unsigned short         --  unsigned short integer\n\
+   int                            --  integer\n\
+   uint, unsigned int             --  unsigned integer\n\
+   long                           --  long integer\n\
+   ulong, unsigned long           --  unsigned long integer\n\
+   float, float32, real*4         --  single precision float\n\
+   double, float64, real*8        --  double precision float\n\
+   int16, integer*2               --  two byte integer\n\
+   int32, integer*4               --  four byte integer\n\
+\n\
+  SKIP      : number of bytes to skip before each element is read\n\
+              (default is 0)\n\
 \n\
- DATA      : matrix in which the data is stored\n\
- COUNT     : number of elements read")
+  ARCH      : string specifying the data format for the file.  Valid
+              values are\n\
+\n\
+    native   --  the format of the current machine (default)\n\
+    ieee-le  --  IEEE big endian\n\
+    ieee-be  --  IEEE little endian\n\
+    vaxd     --  VAX D floating format\n\
+    vaxg     --  VAX G floating format\n\
+    cray     --  Cray floating format\n
+\n\
+  however, conversions are currently only supported for ieee-be, and\n\
+  ieee-le formats.\n\
+\n\
+\n\
+  DATA      : matrix in which the data is stored\n\
+\n\
+  COUNT     : number of elements read")
 {
   octave_value_list retval;
 
   int nargin = args.length ();
 
-  if (nargin > 1 && nargin < 6)
+  if (nargin > 0 && nargin < 6)
     {
       retval(1) = -1.0;
       retval(0) = Matrix ();
 
       octave_stream *os = octave_stream_list::lookup (args(0));
 
       if (os)
 	{
@@ -884,17 +936,17 @@ DEFUN (fread, args, ,
 
 	  octave_value prec = (nargin > 2)
 	    ? args(2) : octave_value ("uchar");
 
 	  octave_value skip = (nargin > 3)
 	    ? args(3) : octave_value (0.0);
 
 	  octave_value arch = (nargin > 4)
-	    ? args(4) : octave_value ("native");
+	    ? args(4) : octave_value ("unknown");
 
 	  int count = -1;
 
 	  octave_value tmp = do_fread (*os, size, prec, skip, arch, count);
 
 	  retval(1) = (double) count;
 	  retval(0) = tmp;
 	}
@@ -913,38 +965,38 @@ do_fwrite (octave_stream& os, const octa
 	   const octave_value& arch_arg)
 {
   int retval = -1;
 
   string prec = prec_arg.string_value ();
 
   if (! error_state)
     {
-      octave_base_stream::data_type dt
-	= octave_stream::string_to_data_type (prec);
+      oct_data_conv::data_type dt
+	= oct_data_conv::string_to_data_type (prec);
 
       if (! error_state)
 	{
 	  double dskip = skip_arg.double_value ();
 
 	  if (! error_state)
 	    {
 	      if (D_NINT (dskip) == dskip)
 		{
 		  int skip = NINT (dskip);
 
 		  string arch = arch_arg.string_value ();
 
 		  if (! error_state)
 		    {
-		      octave_base_stream::arch_type at
-			= octave_stream::string_to_arch_type (arch);
+		      oct_mach_info::float_format flt_fmt
+			= oct_mach_info::string_to_float_format (arch);
 
 		      if (! error_state)
-			retval = os.write (data, dt, skip, at);
+			retval = os.write (data, dt, skip, flt_fmt);
 		    }
 		  else
 		    ::error ("fwrite: architecture type must be a string");
 		}
 	      else
 		::error ("fwrite: skip must be an integer");
 	    }
 	  else
@@ -955,41 +1007,77 @@ do_fwrite (octave_stream& os, const octa
     ::error ("fwrite: precision must be a string");
 
   return retval;
 }
 
 DEFUN (fwrite, args, ,
   "COUNT = fwrite (FILENUM, DATA [, PRECISION] [, SKIP] [, ARCH])\n\
 \n\
- Writes data to a file in binary form of size PRECISION\n\
+  Writes data to a file in binary form of size PRECISION\n\
+\n\
+  FILENUM   : file number from fopen\n\
+\n\
+  DATA      : matrix of elements to be written\n\
+\n\
+  PRECISION : string specifying type of data to read, valid types are\n\
 \n\
- FILENUM   : file number from fopen\n\
- DATA      : matrix of elements to be written\n\
- PRECISION : type of data to read, valid types are\n\
+   char, char*1, integer*1, int8  --  character\n\
+   schar, signed char             --  signed character\n\
+   uchar, unsigned char           --  unsigned character (default)\n\
+   short                          --  short integer\n\
+   ushort, unsigned short         --  unsigned short integer\n\
+   int                            --  integer\n\
+   uint, unsigned int             --  unsigned integer\n\
+   long                           --  long integer\n\
+   ulong, unsigned long           --  unsigned long integer\n\
+   float, float32, real*4         --  single precision float\n\
+   double, float64, real*8        --  double precision float\n\
+   int16, integer*2               --  two byte integer\n\
+   int32, integer*4               --  four byte integer\n\
 \n\
-             \"char\"   \"schar\" \"short\"  \"int\"  \"long\" \"float\"\n\
-             \"double\" \"uchar\" \"ushort\" \"uint\" \"ulong\"\n\
+  SKIP      : number of bytes to skip before each element is read\n\
+              (the default is 0)\n\
+\n\
+  ARCH      : string specifying the data format for the file.  Valid
+              values are\n\
 \n\
- COUNT     : number of elements written")
+    native   --  the format of the current machine (default)\n\
+    ieee-le  --  IEEE big endian\n\
+    ieee-be  --  IEEE little endian\n\
+    vaxd     --  VAX D floating format\n\
+    vaxg     --  VAX G floating format\n\
+    cray     --  Cray floating format\n
+\n\
+  however, conversions are currently only supported for ieee-be, and\n\
+  ieee-le formats.\n\
+\n\
+\n\
+  COUNT     : number of elements written")
 {
   octave_value retval = -1.0;
 
   int nargin = args.length ();
 
   if (nargin > 1 && nargin < 6)
     {
       octave_stream *os = octave_stream_list::lookup (args(0));
 
       if (os)
 	{
 	  octave_value data = args(1);
-	  octave_value prec = (nargin > 2) ? args(2) : octave_value ("uchar");
-	  octave_value skip = (nargin > 3) ? args(3) : octave_value (0.0);
-	  octave_value arch = (nargin > 4) ? args(4) : octave_value ("native");
+
+	  octave_value prec = (nargin > 2)
+	    ? args(2) : octave_value ("uchar");
+
+	  octave_value skip = (nargin > 3)
+	    ? args(3) : octave_value (0.0);
+
+	  octave_value arch = (nargin > 4)
+	    ? args(4) : octave_value ("unknown");
 
 	  retval = do_fwrite (*os, data, prec, skip, arch);
 	}
       else
 	gripe_invalid_file_id ("fwrite");
     }
   else
     print_usage ("fwrite");
diff --git a/src/load-save.cc b/src/load-save.cc
--- a/src/load-save.cc
+++ b/src/load-save.cc
@@ -31,17 +31,17 @@ Software Foundation, 59 Temple Place - S
 #include <string>
 
 #include <iostream.h>
 #include <fstream.h>
 #include <strstream.h>
 
 #include "byte-swap.h"
 #include "data-conv.h"
-#include "float-fmt.h"
+#include "mach-info.h"
 #include "oct-glob.h"
 #include "str-vec.h"
 
 #include "defun.h"
 #include "error.h"
 #include "gripes.h"
 #include "help.h"
 #include "load-save.h"
@@ -698,17 +698,18 @@ read_ascii_data (istream& is, const stri
 //
 //       for each element:
 //         length         int                 4
 //         data           string         length
 //
 // FILENAME is used for error messages.
 
 static char *
-read_binary_data (istream& is, int swap, floating_point_format fmt,
+read_binary_data (istream& is, int swap,
+		  oct_mach_info::float_format fmt,
 		  const string& filename, int& global,
 		  octave_value& tc, char *&doc)
 {
   char tmp = 0;
 
   FOUR_BYTE_INT name_len = 0, doc_len = 0;
   char *name = 0;
 
@@ -908,17 +909,18 @@ read_binary_data (istream& is, int swap,
 // Read LEN elements of data from IS in the format specified by
 // PRECISION, placing the result in DATA.  If SWAP is nonzero, swap
 // the bytes of each element before copying to DATA.  FLT_FMT
 // specifies the format of the data if we are reading floating point
 // numbers.
 
 static void
 read_mat_binary_data (istream& is, double *data, int precision,
-		      int len, int swap, floating_point_format flt_fmt)
+		      int len, int swap,
+		      oct_mach_info::float_format flt_fmt)
 {
   switch (precision)
     {
     case 0:
       read_doubles (is, data, LS_DOUBLE, len, swap, flt_fmt);
       break;
 
     case 1:
@@ -978,17 +980,17 @@ read_mat_file_header (istream& is, int& 
 // bigger than we expect, so we swap bytes.
 //
 // If mopt is zero, it means the file was written on a little endian
 // machine, and we only need to swap if we are running on a big endian
 // machine.
 //
 // Gag me.
 
-  if (octave_words_big_endian && mopt == 0)
+  if (oct_mach_info::words_big_endian () && mopt == 0)
     swap = 1;
 
   // mopt is signed, therefore byte swap may result in negative value.
 
   if (mopt > 9999 || mopt < 0)
     swap = 1;
 
   if (swap)
@@ -1011,51 +1013,85 @@ read_mat_file_header (istream& is, int& 
 
  data_read_error:
   return -1;
 }
 
 // We don't just use a cast here, because we need to be able to detect
 // possible errors.
 
-static floating_point_format
-get_floating_point_format (int mach)
+static oct_mach_info::float_format
+mopt_digit_to_float_format (int mach)
 {
-  floating_point_format flt_fmt = OCTAVE_UNKNOWN_FLT_FMT;
+  oct_mach_info::float_format flt_fmt = oct_mach_info::unknown;
 
   switch (mach)
     {
     case 0:
-      flt_fmt = OCTAVE_IEEE_LITTLE;
+      flt_fmt = oct_mach_info::ieee_little_endian;
       break;
 
     case 1:
-      flt_fmt = OCTAVE_IEEE_BIG;
+      flt_fmt = oct_mach_info::ieee_big_endian;
       break;
 
     case 2:
-      flt_fmt = OCTAVE_VAX_D;
+      flt_fmt = oct_mach_info::vax_d;
       break;
 
     case 3:
-      flt_fmt = OCTAVE_VAX_G;
+      flt_fmt = oct_mach_info::vax_g;
       break;
 
     case 4:
-      flt_fmt = OCTAVE_CRAY;
+      flt_fmt = oct_mach_info::cray;
       break;
 
     default:
-      flt_fmt = OCTAVE_UNKNOWN_FLT_FMT;
+      flt_fmt = oct_mach_info::unknown;
       break;
     }
 
   return flt_fmt;
 }
 
+static int
+float_format_to_mopt_digit (oct_mach_info::float_format flt_fmt)
+{
+  int retval = -1;
+
+  switch (flt_fmt)
+    {
+    case oct_mach_info::ieee_little_endian:
+      retval = 0;
+      break;
+
+    case oct_mach_info::ieee_big_endian:
+      retval = 1;
+      break;
+
+    case oct_mach_info::vax_d:
+      retval = 2;
+      break;
+
+    case oct_mach_info::vax_g:
+      retval = 3;
+      break;
+
+    case oct_mach_info::cray:
+      retval = 4;
+      break;
+
+    default:
+      break;
+    }
+
+  return retval;
+}
+
 // Extract one value (scalar, matrix, string, etc.) from stream IS and
 // place it in TC, returning the name of the variable.
 //
 // The data is expected to be in Matlab's .mat format, though not all
 // the features of that format are supported.
 //
 // FILENAME is used for error messages.
 //
@@ -1065,17 +1101,17 @@ static char *
 read_mat_binary_data (istream& is, const string& filename,
 		      octave_value& tc)
 {
   // These are initialized here instead of closer to where they are
   // first used to avoid errors from gcc about goto crossing
   // initialization of variable.
 
   Matrix re;
-  floating_point_format flt_fmt = OCTAVE_UNKNOWN_FLT_FMT;
+  oct_mach_info::float_format flt_fmt = oct_mach_info::unknown;
   char *name = 0;
   int swap = 0, type = 0, prec = 0, mach = 0, dlen = 0;
 
   FOUR_BYTE_INT mopt, nr, nc, imag, len;
 
   int err = read_mat_file_header (is, swap, mopt, nr, nc, imag, len);
   if (err)
     {
@@ -1086,18 +1122,19 @@ read_mat_binary_data (istream& is, const
     }
 
   type = mopt % 10; // Full, sparse, etc.
   mopt /= 10;       // Eliminate first digit.
   prec = mopt % 10; // double, float, int, etc.
   mopt /= 100;      // Skip unused third digit too.
   mach = mopt % 10; // IEEE, VAX, etc.
 
-  flt_fmt = get_floating_point_format (mach);
-  if (flt_fmt == OCTAVE_UNKNOWN_FLT_FMT)
+  flt_fmt = mopt_digit_to_float_format (mach);
+
+  if (flt_fmt == oct_mach_info::unknown)
     {
       error ("load: unrecognized binary format!");
       return 0;
     }
 
   if (type != 0 && type != 1)
     {
       error ("load: can't read sparse matrices");
@@ -1175,38 +1212,40 @@ matches_patterns (const string_vector& p
       if (pattern.match (name))
 	return 1;
     }
   return 0;
 }
 
 static int
 read_binary_file_header (istream& is, int& swap,
-			 floating_point_format& flt_fmt, int quiet = 0) 
+			 oct_mach_info::float_format& flt_fmt,
+			 int quiet = 0) 
 {
   int magic_len = 10;
   char magic [magic_len+1];
   is.read (magic, magic_len);
   magic[magic_len] = '\0';
   if (strncmp (magic, "Octave-1-L", magic_len) == 0)
-    swap = octave_words_big_endian;
+    swap = oct_mach_info::words_big_endian ();
   else if (strncmp (magic, "Octave-1-B", magic_len) == 0)
-    swap = ! octave_words_big_endian;
+    swap = ! oct_mach_info::words_big_endian ();
   else
     {
       if (! quiet)
 	error ("load: can't read binary file");
       return -1;
     }
 	
   char tmp = 0;
   is.read (&tmp, 1);
 
-  flt_fmt = get_floating_point_format (tmp);
-  if (flt_fmt == OCTAVE_UNKNOWN_FLT_FMT)
+  flt_fmt = mopt_digit_to_float_format (tmp);
+
+  if (flt_fmt == oct_mach_info::unknown)
     {
       if (! quiet)
         error ("load: unrecognized binary format!");
       return -1;
     }
 
   return 0;
 }
@@ -1220,17 +1259,17 @@ get_file_format (const string& fname, co
 
   if (! file)
     {
       error ("load: couldn't open input file `%s'", orig_fname.c_str ());
       return retval;
     }
 
   int swap;
-  floating_point_format flt_fmt = OCTAVE_UNKNOWN_FLT_FMT;
+  oct_mach_info::float_format flt_fmt = oct_mach_info::unknown;
 
   if (read_binary_file_header (file, swap, flt_fmt, 1) == 0)
     retval = LS_BINARY;
   else
     {
       file.seekg (0, ios::beg);
 
       FOUR_BYTE_INT mopt, nr, nc, imag, len;
@@ -1259,17 +1298,17 @@ get_file_format (const string& fname, co
     error ("load: unable to determine file format for `%s'",
 	   orig_fname.c_str ());
 
   return retval;
 }
 
 static octave_value_list
 do_load (istream& stream, const string& orig_fname, int force,
-	 load_save_format format, floating_point_format flt_fmt,
+	 load_save_format format, oct_mach_info::float_format flt_fmt,
 	 int list_only, int swap, int verbose, const string_vector& argv,
 	 int argv_idx, int argc, int nargout)
 {
   octave_value_list retval;
 
   ostrstream output_buf;
   int count = 0;
   for (;;)
@@ -1437,17 +1476,17 @@ found in the file will be replaced with 
   if (i == argc)
     {
       print_usage ("load");
       return retval;
     }
 
   string orig_fname = argv[i];
 
-  floating_point_format flt_fmt = OCTAVE_UNKNOWN_FLT_FMT;
+  oct_mach_info::float_format flt_fmt = oct_mach_info::unknown;
 
   int swap = 0;
 
   if (argv[i] == "-")
     {
       i++;
 
       if (format != LS_UNKNOWN)
@@ -1721,17 +1760,21 @@ static int
 save_mat_binary_data (ostream& os, const octave_value& tc,
 		      const string& name) 
 {
   int fail = 0;
 
   FOUR_BYTE_INT mopt = 0;
 
   mopt += tc.is_string () ? 1 : 0;
-  mopt += 1000 * get_floating_point_format (native_float_format);
+
+  oct_mach_info::float_format flt_fmt =
+    oct_mach_info::native_float_format ();;
+
+  mopt += 1000 * float_format_to_mopt_digit (flt_fmt);
 
   os.write (&mopt, 4);
   
   FOUR_BYTE_INT nr = tc.rows ();
   os.write (&nr, 4);
 
   FOUR_BYTE_INT nc = tc.columns ();
   os.write (&nc, 4);
@@ -2123,19 +2166,23 @@ get_default_save_format (void)
   return retval;
 }
 
 static void
 write_binary_header (ostream& os, load_save_format format)
 {
   if (format == LS_BINARY)
     {
-      os << (octave_words_big_endian ? "Octave-1-B" : "Octave-1-L");
+      os << (oct_mach_info::words_big_endian ()
+	     ? "Octave-1-B" : "Octave-1-L");
 
-      char tmp = (char) native_float_format;
+      oct_mach_info::float_format flt_fmt =
+	oct_mach_info::native_float_format ();
+
+      char tmp = (char) float_format_to_mopt_digit (flt_fmt);
 
       os.write (&tmp, 1);
     }
 }
 
 static void
 save_vars (const string_vector& argv, int argv_idx, int argc,
 	   ostream& os, int save_builtins, load_save_format fmt,
