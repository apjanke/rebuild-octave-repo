# HG changeset patch
# User jwe
# Date 798737484 0
#      Mon Apr 24 15:31:24 1995 +0000
# Node ID cbdf7db9855476c5e882b57335ff93d458df7ea8
# Parent  d607adf5af66fc94d8b342d6b37b3a9fba48c3d4
[project @ 1995-04-24 15:31:24 by jwe]

diff --git a/src/lex.l b/src/lex.l
--- a/src/lex.l
+++ b/src/lex.l
@@ -137,18 +137,16 @@ BS	(\\)
 CONT	({EL}|{BS})
 Im	[iIjJ]
 CCHAR	[#%]
 COMMENT	({CCHAR}.*{NL})
 SNLCMT	({SNL}|{COMMENT})
 NOTEQ	((~=)|(!=)|(<>))
 POW	((\*\*)|(\^))
 EPOW	(\.{POW})
-PLUS	((\+)|(\.\+))
-MINUS	((\-)|(\.\-))
 NOT	((\~)|(\!))
 IDENT	([_a-zA-Z][_a-zA-Z0-9]*)
 EXPON	([DdEe][+-]?{D}+)
 NUMBER	(({D}+\.?{D}*{EXPON}?)|(\.{D}+{EXPON}?))
 %%
 
 %{
 // Help and other text-style functions are a pain in the ass.  This
@@ -498,16 +496,18 @@ NUMBER	(({D}+\.?{D}*{EXPON}?)|(\.{D}+{EX
     if (nesting_level.empty () || nesting_level.top () == BRACE)
       return '\n';
   }
 
 %{
 // Other operators.
 %}
 
+".+"		{ BIN_OP_RETURN (EPLUS, 0); }
+".-"		{ BIN_OP_RETURN (EMINUS, 0); }
 ".*"		{ BIN_OP_RETURN (EMUL, 0); }
 "./"		{ BIN_OP_RETURN (EDIV, 0); }
 ".\\"		{ BIN_OP_RETURN (ELEFTDIV, 0); }
 {EPOW}		{ BIN_OP_RETURN (EPOW, 0); }
 ".'"		{ do_comma_insert_check (); BIN_OP_RETURN (TRANSPOSE, 1); }
 "++"		{ do_comma_insert_check (); BIN_OP_RETURN (PLUS_PLUS, 1); }
 "--"		{ do_comma_insert_check (); BIN_OP_RETURN (MINUS_MINUS, 1); }
 "<="		{ BIN_OP_RETURN (EXPR_LE, 0); }
@@ -543,23 +543,23 @@ NUMBER	(({D}+\.?{D}*{EXPON}?)|(\.{D}+{EX
   }
 
 {NOT} {
     if (plotting && ! in_plot_range)
       past_plot_range = 1;
     BIN_OP_RETURN (EXPR_NOT, 0);
   }
 
-{PLUS} { 
+"+" { 
     if (plotting && ! in_plot_range)
       past_plot_range = 1;
     BIN_OP_RETURN ('+', 0);
   }
 
-{MINUS} { 
+"-" { 
     if (plotting && ! in_plot_range)
       past_plot_range = 1;
     BIN_OP_RETURN ('-', 0);
   }
 
 "(" {
     if (plotting && ! in_plot_range)
       past_plot_range = 1;
@@ -1234,106 +1234,59 @@ next_token_is_postfix_unary_op (int spc_
 
   un_op = (transpose || (hermitian && ! spc_prev));
 
   return un_op;
 }
 
 // Try to determine if the next token should be treated as a binary
 // operator.  This is even uglier, but it also seems to do the right
-// thing.
+// thing.  Note that it is only necessary to check the spacing for `+'
+// and `-', since those are the only tokens that can appear as unary
+// ops too.
 
 static int
 next_token_is_bin_op (int spc_prev, char *yytext)
 {
   int bin_op = 0;
-  int spc_next = 0;
 
   int c0 = yyinput ();
-  int c1 = yyinput ();
 
   switch (c0)
     {
     case '+':
     case '-':
+      {
+	int c1 = yyinput ();
+	yyunput (c1, yytext);
+	int spc_next = (c1 == ' ' || c1 == '\t');
+	bin_op = looks_like_bin_op (spc_prev, spc_next);
+      }
+      break;
+
     case '/':
     case ':':
     case '\\':
     case '^':
-      spc_next = (c1 == ' ' || c1 == '\t');
-      break;
-
     case '&':
-      if (c1 == '&')
-	spc_next = next_char_is_space ();
-      else
-	spc_next = (c1 == ' ' || c1 == '\t');
-      break;
-
     case '*':
-      if (c1 == '*')
-	spc_next = next_char_is_space ();
-      else
-	spc_next = (c1 == ' ' || c1 == '\t');
-      break;
-	
     case '|':
-      if (c1 == '|')
-	spc_next = next_char_is_space ();
-      else
-	spc_next = (c1 == ' ' || c1 == '\t');
-      break;
-
     case '<':
-      if (c1 == '=' || c1 == '>')
-	spc_next = next_char_is_space ();
-      else
-	spc_next = (c1 == ' ' || c1 == '\t');
-      break;
-
     case '>':
-      if (c1 == '=')
-	spc_next = next_char_is_space ();
-      else
-	spc_next = (c1 == ' ' || c1 == '\t');
-      break;
-
     case '~':
     case '!':
     case '=':
-      if (c1 == '=')
-	spc_next = next_char_is_space ();
-      else
-	goto done;
-      break;
-
     case '.':
-      if (c1 == '*')
-	{
-	  int c2 = yyinput ();
-	  if (c2 == '*')
-	    spc_next = next_char_is_space ();
-	  else
-	    spc_next = (c2 == ' ' || c2 == '\t');
-	  yyunput (c2, yytext);
-	}
-      else if (c1 == '/' || c1 == '\\' || c1 == '^')
-	spc_next = next_char_is_space ();
-      else
-	goto done;
+      bin_op = 1;
       break;
 
     default:
-      goto done;
+      break;
     }
 
-  bin_op = looks_like_bin_op (spc_prev, spc_next);
-
- done:
-  yyunput (c1, yytext);
   yyunput (c0, yytext);
 
   return bin_op;
 }
 
 // Used to delete trailing white space from tokens.
 
 static char *
diff --git a/src/parse.y b/src/parse.y
--- a/src/parse.y
+++ b/src/parse.y
@@ -208,17 +208,18 @@ static tree_index_expression *make_index
   subplot_style *subplot_style_type;
 }
 
 // Tokens with line and column information.
 %token <tok_val> '=' ':' '-' '+' '*' '/'
 %token <tok_val> EXPR_AND_AND EXPR_OR_OR
 %token <tok_val> EXPR_AND EXPR_OR EXPR_NOT
 %token <tok_val> EXPR_LT EXPR_LE EXPR_EQ EXPR_NE EXPR_GE EXPR_GT
-%token <tok_val> LEFTDIV EMUL EDIV ELEFTDIV QUOTE TRANSPOSE
+%token <tok_val> LEFTDIV EMUL EDIV ELEFTDIV EPLUS EMINUS
+%token <tok_val> QUOTE TRANSPOSE
 %token <tok_val> PLUS_PLUS MINUS_MINUS POW EPOW
 %token <tok_val> NUM IMAG_NUM
 %token <tok_val> NAME SCREW
 %token <tok_val> END
 %token <tok_val> PLOT
 %token <tok_val> TEXT STYLE
 %token <tok_val> FOR WHILE IF ELSEIF ELSE BREAK CONTINUE FUNC_RET
 %token <tok_val> UNWIND CLEANUP
@@ -266,17 +267,17 @@ static tree_index_expression *make_index
 
 // Precedence and associativity.
 %left ';' ',' '\n'
 %right '='
 %left EXPR_AND_AND EXPR_OR_OR
 %left EXPR_AND EXPR_OR
 %left EXPR_LT EXPR_LE EXPR_EQ EXPR_NE EXPR_GE EXPR_GT
 %left ':'
-%left '-' '+'
+%left '-' '+' EPLUS EMINUS
 %left '*' '/' LEFTDIV EMUL EDIV ELEFTDIV
 %left QUOTE TRANSPOSE
 %left UNARY PLUS_PLUS MINUS_MINUS EXPR_NOT
 %right POW EPOW
 
 // There are 19 shift/reduce conflicts, ok?
 %expect 19
 
@@ -762,16 +763,20 @@ simple_expr	: simple_expr1
 		| simple_expr '+' simple_expr
 		  { $$ = make_binary_op ('+', $1, $2, $3); }
 		| simple_expr '-' simple_expr
 		  { $$ = make_binary_op ('-', $1, $2, $3); }
 		| simple_expr '*' simple_expr
 		  { $$ = make_binary_op ('*', $1, $2, $3); }
 		| simple_expr '/' simple_expr
 		  { $$ = make_binary_op ('/', $1, $2, $3); }
+		| simple_expr EPLUS simple_expr
+		  { $$ = make_binary_op ('+', $1, $2, $3); }
+		| simple_expr EMINUS simple_expr
+		  { $$ = make_binary_op ('-', $1, $2, $3); }
 		| simple_expr EMUL simple_expr
 		  { $$ = make_binary_op (EMUL, $1, $2, $3); }
 		| simple_expr EDIV simple_expr
 		  { $$ = make_binary_op (EDIV, $1, $2, $3); }
 		| simple_expr LEFTDIV simple_expr
 		  { $$ = make_binary_op (LEFTDIV, $1, $2, $3); }
 		| simple_expr ELEFTDIV simple_expr
 		  { $$ = make_binary_op (ELEFTDIV, $1, $2, $3); }
