# HG changeset patch
# User David Bateman <dbateman@free.fr>
# Date 1235176043 -3600
#      Sat Feb 21 01:27:23 2009 +0100
# Node ID 1685c61542f88e2adb5c18c081189123431e7261
# Parent  8dd69187c4a27e5bfc23a2882a6d93c4e7afe8d7
Don't perform narrowing to full matrices in mixed spare scalar operators

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,15 @@
+2008-02-21  David Bateman  <dbateman@free.fr>
+
+	* OPERATORS/op-cs-scm.cc, OPERATORS/op-cs-sm.cc, OPERATORS/op-s-scm.cc,
+	OPERATORS/op-s-sm.cc, OPERATORS/op-scm-cs.cc, OPERATORS/op-scm-s.cc,
+	OPERATORS/op-sm-cs.cc, OPERATORS/op-sm-s.cc: Don't perform any 
+	narrowing to full matrices.
+
 2009-02-20  Jaroslav Hajek  <highegg@gmail.com>
 
 	* ov-base-diag.h (octave_base_diag::sqrt): Remove.
 	* ov-re-diag.cc (octave_diag_matrix::sqrt): New method.
 	* ov-re-diag.h: Declare it.
 	* ov-flt-re-diag.cc (octave_float_diag_matrix::sqrt): New method.
 	* ov-flt-re-diag.h: Declare it.
 	* ov-cx-diag.cc (octave_complex_diag_matrix::sqrt): New method.
diff --git a/src/OPERATORS/op-cs-scm.cc b/src/OPERATORS/op-cs-scm.cc
--- a/src/OPERATORS/op-cs-scm.cc
+++ b/src/OPERATORS/op-cs-scm.cc
@@ -50,17 +50,17 @@ DEFBINOP (div, complex, sparse_complex_m
 
   if (v2.rows() == 1 && v2.columns() == 1)
     {
       Complex d = v2.complex_value ();
 
       if (d == 0.0)
 	gripe_divide_by_zero ();
 
-      return octave_value (v1.complex_value () / d);
+      return octave_value (SparseComplexMatrix (1, 1, v1.complex_value () / d));
     }
   else
     {
       MatrixType typ = v2.matrix_type ();
       ComplexMatrix m1 = ComplexMatrix (1, 1, v1.complex_value ());
       SparseComplexMatrix m2 = v2.sparse_complex_matrix_value ();
       ComplexMatrix ret = xdiv (m1, m2, typ);
       v2.matrix_type (typ);
@@ -102,23 +102,19 @@ DEFBINOP_FN (el_pow, complex, sparse_com
 DEFBINOP (el_ldiv, complex, sparse_complex_matrix)
 {
   CAST_BINOP_ARGS (const octave_complex&, const octave_sparse_complex_matrix&);
 
   Complex d = v1.complex_value ();
   octave_value retval;
 
   if (d == 0.0)
-    {
-      gripe_divide_by_zero ();
+    gripe_divide_by_zero ();
 
-      retval = octave_value (v2.complex_matrix_value () / d);
-    }
-  else
-      retval = octave_value (v2.sparse_complex_matrix_value () / d);
+  retval = octave_value (v2.sparse_complex_matrix_value () / d);
 
   return retval;
 }
 
 DEFBINOP_FN (el_and, complex, sparse_complex_matrix, mx_el_and)
 DEFBINOP_FN (el_or,  complex, sparse_complex_matrix, mx_el_or)
 
 DEFCATOP (cs_scm, complex, sparse_complex_matrix)
diff --git a/src/OPERATORS/op-cs-sm.cc b/src/OPERATORS/op-cs-sm.cc
--- a/src/OPERATORS/op-cs-sm.cc
+++ b/src/OPERATORS/op-cs-sm.cc
@@ -52,17 +52,17 @@ DEFBINOP (div, complex, sparse_matrix)
 
   if (v2.rows() == 1 && v2.columns() == 1)
     {
       double d = v2.scalar_value ();
 
       if (d == 0.0)
 	gripe_divide_by_zero ();
 
-      return octave_value (v1.complex_value () / d);
+      return octave_value (SparseComplexMatrix (1, 1, v1.complex_value () / d));
     }
   else
     {
       MatrixType typ = v2.matrix_type ();
       ComplexMatrix m1 = ComplexMatrix (1, 1, v1.complex_value ());
       SparseMatrix m2 = v2.sparse_matrix_value ();
       ComplexMatrix ret = xdiv (m1, m2, typ);
       v2.matrix_type (typ);
@@ -79,23 +79,19 @@ DEFBINOP (pow, complex, sparse_matrix)
 DEFBINOP (ldiv, complex, sparse_matrix)
 {
   CAST_BINOP_ARGS (const octave_complex&, const octave_sparse_matrix&);
 
   Complex d = v1.complex_value ();
   octave_value retval;
 
   if (d == 0.0)
-    {
-      gripe_divide_by_zero ();
+    gripe_divide_by_zero ();
 
-      retval = octave_value (v2.matrix_value () / d);
-    }
-  else
-    retval = octave_value (v2.sparse_matrix_value () / d);
+  retval = octave_value (v2.sparse_matrix_value () / d);
 
   return retval;
 }
 
 DEFBINOP_FN (lt, complex, sparse_matrix, mx_el_lt)
 DEFBINOP_FN (le, complex, sparse_matrix, mx_el_le)
 DEFBINOP_FN (eq, complex, sparse_matrix, mx_el_eq)
 DEFBINOP_FN (ge, complex, sparse_matrix, mx_el_ge)
@@ -109,23 +105,19 @@ DEFBINOP_FN (el_pow, complex, sparse_mat
 DEFBINOP (el_ldiv, complex, sparse_matrix)
 {
   CAST_BINOP_ARGS (const octave_complex&, const octave_sparse_matrix&);
 
   Complex d = v1.complex_value ();
   octave_value retval;
 
   if (d == 0.0)
-    {
-      gripe_divide_by_zero ();
+    gripe_divide_by_zero ();
 
-      retval = octave_value (v2.matrix_value () / d);
-    }
-  else
-    retval = octave_value (v2.sparse_matrix_value () / d);
+  retval = octave_value (v2.sparse_matrix_value () / d);
 
   return retval;
 }
 
 DEFBINOP_FN (el_and, complex, sparse_matrix, mx_el_and)
 DEFBINOP_FN (el_or,  complex, sparse_matrix, mx_el_or)
 
 DEFCATOP (cs_sm, sparse_matrix, complex)
diff --git a/src/OPERATORS/op-s-scm.cc b/src/OPERATORS/op-s-scm.cc
--- a/src/OPERATORS/op-s-scm.cc
+++ b/src/OPERATORS/op-s-scm.cc
@@ -53,17 +53,17 @@ DEFBINOP (div, scalar, sparse_complex_ma
 
   if (v2.rows() == 1 && v2.columns() == 1)
     {
       Complex d = v2.complex_value ();
 
       if (d == 0.0)
 	gripe_divide_by_zero ();
 
-      return octave_value (v1.scalar_value () / d);
+      return octave_value (SparseComplexMatrix (1, 1, v1.scalar_value () / d));
     }
   else
     {
       MatrixType typ = v2.matrix_type ();
       Matrix m1 = Matrix (1, 1, v1.scalar_value ());
       SparseComplexMatrix m2 = v2.sparse_complex_matrix_value ();
       ComplexMatrix ret = xdiv (m1, m2, typ);
       v2.matrix_type (typ);
@@ -82,23 +82,19 @@ DEFBINOP (ldiv, scalar, sparse_complex_m
 {
   CAST_BINOP_ARGS (const octave_scalar&, 
 		   const octave_sparse_complex_matrix&);
 
   double d = v1.double_value ();
   octave_value retval;
 
   if (d == 0.0)
-    {
-      gripe_divide_by_zero ();
+    gripe_divide_by_zero ();
 
-      retval = octave_value (v2.complex_matrix_value () / d);
-    }
-  else
-    retval = octave_value (v2.sparse_complex_matrix_value () / d);
+  retval = octave_value (v2.sparse_complex_matrix_value () / d);
 
   return retval;
 }
 
 DEFBINOP_FN (lt, scalar, sparse_complex_matrix, mx_el_lt)
 DEFBINOP_FN (le, scalar, sparse_complex_matrix, mx_el_le)
 DEFBINOP_FN (eq, scalar, sparse_complex_matrix, mx_el_eq)
 DEFBINOP_FN (ge, scalar, sparse_complex_matrix, mx_el_ge)
@@ -113,23 +109,19 @@ DEFBINOP (el_ldiv, scalar, sparse_comple
 {
   CAST_BINOP_ARGS (const octave_scalar&, 
 		   const octave_sparse_complex_matrix&);
 
   double d = v1.double_value ();
   octave_value retval;
 
   if (d == 0.0)
-    {
-      gripe_divide_by_zero ();
+    gripe_divide_by_zero ();
 
-      retval =  octave_value (v2.complex_matrix_value () / d);
-    }
-  else
-    retval = octave_value (v2.sparse_complex_matrix_value () / d);
+  retval = octave_value (v2.sparse_complex_matrix_value () / d);
 
   return retval;
 }
 
 DEFBINOP_FN (el_and, scalar, sparse_complex_matrix, mx_el_and)
 DEFBINOP_FN (el_or, scalar, sparse_complex_matrix, mx_el_or)
 
 DEFCATOP (s_scm, scalar, sparse_compelx_matrix)
diff --git a/src/OPERATORS/op-s-sm.cc b/src/OPERATORS/op-s-sm.cc
--- a/src/OPERATORS/op-s-sm.cc
+++ b/src/OPERATORS/op-s-sm.cc
@@ -49,17 +49,17 @@ DEFBINOP (div, scalar, sparse_matrix)
 
   if (v2.rows() == 1 && v2.columns() == 1)
     {
       double d = v2.scalar_value ();
 
       if (d == 0.0)
 	gripe_divide_by_zero ();
 
-      return octave_value (v1.scalar_value () / d);
+      return octave_value (SparseMatrix (1, 1, v1.scalar_value () / d));
     }
   else
     {
       MatrixType typ = v2.matrix_type ();
       Matrix m1 = Matrix (1, 1, v1.double_value ());
       SparseMatrix m2 = v2.sparse_matrix_value ();
       Matrix ret = xdiv (m1, m2, typ);
       v2.matrix_type (typ);
@@ -76,23 +76,19 @@ DEFBINOP (pow, scalar, sparse_matrix)
 DEFBINOP (ldiv, scalar, sparse_matrix)
 {
   CAST_BINOP_ARGS (const octave_scalar&, const octave_sparse_matrix&);
 
   double d = v1.double_value ();
   octave_value retval;
 
   if (d == 0.0)
-    {
-      gripe_divide_by_zero ();
+    gripe_divide_by_zero ();
 
-      retval = octave_value (v2.matrix_value () / d);
-    }
-  else
-    retval = octave_value (v2.sparse_matrix_value () / d);
+  retval = octave_value (v2.sparse_matrix_value () / d);
 
   return retval;
 }
 
 DEFBINOP_FN (lt, scalar, sparse_matrix, mx_el_lt)
 DEFBINOP_FN (le, scalar, sparse_matrix, mx_el_le)
 DEFBINOP_FN (eq, scalar, sparse_matrix, mx_el_eq)
 DEFBINOP_FN (ge, scalar, sparse_matrix, mx_el_ge)
@@ -106,23 +102,19 @@ DEFBINOP_FN (el_pow, scalar, sparse_matr
 DEFBINOP (el_ldiv, scalar, sparse_matrix)
 {
   CAST_BINOP_ARGS (const octave_scalar&, const octave_sparse_matrix&);
 
   double d = v1.double_value ();
   octave_value retval;
 
   if (d == 0.0)
-    {
-      gripe_divide_by_zero ();
+    gripe_divide_by_zero ();
 
-      retval = octave_value (v2.matrix_value () / d);
-    }
-  else
-    retval = octave_value (v2.sparse_matrix_value () / d);
+  retval = octave_value (v2.sparse_matrix_value () / d);
 
   return retval;
 }
 
 DEFBINOP_FN (el_and, scalar, sparse_matrix, mx_el_and)
 DEFBINOP_FN (el_or,  scalar, sparse_matrix, mx_el_or)
 
 DEFCATOP (s_sm, scalar, sparse_matrix)
diff --git a/src/OPERATORS/op-scm-cs.cc b/src/OPERATORS/op-scm-cs.cc
--- a/src/OPERATORS/op-scm-cs.cc
+++ b/src/OPERATORS/op-scm-cs.cc
@@ -48,23 +48,19 @@ DEFBINOP (div, sparse_complex_matrix, co
 {
   CAST_BINOP_ARGS (const octave_sparse_complex_matrix&, 
 		   const octave_complex&);
 
   Complex d = v2.complex_value ();
   octave_value retval;
 
   if (d == 0.0)
-    {
-      gripe_divide_by_zero ();
+    gripe_divide_by_zero ();
 
-      retval = (v1.complex_matrix_value ()  / d);
-    }
-  else
-    retval = octave_value (v1.sparse_complex_matrix_value () / d);
+  retval = octave_value (v1.sparse_complex_matrix_value () / d);
 
   return retval;
 }
 
 DEFBINOP (pow, sparse_complex_matrix, complex)
 {
   CAST_BINOP_ARGS (const octave_sparse_complex_matrix&, 
 		   const octave_complex&);
@@ -77,17 +73,17 @@ DEFBINOP (ldiv, sparse_complex_matrix, c
 
   if (v1.rows() == 1 && v1.columns() == 1)
     {
       Complex d = v1.complex_value ();
 
       if (d == 0.0)
 	gripe_divide_by_zero ();
 
-      return octave_value (v2.complex_value () / d);
+      return octave_value (SparseComplexMatrix (1, 1, v2.complex_value () / d));
     }
   else
     {
       MatrixType typ = v1.matrix_type ();
       SparseComplexMatrix m1 = v1.sparse_complex_matrix_value ();
       ComplexMatrix m2 = ComplexMatrix (1, 1, v2.complex_value ());
       ComplexMatrix ret = xleftdiv (m1, m2, typ);
       v1.matrix_type (typ);
@@ -109,23 +105,19 @@ DEFBINOP (el_div, sparse_complex_matrix,
   CAST_BINOP_ARGS (const octave_sparse_complex_matrix&, 
 		   const octave_complex&);
 
   octave_value retval;
 
   Complex d = v2.complex_value ();
 
   if (d == 0.0)
-    {
-      gripe_divide_by_zero ();
+    gripe_divide_by_zero ();
 
-      retval = octave_value (v1.complex_matrix_value () / d);
-    }
-  else
-    retval =  octave_value (v1.sparse_complex_matrix_value () / d);
+  retval =  octave_value (v1.sparse_complex_matrix_value () / d);
 
   return retval;
 }
 
 DEFBINOP_FN (el_pow, sparse_complex_matrix, complex, elem_xpow)
 
 DEFBINOP (el_ldiv, sparse_complex_matrix, complex)
 {
diff --git a/src/OPERATORS/op-scm-s.cc b/src/OPERATORS/op-scm-s.cc
--- a/src/OPERATORS/op-scm-s.cc
+++ b/src/OPERATORS/op-scm-s.cc
@@ -51,23 +51,19 @@ DEFBINOP (div, sparse_complex_matrix, sc
 {
   CAST_BINOP_ARGS (const octave_sparse_complex_matrix&, 
 		   const octave_scalar&);
 
   double d = v2.double_value ();
   octave_value retval;
 
   if (d == 0.0)
-    {
-      gripe_divide_by_zero ();
+    gripe_divide_by_zero ();
 
-      retval = octave_value (v1.complex_matrix_value () / d);
-    }
-  else
-    retval = octave_value (v1.sparse_complex_matrix_value () / d);
+  retval = octave_value (v1.sparse_complex_matrix_value () / d);
 
   return retval;
 }
 
 DEFBINOP (pow, sparse_complex_matrix, scalar)
 {
   CAST_BINOP_ARGS (const octave_sparse_complex_matrix&, 
 		   const octave_scalar&);
@@ -85,17 +81,17 @@ DEFBINOP (ldiv, sparse_complex_matrix, s
 
   if (v1.rows() == 1 && v1.columns() == 1)
     {
       Complex d = v1.complex_value ();
 
       if (d == 0.0)
 	gripe_divide_by_zero ();
 
-      return octave_value (v2.scalar_value () / d);
+      return octave_value (SparseComplexMatrix (1, 1, v2.scalar_value () / d));
     }
   else
     {
       MatrixType typ = v1.matrix_type ();
       SparseComplexMatrix m1 = v1.sparse_complex_matrix_value ();
       Matrix m2 = Matrix (1, 1, v2.scalar_value ());
       ComplexMatrix ret = xleftdiv (m1, m2, typ);
       v1.matrix_type (typ);
@@ -116,23 +112,19 @@ DEFBINOP (el_div, sparse_complex_matrix,
 {
   CAST_BINOP_ARGS (const octave_sparse_complex_matrix&, 
 		   const octave_scalar&);
 
   double d = v2.double_value ();
   octave_value retval;
 
   if (d == 0.0)
-    {
-      gripe_divide_by_zero ();
+    gripe_divide_by_zero ();
 
-      retval = octave_value (v1.complex_matrix_value () / d);
-    }
-  else
-    retval = octave_value (v1.sparse_complex_matrix_value () / d);
+  retval = octave_value (v1.sparse_complex_matrix_value () / d);
 
   return retval;
 }
 
 DEFBINOP_FN (el_pow, sparse_complex_matrix, scalar, elem_xpow)
 
 DEFBINOP (el_ldiv, sparse_complex_matrix, scalar)
 {
diff --git a/src/OPERATORS/op-sm-cs.cc b/src/OPERATORS/op-sm-cs.cc
--- a/src/OPERATORS/op-sm-cs.cc
+++ b/src/OPERATORS/op-sm-cs.cc
@@ -49,23 +49,19 @@ DEFBINOP_OP (mul, sparse_matrix, complex
 DEFBINOP (div, sparse_matrix, complex)
 {
   CAST_BINOP_ARGS (const octave_sparse_matrix&, const octave_complex&);
 
   Complex d = v2.complex_value ();
   octave_value retval;
 
   if (d == 0.0)
-    {
-      gripe_divide_by_zero ();
+    gripe_divide_by_zero ();
 
-      retval = octave_value (v1.matrix_value () / d);
-    }
-  else
-    retval = octave_value (v1.sparse_matrix_value () / d);
+  retval = octave_value (v1.sparse_matrix_value () / d);
 
   return retval;
 }
 
 DEFBINOP (pow, sparse_matrix, complex)
 {
   CAST_BINOP_ARGS (const octave_sparse_matrix&, const octave_complex&);
   return xpow (v1.matrix_value (), v2.complex_value ());
@@ -77,17 +73,17 @@ DEFBINOP (ldiv, sparse_matrix, complex)
 
   if (v1.rows() == 1 && v1.columns() == 1)
     {
       double d = v1.scalar_value ();
 
       if (d == 0.0)
 	gripe_divide_by_zero ();
 
-      return octave_value (v2.complex_value () / d);
+      return octave_value (SparseComplexMatrix (1, 1, v2.complex_value () / d));
     }
   else
     {
       MatrixType typ = v1.matrix_type ();
       SparseMatrix m1 = v1.sparse_matrix_value ();
       ComplexMatrix m2 = ComplexMatrix (1, 1, v2.complex_value ());
       ComplexMatrix ret = xleftdiv (m1, m2, typ);
       v1.matrix_type (typ);
@@ -107,23 +103,19 @@ DEFBINOP_OP (el_mul, sparse_matrix, comp
 DEFBINOP (el_div, sparse_matrix, complex)
 {
   CAST_BINOP_ARGS (const octave_sparse_matrix&, const octave_complex&);
 
   Complex d = v2.complex_value ();
   octave_value retval;
 
   if (d == 0.0)
-    {
-      gripe_divide_by_zero ();
+    gripe_divide_by_zero ();
 
-      retval =  octave_value (v1.matrix_value () / d);
-    }
-  else
-    retval = octave_value (v1.sparse_matrix_value () / d);
+  retval = octave_value (v1.sparse_matrix_value () / d);
 
   return retval;
 }
 
 DEFBINOP_FN (el_pow, sparse_matrix, complex, elem_xpow)
 
 DEFBINOP (el_ldiv, sparse_matrix, complex)
 {
diff --git a/src/OPERATORS/op-sm-s.cc b/src/OPERATORS/op-sm-s.cc
--- a/src/OPERATORS/op-sm-s.cc
+++ b/src/OPERATORS/op-sm-s.cc
@@ -46,23 +46,19 @@ DEFBINOP_OP (mul, sparse_matrix, scalar,
 DEFBINOP (div, sparse_matrix, scalar)
 {
   CAST_BINOP_ARGS (const octave_sparse_matrix&, const octave_scalar&);
 
   double d = v2.double_value ();
   octave_value retval;
 
   if (d == 0.0)
-    {
-      gripe_divide_by_zero ();
+    gripe_divide_by_zero ();
 
-      retval = octave_value (v1.matrix_value () / d);
-    }
-  else
-    retval = octave_value (v1.sparse_matrix_value () / d);
+  retval = octave_value (v1.sparse_matrix_value () / d);
 
   return retval;
 }
 
 DEFBINOP (pow, sparse_matrix, scalar)
 {
   CAST_BINOP_ARGS (const octave_sparse_matrix&, const octave_scalar&);
 
@@ -79,17 +75,17 @@ DEFBINOP (ldiv, sparse_matrix, scalar)
 
   if (v1.rows() == 1 && v1.columns() == 1)
     {
       double d = v1.scalar_value ();
 
       if (d == 0.0)
 	gripe_divide_by_zero ();
 
-      return octave_value (v2.scalar_value () / d);
+      return octave_value (SparseMatrix(1, 1, v2.scalar_value () / d));
     }
   else
     {
       MatrixType typ = v1.matrix_type ();
       SparseMatrix m1 = v1.sparse_matrix_value ();
       Matrix m2 = Matrix (1, 1, v2.scalar_value ());
       Matrix ret = xleftdiv (m1, m2, typ);
       v1.matrix_type (typ);
@@ -109,23 +105,19 @@ DEFBINOP_OP (el_mul, sparse_matrix, scal
 DEFBINOP (el_div, sparse_matrix, scalar)
 {
   CAST_BINOP_ARGS (const octave_sparse_matrix&, const octave_scalar&);
 
   double d = v2.double_value ();
   octave_value retval;
 
   if (d == 0.0)
-    {
-      gripe_divide_by_zero ();
+    gripe_divide_by_zero ();
 
-      retval = octave_value (v1.matrix_value () / d);
-    }
-  else
-    retval = octave_value (v1.sparse_matrix_value () / d);
+  retval = octave_value (v1.sparse_matrix_value () / d);
 
   return retval;
 }
 
 DEFBINOP_FN (el_pow, sparse_matrix, scalar, elem_xpow)
 
 DEFBINOP (el_ldiv, sparse_matrix, scalar)
 {
