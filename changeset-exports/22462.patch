# HG changeset patch
# User Rik <rik@octave.org>
# Date 1473518452 25200
#      Sat Sep 10 07:40:52 2016 -0700
# Node ID 6cb7813e5b2f27502995f2c88bb31d28bd887014
# Parent  cc4f31e8477fda24d34f07cc500f523cf1080e2c
Add new mxIsScalar function for MEX API.

* NEWS: Announce new function.

* mex.cc (mxArray_octave_value::is_scalar): New function.
* mex.cc (mxArray_matlab::is_scalar): New function.
* mex.cc (mxIsScalar): New API function which calls internal is_scalar.

* mexproto.h (mxIsScalar): Add new function prototype.  Organize list of
prototypes to be clearer.

* mxarray.in.h (mxArray_base::is_scalar): Declare virtual function.
* mxarray.in.h (mxArray::is_scalar): Declare function which calls the is_scalar
member function based on the object type (octave_value or matlab).

diff --git a/NEWS b/NEWS
--- a/NEWS
+++ b/NEWS
@@ -142,17 +142,18 @@ Summary of important user-visible change
     instead will return execution to the MEX function for error
     handling.
 
  ** The functions mxAssert and mxAssertS for checking assertions have
     been added.  In order to avoid a performance penalty they are only
     compiled in to debug versions of a MEX file, i.e., that are produced
     when the '-g' option is given to mex() or mkoctfile().
 
- ** Other new MEX API functions include mexEvalStringWithTrap.
+ ** Other new MEX API functions include mexEvalStringWithTrap,
+    mxIsScalar.
 
  ** Other new functions added in 4.2:
 
       audioformats
       camlight
       condeig
       deg2rad
       dialog
diff --git a/libinterp/corefcn/mex.cc b/libinterp/corefcn/mex.cc
--- a/libinterp/corefcn/mex.cc
+++ b/libinterp/corefcn/mex.cc
@@ -300,16 +300,24 @@ public:
   {
     request_mutation ();
   }
 
   mwSize get_number_of_elements (void) const { return val.numel (); }
 
   int is_empty (void) const { return val.is_empty (); }
 
+  bool is_scalar (void) const
+  {
+    // Force dims and ndims to be cached.
+    get_dimensions ();
+
+    return ndims == 2 && dims[0] == 1 && dims[1] == 1;
+  }  
+
   mxClassID get_class_id (void) const
   {
     id = mxUNKNOWN_CLASS;
 
     std::string cn = val.class_name ();
 
     if (cn == "cell")
       id = mxCELL_CLASS;
@@ -754,16 +762,21 @@ public:
     for (mwIndex i = 1; i < ndims; i++)
       retval *= dims[i];
 
     return retval;
   }
 
   int is_empty (void) const { return get_number_of_elements () == 0; }
 
+  bool is_scalar (void) const
+  {
+    return ndims == 2 && dims[0] == 1 && dims[1] == 1;
+  }
+
   mxClassID get_class_id (void) const { return id; }
 
   const char *get_class_name (void) const
   {
     switch (id)
       {
       case mxCELL_CLASS: return "cell";
       case mxSTRUCT_CLASS: return "struct";
@@ -2683,16 +2696,22 @@ mxIsLogicalScalarTrue (const mxArray *pt
 
 // Size predicate.
 int
 mxIsEmpty (const mxArray *ptr)
 {
   return ptr->is_empty ();
 }
 
+bool
+mxIsScalar (const mxArray *ptr)
+{
+  return ptr->is_scalar ();
+}
+
 // FIXME: Just plain odd thing to ask of a value.
 // Still, Octave is incompatible because it does not implement this.
 int
 mxIsFromGlobalWS (const mxArray * /*ptr*/)
 {
   mexErrMsgTxt ("mxIsFromGlobalWS() is unimplemented");
 
   return 0;
diff --git a/libinterp/corefcn/mexproto.h b/libinterp/corefcn/mexproto.h
--- a/libinterp/corefcn/mexproto.h
+++ b/libinterp/corefcn/mexproto.h
@@ -74,54 +74,58 @@ extern "C" {
 #undef MXARRAY_TYPEDEFS_ONLY
 
 /* Interface to the interpreter.  */
 extern OCTINTERP_API const char *mexFunctionName (void);
 
 extern OCTINTERP_API int mexCallMATLAB (int nargout, mxArray *argout[],
                                         int nargin, mxArray *argin[],
                                         const char *fname);
-
 extern OCTINTERP_API mxArray * mexCallMATLABWithTrap (int nargout,
                                                       mxArray *argout[],
                                                       int nargin,
                                                       mxArray *argin[],
                                                       const char *fname);
 
-extern OCTINTERP_API void mexSetTrapFlag (int flag);
 extern OCTINTERP_API int mexEvalString (const char *s);
 extern OCTINTERP_API mxArray * mexEvalStringWithTrap (const char *s);
+
+extern OCTINTERP_API void mexSetTrapFlag (int flag);
+
 extern OCTINTERP_API void mexErrMsgTxt (const char *s);
 extern OCTINTERP_API void mexErrMsgIdAndTxt (const char *id, const char *s,
                                              ...);
 extern OCTINTERP_API void mexWarnMsgTxt (const char *s);
 extern OCTINTERP_API void mexWarnMsgIdAndTxt (const char *id, const char *s,
                                               ...);
 extern OCTINTERP_API int mexPrintf (const char *fmt, ...);
 
 extern OCTINTERP_API mxArray *mexGetVariable (const char *space,
                                               const char *name);
 extern OCTINTERP_API const mxArray *mexGetVariablePtr (const char *space,
                                                        const char *name);
 
 extern OCTINTERP_API int mexPutVariable (const char *space, const char *name,
                                          const mxArray *ptr);
 
+extern OCTINTERP_API const mxArray *mexGet (double handle,
+                                            const char *property);
+extern OCTINTERP_API int mexSet (double handle, const char *property,
+                                 mxArray *val);
+
 extern OCTINTERP_API void mexMakeArrayPersistent (mxArray *ptr);
 extern OCTINTERP_API void mexMakeMemoryPersistent (void *ptr);
 
-extern OCTINTERP_API int mexAtExit (void (*f) (void));
-extern OCTINTERP_API const mxArray *mexGet (double handle,
-                                            const char *property);
+extern OCTINTERP_API void mexLock (void);
+extern OCTINTERP_API void mexUnlock (void);
+
 extern OCTINTERP_API int mexIsGlobal (const mxArray *ptr);
 extern OCTINTERP_API int mexIsLocked (void);
-extern OCTINTERP_API void mexLock (void);
-extern OCTINTERP_API int mexSet (double handle, const char *property,
-                                 mxArray *val);
-extern OCTINTERP_API void mexUnlock (void);
+
+extern OCTINTERP_API int mexAtExit (void (*f) (void));
 
 /* Floating point predicates.  */
 extern OCTINTERP_API int mxIsFinite (double v);
 extern OCTINTERP_API int mxIsInf (double v);
 extern OCTINTERP_API int mxIsNaN (double v);
 
 /* Floating point values.  */
 extern OCTINTERP_API double mxGetEps (void);
@@ -197,18 +201,19 @@ extern OCTINTERP_API int mxIsUint64 (con
 extern OCTINTERP_API int mxIsUint8 (const mxArray *ptr);
 
 /* Odd type+size predicate.  */
 extern OCTINTERP_API int mxIsLogicalScalar (const mxArray *ptr);
 
 /* Odd type+size+value predicate.  */
 extern OCTINTERP_API int mxIsLogicalScalarTrue (const mxArray *ptr);
 
-/* Size predicate.  */
+/* Size predicates.  */
 extern OCTINTERP_API int mxIsEmpty (const mxArray *ptr);
+extern OCTINTERP_API bool mxIsScalar (const mxArray *ptr);
 
 /* Just plain odd thing to ask of a value.  */
 extern OCTINTERP_API int mxIsFromGlobalWS (const mxArray *ptr);
 
 /* Dimension extractors.  */
 extern OCTINTERP_API size_t mxGetM (const mxArray *ptr);
 extern OCTINTERP_API size_t mxGetN (const mxArray *ptr);
 extern OCTINTERP_API mwSize *mxGetDimensions (const mxArray *ptr);
diff --git a/libinterp/corefcn/mxarray.in.h b/libinterp/corefcn/mxarray.in.h
--- a/libinterp/corefcn/mxarray.in.h
+++ b/libinterp/corefcn/mxarray.in.h
@@ -209,16 +209,18 @@ public:
   virtual void set_n (mwSize n) = 0;
 
   virtual void set_dimensions (mwSize *dims_arg, mwSize ndims_arg) = 0;
 
   virtual mwSize get_number_of_elements (void) const = 0;
 
   virtual int is_empty (void) const = 0;
 
+  virtual bool is_scalar (void) const = 0;
+
   virtual mxClassID get_class_id (void) const = 0;
 
   virtual const char *get_class_name (void) const = 0;
 
   virtual void set_class_name (const char *name_arg) = 0;
 
   // FIXME: Why not just have this '= 0' as the others?
   // Could then eliminate err_invalid_type function and #include "error.h".
@@ -416,16 +418,18 @@ public:
   void set_dimensions (mwSize *dims_arg, mwSize ndims_arg)
   { DO_VOID_MUTABLE_METHOD (set_dimensions (dims_arg, ndims_arg)); }
 
   mwSize get_number_of_elements (void) const
   { return rep->get_number_of_elements (); }
 
   int is_empty (void) const { return get_number_of_elements () == 0; }
 
+  bool is_scalar (void) const { return rep->is_scalar (); }
+
   const char *get_name (void) const { return name; }
 
   void set_name (const char *name_arg);
 
   mxClassID get_class_id (void) const { return rep->get_class_id (); }
 
   const char *get_class_name (void) const { return rep->get_class_name (); }
 
