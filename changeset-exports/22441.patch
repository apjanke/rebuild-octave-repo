# HG changeset patch
# User Mike Miller <mtmiller@octave.org>
# Date 1473188918 25200
#      Tue Sep 06 12:08:38 2016 -0700
# Node ID bb8914d68f25497afde5587e4c3c828048faefe5
# Parent  20e6de770ca4fc1de420f8a2906f0e802435dc01
Fix noise signal generation in audioplayer doc string and demos (bug #49011)

* @audioplayer/audioplayer.m: Fix noise signal generation in doc string
and %!demo blocks.

diff --git a/scripts/audio/@audioplayer/audioplayer.m b/scripts/audio/@audioplayer/audioplayer.m
--- a/scripts/audio/@audioplayer/audioplayer.m
+++ b/scripts/audio/@audioplayer/audioplayer.m
@@ -33,17 +33,17 @@
 ## The signal @var{y} can be a vector or a two-dimensional array.
 ##
 ## The following example will create an audioplayer object that will play
 ## back one second of white noise at 44100 sample rate using 8 bits per
 ## sample.
 ##
 ## @example
 ## @group
-## y = randn (2, 44100) - 0.5;
+## y = 0.25 * randn (2, 44100);
 ## player = audioplayer (y, 44100, 8);
 ## play (player);
 ## @end group
 ## @end example
 ## @end deftypefn
 
 ## FIXME: callbacks don't work properly, apparently because portaudio
 ## will execute the callbacks in a separate thread, and calling Octave
@@ -106,65 +106,65 @@ function player = audioplayer (varargin)
     player = class (player, "audioplayer");
   endif
 
 endfunction
 
 
 %!demo
 %! fs = 44100;
-%! audio = randn (2, 2*fs) - 0.5;
+%! audio = 0.25 * randn (2, 2*fs);
 %! player = audioplayer (audio, fs);
 %! play (player);
 %! pause (1);
 %! pause (player);
 %! pause (1);
 %! resume (player);
 %! pause (1);
 %! stop (player);
 
 ## Tests of audioplayer must not actually play anything.
 
 %!testif HAVE_PORTAUDIO
-%! mono = randn (1, 44100) - 0.5;
-%! stereo = randn (2, 44100) - 0.5;
+%! mono = 0.25 * randn (1, 44100);
+%! stereo = 0.25 * randn (2, 44100);
 %! fs = 44100;
 %! player1 = audioplayer (mono, fs);
 %! player2 = audioplayer (stereo, fs);
 %! assert (player1.NumberOfChannels, 1);
 %! assert (player2.NumberOfChannels, 2);
 %! assert (player1.SampleRate, 44100);
 %! assert (player2.SampleRate, 44100);
 %! assert (player1.TotalSamples, 44100);
 %! assert (player2.TotalSamples, 44100);
 
 %!testif HAVE_PORTAUDIO
-%! audio = randn (2, 44100) - 0.5;
+%! audio = 0.25 * randn (2, 44100);
 %! fs = 44100;
 %! player = audioplayer (audio, fs);
 %! set (player, {"SampleRate", "Tag", "UserData"}, {8000, "tag", [1, 2; 3, 4]});
 %! assert (player.SampleRate, 8000);
 %! assert (player.Tag, "tag");
 %! assert (player.UserData, [1, 2; 3, 4]);
 
 %!testif HAVE_PORTAUDIO
-%! audio = randn (2, 44100) - 0.5;
+%! audio = 0.25 * randn (2, 44100);
 %! fs = 44100;
 %! player = audioplayer (audio, fs);
 %! settable = set (player);
 %! settable.SampleRate = 8000;
 %! settable.Tag = "tag";
 %! settable.UserData = [1, 2; 3, 4];
 %! set (player, settable);
 %! assert (player.SampleRate, 8000);
 %! assert (player.Tag, "tag");
 %! assert (player.UserData, [1, 2; 3, 4]);
 
 %!testif HAVE_PORTAUDIO
-%! audio = randn (2, 44100) - 0.5;
+%! audio = 0.25 * randn (2, 44100);
 %! fs = 44100;
 %! player = audioplayer (audio, fs);
 %! player.SampleRate = 8000;
 %! player.Tag = "tag";
 %! player.UserData = [1, 2; 3, 4];
 %! properties = get (player, {"SampleRate", "Tag", "UserData"});
 %! assert (properties, {8000, "tag", [1, 2; 3, 4]});
 
