# HG changeset patch
# User Rik <rik@octave.org>
# Date 1531161075 25200
#      Mon Jul 09 11:31:15 2018 -0700
# Branch stable
# Node ID 9277b77dd28fbb494d35ea18f1904a747eeffdfa
# Parent  b116ea5a8d731d03012115a709cd15b26470046e
repelem.m: Fix behavior when final repeat count is 0 (bug #54275).

* repelem.m: Size intermediate variable idx to be one larger than may be
necessary.  After calculation, select only the valid range of idx without
the extra temporary.  Add BIST test.

diff --git a/scripts/general/repelem.m b/scripts/general/repelem.m
--- a/scripts/general/repelem.m
+++ b/scripts/general/repelem.m
@@ -294,30 +294,29 @@ endfunction
 function idx = prepareIdx (v, n)
 
   if (isscalar (v))
     ## will always return row vector
     idx = [1:n](ones (v, 1), :)(:).';
 
   else
     ## This works for a row or column vector.
-    ## idx2 output will be a row vector.
 
     ## Get ending position for each element item.
     idx_temp = cumsum (v);
 
-    ## Row vector with enough space for output
-    idx(1:idx_temp(end)) = 0;
-
     ## Set starting position of each element to 1.
-    idx(idx_temp(1:end-1) + 1) = 1;
+    idx(idx_temp + 1) = 1;
 
     ## Set starting position of each element to 1.
     idx(1) = 1;
 
+    ## Row vector with proper length for output
+    idx = idx(1:idx_temp(end));
+
     ## with prepared index
     idx = (find (v != 0))(cumsum (idx));
 
   endif
 
 endfunction
 
 
@@ -422,16 +421,19 @@ endfunction
 
 ## test with cell arrays
 %!test
 %! assert (repelem ({-1 0 1},  2), {-1 -1 0 0 1 1});
 %! assert (repelem ({-1 0 1}', 2), {-1; -1; 0; 0; 1; 1;});
 %! assert (repelem ({1 0;0 -1}, 2, 3),
 %!         {1 1 1 0 0 0;1 1 1 0 0 0;0 0 0 -1 -1 -1;0 0 0 -1 -1 -1});
 
+%!test <*54275>
+%! assert (repelem (11:13, [1 3 0]), [11 12 12 12]);
+
 ## nargin <= 1 error tests
 %!error (repelem ());
 %!error (repelem ([]));
 %!error (repelem (5));
 %!error (repelem (5,[]));
 %!error (repelem ([1 2 3 3 2 1]));
 %!error (repelem ([1 2 3; 3 2 1]));
 
