# HG changeset patch
# User Rik <rdrider0-list@yahoo.com>
# Date 1261371114 28800
#      Sun Dec 20 20:51:54 2009 -0800
# Node ID 25417bd9a3c7e2d6a9934aca0df284c49aeea3cb
# Parent  2441327485a3f9366d02abb6d221e1f994693342
Use lognrnd instead of deprecated lognormal_rnd in build_sparse_tests.sh

diff --git a/test/ChangeLog b/test/ChangeLog
--- a/test/ChangeLog
+++ b/test/ChangeLog
@@ -1,8 +1,12 @@
+2009-12-19  Rik <octave@nomad.inbox5.com>
+
+	* build_sparse_tests.sh: Use lognrnd instead of deprecated lognormal_rnd
+
 2009-12-19  Rik <octave@nomad.inbox5.com>
 
 	* Makefile.am: Eliminate TOPDIR variable in favor of built-in automake
 	variables of top_builddir and top_srcdir.
 
 2009-12-17  Rik  <octdev@nomad.inbox5.com>
 
 	* config/unix.exp: Remove obsolete file from repository
diff --git a/test/build_sparse_tests.sh b/test/build_sparse_tests.sh
--- a/test/build_sparse_tests.sh
+++ b/test/build_sparse_tests.sh
@@ -16,27 +16,28 @@
 # 
 # You should have received a copy of the GNU General Public License
 # along with Octave; see the file COPYING.  If not, see
 # <http://www.gnu.org/licenses/>.
 
 # Some tests are commented out because they are known to be broken!
 # Search for "# fails"   
 
-# ./buildtest.sh preset
+# ./build_sparse_tests.sh preset
 #    creates test_sparse.m with preset tests.
 #    Use "test test_sparse" from octave to run the tests.
 #
-# ./buildtest.sh random
+# ./build_sparse_tests.sh random
 #    Creates test_sprandom.m with randomly generated matrices.
+#    Use "test test_sprandom" from octave to run the tests.
 
-# buildtest.sh generates tests for real and complex sparse matrices.
+# build_sparse_tests.sh generates tests for real and complex sparse matrices.
 # Also, we want to run both fixed tests with known outputs (quick tests)
 # and longer tests with unknown outputs (thorough tests).  This requires
-# two sets of tests --- one which uses preset matrices and another which
+# two sets of tests -- one which uses preset matrices and another which
 # uses randomly generated matrices.
 #
 # The tests are mostly identical for each case but the code is different,
 # so it is important that the tests be run on all cases.  Because our test 
 # harness doesn't have support for looping or macros (it is only needed
 # for new data types), but sh does, we use sh to generate inline versions of
 # the tests for each case.
 #
@@ -104,17 +105,17 @@
 #        indexing tests
 #    gen_solver_tests
 #        Tests the solve function with triangular/banded, etc matrices
 
 case $1 in
     random) preset=false ;;
     preset) preset=true ;;
     '') preset=true ;;
-    *) echo "buildtest.sh random|preset" && exit 1 ;;
+    *) echo "build_sparse_tests.sh random|preset" && exit 1 ;;
 esac
 
 if $preset; then
     TESTS=test_sparse.m
 else
     TESTS=test_sprandom.m
 fi
 
@@ -247,17 +248,17 @@ EOF
 ##  total_passes=0; total_tests=0;
 ##  for i=1:10
 ##     [passes,tests] = sprandomtest;
 ##    total_passes += passes;
 ##    total_tests += tests;
 ##  end
 ##  The test log is appended to sprandomtest.log
 function [passes,total] = test_sprandom
-  warning("untested --- fix the source in buildtests.sh");
+  warning("untested --- fix the source in build_sparse_tests.sh");
   disp("appending test output to sprandomtest.log");
   fid = fopen("sprandomtest.log","at");
   test("test_sprandom","normal",fid);
   ##[passes, total] = test("sprandomtest","normal",fid);
   fclose(fid);
 endfunction
 
 EOF
@@ -950,17 +951,17 @@ if $preset; then
   cat >>$TESTS <<EOF
 %! n=8;
 %! lf=diag(1:n);lf(n-1,1)=0.5*alpha;lf(n,2)=0.25*alpha;ls=sparse(lf);
 %! uf=diag(1:n);uf(1,n-1)=2*alpha;uf(2,n)=alpha;us=sparse(uf);
 %! ts=spdiags(ones(n,3),-1:1,n,n)+diag(1:n); tf = full(ts);
 EOF
 else
   cat >>$TESTS <<EOF
-%! n=floor(lognormal_rnd(8,2)+1)'
+%! n=floor(lognrnd(8,2)+1)'
 %! ls = tril(sprandn(8,8,0.2),-1).*alpha + n*speye(8); lf = full(ls);
 %! us = triu(sprandn(8,8,0.2),1).*alpha + n*speye(8); uf = full(us);
 %! ts = spdiags(randn(8,3),-1:1,8,8).*alpha; tf = full(ts);
 EOF
 fi
 
 cat >>$TESTS <<EOF
 %! df = diag(1:n).* alpha; ds = sparse(df);
@@ -1135,35 +1136,35 @@ fi
 echo '%!shared as,af,bs,bf' >> $TESTS
 if $preset; then
     echo '%!test af=[1+1i,2-1i,0,0;0,0,0,3+2i;0,0,0,4];' >> $TESTS
     echo '%!test bf=3;' >>$TESTS
 else
     cat >>$TESTS <<EOF
 %!test
 %! % generate m,n from 1 to <5000
-%! m=floor(lognormal_rnd(8,2)+1);
-%! n=floor(lognormal_rnd(8,2)+1);
+%! m=floor(lognrnd(8,2)+1);
+%! n=floor(lognrnd(8,2)+1);
 %! as=sprandn(m,n,0.3); af = full(as+1i*sprandn(as));
 %! bf = randn;
 EOF
 fi
 
 gen_scalar_tests
 gen_section
 
 # rectangular operations
 if $preset; then
     echo '%!test af=[1+1i,2-1i,0,0;0,0,0,3+2i;0,0,0,4];' >> $TESTS
     echo '%!test bf=[0,1-1i,0,0;2+1i,0,0,0;3-1i,2+3i,0,0];' >> $TESTS
 else
     cat >>$TESTS <<EOF
 %!test
-%! m=floor(lognormal_rnd(8,2)+1);
-%! n=floor(lognormal_rnd(8,2)+1);
+%! m=floor(lognrnd(8,2)+1);
+%! n=floor(lognrnd(8,2)+1);
 %! as=sprandn(m,n,0.3); af = full(as+1i*sprandn(as));
 %! bs=sprandn(m,n,0.3); bf = full(bs+1i*sprandn(bs));
 EOF
 fi
 
 gen_rectangular_tests
 gen_section
 gen_save_tests
@@ -1185,18 +1186,18 @@ gen_section
 # square operations
 if $preset; then
     echo '%!test af=[1+1i,2-1i,0,0;0,0,0,3+2i;0,0,0,4];' >> $TESTS
     echo '%! as=sparse(af);' >> $TESTS
     echo '%!test bf=[0,1-1i,0,0;2+1i,0,0,0;3-1i,2+3i,0,0];' >> $TESTS
 else
     cat >>$TESTS <<EOF
 %!test
-%! m=floor(lognormal_rnd(8,2)+1);
-%! n=floor(lognormal_rnd(8,2)+1);
+%! m=floor(lognrnd(8,2)+1);
+%! n=floor(lognrnd(8,2)+1);
 %! as=sprandn(m,n,0.3); af = full(as+1i*sprandn(as));
 %! bs=sprandn(m,n,0.3); bf = full(bs+1i*sprandn(bs));
 EOF
 fi
 
 cat >>$TESTS <<EOF
 %!test ;# invertible matrix
 %! bf=af'*bf+max(abs([af(:);bf(:)]))*sparse(eye(columns(as)));
@@ -1220,17 +1221,17 @@ gen_square_tests
 gen_section
 
 # cholesky tests
 if $preset; then
   echo '%!test bf=[5,0,1+1i,0;0,5,0,1-2i;1-1i,0,5,0;0,1+2i,0,5];' >> $TESTS
   echo '%! bs=sparse(bf);' >> $TESTS
 else
   echo '# This has a small chance of failing to create a positive definite matrix' >> $TESTS
-  echo '%!test n=floor(lognormal_rnd(8,2)+1)' >> $TESTS
+  echo '%!test n=floor(lognrnd(8,2)+1)' >> $TESTS
   echo '%! bs = n*speye(n,n) + sprandn(n,n,0.3); bf = full(bs);' >> $TESTS
 fi
 
 gen_cholesky_tests
 gen_section
 echo '%!test bf=real(bf);' >> $TESTS
 echo '%! bs=sparse(bf);' >> $TESTS
 gen_cholesky_tests
@@ -1244,18 +1245,18 @@ if $use_preset; then
 %! r=[1,1,2,1,2,3];
 %! c=[2,1,1,1,2,1];
 %! m=n=0;
 EOF
 else
     cat >>$TESTS <<EOF
 %!test
 %! % generate m,n from 1 to <5000
-%! m=floor(lognormal_rnd(8,2)+1);
-%! n=floor(lognormal_rnd(8,2)+1);
+%! m=floor(lognrnd(8,2)+1);
+%! n=floor(lognrnd(8,2)+1);
 %! nz=ceil((m+n)/2);
 %! r=floor(rand(5,nz)*n)+1;
 %! c=floor(rand(5,nn)*m)+1;
 EOF
 fi
 gen_assembly_tests #includes real and complex tests
 gen_section
 
@@ -1266,18 +1267,18 @@ if $use_preset; then
 %!test
 %! af=[1+1i,2-1i,0,0;0,0,0,3+2i;0,0,0,4];
 %! ridx=[1,3]; cidx=[2,3];
 EOF
 else
     cat >>$TESTS <<EOF
 %!test
 %! % generate m,n from 1 to <5000
-%! m=floor(lognormal_rnd(8,2)+1);
-%! n=floor(lognormal_rnd(8,2)+1);
+%! m=floor(lognrnd(8,2)+1);
+%! n=floor(lognrnd(8,2)+1);
 %! as=sprandn(m,n,0.3); af = full(as+1i*sprandn(as));
 %! ridx = ceil(m*rand(1,ceil(rand*m))
 %! cidx = ceil(n*rand(1,ceil(rand*n))
 EOF
 fi
 gen_scalar_select_tests
 gen_select_tests
 echo '%!test af=real(af);' >> $TESTS
