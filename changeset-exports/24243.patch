# HG changeset patch
# User Julien Bect <jbect@users.sourceforge.net>
# Date 1500828978 -7200
#      Sun Jul 23 18:56:18 2017 +0200
# Node ID 735ebdfdb7d4a4b6e8e8424a89bcfdadc9c3e9bc
# Parent  545657c20e6025d6fa4e56d7d1014692262d9a95
jit: pt-jit.cc: Add type argument to CreateConstInBoundsGEP1_32 (LLVM >= 3.7)

* libinterp/corefcn/pt-jit.cc: Add type argument to CreateConstInBoundsGEP1_32,
  as needed in LLVM >= 3.7.  FIXME: autoconf.

diff --git a/libinterp/parse-tree/pt-jit.cc b/libinterp/parse-tree/pt-jit.cc
--- a/libinterp/parse-tree/pt-jit.cc
+++ b/libinterp/parse-tree/pt-jit.cc
@@ -1313,32 +1313,32 @@ void
       if (jit_extract_argument *extract
           = dynamic_cast<jit_extract_argument *> (*iter))
         argument_vec.push_back (std::make_pair (extract->name (), true));
 
     jit_type *any = jit_typeinfo::get_any ();
 
     // argument is an array of octave_base_value*, or octave_base_value**
     llvm::Type *arg_type = any->to_llvm (); // this is octave_base_value*
-    arg_type = arg_type->getPointerTo ();
     llvm::FunctionType *ft;
-    ft = llvm::FunctionType::get (llvm::Type::getVoidTy (context), arg_type,
-                                  false);
+    ft = llvm::FunctionType::get (llvm::Type::getVoidTy (context),
+                                  arg_type->getPointerTo (), false);
     function = llvm::Function::Create (ft, llvm::Function::ExternalLinkage,
                                        "foobar", module);
 
     try
       {
         prelude = llvm::BasicBlock::Create (context, "prelude", function);
         builder.SetInsertPoint (prelude);
 
         llvm::Value *arg = &*(function->arg_begin ());
         for (size_t i = 0; i < argument_vec.size (); ++i)
           {
-            llvm::Value *loaded_arg = builder.CreateConstInBoundsGEP1_32 (arg, i);
+            // llvm::Value *loaded_arg = builder.CreateConstInBoundsGEP1_32 (arg, i);         // LLVM <= 3.6
+            llvm::Value *loaded_arg = builder.CreateConstInBoundsGEP1_32 (arg_type, arg, i);  // LLVM >= 3.7
             arguments[argument_vec[i].first] = loaded_arg;
           }
 
         convert (blocks, constants);
       }
     catch (const jit_fail_exception& e)
       {
         function->eraseFromParent ();
@@ -2257,17 +2257,18 @@ void
         llvm::BasicBlock *wrapper_body = wrapper.new_block ();
         builder.SetInsertPoint (wrapper_body);
 
         llvm::Value *wrapper_arg = wrapper.argument (builder, 0);
         std::vector<llvm::Value *> raw_args (nargs);
         for (size_t i = 0; i < nargs; ++i)
           {
             llvm::Value *arg;
-            arg = builder.CreateConstInBoundsGEP1_32 (wrapper_arg, i);
+            // arg = builder.CreateConstInBoundsGEP1_32 (wrapper_arg, i);                  // LLVM <= 3.6
+            arg = builder.CreateConstInBoundsGEP1_32 (any_t->to_llvm (), wrapper_arg, i);  // LLVM >= 3.7
             arg = builder.CreateLoad (arg);
 
             jit_type *arg_type = argument_types[i];
             const jit_function& cast = jit_typeinfo::cast (arg_type, any_t);
             raw_args[i] = cast.call (builder, arg);
           }
 
         llvm::Value *result = raw_fn.call (builder, raw_args);
