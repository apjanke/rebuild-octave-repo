# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1480397840 18000
#      Tue Nov 29 00:37:20 2016 -0500
# Node ID 7bb977866f55b9f2503f9ce32e29c0428a2c0185
# Parent  a2809b2938d62544115406e4aafaf8c0c2dda64b
use F77_INT instead of octave_idx_type for liboctave schur class

* schur.h, schur.cc: Use F77_INT instead of octave_idx_type for
interfacing with Fortran.

diff --git a/liboctave/numeric/schur.cc b/liboctave/numeric/schur.cc
--- a/liboctave/numeric/schur.cc
+++ b/liboctave/numeric/schur.cc
@@ -88,21 +88,21 @@ namespace octave
     static F77_INT
     select_dig (const F77_CMPLX& a_arg)
     {
       const FloatComplex& a = reinterpret_cast<const FloatComplex&> (a_arg);
       return (abs (a) < 1.0);
     }
 
     template <>
-    octave_idx_type
+    F77_INT
     schur<Matrix>::init (const Matrix& a, const std::string& ord, bool calc_unitary)
     {
-      octave_idx_type a_nr = a.rows ();
-      octave_idx_type a_nc = a.cols ();
+      F77_INT a_nr = to_f77_int (a.rows ());
+      F77_INT a_nc = to_f77_int (a.cols ());
 
       if (a_nr != a_nc)
         (*current_liboctave_error_handler) ("schur: requires square matrix");
 
       if (a_nr == 0)
         {
           schur_mat.clear ();
           unitary_mat.clear ();
@@ -127,21 +127,21 @@ namespace octave
         sort = 'S';
 
       volatile double_selector selector = 0;
       if (ord_char == 'A' || ord_char == 'a')
         selector = select_ana;
       else if (ord_char == 'D' || ord_char == 'd')
         selector = select_dig;
 
-      octave_idx_type n = a_nc;
-      octave_idx_type lwork = 8 * n;
-      octave_idx_type liwork = 1;
-      octave_idx_type info;
-      octave_idx_type sdim;
+      F77_INT n = a_nc;
+      F77_INT lwork = 8 * n;
+      F77_INT liwork = 1;
+      F77_INT info;
+      F77_INT sdim;
       double rconde;
       double rcondv;
 
       schur_mat = a;
 
       if (calc_unitary)
         unitary_mat.clear (n, n);
 
@@ -153,43 +153,43 @@ namespace octave
 
       Array<double> wi (dim_vector (n, 1));
       double *pwi = wi.fortran_vec ();
 
       Array<double> work (dim_vector (lwork, 1));
       double *pwork = work.fortran_vec ();
 
       // BWORK is not referenced for the non-ordered Schur routine.
-      octave_idx_type ntmp = (ord_char == 'N' || ord_char == 'n') ? 0 : n;
-      Array<octave_idx_type> bwork (dim_vector (ntmp, 1));
-      octave_idx_type *pbwork = bwork.fortran_vec ();
+      F77_INT ntmp = (ord_char == 'N' || ord_char == 'n') ? 0 : n;
+      Array<F77_INT> bwork (dim_vector (ntmp, 1));
+      F77_INT *pbwork = bwork.fortran_vec ();
 
-      Array<octave_idx_type> iwork (dim_vector (liwork, 1));
-      octave_idx_type *piwork = iwork.fortran_vec ();
+      Array<F77_INT> iwork (dim_vector (liwork, 1));
+      F77_INT *piwork = iwork.fortran_vec ();
 
       F77_XFCN (dgeesx, DGEESX, (F77_CONST_CHAR_ARG2 (&jobvs, 1),
                                  F77_CONST_CHAR_ARG2 (&sort, 1),
                                  selector,
                                  F77_CONST_CHAR_ARG2 (&sense, 1),
                                  n, s, n, sdim, pwr, pwi, q, n, rconde, rcondv,
                                  pwork, lwork, piwork, liwork, pbwork, info
                                  F77_CHAR_ARG_LEN (1)
                                  F77_CHAR_ARG_LEN (1)
                                  F77_CHAR_ARG_LEN (1)));
 
       return info;
     }
 
     template <>
-    octave_idx_type
+    F77_INT
     schur<FloatMatrix>::init (const FloatMatrix& a, const std::string& ord,
                               bool calc_unitary)
     {
-      octave_idx_type a_nr = a.rows ();
-      octave_idx_type a_nc = a.cols ();
+      F77_INT a_nr = to_f77_int (a.rows ());
+      F77_INT a_nc = to_f77_int (a.cols ());
 
       if (a_nr != a_nc)
         (*current_liboctave_error_handler) ("SCHUR requires square matrix");
 
       if (a_nr == 0)
         {
           schur_mat.clear ();
           unitary_mat.clear ();
@@ -214,21 +214,21 @@ namespace octave
         sort = 'S';
 
       volatile float_selector selector = 0;
       if (ord_char == 'A' || ord_char == 'a')
         selector = select_ana;
       else if (ord_char == 'D' || ord_char == 'd')
         selector = select_dig;
 
-      octave_idx_type n = a_nc;
-      octave_idx_type lwork = 8 * n;
-      octave_idx_type liwork = 1;
-      octave_idx_type info;
-      octave_idx_type sdim;
+      F77_INT n = a_nc;
+      F77_INT lwork = 8 * n;
+      F77_INT liwork = 1;
+      F77_INT info;
+      F77_INT sdim;
       float rconde;
       float rcondv;
 
       schur_mat = a;
 
       if (calc_unitary)
         unitary_mat.clear (n, n);
 
@@ -240,43 +240,43 @@ namespace octave
 
       Array<float> wi (dim_vector (n, 1));
       float *pwi = wi.fortran_vec ();
 
       Array<float> work (dim_vector (lwork, 1));
       float *pwork = work.fortran_vec ();
 
       // BWORK is not referenced for the non-ordered Schur routine.
-      octave_idx_type ntmp = (ord_char == 'N' || ord_char == 'n') ? 0 : n;
-      Array<octave_idx_type> bwork (dim_vector (ntmp, 1));
-      octave_idx_type *pbwork = bwork.fortran_vec ();
+      F77_INT ntmp = (ord_char == 'N' || ord_char == 'n') ? 0 : n;
+      Array<F77_INT> bwork (dim_vector (ntmp, 1));
+      F77_INT *pbwork = bwork.fortran_vec ();
 
-      Array<octave_idx_type> iwork (dim_vector (liwork, 1));
-      octave_idx_type *piwork = iwork.fortran_vec ();
+      Array<F77_INT> iwork (dim_vector (liwork, 1));
+      F77_INT *piwork = iwork.fortran_vec ();
 
       F77_XFCN (sgeesx, SGEESX, (F77_CONST_CHAR_ARG2 (&jobvs, 1),
                                  F77_CONST_CHAR_ARG2 (&sort, 1),
                                  selector,
                                  F77_CONST_CHAR_ARG2 (&sense, 1),
                                  n, s, n, sdim, pwr, pwi, q, n, rconde, rcondv,
                                  pwork, lwork, piwork, liwork, pbwork, info
                                  F77_CHAR_ARG_LEN (1)
                                  F77_CHAR_ARG_LEN (1)
                                  F77_CHAR_ARG_LEN (1)));
 
       return info;
     }
 
     template <>
-    octave_idx_type
+    F77_INT
     schur<ComplexMatrix>::init (const ComplexMatrix& a, const std::string& ord,
                                 bool calc_unitary)
     {
-      octave_idx_type a_nr = a.rows ();
-      octave_idx_type a_nc = a.cols ();
+      F77_INT a_nr = to_f77_int (a.rows ());
+      F77_INT a_nc = to_f77_int (a.cols ());
 
       if (a_nr != a_nc)
         (*current_liboctave_error_handler) ("SCHUR requires square matrix");
 
       if (a_nr == 0)
         {
           schur_mat.clear ();
           unitary_mat.clear ();
@@ -301,20 +301,20 @@ namespace octave
         sort = 'S';
 
       volatile complex_selector selector = 0;
       if (ord_char == 'A' || ord_char == 'a')
         selector = select_ana;
       else if (ord_char == 'D' || ord_char == 'd')
         selector = select_dig;
 
-      octave_idx_type n = a_nc;
-      octave_idx_type lwork = 8 * n;
-      octave_idx_type info;
-      octave_idx_type sdim;
+      F77_INT n = a_nc;
+      F77_INT lwork = 8 * n;
+      F77_INT info;
+      F77_INT sdim;
       double rconde;
       double rcondv;
 
       schur_mat = a;
       if (calc_unitary)
         unitary_mat.clear (n, n);
 
       Complex *s = schur_mat.fortran_vec ();
@@ -325,19 +325,19 @@ namespace octave
 
       Array<Complex> w (dim_vector (n, 1));
       Complex *pw = w.fortran_vec ();
 
       Array<Complex> work (dim_vector (lwork, 1));
       Complex *pwork = work.fortran_vec ();
 
       // BWORK is not referenced for non-ordered Schur.
-      octave_idx_type ntmp = (ord_char == 'N' || ord_char == 'n') ? 0 : n;
-      Array<octave_idx_type> bwork (dim_vector (ntmp, 1));
-      octave_idx_type *pbwork = bwork.fortran_vec ();
+      F77_INT ntmp = (ord_char == 'N' || ord_char == 'n') ? 0 : n;
+      Array<F77_INT> bwork (dim_vector (ntmp, 1));
+      F77_INT *pbwork = bwork.fortran_vec ();
 
       F77_XFCN (zgeesx, ZGEESX, (F77_CONST_CHAR_ARG2 (&jobvs, 1),
                                  F77_CONST_CHAR_ARG2 (&sort, 1),
                                  selector,
                                  F77_CONST_CHAR_ARG2 (&sense, 1),
                                  n, F77_DBLE_CMPLX_ARG (s), n, sdim, F77_DBLE_CMPLX_ARG (pw),
                                  F77_DBLE_CMPLX_ARG (q), n, rconde, rcondv,
                                  F77_DBLE_CMPLX_ARG (pwork), lwork, prwork, pbwork, info
@@ -350,17 +350,17 @@ namespace octave
 
     template <>
     schur<ComplexMatrix>
     rsf2csf<ComplexMatrix, Matrix> (const Matrix& s_arg, const Matrix& u_arg)
     {
       ComplexMatrix s (s_arg);
       ComplexMatrix u (u_arg);
 
-      octave_idx_type n = s.rows ();
+      F77_INT n = to_f77_int (s.rows ());
 
       if (s.columns () != n || u.rows () != n || u.columns () != n)
         (*current_liboctave_error_handler)
           ("rsf2csf: inconsistent matrix dimensions");
 
       if (n > 0)
         {
           OCTAVE_LOCAL_BUFFER (double, c, n-1);
@@ -369,22 +369,22 @@ namespace octave
           F77_XFCN (zrsf2csf, ZRSF2CSF, (n, F77_DBLE_CMPLX_ARG (s.fortran_vec ()),
                                          F77_DBLE_CMPLX_ARG (u.fortran_vec ()), c, sx));
         }
 
       return schur<ComplexMatrix> (s, u);
     }
 
     template <>
-    octave_idx_type
+    F77_INT
     schur<FloatComplexMatrix>::init (const FloatComplexMatrix& a,
                                      const std::string& ord, bool calc_unitary)
     {
-      octave_idx_type a_nr = a.rows ();
-      octave_idx_type a_nc = a.cols ();
+      F77_INT a_nr = to_f77_int (a.rows ());
+      F77_INT a_nc = to_f77_int (a.cols ());
 
       if (a_nr != a_nc)
         (*current_liboctave_error_handler) ("SCHUR requires square matrix");
 
       if (a_nr == 0)
         {
           schur_mat.clear ();
           unitary_mat.clear ();
@@ -409,20 +409,20 @@ namespace octave
         sort = 'S';
 
       volatile float_complex_selector selector = 0;
       if (ord_char == 'A' || ord_char == 'a')
         selector = select_ana;
       else if (ord_char == 'D' || ord_char == 'd')
         selector = select_dig;
 
-      octave_idx_type n = a_nc;
-      octave_idx_type lwork = 8 * n;
-      octave_idx_type info;
-      octave_idx_type sdim;
+      F77_INT n = a_nc;
+      F77_INT lwork = 8 * n;
+      F77_INT info;
+      F77_INT sdim;
       float rconde;
       float rcondv;
 
       schur_mat = a;
       if (calc_unitary)
         unitary_mat.clear (n, n);
 
       FloatComplex *s = schur_mat.fortran_vec ();
@@ -433,19 +433,19 @@ namespace octave
 
       Array<FloatComplex> w (dim_vector (n, 1));
       FloatComplex *pw = w.fortran_vec ();
 
       Array<FloatComplex> work (dim_vector (lwork, 1));
       FloatComplex *pwork = work.fortran_vec ();
 
       // BWORK is not referenced for non-ordered Schur.
-      octave_idx_type ntmp = (ord_char == 'N' || ord_char == 'n') ? 0 : n;
-      Array<octave_idx_type> bwork (dim_vector (ntmp, 1));
-      octave_idx_type *pbwork = bwork.fortran_vec ();
+      F77_INT ntmp = (ord_char == 'N' || ord_char == 'n') ? 0 : n;
+      Array<F77_INT> bwork (dim_vector (ntmp, 1));
+      F77_INT *pbwork = bwork.fortran_vec ();
 
       F77_XFCN (cgeesx, CGEESX, (F77_CONST_CHAR_ARG2 (&jobvs, 1),
                                  F77_CONST_CHAR_ARG2 (&sort, 1),
                                  selector,
                                  F77_CONST_CHAR_ARG2 (&sense, 1),
                                  n, F77_CMPLX_ARG (s), n, sdim, F77_CMPLX_ARG (pw), F77_CMPLX_ARG (q), n, rconde,
                                  rcondv,
                                  F77_CMPLX_ARG (pwork), lwork, prwork, pbwork, info
@@ -459,17 +459,17 @@ namespace octave
     template <>
     schur<FloatComplexMatrix>
     rsf2csf<FloatComplexMatrix, FloatMatrix> (const FloatMatrix& s_arg,
                                               const FloatMatrix& u_arg)
     {
       FloatComplexMatrix s (s_arg);
       FloatComplexMatrix u (u_arg);
 
-      octave_idx_type n = s.rows ();
+      F77_INT n = to_f77_int (s.rows ());
 
       if (s.columns () != n || u.rows () != n || u.columns () != n)
         (*current_liboctave_error_handler)
           ("rsf2csf: inconsistent matrix dimensions");
 
       if (n > 0)
         {
           OCTAVE_LOCAL_BUFFER (float, c, n-1);
diff --git a/liboctave/numeric/schur.h b/liboctave/numeric/schur.h
--- a/liboctave/numeric/schur.h
+++ b/liboctave/numeric/schur.h
@@ -47,17 +47,17 @@ namespace octave
       schur (void) : schur_mat (), unitary_mat () { }
 
       schur (const T& a, const std::string& ord, bool calc_unitary = true)
         : schur_mat (), unitary_mat ()
       {
         init (a, ord, calc_unitary);
       }
 
-      schur (const T& a, const std::string& ord, octave_idx_type& info,
+      schur (const T& a, const std::string& ord, octave_f77_int_type& info,
              bool calc_unitary = true)
         : schur_mat (), unitary_mat ()
       {
         info = init (a, ord, calc_unitary);
       }
 
       // This one should really be protected or private but we need it in
       // rsf2csf and I don't see how to make that function a friend of
@@ -88,17 +88,17 @@ namespace octave
 
     protected:
 
     private:
 
       T schur_mat;
       T unitary_mat;
 
-      octave_idx_type
+      octave_f77_int_type
       init (const T& a, const std::string& ord, bool calc_unitary);
     };
 
     template <typename RT, typename AT>
     extern schur<RT>
     rsf2csf (const AT& s, const AT& u);
   }
 }
