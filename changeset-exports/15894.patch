# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1357252843 18000
#      Thu Jan 03 17:40:43 2013 -0500
# Node ID 9cd14e53e906860fff663edaec7d922f553f6f02
# Parent  1f076c40c133fcf2e2d39274663c425750211b6f
eliminate some compiler warnings for GUI code

* QTerminalInterface.h (QTerminalInterface::QTerminalInterface):
Eliminate shadow variable warning.
* QTerminal.h (QTerminal::Qterminal): Likewise.
* history-dockwidget.cc (history_dock_widget::ctxMenu): Likewise.
(history_dock_widget::handle_contextmenu_copy,
history_dock_widget::handle_contextmenu_evaluate): Eliminate unused
variable warning.
* file-editor-tab.cc (file_editor_tab::check_file_modified): Eliminate
unsed variable warning.
(file_editor_tab::nmotice_settings) Eliminate shadow variable
warnings.
* file-editor.cc (file_editor::construct): Comment out unsed variable.

* main-window.cc (main_window::notice_settings): Move definition of
WIDGET_ICON_SET_PREFIX here.
* resource-manager.h: From here.

diff --git a/libgui/qterminal/libqterminal/QTerminal.h b/libgui/qterminal/libqterminal/QTerminal.h
--- a/libgui/qterminal/libqterminal/QTerminal.h
+++ b/libgui/qterminal/libqterminal/QTerminal.h
@@ -26,25 +26,25 @@ along with Foobar.  If not, see <http://
 #include <QtGlobal>
 
 #ifdef Q_OS_WIN32
     #include "win32/QWinTerminalImpl.h"
     class QTerminal : public QWinTerminalImpl
     {
         Q_OBJECT
     public:
-        QTerminal(QWidget *parent = 0)
-            : QWinTerminalImpl(parent) { }
+        QTerminal(QWidget *xparent = 0)
+            : QWinTerminalImpl(xparent) { }
         ~QTerminal() { }
     };
 #else
     #include "unix/QUnixTerminalImpl.h"
     class QTerminal : public QUnixTerminalImpl
     {
         Q_OBJECT
     public:
-        QTerminal(QWidget *parent = 0)
-            : QUnixTerminalImpl(parent) { }
+        QTerminal(QWidget *xparent = 0)
+            : QUnixTerminalImpl(xparent) { }
         ~QTerminal() { }
     };
 #endif
 
 #endif // QTERMINAL_H
diff --git a/libgui/qterminal/libqterminal/QTerminalInterface.h b/libgui/qterminal/libqterminal/QTerminalInterface.h
--- a/libgui/qterminal/libqterminal/QTerminalInterface.h
+++ b/libgui/qterminal/libqterminal/QTerminalInterface.h
@@ -25,17 +25,17 @@ along with Foobar.  If not, see <http://
 
 #include <QWidget>
 #include <QMenu>
 
 class QTerminalInterface : public QWidget
 {
     Q_OBJECT
 public:
-    QTerminalInterface(QWidget *parent = 0) : QWidget(parent) {
+    QTerminalInterface(QWidget *xparent = 0) : QWidget(xparent) {
       connect (this, SIGNAL(customContextMenuRequested(QPoint)),
                this, SLOT(handleCustomContextMenuRequested(QPoint)));
 
       setContextMenuPolicy (Qt::CustomContextMenu);
 
       _contextMenu = new QMenu (this);
       QAction *copyAction  = _contextMenu->addAction ("Copy");
       QAction *pasteAction = _contextMenu->addAction ("Paste");
diff --git a/libgui/src/history-dockwidget.cc b/libgui/src/history-dockwidget.cc
--- a/libgui/src/history-dockwidget.cc
+++ b/libgui/src/history-dockwidget.cc
@@ -97,38 +97,38 @@ history_dock_widget::construct ()
            this,
            SLOT (request_history_model_update ()));
 
   _update_history_model_timer.start ();
 
   setFocusProxy (_filter_line_edit);
 }
 
-void history_dock_widget::ctxMenu(const QPoint &pos) {
+void history_dock_widget::ctxMenu(const QPoint &xpos) {
     QMenu *menu = new QMenu;
     menu->addAction(tr("Copy"), this, SLOT(handle_contextmenu_copy(bool)));
     menu->addAction(tr("Evaluate"), this, SLOT(handle_contextmenu_evaluate(bool)));
-    menu->exec(_history_list_view->mapToGlobal(pos));
+    menu->exec(_history_list_view->mapToGlobal(xpos));
 }
 
-void history_dock_widget::handle_contextmenu_copy(bool flag)
+void history_dock_widget::handle_contextmenu_copy(bool)
 {
   QString text;
   QItemSelectionModel *selectionModel = _history_list_view->selectionModel();
   QModelIndexList rows = selectionModel->selectedRows();
   QModelIndexList::iterator it;
   for (it=rows.begin() ; it != rows.end(); it++) {
     if ((*it).isValid()) {
       text += (*it).data().toString()+"\n";
     }
   }
   QApplication::clipboard()->setText(text);
 }
 
-void history_dock_widget::handle_contextmenu_evaluate(bool flag)
+void history_dock_widget::handle_contextmenu_evaluate(bool)
 {
   QItemSelectionModel *selectionModel = _history_list_view->selectionModel();
   QModelIndexList rows = selectionModel->selectedRows();
   QModelIndexList::iterator it;
   for (it=rows.begin() ; it != rows.end(); it++) {
     if ((*it).isValid()) {
       emit command_double_clicked ((*it).data().toString()+"\n");
     }
diff --git a/libgui/src/m-editor/file-editor-tab.cc b/libgui/src/m-editor/file-editor-tab.cc
--- a/libgui/src/m-editor/file-editor-tab.cc
+++ b/libgui/src/m-editor/file-editor-tab.cc
@@ -670,17 +670,17 @@ file_editor_tab::update_window_title (bo
 void
 file_editor_tab::handle_copy_available(bool enableCopy)
 {
   _copy_available = enableCopy;
   emit editor_state_changed (_copy_available, QDir::cleanPath (_file_name));
 }
 
 int
-file_editor_tab::check_file_modified (const QString& msg, int cancelButton)
+file_editor_tab::check_file_modified (const QString&, int)
 {
   int decision = QMessageBox::Yes;
   if (_edit_area->isModified ())
     {
       // File is modified but not saved, ask user what to do.  The file
       // editor tab can't be made parent because it may be deleted depending
       // upon the response.  Instead, change the _edit_area to read only.
       QMessageBox* msgBox = new QMessageBox (
@@ -982,23 +982,24 @@ file_editor_tab::notice_settings ()
 
   _edit_area->setCaretLineVisible(settings->value ("editor/highlightCurrentLine",true).toBool ());
 
   if (settings->value ("editor/codeCompletion",true).toBool ())
     _edit_area->setAutoCompletionThreshold (1);
   else
     _edit_area->setAutoCompletionThreshold (-1);
 
-  QFont font( settings->value ("editor/fontName","Courier").toString () ,
-              settings->value ("editor/fontSize",10).toInt () );
+  QFont xfont (settings->value ("editor/fontName","Courier").toString (),
+               settings->value ("editor/fontSize",10).toInt ());
+
   if (settings->value ("editor/showLineNumbers",true).toBool ())
     {
       _edit_area->setMarginLineNumbers (2, true);
-      _edit_area->setMarginsFont( font );
-      QFontMetrics metrics( font );
+      _edit_area->setMarginsFont (xfont);
+      QFontMetrics metrics (xfont);
       _edit_area->setMarginWidth(2, metrics.width("9999"));
     }
   else
     {
       _edit_area->setMarginLineNumbers (2, false);
       _edit_area->setMarginWidth(2, 0);
     }
 
diff --git a/libgui/src/m-editor/file-editor.cc b/libgui/src/m-editor/file-editor.cc
--- a/libgui/src/m-editor/file-editor.cc
+++ b/libgui/src/m-editor/file-editor.cc
@@ -506,17 +506,19 @@ file_editor::top_level_changed (bool flo
       show();                      // make it visible again since setWindowFlag hides it
     }
 }
 
 void
 file_editor::construct ()
 {
   QWidget *editor_widget = new QWidget (this);
-  QStyle *editor_style = QApplication::style ();
+
+  // FIXME -- what was the intended purpose of this unused variable?
+  // QStyle *editor_style = QApplication::style ();
 
   _menu_bar = new QMenuBar (editor_widget);
   _tool_bar = new QToolBar (editor_widget);
   _tab_widget = new QTabWidget (editor_widget);
   _tab_widget->setTabsClosable (true);
 
   QAction *new_action = new QAction (QIcon(":/actions/icons/filenew.png"),
                                      tr("&New File"), _tool_bar);
diff --git a/libgui/src/main-window.cc b/libgui/src/main-window.cc
--- a/libgui/src/main-window.cc
+++ b/libgui/src/main-window.cc
@@ -198,16 +198,26 @@ main_window::process_settings_dialog_req
       emit settings_changed ();
     }
   delete settingsDialog;
 }
 
 void
 main_window::notice_settings ()
 {
+  // FIXME -- was this supposed to be configurable in some way?  If so,
+  // maybe it should be moved back to resource-manager.{h,cc}, but not
+  // as a static variable.
+  static const char *WIDGET_ICON_SET_PREFIX[] =
+    {
+      ":/actions/icons/logo.png",
+      ":/actions/icons/graphic_logo_",
+      ":/actions/icons/letter_logo_"
+    };
+
   // Set terminal font:
   QSettings *settings = resource_manager::get_settings ();
 
   // FIXME -- what should happen if settings is 0?
 
   QFont term_font = QFont();
   term_font.setFamily(settings->value("terminal/fontName").toString());
   term_font.setPointSize(settings->value("terminal/fontSize").toInt ());
diff --git a/libgui/src/resource-manager.h b/libgui/src/resource-manager.h
--- a/libgui/src/resource-manager.h
+++ b/libgui/src/resource-manager.h
@@ -30,21 +30,16 @@ along with Octave; see the file COPYING.
 
 // constants for the widget's icons
 enum widget_icon_set
   {
     NO_ICON_SET = 0,
     GRAPHIC_ICON_SET,
     LETTER_ICON_SET
   };
-static const char* WIDGET_ICON_SET_PREFIX[] =
-    {":/actions/icons/logo.png",
-     ":/actions/icons/graphic_logo_",
-     ":/actions/icons/letter_logo_"};
-
 
 class resource_manager
 {
 protected:
 
   resource_manager (void);
 
 public:
