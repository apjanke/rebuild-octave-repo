# HG changeset patch
# User Stephen Montgomery-Smith <stephen@missouri.edu>
# Date 1467375374 -36000
#      Fri Jul 01 22:16:14 2016 +1000
# Node ID 6d73cb87591a977b568d8225f90cdbca21916a56
# Parent  86a49caa5100739624f2678520b580bae186c954
Avoid underflow in explicit floating point calculating det (bug #39014)

* DET.h (det::operator *=): Renormalize mantissa after multiplication,
not multiplier before.

* det.cc: New test.

diff --git a/libinterp/corefcn/det.cc b/libinterp/corefcn/det.cc
--- a/libinterp/corefcn/det.cc
+++ b/libinterp/corefcn/det.cc
@@ -221,12 +221,13 @@ For that, use any of the condition numbe
     }
 
   return retval;
 }
 
 /*
 %!assert (det ([1, 2; 3, 4]), -2, 10*eps)
 %!assert (det (single ([1, 2; 3, 4])), single (-2), 10*eps ("single"))
+%!assert (det (eye (2000)), 1)
 %!error det ()
 %!error det (1, 2)
 %!error <must be a square matrix> det ([1, 2; 3, 4; 5, 6])
 */
diff --git a/liboctave/numeric/DET.h b/liboctave/numeric/DET.h
--- a/liboctave/numeric/DET.h
+++ b/liboctave/numeric/DET.h
@@ -69,17 +69,19 @@ public:
   T value () const { return c2 * static_cast<T> (std::ldexp (1.0, e2)); }
   operator T () const { return value (); }
 
   base_det square () const { return base_det (c2*c2, e2+e2); }
 
   void operator *= (T t)
   {
     int e;
-    c2 *= octave::math::log2 (t, e);
+    c2 *= t;
+    // Renormalize c2 to [0.5, 1), and find required change in exponent.
+    c2 = octave::math::log2 (c2, e);
     e2 += e;
   }
 
 private:
 
   T c2;
   int e2;
 };
