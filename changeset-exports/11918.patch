# HG changeset patch
# User Ben Abbott <bpabbott@mac.com>
# Date 1231758846 -3600
#      Mon Jan 12 12:14:06 2009 +0100
# Branch release-3-0-x
# Node ID f2af2233ce7fa10e70aba8ff9425549c7e95df44
# Parent  deb777a926ee7a6d2caf2dd76630206fe367fde1
polyfit.m: Fixed tests.

diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,8 +1,12 @@
+2008-03-04  Ben Abbott <bpabbott@mac.com>
+
+	* polynomial/polyfit.m: Modified tests to respect a relative tolerance.
+
 2008-02-19  Ben Abbott  <bpabbott@mac.com>
 
 	* polynomial/polyfit.m: Use QR decomposition.  Handle
 	normalization option.
 	* polynomial/polyval.m: Normalize dependent variable.  Optionally
 	generate 50% prediction intervals.
 
 2008-10-13  Francesco Potorti  <pot@gnu.org>
diff --git a/scripts/polynomial/polyfit.m b/scripts/polynomial/polyfit.m
--- a/scripts/polynomial/polyfit.m
+++ b/scripts/polynomial/polyfit.m
@@ -115,18 +115,17 @@ function [p, s, mu] = polyfit (x, y, n)
 %!test
 %! x = [ -1196.4, -1195.2, -1194, -1192.8, -1191.6, -1190.4, -1189.2, -1188, \
 %!       -1186.8, -1185.6, -1184.4, -1183.2, -1182];
 %! y = [ 315571.7086, 315575.9618, 315579.4195, 315582.6206, 315585.4966,    \
 %!       315588.3172, 315590.9326, 315593.5934, 315596.0455, 315598.4201,    \
 %!       315600.7143, 315602.9508, 315605.1765 ];
 %! [p1, s1] = polyfit (x, y, 10);
 %! [p2, s2, mu] = polyfit (x, y, 10);
-%! assert (s1.normr, 0.11264, 0.1)
-%! assert (s2.normr < s1.normr)
+%! assert (2*s2.normr < s1.normr)
 
 %!test
 %! x = 1:4;
 %! p0 = [1i, 0, 2i, 4];
 %! y0 = polyval (p0, x);
 %! p = polyfit (x, y0, numel(p0)-1);
 %! assert (p, p0, 1000*eps)
 
@@ -135,17 +134,17 @@ function [p, s, mu] = polyfit (x, y, n)
 %! xn = (x - mean (x)) / std (x);
 %! pn = ones (1,5);
 %! y = polyval (pn, xn);
 %! [p, s, mu] = polyfit (x, y, numel(pn)-1);
 %! [p2, s2] = polyfit (x, y, numel(pn)-1);
 %! assert (p, pn, s.normr)
 %! assert (s.yf, y, s.normr)
 %! assert (mu, [mean(x), std(x)])
-%! assert (s.normr/s2.normr < 1e-9)
+%! assert (s.normr/s2.normr < sqrt(eps))
 
 %!test
 %! x = [1, 2, 3; 4, 5, 6];
 %! y = [0, 0, 1; 1, 0, 0];
 %! p = polyfit (x, y, 5);
 %! expected = [0, 1, -14, 65, -112, 60]/12;
 %! assert (p, expected, sqrt(eps))
 
