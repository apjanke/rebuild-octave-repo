# HG changeset patch
# User jwe
# Date 1041548123 0
#      Thu Jan 02 22:55:23 2003 +0000
# Node ID bdaa0d3dfc0bf781e3e4498f559adc83fd0423dc
# Parent  17826ec287bc784dc91717481e4ec09ddb45f6b5
[project @ 2003-01-02 22:55:23 by jwe]

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,23 @@
+2003-01-02  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* symtab.cc (symbol_record::define): If definition already exists,
+	redefine it instead of replacing it.
+
+	* variables.cc (symbol_exist): Don't use reference when handling
+	sr->def ().
+
+	* pt-plot.cc (save_in_tmp_file): octave_value arg is now const.
+	* pt-misc.cc (tree_parameter_list::initialize_undefined_elements):
+	Likewise.
+
+	* symtab.cc (symbol_record::clear): Don't do anything if the
+	symbol record is already undefined.
+
 2003-01-01  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* pt-arg-list.cc (tree_argument_list::append): New function.
 	(tree_argument_list::convert_to_const_vector): Don't save and
 	set pointer to indexed object if list_includes_magic_end is false.
 	* pt-arg-list.h (tree_argument_list::append): Provide decl.
 	(tree_argument_list::list_includes_magic_end): New data member.
 	(tree_argument_list::tree_argument_list): Initialize it.
diff --git a/src/pt-misc.cc b/src/pt-misc.cc
--- a/src/pt-misc.cc
+++ b/src/pt-misc.cc
@@ -54,17 +54,17 @@ tree_parameter_list::mark_as_formal_para
   for (iterator p = begin (); p != end (); p++)
     {
       tree_identifier *elt = *p;
       elt->mark_as_formal_parameter ();
     }
 }
 
 void
-tree_parameter_list::initialize_undefined_elements (octave_value& val)
+tree_parameter_list::initialize_undefined_elements (const octave_value& val)
 {
   for (iterator p = begin (); p != end (); p++)
     {
       tree_identifier *elt = *p;
 
       if (! elt->is_defined ())
 	{
 	  octave_lvalue tmp = elt->lvalue ();
diff --git a/src/pt-misc.h b/src/pt-misc.h
--- a/src/pt-misc.h
+++ b/src/pt-misc.h
@@ -60,17 +60,17 @@ public:
   void mark_varargs (void) { marked_for_varargs = 1; }
 
   bool takes_varargs (void) const { return marked_for_varargs != 0; }
 
   void mark_varargs_only (void) { marked_for_varargs = -1; }
 
   bool varargs_only (void) { return (marked_for_varargs < 0); }
 
-  void initialize_undefined_elements (octave_value& val);
+  void initialize_undefined_elements (const octave_value& val);
 
   void define_from_arg_vector (const octave_value_list& args);
 
   void undefine (void);
 
   bool is_defined (void);
 
   octave_value_list convert_to_const_vector (tree_va_return_list *vr_list);
diff --git a/src/pt-plot.cc b/src/pt-plot.cc
--- a/src/pt-plot.cc
+++ b/src/pt-plot.cc
@@ -840,17 +840,17 @@ subplot_list::print (int ndim, OSSTREAM&
 
 void
 subplot_list::accept (tree_walker& tw)
 {
   tw.visit_subplot_list (*this);
 }
 
 std::string
-save_in_tmp_file (octave_value& t, int ndim, bool parametric)
+save_in_tmp_file (const octave_value& t, int ndim, bool parametric)
 {
   std::string name = file_ops::tempnam ("", "oct-");
 
   if (! name.empty ())
     {
       std::ofstream file (name.c_str ());
 
       if (file)
diff --git a/src/pt-plot.h b/src/pt-plot.h
--- a/src/pt-plot.h
+++ b/src/pt-plot.h
@@ -421,18 +421,18 @@ private:
 
   // No copying!
 
   subplot_list (const subplot_list&);
 
   subplot_list& operator = (const subplot_list&);
 };
 
-extern std::string save_in_tmp_file (octave_value& t, int ndim = 2,
-				bool parametric = false);
+extern std::string save_in_tmp_file (const octave_value& t, int ndim = 2,
+				     bool parametric = false);
 
 extern void mark_for_deletion (const std::string&);
 
 extern void cleanup_tmp_files (void);
 
 extern void close_plot_stream (void);
 
 extern void do_external_plotter_cd (const std::string& newdir);
diff --git a/src/symtab.cc b/src/symtab.cc
--- a/src/symtab.cc
+++ b/src/symtab.cc
@@ -242,39 +242,43 @@ bool
 symbol_record::define (octave_function *f, unsigned int sym_type)
 {
   bool retval = false;
 
   if (! read_only_error ("redefine"))
     {
       octave_value tmp (f);
 
-      delete definition;
-
-      definition = new symbol_def (tmp, sym_type);
+      if (! definition)
+	definition = new symbol_def (tmp, sym_type);
+      else
+	definition->define (tmp, sym_type);
 
       retval = true;
     }
 
   return retval;
 }
 
 void
 symbol_record::clear (void)
 {
-  if (! tagged_static)
+  if (is_defined ())
     {
-      if (--definition->count <= 0)
-	delete definition;
+      if (! tagged_static)
+	{
+	  if (--definition->count <= 0)
+	    delete definition;
 
-      definition = new symbol_def ();
-    }
+	  definition = new symbol_def ();
+	}
 
-  if (linked_to_global)
-    linked_to_global = 0;
+      if (linked_to_global)
+	linked_to_global = 0;
+    }
 }
 
 void
 symbol_record::alias (symbol_record *s)
 {
   chg_fcn = s->chg_fcn;
 
   if (--definition->count <= 0)
diff --git a/src/variables.cc b/src/variables.cc
--- a/src/variables.cc
+++ b/src/variables.cc
@@ -581,17 +581,17 @@ symbol_exist (const std::string& name, c
 	      retval = 102;
 	    }
 	}
 
       if (! retval
 	  && (type == "any" || type == "file")
 	  && (sr->is_user_function () || sr->is_dld_function ()))
 	{
-	  octave_value& t = sr->def ();
+	  octave_value t = sr->def ();
 	  octave_function *f = t.function_value (true);
 	  std::string s = f ? f->fcn_file_name () : std::string ();
 
 	  retval = s.empty () ? 103 : 2;
 	}
     }
 
   if (! retval)
diff --git a/src/version.h b/src/version.h
--- a/src/version.h
+++ b/src/version.h
@@ -18,20 +18,20 @@ You should have received a copy of the G
 along with Octave; see the file COPYING.  If not, write to the Free
 Software Foundation, 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 
 */
 
 #if !defined (octave_version_h)
 #define octave_version_h 1
 
-#define OCTAVE_VERSION "2.1.40"
+#define OCTAVE_VERSION "2.1.41"
 
 #define OCTAVE_COPYRIGHT \
-  "Copyright (C) 1996, 1997, 1998, 1999, 2000, 2001, 2002 John W. Eaton."
+  "Copyright (C) 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003 John W. Eaton."
 
 #define OCTAVE_NAME_AND_VERSION \
   "GNU Octave, version " OCTAVE_VERSION " (" OCTAVE_CANONICAL_HOST_TYPE ")"
 
 #define OCTAVE_COPYING_STATEMENT \
   "This is free software; see the source code for copying conditions."
 
 #define OCTAVE_WARRANTY_STATEMENT \
