# HG changeset patch
# User Markus MÃ¼tzel <markus.muetzel@gmx.de>
# Date 1549134465 -3600
#      Sat Feb 02 20:07:45 2019 +0100
# Node ID 2dc190401eeb285f3e365dad9d6486105bf51fe6
# Parent  e000879eabef6aa665e247ff186bedfb7b20f349
Add C++ functions to convert encoding of strings (bug #55452).

* oct-string.[h,cc] (u8_to_encoding, u8_from_encoding): New functions.

diff --git a/liboctave/util/oct-string.cc b/liboctave/util/oct-string.cc
--- a/liboctave/util/oct-string.cc
+++ b/liboctave/util/oct-string.cc
@@ -29,16 +29,18 @@ along with Octave; see the file COPYING.
 #include <cctype>
 #include <cstring>
 #include <iomanip>
 #include <string>
 
 #include "Array.h"
 #include "lo-ieee.h"
 #include "lo-mappers.h"
+#include "uniconv-wrappers.h"
+#include "unwind-prot.h"
 
 template <typename T>
 static bool
 str_data_cmp (const typename T::value_type *a, const typename T::value_type *b,
               const typename T::size_type n)
 {
   for (typename T::size_type i = 0; i < n; ++i)
     if (a[i] != b[i])
@@ -479,16 +481,80 @@ octave::string::str2double (const std::s
           else
             set_component (val, num, i2);
         }
     }
 
   return val;
 }
 
+std::string
+octave::string::u8_to_encoding (const std::string& who,
+                                const std::string& u8_string,
+                                const std::string& encoding)
+{
+  const uint8_t *src = reinterpret_cast<const uint8_t *>
+                       (u8_string.c_str ());
+  size_t srclen = u8_string.length ();
+
+  size_t length;
+  char *native_str = octave_u8_conv_to_encoding (encoding.c_str (), src,
+                                                 srclen, &length);
+
+  if (! native_str)
+    {
+      if (errno == ENOSYS)
+        (*current_liboctave_error_handler)
+          ("%s: iconv() is not supported. Installing GNU libiconv and then "
+           "re-compiling Octave could fix this.", who.c_str ());
+      else
+        (*current_liboctave_error_handler)
+          ("%s: converting from UTF-8 to codepage '%s' failed: %s",
+           who.c_str (), encoding.c_str (), std::strerror (errno));
+    }
+
+  octave::unwind_protect frame;
+  frame.add_fcn (::free, static_cast<void *> (native_str));
+
+  std::string retval = std::string (native_str, length);
+
+  return retval;
+}
+
+std::string
+octave::string::u8_from_encoding (const std::string& who,
+                                  const std::string& native_string,
+                                  const std::string& encoding)
+{
+  const char *src = native_string.c_str ();
+  size_t srclen = native_string.length ();
+
+  size_t length;
+  uint8_t *utf8_str = octave_u8_conv_from_encoding (encoding.c_str (), src,
+                                                    srclen, &length);
+  if (! utf8_str)
+    {
+      if (errno == ENOSYS)
+        (*current_liboctave_error_handler)
+          ("%s: iconv() is not supported. Installing GNU libiconv and then "
+           "re-compiling Octave could fix this.", who.c_str ());
+      else
+        (*current_liboctave_error_handler)
+          ("%s: converting from codepage '%s' to UTF-8 failed: %s",
+           who.c_str (), encoding.c_str (), std::strerror (errno));
+    }
+
+  octave::unwind_protect frame;
+  frame.add_fcn (::free, static_cast<void *> (utf8_str));
+
+  std::string retval = std::string (reinterpret_cast<char *> (utf8_str), length);
+
+  return retval;
+}
+
 template <typename T>
 std::string
 rational_approx (T val, int len)
 {
   std::string s;
 
   if (len <= 0)
     len = 10;
diff --git a/liboctave/util/oct-string.h b/liboctave/util/oct-string.h
--- a/liboctave/util/oct-string.h
+++ b/liboctave/util/oct-string.h
@@ -120,16 +120,24 @@ namespace octave
 
     //! True if the first N characters are the same, ignoring case.
     template <typename T>
     bool strncmpi (const T& str_a, const typename T::value_type *str_b,
                    const typename T::size_type n);
 
     extern OCTAVE_API Complex
     str2double (const std::string& str_arg);
+
+    extern OCTAVE_API std::string
+    u8_to_encoding (const std::string& who, const std::string& u8_string,
+                    const std::string& encoding);
+
+    extern OCTAVE_API std::string
+    u8_from_encoding (const std::string& who, const std::string& native_string,
+                      const std::string& encoding);
   }
 }
 
 template <typename T>
 extern OCTAVE_API std::string
 rational_approx (T val, int len);
 
 #endif
