# HG changeset patch
# User jwe
# Date 1029550698 0
#      Sat Aug 17 02:18:18 2002 +0000
# Node ID 6481f41a79f36f04d82093fb8785b180e3d64945
# Parent  a35a3c5d4740057bd47f16d9e4907be176124baf
[project @ 2002-08-17 02:18:18 by jwe]

diff --git a/ChangeLog b/ChangeLog
--- a/ChangeLog
+++ b/ChangeLog
@@ -1,8 +1,12 @@
+2002-08-16  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* Makeconf.in (%.d : %.cc): Add $*.df to LHS of dependency list.
+
 2002-08-15  Paul Kienzle <pkienzle@users.sf.net>
 
 	* mk-opts.pl: Add support for INCLUDE = "...".
 
 2002-08-15  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* mk-opts.pl: Handle Array<int> too.
 
diff --git a/Makeconf.in b/Makeconf.in
--- a/Makeconf.in
+++ b/Makeconf.in
@@ -307,17 +307,17 @@ pic/%.o : %.cc
 
 %.d : %.cc
 	@echo making $@ from $<
 	@rm -f $@
 	@$(CXX) $(DEPEND_FLAGS) $(CPPFLAGS) $(ALL_CXXFLAGS) $< | \
 	  sed \
               $(DEPEND_EXTRA_SED_PATTERN) \
 	      -e 's,^[^:]*/\(.*\.o\):,\1:,' \
-	      -e 's,$*\.o,pic/& & $@,g' > $@-t
+	      -e 's,$*\.o,pic/& & $*.df $@,g' > $@-t
 	@mv $@-t $@
 
 # And one for .c files.too:
 
 %.d : %.c
 	@echo making $@ from $<
 	@rm -f $@
 	@$(CC) $(DEPEND_FLAGS) $(CPPFLAGS) $(ALL_CFLAGS) $< | \
diff --git a/liboctave/DASPK-opts.in b/liboctave/DASPK-opts.in
--- a/liboctave/DASPK-opts.in
+++ b/liboctave/DASPK-opts.in
@@ -1,14 +1,19 @@
 CLASS = "DASPK"
 
 INCLUDE = "DAE.h"
 
 OPTION
   NAME = "absolute tolerance"
+  DOC_ITEM
+Absolute tolerance.  May be either vector or scalar.  If a vector, it
+must match the dimension of the state vector, and the relative
+tolerance must also be a vector of the same length.
+  END_DOC_ITEM
   TYPE = "Array<double>"
   SET_ARG_TYPE = "const $TYPE&"
   INIT_BODY
     $OPTVAR.resize (1);
     $OPTVAR(0) = ::sqrt (DBL_EPSILON);
   END_INIT_BODY
   SET_CODE
     void set_$OPT (double val)
@@ -20,16 +25,27 @@ OPTION
 
     void set_$OPT (const $TYPE& val)
       { $OPTVAR = val; reset = true; }
   END_SET_CODE
 END_OPTION
 
 OPTION
   NAME = "relative tolerance"
+  DOC_ITEM
+Relative tolerance.  May be either vector or scalar.  If a vector, it
+must match the dimension of the state vector, and the absolute
+tolerance must also be a vector of the same length.
+
+The local error test applied at each integration step is
+
+@example
+  abs (local error in x(i)) <= rtol(i) * abs (Y(i)) + atol(i)
+@end example
+  END_DOC_ITEM
   TYPE = "Array<double>"
   SET_ARG_TYPE = "const $TYPE&"
   INIT_BODY
     $OPTVAR.resize (1);
     $OPTVAR(0) = ::sqrt (DBL_EPSILON);
   END_INIT_BODY
   SET_CODE
     void set_$OPT (double val)
@@ -41,23 +57,135 @@ OPTION
 
     void set_$OPT (const $TYPE& val)
       { $OPTVAR = val; reset = true; }
   END_SET_CODE
 END_OPTION
 
 OPTION
   NAME = "compute consistent initial condition"
+  DOC_ITEM
+Denoting the differential variables in the state vector by @samp{Y_d}
+and the algebraic variables by @samp{Y_a}, @code{ddaspk} can solve
+one of two initialization problems:
+
+@enumerate
+@item Given Y_d, calculate Y_a and Y'_d
+@item Given Y', calculate Y.
+@end enumerate
+
+In either case, initial values for the given components are input, and
+initial guesses for the unknown components must also be provided as
+input.  Set this option to 1 to solve the first problem, or 2 to solve
+the second (the default default is 0, so you must provide a set of
+initial conditions that are consistent).
+
+If this option is set to a nonzero value, you must also set the
+@code{\"algebraic variables\"} option to declare which variables in the
+problem are algebraic.
+  END_DOC_ITEM
+  TYPE = "int"
+  INIT_VALUE = "0"
+  SET_EXPR = "val"
+END_OPTION
+
+OPTION
+  NAME = "use initial condition heuristics"
+  DOC_ITEM
+Set to a nonzero value to use the initial condition heuristics options
+described below.
+  END_DOC_ITEM
+  TYPE = "int"
+  INIT_VALUE = "0"
+  SET_EXPR = "val"
+END_OPTION
+
+OPTION
+  NAME = "initial condition heuristics"
+  DOC_ITEM
+A vector of the following parameters that can be used to control the
+initial condition calculation.
+
+@table @code
+@item MXNIT
+Maximum number of Newton iterations (default is 5).
+@item MXNJ
+Maximum number of Jacobian evaluations (default is 6).
+@item MXNH
+Maximum number of values of the artificial stepsize parameter to be
+tried if the @code{\"compute consistent initial condition\"} option has
+been set to 1 (default is 5).
+
+Note that the maximum number of Newton iterations allowed in all is
+@code{MXNIT*MXNJ*MXNH} if the @code{\"compute consistent initial
+condition\"} option has been set to 1 and @code{MXNIT*MXNJ} if it is
+set to 2.
+@item LSOFF
+Set to a nonzero value to disable the linesearch algorithm (default is
+0).
+@item STPTOL
+Minimum scaled step in linesearch algorithm (default is eps^(2/3)).
+@item EPINIT
+Swing factor in the Newton iteration convergence test.  The test is
+applied to the residual vector, premultiplied by the approximate
+Jacobian.  For convergence, the weighted RMS norm of this vector
+(scaled by the error weights) must be less than @code{EPINIT*EPCON},
+where @code{EPCON} = 0.33 is the analogous test constant used in the
+time steps. The default is @code{EPINIT} = 0.01.
+@end table
+  END_DOC_ITEM
+  TYPE = "Array<double>"
+  SET_ARG_TYPE = "const $TYPE&"
+  INIT_BODY
+    $OPTVAR.resize (6, 0.0);
+    $OPTVAR(0) = 5.0;
+    $OPTVAR(1) = 6.0;
+    $OPTVAR(2) = 5.0;
+    $OPTVAR(3) = 0.0;
+    $OPTVAR(4) = ::pow (DBL_EPSILON, 2.0/3.0);
+    $OPTVAR(5) = 0.01;
+  END_INIT_BODY
+  SET_EXPR = "val"
+END_OPTION
+
+OPTION
+  NAME = "print initial condition info"
+  DOC_ITEM
+Set this option to a nonzero value to display detailed information
+about the initial condition calculation (default is 0).
+  END_DOC_ITEM
+  TYPE = "int"
+  INIT_VALUE = "0"
+  SET_EXPR = "val"
+END_OPTION
+
+OPTION
+  NAME = "exclude algebraic variables from error test"
+  DOC_ITEM
+Set to a nonzero value to exclude algebraic variables from the error
+test.  You must also set the @code{\"algebraic variables\"} option to
+declare which variables in the problem are algebraic (default is 0).
+  END_DOC_ITEM
   TYPE = "int"
   INIT_VALUE = "0"
   SET_EXPR = "val"
 END_OPTION
 
 OPTION
   NAME = "algebraic variables"
+  DOC_ITEM
+A vector of the same length as the state vector.  A nonzero element
+indicates that the corresponding element of the state vector is an
+algebraic variable (i.e., its derivative does not appear explicitly
+in the equation set.
+
+This option is required by the
+@code{compute consistent initial condition\"} and
+@code{\"exclude algebraic variables from error test\"} options.
+  END_DOC_ITEM
   TYPE = "Array<int>"
   SET_ARG_TYPE = const $TYPE&
   INIT_BODY
     $OPTVAR.resize (1);
     $OPTVAR(0) = 0;
   END_INIT_BODY
   SET_CODE
     void set_$OPT (int val)
@@ -69,23 +197,56 @@ OPTION
 
     void set_$OPT (const $TYPE& val)
       { $OPTVAR = val; reset = true; }
   END_SET_CODE
 END_OPTION
 
 OPTION
   NAME = "enforce inequality constraints"
+  DOC_ITEM
+Set to one of the following values to enforce the inequality
+constraints specified by the @code{\"inequality constraint types\"}
+option (default is 0).
+
+@enumerate
+@item To have constraint checking only in the initial condition calculation.
+@item To enforce constraint checking during the integration.
+@item To enforce both options 1 and 2.
+@end enumerate
+  END_DOC_ITEM
   TYPE = "int"
   INIT_VALUE = "0"
   SET_EXPR = "val"
 END_OPTION
 
 OPTION
   NAME = "inequality constraint types"
+  DOC_ITEM
+A vector of the same length as the state specifying the type of
+inequality constraint.  Each element of the vector corresponds to an
+element of the state and should be assigned one of the following
+codes 
+
+@table @asis
+@item -2
+Less than zero.
+@item -1
+Less than or equal to zero.
+@item 0
+Not constrained.
+@item 1
+Greater than or equal to zero.
+@item 2
+Greater than zero.
+@end table
+
+This option only has an effect if the
+@code{\"enforce inequality constraints\"} option is nonzero.
+  END_DOC_ITEM
   TYPE = "Array<int>"
   SET_ARG_TYPE = const $TYPE&
   INIT_BODY
     $OPTVAR.resize (1);
     $OPTVAR(0) = 0;
   END_INIT_BODY
   SET_CODE
     void set_$OPT (int val)
@@ -96,64 +257,42 @@ OPTION
       }
 
     void set_$OPT (const $TYPE& val)
       { $OPTVAR = val; reset = true; }
   END_SET_CODE
 END_OPTION
 
 OPTION
-  NAME = "exclude algebraic variables from error test"
-  TYPE = "int"
-  INIT_VALUE = "0"
-  SET_EXPR = "val"
-END_OPTION
-
-OPTION
-  NAME = "use initial condition heuristics"
-  TYPE = "int"
-  INIT_VALUE = "0"
-  SET_EXPR = "val"
-END_OPTION
-
-OPTION
-  NAME = "initial condition heuristics"
-  TYPE = "Array<double>"
-  SET_ARG_TYPE = "const $TYPE&"
-  INIT_BODY
-    $OPTVAR.resize (6, 0.0);
-    $OPTVAR(0) = 5.0;
-    $OPTVAR(1) = 6.0;
-    $OPTVAR(2) = 5.0;
-    $OPTVAR(3) = 0.0;
-    $OPTVAR(4) = ::pow (DBL_EPSILON, 2.0/3.0);
-    $OPTVAR(5) = 0.01;
-  END_INIT_BODY
-  SET_EXPR = "val"
-END_OPTION
-
-OPTION
   NAME = "initial step size"
+  DOC_ITEM
+Differential-algebraic problems may occaisionally suffer from severe
+scaling difficulties on the first step.  If you know a great deal
+about the scaling of your problem, you can help to alleviate this
+problem by specifying an initial stepsize (default is computed
+automatically).
+  END_DOC_ITEM
   TYPE = "double"
   INIT_VALUE = "-1.0"
   SET_EXPR = "(val >= 0.0) ? val : -1.0"
 END_OPTION
 
 OPTION
   NAME = "maximum order"
+  DOC_ITEM
+Restrict the maximum order of the solution method.  This option must
+be between 1 and 5, inclusive (default is 5).
+  END_DOC_ITEM
   TYPE = "int"
-  INIT_VALUE = "-1"
+  INIT_VALUE = "5"
   SET_EXPR = "val"
 END_OPTION
 
 OPTION
   NAME = "maximum step size"
+  DOC_ITEM
+Setting the maximum stepsize will avoid passing over very large
+regions (default is not specified).
+  END_DOC_ITEM
   TYPE = "double"
   INIT_VALUE = "-1.0"
   SET_EXPR = "(val >= 0.0) ? val : -1.0"
 END_OPTION
-
-OPTION
-  NAME = "print initial condition info"
-  TYPE = "int"
-  INIT_VALUE = "0"
-  SET_EXPR = "val"
-END_OPTION
diff --git a/liboctave/DASRT-opts.in b/liboctave/DASRT-opts.in
--- a/liboctave/DASRT-opts.in
+++ b/liboctave/DASRT-opts.in
@@ -1,14 +1,19 @@
 CLASS = "DASRT"
 
 INCLUDE = "DAERT.h"
 
 OPTION
   NAME = "absolute tolerance"
+  DOC_ITEM
+Absolute tolerance.  May be either vector or scalar.  If a vector, it
+must match the dimension of the state vector, and the relative
+tolerance must also be a vector of the same length.
+  END_DOC_ITEM
   TYPE = "Array<double>"
   SET_ARG_TYPE = "const $TYPE&"
   INIT_BODY
     $OPTVAR.resize (1);
     $OPTVAR(0) = ::sqrt (DBL_EPSILON);
   END_INIT_BODY
   SET_CODE
     void set_$OPT (double val)
@@ -20,16 +25,26 @@ OPTION
 
     void set_$OPT (const $TYPE& val)
       { $OPTVAR = val; reset = true; }
   END_SET_CODE
 END_OPTION
 
 OPTION
   NAME = "relative tolerance"
+  DOC_ITEM
+Relative tolerance.  May be either vector or scalar.  If a vector, it
+must match the dimension of the state vector, and the absolute
+tolerance must also be a vector of the same length.
+
+The local error test applied at each integration step is
+@example
+  abs (local error in x(i)) <= rtol(i) * abs (Y(i)) + atol(i)
+@end example
+  END_DOC_ITEM
   TYPE = "Array<double>"
   SET_ARG_TYPE = "const $TYPE&"
   INIT_BODY
     $OPTVAR.resize (1);
     $OPTVAR(0) = ::sqrt (DBL_EPSILON);
   END_INIT_BODY
   SET_CODE
     void set_$OPT (double val)
@@ -41,33 +56,51 @@ OPTION
 
     void set_$OPT (const $TYPE& val)
       { $OPTVAR = val; reset = true; }
   END_SET_CODE
 END_OPTION
 
 OPTION
   NAME = "initial step size"
+  DOC_ITEM
+Differential-algebraic problems may occaisionally suffer from severe
+scaling difficulties on the first step.  If you know a great deal
+about the scaling of your problem, you can help to alleviate this
+problem by specifying an initial stepsize.
+  END_DOC_ITEM
   TYPE = "double"
   INIT_VALUE = "-1.0"
   SET_EXPR = "(val >= 0.0) ? val : -1.0"
 END_OPTION
 
 OPTION
   NAME = "maximum order"
+  DOC_ITEM
+Restrict the maximum order of the solution method.  This option must
+be between 1 and 5, inclusive.
+  END_DOC_ITEM
   TYPE = "int"
   INIT_VALUE = "-1"
   SET_EXPR = "val"
 END_OPTION
 
 OPTION
   NAME = "maximum step size"
+  DOC_ITEM
+Setting the maximum stepsize will avoid passing over very large
+regions.
+  END_DOC_ITEM
   TYPE = "double"
   INIT_VALUE = "-1.0"
   SET_EXPR = "(val >= 0.0) ? val : -1.0"
 END_OPTION
 
 OPTION
   NAME = "step limit"
+  DOC_ITEM
+Maximum number of integration steps to attempt on a single call to the
+underlying Fortran code.
+  END_DOC_ITEM
   TYPE = "int"
   INIT_VALUE = "-1"
   SET_EXPR = "(val >= 0) ? val : -1"
 END_OPTION
diff --git a/liboctave/DASRT.cc b/liboctave/DASRT.cc
--- a/liboctave/DASRT.cc
+++ b/liboctave/DASRT.cc
@@ -237,27 +237,29 @@ DASRT::integrate (double tout)
       jroot.resize (ng, 1);
 
       pjroot = jroot.fortran_vec ();
 
       DAERTFunc::reset = false;
 
       // DASRT_options
 
-      if (maximum_step_size () >= 0.0)
+      double mss = maximum_step_size ();
+      if (mss >= 0.0)
 	{
-	  rwork(1) = maximum_step_size ();
+	  rwork(1) = mss;
 	  info(6) = 1;
 	}
       else
 	info(6) = 0;
 
-      if (initial_step_size () >= 0.0)
+      double iss = initial_step_size ();
+      if (iss >= 0.0)
 	{
-	  rwork(2) = initial_step_size ();
+	  rwork(2) = iss;
 	  info(7) = 1;
 	}
       else
 	info(7) = 0;
 
       int maxord = maximum_order ();
       if (maxord >= 0)
 	{
diff --git a/liboctave/DASSL-opts.in b/liboctave/DASSL-opts.in
--- a/liboctave/DASSL-opts.in
+++ b/liboctave/DASSL-opts.in
@@ -1,14 +1,19 @@
 CLASS = "DASSL"
 
 INCLUDE = "DAE.h"
 
 OPTION
   NAME = "absolute tolerance"
+  DOC_ITEM
+Absolute tolerance.  May be either vector or scalar.  If a vector, it
+must match the dimension of the state vector, and the relative
+tolerance must also be a vector of the same length.
+  END_DOC_ITEM
   TYPE = "Array<double>"
   SET_ARG_TYPE = "const $TYPE&"
   INIT_BODY
     $OPTVAR.resize (1);
     $OPTVAR(0) = ::sqrt (DBL_EPSILON);
   END_INIT_BODY
   SET_CODE
     void set_$OPT (double val)
@@ -20,16 +25,26 @@ OPTION
 
     void set_$OPT (const $TYPE& val)
       { $OPTVAR = val; reset = true; }
   END_SET_CODE
 END_OPTION
 
 OPTION
   NAME = "relative tolerance"
+  DOC_ITEM
+Relative tolerance.  May be either vector or scalar.  If a vector, it
+must match the dimension of the state vector, and the absolute
+tolerance must also be a vector of the same length.
+
+The local error test applied at each integration step is
+@example
+  abs (local error in x(i)) <= rtol(i) * abs (Y(i)) + atol(i)
+@end example
+  END_DOC_ITEM
   TYPE = "Array<double>"
   SET_ARG_TYPE = "const $TYPE&"
   INIT_BODY
     $OPTVAR.resize (1);
     $OPTVAR(0) = ::sqrt (DBL_EPSILON);
   END_INIT_BODY
   SET_CODE
     void set_$OPT (double val)
@@ -41,40 +56,66 @@ OPTION
 
     void set_$OPT (const $TYPE& val)
       { $OPTVAR = val; reset = true; }
   END_SET_CODE
 END_OPTION
 
 OPTION
   NAME = "compute consistent initial condition"
+  DOC_ITEM
+If nonzero, dassl will attempt to compute a consistent set of intial
+conditions.  This is generally not reliable, so it is best to provide
+a consistent set and leave this option set to zero.
+  END_DOC_ITEM
   TYPE = "int"
   INIT_VALUE = "0"
   SET_EXPR = "val"
 END_OPTION
 
 OPTION
   NAME = "enforce nonnegativity constraints"
+  DOC_ITEM
+If you know that the solutions to your equations will always be
+nonnegative, it may help to set this parameter to a nonzero
+value.  However, it is probably best to try leaving this option set to
+zero first, and only setting it to a nonzero value if that doesn't
+work very well.
+  END_DOC_ITEM
   TYPE = "int"
   INIT_VALUE = "0"
   SET_EXPR = "val"
 END_OPTION
 
 OPTION
   NAME = "initial step size"
+  DOC_ITEM
+Differential-algebraic problems may occaisionally suffer from severe
+scaling difficulties on the first step.  If you know a great deal
+about the scaling of your problem, you can help to alleviate this
+problem by specifying an initial stepsize.
+  END_DOC_ITEM
   TYPE = "double"
   INIT_VALUE = "-1.0"
   SET_EXPR = "(val >= 0.0) ? val : -1.0"
 END_OPTION
 
 OPTION
   NAME = "maximum order"
+  DOC_ITEM
+Restrict the maximum order of the solution method.  This option must
+be between 1 and 5, inclusive.
+  END_DOC_ITEM
   TYPE = "int"
   INIT_VALUE = "-1"
   SET_EXPR = "val"
 END_OPTION
 
 OPTION
   NAME = "maximum step size"
+  DOC_ITEM
+Setting the maximum stepsize will avoid passing over very large
+regions.
+  END_DOC_ITEM
   TYPE = "double"
   INIT_VALUE = "-1.0"
   SET_EXPR = "(val >= 0.0) ? val : -1.0"
 END_OPTION
diff --git a/liboctave/NLEqn-opts.in b/liboctave/NLEqn-opts.in
--- a/liboctave/NLEqn-opts.in
+++ b/liboctave/NLEqn-opts.in
@@ -11,12 +11,15 @@ When called with two arguments, this fun
 parameters for the function @code{fsolve}.  Given one argument,
 @code{fsolve_options} returns the value of the corresponding option.  If
 no arguments are supplied, the names of all the available options and
 their current values are displayed.
 END_DOC_STRING
 
 OPTION
   NAME = "tolerance"
+  DOC_ITEM
+Nonnegative relative tolerance.
+  END_DOC_ITEM
   TYPE = "double"
   INIT_VALUE = "::sqrt (DBL_EPSILON)"
   SET_EXPR = "(val > 0.0) ? val : ::sqrt (DBL_EPSILON)"
 END_OPTION
diff --git a/mk-opts.pl b/mk-opts.pl
--- a/mk-opts.pl
+++ b/mk-opts.pl
@@ -15,16 +15,17 @@
 # Input file format:
 #
 # CLASS = string
 # FCN_NAME = string
 # INCLUDE = file
 # DOC_STRING doc END_DOC_STRING
 # OPTION
 #   NAME = string
+#   DOC_ITEM doc END_DOC_ITEM
 #   TYPE = string
 #   SET_ARG_TYPE = string   (optional, defaults to TYPE)
 #   INIT_VALUE = string | INIT_BODY code END_INIT_BODY
 #   SET_EXPR = string | SET_BODY code END_SET_BODY | SET_CODE code END_SET_CODE
 # END_OPTION
 #
 # END_* must appear at beginning of line (whitespace ignored).
 
@@ -102,17 +103,17 @@ sub parse_input
         {
 	  die "mk-opts.pl: unknown command: $_\n"
 	}
     }
 }
 
 sub parse_option_block
 {
-  local ($have_init_body, $have_set_body, $have_set_code);
+  local ($have_doc_item, $have_init_body, $have_set_body, $have_set_code);
 
   while (<INFILE>)
     {
       next if (/^\s*$/);
 
       die "missing END_OPTION" if (/^\s*OPTION\s*$/);
 
       last if (/^\s*END_OPTION\s*$/);
@@ -121,16 +122,22 @@ sub parse_option_block
         {
           die "duplicate NAME" if ($name[$opt_num] ne "");
           $name[$opt_num] = $1;
           ($opt[$opt_num] = $name[$opt_num]) =~ s/\s+/_/g;
           $optvar[$opt_num] = "x_$opt[$opt_num]";
           $kw_tok[$opt_num] = [ split (/\s+/, $name[$opt_num]) ];
           $n_toks[$opt_num] = @{$kw_tok[$opt_num]};
         }
+      elsif (/^\s*DOC_ITEM\s*$/)
+        {
+          die "duplicate DOC_ITEM" if ($have_doc_item);
+          &parse_doc_item;
+          $have_doc_item = 1;
+        }
       elsif (/^\s*TYPE\s*=\s*"(.*)"\s*$/)
         {
           die "duplicate TYPE" if ($type[$opt_num] ne "");
           $type[$opt_num] = $1;
         }
       elsif (/^\s*SET_ARG_TYPE\s*=\s*"(.*)"\s*$/)
         {
           die "duplicate SET_ARG_TYPE" if ($set_arg_type[$opt_num] ne "");
@@ -287,16 +294,28 @@ sub parse_doc_string
       last if (/^\s*END_DOC_STRING\s*$/);
 
       $doc_string .= $_;
     }
 
   $doc_string =~ s/\n/\\n\\\n/g;
 }
 
+sub parse_doc_item
+{
+  while (<INFILE>)
+    {
+      last if (/^\s*END_DOC_ITEM\s*$/);
+
+      $doc_item[$opt_num] .= $_;
+    }
+
+  $doc_item[$opt_num] =~ s/\n/\\n\\\n/g;
+}
+
 sub parse_init_body
 {
   while (<INFILE>)
     {
       last if (/^\s*END_INIT_BODY\s*$/);
 
       $init_body[$opt_num] .= $_;
     }
@@ -789,17 +808,31 @@ show_${class_name} (const std::string& k
   return retval;\n}\n\n";
 }
 
 sub emit_options_function
 {
   print "DEFUN_DLD ($opt_fcn_name, args, ,
   \"-*- texinfo -*-\\n\\
 \@deftypefn {Loadable Function} {} $opt_fcn_name (\@var{opt}, \@var{val})\\n\\
-$doc_string\@end deftypefn\")
+$doc_string\\n\\
+Options include\\n\\
+\\n\\
+\@table \@code\\n\\\n";
+
+  for ($i = 0; $i < $opt_num; $i++)
+    {
+      print "\@item \\\"$name[$i]\\\"\\n\\\n";
+      if ($doc_item[$i] ne "")
+	{
+	  print "$doc_item[$i]";
+	}
+    }
+
+  print "\@end table\\n\\\n\@end deftypefn\")
 {
   octave_value_list retval;
 
   int nargin = args.length ();
 
   if (nargin == 0)
     {
       print_${class_name} (octave_stdout);
