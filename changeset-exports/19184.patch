# HG changeset patch
# User Michael Goffioul <michael.goffioul@gmail.com>
# Date 1411955031 14400
#      Sun Sep 28 21:43:51 2014 -0400
# Node ID e0a7718ac085c1f0f7d73aa09b1bc138357c2ce1
# Parent  666c4e0aca1e692b4638c2aaea691481ea8778f3
Implement calling "struct" on classdef objects.

* ov-classdef.h (cdef_object::map_value, octave_classdef::map_value):
New methods.
(cdef_class::get_properties,
cdef_class::cdef_class_rep::get_properties,
cdef_class::cdef_class_rep::find_properties): Change signature to include
an int argument "mode".
(cdef_class::get_property_map,
cdef_class::cdef_class_rep::get_property_map): New methods.
(class cdef_class): New enum to hold possible values of mode argument
for method get_properties/get_property_map.
(cdef_object_rep::map_keys): Code style.

* ov-classdef.cc (cdef_class::cdef_class_rep::find_properties): Change
signature to include an int argument "mode".
(cdef_class::cdef_class_rep::get_properties): Likewise. Use
get_property_map instead of find_properties.
(cdef_class::cdef_class_rep::get_property_map): New method.
(cdef_object::map_value): Likewise.

diff --git a/libinterp/octave-value/ov-classdef.cc b/libinterp/octave-value/ov-classdef.cc
--- a/libinterp/octave-value/ov-classdef.cc
+++ b/libinterp/octave-value/ov-classdef.cc
@@ -1325,16 +1325,73 @@ private:
     }
 
 private:
   octave_value_list args;
 };
 
 //----------------------------------------------------------------------------
 
+octave_map
+cdef_object::map_value (void) const
+{
+  octave_map retval;
+
+  warning_with_id ("Octave:classdef-to-struct",
+                   "struct: converting a classdef object into a struct "
+                   "overrides the access restrictions defined for properties. "
+                   "All properties are returned, including private and "
+                   "protected ones.");
+
+  cdef_class cls = get_class ();
+
+  if (cls.ok ())
+    {
+      std::map<std::string, cdef_property> props;
+
+      props = cls.get_property_map (cdef_class::property_all);
+
+      for (std::map<std::string, cdef_property>::iterator it = props.begin ();
+           it != props.end (); ++it)
+        {
+          octave_value pvalue;
+
+          if (is_array ())
+            {
+              Array<cdef_object> a_obj = array_value ();
+
+              Cell cvalue (a_obj.dims ());
+
+              for (octave_idx_type i = 0; i < a_obj.numel (); i++)
+                {
+                  cvalue (i) = it->second.get_value (a_obj(i), false);
+
+                  if (error_state)
+                    break;
+                }
+
+              if (! error_state)
+                retval.setfield (it->first, cvalue);
+            }
+          else
+            {
+              Cell cvalue (dim_vector (1, 1), it->second.get_value (*this, false));
+
+              if (! error_state)
+                retval.setfield (it->first, cvalue);
+            }
+
+          if (error_state)
+            break;
+        }
+    }
+
+  return retval;
+}
+
 string_vector
 cdef_object_rep::map_keys (void) const
 {
   cdef_class cls = get_class ();
 
   if (cls.ok ())
     return cls.get_names ();
   
@@ -2213,21 +2270,21 @@ void
 cdef_class::cdef_class_rep::install_property (const cdef_property& prop)
 {
   property_map[prop.get_name ()] = prop;
 
   member_count++;
 }
 
 Cell
-cdef_class::cdef_class_rep::get_properties (void)
+cdef_class::cdef_class_rep::get_properties (int mode)
 {
   std::map<std::string,cdef_property> props;
 
-  find_properties (props, false);
+  props = get_property_map (mode);
 
   if (! error_state)
     {
       Cell c (props.size (), 1);
 
       int idx = 0;
 
       for (std::map<std::string,cdef_property>::const_iterator it = props.begin ();
@@ -2235,30 +2292,40 @@ cdef_class::cdef_class_rep::get_properti
         c (idx, 0) = to_ov (it->second);
 
       return c;
     }
 
   return Cell ();
 }
 
+std::map<std::string, cdef_property>
+cdef_class::cdef_class_rep::get_property_map (int mode)
+{
+  std::map<std::string,cdef_property> props;
+
+  find_properties (props, mode);
+
+  return props;
+}
+
 void
 cdef_class::cdef_class_rep::find_properties (std::map<std::string,cdef_property>& props,
-                                             bool only_inherited)
+                                             int mode)
 {
   property_const_iterator it;
 
   for (it = property_map.begin (); ! error_state && it != property_map.end ();
        ++it)
     {
       std::string nm = it->second.get_name ();
 
       if (props.find (nm) == props.end ())
         {
-          if (only_inherited)
+          if (mode == property_inherited)
             {
               octave_value acc = it->second.get ("GetAccess");
 
               if (! acc.is_string ()
                   || acc.string_value () == "private")
                 continue;
             }
 
@@ -2270,17 +2337,20 @@ cdef_class::cdef_class_rep::find_propert
 
   Cell super_classes = get ("SuperClasses").cell_value ();
 
   for (int i = 0; ! error_state && i < super_classes.numel (); i++)
     {
       cdef_class cls = lookup_class (super_classes(i));
 
       if (! error_state)
-        cls.get_rep ()->find_properties (props, true);
+        cls.get_rep ()->find_properties (props,
+                                         (mode == property_all ?
+                                          property_all :
+                                          property_inherited));
       else
         break;
     }
 }
 
 void
 cdef_class::cdef_class_rep::find_names (std::set<std::string>& names,
                                         bool all)
diff --git a/libinterp/octave-value/ov-classdef.h b/libinterp/octave-value/ov-classdef.h
--- a/libinterp/octave-value/ov-classdef.h
+++ b/libinterp/octave-value/ov-classdef.h
@@ -117,17 +117,17 @@ public:
   virtual octave_value
   subsasgn (const std::string&, const std::list<octave_value_list>&,
             const octave_value&)
     {
       gripe_invalid_object ("subsasgn");
       return octave_value ();
     }
 
-  virtual string_vector map_keys(void) const;
+  virtual string_vector map_keys (void) const;
 
   virtual bool is_valid (void) const { return false; }
 
   std::string class_name (void) const;
 
   virtual void mark_for_construction (const cdef_class&)
     { gripe_invalid_object ("mark_for_construction"); }
 
@@ -265,16 +265,18 @@ public:
             const octave_value& rhs, int ignore_copies = 0)
     {
       make_unique (ignore_copies);
       return rep->subsasgn (type, idx, rhs);
     }
 
   string_vector map_keys (void) const { return rep->map_keys (); }
 
+  octave_map map_value (void) const;
+
   const cdef_object_rep* get_rep (void) const { return rep; }
 
   bool ok (void) const { return rep->is_valid (); }
 
   void mark_for_construction (const cdef_class& cls)
     { rep->mark_for_construction (cls); }
 
   bool is_constructed (void) const { return rep->is_constructed (); }
@@ -641,17 +643,19 @@ private:
     void install_method (const cdef_method& meth);
 
     Cell get_methods (void);
 
     cdef_property find_property (const std::string& nm);
 
     void install_property (const cdef_property& prop);
 
-    Cell get_properties (void);
+    Cell get_properties (int mode);
+
+    std::map<std::string, cdef_property> get_property_map (int mode);
 
     string_vector get_names (void);
 
     void set_directory (const std::string& dir) { directory = dir; }
 
     std::string get_directory (void) const { return directory; }
 
     void delete_object (cdef_object obj);
@@ -703,17 +707,17 @@ private:
     bool is_meta_class (void) const { return meta; }
 
   private:
     void load_all_methods (void);
 
     void find_names (std::set<std::string>& names, bool all);
     
     void find_properties (std::map<std::string,cdef_property>& props,
-                          bool only_inherited);
+                          int mode = 0);
 
     void find_methods (std::map<std::string, cdef_method>& meths,
                        bool only_inherited);
 
     cdef_class wrap (void)
       {
         refcount++;
         return cdef_class (this);
@@ -799,17 +803,22 @@ public:
 
   Cell get_methods (void) { return get_rep ()->get_methods (); }
 
   cdef_property find_property (const std::string& nm);
   
   void install_property (const cdef_property& prop)
     { get_rep ()->install_property (prop); }
 
-  Cell get_properties (void) { return get_rep ()->get_properties (); }
+  Cell get_properties (int mode = property_normal)
+    { return get_rep ()->get_properties (mode); }
+
+  std::map<std::string, cdef_property>
+  get_property_map (int mode = property_normal)
+    { return get_rep ()->get_property_map (mode); }
 
   string_vector get_names (void) { return get_rep ()->get_names (); }
 
   bool is_abstract (void) const { return get_rep ()->is_abstract (); }
 
   bool is_sealed (void) const { return get_rep ()->is_sealed (); }
 
   void set_directory (const std::string& dir)
@@ -861,16 +870,24 @@ public:
   static const cdef_class& meta_property (void) { return _meta_property; }
   static const cdef_class& meta_method (void) { return _meta_method; }
   static const cdef_class& meta_package (void) { return _meta_package; }
 
   void register_object (void) { get_rep ()->register_object (); }
 
   void unregister_object (void) { get_rep ()->unregister_object (); }
 
+public:
+  enum
+    {
+      property_normal,
+      property_inherited,
+      property_all
+    };
+
 private:
   cdef_class_rep* get_rep (void)
     { return dynamic_cast<cdef_class_rep *> (cdef_object::get_rep ()); }
   
   const cdef_class_rep* get_rep (void) const
     { return dynamic_cast<const cdef_class_rep *> (cdef_object::get_rep ()); }
 
   friend bool operator == (const cdef_class&, const cdef_class&);
@@ -1447,16 +1464,18 @@ public:
 
   octave_value
   undef_subsasgn (const std::string& type,
                   const std::list<octave_value_list>& idx,
                   const octave_value& rhs);
 
   string_vector map_keys (void) const { return object.map_keys (); }
 
+  octave_map map_value (void) const { return object.map_value (); }
+
   dim_vector dims (void) const { return object.dims (); }
 
 private:
   cdef_object object;
 
 private:
   DECLARE_OCTAVE_ALLOCATOR
 
