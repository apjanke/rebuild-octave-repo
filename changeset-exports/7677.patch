# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1207072227 14400
#      Tue Apr 01 13:50:27 2008 -0400
# Node ID db02cc0ba8f283599173c5e3575fdfa3ffb81763
# Parent  6c0f7bcf5b557042f3c12750e36da120f0424135
handle breakpoints in tree_identifier::do_lookup

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,14 @@
+2008-04-01  John W. Eaton  <jwe@octave.org>
+
+	* pt-id.h (do_lookup (bool&, bool)): Delete.
+	(do_lookup (tree_argument_list *, const string_vector&,
+	octave_value_list&, bool&)): Call MAYBE_DO_BREAKPOINT here.
+
 2008-03-28  Jaroslav Hajek  <highegg@gmail.com>
 
 	* DLD-FUNCTIONS/lookup.cc: New file.
 	* Makefile.in (DLD_XSRC): Add it to the list.
 
 2008-03-28  David Bateman  <dbateman@free.fr>
 
 	* ov-complex.cc (SCALAR_MAPPER, CD_SCALAR_MAPPER): New macro for
diff --git a/src/pt-id.h b/src/pt-id.h
--- a/src/pt-id.h
+++ b/src/pt-id.h
@@ -28,16 +28,17 @@ along with Octave; see the file COPYING.
 #include <string>
 
 class octave_value;
 class octave_value_list;
 class octave_function;
 
 class tree_walker;
 
+#include "pt-bp.h"
 #include "pt-exp.h"
 #include "symtab.h"
 
 // Symbols from the symbol table.
 
 class
 tree_identifier : public tree_expression
 {
@@ -74,28 +75,21 @@ public:
   //
   //   * If the identifier is still undefined, try looking for an
   //     function file to parse.
   //
   //   * On systems that support dynamic linking, we prefer .oct files,
   //     then .mex files, then .m files.
 
   octave_value
-  do_lookup (bool& script_file_executed, bool exec_script = true)
-  {
-    // FIXME -- SYMTAB: what about executing script files?
-    octave_value_list evaluated_args;
-    bool args_evaluated;
-    return sym.find (0, string_vector (), evaluated_args, args_evaluated);
-  }
-
-  octave_value
   do_lookup (tree_argument_list *args, const string_vector& arg_names,
 	     octave_value_list& evaluated_args, bool& args_evaluated)
   {
+    MAYBE_DO_BREAKPOINT;
+
     return sym.find (args, arg_names, evaluated_args, args_evaluated);
   }
 
   void mark_global (void) { sym.mark_global (); }
 
   void mark_as_static (void) { sym.init_persistent (); }
 
   void mark_as_formal_parameter (void) { sym.mark_formal (); }
