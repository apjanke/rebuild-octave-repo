# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1464619464 14400
#      Mon May 30 10:44:24 2016 -0400
# Node ID e5f083f9704e6eac11aa156b01cc037aecf93d08
# Parent  6c8c18f49eed4e6ff0b2af5bbad6517b4fd1d539
eliminate some duplicate code in gl-render.cc

* gl-render.h, gl-render.cc (opengl_renderer::set_normal):
New function.
(opengl_renderer::draw_surface): Use it to eliminate duplicate code
blocks.

diff --git a/libinterp/corefcn/gl-render.cc b/libinterp/corefcn/gl-render.cc
--- a/libinterp/corefcn/gl-render.cc
+++ b/libinterp/corefcn/gl-render.cc
@@ -1942,17 +1942,16 @@ opengl_renderer::draw_surface (const sur
   Matrix ecolor = props.get_edgecolor_rgb ();
 
   float as = props.get_ambientstrength ();
   float ds = props.get_diffusestrength ();
   float ss = props.get_specularstrength ();
   float se = props.get_specularexponent () * 5; // to fit Matlab
   float scr = props.get_specularcolorreflectance ();
   float cb[4] = { 0.0, 0.0, 0.0, 1.0 };
-  double d = 1.0;
 
   opengl_texture tex;
 
   int i1, i2, j1, j2;
   bool x_mat = (x.rows () == z.rows ());
   bool y_mat = (y.columns () == z.columns ());
 
   i1 = i2 = j1 = j2 = 0;
@@ -2080,30 +2079,18 @@ opengl_renderer::draw_surface (const sur
                           glMaterialfv (LIGHT_MODE, GL_DIFFUSE, cb);
 
                           for (int k = 0; k < 3; k++)
                             cb[k] = ss * (scr + (1-scr) * c(j-1, i-1, k));
                           glMaterialfv (LIGHT_MODE, GL_SPECULAR, cb);
                         }
                     }
                   if (fl_mode > 0)
-                    {
-                      d = sqrt (n(j-1,i-1,0) * n(j-1,i-1,0)
-                                + n(j-1,i-1,1) * n(j-1,i-1,1)
-                                + n(j-1,i-1,2) * n(j-1,i-1,2));
-                      double dir = 1.0;
-                      if (bfl_mode > 0)
-                        dir = ((n(j-1,i-1,0) * view_vector(0)
-                                + n(j-1,i-1,1) * view_vector(1)
-                                + n(j-1,i-1,2) * view_vector(2) < 0)
-                               ? ((bfl_mode > 1) ? 0.0 : -1.0) : 1.0);
-                      glNormal3d (dir * n(j-1,i-1,0)/d,
-                                  dir * n(j-1,i-1,1)/d,
-                                  dir * n(j-1,i-1,2)/d);
-                    }
+                    set_normal (bfl_mode, n, j-1, i-1);
+
                   glVertex3d (x(j1,i-1), y(j-1,i1), z(j-1,i-1));
 
                   // Vertex 2
                   if (fc_mode == TEXTURE)
                     tex.tex_coord (double (i) / (zc-1), double (j-1) / (zr-1));
                   else if (fc_mode == INTERP)
                     {
                       for (int k = 0; k < 3; k++)
@@ -2122,30 +2109,17 @@ opengl_renderer::draw_surface (const sur
 
                           for (int k = 0; k < 3; k++)
                             cb[k] = ss * (scr + (1-scr) * c(j-1, i, k));
                           glMaterialfv (LIGHT_MODE, GL_SPECULAR, cb);
                         }
                     }
 
                   if (fl_mode == GOURAUD)
-                    {
-                      d = sqrt (n(j-1,i,0) * n(j-1,i,0)
-                                + n(j-1,i,1) * n(j-1,i,1)
-                                + n(j-1,i,2) * n(j-1,i,2));
-                      double dir = 1.0;
-                      if (bfl_mode > 0)
-                        dir = ((n(j-1,i,0) * view_vector(0)
-                                + n(j-1,i,1) * view_vector(1)
-                                + n(j-1,i,2) * view_vector(2) < 0)
-                               ? ((bfl_mode > 1) ? 0.0 : -1.0) : 1.0);
-                      glNormal3d (dir * n(j-1,i,0)/d,
-                                  dir * n(j-1,i,1)/d,
-                                  dir * n(j-1,i,2)/d);
-                    }
+                    set_normal (bfl_mode, n, j-1, i);
 
                   glVertex3d (x(j1,i), y(j-1,i2), z(j-1,i));
 
                   // Vertex 3
                   if (fc_mode == TEXTURE)
                     tex.tex_coord (double (i) / (zc-1), double (j) / (zr-1));
                   else if (fc_mode == INTERP)
                     {
@@ -2164,30 +2138,18 @@ opengl_renderer::draw_surface (const sur
                           glMaterialfv (LIGHT_MODE, GL_DIFFUSE, cb);
 
                           for (int k = 0; k < 3; k++)
                             cb[k] = ss * (scr + (1-scr) * c(j, i, k));
                           glMaterialfv (LIGHT_MODE, GL_SPECULAR, cb);
                         }
                     }
                   if (fl_mode == GOURAUD)
-                    {
-                      d = sqrt (n(j,i,0) * n(j,i,0)
-                                + n(j,i,1) * n(j,i,1)
-                                + n(j,i,2) * n(j,i,2));
-                      double dir = 1.0;
-                      if (bfl_mode > 0)
-                        dir = ((n(j,i,0) * view_vector(0)
-                                + n(j,i,1) * view_vector(1)
-                                + n(j,i,2) * view_vector(2) < 0)
-                               ? ((bfl_mode > 1) ? 0.0 : -1.0) : 1.0);
-                      glNormal3d (dir * n(j,i,0)/d,
-                                  dir * n(j,i,1)/d,
-                                  dir * n(j,i,2)/d);
-                    }
+                    set_normal (bfl_mode, n, j, i);
+
                   glVertex3d (x(j2,i), y(j,i2), z(j,i));
 
                   // Vertex 4
                   if (fc_mode == TEXTURE)
                     tex.tex_coord (double (i-1) / (zc-1), double (j) / (zr-1));
                   else if (fc_mode == INTERP)
                     {
                       for (int k = 0; k < 3; k++)
@@ -2205,30 +2167,18 @@ opengl_renderer::draw_surface (const sur
                           glMaterialfv (LIGHT_MODE, GL_DIFFUSE, cb);
 
                           for (int k = 0; k < 3; k++)
                             cb[k] = ss * (scr + (1-scr) * c(j, i-1, k));
                           glMaterialfv (LIGHT_MODE, GL_SPECULAR, cb);
                         }
                     }
                   if (fl_mode == GOURAUD)
-                    {
-                      d = sqrt (n(j,i-1,0) * n(j,i-1,0)
-                                + n(j,i-1,1) * n(j,i-1,1)
-                                + n(j,i-1,2) * n(j,i-1,2));
-                      double dir = 1.0;
-                      if (bfl_mode > 0)
-                        dir = ((n(j,i-1,0) * view_vector(0)
-                                + n(j,i-1,1) * view_vector(1)
-                                + n(j,i-1,2) * view_vector(2) < 0)
-                               ? ((bfl_mode > 1) ? 0.0 : -1.0) : 1.0);
-                      glNormal3d (dir * n(j,i-1,0)/d,
-                                  dir * n(j,i-1,1)/d,
-                                  dir * n(j,i-1,2)/d);
-                    }
+                    set_normal (bfl_mode, n, j, i-1);
+
                   glVertex3d (x(j2,i-1), y(j,i1), z(j,i-1));
 
                   glEnd ();
                 }
             }
 
           set_polygon_offset (false);
           if (fc_mode == TEXTURE)
@@ -2330,30 +2280,18 @@ opengl_renderer::draw_surface (const sur
                               glMaterialfv (LIGHT_MODE, GL_DIFFUSE, cb);
 
                               for (int k = 0; k < 3; k++)
                                 cb[k] = ss * (scr + (1-scr) * c(j-1, i, k));
                               glMaterialfv (LIGHT_MODE, GL_SPECULAR, cb);
                             }
                         }
                       if (el_mode > 0)
-                        {
-                          d = sqrt (n(j-1,i,0) * n(j-1,i,0)
-                                    + n(j-1,i,1) * n(j-1,i,1)
-                                    + n(j-1,i,2) * n(j-1,i,2));
-                          double dir = 1.0;
-                          if (bfl_mode > 0)
-                            dir = ((n(j-1,i,0) * view_vector(0)
-                                    + n(j-1,i,1) * view_vector(1)
-                                    + n(j-1,i,2) * view_vector(2) < 0)
-                                   ? ((bfl_mode > 1) ? 0.0 : -1.0) : 1.0);
-                          glNormal3d (dir * n(j-1,i,0)/d,
-                                      dir * n(j-1,i,1)/d,
-                                      dir * n(j-1,i,2)/d);
-                        }
+                        set_normal (bfl_mode, n, j-1, i);
+
                       glVertex3d (x(j1,i), y(j-1,i2), z(j-1,i));
 
                       // Vertex 2
                       if (ec_mode == INTERP)
                         {
                           for (int k = 0; k < 3; k++)
                             cb[k] = c(j, i, k);
                           glColor3fv (cb);
@@ -2369,30 +2307,18 @@ opengl_renderer::draw_surface (const sur
                               glMaterialfv (LIGHT_MODE, GL_DIFFUSE, cb);
 
                               for (int k = 0; k < 3; k++)
                                 cb[k] = ss * (scr + (1-scr) * c(j, i, k));
                               glMaterialfv (LIGHT_MODE, GL_SPECULAR, cb);
                             }
                         }
                       if (el_mode == GOURAUD)
-                        {
-                          d = sqrt (n(j,i,0) * n(j,i,0)
-                                    + n(j,i,1) * n(j,i,1)
-                                    + n(j,i,2) * n(j,i,2));
-                          double dir = 1.0;
-                          if (bfl_mode > 0)
-                            dir = ((n(j,i,0) * view_vector(0)
-                                    + n(j,i,1) * view_vector(1)
-                                    + n(j,i,2) * view_vector(2) < 0)
-                                   ? ((bfl_mode > 1) ? 0.0 : -1.0) : 1.0);
-                          glNormal3d (dir * n(j,i,0)/d,
-                                      dir * n(j,i,1)/d,
-                                      dir * n(j,i,2)/d);
-                        }
+                        set_normal (bfl_mode, n, j, i);
+
                       glVertex3d (x(j2,i), y(j,i2), z(j,i));
 
                       glEnd ();
                     }
                 }
             }
 
           // Mesh along X-axis
@@ -2451,30 +2377,18 @@ opengl_renderer::draw_surface (const sur
                               glMaterialfv (LIGHT_MODE, GL_DIFFUSE, cb);
 
                               for (int k = 0; k < 3; k++)
                                 cb[k] = ss * (scr + (1-scr) * c(j, i-1, k));
                               glMaterialfv (LIGHT_MODE, GL_SPECULAR, cb);
                             }
                         }
                       if (el_mode > 0)
-                        {
-                          d = sqrt (n(j,i-1,0) * n(j,i-1,0)
-                                    + n(j,i-1,1) * n(j,i-1,1)
-                                    + n(j,i-1,2) * n(j,i-1,2));
-                          double dir = 1.0;
-                          if (bfl_mode > 0)
-                            dir = ((n(j,i-1,0) * view_vector(0)
-                                    + n(j,i-1,1) * view_vector(1)
-                                    + n(j,i-1,2) * view_vector(2) < 0)
-                                   ? ((bfl_mode > 1) ? 0.0 : -1.0) : 1.0);
-                          glNormal3d (dir * n(j,i-1,0)/d,
-                                      dir * n(j,i-1,1)/d,
-                                      dir * n(j,i-1,2)/d);
-                        }
+                        set_normal (bfl_mode, n, j, i-1);
+
                       glVertex3d (x(j2,i-1), y(j,i1), z(j,i-1));
 
                       // Vertex 2
                       if (ec_mode == INTERP)
                         {
                           for (int k = 0; k < 3; k++)
                             cb[k] = c(j, i, k);
                           glColor3fv (cb);
@@ -2490,30 +2404,18 @@ opengl_renderer::draw_surface (const sur
                               glMaterialfv (LIGHT_MODE, GL_DIFFUSE, cb);
 
                               for (int k = 0; k < 3; k++)
                                 cb[k] = ss * (scr + (1-scr) * c(j, i, k));
                               glMaterialfv (LIGHT_MODE, GL_SPECULAR, cb);
                             }
                         }
                       if (el_mode == GOURAUD)
-                        {
-                          d = sqrt (n(j,i,0) * n(j,i,0)
-                                    + n(j,i,1) * n(j,i,1)
-                                    + n(j,i,2) * n(j,i,2));
-                          double dir = 1.0;
-                          if (bfl_mode > 0)
-                            dir = ((n(j,i,0) * view_vector(0)
-                                    + n(j,i,1) * view_vector(1)
-                                    + n(j,i,2) * view_vector(2) < 0)
-                                   ? ((bfl_mode > 1) ? 0.0 : -1.0) : 1.0);
-                          glNormal3d (dir * n(j,i,0)/d,
-                                      dir * n(j,i,1)/d,
-                                      dir * n(j,i,2)/d);
-                        }
+                        set_normal (bfl_mode, n, j, i);
+
                       glVertex3d (x(j2,i), y(j,i2), z(j,i));
 
                       glEnd ();
                     }
                 }
             }
 
           set_linestyle ("-");
@@ -3745,16 +3647,50 @@ opengl_renderer::draw_marker (double x, 
   // This shouldn't happen because construction of opengl_renderer
   // objects is supposed to be impossible if OpenGL is not available.
 
   panic_impossible ();
 
 #endif
 }
 
+void
+opengl_renderer::set_normal (int bfl_mode, const NDArray& n, int j, int i)
+{
+#if defined (HAVE_OPENGL)
+
+  double x = n(j,i,0);
+  double y = n(j,i,1);
+  double z = n(j,i,2);
+
+  double d = sqrt (x*x + y*y + z*z);
+
+  double dir = 1.0;
+
+  if (bfl_mode > 0)
+    dir = ((x * view_vector(0) + y * view_vector(1) + z * view_vector(2) < 0)
+           ? ((bfl_mode > 1) ? 0.0 : -1.0) : 1.0);
+
+  glNormal3d (dir*x/d, dir*y/d, dir*z/d);
+
+#else
+
+  octave_unused_parameter (bfl_mode);
+  octave_unused_parameter (n);
+  octave_unused_parameter (j);
+  octave_unused_parameter (i);
+
+  // This shouldn't happen because construction of opengl_renderer
+  // objects is supposed to be impossible if OpenGL is not available.
+
+  panic_impossible ();
+
+#endif
+}
+
 unsigned int
 opengl_renderer::make_marker_list (const std::string& marker, double size,
                                    bool filled) const
 {
 #if defined (HAVE_OPENGL)
 
   char c = marker[0];
 
diff --git a/libinterp/corefcn/gl-render.h b/libinterp/corefcn/gl-render.h
--- a/libinterp/corefcn/gl-render.h
+++ b/libinterp/corefcn/gl-render.h
@@ -149,16 +149,18 @@ private:
             | (x > xmax ? 1 : 0) << 1
             | (y < ymin ? 1 : 0) << 2
             | (y > ymax ? 1 : 0) << 3
             | (z < zmin ? 1 : 0) << 4
             | (z > zmax ? 1 : 0) << 5
             | (is_nan_or_inf (x, y, z) ? 0 : 1) << 6);
   }
 
+  void set_normal (int bfl_mode, const NDArray& n, int j, int i);
+
   unsigned int make_marker_list (const std::string& m, double size,
                                  bool filled) const;
 
   void draw_axes_planes (const axes::properties& props);
   void draw_axes_boxes (const axes::properties& props);
 
   void draw_axes_x_grid (const axes::properties& props);
   void draw_axes_y_grid (const axes::properties& props);
