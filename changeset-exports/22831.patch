# HG changeset patch
# User Markus MÃ¼tzel <markus.muetzel@gmx.de>
# Date 1480098345 -3600
#      Fri Nov 25 19:25:45 2016 +0100
# Node ID 96228c17a66ab71988dcf15aea0d29323b05549b
# Parent  c88f8829678963c40d11a74368e2f49ff247dc6a
Add input checking for double_property and handle_property (task #11311)

* graphics.in.h (class double_property): Add protected members minval
   and maxval to store min and max allowed value for double properties.
* graphics.in.h (double_property::add_constraint): new overloaded method to set
   the range of allowed values.
* graphics.in.h (class handle_property): New protected member
   type_constraints to store allowed object types.
* graphics.in.h (handle_property::add_constraint (const std::string& type)):
   Add allowed object types.
* graphics.in.h (init functions): Add range and type constraints.

* graphics.in.h (double_property::do_set): Check allowed values.
* graphics.cc (handle_property::do_set): Check allowed objects type.
* graphics.cc (init): Add range constraints for double properties.
* graphics.cc: Add BIST tests.

diff --git a/libinterp/corefcn/graphics.cc b/libinterp/corefcn/graphics.cc
--- a/libinterp/corefcn/graphics.cc
+++ b/libinterp/corefcn/graphics.cc
@@ -1577,29 +1577,70 @@ handle_property::do_set (const octave_va
         return false;
     }
 
   double dv = v.xdouble_value ("set: invalid graphics handle for property \"%s\"",
                                get_name ().c_str ());
 
   graphics_handle gh = gh_manager::lookup (dv);
 
-  if (! (octave::math::isnan (gh.value ()) || gh.ok ()))
-    error ("set: invalid graphics handle (= %g) for property \"%s\"",
-           dv, get_name ().c_str ());
+  // Check the object type if necessary
+  bool type_ok = true;
+  if (gh.ok () && ! type_constraints.empty ())
+    {
+      type_ok = false;
+      graphics_object obj = gh_manager::get_object (gh);
+
+      for (std::set<std::string>::const_iterator
+           p = type_constraints.begin ();
+           p != type_constraints.end (); p++)
+        if (obj.isa (*p))
+          {
+            type_ok = true;
+            break;
+          }
+    }
+
+  if (! octave::math::isnan (gh.value ()) && ! (gh.ok () && type_ok))
+    {
+      if (type_ok)
+        error ("set: invalid graphics handle (= %g) for property \"%s\"",
+               dv, get_name ().c_str ());
+      else
+        error ("set: invalid graphics object type for property \"%s\"",
+               get_name ().c_str ());
+    }
 
   if (current_val != gh)
     {
       current_val = gh;
       return true;
     }
 
   return false;
 }
 
+/*
+## Test validation of uicontextmenu property 
+%!test
+%! hf = figure ("visible", "off");
+%! unwind_protect
+%!   hax = axes ("parent", hf);
+%!   hpa = patch ("parent", hax);
+%!   try 
+%!     set (hax, "uicontextmenu", hpa);
+%!   catch
+%!     err = lasterr ();
+%!   end_try_catch
+%!   assert (err, "set: invalid graphics object type for property \"uicontextmenu\"");
+%! unwind_protect_cleanup
+%!   delete (hf)
+%! end_unwind_protect   
+*/
+
 Matrix
 children_property::do_get_children (bool return_hidden) const
 {
   Matrix retval (children_list.size (), 1);
   octave_idx_type k = 0;
 
   graphics_object go = gh_manager::get_object (0);
 
@@ -4503,16 +4544,27 @@ axes::properties::init (void)
   view.add_constraint (dim_vector (1, 2));
   cameraposition.add_constraint (dim_vector (1, 3));
   cameratarget.add_constraint (dim_vector (1, 3));
   Matrix upv (1, 3, 0.0);
   upv(2) = 1.0;
   cameraupvector = upv;
   cameraupvector.add_constraint (dim_vector (1, 3));
   currentpoint.add_constraint (dim_vector (2, 3));
+
+  // Range constraints for double properties
+  fontsize.add_constraint ("min", 0.0, false);
+  gridalpha.add_constraint ("min", 0.0, true);
+  gridalpha.add_constraint ("max", 1.0, true);
+  labelfontsizemultiplier.add_constraint ("min", 0.0, false);
+  linewidth.add_constraint ("min", 0.0, false);
+  minorgridalpha.add_constraint ("min", 0.0, true);
+  minorgridalpha.add_constraint ("max", 1.0, true);
+  titlefontsizemultiplier.add_constraint ("min", 0.0, false);
+
   // No constraints for hidden transform properties
   update_font ();
 
   x_zlim.resize (1, 2);
 
   sx = "linear";
   sy = "linear";
   sz = "linear";
@@ -4563,16 +4615,39 @@ axes::properties::init (void)
   adopt (title.handle_value ());
 
   Matrix tlooseinset = default_axes_position ();
   tlooseinset(2) = 1-tlooseinset(0)-tlooseinset(2);
   tlooseinset(3) = 1-tlooseinset(1)-tlooseinset(3);
   looseinset = tlooseinset;
 }
 
+/*
+## Test validation of axes double properties range 
+%!test
+%! hf = figure ("visible", "off");
+%! unwind_protect
+%!   hax =  axes ("parent", hf);
+%!   try 
+%!     set (hax, "linewidth", -1);
+%!   catch
+%!     err = lasterr ();
+%!   end_try_catch
+%!   assert (err, "set: \"linewidth\" must be greater than 0")
+%!   try 
+%!     set (hax, "minorgridalpha", 1.5);
+%!   catch
+%!     err = lasterr ();
+%!   end_try_catch
+%!   assert (err, "set: \"minorgridalpha\" must be less than or equal to 1")
+%! unwind_protect_cleanup
+%!   delete (hf)
+%! end_unwind_protect   
+*/
+
 Matrix
 axes::properties::calc_tightbox (const Matrix& init_pos)
 {
   Matrix pos = init_pos;
   graphics_object go = gh_manager::get_object (get_parent ());
   Matrix parent_bb = go.get_properties ().get_boundingbox (true);
   Matrix ext = get_extent (true, true);
   ext(1) = parent_bb(3) - ext(1) - ext(3);
diff --git a/libinterp/corefcn/graphics.in.h b/libinterp/corefcn/graphics.in.h
--- a/libinterp/corefcn/graphics.in.h
+++ b/libinterp/corefcn/graphics.in.h
@@ -1150,53 +1150,87 @@ private:
 // ---------------------------------------------------------------------
 
 class double_property : public base_property
 {
 public:
   double_property (const std::string& nm, const graphics_handle& h,
                    double d = 0)
     : base_property (nm, h),
-      current_val (d) { }
+      current_val (d),
+      minval (std::pair<double, bool> (octave_NaN, true)),
+      maxval (std::pair<double, bool> (octave_NaN, true)) { }
 
   double_property (const double_property& p)
-    : base_property (p), current_val (p.current_val) { }
+    : base_property (p), current_val (p.current_val),
+      minval (std::pair<double, bool> (octave_NaN, true)),
+      maxval (std::pair<double, bool> (octave_NaN, true)) { }
 
   octave_value get (void) const { return octave_value (current_val); }
 
   double double_value (void) const { return current_val; }
 
   double_property& operator = (const octave_value& val)
   {
     set (val);
     return *this;
   }
 
   base_property* clone (void) const { return new double_property (*this); }
 
+  void add_constraint (const std::string& type, double val, bool inclusive)
+  { 
+    if (type == "min")
+      minval = std::pair<double, bool> (val, inclusive);
+    else if (type == "max")
+      maxval = std::pair<double, bool> (val, inclusive);
+  }
+
 protected:
   bool do_set (const octave_value& v)
   {
     if (! v.is_scalar_type () || ! v.is_real_type ())
       error ("set: invalid value for double property \"%s\"",
              get_name ().c_str ());
 
     double new_val = v.double_value ();
 
+    // Check min and max
+    if (! octave::math::isnan (minval.first))
+      {
+        if (minval.second && minval.first > new_val)
+          error ("set: \"%s\" must be greater than or equal to %g",
+                 get_name ().c_str (), minval.first);
+        else if (! minval.second && minval.first >= new_val)
+          error ("set: \"%s\" must be greater than %g",
+                 get_name ().c_str (), minval.first);
+      }
+
+    if (! octave::math::isnan (maxval.first))
+      {
+        if (maxval.second && maxval.first < new_val)
+          error ("set: \"%s\" must be less than or equal to %g",
+                 get_name ().c_str (), maxval.first);
+        else if (! maxval.second && maxval.first <= new_val)
+          error ("set: \"%s\" must be less than %g",
+                 get_name ().c_str (), maxval.first);
+      }
+
     if (new_val != current_val)
       {
         current_val = new_val;
         return true;
       }
 
     return false;
   }
 
 private:
   double current_val;
+  std::pair<double, bool> minval, maxval;
 };
 
 // ---------------------------------------------------------------------
 
 class double_radio_property : public base_property
 {
 public:
   double_radio_property (double d, const radio_values& v)
@@ -1532,18 +1566,22 @@ public:
     set (octave_value (h.value ()));
     return *this;
   }
 
   void invalidate (void) { current_val = octave::numeric_limits<double>::NaN (); }
 
   base_property* clone (void) const { return new handle_property (*this); }
 
+  void add_constraint (const std::string& type)
+  { type_constraints.insert (type); }
+
 protected:
   OCTINTERP_API bool do_set (const octave_value& v);
+  std::set<std::string> type_constraints;
 
 private:
   graphics_handle current_val;
 };
 
 // ---------------------------------------------------------------------
 
 class any_property : public base_property
@@ -2634,17 +2672,20 @@ protected:
   };
 
   std::map<caseless_str, property, cmp_caseless_str> all_props;
 
 protected:
   void insert_static_property (const std::string& name, base_property& p)
   { insert_property (name, property (&p, true)); }
 
-  virtual void init (void) { }
+  virtual void init (void) 
+  { 
+    uicontextmenu.add_constraint ("uicontextmenu");
+  }
 };
 
 class OCTINTERP_API base_graphics_object
 {
 public:
   friend class graphics_object;
 
   base_graphics_object (void) : count (1), toolkit_flag (false) { }
@@ -4404,16 +4445,23 @@ public:
       row_vector_property xlim hlr , Matrix ()
       row_vector_property ylim hlr , Matrix ()
       row_vector_property zlim hlr , Matrix ()
       bool_property xliminclude hl , "on"
       bool_property yliminclude hl , "on"
       bool_property zliminclude hl , "off"
     END_PROPERTIES
 
+  protected:
+    void init (void)
+      {
+        linewidth.add_constraint ("min", 0, false);
+        markersize.add_constraint ("min", 0, false);
+      }
+
   private:
     Matrix compute_xlim (void) const;
     Matrix compute_ylim (void) const;
 
     void update_xdata (void) { set_xlim (compute_xlim ()); }
 
     void update_ydata (void) { set_ylim (compute_ylim ()); }
 
@@ -4531,16 +4579,19 @@ public:
 
     // Text renderer, used for calculation of text size
     octave::text_renderer txt_renderer;
 
   protected:
     void init (void)
     {
       position.add_constraint (dim_vector (1, 3));
+      fontsize.add_constraint ("min", 0.0, false);
+      linewidth.add_constraint ("min", 0.0, false);
+      margin.add_constraint ("min", 0.0, false);
       cached_units = get_units ();
       update_font ();
     }
 
   private:
     void update_position (void)
     {
       Matrix pos = get_data_position ();
@@ -4977,16 +5028,28 @@ public:
       cdata.add_constraint (dim_vector (-1, -1, 3));
       facevertexcdata.add_constraint (dim_vector (-1, 1));
       facevertexcdata.add_constraint (dim_vector (-1, 3));
       facevertexalphadata.add_constraint (dim_vector (-1, 1));
       facenormals.add_constraint (dim_vector (-1, 3));
       facenormals.add_constraint (dim_vector (0, 0));
       vertexnormals.add_constraint (dim_vector (-1, 3));
       vertexnormals.add_constraint (dim_vector (0, 0));
+
+      ambientstrength.add_constraint ("min", 0.0, true);
+      ambientstrength.add_constraint ("max", 1.0, true);
+      diffusestrength.add_constraint ("min", 0.0, true);
+      diffusestrength.add_constraint ("max", 1.0, true);
+      linewidth.add_constraint ("min", 0.0, false);
+      markersize.add_constraint ("min", 0.0, false);
+      specularcolorreflectance.add_constraint ("min", 0.0, true);
+      specularcolorreflectance.add_constraint ("max", 1.0, true);
+      specularexponent.add_constraint ("min", 0.0, false);
+      specularstrength.add_constraint ("min", 0.0, true);
+      specularstrength.add_constraint ("max", 1.0, true);
     }
 
   private:
     std::string bad_data_msg;
 
     void update_faces (void) { update_data ();}
 
     void update_vertices (void)  { update_data ();}
@@ -5179,16 +5242,28 @@ public:
       cdata.add_constraint (dim_vector (-1, -1, 3));
       alphadata.add_constraint ("double");
       alphadata.add_constraint ("uint8");
       alphadata.add_constraint (dim_vector (-1, -1));
       facenormals.add_constraint (dim_vector (-1, -1, 3));
       facenormals.add_constraint (dim_vector (0, 0));
       vertexnormals.add_constraint (dim_vector (-1, -1, 3));
       vertexnormals.add_constraint (dim_vector (0, 0));
+
+      ambientstrength.add_constraint ("min", 0.0, true);
+      ambientstrength.add_constraint ("max", 1.0, true);
+      diffusestrength.add_constraint ("min", 0.0, true);
+      diffusestrength.add_constraint ("max", 1.0, true);
+      linewidth.add_constraint ("min", 0.0, false);
+      markersize.add_constraint ("min", 0.0, false);
+      specularcolorreflectance.add_constraint ("min", 0.0, true);
+      specularcolorreflectance.add_constraint ("max", 1.0, true);
+      specularexponent.add_constraint ("min", 0.0, false);
+      specularstrength.add_constraint ("min", 0.0, true);
+      specularstrength.add_constraint ("max", 1.0, true);
     }
 
   private:
     void update_alphadata (void)
     {
       if (alphadatamapping_is ("scaled"))
         set_alim (alphadata.get_limits ());
       else
@@ -5385,17 +5460,19 @@ public:
       double_property position , 0
       bool_property separator , "off"
       // Octave-specific properties
       string_property __fltk_label__ h , ""
     END_PROPERTIES
 
   protected:
     void init (void)
-    { }
+    {
+      position.add_constraint ("min", 0, false);
+    }
   };
 
 private:
   properties xproperties;
 
 public:
   uimenu (const graphics_handle& mh, const graphics_handle& p)
     : base_graphics_object (), xproperties (mh, p)
@@ -5537,16 +5614,17 @@ public:
   protected:
     void init (void)
     {
       cdata.add_constraint ("double");
       cdata.add_constraint ("single");
       cdata.add_constraint (dim_vector (-1, -1, 3));
       position.add_constraint (dim_vector (1, 4));
       sliderstep.add_constraint (dim_vector (1, 2));
+      fontsize.add_constraint ("min", 0.0, false);
       cached_units = get_units ();
     }
 
     void update_text_extent (void);
 
     void update_string (void) { update_text_extent (); }
     void update_fontname (void) { update_text_extent (); }
     void update_fontsize (void) { update_text_extent (); }
@@ -5623,16 +5701,18 @@ public:
       string_property title , ""
       radio_property titleposition , "{lefttop}|centertop|righttop|leftbottom|centerbottom|rightbottom"
     END_PROPERTIES
 
   protected:
     void init (void)
     {
       position.add_constraint (dim_vector (1, 4));
+      borderwidth.add_constraint ("min", 0.0, true);
+      fontsize.add_constraint ("min", 0.0, false);
     }
 
     // void update_text_extent (void);
     // void update_string (void) { update_text_extent (); }
     // void update_fontname (void) { update_text_extent (); }
     // void update_fontsize (void) { update_text_extent (); }
     // void update_fontangle (void) { update_text_extent (); }
     // void update_fontweight (void) { update_text_extent (); }
@@ -5703,16 +5783,18 @@ public:
       string_property title , ""
       radio_property titleposition , "{lefttop}|centertop|righttop|leftbottom|centerbottom|rightbottom"
       radio_property units S , "{normalized}|inches|centimeters|points|pixels|characters"
     END_PROPERTIES
 
   protected:
     void init (void)
     {
+      borderwidth.add_constraint ("min", 0.0, true);
+      fontsize.add_constraint ("min", 0.0, false);
       position.add_constraint (dim_vector (1, 4));
     }
 
     void update_units (const caseless_str& old_units);
     void update_fontunits (const caseless_str& old_units);
 
   };
 
