# HG changeset patch
# User CarnÃ« Draug <carandraug@octave.org>
# Date 1377265386 -3600
#      Fri Aug 23 14:43:06 2013 +0100
# Node ID accafe1aee7c04648ab0b3dc85f89b13de88e1c8
# Parent  56fe31b248debaee1d5a835eb72ffe0cd674204c
Make use of gripe_disabled_feature() instead of custom error message.

* urlwrite.cc: make use of the standard gripe_disabled_feature() function
  to error, instead of custom error messages.
  (__ftp_mode__, __ftp__close): fix weird 3 space indentation.

diff --git a/libinterp/dldfcn/urlwrite.cc b/libinterp/dldfcn/urlwrite.cc
--- a/libinterp/dldfcn/urlwrite.cc
+++ b/libinterp/dldfcn/urlwrite.cc
@@ -43,16 +43,17 @@ along with Octave; see the file COPYING.
 #include "defun-dld.h"
 #include "error.h"
 #include "oct-obj.h"
 #include "ov-cell.h"
 #include "pager.h"
 #include "oct-map.h"
 #include "oct-refcount.h"
 #include "unwind-prot.h"
+#include "gripes.h"
 
 #ifdef HAVE_CURL
 
 #include <curl/curl.h>
 #include <curl/curlver.h>
 #include <curl/easy.h>
 
 static int
@@ -838,17 +839,17 @@ urlwrite (\"http://www.google.com/search
           retval(0) = std::string ();
         }
     }
 
   if (nargout < 2 && ! ok)
     error ("urlwrite: curl: %s", curl.lasterror ().c_str ());
 
 #else
-  error ("urlwrite: not available in this version of Octave");
+  gripe_disabled_feature ("urlwrite", "urlwrite");
 #endif
 
   return retval;
 }
 
 DEFUN_DLD (urlread, args, nargout,
   "-*- texinfo -*-\n\
 @deftypefn  {Loadable Function} {@var{s} =} urlread (@var{url})\n\
@@ -957,17 +958,17 @@ s = urlread (\"http://www.google.com/sea
       retval(1) = ok;
       retval(0) = buf.str ();
     }
 
   if (nargout < 2 && ! ok)
     error ("urlread: curl: %s", curl.lasterror().c_str());
 
 #else
-  error ("urlread: not available in this version of Octave");
+  gripe_disabled_feature ("urlread", "urlread");
 #endif
 
   return retval;
 }
 
 DEFUN_DLD (__ftp__, args, ,
   "-*- texinfo -*-\n\
 @deftypefn  {Loadable Function} {} __ftp__ (@var{handle}, @var{host})\n\
@@ -999,17 +1000,17 @@ Undocumented internal function\n\
         {
           handles.contents (handle) = curl_handle (host, user, passwd);
 
           if (error_state)
             handles.del (handle);
         }
     }
 #else
-  error ("__ftp__: not available in this version of Octave");
+  gripe_disabled_feature ("__ftp__", "FTP");
 #endif
 
   return octave_value ();
 }
 
 DEFUN_DLD (__ftp_pwd__, args, ,
   "-*- texinfo -*-\n\
 @deftypefn {Loadable Function} {} __ftp_pwd__ (@var{handle})\n\
@@ -1032,17 +1033,17 @@ Undocumented internal function\n\
 
           if (curl.is_valid ())
             retval = curl.pwd ();
           else
             error ("__ftp_pwd__: invalid ftp handle");
         }
     }
 #else
-  error ("__ftp_pwd__: not available in this version of Octave");
+  gripe_disabled_feature ("__ftp_pwd__", "FTP");
 #endif
 
   return retval;
 }
 
 DEFUN_DLD (__ftp_cwd__, args, ,
   "-*- texinfo -*-\n\
 @deftypefn {Loadable Function} {} __ftp_cwd__ (@var{handle}, @var{path})\n\
@@ -1068,17 +1069,17 @@ Undocumented internal function\n\
 
           if (curl.is_valid ())
             curl.cwd (path);
           else
             error ("__ftp_cwd__: invalid ftp handle");
         }
     }
 #else
-  error ("__ftp_cwd__: not available in this version of Octave");
+  gripe_disabled_feature ("__ftp_cwd__", "FTP");
 #endif
 
   return octave_value ();
 }
 
 DEFUN_DLD (__ftp_dir__, args, nargout,
   "-*- texinfo -*-\n\
 @deftypefn {Loadable Function} {} __ftp_dir__ (@var{handle})\n\
@@ -1148,17 +1149,17 @@ Undocumented internal function\n\
                     }
                 }
             }
           else
             error ("__ftp_dir__: invalid ftp handle");
         }
     }
 #else
-  error ("__ftp_dir__: not available in this version of Octave");
+  gripe_disabled_feature ("__ftp_dir__", "FTP");
 #endif
 
   return retval;
 }
 
 DEFUN_DLD (__ftp_ascii__, args, ,
   "-*- texinfo -*-\n\
 @deftypefn {Loadable Function} {} __ftp_ascii__ (@var{handle})\n\
@@ -1180,17 +1181,17 @@ Undocumented internal function\n\
 
           if (curl.is_valid ())
             curl.ascii ();
           else
             error ("__ftp_ascii__: invalid ftp handle");
         }
     }
 #else
-  error ("__ftp_ascii__: not available in this version of Octave");
+  gripe_disabled_feature ("__ftp_ascii__", "FTP");
 #endif
 
   return octave_value ();
 }
 
 DEFUN_DLD (__ftp_binary__, args, ,
   "-*- texinfo -*-\n\
 @deftypefn {Loadable Function} {} __ftp_binary__ (@var{handle})\n\
@@ -1212,80 +1213,80 @@ Undocumented internal function\n\
 
           if (curl.is_valid ())
             curl.binary ();
           else
             error ("__ftp_binary__: invalid ftp handle");
         }
     }
 #else
-  error ("__ftp_binary__: not available in this version of Octave");
+  gripe_disabled_feature ("__ftp_binary__", "FTP");
 #endif
 
   return octave_value ();
 }
 
 DEFUN_DLD (__ftp_close__, args, ,
   "-*- texinfo -*-\n\
 @deftypefn {Loadable Function} {} __ftp_close__ (@var{handle})\n\
- Undocumented internal function\n\
- @end deftypefn")
- {
- #ifdef HAVE_CURL
-   int nargin = args.length ();
+Undocumented internal function\n\
+@end deftypefn")
+{
+#ifdef HAVE_CURL
+  int nargin = args.length ();
 
-   if (nargin != 1)
-     error ("__ftp_close__: incorrect number of arguments");
-   else
-     {
-       std::string handle = args(0).string_value ();
+  if (nargin != 1)
+    error ("__ftp_close__: incorrect number of arguments");
+  else
+    {
+      std::string handle = args(0).string_value ();
 
-       if (!error_state)
-         handles.del (handle);
-     }
- #else
-   error ("__ftp_close__: not available in this version of Octave");
- #endif
+      if (! error_state)
+        handles.del (handle);
+    }
+#else
+  gripe_disabled_feature ("__ftp_close__", "FTP");
+#endif
 
-   return octave_value ();
- }
+  return octave_value ();
+}
 
 DEFUN_DLD (__ftp_mode__, args, ,
   "-*- texinfo -*-\n\
 @deftypefn {Loadable Function} {} __ftp_mode__ (@var{handle})\n\
- Undocumented internal function\n\
- @end deftypefn")
- {
-   octave_value retval;
- #ifdef HAVE_CURL
-   int nargin = args.length ();
+Undocumented internal function\n\
+@end deftypefn")
+{
+  octave_value retval;
+#ifdef HAVE_CURL
+  int nargin = args.length ();
 
-   if (nargin != 1)
-     error ("__ftp_mode__: incorrect number of arguments");
-   else
-     {
-       std::string handle = args(0).string_value ();
+  if (nargin != 1)
+    error ("__ftp_mode__: incorrect number of arguments");
+  else
+    {
+      std::string handle = args(0).string_value ();
 
 
-      if (!error_state)
+      if (! error_state)
         {
           const curl_handle curl = handles.contents (handle);
 
           if (curl.is_valid ())
             retval = (curl.is_ascii () ? "ascii" : "binary");
           else
             error ("__ftp_binary__: invalid ftp handle");
         }
-     }
- #else
-   error ("__ftp_mode__: not available in this version of Octave");
- #endif
+    }
+#else
+  gripe_disabled_feature ("__ftp_mode__", "FTP");
+#endif
 
-   return retval;
- }
+  return retval;
+}
 
 DEFUN_DLD (__ftp_delete__, args, ,
   "-*- texinfo -*-\n\
 @deftypefn {Loadable Function} {} __ftp_delete__ (@var{handle}, @var{path})\n\
 Undocumented internal function\n\
 @end deftypefn")
 {
 #ifdef HAVE_CURL
@@ -1304,17 +1305,17 @@ Undocumented internal function\n\
 
           if (curl.is_valid ())
             curl.del (file);
           else
             error ("__ftp_delete__: invalid ftp handle");
         }
     }
 #else
-  error ("__ftp_delete__: not available in this version of Octave");
+  gripe_disabled_feature ("__ftp_delete__", "FTP");
 #endif
 
   return octave_value ();
 }
 
 DEFUN_DLD (__ftp_rmdir__, args, ,
   "-*- texinfo -*-\n\
 @deftypefn {Loadable Function} {} __ftp_rmdir__ (@var{handle}, @var{path})\n\
@@ -1337,17 +1338,17 @@ Undocumented internal function\n\
 
           if (curl.is_valid ())
             curl.rmdir (dir);
           else
             error ("__ftp_rmdir__: invalid ftp handle");
         }
     }
 #else
-  error ("__ftp_rmdir__: not available in this version of Octave");
+  gripe_disabled_feature ("__ftp_rmdir__", "FTP");
 #endif
 
   return octave_value ();
 }
 
 DEFUN_DLD (__ftp_mkdir__, args, ,
   "-*- texinfo -*-\n\
 @deftypefn {Loadable Function} {} __ftp_mkdir__ (@var{handle}, @var{path})\n\
@@ -1370,17 +1371,17 @@ Undocumented internal function\n\
 
           if (curl.is_valid ())
             curl.mkdir (dir);
           else
             error ("__ftp_mkdir__: invalid ftp handle");
         }
     }
 #else
-  error ("__ftp_mkdir__: not available in this version of Octave");
+  gripe_disabled_feature ("__ftp_mkdir__", "FTP");
 #endif
 
   return octave_value ();
 }
 
 DEFUN_DLD (__ftp_rename__, args, ,
   "-*- texinfo -*-\n\
 @deftypefn {Loadable Function} {} __ftp_rename__ (@var{handle}, @var{path})\n\
@@ -1404,17 +1405,17 @@ Undocumented internal function\n\
 
           if (curl.is_valid ())
             curl.rename (oldname, newname);
           else
             error ("__ftp_rename__: invalid ftp handle");
         }
     }
 #else
-  error ("__ftp_rename__: not available in this version of Octave");
+  gripe_disabled_feature ("__ftp_rename__", "FTP");
 #endif
 
   return octave_value ();
 }
 
 #ifdef HAVE_CURL
 static string_vector
 mput_directory (const curl_handle& curl, const std::string& base,
@@ -1569,17 +1570,17 @@ Undocumented internal function\n\
                     }
                 }
             }
           else
             error ("__ftp_mput__: invalid ftp handle");
         }
     }
 #else
-  error ("__ftp_mput__: not available in this version of Octave");
+  gripe_disabled_feature ("__ftp_mput__", "FTP");
 #endif
 
   return (nargout > 0 ? octave_value (retval) : octave_value ());
 }
 
 #ifdef HAVE_CURL
 static void
 getallfiles (const curl_handle& curl, const std::string& dir,
@@ -1730,13 +1731,13 @@ Undocumented internal function\n\
                     }
                 }
               if (n == 0)
                 error ("__ftp_mget__: file not found");
             }
         }
     }
 #else
-  error ("__ftp_mget__: not available in this version of Octave");
+  gripe_disabled_feature ("__ftp_mget__", "FTP");
 #endif
 
   return octave_value ();
 }
