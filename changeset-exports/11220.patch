# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1289368474 18000
#      Wed Nov 10 00:54:34 2010 -0500
# Node ID 883b9308353cd9f0d119ed8fb8d9f07b45a6ca08
# Parent  29d515b9d30c250c1fd68a012bdf515d5a937d23
allow class function to be called from methods as well as constructors

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,21 @@
+2010-11-10  John W. Eaton  <jwe@octave.org>
+
+	* ov-fcn.h (octave_base_value::is_class_constructor)
+	octave_base_value::is_class_method): New optional character
+	string argument.
+	* ov-usr-fcn.h (octave_usr_fcn::is_class_constructor)
+	octave_usr_fcn::is_class_method): New optional arg. If this
+	argument is not empty, also check it against the name of the
+	dispatch class.
+	* ov-class.cc (Fclass): Allow class function to be called inside
+	a class method.  Require that the to-be-constructed object is of
+	the same class as the class constructor or method.
+
 2010-11-09  John W. Eaton  <jwe@octave.org>
 
 	* lex.ll (handle_number): Set lexer_flags.looking_for_object_index
 	to false here.  Fixes bug #31608.
 
 2010-11-09  John W. Eaton  <jwe@octave.org>
 
 	* gl-render.cc (make_marker_list): Call fmod instead of mod.
diff --git a/src/ov-class.cc b/src/ov-class.cc
--- a/src/ov-class.cc
+++ b/src/ov-class.cc
@@ -118,16 +118,18 @@ octave_class::unique_clone (void)
 
 std::string
 octave_class::get_current_method_class (void)
 {
   std::string retval = class_name ();
 
   octave_function *fcn = octave_call_stack::current ();
 
+  // Here we are just looking to see if FCN is a method or constructor
+  // for any class, not specifically this one.
   if (fcn->is_class_method () || fcn->is_class_constructor ())
     retval = fcn->dispatch_class ();
 
   return retval;
 }
 
 static void
 gripe_invalid_index1 (void)
@@ -1721,55 +1723,63 @@ derived.\n\
   if (nargin == 0)
     print_usage ();
   else if (nargin == 1)
     retval = args(0).class_name ();
   else
     {
       octave_function *fcn = octave_call_stack::caller ();
 
-      if (fcn && fcn->is_class_constructor ())
-        {
-          octave_map m = args(0).map_value ();
-
-          if (! error_state)
-            {
-              std::string id = args(1).string_value ();
+      std::string id = args(1).string_value ();
 
-              if (! error_state)
+      if (! error_state)
+        {
+          if (fcn)
+            {
+              if (fcn->is_class_constructor (id) || fcn->is_class_method (id))
                 {
-                  if (nargin == 2)
-                    retval = octave_value (new octave_class (m, id));
-                  else
-                    {
-                      octave_value_list parents = args.slice (2, nargin-2);
-
-                      retval = octave_value (new octave_class (m, id, parents));
-                    }
+                  octave_map m = args(0).map_value ();
 
                   if (! error_state)
                     {
-                      octave_class::exemplar_const_iterator it
-                        = octave_class::exemplar_map.find (id);
+                      if (nargin == 2)
+                        retval = octave_value (new octave_class (m, id));
+                      else
+                        {
+                          octave_value_list parents = args.slice (2, nargin-2);
+
+                          retval
+                            = octave_value (new octave_class (m, id, parents));
+                        }
 
-                      if (it == octave_class::exemplar_map.end ())
-                        octave_class::exemplar_map[id]
-                          = octave_class::exemplar_info (retval);
-                      else if (! it->second.compare (retval))
-                        error ("class: object of class `%s' does not match previously constructed objects", id.c_str ());
+                      if (! error_state)
+                        {
+                          octave_class::exemplar_const_iterator it
+                            = octave_class::exemplar_map.find (id);
+
+                          if (it == octave_class::exemplar_map.end ())
+                            octave_class::exemplar_map[id]
+                              = octave_class::exemplar_info (retval);
+                          else if (! it->second.compare (retval))
+                            error ("class: object of class `%s' does not match previously constructed objects",
+                                   id.c_str ());
+                        }
                     }
+                  else
+                    error ("class: expecting structure as first argument");
                 }
               else
-                error ("class: expecting character string as second argument");
+                error ("class: `%s' is invalid as a class name in this context",
+                       id.c_str ());
             }
           else
-            error ("class: expecting structure as first argument");
+            error ("class: invalid call from outside class constructor or method");
         }
       else
-        error ("class: invalid call from outside class constructor");
+        error ("class: expecting character string as second argument");
     }
 
   return retval;
 }
 
 DEFUN (__isa_parent__, args, ,
   "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} __isa_parent__ (@var{class}, @var{name})\n\
diff --git a/src/ov-fcn-handle.cc b/src/ov-fcn-handle.cc
--- a/src/ov-fcn-handle.cc
+++ b/src/ov-fcn-handle.cc
@@ -1488,18 +1488,21 @@ make_fcn_handle (const std::string& nm, 
         case '|':
           tnm = "or";
           break;
         }
     }
 
   octave_value f = symbol_table::find_function (tnm, octave_value_list (),
                                                 local_funcs);
+
   octave_function *fptr = f.function_value (true);
 
+  // Here we are just looking to see if FCN is a method or constructor
+  // for any class.
   if (local_funcs && fptr 
       && (fptr->is_nested_function () || fptr->is_private_function ()
           || fptr->is_class_constructor ()))
     {
       // Locally visible function.
       retval = octave_value (new octave_fcn_handle (f, tnm));
     }
   else
diff --git a/src/ov-fcn.h b/src/ov-fcn.h
--- a/src/ov-fcn.h
+++ b/src/ov-fcn.h
@@ -73,19 +73,21 @@ public:
   virtual octave_time time_parsed (void) const
     { return octave_time (static_cast<time_t> (0)); }
 
   virtual octave_time time_checked (void) const
     { return octave_time (static_cast<time_t> (0)); }
 
   virtual bool is_nested_function (void) const { return false; }
 
-  virtual bool is_class_constructor (void) const { return false; }
+  virtual bool is_class_constructor (const std::string& = std::string ()) const
+    { return false; }
 
-  virtual bool is_class_method (void) const { return false; }
+  virtual bool is_class_method (const std::string& = std::string ()) const
+    { return false; }
 
   virtual bool takes_varargs (void) const { return false; }
 
   virtual bool takes_var_return (void) const { return false; }
 
   void stash_dispatch_class (const std::string& nm) { xdispatch_class = nm; }
 
   std::string dispatch_class (void) const { return xdispatch_class; }
diff --git a/src/ov-usr-fcn.h b/src/ov-usr-fcn.h
--- a/src/ov-usr-fcn.h
+++ b/src/ov-usr-fcn.h
@@ -246,21 +246,29 @@ public:
   bool is_nested_function (void) const { return nested_function; }
 
   void mark_as_inline_function (void) { inline_function = true; }
 
   bool is_inline_function (void) const { return inline_function; }
 
   void mark_as_class_constructor (void) { class_constructor = true; }
 
-  bool is_class_constructor (void) const { return class_constructor; }
+  bool is_class_constructor (const std::string& cname = std::string ()) const
+    {
+      return class_constructor
+        ? (cname.empty () ? true : cname == dispatch_class ()) : false;
+    }
 
   void mark_as_class_method (void) { class_method = true; }
 
-  bool is_class_method (void) const { return class_method; }
+  bool is_class_method (const std::string& cname = std::string ()) const
+    {
+      return class_method
+        ? (cname.empty () ? true : cname == dispatch_class ()) : false;
+    }
 
   octave_value subsref (const std::string& type,
                         const std::list<octave_value_list>& idx)
     {
       octave_value_list tmp = subsref (type, idx, 1);
       return tmp.length () > 0 ? tmp(0) : octave_value ();
     }
 
