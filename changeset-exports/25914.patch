# HG changeset patch
# User Torsten <mttl@mailbox.org>
# Date 1538578836 -7200
#      Wed Oct 03 17:00:36 2018 +0200
# Node ID b33d4fbce33e5c43359399f64f1c5b8ff90718f8
# Parent  acce85499a464d4e27eac0db8592ae518e1474a9
editor: adding cmd objects to the cmd queue instead signaling the command

* file-editor-tab.cc (exit_debug_and_clear): replace signal for
  executing dbquit in terminal by creating according command and requesting
  to add it to the command queue

* file-editor-tab.h: remove execute_command_in_terminal_signal and add
  new signal request_queue_cmd

* file-editor.cc (construct): remove connection of obsolete signal
  execute_command_in_terminal_signal;
  (add_file_editor_tab): connect new signal from editor tab to add a command
  to the command queue, remove connection of obsolete signal for executing
  a command in console

* m-editor/file-editor.h: remove signal execute_command_in_terminal_signal

diff --git a/libgui/src/m-editor/file-editor-tab.cc b/libgui/src/m-editor/file-editor-tab.cc
--- a/libgui/src/m-editor/file-editor-tab.cc
+++ b/libgui/src/m-editor/file-editor-tab.cc
@@ -2032,17 +2032,20 @@ namespace octave
           {
             int ans = QMessageBox::question (nullptr, tr ("Debug or Save"),
                                              tr ("This file is currently being executed.\n"
                                                  "Quit debugging and save?"),
                                              QMessageBox::Save | QMessageBox::Cancel);
 
             if (ans == QMessageBox::Save)
               {
-                emit execute_command_in_terminal_signal ("dbquit");
+                // add a dbquit command to the queue
+                octave_cmd_debug *cmd = new octave_cmd_debug ("quit", true);
+                emit request_queue_cmd (cmd);
+
                 // Wait until dbquit has actually occurred
                 while (names.numel () > i)
                   {
                     octave::sleep (0.01);
                     stk = cs.backtrace (nskip, curr_frame, false);
                     names = stk.contents ("name");
                   }
               }
diff --git a/libgui/src/m-editor/file-editor-tab.h b/libgui/src/m-editor/file-editor-tab.h
--- a/libgui/src/m-editor/file-editor-tab.h
+++ b/libgui/src/m-editor/file-editor-tab.h
@@ -31,16 +31,17 @@ along with Octave; see the file COPYING.
 #include <QSettings>
 #include <QFileInfo>
 #include <Qsci/qsciapis.h>
 #include <QStatusBar>
 #include <QLabel>
 
 #include "find-dialog.h"
 #include "octave-qscintilla.h"
+#include "octave-cmd.h"
 #include "builtin-defun-decls.h"
 
 #include "marker.h" /* Only needed for typedef of "QIntList", which may be
                        typedefed elsewhere.  Could use common location. */
 
 class octave_value_list;
 
 namespace octave
@@ -173,17 +174,17 @@ namespace octave
     void remove_all_breakpoints (void);
     void find_translated_line_number (int original_linenr,
                                       int& translated_linenr, marker*&);
     void find_linenr_just_before (int linenr, int& original_linenr,
                                   int& editor_linenr);
     void report_marker_linenr (QIntList& lines, QStringList& conditions);
     void remove_position_via_debugger_linenr (int debugger_linenr);
     void remove_all_positions (void);
-    void execute_command_in_terminal_signal (const QString&);
+    void request_queue_cmd (octave_cmd *);
 
     // FIXME: The following is similar to "process_octave_code"
     // signal.  However, currently that signal is connected to
     // something that simply focuses a window and not actually
     // communicate with Octave.
     //
     // void evaluate_octave_command (const QString& command);
 
diff --git a/libgui/src/m-editor/file-editor.cc b/libgui/src/m-editor/file-editor.cc
--- a/libgui/src/m-editor/file-editor.cc
+++ b/libgui/src/m-editor/file-editor.cc
@@ -2110,20 +2110,16 @@ namespace octave
     // create the context menu of the tab bar
     tab_bar *bar = m_tab_widget->get_tab_bar ();
     QMenu *ctx_men = bar->get_context_menu ();
     ctx_men->addAction (m_close_action);
     ctx_men->addAction (m_close_all_action);
     ctx_men->addAction (m_close_others_action);
 
     // signals
-    connect (this,
-             SIGNAL (execute_command_in_terminal_signal (const QString&)),
-             main_win (), SLOT (execute_command_in_terminal (const QString&)));
-
     connect (this, SIGNAL (request_settings_dialog (const QString&)),
              main_win (),
              SLOT (process_settings_dialog_request (const QString&)));
 
     connect (m_mru_file_menu, SIGNAL (triggered (QAction *)),
              this, SLOT (request_mru_open_file (QAction *)));
 
     mru_menu_update ();
@@ -2196,16 +2192,19 @@ namespace octave
                                             const QString&, int)),
              main_win (), SLOT (handle_edit_mfile_request (const QString&,
                                                            const QString&,
                                                            const QString&, int)));
 
     connect (f, SIGNAL (set_focus_editor_signal (QWidget*)),
              this, SLOT (set_focus (QWidget*)));
 
+    connect (f, SIGNAL (request_queue_cmd (octave_cmd*)),
+             main_win (), SLOT (queue_cmd (octave_cmd*)));
+
     // Signals from the file_editor non-trivial operations
     connect (this, SIGNAL (fetab_settings_changed (const QSettings *)),
              f, SLOT (notice_settings (const QSettings *)));
 
     connect (this, SIGNAL (fetab_change_request (const QWidget*)),
              f, SLOT (change_editor_state (const QWidget*)));
 
     connect (this, SIGNAL (fetab_file_name_query (const QWidget*)),
@@ -2213,19 +2212,16 @@ namespace octave
 
     connect (this, SIGNAL (fetab_save_file (const QWidget*, const QString&,
                                             bool)),
              f, SLOT (save_file (const QWidget*, const QString&, bool)));
 
     connect (this, SIGNAL (fetab_check_modified_file (void)),
              f, SLOT (check_modified_file (void)));
 
-    connect (f, SIGNAL (execute_command_in_terminal_signal (const QString&)),
-             main_win (), SLOT (execute_command_in_terminal (const QString&)));
-
     // Signals from the file_editor trivial operations
     connect (this, SIGNAL (fetab_recover_from_exit (void)),
              f, SLOT (recover_from_exit (void)));
 
     connect (this, SIGNAL (fetab_set_directory (const QString&)),
              f, SLOT (set_current_directory (const QString&)));
 
     connect (this, SIGNAL (fetab_zoom_in (const QWidget*)),
diff --git a/libgui/src/m-editor/file-editor.h b/libgui/src/m-editor/file-editor.h
--- a/libgui/src/m-editor/file-editor.h
+++ b/libgui/src/m-editor/file-editor.h
@@ -168,17 +168,16 @@ namespace octave
     void fetab_zoom_in (const QWidget *ID);
     void fetab_zoom_out (const QWidget *ID);
     void fetab_zoom_normal (const QWidget *ID);
 
     void fetab_set_directory (const QString& dir);
     void fetab_recover_from_exit (void);
 
     void request_settings_dialog (const QString&);
-    void execute_command_in_terminal_signal (const QString&);
     void request_open_file_external (const QString& file_name, int line);
     void file_loaded_signal (void);
 
   public slots:
 
     void focus (void);
     void set_focus (QWidget *fet);
     void enable_menu_shortcuts (bool);
