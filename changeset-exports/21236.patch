# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1455043045 18000
#      Tue Feb 09 13:37:25 2016 -0500
# Node ID 5d23ea5c733ad0b41b02e11c5c1d99b1f14a766b
# Parent  20a824cd1d9e47f64a38d1181357b102ce894ada
eliminate configuration macros from lo-cutils.h

* lo-cutils.h, lo-cutils.c (octave_w32_library_search): Delete.
Don't include windows.h
* oct-shlib.cc: (octave_w32_library_search): Delete extern decl.
(octave_w32_shlib::octave_w32_shlib): Declare msg as const char*.
(octave_w32_shlib::search): Call GetProcAddress directly.

diff --git a/liboctave/util/lo-cutils.c b/liboctave/util/lo-cutils.c
--- a/liboctave/util/lo-cutils.c
+++ b/liboctave/util/lo-cutils.c
@@ -57,27 +57,16 @@ octave_strcasecmp (const char *s1, const
 }
 
 OCTAVE_API int
 octave_strncasecmp (const char *s1, const char *s2, size_t n)
 {
   return strncasecmp (s1, s2, n);
 }
 
-#ifdef HAVE_LOADLIBRARY_API
-#  include <windows.h>
-
-/* Need this since in C++ can't cast from int(*)() to void* */
-OCTAVE_API void *
-octave_w32_library_search (HINSTANCE handle, const char * name)
-{
-  return (GetProcAddress (handle, name));
-}
-#endif
-
 OCTAVE_API pid_t
 octave_waitpid (pid_t pid, int *status, int options)
 {
   return WAITPID (pid, status, options);
 }
 
 static inline void
 warn_missing_wait_macro (const char *id, int status)
diff --git a/liboctave/util/lo-cutils.h b/liboctave/util/lo-cutils.h
--- a/liboctave/util/lo-cutils.h
+++ b/liboctave/util/lo-cutils.h
@@ -20,40 +20,30 @@ along with Octave; see the file COPYING.
 
 */
 
 #if ! defined (octave_lo_cutils_h)
 #define octave_lo_cutils_h 1
 
 #include <sys/types.h>
 
-#ifdef HAVE_LOADLIBRARY_API
-#  define WIN32_LEAN_AND_MEAN 1
-#  include <windows.h>
-#endif
-
 #ifdef __cplusplus
 extern "C" {
 #endif
 
 OCTAVE_API void
 octave_qsort (void *base, size_t n, size_t size,
               int (*cmp) (const void *, const void *));
 
 OCTAVE_API int
 octave_strcasecmp (const char *s1, const char *s2);
 
 OCTAVE_API int
 octave_strncasecmp (const char *s1, const char *s2, size_t n);
 
-#ifdef HAVE_LOADLIBRARY_API
-OCTAVE_API void *
-octave_w32_library_search (HINSTANCE handle, const char *name);
-#endif
-
 OCTAVE_API pid_t
 octave_waitpid (pid_t pid, int *status, int options);
 
 OCTAVE_API int octave_wifexited (int status);
 OCTAVE_API int octave_wexitstatus (int status);
 OCTAVE_API int octave_wifsignaled (int status);
 OCTAVE_API int octave_wtermsig (int status);
 OCTAVE_API int octave_wcoredump (int status);
diff --git a/liboctave/util/oct-shlib.cc b/liboctave/util/oct-shlib.cc
--- a/liboctave/util/oct-shlib.cc
+++ b/liboctave/util/oct-shlib.cc
@@ -340,27 +340,27 @@ private:
 octave_w32_shlib::octave_w32_shlib (const std::string& f)
   : octave_shlib::shlib_rep (f), handle (0)
 {
   handle = LoadLibrary (file.c_str ());
 
   if (! handle)
     {
       DWORD lastError = GetLastError ();
-      char *msg;
+      const char *msg;
 
       switch (lastError)
         {
         case ERROR_MOD_NOT_FOUND:
         case ERROR_DLL_NOT_FOUND:
-          msg = "could not find library or dependents";
+          msg = "could not find library or dependencies";
           break;
 
         case ERROR_INVALID_DLL:
-          msg = "library or its dependents are damaged";
+          msg = "library or its dependencies are damaged";
           break;
 
         case ERROR_DLL_INIT_FAILED:
           msg = "library initialization routine failed";
           break;
 
         default:
           msg = "library open failed";
@@ -371,37 +371,32 @@ octave_w32_shlib::octave_w32_shlib (cons
 }
 
 octave_w32_shlib::~octave_w32_shlib (void)
 {
   if (handle)
     FreeLibrary (handle);
 }
 
-extern "C"
-{
-  void * octave_w32_search (HINSTANCE handle, const char * name);
-}
-
 void *
 octave_w32_shlib::search (const std::string& name,
                           octave_shlib::name_mangler mangler)
 {
   void *function = 0;
 
   if (! is_open ())
     (*current_liboctave_error_handler)
       ("shared library %s is not open", file.c_str ());
 
   std::string sym_name = name;
 
   if (mangler)
     sym_name = mangler (name);
 
-  function = octave_w32_library_search (handle, sym_name.c_str ());
+  function = reinterpret_cast <void *> (GetProcAddress (handle, sym_name.c_str ()));
 
   return function;
 }
 
 #elif defined (HAVE_DYLD_API)
 
 class
 octave_dyld_shlib : public octave_shlib::shlib_rep
