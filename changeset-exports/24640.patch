# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1516736160 18000
#      Tue Jan 23 14:36:00 2018 -0500
# Node ID 534436fd56079a4f9ad968a0ce50d3b25dcc60c5
# Parent  1c90b6d357ec9167def7f269ea8d58427e146bd3
refactor variable editor element access

* variable-editor-model.cc (variable_editor_mode::impl::size,
variable_editor_mode::impl::index, variable_editor_mode::impl::elem):
New functions.  Use them instead of accessing m_table directly and to
eliminate some repeated code.  Use rows and columns consistently.

diff --git a/libgui/src/variable-editor-model.cc b/libgui/src/variable-editor-model.cc
--- a/libgui/src/variable-editor-model.cc
+++ b/libgui/src/variable-editor-model.cc
@@ -76,136 +76,138 @@ struct variable_editor_model::impl
 
     bool m_requires_sub_editor;
 
     sub_editor_types m_editor_type;
 
     // FIXME: Other variables needed?
   };
 
-  void set (const QModelIndex& idx, const cell& dat)
-  {
-    if (idx.isValid ())
-      m_table[model_to_index (idx)] = dat;
-  }
-
-  void set (int r, int c, const cell& dat)
-  {
-    if (0 <= r && r < m_rows && 0 <= c && c <= columns ())
-      m_table[c * m_rows + r] = dat;
-  }
-
-  bool is_set (const QModelIndex& idx) const
-  {
-    return (idx.isValid ()
-            && m_table[model_to_index (idx)].m_state == cell::avail);
-  }
-
-  bool is_notavail (const QModelIndex& idx) const
-  {
-    return (idx.isValid ()
-            && m_table[model_to_index (idx)].m_state == cell::notavail);
-  }
-
-  bool is_pending (const QModelIndex& idx) const
-  {
-    return (idx.isValid ()
-            && m_table[model_to_index (idx)].m_state == cell::pending);
-  }
-
-  void pending (const QModelIndex& idx)
-  {
-    if (idx.isValid ())
-      m_table[model_to_index (idx)].m_state = cell::pending;
-  }
-
-  void notavail (int r, int c)
-  {
-    if (0 <= r && r < m_rows && 0 <= c && c <= columns ())
-      m_table[c * m_rows + r].m_state = cell::notavail;
-  }
-
-  bool requires_sub_editor (const QModelIndex& idx)
-  {
-    return (idx.isValid ()
-            && m_table[model_to_index (idx)].m_requires_sub_editor);
-  }
-
-  sub_editor_types sub_editor_type (const QModelIndex& idx)
-  {
-    return (idx.isValid ()
-            ? m_table[model_to_index (idx)].m_editor_type : sub_none);
-  }
-
-  void unset (int r, int c)
-  {
-    if (0 <= r && r < m_rows && 0 <= c && c <= columns ())
-      m_table[c * m_rows + r].m_state = cell::unset;
-  }
-
-  void clear (void)
-  {
-    for (int i = 0; i < m_table.size (); ++i)
-      m_table[i].m_state = cell::unset;
-  }
-
-  QVariant data (const QModelIndex& idx, int role) const
-  {
-    if (idx.isValid ())
-      {
-        const int i = model_to_index (idx);
-
-        switch (role)
-          {
-          case Qt::DisplayRole:
-          case Qt::EditRole:
-            return m_table[i].m_data;
-
-          case Qt::StatusTipRole:
-            return m_table[i].m_status_tip;
-
-          case Qt::ToolTipRole:
-            return m_table[i].m_tool_tip;
-
-          case Qt::BackgroundRole:
-            return m_table[i].m_background;
-          }
-      }
-
-    return QVariant ();
-  }
-
-  octave_idx_type rows (void) const { return m_rows; }
-
-  octave_idx_type columns (void) const { return m_cols; }
-
-  int model_to_index (const QModelIndex& idx) const
-  {
-    return idx.column () * m_rows + idx.row ();
-  }
-
   impl (void) = delete;
 
   impl (const QString& n, QLabel *l)
     : m_name (n.toStdString ()), m_type (),
       m_rows (0), m_cols (0), m_table (), m_label (l),
       m_validity (true), m_validtext ()
   { }
 
   impl (const impl&) = delete;
 
   impl& operator = (const impl&) = delete;
 
+  int size (void) const { return m_table.size (); }
+  int rows (void) const { return m_rows; }
+  int columns (void) const { return m_cols; }
+
+  int index (int r, int c) const { return c * m_rows + r; }
+  int index (const QModelIndex& idx) const
+  {
+    return index (idx.row (), idx.column ());
+  }
+
+  cell& elem (int i) { return m_table[i]; }
+  cell& elem (int r, int c) { return elem (index (r, c)); }
+  cell& elem (const QModelIndex& idx) { return elem (index (idx)); }
+
+  const cell& elem (int i) const { return m_table[i]; }
+  const cell& elem (int r, int c) const { return elem (index (r, c)); }
+  const cell& elem (const QModelIndex& idx) const { return elem (index (idx)); }
+
+  void set (const QModelIndex& idx, const cell& dat)
+  {
+    if (idx.isValid ())
+      elem (idx) = dat;
+  }
+
+  void set (int r, int c, const cell& dat)
+  {
+    if (0 <= r && r < rows () && 0 <= c && c <= columns ())
+      elem (r, c) = dat;
+  }
+
+  bool is_set (const QModelIndex& idx) const
+  {
+    return (idx.isValid () && elem (idx).m_state == cell::avail);
+  }
+
+  bool is_notavail (const QModelIndex& idx) const
+  {
+    return (idx.isValid () && elem (idx).m_state == cell::notavail);
+  }
+
+  bool is_pending (const QModelIndex& idx) const
+  {
+    return (idx.isValid () && elem (idx).m_state == cell::pending);
+  }
+
+  void pending (const QModelIndex& idx)
+  {
+    if (idx.isValid ())
+      elem (idx).m_state = cell::pending;
+  }
+
+  void notavail (int r, int c)
+  {
+    if (0 <= r && r < rows () && 0 <= c && c <= columns ())
+      elem (r, c).m_state = cell::notavail;
+  }
+
+  bool requires_sub_editor (const QModelIndex& idx)
+  {
+    return (idx.isValid () && elem (idx).m_requires_sub_editor);
+  }
+
+  sub_editor_types sub_editor_type (const QModelIndex& idx)
+  {
+    return (idx.isValid () ? elem (idx).m_editor_type : sub_none);
+  }
+
+  void unset (int r, int c)
+  {
+    if (0 <= r && r < rows () && 0 <= c && c <= columns ())
+      elem (r, c).m_state = cell::unset;
+  }
+
+  void clear (void)
+  {
+    for (int i = 0; i < size (); ++i)
+      elem (i).m_state = cell::unset;
+  }
+
+  QVariant data (const QModelIndex& idx, int role) const
+  {
+    if (idx.isValid ())
+      {
+        switch (role)
+          {
+          case Qt::DisplayRole:
+          case Qt::EditRole:
+            return elem (idx).m_data;
+
+          case Qt::StatusTipRole:
+            return elem (idx).m_status_tip;
+
+          case Qt::ToolTipRole:
+            return elem (idx).m_tool_tip;
+
+          case Qt::BackgroundRole:
+            return elem (idx).m_background;
+          }
+      }
+
+    return QVariant ();
+  }
+
   const std::string m_name;
 
   std::string m_type;
 
-  octave_idx_type m_rows;
-
-  octave_idx_type m_cols;
+  // Using QVector limits the size to int.
+  int m_rows;
+  int m_cols;
 
   QVector<cell> m_table;
 
   QLabel *m_label;
 
   bool m_validity;
 
   QString m_validtext;
@@ -371,19 +373,19 @@ variable_editor_model::insertRows (int r
      .toStdString ());
 
   return true;
 }
 
 bool
 variable_editor_model::removeRows (int row, int count, const QModelIndex&)
 {
-  if (row + count > m_d->m_rows)
+  if (row + count > m_d->rows ())
     {
-      qDebug () << "Tried to remove too many rows " << m_d->m_rows << " "
+      qDebug () << "Tried to remove too many rows " << m_d->rows () << " "
                 << count << " (" << row << ")";
       return false;
     }
 
   octave_link::post_event <variable_editor_model, std::string, std::string>
     (this, &variable_editor_model::eval_oct, m_d->m_name,
      QString ("%1(%2:%3, :) = []")
      .arg (QString::fromStdString (m_d->m_name))
@@ -406,19 +408,19 @@ variable_editor_model::insertColumns (in
      .toStdString ());
 
   return true;
 }
 
 bool
 variable_editor_model::removeColumns (int col, int count, const QModelIndex&)
 {
-  if (col + count > m_d->m_cols)
+  if (col + count > m_d->columns ())
     {
-      qDebug () << "Tried to remove too many cols " << m_d->m_cols << " "
+      qDebug () << "Tried to remove too many cols " << m_d->columns () << " "
                 << count << " (" << col << ")";
       return false;
     }
 
   octave_link::post_event <variable_editor_model, std::string, std::string>
     (this, &variable_editor_model::eval_oct, m_d->m_name,
      QString ("%1(:, %2:%3) = []")
      .arg (QString::fromStdString (m_d->m_name))
@@ -526,27 +528,27 @@ variable_editor_model::received_initiali
                                                  const QString& paren,
                                                  int rows, int cols)
 {
   if (! (m_d->m_validity))
     return;
 
   m_d->m_type = paren.toStdString ();
 
-  const int r = m_d->m_rows - rows;
+  const int r = m_d->rows () - rows;
   if (r > 0)
-    emit beginRemoveRows (QModelIndex (), rows, m_d->m_rows - 1);
+    emit beginRemoveRows (QModelIndex (), rows, m_d->rows () - 1);
   else if (r < 0)
-    emit beginInsertRows (QModelIndex (), m_d->m_rows, rows - 1);
+    emit beginInsertRows (QModelIndex (), m_d->rows (), rows - 1);
 
-  const int c = m_d->m_cols - cols;
+  const int c = m_d->columns () - cols;
   if (c > 0)
-    emit beginRemoveColumns (QModelIndex (), cols, m_d->m_cols - 1);
+    emit beginRemoveColumns (QModelIndex (), cols, m_d->columns () - 1);
   else if (c < 0)
-    emit beginInsertColumns (QModelIndex (), m_d->m_cols, cols - 1);
+    emit beginInsertColumns (QModelIndex (), m_d->columns (), cols - 1);
 
   m_d->m_rows = rows;
   m_d->m_cols = cols;
   m_d->m_table.clear ();
   m_d->m_table.resize (rows * cols);
 
   if (c > 0)
     emit endRemoveColumns ();
@@ -554,18 +556,18 @@ variable_editor_model::received_initiali
     emit endInsertColumns ();
 
   if (r > 0)
     emit endRemoveRows ();
   else if (r < 0)
     emit endInsertRows ();
 
   emit dataChanged (QAbstractTableModel::index (0, 0),
-                    QAbstractTableModel::index (m_d->m_rows - 1,
-                                                m_d->m_cols - 1));
+                    QAbstractTableModel::index (m_d->rows () - 1,
+                                                m_d->columns () - 1));
 
   m_d->m_label->setTextFormat (Qt::PlainText);
 
   QString description
     = (QString ("%1: %2 %3x%4")
        .arg (QString::fromStdString (m_d->m_name))
        .arg (class_name)
        .arg (rows)
@@ -700,18 +702,18 @@ variable_editor_model::init_from_oct (co
       display_invalid ();
       return;
     }
 
   // FIXME: Cell arrays?
 
   const QString class_name = QString::fromStdString (ov.class_name ());
   const QString paren = ov.iscell () ? "{" : "(";
-  const octave_idx_type rows = ov.rows ();
-  const octave_idx_type cols = ov.columns ();
+  const int rows = ov.rows ();
+  const int cols = ov.columns ();
 
   display_valid ();
 
   // FIXME: This function executes in the interpreter thread, so no
   // signals should be emitted.
 
   emit initialize_data (class_name, paren, rows, cols);
 }
