# HG changeset patch
# User jwe
# Date 1201939013 0
#      Sat Feb 02 07:56:53 2008 +0000
# Node ID 1867156fc552ec18a21e649af1266f49b09154f7
# Parent  6873fe003323ccef71606d01ce16807931f09488
[project @ 2008-02-02 07:56:53 by jwe]

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,13 @@
+2008-02-02  Shai Ayal  <shaiay@users.sourceforge.net>
+
+	* graphics.h.in (graphics_backend::find_backend): New function.
+	(class figure): Add __backend__ property and set method.
+	
 2008-02-02  John W. Eaton  <jwe@octave.org>
 
 	* help.cc (do_type): Don't print dyamically loaded function files.
 
 	* ov-fcn.h (octave_function::is_dynamically_loaded_function): Delete.
 
 2008-02-01  John W. Eaton  <jwe@octave.org>
 
diff --git a/src/graphics.h.in b/src/graphics.h.in
--- a/src/graphics.h.in
+++ b/src/graphics.h.in
@@ -1188,21 +1188,33 @@ public:
   OCTINTERP_API static graphics_backend default_backend (void);
 
   static void register_backend (const graphics_backend& b)
     { available_backends[b.get_name ()] = b; }
 
   static void unregister_backend (const std::string& name)
     { available_backends.erase (name); }
 
+  static graphics_backend find_backend (const std::string& name)
+  {
+    const_available_backends_iterator p = available_backends.find (name);
+
+    if (p != available_backends.end ())
+      return p->second;
+    else
+      return default_backend ();
+  }
+
 private:
   base_graphics_backend *rep;
 
-private:
   static std::map<std::string, graphics_backend> available_backends;
+
+  typedef std::map<std::string, graphics_backend>::iterator available_backends_iterator;
+  typedef std::map<std::string, graphics_backend>::const_iterator const_available_backends_iterator;
 };
 
 // ---------------------------------------------------------------------
 
 class base_graphics_object;
 
 class OCTINTERP_API base_properties
 {
@@ -2017,17 +2029,46 @@ public:
     graphics_backend get_backend (void) const
       {
 	if (! backend)
 	  backend = graphics_backend::default_backend ();
 
 	return backend;
       }
 
-    void set_backend (const graphics_backend& b) { backend = b; }
+    void set_backend (const graphics_backend& b) 
+    { 
+      close (false);
+      backend = b; 
+      __backend__ = b.get_name ();
+      mark_modified ();
+    }
+
+    void set___backend__ (const octave_value& val)
+    {
+      if (! error_state)
+	{
+	  if (val.is_string ())
+	    {
+	      std::string nm = val.string_value ();
+	      graphics_backend b = graphics_backend::find_backend (nm);
+	      if (b.get_name () != nm)
+		{
+		  error ("figure::__backend__ : illegal backend");
+		}
+	      else
+		{
+		  set_backend (b);
+		  mark_modified ();
+		}
+	    }
+	  else
+	    error ("__backend__ must be a string");
+	}
+    }
 
     // See the genprops.awk script for an explanation of the
     // properties declarations.
 
     BEGIN_PROPERTIES(figure)
       any_property __plot_stream__ h , Matrix ()
       bool_property __enhanced__ h , "on"
       radio_property nextplot , "new|{add}|replace_children|replace"
@@ -2073,16 +2114,17 @@ public:
       callback_property windowbuttonwheelfcn , Matrix ()
       radio_property windowstyle , "{normal}|modal|docked"
       string_property wvisual , ""
       radio_property wvisualmode , "{auto}|manual"
       string_property xdisplay , ""
       string_property xvisual , ""
       radio_property xvisualmode , "{auto}|manual"
       callback_property buttondownfcn , Matrix ()
+      string_property __backend__ s , "gnuplot"
     END_PROPERTIES
     
   protected:
     void init (void)
       {
         colormap.add_constraint (dim_vector (-1, 3));
 	alphamap.add_constraint (dim_vector (-1, 1));
 	paperposition.add_constraint (dim_vector (1, 4));
