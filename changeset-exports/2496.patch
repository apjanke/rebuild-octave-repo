# HG changeset patch
# User jwe
# Date 847682232 0
#      Mon Nov 11 03:17:12 1996 +0000
# Node ID 9823f8bfd1a5bdef91c59d2b4207d6a5bf4cb013
# Parent  29cd3862a9dc06aade1200eca8108f1e55d87ace
[project @ 1996-11-11 03:17:10 by jwe]

diff --git a/NEWS b/NEWS
--- a/NEWS
+++ b/NEWS
@@ -179,16 +179,18 @@ Summary of changes for version 2.0:
       readdir  -- returns names of files in directory as array of strings
       mkdir    -- create a directory
       rmdir    -- remove a directory
       rename   -- rename a file
       unlink   -- delete a file
       umask    -- set permission mask for file creation
       stat     -- get information about a file
       lstat    -- get information about a symbolic link
+      glob     -- perform filename globbing
+      fnmatch  -- match strings with filename globbing patterns
       more     -- turn the pager on or off
       gammaln  -- alias for lgamma
 
   * New audio functions from Andreas Weingessel
     <Andreas.Weingessel@ci.tuwien.ac.at>.
 
       lin2mu     -- linear to mu-law encoding
       loadaudio  -- load an audio file to a vector
diff --git a/doc/interpreter/system.texi b/doc/interpreter/system.texi
--- a/doc/interpreter/system.texi
+++ b/doc/interpreter/system.texi
@@ -354,16 +354,22 @@ link, @code{lstat} is equivalent to @cod
 
 @deftypefn {Built-in Function} {} glob (@var{pattern})
 Given an array of strings in @var{pattern}, return the list of file
 names that any of them, or an empty string if no patterns match.  Tilde
 expansion is performed on each of the patterns before looking for
 matching file names.
 @end deftypefn
 
+@deftypefn {Built-in Function} {} fnmatch (@var{pattern}, @var{string})
+Return 1 or zero for each element of @var{string} that matches any of
+the elements of the string array @var{pattern}, using the rules of
+filename pattern matching.
+@end deftypefn
+
 @node Interacting with the OS, Password Database Functions, Filesystem Utilities, System Utilities
 @section Interacting with the OS
 
 @deftypefn {Built-in Function} {} fork ()
 Create a copy of the current process.
 @end deftypefn
 
 @deftypefn {Built-in Function} {} exec (@var{file}, @var{args})
diff --git a/liboctave/oct-glob.cc b/liboctave/oct-glob.cc
--- a/liboctave/oct-glob.cc
+++ b/liboctave/oct-glob.cc
@@ -31,49 +31,38 @@ Software Foundation, 59 Temple Place - S
 
 #include <string>
 
 #include "file-ops.h"
 #include "oct-glob.h"
 #include "str-vec.h"
 
 bool
-glob_match::match (const string& s, match_type mt)
+glob_match::match (const string& s)
 {
   int npat = pat.length ();
 
   const char *str = s.c_str ();
 
-  if (mt == all)
-    {
-      for (int i = 0; i < npat; i++)
-	if (fnmatch (pat(i).c_str (), str, flags) == FNM_NOMATCH)
-	  return false;
-
+  for (int i = 0; i < npat; i++)
+    if (fnmatch (pat(i).c_str (), str, flags) != FNM_NOMATCH)
       return true;
-    }
-  else
-    {
-      for (int i = 0; i < npat; i++)
-	if (fnmatch (pat(i).c_str (), str, flags) != FNM_NOMATCH)
-	  return true;
 
-      return false;
-    }
+  return false;
 }
 
 Array<bool>
-glob_match::match (const string_vector& s, match_type mt)
+glob_match::match (const string_vector& s)
 {
   int n = s.length ();
 
   Array<bool> retval (n);
 
   for (int i = 0; i < n; i++)
-    retval(i) = match (s[i], mt);
+    retval(i) = match (s[i]);
 
   return retval;
 }
 
 static bool
 single_match_exists (const string& file)
 {
   file_stat s (file);
diff --git a/liboctave/oct-glob.h b/liboctave/oct-glob.h
--- a/liboctave/oct-glob.h
+++ b/liboctave/oct-glob.h
@@ -35,22 +35,16 @@ public:
 
   enum opts
     {
       pathname = 1,  // No wildcard can ever match `/'.
       noescape = 2,  // Backslashes don't quote special chars.
       period = 4     // Leading `.' is matched only explicitly.
    };
 
-  enum match_type
-    {
-      any = 2,  // Match any pattern.
-      all = 2   // Must match all patterns.
-    };
-
   glob_match (const string& p = string (),
 	      unsigned int f = pathname|noescape|period)
     : pat (p), flags (f) { }
 
   glob_match (const string_vector& p = string_vector (),
 	      unsigned int f = pathname|noescape|period)
     : pat (p), flags (f) { }
 
@@ -67,19 +61,19 @@ public:
     }
 
   ~glob_match (void) { }
 
   void set_pattern (const string& p) { pat = p; }
 
   void set_pattern (const string_vector& p) { pat = p; }
 
-  bool match (const string&, match_type mt = any);
+  bool match (const string&);
 
-  Array<bool> match (const string_vector&, match_type mt = any);
+  Array<bool> match (const string_vector&);
 
   string_vector glob (void);
 
 private:
 
   // Globbing pattern(s).
   string_vector pat;
 
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,10 +1,12 @@
 Sun Nov 10 16:58:07 1996  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
+	* dirfns.cc (Ffnmatch): New function.
+
 	* octave.cc (intern_argv): Use new string_vector constructor.
 
 	* ov-str-mat.cc (octave_char_matrix_str::all_strings): Have
 	charMatrix::row_as_string() strip trailing whitespace.
 
 	* dirfns.cc (Fglob): new function.
 
 	* sysdep.cc (oct_tilde_expand): Provide version that works on
diff --git a/src/dirfns.cc b/src/dirfns.cc
--- a/src/dirfns.cc
+++ b/src/dirfns.cc
@@ -583,19 +583,19 @@ otherwise prints an error message and re
     retval (0) = (double) status;
 
   return retval;
 }
 
 DEFUN (glob, args, ,
   "glob (PATTERN)\n\
 \n\
-Given an array of strings in PATTERN, return the list of file names
-that any of them, or an empty string if no patterns match.  Tilde
-expansion is performed on each of the patterns before looking for
+Given an array of strings in PATTERN, return the list of file names\n\
+that any of them, or an empty string if no patterns match.  Tilde\n\
+expansion is performed on each of the patterns before looking for\n\
 matching file names.")
 {
   octave_value retval;
 
   if (args.length () == 1)
     {
       string_vector pat = args(0).all_strings ();
 
@@ -614,16 +614,54 @@ matching file names.")
 	}
     }
   else
     print_usage ("glob");
 
   return retval;
 }
 
+DEFUN (fnmatch, args, ,
+  "fnmatch (PATTERN, STRING)\n\
+\n\
+Return 1 or zero for each element of STRING that matches any of the\n\
+elements of the string array PATTERN, using the rules of filename\n\
+pattern matching.")
+{
+  octave_value retval;
+
+  if (args.length () == 2)
+    {
+      string_vector pat = args(0).all_strings ();
+      string_vector str = args(1).all_strings ();
+
+      if (error_state)
+	gripe_wrong_type_arg ("fnmatch", args(0));
+      else
+	{
+	  glob_match pattern (oct_tilde_expand (pat));
+
+	  Array<bool> tmp = pattern.match (str);
+
+	  int n = tmp.length ();
+
+	  ColumnVector result (n);
+
+	  for (int i = 0; i < n; i++)
+	    result(i) = tmp(i);
+
+	  retval = octave_value (result, true);
+	}
+    }
+  else
+    print_usage ("fnmatch");
+
+  return retval;
+}
+
 static int
 pwd (void)
 {
   int status = 0;
 
   string s = builtin_string_variable ("PWD");
 
   if (s.empty ())
