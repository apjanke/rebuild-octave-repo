# HG changeset patch
# User Rik <rik@octave.org>
# Date 1513856319 28800
#      Thu Dec 21 03:38:39 2017 -0800
# Branch stable
# Node ID f8bbaacefc33d152d9ceb7725aa6d2468deba7f3
# Parent  09c81c841b6f708dcf442320565ea650b9330193
doc: Fix various inconsistencies in manual (bug #52712).

* container.txi: Correct size of structure array in example.

* var.txi: Fix example code for who which used non-existent option
"-variables".

* data.cc (Fcomplex): Use common syntax in docstring that a complex number is
"a+bi".

* error.cc (Fwarning), qz.cc (Fqz), setfield.m: Use 3-input form of @xref
to generate a correct reference in PDF version of manual.

diff --git a/doc/interpreter/container.txi b/doc/interpreter/container.txi
--- a/doc/interpreter/container.txi
+++ b/doc/interpreter/container.txi
@@ -252,17 +252,17 @@ fields.  An example of the creation of a
 x(1).a = "string1";
 x(2).a = "string2";
 x(1).b = 1;
 x(2).b = 2;
 @end group
 @end example
 
 @noindent
-which creates a 2-by-1 structure array with two fields.  Another way
+which creates a 1-by-2 structure array with two fields.  Another way
 to create a structure array is with the @code{struct} function
 (@pxref{Creating Structures}).  As previously, to print the value of
 the structure array, you can type its name:
 
 @example
 @group
 x
      @result{} x =
diff --git a/doc/interpreter/var.txi b/doc/interpreter/var.txi
--- a/doc/interpreter/var.txi
+++ b/doc/interpreter/var.txi
@@ -307,20 +307,20 @@ cleared, you should use the @code{mlock}
 When creating simple one-shot programs it can be very convenient to
 see which variables are available at the prompt.  The function @code{who}
 and its siblings @code{whos} and @code{whos_line_format} will show
 different information about what is in memory, as the following shows.
 
 @example
 @group
 str = "A random string";
-who -variables
-     @print{} *** local user variables:
-     @print{}
-     @print{} __nargin__  str
+who
+ @print{} Variables in the current scope:
+ @print{}
+ @print{} ans  str
 @end group
 @end example
 
 @DOCSTRING(who)
 
 @DOCSTRING(whos)
 
 @DOCSTRING(whos_line_format)
diff --git a/libinterp/corefcn/data.cc b/libinterp/corefcn/data.cc
--- a/libinterp/corefcn/data.cc
+++ b/libinterp/corefcn/data.cc
@@ -3355,19 +3355,19 @@ DEFUN (complex, args, ,
 @deftypefn  {} {} complex (@var{x})
 @deftypefnx {} {} complex (@var{re}, @var{im})
 Return a complex value from real arguments.
 
 With 1 real argument @var{x}, return the complex result
 @w{@code{@var{x} + 0i}}.
 
 With 2 real arguments, return the complex result
-@w{@code{@var{re} + @var{im}}}.
+@w{@code{@var{re} + @var{im}i}}.
 @code{complex} can often be more convenient than expressions such as
-@w{@code{a + i*b}}.
+@w{@code{a + b*i}}.
 For example:
 
 @example
 @group
 complex ([1, 2], [3, 4])
   @result{} [ 1 + 3i   2 + 4i ]
 @end group
 @end example
diff --git a/libinterp/corefcn/error.cc b/libinterp/corefcn/error.cc
--- a/libinterp/corefcn/error.cc
+++ b/libinterp/corefcn/error.cc
@@ -1434,17 +1434,17 @@ on the @code{stderr} stream.  The messag
 string @samp{warning: }.
 You should use this function when you want to notify the user
 of an unusual condition, but only when it makes sense for your program
 to go on.
 
 The optional message identifier allows users to enable or disable
 warnings tagged by @var{id}.  A message identifier is of the form
 "NAMESPACE:WARNING-NAME".  Octave's own warnings use the
-@qcode{"Octave"} namespace (@pxref{XREFwarning_ids}).  The special
+@qcode{"Octave"} namespace (@pxref{XREFwarning_ids,,warning_ids}).  The special
 identifier @qcode{"all"} may be used to set the state of all warnings.
 
 If the first argument is @qcode{"on"} or @qcode{"off"},
 set the state of a particular warning using the identifier @var{id}.  If the
 first argument is @qcode{"query"}, query the state of this warning
 instead.  If the identifier is omitted, a value of @qcode{"all"} is
 assumed.  If you set the state of a warning to @qcode{"error"}, the
 warning named by @var{id} is handled as if it were an error instead.  So,
diff --git a/libinterp/corefcn/qz.cc b/libinterp/corefcn/qz.cc
--- a/libinterp/corefcn/qz.cc
+++ b/libinterp/corefcn/qz.cc
@@ -226,17 +226,17 @@ half-plane
 @item @qcode{"+"}
 non-negative real part: leading block has all eigenvalues in the closed right
 half-plane
 @end table
 @end table
 @end enumerate
 
 Note: @code{qz} performs permutation balancing, but not scaling
-(@pxref{XREFbalance}), which may be lead to less accurate results than
+(@pxref{XREFbalance,,balance}), which may be lead to less accurate results than
 @code{eig}.  The order of output arguments was selected for compatibility with
 @sc{matlab}.
 @seealso{eig, balance, lu, chol, hess, qr, qzhess, schur, svd}
 @end deftypefn */)
 {
   volatile int nargin = args.length ();
 
 #if defined (DEBUG)
diff --git a/scripts/miscellaneous/setfield.m b/scripts/miscellaneous/setfield.m
--- a/scripts/miscellaneous/setfield.m
+++ b/scripts/miscellaneous/setfield.m
@@ -41,17 +41,17 @@
 ## @end example
 ##
 ## @noindent
 ## Note that ordinary structure syntax @code{@var{s}.foo bar = 42} cannot be
 ## used here, as the field name is not a valid Octave identifier because of
 ## the space character.  Using arbitrary strings for field names is
 ## incompatible with @sc{matlab}, and this usage will emit a warning if the
 ## warning ID @code{Octave:language-extension} is enabled.
-## @xref{XREFwarning_ids}.
+## @xref{XREFwarning_ids,,warning_ids}.
 ##
 ## With the second calling form, set a field of a structure array.  The
 ## input @var{sidx} selects an element of the structure array, @var{field}
 ## specifies the field name of the selected element, and @var{fidx} selects
 ## which element of the field (in the case of an array or cell array).
 ## The @var{sidx}, @var{field}, and @var{fidx} inputs can be repeated to
 ## address nested structure array elements.  The structure array index and
 ## field element index must be cell arrays while the field name must be a
