# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1485557264 18000
#      Fri Jan 27 17:47:44 2017 -0500
# Node ID 3f72b4b9b50f74554e6ac9cdcaea592b58305478
# Parent  1a53f9d42ec1ff77e429a7a319e357354914c142
* examples/code/embedded.cc: Update.

diff --git a/examples/code/embedded.cc b/examples/code/embedded.cc
--- a/examples/code/embedded.cc
+++ b/examples/code/embedded.cc
@@ -6,30 +6,50 @@
 
 int
 main (void)
 {
   string_vector argv (2);
   argv(0) = "embedded";
   argv(1) = "-q";
 
-  octave_main (2, argv.c_str_vec (), 1);
+  octave::embedded_application app (2, argv.c_str_vec ());
+
+  int status = app.execute ();
 
-  octave_idx_type n = 2;
-  octave_value_list in;
+  if (status != 0)
+    {
+      std::cerr << "creating embedded Octave interpreter failed!" << std::endl;
+      return status;
+    }
 
-  for (octave_idx_type i = 0; i < n; i++)
-    in(i) = octave_value (5 * (i + 2));
+  try
+    {
+      octave_idx_type n = 2;
+      octave_value_list in;
 
-  octave_value_list out = feval ("gcd", in, 1);
+      for (octave_idx_type i = 0; i < n; i++)
+        in(i) = octave_value (5 * (i + 2));
+
+      octave_value_list out = octave::feval ("gcd", in, 1);
 
-  if (out.length () > 0)
-    std::cout << "GCD of ["
-              << in(0).int_value ()
-              << ", "
-              << in(1).int_value ()
-              << "] is " << out(0).int_value ()
-              << std::endl;
-  else
-    std::cout << "invalid\n";
+      if (out.length () > 0)
+        std::cout << "GCD of ["
+                  << in(0).int_value ()
+                  << ", "
+                  << in(1).int_value ()
+                  << "] is " << out(0).int_value ()
+                  << std::endl;
+      else
+        std::cout << "invalid\n";
+    }
+  catch (const octave::exit_exception& ex)
+    {
+      std::cerr << "Octave evaluator exited with status = "
+                << ex.exit_status () << std::endl;
+    }
+  catch (const octave::execution_exception&)
+    {
+      std::cerr << "error encountered in Octave evaluator!" << std::endl;
+    }
 
-  clean_up_and_exit (0);
+  return 0;
 }
