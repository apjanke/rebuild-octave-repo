# HG changeset patch
# User Rik <rik@octave.org>
# Date 1447891961 28800
#      Wed Nov 18 16:12:41 2015 -0800
# Node ID 7b6d8c19dab09416a9748c7d2973c1ac002b7e77
# Parent  2469d78a1d8b76cf56bfa36ec2528bef7ccd7d89
Cuddle increment (++) and decrement (--) operators with variable in question.

* help.cc, oct-stream.cc, Array-util.cc, oct-norm.cc, fsolve.m, fzero.m,
annotation.m, rectangle.m, __gnuplot_draw_axes__.m, struct2hdl.m:
Cuddle increment (++) and decrement (--) operators with variable in question.

diff --git a/libinterp/corefcn/help.cc b/libinterp/corefcn/help.cc
--- a/libinterp/corefcn/help.cc
+++ b/libinterp/corefcn/help.cc
@@ -778,17 +778,17 @@ endwhile\n\
 };
 
 // Return a copy of the operator or keyword names.
 static string_vector
 names (const map_type& lst)
 {
   string_vector retval (lst.size ());
   int j = 0;
-  for (map_iter iter = lst.begin (); iter != lst.end (); iter ++)
+  for (map_iter iter = lst.begin (); iter != lst.end (); iter++)
     retval[j++] = iter->first;
   return retval;
 }
 
 const static map_type operators_map (operators, operators + size (operators));
 const static map_type keywords_map (keywords, keywords + size (keywords));
 const static string_vector keyword_names = names (keywords_map);
 
@@ -1336,17 +1336,17 @@ file_is_in_dir (const std::string filena
       const int dir_len = dir.size ();
       const int filename_len = filename.size ();
       const int max_allowed_seps = file_ops::is_dir_sep (dir[dir_len-1]) ? 0
                                                                          : 1;
 
       int num_seps = 0;
       for (int i = dir_len; i < filename_len; i++)
         if (file_ops::is_dir_sep (filename[i]))
-          num_seps ++;
+          num_seps++;
 
       return (num_seps <= max_allowed_seps);
     }
   else
     return false;
 }
 
 // Return a cell array of strings containing the names of all
diff --git a/libinterp/corefcn/oct-stream.cc b/libinterp/corefcn/oct-stream.cc
--- a/libinterp/corefcn/oct-stream.cc
+++ b/libinterp/corefcn/oct-stream.cc
@@ -3494,17 +3494,17 @@ octave_stream::read (const Array<double>
 
               if (read_to_eof)
                 {
                   if (nc < 0)
                     {
                       nc = count / nr;
 
                       if (count % nr != 0)
-                        nc ++;
+                        nc++;
                     }
                   else
                     nr = count;
                 }
               else if (count == 0)
                 {
                   nr = 0;
                   nc = 0;
diff --git a/liboctave/array/Array-util.cc b/liboctave/array/Array-util.cc
--- a/liboctave/array/Array-util.cc
+++ b/liboctave/array/Array-util.cc
@@ -119,17 +119,17 @@ is_scalar (const dim_vector& dim)
   int n = dim.length ();
 
   if (n == 0)
     {
       retval = false;
     }
   else
     {
-      for (int i = 0; i < n; i ++)
+      for (int i = 0; i < n; i++)
         {
           if (dim(i) != 1)
             {
               retval = false;
 
               break;
             }
         }
@@ -142,17 +142,17 @@ is_vector (const dim_vector& dim)
 {
   int m = 0;
   int n = dim.length ();
 
   if (n == 0)
     m = 2;
   else
     {
-      for (int i = 0; i < n; i ++)
+      for (int i = 0; i < n; i++)
         if (dim(i) > 1)
           m++;
         else if (dim(i) < 1)
           m += 2;
     }
 
   return (m < 2);
 }
diff --git a/liboctave/numeric/oct-norm.cc b/liboctave/numeric/oct-norm.cc
--- a/liboctave/numeric/oct-norm.cc
+++ b/liboctave/numeric/oct-norm.cc
@@ -454,17 +454,17 @@ R higham (const MatrixT& m, R p, R tol, 
       z = z * m;
 
       if (iter > 0 && (vector_norm (z, q) <= gamma
                        || (gamma - gamma1) <= tol*gamma))
         break;
 
       z = z.hermitian ();
       x = dual_p (z, q, p);
-      iter ++;
+      iter++;
     }
 
   return gamma;
 }
 
 // derive column vector and SVD types
 
 static const char *p_less1_gripe = "xnorm: p must be at least 1";
diff --git a/scripts/optimization/fsolve.m b/scripts/optimization/fsolve.m
--- a/scripts/optimization/fsolve.m
+++ b/scripts/optimization/fsolve.m
@@ -231,17 +231,17 @@ function [x, fvec, info, output, fjac] =
     ## Calculate function value and Jacobian (possibly via FD).
     if (has_jac)
       [fvec, fjac] = fcn (reshape (x, xsiz));
       ## If the Jacobian is sparse, disable Broyden updating.
       if (issparse (fjac))
         updating = false;
       endif
       fvec = fvec(:);
-      nfev ++;
+      nfev++;
     else
       fjac = __fdjac__ (fcn, reshape (x, xsiz), fvec, typicalx, cdif);
       nfev += (1 + cdif) * length (x);
     endif
 
     ## For square and overdetermined systems, we update a QR
     ## factorization of the Jacobian to avoid solving a full system in each
     ## step. In this case, we pass a triangular matrix to __dogleg__.
@@ -306,17 +306,17 @@ function [x, fvec, info, output, fjac] =
 
       sn = norm (dg .* s);
       if (niter == 1)
         delta = min (delta, sn);
       endif
 
       fvec1 = fcn (reshape (x + s, xsiz)) (:);
       fn1 = norm (fvec1);
-      nfev ++;
+      nfev++;
 
       if (fn1 < fn)
         ## Scaled actual reduction.
         actred = 1 - (fn1/fn)^2;
       else
         actred = -1;
       endif
 
@@ -328,46 +328,46 @@ function [x, fvec, info, output, fjac] =
       else
         prered = 0;
         ratio = 0;
       endif
 
       ## Update delta.
       if (ratio < min (max (0.1, 0.8*lastratio), 0.9))
         nsuc = 0;
-        nfail ++;
+        nfail++;
         delta *= decfac;
         decfac ^= 1.4142;
         if (delta <= 1e1*macheps*xn)
           ## Trust region became uselessly small.
           info = -3;
           break;
         endif
       else
         lastratio = ratio;
         decfac = 0.5;
         nfail = 0;
-        nsuc ++;
+        nsuc++;
         if (abs (1-ratio) <= 0.1)
           delta = 1.4142*sn;
         elseif (ratio >= 0.5 || nsuc > 1)
           delta = max (delta, 1.4142*sn);
         endif
       endif
 
       if (ratio >= 1e-4)
         ## Successful iteration.
         x += s;
         xn = norm (dg .* x);
         fvec = fvec1;
         fn = fn1;
-        nsuciter ++;
+        nsuciter++;
       endif
 
-      niter ++;
+      niter++;
 
       ## FIXME: should outputfcn be only called after a successful iteration?
       if (! isempty (outfcn))
         optimvalues.iter = niter;
         optimvalues.funccount = nfev;
         optimvalues.fval = fn;
         optimvalues.searchdirection = s;
         state = 'iter';
diff --git a/scripts/optimization/fzero.m b/scripts/optimization/fzero.m
--- a/scripts/optimization/fzero.m
+++ b/scripts/optimization/fzero.m
@@ -271,17 +271,17 @@ function [x, fval, info, output] = fzero
       c = (a + b)/2;
     else
       c = max (a + delta, min (b - delta, c));
     endif
 
     ## Calculate new point.
     x = c;
     fval = fc = fun (c);
-    niter ++; nfev ++;
+    niter++; nfev++;
 
     ## Modification 2: skip inverse cubic interpolation if
     ## nonmonotonicity is detected.
     if (sign (fc - fa) * sign (fc - fb) >= 0)
       ## The new point broke monotonicity.
       ## Disable inverse cubic.
       fe = fc;
     else
diff --git a/scripts/plot/appearance/annotation.m b/scripts/plot/appearance/annotation.m
--- a/scripts/plot/appearance/annotation.m
+++ b/scripts/plot/appearance/annotation.m
@@ -156,26 +156,26 @@ function varargout = annotation (varargi
     print_usage ();
   endif
 
 
   ## Parent figure
   if (isfigure (varargin{1}))
     hf = varargin{1};
     varargin = varargin(2:end);
-    nargin --;
+    nargin--;
   endif
 
   ## Annotation type
   types = {"line", "arrow", "doublearrow", "textarrow", ...
            "textbox", "ellipse", "rectangle"};
   if (ischar (varargin{1}))
     objtype = varargin{1};
     varargin(1) = [];
-    nargin --;
+    nargin--;
   else
     print_usage ();
   endif
 
   switch (objtype)
     case types(1:4)
 
       if (nargin == 0)
diff --git a/scripts/plot/draw/rectangle.m b/scripts/plot/draw/rectangle.m
--- a/scripts/plot/draw/rectangle.m
+++ b/scripts/plot/draw/rectangle.m
@@ -114,20 +114,20 @@ function hg = __rectangle__ (hax, vararg
         varargin(iarg:iarg+1) = [];
       elseif (strcmpi (arg, "facecolor"))
         fc = varargin{iarg+1};
         varargin(iarg:iarg+1) = [];
       elseif (strcmpi (arg, "parent"))
         parent = varargin{iarg+1};
         varargin(iarg:iarg+1) = [];
       else
-        iarg ++;
+        iarg++;
       endif
     else
-      iarg ++;
+      iarg++;
     endif
   endwhile
 
   if (numel (curv2) == 1)
     [a, ai] = min (pos(3:4));
     [b, bi] = max (pos(3:4));
     if (ai < bi)
       curv = [curv2, curv2 .* a ./ b];
diff --git a/scripts/plot/util/private/__gnuplot_draw_axes__.m b/scripts/plot/util/private/__gnuplot_draw_axes__.m
--- a/scripts/plot/util/private/__gnuplot_draw_axes__.m
+++ b/scripts/plot/util/private/__gnuplot_draw_axes__.m
@@ -959,17 +959,17 @@ function __gnuplot_draw_axes__ (h, plot_
                                         style, lw, pt2, lt, ps,
                                         colorspec);
              else
                facesame = false;
                if (! isempty (style))
                  tmpwith{sidx} = sprintf ("with %s %s %s %s",
                                           style, lw, lt,
                                           colorspec);
-                 sidx ++;
+                 sidx++;
                endif
                if (isnumeric (obj.markerfacecolor) && ! mono)
                  colorspec = sprintf ("lc rgb \"#%02x%02x%02x\"",
                                       round (255*obj.markerfacecolor));
                endif
                style = "points";
                if (isfield (obj, "markersize"))
                  if (length (mdat) == nc)
@@ -1014,17 +1014,17 @@ function __gnuplot_draw_axes__ (h, plot_
                endif
              else
                if (! isempty (style))
                  if (length (tmpwith) < sidx || isempty (tmpwith{sidx}))
                    tmpwith{sidx} = sprintf ("with %s %s %s %s",
                                             style, lw, lt,
                                             colorspec);
                  endif
-                 sidx ++;
+                 sidx++;
                endif
 
                if (! isempty (pt))
                  if (! mono)
                    if (strcmp (obj.markeredgecolor, "auto"))
                      colorspec = sprintf ("lc rgb \"#%02x%02x%02x\"",
                                           round (255*color));
                    elseif (isnumeric (obj.markeredgecolor) && ! mono)
@@ -1874,18 +1874,18 @@ function style = do_linestyle_command (o
         endif
       else
         facesame = false;
         if (! found_style)
           fputs (plot_stream, " default");
         endif
         fputs (plot_stream, ";\n");
         if (! isempty (style{sidx}))
-          sidx ++;
-          idx ++;
+          sidx++;
+          idx++;
         else
           fputs (plot_stream, ";\n");
         endif
         fprintf (plot_stream, "set style line %d default;\n", idx);
         fprintf (plot_stream, "set style line %d", idx);
         if (isnumeric (obj.markerfacecolor) && ! mono)
           fprintf (plot_stream, " linecolor rgb \"#%02x%02x%02x\"",
                    round (255*obj.markerfacecolor));
@@ -1917,18 +1917,18 @@ function style = do_linestyle_command (o
           endif
         endif
       else
         if (! found_style)
           fputs (plot_stream, " default");
         endif
         fputs (plot_stream, ";\n");
         if (! isempty (style{sidx}))
-          sidx ++;
-          idx ++;
+          sidx++;
+          idx++;
         else
           fputs (plot_stream, ";\n");
         endif
         fprintf (plot_stream, "set style line %d default;\n", idx);
         fprintf (plot_stream, "set style line %d", idx);
         if (! mono)
           if (strcmp (obj.markeredgecolor, "auto"))
             fprintf (plot_stream, " linecolor rgb \"#%02x%02x%02x\"",
@@ -2472,32 +2472,32 @@ function str = __tex2enhanced__ (str, fn
                      str(s(i)+p:s(i)+p+l1), str(s(i+1)+p+l2+1:end)];
             endif
           else
             ## Have to swap sub/super-script to get shortest first.
             str = [str(1:s(i)+p-1), "@", str(s(i+1)+p:s(i+1)+p+1), ...
                    str(s(i)+p:s(i)+p+l1), str(s(i+1)+p+2:end)];
           endif
           i += 2;
-          p ++;
+          p++;
         else
           i++;
         endif
       else
         if (s(i+1) == s(i) + 2)
           ## Shortest already first!
           str = [str(1:s(i)+p-1) "@" str(s(i)+p:end)];
-          p ++;
+          p++;
           i += 2;
         else
-          i ++;
+          i++;
         endif
       endif
     else
-      i ++;
+      i++;
     endif
   endwhile
 
 endfunction
 
 function l = length_string (s)
   l = length (s) - length (strfind (s,'{')) - length (strfind (s,'}'));
   m = regexp (s, '/([\w-]+|[\w-]+=\d+)', 'matches');
diff --git a/scripts/plot/util/struct2hdl.m b/scripts/plot/util/struct2hdl.m
--- a/scripts/plot/util/struct2hdl.m
+++ b/scripts/plot/util/struct2hdl.m
@@ -602,17 +602,17 @@ function setprops (s, h, p, hilev)
             ii = 1;
             while (ii <= nnew)
               try
                 set (hnew (ii), "displayname", ...
                      s.children(ii).properties.displayname);
               catch
                 sprintf ("struct2hdl: couldn't set hggroup children #%d props.", ii);
               end_try_catch
-              ii ++;
+              ii++;
             endwhile
 
           else
             error ("struct2hdl: non-conformant number of children in hgggroup");
           endif
         endif
       endif
     endif
