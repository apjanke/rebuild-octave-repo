# HG changeset patch
# User Rik <rik@octave.org>
# Date 1452996875 28800
#      Sat Jan 16 18:14:35 2016 -0800
# Branch stable
# Node ID 323e92c4589f7a47d67033e689e61dfa510cf911
# Parent  8fdf1f991a32ae184561187d113e104d17897f02
fzero.m: Correctly choose tolerance (eps) based on class of fun and X0 (bug #46658).

* fzero.m: Check whether X0 or the result of the evaluation of the function fun
results in a variable of class "single".  Use an eps which matches X0 or the
function evaluation.

diff --git a/scripts/optimization/fzero.m b/scripts/optimization/fzero.m
--- a/scripts/optimization/fzero.m
+++ b/scripts/optimization/fzero.m
@@ -132,17 +132,16 @@ function [x, fval, info, output] = fzero
   endif
 
   ## The default exit flag if exceeded number of iterations.
   info = 0;
   niter = 0;
   nfev = 0;
 
   x = fval = a = fa = b = fb = NaN;
-  eps = eps (class (x0));
 
   ## Prepare...
   a = x0(1);
   fa = fun (a);
   nfev = 1;
   if (length (x0) > 1)
     b = x0(2);
     fb = fun (b);
@@ -189,24 +188,30 @@ function [x, fval, info, output] = fzero
   itype = 1;
 
   if (abs (fa) < abs (fb))
     u = a; fu = fa;
   else
     u = b; fu = fb;
   endif
 
+  if (isa (x0, "single") || isa (fa, "single"))
+    macheps = eps ("single");
+  else
+    macheps = eps ("double");
+  endif
+
   d = e = u;
   fd = fe = fu;
   mba = mu*(b - a);
   while (niter < maxiter && nfev < maxfev)
     switch (itype)
       case 1
         ## The initial test.
-        if (b - a <= 2*(2 * abs (u) * eps + tolx))
+        if (b - a <= 2*(2 * abs (u) * macheps + tolx))
           x = u; fval = fu;
           info = 1;
           break;
         endif
         if (abs (fa) <= 1e3*abs (fb) && abs (fb) <= 1e3*abs (fa))
           ## Secant step.
           c = u - (a - b) / (fa - fb) * fu;
         else
@@ -261,17 +266,17 @@ function [x, fval, info, output] = fzero
         itype = 5;
       case 5
         ## Bisection step.
         c = 0.5 * (b + a);
         itype = 2;
     endswitch
 
     ## Don't let c come too close to a or b.
-    delta = 2*0.7*(2 * abs (u) * eps + tolx);
+    delta = 2*0.7*(2 * abs (u) * macheps + tolx);
     if ((b - a) <= 2*delta)
       c = (a + b)/2;
     else
       c = max (a + delta, min (b - delta, c));
     endif
 
     ## Calculate new point.
     x = c;
@@ -315,34 +320,34 @@ function [x, fval, info, output] = fzero
       endif
     endif
 
     if (abs (fa) < abs (fb))
       u = a; fu = fa;
     else
       u = b; fu = fb;
     endif
-    if (b - a <= 2*(2 * abs (u) * eps + tolx))
+    if (b - a <= 2*(2 * abs (u) * macheps + tolx))
       info = 1;
       break;
     endif
 
     ## Skip bisection step if successful reduction.
     if (itype == 5 && (b - a) <= mba)
       itype = 2;
     endif
     if (itype == 2)
       mba = mu * (b - a);
     endif
   endwhile
 
   ## Check solution for a singularity by examining slope
   if (info == 1)
     if ((b - a) != 0
-        && abs ((fb - fa)/(b - a) / slope0) > max (1e6, 0.5/(eps+tolx)))
+        && abs ((fb - fa)/(b - a) / slope0) > max (1e6, 0.5/(macheps+tolx)))
       info = -5;
     endif
   endif
 
   output.iterations = niter;
   output.funcCount = nfev;
   output.bracketx = [a, b];
   output.brackety = [fa, fb];
