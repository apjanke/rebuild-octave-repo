# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1291235161 18000
#      Wed Dec 01 15:26:01 2010 -0500
# Node ID c9fefa096ce25f9f05cffcc821de9169b4ab6010
# Parent  5d1877a86180736afd74247b76f7449f3bd53a23
echo commands in scripts

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,30 @@
+2010-12-01  John W. Eaton  <jwe@octave.org>
+
+	* pt-pr-code.cc	(tree_print_code::visit_octave_user_function_trailer):
+	Don't indent or print "endfunction" here.
+	* ov-usr-fcn.cc (ov_user_script::do_multi_index_op): Save and
+	set tree_evaluator::statement_context, not
+	tree_evaluator::in_fcn_or_script_body.
+	(ov_user_function::do_multi_index_op): Likewise.
+	* pt-eval.cc: Initialize tree_evaluator::statement_context, not
+	tree_evaluator::in_fcn_or_script_body.
+	(tree_evaluator::visit_break_command): Check statement_context,
+	not in_fcn_or_script_body.
+	(tree_evaluator::visit_continue_command): Likewise.
+	(tree_evaluator::visit_return_command): Likewise.
+	(visit_statement): Also echo commands in scripts if
+	Vecho_executing_commands & ECHO_SCRIPTS is true.
+	* pt-eval.h (tree_evaluator::in_fcn_body,
+	tree_evaluator::in_script_body): New static variables.
+	(tree_evaluator::): Now an enum.
+	(tree_evaluator::in_function_or_script_body): Now an enum.
+	Rename from in_fcn_or_script_body.
+
 2010-12-01  Kai Habel  <kai.habel@gmx.de>
 
 	* DLD-FUNCTIONS/fltk_backend.cc (fltk_gui_mode): Fix gui mode
 	problems when set to none.
 
 2010-11-26  Kai Habel  <kai.habel@gmx.de>
 
 	* DLD-FUNCTIONS/fltk_backend.cc (find_uimenu_children, 
diff --git a/src/ov-usr-fcn.cc b/src/ov-usr-fcn.cc
--- a/src/ov-usr-fcn.cc
+++ b/src/ov-usr-fcn.cc
@@ -124,18 +124,18 @@ octave_user_script::do_multi_index_op (i
               call_depth++;
 
               if (call_depth < Vmax_recursion_depth)
                 {
                   octave_call_stack::push (this);
 
                   frame.add_fcn (octave_call_stack::pop);
 
-                  frame.protect_var (tree_evaluator::in_fcn_or_script_body);
-                  tree_evaluator::in_fcn_or_script_body = true;
+                  frame.protect_var (tree_evaluator::statement_context);
+                  tree_evaluator::statement_context = tree_evaluator::script;
 
                   cmd_list->accept (*current_evaluator);
 
                   if (tree_return_command::returning)
                     tree_return_command::returning = 0;
 
                   if (tree_break_command::breaking)
                     tree_break_command::breaking--;
@@ -421,18 +421,18 @@ octave_user_function::do_multi_index_op 
   // Set pointer to the current unwind_protect frame to allow
   // certain builtins register simple cleanup in a very optimized manner.
   // This is *not* intended as a general-purpose on-cleanup mechanism,
   frame.protect_var (curr_unwind_protect_frame);
   curr_unwind_protect_frame = &frame;
 
   // Evaluate the commands that make up the function.
 
-  frame.protect_var (tree_evaluator::in_fcn_or_script_body);
-  tree_evaluator::in_fcn_or_script_body = true;
+  frame.protect_var (tree_evaluator::statement_context);
+  tree_evaluator::statement_context = tree_evaluator::function;
 
   bool special_expr = (is_inline_function ()
                        || cmd_list->is_anon_function_body ());
 
   if (special_expr)
     {
       assert (cmd_list->length () == 1);
 
diff --git a/src/pt-eval.cc b/src/pt-eval.cc
--- a/src/pt-eval.cc
+++ b/src/pt-eval.cc
@@ -49,17 +49,18 @@ static tree_evaluator std_evaluator;
 tree_evaluator *current_evaluator = &std_evaluator;
 
 int tree_evaluator::dbstep_flag = 0;
 
 size_t tree_evaluator::current_frame = 0;
 
 bool tree_evaluator::debug_mode = false;
 
-bool tree_evaluator::in_fcn_or_script_body = false;
+tree_evaluator::stmt_list_type tree_evaluator::statement_context
+  = tree_evaluator::other;
 
 bool tree_evaluator::in_loop_command = false;
 
 // Maximum nesting level for functions, scripts, or sourced files called
 // recursively.
 int Vmax_recursion_depth = 256;
 
 // If TRUE, turn off printing of results in functions (as if a
@@ -89,18 +90,18 @@ tree_evaluator::visit_binary_expression 
 void
 tree_evaluator::visit_break_command (tree_break_command& cmd)
 {
   if (! error_state)
     {
       if (debug_mode)
         do_breakpoint (cmd.is_breakpoint ());
 
-      if (tree_evaluator::in_fcn_or_script_body
-          || tree_evaluator::in_loop_command)
+      if (statement_context == function || statement_context == script
+          || in_loop_command)
         tree_break_command::breaking = 1;
     }
 }
 
 void
 tree_evaluator::visit_colon_expression (tree_colon_expression&)
 {
   panic_impossible ();
@@ -109,18 +110,18 @@ tree_evaluator::visit_colon_expression (
 void
 tree_evaluator::visit_continue_command (tree_continue_command& cmd)
 {
   if (! error_state)
     {
       if (debug_mode)
         do_breakpoint (cmd.is_breakpoint ());
 
-      if (tree_evaluator::in_fcn_or_script_body
-          || tree_evaluator::in_loop_command)
+      if (statement_context == function || statement_context == script
+          || in_loop_command)
         tree_continue_command::continuing = 1;
     }
 }
 
 void
 tree_evaluator::reset_debug_state (void)
 {
   debug_mode = bp_table::have_breakpoints () || Vdebugging;
@@ -651,18 +652,18 @@ tree_evaluator::visit_return_command (tr
 
       if (Vdebugging
           && octave_call_stack::current_frame () == current_frame)
         {
           Vdebugging = false;
 
           reset_debug_state ();
         }
-      else if (tree_evaluator::in_fcn_or_script_body
-               || tree_evaluator::in_loop_command)
+      else if (statement_context == function || statement_context == script
+               || in_loop_command)
         tree_return_command::returning = 1;
     }
 }
 
 void
 tree_evaluator::visit_return_list (tree_return_list&)
 {
   panic_impossible ();
@@ -677,38 +678,45 @@ tree_evaluator::visit_simple_assignment 
 void
 tree_evaluator::visit_statement (tree_statement& stmt)
 {
   tree_command *cmd = stmt.command ();
   tree_expression *expr = stmt.expression ();
 
   if (cmd || expr)
     {
-      if (in_fcn_or_script_body)
+      if (statement_context == function || statement_context == script)
         {
           // Skip commands issued at a debug> prompt to avoid disturbing
           // the state of the program we are debugging.
 
           if (! Vdebugging)
             octave_call_stack::set_statement (&stmt);
 
-          if (Vecho_executing_commands & ECHO_FUNCTIONS)
+          // FIXME -- we need to distinguish functions from scripts to
+          // get this right.
+          if ((statement_context == script
+               && ((Vecho_executing_commands & ECHO_SCRIPTS)
+                   || (Vecho_executing_commands & ECHO_FUNCTIONS)))
+              || (statement_context == function
+                  && (Vecho_executing_commands & ECHO_FUNCTIONS)))
             stmt.echo_code ();
         }
 
       try
         {
           if (cmd)
             cmd->accept (*this);
           else
             {
               if (debug_mode)
                 do_breakpoint (expr->is_breakpoint ());
 
-              if (in_fcn_or_script_body && Vsilent_functions)
+              if ((statement_context == function || statement_context == script)
+                  && Vsilent_functions)
                 expr->set_print_flag (false);
 
               // FIXME -- maybe all of this should be packaged in
               // one virtual function that returns a flag saying whether
               // or not the expression will take care of binding ans and
               // printing the result.
 
               // FIXME -- it seems that we should just have to
diff --git a/src/pt-eval.h b/src/pt-eval.h
--- a/src/pt-eval.h
+++ b/src/pt-eval.h
@@ -142,18 +142,26 @@ public:
   // If < 0, stop executing at the next possible stopping point.
   static int dbstep_flag;
 
   // The number of the stack frame we are currently debugging.
   static size_t current_frame;
 
   static bool debug_mode;
 
-  // TRUE means we are evaluating a function or script body.
-  static bool in_fcn_or_script_body;
+  // Possible types of evaluation contexts.
+  enum stmt_list_type
+  {
+    function,  // function body
+    script,    // script file
+    other      // command-line input or eval string
+  };
+
+  // The context for the current evaluation.
+  static stmt_list_type statement_context;
 
   // TRUE means we are evaluating some kind of looping construct.
   static bool in_loop_command;
 
 private:
 
   void do_decl_init_list (decl_elt_init_fcn fcn,
                           tree_decl_init_list *init_list);
diff --git a/src/pt-pr-code.cc b/src/pt-pr-code.cc
--- a/src/pt-pr-code.cc
+++ b/src/pt-pr-code.cc
@@ -414,20 +414,16 @@ tree_print_code::visit_octave_user_funct
     }
 }
 
 void
 tree_print_code::visit_octave_user_function_trailer (octave_user_function& fcn)
 {
   print_indented_comment (fcn.trailing_comment ());
 
-  indent ();
-
-  os << "endfunction";
-
   newline ();
 }
 
 void
 tree_print_code::visit_function_def (tree_function_def& fdef)
 {
   indent ();
 
