# HG changeset patch
# User jwe
# Date 776826092 0
#      Sun Aug 14 01:01:32 1994 +0000
# Node ID 14b2a186a5c0380d905024ce2c7ae9c915652a6c
# Parent  cdc194110938e3713b13bfca609cdf1f475d0902
[project @ 1994-08-14 00:55:49 by jwe]

diff --git a/src/balance.cc b/src/balance.cc
--- a/src/balance.cc
+++ b/src/balance.cc
@@ -71,17 +71,17 @@ where OPT is an optional single characte
       return retval;
     }
 
   char *bal_job;
   int my_nargin;		// # args w/o optional string arg
 
   // determine if balancing option is listed
   // set my_nargin to the number of matrix inputs
-  if (args(nargin-1).const_type () == tree_constant_rep::string_constant)
+  if (args(nargin-1).is_string ())
     {
       bal_job = args(nargin-1).string_value ();
       my_nargin = nargin-2;
     }
   else
     {
       bal_job = "B";
       my_nargin = nargin-1;
diff --git a/src/colloc.cc b/src/colloc.cc
--- a/src/colloc.cc
+++ b/src/colloc.cc
@@ -63,17 +63,17 @@ DEFUN_DLD ("colloc", Fcolloc, Scolloc, 7
   int ntot = ncol;
   int left = 0;
   int right = 0;
 
   for (int i = 2; i < nargin; i++)
     {
       if (args(i).is_defined ())
 	{
-	  if (! args(i).is_string_type ())
+	  if (! args(i).is_string ())
 	    {
 	      error ("colloc: expecting string argument");
 	      return retval;
 	    }
 
 	  char *s = args(i).string_value ();
 	  if (s && (((*s == 'R' || *s == 'r') && strlen (s) == 1)
 		    || strcmp (s, "right") == 0))
diff --git a/src/dassl.cc b/src/dassl.cc
--- a/src/dassl.cc
+++ b/src/dassl.cc
@@ -278,17 +278,17 @@ to the shortest match.")
   int nargin = args.length ();
 
   if (nargin == 1)
     {
       print_dassl_option_list ();
     }
   else if (nargin == 3)
     {
-      if (args(1).is_string_type ())
+      if (args(1).is_string ())
 	{
 	  char *keyword = args(1).string_value ();
 	  double val = args(2).double_value ();
 	  do_dassl_option (keyword, val);
 	}
       else
 	print_usage ("dassl_options");
     }
diff --git a/src/data.cc b/src/data.cc
--- a/src/data.cc
+++ b/src/data.cc
@@ -334,16 +334,19 @@ DEFUN ("ones", Fones, Sones, 3, 1,
   "ones (N), ones (N, M), ones (X): create a matrix of all ones")
 {
   Octave_object retval;
 
   int nargin = args.length ();
 
   switch (nargin)
     {
+    case 1:
+      retval = 1.0;
+      break;
     case 2:
       retval = fill_matrix (args(1), 1.0, "ones");
       break;
     case 3:
       retval = fill_matrix (args(1), args(2), 1.0, "ones");
       break;
     default:
       print_usage ("ones");
@@ -357,16 +360,19 @@ DEFUN ("zeros", Fzeros, Szeros, 3, 1,
   "zeros (N), zeros (N, M), zeros (X): create a matrix of all zeros")
 {
   Octave_object retval;
 
   int nargin = args.length ();
 
   switch (nargin)
     {
+    case 1:
+      retval = 0.0;
+      break;
     case 2:
       retval = fill_matrix (args(1), 0.0, "zeros");
       break;
     case 3:
       retval = fill_matrix (args(1), args(2), 0.0, "zeros");
       break;
     default:
       print_usage ("zeros");
@@ -422,16 +428,19 @@ DEFUN ("eye", Feye, Seye, 3, 1,
   "eye (N), eye (N, M), eye (X): create an identity matrix")
 {
   Octave_object retval;
 
   int nargin = args.length ();
 
   switch (nargin)
     {
+    case 1:
+      retval = 1.0;
+      break;
     case 2:
       retval = identity_matrix (args(1));
       break;
     case 3:
       retval = identity_matrix (args(1), args(2));
       break;
     default:
       print_usage ("eye");
diff --git a/src/error.cc b/src/error.cc
--- a/src/error.cc
+++ b/src/error.cc
@@ -139,17 +139,17 @@ printed.")
   Octave_object retval;
 
   char *msg = "unspecified_error";
 
   int nargin = args.length ();
 
   if (nargin == 2 && args(1).is_defined ())
     {
-      if (args(1).is_string_type ())
+      if (args(1).is_string ())
 	{
 	  msg = args(1).string_value ();
 
 	  if (! msg || ! *msg)
 	    return retval;
 	}
       else if (args(1).is_empty ())
 	return retval;
diff --git a/src/file-io.cc b/src/file-io.cc
--- a/src/file-io.cc
+++ b/src/file-io.cc
@@ -172,17 +172,17 @@ initialize_file_io (void)
 
 /*
  * Given a file name or number, return a pointer to the corresponding
  * open file.  If the file has not already been opened, return NULL.
  */
 Pix
 return_valid_file (const tree_constant& arg)
 {
-  if (arg.is_string_type ())
+  if (arg.is_string ())
     {
       Pix p = file_list.first ();
       file_info file;
       for (int i = 0; i < file_count; i++)
 	{
 	  char *file_name = arg.string_value ();
 	  file = file_list (p);
 	  if (strcmp (file.name (), file_name) == 0)
@@ -247,17 +247,17 @@ fopen_file_for_user (const tree_constant
 static Pix
 file_io_get_file (const tree_constant arg, const char *mode,
 		  const char *warn_for)
 {
   Pix p = return_valid_file (arg);
 
   if (! p)
     {
-      if (arg.is_string_type ())
+      if (arg.is_string ())
 	{
 	  char *name = arg.string_value ();
 
 	  struct stat buffer;
 	  int status = stat (name, &buffer);
 
 	  if (status == 0)
 	    {
@@ -483,17 +483,17 @@ DEFUN ("fopen", Ffopen, Sfopen, 3, 1,
 }
 
 Octave_object
 fopen_internal (const Octave_object& args)
 {
   Octave_object retval;
   Pix p;
 
-  if (! args(1).is_string_type ())
+  if (! args(1).is_string ())
     {
       error ("fopen: file name must be a string");
       return retval;
     }
 
   p = return_valid_file (args(1));
 
   if (p)
@@ -501,17 +501,17 @@ fopen_internal (const Octave_object& arg
       file_info file = file_list (p);
 
       retval.resize (1);
       retval(0) = tree_constant ((double) file.number ());
 
       return retval;
     }
 
-  if (! args(2).is_string_type ())
+  if (! args(2).is_string ())
     {
       error ("fopen: file mode must be a string");
       return retval;
     }
 
   char *name = args(1).string_value ();
   char *mode = args(2).string_value ();
 
@@ -890,31 +890,31 @@ process_printf_format (const char *s, co
 	  char *s = fmt.str ();
 	  sb.form (s, args(fmt_arg_count++).double_value ());
 	  delete [] s;
 	  return chars_from_fmt_str;
 	}
 
     case 's':
 
-      if (! args(fmt_arg_count).is_string_type ())
+      if (! args(fmt_arg_count).is_string ())
 	goto invalid_conversion;
       else
 	{
 	  chars_from_fmt_str++;
 	  fmt << *s << ends;
 	  char *s = fmt.str ();
 	  sb.form (s, args(fmt_arg_count++).string_value ());
 	  delete [] s;
 	  return chars_from_fmt_str;
 	}
 
     case 'c':
 
-      if (! args(fmt_arg_count).is_string_type ())
+      if (! args(fmt_arg_count).is_string ())
 	goto invalid_conversion;
       else
 	{
 	  chars_from_fmt_str++;
 	  fmt << *s << ends;
 	  char *str = args(fmt_arg_count++).string_value ();
 	  if (strlen (str) != 1)
 	    goto invalid_conversion;
@@ -1000,17 +1000,17 @@ do_printf (const char *type, const Octav
 {
   Octave_object retval;
   fmt_arg_count = 1;
   char *fmt;
   file_info file;
 
   if (strcmp (type, "fprintf") == 0)
     {
-      if (args(2).is_string_type ())
+      if (args(2).is_string ())
 	{
 	  fmt = args(2).string_value ();
 	  fmt_arg_count++;
 	}
       else
 	{
 	  error ("%s: format must be a string", type);
 	  return retval;
@@ -1028,17 +1028,17 @@ do_printf (const char *type, const Octav
 	  error ("%s: file is read only", type);
 	  return retval;
 	}
 
       fmt = args(2).string_value ();
 
       fmt_arg_count++;
     }
-  else if (args(1).is_string_type ())
+  else if (args(1).is_string ())
     {
       fmt = args(1).string_value ();
       fmt_arg_count++;
     }
   else
     {
       error ("%s: invalid format string", type);
       return retval;
@@ -1321,17 +1321,17 @@ do_scanf (const char *type, const Octave
   int tmp_file_open = 0;
   FILE *fptr = 0;
   file_info file;
 
   fmt_arg_count = 0;
 
   if (strcmp (type, "scanf") != 0)
     {
-      if (args(2).is_string_type ())
+      if (args(2).is_string ())
 	scanf_fmt = args(2).string_value ();
       else
 	{
 	  error ("%s: format must be a string", type);
 	  return retval;
 	}
     }
 
@@ -1350,17 +1350,17 @@ do_scanf (const char *type, const Octave
 	{
 	  error ("%s: this file is opened for writing only", type);
 	  return retval;
 	}
 
       fptr = file.fptr ();
     }
 
-  if ((! fptr && args(1).is_string_type ())
+  if ((! fptr && args(1).is_string ())
       || (doing_fscanf && file.number () == 0))
     {
       char *string;
 
       if (strcmp (type, "scanf") == 0)
 	scanf_fmt = args(1).string_value ();
 
       if (strcmp (type, "scanf") == 0
@@ -1552,17 +1552,17 @@ fread_internal (const Octave_object& arg
 
   if (! p)
     return retval;
 
 // Get type and number of bytes per element to read.
   char *prec = "uchar";
   if (nargin > 3)
     {
-      if (args(3).is_string_type ())
+      if (args(3).is_string ())
 	prec = args(3).string_value ();
       else
 	{
 	  error ("fread: precision must be a specified as a string");
 	  return retval;
 	}
     }
 
@@ -1714,17 +1714,17 @@ fwrite_internal (const Octave_object& ar
 
   if (! p)
     return retval;
 
 // Get type and number of bytes per element to read.
   char *prec = "uchar";
   if (nargin > 3)
     {
-      if (args(3).is_string_type ())
+      if (args(3).is_string ())
 	prec = args(3).string_value ();
       else
 	{
 	  error ("fwrite: precision must be a specified as a string");
 	  return retval;
 	}
     }
 
diff --git a/src/fsolve.cc b/src/fsolve.cc
--- a/src/fsolve.cc
+++ b/src/fsolve.cc
@@ -260,17 +260,17 @@ to the shortest match.")
   int nargin = args.length ();
 
   if (nargin == 1)
     {
       print_fsolve_option_list ();
     }
   else if (nargin == 3)
     {
-      if (args(1).is_string_type ())
+      if (args(1).is_string ())
 	{
 	  char *keyword = args(1).string_value ();
 	  double val = args(2).double_value ();
 	  do_fsolve_option (keyword, val);
 	}
       else
 	print_usage ("fsolve_options");
     }
diff --git a/src/input.cc b/src/input.cc
--- a/src/input.cc
+++ b/src/input.cc
@@ -747,17 +747,17 @@ get_user_input (const Octave_object& arg
   int read_as_string = 0;
 
   if (nargin == 3)
     read_as_string++;
 
   char *prompt = "debug> ";
   if (nargin > 1)
    {
-      if (args(1).is_string_type ())
+      if (args(1).is_string ())
 	prompt = args(1).string_value ();
       else
 	{
 	  error ("input: unrecognized argument");
 	  return retval;
 	}
     }
 
diff --git a/src/lsode.cc b/src/lsode.cc
--- a/src/lsode.cc
+++ b/src/lsode.cc
@@ -265,17 +265,17 @@ to the shortest match.")
   int nargin = args.length ();
 
   if (nargin == 1)
     {
       print_lsode_option_list ();
     }
   else if (nargin == 3)
     {
-      if (args(1).is_string_type ())
+      if (args(1).is_string ())
 	{
 	  char *keyword = args(1).string_value ();
 	  double val = args(2).double_value ();
 	  do_lsode_option (keyword, val);
 	}
       else
 	print_usage ("lsode_options");
     }
diff --git a/src/npsol.cc b/src/npsol.cc
--- a/src/npsol.cc
+++ b/src/npsol.cc
@@ -750,17 +750,17 @@ to the shortest match.")
   int nargin = args.length ();
 
   if (nargin == 1)
     {
       print_npsol_option_list ();
     }
   else if (nargin == 3)
     {
-      if (args(1).is_string_type ())
+      if (args(1).is_string ())
 	{
 	  char *keyword = args(1).string_value ();
 	  double val = args(2).double_value ();
 	  do_npsol_option (keyword, val);
 	}
       else
 	print_usage ("npsol_options");
     }
diff --git a/src/octave.cc b/src/octave.cc
--- a/src/octave.cc
+++ b/src/octave.cc
@@ -728,17 +728,17 @@ eval_string (const char *string, int pri
     }
 
   return retval;
 }
 
 tree_constant
 eval_string (const tree_constant& arg, int& parse_status)
 {
-  if (! arg.is_string_type ())
+  if (! arg.is_string ())
     {
       error ("eval: expecting string argument");
       return -1;
     }
 
   char *string = arg.string_value ();
 
 // Yes Virginia, we always print here...
@@ -768,17 +768,17 @@ DEFUN ("eval", Feval, Seval, 2, 1,
 
 DEFUN ("shell_cmd", Fshell_cmd, Sshell_cmd, 2, 1,
   "shell_cmd (string [, return_output]): execute shell commands")
 {
   Octave_object retval;
 
   int nargin = args.length ();
 
-  if (nargin == 2 && args(1).is_string_type ())
+  if (nargin == 2 && args(1).is_string ())
     {
       iprocstream cmd (args(1).string_value ());
       char ch;
       ostrstream output_buf;
       while (cmd.get (ch))
 	output_buf.put (ch);
       output_buf << ends;
       int status = cmd.close ();
diff --git a/src/pt-const.h b/src/pt-const.h
--- a/src/pt-const.h
+++ b/src/pt-const.h
@@ -116,18 +116,16 @@ public:
   int is_real_type (void) const { return rep->is_real_type (); }
   int is_complex_type (void) const { return rep->is_complex_type (); }
 
   int is_numeric_type (void) const { return rep->is_numeric_type (); }
 
   int is_numeric_or_range_type (void) const
     { return rep->is_numeric_or_range_type (); }
 
-  int is_string_type (void) const { return rep->is_string_type (); }
-
   int valid_as_scalar_index (void) const
     { return rep->valid_as_scalar_index (); }
 
 // What type of constant am I?
 
   int is_unknown (void) const { return rep->is_unknown (); }
   int is_scalar (void) const { return rep->is_scalar (); }
   int is_matrix (void) const { return rep->is_matrix (); }
diff --git a/src/pt-exp-base.cc b/src/pt-exp-base.cc
--- a/src/pt-exp-base.cc
+++ b/src/pt-exp-base.cc
@@ -89,17 +89,17 @@ list_to_vector (tree *list, int& len)
 #endif
 
 static int
 print_as_scalar (const tree_constant& val)
 {
   int nr = val.rows ();
   int nc = val.columns ();
   return (val.is_scalar_type ()
-	  || val.is_string_type ()
+	  || val.is_string ()
 	  || (val.is_matrix_type ()
 	      && ((nr == 1 && nc == 1)
 		  || nr == 0
 		  || nc == 0)));
 }
 
 // Make sure that all arguments have values.
 
@@ -351,17 +351,17 @@ tree_matrix::eval (int print)
 	}
       else
 	list[len].direction = direct;
 
       list[len].elem = tmp;
       list[len].nr = nr;
       list[len].nc = nc;
 
-      if (all_strings && ! tmp.is_string_type ())
+      if (all_strings && ! tmp.is_string ())
 	all_strings = 0;
 
       if (! found_complex && tmp.is_complex_type ())
 	found_complex = 1;
 
       len++;
 
     next:
diff --git a/src/pt-plot.cc b/src/pt-plot.cc
--- a/src/pt-plot.cc
+++ b/src/pt-plot.cc
@@ -646,17 +646,17 @@ subplot::print (int ndim, ostrstream& pl
 {
   int nc = 0;
   if (plot_data)
     {
       tree_constant data = plot_data->eval (0);
       if (! error_state && data.is_defined ())
 	{
 	  char *file = 0;
-	  if (data.is_string_type ())
+	  if (data.is_string ())
 	    {
 	      file = tilde_expand (data.string_value ());
 	      ifstream ftmp (file);
 	      if (ftmp)
 		{
 		  plot_buf << " \"" << file << '"';
 		  free (file);
 		  goto have_existing_file_or_command;
@@ -706,17 +706,17 @@ subplot::print (int ndim, ostrstream& pl
       int status = using->print (ndim, nc, plot_buf);
       if (status < 0)
 	return -1;
     }
 
   if (title)
     {
       tree_constant tmp = title->eval (0);
-      if (! error_state && tmp.is_string_type ())
+      if (! error_state && tmp.is_string ())
 	plot_buf << " title " << '"' << tmp.string_value () << '"';
       else
 	{
 	  warning ("line title must be a string");
 	  plot_buf << " title " << '"' << "line " << plot_line_count << '"';
 	}
     }
   else
diff --git a/src/qpsol.cc b/src/qpsol.cc
--- a/src/qpsol.cc
+++ b/src/qpsol.cc
@@ -358,17 +358,17 @@ to the shortest match.")
   int nargin = args.length ();
 
   if (nargin == 1)
     {
       print_qpsol_option_list ();
     }
   else if (nargin == 3)
     {
-      if (args(1).is_string_type ())
+      if (args(1).is_string ())
 	{
 	  char *keyword = args(1).string_value ();
 	  double val = args(2).double_value ();
 	  do_qpsol_option (keyword, val);
 	}
       else
 	print_usage ("qpsol_options");
     }
diff --git a/src/quad.cc b/src/quad.cc
--- a/src/quad.cc
+++ b/src/quad.cc
@@ -297,17 +297,17 @@ to the shortest match.")
   Octave_object retval;
 
   int nargin = args.length ();
 
   if (nargin == 1)
     print_quad_option_list ();
   else if (nargin == 3)
     {
-      if (args(1).is_string_type ())
+      if (args(1).is_string ())
 	{
 	  char *keyword = args(1).string_value ();
 	  double val = args(2).double_value ();
 	  do_quad_option (keyword, val);
 	}
       else
 	print_usage ("quad_options");
     }
diff --git a/src/rand.cc b/src/rand.cc
--- a/src/rand.cc
+++ b/src/rand.cc
@@ -195,17 +195,17 @@ rand (SEED, N)        -- set seed")
 	  goto gen_matrix;
 	default:
 	  panic_impossible ();
 	  break;
 	}
     }
   else if (nargin == 3)
     {
-      if (args(1).is_string_type ()
+      if (args(1).is_string ()
 	  && strcmp (args(1).string_value (), "seed") == 0)
 	{
 	  double d = args(2).to_scalar ();
 	  set_rand_seed (d);
 	}
       else
 	{
 	  n = NINT (args(1).to_scalar ());
diff --git a/src/sysdep.cc b/src/sysdep.cc
--- a/src/sysdep.cc
+++ b/src/sysdep.cc
@@ -391,17 +391,17 @@ DEFALIAS (home, clc);
 
 DEFUN ("getenv", Fgetenv, Sgetenv, 2, 1,
   "getenv (STRING): get environment variable values")
 {
   Octave_object retval;
 
   int nargin = args.length ();
 
-  if (nargin == 2 && args(1).is_string_type ())
+  if (nargin == 2 && args(1).is_string ())
     {
       char *value = getenv (args(1).string_value ());
       if (value)
 	retval = value;
       else
 	retval = "";
     }
   else
diff --git a/src/tc-rep.h b/src/tc-rep.h
--- a/src/tc-rep.h
+++ b/src/tc-rep.h
@@ -137,19 +137,16 @@ private:
 // above.
 
   int is_defined (void) const
     { return type_tag != tree_constant_rep::unknown_constant; }
 
   int is_undefined (void) const
     { return type_tag == tree_constant_rep::unknown_constant; }
 
-  int is_string_type (void) const
-    { return type_tag == tree_constant_rep::string_constant; }
-
   int is_scalar_type (void) const
     { return type_tag == scalar_constant
              || type_tag == complex_scalar_constant; }
 
   int is_matrix_type (void) const
     { return type_tag == matrix_constant
              || type_tag == complex_matrix_constant; }
 
diff --git a/src/utils.cc b/src/utils.cc
--- a/src/utils.cc
+++ b/src/utils.cc
@@ -478,17 +478,17 @@ D_NINT (double x)
 
 // XXX FIXME XXX --  put these in some file, and make them extern.
 
 static int
 all_strings (const Octave_object& args)
 {
   int n = args.length ();
   for (int i = 1; i < n; i++)
-    if (! args(i).is_string_type ())
+    if (! args(i).is_string ())
       return 0;
   return 1;
 }
 
 char **
 make_argv (const Octave_object& args, const char *fcn_name)
 {
   char **argv = 0;
diff --git a/src/variables.cc b/src/variables.cc
--- a/src/variables.cc
+++ b/src/variables.cc
@@ -128,17 +128,17 @@ is_globally_visible (const char *name)
 
 // Is this tree_constant a valid function?
 
 tree_fvc *
 is_valid_function (const tree_constant& arg, char *warn_for, int warn)
 {
   tree_fvc *ans = 0;
 
-  if (! arg.is_string_type ())
+  if (! arg.is_string ())
     {
       if (warn)
 	error ("%s: expecting function name as argument", warn_for);
       return ans;
     }
 
   char *fcn_name = arg.string_value ();
 
@@ -181,17 +181,17 @@ takes_correct_nargs (tree_fvc *fcn, int 
 DEFUN ("is_global", Fis_global, Sis_global, 2, 1,
   "is_global (X): return 1 if the string X names a global variable\n\
 otherwise, return 0.")
 {
   Octave_object retval = 0.0;
 
   int nargin = args.length ();
 
-  if (nargin != 2 || ! args(1).is_string_type ())
+  if (nargin != 2 || ! args(1).is_string ())
     {
       print_usage ("is_global");
       return retval;
     }
 
   char *name = args(1).string_value ();
 
   symbol_record *sr = curr_sym_tab->lookup (name, 0, 0);
@@ -206,17 +206,17 @@ DEFUN ("exist", Fexist, Sexist, 2, 1,
 \n\
 return 0 if NAME is undefined, 1 if it is a variable, or 2 if it is\n\
 a function.") 
 {
   Octave_object retval;
 
   int nargin = args.length ();
 
-  if (nargin != 2 || ! args(1).is_string_type ())
+  if (nargin != 2 || ! args(1).is_string ())
     {
       print_usage ("exist");
       return retval;
     }
 
   char *name = args(1).string_value ();
 
   symbol_record *sr = curr_sym_tab->lookup (name, 0, 0);
@@ -670,17 +670,17 @@ builtin_string_variable (const char *nam
   char *retval = 0;
 
   tree_fvc *defn = sr->def ();
 
   if (defn)
     {
       tree_constant val = defn->eval (0);
 
-      if (! error_state && val.is_string_type ())
+      if (! error_state && val.is_string ())
 	{
 	  char *s = val.string_value ();
 	  if (s)
 	    retval = strsave (s);
 	}
     }
 
   return retval;
