# HG changeset patch
# User jwe
# Date 1020480434 0
#      Sat May 04 02:47:14 2002 +0000
# Node ID cc8ae49d6e799b7845e0bb7a29a1e2f067b8b732
# Parent  e8627dc4bdf2685f870c3abb06dfc41c23ed1168
[project @ 2002-05-04 02:47:14 by jwe]

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,10 +1,19 @@
 2002-05-03  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
+	* parse.y (ABORT_PARSE): Maybe restore symbol table context too.
+
+	* pt-idx.h (tree_index_expression::type): New enum.
+	(tree_index_expression::etype): New data member.
+	* pt-idx.h (tree_index_expression::tree_index_expression):
+	New arg, t, to set type of index.
+	* parse.y (make_index_expression): Likewise.
+	Change all callers.
+
 	* ov-base.cc (cell_conv): New conversion function.
 	(install_base_type_conversions): Install it.
 	Install conversion for indexed assignment of octave_cells to
 	undefined values.
 
 	* TEMPLATE-INST/Array-tc.cc: Instantiate assign functions too.
 	(Array<octave_value>::resize_fill_value (void)):
 	Provide specialization for octave_value.
diff --git a/src/oct-lvalue.cc b/src/oct-lvalue.cc
--- a/src/oct-lvalue.cc
+++ b/src/oct-lvalue.cc
@@ -52,21 +52,23 @@ octave_lvalue::assign (octave_value::ass
 	val->assign_struct_elt (op, struct_elt_name, idx, rhs);
     }
 
   if (chg_fcn && ! error_state && chg_fcn () < 0)
     *val = saved_val;
 }
 
 void
-octave_lvalue::set_index (const octave_value_list& i)
+octave_lvalue::set_index (const octave_value_list& i,
+			  tree_index_expression::type t)
 {
   if (! index_set)
     {
       idx = i;
+      itype = t;
       index_set = true;
     }
   else
     error ("invalid index expression in assignment");
 }
 
 void
 octave_lvalue::do_unary_op (octave_value::unary_op op)
diff --git a/src/oct-lvalue.h b/src/oct-lvalue.h
--- a/src/oct-lvalue.h
+++ b/src/oct-lvalue.h
@@ -24,16 +24,17 @@ Software Foundation, 59 Temple Place - S
 #define octave_lvalue_h 1
 
 class octave_value;
 class octave_value_list;
 
 #include <string>
 
 #include "oct-obj.h"
+#include "pt-idx.h"
 #include "symtab.h"
 
 // XXX FIXME XXX -- eliminate the following kluge?
 
 // This variable is used when creating dummy octave_lvalue objects.
 static octave_value dummy_val;
 
 class
@@ -45,25 +46,26 @@ public:
 		 symbol_record::change_function f = 0)
     : val (v), idx (), chg_fcn (f), struct_elt_name (), index_set (false) { }
 
   octave_lvalue (octave_value *v, const std::string& nm,
 		 symbol_record::change_function f = 0)
     : val (v), idx (), chg_fcn (f), struct_elt_name (nm), index_set (false) { }
 
   octave_lvalue (const octave_lvalue& vr)
-    : val (vr.val), idx (vr.idx), chg_fcn (vr.chg_fcn),
+    : val (vr.val), idx (vr.idx), itype (vr.itype), chg_fcn (vr.chg_fcn),
       struct_elt_name (vr.struct_elt_name), index_set (vr.index_set) { }
 
   octave_lvalue& operator = (const octave_lvalue& vr)
     {
       if (this != &vr)
 	{
 	  val = vr.val;
 	  idx = vr.idx;
+	  itype = vr.itype;
 	  chg_fcn = vr.chg_fcn;
 	  struct_elt_name = vr.struct_elt_name;
 	  index_set = vr.index_set;
 	}
 
       return *this;
     }
 
@@ -80,17 +82,19 @@ public:
   void assign (octave_value::assign_op, const octave_value&);
 
   octave_lvalue struct_elt_ref (const std::string& nm)
     {
       val->make_unique ();
       return val->struct_elt_ref (nm);
     }
 
-  void set_index (const octave_value_list& i);
+  void set_index (const octave_value_list& i,
+		  tree_index_expression::type t
+		    = tree_index_expression::unknown);
 
   void clear_index (void) { idx = octave_value_list (); }
 
   void do_unary_op (octave_value::unary_op op);
 
   octave_value value (void)
     {
       return struct_elt_name.empty ()
@@ -103,16 +107,18 @@ public:
     }
 
 private:
 
   octave_value *val;
 
   octave_value_list idx;
 
+  tree_index_expression::type itype;
+
   symbol_record::change_function chg_fcn;
 
   std::string struct_elt_name;
 
   bool index_set;
 };
 
 #endif
diff --git a/src/parse.y b/src/parse.y
--- a/src/parse.y
+++ b/src/parse.y
@@ -275,17 +275,18 @@ finish_function (tree_parameter_list *re
 		 octave_user_function *fcn, octave_comment_list *lc);
 
 // Reset state after parsing function.
 static void
 recover_from_parsing_function (void);
 
 // Make an index expression.
 static tree_index_expression *
-make_index_expression (tree_expression *expr, tree_argument_list *args);
+make_index_expression (tree_expression *expr, tree_argument_list *args,
+		       tree_index_expression::type);
 
 // Make an indirect reference expression.
 static tree_indirect_ref *
 make_indirect_ref (tree_expression *expr, const std::string&);
 
 // Make a declaration command.
 static tree_decl_command *
 make_decl_command (int tok, token *tok_val, tree_decl_init_list *lst);
@@ -306,16 +307,21 @@ maybe_warn_missing_semi (tree_statement_
 static void
 set_stmt_print_flag (tree_statement_list *, char, bool);
 
 #define ABORT_PARSE \
   do \
     { \
       global_command = 0; \
       yyerrok; \
+      if (symtab_context) \
+        { \
+	  curr_sym_tab = symtab_context; \
+	  symtab_context = 0; \
+        } \
       if (interactive || forced_interactive) \
 	YYACCEPT; \
       else \
 	YYABORT; \
     } \
   while (0)
 
 %}
@@ -686,21 +692,35 @@ arg_list	: expression
 
 parsing_indir	: // empty
 		  { lexer_flags.looking_at_indirect_ref = true; }
 		;
 
 postfix_expr	: primary_expr
 		  { $$ = $1; }
 		| postfix_expr '(' ')'
-		  { $$ = make_index_expression ($1, 0); }
+		  {
+		    $$ = make_index_expression ($1, 0,
+						tree_index_expression::paren);
+		  }
 		| postfix_expr '(' arg_list ')'
-		  { $$ = make_index_expression ($1, $3); }
+		  {
+		    $$ = make_index_expression ($1, $3,
+						tree_index_expression::paren);
+		  }
+		| postfix_expr '{' '}'
+		  {
+		    $$ = make_index_expression ($1, 0,
+						tree_index_expression::brace);
+		  }
 		| postfix_expr '{' arg_list '}'
-		  { $$ = make_index_expression ($1, $3); }
+		  {
+		    $$ = make_index_expression ($1, $3,
+						tree_index_expression::brace);
+		  }
 		| postfix_expr PLUS_PLUS
 		  { $$ = make_postfix_op (PLUS_PLUS, $1, $2); }
 		| postfix_expr MINUS_MINUS
 		  { $$ = make_postfix_op (MINUS_MINUS, $1, $2); }
 		| postfix_expr QUOTE
 		  { $$ = make_postfix_op (QUOTE, $1, $2); }
 		| postfix_expr TRANSPOSE
 		  { $$ = make_postfix_op (TRANSPOSE, $1, $2); }
@@ -827,17 +847,20 @@ assign_expr	: assign_lhs '=' expression
 		  { $$ = make_assign_op (ELEFTDIV_EQ, $1, $2, $3); }
 		| assign_lhs AND_EQ expression
 		  { $$ = make_assign_op (AND_EQ, $1, $2, $3); }
 		| assign_lhs OR_EQ expression
 		  { $$ = make_assign_op (OR_EQ, $1, $2, $3); }
 		;
 
 word_list_cmd	: identifier word_list
-		  { $$ = make_index_expression ($1, $2); }
+		  {
+		    $$ = make_index_expression ($1, $2,
+						tree_index_expression::paren);
+		  }
 		;
 
 word_list	: TEXT
 		  {
 		    tree_constant *tmp = make_constant (TEXT, $1);
 		    $$ = new tree_argument_list (tmp);
 		  }
 		| word_list TEXT
@@ -2562,26 +2585,27 @@ recover_from_parsing_function (void)
   lexer_flags.parsed_function_name = false;
   lexer_flags.looking_at_return_list = false;
   lexer_flags.looking_at_parameter_list = false;
 }
 
 // Make an index expression.
 
 static tree_index_expression *
-make_index_expression (tree_expression *expr, tree_argument_list *args)
+make_index_expression (tree_expression *expr, tree_argument_list *args,
+		       tree_index_expression::type t)
 {
   tree_index_expression *retval = 0;
 
   int l = expr->line ();
   int c = expr->column ();
 
   expr->mark_postfix_indexed ();
 
-  retval =  new tree_index_expression (expr, args, l, c);
+  retval =  new tree_index_expression (expr, args, l, c, t);
 
   return retval;
 }
 
 // Make an indirect reference expression.
 
 static tree_indirect_ref *
 make_indirect_ref (tree_expression *expr, const std::string& elt)
diff --git a/src/pt-idx.cc b/src/pt-idx.cc
--- a/src/pt-idx.cc
+++ b/src/pt-idx.cc
@@ -35,19 +35,19 @@ Software Foundation, 59 Temple Place - S
 #include "pt-arg-list.h"
 #include "pt-idx.h"
 #include "pt-walk.h"
 
 // Index expressions.
 
 tree_index_expression::tree_index_expression (tree_expression *e,
 					      tree_argument_list *lst,
-					      int l, int c)
+					      int l, int c, type t)
   : tree_expression (l, c), expr (e), list (lst),
-    arg_nm (lst ? lst->get_arg_names () : string_vector ()) { }
+    itype (t), arg_nm (lst ? lst->get_arg_names () : string_vector ()) { }
 
 tree_index_expression::~tree_index_expression (void)
 {
   delete expr;
   delete list;
 }
 
 // This is useful for printing the name of the variable in an indexed
diff --git a/src/pt-idx.h b/src/pt-idx.h
--- a/src/pt-idx.h
+++ b/src/pt-idx.h
@@ -41,18 +41,25 @@ class octave_lvalue;
 
 // Index expressions.
 
 class
 tree_index_expression : public tree_expression
 {
 public:
 
+  enum type
+    {
+      unknown,
+      paren,
+      brace
+    };
+
   tree_index_expression (tree_expression *e = 0, tree_argument_list *lst = 0,
-			 int l = -1, int c = -1);
+			 int l = -1, int c = -1, type t = paren);
 
   ~tree_index_expression (void);
 
   bool is_index_expression (void) const
     { return true; }
 
   std::string name (void) const;
 
@@ -79,16 +86,18 @@ public:
   void accept (tree_walker& tw);
 
 private:
 
   tree_expression *expr;
 
   tree_argument_list *list;
 
+  type itype;
+
   string_vector arg_nm;
 
   // No copying!
 
   tree_index_expression (const tree_index_expression&);
 
   tree_index_expression& operator = (const tree_index_expression&);
 };
