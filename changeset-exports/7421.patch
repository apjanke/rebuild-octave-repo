# HG changeset patch
# User dbateman
# Date 1201294946 0
#      Fri Jan 25 21:02:26 2008 +0000
# Node ID 1c7b3e1fda19c8360da4468bd3a60ef349b15e30
# Parent  4b17a7297e5db92d4201ee05f9ba20436b03600f
[project @ 2008-01-25 21:00:42 by dbateman]

diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,8 +1,18 @@
+2008-01-25  Alexander Barth  <barth.alexander@gmail.com>
+
+	* general/interpn.m: Compatibility fix. Don't ndgrid vector
+	abscissa.
+	
+2008-01-25  David Bateman  <dbateman@free.fr>
+
+	* plot/__scatter__.m: Remove NaN values from data.
+	* plot/__patch__.m: Vectorize treatment of trailing NaN values.
+
 2008-01-25  Thomas Weber  <thomas.weber.mail@gmail.com>
 
 	* linear-algebra/trace.m: Test cases for non 2-d args.
 
 2008-01-25  James Packer  <james.packer@wadh.ox.ac.uk>
 
 	* geometry/griddata3.m: Call griddata, not gridata.
 
diff --git a/scripts/general/interpn.m b/scripts/general/interpn.m
--- a/scripts/general/interpn.m
+++ b/scripts/general/interpn.m
@@ -129,65 +129,64 @@ function vi = interpn (varargin)
       idx (i) = ":";
       x{i} = x{i}(idx{:})(:);
     endfor
     idx (1 : nd) = {1};
     idx (1) = ":";
     x{1} = x{1}(idx{:})(:);
   endif
 
-  if (strcmp (method, "linear") || strcmp (method, "nearest"))
-    if (all (cellfun (@isvector, y)))
-      [y{:}] = ndgrid (y{:});
-    endif
-  elseif (any (! cellfun (@isvector, y)))
-    for i = 1 : nd
-      idx (1 : nd) = {1};
-      idx (i) = ":";
-      y{i} = y{i}(idx{:})(:).';
-    endfor
-  endif
+  method = tolower (method);
 
-  method = tolower (method);
   if (strcmp (method, "linear"))
     vi = __lin_interpn__ (x{:}, v, y{:});
     vi (isna (vi)) = extrapval;
   elseif (strcmp (method, "nearest"))
     yshape = size (y{1});
     yidx = cell (1, nd);
     for i = 1 : nd
       y{i} = y{i}(:);
       yidx{i} = lookup (x{i}(2:end-1), y{i}) + 1;
     endfor
     idx = cell (1,nd);
     for i = 1 : nd
-      idx{i} = yidx{i} + (y{i} - x{i}(yidx{i}).' > x{i}(yidx{i} + 1).' - y{i});
+      idx{i} = yidx{i} + (y{i} - x{i}(yidx{i}) > x{i}(yidx{i} + 1) - y{i});
     endfor
     vi = v (sub2ind (sz, idx{:}));
     idx = zeros (prod(yshape),1);
     for i = 1 : nd
       idx |= y{i} < min (x{i}(:)) | y{i} > max (x{i}(:));
     endfor
     vi(idx) = extrapval;
     vi = reshape (vi, yshape); 
   elseif (strcmp (method, "spline"))
+    szi = size (y{1});
+    for i = 1 : nd
+      y{i} = y{i}(:);
+    endfor
+
     vi = __splinen__ (x, v, y, extrapval, "interpn");
+
+    ## get all diagonal elements of vi
+    sc = sum ([1 cumprod(size (vi)(1:end-1))]);
+    vi = vi(sc * [0:size(vi,1)-1] + 1);
+    vi = reshape (vi,szi);    
   elseif (strcmp (method, "cubic")) 
     error ("cubic interpolation not yet implemented");
   else
     error ("unrecognized interpolation method");
   endif
 
 endfunction
 
 %!demo
 %! A=[13,-1,12;5,4,3;1,6,2];
 %! x=[0,1,4]; y=[10,11,12];
 %! xi=linspace(min(x),max(x),17);
-%! yi=linspace(min(y),max(y),26)';
+%! AI=linspace(min(y),max(y),26)';
 %! mesh(xi,yi,interpn(x,y,A.',xi,yi,"linear").');
 %! [x,y] = meshgrid(x,y); 
 %! hold on; plot3(x(:),y(:),A(:),"b*"); hold off;
 
 %!demo
 %! A=[13,-1,12;5,4,3;1,6,2];
 %! x=[0,1,4]; y=[10,11,12];
 %! xi=linspace(min(x),max(x),17);
@@ -220,8 +219,18 @@ endfunction
 %! f = @(x,y,z) x.^2 - y - z.^2;
 %! [xx, yy, zz] = meshgrid (x, y, z);
 %! v = f (xx,yy,zz);
 %! xi = yi = zi = -1:0.1:1;
 %! [xxi, yyi, zzi] = ndgrid (xi, yi, zi);
 %! vi = interpn(x, y, z, v, xxi, yyi, zzi, 'spline');
 %! mesh (yi, zi, squeeze (vi(1,:,:)));
 
+
+%!test
+%! [x,y,z] = ndgrid(0:2);
+%! f = x+y+z;
+%! assert (interpn(x,y,z,f,[.5 1.5],[.5 1.5],[.5 1.5]), [1.5, 4.5])
+%! assert (interpn(x,y,z,f,[.51 1.51],[.51 1.51],[.51 1.51],'nearest'), [3, 6])
+%! assert (interpn(x,y,z,f,[.5 1.5],[.5 1.5],[.5 1.5],'spline'), [1.5, 4.5])
+%! assert (interpn(x,y,z,f,x,y,z), f)
+%! assert (interpn(x,y,z,f,x,y,z,'nearest'), f)
+%! assert (interpn(x,y,z,f,x,y,z,'spline'), f)
diff --git a/scripts/plot/__patch__.m b/scripts/plot/__patch__.m
--- a/scripts/plot/__patch__.m
+++ b/scripts/plot/__patch__.m
@@ -119,23 +119,23 @@ function [h, fail] = __patch__ (p, varar
       vert = [x(:), y(:)];
     endif
     faces = reshape (1:numel(x), rows (x), columns (x));
     faces = faces';
   elseif (have_faces)
     nr = size (faces, 2);
     nc = size (faces, 1);
     idx = faces .';
-    for i = 1: nc
-      t1 = isnan (idx (:,i));
-      if (any (t1))
-	t2 = find (t1(1:end-1) != t1(2:end))(1);
-        idx(t1,i) = idx(t2,i);
-      endif
-    endfor
+    t1 = isnan (idx);
+    if (any (t1))
+      t2 = find (t1 != t1([2:end,end],:));
+      idx (t1) = idx (t2 (cell2mat (cellfun (@(x) x(1)*ones(1,x(2)),
+		mat2cell ([1 : length(t2); sum(t1)], 2, ones(1,length(t2))), 
+					     "UniformOutput", false))));
+    endif
     x = reshape (vert(:,1)(idx), size (idx));
     y = reshape (vert(:,2)(idx), size (idx));
     if (size(vert,2) > 2)
       have_z = true;
       z = reshape (vert(:,3)(idx), size (idx));
     endif
   else
     error ("patch: not supported");
diff --git a/scripts/plot/__scatter__.m b/scripts/plot/__scatter__.m
--- a/scripts/plot/__scatter__.m
+++ b/scripts/plot/__scatter__.m
@@ -24,18 +24,25 @@ function h = __scatter__ (varargin)
   nd = varargin{2};
   fcn = varargin{3};
   x = varargin{4}(:);
   y = varargin{5}(:);
   istart = 6;
 
   if (nd == 3)
     z = varargin{6}(:);
+    idx = isnan(x) | isnan (y) | isnan (z);
+    x (idx) = [];
+    y (idx) = [];
+    z (idx) = [];
     istart = 7;
   else
+    idx = isnan(x) | isnan (y);
+    x (idx) = [];
+    y (idx) = [];
     z = zeros (length (x), 0);
   endif
 
   firstnonnumeric = Inf;
   for i = istart:nargin
     if (! isnumeric (varargin{i}))
       firstnonnumeric = i;
       break;
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,13 @@
+2008-01-25  David Bateman  <dbateman@free.fr>
+
+	* DLD-FUNCTIONS/rand.cc (Frandp): Relax relative error on randp
+	tests.
+
 2008-01-25  Michael Goffioul  <michael.goffioul@gmail.com>
 
 	* graphics.h.in (base_properties::get_backend,
 	base_graphics_object::get_backend, graphics_backend::get_backend):
 	New methods for convenient access to the backend.
 	(figure::get_backend, figure::set_backend): Remove.
 	* graphics.cc (base_properties::get_backend): New method.
 	(Fdrawnow): Use graphics_object::get_backend to simplify code.
diff --git a/src/DLD-FUNCTIONS/rand.cc b/src/DLD-FUNCTIONS/rand.cc
--- a/src/DLD-FUNCTIONS/rand.cc
+++ b/src/DLD-FUNCTIONS/rand.cc
@@ -932,30 +932,30 @@ D 50 p1284, 1994\n\
 %! assert(randp(5,1,6),[5 5 3 7 7 3])
 %!test
 %! % Test fixed state
 %! randp("state",1);
 %! assert(randp(15,1,6),[13 15 8 18 18 15])
 %!test
 %! % Test fixed state
 %! randp("state",1);
-%! assert(randp(1e9,1,6),[999915677 999976657 1000047684 1000019035 999985749 999977692],1e-6)
+%! assert(randp(1e9,1,6),[999915677 999976657 1000047684 1000019035 999985749 999977692],-1e-6)
 %!test
 %! % Test fixed state
 %! randp("seed",1);
 %! %%assert(randp(5,1,6),[8 2 3 6 6 8])
 %! assert(randp(5,1,5),[8 2 3 6 6])
 %!test
 %! % Test fixed state
 %! randp("seed",1);
 %! assert(randp(15,1,6),[15 16 12 10 10 12])
 %!test
 %! % Test fixed state
 %! randp("seed",1);
-%! assert(randp(1e9,1,6),[1000006208 1000012224 999981120 999963520 999963072 999981440])
+%! assert(randp(1e9,1,6),[1000006208 1000012224 999981120 999963520 999963072 999981440],-1e-6)
 %!test
 %! if (__random_statistical_tests__)
 %!   % statistical tests may fail occasionally.
 %!   randp("state",12)
 %!   for a=[5, 15, 1e9; 0.03, 0.03, -5e-3; 0.03, 0.03, 0.03]
 %!     x = randp(a(1),100000,1);
 %!     assert(min(x)>=0); % *** Please report this!!! ***
 %!     assert(mean(x),a(1),a(2));
