# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1531935108 14400
#      Wed Jul 18 13:31:48 2018 -0400
# Node ID e1c3d1c6e8962fab56856f0e043c293ad75ba012
# Parent  be45013e779454f0edeb7d04976df5df4194e67c
don't substitute api.prefix style in bison input files

* oct-tex-parser.yy: Rename from oct-tex-parser.in.yy.  Don't
substitute api.prefix definition.  Expect current bison syntax.

* oct-parse.yy: Rename from oct-parse.in.yy.  Don't substitute
api.prefix definition.  Expect current bison syntax.

* libinterp/parse-tree/module.mk, libinterp/corefcn/module.mk:
Update file lists.  Don't generate .yy files form .in.yy files.

* Makefile.am (subst-bison-api-decls): Delete macro definition.

* acinclude.m4 (OCTAVE_PROG_BISON): Remove obsolete check for
push/pull declaration style.  Disable bison and warn if prefix
declaration style doesn't match "api brace".

* mk-builtins.pl: Strip "yy" suffix instead of "in.yy".

diff --git a/Makefile.am b/Makefile.am
--- a/Makefile.am
+++ b/Makefile.am
@@ -457,48 +457,16 @@ define build-info-commands
 endef
 
 define simple-filter-rule
   rm -f $@-t $@ && \
   ${SHELL} $(1) < $< > $@-t && \
   mv $@-t $@
 endef
 
-define subst-bison-api-decls
-  case "${BISON_API_PREFIX_DECL_STYLE}" in \
-    *api*) \
-      case "${BISON_API_PREFIX_DECL_STYLE}" in \
-       *brace*) \
-         api_prefix_decl='%define api.prefix {$(1)}'; ;; \
-       *) \
-         api_prefix_decl='%define api.prefix "$(1)"'; ;; \
-       esac; \
-      ;; \
-    *name*) \
-      case "${BISON_API_PREFIX_DECL_STYLE}" in \
-        *brace*) \
-          api_prefix_decl='%name-prefix {$(1)}'; ;; \
-        *) \
-          api_prefix_decl='%name-prefix="$(1)"'; ;; \
-      esac; \
-    ;; \
-  esac; \
-  case "${BISON_PUSH_PULL_DECL_STYLE}" in \
-    *quote*) quote='"' ;; \
-    *) quote="" ;; \
-  esac; \
-  case "${BISON_PUSH_PULL_DECL_STYLE}" in \
-    *dash*) push_pull_decl="%define api.push-pull $${quote}both$${quote}"; ;; \
-    *underscore*) push_pull_decl="%define api.push_pull $${quote}both$${quote}"; ;; \
-  esac; \
-  ${SED} -e "s/%PUSH_PULL_DECL%/$$push_pull_decl/" \
-         -e "s/%API_PREFIX_DECL%/$$api_prefix_decl/" $< > $@-t && \
-  mv $@-t $@
-endef
-
 define gdbinit-install-rule
   if [ -f $@ ] && ! cmp -s $< $@; then \
     echo "refusing to overwrite $@ with newer version from $<" 1>&2; \
   else \
     cp $< $@; \
   fi
 endef
 
diff --git a/libinterp/corefcn/module.mk b/libinterp/corefcn/module.mk
--- a/libinterp/corefcn/module.mk
+++ b/libinterp/corefcn/module.mk
@@ -294,19 +294,16 @@ COREFCN_SRC = \
 
 %reldir%/oct-tex-symbols.cc: %reldir%/oct-tex-symbols.in | %reldir%/$(octave_dirstamp)
 	$(AM_V_GEN)rm -f $@-t && \
 	$(AWK) 'BEGIN { print "// DO NOT EDIT. AUTOMATICALLY GENERATED FROM oct-tex-symbols.in."; print "static uint32_t symbol_codes[][2] = {"; count = 0; } END { print "};"; printf("static int num_symbol_codes = %d;\n", count); } !/^#/ && (NF == 3) { printf("  { %s, %s },\n", $$2, $$3); count++; }' $< > $@-t && \
 	mv $@-t $@
 
 %reldir%/oct-tex-lexer.cc: LEX_OUTPUT_ROOT := lex.octave_tex_
 
-%reldir%/oct-tex-parser.yy: %reldir%/oct-tex-parser.in.yy
-	$(AM_V_GEN)$(call subst-bison-api-decls,octave_tex_)
-
 noinst_LTLIBRARIES += \
   %reldir%/libcorefcn.la
 
 %canon_reldir%_libcorefcn_la_SOURCES = $(COREFCN_SRC)
 
 %canon_reldir%_libcorefcn_la_CPPFLAGS = \
   $(libinterp_liboctinterp_la_CPPFLAGS) \
   $(FFTW_XCPPFLAGS) \
@@ -320,13 +317,12 @@ libinterp_EXTRA_DIST += \
   %reldir%/default-defs.in.h \
   %reldir%/genprops.awk \
   %reldir%/graphics.in.h \
   %reldir%/mk-errno-list.sh \
   %reldir%/mk-mxarray-h.in.sh \
   %reldir%/mxarray.in.h \
   %reldir%/oct-errno.in.cc \
   %reldir%/oct-tex-lexer.in.ll \
-  %reldir%/oct-tex-parser.in.yy \
   %reldir%/oct-tex-symbols.in
 
 GEN_CONFIG_SHELL += \
   %reldir%/mk-mxarray-h.sh
diff --git a/libinterp/corefcn/oct-tex-parser.in.yy b/libinterp/corefcn/oct-tex-parser.yy
rename from libinterp/corefcn/oct-tex-parser.in.yy
rename to libinterp/corefcn/oct-tex-parser.yy
--- a/libinterp/corefcn/oct-tex-parser.in.yy
+++ b/libinterp/corefcn/oct-tex-parser.yy
@@ -43,19 +43,18 @@ static void yyerror (text_parser_tex& pa
    // restore the warning state prior to functions we define at
    // the bottom of the file.
 #  pragma GCC diagnostic push
 #  pragma GCC diagnostic ignored "-Wold-style-cast"
 #endif
 
 %}
 
-%API_PREFIX_DECL%
-
 %define api.pure
+%define api.prefix { octave_tex_ }
 %parse-param { text_parser_tex& parser }
 %lex-param { void *scanner }
 
 %code requires {#include <string>}
 
 %union
 {
   // Leaf symbols produced by the scanner.
diff --git a/libinterp/mk-builtins.pl b/libinterp/mk-builtins.pl
--- a/libinterp/mk-builtins.pl
+++ b/libinterp/mk-builtins.pl
@@ -164,17 +164,17 @@ namespace octave
     $file = $arg;
 
     if (! -f $file)
     {
       $file = "$srcdir/$file";
     }
 
     ($fcn = $arg) =~ s,.*/,,;
-    $fcn =~ s/\.(cc|cpp|in\.cc|in\.yy|ll)$//;
+    $fcn =~ s/\.(cc|cpp|in\.cc|yy|ll)$//;
     $fcn =~ s/-/_/g;
     $fcn = "install_${fcn}_fcns";
 
     $fcn_header = "\n  static void
   $fcn (symbol_table& symtab)
   {
     std::string file = \"$arg\";";
 
diff --git a/libinterp/module.mk b/libinterp/module.mk
--- a/libinterp/module.mk
+++ b/libinterp/module.mk
@@ -33,36 +33,31 @@ BUILT_SOURCES += \
   %reldir%/corefcn/graphics.h \
   %reldir%/corefcn/mxarray.h \
   %reldir%/corefcn/oct-tex-parser.h \
   %reldir%/corefcn/oct-tex-symbols.cc \
   %reldir%/parse-tree/oct-gperf.h \
   %reldir%/parse-tree/oct-parse.h
 
 ULT_PARSER_SRC := \
-  %reldir%/corefcn/oct-tex-lexer.in.ll \
-  %reldir%/corefcn/oct-tex-parser.in.yy \
-  %reldir%/parse-tree/oct-parse.in.yy
+  %reldir%/corefcn/oct-tex-lexer.in.ll
 
 GENERATED_PARSER_FILES := \
   %reldir%/corefcn/oct-tex-lexer.ll \
   %reldir%/corefcn/oct-tex-parser.h \
-  %reldir%/corefcn/oct-tex-parser.yy \
-  %reldir%/parse-tree/oct-parse.yy
+  %reldir%/parse-tree/oct-parse.h
 
 ## These generated files are included in the source distribution to
 ## avoid needing certain tools to build from a distribution tarball.
 
 LIBINTERP_BUILT_DISTFILES = \
   $(GENERATED_PARSER_FILES) \
   $(OPT_HANDLERS) \
-  %reldir%/corefcn/oct-tex-parser.h \
   %reldir%/corefcn/oct-tex-symbols.cc \
-  %reldir%/parse-tree/oct-gperf.h \
-  %reldir%/parse-tree/oct-parse.h
+  %reldir%/parse-tree/oct-gperf.h
 
 ## Files that are created during build process and installed,
 ## BUT not distributed in tarball.
 LIBINTERP_BUILT_NODISTFILES = \
   %reldir%/build-env-features.cc \
   %reldir%/build-env.cc \
   %reldir%/builtin-defun-decls.h \
   %reldir%/builtins.cc \
diff --git a/libinterp/op-kw-docs b/libinterp/op-kw-docs
--- a/libinterp/op-kw-docs
+++ b/libinterp/op-kw-docs
@@ -12,384 +12,384 @@
 ## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 ## GNU General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <https://www.gnu.org/licenses/>.
 
 !
-@c libinterp/parse-tree/oct-parse.in.yy
+@c libinterp/parse-tree/oct-parse.yy
 -*- texinfo -*-
 @deftypefn {} {} !
 Logical 'not' operator.
 @seealso{~, not}
 @end deftypefn
 ~
-@c libinterp/parse-tree/oct-parse.in.yy
+@c libinterp/parse-tree/oct-parse.yy
 -*- texinfo -*-
 @deftypefn {} {} ~
 Logical 'not' operator.
 
 The symbol may also be used to discard outputs of a function that are unwanted
 without using a temporary variable.
 
 @example
 [~, @var{idx_of_max}] = max (@var{x})
 @end example
 @seealso{!, not}
 @end deftypefn
 !=
-@c libinterp/parse-tree/oct-parse.in.yy
+@c libinterp/parse-tree/oct-parse.yy
 -*- texinfo -*-
 @deftypefn {} {} !=
 Logical 'not equals' operator.
 @seealso{~=, ne}
 @end deftypefn
 ~=
-@c libinterp/parse-tree/oct-parse.in.yy
+@c libinterp/parse-tree/oct-parse.yy
 -*- texinfo -*-
 @deftypefn {} {} ~=
 Logical 'not equals' operator.
 @seealso{!=, ne}
 @end deftypefn
 "
-@c libinterp/parse-tree/oct-parse.in.yy
+@c libinterp/parse-tree/oct-parse.yy
 -*- texinfo -*-
 @deftypefn {} {} "
 String delimiter.
 
 Escape sequences within double-quoted strings are expanded.  I.e., "\n" is a
 1-character string representing a newline.  See the single quote delimiter (')
 to create strings without escape sequence processing.
 @seealso{'}
 @end deftypefn
 #
-@c libinterp/parse-tree/oct-parse.in.yy
+@c libinterp/parse-tree/oct-parse.yy
 -*- texinfo -*-
 @deftypefn {} {} #
 Begin comment character.
 @seealso{%, #@\{}
 @end deftypefn
 %
-@c libinterp/parse-tree/oct-parse.in.yy
+@c libinterp/parse-tree/oct-parse.yy
 -*- texinfo -*-
 @deftypefn {} {} %
 Begin comment character.
 @seealso{#, %@\{}
 @end deftypefn
 #{
-@c libinterp/parse-tree/oct-parse.in.yy
+@c libinterp/parse-tree/oct-parse.yy
 -*- texinfo -*-
 @deftypefn {} {} #@{
 Begin block comment.
 
 There must be no other characters, other than whitespace, on the line before
 and after @code{#@{}.  It is possible to nest block comments.
 @seealso{%@\{, #@\}, #}
 @end deftypefn
 %{
-@c libinterp/parse-tree/oct-parse.in.yy
+@c libinterp/parse-tree/oct-parse.yy
 -*- texinfo -*-
 @deftypefn {} {} %@{
 Begin block comment.
 
 There must be no other characters, other than whitespace, on the line before
 and after @code{%@{}.  It is possible to nest block comments.
 @seealso{#@\{, %@\}, %}
 @end deftypefn
 #}
-@c libinterp/parse-tree/oct-parse.in.yy
+@c libinterp/parse-tree/oct-parse.yy
 -*- texinfo -*-
 @deftypefn {} {} #@}
 Close block comment.
 
 There must be no other characters, other than whitespace, on the line before
 and after @code{#@}}.  It is possible to nest block comments.
 @seealso{%@\}, #@\{, #}
 @end deftypefn
 %}
-@c libinterp/parse-tree/oct-parse.in.yy
+@c libinterp/parse-tree/oct-parse.yy
 -*- texinfo -*-
 @deftypefn {} {} %@}
 Close block comment.
 
 There must be no other characters, other than whitespace, on the line before
 and after @code{%@}}.  It is possible to nest block comments.
 @seealso{#@\}, %@\{, %}
 @end deftypefn
 ...
-@c libinterp/parse-tree/oct-parse.in.yy
+@c libinterp/parse-tree/oct-parse.yy
 -*- texinfo -*-
 @deftypefn {} {} ...
 Continuation marker.
 
 Joins current line with following line before parsing.
 @end deftypefn
 &
-@c libinterp/parse-tree/oct-parse.in.yy
+@c libinterp/parse-tree/oct-parse.yy
 -*- texinfo -*-
 @deftypefn {} {} &
 Element by element logical 'and' operator.
 @seealso{&&, and}
 @end deftypefn
 &&
-@c libinterp/parse-tree/oct-parse.in.yy
+@c libinterp/parse-tree/oct-parse.yy
 -*- texinfo -*-
 @deftypefn {} {} &&
 Logical 'and' operator (with short-circuit evaluation).
 @seealso{&, and}
 @end deftypefn
 '
-@c libinterp/parse-tree/oct-parse.in.yy
+@c libinterp/parse-tree/oct-parse.yy
 -*- texinfo -*-
 @deftypefn {} {} '
 Matrix transpose operator or string delimiter.
 
 For complex matrices, computes the complex conjugate (Hermitian) transpose.
 
 The single quote character may also be used to delimit strings.  Escape
 sequences within single-quoted strings are not expanded.  I.e., '\n' is a
 2-character string '\' and 'n' rather than "\n" which is a single character
 representing a newline.
 @seealso{.', transpose, "}
 @end deftypefn
 (
-@c libinterp/parse-tree/oct-parse.in.yy
+@c libinterp/parse-tree/oct-parse.yy
 -*- texinfo -*-
 @deftypefn {} {} (
 Array index or function argument delimiter.
 @end deftypefn
 )
-@c libinterp/parse-tree/oct-parse.in.yy
+@c libinterp/parse-tree/oct-parse.yy
 -*- texinfo -*-
 @deftypefn {} {})
 Array index or function argument delimiter.
 @end deftypefn
 *
-@c libinterp/parse-tree/oct-parse.in.yy
+@c libinterp/parse-tree/oct-parse.yy
 -*- texinfo -*-
 @deftypefn {} {} *
 Multiplication operator.
 @seealso{.*, times}
 @end deftypefn
 **
-@c libinterp/parse-tree/oct-parse.in.yy
+@c libinterp/parse-tree/oct-parse.yy
 -*- texinfo -*-
 @deftypefn {} {} **
 Power operator.
 
 This may return complex results for real inputs.  Use @code{realsqrt},
 @code{cbrt}, @code{nthroot}, or @code{realroot} to obtain real results when
 possible.
 @seealso{power, ^, .**, .^, realpow, realsqrt, cbrt, nthroot}
 @end deftypefn
 ^
-@c libinterp/parse-tree/oct-parse.in.yy
+@c libinterp/parse-tree/oct-parse.yy
 -*- texinfo -*-
 @deftypefn {} {} ^
 Power operator.
 
 This may return complex results for real inputs.  Use @code{realsqrt},
 @code{cbrt}, @code{nthroot}, or @code{realroot} to obtain real results when
 possible.
 @seealso{power, **, .^, .**, realpow, realsqrt, cbrt, nthroot}
 @end deftypefn
 +
-@c libinterp/parse-tree/oct-parse.in.yy
+@c libinterp/parse-tree/oct-parse.yy
 -*- texinfo -*-
 @deftypefn {} {} +
 Addition operator.
 @seealso{plus}
 @end deftypefn
 ++
-@c libinterp/parse-tree/oct-parse.in.yy
+@c libinterp/parse-tree/oct-parse.yy
 -*- texinfo -*-
 @deftypefn {} {} ++
 Increment operator.
 
 As in C, may be applied as a prefix or postfix operator.
 @seealso{--}
 @end deftypefn
 ,
-@c libinterp/parse-tree/oct-parse.in.yy
+@c libinterp/parse-tree/oct-parse.yy
 -*- texinfo -*-
 @deftypefn {} {} ,
 Array index, function argument, or command separator.
 @end deftypefn
 -
-@c libinterp/parse-tree/oct-parse.in.yy
+@c libinterp/parse-tree/oct-parse.yy
 -*- texinfo -*-
 @deftypefn {} {} -
 Subtraction or unary negation operator.
 @seealso{minus}
 @end deftypefn
 --
-@c libinterp/parse-tree/oct-parse.in.yy
+@c libinterp/parse-tree/oct-parse.yy
 -*- texinfo -*-
 @deftypefn {} {} --
 Decrement operator.
 
 As in C, may be applied as a prefix or postfix operator.
 @seealso{++}
 @end deftypefn
 .'
-@c libinterp/parse-tree/oct-parse.in.yy
+@c libinterp/parse-tree/oct-parse.yy
 -*- texinfo -*-
 @deftypefn {} {} .'
 Matrix transpose operator.
 
 For complex matrices, computes the transpose, @emph{not} the complex conjugate
 (Hermitian) transpose.
 @seealso{', transpose}
 @end deftypefn
 .*
-@c libinterp/parse-tree/oct-parse.in.yy
+@c libinterp/parse-tree/oct-parse.yy
 -*- texinfo -*-
 @deftypefn {} {} .*
 Element by element multiplication operator.
 @seealso{*, times}
 @end deftypefn
 .**
-@c libinterp/parse-tree/oct-parse.in.yy
+@c libinterp/parse-tree/oct-parse.yy
 -*- texinfo -*-
 @deftypefn {} {} .**
 Element by element power operator.
 
 If several complex results are possible, returns the one with smallest
 non-negative argument (angle).  Use @code{realpow}, @code{realsqrt},
 @code{cbrt}, or @code{nthroot} if a real result is preferred.
 @seealso{**, ^, .^, power, realpow, realsqrt, cbrt, nthroot}
 @end deftypefn
 .^
-@c libinterp/parse-tree/oct-parse.in.yy
+@c libinterp/parse-tree/oct-parse.yy
 -*- texinfo -*-
 @deftypefn {} {} .^
 Element by element power operator.
 
 If several complex results are possible, returns the one with smallest
 non-negative argument (angle).  Use @code{realpow}, @code{realsqrt},
 @code{cbrt}, or @code{nthroot} if a real result is preferred.
 @seealso{.**, ^, **, power, realpow, realsqrt, cbrt, nthroot}
 @end deftypefn
 ./
-@c libinterp/parse-tree/oct-parse.in.yy
+@c libinterp/parse-tree/oct-parse.yy
 -*- texinfo -*-
 @deftypefn {} {} ./
 Element by element right division operator.
 @seealso{/, .\\, rdivide, mrdivide}
 @end deftypefn
 /
-@c libinterp/parse-tree/oct-parse.in.yy
+@c libinterp/parse-tree/oct-parse.yy
 -*- texinfo -*-
 @deftypefn {} {} /
 Right division operator.
 @seealso{./, \\, rdivide, mrdivide}
 @end deftypefn
 .\
-@c libinterp/parse-tree/oct-parse.in.yy
+@c libinterp/parse-tree/oct-parse.yy
 -*- texinfo -*-
 @deftypefn {} {} .\
 Element by element left division operator.
 @seealso{\\, ./, rdivide, mrdivide}
 @end deftypefn
 \
-@c libinterp/parse-tree/oct-parse.in.yy
+@c libinterp/parse-tree/oct-parse.yy
 -*- texinfo -*-
 @deftypefn {} {} \
 Left division operator.
 
 Within double-quoted strings, @samp{\} is the line continuation marker used
 to join the current line with the following line.
 @seealso{.\\, /, ldivide, mldivide}
 @end deftypefn
 :
-@c libinterp/parse-tree/oct-parse.in.yy
+@c libinterp/parse-tree/oct-parse.yy
 -*- texinfo -*-
 @deftypefn {} {} :
 Select entire rows or columns of matrices.
 @end deftypefn
 ;
-@c libinterp/parse-tree/oct-parse.in.yy
+@c libinterp/parse-tree/oct-parse.yy
 -*- texinfo -*-
 @deftypefn {} {} ;
 Array row or command separator.
 @seealso{,}
 @end deftypefn
 <
-@c libinterp/parse-tree/oct-parse.in.yy
+@c libinterp/parse-tree/oct-parse.yy
 -*- texinfo -*-
 @deftypefn {} {} <
 'Less than' operator.
 @seealso{lt}
 @end deftypefn
 <=
-@c libinterp/parse-tree/oct-parse.in.yy
+@c libinterp/parse-tree/oct-parse.yy
 -*- texinfo -*-
 @deftypefn {} {} <=
 'Less than' or 'equals' operator.
 @seealso{le}
 @end deftypefn
 =
-@c libinterp/parse-tree/oct-parse.in.yy
+@c libinterp/parse-tree/oct-parse.yy
 -*- texinfo -*-
 @deftypefn {} {} =
 Assignment operator.
 @end deftypefn
 ==
-@c libinterp/parse-tree/oct-parse.in.yy
+@c libinterp/parse-tree/oct-parse.yy
 -*- texinfo -*-
 @deftypefn {} {} ==
 Equality test operator.
 @seealso{eq}
 @end deftypefn
 >
-@c libinterp/parse-tree/oct-parse.in.yy
+@c libinterp/parse-tree/oct-parse.yy
 -*- texinfo -*-
 @deftypefn {} {} >
 'Greater than' operator.
 @seealso{gt}
 @end deftypefn
 >=
-@c libinterp/parse-tree/oct-parse.in.yy
+@c libinterp/parse-tree/oct-parse.yy
 -*- texinfo -*-
 @deftypefn {} {} >=
 'Greater than' or 'equals' operator.
 @seealso{ge}
 @end deftypefn
 [
-@c libinterp/parse-tree/oct-parse.in.yy
+@c libinterp/parse-tree/oct-parse.yy
 -*- texinfo -*-
 @deftypefn {} {} [
 Return list delimiter.
 @seealso{]}
 @end deftypefn
 ]
-@c libinterp/parse-tree/oct-parse.in.yy
+@c libinterp/parse-tree/oct-parse.yy
 -*- texinfo -*-
 @deftypefn {} {} ]
 Return list delimiter.
 @seealso{[}
 @end deftypefn
 |
-@c libinterp/parse-tree/oct-parse.in.yy
+@c libinterp/parse-tree/oct-parse.yy
 -*- texinfo -*-
 @deftypefn {} {} |
 Element by element logical 'or' operator.
 @seealso{||, or}
 @end deftypefn
 ||
-@c libinterp/parse-tree/oct-parse.in.yy
+@c libinterp/parse-tree/oct-parse.yy
 -*- texinfo -*-
 @deftypefn {} {} ||
 Logical 'or' (with short-circuit evaluation) operator.
 @seealso{|, or}
 @end deftypefn
 @
-@c libinterp/parse-tree/oct-parse.in.yy
+@c libinterp/parse-tree/oct-parse.yy
 -*- texinfo -*-
 @deftypefn {} {} @@
 Return handle to a function.
 
 Example:
 
 @example
 @group
@@ -399,58 +399,58 @@ f (2, 2)
 @end group
 @end example
 
 (Note: @@ also finds use in creating classes.  See manual chapter titled
 Object Oriented Programming for detailed description.)
 @seealso{function, functions, func2str, str2func}
 @end deftypefn
 break
-@c libinterp/parse-tree/oct-parse.in.yy
+@c libinterp/parse-tree/oct-parse.yy
 -*- texinfo -*-
 @deftypefn {} {} break
 Exit the innermost enclosing do, while, or for loop.
 @seealso{do, while, for, parfor, continue}
 @end deftypefn
 case
-@c libinterp/parse-tree/oct-parse.in.yy
+@c libinterp/parse-tree/oct-parse.yy
 -*- texinfo -*-
 @deftypefn  {} {} case @var{value}
 @deftypefnx {} {} case @{@var{value}, @dots{}@}
 A case statement in a switch block.
 
 Octave cases are exclusive and do not fall-through as do C-language cases.  A
 switch statement must have at least one case.  See @code{switch} for an
 example.
 @seealso{switch}
 @end deftypefn
 catch
-@c libinterp/parse-tree/oct-parse.in.yy
+@c libinterp/parse-tree/oct-parse.yy
 -*- texinfo -*-
 @deftypefn  {} {} catch
 @deftypefnx {} {} catch @var{value}
 Begin the cleanup part of a try-catch block.
 @seealso{try}
 @end deftypefn
 classdef
-@c libinterp/parse-tree/oct-parse.in.yy
+@c libinterp/parse-tree/oct-parse.yy
 -*- texinfo -*-
 @deftypefn {} {} classdef
 Begin a classdef block.
 @seealso{properties, methods, events, enumeration}
 @end deftypefn
 continue
-@c libinterp/parse-tree/oct-parse.in.yy
+@c libinterp/parse-tree/oct-parse.yy
 -*- texinfo -*-
 @deftypefn {} {} continue
 Jump to the end of the innermost enclosing do, while, or for loop.
 @seealso{break, do, while, for, parfor}
 @end deftypefn
 do
-@c libinterp/parse-tree/oct-parse.in.yy
+@c libinterp/parse-tree/oct-parse.yy
 -*- texinfo -*-
 @deftypefn {} {} do
 Begin a do-until loop.
 
 This differs from a while loop in that the body of the loop is executed at
 least once.
 
 @example
@@ -459,181 +459,181 @@ i = 0;
 do
   i++
 until (i == 10)
 @end group
 @end example
 @seealso{for, until, while}
 @end deftypefn
 else
-@c libinterp/parse-tree/oct-parse.in.yy
+@c libinterp/parse-tree/oct-parse.yy
 -*- texinfo -*-
 @deftypefn {} {} else
 Alternate action for an if block.  See @code{if} for  an example.
 @seealso{if}
 @end deftypefn
 elseif
-@c libinterp/parse-tree/oct-parse.in.yy
+@c libinterp/parse-tree/oct-parse.yy
 -*- texinfo -*-
 @deftypefn {} {} elseif (@var{condition})
 Alternate conditional test for an if block.  See @code{if} for an example.
 @seealso{if}
 @end deftypefn
 end_try_catch
-@c libinterp/parse-tree/oct-parse.in.yy
+@c libinterp/parse-tree/oct-parse.yy
 -*- texinfo -*-
 @deftypefn {} {} end_try_catch
 Mark the end of a @code{try-catch} block.
 @seealso{try, catch}
 @end deftypefn
 end_unwind_protect
-@c libinterp/parse-tree/oct-parse.in.yy
+@c libinterp/parse-tree/oct-parse.yy
 -*- texinfo -*-
 @deftypefn {} {} end_unwind_protect
 Mark the end of an unwind_protect block.
 @seealso{unwind_protect}
 @end deftypefn
 endclassdef
-@c libinterp/parse-tree/oct-parse.in.yy
+@c libinterp/parse-tree/oct-parse.yy
 -*- texinfo -*-
 @deftypefn {} {} endclassdef
 Mark the end of a classdef definition.
 @seealso{classdef}
 @end deftypefn
 endenumeration
-@c libinterp/parse-tree/oct-parse.in.yy
+@c libinterp/parse-tree/oct-parse.yy
 -*- texinfo -*-
 @deftypefn {} {} endenumeration
 Mark the end of an enumeration block in a classdef definition.
 @seealso{enumeration}
 @end deftypefn
 endevents
-@c libinterp/parse-tree/oct-parse.in.yy
+@c libinterp/parse-tree/oct-parse.yy
 -*- texinfo -*-
 @deftypefn {} {} endevents
 Mark the end of an events block in a classdef definition.
 @seealso{events}
 @end deftypefn
 endfor
-@c libinterp/parse-tree/oct-parse.in.yy
+@c libinterp/parse-tree/oct-parse.yy
 -*- texinfo -*-
 @deftypefn {} {} endfor
 Mark the end of a for loop.  See @code{for} for an example.
 @seealso{for}
 @end deftypefn
 endfunction
-@c libinterp/parse-tree/oct-parse.in.yy
+@c libinterp/parse-tree/oct-parse.yy
 -*- texinfo -*-
 @deftypefn {} {} endfunction
 Mark the end of a function.
 @seealso{function}
 @end deftypefn
 endif
-@c libinterp/parse-tree/oct-parse.in.yy
+@c libinterp/parse-tree/oct-parse.yy
 -*- texinfo -*-
 @deftypefn {} {} endif
 Mark the end of an if block.  See @code{if} for an example.
 @seealso{if}
 @end deftypefn
 endmethods
-@c libinterp/parse-tree/oct-parse.in.yy
+@c libinterp/parse-tree/oct-parse.yy
 -*- texinfo -*-
 @deftypefn {} {} endmethods
 Mark the end of a methods block in a classdef definition.
 @seealso{methods}
 @end deftypefn
 endparfor
-@c libinterp/parse-tree/oct-parse.in.yy
+@c libinterp/parse-tree/oct-parse.yy
 -*- texinfo -*-
 @deftypefn {} {} endparfor
 Mark the end of a parfor loop.  See @code{parfor} for an example.
 @seealso{parfor}
 @end deftypefn
 endproperties
-@c libinterp/parse-tree/oct-parse.in.yy
+@c libinterp/parse-tree/oct-parse.yy
 -*- texinfo -*-
 @deftypefn {} {} endproperties
 Mark the end of a properties block in a classdef definition.
 @seealso{properties}
 @end deftypefn
 endswitch
-@c libinterp/parse-tree/oct-parse.in.yy
+@c libinterp/parse-tree/oct-parse.yy
 -*- texinfo -*-
 @deftypefn {} {} endswitch
 Mark the end of a switch block.  See @code{switch} for an example.
 @seealso{switch}
 @end deftypefn
 endwhile
-@c libinterp/parse-tree/oct-parse.in.yy
+@c libinterp/parse-tree/oct-parse.yy
 -*- texinfo -*-
 @deftypefn {} {} endwhile
 Mark the end of a while loop.  See @code{while} for an example.
 @seealso{do, while}
 @end deftypefn
 enumeration
-@c libinterp/parse-tree/oct-parse.in.yy
+@c libinterp/parse-tree/oct-parse.yy
 -*- texinfo -*-
 @deftypefn {} {} enumeration
 Begin an enumeration block in a classdef definition.
 @end deftypefn
 events
-@c libinterp/parse-tree/oct-parse.in.yy
+@c libinterp/parse-tree/oct-parse.yy
 -*- texinfo -*-
 @deftypefn {} {} events
 Begin an events block in a classdef definition.
 @end deftypefn
 for
-@c libinterp/parse-tree/oct-parse.in.yy
+@c libinterp/parse-tree/oct-parse.yy
 -*- texinfo -*-
 @deftypefn {} {} for @var{i} = @var{range}
 Begin a for loop.
 
 @example
 @group
 for i = 1:10
   i
 endfor
 @end group
 @end example
 @seealso{parfor, do, while}
 @end deftypefn
 function
-@c libinterp/parse-tree/oct-parse.in.yy
+@c libinterp/parse-tree/oct-parse.yy
 -*- texinfo -*-
 @deftypefn  {} {} function @var{outputs} = function_name (@var{input}, @dots{})
 @deftypefnx {} {} function {} function_name (@var{input}, @dots{})
 @deftypefnx {} {} function @var{outputs} = function_name
 Begin a function body with name @code{function_name}, with @var{outputs} as
 results, and with @var{inputs} as parameters.  The function can later be
 invoked in Octave using the syntax
 
 @example
 [@var{output1}, @var{output2}, @dots{}] = function_name (@var{input1}, @var{input2}, @dots{})
 @end example
 
 @seealso{return}
 @end deftypefn
 global
-@c libinterp/parse-tree/oct-parse.in.yy
+@c libinterp/parse-tree/oct-parse.yy
 -*- texinfo -*-
 @deftypefn {} {} global @var{var}
 Declare variables to have global scope.
 
 @example
 @group
 global @var{x};
 if (isempty (@var{x}))
   x = 1;
 endif
 @end group
 @end example
 @seealso{persistent}
 @end deftypefn
 if
-@c libinterp/parse-tree/oct-parse.in.yy
+@c libinterp/parse-tree/oct-parse.yy
 -*- texinfo -*-
 @deftypefn  {} {} if (@var{cond}) @dots{} endif
 @deftypefnx {} {} if (@var{cond}) @dots{} else @dots{} endif
 @deftypefnx {} {} if (@var{cond}) @dots{} elseif (@var{cond}) @dots{} endif
 @deftypefnx {} {} if (@var{cond}) @dots{} elseif (@var{cond}) @dots{} else @dots{} endif
 Begin an if block.
 
 @example
@@ -648,80 +648,80 @@ else
 endif
 @end group
 @end example
 @seealso{switch}
 @end deftypefn
 @c ## FIXME: Can't have duplicate DOCSTRING entries.  The function methods
 @c ##        already has a docstring which overrides this keyword definition.
 @c #methods
-@c #@c libinterp/parse-tree/oct-parse.in.yy
+@c #@c libinterp/parse-tree/oct-parse.yy
 @c #-*- texinfo -*-
 @c #@deftypefn {} {} methods
 @c #Begin a methods block in a classdef definition.
 @c #@end deftypefn
 otherwise
-@c libinterp/parse-tree/oct-parse.in.yy
+@c libinterp/parse-tree/oct-parse.yy
 -*- texinfo -*-
 @deftypefn {} {} otherwise
 The default statement in a switch block which is executed when no other
 case statements match the input.
 @seealso{switch, case}
 @end deftypefn
 parfor
-@c libinterp/parse-tree/oct-parse.in.yy
+@c libinterp/parse-tree/oct-parse.yy
 -*- texinfo -*-
 @deftypefn  {} {} parfor @var{i} = @var{range}
 @deftypefnx {} {} parfor (@var{i} = @var{range}, @var{maxproc})
 Begin a for loop that may execute in parallel.
 
 @example
 @group
 parfor i = 1:10
   i
 endparfor
 @end group
 @end example
 @seealso{for, do, while}
 @end deftypefn
 persistent
-@c libinterp/parse-tree/oct-parse.in.yy
+@c libinterp/parse-tree/oct-parse.yy
 -*- texinfo -*-
 @deftypefn {} {} persistent @var{var}
 Declare variables as persistent.
 
 A variable that has been declared persistent within a function will retain its
 contents in memory between subsequent calls to the same function.  The
 difference between persistent variables and global variables is that persistent
 variables are local in scope to a particular function and are not visible
 elsewhere.
 @seealso{global}
 @end deftypefn
 properties
-@c libinterp/parse-tree/oct-parse.in.yy
+@c libinterp/parse-tree/oct-parse.yy
 -*- texinfo -*-
 @deftypefn {} {} properties
 Begin a properties block in a classdef definition.
 @end deftypefn
 return
-@c libinterp/parse-tree/oct-parse.in.yy
+@c libinterp/parse-tree/oct-parse.yy
 -*- texinfo -*-
 @deftypefn {} {} return
 Return from a function.
 @seealso{function}
 @end deftypefn
 static
-@c libinterp/parse-tree/oct-parse.in.yy
+@c libinterp/parse-tree/oct-parse.yy
 -*- texinfo -*-
 @deftypefn {} {} static
 This statement has been deprecated in favor of @code{persistent}.
 @seealso{persistent}
 @end deftypefn
 switch
-@c libinterp/parse-tree/oct-parse.in.yy
+@c libinterp/parse-tree/oct-parse.yy
 -*- texinfo -*-
 @deftypefn {} {} switch @var{statement}
 Begin a switch block.
 
 @example
 @group
 yesno = "yes";
 
@@ -733,69 +733,69 @@ switch (yesno)
   otherwise
     error ("invalid value");
 endswitch
 @end group
 @end example
 @seealso{if, case, otherwise}
 @end deftypefn
 try
-@c libinterp/parse-tree/oct-parse.in.yy
+@c libinterp/parse-tree/oct-parse.yy
 -*- texinfo -*-
 @deftypefn {} {} try
 Begin a try-catch block.
 
 If an error occurs within a try block, then the catch code will be run and
 execution will proceed after the catch block (though it is often recommended to
 use the lasterr function to re-throw the error after cleanup is completed).
 @seealso{catch, unwind_protect}
 @end deftypefn
 until
-@c libinterp/parse-tree/oct-parse.in.yy
+@c libinterp/parse-tree/oct-parse.yy
 -*- texinfo -*-
 @deftypefn {} {} until (@var{cond})
 End a do-until loop.  See @code{do} for an example.
 @seealso{do}
 @end deftypefn
 unwind_protect
-@c libinterp/parse-tree/oct-parse.in.yy
+@c libinterp/parse-tree/oct-parse.yy
 -*- texinfo -*-
 @deftypefn {} {} unwind_protect
 Begin an unwind_protect block.
 
 If an error occurs within the first part of an unwind_protect block the
 commands within the unwind_protect_cleanup block are executed before the error
 is thrown.  If an error is not thrown, then the unwind_protect_cleanup block is
 still executed.  In other words, the unwind_protect_cleanup code is guaranteed
 to execute regardless of success or failure in the unwind_protect block.
 @seealso{unwind_protect_cleanup, try}
 @end deftypefn
 unwind_protect_cleanup
-@c libinterp/parse-tree/oct-parse.in.yy
+@c libinterp/parse-tree/oct-parse.yy
 -*- texinfo -*-
 @deftypefn {} {} unwind_protect_cleanup
 Begin the cleanup section of an unwind_protect block.
 @seealso{unwind_protect}
 @end deftypefn
 varargin
-@c libinterp/parse-tree/oct-parse.in.yy
+@c libinterp/parse-tree/oct-parse.yy
 -*- texinfo -*-
 @deftypefn {} {} varargin
 Pass an arbitrary number of arguments into a function.
 @seealso{varargout, nargin, isargout, nargout, nthargout}
 @end deftypefn
 varargout
-@c libinterp/parse-tree/oct-parse.in.yy
+@c libinterp/parse-tree/oct-parse.yy
 -*- texinfo -*-
 @deftypefn {} {} varargout
 Pass an arbitrary number of arguments out of a function.
 @seealso{varargin, nargin, isargout, nargout, nthargout}
 @end deftypefn
 while
-@c libinterp/parse-tree/oct-parse.in.yy
+@c libinterp/parse-tree/oct-parse.yy
 -*- texinfo -*-
 @deftypefn {} {} while
 Begin a while loop.
 
 @example
 @group
 i = 0;
 while (i < 10)
diff --git a/libinterp/parse-tree/module.mk b/libinterp/parse-tree/module.mk
--- a/libinterp/parse-tree/module.mk
+++ b/libinterp/parse-tree/module.mk
@@ -99,23 +99,19 @@ PARSE_TREE_SRC = \
 ## oct-gperf.h file.
 %reldir%/oct-gperf.h: %reldir%/octave.gperf
 	$(AM_V_GEN)rm -f $@-t $@t1 $@ && \
 	$(GPERF) -t -C -D -G -L C++ -Z octave_kw_hash $< > $@-t1 && \
 	$(SED) -e 's,lookup\[,gperf_lookup[,' -e 's,register ,,g' < $@-t1 > $@-t && \
 	mv $@-t $@ && \
 	rm -f $@-t1
 
-%reldir%/oct-parse.yy: %reldir%/oct-parse.in.yy
-	$(AM_V_GEN)$(call subst-bison-api-decls,octave_)
-
 noinst_LTLIBRARIES += \
   %reldir%/libparse-tree.la
 
 %canon_reldir%_libparse_tree_la_SOURCES = $(PARSE_TREE_SRC)
 
 %canon_reldir%_libparse_tree_la_CPPFLAGS = \
   $(libinterp_liboctinterp_la_CPPFLAGS) \
   $(LLVM_CPPFLAGS)
 
 libinterp_EXTRA_DIST += \
-  %reldir%/oct-parse.in.yy \
   %reldir%/octave.gperf
diff --git a/libinterp/parse-tree/oct-parse.in.yy b/libinterp/parse-tree/oct-parse.yy
rename from libinterp/parse-tree/oct-parse.in.yy
rename to libinterp/parse-tree/oct-parse.yy
--- a/libinterp/parse-tree/oct-parse.in.yy
+++ b/libinterp/parse-tree/oct-parse.yy
@@ -123,17 +123,17 @@ static void yyerror (octave::base_parser
 // reentrant because both still use many global variables.  It should be
 // safe to create a parser object and call it while another parser
 // object is active (to parse a callback function while the main
 // interactive parser is waiting for input, for example) if you take
 // care to properly save and restore (typically with an unwind_protect
 // object) relevant global values before and after the nested call.
 
 %define api.pure
-%PUSH_PULL_DECL%
+%define api.prefix { octave_ }
 %parse-param { octave::base_parser& parser }
 %lex-param { void *lexer.scanner }
 
 %union
 {
   int dummy_type;
 
   // The type of the basic tokens returned by the lexer.
diff --git a/m4/acinclude.m4 b/m4/acinclude.m4
--- a/m4/acinclude.m4
+++ b/m4/acinclude.m4
@@ -3179,80 +3179,28 @@ EOF
         fi
       done
       rm -f conftest.yy y.tab.h y.tab.c
       ])
   fi
 
   AC_SUBST(BISON_API_PREFIX_DECL_STYLE, $octave_cv_bison_api_prefix_decl_style)
 
-  if test -z "$octave_cv_bison_api_prefix_decl_style"; then
+  if test -z "$octave_cv_bison_api_prefix_decl_style" \
+    || test "$octave_cv_bison_api_prefix_decl_style" != "api brace"; then
     tmp_have_bison=no
     warn_bison_api_prefix_decl_style="
 
 I wasn't able to find a suitable style for declaring the api prefix
-in a bison input file so I'm disabling bison.
+in a bison input file so I'm disabling bison.  We expect bison to
+understand the '%define api.prefix { PREFIX }' syntax.
 "
     OCTAVE_CONFIGURE_WARNING([warn_bison_api_prefix_decl_style])
   fi
 
-  if test $tmp_have_bison = yes; then
-    AC_CACHE_CHECK([syntax of bison push/pull declaration],
-                   [octave_cv_bison_push_pull_decl_style], [
-      style="dash underscore"
-      quote="noquote quote"
-      for s in $style; do
-        for q in $quote; do
-          if test $s = "dash"; then
-            def="%define api.push-pull"
-          else
-            def="%define api.push_pull"
-          fi
-          if test $q = "quote"; then
-            def="$def \"both\""
-          else
-            def="$def both"
-          fi
-          cat << EOF > conftest.yy
-$def
-%start input
-%%
-input:;
-%%
-EOF
-          octave_bison_output=`$YACC conftest.yy 2>&1`
-          ac_status=$?
-          if test $ac_status -eq 0 && test -z "$octave_bison_output"; then
-            if test $q = noquote; then
-              q=
-            fi
-            octave_cv_bison_push_pull_decl_style="$s $q"
-            break
-          fi
-        done
-        if test -n "$octave_cv_bison_push_pull_decl_style"; then
-          break
-        fi
-      done
-      rm -f conftest.yy y.tab.h y.tab.c
-      ])
-  fi
-
-  AC_SUBST(BISON_PUSH_PULL_DECL_STYLE, $octave_cv_bison_push_pull_decl_style)
-
-  if test -z "$octave_cv_bison_push_pull_decl_style"; then
-    tmp_have_bison=no
-    warn_bison_push_pull_decl_style="
-
-I wasn't able to find a suitable style for declaring a push-pull
-parser in a bison input file so I'm disabling bison.
-"
-    OCTAVE_CONFIGURE_WARNING([warn_bison_push_pull_decl_style])
-  fi
-
   if test $tmp_have_bison = no; then
     YACC='${top_srcdir}/build-aux/missing bison'
     warn_bison="
 
 I didn't find bison, or the version of bison that I found does not
 support all the features that are required, but it's only a problem
 if you need to reconstruct parse.cc, which is the case if you're
 building from VCS sources.
