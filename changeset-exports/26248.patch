# HG changeset patch
# User Rik <rik@octave.org>
# Date 1545002508 28800
#      Sun Dec 16 15:21:48 2018 -0800
# Node ID 8a0778f549e8267026bab183ee0a98a373063719
# Parent  86217421a37f86e65e99ddfecaa19405af560cd4
movfun.m, movslice.m: Add additional input validation and BIST tests for same.

* movfun.m: Rename "basefun" to "basefcn" in documentation.
Validate number of inputs is at least 3.  Use strcmpi, rather than ismember,
in validation for performance.  Use anonymous variable @(d), not @(x) when
writing anonymous function that needs to check the existing variable 'x' so
that the value is not shadowed.  Use isindex() to verify indices for
performance.  Fix search for first non-singleton dimension so it returns a
value even for scalar or empty matrix.  Validate that WLEN is a 1- or 2-element
array of integers >= 0.  Use parfor, instead of for, for loop over columns.
Eventually this might do something meaningful in Octave.  Add BIST tests for
input validation that check the expected error message.

* movslice.m: Validate that exactly two arguments are provided.  Validate that
N is a positive integer.  Validate that WLEN is a 1- or 2-element array of
integers >= 0.  Add BIST tests for input validation that check the expected
error message.

diff --git a/scripts/signal/movfun.m b/scripts/signal/movfun.m
--- a/scripts/signal/movfun.m
+++ b/scripts/signal/movfun.m
@@ -115,105 +115,118 @@
 ## @end table
 ##
 ## Programming Note: The property @qcode{"outdim"} can be used to save memory
 ## when the output of @var{fcn} has many dimensions, or when a wrapper to the
 ## base function that selects the desired outputs is too costly.  When memory
 ## is not an issue, the easiest way to select output dimensions is to first
 ## calculate the complete result with @code{movfun} and then filter that result
 ## with indexing.  If code complexity is not an issue then a wrapper can be
-## created using anonymous functions.  For example, if @code{basefun}
+## created using anonymous functions.  For example, if @code{basefcn}
 ## is a function returning a @var{K}-dimensional row output, and only
 ## dimension @var{D} is desired, then the following wrapper could be used.
 ##
 ## @example
 ## @group
-## @var{fcn} = @@(x) basefun (x)(:,size(x,2) * (@var{D}-1) + (1:size(x,2)));
+## @var{fcn} = @@(x) basefcn (x)(:,size(x,2) * (@var{D}-1) + (1:size(x,2)));
 ## @var{y} = movfun (@@fcn, @dots{});
 ## @end group
 ## @end example
 ##
 ## @seealso{movslice, prepad, postpad, permute, reshape}
 ## @end deftypefn
 
 function y = movfun (fcn, x, wlen, varargin)
 
+  if (nargin < 3)
+    print_usage ();
+  endif
+
   valid_bc = {"shrink", "periodic", "same", "zero", "fill"};
 
   persistent dispatch;
   if (isempty (dispatch))
     dispatch = struct ();
     for k = valid_bc
       cmd = sprintf ("dispatch.%s = @%s_bc;", k{1}, k{1});
       eval (cmd);
     endfor
   endif
 
   ## Parse input arguments
   parser = inputParser ();
   parser.FunctionName = "movfun";
   parser.addParamValue ("Endpoints", "shrink", ...
-    @(x)any (ismember (tolower (x), valid_bc)));
+    @(x) any (strcmpi (x, valid_bc)));
   parser.addParamValue ("dim", [], ...
-    @(x) isempty(x) || (isscalar (x) && x > 0 && x <= ndims(x)));
+    @(d) isempty (d) || (isscalar (d) && isindex (d, ndims (x))));
   parser.addParamValue ("nancond", "omitnan", ...
-    @(x) any (ismember (x, {"omitnan", "includenan"})));
+    @(x) any (strcmpi (x, {"omitnan", "includenan"})));
   parser.addParamValue ("outdim", [], ...
-    @(x) isempty(x) || (isvector (x) && all (x > 0)));
+    @(d) isempty (d) || (isvector (d) && isindex (d)));
 
   parser.parse (varargin{:});
   bc      = parser.Results.Endpoints;   # boundary condition
   dim     = parser.Results.dim;         # dimension to be used as input
   nancond = parser.Results.nancond;     # whether NaN are ignored or not
   outdim  = parser.Results.outdim;      # selected output dimension of fcn
   clear parser
   ## End parse input arguments
 
-  ## If dim was not provided search for the first non-singleton dimension
-  szx  = size (x);
+  ## If dim was not provided find the first non-singleton dimension.
+  szx = size (x);
   if (isempty (dim))
-    dim  = find (szx > 1, 1, "first");
+    (dim = find (szx > 1, 1)) || (dim = 1);
   endif
 
   ## Window length validation
+  if (! (isnumeric (wlen) && all (wlen >= 0) && fix (wlen) == wlen))
+    error ("Octave:invalid-input-arg",
+           "movfun: WLEN must be a scalar or 2-element array of integers >= 0");
+  endif
   if (isscalar (wlen))
     ## Check for proper window length
     ## FIXME: Matlab accepts even windows
     if (mod (wlen, 2) == 0)
       error ("Octave:invalid-input-arg", "movfun: WLEN must be an odd length");
+    elseif (wlen == 1)
+      error ("Octave:invalid-input-arg", "movfun: WLEN must be > 1");
     endif
-    if (wlen == 1)
-      error ("Octave:invalid-input-arg", "movfun: WLEN must be larger than 1");
-    endif
+  elseif (numel (wlen) == 2)
+    ## FIXME: Any further tests needed to validate form: wlen = [nb, na] ???
+  else
+    error ("Octave:invalid-input-arg",
+           "movfun: WLEN must be a scalar or 2-element array of integers >= 0");
   endif
-  ## FIXME: Need to validate form: wlen = [nb, na]
 
-  ## Check that array is longer that wlen at dim.  At least one full window
-  ## must fit. Function max is used to include the case when wlen is an array.
+  ## Check that array is longer than WLEN at dimension DIM.  At least one full
+  ## window must fit.  Function max is used to include the case when WLEN is an
+  ## array. 
   ## FIXME: Consider using bc to decide what to do here.
   if (max (wlen) > szx(dim))
       error ("Octave:invalid-input-arg", ...
-             "movfun: window length (%d) must be shorter than length along DIM (%d=%d)", ...
-        wlen, dim, szx(dim));
+             "movfun: window length WLEN (%d) must be shorter than length along DIM%d (%d)", ...
+             max (wlen), dim, szx(dim));
   endif
 
   ## Move the desired dim to the 1st dimension
   nd    = length (szx);                  # number of dimensions
   dperm = [dim, 1:(dim-1), (dim+1):nd];  # permutation of dimensions
   x     = permute (x, dperm);            # permute dim to first dimensions
   ncols = prod (szx(dperm(2:end)));      # rest dimensions as single column
   N     = szx(dperm(1));                 # length of dim
   x     = reshape (x, N, ncols);         # reshape input
 
   ## Obtain function for boundary conditions
   bcfunc = dispatch.(tolower (bc));
 
   ## Obtain slicer
   [slc, C, Cpre, Cpos, win] = movslice (N, wlen);
 
+  ## FIXME: validation doesn't seem to work correctly
   ## Validate that outdim makes sense
   tmp     = fcn (zeros (length (win), 1));  # output for window
   noutdim = length (tmp);                   # number of output dimensions
   if (! isempty (outdim))
     if (max (outdim) > noutdim)
       error ("Octave:invalid-input-arg", ...
              "movfun: output dimension OUTDIM (%d) is larger than largest available dimension (%d)", ...
              max (outdim), noutdim);
@@ -226,31 +239,31 @@ function y = movfun (fcn, x, wlen, varar
   if (noutdim > 1)
     fcn_ = @(x) reshape (fcn (x), columns (x), noutdim)(:, outdim);
   else
     fcn_ = fcn;
   endif
 
   ## Apply processing to each column
   ## FIXME: Is it faster with cellfun?  Don't think so, but needs testing.
-  ## It could be parallel
   y = zeros (N, ncols, soutdim);
-  for i = 1:ncols
+  parfor i = 1:ncols
     y(:,i,:) = movfun_oncol (fcn_, x(:,i), wlen, bcfunc,
                              slc, C, Cpre, Cpos, win, soutdim);
-  endfor
+  endparfor
 
   ## Restore shape
   y = reshape (y, [szx(dperm), soutdim]);
   y = permute (y, [dperm, nd+1]);
   y = squeeze (y);
 
 endfunction
 
 function y = movfun_oncol (fcn, x, wlen, bcfunc, I, C, Cpre, Cpos, win, odim)
+
   N = length (x);
   y = NA (N, odim);
 
   ## Process center part
   y(C,:) = fcn (x(I));
 
   ## Process boundaries
   if (! isempty (Cpre))  # don't process zero length bkw-window
@@ -549,13 +562,26 @@ endfunction
 
 ## Multidimensional output
 %!assert(size(movfun (@(x)[min(x) max(x)], (1:10).', 3)), [10 2])
 %!assert(size(movfun (@(x)[min(x) max(x)], cumsum(ones(10,5),2), 3)), [10 5 2])
 ## outdim > dim
 %!error (movfun (@(x) [min(x), max(x)], (1:10).', 3, "Outdim", 3))
 
 ## Test input validation
-%!error (movfun (@min, [0;0], 1))  # wlen == 1
-%!error (movfun (@min, [0;0], 2))  # odd wlen
-%!error (movfun (@min, [0;0], 3))  # wlen larger than data
-%!error (movfun (@min, [0;0;0], [1 4]))  # wlen larger than data
-%!error (movfun (@min, [0;0;0], [4 1]))  # wlen larger than data
+%!error movfun ()
+%!error movfun (@min)
+%!error movfun (@min, 1)
+%!error <WLEN must be .* array of integers> movfun (@min, 1, {1})
+%!error <WLEN must be .* array of integers .= 0> movfun (@min, 1, -1)
+%!error <WLEN must be .* array of integers> movfun (@min, 1, 1.5)
+%!error <WLEN must be an odd length> movfun (@min, 1, 4)
+%!error <WLEN must be . 1> movfun (@min, 1, 1)
+%!error <WLEN must be a scalar or 2-element array> movfun (@min, 1, [1, 2, 3])
+%!error <WLEN \(3\) must be shorter than length along DIM1 \(1\)>
+%! movfun (@min, 1, 3);
+%!error <WLEN \(4\) must be shorter than length along DIM1 \(1\)>
+%! movfun (@min, 1, [4, 1]);
+%!error <WLEN \(5\) must be shorter than length along DIM1 \(1\)>
+%! movfun (@min, 1, [1, 5]);
+## FIXME: This test is commented out until OUTDIM validation is clarified.
+%!#error <OUTDIM \(5\) is larger than largest available dimension \(3\)>
+%! movfun (@min, ones (6,3,4), 3, "outdim", 5);
diff --git a/scripts/signal/movslice.m b/scripts/signal/movslice.m
--- a/scripts/signal/movslice.m
+++ b/scripts/signal/movslice.m
@@ -28,27 +28,65 @@
 ## FIXME: Document inputs N, wlen
 ##
 ## FIXME: Document outputs slcidx, C, Cpre, Cpost, win.
 ## @seealso{movfun}
 ## @end deftypefn
 
 function [slcidx, C, Cpre, Cpost, win] = movslice (N, wlen)
 
-  ## FIXME: Input validation for N, wlen
+  if (nargin != 2)
+    print_usage ();
+  endif
+
+  ## Validate N
+  if (! (isscalar (N) && isindex (N)))
+    error ("movslice: N must be a positive integer");
+  endif
 
-  ## FIXME: Eventually add asymmetric window
+  ## Validate window length
+  if (! (isnumeric (wlen) && all (wlen >= 0) && fix (wlen) == wlen))
+    error ("Octave:invalid-input-arg",
+           "movslice: WLEN must be a scalar or 2-element array of integers >= 0");
+  endif
+  if (isscalar (wlen))
+    ## Check for proper window length
+    ## FIXME: Matlab accepts even windows
+    if (mod (wlen, 2) == 0)
+      error ("Octave:invalid-input-arg", "movslice: WLEN must be an odd length");
+    elseif (wlen == 1)
+      error ("Octave:invalid-input-arg", "movslice: WLEN must be > 1");
+    endif
+  elseif (numel (wlen) == 2)
+    ## FIXME: Any further tests needed to validate form: wlen = [nb, na] ???
+  else
+    error ("Octave:invalid-input-arg",
+           "movfun: WLEN must be a scalar or 2-element array of integers >= 0");
+  endif
+
+  ## FIXME: Eventually add support for asymmetric window
   if (isscalar (wlen))
     hwlen = (wlen - 1) / 2;
-    wlen = [hwlen hwlen];
+    wlen = [hwlen, hwlen];
   endif
 
   Cpre  = 1:wlen(1);              # centers that can't fit the pre-window
   Cnf   = N - wlen(2) + 1;        # first center that can't fit the post-window
   Cpost = Cnf:N;                  # centers that can't fit post-window
   C     = (wlen(1) + 1):(Cnf - 1);
   win   = (-wlen(1):wlen(2)).';
   slcidx = C + win;
 
 endfunction
 
 
-## FIXME: Need BIST tests
+## FIXME: Need BIST functional tests
+
+## Test input validation
+%!error movslice ()
+%!error movslice (1)
+%!error movslice (1,2,3)
+%!error <WLEN must be .* array of integers> movslice (1, {1})
+%!error <WLEN must be .* array of integers .= 0> movslice (1, -1)
+%!error <WLEN must be .* array of integers> movslice (1, 1.5)
+%!error <WLEN must be an odd length> movslice (1, 4)
+%!error <WLEN must be . 1> movslice (1, 1)
+%!error <WLEN must be a scalar or 2-element array> movslice (1, [1, 2, 3])
