# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1225451356 -3600
#      Fri Oct 31 12:09:16 2008 +0100
# Node ID 7e87d3d76a5689e02cad5e31bb8e95c85a888627
# Parent  dc62132651db810382080c62059a12e7f77d8947
fix extent query for empty ranges

diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,15 @@
+2008-10-31  Jaroslav Hajek  <highegg@gmail.com>
+
+	* idx-vector.h (idx_vector::idx_range_rep::extent): Don't change
+	extent when len is zero.
+	* idx-vector.h (idx_vector::idx_range_rep::idx_range_rep (void)):
+	Create empty range by default.
+
 2008-10-30  Jaroslav Hajek <highegg@gmail.com>
 
 	* oct-inttypes.h (octave_int_abs): New function.
 	(octave_int_arith_base<T, true>::div): Use octave_int_abs instead of
 	std::abs.
 	* oct-inttypes.cc (octave_int_arith_base<int64_t, true>): Dtto.
 
 2008-10-28  Jaroslav Hajek <highegg@gmail.com>
diff --git a/liboctave/idx-vector.h b/liboctave/idx-vector.h
--- a/liboctave/idx-vector.h
+++ b/liboctave/idx-vector.h
@@ -147,34 +147,34 @@ private:
   class idx_range_rep : public idx_base_rep
   {
   public:
     idx_range_rep (octave_idx_type _start, octave_idx_type _len,
                    octave_idx_type _step, direct) 
       : idx_base_rep (), start(_start), len(_len), step(_step) { }
 
     idx_range_rep (void) 
-      : start(0), len(1), step(1) { }
+      : start(0), len(0), step(1) { }
 
     // Zero-based constructor.
     idx_range_rep (octave_idx_type _start, octave_idx_type _limit,
                    octave_idx_type _step); 
 
     idx_range_rep (const Range&);
 
     octave_idx_type xelem (octave_idx_type i) const
       { return start + i * step; }
 
     octave_idx_type checkelem (octave_idx_type i) const;
 
     octave_idx_type length (octave_idx_type) const
       { return len; }
 
     octave_idx_type extent (octave_idx_type n) const
-      { return std::max (n, (start + 1 + (step < 0 ? 0 : step * (len - 1)))); }
+      { return len ? std::max (n, (start + 1 + (step < 0 ? 0 : step * (len - 1)))) : n; }
 
     idx_class_type idx_class () const { return class_range; }
 
     idx_base_rep *sort_uniq_clone (bool uniq = false);
 
     bool is_colon_equiv (octave_idx_type n) const
       { return start == 0 && step == 1 && len == n; }
 
