# HG changeset patch
# User Kai Habel <kai.habel@gmx.de>
# Date 1289423038 -3600
#      Wed Nov 10 22:03:58 2010 +0100
# Node ID e0db3f9e926799b4f7adf8611756902d8f650273
# Parent  64e7538db12a44ccf93b5210bb00f2bcb358bd88
Add more checks for uimeu

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,15 @@
+2010-11-10  Kai Habel  <kai.habel@gmx.de>
+
+	* fltk-backend.cc (update_accelerator), (update_callback), (update_enable),
+	(update_foregroundcolor), (update_visible): Check if find_item
+	was succesful. (update_seperator): Make sure we don't write 
+	beyond limits of menubar structure.
+
 2010-11-10  John W. Eaton  <jwe@octave.org>
 
 	Bug #31491.
 
 	* pt-pr-code.cc, pt-pr-code.h (tree_print_code::print_fcn_handle_body):
 	New function.
 	* ov-fcn-handle (octave_fcn_handle::print_raw): Use it.
 	* pt-pr-code.cc (tree_print_code::visit_anon_fcn_handle): Likewise.
diff --git a/src/DLD-FUNCTIONS/fltk_backend.cc b/src/DLD-FUNCTIONS/fltk_backend.cc
--- a/src/DLD-FUNCTIONS/fltk_backend.cc
+++ b/src/DLD-FUNCTIONS/fltk_backend.cc
@@ -372,62 +372,74 @@ public:
     }
 
   void update_accelerator (uimenu::properties& uimenup)
     {
       std::string fltk_label = uimenup.get_fltk_label ();
       if (!fltk_label.empty ())
         {
           Fl_Menu_Item* item = const_cast<Fl_Menu_Item*>(menubar->find_item (fltk_label.c_str ()));
-          std::string acc = uimenup.get_accelerator ();
-          if (acc.length () > 0)
+          if (item != NULL)
             {
-              int key = FL_CTRL + acc[0];
-              item->shortcut (key);
+              std::string acc = uimenup.get_accelerator ();
+              if (acc.length () > 0)
+                {
+                  int key = FL_CTRL + acc[0];
+                  item->shortcut (key);
+                }
             }
         }
     }
 
   void update_callback (uimenu::properties& uimenup)
     {
       std::string fltk_label = uimenup.get_fltk_label ();
       if (!fltk_label.empty ())
         {
           Fl_Menu_Item* item = const_cast<Fl_Menu_Item*>(menubar->find_item (fltk_label.c_str ()));
-          if (!uimenup.get_callback ().is_empty ())
-            item->callback(static_cast<Fl_Callback*>(script_cb), //callback
-                          static_cast<void*>(&uimenup));        //callback data
-          else
-            item->callback(NULL, static_cast<void*>(0));
+          if (item != NULL)
+            {
+              if (!uimenup.get_callback ().is_empty ())
+                item->callback(static_cast<Fl_Callback*>(script_cb), //callback
+                              static_cast<void*>(&uimenup));        //callback data
+              else
+                item->callback(NULL, static_cast<void*>(0));
+            }
         }
     }
             
   void update_enable (uimenu::properties& uimenup)
     {
       std::string fltk_label = uimenup.get_fltk_label ();
       if (!fltk_label.empty ())
         {
           Fl_Menu_Item* item = const_cast<Fl_Menu_Item*>(menubar->find_item (fltk_label.c_str ()));
-          if (uimenup.is_enable ())
-            item->activate ();
-          else
-            item->deactivate ();
+          if (item != NULL)
+            {
+              if (uimenup.is_enable ())
+                item->activate ();
+              else
+                item->deactivate ();
+            }
         }
     }
 
   void update_foregroundcolor (uimenu::properties& uimenup)
     {
       std::string fltk_label = uimenup.get_fltk_label ();
       if (!fltk_label.empty ())
         {
           Fl_Menu_Item* item = const_cast<Fl_Menu_Item*>(menubar->find_item (fltk_label.c_str ()));
-          Matrix rgb = uimenup.get_foregroundcolor_rgb ();
-          item->labelcolor(fl_rgb_color(static_cast<uchar>(floor (rgb(0)*255)),
-                                        static_cast<uchar>(floor (rgb(1)*255)),
-                                        static_cast<uchar>(floor (rgb(2)*255))));
+          if (item != NULL)
+            {
+              Matrix rgb = uimenup.get_foregroundcolor_rgb ();
+              item->labelcolor(fl_rgb_color(static_cast<uchar>(floor (rgb(0)*255)),
+                                            static_cast<uchar>(floor (rgb(1)*255)),
+                                            static_cast<uchar>(floor (rgb(2)*255))));
+            }
         }
     }
 
   void update_seperator (uimenu::properties& uimenup)
     {
       // Matlab places the separator before the current
       // menu entry, while fltk places it after. So we need to find
       // the previous item in this menu/submenu. (Kai)
@@ -440,36 +452,42 @@ public:
           for (idx = curr_idx - 1; idx >= 0; idx--)
             { 
               Fl_Menu_Item* item = const_cast<Fl_Menu_Item*>(&menubar->menu () [idx]);
               itemflags = item->flags;
               if (item->label () != NULL)
                 break;
             }
 
-          if (uimenup.is_separator ())
+          if ((idx >= 0) && (idx < menubar->size ()))
             {
-              if (idx >= 0 && !(itemflags & FL_SUBMENU))
-                menubar->mode (idx, itemflags | FL_MENU_DIVIDER);
+              if (uimenup.is_separator ())
+                {
+                  if (idx >= 0 && !(itemflags & FL_SUBMENU))
+                    menubar->mode (idx, itemflags | FL_MENU_DIVIDER);
+                }
+              else
+                menubar->mode (idx, itemflags & (~FL_MENU_DIVIDER));
             }
-          else
-            menubar->mode (idx, itemflags & (~FL_MENU_DIVIDER));
         }
     }
 
   void update_visible (uimenu::properties& uimenup)
     {
       std::string fltk_label = uimenup.get_fltk_label ();
       if (!fltk_label.empty ())
         {
           Fl_Menu_Item* item = const_cast<Fl_Menu_Item*>(menubar->find_item (fltk_label.c_str ()));
-          if (uimenup.is_visible ())
-            item->show ();
-          else
-            item->hide ();
+          if (item != NULL)
+            {
+              if (uimenup.is_visible ())
+                item->show ();
+              else
+                item->hide ();
+            }
         }
     }
     
   void add_entry (uimenu::properties& uimenup)
     {
 
       std::string fltk_label = uimenup.get_fltk_label ();
 
