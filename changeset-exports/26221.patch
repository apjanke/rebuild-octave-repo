# HG changeset patch
# User Pantxo Diribarne <pantxo.diribarne@gmail.com>
# Date 1544713910 -3600
#      Thu Dec 13 16:11:50 2018 +0100
# Node ID 76ac35f715738ee28a1eeac2a2ad4256cfe76e75
# Parent  f125a6ed45be0a3f57880377a4d47ea21f5c1bd8
Fix regression in multi-line text rendering (bug #55218)

* ft-text-renderer.cc (ft_text_renderer::compute_bbox, push_new_line): Make sure
  line spacing is an integer using math::round.
  (ft_text_renderer::process_character): Don't change the character y position
  when a pixel is expected to be out of boundaries.

diff --git a/libinterp/corefcn/ft-text-renderer.cc b/libinterp/corefcn/ft-text-renderer.cc
--- a/libinterp/corefcn/ft-text-renderer.cc
+++ b/libinterp/corefcn/ft-text-renderer.cc
@@ -584,17 +584,17 @@ namespace octave
           // Move to the next line bbox, adjust xoffset based on alignment
           // and yoffset based on the old and new line bbox.
 
           Matrix old_bbox = line_bbox.front ();
           line_bbox.pop_front ();
           Matrix new_bbox = line_bbox.front ();
 
           xoffset = line_xoffset = compute_line_xoffset (new_bbox);
-          line_yoffset -= (-old_bbox(1) + 0.4 * m_max_fontsize
+          line_yoffset -= (-old_bbox(1) + math::round (0.4 * m_max_fontsize)
                            + (new_bbox(3) + new_bbox(1)));
           yoffset = 0;
           m_ymin = m_ymax = m_deltax = 0;
         }
         break;
       }
   }
 
@@ -636,17 +636,17 @@ namespace octave
 
       default:
         for (const auto& lbox : line_bbox)
           {
             if (bbox.isempty ())
               bbox = lbox.extract (0, 0, 0, 3);
             else
               {
-                double delta = 0.4 * m_max_fontsize + lbox(3);
+                double delta = math::round (0.4 * m_max_fontsize) + lbox(3);
                 bbox(1) -= delta;
                 bbox(3) += delta;
                 bbox(2) = math::max (bbox(2), lbox(2));
               }
           }
         break;
       }
   }
@@ -774,19 +774,16 @@ namespace octave
 
                     // 'w' seems to have a negative -1
                     // face->glyph->bitmap_left, this is so we don't index out
                     // of bound, and assumes we've allocated the right amount of
                     // horizontal space in the bbox.
                     if (x0 < 0)
                       x0 = 0;
 
-                    if (y0 < (static_cast<int> (bitmap.rows) - 1))
-                      y0 = bitmap.rows - 1;
-
                     for (int r = 0; static_cast<unsigned int> (r) < bitmap.rows; r++)
                       for (int c = 0; static_cast<unsigned int> (c) < bitmap.width; c++)
                         {
                           unsigned char pix = bitmap.buffer[r*bitmap.width+c];
                           if (x0+c < 0 || x0+c >= pixels.dim2 ()
                               || y0-r < 0 || y0-r >= pixels.dim3 ())
                             {
                               // ::warning ("ft_text_renderer: x %d,  y %d",
