# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1265764235 18000
#      Tue Feb 09 20:10:35 2010 -0500
# Node ID 5e972e2deffe6bd106491d530b7bab16b9e750c1
# Parent  7c7685cc0676d76e0902c5f8eeafc9c859896baa
avoid some possible gnulib #defines

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,16 @@
+2010-02-09  John W. Eaton  <jwe@octave.org>
+
+	* c-file-ptr-stream.h (c_file_ptr_buf::buf_close): Rename from close.
+	(c_file_ptr_buf::file_close): Rename from fclose.
+	(c_file_ptr_stream::stream_close): Rename from close.
+	(c_zfile_ptr_buf:buf_close): Rename from close.
+	Change all callers.
+
 2010-02-09  John W. Eaton  <jwe@octave.org>
 
 	* dynamic-ld.cc (clear): Only warn if reloading a dynamically
 	linked file that defines multiple functions.
 
 2010-02-09  Jaroslav Hajek  <highegg@gmail.com>
 
 	* DLD-FUNCTIONS/find.cc (find_nonzero_elem_idx (const Array<T>&, ...)): 
diff --git a/src/c-file-ptr-stream.cc b/src/c-file-ptr-stream.cc
--- a/src/c-file-ptr-stream.cc
+++ b/src/c-file-ptr-stream.cc
@@ -38,17 +38,17 @@ along with Octave; see the file COPYING.
 #endif
 
 #ifndef SEEK_END
 #define SEEK_END 2
 #endif
 
 c_file_ptr_buf::~c_file_ptr_buf (void)
 {
-  close ();
+  buf_close ();
 }
 
 // FIXME -- I'm sure there is room for improvement here...
 
 c_file_ptr_buf::int_type
 c_file_ptr_buf::overflow (int_type c)
 {
 #if defined (CXX_ISO_COMPLIANT_LIBRARY)
@@ -173,17 +173,17 @@ c_file_ptr_buf::sync (void)
 
 int
 c_file_ptr_buf::flush (void)
 {
   return f ? fflush (f) : EOF;
 }
 
 int
-c_file_ptr_buf::close (void)
+c_file_ptr_buf::buf_close (void)
 {
   int retval = -1;
 
   flush ();
 
   if (f)
     {
       retval = cf (f);
@@ -192,17 +192,17 @@ c_file_ptr_buf::close (void)
 
   return retval;
 }
 
 #ifdef HAVE_ZLIB
 
 c_zfile_ptr_buf::~c_zfile_ptr_buf (void)
 {
-  close ();
+  buf_close ();
 }
 
 // FIXME -- I'm sure there is room for improvement here...
 
 c_zfile_ptr_buf::int_type
 c_zfile_ptr_buf::overflow (int_type c)
 {
 #if defined (CXX_ISO_COMPLIANT_LIBRARY)
@@ -322,17 +322,17 @@ c_zfile_ptr_buf::flush (void)
   // FIXME -- do we need something more complex here, passing
   // something other than 0 for the second argument to gzflush and
   // checking the return value, etc.?
 
   return f ? gzflush (f, 0) : EOF;
 }
 
 int
-c_zfile_ptr_buf::close (void)
+c_zfile_ptr_buf::buf_close (void)
 {
   int retval = -1;
 
   flush ();
 
   if (f)
     {
       retval = cf (f);
diff --git a/src/c-file-ptr-stream.h b/src/c-file-ptr-stream.h
--- a/src/c-file-ptr-stream.h
+++ b/src/c-file-ptr-stream.h
@@ -38,17 +38,17 @@ public:
 #else
   typedef std::streambuf::int_type int_type;
 #endif
 
   typedef int (*close_fcn) (FILE *);
 
   FILE* stdiofile (void) { return f; }
 
-  c_file_ptr_buf (FILE *f_arg, close_fcn cf_arg = fclose)
+  c_file_ptr_buf (FILE *f_arg, close_fcn cf_arg = file_close)
     : std::streambuf (), f (f_arg), cf (cf_arg)
     { }
 
   ~c_file_ptr_buf (void);
 
   int_type overflow (int_type);
 
   int_type underflow (void) { return underflow_common (false); }
@@ -66,28 +66,28 @@ public:
   
   std::streampos seekpos (std::streampos,
 			  std::ios::openmode = std::ios::in | std::ios::out);
 
   int sync (void);
 
   int flush (void);
 
-  int close (void);
+  int buf_close (void);
 
   int file_number () const { return f ? fileno (f) : -1; }
 
   int seek (long offset, int origin)
     { return f ? fseek (f, offset, origin) : -1; }
 
   long tell (void) { return f ? ftell (f) : -1; }
 
   void clear (void) { if (f) clearerr (f); }
 
-  static int fclose (FILE *f) { return ::fclose (f); }
+  static int file_close (FILE *f) { return ::fclose (f); }
 
 protected:
 
   FILE *f;
 
   close_fcn cf;
 
 private:
@@ -99,24 +99,24 @@ private:
 // some code...
 
 template <typename STREAM_T, typename FILE_T, typename BUF_T>
 class
 c_file_ptr_stream : public STREAM_T
 {
 public:
 
-  c_file_ptr_stream (FILE_T f, typename BUF_T::close_fcn cf = BUF_T::fclose)
+  c_file_ptr_stream (FILE_T f, typename BUF_T::close_fcn cf = BUF_T::file_close)
     : STREAM_T (0), buf (new BUF_T (f, cf)) { STREAM_T::init (buf); }
 
   ~c_file_ptr_stream (void) { delete buf; buf = 0; }
 
   BUF_T *rdbuf (void) { return buf; }
 
-  void close (void) { if (buf) buf->close (); }
+  void stream_close (void) { if (buf) buf->buf_close (); }
 
   int seek (long offset, int origin)
     { return buf ? buf->seek (offset, origin) : -1; }
 
   long tell (void) { return buf ? buf->tell () : -1; }
 
   void clear (void) { if (buf) buf->clear (); STREAM_T::clear (); }
 
@@ -145,17 +145,17 @@ public:
 #else
   typedef std::streambuf::int_type int_type;
 #endif
 
   typedef int (*close_fcn) (gzFile);
 
   gzFile stdiofile (void) { return f; }
 
-  c_zfile_ptr_buf (gzFile f_arg, close_fcn cf_arg = fclose)
+  c_zfile_ptr_buf (gzFile f_arg, close_fcn cf_arg = file_close)
     : std::streambuf (), f (f_arg), cf (cf_arg)
     { }
 
   ~c_zfile_ptr_buf (void);
 
   int_type overflow (int_type);
 
   int_type underflow (void) { return underflow_common (false); }
@@ -173,28 +173,28 @@ public:
   
   std::streampos seekpos (std::streampos,
 			  std::ios::openmode = std::ios::in | std::ios::out);
 
   int sync (void);
 
   int flush (void);
 
-  int close (void);
+  int buf_close (void);
 
   int file_number () const { return -1; }
 
   int seek (long offset, int origin)
     { return f ? gzseek (f, offset, origin) : -1; }
 
   long tell (void) { return f ? gztell (f) : -1; }
 
   void clear (void) { if (f) gzclearerr (f); }
 
-  static int fclose (gzFile f) { return ::gzclose (f); }
+  static int file_close (gzFile f) { return ::gzclose (f); }
 
 protected:
 
   gzFile f;
 
   close_fcn cf;
 
 private:
diff --git a/src/oct-stdstrm.h b/src/oct-stdstrm.h
--- a/src/oct-stdstrm.h
+++ b/src/oct-stdstrm.h
@@ -32,27 +32,27 @@ class
 octave_tstdiostream : public octave_base_stream
 {
 public:
 
   octave_tstdiostream (const std::string& n, FILE_T f = 0,
 		       std::ios::openmode m = std::ios::in|std::ios::out,
 		       oct_mach_info::float_format ff
 		         = oct_mach_info::native_float_format (),
-		       typename BUF_T::close_fcn cf = BUF_T::fclose)
+		       typename BUF_T::close_fcn cf = BUF_T::file_close)
     : octave_base_stream (m, ff), nm (n), md (m),
       s (f ? new STREAM_T (f, cf) : 0)
   { }
 
   static octave_stream
   create (const std::string& n, FILE_T f = 0,
 	  std::ios::openmode m = std::ios::in|std::ios::out,
 	  oct_mach_info::float_format ff
 	    = oct_mach_info::native_float_format (),
-	  typename BUF_T::close_fcn cf = BUF_T::fclose)
+	  typename BUF_T::close_fcn cf = BUF_T::file_close)
   {
     return octave_stream (new octave_tstdiostream (n, f, m, ff, cf));
   }
 
   // Position a stream at OFFSET relative to ORIGIN.
 
   int seek (long offset, int origin)
     { return s ? s->seek (offset, origin) : -1; }
@@ -76,17 +76,17 @@ public:
   // FIXME -- should not have to cast away const here.
   BUF_T *rdbuf (void) const
     { return s ? (const_cast<STREAM_T *> (s))->rdbuf () : 0; }
 
   bool bad (void) const { return s ? s->bad () : true; }
 
   void clear (void) { if (s) s->clear (); }
 
-  void do_close (void) { if (s) s->close (); }
+  void do_close (void) { if (s) s->stream_close (); }
 
 protected:
 
   std::string nm;
 
   std::ios::openmode md;
 
   STREAM_T *s;
