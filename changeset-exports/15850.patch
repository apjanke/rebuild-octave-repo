# HG changeset patch
# User Rik <rik@octave.org>
# Date 1356549286 28800
#      Wed Dec 26 11:14:46 2012 -0800
# Node ID ffd1a99733bd17845fdff98733f7d0790f2c0c83
# Parent  e55a64f49346e73e5b67e6f7cb3b0e9a5cc35efa
build: Check for isascii() before using it.

* configure.ac: Add AC_CHECK_FUNCS line for isascii.

* libinterp/octave-value/ov-ch-mat.cc(xisascii): test HAVE_ISASCII
before using isascii().

diff --git a/configure.ac b/configure.ac
--- a/configure.ac
+++ b/configure.ac
@@ -1936,17 +1936,18 @@ gl_INIT
 
 dnl These checks define/undefine HAVE_FUNCNAME in config.h.
 dnl Code tests HAVE_FUNCNAME and either uses function or provides workaround.
 dnl Use multiple AC_CHECKs to avoid line continuations '\' in list
 AC_CHECK_FUNCS([canonicalize_file_name dup2])
 AC_CHECK_FUNCS([endgrent endpwent execvp expm1 expm1f fork])
 AC_CHECK_FUNCS([getegid geteuid getgid getgrent getgrgid getgrnam])
 AC_CHECK_FUNCS([getpgrp getpid getppid getpwent getpwuid getuid])
-AC_CHECK_FUNCS([kill lgamma lgammaf lgamma_r lgammaf_r])
+AC_CHECK_FUNCS([isascii kill])
+AC_CHECK_FUNCS([lgamma lgammaf lgamma_r lgammaf_r])
 AC_CHECK_FUNCS([log1p log1pf pipe])
 AC_CHECK_FUNCS([realpath resolvepath roundl])
 AC_CHECK_FUNCS([select setgrent setpwent siglongjmp strsignal])
 AC_CHECK_FUNCS([tempnam tgammaf toascii])
 AC_CHECK_FUNCS([umask uname waitpid])
 AC_CHECK_FUNCS([_kbhit])
 
 dnl There are no workarounds in the code for missing these functions.
diff --git a/libinterp/octave-value/ov-ch-mat.cc b/libinterp/octave-value/ov-ch-mat.cc
--- a/libinterp/octave-value/ov-ch-mat.cc
+++ b/libinterp/octave-value/ov-ch-mat.cc
@@ -149,21 +149,27 @@ octave_char_matrix::as_mxArray (void) co
   for (mwIndex i = 0; i < nel; i++)
     pr[i] = p[i];
 
   return retval;
 }
 
 // The C++ standard guarantees cctype defines functions, not macros (and
 // hence macros *CAN'T* be defined if only cctype is included) so
-// there's no need to fuck around. The exceptions are isascii and
-// toascii, which are not C++. Oddly enough, all those character
-// functions are int (*) (int), even in C++. Wicked!
+// there's no need to fuck around.  The exceptions are isascii and
+// toascii, which are not C++.  Oddly enough, all those character
+// functions are int (*) (int), even in C++.  Wicked!
 static inline int xisascii (int c)
-{ return isascii (c); }
+{
+#ifdef HAVE_ISASCII
+  return isascii (c);
+#else
+  return (c >= 0x00 && c <= 0x7f);
+#endif
+}
 
 static inline int xtoascii (int c)
 {
 #ifdef HAVE_TOASCII
   return toascii (c);
 #else
   return (c & 0x7F);
 #endif
