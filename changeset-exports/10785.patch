# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1279015688 -7200
#      Tue Jul 13 12:08:08 2010 +0200
# Node ID c2041adcf2342b63c5b5a90c2e7a5b774a369c58
# Parent  ca2df6737d6b54d63d95d53cc4b26aaf8ac36fe1
remove unnecessary sparse indexing overloads

diff --git a/liboctave/CSparse.cc b/liboctave/CSparse.cc
--- a/liboctave/CSparse.cc
+++ b/liboctave/CSparse.cc
@@ -7175,28 +7175,16 @@ SparseComplexMatrix::operator ! (void) c
 
 SparseComplexMatrix 
 SparseComplexMatrix::squeeze (void) const
 { 
   return MSparse<Complex>::squeeze (); 
 }
 
 SparseComplexMatrix
-SparseComplexMatrix::index (const idx_vector& i, bool resize_ok) const 
-{ 
-  return MSparse<Complex>::index (i, resize_ok); 
-}
-
-SparseComplexMatrix
-SparseComplexMatrix::index (const idx_vector& i, const idx_vector& j, bool resize_ok) const 
-{ 
-  return MSparse<Complex>::index (i, j, resize_ok); 
-}
-  
-SparseComplexMatrix
 SparseComplexMatrix::reshape (const dim_vector& new_dims) const
 {
   return MSparse<Complex>::reshape (new_dims);
 }
 
 SparseComplexMatrix
 SparseComplexMatrix::permute (const Array<octave_idx_type>& vec, bool inv) const
 {
diff --git a/liboctave/CSparse.h b/liboctave/CSparse.h
--- a/liboctave/CSparse.h
+++ b/liboctave/CSparse.h
@@ -390,20 +390,16 @@ public:
   ComplexColumnVector solve (const ComplexColumnVector& b, octave_idx_type& info,
                              double& rcond) const;
   ComplexColumnVector solve (const ComplexColumnVector& b, octave_idx_type& info,
                              double& rcond,
                              solve_singularity_handler sing_handler) const;
 
   SparseComplexMatrix squeeze (void) const;
 
-  SparseComplexMatrix index (const idx_vector& i, bool resize_ok) const;
-
-  SparseComplexMatrix index (const idx_vector& i, const idx_vector& j, bool resize_ok) const;
-
   SparseComplexMatrix reshape (const dim_vector& new_dims) const;
 
   SparseComplexMatrix permute (const Array<octave_idx_type>& vec, 
                                bool inv = false) const;
 
   SparseComplexMatrix ipermute (const Array<octave_idx_type>& vec) const;
 
   bool any_element_is_nan (void) const;
diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,16 @@
+2010-07-13  Jaroslav Hajek  <highegg@gmail.com>
+
+	* MSparse.h (MSparse<T>::index): Remove overloads.
+	* dSparse.h (SparseMatrix::index): Likewise.
+	* dSparse.cc (SparseMatrix::index): Likewise.
+	* CSparse.h (SparseComplexMatrix::index): Likewise.
+	* CSparse.cc (SparseComplexMatrix::index): Likewise.
+
 2010-07-09  Jaroslav Hajek  <highegg@gmail.com>
 
 	* CMatrix.cc (ComplexMatrix::lssolve (const ComplexMatrix&)):
 	Undo 10708:2786b7ae3f80, implement proper correction.
 	* fCMatrix.cc (FloatComplexMatrix::lssolve (const FloatComplexMatrix&)):
 	Ditto.
 
 2010-06-28  Jaroslav Hajek  <highegg@gmail.com>
diff --git a/liboctave/MSparse.h b/liboctave/MSparse.h
--- a/liboctave/MSparse.h
+++ b/liboctave/MSparse.h
@@ -86,22 +86,16 @@ public:
     Sparse<T>::insert (a, indx);
     return *this;
   }
 
   MSparse<T> transpose (void) const { return Sparse<T>::transpose (); }
 
   MSparse<T> squeeze (void) const { return Sparse<T>::squeeze (); }
 
-  MSparse<T> index (const idx_vector& i, bool resize_ok) const 
-    { return Sparse<T>::index (i, resize_ok); }
-
-  MSparse<T> index (const idx_vector& i, const idx_vector& j, bool resize_ok) const 
-    { return Sparse<T>::index (i, j, resize_ok); }
-  
   MSparse<T> reshape (const dim_vector& new_dims) const
     { return Sparse<T>::reshape (new_dims); }
      
   MSparse<T> permute (const Array<octave_idx_type>& vec, bool inv = false) const
     { return Sparse<T>::permute (vec, inv); }
 
   MSparse<T> ipermute (const Array<octave_idx_type>& vec) const
     { return Sparse<T>::ipermute (vec); }
diff --git a/liboctave/dSparse.cc b/liboctave/dSparse.cc
--- a/liboctave/dSparse.cc
+++ b/liboctave/dSparse.cc
@@ -7589,28 +7589,16 @@ operator >> (std::istream& is, SparseMat
 
 SparseMatrix
 SparseMatrix::squeeze (void) const 
 { 
   return MSparse<double>::squeeze (); 
 }
 
 SparseMatrix
-SparseMatrix::index (const idx_vector& i, bool resize_ok) const 
-{ 
-  return MSparse<double>::index (i, resize_ok); 
-}
-
-SparseMatrix
-SparseMatrix::index (const idx_vector& i, const idx_vector& j, bool resize_ok) const 
-{ 
-  return MSparse<double>::index (i, j, resize_ok); 
-}
-  
-SparseMatrix
 SparseMatrix::reshape (const dim_vector& new_dims) const
 {
   return MSparse<double>::reshape (new_dims);
 }
 
 SparseMatrix
 SparseMatrix::permute (const Array<octave_idx_type>& vec, bool inv) const
 {
diff --git a/liboctave/dSparse.h b/liboctave/dSparse.h
--- a/liboctave/dSparse.h
+++ b/liboctave/dSparse.h
@@ -401,20 +401,16 @@ public:
   SparseMatrix abs (void) const;
 
   SparseMatrix diag (octave_idx_type k = 0) const;
 
   Matrix matrix_value (void) const;
 
   SparseMatrix squeeze (void) const;
 
-  SparseMatrix index (const idx_vector& i, bool resize_ok) const;
-
-  SparseMatrix index (const idx_vector& i, const idx_vector& j, bool resize_ok) const;
-
   SparseMatrix reshape (const dim_vector& new_dims) const;
 
   SparseMatrix permute (const Array<octave_idx_type>& vec, bool inv = false) const;
 
   SparseMatrix ipermute (const Array<octave_idx_type>& vec) const;
 
   // i/o
 
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,12 @@
+2010-07-13  Jaroslav Hajek  <highegg@gmail.com>
+
+	* data.cc (do_sparse_diff): Use typecasts where needed.
+
 2010-07-12  Jaroslav Hajek  <highegg@gmail.com>
 
 	* DLD-FUNCTIONS/rand.cc (do_rand): Pass the distribution name as an
 	argument. Ensure restoration using unwind_protect.
 	(Frand, Frandn, Frandg, Frandp, Frande): Update.
 
 2010-07-12  Jaroslav Hajek  <highegg@gmail.com>
 
diff --git a/src/data.cc b/src/data.cc
--- a/src/data.cc
+++ b/src/data.cc
@@ -6294,29 +6294,29 @@ do_sparse_diff (const SparseT& array, oc
 {
   SparseT retval = array;
   if (dim == 1)
     {
       octave_idx_type k = retval.columns ();
       while (order > 0 && k > 0)
         {
           idx_vector col1 (':'), col2 (':'), sl1 (1, k), sl2 (0, k-1);
-          retval = retval.index (col1, sl1, 0) - retval.index (col2, sl2, 0);
+          retval = SparseT (retval.index (col1, sl1)) - SparseT (retval.index (col2, sl2));
           assert (retval.columns () == k-1);
           order--;
           k--;
         }
     }
   else
     {
       octave_idx_type k = retval.rows ();
       while (order > 0 && k > 0)
         {
           idx_vector col1 (':'), col2 (':'), sl1 (1, k), sl2 (0, k-1);
-          retval = retval.index (sl1, col1, 0) - retval.index (sl2, col2, 0);
+          retval = SparseT (retval.index (sl1, col1)) - SparseT (retval.index (sl2, col2));
           assert (retval.rows () == k-1);
           order--;
           k--;
         }
     }
 
   return retval;
 }
