# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1263903894 -3600
#      Tue Jan 19 13:24:54 2010 +0100
# Node ID 2e4fc7fdba15c0492e740e1002bc480633c15cc1
# Parent  aa0f575cf39b828131be7f9564608399f1507926
optimize strfind with 1 or 2 characters

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,12 @@
+2010-01-19  Jaroslav Hajek  <highegg@gmail.com>
+
+	* DLD-FUNCTIONS/strfind.cc: Optimize searching for 1 or 2 characters.
+
 2010-01-18  John W. Eaton  <jwe@octave.org>
 
 	* oct-parse.yy (fcn_end): Allow EOF as end of function if
 	reading from eval string.
 	(eval_string): Protect and set reading_fcn_file,
 	reading_script_file, and reading_classdef_file.
 
 2010-01-18  Jaroslav Hajek  <highegg@gmail.com>
diff --git a/src/DLD-FUNCTIONS/strfind.cc b/src/DLD-FUNCTIONS/strfind.cc
--- a/src/DLD-FUNCTIONS/strfind.cc
+++ b/src/DLD-FUNCTIONS/strfind.cc
@@ -65,18 +65,48 @@ qs_search (const Array<char>& needle,
   const char *x = needle.data ();
   octave_idx_type m = needle.numel ();
   const char *y = haystack.data ();
   octave_idx_type n = haystack.numel ();
 
   // We'll use deque because it typically has the most favorable properties for
   // the operation we need.
   std::deque<octave_idx_type> accum;
-  if (n >= m)
+  if (m == 1)
+    {
+      // Looking for a single character.
+      for (octave_idx_type i = 0; i < n; i++)
+        {
+          if (y[i] == x[0])
+            accum.push_back (i);
+        }
+    }
+  else if (m == 2)
     {
+      // Two characters.
+      if (overlaps)
+        {
+          for (octave_idx_type i = 0; i < n-1; i++)
+            {
+              if (y[i] == x[0] && y[i+1] == x[1])
+                accum.push_back (i);
+            }
+        }
+      else
+        {
+          for (octave_idx_type i = 0; i < n-1; i++)
+            {
+              if (y[i] == x[0] && y[i+1] == x[1])
+                accum.push_back (i++);
+            }
+        }
+    }
+  else if (n >= m)
+    {
+      // General case.
       octave_idx_type j = 0;
 
       if (overlaps)
         {
           while (j < n - m) 
             {
               if (std::equal (x, x + m, y + j))
                 accum.push_back (j);
