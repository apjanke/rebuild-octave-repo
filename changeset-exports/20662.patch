# HG changeset patch
# User Rik <rik@octave.org>
# Date 1446003116 25200
#      Tue Oct 27 20:31:56 2015 -0700
# Node ID 5c3dc2650e4f7182636ff70426ca6df00205bb04
# Parent  0140032737375fb8a2396667af36754f9b97b432
Return a diagonal matrix for permute/ipermute with a diagonal matrix input (bug #46123).

* ov-base-diag.h (permute): Check for a 2-D permute and if found just return
the original diagonal matrix.

diff --git a/libinterp/octave-value/ov-base-diag.h b/libinterp/octave-value/ov-base-diag.h
--- a/libinterp/octave-value/ov-base-diag.h
+++ b/libinterp/octave-value/ov-base-diag.h
@@ -81,17 +81,24 @@ public:
   dim_vector dims (void) const { return matrix.dims (); }
 
   octave_idx_type nnz (void) const { return to_dense ().nnz (); }
 
   octave_value reshape (const dim_vector& new_dims) const
   { return to_dense ().reshape (new_dims); }
 
   octave_value permute (const Array<int>& vec, bool inv = false) const
-  { return to_dense ().permute (vec, inv); }
+  { 
+    if (vec.numel () == 2
+        && ((vec.xelem (0) == 1 && vec.xelem (1) == 0)
+            || (vec.xelem (0) == 0 && vec.xelem (1) == 1)))
+      return DMT (matrix);
+    else
+      return to_dense ().permute (vec, inv);
+  }
 
   octave_value resize (const dim_vector& dv, bool fill = false) const;
 
   octave_value all (int dim = 0) const { return MT (matrix).all (dim); }
   octave_value any (int dim = 0) const { return MT (matrix).any (dim); }
 
   MatrixType matrix_type (void) const { return MatrixType::Diagonal; }
   MatrixType matrix_type (const MatrixType&) const
