# HG changeset patch
# User jwe
# Date 832356541 0
#      Fri May 17 18:09:01 1996 +0000
# Node ID 896966940135d7efec4c25c03db7ece79a8c89d0
# Parent  a174011c96f24b0c2a1baca27c336c831b60ebd7
[project @ 1996-05-17 18:09:01 by jwe]

diff --git a/src/input.cc b/src/input.cc
--- a/src/input.cc
+++ b/src/input.cc
@@ -630,16 +630,18 @@ get_input_from_file (const string& name,
 
 FILE *
 get_input_from_stdin (void)
 {
   rl_instream = stdin;
   return rl_instream;
 }
 
+// XXX FIXME XXX -- this should return a string_vector.
+
 static const char **
 generate_struct_completions (const char *text, char *& prefix,
 			     char *& hint)
 {
   const char **names = 0;
 
   assert (text);
 
@@ -706,16 +708,17 @@ generate_struct_completions (const char 
     }
 
   delete [] id;
 
   return names;
 }
 
 // XXX FIXME XXX -- make this generate file names when appropriate.
+// XXX FIXME XXX -- this should return a string_vector.
 
 static const char **
 generate_possible_completions (const char *text, char *& prefix,
 			       char *& hint)
 {
   const char **names = 0;
 
   prefix = 0;
@@ -782,16 +785,20 @@ looks_like_struct (const char *nm)
 	}
     }
 
   delete [] id;
 
   return retval;	
 }
 
+// XXX FIXME XXX -- this has to return a pointer to char, but it
+// should be converted to use a generating function that returns a
+// string_vector.
+
 static char *
 command_generator (const char *text, int state)
 {
   static char *prefix = 0;
   static char *hint = 0;
 
   static int prefix_len = 0;
   static int hint_len = 0;
@@ -1218,35 +1225,42 @@ DEFUN (completion_matches, args, nargout
 	  int k = 0;
 
 	  for (;;)
 	    {
 	      const char *cmd = command_generator (hint, k);
 
 	      if (cmd)
 		{
-		  if (k > n)
+		  if (*cmd)
 		    {
-		      n *= 2;
-		      list.resize (n);
+		      if (k == n)
+			{
+			  n *= 2;
+			  list.resize (n);
+			}
+
+		      list[k++] = cmd;
 		    }
-
-		  list[k++] = cmd;
 		}
 	      else
 		{
 		  list.resize (k);
 		  break;
 		}
 	    }
 
 	  if (nargout > 0)
 	    retval = list;
 	  else
 	    {
+	      // We don't use string_vector::list_in_columns here
+	      // because it will be easier for Emacs if the names
+	      // appear in a single column.
+
 	      int len = list.length ();
 
 	      for (int i = 0; i < len; i++)
 		octave_stdout << list[i] << "\n";
 	    }
 	}
     }
   else
