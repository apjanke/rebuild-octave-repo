# HG changeset patch
# User jwe
# Date 1191945314 0
#      Tue Oct 09 15:55:14 2007 +0000
# Node ID 827be634619e3573addc97e2e658249fa8515f25
# Parent  056fa4423303f5bdc594a3221e4060f396f9f3c6
[project @ 2007-10-09 15:55:13 by jwe]

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,13 +1,15 @@
 2007-10-09  John W. Eaton  <jwe@octave.org>
 
 	* DLD-FUNCTIONS/urlwrite.cc (Furlwrite, Furlread) [! HAVE_CURL]:
 	Throw error instead of returning empty string hiding error message
 	in third return value.
+	(progress_func): Delete.
+	(Furlread): Don't set progress callback for curl.
 
 2007-10-08  David Bateman  <dbateman@free.fr>
 
 	*  input.cc (quoting_filename): Function to add a leading quote to
 	a string if needed.
 	(accept_line): Function to check if a string needs a closing quote
 	before calling the rl_newline function.
 	(initialize_command_input): Initialize completer_quote_characters,
diff --git a/src/DLD-FUNCTIONS/urlwrite.cc b/src/DLD-FUNCTIONS/urlwrite.cc
--- a/src/DLD-FUNCTIONS/urlwrite.cc
+++ b/src/DLD-FUNCTIONS/urlwrite.cc
@@ -53,40 +53,16 @@ int
 write_data (void *buffer, size_t size, size_t nmemb, void *streamp)
 {
   // *stream is actually an ostream object.
   std::ostream& stream = *(static_cast<std::ostream*> (streamp));
   stream.write (static_cast<const char*> (buffer), size*nmemb);
   return (stream.fail () ? 0 : size * nmemb);
 }
 
-// Progress callback function for curl.
-
-int
-progress_func (const char *url, double dltotal, double dlnow,
-	       double /*ultotal*/, double /*ulnow*/)
-{
-  // macro that picks up Ctrl-C signalling
-  OCTAVE_QUIT;
-
-#if !defined (URL_QUITE_DOWNLOAD)
-  if (dltotal != 0)
-    {
-      // Is the carriage return character "\r" portable?
-      octave_stdout << "\r" << url << ": "
-		    << std::fixed << std::setw(5) << std::setprecision(1)
-		    << dlnow*100.0/dltotal << " %";
-
-      octave_stdout.flush ();
-    }
-#endif
-
-  return 0;
-}
-
 // Form the query string based on param.
 
 std::string
 form_query_string (CURL *curl, const Cell& param)
 {
   std::ostringstream query;
 
   for (int i = 0; i < param.numel (); i += 2)
@@ -152,35 +128,24 @@ urlget (const std::string& url, const st
 
   // Set a pointer to our struct to pass to the callback.
   curl_easy_setopt (curl, CURLOPT_WRITEDATA, static_cast<void*> (&stream));
 
   // Follow redirects.
   curl_easy_setopt (curl, CURLOPT_FOLLOWLOCATION, 1);
 
   curl_easy_setopt (curl, CURLOPT_NOPROGRESS, false);
-  curl_easy_setopt (curl, CURLOPT_PROGRESSFUNCTION, progress_func);
   curl_easy_setopt (curl, CURLOPT_PROGRESSDATA, url.c_str ());
   curl_easy_setopt (curl, CURLOPT_FAILONERROR, true);
 
   // Switch on full protocol/debug output
   // curl_easy_setopt(curl, CURLOPT_VERBOSE, true);
 
   CURLcode res = curl_easy_perform(curl);
 
-#if !defined (URL_QUITE_DOWNLOAD)
-  if (res == CURLE_OK)
-    {
-      // download is complete
-      progress_func (url.c_str (), 1, 1, 0, 0);
-      // new line after progress_func
-      octave_stdout << std::endl;
-    }
-#endif
-
   // always cleanup
   curl_easy_cleanup (curl);
 
   curl_global_cleanup ();
 
   return res;
 }
 
