# HG changeset patch
# User jwe
# Date 1155585286 0
#      Mon Aug 14 19:54:46 2006 +0000
# Node ID e86311bdecc922bd9da75c4efc95f7deaf1ae808
# Parent  8dbf3f9f22dcc5b3a2fef323294736e1320ca934
[project @ 2006-08-14 19:54:46 by jwe]

diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,14 +1,24 @@
+2006-08-14  John W. Eaton  <jwe@octave.org>
+
+	* pkg/Makefile.in (script_sub_dir): Change from plot to pkg.
+
 2006-08-14  Dmitri A. Sergatskov  <dasergatskov@gmail.com>
 
 	* sparse/spy.m, control/base/bode.m, control/base/__stepimp__.m,
 	signal/freqz_plot.m: Adapt to new automatic_replot definition.
 	
-2006-08-14  Søren Hauberg  <hauberg@gmail.com>
+2006-08-14  Søren Hauberg  <soren@hauberg.org>
+
+        * pkg/pkg.m: Don't pass function name to print_usage.
+	Use addpath and rmpath instead of manipulating LOADPATH.
+	Handle changes to system function.
+	(rm_rf): New subfunction.  Use it to avoid confirmation dialog for
+	recursive directory removal.
 
 	* strings/bin2dec.m: Ignore spaces in input for compatibility.
 
         * colormap.m: Change global variable to persistent.
 
 	* rgb2ind.m: Handle single 3-d array as rgb image.
 
 2006-08-14  John W. Eaton  <jwe@octave.org>
diff --git a/scripts/pkg/Makefile.in b/scripts/pkg/Makefile.in
--- a/scripts/pkg/Makefile.in
+++ b/scripts/pkg/Makefile.in
@@ -3,17 +3,17 @@
 #
 # John W. Eaton
 # jwe@bevo.che.wisc.edu
 # University of Wisconsin-Madison
 # Department of Chemical Engineering
 
 TOPDIR = ../..
 
-script_sub_dir = plot
+script_sub_dir = pkg
 
 srcdir = @srcdir@
 top_srcdir = @top_srcdir@
 VPATH = @srcdir@
 
 include $(TOPDIR)/Makeconf
 
 INSTALL = @INSTALL@
diff --git a/scripts/pkg/pkg.m b/scripts/pkg/pkg.m
--- a/scripts/pkg/pkg.m
+++ b/scripts/pkg/pkg.m
@@ -25,17 +25,17 @@
 ## @deftypefnx{Command} pkg load all
 ## @deftypefnx{Command} pkg load @var{pkg-name} ...
 ## @deftypefnx{Command} pkg load -nodeps @var{pkg-name} ...
 ## XXX: Where's the docs?
 ## @end deftypefn
 function [local_packages, global_packages] = pkg(varargin)
     ## Handle input
     if (length(varargin) == 0 || !iscellstr(varargin))
-        print_usage("pkg");
+        print_usage();
     endif
     files = {};
     deps = true;
     action = "none";
     for i = 1:length(varargin)
         switch (varargin{i})
             case "-nodeps"
                 deps = false;
@@ -74,17 +74,16 @@ function [local_packages, global_package
             endif
             load_packages(files, deps);
         otherwise
             error("You must specify a valid action for 'pkg'. See 'help pkg' for details\n");
     endswitch
 endfunction
 
 function install(files, handle_deps)
-%disp("function: install")
     ## Set parameters depending on wether or not the installation
     ## is system-wide (global) or local.
     local_list = tilde_expand("~/.octave_packages");
     global_list = [OCTAVE_HOME "share/octave/octave_packages"];
     global OCTAVE_PACKAGE_PREFIX;
     prefix_exist = (length(OCTAVE_PACKAGE_PREFIX) != 0 && ischar(OCTAVE_PACKAGE_PREFIX));
 
     if (issuperuser())
@@ -138,32 +137,32 @@ function install(files, handle_deps)
             tmpdirs{i} = tmpdir;
             [status, msg] = mkdir(tmpdir);
             if (status != 1)
                 error("Couldn't create temporary directory: %s\n", msg);
             endif
 
             ## Uncompress the package
             untar(tgz, tmpdir);
-  
+
             ## Get the name of the directory produced by tar
             [dirlist, err, msg] = readdir(tmpdir);
             if (err)
                 error("Couldn't read directory produced by tar: %s\n", msg);
             endif
             packdir = [tmpdir "/" dirlist{end} "/"];
             packdirs{i} = packdir;
 
             ## Make sure the package contains necessary files
             verify_directory(packdir);
-    
+
             ## Read the DESCRIPTION file
             filename = [packdir "DESCRIPTION"];
             desc = get_description(filename);
-            
+
             ## Set default installation directory
             desc.dir = [prefix "/" desc.name "-" desc.version];
             
             ## Save desc
             descriptions{i} = desc;
 
             ## Are any of the new packages already installed?
             ## If so we'll remove the old version.
@@ -173,17 +172,17 @@ function install(files, handle_deps)
                 endif
             endfor
             
         endfor
     catch
         ## Something went wrong, delete tmpdirs
         for i = 1:length(tmpdirs)
             tmpdirs{i}
-            rmdir(tmpdirs{i}, "s");
+            rm_rf(tmpdirs{i});
         endfor
         error(lasterr()(8:end));
     end_try_catch
 
     ## Check dependencies
     if (handle_deps)
         ok = true;
         error_text = "";
@@ -217,46 +216,46 @@ function install(files, handle_deps)
             desc = descriptions{i};
             pdir = packdirs{i};
             prepare_installation (desc, pdir);
             configure_make (desc, pdir);
         endfor
     catch
         ## Something went wrong, delete tmpdirs
         for i = 1:length(tmpdirs)
-            rmdir(tmpdirs{i}, "s");
+            rm_rf(tmpdirs{i});
         endfor
         error(lasterr()(8:end));
     end_try_catch
 
     ## Uninstall the packages that will be replaced
     try
         for i = packages_to_uninstall
             uninstall({installed_packages{i}.name}, false);
         endfor
     catch
         ## Something went wrong, delete tmpdirs
         for i = 1:length(tmpdirs)
-            rmdir(tmpdirs{i}, "s");
+            rm_rf(tmpdirs{i});
         endfor
         error(lasterr()(8:end));
     end_try_catch
 
     ## Install each package
     try
         for i = 1:length(descriptions)
             desc = descriptions{i};
             pdir = packdirs{i};
             copy_files(desc, pdir);
             finish_installation (desc, pdir)
         endfor
     catch
         ## Something went wrong, delete tmpdirs
         for i = 1:length(tmpdirs)
-            rmdir(tmpdirs{i}, "s");
+            rm_rf(tmpdirs{i});
         endfor
         error(lasterr()(8:end));
     end_try_catch
 
 	## Add the packages to the package list
     try
 	    if (global_install)
             idx = complement(packages_to_uninstall, 1:length(global_packages));
@@ -265,49 +264,46 @@ function install(files, handle_deps)
         else
             idx = complement(packages_to_uninstall, 1:length(local_packages));
 	        local_packages = {local_packages{idx} descriptions{:}};
             save(local_list, "local_packages");
         endif
     catch
         ## Something went wrong, delete tmpdirs
         for i = 1:length(tmpdirs)
-            rmdir(tmpdirs{i}, "s");
+            rm_rf(tmpdirs{i});
         endfor
         for i = 1:length(descriptions)
-            rmdir(descriptions{i}.dir, "s");
+            rm_rf(descriptions{i}.dir);
         endfor
         if (global_install)
             error("Couldn't append to %s: %s\n", global_list, lasterr()(8:end));
         else
             error("Couldn't append to %s: %s\n", local_list, lasterr()(8:end));
         endif
     end_try_catch
 
     ## All is well, let's clean up
     for i = 1:length(tmpdirs)
-        [status, msg] = rmdir(tmpdirs{i}, "s");
+        [status, msg] = rm_rf(tmpdirs{i});
         if (status != 1)
             warning("Couldn't clean up after my self: %s\n", msg);
         endif
     endfor
 
     ## Add the newly installed packages to the path, so the user
     ## can begin the using.
     dirs = cell(1, length(descriptions));
     for i = 1:length(descriptions)
         dirs{i} = descriptions{i}.dir;
     endfor
-    # XXX: I guess it would be better to use addpath
-    # (assuming it gets included in Octave)
-    path(LOADPATH, dirs{:});
+    addpath(dirs{:});
 endfunction
 
 function uninstall(pkgnames, handle_deps)
-%disp("function: uninstall")
     local_list = tilde_expand("~/.octave_packages");
     global_list = [OCTAVE_HOME "share/octave/octave_packages"];
     ## Get the list of installed packages
     [local_packages, global_packages] = installed_packages();
     if (issuperuser())
         installed_packages = global_packages;
     else
         installed_packages = local_packages;
@@ -369,17 +365,18 @@ function uninstall(pkgnames, handle_deps
                 cd(wd);
             catch
                 # XXX: Should this rather be an error?
                 warning("The 'on_uninstall' script returned the following error: %s", lasterr);
                 cd(wd);
             end_try_catch
         endif
         ## Do the actual deletion
-        [status, msg] = rmdir(desc.dir, "s");
+        rmpath(desc.dir);
+        [status, msg] = rm_rf(desc.dir);
         if (status != 1)
             error("Couldn't delete directory %s: %s\n", desc.dir, msg);
         endif
     endfor
 
     ## Write a new ~/.octave_packages
     if (issuperuser())
         if (length(remaining_packages) == 0)
@@ -399,17 +396,16 @@ function uninstall(pkgnames, handle_deps
     
 endfunction
 
 ##########################################################
 ##         A U X I L A R Y    F U N C T I O N S         ##
 ##########################################################
 
 function prepare_installation(desc, packdir)
-%disp("function: function: prepare_installation")
     ## Is there a pre_install to call?
     if (exist([packdir "pre_install.m"], "file"))
         wd = pwd();
         try
             cd(packdir);
             pre_install(desc); 
             cd(wd);
         catch
@@ -423,168 +419,165 @@ function prepare_installation(desc, pack
     if (status != 1)
         error("Couldn't create installation directory: %s\n", msg);
     endif
 
 	## If the directory "inst" doesn't exist, we create it
 	if (!exist([packdir "inst"], "dir"))
         [status, msg] = mkdir([packdir "inst"]);
         if (status != 1)
-            rmdir(desc.dir, "s");
+            rm_rf(desc.dir);
             error("The 'inst' directory did not exist and could not be created: %s\n", msg);
         endif
     endif
 endfunction
 
 function configure_make (desc, packdir)   
-%disp("function: function: configure_make")
 	## Perform ./configure, make, make install in "src"
     if (exist([packdir "src"], "dir"))
         src = [packdir "src/"];
         ## configure
         if (exist([src "configure"], "file"))
-            [output, status] = system(["cd " src " ;./configure --prefix=" desc.dir]);
+            [status, output] = system(["cd " src " ;./configure --prefix=" desc.dir]);
             if (status != 0)
-                rmdir(desc.dir, "s");
+                rm_rf(desc.dir);
                 error("The configure script returned the following error: %s\n", output);
             endif
         endif
 
         ## make
         if (exist([src "Makefile"], "file"))
-            [output, status] = system(["export INSTALLDIR=" desc.dir "; make -C " src]);
+            [status, output] = system(["export INSTALLDIR=" desc.dir "; make -C " src]);
             if (status != 0)
-                rmdir(desc.dir, "s");
+                rm_rf(desc.dir);
                 error("'make' returned the following error: %s\n", output);
             endif
             %# make install
-            %[output, status] = system(["export INSTALLDIR=" desc.dir "; make install -C " src]);
+            %[status, output] = system(["export INSTALLDIR=" desc.dir "; make install -C " src]);
             %if (status != 0)
-            %    rmdir(desc.dir, "s");
+            %    rm_rf(desc.dir);
             %    error("'make install' returned the following error: %s\n", output);
             %endif
         endif
 
         ## Copy files to "inst" (this is instead of 'make install')
         files = [src "FILES"];
         if (exist(files, "file"))
             [fid, msg] = fopen(files, "r");
             if (fid < 0)
                 error("Couldn't open %s: %s\n", files, msg);
             endif
-            filenames = char(fread(fid));
+            filenames = char(fread(fid))';
             filenames = strrep(filenames, "\n", " ");
-            [output, status] = system(["cd " src "; cp " filenames " " packdir "inst/"]);
+            [status, output] = system(["cd " src "; cp " filenames " " packdir "inst/"]);
             fclose(fid);
         else
             m = dir([src "*.m"]);
             oct = dir([src "*.oct"]);
             f = "";
             if (length(m) > 0)
-                f = sprintf("%s ", m.name);
+                f = sprintf([src "%s "], m.name);
             endif
             if (length(oct) > 0)
-                f = [f " " sprintf("%s ", oct.name)];
+                f = [f " " sprintf([src "%s "], oct.name)];
             endif
-            [output, status] = system(["cp " f " " packdir "inst/"]);
+            
+            if (!all(isspace(f)))
+                [status, output] = system(["cp -R " f " " packdir "inst/"]);
+            endif
         endif
         if (status != 0)
-            rmdir(desc.dir, "s");
+            rm_rf(desc.dir);
             error("Couldn't copy files from 'src' to 'inst': %s\n", output);
         endif
     endif
 endfunction
 
-function copy_files	(desc, packdir)
-%disp("function: function: copy_files")
+function copy_files (desc, packdir)
     ## Copy the files from "inst" to installdir
-    [output, status] = system(["cp -R " packdir "inst/* " desc.dir]);
+    [status, output] = system(["cp -R " packdir "inst/* " desc.dir]);
     if (status != 0)
-        rmdir(desc.dir, "s");
+        rm_rf(desc.dir);
         error("Couldn't copy files to the installation directory\n");
     endif
 
     ## Create the "packinfo" directory
     packinfo = [desc.dir "/packinfo/"];
     [status, msg] = mkdir (packinfo);
     if (status != 1)
-        rmdir(desc.dir, "s");
+        rm_rf(desc.dir);
         error("Couldn't create packinfo directory: %s\n", msg);
     endif
 
     ## Copy DESCRIPTION
-    [output, status] = system(["cp " packdir "DESCRIPTION " packinfo]);
+    [status, output] = system(["cp " packdir "DESCRIPTION " packinfo]);
     if (status != 0)
-       rmdir(desc.dir, "s");
+       rm_rf(desc.dir);
        error("Couldn't copy DESCRIPTION: %s\n", output);
     endif
 
     ## Is there an INDEX file to copy or should we generate one?
     if (exist([packdir "INDEX"], "file"))
-        [output, status] = system(["cp " packdir "INDEX " packinfo]);
+        [status, output] = system(["cp " packdir "INDEX " packinfo]);
         if (status != 0)
-            rmdir(desc.dir, "s");
+            rm_rf(desc.dir);
             error("Couldn't copy INDEX file: %s\n", output);
         endif
     else
         try
             write_INDEX(desc, [packdir "inst"], [packinfo "INDEX"]);
         catch
-            rmdir(desc.dir, "s");
+            rm_rf(desc.dir);
             error(lasterr);
         end_try_catch
     endif
     
     ## Is there an 'on_uninstall.m' to install?
     if (exist([packdir "on_uninstall.m"], "file"))
-        [output, status] = system(["cp " packdir "on_uninstall.m " packinfo]);
+        [status, output] = system(["cp " packdir "on_uninstall.m " packinfo]);
         if (status != 0)
-            rmdir(desc.dir, "s");
+            rm_rf(desc.dir);
             error("Couldn't copy on_uninstall.m: %s\n", output);
         endif
     endif
 endfunction
 
 function finish_installation (desc, packdir)
-%disp("function: finish_installation")
     ## Is there a post-install to call?
     if (exist([packdir "post_install.m"], "file"))
         wd = pwd();
         try
             cd(packdir);
             post_install(desc);
             cd(wd);
         catch
             cd(wd);
-            rmdir(desc.dir, "s");
+            rm_rf(desc.dir);
             error("The post_install function returned the following error: %s\n", lasterr);
         end_try_catch
     endif
 endfunction
 
 function out = issuperuser()
-%disp("function: issuperuser")
     out = strcmp(getenv("USER"), "root");
 endfunction
 
 ## This function makes sure the package contains the
 ## essential files.
 function verify_directory(dir)
-%disp("function: verify_directory")
     needed_files = {"COPYING", "DESCRIPTION"};
     for f = needed_files
         if (!exist([dir "/" f{1}], "file"))
             error("Package is missing file: %s", f{1});
         endif
     endfor
 endfunction
 
 ## This function parses the DESCRIPTION file
 function desc = get_description(filename)
-%disp("function: get_description")
     fid = fopen(filename, "r");
     if (fid == -1)
         error("The DESCRIPTION file %s could not be read\n", filename);
     endif
 
     desc = struct();
     
     line = fgetl(fid);
@@ -632,17 +625,16 @@ function desc = get_description(filename
         desc.depends = "";
     endif
     desc.name = tolower(desc.name);
 endfunction
 
 ## Makes sure the version string v is a valid x.y.z version string
 ## Examples: "0.1" => "0.1.0", "monkey" => error(...)
 function out = fix_version(v)
-%disp("function: fix_version")
     dots = find(v == ".");
     if (length(dots) == 1)
         major = str2num(v(1:dots-1));
         minor = str2num(v(dots+1:end));
         if (length(major) != 0 && length(minor) != 0)
             out = sprintf("%d.%d.0", major, minor);
             return
         endif
@@ -657,17 +649,16 @@ function out = fix_version(v)
     endif
     error("Bad version string: %s\n", v);
 endfunction
 
 ## Makes sure the depends field is of the right format.
 ## This function returns a cell of structures with the following fields:
 ##   package, version, operator
 function deps_cell = fix_depends(depends)
-%disp("function: fix_depends")
     deps = split_by(tolower(depends), ",");
     deps_cell = cell(1, length(deps));
     
     ## For each dependency
     for i = 1:length(deps)
         dep = deps{i};
         lpar = find(dep == "(");
         rpar = find(dep == ")");
@@ -704,55 +695,51 @@ function deps_cell = fix_depends(depends
         endif
         deps_cell{i} = struct("package", package, "operator", operator, "version", version);
     endfor
 endfunction
 
 ## Strips the text of spaces from the right
 ## Example: "  hello world  " => "  hello world" (XXX: is this the same as deblank?)
 function text = rstrip(text)
-%disp("function: rstrip")
     chars = find(!isspace(text));
     if (length(chars) > 0)
         text = text(chars(1):end); # XXX: shouldn't it be text = text(1:chars(end));
     else
         text = "";
     endif
 endfunction
 
 ## Strips the text of spaces from the left and the right
 ## Example: "  hello world  " => "hello world"
 function text = strip(text)
-%disp("function: strip")
     chars = find(!isspace(text));
     if (length(chars) > 0)
         text = text(chars(1):chars(end));
     else
         text = "";
     endif
 endfunction
 
 ## Splits the text into a cell array of strings by sep
 ## Example: "A, B" => {"A", "B"} (with sep = ",")
 function out = split_by(text, sep)
-%disp("function: split_by")
     text_matrix = split(text, sep);
     num_words = size(text_matrix,1);
     out = cell(num_words, 1);
     for i = 1:num_words
         out{i} = strip(text_matrix(i, :));
     endfor
 endfunction
 
 ## Creates an INDEX file for a package that doesn't provide one.
 ##   'desc'  describes the package.
 ##   'dir'   is the 'inst' direcotyr in temporary directory.
 ##   'INDEX' is the name (including path) of resulting INDEX file.
 function write_INDEX(desc, dir, INDEX)
-%disp("function: write_index")
     ## Get names of functions in dir
     [files, err, msg] = readdir(dir);
     if (err)
         error("Couldn't read directory %s: %s\n", dir, msg);
     endif
     
     functions = {};
     for i = 1:length(files)
@@ -781,17 +768,16 @@ function write_INDEX(desc, dir, INDEX)
     endif
     fprintf(fid, "%s >> %s\n", desc.name, desc.title);
     fprintf(fid, "%s\n", categories{1});
     fprintf(fid, "  %s\n", functions{:});
     fclose(fid);
 endfunction
 
 function bad_deps = get_unsatisfied_deps(desc, installed_packages)
-%disp("function: get_unsatisfied_deps")
     bad_deps = {};
 
     ## For each dependency
     for i = 1:length(desc.depends)
         dep = desc.depends{i};
 
         ## Is the current dependency Octave?
         if (strcmp(dep.package, "octave"))
@@ -815,17 +801,16 @@ function bad_deps = get_unsatisfied_deps
         endif
     endfor
 endfunction
 
 ## Compares to version string using the given operator
 ## Example: v1="0.1.0", v2="0.0.9", operator=">=" => true
 ## TODO: This function is very long and complex! Can't it be simplified?
 function out = compare_versions(v1, v2, operator)
-%disp("function: compare_versions")
     dot1 = find(v1 == ".");
     dot2 = find(v2 == ".");
     if (length(dot1) != 2 || length(dot2) != 2)
         error("Given version strings are not valid: %s %s", v1, v2);
     endif
     
     major1 = str2num( v1( 1:dot1(1)-1 ) );
     minor1 = str2num( v1( dot1(1)+1:dot1(2)-1 ) );
@@ -854,18 +839,16 @@ function out = compare_versions(v1, v2, 
     elseif (mmr(3) == 1)
         out = 1;
     else
         out = 0;
     endif
 endfunction
 
 function [out1, out2] = installed_packages()
-%disp("function: installed_packages")
-
     local_list = tilde_expand("~/.octave_packages");
     global_list = [OCTAVE_HOME "share/octave/octave_packages"];
     ## Get the list of installed packages
     try
         local_packages = load(local_list).local_packages;
     catch
         local_packages = {};
     end_try_catch
@@ -919,17 +902,16 @@ function [out1, out2] = installed_packag
         cur_name    = installed_packages{i}.name;
         cur_version = installed_packages{i}.version;
         cur_dir     = installed_packages{i}.dir;
         printf(format, cur_name, cur_version, cur_dir);
     endfor
 endfunction
 
 function load_packages(files, handle_deps)
-%disp("function: load_packages")
     installed_packages = installed_packages();
     num_packages = length(installed_packages);
     
     if (length(files) == 1 && strcmp(files{1}, "all"))
         dirs = cell(1, num_packages);
         for i = 1:num_packages
             dirs{i} = installed_packages{i}.dir;
         endfor
@@ -942,12 +924,26 @@ function load_packages(files, handle_dep
             for i = 1:num_packages
                 if (strcmp(installed_packages{i}.name, files{j}))
                     dirs{j} = installed_packages{i}.dir;
                 endif
             endfor
             error("Package %s is not installed\n", files{j});
         endfor
     endif
-    # XXX: I guess it would be better to use addpath
-    # (assuming it gets included in Octave)
-    path(LOADPATH, dirs{:});
+    addpath(dirs{:});
 endfunction
+
+function [status_out, msg_out] = rm_rf (dir)
+  crr = confirm_recursive_rmdir ();
+  unwind_protect
+    confirm_recursive_rmdir (false);
+    [status, msg] = rmdir (dir, "s");
+  unwind_protect_cleanup
+    confirm_recursive_rmdir (crr);
+  end_unwind_protect
+  if (nargout > 0)
+    status_out = status;
+  endif
+  if (nargout > 1)
+    msg_out = msg;
+  endif
+endfunction
