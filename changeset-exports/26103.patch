# HG changeset patch
# User Jun Wang <jstzwj@aliyun.com>
# Date 1542753557 28800
#      Tue Nov 20 14:39:17 2018 -0800
# Node ID 9cfbe7688368c0002f24a638262fbc8e288cc720
# Parent  15ebd65f18c934af7232e62026856499f0deb901
Add -fillpage and -bestfit print options (bug #52838).

NEWS: Announce new options.

* __print_parse_opts__.m: New structure member resize_flag initialized to "".
Decode opts and set resize_flag to "fillpage" or "bestfit" if options found.
Validate that options are only used with a page-based format.
If resize option given, change the "paperposition" property of figure and
then let rest of print routine handle the work.
* __print_parse_opts__.m (gs_papersize): Add new second return argument which
is the "papersize" figure property measured in points.

* print.m: Update documentation with new options.

* contributors.in: Add Jun Wang to list of contributors.

diff --git a/NEWS b/NEWS
--- a/NEWS
+++ b/NEWS
@@ -67,25 +67,35 @@ Summary of important user-visible change
 
  ** "FaceNormals" and "VertexNormals" for patch and surface graphic
     objects are now calculated only when necessary to improve graphics
     performance.  In order for any normals to be calculated the
     "FaceLighting" property must be set to "flat" (FaceNormals) or
     "gouraud" (VertexNormals), AND a light object must be present in the
     axes.
 
- ** Printing to raster formats now uses an OpenGL-based method by
-    default.  The print options "-opengl" and "-painters" have been
-    added (for "qt" toolkit only), and the corresponding figure
-    properties "renderer" and "renderermode" are now also used when
-    printing.
+ ** Printing to raster formats (bitmaps like PNG or JPEG) now uses an
+    OpenGL-based method by default.  The print options "-opengl"
+    (raster) and "-painters" (vector) have been added ("qt" toolkit
+    only).  The figure property "renderer" specifies which renderer to
+    use.  When the property "renderermode" is "auto" Octave will select
+    -opengl for a raster output format and -painters for a vector output
+    format.
 
- ** The print option "-RGBImage" has been added.  It allows for
-    retrieving image pixels of a formatted figure instead of printing to
-    raster format.
+ ** A new print option "-RGBImage" has been added which captures the
+    pixels of a figure as an image.  This is similar to screen capture
+    tools, except that print formatting options can be used to, for
+    example, change the resolution or display the image in black and
+    white.
+
+ ** Two new print options for page-based formats (PDF, PostScript) have
+    been added.  The "-fillpage" option will stretch the plot to occupy
+    the entire page with 0.25 inch margins all around.  The "-bestfit"
+    option will expand the plot to take up as much room as possible on
+    the page without distorting the original aspect ratio of the plot.
 
  ** Printing using the -dtiff output device will now create compressed
     images using LZW compression.  This change was made for Matlab
     compatibility.  To produce uncompressed images use the -dtiffn
     device.
 
  ** The FFTW library is now required to perform FFT calculations.
     The FFTPACK sources have been removed from Octave.
diff --git a/doc/interpreter/contributors.in b/doc/interpreter/contributors.in
--- a/doc/interpreter/contributors.in
+++ b/doc/interpreter/contributors.in
@@ -409,16 +409,17 @@ James R. Van Zandt
 Risto Vanhanen
 Gregory Vanuxem
 Mihas Varantsou
 Ivana Varekova
 SÃ©bastien Villemot
 Marco Vitetta
 Daniel Wagenaar
 Thomas Walter
+Jun Wang
 Andreas Weber
 Olaf Weber
 Thomas Weber
 Rik Wehbring
 Bob Weigel
 Andreas Weingessel
 Martin Weiser
 Michael Weitzel
diff --git a/scripts/plot/util/print.m b/scripts/plot/util/print.m
--- a/scripts/plot/util/print.m
+++ b/scripts/plot/util/print.m
@@ -134,16 +134,25 @@
 ## @item  -portrait
 ## @itemx -landscape
 ##   Specify the orientation of the plot for printed output.
 ## For non-printed output the aspect ratio of the output corresponds to the
 ## plot area defined by the @qcode{"paperposition"} property in the
 ## orientation specified.  This option is equivalent to changing the figure's
 ## @qcode{"paperorientation"} property.
 ##
+## @item  -fillpage
+## @itemx -bestfit
+##   When using a page-based format (PDF, PostScript, printer) ignore the
+## @qcode{"paperposition"} property and have the plot occupy the entire page.
+## The option @option{-fillpage} will stretch the plot to occupy the page with
+## 0.25 inch margins all around.  The option @option{-bestfit} will expand the
+## plot to take up as much room as possible on the page @strong{without}
+## distorting the original aspect ratio of the plot.
+##
 ## @item  -color
 ## @itemx -mono
 ##   Color or monochrome output.
 ##
 ## @item  -solid
 ## @itemx -dashed
 ##   Force all lines to be solid or dashed, respectively.
 ##
diff --git a/scripts/plot/util/private/__print_parse_opts__.m b/scripts/plot/util/private/__print_parse_opts__.m
--- a/scripts/plot/util/private/__print_parse_opts__.m
+++ b/scripts/plot/util/private/__print_parse_opts__.m
@@ -54,16 +54,17 @@ function arg_st = __print_parse_opts__ (
   arg_st.loose = false;
   arg_st.lpr_binary = __quote_path__ (__find_binary__ ("lpr"));
   arg_st.name = "";
   arg_st.orientation = "";
   arg_st.pstoedit_binary = __quote_path__ (__find_binary__ ("pstoedit"));
   arg_st.preview = "";
   arg_st.printer = "";
   arg_st.renderer = "auto";
+  arg_st.resize_flag = "";
   arg_st.rgb_output = false;
   arg_st.send_to_printer = false;
   arg_st.special_flag = "textnormal";
   arg_st.svgconvert = false;
   arg_st.svgconvert_binary = __quote_path__ (__svgconv_binary__ ());
   arg_st.tight_flag = false;
   arg_st.use_color = 0; # 0=default, -1=mono, +1=color
 
@@ -108,16 +109,20 @@ function arg_st = __print_parse_opts__ (
         arg_st.tight_flag = false;
       elseif (strcmp (arg, "-tight"))
         arg_st.loose = false;
         arg_st.tight_flag = true;
       elseif (strcmp (arg, "-svgconvert"))
         arg_st.svgconvert = true;
       elseif (strcmp (arg, "-textspecial"))
         arg_st.special_flag = "textspecial";
+      elseif (strcmp (arg, "-fillpage"))
+        arg_st.resize_flag = "fillpage";
+      elseif (strcmp (arg, "-bestfit"))
+        arg_st.resize_flag = "bestfit";
       elseif (any (strcmp (arg,
                            {"-interchange", "-metafile", "-pict", "-tiff"})))
         arg_st.preview = arg(2:end);
       elseif (strncmp (arg, "-debug", 6))
         arg_st.debug = true;
         arg_st.ghostscript.debug = true;
         if (length (arg) > 7)
           arg_st.debug_file = arg(8:end);
@@ -336,19 +341,18 @@ function arg_st = __print_parse_opts__ (
       warning ("print.m: appended output is not supported for device '%s'",
                arg_st.devopt);
       arg_st.append_to_file = false;
     endif
   endif
 
   if (arg_st.rgb_output)
     if (! isempty (arg_st.printer) || ! isempty (arg_st.name))
-      warning ("octave:print:ignored_argument", ...
-               ["print: ignoring file name and printer argument when using", ...
-                "-RGBImage option"])
+      warning ("octave:print:ignored_argument",
+               "print: ignoring file name and printer argument when using -RGBImage option");
     endif
   elseif (! isempty (arg_st.printer) || isempty (arg_st.name))
     arg_st.send_to_printer = true;
   endif
 
   if (any (strcmp (arg_st.devopt, {"ps", "ps2", "psc", "psc2", "pdf"})))
     arg_st.formatted_for_printing = true;
   endif
@@ -382,16 +386,24 @@ function arg_st = __print_parse_opts__ (
     arg_st.ghostscript.antialiasing = false;
     arg_st.ghostscript.epscrop = ! arg_st.loose;
   endif
 
   if (unknown_device)
     error ("print: unknown device %s", arg_st.devopt);
   endif
 
+  if (arg_st.resize_flag)
+    if (! (arg_st.send_to_printer || arg_st.formatted_for_printing
+           || strncmp (arg_st.devopt, "pdf", 3)
+           || strncmp (arg_st.devopt, "ps", 2)))
+      error ("print: the '%s' option is only valid for page formats and printers.", arg_st.resize_flag);
+    endif
+  endif
+
   if (arg_st.send_to_printer)
     if (isempty (arg_st.name))
       ## Pipe the ghostscript output
       arg_st.name = "-";
     else
       error ("print: a filename may not specified when spooling to a printer");
     endif
     if (! any (strcmp (arg_st.devopt, gs_device_list)))
@@ -399,23 +411,46 @@ function arg_st = __print_parse_opts__ (
       error ("print: format must be a valid Ghostscript format for spooling to a printer");
     endif
   elseif (isempty (arg_st.name) && ! arg_st.rgb_output)
     error ("print: an output filename must be specified");
   endif
 
   if (isempty (arg_st.canvas_size))
     if (isfigure (arg_st.figure))
-      [arg_st.ghostscript.papersize, paperposition] = ...
+      [arg_st.ghostscript.papersize, papersize_points, paperposition] = ...
                            gs_papersize (arg_st.figure, arg_st.orientation);
     else
       ## allows BIST tests to be run
       arg_st.ghostscript.papersize = "letter";
       paperposition = [0.25, 2.50, 8.00, 6.00] * 72;
+      papersize_points = [8.5, 11.0] * 72;
     endif
+
+    ## resize paper
+    if (arg_st.resize_flag)
+      if (strcmp (arg_st.resize_flag, "fillpage"))
+        ## leave a 0.25 inch margin on all sides of the page.
+        paperposition = [0.25 * 72, 0.25 * 72, ...
+                         papersize_points(1) - 0.5*72, ...
+                         papersize_points(2) - 0.5*72];
+      elseif (strcmp (arg_st.resize_flag, "bestfit"))
+        ## leaves a minimum page margin of 0.25 inches
+        if (paperposition(3) > paperposition(4))
+          fit_scale = papersize_points(1) / paperposition(3);
+        else
+          fit_scale = papersize_points(2) / paperposition(4);
+        endif
+        paperposition = [(papersize_points(1) - fit_scale*paperposition(3)) * 0.5, ...
+                        (papersize_points(2) - fit_scale*paperposition(4)) * 0.5, ...
+                        fit_scale * paperposition(3), ...
+                        fit_scale * paperposition(4)];
+      endif
+    endif
+
     arg_st.canvas_size = paperposition(3:4);
     if (strcmp (__graphics_toolkit__, "gnuplot")
         && ! arg_st.ghostscript.epscrop)
       arg_st.ghostscript.pageoffset = paperposition(1:2) - 50;
     else
       arg_st.ghostscript.pageoffset = paperposition(1:2);
     endif
   else
@@ -608,17 +643,17 @@ function bin = __find_binary__ (binary)
       data.(binary).bin = file_in_path (getenv ("PATH"), binaries{++n});
     endwhile
   endif
 
   bin = data.(binary).bin;
 
 endfunction
 
-function [papersize, paperposition] = gs_papersize (hfig, paperorientation)
+function [papersize, papersize_points, paperposition] = gs_papersize (hfig, paperorientation)
   persistent papertypes papersizes;
 
   if (isempty (papertypes))
     papertypes = {"usletter", "uslegal",     "a0",     "a1", ...
                         "a2",      "a3",     "a4",     "a5", ...
                         "b0",      "b1",     "b2",     "b3", ...
                         "b4",      "b5", "arch-a", "arch-b", ...
                     "arch-c",  "arch-d", "arch-e",      "a", ...
@@ -633,34 +668,38 @@ function [papersize, paperposition] = gs
                   11.0, 17.0] * 72;
   endif
 
   papertype = get (hfig, "papertype");
   paperunits = get (hfig, "paperunits");
   paperposition = get (hfig, "paperposition");
   if (strcmp (papertype, "<custom>"))
     papersize = get (hfig, "papersize");
-    papersize = convert2points (papersize , paperunits);
+    papersize = convert2points (papersize, paperunits);
   else
-    papersize = papersizes (strcmp (papertypes, papertype), :);
+    papersize = papersizes(strcmp (papertypes, papertype), :);
   endif
 
   if (strcmp (paperunits, "normalized"))
     paperposition .*= papersize([1,2,1,2]);
   else
     paperposition = convert2points (paperposition, paperunits);
   endif
 
   ## FIXME: This will be obsoleted by listeners for paper properties.
-  ##        Papersize is tall when portrait,and wide when landscape.
+  ##        papersize is tall when portrait, and wide when landscape.
   if ((papersize(1) > papersize(2) && strcmpi (paperorientation, "portrait"))
       || (papersize(1) < papersize(2) && strcmpi (paperorientation, "landscape")))
     papersize = papersize([2,1]);
   endif
 
+  ## papersize is now [h,w] and measured in points.
+  ## Return it for possible resize outside of this function.
+  papersize_points = papersize;
+
   if (! strcmp (papertype, "<custom>")
       && (strcmp (paperorientation, "portrait")))
     ## For portrait use the ghostscript name
     papersize = papertype;
     papersize(papersize=="-") = "";
     papersize = strrep (papersize, "us", "");
     switch (papersize)
       case "a"
@@ -678,17 +717,17 @@ function [papersize, paperposition] = gs
 endfunction
 
 function value = convert2points (value, units)
 
   switch (units)
     case "inches"
       value *= 72;
     case "centimeters"
-      value *= 72 / 2.54;
+      value *= (72 / 2.54);
     case "normalized"
       error ("print:customnormalized",
              "print.m: papersize=='<custom>' and paperunits='normalized' may not be combined");
   endswitch
 
 endfunction
 
 function device_list = gs_device_list ()
