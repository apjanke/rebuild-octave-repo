# HG changeset patch
# User Torsten <ttl@justmail.de>
# Date 1429983807 -7200
#      Sat Apr 25 19:43:27 2015 +0200
# Node ID d7bea5b11fc354604b84a08ce6f907267d649636
# Parent  0d56160e346d5d1fe7cac15ce6feed19655a3106
only update file browser and dir selection box when on top-level (bug #44622)

* main-window.cc (change_directory_callback): call function for updating gui

* octave-qt-link.cc (octave_qt_link): init new variables
  _current_directory and _new_dir;
  (do_change_directory): only store current dir and new state, no gui update;
  (update_directory): new function updating gui and clearing new dir state;
  (do_set_workspace): when on top level and new dir state, update gui

*  octave-qt-link.h: new update function, new variables for dir and state

diff --git a/libgui/src/main-window.cc b/libgui/src/main-window.cc
--- a/libgui/src/main-window.cc
+++ b/libgui/src/main-window.cc
@@ -2136,16 +2136,17 @@ main_window::new_figure_callback (void)
   Fbuiltin (ovl ("figure"));
   Fdrawnow ();
 }
 
 void
 main_window::change_directory_callback (const std::string& directory)
 {
   Fcd (ovl (directory));
+  _octave_qt_link->update_directory ();
 }
 
 // The next callbacks are invoked by GUI buttons.  Those buttons
 // should only be active when we are doing debugging, which means that
 // Octave is waiting for input in get_debug_input.  Calling
 // command_editor::interrupt will force readline to return even if it
 // has not read any input, and then get_debug_input will return,
 // allowing the evaluator to continue and execute the next statement.
diff --git a/libgui/src/octave-qt-link.cc b/libgui/src/octave-qt-link.cc
--- a/libgui/src/octave-qt-link.cc
+++ b/libgui/src/octave-qt-link.cc
@@ -42,16 +42,19 @@ along with Octave; see the file COPYING.
 #include "octave-qt-link.h"
 
 #include "resource-manager.h"
 
 octave_qt_link::octave_qt_link (QWidget *p)
   : octave_link (), main_thread (new QThread ()),
     command_interpreter (new octave_interpreter ())
 {
+  _current_directory = "";
+  _new_dir = true;
+
   connect (this, SIGNAL (execute_interpreter_signal (void)),
            command_interpreter, SLOT (execute (void)));
 
   connect (command_interpreter, SIGNAL (octave_ready_signal ()),
            p, SLOT (handle_octave_ready ()));
 
   command_interpreter->moveToThread (main_thread);
 
@@ -426,32 +429,43 @@ octave_qt_link::do_debug_cd_or_addpath_e
     retval = 2;
 
   return retval;
 }
 
 void
 octave_qt_link::do_change_directory (const std::string& dir)
 {
-  emit change_directory_signal (QString::fromStdString (dir));
+  _current_directory = QString::fromStdString (dir);
+  _new_dir = true;
+}
+
+void
+octave_qt_link::update_directory ()
+{
+   emit change_directory_signal (_current_directory);
+  _new_dir = false;
 }
 
 void
 octave_qt_link::do_execute_command_in_terminal (const std::string& command)
 {
   emit execute_command_in_terminal_signal (QString::fromStdString (command));
 }
 
 void
 octave_qt_link::do_set_workspace (bool top_level, bool debug, 
                                   const std::list<workspace_element>& ws)
 {
   if (! top_level && ! debug)
     return;
 
+  if (_new_dir)
+    update_directory ();
+
   QString scopes;
   QStringList symbols;
   QStringList class_names;
   QStringList dimensions;
   QStringList values;
   QIntList complex_flags;
 
   for (std::list<workspace_element>::const_iterator it = ws.begin ();
diff --git a/libgui/src/octave-qt-link.h b/libgui/src/octave-qt-link.h
--- a/libgui/src/octave-qt-link.h
+++ b/libgui/src/octave-qt-link.h
@@ -134,32 +134,37 @@ public:
   void do_show_preferences (void);
 
   void do_show_doc (const std::string& file);
 
   QMutex mutex;
   QWaitCondition waitcondition;
   void shutdown_confirmation (bool sd) {_shutdown_confirm_result = sd;}
 
+  void update_directory (void);
+
 private:
 
   bool _shutdown_confirm_result;
 
   octave_qt_link (const octave_qt_link&);
 
   octave_qt_link& operator = (const octave_qt_link&);
 
   void do_insert_debugger_pointer (const std::string& file, int line);
   void do_delete_debugger_pointer (const std::string& file, int line);
 
   // Thread running octave_main.
   QThread *main_thread;
 
   octave_interpreter *command_interpreter;
 
+  QString _current_directory;
+  bool    _new_dir;
+
 signals:
 
   void execute_interpreter_signal (void);
 
   void copy_image_to_clipboard_signal (const QString& file, bool remove_file);
 
   void edit_file_signal (const QString& file);
 
