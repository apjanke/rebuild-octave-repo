# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1539965989 14400
#      Fri Oct 19 12:19:49 2018 -0400
# Node ID 700b3f415ebedaaf1dfcc99afa7fcf442521c1f7
# Parent  90186e77ae3936e57c16b90d8b707195a789b434
maint: Strip trailing whitespace from source files.

diff --git a/libgui/src/octave-qt-link.cc b/libgui/src/octave-qt-link.cc
--- a/libgui/src/octave-qt-link.cc
+++ b/libgui/src/octave-qt-link.cc
@@ -129,17 +129,17 @@ namespace octave
 
   uint8NDArray octave_qt_link::do_get_named_icon (const std::string& icon_name)
   {
     uint8NDArray retval;
     QIcon icon = resource_manager::icon (QString::fromStdString (icon_name));
     if (! icon.isNull ())
       {
         QImage img = icon.pixmap (QSize (32, 32)).toImage ();
-        
+
         if (img.format () == QImage::Format_ARGB32_Premultiplied)
           {
             retval.resize (dim_vector (img.height (), img.width (), 4), 0);
             uint8_t* bits = img.bits ();
             for (int i = 0; i < img.height (); i++)
               for (int j = 0; j < img.width (); j++)
                 {
                   retval(i,j,2) = bits[0];
diff --git a/libinterp/corefcn/graphics.cc b/libinterp/corefcn/graphics.cc
--- a/libinterp/corefcn/graphics.cc
+++ b/libinterp/corefcn/graphics.cc
@@ -869,22 +869,22 @@ screen_size_pixels (void)
   return convert_position (sz, obj.get ("units").string_value (), "pixels",
                            sz.extract_n (0, 2, 1, 2)).extract_n (0, 2, 1, 2);
 }
 
 static double
 device_pixel_ratio (graphics_handle h)
 {
   double retval = 1.0;
-  
+
   graphics_object fig = gh_manager::get_object (h).get_ancestor ("figure");
-  
+
   if (fig.valid_object ())
     retval = fig.get ("__device_pixel_ratio__").double_value ();
-  
+
   return retval;
 }
 
 static void
 convert_cdata_2 (bool is_scaled, bool is_real, double clim_0, double clim_1,
                  const double *cmapv, double x, octave_idx_type lda,
                  octave_idx_type nc, octave_idx_type i, double *av)
 {
@@ -8865,17 +8865,17 @@ text::properties::get_extent (void) cons
   m(1) += p(1);
 
   Matrix bbox = convert_text_position (m, *this, "pixels", get_units ());
 
   double dpr = device_pixel_ratio (get___myhandle__ ());
 
   for (octave_idx_type ii = 0; ii < bbox.numel (); ii++)
     bbox(ii) = bbox(ii) / dpr;
-  
+
   return bbox;
 }
 
 void
 text::properties::set_fontunits (const octave_value& val)
 {
   caseless_str old_fontunits = get_fontunits ();
 
@@ -8950,17 +8950,17 @@ text::properties::update_text_extent (vo
 
   gh_manager::auto_lock guard;
   txt_renderer.text_to_pixels (sv.join ("\n"), pixels, bbox,
                                halign, valign, get_rotation (),
                                get_interpreter ());
   // The bbox is relative to the text's position.  We'll leave it that
   // way, because get_position does not return valid results when the
   // text is first constructed.  Conversion to proper coordinates is
-  // performed in get_extent.  
+  // performed in get_extent.
   set_extent (bbox);
 
   if (__autopos_tag___is ("xlabel") || __autopos_tag___is ("ylabel")
       || __autopos_tag___is ("zlabel") || __autopos_tag___is ("title"))
     update_autopos ("sync");
 }
 
 void
@@ -9645,17 +9645,17 @@ surface::properties::update_face_normals
                   j2 = j + 1;
                 }
 
               double& nx = n(j,i,0);
               double& ny = n(j,i,1);
 
               // calculate face normal with Newell's method
               // https://www.khronos.org/opengl/wiki/Calculating_a_Surface_Normal#Newell.27s_Method
-              
+
               nx = dy * (z(j1,i1) + z(j2,i1) - z(j1,i2) - z(j2,i2));
               ny = dx * (z(j1,i1) + z(j1,i2) - z(j2,i1) - z(j2,i2));
 
               double d = std::max (std::max (fabs (nx), fabs (ny)), fabs (nz));
 
               nx /= d;
               ny /= d;
               n(j,i,2) /= d;
@@ -9667,17 +9667,17 @@ surface::properties::update_face_normals
     facenormals = Matrix ();
 }
 
 void
 surface::properties::update_vertex_normals (bool reset)
 {
   if (! vertexnormalsmode_is ("auto"))
     return;
-  
+
   if ((facelighting_is ("gouraud") || facelighting_is ("phong") ||
       edgelighting_is ("gouraud") || edgelighting_is ("phong")) &&
       get_do_lighting ())
     {
       Matrix x = get_xdata ().matrix_value ();
       Matrix y = get_ydata ().matrix_value ();
       Matrix z = get_zdata ().matrix_value ();
 
diff --git a/libinterp/corefcn/octave-link.cc b/libinterp/corefcn/octave-link.cc
--- a/libinterp/corefcn/octave-link.cc
+++ b/libinterp/corefcn/octave-link.cc
@@ -354,17 +354,17 @@ Undocumented internal function.
 
 DEFUN (__octave_link_named_icon__, args, ,
        doc: /* -*- texinfo -*-
 @deftypefn {} {} __octave_link_dialog_icons__ (@var{icon_name})
 Undocumented internal function.
 @end deftypefn */)
 {
   uint8NDArray retval;
-  
+
   if (args.length () > 0)
     {
       std::string icon_name = args(0).xstring_value ("invalid arguments");
 
       retval = octave_link::get_named_icon (icon_name);
     }
 
   return ovl (retval);
diff --git a/libinterp/corefcn/octave-link.h b/libinterp/corefcn/octave-link.h
--- a/libinterp/corefcn/octave-link.h
+++ b/libinterp/corefcn/octave-link.h
@@ -230,17 +230,17 @@ public:
   }
 
   // Preserves pending input.
   static void execute_command_in_terminal (const std::string& command)
   {
     if (enabled ())
       instance->do_execute_command_in_terminal (command);
   }
-  
+
   static uint8NDArray
   get_named_icon (const std::string& icon_name)
   {
     return (enabled () ?
             instance->do_get_named_icon (icon_name) : uint8NDArray ());
   }
 
   static void set_workspace (void);
diff --git a/liboctave/operators/module.mk b/liboctave/operators/module.mk
--- a/liboctave/operators/module.mk
+++ b/liboctave/operators/module.mk
@@ -10,17 +10,17 @@ OP_MK_FILES := \
   $(srcdir)/%reldir%/vx-op-inc.mk \
   $(srcdir)/%reldir%/mx-op-inc.mk \
   $(srcdir)/%reldir%/smx-op-inc.mk \
   $(srcdir)/%reldir%/vx-op-src.mk \
   $(srcdir)/%reldir%/mx-op-src.mk \
   $(srcdir)/%reldir%/smx-op-src.mk
 
 $(OP_MK_FILES) : %.mk : $(srcdir)/%reldir%/config-ops.sh $(srcdir)/%reldir%/mk-ops.awk
-	$(AM_V_GEN)$(SHELL) $(srcdir)/%reldir%/config-ops.sh $(top_srcdir) `echo $(*F) | $(SED) 's/-op-.*//'` `echo $(*F) | $(SED) 's/.*-op-//'` 
+	$(AM_V_GEN)$(SHELL) $(srcdir)/%reldir%/config-ops.sh $(top_srcdir) `echo $(*F) | $(SED) 's/-op-.*//'` `echo $(*F) | $(SED) 's/.*-op-//'`
 
 
 BUILT_LIBOCTAVE_OPERATORS_SOURCES = \
   $(MX_OP_SRC) \
   $(VX_OP_SRC) \
   $(SMX_OP_SRC)
 
 BUILT_LIBOCTAVE_OPERATORS_INC = \
diff --git a/scripts/gui/errordlg.m b/scripts/gui/errordlg.m
--- a/scripts/gui/errordlg.m
+++ b/scripts/gui/errordlg.m
@@ -53,30 +53,30 @@
 
 function h = errordlg (varargin)
 
   msg = "This is the default error.";
   tit = "Error Dialog";
   opt = "non-modal";
 
   nargs = numel (varargin);
-  
+
   if (nargs > 3)
     print_usage ();
   elseif (nargs == 1)
     msg = varargin{1};
   elseif (nargs == 2)
     msg = varargin{1};
     tit = varargin{2};
   elseif (nargs == 3)
     msg = varargin{1};
     tit = varargin{2};
     opt = varargin{3};
   endif
-  
+
   htmp = msgbox (msg, tit, "error", opt);
 
   if (nargout)
     h = htmp;
   endif
 
 endfunction
 
diff --git a/scripts/gui/helpdlg.m b/scripts/gui/helpdlg.m
--- a/scripts/gui/helpdlg.m
+++ b/scripts/gui/helpdlg.m
@@ -49,26 +49,26 @@
 
 function h = helpdlg (varargin)
 
   msg = "This is the default help.";
   tit = "Help Dialog";
   opt = "non-modal";
 
   nargs = numel (varargin);
-  
+
   if (nargs > 2)
     print_usage ();
   elseif (nargs == 1)
     msg = varargin{1};
   elseif (nargs == 2)
     msg = varargin{1};
     tit = varargin{2};
   endif
-  
+
   htmp = msgbox (msg, tit, "help", opt);
 
   if (nargout)
     h = htmp;
   endif
 
 endfunction
 
diff --git a/scripts/gui/msgbox.m b/scripts/gui/msgbox.m
--- a/scripts/gui/msgbox.m
+++ b/scripts/gui/msgbox.m
@@ -33,17 +33,17 @@
 ##
 ## The optional argument @var{icon} selects a dialog icon.
 ## It can be one of @qcode{"none"} (default), @qcode{"error"}, @qcode{"help"},
 ## @qcode{"warn"} or @qcode{"custom"}. The latter must be followed at
 ## least by an image array  @var{cdata} and eventually its associated
 ## colormap for an indexed image.
 ##
 ## Finally the optional argument @var{opt} controls the behavior of the dialog.
-## If @var{opt} is a string, it may be one of 
+## If @var{opt} is a string, it may be one of
 ##
 ## @table @asis
 ## @item "modal"
 ## The dialog is displayed "modal" which means it prevents users from
 ## interacting with any other GUI element.
 ## @item "non-modal"
 ## The dialog is normal.
 ## @item "replace"
@@ -56,17 +56,17 @@
 ##
 ## @table @asis
 ## @item "WindowStyle"
 ## The value must be "modal", "non-modal" or "replace". See above.
 ## @item "Interpreter"
 ## Controls the @qcode{"interpreter"} property of the text object used
 ## for displaying the message. The value must be "none", "tex" or "latex".
 ## @end table
-## 
+##
 ## The return value @var{h} is a handle to the figure object used for
 ## building the dialog.
 ##
 ## Examples:
 ##
 ## @example
 ## @group
 ## msgbox ("Some message for the user.");
@@ -127,17 +127,17 @@ function retval = msgbox (msg, tit = "",
     endif
 
     if (! any (strcmp (windowstyle, {"non-modal", "modal", "replace"})))
       error ("msgbox: unhandled value %s for OPT", windowstyle);
     elseif (strcmp (windowstyle, "non-modal"))
       windowstyle = "normal";
     endif
   endif
-  
+
   ## Make a GUI element or print to console
   if (__octave_link_enabled__ ())
     retval = __msgbox__ (msg, tit, icon, windowstyle, interpreter);
   else
     if (iscellstr (msg))
       msg = strjoin (msg, "\n");
     endif
     if (isstruct (icon))
@@ -167,25 +167,25 @@ function hf = __msgbox__ (msg, tit, icon
     set (hf, "visible", "off", "windowstyle", "normal");
   else
     hf = dialog ("visible", "off", "name", tit, "tag", "__dialog__", ...
                  "windowstyle", "normal");
     if (! strcmp (graphics_toolkit (), "qt"))
       graphics_toolkit (hf, "qt");
     endif
   endif
-  
+
   hp = uipanel (hf);
-  
+
   hax = axes ("parent", hp, "visible", "off", "units", "pixels", ...
               "ydir", "reverse");
-  
+
   ht = text ("parent", hax, "string", msg, "units", "pixels", ...
              "fontsize", 14, "interpreter", interpreter);
-  
+
   ## Hold default icons data in a persistent variable
   persistent cdata = struct ("help", [], "warn", [], "error", []);
 
   icon_name = "custom";
   if (ischar (icon))
     icon_name = icon;
     icon = struct ("cdata", [], "colormap", []);
     if (isfield (cdata, icon_name))
@@ -204,66 +204,66 @@ function hf = __msgbox__ (msg, tit, icon
         alpha = tmp(:,:,4);
         tmp(:,:,4) = [];
         backgnd = get (hp, "backgroundcolor");
         tmp(:,:,1) += backgnd(1) * (255-alpha);
         tmp(:,:,2) += backgnd(2) * (255-alpha);
         tmp(:,:,3) += backgnd(3) * (255-alpha);
         icon.cdata = tmp;
         cdata.(icon_name) = tmp;
-        
+
       endif
     endif
   endif
 
   ## Compute bbox in pixels
   ax_sz = [200 60];
   ax_margin = 12;
   txt_margin = 20;
   button_margin = 40;
 
   extent = get (ht, "extent");
   extent(3) += txt_margin;
 
   im_sz = size (icon.cdata);
-  
+
   if (! isempty (icon.cdata))
     extent(3) += im_sz(2);
     extent(4) = max (extent(4), im_sz(1));
   endif
 
   ax_sz = max ([ax_sz; extent(3:4)+2*ax_margin]);
-  
+
   ## Align text left when there is an icon
   text_offset = txt_margin;
   if (! isempty (icon.cdata))
     if (! isempty (icon.colormap))
       set (hax, "colormap", icon.colormap)
     endif
     image ("parent", hax, "cdata", icon.cdata, "cdatamapping", "direct", ...
            "xdata", [1 im_sz(2)], "ydata", [-(im_sz(1))/2+1 im_sz(1)/2]);
     text_offset = im_sz(2) + txt_margin;
   endif
 
   ## Set objects position
   wd = ax_sz(1);
   hg = ax_sz(2) + button_margin;
   center = get (0, "screensize")(3:4) / 2;
-  
+
   set (hf, "position", [center(1)-wd/2 center(2)-hg/2 wd hg]);
-  
+
   set (hax, "position", [0 button_margin ax_sz], ...
        "xlim", [1 ax_sz(1)]-ax_margin, "ylim", [-ax_sz(2)/2 ax_sz(2)/2], ...
        "units", "normalized");
 
   set (ht, "units", "data", "position", [text_offset 0 0]);
 
   hui = uicontrol ("string", "OK", "callback", @() close (gcbf ()), ...
                    "position", [ax_sz(1)/2-40 ax_margin 80 28], "parent", hp);
-  
+
   set (hf, "windowstyle", windowstyle, "visible", "on");
 
 endfunction
 
 %!demo
 %! msgbox ("A bare dialog");
 
 %!demo
@@ -290,17 +290,17 @@ endfunction
 %!          "that had the same title ('Documentation')."}, "Documentation", ...
 %!         "warn", "replace");
 
 %!demo
 %! msgbox ("Custom dialog with a random 32-by-32-by-3 RGB icon.", ...
 %!         "Dialog Title", "custom", rand (32, 32, 3));
 
 %!demo
-%! cdata = get (0, "factoryimagecdata"); 
+%! cdata = get (0, "factoryimagecdata");
 %! msgbox ({"Custom dialog with the default Octave image.", ...
 %!          "The image is indexed into the 'copper' colormap"}, ...
 %!         "Dialog Title", "custom", cdata, copper (64));
 
 ## Test input validation
 %!error <msgbox: MSG must be a string or a cell array of strings> msgbox (1)
 %!error <msgbox: TITLE must be a string or a cell array of strings>
 %! msgbox ("msg", 1)
diff --git a/scripts/gui/warndlg.m b/scripts/gui/warndlg.m
--- a/scripts/gui/warndlg.m
+++ b/scripts/gui/warndlg.m
@@ -53,30 +53,30 @@
 
 function h = warndlg (varargin)
 
   msg = "This is the default warning.";
   tit = "Warning Dialog";
   opt = "non-modal";
 
   nargs = numel (varargin);
-  
+
   if (nargs > 3)
     print_usage ();
   elseif (nargs == 1)
     msg = varargin{1};
   elseif (nargs == 2)
     msg = varargin{1};
     tit = varargin{2};
   elseif (nargs == 3)
     msg = varargin{1};
     tit = varargin{2};
     opt = varargin{3};
   endif
-  
+
   htmp = msgbox (msg, tit, "warn", opt);
 
   if (nargout)
     h = htmp;
   endif
 
 endfunction
 
diff --git a/scripts/image/getframe.m b/scripts/image/getframe.m
--- a/scripts/image/getframe.m
+++ b/scripts/image/getframe.m
@@ -94,26 +94,26 @@ function frame = getframe (h = [], rect 
     endif
     pos = rect;
   endif
 
   if (strcmp (get (hf, "visible"), "on")
       || (strcmp (get (hf, "__graphics_toolkit__"), "qt")
           && (strcmp (get (hf, "__gl_window__"), "on")
               || __have_feature__ ("QT_OFFSCREEN"))))
-    
+
     ## __get_frame__ requires that the figure "units" is "pixels"
     unwind_protect
       units = get (hf, "units");
       set (hf, "units", "pixels");
       cdata = __get_frame__ (hf);
     unwind_protect_cleanup
       set (hf, "units", units)
     end_unwind_protect
-    
+
   else
     error ("getframe: figure must be visible or qt toolkit must be used with __gl_window__ property 'on' or QT_OFFSCREEN feature available");
   endif
 
   i1 = max (floor (pos(1)), 1);
   i2 = min (ceil (pos(1)+pos(3)-1), columns (cdata));
   idxx = i1:i2;
   i1 = max (floor (pos(2)), 1);
diff --git a/scripts/miscellaneous/unpack.m b/scripts/miscellaneous/unpack.m
--- a/scripts/miscellaneous/unpack.m
+++ b/scripts/miscellaneous/unpack.m
@@ -125,17 +125,17 @@ function filelist = unpack (file, dir = 
     elseif (! strcmpi (filetype, "gz"))
       error ('unpack: FILETYPE must be "gz" for a directory');
     endif
     ext = ".gz";
   else
     [pathstr, name, ext] = fileparts (file);
 
     if (nargin == 3 && ! strcmpi (ext, filetype))
-      ## override extension with given filetype 
+      ## override extension with given filetype
       if (isempty (ext))
         ext = filetype;
       else
         ext = regexprep (ext, '(\.?)\S*$', ['$1' filetype]);
       endif
     endif
 
     ## Check to see if it's .tar.gz, .tar.Z, etc.
diff --git a/scripts/plot/util/clf.m b/scripts/plot/util/clf.m
--- a/scripts/plot/util/clf.m
+++ b/scripts/plot/util/clf.m
@@ -69,23 +69,23 @@ function h = clf (varargin)
     endif
   endif
 
   if (do_reset)
     ## Delete all the children, including the ones with hidden handles,
     ## except default menus.
     kids = allchild (hfig);
     ismenu = cellfun (@(s) strncmp (s, "__default_menu_", 15), ...
-                      get (kids, "tag")); 
+                      get (kids, "tag"));
     delete (kids(! ismenu));
     reset (hfig);
 
     ## Recover figure listeners which have been deleted
     __add_default_menu__ (hfig, kids(ismenu));
-    
+
     __set_default_mouse_modes__ (hfig);
   else
     ## Select only the chilren with visible handles.
     delete (get (hfig, "children"));
 
     ## Also delete the annotation axes
     hover = findall (hfig, "-depth", 1, "tag", "scribeoverlay");
     delete (hover);
diff --git a/scripts/plot/util/private/__add_default_menu__.m b/scripts/plot/util/private/__add_default_menu__.m
--- a/scripts/plot/util/private/__add_default_menu__.m
+++ b/scripts/plot/util/private/__add_default_menu__.m
@@ -15,82 +15,82 @@
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <https://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {} {} __add_default_menu__ (@var{hfig})
 ## @deftypefnx {} {} __add_default_menu__ (@var{hfig}, @var{hmenu})
 ## Add default menu and listeners to figure.
-##  
+##
 ##
 ## All uimenu handles have their @qcode{"HandleVisibility"} property set to
 ## @qcode{"off"}.
 ## @end deftypefn
 
 ## Author: Kai Habel
 
 function __add_default_menu__ (hf, hmenu = [])
 
-  ## Create 
+  ## Create
   if (isempty (hmenu))
     ## File menu
     hui = uimenu (hf, "label", "&File", "handlevisibility", "off", ...
                   "tag", "__default_menu__File");
     uimenu (hui, "label", "&Open", "callback", @open_cb, ...
             "accelerator", "o");
     uimenu (hui, "label", "&Save", "callback", @save_cb, ...
             "accelerator", "s");
     uimenu (hui, "label", "Save &As", "callback", @save_cb, ...
             "accelerator", "S");
     uimenu (hui, "label", "&Close", "callback", @close_cb, ...
             "accelerator", "w", "separator", "on");
-    hmenu(1) = hui; 
-    
+    hmenu(1) = hui;
+
     ## Edit menu
     hui = uimenu (hf, "label", "&Edit", "handlevisibility", "off", ...
                   "tag", "__default_menu__Edit");
     uimenu (hui, "label", "&New Figure", "callback", "figure ();", ...
             "accelerator", "n");
     uimenu (hui, "label", "&Duplicate Figure",
             "callback", "copyobj (gcbf (), groot ());", ...
             "accelerator", "d");
     uimenu (hui, "label", "Clea&r Figure",
             "callback", "clf (gcbf ());");
     uimenu (hui, "label", "Reset Figure",
             "callback", "reset (gcbf ());");
-    hmenu(2) = hui; 
-    
+    hmenu(2) = hui;
+
     ## Tools menu
     hui = uimenu (hf, "label", "&Tools", "handlevisibility", "off", ...
                   "tag", "__default_menu__Tools");
     uimenu (hui, "label", "Toggle &grid on all axes", "tag", "toggle", ...
             "callback", @grid_cb);
     uimenu (hui, "label", "Show grid on all axes", "tag", "on", ...
             "callback", @grid_cb);
     uimenu (hui, "label", "Hide grid on all axes", "tag", "off", ...
             "callback", @grid_cb);
     uimenu (hui, "label", "Auto&scale all axes", "callback", @autoscale_cb);
-    
+
     hui2 = uimenu (hui, "label", "GUI &Mode (on all axes)");
     uimenu (hui2, "label", "Pan x and y", "tag", "pan_on", ...
             "callback", @guimode_cb);
     uimenu (hui2, "label", "Pan x only", "tag", "pan_xon", ...
             "callback", @guimode_cb);
     uimenu (hui2, "label", "Pan y only", "tag", "pan_yon", ...
             "callback", @guimode_cb);
     uimenu (hui2, "label", "Disable pan and rotate", "tag", ...
             "no_pan_rotate", "callback", @guimode_cb);
     uimenu (hui2, "label", "Rotate on", "tag", "rotate3d", ...
             "callback", @guimode_cb);
     uimenu (hui2, "label", "Enable mousezoom", "tag", "zoom_on", ...
             "callback", @guimode_cb);
     uimenu (hui2, "label", "Disable mousezoom", "tag", "zoom_off", ...
             "callback", @guimode_cb);
-    hmenu(3) = hui; 
+    hmenu(3) = hui;
   endif
 
   ## Figure listeners
   toggle_visibility_cb (hf, [], hmenu);
   addlistener (hf, "menubar", {@toggle_visibility_cb, hmenu});
 
 endfunction
 
