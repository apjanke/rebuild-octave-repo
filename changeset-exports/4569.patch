# HG changeset patch
# User jwe
# Date 1067492897 0
#      Thu Oct 30 05:48:17 2003 +0000
# Node ID 01e4957409a45b038dc5d6707bda3edb525ccb48
# Parent  03c053808a7c18fbb3afed05982dd7fdf460d4d9
[project @ 2003-10-30 05:48:17 by jwe]

diff --git a/liboctave/CNDArray.cc b/liboctave/CNDArray.cc
--- a/liboctave/CNDArray.cc
+++ b/liboctave/CNDArray.cc
@@ -72,25 +72,101 @@ ComplexNDArray::operator ! (void) const
   return b;
 }
 
 // XXX FIXME XXX -- this is not quite the right thing.
 
 boolNDArray
 ComplexNDArray::all (int dim) const
 {
-  MX_ND_ANY_ALL (MX_ND_ALL_EVAL (real (elem (iter_idx)) == 0
-				 && imag (elem (iter_idx)) == 0), true);
+  MX_ND_ANY_ALL_REDUCTION
+    (MX_ND_ALL_EVAL (elem (iter_idx) == Complex (0, 0)), true);
 }
 
 boolNDArray
 ComplexNDArray::any (int dim) const
 {
-  MX_ND_ANY_ALL (MX_ND_ANY_EVAL (real (elem (iter_idx)) != 0
-				 || imag (elem (iter_idx)) != 0), false);
+  MX_ND_ANY_ALL_REDUCTION
+    (MX_ND_ANY_EVAL (elem (iter_idx) != Complex (0, 0)), false);
+}
+
+ComplexMatrix
+ComplexNDArray::cumprod (int dim) const
+{
+  if (dims () . length () == 2)
+    {
+      MX_CUMULATIVE_OP (ComplexMatrix, Complex, *=);
+    }
+  else
+    {
+      (*current_liboctave_error_handler)
+	("cumsum is not yet implemented for N-d arrays");
+
+      return ComplexMatrix ();
+    }
+}
+
+ComplexMatrix
+ComplexNDArray::cumsum (int dim) const
+{
+  if (dims () . length () == 2)
+    {
+      MX_CUMULATIVE_OP (ComplexMatrix, Complex, +=);
+    }
+  else
+    {
+      (*current_liboctave_error_handler)
+	("cumsum is not yet implemented for N-d arrays");
+
+      return ComplexMatrix ();
+    }
+}
+
+ComplexNDArray
+ComplexNDArray::prod (int dim) const
+{
+  MX_ND_COMPLEX_OP_REDUCTION (*= elem (iter_idx), Complex (1, 0));
+}
+
+ComplexNDArray
+ComplexNDArray::sumsq (int dim) const
+{
+  MX_ND_COMPLEX_OP_REDUCTION
+    (+= imag (elem (iter_idx))
+     ? elem (iter_idx) * conj (elem (iter_idx))
+     : std::pow (elem (iter_idx), 2), Complex (0, 0));
+}
+
+ComplexNDArray 
+ComplexNDArray::sum (int dim) const
+{
+  MX_ND_COMPLEX_OP_REDUCTION (+= elem (iter_idx), Complex (0, 0));
+}
+
+Matrix 
+ComplexNDArray::abs (void) const
+{
+  Matrix retval;
+
+  if (dims () . length () == 2)
+    {
+      int nr = rows ();
+      int nc = cols ();
+
+      retval.resize (nr, nc);
+      
+      for (int j = 0; j < nc; j++)
+	for (int i = 0; i < nr; i++)
+	  retval (i, j) = ::abs (elem (i, j));
+    }
+  else
+    (*current_liboctave_error_handler)
+      ("abs is not yet implemented for N-d arrays");
+      
+  return retval;
 }
 
 ComplexMatrix
 ComplexNDArray::matrix_value (void) const
 {
   ComplexMatrix retval;
 
   int nd = ndims ();
diff --git a/liboctave/CNDArray.h b/liboctave/CNDArray.h
--- a/liboctave/CNDArray.h
+++ b/liboctave/CNDArray.h
@@ -72,16 +72,24 @@ public:
 
   boolNDArray operator ! (void) const;
 
   // XXX FIXME XXX -- this is not quite the right thing.
 
   boolNDArray all (int dim = -1) const;
   boolNDArray any (int dim = -1) const;
 
+  ComplexMatrix cumprod (int dim = -1) const;
+  ComplexMatrix cumsum (int dim = -1) const;
+  ComplexNDArray prod (int dim = -1) const;
+  ComplexNDArray sum (int dim = -1) const;
+  ComplexNDArray sumsq (int dim = -1) const;
+
+  Matrix abs (void) const;
+
   ComplexMatrix matrix_value (void) const;
 
   ComplexNDArray squeeze (void) const { return ArrayN<Complex>::squeeze (); }
 
   static void increment_index (Array<int>& ra_idx,
 			       const dim_vector& dimensions,
 			       int start_dimension = 0);
 
diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,23 @@
+2003-10-29  Petter Risholm  <risholm@stud.ntnu.no>
+
+	* dNDArray.cc (NDArray::cumprod, NDArray::cumsum, NDArray::prod,
+	NDArray::sum, NDArray::sumsq, NDArray::abs): New functions.
+	* dNDArray.h: Provide decls.
+	* CNDArray.cc (ComplexNDArray::cumprod, ComplexNDArray::cumsum,
+	ComplexNDArray::prod, ComplexNDArray::sum, ComplexNDArray::sumsq,
+	ComplexNDArray::abs): New functions.
+	* CNDArray.h: Provide decls.
+
+	* mx-inlines.cc (MX_ND_REDUCTION): Rename from MX_ND_ANY_ALL.
+	Generalize to handle other reduction operations.
+	(MX_ND_REAL_OP_REDUCTION, MX_ND_COMPLEX_OP_REDUCTION,
+	MX_ND_ALL_ANY_REDUCTION): New macros.
+
 2003-10-29  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* Array.cc (Array<T>::reshape): New function.
 	* Array.h: Provide decl.
 
 	* dim-vector.h (dim_vector::numel): New function.
 
 	* dim-vector.h (dim_vector_rep::dim_vector_rep (int, const
diff --git a/liboctave/boolNDArray.cc b/liboctave/boolNDArray.cc
--- a/liboctave/boolNDArray.cc
+++ b/liboctave/boolNDArray.cc
@@ -48,23 +48,23 @@ boolNDArray::operator ! (void) const
   return b;
 }
 
 // XXX FIXME XXX -- this is not quite the right thing.
 
 boolNDArray
 boolNDArray::all (int dim) const
 {
-  MX_ND_ANY_ALL (MX_ND_ALL_EVAL (MX_ND_ALL_EXPR), true);
+  MX_ND_ANY_ALL_REDUCTION (MX_ND_ALL_EVAL (MX_ND_ALL_EXPR), true);
 }
 
 boolNDArray
 boolNDArray::any (int dim) const
 {
-  MX_ND_ANY_ALL (MX_ND_ANY_EVAL (MX_ND_ANY_EXPR), false);
+  MX_ND_ANY_ALL_REDUCTION (MX_ND_ANY_EVAL (MX_ND_ANY_EXPR), false);
 }
 
 boolMatrix
 boolNDArray::matrix_value (void) const
 {
   boolMatrix retval;
 
   int nd = ndims ();
diff --git a/liboctave/chNDArray.cc b/liboctave/chNDArray.cc
--- a/liboctave/chNDArray.cc
+++ b/liboctave/chNDArray.cc
@@ -35,23 +35,23 @@ Software Foundation, 59 Temple Place - S
 
 #include "ArrayN-inline.h"
 
 // XXX FIXME XXX -- this is not quite the right thing.
 
 boolNDArray
 charNDArray::all (int dim) const
 {
-  MX_ND_ANY_ALL (MX_ND_ALL_EVAL (elem (iter_idx) == ' '), true);
+  MX_ND_ANY_ALL_REDUCTION (MX_ND_ALL_EVAL (elem (iter_idx) == ' '), true);
 }
 
 boolNDArray
 charNDArray::any (int dim) const
 {
-  MX_ND_ANY_ALL (MX_ND_ANY_EVAL (elem (iter_idx) != ' '), false);
+  MX_ND_ANY_ALL_REDUCTION (MX_ND_ANY_EVAL (elem (iter_idx) != ' '), false);
 }
 
 charMatrix
 charNDArray::matrix_value (void) const
 {
   charMatrix retval;
 
   int nd = ndims ();
diff --git a/liboctave/dNDArray.cc b/liboctave/dNDArray.cc
--- a/liboctave/dNDArray.cc
+++ b/liboctave/dNDArray.cc
@@ -63,25 +63,99 @@ NDArray::operator ! (void) const
   return b;
 }
 
 // XXX FIXME XXX -- this is not quite the right thing.
 
 boolNDArray
 NDArray::all (int dim) const
 {
-  MX_ND_ANY_ALL (MX_ND_ALL_EVAL (MX_ND_ALL_EXPR), true);
+  MX_ND_ANY_ALL_REDUCTION (MX_ND_ALL_EVAL (MX_ND_ALL_EXPR), true);
 }
 
 boolNDArray
 NDArray::any (int dim) const
 {
-  MX_ND_ANY_ALL (MX_ND_ANY_EVAL (MX_ND_ANY_EXPR), false);
+  MX_ND_ANY_ALL_REDUCTION (MX_ND_ANY_EVAL (MX_ND_ANY_EXPR), false);
+}
+
+Matrix
+NDArray::cumprod (int dim) const
+{
+ if (dims () . length () == 2)
+   {
+     MX_CUMULATIVE_OP (Matrix, double, *=);
+   }
+ else
+   {
+     (*current_liboctave_error_handler)
+       ("cumprod is not yet implemented for N-d arrays");
+
+     return Matrix ();
+   }
+}
+
+Matrix
+NDArray::cumsum (int dim) const
+{
+  if (dims () . length () == 2)
+    {
+      MX_CUMULATIVE_OP (Matrix, double, +=);
+    }
+  else
+    {
+      (*current_liboctave_error_handler)
+	("cumprod is not yet implemented for N-d arrays");
+
+      return Matrix ();
+    }
 }
 
+NDArray
+NDArray::prod (int dim) const
+{
+  MX_ND_REAL_OP_REDUCTION (*= elem (iter_idx), 1);
+}
+
+NDArray
+NDArray::sumsq (int dim) const
+{
+  MX_ND_REAL_OP_REDUCTION (+= std::pow (elem (iter_idx), 2), 0);
+}
+
+NDArray 
+NDArray::sum (int dim) const
+{
+  MX_ND_REAL_OP_REDUCTION (+= elem (iter_idx), 0);
+}
+
+Matrix
+NDArray::abs (void) const
+{
+  Matrix retval;
+
+  if (dims () . length () == 2)
+    {
+      int nr = rows ();
+      int nc = cols ();
+
+      retval.resize (nr, nc);
+      
+      for (int j = 0; j < nc; j++)
+	for (int i = 0; i < nr; i++)
+	  retval(i,j) = fabs (elem (i, j));
+    }
+  else
+    (*current_liboctave_error_handler)
+      ("abs is not yet implemented for N-d arrays");
+
+  return retval;
+}
+
+
 Matrix
 NDArray::matrix_value (void) const
 {
   Matrix retval;
 
   int nd = ndims ();
 
   switch (nd)
diff --git a/liboctave/dNDArray.h b/liboctave/dNDArray.h
--- a/liboctave/dNDArray.h
+++ b/liboctave/dNDArray.h
@@ -70,16 +70,24 @@ public:
 
   boolNDArray operator ! (void) const;
 
   // XXX FIXME XXX -- this is not quite the right thing.
 
   boolNDArray all (int dim = -1) const;
   boolNDArray any (int dim = -1) const;
 
+  Matrix cumprod (int dim = -1) const;
+  Matrix cumsum (int dim = -1) const;
+  NDArray prod (int dim = -1) const;
+  NDArray sum (int dim = -1) const;  
+  NDArray sumsq (int dim = -1) const;
+ 
+  Matrix abs (void) const;
+
   Matrix matrix_value (void) const;
 
   NDArray squeeze (void) const { return ArrayN<double>::squeeze (); }
 
   static void increment_index (Array<int>& ra_idx,
 			       const dim_vector& dimensions,
 			       int start_dimension = 0);
 
diff --git a/liboctave/mx-inlines.cc b/liboctave/mx-inlines.cc
--- a/liboctave/mx-inlines.cc
+++ b/liboctave/mx-inlines.cc
@@ -372,20 +372,20 @@ OP_DUP_FCN (conj, mx_inline_conj_dup, Co
 #define MX_ND_ANY_EVAL(TEST_EXPR) \
  if (TEST_EXPR) \
    { \
      if (dim > -1) \
        iter_idx (dim) = 0; \
      retval (iter_idx) = 1; \
      break; \
    } 
-
-#define MX_ND_ANY_ALL(EVAL_EXPR, VAL) \
+ 
+#define MX_ND_REDUCTION(EVAL_EXPR, END_EXPR, VAL, ACC_DECL, RET_TYPE) \
  \
-  boolNDArray retval; \
+  RET_TYPE retval; \
  \
   dim_vector dv = dims (); \
  \
   int empty = true; \
  \
   for (int i = 0; i < dv.length (); i++) \
     { \
       if (dv(i) > 0) \
@@ -469,32 +469,45 @@ OP_DUP_FCN (conj, mx_inline_conj_dup, Co
  \
   Array<int> iter_idx (dv.length (), 0); \
  \
   /* Filling in values.         */ \
   /* First loop finds new index */ \
  \
   for (int j = 0; j < num_iter; j++) \
     { \
+      ACC_DECL;\
       for (int i = 0; i < dim_length; i++) \
 	{ \
 	  if (dim > -1) \
 	    iter_idx(dim) = i; \
  \
 	  EVAL_EXPR; \
 	} \
  \
       if (dim > -1) \
         iter_idx (dim) = 0; \
  \
+      END_EXPR;\
+ \
       increment_index (iter_idx, dv); \
     } \
  \
   return retval
- 
+
+#define MX_ND_REAL_OP_REDUCTION(ASN_EXPR, INIT_VAL) \
+  MX_ND_REDUCTION (acc ASN_EXPR, retval.elem (iter_idx) = acc, \
+                   INIT_VAL, double acc = INIT_VAL, NDArray)
+
+#define MX_ND_COMPLEX_OP_REDUCTION(ASN_EXPR, INIT_VAL) \
+  MX_ND_REDUCTION (acc ASN_EXPR, retval.elem (iter_idx) = acc, \
+                   INIT_VAL, Complex acc = INIT_VAL, ComplexNDArray)
+
+#define MX_ND_ANY_ALL_REDUCTION(EVAL_EXPR, VAL) \
+  MX_ND_REDUCTION (EVAL_EXPR, , VAL, , boolNDArray)
 
 #endif
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,10 +1,31 @@
 2003-10-29  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
+	* ov-str-mat.h (octave_char_matrix_str::reshape): New function.
+	Force result to be a string.
+
+2003-10-29  Petter Risholm  <risholm@stud.ntnu.no>
+
+	* data.cc (DATA_REDUCTION): Work on NDArray and ComplexNDArray
+	objects instead of Matrix and ComplexMatrix objects.
+
+2003-10-29  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* ov-bool-mat.h (octave_bool_matrix::NDArray,
+	octave_bool_matrix::ComplexNDArray): New functions.
+
+	* ov-complex.cc (octave_complex::array_value,
+	octave_complex::complex_array_value): New functions.
+	* ov-complex.h: Provide decls.
+
+	* ov-scalar.cc (octave_scalar::array_value,
+	octave_scalar::complex_array_value): New functions.
+	* ov-scalar.h: Provide decls.
+
 	* oct-map.cc (Octave_map::reshape): New function.
 	* oct-map.h: Provide decl.
 
 	* ov-struct.h (octave_struct::reshape): New function.
 
 	* Cell.h (Cell:Cell (const Array<octave_value>&): New constructor.
 
 	* data.cc (Freshape): New function.
diff --git a/src/data.cc b/src/data.cc
--- a/src/data.cc
+++ b/src/data.cc
@@ -365,24 +365,24 @@ If @var{y} is zero, the result implement
       int dim = (nargin == 1 ? -1 : args(1).int_value (true) - 1); \
  \
       if (! error_state) \
 	{ \
 	  if (dim >= -1) \
 	    { \
 	      if (arg.is_real_type ()) \
 		{ \
-		  Matrix tmp = arg.matrix_value (); \
+		  NDArray tmp = arg.array_value (); \
  \
 		  if (! error_state) \
 		    retval = tmp.FCN (dim); \
 		} \
 	      else if (arg.is_complex_type ()) \
 		{ \
-		  ComplexMatrix tmp = arg.complex_matrix_value (); \
+		  ComplexNDArray tmp = arg.complex_array_value (); \
  \
 		  if (! error_state) \
 		    retval = tmp.FCN (dim); \
 		} \
 	      else \
 		{ \
 		  gripe_wrong_type_arg (#FCN, arg); \
 		  return retval; \
diff --git a/src/ov-bool-mat.h b/src/ov-bool-mat.h
--- a/src/ov-bool-mat.h
+++ b/src/ov-bool-mat.h
@@ -91,21 +91,27 @@ public:
   double double_value (bool = false) const;
 
   double scalar_value (bool frc_str_conv = false) const
     { return double_value (frc_str_conv); }
 
   Matrix matrix_value (bool = false) const
     { return Matrix (matrix.matrix_value ()); }
 
+  NDArray array_value (bool = false) const
+    { return NDArray (matrix.matrix_value ()); }
+
   Complex complex_value (bool = false) const;
 
   ComplexMatrix complex_matrix_value (bool = false) const
     { return ComplexMatrix (matrix.matrix_value ( )); }
 
+  ComplexNDArray complex_array_value (bool = false) const
+    { return ComplexNDArray (matrix.matrix_value ()); }
+
   boolMatrix bool_matrix_value (void) const
     { return matrix.matrix_value (); }
 
   boolNDArray bool_array_value (bool = false) const
     { return matrix; }
 
   octave_value convert_to_str_internal (bool pad, bool force) const;
 
diff --git a/src/ov-complex.cc b/src/ov-complex.cc
--- a/src/ov-complex.cc
+++ b/src/ov-complex.cc
@@ -108,26 +108,45 @@ octave_complex::matrix_value (bool force
   if (! force_conversion && Vwarn_imag_to_real)
     gripe_implicit_conversion ("complex scalar", "real matrix");
 
   retval = Matrix (1, 1, std::real (scalar));
 
   return retval;
 }
 
+NDArray
+octave_complex::array_value (bool force_conversion) const
+{
+  NDArray retval;
+
+  if (! force_conversion && Vwarn_imag_to_real)
+    gripe_implicit_conversion ("complex scalar", "real matrix");
+
+  retval = NDArray (dim_vector (1, 1), std::real (scalar));
+
+  return retval;
+}
+
 Complex
 octave_complex::complex_value (bool) const
 {
   return scalar;
 }
 
 
 ComplexMatrix
 octave_complex::complex_matrix_value (bool) const
 {
   return ComplexMatrix (1, 1, scalar);
 }
 
+ComplexNDArray
+octave_complex::complex_array_value (bool force_conversion) const
+{
+  return ComplexNDArray (dim_vector (1, 1), scalar);
+}
+
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
diff --git a/src/ov-complex.h b/src/ov-complex.h
--- a/src/ov-complex.h
+++ b/src/ov-complex.h
@@ -81,20 +81,24 @@ public:
 
   double double_value (bool = false) const;
 
   double scalar_value (bool frc_str_conv = false) const
     { return double_value (frc_str_conv); }
 
   Matrix matrix_value (bool = false) const;
 
+  NDArray array_value (bool = false) const;
+
   Complex complex_value (bool = false) const;
 
   ComplexMatrix complex_matrix_value (bool = false) const;
 
+  ComplexNDArray complex_array_value (bool = false) const;
+
   void increment (void) { scalar += 1.0; }
 
   void decrement (void) { scalar -= 1.0; }
 
 private:
 
   DECLARE_OV_TYPEID_FUNCTIONS_AND_DATA
 
diff --git a/src/ov-scalar.h b/src/ov-scalar.h
--- a/src/ov-scalar.h
+++ b/src/ov-scalar.h
@@ -84,27 +84,27 @@ public:
 
   double double_value (bool = false) const { return scalar; }
 
   double scalar_value (bool = false) const { return scalar; }
 
   Matrix matrix_value (bool = false) const
     { return Matrix (1, 1, scalar); }
 
-  NDArray double_nd_array_value (bool = false) const
-    {
-      dim_vector temp (1, 1);
-      return NDArray (temp, double_value ());
-    }
+  NDArray array_value (bool = false) const
+    { return NDArray (dim_vector (1, 1), double_value ()); }
 
   Complex complex_value (bool = false) const { return scalar; }
 
   ComplexMatrix complex_matrix_value (bool = false) const
     { return  ComplexMatrix (1, 1, Complex (scalar)); }
 
+  ComplexNDArray complex_array_value (bool = false) const
+    { return ComplexNDArray (dim_vector (1, 1), double_value ()); }
+
   octave_value convert_to_str_internal (bool pad, bool force) const;
 
   void increment (void) { ++scalar; }
 
   void decrement (void) { --scalar; }
 
 private:
 
diff --git a/src/ov-str-mat.h b/src/ov-str-mat.h
--- a/src/ov-str-mat.h
+++ b/src/ov-str-mat.h
@@ -86,16 +86,19 @@ public:
   octave_value *empty_clone (void) const { return new octave_char_matrix_str (); }
 
   type_conv_fcn numeric_conversion_function (void) const;
 
   octave_value do_index_op (const octave_value_list& idx, int resize_ok);
 
   void assign (const octave_value_list& idx, const charMatrix& rhs);
 
+  octave_value reshape (const dim_vector& new_dims) const
+    { return octave_value (charNDArray (matrix.reshape (new_dims)), true); }
+
   bool is_string (void) const { return true; }
 
   bool is_real_type (void) const { return false; }
 
   bool is_matrix_type (void) const { return false; }
 
   bool is_numeric_type (void) const { return false; }
 
