# HG changeset patch
# User Jacob Dawid <jacob.dawid@googlemail.com>
# Date 1340302710 -7200
#      Thu Jun 21 20:18:30 2012 +0200
# Branch gui
# Node ID 85daba52b2d4966ea6547bb9c93050b0c1b947b0
# Parent  7e41fcbb23a4cdf10a873d13e5dc86fca8280b73
Fixed bug with editor complaining that a file has been modified by another application when saving.

* file-editor-tab.cc: Now "unwatching" file before saving.
* file-editor-tab: Renamed slot to update window title.
* file-editor.cc: Renamed slot to update window title.

diff --git a/gui/src/m-editor/file-editor-tab.cc b/gui/src/m-editor/file-editor-tab.cc
--- a/gui/src/m-editor/file-editor-tab.cc
+++ b/gui/src/m-editor/file-editor-tab.cc
@@ -74,24 +74,24 @@ file_editor_tab::file_editor_tab(file_ed
 
   QVBoxLayout *layout = new QVBoxLayout ();
   layout->addWidget (_edit_area);
   layout->setMargin (0);
   setLayout (layout);
 
   // connect modified signal
   connect (_edit_area, SIGNAL (modificationChanged (bool)),
-           this, SLOT (new_title (bool)));
+           this, SLOT (update_window_title (bool)));
   connect (_edit_area, SIGNAL (copyAvailable (bool)),
            this, SLOT (handle_copy_available (bool)));
   connect (&_file_system_watcher, SIGNAL (fileChanged (QString)),
            this, SLOT (file_has_changed (QString)));
 
   _file_name = "";
-  new_title (false);
+  update_window_title (false);
 }
 
 bool
 file_editor_tab::copy_available ()
 {
   return _copy_available;
 }
 
@@ -175,17 +175,17 @@ file_editor_tab::do_comment_selected_tex
                 }
             }
         }
       _edit_area->endUndoAction ();
     }
 }
 
 void
-file_editor_tab::new_title(bool modified)
+file_editor_tab::update_window_title(bool modified)
 {
   QString title(_file_name);
   if ( !_long_title )
     {
       QFileInfo file(_file_name);
       title = file.fileName();
     }
 
@@ -366,30 +366,30 @@ file_editor_tab::load_file (QString file
   QApplication::setOverrideCursor (Qt::WaitCursor);
   _edit_area->setText (in.readAll ());
   QApplication::restoreOverrideCursor ();
 
   set_file_name (fileName);
   update_tracked_file ();
 
 
-  new_title (false); // window title (no modification)
+  update_window_title (false); // window title (no modification)
   _edit_area->setModified (false); // loaded file is not modified yet
 }
 
 void
 file_editor_tab::new_file ()
 {
   if (!_file_editor->isVisible ())
     {
       _file_editor->show ();
     }
 
   set_file_name (UNNAMED_FILE);
-  new_title (false); // window title (no modification)
+  update_window_title (false); // window title (no modification)
   _edit_area->setText ("");
   _edit_area->setModified (false); // new file is not modified yet
 }
 
 bool file_editor_tab::save_file()
 {
   return save_file (_file_name);
 }
@@ -398,34 +398,41 @@ bool
 file_editor_tab::save_file (QString saveFileName)
 {
   // it is a new file with the name "<unnamed>" -> call saveFielAs
   if (saveFileName == UNNAMED_FILE || saveFileName.isEmpty ())
     {
       return save_file_as();
     }
 
+  QStringList watched_files = _file_system_watcher.files();
+  _file_system_watcher.removePaths(watched_files);
+
   // open the file for writing
   QFile file (saveFileName);
   if (!file.open (QFile::WriteOnly))
     {
       QMessageBox::warning (this, tr ("Octave Editor"),
                             tr ("Could not open file %1 for write:\n%2.").
                             arg (saveFileName).arg (file.errorString ()));
+      _file_system_watcher.addPaths (watched_files);
       return false;
     }
 
   // save the contents into the file
   QTextStream out (&file);
   QApplication::setOverrideCursor (Qt::WaitCursor);
   out << _edit_area->text ();
   QApplication::restoreOverrideCursor ();
-  set_file_name (saveFileName);  // save file name for later use
-  new_title (false);      // set the window title to actual file name (not modified)
+  _file_name = saveFileName; // save file name for later use
+  update_window_title (false);      // set the window title to actual file name (not modified)
   _edit_area->setModified (false); // files is save -> not modified
+  file.close();
+
+  _file_system_watcher.addPaths (watched_files);
   return true;
 }
 
 bool
 file_editor_tab::save_file_as ()
 {
   QString saveFileName(_file_name);
   QFileDialog fileDialog(this);
@@ -496,17 +503,17 @@ file_editor_tab::file_has_changed (QStri
       QMessageBox::warning (this, tr ("Octave Editor"),
                             tr ("It seems that \'%1\' has been deleted or renamed. Do you want to save it now?").
                             arg (_file_name), QMessageBox::Save, QMessageBox::Close);
       if (decision == QMessageBox::Save)
         {
           if (!save_file_as ())
             {
               set_file_name (UNNAMED_FILE);
-              new_title (true); // window title (no modification)
+              update_window_title (true); // window title (no modification)
               set_modified (true);
               update_tracked_file ();
             }
         }
       else
         {
           emit close_request ();
         }
diff --git a/gui/src/m-editor/file-editor-tab.h b/gui/src/m-editor/file-editor-tab.h
--- a/gui/src/m-editor/file-editor-tab.h
+++ b/gui/src/m-editor/file-editor-tab.h
@@ -27,17 +27,17 @@ class file_editor;
 class file_editor_tab : public QWidget
 {
   Q_OBJECT
 public:
   file_editor_tab (file_editor *fileEditor);
   bool copy_available ();
 
 public slots:
-  void new_title(bool modified);
+  void update_window_title(bool modified);
   void handle_copy_available(bool enableCopy);
   void handle_margin_clicked (int line, int margin, Qt::KeyboardModifiers state);
   void comment_selected_text ();
   void uncomment_selected_text ();
   void remove_bookmark ();
   void toggle_bookmark ();
   void next_bookmark ();
   void previous_bookmark ();
diff --git a/gui/src/m-editor/file-editor.cc b/gui/src/m-editor/file-editor.cc
--- a/gui/src/m-editor/file-editor.cc
+++ b/gui/src/m-editor/file-editor.cc
@@ -348,17 +348,17 @@ file_editor::construct ()
   redo_action->setShortcut                      (QKeySequence::Redo);
   redo_action->setShortcutContext               (Qt::WindowShortcut);
   _copy_action->setShortcut                     (QKeySequence::Copy);
   _copy_action->setShortcutContext              (Qt::WindowShortcut);
   _cut_action->setShortcut                      (QKeySequence::Cut);
   _cut_action->setShortcutContext               (Qt::WindowShortcut);
   paste_action->setShortcut                     (QKeySequence::Paste);
   paste_action->setShortcutContext              (Qt::WindowShortcut);
-  run_action->setShortcut                       (Qt::Key_F5);
+  run_action->setShortcut                       (Qt::SHIFT + Qt::Key_F5);
   run_action->setShortcutContext                (Qt::WindowShortcut);
   next_bookmark_action->setShortcut             (Qt::Key_F2);
   next_bookmark_action->setShortcutContext      (Qt::WindowShortcut);
   previous_bookmark_action->setShortcut         (Qt::SHIFT + Qt::Key_F2);
   previous_bookmark_action->setShortcutContext  (Qt::WindowShortcut);
   toggle_bookmark_action->setShortcut           (Qt::Key_F7);
   toggle_bookmark_action->setShortcutContext    (Qt::WindowShortcut);
   comment_selection_action->setShortcut         (Qt::CTRL + Qt::Key_R);
