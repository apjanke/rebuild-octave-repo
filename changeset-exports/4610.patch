# HG changeset patch
# User jwe
# Date 1068829739 0
#      Fri Nov 14 17:08:59 2003 +0000
# Node ID 02d2fcf835fc7c9f587a8937fc8033dd947731a9
# Parent  ac4e4807acc5f1586a7e65c7fa6c28adcfb768f4
[project @ 2003-11-14 17:08:59 by jwe]

diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,14 +1,16 @@
 2003-11-14  Gabriele Pannocchia  <g.pannocchia@ing.unipi.it>
 
 	* linear-algebra/krylov.m: Return H = [] in Vnrm == 0 case.
 
 	* linear-algebra/krylovb.m: Fix typo in usage message.
 
+	* general/isdefinite.m: New function.
+
 2003-10-29  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* general/reshape: Delete.
 
 2003-10-28  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* general/numel.m: Delete.
 
diff --git a/scripts/general/isdefinite.m b/scripts/general/isdefinite.m
new file mode 100644
--- /dev/null
+++ b/scripts/general/isdefinite.m
@@ -0,0 +1,57 @@
+## Copyright (C) 2003 Gabriele Pannocchia
+##
+## This file is part of Octave.
+##
+## Octave is free software; you can redistribute it and/or modify it
+## under the terms of the GNU General Public License as published by
+## the Free Software Foundation; either version 2, or (at your option)
+## any later version.
+##
+## Octave is distributed in the hope that it will be useful, but
+## WITHOUT ANY WARRANTY; without even the implied warranty of
+## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+## General Public License for more details.
+##
+## You should have received a copy of the GNU General Public License
+## along with Octave; see the file COPYING.  If not, write to the Free
+## Software Foundation, 59 Temple Place - Suite 330, Boston, MA
+## 02111-1307, USA.
+
+## -*- texinfo -*-
+## @deftypefn {Function File} {} isdefinite (@var{x},@var{tol})
+## Return 1 if @var{x} is symmetric positive definite within the
+## tolerance specified by @var{tol} or 0 if @var{x} is symmetric
+## positive semidefinite.  Otherwise, return -1.  If @var{tol}
+## is omitted, use a tolerance equal to 100 times the machine precision.  
+## @end deftypefn
+## @seealso{issymmetric}
+
+## Author: Gabriele Pannocchia <g.pannocchia@ing.unipi.it>
+## Created: November 2003
+## Adapted-By: jwe
+
+function retval = isdefinite (x, tol)
+
+  if (nargin == 1 || nargin == 2)
+    if (nargin == 1)
+      tol = 100*eps;
+    endif
+    sym = issymmetric (x, tol);
+    if (sym > 0)
+      ## Matrix is symmetric, check eigenvalues.
+      mineig = min (eig (x));
+      if (mineig > tol)
+	retval = 1;
+      elseif (mineig > -tol)
+	retval = 0;
+      else
+	retval = -1;
+      end
+    else
+      error ("isdefinite: matrix x must be symmetric");
+    endif
+  else
+    usage ("isdefinite (x,tol)");
+  endif
+
+endfunction
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,10 +1,14 @@
 2003-11-13  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
+	* utils.cc (Fisvarname): Pass correct name to make_argv.
+
+	* ov-cell.cc (Fiscellstr): New function.
+
 	* ov-file.h (octave_file::all, octave_file::any,
 	octave_file::dims, octave_file::is_real_type,
 	octave_file::ist_real_scalar): New functions.
 
 	* lex.l (bracket_brace_paren_nesting_level::is_bracket_or_brace):
 	New function.
 	(handle_close_bracket): New arg, bracket_type.  Change all uses.
 	Return bool, not int.  First arg is now bool.
diff --git a/src/file-io.cc b/src/file-io.cc
--- a/src/file-io.cc
+++ b/src/file-io.cc
@@ -1176,16 +1176,17 @@ data to read and may be one of\n\
 Single character.\n\
 \n\
 @item \"signed char\"\n\
 @itemx \"schar\"\n\
 Signed character.\n\
 \n\
 @item \"unsigned char\"\n\
 @itemx \"uchar\"\n\
+@itemx \"uint8\"\n\
 Unsigned character.\n\
 \n\
 @item \"short\"\n\
 Short integer.\n\
 \n\
 @item \"unsigned short\"\n\
 @itemx \"ushort\"\n\
 Unsigned short integer.\n\
@@ -1211,21 +1212,27 @@ Single precision float.\n\
 \n\
 @item \"double\"\n\
 @itemx \"float64\"\n\
 @itemx \"real*8\"\n\
 Double precision float.\n\
 \n\
 @item \"integer*2\"\n\
 @itemx \"int16\"\n\
-Two byte integer.\n\
+Two byte signed integer.\n\
 \n\
 @item \"integer*4\"\n\
 @itemx \"int32\"\n\
-Four byte integer.\n\
+Four byte signed integer.\n\
+\n\
+@item \"uint16\"\n\
+Two byte unsigned integer.\n\
+\n\
+@item \"uint32\"\n\
+Four byte unsigned integer.\n\
 @end table\n\
 \n\
 @noindent\n\
 The default precision is @code{\"uchar\"}.\n\
 \n\
 The optional argument @var{skip} specifies the number of bytes to skip\n\
 after each element is read.  If it is not specified, a value of 0 is\n\
 assumed.\n\
diff --git a/src/ov-cell.cc b/src/ov-cell.cc
--- a/src/ov-cell.cc
+++ b/src/ov-cell.cc
@@ -501,13 +501,53 @@ array @var{string}.\n\
 	error ("cellstr: expecting argument to be a string");
     }
   else
     print_usage ("cellstr");
 
   return retval;
 }
 
+DEFUN (iscellstr, args, ,
+  "-*- texinfo -*-\n\
+@deftypefn {Built-in Function} {} iscellstr (@var{cell})\n\
+Return true if every element of the cell array @var{cell} is a\n\
+character string\n\
+@end deftypefn")
+{
+  octave_value retval = true;
+
+  if (args.length () == 1)
+    {
+      octave_value arg = args (0);
+
+      if (arg.is_cell ())
+	{
+	  Cell c = args(0).cell_value ();
+
+	  if (! error_state)
+	    {
+	      for (int i = 0; i < c.length (); i++)
+		{
+		  if (! c(i).is_string ())
+		    {
+		      retval = false;
+		      break;
+		    }
+		}
+	    }
+	  else
+	    error ("iscellstr: expecting argument to be a cell");
+	}
+      else
+	retval = false;
+    }
+  else
+    print_usage ("iscellstr");
+
+  return retval;
+}
+
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
diff --git a/src/utils.cc b/src/utils.cc
--- a/src/utils.cc
+++ b/src/utils.cc
@@ -102,17 +102,17 @@ DEFCMD (isvarname, args, ,
   "@deftypefn {Built-in Function} {} isvarname (@var{name})\n\
 Return true if @var{name} is a valid variable name\n\
 @end deftypefn")
 {
   octave_value retval;
 
   int argc = args.length () + 1;
 
-  string_vector argv = args.make_argv ("help");
+  string_vector argv = args.make_argv ("isvarname");
 
   if (error_state)
     return retval;
 
   if (argc == 2)
     retval = valid_identifier (argv[1]);
   else
     print_usage ("isvarname");
