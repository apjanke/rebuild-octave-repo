# HG changeset patch
# User jwe
# Date 1194636952 0
#      Fri Nov 09 19:35:52 2007 +0000
# Node ID aeeb646f6538c0c3103371f93194b0b9c18026cb
# Parent  68a1b616b7df54318b6fa493a9b73c11ce12838d
[project @ 2007-11-09 19:34:17 by jwe]

diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,10 +1,22 @@
 2007-11-09  John W. Eaton  <jwe@octave.org>
 
+	* audio/wavread.m, control/base/__bodquist__.m,
+	control/base/dare.m, control/base/dlqr.m, control/hinf/h2norm.m,
+	control/system/c2d.m, control/system/is_detectable.m,
+	control/system/is_signal_list.m, control/system/is_stabilizable.m,
+	control/system/tfout.m, general/isdefinite.m,
+	linear-algebra/krylov.m, miscellaneous/compare_versions.m,
+	optimization/glpk.m, path/savepath.m, plot/findobj.m,
+	plot/shading.m, polynomial/mpoles.m, polynomial/polyint.m,
+	signal/freqz.m, signal/hurst.m, sparse/spfun.m, sparse/spones.m,
+	sparse/spstats.m, testfun/assert.m, testfun/fail.m,
+	testfun/test.m: Use specific end keywords.
+
 	* plot/surfc.m, plot/meshc.m: Don't change view if hold is on.
 
 2007-11-09  Kai Habel  <kai.habel@gmx.de>
 
 	* plot/mesh.m, plot/pcolor.m, plot/surf.m, plot/surface.m:
 	Don't change view if hold is on.
 
 2007-11-09  David Bateman  <dbateman@free.fr>
diff --git a/scripts/audio/wavread.m b/scripts/audio/wavread.m
--- a/scripts/audio/wavread.m
+++ b/scripts/audio/wavread.m
@@ -110,17 +110,17 @@ function [y, samples_per_sec, bits_per_s
   while (true)
     if (char (fread (fid, 4))' == "data")
       break;
     endif
     if (i++ == 64)
       fclose (fid);
       error ("wavread: file contains no data chunk");
     endif
-  end
+  endwhile
 
   ## data chunk size
   ck_size = fread (fid, 1, "uint32", 0, BYTEORDER);
   
   ## determine sample data type
   if (format_tag == FORMAT_PCM)
     switch (bits_per_sample)
       case 8
@@ -185,17 +185,18 @@ function [y, samples_per_sec, bits_per_s
     error ("wavread: data in %s doesn't match the number of channels",
 	   filename);
   endif
 
   if (bits_per_sample == 24)
     yi = reshape (yi, 3, rows(yi)/3)';
     yi(yi(:,3) >= 128, 3) -= 256;
     yi = yi * [1; 256; 65536];
-  end
+  endif
+
   if (format_tag == FORMAT_PCM)
     ## normalize samples
     switch (bits_per_sample)
       case 8
         yi = (yi - 128)/127;
       case 16
         yi /= 32767;
       case 24
diff --git a/scripts/control/base/__bodquist__.m b/scripts/control/base/__bodquist__.m
--- a/scripts/control/base/__bodquist__.m
+++ b/scripts/control/base/__bodquist__.m
@@ -76,17 +76,17 @@ function [f, w, rsys] = __bodquist__ (sy
     if (isempty (inputs))
       inputs = 1:mm;                    # use all inputs
       warning ("%s: outputs specified but not inputs", rname);
     elseif (is_signal_list (inputs) || ischar (inputs))
       inputs = sysidx (sys, "in", inputs);
     endif
     if (is_signal_list (outputs) || ischar (outputs))
       outputs = sysidx (sys, "out", outputs);
-    end
+    endif
     sys = sysprune (sys, outputs, inputs);
     [nn, nz, mm, pp] = sysdimensions (sys);
   endif
 
   ## for speed in computation, convert local copy of
   ## SISO state space systems to zero-pole  form
   if (is_siso (sys) && strcmp (sysgettype (sys), "ss"))
     [zer, pol, k, tsam, inname, outname] = sys2zp (sys);
diff --git a/scripts/control/base/dare.m b/scripts/control/base/dare.m
--- a/scripts/control/base/dare.m
+++ b/scripts/control/base/dare.m
@@ -92,20 +92,20 @@ function x = dare (a, b, q, r, opt)
 
     if ((p = issquare (q)) == 0)
       q = q'*q;
     endif
 
     ##Checking positive definiteness
     if (isdefinite (r) <= 0)
       error ("dare: r not positive definite");
-    end
+    endif
     if (isdefinite (q) < 0)
       error ("dare: q not positive semidefinite");
-    end
+    endif
 
     ## Check r dimensions.
     [n, m] = size (b);
     if ((m1 = issquare (r)) == 0)
       error ("dare: r is not square");
     elseif (m1 != m)
       error ("b,r are not conformable");
     endif
diff --git a/scripts/control/base/dlqr.m b/scripts/control/base/dlqr.m
--- a/scripts/control/base/dlqr.m
+++ b/scripts/control/base/dlqr.m
@@ -134,16 +134,16 @@ function [k, p, e] = dlqr (a, b, q, r, s
   if (is_stabilizable (ao, b, tol, 1) == 0)
     error ("dlqr: (a,b) not stabilizable");
   endif
   dflag = is_detectable (ao, qo, tol, 1);
   if (dflag == 0)
     warning ("dlqr: (a,q) not detectable");
   elseif (dflag == -1)
     error ("dlqr: (a,q) has non minimal modes near unit circle");
-  end
+  endif
 
   ## Compute the Riccati solution
   p = dare (ao, b, qo, r);
   k = (r+b'*p*b)\(b'*p*a + s');
   e = eig (a - b*k);
 
 endfunction
diff --git a/scripts/control/hinf/h2norm.m b/scripts/control/hinf/h2norm.m
--- a/scripts/control/hinf/h2norm.m
+++ b/scripts/control/hinf/h2norm.m
@@ -48,17 +48,17 @@
 ## updated for system data structure by John Ingram November 1996
 
 function h2gain = h2norm (sys)
 
   if (nargin != 1)
     print_usage ();
   elseif (! isstruct (sys))
     error ("Sys must be in system data structure");
-  end
+  endif
   dflg = is_digital (sys);
 
   if (! is_stable (sys))
     warning ("h2norm: unstable input system; returning Inf");
     h2gain = Inf;
   else
     ## compute gain
     [a, b, c, d] = sys2ss (sys);
diff --git a/scripts/control/system/c2d.m b/scripts/control/system/c2d.m
--- a/scripts/control/system/c2d.m
+++ b/scripts/control/system/c2d.m
@@ -167,17 +167,17 @@ function dsys = c2d (sys, opt, T)
     aa(crng,crng) = matexp(crng,crng);    ## discretized homegenous diff eqn
 
     ## replace Bc
     bb(crng,:) = matexp(crng,n+(1:m));
 
     ## replace Acd
     if (nz)
       aa(crng,drng) = matexp(crng,n+m+(1:nz));
-    end
+    endif
 
     stnames = sysgetsignals (sys, "st");   ## continuous states renamed below
     innames = sysgetsignals (sys, "in");
     outnames = sysgetsignals (sys, "out");
     outlist = 1:p;
     dsys = ss (aa, bb, cc, dd, T, 0, n+nz, stnames, innames,
 	       outnames, outlist);
     ## rename states
diff --git a/scripts/control/system/is_detectable.m b/scripts/control/system/is_detectable.m
--- a/scripts/control/system/is_detectable.m
+++ b/scripts/control/system/is_detectable.m
@@ -55,14 +55,14 @@ function [retval, U] = is_detectable (a,
     endif
     if (! exist ("dflg"))
       dflg = 0;
     endif
   endif
 
   if (! exist ("tol"))
     tol = 200*eps;
-  end    
+  endif
 
   retval = is_stabilizable (a', c', tol, dflg);
 
 endfunction
 
diff --git a/scripts/control/system/is_signal_list.m b/scripts/control/system/is_signal_list.m
--- a/scripts/control/system/is_signal_list.m
+++ b/scripts/control/system/is_signal_list.m
@@ -26,17 +26,17 @@ function flg = is_signal_list (mylist)
 
   if (nargin != 1)
     print_usage ();
   endif
 
   flg = iscell (mylist);
   if (flg)
     flg = (rows (mylist) == 1 || columns (mylist) == 1);
-  end
+  endif
   if (flg)
     for ii = 1:length (mylist)
       if (! (ischar (mylist{ii}) && rows (mylist{ii}) == 1))
 	flg = 0;
       endif
     endfor
   endif
 
diff --git a/scripts/control/system/is_stabilizable.m b/scripts/control/system/is_stabilizable.m
--- a/scripts/control/system/is_stabilizable.m
+++ b/scripts/control/system/is_stabilizable.m
@@ -61,17 +61,17 @@ function retval = is_stabilizable (a, b,
     ## a,b arguments sent directly.
     if (nargin > 4 || nargin == 1)
       print_usage ();
     endif
     if (exist ("dflg"))
       disc = dflg;
     else
       disc = 0;
-    end
+    endif
   endif
 
   if (! exist ("tol"))
     tol = 200*eps;
   endif
 
 
   ## Checking dimensions
diff --git a/scripts/control/system/tfout.m b/scripts/control/system/tfout.m
--- a/scripts/control/system/tfout.m
+++ b/scripts/control/system/tfout.m
@@ -49,11 +49,11 @@ function tfout (num, denom, x)
   len = max (length (numstring), length (denomstring));
   if (len > 0)
     y = strrep (blanks (len), " ", "-");
     disp (numstring)
     disp (y)
     disp (denomstring)
   else
     error ("tfout: empty transfer function")
-  end
+  endif
 
 endfunction
diff --git a/scripts/general/isdefinite.m b/scripts/general/isdefinite.m
--- a/scripts/general/isdefinite.m
+++ b/scripts/general/isdefinite.m
@@ -40,17 +40,17 @@ function retval = isdefinite (x, tol)
       ## Matrix is symmetric, check eigenvalues.
       mineig = min (eig (x));
       if (mineig > tol)
 	retval = 1;
       elseif (mineig > -tol)
 	retval = 0;
       else
 	retval = -1;
-      end
+      endif
     else
       error ("isdefinite: matrix x must be symmetric");
     endif
   else
     print_usage ();
   endif
 
 endfunction
diff --git a/scripts/linear-algebra/krylov.m b/scripts/linear-algebra/krylov.m
--- a/scripts/linear-algebra/krylov.m
+++ b/scripts/linear-algebra/krylov.m
@@ -195,17 +195,17 @@ function [Uret, H, nu] = krylov (A, V, k
     V = A*Q;
     ## project off of previous vectors
     nu = length (alpha);
     for i = 1:nu
       hv = U(:,i);
       av = alpha(i);
       V = V - av*hv*(hv'*V);
       H(i,nu-columns(V)+(1:columns(V))) = V(pivot_vec(i),:);
-    end
+    endfor
 
   endwhile
 
   ## Back out complete U matrix
   ## back out U matrix ;
   j1 = columns (U);
   for i = j1:-1:1;
     idx = pivot_vec(i:na);
diff --git a/scripts/miscellaneous/compare_versions.m b/scripts/miscellaneous/compare_versions.m
--- a/scripts/miscellaneous/compare_versions.m
+++ b/scripts/miscellaneous/compare_versions.m
@@ -136,17 +136,17 @@ function out = compare_versions (v1, v2,
     v2c(length(v2c)+1:maxcharlen) = "\0";
   endif
 
   ## Determine the operator.
   if any (ismember (operator, "="))
     equal_op = true;
   else
     equal_op = false;
-  end
+  endif
   if any (ismember (operator, "~!"))
     not_op = true;
   else
     not_op = false;
   endif
   if any (ismember (operator, "<"))
     lt_op = true;
   else
diff --git a/scripts/optimization/glpk.m b/scripts/optimization/glpk.m
--- a/scripts/optimization/glpk.m
+++ b/scripts/optimization/glpk.m
@@ -472,47 +472,47 @@ function [xopt, fmin, status, extra] = g
     if (isempty (lb))
       lb = zeros (0, nx, 1);
     elseif (! isreal (lb) || all (size (lb) > 1) || length (lb) != nx)
       error ("LB must be a real valued %d by 1 column vector", nx);
       return;
     endif
   else
     lb = zeros (nx, 1);
-  end
+  endif
 
   ## 5) Vector with the upper bound of each variable
 
   if (nargin > 4)
     if (isempty (ub))
       ub = repmat (Inf, nx, 1);
     elseif (! isreal (ub) || all (size (ub) > 1) || length (ub) != nx)
       error ("UB must be a real valued %d by 1 column vector", nx);
       return;
     endif
   else
     ub = repmat (Inf, nx, 1);
-  end
+  endif
 
   ## 6) Sense of each constraint
 
   if (nargin > 5)
     if (isempty (ctype))
       ctype = repmat ("S", nc, 1);
     elseif (! ischar (ctype) || all (size (ctype) > 1) || length (ctype) != nc)
       error ("CTYPE must be a char valued vector of length %d", nc);
       return;
     elseif (! all (ctype == "F" | ctype == "U" | ctype == "S"
 		   | ctype == "L" | ctype == "D"))
       error ("CTYPE must contain only F, U, S, L, or D");
       return;
     endif
   else
     ctype = repmat ("S", nc, 1);
-  end
+  endif
 
   ## 7) Vector with the type of variables
 
   if (nargin > 6)
     if (isempty (vartype))
       vartype = repmat ("C", nx, 1);
     elseif (! ischar (vartype) || all (size (vartype) > 1)
 	    || length (vartype) != nx)
diff --git a/scripts/path/savepath.m b/scripts/path/savepath.m
--- a/scripts/path/savepath.m
+++ b/scripts/path/savepath.m
@@ -97,17 +97,17 @@ function varargout = savepath (savefile)
     pre = filelines(1:startline-1);
     post = filelines(endline+1:end);
   endif
 
   ## write the results
   [fid, msg] = fopen (savefile, "wt");
   if (fid < 0)
     error ("savepath: unable to open file for writing, %s, %s", savefile, msg);
-  end
+  endif
   for i = 1:length (pre)
     fprintf (fid, "%s\n", pre{i})
   endfor
 
   ## Use single quotes for PATH argument to avoid string escape
   ## processing.
   fprintf (fid, "%s\n  path ('%s');\n%s\n",
 	   beginstring, path (), endstring);
diff --git a/scripts/plot/findobj.m b/scripts/plot/findobj.m
--- a/scripts/plot/findobj.m
+++ b/scripts/plot/findobj.m
@@ -70,17 +70,17 @@ function h = findobj (varargin)
     n1 = 0;
   else
     if (ishandle (varargin{1}(1)))
       handles = varargin{1};
       n1 = 2;
     else
       handles = 0;
       n1 = 1;
-    end
+    endif
     if (n1 <= nargin)
       if (ischar (varargin{n1}))
 	if (strcmpi (varargin{n1}, 'flat'))
 	  depth = 0;
 	  n1 = n1 + 1;
 	elseif (strcmpi(varargin{n1}, '-depth'))
 	  depth = varargin{n1+1};
 	  n1 = n1 + 2;
@@ -203,17 +203,17 @@ function h = findobj (varargin)
           pname{np} = fields{fieldindex};
           if (property(np))
             match = 1;
           else
             if (regularexpression(np))
 	      match = regexp (p.(pname{np}), pvalue{np});
               if isempty (match)
                 match = 0;
-              end
+              endif
             elseif (numel (p.(pname{np})) == numel (pvalue{np}))
 	      if (ischar (pvalue{np}))
 		match = strcmpi (pvalue{np}, p.(pname{np}));
 	      else
 		match = (pvalue{np} == p.(pname{np}));
 	      endif
             else
 	      match = 0;
diff --git a/scripts/plot/shading.m b/scripts/plot/shading.m
--- a/scripts/plot/shading.m
+++ b/scripts/plot/shading.m
@@ -26,17 +26,17 @@
 
 ## Author: Kai Habel <kai.habel@gmx.de>
 
 function shading (ax, mode)
 
   if (nargin == 1)
     mode = ax;
     ax = gca ();
-  end
+  endif
 
   if (nargin != 1 && nargin != 2)
     print_usage ();
   endif
 
   h1 = findobj (ax, "type", "patch");
   h2 = findobj (ax, "type", "surface");
 
diff --git a/scripts/polynomial/mpoles.m b/scripts/polynomial/mpoles.m
--- a/scripts/polynomial/mpoles.m
+++ b/scripts/polynomial/mpoles.m
@@ -90,17 +90,17 @@ function [multp, indx] = mpoles (p, tol,
   indx = [];
   n = find (multp == 0, 1);
   while (n)
     dp = abs (p-p(n));
     if (p(n) == 0.0)
       p0 = mean (abs (p(find (abs (p) > 0))));
       if (isempty (p0))
         p0 = 1;
-      end
+      endif
     else
       p0 = abs (p(n));
     endif
     k = find (dp < tol * p0);
     m = 1:numel (k);
     multp(k) = m;
     indx = [indx; k];
     n = find (multp == 0, 1);
diff --git a/scripts/polynomial/polyint.m b/scripts/polynomial/polyint.m
--- a/scripts/polynomial/polyint.m
+++ b/scripts/polynomial/polyint.m
@@ -45,17 +45,17 @@ function p = polyint (p, k)
     error ("argument must be a vector");
   endif
 
   lp = length (p);
 
   if (lp == 0)
     p = [];
     return;
-  end
+  endif
 
   if (rows (p) > 1)
     ## Convert to column vector
     p = p.';
   endif
 
   p = [(p ./ [lp:-1:1]), k];
 
diff --git a/scripts/signal/freqz.m b/scripts/signal/freqz.m
--- a/scripts/signal/freqz.m
+++ b/scripts/signal/freqz.m
@@ -142,17 +142,17 @@ function [h_r, f_r] = freqz (b, a, n, re
 
   h = hb ./ ha;
 
   if (nargout != 0), # return values and don't plot
     h_r = h;
     f_r = f;
   else             # plot and don't return values
     freqz_plot (f, h);
-  end
+  endif
 
 endfunction
 
 %!test # correct values and fft-polyval consistency
 %! # butterworth filter, order 2, cutoff pi/2 radians
 %! b = [0.292893218813452  0.585786437626905  0.292893218813452];
 %! a = [1  0  0.171572875253810];
 %! [h,w] = freqz(b,a,32);
diff --git a/scripts/signal/hurst.m b/scripts/signal/hurst.m
--- a/scripts/signal/hurst.m
+++ b/scripts/signal/hurst.m
@@ -32,17 +32,17 @@ function H = hurst (x)
   if (nargin != 1)
     print_usage ();
   endif
 
   if (isscalar (x))
     error ("hurst: x must not be a scalar")
   elseif (isvector (x))
     x = reshape (x, length (x), 1);
-  end
+  endif
 
   [xr, xc] = size (x);
 
   s = std (x);
   w = cumsum (x - mean (x));
   RS = (max(w) - min(w)) ./ s;
   H = log (RS) / log (xr);
 
diff --git a/scripts/sparse/spfun.m b/scripts/sparse/spfun.m
--- a/scripts/sparse/spfun.m
+++ b/scripts/sparse/spfun.m
@@ -30,17 +30,17 @@ function t = spfun (f, s)
     print_usage ();
   endif
 
   if (issparse (s))
     [i,j,v,m,n] = spfind (s);
   else
     [i, j, v] = find (s);
     [m, n] = size (s);
-  end
+  endif
 
   if (isa (f, "function_handle") || isa (f, "inline function"))
     t = sparse (i, j, f(v), m, n);
   else
     t = sparse(i, j, feval (f, v), m, n);
   endif
 
 endfunction
diff --git a/scripts/sparse/spones.m b/scripts/sparse/spones.m
--- a/scripts/sparse/spones.m
+++ b/scripts/sparse/spones.m
@@ -28,15 +28,17 @@ function s = spones (s)
     print_usage ();
   endif
 
   if (issparse (s))
     [i, j, v, m, n] = spfind (s);
   else
     [i, j, v] = find (s);
     [m, n] = size (s);
-  end
+  endif
+
   s = sparse (i, j, 1, m, n);
+
 endfunction
 
 %!assert(issparse(spones([1,2;3,0])))
 %!assert(spones([1,2;3,0]),sparse([1,1;1,0]))
 %!assert(spones(sparse([1,2;3,0])),sparse([1,1;1,0]))
diff --git a/scripts/sparse/spstats.m b/scripts/sparse/spstats.m
--- a/scripts/sparse/spstats.m
+++ b/scripts/sparse/spstats.m
@@ -43,21 +43,22 @@ function [count, mean, var] = spstats (S
     i = 1:length (v);
     S = sparse (i, j, v);
   endif 
   [n, m] = size (S);
 
   count = spsum (sparse (i, j, 1, n, m));
   if (nargout > 1) 
     mean = spsum (S) ./ count; 
-  end
+  endif
   if (nargout > 2) 
     ## FIXME Variance with count = 0 or 1?
     diff = S - sparse (i, j, mean(j), n, m); 
     var = spsum (diff .* diff) ./ (count - 1);
-  end
+  endif
+
 endfunction
 
 %!test
 %! [n,m,v] = spstats([1 2 1 2 3 4],[2 2 1 1 1 1]);
 %! assert(n,[4,2]);
 %! assert(m,[10/4,3/2],10*eps);
 %! assert(v,[5/3,1/2],10*eps);
diff --git a/scripts/testfun/assert.m b/scripts/testfun/assert.m
--- a/scripts/testfun/assert.m
+++ b/scripts/testfun/assert.m
@@ -62,17 +62,17 @@ function assert (cond, expected, tol)
 
   if (exist ("argn") == 0)
     argn = " ";
   endif
 
   in = deblank (argn(1,:));
   for i = 2:rows (argn)
     in = strcat (in, ",", deblank (argn(i,:)));
-  end
+  endfor
   in = strcat ("(", in, ")");
 
   coda = "";
   iserror = 0;
   if (nargin == 1)
     if (! isnumeric (cond) || ! all (cond(:)))
       error ("assert %s failed", in); # say which elements failed?
     endif
@@ -82,33 +82,33 @@ function assert (cond, expected, tol)
       iserror = 1;
     else
       try
 	for i = 1:length (cond)
 	  assert (nth (cond, i), nth (expected, i));
 	endfor
       catch
 	iserror = 1;
-      end
+      end_try_catch
     endif
 
   elseif (ischar (expected))
     iserror = (! ischar (cond) || ! strcmp (cond, expected));
 
   elseif (iscell (expected))
     if (! iscell (cond) || any (size (cond) != size (expected)))
       iserror = 1;
     else
       try
 	for i = 1:length (expected(:))
 	  assert (cond{i}, expected{i}, tol);
 	endfor
       catch
 	iserror = 1;
-      end
+      end_try_catch
     endif
 
   elseif (isstruct (expected))
     if (! isstruct (cond) || any (size (cond) != size (expected))
 	|| rows(struct_elements (cond)) != rows (struct_elements (expected)))
       iserror = 1;
     else
       try
@@ -125,17 +125,17 @@ function assert (cond, expected, tol)
 	    v = {v};
 	  else
 	    v = v(:)';
 	  endif
 	  assert (v, {expected.(k)}, tol);
 	endfor
       catch
 	iserror = 1;
-      end
+      end_try_catch
     endif
 
   elseif (ndims (cond) != ndims (expected)
 	  || any (size (cond) != size (expected)))
     iserror = 1;
     coda = "Dimensions don't match";
 
   elseif (tol == 0 && ! strcmp (typeinfo (cond), typeinfo (expected)))
diff --git a/scripts/testfun/fail.m b/scripts/testfun/fail.m
--- a/scripts/testfun/fail.m
+++ b/scripts/testfun/fail.m
@@ -94,33 +94,33 @@ function ret = fail (code, pattern, warn
 	endif
         msg = sprintf ("expected warning <%s>\nbut got <%s>", pattern, err);
       endif
     catch
       warning (state.state, "quiet");
       err = lasterr;
       err([1:7, end]) = [];  # transform "error: ...\n", to "..."
       msg = sprintf ("expected warning <%s> but got error <%s>", pattern, err);
-    end
+    end_try_catch
       
   else
     ## perform the error test
     try
       evalin ("caller", sprintf ("%s;", code));
       msg = sprintf ("expected error <%s> but got none", pattern);
     catch
       err = lasterr ();
       if (strcmp (err(1:7), "error:"))
          err([1:6, end]) = []; # transform "error: ...\n", to "..."
       endif
       if (! isempty (regexp (err, pattern, "once")))
 	return;
       endif
       msg = sprintf ("expected error <%s>\nbut got <%s>", pattern, err);
-    end
+    end_try_catch
   endif
 
   ## if we get here, then code didn't fail or error didn't match
   error (msg);
 endfunction
 
 %!fail ('[1,2]*[2,3]','nonconformant')
 %!fail ("fail('[1,2]*[2;3]','nonconformant')","expected error <nonconformant> but got none")
diff --git a/scripts/testfun/test.m b/scripts/testfun/test.m
--- a/scripts/testfun/test.m
+++ b/scripts/testfun/test.m
@@ -569,17 +569,17 @@ function str = trimleft (str)
   endif
 endfunction
 
 ## make a structure out of the named variables
 ## (based on Etienne Grossmann's tar function)
 function s = bundle (varargin)
   for i = 1:nargin
     s.(deblank (argn(i,:))) = varargin{i};
-  end
+  endfor
 endfunction
 
 function body = __extract_test_code (nm)
   fid = fopen (nm, "rt");
   body = [];
   if (fid >= 0)
     while (! feof (fid))
       ln = fgetl (fid);
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,13 @@
+2007-11-09  John W. Eaton  <jwe@octave.org>
+
+	* DLD-FUNCTIONS/__gnuplot_raw__.l: Don't add atexit ("closeplot")
+	to PKG_ADD file.
+
 2007-11-09  David Bateman  <dbateman@free.fr>
 
 	* graphics.cc, graphics.h.in (class patch): Add the field "keylabel".
 
 	* data.cc (Fcputime) [__WIN32__]: Correct scaling of sys and usr times.
 
 	* graphics.cc (is_handle): Handle must be a real scalar.
 
@@ -15,17 +20,17 @@ 2007-11-08  John W. Eaton  <jwe@octave.o
 	* DLD-FUNCTIONS/__gnuplot_raw__.l (F__gnuplot_save_data__):
 	Note obsolescence in doc string.
 	(WARN_OBSOLETE): New macro
 	(F__gnuplot_save_data__, Fgnuplot_command_plot,
 	Fgnuplot_command_replot, Fgnuplot_command_splot,
 	Fgnuplot_command_using, Fgnuplot_command_with,
 	Fgnuplot_command_axes, Fgnuplot_command_title,
 	Fgnuplot_command_end, Fgnuplot_use_title_option,
-	F__clear_plot_window__, Fpurge_tmp_files,
+	F__clear_plot_window__, Fcloseplot, Fpurge_tmp_files,
 	F__gnuplot_raw__, F__gnuplot_send_inline_data__, F__gnuplot_set__,
 	F__gnuplot_show__, F__gnuplot_plot__, F__gnuplot_splot__,
 	F__gnuplot_replot__): Use WARN_OBSOLETE.
 
 2007-11-07  John W. Eaton  <jwe@octave.org>
 
 	* DLD-FUNCTIONS/regexp.cc: Handle HAVE_PCRE_PCRE_H.  Check
 	HAVE_PCRE_H instead of HAVE_PCRE to decide whether to include pcre.h.
diff --git a/src/DLD-FUNCTIONS/__gnuplot_raw__.l b/src/DLD-FUNCTIONS/__gnuplot_raw__.l
--- a/src/DLD-FUNCTIONS/__gnuplot_raw__.l
+++ b/src/DLD-FUNCTIONS/__gnuplot_raw__.l
@@ -26,18 +26,16 @@ along with Octave; see the file COPYING.
 %{
 // PKG_ADD: mark_as_rawcommand ("__gnuplot_plot__");
 // PKG_ADD: mark_as_rawcommand ("__gnuplot_splot__");
 // PKG_ADD: mark_as_rawcommand ("__gnuplot_replot__");
 
 // PKG_ADD: mark_as_command ("__gnuplot_set__");
 // PKG_ADD: mark_as_command ("__gnuplot_show__");
 
-// PKG_ADD: atexit ("closeplot");
-
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
 #include <map>
 #include <string>
 #include <fstream>
 #include <iostream>
@@ -1725,19 +1723,17 @@ DEFUN_DLD (closeplot, , ,
 @strong{This function is obsolete and will be removed from a future version\n\
 of Octave.}\n\
 \n\
 Close stream to the @code{gnuplot} subprocess.  If you are using X11,\n\
 this will close the plot window.\n\
 @seealso{close}\n\
 @end deftypefn")
 {
-  // Don't use WARN_OBSOLETE here because closeplot is called
-  // unconditionally from atexit and always printing the warning when
-  // Octave exits could cause confusion.
+  WARN_OBSOLETE ("closeplot");
 
   gnuplot::close ();
 
   return octave_value_list ();
 }
 
 DEFUN_DLD (purge_tmp_files, , ,
   "-*- texinfo -*-\n\
