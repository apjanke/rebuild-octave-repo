# HG changeset patch
# User jwe
# Date 1161651613 0
#      Tue Oct 24 01:00:13 2006 +0000
# Node ID 4036e6fca790486cdb6a8a41084c655499328d47
# Parent  950d8cb396178e314e04a78b30b3f43a812ee051
[project @ 2006-10-24 01:00:12 by jwe]

diff --git a/doc/interpreter/emacs.txi b/doc/interpreter/emacs.txi
--- a/doc/interpreter/emacs.txi
+++ b/doc/interpreter/emacs.txi
@@ -334,19 +334,19 @@ and the function names in function decla
 @code{font-lock-function-name-face}.
 @end itemize
 
 There is also rudimentary support for Imenu (currently, function names
 can be indexed).
 
 @cindex TAGS
 @cindex Emacs TAGS files
-@cindex @code{otags}
+@cindex @code{octave-tags}
 You can generate TAGS files for Emacs from Octave @file{.m} files using
-the shell script @code{otags} that is installed alongside your copy of
+the shell script @code{octave-tags} that is installed alongside your copy of
 Octave.
 
 Customization of Octave mode can be performed by modification of the
 variable @code{octave-mode-hook}.  If the value of this variable is
 non-@code{nil}, turning on Octave mode calls its value.
 
 If you discover a problem with Octave mode, you can conveniently send a
 bug report using @kbd{C-c C-b} (@code{octave-submit-bug-report}).  This
diff --git a/libcruft/ChangeLog b/libcruft/ChangeLog
--- a/libcruft/ChangeLog
+++ b/libcruft/ChangeLog
@@ -1,8 +1,15 @@
+2006-10-23  Paul Kienzle  <pkienzle@users.sf.net>
+
+	* misc/f77-fcn.h (F77_CHAR_ARG_DEF, F77_CONST_CHAR_ARG_DEF,
+	F77_CHAR_ARG_LEN_DEF, F77_CHAR_ARG_USE, F77_CHAR_ARG_LEN_USE,
+	F77_CSTRING): New macros to handle passing C character strings to
+	Fortran.
+
 2006-10-17  Michael Goffioul  <michael.goffioul@swing.be>
 
 	* lapack-xtra/xdlamch.f: Begin lines with spaces, not tabs.
 
 	* misc/Makefile.in (machar.o, pic/machar.o): Specify output file
 	name in compile command.
 
 2006-10-13  Michael Goffioul  <michael.goffioul@swing.be>
diff --git a/libcruft/misc/f77-fcn.h b/libcruft/misc/f77-fcn.h
--- a/libcruft/misc/f77-fcn.h
+++ b/libcruft/misc/f77-fcn.h
@@ -82,27 +82,38 @@ extern int f77_exception_encountered;
 
 #if !defined (F77_FCN)
 #define F77_FCN(f, F) F77_FUNC (f, F)
 #endif
 
 #if defined (F77_USES_CRAY_CALLING_CONVENTION)
 
 #include <fortran.h>
+
+/* Use these macros to pass character strings from C to Fortran.  */
 #define F77_CHAR_ARG(x) octave_make_cray_ftn_ch_dsc (x, strlen (x))
 #define F77_CONST_CHAR_ARG(x) \
   octave_make_cray_const_ftn_ch_dsc (x, strlen (x))
 #define F77_CHAR_ARG2(x, l) octave_make_cray_ftn_ch_dsc (x, l)
 #define F77_CONST_CHAR_ARG2(x, l) octave_make_cray_const_ftn_ch_dsc (x, l)
 #define F77_CXX_STRING_ARG(x) \
   octave_make_cray_const_ftn_ch_dsc (x.c_str (), x.length ())
 #define F77_CHAR_ARG_LEN(l)
 #define F77_CHAR_ARG_DECL octave_cray_ftn_ch_dsc
 #define F77_CONST_CHAR_ARG_DECL octave_cray_ftn_ch_dsc
 #define F77_CHAR_ARG_LEN_DECL
+
+/* Use these macros to write C-language functions that accept
+   Fortran-style character strings.  */
+#define F77_CHAR_ARG_DEF(s, len) octave_cray_ftn_ch_dsc s
+#define F77_CONST_CHAR_ARG_DEF(s, len) octave_cray_ftn_ch_dsc s
+#define F77_CHAR_ARG_LEN_DEF(len) 
+#define F77_CHAR_ARG_USE(s) s.ptr
+#define F77_CHAR_ARG_LEN_USE(s, len) (s.mask.len>>3)
+
 #define F77_RET_T int
 #define F77_RETURN(retval) return retval;
 
 /* FIXME -- these should work for SV1 or Y-MP systems but will
    need to be changed for others.  */
 
 typedef union
 {
@@ -143,46 +154,79 @@ octave_make_cray_const_ftn_ch_dsc (const
 }
 
 #ifdef __cplusplus
 #undef OCTAVE_F77_FCN_INLINE
 #endif
 
 #elif defined (F77_USES_VISUAL_FORTRAN_CALLING_CONVENTION)
 
+/* Use these macros to pass character strings from C to Fortran.  */
 #define F77_CHAR_ARG(x) x, strlen (x)
 #define F77_CONST_CHAR_ARG(x) F77_CHAR_ARG (x)
 #define F77_CHAR_ARG2(x, l) x, l
 #define F77_CONST_CHAR_ARG2(x, l) F77_CHAR_ARG2 (x, l)
 #define F77_CXX_STRING_ARG(x) F77_CONST_CHAR_ARG2 (x.c_str (), x.length ())
 #define F77_CHAR_ARG_LEN(l)
 #define F77_CHAR_ARG_DECL char *, int
 #define F77_CONST_CHAR_ARG_DECL const char *, int
 #define F77_CHAR_ARG_LEN_DECL
+
+/* Use these macros to write C-language functions that accept
+   Fortran-style character strings.  */
+#define F77_CHAR_ARG_DEF(s, len) char *s, int len
+#define F77_CONST_CHAR_ARG_DEF(s, len) const char *s, int len
+#define F77_CHAR_ARG_LEN_DEF(len) 
+#define F77_CHAR_ARG_USE(s) s
+#define F77_CHAR_ARG_LEN_USE(s, len) len
+
 #define F77_RET_T void
 #define F77_RETURN(retval)
 
 #else
 
 /* Assume f2c-compatible calling convention.  */
 
+/* Use these macros to pass character strings from C to Fortran.  */
 #define F77_CHAR_ARG(x) x
 #define F77_CONST_CHAR_ARG(x) F77_CHAR_ARG (x)
 #define F77_CHAR_ARG2(x, l) x
 #define F77_CONST_CHAR_ARG2(x, l) F77_CHAR_ARG2 (x, l)
 #define F77_CXX_STRING_ARG(x) F77_CONST_CHAR_ARG2 (x.c_str (), x.length ())
 #define F77_CHAR_ARG_LEN(l) , l
 #define F77_CHAR_ARG_DECL char *
 #define F77_CONST_CHAR_ARG_DECL const char *
 #define F77_CHAR_ARG_LEN_DECL , long
+
+/* Use these macros to write C-language functions that accept
+   Fortran-style character strings.  */
+#define F77_CHAR_ARG_DEF(s, len) char *s
+#define F77_CONST_CHAR_ARG_DEF(s, len) const char *s
+#define F77_CHAR_ARG_LEN_DEF(len) , long len
+#define F77_CHAR_ARG_USE(s) s
+#define F77_CHAR_ARG_LEN_USE(s, len) len
+
 #define F77_RET_T int
 #define F77_RETURN(retval) return retval;
 
 #endif
 
+
+/* Build a C string local variable CS from the Fortran string parameter S
+   declared as F77_CHAR_ARG_DEF(s, len) or F77_CONST_CHAR_ARG_DEF(s, len).
+   The string will be cleaned up at the end of the current block.  
+   Needs to include <cstring> and <vector>.  */
+
+#define F77_CSTRING(s, len, cs) \
+ OCTAVE_LOCAL_BUFFER (char, F77_CHAR_ARG_USE (s), \
+		      F77_CHAR_ARG_LEN_USE (s, len) + 1); \
+ memcpy (cs, F77_CHAR_ARG_USE (s), F77_CHAR_ARG_LEN_USE (s, len)); \
+ cs[F77_CHAR_ARG_LEN_USE(s, len)] = '\0' 
+
+
 extern F77_RET_T
 F77_FUNC (xstopx, XSTOPX) (F77_CONST_CHAR_ARG_DECL
 			   F77_CHAR_ARG_LEN_DECL) GCC_ATTR_NORETURN;
 
 #ifdef __cplusplus
 }
 #endif
 
diff --git a/liboctave/Array.cc b/liboctave/Array.cc
--- a/liboctave/Array.cc
+++ b/liboctave/Array.cc
@@ -2686,16 +2686,37 @@ assign2 (Array<LT>& lhs, const Array<RT>
 			  for (octave_idx_type i = 0; i < n; i++)
 			    {
 			      octave_idx_type ii = idx_i.elem (i);
 			      lhs.elem (ii, jj) = scalar;
 			    }
 			}
 		    }
 		}
+	      else if ((n == 1 || m == 1)
+		       && (rhs_nr == 1 || rhs_nc == 1)
+		       && n * m == rhs_nr * rhs_nc)
+		{
+		  if (n > 0 && m > 0)
+		    {
+		      MAYBE_RESIZE_LHS;
+
+		      octave_idx_type k = 0;
+
+		      for (octave_idx_type j = 0; j < m; j++)
+			{
+			  octave_idx_type jj = idx_j.elem (j);
+			  for (octave_idx_type i = 0; i < n; i++)
+			    {
+			      octave_idx_type ii = idx_i.elem (i);
+			      lhs.elem (ii, jj) = xrhs.elem (k++);
+			    }
+			}
+		    }
+		}
 	      else if (n == rhs_nr && m == rhs_nc)
 		{
 		  if (n > 0 && m > 0)
 		    {
 		      MAYBE_RESIZE_LHS;
 
 		      for (octave_idx_type j = 0; j < m; j++)
 			{
diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,12 @@
+2006-10-23  John W. Eaton  <jwe@octave.org>
+
+	* Array.cc (assign2): Don't require vector assignments to be oriented.
+
 2006-10-17  John W. Eaton  <jwe@octave.org>
 
 	* lo-cieee.c: If isnan is not available but _isnan is, then define
 	isnan to be _isnan, and define HAVE_ISNAN.  Likewise for _finite
 	and _copysign.
 
 2006-10-17  Michael Goffioul  <michael.goffioul@swing.be>
 
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,10 +1,19 @@
 2006-10-23  John W. Eaton  <jwe@octave.org>
 
+	* symtab.cc (symbol_table::clear_mex_functions): New function.
+	* symtab.h: Provide decl.
+	* vriables.cc (clear_mex_functions): New function.
+	* variables.h Provide decl.
+	* toplev.cc: Call clear_mex_functions instead of delete_symbol_tables.
+
+	* variables.cc (delete_symbol_tables): Delete.
+	* variables.h: Delete decl.
+
 	* mex.cc (mex::unmark_array): New function.
 	(mex::persistent): Define with unmark_array.
 	(maybe_unmark_array): New function.
 	(mxArray_struct::set_field_by_number, mxArray_cell::set_cell):
 	Call maybe_unmark_array on val to avoid freeing val twice on exit
 	from mex function.
 	(mxFree): Call xfree, not free.
 
diff --git a/src/symtab.cc b/src/symtab.cc
--- a/src/symtab.cc
+++ b/src/symtab.cc
@@ -835,16 +835,33 @@ symbol_table::clear_functions (void)
 	    ptr->clear ();
 
 	  ptr = ptr->next ();
 	}
     }
 }
 
 void
+symbol_table::clear_mex_functions (void)
+{
+  for (unsigned int i = 0; i < table_size; i++)
+    {
+      symbol_record *ptr = table[i].next ();
+
+      while (ptr)
+	{
+	  if (ptr->is_mex_function ())
+	    ptr->clear ();
+
+	  ptr = ptr->next ();
+	}
+    }
+}
+
+void
 symbol_table::clear_globals (void)
 {
   for (unsigned int i = 0; i < table_size; i++)
     {
       symbol_record *ptr = table[i].next ();
 
       while (ptr)
 	{
diff --git a/src/symtab.h b/src/symtab.h
--- a/src/symtab.h
+++ b/src/symtab.h
@@ -524,16 +524,17 @@ public:
 			 bool warn = false);
 
   void rename (const std::string& old_name, const std::string& new_name);
 
   void clear (void);
 
   void clear_variables (void);
   void clear_functions (void);
+  void clear_mex_functions (void);
   void clear_globals (void);
 
   bool clear (const std::string& nm);
 
   bool clear_variable (const std::string& nm);
   bool clear_function (const std::string& nm);
   bool clear_global (const std::string& nm);
 
diff --git a/src/toplev.cc b/src/toplev.cc
--- a/src/toplev.cc
+++ b/src/toplev.cc
@@ -615,17 +615,17 @@ do_octave_atexit (void)
 
   if (! deja_vu)
     {
       deja_vu = true;
 
       // Do this explicitly so that destructors for mex file objects
       // are called, so that functions registered with mexAtExit are
       // called.
-      delete_symbol_tables ();
+      clear_mex_functions ();
 
       command_editor::restore_terminal_state ();
 
       // FIXME -- is this needed?  Can it cause any trouble?
       raw_mode (0);
 
       octave_history_write_timestamp ();
 
diff --git a/src/variables.cc b/src/variables.cc
--- a/src/variables.cc
+++ b/src/variables.cc
@@ -100,21 +100,19 @@ initialize_symbol_tables (void)
 
   if (! top_level_sym_tab)
     top_level_sym_tab = new symbol_table (4096, "TOP");
 
   curr_caller_sym_tab = curr_sym_tab = top_level_sym_tab;
 }
 
 void
-delete_symbol_tables (void)
+clear_mex_functions (void)
 {
-  delete fbi_sym_tab;
-  delete global_sym_tab;
-  delete top_level_sym_tab;
+  fbi_sym_tab->clear_mex_functions ();
 }
 
 // Attributes of variables and functions.
 
 // Is this a command-style function?
 
 static std::set <std::string> command_set;
 
diff --git a/src/variables.h b/src/variables.h
--- a/src/variables.h
+++ b/src/variables.h
@@ -43,17 +43,17 @@ class string_vector;
 
 #include "ov.h"
 #include "ov-builtin.h"
 #include "symtab.h"
 
 extern bool at_top_level (void);
 
 extern void initialize_symbol_tables (void);
-extern void delete_symbol_tables (void);
+extern void clear_mex_functions (void);
 
 extern bool is_command_name (const std::string&);
 
 // The next three are here temporarily...
 extern bool is_marked_as_rawcommand (const std::string& s);
 extern void mark_as_rawcommand (const std::string& s);
 extern void unmark_rawcommand (const std::string& s);
 
