# HG changeset patch
# User jwe
# Date 993841102 0
#      Fri Jun 29 18:58:22 2001 +0000
# Node ID 07b99a1889cbde8286657ed1e80bccde7cd02809
# Parent  bbe74a066592ee2aeda65d1724129461ba9acc44
[project @ 2001-06-29 18:58:21 by jwe]

diff --git a/ChangeLog b/ChangeLog
--- a/ChangeLog
+++ b/ChangeLog
@@ -1,8 +1,15 @@
+2001-06-29  Mumit Khan  <khan@nanotech.wisc.edu>
+
+	* aclocal.m4 (OCTAVE_CXX_ABI): New macro.
+	(OCTAVE_CXX_PREPENDS_UNDERSCORE): Add missing return value.
+	* configure.in: Use.
+	* acconfig.h (CXX_ABI): New macro.
+
 2001-05-23  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* configure.in: Quote the call to AC_CHECK_FUNC inside the
 	AC_CHECK_LIB macro when checking for lapack.  For autoconf 2.50
 
 	* aclocal.m4: Changes for autoconf 2.50:
 	Convert dnl comments inside AC_DEFUN to ###.
 	(OCTAVE_FLIBS): Use [] quoting instead of changequote.
diff --git a/acconfig.h b/acconfig.h
--- a/acconfig.h
+++ b/acconfig.h
@@ -9,16 +9,19 @@
 /* Define if your version of GNU libc has buggy inline assembly code
    for math functions like exp.  */
 #undef __NO_MATH_INLINES
 
 /* Define if you want bounds checking on element references for
    internal array and matrix classes. */
 #undef BOUNDS_CHECKING
 
+/* Define to the C++ ABI your compiler uses.  */
+#undef CXX_ABI
+
 /* Define if your C++ runtime library is ISO compliant. */
 #undef CXX_ISO_COMPLIANT_LIBRARY
 
 /* Define if your compiler supports `<>' stuff for template friends. */
 #undef CXX_NEW_FRIEND_TEMPLATE_DECL
 
 /* Define if your compiler prepends underscores to external names. */
 #undef CXX_PREPENDS_UNDERSCORE
diff --git a/aclocal.m4 b/aclocal.m4
--- a/aclocal.m4
+++ b/aclocal.m4
@@ -908,17 +908,17 @@ dnl
 dnl OCTAVE_CXX_PREPENDS_UNDERSCORE
 AC_DEFUN(OCTAVE_CXX_PREPENDS_UNDERSCORE,
 [AC_MSG_CHECKING([whether ${CXX-g++} prepends an underscore to external names])
   AC_CACHE_VAL(octave_cv_cxx_prepends_underscore,
     [octave_cv_cxx_prepends_underscore=no
     AC_LANG_SAVE
     AC_LANG_CPLUSPLUS
     cat > conftest.$ac_ext <<EOF
-bool FSmy_dld_fcn (void) { }
+bool FSmy_dld_fcn (void) { return false; }
 EOF
     if AC_TRY_EVAL(ac_compile); then
       if test "`${NM-nm} conftest.o | grep _FSmy_dld_fcn`" != ""; then
         octave_cv_cxx_prepends_underscore=yes
       fi
     else
       echo "configure: failed program was:" >&AC_FD_CC
       cat conftest.$ac_ext >&AC_FD_CC
@@ -985,8 +985,46 @@ AC_DEFUN(OCTAVE_ENABLE_READLINE, [
       LIBS="-lreadline $LIBS"
       AC_DEFINE(USE_READLINE, 1)
     ], [
       AC_MSG_WARN([I need GNU Readline 4.2 or later])
       AC_MSG_ERROR([this is fatal unless you specify --disable-readline])
     ])
   fi
 ])
+dnl
+dnl Determine the C++ compiler ABI. It sets the macro CXX_ABI to the
+dnl name of the ABI, and is used to mangle the C linkage loadable
+dnl functions to avoid ABI mismatch.  GNU C++ currently uses gnu_v2 
+dnl (GCC versions <= 2.95.x) dnl or gnu_v3 (GCC versions >= 3.0).
+dnl Set to "unknown" is when we don't know enough about the ABI, which 
+dnl will happen when using an unsupported C++ compiler. 
+dnl
+dnl OCTAVE_CXX_ABI
+AC_DEFUN(OCTAVE_CXX_ABI,
+[AC_MSG_CHECKING([C++ ABI version used by ${CXX}])
+  AC_CACHE_VAL(octave_cv_cxx_abi,
+    [octave_cv_cxx_abi='unknown'
+    AC_LANG_SAVE
+    AC_LANG_CPLUSPLUS
+    cat > conftest.$ac_ext <<EOF
+bool FSmy_dld_fcn (void) { return false; }
+EOF
+    if AC_TRY_EVAL(ac_compile); then
+      if test "`${NM-nm} conftest.o | grep FSmy_dld_fcn__Fv`" != ""; then
+        octave_cv_cxx_abi='gnu_v2'
+      fi
+      if test "`${NM-nm} conftest.o | grep _Z12FSmy_dld_fcnv`" != ""; then
+        octave_cv_cxx_abi='gnu_v3'
+      fi
+      if test "`${NM-nm} conftest.o | grep __1cMFSmy_dld_fcn6F_b_`" != ""; then
+        octave_cv_cxx_abi='sun'
+      fi
+    else
+      echo "configure: failed program was:" >&AC_FD_CC
+      cat conftest.$ac_ext >&AC_FD_CC
+    fi
+    AC_LANG_RESTORE
+  ])
+  AC_MSG_RESULT($octave_cv_cxx_abi)
+  AC_DEFINE_UNQUOTED(CXX_ABI, $octave_cv_cxx_abi)
+])
+
diff --git a/configure.in b/configure.in
--- a/configure.in
+++ b/configure.in
@@ -16,17 +16,17 @@ dnl Copyright (C) 1996, 1997 John W. Eat
 ### FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
 ### for more details.
 ### 
 ### You should have received a copy of the GNU General Public License
 ### along with Octave; see the file COPYING.  If not, write to the Free
 ### Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ### 02111-1307, USA. 
 
-AC_REVISION($Revision: 1.348 $)
+AC_REVISION($Revision: 1.349 $)
 AC_PREREQ(2.9)
 AC_INIT(src/octave.cc)
 AC_CONFIG_HEADER(config.h)
 
 AC_DEFINE(OCTAVE_SOURCE, 1)
 
 OCTAVE_HOST_TYPE
 
@@ -189,16 +189,21 @@ CXX_VERSION=
 if test -n "$gxx_version"; then
   CXX_VERSION="$gxx_version"
 fi
 AC_SUBST(CXX_VERSION)
 
 OCTAVE_CXX_NEW_FRIEND_TEMPLATE_DECL
 OCTAVE_CXX_ISO_COMPLIANT_LIBRARY
 
+# Determine the ABI used the C++ compiler, needed by the dynamic loading
+# code. Currently supported ABIs are GNU v2, GNU v3 and Sun Workshop.
+
+OCTAVE_CXX_ABI
+
 ### See which C compiler to use (we expect to find gcc).
 
 EXTERN_CFLAGS="$CFLAGS"
 
 AC_PROG_CC
 AC_PROG_CPP
 AC_PROG_GCC_TRADITIONAL
 
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,16 @@
+2001-06-29  Mumit Khan  <khan@nanotech.wisc.edu>
+
+	* defun-int.h (DEFINE_FUN_INSTALLER_FUN{2,3}): New macros.
+	(DEFINE_FUN_INSTALLER_FUN): Use.
+	* dynamic-ld.cc ({STRINGIFY, STRINGIFY1}): New macros.
+	(octave_dynamic_loader::mangle_name): Support dynamic linking
+	for GNU v3 and Sun C++ ABI.
+
 2001-06-26  Mumit Khan  <khan@nanotech.wisc.edu>
 
 	* c-file-ptr-stream.h (c_file_ptr_buf::c_file_ptr_buf): Add GCC3
 	libstdc++-v3 support.
 	* load-save.cc (save_mat5_binary_element): Cast arguments to the
 	correct type.
 	(save_ascii_data): Eliminate compiler warning.
 	* toplev.cc (system): Prefix std::.
diff --git a/src/defun-int.h b/src/defun-int.h
--- a/src/defun-int.h
+++ b/src/defun-int.h
@@ -71,24 +71,32 @@ alias_builtin (const std::string& alias,
 
 // Define the code that will be used to insert the new function into
 // the symbol table.  We look for this name instead of the actual
 // function so that we can easily install the doc std::string too.
 
 typedef bool (*octave_dld_fcn_installer) (const octave_shlib&);
 
 #define DEFINE_FUN_INSTALLER_FUN(name, doc) \
+  DEFINE_FUN_INSTALLER_FUN2(name, doc, CXX_ABI)
+
+#define DEFINE_FUN_INSTALLER_FUN2(name, doc, cxx_abi) \
+  DEFINE_FUN_INSTALLER_FUN3(name, doc, cxx_abi)
+
+#define DEFINE_FUN_INSTALLER_FUN3(name, doc, cxx_abi) \
+  extern "C" \
   bool \
-  FS ## name (const octave_shlib& shl) \
+  FS ## name ## _ ## cxx_abi (const octave_shlib& shl) \
   { \
     check_version (OCTAVE_VERSION, #name); \
     install_dld_function (F ## name, #name, shl, doc); \
     return error_state ? false : true; \
   }
 
+
 // MAKE_BUILTINS is defined to extract function names and related
 // information and create the *.df files that are eventually used to
 // create the builtins.cc file.
 
 #if defined (MAKE_BUILTINS)
 
 // Generate code to install name in the symbol table.  The script
 // mkdefs will create a .def file for every .cc file that uses DEFUN,
diff --git a/src/dynamic-ld.cc b/src/dynamic-ld.cc
--- a/src/dynamic-ld.cc
+++ b/src/dynamic-ld.cc
@@ -303,26 +303,30 @@ octave_dynamic_loader::load (const std::
 }
 
 bool
 octave_dynamic_loader::remove (const std::string& fcn_name, octave_shlib& shl)
 {
   return (instance_ok ()) ? instance->do_remove (fcn_name, shl) : false;
 }
 
+#define STRINGIFY(s) STRINGIFY1(s)
+#define STRINGIFY1(s) #s
+
 std::string
 octave_dynamic_loader::mangle_name (const std::string& name)
 {
 #if defined (CXX_PREPENDS_UNDERSCORE)
   std::string retval ("_FS");
 #else
   std::string retval ("FS");
 #endif
   retval.append (name);
-  retval.append ("__FRC12octave_shlib");
+  retval.append ("_");
+  retval.append (STRINGIFY (CXX_ABI));
   return retval;
 }
 
 static int
 warn_reload_forces_clear (void)
 {
   Vwarn_reload_forces_clear = check_preference ("warn_reload_forces_clear");
 
