# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1485468898 18000
#      Thu Jan 26 17:14:58 2017 -0500
# Node ID b7a24a734c37a85d671128dc9d19a6a994d141e5
# Parent  5a8979c8d0c3e96e0d29effb4a61514e3ac27459
defer SIGHUP and SIGTERM actions until octave_quit is called

* sighandlers.cc (user_terminate): New function.
(base_interrupt_manager::do_user_terminate): New pure virtual.
(w32_interrupt_manager::do_user_terminate): New function.
(posix_interrupt_manager::do_user_terminate): New function.
(interrupt_manager::user_terminate): New function.
(my_friendly_exit): Simplify.
(signal_handler): Also handle SIGHUP and SIGTERM.
(sigchld_handler, sig_hup_handler, sig_term_handler): Delete.
(user_terminate): New function. (int sig_number)
(sigwinch_handler): Delete commented function.
(sigterm_handler): New function.
(install_signal_handlers): Use generic_sig_handler for SIGCHLD.
Use sigterm_handler for SIGHUP and SIGTERM.  Delete commented code for
setting SIGWINCH.

diff --git a/libinterp/corefcn/sighandlers.cc b/libinterp/corefcn/sighandlers.cc
--- a/libinterp/corefcn/sighandlers.cc
+++ b/libinterp/corefcn/sighandlers.cc
@@ -75,17 +75,18 @@ namespace octave
   static bool Vsighup_dumps_octave_core = true;
 
   // Similar to Vsighup_dumps_octave_core, but for SIGTERM signal.
   static bool Vsigterm_dumps_octave_core = true;
 
   // List of signals we have caught since last call to octave::signal_handler.
   static bool *signals_caught = 0;
 
-  // Forward declaration.
+  // Forward declarations.
+  static void user_terminate (int sig_number);
   static void user_abort (const char *sig_name, int sig_number);
 
   class
   base_interrupt_manager
   {
   public:
 
     base_interrupt_manager (void) { }
@@ -95,16 +96,18 @@ namespace octave
     base_interrupt_manager (const base_interrupt_manager&) = delete;
 
     base_interrupt_manager& operator = (const base_interrupt_manager&) = delete;
 
     virtual ~base_interrupt_manager (void) = default;
 
     virtual void do_jump_to_enclosing_context (void) = 0;
 
+    virtual void do_user_terminate (int sig_number) = 0;
+
     virtual void do_user_abort (const char *sig_name, int sig_number) = 0;
 
     virtual void do_raise_sigint (void) = 0;
   };
 
 #if defined (OCTAVE_USE_WINDOWS_API)
 
   class
@@ -160,16 +163,30 @@ namespace octave
 #endif
 
           SetThreadContext (thread, &threadContext);
 
           ResumeThread (thread);
         }
     }
 
+    void do_user_terminate (int sig_number)
+    {
+      bool is_interrupt_thread = (GetCurrentThreadId () == thread_id);
+
+      if (is_interrupt_thread)
+        octave::user_terminate (sig_number);
+      else
+        {
+          SuspendThread (thread);
+          octave::user_terminate (sig_number);
+          ResumeThread (thread);
+        }
+    }
+
     void do_user_abort (const char *sig_name, int sig_number)
     {
       bool is_interrupt_thread = (GetCurrentThreadId () == thread_id);
 
       if (is_interrupt_thread)
         octave::user_abort (sig_name, sig_number);
       else
         {
@@ -222,16 +239,21 @@ namespace octave
 
     ~posix_interrupt_manager (void) = default;
 
     void do_jump_to_enclosing_context (void)
     {
       ::octave_jump_to_enclosing_context ();
     }
 
+    void do_user_terminate (int sig_number)
+    {
+      octave::user_terminate (sig_number);
+    }
+
     void do_user_abort (const char *sig_name, int sig_number)
     {
       octave::user_abort (sig_name, sig_number);
     }
 
     void do_raise_sigint (void)
     {
       octave_raise_wrapper (SIGINT);
@@ -248,16 +270,22 @@ namespace octave
     static bool init (void) { return instance_ok (); }
 
     static void jump_to_enclosing_context (void)
     {
       if (instance_ok ())
         instance->do_jump_to_enclosing_context ();
     }
 
+    static void user_terminate (int sig_number)
+    {
+      if (instance_ok ())
+        instance->do_user_terminate (sig_number);
+    }
+
     static void user_abort (const char *sig_name, int sig_number)
     {
       if (instance_ok ())
         instance->do_user_abort (sig_name, sig_number);
     }
 
     static void raise_sigint (void)
     {
@@ -304,31 +332,50 @@ namespace octave
 
     static void cleanup_instance (void) { delete instance; instance = 0; }
 
     static base_interrupt_manager* instance;
   };
 
   base_interrupt_manager *interrupt_manager::instance = 0;
 
+  static void
+  my_friendly_exit (const char *sig_name, int sig_number,
+                    bool save_vars = true)
+  {
+    std::cerr << "fatal: caught signal " << sig_name
+              << " -- stopping myself..." << std::endl;
+
+    if (save_vars)
+      dump_octave_core ();
+
+    sysdep_cleanup ();
+
+    throw octave::exit_exception (1);
+  }
+
   // Called from octave_quit () to actually do something about the signals
   // we have caught.
 
   void
   signal_handler (void)
   {
     // The list of signals is relatively short, so we will just go
     // linearly through the list.
 
     static int sigchld;
     static int sigfpe;
+    static int sighup;
+    static int sigterm;
     static int sigpipe;
 
     static const bool have_sigchld = octave_get_sig_number ("SIGCHLD", &sigchld);
     static const bool have_sigfpe = octave_get_sig_number ("SIGFPE", &sigfpe);
+    static const bool have_sighup = octave_get_sig_number ("SIGHUP", &sighup);
+    static const bool have_sigterm = octave_get_sig_number ("SIGTERM", &sigterm);
     static const bool have_sigpipe = octave_get_sig_number ("SIGPIPE", &sigpipe);
 
     for (int i = 0; i < octave_num_signals (); i++)
       {
         if (signals_caught[i])
           {
             signals_caught[i] = false;
 
@@ -344,64 +391,26 @@ namespace octave
                 set_interrupt_handler (saved_interrupt_handler);
 
                 octave_unblock_child (context);
 
                 child_list::reap ();
               }
             else if (have_sigfpe && i == sigfpe)
               std::cerr << "warning: floating point exception" << std::endl;
+            else if (have_sighup && i == sighup)
+              my_friendly_exit ("SIGHUP", sighup, Vsighup_dumps_octave_core);
+            else if (have_sigterm && i == sigterm)
+              my_friendly_exit ("SIGTERM", sigterm, Vsigterm_dumps_octave_core);
             else if (have_sigpipe && i == sigpipe)
               std::cerr << "warning: broken pipe" << std::endl;
           }
       }
   }
 
-  static void
-  my_friendly_exit (const char *sig_name, int sig_number,
-                    bool save_vars = true)
-  {
-    static bool been_there_done_that = false;
-
-    if (been_there_done_that)
-      {
-        set_signal_handler ("SIGABRT", SIG_DFL);
-
-        std::cerr << "panic: attempted clean up failed -- aborting..."
-                  << std::endl;
-
-        sysdep_cleanup ();
-
-        abort ();
-      }
-    else
-      {
-        been_there_done_that = true;
-
-        std::cerr << "panic: " << sig_name << " -- stopping myself..."
-                  << std::endl;
-
-        if (save_vars)
-          dump_octave_core ();
-
-        if (sig_number < 0)
-          {
-            sysdep_cleanup ();
-
-            exit (1);
-          }
-        else
-          {
-            set_signal_handler (sig_number, SIG_DFL);
-
-            octave_raise_wrapper (sig_number);
-          }
-      }
-  }
-
   sig_handler *
   set_signal_handler (int sig, sig_handler *handler, bool restart_syscalls)
   {
     return octave_set_signal_handler_internal (sig, handler, restart_syscalls);
   }
 
   sig_handler *
   set_signal_handler (const char *signame, sig_handler *handler,
@@ -409,24 +418,16 @@ namespace octave
   {
     return octave_set_signal_handler_by_name (signame, handler,
                                               restart_syscalls);
   }
 
   static void
   generic_sig_handler (int sig)
   {
-    my_friendly_exit (octave_strsignal_wrapper (sig), sig);
-  }
-
-  // Handle SIGCHLD.
-
-  static void
-  sigchld_handler (int sig)
-  {
     octave_signal_caught = 1;
 
     signals_caught[sig] = true;
   }
 
 #if defined (__alpha__)
   static void
   sigfpe_handler (int sig)
@@ -437,43 +438,38 @@ namespace octave
 
         signals_caught[sig] = true;
 
         octave_interrupt_state++;
       }
   }
 #endif
 
-  static void
-  sig_hup_handler (int /* sig */)
-  {
-    if (Vsighup_dumps_octave_core)
-      dump_octave_core ();
-
-    clean_up_and_exit (0);
-  }
+  // Handle SIGHUP and SIGTERM.
 
   static void
-  sig_term_handler (int /* sig */)
+  user_terminate (int sig_number)
   {
-    if (Vsigterm_dumps_octave_core)
-      dump_octave_core ();
+    if (! octave_initialized)
+      exit (1);
+
+    octave_signal_caught = 1;
+
+    signals_caught[sig_number] = true;
 
-    clean_up_and_exit (0);
+    if (octave_interrupt_immediately)
+      {
+        // Try to get to a place where it is safe to throw an
+        // exception.
+
+        interrupt_manager::jump_to_enclosing_context ();
+      }
   }
 
-#if 0
-  static void
-  sigwinch_handler (int /* sig */)
-  {
-    command_editor::resize_terminal ();
-  }
-#endif
-
-  // Handle SIGINT by restarting the parser (see octave.cc).
+  // Handle SIGINT.
   //
   // This also has to work for SIGBREAK (on systems that have it), so we
   // use the value of sig, instead of just assuming that it is called
   // for SIGINT only.
 
   static void
   user_abort (const char *sig_name, int sig_number)
   {
@@ -501,16 +497,19 @@ namespace octave
               }
           }
 
         if (octave_interrupt_immediately)
           {
             if (octave_interrupt_state == 0)
               octave_interrupt_state = 1;
 
+            // Try to get to a place where it is safe to throw an
+            // exception.
+
             interrupt_manager::jump_to_enclosing_context ();
           }
         else
           {
             // If we are already cleaning up from a previous interrupt,
             // take note of the fact that another interrupt signal has
             // arrived.
 
@@ -527,16 +526,22 @@ namespace octave
 
             if (octave_interrupt_state >= 3)
               my_friendly_exit (sig_name, sig_number, true);
           }
       }
   }
 
   static void
+  sigterm_handler (int sig)
+  {
+    interrupt_manager::user_terminate (sig);
+  }
+
+  static void
   sigint_handler (int sig)
   {
     interrupt_manager::user_abort (octave_strsignal_wrapper (sig), sig);
   }
 
   static void
   sigpipe_handler (int sig)
   {
@@ -604,30 +609,30 @@ namespace octave
     for (int i = 0; i < octave_num_signals (); i++)
       signals_caught[i] = false;
 
     catch_interrupts ();
 
     set_signal_handler ("SIGABRT", generic_sig_handler);
     set_signal_handler ("SIGALRM", generic_sig_handler);
     set_signal_handler ("SIGBUS", generic_sig_handler);
-    set_signal_handler ("SIGCHLD", sigchld_handler);
+    set_signal_handler ("SIGCHLD", generic_sig_handler);
 
     // SIGCLD
     // SIGCONT
 
     set_signal_handler ("SIGEMT", generic_sig_handler);
 
 #if defined (__alpha__)
     set_signal_handler ("SIGFPE", sigfpe_handler);
 #else
     set_signal_handler ("SIGFPE", generic_sig_handler);
 #endif
 
-    set_signal_handler ("SIGHUP", sig_hup_handler);
+    set_signal_handler ("SIGHUP", sigterm_handler);
     set_signal_handler ("SIGILL", generic_sig_handler);
 
     // SIGINFO
     // SIGINT
 
     set_signal_handler ("SIGIOT", generic_sig_handler);
     set_signal_handler ("SIGLOST", generic_sig_handler);
     set_signal_handler ("SIGPIPE", sigpipe_handler);
@@ -637,17 +642,17 @@ namespace octave
     // SIGPWR
 
     set_signal_handler ("SIGQUIT", generic_sig_handler);
     set_signal_handler ("SIGSEGV", generic_sig_handler);
 
     // SIGSTOP
 
     set_signal_handler ("SIGSYS", generic_sig_handler);
-    set_signal_handler ("SIGTERM", sig_term_handler);
+    set_signal_handler ("SIGTERM", sigterm_handler);
     set_signal_handler ("SIGTRAP", generic_sig_handler);
 
     // SIGTSTP
     // SIGTTIN
     // SIGTTOU
     // SIGURG
 
     set_signal_handler ("SIGUSR1", generic_sig_handler);
