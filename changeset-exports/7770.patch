# HG changeset patch
# User David Bateman <dbateman@free.fr>
# Date 1210335946 -7200
#      Fri May 09 14:25:46 2008 +0200
# Node ID c6a1a217ac3cbe0b0ca6cf3b159eb598417a81f5
# Parent  247828ad21e250b3f967b7813395d2036437f8a1
Compatibility fix for assert

diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,8 +1,13 @@
+2008-05-12  David Bateman  <dbateman@free.fr>
+
+	* testfun/assert.m: Allow assert(cond, errmsg, ...) and
+	assert(cond, msgid, errmsg, ...) syntax for compatibility.
+
 2008-05-09  Thomas Weber  <thomas.weber.mail@gmail.com>
 
 	* miscellaneous/news.m: Replace deprecated isstr call.
 
 2008-05-06  David Bateman  <dbateman@free.fr>
 
 	* miscellaneous/symvar.m: New function.
 	* miscellaneous/Makefile.in (SOURCES): Add it to the list.
diff --git a/scripts/testfun/assert.m b/scripts/testfun/assert.m
--- a/scripts/testfun/assert.m
+++ b/scripts/testfun/assert.m
@@ -13,26 +13,32 @@
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} assert (@var{cond})
+## @deftypefnx {Function File} {} assert (@var{cond}, @var{errmsg}, @dots{})
+## @deftypefnx {Function File} {} assert (@var{cond}, @{var{msg_id}, @var{errmsg}, @dots{})
 ## @deftypefnx {Function File} {} assert (@var{observed},@var{expected})
 ## @deftypefnx {Function File} {} assert (@var{observed},@var{expected},@var{tol})
 ##
 ## Produces an error if the condition is not met. @code{assert} can be
 ## called in three different ways.
 ##
 ## @table @code
 ## @item assert (@var{cond})
+## @itemx assert (@var{cond}, @var{errmsg}, @dots{})
+## @itemx assert (@var{cond}, @var{msg_id}, @var{errmsg}, @dots{})
 ## Called with a single argument @var{cond}, @code{assert} produces an
-## error if @var{cond} is zero.
+## error if @var{cond} is zero. If called with a single argument a
+## generic error message. With more than one argument, the additional
+## arguments are passed to the @code{error} function.
 ##
 ## @item assert (@var{observed}, @var{expected})
 ## Produce an error if observed is not the same as expected. Note that 
 ## observed and expected can be strings, scalars, vectors, matrices, 
 ## lists or structures.
 ##
 ## @item assert(@var{observed}, @var{expected}, @var{tol})
 ## Accept a tolerance when comparing numbers. 
@@ -45,158 +51,168 @@
 ## @seealso{test}
 ## @end deftypefn
 
 ## TODO: Output throttling: don't print out the entire 100x100 matrix,
 ## TODO: but instead give a summary; don't print out the whole list, just
 ## TODO: say what the first different element is, etc.  To do this, make
 ## TODO: the message generation type specific.
 
-function assert (cond, expected, tol)
-
-  if (nargin < 1 || nargin > 3)
-    print_usage ();
-  endif
-
-  if (nargin < 3)
-    tol = 0;
-  endif
-
-  if (exist ("argn") == 0)
-    argn = " ";
-  endif
+function assert (cond, varargin)
 
   in = deblank (argn(1,:));
   for i = 2:rows (argn)
     in = cstrcat (in, ",", deblank (argn(i,:)));
   endfor
   in = cstrcat ("(", in, ")");
 
-  coda = "";
-  iserror = 0;
-  if (nargin == 1)
+  if (nargin == 1 || (nargin > 1 && islogical (cond) && ischar (varargin{1})))
     if (! isnumeric (cond) || ! all (cond(:)))
-      error ("assert %s failed", in); # say which elements failed?
-    endif
-  
-  elseif (ischar (expected))
-    iserror = (! ischar (cond) || ! strcmp (cond, expected));
-
-  elseif (iscell (expected))
-    if (! iscell (cond) || any (size (cond) != size (expected)))
-      iserror = 1;
-    else
-      try
-	for i = 1:length (expected(:))
-	  assert (cond{i}, expected{i}, tol);
-	endfor
-      catch
-	iserror = 1;
-      end_try_catch
+      if (nargin == 1)
+	error ("assert %s failed", in); # say which elements failed?
+      else
+	error (varargin{:});
+      endif
+    endif  
+  else
+    if (nargin < 2 || nargin > 3)
+      print_usage ();
     endif
 
-  elseif (isstruct (expected))
-    if (! isstruct (cond) || any (size (cond) != size (expected))
-	|| rows(struct_elements (cond)) != rows (struct_elements (expected)))
-      iserror = 1;
+    expected = varargin {1};
+    if (nargin < 3)
+      tol = 0;
     else
-      try
-	empty = numel (cond) == 0;
-	normal = numel (cond) == 1;
-	for [v, k] = cond
-	  if (! struct_contains (expected, k))
-	    error ();
-	  endif
-	  if (empty)
-	    v = cell (1, 0);
-	  endif
-	  if (normal)
-	    v = {v};
-	  else
-	    v = v(:)';
-	  endif
-	  assert (v, {expected.(k)}, tol);
-	endfor
-      catch
-	iserror = 1;
-      end_try_catch
+      tol = varargin {2};
+    endif
+
+    if (exist ("argn") == 0)
+      argn = " ";
     endif
 
-  elseif (ndims (cond) != ndims (expected)
-	  || any (size (cond) != size (expected)))
-    iserror = 1;
-    coda = "Dimensions don't match";
+    coda = "";
+    iserror = 0;
+
+
+    if (ischar (expected))
+      iserror = (! ischar (cond) || ! strcmp (cond, expected));
 
-  elseif (tol == 0 && ! strcmp (typeinfo (cond), typeinfo (expected)))
-    iserror = 1;
-    coda = cstrcat ("Type ", typeinfo (cond), " != ", typeinfo (expected));
+    elseif (iscell (expected))
+      if (! iscell (cond) || any (size (cond) != size (expected)))
+	iserror = 1;
+      else
+	try
+	  for i = 1:length (expected(:))
+	    assert (cond{i}, expected{i}, tol);
+	  endfor
+	catch
+	  iserror = 1;
+	end_try_catch
+      endif
 
-  else # numeric
-    A = cond(:);
-    B = expected(:);
-    ## Check exceptional values
-    if (any (isna (A) != isna (B)))
-      iserror = 1;
-      coda = "NAs don't match";
-    elseif (any (isnan (A) != isnan (B)))
-      iserror = 1;
-      coda = "NaNs don't match";
-### Try to avoid problems comparing strange values like Inf+NaNi.
-    elseif (any (isinf (A) != isinf (B))
-	    || any (A(isinf (A) & ! isnan (A)) != B(isinf (B) & ! isnan (B))))
+    elseif (isstruct (expected))
+      if (! isstruct (cond) || any (size (cond) != size (expected))
+	  || rows(struct_elements (cond)) != rows (struct_elements (expected)))
+	iserror = 1;
+      else
+	try
+	  empty = numel (cond) == 0;
+	  normal = numel (cond) == 1;
+	  for [v, k] = cond
+	    if (! struct_contains (expected, k))
+	      error ();
+	    endif
+	    if (empty)
+	      v = cell (1, 0);
+	    endif
+	    if (normal)
+	      v = {v};
+	    else
+	      v = v(:)';
+	    endif
+	    assert (v, {expected.(k)}, tol);
+	  endfor
+	catch
+	  iserror = 1;
+	end_try_catch
+      endif
+
+    elseif (ndims (cond) != ndims (expected)
+	    || any (size (cond) != size (expected)))
       iserror = 1;
-      coda = "Infs don't match";
-    else
-      ## Check normal values
-      A = A(finite (A));
-      B = B(finite (B));
-      if (tol == 0)
-        err = any (A != B);
-	errtype = "values do not match";
-      elseif (tol >= 0)
-	err = max (abs (A - B));
-	errtype = "maximum absolute error %g exceeds tolerance %g";
-      else 
-	abserr = max (abs (A(B == 0)));
-	A = A(B != 0);
-	B = B(B != 0);
-	relerr = max (abs (A - B) ./ abs (B));
-	err = max ([abserr; relerr]);
-	errtype = "maximum relative error %g exceeds tolerance %g";
-      endif
-      if (err > abs (tol))
+      coda = "Dimensions don't match";
+
+    elseif (tol == 0 && ! strcmp (typeinfo (cond), typeinfo (expected)))
+      iserror = 1;
+      coda = cstrcat ("Type ", typeinfo (cond), " != ", typeinfo (expected));
+
+    else # numeric
+      A = cond(:);
+      B = expected(:);
+      ## Check exceptional values
+      if (any (isna (A) != isna (B)))
+	iserror = 1;
+	coda = "NAs don't match";
+      elseif (any (isnan (A) != isnan (B)))
+	iserror = 1;
+	coda = "NaNs don't match";
+### Try to avoid problems comparing strange values like Inf+NaNi.
+      elseif (any (isinf (A) != isinf (B))
+	      || any (A(isinf (A) & ! isnan (A)) != B(isinf (B) & ! isnan (B))))
 	iserror = 1;
-	coda = sprintf (errtype, err, abs (tol));
+	coda = "Infs don't match";
+      else
+	## Check normal values
+	A = A(finite (A));
+	B = B(finite (B));
+	if (tol == 0)
+          err = any (A != B);
+	  errtype = "values do not match";
+	elseif (tol >= 0)
+	  err = max (abs (A - B));
+	  errtype = "maximum absolute error %g exceeds tolerance %g";
+	else 
+	  abserr = max (abs (A(B == 0)));
+	  A = A(B != 0);
+	  B = B(B != 0);
+	  relerr = max (abs (A - B) ./ abs (B));
+	  err = max ([abserr; relerr]);
+	  errtype = "maximum relative error %g exceeds tolerance %g";
+	endif
+	if (err > abs (tol))
+	  iserror = 1;
+	  coda = sprintf (errtype, err, abs (tol));
+	endif
       endif
     endif
-  endif
 
-  if (! iserror)
-    return;
-  endif
+    if (! iserror)
+      return;
+    endif
 
-  ## pretty print the "expected but got" info,
-  ## trimming leading and trailing "\n"
-  str = disp (expected);
-  idx = find (str != "\n");
-  if (! isempty (idx))
-    str = str(idx(1):idx(end));
+    ## pretty print the "expected but got" info,
+    ## trimming leading and trailing "\n"
+    str = disp (expected);
+    idx = find (str != "\n");
+    if (! isempty (idx))
+      str = str(idx(1):idx(end));
+    endif
+    str2 = disp (cond);
+    idx = find (str2 != "\n");
+    if (! isempty (idx))
+      str2 = str2 (idx(1):idx(end));
+    endif
+    msg = cstrcat ("assert ", in, " expected\n", str, "\nbut got\n", str2);
+    if (! isempty (coda))
+      msg = cstrcat (msg, "\n", coda);
+    endif
+    error ("%s", msg);
+    ## disp (msg);
+    ## error ("assertion failed");
   endif
-  str2 = disp (cond);
-  idx = find (str2 != "\n");
-  if (! isempty (idx))
-    str2 = str2 (idx(1):idx(end));
-  endif
-  msg = cstrcat ("assert ", in, " expected\n", str, "\nbut got\n", str2);
-  if (! isempty (coda))
-    msg = cstrcat (msg, "\n", coda);
-  endif
-  error ("%s", msg);
-  ## disp (msg);
-  ## error ("assertion failed");
 endfunction
 
 ## empty
 %!assert([])
 %!assert(zeros(3,0),zeros(3,0))
 %!error assert(zeros(3,0),zeros(0,2))
 %!error assert(zeros(3,0),[])
 %!fail("assert(zeros(2,0,2),zeros(2,0))", "Dimensions don't match")
