# HG changeset patch
# User jwe
# Date 1114101518 0
#      Thu Apr 21 16:38:38 2005 +0000
# Node ID 015b15716cbe8d561c507925d23162559e8ba319
# Parent  f04d9f855794e26f7c644e39681539c0ef27530b
[project @ 2005-04-21 16:38:38 by jwe]

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,13 +1,15 @@
 2005-04-21  John W. Eaton  <jwe@octave.org>
 
 	* version.h (OCTAVE_VERSION): Now 2.9.2.
 	(OCTAVE_API_VERSION): Now api-v15.
 
+	* DLD-FUNCTIONS/__qp__.cc (qp): Use octave_idx_type where needed.
+
 	* DLD-FUNCTIONS/__qp__.cc: New file.
 	* Makefile.in (DLD_XSRC): Add it to the list.
 
 2005-04-20  John W. Eaton  <jwe@octave.org>
 
 	* lex.l (IDENT): Allow $ in identifiers.
 	* utils.cc (valid_identifier): Likewise.
 
diff --git a/src/DLD-FUNCTIONS/__qp__.cc b/src/DLD-FUNCTIONS/__qp__.cc
--- a/src/DLD-FUNCTIONS/__qp__.cc
+++ b/src/DLD-FUNCTIONS/__qp__.cc
@@ -40,42 +40,42 @@ Software Foundation, 59 Temple Place - S
 
 static inline double
 ABS (double x)
 {
   return x < 0 ? -x : x;
 }
 
 static Matrix
-null (const Matrix& A, int& rank)
+null (const Matrix& A, octave_idx_type& rank)
 {
   Matrix retval;
 
   rank = 0;
 
   if (! A.is_empty ())
     {
       SVD A_svd (A);
 
       DiagMatrix S = A_svd.singular_values ();
 
       ColumnVector s = S.diag ();
 
       Matrix V = A_svd.right_singular_matrix ();
 
-      int A_nr = A.rows ();
-      int A_nc = A.cols ();
+      octave_idx_type A_nr = A.rows ();
+      octave_idx_type A_nc = A.cols ();
 
-      int tmp = A_nr > A_nc ? A_nr : A_nc;
+      octave_idx_type tmp = A_nr > A_nc ? A_nr : A_nc;
 
       double tol = tmp * s(0) * DBL_EPSILON;
 
-      int n = s.length ();
+      octave_idx_type n = s.length ();
 
-      for (int i = 0; i < n; i++)
+      for (octave_idx_type i = 0; i < n; i++)
 	{
 	  if (s(i) > tol)
 	    rank++;
 	}
 
       if (rank < A_nc)
 	retval = V.extract (0, rank, A_nc-1, A_nc-1);
       else
@@ -85,23 +85,23 @@ null (const Matrix& A, int& rank)
   return retval;
 }
 
 static Matrix
 cholinv (const Matrix& R)
 {
   // R should be the result of calling chol on a symmetric positive
   // definite matrix.
-  int n = R.rows ();
+  octave_idx_type n = R.rows ();
   Matrix L = R.transpose ();
   ColumnVector d = L.diag ();
   ColumnVector tmp (n);
-  for (int k = 0; k < n; k++)
+  for (octave_idx_type k = 0; k < n; k++)
     {
-      for (int j = 0; j < n; j++)
+      for (octave_idx_type j = 0; j < n; j++)
 	L(j,k) = L(j,k) / d(k);
       tmp(k) = 1.0/(d(k)*d(k));
     }
   DiagMatrix Dinv (tmp);
   Matrix invL = L.inverse ();
   return invL.transpose () * Dinv * invL;
 }
 
@@ -114,40 +114,40 @@ qp (const Matrix& H, const ColumnVector&
 {
   int info = 0;
 
   iter = 0;
 
   double rtol = sqrt (DBL_EPSILON);
 
   // Problem dimension.
-  int n = x.length ();
+  octave_idx_type n = x.length ();
 
   // Dimension of constraints.
-  int n_eq = beq.length ();
-  int n_in = bin.length ();
+  octave_idx_type n_eq = beq.length ();
+  octave_idx_type n_in = bin.length ();
 
   // Filling the current active set.
 
-  int n_act = n_eq;
+  octave_idx_type n_act = n_eq;
 
-  int n_tot = n_eq + n_in;
+  octave_idx_type n_tot = n_eq + n_in;
 
   // Equality constraints come first.  We won't check the sign of the
   // Lagrange multiplier for those.
 
   Matrix Aact = Aeq;
   ColumnVector bact = beq;
   ColumnVector Wact;
 
   if (n_in > 0)
     {
       ColumnVector res = Ain*x - bin;
 
-      for (int i = 0; i < n_in; i++)
+      for (octave_idx_type i = 0; i < n_in; i++)
 	{
 	  res(i) /= (1.0 + ABS (bin(i)));
 
 	  if (res(i) < rtol)
 	    {
 	      n_act++;
 	      Aact = Aact.stack (Ain.row (i));
 	      bact.resize (n_act, bin(i));
@@ -157,18 +157,18 @@ qp (const Matrix& H, const ColumnVector&
     }
 
   // Computing the ???
 
   EIG eigH (H);
   ColumnVector eigenvalH = real (eigH.eigenvalues ());
   Matrix eigenvecH = real (eigH.eigenvectors ());
   double minReal = eigenvalH.min ();
-  int indminR = 0;
-  for (int i = 0; i < n; i++)
+  octave_idx_type indminR = 0;
+  for (octave_idx_type i = 0; i < n; i++)
     {
       if (minReal == eigenvalH(i))
 	{
 	  indminR = i;
 	  break;
 	}
     }
 
@@ -234,33 +234,33 @@ qp (const Matrix& H, const ColumnVector&
           lambda_tmp.fill (0.0);
 	}
       else
         {
 	  // There are active constraints.
 
 	  // Computing the null space.
 
-	  int rank;
+	  octave_idx_type rank;
 
 	  Matrix Z = null (Aact, rank);
 
-	  int dimZ = n - rank;
+	  octave_idx_type dimZ = n - rank;
 
 	  // XXX FIXME XXX -- still remain to handle the case of
 	  // non-full rank active set matrix.
 
 	  // Computing the Y matrix (orthogonal to Z)
 	  Y = Aact.pseudo_inverse ();
 
 	  // Reduced Hessian
 	  Matrix Zt = Z.transpose ();
 	  Matrix rH = Zt * H * Z;
 
-	  int pR = 0;
+	  octave_idx_type pR = 0;
 
 	  if (dimZ > 0)
 	    {
 	      // Computing the Cholesky factorization (pR = 0 means
 	      // that the reduced Hessian was positive definite).
 
 	      CHOL cholrH (rH, pR);
 	      Matrix tR = cholrH.chol_matrix ();
@@ -296,17 +296,17 @@ qp (const Matrix& H, const ColumnVector&
 
 	      // Searching for the most negative curvature.
 
 	      EIG eigrH (rH);
 	      ColumnVector eigenvalrH = real (eigrH.eigenvalues ());
 	      Matrix eigenvecrH = real (eigrH.eigenvectors ());
 	      double mRrH = eigenvalrH.min ();
 	      indminR = 0;
-	      for (int i = 0; i < n; i++)
+	      for (octave_idx_type i = 0; i < n; i++)
 		{
 		  if (mRrH == eigenvalH(i))
 		    {
 		      indminR = i;
 		      break;
 		    }
 		}
 
@@ -317,17 +317,17 @@ qp (const Matrix& H, const ColumnVector&
 
 	      if (p.transpose () * g > DBL_EPSILON)
 		p = -p;
 	    }
 	}
 
       // Checking the step-size.
       ColumnVector abs_p (n);
-      for (int i = 0; i < n; i++)
+      for (octave_idx_type i = 0; i < n; i++)
 	abs_p(i) = ABS (p(i));
       double max_p = abs_p.max ();
 
       if (max_p < rtol)
 	{
 	  // The step is null.  Checking constraints.
 	  if (n_act - n_eq == 0)
 	    // Solution is found because no inequality
@@ -340,47 +340,47 @@ qp (const Matrix& H, const ColumnVector&
 	      // multipliers for the equality constraints.
 	      Matrix Yt = Y.transpose ();
 	      Yt = Yt.extract_n (n_eq, 0, n_act-n_eq, n);
 	      lambda_tmp = Yt * (g + H * p);
 	      if (n_act - n_eq < n_in)
 		{
 		  lambda_tmp.resize (n_in, 0.0);
 
-		  for (int i = n_act-n_eq; i < n_in; i++)
+		  for (octave_idx_type i = n_act-n_eq; i < n_in; i++)
 		    lambda_tmp(i) = 0;
 		}
 
 	      // Checking the multipliers.  We remove the most
 	      // negative from the set (if any).
 	      double min_lambda = lambda_tmp.min ();
 	      if (min_lambda >= 0)
 		{
 		  // Solution is found.
 		  done = true;
 		}
 	      else
 		{
-		  int which_eig = 0;
-		  for (int i = 0; i < n_act; i++)
+		  octave_idx_type which_eig = 0;
+		  for (octave_idx_type i = 0; i < n_act; i++)
 		    {
 		      if (lambda_tmp(i) == min_lambda)
 			{
 			  which_eig = i;
 			  break;
 			}
 		    }
 
 		  // At least one multiplier is negative, we
 		  // remove it from the set.
 
-		  for (int i = which_eig; i < n_act - n_eq; i++)
+		  for (octave_idx_type i = which_eig; i < n_act - n_eq; i++)
 		    {
 		      Wact(i) = Wact(i+1);
-		      for (int j = 0; j < n; j++)
+		      for (octave_idx_type j = 0; j < n; j++)
 			Aact(n_eq+i,j) = Aact(n_eq+i+1,j);
 		      bact(n_eq+i) = bact(n_eq+i+1);
 		    }
 		  n_act--;
 
 		  // Resizing the active set.
 		  Wact.resize (n_act-n_eq);
 		  bact.resize (n_act);
@@ -397,23 +397,23 @@ qp (const Matrix& H, const ColumnVector&
 	      // add the whole step.
 	      x += p;
 	    }
 	  else
 	    {
 	      // Some constraints were not active.  Checking if
 	      // there is a blocking constraint.
 	      alpha = 1.0;
-	      int is_block = -1;
+	      octave_idx_type is_block = -1;
 
-	      for (int i = 0; i < n_in; i++)
+	      for (octave_idx_type i = 0; i < n_in; i++)
 		{
 		  bool found = false;
 
-		  for (int j = 0; j < n_act-n_eq; j++)
+		  for (octave_idx_type j = 0; j < n_act-n_eq; j++)
 		    {
 		      if (Wact(j) == i)
 			{
 			  found = true;
 			  break;
 			}
 		    }
 
@@ -471,22 +471,22 @@ qp (const Matrix& H, const ColumnVector&
     }
 
   lambda_tmp = Y.transpose () * (g + H * p);
 
   // Reordering the Lagrange multipliers.
 
   lambda.resize (n_tot);
   lambda.fill (0.0);
-  for (int i = 0; i < n_eq; i++)
+  for (octave_idx_type i = 0; i < n_eq; i++)
     lambda(i) = lambda_tmp(i);
 
-  for (int i = n_eq; i < n_tot; i++)
+  for (octave_idx_type i = n_eq; i < n_tot; i++)
     {
-      for (int j = 0; j < n_act-n_eq; j++)
+      for (octave_idx_type j = 0; j < n_act-n_eq; j++)
 	{
 	  if (Wact(j) == i)
 	    {
 	      lambda(i) = lambda_tmp(n_eq+j);
 	      break;
 	    }
 	}
     }
