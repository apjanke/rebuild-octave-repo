# HG changeset patch
# User jwe
# Date 773733862 0
#      Sat Jul 09 06:04:22 1994 +0000
# Node ID f264c1454c2b10852f0f24b6446d7070ddd0f3f1
# Parent  be155b3d5a2fb6bffaef025c903d2df275fa3f5f
[project @ 1994-07-09 06:02:45 by jwe]

diff --git a/configure.in b/configure.in
--- a/configure.in
+++ b/configure.in
@@ -16,17 +16,17 @@ dnl Octave is distributed in the hope th
 dnl ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 dnl FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
 dnl for more details.
 dnl 
 dnl You should have received a copy of the GNU General Public License
 dnl along with Octave; see the file COPYING.  If not, write to the Free
 dnl Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.
 dnl
-AC_REVISION($Revision: 1.32 $)dnl
+AC_REVISION($Revision: 1.33 $)dnl
 AC_PREREQ(1.8)dnl
 AC_INIT(src/octave.cc)
 AC_CONFIG_HEADER(config.h)
 dnl
 AC_DEFINE(OCTAVE_SOURCE, 1)dnl
 dnl
 dnl See if we were given the target host type.  If not, use
 dnl config.guess to try to guess the target host type.
@@ -469,16 +469,22 @@ for termlib in termcap terminfo curses t
   AC_HAVE_LIBRARY(${termlib}, [TERMLIBS="${TERMLIBS} -l${termlib}"])
   case "${TERMLIBS}" in
     *-l${termlib}*)
       AC_VERBOSE([setting TERMLIBS to $TERMLIBS])
       break
     ;;
   esac
 done
+dnl
+AC_COMPILE_CHECK([struct exception in math.h],
+[#include <math.h>],
+[struct exception *x; x->type; x->name;],
+AC_DEFINE(EXCEPTION_IN_MATH, 1), [])dnl
+dnl
 AC_SUBST(TERMLIBS)
 dnl
 dnl Define VOID_SIGHANDLER for readline.
 dnl
 AC_RETSIGTYPE
 case "$RETSIGTYPE" in
   int)
   ;;
diff --git a/src/sysdep.cc b/src/sysdep.cc
--- a/src/sysdep.cc
+++ b/src/sysdep.cc
@@ -108,16 +108,45 @@ octave_ieee_init (void)
 // off completely, or writing an entire IEEE emulation package?
 
   octave_Inf = DBL_MAX;
   octave_NaN = DBL_MAX;
 
 #endif
 }
 
+
+#if defined (EXCEPTION_IN_MATH)
+extern "C"
+{
+int
+matherr (struct exception *x)
+{
+// Possibly print our own message someday.  Should probably be
+// user-switchable.
+
+  switch (x->type)
+    {
+    case DOMAIN:
+    case SING:
+    case OVERFLOW:
+    case UNDERFLOW:
+    case TLOSS:
+    case PLOSS:
+    default:
+      break;
+    }
+
+// But don't print the system message.
+
+  return 1;
+}
+}
+#endif
+
 void
 sysdep_init (void)
 {
 #if defined (__386BSD__) && defined (HAVE_FLOATINGPOINT_H)
 // Disable trapping on common exceptions.
   fpsetmask (~(FP_X_OFL|FP_X_INV|FP_X_DZ|FP_X_DNML|FP_X_UFL|FP_X_IMP));
 #endif
 
