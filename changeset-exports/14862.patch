# HG changeset patch
# User Rik <octave@nomad.inbox5.com>
# Date 1342285181 25200
#      Sat Jul 14 09:59:41 2012 -0700
# Node ID bbdc822be2b90bad536dc1e11424574ae0ef705b
# Parent  f7afecdd87efc09fb1c240082208db7d34fb895d
smyrcm.cc: use std::swap instead of custom swap code.

* symrcm.cc (H_heapify_min, H_insert, Fsymrcm): use std::swap instead of custom
swap code.

diff --git a/src/DLD-FUNCTIONS/symrcm.cc b/src/DLD-FUNCTIONS/symrcm.cc
--- a/src/DLD-FUNCTIONS/symrcm.cc
+++ b/src/DLD-FUNCTIONS/symrcm.cc
@@ -130,19 +130,17 @@ H_heapify_min (CMK_Node *A, octave_idx_t
       else
         smallest = j;
 
       if (r < size && A[r].deg < A[smallest].deg)
         smallest = r;
 
       if (smallest != j)
         {
-          CMK_Node tmp = A[j];
-          A[j] = A[smallest];
-          A[smallest] = tmp;
+          std::swap (A[j], A[smallest]);
           j = smallest;
         }
       else
         break;
     }
 }
 
 // Heap operation insert. Running time is O(log(n))
@@ -156,19 +154,17 @@ H_insert (CMK_Node *H, octave_idx_type& 
 
   if (i == 0)
     return;
   do
     {
       octave_idx_type p = PARENT(i);
       if (H[i].deg < H[p].deg)
         {
-          CMK_Node tmp = H[i];
-          H[i] = H[p];
-          H[p] = tmp;
+          std::swap (H[i], H[p]);
 
           i = p;
         }
       else
         break;
     }
   while (i > 0);
 }
@@ -694,17 +690,13 @@ Mathematics, ISBN 0-13-165274-5, 1981.\n
         B = Bsub;
     }
   // are there any nodes left?
   while (c+1 < N);
 
   // compute the reverse-ordering
   s = N / 2 - 1;
   for (octave_idx_type i = 0, j = N - 1; i <= s; i++, j--)
-    {
-      double tmp = P.elem (i);
-      P.elem (i) = P.elem (j);
-      P.elem (j) = tmp;
-    }
+    std::swap (P.elem (i), P.elem (j));
 
   // increment all indices, since Octave is not C
   return octave_value (P+1);
 }
