# HG changeset patch
# User jwe
# Date 1069629467 0
#      Sun Nov 23 23:17:47 2003 +0000
# Node ID 623f6262a8e9d89c84fd261c466c0f1c67825fb7
# Parent  f7ce581b27fb4f0cfa630c7b810a04095d71cf52
[project @ 2003-11-23 23:17:46 by jwe]

diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,10 +1,13 @@
 2003-11-23  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
+	* idx-vector.h, idx-vector.cc: Convert boolMatrix functions to use
+	boolNDArray.  Likewise, convert Matrix functions to use	NDArray.
+
 	* Array-so.cc: New file.  Move instantiations here from so-array.h.
 	* Makefile.in (TI_SRC): Add it to the list.
 
 	* MArray-defs.h (DO_VS_OP2, DO_VV_OP2): Accept args for element
 	type and the names of the left and right operands.  Change all uses.
 
 	* so-array.cc, so-array.h: New files.  Move streamoff_array here
 	from src/ov-streamoff.h and src/ov-streamoff.cc.
diff --git a/liboctave/boolNDArray.h b/liboctave/boolNDArray.h
--- a/liboctave/boolNDArray.h
+++ b/liboctave/boolNDArray.h
@@ -31,16 +31,18 @@ Software Foundation, 59 Temple Place - S
 #include "CMatrix.h"
 
 #include "mx-defs.h"
 #include "mx-op-defs.h"
 
 #include "data-conv.h"
 #include "mach-info.h"
 
+#include "boolMatrix.h"
+
 class
 boolNDArray : public ArrayN<bool>
 {
 public:
   
   boolNDArray (void) : ArrayN<bool> () { }
 
   boolNDArray (dim_vector& dv) : ArrayN<bool> (dv) { }
diff --git a/liboctave/idx-vector.cc b/liboctave/idx-vector.cc
--- a/liboctave/idx-vector.cc
+++ b/liboctave/idx-vector.cc
@@ -28,19 +28,19 @@ Software Foundation, 59 Temple Place - S
 #include <config.h>
 #endif
 
 #include <cstdlib>
 
 #include <iostream>
 
 #include "Range.h"
-#include "boolMatrix.h"
+#include "boolNDArray.h"
 #include "dColVector.h"
-#include "dMatrix.h"
+#include "dNDArray.h"
 
 #include "idx-vector.h"
 #include "lo-error.h"
 #include "lo-mappers.h"
 
 #define IDX_VEC_REP idx_vector::idx_vector_rep
 
 IDX_VEC_REP::idx_vector_rep (const IDX_VEC_REP& a)
@@ -142,55 +142,51 @@ IDX_VEC_REP::idx_vector_rep (const Colum
 	  else
 	    data[i] = tree_to_mat_idx (d);
 	}
     }
 
   init_state ();
 }
 
-IDX_VEC_REP::idx_vector_rep (const Matrix& m)
+IDX_VEC_REP::idx_vector_rep (const NDArray& nda)
 {
   data = 0;
   initialized = 0;
   frozen = 0;
   colon_equiv_checked = 0;
   colon_equiv = 0;
   colon = 0;
   one_zero = 0;
 
-  orig_nr = m.rows ();
-  orig_nc = m.columns ();
-
-  len = orig_nr * orig_nc;
+  len = nda.length ();
 
   if (len == 0)
     {
       num_zeros = 0;
       num_ones = 0;
       max_val = 0;
       min_val = 0;
       initialized = 1;
       return;
     }
   else
     {
       int k = 0;
       data = new int [len];
 
-      for (int j = 0; j < orig_nc; j++)
-	for (int i = 0; i < orig_nr; i++)
-	  {
-	    double d = m.elem (i, j);
+      for (int i = 0; i < len; i++)
+	{
+	  double d = nda.elem (i);
 
-	    if (idx_is_inf_or_nan (d))
-	      return;
-	    else
-	      data[k++] = tree_to_mat_idx (d);
-	  }
+	  if (idx_is_inf_or_nan (d))
+	    return;
+	  else
+	    data[k++] = tree_to_mat_idx (d);
+	}
     }
 
   init_state ();
 }
 
 IDX_VEC_REP::idx_vector_rep (const Range& r)
 {
   data = 0;
@@ -323,49 +319,45 @@ IDX_VEC_REP::idx_vector_rep (bool b)
 
   data = new int [len];
 
   data[0] = tree_to_mat_idx (b);
 
   init_state ();
 }
 
-IDX_VEC_REP::idx_vector_rep (const boolMatrix& bm)
+IDX_VEC_REP::idx_vector_rep (const boolNDArray& bnda)
 {
   data = 0;
   initialized = 0;
   frozen = 0;
   colon_equiv_checked = 0;
   colon_equiv = 0;
   colon = 0;
   one_zero = 1;
 
-  orig_nr = bm.rows ();
-  orig_nc = bm.columns ();
-
-  len = orig_nr * orig_nc;
+  len = bnda.length ();
 
   if (len == 0)
     {
       num_zeros = 0;
       num_ones = 0;
       one_zero = 0;
       max_val = 0;
       min_val = 0;
       initialized = 1;
       return;
     }
   else
     {
       int k = 0;
       data = new int [len];
 
-      for (int j = 0; j < orig_nc; j++)
-	for (int i = 0; i < orig_nr; i++)
-	  data[k++] = tree_to_mat_idx (bm.elem (i, j));
+      for (int i = 0; i < len; i++)
+	data[k++] = tree_to_mat_idx (bnda.elem (i));
     }
 
   init_state ();
 }
 
 IDX_VEC_REP&
 IDX_VEC_REP::operator = (const IDX_VEC_REP& a)
 {
diff --git a/liboctave/idx-vector.h b/liboctave/idx-vector.h
--- a/liboctave/idx-vector.h
+++ b/liboctave/idx-vector.h
@@ -27,18 +27,18 @@ Software Foundation, 59 Temple Place - S
 #pragma interface
 #endif
 
 #include <iostream>
 
 #include "Array.h"
 
 class ColumnVector;
-class boolMatrix;
-class Matrix;
+class boolNDArray;
+class NDArray;
 class Range;
 
 class
 idx_vector
 {
 private:
 
   class
@@ -59,29 +59,29 @@ private:
 	frozen = 0;
 	colon_equiv_checked = 0;
 	colon_equiv = 0;
 	data = 0;
       }
 
     idx_vector_rep (const ColumnVector& v);
 
-    idx_vector_rep (const Matrix& m);
+    idx_vector_rep (const NDArray& nda);
 
     idx_vector_rep (const Range& r);
 
     idx_vector_rep (double d);
 
     idx_vector_rep (int i);
 
     idx_vector_rep (char c);
 
     idx_vector_rep (bool b);
 
-    idx_vector_rep (const boolMatrix& bm);
+    idx_vector_rep (const boolNDArray& bnda);
 
     idx_vector_rep (const idx_vector_rep& a);
 
     ~idx_vector_rep (void) { delete [] data; }
 
     idx_vector_rep& operator = (const idx_vector_rep& a);
 
     int ok (void) { return initialized; }
@@ -161,19 +161,19 @@ public:
     }
 
   idx_vector (const ColumnVector& v)
     {
       rep = new idx_vector_rep (v);
       rep->count = 1;
     }
 
-  idx_vector (const Matrix& m)
+  idx_vector (const NDArray& nda)
     {
-      rep = new idx_vector_rep (m);
+      rep = new idx_vector_rep (nda);
       rep->count = 1;
     }
 
   idx_vector (const Range& r)
     {
       rep = new idx_vector_rep (r);
       rep->count = 1;
     }
@@ -197,19 +197,19 @@ public:
     }
 
   idx_vector (bool b)
     {
       rep = new idx_vector_rep (b);
       rep->count = 1;
     }
 
-  idx_vector (const boolMatrix& bm)
+  idx_vector (const boolNDArray& bnda)
     {
-      rep = new idx_vector_rep (bm);
+      rep = new idx_vector_rep (bnda);
       rep->count = 1;
     }
 
   idx_vector (const idx_vector& a)
     {
       rep = a.rep;
       rep->count++;
     }
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,10 +1,19 @@
 2003-11-23  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
+	* ov-bool-mat.h (octave_bool_matrix::array_value): Construct return
+	value directly from matrix data member, not matrix.matrix_value ().
+
+	* ov-re-mat.h (octave_matrix::index_vector): Construct idx_vector
+	from NDArray, not Matrix.
+
+	* ov-bool-mat.h (octave_bool_matrix::index_vector): Construct
+	idx_vector from boolNDArray, not boolMatrix.
+
 	* ov.cc (install_types): Also register dld function type.
 
 	* OPERATORS/op-streamoff.cc: Install increment and decrement operators.
 	* ov-streamoff.h (octave_streamoff::increment,
 	octave_streamoff::decrement): New functions.
 
 	* ov-streamoff.h, ov-streamoff.cc: Move streamoff_array class to
 	liboctave/so-array.h and liboctave/so-array.cc.
diff --git a/src/ov-bool-mat.h b/src/ov-bool-mat.h
--- a/src/ov-bool-mat.h
+++ b/src/ov-bool-mat.h
@@ -71,19 +71,17 @@ public:
 
   octave_value *clone (void) const { return new octave_bool_matrix (*this); }
   octave_value *empty_clone (void) const { return new octave_bool_matrix (); }
 
   type_conv_fcn numeric_conversion_function (void) const;
 
   octave_value *try_narrowing_conversion (void);
 
-  // XXX FIXME XXX
-  idx_vector index_vector (void) const
-    { return idx_vector (matrix.matrix_value ()); }
+  idx_vector index_vector (void) const { return idx_vector (matrix); }
 
   bool is_bool_matrix (void) const { return true; }
 
   bool is_bool_type (void) const { return true; }
 
   bool is_real_type (void) const { return true; }
 
   bool valid_as_scalar_index (void) const;
@@ -92,17 +90,17 @@ public:
 
   double scalar_value (bool frc_str_conv = false) const
     { return double_value (frc_str_conv); }
 
   Matrix matrix_value (bool = false) const
     { return Matrix (matrix.matrix_value ()); }
 
   NDArray array_value (bool = false) const
-    { return NDArray (matrix.matrix_value ()); }
+    { return NDArray (matrix); }
 
   Complex complex_value (bool = false) const;
 
   ComplexMatrix complex_matrix_value (bool = false) const
     { return ComplexMatrix (matrix.matrix_value ( )); }
 
   ComplexNDArray complex_array_value (bool = false) const
     { return ComplexNDArray (matrix.matrix_value ()); }
diff --git a/src/ov-re-mat.h b/src/ov-re-mat.h
--- a/src/ov-re-mat.h
+++ b/src/ov-re-mat.h
@@ -77,18 +77,17 @@ public:
 
   ~octave_matrix (void) { }
 
   octave_value *clone (void) const { return new octave_matrix (*this); }
   octave_value *empty_clone (void) const { return new octave_matrix (); }
 
   octave_value *try_narrowing_conversion (void);
 
-  // XXX FIXME XXX
-  idx_vector index_vector (void) const { return idx_vector (matrix_value ()); }
+  idx_vector index_vector (void) const { return idx_vector (matrix); }
 
   bool is_real_matrix (void) const { return true; }
 
   bool is_real_type (void) const { return true; }
 
   bool valid_as_scalar_index (void) const;
 
   double double_value (bool = false) const;
