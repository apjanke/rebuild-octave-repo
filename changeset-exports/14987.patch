# HG changeset patch
# User Max Brister <max@2bass.com>
# Date 1341973551 18000
#      Tue Jul 10 21:25:51 2012 -0500
# Node ID 65f74f52886cc8c30f2a946646f8435c11a12133
# Parent  70ff15b6d9963149547bb51ccca1fcc837cc5e62
Memory leaks with matrices in JIT

* src/pt-jit.cc (octave_jit_cast_any_matrix): Delete matrix.
  (octave_jit_cast_matrix_any): Release octave base value.
  (jit_info::execute): Clear previous variable.

* src/pt-jit.h (jit_array::jit_array): Do not grab dimensions.
  (jit_array::grab_dimensions): Remove method.

diff --git a/src/pt-jit.cc b/src/pt-jit.cc
--- a/src/pt-jit.cc
+++ b/src/pt-jit.cc
@@ -171,25 +171,27 @@ octave_jit_grab_matrix (jit_matrix *resu
 }
 
 extern "C" octave_base_value *
 octave_jit_cast_any_matrix (jit_matrix *m)
 {
   octave_value ret (*m->array);
   octave_base_value *rep = ret.internal_rep ();
   rep->grab ();
+  delete m->array;
 
   return rep;
 }
 
 extern "C" void
 octave_jit_cast_matrix_any (jit_matrix *ret, octave_base_value *obv)
 {
   NDArray m = obv->array_value ();
   *ret = m;
+  obv->release ();
 }
 
 extern "C" double
 octave_jit_cast_scalar_any (octave_base_value *obv)
 {
   double ret = obv->double_value ();
   obv->release ();
   return ret;
@@ -3631,20 +3633,21 @@ jit_info::execute (void) const
   if (! function)
     return false;
 
   std::vector<octave_base_value *> real_arguments (arguments.size ());
   for (size_t i = 0; i < arguments.size (); ++i)
     {
       if (arguments[i].second)
         {
-          octave_value current = symbol_table::varval (arguments[i].first);
+          octave_value &current = symbol_table::varref (arguments[i].first);
           octave_base_value *obv = current.internal_rep ();
           obv->grab ();
           real_arguments[i] = obv;
+          current = octave_value ();
         }
     }
 
   function (&real_arguments[0]);
 
   for (size_t i = 0; i < arguments.size (); ++i)
     symbol_table::varref (arguments[i].first) = real_arguments[i];
 
diff --git a/src/pt-jit.h b/src/pt-jit.h
--- a/src/pt-jit.h
+++ b/src/pt-jit.h
@@ -221,17 +221,16 @@ std::ostream& operator<< (std::ostream& 
 
 // jit_array is compatable with the llvm array/matrix structures
 template <typename T, typename U>
 struct
 jit_array
 {
   jit_array (T& from) : array (new T (from))
   {
-    grab_dimensions ();
     update ();
   }
 
   void update (void)
   {
     ref_count = array->jit_ref_count ();
     slice_data = array->jit_slice_data () - 1;
     slice_len = array->capacity ();
@@ -239,21 +238,16 @@ jit_array
   }
 
   void update (T *aarray)
   {
     array = aarray;
     update ();
   }
 
-  void grab_dimensions (void)
-  {
-    ++(dimensions[-2]);
-  }
-
   operator T () const
   {
     return *array;
   }
 
   int *ref_count;
 
   U *slice_data;
