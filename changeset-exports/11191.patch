# HG changeset patch
# User Rik <octave@nomad.inbox5.com>
# Date 1288898288 25200
#      Thu Nov 04 12:18:08 2010 -0700
# Node ID 01ddaedd6ad5b6af061373cc6daa7cb2d2a94c4a
# Parent  b1f4bdc276b6d0aad0489f52e31a7f32ba8bd225
Reverse changeset b1f4bdc276b6.  Use all lower case for "uniformoutput" option.

diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,8 +1,20 @@
+2010-11-04  Rik  <octave@nomad.inbox5.com>
+
+	* general/accumarray.m, general/accumdim.m, general/blkdiag.m,
+	  general/cell2mat.m, general/common_size.m,
+	  general/private/__isequal__.m, general/private/__splinen__.m,
+	  geometry/voronoi.m, io/textscan.m, miscellaneous/private/__xzip__.m,
+	  pkg/pkg.m, plot/axis.m, plot/pareto.m, plot/private/__patch__.m,
+	  statistics/base/mode.m, strings/deblank.m, strings/strcat.m,
+	  strings/strmatch.m, strings/strtrim.m, strings/untabify.m:
+	  Reverse previous changeset.  Use all lower case for "uniformoutput"
+	  option.
+
 2010-11-03  Rik  <octave@nomad.inbox5.com>
 
 	* general/accumdim.m, general/cell2mat.m, general/common_size.m,
 	  general/structfun.m, pkg/pkg.m, strings/untabify.m: Use CamelCase
 	  for 'UniformOutput' option to cellfun.
 
 2010-11-03  Rik  <octave@nomad.inbox5.com>
 
diff --git a/scripts/Makefile.am b/scripts/Makefile.am
--- a/scripts/Makefile.am
+++ b/scripts/Makefile.am
@@ -327,20 +327,20 @@ gethelp_SOURCES = gethelp.cc
 	@$(srcdir)/mkdoc "$(srcdir)" $(FCN_FILES) -- $(GEN_FCN_FILES) > $@
 	$(top_srcdir)/move-if-change $@ DOCSTRINGS
 	touch $@
 
 $(GEN_FCN_FILES) : %.m : %.in Makefile
 	@$(do_subst_config_vals)
 
 check-m-sources:
-	@echo -n "checking whether files in source tree are listed in module.mk files..."; \
+	@echo "checking whether files in source tree are listed in module.mk files..."; \
 	for f in $$(find $(srcdir) -name '*.m'); do \
 	  found=false; \
-	  for m in $(FCN_FILES); do \
+	  for m in $(FCN_FILES) $(GEN_FCN_FILES); do \
 	    if [ "$$f" = $(srcdir)/"$$m" ]; then \
 	      found=true; \
 	      break; \
 	    fi; \
 	  done; \
 	  if $$found; then \
 	    true; \
 	  else \
diff --git a/scripts/general/accumarray.m b/scripts/general/accumarray.m
--- a/scripts/general/accumarray.m
+++ b/scripts/general/accumarray.m
@@ -66,17 +66,17 @@
 
 function A = accumarray (subs, val, sz = [], func = [], fillval = [], isspar = [])  
 
   if (nargin < 2 || nargin > 6)
     print_usage ();
   endif
 
   if (iscell (subs))
-    subs = cellfun (@vec, subs, "UniformOutput", false);
+    subs = cellfun (@vec, subs, "uniformoutput", false);
     ndims = numel (subs);
     if (ndims == 1)
       subs = subs{1};
     endif
   else
     ndims = columns (subs);
   endif
 
diff --git a/scripts/general/accumdim.m b/scripts/general/accumdim.m
--- a/scripts/general/accumdim.m
+++ b/scripts/general/accumdim.m
@@ -111,19 +111,19 @@ function A = accumdim (subs, val, dim, n
   ## Collect common slices.
   szc = num2cell (sz);
   szc{dim} = diff ([0; jdx]);
   subsc = {':'}(ones (1, length (sz)));
   subsc{dim} = idx;
   val = mat2cell (val(subsc{:}), szc{:});
   ## Apply reductions. Special case min, max.
   if (func == @min || func == @max)
-    val = cellfun (func, val, {[]}, {dim}, "UniformOutput", false);
+    val = cellfun (func, val, {[]}, {dim}, "uniformoutput", false);
   else
-    val = cellfun (func, val, {dim}, "UniformOutput", false);
+    val = cellfun (func, val, {dim}, "uniformoutput", false);
   endif
   subs = subs(jdx);
 
   ## Concatenate reduced slices.
   val = cat (dim, val{:});
 
   ## Construct matrix of fillvals.
   if (fillval == 0)
diff --git a/scripts/general/blkdiag.m b/scripts/general/blkdiag.m
--- a/scripts/general/blkdiag.m
+++ b/scripts/general/blkdiag.m
@@ -39,17 +39,17 @@ function retval = blkdiag (varargin)
 
   ## Note: trailing singletons are automatically (correctly) ignored.
   if (! all (cellfun ("ndims", varargin) == 2))
     error ("blkdiag: all arguments must be two-dimensional matrices");
   endif
 
   ## size is an option for cellfun, but it's a bit different from
   ## calling size directly.
-  tmp = cell2mat (cellfun (@size, varargin', "UniformOutput", false));
+  tmp = cell2mat (cellfun (@size, varargin', "uniformoutput", false));
   csz = cumsum ([0 0; tmp], 1);
   retval = zeros (csz(end,:));
 
   for p = 1:nargin
     vp = varargin{p};
     if (! isempty (vp))
       retval((csz(p,1)+1):csz(p+1,1),(csz(p,2)+1):csz(p+1,2)) = vp;
     endif
diff --git a/scripts/general/cell2mat.m b/scripts/general/cell2mat.m
--- a/scripts/general/cell2mat.m
+++ b/scripts/general/cell2mat.m
@@ -65,17 +65,17 @@ function m = cell2mat (c)
     nd = ndims (c);
     [~, isc] = sort (sc);
     for idim = isc
       if (sc(idim) == 1)
         continue;
       endif
       xdim = [1:idim-1, idim+1:nd];
       cc = num2cell (c, xdim);
-      c = cellfun (@cat, {idim}, cc{:}, "UniformOutput", false);
+      c = cellfun (@cat, {idim}, cc{:}, "uniformoutput", false);
     endfor
     m = c{1};
   endif
 
 endfunction
 
 ## Tests
 %!shared C, D, E, F
diff --git a/scripts/general/common_size.m b/scripts/general/common_size.m
--- a/scripts/general/common_size.m
+++ b/scripts/general/common_size.m
@@ -67,15 +67,15 @@ function [errorcode, varargout] = common
       varargout = varargin;
     else
       errorcode = 0;
       if (nargout > 1)
         scal = !nscal;
         varargout = varargin;
         if (any (nscal))
           dims = size (varargin{find (nscal, 1)});
-          subs = arrayfun (@ones, 1, dims, "UniformOutput", false);
+          subs = arrayfun (@ones, 1, dims, "uniformoutput", false);
           varargout(scal) = cellindexmat (varargin(scal), subs{:});
         endif
       endif
     endif
   endif
 endfunction
diff --git a/scripts/general/private/__isequal__.m b/scripts/general/private/__isequal__.m
--- a/scripts/general/private/__isequal__.m
+++ b/scripts/general/private/__isequal__.m
@@ -54,25 +54,25 @@ function t = __isequal__ (nans_compare_e
 
   l_v = nargin - 2;
 
   ## Generic tests.
 
   ## All arguments must either be of the same class or they must be
   ## numeric values.
   t = (all (strcmp (class(x),
-                   cellfun (@class, varargin, "UniformOutput", false)))
+                   cellfun (@class, varargin, "uniformoutput", false)))
        || ((isnumeric (x) || islogical (x))
            && all (cellfun (@isnumeric, varargin)
                    | cellfun (@islogical, varargin))));
 
   if (t)
     ## Test that everything has the same number of dimensions.
     s_x = size (x);
-    s_v = cellfun (@size, varargin, "UniformOutput", false);
+    s_v = cellfun (@size, varargin, "uniformoutput", false);
     t = all (length (s_x) == cellfun (@length, s_v));
   endif
 
   if (t)
     ## Test that everything is the same size since it has the same
     ## dimensionality.
     l_x = length (s_x);
     s_v = reshape ([s_v{:}], length (s_x), []);
@@ -84,17 +84,17 @@ function t = __isequal__ (nans_compare_e
   endif
 
   if (t)
     ## Check individual classes.
     if (isstruct (x))
       ## Test the number of fields.
       fn_x = fieldnames (x);
       l_fn_x = length (fn_x);
-      fn_v = cellfun (@fieldnames, varargin, "UniformOutput", false);
+      fn_v = cellfun (@fieldnames, varargin, "uniformoutput", false);
       t = all (l_fn_x == cellfun (@length, fn_v));
 
       ## Test that all the names are equal.
       idx = 0;
       s_fn_x = sort (fn_x);
       while (t && idx < l_v)
         idx++;
         ## We'll allow the fieldnames to be in a different order.
diff --git a/scripts/general/private/__splinen__.m b/scripts/general/private/__splinen__.m
--- a/scripts/general/private/__splinen__.m
+++ b/scripts/general/private/__splinen__.m
@@ -35,15 +35,15 @@ function yi = __splinen__ (x, y, xi, ext
       || !iscell (xi) || length(xi) < ndims(y) || any (! cellfun (isvec, xi)))
     error ("__splinen__: %s: non gridded data or dimensions inconsistent", f);
   endif
   yi = y;
   for i = length(x):-1:1
     yi = permute (spline (x{i}, yi, xi{i}(:)), [length(x),1:length(x)-1]);
   endfor
 
-  [xi{:}] = ndgrid (cellfun (@(x) x(:), xi, "UniformOutput", false){:});
+  [xi{:}] = ndgrid (cellfun (@(x) x(:), xi, "uniformoutput", false){:});
   idx = zeros (size(xi{1}));
   for i = 1 : length(x)
     idx |= xi{i} < min (x{i}(:)) | xi{i} > max (x{i}(:));
   endfor
   yi(idx) = extrapval;
 endfunction
diff --git a/scripts/geometry/voronoi.m b/scripts/geometry/voronoi.m
--- a/scripts/geometry/voronoi.m
+++ b/scripts/geometry/voronoi.m
@@ -126,17 +126,17 @@ function [vvx, vvy] = voronoi (varargin)
 
   [p, c, infi] = __voronoi__ ([[x(:) ; xbox(:)], [y(:); ybox(:)]], opts{:});
 
   idx = find (!infi);
   ll = length (idx);
   c = c(idx).';
   k = sum (cellfun ('length', c));
   edges = cell2mat(cellfun (@(x) [x ; [x(end), x(1:end-1)]], c, 
-                            "UniformOutput", false));
+                            "uniformoutput", false));
 
   ## Identify the unique edges of the Voronoi diagram
   edges = sortrows (sort (edges).').';
   edges = edges (:, [(edges(1, 1: end - 1) != edges(1, 2 : end) | ...
                       edges(2, 1 :end - 1) != edges(2, 2 : end)), true]);
 
   ## Eliminate the edges of the diagram representing the box
   poutside = (1 : rows(p)) ...
diff --git a/scripts/io/textscan.m b/scripts/io/textscan.m
--- a/scripts/io/textscan.m
+++ b/scripts/io/textscan.m
@@ -101,17 +101,17 @@ function [c, p] = textscan (fid, formats
       num_fields = numel (strfind (formatstr, "%")) - ...
                    numel (idx_star = strfind (formatstr, "%*"));
 
       ## Call strread to make it do the real work
       c = cell (1, num_fields);
       [c{:}] = strread (str, formatstr, args{:});
 
       if (ischar (fid) && isfinite (nlines))
-        c = cellfun (@(x) x(1:nlines), c, "UniformOutput", false);
+        c = cellfun (@(x) x(1:nlines), c, "uniformoutput", false);
       endif
 
       if (nargout == 2)
         p = ftell (fid);
       endif
 
     else
       error ("textscan: second input must be a format specification");
diff --git a/scripts/miscellaneous/private/__xzip__.m b/scripts/miscellaneous/private/__xzip__.m
--- a/scripts/miscellaneous/private/__xzip__.m
+++ b/scripts/miscellaneous/private/__xzip__.m
@@ -71,24 +71,24 @@ function entries = __xzip__ (commandname
       cmd = sprintf (commandtemplate, sprintf (" %s", f{:}));
 
       [status, output] = system (cmd);
       if (status == 0)
 
         if (nargin == 5)
           compressed_files = cellfun(
               @(x) fullfile (outdir, sprintf ("%s.%s", x, extension)), 
-              f, "UniformOutput", false);
+              f, "uniformoutput", false);
         else
           movefile (cellfun(@(x) sprintf ("%s.%s", x, extension), f, 
-                            "UniformOutput", false), cwd);
+                            "uniformoutput", false), cwd);
           ## FIXME this does not work when you try to compress directories
 
           compressed_files  = cellfun(@(x) sprintf ("%s.%s", x, extension), 
-                                      files, "UniformOutput", false);
+                                      files, "uniformoutput", false);
         endif
 
         if (nargout > 0)
           entries = compressed_files;
         endif
       else
         error ("__xzip__: %s command failed with exit status = %d",
                commandname, status);
@@ -107,19 +107,19 @@ function entries = __xzip__ (commandname
     end_unwind_protect
   else
     print_usage ();
   endif
 
 endfunction
 
 function [d, f] = myfileparts (files)
-  [d, f, ext] = cellfun (@(x) fileparts (x), files, "UniformOutput", false);
+  [d, f, ext] = cellfun (@(x) fileparts (x), files, "uniformoutput", false);
   f = cellfun (@(x, y) sprintf ("%s%s", x, y), f, ext,
-               "UniformOutput", false); 
+               "uniformoutput", false); 
   idx = cellfun (@isdir, files);
   d(idx) = "";
   f(idx) = files(idx);
 endfunction
 
 ## FIXME -- reinstate these tests if we invent a way to test private
 ## functions directly.
 ##
diff --git a/scripts/pkg/pkg.m b/scripts/pkg/pkg.m
--- a/scripts/pkg/pkg.m
+++ b/scripts/pkg/pkg.m
@@ -337,18 +337,18 @@ function [local_packages, global_package
       if (length (files) == 0)
         error ("you must specify at least one filename when calling 'pkg install'");
       endif
 
       local_files = {};
       unwind_protect
 
         if (octave_forge)
-          [urls, local_files] = cellfun (@get_forge_download, files, "UniformOutput", false);
-          [files, succ] = cellfun (@urlwrite, urls, local_files, "UniformOutput", false);
+          [urls, local_files] = cellfun (@get_forge_download, files, "uniformoutput", false);
+          [files, succ] = cellfun (@urlwrite, urls, local_files, "uniformoutput", false);
           succ = [succ{:}];
           if (! all (succ))
             i = find (! succ, 1);
             error ("could not download file %s from url %s", local_files{i}, urls{i});
           endif
         endif
 
         install (files, deps, auto, prefix, archprefix, verbose, local_list, 
@@ -498,17 +498,17 @@ function descriptions = rebuild (prefix,
     endif
     ## the two first entries of dirlist are "." and ".."
     dirlist([1,2]) = [];
   else
     old_descriptions = installed_packages (list, list);
     wd = pwd ();
     unwind_protect
       cd (prefix);
-      dirlist = glob (cellfun(@(x) cstrcat(x, '-*'), files, 'UniformOutput', 0));
+      dirlist = glob (cellfun(@(x) cstrcat(x, '-*'), files, 'uniformoutput', 0));
     unwind_protect_cleanup
       cd (wd);
     end_unwind_protect
   endif
   descriptions = {};
   for k = 1:length (dirlist)
     descfile = fullfile (prefix, dirlist{k}, "packinfo", "DESCRIPTION");
     if (verbose)
@@ -1354,17 +1354,17 @@ function configure_make (desc, packdir, 
       filenames(delete_idx) = [];
     else
       m = dir (fullfile (src, "*.m"));
       oct = dir (fullfile (src, "*.oct"));
       mex = dir (fullfile (src, "*.mex"));
 
       filenames = cellfun (@(x) fullfile (src, x),
                            {m.name, oct.name, mex.name},
-                           "UniformOutput", false);
+                           "uniformoutput", false);
     endif
 
     ## Split into architecture dependent and independent files.
     if (isempty (filenames))
       idx = [];
     else
       idx = cellfun (@is_architecture_dependent, filenames);
     endif
diff --git a/scripts/plot/axis.m b/scripts/plot/axis.m
--- a/scripts/plot/axis.m
+++ b/scripts/plot/axis.m
@@ -317,18 +317,18 @@ function lims = __get_tight_lims__ (ca, 
   if (isempty (kids))
     ## Return the current limits.
     lims = get (ca, strcat (ax, "lim"));
   else
     data = get (kids, strcat (ax, "data"));
     if (iscell (data))
       data = data (find (! cellfun (@isempty, data)));
       if (! isempty (data))
-        lims_min = min (cellfun (@min, cellfun (@min, data, 'UniformOutput', false)(:))); 
-        lims_max = max (cellfun (@max, cellfun (@max, data, 'UniformOutput', false)(:))); 
+        lims_min = min (cellfun (@min, cellfun (@min, data, 'uniformoutput', false)(:))); 
+        lims_max = max (cellfun (@max, cellfun (@max, data, 'uniformoutput', false)(:))); 
         lims = [lims_min, lims_max]; 
       else
         lims = [0, 1];
       endif
     else
       lims = [min(data(:)), max(data(:))];
     endif
   endif
diff --git a/scripts/plot/pareto.m b/scripts/plot/pareto.m
--- a/scripts/plot/pareto.m
+++ b/scripts/plot/pareto.m
@@ -61,22 +61,22 @@ function h = pareto (varargin)
 
   x = varargin {1}(:).';
   if (nargin == 2)
     y = varargin {2}(:).';
     if (! iscell (y))
       if (ischar (y))
         y = cellstr (y);
       else
-        y = cellfun (@num2str, num2cell (y), "UniformOutput", false);
+        y = cellfun (@num2str, num2cell (y), "uniformoutput", false);
       endif
     endif
   else
     y = cellfun (@int2str, num2cell (1 : numel(x)), 
-                 "UniformOutput", false);
+                 "uniformoutput", false);
   endif
 
   [x, idx] = sort (x, "descend");
   y = y (idx);
   cdf = cumsum (x);
   maxcdf = max(cdf);
   cdf = cdf ./ maxcdf;
   cdf95 = cdf - 0.95;
diff --git a/scripts/plot/private/__patch__.m b/scripts/plot/private/__patch__.m
--- a/scripts/plot/private/__patch__.m
+++ b/scripts/plot/private/__patch__.m
@@ -204,17 +204,17 @@ function args = setdata (args)
   nr = size (faces, 2);
   nc = size (faces, 1);
   idx = faces .';
   t1 = isnan (idx);
   if (any (t1(:)))
     t2 = find (t1 != t1([2:end,end],:));
     idx (t1) = idx (t2 (cell2mat (cellfun (@(x) x(1)*ones(1,x(2)),
                 mat2cell ([1 : nc; sum(t1)], 2, ones(1,nc)), 
-                                           "UniformOutput", false))));
+                                           "uniformoutput", false))));
   endif
   x = reshape (vert(:,1)(idx), size (idx));
   y = reshape (vert(:,2)(idx), size (idx));
   if (size(vert,2) > 2)
     z = reshape (vert(:,3)(idx), size (idx));
   else
     z = [];
   endif
diff --git a/scripts/statistics/base/mode.m b/scripts/statistics/base/mode.m
--- a/scripts/statistics/base/mode.m
+++ b/scripts/statistics/base/mode.m
@@ -110,17 +110,17 @@ endfunction
 %! assert (f, [1;2;2;2;1]);
 %! assert (c, {[1;2;3;4;5];[2];[2;3];[2];[1;2;3;4;5]});
 %!test
 %! a = sprandn (32, 32, 0.05);
 %! [m, f, c] = mode (a);
 %! [m2, f2, c2] = mode (full (a));
 %! assert (m, sparse (m2));
 %! assert (f, sparse (f2));
-%! assert (c, cellfun (@(x) sparse (0), c2, 'UniformOutput', false));
+%! assert (c, cellfun (@(x) sparse (0), c2, 'uniformoutput', false));
 
 %!assert(mode([2,3,1,2,3,4],1),[2,3,1,2,3,4])
 %!assert(mode([2,3,1,2,3,4],2),2)
 %!assert(mode([2,3,1,2,3,4]),2)
 
 %!assert(mode([2;3;1;2;3;4],1),2)
 %!assert(mode([2;3;1;2;3;4],2),[2;3;1;2;3;4])
 %!assert(mode([2;3;1;2;3;4]),2)
diff --git a/scripts/strings/deblank.m b/scripts/strings/deblank.m
--- a/scripts/strings/deblank.m
+++ b/scripts/strings/deblank.m
@@ -50,17 +50,17 @@ function s = deblank (s)
         s = resize (s, 0, 0);
       else
         s = s(:,1:ceil (max (k) / rows (s)));
       endif
     endif
 
   elseif (iscell(s))
 
-    s = cellfun (@deblank, s, "UniformOutput", false);
+    s = cellfun (@deblank, s, "uniformoutput", false);
 
   else
     error ("deblank: expecting character string argument");
   endif
 
 endfunction
 
 %!assert (strcmp (deblank (" f o o  "), " f o o"));
diff --git a/scripts/strings/strcat.m b/scripts/strings/strcat.m
--- a/scripts/strings/strcat.m
+++ b/scripts/strings/strcat.m
@@ -56,17 +56,17 @@
 
 function st = strcat (varargin)
 
   if (nargin > 0)
     if (nargin == 1)
       st = varargin{1};
     elseif (nargin > 1)
       ## Convert to cells of strings
-      uo = "UniformOutput";
+      uo = "uniformoutput";
       reals = cellfun (@isreal, varargin);
       if (any (reals))
         varargin(reals) = cellfun (@char, varargin(reals), uo, false);
       endif
       chars = cellfun (@ischar, varargin);
       allchar = all (chars);
       varargin(chars) = cellfun (@cellstr, varargin(chars), uo, false);
       if (! all (cellfun (@iscell, varargin)))
diff --git a/scripts/strings/strmatch.m b/scripts/strings/strmatch.m
--- a/scripts/strings/strmatch.m
+++ b/scripts/strings/strmatch.m
@@ -62,17 +62,17 @@ function idx = strmatch (s, A, exact)
   len = length (s);
 
   exact = nargin == 3 && ischar (exact) && strcmp (exact, "exact");
 
   if (iscell (A))
     idx = find (strncmp (s, A, len));
     if (exact)
       ## We can't just use strcmp, because we need to ignore whitespace.
-      B = cellfun (@strtrimr, A(idx), "UniformOutput", false);
+      B = cellfun (@strtrimr, A(idx), "uniformoutput", false);
       idx = idx (strcmp (s, B));
     endif
   elseif (ischar (A))
     [nr, nc] = size (A);
     if (len > nc)
       idx = [];
     else
       match = all (bsxfun (@eq, A(:,1:len), s), 2);
diff --git a/scripts/strings/strtrim.m b/scripts/strings/strtrim.m
--- a/scripts/strings/strtrim.m
+++ b/scripts/strings/strtrim.m
@@ -50,17 +50,17 @@ function s = strtrim (s)
     if (isempty (s) || isempty (k))
       s = "";
     else
       s = s(:,ceil (min (k) / rows (s)):ceil (max (k) / rows (s)));
     endif
 
   elseif (iscell(s))
 
-    s = cellfun (@strtrim, s, "UniformOutput", false);
+    s = cellfun (@strtrim, s, "uniformoutput", false);
 
   else
     error ("strtrim: expecting string argument");
   endif
 
 endfunction
 
 %!error <Invalid call to strtrim> strtrim();
diff --git a/scripts/strings/untabify.m b/scripts/strings/untabify.m
--- a/scripts/strings/untabify.m
+++ b/scripts/strings/untabify.m
@@ -51,17 +51,17 @@
 ## Created: 2010-10-15
 
 function s = untabify (t, tw = 8, db = false)
 
  if (nargin > 0 && nargin < 4 && (ischar (t) || iscellstr (t)))
    if (ischar (t))
      s = replace_tabs (t, tw);
    else
-     s = cellfun (@(str) replace_tabs (str, tw), t, "UniformOutput", false);
+     s = cellfun (@(str) replace_tabs (str, tw), t, "uniformoutput", false);
    endif
    if (db)
      s = deblank (s);
    endif
  else
    print_usage ();
  endif
 
