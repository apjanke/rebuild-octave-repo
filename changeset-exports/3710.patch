# HG changeset patch
# User jwe
# Date 965249266 0
#      Wed Aug 02 20:47:46 2000 +0000
# Node ID 9a77deefb8c9199ad42990fec88301b1b5f3c150
# Parent  c73bea82af94d7af031ca116685ca2bb6dd06fa4
[project @ 2000-08-02 20:47:44 by jwe]

diff --git a/configure.in b/configure.in
--- a/configure.in
+++ b/configure.in
@@ -16,17 +16,17 @@ dnl Copyright (C) 1996, 1997 John W. Eat
 ### FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
 ### for more details.
 ### 
 ### You should have received a copy of the GNU General Public License
 ### along with Octave; see the file COPYING.  If not, write to the Free
 ### Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ### 02111-1307, USA. 
 
-AC_REVISION($Revision: 1.333 $)
+AC_REVISION($Revision: 1.334 $)
 AC_PREREQ(2.9)
 AC_INIT(src/octave.cc)
 AC_CONFIG_HEADER(config.h)
 
 AC_DEFINE(OCTAVE_SOURCE, 1)
 
 OCTAVE_HOST_TYPE
 
@@ -903,25 +903,25 @@ else
   AC_CACHE_VAL(ac_cv_func_glob, ac_cv_func_glob=yes)
 fi
 AC_SUBST(GLOB_DIR)
 AC_SUBST(LIBGLOB)
 AC_SUBST(GLOB_INCFLAGS)
 
 ### Checks for functions and variables.
 
-AC_CHECK_FUNCS(atexit bcopy bzero dup2 endgrent endpwent execvp fcntl \
-  fork getcwd getegid geteuid getgid getgrent getgrgid getgrnam \
-  gethostname getpgrp getpid getppid getpwent getpwnam getpwuid \
-  gettimeofday getuid getwd localtime_r lstat memmove mkdir mkfifo \
-  on_exit pipe poll putenv rename rindex rmdir select setgrent \
-  setpwent setvbuf sigaction sigpending sigprocmask sigsuspend \
-  stat strcasecmp strdup strerror strftime stricmp strncasecmp \
-  strnicmp strptime tempnam umask unlink usleep vfprintf vsprintf \
-  vsnprintf waitpid)
+AC_CHECK_FUNCS(atexit bcopy bzero dup2 endgrent endpwent execvp \
+  fcntl fork getcwd getegid geteuid getgid getgrent getgrgid \
+  getgrnam gethostname getpgrp getpid getppid getpwent getpwnam \
+  getpwuid gettimeofday getuid getwd link localtime_r lstat \
+  memmove mkdir mkfifo on_exit pipe poll putenv readlink rename \
+  rindex rmdir select setgrent setpwent setvbuf sigaction sigpending \
+  sigprocmask sigsuspend stat strcasecmp strdup strerror strftime \
+  stricmp strncasecmp strnicmp strptime symlink tempnam umask unlink \
+  usleep vfprintf vsprintf vsnprintf waitpid)
 
 OCTAVE_SMART_PUTENV
 
 LD_CXX='$(CXX)'
 LIBDLFCN=
 DLFCN_INCFLAGS=
 RDYNAMIC_FLAG=
 if test "$WITH_DL" = yes || test "$WITH_DL" = maybe; then
diff --git a/doc/interpreter/system.txi b/doc/interpreter/system.txi
--- a/doc/interpreter/system.txi
+++ b/doc/interpreter/system.txi
@@ -112,16 +112,20 @@ useful.
 @section Filesystem Utilities
 
 Octave includes the following functions for renaming and deleting files,
 creating, deleting, and reading directories, and for getting information
 about the status of files.
 
 @DOCSTRING(rename)
 
+@DOCSTRING(link)
+
+@DOCSTRING(symlink)
+
 @DOCSTRING(unlink)
 
 @DOCSTRING(readdir)
 
 @DOCSTRING(mkdir)
 
 @DOCSTRING(rmdir)
 
diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,13 @@
+2000-08-02  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* file-ops.cc (file_ops::link, file_ops::symlink,
+	file_ops::readlink): New functions.
+
 2000-08-01  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* Array2-idx.h (Array2<T>::index (idx_vector&)): If a scalar is
 	indexed, always return an object the same size as the index arg.
 
 	* oct-time.cc (octave_base_tm::strftime): Return empty string for
 	empty format.
 
diff --git a/liboctave/file-ops.cc b/liboctave/file-ops.cc
--- a/liboctave/file-ops.cc
+++ b/liboctave/file-ops.cc
@@ -37,16 +37,17 @@ Software Foundation, 59 Temple Place - S
 
 #ifdef HAVE_UNISTD_H
 #include <unistd.h>
 #endif
 
 #include "file-ops.h"
 #include "oct-env.h"
 #include "oct-passwd.h"
+#include "pathlen.h"
 #include "statdefs.h"
 #include "str-vec.h"
 
 #define NOT_SUPPORTED(nm) \
   nm ## ": not supported on this system"
 
 // We provide a replacement for mkdir().
 
@@ -105,16 +106,120 @@ file_ops::mkfifo (const std::string& nam
     }
 #else
   msg = NOT_SUPPORTED ("mkfifo");
 #endif
 
   return status;
 }
 
+// I don't know how to emulate this on systems that don't provide it.
+
+int
+file_ops::link (const std::string& old_name, const std::string& new_name)
+{
+  std::string msg;
+  return link (old_name, new_name, msg);
+}
+
+int
+file_ops::link (const std::string& old_name,
+		const std::string& new_name, std::string& msg)
+{
+  msg = std::string ();
+
+  int status = -1;
+
+#if defined (HAVE_LINK)
+  status = ::link (old_name.c_str (), new_name.c_str ());
+
+  if (status < 0)
+    {
+      using namespace std;
+      msg = ::strerror (errno);
+    }
+#else
+  msg = NOT_SUPPORTED ("link");
+#endif
+
+  return status;
+}
+
+// I don't know how to emulate this on systems that don't provide it.
+
+int
+file_ops::symlink (const std::string& old_name, const std::string& new_name)
+{
+  std::string msg;
+  return symlink (old_name, new_name, msg);
+}
+
+int
+file_ops::symlink (const std::string& old_name,
+		   const std::string& new_name, std::string& msg)
+{
+  msg = std::string ();
+
+  int status = -1;
+
+#if defined (HAVE_SYMLINK)
+  status = ::symlink (old_name.c_str (), new_name.c_str ());
+
+  if (status < 0)
+    {
+      using namespace std;
+      msg = ::strerror (errno);
+    }
+#else
+  msg = NOT_SUPPORTED ("symlink");
+#endif
+
+  return status;
+}
+
+// We provide a replacement for rename().
+
+int
+file_ops::readlink (const std::string& path, std::string& result)
+{
+  std::string msg;
+  return readlink (path, result, msg);
+}
+
+int
+file_ops::readlink (const std::string& path, std::string& result,
+		    std::string& msg)
+{
+  int status = -1;
+
+  msg = std::string ();
+
+  char buf[MAXPATHLEN+1];
+
+#if defined (HAVE_READLINK)
+  status = ::readlink (path.c_str (), buf, MAXPATHLEN);
+
+  if (status < 0)
+    {
+      using namespace std;
+      msg = ::strerror (errno);
+    }
+  else
+    {
+      buf[status] = '\0';
+      result = string (buf);
+      status = 0;
+    }
+#else
+  msg = NOT_SUPPORTED ("rename");
+#endif
+
+  return status;
+}
+
 // We provide a replacement for rename().
 
 int
 file_ops::rename (const std::string& from, const std::string& to)
 {
   std::string msg;
   return rename (from, to, msg);
 }
diff --git a/liboctave/file-ops.h b/liboctave/file-ops.h
--- a/liboctave/file-ops.h
+++ b/liboctave/file-ops.h
@@ -35,24 +35,34 @@ struct
 file_ops
 {
   static int mkdir (const std::string&, mode_t);
   static int mkdir (const std::string&, mode_t, std::string&);
 
   static int mkfifo (const std::string&, mode_t);
   static int mkfifo (const std::string&, mode_t, std::string&);
 
+  static int link (const std::string&, const std::string&);
+  static int link (const std::string&, const std::string&, std::string&);
+
+  static int symlink (const std::string&, const std::string&);
+  static int symlink (const std::string&, const std::string&, std::string&);
+
+  static int readlink (const std::string&, std::string&);
+  static int readlink (const std::string&, std::string&, std::string&);
+
   static int rename (const std::string&, const std::string&);
   static int rename (const std::string&, const std::string&, std::string&);
 
   static int rmdir (const std::string&);
   static int rmdir (const std::string&, std::string&);
 
   static std::string tempnam (const std::string&, const std::string&);
-  static std::string tempnam (const std::string&, const std::string&, std::string&);
+  static std::string tempnam (const std::string&, const std::string&,
+			      std::string&);
 
   typedef std::string (*tilde_expansion_hook) (const std::string&);
 
   static tilde_expansion_hook tilde_expansion_preexpansion_hook;
 
   static tilde_expansion_hook tilde_expansion_failure_hook;
 
   static string_vector tilde_additional_prefixes;
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,12 @@
+2000-08-02  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* dirfns.cc (Flink, Fsymlink, Freadlink): New functions.
+
 2000-08-01  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* load-save.cc (Vsave_header_format_string): New variable.
 	(symbols_of_load_save): DEFVAR it.
 	(save_header_format, default_save_header_format): New functions.
 	(write_header): Use Vsave_header_format_string here.
 
 2000-07-28  John W. Eaton  <jwe@bevo.che.wisc.edu>
diff --git a/src/dirfns.cc b/src/dirfns.cc
--- a/src/dirfns.cc
+++ b/src/dirfns.cc
@@ -361,16 +361,152 @@ system-dependent error message.\n\
 	}
     }
   else
     print_usage ("rmdir");
 
   return retval;
 }
 
+DEFUN (link, args, ,
+  "-*- texinfo -*-\n\
+@deftypefn {Built-in Function} {[@var{err}, @var{msg}] =} link (@var{old}, @var{new})\n\
+Create a new link (also known as a hard link) to an existing file.\n\
+\n\
+If successful, @var{err} is 0 and @var{msg} is an empty string.\n\
+Otherwise, @var{err} is nonzero and @var{msg} contains a\n\
+system-dependent error message.\n\
+@end deftypefn")
+{
+  octave_value_list retval;
+
+  retval(1) = std::string ();
+  retval(0) = -1.0;
+
+  if (args.length () == 2)
+    {
+      std::string from = args(0).string_value ();
+
+      if (error_state)
+	gripe_wrong_type_arg ("link", args(0));
+      else
+	{
+	  std::string to = args(1).string_value ();
+
+	  if (error_state)
+	    gripe_wrong_type_arg ("link", args(1));
+	  else
+	    {
+	      std::string msg;
+
+	      int status = file_ops::link (from, to, msg);
+
+	      retval(0) = static_cast<double> (status);
+
+	      if (status < 0)
+		retval(1) = msg;
+	    }
+	}
+    }
+  else
+    print_usage ("link");
+
+  return retval;
+}
+
+DEFUN (symlink, args, ,
+  "-*- texinfo -*-\n\
+@deftypefn {Built-in Function} {[@var{err}, @var{msg}] =} symlink (@var{old}, @var{new})\n\
+Create a symbolic link @var{new} which contains the string @var{old}.\n\
+\n\
+If successful, @var{err} is 0 and @var{msg} is an empty string.\n\
+Otherwise, @var{err} is nonzero and @var{msg} contains a\n\
+system-dependent error message.\n\
+@end deftypefn")
+{
+  octave_value_list retval;
+
+  retval(1) = std::string ();
+  retval(0) = -1.0;
+
+  if (args.length () == 2)
+    {
+      std::string from = args(0).string_value ();
+
+      if (error_state)
+	gripe_wrong_type_arg ("symlink", args(0));
+      else
+	{
+	  std::string to = args(1).string_value ();
+
+	  if (error_state)
+	    gripe_wrong_type_arg ("symlink", args(1));
+	  else
+	    {
+	      std::string msg;
+
+	      int status = file_ops::symlink (from, to, msg);
+
+	      retval(0) = static_cast<double> (status);
+
+	      if (status < 0)
+		retval(1) = msg;
+	    }
+	}
+    }
+  else
+    print_usage ("symlink");
+
+  return retval;
+}
+
+DEFUN (readlink, args, ,
+  "-*- texinfo -*-\n\
+@deftypefn {Built-in Function} {[@var{result}, @var{err}, @var{msg}] =} symlink (@var{symlink})\n\
+Read the value of the symbolic link @var{symlink}.\n\
+\n\
+If successful, @var{result} contains the contents of the symbolic link\n\
+@var{symlink}, @var{err} is 0 and @var{msg} is an empty string.\n\
+Otherwise, @var{err} is nonzero and @var{msg} contains a\n\
+system-dependent error message.\n\
+@end deftypefn")
+{
+  octave_value_list retval;
+
+  retval(2) = std::string ();
+  retval(1) = -1.0;
+  retval(0) = std::string ();
+
+  if (args.length () == 1)
+    {
+      std::string symlink = args(0).string_value ();
+
+      if (error_state)
+	gripe_wrong_type_arg ("readlink", args(0));
+      else
+	{
+	  std::string result;
+	  std::string msg;
+
+	  int status = file_ops::readlink (symlink, result, msg);
+
+	  retval(0) = result;
+
+	  retval(1) = static_cast<double> (status);
+
+	  if (status < 0)
+	    retval(2) = msg;
+	}
+    }
+  else
+    print_usage ("readlink");
+
+  return retval;
+}
+
 DEFUN (rename, args, ,
   "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {[@var{err}, @var{msg}] =} rename (@var{old}, @var{new})\n\
 Change the name of file @var{old} to @var{new}.\n\
 \n\
 If successful, @var{err} is 0 and @var{msg} is an empty string.\n\
 Otherwise, @var{err} is nonzero and @var{msg} contains a\n\
 system-dependent error message.\n\
