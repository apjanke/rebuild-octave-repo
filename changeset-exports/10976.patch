# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1284554250 -7200
#      Wed Sep 15 14:37:30 2010 +0200
# Node ID 80653e42a551ea59927265b72ef42c2dbdaac60f
# Parent  2d14817353a6e9ac54a88314b057308e951b50f8
optimize any for sparse bool matrices

diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,12 @@
+2010-09-15  Jaroslav Hajek  <highegg@gmail.com>
+
+	* boolSparse.cc (SparseBoolMatrix::any): Optimize.
+
 2010-08-24  Jaroslav Hajek  <highegg@gmail.com>
 
 	* Array-ch.cc: Inline basic sorts.
 
 2010-08-21  Rik <octave@nomad.inbox5.com>
 
 	* CmplxQRP.cc, CmplxQRP.h, dbleQRP.cc, dbleQRP.h, fCmplxQRP.cc,
 	fCmplxQRP.h, floatQRP.cc, floatQRP.h: Declare Pvec as RowVector,
diff --git a/liboctave/boolSparse.cc b/liboctave/boolSparse.cc
--- a/liboctave/boolSparse.cc
+++ b/liboctave/boolSparse.cc
@@ -30,16 +30,18 @@ along with Octave; see the file COPYING.
 #include <vector>
 
 #include "config.h"
 #include "quit.h"
 #include "lo-ieee.h"
 #include "lo-mappers.h"
 
 #include "boolSparse.h"
+#include "oct-mem.h"
+#include "oct-locbuf.h"
 
 // SparseBoolMatrix class.
 
 bool
 SparseBoolMatrix::operator == (const SparseBoolMatrix& a) const
 {
   octave_idx_type nr = rows ();
   octave_idx_type nc = cols ();
@@ -133,17 +135,56 @@ SparseBoolMatrix
 SparseBoolMatrix::all (int dim) const
 {
   SPARSE_ALL_OP (dim);
 }
 
 SparseBoolMatrix
 SparseBoolMatrix::any (int dim) const
 {
-  SPARSE_ANY_OP (dim);
+  Sparse<bool> retval;
+  octave_idx_type nr = rows (), nc = cols (), nz = nnz ();
+  if (dim == -1)
+    dim = (nr == 1 && nc != 1) ? 1 : 0;
+
+  if (dim == 0)
+    {
+      // Result is a row vector.
+      retval = Sparse<bool> (1, nc);
+      for(octave_idx_type i = 0; i < nc; i++)
+        retval.xcidx(i+1) = retval.xcidx(i) + (cidx(i+1) > cidx(i));
+      octave_idx_type new_nz = retval.xcidx(nc);
+      retval.change_capacity (new_nz);
+      fill_or_memset (new_nz, static_cast<octave_idx_type> (0), retval.ridx ());
+      fill_or_memset (new_nz, true, retval.data ());
+    }
+  else if (dim == 1)
+    {
+      // Result is a column vector.
+      if (nz > nr/4)
+        {
+          // We can use O(nr) memory.
+          Array<bool> tmp (nr, 1, false);
+          for (octave_idx_type i = 0; i < nz; i++)
+            tmp.xelem(ridx(i)) = true;
+          retval = tmp;
+        }
+      else
+        {
+          OCTAVE_LOCAL_BUFFER (octave_idx_type, tmpridx, nz);
+          copy_or_memcpy (nz, ridx (), tmpridx);
+          std::sort (tmpridx, tmpridx+nz);
+          octave_idx_type new_nz = std::unique (tmpridx, tmpridx + nz) - tmpridx;
+          retval = Sparse<bool> (nr, 1, new_nz);
+          copy_or_memcpy (new_nz, tmpridx, retval.ridx ());
+          fill_or_memset (new_nz, true, retval.data ());
+        }
+    }
+
+  return retval;
 }
 
 SparseBoolMatrix
 SparseBoolMatrix::diag (octave_idx_type k) const
 {
   return Sparse<bool>::diag (k);
 }
 
