# HG changeset patch
# User jwe
# Date 1055531798 0
#      Fri Jun 13 19:16:38 2003 +0000
# Node ID 51a0dcde877846dcaa670f0447810e829149166c
# Parent  82f8aae8cf2093cfd70fdf0f83f355e32343b841
[project @ 2003-06-13 19:16:37 by jwe]

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,10 +1,19 @@
 2003-06-13  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
+	* parse.y (frob_function, parse_fcn_file): Handle help_buf as
+	stack of strings.
+	* lex.l ({CCHAR}): Handle help_buf as stack of strings.
+	Store text returned from grab_help_text in help_buf here.
+	(reset_parser): Handle help_buf as stack of strings.
+	(prep_for_nested_function): Push empty string onto help_buf stack.
+	(grab_help_text): Return help text instead of storing it in help_buf.
+	* parse.h, parse.y (help_buf): Now a stack of strings.
+
 	* oct-stream.cc (printf_value_cache::string_value): Don't attempt
 	to extract values when none are available.
 
 2003-06-04  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* pt-plot.cc (Vgnuplot_has_multiplot): Delete variable.
 	(gnuplot_has_multiplot): Delete.
 	(symbols_of_pt_plot): Delete DEFVAR for gnuplot_has_multiplot.
diff --git a/src/lex.l b/src/lex.l
--- a/src/lex.l
+++ b/src/lex.l
@@ -196,17 +196,17 @@ static bool Vwarn_single_quote_string = 
 static void fixup_column_count (char *s);
 static void do_comma_insert_check (void);
 static int is_plot_keyword (const std::string& s);
 static int is_keyword (const std::string& s);
 static void prep_for_function (void);
 static void prep_for_nested_function (void);
 static std::string plot_style_token (const std::string& s);
 static symbol_record *lookup_identifier (const std::string& s);
-static void grab_help_text (void);
+static std::string grab_help_text (void);
 static bool match_any (char c, const char *s);
 static bool next_token_is_sep_op (void);
 static bool next_token_is_bin_op (bool spc_prev);
 static bool next_token_is_postfix_unary_op (bool spc_prev);
 static std::string strip_trailing_whitespace (char *s);
 static void handle_number (void);
 static int handle_string (char delim, int text_style = 0);
 static int handle_close_bracket (int spc_gobbled);
@@ -623,25 +623,35 @@ NUMBER	(({D}+\.?{D}*{EXPON}?)|(\.{D}+{EX
   }
 
 %{
 // Gobble comments.  If closest nesting is inside parentheses, don't
 // return a new line.
 %} 
 
 {CCHAR} {
-    if (help_buf.empty ()
+    std::string help_txt;
+
+    if (! help_buf.empty ())
+      help_txt = help_buf.top ();
+
+    if (help_txt.empty ()
 	&& lexer_flags.beginning_of_function
 	&& nesting_level.none ())
       {
 	lexer_flags.beginning_of_function = false;
 
-	grab_help_text ();
-
-	octave_comment_buffer::append (help_buf);
+	std::string txt = grab_help_text ();
+
+	if (! help_buf.empty ())
+	  help_buf.pop ();
+
+	help_buf.push (txt);
+
+	octave_comment_buffer::append (txt);
       }
     else
       {
 	std::string buf;
 
 	bool begin_comment = true;
 
 	int c;
@@ -878,17 +888,18 @@ reset_parser (void)
   if ((interactive || forced_interactive)
       && ! (reading_fcn_file
 	    || reading_script_file
 	    || get_input_from_eval_string
 	    || input_from_startup_file))
     yyrestart (stdin);
 
   // Clear the buffer for help text.
-  help_buf.resize (0);
+  while (! help_buf.empty ())
+    help_buf.pop ();
 
   // Reset other flags.
   lexer_flags.init ();
 }
 
 // If we read some newlines, we need figure out what column we're
 // really looking at.
 
@@ -1100,16 +1111,17 @@ prep_for_function (void)
   if (! (reading_fcn_file || reading_script_file))
     input_line_number = 1;
 }
 
 static void
 prep_for_nested_function (void)
 {
   lexer_flags.parsing_nested_function = 1;
+  help_buf.push (std::string ());
   prep_for_function ();
   // We're still only expecting one end token for this set of functions.
   end_tokens_expected--;
   yylval.tok_val = new token (input_line_number, current_input_column);
   token_stack.push (yylval.tok_val);
 }
 
 // Handle keywords.  Return -1 if the keyword should be ignored.
@@ -1373,26 +1385,25 @@ force_local_variable (const std::string&
     curr_sym_tab->clear (name);
 
   symbol_record *sr = curr_sym_tab->lookup (name, true);
 
   if (sr)
     sr->define (octave_value ());
 }
 
-// Grab the help text from an function file.  Always overwrites the
-// current contents of help_buf.
+// Grab the help text from an function file.
 
 // XXX FIXME XXX -- gobble_leading_white_space() in parse.y
 // duplicates some of this code!
 
-static void
+static std::string
 grab_help_text (void)
 {
-  help_buf.resize (0);
+  std::string buf;
 
   bool begin_comment = true;
   bool in_comment = true;
   bool discard_space = true;
 
   int c = 0;
 
   while ((c = yyinput ()) != EOF)
@@ -1407,17 +1418,17 @@ grab_help_text (void)
 	      continue;
 	    }
 	  else
 	    begin_comment = false;
 	}	
 
       if (in_comment)
 	{
-	  help_buf += static_cast<char> (c);
+	  buf += static_cast<char> (c);
 
 	  if (c == '\n')
 	    {
 	      in_comment = false;
 	      discard_space = true;
 	    }
 	}
       else
@@ -1440,16 +1451,18 @@ grab_help_text (void)
 	    }
 	}
     }
 
  done:
 
   if (c)
     yyunput (c, yytext);
+
+  return buf;
 }
 
 // Return 1 if the given character matches any character in the given
 // string.
 
 static bool
 match_any (char c, const char *s)
 {
diff --git a/src/parse.h b/src/parse.h
--- a/src/parse.h
+++ b/src/parse.h
@@ -22,16 +22,18 @@ Software Foundation, 59 Temple Place - S
 
 #if !defined (octave_parse_h)
 #define octave_parse_h 1
 
 #include <cstdio>
 
 #include <string>
 
+#include <stack>
+
 extern void reset_parser (void);
 extern int yylex (void);
 extern int yyparse (void);
 
 class tree;
 class tree_matrix;
 class tree_identifier;
 class octaev_function;
@@ -48,17 +50,17 @@ extern int yydebug;
 
 // The current input line number.
 extern int input_line_number;
 
 // The column of the current token.
 extern int current_input_column;
 
 // Buffer for help text snagged from function files.
-extern std::string help_buf;
+extern std::stack<std::string> help_buf;
 
 // TRUE means we are using readline.
 extern bool line_editing;
 
 // TRUE means we printed messages about reading startup files.
 extern bool reading_startup_message_printed;
 
 // TRUE means input is coming from startup file.
diff --git a/src/parse.y b/src/parse.y
--- a/src/parse.y
+++ b/src/parse.y
@@ -107,17 +107,17 @@ symbol_table *tmp_local_sym_tab = 0;
 
 // The current input line number.
 int input_line_number = 0;
 
 // The column of the current token.
 int current_input_column = 1;
 
 // Buffer for help text snagged from function files.
-std::string help_buf;
+std::stack<std::string> help_buf;
 
 // Buffer for comments appearing before a function statement.
 static std::string fcn_comment_header;
 
 // TRUE means we are using readline.
 // (--no-line-editing)
 bool line_editing = true;
 
@@ -2616,23 +2616,25 @@ frob_function (tree_identifier *id, octa
       if (lexer_flags.parsing_nested_function)
         fcn->mark_as_nested_function ();
     }
   else
     panic_impossible ();
 
   id->define (fcn, symbol_record::USER_FUNCTION);
 
-  id->document (help_buf);
-
-  help_buf.resize (0);
+  if (! help_buf.empty ())
+    {
+      id->document (help_buf.top ());
+      help_buf.pop ();
+    }
 
   if (lexer_flags.parsing_nested_function < 0)
     lexer_flags.parsing_nested_function = 0;
-  
+
   return fcn;
 }
 
 // Finish defining a function.
 
 static octave_user_function *
 finish_function (tree_identifier *id, octave_user_function *fcn,
 		 octave_comment_list *lc)
@@ -3338,19 +3340,22 @@ parse_fcn_file (const std::string& ff, b
 	  unwind_protect::add (delete_input_buffer, (void *) new_buf);
 
 	  switch_to_buffer (new_buf);
 
 	  unwind_protect_ptr (curr_sym_tab);
 
 	  reset_parser ();
 
-	  help_buf = gobble_leading_white_space (ffile, true, true, true);
-
-	  octave_comment_buffer::append (help_buf);
+	  std::string txt
+	    = gobble_leading_white_space (ffile, true, true, true);
+
+	  help_buf.push (txt);
+
+	  octave_comment_buffer::append (txt);
 
 	  // XXX FIXME XXX -- this should not be necessary.
 	  gobble_leading_white_space (ffile, false, true, false);
 
 	  int status = yyparse ();
 
 	  if (status != 0)
 	    {
