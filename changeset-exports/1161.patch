# HG changeset patch
# User jwe
# Date 793901702 0
#      Mon Feb 27 16:15:02 1995 +0000
# Node ID 0326a802cd5cef7936278bc5ddcba4f19a860dff
# Parent  74397545c242753a680ac45c276d58dc3b13b09c
[project @ 1995-02-27 16:14:48 by jwe]

diff --git a/src/pt-exp-base.cc b/src/pt-exp-base.cc
--- a/src/pt-exp-base.cc
+++ b/src/pt-exp-base.cc
@@ -2551,16 +2551,35 @@ tree_builtin::max_expected_args (void)
     ea = INT_MAX;
   else
     ea = nargin_max;
   return ea;
 }
 
 // User defined functions.
 
+void
+tree_function::install_nargin_and_nargout (void)
+{
+  nargin_sr = sym_tab->lookup ("nargin", 1, 0);
+  nargout_sr = sym_tab->lookup ("nargout", 1, 0);
+}
+
+void
+tree_function::bind_nargin_and_nargout (int nargin, int nargout)
+{
+  tree_constant *tmp;
+
+  tmp = new tree_constant (nargin);
+  nargin_sr->define (tmp);
+
+  tmp = new tree_constant (nargout);
+  nargout_sr->define (tmp);
+}
+
 #if 0
 tree_function *
 tree_function::define (tree statement_list *t)
 {
   cmd_list = t;
   return this;
 }
 #endif
@@ -2784,17 +2803,17 @@ tree_function::eval (int print, int narg
 	goto abort;
     }
 
 // The following code is in a separate scope to avoid warnings from
 // G++ about `goto abort' crossing the initialization of some
 // variables.
 
   {
-    bind_nargin_and_nargout (sym_tab, nargin, nargout);
+    bind_nargin_and_nargout (nargin, nargout);
       
 // Evaluate the commands that make up the function.  Always turn on
 // printing for commands inside functions.   Maybe this should be
 // toggled by a user-leval variable?
 
     int pf = ! user_pref.silent_functions;
     tree_constant last_computed_value = cmd_list->eval (pf);
 
diff --git a/src/pt-exp-base.h b/src/pt-exp-base.h
--- a/src/pt-exp-base.h
+++ b/src/pt-exp-base.h
@@ -800,16 +800,20 @@ private:
 };
 
 // User defined functions.
 
 class
 tree_function : public tree_fvc
 {
 private:
+  void install_nargin_and_nargout (void);
+
+  void bind_nargin_and_nargout (int nargin, int nargout);
+
   void init (void)
     {
       call_depth = 0;
       param_list = 0;
       ret_list = 0;
       sym_tab = 0;
       cmd_list = 0;
       file_name = 0;
@@ -828,16 +832,17 @@ public:
 
   tree_function (tree_statement_list *cl, symbol_table *st,
 		 int l = -1, int c = -1)
      : tree_fvc (l, c)
        {
 	 init ();
 	 sym_tab = st;
 	 cmd_list = cl;
+	 install_nargin_and_nargout ();
        }
 
 //  tree_function *define (tree_statement_list *t);
   tree_function *define_param_list (tree_parameter_list *t);
   tree_function *define_ret_list (tree_parameter_list *t);
 
   void stash_fcn_file_name (void);
 
@@ -893,16 +898,18 @@ private:
   char *fcn_name;
   time_t t_parsed;
   int system_fcn_file;
   int num_named_args;
   Octave_object args_passed;
   int num_args_passed;
   int curr_va_arg_number;
   tree_va_return_list *vr_list;
+  symbol_record *nargin_sr;
+  symbol_record *nargout_sr;
 };
 
 #endif
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; page-delimiter: "^/\\*" ***
diff --git a/src/variables.cc b/src/variables.cc
--- a/src/variables.cc
+++ b/src/variables.cc
@@ -1381,32 +1381,34 @@ alias_builtin (const char *alias, const 
   if (sr_alias)
     sr_alias->alias (sr_name);
   else
     panic ("can't find symbol record for builtin function `%s'", alias);
 }
 
 // Defining variables.
 
+#if 0
 void
 bind_nargin_and_nargout (symbol_table *sym_tab, int nargin, int nargout)
 {
   tree_constant *tmp;
   symbol_record *sr;
 
   sr = sym_tab->lookup ("nargin", 1, 0);
   sr->unprotect ();
   tmp = new tree_constant (nargin);
   sr->define (tmp);
 
   sr = sym_tab->lookup ("nargout", 1, 0);
   sr->unprotect ();
   tmp = new tree_constant (nargout);
   sr->define (tmp);
 }
+#endif
 
 // Give a global variable a definition.  This will insert the symbol
 // in the global table if necessary.
 
 // How is this different than install_builtin_variable?  Are both
 // functions needed?
 
 void
