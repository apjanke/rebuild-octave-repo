# HG changeset patch
# User Andreas Weber <andy.weber.aw@gmail.com>
# Date 1449929953 -3600
#      Sat Dec 12 15:19:13 2015 +0100
# Node ID 0bb9b4e99ea097df7d652b72e1d05d7bd742d9aa
# Parent  75d09edcfc75fe2c2cefbe02fbd1d867b536ff2c
__init_fltk__.cc:codesprint: Remove class of fcn and return after error

diff --git a/libinterp/dldfcn/__init_fltk__.cc b/libinterp/dldfcn/__init_fltk__.cc
--- a/libinterp/dldfcn/__init_fltk__.cc
+++ b/libinterp/dldfcn/__init_fltk__.cc
@@ -2076,18 +2076,16 @@ private:
     if (clstr.find (fltk_idx_header,0) == 0)
       {
         std::istringstream istr (clstr.substr (fltk_idx_header.size ()));
         if (istr >> ind)
           return ind;
       }
 
     error ("figure_manager: could not recognize fltk index");
-
-    return -1;
   }
 
   void idx2figprops (int idx, figure::properties& fp)
   {
     std::ostringstream ind_str;
     ind_str << fltk_idx_header << idx;
     fp.set___plot_stream__ (ind_str.str ());
   }
@@ -2099,33 +2097,29 @@ private:
         octave_value ps = fp.get___plot_stream__ ();
         if (ps.is_string ())
           return str2idx (ps.string_value ());
         else
           return 0;
       }
 
     error ("figure_manager: figure is not fltk");
-
-    return -1;
   }
 
   static int hnd2idx (double h)
   {
     graphics_object fobj = gh_manager::get_object (h);
     if (fobj &&  fobj.isa ("figure"))
       {
         figure::properties& fp =
           dynamic_cast<figure::properties&> (fobj.get_properties ());
         return figprops2idx (fp);
       }
 
     error ("figure_manager: H (= %g) is not a figure", h);
-
-    return -1;
   }
 
   static int hnd2idx (const graphics_handle& fh)
   {
     return hnd2idx (fh.value ());
   }
 };
 
@@ -2341,17 +2335,17 @@ public:
 private:
   octave_value_list input_event_hook_fcn_id;
 };
 
 #endif
 
 DEFUN_DLD (__fltk_check__, , ,
            "-*- texinfo -*-\n\
-@deftypefn {Loadable Function} {} __fltk_check__ ()\n\
+@deftypefn {} {} __fltk_check__ ()\n\
 Undocumented internal function.  Calls Fl::check ()\n\
 @end deftypefn")
 {
 #ifdef HAVE_FLTK
   Fl::check ();
 
   if (Vdrawnow_requested)
     Fdrawnow ();
@@ -2361,17 +2355,17 @@ Undocumented internal function.  Calls F
 
   return octave_value ();
 }
 
 // Initialize the fltk graphics toolkit.
 
 DEFUN_DLD (__init_fltk__, , ,
            "-*- texinfo -*-\n\
-@deftypefn {Loadable Function} {} __init_fltk__ ()\n\
+@deftypefn {} {} __init_fltk__ ()\n\
 Undocumented internal function.\n\
 @end deftypefn")
 {
 #ifdef HAVE_FLTK
   if (! display_info::display_available ())
     error ("__init_fltk__: no graphics DISPLAY available");
   else if (! toolkit_loaded)
     {
@@ -2392,17 +2386,17 @@ Undocumented internal function.\n\
   error ("__init_fltk__: not available without OpenGL and FLTK libraries");
 #endif
 
   return octave_value ();
 }
 
 DEFUN_DLD (__have_fltk__, , ,
            "-*- texinfo -*-\n\
-@deftypefn {Loadable Function} {@var{FLTK_available} =} __have_fltk__ ()\n\
+@deftypefn {} {@var{FLTK_available} =} __have_fltk__ ()\n\
 Undocumented internal function.\n\
 @end deftypefn")
 {
   octave_value retval;
 
 #ifdef HAVE_FLTK
   retval = true;
 #else
