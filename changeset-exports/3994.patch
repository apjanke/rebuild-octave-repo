# HG changeset patch
# User jwe
# Date 1026863829 0
#      Tue Jul 16 23:57:09 2002 +0000
# Node ID a41827ec56771666ce59b020032029dd05b7406f
# Parent  f23bc69132cc83fa0a4a35c360564272bd21cf7a
[project @ 2002-07-16 23:57:09 by jwe]

diff --git a/liboctave/DAERT.h b/liboctave/DAERT.h
--- a/liboctave/DAERT.h
+++ b/liboctave/DAERT.h
@@ -30,16 +30,19 @@ Software Foundation, 59 Temple Place - S
 class
 DAERT : public base_diff_alg_eqn, public DAERTFunc
 {
 public:
 
   DAERT (void)
     : base_diff_alg_eqn (), DAERTFunc () { }
 
+  DAERT (const ColumnVector& x, double t, DAERTFunc& f)
+    : base_diff_alg_eqn (x, t), DAERTFunc (f) { }
+
   DAERT (const ColumnVector& x, const ColumnVector& xdot, double t,
 	DAERTFunc& f)
     : base_diff_alg_eqn (x, xdot, t), DAERTFunc (f) { }
 
   DAERT (const DAERT& a)
     : base_diff_alg_eqn (a), DAERTFunc (a) { }
 
   DAERT& operator = (const DAERT& a)
diff --git a/liboctave/DASRT.cc b/liboctave/DASRT.cc
--- a/liboctave/DASRT.cc
+++ b/liboctave/DASRT.cc
@@ -83,51 +83,45 @@ ddasrt_f (const double& t, const double 
   ColumnVector tmp_state (nn);
   for (int i = 0; i < nn; i++)
     tmp_state(i) = state[i];
 
   ColumnVector tmp_deriv (nn);
   for (int i = 0; i < nn; i++)
     tmp_deriv(i) = deriv[i];
 
-  ColumnVector tmp_fval = user_fsub (tmp_state, tmp_deriv, t, ires);
+  ColumnVector tmp_fval = (*user_fsub) (tmp_state, tmp_deriv, t, ires);
 
   if (tmp_fval.length () == 0)
     ires = -2;
   else
     {
       for (int i = 0; i < nn; i++)
 	delta[i] = tmp_fval(i);
     }
 
   return 0;
 }
 
-//typedef int (*efptr) (const double& t, const int& n, double *state,
-//		      double *ework, double *rpar, int *ipar,
-//		      const int& ieform, int& ires);
-
-//static efptr e_fun;
-
 int
 ddasrt_j (const double& time, const double *state, const double *deriv,
 	  double *pd, const double& cj, double *, int *)
 {
   // XXX FIXME XXX -- would be nice to avoid copying the data.
 
   ColumnVector tmp_state (nn);
   ColumnVector tmp_deriv (nn);
 
   for (int i = 0; i < nn; i++)
     {
       tmp_deriv.elem (i) = deriv [i];
       tmp_state.elem (i) = state [i];
     }
 
-  Matrix tmp_pd = user_jsub (tmp_state, tmp_deriv, time, cj);
+  Matrix tmp_pd = (*user_jsub) (tmp_state, tmp_deriv, time, cj);
 
   for (int j = 0; j < nn; j++)
     for (int i = 0; i < nn; i++)
       pd [nn * j + i] = tmp_pd.elem (i, j);
 
   return 0;
 }
 
@@ -136,140 +130,104 @@ ddasrt_g (const int& neq, const double& 
 	  const int& ng, double *gout, double *rpar, int *ipar) 
 {
   int n = neq;
 
   ColumnVector tmp_state (n);
   for (int i = 0; i < n; i++)
     tmp_state(i) = state[i];
 
-  ColumnVector tmp_fval = user_csub (tmp_state, t);
+  ColumnVector tmp_fval = (*user_csub) (tmp_state, t);
 
   for (int i = 0; i < ng; i++)
     gout[i] = tmp_fval(i);
 
   return 0;
 }
 
-
 DASRT::DASRT (void)
   : DAERT ()
 {
   initialized = false;
   restart = false;
 
   stop_time_set = false;
   stop_time = 0.0;
 
   sanity_checked = false;
 
   info.resize (30, 0);
 
-  npar = 0;
   ng = 0;
 
   liw = 0;
   lrw = 0;
 }
 
+DASRT::DASRT (const ColumnVector& state, double time, DAERTFunc& f)
+  : DAERT (state, time, f)
+{
+  n = size ();
+
+  initialized = false;
+  restart = false;
+
+  stop_time_set = false;
+  stop_time = 0.0;
+
+  liw = 20 + n;
+  lrw = 50 + 9*n + n*n;
+
+  sanity_checked = false;
+
+  info.resize (15, 0);
+
+  DAERTFunc::DAERTConstrFunc tmp_csub = DAERTFunc::constraint_function ();
+  
+  if (tmp_csub)
+    {
+      ColumnVector tmp = tmp_csub (state, time);
+      ng = tmp.length ();
+    }
+  else
+    ng = 0;
+
+  jroot.resize (ng, 1);
+}
+
 DASRT::DASRT (const ColumnVector& state, const ColumnVector& deriv,
 	      double time, DAERTFunc& f)
   : DAERT (state, deriv, time, f)
 {
   n = size ();
 
   initialized = false;
   restart = false;
 
   stop_time_set = false;
   stop_time = 0.0;
 
   sanity_checked = false;
 
   info.resize (30, 0);
-  jroot.resize (ng, 1);
-
-  npar = 0;
 
   DAERTFunc::DAERTConstrFunc tmp_csub = DAERTFunc::constraint_function ();
   
   if (tmp_csub)
     {
       ColumnVector tmp = tmp_csub (state, time);
       ng = tmp.length ();
     }
   else
     ng = 0;
 
-  rpar.resize (npar+1);
-  ipar.resize (npar+1);
-
-  info(11) = npar;
-
-  // Also store it here, for communication with user-supplied
-  // subroutines.
-  ipar(0) = npar;
-
-  y.resize (n, 1, 0.0);
-  ydot.resize (n, 1, 0.0);
-}
-
-void
-DASRT::init_work_size (int info_zero)
-{
-  double t;
-  double *py = y.fortran_vec ();
-  double *pydot = ydot.fortran_vec ();
-  double rel_tol = relative_tolerance ();
-  double abs_tol = absolute_tolerance ();
-  int *pinfo = info.fortran_vec ();
-  double *prpar = rpar.fortran_vec ();
-  int *pipar = ipar.fortran_vec ();
-  int *pjroot = jroot.fortran_vec ();
-  int idid;
-
-  // We do not have to lie.
-  rwork.resize (5000+9*n+n*n, 0.0);
-  iwork.resize (n+20, 0);
+  liw = 20 + n + 1000;
+  lrw = 50 + 9*n + n*n + 1000;
 
-  liw = n+20;
-  lrw = 5000+9*n+n*n;
-
-  double *prwork = rwork.fortran_vec ();
-  int *piwork = iwork.fortran_vec ();
-
-  F77_FUNC (ddasrt, DASRT) (ddasrt_f, n, t, py, pydot, t, pinfo,
-			    &rel_tol, &abs_tol, idid, prwork, lrw,
-			    piwork, liw, prpar, pipar, ddasrt_j,
-			    ddasrt_g, ng, pjroot);
-
-  int iwadd = iwork(18);
-
-  if (iwadd > 0)
-    liw += iwadd;
-
-  info(0) = 0;
-
-  iwork.resize (liw, 0);
-
-  piwork = iwork.fortran_vec ();
-
-  F77_FUNC (ddasrt, DASRT) (ddasrt_f, n, t, py, pydot, t, pinfo,
-			    &rel_tol, &abs_tol, idid, prwork, lrw,
-			    piwork, liw, prpar, pipar, ddasrt_j,
-			    ddasrt_g, ng, pjroot);
-
-  int rwadd = iwork(19);
-
-  if (rwadd > 0)
-    lrw += rwadd;
-
-  rwork.resize (lrw, 0.0);
-
-  info(0) = info_zero;
+  jroot.resize (ng, 1);
 }
 
 void
 DASRT::force_restart (void)
 {
   restart = true;
   integration_error = false;
 }
@@ -291,55 +249,50 @@ void
 DASRT::integrate (double tout)
 {
   DASRT_result retval;
 
   if (! initialized)
     {
       info(0) = 0;
 
-      for (int i = 0; i < n; i++)
-	{
-	  y(i,0) = x(i);
-	  ydot(i,0) = xdot(i);
-	}
-
       integration_error = false;
 
-      nn = n;
-
       user_fsub = DAEFunc::function ();
       user_jsub = DAEFunc::jacobian_function ();
       user_csub = DAERTFunc::constraint_function ();
 
       if (user_jsub)
 	info(4) = 1;
       else
 	info(4) = 0;
 
+      px = x.fortran_vec ();
+      pxdot = xdot.fortran_vec ();
+
+      nn = n;
+
       if (! sanity_checked)
 	{
 	  int ires = 0;
 
-	  ColumnVector fval = user_fsub (x, xdot, t, ires);
+	  ColumnVector fval = (*user_fsub) (x, xdot, t, ires);
 
 	  if (fval.length () != x.length ())
 	    {
 	      (*current_liboctave_error_handler)
 		("dassl: inconsistent sizes for state and residual vectors");
 
 	      integration_error = true;
 	      return;
 	    }
 
 	  sanity_checked = true;
 	}
   
-      init_work_size (info(0));
-
       if (iwork.length () != liw)
 	iwork.resize (liw);
 
       if (rwork.length () != lrw)
 	rwork.resize (lrw);
 
       abs_tol = absolute_tolerance ();
       rel_tol = relative_tolerance ();
@@ -363,23 +316,19 @@ DASRT::integrate (double tout)
       if (maximum_step_size () >= 0.0)
 	{
 	  rwork(1) = maximum_step_size ();
 	  info(6) = 1;
 	}
       else
 	info(6) = 0;
 
-      py = y.fortran_vec ();
-      pydot = ydot.fortran_vec ();
       pinfo = info.fortran_vec ();
       piwork = iwork.fortran_vec ();
       prwork = rwork.fortran_vec ();
-      prpar = rpar.fortran_vec ();
-      pipar = ipar.fortran_vec ();
       pjroot = jroot.fortran_vec ();
 
       info(5) = 0;
       info(8) = 0;
       initialized = true;
     }
 
   if (restart)
@@ -390,19 +339,22 @@ DASRT::integrate (double tout)
 	{
 	  info(3) = 1;
 	  rwork(0) = stop_time;
 	}
       else
 	info(3) = 0;
     }
 
-  F77_XFCN (ddasrt, DASRT, (ddasrt_f, n, t, py, pydot, tout, pinfo,
+  double *dummy = 0;
+  int *idummy = 0;
+
+  F77_XFCN (ddasrt, DASRT, (ddasrt_f, n, t, px, pxdot, tout, pinfo,
 			    &rel_tol, &abs_tol, idid, prwork, lrw,
-			    piwork, liw, prpar, pipar, ddasrt_j,
+			    piwork, liw, dummy, idummy, ddasrt_j,
 			    ddasrt_g, ng, pjroot));
 
   if (f77_exception_encountered)
     {
       integration_error = true;
       (*current_liboctave_error_handler) ("unrecoverable error in dassl");
     }
   else
@@ -415,24 +367,20 @@ DASRT::integrate (double tout)
 	case 2: // The integration to TOUT was successfully completed
 	        // (T=TOUT) by stepping exactly to TOUT.
 	case 3: // The integration to TOUT was successfully completed
 	        // (T=TOUT) by stepping past TOUT.  Y(*) is obtained by
 	        // interpolation.  YPRIME(*) is obtained by interpolation.
 	case 5: // The integration to TSTOP was successfully completed
 	        // (T=TSTOP) by stepping to TSTOP within the
 	        // tolerance.  Must restart to continue.
-	  for (int i = 0; i < n; i++)
-	    x(i) = y(i,0);
 	  t = tout;
 	  break;
 
 	case 4: //  We've hit the stopping condition.
-          for (int i = 0; i < n; i++)
-            x(i) = y(i,0);
           break;
 
 	case -1: // A large amount of work has been expended.  (~500 steps).
 	case -2: // The error tolerances are too stringent.
 	case -3: // The local error test cannot be satisfied because you
 	         // specified a zero component in ATOL and the
 		 // corresponding computed solution component is zero.
 		 // Thus, a pure relative error test is impossible for
@@ -463,87 +411,91 @@ DASRT::integrate (double tout)
 
 DASRT_result
 DASRT::integrate (const ColumnVector& tout)
 {
   DASRT_result retval;
 
   Matrix x_out;
   Matrix xdot_out;
-  ColumnVector t_out;
+  ColumnVector t_out = tout;
 
   int oldj = 0;
 
   int n_out = tout.capacity ();
 
   if (n_out > 0 && n > 0)
     {
       x_out.resize (n_out, n);
       xdot_out.resize (n_out, n);
-      t_out.resize (n_out);
 
-      for (int j = 0; j < n_out; j++)
+      for (int i = 0; i < n; i++)
+	{
+	  x_out(0,i) = x(i);
+	  xdot_out(0,i) = xdot(i);
+	}
+
+      for (int j = 1; j < n_out; j++)
 	{
 	  integrate (tout(j));
+
 	  if (integration_error)
 	    {
 	      retval = DASRT_result (x_out, xdot_out, t_out);
 	      return retval;
 	    }
 
           if (idid == 4)
             t_out(j) = t;
           else
             t_out(j) = tout(j);
 
 	  for (int i = 0; i < n; i++)
 	    {
-	      x_out(j,i) = y(i,0);
-	      xdot_out(j,i) = ydot(i,0);
+	      x_out(j,i) = x(i);
+	      xdot_out(j,i) = xdot(i);
 	    }
 
           if (idid == 4)
 	    {
-	      oldj = j;
-	      j = n_out;
-	      x_out.resize (oldj+1, n);
-	      xdot_out.resize (oldj+1, n);
-	      t_out.resize (oldj+1);
+	      x_out.resize (j+1, n);
+	      xdot_out.resize (j+1, n);
+	      t_out.resize (j+1);
+	      break;
 	    }
 	}
     }
 
   retval = DASRT_result (x_out, xdot_out, t_out);
 
   return retval;
 }
 
 DASRT_result
 DASRT::integrate (const ColumnVector& tout, const ColumnVector& tcrit) 
 {
   DASRT_result retval;
 
   Matrix x_out;
   Matrix xdot_out;
-  ColumnVector t_outs;
+  ColumnVector t_outs = tout;
 
   int n_out = tout.capacity ();
 
   if (n_out > 0 && n > 0)
     {
       x_out.resize (n_out, n);
       xdot_out.resize (n_out, n);
-      t_outs.resize (n_out);
 
       int n_crit = tcrit.capacity ();
 
       if (n_crit > 0)
 	{
 	  int i_crit = 0;
-	  int i_out = 0;
+	  int i_out = 1;
 	  double next_crit = tcrit(0);
 	  double next_out;
 	  while (i_out < n_out)
 	    {
 	      bool do_restart = false;
 
 	      next_out = tout(i_out);
 	      if (i_crit < n_crit)
@@ -597,21 +549,23 @@ DASRT::integrate (const ColumnVector& to
 
               if (idid == 4)
                 t_out = t;
 
 	      if (save_output)
 		{
 		  for (int i = 0; i < n; i++)
 		    {
-		      x_out(i_out-1,i) = y(i,0);
-		      xdot_out(i_out-1,i) = ydot(i,0);
+		      x_out(i_out-1,i) = x(i);
+		      xdot_out(i_out-1,i) = xdot(i);
 		    }
+
                   t_outs(i_out-1) = t_out;
-                  if (idid ==4)
+
+                  if (idid == 4)
                     {
                       x_out.resize (i_out, n);
                       xdot_out.resize (i_out, n);
                       t_outs.resize (i_out);
                       i_out = n_out;
                     }
 		}
 
diff --git a/liboctave/DASRT.h b/liboctave/DASRT.h
--- a/liboctave/DASRT.h
+++ b/liboctave/DASRT.h
@@ -153,16 +153,18 @@ private:
 
 class
 DASRT : public DAERT, public DASRT_options
 {
 public:
 
   DASRT (void);
 
+  DASRT (const ColumnVector& state, double time, DAERTFunc& f);
+
   DASRT (const ColumnVector& state, const ColumnVector& deriv,
 	 double time, DAERTFunc& f);
 
   ~DASRT (void) { }
 
   void force_restart (void);
 
   void set_stop_time (double t);
@@ -184,48 +186,36 @@ private:
 
   bool restart;
 
   bool integration_error;
 
   int liw;  
   int lrw;
   int idid;
-  int ieform;
-  int lun;
 
   int n;
-  int npar;
   int ng;
 
   Array<int> info;
   Array<int> iwork;
-  Array<int> ipar;
   Array<int> jroot;
 
   Array<double> rwork;
-  Array<double> rpar;
-
-  Matrix y;
-  Matrix ydot;
 
   double abs_tol;
   double rel_tol;
 
-  double *py;
-  double *pydot;
+  double *px;
+  double *pxdot;
   int *pinfo;
   int *piwork;
   double *prwork;
-  double *prpar;
-  int *pipar;
   int *pjroot;
 
-  void init_work_size (int);
-
   void integrate (double t);
 };
 
 #endif
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
diff --git a/liboctave/DASSL.cc b/liboctave/DASSL.cc
--- a/liboctave/DASSL.cc
+++ b/liboctave/DASSL.cc
@@ -51,90 +51,87 @@ int F77_FUNC (ddassl, DDASSL) (dassl_fcn
 
 static DAEFunc::DAERHSFunc user_fun;
 static DAEFunc::DAEJacFunc user_jac;
 
 static int nn;
 
 DASSL::DASSL (void) : DAE ()
 {
-  stop_time_set = 0;
+  stop_time_set = false;
   stop_time = 0.0;
 
   liw = 0;
   lrw = 0;
 
-  sanity_checked = 0;
+  sanity_checked = false;
 
   info.resize (15);
 
   for (int i = 0; i < 15; i++)
     info.elem (i) = 0;
 }
 
 DASSL::DASSL (const ColumnVector& state, double time, DAEFunc& f)
   : DAE (state, time, f)
 {
   n = size ();
 
-  stop_time_set = 0;
+  stop_time_set = false;
   stop_time = 0.0;
 
   liw = 20 + n;
   lrw = 40 + 9*n + n*n;
 
-  sanity_checked = 0;
+  sanity_checked = false;
 
-  info.resize (15);
-
-  for (int i = 0; i < 15; i++)
-    info.elem (i) = 0;
+  info.resize (15, 0);
 }
 
 DASSL::DASSL (const ColumnVector& state, const ColumnVector& deriv,
-	  double time, DAEFunc& f)
+	      double time, DAEFunc& f)
   : DAE (state, deriv, time, f)
 {
   n = size ();
 
-  stop_time_set = 0;
+  stop_time_set = false;
   stop_time = 0.0;
 
   DAEFunc::set_function (f.function ());
   DAEFunc::set_jacobian_function (f.jacobian_function ());
 
   liw = 20 + n;
   lrw = 40 + 9*n + n*n;
 
-  sanity_checked = 0;
+  sanity_checked = false;
 
   info.resize (15);
 
   for (int i = 0; i < 15; i++)
     info.elem (i) = 0;
 }
 
 void
 DASSL::force_restart (void)
 {
   restart = 1;
-  integration_error = 0;
+  integration_error = false;
 }
 
 void
 DASSL::set_stop_time (double tt)
 {
-  stop_time_set = 1;
+  stop_time_set = true;
   stop_time = tt;
 }
 
 void
 DASSL::clear_stop_time (void)
 {
-  stop_time_set = 0;
+  stop_time_set = false;
 }
 
 int
 ddassl_f (const double& time, const double *state, const double *deriv,
 	  double *delta, int& ires, double *, int *)
 {
   // XXX FIXME XXX -- would be nice to avoid copying the data.
 
@@ -200,47 +197,47 @@ DASSL::do_integrate (double tout)
     }
 
   if (iwork.length () != liw)
     iwork.resize (liw);
 
   if (rwork.length () != lrw)
     rwork.resize (lrw);
 
-  integration_error = 0;
+  integration_error = false;
 
-  if (DAEFunc::jacobian_function ())
+  user_fun = DAEFunc::fun;
+  user_jac = DAEFunc::jac;
+
+  if (user_jac)
     info.elem (4) = 1;
   else
     info.elem (4) = 0;
 
-  double *px    = x.fortran_vec ();
+  double *px = x.fortran_vec ();
   double *pxdot = xdot.fortran_vec ();
 
   nn = n;
 
-  user_fun = DAEFunc::fun;
-  user_jac = DAEFunc::jac;
-
   if (! sanity_checked)
     {
       int ires = 0;
 
       ColumnVector res = (*user_fun) (x, xdot, t, ires);
 
       if (res.length () != x.length ())
 	{
 	  (*current_liboctave_error_handler)
 	    ("dassl: inconsistent sizes for state and residual vectors");
 
-	  integration_error = 1;
+	  integration_error = true;
 	  return retval;
 	}
 
-      sanity_checked = 1;
+      sanity_checked = true;
     }
   
   if (stop_time_set)
     {
       rwork.elem (0) = stop_time;
       info.elem (3) = 1;
     }
   else
@@ -275,31 +272,30 @@ DASSL::do_integrate (double tout)
 // again:
 
   F77_XFCN (ddassl, DDASSL, (ddassl_f, n, t, px, pxdot, tout, pinfo,
 			     rel_tol, abs_tol, idid, prwork, lrw,
 			     piwork, liw, dummy, idummy, ddassl_j));
 
   if (f77_exception_encountered)
     {
-      integration_error = 1;
+      integration_error = true;
       (*current_liboctave_error_handler) ("unrecoverable error in dassl");
     }
   else
     {
       switch (idid)
 	{
 	case 1: // A step was successfully taken in intermediate-output
 	        // mode. The code has not yet reached TOUT.
 	case 2: // The integration to TSTOP was successfully completed
 	        // (T=TSTOP) by stepping exactly to TSTOP.
 	case 3: // The integration to TOUT was successfully completed
 	        // (T=TOUT) by stepping past TOUT.  Y(*) is obtained by
 	        // interpolation.  YPRIME(*) is obtained by interpolation.
-
 	  retval = x;
 	  t = tout;
 	  break;
 
 	case -1: // A large amount of work has been expended.  (~500 steps).
 	case -2: // The error tolerances are too stringent.
 	case -3: // The local error test cannot be satisfied because you
 	         // specified a zero component in ATOL and the
@@ -317,17 +313,17 @@ DASSL::do_integrate (double tout)
 	case -11: // IRES equal to -2 was encountered and control is being
 		  // returned to the calling program.
 	case -12: // DDASSL failed to compute the initial YPRIME.
 	case -33: // The code has encountered trouble from which it cannot
 		  // recover. A message is printed explaining the trouble
 		  // and control is returned to the calling program. For
 		  // example, this occurs when invalid input is detected.
 	default:
-	  integration_error = 1;
+	  integration_error = true;
 	  break;
 	}
     }
 
   return retval;
 }
 
 Matrix
diff --git a/src/DLD-FUNCTIONS/dasrt.cc b/src/DLD-FUNCTIONS/dasrt.cc
--- a/src/DLD-FUNCTIONS/dasrt.cc
+++ b/src/DLD-FUNCTIONS/dasrt.cc
@@ -405,30 +405,23 @@ parameters for @code{dasrt}.\n\
     DASRT_ABORT2 ("expecting state vector as argument %d", argp);
 
   ColumnVector stateprime (args(argp++).vector_value ());
 
   if (error_state)
     DASRT_ABORT2 
        ("expecting time derivative of state vector as argument %d", argp);
 
-  ColumnVector old_out_times (args(argp++).vector_value ());
+  ColumnVector out_times (args(argp++).vector_value ());
 
   if (error_state)
     DASRT_ABORT2
 	("expecting output time vector as %s argument %d", argp);
 
-  double tzero = old_out_times (0);
-
-  int ol = old_out_times.length ();
-
-  ColumnVector out_times (ol-1, 0.0);
-
-  for (int i = 1; i < ol; i++)
-    out_times(i-1) = old_out_times(i);
+  double tzero = out_times (0);
 
   ColumnVector crit_times;
 
   bool crit_times_set = false;
 
   if (argp < nargin)
     {
       crit_times = ColumnVector (args(argp++).vector_value ());
@@ -454,51 +447,19 @@ parameters for @code{dasrt}.\n\
 
   if (crit_times_set)
     output = dae.integrate (out_times, crit_times);
   else
     output = dae.integrate (out_times);
 
   if (! error_state)
     {
-      ColumnVector old_output_times = output.times ();
-
-      Matrix old_output_deriv = output.deriv ();
-      Matrix old_output_state = output.state ();
-
-      int lstuff = old_output_times.length ();
-      int lstate = state.length ();
-
-      ColumnVector output_times (lstuff+1, 0.0);
-
-      Matrix output_deriv (lstuff+1, lstate, 0.0);
-      Matrix output_state (lstuff+1, lstate, 0.0);
-
-      output_times(0) = tzero;
-
-      for (int i = 0; i < lstate; i++)
-	{
-	  output_deriv(0,i) = stateprime(i);
-	  output_state(0,i) = state(i);
-	}
-
-      for (int i = 0; i < lstuff; i++)
-	{
-	  output_times(i+1) = old_output_times(i);
-
-	  for (int j = 0; j < lstate; j++)
-	    {
-	      output_deriv(i+1,j) = old_output_deriv(i,j);
-	      output_state(i+1,j) = old_output_state(i,j);
-	    }
-	}
-
-      retval(2) = output_times;
-      retval(1) = output_deriv;
-      retval(0) = output_state;
+      retval(2) = output.times ();
+      retval(1) = output.deriv ();
+      retval(0) = output.state ();
     }
   else
     {
       DASRT_ABORT1("something wicked has occurred!");
       // print_usage ("dasrt");
     }
 
   unwind_protect::run_frame ("Fdasrt");
