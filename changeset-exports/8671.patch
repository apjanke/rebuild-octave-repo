# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1233780804 18000
#      Wed Feb 04 15:53:24 2009 -0500
# Node ID d7128ae51e44f4f5547e7481f3f5e3cb9f4a34ad
# Parent  6f5b2835325cd17552ea2f5f085c066f1518a45f
undo changeset 4238f2600a17

diff --git a/liboctave/Array-str.cc b/liboctave/Array-str.cc
--- a/liboctave/Array-str.cc
+++ b/liboctave/Array-str.cc
@@ -19,24 +19,24 @@ along with Octave; see the file COPYING.
 <http://www.gnu.org/licenses/>.
 
 */
 
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
-#include <string>
-
 // Instantiate Arrays of strings.
 
 #include "Array.h"
 #include "Array.cc"
 #include "oct-sort.cc"
 
+#include <string>
+
 INSTANTIATE_ARRAY_SORT (std::string);
 
 INSTANTIATE_ARRAY (std::string, OCTAVE_API);
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,14 +1,8 @@
-2009-02-04  Jaroslav Hajek  <highegg@gmail.com>
-
-	* str-vec.h (string_vector::sort): Remove implementation.
-	* str-vec.cc (string_vector::sort): Move here. Use in-place sorting.
-	* Array-str.cc: Fix order of header files.
-
 2009-02-04  Jaroslav Hajek  <highegg@gmail.com>
 
 	* oct-locbuf.h: Specialize OCTAVE_LOCAL_BUFFER to use chunked
 	allocation for pointers and const pointers.
 
 2009-02-03  Benjamin Lindner  <lindnerben@gmx.net>
 	
 	* Makefile.in: Add missing library reference.
diff --git a/liboctave/str-vec.cc b/liboctave/str-vec.cc
--- a/liboctave/str-vec.cc
+++ b/liboctave/str-vec.cc
@@ -79,28 +79,16 @@ string_vector::string_vector (const char
 string_vector::string_vector (const char * const *s, octave_idx_type n)
   : Array<std::string> (n)
 {
   for (octave_idx_type i = 0; i < n; i++)
     elem (i) = s[i];
 }
 
 string_vector&
-string_vector::sort (bool make_uniq)
-{
-  // Don't use Array<std::string>::sort () to allow sorting in place.
-  octave_sort<std::string> lsort;
-  lsort.sort (Array<std::string>::fortran_vec (), length ());
-
-  if (make_uniq)
-    uniq ();
-
-  return *this;
-}
-string_vector&
 string_vector::uniq (void)
 {
   octave_idx_type len = length ();
 
   if (len > 0)
     {
       octave_idx_type k = 0;
 
diff --git a/liboctave/str-vec.h b/liboctave/str-vec.h
--- a/liboctave/str-vec.h
+++ b/liboctave/str-vec.h
@@ -79,17 +79,25 @@ public:
 
     return longest;
   }
 
   std::string& operator[] (octave_idx_type i) { return Array<std::string>::elem (i); }
 
   std::string operator[] (octave_idx_type i) const { return Array<std::string>::elem (i); }
 
-  string_vector& sort (bool make_uniq = false);
+  string_vector& sort (bool make_uniq = false)
+  {
+    Array<std::string>::sort ();
+
+    if (make_uniq)
+      uniq ();
+
+    return *this;
+  }
 
   string_vector& uniq (void);
 
   string_vector& append (const std::string& s);
 
   string_vector& append (const string_vector& sv);
 
   char **c_str_vec (void) const;
