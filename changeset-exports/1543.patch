# HG changeset patch
# User jwe
# Date 812958847 0
#      Fri Oct 06 05:54:07 1995 +0000
# Node ID d6e96e0bc681e19411439de58b7b2b166770a359
# Parent  5bd8c07faacf03389a586cb24a749ca213ebcb6b
[project @ 1995-10-06 05:49:21 by jwe]

diff --git a/liboctave/CmplxSVD.cc b/liboctave/CmplxSVD.cc
--- a/liboctave/CmplxSVD.cc
+++ b/liboctave/CmplxSVD.cc
@@ -26,28 +26,55 @@ Software Foundation, 59 Temple Place - S
 #endif
 
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
 #include "CmplxSVD.h"
 #include "f77-uscore.h"
+#include "lo-error.h"
 #include "mx-inlines.cc"
 
 extern "C"
 {
   int F77_FCN (zgesvd, ZGESVD) (const char*, const char*, const int&,
 				const int&, Complex*, const int&,
 				double*, Complex*, const int&,
 				Complex*, const int&, Complex*,
 				const int&, double*, int&, long,
 				long);
 }
 
+ComplexMatrix
+ComplexSVD::left_singular_matrix (void) const
+{
+  if (type == SVD::sigma_only)
+    {
+      (*current_liboctave_error_handler)
+	("ComplexSVD: U not computed because type == SVD::sigma_only");
+      return ComplexMatrix ();
+    }
+  else
+    return left_sm;
+}
+
+ComplexMatrix
+ComplexSVD::right_singular_matrix (void) const
+{
+  if (type == SVD::sigma_only)
+    {
+      (*current_liboctave_error_handler)
+	("ComplexSVD: V not computed because type == SVD::sigma_only");
+      return ComplexMatrix ();
+    }
+  else
+    return right_sm;
+}
+
 int
 ComplexSVD::init (const ComplexMatrix& a, SVD::type svd_type)
 {
   int info;
 
   int m = a.rows ();
   int n = a.cols ();
 
@@ -59,40 +86,56 @@ ComplexSVD::init (const ComplexMatrix& a
   char *jobu = "A";
   char *jobv = "A";
 
   int ncol_u = m;
   int nrow_vt = n;
   int nrow_s = m;
   int ncol_s = n;
 
-  if (svd_type == SVD::economy)
+  switch (svd_type)
     {
-      jobu = jobv = "S";
+    case SVD::economy:
+      jobu = jobv ="S";
       ncol_u = nrow_vt = nrow_s = ncol_s = min_mn;
+      break;
+
+    case SVD::sigma_only:
+      jobu = jobv ="N";
+      ncol_u = nrow_vt = 0;
+      break;
+
+    default:
+      break;
     }
 
-  Complex *u = new Complex[m * ncol_u];
+  Complex *u = (ncol_u > 0 ? new Complex[m * ncol_u] : 0);
   double *s_vec  = new double[min_mn];
-  Complex *vt = new Complex[nrow_vt * n];
+  Complex *vt = (nrow_vt > 0 ? new Complex[nrow_vt * n] : 0);
 
   int lwork = 2*min_mn + max_mn;
   Complex *work = new Complex[lwork];
 
   int lrwork = 5*max_mn;
   double *rwork = new double[lrwork];
 
   F77_FCN (zgesvd, ZGESVD) (jobu, jobv, m, n, tmp_data, m, s_vec, u,
 			    m, vt, nrow_vt, work, lwork, rwork, info,
 			    1L, 1L);
 
-  left_sm = ComplexMatrix (u, m, ncol_u);
+  if (ncol_u > 0)
+    left_sm = ComplexMatrix (u, m, ncol_u);
+
   sigma = DiagMatrix (s_vec, nrow_s, ncol_s);
-  ComplexMatrix vt_m (vt, nrow_vt, n);
-  right_sm = vt_m.hermitian ();
+
+  if (nrow_vt > 0)
+    {
+      ComplexMatrix vt_m (vt, nrow_vt, n);
+      right_sm = vt_m.hermitian ();
+    }
 
   delete [] tmp_data;
   delete [] work;
 
   return info;
 }
 
 /*
diff --git a/liboctave/CmplxSVD.h b/liboctave/CmplxSVD.h
--- a/liboctave/CmplxSVD.h
+++ b/liboctave/CmplxSVD.h
@@ -67,19 +67,19 @@ public:
       left_sm = a.left_sm;
       right_sm = a.right_sm;
 
       return *this;
     }
 
   DiagMatrix singular_values (void) const { return sigma; }
 
-  ComplexMatrix left_singular_matrix (void) const { return left_sm; }
+  ComplexMatrix left_singular_matrix (void);
 
-  ComplexMatrix right_singular_matrix (void) const { return right_sm; }
+  ComplexMatrix right_singular_matrix (void);
 
   friend ostream&  operator << (ostream& os, const ComplexSVD& a);
 
 private:
 
   int init (const ComplexMatrix& a, SVD::type svd_type = SVD::std);
 
   DiagMatrix sigma;
diff --git a/liboctave/dbleSVD.cc b/liboctave/dbleSVD.cc
--- a/liboctave/dbleSVD.cc
+++ b/liboctave/dbleSVD.cc
@@ -37,16 +37,42 @@ extern "C"
 {
   int F77_FCN (dgesvd, DGESVD) (const char*, const char*, const int&,
 				const int&, double*, const int&,
 				double*, double*, const int&, double*,
 				const int&, double*, const int&, int&,
 				long, long);
 }
 
+Matrix
+left_singular_matrix (void) const
+{
+  if (type == SVD::sigma_only)
+    {
+      (*current_liboctave_error_handler)
+	("ComplexSVD: U not computed because type == SVD::sigma_only");
+      return Matrix ();
+    }
+  else
+    return left_sm;
+}
+
+Matrix
+right_singular_matrix (void) const
+{
+  if (type == SVD::sigma_only)
+    {
+      (*current_liboctave_error_handler)
+	("ComplexSVD: V not computed because type == SVD::sigma_only");
+      return Matrix ();
+    }
+  else
+    return right_sm;
+}
+
 int
 SVD::init (const Matrix& a, SVD::type svd_type)
 {
   int info;
 
   int m = a.rows ();
   int n = a.cols ();
 
@@ -58,39 +84,55 @@ SVD::init (const Matrix& a, SVD::type sv
   char *jobu = "A";
   char *jobv = "A";
 
   int ncol_u = m;
   int nrow_vt = n;
   int nrow_s = m;
   int ncol_s = n;
 
-  if (svd_type == SVD::economy)
+  switch (svd_type)
     {
+    case SVD::economy:
       jobu = jobv ="S";
       ncol_u = nrow_vt = nrow_s = ncol_s = min_mn;
+      break;
+
+    case SVD::sigma_only:
+      jobu = jobv ="N";
+      ncol_u = nrow_vt = 0;
+      break;
+
+    default:
+      break;
     }
 
-  double *u = new double[m * ncol_u];
+  double *u = (ncol_u > 0 ? new double[m * ncol_u] : 0);
   double *s_vec  = new double[min_mn];
-  double *vt = new double[nrow_vt * n];
+  double *vt = (ncol_vt > 0 ? new double[nrow_vt * n] : 0);
 
   int tmp1 = 3*min_mn + max_mn;
   int tmp2 = 5*min_mn - 4;
   int lwork = tmp1 > tmp2 ? tmp1 : tmp2;
   double *work = new double[lwork];
 
   F77_FCN (dgesvd, DGESVD) (jobu, jobv, m, n, tmp_data, m, s_vec, u,
 			    m, vt, nrow_vt, work, lwork, info, 1L,
 			    1L);
 
-  left_sm = Matrix (u, m, ncol_u);
+  if (ncol_u > 0)
+    left_sm = Matrix (u, m, ncol_u);
+
   sigma = DiagMatrix (s_vec, nrow_s, ncol_s);
-  Matrix vt_m (vt, nrow_vt, n);
-  right_sm = vt_m.transpose ();
+
+  if (nrow_vt > 0)
+    {
+      Matrix vt_m (vt, nrow_vt, n);
+      right_sm = vt_m.transpose ();
+    }
 
   delete [] tmp_data;
   delete [] work;
 
   return info;
 }
 
 ostream&
diff --git a/liboctave/dbleSVD.h b/liboctave/dbleSVD.h
--- a/liboctave/dbleSVD.h
+++ b/liboctave/dbleSVD.h
@@ -69,19 +69,19 @@ public:
       left_sm = a.left_sm;
       right_sm = a.right_sm;
 
       return *this;
     }
 
   DiagMatrix singular_values (void) const { return sigma; }
 
-  Matrix left_singular_matrix (void) const { return left_sm; }
+  Matrix left_singular_matrix (void);
 
-  Matrix right_singular_matrix (void) const { return right_sm; }
+  Matrix right_singular_matrix (void);
 
   friend ostream&  operator << (ostream& os, const SVD& a);
 
 private:
 
   int init (const Matrix& a, type svd_type = std);
 
   DiagMatrix sigma;
diff --git a/src/svd.cc b/src/svd.cc
--- a/src/svd.cc
+++ b/src/svd.cc
@@ -61,17 +61,18 @@ X may not contain any Inf or NaN values.
 
   int arg_is_empty = empty_arg ("svd", arg.rows (), arg.columns ());
 
   if (arg_is_empty < 0)
     return retval;
   else if (arg_is_empty > 0)
     return Octave_object (3, Matrix ());
 
-  SVD::type type = (nargin == 2) ? SVD::economy : SVD::std;
+  SVD::type type = ((nargout == 1) ? SVD::sigma_only
+		    : (nargin == 2) ? SVD::economy : SVD::std);
 
   if (arg.is_real_type ())
     {
       Matrix tmp = arg.matrix_value ();
 
       if (! error_state)
 	{
 	  if (any_element_is_inf_or_nan (tmp))
