# HG changeset patch
# User Rik <rik@octave.org>
# Date 1455667316 28800
#      Tue Feb 16 16:01:56 2016 -0800
# Node ID 85d8280c64f4331e2e8880e5a255d96293bb016a
# Parent  bc536eff5eab63488caf0476f9fa1a9f8e3aa093
Return NaN for norm (..., +/-Inf) if input contains NaN (bug #32855).

* oct-norm.cc (norm_accumulator_inf::accum, norm_accumulator_minf::accum):
Use xisnan to check for NaN value before continuing to accumulate.

diff --git a/liboctave/numeric/oct-norm.cc b/liboctave/numeric/oct-norm.cc
--- a/liboctave/numeric/oct-norm.cc
+++ b/liboctave/numeric/oct-norm.cc
@@ -174,32 +174,38 @@ template <typename R>
 class norm_accumulator_inf
 {
   R max;
 public:
   norm_accumulator_inf () : max (0) {}
   template <typename U>
   void accum (U val)
   {
-    max = std::max (max, std::abs (val));
+    if (xisnan (val))
+      max = octave_NaN;
+    else
+      max = std::max (max, std::abs (val));
   }
   operator R () { return max; }
 };
 
 // norm accumulator for the -inf pseudonorm (min abs value)
 template <typename R>
 class norm_accumulator_minf
 {
   R min;
 public:
   norm_accumulator_minf () : min (octave_Inf) {}
   template <typename U>
   void accum (U val)
   {
-    min = std::min (min, std::abs (val));
+    if (xisnan (val))
+      min = octave_NaN;
+    else
+      min = std::min (min, std::abs (val));
   }
   operator R () { return min; }
 };
 
 // norm accumulator for the 0-pseudonorm (hamming distance)
 template <typename R>
 class norm_accumulator_0
 {
