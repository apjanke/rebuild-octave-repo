# HG changeset patch
# User jwe
# Date 1180640471 0
#      Thu May 31 19:41:11 2007 +0000
# Node ID 9a8861bc2b343592237dc79ac705a732fc5c10db
# Parent  43fdc8e8ed28065cc0756cbb054d4b936ea827a6
[project @ 2007-05-31 19:39:12 by jwe]

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,15 @@
+2007-05-31  Michael Goffioul  <michael.goffioul@swing.be>
+
+	* DLD-FUNCTIONS/symrcm.cc: Use ! instead of "not".
+
+	* sysdep.cc (same_file_internal) [OCTAVE_USE_WINDOWS_API]:
+	Use INVALID_HANDLE_VALUE, not INVALID_FILE_HANDLE.
+
 2007-05-28  G. D. McBain  <geordie_mcbain@yahoo.com.au>
 
 	* ov-list.cc (append): Doc fix.
 
 2007-05-28  John W. Eaton  <jwe@octave.org>
 
 	* pt-loop.cc (DO_ND_LOOP): Avoid parser problem with obsolete g++.
 
@@ -600,17 +607,17 @@ 2007-02-27  David Bateman  <dbateman@fre
 	(rethrow_error, Frethrow, Flasterror): New functions.
 
         * DLD-FUNCTIONS/regexp.cc (octcellregexp): Wrapper to octregexp
         function for cases when string or pattern are cell arrays
         (Fregexp, Fregexpi): Use them.
         (octregexprep): New function with functionality of old Fregexprep.
         (Fregexprep): Treat cell arguments.
 
-2007-02-26  From Michael Goffioul  <michael.goffioul@swing.be>
+2007-02-26  Michael Goffioul  <michael.goffioul@swing.be>
 
 	* Makefile.in: Use $(LN_S) instead of ln or ln -s.
 
 	* DLD-FUNCTIONS/getrusage.cc: Undef min after including windows.h.
 
 2007-02-25  John W. Eaton  <jwe@octave.org>
 
 	* DLD-FUNCTIONS/interpn.cc: Include dNDArray.h, not dMatrix.cc.
diff --git a/src/DLD-FUNCTIONS/symrcm.cc b/src/DLD-FUNCTIONS/symrcm.cc
--- a/src/DLD-FUNCTIONS/symrcm.cc
+++ b/src/DLD-FUNCTIONS/symrcm.cc
@@ -275,17 +275,17 @@ Mathematics, ISBN 0-13-165274-5, 1981.\n
 	
   boolNDArray btmp (dim_vector (1, N), false);
   bool *visit = btmp.fortran_vec ();
 
   do
     {
       // locate an unvisited starting node of the graph
       for (i = 0; i < N; i++)
-	if (not visit[i]) 
+	if (! visit[i]) 
 	  break;
 
       // locate a probably better starting node
       v.id = find_starting_node (N, ridx, cidx, ridx2, cidx2, D, i);
 		
       // mark the node as visited and enqueue it (a starting node
       // for the BFS). Since the node will be a root of a spanning
       // tree, its dist is 0.
@@ -298,17 +298,17 @@ Mathematics, ISBN 0-13-165274-5, 1981.\n
       // root) for determining the bandwidth of the computed
       // permutation P
       Bsub = 0;
       // min. dist. to the root is 0
       level = 0;
       // the root is the first/only node on level 0
       level_N = 1;
 	
-      while (not Q_empty (Q, N, qh, qt))
+      while (! Q_empty (Q, N, qh, qt))
 	{
 	  v = Q_deq (Q, N, qh, qt);
 	  i = v.id;
 
 	  c++;
 
 	  // for computing the inverse permutation P where
 	  // A(inv(P),inv(P)) or P'*A*P is banded
@@ -325,73 +325,73 @@ Mathematics, ISBN 0-13-165274-5, 1981.\n
 
 	  OCTAVE_QUIT;
 	  while (j1 < cidx[i+1] || j2 < cidx2[i+1])
 	    {
 	      OCTAVE_QUIT;
 	      if (j1 == cidx[i+1])
 		{
 		  octave_idx_type r2 = ridx2[j2++];
-		  if (not visit[r2])
+		  if (! visit[r2])
 		    {
 		      // the distance of node j is dist(i)+1
 		      w.id = r2;
 		      w.deg = D[r2];
 		      w.dist = v.dist+1;
 		      H_insert(S, s, w);
 		      visit[r2] = true;
 		    }
 		}
 	      else if (j2 == cidx2[i+1])
 		{
 		  octave_idx_type r1 = ridx[j1++];
-		  if (not visit[r1])
+		  if (! visit[r1])
 		    {
 		      w.id = r1;
 		      w.deg = D[r1];
 		      w.dist = v.dist+1;
 		      H_insert(S, s, w);
 		      visit[r1] = true;
 		    }
 		}
 	      else
 		{
 		  octave_idx_type r1 = ridx[j1];
 		  octave_idx_type r2 = ridx2[j2];
 		  if (r1 <= r2)
 		    {
-		      if (not visit[r1])
+		      if (! visit[r1])
 			{
 			  w.id = r1;
 			  w.deg = D[r1];
 			  w.dist = v.dist+1;
 			  H_insert(S, s, w);
 			  visit[r1] = true;
 			}
 		      j1++;
 		      if (r1 == r2)
 			j2++;
 		    }
 		  else
 		    {
-		      if (not visit[r2])
+		      if (! visit[r2])
 			{
 			  w.id = r2;
 			  w.deg = D[r2];
 			  w.dist = v.dist+1;
 			  H_insert(S, s, w);
 			  visit[r2] = true;
 			}
 		      j2++;
 		    }
 		}
 	    }
 
 	  // add the neighbors to the queue (sorted by node degree)
-	  while (not H_empty(S, s))
+	  while (! H_empty(S, s))
 	    {
 	      OCTAVE_QUIT;
 
 	      // locate a neighbor of i with minimal degree in O(log(N))
 	      v = H_remove_min(S, s, 1);
 	
 	      // entered the BFS a new level?
 	      if (v.dist > level)
@@ -559,17 +559,17 @@ find_starting_node(octave_idx_type N, co
 
   // distance level
   level = 0;
   // current largest "eccentricity"
   max_dist = 0;
 
   for (;;)
     {
-      while (not Q_empty(Q, N, qh, qt))
+      while (! Q_empty(Q, N, qh, qt))
 	{
 	  v = Q_deq(Q, N, qh, qt);
 
 	  if (v.dist > x.dist || (v.id != x.id && v.deg > x.deg))
 	    x = v;
 
 	  i = v.id;
 
@@ -578,33 +578,33 @@ find_starting_node(octave_idx_type N, co
 	  octave_idx_type j2 = cidx2[i];
 	  while (j1 < cidx[i+1] || j2 < cidx2[i+1])
 	    {
 	      OCTAVE_QUIT;
 
 	      if (j1 == cidx[i+1])
 		{
 		  octave_idx_type r2 = ridx2[j2++];
-		  if (not visit[r2])
+		  if (! visit[r2])
 		    {
 		      // the distance of node j is dist(i)+1
 		      w.id = r2;
 		      w.deg = D[r2];
 		      w.dist = v.dist+1;
 		      Q_enq(Q, N, qh, qt, w);
 		      visit[r2] = true;
 
 		      if (w.dist > level)
 			level = w.dist;
 		    }
 		}
 	      else if (j2 == cidx2[i+1])
 		{
 		  octave_idx_type r1 = ridx[j1++];
-		  if (not visit[r1])
+		  if (! visit[r1])
 		    {
 		      // the distance of node j is dist(i)+1
 		      w.id = r1;
 		      w.deg = D[r1];
 		      w.dist = v.dist+1;
 		      Q_enq(Q, N, qh, qt, w);
 		      visit[r1] = true;
 
@@ -613,34 +613,34 @@ find_starting_node(octave_idx_type N, co
 		    }
 		}
 	      else
 		{
 		  octave_idx_type r1 = ridx[j1];
 		  octave_idx_type r2 = ridx2[j2];
 		  if (r1 <= r2)
 		    {
-		      if (not visit[r1])
+		      if (! visit[r1])
 			{
 			  w.id = r1;
 			  w.deg = D[r1];
 			  w.dist = v.dist+1;
 			  Q_enq(Q, N, qh, qt, w);
 			  visit[r1] = true;
 
 			  if (w.dist > level)
 			    level = w.dist;
 			}
 		      j1++;
 		      if (r1 == r2)
 			j2++;
 		    }
 		  else
 		    {
-		      if (not visit[r2])
+		      if (! visit[r2])
 			{
 			  w.id = r2;
 			  w.deg = D[r2];
 			  w.dist = v.dist+1;
 			  Q_enq(Q, N, qh, qt, w);
 			  visit[r2] = true;
 
 			  if (w.dist > level)
diff --git a/src/sysdep.cc b/src/sysdep.cc
--- a/src/sysdep.cc
+++ b/src/sysdep.cc
@@ -239,23 +239,23 @@ same_file_internal (const std::string& f
   HANDLE hfile2;
   
   BY_HANDLE_FILE_INFORMATION hfi1;
   BY_HANDLE_FILE_INFORMATION hfi2;
   
   hfile1 = CreateFile (file1.c_str (), 0, FILE_SHARE_READ, 0,
 		       OPEN_EXISTING, FILE_ATTRIBUTE_NORMAL, 0); 
 
-  if (hfile1 == INVALID_FILE_HANDLE)
+  if (hfile1 == INVALID_HANDLE_VALUE)
     return false;
   
   hfile2 = CreateFile (file2.c_str (), 0, FILE_SHARE_READ, 0,
 		       OPEN_EXISTING, FILE_ATTRIBUTE_NORMAL, 0);
 
-  if (hfile2 == INVALID_FILE_HANDLE)
+  if (hfile2 == INVALID_HANDLE_VALUE)
     {
       CloseHandle (hfile1);
       return false;
     }
   
   if (! GetFileInformationByHandle (hfile1, &hfi1))
     {
       CloseHandle (hfile1);
