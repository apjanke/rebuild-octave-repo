# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1285840800 14400
#      Thu Sep 30 06:00:00 2010 -0400
# Node ID e678346a47d94855f59489bb4dc75232d5e0c817
# Parent  9bf6c927c2675449d85b7b7ec2c8a736c51c1e37
toplev.cc, sighandlers.cc, utils.cc, octave.cc, pt-eval.cc pt-idx.cc: Octave_map to octave_map and octave_scalar_map conversion

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,19 @@
+2010-09-30  John W. Eaton  <jwe@octave.org>
+
+	* toplev.cc (octave_config_info): Use Octave_scalar_map instead
+	of Octave_map.
+	* sighandlers.cc (make_sig_struct, FSIG): Likewise.
+
+	* utils.cc (decode_subscripts): Use octave_map instead of Octave_map.
+	* octave.cc (F__version_info__): Likewise.
+	* pt-eval.cc (visit_complex_for_command): Likewise.
+	* pt-idx.cc (tree_index_expression::lvalue): Likewise.
+
 2010-09-30  John W. Eaton  <jwe@octave.org>
 
 	* DLD-FUNCTIONS/gcd.cc: Style fixes.
 
 2010-09-30  John W. Eaton  <jwe@octave.org>
 
 	* oct-errno.cc.in (octave_errno::do_list, octave_errno::list):
 	Use octave_scalar_map instead of Octave_map.
diff --git a/src/octave.cc b/src/octave.cc
--- a/src/octave.cc
+++ b/src/octave.cc
@@ -222,17 +222,17 @@ initialize_pathsearch (void)
 DEFUN (__version_info__, args, ,
   "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {retval =} __version_info__ (@var{name}, @var{version}, @var{release}, @var{date})\n\
 Undocumented internal function.\n\
 @end deftypefn")
 {
   octave_value retval;
 
-  static Octave_map vinfo;
+  static octave_map vinfo;
 
   int nargin = args.length ();
 
   if (nargin == 4)
     {
       if (vinfo.nfields () == 0)
         {
           vinfo.assign ("Name", args (0));
diff --git a/src/pt-eval.cc b/src/pt-eval.cc
--- a/src/pt-eval.cc
+++ b/src/pt-eval.cc
@@ -446,17 +446,17 @@ tree_evaluator::visit_complex_for_comman
       tree_expression *elt = *p++;
 
       octave_lvalue val_ref = elt->lvalue ();
 
       elt = *p;
 
       octave_lvalue key_ref = elt->lvalue ();
 
-      const Octave_map tmp_val = rhs.map_value ();
+      const octave_map tmp_val = rhs.map_value ();
 
       tree_statement_list *loop_body = cmd.body ();
 
       string_vector keys = tmp_val.keys ();
 
       octave_idx_type nel = keys.numel ();
 
       for (octave_idx_type i = 0; i < nel; i++)
diff --git a/src/pt-idx.cc b/src/pt-idx.cc
--- a/src/pt-idx.cc
+++ b/src/pt-idx.cc
@@ -530,20 +530,20 @@ tree_index_expression::lvalue (void)
                   {
                     octave_value_list pidx = idx.back ();
 
                     if (tmp.is_undefined ())
                       {
                         if (pidx.has_magic_colon ())
                           gripe_invalid_inquiry_subscript ();
                         else
-                          tmp = Octave_map ();
+                          tmp = octave_scalar_map ();
                       }
                     else if (autoconv)
-                      tmp = Octave_map ();
+                      tmp = octave_scalar_map ();
 
                     retval.numel (tmp.numel (pidx));
 
                     tmpi = i-1;
                     tmpidx.push_back (tidx);
                   }
                 else
                   {
diff --git a/src/sighandlers.cc b/src/sighandlers.cc
--- a/src/sighandlers.cc
+++ b/src/sighandlers.cc
@@ -657,20 +657,20 @@ install_signal_handlers (void)
 #endif
 
 #ifdef SIGXFSZ
   octave_set_signal_handler (SIGXFSZ, generic_sig_handler);
 #endif
 
 }
 
-static Octave_map
+static octave_scalar_map
 make_sig_struct (void)
 {
-  Octave_map m;
+  octave_scalar_map m;
 
 #ifdef SIGABRT
   m.assign ("ABRT", SIGABRT);
 #endif
 
 #ifdef SIGALRM
   m.assign ("ALRM", SIGALRM);
 #endif
@@ -944,17 +944,17 @@ DEFUN (SIG, args, ,
 @deftypefn {Built-in Function} {} SIG ()\n\
 Return a structure containing Unix signal names and their defined values.\n\
 @end deftypefn")
 {
   octave_value retval;
 
   if (args.length () == 0)
     {
-      static Octave_map m = make_sig_struct ();
+      static octave_scalar_map m = make_sig_struct ();
 
       retval = m;
     }
   else
     print_usage ();
 
   return retval;
 }
diff --git a/src/toplev.cc b/src/toplev.cc
--- a/src/toplev.cc
+++ b/src/toplev.cc
@@ -1155,17 +1155,17 @@ specified option.\n\
 
 #if defined (ENABLE_DYNAMIC_LINKING)
   bool octave_supports_dynamic_linking = true;
 #else
   bool octave_supports_dynamic_linking = false;
 #endif
 
   static bool initialized = false;
-  static Octave_map m;
+  static octave_scalar_map m;
 
   struct conf_info_struct
   {
     bool subst_home;
     const char *key;
     const char *val;
   };
 
@@ -1356,19 +1356,19 @@ specified option.\n\
         {
           const conf_info_struct& elt = conf_info[i++];
 
           const char *key = elt.key;
 
           if (key)
             {
               if (elt.subst_home)
-                m.assign (key, octave_value (subst_octave_home (elt.val)));
+                m.assign (key, subst_octave_home (elt.val));
               else
-                m.assign (key, octave_value (elt.val));
+                m.assign (key, elt.val);
             }
           else
             break;
         }
 
       bool unix_system = true;
       bool mac_system = false;
       bool windows_system = false;
diff --git a/src/utils.cc b/src/utils.cc
--- a/src/utils.cc
+++ b/src/utils.cc
@@ -1031,27 +1031,29 @@ dims_to_numel (const dim_vector& dims, c
   return retval;
 }
 
 void
 decode_subscripts (const char* name, const octave_value& arg,
                    std::string& type_string,
                    std::list<octave_value_list>& idx)
 {
-  Octave_map m = arg.map_value ();
+  const octave_map m = arg.map_value ();
 
   if (! error_state
       && m.nfields () == 2 && m.contains ("type") && m.contains ("subs"))
     {
-      Cell& type = m.contents ("type");
-      Cell& subs = m.contents ("subs");
+      const Cell type = m.contents ("type");
+      const Cell subs = m.contents ("subs");
 
-      type_string = std::string (type.length(), '\0');
+      octave_idx_type nel = type.numel ();
 
-      for (int k = 0; k < type.length (); k++)
+      type_string = std::string (nel, '\0');
+
+      for (int k = 0; k < nel; k++)
         {
           std::string item = type(k).string_value ();
 
           if (! error_state)
             {
               if (item == "{}")
                 type_string[k] = '{';
               else if (item == "()")
