# HG changeset patch
# User jwe
# Date 815119487 0
#      Tue Oct 31 06:04:47 1995 +0000
# Node ID 27f5ac98fc4a59c6d5016a8e654e82122ca38145
# Parent  dd087a402811c9d571d03737bdeae095fe3677bd
[project @ 1995-10-31 06:04:47 by jwe]

diff --git a/src/help.cc b/src/help.cc
--- a/src/help.cc
+++ b/src/help.cc
@@ -47,16 +47,17 @@ Software Foundation, 59 Temple Place - S
 #include "octave.h"
 #include "pager.h"
 #include "pathsearch.h"
 #include "sighandlers.h"
 #include "symtab.h"
 #include "tree-const.h"
 #include "tree-expr.h"
 #include "tree-expr.h"
+#include "unwind-prot.h"
 #include "user-prefs.h"
 #include "utils.h"
 #include "variables.h"
 
 static help_list operators[] =
 {
   { "!",
     "Logical not operator.  See also `~'.\n", },
@@ -723,16 +724,21 @@ print cryptic yet witty messages")
 
 DEFUN_TEXT ("type", Ftype, Stype, 11,
   "type NAME ...]\n\
 \n\
 display the definition of each NAME that refers to a function")
 {
   Octave_object retval;
 
+  begin_unwind_frame ("Ftype");
+
+  unwind_protect_ptr (user_pref.ps4);
+  user_pref.ps4 = "";
+
   DEFINE_ARGV("type");
 
   if (argc > 1)
     {
       // XXX FIXME XXX -- we should really use getopt ()
 
       int quiet = 0;
       if (argv[1] && strcmp (argv[1], "-q") == 0)
@@ -854,16 +860,18 @@ display the definition of each NAME that
 	  delete [] s;
 	}
     }
   else
     print_usage ("type");
 
   DELETE_ARGV;
 
+  run_unwind_frame ("Ftype");
+
   return retval;
 }
 
 DEFUN_TEXT ("which", Fwhich, Swhich, 11,
   "which NAME ...\n\
 \n\
 display the type of each NAME.  If NAME is defined from an function\n\
 file, print the full name of the file.")
diff --git a/src/input.cc b/src/input.cc
--- a/src/input.cc
+++ b/src/input.cc
@@ -135,20 +135,16 @@ char *curr_fcn_file_name = 0;
 int reading_script_file = 0;
 
 // If we are reading from an M-file, this is it.
 FILE *ff_instream = 0;
 
 // Nonzero means we are using readline.
 int using_readline = 1;
 
-// Nonzero means commands are echoed as they are executed.
-// (--echo-commands; -x).
-int echo_input = 0;
-
 // Nonzero means this is an interactive shell.
 int interactive = 0;
 
 // Nonzero means the user forced this shell to be interactive (-i).
 int forced_interactive = 0;
 
 // Should we issue a prompt?
 int promptflag = 1;
@@ -436,17 +432,21 @@ decode_prompt_string (const char *string
 #endif
 
   return result;
 }
 
 static void
 do_input_echo (const char *input_string)
 {
-  if (echo_input)
+  int do_echo = reading_script_file ?
+    (user_pref.echo_executing_commands & ECHO_SCRIPTS)
+      : (user_pref.echo_executing_commands & ECHO_CMD_LINE);
+
+  if (do_echo)
     {
       ostrstream buf;
 
       if (forced_interactive)
 	{
 	  char *ps = (promptflag > 0) ? user_pref.ps1 : user_pref.ps2;
 	  char *prefix = decode_prompt_string (ps);
 	  buf << prefix;
@@ -1098,14 +1098,76 @@ maybe help in debugging function files")
   if (nargin == 0 || nargin == 1)
     retval = get_user_input (args, 1);
   else
     print_usage ("keyboard");
 
   return retval;
 }
 
+DEFUN_TEXT("echo", Fecho, Secho, 10,
+  "echo [options]\n\
+\n\
+  echo [on|off]         -- enable or disable echoing of commands as\n\
+                           they are executed in script files\n\
+\n\
+  echo [on all|off all] -- enable or disable echoing of commands as they\n\
+                           are executed in script files and functions\n\
+\n\
+Without any arguments, toggle the current echo state.")
+{
+  Octave_object retval;
+
+  DEFINE_ARGV ("echo");
+
+  switch (argc)
+    {
+    case 1:
+      {
+	int echo_cmds = user_pref.echo_executing_commands;
+	if ((echo_cmds & ECHO_SCRIPTS) || (echo_cmds & ECHO_FUNCTIONS))
+	  bind_builtin_variable ("echo_executing_commands", ECHO_OFF);
+	else
+	  bind_builtin_variable ("echo_executing_commands", ECHO_SCRIPTS);
+      }
+      break;
+
+    case 2:
+      {
+	char *arg = argv[1];
+	if (strcmp (arg, "on") == 0)
+	  bind_builtin_variable ("echo_executing_commands", ECHO_SCRIPTS);
+	else if (strcmp (arg, "on") == 0)
+	  bind_builtin_variable ("echo_executing_commands", ECHO_OFF);
+	else
+	  print_usage ("echo");
+      }
+      break;
+
+    case 3:
+      {
+	char *arg = argv[1];
+	if (strcmp (arg, "on") == 0 && strcmp (argv[2], "all") == 0)
+	  bind_builtin_variable ("echo_executing_commands",
+				 (ECHO_SCRIPTS | ECHO_FUNCTIONS));
+	else if (strcmp (arg, "off") == 0 && strcmp (argv[2], "all") == 0)
+	  bind_builtin_variable ("echo_executing_commands", ECHO_OFF);
+	else
+	  print_usage ("echo");
+      }
+      break;
+
+    default:
+      print_usage ("echo");
+      break;
+    }
+
+  DELETE_ARGV;
+
+  return retval;
+}
+
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; page-delimiter: "^/\\*" ***
 ;;; End: ***
 */
diff --git a/src/input.h b/src/input.h
--- a/src/input.h
+++ b/src/input.h
@@ -49,19 +49,16 @@ extern char *curr_fcn_file_name;
 extern int reading_script_file;
 
 // If we are reading from an M-file, this is it.
 extern FILE *ff_instream;
 
 // Nonzero means we are using readline.
 extern int using_readline;
 
-// Nonzero means commands are echoed as they are executed (-x).
-extern int echo_input;
-
 // Nonzero means this is an interactive shell.
 extern int interactive;
 
 // Nonzero means the user forced this shell to be interactive (-i).
 extern int forced_interactive;
 
 // Should we issue a prompt?
 extern int promptflag;
diff --git a/src/oct-hist.cc b/src/oct-hist.cc
--- a/src/oct-hist.cc
+++ b/src/oct-hist.cc
@@ -573,19 +573,19 @@ do_edit_history (int argc, char **argv)
     }
 
   file.close ();
 
   // Turn on command echo, so the output from this will make better
   // sense.
 
   begin_unwind_frame ("do_edit_history");
-  unwind_protect_int (echo_input);
+  unwind_protect_int (user_pref.echo_executing_commands);
   unwind_protect_int (input_from_tmp_history_file);
-  echo_input = 1;
+  user_pref.echo_executing_commands = ECHO_CMD_LINE;
   input_from_tmp_history_file = 1;
 
   parse_and_execute (name, 1);
 
   run_unwind_frame ("do_edit_history");
 
   // Delete the temporary file.  Should probably be done with an
   // unwind_protect.
@@ -602,19 +602,19 @@ do_run_history (int argc, char **argv)
 
   if (! name)
     return;
 
   // Turn on command echo, so the output from this will make better
   // sense.
 
   begin_unwind_frame ("do_run_history");
-  unwind_protect_int (echo_input);
+  unwind_protect_int (user_pref.echo_executing_commands);
   unwind_protect_int (input_from_tmp_history_file);
-  echo_input = 1;
+  user_pref.echo_executing_commands = ECHO_CMD_LINE;
   input_from_tmp_history_file = 1;
 
   parse_and_execute (name, 1);
 
   run_unwind_frame ("do_run_history");
 
   // Delete the temporary file.  Should probably be done with an
   // unwind_protect.
diff --git a/src/octave.cc b/src/octave.cc
--- a/src/octave.cc
+++ b/src/octave.cc
@@ -318,22 +318,20 @@ parse_and_execute (FILE *f, int print)
   YY_BUFFER_STATE old_buf = current_buffer ();
   YY_BUFFER_STATE new_buf = create_buffer (f);
 
   add_unwind_protect (restore_input_buffer, (void *) old_buf);
   add_unwind_protect (delete_input_buffer, (void *) new_buf);
 
   switch_to_buffer (new_buf);
 
-  unwind_protect_int (echo_input);
   unwind_protect_int (using_readline);
   unwind_protect_int (saving_history);
   unwind_protect_int (input_from_command_line_file);
 
-  echo_input = 0;
   using_readline = 0;
   saving_history = 0;
   input_from_command_line_file = 0;
 
   unwind_protect_ptr (curr_sym_tab);
 
   int retval;
   do
@@ -362,21 +360,19 @@ parse_and_execute (char *s, int print, i
 
   reading_script_file = 1;
 
   FILE *f = get_input_from_file (s, 0);
   if (f)
     {
       unwind_protect_int (input_line_number);
       unwind_protect_int (current_input_column);
-      unwind_protect_int (echo_input);
 
       input_line_number = 0;
       current_input_column = 1;
-      echo_input = 0;
 
       if (verbose)
 	{
 	  cout << "reading commands from " << s << " ... ";
 	  reading_startup_message_printed = 1;
 	  cout.flush ();
 	}
 
@@ -393,17 +389,20 @@ parse_and_execute (char *s, int print, i
 
 // Initialize by reading startup files.
 
 static void
 execute_startup_files (void)
 {
   begin_unwind_frame ("execute_startup_files");
 
+  unwind_protect_int (user_pref.echo_executing_commands);
   unwind_protect_int (input_from_startup_file);
+
+  user_pref.echo_executing_commands = ECHO_OFF;
   input_from_startup_file = 1;
 
   int verbose = (verbose_flag && ! inhibit_startup_message);
 
   // Execute commands from the site-wide configuration file.  First
   // from the file $(prefix)/lib/octave/site/m/octaverc (if it exists),
   // then from the file $(prefix)/lib/octave/$(version)/m/octaverc (if
   // it exists).
@@ -542,16 +541,18 @@ maximum_braindamage (void)
   bind_builtin_variable ("whitespace_in_literal_matrix", "traditional");
 }
 
 // You guessed it.
 
 int
 main (int argc, char **argv)
 {
+  int echo_commands = ECHO_OFF;
+
   // The order of these calls is important, and initialize_globals
   // must come before the options are processed because some command
   // line options override defaults.
 
   init_user_prefs ();
 
   initialize_pager ();
 
@@ -592,17 +593,17 @@ main (int argc, char **argv)
 	    load_path = strsave (optarg);
 	  break;
 
 	case 'q':
 	  inhibit_startup_message = 1;
 	  break;
 
 	case 'x':
-	  echo_input = 1;
+	  echo_commands = (ECHO_SCRIPTS | ECHO_FUNCTIONS | ECHO_CMD_LINE);
 	  break;
 
 	case 'v':
 	  print_version_and_exit ();
 	  break;
 
 	case INFO_FILE_OPTION:
 	  if (optarg)
@@ -644,16 +645,19 @@ main (int argc, char **argv)
   init_dynamic_linker ();
 
   if (! inhibit_startup_message)
     cout << OCTAVE_STARTUP_MESSAGE "\n" << endl;
 
   if (traditional)
     maximum_braindamage ();
 
+  bind_builtin_variable ("echo_executing_commands",
+			 (double) echo_commands);
+
   if (read_init_files)
     {
       saving_history = 0;
       execute_startup_files ();
       saving_history = 1;
     }
 
   if (! inhibit_startup_message && reading_startup_message_printed)
@@ -708,17 +712,21 @@ main (int argc, char **argv)
     }
 
   // Force input to be echoed if not really interactive, but the user
   // has forced interactive behavior.
 
   if (!interactive && forced_interactive)
     {
       rl_blink_matching_paren = 0;
-      echo_input = 1;
+
+      // XXX FIXME XXX -- is this the right thing to do?
+
+      bind_builtin_variable ("echo_executing_commands",
+			     (double) ECHO_CMD_LINE);
     }
 
   if (! interactive)
     using_readline = 0;
 
   // Allow the user to interrupt us without exiting.
 
   volatile sig_handler *saved_sigint_handler
diff --git a/src/parse.y b/src/parse.y
--- a/src/parse.y
+++ b/src/parse.y
@@ -1043,21 +1043,25 @@ func_def2	: identifier safe local_symtab
 		    $1->document (help_buf);
 
 		    $$ = $4;
 		  }
 		;
 
 func_def3	: param_list optsep opt_list fcn_end_or_eof
 		  {
+		    $3->mark_as_function_body ();
 		    tree_function *fcn = new tree_function ($3, curr_sym_tab);
 		    $$ = fcn->define_param_list ($1);
 		  }
 		| optsep opt_list fcn_end_or_eof
-		  { $$ = new tree_function ($2, curr_sym_tab); }
+		  {
+		    $2->mark_as_function_body ();
+		    $$ = new tree_function ($2, curr_sym_tab);
+		  }
 		;
 
 fcn_end_or_eof	: END
 		  {
 		    if (check_end ($1, token::function_end))
 			ABORT_PARSE;
 
 		    if (reading_fcn_file)
diff --git a/src/pr-output.cc b/src/pr-output.cc
--- a/src/pr-output.cc
+++ b/src/pr-output.cc
@@ -1460,25 +1460,33 @@ octave_print_internal (ostream& os, cons
     {
       int nstr = chm.rows ();
 
       if (pr_as_read_syntax && nstr > 1)
 	os << "[ ";
 
       for (int i = 0; i < nstr; i++)
 	{
+	  char *row = chm.row_as_string (i);
+
 	  if (pr_as_read_syntax)
 	    {
-	      os << "\"" << chm.row_as_string (i) << "\"";
+	      char *tmp = undo_string_escapes (row);
+
+	      os << "\"" << tmp << "\"";
+
+	      delete [] tmp;
 
 	      if (i < nstr - 1)
 		os << "; ";
 	    }
 	  else
-	    os << chm.row_as_string (i) << "\n";
+	    os << row << "\n";
+
+	  delete [] row;
 	}
 
       if (pr_as_read_syntax && nstr > 1)
 	os << " ]";
     }
   else
     {
       os << "sorry, printing char matrices not implemented yet\n";
diff --git a/src/pt-base.cc b/src/pt-base.cc
--- a/src/pt-base.cc
+++ b/src/pt-base.cc
@@ -29,16 +29,17 @@ Software Foundation, 59 Temple Place - S
 #include <config.h>
 #endif
 
 #include <cassert>
 
 #include <iostream.h>
 
 #include "tree-base.h"
+#include "user-prefs.h"
 
 // Current indentation.
 int tree_print_code::curr_print_indent_level = 0;
 
 // Nonzero means we are at the beginning of a line.
 int tree_print_code::beginning_of_line = 1;
 
 // All print_code() functions should use this to print new lines.
@@ -58,17 +59,17 @@ tree_print_code::print_code_new_line (os
 
 void
 tree_print_code::print_code_indent (ostream& os)
 {
   assert (curr_print_indent_level >= 0);
  
   if (beginning_of_line)
     {
-      os.form ("%*s", curr_print_indent_level, "");
+      os.form ("%s%*s", user_pref.ps4, curr_print_indent_level, "");
       beginning_of_line = 0;
     }
 }
 
 // For ressetting print_code state.
 
 void
 tree_print_code::print_code_reset (void)
diff --git a/src/pt-exp-base.cc b/src/pt-exp-base.cc
--- a/src/pt-exp-base.cc
+++ b/src/pt-exp-base.cc
@@ -2813,24 +2813,31 @@ tree_function::eval (int /* print */, in
     }
 
   // The following code is in a separate scope to avoid warnings from
   // G++ about `goto abort' crossing the initialization of some
   // variables.
 
   {
     bind_nargin_and_nargout (nargin, nargout);
-      
-    // Evaluate the commands that make up the function.  Always turn
-    // on printing for commands inside functions.   Maybe this should
-    // be toggled by a user-leval variable?
+
+    int echo_commands
+      = (user_pref.echo_executing_commands & ECHO_FUNCTIONS);
+
+    if (echo_commands)
+      print_code_function_header ();
+
+    // Evaluate the commands that make up the function.
 
     int pf = ! user_pref.silent_functions;
     tree_constant last_computed_value = cmd_list->eval (pf);
 
+    if (echo_commands)
+      print_code_function_trailer ();
+
     if (returning)
       returning = 0;
 
     if (breaking)
       breaking--;
 
     if (error_state)
       {
@@ -2883,16 +2890,39 @@ tree_function::traceback_error (void)
     }
 }
 
 void
 tree_function::print_code (ostream& os)
 {
   print_code_reset ();
 
+  print_code_function_header (os);
+
+  if (cmd_list)
+    {
+      increment_indent_level ();
+      cmd_list->print_code (os);
+    }
+
+  print_code_function_trailer (os);
+}
+
+void
+tree_function::print_code_function_header (void)
+{
+  ostrstream output_buf;
+  print_code_function_header (output_buf);
+  output_buf << ends;
+  maybe_page_output (output_buf);
+}
+
+void
+tree_function::print_code_function_header (ostream& os)
+{
   print_code_indent (os);
 
   os << "function ";
 
   if (ret_list)
     {
       int len = ret_list->length ();
 
@@ -2923,22 +2953,31 @@ tree_function::print_code (ostream& os)
 	  print_code_new_line (os);
 	}
     }
   else
     {
       os << "()";
       print_code_new_line (os);
     }
-
-  if (cmd_list)
-    {
-      increment_indent_level ();
-      cmd_list->print_code (os);
-    }
+}
+
+void
+tree_function::print_code_function_trailer (void)
+{
+  ostrstream output_buf;
+  print_code_function_trailer (output_buf);
+  output_buf << ends;
+  maybe_page_output (output_buf);
+}
+
+void
+tree_function::print_code_function_trailer (ostream& os)
+{
+  print_code_indent (os);
 
   os << "endfunction";
 
   print_code_new_line (os);
 }
 
 DEFUN ("va_arg", Fva_arg, Sva_arg, 10,
   "va_arg (): return next argument in a function that takes a\n\
diff --git a/src/pt-exp-base.h b/src/pt-exp-base.h
--- a/src/pt-exp-base.h
+++ b/src/pt-exp-base.h
@@ -940,16 +940,22 @@ private:
   int system_fcn_file;
   int num_named_args;
   Octave_object args_passed;
   int num_args_passed;
   int curr_va_arg_number;
   tree_va_return_list *vr_list;
   symbol_record *nargin_sr;
   symbol_record *nargout_sr;
+
+  void print_code_function_header (void);
+  void print_code_function_header (ostream& os);
+
+  void print_code_function_trailer (void);
+  void print_code_function_trailer (ostream& os);
 };
 
 #endif
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; page-delimiter: "^/\\*" ***
diff --git a/src/pt-misc.cc b/src/pt-misc.cc
--- a/src/pt-misc.cc
+++ b/src/pt-misc.cc
@@ -25,25 +25,27 @@ Software Foundation, 59 Temple Place - S
 #pragma implementation
 #endif
 
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
 #include <iostream.h>
+#include <strstream.h>
 
 #ifdef HAVE_UNISTD_H
 #include <sys/types.h>
 #include <unistd.h>
 #endif
 
 #include "error.h"
 #include "oct-obj.h"
 #include "octave.h"
+#include "pager.h"
 #include "tree-base.h"
 #include "tree-cmd.h"
 #include "tree-const.h"
 #include "tree-expr.h"
 #include "tree-misc.h"
 #include "user-prefs.h"
 
 // Nonzero means we're breaking out of a loop or function body.
@@ -59,16 +61,29 @@ extern int returning;
 
 tree_statement::~tree_statement (void)
 {
   delete command;
   delete expression;
 }
 
 void
+tree_statement::maybe_echo_code (int in_function_body)
+{
+  if (in_function_body
+      && (user_pref.echo_executing_commands & ECHO_FUNCTIONS))
+    {
+      ostrstream output_buf;
+      print_code (output_buf);
+      output_buf << ends;
+      maybe_page_output (output_buf);
+    }
+}
+
+void
 tree_statement::print_code (ostream& os)
 {
   if (command)
     {
       command->print_code (os);
 
       if (! print_flag)
 	os << ";";
@@ -79,18 +94,16 @@ tree_statement::print_code (ostream& os)
     {
       expression->print_code (os);
 
       if (! print_flag)
 	os << ";";
 
       expression->print_code_new_line (os);
     }
-
-
 }
 
 tree_constant
 tree_statement_list::eval (int print)
 {
   int pf;
   tree_constant retval;
 
@@ -106,16 +119,18 @@ tree_statement_list::eval (int print)
       else
 	pf = elt->print_flag;
 
       tree_command *cmd = elt->command;
       tree_expression *expr = elt->expression;
 
       if (cmd || expr)
 	{
+	  elt->maybe_echo_code (function_body);
+
 	  if (cmd)
 	    cmd->eval ();
 	  else
 	    retval = expr->eval (pf);
 
 	  if (error_state)
 	    return tree_constant ();
 
@@ -152,16 +167,18 @@ tree_statement_list::eval (int print, in
 	  else
 	    pf = elt->print_flag;
 
 	  tree_command *cmd = elt->command;
 	  tree_expression *expr = elt->expression;
 
 	  if (cmd || expr)
 	    {
+	      elt->maybe_echo_code (function_body);
+
 	      if (cmd)
 		cmd->eval ();
 	      else
 		{
 		  if (expr->is_multi_val_ret_expression ())
 		    {
 		      Octave_object args;
 		      tree_multi_val_ret *t = (tree_multi_val_ret *) expr;
@@ -525,16 +542,17 @@ tree_if_clause::eval (void)
 
 void
 tree_if_clause::print_code (ostream& os)
 {
   if (expr)
     expr->print_code (os);
 
   print_code_new_line (os);
+
   increment_indent_level ();
 
   if (list)
     {
       list->print_code (os);
 
       decrement_indent_level ();
     }
diff --git a/src/pt-misc.h b/src/pt-misc.h
--- a/src/pt-misc.h
+++ b/src/pt-misc.h
@@ -103,49 +103,60 @@ public:
 
   int column (void)
     {
       return command
 	? command->column ()
 	  : (expression ? expression->column () : -1);
     }
 
+  void maybe_echo_code (int);
+
   void print_code (ostream& os);
 
 private:
   tree_command *command;	// Command to execute.
   tree_expression *expression;	// Command to execute.
   int print_flag;		// Print result of eval for this command?
 };
 
 class
 tree_statement_list : public SLList<tree_statement *>, public tree_print_code
 {
 public:
   tree_statement_list (void)
-    : SLList<tree_statement *> (), tree_print_code () { }
+    : SLList<tree_statement *> (), tree_print_code ()
+      { function_body = 0; }
 
   tree_statement_list (tree_statement *s)
     : SLList<tree_statement *> (), tree_print_code ()
-      { append (s); }
+      {
+	function_body = 0;
+	append (s);
+      }
 
   ~tree_statement_list (void)
     {
       while (! empty ())
 	{
 	  tree_statement *t = remove_front ();
 	  delete t;
 	}
     }
 
+  void mark_as_function_body (void) { function_body = 1; }
+
   tree_constant eval (int print);
 
   Octave_object eval (int print, int nargout);
 
   void print_code (ostream& os);
+
+private:
+  int function_body;
 };
 
 // Argument lists.  Used to hold the list of expressions that are the
 // arguments in a function call or index expression.
 
 class
 tree_argument_list : public SLList<tree_expression *>, public tree_print_code
 {
diff --git a/src/user-prefs.cc b/src/user-prefs.cc
--- a/src/user-prefs.cc
+++ b/src/user-prefs.cc
@@ -180,16 +180,34 @@ do_fortran_indexing (void)
 {
   user_pref.do_fortran_indexing =
     check_preference ("do_fortran_indexing"); 
 
   return 0;
 }
 
 
+// Echo commands as they are executed?
+//
+//   1  ==>  echo commands read from script files
+//   2  ==>  echo commands from functions
+//   4  ==>  echo commands read from command line
+//
+// more than one state can be active at once.
+
+int
+echo_executing_commands (void)
+{
+  user_pref.echo_executing_commands =
+    check_preference ("echo_executing_commands"); 
+
+  return 0;
+}
+
+
 // Should ignore empty elements in a matrix list (i.e., is an
 //  expression like `[[], 1]' ok?
 
 int
 empty_list_elements_ok (void)
 {
   user_pref.empty_list_elements_ok =
     check_preference ("empty_list_elements_ok");
diff --git a/src/user-prefs.h b/src/user-prefs.h
--- a/src/user-prefs.h
+++ b/src/user-prefs.h
@@ -25,16 +25,17 @@ Software Foundation, 59 Temple Place - S
 #define octave_user_prefs_h 1
 
 struct user_preferences
 {
   int automatic_replot;
   int beep_on_error;
   int define_all_return_values;
   int do_fortran_indexing;
+  int echo_executing_commands;
   int empty_list_elements_ok;
   int gnuplot_has_multiplot;
   int ignore_function_time_stamp;
   int implicit_str_to_num_ok;
   int ok_to_lose_imaginary_part;
   int output_max_field_width;
   int output_precision;
   int page_screen_output;
@@ -77,16 +78,17 @@ struct user_preferences
 extern user_preferences user_pref;
 
 extern void init_user_prefs (void);
 
 extern int automatic_replot (void);
 extern int beep_on_error (void);
 extern int define_all_return_values (void);
 extern int do_fortran_indexing (void);
+extern int echo_executing_commands (void);
 extern int empty_list_elements_ok (void);
 extern int gnuplot_has_multiplot (void);
 extern int ignore_function_time_stamp (void);
 extern int implicit_str_to_num_ok (void);
 extern int ok_to_lose_imaginary_part (void);
 extern int page_screen_output (void);
 extern int prefer_column_vectors (void);
 extern int prefer_zero_one_indexing (void);
@@ -121,16 +123,24 @@ extern int sv_imagepath (void);
 extern int sv_info_file (void);
 extern int sv_loadpath (void);
 extern int sv_pager_binary (void);
 extern int sv_ps1 (void);
 extern int sv_ps2 (void);
 extern int sv_ps4 (void);
 extern int sv_pwd (void);
 
+enum echo_state
+{
+  ECHO_OFF = 0,
+  ECHO_SCRIPTS = 1,
+  ECHO_FUNCTIONS = 2,
+  ECHO_CMD_LINE = 4
+};
+
 #endif
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; page-delimiter: "^/\\*" ***
 ;;; End: ***
 */
diff --git a/src/variables.cc b/src/variables.cc
--- a/src/variables.cc
+++ b/src/variables.cc
@@ -706,22 +706,22 @@ parse_fcn_file (int exec_script, char *f
     {
       // Check to see if this file defines a function or is just a
       // list of commands.
 
       char *tmp_help_txt = gobble_leading_white_space (ffile, 0);
 
       if (is_function_file (ffile))
 	{
-	  unwind_protect_int (echo_input);
+	  unwind_protect_int (user_pref.echo_executing_commands);
 	  unwind_protect_int (saving_history);
 	  unwind_protect_int (reading_fcn_file);
 	  unwind_protect_int (input_from_command_line_file);
 
-	  echo_input = 0;
+	  user_pref.echo_executing_commands = ECHO_OFF;
 	  saving_history = 0;
 	  reading_fcn_file = 1;
 	  input_from_command_line_file = 0;
 
 	  YY_BUFFER_STATE old_buf = current_buffer ();
 	  YY_BUFFER_STATE new_buf = create_buffer (ffile);
 
 	  add_unwind_protect (restore_input_buffer, (void *) old_buf);
@@ -1663,16 +1663,20 @@ set to \"true\".");
     "control whether values returned from functions should have a\n\
 value even if one has not been explicitly assigned.  See also\n\
 default_return_value");
 
   DEFVAR ("do_fortran_indexing", SBV_do_fortran_indexing, 0.0, 0,
 	  do_fortran_indexing,
     "allow single indices for matrices");
 
+  DEFVAR ("echo_executing_commands", SBV_echo_executing_commands, 0.0, 0, 
+	  echo_executing_commands,
+    "echo commands as they are executed");
+
   DEFCONST ("e", SBV_e, exp (1.0), 0, 0,
     "exp (1)");
 
   DEFVAR ("empty_list_elements_ok", SBV_empty_list_elements_ok,
 	  "warn", 0, empty_list_elements_ok,
     "ignore the empty element in expressions like `a = [[], 1]'");
 
   DEFCONST ("eps", SBV_eps, DBL_EPSILON, 0, 0,
