# HG changeset patch
# User Michael Goffioul <michael.goffioul@gmail.com>
# Date 1358740997 18000
#      Sun Jan 20 23:03:17 2013 -0500
# Branch classdef
# Node ID cdeb6eb656be552464b1242d199b52dcc2b23214
# Parent  24ceda35d14688d8a173418cf6d4d4b9bca26521
Move property/method access check down to cdef_property/cdef_method classes.

* libinterp/octave-value/ov-classdef.h
(cdef_property::cdef_property_rep::get_value,
cdef_property::cdef_property_rep::set_value): Add arguments (do_check_access
and who) to control access checking and pass down to gripe utility function.
(cdef_property::get_value, cdef_property::set_value): Likewise.
(cdef_method::cdef_method_rep::execute): Likewise.
(cdef_method::execute): Likewise.
(cdef_property::check_get_access, cdef_property::check_set_access): Move
implementation to cdef_property::cdef_property_rep.
(cdef_property::cdef_property_rep::check_get_access,
cdef_property::cdef_property_rep::check_set_access): New methods, moved from
cdef_property.
(cdef_method::check_access): Move implementation to
cdef_method::cdef_method_rep.
(cdef_method::cdef_method_rep::check_access): New method, moved from
cdef_method.
(cdef_property::cdef_property_rep::wrap): New method.
(cdef_method::cdef_method_rep::wrap): New method.

* libinterp/octave-value/ov-classdef.cc
(cdef_property::cdef_property_rep::get_value,
cdef_property::cdef_property_rep::set_value): Add arguments (do_check_access
and who) to control access checking and pass down to gripe utility function.
(cdef_property::cdef_property_rep::check_get_access,
(cdef_method::cdef_method_rep::execute): Likewise.
cdef_property::cdef_property_rep::check_set_access): New methods, moved from
cdef_property.
(cdef_method::cdef_method_rep::check_access): New method, moved from
cdef_method.
(class_fevalStatic, octave_classdef_superclass_ref::do_multi_index_op,
cdef_object_scalar::subsref, cdef_class::cdef_class_rep::subsref_meta,
cdef_class::cdef_class_rep::construct_object): Do not check access, let
cdef_method::execute handle it.
(class_getConstant, cdef_object_scalar::subsref, cdef_object_scalar::subsasgn,
cdef_class::cdef_class_rep::subsref_meta): Do not check get/set access, let
cdef_property::get_value and cdef_property::set_value handle it.
(cdef_class::cdef_class_rep::delete_object): Execute "delete" method without
access checking.

diff --git a/libinterp/octave-value/ov-classdef.cc b/libinterp/octave-value/ov-classdef.cc
--- a/libinterp/octave-value/ov-classdef.cc
+++ b/libinterp/octave-value/ov-classdef.cc
@@ -466,26 +466,22 @@ class_fevalStatic (const octave_value_li
 	  std::string meth_name = args(1).string_value ();
 
 	  if (! error_state)
 	    {
 	      cdef_method meth = cls.find_method (meth_name);
 
 	      if (meth.ok ())
 		{
-		  if (meth.check_access ())
-		    {
-		      if (meth.is_static ())
-			retval = meth.execute (args.splice (0, 2), nargout);
-		      else
-			error ("fevalStatic: method `%s' is not static",
-			       meth_name.c_str ());
-		    }
-		  else
-		    gripe_method_access ("fevalStatic", meth);
+                    if (meth.is_static ())
+                      retval = meth.execute (args.splice (0, 2), nargout,
+                                             true, "fevalStatic");
+                    else
+                      error ("fevalStatic: method `%s' is not static",
+                             meth_name.c_str ());
 		}
 	      else
 		error ("fevalStatic: method not found: %s",
 		       meth_name.c_str ());
 	    }
 	  else
 	    error ("fevalStatic: invalid method name, expected a string value");
 	}
@@ -512,26 +508,21 @@ class_getConstant (const octave_value_li
 	  std::string prop_name = args(1).string_value ();
 
 	  if (! error_state)
 	    {
 	      cdef_property prop = cls.find_property (prop_name);
 
 	      if (prop.ok ())
 		{
-		  if (prop.check_get_access ())
-		    {
-		      if (prop.is_constant ())
-			retval(0) = prop.get_value ();
-		      else
-			error ("getConstant: property `%s' is not constant",
-			       prop_name.c_str ());
-		    }
-		  else
-		    gripe_property_access ("getConstant", prop);
+                  if (prop.is_constant ())
+                    retval(0) = prop.get_value (true, "getConstant");
+                  else
+                    error ("getConstant: property `%s' is not constant",
+                           prop_name.c_str ());
 		}
 	      else
 		error ("getConstant: property not found: %s",
 		       prop_name.c_str ());
 	    }
 	  else
 	    error ("getConstant: invalid property name, expected a string value");
 	}
@@ -999,22 +990,18 @@ public:
                           //    logic in cdef_object::subsref, but avoid the
                           //    assumption of 1)
                           // Not being sure about the assumption of 1), I
                           // go with option 2) for the time being.
 
                           cdef_method meth = cls.find_method (meth_name, false);
 
                           if (meth.ok ())
-                            {
-                              if (meth.check_access ())
-                                retval = meth.execute (idx, nargout);
-                              else
-                                gripe_method_access (meth_name, meth);
-                            }
+                            retval = meth.execute (idx, nargout, true,
+                                                   meth_name);
                           else
                             ::error ("no method `%s' found in superclass `%s'",
                                      meth_name.c_str (), cls_name.c_str ());
                         }
                       else
                         ::error ("`%s' is not a superclass of `%s'",
                                  cls_name.c_str (), ctx.get_name ().c_str ());
                     }
@@ -1088,65 +1075,57 @@ cdef_object_scalar::subsref (const std::
     case '.':
 	{
 	  std::string name = (idx.front ())(0).string_value ();
 
 	  cdef_method meth = cls.find_method (name);
 
 	  if (meth.ok ())
 	    {
-	      if (meth.check_access ())
-		{
-		  int _nargout = (type.length () > 2 ? 1 : nargout);
-
-		  octave_value_list args;
-
-		  skip = 1;
-
-		  if (type.length () > 1 && type[1] == '(')
-		    {
-		      std::list<octave_value_list>::const_iterator it = idx.begin ();
-
-		      args = *++it;
-
-		      skip++;
-		    }
-
-		  if (meth.is_static ())
-		    retval = meth.execute (args, _nargout);
-		  else
-		    {
-		      refcount++;
-		      retval = meth.execute (cdef_object (this), args, _nargout);
-		    }
-		}
-	      else
-		gripe_method_access ("subsref", meth);
+              int _nargout = (type.length () > 2 ? 1 : nargout);
+
+              octave_value_list args;
+
+              skip = 1;
+
+              if (type.length () > 1 && type[1] == '(')
+                {
+                  std::list<octave_value_list>::const_iterator it = idx.begin ();
+
+                  args = *++it;
+
+                  skip++;
+                }
+
+              if (meth.is_static ())
+                retval = meth.execute (args, _nargout, true, "subsref");
+              else
+                {
+                  refcount++;
+                  retval = meth.execute (cdef_object (this), args, _nargout,
+                                         true, "subsref");
+                }
 	    }
 
 	  if (skip == 0 && ! error_state)
 	    {
 	      cdef_property prop = cls.find_property (name);
 
 	      if (prop.ok ())
 		{
-		  if (prop.check_get_access ())
-		    {
-                      if (prop.is_constant ())
-                        retval(0) = prop.get_value ();
-                      else
-                        {
-                          refcount++;
-                          retval(0) = prop.get_value (cdef_object (this));
-                        }
-
-		      skip = 1;
-		    }
-		  else
-		    gripe_property_access ("subsref", prop);
+                  if (prop.is_constant ())
+                    retval(0) = prop.get_value (true, "subsref");
+                  else
+                    {
+                      refcount++;
+                      retval(0) = prop.get_value (cdef_object (this),
+                                                  true, "subsref");
+                    }
+
+                  skip = 1;
 		}
 	      else
 		error ("subsref: unknown method or property: %s", name.c_str ());
 	    }
 	  break;
 	}
     default:
       error ("object cannot be indexed with `%c'", type[0]);
@@ -1174,29 +1153,24 @@ cdef_object_scalar::subsasgn (const std:
           if (! error_state)
             {
               cdef_property prop = cls.find_property (name);
 
               if (prop.ok ())
                 {
                   if (type.length () == 1)
                     {
-                      if (prop.check_set_access ())
-                        {
-                          refcount++;
-
-                          cdef_object obj (this);
-
-                          prop.set_value (obj, rhs);
-
-                          if (! error_state)
-                            retval = to_ov (obj);
-                        }
-                      else
-                        gripe_property_access ("subsasgn", prop, true);
+                      refcount++;
+
+                      cdef_object obj (this);
+
+                      prop.set_value (obj, rhs, true, "subsasgn");
+
+                      if (! error_state)
+                        retval = to_ov (obj);
                     }
                   else
                     {
                     }
 
                   if (! error_state)
                     {
                     }
@@ -1917,17 +1891,17 @@ cdef_class::cdef_class_rep::delete_objec
   method_iterator it = method_map.find ("delete");
 
   if (it != method_map.end ())
     {
       cdef_class cls = obj.get_class ();
 
       obj.set_class (wrap ());
 
-      it->second.execute (obj, octave_value_list (), 0);
+      it->second.execute (obj, octave_value_list (), 0, false);
 
       obj.set_class (cls);
     }
 
   // FIXME: should we destroy corresponding properties here?
 
   // Call "delete" in super classes
 
@@ -1969,49 +1943,40 @@ cdef_class::cdef_class_rep::subsref_meta
           if (! error_state)
             {
               cdef_method meth = find_method (nm);
 
               if (meth.ok ())
                 {
                   if (meth.is_static ())
                     {
-                      if (meth.check_access ())
+                      octave_value_list args;
+
+                      if (type.length () > 1 && idx.size () > 1
+                          && type[1] == '(')
                         {
-                          octave_value_list args;
-
-                          if (type.length () > 1 && idx.size () > 1
-                              && type[1] == '(')
-                            {
-                              args = *(++(idx.begin ()));
-                              skip++;
-                            }
-
-                          retval = meth.execute (args, (type.length () > skip
-                                                        ? 1 : nargout));
+                          args = *(++(idx.begin ()));
+                          skip++;
                         }
-                      else
-                        gripe_method_access ("meta.class", meth);
+
+                      retval = meth.execute (args, (type.length () > skip
+                                                    ? 1 : nargout), true,
+                                             "meta.class");
                     }
                   else
                     ::error ("method `%s' is not static", nm.c_str ());
                 }
               else
                 {
                   cdef_property prop = find_property (nm);
 
                   if (prop.ok ())
                     {
                       if (prop.is_constant ())
-                        {
-                          if (prop.check_get_access ())
-                            retval(0) = prop.get_value ();
-                          else
-                            gripe_property_access ("meta.class", prop, false);
-                        }
+                        retval(0) = prop.get_value (true, "meta.class");
                       else
                         ::error ("property `%s' is not constant",
                                  nm.c_str ());
                     }
                   else
                     ::error ("no such method or property `%s'", nm.c_str ());
                 }
             }
@@ -2094,38 +2059,33 @@ cdef_class::cdef_class_rep::run_construc
 
   std::string cls_name = get_name ();
   std::string ctor_name = get_base_name (cls_name);
 
   cdef_method ctor = find_method (ctor_name);
 
   if (ctor.ok ())
     {
-      if (ctor.check_access ())
+      octave_value_list ctor_args (args);
+      octave_value_list ctor_retval;
+
+      ctor_args.prepend (to_ov (obj));
+      ctor_retval = ctor.execute (ctor_args, 1, true, "constructor");
+
+      if (! error_state)
         {
-          octave_value_list ctor_args (args);
-          octave_value_list ctor_retval;
-
-          ctor_args.prepend (to_ov (obj));
-          ctor_retval = ctor.execute (ctor_args, 1);
-
-          if (! error_state)
+          if (ctor_retval.length () == 1)
+            obj = to_cdef (ctor_retval(0));
+          else
             {
-              if (ctor_retval.length () == 1)
-                obj = to_cdef (ctor_retval(0));
-              else
-                {
-                  ::error ("%s: invalid number of output arguments for classdef constructor",
-                           ctor_name.c_str ());
-                  return;
-                }
+              ::error ("%s: invalid number of output arguments for classdef constructor",
+                       ctor_name.c_str ());
+              return;
             }
         }
-      else
-        gripe_method_access ("constructor", ctor);
     }
 
   obj.mark_as_constructed (wrap ());
 }
 
 octave_value
 cdef_class::cdef_class_rep::construct (const octave_value_list& args)
 {
@@ -2441,20 +2401,29 @@ octave_function*
 cdef_class::get_method_function (const std::string& /* nm */)
 {
   octave_classdef_proxy* p = new octave_classdef_proxy (*this);
 
   return p;
 }
 
 octave_value
-cdef_property::cdef_property_rep::get_value (const cdef_object& obj)
+cdef_property::cdef_property_rep::get_value (const cdef_object& obj,
+                                             bool do_check_access,
+                                             const std::string& who)
 {
   octave_value retval;
 
+  if (do_check_access && ! check_get_access ())
+    {
+      gripe_property_access (who, wrap (), false);
+
+      return retval;
+    }
+
   if (! obj.is_constructed ())
     {
       cdef_class cls (to_cdef (get ("DefiningClass")));
 
       if (! obj.is_partially_constructed_for (cls))
         {
           ::error ("cannot reference properties of class `%s' for non-constructed object",
                    cls.get_name ().c_str ());
@@ -2478,27 +2447,50 @@ cdef_property::cdef_property_rep::get_va
 
       if (! error_state)
 	retval = args(0);
     }
 
   return retval;
 }
 
+octave_value
+cdef_property::cdef_property_rep::get_value (bool do_check_access,
+                                             const std::string& who)
+{
+  if (do_check_access && ! check_get_access ())
+    {
+      gripe_property_access (who, wrap (), false);
+
+      return octave_value ();
+    }
+
+  return get ("DefaultValue");
+}
+
 bool
 cdef_property::cdef_property_rep::is_recursive_set (const cdef_object& /* obj */) const
 {
   // FIXME: implement
   return false;
 }
 
 void
 cdef_property::cdef_property_rep::set_value (cdef_object& obj,
-                                             const octave_value& val)
+                                             const octave_value& val,
+                                             bool do_check_access,
+                                             const std::string& who)
 {
+  if (do_check_access && ! check_set_access ())
+    {
+      gripe_property_access (who, wrap (), true);
+
+      return;
+    }
+
   if (! obj.is_constructed ())
     {
       cdef_class cls (to_cdef (get ("DefiningClass")));
 
       if (! obj.is_partially_constructed_for (cls))
         {
           ::error ("cannot reference properties of class `%s' for non-constructed object",
                    cls.get_name ().c_str ());
@@ -2530,28 +2522,28 @@ cdef_property::cdef_property_rep::set_va
               if (! error_state)
                 obj = new_obj;
             }
         }
     }
 }
 
 bool
-cdef_property::check_get_access (void) const
+cdef_property::cdef_property_rep::check_get_access (void) const
 {
   cdef_class cls (to_cdef (get ("DefiningClass")));
 
   if (! error_state)
     return ::check_access (cls, get ("GetAccess"));
 
   return false;
 }
 
 bool
-cdef_property::check_set_access (void) const
+cdef_property::cdef_property_rep::check_set_access (void) const
 {
   cdef_class cls (to_cdef (get ("DefiningClass")));
 
   if (! error_state)
     return ::check_access (cls, get ("SetAccess"));
 
   return false;
 }
@@ -2559,20 +2551,28 @@ cdef_property::check_set_access (void) c
 void
 cdef_method::cdef_method_rep::check_method (void)
 {
   // FIXME: check whether re-load is needed
 }
 
 octave_value_list
 cdef_method::cdef_method_rep::execute (const octave_value_list& args,
-				       int nargout)
+				       int nargout, bool do_check_access,
+                                       const std::string& who)
 {
   octave_value_list retval;
 
+  if (do_check_access && ! check_access ())
+    {
+      gripe_method_access (who, wrap ());
+
+      return retval;
+    }
+
   if (! get ("Abstract").bool_value ())
     {
       check_method ();
 
       if (function.is_defined ())
 	{
 	  retval = execute_ov (function, args, nargout);
 	}
@@ -2582,20 +2582,28 @@ cdef_method::cdef_method_rep::execute (c
 	   get ("Name").string_value ().c_str ());
 
   return retval;
 }
 
 octave_value_list
 cdef_method::cdef_method_rep::execute (const cdef_object& obj,
 				       const octave_value_list& args,
-				       int nargout)
+				       int nargout, bool do_check_access,
+                                       const std::string& who)
 {
   octave_value_list retval;
 
+  if (do_check_access && ! check_access ())
+    {
+      gripe_method_access (who, wrap ());
+
+      return retval;
+    }
+
   if (! get ("Abstract").bool_value ())
     {
       check_method ();
 
       octave_value_list new_args;
 
       if (function.is_defined ())
 	{
@@ -2620,17 +2628,17 @@ cdef_method::cdef_method_rep::is_constru
 {
   if (function.is_function())
     return function.function_value ()->is_classdef_constructor ();
 
   return false;
 }
 
 bool
-cdef_method::check_access (void) const
+cdef_method::cdef_method_rep::check_access (void) const
 {
   cdef_class cls (to_cdef (get ("DefiningClass")));
 
   if (! error_state)
     return ::check_access (cls, get ("Access"));
 
   return false;
 }
diff --git a/libinterp/octave-value/ov-classdef.h b/libinterp/octave-value/ov-classdef.h
--- a/libinterp/octave-value/ov-classdef.h
+++ b/libinterp/octave-value/ov-classdef.h
@@ -829,27 +829,42 @@ private:
     bool is_property (void) const { return true; }
 
     std::string get_name (void) const { return get("Name").string_value (); }
 
     void set_name (const std::string& nm) { put ("Name", nm); }
 
     bool is_constant (void) const { return get("Constant").bool_value (); }
 
-    octave_value get_value (void) const { return get ("DefaultValue"); }
+    octave_value get_value (bool do_check_access = true,
+                            const std::string& who = std::string ());
+
+    octave_value get_value (const cdef_object& obj,
+                            bool do_check_access = true,
+                            const std::string& who = std::string ());
 
-    octave_value get_value (const cdef_object& obj);
+    void set_value (cdef_object& obj, const octave_value& val,
+                    bool do_check_access = true,
+                    const std::string& who = std::string ());
 
-    void set_value (cdef_object& obj, const octave_value& val);
+    bool check_get_access (void) const;
+
+    bool check_set_access (void) const;
 
   private:
     cdef_property_rep (const cdef_property_rep& p)
       : handle_cdef_object (p) { }
 
     bool is_recursive_set (const cdef_object& obj) const;
+
+    cdef_property wrap (void)
+      {
+        refcount++;
+        return cdef_property (this);
+      }
   };
 
 public:
   cdef_property (void) : cdef_object () { }
 
   cdef_property (const std::string& nm)
       : cdef_object (new cdef_property_rep ())
     { get_rep ()->set_name (nm); }
@@ -868,27 +883,34 @@ public:
 
   cdef_property& operator = (const cdef_property& prop)
     {
       cdef_object::operator= (prop);
 
       return *this;
     }
 
-  octave_value get_value (const cdef_object& obj)
-    { return get_rep ()->get_value (obj); }
+  octave_value get_value (const cdef_object& obj, bool do_check_access = true,
+                          const std::string& who = std::string ())
+    { return get_rep ()->get_value (obj, do_check_access, who); }
 
-  octave_value get_value (void) { return get_rep ()->get_value (); }
+  octave_value get_value (bool do_check_access = true,
+                          const std::string& who = std::string ())
+    { return get_rep ()->get_value (do_check_access, who); }
 
-  void set_value (cdef_object& obj, const octave_value& val)
-    { get_rep ()->set_value (obj, val); }
+  void set_value (cdef_object& obj, const octave_value& val,
+                  bool do_check_access = true,
+                  const std::string& who = std::string ())
+    { get_rep ()->set_value (obj, val, do_check_access, who); }
 
-  bool check_get_access (void) const;
+  bool check_get_access (void) const
+    { return get_rep ()->check_get_access (); }
   
-  bool check_set_access (void) const;
+  bool check_set_access (void) const
+    { return get_rep ()->check_set_access (); }
 
   std::string get_name (void) const { return get_rep ()->get_name (); }
 
   bool is_constant (void) const { return get_rep ()->is_constant (); }
 
 private:
   cdef_property_rep* get_rep (void)
     { return dynamic_cast<cdef_property_rep *> (cdef_object::get_rep ()); }
@@ -919,29 +941,41 @@ private:
     void set_name (const std::string& nm) { put ("Name", nm); }
 
     bool is_static (void) const { return get("Static").bool_value (); }
 
     octave_value get_function (void) const { return function; }
 
     void set_function (const octave_value& fcn) { function = fcn; }
 
-    octave_value_list execute (const octave_value_list& args, int nargout);
+    bool check_access (void) const;
+
+    octave_value_list execute (const octave_value_list& args, int nargout,
+                               bool do_check_access = true,
+                               const std::string& who = std::string ());
 
     octave_value_list execute (const cdef_object& obj,
-			       const octave_value_list& args, int nargout);
+			       const octave_value_list& args, int nargout,
+                               bool do_check_access = true,
+                               const std::string& who = std::string ());
 
     bool is_constructor (void) const;
 
   private:
     cdef_method_rep (const cdef_method_rep& m)
       : handle_cdef_object (m), function (m.function) { }
 
     void check_method (void);
 
+    cdef_method wrap (void)
+      {
+        refcount++;
+        return cdef_method (this);
+      }
+
   private:
     octave_value function;
   };
 
 public:
   cdef_method (void) : cdef_object () { }
 
   cdef_method (const std::string& nm)
@@ -963,25 +997,29 @@ public:
   cdef_method& operator = (const cdef_method& meth)
     {
       cdef_object::operator= (meth);
 
       return *this;
     }
 
   /* normal invokation */
-  octave_value_list execute (const octave_value_list& args, int nargout)
-    { return get_rep ()->execute (args, nargout); }
+  octave_value_list execute (const octave_value_list& args, int nargout,
+                             bool do_check_access = true,
+                             const std::string& who = std::string ())
+    { return get_rep ()->execute (args, nargout, do_check_access, who); }
 
   /* dot-invokation: object is pushed as 1st argument */
   octave_value_list execute (const cdef_object& obj,
-			     const octave_value_list& args, int nargout)
-    { return get_rep ()->execute (obj, args, nargout); }
+			     const octave_value_list& args, int nargout,
+                             bool do_check_access = true,
+                             const std::string& who = std::string ())
+    { return get_rep ()->execute (obj, args, nargout, do_check_access, who); }
 
-  bool check_access (void) const;
+  bool check_access (void) const { return get_rep ()->check_access (); }
   
   std::string get_name (void) const { return get_rep ()->get_name (); }
 
   bool is_static (void) const { return get_rep ()->is_static (); }
 
   void set_function (const octave_value& fcn)
     { get_rep ()->set_function (fcn); }
 
