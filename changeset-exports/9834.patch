# HG changeset patch
# User Shai Ayal <shaiay@users.sourceforge.net>
# Date 1258604049 18000
#      Wed Nov 18 23:14:09 2009 -0500
# Node ID 92d8f35ff217f3c40fbe6ae3228c98c6ff3ba58b
# Parent  637fa784d10202f3a12708476a0d94b620acb621
compute bounding boxes for text in opengl graphics backend

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,20 @@
+2009-11-14  Shai Ayal  <shaiay@users.sourceforge.net>
+
+	* gl-render.cc (opengl_renderer::text_to_pixels):
+	New function from code in render_text to produce the pixels and
+	compute bounding box.
+	(opengl_renderer::render_text): Call text_to_pixels to compute
+	rotation mode and bounding box.
+	* gl-renger.h (opengl_renderer::text_to_pixels): Provide decl.
+	* gl2ps-renderer.cc (glps_renderer::render_text):
+	Call text_to_pixels to compute bounding box.
+	(glps_renderer::set_font): Call opengl_renderer::set_font.
+
 2009-11-18  Michael Godfrey  <godfrey@isl.stanford.edu>
 
 	* txt-eng-ft.cc: Relax font match test.
 
 2009-11-18  Jaroslav Hajek  <highegg@gmail.com>
 
 	* DLD-FUNCTIONS/bsxfun.cc (bsxfun_builtin_op): New member:
 	bsxfun_builtin_power.
diff --git a/src/gl-render.cc b/src/gl-render.cc
--- a/src/gl-render.cc
+++ b/src/gl-render.cc
@@ -3135,39 +3135,53 @@ opengl_renderer::make_marker_list (const
       break;
     }
 
   glEndList ();
 
   return ID;
 }
 
-Matrix
-opengl_renderer::render_text (const std::string& txt,
-			    double x, double y, double z,
-			    int halign, int valign, double rotation)
+void
+opengl_renderer::text_to_pixels (const std::string& txt,
+				 double rotation,
+				 uint8NDArray& pixels,
+				 Matrix& bbox,
+				 int& rot_mode)
 {
-#if HAVE_FREETYPE
-  if (txt.empty ())
-    return Matrix (1, 4, 0.0);
-
   // FIXME: clip "rotation" between 0 and 360
 
-  int rot_mode = ft_render::ROTATION_0;
+  rot_mode = ft_render::ROTATION_0;
 
   if (rotation == 90.0)
     rot_mode = ft_render::ROTATION_90;
   else if (rotation == 180.0)
     rot_mode = ft_render::ROTATION_180;
   else if (rotation == 270.0)
     rot_mode = ft_render::ROTATION_270;
 
   text_element *elt = text_parser_none ().parse (txt);
+  pixels = text_renderer.render (elt, bbox, rot_mode);
+  delete elt;
+}
+
+Matrix
+opengl_renderer::render_text (const std::string& txt,
+			    double x, double y, double z,
+			    int halign, int valign, double rotation)
+{
+#if HAVE_FREETYPE
+  if (txt.empty ())
+    return Matrix (1, 4, 0.0);
+
   Matrix bbox;
-  uint8NDArray pixels = text_renderer.render (elt, bbox, rot_mode);
+  uint8NDArray pixels;
+  int rot_mode;
+  text_to_pixels (txt, rotation, pixels, bbox, rot_mode);
+
   int x0 = 0, y0 = 0;
   int w = bbox(2), h = bbox(3);
 
   if (pixels.numel () == 0)
     {
       // nothing to render
       return bbox;
     }
@@ -3211,18 +3225,16 @@ opengl_renderer::render_text (const std:
   glRasterPos3d (x, y, z);
   glBitmap(0, 0, 0, 0, x0, y0, 0);
   glDrawPixels (w, h,
 		GL_RGBA, GL_UNSIGNED_BYTE, pixels.data ());
   glDisable (GL_ALPHA_TEST);
   if (! blend)
     glDisable (GL_BLEND);
 
-  delete elt;
-
   return bbox;
 #else
   ::warning ("render_text: cannot render text, Freetype library not available");
   return Matrix (1, 4, 0.0);
 #endif
 }
 
 #endif
diff --git a/src/gl-render.h b/src/gl-render.h
--- a/src/gl-render.h
+++ b/src/gl-render.h
@@ -90,19 +90,25 @@ protected:
   virtual void set_clipping (bool on);
   virtual void set_font (const base_properties& props);
 
   virtual void init_marker (const std::string& m, double size, float width);
   virtual void end_marker (void);
   virtual void draw_marker (double x, double y, double z,
 			    const Matrix& lc, const Matrix& fc);
 
+  virtual void text_to_pixels (const std::string& txt,
+			       double rotation,
+			       uint8NDArray& pixels,
+			       Matrix& bbox,
+			       int& rot_mode);
+
   virtual Matrix render_text (const std::string& txt,
-			    double x, double y, double z,
-			    int halign, int valign, double rotation = 0.0);
+			      double x, double y, double z,
+			      int halign, int valign, double rotation = 0.0);
 
 private:
   opengl_renderer (const opengl_renderer&) { }
 
   opengl_renderer& operator = (const opengl_renderer&)
     { return *this; }
 
   bool is_nan_or_inf (double x, double y, double z) const
diff --git a/src/gl2ps-renderer.cc b/src/gl2ps-renderer.cc
--- a/src/gl2ps-renderer.cc
+++ b/src/gl2ps-renderer.cc
@@ -71,20 +71,18 @@ glps_renderer::draw (const graphics_obje
     opengl_renderer::draw (go); 
 }
 
 Matrix 
 glps_renderer::render_text (const std::string& txt,
 			    double x, double y, double z,
 			    int ha, int va, double rotation)
 {
-  Matrix retval = Matrix (1, 4, 0.0);
-
   if (txt.empty ())
-    return retval;
+    return Matrix (1, 4, 0.0);
 
   int gl2psa=GL2PS_TEXT_BL;
   if (ha == 0)
     {
       if (va == 0 || va == 3)
 	gl2psa=GL2PS_TEXT_BL;
       else if (va == 2)
 	gl2psa=GL2PS_TEXT_TL;
@@ -109,23 +107,31 @@ glps_renderer::render_text (const std::s
       else if (va == 1)
 	gl2psa=GL2PS_TEXT_C;
     }
 
   glRasterPos3d (x, y, z);
 
   gl2psTextOpt (txt.c_str (), fontname.c_str (), fontsize, gl2psa, rotation);
 
-  // FIXME -- we have no way of getting a bounding box from gl2ps
-  return retval;
+  // FIXME? -- we have no way of getting a bounding box from gl2ps, so
+  // we use freetype
+  Matrix bbox;
+  uint8NDArray pixels;
+  int rot_mode;
+  text_to_pixels (txt, rotation, pixels, bbox, rot_mode);
+
+  return bbox;
 }
 
 void
 glps_renderer::set_font (const base_properties& props)
 {
+  opengl_renderer::set_font (props);
+
   fontsize = props.get ("fontsize").double_value ();
 
   caseless_str fn = props.get ("fontname").string_value ();
   fontname = "";
   if (fn == "times" || fn == "times-roman")
     fontname = "Times-Roman";
   else if (fn == "courier")
     fontname = "Courier";
