# HG changeset patch
# User Rik <rik@octave.org>
# Date 1435593382 25200
#      Mon Jun 29 08:56:22 2015 -0700
# Node ID b6a59cc96bfa22cb92dc63a0b3cdb3f726dbe3ed
# Parent  13ede127ec9aa80b744aeb2a08fc9990a5eba6bf
Process backslashes in regexprep replacement strings in Matlab compatible fashion (bug #45407).

* NEWS: Announce change.  Backslashed escaped ordinary characters are now
replaced by the character itself with no emitted warning.

* regexp.cc (do_regexp_rep_string_escapes): Change default case statement to
silently convert unrecognized escaped character to the bare character itself.
Pass the special sequences of '$' and '\' through since these must be handled
by lo-regexp.cc.
* regexp.cc (Fregexprep): Add BIST tests for new behavior.

diff --git a/NEWS b/NEWS
--- a/NEWS
+++ b/NEWS
@@ -7,16 +7,23 @@ Summary of important user-visible change
     sequences in single-quoted strings for Matlab compatibility.
 
  ** Special octal and hex escape sequences for the pattern and replacement
     strings in regular expressions are now interpreted for Matlab compatibility.
 
     octal: '\oNNN' or '\o{NNN}'
     hex  : '\xNN'  or '\x{NN}'
 
+ ** Unknown escape sequences in the replacement string for regexprep are now
+    substituted with their unescaped version and no warning is emitted.
+    This change was made for Matlab compatibility.
+
+    Example: regexprep ('a', 'a', 'x\yz')
+             => 'xyz'
+
  ** mkfifo now interprets the MODE argument as an octal, not decimal, integer.
     This is consistent with the equivalent shell command. 
 
  ** The griddata function no longer plots the interpolated mesh if no output
     argument is requested, instead the vector or array of interpolated values
     is always returned for Matlab compatibility.
 
  ** The surfnorm function now returns unnormalized (magnitude != 1) normal
diff --git a/libinterp/corefcn/regexp.cc b/libinterp/corefcn/regexp.cc
--- a/libinterp/corefcn/regexp.cc
+++ b/libinterp/corefcn/regexp.cc
@@ -240,19 +240,30 @@ do_regexp_rep_string_escapes (const std:
  converting to '\\0'");
                   tmpi = 0;
                 }
               retval[i] = tmpi;
               j = k - 1;
               break;
             }
 
-            default:  // pass escape sequence through
-              retval[i] = '\\';
-              retval[++i] = s[j];
+            // Both dollar sign (for capture buffer) and backslash are
+            // passed through with their escape backslash.  The processing
+            // for these must occur during the actual replacement operation
+            // in lo-regexp.cc.
+            case '$':  // pass dollar sign through with escape
+              retval[i] = '\\'; retval[++i] = '$';
+              break;
+
+            case '\\': // pass backslash through with escape
+              retval[i] = '\\'; retval[++i] = '\\';
+              break;
+
+            default:   // convert escaped character to unescaped char
+              retval[i] = s[j];
               break;
             }
         }
       else
         {
           retval[i] = s[j];
         }
 
@@ -1146,16 +1157,22 @@ are zero or more @qcode{'b'} characters 
 %! assert (b, {"foo bar"});
 %!test
 %! [a, b] = regexp (str, "[o]+", "match", "split");
 %! assert (a, {"oo"});
 %! assert (b, {"f", " bar"});
 
 %!assert (regexp ("\n", '\n'), 1);
 %!assert (regexp ("\n", "\n"), 1);
+
+%!test  # Bug #45407, escape sequences are silently converted
+%! assert (regexprep ('s', 's', 'x\.y'), 'x.y');
+%! assert (regexprep ('s', '(s)', 'x\$1y'), 'x$1y');
+%! assert (regexprep ('s', '(s)', 'x\\$1y'), 'x\sy');
+
 */
 
 DEFUN (regexpi, args, nargout,
        "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {[@var{s}, @var{e}, @var{te}, @var{m}, @var{t}, @var{nm}, @var{sp}] =} regexpi (@var{str}, @var{pat})\n\
 @deftypefnx {Built-in Function} {[@dots{}] =} regexpi (@var{str}, @var{pat}, \"@var{opt1}\", @dots{})\n\
 \n\
 Case insensitive regular expression string matching.\n\
