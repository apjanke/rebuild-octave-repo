# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1233840870 -3600
#      Thu Feb 05 14:34:30 2009 +0100
# Node ID a2bcd96b9344365d3d8b1b45a996adcbc6873356
# Parent  280fae940bb0ea1e6a03c0f73f13a046494a915e
use allocators for idx_vector_rep subclasses

diff --git a/liboctave/idx-vector.cc b/liboctave/idx-vector.cc
--- a/liboctave/idx-vector.cc
+++ b/liboctave/idx-vector.cc
@@ -55,16 +55,18 @@ gripe_invalid_range (void)
 
 static void
 gripe_index_out_of_range (void)
 {
   (*current_liboctave_error_handler)
     ("internal error: idx_vector index out of range.");
 }
 
+DEFINE_OCTAVE_ALLOCATOR(idx_vector::idx_colon_rep);
+
 idx_vector::idx_colon_rep::idx_colon_rep (char c)
 {
   if (c != ':')
     {
       (*current_liboctave_error_handler)
         ("internal error: invalid character converted to idx_vector. Must be ':'.");
       err = true;
     }
@@ -83,16 +85,18 @@ idx_vector::idx_colon_rep::checkelem (oc
 }
 
 std::ostream& 
 idx_vector::idx_colon_rep::print (std::ostream& os) const
 {
   return os << ":";
 }
 
+DEFINE_OCTAVE_ALLOCATOR(idx_vector::idx_range_rep);
+
 idx_vector::idx_range_rep::idx_range_rep (octave_idx_type _start, octave_idx_type _limit,
                                           octave_idx_type _step)
  : start(_start), len (_step ? (_limit - _start) / _step : -1), step (_step)
 {
   if (len < 0)
     {
       gripe_invalid_range ();
       err = true;
@@ -204,16 +208,18 @@ template <class T>
 inline octave_idx_type
 convert_index (octave_int<T> x, bool& conv_error, 
                octave_idx_type& ext)
 {
   octave_idx_type i = octave_int<octave_idx_type> (x).value ();
   return convert_index (i, conv_error, ext);
 }
 
+DEFINE_OCTAVE_ALLOCATOR(idx_vector::idx_scalar_rep);
+
 template <class T>
 idx_vector::idx_scalar_rep::idx_scalar_rep (T x)
 {
   octave_idx_type dummy;
   data = convert_index (x, err, dummy);
   if (err) gripe_invalid_index ();
 }
 
@@ -234,16 +240,18 @@ idx_vector::idx_scalar_rep::checkelem (o
   return data;
 }
 
 std::ostream& idx_vector::idx_scalar_rep::print (std::ostream& os) const
 {
   return os << data;
 }
 
+DEFINE_OCTAVE_ALLOCATOR(idx_vector::idx_vector_rep);
+
 template <class T>
 idx_vector::idx_vector_rep::idx_vector_rep (const Array<T>& nda)
   : data (0), len (nda.numel ()), ext (0), aowner (0), orig_dims (nda.dims ())
 {
   if (len != 0)
     {
       octave_idx_type *d = new octave_idx_type[len];
       for (octave_idx_type i = 0; i < len; i++)
diff --git a/liboctave/idx-vector.h b/liboctave/idx-vector.h
--- a/liboctave/idx-vector.h
+++ b/liboctave/idx-vector.h
@@ -26,16 +26,17 @@ along with Octave; see the file COPYING.
 #define octave_idx_vector_h 1
 
 #include <iostream>
 #include <algorithm>
 #include <cassert>
 
 #include "dim-vector.h"
 #include "oct-inttypes.h"
+#include "oct-alloc.h"
 
 template<class T> class Array;
 template<class T> class Sparse;
 class Range;
 
 // Design rationale:
 // idx_vector is a reference-counting, polymorphic pointer, that can contain
 // 4 types of index objects: a magic colon, a range, a scalar, or an index vector.
@@ -132,16 +133,18 @@ private:
 
     bool is_colon_equiv (octave_idx_type) const
       { return true; }
 
     std::ostream& print (std::ostream& os) const;
 
   private:
 
+    DECLARE_OCTAVE_ALLOCATOR
+
     // No copying!
     idx_colon_rep (const idx_colon_rep& idx);
   };
 
   // To distinguish the "direct" constructors that blindly trust the data.
   enum direct { DIRECT };
 
   // The integer range index.
@@ -185,16 +188,18 @@ private:
     octave_idx_type get_start (void) const { return start; }
 
     octave_idx_type get_step (void) const { return step; }
 
     std::ostream& print (std::ostream& os) const;
 
   private:
 
+    DECLARE_OCTAVE_ALLOCATOR
+
     // No copying!
     idx_range_rep (const idx_range_rep& idx);
 
     octave_idx_type start, len, step;
 
   };
 
   // The integer scalar index.
@@ -236,16 +241,18 @@ private:
       { return dim_vector (1, 1); }
 
     octave_idx_type get_data (void) const { return data; }
 
     std::ostream& print (std::ostream& os) const;
 
   private:
 
+    DECLARE_OCTAVE_ALLOCATOR
+
     // No copying!
     idx_scalar_rep (const idx_scalar_rep& idx);
 
     octave_idx_type data;
 
   };
 
   // The integer vector index.
@@ -294,16 +301,18 @@ private:
       { return orig_dims; }
 
     const octave_idx_type *get_data (void) const { return data; }
 
     std::ostream& print (std::ostream& os) const;
 
   private:
 
+    DECLARE_OCTAVE_ALLOCATOR
+
     // No copying!
     idx_vector_rep (const idx_vector_rep& idx);
 
     const octave_idx_type *data;
     octave_idx_type len, ext;
 
     // This is a trick to allow user-given zero-based arrays to be used as indices
     // without copying. If the following pointer is nonzero, we do not own the data,
