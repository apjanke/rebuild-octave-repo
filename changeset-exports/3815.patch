# HG changeset patch
# User jwe
# Date 987709854 0
#      Thu Apr 19 19:50:54 2001 +0000
# Node ID c554ad71bafc8bac6828be768a86f9ed46740ee0
# Parent  fb01838d0f380ed03fdc7db338c863bc9870aed9
[project @ 2001-04-19 19:50:52 by jwe]

diff --git a/ChangeLog b/ChangeLog
--- a/ChangeLog
+++ b/ChangeLog
@@ -1,8 +1,13 @@
+2001-04-19  David Livings <david.livings@asa.co.uk>
+
+	* Makeconf.in (mk-libdir-link): Omit check for $(octlibdir)/octave
+	existing as a directory.
+
 2001-02-28  Albert Chin-A-Young  <china@thewrittenword.com>
 
 	* configure.in: Check for getpwnam in libsun only after checking
 	default libraries first.  Check for gethostname in libsocket only
 	after checking default libraries first.	
 
 2001-02-22  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
diff --git a/Makeconf.in b/Makeconf.in
--- a/Makeconf.in
+++ b/Makeconf.in
@@ -476,17 +476,13 @@ endef
 # of $libdir.
 
 define mk-libdir-link
 src=`echo $(octlibdir) | sed 's|^$(libdir)/*||'` ; \
 echo $$src ; \
 if [ "$$src" = "octave" ] ; then \
   true ; \
 else \
-  if [ -d "$(libdir)/octave" ] ; then \
-    true ; \
-  else \
-    cd $(libdir) ; \
-    rm -f octave ; \
-    $(LN_S) $$src octave ; \
-  fi ; \
+  cd $(libdir) ; \
+  rm -f octave ; \
+  $(LN_S) $$src octave ; \
 fi
 endef
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,23 @@
+2001-04-19  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* parse.y (fold (tree_binary_expression *)):
+	Set discard_error_messages here instead of buffer_error_messages.
+	Don't add clear_global_error_variable to the unwind_protect stack.
+	(fold (tree_unary_expression *)): Likewise.
+	(finish_colon_expression): Likewise.
+	(finish_matrix): Likewise.
+
+	* error.cc (panic): Set discard_error_messages to false here.
+	(verror): Return immediately if discard_error_messages is true.
+
+	* error.cc (discard_error_messages): New global variable.
+	* error.h: Provide declaration.
+
 2001-04-18  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* lex.l: If unexpected character is EOF, report EOF error instead
 	of invalid character error.
 
 2001-04-18  Mumit Khan  <khan@nanotech.wisc.edu>
 
 	* load-save.cc (read_mat5_binary_element): Cast arguments to the
diff --git a/src/error.cc b/src/error.cc
--- a/src/error.cc
+++ b/src/error.cc
@@ -63,16 +63,19 @@ int error_state = 0;
 // Current warning state.
 int warning_state = 0;
 
 // Tell the error handler whether to print messages, or just store
 // them for later.  Used for handling errors in eval() and
 // the `unwind_protect' statement.
 bool buffer_error_messages = false;
 
+// TRUE means error messages are turned off.
+bool discard_error_messages = false;
+
 // The message buffer.
 static std::ostrstream *error_message_buffer = 0;
 
 // Warning messages are never buffered.
 // XXX FIXME XXX -- we should provide another way to turn them off...
 
 static void
 vwarning (const char *name, const char *fmt, va_list args)
@@ -94,16 +97,19 @@ vwarning (const char *name, const char *
   std::cerr << msg;
 
   delete [] msg;
 }
 
 static void
 verror (const char *name, const char *fmt, va_list args)
 {
+  if (discard_error_messages)
+    return;
+
   if (! buffer_error_messages)
     flush_octave_stdout ();
 
   bool to_beep_or_not_to_beep_p = Vbeep_on_error && ! error_state;
 
   std::ostrstream output_buf;
 
   if (to_beep_or_not_to_beep_p)
@@ -353,16 +359,17 @@ parse_error (const char *fmt, ...)
 }
 
 void
 panic (const char *fmt, ...)
 {
   va_list args;
   va_start (args, fmt);
   buffer_error_messages = false;
+  discard_error_messages = false;
   verror ("panic", fmt, args);
   va_end (args);
   abort ();
 }
 
 typedef void (*error_fun)(const char *, ...);
 
 extern octave_value_list Fsprintf (const octave_value_list&, int);
diff --git a/src/error.h b/src/error.h
--- a/src/error.h
+++ b/src/error.h
@@ -42,15 +42,18 @@ extern int error_state;
 // Current warning state.
 extern int warning_state;
 
 // Tell the error handler whether to print messages, or just store
 // them for later.  Used for handling errors in eval() and
 // the `unwind_protect' statement.
 extern bool buffer_error_messages;
 
+// TRUE means error messages are turned off.
+extern bool discard_error_messages;
+
 #endif
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
diff --git a/src/parse.y b/src/parse.y
--- a/src/parse.y
+++ b/src/parse.y
@@ -1649,20 +1649,18 @@ static tree_expression *
 fold (tree_binary_expression *e)
 {
   tree_expression *retval = e;
 
   unwind_protect::begin_frame ("fold_binary_expression");
 
   unwind_protect_int (error_state);
 
-  unwind_protect_bool (buffer_error_messages);
-  buffer_error_messages = true;
-
-  unwind_protect::add (clear_global_error_variable, 0);
+  unwind_protect_bool (discard_error_messages);
+  discard_error_messages = true;
 
   tree_expression *op1 = e->lhs ();
   tree_expression *op2 = e->rhs ();
 
   if (op1->is_constant () && op2->is_constant ())
     {
       octave_value tmp = e->rvalue ();
 
@@ -1699,20 +1697,18 @@ static tree_expression *
 fold (tree_unary_expression *e)
 {
   tree_expression *retval = e;
 
   unwind_protect::begin_frame ("fold_unary_expression");
 
   unwind_protect_int (error_state);
 
-  unwind_protect_bool (buffer_error_messages);
-  buffer_error_messages = true;
-
-  unwind_protect::add (clear_global_error_variable, 0);
+  unwind_protect_bool (discard_error_messages);
+  discard_error_messages = true;
 
   tree_expression *op = e->operand ();
 
   if (op->is_constant ())
     {
       octave_value tmp = e->rvalue ();
 
       if (! (error_state || warning_state))
@@ -1750,20 +1746,18 @@ static tree_expression *
 finish_colon_expression (tree_colon_expression *e)
 {
   tree_expression *retval = e;
 
   unwind_protect::begin_frame ("finish_colon_expression");
 
   unwind_protect_int (error_state);
 
-  unwind_protect_bool (buffer_error_messages);
-  buffer_error_messages = true;
-
-  unwind_protect::add (clear_global_error_variable, 0);
+  unwind_protect_bool (discard_error_messages);
+  discard_error_messages = true;
 
   tree_expression *base = e->base ();
   tree_expression *limit = e->limit ();
   tree_expression *incr = e->increment ();
 
   if (base)
     {
       if (limit)
@@ -2628,20 +2622,18 @@ static tree_expression *
 finish_matrix (tree_matrix *m)
 {
   tree_expression *retval = m;
 
   unwind_protect::begin_frame ("finish_matrix");
 
   unwind_protect_int (error_state);
 
-  unwind_protect_bool (buffer_error_messages);
-  buffer_error_messages = true;
-
-  unwind_protect::add (clear_global_error_variable, 0);
+  unwind_protect_bool (discard_error_messages);
+  discard_error_messages = true;
 
   if (m->all_elements_are_constant ())
     {
       octave_value tmp = m->rvalue ();
 
       if (! (error_state || warning_state))
 	{
 	  tree_constant *tc_retval = new tree_constant (tmp);
@@ -3523,17 +3515,19 @@ variable @code{default_eval_print_flag}.
       if (nargin > 1 && (parse_status != 0 || error_state))
 	{
 	  error_state = 0;
 
 	  // Set up for letting the user print any messages from
 	  // errors that occurred in the first part of this eval().
 
 	  buffer_error_messages = false;
+
 	  bind_global_error_variable ();
+
 	  unwind_protect::add (clear_global_error_variable, 0);
 
 	  eval_string (args(1), 0, parse_status, nargout);
 
 	  retval = octave_value_list ();
 	}
 
       unwind_protect::run_frame ("Feval");
