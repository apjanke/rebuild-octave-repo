# HG changeset patch
# User David Bateman <dbateman@free.fr>
# Date 1206723151 14400
#      Fri Mar 28 12:52:31 2008 -0400
# Node ID aead4b9d026bff7cd8ae9bfd1f8ea84827bbabca
# Parent  0dff8d9bf2297a731a04ce6ae2144f4876f9426b
Fix axis handle treatment in plotyy

diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,13 +1,16 @@
 2008-03-27  David Bateman  <dbateman@free.fr>
 
 	* plot/__plt2__.m: Test if args are empty first so that
 	plot(zeros(1,0),zeros(1,0)) works as expected.
 
+	* plot/plotyy.m: The axis handle is a two element vector and
+	so needs special treatment. Call newplot for the second axis.
+
 2008-03-27  Bill Denney  <bill@denney.ws>
 
 	* time/datenum.m: Allow vector inputs in any orientation.
 
 	* strings/validatestring.m: New function.
 	* strings/Makefile.in (SOURCES): Add it to the list.
 
 	* general/nargoutchk.m: New function.
diff --git a/scripts/plot/plotyy.m b/scripts/plot/plotyy.m
--- a/scripts/plot/plotyy.m
+++ b/scripts/plot/plotyy.m
@@ -50,26 +50,54 @@
 ## ylabel (ax(1), "Axis 1");
 ## ylabel (ax(2), "Axis 2");
 ## @end group
 ## @end example
 ## @end deftypefn
 
 function [Ax, H1, H2] = plotyy (varargin)
 
-  [ax, varargin] = __plt_get_axis_arg__ ("plotyy", varargin{:});
+  ## Don't use __plt_get_axis_arg__ here as ax is a two vector for plotyy
+  if (nargin > 1 && length (varargin{1}) == 2 && ishandle(varargin{1}(1)) 
+      &&  ishandle(varargin{1}(2)) && 
+      all (floor (varargin{1}) != varargin{1}))
+    obj1 = get (varargin{1}(1));
+    obj2 = get (varargin{1}(2));
+    if (strcmp (obj1.type, "axes") || strcmp (obj2.type, "axes"))
+      ax = [obj1, obj2];
+      varargin(1) = [];
+      if (isempty (varargin))
+	varargin = {};
+      endif
+    else
+      error ("plotyy: expecting first argument to be axes handle");
+    endif
+  else
+    f = get (0, "currentfigure");
+    if (isempty (f))
+      ax(1) = axes ();
+      ax(2) = axes ();
+    else
+      ax = get (f, "children");
+      for i = 3 : length (ax)
+	delete (ax (i));
+      endfor
+      ax = ax(1:2);
+    endif
+    if (nargin < 2)
+      varargin = {};
+    endif
+  endif 
 
   if (nargin < 4)
     print_usage ();
   endif
 
   oldh = gca ();
   unwind_protect
-    axes (ax);
-    newplot ();
     [ax, h1, h2] = __plotyy__ (ax, varargin{:});
   unwind_protect_cleanup
     axes (oldh);
   end_unwind_protect
 
   if (nargout > 0)
     Ax = ax;
     H1 = h1;
@@ -87,26 +115,30 @@ function [ax, h1, h2] = __plotyy__ (ax, 
   if (nargin > 6)
     fun2 = varargin{2};
   else
     fun2 = fun1;
   endif
 
   xlim = [min([x1(:); x2(:)]), max([x1(:); x2(:)])];
 
+  axes (ax(1));
+  newplot ();
   h1 = feval (fun1, x1, y1);
 
   set (ax(1), "ycolor", getcolor (h1(1)));
   set (ax(1), "position", [0.11 0.13 0.78 0.73]);
   set (ax(1), "activepositionproperty", "position");
   set (ax(1), "xlim", xlim);
 
   cf = gcf ();
   set (cf, "nextplot", "add");
-  ax(2) = axes ();
+  axes (ax(2));
+  newplot ();
+
   colors = get (ax(1), "colororder");
   set (ax(2), "colororder", [colors(2:end,:); colors(1,:)]);
 
   h2 = feval (fun2, x2, y2);
   set (ax(2), "yaxislocation", "right");
   set (ax(2), "ycolor", getcolor (h2(1)));
   set (ax(2), "position", get (ax(1), "position"));
   set (ax(2), "activepositionproperty", "position");
