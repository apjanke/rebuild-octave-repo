# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1251911466 14400
#      Wed Sep 02 13:11:06 2009 -0400
# Node ID dfc68e6d8741270cdb654446e6aa6e9d41eb7a51
# Parent  4dd8fc7c106c6177bb11d5833f70e409794af9dc
avoid some gcc warnings

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,16 @@
+2009-09-02  John W. Eaton  <jwe@octave.org>
+
+	* graphics.cc (axes::properties::calc_ticklabels):
+	Avoid unused parameter warning from gcc.
+
+	* ov-perm.cc (octave_perm_matrix::save_binary,
+	octave_perm_matrix::load_binary): Avoid shadow warning from gcc.
+
 2008-09-01  David Bateman  <dbateman@free.fr>
 
 	* DLD-FUNCTIONS/eig.cc (Feigs): Correct nesting error in option
 	parsing that prevented the use of a function for generalized
 	eigenvalue problems.
 
 2009-08-30  Jaroslav Hajek  <highegg@gmail.com>
 
diff --git a/src/graphics.cc b/src/graphics.cc
--- a/src/graphics.cc
+++ b/src/graphics.cc
@@ -3508,17 +3508,17 @@ axes::properties::calc_ticks_and_lims (a
 	tmp_ticks (i) = std::pow (10., tmp_ticks (i));
     }
 
   ticks = tmp_ticks;
 }
 
 void
 axes::properties::calc_ticklabels (const array_property& ticks,
-				   any_property& labels, bool logscale)
+				   any_property& labels, bool /*logscale*/)
 {
   Matrix values = ticks.get ().matrix_value ();
   Cell c (values.dims ());
   std::ostringstream os;
 
   for (int i = 0; i < values.numel (); i++)
     {
       os.str (std::string ());
diff --git a/src/ov-perm.cc b/src/ov-perm.cc
--- a/src/ov-perm.cc
+++ b/src/ov-perm.cc
@@ -303,36 +303,36 @@ octave_perm_matrix::load_ascii (std::ist
 
   return success;
 }
 
 bool 
 octave_perm_matrix::save_binary (std::ostream& os, bool&)
 {
 
-  int32_t size = matrix.rows ();
+  int32_t sz = matrix.rows ();
   bool colp = matrix.is_col_perm ();
-  os.write (reinterpret_cast<char *> (&size), 4);
+  os.write (reinterpret_cast<char *> (&sz), 4);
   os.write (reinterpret_cast<char *> (&colp), 1);
-  os.write (reinterpret_cast<const char *> (matrix.data ()), matrix.byte_size());
+  os.write (reinterpret_cast<const char *> (matrix.data ()), matrix.byte_size ());
 
   return true;
 }
 
 bool
 octave_perm_matrix::load_binary (std::istream& is, bool swap,
                                  oct_mach_info::float_format )
 {
-  int32_t size;
+  int32_t sz;
   bool colp;
-  if (! (is.read (reinterpret_cast<char *> (&size), 4)
+  if (! (is.read (reinterpret_cast<char *> (&sz), 4)
          && is.read (reinterpret_cast<char *> (&colp), 1)))
     return false;
 
-  MArray<octave_idx_type> m (size);
+  MArray<octave_idx_type> m (sz);
 
   if (! is.read (reinterpret_cast<char *> (m.fortran_vec ()), m.byte_size ()))
     return false;
 
   if (swap)
     {
       int nel = m.numel ();
       for (int i = 0; i < nel; i++) 
