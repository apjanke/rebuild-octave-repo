# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1294301424 18000
#      Thu Jan 06 03:10:24 2011 -0500
# Node ID 5eb10763069f36bc01a2b437962e796ac8d92520
# Parent  93b8c7ca211fb8d96d1b7cf5425458e3aae93221
substitute and use LAPACK_LIBS in mkoctfile script

diff --git a/ChangeLog b/ChangeLog
--- a/ChangeLog
+++ b/ChangeLog
@@ -1,8 +1,13 @@
+2011-01-06  John W. Eaton  <jwe@octave.org>
+
+	* mkoctfile.in, mkoctfile.cc.in: Substitute and use LAPACK_LIBS.
+	Bug #32009.
+
 2010-01-04  Rik  <octave@nomad.inbox5.com>
 
 	* README.MacOS: Update CFLAGS recommendation to use -O2.
 
 2010-01-04  Rik  <octave@nomad.inbox5.com>
 
 	* README.gnuplot: Update recommendation to version 4.4.
 
diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,14 @@
+2011-01-06  John W. Eaton  <jwe@octave.org>
+
+	* oct-md5.cc (oct_md5_file): Tag call to fclose with gnulib::.
+	* Range.cc (tfloor): Tag calls to floor with gnulib::.
+	* lo-mappers.h (xfloor): Tag call to floor with gnulib::
+
 2010-12-20  John W. Eaton  <jwe@octave.org>
 
 	* lo-mappers.h (xrem, xmod): Declare temporary result from
 	multiplication volatile.
 
 2010-12-15  John W. Eaton  <jwe@octave.org>
 
 	Bug #31883.
diff --git a/liboctave/Range.cc b/liboctave/Range.cc
--- a/liboctave/Range.cc
+++ b/liboctave/Range.cc
@@ -433,21 +433,21 @@ tfloor (double x, double ct)
 
   double q = 1.0;
 
   if (x < 0.0)
     q = 1.0 - ct;
 
   double rmax = q / (2.0 - ct);
 
-  double t1 = 1.0 + floor (x);
+  double t1 = 1.0 + gnulib::floor (x);
   t1 = (ct / q) * (t1 < 0.0 ? -t1 : t1);
   t1 = rmax < t1 ? rmax : t1;
   t1 = ct > t1 ? ct : t1;
-  t1 = floor (x + t1);
+  t1 = gnulib::floor (x + t1);
 
   if (x <= 0.0 || (t1 - x) < rmax)
     return t1;
   else
     return t1 - 1.0;
 }
 
 static inline double
diff --git a/liboctave/lo-mappers.h b/liboctave/lo-mappers.h
--- a/liboctave/lo-mappers.h
+++ b/liboctave/lo-mappers.h
@@ -29,17 +29,17 @@ along with Octave; see the file COPYING.
 
 #include "oct-cmplx.h"
 #include "lo-math.h"
 
 // Double Precision 
 extern OCTAVE_API double xtrunc (double x);
 inline double xcopysign (double x, double y) { return copysign (x, y); }
 inline double xceil (double x) { return ceil (x); }
-inline double xfloor (double x) { return floor (x); }
+inline double xfloor (double x) { return gnulib::floor (x); }
 inline double arg (double x) { return atan2 (0.0, x); }
 inline double conj (double x) { return x; }
 inline double fix (double x) { return xtrunc (x); }
 inline double imag (double) { return 0.0; }
 inline double real (double x) { return x; }
 extern OCTAVE_API double xround (double x);
 extern OCTAVE_API double xroundb (double x);
 extern OCTAVE_API double signum (double x);
diff --git a/liboctave/oct-md5.cc b/liboctave/oct-md5.cc
--- a/liboctave/oct-md5.cc
+++ b/liboctave/oct-md5.cc
@@ -65,17 +65,17 @@ oct_md5_file (const std::string file)
   FILE *ifile = fopen (file.c_str (), "rb");
 
   if (ifile)
     {
       unsigned char buf[16];
 
       int errflag = md5_stream (ifile, buf);
 
-      fclose (ifile);
+      gnulib::fclose (ifile);
 
       if (! errflag)
         retval = oct_md5_result_to_str (buf);
       else
         (*current_liboctave_error_handler) ("internal error in md5_stream");
     }
   else
     (*current_liboctave_error_handler) ("unable to open file `%s' for reading",
diff --git a/mkoctfile.cc.in b/mkoctfile.cc.in
--- a/mkoctfile.cc.in
+++ b/mkoctfile.cc.in
@@ -220,16 +220,17 @@ initialize (void)
   vars["DL_LDFLAGS"] = get_variable ("DL_LDFLAGS", %OCTAVE_CONF_MKOCTFILE_DL_LDFLAGS%);
 
   vars["RLD_FLAG"] = get_variable ("RLD_FLAG", %OCTAVE_CONF_RLD_FLAG%);
   vars["RDYNAMIC_FLAG"] = get_variable ("RDYNAMIC_FLAG", %OCTAVE_CONF_RDYNAMIC_FLAG%);
   vars["LIBOCTAVE"] = "-loctave";
   vars["LIBOCTINTERP"] = "-loctinterp";
   vars["READLINE_LIBS"] = "-lreadline";
   vars["LIBCRUFT"] = "-lcruft";
+  vars["LAPACK_LIBS"] = get_variable ("LAPACK_LIBS", %OCTAVE_CONF_LAPACK_LIBS%);
   vars["BLAS_LIBS"] = get_variable ("BLAS_LIBS", %OCTAVE_CONF_BLAS_LIBS%);
   vars["FFTW3_LDFLAGS"] = get_variable ("FFTW3_LDFLAGS", %OCTAVE_CONF_FFTW3_LDFLAGS%);
   vars["FFTW3_LIBS"] = get_variable ("FFTW3_LIBS", %OCTAVE_CONF_FFTW3_LIBS%);
   vars["FFTW3F_LDFLAGS"] = get_variable ("FFTW3F_LDFLAGS", %OCTAVE_CONF_FFTW3F_LDFLAGS%);
   vars["FFTW3F_LIBS"] = get_variable ("FFTW3F_LIBS", %OCTAVE_CONF_FFTW3F_LIBS%);
   vars["LIBS"] = get_variable ("LIBS", %OCTAVE_CONF_LIBS%);
   vars["FLIBS"] = get_variable ("FLIBS", %OCTAVE_CONF_FLIBS%);
   vars["LD_CXX"] = get_variable ("LD_CXX", %OCTAVE_CONF_LD_CXX%);
@@ -293,32 +294,32 @@ static string help_msg =
 "  -g                      Enable debugging options for compilers.\n"
 "\n"
 "  -p VAR, --print VAR     Print configuration variable VAR.  Recognized\n"
 "                          variables are:\n"
 "\n"
 "			    ALL_CFLAGS                FLIBS\n"
 "			    ALL_CXXFLAGS              FPICFLAG\n"
 "			    ALL_FFLAGS                INCFLAGS\n"
-"			    ALL_LDFLAGS               LDFLAGS\n"
-"			    BLAS_LIBS                 LD_CXX\n"
-"			    CC                        LD_STATIC_FLAG\n"
-"			    CFLAGS                    LFLAGS\n"
-"			    CPICFLAG                  LIBCRUFT\n"
-"			    CPPFLAGS                  LIBOCTAVE\n"
-"			    CXX                       LIBOCTINTERP\n"
-"			    CXXFLAGS                  LIBS\n"
-"			    CXXPICFLAG                OCTAVE_LIBS\n"
-"			    DEPEND_EXTRA_SED_PATTERN  RDYNAMIC_FLAG\n"
-"			    DEPEND_FLAGS              READLINE_LIBS\n"
-"			    DL_LD                     RLD_FLAG\n"
-"			    DL_LDFLAGS                SED\n"
-"			    F77                       XTRA_CFLAGS\n"
-"			    FFLAGS                    XTRA_CXXFLAGS\n"
-"			    FFTW_LIBS\n"
+"			    ALL_LDFLAGS               LAPACK_LIBS\n"
+"			    BLAS_LIBS                 LDFLAGS\n"
+"			    CC                        LD_CXX\n"
+"			    CFLAGS                    LD_STATIC_FLAG\n"
+"			    CPICFLAG                  LFLAGS\n"
+"			    CPPFLAGS                  LIBCRUFT\n"
+"			    CXX                       LIBOCTAVE\n"
+"			    CXXFLAGS                  LIBOCTINTERP\n"
+"			    CXXPICFLAG                LIBS\n"
+"			    DEPEND_EXTRA_SED_PATTERN  OCTAVE_LIBS\n"
+"			    DEPEND_FLAGS              RDYNAMIC_FLAG\n"
+"			    DL_LD                     READLINE_LIBS\n"
+"			    DL_LDFLAGS                RLD_FLAG\n"
+"			    F77                       SED\n"
+"			    FFLAGS                    XTRA_CFLAGS\n"
+"			    FFTW_LIBS                 XTRA_CXXFLAGS\n"
 "\n"
 "  --link-stand-alone      Link a stand-alone executable file.\n"
 "\n"
 "  --mex                   Assume we are creating a MEX file.  Set the\n"
 "                          default output extension to \".mex\".\n"
 "\n"
 "  -s, --strip             Strip output file.\n"
 "\n"
@@ -738,19 +739,19 @@ main (int argc, char **argv)
 	  if (!vars["LD_CXX"].empty ())
 	    {
 	      string cmd = vars["LD_CXX"] + " " + vars["CPPFLAGS"] + " "
 		+ vars["ALL_CXXFLAGS"] + " " + vars["RDYNAMIC_FLAG"]
 		+ " " + vars["ALL_LDFLAGS"] + " " +  pass_on_options
 		+ " " + output_option + " " + objfiles + " " + libfiles
 		+ " " + ldflags + " " + vars["LFLAGS"] + " "
 		+ vars["RLD_FLAG"] + " " + vars["OCTAVE_LIBS"] + " "
-		+ vars["BLAS_LIBS"] + " " + vars["FFTW_LIBS"] + " "
-		+ vars["READLINE_LIBS"] + " " + vars["LIBS"] + " "
-		+ vars["FLIBS"];
+		+ vars["LAPACK_LIBS"] + " " vars["BLAS_LIBS"] + " "
+                + vars["FFTW_LIBS"] + " " + vars["READLINE_LIBS"] + " "
+                + vars["LIBS"] + " " + vars["FLIBS"];
 	      result = run_command (cmd);
 	    }
 	  else
 	    {
 	      cerr << "mkoctfile: no way to link stand-alone executable file"
 		   << endl;
 	      return 1;
 	    }
diff --git a/mkoctfile.in b/mkoctfile.in
--- a/mkoctfile.in
+++ b/mkoctfile.in
@@ -87,16 +87,17 @@ fi
 : ${DL_LDFLAGS=%OCTAVE_CONF_MKOCTFILE_DL_LDFLAGS%}
 
 : ${RLD_FLAG=%OCTAVE_CONF_RLD_FLAG%}
 : ${RDYNAMIC_FLAG=%OCTAVE_CONF_RDYNAMIC_FLAG%}
 : ${LIBOCTAVE=-loctave}
 : ${LIBOCTINTERP=-loctinterp}
 : ${READLINE_LIBS=-lreadline}
 : ${LIBCRUFT=-lcruft}
+: ${LAPACK_LIBS=%OCTAVE_CONF_LAPACK_LIBS%}
 : ${BLAS_LIBS=%OCTAVE_CONF_BLAS_LIBS%}
 : ${FFTW3_LDFLAGS=%OCTAVE_CONF_FFTW3_LDFLAGS%}
 : ${FFTW3_LIBS=%OCTAVE_CONF_FFTW3_LIBS%}
 : ${FFTW3F_LDFLAGS=%OCTAVE_CONF_FFTW3F_LDFLAGS%}
 : ${FFTW3F_LIBS=%OCTAVE_CONF_FFTW3F_LIBS%}
 : ${LIBS=%OCTAVE_CONF_LIBS%}
 : ${FLIBS=%OCTAVE_CONF_FLIBS%}
 : ${LD_CXX=%OCTAVE_CONF_LD_CXX%}
@@ -220,32 +221,32 @@ Options:
   -g                      Enable debugging options for compilers.
 
   -p VAR, --print VAR     Print configuration variable VAR.  Recognized
                           variables are:
 
 			    ALL_CFLAGS                FLIBS
 			    ALL_CXXFLAGS              FPICFLAG
 			    ALL_FFLAGS                INCFLAGS
-			    ALL_LDFLAGS               LDFLAGS
-			    BLAS_LIBS                 LD_CXX
-			    CC                        LD_STATIC_FLAG
-			    CFLAGS                    LFLAGS
-			    CPICFLAG                  LIBCRUFT
-			    CPPFLAGS                  LIBOCTAVE
-			    CXX                       LIBOCTINTERP
-			    CXXFLAGS                  LIBS
-			    CXXPICFLAG                OCTAVE_LIBS
-			    DEPEND_EXTRA_SED_PATTERN  RDYNAMIC_FLAG
-			    DEPEND_FLAGS              READLINE_LIBS
-			    DL_LD                     RLD_FLAG
-			    DL_LDFLAGS                SED
-			    F77                       XTRA_CFLAGS
-			    FFLAGS                    XTRA_CXXFLAGS
-			    FFTW_LIBS
+			    ALL_LDFLAGS               LAPACK_LIBS
+			    BLAS_LIBS                 LDFLAGS
+			    CC                        LD_CXX
+			    CFLAGS                    LD_STATIC_FLAG
+			    CPICFLAG                  LFLAGS
+			    CPPFLAGS                  LIBCRUFT
+			    CXX                       LIBOCTAVE
+			    CXXFLAGS                  LIBOCTINTERP
+			    CXXPICFLAG                LIBS
+			    DEPEND_EXTRA_SED_PATTERN  OCTAVE_LIBS
+			    DEPEND_FLAGS              RDYNAMIC_FLAG
+			    DL_LD                     READLINE_LIBS
+			    DL_LDFLAGS                RLD_FLAG
+			    F77                       SED
+			    FFLAGS                    XTRA_CFLAGS
+			    FFTW_LIBS                 XTRA_CXXFLAGS
 
   --link-stand-alone      Link a stand-alone executable file.
 
   --mex                   Assume we are creating a MEX file.  Set the
                           default output extension to ".mex".
 
   -s, --strip             Strip output file.
 
@@ -519,25 +520,25 @@ fi
 ##   eval $cmd
 ## fi
 
 # Link all the object files.
 
 if $link && [ -n "$objfiles" ]; then
   if $link_stand_alone; then
     if [ -n "$LD_CXX" ]; then
-      cmd="$LD_CXX $CPPFLAGS $ALL_CXXFLAGS $RDYNAMIC_FLAG $ALL_LDFLAGS $pass_on_options $output_option $objfiles $libfiles $ldflags $LFLAGS $RLD_FLAG $OCTAVE_LIBS $BLAS_LIBS $FFTW_LIBS $READLINE_LIBS $LIBS $FLIBS"
+      cmd="$LD_CXX $CPPFLAGS $ALL_CXXFLAGS $RDYNAMIC_FLAG $ALL_LDFLAGS $pass_on_options $output_option $objfiles $libfiles $ldflags $LFLAGS $RLD_FLAG $OCTAVE_LIBS $LAPACK_LIBS $BLAS_LIBS $FFTW_LIBS $READLINE_LIBS $LIBS $FLIBS"
       $dbg $cmd
       eval $cmd
     else
       echo "mkoctfile: no way to link stand-alone executable file" 1>&2
       exit 1
     fi
   else
-    LINK_DEPS="$LFLAGS $OCTAVE_LIBS $LDFLAGS $BLAS_LIBS $FFTW_LIBS $LIBS $FLIBS"
+    LINK_DEPS="$LFLAGS $OCTAVE_LIBS $LDFLAGS $LAPACK_LIBS $BLAS_LIBS $FFTW_LIBS $LIBS $FLIBS"
     cmd="$DL_LD $DL_LDFLAGS $pass_on_options -o $octfile $objfiles $libfiles $ldflags $LINK_DEPS"
     $dbg $cmd
     eval $cmd
   fi
 
 # Maybe strip it.
 
   if $strip; then
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,20 @@
+2011-01-06  John W. Eaton  <jwe@octave.org>
+
+	* DLD-FUNCTIONS/rand.cc (Frandperm): Tag call to floor with gnulib::.
+	* DLD-FUNCTIONS/gcd.cc (divide): Tag calls to floor with gnulib::.
+	* ov-scalar.cc (octave_scalar::map): Tag floor with gnulib::.
+	* ov-cell.cc (octave_cell::save_hdf5): Tag call to floor with gnulib::.
+	* pr-output.cc (engineering_exponent, num_digits,
+	octave_print_internal_template): Tag call to floor with gnulib::.
+	* graphics.cc: Consistently use std::ceil.
+	(axes::properties::get_axis_limits): Tag calls to floor with gnulib::.
+	(axes::properties::calc_ticks_and_lims): Likewise.
+
 2011-01-05  John W. Eaton  <jwe@octave.org>
 
 	Bug #32060.
 
 	* ov-fcn.h (octave_function::mark_as_private_function): Now virtual.
 	* ov-usr-fcn.h (octave_function::mark_as_private_fucntion):
 	New function.  Mark subfunctions as private also.
 	* symtab.cc, symtab.h
diff --git a/src/DLD-FUNCTIONS/gcd.cc b/src/DLD-FUNCTIONS/gcd.cc
--- a/src/DLD-FUNCTIONS/gcd.cc
+++ b/src/DLD-FUNCTIONS/gcd.cc
@@ -56,21 +56,21 @@ simple_gcd (double a, double b)
   return aa;
 }
 
 // Don't use the Complex and FloatComplex typedefs because we need to
 // refer to the actual float precision FP in the body (and when gcc
 // implements template aliases from C++0x, can do a small fix here).
 template <typename FP>
 static void
-divide(const std::complex<FP>& a, const std::complex<FP>& b,
-       std::complex<FP>& q, std::complex<FP>& r)
+divide (const std::complex<FP>& a, const std::complex<FP>& b,
+        std::complex<FP>& q, std::complex<FP>& r)
 {
-  FP qr = floor ((a/b).real () + 0.5);
-  FP qi = floor ((a/b).imag () + 0.5);
+  FP qr = gnulib::floor ((a/b).real () + 0.5);
+  FP qi = gnulib::floor ((a/b).imag () + 0.5);
 
   q = std::complex<FP> (qr, qi);
 
   r = a - q*b;
 }
 
 template <typename FP>
 static std::complex<FP>
diff --git a/src/DLD-FUNCTIONS/rand.cc b/src/DLD-FUNCTIONS/rand.cc
--- a/src/DLD-FUNCTIONS/rand.cc
+++ b/src/DLD-FUNCTIONS/rand.cc
@@ -1057,17 +1057,17 @@ All permutations are equally likely.\n\
           // Perform the Knuth shuffle.
           for (octave_idx_type j = 0; j < m; j++)
             {
               for (octave_idx_type i = 0; i < n; i++)
                 ivec[i] = i;
 
               for (octave_idx_type i = 0; i < n; i++)
                 {
-                  octave_idx_type k = i + floor (rvec[i] * (n - i));
+                  octave_idx_type k = i + gnulib::floor (rvec[i] * (n - i));
                   std::swap (ivec[i], ivec[k]);
                 }
 
               ivec += n;
               rvec += n;
             }
 
           // Transpose.
diff --git a/src/graphics.cc b/src/graphics.cc
--- a/src/graphics.cc
+++ b/src/graphics.cc
@@ -1838,17 +1838,17 @@ gh_manager::get_handle (const std::strin
         {
           retval = *p;
           handle_free_list.erase (p);
         }
       else
         {
           retval = graphics_handle (next_handle);
 
-          next_handle = ceil (next_handle) - 1.0 - make_handle_fraction ();
+          next_handle = std::ceil (next_handle) - 1.0 - make_handle_fraction ();
         }
     }
 
   return retval;
 }
 
 void
 gh_manager::do_free (const graphics_handle& h)
@@ -1883,17 +1883,17 @@ gh_manager::do_free (const graphics_hand
               // Graphics handles for non-figure objects are negative
               // integers plus some random fractional part.  To avoid
               // running out of integers, we recycle the integer part
               // but tack on a new random part each time.
 
               handle_map.erase (p);
 
               if (h.value () < 0)
-                handle_free_list.insert (ceil (h.value ()) - make_handle_fraction ());
+                handle_free_list.insert (std::ceil (h.value ()) - make_handle_fraction ());
             }
           else
             error ("graphics_handle::free: invalid object %g", h.value ());
         }
       else
         error ("graphics_handle::free: can't delete root figure");
     }
 }
@@ -4329,36 +4329,36 @@ axes::properties::get_axis_limits (doubl
               min_val = min_pos;
             }
           // FIXME -- maybe this test should also be relative?
           if (std::abs (min_val - max_val) < sqrt (DBL_EPSILON))
             {
               min_val *= 0.9;
               max_val *= 1.1;
             }
-          min_val = pow (10, floor (log10 (min_val)));
-          max_val = pow (10, ceil (log10 (max_val)));
+          min_val = pow (10, gnulib::floor (log10 (min_val)));
+          max_val = pow (10, std::ceil (log10 (max_val)));
         }
       else
         {
           if (min_val == 0 && max_val == 0)
             {
               min_val = -1;
               max_val = 1;
             }
           // FIXME -- maybe this test should also be relative?
           else if (std::abs (min_val - max_val) < sqrt (DBL_EPSILON))
             {
               min_val -= 0.1 * std::abs (min_val);
               max_val += 0.1 * std::abs (max_val);
             }
 
           double tick_sep = calc_tick_sep (min_val , max_val);
-          min_val = tick_sep * std::floor (min_val / tick_sep);
-          max_val = tick_sep * ceil (max_val / tick_sep);
+          min_val = tick_sep * gnulib::floor (min_val / tick_sep);
+          max_val = tick_sep * std::ceil (max_val / tick_sep);
         }
     }
 
   retval.resize (1, 2);
 
   retval(0) = min_val;
   retval(1) = max_val;
 
@@ -4389,17 +4389,17 @@ axes::properties::calc_ticks_and_lims (a
     {
       // FIXME we should check for negtives here
       hi = std::log10 (hi);
       lo = std::log10 (lo);
     }
 
   double tick_sep = calc_tick_sep (lo , hi);
 
-  int i1 = static_cast<int> (std::floor (lo / tick_sep));
+  int i1 = static_cast<int> (gnulib::floor (lo / tick_sep));
   int i2 = static_cast<int> (std::ceil (hi / tick_sep));
 
   if (limmode_is_auto)
     {
       // adjust limits to include min and max tics
       Matrix tmp_lims (1,2);
       tmp_lims(0) = tick_sep * i1;
       tmp_lims(1) = tick_sep * i2;
@@ -4412,17 +4412,17 @@ axes::properties::calc_ticks_and_lims (a
             tmp_lims(0) = std::pow (10., lo);
         }
       lims = tmp_lims;
     }
   else
     {
       // adjust min and max tics if they are out of limits
       i1 = static_cast<int> (std::ceil (lo / tick_sep));
-      i2 = static_cast<int> (std::floor (hi / tick_sep));
+      i2 = static_cast<int> (gnulib::floor (hi / tick_sep));
     }
       
   Matrix tmp_ticks (1, i2-i1+1);
   for (int i = 0; i <= i2-i1; i++) 
     {
       tmp_ticks (i) = tick_sep * (i+i1);
       if (is_logscale)
         tmp_ticks (i) = std::pow (10., tmp_ticks (i));
@@ -5225,17 +5225,17 @@ surface::properties::update_normals (voi
                                  nx, ny, nz);
 
               if ((j < (q - 1)) && (i < (p -1)))
                   // lower right quadrangle
                   cross_product (x(j3,i)-x(j2,i+1), y(j+1,i2)-y(j,i3), z(j+1,i)-z(j,i+1),
                                  x(j3,i+1)-x(j2,i), y(j+1,i3)-y(j,i2), z(j+1,i+1)-z(j,i),
                                  nx, ny, nz);
 
-              double d = - std::max(std::max(fabs(nx), fabs(ny)), fabs(nz));
+              double d = -std::max (std::max (fabs (nx), fabs (ny)), fabs (nz));
 
               nx /= d;
               ny /= d;
               nz /= d;
             }
         }
       vertexnormals = n;
     }
diff --git a/src/ov-cell.cc b/src/ov-cell.cc
--- a/src/ov-cell.cc
+++ b/src/ov-cell.cc
@@ -1123,17 +1123,17 @@ octave_cell::save_hdf5 (hid_t loc_id, co
 
   Cell tmp = cell_value ();
 
   octave_idx_type nel = dv.numel ();
 
   for (octave_idx_type i = 0; i < nel; i++)
     {
       std::ostringstream buf;
-      int digits = static_cast<int> (::floor (::log10 (static_cast<double> (nel)) + 1.0));
+      int digits = static_cast<int> (gnulib::floor (::log10 (static_cast<double> (nel)) + 1.0));
       buf << "_" << std::setw (digits) << std::setfill ('0') << i;
       std::string s = buf.str ();
 
       if (! add_hdf5_data (data_hid, tmp.elem (i), s.c_str (), "", false,
                            save_as_floats))
         {
           H5Gclose (data_hid);
           return false;
diff --git a/src/ov-scalar.cc b/src/ov-scalar.cc
--- a/src/ov-scalar.cc
+++ b/src/ov-scalar.cc
@@ -308,17 +308,17 @@ octave_scalar::map (unary_mapper_t umap)
       SCALAR_MAPPER (lgamma, rc_lgamma);
       SCALAR_MAPPER (cbrt, ::cbrt);
       SCALAR_MAPPER (ceil, ::ceil);
       SCALAR_MAPPER (cos, ::cos);
       SCALAR_MAPPER (cosh, ::cosh);
       SCALAR_MAPPER (exp, ::exp);
       SCALAR_MAPPER (expm1, ::expm1);
       SCALAR_MAPPER (fix, ::fix);
-      SCALAR_MAPPER (floor, ::floor);
+      SCALAR_MAPPER (floor, gnulib::floor);
       SCALAR_MAPPER (log, rc_log);
       SCALAR_MAPPER (log2, rc_log2);
       SCALAR_MAPPER (log10, rc_log10);
       SCALAR_MAPPER (log1p, rc_log1p);
       SCALAR_MAPPER (round, xround);
       SCALAR_MAPPER (roundb, xroundb);
       SCALAR_MAPPER (signum, ::signum);
       SCALAR_MAPPER (sin, ::sin);
diff --git a/src/pr-output.cc b/src/pr-output.cc
--- a/src/pr-output.cc
+++ b/src/pr-output.cc
@@ -236,32 +236,33 @@ calc_scale_exp (const int& x)
 
 static int
 engineering_exponent (const double& x)
 {
   int ex = 0;
   if (x != 0)
     {
       double absval = (x < 0.0 ? -x : x);
-      int logabsval = static_cast<int> (floor (log10 (absval)));
+      int logabsval = static_cast<int> (gnulib::floor (log10 (absval)));
       /* Avoid using modulo function with negative arguments for portability.
        * See extended comment at calc_scale_exp */
       if (logabsval < 0.0)
         ex = logabsval - 2 + ((-logabsval + 2) % 3);  
       else
         ex = logabsval - (logabsval % 3);
     }
   return ex;
 }
 
 static int
 num_digits (const double& x)
 {
-  return 1 + (print_eng ? engineering_exponent (x)
-                        : static_cast<int> (floor (log10 (x))));
+  return 1 + (print_eng
+              ? engineering_exponent (x)
+              : static_cast<int> (gnulib::floor (log10 (x))));
 }
 
 class
 pr_engineering_float
 {
 public:
 
   const float_format& f;
@@ -3212,17 +3213,17 @@ octave_print_internal_template (std::ost
       else
         {
           bool isneg = false;
           int digits = 0;
 
           for (octave_idx_type i = 0; i < dims.numel (); i++)
             {
               int new_digits = static_cast<int> 
-                (floor (log10 (double (abs (nda(i).value ()))) + 1.0));
+                (gnulib::floor (log10 (double (abs (nda(i).value ()))) + 1.0));
 
               if (new_digits > digits)
                 digits = new_digits;
 
               if (! isneg)
               isneg = (abs (nda(i).value ()) != nda(i).value ());
             }
 
