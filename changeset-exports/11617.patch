# HG changeset patch
# User jwe
# Date 1200635276 0
#      Fri Jan 18 05:47:56 2008 +0000
# Branch release-3-0-x
# Node ID ca0cbc46abce4fe5dea13e0f1ca6541679aad500
# Parent  ad944c3cc888de32c9e39cc59d8462b91e550f43
[3-0-0-branch @ 2008-01-18 05:47:55 by jwe]

diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,8 +1,13 @@
+2008-01-18  Ben Abbott  <bpabbott@mac.com>
+
+	* polynomial/residue.m: For each group of pole multiplicity, set
+	the poles of the group to the value of the group's average.
+
 2008-01-17  Tetsuro KURITA  <tkurita@mac.com>
 
 	* plot/print.m: Handle PDF output.
 	* plot/drawnow.m: Add "PDF" in a list of enhanced_terminals. 
 
 2008-01-16  John W. Eaton  <jwe@octave.org>
 
 	* plot/__go_draw_axes__.m (__do_enhanced_option__): New subfunction.
diff --git a/scripts/polynomial/residue.m b/scripts/polynomial/residue.m
--- a/scripts/polynomial/residue.m
+++ b/scripts/polynomial/residue.m
@@ -77,17 +77,17 @@
 ##    s^3 - 5s^2 + 8s - 4   (s-2)   (s-2)^2   (s-1)
 ## @end example
 ##
 ## @end ifinfo
 ##
 ## @deftypefnx {Function File} {[@var{b}, @var{a}] =} residue (@var{r}, @var{p}, @var{k})
 ## @deftypefnx {Function File} {[@var{b}, @var{a}] =} residue (@var{r}, @var{p}, @var{k}, @var{e})
 ## Compute the reconstituted quotient of polynomials,
-## @var{b}(s)/@var{a}(s), from the partial fraction expansion
+## @var{b}(s)/@var{a}(s), from the partial fraction expansion;
 ## represented by the residues, poles, and a direct polynomial specified
 ## by @var{r}, @var{p} and @var{k}, and the pole multiplicity @var{e}.
 ##
 ## If the multiplicity, @var{e}, is not explicitly specified the multiplicity is
 ## determined by the script mpoles.m.
 ##
 ## For example,
 ##
@@ -186,44 +186,57 @@ function [r, p, k, e] = residue (b, a, v
     return;
   endif
 
   ## Find the poles.
 
   p = roots (a);
   lp = length (p);
 
-  ## Determine if the poles are (effectively) zero.
-
-  small = max (abs (p));
-  small = max ([small, 1] ) * 1e-8 * (1 + numel (p))^2;
-  p(abs (p) < small) = 0;
-
-  ## Determine if the poles are (effectively) real, or imaginary.
-
-  index = (abs (imag (p)) < small);
-  p(index) = real (p(index));
-  index = (abs (real (p)) < small);
-  p(index) = 1i * imag (p(index));
-
   ## Sort poles so that multiplicity loop will work.
 
   [e, indx] = mpoles (p, toler, 1);
   p = p (indx);
 
+  ## For each group of pole multiplicity, set the value of each
+  ## pole to the average of the group. This reduces the error in 
+  ## the resulting poles.
+
+  p_group = cumsum (e == 1);
+  for ng = 1:p_group(end)
+    m = find (p_group == ng);
+    p(m) = mean (p(m));
+  endfor
+
   ## Find the direct term if there is one.
 
   if (lb >= la)
     ## Also return the reduced numerator.
     [k, b] = deconv (b, a);
     lb = length (b);
   else
     k = [];
   endif
 
+  ## Determine if the poles are (effectively) zero.
+
+  small = max (abs (p));
+  small = max ([small, 1]) * eps*1e4 * (1 + numel (p))^2;
+  p(abs (p) < small) = 0;
+
+  ## Determine if the poles are (effectively) real, or imaginary.
+
+  index = (abs (imag (p)) < small);
+  p(index) = real (p(index));
+  index = (abs (real (p)) < small);
+  p(index) = 1i * imag (p(index));
+
+  ## The remainder determines the residues.  The case of one pole
+  ## is trivial.
+
   if (lp == 1)
     r = polyval (b, p);
     return;
   endif
 
   ## Determine the order of the denominator and remaining numerator.
   ## With the direct term removed the potential order of the numerator
   ## is one less than the order of the denominator.
@@ -331,62 +344,62 @@ function [pnum, pden, e] = rresidue (r, 
   pden = polyreduce (pden);
 
 endfunction
 
 %!test
 %! b = [1, 1, 1];
 %! a = [1, -5, 8, -4];
 %! [r, p, k, e] = residue (b, a);
-%! assert (abs (r - [-2; 7; 3]) < 1e-5
-%!   && abs (p - [2; 2; 1]) < 1e-7
+%! assert (abs (r - [-2; 7; 3]) < 1e-12
+%!   && abs (p - [2; 2; 1]) < 1e-12
 %!   && isempty (k)
 %!   && e == [1; 2; 1]);
 %! k = [1 0];
 %! b = conv (k, a) + prepad (b, numel (k) + numel (a) - 1, 0);
 %! a = a;
 %! [br, ar] = residue (r, p, k);
 %! assert ((abs (br - b) < 1e-12
 %!   && abs (ar - a) < 1e-12));
 %! [br, ar] = residue (r, p, k, e);
 %! assert ((abs (br - b) < 1e-12
 %!   && abs (ar - a) < 1e-12));
 
 %!test
 %! b = [1, 0, 1];
 %! a = [1, 0, 18, 0, 81];
-%! [r, p, k, e] = residue(b, a);
+%! [r, p, k, e] = residue (b, a);
 %! r1 = [-5i; 12; +5i; 12]/54;
 %! p1 = [+3i; +3i; -3i; -3i];
-%! assert (abs (r - r1) < 1e-7 && abs (p - p1) < 1e-7
+%! assert (abs (r - r1) < 1e-12 && abs (p - p1) < 1e-12
 %!   && isempty (k)
 %!   && e == [1; 2; 1; 2]);
 %! [br, ar] = residue (r, p, k);
 %! assert ((abs (br - b) < 1e-12
 %!   && abs (ar - a) < 1e-12));
 
 %!test
 %! r = [7; 3; -2];
 %! p = [2; 1; 2];
 %! k = [1 0];
 %! e = [2; 1; 1];
 %! [b, a] = residue (r, p, k, e);
 %! assert ((abs (b - [1, -5, 9, -3, 1]) < 1e-12
 %!   && abs (a - [1, -5, 8, -4]) < 1e-12));
 %! [rr, pr, kr, er] = residue (b, a);
 %! [jnk, n] = mpoles(p);
-%! assert ((abs (rr - r(n)) < 1e-5
-%!   && abs (pr - p(n)) < 1e-7
+%! assert ((abs (rr - r(n)) < 1e-12
+%!   && abs (pr - p(n)) < 1e-12
 %!   && abs (kr - k) < 1e-12
 %!   && abs (er - e(n)) < 1e-12));
 
 %!test
 %! b = [1];
 %! a = [1, 10, 25];
-%! [r, p, k, e] = residue(b, a);
+%! [r, p, k, e] = residue (b, a);
 %! r1 = [0; 1];
 %! p1 = [-5; -5];
-%! assert (abs (r - r1) < 1e-7 && abs (p - p1) < 1e-7
+%! assert (abs (r - r1) < 1e-12 && abs (p - p1) < 1e-12
 %!   && isempty (k)
 %!   && e == [1; 2]);
 %! [br, ar] = residue (r, p, k);
 %! assert ((abs (br - b) < 1e-12
 %!   && abs (ar - a) < 1e-12));
