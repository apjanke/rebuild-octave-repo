# HG changeset patch
# User David Bateman <dbateman@free.fr>
# Date 1337553644 -7200
#      Mon May 21 00:40:44 2012 +0200
# Node ID 4f458e882516324b1cd724ffd5ace8110ec71871
# Parent  161d06a52360e24585a685a9c1780623188e0fa9
Allow fractional months to datenum and correct a couple of typos in datetick (bug #36482)

diff --git a/scripts/time/datenum.m b/scripts/time/datenum.m
--- a/scripts/time/datenum.m
+++ b/scripts/time/datenum.m
@@ -80,16 +80,17 @@
 
 ## Algorithm: Peter Baum (http://vsg.cape.com/~pbaum/date/date0.htm)
 ## Author: pkienzle <pkienzle@users.sf.net>
 
 function [days, secs] = datenum (year, month = [], day = [], hour = 0, minute = 0, second = 0)
 
   ## Days until start of month assuming year starts March 1.
   persistent monthstart = [306; 337; 0; 31; 61; 92; 122; 153; 184; 214; 245; 275];
+  persistent monthlength = [31; 28; 31; 30; 31; 30; 31; 31; 30; 31; 30; 31];
 
   if (nargin == 0 || nargin > 6 || 
      (nargin > 2 && (ischar (year) || iscellstr (year))))
     print_usage ();
   endif
 
   if (ischar (year) || iscellstr (year))
     [year, month, day, hour, minute, second] = datevec (year, month);
@@ -105,16 +106,29 @@ function [days, secs] = datenum (year, m
       day   = year(:,3);
       month = year(:,2);
       year  = year(:,1);
     endif
   endif
 
   month(month<1) = 1; ## For compatibility.  Otherwise allow negative months.
 
+  ## Treat fractional months, by converting the fraction to days
+  if (floor (month) != month)
+    fracmonth = month - floor (month);
+    month = floor (month);
+    if ((mod (month-1,12) + 1) == 2 && 
+        (floor (year/4) - floor (year/100) + floor (year/400)) != 0)
+      ## leap year
+      day += fracmonth * 29;
+    else
+      day += fracmonth * monthlength ((mod (month-1,12) + 1));
+    endif
+  endif
+
   ## Set start of year to March by moving Jan. and Feb. to previous year.
   ## Correct for months > 12 by moving to subsequent years.
   year += fix ((month-14)/12);
 
   ## Lookup number of days since start of the current year.
   if (numel (month) == 1 || numel (day) == 1)
     ## Allow month or day to be scalar while other values may be vectors or
     ## matrices.
diff --git a/scripts/time/datetick.m b/scripts/time/datetick.m
--- a/scripts/time/datetick.m
+++ b/scripts/time/datetick.m
@@ -154,17 +154,17 @@ function __datetick__ (varargin)
       xmax = xmin + 1;
     endif
 
     N = 3;
     if (xmax - xmin < N)
       ## Day scale or less
       if (xmax - xmin < N / 24 / 60 / 60)
         scl = 1 / 24 / 60 / 60;
-      elseif (xmax - xmin < N / 24 / 6)
+      elseif (xmax - xmin < N / 24 / 60)
         scl = 1 / 24 / 60;
       else
         scl = 1 / 24;
       endif
       sep = __calc_tick_sep__ (xmin / scl , xmax / scl);
       xmin = sep * floor (xmin / scl / sep);
       xmax = sep * ceil (xmax / scl / sep);
       nticks = (xmax - xmin) / sep + 1;
@@ -181,17 +181,17 @@ function __datetick__ (varargin)
       if (maxmonth - minmonth < N)
         sep = __calc_tick_sep__ (xmin, xmax);
         xmin = sep * floor (xmin / sep);
         xmax = sep * ceil (xmax / sep);
         nticks = (xmax - xmin) / sep + 1;
       elseif (maxyear - minyear < N)
         sep = __calc_tick_sep__ (minmonth , maxmonth);
         xmin = datenum (ymin, sep * floor (minmonth / sep), 1);
-        xmax = datenum (ymin, sep * ceil (maxmonth / sep), 1);
+        xmax = datenum (ymax, sep * ceil (maxmonth / sep), 1);
         nticks = ceil (maxmonth / sep) - floor (minmonth / sep) + 1;
       else
         sep = __calc_tick_sep__ (minyear , maxyear);
         xmin = datenum (sep * floor (minyear / sep), 1, 1);
         xmax = datenum (sep * ceil (maxyear / sep), 1, 1);
         nticks = ceil (maxyear / sep) - floor (minyear / sep) + 1;
       endif
     endif
