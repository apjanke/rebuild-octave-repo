# HG changeset patch
# User Mike Miller <mtmiller@octave.org>
# Date 1449943186 18000
#      Sat Dec 12 12:59:46 2015 -0500
# Node ID 020b71557b12010a4043db2b7abca64f660fd301
# Parent  69b37757030cbbc9fb4aa861e93c3cebd93df014
2015 Code Sprint: add BIST tests to bitfcns.cc

* bitfcns.cc (Fbitand, Fbitor): Mark as tested with bitxor BIST tests.
(Fflintmax, Fintmax, Fintmin, Fsizemax): Add BIST tests.

diff --git a/libinterp/corefcn/bitfcns.cc b/libinterp/corefcn/bitfcns.cc
--- a/libinterp/corefcn/bitfcns.cc
+++ b/libinterp/corefcn/bitfcns.cc
@@ -366,27 +366,35 @@ Return the bitwise AND of non-negative i
 \n\
 @var{x}, @var{y} must be in the range [0,intmax]\n\
 @seealso{bitor, bitxor, bitset, bitget, bitcmp, bitshift, intmax, flintmax}\n\
 @end deftypefn")
 {
   return bitop ("bitand", args);
 }
 
+/*
+%!# Function bitand is tested as part of bitxor BIST tests
+*/
+
 DEFUN (bitor, args, ,
        "-*- texinfo -*-\n\
 @deftypefn {} {} bitor (@var{x}, @var{y})\n\
 Return the bitwise OR of non-negative integers @var{x} and @var{y}.\n\
 \n\
 @seealso{bitor, bitxor, bitset, bitget, bitcmp, bitshift, intmax, flintmax}\n\
 @end deftypefn")
 {
   return bitop ("bitor", args);
 }
 
+/*
+%!# Function bitor is tested as part of bitxor BIST tests
+*/
+
 DEFUN (bitxor, args, ,
        "-*- texinfo -*-\n\
 @deftypefn {} {} bitxor (@var{x}, @var{y})\n\
 Return the bitwise XOR of non-negative integers @var{x} and @var{y}.\n\
 \n\
 @seealso{bitand, bitor, bitset, bitget, bitcmp, bitshift, intmax, flintmax}\n\
 @end deftypefn")
 {
@@ -688,16 +696,27 @@ for @qcode{\"double\"} and @w{@math{2^{2
   else if (cname == "single")
     retval = (static_cast<float> (max_mantissa_value<float> () + 1));
   else
     error ("flintmax: not defined for class '%s'", cname.c_str ());
 
   return retval;
 }
 
+/*
+%!assert (flintmax (), 2^53)
+%!assert (flintmax ("double"), 2^53)
+%!assert (flintmax ("single"), single (2^24))
+
+%!error flintmax (0)
+%!error flintmax ("double", 0)
+%!error flintmax ("int32")
+%!error flintmax ("char")
+*/
+
 DEFUN (intmax, args, ,
        "-*- texinfo -*-\n\
 @deftypefn {} {} intmax (@var{type})\n\
 Return the largest integer that can be represented in an integer type.\n\
 \n\
 The variable @var{type} can be\n\
 \n\
 @table @code\n\
@@ -759,16 +778,33 @@ The default for @var{type} is @code{int3
   else if (cname == "int64")
     retval = octave_int64 (std::numeric_limits<int64_t>::max ());
   else
     error ("intmax: not defined for '%s' objects", cname.c_str ());
 
   return retval;
 }
 
+/*
+%!assert (intmax (),          int32 (2^31 - 1))
+%!assert (intmax ("int8"),     int8 (2^7 - 1))
+%!assert (intmax ("uint8"),   uint8 (2^8 - 1))
+%!assert (intmax ("int16"),   int16 (2^15 - 1))
+%!assert (intmax ("uint16"), uint16 (2^16 - 1))
+%!assert (intmax ("int32"),   int32 (2^31 - 1))
+%!assert (intmax ("uint32"), uint32 (2^32 - 1))
+%!assert (intmax ("int64"),   int64 (2^63 - 1))
+%!assert (intmax ("uint64"), uint64 (2^64 - 1))
+
+%!error intmax (0)
+%!error intmax ("int32", 0)
+%!error intmax ("double")
+%!error intmax ("char")
+*/
+
 DEFUN (intmin, args, ,
        "-*- texinfo -*-\n\
 @deftypefn {} {} intmin (@var{type})\n\
 Return the smallest integer that can be represented in an integer type.\n\
 \n\
 The variable @var{type} can be\n\
 \n\
 @table @code\n\
@@ -830,16 +866,33 @@ The default for @var{type} is @code{int3
   else if (cname == "int64")
     retval = octave_int64 (std::numeric_limits<int64_t>::min ());
   else
     error ("intmin: not defined for '%s' objects", cname.c_str ());
 
   return retval;
 }
 
+/*
+%!assert (intmin (),          int32 (-2^31))
+%!assert (intmin ("int8"),     int8 (-2^7))
+%!assert (intmin ("uint8"),   uint8 (-2^8))
+%!assert (intmin ("int16"),   int16 (-2^15))
+%!assert (intmin ("uint16"), uint16 (-2^16))
+%!assert (intmin ("int32"),   int32 (-2^31))
+%!assert (intmin ("uint32"), uint32 (-2^32))
+%!assert (intmin ("int64"),   int64 (-2^63))
+%!assert (intmin ("uint64"), uint64 (-2^64))
+
+%!error intmin (0)
+%!error intmin ("int32", 0)
+%!error intmin ("double")
+%!error intmin ("char")
+*/
+
 DEFUN (sizemax, args, ,
        "-*- texinfo -*-\n\
 @deftypefn {} {} sizemax ()\n\
 Return the largest value allowed for the size of an array.\n\
 \n\
 If Octave is compiled with 64-bit indexing, the result is of class int64,\n\
 otherwise it is of class int32.  The maximum array size is slightly\n\
 smaller than the maximum value allowable for the relevant class as reported\n\
@@ -847,8 +900,14 @@ by @code{intmax}.\n\
 @seealso{intmax}\n\
 @end deftypefn")
 {
   if (args.length () != 0)
     print_usage ();
 
   return octave_value (octave_int<octave_idx_type> (dim_vector::dim_max ()));
 }
+
+/*
+%!assert (sizemax () >= (intmax ("int32") - 1))
+
+%!error sizemax (0)
+*/
