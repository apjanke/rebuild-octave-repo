# HG changeset patch
# User jwe
# Date 896369031 0
#      Thu May 28 15:23:51 1998 +0000
# Node ID d81db29f8b2b9844dd265627031257d9eefa8b32
# Parent  fccab8e7d35f8bb9a8853ac757c2f5471bb4f6ff
[project @ 1998-05-28 15:23:50 by jwe]

diff --git a/CHECKLIST b/CHECKLIST
--- a/CHECKLIST
+++ b/CHECKLIST
@@ -13,11 +13,8 @@ Things to do before making a release:
   * Check the README file.
 
   * Create a new Announce.M.N.P file for the current release.
 
   * Run autoconf, autoheader, and configure before making tar files.
 
   * Update the NEWS and README.octave files in the anonymous ftp
     directory.
-
-  * Don't forget to use -static when linking the binaries for the
-    binary distributions.
diff --git a/ChangeLog b/ChangeLog
--- a/ChangeLog
+++ b/ChangeLog
@@ -1,8 +1,14 @@
+Thu May 28 10:17:45 1998  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* configure.in: When checking for glob stuff, make sure that the
+	systsem header file has all the definitions that we need.  If not,
+	set up to use our replacement library.
+
 Mon May 18 11:33:45 1998  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* mkoctfile.in: Fix typos in case statement.
 
 Fri May 15 00:34:54 1998  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* configure.in: Make sure install-octave is executable.
 
diff --git a/configure.in b/configure.in
--- a/configure.in
+++ b/configure.in
@@ -16,17 +16,17 @@ dnl Copyright (C) 1996, 1997 John W. Eat
 ### FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
 ### for more details.
 ### 
 ### You should have received a copy of the GNU General Public License
 ### along with Octave; see the file COPYING.  If not, write to the Free
 ### Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ### 02111-1307, USA. 
 
-AC_REVISION($Revision: 1.305 $)
+AC_REVISION($Revision: 1.306 $)
 AC_PREREQ(2.9)
 AC_INIT(src/octave.cc)
 AC_CONFIG_HEADER(config.h)
 
 AC_DEFINE(OCTAVE_SOURCE, 1)
 
 OCTAVE_HOST_TYPE
 
@@ -691,30 +691,51 @@ AC_CHECK_HEADERS(assert.h curses.h dlfcn
 if test "$ac_cv_header_termios_h" = yes \
     || test "$ac_cv_header_termio_h" = yes \
     || test "$ac_cv_header_sgtty_h" = yes; then
   true
 else
   AC_MSG_ERROR([I couldn't find termios.h, termio.h, or sgtty.h!])
 fi
 
+
 GLOB_DIR=glob
 LIBGLOB='$(TOPDIR)/glob/libglob.$(LIBEXT)'
 GLOB_INCFLAGS='-I$(top_srcdir)/glob -I$(TOPDIR)/glob'
 if test "$ac_cv_header_fnmatch_h" = yes \
   && test "$ac_cv_header_glob_h" = yes; then
-  GLOB_DIR=
-  AC_CHECK_LIB(glob, glob)
-  AC_CHECK_FUNCS(fnmatch glob)
-  if test "$ac_cv_func_fnmatch" = yes \
-    && test "$ac_cv_func_glob" = yes; then
-    GLOB_DIR=
-    LIBGLOB=
-    GLOB_INCFLAGS=
-  fi
+  AC_EGREP_CPP(yes,
+    [#ifdef FNM_NOESCAPE
+     #ifdef FNM_FOOBAR_PATHNAME
+     #ifdef FNM_PERIOD
+       yes
+     #endif
+     #endif
+     #endif
+    ], [
+      GLOB_DIR=
+      AC_CHECK_LIB(glob, glob)
+      AC_CHECK_FUNCS(fnmatch glob)
+      if test "$ac_cv_func_fnmatch" = yes \
+	&& test "$ac_cv_func_glob" = yes; then
+	GLOB_DIR=
+	LIBGLOB=
+	GLOB_INCFLAGS=
+      fi
+    ], [
+### We provide replacements, so we should set these to "yes".
+    AC_CACHE_VAL(ac_cv_func_fnmatch, ac_cv_func_fnmatch=yes)
+    AC_CACHE_VAL(ac_cv_func_glob, ac_cv_func_glob=yes)
+    ])
+else
+### We provide replacements, so we should set these to "yes".
+  ac_cv_header_fnmatch_h=yes
+  ac_cv_header_glob_h=yes
+  AC_CACHE_VAL(ac_cv_func_fnmatch, ac_cv_func_fnmatch=yes)
+  AC_CACHE_VAL(ac_cv_func_glob, ac_cv_func_glob=yes)
 fi
 AC_SUBST(GLOB_DIR)
 AC_SUBST(LIBGLOB)
 AC_SUBST(GLOB_INCFLAGS)
 
 ### Checks for functions and variables.
 
 AC_CHECK_FUNCS(atexit bcopy bzero dup2 endgrent endpwent execvp fcntl \
diff --git a/install-octave.in b/install-octave.in
--- a/install-octave.in
+++ b/install-octave.in
@@ -243,18 +243,18 @@ oct_files=`find . -name '*.oct' -print`
 if test -n "$oct_files"; then
   echo "installing .oct files in $octfiledir"
   for f in $oct_files
   do
     file=`basename $f`
     cp $f $octfiledir/$file
     chmod 755 $octfiledir/$file
   done
-  if test -f links-to-make; then
-    cat links-to-make | while read src dest
+  if test -f src/links-to-make; then
+    cat src/links-to-make | while read src dest
     do
       if test -n "$src" && test -n "$dest"; then
 	cd $octfiledir
 	ln $src $dest
       fi
     done
   fi
   cd $distdir
diff --git a/liboctave/Array-idx.h b/liboctave/Array-idx.h
--- a/liboctave/Array-idx.h
+++ b/liboctave/Array-idx.h
@@ -236,25 +236,22 @@ assign (Array<LT>& lhs, const Array<RT>&
 
 	  for (int i = 0; i < rhs_len; i++)
 	    lhs.elem (i) = rhs.elem (i);
 	}
       else
 	(*current_liboctave_error_handler)
 	  ("A(:) = X: A must be the same size as X");
     }
-  else
+  else if (! (rhs_len == 1 || rhs_len == 0))
     {
-      if (rhs_len != 0)
- 	{
-	  (*current_liboctave_error_handler)
-	    ("A([]) = X: X must also be an empty matrix");
-
-	  retval = 0;
-	}
+      (*current_liboctave_error_handler)
+	("A([]) = X: X must also be an empty matrix or a scalar");
+  
+      retval = 0;
     }
 
   lhs.clear_index ();
 
   return retval;
 }
 
 /*
diff --git a/liboctave/Array2-idx.h b/liboctave/Array2-idx.h
--- a/liboctave/Array2-idx.h
+++ b/liboctave/Array2-idx.h
@@ -437,16 +437,27 @@ assign (Array2<LT>& lhs, const Array2<RT
 		      int jj = idx_j.elem (j);
 		      for (int i = 0; i < n; i++)
 			{
 			  int ii = idx_i.elem (i);
 			  lhs.elem (ii, jj) = rhs.elem (i, j);
 			}
 		    }
 		}
+	      else if (n == 0 && m == 0)
+		{
+		  if (! ((rhs_nr == 1 && rhs_nc == 1)
+			 || (rhs_nr == 0 && rhs_nc == 0)))
+		    {
+		      (*current_liboctave_error_handler)
+		("A([], []) = X: X must be an empty matrix or a scalar");
+
+		      retval = 0;
+		    }
+		}
 	      else
 		{
 		  (*current_liboctave_error_handler)
     ("A(I, J) = X: X must be a scalar or the number of elements in I must");
 		  (*current_liboctave_error_handler)
     ("match the number of rows in X and the number of elements in J must");
 		  (*current_liboctave_error_handler)
     ("match the number of columns in X");
@@ -530,16 +541,23 @@ assign (Array2<LT>& lhs, const Array2<RT
 			      lhs.d2 = lhs.length ();
 			    }
 			  else if (rhs_nc == 1
 				   && (idx_nc == 1 || lhs_len == 1))
 			    {
 			      lhs.d1 = lhs.length ();
 			      lhs.d2 = 1;
 			    }
+			  else if (idx_nr == 0 && idx_nc == 0)
+			    {
+			      if (! ((rhs.d1 == 1 && rhs.d2 == 1)
+				     || (rhs.d1 == 0 && rhs.d2 == 0)))
+				(*current_liboctave_error_handler)
+			  ("A([]) = X: X must be an empty matrix or scalar");
+			    }
 			  else
 			    (*current_liboctave_error_handler)
       ("A(I) = X: X must be a scalar or a matrix with the same size as I");
 			}
 		      else
 			{
 			  lhs.d1 = 0;
 			  lhs.d2 = 0;
@@ -619,16 +637,23 @@ assign (Array2<LT>& lhs, const Array2<RT
 			{
 			  int ii = idx.elem (k++);
 			  int fr = ii % lhs_nr;
 			  int fc = (ii - fr) / lhs_nr;
 			  lhs.elem (fr, fc) = rhs.elem (i, j);
 			}
 		    }
 		}
+	      else if (len == 0)
+		{
+		  if (! ((rhs_nr == 1 && rhs_nc == 1)
+			 || (rhs_nr == 0 && rhs_nc == 0)))
+		    (*current_liboctave_error_handler)
+		      ("A([]) = X: X must be an empty matrix or scalar");
+		}
 	      else
 		{
 		  (*current_liboctave_error_handler)
       ("A(I) = X: X must be a scalar or a matrix with the same size as I");
 
 		  retval = 0;
 		}
 	    }
diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,14 @@
+Wed May 27 13:46:30 1998  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* Array2-idx.h (assign): Allow A([],[]) = scalar and, if
+	do_fortran_indexing is set, A([]) = scalar.
+	* Array-idx.h (assign): Allow A([]) = scalar.
+
 Thu May 14 11:50:24 1998  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* mx-op-defs.h (MDM_MULTIPLY_OP): Compute result if dm_nc > 0, not
 	if dm_nc == 0.
 
 Thu Apr 23 16:15:37 1998  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* pathsearch.h (dir_path::p_orig): New field.
diff --git a/test/ChangeLog b/test/ChangeLog
--- a/test/ChangeLog
+++ b/test/ChangeLog
@@ -1,8 +1,17 @@
+Wed May 27 00:38:27 1998  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* octave.test/diffeq/dassl-1.m, octave.test/diffeq/dassl-2.m,
+	octave.test/diffeq/lsode-1.m: New tests, from David Billinghurst
+	<David.Billinghurst@riotinto.com.au>.
+
+	* octave.test/diffeq/lsode-2.m, octave.test/diffeq/lsode-3.m:
+ 	New tests, from Peter Hopfgartner <phopfgartner@memc.inet.it>.
+
 Thu Apr 23 01:45:16 1998  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* Makefile.in: If $(SHARED_LIBS), set LD_LIBRARY_PATH for running
 	Octave before installation is complete.
 
 Wed Apr 15 15:23:43 1998  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* octave.test/index/dfi-f/m-2.m, octave.test/index/dfi-f/index.exp:
diff --git a/test/Makefile.in b/test/Makefile.in
--- a/test/Makefile.in
+++ b/test/Makefile.in
@@ -21,17 +21,17 @@ DISTFILES = Makefile.in $(SOURCES) Chang
 SUBDIRS =
 
 OCTAVE_BINARY = ../src/octave
 
 OCTAVE_SCRIPT_PATH = .:$(TOPDIR)/src//:$(srcdir)/../scripts//
 
 ifeq ($(SHARED_LIBS), true)
   OCTAVE_LD_LIBRARY_PATH = `pwd`/../src:`pwd`/../liboctave:`pwd`/../libcruft
-  ifneq ($(LD_LIBRARY_PATH),)
+  ifeq ($(LD_LIBRARY_PATH),)
     XLD_LIBRARY_PATH = $(OCTAVE_LD_LIBRARY_PATH)
   else
     XLD_LIBRARY_PATH = $(OCTAVE_LD_LIBRARY_PATH):$(LD_LIBRARY_PATH)
   endif
   SET_LD_LIBRARY_PATH = LD_LIBRARY_PATH="$(XLD_LIBRARY_PATH)"
 endif
 
 # Complete directory trees to distribute.
diff --git a/test/octave.test/diffeq/diffeq.exp b/test/octave.test/diffeq/diffeq.exp
--- a/test/octave.test/diffeq/diffeq.exp
+++ b/test/octave.test/diffeq/diffeq.exp
@@ -1,26 +1,46 @@
 ## The following functions need to have tests written for them:
 
 # lsode
 
+set test lsode-1
+set prog_output "ans = 1"
+do_test lsode-1.m
+
+set test lsode-2
+set prog_output "ans = 1"
+do_test lsode-2.m
+
+set test lsode-3
+set prog_output "ans = 1"
+do_test lsode-3.m
+
 set test lsode_options-1
 set prog_output "ans = 1"
 do_test lsode_options-1.m
 
 set test lsode_options-2
 set prog_output "\n... lsode_options:.*"
 do_test lsode_options-2.m
 
 set test lsode_options-3
 set prog_output "\n... lsode_options:.*"
 do_test lsode_options-3.m
 
 # dassl
 
+set test dassl-1
+set prog_output "ans = 1"
+do_test dassl-1.m
+
+set test dassl-2
+set prog_output "ans = 1"
+do_test dassl-2.m
+
 set test dassl_options-1
 set prog_output "ans = 1"
 do_test dassl_options-1.m
 
 set test dassl_options-2
 set prog_output "\n... dassl_options:.*"
 do_test dassl_options-2.m
 
