# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1264062323 18000
#      Thu Jan 21 03:25:23 2010 -0500
# Node ID be952ce74023db61d3288945628e51de199f8fc2
# Parent  326746625a51b244dc523f821d37959d8b4e2478
bootstrap.conf fixes

diff --git a/ChangeLog b/ChangeLog
--- a/ChangeLog
+++ b/ChangeLog
@@ -1,8 +1,13 @@
+2010-01-21  John W. Eaton  <jwe@octave.org>
+
+	* bootstrap.conf (gnulib_modules): Include unistd in the list.
+	Keep list sorted.
+
 2010-01-21  John W. Eaton  <jwe@octave.org>
 
 	* configure.ac: Delete checks for rename, link, readlink, rmdir,
 	strcasecmp, stricmp, strncasecmp, strnicmp, strptime, symlink,
 	and unlink.
 
 2010-01-21  John W. Eaton  <jwe@octave.org>
 
diff --git a/bootstrap.conf b/bootstrap.conf
--- a/bootstrap.conf
+++ b/bootstrap.conf
@@ -32,16 +32,17 @@ gnulib_modules="
   readlink
   rename
   rmdir
   stat
   strftime
   strptime
   symlink
   times
+  unistd
   unlink
   round
 "
 
 # Additional xgettext options to use.  Use "\\\newline" to break lines.
 XGETTEXT_OPTIONS=$XGETTEXT_OPTIONS'\\\
  --from-code=UTF-8\\\
  --flag=asprintf:2:c-format --flag=vasprintf:2:c-format\\\
diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,10 +1,12 @@
 2010-01-21  John W. Eaton  <jwe@octave.org>
 
+	* file-ops.h, file-ops.cc, lo-utils.h, lo-cutils.c: Untabify.
+
 	* file-ops.cc: Don't include unistd.h.
 	(NOT_SUPPORTED): Delete unused macro.
 
 2010-01-21  John W. Eaton  <jwe@octave.org>
 
 	* lo-cutils.c (octave_tempnam): New funtion.
 	* lo-utils.h: Provide decl.
 	* file-ops.cc (file_ops::tempnam): Call octave_tempnam.
diff --git a/liboctave/file-ops.cc b/liboctave/file-ops.cc
--- a/liboctave/file-ops.cc
+++ b/liboctave/file-ops.cc
@@ -74,17 +74,17 @@ file_ops::static_members::instance_ok (v
   bool retval = true;
 
   if (! instance)
     instance = new static_members ();
 
   if (! instance)
     {
       (*current_liboctave_error_handler)
-	("unable to create file_ops::static_members object!");
+        ("unable to create file_ops::static_members object!");
 
       retval = false;
     }
 
   return retval;
 }
 
 // We provide a replacement for mkdir().
@@ -151,17 +151,17 @@ int
 file_ops::link (const std::string& old_name, const std::string& new_name)
 {
   std::string msg;
   return link (old_name, new_name, msg);
 }
 
 int
 file_ops::link (const std::string& old_name,
-		const std::string& new_name, std::string& msg)
+                const std::string& new_name, std::string& msg)
 {
   msg = std::string ();
 
   int status = -1;
 
   status = octave_link (old_name.c_str (), new_name.c_str ());
 
   if (status < 0)
@@ -179,17 +179,17 @@ int
 file_ops::symlink (const std::string& old_name, const std::string& new_name)
 {
   std::string msg;
   return symlink (old_name, new_name, msg);
 }
 
 int
 file_ops::symlink (const std::string& old_name,
-		   const std::string& new_name, std::string& msg)
+                   const std::string& new_name, std::string& msg)
 {
   msg = std::string ();
 
   int status = -1;
 
   status = octave_symlink (old_name.c_str (), new_name.c_str ());
 
   if (status < 0)
@@ -207,17 +207,17 @@ int
 file_ops::readlink (const std::string& path, std::string& result)
 {
   std::string msg;
   return readlink (path, result, msg);
 }
 
 int
 file_ops::readlink (const std::string& path, std::string& result,
-		    std::string& msg)
+                    std::string& msg)
 {
   int status = -1;
 
   msg = std::string ();
 
   char buf[MAXPATHLEN+1];
 
   status = octave_readlink (path.c_str (), buf, MAXPATHLEN);
@@ -243,17 +243,17 @@ int
 file_ops::rename (const std::string& from, const std::string& to)
 {
   std::string msg;
   return rename (from, to, msg);
 }
 
 int
 file_ops::rename (const std::string& from, const std::string& to,
-		  std::string& msg)
+                  std::string& msg)
 {
   int status = -1;
 
   msg = std::string ();
 
   status = octave_rename (from.c_str (), to.c_str ());
 
   if (status < 0)
@@ -310,59 +310,59 @@ file_ops::recursive_rmdir (const std::st
 
   dir_entry dir (name);
 
   if (dir)
     {
       string_vector dirlist = dir.read ();
 
       for (octave_idx_type i = 0; i < dirlist.length (); i++)
-	{
-	  octave_quit ();
+        {
+          octave_quit ();
 
-	  std::string nm = dirlist[i];
+          std::string nm = dirlist[i];
 
-	  // Skip current directory and parent.
-	  if (nm == "." || nm == "..")
-	    continue;
+          // Skip current directory and parent.
+          if (nm == "." || nm == "..")
+            continue;
 
-	  std::string fullnm = name + file_ops::dir_sep_str () + nm;
+          std::string fullnm = name + file_ops::dir_sep_str () + nm;
 
-	  // Get info about the file.  Don't follow links.
-	  file_stat fs (fullnm, false);
+          // Get info about the file.  Don't follow links.
+          file_stat fs (fullnm, false);
 
-	  if (fs)
-	    {
-	      if (fs.is_dir ())
-		{
-		  status = recursive_rmdir (fullnm, msg);
+          if (fs)
+            {
+              if (fs.is_dir ())
+                {
+                  status = recursive_rmdir (fullnm, msg);
 
-		  if (status < 0)
-		    break;
-		}
-	      else
-		{
-		  status = unlink (fullnm, msg);
+                  if (status < 0)
+                    break;
+                }
+              else
+                {
+                  status = unlink (fullnm, msg);
 
-		  if (status < 0)
-		    break;
-		}
-	    }
-	  else
-	    {
-	      msg = fs.error ();
-	      break;
-	    }
-	}
+                  if (status < 0)
+                    break;
+                }
+            }
+          else
+            {
+              msg = fs.error ();
+              break;
+            }
+        }
 
       if (status >= 0)
-	{
-	  dir.close ();
-	  status = file_ops::rmdir (name, msg);
-	}
+        {
+          dir.close ();
+          status = file_ops::rmdir (name, msg);
+        }
     }
   else
     {
       status = -1;
 
       msg = dir.error ();
     }
 
@@ -420,26 +420,26 @@ extern int errno;
 
   while (true)
     {
       resolved_size = 2 * resolved_size + 1;
 
       OCTAVE_LOCAL_BUFFER (char, resolved, resolved_size);
 
       int resolved_len
-	= ::resolvepath (absolute_name.c_str (), resolved, resolved_size);
+        = ::resolvepath (absolute_name.c_str (), resolved, resolved_size);
 
       if (resolved_len < 0)
-	break;
+        break;
 
       if (resolved_len < resolved_size)
-	{
-	  retval = resolved;
-	  break;
-	}
+        {
+          retval = resolved;
+          break;
+        }
     }
 
 #elif defined (__WIN32__)
 
   int n = 1024;
 
   std::string win_path (n, '\0');
 
@@ -447,23 +447,23 @@ extern int errno;
     {
       int status = GetFullPathName (name.c_str (), n, &win_path[0], 0);
 
       if (status == 0)
         break;
       else if (status < n)
         {
           win_path.resize (status);
-	  retval = win_path;
-	  break;
+          retval = win_path;
+          break;
         }
       else
         {
           n *= 2;
-	  win_path.resize (n);
+          win_path.resize (n);
         }
     }
 
 #elif defined (HAVE_REALPATH)
 
 #if !defined (__set_errno)
 # define __set_errno(Val) errno = (Val)
 #endif
@@ -501,17 +501,17 @@ std::string
 file_ops::tempnam (const std::string& dir, const std::string& pfx)
 {
   std::string msg;
   return tempnam (dir, pfx, msg);
 }
 
 std::string
 file_ops::tempnam (const std::string& dir, const std::string& pfx,
-		   std::string& msg)
+                   std::string& msg)
 {
   msg = std::string ();
 
   std::string retval;
   
   const char *pdir = dir.empty () ? 0 : dir.c_str ();
 
   const char *ppfx = pfx.empty () ? 0 : pfx.c_str ();
@@ -585,28 +585,28 @@ tilde_find_prefix (const std::string& s,
   if (s_len == 0 || s[0] == '~')
     return 0;
 
   string_vector prefixes = file_ops::tilde_additional_prefixes;
 
   if (! prefixes.empty ())
     {
       for (size_t i = 0; i < s_len; i++)
-	{
-	  for (int j = 0; j < prefixes.length (); j++)
-	    {
-	      size_t pfx_len = prefixes[j].length ();
+        {
+          for (int j = 0; j < prefixes.length (); j++)
+            {
+              size_t pfx_len = prefixes[j].length ();
 
-	      if (prefixes[j].compare (s.substr (i, pfx_len)) == 0)
-		{
-		  len = pfx_len - 1;
-		  return i + len;
-		}
-	    }
-	}
+              if (prefixes[j].compare (s.substr (i, pfx_len)) == 0)
+                {
+                  len = pfx_len - 1;
+                  return i + len;
+                }
+            }
+        }
     }
 
   return s_len;
 }
 
 // Find the end of a tilde expansion in S, and return the index
 // of the character which ends the tilde definition.
 
@@ -617,28 +617,28 @@ tilde_find_suffix (const std::string& s)
 
   string_vector suffixes = file_ops::tilde_additional_suffixes;
 
   size_t i = 0;
 
   for ( ; i < s_len; i++)
     {
       if (file_ops::is_dir_sep (s[i]))
-	break;
+        break;
 
       if (! suffixes.empty ())
-	{
-	  for (int j = 0; j < suffixes.length (); j++)
-	    {
-	      size_t sfx_len = suffixes[j].length ();
+        {
+          for (int j = 0; j < suffixes.length (); j++)
+            {
+              size_t sfx_len = suffixes[j].length ();
 
-	      if (suffixes[j].compare (s.substr (i, sfx_len)) == 0)
-		return i;
-	    }
-	}
+              if (suffixes[j].compare (s.substr (i, sfx_len)) == 0)
+                return i;
+            }
+        }
     }
 
   return i;
 }
 
 // Take FNAME and return the tilde prefix we want expanded.
 
 static std::string
@@ -676,46 +676,46 @@ tilde_expand_word (const std::string& fi
 
   size_t user_len = username.length ();
 
   std::string dirname;
 
   if (file_ops::tilde_expansion_preexpansion_hook)
     {
       std::string expansion
-	= file_ops::tilde_expansion_preexpansion_hook (username);
+        = file_ops::tilde_expansion_preexpansion_hook (username);
 
       if (! expansion.empty ())
-	return expansion + filename.substr (user_len+1);
+        return expansion + filename.substr (user_len+1);
     }
 
   // No preexpansion hook, or the preexpansion hook failed.  Look in the
   // password database.
 
   octave_passwd pw = octave_passwd::getpwnam (username);
 
   if (! pw)
     {
       // If the calling program has a special syntax for expanding tildes,
       // and we couldn't find a standard expansion, then let them try.
 
       if (file_ops::tilde_expansion_failure_hook)
-	{
-	  std::string expansion
-	    = file_ops::tilde_expansion_failure_hook (username);
+        {
+          std::string expansion
+            = file_ops::tilde_expansion_failure_hook (username);
 
-	  if (! expansion.empty ())
-	    dirname = expansion + filename.substr (user_len+1);
-	}
+          if (! expansion.empty ())
+            dirname = expansion + filename.substr (user_len+1);
+        }
 
       // If we don't have a failure hook, or if the failure hook did not
       // expand the tilde, return a copy of what we were passed.
 
       if (dirname.length () == 0)
-	dirname = filename;
+        dirname = filename;
     }
   else
     dirname = pw.dir () + filename.substr (user_len+1);
 
   return dirname;
 }
 
 // If NAME has a leading ~ or ~user, Unix-style, expand it to the
@@ -732,52 +732,52 @@ file_ops::tilde_expand (const std::strin
 
       size_t name_len = name.length ();
 
       // Scan through S expanding tildes as we come to them.
 
       size_t pos = 0;
 
       while (1)
-	{
-	  if (pos > name_len)
-	    break;
+        {
+          if (pos > name_len)
+            break;
 
-	  size_t len;
+          size_t len;
 
-	  // Make START point to the tilde which starts the expansion.
+          // Make START point to the tilde which starts the expansion.
 
-	  size_t start = tilde_find_prefix (name.substr (pos), len);
+          size_t start = tilde_find_prefix (name.substr (pos), len);
 
-	  result.append (name.substr (pos, start));
+          result.append (name.substr (pos, start));
 
-	  // Advance STRING to the starting tilde.
+          // Advance STRING to the starting tilde.
 
-	  pos += start;
+          pos += start;
 
-	  // Make FINI be the index of one after the last character of the
-	  // username.
+          // Make FINI be the index of one after the last character of the
+          // username.
 
-	  size_t fini = tilde_find_suffix (name.substr (pos));
+          size_t fini = tilde_find_suffix (name.substr (pos));
 
-	  // If both START and FINI are zero, we are all done.
+          // If both START and FINI are zero, we are all done.
 
-	  if (! (start || fini))
-	    break;
+          if (! (start || fini))
+            break;
 
-	  // Expand the entire tilde word, and copy it into RESULT.
+          // Expand the entire tilde word, and copy it into RESULT.
 
-	  std::string tilde_word = name.substr (pos, fini);
+          std::string tilde_word = name.substr (pos, fini);
 
-	  pos += fini;
+          pos += fini;
 
-	  std::string expansion = tilde_expand_word (tilde_word);
+          std::string expansion = tilde_expand_word (tilde_word);
 
-	  result.append (expansion);
-	}
+          result.append (expansion);
+        }
 
       return result;
     }
 }
 
 // A vector version of the above.
 
 string_vector
diff --git a/liboctave/file-ops.h b/liboctave/file-ops.h
--- a/liboctave/file-ops.h
+++ b/liboctave/file-ops.h
@@ -61,17 +61,17 @@ public:
   static int recursive_rmdir (const std::string&);
   static int recursive_rmdir (const std::string&, std::string&);
 
   static std::string canonicalize_file_name (const std::string&);
   static std::string canonicalize_file_name (const std::string&, std::string&);
 
   static std::string tempnam (const std::string&, const std::string&);
   static std::string tempnam (const std::string&, const std::string&,
-			      std::string&);
+                              std::string&);
 
   typedef std::string (*tilde_expansion_hook) (const std::string&);
 
   static tilde_expansion_hook tilde_expansion_preexpansion_hook;
 
   static tilde_expansion_hook tilde_expansion_failure_hook;
 
   static string_vector tilde_additional_prefixes;
diff --git a/liboctave/lo-cutils.c b/liboctave/lo-cutils.c
--- a/liboctave/lo-cutils.c
+++ b/liboctave/lo-cutils.c
@@ -79,17 +79,17 @@ octave_mkdir (const char *name, mode_t m
 OCTAVE_API int
 octave_mkfifo (const char *name, mode_t mode)
 {
   return mkfifo (name, mode);
 }
 
 OCTAVE_API void
 octave_qsort (void *base, size_t n, size_t size,
-	      int (*cmp) (const void *, const void *))
+              int (*cmp) (const void *, const void *))
 {
   qsort (base, n, size, cmp);
 }
 
 OCTAVE_API char *
 oct_strptime (const char *buf, const char *format, struct tm *tm)
 {
   return (char *) strptime (buf, format, tm);
diff --git a/liboctave/lo-utils.h b/liboctave/lo-utils.h
--- a/liboctave/lo-utils.h
+++ b/liboctave/lo-utils.h
@@ -36,17 +36,18 @@ extern OCTAVE_API octave_idx_type NINTbi
 extern OCTAVE_API octave_idx_type NINTbig (float x);
 extern OCTAVE_API int NINT (double x);
 extern OCTAVE_API int NINT (float x);
 extern OCTAVE_API double D_NINT (double x);
 extern OCTAVE_API float F_NINT (float x);
 
 extern OCTAVE_API char *strsave (const char *);
 
-extern OCTAVE_API void octave_putenv (const std::string&, const std::string&);
+extern OCTAVE_API void
+octave_putenv (const std::string&, const std::string&);
 
 extern OCTAVE_API std::string octave_fgets (std::FILE *);
 extern OCTAVE_API std::string octave_fgetl (std::FILE *);
 
 extern OCTAVE_API std::string octave_fgets (std::FILE *, bool& eof);
 extern OCTAVE_API std::string octave_fgetl (std::FILE *, bool& eof);
 
 extern "C" OCTAVE_API int octave_gethostname (char *, int);
@@ -55,33 +56,39 @@ extern "C" OCTAVE_API int
 octave_link (const char *old_name, const char *new_name);
 
 extern "C" OCTAVE_API int
 octave_symlink (const char *old_name, const char *new_name);
 
 extern "C" OCTAVE_API int
 octave_readlink (const char *name, char *buf, size_t size);
 
-extern "C" OCTAVE_API int octave_mkdir (const char *name, mode_t mode);
+extern "C" OCTAVE_API int
+octave_mkdir (const char *name, mode_t mode);
 
-extern "C" OCTAVE_API int octave_mkfifo (const char *name, mode_t mode);
+extern "C" OCTAVE_API int
+octave_mkfifo (const char *name, mode_t mode);
 
-extern "C" OCTAVE_API void octave_qsort (void *base, size_t n, size_t size,
-			      int (*cmp) (const void *, const void *));
+extern "C" OCTAVE_API void
+octave_qsort (void *base, size_t n, size_t size,
+              int (*cmp) (const void *, const void *));
 
 extern "C" OCTAVE_API int octave_rmdir (const char *name);
 
-extern "C" OCTAVE_API int octave_rename (const char *from, const char *to);
+extern "C" OCTAVE_API int
+octave_rename (const char *from, const char *to);
+
+extern "C" OCTAVE_API char *
+oct_strptime (const char *buf, const char *format, struct tm *tm);
 
-extern "C" OCTAVE_API char *oct_strptime (const char *buf, const char *format,
-                                          struct tm *tm);
+extern "C" OCTAVE_API int
+octave_strcasecmp (const char *s1, const char *s2);
 
-extern "C" OCTINTERP_API int octave_strcasecmp (const char *s1, const char *s2);
-
-extern "C" OCTINTERP_API int octave_strncasecmp (const char *s1, const char *s2, size_t n);
+extern "C" OCTAVE_API int
+octave_strncasecmp (const char *s1, const char *s2, size_t n);
 
 extern "C" OCTAVE_API char *
 octave_tempnam (const char *pdir, const char *ppfx);
 
 extern "C" OCTAVE_API mode_t octave_umask (mode_t);
 
 extern "C" OCTAVE_API int octave_unlink (const char *name);
 
@@ -119,23 +126,31 @@ octave_read_float (std::istream& is)
 }
 
 inline FloatComplex
 octave_read_float_complex (std::istream& is)
 {
   return octave_read_value<FloatComplex> (is);
 }
 
-extern OCTAVE_API void octave_write_double (std::ostream& os, double dval);
-extern OCTAVE_API void octave_write_complex (std::ostream& os, const Complex& cval);
+extern OCTAVE_API void
+octave_write_double (std::ostream& os, double dval);
+
+extern OCTAVE_API void
+octave_write_complex (std::ostream& os, const Complex& cval);
 
-extern OCTAVE_API void octave_write_float (std::ostream& os, float dval);
-extern OCTAVE_API void octave_write_float_complex (std::ostream& os, const FloatComplex& cval);
+extern OCTAVE_API void
+octave_write_float (std::ostream& os, float dval);
+
+extern OCTAVE_API void
+octave_write_float_complex (std::ostream& os, const FloatComplex& cval);
 
 #ifdef HAVE_LOADLIBRARY_API
 #include <windows.h>
-extern "C" OCTAVE_API void * octave_w32_library_search (HINSTANCE handle, const char *name);
+extern "C" OCTAVE_API void *
+octave_w32_library_search (HINSTANCE handle, const char *name);
 #undef min
 #undef max
 #endif
 #endif
 
-extern "C" OCTAVE_API pid_t octave_waitpid (pid_t pid, int *status, int options);
+extern "C" OCTAVE_API pid_t
+octave_waitpid (pid_t pid, int *status, int options);
