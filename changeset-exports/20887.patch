# HG changeset patch
# User Rik <rik@octave.org>
# Date 1450035365 28800
#      Sun Dec 13 11:36:05 2015 -0800
# Node ID 05125a9eb9c61c6a7f12e6dea07cac4ceb4b72e1
# Parent  3c986b688596a6eaa302fd4c3773153a34895af4
2015 Code Sprint: syscalls.cc: use ovl (), move print_usage to top of fcn.

diff --git a/libinterp/corefcn/syscalls.cc b/libinterp/corefcn/syscalls.cc
--- a/libinterp/corefcn/syscalls.cc
+++ b/libinterp/corefcn/syscalls.cc
@@ -86,73 +86,53 @@ mk_stat_map (const base_file_stat& fs)
 #endif
 
   return m;
 }
 
 static octave_value_list
 mk_stat_result (const base_file_stat& fs)
 {
-  octave_value_list retval;
-
   if (fs)
-    {
-      retval(2) = std::string ();
-      retval(1) = 0;
-      retval(0) = octave_value (mk_stat_map (fs));
-    }
+    return ovl (octave_value (mk_stat_map (fs)), 0, "");
   else
-    {
-      retval(2) = fs.error ();
-      retval(1) = -1;
-      retval(0) = Matrix ();
-    }
-
-  return retval;
+    return ovl (Matrix (), -1, fs.error ());
 }
 
 DEFUNX ("dup2", Fdup2, args, ,
         "-*- texinfo -*-\n\
 @deftypefn {} {[@var{fid}, @var{msg}] =} dup2 (@var{old}, @var{new})\n\
 Duplicate a file descriptor.\n\
 \n\
 If successful, @var{fid} is greater than zero and contains the new file ID@.\n\
 Otherwise, @var{fid} is negative and @var{msg} contains a system-dependent\n\
 error message.\n\
 @seealso{fopen, fclose, fcntl}\n\
 @end deftypefn")
 {
-  octave_value_list retval;
-
-  retval(1) = std::string ();
-  retval(0) = -1;
-
   if (args.length () != 2)
     print_usage ();
 
-  octave_stream old_stream
-    = octave_stream_list::lookup (args(0), "dup2");
+  octave_stream old_stream = octave_stream_list::lookup (args(0), "dup2");
 
-  octave_stream new_stream
-    = octave_stream_list::lookup (args(1), "dup2");
+  octave_stream new_stream = octave_stream_list::lookup (args(1), "dup2");
 
   int i_old = old_stream.file_number ();
   int i_new = new_stream.file_number ();
 
   if (i_old >= 0 && i_new >= 0)
     {
       std::string msg;
 
       int status = octave_syscalls::dup2 (i_old, i_new, msg);
 
-      retval(1) = msg;
-      retval(0) = status;
+      return ovl (status, msg);
     }
-
-  return retval;
+  else
+    return ovl (-1, "");
 }
 
 DEFUNX ("exec", Fexec, args, ,
         "-*- texinfo -*-\n\
 @deftypefn {} {[@var{err}, @var{msg}] =} exec (@var{file}, @var{args})\n\
 Replace current process with a new process.\n\
 \n\
 Calling @code{exec} without first calling @code{fork} will terminate your\n\
@@ -166,21 +146,16 @@ exec (\"ls\" \"-l\")\n\
 @noindent\n\
 will run @code{ls} and return you to your shell prompt.\n\
 \n\
 If successful, @code{exec} does not return.  If @code{exec} does return,\n\
 @var{err} will be nonzero, and @var{msg} will contain a system-dependent\n\
 error message.\n\
 @end deftypefn")
 {
-  octave_value_list retval;
-
-  retval(1) = std::string ();
-  retval(0) = -1;
-
   int nargin = args.length ();
 
   if (nargin < 1 || nargin > 2)
     print_usage ();
 
   std::string exec_file = args(0).xstring_value ("exec: FILE must be a string");
 
   string_vector exec_args;
@@ -209,20 +184,17 @@ error message.\n\
 
   if (! command_history::ignoring_entries ())
     command_history::clean_up_and_save ();
 
   std::string msg;
 
   int status = octave_syscalls::execvp (exec_file, exec_args, msg);
 
-  retval(1) = msg;
-  retval(0) = status;
-
-  return retval;
+  return ovl (status, msg);
 }
 
 DEFUNX ("popen2", Fpopen2, args, ,
         "-*- texinfo -*-\n\
 @deftypefn {} {[@var{in}, @var{out}, @var{pid}] =} popen2 (@var{command}, @var{args})\n\
 Start a subprocess with two-way communication.\n\
 \n\
 The name of the process is given by @var{command}, and @var{args} is an\n\
@@ -262,22 +234,16 @@ waitpid (pid);\n\
 @end example\n\
 \n\
 Note that @code{popen2}, unlike @code{popen}, will not @nospell{\"reap\"} the\n\
 child process.  If you don't use @code{waitpid} to check the child's\n\
 exit status, it will linger until Octave exits.\n\
 @seealso{popen, waitpid}\n\
 @end deftypefn")
 {
-  octave_value_list retval;
-
-  retval(2) = -1;
-  retval(1) = Matrix ();
-  retval(0) = Matrix ();
-
   int nargin = args.length ();
 
   if (nargin < 1 || nargin > 3)
     print_usage ();
 
   std::string exec_file = args(0).xstring_value ("popen2: COMMAND argument must be a string");
 
   string_vector arg_list;
@@ -299,47 +265,39 @@ exit status, it will linger until Octave
     {
       arg_list.resize (1);
 
       arg_list[0] = exec_file;
     }
 
   bool sync_mode = (nargin == 3 ? args(2).bool_value () : false);
 
-  int fildes[2];
+  int filedesc[2];
   std::string msg;
   pid_t pid;
 
   pid = octave_syscalls::popen2 (exec_file, arg_list, sync_mode,
-                                 fildes, msg, interactive);
-  if (pid >= 0)
-    {
-      FILE *ifile = fdopen (fildes[1], "r");
-      FILE *ofile = fdopen (fildes[0], "w");
-
-      std::string nm;
-
-      octave_stream is = octave_stdiostream::create (exec_file + "-in",
-                                                     ifile,
-                                                     std::ios::in);
-
-      octave_stream os = octave_stdiostream::create (exec_file + "-out",
-                                                     ofile,
-                                                     std::ios::out);
-
-      Cell file_ids (1, 2);
-
-      retval(2) = pid;
-      retval(1) = octave_stream_list::insert (is);
-      retval(0) = octave_stream_list::insert (os);
-    }
-  else
+                                 filedesc, msg, interactive);
+  if (pid < 0)
     error (msg.c_str ());
 
-  return retval;
+  FILE *ifile = fdopen (filedesc[1], "r");
+  FILE *ofile = fdopen (filedesc[0], "w");
+
+  octave_stream is = octave_stdiostream::create (exec_file + "-in",
+                                                 ifile,
+                                                 std::ios::in);
+
+  octave_stream os = octave_stdiostream::create (exec_file + "-out",
+                                                 ofile,
+                                                 std::ios::out);
+
+  return ovl (octave_stream_list::insert (os),
+              octave_stream_list::insert (is),
+              pid);
 }
 
 /*
 
 %!test  # UNIX-style test
 %! if (isunix () || ismac ())
 %!   [in, out, pid] = popen2 ("sort", "-r");
 %!   EAGAIN = errno ("EAGAIN");
@@ -459,47 +417,37 @@ Set the file status flags for @var{fid} 
 @end vtable\n\
 \n\
 If successful, @var{err} is 0 and @var{msg} is an empty string.  Otherwise,\n\
 @var{err} is nonzero and @var{msg} contains a system-dependent error\n\
 message.\n\
 @seealso{fopen, dup2}\n\
 @end deftypefn")
 {
-  octave_value_list retval;
-
-  retval(1) = std::string ();
-  retval(0) = -1;
-
-  int nargin = args.length ();
-
-  if (nargin != 3)
+  if (args.length () != 3)
     print_usage ();
 
   octave_stream strm = octave_stream_list::lookup (args(0), "fcntl");
 
   int fid = strm.file_number ();
 
+  // FIXME: Do we want to use xint_value and throw a warning message
+  //        if input validation fails?
   int req = args(1).int_value (true);
   int arg = args(2).int_value (true);
 
   // FIXME: Need better checking here?
   if (fid < 0)
     error ("fcntl: invalid file id");
-  else
-    {
-      std::string msg;
 
-      int status = octave_fcntl (fid, req, arg, msg);
+  std::string msg;
 
-      retval(1) = msg;
-      retval(0) = status;
-    }
+  int status = octave_fcntl (fid, req, arg, msg);
 
-  return retval;
+  return ovl (status, msg);
 }
 
 DEFUNX ("fork", Ffork, args, ,
         "-*- texinfo -*-\n\
 @deftypefn {} {[@var{pid}, @var{msg}] =} fork ()\n\
 Create a copy of the current process.\n\
 \n\
 Fork can return one of the following values:\n\
@@ -515,154 +463,118 @@ You are in the child process.  You can c
 process.  If that fails, you should probably call @code{exit}.\n\
 \n\
 @item < 0\n\
 The call to @code{fork} failed for some reason.  You must take evasive\n\
 action.  A system dependent error message will be waiting in @var{msg}.\n\
 @end table\n\
 @end deftypefn")
 {
-  octave_value_list retval;
-
-  retval(1) = std::string ();
-  retval(0) = -1;
-
-  int nargin = args.length ();
-
-  if (nargin != 0)
+  if (args.length () != 0)
     print_usage ();
 
   std::string msg;
 
   pid_t pid = octave_syscalls::fork (msg);
 
-  retval(1) = msg;
-  retval(0) = pid;
-
-  return retval;
+  return ovl (pid, msg);
 }
 
 DEFUNX ("getpgrp", Fgetpgrp, args, ,
         "-*- texinfo -*-\n\
 @deftypefn {} {pgid =} getpgrp ()\n\
 Return the process group id of the current process.\n\
 @end deftypefn")
 {
-  octave_value_list retval;
-
-  retval(1) = std::string ();
-  retval(0) = -1;
-
-  int nargin = args.length ();
-
-  if (nargin != 0)
+  if (args.length () != 0)
     print_usage ();
 
   std::string msg;
 
-  retval(1) = msg;
-  retval(0) = octave_syscalls::getpgrp (msg);
+  pid_t pid = octave_syscalls::getpgrp (msg);
 
-  return retval;
+  return ovl (pid, msg);
 }
 
 DEFUNX ("getpid", Fgetpid, args, ,
         "-*- texinfo -*-\n\
 @deftypefn {} {pid =} getpid ()\n\
 Return the process id of the current process.\n\
 @seealso{getppid}\n\
 @end deftypefn")
 {
-  int nargin = args.length ();
-
-  if (nargin != 0)
+  if (args.length () != 0)
     print_usage ();
 
   return octave_value (octave_syscalls::getpid ());
 }
 
 DEFUNX ("getppid", Fgetppid, args, ,
         "-*- texinfo -*-\n\
 @deftypefn {} {pid =} getppid ()\n\
 Return the process id of the parent process.\n\
 @seealso{getpid}\n\
 @end deftypefn")
 {
-  int nargin = args.length ();
-
-  if (nargin != 0)
+  if (args.length () != 0)
     print_usage ();
 
   return octave_value (octave_syscalls::getppid ());
 }
 
 DEFUNX ("getegid", Fgetegid, args, ,
         "-*- texinfo -*-\n\
 @deftypefn {} {egid =} getegid ()\n\
 Return the effective group id of the current process.\n\
 @seealso{getgid}\n\
 @end deftypefn")
 {
-  int nargin = args.length ();
-
-  if (nargin != 0)
+  if (args.length () != 0)
     print_usage ();
 
   return octave_value (octave_syscalls::getegid ());
 }
 
 DEFUNX ("getgid", Fgetgid, args, ,
         "-*- texinfo -*-\n\
 @deftypefn {} {gid =} getgid ()\n\
 Return the real group id of the current process.\n\
 @seealso{getegid}\n\
 @end deftypefn")
 {
-  int nargin = args.length ();
-
-  if (nargin != 0)
+  if (args.length () != 0)
     print_usage ();
 
   return octave_value (octave_syscalls::getgid ());
 }
 
 DEFUNX ("geteuid", Fgeteuid, args, ,
         "-*- texinfo -*-\n\
 @deftypefn {} {euid =} geteuid ()\n\
 Return the effective user id of the current process.\n\
 @seealso{getuid}\n\
 @end deftypefn")
 {
-  octave_value retval = -1;
-
-  int nargin = args.length ();
-
-  if (nargin != 0)
+  if (args.length () != 0)
     print_usage ();
 
-  retval = octave_syscalls::geteuid ();
-  return retval;
+  return octave_value (octave_syscalls::geteuid ());
 }
 
 DEFUNX ("getuid", Fgetuid, args, ,
         "-*- texinfo -*-\n\
 @deftypefn {} {uid =} getuid ()\n\
 Return the real user id of the current process.\n\
 @seealso{geteuid}\n\
 @end deftypefn")
 {
-  octave_value retval = -1;
-
-  int nargin = args.length ();
-
-  if (nargin != 0)
+  if (args.length () != 0)
     print_usage ();
 
-  retval = octave_syscalls::getuid ();
-  return retval;
+  return octave_value (octave_syscalls::getuid ());
 }
 
 DEFUNX ("kill", Fkill, args, ,
         "-*- texinfo -*-\n\
 @deftypefn {} {[@var{err}, @var{msg}] =} kill (@var{pid}, @var{sig})\n\
 Send signal @var{sig} to process @var{pid}.\n\
 \n\
 If @var{pid} is positive, then signal @var{sig} is sent to @var{pid}.\n\
@@ -677,61 +589,49 @@ If @var{pid} is less than -1, then signa
 process in the process group @var{-pid}.\n\
 \n\
 If @var{sig} is 0, then no signal is sent, but error checking is still\n\
 performed.\n\
 \n\
 Return 0 if successful, otherwise return -1.\n\
 @end deftypefn")
 {
-  octave_value_list retval;
-
-  retval(1) = std::string ();
-  retval(0) = -1;
-
   if (args.length () != 2)
     print_usage ();
 
   pid_t pid = args(0).int_value (true);
 
   int sig = args(1).int_value (true);
 
   std::string msg;
 
   int status = octave_syscalls::kill (pid, sig, msg);
 
-  retval(1) = msg;
-  retval(0) = status;
-
-  return retval;
+  return ovl (status, msg);
 }
 
 DEFUNX ("lstat", Flstat, args, ,
         "-*- texinfo -*-\n\
 @deftypefn  {} {@var{info} =} lstat (@var{symlink})\n\
 @deftypefnx {} {[@var{info}, @var{err}, @var{msg}] =} lstat (@var{symlink})\n\
 Return a structure @var{info} containing information about the symbolic link\n\
 @var{symlink}.\n\
 \n\
 The function outputs are described in the documentation for @code{stat}.\n\
 @seealso{stat, symlink}\n\
 @end deftypefn")
 {
-  octave_value_list retval;
-
   if (args.length () != 1)
     print_usage ();
 
-    std::string fname = args(0).xstring_value ("lstat: NAME must be a string");
-
-    file_stat fs (fname, false);
+  std::string fname = args(0).xstring_value ("lstat: NAME must be a string");
 
-    retval = mk_stat_result (fs);
+  file_stat fs (fname, false);
 
-  return retval;
+  return mk_stat_result (fs);
 }
 
 // FIXME: This routine also exists verbatim in file-io.cc.
 //        Maybe change to be a general utility routine.
 static int
 convert (int x, int ibase, int obase)
 {
   int retval = 0;
@@ -770,48 +670,38 @@ Create a FIFO special file named @var{na
 processing.  The final calculated mode is @code{@var{mode} - @var{umask}}.\n\
 \n\
 If successful, @var{err} is 0 and @var{msg} is an empty string.\n\
 Otherwise, @var{err} is nonzero and @var{msg} contains a system-dependent\n\
 error message.\n\
 @seealso{pipe, umask}\n\
 @end deftypefn")
 {
-  octave_value_list retval (2);
-
-  retval(1) = std::string ();
-  retval(0) = -1;
-
-  int nargin = args.length ();
-
-  if (nargin != 2)
+  if (args.length () != 2)
     print_usage ();
 
   std::string name = args(0).xstring_value ("mkfifo: FILE must be a string");
 
   int octal_mode = args(1).xint_value ("mkfifo: MODE must be an integer");
 
   if (octal_mode < 0)
     error ("mkfifo: MODE must be a positive integer value");
-  else
-    {
-      int mode = convert (octal_mode, 8, 10);
+
+  octave_value_list retval (2);
 
-      std::string msg;
-
-      int status = octave_mkfifo (name, mode, msg);
+  retval(1) = std::string ();
+  retval(0) = -1;
 
-      retval(0) = status;
+  int mode = convert (octal_mode, 8, 10);
+
+  std::string msg;
 
-      if (status < 0)
-          retval(1) = msg;
-    }
+  int status = octave_mkfifo (name, mode, msg);
 
-
-  return retval;
+  return ovl (status, msg);
 }
 
 /*
 
 ## Test input validation
 %!error mkfifo ()
 %!error mkfifo ("abc")
 %!error mkfifo ("abc", 777, 123)
@@ -829,53 +719,42 @@ Create a pipe and return the reading and
 @var{read_fd} and @var{write_fd} respectively.\n\
 \n\
 If successful, @var{err} is 0 and @var{msg} is an empty string.\n\
 Otherwise, @var{err} is nonzero and @var{msg} contains a system-dependent\n\
 error message.\n\
 @seealso{mkfifo}\n\
 @end deftypefn")
 {
-  octave_value_list retval;
-
-  retval(3) = std::string ();
-  retval(2) = -1;
-  retval(1) = -1;
-  retval(0) = -1;
-
-  int nargin = args.length ();
-
-  if (nargin != 0)
+  if (args.length () != 0)
     print_usage ();
 
   int fid[2];
-
   std::string msg;
 
   int status = octave_syscalls::pipe (fid, msg);
 
   if (status < 0)
-    retval(3) = msg;
+    return ovl (-1, -1, -1, msg);
   else
     {
       FILE *ifile = fdopen (fid[0], "r");
       FILE *ofile = fdopen (fid[1], "w");
 
       octave_stream is = octave_stdiostream::create ("pipe-in", ifile,
                                                        std::ios::in);
 
       octave_stream os = octave_stdiostream::create ("pipe-out", ofile,
                                                        std::ios::out);
 
-      retval(2) = status;
-      retval(1) = octave_stream_list::insert (os);
-      retval(0) = octave_stream_list::insert (is);
+      return ovl (octave_stream_list::insert (is),
+                  octave_stream_list::insert (os),
+                  status,
+                  msg);
     }
-
-  return retval;
 }
 
 DEFUNX ("stat", Fstat, args, ,
         "-*- texinfo -*-\n\
 @deftypefn  {} {[@var{info}, @var{err}, @var{msg}] =} stat (@var{file})\n\
 @deftypefnx {} {[@var{info}, @var{err}, @var{msg}] =} stat (@var{fid})\n\
 @deftypefnx {} {[@var{info}, @var{err}, @var{msg}] =} lstat (@var{file})\n\
 @deftypefnx {} {[@var{info}, @var{err}, @var{msg}] =} lstat (@var{fid})\n\
@@ -964,204 +843,170 @@ For example:\n\
        dev = 2049\n\
      @}\n\
   @result{} err = 0\n\
   @result{} msg =\n\
 @end example\n\
 @seealso{lstat, ls, dir}\n\
 @end deftypefn")
 {
-  octave_value_list retval;
-
   if (args.length () != 1)
     print_usage ();
 
-    if (args(0).is_scalar_type ())
-      {
-        int fid = octave_stream_list::get_file_number (args(0));
+  octave_value_list retval;
 
-        file_fstat fs (fid);
+  if (args(0).is_scalar_type ())
+    {
+      int fid = octave_stream_list::get_file_number (args(0));
+
+      file_fstat fs (fid);
 
-        retval = mk_stat_result (fs);
-      }
-    else
-      {
-        std::string fname = args(0).xstring_value ("stat: NAME must be a string");
+      retval = mk_stat_result (fs);
+    }
+  else
+    {
+      std::string fname = args(0).xstring_value ("stat: NAME must be a string");
 
-        file_stat fs (fname);
+      file_stat fs (fname);
 
-        retval = mk_stat_result (fs);
-      }
+      retval = mk_stat_result (fs);
+    }
 
   return retval;
 }
 
 DEFUNX ("S_ISREG", FS_ISREG, args, ,
         "-*- texinfo -*-\n\
 @deftypefn {} {} S_ISREG (@var{mode})\n\
 Return true if @var{mode} corresponds to a regular file.\n\
 \n\
 The value of @var{mode} is assumed to be returned from a call to @code{stat}.\n\
 @seealso{stat, lstat}\n\
 @end deftypefn")
 {
-  octave_value retval = false;
-
   if (args.length () != 1)
     print_usage ();
 
   double mode = args(0).xdouble_value ("S_ISREG: invalid MODE value");
 
-  retval = file_stat::is_reg (static_cast<mode_t> (mode));
-
-  return retval;
+  return octave_value (file_stat::is_reg (static_cast<mode_t> (mode)));
 }
 
 DEFUNX ("S_ISDIR", FS_ISDIR, args, ,
         "-*- texinfo -*-\n\
 @deftypefn {} {} S_ISDIR (@var{mode})\n\
 Return true if @var{mode} corresponds to a directory.\n\
 \n\
 The value of @var{mode} is assumed to be returned from a call to @code{stat}.\n\
 @seealso{stat, lstat}\n\
 @end deftypefn")
 {
-  octave_value retval = false;
-
   if (args.length () != 1)
     print_usage ();
 
   double mode = args(0).xdouble_value ("S_ISDIR: invalid MODE value");
 
-  retval = file_stat::is_dir (static_cast<mode_t> (mode));
-
-  return retval;
+  return octave_value (file_stat::is_dir (static_cast<mode_t> (mode)));
 }
 
 DEFUNX ("S_ISCHR", FS_ISCHR, args, ,
         "-*- texinfo -*-\n\
 @deftypefn {} {} S_ISCHR (@var{mode})\n\
 Return true if @var{mode} corresponds to a character device.\n\
 \n\
 The value of @var{mode} is assumed to be returned from a call to @code{stat}.\n\
 @seealso{stat, lstat}\n\
 @end deftypefn")
 {
-  octave_value retval = false;
-
   if (args.length () != 1)
     print_usage ();
 
   double mode = args(0).xdouble_value ("S_ISCHR: invalid MODE value");
 
-  retval = file_stat::is_chr (static_cast<mode_t> (mode));
-
-
-  return retval;
+  return octave_value (file_stat::is_chr (static_cast<mode_t> (mode)));
 }
 
 DEFUNX ("S_ISBLK", FS_ISBLK, args, ,
         "-*- texinfo -*-\n\
 @deftypefn {} {} S_ISBLK (@var{mode})\n\
 Return true if @var{mode} corresponds to a block device.\n\
 \n\
 The value of @var{mode} is assumed to be returned from a call to @code{stat}.\n\
 @seealso{stat, lstat}\n\
 @end deftypefn")
 {
-  octave_value retval = false;
-
   if (args.length () != 1)
     print_usage ();
 
   double mode = args(0).xdouble_value ("S_ISBLK: invalid MODE value");
 
-  retval = file_stat::is_blk (static_cast<mode_t> (mode));
-
-  return retval;
+  return octave_value (file_stat::is_blk (static_cast<mode_t> (mode)));
 }
 
 DEFUNX ("S_ISFIFO", FS_ISFIFO, args, ,
         "-*- texinfo -*-\n\
 @deftypefn {} {} S_ISFIFO (@var{mode})\n\
 Return true if @var{mode} corresponds to a fifo.\n\
 \n\
 The value of @var{mode} is assumed to be returned from a call to @code{stat}.\n\
 @seealso{stat, lstat}\n\
 @end deftypefn")
 {
-  octave_value retval = false;
-
   if (args.length () != 1)
     print_usage ();
 
   double mode = args(0).xdouble_value ("S_ISFIFO: invalid MODE value");
 
-  retval = file_stat::is_fifo (static_cast<mode_t> (mode));
-
-  return retval;
+  return octave_value (file_stat::is_fifo (static_cast<mode_t> (mode)));
 }
 
 DEFUNX ("S_ISLNK", FS_ISLNK, args, ,
         "-*- texinfo -*-\n\
 @deftypefn {} {} S_ISLNK (@var{mode})\n\
 Return true if @var{mode} corresponds to a symbolic link.\n\
 \n\
 The value of @var{mode} is assumed to be returned from a call to @code{stat}.\n\
 @seealso{stat, lstat}\n\
 @end deftypefn")
 {
-  octave_value retval = false;
-
   if (args.length () != 1)
     print_usage ();
 
   double mode = args(0).xdouble_value ("S_ISLNK: invalid MODE value");
 
-  retval = file_stat::is_lnk (static_cast<mode_t> (mode));
-
-  return retval;
+  return octave_value (file_stat::is_lnk (static_cast<mode_t> (mode)));
 }
 
 DEFUNX ("S_ISSOCK", FS_ISSOCK, args, ,
         "-*- texinfo -*-\n\
 @deftypefn {} {} S_ISSOCK (@var{mode})\n\
 Return true if @var{mode} corresponds to a socket.\n\
 \n\
 The value of @var{mode} is assumed to be returned from a call to @code{stat}.\n\
 @seealso{stat, lstat}\n\
 @end deftypefn")
 {
-  octave_value retval = false;
-
   if (args.length () != 1)
     print_usage ();
 
   double mode = args(0).xdouble_value ("S_ISSOCK: invalid MODE value");
 
-  retval = file_stat::is_sock (static_cast<mode_t> (mode));
-
-
-  return retval;
+  return octave_value (file_stat::is_sock (static_cast<mode_t> (mode)));
 }
 
 DEFUN (gethostname, args, ,
        "-*- texinfo -*-\n\
 @deftypefn {} {} gethostname ()\n\
 Return the hostname of the system where Octave is running.\n\
 @end deftypefn")
 {
-  octave_value retval;
-
   if (args.length () != 0)
     print_usage ();
 
-  retval = octave_env::get_host_name ();
-
-  return retval;
+  return octave_value (octave_env::get_host_name ());
 }
 
 DEFUN (uname, args, ,
        "-*- texinfo -*-\n\
 @deftypefn {} {[@var{uts}, @var{err}, @var{msg}] =} uname ()\n\
 Return system information in the structure.\n\
 \n\
 For example:\n\
@@ -1179,71 +1024,53 @@ uname ()\n\
 @end group\n\
 @end example\n\
 \n\
 If successful, @var{err} is 0 and @var{msg} is an empty string.\n\
 Otherwise, @var{err} is nonzero and @var{msg} contains a\n\
 system-dependent error message.\n\
 @end deftypefn")
 {
-  octave_value_list retval;
-
   if (args.length () != 0)
     print_usage ();
 
   octave_uname sysinfo;
 
   octave_scalar_map m;
 
   m.assign ("sysname", sysinfo.sysname ());
   m.assign ("nodename", sysinfo.nodename ());
   m.assign ("release", sysinfo.release ());
   m.assign ("version", sysinfo.version ());
   m.assign ("machine", sysinfo.machine ());
 
-  retval(2) = sysinfo.message ();
-  retval(1) = sysinfo.error ();
-  retval(0) = m;
-
-
-  return retval;
+  return ovl (m, sysinfo.error (), sysinfo.message ());
 }
 
 DEFUNX ("unlink", Funlink, args, ,
         "-*- texinfo -*-\n\
 @deftypefn {} {[@var{err}, @var{msg}] =} unlink (@var{file})\n\
 Delete the file named @var{file}.\n\
 \n\
 If successful, @var{err} is 0 and @var{msg} is an empty string.\n\
 Otherwise, @var{err} is nonzero and @var{msg} contains a system-dependent\n\
 error message.\n\
 @seealso{delete, rmdir}\n\
 @end deftypefn")
 {
-  octave_value_list retval;
-
-  retval(1) = std::string ();
-  retval(0) = -1;
-
-  int nargin = args.length ();
-
-  if (nargin != 1)
+  if (args.length () != 1)
     print_usage ();
 
   std::string name = args(0).xstring_value ("unlink: FILE must be a string");
 
   std::string msg;
 
   int status = octave_unlink (name, msg);
 
-  retval(1) = msg;
-  retval(0) = status;
-
-
-  return retval;
+  return ovl (status, msg);
 }
 
 DEFUNX ("waitpid", Fwaitpid, args, ,
         "-*- texinfo -*-\n\
 @deftypefn {} {[@var{pid}, @var{status}, @var{msg}] =} waitpid (@var{pid}, @var{options})\n\
 Wait for process @var{pid} to terminate.\n\
 \n\
 The @var{pid} argument can be:\n\
@@ -1283,267 +1110,205 @@ This value may not be meaningful on all 
 If the returned value of @var{pid} is greater than 0, it is the process ID\n\
 of the child process that exited.  If an error occurs, @var{pid} will be\n\
 less than zero and @var{msg} will contain a system-dependent error message.\n\
 The value of @var{status} contains additional system-dependent information\n\
 about the subprocess that exited.\n\
 @seealso{WCONTINUE, WCOREDUMP, WEXITSTATUS, WIFCONTINUED, WIFSIGNALED, WIFSTOPPED, WNOHANG, WSTOPSIG, WTERMSIG, WUNTRACED}\n\
 @end deftypefn")
 {
-  octave_value_list retval;
-
-  retval(2) = std::string ();
-  retval(1) = 0;
-  retval(0) = -1;
-
   int nargin = args.length ();
 
   if (nargin != 1 && nargin != 2)
     print_usage ();
 
   pid_t pid = args(0).xint_value ("waitpid: OPTIONS must be an integer");
 
   int options = 0;
 
-  if (args.length () == 2)
+  if (nargin == 2)
     options = args(1).xint_value ("waitpid: PID must be an integer value");
 
   std::string msg;
-
-  int status = 0;
-
-  pid_t result = octave_syscalls::waitpid (pid, &status,
-                                           options, msg);
+  int status;
 
-  retval(2) = msg;
-  retval(1) = status;
-  retval(0) = result;
+  pid_t result = octave_syscalls::waitpid (pid, &status, options, msg);
 
-  return retval;
+  return ovl (result, status, msg);
 }
 
 DEFUNX ("WIFEXITED", FWIFEXITED, args, ,
         "-*- texinfo -*-\n\
 @deftypefn {} {} WIFEXITED (@var{status})\n\
 Given @var{status} from a call to @code{waitpid}, return\n\
 true if the child terminated normally.\n\
 @seealso{waitpid, WEXITSTATUS, WIFSIGNALED, WTERMSIG, WCOREDUMP, WIFSTOPPED, WSTOPSIG, WIFCONTINUED}\n\
 @end deftypefn")
 {
-  octave_value retval = false;
-
   if (args.length () != 1)
     print_usage ();
 
   int status = args(0).xint_value ("WIFEXITED: STATUS must be an integer");
 
-  retval = octave_wait::ifexited (status);
-
-  return retval;
+  return octave_value (octave_wait::ifexited (status));
 }
 
 DEFUNX ("WEXITSTATUS", FWEXITSTATUS, args, ,
         "-*- texinfo -*-\n\
 @deftypefn {} {} WEXITSTATUS (@var{status})\n\
 Given @var{status} from a call to @code{waitpid}, return\n\
 the exit status of the child.\n\
 \n\
 This function should only be employed if @code{WIFEXITED} returned true.\n\
 @seealso{waitpid, WIFEXITED, WIFSIGNALED, WTERMSIG, WCOREDUMP, WIFSTOPPED, WSTOPSIG, WIFCONTINUED}\n\
 @end deftypefn")
 {
-  octave_value retval = 0;
+  if (args.length () != 1)
+    print_usage ();
 
-  if (args.length () == 1)
-    {
-      int status = args(0).xint_value ("WEXITSTATUS: STATUS must be an integer");
+  int status = args(0).xint_value ("WEXITSTATUS: STATUS must be an integer");
 
-      retval = octave_wait::exitstatus (status);
-    }
-
-  return retval;
+  return octave_value (octave_wait::exitstatus (status));
 }
 
 DEFUNX ("WIFSIGNALED", FWIFSIGNALED, args, ,
         "-*- texinfo -*-\n\
 @deftypefn {} {} WIFSIGNALED (@var{status})\n\
 Given @var{status} from a call to @code{waitpid}, return\n\
 true if the child process was terminated by a signal.\n\
 @seealso{waitpid, WIFEXITED, WEXITSTATUS, WTERMSIG, WCOREDUMP, WIFSTOPPED, WSTOPSIG, WIFCONTINUED}\n\
 @end deftypefn")
 {
-  octave_value retval = false;
-
   if (args.length () != 1)
     print_usage ();
 
   int status = args(0).xint_value ("WIFSIGNALED: STATUS must be an integer");
 
-  retval = octave_wait::ifsignaled (status);
-
-
-  return retval;
+  return octave_value (octave_wait::ifsignaled (status));
 }
 
 DEFUNX ("WTERMSIG", FWTERMSIG, args, ,
         "-*- texinfo -*-\n\
 @deftypefn {} {} WTERMSIG (@var{status})\n\
 Given @var{status} from a call to @code{waitpid}, return\n\
 the number of the signal that caused the child process to terminate.\n\
 \n\
 This function should only be employed if @code{WIFSIGNALED} returned true.\n\
 @seealso{waitpid, WIFEXITED, WEXITSTATUS, WIFSIGNALED, WCOREDUMP, WIFSTOPPED, WSTOPSIG, WIFCONTINUED}\n\
 @end deftypefn")
 {
-  octave_value retval = 0;
-
   if (args.length () != 1)
     print_usage ();
 
   int status = args(0).xint_value ("WTERMSIG: STATUS must be an integer");
 
-  retval = octave_wait::termsig (status);
-
-
-  return retval;
+  return octave_value (octave_wait::termsig (status));
 }
 
 DEFUNX ("WCOREDUMP", FWCOREDUMP, args, ,
         "-*- texinfo -*-\n\
 @deftypefn {} {} WCOREDUMP (@var{status})\n\
 Given @var{status} from a call to @code{waitpid}, return\n\
 true if the child produced a core dump.\n\
 \n\
 This function should only be employed if @code{WIFSIGNALED} returned true.\n\
 The macro used to implement this function is not specified in POSIX.1-2001\n\
 and is not available on some Unix implementations (e.g., AIX, SunOS).\n\
 @seealso{waitpid, WIFEXITED, WEXITSTATUS, WIFSIGNALED, WTERMSIG, WIFSTOPPED, WSTOPSIG, WIFCONTINUED}\n\
 @end deftypefn")
 {
-  octave_value retval = false;
-
   if (args.length () != 1)
     print_usage ();
 
   int status = args(0).xint_value ("WCOREDUMP: STATUS must be an integer");
 
-  retval = octave_wait::coredump (status);
-
-
-  return retval;
+  return octave_value (octave_wait::coredump (status));
 }
 
 DEFUNX ("WIFSTOPPED", FWIFSTOPPED, args, ,
         "-*- texinfo -*-\n\
 @deftypefn {} {} WIFSTOPPED (@var{status})\n\
 Given @var{status} from a call to @code{waitpid}, return\n\
 true if the child process was stopped by delivery of a signal.\n\
 \n\
 This is only possible if the call was done using @code{WUNTRACED} or when\n\
 the child is being traced (see ptrace(2)).\n\
 @seealso{waitpid, WIFEXITED, WEXITSTATUS, WIFSIGNALED, WTERMSIG, WCOREDUMP, WSTOPSIG, WIFCONTINUED}\n\
 @end deftypefn")
 {
-  octave_value retval = false;
-
   if (args.length () != 1)
     print_usage ();
 
   int status = args(0).xint_value ("WIFSTOPPED: STATUS must be an integer");
 
-  retval = octave_wait::ifstopped (status);
-
-
-  return retval;
+  return octave_value (octave_wait::ifstopped (status));
 }
 
 DEFUNX ("WSTOPSIG", FWSTOPSIG, args, ,
         "-*- texinfo -*-\n\
 @deftypefn {} {} WSTOPSIG (@var{status})\n\
 Given @var{status} from a call to @code{waitpid}, return\n\
 the number of the signal which caused the child to stop.\n\
 \n\
 This function should only be employed if @code{WIFSTOPPED} returned true.\n\
 @seealso{waitpid, WIFEXITED, WEXITSTATUS, WIFSIGNALED, WTERMSIG, WCOREDUMP, WIFSTOPPED, WIFCONTINUED}\n\
 @end deftypefn")
 {
-  octave_value retval = 0;
-
   if (args.length () != 1)
     print_usage ();
 
   int status = args(0).xint_value ("WSTOPSIG: STATUS must be an integer");
 
-  retval = octave_wait::stopsig (status);
-
-
-  return retval;
+  return octave_value (octave_wait::stopsig (status));
 }
 
 DEFUNX ("WIFCONTINUED", FWIFCONTINUED, args, ,
         "-*- texinfo -*-\n\
 @deftypefn {} {} WIFCONTINUED (@var{status})\n\
 Given @var{status} from a call to @code{waitpid}, return\n\
 true if the child process was resumed by delivery of @code{SIGCONT}.\n\
 @seealso{waitpid, WIFEXITED, WEXITSTATUS, WIFSIGNALED, WTERMSIG, WCOREDUMP, WIFSTOPPED, WSTOPSIG}\n\
 @end deftypefn")
 {
-  octave_value retval = false;
-
   if (args.length () != 1)
     print_usage ();
 
   int status = args(0).xint_value ("WIFCONTINUED: STATUS must be an integer");
 
-  retval = octave_wait::ifcontinued (status);
-
-
-  return retval;
+  return octave_value (octave_wait::ifcontinued (status));
 }
 
 DEFUNX ("canonicalize_file_name", Fcanonicalize_file_name, args, ,
         "-*- texinfo -*-\n\
 @deftypefn {} {[@var{cname}, @var{status}, @var{msg}] =} canonicalize_file_name (@var{fname})\n\
 Return the canonical name of file @var{fname}.\n\
 \n\
 If the file does not exist the empty string (\"\") is returned.\n\
 @seealso{make_absolute_filename, is_absolute_filename, is_rooted_relative_filename}\n\
 @end deftypefn")
 {
-  octave_value_list retval;
-
   if (args.length () != 1)
     print_usage ();
 
   std::string name = args(0).xstring_value ("canonicalize_file_name: NAME must be a string");
+
   std::string msg;
 
   std::string result = octave_canonicalize_file_name (name, msg);
 
-  retval(2) = msg;
-  retval(1) = msg.empty () ? 0 : -1;
-  retval(0) = result;
-
-
-  return retval;
+  return ovl (result, msg.empty () ? 0 : -1, msg);
 }
 
-static octave_value
+static inline octave_value
 const_value (const octave_value_list& args, int val)
 {
-  octave_value retval;
-
-  int nargin = args.length ();
-
-  if (nargin != 0)
+  if (args.length () != 0)
     print_usage ();
 
-  retval = val;
-
-  return retval;
+  return octave_value (val);
 }
 
 #if ! defined (O_NONBLOCK) && defined (O_NDELAY)
 #define O_NONBLOCK O_NDELAY
 #endif
 
 DEFUNX ("F_DUPFD", FF_DUPFD, args, ,
         "-*- texinfo -*-\n\
@@ -1552,246 +1317,231 @@ Return the numerical value to pass to @c
 a duplicate file descriptor.\n\
 @seealso{fcntl, F_GETFD, F_GETFL, F_SETFD, F_SETFL}\n\
 @end deftypefn")
 {
 #if defined (F_DUPFD)
   return const_value (args, F_DUPFD);
 #else
   error ("F_DUPFD: not available on this system");
-  return octave_value ();
 #endif
 }
 
 DEFUNX ("F_GETFD", FF_GETFD, args, ,
         "-*- texinfo -*-\n\
 @deftypefn {} {} F_GETFD ()\n\
 Return the numerical value to pass to @code{fcntl} to return\n\
 the file descriptor flags.\n\
 @seealso{fcntl, F_DUPFD, F_GETFL, F_SETFD, F_SETFL}\n\
 @end deftypefn")
 {
 #if defined (F_GETFD)
   return const_value (args, F_GETFD);
 #else
   error ("F_GETFD: not available on this system");
-  return octave_value ();
 #endif
 }
 
 DEFUNX ("F_GETFL", FF_GETFL, args, ,
         "-*- texinfo -*-\n\
 @deftypefn {} {} F_GETFL ()\n\
 Return the numerical value to pass to @code{fcntl} to return\n\
 the file status flags.\n\
 @seealso{fcntl, F_DUPFD, F_GETFD, F_SETFD, F_SETFL}\n\
 @end deftypefn")
 {
 #if defined (F_GETFL)
   return const_value (args, F_GETFL);
 #else
   error ("F_GETFL: not available on this system");
-  return octave_value ();
 #endif
 }
 
 DEFUNX ("F_SETFD", FF_SETFD, args, ,
         "-*- texinfo -*-\n\
 @deftypefn {} {} F_SETFD ()\n\
 Return the numerical value to pass to @code{fcntl} to set the file\n\
 descriptor flags.\n\
 @seealso{fcntl, F_DUPFD, F_GETFD, F_GETFL, F_SETFL}\n\
 @end deftypefn")
 {
 #if defined (F_SETFD)
   return const_value (args, F_SETFD);
 #else
   error ("F_SETFD: not available on this system");
-  return octave_value ();
 #endif
 }
 
 DEFUNX ("F_SETFL", FF_SETFL, args, ,
         "-*- texinfo -*-\n\
 @deftypefn {} {} F_SETFL ()\n\
 Return the numerical value to pass to @code{fcntl} to set the file\n\
 status flags.\n\
 @seealso{fcntl, F_DUPFD, F_GETFD, F_GETFL, F_SETFD}\n\
 @end deftypefn")
 {
 #if defined (F_SETFL)
   return const_value (args, F_SETFL);
 #else
   error ("F_SETFL: not available on this system");
-  return octave_value ();
 #endif
 }
 
 DEFUNX ("O_APPEND", FO_APPEND, args, ,
         "-*- texinfo -*-\n\
 @deftypefn {} {} O_APPEND ()\n\
 Return the numerical value of the file status flag that may be\n\
 returned by @code{fcntl} to indicate each write operation appends,\n\
 or that may be passed to @code{fcntl} to set the write mode to append.\n\
 @seealso{fcntl, O_ASYNC, O_CREAT, O_EXCL, O_NONBLOCK, O_RDONLY, O_RDWR, O_SYNC, O_TRUNC, O_WRONLY}\n\
 @end deftypefn")
 {
 #if defined (O_APPEND)
   return const_value (args, O_APPEND);
 #else
   error ("O_APPEND: not available on this system");
-  return octave_value ();
 #endif
 }
 
 DEFUNX ("O_ASYNC", FO_ASYNC, args, ,
         "-*- texinfo -*-\n\
 @deftypefn {} {} O_ASYNC ()\n\
 Return the numerical value of the file status flag that may be\n\
 returned by @code{fcntl} to indicate asynchronous I/O.\n\
 @seealso{fcntl, O_APPEND, O_CREAT, O_EXCL, O_NONBLOCK, O_RDONLY, O_RDWR, O_SYNC, O_TRUNC, O_WRONLY}\n\
 @end deftypefn")
 {
 #if defined (O_ASYNC)
   return const_value (args, O_ASYNC);
 #else
   error ("O_ASYNC: not available on this system");
-  return octave_value ();
 #endif
 }
 
 DEFUNX ("O_CREAT", FO_CREAT, args, ,
         "-*- texinfo -*-\n\
 @deftypefn {} {} O_CREAT ()\n\
 Return the numerical value of the file status flag that may be\n\
 returned by @code{fcntl} to indicate that a file should be created if it\n\
 does not exist.\n\
 @seealso{fcntl, O_APPEND, O_ASYNC, O_EXCL, O_NONBLOCK, O_RDONLY, O_RDWR, O_SYNC, O_TRUNC, O_WRONLY}\n\
 @end deftypefn")
 {
 #if defined (O_CREAT)
   return const_value (args, O_CREAT);
 #else
   error ("O_CREAT: not available on this system");
-  return octave_value ();
 #endif
 }
 
 DEFUNX ("O_EXCL", FO_EXCL, args, ,
         "-*- texinfo -*-\n\
 @deftypefn {} {} O_EXCL ()\n\
 Return the numerical value of the file status flag that may be\n\
 returned by @code{fcntl} to indicate that file locking is used.\n\
 @seealso{fcntl, O_APPEND, O_ASYNC, O_CREAT, O_NONBLOCK, O_RDONLY, O_RDWR, O_SYNC, O_TRUNC, O_WRONLY}\n\
 @end deftypefn")
 {
 #if defined (O_EXCL)
   return const_value (args, O_EXCL);
 #else
   error ("O_EXCL: not available on this system");
-  return octave_value ();
 #endif
 }
 
 DEFUNX ("O_NONBLOCK", FO_NONBLOCK, args, ,
         "-*- texinfo -*-\n\
 @deftypefn {} {} O_NONBLOCK ()\n\
 Return the numerical value of the file status flag that may be\n\
 returned by @code{fcntl} to indicate that non-blocking I/O is in use,\n\
 or that may be passsed to @code{fcntl} to set non-blocking I/O.\n\
 @seealso{fcntl, O_APPEND, O_ASYNC, O_CREAT, O_EXCL, O_RDONLY, O_RDWR, O_SYNC, O_TRUNC, O_WRONLY}\n\
 @end deftypefn")
 {
 #if defined (O_NONBLOCK)
   return const_value (args, O_NONBLOCK);
 #else
   error ("O_NONBLOCK: not available on this system");
-  return octave_value ();
 #endif
 }
 
 DEFUNX ("O_RDONLY", FO_RDONLY, args, ,
         "-*- texinfo -*-\n\
 @deftypefn {} {} O_RDONLY ()\n\
 Return the numerical value of the file status flag that may be\n\
 returned by @code{fcntl} to indicate that a file is open for reading only.\n\
 @seealso{fcntl, O_APPEND, O_ASYNC, O_CREAT, O_EXCL, O_NONBLOCK, O_RDWR, O_SYNC, O_TRUNC, O_WRONLY}\n\
 @end deftypefn")
 {
 #if defined (O_RDONLY)
   return const_value (args, O_RDONLY);
 #else
   error ("O_RDONLY: not available on this system");
-  return octave_value ();
 #endif
 }
 
 DEFUNX ("O_RDWR", FO_RDWR, args, ,
         "-*- texinfo -*-\n\
 @deftypefn {} {} O_RDWR ()\n\
 Return the numerical value of the file status flag that may be\n\
 returned by @code{fcntl} to indicate that a file is open for both reading\n\
 and writing.\n\
 @seealso{fcntl, O_APPEND, O_ASYNC, O_CREAT, O_EXCL, O_NONBLOCK, O_RDONLY, O_SYNC, O_TRUNC, O_WRONLY}\n\
 @end deftypefn")
 {
 #if defined (O_RDWR)
   return const_value (args, O_RDWR);
 #else
   error ("O_RDWR: not available on this system");
-  return octave_value ();
 #endif
 }
 
 DEFUNX ("O_SYNC", FO_SYNC, args, ,
         "-*- texinfo -*-\n\
 @deftypefn {} {} O_SYNC ()\n\
 Return the numerical value of the file status flag that may be\n\
 returned by @code{fcntl} to indicate that a file is open for synchronous I/O.\n\
 @seealso{fcntl, O_APPEND, O_ASYNC, O_CREAT, O_EXCL, O_NONBLOCK, O_RDONLY, O_RDWR, O_TRUNC, O_WRONLY}\n\
 @end deftypefn")
 {
 #if defined (O_SYNC)
   return const_value (args, O_SYNC);
 #else
   error ("O_SYNC: not available on this system");
-  return octave_value ();
 #endif
 }
 
 DEFUNX ("O_TRUNC", FO_TRUNC, args, ,
         "-*- texinfo -*-\n\
 @deftypefn {} {} O_TRUNC ()\n\
 Return the numerical value of the file status flag that may be\n\
 returned by @code{fcntl} to indicate that if file exists, it should be\n\
 truncated when writing.\n\
 @seealso{fcntl, O_APPEND, O_ASYNC, O_CREAT, O_EXCL, O_NONBLOCK, O_RDONLY, O_RDWR, O_SYNC, O_WRONLY}\n\
 @end deftypefn")
 {
 #if defined (O_TRUNC)
   return const_value (args, O_TRUNC);
 #else
   error ("O_TRUNC: not available on this system");
-  return octave_value ();
 #endif
 }
 
 DEFUNX ("O_WRONLY", FO_WRONLY, args, ,
         "-*- texinfo -*-\n\
 @deftypefn {} {} O_WRONLY ()\n\
 Return the numerical value of the file status flag that may be\n\
 returned by @code{fcntl} to indicate that a file is open for writing only.\n\
 @seealso{fcntl, O_APPEND, O_ASYNC, O_CREAT, O_EXCL, O_NONBLOCK, O_RDONLY, O_RDWR, O_SYNC, O_TRUNC}\n\
 @end deftypefn")
 {
 #if defined (O_WRONLY)
   return const_value (args, O_WRONLY);
 #else
   error ("O_WRONLY: not available on this system");
-  return octave_value ();
 #endif
 }
 
 #if ! defined (WNOHANG)
 #define WNOHANG 0
 #endif
 
 DEFUNX ("WNOHANG", FWNOHANG, args, ,
