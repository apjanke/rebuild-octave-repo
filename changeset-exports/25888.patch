# HG changeset patch
# User Pantxo Diribarne <pantxo.diribarne@gmail.com>
# Date 1537300394 -7200
#      Tue Sep 18 21:53:14 2018 +0200
# Node ID 6109f302cf43905cf9086dcf0a5a06f79851fe0d
# Parent  d3f5d021255d3e717ddf084449565758f5710c0e
Fix regression with "menubar" figure property handling (bug #54678)

* Figure.cc/h (Figure::showMenuBar, Figure::updateMenuBar): Remove methods.
  (Figure::update): Don't call showMenuBar.
  (Figure::updateFigureHeight): New method. Adjust the figure size by a given
  delta h and update the figure's "outerposition" property.
  (Figure::eventNotifyAfter): Call updateFigureHeight when the menubar height
  changed.

* Menu.cc (Menu::Menu): No need to set the QMenu objectName anymore.

* __add_default_menu__.m: Add second optionnal argument to provide existing
  uimenu. Add figure listener to toggle the visibility of builtin menu.

* clf.m: Call __add_default_menu__ with existing menu.

diff --git a/libgui/graphics/Figure.cc b/libgui/graphics/Figure.cc
--- a/libgui/graphics/Figure.cc
+++ b/libgui/graphics/Figure.cc
@@ -139,19 +139,16 @@ namespace QtHandles
         boffset += m_statusBar->sizeHint ().height ();
       }
     else
       {
         m_figureToolBar->hide ();
         m_statusBar->hide ();
       }
 
-    if (! fp.menubar_is ("figure"))
-      m_menuBar->hide ();
-
     m_innerRect = boundingBoxToRect (fp.get_boundingbox (true));
     m_outerRect = boundingBoxToRect (fp.get_boundingbox (false));
 
     win->setGeometry (m_innerRect.adjusted (0, -toffset, 0, boffset));
 
     // Enable mouse tracking unconditionally
     enableMouseTracking ();
 
@@ -467,17 +464,16 @@ namespace QtHandles
         else if (fp.toolbar_is ("figure"))
           showFigureToolBar (true);
         else // "auto"
           showFigureToolBar (! hasUiControlChildren (fp) &&
                              fp.menubar_is ("figure"));
         break;
 
       case figure::properties::ID_MENUBAR:
-        showMenuBar (fp.menubar_is ("figure"));
         if (fp.toolbar_is ("auto"))
           showFigureToolBar (fp.menubar_is ("figure"));
         break;
 
       case figure::properties::ID_KEYPRESSFCN:
         if (fp.get_keypressfcn ().isempty ())
           m_container->canvas (m_handle)->clearEventMask (Canvas::KeyPress);
         else
@@ -540,61 +536,33 @@ namespace QtHandles
         m_statusBar->setVisible (visible);
         m_blockUpdates = false;
 
         updateBoundingBox (false);
       }
   }
 
   void
-  Figure::showMenuBar (bool visible, int h1)
-  {
-    // Get the height before and after toggling the visibility of builtin menus
-    if (h1 < 0)
-      h1 = m_menuBar->sizeHint ().height ();
-
-    // Keep the menubar visible if it contains custom menus
-    bool keep_visible = visible;
-    foreach (QAction *a, m_menuBar->actions ())
-      if (a->objectName () == "builtinMenu")
-        a->setVisible (visible);
-      else if ((a->objectName () == "customMenu") && a->isVisible ())
-        keep_visible = true;
-    
-    visible = keep_visible;
-
-    int h2 = m_menuBar->sizeHint ().height ();
-    
-    if (h1 != h2 || (m_menuBar->isVisible () && ! visible)
-        || (! m_menuBar->isVisible () && visible))
-      {
-        int dy = h2 - h1;
-
-        QRect r = qWidget<QWidget> ()->geometry ();
-
-        r.adjust (0, -dy, 0, 0);
-
-        m_blockUpdates = true;
-        qWidget<QWidget> ()->setGeometry (r);
-        m_menuBar->setVisible (visible);
-        m_blockUpdates = false;
-      }
-
-    updateBoundingBox (false);
-  }
-
-  void
-  Figure::updateMenuBar (int height)
+  Figure::updateFigureHeight (int dh)
   {
     gh_manager::auto_lock lock;
     graphics_object go = object ();
 
-    if (go.valid_object ())
-      showMenuBar (Utils::properties<figure> (go).menubar_is ("figure"),
-                   height);
+    if (go.valid_object () && dh != 0)
+      {
+        QRect r = qWidget<QWidget> ()->geometry ();
+
+        r.adjust (0, dh, 0, 0);
+
+        m_blockUpdates = true;
+        qWidget<QWidget> ()->setGeometry (r);
+        m_blockUpdates = false;
+        
+        updateBoundingBox (false);
+      }
   }
 
   void
   Figure::updateStatusBar (ColumnVector pt)
   {
     if (! m_statusBar->isHidden ())
       m_statusBar->showMessage (QString ("(%1, %2)")
                                 .arg (pt(0), 0, 'g', 5)
@@ -793,19 +761,20 @@ namespace QtHandles
             switch (xevent->type ())
               {
               case QEvent::ActionAdded:
               case QEvent::ActionChanged:
               case QEvent::ActionRemoved:
                 // The menubar may have been resized if no action is visible
                 {
                   QAction *a = dynamic_cast<QActionEvent *> (xevent)->action ();
-                  if (m_menuBar->sizeHint ().height () != m_previousHeight
+                  int currentHeight = m_menuBar->sizeHint ().height ();
+                  if (currentHeight != m_previousHeight
                       && ! a->isSeparator ())
-                    updateMenuBar (m_previousHeight);
+                    updateFigureHeight (m_previousHeight - currentHeight);
                 }
                 break;
 
               default:
                 break;
               }
           }
         else
diff --git a/libgui/graphics/Figure.h b/libgui/graphics/Figure.h
--- a/libgui/graphics/Figure.h
+++ b/libgui/graphics/Figure.h
@@ -99,31 +99,30 @@ namespace QtHandles
     void print (const QString& file_cmd, const QString& term);
     void update (int pId);
     void updateBoundingBox (bool internal = false, int flags = 0);
     void beingDeleted (void);
 
   private:
     void createFigureToolBarAndMenuBar (void);
     void showFigureToolBar (bool visible);
-    void showMenuBar (bool visible, int height = -1);
     void addCustomToolBar (QToolBar *bar, bool visible);
     void showCustomToolBar (QToolBar *bar, bool visible);
 
     void updateFigureToolBarAndMenuBar (void);
 
     static void updateBoundingBoxHelper (void*);
 
     void close_figure_callback (void);
 
     void enableMouseTracking (void);
 
   private slots:
     void setMouseMode (MouseMode mode);
-    void updateMenuBar (int height = -1);
+    void updateFigureHeight (int delta_h);
     void updateContainer (void);
     void toggleAxes (void);
     void toggleGrid (void);
     void autoAxes (void);
     void figureWindowShown ();
     void screenChanged (QScreen*);
 
   public slots:
diff --git a/libgui/graphics/Menu.cc b/libgui/graphics/Menu.cc
--- a/libgui/graphics/Menu.cc
+++ b/libgui/graphics/Menu.cc
@@ -75,22 +75,16 @@ namespace QtHandles
 
   Menu::Menu (const graphics_object& go, QAction *action, Object *xparent)
     : Object (go, action), m_parent (nullptr), m_separator (nullptr)
   {
     uimenu::properties& up = properties<uimenu> ();
 
     action->setText (Utils::fromStdString (up.get_label ()));
 
-    // Tag menus for further triage in Figure.cc
-    if (up.get_tag ().substr (0, 15) == "__default_menu_")
-      action->setObjectName ("builtinMenu");
-    else
-      action->setObjectName ("customMenu");
-
     if (up.is_checked ())
       {
         action->setCheckable (true);
         action->setChecked (up.is_checked ());
       }
 
     action->setEnabled (up.is_enable ());
     action->setShortcut (accelSequence (up));
diff --git a/scripts/plot/util/clf.m b/scripts/plot/util/clf.m
--- a/scripts/plot/util/clf.m
+++ b/scripts/plot/util/clf.m
@@ -72,16 +72,20 @@ function h = clf (varargin)
   if (do_reset)
     ## Delete all the children, including the ones with hidden handles,
     ## except default menus.
     kids = allchild (hfig);
     ismenu = cellfun (@(s) strncmp (s, "__default_menu_", 15), ...
                       get (kids, "tag")); 
     delete (kids(! ismenu));
     reset (hfig);
+
+    ## Recover figure listeners which have been deleted
+    __add_default_menu__ (hfig, kids(ismenu));
+    
     __set_default_mouse_modes__ (hfig);
   else
     ## Select only the chilren with visible handles.
     delete (get (hfig, "children"));
 
     ## Also delete the annotation axes
     hover = findall (hfig, "-depth", 1, "tag", "scribeoverlay");
     delete (hover);
diff --git a/scripts/plot/util/private/__add_default_menu__.m b/scripts/plot/util/private/__add_default_menu__.m
--- a/scripts/plot/util/private/__add_default_menu__.m
+++ b/scripts/plot/util/private/__add_default_menu__.m
@@ -12,54 +12,57 @@
 ## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 ## GNU General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <https://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
-## @deftypefn {} {} __add_default_menu__ (@var{fig})
-## Add default menu to figure.
+## @deftypefn {} {} __add_default_menu__ (@var{hfig})
+## @deftypefnx {} {} __add_default_menu__ (@var{hfig}, @var{hmenu})
+## Add default menu and listeners to figure.
+##  
 ##
 ## All uimenu handles have their @qcode{"HandleVisibility"} property set to
 ## @qcode{"off"}.
 ## @end deftypefn
 
 ## Author: Kai Habel
 
-function __add_default_menu__ (hf)
+function __add_default_menu__ (hf, hmenu = [])
 
-  obj = findall (hf, "-depth", 1, "tag", "__default_menu__File", ...
-                 "label", "&File");
-  if (isempty (obj))
+  ## Create 
+  if (isempty (hmenu))
     ## File menu
     hui = uimenu (hf, "label", "&File", "handlevisibility", "off", ...
                   "tag", "__default_menu__File");
     uimenu (hui, "label", "&Open", "callback", @open_cb, ...
             "accelerator", "o");
     uimenu (hui, "label", "&Save", "callback", @save_cb, ...
             "accelerator", "s");
     uimenu (hui, "label", "Save &As", "callback", @save_cb, ...
             "accelerator", "S");
     uimenu (hui, "label", "&Close", "callback", @close_cb, ...
-           "accelerator", "w", "separator", "on");
+            "accelerator", "w", "separator", "on");
+    hmenu(1) = hui; 
     
     ## Edit menu
     hui = uimenu (hf, "label", "&Edit", "handlevisibility", "off", ...
                   "tag", "__default_menu__Edit");
     uimenu (hui, "label", "&New Figure", "callback", "figure ();", ...
             "accelerator", "n");
     uimenu (hui, "label", "&Duplicate Figure",
             "callback", "copyobj (gcbf (), groot ());", ...
             "accelerator", "d");
     uimenu (hui, "label", "Clea&r Figure",
             "callback", "clf (gcbf ());");
     uimenu (hui, "label", "Reset Figure",
             "callback", "reset (gcbf ());");
+    hmenu(2) = hui; 
     
     ## Tools menu
     hui = uimenu (hf, "label", "&Tools", "handlevisibility", "off", ...
                   "tag", "__default_menu__Tools");
     uimenu (hui, "label", "Toggle &grid on all axes", "tag", "toggle", ...
             "callback", @grid_cb);
     uimenu (hui, "label", "Show grid on all axes", "tag", "on", ...
             "callback", @grid_cb);
@@ -77,20 +80,32 @@ function __add_default_menu__ (hf)
     uimenu (hui2, "label", "Disable pan and rotate", "tag", ...
             "no_pan_rotate", "callback", @guimode_cb);
     uimenu (hui2, "label", "Rotate on", "tag", "rotate3d", ...
             "callback", @guimode_cb);
     uimenu (hui2, "label", "Enable mousezoom", "tag", "zoom_on", ...
             "callback", @guimode_cb);
     uimenu (hui2, "label", "Disable mousezoom", "tag", "zoom_off", ...
             "callback", @guimode_cb);
+    hmenu(3) = hui; 
   endif
 
+  ## Figure listeners
+  toggle_visibility_cb (hf, [], hmenu);
+  addlistener (hf, "menubar", {@toggle_visibility_cb, hmenu});
+
 endfunction
 
+function toggle_visibility_cb (hf, ~, hmenu)
+  if (strcmp (get (hf, "menubar"), "none"))
+    set (hmenu, "visible", "off")
+  else
+    set (hmenu, "visible", "on")
+  endif
+endfunction
 
 function open_cb (h, e)
   [filename, filedir] = uigetfile ({"*.ofig", "Octave Figure File"}, ...
                                    "Open Figure");
   if (filename != 0)
     fname = fullfile (filedir, filename);
     tmphf = hgload (fname);
     set (tmphf, "filename", fname);
