# HG changeset patch
# User Rik <rik@octave.org>
# Date 1500769973 25200
#      Sat Jul 22 17:32:53 2017 -0700
# Node ID 203d3676730f3044a48c29ad9cb97323b49424b4
# Parent  d891b6a16a4d844a56177873b17fd6b0e5e8318c
Fix overflow in signed type detected by -fsanitize=undefined (bug #51530).

* oct-inttypes.cc (octave_int_arith_base<int64_t, true>): Use static_cast to
unsigned type, rather than negating a signed value which can overflow in 2's
complement arithmetic.  Re-align comments and eliminate unnecessary braces
in if statement.

* oct-inttypes.cc (octave_int_arith_base<uint64_t, false>): Change comments to
be more accurate.

diff --git a/liboctave/util/oct-inttypes.cc b/liboctave/util/oct-inttypes.cc
--- a/liboctave/util/oct-inttypes.cc
+++ b/liboctave/util/oct-inttypes.cc
@@ -304,17 +304,17 @@ octave_int_cmp_op::emulate_mop (double x
 template <typename xop>
 bool
 octave_int_cmp_op::emulate_mop (double x, int64_t y)
 {
   typedef typename rev_op<xop>::op rop;
   return mop<rop> (y, x);
 }
 
-// Define handlers for int64 multiplication
+// Define handlers for (u)int64 multiplication.
 
 template <>
 uint64_t
 octave_int_arith_base<uint64_t, false>::mul_internal (uint64_t x, uint64_t y)
 {
   // Get upper words
   uint64_t ux = x >> 32;
   uint64_t uy = y >> 32;
@@ -324,29 +324,29 @@ octave_int_arith_base<uint64_t, false>::
       if (uy)
         goto overflow;
       else
         {
           uint64_t ly = static_cast<uint32_t> (y);
           uint64_t uxly = ux*ly;
           if (uxly >> 32)
             goto overflow;
-          uxly <<= 32; // never overflows
+          uxly <<= 32;  // never overflows
           uint64_t lx = static_cast<uint32_t> (x);
           uint64_t lxly = lx*ly;
           res = add (uxly, lxly);
         }
     }
   else if (uy)
     {
       uint64_t lx = static_cast<uint32_t> (x);
       uint64_t uylx = uy*lx;
       if (uylx >> 32)
         goto overflow;
-      uylx <<= 32; // never overflows
+      uylx <<= 32;  // never overflows
       uint64_t ly = static_cast<uint32_t> (y);
       uint64_t lylx = ly*lx;
       res = add (uylx, lylx);
     }
   else
     {
       uint64_t lx = static_cast<uint32_t> (x);
       uint64_t ly = static_cast<uint32_t> (y);
@@ -358,19 +358,18 @@ octave_int_arith_base<uint64_t, false>::
 overflow:
   return max_val ();
 }
 
 template <>
 int64_t
 octave_int_arith_base<int64_t, true>::mul_internal (int64_t x, int64_t y)
 {
-  // The signed case is far worse.  The problem is that
-  // even if neither integer fits into signed 32-bit range, the result may
-  // still be OK.  Uh oh.
+  // The signed case is far worse.  The problem is that even if neither integer
+  // fits into signed 32-bit range, the result may still be OK.  Uh oh.
 
   // Essentially, what we do is compute sign, multiply absolute values
   // (as above) and impose the sign.
   // FIXME: can we do something faster if we OCTAVE_HAVE_FAST_INT_OPS?
 
   uint64_t usx = octave_int_abs (x);
   uint64_t usy = octave_int_abs (y);
   bool positive = (x < 0) == (y < 0);
@@ -384,59 +383,55 @@ octave_int_arith_base<int64_t, true>::mu
       if (uy)
         goto overflow;
       else
         {
           uint64_t ly = static_cast<uint32_t> (usy);
           uint64_t uxly = ux*ly;
           if (uxly >> 32)
             goto overflow;
-          uxly <<= 32; // never overflows
+          uxly <<= 32;  // never overflows
           uint64_t lx = static_cast<uint32_t> (usx);
           uint64_t lxly = lx*ly;
           res = uxly + lxly;
           if (res < uxly)
             goto overflow;
         }
     }
   else if (uy)
     {
       uint64_t lx = static_cast<uint32_t> (usx);
       uint64_t uylx = uy*lx;
       if (uylx >> 32)
         goto overflow;
-      uylx <<= 32; // never overflows
+      uylx <<= 32;  // never overflows
       uint64_t ly = static_cast<uint32_t> (usy);
       uint64_t lylx = ly*lx;
       res = uylx + lylx;
       if (res < uylx)
         goto overflow;
     }
   else
     {
       uint64_t lx = static_cast<uint32_t> (usx);
       uint64_t ly = static_cast<uint32_t> (usy);
       res = lx*ly;
     }
 
   if (positive)
     {
       if (res > static_cast<uint64_t> (max_val ()))
-        {
-          return max_val ();
-        }
+        return max_val ();
       else
         return static_cast<int64_t> (res);
     }
   else
     {
-      if (res > static_cast<uint64_t> (-min_val ()))
-        {
-          return min_val ();
-        }
+      if (res > static_cast<uint64_t> (min_val ()))
+        return min_val ();
       else
         return -static_cast<int64_t> (res);
     }
 
 overflow:
   return positive ? max_val () : min_val ();
 
 }
