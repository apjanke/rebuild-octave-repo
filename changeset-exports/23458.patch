# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1493412017 14400
#      Fri Apr 28 16:40:17 2017 -0400
# Node ID 0f4ed33886dec73fbe46b3e455c5a033f166817c
# Parent  21baad6b35c4b4ea4dee7ebde6b89640c1b056f5
maint: Strip trailing whitespace from source files.

diff --git a/libinterp/parse-tree/pt-assign.h b/libinterp/parse-tree/pt-assign.h
--- a/libinterp/parse-tree/pt-assign.h
+++ b/libinterp/parse-tree/pt-assign.h
@@ -78,17 +78,17 @@ namespace octave
 
     tree_expression * dup (symbol_table::scope_id scope,
                            symbol_table::context_id context) const;
 
     void accept (tree_walker& tw)
     {
       tw.visit_simple_assignment (*this);
     }
-    
+
     octave_value::assign_op op_type (void) const { return etype; }
 
   private:
 
     void do_assign (octave_lvalue& ult, const octave_value_list& args,
                     const octave_value& rhs_val);
 
     void do_assign (octave_lvalue& ult, const octave_value& rhs_val);
diff --git a/libinterp/parse-tree/pt-eval.cc b/libinterp/parse-tree/pt-eval.cc
--- a/libinterp/parse-tree/pt-eval.cc
+++ b/libinterp/parse-tree/pt-eval.cc
@@ -295,17 +295,17 @@ namespace octave
         tree_expression *op_rhs = expr.rhs ();
 
         if (a.is_defined () && op_rhs)
           {
             octave_value b = evaluate (op_rhs);
 
             if (b.is_defined ())
               {
-                octave_value::binary_op etype = expr.op_type ();                
+                octave_value::binary_op etype = expr.op_type ();
 
                 val = ::do_binary_op (etype, a, b);
               }
           }
       }
 
     m_value_stack.push (ovl (val));
   }
@@ -1125,17 +1125,17 @@ final_index_error (octave::index_excepti
 namespace octave
 {
   void
   tree_evaluator::visit_index_expression (tree_index_expression& idx_expr)
   {
     octave_value_list retval;
 
     int nargout = m_nargout_stack.top ();
-    
+
     octave_value first_expr_val;
 
     octave_value_list first_args;
 
     bool have_args = false;
 
     tree_expression *expr = idx_expr.expression ();
     std::list<tree_argument_list *> args = idx_expr.arg_lists ();
@@ -1309,17 +1309,17 @@ namespace octave
                       ? val.do_multi_index_op (nargout, empty_args,
                                                lvalue_list)
                       : val.do_multi_index_op (nargout, empty_args));
           }
       }
 
     m_value_stack.push (retval);
   }
-  
+
   void
   tree_evaluator::visit_matrix (tree_matrix& expr)
   {
     octave_value retval = Matrix ();
 
     bool all_strings_p = false;
     bool all_sq_strings_p = false;
     bool all_dq_strings_p = false;
diff --git a/libinterp/parse-tree/pt-eval.h b/libinterp/parse-tree/pt-eval.h
--- a/libinterp/parse-tree/pt-eval.h
+++ b/libinterp/parse-tree/pt-eval.h
@@ -74,17 +74,17 @@ namespace octave
         return m_stack.top ();
       }
 
       void clear (void)
       {
         while (! m_stack.empty ())
           m_stack.pop ();
       }
-      
+
     private:
 
       std::stack<T> m_stack;
     };
 
     typedef void (*decl_elt_init_fcn) (tree_decl_elt&);
 
     tree_evaluator (interpreter *interp_context)
