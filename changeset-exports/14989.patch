# HG changeset patch
# User Max Brister <max@2bass.com>
# Date 1342046062 18000
#      Wed Jul 11 17:34:22 2012 -0500
# Node ID dfaa8da46364508b207d614e3ddae07d4a815ed3
# Parent  822d52bee9731b1162b6dd806837f9c9fbf1ac86
Support while loops in JIT

* src/pt-jit.cc (jit_block::update_idom): Change call to idom_intersect.
  (jit_block::idom_intersect): Take first block explicity and check for null
    blocks.
  (jit_convert::visit_simple_for_command): Clear continues.
  (jit_convert::visit_while_command): Implement.
* src/pt-jit.h (jit_block::idom_intersect): Change declaration.

diff --git a/src/pt-jit.cc b/src/pt-jit.cc
--- a/src/pt-jit.cc
+++ b/src/pt-jit.cc
@@ -2037,17 +2037,17 @@ jit_block::update_idom (size_t avisit_co
   jit_block *new_idom = use->user_parent ();
   use = use->next ();
 
   for (; use; use = use->next ())
     {
       jit_block *pred = use->user_parent ();
       jit_block *pidom = pred->idom;
       if (pidom)
-        new_idom = pidom->idom_intersect (new_idom);
+        new_idom = idom_intersect (pidom, new_idom);
     }
 
   if (idom != new_idom)
     {
       idom = new_idom;
       return true;
     }
 
@@ -2104,31 +2104,28 @@ jit_block::create_dom_tree (size_t avisi
   if (idom != this)
     idom->dom_succ.push_back (this);
 
   for (size_t i = 0; i < successor_count (); ++i)
     successor (i)->create_dom_tree (avisit_count);
 }
 
 jit_block *
-jit_block::idom_intersect (jit_block *b)
+jit_block::idom_intersect (jit_block *i, jit_block *j)
 {
-  jit_block *i = this;
-  jit_block *j = b;
-
-  while (i != j)
+  while (i && j && i != j)
     {
-      while (i->id () > j->id ())
+      while (i && i->id () > j->id ())
         i = i->idom;
 
-      while (j->id () > i->id ())
+      while (i && j && j->id () > i->id ())
         j = j->idom;
     }
 
-  return i;
+  return i ? i : j;
 }
 
 // -------------------- jit_phi_incomming --------------------
 
 jit_block *
 jit_phi_incomming::user_parent (void) const
 { return muser->parent (); }
 
@@ -2504,16 +2501,17 @@ jit_convert::visit_simple_for_command (t
 
   // If we are a nested for loop we need to store the previous breaks
   assert (! breaking);
   unwind_protect prot;
   prot.protect_var (breaks);
   prot.protect_var (continues);
   prot.protect_var (breaking);
   breaks.clear ();
+  continues.clear ();
 
   // we need a variable for our iterator, because it is used in multiple blocks
   std::stringstream ss;
   ss << "#iter" << iterator_count++;
   std::string iter_name = ss.str ();
   jit_variable *iterator = create<jit_variable> (iter_name);
   vmap[iter_name] = iterator;
 
@@ -2897,19 +2895,55 @@ jit_convert::visit_try_catch_command (tr
 
 void
 jit_convert::visit_unwind_protect_command (tree_unwind_protect_command&)
 {
   fail ();
 }
 
 void
-jit_convert::visit_while_command (tree_while_command&)
+jit_convert::visit_while_command (tree_while_command& wc)
 {
-  fail ();
+  assert (! breaking);
+  unwind_protect prot;
+  prot.protect_var (breaks);
+  prot.protect_var (continues);
+  prot.protect_var (breaking);
+  breaks.clear ();
+  continues.clear ();
+
+  jit_block *cond_check = create<jit_block> ("while_cond_check");
+  block->append (create<jit_branch> (cond_check));
+  append (cond_check);
+  block = cond_check;
+
+  tree_expression *expr = wc.condition ();
+  assert (expr && "While expression can not be null");
+  jit_value *check = visit (expr);
+  check = create_checked (&jit_typeinfo::logically_true, check);
+
+  jit_block *body = create<jit_block> ("while_body");
+  append (body);
+
+  jit_block *tail = create<jit_block> ("while_tail");
+  block->append (create<jit_cond_branch> (check, body, tail));
+  block = body;
+
+  tree_statement_list *loop_body = wc.body ();
+  if (loop_body)
+    loop_body->accept (*this);
+
+  finish_breaks (tail, breaks);
+  finish_breaks (cond_check, continues);
+
+  if (! breaking)
+    block->append (create<jit_branch> (cond_check));
+
+  append (tail);
+  block = tail;
 }
 
 void
 jit_convert::visit_do_until_command (tree_do_until_command&)
 {
   fail ();
 }
 
diff --git a/src/pt-jit.h b/src/pt-jit.h
--- a/src/pt-jit.h
+++ b/src/pt-jit.h
@@ -1368,17 +1368,17 @@ private:
   void internal_append (jit_instruction *instr);
 
   void compute_df (size_t avisit_count);
 
   bool update_idom (size_t avisit_count);
 
   void create_dom_tree (size_t avisit_count);
 
-  jit_block *idom_intersect (jit_block *b);
+  static jit_block *idom_intersect (jit_block *i, jit_block *j);
 
   size_t mvisit_count;
   size_t mid;
   jit_block *idom;
   df_set mdf;
   std::vector<jit_block *> dom_succ;
   std::string mname;
   instruction_list instructions;
