# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1261948037 -3600
#      Sun Dec 27 22:07:17 2009 +0100
# Node ID 439c7a9d0fcaa786f08cb44b4622ca4626d43a58
# Parent  f349847c45414dc36f13b8496954f6293d351ba8
optimize common_size

diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,8 +1,12 @@
+2009-12-27  Jaroslav Hajek  <highegg@gmail.com>
+
+	* general/common_size.m: Optimize.
+
 2009-12-27  Jaroslav Hajek  <highegg@gmail.com>
 
 	* strings/strcat.m: Vectorize.
 
 2009-12-26  Jaroslav Hajek  <highegg@gmail.com>
 
 	* miscellaneous/xor.m: Optimize.
 
diff --git a/scripts/general/common_size.m b/scripts/general/common_size.m
--- a/scripts/general/common_size.m
+++ b/scripts/general/common_size.m
@@ -1,11 +1,12 @@
 ## Copyright (C) 1995, 1996, 1999, 2000, 2002, 2004, 2005, 2007
 ##               Kurt Hornik
 ## Copyright (C) 2009 VZLU Prague
+## Copyright (C) 2009 Jaroslav Hajek
 ##
 ## This file is part of Octave.
 ##
 ## Octave is free software; you can redistribute it and/or modify it
 ## under the terms of the GNU General Public License as published by
 ## the Free Software Foundation; either version 3 of the License, or (at
 ## your option) any later version.
 ##
@@ -64,14 +65,21 @@ function [errorcode, varargout] = common
     if (any (nscal &! match))
       errorcode = 1;
       varargout = varargin;
     else
       errorcode = 0;
       if (nargout > 1)
         scal = !nscal;
         varargout = varargin;
-        varargout(scal) = cellfun (@repmat, varargin(scal), {size(varargin{i})}, ...
-                                   "UniformOutput", false);
+        if (any (nscal))
+          ## This could also be achieved by cellfun (@repmat, ...), but repmat is an
+          ## m-function and hence still carries interpreter overhead. Further,
+          ## cellfun is slightly optimized for the case used below.
+          uo = "uniformoutput";
+          dims = size (varargin{find (nscal, 1)});
+          subs = substruct ("()", arrayfun (@ones, 1, dims, uo, false));
+          varargout(scal) = cellfun (@subsref, varargin(scal), {subs}, uo, false);
+        endif
       endif
     endif
   endif
 endfunction
