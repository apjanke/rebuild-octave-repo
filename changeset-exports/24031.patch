# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1504908950 14400
#      Fri Sep 08 18:15:50 2017 -0400
# Node ID ef85638c605a056cc6c265fc1081b24feec10e25
# Parent  ec3d37eeafa25ddbfc1d7d099d25b9833d38b5b2
also cache parent_function in symbol_table scope

Inside a symbol table scope, we currently store a pointer to the
parent scope (if it exists), but this is not sufficient to prevent the
parent scope from being deleted.  For example, this can happen when a
function that contains an anonymous function definition is deleted.
If the anonymous function remains accessible, then resolving any
symbols that it references may fail when it is called.  Caching the
parent function avoids this problem as it increments the reference
count for the function, and that will prevent the scope object from
being deleted.

* symtab.cc (symbol_table::scope::set_parent): Also cache parent
function if it exists.

* symtab.h (symbol_table::scope::m_parent): New data member.
(symbol_table::scope::parent_fcn): New function.
(symbol_table::scope::dup): Also copy m_parent_fcn.

diff --git a/libinterp/corefcn/symtab.cc b/libinterp/corefcn/symtab.cc
--- a/libinterp/corefcn/symtab.cc
+++ b/libinterp/corefcn/symtab.cc
@@ -1798,16 +1798,33 @@ namespace octave
         octave_function *fcn = nm_sf.second.function_value ();
 
         if (fcn)
           fcn->mark_as_private_function (class_name);
       }
   }
 
   void
+  symbol_table::scope::set_parent (scope *p)
+  {
+    m_parent = p;
+
+    if (m_parent)
+      {
+        // If m_parent is the top-level scope, there will be no parent
+        // function.
+
+        octave_function *ov_fcn = m_parent->function ();
+
+        if (ov_fcn)
+          m_parent_fcn = octave_value (ov_fcn, true);
+      }
+  }
+
+  void
   symbol_table::scope::update_nest (void)
   {
     if (m_parent)
       {
         // fix bad symbol_records
         for (auto& nm_sr : m_symbols)
           {
             symbol_record& ours = nm_sr.second;
diff --git a/libinterp/corefcn/symtab.h b/libinterp/corefcn/symtab.h
--- a/libinterp/corefcn/symtab.h
+++ b/libinterp/corefcn/symtab.h
@@ -1562,17 +1562,17 @@ namespace octave
       m_persistent_symbols_iterator;
 
       typedef std::map<std::string, octave_value>::const_iterator
       subfunctions_const_iterator;
       typedef std::map<std::string, octave_value>::iterator subfunctions_iterator;
 
       scope (const std::string& name = "")
         : m_name (name), m_symbols (), m_persistent_symbols (), m_subfunctions (),
-          m_fcn (nullptr), m_parent (nullptr), m_children (), m_is_nested (false),
+          m_fcn (nullptr), m_parent (nullptr), m_parent_fcn (), m_children (), m_is_nested (false),
           m_is_static (false), m_context (0)
       { }
 
       // No copying!
 
       scope (const scope&) = delete;
 
       scope& operator = (const scope&) = delete;
@@ -1588,25 +1588,27 @@ namespace octave
 
       void mark_nested (void) { m_is_nested = true; }
 
       bool is_static (void) const { return m_is_static; }
 
       void mark_static (void) { m_is_static = true; }
 
       scope * parent_scope (void) const { return m_parent; }
+      octave_value parent_fcn (void) const { return m_parent_fcn; }
 
       scope * dup (void) const
       {
         scope *new_sid = new scope ();
 
         for (const auto& nm_sr : m_symbols)
           new_sid->insert_symbol_record (nm_sr.second.dup (new_sid));
 
         new_sid->m_parent = m_parent;
+        new_sid->m_parent_fcn = m_parent_fcn;
 
         return new_sid;
       }
 
       void set_context (context_id context) { m_context = context; }
 
       context_id current_context (void) const { return m_context; }
 
@@ -2029,17 +2031,17 @@ namespace octave
       std::string name (void) const { return m_name; }
 
       void cache_name (const std::string& name) { m_name = name; }
 
       octave_user_function *function (void) { return m_fcn; }
 
       void set_function (octave_user_function *fcn) { m_fcn = fcn; }
 
-      void set_parent (scope *p) { m_parent = p; }
+      void set_parent (scope *p);
 
       void update_nest (void);
 
       bool look_nonlocal (const std::string& name,
                           symbol_table::symbol_record& result);
 
     private:
 
@@ -2056,16 +2058,17 @@ namespace octave
       // Map from symbol names to subfunctions.
       std::map<std::string, octave_value> m_subfunctions;
 
       // The associated user code (may be null).
       octave_user_function *m_fcn;
 
       // Parent of nested function (may be null).
       scope *m_parent;
+      octave_value m_parent_fcn;
 
       // Child nested functions.
       std::vector<scope*> m_children;
 
       // If true, then this scope belongs to a nested function.
       bool m_is_nested;
 
       // If true then no variables can be added.
