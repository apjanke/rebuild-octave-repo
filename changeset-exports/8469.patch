# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1231788398 18000
#      Mon Jan 12 14:26:38 2009 -0500
# Node ID 830a03b5f1654fd29fe41cd5886e06378e8e43fe
# Parent  866492035ecf79b2435d1ca8d5ff98e13bce77d6
qr.cc: require args to be numeric, not necessarily matrix objects

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,13 @@
+2009-01-12  John W. Eaton  <jwe@octave.org>
+
+	* DLD-FUNCTIONS/qr.cc (Fqrupdate, Fqrinsert, Fqrdelete, Fqrshift):
+	Require args to be numeric, not necessarily matrix objects.
+
 2009-01-12  Ben Abbott  <bpabbott@mac.com>
 
 	* graphics.h.in (text::properties::fontunits): Fix typo in list of
 	possible values.
 
 2009-01-12  John W. Eaton  <jwe@octave.org>
 
 	* strfns.cc (Fstrvcat, Fchar): Use queue to avoid duplicate calls
diff --git a/src/DLD-FUNCTIONS/qr.cc b/src/DLD-FUNCTIONS/qr.cc
--- a/src/DLD-FUNCTIONS/qr.cc
+++ b/src/DLD-FUNCTIONS/qr.cc
@@ -764,18 +764,18 @@ Q*Q'*u*v' instead of u*v'.\n\
       return retval;
     }
 
   octave_value argq = args(0);
   octave_value argr = args(1);
   octave_value argu = args(2);
   octave_value argv = args(3);
 
-  if (argq.is_matrix_type () && argr.is_matrix_type () 
-      && argu.is_matrix_type () && argv.is_matrix_type ())
+  if (argq.is_numeric_type () && argr.is_numeric_type () 
+      && argu.is_numeric_type () && argv.is_numeric_type ())
     {
       octave_idx_type m = argq.rows ();
       octave_idx_type n = argr.columns ();
       octave_idx_type k = argq.columns ();
 
       if (argr.rows () == k
           && argu.rows () == m && argu.columns () == 1
           && argv.rows () == n && argv.columns () == 1)
@@ -849,17 +849,17 @@ Q*Q'*u*v' instead of u*v'.\n\
 		  retval(0) = fact.Q ();
 		}
             }
         }
       else
 	error ("qrupdate: dimensions mismatch");
     }
   else
-    print_usage ();
+    error ("qrupdate: expecting numeric arguments");
 
   return retval;
 }
 /*
 %!shared A, u, v, Ac, uc, vc
 %! A = [0.091364  0.613038  0.999083;
 %!      0.594638  0.425302  0.603537;
 %!      0.383594  0.291238  0.085574;
@@ -953,18 +953,18 @@ If @var{orient} is @code{\"row\"}, @var{
       return retval;
     }
   
   octave_value argq = args(0);
   octave_value argr = args(1);
   octave_value argj = args(2);
   octave_value argx = args(3);
       
-  if (argq.is_matrix_type () && argr.is_matrix_type ()
-      && argj.is_scalar_type () && argx.is_matrix_type ()
+  if (argq.is_numeric_type () && argr.is_numeric_type ()
+      && argj.is_scalar_type () && argx.is_numeric_type ()
       && (nargin < 5 || args(4).is_string ()))
     {
       octave_idx_type m = argq.rows ();
       octave_idx_type n = argr.columns ();
       octave_idx_type k = argq.columns ();
 
       std::string orient = (nargin < 5) ? "col" : args(4).string_value ();
 
@@ -1173,17 +1173,18 @@ If @var{orient} is \"row\", @var{Q} must
       print_usage ();
       return retval;
     }
 
   octave_value argq = args(0);
   octave_value argr = args(1);
   octave_value argj = args(2);
 
-  if (argq.is_matrix_type () && argr.is_matrix_type () && argj.is_scalar_type ()
+  if (argq.is_numeric_type () && argr.is_numeric_type ()
+      && argj.is_scalar_type ()
       && (nargin < 4 || args(3).is_string ()))
     {
       octave_idx_type m = argq.rows ();
       octave_idx_type k = argq.columns ();
       octave_idx_type n = argr.columns ();
 
       std::string orient = (nargin < 4) ? "col" : args(3).string_value ();
 
@@ -1433,17 +1434,17 @@ of @w{@var{A}(:,p)}, where @w{p} is the 
       return retval;
     }
 
   octave_value argq = args(0);
   octave_value argr = args(1);
   octave_value argi = args(2);
   octave_value argj = args(3);
 
-  if (argq.is_matrix_type () && argr.is_matrix_type () 
+  if (argq.is_numeric_type () && argr.is_numeric_type () 
       && argi.is_real_scalar () && argj.is_real_scalar ())
     {
       octave_idx_type n = argr.columns ();
       octave_idx_type k = argq.columns ();
 
       if (argr.rows () == k)
         {
           octave_idx_type i = argi.scalar_value ();
@@ -1508,17 +1509,17 @@ of @w{@var{A}(:,p)}, where @w{p} is the 
             }
           else
             error ("qrshift: index out of range");
         }
       else
 	error ("qrshift: dimensions mismatch");
     }
   else
-    print_usage ();
+    error ("qrshift: expecting numeric arguments");
 
   return retval;
 }
 /*
 %!test
 %! AA = A.';
 %! i = 2; j = 4; p = [1:i-1, shift(i:j,-1), j+1:5];
 %!
