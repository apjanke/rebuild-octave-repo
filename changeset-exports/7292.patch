# HG changeset patch
# User jwe
# Date 1197396906 0
#      Tue Dec 11 18:15:06 2007 +0000
# Node ID 5e90111a28b35cc36564a49a609664e14409fffe
# Parent  de593fd63ecfbcc13d2bf6ddaec320a639f68b8e
[project @ 2007-12-11 18:13:34 by jwe]

diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,13 +1,21 @@
 2007-12-11  John W. Eaton  <jwe@octave.org>
 
 	* plot/__plt2vs__.m, plot/__plt2sv__.m: New functions.
 	* plot/__plt2__.m: Handle scalar-vector and vector-scalar cases.
 
+2007-12-11  Kai Habel  <kai.habel@gmx.de>
+
+	* plot/slice.m: Remove unused variable, set xgrid, ygrid, and
+	zgrid to "on" and box to "off" for used axes.
+
+	* plot/__go_draw_axes__.m, plot/plot3.m, plot/ribbon.m,
+	plot/slice.m: Use size_equal(var1,var2,...) when possible.
+
 2007-12-11  David Bateman  <dbateman@free.fr>
 
 	* miscelleaneous/fullfile.m: Ignore empty arguments.
 
 	* sparse/spstats.m: Drop argument to Fsparse to force mutation.
 	* statistics/base/mode.m: Ditto.
 
 	* plot/__plt_get_axis_arg__.m: Ignore integer valued handles as
diff --git a/scripts/plot/__go_draw_axes__.m b/scripts/plot/__go_draw_axes__.m
--- a/scripts/plot/__go_draw_axes__.m
+++ b/scripts/plot/__go_draw_axes__.m
@@ -839,17 +839,17 @@ function __go_draw_axes__ (h, plot_strea
 	    if (isvector (xdat) && isvector (ydat) && ismatrix (zdat))
 	      if (rows (zdat) == length (ydat)
 		  && columns (zdat) == length (xdat))
                 [xdat, ydat] = meshgrid (xdat, ydat);
 	      else
                 err = true;
 	      endif
 	    elseif (ismatrix (xdat) && ismatrix (ydat) && ismatrix (zdat))
-	      if (! (size_equal (xdat, ydat) && size_equal (xdat, zdat)))
+	      if (! size_equal (xdat, ydat, zdat))
                 err = true;
 	      endif
 	    else
 	      err = true;
 	    endif
 	    if (err)
 	      error ("__go_draw_axes__: invalid grid data");
 	    endif
diff --git a/scripts/plot/plot3.m b/scripts/plot/plot3.m
--- a/scripts/plot/plot3.m
+++ b/scripts/plot/plot3.m
@@ -162,17 +162,17 @@ function retval = plot3 (varargin)
 	  z = z(:);
 	elseif (length (x) == rows (z) && length (y) == columns (z))
 	  error ("plot3: [length(x), length(y)] must match size(z)");
 	else
 	  [x, y] = meshgrid (x, y);
 	endif
       endif
 
-      if (! size_equal (x, y) || ! size_equal (x, z))
+      if (! size_equal (x, y, z))
 	error ("plot3: x, y, and z must have the same shape");
       endif
 
       key = options.key;
       if (! isempty (key))
 	set (gca (), "key", "on");
       endif
       color = options.color;
@@ -206,17 +206,17 @@ function retval = plot3 (varargin)
 	  z = z(:);
 	elseif (length (x) == rows (z) && length (y) == columns (z))
 	  error ("plot3: [length(x), length(y)] must match size(z)");
 	else
 	  [x, y] = meshgrid (x, y);
 	endif
       endif
 
-      if (! size_equal (x, y) || ! size_equal (x, z))
+      if (! size_equal (x, y, z))
 	error ("plot3: x, y, and z must have the same shape");
       endif
 
       options =  __default_plot_options__ ();
       key = options.key;
       if (! isempty (key))
 	set (gca (), "key", "on");
       endif
@@ -270,17 +270,17 @@ function retval = plot3 (varargin)
 	z = z(:);
       elseif (length (x) == rows (z) && length (y) == columns (z))
 	error ("plot3: [length(x), length(y)] must match size(z)");
       else
 	[x, y] = meshgrid (x, y);
       endif
     endif
 
-    if (! size_equal (x, y) || ! size_equal (x, z))
+    if (! size_equal (x, y, z))
       error ("plot3: x, y, and z must have the same shape");
     endif
 
     options =  __default_plot_options__ ();
     key = options.key;
     if (! isempty (key))
       set (gca (), "key", "on");
     endif
diff --git a/scripts/plot/ribbon.m b/scripts/plot/ribbon.m
--- a/scripts/plot/ribbon.m
+++ b/scripts/plot/ribbon.m
@@ -50,17 +50,17 @@ function h = ribbon (x, y, width)
 
   if (isvector (x) && isvector (y))
     if (length (x) != length (y))
       error ("ribbon: in case of vectors, X and Y must have same length")
     else
       [x, y] = meshgrid (x, y);
     endif
   else
-    if (! all (size (x) == size (y)))
+    if (! size_equal(x, y))
       error ("ribbon: in case of matrices, X and Y must have same size")
     endif
   endif
 
   [nr, nc] = size (y);
   tmp = zeros (1, nc);
 
   for c = nc:-1:1
diff --git a/scripts/plot/slice.m b/scripts/plot/slice.m
--- a/scripts/plot/slice.m
+++ b/scripts/plot/slice.m
@@ -67,17 +67,16 @@
 ## @seealso{interp3, surface, pcolor}
 ## @end deftypefn
 
 ## Author: Kai Habel <kai.habel@gmx.de>
 
 function h = slice (varargin)
 
   method = "linear";
-  extrapval = NA;
   nargs = nargin;
 
   if (ischar (varargin{end}))
     method = varargin{end};
     nargs -= 1;
   endif
 
   if (nargs == 4)
@@ -95,31 +94,31 @@ function h = slice (varargin)
     if (ndims (v) != 3)
       error ("slice: expect 3-dimensional array of values");
     endif
     x = varargin{1};
     y = varargin{2};
     z = varargin{3};
     if (all ([isvector(x), isvector(y), isvector(z)]))
       [x, y, z] = meshgrid (x, y, z);
-    elseif (ndims (x) == 3 && size_equal (x, y) && size_equal (x, z))
+    elseif (ndims (x) == 3 && size_equal (x, y, z))
       ## Do nothing.
     else
       error ("slice: X, Y, Z size mismatch")
     endif
     sx = varargin{5};
     sy = varargin{6};
     sz = varargin{7};
   else
     print_usage ();
   endif
 
   if (any ([isvector(sx), isvector(sy), isvector(sz)]))
     have_sval = true;
-  elseif (ndims(sx) == 2 && size_equal (sx, sy) && size_equal (sx, sz))
+  elseif (ndims(sx) == 2 && size_equal (sx, sy, sz))
     have_sval = false;
   else
     error ("slice: dimensional mismatch for (XI, YI, ZI) or (SX, SY, SZ)");
   endif
 
   newplot ();
   ax = gca ();
   sidx = 1;
@@ -155,21 +154,22 @@ function h = slice (varargin)
         [xi, yi, zi] = meshgrid (sx(i), squeeze (y(:,1,1)), squeeze (z(1,1,:)));
         vx = squeeze (interp3 (x, y, z, v, xi, yi, zi, method));
         tmp(sidx++) = surface (squeeze (sx(i) * ones (size (zi))),
 			       squeeze (yi), squeeze(zi), vx);
       endfor
     endif
   else
     vi = interp3 (x, y, z, v, sx, sy, sz);
-    tmp(sidx++) = surface (sx, sy, sz, vi);
+    tmp = surface (sx, sy, sz, vi);
   endif
 
   if (! ishold ())
-    set (ax, "view", [-37.5, 30.0]);
+    set (ax, "view", [-37.5, 30.0], "box", "off", "xgrid", "on",
+	 "ygrid", "on", "zgrid", "on");
   endif
 
   if (nargout > 0)
     h = tmp;
   endif
 
 endfunction
 
diff --git a/scripts/plot/surface.m b/scripts/plot/surface.m
--- a/scripts/plot/surface.m
+++ b/scripts/plot/surface.m
@@ -87,17 +87,17 @@ function [h, bad_usage] = __surface__ (a
     if (isvector (x) && isvector (y) && ismatrix (z))
       if (rows (z) == length (y) && columns (z) == length (x))
         x = x(:)';
         y = y(:);
       else
         error ("surface: rows (z) must be the same as length (y) and columns (z) must be the same as length (x)");
       endif
     elseif (ismatrix (x) && ismatrix (y) && ismatrix (z))
-      if (! (size_equal (x, y) && size_equal (x, z)))
+      if (! size_equal (x, y, z))
         error ("surface: x, y, and z must have same dimensions");
       endif
     else
       error ("surface: x and y must be vectors and z must be a matrix");
     endif
   elseif (firststring == 4)
     x = varargin{1};
     y = varargin{2};
@@ -106,17 +106,17 @@ function [h, bad_usage] = __surface__ (a
     if (isvector (x) && isvector (y) && ismatrix (z))
       if (rows (z) == length (y) && columns (z) == length (x))
         x = x(:)';
         y = y(:);
       else
         error ("surface: rows (z) must be the same as length (y) and columns (z) must be the same as length (x)");
       endif
     elseif (ismatrix (x) && ismatrix (y) && ismatrix (z))
-      if (! (size_equal (x, y) && size_equal (x, z)))
+      if (! size_equal (x, y, z))
         error ("surface: x, y, and z must have same dimensions");
       endif
     else
       error ("surface: x and y must be vectors and z must be a matrix");
     endif
   elseif (firststring == 3)    
     z = varargin{1};
     c = varargin{2};
