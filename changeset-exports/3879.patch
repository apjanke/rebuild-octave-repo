# HG changeset patch
# User jwe
# Date 1015621353 0
#      Fri Mar 08 21:02:33 2002 +0000
# Node ID 7200bfd25c97715c376df8ce28fb246a2af49467
# Parent  faeca8a063aeff59a75cbbc65c7d33404772a1ee
[project @ 2002-03-08 21:00:54 by jwe]

diff --git a/src/TEMPLATE-INST/SLStack-ovl.cc b/src/TEMPLATE-INST/SLStack-ovl.cc
new file mode 100644
--- /dev/null
+++ b/src/TEMPLATE-INST/SLStack-ovl.cc
@@ -0,0 +1,51 @@
+/*
+
+Copyright (C) 1996, 1997 John W. Eaton
+
+This file is part of Octave.
+
+Octave is free software; you can redistribute it and/or modify it
+under the terms of the GNU General Public License as published by the
+Free Software Foundation; either version 2, or (at your option) any
+later version.
+
+Octave is distributed in the hope that it will be useful, but WITHOUT
+ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+for more details.
+
+You should have received a copy of the GNU General Public License
+along with Octave; see the file COPYING.  If not, write to the Free
+Software Foundation, 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
+
+*/
+
+// Instantiate Stacks of string values.
+
+#ifdef HAVE_CONFIG_H
+#include <config.h>
+#endif
+
+#include "SLList.h"
+#include "SLList.cc"
+
+#include "Stack.h"
+#include "Stack.cc"
+
+#include "SLStack.h"
+#include "SLStack.cc"
+
+#include "oct-obj.h"
+
+template class SLNode<octave_value_list>;
+template class SLList<octave_value_list>;
+
+template class Stack<octave_value_list>;
+
+template class SLStack<octave_value_list>;
+
+/*
+;;; Local Variables: ***
+;;; mode: C++ ***
+;;; End: ***
+*/
diff --git a/src/utils.cc b/src/utils.cc
--- a/src/utils.cc
+++ b/src/utils.cc
@@ -562,17 +562,17 @@ representation.\n\
 	error ("undo_string_escapes: argument must be a string");
     }
   else
     print_usage ("undo_string_escapes");
 
   return retval;
 }
 
-#if 0
+// #if 0
 
 // Octave could use some way to access the value of ERRNO, but this is
 // probably not the best interface, so don't depend on it...
 
 DEFUN (ERRNO, args, ,
   "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {@var{system_error_number}} errno ()\n\
 Return the current value of the system-dependent variable errno.\n\
@@ -583,17 +583,17 @@ Return the current value of the system-d
   if (args.length () == 0)
     retval = static_cast<double> (errno);
   else
     print_usage ("errno");
 
   return retval;
 }
 
-#endif
+// #endif
 
 static void
 warn_old_style_preference (bool val, const std::string& sval)
 {
   warning
     ("preference of \"%s\" is obsolete -- use numeric value of %d instead",
      sval.c_str (), (val ? 1 : 0));
 }
