# HG changeset patch
# User jwe
# Date 832902780 0
#      Fri May 24 01:53:00 1996 +0000
# Node ID 517a43164a60cb83a67d22273b1d38363ae402c6
# Parent  ee5ec3133ed3863cde52d08aa2c73dfcd48e8aea
[project @ 1996-05-24 01:50:09 by jwe]

diff --git a/scripts/general/reshape.m b/scripts/general/reshape.m
--- a/scripts/general/reshape.m
+++ b/scripts/general/reshape.m
@@ -25,22 +25,28 @@ function retval = reshape (a, m, n)
 #
 # See also: `:', do_fortran_indexing
 
   if (nargin != 3)
     usage ("reshape (a, m, n)");
   else
     [nr, nc] = size (a);
     if (nr * nc == m * n)
-      tmp = do_fortran_indexing;
+      dfi = do_fortran_indexing;
+      istno = implicit_str_to_num_ok;
       unwind_protect
-        do_fortran_indexing = "true";
+        do_fortran_indexing = 1;
+	implicit_str_to_num_ok = 1;
         retval = zeros (m, n);
         retval (:) = a;
+	if (isstr (a))
+	  retval = setstr (retval);
+	endif
       unwind_protect_cleanup
-        do_fortran_indexing = tmp;
+        do_fortran_indexing = dfi;
+	implicit_str_to_num_ok = istno;
       end_unwind_protect
     else
       error ("reshape: sizes must match");
     endif
   endif
 
 endfunction
diff --git a/scripts/strings/deblank.m b/scripts/strings/deblank.m
--- a/scripts/strings/deblank.m
+++ b/scripts/strings/deblank.m
@@ -31,19 +31,18 @@ function t = deblank (s)
   if (isstr (s))
 
     [nr, nc] = size (s);
     len = nr * nc;
 
     if (len == 0)
       t = s;
     else
-      s = toascii (s);
       s = reshape (s, 1, len);
-      k = max (find (s != toascii (" ")));
-      t = setstr (s (1:k));
+      k = max (find (s != " "));
+      t = s (1:k);
     endif
 
   else
     error ("deblank: expecting string argument");
   endif
 
 endfunction
diff --git a/src/pt-const.cc b/src/pt-const.cc
--- a/src/pt-const.cc
+++ b/src/pt-const.cc
@@ -3050,27 +3050,27 @@ OCT_VAL_REP::assign (octave_value& rhs, 
   // of memory.
 
   octave_value rhs_tmp = rhs;
 
   if (! (is_string ()
 	 && (rhs_tmp.is_string ()
 	     || rhs_tmp.is_zero_by_zero ())))
     {
-      rhs_tmp.force_numeric ();
+      rhs_tmp = rhs_tmp.make_numeric ();
 
       if (error_state)
 	return;
     }
 
   if (rhs_tmp.is_string
       && rhs_tmp.rows () == 1
       && rhs_tmp.columns () == 0)
     {
-      rhs_tmp.force_numeric (1);
+      rhs_tmp = rhs_tmp.make_numeric (1);
 
       if (error_state)
 	return;
     }
 
   // An assignment to a range will normally require a conversion to a
   // vector in the end anyway, since it will normally destroy the
   // equally-spaced property of the range elements.  This is not as
