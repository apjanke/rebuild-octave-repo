# HG changeset patch
# User Rik <rik@octave.org>
# Date 1497454483 25200
#      Wed Jun 14 08:34:43 2017 -0700
# Node ID b63c3a09aee7aa8791131fdfabb3d936983c8b42
# Parent  d70434783da3e6da10513c00b25699940bdddc77
maint: Deprecate is_symmetric and replace with issymmetric.

* dMatrix.h (is_symmetric): Use OCTAVE_DEPRECATED macro around function.
* dMatrix.h (issymmetric): New function.

* dSparse.h (is_symmetric): Use OCTAVE_DEPRECATED macro around function.
* dSparse.h (issymmetric): New function.

* fMatrix.h (is_symmetric): Use OCTAVE_DEPRECATED macro around function.
* fMatrix.h (issymmetric): New function.

* __eigs__.cc, dMatrix.cc, dSparse.cc, fMatrix.cc, EIG.cc,
fEIG.cc: Replace instances of is_symmetric with issymmetric.

diff --git a/libinterp/dldfcn/__eigs__.cc b/libinterp/dldfcn/__eigs__.cc
--- a/libinterp/dldfcn/__eigs__.cc
+++ b/libinterp/dldfcn/__eigs__.cc
@@ -360,19 +360,19 @@ Undocumented internal function.
 
   if (nargin > (4+arg_offset))
     error ("eigs: incorrect number of arguments");
 
   // Test undeclared (no issym) matrix inputs for symmetry
   if (! sym_tested && ! have_a_fun)
     {
       if (a_is_sparse)
-        symmetric = asmm.is_symmetric ();
+        symmetric = asmm.issymmetric ();
       else
-        symmetric = amm.is_symmetric ();
+        symmetric = amm.issymmetric ();
     }
 
   if (have_b)
     {
       if (a_is_complex || b_is_complex)
         {
           if (a_is_sparse)
             bscm = args(b_arg).sparse_complex_matrix_value ();
diff --git a/liboctave/array/dMatrix.cc b/liboctave/array/dMatrix.cc
--- a/liboctave/array/dMatrix.cc
+++ b/liboctave/array/dMatrix.cc
@@ -127,17 +127,17 @@ Matrix::operator == (const Matrix& a) co
 
 bool
 Matrix::operator != (const Matrix& a) const
 {
   return !(*this == a);
 }
 
 bool
-Matrix::is_symmetric (void) const
+Matrix::issymmetric (void) const
 {
   if (issquare () && rows () > 0)
     {
       for (octave_idx_type i = 0; i < rows (); i++)
         for (octave_idx_type j = i+1; j < cols (); j++)
           if (elem (i, j) != elem (j, i))
             return false;
 
diff --git a/liboctave/array/dMatrix.h b/liboctave/array/dMatrix.h
--- a/liboctave/array/dMatrix.h
+++ b/liboctave/array/dMatrix.h
@@ -91,17 +91,21 @@ public:
 
   explicit Matrix (const boolMatrix& a);
 
   explicit Matrix (const charMatrix& a);
 
   bool operator == (const Matrix& a) const;
   bool operator != (const Matrix& a) const;
 
-  bool is_symmetric (void) const;
+  bool issymmetric (void) const;
+
+  OCTAVE_DEPRECATED ("use 'issymmetric' instead")
+  bool is_symmetric (void) const
+  { return issymmetric (); }
 
   // destructive insert/delete/reorder operations
 
   Matrix& insert (const Matrix& a, octave_idx_type r, octave_idx_type c);
   Matrix& insert (const RowVector& a, octave_idx_type r, octave_idx_type c);
   Matrix& insert (const ColumnVector& a, octave_idx_type r, octave_idx_type c);
   Matrix& insert (const DiagMatrix& a, octave_idx_type r, octave_idx_type c);
 
diff --git a/liboctave/array/dSparse.cc b/liboctave/array/dSparse.cc
--- a/liboctave/array/dSparse.cc
+++ b/liboctave/array/dSparse.cc
@@ -122,17 +122,17 @@ SparseMatrix::operator == (const SparseM
 
 bool
 SparseMatrix::operator != (const SparseMatrix& a) const
 {
   return !(*this == a);
 }
 
 bool
-SparseMatrix::is_symmetric (void) const
+SparseMatrix::issymmetric (void) const
 {
   octave_idx_type nr = rows ();
   octave_idx_type nc = cols ();
 
   if (nr == nc && nr > 0)
     {
       for (octave_idx_type j = 0; j < nc; j++)
         {
diff --git a/liboctave/array/dSparse.h b/liboctave/array/dSparse.h
--- a/liboctave/array/dSparse.h
+++ b/liboctave/array/dSparse.h
@@ -95,17 +95,21 @@ public:
   {
     MSparse<double>::operator = (a);
     return *this;
   }
 
   bool operator == (const SparseMatrix& a) const;
   bool operator != (const SparseMatrix& a) const;
 
-  bool is_symmetric (void) const;
+  bool issymmetric (void) const;
+
+  OCTAVE_DEPRECATED ("use 'issymmetric' instead")
+  bool is_symmetric (void) const
+  { return issymmetric (); }
 
   SparseMatrix max (int dim = -1) const;
   SparseMatrix max (Array<octave_idx_type>& index, int dim = -1) const;
   SparseMatrix min (int dim = -1) const;
   SparseMatrix min (Array<octave_idx_type>& index, int dim = -1) const;
 
   // destructive insert/delete/reorder operations
 
diff --git a/liboctave/array/fMatrix.cc b/liboctave/array/fMatrix.cc
--- a/liboctave/array/fMatrix.cc
+++ b/liboctave/array/fMatrix.cc
@@ -129,17 +129,17 @@ FloatMatrix::operator == (const FloatMat
 
 bool
 FloatMatrix::operator != (const FloatMatrix& a) const
 {
   return !(*this == a);
 }
 
 bool
-FloatMatrix::is_symmetric (void) const
+FloatMatrix::issymmetric (void) const
 {
   if (issquare () && rows () > 0)
     {
       for (octave_idx_type i = 0; i < rows (); i++)
         for (octave_idx_type j = i+1; j < cols (); j++)
           if (elem (i, j) != elem (j, i))
             return false;
 
diff --git a/liboctave/array/fMatrix.h b/liboctave/array/fMatrix.h
--- a/liboctave/array/fMatrix.h
+++ b/liboctave/array/fMatrix.h
@@ -91,17 +91,21 @@ public:
 
   explicit FloatMatrix (const boolMatrix& a);
 
   explicit FloatMatrix (const charMatrix& a);
 
   bool operator == (const FloatMatrix& a) const;
   bool operator != (const FloatMatrix& a) const;
 
-  bool is_symmetric (void) const;
+  bool issymmetric (void) const;
+
+  OCTAVE_DEPRECATED ("use 'issymmetric' instead")
+  bool is_symmetric (void) const
+  { return issymmetric (); }
 
   // destructive insert/delete/reorder operations
 
   FloatMatrix& insert (const FloatMatrix& a,
                        octave_idx_type r, octave_idx_type c);
   FloatMatrix& insert (const FloatRowVector& a,
                        octave_idx_type r, octave_idx_type c);
   FloatMatrix& insert (const FloatColumnVector& a,
diff --git a/liboctave/numeric/EIG.cc b/liboctave/numeric/EIG.cc
--- a/liboctave/numeric/EIG.cc
+++ b/liboctave/numeric/EIG.cc
@@ -34,17 +34,17 @@ along with Octave; see the file COPYING.
 
 octave_idx_type
 EIG::init (const Matrix& a, bool calc_rev, bool calc_lev, bool balance)
 {
   if (a.any_element_is_inf_or_nan ())
     (*current_liboctave_error_handler)
       ("EIG: matrix contains Inf or NaN values");
 
-  if (a.is_symmetric ())
+  if (a.issymmetric ())
     return symmetric_init (a, calc_rev, calc_lev);
 
   F77_INT n = octave::to_f77_int (a.rows ());
   F77_INT a_nc = octave::to_f77_int (a.cols ());
 
   if (n != a_nc)
     (*current_liboctave_error_handler) ("EIG requires square matrix");
 
@@ -412,17 +412,17 @@ EIG::init (const Matrix& a, const Matrix
 
   if (! force_qz)
     {
       F77_XFCN (dpotrf, DPOTRF, (F77_CONST_CHAR_ARG2 ("L", 1),
                                  n, tmp_data, n,
                                  info
                                  F77_CHAR_ARG_LEN (1)));
 
-      if (a.is_symmetric () && b.is_symmetric () && info == 0)
+      if (a.issymmetric () && b.issymmetric () && info == 0)
         return symmetric_init (a, b, calc_rev, calc_lev);
     }
 
   Matrix atmp = a;
   double *atmp_data = atmp.fortran_vec ();
 
   Matrix btmp = b;
   double *btmp_data = btmp.fortran_vec ();
diff --git a/liboctave/numeric/fEIG.cc b/liboctave/numeric/fEIG.cc
--- a/liboctave/numeric/fEIG.cc
+++ b/liboctave/numeric/fEIG.cc
@@ -35,17 +35,17 @@ along with Octave; see the file COPYING.
 octave_idx_type
 FloatEIG::init (const FloatMatrix& a, bool calc_rev, bool calc_lev,
                 bool balance)
 {
   if (a.any_element_is_inf_or_nan ())
     (*current_liboctave_error_handler)
       ("EIG: matrix contains Inf or NaN values");
 
-  if (a.is_symmetric ())
+  if (a.issymmetric ())
     return symmetric_init (a, calc_rev, calc_lev);
 
   F77_INT n = octave::to_f77_int (a.rows ());
   F77_INT a_nc = octave::to_f77_int (a.cols ());
 
   if (n != a_nc)
     (*current_liboctave_error_handler) ("EIG requires square matrix");
 
@@ -408,17 +408,17 @@ FloatEIG::init (const FloatMatrix& a, co
   float *tmp_data = tmp.fortran_vec ();
   if (! force_qz)
     {
       F77_XFCN (spotrf, SPOTRF, (F77_CONST_CHAR_ARG2 ("L", 1),
                                  n, tmp_data, n,
                                  info
                                  F77_CHAR_ARG_LEN (1)));
 
-      if (a.is_symmetric () && b.is_symmetric () && info == 0)
+      if (a.issymmetric () && b.issymmetric () && info == 0)
         return symmetric_init (a, b, calc_rev, calc_lev);
     }
 
   FloatMatrix atmp = a;
   float *atmp_data = atmp.fortran_vec ();
 
   FloatMatrix btmp = b;
   float *btmp_data = btmp.fortran_vec ();
