# HG changeset patch
# User jwe
# Date 1171010022 0
#      Fri Feb 09 08:33:42 2007 +0000
# Node ID 3588fc9044842547c0e5f5997ae2953eed5058d7
# Parent  6110e7d4e4c4ca2dda17bd0fe65c4f99c6922367
[project @ 2007-02-09 08:33:42 by jwe]

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,19 @@
+2007-02-09  John W. Eaton  <jwe@octave.org>
+
+	* ls-mat5.cc (read_mat5_binary_element): Don't attempt to read
+	fieldnames if there are no fields.
+	(write_mat5_tag): Don't use small data element format if bytes == 0.
+
+	* ls-mat5.cc (read_mat5_binary_element): Always create a structure
+	that is at least 1x1.
+	* ov-struct.cc (octave_struct::load_ascii,
+	octave_struct::load_binary, octave_struct::load_hdf5): Likewise.
+
 2007-02-08  Michael Goffioul  <michael.goffioul@swing.be>
 
 	* DLD-FUNCTIONS/__glpk__.cc: Include glplib.h if glpk.h does not.
 	Provide definitions for lib_set_fault_hook and lib_set_print_hook
 	if they are not defined.
 
 2007-02-07  John W. Eaton  <jwe@octave.org>
 
diff --git a/src/ls-mat5.cc b/src/ls-mat5.cc
--- a/src/ls-mat5.cc
+++ b/src/ls-mat5.cc
@@ -712,29 +712,29 @@ read_mat5_binary_element (std::istream& 
 #endif
 
     case MAT_FILE_FUNCTION_CLASS:
       warning ("load: function handles are not implemented");
       goto skip_ahead;
 
     case MAT_FILE_STRUCT_CLASS:
       {
-	Octave_map m;
+	Octave_map m (dim_vector (1, 1));
 	int32_t fn_type;
 	int32_t fn_len;
 	int32_t field_name_length;
 
 	// field name length subelement -- actually the maximum length
 	// of a field name.  The Matlab docs promise this will always
 	// be 32.  We read and use the actual value, on the theory
 	// that eventually someone will recognize that's a waste of
 	// space.
 	if (read_mat5_tag (is, swap, fn_type, fn_len) || fn_type != miINT32)
 	  {
-	    error ("load: invalid field name subelement");
+	    error ("load: invalid field name length subelement");
 	    goto data_read_error;
 	  }
 
 	if (! is.read (reinterpret_cast<char *> (&field_name_length), fn_len ))
 	  goto data_read_error;
 
 	if (swap)
 	  swap_bytes<4> (&field_name_length);
@@ -744,47 +744,50 @@ read_mat5_binary_element (std::istream& 
 	if (read_mat5_tag (is, swap, fn_type, fn_len) || fn_type != miINT8)
 	  {
 	    error ("load: invalid field name subelement");
 	    goto data_read_error;
 	  }
 
 	octave_idx_type n_fields = fn_len/field_name_length;
 
-	fn_len = PAD (fn_len);
+	if (n_fields > 0)
+	  {
+	    fn_len = PAD (fn_len);
 
-	OCTAVE_LOCAL_BUFFER (char, elname, fn_len);
+	    OCTAVE_LOCAL_BUFFER (char, elname, fn_len);
 
-	if (! is.read (elname, fn_len))
-	  goto data_read_error;
+	    if (! is.read (elname, fn_len))
+	      goto data_read_error;
 
-	std::vector<Cell> elt (n_fields);
+	    std::vector<Cell> elt (n_fields);
+
+	    for (octave_idx_type i = 0; i < n_fields; i++)
+	      elt[i] = Cell (dims);
 
-	for (octave_idx_type i = 0; i < n_fields; i++)
-	  elt[i] = Cell (dims);
+	    octave_idx_type n = dims.numel ();
 
-	octave_idx_type n = dims.numel ();
+	    // fields subelements
+	    for (octave_idx_type j = 0; j < n; j++)
+	      {
+		for (octave_idx_type i = 0; i < n_fields; i++)
+		  {
+		    octave_value fieldtc;
+		    read_mat5_binary_element (is, filename, swap, global,
+					      fieldtc); 
+		    elt[i](j) = fieldtc;
+		  }
+	      }
 
-	// fields subelements
-	for (octave_idx_type j = 0; j < n; j++)
-	  {
 	    for (octave_idx_type i = 0; i < n_fields; i++)
 	      {
-		octave_value fieldtc;
-		read_mat5_binary_element (is, filename, swap, global, fieldtc);
-		elt[i](j) = fieldtc;
-	      }
+		const char *key = elname + i*field_name_length;
 
-	  }
-
-	for (octave_idx_type i = 0; i < n_fields; i++)
-	  {
-	    const char *key = elname + i*field_name_length;
-
-	    m.assign (key, elt[i]);
+		m.assign (key, elt[i]);
+	      }
 	  }
 
 	tc = m;
       }
       break;
 
     case MAT_FILE_INT8_CLASS:
       OCTAVE_MAT5_INTEGER_READ (int8NDArray);
@@ -1002,17 +1005,17 @@ read_mat5_binary_file_header (std::istre
   return 0;
 }
 
 static int 
 write_mat5_tag (std::ostream& is, int type, int bytes)
 {
   int32_t temp;
 
-  if (bytes <= 4)
+  if (bytes > 0 && bytes <= 4)
     temp = (bytes << 16) + type;
   else
     {
       temp = type;
       if (! is.write (reinterpret_cast<char *> (&temp), 4))
 	goto data_write_error;
       temp = bytes;
     }
diff --git a/src/ov-struct.cc b/src/ov-struct.cc
--- a/src/ov-struct.cc
+++ b/src/ov-struct.cc
@@ -1082,17 +1082,17 @@ octave_struct::load_ascii (std::istream&
 	    map = m;
 	  else
 	    {
 	      error ("load: failed to load structure");
 	      success = false;
 	    }
 	}
       else if (len == 0 )
-	map = Octave_map ();
+	map = Octave_map (dim_vector (1, 1));
       else
 	panic_impossible ();
     }
   else {
     error ("load: failed to extract number of elements in structure");
     success = false;
   }
 
@@ -1172,17 +1172,17 @@ octave_struct::load_binary (std::istream
 	map = m;
       else
 	{
 	  error ("load: failed to load structure");
 	  success = false;
 	}
     }
   else if (len == 0 )
-    map = Octave_map ();
+    map = Octave_map (dim_vector (1, 1));
   else
     panic_impossible ();
 
   return success;
 }
 
 #if defined (HAVE_HDF5)
 
@@ -1219,17 +1219,17 @@ bool
 octave_struct::load_hdf5 (hid_t loc_id, const char *name,
 			  bool have_h5giterate_bug)
 {
   bool retval = false;
 
   hdf5_callback_data dsub;
 
   herr_t retval2 = 0;
-  Octave_map m;
+  Octave_map m (dim_vector (1, 1));
   int current_item = 0;
 #ifdef HAVE_H5GGET_NUM_OBJS
   hsize_t num_obj = 0;
   hid_t group_id = H5Gopen (loc_id, name); 
   H5Gget_num_objs (group_id, &num_obj);
   H5Gclose (group_id);
 
   while (current_item < static_cast<int> (num_obj)
