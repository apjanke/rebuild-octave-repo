# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1264060065 18000
#      Thu Jan 21 02:47:45 2010 -0500
# Node ID cb3d926b4d9e4f8b681c96ea294a8cadb617af93
# Parent  a0665fa8798cec267257782aa91f38a8994dcd1f
use readlink module from gnulib

diff --git a/ChangeLog b/ChangeLog
--- a/ChangeLog
+++ b/ChangeLog
@@ -1,8 +1,13 @@
+2010-01-21  John W. Eaton  <jwe@octave.org>
+
+	* bootstrap.conf (gnulib_modules): Include pathmax and readlink
+	in the list.
+
 2010-01-21  John W. Eaton  <jwe@octave.org>
 
 	* bootstrap.conf (gnulib_modules): Include symlink in the list.
 
 2010-01-21  John W. Eaton  <jwe@octave.org>
 
 	* bootstrap.conf (gnulib_modules): Include link in the list.
 
diff --git a/bootstrap.conf b/bootstrap.conf
--- a/bootstrap.conf
+++ b/bootstrap.conf
@@ -23,16 +23,18 @@ gnulib_modules="
   fnmatch
   getopt-gnu
   gettimeofday
   glob
   link
   lstat
   mkdir
   mkfifo
+  pathmax
+  readlink
   rename
   rmdir
   stat
   strftime
   strptime
   symlink
   times
   unlink
diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,14 @@
+2010-01-21  John W. Eaton  <jwe@octave.org>
+
+	* lo-cutils.c (octave_readlink): New funtion.
+	* lo-utils.h: Provide decl.
+	* file-ops.cc (file_ops::readlink): Call octave_readlink.
+
 2010-01-21  John W. Eaton  <jwe@octave.org>
 
 	* lo-cutils.c (octave_symlink): New funtion.
 	* lo-utils.h: Provide decl.
 	* file-ops.cc (file_ops::symlink): Call octave_symlink.
 
 2010-01-21  John W. Eaton  <jwe@octave.org>
 
diff --git a/liboctave/file-ops.cc b/liboctave/file-ops.cc
--- a/liboctave/file-ops.cc
+++ b/liboctave/file-ops.cc
@@ -32,16 +32,18 @@ along with Octave; see the file COPYING.
 
 #include <iostream>
 #include <vector>
 
 #ifdef HAVE_SYS_TYPES_H
 #include <sys/types.h>
 #endif
 
+#incluede <pathmax.h>
+
 #ifdef HAVE_UNISTD_H
 #include <unistd.h>
 #endif
 
 #include "dir-ops.h"
 #include "file-ops.h"
 #include "file-stat.h"
 #include "oct-env.h"
@@ -201,52 +203,48 @@ file_ops::symlink (const std::string& ol
     {
       using namespace std;
       msg = ::strerror (errno);
     }
 
   return status;
 }
 
-// We provide a replacement for rename().
+// We provide a replacement for readlink().
 
 int
 file_ops::readlink (const std::string& path, std::string& result)
 {
   std::string msg;
   return readlink (path, result, msg);
 }
 
 int
 file_ops::readlink (const std::string& path, std::string& result,
 		    std::string& msg)
 {
   int status = -1;
 
   msg = std::string ();
 
-#if defined (HAVE_READLINK)
   char buf[MAXPATHLEN+1];
 
-  status = ::readlink (path.c_str (), buf, MAXPATHLEN);
+  status = octave_readlink (path.c_str (), buf, MAXPATHLEN);
 
   if (status < 0)
     {
       using namespace std;
       msg = ::strerror (errno);
     }
   else
     {
       buf[status] = '\0';
       result = std::string (buf);
       status = 0;
     }
-#else
-  msg = NOT_SUPPORTED ("rename");
-#endif
 
   return status;
 }
 
 // We provide a replacement for rename().
 
 int
 file_ops::rename (const std::string& from, const std::string& to)
diff --git a/liboctave/lo-cutils.c b/liboctave/lo-cutils.c
--- a/liboctave/lo-cutils.c
+++ b/liboctave/lo-cutils.c
@@ -60,16 +60,22 @@ octave_link (const char *old_name, const
 
 OCTAVE_API int
 octave_symlink (const char *old_name, const char *new_name)
 {
   return symlink (old_name, new_name);
 }
 
 OCTAVE_API int
+octave_readlink (const char *name, char *buf, size_t size)
+{
+  return readlink (name, buf, size);
+}
+
+OCTAVE_API int
 octave_mkdir (const char *name, mode_t mode)
 {
   return mkdir (name, mode);
 }
 
 OCTAVE_API int
 octave_mkfifo (const char *name, mode_t mode)
 {
diff --git a/liboctave/lo-utils.h b/liboctave/lo-utils.h
--- a/liboctave/lo-utils.h
+++ b/liboctave/lo-utils.h
@@ -52,16 +52,19 @@ extern OCTAVE_API std::string octave_fge
 extern "C" OCTAVE_API int octave_gethostname (char *, int);
 
 extern "C" OCTAVE_API int
 octave_link (const char *old_name, const char *new_name);
 
 extern "C" OCTAVE_API int
 octave_symlink (const char *old_name, const char *new_name);
 
+extern "C" OCTAVE_API int
+octave_readlink (const char *name, char *buf, size_t size);
+
 extern "C" OCTAVE_API int octave_mkdir (const char *name, mode_t mode);
 
 extern "C" OCTAVE_API int octave_mkfifo (const char *name, mode_t mode);
 
 extern "C" OCTAVE_API void octave_qsort (void *base, size_t n, size_t size,
 			      int (*cmp) (const void *, const void *));
 
 extern "C" OCTAVE_API int octave_rmdir (const char *name);
