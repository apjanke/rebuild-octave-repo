# HG changeset patch
# User dbateman
# Date 1182970979 0
#      Wed Jun 27 19:02:59 2007 +0000
# Node ID 2a83fce5a09737534d070145b1db9ba647c75aec
# Parent  958713bc465e40fd2b786ab46bb83eb820a39b5f
[project @ 2007-06-27 19:02:59 by dbateman]

diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,15 @@
+2007-06-04  David Bateman  <dbateman@free.fr>
+
+	* oct-inttypes.h (octave_int<T>& operator <<= (const T2&),
+	octave_int<T>& operator >>= (const T2&)): Make shift operators
+	perform a twos complement arithmetic shift for both signed and
+	unsigned integers regardless of compiler implementations.
+
 2007-06-13  Michael Goffioul  <michael.goffioul@swing.be>
 
 	* SparseCmplxQR.cc (OCTAVE_C99_ZERO): For CXSparse 2.2 and greater
 	use cs_complex_t(0,0) for the complex zero.
 
 	* MArray-ch.cc, MArray-d.cc, MArray-i.cc, MArray-s.cc:
 	Sprinkle class instantiations with OCTAVE_API as needed.
 
diff --git a/liboctave/oct-inttypes.h b/liboctave/oct-inttypes.h
--- a/liboctave/oct-inttypes.h
+++ b/liboctave/oct-inttypes.h
@@ -290,24 +290,27 @@ public:
     double r = (t == 0 && tx == 0) ? 0 : xround (t / tx);
     ival = OCTAVE_INT_FIT_TO_RANGE (r, T);
     return *this;
   }
 
   template <class T2>
   octave_int<T>& operator <<= (const T2& x)
   {
-    ival = ((ival << x) > std::numeric_limits<T>::max ()) ? 0 : (ival << x);
+    ival = ival << x;
     return *this;
   }
 
   template <class T2>
   octave_int<T>& operator >>= (const T2& x)
   {
-    ival >>= x;
+    if (ival < 0)
+      ival = - (((-ival) >> x) & std::numeric_limits<T>::max());
+    else
+      ival = ival >> x;
     return *this;
   }
 
   octave_int<T> min (void) const { return std::numeric_limits<T>::min (); }
   octave_int<T> max (void) const { return std::numeric_limits<T>::max (); }
 
   static int nbits (void) { return sizeof (T) * CHAR_BIT; }
 
