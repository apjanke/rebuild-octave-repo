# HG changeset patch
# User jwe
# Date 1041289527 0
#      Mon Dec 30 23:05:27 2002 +0000
# Node ID fc9a075d10fbacdde9e16a35588f5f5045b2a097
# Parent  0253850a08d78ad08f0210c6071ec4e8730aac58
[project @ 2002-12-30 23:05:27 by jwe]

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,27 @@
+2002-12-30  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* load-save.cc (read_mat_ascii_data): Use isalpha and isalnum, not
+	::isalpha and ::isalnum.
+
+	* defaults.cc (maybe_add_or_del_packages): SCRIPT_FILE arg is now
+	a const reference type.
+
+	* ov.h (octave_value::subsref, octave_value::subsasgn,
+	octave_value::assign, octave_value::do_non_const_unary_op,
+	octave_value::numeric_assign): TYPE arg is now a const reference
+	type.  Change all derived classes.
+
+	* ov.cc (octave_value::subsref (const std::string&, const
+	octave_value_list&)): Move body here, from ov.h.
+
+	* octave.cc (octave_main): Return 0 at end of function to avoid
+	compiler warnings.
+
 2002-12-30  Paul Kienzle <pkienzle@users.sf.net>
 
 	* parse.y: Fix typo in doc string.
 
 2002-12-29  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* DLD-FUNCTIONS/lpsolve.cc (Flpsolve): Rename from Flp_solve.
 	(Flpsolve_options): Rename ffrom Flp_solve_options.
diff --git a/src/defaults.cc b/src/defaults.cc
--- a/src/defaults.cc
+++ b/src/defaults.cc
@@ -90,17 +90,17 @@ std::string Vsite_defaults_file;
 
 // Each element of A and B should be directory names.  For each
 // element of A not in the list B, execute SCRIPT_FILE in that
 // directory if it exists.
 
 static void
 maybe_add_or_del_packages (const string_vector& a,
 			   const string_vector& b,
-			   const std::string script_file)
+			   const std::string& script_file)
 {
   if (! octave_interpreter_ready)
     return;
 
   unwind_protect::begin_frame ("maybe_add_or_del_packages");
 
   unwind_protect_bool (input_from_startup_file);
 
diff --git a/src/load-save.cc b/src/load-save.cc
--- a/src/load-save.cc
+++ b/src/load-save.cc
@@ -1988,21 +1988,21 @@ read_mat_ascii_data (std::istream& is, c
 
   if (pos != NPOS)
     varname = varname.substr (0, pos);
 
   size_t len = varname.length ();
   for (size_t i = 0; i < len; i++)
     {
       char c = varname[i];
-      if (! (::isalnum (c) || c == '_'))
+      if (! (isalnum (c) || c == '_'))
 	varname[i] = '_';
     }
 
-  if (! ::isalpha (varname[0]))
+  if (! isalpha (varname[0]))
     varname.insert (0, "X");
 
   if (valid_identifier (varname))
     {
       int nr = 0;
       int nc = 0;
 
       int total_count = 0;
diff --git a/src/octave.cc b/src/octave.cc
--- a/src/octave.cc
+++ b/src/octave.cc
@@ -596,15 +596,17 @@ octave_main (int argc, char **argv)
     line_editing = false;
 
   int retval = main_loop ();
 
   if (retval == 1 && ! error_state)
     retval = 0;
 
   clean_up_and_exit (retval);
+
+  return 0;
 }
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
diff --git a/src/ov-base-mat.cc b/src/ov-base-mat.cc
--- a/src/ov-base-mat.cc
+++ b/src/ov-base-mat.cc
@@ -34,17 +34,17 @@ Software Foundation, 59 Temple Place - S
 #include "oct-obj.h"
 #include "oct-map.h"
 #include "ov-base.h"
 #include "ov-base-mat.h"
 #include "pr-output.h"
 
 template <class MT>
 octave_value
-octave_base_matrix<MT>::subsref (const std::string type,
+octave_base_matrix<MT>::subsref (const std::string& type,
 				 const std::list<octave_value_list>& idx)
 {
   octave_value retval;
 
   switch (type[0])
     {
     case '(':
       retval = do_index_op (idx.front ());
@@ -62,17 +62,17 @@ octave_base_matrix<MT>::subsref (const s
       panic_impossible ();
     }
 
   return retval.next_subsref (type, idx);
 }
 
 template <class MT>
 octave_value
-octave_base_matrix<MT>::subsasgn (const std::string type,
+octave_base_matrix<MT>::subsasgn (const std::string& type,
 				  const std::list<octave_value_list>& idx,
 				  const octave_value& rhs)
 {
   octave_value retval;
 
   switch (type[0])
     {
     case '(':
diff --git a/src/ov-base-mat.h b/src/ov-base-mat.h
--- a/src/ov-base-mat.h
+++ b/src/ov-base-mat.h
@@ -61,20 +61,20 @@ public:
   octave_base_matrix (const octave_base_matrix& m)
     : octave_base_value (), matrix (m.matrix) { }
 
   ~octave_base_matrix (void) { }
 
   octave_value *clone (void) const { return new octave_base_matrix (*this); }
   octave_value *empty_clone (void) const { return new octave_base_matrix (); }
 
-  octave_value subsref (const std::string type,
+  octave_value subsref (const std::string& type,
 			const std::list<octave_value_list>& idx);
 
-  octave_value subsasgn (const std::string type,
+  octave_value subsasgn (const std::string& type,
 			 const std::list<octave_value_list>& idx,
 			 const octave_value& rhs);
 
   octave_value do_index_op (const octave_value_list& idx, int resize_ok);
 
   octave_value do_index_op (const octave_value_list& idx)
     { return do_index_op (idx, 0); }
 
diff --git a/src/ov-base-scalar.cc b/src/ov-base-scalar.cc
--- a/src/ov-base-scalar.cc
+++ b/src/ov-base-scalar.cc
@@ -34,17 +34,17 @@ Software Foundation, 59 Temple Place - S
 #include "ov-base.h"
 #include "ov-cx-mat.h"
 #include "ov-re-mat.h"
 #include "ov-base-scalar.h"
 #include "pr-output.h"
 
 template <class ST>
 octave_value
-octave_base_scalar<ST>::subsref (const std::string type,
+octave_base_scalar<ST>::subsref (const std::string& type,
 				 const std::list<octave_value_list>& idx)
 {
   octave_value retval;
 
   switch (type[0])
     {
     case '(':
       retval = do_index_op (idx.front ());
@@ -62,17 +62,17 @@ octave_base_scalar<ST>::subsref (const s
       panic_impossible ();
     }
 
   return retval.next_subsref (type, idx);
 }
 
 template <class ST>
 octave_value
-octave_base_scalar<ST>::subsasgn (const std::string type,
+octave_base_scalar<ST>::subsasgn (const std::string& type,
 				  const std::list<octave_value_list>& idx,
 				  const octave_value& rhs)
 {
   octave_value retval;
 
   switch (type[0])
     {
     case '(':
diff --git a/src/ov-base-scalar.h b/src/ov-base-scalar.h
--- a/src/ov-base-scalar.h
+++ b/src/ov-base-scalar.h
@@ -54,20 +54,20 @@ public:
   octave_base_scalar (const ST& s)
     : octave_base_value (), scalar (s) { }
 
   octave_base_scalar (const octave_base_scalar& s)
     : octave_base_value (), scalar (s.scalar) { }
 
   ~octave_base_scalar (void) { }
 
-  octave_value subsref (const std::string type,
+  octave_value subsref (const std::string& type,
 			const std::list<octave_value_list>& idx);
 
-  octave_value subsasgn (const std::string type,
+  octave_value subsasgn (const std::string& type,
 			 const std::list<octave_value_list>& idx,
 			 const octave_value& rhs);
 
   int rows (void) const { return 1; }
 
   int columns (void) const { return 1; }
 
   int length (void) const { return 1; }
diff --git a/src/ov-base.cc b/src/ov-base.cc
--- a/src/ov-base.cc
+++ b/src/ov-base.cc
@@ -48,26 +48,26 @@ Software Foundation, 59 Temple Place - S
 #include "ov-re-mat.h"
 #include "ov-scalar.h"
 #include "ov-str-mat.h"
 #include "variables.h"
 
 DEFINE_OV_TYPEID_FUNCTIONS_AND_DATA (octave_base_value, "<unknown type>");
 
 octave_value
-octave_base_value::subsref (const std::string,
+octave_base_value::subsref (const std::string&,
 			    const std::list<octave_value_list>&)
 {
   std::string nm = type_name ();
   error ("can't perform indexing operations for %s type", nm.c_str ());
   return octave_value ();
 }
 
 octave_value_list
-octave_base_value::subsref (const std::string,
+octave_base_value::subsref (const std::string&,
 			    const std::list<octave_value_list>&, int)
 {
   std::string nm = type_name ();
   error ("can't perform indexing operations for %s type", nm.c_str ());
   return octave_value ();
 }
 
 octave_value
@@ -90,17 +90,17 @@ idx_vector
 octave_base_value::index_vector (void) const
 {
   std::string nm = type_name ();
   error ("%s type invalid as index value", nm.c_str ());
   return idx_vector ();
 }
 
 octave_value
-octave_base_value::subsasgn (const std::string type,
+octave_base_value::subsasgn (const std::string& type,
 			     const std::list<octave_value_list>& idx,
 			     const octave_value& rhs)
 {
   octave_value retval;
 
   if (is_defined ())
     {
       if (is_numeric_type ())
diff --git a/src/ov-base.h b/src/ov-base.h
--- a/src/ov-base.h
+++ b/src/ov-base.h
@@ -66,34 +66,34 @@ public:
   octave_value *empty_clone (void) const { return new octave_base_value (); }
 
   type_conv_fcn numeric_conversion_function (void) const
     { return static_cast<type_conv_fcn> (0); }
 
   octave_value *try_narrowing_conversion (void)
     { return static_cast<octave_value *> (0); }
 
-  octave_value subsref (const std::string type,
+  octave_value subsref (const std::string& type,
 			const std::list<octave_value_list>& idx);
 
-  octave_value_list subsref (const std::string type,
+  octave_value_list subsref (const std::string& type,
 			     const std::list<octave_value_list>& idx,
 			     int nargout);
 
   octave_value do_index_op (const octave_value_list& idx, int resize_ok);
 
   octave_value do_index_op (const octave_value_list& idx)
     { return do_index_op (idx, 0); }
 
   octave_value_list
   do_multi_index_op (int nargout, const octave_value_list& idx);
 
   idx_vector index_vector (void) const;
 
-  octave_value subsasgn (const std::string type,
+  octave_value subsasgn (const std::string& type,
 			 const std::list<octave_value_list>& idx,
 			 const octave_value& rhs);
 
   int rows (void) const { return -1; }
 
   int columns (void) const { return -1; }
 
   int length (void) const { return -1; }
diff --git a/src/ov-builtin.cc b/src/ov-builtin.cc
--- a/src/ov-builtin.cc
+++ b/src/ov-builtin.cc
@@ -47,17 +47,17 @@ any_arg_is_magic_colon (const octave_val
   for (int i = 0; i < nargin; i++)
     if (args(i).is_magic_colon ())
       return true;
 
   return false;
 }
 
 octave_value_list
-octave_builtin::subsref (const std::string type,
+octave_builtin::subsref (const std::string& type,
 			 const std::list<octave_value_list>& idx,
 			 int nargout)
 {
   octave_value_list retval;
 
   switch (type[0])
     {
     case '(':
diff --git a/src/ov-builtin.h b/src/ov-builtin.h
--- a/src/ov-builtin.h
+++ b/src/ov-builtin.h
@@ -45,17 +45,17 @@ public:
   typedef octave_value_list (*fcn) (const octave_value_list&, int);
 
   octave_builtin (fcn ff, const std::string& nm = std::string (),
 		  const std::string& ds = std::string ())
     : octave_function (nm, ds), f (ff) { }
 
   ~octave_builtin (void) { }
 
-  octave_value_list subsref (const std::string type,
+  octave_value_list subsref (const std::string& type,
 			     const std::list<octave_value_list>& idx,
 			     int nargout);
 
   octave_function *function_value (bool) { return this; }
 
   bool is_builtin_function (void) const { return true; }
 
   octave_value_list
diff --git a/src/ov-cell.cc b/src/ov-cell.cc
--- a/src/ov-cell.cc
+++ b/src/ov-cell.cc
@@ -47,17 +47,17 @@ Software Foundation, 59 Temple Place - S
 
 template class octave_base_matrix<Cell>;
 
 DEFINE_OCTAVE_ALLOCATOR (octave_cell);
 
 DEFINE_OV_TYPEID_FUNCTIONS_AND_DATA (octave_cell, "cell");
 
 octave_value
-octave_cell::subsref (const std::string type,
+octave_cell::subsref (const std::string& type,
 		      const std::list<octave_value_list>& idx)
 {
   octave_value retval;
 
   switch (type[0])
     {
     case '(':
       retval = do_index_op (idx.front ());
@@ -98,17 +98,17 @@ octave_cell::subsref (const std::string 
     default:
       panic_impossible ();
     }
 
   return retval.next_subsref (type, idx);
 }
 
 octave_value
-octave_cell::subsasgn (const std::string type,
+octave_cell::subsasgn (const std::string& type,
 		       const std::list<octave_value_list>& idx,
 		       const octave_value& rhs)
 {
   octave_value retval;
 
   int n = type.length ();
 
   octave_value t_rhs = rhs;
diff --git a/src/ov-cell.h b/src/ov-cell.h
--- a/src/ov-cell.h
+++ b/src/ov-cell.h
@@ -68,20 +68,20 @@ public:
 
   octave_value *clone (void) const { return new octave_cell (*this); }
   octave_value *empty_clone (void) const { return new octave_cell (); }
 
 #if 0
   octave_value *try_narrowing_conversion (void);
 #endif
 
-  octave_value subsref (const std::string type,
+  octave_value subsref (const std::string& type,
 			const std::list<octave_value_list>& idx);
 
-  octave_value subsasgn (const std::string type,
+  octave_value subsasgn (const std::string& type,
 			 const std::list<octave_value_list>& idx,
 			 const octave_value& rhs);
 
   bool is_defined (void) const { return true; }
 
   bool is_cell (void) const { return true; }
 
   Cell cell_value (void) const { return matrix; }
diff --git a/src/ov-cs-list.cc b/src/ov-cs-list.cc
--- a/src/ov-cs-list.cc
+++ b/src/ov-cs-list.cc
@@ -40,17 +40,17 @@ Software Foundation, 59 Temple Place - S
 
 DEFINE_OCTAVE_ALLOCATOR (octave_cs_list);
 
 DEFINE_OV_TYPEID_FUNCTIONS_AND_DATA (octave_cs_list, "cs-list");
 
 #if 0
 
 octave_value
-octave_list::subsref (const std::string type,
+octave_list::subsref (const std::string& type,
 		      const std::list<octave_value_list>& idx)
 {
   octave_value retval;
 
   switch (type[0])
     {
     case '(':
       {
@@ -112,17 +112,17 @@ octave_list::do_index_op (const octave_v
     }
   else
     error ("lists may only be indexed by a single scalar");
 
   return retval;
 }
 
 octave_value
-octave_list::subsasgn (const std::string type,
+octave_list::subsasgn (const std::string& type,
 		       const std::list<octave_value_list>& idx,
 		       const octave_value& rhs)
 {
   octave_value retval;
 
   int n = type.length ();
 
   octave_value t_rhs = rhs;
diff --git a/src/ov-cs-list.h b/src/ov-cs-list.h
--- a/src/ov-cs-list.h
+++ b/src/ov-cs-list.h
@@ -60,22 +60,22 @@ public:
     : octave_list (l) { }
 
   ~octave_cs_list (void) { }
 
   octave_value *clone (void) const { return new octave_cs_list (*this); }
   octave_value *empty_clone (void) const { return new octave_cs_list (); }
 
 #if 0
-  octave_value subsref (const std::string type,
+  octave_value subsref (const std::string& type,
 			const std::list<octave_value_list>& idx);
 
   octave_value do_index_op (const octave_value_list& idx, int resize_ok);
 
-  octave_value subsasgn (const std::string type,
+  octave_value subsasgn (const std::string& type,
 			 const std::list<octave_value_list>& idx,
 			 const octave_value& rhs);
 
   void assign (const octave_value_list& idx, const octave_value& rhs);
 
   int length (void) const { return lst.length (); }
 
   bool is_defined (void) const { return true; }
diff --git a/src/ov-list.cc b/src/ov-list.cc
--- a/src/ov-list.cc
+++ b/src/ov-list.cc
@@ -38,17 +38,17 @@ Software Foundation, 59 Temple Place - S
 #include "ov-list.h"
 #include "unwind-prot.h"
 
 DEFINE_OCTAVE_ALLOCATOR (octave_list);
 
 DEFINE_OV_TYPEID_FUNCTIONS_AND_DATA (octave_list, "list");
 
 octave_value
-octave_list::subsref (const std::string type,
+octave_list::subsref (const std::string& type,
 		      const std::list<octave_value_list>& idx)
 {
   octave_value retval;
 
   switch (type[0])
     {
     case '(':
       {
@@ -110,17 +110,17 @@ octave_list::do_index_op (const octave_v
     }
   else
     error ("lists may only be indexed by a single scalar");
 
   return retval;
 }
 
 octave_value
-octave_list::subsasgn (const std::string type,
+octave_list::subsasgn (const std::string& type,
 		       const std::list<octave_value_list>& idx,
 		       const octave_value& rhs)
 {
   octave_value retval;
 
   int n = type.length ();
 
   octave_value t_rhs = rhs;
diff --git a/src/ov-list.h b/src/ov-list.h
--- a/src/ov-list.h
+++ b/src/ov-list.h
@@ -59,22 +59,22 @@ public:
   octave_list (const octave_list& l)
     : octave_base_value (), lst (l.lst) { }
 
   ~octave_list (void) { }
 
   octave_value *clone (void) const { return new octave_list (*this); }
   octave_value *empty_clone (void) const { return new octave_list (); }
 
-  octave_value subsref (const std::string type,
+  octave_value subsref (const std::string& type,
 			const std::list<octave_value_list>& idx);
 
   octave_value do_index_op (const octave_value_list& idx, int resize_ok);
 
-  octave_value subsasgn (const std::string type,
+  octave_value subsasgn (const std::string& type,
 			 const std::list<octave_value_list>& idx,
 			 const octave_value& rhs);
 
   void assign (const octave_value_list& idx, const octave_value& rhs);
 
   int length (void) const { return lst.length (); }
 
   bool is_defined (void) const { return true; }
diff --git a/src/ov-mapper.cc b/src/ov-mapper.cc
--- a/src/ov-mapper.cc
+++ b/src/ov-mapper.cc
@@ -239,17 +239,17 @@ octave_mapper::apply (const octave_value
     }
   else
     gripe_wrong_type_arg ("mapper", arg);
 
   return retval;
 }
 
 octave_value_list
-octave_mapper::subsref (const std::string type,
+octave_mapper::subsref (const std::string& type,
 			const std::list<octave_value_list>& idx,
 			int nargout)
 {
   octave_value_list retval;
 
   switch (type[0])
     {
     case '(':
diff --git a/src/ov-mapper.h b/src/ov-mapper.h
--- a/src/ov-mapper.h
+++ b/src/ov-mapper.h
@@ -61,17 +61,17 @@ public:
       d_d_map_fcn (dd), d_c_map_fcn (dc), c_c_map_fcn (cc),
       lower_limit (ll), upper_limit (ul), ch_map_flag (cmf),
       can_ret_cmplx_for_real (crcfr) { }
 
   ~octave_mapper (void) { }
 
   octave_function *function_value (bool) { return this; }
 
-  octave_value_list subsref (const std::string type,
+  octave_value_list subsref (const std::string& type,
 			     const std::list<octave_value_list>& idx,
 			     int nargout);
 
   octave_value_list
   do_multi_index_op (int nargout, const octave_value_list& args);
 
 private:
 
diff --git a/src/ov-range.cc b/src/ov-range.cc
--- a/src/ov-range.cc
+++ b/src/ov-range.cc
@@ -77,17 +77,17 @@ octave_range::try_narrowing_conversion (
     default:
       break;
     }
 
   return retval;
 }
 
 octave_value
-octave_range::subsref (const std::string type,
+octave_range::subsref (const std::string& type,
 		       const std::list<octave_value_list>& idx)
 {
   octave_value retval;
 
   switch (type[0])
     {
     case '(':
       retval = do_index_op (idx.front ());
diff --git a/src/ov-range.h b/src/ov-range.h
--- a/src/ov-range.h
+++ b/src/ov-range.h
@@ -80,17 +80,17 @@ public:
 
   octave_value *clone (void) const { return new octave_range (*this); }
   octave_value *empty_clone (void) const { return new octave_range (); }
 
   type_conv_fcn numeric_conversion_function (void) const;
 
   octave_value *try_narrowing_conversion (void);
 
-  octave_value subsref (const std::string type,
+  octave_value subsref (const std::string& type,
 			const std::list<octave_value_list>& idx);
 
   octave_value do_index_op (const octave_value_list& idx, int resize_ok);
 
   octave_value do_index_op (const octave_value_list& idx)
     { return do_index_op (idx, 0); }
 
   idx_vector index_vector (void) const { return idx_vector (range); }
diff --git a/src/ov-struct.cc b/src/ov-struct.cc
--- a/src/ov-struct.cc
+++ b/src/ov-struct.cc
@@ -81,17 +81,17 @@ gripe_invalid_index_type (const std::str
 
 static void
 gripe_failed_assignment (void)
 {
   error ("assignment to structure element failed");
 }
 
 octave_value
-octave_struct::subsref (const std::string type,
+octave_struct::subsref (const std::string& type,
 			const std::list<octave_value_list>& idx)
 {
   octave_value retval;
 
   int skip = 1;
 
   switch (type[0])
     {
@@ -176,17 +176,17 @@ octave_struct::numeric_conv (const octav
     }
   else
     gripe_invalid_index_for_assignment ();
 
   return retval;
 }
 
 octave_value
-octave_struct::subsasgn (const std::string type,
+octave_struct::subsasgn (const std::string& type,
 			 const std::list<octave_value_list>& idx,
 			 const octave_value& rhs)
 {
   octave_value retval;
 
   int n = type.length ();
 
   octave_value t_rhs = rhs;
diff --git a/src/ov-struct.h b/src/ov-struct.h
--- a/src/ov-struct.h
+++ b/src/ov-struct.h
@@ -64,23 +64,23 @@ public:
 
   ~octave_struct (void) { }
 
   octave_value *clone (void) const { return new octave_struct (*this); }
   octave_value *empty_clone (void) const { return new octave_struct (); }
 
   octave_value_list dotref (const octave_value_list& idx);
 
-  octave_value subsref (const std::string type,
+  octave_value subsref (const std::string& type,
 			const std::list<octave_value_list>& idx);
 
   static octave_value numeric_conv (const octave_value_list& val,
 				    const std::string& type);
 
-  octave_value subsasgn (const std::string type,
+  octave_value subsasgn (const std::string& type,
 			 const std::list<octave_value_list>& idx,
 			 const octave_value& rhs);
 
   int rows (void) const { return map.rows (); }
 
   int columns (void) const { return map.columns (); }
 
   int length (void) const
diff --git a/src/ov-usr-fcn.cc b/src/ov-usr-fcn.cc
--- a/src/ov-usr-fcn.cc
+++ b/src/ov-usr-fcn.cc
@@ -300,17 +300,17 @@ restore_args_passed (void *fcn)
 static void
 unprotect_function (void *sr_arg)
 {
   symbol_record *sr = static_cast<symbol_record *> (sr_arg);
   sr->unprotect ();
 }
 
 octave_value_list
-octave_user_function::subsref (const std::string type,
+octave_user_function::subsref (const std::string& type,
 			       const std::list<octave_value_list>& idx,
 			       int nargout)
 {
   octave_value_list retval;
 
   switch (type[0])
     {
     case '(':
diff --git a/src/ov-usr-fcn.h b/src/ov-usr-fcn.h
--- a/src/ov-usr-fcn.h
+++ b/src/ov-usr-fcn.h
@@ -138,17 +138,17 @@ public:
 	args_passed = octave_value_list ();
       else
 	{
 	  args_passed = saved_args.top ();
 	  saved_args.pop ();
 	}
     }
 
-  octave_value_list subsref (const std::string type,
+  octave_value_list subsref (const std::string& type,
 			     const std::list<octave_value_list>& idx,
 			     int nargout);
 
   octave_value_list
   do_multi_index_op (int nargout, const octave_value_list& args);
 
   void traceback_error (void);
 
diff --git a/src/ov.cc b/src/ov.cc
--- a/src/ov.cc
+++ b/src/ov.cc
@@ -567,28 +567,38 @@ octave_value::maybe_mutate (void)
       if (--rep->count == 0)
 	delete rep;
 
       rep = tmp;
       rep->count = 1;
     }    
 }
 
+octave_value
+octave_value::subsref (const std::string& type, const octave_value_list& idx)
+{
+  std::list<octave_value_list> i;
+
+  i.push_back (idx);
+
+  return rep->subsref (type, i);
+}
+
 octave_value_list
-octave_value::subsref (const std::string type,
+octave_value::subsref (const std::string& type,
 		       const std::list<octave_value_list>& idx, int nargout)
 {
   if (is_constant ())
     return rep->subsref (type, idx);
   else
     return rep->subsref (type, idx, nargout);
 }
 
 octave_value
-octave_value::next_subsref (const std::string type,
+octave_value::next_subsref (const std::string& type,
 			    const std::list<octave_value_list>& idx,
 			    size_t skip) 
 {
   if (idx.size () > skip)
     {
       std::list<octave_value_list> new_idx (idx);
       for (size_t i = 0; i < skip; i++)
 	new_idx.erase (new_idx.begin ());
@@ -627,25 +637,25 @@ gripe_assign_failed_or_no_method (const 
 				  const std::string& tn1,
 				  const std::string& tn2)
 {
   error ("assignment failed, or no method for `%s %s %s'",
 	 tn1.c_str (), on.c_str (), tn2.c_str ());
 }
 
 octave_value
-octave_value::subsasgn (const std::string type,
+octave_value::subsasgn (const std::string& type,
 			const std::list<octave_value_list>& idx,
 			const octave_value& rhs)
 {
   return rep->subsasgn (type, idx, rhs);
 }
 
 octave_value
-octave_value::assign (assign_op op, const std::string type,
+octave_value::assign (assign_op op, const std::string& type,
 		      const std::list<octave_value_list>& idx,
 		      const octave_value& rhs)
 {
   octave_value retval;
 
   make_unique ();
 
   octave_value t_rhs = rhs;
@@ -1078,17 +1088,17 @@ static void
 gripe_assign_conversion_failed (const std::string& tn1,
 				const std::string& tn2)
 {
   error ("type conversion for assignment of `%s' to indexed `%s' failed",
 	 tn2.c_str (), tn1.c_str ());
 }
 
 octave_value
-octave_value::numeric_assign (const std::string type,
+octave_value::numeric_assign (const std::string& type,
 			      const std::list<octave_value_list>& idx,
 			      const octave_value& rhs)
 {
   octave_value retval;
 
   int t_lhs = type_id ();
   int t_rhs = rhs.type_id ();
 
@@ -1431,17 +1441,17 @@ gripe_unary_op_failed_or_no_method (cons
 
 void
 octave_value::do_non_const_unary_op (unary_op op, const octave_value_list& idx)
 {
   abort ();
 }
 
 octave_value
-octave_value::do_non_const_unary_op (unary_op op, const std::string type,
+octave_value::do_non_const_unary_op (unary_op op, const std::string& type,
 				     const std::list<octave_value_list>& idx)
 {
   octave_value retval;
 
   if (idx.empty ())
     {
       do_non_const_unary_op (op);
 
diff --git a/src/ov.h b/src/ov.h
--- a/src/ov.h
+++ b/src/ov.h
@@ -238,52 +238,45 @@ public:
   virtual type_conv_fcn numeric_conversion_function (void) const
     { return rep->numeric_conversion_function (); }
 
   void maybe_mutate (void);
 
   virtual octave_value *try_narrowing_conversion (void)
     { return rep->try_narrowing_conversion (); }
 
-  virtual octave_value subsref (const std::string type,
+  virtual octave_value subsref (const std::string& type,
 				const std::list<octave_value_list>& idx)
     { return rep->subsref (type, idx); }
 
-  octave_value subsref (const std::string type, const octave_value_list& idx)
-    {
-      std::list<octave_value_list> i;
+  octave_value subsref (const std::string& type, const octave_value_list& idx);
 
-      i.push_back (idx);
-
-      return rep->subsref (type, i);
-    }
-
-  virtual octave_value_list subsref (const std::string type,
+  virtual octave_value_list subsref (const std::string& type,
 				     const std::list<octave_value_list>& idx,
     				     int nargout);
 
-  octave_value next_subsref (const std::string type, const
+  octave_value next_subsref (const std::string& type, const
 			     std::list<octave_value_list>& idx,
 			     size_t skip = 1);
 
   virtual octave_value do_index_op (const octave_value_list& idx,
 				    int resize_ok)
     { return rep->do_index_op (idx, resize_ok); }
 
   octave_value do_index_op (const octave_value_list& idx)
     { return do_index_op (idx, 0); }
 
   virtual octave_value_list
   do_multi_index_op (int nargout, const octave_value_list& idx);
 
-  virtual octave_value subsasgn (const std::string type,
+  virtual octave_value subsasgn (const std::string& type,
 				 const std::list<octave_value_list>& idx,
 				 const octave_value& rhs);
 
-  octave_value assign (assign_op op, const std::string type,
+  octave_value assign (assign_op op, const std::string& type,
 		       const std::list<octave_value_list>& idx,
 		       const octave_value& rhs);
 
   const octave_value& assign (assign_op, const octave_value& rhs);
 
   virtual idx_vector index_vector (void) const
     { return rep->index_vector (); }
 
@@ -523,17 +516,17 @@ public:
 
   friend octave_value do_unary_op (unary_op op,
 				   const octave_value& a);
 
   const octave_value& do_non_const_unary_op (unary_op op);
 
   void do_non_const_unary_op (unary_op op, const octave_value_list& idx);
 
-  octave_value do_non_const_unary_op (unary_op op, const std::string type,
+  octave_value do_non_const_unary_op (unary_op op, const std::string& type,
 				      const std::list<octave_value_list>& idx);
 
   friend octave_value do_binary_op (binary_op op,
 				    const octave_value& a,
 				    const octave_value& b);
 
   const octave_value& get_rep (void) const { return *rep; }
 
@@ -541,17 +534,17 @@ public:
 			   const std::string& prefix = std::string ()) const;
 
 protected:
 
   octave_value (const octave_xvalue&) : rep (0) { }
 
   // This should only be called for derived types.
 
-  octave_value numeric_assign (const std::string type,
+  octave_value numeric_assign (const std::string& type,
 			       const std::list<octave_value_list>& idx,
 			       const octave_value& rhs);
 
   void reset_indent_level (void) const
     { curr_print_indent_level = 0; }
 
   void increment_indent_level (void) const
     { curr_print_indent_level += 2; }
