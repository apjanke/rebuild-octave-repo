# HG changeset patch
# User CarnÃ« Draug <carandraug@octave.org>
# Date 1436543184 -3600
#      Fri Jul 10 16:46:24 2015 +0100
# Node ID a7770c66cb3d4d18cc2a4c6bffce1a2099e05bfe
# Parent  8e056730f27c9fb66e593f97fb9246a4d5a88794
Saturated red channel on RGB image, makes imread() return logical (bug #41584)

* libinterp/dldfcn/__magick_read__.cc (get_depth): this function tries to
  second guess GM when reporting the actual bitdepth of an image in the file
  (see comments for full discussion).  We assumed we could check only red
  from RGB but if the channel was saturated, it would return depth of 1, so
  we really need to check all 3 channels.  Unfortunately, 3 saturated channels
  may still lead to images incorrectly read as logical.
* scripts/image/imread.m: add test for this bug.

diff --git a/libinterp/dldfcn/__magick_read__.cc b/libinterp/dldfcn/__magick_read__.cc
--- a/libinterp/dldfcn/__magick_read__.cc
+++ b/libinterp/dldfcn/__magick_read__.cc
@@ -110,25 +110,30 @@ is_indexed (const Magick::Image& img)
 //  the channels and select the highest value. But then, I also
 //  have a 16bit TIFF whose depth returns 16 (correct), but all of the
 //  channels gives 8 (wrong). No idea why, maybe a bug in GM?
 //  Anyway, using depth() seems that only causes problems for binary
 //  images, and the problem with channelDepth() is not making set them
 //  all to 1. So we will guess that if all channels have depth of 1,
 //  then we must have a binary image.
 //  Note that we can't use AllChannels it doesn't work for this.
-//  Instead of checking all of the individual channels, we check one
-//  from RGB, CMYK, grayscale, and transparency.
+//  We also can't check only one from RGB, one from CMYK, and grayscale
+// and transparency, we really need to check all of the channels (bug #41584).
 static octave_idx_type
 get_depth (Magick::Image& img)
 {
   octave_idx_type depth = img.depth ();
   if (depth == 8
       && img.channelDepth (Magick::RedChannel)     == 1
+      && img.channelDepth (Magick::GreenChannel)   == 1
+      && img.channelDepth (Magick::BlueChannel)    == 1
       && img.channelDepth (Magick::CyanChannel)    == 1
+      && img.channelDepth (Magick::MagentaChannel) == 1
+      && img.channelDepth (Magick::YellowChannel)  == 1
+      && img.channelDepth (Magick::BlackChannel)   == 1
       && img.channelDepth (Magick::OpacityChannel) == 1
       && img.channelDepth (Magick::GrayChannel)    == 1)
     depth = 1;
 
   return depth;
 }
 
 // We need this in case one of the sides of the image being read has
diff --git a/scripts/image/imread.m b/scripts/image/imread.m
--- a/scripts/image/imread.m
+++ b/scripts/image/imread.m
@@ -103,17 +103,16 @@ function [img, varargout] = imread (file
     error ("imread: FILENAME must be a string");
   endif
 
   [img, varargout{1:nargout-1}] = ...
     imageIO ("imread", @__imread__, "read", filename, varargin{:});
 
 endfunction
 
-
 %!testif HAVE_MAGICK
 %! vpng = [ ...
 %!  137,  80,  78,  71,  13,  10,  26,  10,   0,   0, ...
 %!    0,  13,  73,  72,  68,  82,   0,   0,   0,   3, ...
 %!    0,   0,   0,   3,   8,   2,   0,   0,   0, 217, ...
 %!   74,  34, 232,   0,   0,   0,   1, 115,  82,  71, ...
 %!   66,   0, 174, 206,  28, 233,   0,   0,   0,   4, ...
 %!  103,  65,  77,  65,   0,   0, 177, 143,  11, 252, ...
@@ -135,32 +134,32 @@ endfunction
 %!   A = imread (filename);
 %! unwind_protect_cleanup
 %!   unlink (filename);
 %! end_unwind_protect
 %! assert (A(:,:,1), uint8 ([0, 255, 0; 255, 237, 255; 0, 255, 0]));
 %! assert (A(:,:,2), uint8 ([0, 255, 0; 255,  28, 255; 0, 255, 0]));
 %! assert (A(:,:,3), uint8 ([0, 255, 0; 255,  36, 255; 0, 255, 0]));
 
-%!function [r, cmap, a] = write_and_read (w, varargin)
-%!  filename = [tempname() ".tif"];
+%!function [r, cmap, a] = write_and_read (w, f_ext, varargin)
+%!  filename = [tempname() "." f_ext];
 %!  unwind_protect
 %!    imwrite (w, filename);
 %!    [r, cmap, a] = imread (filename, varargin{:});
 %!  unwind_protect_cleanup
 %!    unlink (filename);
 %!  end_unwind_protect
 %!endfunction
 
 ## test PixelRegion option
 %!testif HAVE_MAGICK
 %! w = randi (255, 100, 100, "uint8");
-%! [r, cmap, a] = write_and_read (w, "PixelRegion", {[50 70] [20 40]});
+%! [r, cmap, a] = write_and_read (w, "tif", "PixelRegion", {[50 70] [20 40]});
 %! assert (r, w(50:70, 20:40))
-%! [r, cmap, a] = write_and_read (w, "PixelRegion", {[50 2 70] [20 3 40]});
+%! [r, cmap, a] = write_and_read (w, "tif", "PixelRegion", {[50 2 70] [20 3 40]});
 %! assert (r, w(50:2:70, 20:3:40))
 
 ## If a file does not exist, it's the job of imread to check the file
 ## exists before sending it over to __imread__ or whatever function
 ## is defined in imformats to handle that specific format.  This is the
 ## same in imfinfo.  So in this test we replace one format in imformats
 ## with something that will not give an error if the file is missing
 ## and make sure we do get an error.
@@ -198,8 +197,17 @@ endfunction
 %!   assert (imread (fname, "jpg", extra_inputs{:}), {fname, extra_inputs{:}});
 %!   assert (imread (fname(1:end-4), "jpg", extra_inputs{:}), {fname, extra_inputs{:}});
 %! unwind_protect_cleanup
 %!   fclose (fid);
 %!   unlink (fname);
 %!   imformats (def_fmt);
 %! end_unwind_protect
 
+## Test for bug #41584 (some GM coders report saturated channels as binary)
+%!testif HAVE_MAGICK
+%! im = zeros ([16 16 3], "uint8");
+%! im(:,:,1) = 255;
+%! im(:,:,3) = repmat (0:16:255, [16 1]);
+%! [r, cmap, a] = write_and_read (im, "png");
+%! assert (class (r), "uint8");
+%! assert (isempty (cmap))
+%! assert (isempty (a))
