# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1444340481 14400
#      Thu Oct 08 17:41:21 2015 -0400
# Node ID 647db46ad754c61bfd363b4ea453e226378784cd
# Parent  7374a3a6d5946c3c259c59f9dccc5558d291d08c
eliminate more simple uses of error_state

* audioread.cc: Eliminate simple uses of error_state.

diff --git a/libinterp/dldfcn/audioread.cc b/libinterp/dldfcn/audioread.cc
--- a/libinterp/dldfcn/audioread.cc
+++ b/libinterp/dldfcn/audioread.cc
@@ -79,19 +79,16 @@ is stored in the audio file.\n\
   if (nargin < 1 || nargin > 3)
     {
       print_usage ();
       return retval;
     }
 
   std::string filename = args(0).string_value ();
 
-  if (error_state)
-    return retval;
-
   SF_INFO info;
   info.format = 0;
   SNDFILE *file = sf_open (filename.c_str (), SFM_READ, &info);
 
   if (! file)
     {
       error ("audioread: failed to open input file %s", filename.c_str ());
       return retval;
@@ -107,19 +104,16 @@ is stored in the audio file.\n\
 
   sf_count_t start = 0;
   sf_count_t end = info.frames;
 
   if ((nargin == 2 && ! args(1).is_string ()) || nargin == 3)
     {
       RowVector range = args(1).row_vector_value ();
 
-      if (error_state)
-        return retval;
-
       if (range.numel () != 2)
         {
           error ("audioread: invalid specification for range of frames");
           return retval;
         }
 
       double dstart = xisinf (range(0)) ? info.frames : range(0);
       double dend = xisinf (range(1)) ? info.frames : range(1);
@@ -154,19 +148,16 @@ is stored in the audio file.\n\
   if ((nargin == 2 && args(1).is_string ()) || nargin == 3)
     {
       std::string type;
       if (nargin == 3)
         type = args(2).string_value ();
       else
         type = args(1).string_value ();
 
-      if (error_state)
-        return retval;
-
       if (type == "native")
         {
           switch (info.format & SF_FORMAT_SUBMASK)
             {
             case SF_FORMAT_PCM_S8:
               ret_audio = int8NDArray (audio * 127);
               break;
             case SF_FORMAT_PCM_U8:
@@ -296,24 +287,18 @@ Comment.\n\
   if (nargin < 3)
     {
       print_usage ();
       return retval;
     }
 
   std::string filename = args(0).string_value ();
 
-  if (error_state)
-    return retval;
-
   Matrix audio = args(1).matrix_value ();
 
-  if (error_state)
-    return retval;
-
   double bias = 0.0;
   double scale = 1.0;
 
   if (args(1).is_uint8_type ())
     bias = scale = std::pow (2.0, 7);
   else if (args(1).is_int16_type ())
     scale = std::pow (2.0, 15);
   else if (args(1).is_int32_type ())
@@ -321,19 +306,16 @@ Comment.\n\
   else if (args(1).is_integer_type ())
     {
       gripe_wrong_type_arg ("audiowrite", args(1));
       return retval;
     }
 
   int samplerate = args(2).int_value ();
 
-  if (error_state)
-    return retval;
-
   std::string ext;
   size_t dotpos = filename.find_last_of (".");
   if (dotpos != std::string::npos)
     ext = filename.substr (dotpos + 1);
   std::transform (ext.begin (), ext.end (), ext.begin (), ::tolower);
 
   sf_count_t items_to_write = audio.rows () * audio.columns ();
 
@@ -493,19 +475,16 @@ Return information about an audio file s
   if (args.length () != 1)
     {
       print_usage ();
       return retval;
     }
 
   std::string filename = args(0).string_value ();
 
-  if (error_state)
-    return retval;
-
   SF_INFO info;
   info.format = 0;
   SNDFILE *file = sf_open (filename.c_str (), SFM_READ, &info);
 
   if (! file)
     {
       error ("audioinfo: failed to open file %s", filename.c_str ());
       return retval;
