# HG changeset patch
# User Markus MÃ¼tzel <markus.muetzel@gmx.de>
# Date 1471697178 -7200
#      Sat Aug 20 14:46:18 2016 +0200
# Node ID 2b1612cf38e464b2f1f4464b19c10a687b7b6733
# Parent  2e49ab3d6b481a4747f683bfed4b53ec5db0b001
gl-render.cc/.h: (minor)gridcolor and (minor)gridalpha for OpenGL toolkits (bug #48429)

* gl-render.cc (render_grid): Implement support of gridcolor, gridalpha,
  minorgridcolor and minorgridalpha.
* gl-render.cc (draw_axes_x_grid, draw_axes_y_grid, draw_axes_z_grid):
  Use gridcolor, gridalpha, minorgridcolor and minorgridalpha properties.
* gl-render.h (render_grid): Change declaration.

review and push by Andreas Weber <andy.weber.aw@gmail.com>

diff --git a/libinterp/corefcn/gl-render.cc b/libinterp/corefcn/gl-render.cc
--- a/libinterp/corefcn/gl-render.cc
+++ b/libinterp/corefcn/gl-render.cc
@@ -818,22 +818,24 @@ namespace octave
 
     panic_impossible ();
 
 #endif
   }
 
   void
   opengl_renderer::render_grid (const std::string& gridstyle,
+                                const Matrix& gridcolor, const double gridalpha,
                                 const Matrix& ticks, double lim1, double lim2,
                                 double p1, double p1N, double p2, double p2N,
                                 int xyz, bool is_3D)
   {
 #if defined (HAVE_OPENGL)
 
+    glColor4d (gridcolor(0), gridcolor(1), gridcolor(2), gridalpha);
     set_linestyle (gridstyle, true);
     glBegin (GL_LINES);
     for (int i = 0; i < ticks.numel (); i++)
       {
         double val = ticks(i);
         if (lim1 <= val && val <= lim2)
           {
             if (xyz == X_AXIS)
@@ -862,20 +864,24 @@ namespace octave
                 glVertex3d (p1, p2, val);
                 glVertex3d (p1, p2N, val);
                 glVertex3d (p1, p2, val);
               }
           }
       }
     glEnd ();
     set_linestyle ("-", true);
+    double black[3] = {0, 0, 0};
+    glColor3dv (black);
 
 #else
 
     octave_unused_parameter (gridstyle);
+    octave_unused_parameter (gridcolor);
+    octave_unused_parameter (gridalpha);
     octave_unused_parameter (ticks);
     octave_unused_parameter (lim1);
     octave_unused_parameter (lim2);
     octave_unused_parameter (p1);
     octave_unused_parameter (p1N);
     octave_unused_parameter (p2);
     octave_unused_parameter (p2N);
     octave_unused_parameter (xyz);
@@ -1313,33 +1319,37 @@ namespace octave
         double zPlaneN = props.get_zPlaneN ();
         double zpTick = props.get_zpTick ();
         double zpTickN = props.get_zpTickN ();
 
         // X grid
 
         std::string gridstyle = props.get_gridlinestyle ();
         std::string minorgridstyle = props.get_minorgridlinestyle ();
+        Matrix gridcolor = props.get_gridcolor_rgb ();
+        Matrix minorgridcolor = props.get_minorgridcolor_rgb ();
+        double gridalpha = props.get_gridalpha ();
+        double minorgridalpha = props.get_minorgridalpha ();
         bool do_xgrid = (props.is_xgrid () && (gridstyle != "none"));
         bool do_xminorgrid = (props.is_xminorgrid ()
                               && (minorgridstyle != "none"));
         bool do_xminortick = props.is_xminortick ();
         Matrix xticks = xform.xscale (props.get_xtick ().matrix_value ());
         Matrix xmticks = xform.xscale (props.get_xmtick ().matrix_value ());
         string_vector xticklabels = props.get_xticklabel ().string_vector_value ();
         int wmax = 0;
         int hmax = 0;
         bool tick_along_z = nearhoriz || octave::math::isinf (fy);
         bool mirror = props.is_box () && xstate != AXE_ANY_DIR;
 
         set_color (props.get_xcolor_rgb ());
 
         // grid lines
         if (do_xgrid)
-          render_grid (gridstyle, xticks, x_min, x_max,
+          render_grid (gridstyle, gridcolor, gridalpha, xticks, x_min, x_max,
                        yPlane, yPlaneN, layer2Dtop ? zPlaneN : zPlane,
                        zPlaneN, 0, (zstate != AXE_DEPTH_DIR));
 
         // tick marks
         if (tick_along_z)
           {
             render_tickmarks (xticks, x_min, x_max, ypTick, ypTick,
                               zpTick, zpTickN, 0., 0.,
@@ -1367,17 +1377,18 @@ namespace octave
             else
               render_ticktexts (xticks, xticklabels, x_min, x_max,
                                 ypTick+octave::math::signum (ypTick-ypTickN)*fy*xtickoffset,
                                 zpTick, 0, halign, valign, wmax, hmax);
           }
 
         // minor grid lines
         if (do_xminorgrid)
-          render_grid (minorgridstyle, xmticks, x_min, x_max,
+          render_grid (minorgridstyle, minorgridcolor, minorgridalpha,
+                       xmticks, x_min, x_max,
                        yPlane, yPlaneN, layer2Dtop ? zPlaneN : zPlane,
                        zPlaneN, 0, (zstate != AXE_DEPTH_DIR));
 
         // minor tick marks
         if (do_xminortick)
           {
             if (tick_along_z)
               render_tickmarks (xmticks, x_min, x_max, ypTick, ypTick,
@@ -1423,16 +1434,20 @@ namespace octave
         double zPlaneN = props.get_zPlaneN ();
         double zpTick = props.get_zpTick ();
         double zpTickN = props.get_zpTickN ();
 
         // Y grid
 
         std::string gridstyle = props.get_gridlinestyle ();
         std::string minorgridstyle = props.get_minorgridlinestyle ();
+        Matrix gridcolor = props.get_gridcolor_rgb ();
+        Matrix minorgridcolor = props.get_minorgridcolor_rgb ();
+        double gridalpha = props.get_gridalpha ();
+        double minorgridalpha = props.get_minorgridalpha ();
         bool do_ygrid = (props.is_ygrid () && (gridstyle != "none"));
         bool do_yminorgrid = (props.is_yminorgrid ()
                               && (minorgridstyle != "none"));
         bool do_yminortick = props.is_yminortick ();
         Matrix yticks = xform.yscale (props.get_ytick ().matrix_value ());
         Matrix ymticks = xform.yscale (props.get_ymtick ().matrix_value ());
         string_vector yticklabels = props.get_yticklabel ().string_vector_value ();
         int wmax = 0;
@@ -1440,17 +1455,17 @@ namespace octave
         bool tick_along_z = nearhoriz || octave::math::isinf (fx);
         bool mirror = props.is_box () && ystate != AXE_ANY_DIR
           && (! props.has_property ("__plotyy_axes__"));
 
         set_color (props.get_ycolor_rgb ());
 
         // grid lines
         if (do_ygrid)
-          render_grid (gridstyle, yticks, y_min, y_max,
+          render_grid (gridstyle, gridcolor, gridalpha, yticks, y_min, y_max,
                        xPlane, xPlaneN, layer2Dtop ? zPlaneN : zPlane,
                        zPlaneN, 1, (zstate != AXE_DEPTH_DIR));
 
         // tick marks
         if (tick_along_z)
           render_tickmarks (yticks, y_min, y_max, xpTick, xpTick,
                             zpTick, zpTickN, 0., 0.,
                             octave::math::signum (zpTick-zpTickN)*fz*yticklen,
@@ -1475,17 +1490,18 @@ namespace octave
             else
               render_ticktexts (yticks, yticklabels, y_min, y_max,
                                 xpTick+octave::math::signum (xpTick-xpTickN)*fx*ytickoffset,
                                 zpTick, 1, halign, valign, wmax, hmax);
           }
 
         // minor grid lines
         if (do_yminorgrid)
-          render_grid (minorgridstyle, ymticks, y_min, y_max,
+          render_grid (minorgridstyle, minorgridcolor, minorgridalpha,
+                       ymticks, y_min, y_max,
                        xPlane, xPlaneN, layer2Dtop ? zPlaneN : zPlane,
                        zPlaneN, 1, (zstate != AXE_DEPTH_DIR));
 
         // minor tick marks
         if (do_yminortick)
           {
             if (tick_along_z)
               render_tickmarks (ymticks, y_min, y_max, xpTick, xpTick,
@@ -1524,32 +1540,36 @@ namespace octave
         double yPlaneN = props.get_yPlaneN ();
         double z_min = props.get_z_min ();
         double z_max = props.get_z_max ();
 
         // Z Grid
 
         std::string gridstyle = props.get_gridlinestyle ();
         std::string minorgridstyle = props.get_minorgridlinestyle ();
+        Matrix gridcolor = props.get_gridcolor_rgb ();
+        Matrix minorgridcolor = props.get_minorgridcolor_rgb ();
+        double gridalpha = props.get_gridalpha ();
+        double minorgridalpha = props.get_minorgridalpha ();
         bool do_zgrid = (props.is_zgrid () && (gridstyle != "none"));
         bool do_zminorgrid = (props.is_zminorgrid ()
                               && (minorgridstyle != "none"));
         bool do_zminortick = props.is_zminortick ();
         Matrix zticks = xform.zscale (props.get_ztick ().matrix_value ());
         Matrix zmticks = xform.zscale (props.get_zmtick ().matrix_value ());
         string_vector zticklabels = props.get_zticklabel ().string_vector_value ();
         int wmax = 0;
         int hmax = 0;
         bool mirror = props.is_box () && zstate != AXE_ANY_DIR;
 
         set_color (props.get_zcolor_rgb ());
 
         // grid lines
         if (do_zgrid)
-          render_grid (gridstyle, zticks, z_min, z_max,
+          render_grid (gridstyle, gridcolor, gridalpha, zticks, z_min, z_max,
                        xPlane, xPlaneN, yPlane, yPlaneN, 2, true);
 
         // tick marks
         if (xySym)
           {
             if (octave::math::isinf (fy))
               render_tickmarks (zticks, z_min, z_max, xPlaneN, xPlane,
                                 yPlane, yPlane,
@@ -1602,17 +1622,18 @@ namespace octave
                   render_ticktexts (zticks, zticklabels, z_min, z_max,
                                     xPlane+octave::math::signum (xPlane-xPlaneN)*fx*ztickoffset,
                                     yPlaneN, 2, halign, valign, wmax, hmax);
               }
           }
 
         // minor grid lines
         if (do_zminorgrid)
-          render_grid (minorgridstyle, zmticks, z_min, z_max,
+          render_grid (minorgridstyle, minorgridcolor, minorgridalpha,
+                       zmticks, z_min, z_max,
                        xPlane, xPlaneN, yPlane, yPlaneN, 2, true);
 
         // minor tick marks
         if (do_zminortick)
           {
             if (xySym)
               {
                 if (octave::math::isinf (fy))
diff --git a/libinterp/corefcn/gl-render.h b/libinterp/corefcn/gl-render.h
--- a/libinterp/corefcn/gl-render.h
+++ b/libinterp/corefcn/gl-render.h
@@ -110,18 +110,19 @@ namespace octave
     virtual Matrix render_text (const std::string& txt,
                                 double x, double y, double z,
                                 int halign, int valign, double rotation = 0.0);
 
     virtual void draw_pixels (int w, int h, const float *data);
     virtual void draw_pixels (int w, int h, const uint8_t *data);
     virtual void draw_pixels (int w, int h, const uint16_t *data);
 
-    virtual void render_grid (const std::string& gridstyle, const Matrix& ticks,
-                              double lim1, double lim2,
+    virtual void render_grid (const std::string& gridstyle,
+                              const Matrix& gridcolor, const double gridalpha,
+                              const Matrix& ticks, double lim1, double lim2,
                               double p1, double p1N, double p2, double p2N,
                               int xyz, bool is_3D);
 
     virtual void render_tickmarks (const Matrix& ticks, double lim1, double lim2,
                                    double p1, double p1N, double p2, double p2N,
                                    double dx, double dy, double dz,
                                    int xyz, bool doubleside);
 
