# HG changeset patch
# User Rik <rdrider0-list@yahoo.com>
# Date 1244338252 25200
#      Sat Jun 06 18:30:52 2009 -0700
# Node ID c2923c27c8771fb4cbf063427b217567fb3e200f
# Parent  de124edcebf6945dcaf682deb6821ba00e45d2f9
Various documentation improvements

diff --git a/doc/interpreter/package.txi b/doc/interpreter/package.txi
--- a/doc/interpreter/package.txi
+++ b/doc/interpreter/package.txi
@@ -35,17 +35,17 @@ website for an updated reference.
 * Administrating Packages::     
 * Creating Packages::           
 @end menu
 
 @findex pkg
 @node Installing and Removing Packages
 @section Installing and Removing Packages
 
-Assuming a package is available in the file @code{image-1.0.0.tar.gz}
+Assuming a package is available in the file @file{image-1.0.0.tar.gz}
 it can be installed from the Octave prompt with the command
 
 @example
 pkg install image-1.0.0.tar.gz
 @end example
 
 @noindent
 If the package is installed successfully nothing will be printed on
@@ -134,19 +134,19 @@ pkg load package_name
 
 @node Administrating Packages
 @section Administrating Packages
 
 On UNIX-like systems it is possible to make both per-user and
 system-wide installations of a package.  If the user performing the
 installation is @code{root} the packages will be installed in a
 system-wide directory that defaults to 
-@code{OCTAVE_HOME/share/octave/packages/}.  If the user is not 
+@file{OCTAVE_HOME/share/octave/packages/}.  If the user is not 
 @code{root} the default installation directory is
-@code{~/octave/}.  Packages will be installed in a subdirectory of the
+@file{~/octave/}.  Packages will be installed in a subdirectory of the
 installation directory that will be named after the package.  It is
 possible to change the installation directory by using the
 @code{pkg prefix} command
 
 @example
 pkg prefix new_installation_directory
 @end example
 
@@ -154,19 +154,19 @@ pkg prefix new_installation_directory
 The current installation directory can be retrieved by typing
 
 @example
 current_installation_directory = pkg prefix
 @end example
 
 To function properly the package manager needs to keep some
 information about the installed packages.  For per-user packages this
-information is by default stored in the file @code{~/.octave_packages}
+information is by default stored in the file @file{~/.octave_packages}
 and for system-wide installations it is stored in
-@code{OCTAVE_HOME/share/octave/octave_packages}.  The path to the
+@file{OCTAVE_HOME/share/octave/octave_packages}.  The path to the
 per-user file can be changed with the @code{pkg local_list} command
 
 @example
 pkg local_list /path/to/new_file
 @end example
 
 @noindent
 For system-wide installations this can be changed in the same way
@@ -252,22 +252,22 @@ more of the following directories
 @table @code
 @item package/inst
 An optional directory containing any files that are directly installed
 by the package.  Typically this will include any @code{m}-files. 
 
 @item package/src
 An optional directory containing code that must be built prior to the
 packages installation.  The Octave package manager will execute
-@code{./configure} in this directory if this script exists, and will
-then call @code{make} if a file @code{Makefile} exists in this
+@file{./configure} in this directory if this script exists, and will
+then call @code{make} if a file @file{Makefile} exists in this
 directory.  @code{make install} will however not be called.  If a file
-called @code{FILES} exist all files listed there will be copied to the
+called @code{FILES} exists all files listed there will be copied to the
 @code{inst} directory, so they also will be installed.  If the
-@code{FILES} file doesn't exist, @code{src/*.m} and @code{src/*.oct}
+@code{FILES} file doesn't exist, @file{src/*.m} and @file{src/*.oct}
 will be copied to the @code{inst} directory.
 
 @item package/doc
 An optional directory containing documentation for the package.  The
 files in this directory will be directly installed in a sub-directory
 of the installed package for future reference.
 
 @item package/bin
@@ -287,17 +287,17 @@ external scripts, etc., called by functi
 
 The @code{DESCRIPTION} file contains various information about the
 package, such as its name, author, and version.  This file has a very
 simple format
 
 @noindent
 @itemize
 @item
-Lines starting with @code{#} are comments.
+Lines starting with @samp{#} are comments.
 
 @item
 Lines starting with a blank character are continuations from the 
 previous line.
 
 @item
 Everything else is of the form @code{NameOfOption: ValueOfOption}.
 @end itemize
@@ -421,17 +421,17 @@ name will be used instead.
 @node The INDEX file
 @subsection The INDEX file
 
 The optional @code{INDEX} file provides a categorical view of the
 functions in the package.  This file has a very simple format
 
 @noindent
 @itemize
-@item Lines beginning with @code{#} are comments.
+@item Lines beginning with @samp{#} are comments.
 
 @item The first non-comment line should look like this
 
 @example
 toolbox >> Toolbox name
 @end example
 
 @item Lines beginning with an alphabetical character indicates a new
diff --git a/doc/interpreter/var.txi b/doc/interpreter/var.txi
--- a/doc/interpreter/var.txi
+++ b/doc/interpreter/var.txi
@@ -260,17 +260,17 @@ endfunction
 @end example
 
 @noindent
 This implementation behaves in exactly the same way as the previous
 implementation of @code{count_calls}.
 
 The value of a persistent variable is kept in memory until it is
 explicitly cleared.  Assuming that the implementation of @code{count_calls}
-is saved on disc, we get the following behavior.
+is saved on disk, we get the following behavior.
 
 @example
 for i = 1:2
   count_calls ();
 endfor
 @print{} 'count_calls' has been called 1 times
 @print{} 'count_calls' has been called 2 times
 
diff --git a/scripts/linear-algebra/cond.m b/scripts/linear-algebra/cond.m
--- a/scripts/linear-algebra/cond.m
+++ b/scripts/linear-algebra/cond.m
@@ -19,17 +19,17 @@
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} cond (@var{a},@var{p})
 ## Compute the @var{p}-norm condition number of a matrix.  @code{cond (@var{a})} is
 ## defined as @code{norm (@var{a}, @var{p}) * norm (inv (@var{a}), @var{p})}.
 ## By default @code{@var{p}=2} is used which implies a (relatively slow)
 ## singular value decomposition.  Other possible selections are 
 ## @code{@var{p}= 1, Inf, inf, 'Inf', 'fro'} which are generally faster.
-## @seealso{norm, inv, det, svd, rank}
+## @seealso{condest, rcond, norm, svd}
 ## @end deftypefn
 
 ## Author: jwe
 
 function retval = cond (a, p)
 
   if (nargin && nargin < 3)
     if (ndims (a) > 2)
diff --git a/scripts/linear-algebra/condest.m b/scripts/linear-algebra/condest.m
--- a/scripts/linear-algebra/condest.m
+++ b/scripts/linear-algebra/condest.m
@@ -56,17 +56,17 @@
 ## for Matrix 1-Norm Estimation, with an Application to 1-Norm
 ## Pseudospectra." SIMAX vol 21, no 4, pp 1185-1201.
 ## @url{http://dx.doi.org/10.1137/S0895479899356080}
 ## @item Nicholas J. Higham and Fran√ßoise Tisseur, "A Block Algorithm
 ## for Matrix 1-Norm Estimation, with an Application to 1-Norm
 ## Pseudospectra." @url{http://citeseer.ist.psu.edu/223007.html}
 ## @end itemize
 ##
-## @seealso{norm, cond, onenormest}
+## @seealso{cond, norm, onenormest}
 ## @end deftypefn
 
 ## Code originally licensed under
 ##
 ##  Copyright (c) 2007, Regents of the University of California
 ##  All rights reserved.
 ##
 ##  Redistribution and use in source and binary forms, with or without
diff --git a/scripts/pkg/pkg.m b/scripts/pkg/pkg.m
--- a/scripts/pkg/pkg.m
+++ b/scripts/pkg/pkg.m
@@ -24,17 +24,17 @@
 ##
 ## @table @samp
 ## @item install
 ## Install named packages.  For example,
 ## @example
 ## pkg install image-1.0.0.tar.gz
 ## @end example
 ## @noindent
-## installs the package found in the file @code{image-1.0.0.tar.gz}.
+## installs the package found in the file @file{image-1.0.0.tar.gz}.
 ##
 ## The @var{option} variable can contain options that affect the manner
 ## in which a package is installed.  These options can be one or more of
 ##
 ## @table @code
 ## @item -nodeps
 ## The package manager will disable the dependency checking.  That way it 
 ## is possible to install a package even if it depends on another package 
@@ -125,17 +125,17 @@
 ## @var{flag} will take one of the values "Not installed", "Loaded" or
 ## "Not loaded" for each of the named packages.
 ## @item prefix
 ## Set the installation prefix directory.  For example,
 ## @example
 ## pkg prefix ~/my_octave_packages
 ## @end example
 ## @noindent
-## sets the installation prefix to @code{~/my_octave_packages}.
+## sets the installation prefix to @file{~/my_octave_packages}.
 ## Packages will be installed in this directory.
 ##
 ## It is possible to get the current installation prefix by requesting an
 ## output argument.  For example,
 ## @example
 ## p = pkg prefix
 ## @end example
 ##
diff --git a/scripts/plot/gtext.m b/scripts/plot/gtext.m
--- a/scripts/plot/gtext.m
+++ b/scripts/plot/gtext.m
@@ -12,25 +12,24 @@
 ## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
-## @deftypefn {Function File} {} gtext (@var{s})
+## @deftypefn  {Function File} {} gtext (@var{s})
+## @deftypefnx {Function File} {} gtext (@{@var{s1}; @var{s2}; @dots{}@})
 ## @deftypefnx {Function File} {} gtext (@dots{}, @var{prop}, @var{val})
-## Place text on the current figure.  The text can be defined by the
-## string @var{s}.  If @var{s} is a cell array, each element of the cell
-## array is written to a separate line.
-##
-## Additional arguments are passed to the underlying text object as
-## properties.
-## @seealso{ginput}
+## Place text on the current figure using the mouse.  The text is defined
+## by the string @var{s}.  If @var{s} is a cell array, each element of the cell
+## array is written to a separate line.  Additional arguments are passed to
+## the underlying text object as properties.
+## @seealso{ginput, text}
 ## @end deftypefn
 
 function gtext (s, varargin)
 
   if (nargin > 0)
     if (iscellstr (s))
       if (isempty (s))
 	s = "";
diff --git a/src/DLD-FUNCTIONS/cellfun.cc b/src/DLD-FUNCTIONS/cellfun.cc
--- a/src/DLD-FUNCTIONS/cellfun.cc
+++ b/src/DLD-FUNCTIONS/cellfun.cc
@@ -895,19 +895,19 @@ cellfun (@@factorial, @{-1,2@},'ErrorHan
 %! assert(a,{fullfile("a","b"),fullfile("e","f")})
 %! assert(b,{'c','g'})
 %! assert(c,{'.d','.h'})
 
 */
 
 DEFUN_DLD (num2cell, args, ,
   "-*- texinfo -*-\n\
-@deftypefn {Loadable Function} {@var{c} =} num2cell (@var{m})\n\
+@deftypefn  {Loadable Function} {@var{c} =} num2cell (@var{m})\n\
 @deftypefnx {Loadable Function} {@var{c} =} num2cell (@var{m}, @var{dim})\n\
-Convert the matrix @var{m} into a cell array.  If @var{dim} is defined, the\n\
+Convert the matrix @var{m} to a cell array.  If @var{dim} is defined, the\n\
 value @var{c} is of dimension 1 in this dimension and the elements of\n\
 @var{m} are placed in slices in @var{c}.\n\
 @seealso{mat2cell}\n\
 @end deftypefn") 
 {
   int nargin =  args.length();
   octave_value retval;
 
diff --git a/src/DLD-FUNCTIONS/eig.cc b/src/DLD-FUNCTIONS/eig.cc
--- a/src/DLD-FUNCTIONS/eig.cc
+++ b/src/DLD-FUNCTIONS/eig.cc
@@ -31,27 +31,28 @@ along with Octave; see the file COPYING.
 #include "defun-dld.h"
 #include "error.h"
 #include "gripes.h"
 #include "oct-obj.h"
 #include "utils.h"
 
 DEFUN_DLD (eig, args, nargout,
   "-*- texinfo -*-\n\
-@deftypefn {Loadable Function} {@var{lambda} =} eig (@var{a})\n\
+@deftypefn  {Loadable Function} {@var{lambda} =} eig (@var{a})\n\
 @deftypefnx {Loadable Function} {@var{lambda} =} eig (@var{a}, @var{b})\n\
 @deftypefnx {Loadable Function} {[@var{v}, @var{lambda}] =} eig (@var{a})\n\
 @deftypefnx {Loadable Function} {[@var{v}, @var{lambda}] =} eig (@var{a}, @var{b})\n\
 The eigenvalues (and eigenvectors) of a matrix are computed in a several\n\
 step process which begins with a Hessenberg decomposition, followed by a\n\
 Schur decomposition, from which the eigenvalues are apparent.  The\n\
 eigenvectors, when desired, are computed by further manipulations of the\n\
 Schur decomposition.\n\
 \n\
 The eigenvalues returned by @code{eig} are not ordered.\n\
+@seealso{eigs}\n\
 @end deftypefn")
 {
   octave_value_list retval;
 
   int nargin = args.length ();
 
   if (nargin > 2 || nargin == 0 || nargout > 2)
     {
diff --git a/src/strfns.cc b/src/strfns.cc
--- a/src/strfns.cc
+++ b/src/strfns.cc
@@ -38,39 +38,47 @@ along with Octave; see the file COPYING.
 #include "gripes.h"
 #include "ov.h"
 #include "oct-obj.h"
 #include "unwind-prot.h"
 #include "utils.h"
 
 DEFUN (char, args, ,
   "-*- texinfo -*-\n\
-@deftypefn {Built-in Function} {} char (@var{x})\n\
+@deftypefn  {Built-in Function} {} char (@var{x})\n\
+@deftypefnx {Built-in Function} {} char (@var{x}, @dots{})\n\
+@deftypefnx {Built-in Function} {} char (@var{s1}, @var{s2}, @dots{})\n\
 @deftypefnx {Built-in Function} {} char (@var{cell_array})\n\
-@deftypefnx {Built-in Function} {} char (@var{s1}, @var{s2}, @dots{})\n\
 Create a string array from one or more numeric matrices, character\n\
-matrices or cell arrays.  For numerical input, each element is converted\n\
-to the corresponding ASCII character.  The arguments (and elements of\n\
-cell array(s)) are concatenated vertically.\n\
+matrices, or cell arrays.  Arguments are concatenated vertically.\n\
 The returned values are padded with blanks as needed to make each row\n\
-of the string array have the same length.  Empty strings are not removed.\n\
+of the string array have the same length.  Empty input strings are\n\
+significant and will concatenated in the output.\n\
+\n\
+For numerical input, each element is converted\n\
+to the corresponding ASCII character.  A range error results if an input\n\
+is outside the ASCII range (0-255).\n\
+\n\
+For cell arrays, each element is concatenated separately.  Cell arrays converted through\n\
+@code{char} can mostly be converted back with @code{cellstr}.\n\
 For example,\n\
 \n\
 @example\n\
 @group\n\
-char ([97, 98, 99], \"\", @{\"98\", \"99\", 100@}, [\"num\", \"bers\"])\n\
+char ([97, 98, 99], \"\", @{\"98\", \"99\", 100@}, \"str1\", [\"ha\", \"lf\"])\n\
      @result{} [\"abc    \"\n\
-        \"       \"\n\
-        \"98     \"\n\
-        \"99     \"\n\
-        \"d      \"\n\
-        \"numbers\"]\n\
+         \"       \"\n\
+         \"98     \"\n\
+         \"99     \"\n\
+         \"d      \"\n\
+         \"str1   \"\n\
+         \"half   \"]\n\
 @end group\n\
 @end example\n\
-\n\
+@seealso{strvcat, cellstr}\n\
 @end deftypefn")
 {
   octave_value retval;
 
   int nargin = args.length ();
 
   if (nargin == 1)
     retval = args(0).convert_to_str (true, true,
@@ -153,39 +161,45 @@ char ([97, 98, 99], \"\", @{\"98\", \"99
 %!assert (all(char ({100, [], 100}) == ["d";" ";"d"]))
 %!assert (all(char ({100,{100, {""}}}) == ["d";"d";" "]))
 %!assert (all(char (["a";"be"], {"c", 100}) == ["a";"be";"c";"d"]))
 %!assert(strcmp (char ("a", "bb", "ccc"), ["a  "; "bb "; "ccc"]));
 */
 
 DEFUN (strvcat, args, ,
   "-*- texinfo -*-\n\
-@deftypefn {Built-in Function} {} strvcat (@var{x})\n\
+@deftypefn  {Built-in Function} {} strvcat (@var{x})\n\
+@deftypefnx {Built-in Function} {} strvcat (@var{x}, @dots{})\n\
+@deftypefnx {Built-in Function} {} strvcat (@var{s1}, @var{s2}, @dots{})\n\
 @deftypefnx {Built-in Function} {} strvcat (@var{cell_array})\n\
-@deftypefnx {Built-in Function} {} strvcat (@var{s1}, @var{s2}, @dots{})\n\
 Create a character array from one or more numeric matrices, character\n\
-matrices or cell arrays.  For numerical input, each element is converted\n\
-to the corresponding ASCII character.  The arguments (and elements of\n\
-cell array(s)) are concatenated vertically.\n\
+matrices, or cell arrays.  Arguments are concatenated vertically.\n\
 The returned values are padded with blanks as needed to make each row\n\
 of the string array have the same length.  Unlike @code{char}, empty\n\
-strings are removed.\n\
+strings are removed and will not appear in the output.\n\
+\n\
+For numerical input, each element is converted\n\
+to the corresponding ASCII character.  A range error results if an input\n\
+is outside the ASCII range (0-255).\n\
+\n\
+For cell arrays, each element is concatenated separately.  Cell arrays converted through\n\
+@code{strvcat} can mostly be converted back with @code{cellstr}.\n\
 For example,\n\
 \n\
 @example\n\
 @group\n\
-strvcat ([97, 98, 99], \"\", @{\"98\", \"99\", 100@}, [\"num\", \"bers\"])\n\
+strvcat ([97, 98, 99], \"\", @{\"98\", \"99\", 100@}, \"str1\", [\"ha\", \"lf\"])\n\
      @result{} [\"abc    \"\n\
-        \"98     \"\n\
-        \"99     \"\n\
-        \"d      \"\n\
-        \"numbers\"]\n\
+         \"98     \"\n\
+         \"99     \"\n\
+         \"d      \"\n\
+         \"str1   \"\n\
+         \"half   \"]\n\
 @end group\n\
 @end example\n\
-\n\
 @seealso{char, strcat, cstrcat}\n\
 @end deftypefn")
 {
   octave_value retval;
 
   int nargin = args.length ();
 
   if (nargin > 0)
