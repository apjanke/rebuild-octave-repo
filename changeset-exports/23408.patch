# HG changeset patch
# User Rik <rik@octave.org>
# Date 1492541964 25200
#      Tue Apr 18 11:59:24 2017 -0700
# Node ID 0af9a1ae09120c3c60419e2a4bea33885c616201
# Parent  e265ae9e7a6ca04b704bc44f0bee10281600dce5
maint: Use std::copy_n and std::fill_n for dim_vectors and idx_vectors.

* Sparse.h (SparseRep constructors): Use C++ value-initialization rather than
explicit loops to initialize arrays to 0.
* Sparse.h: Use std::copy_n rather than std::copy where it seems to make more
intuitive sense.

* dim-vector.cc (chop_all_singletons): Rename local variable l to nd for clarity.
* dim-vector.cc (redim): Replace for loops with std::copy_n and std::fill_n.

* dim-vector.h (clonerep): Rename local variable l to nd for clarity.
Replace for loop with std::copy_n.
* dim-vector.h (resizerep): Rename local variable l to nd for clarity.
Replace for loops with std::copy_n and std::fill_n.
* dim-vector.h (chop_trailing_singletons):Rename local variable l to nd for clarity.

* idx-vector.cc (idx_vector_rep::print, idx_mask_rep::print): Rename local
 variable ii to just i.
* idx-vector.cc (complement): Replace for loop with std::fill_n.

diff --git a/liboctave/array/Sparse.h b/liboctave/array/Sparse.h
--- a/liboctave/array/Sparse.h
+++ b/liboctave/array/Sparse.h
@@ -26,24 +26,23 @@ along with Octave; see the file COPYING.
 #if ! defined (octave_Sparse_h)
 #define octave_Sparse_h 1
 
 #include "octave-config.h"
 
 #include <cassert>
 #include <cstddef>
 
+#include <algorithm>
 #include <iosfwd>
-#include <algorithm>
 
 #include "Array.h"
 #include "dim-vector.h"
 #include "lo-error.h"
 #include "lo-utils.h"
-
 #include "oct-sort.h"
 
 class idx_vector;
 class PermMatrix;
 
 // Two dimensional sparse class.  Handles the reference counting for
 // all the derived classes.
 
@@ -68,55 +67,41 @@ protected:
     octave_idx_type *r;
     octave_idx_type *c;
     octave_idx_type nzmx;
     octave_idx_type nrows;
     octave_idx_type ncols;
     octave::refcount<int> count;
 
     SparseRep (void)
-      : d (0), r (0), c (new octave_idx_type [1]), nzmx (0), nrows (0),
+      : d (0), r (0), c (new octave_idx_type [1] {}), nzmx (0), nrows (0),
         ncols (0), count (1)
-    {
-      c[0] = 0;
-    }
+    { }
 
     SparseRep (octave_idx_type n)
-      : d (0), r (0), c (new octave_idx_type [n+1]), nzmx (0), nrows (n),
+      : d (0), r (0), c (new octave_idx_type [n+1] {}), nzmx (0), nrows (n),
         ncols (n), count (1)
-    {
-      for (octave_idx_type i = 0; i < n + 1; i++)
-        c[i] = 0;
-    }
+    { }
 
     SparseRep (octave_idx_type nr, octave_idx_type nc, octave_idx_type nz = 0)
-      : d (nz > 0 ? new T [nz] : 0),
-        r (nz > 0 ? new octave_idx_type [nz] : 0),
-        c (new octave_idx_type [nc+1]), nzmx (nz), nrows (nr),
+      : d (nz > 0 ? new T [nz] {} : 0),
+        r (nz > 0 ? new octave_idx_type [nz] {} : 0),
+        c (new octave_idx_type [nc+1] {}), nzmx (nz), nrows (nr),
         ncols (nc), count (1)
-    {
-      for (octave_idx_type i = 0; i < nz; i++)
-        d[i] = T ();
-
-      for (octave_idx_type i = 0; i < nz; i++)
-        r[i] = 0;
-
-      for (octave_idx_type i = 0; i < nc + 1; i++)
-        c[i] = 0;
-    }
+    { }
 
     SparseRep (const SparseRep& a)
       : d (new T [a.nzmx]), r (new octave_idx_type [a.nzmx]),
         c (new octave_idx_type [a.ncols + 1]),
         nzmx (a.nzmx), nrows (a.nrows), ncols (a.ncols), count (1)
     {
       octave_idx_type nz = a.nnz ();
-      std::copy (a.d, a.d + nz, d);
-      std::copy (a.r, a.r + nz, r);
-      std::copy (a.c, a.c + ncols + 1, c);
+      std::copy_n (a.d, nz, d);
+      std::copy_n (a.r, nz, r);
+      std::copy_n (a.c, ncols + 1, c);
     }
 
     ~SparseRep (void) { delete [] d; delete [] r; delete [] c; }
 
     octave_idx_type length (void) const { return nzmx; }
 
     octave_idx_type nnz (void) const { return c[ncols]; }
 
diff --git a/liboctave/array/dim-vector.cc b/liboctave/array/dim-vector.cc
--- a/liboctave/array/dim-vector.cc
+++ b/liboctave/array/dim-vector.cc
@@ -50,19 +50,19 @@ dim_vector::dim_max (void)
 }
 
 void
 dim_vector::chop_all_singletons (void)
 {
   make_unique ();
 
   int j = 0;
-  int l = ndims ();
+  int nd = ndims ();
 
-  for (int i = 0; i < l; i++)
+  for (int i = 0; i < nd; i++)
     {
       if (rep[i] != 1)
         rep[j++] = rep[i];
     }
 
   if (j == 1)
     rep[1] = 1;
 
@@ -277,36 +277,36 @@ dim_vector::redim (int n) const
   int n_dims = ndims ();
 
   if (n_dims == n)
     return *this;
   else if (n_dims < n)
     {
       dim_vector retval = alloc (n);
 
-      for (int i = 0; i < n_dims; i++)
-        retval.rep[i] = rep[i];
-
-      for (int i = n_dims; i < n; i++)
-        retval.rep[i] = 1;
+      std::copy_n (rep, n_dims, retval.rep);
+      std::fill_n (retval.rep + n_dims, n - n_dims, 1);
 
       return retval;
     }
   else
     {
-      if (n < 1) n = 1;
+      if (n < 1)
+        n = 1;
 
       dim_vector retval = alloc (n);
 
-      retval.rep[1] = 1;
+      std::copy_n (rep, n-1, retval.rep);
 
-      for (int i = 0; i < n-1; i++)
-        retval.rep[i] = rep[i];
-
+      // Accumulate overflow dimensions into last remaining dimension
       int k = rep[n-1];
       for (int i = n; i < n_dims; i++)
         k *= rep[i];
 
       retval.rep[n-1] = k;
 
+      // All dim_vectors are at least 2-D.  Make Nx1 if necessary.
+      if (n == 1)
+        retval.rep[1] = 1;
+
       return retval;
     }
 }
diff --git a/liboctave/array/dim-vector.h b/liboctave/array/dim-vector.h
--- a/liboctave/array/dim-vector.h
+++ b/liboctave/array/dim-vector.h
@@ -23,16 +23,17 @@ along with Octave; see the file COPYING.
 
 #if ! defined (octave_dim_vector_h)
 #define octave_dim_vector_h 1
 
 #include "octave-config.h"
 
 #include <cassert>
 
+#include <algorithm>
 #include <initializer_list>
 #include <string>
 
 #include "lo-error.h"
 #include "oct-refcount.h"
 
 //! Vector representing the dimensions (size) of an Array.
 /*!
@@ -104,45 +105,41 @@ private:
 
     return r;
   }
 
   //! Clone this->rep.
 
   octave_idx_type *clonerep (void)
   {
-    int l = ndims ();
+    int nd = ndims ();
 
-    octave_idx_type* r = newrep (l);
+    octave_idx_type* r = newrep (nd);
 
-    for (int i = 0; i < l; i++)
-      r[i] = rep[i];
+    std::copy_n (rep, nd, r);
 
     return r;
   }
 
   //! Clone and resize this->rep to length n, filling by given value.
 
   octave_idx_type *resizerep (int n, octave_idx_type fill_value)
   {
-    int l = ndims ();
+    int nd = ndims ();
 
     if (n < 2)
       n = 2;
 
     octave_idx_type* r = newrep (n);
 
-    if (l > n)
-      l = n;
+    if (nd > n)
+      nd = n;
 
-    int j = 0;
-    for (; j < l; j++)
-      r[j] = rep[j];
-    for (; j < n; j++)
-      r[j] = fill_value;
+    std::copy_n (rep, nd, r);
+    std::fill_n (r + nd, n - nd, fill_value);
 
     return r;
   }
 
   //! Free the rep.
 
   void freerep (void)
   {
@@ -233,24 +230,24 @@ public:
 #if defined (OCTAVE_ENABLE_BOUNDS_CHECK)
     assert (i >= 0 && i < ndims ());
 #endif
     return xelem (i);
   }
 
   void chop_trailing_singletons (void)
   {
-    int l = ndims ();
-    if (l > 2 && rep[l-1] == 1)
+    int nd = ndims ();
+    if (nd > 2 && rep[nd-1] == 1)
       {
         make_unique ();
         do
-          l--;
-        while (l > 2 && rep[l-1] == 1);
-        rep[-1] = l;
+          nd--;
+        while (nd > 2 && rep[nd-1] == 1);
+        rep[-1] = nd;
       }
   }
 
   void chop_all_singletons (void);
 
   // WARNING: Only call by jit
   octave_idx_type *to_jit (void) const
   {
diff --git a/liboctave/array/idx-vector.cc b/liboctave/array/idx-vector.cc
--- a/liboctave/array/idx-vector.cc
+++ b/liboctave/array/idx-vector.cc
@@ -591,18 +591,18 @@ idx_vector::idx_vector_rep::sort_idx (Ar
   return new_rep.release ();
 }
 
 std::ostream&
 idx_vector::idx_vector_rep::print (std::ostream& os) const
 {
   os << '[';
 
-  for (octave_idx_type ii = 0; ii < len - 1; ii++)
-    os << data[ii] << ',' << ' ';
+  for (octave_idx_type i = 0; i < len - 1; i++)
+    os << data[i] << ',' << ' ';
 
   if (len > 0)
     os << data[len-1];
 
   os << ']';
 
   return os;
 }
@@ -708,18 +708,18 @@ idx_vector::idx_mask_rep::checkelem (oct
   return xelem (n);
 }
 
 std::ostream&
 idx_vector::idx_mask_rep::print (std::ostream& os) const
 {
   os << '[';
 
-  for (octave_idx_type ii = 0; ii < ext - 1; ii++)
-    os << data[ii] << ',' << ' ';
+  for (octave_idx_type i = 0; i < ext - 1; i++)
+    os << data[i] << ',' << ' ';
 
   if (ext > 0)
     os << data[ext-1];
 
   os << ']';
 
   return os;
 }
@@ -1116,18 +1116,17 @@ idx_vector::complement (octave_idx_type 
       idx_mask_rep * r = dynamic_cast<idx_mask_rep *> (rep);
       octave_idx_type nz = r->length (0);
       octave_idx_type ext = r->extent (0);
       Array<bool> mask (dim_vector (n, 1));
       const bool *data = r->get_data ();
       bool *ndata = mask.fortran_vec ();
       for (octave_idx_type i = 0; i < ext; i++)
         ndata[i] = ! data[i];
-      for (octave_idx_type i = ext; i < n; i++)
-        ndata[i] = true;
+      std::fill_n (ndata + ext, n - ext, true);
       retval = new idx_mask_rep (mask, n - nz);
     }
   else
     {
       Array<bool> mask (dim_vector (n, 1), true);
       fill (false, length (n), mask.fortran_vec ());
       retval = idx_vector (mask);
     }
