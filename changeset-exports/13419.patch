# HG changeset patch
# User Jacob Dawid <jacob.dawid@googlemail.com>
# Date 1302676971 -7200
#      Wed Apr 13 08:42:51 2011 +0200
# Node ID cb41924c25e9f436bf4d7b27440e9a4dfd153dc8
# Parent  32732696103897706336f7d0092b14ffe5b590ee
Creating a new file works.

diff --git a/gui//src/FileEditorMdiSubWindow.cpp b/gui//src/FileEditorMdiSubWindow.cpp
--- a/gui//src/FileEditorMdiSubWindow.cpp
+++ b/gui//src/FileEditorMdiSubWindow.cpp
@@ -16,16 +16,17 @@
  * along with this program.  If not, see <http://www.gnu.org/licenses/>.
  */
 
 #include "FileEditorMdiSubWindow.h"
 #include <QVBoxLayout>
 #include <QApplication>
 #include <QFile>
 #include <QFileDialog>
+#include <QMessageBox>
 
 FileEditorMdiSubWindow::FileEditorMdiSubWindow(QWidget *parent)
     : QMdiSubWindow(parent) {
     construct();
 }
 
 void FileEditorMdiSubWindow::loadFile(QString fileName) {
     m_fileName = fileName;
@@ -33,36 +34,75 @@ void FileEditorMdiSubWindow::loadFile(QS
     QFile file(fileName);
     file.open(QFile::ReadOnly);
 
     m_codeEdit->setPlainText(file.readAll());
 
     file.close();
 }
 
+void FileEditorMdiSubWindow::newFile() {
+    if(m_modified) {
+        int decision
+                = QMessageBox::question(this,
+                                        "Open New File",
+                                        "Do you want to save the current file?",
+                                        QMessageBox::Yes, QMessageBox::No);
+
+        if(decision == QMessageBox::Yes) {
+            saveFile();
+            if(m_modified) {
+                // If the user attempted to save the file, but it's still
+                // modified, then probably something went wrong, so we quit here.
+                return;
+            }
+        }
+    }
+
+    m_fileName = "<unnamed>";
+    setWindowTitle(m_fileName);
+    m_codeEdit->setPlainText("");
+}
+
 void FileEditorMdiSubWindow::saveFile() {
     QString saveFileName = QFileDialog::getSaveFileName(this, "Save File", m_fileName);
     QFile file(saveFileName);
     file.open(QFile::WriteOnly);
-    file.write(m_codeEdit->toPlainText().toLocal8Bit());
+
+    if(file.write(m_codeEdit->toPlainText().toLocal8Bit()) == -1) {
+        QMessageBox::warning(this,
+                             "Error Saving File",
+                             QString("The file could not be saved: %1.").arg(file.errorString()));
+    } else {
+        m_codeEdit->document()->setModified(false);
+    }
+
     file.close();
 }
 
+void FileEditorMdiSubWindow::showToolTipNew() {
+    m_statusBar->showMessage("Create a new file.", 2000);
+}
+
 void FileEditorMdiSubWindow::showToolTipSave() {
     m_statusBar->showMessage("Save the file.", 2000);
 }
 
 void FileEditorMdiSubWindow::showToolTipUndo() {
     m_statusBar->showMessage("Revert previous changes.", 2000);
 }
 
 void FileEditorMdiSubWindow::showToolTipRedo() {
     m_statusBar->showMessage("Append previous changes.", 2000);
 }
 
+void FileEditorMdiSubWindow::registerModified(bool modified) {
+    m_modified = modified;
+}
+
 void FileEditorMdiSubWindow::construct() {
     QStyle *style = QApplication::style();
     setWidget(new QWidget());
     m_toolBar = new QToolBar(this);
     m_codeEdit = new CodeEdit(this);
     m_statusBar = new QStatusBar(this);
     m_numberedTextView = new NumberedTextView(this, m_codeEdit);
 
@@ -85,16 +125,23 @@ void FileEditorMdiSubWindow::construct()
 
     QVBoxLayout *layout = new QVBoxLayout();
     layout->addWidget(m_toolBar);
     layout->addWidget(m_numberedTextView);
     layout->addWidget(m_statusBar);
     layout->setMargin(2);
     widget()->setLayout(layout);
 
+    connect(newAction, SIGNAL(triggered()), this, SLOT(newFile()));
     connect(undoAction, SIGNAL(triggered()), m_codeEdit, SLOT(undo()));
     connect(redoAction, SIGNAL(triggered()), m_codeEdit, SLOT(redo()));
     connect(saveAction, SIGNAL(triggered()), this, SLOT(saveFile()));
 
+    connect(newAction, SIGNAL(hovered()), this, SLOT(showToolTipNew()));
     connect(undoAction, SIGNAL(hovered()), this, SLOT(showToolTipUndo()));
     connect(redoAction, SIGNAL(hovered()), this, SLOT(showToolTipRedo()));
     connect(saveAction, SIGNAL(hovered()), this, SLOT(showToolTipSave()));
+
+    connect(m_codeEdit, SIGNAL(modificationChanged(bool)), this, SLOT(registerModified(bool)));
+
+    m_fileName = "";
+    setWindowTitle(m_fileName);
 }
diff --git a/gui//src/FileEditorMdiSubWindow.h b/gui//src/FileEditorMdiSubWindow.h
--- a/gui//src/FileEditorMdiSubWindow.h
+++ b/gui//src/FileEditorMdiSubWindow.h
@@ -27,23 +27,28 @@
 
 class FileEditorMdiSubWindow : public QMdiSubWindow {
     Q_OBJECT
 public:
     FileEditorMdiSubWindow(QWidget *parent = 0);
     void loadFile(QString fileName);
 
 public slots:
+    void newFile();
     void saveFile();
+
+    void showToolTipNew();
     void showToolTipSave();
     void showToolTipUndo();
     void showToolTipRedo();
 
+    void registerModified(bool modified);
 private:
     void construct();
     QToolBar *m_toolBar;
     CodeEdit *m_codeEdit;
     NumberedTextView *m_numberedTextView;
     QStatusBar *m_statusBar;
     QString m_fileName;
+    bool m_modified;
 };
 
 #endif // FILEEDITORMDISUBWINDOW_H
