# HG changeset patch
# User jwe
# Date 1109014883 0
#      Mon Feb 21 19:41:23 2005 +0000
# Node ID b111ca4715c6cd8a17c90e1cfdd462905bdef9ab
# Parent  b142b5a0d6bef81d1b102ea005e8177dddd61784
[project @ 2005-02-21 19:41:23 by jwe]

diff --git a/doc/interpreter/plot.txi b/doc/interpreter/plot.txi
--- a/doc/interpreter/plot.txi
+++ b/doc/interpreter/plot.txi
@@ -336,18 +336,16 @@ lines with a replot command, gnuplot alw
 you probably don't want to have a completely new plot generated every
 time something as minor as an axis label changes.
 
 @findex shg
 The command @code{shg} is equivalent to executing @code{replot} without
 any arguments.
 @end deffn
 
-@DOCSTRING(automatic_replot)
-
 Note that NaN values in the plot data are automatically omitted, and
 Inf values are converted to a very large value before calling gnuplot.
 
 @c XXX FIXME XXX -- add info about what to do to get plots on remote X
 @c terminals.  People often forget how to properly set DISPLAY and run
 @c xhost.
 
 
diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,8 +1,13 @@
+2005-02-21  John W. Eaton  <jwe@octave.org>
+
+	* plot/grid.m, plot/plot_border.m, plot/title.m, plot/top_title.m,
+	plot/__axis_label__.m: Issue replot command.
+
 2005-02-09  John W. Eaton  <jwe@octave.org>
 
 	* polynomial/polyderiv.m: Force P to be a row vector.
 
 2005-02-08  John W. Eaton  <jwe@octave.org>
 
 	* strings/dec2base.m: Don't delete leading zero if third arg is
 	provided and len <= computed max_len.
diff --git a/scripts/plot/__axis_label__.m b/scripts/plot/__axis_label__.m
--- a/scripts/plot/__axis_label__.m
+++ b/scripts/plot/__axis_label__.m
@@ -27,16 +27,19 @@
 function h = __axis_label__ (caller, text)
 
   if (nargin == 0)
     usage ("__axis_label__ (caller, text)");
   elseif (nargin == 2)
     if (isstr (text))
       eval (sprintf ("gset %s \"%s\"", caller,
 		     undo_string_escapes (undo_string_escapes (text))));
+      if (automatic_replot)
+	replot
+      endif
     else
       error ("%s: text must be a string", caller);
     endif
   else
     usage ("%s (text)", caller);
   endif
 
   ## XXX FIXME XXX -- eventually, we will return a graphics handle.  For
diff --git a/scripts/plot/axis.m b/scripts/plot/axis.m
--- a/scripts/plot/axis.m
+++ b/scripts/plot/axis.m
@@ -21,21 +21,16 @@
 ## @deftypefn {Function File} {} axis (@var{limits})
 ## Set axis limits for plots.
 ##
 ## The argument @var{limits} should be a 2, 4, or 6 element vector.  The
 ## first and second elements specify the lower and upper limits for the x
 ## axis.  The third and fourth specify the limits for the y axis, and the
 ## fifth and sixth specify the limits for the z axis.
 ##
-## If your plot is already drawn, then you need to use @code{replot} before
-## the new axis limits will take effect.  You can get this to happen
-## automatically by setting the built-in variable @code{automatic_replot}
-## to a nonzero value.
-##
 ## Without any arguments, @code{axis} turns autoscaling on.  
 ##
 ## With one output argument, @code{x=axis} returns the current axes 
 ## (this is not yet implemented for automatic axes).
 ##
 ## The vector argument specifying limits is optional, and additional
 ## string arguments may be used to specify various axis properties.  For
 ## example,
@@ -169,17 +164,17 @@ function curr_axis = axis (ax, varargin)
 	gset autoscale;
       endif
     elseif (strcmp (ax, "manual"))
       ## fixes the axis limits, like axis(axis) should;
       gset xrange [] writeback;
       gset yrange [] writeback;
       gset zrange [] writeback;
       ## XXX FIXME XXX if writeback were set in plot, no need to replot here.
-      replot; 
+      replot
       gset noautoscale x;
       gset noautoscale y;
       gset noautoscale z;
     elseif (strcmp (ax, "tight"))
       ## XXX FIXME XXX if tight, plot must set ranges to limits of the
       ## all the data on the current plot, even if from a previous call.
       ## Instead, just let gnuplot do as it likes.
       gset autoscale;
@@ -263,16 +258,18 @@ function curr_axis = axis (ax, varargin)
     endif
 
   else
     error ("axis: expecting no args, or a vector with 2, 4, or 6 elements");
   endif
 
   if (nargin > 1)
     axis (varargin{:});
+  elseif (automatic_replot)
+    replot
   endif
 endfunction
 
 %!demo
 %! t=0:0.01:2*pi; x=sin(t);
 %!
 %! subplot(221);    title("normal plot");
 %! plot(t, x, ";;");
diff --git a/scripts/plot/grid.m b/scripts/plot/grid.m
--- a/scripts/plot/grid.m
+++ b/scripts/plot/grid.m
@@ -30,27 +30,36 @@
 ## Author: jwe
 
 ## PKG_ADD: mark_as_command grid
 
 function grid (x)
 
   usage_msg = "grid (\"on\" | \"off\")";
 
+  do_replot = false;
+
   if (nargin == 0)
     gset grid;
+    do_replot = true;
   elseif (nargin == 1)
     if (isstr (x))
       if (strcmp ("off", x))
         gset nogrid;
+	do_replot = true;
       elseif (strcmp ("on", x))
         gset grid;
+	do_replot = true;
       else
-    usage (usage_msg);
+	usage (usage_msg);
       endif
     else
       error ("grid: argument must be a string");
     endif
   else
     usage (usage_msg);
   endif
 
+  if (do_replot && automatic_replot)
+    replot
+  endif
+
 endfunction
diff --git a/scripts/plot/plot_border.m b/scripts/plot/plot_border.m
--- a/scripts/plot/plot_border.m
+++ b/scripts/plot/plot_border.m
@@ -105,9 +105,13 @@ function plot_border (varargin)
     if (all)
       border = 15;
     else
       border = south + west + north + east;
     endif
     eval (sprintf ("gset border %d", border));
   endif
 
+  if (automatic_replot)
+    replot
+  endif
+
 endfunction
diff --git a/scripts/plot/title.m b/scripts/plot/title.m
--- a/scripts/plot/title.m
+++ b/scripts/plot/title.m
@@ -14,34 +14,36 @@
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, write to the Free
 ## Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ## 02111-1307, USA.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} title (@var{string})
-## Specify a title for a plot.  If you already have a plot displayed, use
-## the command @code{replot} to redisplay it with the new title.
+## Specify a title for a plot.
 ## @end deftypefn
 ##
 ## @seealso{plot, semilogx, semilogy, loglog, polar, mesh, contour,
 ## bar, stairs, gplot, gsplot, replot, xlabel, and ylabel}
 
 ## Author: jwe
 
 function h = title (text)
 
   if (nargin != 1)
     usage ("title (text)");
   endif
 
   if (isstr (text))
     eval (sprintf ("gset title \"%s\"",
 		   undo_string_escapes (undo_string_escapes (text))));
+    if (automatic_replot)
+      replot
+    endif
   else
     error ("title: text must be a string");
   endif
 
   ## XXX FIXME XXX -- eventually, we will return a graphics handle.  For
   ## now, return something, so that calls that expect a handle won't
   ## fail (at least immediately).
 
diff --git a/scripts/plot/top_title.m b/scripts/plot/top_title.m
--- a/scripts/plot/top_title.m
+++ b/scripts/plot/top_title.m
@@ -33,13 +33,16 @@ function top_title (text)
     usage ("top_title (text)");
   endif
 
   if (isstr (text))
     gset bottom_title;
     gset title;
     eval (sprintf ("gset top_title \"%s\"",
 		   undo_string_escapes (undo_string_escapes (text))));
+    if (automatic_replot)
+      replot
+    endif
   else
     error ("error: top_title: text must be a string");
   endif
 
 endfunction
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,15 @@
+2005-02-21  John W. Eaton  <jwe@octave.org>
+
+	* DLD-FUNCTIONS/gplot.l (send_to_plot_stream):
+	Replot with no previous plot is a no-op.
+	(makeplot): Likewise.
+	(Vautomatic_replot): Don't use this variable in low-level functions.
+
 2005-02-18  John W. Eaton  <jwe@octave.org>
 
 	* Makefile.in (oct-gperf.h): Remove -E from list of gperf options.
 
 	* data.cc (do_permute): Use zero-based indexing for permutation
 	vector that is passed to octave_value::permute method.
 	Allow permutation vector longer	than number of dimenensions of
 	permuted matrix.
diff --git a/src/DLD-FUNCTIONS/gplot.l b/src/DLD-FUNCTIONS/gplot.l
--- a/src/DLD-FUNCTIONS/gplot.l
+++ b/src/DLD-FUNCTIONS/gplot.l
@@ -427,36 +427,23 @@ send_to_plot_stream (const std::string& 
     {
       open_plot_stream ();
 
       if (error_state)
 	return -1;
     }
 
   int replot_len = Vgnuplot_command_replot.length ();
-  int splot_len = Vgnuplot_command_splot.length ();
-  int plot_len = Vgnuplot_command_plot.length ();
 
   bool is_replot = (Vgnuplot_command_replot == cmd.substr (0, replot_len));
-  bool is_splot = (Vgnuplot_command_splot == cmd.substr (0, splot_len));
-  bool is_plot = (Vgnuplot_command_plot == cmd.substr (0, plot_len));
 
-  if (plot_line_count == 0 && is_replot)
-    error ("replot: no previous plot");
-  else
+  if (! (plot_line_count == 0 && is_replot))
     {
       *plot_stream << cmd;
 
-      if (! (is_replot || is_splot || is_plot)
-	  && plot_line_count > 0
-	  && Vautomatic_replot)
-	{
-	  *plot_stream << Vgnuplot_command_replot << Vgnuplot_command_end;
-	}
-
       plot_stream->flush ();
     }
 
   return 0;
 }
 
 // Check if the parser state is such that a plot keyword can occur.
 static inline bool
@@ -942,17 +929,17 @@ makeplot (std::string caller, std::strin
 		  std::string zrange_end_str = read_until (endbracketp, tok);
 		  outstr += printrange (zrange_start_str, zrange_end_str) + " ";
 		  tok = gptlex ();
                 }
             }
         }
 
       if (plottok_or_end_p (tok))
-	throw gpt_parse_error ("must have something to plot");
+	return 1;
       else
 	{
 	  std::string file;
 	  plot_line_count++;
 
 	  if (tok == STRING)
 	    {
 	      file = file_ops::tilde_expand (std::string (yytext));
@@ -962,57 +949,57 @@ makeplot (std::string caller, std::strin
 	      read_until (plottok_or_end_p, tok);
             }
 	  else
 	    {
 	      std::string plot_expr_str;
 	      plot_expr_str += std::string (yytext) + " ";
 	      plot_expr_str += read_until (plottok_or_end_p, tok);
 
-	      int status;
+	      int status = 0;
 	      octave_value tmp_data = eval_string (plot_expr_str,
 						   true, status);
 
 	      if (status != 0 || ! tmp_data.is_defined ())
 		throw gpt_parse_error ();
 
 	      OSSTREAM tmp_buf;
 	      tmp_data.print_raw (tmp_buf);
 	      tmp_buf << OSSTREAM_ENDS;
 
 	      if (tmp_data.is_string ())
 		{
 		  file = file_ops::tilde_expand (tmp_data.string_value ());
 		  // XXX FIXME XXX -- perhaps should check if the file exists?
 		  outstr += file + " ";
-                }
+		}
 	      else
 		{
 		  switch (ndim)
 		    {
 		    case 2:
 		      file = save_in_tmp_file (tmp_data, ndim);
 		      break;
 
 		    case 3:
 		      file = save_in_tmp_file (tmp_data, ndim,
 					       parametric_plot);
 		      break;
 
 		    default:
 		      gripe_2_or_3_dim_plot ();
 		      break;
-                    }
+		    }
 
 		  if (file.length () > 0)
 		    {
 		      mark_for_deletion (file);
 		      outstr += "'" + file + "' ";
 		    }
-                }
+		}
             }
         }
 
       std::string title_str;
       std::string using_str;
       std::string style_str;
       std::string axes_str;
 
