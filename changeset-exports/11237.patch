# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1289460397 18000
#      Thu Nov 11 02:26:37 2010 -0500
# Node ID 110e570e5f8d11ee14acb49e327cd79f32ec3979
# Parent  6ccf1130f23c0b4d30df43e7e48c5610224c3dce
keep gnulib out of lo-mappers.h

diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,13 @@
+2010-11-11  John W. Eaton  <jwe@octave.org>
+
+	* lo-mappers.cc (xtrunc, xround): Move definitions here from
+	lo-mappers.h.
+
 2010-11-10  John W. Eaton  <jwe@octave.org>
 
 	* kpse-xfns.c: Delete.
 	* kpse-xfns.h: Delete.  Move defintions to kpse.cc.
 	* Makefile.am (INCS): Remove kpse-xfns.h from the list.
 	(LIBOCT_PATHSEARCH_SOURCES): Define to pathsearch.cc.
 	(LIBOCT_PATHSEARCH_CXX_SOURCES,	LIBOCT_PATHSEARCH_C_SOURCES):
 	Delete variables.
diff --git a/liboctave/lo-mappers.cc b/liboctave/lo-mappers.cc
--- a/liboctave/lo-mappers.cc
+++ b/liboctave/lo-mappers.cc
@@ -35,16 +35,31 @@ along with Octave; see the file COPYING.
 #include "lo-specfun.h"
 #include "lo-utils.h"
 #include "oct-cmplx.h"
 
 #include "f77-fcn.h"
 
 // double -> double mappers.
 
+// Both xtrunc and xround belong here so we can keep gnulib:: out of
+// lo-mappers.h.
+
+double
+xtrunc (double x)
+{
+  return gnulib::trunc (x);
+}
+
+double
+xround (double x)
+{
+  return gnulib::round (x);
+}
+
 double 
 xroundb (double x)
 {
   double t = xround (x);
 
   if (fabs (x - t) == 0.5)
     t = 2 * xtrunc (0.5 * t);
 
@@ -234,16 +249,31 @@ Complex
 xmax (const Complex& x, const Complex& y)
 {
   return abs (x) >= abs (y) ? x : (xisnan (x) ? x : y);
 }
 
 
 // float -> float mappers.
 
+// Both xtrunc and xround belong here so we can keep gnulib:: out of
+// lo-mappers.h.
+
+float
+xtrunc (float x)
+{
+  return gnulib::truncf (x);
+}
+
+float
+xround (float x)
+{
+  return gnulib::round (x);
+}
+
 float 
 xroundb (float x)
 {
   float t = xround (x);
 
   if (fabsf (x - t) == 0.5)
     t = 2 * xtrunc (0.5 * t);
 
diff --git a/liboctave/lo-mappers.h b/liboctave/lo-mappers.h
--- a/liboctave/lo-mappers.h
+++ b/liboctave/lo-mappers.h
@@ -26,27 +26,26 @@ along with Octave; see the file COPYING.
 #define octave_liboctave_mappers_h 1
 
 #include <limits>
 
 #include "oct-cmplx.h"
 #include "lo-math.h"
 
 // Double Precision 
-inline double xtrunc (double x) { return gnulib::trunc (x); }
+extern OCTAVE_API double xtrunc (double x);
 inline double xcopysign (double x, double y) { return copysignf (x, y); }
 inline double xceil (double x) { return ceil (x); }
 inline double xfloor (double x) { return floor (x); }
-
 inline double arg (double x) { return atan2 (0.0, x); }
 inline double conj (double x) { return x; }
 inline double fix (double x) { return xtrunc (x); }
 inline double imag (double) { return 0.0; }
 inline double real (double x) { return x; }
-inline double xround (double x) { return gnulib::round (x); }
+extern OCTAVE_API double xround (double x);
 extern OCTAVE_API double xroundb (double x);
 extern OCTAVE_API double signum (double x);
 extern OCTAVE_API double xlog2 (double x); 
 extern OCTAVE_API Complex xlog2 (const Complex& x); 
 extern OCTAVE_API double xlog2 (double x, int& exp);
 extern OCTAVE_API Complex xlog2 (const Complex& x, int& exp);
 extern OCTAVE_API double xexp2 (double x);
 
@@ -113,27 +112,26 @@ extern OCTAVE_API Complex atanh (const C
 
 extern OCTAVE_API bool octave_is_NA (const Complex& x);
 extern OCTAVE_API bool octave_is_NaN_or_NA (const Complex& x);
 
 extern OCTAVE_API Complex xmin (const Complex& x, const Complex& y);
 extern OCTAVE_API Complex xmax (const Complex& x, const Complex& y);
 
 // Single Precision 
-inline float xtrunc (float x) { return gnulib::truncf (x); }
+extern OCTAVE_API float xtrunc (float x);
 inline float xcopysign (float x, float y) { return copysignf (x, y); }
 inline float xceil (float x) { return ceilf (x); }
 inline float xfloor (float x) { return floorf (x); }
-
 inline float arg (float x) { return atan2f (0.0f, x); }
 inline float conj (float x) { return x; }
 inline float fix (float x) { return xtrunc (x); }
 inline float imag (float) { return 0.0f; }
 inline float real (float x) { return x; }
-inline float xround (float x) { return gnulib::round (x); }
+extern OCTAVE_API float xround (float x);
 extern OCTAVE_API float xroundb (float x);
 extern OCTAVE_API float signum (float x);
 extern OCTAVE_API float xlog2 (float x); 
 extern OCTAVE_API FloatComplex xlog2 (const FloatComplex& x); 
 extern OCTAVE_API float xlog2 (float x, int& exp);
 extern OCTAVE_API FloatComplex xlog2 (const FloatComplex& x, int& exp);
 extern OCTAVE_API float xexp2 (float x);
 
