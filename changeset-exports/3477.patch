# HG changeset patch
# User jwe
# Date 948848123 0
#      Wed Jan 26 00:55:23 2000 +0000
# Node ID 4b79cb009dd41a11137bbaf5a41f779381238374
# Parent  78e1e0007f0faaa6059eb35e9f9a4e83dba1e7a1
[project @ 2000-01-26 00:55:22 by jwe]

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,10 +1,17 @@
 2000-01-25  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
+	* pager.cc (octave_pager_buf::flush_current_contents_to_diary):
+	New function.
+	(octave_pager_stream::flush_current_contents_to_diary):
+	Ditto.
+	(close_diary_file): Use the new octave_pager_stream function to
+	try to flush the current buffer to the diary when it is closed.
+
 	* variables.cc (Fexist): Return 6 for built-in constants.
 
 	* pt-plot.cc (Fgshow): Don't append " " after last arg.
 	(Fgset): Likewise.
 
 2000-01-23  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* ov-base-mat.h (octave_base_matrix::length): Return 0 for empty
diff --git a/src/pager.cc b/src/pager.cc
--- a/src/pager.cc
+++ b/src/pager.cc
@@ -245,16 +245,26 @@ octave_pager_buf::sync (void)
 
 	  octave_diary.write (buf, len);
 	}
     }
 
   return 0;
 }
 
+void
+octave_pager_buf::flush_current_contents_to_diary (void)
+{
+  char *buf = eback ();
+
+  int len = pptr () - buf;
+
+  octave_diary.write (buf, len);
+}
+
 int
 octave_diary_buf::sync (void)
 {
   if (write_to_diary_file && external_diary_file)
     {
       int len = pptr () - eback ();
 
       if (len > 0)
@@ -285,16 +295,23 @@ octave_pager_stream&
 octave_pager_stream::stream (void)
 {
   if (! instance)
     instance = new octave_pager_stream ();
 
   return *instance;
 }
 
+void
+octave_pager_stream::flush_current_contents_to_diary (void)
+{
+  if (pb)
+    pb->flush_current_contents_to_diary ();
+}
+
 octave_diary_stream *octave_diary_stream::instance = 0;
 
 octave_diary_stream::octave_diary_stream (void) : ostream (), db (0)
 {
   db = new octave_diary_buf;
   rdbuf (db);
   setf (unitbuf);
 }
@@ -334,16 +351,29 @@ flush_octave_stdout (void)
 
       unwind_protect::run_frame ("flush_octave_stdout");
     }
 }
 
 static void
 close_diary_file (void)
 {
+  // Try to flush the current buffer to the diary now, so that things
+  // like
+  //
+  // function foo ()
+  //   diary on;
+  //   ...
+  //   diary off;
+  // endfunction
+  //
+  // will do the right thing.
+
+  octave_stdout.flush_current_contents_to_diary ();
+
   if (external_diary_file.is_open ())
     {
       octave_diary.flush ();
       external_diary_file.close ();
     }
 }
 
 static void
diff --git a/src/pager.h b/src/pager.h
--- a/src/pager.h
+++ b/src/pager.h
@@ -34,32 +34,36 @@ Software Foundation, 59 Temple Place - S
 
 class
 octave_pager_buf : public strstreambuf
 {
 public:
 
   octave_pager_buf (int size = 0) : strstreambuf (size) { }
 
+  void flush_current_contents_to_diary (void);
+
 protected:
 
   int sync (void);
 };
 
 class
 octave_pager_stream : public ostream
 {
 protected:
 
   octave_pager_stream (void);
 
 public:
 
   ~octave_pager_stream (void);
 
+  void flush_current_contents_to_diary (void);
+
   static octave_pager_stream& stream (void);
 
 private:
 
   static octave_pager_stream *instance;
 
   octave_pager_buf *pb;
 
