# HG changeset patch
# User Rik <rdrider0-list@yahoo.com>
# Date 1238218514 25200
#      Fri Mar 27 22:35:14 2009 -0700
# Node ID 089bd295e4f7a04b08ceb5102d6280f2277cb16d
# Parent  1bf0ce0930be5d6b10a0cb7251cc0c817d8dcb64
# Parent  e15f4197d9072c545d8baede60f5eb44d8ea5f73
Documentation cleanup merge

diff --git a/ChangeLog b/ChangeLog
--- a/ChangeLog
+++ b/ChangeLog
@@ -1,8 +1,13 @@
+2009-03-27  Jaroslav Hajek <highegg@gmail.com>
+
+	* aclocal.m4 (OCTAVE_CMATH_FUNC): Add missing AC_LANG_POP.
+	* configure.in: Enclose string in quotes.
+
 2009-03-23  Jaroslav Hajek  <highegg@gmail.com>
 
 	* NEWS: More updates.
 
 2009-03-20  Jaroslav Hajek  <highegg@gmail.com>
 
 	* aclocal.m4 (OCTAVE_CMATH_FUNC): New macro.
 	* configure.in: Use it.
diff --git a/aclocal.m4 b/aclocal.m4
--- a/aclocal.m4
+++ b/aclocal.m4
@@ -1313,16 +1313,17 @@ void take_func (int (*func) (float x));
 void take_func (float (*func) (float x));
 ]],
 [[
 take_func(std::$1);
 ]])],
 [AC_MSG_RESULT([yes])
  AC_DEFINE(HAVE_CMATH_[]AS_TR_CPP($1)F,1,[Define if <cmath> provides float variant of $1])],
 [AC_MSG_RESULT([no])])
+AC_LANG_POP(C++)
 ])
 
 dnl Check whether fast signed integer arithmetics using bit tricks
 dnl can be used in oct-inttypes.h. Defines HAVE_FAST_INT_OPS if
 dnl the following conditions hold:
 dnl 1. Signed numbers are represented by twos complement
 dnl    (see <http://en.wikipedia.org/wiki/Two%27s_complement>)
 dnl 2. static_cast to unsigned int counterpart works like interpreting
diff --git a/configure.in b/configure.in
--- a/configure.in
+++ b/configure.in
@@ -261,17 +261,17 @@ fi
 AC_SUBST(INCLUDE_DEPS)
 AC_SUBST(DEPEND_FLAGS)
 AC_SUBST(DEPEND_EXTRA_SED_PATTERN)
 
 AC_PATH_X
 if test "$have_x"; then
   AC_DEFINE(HAVE_X_WINDOWS, 1, [Define if you have X11])
 
-  if test $x_includes != "NONE"; then
+  if test "$x_includes" != "NONE"; then
     X11_INCFLAGS="$x_includes"
   fi
   AC_SUBST(X11_INCFLAGS)
 
   if test -z $x_libraries; then
     AC_CHECK_LIB(X11, XrmInitialize, [X11_LIBS=-lX11], [X11_LIBS=])
   elif test $x_libraries != "NONE"; then
     AC_CHECK_LIB(X11, XrmInitialize, 
diff --git a/doc/ChangeLog b/doc/ChangeLog
--- a/doc/ChangeLog
+++ b/doc/ChangeLog
@@ -1,8 +1,12 @@
+2009-03-27  Jaroslav Hajek  <highegg@gmail.com>
+
+	* interpreter/diagperm.txi: Mention mixing with sparse matrices.
+
 2009-03-25  John W. Eaton  <jwe@octave.org>
 
 	* interpreter/munge-texi.cc (process_texi_input_file):
 	Copy leading comment with file name info to output.
 
 2009-03-09  John W. Eaton  <jwe@octave.org>
 
 	* interpreter/Makefile.in (DISTFILES): Use doc-cache instead of
diff --git a/doc/interpreter/diagperm.txi b/doc/interpreter/diagperm.txi
--- a/doc/interpreter/diagperm.txi
+++ b/doc/interpreter/diagperm.txi
@@ -253,16 +253,22 @@ by its reciprocal.
 The matrix division algorithms do, in fact, use division rather than 
 multiplication by reciprocals for better numerical accuracy; otherwise, they
 honor the above definition.  Note that a diagonal matrix is never truncated due
 to ill-conditioning; otherwise, it would not be much useful for scaling. This
 is typically consistent with linear algebra needs. A full matrix that only
 happens to be diagonal (an is thus not a special object) is of course treated
 normally.
 
+Multiplication and division by diagonal matrices works efficiently also when
+combined with sparse matrices, i.e. @code{D*S}, where @var{D} is a diagonal
+matrix and @var{S} is a sparse matrix scales the rows of the sparse matrix and
+returns a sparse matrix. The expressions @code{S*D}, @code{D\S}, @code{S/D} work
+analogically.
+
 If @var{D1} and @var{D2} are both diagonal matrices, then the expressions
 @example
 D1 + D2
 D1 - D2 
 D1 * D2 
 D1 / D2 
 D1 \ D2
 @end example
@@ -315,16 +321,22 @@ A permutation matrix can be transposed (
 same, because a permutation matrix is never complex), inverting the
 permutation, or equivalently, turning a row-permutation matrix into a
 column-permutation one. For permutation matrices, transpose is equivalent to
 inversion, thus @code{P\M} is equivalent to @code{P'*M}.  Transpose of a
 permutation matrix (or inverse) is a constant-time operation, flipping only a
 flag internally, and thus the choice between the two above equivalent
 expressions for inverse permuting is completely up to the user's taste.
 
+Multiplication and division by permutation matrices works efficiently also when
+combined with sparse matrices, i.e. @code{P*S}, where @var{P} is a permutation
+matrix and @var{S} is a sparse matrix permutes the rows of the sparse matrix and
+returns a sparse matrix. The expressions @code{S*P}, @code{P\S}, @code{S/P} work
+analogically.
+
 Two permutation matrices can be multiplied or divided (if their sizes match), performing
 a composition of permutations. Also a permutation matrix can be indexed by a permutation
 vector (or two vectors), giving again a permutation matrix.
 Any other operations do not generally yield a permutation matrix and will thus
 trigger the implicit conversion.
 
 @node Function Support
 @section Functions That Are Aware of These Matrices
@@ -346,27 +358,34 @@ diagonal or permutation matrices).
 @dfn{inv} and @dfn{pinv} can be applied to a diagonal matrix, yielding again
 a diagonal matrix. @dfn{det} will use an efficient straightforward calculation
 when given a diagonal matrix, as well as @dfn{cond}.
 The following mapper functions can be applied to a diagonal matrix
 without converting it to a full one:
 @dfn{abs}, @dfn{real}, @dfn{imag}, @dfn{conj}, @dfn{sqrt}. 
 A diagonal matrix can also be returned from the @dfn{balance}
 and @dfn{svd} functions.
+The @dfn{sparse} function will convert a diagonal matrix efficiently to a
+sparse matrix.
 
 @node Permutation Matrix Functions
 @subsection Permutation Matrix Functions
 
 @dfn{inv} and @dfn{pinv} will invert a permutation matrix, preserving its
 specialness. @dfn{det} can be applied to a permutation matrix, efficiently
 calculating the sign of the permutation (which is equal to the determinant).
 
 A permutation matrix can also be returned from the built-in functions
 @dfn{lu} and @dfn{qr}, if a pivoted factorization is requested.
 
+The @dfn{sparse} function will convert a permutation matrix efficiently to a
+sparse matrix.
+The @dfn{find} function will also work efficiently with a permutation matrix,
+making it possible to conveniently obtain the permutation indices.
+
 @node Example Codes
 @section Some Examples of Usage
 
 The following can be used to solve a linear system @code{A*x = b}
 using the pivoted LU factorization:
 @example
   [L, U, P] = lu (A); ## now L*U = P*A
   x = U \ L \ P*b;
diff --git a/liboctave/Array.cc b/liboctave/Array.cc
--- a/liboctave/Array.cc
+++ b/liboctave/Array.cc
@@ -2541,16 +2541,31 @@ Array<T>::find (octave_idx_type n, bool 
               else
                 break;
             }
           if (k < n)
             retval.resize (k);
         }
     }
 
+  // Fixup return dimensions, for Matlab compatibility.
+  // find(zeros(0,0)) -> zeros(0,0)
+  // find(zeros(1,0)) -> zeros(1,0)
+  // find(zeros(0,1)) -> zeros(0,1)
+  // find(zeros(0,X)) -> zeros(0,1)
+  // find(zeros(1,1)) -> zeros(0,0) !!!! WHY?
+  // find(zeros(0,1,0)) -> zeros(0,0)
+  // find(zeros(0,1,0,1)) -> zeros(0,0) etc
+
+  if ((numel () == 1 && retval.is_empty ())
+      || (rows () == 0 && dims ().numel (1) == 0))
+    retval.dimensions = dim_vector ();
+  else if (rows () == 1 && ndims () == 2)
+    retval.dimensions = dim_vector (1, retval.length ());
+
   return retval;
 }
 
 
 #define INSTANTIATE_ARRAY_SORT(T) template class octave_sort<T>;
 
 #define NO_INSTANTIATE_ARRAY_SORT(T) \
  \
diff --git a/liboctave/Array.h b/liboctave/Array.h
--- a/liboctave/Array.h
+++ b/liboctave/Array.h
@@ -623,16 +623,17 @@ public:
     Array<U> result (dims ());
     U *p = result.fortran_vec ();
 
     std::transform (m, m + len, p, fcn);
 
     return result;
   }
 
+  template <class U> friend class Array;
 };
 
 #endif
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,18 @@
+2009-03-26  Jaroslav Hajek  <highegg@gmail.com>
+
+	* Array.cc (Array<T>::find): Reshape result for Matlab compatibility.
+	* Array.h (Array<T>): Add friend template declaration.
+
+2009-03-27  Jaroslav Hajek  <highegg@gmail.com>
+
+	* idx-vector.cc (idx_vector::idx_vector_rep::idx_vector_rep (const
+	Array<bool>&): Use more M*b-compatible behaviour.
+
 2009-03-26  Jaroslav Hajek  <highegg@gmail.com>
 
 	* dim-vector.h (dim_vector::numel): Add optional argument, simplify.
 
 2009-03-26  Jaroslav Hajek  <highegg@gmail.com>
 
 	* Array.h (Array<T>::dims): Return a const reference.
 	(Array<T>::is_vector): New method.
diff --git a/liboctave/idx-vector.cc b/liboctave/idx-vector.cc
--- a/liboctave/idx-vector.cc
+++ b/liboctave/idx-vector.cc
@@ -290,20 +290,21 @@ idx_vector::idx_vector_rep::idx_vector_r
 }
 
 idx_vector::idx_vector_rep::idx_vector_rep (const Array<bool>& bnda)
   : data (0), len (0), ext (0), aowner (0), orig_dims ()
 {
   for (octave_idx_type i = 0, l = bnda.numel (); i < l; i++)
     if (bnda.xelem (i)) len++;
 
-  dim_vector dv = bnda.dims ();
+  const dim_vector dv = bnda.dims ();
 
-  orig_dims = ((dv.length () == 2 && dv(0) == 1)
-	       ? dim_vector (1, len) : orig_dims = dim_vector (len, 1));
+  if (! dv.all_zero ())
+    orig_dims = ((dv.length () == 2 && dv(0) == 1) 
+                 ? dim_vector (1, len) : dim_vector (len, 1));
 
   if (len != 0)
     {
       octave_idx_type *d = new octave_idx_type [len];
 
       octave_idx_type ntot = bnda.length ();
 
       octave_idx_type k = 0;
diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,8 +1,17 @@
+2009-03-27  Ben Abbott <bpabbott@mac.com>
+
+	* plot/__go_draw_axes__.m: Properly position the title for 3D plots
+	when using the gnuplot (v4.3+) backend.
+
+2009-03-27  Jaroslav Hajek  <highegg@gmail.com>
+
+	* linear-algebra/expm.m: Fix order of outputs from balance.
+
 2009-03-25  Kai Habel  <kai.habel@gmx.de>
 
 	* general/gradient.m: Fix calculation for more than two
 	dimensions.  Change interpretation of vector arguments from
 	spacing to coordinates.  New tests.
 
 2009-03-25  John W. Eaton  <jwe@octave.org>
 
diff --git a/scripts/linear-algebra/expm.m b/scripts/linear-algebra/expm.m
--- a/scripts/linear-algebra/expm.m
+++ b/scripts/linear-algebra/expm.m
@@ -110,22 +110,22 @@ function r = expm (a)
   n = rows (a);
   ## Trace reduction.
   a(a == -Inf) = -realmax;
   trshift = trace (a) / length (a);
   if (trshift > 0)
     a -= trshift*eye (n);
   endif
   ## Balancing.
-  [p, d, aa] = balance (a);
+  [d, p, aa] = balance (a);
   ## FIXME: can we both permute and scale at once? Or should we rather do
   ## this:
   ##
-  ##   [p, xx, aa] = balance (a, "noscal");
-  ##   [xx, d, aa] = balance (aa, "noperm");
+  ##   [d, xx, aa] = balance (a, "noperm");
+  ##   [xx, p, aa] = balance (aa, "noscal");
   [f, e] = log2 (norm (aa, "inf"));
   s = max (0, e);
   s = min (s, 1023);
   aa *= 2^(-s);
 
   ## Pade approximation for exp(A).
   c = [5.0000000000000000e-1,...
        1.1666666666666667e-1,...
diff --git a/scripts/plot/__go_draw_axes__.m b/scripts/plot/__go_draw_axes__.m
--- a/scripts/plot/__go_draw_axes__.m
+++ b/scripts/plot/__go_draw_axes__.m
@@ -95,19 +95,24 @@ function __go_draw_axes__ (h, plot_strea
 	fputs (plot_stream, "unset title;\n");
       else
 	[tt, f, s] = __maybe_munge_text__ (enhanced, t, "string");
 	if (strcmp (f, "*"))
 	  fontspec = "";
 	else
 	  fontspec = sprintf ("font \"%s,%d\"", f, s);
 	endif
-	fprintf (plot_stream, "set title \"%s\" %s %s;\n",
+	fprintf (plot_stream, "set title \"%s\" %s %s",
 		 undo_string_escapes (tt), fontspec,
 		 __do_enhanced_option__ (enhanced, t));
+	if (nd == 3)
+	  fprintf (plot_stream, " offset screen 0, screen %.3f;\n", pos(4)/5);
+	else
+	  fprintf (plot_stream, ";\n");
+	endif
       endif
     endif
 
     if (! isempty (axis_obj.xlabel))
       t = get (axis_obj.xlabel);
       angle = t.rotation;
       colorspec = get_text_colorspec (axis_obj.xcolor, mono);
       if (isempty (t.string))
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,18 @@
+2009-03-27  Jaroslav Hajek  <highegg@gmail.com>
+
+	* DLD-FUNCTIONS/balance.cc (Fbalance): Fix order of output args.
+
+2009-03-26  Jaroslav Hajek  <highegg@gmail.com>
+
+	* DLD-FUNCTIONS/find.cc 
+	(find_nonzero_elem_idx (const Array<T>&, ...)): Move dimensions
+	fixup to liboctave.
+
 2009-03-26  Jaroslav Hajek  <highegg@gmail.com>
 
 	* DLD-FUNCTIONS/find.cc 
 	(find_nonzero_elem_idx (const Array<T>&, ...)): Simplify.
 	Instantiate for bool and octave_int types.
 	(find_nonzero_elem_idx (const Sparse<T>&, ...)): 
 	Instantiate for bool.
 	(Ffind): Handle bool and octave_int cases.
diff --git a/src/DLD-FUNCTIONS/balance.cc b/src/DLD-FUNCTIONS/balance.cc
--- a/src/DLD-FUNCTIONS/balance.cc
+++ b/src/DLD-FUNCTIONS/balance.cc
@@ -46,28 +46,28 @@ along with Octave; see the file COPYING.
 #include "gripes.h"
 #include "oct-obj.h"
 #include "utils.h"
 
 DEFUN_DLD (balance, args, nargout,
   "-*- texinfo -*-\n\
 @deftypefn {Loadable Function} {@var{aa} =} balance (@var{a}, @var{opt})\n\
 @deftypefnx {Loadable Function} {[@var{dd}, @var{aa}] =} balance (@var{a}, @var{opt})\n\
-@deftypefnx {Loadable Function} {[@var{p}, @var{d}, @var{aa}] =} balance (@var{a}, @var{opt})\n\
+@deftypefnx {Loadable Function} {[@var{d}, @var{p}, @var{aa}] =} balance (@var{a}, @var{opt})\n\
 @deftypefnx {Loadable Function} {[@var{cc}, @var{dd}, @var{aa}, @var{bb}] =} balance (@var{a}, @var{b}, @var{opt})\n\
 \n\
 Compute @code{aa = dd \\ a * dd} in which @code{aa} is a matrix whose\n\
 row and column norms are roughly equal in magnitude, and\n\
 @code{dd} = @code{p * d}, in which @code{p} is a permutation\n\
 matrix and @code{d} is a diagonal matrix of powers of two.  This allows\n\
 the equilibration to be computed without roundoff.  Results of\n\
 eigenvalue calculation are typically improved by balancing first.\n\
 \n\
 If two output values are requested, @code{balance} returns \n\
-the permutation @code{p} and the diagonal @code{d} separately as vectors. \n\
+the diagonal @code{d} and the permutation @code{p} separately as vectors. \n\
 In this case, @code{dd = eye(n)(p,:) * diag (d)}, where @code{n} is the matrix \n\
 size. \n\
 \n\
 If four output values are requested, compute @code{aa = cc*a*dd} and\n\
 @code{bb = cc*b*dd)}, in which @code{aa} and @code{bb} have non-zero\n\
 elements of approximately the same magnitude and @code{cc} and @code{dd}\n\
 are permuted diagonal matrices as in @code{dd} for the algebraic\n\
 eigenvalue problem.\n\
@@ -164,18 +164,18 @@ Generalized eigenvalue problem balancing
 	      else if (nargout == 2)
 		{
 		  retval(1) = result.balanced_matrix ();
 		  retval(0) = result.balancing_matrix ();
 		}
               else
                 {
                   retval(2) = result.balanced_matrix ();
-                  retval(1) = result.scaling_vector ();
-                  retval(0) = result.permuting_vector ();
+                  retval(0) = result.scaling_vector ();
+                  retval(1) = result.permuting_vector ();
                 }
 
 	    }
 	  else
 	    {
 	      FloatAEPBALANCE result (faa, noperm, noscal);
 
 	      if (nargout == 0 || nargout == 1)
@@ -183,18 +183,18 @@ Generalized eigenvalue problem balancing
 	      else if (nargout == 2)
 		{
 		  retval(1) = result.balanced_matrix ();
 		  retval(0) = result.balancing_matrix ();
 		}
               else
                 {
                   retval(2) = result.balanced_matrix ();
-                  retval(1) = result.scaling_vector ();
-                  retval(0) = result.permuting_vector ();
+                  retval(0) = result.scaling_vector ();
+                  retval(1) = result.permuting_vector ();
                 }
 	    }
 	}
       else
 	{
 	  if (complex_case)
 	    {
 	      ComplexAEPBALANCE result (caa, noperm, noscal);
@@ -204,36 +204,36 @@ Generalized eigenvalue problem balancing
 	      else if (nargout == 2)
 		{
 		  retval(1) = result.balanced_matrix ();
 		  retval(0) = result.balancing_matrix ();
 		}
               else
                 {
                   retval(2) = result.balanced_matrix ();
-                  retval(1) = result.scaling_vector ();
-                  retval(0) = result.permuting_vector ();
+                  retval(0) = result.scaling_vector ();
+                  retval(1) = result.permuting_vector ();
                 }
 	    }
 	  else
 	    {
 	      AEPBALANCE result (aa, noperm, noscal);
 
 	      if (nargout == 0 || nargout == 1)
 		retval(0) = result.balanced_matrix ();
 	      else if (nargout == 2)
 		{
 		  retval(1) = result.balanced_matrix ();
 		  retval(0) = result.balancing_matrix ();
 		}
               else
                 {
                   retval(2) = result.balanced_matrix ();
-                  retval(1) = result.scaling_vector ();
-                  retval(0) = result.permuting_vector ();
+                  retval(0) = result.scaling_vector ();
+                  retval(1) = result.permuting_vector ();
                 }
 	    }
 	}
     }
   else
     {
       std::string bal_job;
       if (nargout == 1)
diff --git a/src/DLD-FUNCTIONS/find.cc b/src/DLD-FUNCTIONS/find.cc
--- a/src/DLD-FUNCTIONS/find.cc
+++ b/src/DLD-FUNCTIONS/find.cc
@@ -44,33 +44,16 @@ find_nonzero_elem_idx (const Array<T>& n
   octave_value_list retval ((nargout == 0 ? 1 : nargout), Matrix ());
 
   Array<octave_idx_type> idx;
   if (n_to_find >= 0)
     idx = nda.find (n_to_find, direction == -1);
   else
     idx = nda.find ();
 
-  // Fixup idx dimensions, for Matlab compatibility.
-  // find(zeros(0,0)) -> zeros(0,0)
-  // find(zeros(1,0)) -> zeros(1,0)
-  // find(zeros(0,1)) -> zeros(0,1)
-  // find(zeros(0,X)) -> zeros(0,1)
-  // find(zeros(1,1)) -> zeros(0,0) !!!! WHY?
-  // find(zeros(0,1,0)) -> zeros(0,0)
-  // find(zeros(0,1,0,1)) -> zeros(0,0) etc
-  // FIXME: I don't believe this is right. Matlab seems to violate its own docs
-  // here, because a scalar *is* a row vector.
-
-  if ((nda.numel () == 1 && idx.is_empty ())
-      || (nda.rows () == 0 && nda.dims ().numel (1) == 0))
-    idx = idx.reshape (dim_vector (0, 0));
-  else if (nda.rows () == 1 && nda.ndims () == 2)
-    idx = idx.reshape (dim_vector (1, idx.length ()));
-
   switch (nargout)
     {
     default:
     case 3:
       retval(2) = ArrayN<T> (nda.index (idx_vector (idx)));
       // Fall through!
 
     case 2:
