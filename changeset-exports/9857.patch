# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1259044547 -3600
#      Tue Nov 24 07:35:47 2009 +0100
# Node ID 43a7adf62534bad7f3f84fdf671871f17230e747
# Parent  870a69bac55cbaece2c57c285b63796b346cef45
save dims for empty structs (binary fmt)

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,15 @@
+2009-11-24  Jaroslav Hajek  <highegg@gmail.com>
+
+	* ov-struct.cc (octave_struct::save_binary): Save dimensions for
+	structs.
+	(octave_struct::load_binary): Load dimensions if present, 
+	use 1x1 otherwise.
+
 2009-11-23  Jaroslav Hajek  <highegg@gmail.com>
 
 	* data.cc (Fmerge): Add missing parentheses.
 
 2009-11-23  Jaroslav Hajek  <highegg@gmail.com>
 
 	* ov-complex.h (octave_complex::bool_value,
 	octave_complex::bool_array_value): New methods.
diff --git a/src/ov-struct.cc b/src/ov-struct.cc
--- a/src/ov-struct.cc
+++ b/src/ov-struct.cc
@@ -1360,16 +1360,29 @@ octave_struct::load_ascii (std::istream&
 
 bool 
 octave_struct::save_binary (std::ostream& os, bool& save_as_floats)
 {
   Octave_map m = map_value ();
 
   octave_idx_type nf = m.nfields ();
 
+  dim_vector d = dims ();
+  if (d.length () < 1)
+    return false;
+
+  // Use negative value for ndims
+  int32_t di = - d.length();
+  os.write (reinterpret_cast<char *> (&di), 4);
+  for (int i = 0; i < d.length (); i++)
+    {
+      di = d(i);
+      os.write (reinterpret_cast<char *> (&di), 4);
+    }
+  
   int32_t len = nf;
   os.write (reinterpret_cast<char *> (&len), 4);
 
   // Iterating over the list of keys will preserve the order of the
   // fields.
   string_vector keys = m.keys ();
 
   for (octave_idx_type i = 0; i < nf; i++)
@@ -1393,19 +1406,44 @@ octave_struct::load_binary (std::istream
 {
   bool success = true;
   int32_t len;
   if (! is.read (reinterpret_cast<char *> (&len), 4))
     return false;
   if (swap)
     swap_bytes<4> (&len);
 
+  dim_vector dv (1, 1);
+
+  if (len < 0)
+    {
+      // We have explicit dimensions.
+      int mdims = -len;
+
+      int32_t di;
+      dv.resize (mdims);
+
+      for (int i = 0; i < mdims; i++)
+        {
+          if (! is.read (reinterpret_cast<char *> (&di), 4))
+            return false;
+          if (swap)
+            swap_bytes<4> (&di);
+          dv(i) = di;
+        }
+
+      if (! is.read (reinterpret_cast<char *> (&len), 4))
+        return false;
+      if (swap)
+        swap_bytes<4> (&len);
+    }
+
   if (len > 0)
     {
-      Octave_map m (map);
+      Octave_map m (dv);
 
       for (octave_idx_type j = 0; j < len; j++)
 	{
 	  octave_value t2;
 	  bool dummy;
 	  std::string doc;
 
 	  // recurse to read cell elements
@@ -1429,20 +1467,20 @@ octave_struct::load_binary (std::istream
       if (is) 
 	map = m;
       else
 	{
 	  error ("load: failed to load structure");
 	  success = false;
 	}
     }
-  else if (len == 0 )
-    map = Octave_map (dim_vector (1, 1));
+  else if (len == 0)
+    map = Octave_map (dv);
   else
-    panic_impossible ();
+    success = false;
 
   return success;
 }
 
 #if defined (HAVE_HDF5)
 
 bool
 octave_struct::save_hdf5 (hid_t loc_id, const char *name, bool save_as_floats)
