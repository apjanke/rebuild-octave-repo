# HG changeset patch
# User jwe
# Date 949613990 0
#      Thu Feb 03 21:39:50 2000 +0000
# Node ID 8d641545e006badfa6fdb48eaf90ccf0353293dd
# Parent  f2e2faef1220e6d5463f614aa6e855f2d8fc80a5
[project @ 2000-02-03 21:39:48 by jwe]

diff --git a/liboctave/CMatrix.cc b/liboctave/CMatrix.cc
--- a/liboctave/CMatrix.cc
+++ b/liboctave/CMatrix.cc
@@ -1021,17 +1021,17 @@ ComplexMatrix::ifourier (void) const
   Complex *tmp_data = retval.fortran_vec ();
 
   F77_FCN (cffti, CFFTI) (npts, pwsave);
 
   for (int j = 0; j < nsamples; j++)
     F77_FCN (cfftb, CFFTB) (npts, &tmp_data[npts*j], pwsave);
 
   for (int j = 0; j < npts*nsamples; j++)
-    tmp_data[j] = tmp_data[j] / npts;
+    tmp_data[j] = tmp_data[j] / static_cast<double> (npts);
 
   return retval;
 }
 
 ComplexMatrix
 ComplexMatrix::fourier2d (void) const
 {
   ComplexMatrix retval;
@@ -1121,17 +1121,17 @@ ComplexMatrix::ifourier2d (void) const
   Complex *tmp_data = retval.fortran_vec ();
 
   F77_FCN (cffti, CFFTI) (npts, pwsave);
 
   for (int j = 0; j < nsamples; j++)
     F77_FCN (cfftb, CFFTB) (npts, &tmp_data[npts*j], pwsave);
 
   for (int j = 0; j < npts*nsamples; j++)
-    tmp_data[j] = tmp_data[j] / npts;
+    tmp_data[j] = tmp_data[j] / static_cast<double> (npts);
 
   npts = nc;
   nsamples = nr;
   nn = 4*npts+15;
 
   wsave.resize (nn);
   pwsave = wsave.fortran_vec ();
 
@@ -1143,17 +1143,17 @@ ComplexMatrix::ifourier2d (void) const
   for (int j = 0; j < nsamples; j++)
     {
       for (int i = 0; i < npts; i++)
 	prow[i] = tmp_data[i*nr + j];
 
       F77_FCN (cfftb, CFFTB) (npts, prow, pwsave);
 
       for (int i = 0; i < npts; i++)
-	tmp_data[i*nr + j] = prow[i] / npts;
+	tmp_data[i*nr + j] = prow[i] / static_cast<double> (npts);
     }
 
   return retval;
 }
 
 ComplexDET
 ComplexMatrix::determinant (void) const
 {
diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,10 +1,15 @@
 2000-02-03  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
+	* dMatrix.cc (Matrix::ifourier): Cast divisor to double.
+	(Matrix::ifourier2d): Likewise.
+	* CMatrix.cc (ComplexMatrix::ifourier): Likewise.
+	(ComplexMatrix::ifourier2d): Likewise.
+
 	* Array.h (Array::ArrayRep::qsort): Cast len to size_t.
 
 2000-02-01  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* oct-rl-edit.c, oct-rl-edit.h: New files for interface to GNU
 	readline library.
 	* Makefile.in: Add them to the appropriate lists.
 
diff --git a/liboctave/dMatrix.cc b/liboctave/dMatrix.cc
--- a/liboctave/dMatrix.cc
+++ b/liboctave/dMatrix.cc
@@ -713,17 +713,17 @@ Matrix::ifourier (void) const
   Complex *tmp_data = retval.fortran_vec ();
 
   F77_FCN (cffti, CFFTI) (npts, pwsave);
 
   for (int j = 0; j < nsamples; j++)
     F77_FCN (cfftb, CFFTB) (npts, &tmp_data[npts*j], pwsave);
 
   for (int j = 0; j < npts*nsamples; j++)
-    tmp_data[j] = tmp_data[j] / npts;
+    tmp_data[j] = tmp_data[j] / static_cast<double> (npts);
 
   return retval;
 }
 
 ComplexMatrix
 Matrix::fourier2d (void) const
 {
   ComplexMatrix retval;
@@ -813,17 +813,17 @@ Matrix::ifourier2d (void) const
   Complex *tmp_data = retval.fortran_vec ();
 
   F77_FCN (cffti, CFFTI) (npts, pwsave);
 
   for (int j = 0; j < nsamples; j++)
     F77_FCN (cfftb, CFFTB) (npts, &tmp_data[npts*j], pwsave);
 
   for (int j = 0; j < npts*nsamples; j++)
-    tmp_data[j] = tmp_data[j] / npts;
+    tmp_data[j] = tmp_data[j] / static_cast<double> (npts);
 
   npts = nc;
   nsamples = nr;
   nn = 4*npts+15;
 
   wsave.resize (nn);
   pwsave = wsave.fortran_vec ();
 
@@ -835,17 +835,17 @@ Matrix::ifourier2d (void) const
   for (int j = 0; j < nsamples; j++)
     {
       for (int i = 0; i < npts; i++)
 	prow[i] = tmp_data[i*nr + j];
 
       F77_FCN (cfftb, CFFTB) (npts, prow, pwsave);
 
       for (int i = 0; i < npts; i++)
-	tmp_data[i*nr + j] = prow[i] / npts;
+	tmp_data[i*nr + j] = prow[i] / static_cast<double> (npts);
     }
 
   return retval;
 }
 
 DET
 Matrix::determinant (void) const
 {
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,10 +1,12 @@
 2000-02-03  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
+	* ov-base-mat.cc: Include pr-output.h here.
+
 	* DLD-FUNCTIONS/rand.cc (curr_rand_dist): Return const char *
 	instead of char *.
 
 	* oct-fstrm.cc (octave_fstream::seek, octave_fstream::tell): 
 	Call pubseekoff instead of seekoff.
 
 	* DLD-FUNCTIONS/dassl.cc (print_dassl_option_list): Use stream
 	manipulators instead of GNU iostream-specific form function.
diff --git a/src/ov-base-mat.cc b/src/ov-base-mat.cc
--- a/src/ov-base-mat.cc
+++ b/src/ov-base-mat.cc
@@ -28,16 +28,17 @@ Software Foundation, 59 Temple Place - S
 #include <config.h>
 #endif
 
 #include <iostream>
 
 #include "oct-obj.h"
 #include "ov-base.h"
 #include "ov-base-mat.h"
+#include "pr-output.h"
 
 template <class MT>
 octave_value
 octave_base_matrix<MT>::do_index_op (const octave_value_list& idx)
 {
   octave_value retval;
 
   int len = idx.length ();
