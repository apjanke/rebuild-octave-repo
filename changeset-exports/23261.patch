# HG changeset patch
# User Torsten <mttl@mailbox.org>
# Date 1489178840 -3600
#      Fri Mar 10 21:47:20 2017 +0100
# Branch stable
# Node ID d77f5721db51e8ee490b992f3bd6e830eb592d61
# Parent  61ec2557eece207b1007ab0f9b417379c67e352a
fix the anchor position in the info text of the doc browser (bug #50422)

* parser.cc (append_line): new function calculating the real length of
  a line read from an info file taking multi-byte chars into account;
  (get_next_node): update text length correction in the case of image tags,
  append method replaced by new function append_line

* parser.h: new function append_line

diff --git a/libgui/src/qtinfo/parser.cc b/libgui/src/qtinfo/parser.cc
--- a/libgui/src/qtinfo/parser.cc
+++ b/libgui/src/qtinfo/parser.cc
@@ -200,16 +200,27 @@ parser::search_node (const QString& node
         {
           return text;
         }
     }
 
   return QString ();
 }
 
+void
+parser::append_line (QString *text, const char *line)
+{
+  QString line_converted = QString::fromLatin1 (line);
+  int len = line_converted.length ();
+  line_converted = QString::fromUtf8 (line);
+  for (int i = len - line_converted.length (); i > 0; i--)
+    line_converted.insert (line_converted.size () - 1, QByteArray (" "));
+  text->append (line_converted);
+}
+
 QString
 parser::get_next_node (QIODevice *io)
 {
   QString text;
   QByteArray line, line_buffer;
   char c;
   int i;
 
@@ -219,33 +230,37 @@ parser::get_next_node (QIODevice *io)
       if (c)
         {
           // first char is not equal 0
           io->ungetChar (c);
           line = io->readLine ();
         }
       else
         {
-          // 0 was read -> image -> text length changes
-          line_buffer = io->readLine ();  // image tag that is not needed
-          line = io->readLine ();         // firsts line of text message
-          for (i=1; i<line_buffer.size ()+6; i++)  // correct the size
-            line.insert (line.size ()-1,QByteArray(" "));   // by adding blanks
+          // 0 was read -> image -> handle text replacement (length changes)
+          line_buffer = io->readLine ();  // start of image tag -> drop it
+          int len = line_buffer.size ();
+          line = io->readLine ();         // get first line of its text
+          line_buffer = line;             // and store it
+          append_line (&text, line);
+          line = io->readLine ();         // get next line of text
+          append_line (&text, line);
+          line = io->readLine ();         // drop last line (unneeded chars)
+          line = line_buffer;             // and take the first instead
+          // now correct the size of the dropped line and 5 additional chars
+          for (i = 1; i < len + 6; i++)
+            line.insert (line.size ()-1,QByteArray (" "));  // adding blanks
         }
 
-      if (line.at (0) == '"' && line.size () == 5)  // end of image construct
-        line = " ";
-
       if (line.at(0) == 31)
         {
           break;
         }
       else
-        {
-          text.append (QString::fromUtf8 (line));
+        append_line (&text, line);
         }
     }
   return text;
 }
 
 static QString
 get_first_line (const QString& text)
 {
diff --git a/libgui/src/qtinfo/parser.h b/libgui/src/qtinfo/parser.h
--- a/libgui/src/qtinfo/parser.h
+++ b/libgui/src/qtinfo/parser.h
@@ -93,16 +93,17 @@ private:
   };
 
   QString search_node (const QString& node, QIODevice * io);
   QString get_next_node (QIODevice * io);
   QString get_node_name (const QString& text);
   QString get_node_up (const QString& text);
   QString get_node_next (const QString& text);
   QString get_node_prev (const QString& text);
+  void append_line (QString *test, const char *line);
 
   /** Parses info files and gets map of node positions.*/
   void parse_info_map();
 
   /** Open info files and uncompress them. */
   QIODevice *open_file(QFileInfo & fileInfo);
 
   /** Calculates real position of nodes.
