# HG changeset patch
# User Torsten <ttl@justmail.de>
# Date 1382554258 -7200
#      Wed Oct 23 20:50:58 2013 +0200
# Node ID d3bb7f1e39713f5535d0f785b166a290333780d2
# Parent  6a2e483125dd4fdfc14592a4e5bfb4b102076c31
prevent the editor's file watcher from signaling fasle alarms (bug #40312)

* file-editor-tab.cc(constructor): use polling engine for the file watcher
* octave-gui.cc(message_handler): new message handler for suppressing debug-
  messages from QFileSystemWatcher;
  (octave_start_gui): install new message handler

diff --git a/libgui/src/m-editor/file-editor-tab.cc b/libgui/src/m-editor/file-editor-tab.cc
--- a/libgui/src/m-editor/file-editor-tab.cc
+++ b/libgui/src/m-editor/file-editor-tab.cc
@@ -64,16 +64,17 @@ file_editor_tab::file_editor_tab (const 
   _app_closing = false;
 
   // Make sure there is a slash at the end of the directory name
   // for identification when saved later.
   if (directory.count () && directory.at (directory.count () - 1) != '/')
     directory.append ("/");
 
   _file_name = directory;
+  _file_system_watcher.setObjectName ("_qt_autotest_force_engine_poller");
 
   _edit_area = new octave_qscintilla (this);
   // Connect signal for command execution to a slot of this tab which in turn
   // emits a signal connected to the main window.
   // Direct connection is not possible because tab's parent is null.
   connect (_edit_area,
            SIGNAL (execute_command_in_terminal_signal (const QString&)),
            this,
diff --git a/libgui/src/octave-gui.cc b/libgui/src/octave-gui.cc
--- a/libgui/src/octave-gui.cc
+++ b/libgui/src/octave-gui.cc
@@ -44,16 +44,39 @@ along with Octave; see the file COPYING.
 
 #include "sighandlers.h"
 
 #include "welcome-wizard.h"
 #include "resource-manager.h"
 #include "main-window.h"
 #include "octave-gui.h"
 
+
+// custom message handler for filtering some messages from qt
+void message_handler (QtMsgType type, const char *msg)
+ {
+     switch (type) {
+     case QtDebugMsg:
+         if (strcmp(msg,"QFileSystemWatcher: skipping native engine") > 0)
+           break;
+         fprintf(stderr, "Debug: %s\n", msg);
+         break;
+     case QtWarningMsg:
+         fprintf(stderr, "Warning: %s\n", msg);
+         break;
+     case QtCriticalMsg:
+         fprintf(stderr, "Critical: %s\n", msg);
+         break;
+     case QtFatalMsg:
+         fprintf(stderr, "Fatal: %s\n", msg);
+         abort();
+     }
+ }
+
+
 // Dissociate from the controlling terminal, if any.
 
 static void
 dissociate_terminal (void)
 {
 #if ! (defined (__WIN32__) || defined (__APPLE__)) || defined (__CYGWIN__)
  
   pid_t pid = fork ();
@@ -91,16 +114,18 @@ dissociate_terminal (void)
 }
 
 int
 octave_start_gui (int argc, char *argv[], bool fork)
 {
   if (fork)
     dissociate_terminal ();
 
+  qInstallMsgHandler(message_handler);
+
   QApplication application (argc, argv);
 
   // Set the codec for all strings
   QTextCodec::setCodecForCStrings(QTextCodec::codecForName("UTF-8"));
 
   // install translators for the gui and qt text
   QTranslator gui_tr, qt_tr, qsci_tr;
   resource_manager::config_translators (&qt_tr,&qsci_tr,&gui_tr);
