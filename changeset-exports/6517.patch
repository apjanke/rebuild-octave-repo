# HG changeset patch
# User jwe
# Date 1176304488 0
#      Wed Apr 11 15:14:48 2007 +0000
# Node ID a1ec359aef3786c73cf393d030cb5ef86b7e3f26
# Parent  ce5caa673642c8b603792a0f66157a15f4d93a5c
[project @ 2007-04-11 15:14:48 by jwe]

diff --git a/doc/interpreter/container.txi b/doc/interpreter/container.txi
--- a/doc/interpreter/container.txi
+++ b/doc/interpreter/container.txi
@@ -1,22 +1,15 @@
 @c Copyright (C) 1996, 1997 John W. Eaton
 @c This is part of the Octave manual.
 @c For copying conditions, see the file gpl.texi.
 
-@node Containers
-@chapter Containers
+@node Cell Arrays
+@chapter Cell Arrays
 @cindex containers
-
-@menu
-* Cell Arrays::                 
-@end menu
-
-@node Cell Arrays
-@section Cell Arrays
 @cindex cell arrays
 
 It can be both necessary and convenient to store several variables of
 different size or type in one variable. A cell array is a container
 class able to do just that. In general cell arrays work just like
 @math{N}-dimensional arrays, with the exception of the use of @samp{@{}
 and @samp{@}} as allocation and indexing operators.
 
@@ -82,17 +75,17 @@ c@{3@} = 3
 @menu
 * Creating Cell Arrays::                 
 * Indexing Cell Arrays::
 * Cell Arrays of Strings::
 * Processing Data in Cell Arrays::
 @end menu
 
 @node Creating Cell Arrays
-@subsection Creating Cell Array
+@section Creating Cell Array
 
 The introductory example showed how to create a cell array containing
 currently available variables. In many situations, however, it is useful
 to create a cell array and then fill it with data.
 
 The @code{cell} function returns a cell array of a given size, containing
 empty matrices. This function works very similar to the @code{zeros}
 function for creating new numerical arrays. The following example creates
@@ -140,17 +133,17 @@ is possible to convert numerical arrays 
 
 @DOCSTRING(iscell)
 
 @DOCSTRING(num2cell)
 
 @DOCSTRING(mat2cell)
 
 @node Indexing Cell Arrays
-@subsection Indexing Cell Arrays
+@section Indexing Cell Arrays
 
 As shown in the introductory example elements can be inserted from cell
 arrays using the @samp{@{} and @samp{@}} operators. Besides the change
 of operators, indexing works for cell arrays like for multidimensional
 arrays.  As an example, all the rows of the first and third column of a
 cell array can be set to @code{0} with the following code
 
 @example
@@ -209,17 +202,17 @@ identical but the latter is more simple 
 c = @{"GNU", "Octave", "is", "Free", "Software"@};
 printf ("%s ", c@{1@}, c@{2@}, c@{3@}, c@{4@}, c@{5@});
      @print{} GNU Octave is Free Software 
 printf ("%s ", c@{:@});
      @print{} GNU Octave is Free Software 
 @end example
 
 @node Cell Arrays of Strings
-@subsection Cell Arrays of Strings
+@section Cell Arrays of Strings
 
 One common use of cell arrays is to store multiple strings in the same
 variable. It is possible to store multiple strings in a character matrix
 by letting each row be a string. This, however, introduces the problem
 that all strings must be of equal length. Therefore it is recommended to
 use cell arrays to store multiple strings. If, however, the character
 matrix representation is required for an operation, it can be converted
 to a cell array of strings using the @code{cellstr} function
@@ -257,17 +250,17 @@ strings, @code{strcmp}, @code{strcmpi}, 
 
 @DOCSTRING(cellstr)
 
 @DOCSTRING(iscellstr)
 
 @DOCSTRING(cellidx)
 
 @node Processing Data in Cell Arrays
-@subsection Processing Data in Cell Arrays
+@section Processing Data in Cell Arrays
 
 Data that is stored in a cell array can be processed in several ways
 depending on the actual data. The most simple way to process that data
 is to iterate through it using one or more @code{for} loops. The same
 idea can be implemented easier through the use of the @code{cellfun}
 function that calls a user specified function on all elements of a cell
 array.
 
diff --git a/doc/interpreter/octave.texi b/doc/interpreter/octave.texi
--- a/doc/interpreter/octave.texi
+++ b/doc/interpreter/octave.texi
@@ -249,19 +249,22 @@ Matrices
 
 Strings
 
 * Creating Strings::            
 * Searching and Replacing::     
 * String Conversions::          
 * Character Class Functions::   
 
-Containers
+Cell Arrays
 
-* Cell Arrays::                 
+* Creating Cell Arrays::                 
+* Indexing Cell Arrays::
+* Cell Arrays of Strings::
+* Processing Data in Cell Arrays::
 
 Variables
 
 * Global Variables::            
 * Status of Variables::         
 * Summary of Built-in Variables::  
 * Defaults from the Environment::  
 
