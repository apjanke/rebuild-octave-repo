# HG changeset patch
# User Daniel J Sebald <daniel.sebald@ieee.org>
# Date 1450912946 18000
#      Wed Dec 23 18:22:26 2015 -0500
# Node ID 984678f19352d1f630122e6f03b1f6a404ff713d
# Parent  123da81b91766b9736bd6c07a62dd902d3037faf
Impproved support gnuplot terminals "eepic", "latex", "pstricks", & "texdraw".
(Part of Bug #44187).

* __gnuplot_drawnow__.m: Include "eepic" in list of terminals_with_size.
* print.m: Include the "eepic", "latex", "pstricks", and "texdraw" devices
in the doc-string. Alphabetize some/most of the devices.
* __gnuplot_print__.m: Add support for "eepic" and "latex". Check that
gnuplot recognizes terminals before using them.

diff --git a/scripts/plot/util/__gnuplot_drawnow__.m b/scripts/plot/util/__gnuplot_drawnow__.m
--- a/scripts/plot/util/__gnuplot_drawnow__.m
+++ b/scripts/plot/util/__gnuplot_drawnow__.m
@@ -184,21 +184,21 @@ function enhanced = gnuplot_set_term (pl
         if (! (output_to_screen (term)
                || any (strcmp (term, {"canvas", "emf", "gif", "jpeg", ...
                                       "pbm", "png", "pngcairo", "svg"}))))
           ## Convert to inches
           gnuplot_pos = gnuplot_pos / 72;
           gnuplot_size = gnuplot_size / 72;
         endif
         if (all (gnuplot_size > 0))
-          terminals_with_size = {"canvas", "cairolatex", "emf", "epscairo", ...
-                                 "epslatex", "fig", "gif", "jpeg", "latex", ...
-                                 "pbm", "pdf", "pdfcairo", "postscript", ...
-                                 "png", "pngcairo", "pstex", "pslatex", ...
-                                 "svg", "tikz"};
+          terminals_with_size = {"canvas", "cairolatex", "eepic", "emf", ...
+                                 "epscairo", "epslatex", "fig", "gif", ...
+                                 "jpeg", "latex", "pbm", "pdf", "pdfcairo", ...
+                                 "postscript", "png", "pngcairo", "pstex", ...
+                                 "pslatex", "svg", "tikz"};
           if (__gnuplot_has_feature__ ("windows_figure_position"))
             terminals_with_size{end+1} = "windows";
           endif
           if (__gnuplot_has_feature__ ("x11_figure_position"))
             terminals_with_size{end+1} = "x11";
           endif
           if (__gnuplot_has_feature__ ("wxt_figure_size"))
             terminals_with_size{end+1} = "wxt";
diff --git a/scripts/plot/util/print.m b/scripts/plot/util/print.m
--- a/scripts/plot/util/print.m
+++ b/scripts/plot/util/print.m
@@ -134,23 +134,16 @@
 ##     Generate Cairo based output when using the Gnuplot graphics toolkit.
 ## The @samp{epscairo} and @samp{pdfcairo} devices are synonymous with
 ## the @samp{epsc} device. The @LaTeX{} variants generate a @LaTeX{} file,
 ## @file{@var{filename}.tex}, for the text portions of a plot, and an image
 ## file, @file{@var{filename}.(eps|pdf)}, for the graph portion of the plot.
 ## The @samp{standalone} variants behave as described for
 ## @samp{epslatexstandalone} above.
 ##
-##   @item tikz
-##   @itemx tikzstandalone
-##     Generate a @LaTeX{} file using PGF/TikZ@.  For the FLTK toolkit
-## the result is PGF. The @samp{tikzstandalone} device produces a @LaTeX{}
-## document which includes the TikZ file (@samp{tikzstandalone} is only
-## available with the gnuplot graohpics toolkit).
-##
 ##   @item  ill
 ##   @itemx aifm
 ##     Adobe Illustrator (Obsolete for Gnuplot versions > 4.2)
 ##
 ##   @item  cdr
 ##   @itemx @nospell{corel}
 ##     CorelDraw
 ##
@@ -160,41 +153,52 @@
 ##   @item  emf
 ##   @itemx meta
 ##     Microsoft Enhanced Metafile
 ##
 ##   @item fig
 ##     XFig.  For the Gnuplot graphics toolkit, the additional options
 ## @option{-textspecial} or @option{-textnormal} can be used to control whether the special flag should be set for the text in the figure.  (default is @option{-textnormal})
 ##
+##   @item gif
+##     GIF image (only available for the Gnuplot graphics toolkit)
+##
 ##   @item hpgl
 ##     HP plotter language
 ##
+##   @item  jpg
+##   @itemx jpeg
+##     JPEG image
+##
+##   @item latex
+##     @LaTeX picture environment (only available with the gnuplot graphics
+## toolkit).
+##
 ##   @item mf
 ##     Metafont
 ##
 ##   @item png
 ##     Portable network graphics
 ##
-##   @item  jpg
-##   @itemx jpeg
-##     JPEG image
-##
-##   @item gif
-##     GIF image (only available for the Gnuplot graphics toolkit)
-##
 ##   @item pbm
 ##     PBMplus
 ##
+##   @item pdf
+##     Portable document format
+##   @end table
+##
 ##   @item svg
 ##     Scalable vector graphics
 ##
-##   @item pdf
-##     Portable document format
-##   @end table
+##   @item tikz
+##   @itemx tikzstandalone
+##     Generate a @LaTeX{} file using PGF/TikZ@.  For the FLTK toolkit
+## the result is PGF. The @samp{tikzstandalone} device produces a @LaTeX{}
+## document which includes the TikZ file (@samp{tikzstandalone} is only
+## available with the gnuplot graphics toolkit).
 ##
 ##   If the device is omitted, it is inferred from the file extension,
 ## or if there is no filename it is sent to the printer as PostScript.
 ##
 ## @item -d@var{ghostscript_device}
 ##   Additional devices are supported by Ghostscript.
 ## Some examples are;
 ##
diff --git a/scripts/plot/util/private/__gnuplot_print__.m b/scripts/plot/util/private/__gnuplot_print__.m
--- a/scripts/plot/util/private/__gnuplot_print__.m
+++ b/scripts/plot/util/private/__gnuplot_print__.m
@@ -107,17 +107,19 @@ function opts = __gnuplot_print__ (opts)
         local_drawnow (["tikz " gp_opts], opts.name, opts);
       else
         error (sprintf ("print:no%soutput", opts.devopt),
                "print.m: '%s' output is not available for gnuplot-%s",
                upper (opts.devopt), __gnuplot_version__ ());
       endif
     case "svg"
       local_drawnow (["svg dynamic " gp_opts], opts.name, opts);
-    case {"aifm", "corel", "eepic", "emf", "fig"}
+    case {"eepic"}
+      local_drawnow ([opts.devopt " color rotate " gp_opts], opts.name, opts);
+    case {"aifm", "corel", "emf", "fig"}
       local_drawnow ([opts.devopt " " gp_opts], opts.name, opts);
     case {"cairolatex", "epscairo", "epscairolatex", ...
           "epscairolatexstandalone", "pdfcairo", "pdfcairolatex", ...
           "pdfcairolatexstandalone", "pngcairo"}
       term = opts.devopt;
       if (strfind (term, "standalone"))
         gp_opts = sprintf ("standalone %s", gp_opts);
         term = strrep (term, "standalone", "");
@@ -131,18 +133,24 @@ function opts = __gnuplot_print__ (opts)
       endif
       if (__gnuplot_has_terminal__ (term))
         local_drawnow ([term " " gp_opts], opts.name, opts);
       else
         error (sprintf ("print:no%soutput", opts.devopt),
                "print.m: '%s' output is not available for gnuplot-%s",
                upper (opts.devopt), __gnuplot_version__ ());
       endif
-    case {"canvas", "dxf", "hpgl", "mf", "gif", "pstricks", "texdraw"}
-      local_drawnow ([opts.devopt " " gp_opts], opts.name, opts);
+    case {"canvas", "dxf", "hpgl", "latex", "mf", "gif", "pstricks", "texdraw"}
+      if (__gnuplot_has_terminal__ (opts.devopt))
+        local_drawnow ([opts.devopt " " gp_opts], opts.name, opts);
+      else
+        error (sprintf ("print:no%soutput", opts.devopt),
+               "print.m: '%s' output is not available for gnuplot-%s",
+               upper (opts.devopt), __gnuplot_version__ ());
+      endif
     case opts.ghostscript.device
       gp_opts = font_spec (opts, "devopt", "eps");
       opts.ghostscript.output = opts.name;
       opts.ghostscript.source = [tempname() ".eps"];
       eps_drawnow (opts, opts.ghostscript.source, gp_opts);
       [cmd_gs, cmd_cleanup] = __ghostscript__ (opts.ghostscript);
       if (opts.send_to_printer || isempty (opts.name))
         cmd_lpr = opts.lpr_cmd (opts);
