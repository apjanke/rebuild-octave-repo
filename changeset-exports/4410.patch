# HG changeset patch
# User jwe
# Date 1052862386 0
#      Tue May 13 21:46:26 2003 +0000
# Node ID b6bc72f02a9bc4480cb245ac384f2c58d5543f15
# Parent  6b191c6e6875ebdeba2172a9545ab36f47526a52
[project @ 2003-05-13 21:46:26 by jwe]

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,13 @@
+2003-05-13  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* lex.l: Use yyunput (X, yytext) instead of unput (X) for newer
+	versions of flex.
+
 2003-05-01  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* load-save.cc (save_ascii_data): If saving a range with
 	non-integer base, limit, or increment, save as matrix instead.
 	(get_save_type): Avoid unsigned types.
 
 2003-04-30  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
diff --git a/src/lex.l b/src/lex.l
--- a/src/lex.l
+++ b/src/lex.l
@@ -241,23 +241,23 @@ POW     ((\*\*)|(\^))
 EPOW    (\.{POW})
 IDENT	([_a-zA-Z][_a-zA-Z0-9]*)
 EXPON	([DdEe][+-]?{D}+)
 NUMBER	(({D}+\.?{D}*{EXPON}?)|(\.{D}+{EXPON}?)|(0[xX][0-9a-fA-F]+))
 %%
 
 <NESTED_FUNCTION_END>. {
     BEGIN (NESTED_FUNCTION_BEGIN);
-    unput (yytext[0]);
+    yyunput (yytext[0], yytext);
     return ';';
   }
 
 <NESTED_FUNCTION_BEGIN>. {
     BEGIN (INITIAL);
-    unput (yytext[0]);
+    yyunput (yytext[0], yytext);
     prep_for_nested_function ();
     return FCN;
   }
 
 %{
 // Help and other command-style functions are a pain in the ass.  This
 // stuff needs to be simplified.  May require some changes in the
 // parser too.
@@ -333,17 +333,17 @@ NUMBER	(({D}+\.?{D}*{EXPON}?)|(\.{D}+{EX
     lexer_flags.cant_be_identifier = false;
     lexer_flags.convert_spaces_to_comma = true;
 
     if ((tmp & ATE_NEWLINE) == ATE_NEWLINE)
       {
 	maybe_warn_separator_insert (';');
 
 	if (Vwhitespace_in_literal_matrix != 2)
-	  unput (';');
+	  yyunput (';', yytext);
       }
 
     return (',');
   }
 
 %{
 // In some cases, spaces in matrix constants can turn into commas.
 // If commas are required, spaces are not important in matrix
@@ -362,17 +362,17 @@ NUMBER	(({D}+\.?{D}*{EXPON}?)|(\.{D}+{EX
 	&& nesting_level.is_bracket ()
 	&& lexer_flags.convert_spaces_to_comma)
       {
 	if ((tmp & ATE_NEWLINE) == ATE_NEWLINE)
 	  {
 	    maybe_warn_separator_insert (';');
 
 	    if (Vwhitespace_in_literal_matrix != 2)
-	      unput (';');
+	      yyunput (';', yytext);
 	  }
 
 	if (Vwhitespace_in_literal_matrix != 2)
 	  {
 	    lexer_flags.quote_is_transpose = false;
 	    lexer_flags.cant_be_identifier = false;
 	    lexer_flags.convert_spaces_to_comma = true;
 
@@ -791,17 +791,17 @@ NUMBER	(({D}+\.?{D}*{EXPON}?)|(\.{D}+{EX
 
 %{
 // Unrecognized input is a lexical error.
 %}
 
 . {
     // EOF happens here if we are parsing nested functions.
 
-    unput (yytext[0]);
+    yyunput (yytext[0], yytext);
 
     int c = yyinput ();
 
     if (c != EOF)
       {
 	current_input_column++;
 
 	error ("invalid character `%s' (ASCII %d) near line %d, column %d",
@@ -823,20 +823,20 @@ NUMBER	(({D}+\.?{D}*{EXPON}?)|(\.{D}+{EX
 
 void
 do_comma_insert_check (void)
 {
   int spc_gobbled = eat_continuation ();
 
   int c = yyinput ();
 
-  unput (c);
+  yyunput (c, yytext);
 
   if (spc_gobbled)
-    unput (' ');
+    yyunput (' ', yytext);
 
   lexer_flags.do_comma_insert = (lexer_flags.bracketflag && c == '[');
 }
 
 // Fix things up for errors or interrupts.  The parser is never called
 // recursively, so it is always safe to reinitialize its state before
 // doing any parsing.
 
@@ -1439,17 +1439,17 @@ grab_help_text (void)
 	      goto done;
 	    }
 	}
     }
 
  done:
 
   if (c)
-    unput (c);
+    yyunput (c, yytext);
 }
 
 // Return 1 if the given character matches any character in the given
 // string.
 
 static bool
 match_any (char c, const char *s)
 {
@@ -1494,22 +1494,22 @@ next_token_is_sep_op (void)
 
       if (c2 == '\n')
 	{
 	  c1 = '\n';
 
 	  retval = true;
 	}
       else
-	unput (c2);
+	yyunput (c2, yytext);
     }
   else
     retval = match_any (c1, ",;\n]");
 
-  unput (c1);
+  yyunput (c1, yytext);
 
   return retval;
 }
 
 // Try to determine if the next token should be treated as a postfix
 // unary operator.  This is ugly, but it seems to do the right thing.
 
 static bool
@@ -1522,20 +1522,20 @@ next_token_is_postfix_unary_op (bool spc
   if (c0 == '\'' && ! spc_prev)
     {
       un_op = true;
     }
   else if (c0 == '.')
     {
       int c1 = yyinput ();
       un_op = (c1 == '\'');
-      unput (c1);
+      yyunput (c1, yytext);
     }
 
-  unput (c0);
+  yyunput (c0, yytext);
 
   return un_op;
 }
 
 // Try to determine if the next token should be treated as a binary
 // operator.
 //
 // This kluge exists because whitespace is not always ignored inside
@@ -1574,17 +1574,17 @@ next_token_is_bin_op (bool spc_prev)
 	    break;
 
 	  default:
 	    // Could be either, spacing matters.
 	    bin_op = looks_like_bin_op (spc_prev, c1);
 	    break;
 	  }
 
-	unput (c1);
+	yyunput (c1, yytext);
       }
       break;
 
     case ':':
     case '/':
     case '\\':
     case '^':
       // Always a binary op (may also include /=, \=, and ^=).
@@ -1598,17 +1598,17 @@ next_token_is_bin_op (bool spc_prev)
 
 	if (match_any (c1, "+-/\\^*"))
 	  // Always a binary op (may also include .+=, .-=, ./=, ...).
 	  bin_op = true;
 	else if (! isdigit (c1) && c1 != ' ' && c1 != '\t' && c1 != '.')
 	  // A structure element reference is a binary op.
 	  bin_op = true;
 
-	unput (c1);
+	yyunput (c1, yytext);
       }
       break;
 
     // = == & && | || * **
     case '=':
     case '&':
     case '|':
     case '*':
@@ -1628,25 +1628,25 @@ next_token_is_bin_op (bool spc_prev)
     case '!':
       {
 	int c1 = yyinput ();
 
 	// ~ and ! can be unary ops, so require following =.
 	if (c1 == '=')
 	  bin_op = true;
 
-	unput (c1);
+	yyunput (c1, yytext);
       }
       break;
 
     default:
       break;
     }
 
-  unput (c0);
+  yyunput (c0, yytext);
 
   return bin_op;
 }
 
 // Used to delete trailing white space from tokens.
 
 static std::string
 strip_trailing_whitespace (char *s)
@@ -1842,17 +1842,17 @@ eat_whitespace (void)
 	    goto done;
 	}
     }
 
   if (! comment_buf.empty ())
     octave_comment_buffer::append (comment_buf);
 
  done:
-  unput (c);
+  yyunput (c, yytext);
   current_input_column--;
   return retval;
 }
 
 static inline bool
 looks_like_hex (const char *s, int len)
 {
   return (len > 2 && s[0] == '0' && (s[1] == 'x' || s[1] == 'X'));
@@ -2002,28 +2002,28 @@ have_continuation (bool trailing_comment
 	      beginning_of_comment = false;
 	    }
 	  else
 	    goto cleanup;
 	  break;
 	}
     }
 
-  unput (c);
+  yyunput (c, yytext);
   return false;
 
 cleanup:
 
   buf << OSSTREAM_ENDS;
   std::string s = OSSTREAM_STR (buf);
   OSSTREAM_FREEZE (buf);
 
   int len = s.length ();
   while (len--)
-    unput (s[len]);
+    yyunput (s[len], yytext);
 
   return false;
 }
 
 // We have seen a `.' and need to see if it is the start of a
 // continuation.  If so, this eats it, up to and including the new
 // line character.
 
@@ -2033,22 +2033,22 @@ have_ellipsis_continuation (bool trailin
   char c1 = yyinput ();
   if (c1 == '.')
     {
       char c2 = yyinput ();
       if (c2 == '.' && have_continuation (trailing_comments_ok))
 	return true;
       else
 	{
-	  unput (c2);
-	  unput (c1);
+	  yyunput (c2, yytext);
+	  yyunput (c1, yytext);
 	}
     }
   else
-    unput (c1);
+    yyunput (c1, yytext);
 
   return false;
 }
 
 // See if we have a continuation line.  If so, eat it and the leading
 // whitespace on the next line.
 //
 // Return value is the same as described for eat_whitespace().
@@ -2059,17 +2059,17 @@ eat_continuation (void)
   int retval = ATE_NOTHING;
 
   int c = yyinput ();
 
   if ((c == '.' && have_ellipsis_continuation ())
       || (c == '\\' && have_continuation ()))
     retval = eat_whitespace ();
   else
-    unput (c);
+    yyunput (c, yytext);
 
   return retval;
 }
 
 static int
 handle_string (char delim, int text_style)
 {
   OSSTREAM buf;
@@ -2119,17 +2119,17 @@ handle_string (char delim, int text_styl
 	    buf << static_cast<char> (c);
 	  else
 	    {
 	      c = yyinput ();
 	      if (c == delim)
 		buf << static_cast<char> (c);
 	      else
 		{
-		  unput (c);
+		  yyunput (c, yytext);
 		  buf << OSSTREAM_ENDS;
 		  std::string s = do_string_escapes (OSSTREAM_STR (buf));
 		  OSSTREAM_FREEZE (buf);
 
 		  if (text_style && lexer_flags.doing_set)
 		    {
 		      s = std::string (1, delim) + s + std::string (1, delim);
 		    }
@@ -2170,84 +2170,84 @@ next_token_is_assign_op (void)
 
   int c0 = yyinput ();
 
   switch (c0)
     {
     case '=':
       {
 	int c1 = yyinput ();
-	unput (c1);
+	yyunput (c1, yytext);
 	if (c1 != '=')
 	  retval = true;
       }
       break;
 
     case '+':
     case '-':
     case '*':
     case '/':
     case '\\':
     case '&':
     case '|':
       {
 	int c1 = yyinput ();
-	unput (c1);
+	yyunput (c1, yytext);
 	if (c1 == '=')
 	  retval = true;
       }
       break;
 
     case '.':
       {
 	int c1 = yyinput ();
 	if (match_any (c1, "+-*/\\"))
 	  {
 	    int c2 = yyinput ();
-	    unput (c2);
+	    yyunput (c2, yytext);
 	    if (c2 == '=')
 	      retval = true;
 	  }
-	unput (c1);
+	yyunput (c1, yytext);
       }
       break;
 
     case '>':
       {
 	int c1 = yyinput ();
 	if (c1 == '>')
 	  {
 	    int c2 = yyinput ();
-	    unput (c2);
+	    yyunput (c2, yytext);
 	    if (c2 == '=')
 	      retval = true;
 	  }
-	unput (c1);
+	yyunput (c1, yytext);
       }
       break;
 
     case '<':
       {
 	int c1 = yyinput ();
 	if (c1 == '<')
 	  {
 	    int c2 = yyinput ();
-	    unput (c2);
+	    yyunput (c2, yytext);
 	    if (c2 == '=')
 	      retval = true;
 	  }
-	unput (c1);
+	yyunput (c1, yytext);
       }
       break;
 
     default:
       break;
     }
 
-  unput (c0);
+  yyunput (c0, yytext);
 
   return retval;
 }
 
 static int
 handle_close_bracket (int spc_gobbled)
 {
   int retval = ']';
@@ -2263,17 +2263,17 @@ handle_close_bracket (int spc_gobbled)
 
   if (next_token_is_assign_op () && ! lexer_flags.looking_at_return_list)
     {
       retval = CLOSE_BRACE;
     }
   else
     {
       int c1 = yyinput ();
-      unput (c1);
+      yyunput (c1, yytext);
 
       if (lexer_flags.bracketflag)
 	{
 	  int bin_op = next_token_is_bin_op (spc_gobbled);
 
 	  int postfix_un_op = next_token_is_postfix_unary_op (spc_gobbled);
 
 	  int sep_op = next_token_is_sep_op ();
@@ -2281,17 +2281,17 @@ handle_close_bracket (int spc_gobbled)
 	  if (! (postfix_un_op || bin_op || sep_op)
 	      && nesting_level.is_bracket ()
 	      && lexer_flags.convert_spaces_to_comma)
 	    {
 	      maybe_warn_separator_insert (',');
 
 	      if (Vwhitespace_in_literal_matrix != 2)
 		{
-		  unput (',');
+		  yyunput (',', yytext);
 		  return ']';
 		}
 	    }
 	}
     }
 
   lexer_flags.quote_is_transpose = true;
   lexer_flags.cant_be_identifier = false;
@@ -2307,18 +2307,18 @@ maybe_unput_comma (int spc_gobbled)
     {
       int bin_op = next_token_is_bin_op (spc_gobbled);
 
       int postfix_un_op = next_token_is_postfix_unary_op (spc_gobbled);
 
       int c1 = yyinput ();
       int c2 = yyinput ();
 
-      unput (c2);
-      unput (c1);
+      yyunput (c2, yytext);
+      yyunput (c1, yytext);
 
       int sep_op = next_token_is_sep_op ();
 
       int dot_op = (c1 == '.'
 		    && (isalpha (c2) || isspace (c2) || c2 == '_'));
 
       if (postfix_un_op || bin_op || sep_op || dot_op)
 	return;
@@ -2332,24 +2332,24 @@ maybe_unput_comma (int spc_gobbled)
 	  if (! spc_gobbled)
 	    return;
 
 	  maybe_warn_separator_insert (',');
 
 	  // If there is a space, we only insert a comma if we are
 	  // trying to be Matlab-like.
 	  if (Vwhitespace_in_literal_matrix == 1)
-	    unput (',');
+	    yyunput (',', yytext);
 	}
       else
 	{
 	  maybe_warn_separator_insert (',');
 
 	  if (Vwhitespace_in_literal_matrix != 2)
-	    unput (',');
+	    yyunput (',', yytext);
 	}
     }
 }
 
 // Figure out exactly what kind of token to return when we have seen
 // an identifier.  Handles keywords.  Return -1 if the identifier
 // should be ignored.
 
@@ -2442,23 +2442,23 @@ handle_identifier (void)
   int c1 = yyinput ();
 
   bool next_tok_is_paren = (c1 == '(');
 
   bool next_tok_is_eq = false;
   if (c1 == '=')
     {
       int c2 = yyinput ();
-      unput (c2);
+      yyunput (c2, yytext);
 
       if (c2 != '=')
 	next_tok_is_eq = true;
     }
 
-  unput (c1);
+  yyunput (c1, yytext);
 
   // Make sure we put the return values of a function in the symbol
   // table that is local to the function.
 
   // If we are defining a function and we have not seen the function
   // name yet and the next token is `=', then this identifier must be
   // the only return value for the function and it belongs in the
   // local symbol table.
