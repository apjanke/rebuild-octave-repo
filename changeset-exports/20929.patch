# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1450371990 18000
#      Thu Dec 17 12:06:30 2015 -0500
# Node ID 45a64a6c727370dc5be5c0cfbc5d7c2a5bfa6b92
# Parent  2b8447888e0ae426193c2094172b21243339ab60
fix comment character style in most .m files to be consistent

* strread.m, __pltopt__.m, fftshift.m, ifftshift.m, gallery.m,
strmatch.m, test.m: Use % as the comment character only for BISTs.

diff --git a/scripts/io/strread.m b/scripts/io/strread.m
--- a/scripts/io/strread.m
+++ b/scripts/io/strread.m
@@ -929,24 +929,24 @@ endfunction
 
 %!test
 %! [a, b, c, d] = strread ("1,2,3,,5,6\n", "%d%d%f%d", "delimiter", ",");
 %! assert (c, [3; NaN]);
 %! assert (d, int32 ([0; 0]));
 
 %!test
 %! ## Default format (= %f)
-%1 [a, b, c] = strread ("0.12 0.234 0.3567");
-%1 assert (a, 0.12);
-%1 assert (b, 0.234);
-%1 assert (c, 0.3567);
+%! [a, b, c] = strread ("0.12 0.234 0.3567");
+%! assert (a, 0.12);
+%! assert (b, 0.234);
+%! assert (c, 0.3567);
 
 %!test
 %! [a, b] = strread ("0.41 8.24 3.57 6.24 9.27", "%f%f", 2, "delimiter", " ");
-%1 assert (a, [0.41; 3.57]);
+%! assert (a, [0.41; 3.57]);
 
 %!test
 %! ## TreatAsEmpty
 %! [a, b, c, d] = strread ("1,2,3,NN,5,6\n", "%d%d%d%f", "delimiter", ",", "TreatAsEmpty", "NN");
 %! assert (c, int32 ([3; 0]));
 %! assert (d, [NaN; NaN]);
 
 %!test
diff --git a/scripts/plot/util/__pltopt__.m b/scripts/plot/util/__pltopt__.m
--- a/scripts/plot/util/__pltopt__.m
+++ b/scripts/plot/util/__pltopt__.m
@@ -230,17 +230,17 @@ function [options, valid] = __pltopt1__ 
   if (have_linestyle && ! have_marker)
     options.marker = "none";
   endif
 
 endfunction
 
 
 ## Only cursory testing.  Real testing done by appearance of plots.
-%test
+%!test
 %! opts = __pltopt__ ("abc", "");
 %! assert (opts.color, []);
 %! assert (opts.linestyle, []);
 %! assert (opts.marker, []);
 %! assert (opts.key, "");
 %!test
 %! opts = __pltopt__ ("abc", "r:x");
 %! assert (opts.color, [1 0 0]);
diff --git a/scripts/signal/fftshift.m b/scripts/signal/fftshift.m
--- a/scripts/signal/fftshift.m
+++ b/scripts/signal/fftshift.m
@@ -142,14 +142,14 @@ endfunction
 %!test
 %! x = [0:3];
 %! x = x + x' + reshape (x, [1 1 4]);
 %! y1 = [4 5 2 3; 5 6 3 4; 2 3 0 1; 3 4 1 2];
 %! y = fftshift (x);
 %! assert (y, reshape ([y1 + 2, y1 + 3, y1, y1 + 1], [4 4 4]));
 %! assert (fftshift (y), x);
 
-%% Test input validation
+## Test input validation
 %!error fftshift ()
 %!error fftshift (1, 2, 3)
 %!error fftshift (0:3, -1)
 %!error fftshift (0:3, 0:3)
 
diff --git a/scripts/signal/ifftshift.m b/scripts/signal/ifftshift.m
--- a/scripts/signal/ifftshift.m
+++ b/scripts/signal/ifftshift.m
@@ -127,14 +127,14 @@ endfunction
 %!test
 %! x = [0:3];
 %! x = x + x' + reshape (x, [1 1 4]);
 %! y1 = [4 5 2 3; 5 6 3 4; 2 3 0 1; 3 4 1 2];
 %! y = ifftshift (x);
 %! assert (y, reshape ([y1 + 2, y1 + 3, y1, y1 + 1], [4 4 4]));
 %! assert (ifftshift (y), x);
 
-%% Test input validation
+## Test input validation
 %!error ifftshift ()
 %!error ifftshift (1, 2, 3)
 %!error ifftshift (0:3, -1)
 %!error ifftshift (0:3, 0:3)
 
diff --git a/scripts/special-matrix/gallery.m b/scripts/special-matrix/gallery.m
--- a/scripts/special-matrix/gallery.m
+++ b/scripts/special-matrix/gallery.m
@@ -2897,18 +2897,18 @@ function B = qmult (A)
     A(i,:) = d(i)*A(i,:);
   endfor
   A(n,:) = A(n,:) * sign (randn);
   B = A;
 endfunction
 
 ## BIST testing for just a few functions to verify that the main gallery
 ## dispatch function works.
-%assert (gallery ("clement", 3), [0 1 0; 2 0 2; 0 1 0])
-%assert (gallery ("invhess", 2), [1 -1; 1 2])
+%!assert (gallery ("clement", 3), [0 1 0; 2 0 2; 0 1 0])
+%!assert (gallery ("invhess", 2), [1 -1; 1 2])
 
 ## Test input validation of main dispatch function only
 %!error gallery ()
 %!error <NAME must be a string> gallery (123)
 %!error <matrix binomial not implemented> gallery ("binomial")
 %!error <unknown matrix with NAME foobar> gallery ("foobar")
 
 %!assert (gallery ("minij", 4), [1 1 1 1; 1 2 2 2; 1 2 3 3; 1 2 3 4])
diff --git a/scripts/strings/strmatch.m b/scripts/strings/strmatch.m
--- a/scripts/strings/strmatch.m
+++ b/scripts/strings/strmatch.m
@@ -106,17 +106,17 @@ endfunction
 %!assert (strmatch ("apple", {"apple pie"; "apple juice"; "tomato"}), [1; 2])
 %!assert (strmatch ("apple pie", "apple"), [])
 %!assert (strmatch ("a ", "a"), 1)
 %!assert (strmatch ("a", "a \0", "exact"), 1)
 %!assert (strmatch ("a b", {"a b", "a c", "c d"}), 1)
 %!assert (strmatch ("", {"", "foo", "bar", ""}), [1, 4])
 %!assert (strmatch ('', { '', '% comment', 'var a = 5', ''}, 'exact'), [1,4])
 
-%% Test input validation
+## Test input validation
 %!error <Invalid call to strmatch> strmatch ()
 %!error <Invalid call to strmatch> strmatch ("a")
 %!error <Invalid call to strmatch> strmatch ("a", "aaa", "exact", 1)
 %!error <S must be a string> strmatch (1, "aaa")
 %!error <S must be a string> strmatch (char ("a", "bb"), "aaa")
 %!error <A must be a string> strmatch ("a", 1)
 %!error <A must be a string> strmatch ("a", {"hello", [1]})
 
diff --git a/scripts/testfun/test.m b/scripts/testfun/test.m
--- a/scripts/testfun/test.m
+++ b/scripts/testfun/test.m
@@ -890,29 +890,28 @@ endfunction
 
 ## Test test() input validation
 %!error <NAME must be a string> test (1)
 %!error <second argument must be a string> test ("ls", 1)
 %!error test ([], "normal")
 
 ## All of the following tests should fail.  These tests should
 ## be disabled unless you are developing test() since users don't
-## like to be presented with expected failures.  I use '% !' to disable.
-% !test   error("---------Failure tests.  Use test('test','verbose',1)");
-% !test   assert([a,b,c],[1,3,6]);   # variables have wrong values
-% !invalid                   # unknown block type
-% !error  toeplitz([1,2,3]); # correct usage
-% !test   syntax errors)     # syntax errors fail properly
-% !shared garbage in         # variables must be comma separated
-% !error  syntax++error      # error test fails on syntax errors
-% !error  "succeeds.";       # error test fails if code succeeds
-% !error <wrong pattern> error("message")  # error pattern must match
-% !demo   with syntax error  # syntax errors in demo fail properly
-% !shared a,b,c
-% !demo                      # shared variables not available in demo
-% ! assert (exist ("a", "var"))
-% !error
-% ! test ('/etc/passwd');
-% ! test ("nonexistent file");
-% ! ## These don't signal an error, so the test for an error fails. Note
-% ! ## that the call doesn't reference the current fid (it is unavailable),
-% ! ## so of course the informational message is not printed in the log.
-
+## like to be presented with expected failures.
+## %!test   error("---------Failure tests.  Use test('test','verbose',1)");
+## %!test   assert([a,b,c],[1,3,6]);   # variables have wrong values
+## %!invalid                   # unknown block type
+## %!error  toeplitz([1,2,3]); # correct usage
+## %!test   syntax errors)     # syntax errors fail properly
+## %!shared garbage in         # variables must be comma separated
+## %!error  syntax++error      # error test fails on syntax errors
+## %!error  "succeeds.";       # error test fails if code succeeds
+## %!error <wrong pattern> error("message")  # error pattern must match
+## %!demo   with syntax error  # syntax errors in demo fail properly
+## %!shared a,b,c
+## %!demo                      # shared variables not available in demo
+## %! assert (exist ("a", "var"))
+## %!error
+## %! test ('/etc/passwd');
+## %! test ("nonexistent file");
+## %! ## These don't signal an error, so the test for an error fails. Note
+## %! ## that the call doesn't reference the current fid (it is unavailable),
+## %! ## so of course the informational message is not printed in the log.
