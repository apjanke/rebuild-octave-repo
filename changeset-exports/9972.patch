# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1260585722 18000
#      Fri Dec 11 21:42:02 2009 -0500
# Node ID d32a6cc0193b308048f0cfff94303382c6c4bca8
# Parent  d0680ace5fcb1eabb79af1bbddb491bf70fd3907
unshare dynamic properties

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,36 @@
+2009-12-11  John W. Eaton  <jwe@octave.org>
+
+	* graphics.h.in (base_properties::all_dynamic_properties):
+	No longer static.
+	(base_properties::set (const caseless_str&, const octave_value&)):
+	Only provide decl, not definition.
+	(base_properties::set (const caseless_str&, const std::string&,
+	const octave_value&)): Delete.
+	(base_properties::dynamic_properties): Rename from
+	all_dynamic_properties.  No longer static.  Now protected.
+	(base_properties::has_dynamic_property,
+	base_properties::dynamic_property_names,
+	base_properties::set_dynamic): Omit class name argument.
+	* graphics.cc (base_properties::all_dynamic_properties):
+	Delete obsolete definition.
+	(base_properties::dynamic_property_names): Now const.
+	Omit class name argument.  Simply return dynamic_properties set.
+	(base_properties::has_dynamic_property): Omit class name argument.
+	Simply return dynamic_properties set.  Don't pass class name to
+	dynamic_property_names function.
+	(base_properties::set_dynamic): Omit class name argument.
+	Dynamic_properties is no longer a map.
+
+	* genprops.awk: Omit class name from arguments of generated
+	base_properties::all_property_names and base_properties::set
+	functions.  Don't pass class name to base_properties::set in
+	generated derived class set functions.
+
 2009-12-11  John W. Eaton  <jwe@octave.org>
 
 	* Makefile.am (DOCSTRINGS): Use $(cp_update_rule) instead of
 	cp -a --update.
 
 2009-12-10  Rik <octave@nomad.inbox5.com>
 
 	* Makefile.am: distclean symbolic links for OCT_FILES
diff --git a/src/genprops.awk b/src/genprops.awk
--- a/src/genprops.awk
+++ b/src/genprops.awk
@@ -259,22 +259,17 @@ function emit_common_declarations ()
   printf ("private:\n  static std::string go_name;\n\n");
 }
 
 function emit_declarations ()
 {
   if (class_name && ! base)
     emit_common_declarations();
 
-  printf ("public:\n\n\n  static std::set<std::string> core_property_names (void);\n\n  static bool has_core_property (const caseless_str& pname);\n\n  std::set<std::string> all_property_names (");
-  if (base)
-    printf ("const std::string& cname");
-  else
-    printf ("void");
-  printf (") const;\n\n");
+  printf ("public:\n\n\n  static std::set<std::string> core_property_names (void);\n\n  static bool has_core_property (const caseless_str& pname);\n\n  std::set<std::string> all_property_names (void) const;\n\n");
 
   if (! base)
     printf ("  bool has_property (const caseless_str& pname) const;\n\n");
 
   if (idx > 0)
     print (base ? "protected:\n" : "private:\n");
 
   for (i = 1; i <= idx; i++)
@@ -434,17 +429,17 @@ function emit_source ()
       }
     }
 
     printf ("  init ();\n}\n\n");
 
     ## set method
 
     if (base)
-      printf ("void\nbase_properties::set (const caseless_str& pname, const std::string& cname, const octave_value& val)\n{\n");
+      printf ("void\nbase_properties::set (const caseless_str& pname, const octave_value& val)\n{\n");
     else
       printf ("void\n%s::properties::set (const caseless_str& pname_arg, const octave_value& val)\n{\n",
               class_name);
 
     if (! base)
       printf ("  const std::set<std::string>& pnames = all_property_names ();\n\n  caseless_str pname = validate_property_name (\"get\", go_name, pnames, pname_arg);\n\n  if (error_state)\n    return;\n\n");
 
     first = 1;
@@ -455,19 +450,19 @@ function emit_source ()
       {
         printf ("  %sif (pname.compare (\"%s\"))\n    set_%s (val);\n",
                 (first == 0 ? "else " : ""), name[i], name[i]);
         first = 0;
       }
     }
 
     if (base)
-      printf ("  else\n    set_dynamic (pname, cname, val);\n}\n\n");
+      printf ("  else\n    set_dynamic (pname, val);\n}\n\n");
     else
-      printf ("  else\n    base_properties::set (pname, \"%s\", val);\n}\n\n", class_name);
+      printf ("  else\n    base_properties::set (pname, val);\n}\n\n");
 
     ## get "all" method
 
     if (base)
     {
       printf ("octave_value\nbase_properties::get (bool all) const\n{\n");
       printf ("  Octave_map m = get_dynamic (all).map_value ();\n\n");
     }
@@ -605,26 +600,21 @@ function emit_source ()
       printf ("%s::properties", class_name);
     printf ("::has_core_property (const caseless_str& pname)\n{\n  std::set<std::string> pnames = core_property_names ();\n\n  return pnames.find (pname) != pnames.end ();\n}\n\n", class_name);
 
     printf ("std::set<std::string>\n");
     if (base)
 	printf ("base_properties");
     else
       printf ("%s::properties", class_name);
-    printf ("::all_property_names (");
+    printf ("::all_property_names (void) const\n{\n  static std::set<std::string> all_pnames = core_property_names ();\n\n");
     if (base)
-      printf ("const std::string& cname");
+      printf ("  std::set<std::string> retval = all_pnames;\n  std::set<std::string> dyn_props = dynamic_property_names ();\n  retval.insert (dyn_props.begin (), dyn_props.end ());\n  for (std::map<caseless_str, property, cmp_caseless_str>::const_iterator p = all_props.begin ();\n       p != all_props.end (); p++)\n    retval.insert (p->first);\n\n  return retval;\n}\n\n");
     else
-      printf ("void");
-    printf (") const\n{\n  static std::set<std::string> all_pnames = core_property_names ();\n\n");
-    if (base)
-      printf ("  std::set<std::string> retval = all_pnames;\n  std::set<std::string> dyn_props = dynamic_property_names (cname);\n  retval.insert (dyn_props.begin (), dyn_props.end ());\n  for (std::map<caseless_str, property, cmp_caseless_str>::const_iterator p = all_props.begin ();\n       p != all_props.end (); p++)\n    retval.insert (p->first);\n\n  return retval;\n}\n\n");
-    else
-      printf ("  std::set<std::string> retval = all_pnames;\n  std::set<std::string> base_props = base_properties::all_property_names (\"%s\");\n  retval.insert (base_props.begin (), base_props.end ());\n\n  return retval;\n}\n\n", class_name);
+      printf ("  std::set<std::string> retval = all_pnames;\n  std::set<std::string> base_props = base_properties::all_property_names ();\n  retval.insert (base_props.begin (), base_props.end ());\n\n  return retval;\n}\n\n");
 
     if (! base)
       printf ("bool\n%s::properties::has_property (const caseless_str& pname) const\n{\n  std::set<std::string> pnames = all_property_names ();\n\n  return pnames.find (pname) != pnames.end ();\n}\n\n", class_name);
   }
 }
 
 BEGIN {
   printf ("// DO NOT EDIT!  Generated automatically by genprops.awk.\n\n")
diff --git a/src/graphics.cc b/src/graphics.cc
--- a/src/graphics.cc
+++ b/src/graphics.cc
@@ -1799,48 +1799,44 @@ base_properties::get_dynamic (bool all) 
   for (std::map<caseless_str, property, cmp_caseless_str>::const_iterator it = all_props.begin ();
        it != all_props.end (); ++it)
     if (all || ! it->second.is_hidden ())
       m.assign (it->second.get_name (), it->second.get ());
 
   return m;
 }
 
-std::map<std::string, std::set<std::string> > base_properties::all_dynamic_properties;
-
 std::set<std::string>
-base_properties::dynamic_property_names (const std::string& cname)
-{
-  return all_dynamic_properties[cname];
+base_properties::dynamic_property_names (void) const
+{
+  return dynamic_properties;
 }
 
 bool
-base_properties::has_dynamic_property (const std::string& pname,
-				       const std::string& cname)
-{
-  const std::set<std::string>& dynprops = dynamic_property_names (cname);
+base_properties::has_dynamic_property (const std::string& pname)
+{
+  const std::set<std::string>& dynprops = dynamic_property_names ();
 
   return dynprops.find (pname) != dynprops.end ();
 }
 
 void
 base_properties::set_dynamic (const caseless_str& pname,
-			      const std::string& cname,
 			      const octave_value& val)
 {
   std::map<caseless_str, property, cmp_caseless_str>::iterator it = all_props.find (pname);
 
   if (it != all_props.end ())
     it->second.set (val);
   else
     error ("set: unknown property \"%s\"", pname.c_str ());
 
   if (! error_state)
     {
-      all_dynamic_properties[cname].insert (pname);
+      dynamic_properties.insert (pname);
 
       mark_modified ();
     }
 }
 
 property
 base_properties::get_property_dynamic (const caseless_str& name)
 {
diff --git a/src/graphics.h.in b/src/graphics.h.in
--- a/src/graphics.h.in
+++ b/src/graphics.h.in
@@ -1637,23 +1637,17 @@ public:
 
   void insert_property (const std::string& name, property p)
     {
       p.set_name (name);
       p.set_parent (__myhandle__);
       all_props[name] = p;
     }
 
-  virtual void set (const caseless_str&, const octave_value&)
-  {
-    panic_impossible ();
-  }
-
-  void set (const caseless_str& pname, const std::string& cname,
-	    const octave_value& val);
+  virtual void set (const caseless_str&, const octave_value&);
 
   virtual octave_value get (const caseless_str& pname) const;
 
   virtual octave_value get (const std::string& pname) const
   {
     return get (caseless_str (pname));
   }
 
@@ -1739,26 +1733,24 @@ public:
   virtual bool is_climinclude (void) const { return false; }
   virtual bool is_aliminclude (void) const { return false; }
 
   bool is_handle_visible (void) const
   {
     return ! handlevisibility.is ("off");
   }
 
-  static std::map<std::string, std::set<std::string> > all_dynamic_properties;
- 
-  static std::set<std::string> dynamic_property_names (const std::string& cname);
-
-  static bool has_dynamic_property (const std::string& pname,
-				    const std::string& cname);
+  std::set<std::string> dynamic_property_names (void) const;
+
+  bool has_dynamic_property (const std::string& pname);
 
 protected:
-  void set_dynamic (const caseless_str& pname, const std::string& cname,
-		    const octave_value& val);
+  std::set<std::string> dynamic_properties;
+ 
+  void set_dynamic (const caseless_str& pname, const octave_value& val);
 
   octave_value get_dynamic (const caseless_str& pname) const;
 
   octave_value get_dynamic (bool all = false) const;
 
   property get_property_dynamic (const caseless_str& pname);
 
   BEGIN_BASE_PROPERTIES
