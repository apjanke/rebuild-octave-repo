# HG changeset patch
# User jwe
# Date 813977232 0
#      Wed Oct 18 00:47:12 1995 +0000
# Node ID 1da33230f4241bf0f4042da3cac676c82ad40fe7
# Parent  967c9a840e7fe9970a7504b2bea0fcd5b4b7f067
[project @ 1995-10-18 00:47:12 by jwe]

diff --git a/src/xpow.cc b/src/xpow.cc
--- a/src/xpow.cc
+++ b/src/xpow.cc
@@ -33,16 +33,17 @@ Software Foundation, 59 Temple Place - S
 #include "CDiagMatrix.h"
 #include "CMatrix.h"
 #include "EIG.h"
 #include "dDiagMatrix.h"
 #include "dMatrix.h"
 
 #include "error.h"
 #include "tree-const.h"
+#include "utils.h"
 #include "xpow.h"
 
 // This function also appears in tree-const.cc.  Maybe it should be a
 // member function of the Matrix class.
 
 static int
 any_element_is_negative (const Matrix& a)
 {
@@ -50,16 +51,24 @@ any_element_is_negative (const Matrix& a
   int nc = a.columns ();
   for (int j = 0; j < nc; j++)
     for (int i = 0; i < nr; i++)
       if (a.elem (i, j) < 0.0)
 	return 1;
   return 0;
 }
 
+static inline int
+xisint (double x)
+{
+  return (D_NINT (x) == x
+	  && ((x >= 0 && x < INT_MAX)
+	      || (x <= 0 && x > INT_MIN)));
+}
+
 // Safer pow functions.
 //
 //       op2 \ op1:   s   m   cs   cm
 //            +--   +---+---+----+----+
 //   scalar   |     | 1 | 5 |  7 | 11 |
 //                  +---+---+----+----+
 //   matrix         | 2 | E |  8 |  E |
 //                  +---+---+----+----+
@@ -72,20 +81,20 @@ any_element_is_negative (const Matrix& a
 
 // -*- 1 -*-
 tree_constant
 xpow (double a, double b)
 {
   if (a < 0.0 && (int) b != b)
     {
       Complex atmp (a);
-      return tree_constant (pow (atmp, b));
+      return pow (atmp, b);
     }
   else
-    return tree_constant (pow (a, b));
+    return pow (a, b);
 }
 
 // -*- 2 -*-
 tree_constant
 xpow (double a, const Matrix& b)
 {
   tree_constant retval;
 
@@ -105,62 +114,62 @@ xpow (double a, const Matrix& b)
 	  Complex elt = lambda.elem (i);
 	  if (imag (elt) == 0.0)
 	    lambda.elem (i) = pow (a, real (elt));
 	  else
 	    lambda.elem (i) = pow (a, elt);
 	}
       ComplexDiagMatrix D (lambda);
 
-      ComplexMatrix result = Q * D * Q.inverse ();
-      retval = tree_constant (result);
+      retval = ComplexMatrix (Q * D * Q.inverse ());
     }
 
   return retval;
 }
 
 // -*- 3 -*-
 tree_constant
 xpow (double a, const Complex& b)
 {
   Complex result;
   Complex atmp (a);
   result = pow (atmp, b);
-  return tree_constant (result);
+  return result;
 }
 
 // -*- 4 -*-
 tree_constant
 xpow (double a, const ComplexMatrix& b)
 {
   tree_constant retval;
 
   int nr = b.rows ();
   int nc = b.columns ();
 
   if (nr == 0 || nc == 0 || nr != nc)
-    error ("for x^A, A must be square");
+    {
+      error ("for x^A, A must be square");
+    }
   else
     {
       EIG b_eig (b);
       ComplexColumnVector lambda (b_eig.eigenvalues ());
       ComplexMatrix Q (b_eig.eigenvectors ());
 
       for (int i = 0; i < nr; i++)
 	{
 	  Complex elt = lambda.elem (i);
 	  if (imag (elt) == 0.0)
 	    lambda.elem (i) = pow (a, real (elt));
 	  else
 	    lambda.elem (i) = pow (a, elt);
 	}
       ComplexDiagMatrix D (lambda);
 
-      ComplexMatrix result = Q * D * Q.inverse ();
-      retval = tree_constant (result);
+      retval = ComplexMatrix (Q * D * Q.inverse ());
     }
 
   return retval;
 }
 
 // -*- 5 -*-
 tree_constant
 xpow (const Matrix& a, double b)
@@ -168,101 +177,108 @@ xpow (const Matrix& a, double b)
   tree_constant retval;
 
   int nr = a.rows ();
   int nc = a.columns ();
 
   if (nr == 0 || nc == 0 || nr != nc)
     {
       error ("for A^b, A must be square");
-      return retval;
     }
-
-  if ((int) b == b)
+  else
     {
-      int btmp = (int) b;
-      if (btmp == 0)
+      if ((int) b == b)
 	{
-	  DiagMatrix result (nr, nr, 1.0);
-	  retval = tree_constant (result);
+	  int btmp = (int) b;
+	  if (btmp == 0)
+	    {
+	      retval = DiagMatrix (nr, nr, 1.0);
+	    }
+	  else
+	    {
+	      // Too much copying?
+	      // XXX FIXME XXX -- we shouldn't do this if the exponent is
+	      // large...
+
+	      Matrix atmp;
+	      if (btmp < 0)
+		{
+		  btmp = -btmp;
+		  atmp = a.inverse ();
+		}
+	      else
+		atmp = a;
+
+	      Matrix result (atmp);
+	      for (int i = 1; i < btmp; i++)
+		result = result * atmp;
+
+	      retval = result;
+	    }
 	}
       else
 	{
-	  // Too much copying?
-	  // XXX FIXME XXX -- we shouldn't do this if the exponent is
-	  // large...
+	  EIG a_eig (a);
+	  ComplexColumnVector lambda (a_eig.eigenvalues ());
+	  ComplexMatrix Q (a_eig.eigenvectors ());
+
+	  for (int i = 0; i < nr; i++)
+	    lambda.elem (i) = pow (lambda.elem (i), b);
+
+	  ComplexDiagMatrix D (lambda);
+
+	  retval = ComplexMatrix (Q * D * Q.inverse ());
+	}
+    }
 
-	  Matrix atmp;
-	  if (btmp < 0)
-	    {
-	      btmp = -btmp;
-	      atmp = a.inverse ();
-	    }
-	  else
-	    atmp = a;
+  return retval;
+}
 
-	  Matrix result (atmp);
-	  for (int i = 1; i < btmp; i++)
-	    result = result * atmp;
+// -*- 6 -*-
+tree_constant
+xpow (const Matrix& a, const Complex& b)
+{
+  tree_constant retval;
 
-	  retval = tree_constant (result);
-	}
+  int nr = a.rows ();
+  int nc = a.columns ();
+
+  if (nr == 0 || nc == 0 || nr != nc)
+    {
+      error ("for A^b, A must be square");
     }
   else
     {
       EIG a_eig (a);
       ComplexColumnVector lambda (a_eig.eigenvalues ());
       ComplexMatrix Q (a_eig.eigenvectors ());
 
       for (int i = 0; i < nr; i++)
 	lambda.elem (i) = pow (lambda.elem (i), b);
 
       ComplexDiagMatrix D (lambda);
 
-      ComplexMatrix result = Q * D * Q.inverse ();
-      retval = tree_constant (result);
+      retval = ComplexMatrix (Q * D * Q.inverse ());
     }
 
   return retval;
 }
 
-// -*- 6 -*-
-tree_constant
-xpow (const Matrix& a, const Complex& b)
-{
-  int nr = a.rows ();
-  int nc = a.columns ();
-
-  if (nr == 0 || nc == 0 || nr != nc)
-    {
-      error ("for A^b, A must be square");
-      return tree_constant ();
-    }
-
-  EIG a_eig (a);
-  ComplexColumnVector lambda (a_eig.eigenvalues ());
-  ComplexMatrix Q (a_eig.eigenvectors ());
-
-  for (int i = 0; i < nr; i++)
-    lambda.elem (i) = pow (lambda.elem (i), b);
-
-  ComplexDiagMatrix D (lambda);
-
-  ComplexMatrix result = Q * D * Q.inverse ();
-
-  return tree_constant (result);
-}
-
 // -*- 7 -*-
 tree_constant
 xpow (const Complex& a, double b)
 {
   Complex result;
-  result = pow (a, b);
-  return tree_constant (result);
+
+  if (xisint (b))
+    result = pow (a, (int) b);
+  else
+    result = pow (a, b);
+
+  return result;
 }
 
 // -*- 8 -*-
 tree_constant
 xpow (const Complex& a, const Matrix& b)
 {
   tree_constant retval;
 
@@ -284,61 +300,61 @@ xpow (const Complex& a, const Matrix& b)
 	  Complex elt = lambda.elem (i);
 	  if (imag (elt) == 0.0)
 	    lambda.elem (i) = pow (a, real (elt));
 	  else
 	    lambda.elem (i) = pow (a, elt);
 	}
       ComplexDiagMatrix D (lambda);
 
-      ComplexMatrix result = Q * D * Q.inverse ();
-      retval = tree_constant (result);
+      retval = ComplexMatrix (Q * D * Q.inverse ());
     }
 
   return retval;
 }
 
 // -*- 9 -*-
 tree_constant
 xpow (const Complex& a, const Complex& b)
 {
   Complex result;
   result = pow (a, b);
-  return tree_constant (result);
+  return result;
 }
 
 // -*- 10 -*-
 tree_constant
 xpow (const Complex& a, const ComplexMatrix& b)
 {
   tree_constant retval;
 
   int nr = b.rows ();
   int nc = b.columns ();
 
   if (nr == 0 || nc == 0 || nr != nc)
-    error ("for x^A, A must be square");
+    {
+      error ("for x^A, A must be square");
+    }
   else
     {
       EIG b_eig (b);
       ComplexColumnVector lambda (b_eig.eigenvalues ());
       ComplexMatrix Q (b_eig.eigenvectors ());
 
       for (int i = 0; i < nr; i++)
 	{
 	  Complex elt = lambda.elem (i);
 	  if (imag (elt) == 0.0)
 	    lambda.elem (i) = pow (a, real (elt));
 	  else
 	    lambda.elem (i) = pow (a, elt);
 	}
       ComplexDiagMatrix D (lambda);
 
-      ComplexMatrix result = Q * D * Q.inverse ();
-      retval = tree_constant (result);
+      retval = ComplexMatrix (Q * D * Q.inverse ());
     }
 
   return retval;
 }
 
 // -*- 11 -*-
 tree_constant
 xpow (const ComplexMatrix& a, double b)
@@ -346,94 +362,96 @@ xpow (const ComplexMatrix& a, double b)
   tree_constant retval;
 
   int nr = a.rows ();
   int nc = a.columns ();
 
   if (nr == 0 || nc == 0 || nr != nc)
     {
       error ("for A^b, A must be square");
-      return retval;
     }
-
-  if ((int) b == b)
+  else
     {
-      int btmp = (int) b;
-      if (btmp == 0)
+      if ((int) b == b)
 	{
-	  DiagMatrix result (nr, nr, 1.0);
-	  retval = tree_constant (result);
+	  int btmp = (int) b;
+	  if (btmp == 0)
+	    {
+	      retval = DiagMatrix (nr, nr, 1.0);
+	    }
+	  else
+	    {
+	      // Too much copying?
+	      // XXX FIXME XXX -- we shouldn't do this if the exponent is
+	      // large...
+
+	      ComplexMatrix atmp;
+	      if (btmp < 0)
+		{
+		  btmp = -btmp;
+		  atmp = a.inverse ();
+		}
+	      else
+		atmp = a;
+
+	      ComplexMatrix result (atmp);
+	      for (int i = 1; i < btmp; i++)
+		result = result * atmp;
+
+	      retval = result;
+	    }
 	}
       else
 	{
-	  // Too much copying?
-	  // XXX FIXME XXX -- we shouldn't do this if the exponent is
-	  // large...
+	  EIG a_eig (a);
+	  ComplexColumnVector lambda (a_eig.eigenvalues ());
+	  ComplexMatrix Q (a_eig.eigenvectors ());
+
+	  for (int i = 0; i < nr; i++)
+	    lambda.elem (i) = pow (lambda.elem (i), b);
+
+	  ComplexDiagMatrix D (lambda);
+
+	  retval = ComplexMatrix (Q * D * Q.inverse ());
+	}
+    }
 
-	  ComplexMatrix atmp;
-	  if (btmp < 0)
-	    {
-	      btmp = -btmp;
-	      atmp = a.inverse ();
-	    }
-	  else
-	    atmp = a;
+  return retval;
+}
 
-	  ComplexMatrix result (atmp);
-	  for (int i = 1; i < btmp; i++)
-	    result = result * atmp;
+// -*- 12 -*-
+tree_constant
+xpow (const ComplexMatrix& a, const Complex& b)
+{
+  tree_constant retval;
 
-	  retval = tree_constant (result);
-	}
+  int nr = a.rows ();
+  int nc = a.columns ();
+
+  if (nr == 0 || nc == 0 || nr != nc)
+    {
+      error ("for A^b, A must be square");
     }
   else
     {
       EIG a_eig (a);
       ComplexColumnVector lambda (a_eig.eigenvalues ());
       ComplexMatrix Q (a_eig.eigenvectors ());
 
       for (int i = 0; i < nr; i++)
 	lambda.elem (i) = pow (lambda.elem (i), b);
 
       ComplexDiagMatrix D (lambda);
 
-      ComplexMatrix result = Q * D * Q.inverse ();
-      retval = tree_constant (result);
+      retval = ComplexMatrix (Q * D * Q.inverse ());
     }
 
   return retval;
 }
 
-// -*- 12 -*-
-tree_constant
-xpow (const ComplexMatrix& a, const Complex& b)
-{
-  int nr = a.rows ();
-  int nc = a.columns ();
-
-  if (nr == 0 || nc == 0 || nr != nc)
-    {
-      error ("for A^b, A must be square");
-      return tree_constant ();
-    }
-
-  EIG a_eig (a);
-  ComplexColumnVector lambda (a_eig.eigenvalues ());
-  ComplexMatrix Q (a_eig.eigenvectors ());
-
-  for (int i = 0; i < nr; i++)
-    lambda.elem (i) = pow (lambda.elem (i), b);
-
-  ComplexDiagMatrix D (lambda);
-
-  ComplexMatrix result = Q * D * Q.inverse ();
-
-  return tree_constant (result);
-}
-
 // Safer pow functions that work elementwise for matrices.
 //
 //       op2 \ op1:   s   m   cs   cm
 //            +--   +---+---+----+----+
 //   scalar   |     | * | 3 |  * |  9 |
 //                  +---+---+----+----+
 //   matrix         | 1 | 4 |  7 | 10 |
 //                  +---+---+----+----+
@@ -458,26 +476,26 @@ elem_xpow (double a, const Matrix& b)
   if (a < 0.0)
     {
       Complex atmp (a);
       ComplexMatrix result (nr, nc);
       for (int j = 0; j < nc; j++)
 	for (int i = 0; i < nr; i++)
 	  result.elem (i, j) = pow (atmp, b.elem (i, j));
 
-      retval = tree_constant (result);
+      retval = result;
     }
   else
     {
       Matrix result (nr, nc);
       for (int j = 0; j < nc; j++)
 	for (int i = 0; i < nr; i++)
 	  result.elem (i, j) = pow (a, b.elem (i, j)); 
 
-      retval = tree_constant (result);
+      retval = result;
     }
 
   return retval;
 }
 
 // -*- 2 -*-
 tree_constant
 elem_xpow (double a, const ComplexMatrix& b)
@@ -485,17 +503,17 @@ elem_xpow (double a, const ComplexMatrix
   int nr = b.rows ();
   int nc = b.columns ();
 
   ComplexMatrix result (nr, nc);
   for (int j = 0; j < nc; j++)
     for (int i = 0; i < nr; i++)
       result.elem (i, j) = pow (a, b.elem (i, j));
 
-  return tree_constant (result);
+  return result;
 }
 
 // -*- 3 -*-
 tree_constant
 elem_xpow (const Matrix& a, double b)
 {
   tree_constant retval;
 
@@ -507,35 +525,37 @@ elem_xpow (const Matrix& a, double b)
       ComplexMatrix result (nr, nc);
       for (int j = 0; j < nc; j++)
 	for (int i = 0; i < nr; i++)
 	  {
 	    Complex atmp (a.elem (i, j));
 	    result.elem (i, j) = pow (atmp, b);
 	  }
 
-      retval = tree_constant (result);
+      retval = result;
     }
   else
     {
       Matrix result (nr, nc);
       for (int j = 0; j < nc; j++)
 	for (int i = 0; i < nr; i++)
 	  result.elem (i, j) = pow (a.elem (i, j), b);
 
-      retval = tree_constant (result);
+      retval = result;
     }
 
   return retval;
 }
 
 // -*- 4 -*-
 tree_constant
 elem_xpow (const Matrix& a, const Matrix& b)
 {
+  tree_constant retval;
+
   int nr = a.rows ();
   int nc = a.columns ();
 
   assert (nr == b.rows () && nc == b.columns ());
 
   int convert_to_complex = 0;
   for (int j = 0; j < nc; j++)
     for (int i = 0; i < nr; i++)
@@ -557,153 +577,178 @@ elem_xpow (const Matrix& a, const Matrix
 
       for (int j = 0; j < nc; j++)
 	for (int i = 0; i < nr; i++)
 	  {
 	    Complex atmp (a.elem (i, j));
 	    Complex btmp (b.elem (i, j));
 	    complex_result.elem (i, j) = pow (atmp, btmp);
 	  }
-      return tree_constant (complex_result);
+
+      retval = complex_result;
     }
   else
     {
       Matrix result (nr, nc);
 
       for (int j = 0; j < nc; j++)
 	for (int i = 0; i < nr; i++)
 	  result.elem (i, j) = pow (a.elem (i, j), b.elem (i, j));
 
-      return tree_constant (result);
+      retval = result;
     }
+
+  return retval;
 }
 
 // -*- 5 -*-
 tree_constant
 elem_xpow (const Matrix& a, const Complex& b)
 {
   int nr = a.rows ();
   int nc = a.columns ();
 
   ComplexMatrix result (nr, nc);
   for (int j = 0; j < nc; j++)
     for (int i = 0; i < nr; i++)
       result.elem (i, j) = pow (a.elem (i, j), b);
 
-  return tree_constant (result);
+  return result;
 }
 
 // -*- 6 -*-
 tree_constant
 elem_xpow (const Matrix& a, const ComplexMatrix& b)
 {
   int nr = a.rows ();
   int nc = a.columns ();
 
   assert (nr == b.rows () && nc == b.columns ());
 
   ComplexMatrix result (nr, nc);
   for (int j = 0; j < nc; j++)
     for (int i = 0; i < nr; i++)
       result.elem (i, j) = pow (a.elem (i, j), b.elem (i, j));
 
-  return tree_constant (result);
+  return result;
 }
 
 // -*- 7 -*-
 tree_constant
 elem_xpow (const Complex& a, const Matrix& b)
 {
   int nr = b.rows ();
   int nc = b.columns ();
 
   ComplexMatrix result (nr, nc);
   for (int j = 0; j < nc; j++)
     for (int i = 0; i < nr; i++)
-      result.elem (i, j) = pow (a, b.elem (i, j));
+      {
+	double btmp = b.elem (i, j);
+	if (xisint (btmp))
+	  result.elem (i, j) = pow (a, (int) btmp);
+	else
+	  result.elem (i, j) = pow (a, btmp);
+      }
 
-  return tree_constant (result);
+  return result;
 }
 
 // -*- 8 -*-
 tree_constant
 elem_xpow (const Complex& a, const ComplexMatrix& b)
 {
   int nr = b.rows ();
   int nc = b.columns ();
 
   ComplexMatrix result (nr, nc);
   for (int j = 0; j < nc; j++)
     for (int i = 0; i < nr; i++)
       result.elem (i, j) = pow (a, b.elem (i, j));
 
-  return tree_constant (result);
+  return result;
 }
 
 // -*- 9 -*-
 tree_constant
 elem_xpow (const ComplexMatrix& a, double b)
 {
   int nr = a.rows ();
   int nc = a.columns ();
 
   ComplexMatrix result (nr, nc);
-  for (int j = 0; j < nc; j++)
-    for (int i = 0; i < nr; i++)
-      result.elem (i, j) = pow (a.elem (i, j), b);
 
-  return tree_constant (result);
+  if (xisint (b))
+    {
+      for (int j = 0; j < nc; j++)
+	for (int i = 0; i < nr; i++)
+	  result.elem (i, j) = pow (a.elem (i, j), (int) b);
+    }
+  else
+    {
+      for (int j = 0; j < nc; j++)
+	for (int i = 0; i < nr; i++)
+	  result.elem (i, j) = pow (a.elem (i, j), b);
+    }
+
+  return result;
 }
 
 // -*- 10 -*-
 tree_constant
 elem_xpow (const ComplexMatrix& a, const Matrix& b)
 {
   int nr = a.rows ();
   int nc = a.columns ();
 
   assert (nr == b.rows () && nc == b.columns ());
 
   ComplexMatrix result (nr, nc);
   for (int j = 0; j < nc; j++)
     for (int i = 0; i < nr; i++)
-      result.elem (i, j) = pow (a.elem (i, j), b.elem (i, j));
+      {
+	double btmp = b.elem (i, j);
+	if (xisint (btmp))
+	  result.elem (i, j) = pow (a.elem (i, j), (int) btmp);
+	else
+	  result.elem (i, j) = pow (a.elem (i, j), btmp);
+      }
 
-  return tree_constant (result);
+  return result;
 }
 
 // -*- 11 -*-
 tree_constant
 elem_xpow (const ComplexMatrix& a, const Complex& b)
 {
   int nr = a.rows ();
   int nc = a.columns ();
 
   ComplexMatrix result (nr, nc);
   for (int j = 0; j < nc; j++)
     for (int i = 0; i < nr; i++)
       result.elem (i, j) = pow (a.elem (i, j), b);
 
-  return tree_constant (result);
+  return result;
 }
 
 // -*- 12 -*-
 tree_constant
 elem_xpow (const ComplexMatrix& a, const ComplexMatrix& b)
 {
   int nr = a.rows ();
   int nc = a.columns ();
 
   ComplexMatrix result (nr, nc);
 
   for (int j = 0; j < nc; j++)
     for (int i = 0; i < nr; i++)
       result.elem (i, j) = pow (a.elem (i, j), b.elem (i, j));
 
-  return tree_constant (result);
+  return result;
 }
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; page-delimiter: "^/\\*" ***
 ;;; End: ***
 */
