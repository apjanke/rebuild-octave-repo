# HG changeset patch
# User CarnÃ« Draug <carandraug+dev@gmail.com>
# Date 1354450373 -3600
#      Sun Dec 02 13:12:53 2012 +0100
# Node ID 74ff287f41cbb1dfe46d356ee27a37ad4cb4bdfe
# Parent  e88b31c485c0a142e1cc1a70bf9e4c1c612744de
Remove default colormap for ind2rgb and ind2gray.

diff --git a/NEWS b/NEWS
--- a/NEWS
+++ b/NEWS
@@ -91,16 +91,20 @@ Summary of important user-visible change
  ** The m-files in the image directory have been overhauled.
 
     The principal benefit is that Octave will now no longer automatically
     convert images stored with integers to doubles.  Storing images as uint8
     or uint16 requires only 1/8 or 1/4 the memory of an image stored using
     doubles.  For certain operations, such as fft2, the image must still be
     converted to double in order to work.
 
+    Other changes include fixes to the way indexed images are read from a
+    colormap depending on the image class (integer images have a -1 offset to
+    the colormap row number).
+
  ** The datevec function has been extended for better Matlab compatibility.
     It now accepts string inputs in the following numerical formats: 12, 21,
     22, 26, 29, 31.  This is undocumented, but verifiable, Matlab behavior.
     In addition, the default for formats which do not specify a date is
     January 1st of the current year.  The previous default was the current day,
     month, and year.  This may produce changes in existing scripts.
 
  ** The error function and its derivatives has been extended to accept complex
diff --git a/scripts/image/ind2gray.m b/scripts/image/ind2gray.m
--- a/scripts/image/ind2gray.m
+++ b/scripts/image/ind2gray.m
@@ -12,53 +12,55 @@
 ## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
-## @deftypefn  {Function File} {@var{I} =} ind2gray (@var{x})
-## @deftypefnx {Function File} {@var{I} =} ind2gray (@var{x}, @var{map})
+## @deftypefn {Function File} {@var{I} =} ind2gray (@var{x}, @var{map})
 ## Convert a color indexed image to a grayscale intensity image.
 ##
-## If @var{map} is omitted, the current colormap is used to determine the
-## intensities.  If it doesn't contain enough colors, it is padded it with the
-## last color in the map.
+## The image @var{x} must be an indexed image which will be converted using the
+## colormap @var{cmap}.  If @var{cmap} does not contain enough colors for the
+## image, pixels in @var{x} outside the range are mapped to the last color in
+## the map before conversion to grayscale.
 ##
 ## The output @var{I} is of the same class as the input @var{x} and may be
 ## one of @code{uint8}, @code{uint16}, @code{single}, or @code{double}.
 ##
 ## Implementation Note: There are several ways of converting colors to
 ## grayscale intensities.  This functions uses the luminance value obtained
 ## from @code{rgb2ntsc} which is @code{I = 0.299*R + 0.587*G + 0.114*B}.  
 ## Other possibilities include the value component from @code{rgb2hsv} or
 ## using a single color channel from @code{ind2rgb}.
 ## @seealso{gray2ind, ind2rgb}
 ## @end deftypefn
 
 ## Author: Tony Richardson <arichard@stark.cc.oh.us>
 ## Created: July 1994
 ## Adapted-By: jwe
 
-function I = ind2gray (x, map = colormap ())
+function I = ind2gray (x, map)
 
-  if (nargin < 1 || nargin > 2)
+  if (nargin != 2)
     print_usage ();
   endif
   [x, map] = ind2x ("ind2rgb", x, map);
 
   ## Convert colormap to luminance intensity values 
   map *= [0.29894; 0.58704; 0.11402];
 
   ## Convert colormap to same class as that of input so that when reshape
   ## later, produces output of the same type as the input
   cls = class (x);
-  if (isinteger (x)) 
+  if (isinteger (x))
+    ## if we later add support for int16 images, this will not work. Look into
+    ## im2int16 from image package for such case
     map *= intmax (cls);
   elseif (strcmp (cls, "single"))
     map = single (map);
   endif
 
   ## Replace indices in the input matrix with the indexed luminance value.
   I = reshape (map(x(:)), size (x));
 
diff --git a/scripts/image/ind2rgb.m b/scripts/image/ind2rgb.m
--- a/scripts/image/ind2rgb.m
+++ b/scripts/image/ind2rgb.m
@@ -12,38 +12,40 @@
 ## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
-## @deftypefn  {Function File} {@var{rgb} =} ind2rgb (@var{x})
-## @deftypefnx {Function File} {@var{rgb} =} ind2rgb (@var{x}, @var{map})
+## @deftypefn  {Function File} {@var{rgb} =} ind2rgb (@var{x}, @var{map})
 ## @deftypefnx {Function File} {[@var{R}, @var{G}, @var{B}] =} ind2rgb (@dots{})
 ## Convert an indexed image to red, green, and blue color components.
-## If @var{map} is omitted, the current colormap is used for the conversion.
-## When the colormap does not contain enough colors it is padded to the
-## required length using the last color in the map.
+##
+## The image @var{x} must be an indexed image which will be converted using the
+## colormap @var{cmap}.  If @var{cmap} does not contain enough colors for the
+## image, pixels in @var{x} outside the range are mapped to the last color in
+## the map.
 ##
-## The output may be a single MxNx3 matrix where M is the number of rows in
-## @var{x} and N is the number of columns in @var{x}.  Alternatively,
-## individual red, green, and blue color matrices of size MxN may be
-## returned.
+## The output may be a single RGB image (MxNx3 matrix where M and N are the
+## original image @var{x} dimensions, one for each of the red, green and blue
+## channels).  Alternatively, the individual red, green, and blue color matrices
+## of size MxN may be returned.
+##
 ## @seealso{rgb2ind, ind2gray, hsv2rgb, ntsc2rgb}
 ## @end deftypefn
 
 ## Author: Tony Richardson <arichard@stark.cc.oh.us>
 ## Created: July 1994
 ## Adapted-By: jwe
 
-function [R, G, B] = ind2rgb (x, map = colormap ())
+function [R, G, B] = ind2rgb (x, map)
 
-  if (nargin < 1 || nargin > 2)
+  if (nargin != 2)
     print_usage ();
   endif
   [x, map] = ind2x ("ind2rgb", x, map);
 
   ## Compute result
   [row, col] = size (x);
   R = reshape (map(x(:), 1), row, col);
   G = reshape (map(x(:), 2), row, col);
diff --git a/scripts/image/private/ind2x.m b/scripts/image/private/ind2x.m
--- a/scripts/image/private/ind2x.m
+++ b/scripts/image/private/ind2x.m
@@ -43,14 +43,14 @@ function [x, map] = ind2x (name, x, map)
       x = single (x);
     endif
     x      += 1;
     maxidx += 1;
   endif
 
   rm = rows (map);
   if (rm < maxidx)
-    ## Pad with the last color in the map.
+    ## Pad with the last color in the map for matlab compatibility
     pad = repmat (map(end,:), maxidx-rm, 1);
     map(end+1:maxidx, :) = pad;
   endif
 
 endfunction
