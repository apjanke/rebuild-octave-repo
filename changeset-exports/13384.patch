# HG changeset patch
# User Jacob Dawid <jacob.dawid@googlemail.com>
# Date 1302337495 -7200
#      Sat Apr 09 10:24:55 2011 +0200
# Node ID c834fd0128fb7ef9e3e37550ef2b1202c6cda510
# Parent  44e8f4823151436fc6e6d9a84173a051afaa0131
Command history updates automatically.

diff --git a/gui//src/TerminalMdiSubWindow.cpp b/gui//src/TerminalMdiSubWindow.cpp
--- a/gui//src/TerminalMdiSubWindow.cpp
+++ b/gui//src/TerminalMdiSubWindow.cpp
@@ -1,12 +1,13 @@
 #include "TerminalMdiSubWindow.h"
 #include <QHBoxLayout>
 #include <QVBoxLayout>
-
+#include <QStringListModel>
+#include <QStringList>
 bool is_inside_main_loop = false;
 bool is_cleanup_complete = false;
 
 extern bool quit_allowed;
 bool threadRunning = true;
 void * octave_main_wrapper(void *ptr)
 {
   //MainWindow *mainWindow = (MainWindow*)ptr;
@@ -67,26 +68,27 @@ void TerminalMdiSubWindow::constructWind
     QVBoxLayout *vBoxLayout = new QVBoxLayout();
 
         QWidget *hWidget = new QWidget();
         QHBoxLayout *hBoxLayout = new QHBoxLayout();
 
         m_terminalWidget = new QTerminalWidget(0, hWidget);
         m_terminalWidget->setScrollBarPosition(QTerminalWidget::ScrollBarRight);
         m_terminalWidget->setShellProgram("octave");
-       // m_terminalWidget->startShellProgram();
+        // m_terminalWidget->startShellProgram();
         m_terminalWidget->openTeletype(fdm);
         m_terminalWidget->setSizePolicy(QSizePolicy::Expanding, QSizePolicy::Expanding);
         m_terminalWidget->setColorScheme(QTerminalWidget::BlackOnLightYellow);
 
             QWidget *hvWidget = new QWidget();
             QVBoxLayout *hvBoxLayout = new QVBoxLayout();
             m_variableView = new QTreeView(hWidget);
             m_commandHistoryView = new QListView(hWidget);
-            hvWidget->setMaximumWidth(250);
+            m_commandHistoryView->setModel(new QStringListModel());
+            hvWidget->setMaximumWidth(300);
             hvBoxLayout->addWidget(new QLabel("Variables", hWidget));
             hvBoxLayout->addWidget(m_variableView);
             hvBoxLayout->addWidget(new QLabel("Command History", hWidget));
             hvBoxLayout->addWidget(m_commandHistoryView);
             hvBoxLayout->setMargin(1);
             hvWidget->setLayout(hvBoxLayout);
 
         hBoxLayout->addWidget(m_terminalWidget);
@@ -99,48 +101,56 @@ void TerminalMdiSubWindow::constructWind
     vBoxLayout->addWidget(hWidget);
     vBoxLayout->addWidget(m_statusBar);
     vBoxLayout->setMargin(2);
     widget()->setLayout(vBoxLayout);
 
     m_statusBar->showMessage("Ready.");
 }
 
+void TerminalMdiSubWindow::updateHistory(string_vector historyEntries) {
+    QStringListModel * model = dynamic_cast<QStringListModel*>(m_commandHistoryView->model());
+    if(!model)
+        return;
+
+    QStringList stringList = model->stringList();
+    for(size_t i = 0; i < historyEntries.length(); i++)
+        stringList.append(QString(historyEntries[i].c_str()));
+
+    model->setStringList(stringList);
+}
+
 bool ui_can_interrupt = true;
-void* TerminalMdiSubWindow::octave_monitor(void *octaveUI)
-{
+void* TerminalMdiSubWindow::octave_monitor(void *octaveUI) {
   TerminalMdiSubWindow* oui = (TerminalMdiSubWindow*)octaveUI;
 
   while ( oui->isRunning )
   {
     // collect all the variable info
     std::vector<OctaveLink::VariableMetaData> variables = oct_octave_server.variableInfoList();
     if ( variables.size() > 0 )
     {
-      qDebug("Update variables.");
-      //oui->mVariablesTreeView.clearRows();
-      //oui->mVariablesTreeView.addVariables(variables);
+      //qDebug("Update variables.");
     }
 
     // Check whether any requested variables have been returned
     std::vector<OctaveLink::RequestedVariable> reqVars = oct_octave_server.requestedVariables();
     for(std::vector<OctaveLink::RequestedVariable>::iterator it = reqVars.begin() ;
                                  it != reqVars.end() ;
                                  it++ )
     {
       std::cout << "Requested variable returned: " << (*it).name << std::endl;
     }
 
     // collect history info
     string_vector historyList = oct_octave_server.getHistoryList();
     if( historyList.length() > 0 )
     {
-      qDebug("Update history.");
-      //oui->mHistoryTreeView.addRows(historyList);
-      //oui->historyListWidget->addRows(historyList);
+      //qDebug("Update history.");
+        oui->updateHistory(historyList);
     }
 
     // Put a marker in each buffer at the proper location
     int status = 0;
     std::vector<OctaveLink::BreakPoint> bps = oct_octave_server.breakPointList(status);
     if (status==0)
     {
       //MEditor::GetInstance()->process_breakpoint_list (bps);
diff --git a/gui//src/TerminalMdiSubWindow.h b/gui//src/TerminalMdiSubWindow.h
--- a/gui//src/TerminalMdiSubWindow.h
+++ b/gui//src/TerminalMdiSubWindow.h
@@ -61,16 +61,17 @@ public:
      */
     void stopMonitorRunning(void) { this->isRunning = false; }
 
     /**
      * Checks if the monitor thread is currently running.
      */
     bool isMonitorRunning() { return this->isRunning; }
 
+    void updateHistory(string_vector historyEntries);
     static void* octave_monitor(void *octaveUI);
     TerminalMdiSubWindow(QWidget *parent = 0);
     ~TerminalMdiSubWindow();
 
 private slots:
 
 private:
     void establishOctaveLink();
