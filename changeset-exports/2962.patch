# HG changeset patch
# User jwe
# Date 863407316 0
#      Mon May 12 03:21:56 1997 +0000
# Node ID 5e0fe4c5d52faa5ee5c3668d0a71d515362f57f9
# Parent  8a77d52c9d02dde4f3d5c30eb5f980864307f7f0
[project @ 1997-05-12 03:13:57 by jwe]

diff --git a/src/help.cc b/src/help.cc
--- a/src/help.cc
+++ b/src/help.cc
@@ -48,16 +48,17 @@ Software Foundation, 59 Temple Place - S
 #include "defun.h"
 #include "dirfns.h"
 #include "error.h"
 #include "fn-cache.h"
 #include "gripes.h"
 #include "help.h"
 #include "input.h"
 #include "oct-obj.h"
+#include "oct-usr-fcn.h"
 #include "pager.h"
 #include "pathsearch.h"
 #include "pt-pr-code.h"
 #include "sighandlers.h"
 #include "symtab.h"
 #include "syswait.h"
 #include "toplev.h"
 #include "unwind-prot.h"
@@ -713,17 +714,17 @@ print cryptic yet witty messages")
 	  builtin_help (argc, argv);
 	}
     }
 
   return retval;
 }
 
 DEFUN_TEXT (type, args, nargout,
-  "type NAME ...]\n\
+  "type NAME\n\
 \n\
 display the definition of each NAME that refers to a function")
 {
   octave_value_list retval;
 
   begin_unwind_frame ("Ftype");
 
   int argc = args.length () + 1;
@@ -777,17 +778,20 @@ display the definition of each NAME that
 	    }
 
 	  symbol_record *sym_rec = lookup_by_name (id, 0);
 
 	  if (sym_rec)
 	    {
 	      if (sym_rec->is_user_function ())
 		{
-		  octave_symbol *defn = sym_rec->def ();
+		  octave_symbol *tmp = sym_rec->def ();
+
+		  octave_user_function *defn
+		    = static_cast<octave_user_function *> (tmp);
 
 		  string fn = defn->fcn_file_name ();
 		  string ff = fcn_file_in_path (fn);
 
 		  if (pr_orig_txt && ! ff.empty ())
 		    {
 		      ifstream fs (ff.c_str (), ios::in);
 
@@ -810,18 +814,17 @@ display the definition of each NAME that
 		  else
 		    {
 		      if (nargout == 0 && ! quiet)
 			output_buf << argv[i]
 				   << " is a user-defined function:\n\n";
 
 		      tree_print_code tpc (output_buf, "", pr_orig_txt);
 
-		      // XXX FIXME XXX
-		      // defn->accept (tpc);
+		      defn->accept (tpc);
 		    }
 		}
 
 	      // XXX FIXME XXX -- this code should be shared with
 	      // Fwhich.
 
 	      else if (sym_rec->is_text_function ())
 		output_buf << argv[i] << " is a builtin text-function\n";
diff --git a/src/ov-base.cc b/src/ov-base.cc
--- a/src/ov-base.cc
+++ b/src/ov-base.cc
@@ -47,33 +47,44 @@ Software Foundation, 59 Temple Place - S
 #include "ov-list.h"
 #include "variables.h"
 
 int octave_base_value::t_id = -1;
 
 const string octave_base_value::t_name ("<unknown type>");
 
 octave_value
-octave_base_value::index (const octave_value_list&) const
+octave_base_value::do_index_op (const octave_value_list&) const
 {
   string nm = type_name ();
   error ("can't perform indexing operations for %s type", nm.c_str ());
   return octave_value ();
 }
 
 idx_vector
 octave_base_value::index_vector (void) const
 {
   string nm = type_name ();
   error ("%s type invalid as index value", nm.c_str ());
   return idx_vector ();
 }
 
 octave_value
-octave_base_value::struct_elt_val (const string&, bool) const
+octave_base_value::do_struct_elt_index_op (const string&,
+					   const octave_value_list&,
+					   bool)
+{
+  string nm = type_name ();
+  error ("can't perform indexed structure reference operations for %s type",
+	 nm.c_str ());
+  return octave_value ();
+}
+
+octave_value
+octave_base_value::do_struct_elt_index_op (const string&, bool)
 {
   string nm = type_name ();
   error ("can't perform structure reference operations for %s type",
 	 nm.c_str ());
   return octave_value ();
 }
 
 octave_variable_reference
diff --git a/src/ov-base.h b/src/ov-base.h
--- a/src/ov-base.h
+++ b/src/ov-base.h
@@ -65,21 +65,25 @@ public:
   octave_value *clone (void) { return new octave_base_value (*this); }
 
   type_conv_fcn numeric_conversion_function (void) const
     { return static_cast<type_conv_fcn> (0); }
 
   octave_value *try_narrowing_conversion (void)
     { return static_cast<octave_value *> (0); }
 
-  octave_value index (const octave_value_list& idx) const;
+  octave_value do_index_op (const octave_value_list& idx) const;
 
   idx_vector index_vector (void) const;
 
-  octave_value struct_elt_val (const string& nm, bool silent) const;
+  octave_value
+  do_struct_elt_index_op (const string& nm, const octave_value_list& idx,
+			  bool silent);
+
+  octave_value do_struct_elt_index_op (const string& nm, bool silent);
 
   octave_variable_reference
   struct_elt_ref (octave_value *parent, const string& nm);
 
   int rows (void) const { return -1; }
 
   int columns (void) const { return -1; }
 
diff --git a/src/ov-bool-mat.cc b/src/ov-bool-mat.cc
--- a/src/ov-bool-mat.cc
+++ b/src/ov-bool-mat.cc
@@ -74,17 +74,17 @@ octave_bool_matrix::try_narrowing_conver
 
   if (nr == 1 && nc == 1)
     retval = new octave_bool (matrix (0, 0));
 
   return retval;
 }
 
 octave_value
-octave_bool_matrix::index (const octave_value_list& idx) const
+octave_bool_matrix::do_index_op (const octave_value_list& idx) const
 {
   octave_value retval;
 
   int len = idx.length ();
 
   switch (len)
     {
     case 2:
diff --git a/src/ov-bool-mat.h b/src/ov-bool-mat.h
--- a/src/ov-bool-mat.h
+++ b/src/ov-bool-mat.h
@@ -70,17 +70,17 @@ public:
 
   void operator delete (void *p, size_t size)
     { allocator.free (p, size); }
 
   type_conv_fcn numeric_conversion_function (void) const;
 
   octave_value *try_narrowing_conversion (void);
 
-  octave_value index (const octave_value_list& idx) const;
+  octave_value do_index_op (const octave_value_list& idx) const;
 
   void assign (const octave_value_list& idx, const boolMatrix& rhs);
 
   idx_vector index_vector (void) const { return idx_vector (matrix); }
 
   int rows (void) const { return matrix.rows (); }
   int columns (void) const { return matrix.columns (); }
 
diff --git a/src/ov-bool.cc b/src/ov-bool.cc
--- a/src/ov-bool.cc
+++ b/src/ov-bool.cc
@@ -71,17 +71,17 @@ valid_scalar_indices (const octave_value
   for (int i = 0; i < nargin; i++)
     if (! args(i).valid_as_scalar_index ())
       return false;
 
   return true;
 }
 
 octave_value
-octave_bool::index (const octave_value_list& idx) const
+octave_bool::do_index_op (const octave_value_list& idx) const
 {
   octave_value retval;
 
   if (valid_scalar_indices (idx))
     retval = scalar;
   else
     {
       // XXX FIXME XXX -- this doesn't solve the problem of
@@ -91,17 +91,17 @@ octave_bool::index (const octave_value_l
       // and similar constructions.  Hmm...
 
       // XXX FIXME XXX -- using this constructor avoids narrowing the
       // 1x1 matrix back to a scalar value.  Need a better solution
       // to this problem.
 
       octave_value tmp (new octave_matrix (matrix_value ()));
 
-      retval = tmp.index (idx);
+      retval = tmp.do_index_op (idx);
     }
 
   return retval;
 }
 
 octave_value
 octave_bool::convert_to_str (void) const
 {
diff --git a/src/ov-bool.h b/src/ov-bool.h
--- a/src/ov-bool.h
+++ b/src/ov-bool.h
@@ -69,17 +69,17 @@ public:
   void *operator new (size_t size)
     { return allocator.alloc (size); }
 
   void operator delete (void *p, size_t size)
     { allocator.free (p, size); }
 
   type_conv_fcn numeric_conversion_function (void) const;
 
-  octave_value index (const octave_value_list& idx) const;
+  octave_value do_index_op (const octave_value_list& idx) const;
 
   idx_vector index_vector (void) const { return idx_vector (scalar); }
 
   int rows (void) const { return 1; }
   int columns (void) const { return 1; }
 
   bool is_defined (void) const { return true; }
   bool is_real_scalar (void) const { return true; }
diff --git a/src/ov-complex.cc b/src/ov-complex.cc
--- a/src/ov-complex.cc
+++ b/src/ov-complex.cc
@@ -68,17 +68,17 @@ valid_scalar_indices (const octave_value
   for (int i = 0; i < nargin; i++)
     if (! args(i).valid_as_scalar_index ())
       return false;
 
   return true;
 }
 
 octave_value
-octave_complex::index (const octave_value_list& idx) const
+octave_complex::do_index_op (const octave_value_list& idx) const
 {
   octave_value retval;
 
   if (valid_scalar_indices (idx))
     retval = scalar;
   else
     {
       // XXX FIXME XXX -- this doesn't solve the problem of
@@ -88,17 +88,17 @@ octave_complex::index (const octave_valu
       // and similar constructions.  Hmm...
 
       // XXX FIXME XXX -- using this constructor avoids narrowing the
       // 1x1 matrix back to a scalar value.  Need a better solution
       // to this problem.
 
       octave_value tmp (new octave_complex_matrix (complex_matrix_value ()));
 
-      retval = tmp.index (idx);
+      retval = tmp.do_index_op (idx);
     }
 
   return retval;
 }
 
 double
 octave_complex::double_value (bool force_conversion) const
 {
diff --git a/src/ov-complex.h b/src/ov-complex.h
--- a/src/ov-complex.h
+++ b/src/ov-complex.h
@@ -69,17 +69,17 @@ public:
   void *operator new (size_t size)
     { return allocator.alloc (size); }
 
   void operator delete (void *p, size_t size)
     { allocator.free (p, size); }
 
   octave_value *try_narrowing_conversion (void);
 
-  octave_value index (const octave_value_list& idx) const;
+  octave_value do_index_op (const octave_value_list& idx) const;
 
   int rows (void) const { return 1; }
   int columns (void) const { return 1; }
 
   bool is_defined (void) const { return true; }
 
   bool is_complex_scalar (void) const { return true; }
 
diff --git a/src/ov-cx-mat.cc b/src/ov-cx-mat.cc
--- a/src/ov-cx-mat.cc
+++ b/src/ov-cx-mat.cc
@@ -84,17 +84,17 @@ octave_complex_matrix::try_narrowing_con
     retval = new octave_matrix (Matrix ());
   else if (matrix.all_elements_are_real ())
     retval = new octave_matrix (::real (matrix));
 
   return retval;
 }
 
 octave_value
-octave_complex_matrix::index (const octave_value_list& idx) const
+octave_complex_matrix::do_index_op (const octave_value_list& idx) const
 {
   octave_value retval;
 
   int len = idx.length ();
 
   switch (len)
     {
     case 2:
diff --git a/src/ov-cx-mat.h b/src/ov-cx-mat.h
--- a/src/ov-cx-mat.h
+++ b/src/ov-cx-mat.h
@@ -76,17 +76,17 @@ public:
   void *operator new (size_t size)
     { return allocator.alloc (size); }
 
   void operator delete (void *p, size_t size)
     { allocator.free (p, size); }
 
   octave_value *try_narrowing_conversion (void);
 
-  octave_value index (const octave_value_list& idx) const;
+  octave_value do_index_op (const octave_value_list& idx) const;
 
   void assign (const octave_value_list& idx, const ComplexMatrix& rhs);
 
   void assign (const octave_value_list& idx, const Matrix& rhs);
 
   int rows (void) const { return matrix.rows (); }
   int columns (void) const { return matrix.columns (); }
 
diff --git a/src/ov-list.cc b/src/ov-list.cc
--- a/src/ov-list.cc
+++ b/src/ov-list.cc
@@ -44,17 +44,17 @@ octave_list::allocator (sizeof (octave_l
 
 int
 octave_list::t_id (-1);
 
 const string
 octave_list::t_name ("list");
 
 octave_value
-octave_list::index (const octave_value_list& idx) const
+octave_list::do_index_op (const octave_value_list& idx) const
 {
   octave_value retval;
 
   if (idx.length () == 1)
     {
       double d = idx(0).double_value ();
 
       if (! error_state)
diff --git a/src/ov-list.h b/src/ov-list.h
--- a/src/ov-list.h
+++ b/src/ov-list.h
@@ -65,17 +65,17 @@ public:
   octave_value *clone (void) { return new octave_list (*this); }
 
   void *operator new (size_t size)
     { return allocator.alloc (size); }
 
   void operator delete (void *p, size_t size)
     { allocator.free (p, size); }
 
-  octave_value index (const octave_value_list& idx) const;
+  octave_value do_index_op (const octave_value_list& idx) const;
 
   bool is_defined (void) const { return true; }
 
   bool is_list (void) const { return true; }
 
   octave_value_list list_value (void) const { return lst; }
 
   void print (ostream& os, bool pr_as_read_syntax = false) const;
diff --git a/src/ov-range.cc b/src/ov-range.cc
--- a/src/ov-range.cc
+++ b/src/ov-range.cc
@@ -81,31 +81,31 @@ octave_range::try_narrowing_conversion (
     default:
       break;
     }
 
   return retval;
 }
 
 octave_value
-octave_range::index (const octave_value_list& idx) const
+octave_range::do_index_op (const octave_value_list& idx) const
 {
   // XXX FIXME XXX -- this doesn't solve the problem of
   //
   //   a = 1:5; a(1, 1, 1)
   //
   // and similar constructions.  Hmm...
 
   // XXX FIXME XXX -- using this constructor avoids possibly narrowing
   // the range to a scalar value.  Need a better solution to this
   // problem.
 
   octave_value tmp (new octave_matrix (range.matrix_value ()));
 
-  return tmp.index (idx);
+  return tmp.do_index_op (idx);
 }
 
 double
 octave_range::double_value (bool) const
 {
   double retval = octave_NaN;
 
   int nel = range.nelem ();
diff --git a/src/ov-range.h b/src/ov-range.h
--- a/src/ov-range.h
+++ b/src/ov-range.h
@@ -86,17 +86,17 @@ public:
 
   void operator delete (void *p, size_t size)
     { allocator.free (p, size); }
 
   type_conv_fcn numeric_conversion_function (void) const;
 
   octave_value *try_narrowing_conversion (void);
 
-  octave_value index (const octave_value_list& idx) const;
+  octave_value do_index_op (const octave_value_list& idx) const;
 
   idx_vector index_vector (void) const { return idx_vector (range); }
 
   int rows (void) const { return (columns () > 0); }
   int columns (void) const { return range.nelem (); }
 
   bool is_defined (void) const { return true; }
 
diff --git a/src/ov-re-mat.cc b/src/ov-re-mat.cc
--- a/src/ov-re-mat.cc
+++ b/src/ov-re-mat.cc
@@ -72,17 +72,17 @@ octave_matrix::try_narrowing_conversion 
 
   if (nr == 1 && nc == 1)
     retval = new octave_scalar (matrix (0, 0));
 
   return retval;
 }
 
 octave_value
-octave_matrix::index (const octave_value_list& idx) const
+octave_matrix::do_index_op (const octave_value_list& idx) const
 {
   octave_value retval;
 
   int len = idx.length ();
 
   switch (len)
     {
     case 2:
@@ -210,17 +210,25 @@ void
 octave_matrix::assign_struct_elt (assign_op, const string&,
 				  const octave_value_list&,
 				  const octave_value&)
 {
   error ("indexed assignment for matrix properties is not implemented");
 }
 
 octave_value
-octave_matrix::struct_elt_val (const string& nm, bool silent) const
+octave_matrix::do_struct_elt_index_op (const string& nm,
+				       const octave_value_list& idx,
+				       bool silent)
+{
+  // XXX DO_ME XXX
+}
+
+octave_value
+octave_matrix::do_struct_elt_index_op (const string& nm, bool silent)
 {
   octave_value retval;
 
   double nr = static_cast<double> (matrix.rows ());
   double nc = static_cast<double> (matrix.cols ());
 
   if (nm == "rows")
     retval = nr;
diff --git a/src/ov-re-mat.h b/src/ov-re-mat.h
--- a/src/ov-re-mat.h
+++ b/src/ov-re-mat.h
@@ -76,30 +76,34 @@ public:
   void *operator new (size_t size)
     { return allocator.alloc (size); }
 
   void operator delete (void *p, size_t size)
     { allocator.free (p, size); }
 
   octave_value *try_narrowing_conversion (void);
 
-  octave_value index (const octave_value_list& idx) const;
+  octave_value do_index_op (const octave_value_list& idx) const;
 
   void assign (const octave_value_list& idx, const Matrix& rhs);
 
   void assign_struct_elt (assign_op, const string& elt_nm,
 			  const octave_value& rhs);
 
   void assign_struct_elt (assign_op, const string& elt_nm,
 			  const octave_value_list& idx,
 			  const octave_value& rhs);
 
   idx_vector index_vector (void) const { return idx_vector (matrix); }
 
-  octave_value struct_elt_val (const string& nm, bool silent) const;
+  octave_value
+  do_struct_elt_index_op (const string& nm, const octave_value_list& idx,
+			  bool silent);
+
+  octave_value do_struct_elt_index_op (const string& nm, bool silent);
 
   octave_variable_reference
   struct_elt_ref (octave_value *parent, const string& nm);
 
   int rows (void) const { return matrix.rows (); }
   int columns (void) const { return matrix.columns (); }
 
   bool is_defined (void) const { return true; }
diff --git a/src/ov-scalar.cc b/src/ov-scalar.cc
--- a/src/ov-scalar.cc
+++ b/src/ov-scalar.cc
@@ -57,17 +57,17 @@ valid_scalar_indices (const octave_value
   for (int i = 0; i < nargin; i++)
     if (! args(i).valid_as_scalar_index ())
       return false;
 
   return true;
 }
 
 octave_value
-octave_scalar::index (const octave_value_list& idx) const
+octave_scalar::do_index_op (const octave_value_list& idx) const
 {
   octave_value retval;
 
   if (valid_scalar_indices (idx))
     retval = scalar;
   else
     {
       // XXX FIXME XXX -- this doesn't solve the problem of
@@ -77,17 +77,17 @@ octave_scalar::index (const octave_value
       // and similar constructions.  Hmm...
 
       // XXX FIXME XXX -- using this constructor avoids narrowing the
       // 1x1 matrix back to a scalar value.  Need a better solution
       // to this problem.
 
       octave_value tmp (new octave_matrix (matrix_value ()));
 
-      retval = tmp.index (idx);
+      retval = tmp.do_index_op (idx);
     }
 
   return retval;
 }
 
 octave_value
 octave_scalar::convert_to_str (void) const
 {
diff --git a/src/ov-scalar.h b/src/ov-scalar.h
--- a/src/ov-scalar.h
+++ b/src/ov-scalar.h
@@ -68,17 +68,17 @@ public:
   octave_value *clone (void) { return new octave_scalar (*this); }
 
   void *operator new (size_t size)
     { return allocator.alloc (size); }
 
   void operator delete (void *p, size_t size)
     { allocator.free (p, size); }
 
-  octave_value index (const octave_value_list& idx) const;
+  octave_value do_index_op (const octave_value_list& idx) const;
 
   idx_vector index_vector (void) const { return idx_vector (scalar); }
 
   int rows (void) const { return 1; }
   int columns (void) const { return 1; }
 
   bool is_defined (void) const { return true; }
   bool is_real_scalar (void) const { return true; }
diff --git a/src/ov-str-mat.cc b/src/ov-str-mat.cc
--- a/src/ov-str-mat.cc
+++ b/src/ov-str-mat.cc
@@ -56,17 +56,17 @@ default_numeric_conversion_function (con
 
 type_conv_fcn
 octave_char_matrix_str::numeric_conversion_function (void) const
 {
   return default_numeric_conversion_function;
 }
 
 octave_value
-octave_char_matrix_str::index (const octave_value_list& idx) const
+octave_char_matrix_str::do_index_op (const octave_value_list& idx) const
 {
   octave_value retval;
 
   int len = idx.length ();
 
   switch (len)
     {
     case 2:
diff --git a/src/ov-str-mat.h b/src/ov-str-mat.h
--- a/src/ov-str-mat.h
+++ b/src/ov-str-mat.h
@@ -75,17 +75,17 @@ public:
     : octave_char_matrix (chms) { }
 
   ~octave_char_matrix_str (void) { }
 
   octave_value *clone (void) { return new octave_char_matrix_str (*this); }
 
   type_conv_fcn numeric_conversion_function (void) const;
 
-  octave_value index (const octave_value_list& idx) const;
+  octave_value do_index_op (const octave_value_list& idx) const;
 
   void assign (const octave_value_list& idx, const charMatrix& rhs);
 
   octave_value all (void) const;
   octave_value any (void) const;
 
   bool is_string (void) const { return true; }
 
diff --git a/src/ov-struct.cc b/src/ov-struct.cc
--- a/src/ov-struct.cc
+++ b/src/ov-struct.cc
@@ -41,17 +41,25 @@ octave_struct::allocator (sizeof (octave
 
 int
 octave_struct::t_id (-1);
 
 const string
 octave_struct::t_name ("struct");
 
 octave_value
-octave_struct::struct_elt_val (const string& nm, bool silent) const
+octave_struct::do_struct_elt_index_op (const string& nm,
+				       const octave_value_list& idx,
+				       bool silent)
+{
+  // XXX DO_ME XXX
+}
+
+octave_value
+octave_struct::do_struct_elt_index_op (const string& nm, bool silent)
 {
   octave_value retval;
 
   Pix idx = map.seek (nm);
 
   if (idx)
     retval = map.contents (idx);
   else if (! silent)
diff --git a/src/ov-struct.h b/src/ov-struct.h
--- a/src/ov-struct.h
+++ b/src/ov-struct.h
@@ -68,17 +68,21 @@ public:
   octave_value *clone (void) { return new octave_struct (*this); }
 
   void *operator new (size_t size)
     { return allocator.alloc (size); }
 
   void operator delete (void *p, size_t size)
     { allocator.free (p, size); }
 
-  octave_value struct_elt_val (const string& nm, bool silent) const;
+  octave_value
+  do_struct_elt_index_op (const string& nm, const octave_value_list& idx,
+			  bool silent);
+
+  octave_value do_struct_elt_index_op (const string& nm, bool silent);
 
   octave_variable_reference
   struct_elt_ref (octave_value *parent, const string& nm);
 
   bool is_defined (void) const { return true; }
 
   bool is_map (void) const { return true; }
 
