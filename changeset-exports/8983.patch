# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1237073921 -3600
#      Sun Mar 15 00:38:41 2009 +0100
# Node ID e781ab1aee39e01c0416ed2486272666aed1a8c9
# Parent  dc6bda6f999429bc10f29d98fa37e77faba40c40
optimize comparison ops

diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,12 +1,13 @@
 2009-03-14  Jaroslav Hajek  <highegg@gmail.com>
 
-	* mx-op-decl.h (*BOOL_OP_DECLS): Support compound binary ops.
-	* mx-op-defs.h (*BOOL_OP): Ditto. Optimize.
+	* mx-op-decl.h (NDS_BOOL_OP_DECLS, SND_BOOL_OP_DECLS, NDND_BOOL_OP_DECLS): Support compound binary ops.
+	* mx-op-defs.h (NDS_BOOL_OPS, SND_BOOL_OPS, NDND_BOOL_OPS): Ditto. Optimize.
+	* mx-op-defs.h (NDS_CMP_OP, SND_CMP_OP, NDND_CMP_OP): Optimize.
 
 2009-03-14  Jaroslav Hajek  <highegg@gmail.com>
 
 	* fNDArray.h (FloatMatrix::matrix_value): Fix return type.
 	* dNDArray.cc (Matrix::matrix_value): Simplify.
 	* fNDArray.cc (FloatMatrix::matrix_value): Simplify.
 	* CNDArray.cc (ComplexMatrix::matrix_value): Simplify.
 	* fCNDArray.cc (FloatComplexMatrix::matrix_value): Simplify.
diff --git a/liboctave/mx-op-defs.h b/liboctave/mx-op-defs.h
--- a/liboctave/mx-op-defs.h
+++ b/liboctave/mx-op-defs.h
@@ -419,46 +419,50 @@ along with Octave; see the file COPYING.
   NDS_BIN_OP (R, operator -, ND, S, mx_inline_subtract) \
   NDS_BIN_OP (R, operator *, ND, S, mx_inline_multiply) \
   NDS_BIN_OP (R, operator /, ND, S, mx_inline_divide)
 
 #define NDS_CMP_OP(F, OP, ND, NDC, S, SC) \
   boolNDArray \
   F (const ND& m, const S& s) \
   { \
-    boolNDArray r; \
+    boolNDArray r (m.dims ()); \
  \
     octave_idx_type len = m.length (); \
  \
-    r.resize (m.dims ()); \
- \
-    for (octave_idx_type i = 0; i < len; i++) \
-      r.elem(i) = NDC (m.elem(i)) OP SC (s); \
+    if (s == S ()) \
+      { \
+        for (octave_idx_type i = 0; i < len; i++) \
+        r.xelem(i) = NDC (m.elem(i)) OP SC (S ()); \
+      } \
+    else \
+      { \
+        for (octave_idx_type i = 0; i < len; i++) \
+          r.xelem(i) = NDC (m.elem(i)) OP SC (s); \
+      } \
  \
     return r; \
   }
 
 #define NDS_CMP_OPS(ND, NDC, S, SC) \
   NDS_CMP_OP (mx_el_lt, <,  ND, NDC, S, SC) \
   NDS_CMP_OP (mx_el_le, <=, ND, NDC, S, SC) \
   NDS_CMP_OP (mx_el_ge, >=, ND, NDC, S, SC) \
   NDS_CMP_OP (mx_el_gt, >,  ND, NDC, S, SC) \
   NDS_CMP_OP (mx_el_eq, ==, ND,    , S,   ) \
   NDS_CMP_OP (mx_el_ne, !=, ND,    , S,   )
 
 #define NDS_CMP_OP1(F, OP, ND, NDC, S, SC, SPEC) \
   boolNDArray \
   F (const ND& m, const S& s) \
   { \
-    boolNDArray r; \
+    boolNDArray r (m.dims ()); \
  \
     octave_idx_type len = m.length (); \
  \
-    r.resize (m.dims ()); \
- \
     for (octave_idx_type i = 0; i < len; i++) \
       r.elem(i) = operator OP <SPEC> (NDC (m.elem(i)), SC (s)); \
  \
     return r; \
   }
 
 #define NDS_CMP_OPS1(ND, NDC, S, SC, SPEC) \
   NDS_CMP_OP1 (mx_el_lt, <,  ND, NDC, S, SC, SPEC) \
@@ -550,46 +554,50 @@ along with Octave; see the file COPYING.
   SND_BIN_OP (R, operator -, S, ND, mx_inline_subtract) \
   SND_BIN_OP (R, operator *, S, ND, mx_inline_multiply) \
   SND_BIN_OP (R, operator /, S, ND, mx_inline_divide)
 
 #define SND_CMP_OP(F, OP, S, SC, ND, NDC) \
   boolNDArray \
   F (const S& s, const ND& m) \
   { \
-    boolNDArray r; \
+    boolNDArray r (m.dims ()); \
  \
     octave_idx_type len = m.length (); \
  \
-    r.resize (m.dims ()); \
- \
-    for (octave_idx_type i = 0; i < len; i++) \
-      r.elem(i) = SC (s) OP NDC (m.elem(i)); \
+    if (s == S ()) \
+      { \
+        for (octave_idx_type i = 0; i < len; i++) \
+        r.xelem(i) = SC (S ()) OP NDC (m.elem(i)); \
+      } \
+    else \
+      { \
+        for (octave_idx_type i = 0; i < len; i++) \
+          r.xelem(i) = SC (s) OP NDC (m.elem(i)); \
+      } \
  \
     return r; \
   }
 
 #define SND_CMP_OPS(S, CS, ND, CND) \
   SND_CMP_OP (mx_el_lt, <,  S, CS, ND, CND) \
   SND_CMP_OP (mx_el_le, <=, S, CS, ND, CND) \
   SND_CMP_OP (mx_el_ge, >=, S, CS, ND, CND) \
   SND_CMP_OP (mx_el_gt, >,  S, CS, ND, CND) \
   SND_CMP_OP (mx_el_eq, ==, S,   , ND,    ) \
   SND_CMP_OP (mx_el_ne, !=, S,   , ND,    )
 
 #define SND_CMP_OP1(F, OP, S, SC, ND, NDC, SPEC) \
   boolNDArray \
   F (const S& s, const ND& m) \
   { \
-    boolNDArray r; \
+    boolNDArray r (m.dims ()); \
  \
     octave_idx_type len = m.length (); \
  \
-    r.resize (m.dims ()); \
- \
     for (octave_idx_type i = 0; i < len; i++) \
       r.elem(i) = operator OP <SPEC> (SC (s), NDC (m.elem(i))); \
  \
     return r; \
   }
 
 #define SND_CMP_OPS1(S, CS, ND, CND, SPEC) \
   SND_CMP_OP1 (mx_el_lt, <,  S, CS, ND, CND, SPEC) \
@@ -598,22 +606,20 @@ along with Octave; see the file COPYING.
   SND_CMP_OP1 (mx_el_gt, >,  S, CS, ND, CND, SPEC) \
   SND_CMP_OP1 (mx_el_eq, ==, S,   , ND,    , SPEC) \
   SND_CMP_OP1 (mx_el_ne, !=, S,   , ND,    , SPEC)
 
 #define SND_CMP_OP2(F, OP, S, SC, ND, NDC, SPEC1, SPEC2) \
   boolNDArray \
   F (const S& s, const ND& m) \
   { \
-    boolNDArray r; \
+    boolNDArray r (m.dims ()); \
  \
     octave_idx_type len = m.length (); \
  \
-    r.resize (m.dims ()); \
- \
     for (octave_idx_type i = 0; i < len; i++) \
       r.elem(i) = operator OP <SPEC1, SPEC2> (SC (s), NDC (m.elem(i))); \
  \
     return r; \
   }
 
 #define SND_CMP_OPS2(S, CS, ND, CND, SPEC1, SPEC2) \
   SND_CMP_OP2 (mx_el_lt, <,  S, CS, ND, CND, SPEC1, SPEC2) \
@@ -670,17 +676,17 @@ along with Octave; see the file COPYING.
  \
     dim_vector m1_dims = m1.dims (); \
     dim_vector m2_dims = m2.dims (); \
  \
     if (m1_dims != m2_dims) \
       gripe_nonconformant (#OP, m1_dims, m2_dims); \
     else \
       { \
-	r.resize (m1_dims); \
+	r = R (m1_dims); \
  \
 	octave_idx_type len = m1.length (); \
  \
 	if (len > 0) \
 	  F ## _vv (r.fortran_vec (), m1.data (), m2.data (), len); \
       } \
  \
     return r; \
@@ -698,20 +704,20 @@ along with Octave; see the file COPYING.
   { \
     boolNDArray r; \
  \
     dim_vector m1_dims = m1.dims (); \
     dim_vector m2_dims = m2.dims (); \
  \
     if (m1_dims == m2_dims) \
       { \
-	r.resize (m1_dims); \
+	r = boolNDArray (m1_dims); \
  \
 	for (octave_idx_type i = 0; i < m1.length (); i++) \
-	  r.elem(i) = C1 (m1.elem(i)) OP C2 (m2.elem(i)); \
+	  r.xelem(i) = C1 (m1.elem(i)) OP C2 (m2.elem(i)); \
       } \
     else \
       gripe_nonconformant (#F, m1_dims, m2_dims); \
  \
     return r; \
   }
 
 #define NDND_CMP_OPS(ND1, C1, ND2, C2) \
