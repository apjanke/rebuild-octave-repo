# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1452880018 18000
#      Fri Jan 15 12:46:58 2016 -0500
# Node ID b433f99904527ea66c44d3a34243dcf708af63e8
# Parent  5ed379c8decd941eb49eba353320400b991c168b
strip trailing whitespace from files

* NEWS, oop.txi, ov.h, dSparse.h, f77-fcn.h, lo-array-gripes.h,
display.m, int2str.m, num2str.m, subsindex.m, fileattrib.m,
parser.tst: Strip trailing whitespace.

diff --git a/NEWS b/NEWS
--- a/NEWS
+++ b/NEWS
@@ -105,17 +105,17 @@ Summary of important user-visible change
 
  ** The default error handlers in liboctave have been updated to use
     exceptions.  After displaying an error message they no longer return
     control to the calling program.  The error handler function can be
     customized through the global variables "current_liboctave_error_handler"
     and "current_liboctave_error_with_id_handler".  If a programmer has
     installed their own custom error handling routines when directly linking
     with liboctave then these must be updated to throw an exception and not
-    return to the calling program. 
+    return to the calling program.
 
  ** New configure option, --enable-address-sanitizer-flags, to build Octave
     with memory allocator checks (similar to those in valgrind) built in.
 
 Summary of important user-visible changes for version 4.0:
 ---------------------------------------------------------
 
  ** A graphical user interface is now the default when running Octave
diff --git a/doc/interpreter/oop.txi b/doc/interpreter/oop.txi
--- a/doc/interpreter/oop.txi
+++ b/doc/interpreter/oop.txi
@@ -307,17 +307,17 @@ class is then
 @example
 @group
 p = polynomial ([1,2,3,4]);
 p@{end-1@}
   @result{} 3
 @end group
 @end example
 
-Objects can also be used themselves as the index in a subscripted expression 
+Objects can also be used themselves as the index in a subscripted expression
 and this is controlled by the @code{subsindex} function.
 
 @DOCSTRING(subsindex)
 
 Finally, objects can be used like ranges by providing a @code{colon} method.
 
 @DOCSTRING(colon)
 
diff --git a/libinterp/octave-value/ov.h b/libinterp/octave-value/ov.h
--- a/libinterp/octave-value/ov.h
+++ b/libinterp/octave-value/ov.h
@@ -1174,17 +1174,17 @@ public:
 
   octave_value storable_value (void) const;
 
   // Ditto, but in place, i.e. equivalent to *this = this->storable_value (),
   // but possibly more efficient.
 
   void make_storable_value (void);
 
-  // FIXME: These should probably be private.  
+  // FIXME: These should probably be private.
   // Conversions.  If a user of this class wants a certain kind of constant,
   // he should simply ask for it, and we should convert it if possible.
 
   octave_value convert_to_str (bool pad = false, bool force = false,
                                char type = '\'') const
   { return rep->convert_to_str (pad, force, type); }
 
   octave_value
diff --git a/liboctave/array/dSparse.h b/liboctave/array/dSparse.h
--- a/liboctave/array/dSparse.h
+++ b/liboctave/array/dSparse.h
@@ -116,23 +116,23 @@ public:
   SparseMatrix concat (const SparseMatrix& rb,
                        const Array<octave_idx_type>& ra_idx);
   SparseComplexMatrix concat (const SparseComplexMatrix& rb,
                               const Array<octave_idx_type>& ra_idx);
 
   friend OCTAVE_API SparseMatrix real (const SparseComplexMatrix& a);
   friend OCTAVE_API SparseMatrix imag (const SparseComplexMatrix& a);
 
-  OCTAVE_DEPRECATED OCTAVE_API friend 
+  OCTAVE_DEPRECATED OCTAVE_API friend
   SparseMatrix atan2 (const double& x, const SparseMatrix& y);
 
-  OCTAVE_DEPRECATED OCTAVE_API friend 
+  OCTAVE_DEPRECATED OCTAVE_API friend
   SparseMatrix atan2 (const SparseMatrix& x, const double& y);
 
-  OCTAVE_DEPRECATED OCTAVE_API friend 
+  OCTAVE_DEPRECATED OCTAVE_API friend
   SparseMatrix atan2 (const SparseMatrix& x, const SparseMatrix& y);
 
   SparseMatrix transpose (void) const
   {
     return MSparse<double>::transpose ();
   }
   SparseMatrix hermitian (void) const { return transpose (); }
 
diff --git a/liboctave/cruft/misc/f77-fcn.h b/liboctave/cruft/misc/f77-fcn.h
--- a/liboctave/cruft/misc/f77-fcn.h
+++ b/liboctave/cruft/misc/f77-fcn.h
@@ -279,17 +279,17 @@ octave_make_cray_const_ftn_ch_dsc (const
 
 #define F77_CSTRING(s, len, cs) \
  OCTAVE_LOCAL_BUFFER (char, cs, F77_CHAR_ARG_LEN_USE (s, len) + 1); \
  memcpy (cs, F77_CHAR_ARG_USE (s), F77_CHAR_ARG_LEN_USE (s, len)); \
  cs[F77_CHAR_ARG_LEN_USE(s, len)] = '\0'
 
 
 OCTAVE_NORETURN CRUFT_API extern
-F77_RET_T 
+F77_RET_T
 F77_FUNC (xstopx, XSTOPX) (F77_CONST_CHAR_ARG_DECL
                            F77_CHAR_ARG_LEN_DECL);
 
 #ifdef __cplusplus
 }
 #endif
 
 #endif
diff --git a/liboctave/util/lo-array-gripes.h b/liboctave/util/lo-array-gripes.h
--- a/liboctave/util/lo-array-gripes.h
+++ b/liboctave/util/lo-array-gripes.h
@@ -104,61 +104,61 @@ extern OCTAVE_API const char *error_id_n
 extern OCTAVE_API const char *error_id_index_out_of_bounds;
 
 extern OCTAVE_API const char *error_id_invalid_index;
 
 extern OCTAVE_API const char *warning_id_nearly_singular_matrix;
 
 extern OCTAVE_API const char *warning_id_singular_matrix;
 
-OCTAVE_NORETURN OCTAVE_API extern void 
+OCTAVE_NORETURN OCTAVE_API extern void
 gripe_nan_to_logical_conversion (void);
 
-OCTAVE_NORETURN OCTAVE_API extern void 
+OCTAVE_NORETURN OCTAVE_API extern void
 gripe_nan_to_character_conversion (void);
 
-OCTAVE_NORETURN OCTAVE_API extern void 
+OCTAVE_NORETURN OCTAVE_API extern void
 gripe_nonconformant (const char *op,
                      octave_idx_type op1_len,
                      octave_idx_type op2_len);
 
-OCTAVE_NORETURN OCTAVE_API extern void 
+OCTAVE_NORETURN OCTAVE_API extern void
 gripe_nonconformant (const char *op,
                      octave_idx_type op1_nr, octave_idx_type op1_nc,
                      octave_idx_type op2_nr, octave_idx_type op2_nc);
 
 
-OCTAVE_NORETURN OCTAVE_API extern void 
+OCTAVE_NORETURN OCTAVE_API extern void
 gripe_nonconformant (const char *op, const dim_vector& op1_dims,
                      const dim_vector& op2_dims);
 
-OCTAVE_NORETURN OCTAVE_API extern void 
+OCTAVE_NORETURN OCTAVE_API extern void
 gripe_index_out_of_range (int nd, int dim,
                           octave_idx_type iext, octave_idx_type ext,
                           const dim_vector& d);
 
-OCTAVE_NORETURN OCTAVE_API extern void 
+OCTAVE_NORETURN OCTAVE_API extern void
 gripe_index_out_of_range (int nd, int dim,
                           octave_idx_type iext, octave_idx_type ext);
 
-OCTAVE_NORETURN OCTAVE_API extern void 
+OCTAVE_NORETURN OCTAVE_API extern void
 gripe_del_index_out_of_range (bool is1d, octave_idx_type iext,
                               octave_idx_type ext);
 
-OCTAVE_NORETURN OCTAVE_API extern void 
+OCTAVE_NORETURN OCTAVE_API extern void
 gripe_invalid_index (double, octave_idx_type nd = 0,
                      octave_idx_type dim = 0,
                      const std::string& var = "");
 
-OCTAVE_NORETURN OCTAVE_API extern void 
+OCTAVE_NORETURN OCTAVE_API extern void
 gripe_invalid_index (octave_idx_type n, octave_idx_type nd = 0,
                      octave_idx_type dim = 0,
                      const std::string& var = "");
 
-OCTAVE_NORETURN OCTAVE_API extern void 
+OCTAVE_NORETURN OCTAVE_API extern void
 gripe_invalid_index (const std::string& idx, octave_idx_type nd = 0,
                      octave_idx_type dim = 0,
                      const std::string& var = "");
 
 OCTAVE_NORETURN OCTAVE_API extern void
 gripe_invalid_resize (void);
 
 extern void OCTAVE_API
diff --git a/scripts/general/display.m b/scripts/general/display.m
--- a/scripts/general/display.m
+++ b/scripts/general/display.m
@@ -17,31 +17,31 @@
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {} {} display (@var{obj})
 ## Display the contents of the object @var{obj}.
 ##
 ## The Octave interpreter calls the @code{display} function whenever it needs
 ## to present a class on-screen.  Typically, this would be a statement which
-## does not end in a semicolon to suppress output.  For example, 
+## does not end in a semicolon to suppress output.  For example,
 ##
 ## @example
 ## myobj = myclass (@dots{})
 ## @end example
 ##
 ## User-defined classes should overload the @code{display} method so that
 ## something useful is printed for a class object.  Otherwise, Octave will
 ## report only that the object is an instance of its class.
 ##
 ## @example
 ## myobj = myclass (@dots{})
 ##   @result{} myobj = <class myclass>
 ## @end example
-## 
+##
 ## @seealso{class, subsref, subsasgn}
 ## @end deftypefn
 
 function display (obj)
 
   if (nargin != 1)
     print_usage ();
   endif
diff --git a/scripts/general/int2str.m b/scripts/general/int2str.m
--- a/scripts/general/int2str.m
+++ b/scripts/general/int2str.m
@@ -41,17 +41,17 @@
 ##
 ## This function is not very flexible.  For better control over the
 ## results, use @code{sprintf} (@pxref{Formatted Output}).
 ##
 ## Programming Notes:
 ##
 ## Non-integers are rounded to integers before display.  Only the real part
 ## of complex numbers is displayed.
-## 
+##
 ## @seealso{sprintf, num2str, mat2str}
 ## @end deftypefn
 
 ## Author: jwe
 
 function retval = int2str (n)
 
   if (nargin != 1)
diff --git a/scripts/general/num2str.m b/scripts/general/num2str.m
--- a/scripts/general/num2str.m
+++ b/scripts/general/num2str.m
@@ -171,17 +171,17 @@ function retval = num2str (x, arg)
     nd = ndims (x);
     nc = columns (x);
     idx = repmat ({':'}, nd, 1);
     perm(1:2:2*nc) = 1:nc;
     perm(2:2:2*nc) = nc + (1:nc);
     idx{2} = perm;
     x = horzcat (real (x), imag (x));
     x = x(idx{:});
-    
+
     fmt = [deblank(repmat(fmt, 1, nc * (nd - 1))), "\n"];
     tmp = sprintf (fmt, permute (x, [2, 3:nd, 1]));
 
     ## Put the "i"'s where they are supposed to be.
     tmp = regexprep (tmp, " +i\n", "i\n");
     tmp = regexprep (tmp, "( +)i", "i$1");
 
     retval = strtrim (char (ostrsplit (tmp(1:end-1), "\n")));
diff --git a/scripts/general/subsindex.m b/scripts/general/subsindex.m
--- a/scripts/general/subsindex.m
+++ b/scripts/general/subsindex.m
@@ -56,25 +56,25 @@
 ## @result{} 1  2  3  4
 ## @end group
 ## @end example
 ##
 ## @seealso{class, subsref, subsasgn}
 ## @end deftypefn
 
 function idx = subsindex (obj)
-  
+
   if (nargin != 1)
     print_usage ();
   endif
 
   ## Only way to get here is if subsindex has not been overloaded by a class.
   error ('subsindex: not defined for class "%s"', class (obj));
 
 endfunction
 
 
-%!error <not defined for class "double"> subsindex (1) 
+%!error <not defined for class "double"> subsindex (1)
 
 ## Test input validation
 %!error subsindex ()
 %!error subsindex (1, 2)
 
diff --git a/scripts/miscellaneous/fileattrib.m b/scripts/miscellaneous/fileattrib.m
--- a/scripts/miscellaneous/fileattrib.m
+++ b/scripts/miscellaneous/fileattrib.m
@@ -102,17 +102,17 @@ function [status, msg, msgid] = fileattr
       else
         [~, attrib] = dos (sprintf ('attrib "%s"', r(i).Name));
         ## dos never returns error status so have to check it indirectly
         if (! isempty (strfind (attrib, " -")))
           status = false;
           msgid = "fileattrib";
           break;
         endif
-        attrib = regexprep (attrib, '\S+:.*', ""); 
+        attrib = regexprep (attrib, '\S+:.*', "");
         r(i).archive = any (attrib == "A");
         r(i).system = any (attrib == "S");
         r(i).hidden = any (attrib == "H");
       endif
 
       r(i).directory = S_ISDIR (info.mode);
 
       modestr = info.modestr;
diff --git a/test/parser.tst b/test/parser.tst
--- a/test/parser.tst
+++ b/test/parser.tst
@@ -312,11 +312,11 @@
 
 ## Check that a cell array containing function handles is parsed
 ## correctly with or without commas.
 %!test
 %! a = {1, @sin, 2, @cos};
 %! b = {1 @sin 2 @cos};
 %! assert (a, b)
 
-## Maybe unnecessary, but check that further changes to parser don't 
+## Maybe unnecessary, but check that further changes to parser don't
 ## invalidate error handling (bug #46534).
 #!error <vertical dimensions mismatch \(1x2 vs 1x1\)> z = [1, 2; 3]
