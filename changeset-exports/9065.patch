# HG changeset patch
# User Rik <rdrider0-list@yahoo.com>
# Date 1238287402 25200
#      Sat Mar 28 17:43:22 2009 -0700
# Node ID 8207b833557fc7f9da748d021f712bdfb3feb950
# Parent  7c02ec148a3cde69aae831af90832597e7cecf2a
Cleanup documentation for arith.texi, linalg.texi, nonlin.texi

Grammarcheck input .txi files
Spellcheck .texi files

diff --git a/doc/interpreter/linalg.txi b/doc/interpreter/linalg.txi
--- a/doc/interpreter/linalg.txi
+++ b/doc/interpreter/linalg.txi
@@ -57,31 +57,31 @@ backward substitution using the @sc{Lapa
 
 @item If the matrix is square, hermitian with a real positive diagonal,
 attempt Cholesky factorization using the @sc{Lapack} xPOTRF function.
 
 @item If the Cholesky factorization failed or the matrix is not
 hermitian with a real positive diagonal, and the matrix is square, factorize 
 using the @sc{Lapack} xGETRF function.
 
-@item  If the matrix is not square, or any of the previous solvers flags
+@item If the matrix is not square, or any of the previous solvers flags
 a singular or near singular matrix, find a least squares solution using
 the @sc{Lapack} xGELSD function.
 @end enumerate
 
 The user can force the type of the matrix with the @code{matrix_type}
-function. This overcomes the cost of discovering the type of the matrix.
+function.  This overcomes the cost of discovering the type of the matrix.
 However, it should be noted that identifying the type of the matrix incorrectly
 will lead to unpredictable results, and so @code{matrix_type} should be
 used with care.
 
 It should be noted that the test for whether a matrix is a candidate for
 Cholesky factorization, performed above and by the @code{matrix_type}
 function, does not give a certainty that the matrix is
-Hermitian. However, the attempt to factorize the matrix will quickly
+Hermitian.  However, the attempt to factorize the matrix will quickly
 flag a non-Hermitian matrix.
 
 @node Basic Matrix Functions
 @section Basic Matrix Functions
 
 @DOCSTRING(balance)
 
 @DOCSTRING(cond)
diff --git a/doc/interpreter/nonlin.txi b/doc/interpreter/nonlin.txi
--- a/doc/interpreter/nonlin.txi
+++ b/doc/interpreter/nonlin.txi
@@ -51,55 +51,61 @@ Here is a complete example.  To solve th
  \eqalign{-2x^2 + 3xy + 4\sin(y) - 6 &= 0\cr
            3x^2 - 2xy^2 + 3\cos(x) + 4 &= 0}
 $$
 @end tex
 @end iftex
 @ifinfo
 
 @example
+@group
 -2x^2 + 3xy   + 4 sin(y) = 6
  3x^2 - 2xy^2 + 3 cos(x) = -4
+@end group
 @end example
 @end ifinfo
 
 @noindent
 you first need to write a function to compute the value of the given
 function.  For example:
 
 @example
+@group
 function y = f (x)
   y(1) = -2*x(1)^2 + 3*x(1)*x(2)   + 4*sin(x(2)) - 6;
   y(2) =  3*x(1)^2 - 2*x(1)*x(2)^2 + 3*cos(x(1)) + 4;
 endfunction
+@end group
 @end example
 
 Then, call @code{fsolve} with a specified initial condition to find the
 roots of the system of equations.  For example, given the function
 @code{f} defined above,
 
 @example
 [x, fval, info] = fsolve (@@f, [1; 2])
 @end example
 
 @noindent
 results in the solution
 
 @example
+@group
 x =
 
   0.57983
   2.54621
 
 fval =
 
   -5.7184e-10
    5.5460e-10
 
 info = 1
+@end group
 @end example
 
 @noindent
 A value of @code{info = 1} indicates that the solution has converged.
 
 The function @code{perror} may be used to print English messages
 corresponding to the numeric error codes.  For example,
 
@@ -127,22 +133,24 @@ analytically as
                -2 x_2^2 - 3 \sin(x_1) + 6 x_1 &
                -4 x_1 x_2                     \cr }\right]
 $$
 @end tex
 and compute it with the following Octave function
 @end iftex
 
 @example
+@group
 function J = jacobian(x)
   J(1,1) =  3*x(2) - 4*x(1);
   J(1,2) =  4*cos(x(2)) + 3*x(1);
   J(2,1) = -2*x(2)^2 - 3*sin(x(1)) + 6*x(1);
   J(2,2) = -4*x(1)*x(2);
 endfunction
+@end group
 @end example
 
 @noindent
 The Jacobian can then be used with the following call to @code{fsolve}:
 
 @example
 [x, fval, info] = fsolve (@{@@f, @@jacobian@}, [1; 2]);
 @end example
diff --git a/scripts/deprecated/dmult.m b/scripts/deprecated/dmult.m
--- a/scripts/deprecated/dmult.m
+++ b/scripts/deprecated/dmult.m
@@ -14,17 +14,17 @@
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} dmult (@var{a}, @var{b})
-## This function has been deprecated. Use the direct syntax @code{diag(A)*B}
+## This function has been deprecated.  Use the direct syntax @code{diag(A)*B}
 ## which is more readable and now also more efficient.
 ## @end deftypefn
 
 ## Author: KH <Kurt.Hornik@wu-wien.ac.at>
 ## Description: Rescale the rows of a matrix
 
 ## Deprecated in version 3.2
 
diff --git a/scripts/linear-algebra/expm.m b/scripts/linear-algebra/expm.m
--- a/scripts/linear-algebra/expm.m
+++ b/scripts/linear-algebra/expm.m
@@ -11,31 +11,31 @@
 ## WITHOUT ANY WARRANTY; without even the implied warranty of
 ## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
-##-*- texinfo -*-
+## -*- texinfo -*-
 ## @deftypefn {Function File} {} expm (@var{a})
 ## Return the exponential of a matrix, defined as the infinite Taylor
 ## series
 ## @iftex
 ## @tex
 ## $$
 ##  \exp (A) = I + A + {A^2 \over 2!} + {A^3 \over 3!} + \cdots
 ## $$
 ## @end tex
 ## @end iftex
 ## @ifnottex
 ## 
 ## @example
-## expm(a) = I + a + a^2/2! + a^3/3! + ...
+## expm(a) = I + a + a^2/2! + a^3/3! + @dots{}
 ## @end example
 ## 
 ## @end ifnottex
 ## The Taylor series is @emph{not} the way to compute the matrix
 ## exponential; see Moler and Van Loan, @cite{Nineteen Dubious Ways to
 ## Compute the Exponential of a Matrix}, SIAM Review, 1978.  This routine
 ## uses Ward's diagonal
 ## @iftex
@@ -60,18 +60,20 @@
 ## @iftex
 ## @tex
 ## $D_q(a)^{-1}N_q(a)$
 ## @end tex
 ## @end iftex
 ## @ifnottex
 ## 
 ## @example
+## @group
 ##      -1
 ## D (a)   N (a)
+## @end group
 ## @end example
 ## 
 ## @end ifnottex
 ##  whose Taylor series matches the first
 ## @iftex
 ## @tex
 ## $2 q + 1 $
 ## @end tex
diff --git a/scripts/optimization/fsolve.m b/scripts/optimization/fsolve.m
--- a/scripts/optimization/fsolve.m
+++ b/scripts/optimization/fsolve.m
@@ -44,17 +44,17 @@
 ## If @code{"Updating"} is "on", the function will attempt to use Broyden
 ## updates to update the Jacobian, in order to reduce the amount of jacobian
 ## calculations.
 ## If your user function always calculates the Jacobian (regardless of number
 ## of output arguments), this option provides no advantage and should be set to
 ## false.
 ## 
 ## @code{"ComplexEqn"} is @code{"on"}, @code{fsolve} will attempt to solve
-## complex equations in complex variables, assuming that the equations posess a
+## complex equations in complex variables, assuming that the equations possess a
 ## complex derivative (i.e., are holomorphic).  If this is not what you want, 
 ## should unpack the real and imaginary parts of the system to get a real
 ## system.
 ##
 ## For description of the other options, see @code{optimset}.
 ##
 ## On return, @var{fval} contains the value of the function @var{fcn}
 ## evaluated at @var{x}, and @var{info} may be one of the following values:
diff --git a/src/DLD-FUNCTIONS/chol.cc b/src/DLD-FUNCTIONS/chol.cc
--- a/src/DLD-FUNCTIONS/chol.cc
+++ b/src/DLD-FUNCTIONS/chol.cc
@@ -66,17 +66,17 @@ matrix @var{a}, where\n\
 @var{r}' * @var{r} = @var{a}.\n\
 @end example\n\
 @end ifnottex\n\
 \n\
 Called with one output argument @code{chol} fails if @var{a} or @var{s} is\n\
 not positive definite.  With two or more output arguments @var{p} flags\n\
 whether the matrix was positive definite and @code{chol} does not fail.  A\n\
 zero value indicated that the matrix was positive definite and the @var{r}\n\
-gives the factorization, annd @var{p} will have a positive value otherwise.\n\
+gives the factorization, and @var{p} will have a positive value otherwise.\n\
 \n\
 If called with 3 outputs then a sparsity preserving row/column permutation\n\
 is applied to @var{a} prior to the factorization.  That is @var{r}\n\
 is the factorization of @code{@var{a}(@var{q},@var{q})} such that\n\
 @iftex\n\
 @tex\n\
 $ R^T R = Q^T A Q$.\n\
 @end tex\n\
@@ -98,31 +98,31 @@ such that\n\
 @end iftex\n\
 @ifnottex\n\
 \n\
 @example\n\
 @var{r}' * @var{r} = a (@var{q}, @var{q}).\n\
 @end example\n\
 @end ifnottex\n\
 \n\
-Called with either a sparse or full matrix and uing the 'lower' flag,\n\
+Called with either a sparse or full matrix and using the 'lower' flag,\n\
 @code{chol} returns the lower triangular factorization such that\n\
 @iftex\n\
 @tex\n\
 $ L L^T = A $.\n\
 @end tex\n\
 @end iftex\n\
 @ifnottex\n\
 \n\
 @example\n\
 @var{l} * @var{l}' = @var{a}.\n\
 @end example\n\
 @end ifnottex\n\
 \n\
-In general the lower trinagular factorization is significantly faster for\n\
+In general the lower triangular factorization is significantly faster for\n\
 sparse matrices.\n\
 @seealso{cholinv, chol2inv}\n\
 @end deftypefn")
 {
   octave_value_list retval;
   int nargin = args.length ();
   bool LLt = false;
   bool vecout = false;
diff --git a/src/DLD-FUNCTIONS/lu.cc b/src/DLD-FUNCTIONS/lu.cc
--- a/src/DLD-FUNCTIONS/lu.cc
+++ b/src/DLD-FUNCTIONS/lu.cc
@@ -109,17 +109,17 @@ Called with two or three output argument
 then @dfn{lu} does not attempt to perform sparsity preserving column\n\
 permutations.  Called with a fourth output argument, the sparsity\n\
 preserving column transformation @var{Q} is returned, such that\n\
 @code{@var{p} * @var{a} * @var{q} = @var{l} * @var{u}}.\n\
 \n\
 Called with a fifth output argument and a sparse input matrix, then\n\
 @dfn{lu} attempts to use a scaling factor @var{r} on the input matrix\n\
 such that @code{@var{p} * (@var{r} \\ @var{a}) * @var{q} = @var{l} * @var{u}}.\n\
-This typically leads to a sparser and more stable factorsation.\n\
+This typically leads to a sparser and more stable factorization.\n\
 \n\
 An additional input argument @var{thres}, that defines the pivoting\n\
 threshold can be given.  @var{thres} can be a scalar, in which case\n\
 it defines UMFPACK pivoting tolerance for both symmetric and unsymmetric\n\
 cases.  If @var{thres} is a two element vector, then the first element\n\
 defines the pivoting tolerance for the unsymmetric UMFPACK pivoting\n\
 strategy and the second the symmetric strategy.  By default, the values\n\
 defined by @code{spparms} are used and are by default @code{[0.1, 0.001]}.\n\
diff --git a/src/DLD-FUNCTIONS/max.cc b/src/DLD-FUNCTIONS/max.cc
--- a/src/DLD-FUNCTIONS/max.cc
+++ b/src/DLD-FUNCTIONS/max.cc
@@ -935,17 +935,17 @@ is equivalent to the following code:\n\
     [w(idxw@{:@}), iw(idxw@{:@})] =\\n\
  min(x(idxx@{:@}), [], dim);\n\
   endfor\n\
 @end group\n\
 @end example\n\
 \n\
 @noindent\n\
 but computed in a much faster manner.\n\
-The behaviour if @var{dim} or @var{iw} is unspecified is analogous\n\
+The behavior if @var{dim} or @var{iw} is unspecified is analogous\n\
 to @code{min}.\n\
 @end deftypefn")
 {
   CUMMINMAX_BODY (cummin);
 }
 
 DEFUN_DLD (cummax, args, nargout,
   "-*- texinfo -*-\n\
@@ -968,17 +968,17 @@ is equivalent to the following code:\n\
     [w(idxw@{:@}), iw(idxw@{:@})] =\\n\
  max(x(idxx@{:@}), [], dim);\n\
   endfor\n\
 @end group\n\
 @end example\n\
 \n\
 @noindent\n\
 but computed in a much faster manner.\n\
-The behaviour if @var{dim} or @var{iw} is unspecified is analogous\n\
+The behavior if @var{dim} or @var{iw} is unspecified is analogous\n\
 to @code{max}.\n\
 @end deftypefn")
 {
   CUMMINMAX_BODY (cummax);
 }
 
 /*
 ;;; Local Variables: ***
diff --git a/src/mappers.cc b/src/mappers.cc
--- a/src/mappers.cc
+++ b/src/mappers.cc
@@ -612,17 +612,17 @@ see @ref{Linear Algebra}.\n\
 %!assert(exp (Inf) == Inf && exp (-Inf) == 0 && isnan (exp (NaN)));
 %!assert(exp (Inf ('single')) == Inf('single') && exp (-Inf('single')) == 0 && isnan (exp (NaN('single'))));
 
 */
 
 DEFUN (expm1, args, ,
     "-*- texinfo -*-\n\
 @deftypefn {Mapping Function} {} expm1 (@var{x})\n\
-Compute exp (@var{x}) - 1 accurately in neighbourhood of zero.\n\
+Compute exp (@var{x}) - 1 accurately in neighborhood of zero.\n\
 @end deftypefn")
 {
   octave_value retval;
   if (args.length () == 1)
     retval = args(0).expm1 ();
   else
     print_usage ();
 
@@ -1210,17 +1210,17 @@ Compute the base-10 logarithm for each e
 %!error log10 ();
 %!error log10 (1, 2);
 
 */
 
 DEFUN (log1p, args, ,
     "-*- texinfo -*-\n\
 @deftypefn {Mapping Function} {} log1p (@var{x})\n\
-Compute log (1 + @var{x}) accurately in neighbourhood of zero.\n\
+Compute log (1 + @var{x}) accurately in neighborhood of zero.\n\
 @end deftypefn")
 {
   octave_value retval;
   if (args.length () == 1)
     retval = args(0).log1p ();
   else
     print_usage ();
 
