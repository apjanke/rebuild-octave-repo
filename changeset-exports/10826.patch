# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1280331386 14400
#      Wed Jul 28 11:36:26 2010 -0400
# Node ID 9e6aed3c670459921cfbbb357e1b0fd7088e1a4f
# Parent  cace99cb01abf85c7ada302f215895fe89c5a1bb
fix find for character arrays

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,15 @@
+2010-07-28  John W. Eaton  <jwe@octave.org>
+
+	* DLD-FUNCTIONS/find.cc (Ffind): Reorder cases to check for
+	character strings before numeric arrays.
+	Delete explicit instantiations of find_nonzero_elem_idx templates.
+	New test for char array argument.
+
 2010-07-27  Rik <octave@nomad.inbox5.com>
 
 	* DLD-FUNCTIONS/schur.cc (rsf2csf): Change first documentation line to
 	active voice.
 
 2010-07-27  Jaroslav Hajek  <highegg@gmail.com>
 
 	* DLD-FUNCTIONS/schur.cc (Frsf2csf): New DEFUN.
diff --git a/src/DLD-FUNCTIONS/find.cc b/src/DLD-FUNCTIONS/find.cc
--- a/src/DLD-FUNCTIONS/find.cc
+++ b/src/DLD-FUNCTIONS/find.cc
@@ -77,34 +77,16 @@ find_nonzero_elem_idx (const Array<T>& n
     case 0:
       retval(0) = idx_vector (idx, iext);
       break;
     }
 
   return retval;
 }
 
-#define INSTANTIATE_FIND_ARRAY(T) \
-template octave_value_list find_nonzero_elem_idx (const Array<T>&, int, \
-                                                  octave_idx_type, int)
-
-INSTANTIATE_FIND_ARRAY(double);
-INSTANTIATE_FIND_ARRAY(float);
-INSTANTIATE_FIND_ARRAY(Complex);
-INSTANTIATE_FIND_ARRAY(FloatComplex);
-INSTANTIATE_FIND_ARRAY(bool);
-INSTANTIATE_FIND_ARRAY(octave_int8);
-INSTANTIATE_FIND_ARRAY(octave_int16);
-INSTANTIATE_FIND_ARRAY(octave_int32);
-INSTANTIATE_FIND_ARRAY(octave_int64);
-INSTANTIATE_FIND_ARRAY(octave_uint8);
-INSTANTIATE_FIND_ARRAY(octave_uint16);
-INSTANTIATE_FIND_ARRAY(octave_uint32);
-INSTANTIATE_FIND_ARRAY(octave_uint64);
-
 template <typename T>
 octave_value_list
 find_nonzero_elem_idx (const Sparse<T>& v, int nargout, 
                        octave_idx_type n_to_find, int direction)
 {
   octave_value_list retval ((nargout == 0 ? 1 : nargout), Matrix ());
 
 
@@ -238,25 +220,16 @@ find_nonzero_elem_idx (const Sparse<T>& 
     default:
       panic_impossible ();
       break;
     }
 
   return retval;
 }
 
-template octave_value_list find_nonzero_elem_idx (const Sparse<double>&, int,
-                                                  octave_idx_type, int);
-
-template octave_value_list find_nonzero_elem_idx (const Sparse<Complex>&, int,
-                                                  octave_idx_type, int);
-
-template octave_value_list find_nonzero_elem_idx (const Sparse<bool>&, int,
-                                                  octave_idx_type, int);
-
 octave_value_list
 find_nonzero_elem_idx (const PermMatrix& v, int nargout, 
                        octave_idx_type n_to_find, int direction)
 {
   // There are far fewer special cases to handle for a PermMatrix.
   octave_value_list retval ((nargout == 0 ? 1 : nargout), Matrix ());
 
   octave_idx_type nc = v.cols();
@@ -547,74 +520,64 @@ b = sparse(i, j, v, sz(1), sz(2));\n\
     }
   else if (arg.is_perm_matrix ())
     {
       PermMatrix P = arg.perm_matrix_value ();
 
       if (! error_state)
         retval = find_nonzero_elem_idx (P, nargout, n_to_find, direction);
     }
-  else
+  else if (arg.is_string ())
     {
-      if (arg.is_single_type ())
-        {
-          if (arg.is_real_type ())
-            {
-              FloatNDArray nda = arg.float_array_value ();
+      charNDArray chnda = arg.char_array_value ();
 
-              if (! error_state)
-                retval = find_nonzero_elem_idx (nda, nargout, 
-                                                n_to_find, direction);
-            }
-          else if (arg.is_complex_type ())
-            {
-              FloatComplexNDArray cnda = arg.float_complex_array_value ();
-
-              if (! error_state)
-                retval = find_nonzero_elem_idx (cnda, nargout, 
-                                                n_to_find, direction);
-            }
-        }
-      else
+      if (! error_state)
+        retval = find_nonzero_elem_idx (chnda, nargout, n_to_find, direction);
+    }
+  else if (arg.is_single_type ())
+    {
+      if (arg.is_real_type ())
         {
-          if (arg.is_real_type ())
-            {
-              NDArray nda = arg.array_value ();
-
-              if (! error_state)
-                retval = find_nonzero_elem_idx (nda, nargout, 
-                                                n_to_find, direction);
-            }
-          else if (arg.is_complex_type ())
-            {
-              ComplexNDArray cnda = arg.complex_array_value ();
+          FloatNDArray nda = arg.float_array_value ();
 
-              if (! error_state)
-                retval = find_nonzero_elem_idx (cnda, nargout, 
-                                                n_to_find, direction);
-            }
-          else if (arg.is_string ())
-            {
-              charNDArray cnda = arg.char_array_value ();
+          if (! error_state)
+            retval = find_nonzero_elem_idx (nda, nargout, n_to_find,
+                                            direction);
+        }
+      else if (arg.is_complex_type ())
+        {
+          FloatComplexNDArray cnda = arg.float_complex_array_value ();
 
-              if (! error_state)
-                retval = find_nonzero_elem_idx (cnda, nargout, 
-                                                n_to_find, direction);
-            }
-          else
-            {
-              gripe_wrong_type_arg ("find", arg);
-            }
+          if (! error_state)
+            retval = find_nonzero_elem_idx (cnda, nargout, n_to_find,
+                                            direction);
         }
     }
+  else if (arg.is_real_type ())
+    {
+      NDArray nda = arg.array_value ();
+
+      if (! error_state)
+        retval = find_nonzero_elem_idx (nda, nargout, n_to_find, direction);
+    }
+  else if (arg.is_complex_type ())
+    {
+      ComplexNDArray cnda = arg.complex_array_value ();
+
+      if (! error_state)
+        retval = find_nonzero_elem_idx (cnda, nargout, n_to_find, direction);
+    }
+  else
+    gripe_wrong_type_arg ("find", arg);
 
   return retval;
 }
 
 /*
+%!assert(find (char ([0, 97])), 2);
 %!assert(find ([1, 0, 1, 0, 1]), [1, 3, 5]);
 %!assert(find ([1; 0; 3; 0; 1]), [1; 3; 5]);
 %!assert(find ([0, 0, 2; 0, 3, 0; -1, 0, 0]), [3; 5; 7]);
 
 %!test
 %! [i, j, v] = find ([0, 0, 2; 0, 3, 0; -1, 0, 0]);
 %! 
 %! assert(i, [3; 2; 1]);
