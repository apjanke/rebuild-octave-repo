# HG changeset patch
# User Torsten <ttl@justmail.de>
# Date 1405881870 -7200
#      Sun Jul 20 20:44:30 2014 +0200
# Branch gui-release
# Node ID b2c4d6d461f057d6854205d06349d9ea0c110854
# Parent  58f1178f49ef7095559740ce428712bb6d6cab15
fix conflict between main and editor menus when using alt keys (bug #42659)

* file-editor.cc (enable_menu_shortcuts): new function enabling/disabling the
  alt-key accelerators;
  (m_add_menu): new function adding a menu and storing menu title with and
  without the char & indicating the accelerator in a hash;
  (construct): use m_add_menu for adding a new menu to the menu bar

* file-editor-interface.h: new virtual function enable_menu_shortcuts

* file-editor.h: new functions enable_menu_shortcuts amd m_add_menu, new hash
  for storing the menu titles

* main-window.cc (connect_visibility_changed): disable editors menu shortcuts;
  (enable_menu_shortcuts): new function enabling/disabling the
  alt-key accelerators;
  (m_add_menu): new function adding a menu and storing menu title with and
  without the char & indicating the accelerator in a hash;
  (construct_file_menu, construct_edit_menu, construct_debug_menu,
  construct_window_menu, construct_help_menu, construct_news_menu):
  use m_add_menu for adding a new menu to the menu bar;
  (set_global_edit_shortcuts): enable/disable the main and the editors
  menu shortcuts

diff --git a/libgui/src/m-editor/file-editor-interface.h b/libgui/src/m-editor/file-editor-interface.h
--- a/libgui/src/m-editor/file-editor-interface.h
+++ b/libgui/src/m-editor/file-editor-interface.h
@@ -59,16 +59,18 @@ public:
                                            int line) = 0;
 
   virtual void handle_edit_file_request (const QString& file) = 0;
 
   virtual void set_focus () = 0;
 
   virtual void empty_script (bool, bool) = 0;
 
+  virtual void enable_menu_shortcuts (bool enable) = 0;
+
 public slots:
   virtual void request_new_file (const QString& command = QString ()) = 0;
   virtual void request_new_script (const QString& command = QString ()) = 0;
   virtual void request_new_function (bool) = 0;
   virtual void request_open_file () = 0;
   virtual void request_open_file (const QString& openFileName, int line = -1,
                                   bool debug_pointer = false,
                                   bool breakpoint_marker = false,
diff --git a/libgui/src/m-editor/file-editor.cc b/libgui/src/m-editor/file-editor.cc
--- a/libgui/src/m-editor/file-editor.cc
+++ b/libgui/src/m-editor/file-editor.cc
@@ -1083,16 +1083,47 @@ file_editor::add_action (QMenu *menu, co
 {
   QAction *a = menu->addAction (icon, text, this, member);
   addAction (a);  // important for shortcut context
   a->setShortcutContext (Qt::WidgetWithChildrenShortcut);
   return a;
 }
 
 void
+file_editor::enable_menu_shortcuts (bool enable)
+{
+  QHash<QMenu*, QStringList>::const_iterator i = _hash_menu_text.constBegin();
+
+ while (i != _hash_menu_text.constEnd())
+   {
+     i.key ()->setTitle (i.value ().at (! enable));
+     ++i;
+   }
+}
+
+QMenu*
+file_editor::m_add_menu (QMenuBar *p, QString name)
+{
+  QMenu *menu = p->addMenu (name);
+
+  QString base_name = name;  // get a copy
+  // replace intended '&' ("&&") by a temp. string
+  base_name.replace ("&&","___octave_amp_replacement___");
+  // remove single '&' (shortcut)
+  base_name.remove ("&");
+  // restore intended '&'
+  base_name.replace ("___octave_amp_replacement___","&&");
+
+  // remember names with and without shortcut
+  _hash_menu_text[menu] = QStringList () << name << base_name;
+
+  return menu;
+}
+
+void
 file_editor::construct (void)
 {
   QWidget *editor_widget = new QWidget (this);
 
   // FIXME: what was the intended purpose of this unused variable?
   // QStyle *editor_style = QApplication::style ();
   _menu_bar = new QMenuBar (editor_widget);
 #if defined (Q_OS_MAC)
@@ -1115,17 +1146,17 @@ file_editor::construct (void)
       _mru_file_actions[i] = new QAction (this);
       _mru_file_actions[i]->setVisible (false);
     }
 
   // menu bar
 
   // file menu
 
-  _fileMenu = new QMenu (tr ("&File"), _menu_bar);
+  _fileMenu = m_add_menu (_menu_bar, tr ("&File"));
 
   // new and open menus are inserted later by the main window
   _mru_file_menu = new QMenu (tr ("&Recent Editor Files"), _fileMenu);
   for (int i = 0; i < MaxMRUFiles; ++i)
     _mru_file_menu->addAction (_mru_file_actions[i]);
   _fileMenu->addMenu (_mru_file_menu);
 
   _fileMenu->addSeparator ();
@@ -1152,21 +1183,19 @@ file_editor::construct (void)
           QIcon::fromTheme("window-close", QIcon (":/actions/icons/fileclose.png")),
           tr ("Close Other Files"), SLOT (request_close_other_files (bool)));
 
   _fileMenu->addSeparator ();
 
   _print_action = add_action (_fileMenu, QIcon (":/actions/icons/fileprint.png"),
           tr ("Print..."), SLOT (request_print_file (bool)));
 
-  _menu_bar->addMenu (_fileMenu);
-
   // edit menu
 
-  QMenu *editMenu = new QMenu (tr ("&Edit"), _menu_bar);
+  QMenu *editMenu = m_add_menu (_menu_bar, tr ("&Edit"));
 
   _undo_action = add_action (editMenu, QIcon (":/actions/icons/undo.png"),
           tr ("&Undo"), SLOT (request_undo (bool)));
   _undo_action->setEnabled (false);
   _redo_action = add_action (editMenu, QIcon (":/actions/icons/redo.png"),
           tr ("&Redo"), SLOT (request_redo (bool)));
   _redo_action->setEnabled (false);
 
@@ -1260,34 +1289,32 @@ file_editor::construct (void)
 
   _preferences_action = add_action (editMenu,
           QIcon (":/actions/icons/configure.png"),
           tr ("&Preferences..."), SLOT (request_preferences (bool)));
   _styles_preferences_action = add_action (editMenu,
           QIcon (":/actions/icons/configure.png"),
           tr ("&Styles Preferences..."), SLOT (request_styles_preferences (bool)));
 
-  _menu_bar->addMenu (editMenu);
-
   // view menu
 
-  QMenu *view_menu = new QMenu (tr ("&View"), _menu_bar);
+  QMenu *view_menu = m_add_menu (_menu_bar, tr ("&View"));
 
   _zoom_in_action = add_action (view_menu, QIcon (),
           tr ("Zoom &In"), SLOT (zoom_in (bool)));
   _zoom_out_action = add_action (view_menu, QIcon (),
           tr ("Zoom &Out"), SLOT (zoom_out (bool)));
   _zoom_normal_action = add_action (view_menu, QIcon (),
           tr ("&Normal Size"), SLOT (zoom_normal (bool)));
 
   _menu_bar->addMenu (view_menu);
 
   // debug menu
 
-  _debug_menu = new QMenu (tr ("&Debug"), _menu_bar);
+  _debug_menu = m_add_menu (_menu_bar, tr ("&Debug"));
 
   _toggle_breakpoint_action = add_action (_debug_menu,
           QIcon (":/actions/icons/bp_toggle.png"), tr ("Toggle &Breakpoint"),
           SLOT (request_toggle_breakpoint (bool)));
   _next_breakpoint_action = add_action (_debug_menu,
           QIcon (":/actions/icons/bp_next.png"), tr ("&Next Breakpoint"),
           SLOT (request_next_breakpoint (bool)));
   _previous_breakpoint_action = add_action (_debug_menu,
@@ -1296,41 +1323,35 @@ file_editor::construct (void)
   _remove_all_breakpoints_action = add_action (_debug_menu,
           QIcon (":/actions/icons/bp_rm_all.png"), tr ("&Remove All Breakpoints"),
           SLOT (request_remove_breakpoint (bool)));
 
   _debug_menu->addSeparator ();
 
   // The other debug actions will be added by the main window.
 
-  _menu_bar->addMenu (_debug_menu);
-
   // run menu
 
-  QMenu *_run_menu = new QMenu (tr ("&Run"), _menu_bar);
+  QMenu *_run_menu = m_add_menu (_menu_bar, tr ("&Run"));
 
   _run_action = add_action (_run_menu, QIcon (":/actions/icons/artsbuilderexecute.png"),
           tr ("Save File and Run"), SLOT (request_run_file (bool)));
   _run_selection_action = add_action (_run_menu, QIcon (),
           tr ("Run &Selection"), SLOT (request_context_run (bool)));
   _run_selection_action->setEnabled (false);
 
-  _menu_bar->addMenu (_run_menu);
-
   // help menu
 
-  QMenu *_help_menu = new QMenu (tr ("&Help"), _menu_bar);
+  QMenu *_help_menu = m_add_menu (_menu_bar, tr ("&Help"));
 
   _context_help_action = add_action (_help_menu, QIcon (),
           tr ("&Help on Keyword"), SLOT (request_context_help (bool)));
   _context_doc_action = add_action (_help_menu, QIcon (),
           tr ("&Documentation on Keyword"), SLOT (request_context_doc (bool)));
 
-  _menu_bar->addMenu (_help_menu);
-
   // toolbar
 
   // new and open actions are inserted later from main window
   _tool_bar->addAction (_save_action);
   _tool_bar->addAction (_save_as_action);
   _tool_bar->addSeparator ();
   _tool_bar->addAction (_print_action);
   _tool_bar->addSeparator ();
diff --git a/libgui/src/m-editor/file-editor.h b/libgui/src/m-editor/file-editor.h
--- a/libgui/src/m-editor/file-editor.h
+++ b/libgui/src/m-editor/file-editor.h
@@ -59,16 +59,17 @@ public:
   void insert_new_open_actions (QAction*,QAction*,QAction*);
 
   void set_focus (void);
   void handle_enter_debug_mode (void);
   void handle_exit_debug_mode (void);
 
   void check_actions (void);
   void empty_script (bool startup, bool visible);
+  void enable_menu_shortcuts (bool enable);
 
 signals:
 
   void fetab_settings_changed (const QSettings *settings);
   void fetab_close_request (const QWidget* ID, bool app_closing = false);
   void fetab_change_request (const QWidget* ID);
   void fetab_file_name_query (const QWidget* ID);
   // Save is a ping-pong type of communication
@@ -233,17 +234,20 @@ private:
   void save_file_as (QWidget *fetabID = 0);
   void mru_menu_update (void);
   bool call_custom_editor (const QString& file_name = QString (), int line = -1);
 
   QWidget *find_tab_widget (const QString& openFileName) const;
   QAction *add_action (QMenu *menu, const QIcon &icon, const QString &text,
                        const char *member);
 
+  QMenu* m_add_menu (QMenuBar *p, QString text);
+
   std::map<QString, QWidget *> editor_tab_map;
+  QHash<QMenu*, QStringList> _hash_menu_text;
 
   QString ced;
 
   QMenuBar *_menu_bar;
   QToolBar *_tool_bar;
   QMenu *_debug_menu;
 
   QAction *_new_action;
@@ -317,12 +321,11 @@ private:
   QTabWidget *_tab_widget;
 
   int _marker_breakpoint;
 
   enum { MaxMRUFiles = 10 };
   QMenu *_mru_file_menu;
   QAction *_mru_file_actions[MaxMRUFiles];
   QStringList _mru_files;
-
 };
 
 #endif // FILEEDITORMDISUBWINDOW_H
diff --git a/libgui/src/main-window.cc b/libgui/src/main-window.cc
--- a/libgui/src/main-window.cc
+++ b/libgui/src/main-window.cc
@@ -1019,16 +1019,18 @@ main_window::write_settings (void)
 
 // Connecting the signals emitted when the visibility of a widget changes.
 // This has to be done after the window is shown (see octave-gui.cc)
 void
 main_window::connect_visibility_changed (void)
 {
   foreach (octave_dock_widget *widget, dock_widget_list ())
     widget->connect_visibility_changed ();
+
+  editor_window->enable_menu_shortcuts (false);
 }
 
 void
 main_window::copyClipboard (void)
 {
   if (_current_directory_combo_box->hasFocus ())
     {
       QLineEdit * edit = _current_directory_combo_box->lineEdit ();
@@ -1461,19 +1463,50 @@ main_window::add_action (QMenu *menu, co
     a = menu->addAction (icon, text, this, member);
 
   addAction (a);  // important for shortcut context
   a->setShortcutContext (Qt::ApplicationShortcut);
   return a;
 }
 
 void
+main_window::enable_menu_shortcuts (bool enable)
+{
+  QHash<QMenu*, QStringList>::const_iterator i = _hash_menu_text.constBegin();
+
+ while (i != _hash_menu_text.constEnd())
+   {
+     i.key ()->setTitle (i.value ().at (! enable));
+     ++i;
+   }
+}
+
+QMenu*
+main_window::m_add_menu (QMenuBar *p, QString name)
+{
+  QMenu *menu = p->addMenu (name);
+
+  QString base_name = name;  // get a copy
+  // replace intended '&' ("&&") by a temp. string
+  base_name.replace ("&&","___octave_amp_replacement___");
+  // remove single '&' (shortcut)
+  base_name.remove ("&");
+  // restore intended '&'
+  base_name.replace ("___octave_amp_replacement___","&&");
+
+  // remember names with and without shortcut
+  _hash_menu_text[menu] = QStringList () << name << base_name;
+
+  return menu;
+}
+
+void
 main_window::construct_file_menu (QMenuBar *p)
 {
-  QMenu *file_menu = p->addMenu (tr ("&File"));
+  QMenu *file_menu = m_add_menu (p, tr ("&File"));
 
   construct_new_menu (file_menu);
 
   _open_action
     = file_menu->addAction (QIcon (":/actions/icons/folder_documents.png"),
                             tr ("Open..."));
   _open_action->setShortcutContext (Qt::ApplicationShortcut);
 
@@ -1549,17 +1582,17 @@ main_window::construct_new_menu (QMenu *
 
   connect (_new_figure_action, SIGNAL (triggered ()),
            this, SLOT (handle_new_figure_request ()));
 }
 
 void
 main_window::construct_edit_menu (QMenuBar *p)
 {
-  QMenu *edit_menu = p->addMenu (tr ("&Edit"));
+  QMenu *edit_menu = m_add_menu (p, tr ("&Edit"));
 
   QKeySequence ctrl_shift = Qt::ControlModifier + Qt::ShiftModifier;
 
   _undo_action
     = edit_menu->addAction (QIcon (":/actions/icons/undo.png"), tr ("Undo"));
 
   edit_menu->addSeparator ();
 
@@ -1624,17 +1657,17 @@ main_window::construct_debug_menu_item (
 #endif
 
   return action;
 }
 
 void
 main_window::construct_debug_menu (QMenuBar *p)
 {
-  _debug_menu = p->addMenu (tr ("De&bug"));
+  _debug_menu = m_add_menu (p, tr ("De&bug"));
 
   _debug_step_over = construct_debug_menu_item
                       (":/actions/icons/db_step.png", tr ("Step"),
                        SLOT (debug_step_over ()));
 
   _debug_step_into = construct_debug_menu_item
                       (":/actions/icons/db_step_in.png", tr ("Step In"),
                        SLOT (debug_step_into ()));
@@ -1686,17 +1719,17 @@ main_window::construct_window_menu_item 
     }
 
   return action;
 }
 
 void
 main_window::construct_window_menu (QMenuBar *p)
 {
-  QMenu *window_menu = p->addMenu (tr ("&Window"));
+  QMenu *window_menu = m_add_menu (p, tr ("&Window"));
 
   _show_command_window_action = construct_window_menu_item
             (window_menu, tr ("Show Command Window"), true, command_window);
 
   _show_history_action = construct_window_menu_item
             (window_menu, tr ("Show Command History"), true, history_window);
 
   _show_file_browser_action = construct_window_menu_item
@@ -1735,17 +1768,17 @@ main_window::construct_window_menu (QMen
 
   _reset_windows_action = add_action (window_menu, QIcon (),
               tr ("Reset Default Window Layout"), SLOT (reset_windows ()));
 }
 
 void
 main_window::construct_help_menu (QMenuBar *p)
 {
-  QMenu *help_menu = p->addMenu (tr ("&Help"));
+  QMenu *help_menu = m_add_menu (p, tr ("&Help"));
 
   construct_documentation_menu (help_menu);
 
   help_menu->addSeparator ();
 
   _report_bug_action = add_action (help_menu, QIcon (),
             tr ("Report Bug"), SLOT (open_bug_tracker_page ()));
 
@@ -1777,17 +1810,17 @@ main_window::construct_documentation_men
 
   _online_doc_action = add_action (doc_menu, QIcon (),
                      tr ("Online"), SLOT (open_online_documentation_page ()));
 }
 
 void
 main_window::construct_news_menu (QMenuBar *p)
 {
-  QMenu *news_menu = p->addMenu (tr ("&News"));
+  QMenu *news_menu = m_add_menu (p, tr ("&News"));
 
   _release_notes_action = add_action (news_menu, QIcon (),
             tr ("Release Notes"), SLOT (display_release_notes ()));
 
   _current_news_action = add_action (news_menu, QIcon (),
             tr ("Community News"), SLOT (load_and_display_community_news ()));
 }
 
@@ -2211,29 +2244,35 @@ main_window::find_files_finished (int)
 }
 
 void
 main_window::set_global_edit_shortcuts (bool enable)
 {
   // this slot is called when editor gets/loses focus
   if (enable)
     { // editor loses focus, set the global shortcuts
+      // and disable the editor's menu
       shortcut_manager::set_shortcut (_copy_action, "main_edit:copy");
       shortcut_manager::set_shortcut (_paste_action, "main_edit:paste");
       shortcut_manager::set_shortcut (_undo_action, "main_edit:undo");
       shortcut_manager::set_shortcut (_select_all_action, "main_edit:select_all");
     }
   else
     { // disable shortcuts that are also provided by the editor itself
+      // and enable editor's menu
       QKeySequence no_key = QKeySequence ();
       _copy_action->setShortcut (no_key);
       _paste_action->setShortcut (no_key);
       _undo_action->setShortcut (no_key);
       _select_all_action->setShortcut (no_key);
     }
+
+  // enable/disable the main and the editor's menu shortcuts (alt-key)
+  editor_window->enable_menu_shortcuts (! enable);
+  enable_menu_shortcuts (enable);
 }
 
 void
 main_window::configure_shortcuts ()
 {
   // file menu
   shortcut_manager::set_shortcut (_open_action, "main_file:open_file");
   shortcut_manager::set_shortcut (_new_script_action, "main_file:new_file");
diff --git a/libgui/src/main-window.h b/libgui/src/main-window.h
--- a/libgui/src/main-window.h
+++ b/libgui/src/main-window.h
@@ -211,16 +211,18 @@ private:
 
   void construct (void);
 
   void construct_octave_qt_link (void);
 
   QAction *add_action (QMenu *menu, const QIcon &icon, const QString &text,
                        const char *member, const QWidget *receiver = 0);
 
+  void enable_menu_shortcuts (bool enable);
+  QMenu* m_add_menu (QMenuBar *p, QString text);
   void construct_menu_bar (void);
   void construct_file_menu (QMenuBar *p);
   void construct_new_menu (QMenu *p);
   void construct_edit_menu (QMenuBar *p);
   QAction *construct_debug_menu_item (const char *icon, const QString& item,
                                       const char* member);
   void construct_debug_menu (QMenuBar *p);
   QAction *construct_window_menu_item (QMenu *p, const QString& item,
@@ -271,16 +273,19 @@ private:
   void execute_debug_callback ();
 
   void configure_shortcuts ();
 
   bool confirm_exit_octave ();
 
   workspace_model *_workspace_model;
 
+  QHash<QMenu*, QStringList> _hash_menu_text;
+
+
   // Toolbars.
   QStatusBar *status_bar;
 
   // Subwindows.
   terminal_dock_widget *command_window;
   history_dock_widget *history_window;
   files_dock_widget *file_browser_window;
   documentation_dock_widget *doc_browser_window;
