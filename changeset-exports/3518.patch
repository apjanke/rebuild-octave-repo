# HG changeset patch
# User jwe
# Date 949446719 0
#      Tue Feb 01 23:11:59 2000 +0000
# Node ID 2dcc5f58ca0c6bc6f017f403b4fcd831808e5fe5
# Parent  ef5c83d6bffc01af1487cf677869cd959edd8504
[project @ 2000-02-01 23:11:59 by jwe]

diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,12 +1,14 @@
 2000-02-01  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* data-conv.cc (LS_DO_WRITE): Cast arg to ostream::write to char*.
 	(LS_DO_READ): Likewise, for istream::read.
+	(write_doubles): Likewise.
+	(read_doubles): Likewise.
 
 	* oct-env.cc (octave_env::do_polite_directory_format):
 	Use operator== and substr method to do limited-length string
 	comparison.
 
 	* Array2-idx.h, Array-idx.h: Avoid shadowing warnings for idx.
 
 	* Quad.h: Use do_integrate as name of pure virtual function.
diff --git a/liboctave/data-conv.cc b/liboctave/data-conv.cc
--- a/liboctave/data-conv.cc
+++ b/liboctave/data-conv.cc
@@ -712,27 +712,27 @@ read_doubles (std::istream& is, double *
 
     case LS_INT:
       LS_DO_READ (FOUR_BYTE_INT, swap, data, 4, len, is);
       break;
 
     case LS_FLOAT:
       {
 	volatile float *ptr = X_CAST (float *, data);
-	is.read (data, 4 * len);
+	is.read (X_CAST (char *, data), 4 * len);
 	do_float_format_conversion (X_CAST (float *, data), len, fmt);
 	float tmp = ptr[0];
 	for (int i = len - 1; i > 0; i--)
 	  data[i] = ptr[i];
 	data[0] = tmp;
       }
       break;
 
     case LS_DOUBLE: // No conversion necessary.
-      is.read (data, 8 * len);
+      is.read (X_CAST (char *, data), 8 * len);
       do_double_format_conversion (data, len, fmt);
       break;
 
     default:
       is.clear (std::ios::failbit|is.rdstate ());
       break;
     }
 }
@@ -769,17 +769,17 @@ write_doubles (std::ostream& os, const d
     case LS_FLOAT:
       LS_DO_WRITE (float, data, 4, len, os);
       break;
 
     case LS_DOUBLE: // No conversion necessary.
       {
 	char tmp_type = X_CAST (char, type);
 	os.write (&tmp_type, 1);
-	os.write (data, 8 * len);
+	os.write (X_CAST (char *, data), 8 * len);
       }
       break;
 
     default:
       (*current_liboctave_error_handler)
 	("unrecognized data format requested");
       break;
     }
