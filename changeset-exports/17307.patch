# HG changeset patch
# User Rik <rik@octave.org>
# Date 1377129884 25200
#      Wed Aug 21 17:04:44 2013 -0700
# Node ID 4448cc742880e3f5df64bd53b7dbb900db3b0fd4
# Parent  09543e9c8f40e65cf828fec1ae3a4d9826e8d897
Use '!' not operator rather than '~' in core m-files.

* scripts/general/interp1.m, scripts/image/rgb2ind.m, scripts/plot/findobj.m,
scripts/polynomial/polyfit.m, test/build-sparse-tests.sh,
test/classes/@Snork/end.m, test/classes/@Snork/mpower.m,
test/classes/@Snork/ne.m, test/classes/@Snork/power.m,
test/classes/@Snork/subsasgn.m, test/classes/@Snork/subsref.m,
test/classes/@Spork/loadobj.m, test/classes/classes.tst:
Use '!' not operator rather than '~' in core m-files.

diff --git a/scripts/general/interp1.m b/scripts/general/interp1.m
--- a/scripts/general/interp1.m
+++ b/scripts/general/interp1.m
@@ -186,17 +186,17 @@ function yi = interp1 (x, y, varargin)
     if (x(end) < x(1))
       rightcontinuous = false;
     else
       rightcontinuous = true;
     endif
   endif
 
   if ((rightcontinuous && (x(end) < x(1)))
-      || (~ rightcontinuous && (x(end) > x(1))))
+      || (! rightcontinuous && (x(end) > x(1))))
     ## Switch between left-continuous and right-continuous
     x = flipud (x);
     y = flipud (y);
   endif
 
   starmethod = method(1) == "*";
 
   if (starmethod)
diff --git a/scripts/image/rgb2ind.m b/scripts/image/rgb2ind.m
--- a/scripts/image/rgb2ind.m
+++ b/scripts/image/rgb2ind.m
@@ -162,17 +162,17 @@ function [x, map] = rgb2ind (varargin)
     system (gmstr);
     rgb = imread (fnb);
     
   endif
 
   ## Conversion of rgb image to x,map
   pr = prod (sz(1:end-1));
   x = zeros (sz(1:end-1));
-  [map,~,x(:)] = unique (reshape(rgb, [pr, 3]), "rows");
+  [map,~,x(:)] = unique (reshape (rgb, [pr, 3]), "rows");
 
   ## a colormap is of class double and values between 0 and 1
   switch (class (rgb))
     case {"single", "double", "logical"}
       ## do nothing, return the same
     case {"uint8", "uint16"}
       map = double (map) / double (intmax (class (rgb)));
     case "int16"
diff --git a/scripts/plot/findobj.m b/scripts/plot/findobj.m
--- a/scripts/plot/findobj.m
+++ b/scripts/plot/findobj.m
@@ -185,17 +185,17 @@ function h = findobj (varargin)
         na = na + 1;
       endif
     else
       error ("findobj: properties and options must be strings");
     endif
   endwhile
 
   numpairs = np - 1;
-  if (~ isempty (logicaloperator))
+  if (! isempty (logicaloperator))
     logicaloperator = shift (logicaloperator, 1);
   endif
 
   ## Load all objects which qualify for being searched.
   idepth = 0;
   h = handles;
   while (numel (handles) && ! (idepth >= depth))
     children = [];
diff --git a/scripts/polynomial/polyfit.m b/scripts/polynomial/polyfit.m
--- a/scripts/polynomial/polyfit.m
+++ b/scripts/polynomial/polyfit.m
@@ -110,17 +110,17 @@ function [p, s, mu] = polyfit (x, y, n)
   ## Construct the Vandermonde matrix.
   v = vander (x, n+1);
 
   ## Solve by QR decomposition.
   [q, r, k] = qr (v(:, polymask), 0);
   p = r \ (q' * y);
   p(k) = p;
   
-  if (n ~= m)
+  if (n != m)
     q = p; p = zeros (n+1, 1); 
     p(polymask) = q;
   endif
   
   if (nargout > 1)
     yf = v*p;
 
     if (y_is_row_vector)
@@ -135,19 +135,19 @@ function [p, s, mu] = polyfit (x, y, n)
     ## quantities. If cholinv fails, then X(:, polymask) is rank
     ## deficient and not invertible.
     try
       C = cholinv (r.'*r)(k, k);
     catch
       C = NaN * ones (m+1, m+1);
     end_try_catch
 
-    if (n ~= m)
+    if (n != m)
       ## fill matrices if required
-      s.X(:, ~polymask) = 0;
+      s.X(:, !polymask) = 0;
       s.R = zeros (n+1, n+1); s.R(polymask, polymask) = r;
       s.C = zeros (n+1, n+1); s.C(polymask, polymask) = C;
     else
       s.R = r; 
       s.C = C;
     endif
     s.df = l - m - 1;
     s.normr = norm (yf - y);
diff --git a/test/build-sparse-tests.sh b/test/build-sparse-tests.sh
--- a/test/build-sparse-tests.sh
+++ b/test/build-sparse-tests.sh
@@ -320,34 +320,34 @@ gen_elementop_tests() {
 %!assert (bf.*as, sparse (bf.*af))
 
 %!assert (as./bf, sparse (af./bf), 100*eps)
 %!assert (bf.\as, sparse (bf.\af), 100*eps)
 
 %!test
 %! sv = as.^bf;
 %! fv = af.^bf;
-%! idx = find (af~=0);
+%! idx = find (af!=0);
 %! assert (sv(:)(idx), sparse (fv(:)(idx)), 100*eps)
 
 EOF
 }
 
 gen_sparsesparse_elementop_tests() {
     cat >>$TESTS <<EOF
 %!assert (as==bs, sparse (af==bf))
 %!assert (as!=bs, sparse (af!=bf))
 %!assert (as+bs, sparse (af+bf))
 %!assert (as-bs, sparse (af-bf))
 %!assert (as.*bs, sparse (af.*bf))
 %!xtest assert (as./bs, sparse (af./bf), 100*eps)
 %!test
 %! sv = as.^bs;
 %! fv = af.^bf;
-%! idx = find (af~=0);
+%! idx = find (af!=0);
 %! assert(sv(:)(idx), sparse (fv(:)(idx)), 100*eps)
 
 EOF
 }
 
 # test matrix-matrix left and right division: uses as,af,bs,bf
 gen_divop_tests() {
     cat >>$TESTS <<EOF
@@ -572,21 +572,21 @@ gen_unaryop_tests() {
 %!test
 %! [ii,jj,vv,nr,nc] = find (as);
 %! assert (af, full (sparse (ii,jj,vv,nr,nc)));
 %!assert (nnz (as), sum (af(:)!=0))
 %!assert (nnz (as), nnz (af))
 %!assert (issparse (as.'))
 %!assert (issparse (as'))
 %!assert (issparse (-as))
-%!assert (~as, sparse (~af))
+%!assert (!as, sparse (!af))
 %!assert (as.', sparse (af.'));
 %!assert (as',  sparse (af'));
 %!assert (-as, sparse (-af));
-%!assert (~as, sparse (~af));
+%!assert (!as, sparse (!af));
 %!error [i,j] = size (af);as(i-1,j+1);
 %!error [i,j] = size (af);as(i+1,j-1);
 %!test
 %! [Is,Js,Vs] = find (as);
 %! [If,Jf,Vf] = find (af);
 %! assert (Is, If);
 %! assert (Js, Jf);
 %! assert (Vs, Vf);
@@ -1199,17 +1199,17 @@ gen_rectangular_tests
 gen_section
 gen_sparsesparse_ordering_tests
 gen_section
 echo '%!test af = real (af);' >> $TESTS
 gen_rectangular_tests
 gen_section
 gen_save_tests
 gen_section
-echo '%!test bf = bf+1i*(bf~=0);' >> $TESTS
+echo '%!test bf = bf+1i*(bf!=0);' >> $TESTS
 gen_rectangular_tests
 gen_section
 
 # square operations
 if $preset; then
     echo '%!test af = [1+1i,2-1i,0,0;0,0,0,3+2i;0,0,0,4];' >> $TESTS
     echo '%! as = sparse (af);' >> $TESTS
     echo '%!test bf = [0,1-1i,0,0;2+1i,0,0,0;3-1i,2+3i,0,0];' >> $TESTS
@@ -1237,17 +1237,17 @@ gen_section
 echo '%!test bf = real (bf);' >> $TESTS
 echo '%! bs = sparse (bf);' >> $TESTS
 gen_square_tests
 gen_section
 echo '%!test af = real (af);' >> $TESTS
 echo '%! as = sparse (af);' >> $TESTS
 gen_square_tests
 gen_section
-echo '%!test bf = bf+1i*(bf~=0);' >> $TESTS
+echo '%!test bf = bf+1i*(bf!=0);' >> $TESTS
 echo '%! bs = sparse (bf);' >> $TESTS
 gen_square_tests
 gen_section
 
 # cholesky tests
 if $preset; then
   echo '%!test bf = [5,0,1+1i,0;0,5,0,1-2i;1-1i,0,5,0;0,1+2i,0,5];' >> $TESTS
   echo '%! bs = sparse (bf);' >> $TESTS
diff --git a/test/classes/@Snork/end.m b/test/classes/@Snork/end.m
--- a/test/classes/@Snork/end.m
+++ b/test/classes/@Snork/end.m
@@ -1,9 +1,9 @@
 function r = end (snk, index_pos, num_indices)
 
-  if (num_indices ~= 1)
+  if (num_indices != 1)
     error ('Snork object may only have one index')
   end
 
   r = length (snk.cack);
 
 end
diff --git a/test/classes/@Snork/mpower.m b/test/classes/@Snork/mpower.m
--- a/test/classes/@Snork/mpower.m
+++ b/test/classes/@Snork/mpower.m
@@ -1,10 +1,10 @@
 function s = mpower (s1, x)
 
-  if (~isa (s1, 'Snork') || isa (x, 'Snork'))
+  if (!isa (s1, 'Snork') || isa (x, 'Snork'))
     error ('mpower Snork!!!');
   end
 
   s = s1;
   s.gick = s.gick ^ x;
 
 end
diff --git a/test/classes/@Snork/ne.m b/test/classes/@Snork/ne.m
--- a/test/classes/@Snork/ne.m
+++ b/test/classes/@Snork/ne.m
@@ -1,5 +1,5 @@
 function b = ne (s1, s2)
 
-  b = ~(s1 == s2);
+  b = !(s1 == s2);
 
 end
diff --git a/test/classes/@Snork/power.m b/test/classes/@Snork/power.m
--- a/test/classes/@Snork/power.m
+++ b/test/classes/@Snork/power.m
@@ -1,10 +1,10 @@
 function s = power (s1, x)
 
-  if (~isa (s1, 'Snork') || isa (x, 'Snork'))
+  if (!isa (s1, 'Snork') || isa (x, 'Snork'))
     error ('power Snork!!!');
   end
 
   s = s1;
   s.gick = s.gick .^ x;
 
 end
diff --git a/test/classes/@Snork/subsasgn.m b/test/classes/@Snork/subsasgn.m
--- a/test/classes/@Snork/subsasgn.m
+++ b/test/classes/@Snork/subsasgn.m
@@ -1,28 +1,28 @@
 function snk = subsasgn (snk, s, val)
 
   if (length (s) < 1)
     error ('Snork: needs index');
   end
   switch (s(1).type)
     case '()'
       ind = s(1).subs;
-      if (numel (ind) ~= 1)
+      if (numel (ind) != 1)
         error ('Snork: need exactly one index');
       else
         if (length (s) == 1)
           snk.cack(ind{1}) = val;
         else
           error ('Snork: chained subscripts not allowed for {}');
         end
       end
     case '{}'
       ind = s(1).subs;
-      if (numel (ind) ~= 1)
+      if (numel (ind) != 1)
         error ('Snork: need exactly one index');
       else
         if (length (s) == 1)
           snk.cack(ind{1}) = val;
         else
           error ('Snork: chained subscripts not allowed for {}');
         end
       end
diff --git a/test/classes/@Snork/subsref.m b/test/classes/@Snork/subsref.m
--- a/test/classes/@Snork/subsref.m
+++ b/test/classes/@Snork/subsref.m
@@ -1,24 +1,24 @@
 function b = subsref (snk, s)
 
   if (isempty (s))
     error ('Snork: missing index');
   end
   switch (s(1).type)
     case '()'
       ind = s(1).subs;
-      if (numel (ind) ~= 1)
+      if (numel (ind) != 1)
         error ('Snork: need exactly one index');
       else
         b = snk.cack(ind{1});
       end
     case '{}'
       ind = s(1).subs;
-      if (numel (ind) ~= 1)
+      if (numel (ind) != 1)
         error ('Snork: need exactly one index');
       else
         b = snk.cack(ind{1});
       end
     case '.'
       fld = s.subs;
       if (strcmp (fld, 'gick'))
         b = snk.gick;
diff --git a/test/classes/@Spork/loadobj.m b/test/classes/@Spork/loadobj.m
--- a/test/classes/@Spork/loadobj.m
+++ b/test/classes/@Spork/loadobj.m
@@ -1,8 +1,8 @@
 function out = loadobj (in)
 
   out = in;
-  if (~isa (in, 'Spork'))
+  if (!isa (in, 'Spork'))
     out.cack = [];
   end
 
 end
diff --git a/test/classes/classes.tst b/test/classes/classes.tst
--- a/test/classes/classes.tst
+++ b/test/classes/classes.tst
@@ -54,19 +54,19 @@
 %! assert (isequal (gick (snk),4));
 %!  snk(1) = 3;
 %!test snk{end} = 9;
 %! assert (isequal (cack (snk), [3 1 2 9]));
 %! assert (isequal (getStash (snk), 1));             % Check private functions.
 %! assert (isobject (snk));
 %! assert (isequal (class (snk), 'Snork'));
 %! assert (isa (snk, 'Snork'));
-%! assert (~isa (snk, 'Sneetch'));
+%! assert (!isa (snk, 'Sneetch'));
 %! assert (ismethod (snk, 'gick'));
-%! assert (~ismethod (snk, 'bletch'));
+%! assert (!ismethod (snk, 'bletch'));
 %! assert (exist ('snk') == 1);
 %! assert (exist ('blink') == 0);
 %!test snk1 = Snork (snk);
 %! assert (isequal (class (snk1), 'Snork'));
 %! assert (isequal (gick (snk1), 4));
 %!test snk2 = Snork (-3);
 %! assert (isequal (class (snk2), 'Snork'));
 %! assert (isequal (gick (snk2), -3));
@@ -267,27 +267,27 @@
 %!test  s = s3 \ s2;  assert (isa (s, 'Snork') && isequal (s.gick, x3 \ x2));
 %!test  s = s3 \ x2;  assert (isa (s, 'Snork') && isequal (s.gick, x3 \ x2));
 %!test  s = x3 \ s2;  assert (isa (s, 'Snork') && isequal (s.gick, x3 \ x2));
 
 %% Test overloaded eq (==) for the Snork class
 %!assert (s1 == s1)
 %!assert (s1 == x1)
 %!assert (x1 == s1)
-%!assert (~(s1 == (s1 + 1)))
-%!assert (~(s1 == (x1 + 1)))
-%!assert (~(x1 == (s1 + 1)))
+%!assert (!(s1 == (s1 + 1)))
+%!assert (!(s1 == (x1 + 1)))
+%!assert (!(x1 == (s1 + 1)))
 
-%% Test overloaded ne (~=) for the Snork class
-%!assert (~(s1 ~= s1))
-%!assert (~(s1 ~= x1))
-%!assert (~(x1 ~= s1))
-%!assert (s1 ~= (s1 + 1))
-%!assert (x1 ~= (s1 + 1))
-%!assert (s1 ~= (x1 + 1))
+%% Test overloaded ne (!=) for the Snork class
+%!assert (!(s1 != s1))
+%!assert (!(s1 != x1))
+%!assert (!(x1 != s1))
+%!assert (s1 != (s1 + 1))
+%!assert (x1 != (s1 + 1))
+%!assert (s1 != (x1 + 1))
 
 %% Test overloaded lt (<) for the Snork class
 %!assert (s1 < (s1 + 1))
 %!assert (s1 < (x1 + 1))
 %!assert (x1 < (s1 + 1))
 
 %% Test overloaded gt (>) for the Snork class
 %!assert (s1 > (s1 - 1))
