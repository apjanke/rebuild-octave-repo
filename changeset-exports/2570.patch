# HG changeset patch
# User jwe
# Date 849906779 0
#      Fri Dec 06 21:12:59 1996 +0000
# Node ID 58113987ee03ebad350758631d3ef96bebea37f2
# Parent  5e0c65023ba530dbcd7876db7b755c60e7d4464c
[project @ 1996-12-06 21:12:29 by jwe]

diff --git a/doc/interpreter/arith.texi b/doc/interpreter/arith.texi
--- a/doc/interpreter/arith.texi
+++ b/doc/interpreter/arith.texi
@@ -474,16 +474,17 @@ gammai (a, x) = ---------    | exp (-t) 
 If @var{a} is scalar, then @code{gammai (@var{a}, @var{x})} is returned
 for each element of @var{x} and vice versa.
 
 If neither @var{a} nor @var{x} is scalar, the sizes of @var{a} and
 @var{x} must agree, and @var{gammai} is applied element-by-element.
 @end deftypefn
 
 @deftypefn {Mapping Function} {} lgamma (@var{a}, @var{x})
+@deftypefnx {Mapping Function} {} gammaln (@var{a}, @var{x})
 Returns the natural logarithm of the gamma function.
 @end deftypefn
 
 @deftypefn {Function File} {} cross (@var{x}, @var{y})
 Computes the vector cross product of the two 3-dimensional vectors
 @var{x} and @var{y}.
 @end deftypefn
 
diff --git a/doc/interpreter/help.texi b/doc/interpreter/help.texi
--- a/doc/interpreter/help.texi
+++ b/doc/interpreter/help.texi
@@ -30,16 +30,20 @@ help -i help
 @noindent
 starts the GNU Info browser at this node in the on-line version of the
 manual.
 
 @xref{Using Info}, for complete details about how to use the GNU Info
 browser to read the on-line version of the manual.
 @end deffn
 
+The help command can give you information about operators, but not the
+comma and semicolons that are used as command separators.  To get help
+for those, you must type @code{help comma} or @code{help semicolon}.
+
 @defvr {Built-in Variable} INFO_FILE
 The variable @code{INFO_FILE} names the location of the Octave info file.
 The default value is @code{"@value{OCTAVEHOME}/info/octave.info"}.
 @end defvr
 
 @defvr {Built-in Variable} INFO_PROGRAM
 The variable @code{INFO_PROGRAM} names the info program to run.  Its
 initial value is
diff --git a/doc/interpreter/install.texi b/doc/interpreter/install.texi
--- a/doc/interpreter/install.texi
+++ b/doc/interpreter/install.texi
@@ -206,21 +206,22 @@ when it should really be something like:
 to match the prototype declaration for @code{signal()}.
 
 The gcc fixincludes/fixproto script should probably fix this when gcc
 installs its modified set of header files, but I don't think that's
 been done yet.
 
 @item
 There is a bug with the makeinfo program that is distributed with
-texinfo-3.1 that causes the indices in Octave's on-line manual to be
-generated incorrectly.  If you need to recreate the on-line
-documentation, you should get the makeinfo program that is distributed
-with texinfo-3.1 and apply the patch for makeinfo that is distributed
-with Octave.  See the file MAKEINFO.PATCH for more details.
+Texinfo (through version 3.9) that causes the indices in Octave's
+on-line manual to be generated incorrectly.  If you need to recreate the
+on-line documentation, you should get the makeinfo program that is
+distributed with texinfo-3.9 and apply the patch for makeinfo that is
+distributed with Octave.  See the file @file{MAKEINFO.PATCH} for more
+details.
 
 @item
 Some of the Fortran subroutines may fail to compile with older versions
 of the Sun Fortran compiler.  If you get errors like
 
 @smallexample
 zgemm.f:
 	zgemm:
diff --git a/doc/interpreter/octave.texi b/doc/interpreter/octave.texi
--- a/doc/interpreter/octave.texi
+++ b/doc/interpreter/octave.texi
@@ -141,17 +141,16 @@ It corresponds to Octave version @value{
 * Copying::                     The GNU General Public License.
 * Concept Index::               An item for each concept.
 * Variable Index::              An item for each documented variable.
 * Function Index::              An item for each documented function.
 * Operator Index::              An item for each documented operator.
 * Readline Index::              An index for readline commands.
 * Info Index::                  An index for info commands.
 
-
  --- The Detailed Node Listing ---
 
 A Brief Introduction to Octave
 
 * Running Octave::              
 * Simple Examples::             
 * Comments::                    
 * Executable Octave Programs::  
@@ -261,16 +260,17 @@ Quadrature
 
 * Functions of one Variable::   
 * Orthogonal Collocation::      
 
 Plotting
 
 * Two-Dimensional Plotting::    
 * Three-Dimensional Plotting::  
+* Multiple Plots on One Page::  
 * Miscellaneous Plotting Functions::  
 
 Input and Output
 
 * Basic Input and Output::      
 * C-Style I/O Functions::       
 
 Basic Input and Output
diff --git a/doc/interpreter/plot.texi b/doc/interpreter/plot.texi
--- a/doc/interpreter/plot.texi
+++ b/doc/interpreter/plot.texi
@@ -12,16 +12,17 @@ actual graphics.  There are two low-leve
 other higher level plotting functions, patterned after the graphics
 functions found in @sc{Matlab} version 3.5, are also available.
 These higher level functions are all implemented in terms of the two
 low-level plotting functions.
 
 @menu
 * Two-Dimensional Plotting::    
 * Three-Dimensional Plotting::  
+* Multiple Plots on One Page::  
 * Miscellaneous Plotting Functions::  
 @end menu
 
 @node Two-Dimensional Plotting, Three-Dimensional Plotting, Plotting, Plotting
 @section Two-Dimensional Plotting
 
 @deffn {Command} gplot @var{ranges} @var{expression} @var{using} @var{title} @var{style}
 Generate a 2-dimensional plot.
@@ -340,17 +341,17 @@ Make a contour plot of the three-dimensi
 before this will be very useful.
 @end deftypefn
 
 @deftypefn {Function File} {} polar (@var{theta}, @var{rho})
 Make a two-dimensional plot given polar the coordinates @var{theta} and
 @var{rho}.
 @end deftypefn
 
-@node Three-Dimensional Plotting, Miscellaneous Plotting Functions, Two-Dimensional Plotting, Plotting
+@node Three-Dimensional Plotting, Multiple Plots on One Page, Two-Dimensional Plotting, Plotting
 @section Three-Dimensional Plotting
 
 @deffn {Command} gsplot @var{ranges} @var{expression} @var{using} @var{title} @var{style}
 Generate a 3-dimensional plot.
 
 The @var{ranges}, @var{using}, @var{title}, and @var{style} arguments
 are optional, and the @var{using}, @var{title} and @var{style}
 qualifiers may appear in any order after the expression.  You may plot
@@ -431,16 +432,26 @@ the mesh.
 @deftypefn {Function File} {} meshdom (@var{x}, @var{y})
 Given vectors of @var{x} and @var{y} coordinates, return two matrices
 corresponding to the @var{x} and @var{y} coordinates of the mesh.
 
 See the file @file{sombrero.m} for an example of using @code{mesh} and
 @code{meshdom}.
 @end deftypefn
 
+@deftypefn {Function File} {[@var{xx}, @var{yy}] =} meshgrid (@var{x}, @var{y})
+Given vectors of @var{x} and @var{y} coordinates, return two matrices
+corresponding to the @var{x} and @var{y} coordinates of a mesh.  The
+rows of @var{xx} are copies of @var{x}, and the columns of @var{yy} are
+copies of @var{y}. 
+
+@code{[@var{xx}, @var{yy}] = meshgrid (@var{x})} is an abbreviation for
+@code{[@var{xx}, @var{yy}] = meshgrid (@var{x}, @var{x})}.
+@end deftypefn
+
 @defvr {Built-in Variable} gnuplot_binary
 The name of the program invoked by the plot command.  The default value
 is @code{"gnuplot"}.  @xref{Installation}.
 @end defvr
 
 @defvr {Built-in Variable} gnuplot_has_frames
 If the value of this variable is nonzero, Octave assumes that your copy
 of gnuplot has support for multiple frames that is included in recent
@@ -452,17 +463,122 @@ configure got it wrong, or if you upgrad
 @defvr {Built-in Variable} gnuplot_has_multiplot
 If the value of this variable is nonzero, Octave assumes that your copy
 of gnuplot has the multiplot support that is included in recent
 3.6beta releases.  It's initial value is determined by configure, but it
 can be changed in your startup script or at the command line in case
 configure got it wrong, or if you upgrade your gnuplot installation.
 @end defvr
 
-@node Miscellaneous Plotting Functions,  , Three-Dimensional Plotting, Plotting
+@node Multiple Plots on One Page, Miscellaneous Plotting Functions, Three-Dimensional Plotting, Plotting
+@section Multiple Plots on One Page
+
+The following functions all require a version of @code{gnuplot} that
+supports the multiplot feature.
+
+@deftypefn {Function File} {} mplot (@var{x}, @var{y})
+@deftypefnx {Function File} {} mplot (@var{x}, @var{y}, @var{fmt})
+@deftypefnx {Function File} {} mplot (@var{x1}, @var{y1}, @var{x2}, @var{y2})
+This is a modified version of @code{plot()} to work with the multiplot
+version of @code{gnuplot} to plot multiple plots per page. 
+This plot version automatically advances to the next subplot position
+after each set of arguments are processed.
+
+See command @var{plot()} for the various options to this command
+as this is just mulitplot version of the same command.
+@end deftypefn
+
+@deftypefn {Function File} {} multiplot (@var{xn}, @var{yn})
+Sets and resets multiplot mode.
+
+If the arguments are non-zero, @code{multiplot} will set up multiplot
+mode with @var{xn}, @var{yn} subplots along the @var{x} and @var{y}
+axes.  If both arguments are zero, @code{multiplot} closes multiplot
+mode.
+@end deftypefn
+
+@deftypefn {Function File} {} oneplot ()
+If in multiplot mode, switches to single plot mode.
+@end deftypefn
+
+@deftypefn {Function File} {} subplot (@var{rows}, @var{cols}, @var{index})
+@deftypefnx {Function File} {} subplot (@var{rcn})
+Sets @code{gnuplot} in multiplot mode and plots in location
+given by index (there are @var{cols} by @var{rows} subwindows).
+
+Input:
+
+@table @var
+@item rows
+Number of rows in subplot grid.
+
+@item columns
+Number of columns in subplot grid.
+
+@item index
+Index of subplot where to make the next plot.
+@end table
+
+If only one argument is supplied, then it must be a three digit value
+specifying the location in digits 1 (rows) and 2 (columns) and the plot
+index in digit 3.
+
+The plot index runs row-wise.  First all the columns in a row are filled
+and then the next row is filled.
+
+For example, a plot with 4 by 2 grid will have plot indices running as
+follows:
+
+@example
+@group
+  +-------+-------+-------+-------+
+  |       |       |       |       |
+  |   1   |   2   |   3   |   4   |
+  |       |       |       |       |
+  +-------+-------+-------+-------+
+  |       |       |       |       |
+  |   5   |   6   |   7   |   8   |
+  |       |       |       |       |
+  +-------+-------+-------+-------+
+@end group
+@end example
+@end deftypefn
+
+@deftypefn {Function File} {} subwindow (@var{xn}, @var{yn})
+Sets the subwindow position in multiplot mode for the next plot.  The
+multiplot mode has to be previously initialized using the
+@code{multiplot()} command, otherwise this command just becomes an alias
+to @var{multiplot()}
+@end deftypefn
+
+@deftypefn {Function File} {} top_title (@var{string})
+@deftypefnx {Function File} {} bottom_title (@var{string})
+Makes a title with text @var{string} at the top (bottom) of the plot.
+@end deftypefn
+
+@deftypefn {Function File} {} plot_border (...)
+Multiple arguments allowed to specify the sides on which the border
+is shown.  Allowed arguments include:
+
+@example
+@group
+ "blank", "BLANK", "b", "B",  @result{}  No borders displayed
+   "all",   "ALL", "a", "A",  @result{}  All borders displayed
+ "north", "NORTH", "n", "N",  @result{}  North Border
+ "south", "SOUTH", "s", "S",  @result{}  South Border
+  "east",  "EAST", "e", "E",  @result{}  East Border
+  "west",  "WEST", "w", "W",  @result{}  West Border
+@end group
+@end example
+
+@noindent
+Without any arguments, turns borders off.
+@end deftypefn
+
+@node Miscellaneous Plotting Functions,  , Multiple Plots on One Page, Plotting
 @section Miscellaneous Plotting Functions
 
 @deftypefn {Function File} {} bar (@var{x}, @var{y})
 Given two vectors of x-y data, @code{bar} produces a bar graph.
 
 If only one argument is given, it is taken as a vector of y-values
 and the x coordinates are taken to be the indices of the elements.
 
@@ -516,17 +632,18 @@ are equivalent.
 
 @deftypefn {Function File} {} title (@var{string})
 Specify a title for the plot.  If you already have a plot displayed, use
 the command @code{replot} to redisplay it with the new title.
 @end deftypefn
 
 @deftypefn {Function File} {} xlabel (@var{string})
 @deftypefnx {Function File} {} ylabel (@var{string})
-Specify x and y axis labels for the plot.  If you already have a plot
+@deftypefnx {Function File} {} zlabel (@var{string})
+Specify x, y, and z axis labels for the plot.  If you already have a plot
 displayed, use the command @code{replot} to redisplay it with the new
 labels.
 @end deftypefn
 
 @deftypefn {Function File} {} sombrero (@var{n})
 Display a classic three-dimensional mesh plot.  The parameter @var{n}
 allows you to increase the resolution.
 @end deftypefn
diff --git a/doc/interpreter/strings.texi b/doc/interpreter/strings.texi
--- a/doc/interpreter/strings.texi
+++ b/doc/interpreter/strings.texi
@@ -169,16 +169,20 @@ matrix).  For example,
 @example
 split ("Test string", "t")
    @result{} Tes 
        s  
       ring
 @end example
 @end deftypefn
 
+@deftypefn {Function File} {} str2num (@var{s})
+Convert the string @var{s} to a number.
+@end deftypefn
+
 @deftypefn {Function File} {} str2mat (@var{s_1}, @dots{}, @var{s_n})
 Returns a matrix containing the strings @var{s_1}, @dots{}, @var{s_n} as
 its rows.  Each string is padded with blanks in order to form a valid
 matrix.
 
 @quotation
 @strong{Note:}
 This function is modelled after @sc{MATLAB}.  In Octave, you can create
diff --git a/liboctave/Array2-idx.h b/liboctave/Array2-idx.h
--- a/liboctave/Array2-idx.h
+++ b/liboctave/Array2-idx.h
@@ -360,20 +360,20 @@ assign (Array2<LT>& lhs, const Array2<RT
 
       int m = idx_j.freeze (lhs_nc, "column", liboctave_pzo_flag,
 			    liboctave_rre_flag);
 
       int idx_i_is_colon = idx_i.is_colon ();
       int idx_j_is_colon = idx_j.is_colon ();
 
       if (idx_i_is_colon)
-	n = rhs_nr;
+	n = lhs_nr;
 
       if (idx_j_is_colon)
-	m = rhs_nc;
+	m = lhs_nc;
 
       if (idx_i && idx_j)
 	{
 	  if (rhs_nr == 0 && rhs_nc == 0)
 	    {
 	      lhs.maybe_delete_elements (idx_i, idx_j);
 	    }
 	  else
@@ -384,42 +384,42 @@ assign (Array2<LT>& lhs, const Array2<RT
 		  int max_col_idx = idx_j_is_colon ? rhs_nc : idx_j.max () + 1;
 
 		  int new_nr = max_row_idx > lhs_nr ? max_row_idx : lhs_nr;
 		  int new_nc = max_col_idx > lhs_nc ? max_col_idx : lhs_nc;
 
 		  lhs.resize (new_nr, new_nc, 0.0);
 		}
 
-	      if (n == rhs_nr && m == rhs_nc)
-		{
-		  for (int j = 0; j < m; j++)
-		    {
-		      int jj = idx_j.elem (j);
-		      for (int i = 0; i < n; i++)
-			{
-			  int ii = idx_i.elem (i);
-			  lhs.elem (ii, jj) = rhs.elem (i, j);
-			}
-		    }
-		}
-	      else if (rhs_nr == 1 && rhs_nc == 1 && n > 0 && m > 0)
+	      if (rhs_nr == 1 && rhs_nc == 1 && n > 0 && m > 0)
 		{
 		  RT scalar = rhs.elem (0, 0);
 
 		  for (int j = 0; j < m; j++)
 		    {
 		      int jj = idx_j.elem (j);
 		      for (int i = 0; i < n; i++)
 			{
 			  int ii = idx_i.elem (i);
 			  lhs.elem (ii, jj) = scalar;
 			}
 		    }
 		}
+	      else if (n == rhs_nr && m == rhs_nc)
+		{
+		  for (int j = 0; j < m; j++)
+		    {
+		      int jj = idx_j.elem (j);
+		      for (int i = 0; i < n; i++)
+			{
+			  int ii = idx_i.elem (i);
+			  lhs.elem (ii, jj) = rhs.elem (i, j);
+			}
+		    }
+		}
 	      else
 		{
 		  (*current_liboctave_error_handler)
     ("A(I, J) = X: X must be a scalar or the number of elements in I must");
 		  (*current_liboctave_error_handler)
     ("match the number of rows in X and the number of elements in J must");
 		  (*current_liboctave_error_handler)
     ("match the number of columns in X");
diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,14 @@
+Fri Dec  6 14:41:15 1996  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* Array2-idx.h (assign): Test for rhs scalar case first.
+	If index is colon, set number of elements to lhs dimension, not
+	rhs dimension.
+
 Thu Dec  5 13:05:18 1996  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* sun-utils.h: Don't declare MAIN_ or MAIN__ here.
 	* sun-utils.cc: Delete.
 	* f2c-main.c: New file
 
 	* Makefile.in: Fix file name lists.
 
