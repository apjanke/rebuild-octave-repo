# HG changeset patch
# User jwe
# Date 1099600730 0
#      Thu Nov 04 20:38:50 2004 +0000
# Node ID 05e4d8c0a8408f2ce516adac5ab0003135d21481
# Parent  1312d3af9eb06be9c3c5db009f02f187d11fd359
[project @ 2004-11-04 20:38:46 by jwe]

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,10 +1,13 @@
 2004-11-04  John W. Eaton  <jwe@octave.org>
 
+	* pt-colon.cc (tree_colon_expression::line,
+	tree_colon_expression::column): New functions.
+
 	* oct-stream.cc (octave_stream::seek (long, int)): Return error
 	(but leave file position unchanged) for attempt to seek beyond end
 	of file.
 
 	* DLD-FUNCTIONS/inv.cc (Finv): Check rcond value returned from
 	LAPACK routines, and be careful to avoid optimizing away the
 	1+rcond == 1.0 check.
 	* DLD-FUNCTIONS/det.cc (Fdet): Likewise.
diff --git a/src/pt-colon.cc b/src/pt-colon.cc
--- a/src/pt-colon.cc
+++ b/src/pt-colon.cc
@@ -163,16 +163,34 @@ tree_colon_expression::eval_error (const
 {
   if (! s.empty ())
     ::error ("%s", s.c_str ());
 
   ::error ("evaluating colon expression near line %d column %d",
 	   line (), column ());
 }
 
+int
+tree_colon_expression::line (void) const
+{
+  return (op_base ? op_base->line ()
+	  : (op_inc ? op_inc->line ()
+	     : (op_limit ? op_limit->line ()
+		: -1)));
+}
+
+int
+tree_colon_expression::column (void) const
+{
+  return (op_base ? op_base->column ()
+	  : (op_inc ? op_inc->column ()
+	     : (op_limit ? op_limit->column ()
+		: -1)));
+}
+
 void
 tree_colon_expression::accept (tree_walker& tw)
 {
   tw.visit_colon_expression (*this);
 }
 
 /*
 ;;; Local Variables: ***
diff --git a/src/pt-colon.h b/src/pt-colon.h
--- a/src/pt-colon.h
+++ b/src/pt-colon.h
@@ -81,16 +81,19 @@ public:
   void eval_error (const std::string& s = std::string ());
 
   tree_expression *base (void) { return op_base; }
 
   tree_expression *limit (void) { return op_limit; }
 
   tree_expression *increment (void) { return op_increment; }
 
+  int line (void) const;
+  int column (void) const;
+
   void accept (tree_walker& tw);
 
 private:
 
   // The components of the expression.
   tree_expression *op_base;
   tree_expression *op_limit;
   tree_expression *op_increment;
