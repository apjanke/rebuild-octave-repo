# HG changeset patch
# User jwe
# Date 1064008465 0
#      Fri Sep 19 21:54:25 2003 +0000
# Node ID 228d2d5b6d6678a8761073979becdf9d2d094f47
# Parent  8373b9b41eee193c7fed62eb28953c4005ca36d8
[project @ 2003-09-19 21:53:15 by jwe]

diff --git a/liboctave/Array-C.cc b/liboctave/Array-C.cc
--- a/liboctave/Array-C.cc
+++ b/liboctave/Array-C.cc
@@ -41,36 +41,19 @@ template int assign (Array<Complex>&, co
 
 template int assign (Array<Complex>&, const Array<Complex>&, const Complex&);
 template int assign (Array<Complex>&, const Array<double>&, const Complex&);
 template int assign (Array<Complex>&, const Array<int>&, const Complex&);
 template int assign (Array<Complex>&, const Array<short>&, const Complex&);
 template int assign (Array<Complex>&, const Array<char>&, const Complex&);
 
 #include "Array2.h"
-#include "Array2.cc"
 
 template class Array2<Complex>;
 
-#if 0
-
-template int assign (Array2<Complex>&, const Array2<Complex>&);
-template int assign (Array2<Complex>&, const Array2<double>&);
-template int assign (Array2<Complex>&, const Array2<int>&);
-template int assign (Array2<Complex>&, const Array2<short>&);
-template int assign (Array2<Complex>&, const Array2<char>&);
-
-template int assign (Array2<Complex>&, const Array2<Complex>&, const Complex&);
-template int assign (Array2<Complex>&, const Array2<double>&, const Complex&);
-template int assign (Array2<Complex>&, const Array2<int>&, const Complex&);
-template int assign (Array2<Complex>&, const Array2<short>&, const Complex&);
-template int assign (Array2<Complex>&, const Array2<char>&, const Complex&);
-
-#endif
-
 #include "ArrayN.h"
 #include "ArrayN.cc"
 
 template class ArrayN<Complex>;
 
 template std::ostream& operator << (std::ostream&, const ArrayN<Complex>&);
 
 #include "DiagArray2.h"
diff --git a/liboctave/Array-b.cc b/liboctave/Array-b.cc
--- a/liboctave/Array-b.cc
+++ b/liboctave/Array-b.cc
@@ -31,28 +31,19 @@ Software Foundation, 59 Temple Place - S
 
 template class Array<bool>;
 
 template int assign (Array<bool>&, const Array<bool>&);
 
 template int assign (Array<bool>&, const Array<bool>&, const bool&);
 
 #include "Array2.h"
-#include "Array2.cc"
 
 template class Array2<bool>;
 
-#if 0
-
-template int assign (Array2<bool>&, const Array2<bool>&);
-
-template int assign (Array2<bool>&, const Array2<bool>&, const bool&);
-
-#endif
-
 #include "ArrayN.h"
 #include "ArrayN.cc"
 
 template class ArrayN<bool>;
 
 template std::ostream& operator << (std::ostream&, const ArrayN<bool>&);
 
 #include "DiagArray2.h"
diff --git a/liboctave/Array-ch.cc b/liboctave/Array-ch.cc
--- a/liboctave/Array-ch.cc
+++ b/liboctave/Array-ch.cc
@@ -31,28 +31,19 @@ Software Foundation, 59 Temple Place - S
 
 template class Array<char>;
 
 template int assign (Array<char>&, const Array<char>&);
 
 template int assign (Array<char>&, const Array<char>&, const char&);
 
 #include "Array2.h"
-#include "Array2.cc"
 
 template class Array2<char>;
 
-#if 0
-
-template int assign (Array2<char>&, const Array2<char>&);
-
-template int assign (Array2<char>&, const Array2<char>&, const char&);
-
-#endif
-
 #include "ArrayN.h"
 #include "ArrayN.cc"
 
 template class ArrayN<char>;
 
 template std::ostream& operator << (std::ostream&, const ArrayN<char>&);
 
 #include "DiagArray2.h"
diff --git a/liboctave/Array-d.cc b/liboctave/Array-d.cc
--- a/liboctave/Array-d.cc
+++ b/liboctave/Array-d.cc
@@ -37,53 +37,24 @@ template int assign (Array<double>&, con
 template int assign (Array<double>&, const Array<char>&);
 
 template int assign (Array<double>&, const Array<double>&, const double&);
 template int assign (Array<double>&, const Array<int>&, const double&);
 template int assign (Array<double>&, const Array<short>&, const double&);
 template int assign (Array<double>&, const Array<char>&, const double&);
 
 #include "Array2.h"
-#include "Array2.cc"
 
 template class Array2<double>;
 
-#if 0
-
-template int assign (Array2<double>&, const Array2<double>&);
-template int assign (Array2<double>&, const Array2<int>&);
-template int assign (Array2<double>&, const Array2<short>&);
-template int assign (Array2<double>&, const Array2<char>&);
-
-template int assign (Array2<double>&, const Array2<double>&, const double&);
-template int assign (Array2<double>&, const Array2<int>&, const double&);
-template int assign (Array2<double>&, const Array2<short>&, const double&);
-template int assign (Array2<double>&, const Array2<char>&, const double&);
-
-#endif
-
 #include "ArrayN.h"
 #include "ArrayN.cc"
 
 template class ArrayN<double>;
 
-#if 0
-
-template int assign (ArrayN<double>&, const ArrayN<double>&);
-template int assign (ArrayN<double>&, const ArrayN<int>&);
-template int assign (ArrayN<double>&, const ArrayN<short>&);
-template int assign (ArrayN<double>&, const ArrayN<char>&);
-
-template int assign (ArrayN<double>&, const ArrayN<double>&, const double&);
-template int assign (ArrayN<double>&, const ArrayN<int>&, const double&);
-template int assign (ArrayN<double>&, const ArrayN<short>&, const double&);
-template int assign (ArrayN<double>&, const ArrayN<char>&, const double&);
-
-#endif
-
 template std::ostream& operator << (std::ostream&, const ArrayN<double>&);
 
 #include "DiagArray2.h"
 #include "DiagArray2.cc"
 
 template class DiagArray2<double>;
 
 /*
diff --git a/liboctave/Array-i.cc b/liboctave/Array-i.cc
--- a/liboctave/Array-i.cc
+++ b/liboctave/Array-i.cc
@@ -35,32 +35,19 @@ template int assign (Array<int>&, const 
 template int assign (Array<int>&, const Array<short>&);
 template int assign (Array<int>&, const Array<char>&);
 
 template int assign (Array<int>&, const Array<int>&, const int&);
 template int assign (Array<int>&, const Array<short>&, const int&);
 template int assign (Array<int>&, const Array<char>&, const int&);
 
 #include "Array2.h"
-#include "Array2.cc"
 
 template class Array2<int>;
 
-#if 0
-
-template int assign (Array2<int>&, const Array2<int>&);
-template int assign (Array2<int>&, const Array2<short>&);
-template int assign (Array2<int>&, const Array2<char>&);
-
-template int assign (Array2<int>&, const Array2<int>&, const int&);
-template int assign (Array2<int>&, const Array2<short>&, const int&);
-template int assign (Array2<int>&, const Array2<char>&, const int&);
-
-#endif
-
 #include "DiagArray2.h"
 #include "DiagArray2.cc"
 
 template class DiagArray2<int>;
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
diff --git a/liboctave/Array-s.cc b/liboctave/Array-s.cc
--- a/liboctave/Array-s.cc
+++ b/liboctave/Array-s.cc
@@ -33,30 +33,19 @@ template class Array<short>;
 
 template int assign (Array<short>&, const Array<short>&);
 template int assign (Array<short>&, const Array<char>&);
 
 template int assign (Array<short>&, const Array<short>&, const short&);
 template int assign (Array<short>&, const Array<char>&, const short&);
 
 #include "Array2.h"
-#include "Array2.cc"
 
 template class Array2<short>;
 
-#if 0
-
-template int assign (Array2<short>&, const Array2<short>&);
-template int assign (Array2<short>&, const Array2<char>&);
-
-template int assign (Array2<short>&, const Array2<short>&, const short&);
-template int assign (Array2<short>&, const Array2<char>&, const short&);
-
-#endif
-
 #include "DiagArray2.h"
 #include "DiagArray2.cc"
 
 template class DiagArray2<short>;
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
diff --git a/src/TEMPLATE-INST/Array-tc.cc b/src/TEMPLATE-INST/Array-tc.cc
--- a/src/TEMPLATE-INST/Array-tc.cc
+++ b/src/TEMPLATE-INST/Array-tc.cc
@@ -27,17 +27,16 @@ Software Foundation, 59 Temple Place - S
 #endif
 
 #include "Array.h"
 
 
 #include "Array.cc"
 
 #include "Array2.h"
-#include "Array2.cc"
 
 #include "ArrayN.h"
 #include "ArrayN.cc"
 
 #include "DiagArray2.h"
 #include "DiagArray2.cc"
 
 #include "oct-obj.h"
@@ -55,24 +54,15 @@ template class Array<octave_value>;
 template int assign (Array<octave_value>&, const Array<octave_value>&);
 
 template int assign (Array<octave_value>&,
 		     const Array<octave_value>&, const octave_value&);
 
 
 template class Array2<octave_value>;
 
-#if 0
-
-template int assign (Array2<octave_value>&, const Array2<octave_value>&);
-
-template int assign (Array2<octave_value>&,
-		     const Array2<octave_value>&, const octave_value&);
-
-#endif
-
 template class ArrayN<octave_value>;
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
diff --git a/src/ov-typeinfo.cc b/src/ov-typeinfo.cc
--- a/src/ov-typeinfo.cc
+++ b/src/ov-typeinfo.cc
@@ -35,19 +35,21 @@ Software Foundation, 59 Temple Place - S
 #include "oct-obj.h"
 
 const int
 octave_value_typeinfo::init_tab_sz (16);
 
 octave_value_typeinfo *
 octave_value_typeinfo::instance (0);
 
+#include <Array.h>
+#include <Array2.h>
+#include <Array3.h>
+
 #include <Array.cc>
-#include <Array2.cc>
-#include <Array3.cc>
 
 template class Array<unary_op_fcn>;
 template class Array2<unary_op_fcn>;
 
 template class Array<non_const_unary_op_fcn>;
 template class Array2<non_const_unary_op_fcn>;
 
 template class Array<binary_op_fcn>;
