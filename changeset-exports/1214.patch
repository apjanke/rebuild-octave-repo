# HG changeset patch
# User jwe
# Date 797135753 0
#      Thu Apr 06 02:35:53 1995 +0000
# Node ID 0bf4d2b7def4f4e2c71aa65eb905255ba8ecd379
# Parent  9689615b34f2b68b721bdba6e5072d395df95f89
[project @ 1995-04-06 02:33:59 by jwe]

diff --git a/liboctave/CColVector.cc b/liboctave/CColVector.cc
--- a/liboctave/CColVector.cc
+++ b/liboctave/CColVector.cc
@@ -43,26 +43,18 @@ extern "C"
 		       const Complex*, const int*, const Complex*,
 		       Complex*, const int*, long);
 }
 
 /*
  * Complex Column Vector class
  */
 
-#define KLUDGE_VECTORS
-#define TYPE Complex
-#define KL_VEC_TYPE ComplexColumnVector
-#include "mx-kludge.cc"
-#undef KLUDGE_VECTORS
-#undef TYPE
-#undef KL_VEC_TYPE
-
 ComplexColumnVector::ComplexColumnVector (const ColumnVector& a)
-   : Array<Complex> (a.length ())
+   : MArray<Complex> (a.length ())
 {
   for (int i = 0; i < length (); i++)
     elem (i) = a.elem (i);
 }
 
 int
 ComplexColumnVector::operator == (const ComplexColumnVector& a) const
 {
diff --git a/liboctave/CColVector.h b/liboctave/CColVector.h
--- a/liboctave/CColVector.h
+++ b/liboctave/CColVector.h
@@ -19,44 +19,42 @@ You should have received a copy of the G
 along with Octave; see the file COPYING.  If not, write to the Free
 Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.
 
 */
 
 #if !defined (octave_ComplexColumnVector_h)
 #define octave_ComplexColumnVector_h 1
 
-#include "Array.h"
+#include "MArray.h"
 
 #include "mx-defs.h"
 
 extern "C++" {
 
-class ComplexColumnVector : public Array<Complex>
+class ComplexColumnVector : public MArray<Complex>
 {
 friend class ComplexMatrix;
 friend class ComplexRowVector;
 
 public:
 
-  ComplexColumnVector (void) : Array<Complex> () { }
-  ComplexColumnVector (int n) : Array<Complex> (n) { }
-  ComplexColumnVector (int n, const Complex& val) : Array<Complex> (n, val) { }
+  ComplexColumnVector (void) : MArray<Complex> () { }
+  ComplexColumnVector (int n) : MArray<Complex> (n) { }
+  ComplexColumnVector (int n, const Complex& val) : MArray<Complex> (n, val) { }
   ComplexColumnVector (const ColumnVector& a);
-  ComplexColumnVector (const Array<Complex>& a) : Array<Complex> (a) { }
-  ComplexColumnVector (const ComplexColumnVector& a) : Array<Complex> (a) { }
+  ComplexColumnVector (const MArray<Complex>& a) : MArray<Complex> (a) { }
+  ComplexColumnVector (const ComplexColumnVector& a) : MArray<Complex> (a) { }
 
   ComplexColumnVector& operator = (const ComplexColumnVector& a)
     {
-      Array<Complex>::operator = (a);
+      MArray<Complex>::operator = (a);
       return *this;
     }
 
-//  operator Array<Complex>& () const { return *this; }
-
   int operator == (const ComplexColumnVector& a) const;
   int operator != (const ComplexColumnVector& a) const;
 
 // destructive insert/delete/reorder operations
 
   ComplexColumnVector& insert (const ColumnVector& a, int r);
   ComplexColumnVector& insert (const ComplexColumnVector& a, int r);
 
@@ -179,27 +177,19 @@ public:
   Complex min (void) const;
   Complex max (void) const;
 
 // i/o
 
   friend ostream& operator << (ostream& os, const ComplexColumnVector& a);
   friend istream& operator >> (istream& is, ComplexColumnVector& a);
 
-#define KLUDGE_VECTORS
-#define TYPE Complex
-#define KL_VEC_TYPE ComplexColumnVector
-#include "mx-kludge.h"
-#undef KLUDGE_VECTORS
-#undef TYPE
-#undef KL_VEC_TYPE
-
 private:
 
-  ComplexColumnVector (Complex *d, int l) : Array<Complex> (d, l) { }
+  ComplexColumnVector (Complex *d, int l) : MArray<Complex> (d, l) { }
 };
 
 } // extern "C++"
 
 #endif
 
 /*
 ;;; Local Variables: ***
diff --git a/liboctave/CDiagMatrix.cc b/liboctave/CDiagMatrix.cc
--- a/liboctave/CDiagMatrix.cc
+++ b/liboctave/CDiagMatrix.cc
@@ -32,40 +32,32 @@ Software Foundation, 675 Mass Ave, Cambr
 #include "mx-base.h"
 #include "mx-inlines.cc"
 #include "lo-error.h"
 
 /*
  * Complex Diagonal Matrix class
  */
 
-#define KLUDGE_DIAG_MATRICES
-#define TYPE Complex
-#define KL_DMAT_TYPE ComplexDiagMatrix
-#include "mx-kludge.cc"
-#undef KLUDGE_DIAG_MATRICES
-#undef TYPE
-#undef KL_DMAT_TYPE
-
 ComplexDiagMatrix::ComplexDiagMatrix (const RowVector& a)
-  : DiagArray<Complex> (a.length ())
+  : MDiagArray<Complex> (a.length ())
 {
   for (int i = 0; i < length (); i++)
     elem (i, i) = a.elem (i);
 }
 
 ComplexDiagMatrix::ComplexDiagMatrix (const ColumnVector& a)
-  : DiagArray<Complex> (a.length ())
+  : MDiagArray<Complex> (a.length ())
 {
   for (int i = 0; i < length (); i++)
     elem (i, i) = a.elem (i);
 }
 
 ComplexDiagMatrix::ComplexDiagMatrix (const DiagMatrix& a)
-  : DiagArray<Complex> (a.rows (), a.cols ())
+  : MDiagArray<Complex> (a.rows (), a.cols ())
 {
   for (int i = 0; i < length (); i++)
     elem (i, i) = a.elem (i, i);
 }
 
 int
 ComplexDiagMatrix::operator == (const ComplexDiagMatrix& a) const
 {
diff --git a/liboctave/CDiagMatrix.h b/liboctave/CDiagMatrix.h
--- a/liboctave/CDiagMatrix.h
+++ b/liboctave/CDiagMatrix.h
@@ -19,51 +19,51 @@ You should have received a copy of the G
 along with Octave; see the file COPYING.  If not, write to the Free
 Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.
 
 */
 
 #if !defined (octave_ComplexDiagMatrix_h)
 #define octave_ComplexDiagMatrix_h 1
 
-#include "Array.h"
+#include "MArray.h"
 
 #include "dRowVector.h"
 #include "CRowVector.h"
 #include "dColVector.h"
 #include "CColVector.h"
 
 #include "mx-defs.h"
 
 extern "C++" {
 
-class ComplexDiagMatrix : public DiagArray<Complex>
+class ComplexDiagMatrix : public MDiagArray<Complex>
 {
 public:
 
-  ComplexDiagMatrix (void) : DiagArray<Complex> () { }
-  ComplexDiagMatrix (int n) : DiagArray<Complex> (n) { }
+  ComplexDiagMatrix (void) : MDiagArray<Complex> () { }
+  ComplexDiagMatrix (int n) : MDiagArray<Complex> (n) { }
   ComplexDiagMatrix (int n, const Complex& val)
-    : DiagArray<Complex> (n, val) { }
-  ComplexDiagMatrix (int r, int c) : DiagArray<Complex> (r, c) { }
+    : MDiagArray<Complex> (n, val) { }
+  ComplexDiagMatrix (int r, int c) : MDiagArray<Complex> (r, c) { }
   ComplexDiagMatrix (int r, int c, const Complex& val)
-    : DiagArray<Complex> (r, c, val) { }
+    : MDiagArray<Complex> (r, c, val) { }
   ComplexDiagMatrix (const RowVector& a);
-  ComplexDiagMatrix (const ComplexRowVector& a) : DiagArray<Complex> (a) { }
+  ComplexDiagMatrix (const ComplexRowVector& a) : MDiagArray<Complex> (a) { }
   ComplexDiagMatrix (const ColumnVector& a);
   ComplexDiagMatrix (const ComplexColumnVector& a)
-    : DiagArray<Complex> (a) { }
+    : MDiagArray<Complex> (a) { }
   ComplexDiagMatrix (const DiagMatrix& a);
-  ComplexDiagMatrix (const DiagArray<Complex>& a)
-    : DiagArray<Complex> (a) { }
-  ComplexDiagMatrix (const ComplexDiagMatrix& a) : DiagArray<Complex> (a) { }
+  ComplexDiagMatrix (const MDiagArray<Complex>& a)
+    : MDiagArray<Complex> (a) { }
+  ComplexDiagMatrix (const ComplexDiagMatrix& a) : MDiagArray<Complex> (a) { }
 
   ComplexDiagMatrix& operator = (const ComplexDiagMatrix& a)
     {
-      DiagArray<Complex>::operator = (a);
+      MDiagArray<Complex>::operator = (a);
       return *this;
     }
 
   int operator == (const ComplexDiagMatrix& a) const;
   int operator != (const ComplexDiagMatrix& a) const;
 
   ComplexDiagMatrix& fill (double val);
   ComplexDiagMatrix& fill (const Complex& val);
@@ -149,28 +149,20 @@ public:
 
   ComplexColumnVector diag (void) const;
   ComplexColumnVector diag (int k) const;
 
 // i/o
 
   friend ostream& operator << (ostream& os, const ComplexDiagMatrix& a);
 
-#define KLUDGE_DIAG_MATRICES
-#define TYPE Complex
-#define KL_DMAT_TYPE ComplexDiagMatrix
-#include "mx-kludge.h"
-#undef KLUDGE_DIAG_MATRICES
-#undef TYPE
-#undef KL_DMAT_TYPE
-
 private:
 
   ComplexDiagMatrix (Complex *d, int nr, int nc)
-    : DiagArray<Complex> (d, nr, nc) { }
+    : MDiagArray<Complex> (d, nr, nc) { }
 };
 
 } // extern "C++"
 
 #endif
 
 /*
 ;;; Local Variables: ***
diff --git a/liboctave/CMatrix.cc b/liboctave/CMatrix.cc
--- a/liboctave/CMatrix.cc
+++ b/liboctave/CMatrix.cc
@@ -69,45 +69,37 @@ extern "C"
 
   int F77_FCN (cffti) (const int*, Complex*);
 
   int F77_FCN (cfftf) (const int*, Complex*, Complex*);
 
   int F77_FCN (cfftb) (const int*, Complex*, Complex*);
 }
 
-#define KLUDGE_MATRICES
-#define TYPE Complex
-#define KL_MAT_TYPE ComplexMatrix
-#include "mx-kludge.cc"
-#undef KLUDGE_MATRICES
-#undef TYPE
-#undef KL_MAT_TYPE
-
 /*
  * Complex Matrix class
  */
 
 ComplexMatrix::ComplexMatrix (const Matrix& a)
-  : Array2<Complex> (a.rows (), a.cols ())
+  : MArray2<Complex> (a.rows (), a.cols ())
 {
   for (int j = 0; j < cols (); j++)
     for (int i = 0; i < rows (); i++)
       elem (i, j) = a.elem (i, j);
 }
 
 ComplexMatrix::ComplexMatrix (const DiagMatrix& a)
-  : Array2<Complex> (a.rows (), a.cols (), 0.0)
+  : MArray2<Complex> (a.rows (), a.cols (), 0.0)
 {
   for (int i = 0; i < a.length (); i++)
     elem (i, i) = a.elem (i, i);
 }
 
 ComplexMatrix::ComplexMatrix (const ComplexDiagMatrix& a)
-  : Array2<Complex> (a.rows (), a.cols (), 0.0)
+  : MArray2<Complex> (a.rows (), a.cols (), 0.0)
 {
   for (int i = 0; i < a.length (); i++)
     elem (i, i) = a.elem (i, i);
 }
 
 int
 ComplexMatrix::operator == (const ComplexMatrix& a) const
 {
diff --git a/liboctave/CMatrix.h b/liboctave/CMatrix.h
--- a/liboctave/CMatrix.h
+++ b/liboctave/CMatrix.h
@@ -21,49 +21,49 @@ Software Foundation, 675 Mass Ave, Cambr
 
 */
 
 #if !defined (octave_ComplexMatrix_h)
 #define octave_ComplexMatrix_h 1
 
 #include <Complex.h>
 
-#include "Array.h"
+#include "MArray.h"
 
 #include "mx-defs.h"
 
 extern "C++" {
 
-class ComplexMatrix : public Array2<Complex>
+class ComplexMatrix : public MArray2<Complex>
 {
 friend class Matrix;
 friend class ComplexCHOL;
 friend class ComplexHESS;
 friend class ComplexLU;
 friend class ComplexQR;
 friend class ComplexQRP;
 friend class ComplexSCHUR;
 friend class ComplexSVD;
 
 public:
  
-  ComplexMatrix (void) : Array2<Complex> () { }
-  ComplexMatrix (int r, int c) : Array2<Complex> (r, c) { }
+  ComplexMatrix (void) : MArray2<Complex> () { }
+  ComplexMatrix (int r, int c) : MArray2<Complex> (r, c) { }
   ComplexMatrix (int r, int c, const Complex& val)
-    : Array2<Complex> (r, c, val) { }
+    : MArray2<Complex> (r, c, val) { }
   ComplexMatrix (const Matrix& a);
-  ComplexMatrix (const Array2<Complex>& a) : Array2<Complex> (a) { }
-  ComplexMatrix (const ComplexMatrix& a) : Array2<Complex> (a) { }
+  ComplexMatrix (const MArray2<Complex>& a) : MArray2<Complex> (a) { }
+  ComplexMatrix (const ComplexMatrix& a) : MArray2<Complex> (a) { }
   ComplexMatrix (const DiagMatrix& a);
-  ComplexMatrix (const DiagArray<Complex>& a) : Array2<Complex> (a) { }
+  ComplexMatrix (const MDiagArray<Complex>& a) : MArray2<Complex> (a) { }
   ComplexMatrix (const ComplexDiagMatrix& a);
 
   ComplexMatrix& operator = (const ComplexMatrix& a)
     {
-      Array2<Complex>::operator = (a);
+      MArray2<Complex>::operator = (a);
       return *this;
     }
 
   int operator == (const ComplexMatrix& a) const;
   int operator != (const ComplexMatrix& a) const;
 
 // destructive insert/delete/reorder operations
 
@@ -335,27 +335,19 @@ public:
   ComplexRowVector column_max (void) const;
   ComplexRowVector column_max_loc (void) const;
 
 // i/o
 
   friend ostream& operator << (ostream& os, const ComplexMatrix& a);
   friend istream& operator >> (istream& is, ComplexMatrix& a);
 
-#define KLUDGE_MATRICES
-#define TYPE Complex
-#define KL_MAT_TYPE ComplexMatrix
-#include "mx-kludge.h"
-#undef KLUDGE_MATRICES
-#undef TYPE
-#undef KL_MAT_TYPE
-
 private:
 
-  ComplexMatrix (Complex *d, int r, int c) : Array2<Complex> (d, r, c) { }
+  ComplexMatrix (Complex *d, int r, int c) : MArray2<Complex> (d, r, c) { }
 };
 
 } // extern "C++"
 
 #endif
 
 /*
 ;;; Local Variables: ***
diff --git a/liboctave/CRowVector.cc b/liboctave/CRowVector.cc
--- a/liboctave/CRowVector.cc
+++ b/liboctave/CRowVector.cc
@@ -43,26 +43,18 @@ extern "C"
 		       const Complex*, const int*, const Complex*,
 		       Complex*, const int*, long);
 }
 
 /*
  * Complex Row Vector class
  */
 
-#define KLUDGE_VECTORS
-#define TYPE Complex
-#define KL_VEC_TYPE ComplexRowVector
-#include "mx-kludge.cc"
-#undef KLUDGE_VECTORS
-#undef TYPE
-#undef KL_VEC_TYPE
-
 ComplexRowVector::ComplexRowVector (const RowVector& a)
-  : Array<Complex> (a.length ())
+  : MArray<Complex> (a.length ())
 {
   for (int i = 0; i < length (); i++)
     elem (i) = a.elem (i);
 }
 
 int
 ComplexRowVector::operator == (const ComplexRowVector& a) const
 {
diff --git a/liboctave/CRowVector.h b/liboctave/CRowVector.h
--- a/liboctave/CRowVector.h
+++ b/liboctave/CRowVector.h
@@ -19,38 +19,38 @@ You should have received a copy of the G
 along with Octave; see the file COPYING.  If not, write to the Free
 Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.
 
 */
 
 #if !defined (octave_ComplexRowVector_h)
 #define octave_ComplexRowVector_h 1
 
-#include "Array.h"
+#include "MArray.h"
 
 #include "mx-defs.h"
 
 extern "C++" {
 
-class ComplexRowVector : public Array<Complex>
+class ComplexRowVector : public MArray<Complex>
 {
 friend class ComplexColumnVector;
 
 public:
 
-  ComplexRowVector (void) : Array<Complex> () { }
-  ComplexRowVector (int n) : Array<Complex> (n) { }
-  ComplexRowVector (int n, const Complex& val) : Array<Complex> (n, val) { }
+  ComplexRowVector (void) : MArray<Complex> () { }
+  ComplexRowVector (int n) : MArray<Complex> (n) { }
+  ComplexRowVector (int n, const Complex& val) : MArray<Complex> (n, val) { }
   ComplexRowVector (const RowVector& a);
-  ComplexRowVector (const Array<Complex>& a) : Array<Complex> (a) { }
-  ComplexRowVector (const ComplexRowVector& a) : Array<Complex> (a) { }
+  ComplexRowVector (const MArray<Complex>& a) : MArray<Complex> (a) { }
+  ComplexRowVector (const ComplexRowVector& a) : MArray<Complex> (a) { }
 
   ComplexRowVector& operator = (const ComplexRowVector& a)
     {
-      Array<Complex>::operator = (a);
+      MArray<Complex>::operator = (a);
       return *this;
     }
 
   int operator == (const ComplexRowVector& a) const;
   int operator != (const ComplexRowVector& a) const;
 
 // destructive insert/delete/reorder operations
 
@@ -144,27 +144,19 @@ public:
   Complex min (void) const;
   Complex max (void) const;
 
 // i/o
 
   friend ostream& operator << (ostream& os, const ComplexRowVector& a);
   friend istream& operator >> (istream& is, ComplexRowVector& a);
 
-#define KLUDGE_VECTORS
-#define TYPE Complex
-#define KL_VEC_TYPE ComplexRowVector
-#include "mx-kludge.h"
-#undef KLUDGE_VECTORS
-#undef TYPE
-#undef KL_VEC_TYPE
-
 private:
 
-  ComplexRowVector (Complex *d, int l) : Array<Complex> (d, l) { }
+  ComplexRowVector (Complex *d, int l) : MArray<Complex> (d, l) { }
 };
 
 // row vector by column vector -> scalar
 
 Complex operator * (const ComplexRowVector& a, const ColumnVector& b);
 
 Complex operator * (const ComplexRowVector& a, const ComplexColumnVector& b);
 
diff --git a/liboctave/Makefile.in b/liboctave/Makefile.in
--- a/liboctave/Makefile.in
+++ b/liboctave/Makefile.in
@@ -14,17 +14,17 @@ VPATH = @srcdir@
 
 include $(TOPDIR)/Makeconf
 
 INSTALL = @INSTALL@
 INSTALL_PROGRAM = @INSTALL_PROGRAM@
 INSTALL_DATA = @INSTALL_DATA@
 
 MATRIX_INC = Array.h MArray.h Matrix.h mx-base.h mx-defs.h mx-ext.h \
-	mx-kludge.h CColVector.h CDiagMatrix.h CMatrix.h CRowVector.h \
+	CColVector.h CDiagMatrix.h CMatrix.h CRowVector.h \
 	CmplxAEPBAL.h CmplxCHOL.h CmplxDET.h CmplxHESS.h CmplxLU.h \
 	CmplxQR.h CmplxQRP.h CmplxSCHUR.h CmplxSVD.h EIG.h \
 	dColVector.h dDiagMatrix.h dMatrix.h dRowVector.h dbleAEPBAL.h \
 	dbleCHOL.h dbleDET.h dbleGEPBAL.h dbleHESS.h dbleLU.h dbleQR.h \
 	dbleQRP.h dbleSCHUR.h dbleSVD.h
 
 INCLUDES = Bounds.h CollocWt.h DAE.h DAEFunc.h FEGrid.h	FSQP.h \
 	LinConst.h LP.h LPsolve.h NLConst.h NLEqn.h NLFunc.h NLP.h \
@@ -44,17 +44,17 @@ MATRIX_SRC = CColVector.cc CDiagMatrix.c
 	dbleLU.cc dbleQR.cc dbleQRP.cc dbleSCHUR.cc dbleSVD.cc
 
 SOURCES = Bounds.cc CollocWt.cc DAE.cc DAEFunc.cc FEGrid.cc FSQP.cc \
 	LinConst.cc LP.cc LPsolve.cc NLConst.cc NLEqn.cc NLFunc.cc \
 	NPSOL.cc Objective.cc ODE.cc ODEFunc.cc QLD.cc QP.cc QPSOL.cc \
 	Quad.cc Range.cc lo-error.cc sun-utils.cc $(TEMPLATE_SRC) \
 	$(TI_SRC) $(MATRIX_SRC)
 
-EXTRAS = mx-kludge.cc mx-inlines.cc
+EXTRAS = mx-inlines.cc
 
 DISTFILES = Makefile.in $(SOURCES) $(INCLUDES) $(EXTRAS)
 
 MAKEDEPS = $(patsubst %.cc, %.d, $(SOURCES))
 
 OBJECTS = $(patsubst %.cc, %.o, $(SOURCES))
 
 LIBOCTAVE_DEPEND := $(patsubst %, liboctave.a(%), $(OBJECTS))
diff --git a/liboctave/dColVector.cc b/liboctave/dColVector.cc
--- a/liboctave/dColVector.cc
+++ b/liboctave/dColVector.cc
@@ -43,24 +43,16 @@ extern "C"
 		       const double*, const int*, const double*,
 		       double*, const int*, long);
 }
 
 /*
  * Column Vector class.
  */
 
-#define KLUDGE_VECTORS
-#define TYPE double
-#define KL_VEC_TYPE ColumnVector
-#include "mx-kludge.cc"
-#undef KLUDGE_VECTORS
-#undef TYPE
-#undef KL_VEC_TYPE
-
 int
 ColumnVector::operator == (const ColumnVector& a) const
 {
   int len = length ();
   if (len != a.length ())
     return 0;
   return equal (data (), a.data (), len);
 }
diff --git a/liboctave/dColVector.h b/liboctave/dColVector.h
--- a/liboctave/dColVector.h
+++ b/liboctave/dColVector.h
@@ -19,38 +19,38 @@ You should have received a copy of the G
 along with Octave; see the file COPYING.  If not, write to the Free
 Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.
 
 */
 
 #if !defined (octave_ColumnVector_h)
 #define octave_ColumnVector_h 1
 
-#include "Array.h"
+#include "MArray.h"
 
 #include "mx-defs.h"
 
 extern "C++" {
 
-class ColumnVector : public Array<double>
+class ColumnVector : public MArray<double>
 {
 friend class Matrix;
 friend class RowVector;
 
 public:
 
-  ColumnVector (void) : Array<double> () { }
-  ColumnVector (int n) : Array<double> (n) { }
-  ColumnVector (int n, double val) : Array<double> (n, val) { }
-  ColumnVector (const Array<double>& a) : Array<double> (a) { }
-  ColumnVector (const ColumnVector& a) : Array<double> (a) { }
+  ColumnVector (void) : MArray<double> () { }
+  ColumnVector (int n) : MArray<double> (n) { }
+  ColumnVector (int n, double val) : MArray<double> (n, val) { }
+  ColumnVector (const MArray<double>& a) : MArray<double> (a) { }
+  ColumnVector (const ColumnVector& a) : MArray<double> (a) { }
 
   ColumnVector& operator = (const ColumnVector& a)
     {
-      Array<double>::operator = (a);
+      MArray<double>::operator = (a);
       return *this;
     }
 
   int operator == (const ColumnVector& a) const;
   int operator != (const ColumnVector& a) const;
 
 // destructive insert/delete/reorder operations
 
@@ -92,27 +92,19 @@ public:
   double min (void) const;
   double max (void) const;
 
 // i/o
 
   friend ostream& operator << (ostream& os, const ColumnVector& a);
   friend istream& operator >> (istream& is, ColumnVector& a);
 
-#define KLUDGE_VECTORS
-#define TYPE double
-#define KL_VEC_TYPE ColumnVector
-#include "mx-kludge.h"
-#undef KLUDGE_VECTORS
-#undef TYPE
-#undef KL_VEC_TYPE
-
 private:
 
-  ColumnVector (double *d, int l) : Array<double> (d, l) { }
+  ColumnVector (double *d, int l) : MArray<double> (d, l) { }
 };
 
 } // extern "C++"
 
 #endif
 
 /*
 ;;; Local Variables: ***
diff --git a/liboctave/dDiagMatrix.cc b/liboctave/dDiagMatrix.cc
--- a/liboctave/dDiagMatrix.cc
+++ b/liboctave/dDiagMatrix.cc
@@ -32,24 +32,16 @@ Software Foundation, 675 Mass Ave, Cambr
 #include "mx-base.h"
 #include "mx-inlines.cc"
 #include "lo-error.h"
 
 /*
  * Diagonal Matrix class.
  */
 
-#define KLUDGE_DIAG_MATRICES
-#define TYPE double
-#define KL_DMAT_TYPE DiagMatrix
-#include "mx-kludge.cc"
-#undef KLUDGE_DIAG_MATRICES
-#undef TYPE
-#undef KL_DMAT_TYPE
-
 int
 DiagMatrix::operator == (const DiagMatrix& a) const
 {
   if (rows () != a.rows () || cols () != a.cols ())
     return 0;
 
   return equal (data (), a.data (), length ());
 }
diff --git a/liboctave/dDiagMatrix.h b/liboctave/dDiagMatrix.h
--- a/liboctave/dDiagMatrix.h
+++ b/liboctave/dDiagMatrix.h
@@ -19,51 +19,49 @@ You should have received a copy of the G
 along with Octave; see the file COPYING.  If not, write to the Free
 Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.
 
 */
 
 #if !defined (octave_DiagMatrix_h)
 #define octave_DiagMatrix_h 1
 
-#include "Array.h"
+#include "MArray.h"
 
 #include "dRowVector.h"
 #include "dColVector.h"
 
 #include "mx-defs.h"
 
 extern "C++" {
 
-class DiagMatrix : public DiagArray<double>
+class DiagMatrix : public MDiagArray<double>
 {
 friend class SVD;
 friend class ComplexSVD;
 
 public:
 
-  DiagMatrix (void) : DiagArray<double> () { }
-  DiagMatrix (int n) : DiagArray<double> (n) { }
-  DiagMatrix (int n, double val) : DiagArray<double> (n, val) { }
-  DiagMatrix (int r, int c) : DiagArray<double> (r, c) { }
-  DiagMatrix (int r, int c, double val) : DiagArray<double> (r, c, val) { }
-  DiagMatrix (const RowVector& a) : DiagArray<double> (a) { }
-  DiagMatrix (const ColumnVector& a) : DiagArray<double> (a) { }
-  DiagMatrix (const DiagArray<double>& a) : DiagArray<double> (a) { }
-  DiagMatrix (const DiagMatrix& a) : DiagArray<double> (a) { }
-//  DiagMatrix (double a) : DiagArray<double> (1, a) { }
+  DiagMatrix (void) : MDiagArray<double> () { }
+  DiagMatrix (int n) : MDiagArray<double> (n) { }
+  DiagMatrix (int n, double val) : MDiagArray<double> (n, val) { }
+  DiagMatrix (int r, int c) : MDiagArray<double> (r, c) { }
+  DiagMatrix (int r, int c, double val) : MDiagArray<double> (r, c, val) { }
+  DiagMatrix (const RowVector& a) : MDiagArray<double> (a) { }
+  DiagMatrix (const ColumnVector& a) : MDiagArray<double> (a) { }
+  DiagMatrix (const MDiagArray<double>& a) : MDiagArray<double> (a) { }
+  DiagMatrix (const DiagMatrix& a) : MDiagArray<double> (a) { }
+//  DiagMatrix (double a) : MDiagArray<double> (1, a) { }
 
   DiagMatrix& operator = (const DiagMatrix& a)
     {
-      DiagArray<double>::operator = (a);
+      MDiagArray<double>::operator = (a);
       return *this;
     }
 
-//  operator DiagArray<double>& () const { return *this; }
-
   int operator == (const DiagMatrix& a) const;
   int operator != (const DiagMatrix& a) const;
 
   DiagMatrix& fill (double val);
   DiagMatrix& fill (double val, int beg, int end);
   DiagMatrix& fill (const ColumnVector& a);
   DiagMatrix& fill (const RowVector& a);
   DiagMatrix& fill (const ColumnVector& a, int beg);
@@ -103,27 +101,19 @@ public:
 
   ColumnVector diag (void) const;
   ColumnVector diag (int k) const;
 
 // i/o
 
   friend ostream& operator << (ostream& os, const DiagMatrix& a);
 
-#define KLUDGE_DIAG_MATRICES
-#define TYPE double
-#define KL_DMAT_TYPE DiagMatrix
-#include "mx-kludge.h"
-#undef KLUDGE_DIAG_MATRICES
-#undef TYPE
-#undef KL_DMAT_TYPE
-
 private:
 
-  DiagMatrix (double *d, int nr, int nc) : DiagArray<double> (d, nr, nc) { }
+  DiagMatrix (double *d, int nr, int nc) : MDiagArray<double> (d, nr, nc) { }
 };
 
 } // extern "C++"
 
 #endif
 
 /*
 ;;; Local Variables: ***
diff --git a/liboctave/dMatrix.cc b/liboctave/dMatrix.cc
--- a/liboctave/dMatrix.cc
+++ b/liboctave/dMatrix.cc
@@ -70,30 +70,22 @@ extern "C"
 
   int F77_FCN (cffti) (const int*, Complex*);
 
   int F77_FCN (cfftf) (const int*, Complex*, Complex*);
 
   int F77_FCN (cfftb) (const int*, Complex*, Complex*);
 }
 
-#define KLUDGE_MATRICES
-#define TYPE double
-#define KL_MAT_TYPE Matrix
-#include "mx-kludge.cc"
-#undef KLUDGE_MATRICES
-#undef TYPE
-#undef KL_MAT_TYPE
-
 /*
  * Matrix class.
  */
 
 Matrix::Matrix (const DiagMatrix& a)
-  : Array2<double> (a.rows (), a.cols (), 0.0)
+  : MArray2<double> (a.rows (), a.cols (), 0.0)
 {
   for (int i = 0; i < a.length (); i++)
     elem (i, i) = a.elem (i, i);
 }
 
 int
 Matrix::operator == (const Matrix& a) const
 {
diff --git a/liboctave/dMatrix.h b/liboctave/dMatrix.h
--- a/liboctave/dMatrix.h
+++ b/liboctave/dMatrix.h
@@ -22,48 +22,48 @@ Software Foundation, 675 Mass Ave, Cambr
 */
 
 #if !defined (octave_Matrix_int_h)
 #define octave_Matrix_int_h 1
 
 // For FILE...
 #include <stdio.h>
 
-#include "Array.h"
+#include "MArray.h"
 
 #include "mx-defs.h"
 
 extern "C++" {
 
-class Matrix : public Array2<double>
+class Matrix : public MArray2<double>
 {
 friend class ComplexMatrix;
 friend class AEPBAL;
 friend class CHOL;
 friend class GEPBAL;
 friend class HESS;
 friend class LU;
 friend class QR;
 friend class QRP;
 friend class SCHUR;
 friend class SVD;
 
 public:
 
-  Matrix (void) : Array2<double> () { }
-  Matrix (int r, int c) : Array2<double> (r, c) { }
-  Matrix (int r, int c, double val) : Array2<double> (r, c, val) { }
-  Matrix (const Array2<double>& a) : Array2<double> (a) { }
-  Matrix (const Matrix& a) : Array2<double> (a) { }
-  Matrix (const DiagArray<double>& a) : Array2<double> (a) { }
+  Matrix (void) : MArray2<double> () { }
+  Matrix (int r, int c) : MArray2<double> (r, c) { }
+  Matrix (int r, int c, double val) : MArray2<double> (r, c, val) { }
+  Matrix (const MArray2<double>& a) : MArray2<double> (a) { }
+  Matrix (const Matrix& a) : MArray2<double> (a) { }
+  Matrix (const MDiagArray<double>& a) : MArray2<double> (a) { }
   Matrix (const DiagMatrix& a);
 
   Matrix& operator = (const Matrix& a)
     {
-      Array2<double>::operator = (a);
+      MArray2<double>::operator = (a);
       return *this;
     }
 
   int operator == (const Matrix& a) const;
   int operator != (const Matrix& a) const;
 
 // destructive insert/delete/reorder operations
 
@@ -228,27 +228,19 @@ public:
   friend ostream& operator << (ostream& os, const Matrix& a);
   friend istream& operator >> (istream& is, Matrix& a);
 
   int read (FILE *fptr, char *type);
   int write (FILE *fptr, char *type);
 
 // Until templates really work with g++:
 
-#define KLUDGE_MATRICES
-#define TYPE double
-#define KL_MAT_TYPE Matrix
-#include "mx-kludge.h"
-#undef KLUDGE_MATRICES
-#undef TYPE
-#undef KL_MAT_TYPE
-
 private:
 
-  Matrix (double *d, int r, int c) : Array2<double> (d, r, c) { }
+  Matrix (double *d, int r, int c) : MArray2<double> (d, r, c) { }
 };
 
 } // extern "C++"
 
 #endif
 
 /*
 ;;; Local Variables: ***
diff --git a/liboctave/dRowVector.cc b/liboctave/dRowVector.cc
--- a/liboctave/dRowVector.cc
+++ b/liboctave/dRowVector.cc
@@ -46,24 +46,16 @@ extern "C"
   double F77_FCN (ddot) (const int*, const double*, const int*,
 			 const double*, const int*);
 }
 
 /*
  * Row Vector class.
  */
 
-#define KLUDGE_VECTORS
-#define TYPE double
-#define KL_VEC_TYPE RowVector
-#include "mx-kludge.cc"
-#undef KLUDGE_VECTORS
-#undef TYPE
-#undef KL_VEC_TYPE
-
 int
 RowVector::operator == (const RowVector& a) const
 {
   int len = length ();
   if (len != a.length ())
     return 0;
   return equal (data (), a.data (), len);
 }
diff --git a/liboctave/dRowVector.h b/liboctave/dRowVector.h
--- a/liboctave/dRowVector.h
+++ b/liboctave/dRowVector.h
@@ -19,37 +19,37 @@ You should have received a copy of the G
 along with Octave; see the file COPYING.  If not, write to the Free
 Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.
 
 */
 
 #if !defined (octave_RowVector_h)
 #define octave_RowVector_h 1
 
-#include "Array.h"
+#include "MArray.h"
 
 #include "mx-defs.h"
 
 extern "C++" {
 
-class RowVector : public Array<double>
+class RowVector : public MArray<double>
 {
 friend class ColumnVector;
 
 public:
 
-  RowVector (void) : Array<double> () { }
-  RowVector (int n) : Array<double> (n) { }
-  RowVector (int n, double val) : Array<double> (n, val) { }
-  RowVector (const Array<double>& a) : Array<double> (a) { }
-  RowVector (const RowVector& a) : Array<double> (a) { }
+  RowVector (void) : MArray<double> () { }
+  RowVector (int n) : MArray<double> (n) { }
+  RowVector (int n, double val) : MArray<double> (n, val) { }
+  RowVector (const MArray<double>& a) : MArray<double> (a) { }
+  RowVector (const RowVector& a) : MArray<double> (a) { }
 
   RowVector& operator = (const RowVector& a)
     {
-      Array<double>::operator = (a);
+      MArray<double>::operator = (a);
       return *this;
     }
 
   int operator == (const RowVector& a) const;
   int operator != (const RowVector& a) const;
 
 // destructive insert/delete/reorder operations
 
@@ -87,27 +87,19 @@ public:
   double min (void) const;
   double max (void) const;
 
 // i/o
 
   friend ostream& operator << (ostream& os, const RowVector& a);
   friend istream& operator >> (istream& is, RowVector& a);
 
-#define KLUDGE_VECTORS
-#define TYPE double
-#define KL_VEC_TYPE RowVector
-#include "mx-kludge.h"
-#undef KLUDGE_VECTORS
-#undef TYPE
-#undef KL_VEC_TYPE
-
 private:
 
-  RowVector (double *d, int l) : Array<double> (d, l) { }
+  RowVector (double *d, int l) : MArray<double> (d, l) { }
 };
 
 // row vector by column vector -> scalar
 
 double operator * (const RowVector& a, const ColumnVector& b);
 
 Complex operator * (const RowVector& a, const ComplexColumnVector& b);
 
