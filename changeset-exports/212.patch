# HG changeset patch
# User jwe
# Date 753162295 0
#      Sat Nov 13 03:44:55 1993 +0000
# Node ID 6188aa8d1fecadf26a36311447bafb752a17a149
# Parent  4adbab9c31cd1d49d00b0a2758b8134bffa73b9e
[project @ 1993-11-13 03:44:55 by jwe]

diff --git a/src/pt-const.h b/src/pt-const.h
--- a/src/pt-const.h
+++ b/src/pt-const.h
@@ -350,24 +350,24 @@ public:
 
   void vector_assignment (tree_constant& rhs, tree_constant& i_arg);
 
   void check_vector_assign (int rhs_nr, int rhs_nc, int ilen,
 			    const char *rm);
 
   void do_vector_assign (tree_constant& rhs, int i);
   void do_vector_assign (tree_constant& rhs, idx_vector& i);
-  void do_vector_assign (tree_constant& rhs, Range& i, int imax);
+  void do_vector_assign (tree_constant& rhs, Range& i);
 
   void do_matrix_assignment
     (tree_constant& rhs, int i, tree_constant& j_arg);
   void do_matrix_assignment
     (tree_constant& rhs, idx_vector& i, tree_constant& j_arg);
   void do_matrix_assignment
-    (tree_constant& rhs, Range& i, int imax, tree_constant& j_arg);
+    (tree_constant& rhs, Range& i, tree_constant& j_arg);
   void do_matrix_assignment
     (tree_constant& rhs, constant_type i, tree_constant& j_arg);
 
   void do_matrix_assignment (tree_constant& rhs, int i, int j);
   void do_matrix_assignment (tree_constant& rhs, int i, idx_vector& jv);
   void do_matrix_assignment (tree_constant& rhs, int i, Range& j);
   void do_matrix_assignment (tree_constant& rhs, int i, constant_type cj);
 
@@ -420,17 +420,17 @@ public:
   tree_constant fortran_style_matrix_index (const tree_constant& i_arg) const;
   tree_constant fortran_style_matrix_index (const Matrix& mi) const;
 
   tree_constant do_vector_index (const tree_constant& i_arg) const;
 
   tree_constant do_matrix_index (int i, const tree_constant& i_arg) const;
   tree_constant do_matrix_index (const idx_vector& i,
 				 const tree_constant& i_arg) const; 
-  tree_constant do_matrix_index (const Range& i, int imax,
+  tree_constant do_matrix_index (const Range& i,
 				 const tree_constant& i_arg) const;
   tree_constant do_matrix_index (constant_type i,
 				 const tree_constant& i_arg) const;
 
   tree_constant do_matrix_index (int i, int j) const;
   tree_constant do_matrix_index (int i, const idx_vector& j) const;
   tree_constant do_matrix_index (int i, const Range& j) const;
   tree_constant do_matrix_index (int i, constant_type cj) const;
@@ -709,17 +709,22 @@ public:
   int is_empty (void) const
     {
       return (rep->type_tag != tree_constant_rep::magic_colon
 	      && rep->type_tag != tree_constant_rep::unknown_constant
 	      && (rows () == 0 || columns () == 0));
     }
 
   int is_zero_by_zero (void) const
-    { return (rows () == 0 && columns () == 0); } 
+    {
+      return (rep->type_tag != tree_constant_rep::magic_colon
+	      && rep->type_tag != tree_constant_rep::unknown_constant
+	      && rows () == 0
+	      && columns () == 0);
+    } 
 
 
   tree_constant all (void) const { return rep->all (); }
   tree_constant any (void) const { return rep->any (); }
   tree_constant isstr (void) const { return rep->isstr (); }
 
   tree_constant convert_to_str (void) { return rep->convert_to_str (); }
 
diff --git a/src/tc-assign.cc b/src/tc-assign.cc
--- a/src/tc-assign.cc
+++ b/src/tc-assign.cc
@@ -277,25 +277,23 @@ tree_constant_rep::fortran_style_matrix_
     case matrix_constant:
       {
 	Matrix mi = tmp_i.matrix_value ();
 	int len = nr * nc;
 	idx_vector ii (mi, 1, "", len);  // Always do fortran indexing here...
 	if (! ii)
 	  return;
 
-	int imax = ii.max ();
-
 	if (nr <= 1 || nc <= 1)
 	  {
-	    maybe_resize (imax-1);
+	    maybe_resize (ii.max () - 1);
 	    if (error_state)
 	      return;
 	  }
-	else if (range_max_check (imax-1, len) < 0)
+	else if (range_max_check (ii.max () - 1, len) < 0)
 	  return;
 
 	if (ii.capacity () != rhs_nr * rhs_nc)
 	  {
 	    error ("A(matrix) = X: X and matrix must have the same\
  number of elements"); 
 	    return;
 	  }
@@ -354,26 +352,30 @@ tree_constant_rep::vector_assignment (tr
       }
       break;
     case string_constant:
       gripe_string_invalid ();
       break;
     case range_constant:
       {
 	Range ri = tmp_i.range_value ();
-	if (rows () == 2 && is_zero_one (ri))
+	int len = nr * nc;
+	if (len == 2 && is_zero_one (ri))
 	  {
 	    do_vector_assign (rhs, 1);
 	  }
+	else if (len == 2 && is_one_zero (ri))
+	  {
+	    do_vector_assign (rhs, 0);
+	  }
 	else
 	  {
-	    int imax;
-	    if (index_check (ri, imax, "") < 0)
+	    if (index_check (ri, "") < 0)
 	      return;
-	    do_vector_assign (rhs, ri, imax);
+	    do_vector_assign (rhs, ri);
 	  }
       }
       break;
     case magic_colon:
       {
 	int rhs_nr = rhs.rows ();
 	int rhs_nc = rhs.columns ();
 
@@ -539,17 +541,17 @@ tree_constant_rep::do_vector_assign (tre
 			     rhs_cm.elem (i, 0), rhs.is_real_type ());
 	}
       else
 	panic_impossible ();
     }
 }
 
 void
-tree_constant_rep::do_vector_assign (tree_constant& rhs, Range& ri, int imax)
+tree_constant_rep::do_vector_assign (tree_constant& rhs, Range& ri)
 {
   if (rhs.is_zero_by_zero ())
     {
       int nr = rows ();
       int nc = columns ();
 
       int len = nr > nc ? nr : nc;
 
@@ -578,17 +580,17 @@ tree_constant_rep::do_vector_assign (tre
 	return;
 
       force_orient f_orient = no_orient;
       if (rhs_nr == 1 && rhs_nc != 1)
 	f_orient = row_orient;
       else if (rhs_nc == 1 && rhs_nr != 1)
 	f_orient = column_orient;
 
-      maybe_resize (imax, f_orient);
+      maybe_resize (tree_to_mat_idx (ri.max ()), f_orient);
       if (error_state)
 	return;
 
       int nr = rows ();
       int nc = columns ();
 
       double b = ri.base ();
       double increment = ri.inc ();
@@ -738,26 +740,30 @@ tree_constant_rep::do_matrix_assignment 
       }
       break;
     case string_constant:
       gripe_string_invalid ();
       break;
     case range_constant:
       {
 	Range ri = tmp_i.range_value ();
-	if (rows () == 2 && is_zero_one (ri))
+	int nr = rows ();
+	if (nr == 2 && is_zero_one (ri))
 	  {
 	    do_matrix_assignment (rhs, 1, j_arg);
 	  }
+	else if (nr == 2 && is_one_zero (ri))
+	  {
+	    do_matrix_assignment (rhs, 0, j_arg);
+	  }
 	else
 	  {
-	    int imax;
-	    if (index_check (ri, imax, "row") < 0)
+	    if (index_check (ri, "row") < 0)
 	      return;
-	    do_matrix_assignment (rhs, ri, imax, j_arg);
+	    do_matrix_assignment (rhs, ri, j_arg);
 	  }
       }
       break;
     case magic_colon:
       do_matrix_assignment (rhs, magic_colon, j_arg);
       break;
     default:
       panic_impossible ();
@@ -826,26 +832,30 @@ tree_constant_rep::do_matrix_assignment 
 	Range rj = tmp_j.range_value ();
 	if (! indexed_assign_conforms (1, rj.nelem (), rhs_nr, rhs_nc))
 	  {
 	    error ("A(int,range) = X: X must be a row vector with the\
  same number of elements as range"); 
 	    return;
 	  }
 
-	if (columns () == 2 && is_zero_one (rj) && rhs_nc == 1)
+	int nc = columns ();
+	if (nc == 2 && is_zero_one (rj) && rhs_nc == 1)
 	  {
 	    do_matrix_assignment (rhs, i, 1);
 	  }
+	else if (nc == 2 && is_one_zero (rj) && rhs_nc == 1)
+	  {
+	    do_matrix_assignment (rhs, i, 0);
+	  }
 	else
 	  {
-	    int jmax;
-	    if (index_check (rj, jmax, "column") < 0)
+	    if (index_check (rj, "column") < 0)
 	      return;
-	    maybe_resize (i, jmax);
+	    maybe_resize (i, tree_to_mat_idx (rj.max ()));
 	    if (error_state)
 	      return;
 
 	    do_matrix_assignment (rhs, i, rj);
 	  }
       }
       break;
     case magic_colon:
@@ -964,26 +974,30 @@ tree_constant_rep::do_matrix_assignment 
 				       rhs_nr, rhs_nc))
 	  {
 	    error ("A(matrix,range) = X: the number of rows in X must\
  match the number of elements in matrix and the number of columns in X\
  must match the number of elements in range");  
 	    return;
 	  }
 
-	if (columns () == 2 && is_zero_one (rj) && rhs_nc == 1)
+	int nc = columns ();
+	if (nc == 2 && is_zero_one (rj) && rhs_nc == 1)
 	  {
 	    do_matrix_assignment (rhs, iv, 1);
 	  }
+	else if (nc == 2 && is_one_zero (rj) && rhs_nc == 1)
+	  {
+	    do_matrix_assignment (rhs, iv, 0);
+	  }
 	else
 	  {
-	    int jmax;
-	    if (index_check (rj, jmax, "column") < 0)
+	    if (index_check (rj, "column") < 0)
 	      return;
-	    maybe_resize (iv.max (), jmax);
+	    maybe_resize (iv.max (), tree_to_mat_idx (rj.max ()));
 	    if (error_state)
 	      return;
 
 	    do_matrix_assignment (rhs, iv, rj);
 	  }
       }
       break;
     case magic_colon:
@@ -1022,18 +1036,17 @@ tree_constant_rep::do_matrix_assignment 
     default:
       panic_impossible ();
       break;
     }
 }
 
 void
 tree_constant_rep::do_matrix_assignment (tree_constant& rhs,
-					 Range& ri, int imax,
-					 tree_constant& j_arg)
+					 Range& ri, tree_constant& j_arg) 
 {
   tree_constant tmp_j = j_arg.make_numeric_or_range_or_magic ();
 
   tree_constant_rep::constant_type jtype = tmp_j.const_type ();
 
   int rhs_nr = rhs.rows ();
   int rhs_nc = rhs.columns ();
 
@@ -1046,17 +1059,17 @@ tree_constant_rep::do_matrix_assignment 
 	if (index_check (j, "column") < 0)
 	  return;
 	if (! indexed_assign_conforms (ri.nelem (), 1, rhs_nr, rhs_nc))
 	  {
 	    error ("A(range,int) = X: X must be a column vector with\
  the same number of elements as range");
 	    return;
 	  }
-	maybe_resize (imax, j);
+	maybe_resize (tree_to_mat_idx (ri.max ()), j);
 	if (error_state)
 	  return;
 
 	do_matrix_assignment (rhs, ri, j);
       }
       break;
     case complex_matrix_constant:
     case matrix_constant:
@@ -1070,17 +1083,17 @@ tree_constant_rep::do_matrix_assignment 
 	if (! indexed_assign_conforms (ri.nelem (), jv.capacity (),
 				       rhs_nr, rhs_nc))
 	  {
 	    error ("A(range,matrix) = X: the number of rows in X must\
  match the number of elements in range and the number of columns in X\
  must match the number of elements in matrix");
 	    return;
 	  }
-	maybe_resize (imax, jv.max ());
+	maybe_resize (tree_to_mat_idx (ri.max ()), jv.max ());
 	if (error_state)
 	  return;
 
 	do_matrix_assignment (rhs, ri, jv);
       }
       break;
     case string_constant:
       gripe_string_invalid ();
@@ -1092,43 +1105,50 @@ tree_constant_rep::do_matrix_assignment 
 				       rhs_nr, rhs_nc))
 	  {
 	    error ("A(r_range,c_range) = X: the number of rows in X\
  must match the number of elements in r_range and the number of\
  columns in X must match the number of elements in c_range\n");
 	    return;
 	  }
 
-	if (columns () == 2 && is_zero_one (rj) && rhs_nc == 1)
+	int nc = columns ();
+	if (nc == 2 && is_zero_one (rj) && rhs_nc == 1)
 	  {
 	    do_matrix_assignment (rhs, ri, 1);
 	  }
+	else if (nc == 2 && is_one_zero (rj) && rhs_nc == 1)
+	  {
+	    do_matrix_assignment (rhs, ri, 0);
+	  }
 	else
 	  {
-	    int jmax;
-	    if (index_check (rj, jmax, "column") < 0)
+	    if (index_check (rj, "column") < 0)
 	      return;
-	    maybe_resize (imax, jmax);
+
+	    maybe_resize (tree_to_mat_idx (ri.max ()),
+			  tree_to_mat_idx (rj.max ()));
+
 	    if (error_state)
 	      return;
 
 	    do_matrix_assignment (rhs, ri, rj);
 	  }
       }
       break;
     case magic_colon:
       {
 	int nc = columns ();
 	int new_nc = nc;
 	if (nc == 0)
 	  new_nc = rhs_nc;
 
 	if (indexed_assign_conforms (ri.nelem (), new_nc, rhs_nr, rhs_nc))
 	  {
-	    maybe_resize (imax, new_nc-1);
+	    maybe_resize (tree_to_mat_idx (ri.max ()), new_nc-1);
 	    if (error_state)
 	      return;
 	  }
 	else if (rhs_nr == 0 && rhs_nc == 0)
 	  {
 	    int b = tree_to_mat_idx (ri.min ());
 	    int l = tree_to_mat_idx (ri.max ());
 	    if (b < 0 || l >= rows ())
@@ -1264,26 +1284,30 @@ tree_constant_rep::do_matrix_assignment 
 	Range rj = tmp_j.range_value ();
 	int nr = rows ();
 	int new_nr = nr;
 	if (nr == 0)
 	  new_nr = rhs_nr;
 
 	if (indexed_assign_conforms (new_nr, rj.nelem (), rhs_nr, rhs_nc))
 	  {
-	    if (columns () == 2 && is_zero_one (rj) && rhs_nc == 1)
+	    int nc = columns ();
+	    if (nc == 2 && is_zero_one (rj) && rhs_nc == 1)
 	      {
 		do_matrix_assignment (rhs, magic_colon, 1);
 	      }
+	    else if (nc == 2 && is_one_zero (rj) && rhs_nc == 1)
+	      {
+		do_matrix_assignment (rhs, magic_colon, 0);
+	      }
 	    else
 	      {
-		int jmax;
-		if (index_check (rj, jmax, "column") < 0)
+		if (index_check (rj, "column") < 0)
 		  return;
-		maybe_resize (new_nr-1, jmax);
+		maybe_resize (new_nr-1, tree_to_mat_idx (rj.max ()));
 		if (error_state)
 		  return;
 	      }
 	  }
 	else if (rhs_nr == 0 && rhs_nc == 0)
 	  {
 	    int b = tree_to_mat_idx (rj.min ());
 	    int l = tree_to_mat_idx (rj.max ());
diff --git a/src/tc-index.cc b/src/tc-index.cc
--- a/src/tc-index.cc
+++ b/src/tc-index.cc
@@ -396,26 +396,25 @@ tree_constant_rep::do_vector_index (cons
 	    retval = tree_constant (mtmp);
 	  }
 	else
 	  {
 	    idx_vector iv (mi, user_pref.do_fortran_indexing, "", len);
 	    if (! iv)
 	      return tree_constant ();
 
-	    int imax = iv.max ();
 	    if (swap_indices)
 	      {
-		if (range_max_check (imax, nc) < 0)
+		if (range_max_check (iv.max (), nc) < 0)
 		  return tree_constant ();
 		retval = do_matrix_index (0, iv);
 	      }
 	    else
 	      {
-		if (range_max_check (imax, nr) < 0)
+		if (range_max_check (iv.max (), nr) < 0)
 		  return tree_constant ();
 		retval = do_matrix_index (iv, 0);
 	      }
 	  }
       }
       break;
     case string_constant:
       gripe_string_invalid ();
@@ -425,30 +424,33 @@ tree_constant_rep::do_vector_index (cons
         Range ri = tmp_i.range_value ();
 	if (len == 2 && is_zero_one (ri))
 	  {
 	    if (swap_indices)
 	      retval = do_matrix_index (0, 1);
 	    else
 	      retval = do_matrix_index (1, 0);
 	  }
+	else if (len == 2 && is_one_zero (ri))
+	  {
+	    retval = do_matrix_index (0, 0);
+	  }
 	else
 	  {
-	    int imax;
-	    if (index_check (ri, imax, "") < 0)
+	    if (index_check (ri, "") < 0)
 	      return tree_constant ();
 	    if (swap_indices)
 	      {
-		if (range_max_check (imax, nc) < 0)
+		if (range_max_check (tree_to_mat_idx (ri.max ()), nc) < 0)
 		  return tree_constant ();
 		retval = do_matrix_index (0, ri);
 	      }
 	    else
 	      {
-		if (range_max_check (imax, nr) < 0)
+		if (range_max_check (tree_to_mat_idx (ri.max ()), nr) < 0)
 		  return tree_constant ();
 		retval = do_matrix_index (ri, 0);
 	      }
 	  }
       }
       break;
     case magic_colon:
       if (swap_indices)
@@ -503,26 +505,30 @@ tree_constant_rep::do_matrix_index (cons
       }
       break;
     case string_constant:
       gripe_string_invalid ();
       break;
     case range_constant:
       {
 	Range ri = tmp_i.range_value ();
-	if (rows () == 2 && is_zero_one (ri))
+	int nr = rows ();
+	if (nr == 2 && is_zero_one (ri))
 	  {
 	    retval = do_matrix_index (1, j_arg);
 	  }
+	else if (nr == 2 && is_one_zero (ri))
+	  {
+	    retval = do_matrix_index (0, j_arg);
+	  }
 	else
 	  {
-	    int imax;
-	    if (index_check (ri, imax, "row") < 0)
+	    if (index_check (ri, "row") < 0)
 	      return tree_constant ();
-	    retval = do_matrix_index (ri, imax, j_arg);
+	    retval = do_matrix_index (ri, j_arg);
 	  }
       }
       break;
     case magic_colon:
       retval = do_matrix_index (magic_colon, j_arg);
       break;
     default:
       panic_impossible ();
@@ -583,22 +589,25 @@ tree_constant_rep::do_matrix_index (int 
       break;
     case range_constant:
       {
 	Range rj = tmp_j.range_value ();
 	if (nc == 2 && is_zero_one (rj))
 	  {
 	    retval = do_matrix_index (i, 1);
 	  }
+	else if (nc == 2 && is_one_zero (rj))
+	  {
+	    retval = do_matrix_index (i, 0);
+	  }
 	else
 	  {
-	    int jmax;
-	    if (index_check (rj, jmax, "column") < 0)
+	    if (index_check (rj, "column") < 0)
 	      return tree_constant ();
-	    if (range_max_check (i, jmax, nr, nc) < 0)
+	    if (range_max_check (i, tree_to_mat_idx (rj.max ()), nr, nc) < 0)
 	      return tree_constant ();
 	    retval = do_matrix_index (i, rj);
 	  }
       }
       break;
     case magic_colon:
       if (range_max_check (i, 0, nr, nc) < 0)
 	return tree_constant ();
@@ -664,22 +673,26 @@ tree_constant_rep::do_matrix_index (cons
       break;
     case range_constant:
       {
 	Range rj = tmp_j.range_value ();
 	if (nc == 2 && is_zero_one (rj))
 	  {
 	    retval = do_matrix_index (iv, 1);
 	  }
+	else if (nc == 2 && is_one_zero (rj))
+	  {
+	    retval = do_matrix_index (iv, 0);
+	  }
 	else
 	  {
-	    int jmax;
-	    if (index_check (rj, jmax, "column") < 0)
+	    if (index_check (rj, "column") < 0)
 	      return tree_constant ();
-	    if (range_max_check (iv.max (), jmax, nr, nc) < 0)
+	    if (range_max_check (iv.max (), tree_to_mat_idx (rj.max ()),
+				 nr, nc) < 0) 
 	      return tree_constant ();
 	    retval = do_matrix_index (iv, rj);
 	  }
       }
       break;
     case magic_colon:
       if (range_max_check (iv.max (), 0, nr, nc) < 0)
 	return tree_constant ();
@@ -689,17 +702,17 @@ tree_constant_rep::do_matrix_index (cons
       panic_impossible ();
       break;
     }
 
   return retval;
 }
 
 tree_constant
-tree_constant_rep::do_matrix_index (const Range& ri, int imax,
+tree_constant_rep::do_matrix_index (const Range& ri,
 				    const tree_constant& j_arg) const
 {
   tree_constant retval;
 
   tree_constant tmp_j = j_arg.make_numeric_or_range_or_magic ();
 
   tree_constant_rep::constant_type jtype = tmp_j.const_type ();
 
@@ -709,17 +722,17 @@ tree_constant_rep::do_matrix_index (cons
   switch (jtype)
     {
     case complex_scalar_constant:
     case scalar_constant:
       {
 	int j = tree_to_mat_idx (tmp_j.double_value ());
 	if (index_check (j, "column") < 0)
 	  return tree_constant ();
-	if (range_max_check (imax, j, nr, nc) < 0)
+	if (range_max_check (tree_to_mat_idx (ri.max ()), j, nr, nc) < 0)
 	  return tree_constant ();
 	retval = do_matrix_index (ri, j);
       }
       break;
     case complex_matrix_constant:
     case matrix_constant:
       {
 	Matrix mj = tmp_j.matrix_value ();
@@ -729,38 +742,43 @@ tree_constant_rep::do_matrix_index (cons
 
 	if (jv.length () == 0)
 	  {
 	    Matrix mtmp;
 	    retval = tree_constant (mtmp);
 	  }
 	else
 	  {
-	    if (range_max_check (imax, jv.max (), nr, nc) < 0)
+	    if (range_max_check (tree_to_mat_idx (ri.max ()),
+				 jv.max (), nr, nc) < 0)
 	      return tree_constant ();
 	    retval = do_matrix_index (ri, jv);
 	  }
       }
       break;
     case string_constant:
       gripe_string_invalid ();
       break;
     case range_constant:
       {
 	Range rj = tmp_j.range_value ();
 	if (nc == 2 && is_zero_one (rj))
 	  {
 	    retval = do_matrix_index (ri, 1);
 	  }
+	else if (nc == 2 && is_one_zero (rj))
+	  {
+	    retval = do_matrix_index (ri, 0);
+	  }
 	else
 	  {
-	    int jmax;
-	    if (index_check (rj, jmax, "column") < 0)
+	    if (index_check (rj, "column") < 0)
 	      return tree_constant ();
-	    if (range_max_check (imax, jmax, nr, nc) < 0)
+	    if (range_max_check (tree_to_mat_idx (ri.max ()),
+				 tree_to_mat_idx (rj.max ()), nr, nc) < 0)
 	      return tree_constant ();
 	    retval = do_matrix_index (ri, rj);
 	  }
       }
       break;
     case magic_colon:
       retval = do_matrix_index (ri, magic_colon);
       break;
@@ -824,22 +842,25 @@ tree_constant_rep::do_matrix_index (tree
       break;
     case range_constant:
       {
 	Range rj = tmp_j.range_value ();
 	if (nc == 2 && is_zero_one (rj))
 	  {
 	    retval = do_matrix_index (magic_colon, 1);
 	  }
+	else if (nc == 2 && is_one_zero (rj))
+	  {
+	    retval = do_matrix_index (magic_colon, 0);
+	  }
 	else
 	  {
-	    int jmax;
-	    if (index_check (rj, jmax, "column") < 0)
+	    if (index_check (rj, "column") < 0)
 	      return tree_constant ();
-	    if (range_max_check (0, jmax, nr, nc) < 0)
+	    if (range_max_check (0, tree_to_mat_idx (rj.max ()), nr, nc) < 0)
 	      return tree_constant ();
 	    retval = do_matrix_index (magic_colon, rj);
 	  }
       }
       break;
     case magic_colon:
       retval = do_matrix_index (magic_colon, magic_colon);
       break;
diff --git a/src/tc-inlines.h b/src/tc-inlines.h
--- a/src/tc-inlines.h
+++ b/src/tc-inlines.h
@@ -68,66 +68,63 @@ range_max_check (int i, int j, int nr, i
 
 static inline int
 indexed_assign_conforms (int lhs_nr, int lhs_nc, int rhs_nr, int rhs_nc)
 {
   return (lhs_nr == rhs_nr && lhs_nc == rhs_nc);
 }
 
 static inline int
+is_one_zero (const Range& r)
+{
+  double b = r.base ();
+  double l = r.limit ();
+  return (r.nelem () == 2 && NINT (b) == 1 && NINT (l) == 0);
+}
+
+static inline int
 is_zero_one (const Range& r)
 {
   double b = r.base ();
   double l = r.limit ();
-  return (NINT (b) == 0 && NINT (l) == 1 && r.nelem () == 2);
+  return (r.nelem () == 2 && NINT (b) == 0 && NINT (l) == 1);
 }
 
 static inline int
 index_check (int i, char *rc)
 {
   if (i < 0)
     {
       error ("invalid %s index = %d", rc, i+1);
       return -1;
     }
   return 0;
 }
 
 static inline int
-index_check (const Range& r, int& max_val, char *rc)
+index_check (const Range& r, char *rc)
 {
   if (r.nelem () < 1)
     {
       error ("range invalid as %s index", rc);
       return -1;
     }
 
-  double b = r.base ();
-  int ib = tree_to_mat_idx (b);
+  int imin = tree_to_mat_idx (r.min ());
 
-  if (ib < 0)
+  if (imin < 0)
     {
-      error ("invalid %s index = %d", rc, ib+1);
+      error ("invalid %s index = %d", rc, imin+1);
       return -1;
     }
 
-  double lim = r.limit ();
-  max_val = tree_to_mat_idx (lim);
-
   return 0;
 }
 
 static inline int
-index_check (const Range& r, char *rc)
-{
-  int max_val;
-  return index_check (r, max_val, rc);
-}
-
-static inline int
 fortran_row (int i, int nr)
 {
   int r;
   r = i % nr;
   if (r == 0)
     r = nr;
   return r;
 }
