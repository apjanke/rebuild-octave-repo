# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1444418228 14400
#      Fri Oct 09 15:17:08 2015 -0400
# Node ID 22618d5fb6ad54afa21daa926eda75efe8df4829
# Parent  e5f36a7854a55150067b5a77c784aa510ba93f70
eliminate remaining uses of error_state in parse-tree files

* oct-parse.in.yy, pt-arg-list.cc, pt-colon.cc:
Eliminate all uses of error_state.

diff --git a/libinterp/parse-tree/oct-parse.in.yy b/libinterp/parse-tree/oct-parse.in.yy
--- a/libinterp/parse-tree/oct-parse.in.yy
+++ b/libinterp/parse-tree/oct-parse.in.yy
@@ -4543,25 +4543,17 @@ the file name and the extension.\n\
     {
       print_usage ();
       return retval;
     }
 
   std::string arg;
 
   if (nargin == 1)
-    {
-      arg = args(0).string_value ();
-
-      if (error_state)
-        {
-          error ("mfilename: expecting argument to be a character string");
-          return retval;
-        }
-    }
+    arg = args(0).string_value ("mfilename: expecting argument to be a character string");
 
   std::string fname;
 
   octave_user_code *fcn = octave_call_stack::caller_user_code ();
 
   if (fcn)
     {
       fname = fcn->fcn_file_name ();
@@ -4602,32 +4594,24 @@ requiring the file to be named @file{@va
 @end deftypefn")
 {
   octave_value_list retval;
 
   int nargin = args.length ();
 
   if (nargin == 1 || nargin == 2)
     {
-      std::string file_name = args(0).string_value ();
-
-      if (! error_state)
-        {
-          std::string context;
-
-          if (nargin == 2)
-            context = args(1).string_value ();
-
-          if (! error_state)
-            source_file (file_name, context);
-          else
-            error ("source: expecting context to be character string");
-        }
-      else
-        error ("source: expecting file name as argument");
+      std::string file_name = args(0).string_value ("source: expecting file name as argument");
+
+      std::string context;
+
+      if (nargin == 2)
+        context = args(1).string_value ("source: expecting context to be character string");
+
+      source_file (file_name, context);
     }
   else
     print_usage ();
 
   return retval;
 }
 
 // Evaluate an Octave function (built-in or interpreted) and return
@@ -4796,30 +4780,24 @@ builtin (\"sin\", 0)\n\
 @end deftypefn")
 {
   octave_value_list retval;
 
   int nargin = args.length ();
 
   if (nargin > 0)
     {
-      const std::string name (args(0).string_value ());
-
-      if (! error_state)
-        {
-          octave_value fcn = symbol_table::builtin_find (name);
-
-          if (fcn.is_defined ())
-            retval = feval (fcn.function_value (), args.splice (0, 1),
-                            nargout);
-          else
-            error ("builtin: lookup for symbol '%s' failed", name.c_str ());
-        }
+      const std::string name (args(0).string_value ("builtin: function name (F) must be a string"));
+
+      octave_value fcn = symbol_table::builtin_find (name);
+
+      if (fcn.is_defined ())
+        retval = feval (fcn.function_value (), args.splice (0, 1), nargout);
       else
-        error ("builtin: function name (F) must be a string");
+        error ("builtin: lookup for symbol '%s' failed", name.c_str ());
     }
   else
     print_usage ();
 
   return retval;
 }
 
 octave_value_list
@@ -4902,23 +4880,17 @@ eval_string (const std::string& eval_str
 
   return retval;
 }
 
 static octave_value_list
 eval_string (const octave_value& arg, bool silent, int& parse_status,
              int nargout)
 {
-  std::string s = arg.string_value ();
-
-  if (error_state)
-    {
-      error ("eval: expecting std::string argument");
-      return octave_value (-1);
-    }
+  std::string s = arg.string_value ("eval: expecting std::string argument");
 
   return eval_string (s, silent, parse_status, nargout);
 }
 
 void
 cleanup_statement_list (tree_statement_list **lst)
 {
   if (*lst)
@@ -5072,45 +5044,35 @@ may be either @qcode{\"base\"} or @qcode
 @end deftypefn")
 {
   octave_value_list retval;
 
   int nargin = args.length ();
 
   if (nargin == 3)
     {
-      std::string context = args(0).string_value ();
-
-      if (! error_state)
-        {
-          unwind_protect frame;
-
-          if (context == "caller")
-            octave_call_stack::goto_caller_frame ();
-          else if (context == "base")
-            octave_call_stack::goto_base_frame ();
-          else
-            error ("assignin: CONTEXT must be \"caller\" or \"base\"");
-
-          frame.add_fcn (octave_call_stack::pop);
-
-          std::string nm = args(1).string_value ();
-
-          if (! error_state)
-            {
-              if (valid_identifier (nm))
-                symbol_table::assign (nm, args(2));
-              else
-                error ("assignin: invalid variable name in argument VARNAME");
-            }
-          else
-            error ("assignin: VARNAME must be a string");
-        }
+      std::string context = args(0).string_value ("assignin: CONTEXT must be a string");
+
+      unwind_protect frame;
+
+      if (context == "caller")
+        octave_call_stack::goto_caller_frame ();
+      else if (context == "base")
+        octave_call_stack::goto_base_frame ();
       else
-        error ("assignin: CONTEXT must be a string");
+        error ("assignin: CONTEXT must be \"caller\" or \"base\"");
+
+      frame.add_fcn (octave_call_stack::pop);
+
+      std::string nm = args(1).string_value ("assignin: VARNAME must be a string");
+
+      if (valid_identifier (nm))
+        symbol_table::assign (nm, args(2));
+      else
+        error ("assignin: invalid variable name in argument VARNAME");
     }
   else
     print_usage ();
 
   return retval;
 }
 
 DEFUN (evalin, args, nargout,
@@ -5123,79 +5085,74 @@ Like @code{eval}, except that the expres
 @end deftypefn")
 {
   octave_value_list retval;
 
   int nargin = args.length ();
 
   if (nargin > 1)
     {
-      std::string context = args(0).string_value ();
-
-      if (! error_state)
+      std::string context = args(0).string_value ("evalin: CONTEXT must be a string");
+
+      unwind_protect frame;
+
+      if (context == "caller")
+        octave_call_stack::goto_caller_frame ();
+      else if (context == "base")
+        octave_call_stack::goto_base_frame ();
+      else
+        error ("evalin: CONTEXT must be \"caller\" or \"base\"");
+
+      frame.add_fcn (octave_call_stack::pop);
+
+      if (nargin > 2)
         {
-          unwind_protect frame;
-
-          if (context == "caller")
-            octave_call_stack::goto_caller_frame ();
-          else if (context == "base")
-            octave_call_stack::goto_base_frame ();
-          else
-            error ("evalin: CONTEXT must be \"caller\" or \"base\"");
-
-          frame.add_fcn (octave_call_stack::pop);
-
-          if (nargin > 2)
-            {
-              frame.protect_var (buffer_error_messages);
-              buffer_error_messages++;
-            }
-
-          int parse_status = 0;
-
-          bool execution_error = false;
-
-          octave_value_list tmp;
-
-          try
-            {
-              tmp = eval_string (args(1), nargout > 0,
-                                 parse_status, nargout);
-            }
-          catch (const octave_execution_exception&)
-            {
-              execution_error = true;
-            }
-
-          if (nargin > 2 && (parse_status != 0 || execution_error))
-            {
-              // Set up for letting the user print any messages from
-              // errors that occurred in the first part of this eval().
-
-              buffer_error_messages--;
-
-              tmp = eval_string (args(2), nargout > 0,
-                                 parse_status, nargout);
-
-              retval = (nargout > 0) ? tmp : octave_value_list ();
-            }
-          else
-            {
-              if (nargout > 0)
-                retval = tmp;
-
-              // FIXME: we should really be rethrowing whatever
-              // exception occurred, not just throwing an
-              // execution exception.
-              if (execution_error)
-                octave_throw_execution_exception ();
-            }
+          frame.protect_var (buffer_error_messages);
+          buffer_error_messages++;
+        }
+
+      int parse_status = 0;
+
+      bool execution_error = false;
+
+      octave_value_list tmp;
+
+      try
+        {
+          tmp = eval_string (args(1), nargout > 0,
+                             parse_status, nargout);
+        }
+      catch (const octave_execution_exception&)
+        {
+          execution_error = true;
+        }
+
+      if (nargin > 2 && (parse_status != 0 || execution_error))
+        {
+          // Set up for letting the user print any messages from
+          // errors that occurred in the first part of this eval().
+
+          buffer_error_messages--;
+
+          tmp = eval_string (args(2), nargout > 0,
+                             parse_status, nargout);
+
+          retval = (nargout > 0) ? tmp : octave_value_list ();
         }
       else
-        error ("evalin: CONTEXT must be a string");
+        {
+          if (nargout > 0)
+            retval = tmp;
+
+          // FIXME: we should really be rethrowing whatever
+          // exception occurred, not just throwing an
+          // execution exception.
+          if (execution_error)
+            octave_throw_execution_exception ();
+        }
     }
   else
     print_usage ();
 
   return retval;
 }
 
 DEFUN (__parser_debug_flag__, args, nargout,
@@ -5226,17 +5183,17 @@ Undocumented internal function.\n\
 @end deftypefn")
 {
   octave_value retval;
 
   int nargin = args.length ();
 
   if (nargin == 1 || nargin == 2)
     {
-      std::string file = args(0).string_value ();
+      std::string file = args(0).string_value ("__parse_file__: expecting file name as argument");
 
       std::string full_file = octave_env::make_absolute (file);
 
       size_t file_len = file.length ();
 
       if ((file_len > 4 && file.substr (file_len-4) == ".oct")
           || (file_len > 4 && file.substr (file_len-4) == ".mex")
           || (file_len > 2 && file.substr (file_len-2) == ".m"))
@@ -5244,28 +5201,23 @@ Undocumented internal function.\n\
           file = octave_env::base_pathname (file);
           file = file.substr (0, file.find_last_of ('.'));
 
           size_t pos = file.find_last_of (file_ops::dir_sep_str ());
           if (pos != std::string::npos)
             file = file.substr (pos+1);
         }
 
-      if (! error_state)
-        {
-          if (nargin == 2)
-            octave_stdout << "parsing " << full_file << std::endl;
-
-          octave_function *fcn = parse_fcn_file (full_file, file, "", "",
-                                                 true, false, false,
-                                                 false, "__parse_file__");
-
-          if (fcn)
-            delete fcn;
-        }
-      else
-        error ("__parse_file__: expecting file name as argument");
+      if (nargin == 2)
+        octave_stdout << "parsing " << full_file << std::endl;
+
+      octave_function *fcn = parse_fcn_file (full_file, file, "", "",
+                                             true, false, false,
+                                             false, "__parse_file__");
+
+      if (fcn)
+        delete fcn;
     }
   else
     print_usage ();
 
   return retval;
 }
diff --git a/libinterp/parse-tree/pt-arg-list.cc b/libinterp/parse-tree/pt-arg-list.cc
--- a/libinterp/parse-tree/pt-arg-list.cc
+++ b/libinterp/parse-tree/pt-arg-list.cc
@@ -235,31 +235,31 @@ tree_argument_list::convert_to_const_vec
           index_position = k;
           num_indices = len;
         }
 
       tree_expression *elt = *p++;
 
       if (elt)
         {
-          octave_value tmp = elt->rvalue1 ();
-
-          if (error_state)
+          try
             {
-              error ("evaluating argument list element number %d", k+1);
-              args.clear ();
-              break;
-            }
-          else
-            {
+              octave_value tmp = elt->rvalue1 ();
+
               if (tmp.is_cs_list ())
                 args.push_back (tmp.list_value ());
               else if (tmp.is_defined ())
                 args.push_back (tmp);
             }
+          catch (const octave_execution_exception&)
+            {
+              args.clear ();
+
+              error ("evaluating argument list element number %d", k+1);
+            }
         }
       else
         {
           args.push_back (octave_value ());
           break;
         }
     }
 
diff --git a/libinterp/parse-tree/pt-colon.cc b/libinterp/parse-tree/pt-colon.cc
--- a/libinterp/parse-tree/pt-colon.cc
+++ b/libinterp/parse-tree/pt-colon.cc
@@ -85,74 +85,56 @@ tree_colon_expression::rvalue1 (int)
 {
   octave_value retval;
 
   if (! op_base || ! op_limit)
     return retval;
 
   octave_value ov_base = op_base->rvalue1 ();
 
-  if (error_state || ov_base.is_undefined ())
-    eval_error ("invalid base value in colon expression");
-  else
-    {
-      octave_value ov_limit = op_limit->rvalue1 ();
+  octave_value ov_limit = op_limit->rvalue1 ();
 
-      if (error_state || ov_limit.is_undefined ())
-        eval_error ("invalid limit value in colon expression");
-      else if (ov_base.is_object () || ov_limit.is_object ())
-        {
-          octave_value_list tmp1;
-
-          if (op_increment)
-            {
-              octave_value ov_increment = op_increment->rvalue1 ();
+  if (ov_base.is_object () || ov_limit.is_object ())
+    {
+      octave_value_list tmp1;
 
-              if (error_state || ov_increment.is_undefined ())
-                eval_error ("invalid increment value in colon expression");
-              else
-                {
-                  tmp1(2) = ov_limit;
-                  tmp1(1) = ov_increment;
-                  tmp1(0) = ov_base;
-                }
-            }
-          else
-            {
-              tmp1(1) = ov_limit;
-              tmp1(0) = ov_base;
-            }
+      if (op_increment)
+        {
+          octave_value ov_increment = op_increment->rvalue1 ();
 
-          octave_value fcn = symbol_table::find_function ("colon", tmp1);
-
-          if (fcn.is_defined ())
-            {
-              octave_value_list tmp2 = fcn.do_multi_index_op (1, tmp1);
-
-              if (! error_state)
-                retval = tmp2 (0);
-            }
-          else
-            error ("can not find overloaded colon function");
+          tmp1(2) = ov_limit;
+          tmp1(1) = ov_increment;
+          tmp1(0) = ov_base;
         }
       else
         {
-          octave_value ov_increment = 1.0;
+          tmp1(1) = ov_limit;
+          tmp1(0) = ov_base;
+        }
 
-          if (op_increment)
-            {
-              ov_increment = op_increment->rvalue1 ();
+      octave_value fcn = symbol_table::find_function ("colon", tmp1);
+
+      if (fcn.is_defined ())
+        {
+          octave_value_list tmp2 = fcn.do_multi_index_op (1, tmp1);
 
-              if (error_state || ov_increment.is_undefined ())
-                eval_error ("invalid increment value in colon expression");
-            }
+          retval = tmp2 (0);
+        }
+      else
+        error ("can not find overloaded colon function");
+    }
+  else
+    {
+      octave_value ov_increment = 1.0;
 
-          retval = do_colon_op (ov_base, ov_increment, ov_limit,
-                                is_for_cmd_expr ());
-        }
+      if (op_increment)
+        ov_increment = op_increment->rvalue1 ();
+
+      retval = do_colon_op (ov_base, ov_increment, ov_limit,
+                            is_for_cmd_expr ());
     }
 
   return retval;
 }
 
 void
 tree_colon_expression::eval_error (const std::string& s) const
 {
