# HG changeset patch
# User Soren Hauberg <soren@hauberg.org>
# Date 1232640676 18000
#      Thu Jan 22 11:11:16 2009 -0500
# Node ID 674d00f5e0728beed59eef5c693bac9cfeaff21e
# Parent  da95767511f557d7174cc702095c1565b58fc5da
remove variable index

diff --git a/doc/ChangeLog b/doc/ChangeLog
--- a/doc/ChangeLog
+++ b/doc/ChangeLog
@@ -1,10 +1,14 @@
-2009-01-22  Soren Hauberg  <hauberg@gmail.com>
+2009-01-22  Søren Hauberg  <hauberg@gmail.com>
 
+	* interpreter/func.txi: Put varargin and varargout in concept index.
+	* interpreter/var.txi: Put ans in concept index.
+	* interpreter/octave.texi: Don't include vr-idx.texi.
+	
         * interpreter/var.txi: Remove sections on built-in variables.
 
 2009-01-20  John W. Eaton  <jwe@octave.org>
 
 	* interpreter/system.txi (Filesystem Utilities): @DOCSTRING for
 	fstat.  Delete @DOCSTRING for lstat.  Add anchor for doc-lstat.
 
 2009-01-18  Thorsten Meyer  <thorsten.meyier@gmx.de>
diff --git a/doc/interpreter/func.txi b/doc/interpreter/func.txi
--- a/doc/interpreter/func.txi
+++ b/doc/interpreter/func.txi
@@ -334,17 +334,17 @@ along with a warning.
 @DOCSTRING(nargchk)
 
 @DOCSTRING(nargoutchk)
 
 @anchor{doc-varargin} @anchor{doc-varargout}
 @node Variable-length Argument Lists
 @section Variable-length Argument Lists
 @cindex variable-length argument lists
-@vrindex @code{varargin}
+@cindex @code{varargin}
 
 Sometimes the number of input arguments is not known when the function
 is defined.  As an example think of a function that returns the smallest
 of all its input arguments.  For example,
 
 @example
 a = smallest (1, 2, 3);
 b = smallest (1, 2, 3, 4);
@@ -418,17 +418,17 @@ print_arguments (1, "two", 3);
 @end group
 @end example
 
 @DOCSTRING(parseparams)
 
 @node Variable-length Return Lists
 @section Variable-length Return Lists
 @cindex variable-length return lists
-@vrindex @code{varargout}
+@cindex @code{varargout}
 
 It is possible to return a variable number of output arguments from a
 function using a syntax that's similar to the one used with the
 special @code{varargin} parameter name.  To let a function return a
 variable number of output arguments the special output parameter name
 @code{varargout} is used.  As with @code{varargin}, @code{varargout} is
 a cell array that will contain the requested output arguments.
 
diff --git a/doc/interpreter/octave.texi b/doc/interpreter/octave.texi
--- a/doc/interpreter/octave.texi
+++ b/doc/interpreter/octave.texi
@@ -628,13 +628,13 @@ Emacs Octave Support
 @include contrib.texi
 @include bugs.texi
 @include install.texi
 @include emacs.texi
 @c @include grammar.texi
 @include gpl.texi
 
 @include cp-idx.texi
-@include vr-idx.texi
+@c @include vr-idx.texi
 @include fn-idx.texi
 @include op-idx.texi
 
 @bye
diff --git a/doc/interpreter/var.txi b/doc/interpreter/var.txi
--- a/doc/interpreter/var.txi
+++ b/doc/interpreter/var.txi
@@ -61,16 +61,17 @@ assigned to any variable. The code @code
 to the variable @code{a}, but will not change the value of @code{ans}. However,
 the code @code{cos (pi)} will set the value of @code{ans} to -1.
 
 Variables in Octave do not have fixed types, so it is possible to first
 store a numeric value in a variable and then to later use the same name
 to hold a string value in the same program.  Variables may not be used
 before they have been given a value.  Doing so results in an error.
 
+@cindex @code{ans}
 @DOCSTRING(ans)
 
 @DOCSTRING(isvarname)
 
 @DOCSTRING(genvarname)
 
 @DOCSTRING(namelengthmax)
 
