# HG changeset patch
# User Rik <rik@octave.org>
# Date 1458858231 25200
#      Thu Mar 24 15:23:51 2016 -0700
# Node ID 8d894e463de65209790221316a675b7318ec9721
# Parent  ffbd3e86e0be6a2ff8808d124290d8566313fbf1
doc_cache_create.m: Tweak docstring, improve performance.

* doc_cache_create.m: List explicitly what will be created if no directory is
given.  Improve performance by using strncmp.  Correct typo in comment.

diff --git a/scripts/help/doc_cache_create.m b/scripts/help/doc_cache_create.m
--- a/scripts/help/doc_cache_create.m
+++ b/scripts/help/doc_cache_create.m
@@ -25,17 +25,17 @@
 ## A documentation cache is generated for all functions in @var{directory}
 ## which may be a single string or a cell array of strings.  The cache is used
 ## to speed up the function @code{lookfor}.
 ##
 ## The cache is saved in the file @var{out_file} which defaults to the value
 ## @file{doc-cache} if not given.
 ##
 ## If no directory is given (or it is the empty matrix), a cache for built-in
-## operators, etc. is generated.
+## functions, operators, and keywords is generated.
 ##
 ## @seealso{doc_cache_file, lookfor, path}
 ## @end deftypefn
 
 function doc_cache_create (out_file = "doc-cache", directory = [])
 
   ## Check input
   if (! ischar (out_file))
@@ -62,18 +62,18 @@ function doc_cache_create (out_file = "d
      save_header_format_string (["# doc-cache created by Octave " OCTAVE_VERSION], "local");
      save ("-text", out_file, "cache");
   endif
 
 endfunction
 
 function [text, first_sentence, status] = handle_function (f, text, format)
   first_sentence = "";
-  ## Skip functions that start with __ as these shouldn't be searched by lookfor
-  if (length (f) > 2 && all (f (1:2) == "_"))
+  ## Skip internal functions starting with "__"
+  if (strncmp (f, "__", 2))
     status = 1;
     return;
   endif
 
   ## Take action depending on help text format
   switch (lower (format))
     case "plain text"
       status = 0;
@@ -137,17 +137,17 @@ function cache = gen_doc_cache_in_dir (d
 
   ## create cache
   func = @(s_) create_cache (__list_functions__ (s_));
   cache = cellfun (func, directory, "UniformOutput", false);
 
   ## concatenate results
   cache = [cache{:}];
 
-  ## remove dirs form path
+  ## remove dirs from path
   if (! isempty (dirs_notpath))
     rmpath (dirs_notpath{:});
   endif
 
 endfunction
 
 function cache = gen_builtin_cache ()
   operators = __operators__ ();
