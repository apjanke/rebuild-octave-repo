# HG changeset patch
# User CarnÃ« Draug <carandraug@octave.org>
# Date 1468150615 -3600
#      Sun Jul 10 12:36:55 2016 +0100
# Node ID c88d2ecb721c9d7956ae4e915a20015b5d9fd4ae
# Parent  beac7654c86d0d772f66c25a1fb150b892fcc483
octave_value_list: template constructor to accept any sequence container.

* libinterp/octave-value/ovl.h: we support construct from a Array<octave_value>
and std::initializer_list<octave_value>.  This expands to other sequence
containers such as std::vector and std::list or anything that has a similar
interface.  Frendlier to standard library.

diff --git a/libinterp/octave-value/ovl.h b/libinterp/octave-value/ovl.h
--- a/libinterp/octave-value/ovl.h
+++ b/libinterp/octave-value/ovl.h
@@ -49,27 +49,29 @@ public:
     : data (dim_vector (1, n)), names () { }
 
   octave_value_list (octave_idx_type n, const octave_value& val)
     : data (dim_vector (1, n), val), names () { }
 
   octave_value_list (const octave_value& tc)
     : data (dim_vector (1, 1), tc), names () { }
 
-  octave_value_list (const Array<octave_value>& d)
-    : data (d.as_row ()), names () { }
-
-  octave_value_list (const std::initializer_list<octave_value>& args)
+  template<template <typename...> class OV_Container>
+  octave_value_list (const OV_Container<octave_value>& args)
     : data (dim_vector (1, args.size ())), names ()
   {
     octave_idx_type i = 0;
     for (const octave_value& x : args)
       data(i++) = x;
   }
 
+  // Shold probably be handled as a specialization of the Container template.
+  octave_value_list (const Array<octave_value>& d)
+    : data (d.as_row ()), names () { }
+
   octave_value_list (const Cell& tc)
     : data (tc.as_row ()), names () { }
 
   octave_value_list (const octave_value_list& obj)
     : data (obj.data), names (obj.names) { }
 
   // Concatenation constructor.
   octave_value_list (const std::list<octave_value_list>&);
@@ -171,16 +173,17 @@ private:
     return data(n);
   }
 
   const octave_value& elem (octave_idx_type n) const
   { return data(n); }
 
 };
 
+
 //! Construct an octave_value_list with less typing.
 /*!
   Historically, this made it easier to create an octave_value_list
   from multiple octave_value arguments.  It is no longer useful since
   octave_value_list has now a constructor accepting an initializer_list
   so all it does is save some typing.  The following are equivalent:
 
   @code{.cc}
