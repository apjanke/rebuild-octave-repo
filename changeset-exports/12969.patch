# HG changeset patch
# User Vanya Sergeev  <vsergeev@gmail.com>
# Date 1313444130 14400
#      Mon Aug 15 17:35:30 2011 -0400
# Node ID 6fc2c61660f2f606ba0488e564e435fd53777cb0
# Parent  58e46be87180bd759b09071150f68eb568e9ff54
Native multi-line text alignment.

* txt-eng-ft.cc: Support horizontal and vertical alignment of multiline text.
* txt-eng-ft.h: Ditto.

diff --git a/src/txt-eng-ft.cc b/src/txt-eng-ft.cc
--- a/src/txt-eng-ft.cc
+++ b/src/txt-eng-ft.cc
@@ -197,17 +197,18 @@ private:
 };
 
 ft_manager* ft_manager::instance = 0;
 
 // ---------------------------------------------------------------------------
 
 ft_render::ft_render (void)
     : text_processor (), face (0), bbox (1, 4, 0.0),
-      xoffset (0), yoffset (0), mode (MODE_BBOX),
+      xoffset (0), yoffset (0), multiline_halign (0), 
+      multiline_align_xoffsets(), mode (MODE_BBOX),
       red (0), green (0), blue (0)
 {
 }
 
 ft_render::~ft_render (void)
 {
   if (face)
     FT_Done_Face (face);
@@ -265,20 +266,26 @@ ft_render::set_mode (int m)
     }
 }
 
 void
 ft_render::visit (text_element_string& e)
 {
   if (face)
     {
+      int line_index = 0;
       FT_UInt box_line_width = 0;
       std::string str = e.string_value ();
       FT_UInt glyph_index, previous = 0;
 
+      if (mode == MODE_BBOX)
+        multiline_align_xoffsets.clear();
+      else if (mode == MODE_RENDER)
+        xoffset += multiline_align_xoffsets[line_index];
+
       for (size_t i = 0; i < str.length (); i++)
         {
           glyph_index = FT_Get_Char_Index (face, str[i]);
 
           if (str[i] != '\n' 
               && (! glyph_index
               || FT_Load_Glyph (face, glyph_index, FT_LOAD_DEFAULT)))
             ::warning ("ft_render: skipping missing glyph for character `%c'",
@@ -292,17 +299,18 @@ ft_render::visit (text_element_string& e
                     {
                     glyph_index = FT_Get_Char_Index(face, ' ');
                     if (!glyph_index || FT_Load_Glyph (face, glyph_index, FT_LOAD_DEFAULT))
                       {
                         ::warning ("ft_render: skipping missing glyph for character ` '");
                       } 
                     else 
                       {
-                        xoffset = 0;
+                        line_index++;
+                        xoffset = multiline_align_xoffsets[line_index];
                         yoffset -= (face->size->metrics.height >> 6);
                       }
                   } 
                   else if (FT_Render_Glyph (face->glyph, FT_RENDER_MODE_NORMAL))
                     ::warning ("ft_render: unable to render glyph for character `%c'",
                                str[i]);
                   else
                     {
@@ -355,16 +363,17 @@ ft_render::visit (text_element_string& e
                       glyph_index = FT_Get_Char_Index(face, ' ');
                       if (! glyph_index
                           || FT_Load_Glyph (face, glyph_index, FT_LOAD_DEFAULT))
                       {
                         ::warning ("ft_render: skipping missing glyph for character ` '");
                       }
                     else
                       {
+                        multiline_align_xoffsets.push_back(box_line_width);
                         // Reset the pixel width for this newline, so we don't
                         // allocate a bounding box larger than the horizontal
                         // width of the multi-line
                         box_line_width = 0; 
                         bbox(1) -= (face->size->metrics.height >> 6);
                       }
                     } 
                   else 
@@ -411,16 +420,34 @@ ft_render::visit (text_element_string& e
                   break;
                 }
                 if (str[i] == '\n')
                   previous = 0;
                 else
                   previous = glyph_index;
             }
         }
+      if (mode == MODE_BBOX)
+        {
+          /* Push last the width associated with the last line */ 
+          multiline_align_xoffsets.push_back(box_line_width);
+
+          for (unsigned int i = 0; i < multiline_align_xoffsets.size(); i++)
+            {
+            /* Center align */
+            if (multiline_halign == 1) 
+              multiline_align_xoffsets[i] = (bbox(2) - multiline_align_xoffsets[i])/2;
+            /* Right align */
+            else if (multiline_halign == 2)
+              multiline_align_xoffsets[i] = (bbox(2) - multiline_align_xoffsets[i]);
+            /* Left align */
+            else 
+              multiline_align_xoffsets[i] = 0;
+            }
+        }
     }
 }
 
 void
 ft_render::reset (void)
 {
   set_mode (MODE_BBOX);
   set_color (Matrix (1, 3, 0.0));
@@ -551,16 +578,18 @@ ft_render::rotation_to_mode (double rota
 
 void
 ft_render::text_to_pixels (const std::string& txt,
                            uint8NDArray& pixels_, Matrix& box,
                            int halign, int valign, double rotation)
 {
   // FIXME: clip "rotation" between 0 and 360
   int rot_mode = rotation_to_mode (rotation);
+  
+  multiline_halign = halign;
 
   text_element *elt = text_parser_none ().parse (txt);
   pixels_ = render (elt, box, rot_mode);
   delete elt;
 
   if (pixels_.numel () == 0)
     {
       // nothing to render
diff --git a/src/txt-eng-ft.h b/src/txt-eng-ft.h
--- a/src/txt-eng-ft.h
+++ b/src/txt-eng-ft.h
@@ -20,16 +20,18 @@ along with Octave; see the file COPYING.
 
 */
 
 #if ! defined (txt_eng_ft_h)
 #define txt_eng_ft_h 1
 
 #if HAVE_FREETYPE
 
+#include <vector>
+
 #include <ft2build.h>
 #include FT_FREETYPE_H
 
 #include <dMatrix.h>
 #include <uint8NDArray.h>
 #include "txt-eng.h"
 
 class
@@ -89,15 +91,17 @@ private:
   ft_render& operator = (const ft_render&);
 
 private:
   FT_Face face;
   Matrix bbox;
   uint8NDArray pixels;
   int xoffset;
   int yoffset;
+  int multiline_halign;
+  std::vector<int> multiline_align_xoffsets;
   int mode;
   uint8_t red, green, blue;
 };
 
 #endif // HAVE_FREETYPE
 
 #endif
