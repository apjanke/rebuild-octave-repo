# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1228744589 -3600
#      Mon Dec 08 14:56:29 2008 +0100
# Node ID a762d9daa700709e67fbdfe18506a5a572cc1940
# Parent  9b20a484705611d4d8f64638de3fcbeb1b45b5cc
allow overdetermined systems in fsolve

diff --git a/scripts/optimization/__fdjac__.m b/scripts/optimization/__fdjac__.m
--- a/scripts/optimization/__fdjac__.m
+++ b/scripts/optimization/__fdjac__.m
@@ -19,17 +19,17 @@
 ## -*- texinfo -*-
 ## @deftypefn{Function File} {[@var{fval}, @var{fjac}]} =  __fdjac__ (@var{fcn}, @var{x}, @var{err})
 ## @end deftypefn
 
 function [fvec, fjac] = __fdjac__ (fcn, x, err = 0)
   err = sqrt (max (eps, err));
   fvec = fcn (x);
   fv = fvec(:);
-  h = max (abs (x(:))*err, (fv*eps)/realmax);
+  h = max (abs (x(:))*err, (norm (fv, Inf)*eps)/realmax);
   h(h == 0) = err;
   fjac = zeros (length (fv), numel (x));
   for i = 1:numel (x)
     x1 = x;
     x1(i) += h(i);
     fjac(:,i) = (fcn (x1)(:) - fv) / h(i);
   endfor
 endfunction
diff --git a/scripts/optimization/fsolve.m b/scripts/optimization/fsolve.m
--- a/scripts/optimization/fsolve.m
+++ b/scripts/optimization/fsolve.m
@@ -109,17 +109,27 @@ function [x, fvec, info, output, fjac] =
       nfev ++;
     else
       [fvec, fjac] = __fdjac__ (fcn, reshape (x, xsiz));
       nfev += 1 + length (x);
     endif
     fsiz = size (fvec);
     fvec = fvec(:);
     fn = norm (fvec);
-
+    m = length (fvec);
+    n = length (x);
+    if (m < n)
+      error ("fsolve:under", "cannot solve underdetermined systems");
+    elseif (m > n && niter == 1)
+      if (isempty (optimget (options, "TolFun")))
+	warning (["An overdetermined system cannot usually be solved exactly. ", ...
+	"Consider specifying the TolFun option."]);
+      endif
+    endif
+    
     # get QR factorization of the jacobian
     [q, r] = qr (fjac);
 
     # get column norms, use them as scaling factor
     jcn = norm (fjac, 'columns').';
     if (niter == 1)
       if (autodg)
         dg = jcn;
@@ -137,17 +147,18 @@ function [x, fvec, info, output, fjac] =
     nfail = 0;
     nsuc = 0;
     # inner loop
     while (niter <= maxiter && nfev < maxfev && ! info)
 
       qtf = q'*fvec;
 
       # get TR model (dogleg) minimizer
-      p = - __dogleg__ (r, qtf, dg, delta);
+      # in case of an overdetermined system, get lsq solution
+      p = - __dogleg__ (r(1:n,:), qtf(1:n), dg, delta);
       pn = norm (dg .* p);
 
       if (niter == 1)
         delta = min (delta, pn);
       endif
 
       fvec1 = fcn (reshape (x + p, xsiz)) (:);
       fn1 = norm (fvec1);
@@ -216,17 +227,17 @@ function [x, fvec, info, output, fjac] =
       elseif (actred > 0)
         # This one is classic. Note that we use scaled variables again, but
         # compare to scaled step, so nothing bad.
         if (pn <= tolx*xn)
           info = 2;
         # Again a classic one. It seems weird to use the same tolf for two
         # different tests, but that's what M*b manual appears to say.
         elseif (actred < tolf)
-          info = 3
+          info = 3;
         endif
       endif
 
       # criterion for recalculating jacobian 
       if (nfail == 2)
         break;
       endif
 
@@ -270,17 +281,17 @@ endfunction
 %!  retval(3) = x + y + z - 5;
 %!test
 %! x_opt = [ 0.599054;
 %! 2.395931;
 %! 2.005014 ];
 %! tol = 1.0e-5;
 %! [x, fval, info] = fsolve (@f, [ 0.5; 2.0; 2.5 ]);
 %! assert (info > 0);
-%! assert (norm (x - x_opt, 1) < tol);
+%! assert (norm (x - x_opt, Inf) < tol);
 %! assert (norm (fval) < tol);
 
 %!function retval = f (p)
 %!  x = p(1);
 %!  y = p(2);
 %!  z = p(3);
 %!  w = p(4);
 %!  retval = zeros (4, 1);
@@ -288,10 +299,30 @@ endfunction
 %!  retval(2) = 6*x - 4*y + exp (3*z + w) - 11;
 %!  retval(3) = x^4 - 4*y^2 + 6*z - 8*w - 20;
 %!  retval(4) = x^2 + 2*y^3 + z - w - 4;
 %!test
 %! x_opt = [ -0.767297326653401, 0.590671081117440, 1.47190018629642, -1.52719341133957 ];
 %! tol = 1.0e-5;
 %! [x, fval, info] = fsolve (@f, [-1, 1, 2, -1]);
 %! assert (info > 0);
-%! assert (norm (x - x_opt, 1) < tol);
+%! assert (norm (x - x_opt, Inf) < tol);
 %! assert (norm (fval) < tol);
+
+%!function retval = f (p) 
+%!  x = p(1);
+%!  y = p(2);
+%!  z = p(3);
+%!  retval = zeros (3, 1);
+%!  retval(1) = sin(x) + y**2 + log(z) - 7;
+%!  retval(2) = 3*x + 2**y -z**3 + 1;
+%!  retval(3) = x + y + z - 5;
+%!  retval(4) = x*x + y - z*log(z) - 1.36;
+%!test
+%! x_opt = [ 0.599054;
+%! 2.395931;
+%! 2.005014 ];
+%! tol = 1.0e-5;
+%! [x, fval, info] = fsolve (@f, [ 0.5; 2.0; 2.5 ], optimset ("TolFun", 1e-6));
+%! assert (info > 0);
+%! assert (norm (x - x_opt, Inf) < tol);
+%! assert (norm (fval) < tol);
+
