# HG changeset patch
# User Barbara Locsi <locsi.barbara@gmail.com>
# Date 1470781509 -3600
#      Tue Aug 09 23:25:09 2016 +0100
# Node ID 5417dad26a25df4fe354108b2a089b1dcc8568d7
# Parent  71d86e88589f72e7fc42388e1bc0fe02b13f1661
chol2inv: "inv (Y'*Y)" instead of "(inv(Y))' * inv(Y)" (bug #36437)

* liboctave/numeric/sparse-chol.cc (chol2inv): compute "inv (Y'*Y)"
instead of "(inv(Y))' * inv(Y)".

diff --git a/liboctave/numeric/sparse-chol.cc b/liboctave/numeric/sparse-chol.cc
--- a/liboctave/numeric/sparse-chol.cc
+++ b/liboctave/numeric/sparse-chol.cc
@@ -541,31 +541,33 @@ chol2inv (const chol_type& r)
 
   if (r_nr != r_nc)
     (*current_liboctave_error_handler) ("U must be a square matrix");
 
   MatrixType mattype (r);
   int typ = mattype.type (false);
   double rcond;
   octave_idx_type info;
-  chol_type rinv;
+  chol_type rtra, multip;
 
   if (typ == MatrixType::Upper)
     {
-      rinv = r.inverse (mattype, info, rcond, true, false);
-      retval = rinv.transpose () * rinv;
+      rtra = r.transpose ();
+      multip = (rtra*r);
     }
   else if (typ == MatrixType::Lower)
     {
-      rinv = r.transpose ().inverse (mattype, info, rcond, true, false);
-      retval = rinv.transpose () * rinv;
+      rtra = r.transpose ();
+      multip = (r*rtra);
     }
   else
     (*current_liboctave_error_handler) ("U must be a triangular matrix");
 
+  MatrixType mattypenew (multip);
+  retval = multip.inverse (mattypenew, info, rcond, true, false);
   return retval;
 }
 
 // SparseComplexMatrix specialization (the value for the NATURAL
 // parameter in the sparse_chol<T>::sparse_chol_rep constructor is
 // different from the default).
 
 template <>
