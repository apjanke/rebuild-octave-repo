# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1482863548 18000
#      Tue Dec 27 13:32:28 2016 -0500
# Node ID 0c12642be005ed398034d6b17689484e64a2f821
# Parent  5a8999b1c5f3ff618e8d12d177ccb316c26c67b1
use F77_INT instead of octave_idx_type for libinterp QZ function

* qz.cc: Use F77_INT instead of octave_idx_type for integer data
passed to Fortran subroutines.

diff --git a/libinterp/corefcn/qz.cc b/libinterp/corefcn/qz.cc
--- a/libinterp/corefcn/qz.cc
+++ b/libinterp/corefcn/qz.cc
@@ -52,82 +52,80 @@ along with Octave; see the file COPYING.
 #include "pager.h"
 #if defined (DEBUG) || defined (DEBUG_SORT)
 #  include "pr-output.h"
 #endif
 #include "symtab.h"
 #include "utils.h"
 #include "variables.h"
 
-typedef octave_idx_type (*sort_function) (const octave_idx_type& LSIZE,
-                                          const double& ALPHA,
-                                          const double& BETA, const double& S,
-                                          const double& P);
+typedef F77_INT (*sort_function) (const F77_INT& LSIZE,
+                                  const double& ALPHA, const double& BETA,
+                                  const double& S, const double& P);
 
 extern "C"
 {
   // Van Dooren's code (netlib.org: toms/590) for reordering
   // GEP.  Only processes Z, not Q.
   F77_RET_T
-  F77_FUNC (dsubsp, DSUBSP) (const F77_INT& NMAX,
-                             const F77_INT& N, F77_DBLE* A,
-                             F77_DBLE* B, F77_DBLE* Z, sort_function,
-                             const F77_DBLE& EPS, F77_INT& NDIM,
-                             F77_INT& FAIL, F77_INT* IND);
+  F77_FUNC (dsubsp, DSUBSP) (const F77_INT& NMAX, const F77_INT& N,
+                             F77_DBLE* A, F77_DBLE* B, F77_DBLE* Z,
+                             sort_function, const F77_DBLE& EPS,
+                             F77_INT& NDIM, F77_INT& FAIL, F77_INT* IND);
 }
 
 // fcrhp, fin, fout, folhp:
 // Routines for ordering of generalized eigenvalues.
 // Return 1 if test is passed, 0 otherwise.
 //   fin:  |lambda| < 1
 //   fout: |lambda| >= 1
 //   fcrhp: real(lambda) >= 0
 //   folhp: real(lambda) < 0
 
-static octave_idx_type
-fcrhp (const octave_idx_type& lsize, const double& alpha,
-       const double& beta, const double& s, const double&)
+static F77_INT
+fcrhp (const F77_INT& lsize, const double& alpha, const double& beta,
+       const double& s, const double&)
 {
   if (lsize == 1)
     return (alpha * beta >= 0 ? 1 : -1);
   else
     return (s >= 0 ? 1 : -1);
 }
 
-static octave_idx_type
-fin (const octave_idx_type& lsize, const double& alpha,
-     const double& beta, const double&, const double& p)
+static F77_INT
+fin (const F77_INT& lsize, const double& alpha, const double& beta,
+     const double&, const double& p)
 {
-  octave_idx_type retval;
+  F77_INT retval;
 
   if (lsize == 1)
     retval = (fabs (alpha) < fabs (beta) ? 1 : -1);
   else
     retval = (fabs (p) < 1 ? 1 : -1);
 
 #if defined (DEBUG)
   std::cout << "qz: fin: retval=" << retval << std::endl;
 #endif
 
   return retval;
 }
 
-static octave_idx_type
-folhp (const octave_idx_type& lsize, const double& alpha,
-       const double& beta, const double& s, const double&)
+static F77_INT
+folhp (const F77_INT& lsize, const double& alpha, const double& beta,
+       const double& s, const double&)
 {
   if (lsize == 1)
     return (alpha * beta < 0 ? 1 : -1);
   else
     return (s < 0 ? 1 : -1);
 }
 
-static octave_idx_type
-fout (const octave_idx_type& lsize, const double& alpha,
-      const double& beta, const double&, const double& p)
+static F77_INT
+fout (const F77_INT& lsize, const double& alpha, const double& beta,
+      const double&, const double& p)
 {
   if (lsize == 1)
     return (fabs (alpha) >= fabs (beta) ? 1 : -1);
   else
     return (fabs (p) >= 1 ? 1 : -1);
 }
 
 //FIXME: Matlab does not produce lambda as the first output argument.
@@ -282,49 +280,53 @@ compatibility with @sc{matlab}.
         }
     }
 
 #if defined (DEBUG)
   std::cout << "qz: check argument 1" << std::endl;
 #endif
 
   // Argument 1: check if it's okay dimensioned.
-  octave_idx_type nn = args(0).rows ();
+  F77_INT nn = to_f77_int (args(0).rows ());
+  F77_INT nc = to_f77_int (args(0).columns ());
 
 #if defined (DEBUG)
   std::cout << "argument 1 dimensions: ("
-            << nn << "," << args(0).columns () << ")"
+            << nn << "," << nc << ")"
             << std::endl;
 #endif
 
   octave_value_list retval;
 
   if (args(0).is_empty ())
     {
       warn_empty_arg ("qz: parameter 1; continuing");
       return octave_value_list (2, Matrix ());
     }
-  else if (args(0).columns () != nn)
+  else if (nc != nn)
     err_square_matrix_required ("qz", "A");
 
   // Argument 1: dimensions look good; get the value.
   Matrix aa;
   ComplexMatrix caa;
 
   if (args(0).is_complex_type ())
     caa = args(0).complex_matrix_value ();
   else
     aa = args(0).matrix_value ();
 
 #if defined (DEBUG)
   std::cout << "qz: check argument 2" << std::endl;
 #endif
 
   // Extract argument 2 (bb, or cbb if complex).
-  if ((nn != args(1).columns ()) || (nn != args(1).rows ()))
+  F77_INT b_nr = to_f77_int (args(1).rows ());
+  F77_INT b_nc = to_f77_int (args(1).columns ());
+
+  if (nn != b_nc || nn != b_nr)
     err_nonconformant ();
 
   Matrix bb;
   ComplexMatrix cbb;
 
   if (args(1).is_complex_type ())
     cbb = args(1).complex_matrix_value ();
   else
@@ -340,24 +342,24 @@ compatibility with @sc{matlab}.
   if (nargin == 3 && complex_case)
     error ("qz: cannot re-order complex qz decomposition");
 
   // First, declare variables used in both the real and complex case.
   Matrix QQ(nn,nn), ZZ(nn,nn), VR(nn,nn), VL(nn,nn);
   RowVector alphar(nn), alphai(nn), betar(nn);
   ComplexRowVector xalpha(nn), xbeta(nn);
   ComplexMatrix CQ(nn,nn), CZ(nn,nn), CVR(nn,nn), CVL(nn,nn);
-  octave_idx_type ilo, ihi, info;
+  F77_INT ilo, ihi, info;
   char compq = (nargout >= 3 ? 'V' : 'N');
   char compz = ((nargout >= 4 || nargin == 3)? 'V' : 'N');
 
   // Initialize Q, Z to identity if we need either of them.
   if (compq == 'V' || compz == 'V')
-    for (octave_idx_type ii = 0; ii < nn; ii++)
-      for (octave_idx_type jj = 0; jj < nn; jj++)
+    for (F77_INT ii = 0; ii < nn; ii++)
+      for (F77_INT jj = 0; jj < nn; jj++)
         {
           octave_quit ();
 
           QQ(ii,jj) = ZZ(ii,jj) = (ii == jj ? 1.0 : 0.0);
         }
 
   // Always perform permutation balancing.
   const char bal_job = 'P';
@@ -655,17 +657,16 @@ compatibility with @sc{matlab}.
 
         default:
           // Invalid order option (should never happen, since we
           // checked the options at the top).
           panic_impossible ();
           break;
         }
 
-      octave_idx_type ndim, fail;
       double inf_norm;
 
       F77_XFCN (xdlange, XDLANGE,
                 (F77_CONST_CHAR_ARG2 ("I", 1),
                  nn, nn, aa.data (), nn, work.fortran_vec (), inf_norm
                  F77_CHAR_ARG_LEN (1)));
 
       double eps = std::numeric_limits<double>::epsilon () * inf_norm * nn;
@@ -685,17 +686,19 @@ compatibility with @sc{matlab}.
       octave_print_internal (std::cout, (Matrix) alphar, 0);
       std::cout << std::endl << "alphai = " << std::endl;
       octave_print_internal (std::cout, (Matrix) alphai, 0);
       std::cout << std::endl << "beta = " << std::endl;
       octave_print_internal (std::cout, (Matrix) betar, 0);
       std::cout << std::endl;
 #endif
 
-      Array<octave_idx_type> ind (dim_vector (nn, 1));
+      Array<F77_INT> ind (dim_vector (nn, 1));
+
+      F77_INT ndim, fail;
 
       F77_XFCN (dsubsp, DSUBSP,
                 (nn, nn, aa.fortran_vec (), bb.fortran_vec (),
                  ZZ.fortran_vec (), sort_test, eps, ndim, fail,
                  ind.fortran_vec ()));
 
 #if defined (DEBUG)
       std::cout << "qz: back from dsubsp: aa=" << std::endl;
@@ -706,27 +709,27 @@ compatibility with @sc{matlab}.
         {
           std::cout << std::endl << "ZZ="  << std::endl;
           octave_print_internal (std::cout, ZZ, 0);
         }
       std::cout << std::endl;
 #endif
 
       // Manually update alphar, alphai, betar.
-      static int jj;
+      static F77_INT jj;
 
       jj = 0;
       while (jj < nn)
         {
 #if defined (DEBUG_EIG)
           std::cout << "computing gen eig #" << jj << std::endl;
 #endif
 
           // Number of zeros in this block.
-          static int zcnt;
+          static F77_INT zcnt;
 
           if (jj == (nn-1))
             zcnt = 1;
           else if (aa(jj+1,jj) == 0)
             zcnt = 1;
           else zcnt = 2;
 
           if (zcnt == 1)
@@ -749,19 +752,19 @@ compatibility with @sc{matlab}.
             {
               // Complex conjugate pair.
 #if defined (DEBUG_EIG)
               std::cout << "qz: calling dlag2:" << std::endl;
               std::cout << "safmin="
                         << setiosflags (std::ios::scientific)
                         << safmin << std::endl;
 
-              for (int idr = jj; idr <= jj+1; idr++)
+              for (F77_INT idr = jj; idr <= jj+1; idr++)
                 {
-                  for (int idc = jj; idc <= jj+1; idc++)
+                  for (F77_INT idc = jj; idc <= jj+1; idc++)
                     {
                       std::cout << "aa(" << idr << "," << idc << ")="
                                 << aa(idr,idc) << std::endl;
                       std::cout << "bb(" << idr << "," << idc << ")="
                                 << bb(idr,idc) << std::endl;
                     }
                 }
 #endif
@@ -830,70 +833,70 @@ compatibility with @sc{matlab}.
 
   // Compute generalized eigenvalues?
   ComplexColumnVector gev;
 
   if (nargout < 2 || nargout == 7 || (nargin == 3 && nargout == 4))
     {
       if (complex_case)
         {
-          int cnt = 0;
+          F77_INT cnt = 0;
 
-          for (int ii = 0; ii < nn; ii++)
+          for (F77_INT ii = 0; ii < nn; ii++)
             cnt++;
 
           ComplexColumnVector tmp (cnt);
 
           cnt = 0;
-          for (int ii = 0; ii < nn; ii++)
+          for (F77_INT ii = 0; ii < nn; ii++)
             tmp(cnt++) = xalpha(ii) / xbeta(ii);
 
           gev = tmp;
         }
       else
         {
 #if defined (DEBUG)
           std::cout << "qz: computing generalized eigenvalues" << std::endl;
 #endif
 
           // Return finite generalized eigenvalues.
-          int cnt = 0;
+          F77_INT cnt = 0;
 
-          for (int ii = 0; ii < nn; ii++)
+          for (F77_INT ii = 0; ii < nn; ii++)
             if (betar(ii) != 0)
               cnt++;
 
           ComplexColumnVector tmp (cnt);
 
           cnt = 0;
-          for (int ii = 0; ii < nn; ii++)
+          for (F77_INT ii = 0; ii < nn; ii++)
             if (betar(ii) != 0)
               tmp(cnt++) = Complex(alphar(ii), alphai(ii))/betar(ii);
 
           gev = tmp;
         }
     }
 
   // Right, left eigenvector matrices.
   if (nargout >= 5)
     {
       // Which side to compute?
       char side = (nargout == 5 ? 'R' : 'B');
       // Compute all of them and backtransform
       char howmny = 'B';
       // Dummy pointer; select is not used.
-      octave_idx_type *select = 0;
+      F77_INT *select = 0;
 
       if (complex_case)
         {
           CVL = CQ;
           CVR = CZ;
           ComplexRowVector cwork2 (2 * nn);
           RowVector rwork2 (8 * nn);
-          octave_idx_type m;
+          F77_INT m;
 
           F77_XFCN (ztgevc, ZTGEVC,
                     (F77_CONST_CHAR_ARG2 (&side, 1),
                      F77_CONST_CHAR_ARG2 (&howmny, 1),
                      select, nn, F77_DBLE_CMPLX_ARG (caa.fortran_vec ()), nn,
                      F77_DBLE_CMPLX_ARG (cbb.fortran_vec ()),
                      nn, F77_DBLE_CMPLX_ARG (CVL.fortran_vec ()), nn,
                      F77_DBLE_CMPLX_ARG (CVR.fortran_vec ()), nn, nn,
@@ -904,29 +907,29 @@ compatibility with @sc{matlab}.
       else
         {
 #if defined (DEBUG)
           std::cout << "qz: computing generalized eigenvectors" << std::endl;
 #endif
 
           VL = QQ;
           VR = ZZ;
-          octave_idx_type m;
+          F77_INT m;
 
           F77_XFCN (dtgevc, DTGEVC,
                     (F77_CONST_CHAR_ARG2 (&side, 1),
                      F77_CONST_CHAR_ARG2 (&howmny, 1),
                      select, nn, aa.fortran_vec (), nn, bb.fortran_vec (),
                      nn, VL.fortran_vec (), nn, VR.fortran_vec (), nn, nn,
                      m, work.fortran_vec (), info
                      F77_CHAR_ARG_LEN (1)
                      F77_CHAR_ARG_LEN (1)));
 
           // Now construct the complex form of VV, WW.
-          int jj = 0;
+          F77_INT jj = 0;
 
           while (jj < nn)
             {
               octave_quit ();
 
               // See if real or complex eigenvalue.
 
               // Column increment; assume complex eigenvalue.
@@ -936,35 +939,35 @@ compatibility with @sc{matlab}.
                 // Single column.
                 cinc = 1;
               else if (aa(jj+1,jj) == 0)
                 cinc = 1;
 
               // Now copy the eigenvector (s) to CVR, CVL.
               if (cinc == 1)
                 {
-                  for (int ii = 0; ii < nn; ii++)
+                  for (F77_INT ii = 0; ii < nn; ii++)
                     CVR(ii,jj) = VR(ii,jj);
 
                   if (side == 'B')
-                    for (int ii = 0; ii < nn; ii++)
+                    for (F77_INT ii = 0; ii < nn; ii++)
                       CVL(ii,jj) = VL(ii,jj);
                 }
               else
                 {
                   // Double column; complex vector.
 
-                  for (int ii = 0; ii < nn; ii++)
+                  for (F77_INT ii = 0; ii < nn; ii++)
                     {
                       CVR(ii,jj) = Complex (VR(ii,jj), VR(ii,jj+1));
                       CVR(ii,jj+1) = Complex (VR(ii,jj), -VR(ii,jj+1));
                     }
 
                   if (side == 'B')
-                    for (int ii = 0; ii < nn; ii++)
+                    for (F77_INT ii = 0; ii < nn; ii++)
                       {
                         CVL(ii,jj) = Complex (VL(ii,jj), VL(ii,jj+1));
                         CVL(ii,jj+1) = Complex (VL(ii,jj), -VL(ii,jj+1));
                       }
                 }
 
               // Advance to next eigenvectors (if any).
               jj += cinc;
