# HG changeset patch
# User Rik <rik@octave.org>
# Date 1473721504 25200
#      Mon Sep 12 16:05:04 2016 -0700
# Node ID 76f2b0436423db7130074aaebb64bfd1052a6d70
# Parent  667d353d1ab82df675db29159742652511bfc115
Add -n option to print, not execute, mkoctfile commands.

* mkoctfile.in.cc: Add '-n, --just-print' option to help_msg.
* mkoctfile.in.cc(run_command): Alter function prototype to
have second argument "bool printonly = false".  If arg is true,
print command to standard out and return immediately rather
than executing cmd input in a shell.
* mkoctfile.in.cc(main): New var 'bool printonly'.  Detect
input arg '-n' or '--just-print' and set printonly to true.
Change all instances of run_command to include second argument
with printonly var.

diff --git a/src/mkoctfile.in.cc b/src/mkoctfile.in.cc
--- a/src/mkoctfile.in.cc
+++ b/src/mkoctfile.in.cc
@@ -307,16 +307,18 @@ static std::string help_msg =
 "\n"
 "  --link-stand-alone      Link a stand-alone executable file.\n"
 "\n"
 "  --mex                   Assume we are creating a MEX file.  Set the\n"
 "                          default output extension to \".mex\".\n"
 "\n"
 "  -s, --strip             Strip output file.\n"
 "\n"
+"  -n, --just-print        Print commands, but do not execute them.\n"
+"\n"
 "  -v, --verbose           Echo commands as they are executed.\n"
 "\n"
 "  FILE                    Compile or link FILE.  Recognized file types are:\n"
 "\n"
 "                            .c    C source\n"
 "                            .cc   C++ source\n"
 "                            .cp   C++ source\n"
 "                            .cpp  C++ source\n"
@@ -367,18 +369,24 @@ starts_with (const std::string& s, const
 inline bool
 ends_with (const std::string& s, const std::string& suffix)
 {
   return (s.length () >= suffix.length ()
           && s.rfind (suffix) == s.length () - suffix.length ());
 }
 
 static int
-run_command (const std::string& cmd)
+run_command (const std::string& cmd, bool printonly = false)
 {
+  if (printonly)
+    {
+      std::cout << cmd << std::endl;
+      return 0;
+    }
+
   if (debug)
     std::cout << cmd << std::endl;
 
   int result = system (cmd.c_str ());
 
   if (octave_wifexited_wrapper (result))
     result = octave_wexitstatus_wrapper (result);
 
@@ -409,16 +417,17 @@ main (int argc, char **argv)
   std::string ldflags = "";
   std::string pass_on_options = "";
   bool strip = false;
   bool no_oct_file_strip_on_this_platform = is_true ("%NO_OCT_FILE_STRIP%");
   bool link = true;
   bool link_stand_alone = false;
   std::string output_ext = ".oct";
   bool depend = false;
+  bool printonly = false;
 
   if (argc == 1)
     {
       std::cout << usage_msg << std::endl;
       return 1;
     }
 
   if (argc == 2 && (! strcmp (argv[1], "-v")
@@ -522,16 +531,20 @@ main (int argc, char **argv)
           if (i < argc-1)
             {
               arg = argv[++i];
               outputfile = arg;
             }
           else
             std::cerr << "mkoctfile: output filename missing" << std::endl;
         }
+      else if (arg == "-n" || arg == "--just-print")
+        {
+          printonly = true;
+        }
       else if (arg == "-p" || arg == "-print" || arg == "--print")
         {
           if (i < argc-1)
             {
               arg = argv[++i];
               std::cout << vars[arg] << std::endl;
               return 0;
             }
@@ -703,17 +716,17 @@ main (int argc, char **argv)
           else
             o = b + ".o";
           objfiles += (" " + o);
           std::string cmd = vars["F77"] + " -c "
                             + vars["FPICFLAG"] + " "
                             + vars["ALL_FFLAGS"] + " "
                             + incflags + " " + defs + " " + pass_on_options
                             + " " + f + " -o " + o;
-          result = run_command (cmd);
+          result = run_command (cmd, printonly);
         }
       else
         {
           std::cerr << "mkoctfile: no way to compile Fortran file " << f
                     << std::endl;
           return 1;
         }
     }
@@ -735,17 +748,17 @@ main (int argc, char **argv)
             o = b + ".o";
           objfiles += (" " + o);
           std::string cmd = vars["CC"] + " -c "
                             + vars["CPPFLAGS"] + " "
                             + vars["CPICFLAG"] + " " + vars["ALL_CFLAGS"] + " "
                             + pass_on_options + " "
                             + incflags + " " + defs + " "
                             + quote_path (f) + " -o " + quote_path (o);
-          result = run_command (cmd);
+          result = run_command (cmd, printonly);
         }
       else
         {
           std::cerr << "mkoctfile: no way to compile C file " << f
                     << std::endl;
           return 1;
         }
     }
@@ -768,17 +781,17 @@ main (int argc, char **argv)
           objfiles += (" " + o);
           std::string cmd = vars["CXX"] + " -c "
                             + vars["CPPFLAGS"] + " "
                             + vars["CXXPICFLAG"] + " "
                             + vars["ALL_CXXFLAGS"] + " "
                             + pass_on_options + " "
                             + incflags + " " + defs + " "
                             + quote_path (f) + " -o " + quote_path (o);
-          result = run_command (cmd);
+          result = run_command (cmd, printonly);
         }
       else
         {
           std::cerr << "mkoctfile: no way to compile C++ file " << f
                     << std::endl;
           return 1;
         }
     }
@@ -795,17 +808,17 @@ main (int argc, char **argv)
                                 + vars["RDYNAMIC_FLAG"] + " "
                                 + vars["ALL_LDFLAGS"] + " "
                                 + pass_on_options + " " + output_option + " "
                                 + objfiles + " " + libfiles + " "
                                 + ldflags + " " + vars["LFLAGS"]
                                 + " -loctinterp -loctave "
                                 + " " + vars["OCTAVE_LINK_OPTS"]
                                 + " " + vars["OCTAVE_LINK_DEPS"];
-              result = run_command (cmd);
+              result = run_command (cmd, printonly);
             }
           else
             {
               std::cerr
                 << "mkoctfile: no way to link stand-alone executable file"
                 << std::endl;
               return 1;
             }
@@ -817,21 +830,21 @@ main (int argc, char **argv)
                             + vars["DL_LDFLAGS"] + " "
                             + pass_on_options
                             + " -o " + octfile + " "
                             + objfiles + " " + libfiles + " "
                             + ldflags + " "
                             + vars["LFLAGS"] + " -loctinterp -loctave "
                             + vars["OCT_LINK_OPTS"] + " "
                             + vars["OCT_LINK_DEPS"];
-          result = run_command (cmd);
+          result = run_command (cmd, printonly);
         }
 
       if (strip)
         {
           std::string cmd = "strip " + octfile;
-          result = run_command (cmd);
+          result = run_command (cmd, printonly);
         }
     }
 
   return result;
 }
 
