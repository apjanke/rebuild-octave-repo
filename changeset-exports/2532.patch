# HG changeset patch
# User jwe
# Date 848427381 0
#      Tue Nov 19 18:16:21 1996 +0000
# Node ID 0e5eb97cb1378c06e31b3c809d2ca068382936a5
# Parent  d21eb2d6e135d80ee12246264fe16a0882b755d2
[project @ 1996-11-19 18:13:48 by jwe]

diff --git a/src/help.cc b/src/help.cc
--- a/src/help.cc
+++ b/src/help.cc
@@ -719,36 +719,46 @@ DEFUN_TEXT (type, args, nargout,
   "type NAME ...]\n\
 \n\
 display the definition of each NAME that refers to a function")
 {
   octave_value_list retval;
 
   begin_unwind_frame ("Ftype");
 
-  unwind_protect_str (Vps4);
-  Vps4 = "";
-
   int argc = args.length () + 1;
 
   string_vector argv = args.make_argv ("type");
 
   if (error_state)
     return retval;
 
   if (argc > 1)
     {
       // XXX FIXME XXX -- we should really use getopt ()
 
-      int quiet = 0;
-      int idx = 1;
-      if (argv[idx] == "-q")
+      bool quiet = false;
+      bool pr_orig_txt = true;
+
+      int idx;
+
+      for (idx = 1; idx < argc; idx++)
 	{
-	  quiet = 1;
-	  idx++;
+	  if (argv[idx] == "-q" || argv[idx] == "-quiet")
+	    quiet = true;
+	  else if (argv[idx] == "-t" || argv[idx] == "-transformed")
+	    pr_orig_txt = false;
+	  else
+	    break;
+	}
+
+      if (idx == argc)
+	{
+	  print_usage ("type");
+	  return retval;
 	}
 
       ostrstream output_buf;
 
       for (int i = idx; i < argc; i++)
 	{
 	  string id = argv[i];
 	  string elts;
@@ -770,17 +780,17 @@ display the definition of each NAME that
 	    {
 	      if (sym_rec->is_user_function ())
 		{
 		  tree_fvc *defn = sym_rec->def ();
 
 		  if (nargout == 0 && ! quiet)
 		    output_buf << argv[i] << " is a user-defined function\n";
 
-		  tree_print_code tpc (output_buf);
+		  tree_print_code tpc (output_buf, "", pr_orig_txt);
 
 		  defn->accept (tpc);
 		}
 
 	      // XXX FIXME XXX -- this code should be shared with
 	      // Fwhich.
 
 	      else if (sym_rec->is_text_function ())
@@ -826,17 +836,17 @@ display the definition of each NAME that
 			      << "' has no member `" << elts << "'\n";
 			  else
 			    output_buf << "type: `" << id
 			      << "' has unknown type!";
 			}
 		    }
 		  if (! tmp->is_map ())
 		    {
-		      tree_print_code tpc (output_buf);
+		      tree_print_code tpc (output_buf, "", pr_orig_txt);
 
 		      tmp->accept (tpc);
 
 		      if (nargout == 0)
 			output_buf << "\n";
 		    }
 		}
 	      else
@@ -855,18 +865,16 @@ display the definition of each NAME that
       else
 	retval = s;
 
       delete [] s;
     }
   else
     print_usage ("type");
 
-  run_unwind_frame ("Ftype");
-
   return retval;
 }
 
 DEFUN_TEXT (which, args, nargout,
   "which NAME ...\n\
 \n\
 display the type of each NAME.  If NAME is defined from an function\n\
 file, print the full name of the file.")
diff --git a/src/pt-const.cc b/src/pt-const.cc
--- a/src/pt-const.cc
+++ b/src/pt-const.cc
@@ -71,16 +71,25 @@ tree_constant::map_value (void) const
   return val.map_value ();
 }
 
 void
 tree_constant::print (void)
 {
 }
 
+void
+tree_constant::print (ostream& os, bool pr_as_read_syntax, bool pr_orig_text)
+{
+  if (pr_orig_text && ! orig_text.empty ())
+    os << orig_text;
+  else
+    val.print (os, pr_as_read_syntax);
+}
+
 octave_value
 tree_constant::eval (bool print_result)
 {
   if (print_result)
     val.print ();
 
   return val;
 }
@@ -110,16 +119,28 @@ octave_value
 tree_constant::lookup_map_element (SLList<string>&, bool, bool)
 {
   octave_value retval;
   error ("tree_constant::lookup_map_element() not implemented");
   return retval;
 }
 
 void
+tree_constant::stash_original_text (const string& s)
+{
+  orig_text = s;
+}
+
+string
+tree_constant::original_text (void) const
+{
+  return orig_text;
+}
+
+void
 tree_constant::accept (tree_walker& tw)
 {
   tw.visit_constant (*this);
 }
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
diff --git a/src/pt-const.h b/src/pt-const.h
--- a/src/pt-const.h
+++ b/src/pt-const.h
@@ -276,22 +276,22 @@ public:
     { return val.string_value (); }
 
   Range range_value (void) const
     { return val.range_value (); }
 
   Octave_map map_value (void) const;
 
   octave_value lookup_map_element (const string& ref,
-				    bool insert = false,
-				    bool silent = false);
+				   bool insert = false,
+				   bool silent = false);
 
   octave_value lookup_map_element (SLList<string>& list,
-				    bool insert = false,
-				    bool silent = false);
+				   bool insert = false,
+				   bool silent = false);
 
   ColumnVector vector_value (bool /* frc_str_conv */ = false,
 			     bool /* frc_vec_conv */ = false) const 
     { return val.vector_value (); }
 
   ComplexColumnVector
   complex_vector_value (bool /* frc_str_conv */ = false,
 			bool /* frc_vec_conv */ = false) const
@@ -320,33 +320,33 @@ public:
 
   // Increment or decrement this constant.
 
   void increment (void) { val.increment (); }
 
   void decrement (void) { val.decrement (); }
 
   void print (void);
-  void print (ostream& os, bool pr_as_read_syntax = false)
-    { val.print (os, pr_as_read_syntax); }
+  void print (ostream& os, bool pr_as_read_syntax = false,
+	      bool pr_orig_txt = true);
 
   void print_with_name (const string& name, bool print_padding = true);
   void print_with_name (ostream& os, const string& name,
 			bool print_padding = true);
 
   octave_value eval (bool print_result);
 
   octave_value_list eval (bool, int, const octave_value_list&);
 
   // Store the original text corresponding to this constant for later
   // pretty printing.
 
-  void stash_original_text (const string& s) { orig_text = s; }
+  void stash_original_text (const string& s);
 
-  string original_text (void) { return orig_text; }
+  string original_text (void) const;
 
   void accept (tree_walker& tw);
 
   string type_name (void) const { return val.type_name (); }
 
 private:
 
   // For custom memory management.
diff --git a/src/pt-exp.h b/src/pt-exp.h
--- a/src/pt-exp.h
+++ b/src/pt-exp.h
@@ -386,18 +386,16 @@ public:
 
   ~tree_colon_expression (void)
     {
       delete op_base;
       delete op_limit;
       delete op_increment;
     }
 
-  bool is_range_constant (void) const;
-
   tree_colon_expression *chain (tree_expression *t);
 
   octave_value eval (bool print);
 
   void eval_error (const char *s);
 
   tree_expression *base (void) { return op_base; }
   tree_expression *limit (void) { return op_limit; }
