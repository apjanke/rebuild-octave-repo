# HG changeset patch
# User dbateman
# Date 1151782927 0
#      Sat Jul 01 19:42:07 2006 +0000
# Node ID 565d0cd4d9d04f69e288eb1d9006036792f9fbca
# Parent  f6ddc0ee23154ebebcc1875bdd05a04f6993426f
[project @ 2006-07-01 19:42:06 by dbateman]

diff --git a/liboctave/CSparse.cc b/liboctave/CSparse.cc
--- a/liboctave/CSparse.cc
+++ b/liboctave/CSparse.cc
@@ -745,16 +745,24 @@ SparseComplexMatrix::tinverse (MatrixTyp
 		  // iterate accross columns of input matrix
 		  for (octave_idx_type j = i+1; j < nr; j++) 
 		    {
 		      Complex v = 0.;
 		      // iterate to calculate sum
 		      octave_idx_type colXp = retval.xcidx(i);
 		      octave_idx_type colUp = cidx(j);
 		      octave_idx_type rpX, rpU;
+
+		      if (cidx(j) == cidx(j+1))
+			{
+			  (*current_liboctave_error_handler) 
+			    ("division by zero");
+			  goto inverse_singular;
+			}
+
 		      do
 			{
 			  OCTAVE_QUIT;
 			  rpX = retval.xridx(colXp);
 			  rpU = ridx(colUp);
 
 			  if (rpX < rpU) 
 			    colXp++;
@@ -764,42 +772,56 @@ SparseComplexMatrix::tinverse (MatrixTyp
 			    {
 			      v -= retval.xdata(colXp) * data(colUp);
 			      colXp++;
 			      colUp++;
 			    }
 			} while ((rpX<j) && (rpU<j) && 
 				 (colXp<cx) && (colUp<nz));
 
+
 		      // get A(m,m)
-		      colUp = cidx(j+1) - 1;
+		      if (typ == MatrixType::Upper)
+			colUp = cidx(j+1) - 1;
+		      else
+			colUp = cidx(j) - 1;
 		      Complex pivot = data(colUp);
-		      if (pivot == 0.) 
-			(*current_liboctave_error_handler) 
-			  ("division by zero");
+		      if (pivot == 0. || colUp != j) 
+			{
+			  (*current_liboctave_error_handler) 
+			    ("division by zero");
+			  goto inverse_singular;
+			}
 
 		      if (v != 0.)
 			{
 			  if (cx == nz2)
 			    {
 			      nz2 *= 2;
 			      retval.change_capacity (nz2);
 			    }
 
 			  retval.xridx(cx) = j;
 			  retval.xdata(cx) = v / pivot;
 			  cx++;
 			}
 		    }
 
 		  // get A(m,m)
-		  octave_idx_type colUp = cidx(i+1) - 1;
+		  octave_idx_type colUp;
+		  if (typ == MatrixType::Upper)
+		    colUp = cidx(i+1) - 1;
+		  else
+		    colUp = cidx(i) - 1;
 		  Complex pivot = data(colUp);
-		  if (pivot == 0.) 
-		    (*current_liboctave_error_handler) ("division by zero");
+		  if (pivot == 0. || colUp != i) 
+		    {
+		      (*current_liboctave_error_handler) ("division by zero");
+		      goto inverse_singular;
+		    }
 
 		  if (pivot != 1.0)
 		    for (octave_idx_type j = cx_colstart; j < cx; j++)
 		      retval.xdata(j) /= pivot;
 		}
 	      retval.xcidx(nr) = cx;
 	      retval.maybe_compress ();
 	    }
@@ -847,30 +869,45 @@ SparseComplexMatrix::tinverse (MatrixTyp
 		      for (octave_idx_type k = cidx(jidx); 
 			   k < cidx(jidx+1); k++)
 			{
 			  OCTAVE_QUIT;
 			  v -= work[ridx(k)] * data(k);
 			}
 
 		      // get A(m,m)
-		      Complex pivot = data(cidx(jidx+1) - 1);
+		      Complex pivot;
+		      if (typ == MatrixType::Permuted_Upper)
+			pivot = data(cidx(jidx+1) - 1);
+		      else
+			pivot = data(cidx(jidx) - 1);
 		      if (pivot == 0.) 
-			(*current_liboctave_error_handler) 
-			  ("division by zero");
+			{
+			  (*current_liboctave_error_handler) 
+			    ("division by zero");
+			  goto inverse_singular;
+			}
 
 		      work[j] = v / pivot;
 		    }
 
 		  // get A(m,m)
-		  octave_idx_type colUp = cidx(perm[iidx]+1) - 1;
-		  Complex pivot = data(colUp);
-		  if (pivot == 0.) 
-		    (*current_liboctave_error_handler) 
-		      ("division by zero");
+		  octave_idx_type colUp;
+		  if (typ == MatrixType::Permuted_Upper)
+		    colUp = cidx(perm[iidx]+1) - 1;
+		  else
+		    colUp = cidx(perm[iidx]) - 1;		  
+
+  		  Complex pivot = data(colUp);
+		  if (pivot == 0.)
+		    {
+		      (*current_liboctave_error_handler) 
+			("division by zero");
+		      goto inverse_singular;
+		    }
 
 		  octave_idx_type new_cx = cx;
 		  for (octave_idx_type j = iidx; j < nr; j++)
 		    if (work[j] != 0.0)
 		      {
 			new_cx++;
 			if (pivot != 1.0)
 			  work[j] /= pivot;
@@ -911,16 +948,19 @@ SparseComplexMatrix::tinverse (MatrixTyp
 	      rcond = 1. / ainvnorm / anorm;     
 	    }
 	}
       else
 	(*current_liboctave_error_handler) ("incorrect matrix type");
     }
 
   return retval;
+
+ inverse_singular:
+  return SparseComplexMatrix();
 }
 
 SparseComplexMatrix
 SparseComplexMatrix::inverse (MatrixType& mattype, octave_idx_type& info, 
 			      double& rcond, int, int calc_cond) const
 {
   int typ = mattype.type (false);
   SparseComplexMatrix ret;
diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,17 @@
+2006-07-01  David Bateman  <dbateman@free.fr>
+
+	* dSparse.cc (tinverse): Check for rows with no elements and zero
+	elements on the diagonal. Allow both Upper and Lower triangular
+	matrices to be treated.
+	* CSparse.cc (tinverse): ditto.
+	* Sparse-op-defs.h (SPARSE_SPARSE_MUL): Take into account 64-bit
+	constant assignment.
+	
 2006-06-30  John W. Eaton  <jwe@octave.org>
 
 	* lo-sysdep.cc (octave_chdir): Perform tilde expansion here.
 	* cmd-edit.cc (editor::read_init_file): Ditto.
 	* dir-ops.cc (dir_entry::open): Ditto.
 	* file-stat.cc (stat::update_internal): Ditto.
 	* cmd-hist.cc (command_history::set_file): Ditto.
 
diff --git a/liboctave/Sparse-op-defs.h b/liboctave/Sparse-op-defs.h
--- a/liboctave/Sparse-op-defs.h
+++ b/liboctave/Sparse-op-defs.h
@@ -1543,17 +1543,17 @@ Boston, MA 02110-1301, USA.
   if (nc != a_nr) \
     { \
       gripe_nonconformant ("operator *", nr, nc, a_nr, a_nc); \
       return RET_TYPE (); \
     } \
   else \
     { \
       OCTAVE_LOCAL_BUFFER (octave_idx_type, w, nr); \
-      RET_TYPE retval (nr, a_nc, 0); \
+      RET_TYPE retval (nr, a_nc, static_cast<octave_idx_type> (0)); \
       for (octave_idx_type i = 0; i < nr; i++) \
 	w[i] = 0; \
       retval.xcidx(0) = 0; \
       \
       octave_idx_type nel = 0; \
       \
       for (octave_idx_type i = 0; i < a_nc; i++) \
         { \
diff --git a/liboctave/dSparse.cc b/liboctave/dSparse.cc
--- a/liboctave/dSparse.cc
+++ b/liboctave/dSparse.cc
@@ -822,16 +822,24 @@ SparseMatrix::tinverse (MatrixType &matt
 		  // iterate accross columns of input matrix
 		  for (octave_idx_type j = i+1; j < nr; j++) 
 		    {
 		      double v = 0.;
 		      // iterate to calculate sum
 		      octave_idx_type colXp = retval.xcidx(i);
 		      octave_idx_type colUp = cidx(j);
 		      octave_idx_type rpX, rpU;
+
+		      if (cidx(j) == cidx(j+1))
+			{
+			  (*current_liboctave_error_handler) 
+			    ("division by zero");
+			  goto inverse_singular;
+			}
+
 		      do
 			{
 			  OCTAVE_QUIT;
 			  rpX = retval.xridx(colXp);
 			  rpU = ridx(colUp);
 
 			  if (rpX < rpU) 
 			    colXp++;
@@ -842,41 +850,54 @@ SparseMatrix::tinverse (MatrixType &matt
 			      v -= retval.xdata(colXp) * data(colUp);
 			      colXp++;
 			      colUp++;
 			    }
 			} while ((rpX<j) && (rpU<j) && 
 				 (colXp<cx) && (colUp<nz));
 
 		      // get A(m,m)
-		      colUp = cidx(j+1) - 1;
+		      if (typ == MatrixType::Upper)
+			colUp = cidx(j+1) - 1;
+		      else
+			colUp = cidx(j) - 1;
 		      double pivot = data(colUp);
-		      if (pivot == 0.) 
-			(*current_liboctave_error_handler) 
-			  ("division by zero");
+		      if (pivot == 0. || colUp != j) 
+			{
+			  (*current_liboctave_error_handler) 
+			    ("division by zero");
+			  goto inverse_singular;
+			}
 
 		      if (v != 0.)
 			{
 			  if (cx == nz2)
 			    {
 			      nz2 *= 2;
 			      retval.change_capacity (nz2);
 			    }
 
 			  retval.xridx(cx) = j;
 			  retval.xdata(cx) = v / pivot;
 			  cx++;
 			}
 		    }
 
 		  // get A(m,m)
-		  octave_idx_type colUp = cidx(i+1) - 1;
+		  octave_idx_type colUp;
+		  if (typ == MatrixType::Upper)
+		    colUp = cidx(i+1) - 1;
+		  else
+		    colUp = cidx(i) - 1;
 		  double pivot = data(colUp);
-		  if (pivot == 0.) 
-		    (*current_liboctave_error_handler) ("division by zero");
+		  if (pivot == 0. || colUp != i) 
+		    {
+		      (*current_liboctave_error_handler) ("division by zero");
+		      goto inverse_singular;
+		    }
 
 		  if (pivot != 1.0)
 		    for (octave_idx_type j = cx_colstart; j < cx; j++)
 		      retval.xdata(j) /= pivot;
 		}
 	      retval.xcidx(nr) = cx;
 	      retval.maybe_compress ();
 	    }
@@ -924,30 +945,45 @@ SparseMatrix::tinverse (MatrixType &matt
 		      for (octave_idx_type k = cidx(jidx); 
 			   k < cidx(jidx+1); k++)
 			{
 			  OCTAVE_QUIT;
 			  v -= work[ridx(k)] * data(k);
 			}
 
 		      // get A(m,m)
-		      double pivot = data(cidx(jidx+1) - 1);
+		      double pivot;
+		      if (typ == MatrixType::Permuted_Upper)
+			pivot = data(cidx(jidx+1) - 1);
+		      else
+			pivot = data(cidx(jidx) - 1);
 		      if (pivot == 0.) 
-			(*current_liboctave_error_handler) 
-			  ("division by zero");
+			{
+			  (*current_liboctave_error_handler) 
+			    ("division by zero");
+			  goto inverse_singular;
+			}
 
 		      work[j] = v / pivot;
 		    }
 
 		  // get A(m,m)
-		  octave_idx_type colUp = cidx(perm[iidx]+1) - 1;
+		  octave_idx_type colUp;
+		  if (typ == MatrixType::Permuted_Upper)
+		    colUp = cidx(perm[iidx]+1) - 1;
+		  else
+		    colUp = cidx(perm[iidx]) - 1;		  
+
 		  double pivot = data(colUp);
-		  if (pivot == 0.) 
-		    (*current_liboctave_error_handler) 
-		      ("division by zero");
+		  if (pivot == 0.)
+		    {
+		      (*current_liboctave_error_handler) 
+			("division by zero");
+		      goto inverse_singular;
+		    }
 
 		  octave_idx_type new_cx = cx;
 		  for (octave_idx_type j = iidx; j < nr; j++)
 		    if (work[j] != 0.0)
 		      {
 			new_cx++;
 			if (pivot != 1.0)
 			  work[j] /= pivot;
@@ -988,16 +1024,19 @@ SparseMatrix::tinverse (MatrixType &matt
 	      rcond = 1. / ainvnorm / anorm;     
 	    }
 	}
       else
 	(*current_liboctave_error_handler) ("incorrect matrix type");
     }
 
   return retval;
+
+ inverse_singular:
+  return SparseMatrix();
 }
 
 SparseMatrix
 SparseMatrix::inverse (MatrixType &mattype, octave_idx_type& info, 
 		       double& rcond, int, int calc_cond) const
 {
   int typ = mattype.type (false);
   SparseMatrix ret;
