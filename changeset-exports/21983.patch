# HG changeset patch
# User Robert Jenssen <robertjenssen@ozemail.com.au>
# Date 1466983580 -36000
#      Mon Jun 27 09:26:20 2016 +1000
# Node ID 9b6cdd17b929107c48a587cf9c007235d4d54336
# Parent  74257c267c8baa97e292e50542213e4d37ab3e69
Fix inconsistent definitions of cpotrf, dpotrf, spotrf, and zpotrf (bug #48320)

* EIG.cc: Drop extraneous length parameter from definitions of dpotrf and
zpotrf.  (EIG::init): Drop corresponding argument.
* fEIG.cc: Drop extraneous length parameter from definitions of spotrf and
cpotrf.  (FloatEIG::init): Drop corresponding argument.

diff --git a/liboctave/numeric/EIG.cc b/liboctave/numeric/EIG.cc
--- a/liboctave/numeric/EIG.cc
+++ b/liboctave/numeric/EIG.cc
@@ -71,25 +71,23 @@ extern "C"
                            octave_idx_type&
                            F77_CHAR_ARG_LEN_DECL
                            F77_CHAR_ARG_LEN_DECL);
 
   F77_RET_T
   F77_FUNC (dpotrf, DPOTRF) (F77_CONST_CHAR_ARG_DECL,
                              const octave_idx_type&, double*,
                              const octave_idx_type&, octave_idx_type&
-                             F77_CHAR_ARG_LEN_DECL
                              F77_CHAR_ARG_LEN_DECL);
 
   F77_RET_T
   F77_FUNC (zpotrf, ZPOTRF) (F77_CONST_CHAR_ARG_DECL,
                              const octave_idx_type&,
                              Complex*, const octave_idx_type&,
                              octave_idx_type&
-                             F77_CHAR_ARG_LEN_DECL
                              F77_CHAR_ARG_LEN_DECL);
 
   F77_RET_T
   F77_FUNC (dggev, DGGEV) (F77_CONST_CHAR_ARG_DECL,
                            F77_CONST_CHAR_ARG_DECL,
                            const octave_idx_type&,
                            double*, const octave_idx_type&,
                            double*, const octave_idx_type&,
@@ -427,17 +425,16 @@ EIG::init (const Matrix& a, const Matrix
   octave_idx_type info = 0;
 
   Matrix tmp = b;
   double *tmp_data = tmp.fortran_vec ();
 
   F77_XFCN (dpotrf, DPOTRF, (F77_CONST_CHAR_ARG2 ("L", 1),
                              n, tmp_data, n,
                              info
-                             F77_CHAR_ARG_LEN (1)
                              F77_CHAR_ARG_LEN (1)));
 
   if (a.is_symmetric () && b.is_symmetric () && info == 0)
     return symmetric_init (a, b, calc_ev);
 
   Matrix atmp = a;
   double *atmp_data = atmp.fortran_vec ();
 
@@ -610,17 +607,16 @@ EIG::init (const ComplexMatrix& a, const
   octave_idx_type info = 0;
 
   ComplexMatrix tmp = b;
   Complex*tmp_data = tmp.fortran_vec ();
 
   F77_XFCN (zpotrf, ZPOTRF, (F77_CONST_CHAR_ARG2 ("L", 1),
                              n, tmp_data, n,
                              info
-                             F77_CHAR_ARG_LEN (1)
                              F77_CHAR_ARG_LEN (1)));
 
   if (a.is_hermitian () && b.is_hermitian () && info == 0)
     return hermitian_init (a, b, calc_ev);
 
   ComplexMatrix atmp = a;
   Complex *atmp_data = atmp.fortran_vec ();
 
diff --git a/liboctave/numeric/fEIG.cc b/liboctave/numeric/fEIG.cc
--- a/liboctave/numeric/fEIG.cc
+++ b/liboctave/numeric/fEIG.cc
@@ -70,24 +70,22 @@ extern "C"
                            const octave_idx_type&, float*, octave_idx_type&
                            F77_CHAR_ARG_LEN_DECL
                            F77_CHAR_ARG_LEN_DECL);
 
   F77_RET_T
   F77_FUNC (spotrf, SPOTRF) (F77_CONST_CHAR_ARG_DECL,
                              const octave_idx_type&, float*,
                              const octave_idx_type&, octave_idx_type&
-                             F77_CHAR_ARG_LEN_DECL
                              F77_CHAR_ARG_LEN_DECL);
 
   F77_RET_T
   F77_FUNC (cpotrf, CPOTRF) (F77_CONST_CHAR_ARG_DECL,
                              const octave_idx_type&, FloatComplex*,
                              const octave_idx_type&, octave_idx_type&
-                             F77_CHAR_ARG_LEN_DECL
                              F77_CHAR_ARG_LEN_DECL);
 
   F77_RET_T
   F77_FUNC (sggev, SGGEV) (F77_CONST_CHAR_ARG_DECL,
                            F77_CONST_CHAR_ARG_DECL,
                            const octave_idx_type&, float*,
                            const octave_idx_type&, float*,
                            const octave_idx_type&, float*, float*, float*,
@@ -423,17 +421,16 @@ FloatEIG::init (const FloatMatrix& a, co
   octave_idx_type info = 0;
 
   FloatMatrix tmp = b;
   float *tmp_data = tmp.fortran_vec ();
 
   F77_XFCN (spotrf, SPOTRF, (F77_CONST_CHAR_ARG2 ("L", 1),
                              n, tmp_data, n,
                              info
-                             F77_CHAR_ARG_LEN (1)
                              F77_CHAR_ARG_LEN (1)));
 
   if (a.is_symmetric () && b.is_symmetric () && info == 0)
     return symmetric_init (a, b, calc_ev);
 
   FloatMatrix atmp = a;
   float *atmp_data = atmp.fortran_vec ();
 
@@ -607,17 +604,16 @@ FloatEIG::init (const FloatComplexMatrix
   octave_idx_type info = 0;
 
   FloatComplexMatrix tmp = b;
   FloatComplex *tmp_data = tmp.fortran_vec ();
 
   F77_XFCN (cpotrf, CPOTRF, (F77_CONST_CHAR_ARG2 ("L", 1),
                              n, tmp_data, n,
                              info
-                             F77_CHAR_ARG_LEN (1)
                              F77_CHAR_ARG_LEN (1)));
 
   if (a.is_hermitian () && b.is_hermitian () && info == 0)
     return hermitian_init (a, b, calc_ev);
 
   FloatComplexMatrix atmp = a;
   FloatComplex *atmp_data = atmp.fortran_vec ();
 
