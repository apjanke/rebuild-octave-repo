# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1331329164 18000
#      Fri Mar 09 16:39:24 2012 -0500
# Node ID 12ccdce2c2166170195b7f9739be4828cd4371db
# Parent  b50654a09ba7d93a611fac591d77b75dfe5c7376
# Parent  245963d3d6289934c4d2e7689722aa43fc582359
maint: periodic merge of stable to default

diff --git a/NEWS b/NEWS
--- a/NEWS
+++ b/NEWS
@@ -74,17 +74,17 @@ Summary of important user-visible change
       atan2
       hypot
       max
       min
       mod
       rem
       xor
 
-    additionally, since the A op= B assginment operators are equivalent
+    additionally, since the A op= B assignment operators are equivalent
     to A = A op B, the following operators are also affected:
 
       +=  -=  .+=  .-=  .*=  ./=  .\=  .^=  .**=  &=  |=
 
     See the "Broadcasting" section in the new "Vectorization and Faster
     Code Execution" chapter of the manual for more details.
 
  ** Octave now features a profiler, thanks to the work of Daniel Kraft
@@ -102,18 +102,18 @@ Summary of important user-visible change
     a comma separated list of dimensions or a dimension vector.
 
     Functions have been made Matlab-compatible with regard to special
     cases (probability on boundaries, probabilities for values outside
     distribution, etc.).  This may cause subtle changes to existing
     scripts.
 
     negative binomial function has been extended to real, non-integer
-    inputs.  The discrete_inv fucntion now returns v(1) for 0 instead of
-    NaN.  The nbincdf fucntion has been recoded to use a closed form
+    inputs.  The discrete_inv function now returns v(1) for 0 instead of
+    NaN.  The nbincdf function has been recoded to use a closed form
     solution with betainc.
 
  ** strread, textscan, and textread have been completely revamped.
 
     They now support nearly all Matlab functionality including:
 
       * Matlab-compatible whitespace and delimiter defaults
 
@@ -165,17 +165,17 @@ Summary of important user-visible change
                 Default options are "Qt Qbb Qc Qx" for 4D and higher
 
       voronoi:  No default arguments
 
  ** Date/Time functions updated.  Millisecond support with FFF format
     string now supported.
 
     datestr: Numerical formats 21, 22, 29 changed to match Matlab.
-             Now accepts cellstr inputs.
+             Now accepts cellstr input.
 
  ** The following warning IDs have been removed:
 
       Octave:associativity-change
       Octave:complex-cmp-ops
       Octave:empty-list-elements
       Octave:fortran-indexing
       Octave:precedence-change
@@ -194,17 +194,17 @@ Summary of important user-visible change
       guidata         uipanel        uitoolbar
       guihandles      uipushtool     uiwait
       uicontextmenu   uiresume       waitfor
       uicontrol       uitoggletool
 
     The uiXXX functions above are experimental.
 
     Except for uiwait and uiresume, the uiXXX functions are not
-    supported with the the FLTK+OpenGL graphics toolkit.
+    supported with the FLTK+OpenGL graphics toolkit.
 
     The gnuplot graphics toolkit does not support any of the uiXXX
     functions nor the waitfor function.
 
  ** New keyword parfor (parallel for loop) is now recognized as a valid
     keyword.  Implementation, however, is still mapped to an ordinary
     for loop.
 
@@ -238,16 +238,20 @@ Summary of important user-visible change
     release after 3.6):
 
       cut                is_duplicate_entry
       cor                polyderiv
       corrcoef           shell_cmd 
       __error_text__     studentize
       error_text         sylvester_matrix
 
+ ** The following functions have been modified for Matlab compatibility:
+
+      randperm
+
 Summary of important user-visible changes for version 3.4.3:
 -----------------------------------------------------------
 
  ** Octave 3.4.3 is a bug fixing release.
      
 Summary of important user-visible changes for version 3.4.2:
 -----------------------------------------------------------
 
diff --git a/liboctave/Array.cc b/liboctave/Array.cc
--- a/liboctave/Array.cc
+++ b/liboctave/Array.cc
@@ -2248,16 +2248,17 @@ Array<T>::nth_element (const idx_vector&
     dv.resize (dim+1, 1);
 
   octave_idx_type ns = dv(dim);
 
   octave_idx_type nn = n.length (ns);
 
   dv(dim) = std::min (nn, ns);
   dv.chop_trailing_singletons ();
+  dim = std::min (dv.length (), dim);
 
   Array<T> m (dv);
 
   if (m.numel () == 0)
     return m;
 
   sortmode mode = UNSORTED;
   octave_idx_type lo = 0;
diff --git a/liboctave/Sparse.cc b/liboctave/Sparse.cc
--- a/liboctave/Sparse.cc
+++ b/liboctave/Sparse.cc
@@ -1399,17 +1399,21 @@ Sparse<T>::index (const idx_vector& idx,
           mx_inline_sub (nz_new, retval.xridx (), ridx () + li, lb);
           retval.xcidx(1) = nz_new;
         }
       else if (idx.is_permutation (nel) && idx.is_vector ())
         {
           if (idx.is_range () && idx.increment () == -1)
             {
               retval = Sparse<T> (nr, 1, nz);
-              std::reverse_copy (ridx (), ridx () + nz, retval.ridx ());
+
+              for (octave_idx_type j = 0; j < nz; j++)
+                retval.ridx (j) = nr - ridx (nz - j - 1) - 1;
+
+              copy_or_memcpy (2, cidx (), retval.cidx ());
               std::reverse_copy (data (), data () + nz, retval.data ());
             }
           else
             {
               Array<T> tmp = array_value ();
               tmp = tmp.index (idx);
               retval = Sparse<T> (tmp);
             }
@@ -2721,16 +2725,20 @@ Sparse<T>::array_value () const
 %!test test_sparse_slice ([2 2], 21, 4);
 %!test test_sparse_slice ([2 2], 22, []);
 %!test test_sparse_slice ([2 2], 22, 1);
 %!test test_sparse_slice ([2 2], 22, 2);
 %!test test_sparse_slice ([2 2], 22, [2,2]);
 %!test test_sparse_slice ([2 2], 22, 3);
 %!test test_sparse_slice ([2 2], 22, 4);
 
+bug #35570:
+
+%!assert (speye (3,1)(3:-1:1), sparse ([0; 0; 1]))
+
 */
 
 template <class T>
 void
 Sparse<T>::print_info (std::ostream& os, const std::string& prefix) const
 {
   os << prefix << "rep address: " << rep << "\n"
      << prefix << "rep->nzmx:   " << rep->nzmx  << "\n"
diff --git a/scripts/pkg/pkg.m b/scripts/pkg/pkg.m
--- a/scripts/pkg/pkg.m
+++ b/scripts/pkg/pkg.m
@@ -1746,17 +1746,18 @@ function desc = get_description (filenam
       if (length (colon) == 0)
         disp ("skipping line");
       else
         colon = colon(1);
         keyword = tolower (strip (line(1:colon-1)));
         value = strip (line (colon+1:end));
         if (length (value) == 0)
             fclose (fid);
-            error ("the keyword %s has an empty value", desc.keywords{end});
+            error ("The keyword `%s' of the package `%s' has an empty value",
+                    keyword, desc.name);
         endif
         desc.(keyword) = value;
       endif
     endif
     line = fgetl (fid);
   endwhile
   fclose (fid);
 
diff --git a/scripts/statistics/base/median.m b/scripts/statistics/base/median.m
--- a/scripts/statistics/base/median.m
+++ b/scripts/statistics/base/median.m
@@ -97,16 +97,26 @@ endfunction
 %! assert (median (x) == median (x2) && median (x) == 3.5);
 %! assert (median (y) == median (y2) && median (y) == 4);
 %! assert (median ([x2, 2*x2]), [3.5, 7]);
 %! assert (median ([y2, 3*y2]), [4, 12]);
 
 %!assert (median (single ([1,2,3])), single (2))
 %!assert (median ([1,2,NaN;4,5,6;NaN,8,9]), [NaN, 5, NaN])
 
+%% Test multidimensional arrays (bug #35679)
+%!shared a, b, x, y
+%! rand ("seed", 2);
+%! a = rand (2,3,4,5);
+%! b = rand (3,4,6,5);
+%! x = sort (a, 4);
+%! y = sort (b, 3);
+%!assert (median (a, 4), x(:, :, :, 3));
+%!assert (median (b, 3), (y(:, :, 3, :) + y(:, :, 4, :))/2);
+
 %% Test input validation
 %!error median ()
 %!error median (1, 2, 3)
 %!error median ({1:5})
 %!error median (['A'; 'B'])
 %!error median (1, ones(2,2))
 %!error median (1, 1.5)
 %!error median (1, 0)
