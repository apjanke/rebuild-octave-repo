# HG changeset patch
# User Daniel J Sebald <daniel.sebald@ieee.org>
# Date 1469483042 14400
#      Mon Jul 25 17:44:02 2016 -0400
# Node ID 6e9f5408c0dbfa1aa1c104f1987db2d15ae6d657
# Parent  0f22502738fa1ad1c59119e0108274337847dc03
Save settings in Qt convention, delete all children in destructors (bug #45366)

* QUnixTerminalImpl.cpp (QUnixTerminalImpl::~QUnixTerminalImpl): Delete
dynamic objects pointed to by m_terminal (TerminalModel), m_kpty (KPty) and
m_terminalView (TerminalView).  (bug fix)

* files-dock-widget.cc: (files_dock_widget::~files_dock_widget): Rename to
save_settings.  Return if variable 'settings' is not valid object pointer.
(files_dock_widget::save_settings): Added.  Similar code as destructor was.
Call base class octave_dock_widget::save_settings at end of routine.

* files-dock-widget.h: (files_dock_widget::~files_dock_widget): Provide empty
destructor.
(files_dock_widget::save_settings): Added, public slot.

* find-files-dialog.cc: (find_files_dialog::~find_files_dialog): Moved most
of the code, except the statement deleting the directory iterator, to
new routine save_settings.
(find_files_dialog::save_settings): Added.  Large portion of the code that was
in the destructor.  Return immediately if variable 'settings' is not valid
object pointer.

* find-files-dialog.h: (find_files_dialog::save_settings): Added, public slot.

* history-dock-widget.cc: (history_dock_widget::~history_dock_widget): Rename
to save_settings.  Return if variable 'settings' is not valid object pointer.
(history_dock_widget::save_settings): Similar code as destructor was.  Call
base class octave_dock_widget::save_settings at end of routine.

* history-dock-widget.h: (history_dock_widget::~history_dock_widget): Provide
empty destructor.
(history_dock_widget::save_settings): Added, public slot.

* main-window.cc (main_window::prepare_to_exit): If find_files_dlg is valid,
call the object's save_settings routine.
(main_window::construct): Connect appropriate slot of all objects that must
save_settings information to the qApp aboutToQuit signal.  (Except for
find_files_dlg, see above.)  At end of this sequence, connect aboutToQuit to
the shortcut_manager and resource_manager function that deletes instance.

* octave-dock-widget.cc: (octave_dock_widget::~octave_dock_widget): Rename to
save_settings.  Return if variable 'settings' is not valid object pointer.
(octave_dock_widget::save_settings): Similar code as destructor was.

* octave-dock-widget.h: (octave_dock_widget::~octave_dock_widget): Provide
empty destructor.
(octave_dock_widget::save_settings): Added, public slot.

* octave-qt-link.cc (octave_qt_link::do_prompt_new_edit_file): Check that
'settings' pointer is valid before using.

* resource-manager.cc: Remove "singleton-cleanup.h" header reference.
(resource_manager::instance_ok): Do not add cleanup_instance to worker
thread's exit cleanup procedure.

* resource-manager.h (resource_manager::instance) Change variable to public for
connecting.
(resource_manager::cleanup_instance) Change to a public slot for connecting to
qApp aboutToQuit signal.
(resource_manager::resource_manager): Remove an unused variation of the
constructor.
(resource_manager::operator =) Removed.

* settings-dialog.cc: Add QMessageBox to header file list.
(settings_dialog::settings_dialog): If QSettings pointer settings is not valid
return immediately.
(settings_dialog::show_tab): Condition setting the current index on pointer
'settings' being valid.
(settings_dialog::write_changed_settings): Remove FIXME comment.  If the
settings are not valid, display a dialog about missing file and return.

* shortcut-manager.cc: Remove "singleton-cleanup.h" header reference.
(shortcut_manager::instance_ok): Do not add cleanup_instance to worker
thread's exit cleanup procedure.

* shortcut-manager.h (shortcut_manager::instance) Change variable to public for
connecting.
(shortcut_manager::cleanup_instance) Change to a public slot for connecting to
qApp aboutToQuit signal.
(shortcut_manager::shortcut_manager): Remove an unused variation of the
constructor.
(shortcut_manager::operator =) Removed.

* terminal-dock-widget.cc (terminal_dock_widget::~terminal_dock_widget): Added.
Delete QTerminal terminal.  (bug fix)

* terminal-dock-widget.h (terminal_dock_widget::~terminal_dock_widget): Added.

* workspace-view.cc: (workspace_view::workspace_view): Place code hunk using
QSettings pointer 'settings' within a conditional block.
(workspace_view::~workspace_view): Rename to save_settings.  Return if
variable 'settings' is not valid object pointer.
(workspace_view::save_settings): Almost same code as destructor was.  Call base
class octave_dock_widget::save_settings at end of routine.

* workspace-view.h: (workspace_view::~workspace_view): Provide empty
destructor.
(workspace_view::save_settings): Added, public slot.

diff --git a/libgui/qterminal/libqterminal/unix/QUnixTerminalImpl.cpp b/libgui/qterminal/libqterminal/unix/QUnixTerminalImpl.cpp
--- a/libgui/qterminal/libqterminal/unix/QUnixTerminalImpl.cpp
+++ b/libgui/qterminal/libqterminal/unix/QUnixTerminalImpl.cpp
@@ -109,16 +109,20 @@ void QUnixTerminalImpl::connectToPty()
 
     if(!isatty(STDERR_FILENO)) {
         qDebug("Error: stderr is not a tty.");
     }
 }
 
 QUnixTerminalImpl::~QUnixTerminalImpl()
 {
+    delete m_terminalModel;
+    delete m_kpty;
+    delete m_terminalView;
+
     // Restore stderr so that any errors at exit might appear somewhere.
     dup2 (fdstderr, STDERR_FILENO);
 
     emit destroyed();
 }
 
 void QUnixTerminalImpl::setTerminalFont(const QFont &font)
 {
diff --git a/libgui/src/files-dock-widget.cc b/libgui/src/files-dock-widget.cc
--- a/libgui/src/files-dock-widget.cc
+++ b/libgui/src/files-dock-widget.cc
@@ -267,35 +267,42 @@ files_dock_widget::files_dock_widget (QW
   _current_directory->setCompleter (completer);
 
   setFocusProxy (_current_directory);
 
   _sync_octave_dir = true;   // default, overwirtten with notice_settings ()
   _octave_dir = "";
 }
 
-files_dock_widget::~files_dock_widget ()
+void
+files_dock_widget::save_settings (void)
 {
   QSettings *settings = resource_manager::get_settings ();
+
+  if (! settings)
+    return;
+
   int sort_column = _file_tree_view->header ()->sortIndicatorSection ();
   Qt::SortOrder sort_order = _file_tree_view->header ()->sortIndicatorOrder ();
   settings->setValue ("filesdockwidget/sort_files_by_column", sort_column);
   settings->setValue ("filesdockwidget/sort_files_by_order", sort_order);
   settings->setValue ("filesdockwidget/column_state",
                       _file_tree_view->header ()->saveState ());
 
   QStringList dirs;
   for (int i=0; i< _current_directory->count (); i++)
     {
       dirs.append (_current_directory->itemText (i));
     }
   settings->setValue ("filesdockwidget/mru_dir_list", dirs);
 
   settings->sync ();
 
+  octave_dock_widget::save_settings ();
+
   if (_sig_mapper)
     delete _sig_mapper;
 }
 
 void
 files_dock_widget::item_double_clicked (const QModelIndex& index)
 {
   // Retrieve the file info associated with the model index.
diff --git a/libgui/src/files-dock-widget.h b/libgui/src/files-dock-widget.h
--- a/libgui/src/files-dock-widget.h
+++ b/libgui/src/files-dock-widget.h
@@ -47,17 +47,17 @@ along with Octave; see the file COPYING.
 class files_dock_widget : public octave_dock_widget
 {
   Q_OBJECT
 
 public:
 
   files_dock_widget (QWidget *parent = 0);
 
-  ~files_dock_widget ();
+  ~files_dock_widget (void) { }
 
 public slots:
 
   /** Slot for handling a change in directory via double click. */
   void item_double_clicked (const QModelIndex & index);
 
   /** Slot for handling the up-directory button in the toolbar. */
   void change_directory_up ();
@@ -75,16 +75,18 @@ public slots:
   void accept_directory_line_edit ();
 
   /** set the internal variable that holds the actual octave variable **/
   void update_octave_directory (const QString& dir);
 
   /** Tells the widget to react on changed settings. */
   void notice_settings (const QSettings *settings);
 
+  void save_settings (void);
+
 private slots:
 
   void headercontextmenu_requested (const QPoint& pos);
   void toggle_header (int col);
 
   /** context menu wanted */
   void contextmenu_requested (const QPoint& pos);
   /* context menu actions */
diff --git a/libgui/src/find-files-dialog.cc b/libgui/src/find-files-dialog.cc
--- a/libgui/src/find-files-dialog.cc
+++ b/libgui/src/find-files-dialog.cc
@@ -193,20 +193,24 @@ find_files_dialog::find_files_dialog (QW
   main_layout->setRowStretch (2,1);
   main_layout->addWidget (_status_bar,3,0,1,-1);
 
   setLayout (main_layout);
 
   connect (this, SIGNAL (finished (int)), this, SLOT (handle_done (int)));
 }
 
-find_files_dialog::~find_files_dialog ()
+void
+find_files_dialog::save_settings (void)
 {
   QSettings *settings = resource_manager::get_settings ();
 
+  if (! settings)
+    return;
+
   int sort_column = _file_list->horizontalHeader ()->sortIndicatorSection ();
   Qt::SortOrder sort_order
     = _file_list->horizontalHeader ()->sortIndicatorOrder ();
   settings->setValue ("findfiles/sort_files_by_column", sort_column);
   settings->setValue ("findfiles/sort_files_by_order", sort_order);
   settings->setValue ("findfiles/column_state",
                       _file_list->horizontalHeader ()->saveState ());
 
@@ -220,17 +224,20 @@ find_files_dialog::~find_files_dialog ()
 
   settings->setValue ("findfiles/contains_text", _contains_text_edit->text ());
   settings->setValue ("findfiles/check_text",
                       _contains_text_check->isChecked ());
   settings->setValue ("findfiles/content_case",
                       _content_case_check->isChecked ());
 
   settings->sync ();
+}
 
+find_files_dialog::~find_files_dialog ()
+{
   if (_dir_iterator)
     delete _dir_iterator;
 }
 
 void find_files_dialog::handle_done (int)
 {
   // make sure we stopped processing
   stop_find ();
diff --git a/libgui/src/find-files-dialog.h b/libgui/src/find-files-dialog.h
--- a/libgui/src/find-files-dialog.h
+++ b/libgui/src/find-files-dialog.h
@@ -35,16 +35,17 @@ class QCheckBox;
 class QStatusBar;
 
 class find_files_dialog : public QDialog
 {
   Q_OBJECT
 public:
   find_files_dialog (QWidget * parent=0);
   virtual ~find_files_dialog ();
+  void save_settings (void);
 
 signals:
   void file_selected (const QString &fileName);
   void dir_selected (const QString &fileName);
 
 public slots:
   void set_search_dir (const QString &dir);
 
diff --git a/libgui/src/history-dock-widget.cc b/libgui/src/history-dock-widget.cc
--- a/libgui/src/history-dock-widget.cc
+++ b/libgui/src/history-dock-widget.cc
@@ -137,30 +137,36 @@ history_dock_widget::construct ()
   QSize screen = QDesktopWidget ().screenGeometry ().size ();
   int w = screen.width ();
   QFontMetrics fm = _history_list_view->fontMetrics ();
   int h = fm.height ();
   _history_list_view->setGridSize (QSize (w,h));
   _history_list_view->setTextElideMode (Qt::ElideRight);
 }
 
-history_dock_widget::~history_dock_widget ()
+void
+history_dock_widget::save_settings (void)
 {
   QSettings *settings = resource_manager::get_settings ();
 
+  if (! settings)
+    return;
+
   settings->setValue ("history_dock_widget/filter_active",
                       _filter_checkbox->isChecked ());
   settings->setValue ("history_dock_widget/filter_shown", _filter_shown);
 
   QStringList mru;
   for (int i = 0; i < _filter->count (); i++)
     mru.append (_filter->itemText (i));
   settings->setValue ("history_dock_widget/mru_list", mru);
 
   settings->sync ();
+
+  octave_dock_widget::save_settings ();
 }
 
 void
 history_dock_widget::filter_activate (bool state)
 {
   _filter->setEnabled (state);
   _sort_filter_proxy_model.setDynamicSortFilter (state);
 
diff --git a/libgui/src/history-dock-widget.h b/libgui/src/history-dock-widget.h
--- a/libgui/src/history-dock-widget.h
+++ b/libgui/src/history-dock-widget.h
@@ -34,23 +34,24 @@ along with Octave; see the file COPYING.
 
 class history_dock_widget : public octave_dock_widget
 {
   Q_OBJECT
 
 public:
 
   history_dock_widget (QWidget *parent = 0);
-  ~history_dock_widget ();
+  ~history_dock_widget (void) { }
 
 public slots:
 
   void set_history (const QStringList& hist);
   void append_history (const QString& hist_entry);
   void clear_history (void);
+  void save_settings (void);
 
 signals:
 
   void information (const QString& message);
 
   /** Emitted, whenever the user double-clicked a command in the history. */
   void command_double_clicked (const QString& command);
 
diff --git a/libgui/src/main-window.cc b/libgui/src/main-window.cc
--- a/libgui/src/main-window.cc
+++ b/libgui/src/main-window.cc
@@ -817,16 +817,22 @@ main_window::confirm_shutdown_octave (vo
   // Awake the worker thread so that it continues shutting down (or not).
   _octave_qt_link->waitcondition.wakeAll ();
 
 }
 
 void
 main_window::prepare_to_exit (void)
 {
+  // Find files dialog is constructed dynamically, not at time of main_window
+  // construction.  Connecting it to qApp aboutToQuit signal would have
+  // caused it to run after QSettings deleted.
+  if (find_files_dlg)
+    find_files_dlg->save_settings ();
+
   write_settings ();
 }
 
 void
 main_window::exit_app (int status)
 {
   qApp->exit (status);
 }
@@ -1348,18 +1354,34 @@ main_window::construct (void)
       workspace_window->setModel (_workspace_model);
       connect (_workspace_model, SIGNAL (model_changed (void)),
                workspace_window, SLOT (handle_model_changed (void)));
 
       construct_menu_bar ();
 
       construct_tool_bar ();
 
+      // Order is important.  Deleting QSettings must be last.
+      connect (qApp, SIGNAL (aboutToQuit ()),
+               command_window, SLOT (save_settings ()));
+      connect (qApp, SIGNAL (aboutToQuit ()),
+               history_window, SLOT (save_settings ()));
+      connect (qApp, SIGNAL (aboutToQuit ()),
+               file_browser_window, SLOT (save_settings ()));
+      connect (qApp, SIGNAL (aboutToQuit ()),
+               doc_browser_window, SLOT (save_settings ()));
+      connect (qApp, SIGNAL (aboutToQuit ()),
+               workspace_window, SLOT (save_settings ()));
       connect (qApp, SIGNAL (aboutToQuit ()),
                this, SLOT (prepare_to_exit ()));
+      connect (qApp, SIGNAL (aboutToQuit ()),
+               shortcut_manager::instance, SLOT (cleanup_instance ()));
+      // QSettings are saved upon deletion (i.e., cleanup_instance)
+      connect (qApp, SIGNAL (aboutToQuit ()),
+               resource_manager::instance, SLOT (cleanup_instance ()));
 
       connect (qApp, SIGNAL (focusChanged (QWidget*, QWidget*)),
                this, SLOT(focus_changed (QWidget*, QWidget*)));
 
       connect (this, SIGNAL (settings_changed (const QSettings *)),
                this, SLOT (notice_settings (const QSettings *)));
 
       connect (this, SIGNAL (editor_focus_changed (bool)),
diff --git a/libgui/src/octave-dock-widget.cc b/libgui/src/octave-dock-widget.cc
--- a/libgui/src/octave-dock-widget.cc
+++ b/libgui/src/octave-dock-widget.cc
@@ -118,22 +118,26 @@ octave_dock_widget::octave_dock_widget (
   // undo handling
   connect (p, SIGNAL (undo_signal ()), this, SLOT (do_undo ()));
 
   installEventFilter (this);
 
   setFocusPolicy (Qt::StrongFocus);
 }
 
-octave_dock_widget::~octave_dock_widget ()
+void
+octave_dock_widget::save_settings (void)
 {
   // save state of this dock-widget
   QString name = objectName ();
   QSettings *settings = resource_manager::get_settings ();
 
+  if (! settings)
+    return;
+
   settings->beginGroup ("DockWidgets");
 
 #if defined (Q_OS_WIN32)
   if (_floating) // widget is floating (windows), save actual floating geometry
     settings->setValue (name+"_floating_geometry", geometry ());
   else           // not floating save docked (normal) geometry
 #endif
     settings->setValue (name, saveGeometry ());
diff --git a/libgui/src/octave-dock-widget.h b/libgui/src/octave-dock-widget.h
--- a/libgui/src/octave-dock-widget.h
+++ b/libgui/src/octave-dock-widget.h
@@ -32,17 +32,17 @@ along with Octave; see the file COPYING.
 
 class octave_dock_widget : public QDockWidget
 {
   Q_OBJECT
 
 public:
 
   octave_dock_widget (QWidget *p = 0);
-  virtual ~octave_dock_widget ();
+  virtual ~octave_dock_widget (void) { }
 
   virtual void connect_visibility_changed (void);
   void make_window (void);
   void make_widget (bool dock=true);
   void set_title (const QString&);
   void set_predecessor_widget (octave_dock_widget *prev_widget);
 signals:
 
@@ -79,16 +79,18 @@ public slots:
   {
   }
   void handle_settings (const QSettings*);
 
   void handle_active_dock_changed (octave_dock_widget*, octave_dock_widget*);
 
   QMainWindow *main_win () { return _parent; }
 
+  void save_settings (void);
+
 protected slots:
 
   /** Slot to steer changing visibility from outside. */
   virtual void handle_visibility_changed (bool visible)
   {
     if (visible)
       emit active_changed (true);
   }
diff --git a/libgui/src/octave-qt-link.cc b/libgui/src/octave-qt-link.cc
--- a/libgui/src/octave-qt-link.cc
+++ b/libgui/src/octave-qt-link.cc
@@ -121,17 +121,17 @@ octave_qt_link::do_edit_file (const std:
   return true;
 }
 
 bool
 octave_qt_link::do_prompt_new_edit_file (const std::string& file)
 {
   QSettings *settings = resource_manager::get_settings ();
 
-  if (settings->value ("editor/create_new_file",false).toBool ())
+  if (! settings || settings->value ("editor/create_new_file",false).toBool ())
     return true;
 
   QFileInfo file_info (QString::fromStdString (file));
   QStringList btn;
   QStringList role;
   role << "YesRole" << "RejectRole";
   btn << tr ("Create") << tr ("Cancel");
 
diff --git a/libgui/src/resource-manager.cc b/libgui/src/resource-manager.cc
--- a/libgui/src/resource-manager.cc
+++ b/libgui/src/resource-manager.cc
@@ -32,17 +32,16 @@ along with Octave; see the file COPYING.
 #include <QLibraryInfo>
 #include <QMessageBox>
 #include <QTextCodec>
 
 #include "error.h"
 #include "file-ops.h"
 #include "help.h"
 #include "oct-env.h"
-#include "singleton-cleanup.h"
 
 #include "defaults.h"
 
 #include "QTerminal.h"
 #include "workspace-model.h"
 #include "resource-manager.h"
 
 resource_manager *resource_manager::instance = 0;
@@ -131,23 +130,18 @@ resource_manager::config_translators (QT
 }
 
 bool
 resource_manager::instance_ok (void)
 {
   bool retval = true;
 
   if (! instance)
-    {
       instance = new resource_manager ();
 
-      if (instance)
-        singleton_cleanup_list::add (cleanup_instance);
-    }
-
   if (! instance)
     {
       error ("unable to create resource_manager object!");
 
       retval = false;
     }
 
   return retval;
diff --git a/libgui/src/resource-manager.h b/libgui/src/resource-manager.h
--- a/libgui/src/resource-manager.h
+++ b/libgui/src/resource-manager.h
@@ -101,27 +101,25 @@ public:
   static QString storage_class_chars (void) { return "afghip"; }
   static QStringList storage_class_names (void);
   static QList<QColor> storage_class_default_colors (void);
 
   static QString terminal_color_chars (void) { return "fbsc"; }
   static QStringList terminal_color_names (void);
   static QList<QColor> terminal_default_colors (void);
 
-private:
+  static resource_manager *instance;
 
-  static resource_manager *instance;
+public slots:
 
   static void cleanup_instance (void) { delete instance; instance = 0; }
 
-  // No copying!
+private:
 
-  resource_manager (const resource_manager&);
-
-  resource_manager& operator = (const resource_manager&);
+  // No copying!
 
   static bool instance_ok (void);
 
   QString settings_directory;
 
   QString settings_file;
 
   QSettings *settings;
diff --git a/libgui/src/settings-dialog.cc b/libgui/src/settings-dialog.cc
--- a/libgui/src/settings-dialog.cc
+++ b/libgui/src/settings-dialog.cc
@@ -29,16 +29,17 @@ along with Octave; see the file COPYING.
 #include "workspace-model.h"
 #include "settings-dialog.h"
 #include "ui-settings-dialog.h"
 #include <QDir>
 #include <QFileInfo>
 #include <QFileDialog>
 #include <QVector>
 #include <QHash>
+#include <QMessageBox>
 #include <QTextCodec>
 
 #if defined (HAVE_QSCINTILLA)
 #  include "octave-qscintilla.h"
 #  include "octave-txt-lexer.h"
 #  include <QScrollArea>
 
 #  if defined (HAVE_QSCI_QSCILEXEROCTAVE_H)
@@ -258,16 +259,25 @@ write_lexer_settings (Ui::settings_dialo
 
 settings_dialog::settings_dialog (QWidget *p, const QString& desired_tab):
   QDialog (p), ui (new Ui::settings_dialog)
 {
   ui->setupUi (this);
 
   QSettings *settings = resource_manager::get_settings ();
 
+  if (! settings)
+    {
+      QMessageBox msgBox (QMessageBox::Warning, tr ("Octave Settings"),
+                          tr ("Unable to save settings.  Missing settings "
+                              "file or unknown directory."));
+      msgBox.exec ();
+      return;
+    }
+
   // restore last geometry
   restoreGeometry (settings->value("settings/geometry").toByteArray ());
 
   // look for available language files and the actual settings
   QString qm_dir_name = resource_manager::get_gui_translation_dir ();
   QDir qm_dir (qm_dir_name);
   QFileInfoList qm_files = qm_dir.entryInfoList (QStringList ("*.qm"),
                                                  QDir::Files | QDir::Readable,
@@ -608,18 +618,19 @@ settings_dialog::~settings_dialog ()
 }
 
 void
 settings_dialog::show_tab (const QString& tab)
 {
   if (tab.isEmpty ())
     {
       QSettings *settings = resource_manager::get_settings ();
-      ui->tabWidget->setCurrentIndex (settings->value ("settings/last_tab",
-                                      0).toInt ());
+      if (settings)
+        ui->tabWidget->setCurrentIndex (settings->value ("settings/last_tab",
+                                        0).toInt ());
     }
   else
     {
       QHash <QString, QWidget*> tab_hash;
       tab_hash["editor"] = ui->tab_editor;
       tab_hash["editor_styles"] = ui->tab_editor_styles;
       ui->tabWidget->setCurrentIndex (
         ui->tabWidget->indexOf (tab_hash.value (tab)));
diff --git a/libgui/src/shortcut-manager.cc b/libgui/src/shortcut-manager.cc
--- a/libgui/src/shortcut-manager.cc
+++ b/libgui/src/shortcut-manager.cc
@@ -35,17 +35,16 @@ along with Octave; see the file COPYING.
 #include <QCheckBox>
 #include <QHeaderView>
 #include <QAction>
 #include <QFileDialog>
 
 #include "error.h"
 #include "resource-manager.h"
 #include "shortcut-manager.h"
-#include "singleton-cleanup.h"
 
 shortcut_manager *shortcut_manager::instance = 0;
 
 shortcut_manager::shortcut_manager ()
 {
   setObjectName ("Shortcut_Manager");
 
   // Mac: don't let Qt interpret CMD key ("Meta" in Qt terminology) as Ctrl
@@ -61,23 +60,18 @@ shortcut_manager::~shortcut_manager ()
 }
 
 bool
 shortcut_manager::instance_ok (void)
 {
   bool retval = true;
 
   if (! instance)
-    {
       instance = new shortcut_manager ();
 
-      if (instance)
-        singleton_cleanup_list::add (cleanup_instance);
-    }
-
   if (! instance)
     {
       error ("unable to create shortcut_manager object!");
 
       retval = false;
     }
 
   return retval;
diff --git a/libgui/src/shortcut-manager.h b/libgui/src/shortcut-manager.h
--- a/libgui/src/shortcut-manager.h
+++ b/libgui/src/shortcut-manager.h
@@ -90,38 +90,36 @@ public:
   }
 
   static void import_export (int action)
   {
     if (instance_ok ())
       instance->do_import_export (action);
   }
 
+  static shortcut_manager *instance;
+
 public slots:
 
+  static void cleanup_instance (void) { delete instance; instance = 0; }
+
 signals:
 
 protected:
 
 protected slots:
 
   void handle_double_clicked (QTreeWidgetItem*, int);
   void shortcut_dialog_finished (int);
   void shortcut_dialog_set_default ();
 
 private:
 
-  static shortcut_manager *instance;
-  static void cleanup_instance (void) { delete instance; instance = 0; }
-
   // No copying!
 
-  shortcut_manager (const shortcut_manager&);
-  shortcut_manager& operator = (const shortcut_manager&);
-
   static bool instance_ok (void);
 
   void init (QString, QString, QKeySequence);
   void do_init_data ();
   void do_write_shortcuts (QSettings *settings, bool closing);
   void do_set_shortcut (QAction *action, const QString& key);
   void do_fill_treewidget (QTreeWidget *tree_view);
   bool do_import_export (int action);
diff --git a/libgui/src/terminal-dock-widget.cc b/libgui/src/terminal-dock-widget.cc
--- a/libgui/src/terminal-dock-widget.cc
+++ b/libgui/src/terminal-dock-widget.cc
@@ -64,8 +64,14 @@ terminal_dock_widget::focus (void)
   w->raise ();
 }
 
 void
 terminal_dock_widget::terminal_interrupt (void)
 {
   emit interrupt_signal ();
 }
+
+terminal_dock_widget::~terminal_dock_widget (void)
+{
+  delete terminal;
+}
+
diff --git a/libgui/src/terminal-dock-widget.h b/libgui/src/terminal-dock-widget.h
--- a/libgui/src/terminal-dock-widget.h
+++ b/libgui/src/terminal-dock-widget.h
@@ -32,16 +32,18 @@ along with Octave; see the file COPYING.
 class terminal_dock_widget : public octave_dock_widget
 {
   Q_OBJECT
 
 public:
 
   terminal_dock_widget (QWidget *parent = 0);
 
+  ~terminal_dock_widget (void);
+
   bool has_focus (void) const;
 
   void focus (void);
 
 signals:
 
   void interrupt_signal (void);
 
diff --git a/libgui/src/workspace-view.cc b/libgui/src/workspace-view.cc
--- a/libgui/src/workspace-view.cc
+++ b/libgui/src/workspace-view.cc
@@ -87,53 +87,53 @@ workspace_view::workspace_view (QWidget 
   _filter_widget->setLayout (filter_layout);
 
   QVBoxLayout *ws_layout = new QVBoxLayout ();
   ws_layout->addWidget (_filter_widget);
   ws_layout->addWidget (view);
 
   QSettings *settings = resource_manager::get_settings ();
 
-  _filter_shown = settings->value ("workspaceview/filter_shown",true).toBool();
-  _filter_widget->setVisible (_filter_shown);
-
-  ws_layout->setMargin (2);
+  if (settings)
+    {
+      _filter_shown = settings->value ("workspaceview/filter_shown",true).toBool();
+      _filter_widget->setVisible (_filter_shown);
 
-  // Set the empty widget to have our layout.
-  widget ()->setLayout (ws_layout);
+      ws_layout->setMargin (2);
 
-  // Initialize collapse/expand state of the workspace subcategories.
+      // Set the empty widget to have our layout.
+      widget ()->setLayout (ws_layout);
+
+      // Initialize collapse/expand state of the workspace subcategories.
 
-  //enable sorting (setting column and order after model was set)
-  view->setSortingEnabled (true);
-  // Initialize column order and width of the workspace
-  view->horizontalHeader ()->restoreState (
-    settings->value ("workspaceview/column_state").toByteArray ());
-  // Set header properties for sorting
-  view->horizontalHeader ()->setClickable (true);
-  view->horizontalHeader ()->setMovable (true);
-  view->horizontalHeader ()->setSortIndicator (
-    settings->value ("workspaceview/sort_by_column",0).toInt (),
-    static_cast<Qt::SortOrder>
-    (settings->value ("workspaceview/sort_order", Qt::AscendingOrder).toUInt ())
-  );
-  view->horizontalHeader ()->setSortIndicatorShown (true);
+      //enable sorting (setting column and order after model was set)
+      view->setSortingEnabled (true);
+      // Initialize column order and width of the workspace
+      view->horizontalHeader ()->restoreState (settings->value ("workspaceview/column_state").toByteArray ());
+      // Set header properties for sorting
+      view->horizontalHeader ()->setClickable (true);
+      view->horizontalHeader ()->setMovable (true);
+      view->horizontalHeader ()->setSortIndicator (settings->value ("workspaceview/sort_by_column",0).toInt (),
+                                                   static_cast<Qt::SortOrder>
+                                                   (settings->value ("workspaceview/sort_order", Qt::AscendingOrder).toUInt ()));
+      view->horizontalHeader ()->setSortIndicatorShown (true);
 
-  view->horizontalHeader ()->setContextMenuPolicy (Qt::CustomContextMenu);
-  connect (view->horizontalHeader (),
-           SIGNAL (customContextMenuRequested (const QPoint &)),
-           this, SLOT (header_contextmenu_requested (const QPoint &)));
+      view->horizontalHeader ()->setContextMenuPolicy (Qt::CustomContextMenu);
+      connect (view->horizontalHeader (),
+               SIGNAL (customContextMenuRequested (const QPoint &)),
+               this, SLOT (header_contextmenu_requested (const QPoint &)));
 
-  // Init state of the filter
-  _filter->addItems (settings->value ("workspaceview/mru_list").toStringList ());
+      // Init state of the filter
+      _filter->addItems (settings->value ("workspaceview/mru_list").toStringList ());
 
-  bool filter_state =
-    settings->value ("workspaceview/filter_active", false).toBool ();
-  _filter_checkbox->setChecked (filter_state);
-  filter_activate (filter_state);
+      bool filter_state =
+        settings->value ("workspaceview/filter_active", false).toBool ();
+      _filter_checkbox->setChecked (filter_state);
+      filter_activate (filter_state);
+    }
 
   // Connect signals and slots.
 
   connect (_filter, SIGNAL (editTextChanged (const QString&)),
            this, SLOT (filter_update (const QString&)));
   connect (_filter_checkbox, SIGNAL (toggled (bool)),
            this, SLOT (filter_activate (bool)));
   connect (_filter->lineEdit (), SIGNAL (editingFinished ()),
@@ -141,20 +141,24 @@ workspace_view::workspace_view (QWidget 
 
   connect (view, SIGNAL (customContextMenuRequested (const QPoint&)),
            this, SLOT (contextmenu_requested (const QPoint&)));
 
   connect (this, SIGNAL (command_requested (const QString&)),
            p, SLOT (execute_command_in_terminal (const QString&)));
 }
 
-workspace_view::~workspace_view (void)
+void
+workspace_view::save_settings (void)
 {
   QSettings *settings = resource_manager::get_settings ();
 
+  if (! settings)
+    return;
+
   settings->setValue ("workspaceview/column_state",
                       view->horizontalHeader ()->saveState ());
 
   int sort_column = view->horizontalHeader ()->sortIndicatorSection ();
   Qt::SortOrder sort_order = view->horizontalHeader ()->sortIndicatorOrder ();
   settings->setValue ("workspaceview/sort_by_column", sort_column);
   settings->setValue ("workspaceview/sort_order", sort_order);
 
@@ -273,16 +277,18 @@ workspace_view::toggle_header (int col)
 
   QString key = _columns_shown_keys.at (col);
   bool shown = settings->value (key,true).toBool ();
 
   view->setColumnHidden (col + 1, shown);
 
   settings->setValue (key, ! shown);
   settings->sync ();
+
+  octave_dock_widget::save_settings ();
 }
 
 void
 workspace_view::contextmenu_requested (const QPoint& qpos)
 {
   QMenu menu (this);
 
   QModelIndex index = view->indexAt (qpos);
diff --git a/libgui/src/workspace-view.h b/libgui/src/workspace-view.h
--- a/libgui/src/workspace-view.h
+++ b/libgui/src/workspace-view.h
@@ -38,24 +38,26 @@ along with Octave; see the file COPYING.
 class workspace_view : public octave_dock_widget
 {
   Q_OBJECT
 
 public:
 
   workspace_view (QWidget *parent = 0);
 
-  ~workspace_view (void);
+  ~workspace_view (void) { }
 
 public slots:
 
   void notice_settings (const QSettings *);
 
   void setModel (workspace_model *model);
 
+  void save_settings (void);
+
 signals:
 
   /** signal that user had requested a command on a variable */
   void command_requested (const QString& cmd);
 
 protected:
 
   void closeEvent (QCloseEvent *event);
