# HG changeset patch
# User Jordi Guti√©rrez Hermoso <jordigh@octave.org>
# Date 1360164998 18000
#      Wed Feb 06 10:36:38 2013 -0500
# Node ID 1045790f9be4a33d0a23224def855e0295f13c05
# Parent  cddf9103a566d70627f71abdd3a2dfdd3f96321e
# Parent  3b3321f9db9f17563805e4f970b2003dee13ead1
Merge in Juan Pablo's changes

diff --git a/libinterp/corefcn/cellfun.cc b/libinterp/corefcn/cellfun.cc
--- a/libinterp/corefcn/cellfun.cc
+++ b/libinterp/corefcn/cellfun.cc
@@ -1136,17 +1136,18 @@ arrayfun (@@str2num, [1234],\n\
 @end deftypefn")
 {
   octave_value_list retval;
   int nargin = args.length ();
   int nargout1 = (nargout < 1 ? 1 : nargout);
 
   if (nargin < 2)
     {
-      error ("arrayfun: function requires at least 2 arguments");
+      error_with_id ("Octave:invalid-fun-call", 
+                           "arrayfun: function requires at least 2 arguments");
       print_usage ();
       return retval;
     }
 
   octave_value func = args(0);
   bool symbol_table_lookup = false;
 
   if (func.is_string ())
@@ -1167,17 +1168,18 @@ arrayfun (@@str2num, [1234],\n\
           if (ptr_func && ! error_state)
             func = octave_value (ptr_func, true);
         }
       else
         {
           func = symbol_table::find_function (name);
 
           if (func.is_undefined ())
-            error ("arrayfun: invalid function NAME: %s", name.c_str ());
+            error_with_id ("Octave:invalid-input-arg",
+                         "arrayfun: invalid function NAME: %s", name.c_str ());
 
           symbol_table_lookup = true;
         }
 
       if (error_state)
         return retval;
     }
 
@@ -1245,17 +1247,18 @@ arrayfun (@@str2num, [1234],\n\
             {
               fdims = inputs[j].dims ();
               k = inputs[j].numel ();
 
               for (int i = j+1; i < nargin; i++)
                 {
                   if (mask[i] && inputs[i].dims () != fdims)
                     {
-                      error ("arrayfun: dimensions mismatch");
+                      error_with_id ("Octave:invalid-input-arg", 
+                                              "arrayfun: dimensions mismatch");
                       return retval;
                     }
                 }
               break;
             }
         }
 
 
@@ -1292,17 +1295,18 @@ arrayfun (@@str2num, [1234],\n\
                 = get_output_list (count, nargout, inputlist, func,
                                    error_handler);
 
               if (error_state)
                 return retval;
 
               if (nargout > 0 && tmp.length () < nargout)
                 {
-                  error ("arrayfun: function returned fewer than nargout values");
+                  error_with_id ("Octave:invalid-fun-call", 
+                      "arrayfun: function returned fewer than nargout values");
                   return retval;
                 }
 
               if  (nargout > 0
                    || (nargout == 0
                        && tmp.length () > 0 && tmp(0).is_defined ()))
                 {
                   int num_to_copy = tmp.length ();
@@ -1317,17 +1321,18 @@ arrayfun (@@str2num, [1234],\n\
                           if (tmp(j).is_defined ())
                             {
                               octave_value val = tmp(j);
 
                               if (val.numel () == 1)
                                 retv[j] = val.resize (fdims);
                               else
                                 {
-                                  error ("arrayfun: all values must be scalars when UniformOutput = true");
+                                  error_with_id ("Octave:invalid-fun-call",
+             "arrayfun: all values must be scalars when UniformOutput = true");
                                   break;
                                 }
                             }
                         }
                     }
                   else
                     {
                       for (int j = 0; j < num_to_copy; j++)
@@ -1344,17 +1349,18 @@ arrayfun (@@str2num, [1234],\n\
                                       retv[j].assign (octave_value::op_asn_eq,
                                                       idx_type, idx_list, val);
 
                                       if (error_state)
                                         break;
                                     }
                                   else
                                     {
-                                      error ("arrayfun: all values must be scalars when UniformOutput = true");
+                                      error_with_id ("Octave:invalid-fun-call",
+              "arrayfun: all values must be scalars when UniformOutput = true");
                                       break;
                                     }
                                 }
                             }
                         }
                     }
                 }
 
@@ -1402,17 +1408,18 @@ arrayfun (@@str2num, [1234],\n\
                 = get_output_list (count, nargout, inputlist, func,
                                    error_handler);
 
               if (error_state)
                 return retval;
 
               if (nargout > 0 && tmp.length () < nargout)
                 {
-                  error ("arrayfun: function returned fewer than nargout values");
+                  error_with_id ("Octave:invalid-fun-call", 
+                      "arrayfun: function returned fewer than nargout values");
                   return retval;
                 }
 
               if  (nargout > 0
                    || (nargout == 0
                        && tmp.length () > 0 && tmp(0).is_defined ()))
                 {
                   int num_to_copy = tmp.length ();
@@ -1433,17 +1440,18 @@ arrayfun (@@str2num, [1234],\n\
               retval.resize (nargout1);
 
               for (int j = 0; j < nargout1; j++)
                 retval(j) = results[j];
             }
         }
     }
   else
-    error ("arrayfun: argument NAME must be a string or function handle");
+    error_with_id ("Octave:invalid-fun-call", 
+                "arrayfun: argument NAME must be a string or function handle");
 
   return retval;
 }
 
 /*
 %!function r = __f11 (x)
 %!  global __arrayfun_test_num_outputs__;
 %!  __arrayfun_test_num_outputs__ = nargout;
