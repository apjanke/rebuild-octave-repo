# HG changeset patch
# User John Donoghue <john.donoghue@ieee.org>
# Date 1365364091 14400
#      Sun Apr 07 15:48:11 2013 -0400
# Node ID 8c666c7b0e5d9825a11343bb2ee9c20fb5773448
# Parent  094bd3627eadef2a2e07413b0c8426e00ac9b84e
Added context menu to workspace variable display

* libgui/src/workspace-view.h, libgui/src/workspace-view.cc
(workspace_view::workspace_view): Connect signals for context menu.
(workspace_view::contextmenu_requested,
workspace_view::handle_contextmenu_disp,
workspace_view::handle_contextmenu_plot,
workspace_view::handle_contextmenu_stem): New slot functions.
(workspace_view::relay_contextmenu_command): New function.
(workspace_view::command_requested): New signal.

diff --git a/libgui/src/workspace-view.cc b/libgui/src/workspace-view.cc
--- a/libgui/src/workspace-view.cc
+++ b/libgui/src/workspace-view.cc
@@ -25,31 +25,33 @@ along with Octave; see the file COPYING.
 #endif
 
 #include "workspace-view.h"
 #include "resource-manager.h"
 #include <QHeaderView>
 #include <QHBoxLayout>
 #include <QVBoxLayout>
 #include <QPushButton>
+#include <QMenu>
 
 workspace_view::workspace_view (QWidget *p)
   : QDockWidget (p)
 {
   setObjectName ("WorkspaceView");
   setWindowIcon (QIcon(":/actions/icons/logo.png"));
   setWindowTitle (tr ("Workspace"));
   setStatusTip (tr ("View the variables in the active workspace."));
 
   view = new QTreeView (this);            // Create a new tree view.
   view->setHeaderHidden (false);          // Do not show header columns.
   view->setAlternatingRowColors (true);   // Activate alternating row colors.
   view->setAnimated (false);              // Deactivate animations because of strange glitches.
   view->setTextElideMode (Qt::ElideRight);// Elide text to the right side of the cells.
   view->setWordWrap (false);              // No wordwrapping in cells.
+  view->setContextMenuPolicy (Qt::CustomContextMenu);
 
   // Set an empty widget, so we can assign a layout to it.
   setWidget (new QWidget (this));
 
   // Create a new layout and add widgets to it.
   QVBoxLayout *vbox_layout = new QVBoxLayout ();
   vbox_layout->addWidget (view);
   vbox_layout->setMargin (2);
@@ -76,16 +78,22 @@ workspace_view::workspace_view (QWidget 
            this, SLOT (collapse_requested (QModelIndex)));
 
   connect (view, SIGNAL (expanded (QModelIndex)),
            this, SLOT (expand_requested (QModelIndex)));
 
   connect (view, SIGNAL (doubleClicked (QModelIndex)),
            this, SLOT (item_double_clicked (QModelIndex)));
 
+  connect (view, SIGNAL (customContextMenuRequested(const QPoint&)),
+           this, SLOT(contextmenu_requested (const QPoint&)));
+
+  connect (this, SIGNAL (command_requested (const QString&)),
+           p, SLOT (handle_command_double_clicked(const QString&)));
+
   // topLevelChanged is emitted when floating property changes (floating = true)
   connect (this, SIGNAL (topLevelChanged(bool)), this, SLOT(top_level_changed(bool)));
 
 }
 
 workspace_view::~workspace_view ()
 {
   QSettings *settings = resource_manager::get_settings ();
@@ -240,8 +248,71 @@ workspace_view::focus (void)
 
 void
 workspace_view::handle_visibility (bool visible)
 {
   // if changed to visible and widget is not floating
   if (visible && ! isFloating ())
     focus ();
 }
+
+void
+workspace_view::contextmenu_requested (const QPoint& pos)
+{
+  QMenu menu (this);
+
+  QModelIndex index = view->indexAt (pos);
+  QAbstractItemModel *m = view->model ();
+
+  // if it isnt Local, Glocal etc, allow the ctx menu
+  if (index.parent() != QModelIndex())
+    {
+      QMap<int, QVariant> item_data = m->itemData (index);
+  
+      QString var_name = item_data[0].toString ();
+
+      menu.addAction ("disp(" + var_name + ")", this,
+                      SLOT (handle_contextmenu_disp ()));
+
+      menu.addAction ("plot(" + var_name + ")", this,
+                      SLOT (handle_contextmenu_plot ()));
+
+      menu.addAction ("stem(" + var_name + ")", this,
+                      SLOT (handle_contextmenu_stem ()));
+
+      menu.exec (view->mapToGlobal (pos));
+    }
+}
+
+void
+workspace_view::handle_contextmenu_disp (void)
+{
+  relay_contextmenu_command ("disp"); 
+}
+
+void
+workspace_view::handle_contextmenu_plot (void)
+{
+  relay_contextmenu_command("figure;\nplot"); 
+}
+
+void
+workspace_view::handle_contextmenu_stem (void)
+{
+  relay_contextmenu_command ("figure;\nstem"); 
+}
+
+void
+workspace_view::relay_contextmenu_command (const QString& cmdname)
+{
+  QModelIndex index = view->currentIndex ();
+
+  if (index.parent () != QModelIndex ())
+    {
+      QAbstractItemModel *m = view->model ();
+
+      QMap<int, QVariant> item_data = m->itemData (index);
+  
+      QString var_name = item_data[0].toString ();
+
+      emit command_requested (cmdname + "(" + var_name + ")\n");
+    }
+}
diff --git a/libgui/src/workspace-view.h b/libgui/src/workspace-view.h
--- a/libgui/src/workspace-view.h
+++ b/libgui/src/workspace-view.h
@@ -54,26 +54,34 @@ public slots:
 
   void focus (void);
 
   void handle_visibility (bool visible);
 
 signals:
   /** Custom signal that tells if a user has clicke away that dock widget. */
   void active_changed (bool active);
+  /** signal that user had requested a command on a variable */
+  void command_requested (const QString& cmd);
 
 protected:
   void closeEvent (QCloseEvent *event);
 
 protected slots:
   void collapse_requested (QModelIndex index);
   void expand_requested (QModelIndex index);
   void item_double_clicked (QModelIndex index);
+  void contextmenu_requested (const QPoint& pos);
+  // context menu slots
+  void handle_contextmenu_disp ();
+  void handle_contextmenu_plot ();
+  void handle_contextmenu_stem ();
+private:
+  void relay_contextmenu_command (const QString& cmdname);
 
-private:
   QTreeView *view;
 
   struct
   {
     bool local;
     bool global;
     bool persistent;
   } _explicit_collapse;
