# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1467146535 14400
#      Tue Jun 28 16:42:15 2016 -0400
# Node ID 6bce4d23af6b6e62dcc5d7c91db5b7c030065c18
# Parent  3ff59d4f9411c7d4e26cb5024157b196f35d1e2a
eliminate OCTAVE_USE_WINDOWS_API and OCTAVE_USE_OS_X_API from header files

* sysdep.h, sysdep.cc (MINGW_SIGNAL_CLEANUP): Delete macro.
(w32_set_quiet_shutdown, MINGW_signal_cleanup): Delete functions.
(sysdep_cleanup): Do w32_set_quiet_shutdown here for Windows systems.

* sighandlers.h, sighandlers.cc (my_friendly_exit):
Call sysdep_cleanup instead of using MINGW_SIGNAL_CLEANUP macro.

* oct-conf-post.in.h (OCTAVE_USE_WINDOWS_API, OCTAVE_USE_OS_X_API):
Delete macro definitions.

diff --git a/libinterp/corefcn/sighandlers.cc b/libinterp/corefcn/sighandlers.cc
--- a/libinterp/corefcn/sighandlers.cc
+++ b/libinterp/corefcn/sighandlers.cc
@@ -268,34 +268,36 @@ my_friendly_exit (const char *sig_name, 
                   bool save_vars = true)
 {
   static bool been_there_done_that = false;
 
   if (been_there_done_that)
     {
       octave_set_signal_handler ("SIGABRT", SIG_DFL);
 
-      std::cerr << "panic: attempted clean up apparently failed -- aborting...\n";
+      std::cerr << "panic: attempted clean up failed -- aborting..."
+                << std::endl;
 
-      MINGW_SIGNAL_CLEANUP ();
+      sysdep_cleanup ();
 
       abort ();
     }
   else
     {
       been_there_done_that = true;
 
-      std::cerr << "panic: " << sig_name << " -- stopping myself...\n";
+      std::cerr << "panic: " << sig_name << " -- stopping myself..."
+                << std::endl;
 
       if (save_vars)
         dump_octave_core ();
 
       if (sig_number < 0)
         {
-          MINGW_SIGNAL_CLEANUP ();
+          sysdep_cleanup ();
 
           exit (1);
         }
       else
         {
           octave_set_signal_handler (sig_number, SIG_DFL);
 
           octave_raise_wrapper (sig_number);
diff --git a/libinterp/corefcn/sysdep.cc b/libinterp/corefcn/sysdep.cc
--- a/libinterp/corefcn/sysdep.cc
+++ b/libinterp/corefcn/sysdep.cc
@@ -155,32 +155,16 @@ w32_set_octave_home (void)
     {
       size_t pos = bin_dir.rfind ("\\bin\\");
 
       if (pos != std::string::npos)
         octave::sys::env::putenv ("OCTAVE_HOME", bin_dir.substr (0, pos));
     }
 }
 
-void
-w32_set_quiet_shutdown (void)
-{
-  // Let the user close the console window or shutdown without the
-  // pesky dialog.
-  //
-  // FIXME: should this be user configurable?
-  SetProcessShutdownParameters (0x280, SHUTDOWN_NORETRY);
-}
-
-void
-MINGW_signal_cleanup (void)
-{
-  w32_set_quiet_shutdown ();
-}
-
 static void
 w32_init (void)
 {
   w32_set_octave_home ();
 
   octave::command_editor::prefer_env_winsize (true);
 }
 
@@ -239,17 +223,16 @@ MINGW_init (void)
 #if defined (_MSC_VER)
 static void
 MSVC_init (void)
 {
   w32_init ();
 }
 #endif
 
-
 // Return TRUE if FILE1 and FILE2 refer to the same (physical) file.
 
 bool
 same_file_internal (const std::string& file1, const std::string& file2)
 {
 #if defined (OCTAVE_USE_WINDOWS_API)
 
   bool retval = false;
@@ -327,17 +310,20 @@ sysdep_init (void)
 #elif defined (_MSC_VER)
   MSVC_init ();
 #endif
 }
 
 void
 sysdep_cleanup (void)
 {
-  MINGW_SIGNAL_CLEANUP ();
+#if defined (OCTAVE_USE_WINDOWS_API)
+  // Let us fail immediately without displaying any dialog.
+  SetProcessShutdownParameters (0x280, SHUTDOWN_NORETRY);
+#endif
 }
 
 // Set terminal in raw mode.  From less-177.
 //
 // Change terminal to "raw mode", or restore to "normal" mode.
 // "Raw mode" means
 //      1. An outstanding read will complete on receipt of a single keystroke.
 //      2. Input is not echoed.
diff --git a/libinterp/corefcn/sysdep.h b/libinterp/corefcn/sysdep.h
--- a/libinterp/corefcn/sysdep.h
+++ b/libinterp/corefcn/sysdep.h
@@ -40,21 +40,12 @@ extern OCTINTERP_API void raw_mode (bool
 
 extern OCTINTERP_API FILE *octave_popen (const char *command, const char *mode);
 extern OCTINTERP_API int octave_pclose (FILE *f);
 
 extern OCTINTERP_API int octave_kbhit (bool wait = true);
 
 extern OCTINTERP_API std::string get_P_tmpdir (void);
 
-extern void w32_set_quiet_shutdown (void);
-
-#if defined (OCTAVE_USE_WINDOWS_API)
-extern void MINGW_signal_cleanup (void);
-#  define MINGW_SIGNAL_CLEANUP() MINGW_signal_cleanup ()
-#else
-#  define MINGW_SIGNAL_CLEANUP() do { } while (0)
-#endif
-
 extern OCTINTERP_API bool same_file_internal (const std::string&,
                                               const std::string&);
 
 #endif
diff --git a/oct-conf-post.in.h b/oct-conf-post.in.h
--- a/oct-conf-post.in.h
+++ b/oct-conf-post.in.h
@@ -75,34 +75,25 @@ typedef unsigned long ino_t;
    /* missing parameters in macros */
 #  pragma warning (disable: 4003)
    /* missing implementations in template instantiation */
 #  pragma warning (disable: 4996)
    /* deprecated function names (FIXME: ???) */
 #  pragma warning (disable: 4661)
 #endif
 
-/* Define to 1 if we expect to have <windows.h>, Sleep, etc. */
 #if defined (__WIN32__) && ! defined (__CYGWIN__)
-#  define OCTAVE_USE_WINDOWS_API 1
-#endif
-
-#if defined (OCTAVE_USE_WINDOWS_API)
 #  define OCTAVE_HAVE_WINDOWS_FILESYSTEM 1
 #elif defined (__CYGWIN__)
 #  define OCTAVE_HAVE_WINDOWS_FILESYSTEM 1
 #  define OCTAVE_HAVE_POSIX_FILESYSTEM 1
 #else
 #  define OCTAVE_HAVE_POSIX_FILESYSTEM 1
 #endif
 
-#if defined (__APPLE__) && defined (__MACH__)
-#  define OCTAVE_USE_OS_X_API 1
-#endif
-
 /* sigsetjmp is a macro, not a function. */
 #if defined (sigsetjmp) && defined (HAVE_SIGLONGJMP)
 #  define OCTAVE_HAVE_SIG_JUMP 1
 #endif
 
 #if defined (_UNICOS)
 #  define F77_USES_CRAY_CALLING_CONVENTION
 #endif
