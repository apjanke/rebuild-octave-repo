# HG changeset patch
# User Torsten <ttl@justmail.de>
# Date 1385050675 -3600
#      Thu Nov 21 17:17:55 2013 +0100
# Node ID 6925dca348072a2881530f4896e44f945496d46a
# Parent  afeb233ea4430d0a9dc863dce88fa8361a702d60
fix saving unnamed editor files when closing octave (bug #40637)

* file_editor_tab.cc (valid_file_name): new function checking whether editor tab
  contains an untitled  or an existing file;
  (show_dialog): new funciton showing a non modal dialog when octave is closing
  or a modal dialog otherwise;
  (check_file_modified): Message for unsaved modification depends on the
  closing state of octave, use show_dialog;
  (save_file, save_file_as): use show_dialog

* file_editor_tab.h: new functions valid_file_name, show_dialog

diff --git a/libgui/src/m-editor/file-editor-tab.cc b/libgui/src/m-editor/file-editor-tab.cc
--- a/libgui/src/m-editor/file-editor-tab.cc
+++ b/libgui/src/m-editor/file-editor-tab.cc
@@ -211,16 +211,24 @@ file_editor_tab::set_file_name (const QS
 
   // update the file editor with current editing directory
   emit editor_state_changed (_copy_available, _file_name);
   // add the new file to the mru list
 
   emit mru_add_file (_file_name);
 }
 
+// valid_file_name: checks whether editor tab contains an existing file
+bool
+file_editor_tab::valid_file_name ()
+{
+  return (! _file_name.isEmpty ()
+          && _file_name.at (_file_name.count () - 1) != '/');
+}
+
 void
 file_editor_tab::handle_margin_clicked (int margin, int line,
                                         Qt::KeyboardModifiers state)
 {
   if (margin == 1)
     {
       unsigned int markers_mask = _edit_area->markersAtLine (line);
 
@@ -869,59 +877,76 @@ file_editor_tab::update_window_title (bo
 
 void
 file_editor_tab::handle_copy_available (bool enableCopy)
 {
   _copy_available = enableCopy;
   emit editor_state_changed (_copy_available, QDir::cleanPath (_file_name));
 }
 
+// show_dialog: shows a modal or non modal dialog depeding on the closing
+//              of the app
+void
+file_editor_tab::show_dialog (QDialog *dlg)
+{
+  dlg->setAttribute (Qt::WA_DeleteOnClose);
+  if (_app_closing)
+    dlg->exec ();
+  else
+    {
+      dlg->setWindowModality (Qt::WindowModal);
+      dlg->show ();
+    }
+}
+
 int
 file_editor_tab::check_file_modified ()
 {
   int decision = QMessageBox::Yes;
   if (_edit_area->isModified ())
     {
+      activateWindow ();
+      raise ();
       // File is modified but not saved, ask user what to do.  The file
       // editor tab can't be made parent because it may be deleted depending
       // upon the response.  Instead, change the _edit_area to read only.
       QMessageBox::StandardButtons buttons = QMessageBox::Save |
                                              QMessageBox::Discard;
       QString available_actions;
 
       if (_app_closing)
         available_actions = tr ("Do you want to save or discard the changes?");
       else
         {
           buttons = buttons | QMessageBox::Cancel;  // cancel is allowed
           available_actions
             = tr ("Do you want to cancel closing, save or discard the changes?");
         }
 
+      QString file;
+      if (valid_file_name ())
+          file = _file_name;
+      else
+          file = tr ("<unnamed>");
+
       QMessageBox* msgBox
         = new QMessageBox (QMessageBox::Warning, tr ("Octave Editor"),
                            tr ("The file\n"
                                "%1\n"
                                "is about to be closed but has been modified.\n"
                                "%2").
-                           arg (_file_name). arg (available_actions),
+                           arg (file). arg (available_actions),
                            buttons, qobject_cast<QWidget *> (parent ()));
 
       msgBox->setDefaultButton (QMessageBox::Save);
       _edit_area->setReadOnly (true);
       connect (msgBox, SIGNAL (finished (int)),
                this, SLOT (handle_file_modified_answer (int)));
-      msgBox->setAttribute (Qt::WA_DeleteOnClose);
-      if (_app_closing)  // app is closing, a non modal dialogs prevent
-        msgBox->exec (); // the app of being closed before an answer from user
-      else
-        {
-          msgBox->setWindowModality (Qt::NonModal);
-          msgBox->show ();
-        }
+
+      show_dialog (msgBox);
 
       return QMessageBox::Cancel;
     }
   else
     {
       // Nothing was modified, just remove from editor.
       emit tab_remove_request ();
     }
@@ -1025,19 +1050,17 @@ file_editor_tab::save_file (const QStrin
 
       // Create a NonModal message about error.
       QMessageBox* msgBox
         = new QMessageBox (QMessageBox::Critical,
                            tr ("Octave Editor"),
                            tr ("Could not open file %1 for write:\n%2.").
                            arg (file_to_save).arg (file.errorString ()),
                            QMessageBox::Ok, 0);
-      msgBox->setWindowModality (Qt::NonModal);
-      msgBox->setAttribute (Qt::WA_DeleteOnClose);
-      msgBox->show ();
+      show_dialog (msgBox);
 
       return;
     }
 
   // save the contents into the file
   QTextStream out (&file);
   QApplication::setOverrideCursor (Qt::WaitCursor);
   out << _edit_area->text ();
@@ -1122,19 +1145,17 @@ file_editor_tab::save_file_as (bool remo
                this, SLOT (handle_save_file_as_answer_cancel ()));
     }
   else
     {
       connect (fileDialog, SIGNAL (fileSelected (const QString&)),
                this, SLOT (handle_save_file_as_answer (const QString&)));
     }
 
-  fileDialog->setWindowModality (Qt::WindowModal);
-  fileDialog->setAttribute (Qt::WA_DeleteOnClose);
-  fileDialog->show ();
+  show_dialog (fileDialog);
 }
 
 void
 file_editor_tab::message_duplicate_file_name (const QString& saveFileName)
 {
   // Could overwrite the file here (and tell user the file was
   // overwritten), but the user could have unintentionally
   // selected the same name not intending to overwrite.
@@ -1142,19 +1163,17 @@ file_editor_tab::message_duplicate_file_
   // Create a NonModal message about error.
   QMessageBox* msgBox
     = new QMessageBox (QMessageBox::Critical, tr ("Octave Editor"),
                        tr ("File not saved! The selected file name\n%1\n"
                            "is the same as the current file name").
                        arg (saveFileName),
                        QMessageBox::Ok, 0);
 
-  msgBox->setWindowModality (Qt::NonModal);
-  msgBox->setAttribute (Qt::WA_DeleteOnClose);
-  msgBox->show ();
+  show_dialog (msgBox);
 }
 
 void
 file_editor_tab::handle_save_file_as_answer (const QString& saveFileName)
 {
   if (saveFileName == _file_name)
     {
       message_duplicate_file_name (saveFileName);
diff --git a/libgui/src/m-editor/file-editor-tab.h b/libgui/src/m-editor/file-editor-tab.h
--- a/libgui/src/m-editor/file-editor-tab.h
+++ b/libgui/src/m-editor/file-editor-tab.h
@@ -171,24 +171,26 @@ private:
     { }
 
     std::string file;
     std::string dir;
     std::string function_name;
     int line;
   };
 
+  bool valid_file_name ();
   void save_file (const QString& saveFileName, bool remove_on_success = false);
   void save_file_as (bool remove_on_success = false);
   void message_duplicate_file_name (const QString& fileName);
 
   void update_lexer ();
   void request_add_breakpoint (int line);
   void request_remove_breakpoint (int line);
 
+  void show_dialog (QDialog *dlg);
   int check_file_modified ();
   void do_comment_selected_text (bool comment);
   QString comment_string (const QString&);
 
   void add_breakpoint_callback (const bp_info& info);
   void remove_breakpoint_callback (const bp_info& info);
   void remove_all_breakpoints_callback (const bp_info& info);
   void center_current_line ();
