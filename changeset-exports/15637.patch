# HG changeset patch
# User Jacob Dawid <jacob.dawid@googlemail.com>
# Date 1327361182 -3600
#      Tue Jan 24 00:26:22 2012 +0100
# Node ID 29c817466160871d10f13369080ae34783750168
# Parent  462e0f609d01050f75740e945784c5279a589188
Removed Konsole namespaces.

diff --git a/libqterminal/BlockArray.cpp b/libqterminal/BlockArray.cpp
--- a/libqterminal/BlockArray.cpp
+++ b/libqterminal/BlockArray.cpp
@@ -29,18 +29,16 @@
 // System
 #include <assert.h>
 #include <sys/mman.h>
 #include <sys/param.h>
 #include <unistd.h>
 #include <stdio.h>
 
 
-using namespace Konsole;
-
 static int blocksize = 0;
 
 BlockArray::BlockArray()
     : size(0),
       current(size_t(-1)),
       index(size_t(-1)),
       lastmap(0),
       lastmap_index(size_t(-1)),
diff --git a/libqterminal/BlockArray.h b/libqterminal/BlockArray.h
--- a/libqterminal/BlockArray.h
+++ b/libqterminal/BlockArray.h
@@ -20,24 +20,19 @@
     02110-1301  USA.
 */
 
 #ifndef BLOCKARRAY_H
 #define BLOCKARRAY_H
 
 #include <unistd.h>
 
-//#error Do not use in KDE 2.1
-
 #define BlockSize (1 << 12)
 #define ENTRIES   ((BlockSize - sizeof(size_t) ) / sizeof(unsigned char))
 
-namespace Konsole
-{
-
 struct Block {
     Block() { size = 0; }
     unsigned char data[ENTRIES];
     size_t size;
 };
 
 // ///////////////////////////////////////////////////////
 
@@ -115,11 +110,9 @@ private:
     size_t lastmap_index;
     Block *lastblock;
 
     int ion;
     size_t length;
 
 };
 
-}
-
 #endif
diff --git a/libqterminal/Character.h b/libqterminal/Character.h
--- a/libqterminal/Character.h
+++ b/libqterminal/Character.h
@@ -26,19 +26,16 @@
 #define CHARACTER_H
 
 // Qt
 #include <QtCore/QHash>
 
 // Local
 #include "CharacterColor.h"
 
-namespace Konsole
-{
-
 typedef unsigned char LineProperty;
 
 static const int LINE_DEFAULT		= 0;
 static const int LINE_WRAPPED 	 	= (1 << 0);
 static const int LINE_DOUBLEWIDTH  	= (1 << 1);
 static const int LINE_DOUBLEHEIGHT	= (1 << 2);
 
 #define DEFAULT_RENDITION  0
@@ -199,12 +196,10 @@ private:
     // character sequence 'unicodePoints' of size 'length'
     bool extendedCharMatch(ushort hash , ushort* unicodePoints , ushort length) const;
     // internal, maps hash keys to character sequence buffers.  The first ushort
     // in each value is the length of the buffer, followed by the ushorts in the buffer
     // themselves.
     QHash<ushort,ushort*> extendedCharTable;
 };
 
-}
-
 #endif // CHARACTER_H
 
diff --git a/libqterminal/CharacterColor.h b/libqterminal/CharacterColor.h
--- a/libqterminal/CharacterColor.h
+++ b/libqterminal/CharacterColor.h
@@ -23,19 +23,16 @@
 */
 
 #ifndef CHARACTERCOLOR_H
 #define CHARACTERCOLOR_H
 
 // Qt
 #include <QtGui/QColor>
 
-namespace Konsole
-{
-
 /** 
  * An entry in a terminal display's color palette. 
  *
  * A color palette is an array of 16 ColorEntry instances which map
  * system color indexes (from 0 to 15) into actual colors.
  *
  * Each entry can be set as bold, in which case any text
  * drawn using the color should be drawn in bold.  
@@ -286,13 +283,10 @@ inline QColor CharacterColor::color(cons
 inline void CharacterColor::toggleIntensive()
 {
   if (_colorSpace == COLOR_SPACE_SYSTEM || _colorSpace == COLOR_SPACE_DEFAULT)
   {
     _v = !_v;
   }
 }
 
-
-}
-
 #endif // CHARACTERCOLOR_H
 
diff --git a/libqterminal/Emulation.cpp b/libqterminal/Emulation.cpp
--- a/libqterminal/Emulation.cpp
+++ b/libqterminal/Emulation.cpp
@@ -44,29 +44,16 @@
 #include <QtCore/QTime>
 
 // Konsole
 #include "KeyboardTranslator.h"
 #include "Screen.h"
 #include "TerminalCharacterDecoder.h"
 #include "ScreenWindow.h"
 
-using namespace Konsole;
-
-/* ------------------------------------------------------------------------- */
-/*                                                                           */
-/*                               Emulation                                  */
-/*                                                                           */
-/* ------------------------------------------------------------------------- */
-
-//#define CNTL(c) ((c)-'@')
-
-/*!
-*/
-
 Emulation::Emulation() :
   _currentScreen(0),
   _codec(0),
   _decoder(0),
   _keyTranslator(0),
   _usesMouse(false)
 {
 
diff --git a/libqterminal/Emulation.h b/libqterminal/Emulation.h
--- a/libqterminal/Emulation.h
+++ b/libqterminal/Emulation.h
@@ -25,25 +25,21 @@
 #ifndef EMULATION_H
 #define EMULATION_H
 
 // System
 #include <stdio.h>
 
 // Qt 
 #include <QtGui/QKeyEvent>
-//#include <QPointer>
+
 #include <QtCore/QTextCodec>
 #include <QtCore/QTextStream>
 #include <QtCore/QTimer>
 
-
-namespace Konsole
-{
-
 class KeyboardTranslator;
 class HistoryType;
 class Screen;
 class ScreenWindow;
 class TerminalCharacterDecoder;
 
 /** 
  * This enum describes the available states which 
@@ -455,11 +451,9 @@ private slots:
 private:
 
   bool _usesMouse;
   QTimer _bulkTimer1;
   QTimer _bulkTimer2;
   
 };
 
-}
-
 #endif // ifndef EMULATION_H
diff --git a/libqterminal/Filter.cpp b/libqterminal/Filter.cpp
--- a/libqterminal/Filter.cpp
+++ b/libqterminal/Filter.cpp
@@ -29,25 +29,19 @@
 #include <QtGui/QAction>
 #include <QtGui/QApplication>
 #include <QtGui/QClipboard>
 #include <QtCore/QString>
 
 #include <QtCore/QSharedData>
 #include <QtCore>
 
-// KDE
-//#include <KLocale>
-//#include <KRun>
-
 // Konsole
 #include "TerminalCharacterDecoder.h"
 
-using namespace Konsole;
-
 FilterChain::~FilterChain()
 {
     QMutableListIterator<Filter*> iter(*this);
     
     while ( iter.hasNext() )
     {
         Filter* filter = iter.next();
         iter.remove();
diff --git a/libqterminal/Filter.h b/libqterminal/Filter.h
--- a/libqterminal/Filter.h
+++ b/libqterminal/Filter.h
@@ -28,19 +28,16 @@
 #include <QtCore/QObject>
 #include <QtCore/QStringList>
 #include <QtCore/QHash>
 #include <QtCore/QRegExp>
 
 // Local
 #include "Character.h"
 
-namespace Konsole
-{
-
 /**
  * A filter processes blocks of text looking for certain patterns (such as URLs or keywords from a list)
  * and marks the areas which match the filter's patterns as 'hotspots'.
  *
  * Each hotspot has a type identifier associated with it ( such as a link or a highlighted section ),
  * and an action.  When the user performs some activity such as a mouse-click in a hotspot area ( the exact
  * action will depend on what is displaying the block of text which the filter is processing ), the hotspot's
  * activate() method should be called.  Depending on the type of hotspot this will trigger a suitable response.
@@ -374,10 +371,9 @@ public:
     void setImage(const Character* const image , int lines , int columns,
 				  const QVector<LineProperty>& lineProperties);  
 
 private:
     QString* _buffer;
     QList<int>* _linePositions;
 };
 
-}
 #endif //FILTER_H
diff --git a/libqterminal/History.cpp b/libqterminal/History.cpp
--- a/libqterminal/History.cpp
+++ b/libqterminal/History.cpp
@@ -32,18 +32,16 @@
 #include <sys/mman.h>
 #include <unistd.h>
 #include <errno.h>
 
 
 // Reasonable line size
 #define LINE_SIZE	1024
 
-using namespace Konsole;
-
 /*
    An arbitrary long scroll.
 
    One can modify the scroll only by adding either cells
    or newlines, but access it randomly.
 
    The model is that of an arbitrary wide typewriter scroll
    in that the scroll is a serie of lines and each line is
diff --git a/libqterminal/History.h b/libqterminal/History.h
--- a/libqterminal/History.h
+++ b/libqterminal/History.h
@@ -15,35 +15,28 @@
     GNU General Public License for more details.
 
     You should have received a copy of the GNU General Public License
     along with this program; if not, write to the Free Software
     Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
     02110-1301  USA.
 */
 
-#ifndef TEHISTORY_H
-#define TEHISTORY_H
+#ifndef HISTORY_H
+#define HISTORY_H
 
 // Qt
 #include <QtCore/QBitRef>
 #include <QtCore/QHash>
 #include <QtCore>
 
 // Konsole
 #include "BlockArray.h"
 #include "Character.h"
 
-namespace Konsole
-{
-
-#if 1
-/*
-   An extendable tmpfile(1) based buffer.
-*/
 
 class HistoryFile
 {
 public:
   HistoryFile();
   virtual ~HistoryFile();
 
   virtual void add(const unsigned char* bytes, int len);
@@ -70,17 +63,16 @@ private:
   //'get' is called.
   //this is used to detect when a large number of lines are being read and processed from the history
   //and automatically mmap the file for better performance (saves the overhead of many lseek-read calls).
   int readWriteBalance;
 
   //when readWriteBalance goes below this threshold, the file will be mmap'ed automatically
   static const int MAP_THRESHOLD = -1000;
 };
-#endif
 
 //////////////////////////////////////////////////////////////////////
 
 //////////////////////////////////////////////////////////////////////
 // Abstract base class for file and buffer versions
 //////////////////////////////////////////////////////////////////////
 class HistoryType;
 
@@ -119,17 +111,16 @@ public:
   //
   const HistoryType& getType() { return *m_histType; }
 
 protected:
   HistoryType* m_histType;
 
 };
 
-#if 1
 
 //////////////////////////////////////////////////////////////////////
 // File-based history (e.g. file log, no limitation in length)
 //////////////////////////////////////////////////////////////////////
 
 class HistoryScrollFile : public HistoryScroll
 {
 public:
@@ -204,17 +195,16 @@ public:
   virtual bool isWrappedLine(int lineno);
 
   virtual void addCells(const Character a[], int count);
   virtual void addCells(const QVector<Character>& cells);
   virtual void addLine(bool previousWrapped=false);
 
 };*/
 
-#endif
 
 //////////////////////////////////////////////////////////////////////
 // Nothing-based history (no history :-)
 //////////////////////////////////////////////////////////////////////
 class HistoryScrollNone : public HistoryScroll
 {
 public:
   HistoryScrollNone();
@@ -301,17 +291,17 @@ public:
   virtual int maximumLineCount() const;
 
   virtual HistoryScroll* scroll(HistoryScroll *) const;
 
 protected:
   size_t m_size;
 };
 
-#if 1 
+
 class HistoryTypeFile : public HistoryType
 {
 public:
   HistoryTypeFile(const QString& fileName=QString());
 
   virtual bool isEnabled() const;
   virtual const QString& getFileName() const;
   virtual int maximumLineCount() const;
@@ -332,13 +322,9 @@ public:
   virtual int maximumLineCount() const;
 
   virtual HistoryScroll* scroll(HistoryScroll *) const;
 
 protected:
   unsigned int m_nbLines;
 };
 
-#endif
-
-}
-
-#endif // TEHISTORY_H
+#endif // HISTORY_H
diff --git a/libqterminal/KeyboardTranslator.cpp b/libqterminal/KeyboardTranslator.cpp
--- a/libqterminal/KeyboardTranslator.cpp
+++ b/libqterminal/KeyboardTranslator.cpp
@@ -30,19 +30,16 @@
 
 // Qt
 #include <QtCore/QBuffer>
 #include <QtCore/QFile>
 #include <QtCore/QFileInfo>
 #include <QtCore>
 #include <QtGui>
 
-
-using namespace Konsole;
-
 //and this is default now translator - default.keytab from original Konsole
 const char* KeyboardTranslatorManager::defaultTranslatorText = 
 #include "ExtendedDefaultTranslator.h"
 ;
 
 KeyboardTranslatorManager::KeyboardTranslatorManager()
     : _haveLoadedAll(false)
 {
diff --git a/libqterminal/KeyboardTranslator.h b/libqterminal/KeyboardTranslator.h
--- a/libqterminal/KeyboardTranslator.h
+++ b/libqterminal/KeyboardTranslator.h
@@ -105,19 +105,16 @@ static struct K_GLOBAL_STATIC_STRUCT_NAM
 								
 								
 
 
 
 class QIODevice;
 class QTextStream;
 
-namespace Konsole
-{
-
 /** 
  * A convertor which maps between key sequences pressed by the user and the
  * character strings which should be sent to the terminal and commands
  * which should be invoked when those character sequences are pressed.
  *
  * Konsole supports multiple keyboard translators, allowing the user to
  * specify the character sequences which are sent to the terminal
  * when particular key sequences are pressed.
@@ -643,15 +640,11 @@ inline void KeyboardTranslator::Entry::s
 inline KeyboardTranslator::States KeyboardTranslator::Entry::state() const { return _state; }
 
 inline void KeyboardTranslator::Entry::setStateMask( States stateMask )
 { 
     _stateMask = stateMask; 
 }
 inline KeyboardTranslator::States KeyboardTranslator::Entry::stateMask() const { return _stateMask; }
 
-}
-
-Q_DECLARE_METATYPE(Konsole::KeyboardTranslator::Entry)
-Q_DECLARE_METATYPE(const Konsole::KeyboardTranslator*)
 
 #endif // KEYBOARDTRANSLATOR_H
 
diff --git a/libqterminal/PseudoTerminal.cpp b/libqterminal/PseudoTerminal.cpp
new file mode 100644
--- /dev/null
+++ b/libqterminal/PseudoTerminal.cpp
@@ -0,0 +1,335 @@
+/*
+    This file is part of Konsole, an X terminal.
+    Copyright (C) 1997,1998 by Lars Doelle <lars.doelle@on-line.de>
+
+    Rewritten for QT4 by e_k <e_k at users.sourceforge.net>, Copyright (C)2008
+
+    This program is free software; you can redistribute it and/or modify
+    it under the terms of the GNU General Public License as published by
+    the Free Software Foundation; either version 2 of the License, or
+    (at your option) any later version.
+
+    This program is distributed in the hope that it will be useful,
+    but WITHOUT ANY WARRANTY; without even the implied warranty of
+    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+    GNU General Public License for more details.
+
+    You should have received a copy of the GNU General Public License
+    along with this program; if not, write to the Free Software
+    Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+    02110-1301  USA.
+*/
+
+// Own
+#include "PseudoTerminal.h"
+
+// System
+#include <sys/types.h>
+#include <sys/stat.h>
+#include <unistd.h>
+#include <errno.h>
+#include <termios.h>
+
+// Qt
+#include <QtCore>
+
+// KDE
+#include "kpty.h"
+
+void PseudoTerminal::donePty()
+{
+  emit done(exitStatus());
+}
+
+void PseudoTerminal::setWindowSize(int lines, int cols)
+{
+  _windowColumns = cols;
+  _windowLines = lines;
+
+  if (pty()->masterFd() >= 0)
+    pty()->setWinSize(lines, cols);
+}
+QSize PseudoTerminal::windowSize() const
+{
+    return QSize(_windowColumns,_windowLines);
+}
+
+void PseudoTerminal::setXonXoff(bool enable)
+{
+  _xonXoff = enable;
+
+  if (pty()->masterFd() >= 0)
+  {
+    struct ::termios ttmode;
+    pty()->tcGetAttr(&ttmode);
+    if (!enable)
+      ttmode.c_iflag &= ~(IXOFF | IXON);
+    else
+      ttmode.c_iflag |= (IXOFF | IXON);
+    if (!pty()->tcSetAttr(&ttmode))
+      qWarning("Unable to set terminal attributes.");
+  }
+}
+
+void PseudoTerminal::setUtf8Mode(bool enable)
+{
+#ifdef IUTF8 // XXX not a reasonable place to check it.
+  _utf8 = enable;
+
+  if (pty()->masterFd() >= 0)
+  {
+    struct ::termios ttmode;
+    pty()->tcGetAttr(&ttmode);
+    if (!enable)
+      ttmode.c_iflag &= ~IUTF8;
+    else
+      ttmode.c_iflag |= IUTF8;
+    if (!pty()->tcSetAttr(&ttmode))
+      qWarning("Unable to set terminal attributes.");
+  }
+#endif
+}
+
+void PseudoTerminal::setErase(char erase)
+{
+  _eraseChar = erase;
+  
+  if (pty()->masterFd() >= 0)
+  {
+    struct ::termios ttmode;
+
+    pty()->tcGetAttr(&ttmode);
+
+    ttmode.c_cc[VERASE] = erase;
+
+    if (!pty()->tcSetAttr(&ttmode))
+      qWarning("Unable to set terminal attributes.");
+  }  
+}
+
+char PseudoTerminal::erase() const
+{
+	if (pty()->masterFd() >= 0)
+	{
+		qDebug() << "Getting erase char";
+		struct ::termios ttyAttributes;
+		pty()->tcGetAttr(&ttyAttributes);
+		return ttyAttributes.c_cc[VERASE];
+	}
+
+	return _eraseChar;
+}
+
+void PseudoTerminal::addEnvironmentVariables(const QStringList& environment)
+{
+    QListIterator<QString> iter(environment);
+    while (iter.hasNext())
+    {
+        QString pair = iter.next();
+
+        // split on the first '=' character
+        int pos = pair.indexOf('=');
+        
+        if ( pos >= 0 )
+        {
+            QString variable = pair.left(pos);
+            QString value = pair.mid(pos+1);
+
+            //kDebug() << "Setting environment pair" << variable <<
+            //    " set to " << value;
+
+            setEnvironment(variable,value);
+        }
+    }
+}
+
+int PseudoTerminal::start(const QString& program,
+               const QStringList& programArguments, 
+               const QStringList& environment, 
+               ulong winid, 
+               bool addToUtmp,
+               int masterFd,
+               int slaveFd
+//               const QString& dbusService,
+//               const QString& dbusSession)
+		)
+{
+  clearArguments();
+
+  setBinaryExecutable(program.toLatin1());
+
+  addEnvironmentVariables(environment);
+
+  QStringListIterator it( programArguments );
+  while (it.hasNext())
+    arguments.append( it.next().toUtf8() );
+
+//  if ( !dbusService.isEmpty() )
+//     setEnvironment("KONSOLE_DBUS_SERVICE",dbusService);
+//  if ( !dbusSession.isEmpty() )
+//     setEnvironment("KONSOLE_DBUS_SESSION", dbusSession);
+
+  setEnvironment("WINDOWID", QString::number(winid));
+
+  // unless the LANGUAGE environment variable has been set explicitly
+  // set it to a null string
+  // this fixes the problem where KCatalog sets the LANGUAGE environment
+  // variable during the application's startup to something which
+  // differs from LANG,LC_* etc. and causes programs run from
+  // the terminal to display mesages in the wrong language
+  //
+  // this can happen if LANG contains a language which KDE
+  // does not have a translation for
+  //
+  // BR:149300
+  if (!environment.contains("LANGUAGE"))
+      setEnvironment("LANGUAGE",QString());
+
+  setUsePty(All, addToUtmp, masterFd, slaveFd);
+
+  pty()->open();
+  
+  struct ::termios ttmode;
+  pty()->tcGetAttr(&ttmode);
+  if (!_xonXoff)
+    ttmode.c_iflag &= ~(IXOFF | IXON);
+  else
+    ttmode.c_iflag |= (IXOFF | IXON);
+#ifdef IUTF8 // XXX not a reasonable place to check it.
+  if (!_utf8)
+    ttmode.c_iflag &= ~IUTF8;
+  else
+    ttmode.c_iflag |= IUTF8;
+#endif
+
+  if (_eraseChar != 0)
+  	ttmode.c_cc[VERASE] = _eraseChar;
+  
+  if (!pty()->tcSetAttr(&ttmode))
+    qWarning("Unable to set terminal attributes.");
+  
+  pty()->setWinSize(_windowLines, _windowColumns);
+
+  if ( K3Process::start(NotifyOnExit, (Communication) (Stdin | Stdout)) == false )
+     return -1;
+
+  resume(); // Start...
+  return 0;
+
+}
+
+void PseudoTerminal::setWriteable(bool writeable)
+{
+  struct stat sbuf;
+  stat(pty()->ttyName(), &sbuf);
+  if (writeable)
+    chmod(pty()->ttyName(), sbuf.st_mode | S_IWGRP);
+  else
+    chmod(pty()->ttyName(), sbuf.st_mode & ~(S_IWGRP|S_IWOTH));
+}
+
+PseudoTerminal::PseudoTerminal()
+    : _bufferFull(false),
+      _windowColumns(0),
+      _windowLines(0),
+      _eraseChar(0),
+      _xonXoff(true),
+      _utf8(true)
+{
+  connect(this, SIGNAL(receivedStdout(K3Process *, char *, int )),
+	  this, SLOT(dataReceived(K3Process *,char *, int)));
+  connect(this, SIGNAL(processExited(K3Process *)),
+          this, SLOT(donePty()));
+  connect(this, SIGNAL(wroteStdin(K3Process *)),
+          this, SLOT(writeReady()));
+  _pty = new KPty;
+
+  setUsePty(All, false, -1, -1); // utmp will be overridden later
+}
+
+PseudoTerminal::PseudoTerminal(int masterFd, int slaveFd)
+    : _bufferFull(false),
+      _windowColumns(0),
+      _windowLines(0),
+      _eraseChar(0),
+      _xonXoff(true),
+      _utf8(true)
+{
+  connect(this, SIGNAL(receivedStdout(K3Process *, char *, int )),
+          this, SLOT(dataReceived(K3Process *,char *, int)));
+  connect(this, SIGNAL(processExited(K3Process *)),
+          this, SLOT(donePty()));
+  connect(this, SIGNAL(wroteStdin(K3Process *)),
+          this, SLOT(writeReady()));
+  _pty = new KPty(masterFd, slaveFd);
+
+  setUsePty(All, false, masterFd, slaveFd); // utmp will be overridden later
+}
+
+PseudoTerminal::~PseudoTerminal()
+{
+    delete _pty;
+}
+
+void PseudoTerminal::writeReady()
+{
+  _pendingSendJobs.erase(_pendingSendJobs.begin());
+  _bufferFull = false;
+  doSendJobs();
+}
+
+void PseudoTerminal::doSendJobs() {
+  if(_pendingSendJobs.isEmpty())
+  {
+     emit bufferEmpty(); 
+     return;
+  }
+  
+  SendJob& job = _pendingSendJobs.first();
+
+  
+  if (!writeStdin( job.data(), job.length() ))
+  {
+    qWarning("Pty::doSendJobs - Could not send input data to terminal process.");
+    return;
+  }
+  _bufferFull = true;
+}
+
+void PseudoTerminal::appendSendJob(const char* s, int len)
+{
+  _pendingSendJobs.append(SendJob(s,len));
+}
+
+void PseudoTerminal::sendData(const char* s, int len)
+{
+  appendSendJob(s,len);
+  if (!_bufferFull)
+     doSendJobs();
+}
+
+void PseudoTerminal::dataReceived(K3Process *,char *buf, int len)
+{
+  emit receivedData(buf,len);
+}
+
+void PseudoTerminal::lockPty(bool lock)
+{
+  if (lock)
+    suspend();
+  else
+    resume();
+}
+
+int PseudoTerminal::foregroundProcessGroup() const
+{
+    int pid = tcgetpgrp(pty()->masterFd());
+
+    if ( pid != -1 )
+    {
+        return pid;
+    } 
+
+    return 0;
+}
+
diff --git a/libqterminal/PseudoTerminal.h b/libqterminal/PseudoTerminal.h
new file mode 100644
--- /dev/null
+++ b/libqterminal/PseudoTerminal.h
@@ -0,0 +1,241 @@
+/*
+    This file is part of Konsole, KDE's terminal emulator. 
+    
+    Copyright (C) 2007 by Robert Knight <robertknight@gmail.com>
+    Copyright (C) 1997,1998 by Lars Doelle <lars.doelle@on-line.de>
+
+    Rewritten for QT4 by e_k <e_k at users.sourceforge.net>, Copyright (C)2008
+
+    This program is free software; you can redistribute it and/or modify
+    it under the terms of the GNU General Public License as published by
+    the Free Software Foundation; either version 2 of the License, or
+    (at your option) any later version.
+
+    This program is distributed in the hope that it will be useful,
+    but WITHOUT ANY WARRANTY; without even the implied warranty of
+    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+    GNU General Public License for more details.
+
+    You should have received a copy of the GNU General Public License
+    along with this program; if not, write to the Free Software
+    Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+    02110-1301  USA.
+*/
+
+#ifndef PTY_H
+#define PTY_H
+
+// Qt
+#include <QtCore/QStringList>
+#include <QtCore/QVector>
+#include <QtCore/QList>
+#include <QtCore>
+
+#include "k3process.h"
+
+/**
+ * The Pty class is used to start the terminal process, 
+ * send data to it, receive data from it and manipulate 
+ * various properties of the pseudo-teletype interface
+ * used to communicate with the process.
+ *
+ * To use this class, construct an instance and connect
+ * to the sendData slot and receivedData signal to
+ * send data to or receive data from the process.
+ *
+ * To start the terminal process, call the start() method
+ * with the program name and appropriate arguments. 
+ */
+class PseudoTerminal: public K3Process
+{
+Q_OBJECT
+
+  public:
+    
+    /** 
+     * Constructs a new Pty.
+     * 
+     * Connect to the sendData() slot and receivedData() signal to prepare
+     * for sending and receiving data from the terminal process.
+     *
+     * To start the terminal process, call the run() method with the 
+     * name of the program to start and appropriate arguments.
+     */
+    PseudoTerminal();
+    PseudoTerminal(int masterFd, int slaveFd);
+
+    ~PseudoTerminal();
+
+    /**
+     * Starts the terminal process.  
+     *
+     * Returns 0 if the process was started successfully or non-zero
+     * otherwise.
+     *
+     * @param program Path to the program to start
+     * @param arguments Arguments to pass to the program being started
+     * @param environment A list of key=value pairs which will be added
+     * to the environment for the new process.  At the very least this
+     * should include an assignment for the TERM environment variable.
+     * @param winid Specifies the value of the WINDOWID environment variable
+     * in the process's environment.
+     * @param addToUtmp Specifies whether a utmp entry should be created for
+     * the pty used.  See K3Process::setUsePty() 
+     * @param dbusService Specifies the value of the KONSOLE_DBUS_SERVICE 
+     * environment variable in the process's environment.
+     * @param dbusSession Specifies the value of the KONSOLE_DBUS_SESSION
+     * environment variable in the process's environment. 
+     */
+    int start( const QString& program, 
+               const QStringList& arguments, 
+               const QStringList& environment, 
+               ulong winid, 
+               bool addToUtmp,
+               int masterFd,
+               int slaveFd
+//               const QString& dbusService,
+//               const QString& dbusSession
+             );
+
+    /** TODO: Document me */
+    void setWriteable(bool writeable);
+
+    /** 
+     * Enables or disables Xon/Xoff flow control.
+     */
+    void setXonXoff(bool on);
+
+    /** 
+     * Sets the size of the window (in lines and columns of characters) 
+     * used by this teletype.
+     */
+    void setWindowSize(int lines, int cols);
+    
+    /** Returns the size of the window used by this teletype.  See setWindowSize() */
+    QSize windowSize() const;
+
+    /** TODO Document me */
+    void setErase(char erase);
+
+	/** */
+	char erase() const;
+
+    /**
+     * Returns the process id of the teletype's current foreground
+     * process.  This is the process which is currently reading
+     * input sent to the terminal via. sendData()
+     *
+     * If there is a problem reading the foreground process group,
+     * 0 will be returned.
+     */
+    int foregroundProcessGroup() const;
+   
+    /**
+     * Returns whether the buffer used to send data to the
+     * terminal process is full.
+     */
+    bool bufferFull() const { return _bufferFull; }
+
+
+  public slots:
+
+    /**
+     * Put the pty into UTF-8 mode on systems which support it.
+     */
+    void setUtf8Mode(bool on);
+
+    /**
+     * Suspend or resume processing of data from the standard 
+     * output of the terminal process.
+     *
+     * See K3Process::suspend() and K3Process::resume()
+     *
+     * @param lock If true, processing of output is suspended,
+     * otherwise processing is resumed.
+     */
+    void lockPty(bool lock);
+    
+    /** 
+     * Sends data to the process currently controlling the 
+     * teletype ( whose id is returned by foregroundProcessGroup() )
+     *
+     * @param buffer Pointer to the data to send.
+     * @param length Length of @p buffer.
+     */
+    void sendData(const char* buffer, int length);
+
+  signals:
+
+    /**
+     * Emitted when the terminal process terminates.
+     *
+     * @param exitCode The status code which the process exited with.
+     */
+    void done(int exitCode);
+
+    /**
+     * Emitted when a new block of data is received from
+     * the teletype.
+     *
+     * @param buffer Pointer to the data received.
+     * @param length Length of @p buffer
+     */
+    void receivedData(const char* buffer, int length);
+    
+    /**
+     * Emitted when the buffer used to send data to the terminal
+     * process becomes empty, i.e. all data has been sent.
+     */
+    void bufferEmpty();
+    
+
+  private slots:
+    
+    // called when terminal process exits
+    void donePty();
+    // called when data is received from the terminal process 
+    void dataReceived(K3Process*, char* buffer, int length);
+    // sends the first enqueued buffer of data to the
+    // terminal process
+    void doSendJobs();
+    // called when the terminal process is ready to
+    // receive more data
+    void writeReady();
+
+  private:
+    // takes a list of key=value pairs and adds them
+    // to the environment for the process
+    void addEnvironmentVariables(const QStringList& environment);
+
+    // enqueues a buffer of data to be sent to the 
+    // terminal process
+    void appendSendJob(const char* buffer, int length);
+   
+    // a buffer of data in the queue to be sent to the 
+    // terminal process 
+    class SendJob {
+	public:
+      		SendJob() {}
+      		SendJob(const char* b, int len) : buffer(len)
+		{
+			memcpy( buffer.data() , b , len );
+        }
+	
+		const char* data() const { return buffer.constData(); }
+		int length() const { return buffer.size(); }	
+	private:
+      		QVector<char> buffer;
+    };
+
+    QList<SendJob> _pendingSendJobs;
+    bool _bufferFull;
+
+    int  _windowColumns; 
+    int  _windowLines;
+    char _eraseChar;
+    bool _xonXoff;
+    bool _utf8;
+    KPty *_pty;
+};
+
+#endif // PTY_H
diff --git a/libqterminal/Pty.cpp b/libqterminal/Pty.cpp
deleted file mode 100644
--- a/libqterminal/Pty.cpp
+++ /dev/null
@@ -1,341 +0,0 @@
-/*
-    This file is part of Konsole, an X terminal.
-    Copyright (C) 1997,1998 by Lars Doelle <lars.doelle@on-line.de>
-
-    Rewritten for QT4 by e_k <e_k at users.sourceforge.net>, Copyright (C)2008
-
-    This program is free software; you can redistribute it and/or modify
-    it under the terms of the GNU General Public License as published by
-    the Free Software Foundation; either version 2 of the License, or
-    (at your option) any later version.
-
-    This program is distributed in the hope that it will be useful,
-    but WITHOUT ANY WARRANTY; without even the implied warranty of
-    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-    GNU General Public License for more details.
-
-    You should have received a copy of the GNU General Public License
-    along with this program; if not, write to the Free Software
-    Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
-    02110-1301  USA.
-*/
-
-// Own
-#include "Pty.h"
-
-// System
-#include <sys/types.h>
-#include <sys/stat.h>
-#include <unistd.h>
-#include <errno.h>
-#include <termios.h>
-
-// Qt
-#include <QtCore>
-
-// KDE
-//#include <KStandardDirs>
-//#include <KLocale>
-//#include <KDebug>
-#include "kpty.h"
-
-using namespace Konsole;
-
-void Pty::donePty()
-{
-  emit done(exitStatus());
-}
-
-void Pty::setWindowSize(int lines, int cols)
-{
-  _windowColumns = cols;
-  _windowLines = lines;
-
-  if (pty()->masterFd() >= 0)
-    pty()->setWinSize(lines, cols);
-}
-QSize Pty::windowSize() const
-{
-    return QSize(_windowColumns,_windowLines);
-}
-
-void Pty::setXonXoff(bool enable)
-{
-  _xonXoff = enable;
-
-  if (pty()->masterFd() >= 0)
-  {
-    struct ::termios ttmode;
-    pty()->tcGetAttr(&ttmode);
-    if (!enable)
-      ttmode.c_iflag &= ~(IXOFF | IXON);
-    else
-      ttmode.c_iflag |= (IXOFF | IXON);
-    if (!pty()->tcSetAttr(&ttmode))
-      qWarning("Unable to set terminal attributes.");
-  }
-}
-
-void Pty::setUtf8Mode(bool enable)
-{
-#ifdef IUTF8 // XXX not a reasonable place to check it.
-  _utf8 = enable;
-
-  if (pty()->masterFd() >= 0)
-  {
-    struct ::termios ttmode;
-    pty()->tcGetAttr(&ttmode);
-    if (!enable)
-      ttmode.c_iflag &= ~IUTF8;
-    else
-      ttmode.c_iflag |= IUTF8;
-    if (!pty()->tcSetAttr(&ttmode))
-      qWarning("Unable to set terminal attributes.");
-  }
-#endif
-}
-
-void Pty::setErase(char erase)
-{
-  _eraseChar = erase;
-  
-  if (pty()->masterFd() >= 0)
-  {
-    struct ::termios ttmode;
-
-    pty()->tcGetAttr(&ttmode);
-
-    ttmode.c_cc[VERASE] = erase;
-
-    if (!pty()->tcSetAttr(&ttmode))
-      qWarning("Unable to set terminal attributes.");
-  }  
-}
-
-char Pty::erase() const
-{
-	if (pty()->masterFd() >= 0)
-	{
-		qDebug() << "Getting erase char";
-		struct ::termios ttyAttributes;
-		pty()->tcGetAttr(&ttyAttributes);
-		return ttyAttributes.c_cc[VERASE];
-	}
-
-	return _eraseChar;
-}
-
-void Pty::addEnvironmentVariables(const QStringList& environment)
-{
-    QListIterator<QString> iter(environment);
-    while (iter.hasNext())
-    {
-        QString pair = iter.next();
-
-        // split on the first '=' character
-        int pos = pair.indexOf('=');
-        
-        if ( pos >= 0 )
-        {
-            QString variable = pair.left(pos);
-            QString value = pair.mid(pos+1);
-
-            //kDebug() << "Setting environment pair" << variable <<
-            //    " set to " << value;
-
-            setEnvironment(variable,value);
-        }
-    }
-}
-
-int Pty::start(const QString& program, 
-               const QStringList& programArguments, 
-               const QStringList& environment, 
-               ulong winid, 
-               bool addToUtmp,
-               int masterFd,
-               int slaveFd
-//               const QString& dbusService,
-//               const QString& dbusSession)
-		)
-{
-  clearArguments();
-
-  setBinaryExecutable(program.toLatin1());
-
-  addEnvironmentVariables(environment);
-
-  QStringListIterator it( programArguments );
-  while (it.hasNext())
-    arguments.append( it.next().toUtf8() );
-
-//  if ( !dbusService.isEmpty() )
-//     setEnvironment("KONSOLE_DBUS_SERVICE",dbusService);
-//  if ( !dbusSession.isEmpty() )
-//     setEnvironment("KONSOLE_DBUS_SESSION", dbusSession);
-
-  setEnvironment("WINDOWID", QString::number(winid));
-
-  // unless the LANGUAGE environment variable has been set explicitly
-  // set it to a null string
-  // this fixes the problem where KCatalog sets the LANGUAGE environment
-  // variable during the application's startup to something which
-  // differs from LANG,LC_* etc. and causes programs run from
-  // the terminal to display mesages in the wrong language
-  //
-  // this can happen if LANG contains a language which KDE
-  // does not have a translation for
-  //
-  // BR:149300
-  if (!environment.contains("LANGUAGE"))
-      setEnvironment("LANGUAGE",QString());
-
-  setUsePty(All, addToUtmp, masterFd, slaveFd);
-
-  pty()->open();
-  
-  struct ::termios ttmode;
-  pty()->tcGetAttr(&ttmode);
-  if (!_xonXoff)
-    ttmode.c_iflag &= ~(IXOFF | IXON);
-  else
-    ttmode.c_iflag |= (IXOFF | IXON);
-#ifdef IUTF8 // XXX not a reasonable place to check it.
-  if (!_utf8)
-    ttmode.c_iflag &= ~IUTF8;
-  else
-    ttmode.c_iflag |= IUTF8;
-#endif
-
-  if (_eraseChar != 0)
-  	ttmode.c_cc[VERASE] = _eraseChar;
-  
-  if (!pty()->tcSetAttr(&ttmode))
-    qWarning("Unable to set terminal attributes.");
-  
-  pty()->setWinSize(_windowLines, _windowColumns);
-
-  if ( K3Process::start(NotifyOnExit, (Communication) (Stdin | Stdout)) == false )
-     return -1;
-
-  resume(); // Start...
-  return 0;
-
-}
-
-void Pty::setWriteable(bool writeable)
-{
-  struct stat sbuf;
-  stat(pty()->ttyName(), &sbuf);
-  if (writeable)
-    chmod(pty()->ttyName(), sbuf.st_mode | S_IWGRP);
-  else
-    chmod(pty()->ttyName(), sbuf.st_mode & ~(S_IWGRP|S_IWOTH));
-}
-
-Pty::Pty()
-    : _bufferFull(false),
-      _windowColumns(0),
-      _windowLines(0),
-      _eraseChar(0),
-      _xonXoff(true),
-      _utf8(true)
-{
-  connect(this, SIGNAL(receivedStdout(K3Process *, char *, int )),
-	  this, SLOT(dataReceived(K3Process *,char *, int)));
-  connect(this, SIGNAL(processExited(K3Process *)),
-          this, SLOT(donePty()));
-  connect(this, SIGNAL(wroteStdin(K3Process *)),
-          this, SLOT(writeReady()));
-  _pty = new KPty;
-
-  setUsePty(All, false, -1, -1); // utmp will be overridden later
-}
-
-Pty::Pty(int masterFd, int slaveFd)
-    : _bufferFull(false),
-      _windowColumns(0),
-      _windowLines(0),
-      _eraseChar(0),
-      _xonXoff(true),
-      _utf8(true)
-{
-  connect(this, SIGNAL(receivedStdout(K3Process *, char *, int )),
-          this, SLOT(dataReceived(K3Process *,char *, int)));
-  connect(this, SIGNAL(processExited(K3Process *)),
-          this, SLOT(donePty()));
-  connect(this, SIGNAL(wroteStdin(K3Process *)),
-          this, SLOT(writeReady()));
-  _pty = new KPty(masterFd, slaveFd);
-
-  setUsePty(All, false, masterFd, slaveFd); // utmp will be overridden later
-}
-
-Pty::~Pty()
-{
-    delete _pty;
-}
-
-void Pty::writeReady()
-{
-  _pendingSendJobs.erase(_pendingSendJobs.begin());
-  _bufferFull = false;
-  doSendJobs();
-}
-
-void Pty::doSendJobs() {
-  if(_pendingSendJobs.isEmpty())
-  {
-     emit bufferEmpty(); 
-     return;
-  }
-  
-  SendJob& job = _pendingSendJobs.first();
-
-  
-  if (!writeStdin( job.data(), job.length() ))
-  {
-    qWarning("Pty::doSendJobs - Could not send input data to terminal process.");
-    return;
-  }
-  _bufferFull = true;
-}
-
-void Pty::appendSendJob(const char* s, int len)
-{
-  _pendingSendJobs.append(SendJob(s,len));
-}
-
-void Pty::sendData(const char* s, int len)
-{
-  appendSendJob(s,len);
-  if (!_bufferFull)
-     doSendJobs();
-}
-
-void Pty::dataReceived(K3Process *,char *buf, int len)
-{
-  emit receivedData(buf,len);
-}
-
-void Pty::lockPty(bool lock)
-{
-  if (lock)
-    suspend();
-  else
-    resume();
-}
-
-int Pty::foregroundProcessGroup() const
-{
-    int pid = tcgetpgrp(pty()->masterFd());
-
-    if ( pid != -1 )
-    {
-        return pid;
-    } 
-
-    return 0;
-}
-
-//#include "moc_Pty.cpp"
diff --git a/libqterminal/Pty.h b/libqterminal/Pty.h
deleted file mode 100644
--- a/libqterminal/Pty.h
+++ /dev/null
@@ -1,247 +0,0 @@
-/*
-    This file is part of Konsole, KDE's terminal emulator. 
-    
-    Copyright (C) 2007 by Robert Knight <robertknight@gmail.com>
-    Copyright (C) 1997,1998 by Lars Doelle <lars.doelle@on-line.de>
-
-    Rewritten for QT4 by e_k <e_k at users.sourceforge.net>, Copyright (C)2008
-
-    This program is free software; you can redistribute it and/or modify
-    it under the terms of the GNU General Public License as published by
-    the Free Software Foundation; either version 2 of the License, or
-    (at your option) any later version.
-
-    This program is distributed in the hope that it will be useful,
-    but WITHOUT ANY WARRANTY; without even the implied warranty of
-    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-    GNU General Public License for more details.
-
-    You should have received a copy of the GNU General Public License
-    along with this program; if not, write to the Free Software
-    Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
-    02110-1301  USA.
-*/
-
-#ifndef PTY_H
-#define PTY_H
-
-// Qt
-#include <QtCore/QStringList>
-#include <QtCore/QVector>
-#include <QtCore/QList>
-#include <QtCore>
-
-#include "k3process.h"
-
-
-namespace Konsole
-{
-
-/**
- * The Pty class is used to start the terminal process, 
- * send data to it, receive data from it and manipulate 
- * various properties of the pseudo-teletype interface
- * used to communicate with the process.
- *
- * To use this class, construct an instance and connect
- * to the sendData slot and receivedData signal to
- * send data to or receive data from the process.
- *
- * To start the terminal process, call the start() method
- * with the program name and appropriate arguments. 
- */
-class Pty: public K3Process
-{
-Q_OBJECT
-
-  public:
-    
-    /** 
-     * Constructs a new Pty.
-     * 
-     * Connect to the sendData() slot and receivedData() signal to prepare
-     * for sending and receiving data from the terminal process.
-     *
-     * To start the terminal process, call the run() method with the 
-     * name of the program to start and appropriate arguments.
-     */
-    Pty();
-    Pty(int masterFd, int slaveFd);
-
-    ~Pty();
-
-    /**
-     * Starts the terminal process.  
-     *
-     * Returns 0 if the process was started successfully or non-zero
-     * otherwise.
-     *
-     * @param program Path to the program to start
-     * @param arguments Arguments to pass to the program being started
-     * @param environment A list of key=value pairs which will be added
-     * to the environment for the new process.  At the very least this
-     * should include an assignment for the TERM environment variable.
-     * @param winid Specifies the value of the WINDOWID environment variable
-     * in the process's environment.
-     * @param addToUtmp Specifies whether a utmp entry should be created for
-     * the pty used.  See K3Process::setUsePty() 
-     * @param dbusService Specifies the value of the KONSOLE_DBUS_SERVICE 
-     * environment variable in the process's environment.
-     * @param dbusSession Specifies the value of the KONSOLE_DBUS_SESSION
-     * environment variable in the process's environment. 
-     */
-    int start( const QString& program, 
-               const QStringList& arguments, 
-               const QStringList& environment, 
-               ulong winid, 
-               bool addToUtmp,
-               int masterFd,
-               int slaveFd
-//               const QString& dbusService,
-//               const QString& dbusSession
-             );
-
-    /** TODO: Document me */
-    void setWriteable(bool writeable);
-
-    /** 
-     * Enables or disables Xon/Xoff flow control.
-     */
-    void setXonXoff(bool on);
-
-    /** 
-     * Sets the size of the window (in lines and columns of characters) 
-     * used by this teletype.
-     */
-    void setWindowSize(int lines, int cols);
-    
-    /** Returns the size of the window used by this teletype.  See setWindowSize() */
-    QSize windowSize() const;
-
-    /** TODO Document me */
-    void setErase(char erase);
-
-	/** */
-	char erase() const;
-
-    /**
-     * Returns the process id of the teletype's current foreground
-     * process.  This is the process which is currently reading
-     * input sent to the terminal via. sendData()
-     *
-     * If there is a problem reading the foreground process group,
-     * 0 will be returned.
-     */
-    int foregroundProcessGroup() const;
-   
-    /**
-     * Returns whether the buffer used to send data to the
-     * terminal process is full.
-     */
-    bool bufferFull() const { return _bufferFull; }
-
-
-  public slots:
-
-    /**
-     * Put the pty into UTF-8 mode on systems which support it.
-     */
-    void setUtf8Mode(bool on);
-
-    /**
-     * Suspend or resume processing of data from the standard 
-     * output of the terminal process.
-     *
-     * See K3Process::suspend() and K3Process::resume()
-     *
-     * @param lock If true, processing of output is suspended,
-     * otherwise processing is resumed.
-     */
-    void lockPty(bool lock);
-    
-    /** 
-     * Sends data to the process currently controlling the 
-     * teletype ( whose id is returned by foregroundProcessGroup() )
-     *
-     * @param buffer Pointer to the data to send.
-     * @param length Length of @p buffer.
-     */
-    void sendData(const char* buffer, int length);
-
-  signals:
-
-    /**
-     * Emitted when the terminal process terminates.
-     *
-     * @param exitCode The status code which the process exited with.
-     */
-    void done(int exitCode);
-
-    /**
-     * Emitted when a new block of data is received from
-     * the teletype.
-     *
-     * @param buffer Pointer to the data received.
-     * @param length Length of @p buffer
-     */
-    void receivedData(const char* buffer, int length);
-    
-    /**
-     * Emitted when the buffer used to send data to the terminal
-     * process becomes empty, i.e. all data has been sent.
-     */
-    void bufferEmpty();
-    
-
-  private slots:
-    
-    // called when terminal process exits
-    void donePty();
-    // called when data is received from the terminal process 
-    void dataReceived(K3Process*, char* buffer, int length);
-    // sends the first enqueued buffer of data to the
-    // terminal process
-    void doSendJobs();
-    // called when the terminal process is ready to
-    // receive more data
-    void writeReady();
-
-  private:
-    // takes a list of key=value pairs and adds them
-    // to the environment for the process
-    void addEnvironmentVariables(const QStringList& environment);
-
-    // enqueues a buffer of data to be sent to the 
-    // terminal process
-    void appendSendJob(const char* buffer, int length);
-   
-    // a buffer of data in the queue to be sent to the 
-    // terminal process 
-    class SendJob {
-	public:
-      		SendJob() {}
-      		SendJob(const char* b, int len) : buffer(len)
-		{
-			memcpy( buffer.data() , b , len );
-        }
-	
-		const char* data() const { return buffer.constData(); }
-		int length() const { return buffer.size(); }	
-	private:
-      		QVector<char> buffer;
-    };
-
-    QList<SendJob> _pendingSendJobs;
-    bool _bufferFull;
-
-    int  _windowColumns; 
-    int  _windowLines;
-    char _eraseChar;
-    bool _xonXoff;
-    bool _utf8;
-    KPty *_pty;
-};
-
-}
-
-#endif // PTY_H
diff --git a/libqterminal/QTerminal.cpp b/libqterminal/QTerminal.cpp
--- a/libqterminal/QTerminal.cpp
+++ b/libqterminal/QTerminal.cpp
@@ -15,18 +15,16 @@
     the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
     Boston, MA 02110-1301, USA.
 */
 						
 
 #include "QTerminal.h"
 #include "pty.h"
 
-using namespace Konsole;
-
 QTerminal::QTerminal(QWidget *parent)
     : QWidget(parent) {
     setMinimumSize(600, 400);
     init();
     
     setFocus(Qt::OtherFocusReason);
     m_terminalDisplay->resize(this->size());
     
diff --git a/libqterminal/QTerminal.h b/libqterminal/QTerminal.h
--- a/libqterminal/QTerminal.h
+++ b/libqterminal/QTerminal.h
@@ -19,18 +19,16 @@
 
 #ifndef Q_TERMINAL
 #define Q_TERMINAL
 
 #include <QtGui>
 #include "Session.h"
 #include "TerminalDisplay.h"
 
-using namespace Konsole;
-
 class QTerminal : public QWidget
 {
     Q_OBJECT
 public:
     QTerminal(QWidget *parent = 0);
     ~QTerminal();
 
     void startShellProgram();
diff --git a/libqterminal/Screen.cpp b/libqterminal/Screen.cpp
--- a/libqterminal/Screen.cpp
+++ b/libqterminal/Screen.cpp
@@ -34,18 +34,16 @@
 // Qt
 #include <QtCore/QTextStream>
 #include <QtCore/QDate>
 
 // Konsole
 #include "konsole_wcwidth.h"
 #include "TerminalCharacterDecoder.h"
 
-using namespace Konsole;
-
 //FIXME: this is emulation specific. Use false for xterm, true for ANSI.
 //FIXME: see if we can get this from terminfo.
 #define BS_CLEARS false
 
 //Macro to convert x,y position on screen to position within an image.
 //
 //Originally the image was stored as one large contiguous block of 
 //memory, so a position within the image could be represented as an
diff --git a/libqterminal/Screen.h b/libqterminal/Screen.h
--- a/libqterminal/Screen.h
+++ b/libqterminal/Screen.h
@@ -37,21 +37,16 @@
 #define MODE_Origin    0
 #define MODE_Wrap      1
 #define MODE_Insert    2
 #define MODE_Screen    3
 #define MODE_Cursor    4
 #define MODE_NewLine   5
 #define MODES_SCREEN   6
 
-namespace Konsole
-{
-
-/*!
-*/
 struct ScreenParm
 {
   int mode[MODES_SCREEN];
 };
 
 class TerminalCharacterDecoder;
 
 /**
@@ -652,11 +647,9 @@ private:
     int lastPos;
 
     // modes
     ScreenParm saveParm;
 
     static Character defaultChar;
 };
 
-}
-
 #endif // SCREEN_H
diff --git a/libqterminal/ScreenWindow.cpp b/libqterminal/ScreenWindow.cpp
--- a/libqterminal/ScreenWindow.cpp
+++ b/libqterminal/ScreenWindow.cpp
@@ -23,29 +23,28 @@
 #include "ScreenWindow.h"
 
 // Qt
 #include <QtCore>
 
 // Konsole
 #include "Screen.h"
 
-using namespace Konsole;
-
 ScreenWindow::ScreenWindow(QObject* parent)
     : QObject(parent)
 	, _windowBuffer(0)
 	, _windowBufferSize(0)
 	, _bufferNeedsUpdate(true)
 	, _windowLines(1)
     , _currentLine(0)
     , _trackOutput(true)
     , _scrollCount(0)
 {
 }
+
 ScreenWindow::~ScreenWindow()
 {
 	delete[] _windowBuffer;
 }
 void ScreenWindow::setScreen(Screen* screen)
 {
     Q_ASSERT( screen );
 
@@ -288,9 +287,8 @@ void ScreenWindow::notifyOutputChanged()
         _currentLine = qMin( _currentLine , _screen->getHistLines() );
     }
 
 	_bufferNeedsUpdate = true;
 
     emit outputChanged(); 
 }
 
-//#include "moc_ScreenWindow.cpp"
diff --git a/libqterminal/ScreenWindow.h b/libqterminal/ScreenWindow.h
--- a/libqterminal/ScreenWindow.h
+++ b/libqterminal/ScreenWindow.h
@@ -25,19 +25,16 @@
 // Qt
 #include <QtCore/QObject>
 #include <QtCore/QPoint>
 #include <QtCore/QRect>
 
 // Konsole
 #include "Character.h"
 
-namespace Konsole
-{
-
 class Screen;
 
 /**
  * Provides a window onto a section of a terminal screen.
  * This window can then be rendered by a terminal display widget ( TerminalDisplay ).
  *
  * To use the screen window, create a new ScreenWindow() instance and associated it with 
  * a terminal screen using setScreen().
@@ -247,10 +244,9 @@ private:
 
 	int  _windowLines;
     int  _currentLine; // see scrollTo() , currentLine()
     bool _trackOutput; // see setTrackOutput() , trackOutput() 
     int  _scrollCount; // count of lines which the window has been scrolled by since
                        // the last call to resetScrollCount()
 };
 
-}
 #endif // SCREENWINDOW_H
diff --git a/libqterminal/Session.cpp b/libqterminal/Session.cpp
--- a/libqterminal/Session.cpp
+++ b/libqterminal/Session.cpp
@@ -33,23 +33,21 @@
 #include <QtGui/QApplication>
 #include <QtCore/QByteRef>
 #include <QtCore/QDir>
 #include <QtCore/QFile>
 #include <QtCore/QRegExp>
 #include <QtCore/QStringList>
 #include <QtCore>
 
-#include "Pty.h"
+#include "PseudoTerminal.h"
 #include "TerminalDisplay.h"
 #include "ShellCommand.h"
 #include "Vt102Emulation.h"
 
-using namespace Konsole;
-
 int Session::lastSessionId = 0;
 
 Session::Session(int masterFd, int slaveFd) :
     _shellProcess(0)
   , _emulation(0)
   , _monitorActivity(false)
   , _monitorSilence(false)
   , _notifiedActivity(false)
@@ -74,19 +72,19 @@ Session::Session(int masterFd, int slave
 
     //prepare DBus communication
     //    new SessionAdaptor(this);
     _sessionId = ++lastSessionId;
     //    QDBusConnection::sessionBus().registerObject(QLatin1String("/Sessions/")+QString::number(_sessionId), this);
 
     //create teletype for I/O with shell process
     if(_masterFd >= 0) {
-        _shellProcess = new Pty(_masterFd, _slaveFd);
+        _shellProcess = new PseudoTerminal(_masterFd, _slaveFd);
     } else {
-        _shellProcess = new Pty();
+        _shellProcess = new PseudoTerminal();
     }
 
     //create emulation backend
     _emulation = new Vt102Emulation();
 
     connect( _emulation, SIGNAL( titleChanged( int, const QString & ) ),
              this, SLOT( setUserTitle( int, const QString & ) ) );
     connect( _emulation, SIGNAL( stateSet(int) ),
@@ -1024,9 +1022,8 @@ void SessionGroup::disconnectPair(Sessio
     {
         qDebug() << "Disconnecting session " << master->nameTitle() << "from" << other->nameTitle();
 
         disconnect( master->emulation() , SIGNAL(sendData(const char*,int)) , other->emulation() ,
                     SLOT(sendString(const char*,int)) );
     }
 }
 
-//#include "moc_Session.cpp"
diff --git a/libqterminal/Session.h b/libqterminal/Session.h
--- a/libqterminal/Session.h
+++ b/libqterminal/Session.h
@@ -30,23 +30,19 @@
 #include <QtCore>
 #include <QWidget>
 
 // Konsole
 #include "History.h"
 
 class KProcess;
 
-namespace Konsole
-{
-
 class Emulation;
-class Pty;
+class PseudoTerminal;
 class TerminalDisplay;
-//class ZModemDialog;
 
 /**
  * Represents a terminal session consisting of a pseudo-teletype and a terminal emulation.
  * The pseudo-teletype (or PTY) handles I/O between the terminal process and Konsole.
  * The terminal emulation ( Emulation and subclasses ) processes the output stream from the
  * PTY and produces a character image which is then shown on views connected to the session.
  *
  * Each Session can be connected to one or more views by using the addView() method.
@@ -484,17 +480,17 @@ private slots:
 
 private:
 
   void updateTerminalSize();
   WId windowId() const;
 
   int            _uniqueIdentifier;
 
-  Pty*          _shellProcess;
+  PseudoTerminal*          _shellProcess;
   Emulation*    _emulation;
 
   QList<TerminalDisplay*> _views;
 
   bool           _monitorActivity;
   bool           _monitorSilence;
   bool           _notifiedActivity;
   bool           _masterMode;
@@ -612,11 +608,9 @@ private:
     QList<Session*> masters() const;
 
     // maps sessions to their master status
     QHash<Session*,bool> _sessions;
 
     int _masterMode;
 };
 
-}
-
 #endif
diff --git a/libqterminal/ShellCommand.cpp b/libqterminal/ShellCommand.cpp
--- a/libqterminal/ShellCommand.cpp
+++ b/libqterminal/ShellCommand.cpp
@@ -20,19 +20,16 @@
 */
 
 // Own
 #include "ShellCommand.h"
 
 //some versions of gcc(4.3) require explicit include
 #include <cstdlib>
 
-
-using namespace Konsole;
-
 // expands environment variables in 'text'
 // function copied from kdelibs/kio/kio/kurlcompletion.cpp
 static bool expandEnv(QString& text);
 
 ShellCommand::ShellCommand(const QString& fullCommand)
 {
     bool inQuotes = false;
 
diff --git a/libqterminal/ShellCommand.h b/libqterminal/ShellCommand.h
--- a/libqterminal/ShellCommand.h
+++ b/libqterminal/ShellCommand.h
@@ -20,19 +20,16 @@
 */
 
 #ifndef SHELLCOMMAND_H
 #define SHELLCOMMAND_H
 
 // Qt
 #include <QtCore/QStringList>
 
-namespace Konsole
-{
-
 /** 
  * A class to parse and extract information about shell commands. 
  *
  * ShellCommand can be used to:
  *
  * <ul>
  *      <li>Take a command-line (eg "/bin/sh -c /path/to/my/script") and split it
  *          into its component parts (eg. the command "/bin/sh" and the arguments
@@ -83,12 +80,10 @@ public:
 
     /** Expands environment variables in each string in @p list. */
     static QStringList expand(const QStringList& items);
 
 private:
     QStringList _arguments;    
 };
 
-}
-
 #endif // SHELLCOMMAND_H
 
diff --git a/libqterminal/TerminalCharacterDecoder.cpp b/libqterminal/TerminalCharacterDecoder.cpp
--- a/libqterminal/TerminalCharacterDecoder.cpp
+++ b/libqterminal/TerminalCharacterDecoder.cpp
@@ -22,19 +22,16 @@
 */
 
 // Own
 #include "TerminalCharacterDecoder.h"
 
 // Qt
 #include <QtCore/QTextStream>
 
-
-using namespace Konsole;
-
 PlainTextDecoder::PlainTextDecoder()
  : _output(0)
  , _includeTrailingWhitespace(true)
 {
 
 }
 void PlainTextDecoder::setTrailingWhitespace(bool enable)
 {
diff --git a/libqterminal/TerminalCharacterDecoder.h b/libqterminal/TerminalCharacterDecoder.h
--- a/libqterminal/TerminalCharacterDecoder.h
+++ b/libqterminal/TerminalCharacterDecoder.h
@@ -23,19 +23,16 @@
 
 #ifndef TERMINAL_CHARACTER_DECODER_H
 #define TERMINAL_CHARACTER_DECODER_H
 
 #include "Character.h"
 
 class QTextStream;
 
-namespace Konsole
-{
-
 /**
  * Base class for terminal character decoders
  *
  * The decoder converts lines of terminal characters which consist of a unicode character, foreground
  * and background colours and other appearance-related properties into text strings.
  *
  * Derived classes may produce either plain text with no other colour or appearance information, or
  * they may produce text which incorporates these additional properties. 
@@ -129,11 +126,9 @@ private:
 	const ColorEntry* _colorTable;
     bool _innerSpanOpen; 
 	quint8 _lastRendition;
 	CharacterColor _lastForeColor;
 	CharacterColor _lastBackColor;
 
 };
 
-}
-
 #endif
diff --git a/libqterminal/TerminalDisplay.cpp b/libqterminal/TerminalDisplay.cpp
--- a/libqterminal/TerminalDisplay.cpp
+++ b/libqterminal/TerminalDisplay.cpp
@@ -43,18 +43,16 @@
 #include <QtCore>
 #include <QtGui>
 
 #include "Filter.h"
 #include "konsole_wcwidth.h"
 #include "ScreenWindow.h"
 #include "TerminalCharacterDecoder.h"
 
-using namespace Konsole;
-
 #ifndef loc
 #define loc(X,Y) ((Y)*_columns+(X))
 #endif
 
 #define yMouseScroll 1
 
 #define REPCHAR   "ABCDEFGHIJKLMNOPQRSTUVWXYZ" \
                   "abcdefgjijklmnopqrstuvwxyz" \
@@ -145,17 +143,17 @@ static inline bool isLineChar(quint16 c)
 static inline bool isLineCharString(const QString& string)
 {
 		return (string.length() > 0) && (isLineChar(string.at(0).unicode()));
 }
 						
 
 // assert for i in [0..31] : vt100extended(vt100_graphics[i]) == i.
 
-unsigned short Konsole::vt100_graphics[32] =
+unsigned short vt100_graphics[32] =
 { // 0/8     1/9    2/10    3/11    4/12    5/13    6/14    7/15
   0x0020, 0x25C6, 0x2592, 0x2409, 0x240c, 0x240d, 0x240a, 0x00b0,
   0x00b1, 0x2424, 0x240b, 0x2518, 0x2510, 0x250c, 0x2514, 0x253c,
   0xF800, 0xF801, 0x2500, 0xF803, 0xF804, 0x251c, 0x2524, 0x2534,
   0x252c, 0x2502, 0x2264, 0x2265, 0x03C0, 0x2260, 0x00A3, 0x00b7
 };
 
 void TerminalDisplay::fontChange(const QFont&)
@@ -2738,10 +2736,8 @@ uint TerminalDisplay::lineSpacing() cons
   return _lineSpacing;
 }
 
 void TerminalDisplay::setLineSpacing(uint i)
 {
   _lineSpacing = i;
   setVTFont(font()); // Trigger an update.
 }
-
-//#include "moc_TerminalDisplay.cpp"
diff --git a/libqterminal/TerminalDisplay.h b/libqterminal/TerminalDisplay.h
--- a/libqterminal/TerminalDisplay.h
+++ b/libqterminal/TerminalDisplay.h
@@ -41,21 +41,16 @@ class QEvent;
 class QFrame;
 class QGridLayout;
 class QKeyEvent;
 class QScrollBar;
 class QShowEvent;
 class QHideEvent;
 class QWidget;
 
-//class KMenu;
-
-namespace Konsole
-{
-
 extern unsigned short vt100_graphics[32];
 
 class ScreenWindow;
 
 /**
  * A widget which displays output from a terminal emulation and sends input keypresses and mouse activity
  * to the terminal.
  *
@@ -755,11 +750,9 @@ private:
 
 public:
     static void setTransparencyEnabled(bool enable)
     {
         HAVE_TRANSPARENCY = enable;
     }
 };
 
-}
-
 #endif // TERMINALDISPLAY_H
diff --git a/libqterminal/Vt102Emulation.cpp b/libqterminal/Vt102Emulation.cpp
--- a/libqterminal/Vt102Emulation.cpp
+++ b/libqterminal/Vt102Emulation.cpp
@@ -18,19 +18,16 @@
     along with this program; if not, write to the Free Software
     Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
     02110-1301  USA.
 */
 
 // Own
 #include "Vt102Emulation.h"
 
-//#include <config-konsole.h>
-
-
 #if defined(__osf__) || defined(__APPLE__)
 #define AVOID_XKB
 #endif
 
 // this allows konsole to be compiled without XKB and XTEST extensions
 // even though it might be available on a particular system.
 #if defined(AVOID_XKB)
 #undef HAVE_XKB
@@ -54,17 +51,16 @@
 #include "KeyboardTranslator.h"
 #include "Screen.h"
 
 #if defined(HAVE_XKB)
 void scrolllock_set_off();
 void scrolllock_set_on();
 #endif
 
-using namespace Konsole;
 
 /* VT102 Terminal Emulation
 
    This class puts together the screens, the pty and the widget to a
    complete terminal emulation. Beside combining it's componentes, it
    handles the emulations's protocol.
 
    This module consists of the following sections:
diff --git a/libqterminal/Vt102Emulation.h b/libqterminal/Vt102Emulation.h
--- a/libqterminal/Vt102Emulation.h
+++ b/libqterminal/Vt102Emulation.h
@@ -42,19 +42,16 @@
 #define MODE_AppKeyPad (MODES_SCREEN+2)
 #define MODE_Mouse1000 (MODES_SCREEN+3)
 #define MODE_Mouse1001 (MODES_SCREEN+4)
 #define MODE_Mouse1002 (MODES_SCREEN+5)
 #define MODE_Mouse1003 (MODES_SCREEN+6)
 #define MODE_Ansi      (MODES_SCREEN+7)
 #define MODE_total     (MODES_SCREEN+8)
 
-namespace Konsole
-{
-
 struct DECpar
 {
   bool mode[MODE_total];
 };
 
 struct CharCodes
 {
   // coding info
@@ -182,11 +179,9 @@ private:
   //or window title.
   //these calls occur when certain escape sequences are seen in the 
   //output from the terminal
   QHash<int,QString> _pendingTitleUpdates;
   QTimer* _titleUpdateTimer;
   
 };
 
-}
-
 #endif // VT102EMULATION_H
diff --git a/libqterminal/k3process.cpp b/libqterminal/k3process.cpp
--- a/libqterminal/k3process.cpp
+++ b/libqterminal/k3process.cpp
@@ -60,20 +60,16 @@
 #include <unistd.h>
 #include <pwd.h>
 #include <grp.h>
 
 #include <QtCore/QMap>
 #include <QtCore/QFile>
 #include <QtCore/QSocketNotifier>
 
-//#include <kdebug.h>
-//#include <kstandarddirs.h>
-//#include <kuser.h>
-
 
 //////////////////
 // private data //
 //////////////////
 
 class K3ProcessPrivate {
 public:
    K3ProcessPrivate() :
@@ -1067,10 +1063,8 @@ QString K3ShellProcess::quote(const QStr
     return K3Process::quote(arg);
 }
 
 bool K3ShellProcess::start(RunMode runmode, Communication comm)
 {
   return K3Process::start(runmode, comm);
 }
 
-
-//#include "moc_k3process.cpp"
diff --git a/libqterminal/kpty.cpp b/libqterminal/kpty.cpp
--- a/libqterminal/kpty.cpp
+++ b/libqterminal/kpty.cpp
@@ -122,19 +122,16 @@ extern "C" {
 #else
 # if defined(_HPUX_SOURCE) || defined(__CYGWIN__)
 #  define _tcsetattr(fd, ttmode) tcsetattr(fd, TCSANOW, ttmode)
 # else
 #  define _tcsetattr(fd, ttmode) ioctl(fd, TCSETS, (char *)ttmode)
 # endif
 #endif
 
-//#include <kdebug.h>
-//#include <kstandarddirs.h>	// findExe
-
 #include <QtCore>
 
 // not defined on HP-UX for example
 #ifndef CTRL
 # define CTRL(x) ((x) & 037)
 #endif
 
 #define TTY_GROUP "tty"
diff --git a/libqterminal/libqterminal.pro b/libqterminal/libqterminal.pro
--- a/libqterminal/libqterminal.pro
+++ b/libqterminal/libqterminal.pro
@@ -19,35 +19,35 @@ HEADERS  = BlockArray.h \
            History.h \
            k3process.h \
            k3processcontroller.h \
            KeyboardTranslator.h \
            konsole_wcwidth.h \
            kpty.h \
            kpty_p.h \
            LineFont.h \
-           Pty.h \
            QTerminal.h \
            Screen.h \
            ScreenWindow.h \
            Session.h \
            ShellCommand.h \
            TerminalCharacterDecoder.h \
            TerminalDisplay.h \
-           Vt102Emulation.h
+           Vt102Emulation.h \
+    PseudoTerminal.h
 SOURCES  = BlockArray.cpp \
            Emulation.cpp \
            Filter.cpp \
            History.cpp \
            k3process.cpp \
            k3processcontroller.cpp \
            KeyboardTranslator.cpp \
            konsole_wcwidth.cpp \
            kpty.cpp \
-           Pty.cpp \
            QTerminal.cpp \
            Screen.cpp \
            ScreenWindow.cpp \
            Session.cpp \
            ShellCommand.cpp \
            TerminalCharacterDecoder.cpp \
            TerminalDisplay.cpp \
-           Vt102Emulation.cpp
+           Vt102Emulation.cpp \
+    PseudoTerminal.cpp
