# HG changeset patch
# User jwe
# Date 1033080205 0
#      Thu Sep 26 22:43:25 2002 +0000
# Node ID e97fb79fc1d541bb4eefc6231e88be8ec440cf68
# Parent  47d3baea432d18d7be931429f183017329f3ce9f
[project @ 2002-09-26 22:43:25 by jwe]

diff --git a/ChangeLog b/ChangeLog
--- a/ChangeLog
+++ b/ChangeLog
@@ -1,8 +1,20 @@
+2002-09-25  Mumit Khan  <khan@nanotech.wisc.edu>
+ 
+ 	* aclocal.m4 (OCTAVE_MKDIR_TAKES_ONE_ARG): New macro to determine if
+ 	host mkdir accepts only one arg instead of the usual two.
+ 	* configure.in: Use. Check for direct.h.
+ 	(mkdir): Define.
+ 
+2002-09-26  Paul Kienzle <pkienzle@users.sf.net>
+
+	* configure.in: Check for conio.h.
+	Check for _kbhit.
+
 2002-09-26  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* configure.in (AH_BOTTOM): Don't define
 	USE_PRAGMA_INTERFACE_IMPLEMENTATION.
 
 2002-09-26  Paul Kienzle <pkienzle@users.sf.net>
 
 	* configure.in: Fix syntax errors in !HAVE_XXX_T.
diff --git a/aclocal.m4 b/aclocal.m4
--- a/aclocal.m4
+++ b/aclocal.m4
@@ -638,9 +638,29 @@ EOF
       echo "configure: failed program was:" >&AS_MESSAGE_LOG_FD
       cat conftest.$ac_ext >&AS_MESSAGE_LOG_FD
     fi
     AC_LANG_POP(C++)
   ])
   AC_MSG_RESULT($octave_cv_cxx_abi)
   AC_DEFINE_UNQUOTED(CXX_ABI, $octave_cv_cxx_abi, [Define to the C++ ABI your compiler uses.])
 ])
-
+dnl
+dnl Determine if mkdir accepts only one argument instead dnl of the usual 2.
+dnl
+AC_DEFUN(OCTAVE_MKDIR_TAKES_ONE_ARG,
+[AC_CACHE_CHECK([if mkdir takes one argument], octave_cv_mkdir_takes_one_arg,
+[AC_TRY_COMPILE([
+#include <sys/types.h>
+#ifdef HAVE_SYS_STAT_H
+# include <sys/stat.h>
+#endif
+#ifdef HAVE_UNISTD_H
+# include <unistd.h>
+#endif
+#ifdef HAVE_DIRECT_H
+# include <direct.h>
+#endif], [mkdir ("foo", 0);],
+        octave_cv_mkdir_takes_one_arg=no, octave_cv_mkdir_takes_one_arg=yes)])
+if test $octave_cv_mkdir_takes_one_arg = yes ; then
+  AC_DEFINE(MKDIR_TAKES_ONE_ARG, 1, [Define if host mkdir takes a single argument.])
+fi
+])
diff --git a/configure.in b/configure.in
--- a/configure.in
+++ b/configure.in
@@ -17,17 +17,17 @@ dnl Copyright (C) 1996, 1997 John W. Eat
 ### for more details.
 ### 
 ### You should have received a copy of the GNU General Public License
 ### along with Octave; see the file COPYING.  If not, write to the Free
 ### Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ### 02111-1307, USA. 
 
 AC_INIT
-AC_REVISION($Revision: 1.368 $)
+AC_REVISION($Revision: 1.369 $)
 AC_PREREQ(2.52)
 AC_CONFIG_SRCDIR([src/octave.cc])
 AC_CONFIG_HEADER(config.h)
 
 AC_DEFINE(OCTAVE_SOURCE, 1, [Define if this is Octave.])
   
 OCTAVE_HOST_TYPE
 
@@ -787,17 +787,17 @@ OCTAVE_STRING_NPOS
 
 AC_HEADER_STDC
 AC_HEADER_DIRENT
 AC_HEADER_TIME
 AC_HEADER_SYS_WAIT
 
 ### C headers
 
-AC_CHECK_HEADERS(assert.h curses.h dlfcn.h fcntl.h float.h \
+AC_CHECK_HEADERS(assert.h curses.h direct.h dlfcn.h fcntl.h float.h \
   floatingpoint.h grp.h ieeefp.h limits.h memory.h nan.h \
   ncurses.h poll.h pwd.h stdlib.h string.h sys/ioctl.h \
   sys/param.h sys/poll.h sys/resource.h sys/select.h sys/stat.h \
   sys/time.h sys/times.h sys/types.h sys/utsname.h termcap.h \
   unistd.h varargs.h)
 
 ### C++ headers
 
@@ -806,16 +806,17 @@ AC_CHECK_HEADERS(sstream)
 AC_LANG_POP(C++)
 
 have_termios_h=no
 AC_CHECK_HEADERS($TERMIOS_H, have_termios_h=yes)
 AC_CHECK_HEADERS(termio.h, have_termio_h=yes, have_termio_h=no)
 AC_CHECK_HEADERS(sgtty.h, have_sgtty_h=yes, have_sgtty_h=no)
 AC_CHECK_HEADERS(glob.h, have_glob_h=yes, have_glob_h=no)
 AC_CHECK_HEADERS(fnmatch.h, have_fnmatch_h=yes, have_fnmatch_h=no)
+AC_CHECK_HEADERS(conio.h, have_conio_h=yes, have_conio_h=no)
 
 ### I'm told that termios.h is broken on NeXT systems.
 
 case "$canonical_host_type" in
   *-*-nextstep*)
     if test "$have_termios_h" = yes; then
       AC_MSG_WARN([Ignoring termios.h on NeXT systems.])
       have_termios_h=no
@@ -863,17 +864,17 @@ AC_SUBST(GLOB_DIR)
 AC_SUBST(LIBGLOB)
 AC_SUBST(GLOB_INCFLAGS)
 
 ### Checks for functions and variables.
 
 AC_CHECK_FUNCS(atexit bcopy bzero dup2 endgrent endpwent execvp \
   fcntl fork getcwd getegid geteuid getgid getgrent getgrgid \
   getgrnam getpgrp getpid getppid getpwent \
-  getpwuid gettimeofday getuid getwd link localtime_r lstat \
+  getpwuid gettimeofday getuid getwd _kbhit link localtime_r lstat \
   memmove mkdir mkfifo on_exit pipe poll putenv readlink rename \
   rindex rmdir select setgrent setpwent setvbuf sigaction sigpending \
   sigprocmask sigsuspend stat strcasecmp strdup strerror strftime \
   stricmp strncasecmp strnicmp strptime symlink tempnam umask unlink \
   usleep vfprintf vsprintf vsnprintf waitpid)
 
 OCTAVE_SMART_PUTENV
 
@@ -1026,16 +1027,19 @@ AC_CHECK_FUNCS(acosh asinh atanh erf erf
 AC_CHECK_MEMBERS([struct stat.st_blksize, struct stat.st_blocks, struct stat.st_rdev])
 
 AC_STRUCT_TM
 AC_STRUCT_TIMEZONE
 AC_FUNC_CLOSEDIR_VOID
 
 AC_CHECK_MEMBERS(struct group.gr_passwd)
 
+# mkdir takes a single argument on some systems.
+OCTAVE_MKDIR_TAKES_ONE_ARG
+
 octave_found_termlib=no
 for termlib in ncurses curses termcap terminfo termlib; do
   AC_CHECK_LIB(${termlib}, tputs, [TERMLIBS="${TERMLIBS} -l${termlib}"])
   case "${TERMLIBS}" in
     *-l${termlib}*)
       LIBS="$TERMLIBS $LIBS"
       octave_found_termlib=yes
       break
@@ -1251,16 +1255,20 @@ typedef unsigned long ino_t;
 
 #if !defined(HAVE_NLINK_T)
 typedef short nlink_t;
 #endif
 
 #if !defined(HAVE_SIGSET_T)
 typedef int sigset_t;
 #endif
+
+#if defined(MKDIR_TAKES_ONE_ARG)
+#  define mkdir(a,b) mkdir(a)
+#endif
 ])
 
 ### Do the substitutions in all the Makefiles.
 
 AC_CONFIG_FILES([Makefile octMakefile Makeconf install-octave \
   test/Makefile dlfcn/Makefile \
   doc/Makefile doc/faq/Makefile doc/interpreter/Makefile \
   doc/liboctave/Makefile doc/refcard/Makefile emacs/Makefile \
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,16 @@
+2002-09-26  Paul Kienzle <pkienzle@users.sf.net>
+
+	* sysdep.cc: Include conio.h if it exists.
+	(octave_kbhit): Rename from kbhit.  Implement with _kbhit if it
+	exists. Change all callers.
+	* cutils.c (octave_sleep): New function.
+	Change all callers of sleep to use octave_sleep instead.
+
 2002-09-26  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* BaseSLList.cc, BaseSLList.h, Cell.cc, Cell.h, DLList.cc,
 	DLList.h, Map.cc, Map.h, OPERATORS/op-b-b.cc,
 	OPERATORS/op-bm-b.cc, OPERATORS/op-bm-bm.cc, OPERATORS/op-cell.cc,
 	OPERATORS/op-chm.cc, OPERATORS/op-cm-cm.cc, OPERATORS/op-cm-cs.cc,
 	OPERATORS/op-cm-m.cc, OPERATORS/op-cm-s.cc, OPERATORS/op-cs-cm.cc,
 	OPERATORS/op-cs-cs.cc, OPERATORS/op-cs-m.cc, OPERATORS/op-cs-s.cc,
@@ -39,18 +47,16 @@ 2002-09-26  John W. Eaton  <jwe@bevo.che
 	pt-jump.h, pt-loop.cc, pt-loop.h, pt-mat.cc, pt-mat.h, pt-misc.cc,
 	pt-misc.h, pt-plot.cc, pt-plot.h, pt-pr-code.cc, pt-pr-code.h,
 	pt-select.cc, pt-select.h, pt-stmt.cc, pt-stmt.h, pt-unop.cc,
 	pt-unop.h, pt.cc, pt.h, symtab.cc, symtab.h, token.cc, token.h,
 	unwind-prot.cc, unwind-prot.h:
 	If __GNUG__, use pragma interface/implementation.  Allow this to
 	be turned off by defining NO_PRAGMA_INTERFACE_IMPLEMENTATION.
 
-
-
 2002-09-26  Paul Kienzle <pkienzle@users.sf.net>
 
 	* mappers.cc (install_mapper_functions): Install erf, not xerf.
 	Install erfc, not xerfc.
 
 	* pt-bp.cc (tree_breakpoint::visit_unwind_protect_command):
 	Rename lst1 and lst2 to avoid dlgs.h conflict.
 
diff --git a/src/cutils.c b/src/cutils.c
--- a/src/cutils.c
+++ b/src/cutils.c
@@ -67,16 +67,22 @@ do_octave_usleep (unsigned int useconds)
 
   if (delay > 0)
     poll (&fd, 0, delay);
 
 #endif
 }
 
 void
+octave_sleep (unsigned int seconds)
+{
+  sleep (seconds);
+}
+
+void
 octave_usleep (unsigned int useconds)
 {
   unsigned int sec = useconds / 1000000;
   unsigned int usec = useconds % 1000000;
 
   if (sec > 0)
     sleep (sec);
 
diff --git a/src/sysdep.cc b/src/sysdep.cc
--- a/src/sysdep.cc
+++ b/src/sysdep.cc
@@ -42,16 +42,20 @@ Software Foundation, 59 Temple Place - S
 #endif
 
 #if defined (HAVE_TERMIOS_H)
 #include <termios.h>
 #elif defined (HAVE_TERMIO_H)
 #include <termio.h>
 #elif defined (HAVE_SGTTY_H)
 #include <sgtty.h>
+#endif 
+
+#if defined (HAVE_CONIO_H)
+#include <conio.h>
 #endif
 
 #if defined (HAVE_SYS_IOCTL_H)
 #include <sys/ioctl.h>
 #endif
 
 #if defined (HAVE_FLOATINGPOINT_H)
 #include <floatingpoint.h>
@@ -307,26 +311,33 @@ raw_mode (bool on, bool wait)
 #endif
 
   curr_on = on;
 }
 
 // Read one character from the terminal.
 
 int
-kbhit (bool wait)
+octave_kbhit (bool wait)
 {
+#ifdef HAVE__KBHIT
+  if (! wait && ! _kbhit ())
+    c = 0;
+  else
+    c = std::cin.get ();
+#else
   raw_mode (true, wait);
 
   int c = std::cin.get ();
 
   if (std::cin.fail () || std::cin.eof ())
     std::cin.clear ();
 
   raw_mode (false, true);
+#endif
 
   return c;
 }
 
 DEFUN (clc, , ,
   "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} clc ()\n\
 @deftypefnx {Built-in Function} {} home ()\n\
@@ -428,17 +439,17 @@ returning the empty string if no key is 
 @end deftypefn")
 {
   octave_value_list retval;
 
   // XXX FIXME XXX -- add timeout and default value args?
 
   if (interactive || forced_interactive)
     {
-      int c = kbhit (args.length () == 0);
+      int c = octave_kbhit (args.length () == 0);
 
       if (c == -1)
 	c = 0;
 
       char *s = new char [2];
       s[0] = c;
       s[1] = '\0';
       retval = s;
@@ -481,30 +492,30 @@ clc;\n\
 
       if (! error_state)
 	{
 	  if (xisnan (dval))
 	    warning ("pause: NaN is an invalid delay");
 	  else if (xisinf (dval))
 	    {
 	      flush_octave_stdout ();
-	      kbhit ();
+	      octave_kbhit ();
 	    }
 	  else
 	    {
 	      int delay = NINT (dval);
 	      if (delay > 0)
-		sleep (delay);
+		octave_sleep (delay);
 	    }
 	}
     }
   else
     {
       flush_octave_stdout ();
-      kbhit ();
+      octave_kbhit ();
     }
 
   return retval;
 }
 
 DEFUN (sleep, args, ,
   "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} sleep (@var{seconds})\n\
@@ -520,17 +531,17 @@ Suspend the execution of the program for
       if (! error_state)
 	{
 	  if (xisnan (dval))
 	    warning ("sleep: NaN is an invalid delay");
 	  else
 	    {
 	      int delay = NINT (dval);
 	      if (delay > 0)
-		sleep (delay);
+		octave_sleep (delay);
 	    }
 	}
     }
   else
     print_usage ("sleep");
 
   return retval;
 }
diff --git a/src/sysdep.h b/src/sysdep.h
--- a/src/sysdep.h
+++ b/src/sysdep.h
@@ -27,17 +27,17 @@ Software Foundation, 59 Temple Place - S
 
 #include "lo-ieee.h"
 #include "lo-sysdep.h"
 
 extern void sysdep_init (void);
 
 extern void raw_mode (bool, bool wait = true);
 
-extern int kbhit (bool wait = true);
+extern int octave_kbhit (bool wait = true);
 
 #endif
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
diff --git a/src/utils.h b/src/utils.h
--- a/src/utils.h
+++ b/src/utils.h
@@ -70,16 +70,18 @@ get_dimensions (const octave_value& a,
 extern int
 octave_format (std::ostream& os, const char *fmt, ...);
 
 extern int
 octave_vformat (std::ostream& os, const char *fmt, va_list args);
 
 extern "C" void octave_usleep (unsigned int useconds);
 
+extern "C" void octave_sleep (unsigned int seconds);
+
 extern "C" int octave_strcasecmp (const char *s1, const char *s2);
 
 extern "C" int octave_strncasecmp (const char *s1, const char *s2, size_t n);
 
 extern "C" char *octave_snprintf (const char *fmt, ...);
 
 extern "C" char *octave_vsnprintf (const char *fmt, va_list args);
 
