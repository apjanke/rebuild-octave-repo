# HG changeset patch
# User Rik <rik@octave.org>
# Date 1492831593 25200
#      Fri Apr 21 20:26:33 2017 -0700
# Node ID 206a7eb1561b90aa019df631670dadac69f012c7
# Parent  0bfdfd5870d7aca4129d4f9263d1f6a66485d1b3
Use more std:: routines in liboctave/array header files.

* MDiagArray2.h (nnz): Use std::count_if instead of hand-rolled for loop.

* dim-vector.h (all_zero): Use std::all_of instead of for loop.
* dim-vector.h (any_zero): Use std::any_of instead of for loop.
* dim-vector.h (any_neg): Use std::any_of instead of for loop.
* dim-vector.h (operator ==): Use std::equal instead of for loop.

diff --git a/liboctave/array/MDiagArray2.h b/liboctave/array/MDiagArray2.h
--- a/liboctave/array/MDiagArray2.h
+++ b/liboctave/array/MDiagArray2.h
@@ -83,29 +83,24 @@ public:
 
   MArray<T> array_value () const
   {
     return DiagArray2<T>::array_value ();
   }
 
   octave_idx_type nnz (void) const
   {
-    octave_idx_type retval = 0;
-
     const T *d = this->data ();
 
     octave_idx_type nel = this->length ();
 
-    for (octave_idx_type i = 0; i < nel; i++)
-      {
-        if (d[i] != T ())
-          retval++;
-      }
+    const T zero = T ();
 
-    return retval;
+    return std::count_if (d, d + nel,
+                          [zero] (T elem) { return elem != zero; });
   }
 
   MArray<T> diag (octave_idx_type k = 0) const
   { return DiagArray2<T>::extract_diag (k); }
 
   MDiagArray2<T> transpose (void) const { return DiagArray2<T>::transpose (); }
   MDiagArray2<T> hermitian (T (*fcn) (const T&) = 0) const
   { return DiagArray2<T>::hermitian (fcn); }
diff --git a/liboctave/array/dim-vector.h b/liboctave/array/dim-vector.h
--- a/liboctave/array/dim-vector.h
+++ b/liboctave/array/dim-vector.h
@@ -331,54 +331,34 @@ public:
         rep = r;
       }
   }
 
   std::string str (char sep = 'x') const;
 
   bool all_zero (void) const
   {
-    bool retval = true;
-
-    for (int i = 0; i < ndims (); i++)
-      {
-        if (xelem (i) != 0)
-          {
-            retval = false;
-            break;
-          }
-      }
-
-    return retval;
+    return std::all_of (rep, rep + ndims (),
+                        [] (octave_idx_type dim) { return dim == 0; });
   }
 
   bool empty_2d (void) const
   {
     return ndims () == 2 && (xelem (0) == 0 || xelem (1) == 0);
   }
 
   bool zero_by_zero (void) const
   {
     return ndims () == 2 && xelem (0) == 0 && xelem (1) == 0;
   }
 
   bool any_zero (void) const
   {
-    bool retval = false;
-
-    for (int i = 0; i < ndims (); i++)
-      {
-        if (xelem (i) == 0)
-          {
-            retval = true;
-            break;
-          }
-      }
-
-    return retval;
+    return std::any_of (rep, rep + ndims (),
+                        [] (octave_idx_type dim) { return dim == 0; });
   }
 
   int num_ones (void) const;
 
   bool all_ones (void) const
   {
     return (num_ones () == ndims ());
   }
@@ -411,24 +391,18 @@ public:
      function that is iterating over an array using octave_idx_type
      indices.
   */
 
   octave_idx_type safe_numel (void) const;
 
   bool any_neg (void) const
   {
-    int n_dims = ndims ();
-    int i;
-
-    for (i = 0; i < n_dims; i++)
-      if (xelem (i) < 0)
-        break;
-
-    return i < n_dims;
+    return std::any_of (rep, rep + ndims (),
+                        [] (octave_idx_type dim) { return dim < 0; });
   }
 
   dim_vector squeeze (void) const;
 
   //! This corresponds to cat().
   bool concat (const dim_vector& dvb, int dim);
 
   //! This corresponds to [,] (horzcat, dim = 0) and [;] (vertcat, dim = 1).
@@ -556,17 +530,17 @@ public:
 
   dim_vector cumulative (void) const
   {
     int nd = ndims ();
     dim_vector retval = alloc (nd);
 
     octave_idx_type k = 1;
     for (int i = 0; i < nd; i++)
-      retval.rep[i] = k *= rep[i];
+      retval.rep[i] = (k *= rep[i]);
 
     return retval;
   }
 
   //! Compute a linear index from an index tuple.  Dimensions are
   //! required to be cumulative.
 
   octave_idx_type cum_compute_index (const octave_idx_type *idx) const
@@ -584,36 +558,23 @@ public:
 
 inline bool
 operator == (const dim_vector& a, const dim_vector& b)
 {
   // Fast case.
   if (a.rep == b.rep)
     return true;
 
-  bool retval = true;
-
   int a_len = a.ndims ();
   int b_len = b.ndims ();
 
   if (a_len != b_len)
-    retval = false;
-  else
-    {
-      for (int i = 0; i < a_len; i++)
-        {
-          if (a(i) != b(i))
-            {
-              retval = false;
-              break;
-            }
-        }
-    }
+    return false;
 
-  return retval;
+  return std::equal (a.rep, a.rep + a_len, b.rep);
 }
 
 inline bool
 operator != (const dim_vector& a, const dim_vector& b)
 {
   return ! operator == (a, b);
 }
 
