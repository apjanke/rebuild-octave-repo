# HG changeset patch
# User jwe
# Date 819456780 0
#      Wed Dec 20 10:53:00 1995 +0000
# Node ID 593fff2e7e39c35c41eea4e16f7e23ee9e054c35
# Parent  d513745073fbcfdc7ad59f273a0a131f4bfda8fb
[project @ 1995-12-20 10:50:16 by jwe]

diff --git a/emacs/octave.el b/emacs/octave.el
--- a/emacs/octave.el
+++ b/emacs/octave.el
@@ -1,9 +1,9 @@
-;; octave-mode.el --- Octave mode for GNU Emacs
+;; octave.el --- Octave mode for GNU Emacs
 
 ;;; Copyright (c) 1986, 1993, 1994, 1995 Free Software Foundation, Inc.
 
 ;; Author: John Eaton <jwe@bevo.che.wisc.edu>
 ;; Author: Kurt Hornik <hornik@ci.tuwien.ac.at>
 ;; Maintainer: bug-octave@bevo.che.wisc.edu
 ;; Version 0.6 (Nov 27 1995)
 ;; Keywords: languages
diff --git a/src/inv.cc b/src/inv.cc
--- a/src/inv.cc
+++ b/src/inv.cc
@@ -71,41 +71,37 @@ DEFUN_DLD_BUILTIN ("inv", Finv, Sinv, 10
     {
       Matrix m = arg.matrix_value ();
 
       if (! error_state)
 	{
 	  int info;
 	  double rcond = 0.0;
 
-	  Matrix minv = m.inverse (info, rcond);
+	  retval = m.inverse (info, rcond);
 
 	  if (info == -1)
 	    warning ("inverse: matrix singular to machine precision,\
  rcond = %g", rcond);
-	  else
-	    retval = minv;
 	}
     }
   else if (arg.is_complex_type ())
     {
       ComplexMatrix m = arg.complex_matrix_value ();
 
       if (! error_state)
 	{
 	  int info;
 	  double rcond = 0.0;
 
-	  ComplexMatrix minv = m.inverse (info, rcond);
+	  retval = m.inverse (info, rcond);
 
 	  if (info == -1)
 	    warning ("inverse: matrix singular to machine precision,\
  rcond = %g", rcond);
-	  else
-	    retval = minv;
 	}
     }
   else
     {
       gripe_wrong_type_arg ("inv", arg);
     }
 
   return retval;
diff --git a/src/xpow.cc b/src/xpow.cc
--- a/src/xpow.cc
+++ b/src/xpow.cc
@@ -197,17 +197,25 @@ xpow (const Matrix& a, double b)
 	      // Too much copying?
 	      // XXX FIXME XXX -- we shouldn't do this if the exponent is
 	      // large...
 
 	      Matrix atmp;
 	      if (btmp < 0)
 		{
 		  btmp = -btmp;
-		  atmp = a.inverse ();
+
+		  int info;
+		  double rcond = 0.0;
+
+		  atmp = a.inverse (info, rcond);
+
+		  if (info == -1)
+		    warning ("inverse: matrix singular to machine\
+ precision, rcond = %g", rcond);
 		}
 	      else
 		atmp = a;
 
 	      Matrix result (atmp);
 	      for (int i = 1; i < btmp; i++)
 		result = result * atmp;
 
@@ -382,17 +390,25 @@ xpow (const ComplexMatrix& a, double b)
 	      // Too much copying?
 	      // XXX FIXME XXX -- we shouldn't do this if the exponent is
 	      // large...
 
 	      ComplexMatrix atmp;
 	      if (btmp < 0)
 		{
 		  btmp = -btmp;
-		  atmp = a.inverse ();
+
+		  int info;
+		  double rcond = 0.0;
+
+		  atmp = a.inverse (info, rcond);
+
+		  if (info == -1)
+		    warning ("inverse: matrix singular to machine\
+ precision, rcond = %g", rcond);
 		}
 	      else
 		atmp = a;
 
 	      ComplexMatrix result (atmp);
 	      for (int i = 1; i < btmp; i++)
 		result = result * atmp;
 
