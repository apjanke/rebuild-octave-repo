# HG changeset patch
# User Rik <rik@octave.org>
# Date 1382326211 25200
#      Sun Oct 20 20:30:11 2013 -0700
# Node ID 5415a9cd61d4148406ca8cdaa4666aa0d8884a22
# Parent  f10b7a578e2cb2cc5e89323a88c28201e73b6be6
Implement faster partial loading of HDF5 files.

* libinterp/corefcn/load-save.cc(do_load): Call read_hdf5_data with extra
arguments for variables to load.

* libinterp/corefcn/ls-hdf5.h: Re-define read_Hdf5_data function prototype.

* libinterp/corefcn/ls-hdf5.cc: Check for any variable names to load, instead
of whole file.

diff --git a/libinterp/corefcn/load-save.cc b/libinterp/corefcn/load-save.cc
--- a/libinterp/corefcn/load-save.cc
+++ b/libinterp/corefcn/load-save.cc
@@ -375,17 +375,18 @@ do_load (std::istream& stream, const std
           break;
 
         case LS_MAT_BINARY:
           name = read_mat_binary_data (stream, orig_fname, tc);
           break;
 
 #ifdef HAVE_HDF5
         case LS_HDF5:
-          name = read_hdf5_data (stream, orig_fname, global, tc, doc);
+          name = read_hdf5_data (stream, orig_fname, global, tc, doc,
+                                 argv, argv_idx, argc);
           break;
 #endif /* HAVE_HDF5 */
 
         case LS_MAT5_BINARY:
         case LS_MAT7_BINARY:
           name = read_mat5_binary_element (stream, orig_fname, swap,
                                            global, tc);
           break;
diff --git a/libinterp/corefcn/ls-hdf5.cc b/libinterp/corefcn/ls-hdf5.cc
--- a/libinterp/corefcn/ls-hdf5.cc
+++ b/libinterp/corefcn/ls-hdf5.cc
@@ -575,17 +575,18 @@ hdf5_read_next_data (hid_t group_id, con
 
 // Read the next Octave variable from the stream IS, which must really be
 // an hdf5_ifstream.  Return the variable value in tc, its doc string
 // in doc, and whether it is global in global.  The return value is
 // the name of the variable, or NULL if none were found or there was
 // and error.
 std::string
 read_hdf5_data (std::istream& is, const std::string& /* filename */,
-                bool& global, octave_value& tc, std::string& doc)
+                bool& global, octave_value& tc, std::string& doc, 
+                const string_vector& argv, int argv_idx, int argc)
 {
   std::string retval;
 
   doc.resize (0);
 
   hdf5_ifstream& hs = dynamic_cast<hdf5_ifstream&> (is);
   hdf5_callback_data d;
 
@@ -594,16 +595,47 @@ read_hdf5_data (std::istream& is, const 
   hsize_t num_obj = 0;
 #if HAVE_HDF5_18
   hid_t group_id = H5Gopen (hs.file_id, "/", H5P_DEFAULT);
 #else
   hid_t group_id = H5Gopen (hs.file_id, "/");
 #endif
   H5Gget_num_objs (group_id, &num_obj);
   H5Gclose (group_id);
+
+  // For large datasets and out-of-core functionality,
+  // check if only parts of the data is requested
+  bool load_named_vars = argv_idx < argc;
+  while (load_named_vars && hs.current_item < static_cast<int> (num_obj))
+    {
+      std::vector<char> var_name;
+      bool found = false;
+      size_t len = 0;
+
+      len = H5Gget_objname_by_idx (hs.file_id, hs.current_item, 0, 0);
+      var_name.resize (len+1);
+      H5Gget_objname_by_idx( hs.file_id, hs.current_item, &var_name[0], len+1);
+
+      for (int i = argv_idx; i < argc; i++)
+        {
+          glob_match pattern (argv[i]);
+          if (pattern.match (std::string (&var_name[0])))
+            {
+              found = true;
+              break;
+            }
+        }
+
+      if (found)
+        break;
+
+      hs.current_item++;
+    }
+
+
   if (hs.current_item < static_cast<int> (num_obj))
     H5Giterate_retval = H5Giterate (hs.file_id, "/", &hs.current_item,
                                     hdf5_read_next_data, &d);
 
   if (H5Giterate_retval > 0)
     {
       global = d.global;
       tc = d.tc;
diff --git a/libinterp/corefcn/ls-hdf5.h b/libinterp/corefcn/ls-hdf5.h
--- a/libinterp/corefcn/ls-hdf5.h
+++ b/libinterp/corefcn/ls-hdf5.h
@@ -175,17 +175,18 @@ add_hdf5_data (hid_t loc_id, const octav
 extern OCTINTERP_API int
 save_hdf5_empty (hid_t loc_id, const char *name, const dim_vector d);
 
 extern OCTINTERP_API int
 load_hdf5_empty (hid_t loc_id, const char *name, dim_vector &d);
 
 extern OCTINTERP_API std::string
 read_hdf5_data (std::istream& is,  const std::string& filename, bool& global,
-                octave_value& tc, std::string& doc);
+                octave_value& tc, std::string& doc,								
+                const string_vector& argv, int argv_idx, int argc);
 
 extern OCTINTERP_API bool
 save_hdf5_data (std::ostream& os, const octave_value& tc,
                 const std::string& name, const std::string& doc,
                 bool mark_as_global, bool save_as_floats);
 
 extern OCTINTERP_API bool
 hdf5_check_attr (hid_t loc_id, const char *attr_name);
