# HG changeset patch
# User jwe
# Date 1118994748 0
#      Fri Jun 17 07:52:28 2005 +0000
# Node ID b12c0f920da0783b05e7e43c460f2842f1785548
# Parent  983bf1f4bab52d34f03b7d40f7abafe3b1097a90
[project @ 2005-06-17 07:52:28 by jwe]

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,10 +1,57 @@
+2005-06-17  John W. Eaton  <jwe@octave.org>
+
+	* symtab.h (symbol_record::alias): New arg, mark_to_clear.
+	(symbol_record::aliases_to_clear): New data member.
+	(symbol_record::push_alias_to_clear): New function.
+	* symtab.cc (symbol_record::alias): If mark_to_clear is true, push
+	this pointer on aliases_to_clear stack for s.
+	(symbol_record::clear): Also clear aliases_to_clear_stack.
+
+	* defun.cc (install_dld_function): Create full file name alias in
+	fbi_sym_tab and hide it from view.
+	Don't call protect or make_eternal on sym_rec.
+
+	* variables.cc (fcn_out_of_date): New function.
+	(symbol_out_of_date): Also check for symbol using full function
+	file name.
+
+	* symtab.h (symbol_record::symbol_def::visible): New data member.
+	(symbol_record::symbol_def::hide, symbol_record::symbol_def::show,
+	symbol_record::symbol_def::is_visible): New functions.
+	(symbol_record::hide, symbol_record::show, symbol_record::is_visible):
+	New functions.
+
+	* symtab.h (symbol_record::maybe_delete_def): New private function.
+	* symtab.cc (symbol_record::clear, symbol_record::alias,
+	symbol_record::pop_context,
+	symbol_record::define (octave_function *, unsigned int)): Use it.
+	(symbol_table::symbol_list): Only include visible symbols in list.
+
+	* parse.y (frob_function): Hide nested function names.
+
+	* parse.y (frob_function): Create full file name alias in
+	fbi_sym_tab and hide it from view.
+	* defun.cc (install_dld_function): Likewise.
+
 2005-06-16  John W. Eaton  <jwe@octave.org>
 
+	* ov-dld-fcn.cc (octave_dld_function): Check Voct_file_dir to see
+	if function is system file, Vfcn_file_dir.
+	* defaults.cc (set_default_oct_file_dir): New function.
+	(install_defaults): Call it.
+	(Voct_file_dir): New global variable.
+	* defaults.h.in (Voct_file_dir): Provide decl.
+
+	* variables.cc (function_out_of_date_internal): Use
+	Vignore_function_time_stamp only to avoid calling stat.
+	(symbol_out_of_date): Don't check Vignore_function_time_stamp here.
+	(function_out_of_date): Rename from function_out_of_date_internal.
+
 	* defaults.cc (loadpath): Don't do anything if value is unchanged.
 	If loadpath changes, also update Vlast_prompt_time.
 
 2005-06-14  John W. Eaton  <jwe@octave.org>
 
 	* pt-mat.cc (Vwarn_string_concat): Default value now false.
 	(symbols_of_pt_mat): Change initial value here as well.
 
diff --git a/src/defaults.cc b/src/defaults.cc
--- a/src/defaults.cc
+++ b/src/defaults.cc
@@ -62,16 +62,17 @@ std::string Voctave_home;
 std::string Vbin_dir;
 std::string Vinfo_dir;
 std::string Vdata_dir;
 std::string Vlibexec_dir;
 std::string Varch_lib_dir;
 std::string Vlocal_arch_lib_dir;
 std::string Vlocal_ver_arch_lib_dir;
 std::string Vfcn_file_dir;
+std::string Voct_file_dir;
 
 // The default path that will be searched for programs that we
 // execute (in addition to the user-specified --exec-path).
 static std::string Vdefault_exec_path;
 
 // The path that will be searched for programs that we execute.
 // (--exec-path path)
 std::string Vexec_path;
@@ -243,16 +244,22 @@ set_default_local_ver_arch_lib_dir (void
 
 static void
 set_default_fcn_file_dir (void)
 {
   Vfcn_file_dir = subst_octave_home (OCTAVE_FCNFILEDIR);
 }
 
 static void
+set_default_oct_file_dir (void)
+{
+  Voct_file_dir = subst_octave_home (OCTAVE_OCTFILEDIR);
+}
+
+static void
 set_default_bin_dir (void)
 {
   Vbin_dir = subst_octave_home (OCTAVE_BINDIR);
 }
 
 static void
 set_default_default_exec_path (void)
 {
@@ -399,16 +406,18 @@ install_defaults (void)
   set_default_arch_lib_dir ();
 
   set_default_local_arch_lib_dir ();
 
   set_default_local_ver_arch_lib_dir ();
 
   set_default_fcn_file_dir ();
 
+  set_default_oct_file_dir ();
+
   set_default_bin_dir ();
 
   set_default_default_exec_path ();
 
   set_default_exec_path ();
 
   set_default_path ();
 
diff --git a/src/defaults.h.in b/src/defaults.h.in
--- a/src/defaults.h.in
+++ b/src/defaults.h.in
@@ -174,16 +174,17 @@ extern std::string Voctave_home;
 extern std::string Vbin_dir;
 extern std::string Vinfo_dir;
 extern std::string Vdata_dir;
 extern std::string Vlibexec_dir;
 extern std::string Varch_lib_dir;
 extern std::string Vlocal_arch_lib_dir;
 extern std::string Vlocal_ver_arch_lib_dir;
 extern std::string Vfcn_file_dir;
+extern std::string Voct_file_dir;
 
 // The path that will be searched for programs that we execute.
 // (--exec-path path)
 extern std::string Vexec_path;
 
 // And the cached directory path corresponding to Vload_path.
 extern dir_path Vload_path_dir_path;
 
diff --git a/src/defun.cc b/src/defun.cc
--- a/src/defun.cc
+++ b/src/defun.cc
@@ -149,18 +149,24 @@ install_dld_function (octave_dld_functio
   unsigned int t = symbol_record::DLD_FUNCTION;
 
   if (is_text_fcn)
     t |= symbol_record::COMMAND;
 
   sym_rec->unprotect ();
   sym_rec->define (new octave_dld_function (f, shl, name, doc), t);
   sym_rec->document (doc);
-  sym_rec->make_eternal ();
-  sym_rec->protect ();
+
+  // Also insert the full name in the symbol table.  This way, we can
+  // properly cope with changes to LOADPATH.
+
+  symbol_record *full_sr = fbi_sym_tab->lookup (shl.file_name (), true);
+
+  full_sr->alias (sym_rec, true);
+  full_sr->hide ();
 }
 
 void
 alias_builtin (const std::string& alias, const std::string& name)
 {
   symbol_record *sr_name = fbi_sym_tab->lookup (name);
 
   if (! sr_name)
diff --git a/src/ov-dld-fcn.cc b/src/ov-dld-fcn.cc
--- a/src/ov-dld-fcn.cc
+++ b/src/ov-dld-fcn.cc
@@ -47,17 +47,17 @@ octave_dld_function::octave_dld_function
   : octave_builtin (ff, nm, ds), sh_lib (shl)
 {
   mark_fcn_file_up_to_date (time_parsed ());
 
   std::string file_name = fcn_file_name ();
 
   system_fcn_file
     = (! file_name.empty ()
-       && Vfcn_file_dir == file_name.substr (0, Vfcn_file_dir.length ()));
+       && Voct_file_dir == file_name.substr (0, Voct_file_dir.length ()));
 }
 
 octave_dld_function::~octave_dld_function (void)
 {
   octave_dynamic_loader::remove (my_name, sh_lib);
 }
 
 std::string
diff --git a/src/parse.y b/src/parse.y
--- a/src/parse.y
+++ b/src/parse.y
@@ -2562,29 +2562,44 @@ frob_function (const std::string& fname,
 
   symbol_record *sr = fbi_sym_tab->lookup (id_name, true);
 
   if (sr)
     {
       fcn->stash_symtab_ptr (sr);
 
       if (lexer_flags.parsing_nested_function)
-        fcn->mark_as_nested_function ();
+        {
+          fcn->mark_as_nested_function ();
+	  sr->hide ();
+	}
     }
   else
     panic_impossible ();
 
   sr->define (fcn, symbol_record::USER_FUNCTION);
 
   if (! help_buf.empty ())
     {
       sr->document (help_buf.top ());
       help_buf.pop ();
     }
 
+  // Also insert the full name in the symbol table.  This way, we can
+  // properly cope with changes to LOADPATH.
+
+  if (reading_fcn_file)
+    {
+      symbol_record *full_sr
+        = fbi_sym_tab->lookup (curr_fcn_file_full_name, true);
+
+      full_sr->alias (sr, true);
+      full_sr->hide ();
+    }
+
   if (lexer_flags.parsing_nested_function < 0)
     lexer_flags.parsing_nested_function = 0;
 
   return fcn;
 }
 
 // Finish defining a function.
 
diff --git a/src/symtab.cc b/src/symtab.cc
--- a/src/symtab.cc
+++ b/src/symtab.cc
@@ -243,56 +243,63 @@ symbol_record::define_builtin_const (con
 
 bool
 symbol_record::define (octave_function *f, unsigned int sym_type)
 {
   bool retval = false;
 
   if (! read_only_error ("redefine"))
     {
+      maybe_delete_def ();
+
       octave_value tmp (f);
 
-      if (! definition)
-	definition = new symbol_def (tmp, sym_type);
-      else
-	definition->define (tmp, sym_type);
+      definition = new symbol_def (tmp, sym_type);
 
       retval = true;
     }
 
   return retval;
 }
 
 void
 symbol_record::clear (void)
 {
   if (is_defined ())
     {
       if (! tagged_static)
 	{
-	  if (--definition->count <= 0)
-	    delete definition;
+	  while (! aliases_to_clear.empty ())
+	    {
+	      symbol_record *sr = aliases_to_clear.top ();
+	      aliases_to_clear.pop ();
+	      sr->clear ();
+	    }
+
+	  maybe_delete_def ();
 
 	  definition = new symbol_def ();
 	}
 
       if (linked_to_global)
 	linked_to_global = 0;
     }
 }
 
 void
-symbol_record::alias (symbol_record *s)
+symbol_record::alias (symbol_record *s, bool mark_to_clear)
 {
   chg_fcn = s->chg_fcn;
 
-  if (--definition->count <= 0)
-    delete definition;
+  maybe_delete_def ();
 
-  definition = (s->definition);
+  if (mark_to_clear)
+    s->push_alias_to_clear (this);
+
+  definition = s->definition;
 
   definition->count++;
 }
 
 void
 symbol_record::mark_as_formal_parameter (void)
 {
   if (is_linked_to_global ())
@@ -397,18 +404,17 @@ void
 symbol_record::pop_context (void)
 {
   // It is possible for context to be empty if new symbols have been
   // inserted in the symbol table during recursive calls.  This can
   // happen as a result of calls to eval() and feval().
 
   if (! context.empty ())
     {
-      if (--definition->count <= 0)
-	delete definition;
+      maybe_delete_def ();
 
       definition = context.top ();
       context.pop ();
 
       linked_to_global = global_link_context.top ();
       global_link_context.pop ();
     }
 }
@@ -863,16 +869,17 @@ symbol_table::clear (const std::string& 
 
   symbol_record *ptr = table[index].next ();
 
   while (ptr)
     {
       if (ptr->name () == nm)
 	{
 	  ptr->clear ();
+
 	  return true;
 	}
       ptr = ptr->next ();
     }
 
   return false;
 }
 
@@ -1142,27 +1149,30 @@ symbol_table::symbol_list (const string_
     return symbols;
 
   for (unsigned int i = 0; i < table_size; i++)
     {
       symbol_record *ptr = table[i].next ();
 
       while (ptr)
 	{
-	  assert (count < n);
+	  if (true || ptr->is_visible ())
+	    {
+	      assert (count < n);
 
-	  unsigned int my_scope = ptr->is_linked_to_global () + 1; // Tricky...
-
-	  unsigned int my_type = ptr->type ();
+	      unsigned int my_scope = ptr->is_linked_to_global () + 1; // Tricky...
 
-	  std::string my_name = ptr->name ();
+	      unsigned int my_type = ptr->type ();
+
+	      std::string my_name = ptr->name ();
 
-	  if ((type & my_type) && (scope & my_scope) && (matches_patterns (my_name, pats)))
-	    symbols(count++) = ptr;
-
+	      if ((type & my_type) && (scope & my_scope) && (matches_patterns (my_name, pats)))
+		symbols(count++) = ptr;
+	    }
+	      
 	  ptr = ptr->next ();
 	}
     }
 
   symbols.resize (count);
 
   return symbols;
 }
diff --git a/src/symtab.h b/src/symtab.h
--- a/src/symtab.h
+++ b/src/symtab.h
@@ -85,17 +85,17 @@ private:
 
   class symbol_def
   {
   public:
 
     symbol_def (const octave_value& val = octave_value (),
 		unsigned int sym_type = 0)
       : symbol_type (sym_type), eternal (0), read_only (0), help_string (),
-	definition (val), count (1) { }
+	definition (val), visible (true), count (1) { }
 
     ~symbol_def (void) { }
 
     bool is_constant (void) const
       { return (symbol_type & symbol_record::BUILTIN_CONSTANT); }
 
     bool is_variable (void) const
       {
@@ -204,16 +204,20 @@ private:
       }
 
     void protect (void) { read_only = 1; }
 
     void unprotect (void) { read_only = 0; }
 
     void make_eternal (void) { eternal = 1; }
 
+    void hide (void) { visible = false; }
+    void show (void) { visible = true; }
+    bool is_visible (void) const { return visible; }
+
     octave_value& def (void) { return definition; }
 
     std::string help (void) const { return help_string; }
 
     void document (const std::string& h) { help_string = h; }
 
     unsigned int type (void) { return symbol_type; }
 
@@ -235,16 +239,19 @@ private:
     unsigned int read_only : 1;
 
     // The doc string associated with this variable.
     std::string help_string;
 
     // The value of this definition.  See ov.h and related files.
     octave_value definition;
 
+    // Should this symbol show up in listings?
+    bool visible;
+
     // Reference count.
     int count;
 
     void print_info (std::ostream& os,
 		     const std::string& prefix = std::string ()) const;
 
     // No copying!
 
@@ -344,31 +351,35 @@ public:
   bool is_eternal (void) const { return definition->is_eternal (); }
 
   void protect (void) { definition->protect (); }
 
   void unprotect (void) { definition->unprotect (); }
 
   void make_eternal (void) { definition->make_eternal (); }
 
+  void hide (void) { definition->hide (); }
+  void show (void) { definition->show (); }
+  bool is_visible (void) const { return definition->is_visible  (); }
+
   void set_change_function (change_function f) { chg_fcn = f; }
 
   void define (const octave_value& v, unsigned int sym_type = USER_VARIABLE);
 
   void define_builtin_var (const octave_value& v);
 
   bool define_builtin_const (const octave_value& v);
 
   bool define (octave_function *f, unsigned int sym_type);
 
   void document (const std::string& h) { definition->document (h); }
 
   void clear (void);
 
-  void alias (symbol_record *s);
+  void alias (symbol_record *s, bool mark_to_clear = false);
 
   void mark_as_formal_parameter (void);
   bool is_formal_parameter (void) const { return formal_param; }
 
   void mark_as_linked_to_global (void);
   bool is_linked_to_global (void) const { return linked_to_global; }
 
   void mark_as_static (void);
@@ -439,20 +450,31 @@ private:
   symbol_def *definition;
   symbol_record *next_elem;
 
   // This should maybe be one stack with a structure containing all the
   // items we need to save for recursive calls...
   std::stack <symbol_def *> context;
   std::stack <unsigned int> global_link_context;
 
+  std::stack <symbol_record *> aliases_to_clear;
+
+  void push_alias_to_clear (symbol_record *s)
+    { aliases_to_clear.push (s); }
+
   bool read_only_error (const char *action);
 
   void link_to_builtin_variable (void);
 
+  void maybe_delete_def (void)
+    {
+      if (--definition->count <= 0)
+        delete definition;
+    }
+
   // No copying!
 
   symbol_record (const symbol_record& s);
 
   symbol_record& operator = (const symbol_record& s);
 };
 
 // A symbol table.
diff --git a/src/variables.cc b/src/variables.cc
--- a/src/variables.cc
+++ b/src/variables.cc
@@ -970,94 +970,122 @@ same_file (const std::string& f, const s
   std::string c_g = file_ops::canonicalize_file_name (g);
 
   file_stat f_fs (c_f);
   file_stat g_fs (c_g);
 
   return (f_fs.ino () == g_fs.ino () && f_fs.dev () == g_fs.dev ());
 }
 
-// Is there a corresponding function file that is newer than the
-// symbol definition?
-
 static bool
-function_out_of_date_internal (octave_function *fcn)
+fcn_out_of_date (octave_function *fcn, const std::string& ff, time_t tp)
 {
   bool retval = false;
 
-  if (fcn)
+  fcn->mark_fcn_file_up_to_date (octave_time ());
+
+  if (! (Vignore_function_time_stamp == 2
+	 || (Vignore_function_time_stamp && fcn->is_system_fcn_file ())))
     {
-      std::string ff = fcn->fcn_file_name ();
-
-      if (! (ff.empty ()
-	     || (Vignore_function_time_stamp
-		 && fcn->is_system_fcn_file ())))
-	{
-	  if (fcn->time_checked () < Vlast_prompt_time)
-	    {
-	      time_t tp = fcn->time_parsed ();
-
-	      std::string nm = fcn->name ();
-
-	      string_vector names (2);
-
-	      names[0] = nm + ".oct";
-	      names[1] = nm + ".m";
-
-	      std::string file = octave_env::make_absolute
-		(Vload_path_dir_path.find_first_of (names),
-		 octave_env::getcwd ());
-
-	      if (same_file (file, ff))
-		{
-		  fcn->mark_fcn_file_up_to_date (octave_time ());
-
-		  file_stat fs (ff);
-
-		  if (fs && fs.is_newer (tp))
-		    retval = true;
-		}
-	      else
-		retval = true;
-	    }
-	}
+      file_stat fs (ff);
+
+      if (fs && fs.is_newer (tp))
+	retval = true;
     }
 
   return retval;
 }
 
+// Is there a corresponding function file that is newer than the
+// symbol definition?
+
 static bool
 symbol_out_of_date (symbol_record *sr)
 {
   bool retval = false;
 
-  if (Vignore_function_time_stamp != 2 && sr)
+  if (sr)
     {
       octave_value ans = sr->def ();
 
-      octave_function *tmp = ans.function_value (true);
-
-      retval = function_out_of_date_internal (tmp);
+      octave_function *fcn = ans.function_value (true);
+
+      if (fcn)
+	{
+	  std::string ff = fcn->fcn_file_name ();
+
+	  if (! ff.empty ())
+	    {
+	      if (fcn->time_checked () < Vlast_prompt_time)
+		{
+		  time_t tp = fcn->time_parsed ();
+
+		  std::string nm = fcn->name ();
+
+		  string_vector names (2);
+
+		  names[0] = nm + ".oct";
+		  names[1] = nm + ".m";
+
+		  std::string file = octave_env::make_absolute
+		    (Vload_path_dir_path.find_first_of (names),
+		     octave_env::getcwd ());
+
+		  if (same_file (file, ff))
+		    {
+		      retval = fcn_out_of_date (fcn, ff, tp);
+		    }
+		  else
+		    {
+		      // Check the full function name.  Maybe we alrady
+		      // parsed it.
+
+		      symbol_record *full_sr = fbi_sym_tab->lookup (file);
+
+		      if (full_sr)
+			{
+			  octave_value v = full_sr->def ();
+
+			  if (v.is_function ())
+			    {
+			      // OK, swap the aliases around.
+
+			      // XXX FIXME XXX -- this is a bit
+			      // tricky, so maybe some refactoring is
+			      // in order here too...
+
+			      symbol_record *short_sr = fbi_sym_tab->lookup (nm);
+
+			      if (short_sr)
+				short_sr->alias (full_sr);
+
+			      // Make local symbol table entry point
+			      // to correct global function too.
+
+			      sr->alias (full_sr);
+
+			      fcn = v.function_value ();
+
+			      retval = fcn_out_of_date (fcn, file, tp);
+			    }
+			  else
+			    retval = true;
+			}
+		      else
+			retval = true;
+		    }
+		}
+	    }
+	}
     }
 
   return retval;
 }
 
 bool
-function_out_of_date (octave_function *fcn)
-{
-  bool retval = false;
-
-  if (Vignore_function_time_stamp != 2)
-    retval = function_out_of_date_internal (fcn);
-
-  return retval;
-}
-
-bool
 lookup (symbol_record *sym_rec, bool exec_script)
 {
   bool script_executed = false;
 
   if (! sym_rec->is_linked_to_global ())
     {
       if (sym_rec->is_defined ())
 	{
diff --git a/src/variables.h b/src/variables.h
--- a/src/variables.h
+++ b/src/variables.h
@@ -77,18 +77,16 @@ extern bool
 looks_like_struct (const std::string& text);
 
 extern int
 symbol_exist (const std::string& name, const std::string& type = "any");
 
 extern std::string
 unique_symbol_name (const std::string& basename);
 
-extern bool function_out_of_date (octave_function *fcn);
-
 extern bool lookup (symbol_record *s, bool exec_script = true);
 
 extern symbol_record *
 lookup_by_name (const std::string& nm, bool exec_script = true);
 
 extern octave_value lookup_function (const std::string& nm);
 
 extern octave_value lookup_user_function (const std::string& nm);
