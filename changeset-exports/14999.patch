# HG changeset patch
# User Jordi Guti√©rrez Hermoso <jordigh@octave.org>
# Date 1342880580 14400
#      Sat Jul 21 10:23:00 2012 -0400
# Branch stable
# Node ID 1316bfc6e260d92ef043110e54c60fc4f213a1fe
# Parent  93583f8853b4560d984ce8fecf177c49dcc9dfbc
Fix think-o in 4315a39da4c9

diff --git a/liboctave/sparse-dmsolve.cc b/liboctave/sparse-dmsolve.cc
--- a/liboctave/sparse-dmsolve.cc
+++ b/liboctave/sparse-dmsolve.cc
@@ -44,17 +44,17 @@ dmsolve_extract (const MSparse<T> &A, co
                 bool lazy = false)
 {
   octave_idx_type nr = rend - rst, nc = cend - cst;
   maxnz = (maxnz < 0 ? A.nnz () : maxnz);
   octave_idx_type nz;
 
   // Cast to uint64 to handle overflow in this multiplication
   if (octave_uint64 (nr)*octave_uint64 (nc) < octave_uint64 (maxnz))
-    nz = nr*nz;
+    nz = nr*nc;
   else
     nz = maxnz;
 
   MSparse<T> B (nr, nc, (nz < maxnz ? nz : maxnz));
   // Some sparse functions can support lazy indexing (where elements
   // in the row are in no particular order), even though octave in
   // general can't. For those functions that can using it is a big
   // win here in terms of speed.
