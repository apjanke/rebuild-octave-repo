# HG changeset patch
# User Michael Leitner <michael.leitner@frm2.tum.de>
# Date 1549589996 -3600
#      Fri Feb 08 02:39:56 2019 +0100
# Node ID 845aba35fca7a111d9f92ac60e0b47038417132d
# Parent  98f1a964ff3385c69c86da9bbfb3dfa53045e632
Improve performance of isosurface (bug #55642).

* plot/draw/__unite_shared_vertices__.m: Vectorize code.
* plot/draw/isosurface.m: Adapt for that change.

diff --git a/scripts/plot/draw/isosurface.m b/scripts/plot/draw/isosurface.m
--- a/scripts/plot/draw/isosurface.m
+++ b/scripts/plot/draw/isosurface.m
@@ -57,18 +57,17 @@
 ## The optional input argument @var{col}, which is a three-dimensional array
 ## of the same size as @var{v}, specifies coloring of the isosurface.  The
 ## color data is interpolated, as necessary, to match @var{isoval}.  The
 ## output structure array, in this case, has the additional field
 ## @var{facevertexcdata}.
 ##
 ## If given the string input argument @qcode{"noshare"}, vertices may be
 ## returned multiple times for different faces.  The default behavior is to
-## eliminate vertices shared by adjacent faces with @code{unique} which may be
-## time consuming.
+## eliminate vertices shared by adjacent faces.
 ##
 ## The string input argument @qcode{"verbose"} is supported for @sc{matlab}
 ## compatibility, but has no effect.
 ##
 ## Any string arguments must be passed after the other arguments.
 ##
 ## If called with two or three output arguments, return the information about
 ## the faces @var{f}, vertices @var{v}, and color data @var{c} as separate
@@ -164,17 +163,17 @@ function varargout = isosurface (varargi
     warning ("isosurface: triangulation is empty");
   endif
 
   if (! noshare)
     [fvc.faces, fvc.vertices, J] = __unite_shared_vertices__ (fvc.faces,
                                                               fvc.vertices);
 
     if (calc_colors)
-      fvc.facevertexcdata(J) = [];  # share very close vertices
+      fvc.facevertexcdata = fvc.facevertexcdata(J);  # share very close vertices
     endif
   endif
 
   switch (nargout)
     case 0
       ## plot the calculated surface
       if (calc_colors)
         fc = fvc.facevertexcdata;
diff --git a/scripts/plot/draw/private/__unite_shared_vertices__.m b/scripts/plot/draw/private/__unite_shared_vertices__.m
--- a/scripts/plot/draw/private/__unite_shared_vertices__.m
+++ b/scripts/plot/draw/private/__unite_shared_vertices__.m
@@ -1,8 +1,9 @@
+## Copyright (C) 2019 Michael Leitner
 ## Copyright (C) 2016-2019 Markus Muetzel
 ##
 ## This file is part of Octave.
 ##
 ## Octave is free software: you can redistribute it and/or modify it
 ## under the terms of the GNU General Public License as published by
 ## the Free Software Foundation, either version 3 of the License, or
 ## (at your option) any later version.
@@ -21,71 +22,36 @@
 ##
 ## Detect and unite shared vertices in patches.
 ##
 ## Vertices of neighboring faces are detected and united to shared vertices.
 ## For this, the mutual squared distances between all vertices are
 ## calculated.  If all coordinates are closer than
 ## @code{2 * eps (max (abs (vertices(:))))}, the vertices are united to one.
 ##
-## @var{J} holds the indices of the deleted vertices.
+## @var{J} holds the indices of the remaining vertices.
 ##
 ## @seealso{isosurface, reducepatch}
 ## @end deftypefn
 
-## Author: mmuetzel
-
 function [faces, vertices, J] = __unite_shared_vertices__ (faces, vertices)
 
-  J = [];
-
-  ## Calculate the mutual differences of all vertex coordinates
-  close_points = zeros (0, 2);
-  num_vertices = rows (vertices);
-  skip_point = false (num_vertices, 1);
-  ## FIXME: Can this be vectorized in some way to increase performance?
-  ##        Regardless, should probably allocate close_points to be the
-  ##        same size as the number of vertices and then truncate the
-  ##        array at the end of the calculation.  Extending an array
-  ##        involves a copy operation every time.
-  for (i_point1 = 1:num_vertices - 1)
-    if (skip_point(i_point1))
-      ## points already detected as duplicates can be skipped
-      continue;
-    endif
-
-    diff = vertices(i_point1,:) - vertices(i_point1 + 1:end,:);
-    is_close_point = all (abs (diff) <= sqrt (3) * eps * ...
-        (max (abs (vertices(i_point1,:)), abs (vertices(i_point1 + 1:end,:)))), 2);
+  lut = (1:size (vertices, 1))';
+  J = lut;
+  for di = 1:3
+    [v, idx] = sortrows (vertices, 1 + mod ((0:2)+di, 3));
+    Js = [true;
+          any(abs (diff (v, 1, 1)) 
+              > eps (1.0) * abs (v(2:end,:)+v(1:end-1,:)), 2)];
+    vertices = v(Js,:);
+    J = J(idx(Js));
+    l(idx) = cumsum (Js);
+    lut = l(lut);
+  endfor
+  [J, idx] = sort (J);
+  j(idx) = 1:length (idx);
+  vertices = vertices(idx,:);
+  faces = j(lut(faces));
 
-    if (any (is_close_point))
-      close_points_idx = find (is_close_point) + i_point1;
-      new_close_points_num = rows (close_points_idx);
-      close_points(end + 1:end + new_close_points_num,1) = i_point1;
-      close_points(end - new_close_points_num + 1:end,2) = close_points_idx;
-      skip_point(close_points_idx) = true;
-    endif
-  endfor
-
-  if (! isempty (close_points))
-    vertices(close_points(:,2),:) = []; # delete multiple shared vertices
-    ## renumber deleted vertices in faces to the one it is replaced by
-    vertex_renum = 1:num_vertices;
-    vertex_renum(close_points(:,2)) = close_points(:,1);
-    faces = vertex_renum(faces);
-    ## renumber vertices in faces with subsequent numbers
-    vertex_renum2 = ones (1, num_vertices);
-    vertex_renum2(close_points(:,2)) = 0;
-    vertex_renum2 = cumsum (vertex_renum2);
-    faces = vertex_renum2(faces);
-
-    ## eliminate identical faces
-    faces = sort (faces, 2);
-    faces = unique (faces, "rows");
-
-    ## eliminate faces with zero area.  Vertices in faces are sorted.
-    is_zero_area = (faces(:,1) == faces(:,2)) | (faces(:,2) == faces(:,3));
-    faces = faces(! is_zero_area, :);
-
-    J = close_points(:,2);
-  endif
+  ## eliminate faces with zero area
+  faces = faces(all (faces - faces(:, [2 3 1]) != 0, 2), :);
 
 endfunction
