# HG changeset patch
# User jwe
# Date 840583929 0
#      Tue Aug 20 23:32:09 1996 +0000
# Node ID c9f70d39255fd00ab984edc8dd8bdc57c20f30c2
# Parent  2ce6e1ec9b5355d0d481a189a842a44223ba13b9
[project @ 1996-08-20 23:30:54 by jwe]

diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,8 +1,12 @@
+Tue Aug 20 18:27:36 1996  Kurt Hornik  <Kurt.Hornik@ci.tuwien.ac.at>
+
+	* strings/substr.m: Allow negative OFFSET.  LEN is now optional.
+
 Mon Jul 15 16:15:22 1996  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* miscellaneous/bug_report.m: Don't redirect output to /dev/tty in
 	system command.
 	
 Fri Jul 12 12:24:29 1996  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* __plr1__.m: Renamed from polar_int_1.m.
diff --git a/scripts/strings/bin2dec.m b/scripts/strings/bin2dec.m
--- a/scripts/strings/bin2dec.m
+++ b/scripts/strings/bin2dec.m
@@ -17,22 +17,21 @@
 ## Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ## 02111-1307, USA.
 
 ## usage:  bin2dec (x)
 ##
 ## Returns the decimal number corresponding to the binary number in
 ## quotes.  For example, bin2dec ("1110") returns 14.
 
-## Author: jwe
+## Author: Kurt Hornik <Kurt.Hornik@ci.tuwien.ac.at>
+## Adapted-By: jwe
 
 function y = bin2dec (x)
 
-## Original version by Kurt Hornik <Kurt.Hornik@ci.tuwien.ac.at>.
-
   if (nargin != 1)
     usage ("bin2dec (x)");
   endif
 
   x = toascii (x) - toascii ("0");
 
   if (all (x == 0 | x == 1))
     y = sum ((x .* (ones (rows (x), 1) * 2.^((length (x) - 1) : -1 : 0)))')';
diff --git a/scripts/strings/blanks.m b/scripts/strings/blanks.m
--- a/scripts/strings/blanks.m
+++ b/scripts/strings/blanks.m
@@ -16,22 +16,21 @@
 ## along with Octave; see the file COPYING.  If not, write to the Free
 ## Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ## 02111-1307, USA.
 
 ## usage:  blanks (n)
 ##
 ## Returns a string of n blanks.
 
-## Author: jwe
+## Author: Kurt Hornik <Kurt.Hornik@ci.tuwien.ac.at>
+## Adapted-By: jwe
 
 function s = blanks (n)
 
-## Original version by Kurt Hornik <Kurt.Hornik@ci.tuwien.ac.at>.
-
   if (nargin != 1)
     usage ("blanks (n)");
   endif
 
   if (is_scalar (n) && n > 0 && n == round (n))
     s = setstr (ones (1, n) * toascii (" "));
   else
     error ("blanks: n must be a positive integer");
diff --git a/scripts/strings/deblank.m b/scripts/strings/deblank.m
--- a/scripts/strings/deblank.m
+++ b/scripts/strings/deblank.m
@@ -16,22 +16,21 @@
 ## along with Octave; see the file COPYING.  If not, write to the Free
 ## Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ## 02111-1307, USA.
 
 ## usage:  deblank (s)
 ##
 ## Remove trailing blanks from the string s.
 
-## Author: jwe
+## Author: Kurt Hornik <Kurt.Hornik@ci.tuwien.ac.at>
+## Adapted-By: jwe
 
 function t = deblank (s)
 
-## Original version by Kurt Hornik <Kurt.Hornik@ci.tuwien.ac.at>.
-
   if (nargin != 1)
     usage ("deblank (s)");
   endif
 
   if (isstr (s))
 
     [nr, nc] = size (s);
     len = nr * nc;
diff --git a/scripts/strings/dec2bin.m b/scripts/strings/dec2bin.m
--- a/scripts/strings/dec2bin.m
+++ b/scripts/strings/dec2bin.m
@@ -17,22 +17,21 @@
 ## Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ## 02111-1307, USA.
 
 ## usage:  dec2bin (x)
 ##
 ## Returns the binary number corresponding to the nonnegative integer
 ## x.  For example, dec2bin (14) returns "1110".
 
-## Author: jwe
+## Author: Kurt Hornik <Kurt.Hornik@ci.tuwien.ac.at>
+## Adapted-By: jwe
 
 function y = dec2bin (x)
 
-  ## Original version by Kurt Hornik <Kurt.Hornik@ci.tuwien.ac.at>.
-
   if (nargin != 1)
     usage ("dec2bin (x)");
   endif
 
   [nr, nc] = size (x);
 
   len = nr * nc;
 
diff --git a/scripts/strings/dec2hex.m b/scripts/strings/dec2hex.m
--- a/scripts/strings/dec2hex.m
+++ b/scripts/strings/dec2hex.m
@@ -17,22 +17,21 @@
 ## Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ## 02111-1307, USA.
 
 ## usage:  dec2hex (d)
 ##
 ## Returns the hex number corresponding to the decimal number d.  For
 ## example, dec2hex (2748) returns "abc".
 
-## Author: jwe
+## Author: Kurt Hornik <Kurt.Hornik@ci.tuwien.ac.at>
+## Adapted-By: jwe
 
 function h = dec2hex (d)
 
-## Original version by Kurt Hornik <Kurt.Hornik@ci.tuwien.ac.at>.
-
   if (nargin != 1)
     usage ("dec2hex (d)");
   endif
 
   [nr, nc] = size (d);
 
   len = nr * nc;
 
diff --git a/scripts/strings/findstr.m b/scripts/strings/findstr.m
--- a/scripts/strings/findstr.m
+++ b/scripts/strings/findstr.m
@@ -25,22 +25,21 @@
 ## If the optional argument OVERLAP is nonzero, the returned vector
 ## can include overlapping positions (this is the default).
 ##
 ## For example,
 ##
 ##   findstr ("abababa", "aba")     =>  [1, 3, 5]
 ##   findstr ("abababa", "aba", 0)  =>  [1, 5]
 
-## Author: jwe
+## Author: Kurt Hornik <Kurt.Hornik@ci.tuwien.ac.at>
+## Adapted-By: jwe
 
 function v = findstr (s, t, overlap)
 
-  ## Original version by Kurt Hornik <Kurt.Hornik@ci.tuwien.ac.at>.
-
   if (nargin < 2 || nargin > 3)
     usage ("findstr (s, t [, overlap])");
   endif
 
   if (nargin == 2)
     overlap = 1;
   endif
 
diff --git a/scripts/strings/hex2dec.m b/scripts/strings/hex2dec.m
--- a/scripts/strings/hex2dec.m
+++ b/scripts/strings/hex2dec.m
@@ -18,22 +18,21 @@
 ## 02111-1307, USA.
 
 ## usage:  hex2dec (h)
 ##
 ## Returns the decimal number corresponding to the hex number in
 ## quotes.  For example, hex2dec ("12B") and hex2dec ("12b") both
 ## return 299.
 
-## Author: jwe
+## Author: Kurt Hornik <Kurt.Hornik@ci.tuwien.ac.at>
+## Adapted-By: jwe
 
 function d = hex2dec (h)
 
-  ## Original version by Kurt Hornik <Kurt.Hornik@ci.tuwien.ac.at>.
-
   if (nargin != 1)
     usage ("hex2dec (x)");
   endif
 
   if (isstr (h))
     nr = rows (h);
     d = zeros (nr, 1);
     for i = 1:nr
diff --git a/scripts/strings/index.m b/scripts/strings/index.m
--- a/scripts/strings/index.m
+++ b/scripts/strings/index.m
@@ -19,24 +19,23 @@
 
 ## usage:  index (s, t)
 ##
 ## Returns the position of the first occurence of the string T in the
 ## string S or 0 if no occurence is found.
 ##
 ## NOTE: this function does not work for arrays of strings.
 
-## Author: jwe
+## Author: Kurt Hornik <Kurt.Hornik@ci.tuwien.ac.at>
+## Adapted-By: jwe
 
 function n = index (s, t)
 
   ## This is patterned after the AWK function of the same name.
 
-  ## Original version by Kurt Hornik <Kurt.Hornik@ci.tuwien.ac.at>.
-
   if (nargin != 2)
     usage ("index (s, t)");
   endif
 
   n = 0;
 
   if (isstr (s) && isstr (t))
 
diff --git a/scripts/strings/rindex.m b/scripts/strings/rindex.m
--- a/scripts/strings/rindex.m
+++ b/scripts/strings/rindex.m
@@ -19,24 +19,23 @@
 
 ## usage: rindex (s, t)
 ##
 ## Returns the position of the last occurence of the string T in the
 ## string S or 0 if no occurence is found.
 ##
 ## NOTE: this function does not work for arrays of strings.
 
-## Author: jwe
+## Author: Kurt Hornik <Kurt.Hornik@ci.tuwien.ac.at>
+## Adapted-By: jwe
 
 function n = rindex (s, t)
 
   ## This is patterned after the AWK function of the same name.
 
-  ## Original version by Kurt Hornik <Kurt.Hornik@ci.tuwien.ac.at>.
-
   if (nargin != 2)
     usage ("rindex (s, t)");
   endif
 
   n = 0;
 
   if (isstr (s) && isstr (t))
 
diff --git a/scripts/strings/split.m b/scripts/strings/split.m
--- a/scripts/strings/split.m
+++ b/scripts/strings/split.m
@@ -18,22 +18,21 @@
 ## 02111-1307, USA.
 
 ## usage:  m = split (s, t)
 ##
 ## Divides the string S into pieces separated by T, and stores the
 ## pieces as the rows of M (padded with blanks to form a valid
 ## matrix).
 
-## Author: jwe
+## Author: Kurt Hornik <Kurt.Hornik@ci.tuwien.ac.at>
+## Adapted-By: jwe
 
 function m = split (s, t)
 
-## Original version by Kurt Hornik <Kurt.Hornik@ci.tuwien.ac.at>.
-
   if (nargin != 2)
     usage ("split (s, t)");
   endif
 
   if (isstr (s) && isstr (t))
 
   l_s = length (s);
   l_t = length (t);
diff --git a/scripts/strings/str2mat.m b/scripts/strings/str2mat.m
--- a/scripts/strings/str2mat.m
+++ b/scripts/strings/str2mat.m
@@ -17,22 +17,21 @@
 ## Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ## 02111-1307, USA.
 
 ## usage:  m = str2mat (s1, ...)
 ##
 ## Forms the matrix M containing the strings S1, ... as its rows.
 ## Each string is padded with blanks in order to form a valid matrix.
 
-## Author: jwe
+## Author: Kurt Hornik <Kurt.Hornik@ci.tuwien.ac.at>
+## Adapted-By: jwe
 
 function m = str2mat (...)
 
-  ## Original version by Kurt Hornik <Kurt.Hornik@ci.tuwien.ac.at>.
-
   if (nargin == 0)
     usage ("str2mat (s1, ...)");
   endif
 
   nc = 0;
 
   va_start ();
 
diff --git a/scripts/strings/substr.m b/scripts/strings/substr.m
--- a/scripts/strings/substr.m
+++ b/scripts/strings/substr.m
@@ -12,44 +12,50 @@
 ## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, write to the Free
 ## Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ## 02111-1307, USA.
 
-## usage:  substr (s, beg, len)
+## usage:  substr (s, offset, len)
 ##
-## Returns the substring of S of length LEN starting at index BEG.
-## If LEN is missing, the substring extends to the end of S.
+## Returns the substring of S of length LEN starting at index OFFSET.
+## If OFFSET is negative, extraction starts that far from the end of
+## the string.  If LEN is omitted, the substring extends to the end
+## of S.
 
-## Author: jwe
+## Author: Kurt Hornik <Kurt.Hornik@ci.tuwien.ac.at>
+## Adapted-By: jwe
 
-function t = substr (s, beg, len)
-
-  ## Original version by Kurt Hornik <Kurt.Hornik@ci.tuwien.ac.at>.
+function t = substr (s, offset, len)
 
   if (nargin < 2 || nargin > 3)
-    usage ("substr (s, beg, len)");
+    usage ("substr (s, offset [, len])");
   endif
 
   if (isstr (s))
     nc = columns (s);
-    if (beg > 0 && beg <= nc)
+    if (abs (offset) > 0 && abs (offset) <= nc)
+      if (offset > 0)
+	beg = offset;
+      else
+	beg = nc + offset + 1;
+      endif
       if (nargin == 2)
 	eos = nc;
       else
 	eos = beg + len - 1;
       endif
       if (eos <= nc)
 	t = s (:, beg:eos);
       else
 	error ("substr: length = %d out of range", len);
       endif
     else
-      error ("substr: beginning index = %d out of range", beg);
+      error ("substr: offset = %d out of range", offset);
     endif
   else
     error ("substr: expecting string argument");
   endif
 
 endfunction
