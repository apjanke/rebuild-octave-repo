# HG changeset patch
# User Rik <octave@nomad.inbox5.com>
# Date 1319585962 25200
#      Tue Oct 25 16:39:22 2011 -0700
# Node ID 6f068e3f3f9cba429fb3c82204a31a132b2350ed
# Parent  be7ff59cbc7a466b3004737534c48d38214caa46
Change f_cdf references to fcdf in statistics/test directory (Bug #34628)

* anova.m, f_test_regression.m, hotelling_test.m, hotelling_test_2.m,
manova.m, var_test.m: Change f_cdf reference to fcdf.

diff --git a/scripts/statistics/tests/anova.m b/scripts/statistics/tests/anova.m
--- a/scripts/statistics/tests/anova.m
+++ b/scripts/statistics/tests/anova.m
@@ -83,17 +83,17 @@ function [pval, f, df_b, df_w] = anova (
   SSB = sum (group_count .* (group_mean - total_mean) .^ 2);
   SST = sumsq (reshape (y, n, 1) - total_mean);
   SSW = SST - SSB;
   df_b = k - 1;
   df_w = n - k;
   v_b = SSB / df_b;
   v_w = SSW / df_w;
   f = v_b / v_w;
-  pval = 1 - f_cdf (f, df_b, df_w);
+  pval = 1 - fcdf (f, df_b, df_w);
 
   if (nargout == 0)
     ## This eventually needs to be done more cleanly ...
     printf ("\n");
     printf ("One-way ANOVA Table:\n");
     printf ("\n");
     printf ("Source of Variation   Sum of Squares    df  Empirical Var\n");
     printf ("*********************************************************\n");
diff --git a/scripts/statistics/tests/f_test_regression.m b/scripts/statistics/tests/f_test_regression.m
--- a/scripts/statistics/tests/f_test_regression.m
+++ b/scripts/statistics/tests/f_test_regression.m
@@ -63,15 +63,15 @@ function [pval, f, df_num, df_den] = f_t
   endif
 
   df_num = q;
   df_den = T - k;
 
   [b, v] = ols (y, x);
   diff   = rr * b - r;
   f      = diff' * inv (rr * inv (x' * x) * rr') * diff / (q * v);
-  pval  = 1 - f_cdf (f, df_num, df_den);
+  pval  = 1 - fcdf (f, df_num, df_den);
 
   if (nargout == 0)
     printf ("  pval: %g\n", pval);
   endif
 
 endfunction
diff --git a/scripts/statistics/tests/hotelling_test.m b/scripts/statistics/tests/hotelling_test.m
--- a/scripts/statistics/tests/hotelling_test.m
+++ b/scripts/statistics/tests/hotelling_test.m
@@ -58,15 +58,15 @@ function [pval, Tsq] = hotelling_test (x
       error ("hotelling_test: if X is a matrix, M must be a vector of length columns (X)");
     endif
   else
     error ("hotelling_test: X must be a matrix or vector");
   endif
 
   d    = mean (x) - m;
   Tsq  = n * d * (cov (x) \ d');
-  pval = 1 - f_cdf ((n-p) * Tsq / (p * (n-1)), p, n-p);
+  pval = 1 - fcdf ((n-p) * Tsq / (p * (n-1)), p, n-p);
 
   if (nargout == 0)
     printf ("  pval: %g\n", pval);
   endif
 
 endfunction
diff --git a/scripts/statistics/tests/hotelling_test_2.m b/scripts/statistics/tests/hotelling_test_2.m
--- a/scripts/statistics/tests/hotelling_test_2.m
+++ b/scripts/statistics/tests/hotelling_test_2.m
@@ -71,16 +71,16 @@ function [pval, Tsq] = hotelling_test_2 
     endif
   else
     error ("hotelling_test_2: X and Y must be matrices (or vectors)");
   endif
 
   d    = mean (x) - mean (y);
   S    = ((n_x - 1) * cov (x) + (n_y - 1) * cov (y)) / (n_x + n_y - 2);
   Tsq  = (n_x * n_y / (n_x + n_y)) * d * (S \ d');
-  pval = 1 - f_cdf ((n_x + n_y - p - 1) * Tsq / (p * (n_x + n_y - 2)),
+  pval = 1 - fcdf ((n_x + n_y - p - 1) * Tsq / (p * (n_x + n_y - 2)),
                     p, n_x + n_y - p - 1);
 
   if (nargout == 0)
     printf ("  pval: %g\n", pval);
   endif
 
 endfunction
diff --git a/scripts/statistics/tests/manova.m b/scripts/statistics/tests/manova.m
--- a/scripts/statistics/tests/manova.m
+++ b/scripts/statistics/tests/manova.m
@@ -29,17 +29,17 @@
 ## corresponding group labels (e.g., numbers from 1 to @var{k}).
 ##
 ## The LR test statistic (Wilks' Lambda) and approximate p-values are
 ## computed and displayed.
 ## @end deftypefn
 
 ## Three test statistics (Wilks, Hotelling-Lawley, and Pillai-Bartlett)
 ## and corresponding approximate p-values are calculated and displayed.
-## (Currently NOT because the f_cdf respectively betai code is too bad.)
+## (Currently NOT because the fcdf respectively betai code is too bad.)
 
 ## Author: TF <Thomas.Fuereder@ci.tuwien.ac.at>
 ## Adapted-By: KH <Kurt.Hornik@wu-wien.ac.at>
 ## Description: One-way multivariate analysis of variance (MANOVA)
 
 function manova (x, g)
 
   if (nargin != 2)
@@ -102,41 +102,41 @@ function manova (x, g)
     eta = p;
   else
     eta = sqrt ((p^2 * n_b^2 - 4) / (p^2 + n_b^2 - 5));
   endif
 
   df_den = delta * eta - df_num / 2 + 1;
 
   WT = exp (- log (Lambda) / eta) - 1;
-  W_pval_2 = 1 - f_cdf (WT * df_den / df_num, df_num, df_den);
+  W_pval_2 = 1 - fcdf (WT * df_den / df_num, df_num, df_den);
 
   if (0)
 
     ## Hotelling-Lawley Test
     ## =====================
 
     HL = sum (l);
 
     theta = min (p, n_b);
     u = (abs (p - n_b) - 1) / 2;
     v = (n_w - p - 1) / 2;
 
     df_num = theta * (2 * u + theta + 1);
     df_den = 2 * (theta * v + 1);
 
-    HL_pval = 1 - f_cdf (HL * df_den / df_num, df_num, df_den);
+    HL_pval = 1 - fcdf (HL * df_den / df_num, df_num, df_den);
 
     ## Pillai-Bartlett
     ## ===============
 
     PB = sum (l ./ (1 + l));
 
     df_den = theta * (2 * v + theta + 1);
-    PB_pval = 1 - f_cdf (PB * df_den / df_num, df_num, df_den);
+    PB_pval = 1 - fcdf (PB * df_den / df_num, df_num, df_den);
 
     printf ("\n");
     printf ("One-way MANOVA Table:\n");
     printf ("\n");
     printf ("Test             Test Statistic      Approximate p\n");
     printf ("**************************************************\n");
     printf ("Wilks            %10.4f           %10.9f \n", Lambda, W_pval_1);
     printf ("                                      %10.9f \n", W_pval_2);
diff --git a/scripts/statistics/tests/var_test.m b/scripts/statistics/tests/var_test.m
--- a/scripts/statistics/tests/var_test.m
+++ b/scripts/statistics/tests/var_test.m
@@ -49,17 +49,17 @@ function [pval, f, df_num, df_den] = var
 
   if (! (isvector (x) && isvector (y)))
     error ("var_test: both X and Y must be vectors");
   endif
 
   df_num = length (x) - 1;
   df_den = length (y) - 1;
   f      = var (x) / var (y);
-  cdf    = f_cdf (f, df_num, df_den);
+  cdf    = fcdf (f, df_num, df_den);
 
   if (nargin == 2)
     alt  = "!=";
   endif
 
   if (! ischar (alt))
     error ("var_test: ALT must be a string");
   endif
