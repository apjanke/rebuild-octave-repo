# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1363025578 14400
#      Mon Mar 11 14:12:58 2013 -0400
# Branch classdef
# Node ID b28062b977fd3ebf22300c0ce9ddc752662cfcd8
# Parent  b8a2df776118608460d7ca804565d3394a9304a7
# Parent  12bf6a3f8c45a561d3c2246bfad5dcf006210137
maint: periodic merge of default to classdef

diff --git a/libinterp/parse-tree/lex.h b/libinterp/parse-tree/lex.h
--- a/libinterp/parse-tree/lex.h
+++ b/libinterp/parse-tree/lex.h
@@ -183,25 +183,46 @@ public:
       if (! empty ())
         {
           delete buffer.back ();
           buffer.pop_back ();
         }
     }
 
     // Direct access.
-    token *at (size_t n) { return buffer.at (n); }
-    const token *at (size_t n) const { return buffer.at (n); }
+    token *at (size_t n)
+    {
+      return empty () ? 0 : buffer.at (n);
+    }
+
+    const token *at (size_t n) const
+    {
+      return empty () ? 0 : buffer.at (n);
+    }
 
     // Most recently pushed.
-    token *front (void) { return buffer.front (); }
-    const token *front (void) const { return buffer.front (); }
+    token *front (void)
+    {
+      return empty () ? 0 : buffer.front ();
+    }
+
+    const token *front (void) const
+    {
+      return empty () ? 0 : buffer.front ();
+    }
 
-    token *back (void) { return buffer.back (); }
-    const token *back (void) const { return buffer.back (); }
+    token *back (void)
+    {
+      return empty () ? 0 : buffer.back ();
+    }
+
+    const token *back (void) const
+    {
+      return empty () ? 0 : buffer.back ();
+    }
 
     // Number of elements currently in the buffer, max of sz.
     size_t size (void) const { return buffer.size (); }
 
     bool empty (void) const { return buffer.empty (); }
 
     void clear (void)
     {
@@ -250,16 +271,24 @@ public:
   }
 
   ~lexical_feedback (void);
 
   void init (void);
 
   void reset (void);
 
+  int previous_token_value (void) const;
+
+  bool previous_token_value_is (int tok_val) const;
+
+  void mark_previous_token_trailing_space (void);
+
+  bool space_follows_previous_token (void) const;
+
   // true means that we have encountered eof on the input stream.
   bool end_of_input;
 
   // true means that we should convert spaces to a comma inside a
   // matrix definition.
   bool convert_spaces_to_comma;
 
   // gag.  stupid kludge so that [[1,2][3,4]] will work.
diff --git a/libinterp/parse-tree/lex.ll b/libinterp/parse-tree/lex.ll
--- a/libinterp/parse-tree/lex.ll
+++ b/libinterp/parse-tree/lex.ll
@@ -557,31 +557,47 @@ ANY_INCLUDING_NL (.|{NL})
 
 <LINE_COMMENT_START>{S}*{CCHAR}.*{NL} {
     curr_lexer->lexer_debug ("<LINE_COMMENT_START>{S}*{CCHAR}.*{NL}");
 
     bool full_line_comment = curr_lexer->current_input_column == 1;
     curr_lexer->input_line_number++;
     curr_lexer->current_input_column = 1;
 
+    bool have_space = false;
     size_t len = yyleng;
     size_t i = 0;
     while (i < len)
       {
         char c = yytext[i];
-        if (c == '#' || c == '%' || c == ' ' || c == '\t')
+        if (c == ' ' || c == '\t')
+          {
+            have_space = true;
+            i++;
+          }
+        else
+          break;
+      }
+
+    while (i < len)
+      {
+        char c = yytext[i];
+        if (c == '#' || c == '%')
           i++;
         else
           break;
       }
       
     curr_lexer->comment_text += &yytext[i];
 
     if (! full_line_comment)
       {
+        if (have_space)
+          curr_lexer->mark_previous_token_trailing_space ();
+
         curr_lexer->finish_comment (octave_comment_elt::end_of_line);
 
         curr_lexer->pop_start_state ();
       }
   }
 
 %{
 // End of a block of full-line comments.
@@ -622,16 +638,18 @@ ANY_INCLUDING_NL (.|{NL})
 
 %{
 // Eat whitespace.  Whitespace inside matrix constants is handled by
 // the <MATRIX_START> start state code above.
 %}
 
 {S}* {
     curr_lexer->current_input_column += yyleng;
+
+    curr_lexer->mark_previous_token_trailing_space ();
   }
 
 %{
 // Continuation lines.  Allow comments after continuations.
 %}
 
 {CONT}{S}*{NL} |
 {CONT}{S}*{CCHAR}.*{NL} {
@@ -1366,16 +1384,45 @@ lexical_feedback::reset (void)
 
   pending_local_variables.clear ();
 
   nesting_level.reset ();
 
   tokens.clear ();
 }
 
+int
+lexical_feedback::previous_token_value (void) const
+{
+  const token *tok = tokens.front ();
+  return tok ? tok->token_value () : 0;
+}
+
+bool
+lexical_feedback::previous_token_value_is (int tok_val) const
+{
+  const token *tok = tokens.front ();
+  return tok ? tok->token_value_is (tok_val) : false;
+}
+
+void
+lexical_feedback::mark_previous_token_trailing_space (void)
+{
+  token *tok = tokens.front ();
+  if (tok && ! previous_token_value_is ('\n'))
+    tok->mark_trailing_space ();
+}
+
+bool
+lexical_feedback::space_follows_previous_token (void) const
+{
+  const token *tok = tokens.front ();
+  return tok ? tok->space_follows_token () : false;
+}
+
 static bool
 looks_like_copyright (const std::string& s)
 {
   bool retval = false;
 
   if (! s.empty ())
     {
       size_t offset = s.find_first_not_of (" \t");
@@ -1723,82 +1770,84 @@ octave_lexer::is_keyword_token (const st
         case end_kw:
           if (inside_any_object_index ()
               || (! reading_classdef_file
                   && (defining_func
                       && ! (looking_at_return_list
                             || parsed_function_name.top ()))))
             return 0;
 
-          tok_val = new token (token::simple_end, l, c);
+          tok_val = new token (end_kw, token::simple_end, l, c);
           at_beginning_of_statement = true;
           break;
 
         case end_try_catch_kw:
-          tok_val = new token (token::try_catch_end, l, c);
+          tok_val = new token (end_try_catch_kw, token::try_catch_end, l, c);
           at_beginning_of_statement = true;
           break;
 
         case end_unwind_protect_kw:
-          tok_val = new token (token::unwind_protect_end, l, c);
+          tok_val = new token (end_unwind_protect_kw,
+                               token::unwind_protect_end, l, c);
           at_beginning_of_statement = true;
           break;
 
         case endfor_kw:
-          tok_val = new token (token::for_end, l, c);
+          tok_val = new token (endfor_kw, token::for_end, l, c);
           at_beginning_of_statement = true;
           break;
 
         case endfunction_kw:
-          tok_val = new token (token::function_end, l, c);
+          tok_val = new token (endfunction_kw, token::function_end, l, c);
           at_beginning_of_statement = true;
           break;
 
         case endif_kw:
-          tok_val = new token (token::if_end, l, c);
+          tok_val = new token (endif_kw, token::if_end, l, c);
           at_beginning_of_statement = true;
           break;
 
         case endparfor_kw:
-          tok_val = new token (token::parfor_end, l, c);
+          tok_val = new token (endparfor_kw, token::parfor_end, l, c);
           at_beginning_of_statement = true;
           break;
 
         case endswitch_kw:
-          tok_val = new token (token::switch_end, l, c);
+          tok_val = new token (endswitch_kw, token::switch_end, l, c);
           at_beginning_of_statement = true;
           break;
 
         case endwhile_kw:
-          tok_val = new token (token::while_end, l, c);
+          tok_val = new token (endwhile_kw, token::while_end, l, c);
           at_beginning_of_statement = true;
           break;
 
         case endclassdef_kw:
-          tok_val = new token (token::classdef_end, l, c);
+          tok_val = new token (endclassdef_kw, token::classdef_end, l, c);
           at_beginning_of_statement = true;
           break;
 
         case endenumeration_kw:
-          tok_val = new token (token::enumeration_end, l, c);
+          tok_val = new token (endenumeration_kw, token::enumeration_end,
+                               l, c);
           at_beginning_of_statement = true;
           break;
 
         case endevents_kw:
-          tok_val = new token (token::events_end, l, c);
+          tok_val = new token (endevents_kw, token::events_end, l, c);
           at_beginning_of_statement = true;
           break;
 
         case endmethods_kw:
-          tok_val = new token (token::methods_end, l, c);
+          tok_val = new token (endmethods_kw, token::methods_end, l, c);
           at_beginning_of_statement = true;
           break;
 
         case endproperties_kw:
-          tok_val = new token (token::properties_end, l, c);
+          tok_val = new token (endproperties_kw, token::properties_end, l, c);
           at_beginning_of_statement = true;
           break;
 
 
         case for_kw:
         case parfor_kw:
         case while_kw:
           decrement_promptflag ();
@@ -1868,32 +1917,33 @@ octave_lexer::is_keyword_token (const st
             input_line_number = 1;
           break;
 
         case magic_file_kw:
           {
             if ((reading_fcn_file || reading_script_file
                  || reading_classdef_file)
                 && ! fcn_file_full_name.empty ())
-              tok_val = new token (fcn_file_full_name, l, c);
+              tok_val = new token (magic_file_kw, fcn_file_full_name, l, c);
             else
-              tok_val = new token ("stdin", l, c);
+              tok_val = new token (magic_file_kw, "stdin", l, c);
           }
           break;
 
         case magic_line_kw:
-          tok_val = new token (static_cast<double> (l), "", l, c);
+          tok_val = new token (magic_line_kw, static_cast<double> (l),
+                               "", l, c);
           break;
 
         default:
           panic_impossible ();
         }
 
       if (! tok_val)
-        tok_val = new token (l, c);
+        tok_val = new token (kw->tok, l, c);
 
       push_token (tok_val);
 
       return kw->tok;
     }
 
   return 0;
 }
@@ -2282,17 +2332,17 @@ octave_lexer::handle_number (void)
 
   assert (nread == 1);
 
   quote_is_transpose = true;
   convert_spaces_to_comma = true;
   looking_for_object_index = false;
   at_beginning_of_statement = false;
 
-  push_token (new token (value, yytxt, input_line_number,
+  push_token (new token (NUM, value, yytxt, input_line_number,
                          current_input_column));
 
   current_input_column += flex_yyleng ();
 
   do_comma_insert_check ();
 }
 
 void
@@ -2315,16 +2365,19 @@ octave_lexer::handle_continuation (void)
         {
           have_space = true;
           offset++;
         }
       else
         break;
     }
 
+  if (have_space)
+    mark_previous_token_trailing_space ();
+
   bool have_comment = false;
   while (offset < yylng)
     {
       char c = yytxt[offset];
       if (c == '#' || c == '%')
         {
           have_comment = true;
           offset++;
@@ -2572,27 +2625,29 @@ octave_lexer::handle_string (char delim)
                   if (delim == '\'')
                     s = buf.str ();
                   else
                     s = do_string_escapes (buf.str ());
 
                   quote_is_transpose = true;
                   convert_spaces_to_comma = true;
 
-                  push_token (new token (s, bos_line, bos_col));
-
                   if (delim == '"')
                     gripe_matlab_incompatible ("\" used as string delimiter");
                   else if (delim == '\'')
                     gripe_single_quote_string ();
 
                   looking_for_object_index = true;
                   at_beginning_of_statement = false;
 
-                  return delim == '"' ? DQ_STRING : SQ_STRING;
+                  int tok = delim == '"' ? DQ_STRING : SQ_STRING;
+
+                  push_token (new token (tok, s, bos_line, bos_col));
+
+                  return tok;
                 }
             }
         }
       else
         {
           buf << static_cast<char> (c);
         }
 
@@ -3089,21 +3144,20 @@ octave_lexer::handle_superclass_identifi
   int kw_token = (is_keyword_token (meth) || is_keyword_token (cls)
                   || is_keyword_token (pkg));
   if (kw_token)
     {
       error ("method, class, and package names may not be keywords");
       return LEXICAL_ERROR;
     }
 
-  push_token (new token (meth, pkg, cls, input_line_number,
-                         current_input_column));
-
-  do_comma_insert_check ();
-  maybe_unput_comma (spc_gobbled);
+  push_token (new token (SUPERCLASSREF, meth, pkg, cls,
+                         input_line_number, current_input_column));
+
+  convert_spaces_to_comma = true;
   current_input_column += flex_yyleng ();
 
   return SUPERCLASSREF;
 }
 
 int
 octave_lexer::handle_meta_identifier (void)
 {
@@ -3126,21 +3180,20 @@ octave_lexer::handle_meta_identifier (vo
 
   int kw_token = is_keyword_token (cls) || is_keyword_token (pkg);
   if (kw_token)
     {
       error ("class and package names may not be keywords");
       return LEXICAL_ERROR;
     }
 
-  push_token (new token (pkg, cls, input_line_number,
+  push_token (new token (METAQUERY, pkg, cls, input_line_number,
                          current_input_column));
 
-  do_comma_insert_check ();
-  maybe_unput_comma (spc_gobbled);
+  convert_spaces_to_comma = true;
   current_input_column += flex_yyleng ();
 
   return METAQUERY;
 }
 
 // Figure out exactly what kind of token to return when we have seen
 // an identifier.  Handles keywords.  Return -1 if the identifier
 // should be ignored.
@@ -3166,17 +3219,17 @@ octave_lexer::handle_identifier (void)
   // decide whether to insert a comma.
 
   if (looking_at_indirect_ref)
     {
       do_comma_insert_check ();
 
       maybe_unput_comma (spc_gobbled);
 
-      push_token (new token (tok, input_line_number,
+      push_token (new token (STRUCT_ELT, tok, input_line_number,
                              current_input_column));
 
       quote_is_transpose = true;
       convert_spaces_to_comma = true;
       looking_for_object_index = true;
 
       current_input_column += flex_yyleng ();
 
@@ -3201,17 +3254,17 @@ octave_lexer::handle_identifier (void)
       if (kw_token)
         {
           error ("function handles may not refer to keywords");
 
           return LEXICAL_ERROR;
         }
       else
         {
-          push_token (new token (tok, input_line_number,
+          push_token (new token (FCN_HANDLE, tok, input_line_number,
                                  current_input_column));
 
           current_input_column += flex_yyleng ();
           quote_is_transpose = false;
           convert_spaces_to_comma = true;
           looking_for_object_index = true;
 
           return FCN_HANDLE;
@@ -3282,17 +3335,17 @@ octave_lexer::handle_identifier (void)
     }
 
   // Find the token in the symbol table.  Beware the magic
   // transformation of the end keyword...
 
   if (tok == "end")
     tok = "__end__";
 
-  push_token (new token (&(symbol_table::insert (tok)),
+  push_token (new token (NAME, &(symbol_table::insert (tok)),
                          input_line_number, current_input_column));
 
   // After seeing an identifer, it is ok to convert spaces to a comma
   // (if needed).
 
   convert_spaces_to_comma = true;
 
   if (! (next_tok_is_eq || start_state () == COMMAND_START))
@@ -3640,40 +3693,41 @@ int
 octave_lexer::handle_op_internal (const char *pattern, int tok, bool convert,
                                   bool bos, bool qit, bool compat)
 {
   lexer_debug (pattern);
 
   if (! compat)
     gripe_matlab_incompatible_operator (flex_yytext ());
 
-  push_token (new token (input_line_number, current_input_column));
+  push_token (new token (tok, input_line_number, current_input_column));
 
   current_input_column += flex_yyleng ();
   quote_is_transpose = qit;
   convert_spaces_to_comma = convert;
   looking_for_object_index = false;
   at_beginning_of_statement = bos;
 
   return count_token (tok);
 }
 
 int
 octave_lexer::handle_token (const std::string& name, int tok)
 {
-  token *tok_val = new token (name, input_line_number, current_input_column);
+  token *tok_val = new token (tok, name, input_line_number,
+                              current_input_column);
 
   return handle_token (tok, tok_val);
 }
 
 int
 octave_lexer::handle_token (int tok, token *tok_val)
 {
   if (! tok_val)
-    tok_val = new token (input_line_number, current_input_column);
+    tok_val = new token (tok, input_line_number, current_input_column);
 
   push_token (tok_val);
 
   current_input_column += flex_yyleng ();
   quote_is_transpose = false;
   convert_spaces_to_comma = true;
 
   return count_token (tok);
diff --git a/libinterp/parse-tree/token.cc b/libinterp/parse-tree/token.cc
--- a/libinterp/parse-tree/token.cc
+++ b/libinterp/parse-tree/token.cc
@@ -27,70 +27,85 @@ along with Octave; see the file COPYING.
 #include <cassert>
 
 #include "error.h"
 #include "oct-obj.h"
 #include "symtab.h"
 #include "token.h"
 #include "utils.h"
 
-token::token (int l, int c)
+token::token (int tv, int l, int c)
 {
+  tspc = false;
   line_num = l;
   column_num = c;
+  tok_val = tv;
   type_tag = generic_token;
 }
 
-token::token (const std::string& s, int l, int c)
+token::token (int tv, const std::string& s, int l, int c)
 {
+  tspc = false;
   line_num = l;
   column_num = c;
+  tok_val = tv;
   type_tag = string_token;
   str = new std::string (s);
 }
 
-token::token (double d, const std::string& s, int l, int c)
+token::token (int tv, double d, const std::string& s, int l, int c)
 {
+  tspc = false;
   line_num = l;
   column_num = c;
+  tok_val = tv;
   type_tag = double_token;
   num = d;
   orig_text = s;
 }
 
-token::token (end_tok_type t, int l, int c)
+token::token (int tv, end_tok_type t, int l, int c)
 {
+  tspc = false;
   line_num = l;
   column_num = c;
+  tok_val = tv;
   type_tag = ettype_token;
   et = t;
 }
 
-token::token (symbol_table::symbol_record *s, int l, int c)
+token::token (int tv, symbol_table::symbol_record *s, int l, int c)
 {
+  tspc = false;
   line_num = l;
   column_num = c;
+  tok_val = tv;
   type_tag = sym_rec_token;
   sr = s;
 }
 
-token::token (const std::string& pkg, const std::string& cls, int l, int c)
+token::token (int tv, const std::string& pkg, const std::string& cls,
+              int l, int c)
 {
+  tspc = false;
   line_num = l;
   column_num = c;
+  tok_val = tv;
   type_tag = meta_name_token;
   mc.package_nm = new std::string (pkg);
   mc.class_nm = new std::string (cls);
 }
 
-token::token (const std::string& mth, const std::string& pkg,
+token::token (int tv, const std::string& mth, const std::string& pkg,
               const std::string& cls, int l, int c)
 {
+  tspc = false;
   line_num = l;
   column_num = c;
+  tok_val = tv;
   type_tag = scls_name_token;
   sc.method_nm = new std::string (mth);
   sc.package_nm = new std::string (pkg);
   sc.class_nm = new std::string (cls);
 }
 
 token::~token (void)
 {
@@ -107,31 +122,31 @@ token::~token (void)
   if (type_tag == meta_name_token)
     {
       delete mc.package_nm;
       delete mc.class_nm;
     }
 }
 
 std::string
-token::text (void)
+token::text (void) const
 {
   assert (type_tag == string_token);
   return *str;
 }
 
 double
-token::number (void)
+token::number (void) const
 {
   assert (type_tag == double_token);
   return num;
 }
 
 token::end_tok_type
-token::ettype (void)
+token::ettype (void) const
 {
   assert (type_tag == ettype_token);
   return et;
 }
 
 symbol_table::symbol_record *
 token::sym_rec (void)
 {
diff --git a/libinterp/parse-tree/token.h b/libinterp/parse-tree/token.h
--- a/libinterp/parse-tree/token.h
+++ b/libinterp/parse-tree/token.h
@@ -56,35 +56,41 @@ public:
       parfor_end,
       properties_end,
       switch_end,
       while_end,
       try_catch_end,
       unwind_protect_end
     };
 
-  token (int l = -1, int c = -1);
-  token (const std::string& s, int l = -1, int c = -1);
-  token (double d, const std::string& s = std::string (),
+  token (int tv, int l = -1, int c = -1);
+  token (int tv, const std::string& s, int l = -1, int c = -1);
+  token (int tv, double d, const std::string& s = std::string (),
          int l = -1, int c = -1);
-  token (end_tok_type t, int l = -1, int c = -1);
-  token (symbol_table::symbol_record *s, int l = -1, int c = -1);
-  token (const std::string& pkg, const std::string& cls,
+  token (int tv, end_tok_type t, int l = -1, int c = -1);
+  token (int tv, symbol_table::symbol_record *s, int l = -1, int c = -1);
+  token (int tv, const std::string& pkg, const std::string& cls,
          int l = -1, int c = -1);
-  token (const std::string& mth, const std::string& pkg,
+  token (int tv, const std::string& mth, const std::string& pkg,
          const std::string& cls, int l = -1, int c = -1);
 
   ~token (void);
 
-  int line (void) { return line_num; }
-  int column (void) { return column_num; }
+  void mark_trailing_space (void) { tspc = true; }
+  bool space_follows_token (void) const { return tspc; }
+
+  int token_value (void) const { return tok_val; }
+  bool token_value_is (int tv) const { return tv == tok_val; }
 
-  std::string text (void);
-  double number (void);
-  end_tok_type ettype (void);
+  int line (void) const { return line_num; }
+  int column (void) const { return column_num; }
+
+  std::string text (void) const;
+  double number (void) const;
+  end_tok_type ettype (void) const;
   symbol_table::symbol_record *sym_rec (void);
 
   std::string superclass_method_name (void);
   std::string superclass_package_name (void);
   std::string superclass_class_name (void);
 
   std::string meta_package_name (void);
   std::string meta_class_name (void);
@@ -94,18 +100,20 @@ public:
 private:
 
   // No copying!
 
   token (const token& tok);
 
   token& operator = (const token& tok);
 
+  bool tspc;
   int line_num;
   int column_num;
+  int tok_val;
   token_type type_tag;
   union
     {
       std::string *str;
       double num;
       end_tok_type et;
       symbol_table::symbol_record *sr;
       struct
