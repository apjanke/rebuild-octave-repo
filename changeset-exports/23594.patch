# HG changeset patch
# User Rik <rik@octave.org>
# Date 1497453248 25200
#      Wed Jun 14 08:14:08 2017 -0700
# Node ID af5b813503cb48fde6c0c267e735d41b1051f9d5
# Parent  a8361bc2361a1665eb0494429159224227a56f51
maint: Deprecate is_hermitian and replace with ishermitian.

* CMatrix.h (is_hermitian): Use OCTAVE_DEPRECATED macro around function.
* CMatrix.h (ishermitian): New function.

* CSparse.h (is_hermitian): Use OCTAVE_DEPRECATED macro around function.
* CSparse.h (ishermitian): New function.

* MatrixType.h (is_hermitian): Use OCTAVE_DEPRECATED macro around function.
* MatrixType.h (ishermitian): New function.

* fCMatrix.h (is_hermitian): Use OCTAVE_DEPRECATED macro around function.
* fCMatrix.h (ishermitian): New function.

* CMatrix.cc, CSparse.cc, dMatrix.cc, dSparse.cc, fCMatrix.cc, fMatrix.cc,
EIG.cc, fEIG.cc: Replace instances of is_hermitian with ishermitian.

diff --git a/liboctave/array/CMatrix.cc b/liboctave/array/CMatrix.cc
--- a/liboctave/array/CMatrix.cc
+++ b/liboctave/array/CMatrix.cc
@@ -165,17 +165,17 @@ ComplexMatrix::operator == (const Comple
 
 bool
 ComplexMatrix::operator != (const ComplexMatrix& a) const
 {
   return !(*this == a);
 }
 
 bool
-ComplexMatrix::is_hermitian (void) const
+ComplexMatrix::ishermitian (void) const
 {
   octave_idx_type nr = rows ();
   octave_idx_type nc = cols ();
 
   if (issquare () && nr > 0)
     {
       for (octave_idx_type i = 0; i < nr; i++)
         for (octave_idx_type j = i; j < nc; j++)
@@ -912,35 +912,35 @@ ComplexMatrix::inverse (MatrixType& matt
 
   if (typ == MatrixType::Unknown)
     typ = mattype.type (*this);
 
   if (typ == MatrixType::Upper || typ == MatrixType::Lower)
     ret = tinverse (mattype, info, rcon, force, calc_cond);
   else
     {
-      if (mattype.is_hermitian ())
+      if (mattype.ishermitian ())
         {
           octave::math::chol<ComplexMatrix> chol (*this, info, true, calc_cond);
           if (info == 0)
             {
               if (calc_cond)
                 rcon = chol.rcond ();
               else
                 rcon = 1.0;
               ret = chol.inverse ();
             }
           else
             mattype.mark_as_unsymmetric ();
         }
 
-      if (! mattype.is_hermitian ())
+      if (! mattype.ishermitian ())
         ret = finverse (mattype, info, rcon, force, calc_cond);
 
-      if ((calc_cond || mattype.is_hermitian ()) && rcon == 0.)
+      if ((calc_cond || mattype.ishermitian ()) && rcon == 0.)
         {
           if (numel () == 1)
             ret = ComplexMatrix (1, 1, 0.);
           else
             ret = ComplexMatrix (rows (), columns (),
                                  Complex (octave::numeric_limits<double>::Inf (), 0.));
         }
     }
diff --git a/liboctave/array/CMatrix.h b/liboctave/array/CMatrix.h
--- a/liboctave/array/CMatrix.h
+++ b/liboctave/array/CMatrix.h
@@ -104,17 +104,21 @@ public:
 
   explicit ComplexMatrix (const boolMatrix& a);
 
   explicit ComplexMatrix (const charMatrix& a);
 
   bool operator == (const ComplexMatrix& a) const;
   bool operator != (const ComplexMatrix& a) const;
 
-  bool is_hermitian (void) const;
+  bool ishermitian (void) const;
+
+  OCTAVE_DEPRECATED ("use 'is_hermitian' instead")
+  bool is_hermitian (void) const
+  { return ishermitian (); }
 
   // destructive insert/delete/reorder operations
 
   ComplexMatrix& insert (const Matrix& a, octave_idx_type r, octave_idx_type c);
   ComplexMatrix& insert (const RowVector& a,
                          octave_idx_type r, octave_idx_type c);
   ComplexMatrix& insert (const ColumnVector& a,
                          octave_idx_type r, octave_idx_type c);
diff --git a/liboctave/array/CSparse.cc b/liboctave/array/CSparse.cc
--- a/liboctave/array/CSparse.cc
+++ b/liboctave/array/CSparse.cc
@@ -133,17 +133,17 @@ SparseComplexMatrix::operator == (const 
 
 bool
 SparseComplexMatrix::operator != (const SparseComplexMatrix& a) const
 {
   return !(*this == a);
 }
 
 bool
-SparseComplexMatrix::is_hermitian (void) const
+SparseComplexMatrix::ishermitian (void) const
 {
   octave_idx_type nr = rows ();
   octave_idx_type nc = cols ();
 
   if (nr == nc && nr > 0)
     {
       for (octave_idx_type j = 0; j < nc; j++)
         {
@@ -996,17 +996,17 @@ SparseComplexMatrix::inverse (MatrixType
     ret = tinverse (mattype, info, rcond, true, calc_cond).transpose ();
   else if (typ == MatrixType::Lower || typ == MatrixType::Permuted_Lower)
     {
       MatrixType newtype = mattype.transpose ();
       ret = transpose ().tinverse (newtype, info, rcond, true, calc_cond);
     }
   else
     {
-      if (mattype.is_hermitian ())
+      if (mattype.ishermitian ())
         {
           MatrixType tmp_typ (MatrixType::Upper);
           octave::math::sparse_chol<SparseComplexMatrix> fact (*this, info, false);
           rcond = fact.rcond ();
           if (info == 0)
             {
               double rcond2;
               SparseMatrix Q = fact.Q ();
@@ -1017,17 +1017,17 @@ SparseComplexMatrix::inverse (MatrixType
             }
           else
             {
               // Matrix is either singular or not positive definite
               mattype.mark_as_unsymmetric ();
             }
         }
 
-      if (! mattype.is_hermitian ())
+      if (! mattype.ishermitian ())
         {
           octave_idx_type n = rows ();
           ColumnVector Qinit(n);
           for (octave_idx_type i = 0; i < n; i++)
             Qinit(i) = i;
 
           MatrixType tmp_typ (MatrixType::Upper);
           octave::math::sparse_lu<SparseComplexMatrix> fact (*this,
diff --git a/liboctave/array/CSparse.h b/liboctave/array/CSparse.h
--- a/liboctave/array/CSparse.h
+++ b/liboctave/array/CSparse.h
@@ -106,17 +106,21 @@ public:
   {
     MSparse<Complex>::operator = (a);
     return *this;
   }
 
   bool operator == (const SparseComplexMatrix& a) const;
   bool operator != (const SparseComplexMatrix& a) const;
 
-  bool is_hermitian (void) const;
+  bool ishermitian (void) const;
+
+  OCTAVE_DEPRECATED ("use 'is_hermitian' instead")
+  bool is_hermitian (void) const
+  { return ishermitian (); }
 
   SparseComplexMatrix max (int dim = -1) const;
   SparseComplexMatrix max (Array<octave_idx_type>& index, int dim = -1) const;
   SparseComplexMatrix min (int dim = -1) const;
   SparseComplexMatrix min (Array<octave_idx_type>& index, int dim = -1) const;
 
   SparseComplexMatrix& insert (const SparseComplexMatrix& a,
                                octave_idx_type r, octave_idx_type c);
diff --git a/liboctave/array/MatrixType.h b/liboctave/array/MatrixType.h
--- a/liboctave/array/MatrixType.h
+++ b/liboctave/array/MatrixType.h
@@ -117,22 +117,26 @@ public:
   { return (typ == Lower || typ == Permuted_Lower); }
 
   bool is_banded (void)
   { return (typ == Banded || typ == Banded_Hermitian); }
 
   bool is_tridiagonal (void) const
   { return (typ == Tridiagonal || typ == Tridiagonal_Hermitian); }
 
-  bool is_hermitian (void) const
+  bool ishermitian (void) const
   {
     return (typ == Banded_Hermitian || typ == Tridiagonal_Hermitian
             || typ == Hermitian);
   }
 
+  OCTAVE_DEPRECATED ("use 'is_hermitian' instead")
+  bool is_hermitian (void) const
+  { return ishermitian (); }
+
   bool is_rectangular (void) const { return (typ == Rectangular); }
 
   bool is_known (void) const { return (typ != Unknown); }
 
   bool is_unknown (void) const { return (typ == Unknown); }
 
   void info (void) const;
 
diff --git a/liboctave/array/dMatrix.cc b/liboctave/array/dMatrix.cc
--- a/liboctave/array/dMatrix.cc
+++ b/liboctave/array/dMatrix.cc
@@ -616,35 +616,35 @@ Matrix::inverse (MatrixType& mattype, oc
 
   if (typ == MatrixType::Unknown)
     typ = mattype.type (*this);
 
   if (typ == MatrixType::Upper || typ == MatrixType::Lower)
     ret = tinverse (mattype, info, rcon, force, calc_cond);
   else
     {
-      if (mattype.is_hermitian ())
+      if (mattype.ishermitian ())
         {
           octave::math::chol<Matrix> chol (*this, info, true, calc_cond);
           if (info == 0)
             {
               if (calc_cond)
                 rcon = chol.rcond ();
               else
                 rcon = 1.0;
               ret = chol.inverse ();
             }
           else
             mattype.mark_as_unsymmetric ();
         }
 
-      if (! mattype.is_hermitian ())
+      if (! mattype.ishermitian ())
         ret = finverse (mattype, info, rcon, force, calc_cond);
 
-      if ((calc_cond || mattype.is_hermitian ()) && rcon == 0.
+      if ((calc_cond || mattype.ishermitian ()) && rcon == 0.
           && ! (numel () == 1))
         ret = Matrix (rows (), columns (),
                       octave::numeric_limits<double>::Inf ());
     }
 
   return ret;
 }
 
diff --git a/liboctave/array/dSparse.cc b/liboctave/array/dSparse.cc
--- a/liboctave/array/dSparse.cc
+++ b/liboctave/array/dSparse.cc
@@ -1074,17 +1074,17 @@ SparseMatrix::inverse (MatrixType& matty
     ret = tinverse (mattype, info, rcond, true, calc_cond).transpose ();
   else if (typ == MatrixType::Lower || typ == MatrixType::Permuted_Lower)
     {
       MatrixType newtype = mattype.transpose ();
       ret = transpose ().tinverse (newtype, info, rcond, true, calc_cond);
     }
   else
     {
-      if (mattype.is_hermitian ())
+      if (mattype.ishermitian ())
         {
           MatrixType tmp_typ (MatrixType::Upper);
           octave::math::sparse_chol<SparseMatrix> fact (*this, info, false);
           rcond = fact.rcond ();
           if (info == 0)
             {
               double rcond2;
               SparseMatrix Q = fact.Q ();
@@ -1094,17 +1094,17 @@ SparseMatrix::inverse (MatrixType& matty
             }
           else
             {
               // Matrix is either singular or not positive definite
               mattype.mark_as_unsymmetric ();
             }
         }
 
-      if (! mattype.is_hermitian ())
+      if (! mattype.ishermitian ())
         {
           octave_idx_type n = rows ();
           ColumnVector Qinit(n);
           for (octave_idx_type i = 0; i < n; i++)
             Qinit(i) = i;
 
           MatrixType tmp_typ (MatrixType::Upper);
           octave::math::sparse_lu<SparseMatrix> fact (*this,
diff --git a/liboctave/array/fCMatrix.cc b/liboctave/array/fCMatrix.cc
--- a/liboctave/array/fCMatrix.cc
+++ b/liboctave/array/fCMatrix.cc
@@ -165,17 +165,17 @@ FloatComplexMatrix::operator == (const F
 
 bool
 FloatComplexMatrix::operator != (const FloatComplexMatrix& a) const
 {
   return !(*this == a);
 }
 
 bool
-FloatComplexMatrix::is_hermitian (void) const
+FloatComplexMatrix::ishermitian (void) const
 {
   octave_idx_type nr = rows ();
   octave_idx_type nc = cols ();
 
   if (issquare () && nr > 0)
     {
       for (octave_idx_type i = 0; i < nr; i++)
         for (octave_idx_type j = i; j < nc; j++)
@@ -914,35 +914,35 @@ FloatComplexMatrix::inverse (MatrixType&
 
   if (typ == MatrixType::Unknown)
     typ = mattype.type (*this);
 
   if (typ == MatrixType::Upper || typ == MatrixType::Lower)
     ret = tinverse (mattype, info, rcon, force, calc_cond);
   else
     {
-      if (mattype.is_hermitian ())
+      if (mattype.ishermitian ())
         {
           octave::math::chol<FloatComplexMatrix> chol (*this, info, true, calc_cond);
           if (info == 0)
             {
               if (calc_cond)
                 rcon = chol.rcond ();
               else
                 rcon = 1.0;
               ret = chol.inverse ();
             }
           else
             mattype.mark_as_unsymmetric ();
         }
 
-      if (! mattype.is_hermitian ())
+      if (! mattype.ishermitian ())
         ret = finverse (mattype, info, rcon, force, calc_cond);
 
-      if ((calc_cond || mattype.is_hermitian ()) && rcon == 0.)
+      if ((calc_cond || mattype.ishermitian ()) && rcon == 0.)
         {
           if (numel () == 1)
             ret = FloatComplexMatrix (1, 1, 0.);
           else
             ret = FloatComplexMatrix (rows (), columns (),
                                       FloatComplex (octave::numeric_limits<float>::Inf (), 0.));
         }
     }
diff --git a/liboctave/array/fCMatrix.h b/liboctave/array/fCMatrix.h
--- a/liboctave/array/fCMatrix.h
+++ b/liboctave/array/fCMatrix.h
@@ -109,17 +109,21 @@ public:
 
   explicit FloatComplexMatrix (const charMatrix& a);
 
   FloatComplexMatrix (const FloatMatrix& re, const FloatMatrix& im);
 
   bool operator == (const FloatComplexMatrix& a) const;
   bool operator != (const FloatComplexMatrix& a) const;
 
-  bool is_hermitian (void) const;
+  bool ishermitian (void) const;
+
+  OCTAVE_DEPRECATED ("use 'is_hermitian' instead")
+  bool is_hermitian (void) const
+  { return ishermitian (); }
 
   // destructive insert/delete/reorder operations
 
   FloatComplexMatrix& insert (const FloatMatrix& a,
                               octave_idx_type r, octave_idx_type c);
   FloatComplexMatrix& insert (const FloatRowVector& a,
                               octave_idx_type r, octave_idx_type c);
   FloatComplexMatrix& insert (const FloatColumnVector& a,
diff --git a/liboctave/array/fMatrix.cc b/liboctave/array/fMatrix.cc
--- a/liboctave/array/fMatrix.cc
+++ b/liboctave/array/fMatrix.cc
@@ -623,35 +623,35 @@ FloatMatrix::inverse (MatrixType& mattyp
 
   if (typ == MatrixType::Unknown)
     typ = mattype.type (*this);
 
   if (typ == MatrixType::Upper || typ == MatrixType::Lower)
     ret = tinverse (mattype, info, rcon, force, calc_cond);
   else
     {
-      if (mattype.is_hermitian ())
+      if (mattype.ishermitian ())
         {
           octave::math::chol<FloatMatrix> chol (*this, info, true, calc_cond);
           if (info == 0)
             {
               if (calc_cond)
                 rcon = chol.rcond ();
               else
                 rcon = 1.0;
               ret = chol.inverse ();
             }
           else
             mattype.mark_as_unsymmetric ();
         }
 
-      if (! mattype.is_hermitian ())
+      if (! mattype.ishermitian ())
         ret = finverse (mattype, info, rcon, force, calc_cond);
 
-      if ((calc_cond || mattype.is_hermitian ()) && rcon == 0.
+      if ((calc_cond || mattype.ishermitian ()) && rcon == 0.
           && ! (numel () == 1))
         ret = FloatMatrix (rows (), columns (),
                            octave::numeric_limits<float>::Inf ());
     }
 
   return ret;
 }
 
diff --git a/liboctave/numeric/EIG.cc b/liboctave/numeric/EIG.cc
--- a/liboctave/numeric/EIG.cc
+++ b/liboctave/numeric/EIG.cc
@@ -226,17 +226,17 @@ EIG::symmetric_init (const Matrix& a, bo
 
 octave_idx_type
 EIG::init (const ComplexMatrix& a, bool calc_rev, bool calc_lev, bool balance)
 {
   if (a.any_element_is_inf_or_nan ())
     (*current_liboctave_error_handler)
       ("EIG: matrix contains Inf or NaN values");
 
-  if (a.is_hermitian ())
+  if (a.ishermitian ())
     return hermitian_init (a, calc_rev, calc_lev);
 
   F77_INT n = octave::to_f77_int (a.rows ());
   F77_INT a_nc = octave::to_f77_int (a.cols ());
 
   if (n != a_nc)
     (*current_liboctave_error_handler) ("EIG requires square matrix");
 
@@ -619,17 +619,17 @@ EIG::init (const ComplexMatrix& a, const
 
   if (! force_qz)
     {
       F77_XFCN (zpotrf, ZPOTRF, (F77_CONST_CHAR_ARG2 ("L", 1),
                                  n, F77_DBLE_CMPLX_ARG (tmp_data), n,
                                  info
                                  F77_CHAR_ARG_LEN (1)));
 
-      if (a.is_hermitian () && b.is_hermitian () && info == 0)
+      if (a.ishermitian () && b.ishermitian () && info == 0)
         return hermitian_init (a, b, calc_rev, calc_lev);
     }
 
   ComplexMatrix atmp = a;
   Complex *atmp_data = atmp.fortran_vec ();
 
   ComplexMatrix btmp = b;
   Complex *btmp_data = btmp.fortran_vec ();
diff --git a/liboctave/numeric/fEIG.cc b/liboctave/numeric/fEIG.cc
--- a/liboctave/numeric/fEIG.cc
+++ b/liboctave/numeric/fEIG.cc
@@ -225,17 +225,17 @@ FloatEIG::symmetric_init (const FloatMat
 octave_idx_type
 FloatEIG::init (const FloatComplexMatrix& a, bool calc_rev, bool calc_lev,
                 bool balance)
 {
   if (a.any_element_is_inf_or_nan ())
     (*current_liboctave_error_handler)
       ("EIG: matrix contains Inf or NaN values");
 
-  if (a.is_hermitian ())
+  if (a.ishermitian ())
     return hermitian_init (a, calc_rev, calc_lev);
 
   F77_INT n = octave::to_f77_int (a.rows ());
   F77_INT a_nc = octave::to_f77_int (a.cols ());
 
   if (n != a_nc)
     (*current_liboctave_error_handler) ("EIG requires square matrix");
 
@@ -614,17 +614,17 @@ FloatEIG::init (const FloatComplexMatrix
 
   if (! force_qz)
     {
       F77_XFCN (cpotrf, CPOTRF, (F77_CONST_CHAR_ARG2 ("L", 1),
                                  n, F77_CMPLX_ARG (tmp_data), n,
                                  info
                                  F77_CHAR_ARG_LEN (1)));
 
-      if (a.is_hermitian () && b.is_hermitian () && info == 0)
+      if (a.ishermitian () && b.ishermitian () && info == 0)
         return hermitian_init (a, b, calc_rev, calc_lev);
     }
 
   FloatComplexMatrix atmp = a;
   FloatComplex *atmp_data = atmp.fortran_vec ();
 
   FloatComplexMatrix btmp = b;
   FloatComplex *btmp_data = btmp.fortran_vec ();
