# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1458312324 14400
#      Fri Mar 18 10:45:24 2016 -0400
# Node ID e9978387898a548858c3c722c5b58cd7ffc94e86
# Parent  1b48a5d04fb13df9afaf086d8d157e3157cd173e
* textscan.h, textscan.cc: Rename dstr class to delimited_stream.

diff --git a/libinterp/corefcn/textscan.cc b/libinterp/corefcn/textscan.cc
--- a/libinterp/corefcn/textscan.cc
+++ b/libinterp/corefcn/textscan.cc
@@ -35,61 +35,64 @@ along with Octave; see the file COPYING.
 #include "ovl.h"
 #include "textscan.h"
 #include "utils.h"
 
 // Create a delimited stream, reading from is, with delimiters delims,
 // and allowing reading of up to tellg + longest_lookeahead.  When is
 // is at EOF, lookahead may be padded by ASCII nuls.
 
-dstr::dstr (std::istream& is, const std::string& delimiters,
-            int longest_lookahead, octave_idx_type bsize)
-    : bufsize (bsize), i_stream (is), longest (longest_lookahead),
-      delims (delimiters),
-      flags (std::ios::failbit & ~std::ios::failbit) // can't cast 0
+delimited_stream::delimited_stream (std::istream& is,
+                                    const std::string& delimiters,
+                                    int longest_lookahead,
+                                    octave_idx_type bsize)
+  : bufsize (bsize), i_stream (is), longest (longest_lookahead),
+    delims (delimiters),
+    flags (std::ios::failbit & ~std::ios::failbit) // can't cast 0
 {
   buf = new char[bufsize];
   eob = buf + bufsize;
   idx = eob;                    // refresh_buf shouldn't try to copy old data
   progress_marker = idx;
   refresh_buf ();               // load the first batch of data
 }
 
 // Used to create a stream from a strstream from data read from a dstr.
-// FIXME: Find a more efficient approach.  Perhaps derived dstrstream
-dstr::dstr (std::istream& is, const dstr& ds)
+// FIXME: Find a more efficient approach.  Perhaps derived dstr
+delimited_stream::delimited_stream (std::istream& is,
+                                    const delimited_stream& ds)
   : bufsize (ds.bufsize), i_stream (is), longest (ds.longest),
     delims (ds.delims),
     flags (std::ios::failbit & ~std::ios::failbit) // can't cast 0
 {
   buf = new char[bufsize];
   eob = buf + bufsize;
   idx = eob;                    // refresh_buf shouldn't try to copy old data
   progress_marker = idx;
   refresh_buf ();               // load the first batch of data
 }
 
-dstr::~dstr ()
+delimited_stream::~delimited_stream (void)
 {
   // Seek to the correct position in i_stream.
   if (!eof ())
     {
       i_stream.clear ();
       i_stream.seekg (buf_in_file);
       i_stream.read (buf, idx - buf);
     }
 
   delete [] buf;
 }
 
 // Read a character from the buffer, refilling the buffer from the file
 // if necessary.
 
 int
-dstr::get_undelim ()
+delimited_stream::get_undelim (void)
 {
   int retval;
   if (eof ())
     {
       setstate (std::ios_base::failbit);
       return EOF;
     }
 
@@ -113,31 +116,31 @@ dstr::get_undelim ()
 
   return retval;
 }
 
 // Return the next character to be read without incrementing the
 // pointer, refilling the buffer from the file if necessary.
 
 int
-dstr::peek_undelim ()
+delimited_stream::peek_undelim (void)
 {
   int retval = get_undelim ();
   putback ();
 
   return retval;
 }
 
 // Copy remaining unprocessed data to the start of the buffer and load
 // new data to fill it.  Return EOF if the file is at EOF before
 // reading any data and all of the data that has been read has been
 // processed.
 
 int
-dstr::refresh_buf (void)
+delimited_stream::refresh_buf (void)
 {
   if (eof ())
     return EOF;
 
   int retval;
   int old_remaining = eob - idx;
 
   if (old_remaining < 0)
@@ -199,17 +202,17 @@ dstr::refresh_buf (void)
 
 // Return a pointer to a block of data of size size, assuming that a
 // sufficiently large buffer is available in buffer, if required.
 // If called when delimited == true, and size is no greater than
 // longest_lookahead then this will not call refresh_buf, so seekg
 // still works.  Otherwise, seekg may be invalidated.
 
 char *
-dstr::read (char *buffer, int size, char* &prior_tell)
+delimited_stream::read (char *buffer, int size, char* &prior_tell)
 {
   char *retval;
 
   if (eob  - idx > size)
     {
       retval = idx;
       idx += size;
       if (idx > last)
@@ -266,17 +269,17 @@ dstr::read (char *buffer, int size, char
 
   return retval;
 }
 
 // Return in OUT an entire line, terminated by delim.  On input, OUT
 // must have length at least 1.
 
 int
-dstr::getline (std::string& out, char delim)
+delimited_stream::getline (std::string& out, char delim)
 {
   int len = out.length (), used = 0;
   int ch;
   while ((ch = get_undelim ()) != delim && ch != EOF)
     {
       out[used++] = ch;
       if (used == len)
         {
@@ -806,29 +809,29 @@ textscan_format_list::printme (void) con
         << "text:       `" << undo_string_escapes (elt->text) << "'\n\n";
     }
 }
 
 // If FORMAT is explicitly "", it is assumed to be "%f" repeated enough
 // times to read the first row of the file.  Set it now.
 
 int
-textscan_format_list::read_first_row (dstr& is, textscan& ts)
+textscan_format_list::read_first_row (delimited_stream& is, textscan& ts)
 {
   // Read first line and strip end-of-line, which may be two characters
   std::string first_line (20, ' ');
 
   is.getline (first_line, static_cast<char> (ts.eol2));
 
   if (first_line.length () > 0
       && first_line[first_line.length () - 1] == ts.eol1)
     first_line.resize (first_line.length () - 1);
 
   std::istringstream strstr (first_line);
-  dstr ds (strstr, is);
+  delimited_stream ds (strstr, is);
 
   dim_vector dv (1,1);      // initial size of each output_container
   Complex val;
   octave_value val_type;
   nconv = 0;
   int max_empty = 1000;     // failsafe, if ds fails but not with eof
   int retval = 0;
 
@@ -939,17 +942,17 @@ textscan::scan (std::istream *isp, texts
     buf_size = buffer_size;
   else if (ntimes > 0)
     {
       // Avoid overflow of 80*ntimes...
       buf_size = std::min (buf_size, std::max (ntimes, 80 * ntimes));
       buf_size = std::max (buf_size, ntimes);
     }
   // Finally, create the stream.
-  dstr is (*isp, whitespace + delims, max_lookahead, buf_size);
+  delimited_stream is (*isp, whitespace + delims, max_lookahead, buf_size);
 
   // Grow retval dynamically.  "size" is half the initial size
   // (FIXME -- Should we start smaller if ntimes is large?)
   octave_idx_type size = ((ntimes < 8 && ntimes >= 0) ? ntimes : 1);
   Array<octave_idx_type> row_idx (dim_vector (1,2));
   row_idx(1) = 0;
 
   int err = 0;
@@ -1122,17 +1125,18 @@ pown (double x, unsigned int n)
 
   return retval;
 }
 
 // Read a double considering the "precision" field of  fmt  and the
 // exp_chars  option of  options.
 
 double
-textscan::read_double (dstr& is, const textscan_format_elt& fmt) const
+textscan::read_double (delimited_stream& is,
+                       const textscan_format_elt& fmt) const
 {
   int sign = 1;
   unsigned int width_left = fmt.width;
   double retval = 0;
   bool valid = false;         // syntactically correct double?
 
   int ch = is.peek ();
 
@@ -1292,17 +1296,17 @@ textscan::read_double (dstr& is, const t
   return retval * sign;
 }
 
 // Read a single number: real, complex, inf, NaN, possibly with limited
 // precision.  Calls to this should be preceded by skip_whitespace.
 // Calling that inside scan_complex would violate its const declaration.
 
 void
-textscan::scan_complex (dstr& is, const textscan_format_elt& fmt,
+textscan::scan_complex (delimited_stream& is, const textscan_format_elt& fmt,
                         Complex& val) const
 {
   double im = 0;
   double re = 0;
   bool as_empty = false;   // did we fail but match a "treat_as_empty" string?
   bool inf = false;
 
   int ch = is.peek ();
@@ -1434,17 +1438,18 @@ textscan::scan_complex (dstr& is, const 
     val = empty_value.scalar_value ();
   else
     val = Complex (re, im);
 }
 
 // Return in VAL the run of characters from IS NOT contained in PATTERN. 
 
 int
-textscan::scan_caret (dstr& is, const char *pattern, std::string& val) const
+textscan::scan_caret (delimited_stream& is, const char *pattern,
+                      std::string& val) const
 {
   int c1 = EOF;
   std::ostringstream obuf;              // Is this optimised for growing?
 
   while (is && (c1 = (is && ! is.eof ()) ? is.get_undelim () : EOF) != EOF
          && ! strchr (pattern, c1))
     obuf << static_cast<char> (c1);
 
@@ -1455,17 +1460,17 @@ textscan::scan_caret (dstr& is, const ch
 
   return c1;
 }
 
 // Read until one of the strings in DELIMITERS is found.  For
 // efficiency, ENDS is a list of the last character of each delimiter.
 
 std::string
-textscan::read_until (dstr& is, const Cell& delimiters,
+textscan::read_until (delimited_stream& is, const Cell& delimiters,
                      const std::string& ends) const
 {
   std::string retval ("");
   bool done = false;
   do
     {                               // find sequence ending with an ending char
       std::string next;
       scan_caret (is, ends.c_str (), next);
@@ -1497,17 +1502,17 @@ textscan::read_until (dstr& is, const Ce
 }
 
 
 // Read stream until either fmt.width chars have been read, or
 // options.delimiter has been found.  Does *not* rely on fmt being 's'.
 // Used by formats like %6f to limit to 6.
 
 void
-textscan::scan_string (dstr& is, const textscan_format_elt& fmt,
+textscan::scan_string (delimited_stream& is, const textscan_format_elt& fmt,
                        std::string& val) const
 {
   if (delim_list.numel () == 0)
     {
       unsigned int i = 0;
       unsigned int width = fmt.width;
 
       for (i = 0; i < width; i++)
@@ -1535,18 +1540,18 @@ textscan::scan_string (dstr& is, const t
         }
       val = textscan::read_until (is, delim_list, ends);
     }
 }
 
 // Return in VAL the run of characters from IS contained in PATTERN.
 
 int
-textscan::scan_bracket (dstr& is, const char *pattern, std::string& val)
-          const
+textscan::scan_bracket (delimited_stream& is, const char *pattern,
+                        std::string& val) const
 {
   int c1 = EOF;
   std::ostringstream obuf;              // Is this optimised for growing?
 
   while (is && strchr (pattern, (c1 = is.get_undelim ())))
     obuf << static_cast<char> (c1);
 
   val = obuf.str ();
@@ -1555,17 +1560,17 @@ textscan::scan_bracket (dstr& is, const 
   return c1;
 }
 
 // Return in VAL a string, either delimited by whitespace/delimiters, or
 // enclosed in a pair of double quotes ("...").  Enclosing quotes are
 // removed.  A consecutive pair "" is inserted into VAL as a single ".
 
 void
-textscan::scan_qstring (dstr& is, const textscan_format_elt& fmt,
+textscan::scan_qstring (delimited_stream& is, const textscan_format_elt& fmt,
                         std::string& val)
 {
   skip_whitespace (is);
 
   if (is.peek () != '\"')
     scan_string (is, fmt, val);
   else
     {
@@ -1583,17 +1588,17 @@ textscan::scan_qstring (dstr& is, const 
         }
     }
 }
 
 // Read from IS into VAL a string of the next fmt.width characters,
 // including any whitespace or delimiters.
 
 void
-textscan::scan_cstring (dstr& is, const textscan_format_elt& fmt,
+textscan::scan_cstring (delimited_stream& is, const textscan_format_elt& fmt,
                         std::string& val) const
 {
   val.resize (fmt.width);
 
   for (unsigned int i = 0; is && i < fmt.width; i++)
     {
       int ch = is.get_undelim ();
       if (ch != EOF)
@@ -1605,17 +1610,17 @@ textscan::scan_cstring (dstr& is, const 
         }
     }
 }
 
 
 //  Read a single '%...' conversion and place it in position ROW of OV.
 
 void
-textscan::scan_one (dstr& is, const textscan_format_elt& fmt,
+textscan::scan_one (delimited_stream& is, const textscan_format_elt& fmt,
                     octave_value& ov, Array<octave_idx_type> row)
 {
   skip_whitespace (is);
 
   is.clear ();
 
   octave_value val;
   if (fmt.numeric)
@@ -1788,17 +1793,18 @@ textscan::scan_one (dstr& is, const text
 
   is.field_done ();
 }
 
 // Read data corresponding to the entire format string once, placing the
 // values in row ROW of retval. 
 
 int
-textscan::read_format_once (dstr& is, textscan_format_list& fmt_list,
+textscan::read_format_once (delimited_stream& is,
+                            textscan_format_list& fmt_list,
                             std::list<octave_value> & retval,
                             Array<octave_idx_type> row, int& done_after)
 {
   const textscan_format_elt *elem = fmt_list.first ();
   std::list<octave_value>::iterator out = retval.begin ();
   bool no_conversions = true;
   bool done = false;
   bool conversion_failed = false;       // Record for ReturnOnError
@@ -2134,17 +2140,17 @@ textscan::parse_options (const octave_va
     for (unsigned int i = 0; i < delims.length (); i++)
       delim_table[delims[i]] = '1';
 }
 
 // Skip comments, and characters specified by the "Whitespace" option.
 // If EOLstop == true, don't skip end of line.
 
 int
-textscan::skip_whitespace (dstr& is, bool EOLstop)
+textscan::skip_whitespace (delimited_stream& is, bool EOLstop)
 {
   int c1 = EOF;
   bool found_comment = false;
 
   do
     {
       found_comment = false;
       int prev = -1;
@@ -2217,17 +2223,17 @@ textscan::skip_whitespace (dstr& is, boo
   return c1;
 }
 
 // See if the next few characters match one of the strings in target.
 // For efficiency, MAX_LEN is the cached longest length of any target.
 // Return -1 if none is found, or the index of the match.
 
 int
-textscan::lookahead (dstr& is, const Cell& targets, int max_len,
+textscan::lookahead (delimited_stream& is, const Cell& targets, int max_len,
                      bool case_sensitive) const
 {
   // target strings may be different sizes.
   // Read ahead longest, put it all back, then re-read the string
   // that matches.
 
   char *pos = is.tellg ();
 
@@ -2257,17 +2263,17 @@ textscan::lookahead (dstr& is, const Cel
   if (i == targets.numel ())
     i = -1;
 
   return i;
 }
 
 // Skip delimiters -- multiple if MultipleDelimsAsOne specified.
 int
-textscan::skip_delim (dstr& is)
+textscan::skip_delim (delimited_stream& is)
 {
   int c1 = skip_whitespace (is, true);  // 'true': stop once EOL is read
   if (delim_list.numel () == 0)         // single character delimiter
     {
       if (is_delim (c1) || c1 == eol1 || c1 == eol2)
         {
           is.get ();
           if (c1 == eol1 && is.peek_undelim () == eol2)
@@ -2329,17 +2335,17 @@ textscan::skip_delim (dstr& is)
   return c1;
 }
 
 // Read in as much of the input as coincides with the literal in the
 // format string.  Return "true" if the entire literal is matched, else
 // false (and set failbit).
 
 bool
-textscan::match_literal (dstr& is, const textscan_format_elt& fmt)
+textscan::match_literal (delimited_stream& is, const textscan_format_elt& fmt)
 {
      // "false" -> treat EOL as normal space
      // since a delimiter at the start of a line is a mismatch, not empty field
   skip_whitespace (is, false);
 
   for (unsigned int i = 0; i < fmt.width; i++)
     {
       int ch = is.get_undelim ();
diff --git a/libinterp/corefcn/textscan.h b/libinterp/corefcn/textscan.h
--- a/libinterp/corefcn/textscan.h
+++ b/libinterp/corefcn/textscan.h
@@ -35,26 +35,26 @@ along with Octave; see the file COPYING.
 //
 // The function reads chunks into a 4kiB buffer, and marks where the
 // last delimiter occurs.  Reads up to this delimiter can be fast.
 // After that last delimiter, the remaining text is moved to the front
 // of the buffer and the buffer is refilled.  This also allows cheap
 // seek and tell operations within a "fast read" block.
 
 class
-dstr
+delimited_stream
 {
 public:
 
-  dstr (std::istream& is, const std::string& delimiters,
+  delimited_stream (std::istream& is, const std::string& delimiters,
         int longest_lookahead, octave_idx_type bsize = 4096);
 
-  dstr (std::istream& is, const dstr& ds);
+  delimited_stream (std::istream& is, const delimited_stream& ds);
 
-  ~dstr (void);
+  ~delimited_stream (void);
 
   // Called when optimised sequence of get is finished.  Ensures that
   // there is a remaining delimiter in buf, or loads more data in.
   void field_done (void)
   {
     if (idx >= last)
       refresh_buf ();
   }
@@ -155,19 +155,19 @@ private:
 
   // Marker to see if a read consumes any characters.
   char *progress_marker;
 
   std::ios_base::iostate flags; 
 
   // No copying!
 
-  dstr (const dstr&);
+  delimited_stream (const delimited_stream&);
 
-  dstr& operator = (const dstr&);
+  delimited_stream& operator = (const delimited_stream&);
 };
 
 // A single conversion specifier, such as %f or %c.
 
 class
 OCTINTERP_API
 textscan_format_elt
 {
@@ -296,17 +296,17 @@ public:
   operator const void* (void) const { return ok () ? this : 0; }
 
   // True if number of %f to be set from data file.
   bool set_from_first;
 
   // At least one conversion specifier is s,q,c, or [...].
   bool has_string;
 
-  int read_first_row (dstr& is, textscan& ts);
+  int read_first_row (delimited_stream& is, textscan& ts);
 
   std::list<octave_value> out_buf (void) const { return (output_container); }
 
 private:
 
   // Number of conversions specified by this format string, or -1 if
   // invalid conversions have been found.
   octave_idx_type nconv;
@@ -437,56 +437,58 @@ private:
 
   bool collect_output;
   bool multiple_delims_as_one;
   bool default_exp;
   bool numeric_delim;
 
   octave_idx_type lines;
 
-  int read_format_once (dstr &isp, textscan_format_list& fmt_list,
+  int read_format_once (delimited_stream &isp, textscan_format_list& fmt_list,
                         std::list<octave_value> & retval,
                         Array<octave_idx_type> row, int& done_after);
 
-  void scan_one (dstr& is, const textscan_format_elt& fmt,
-                          octave_value& ov, Array<octave_idx_type> row);
+  void scan_one (delimited_stream& is, const textscan_format_elt& fmt,
+                 octave_value& ov, Array<octave_idx_type> row);
 
   // Methods to process a particular conversion specifier.
-  double read_double (dstr& is, const textscan_format_elt& fmt) const;
+  double read_double (delimited_stream& is,
+                      const textscan_format_elt& fmt) const;
 
-  void scan_complex (dstr& is, const textscan_format_elt& fmt,
+  void scan_complex (delimited_stream& is, const textscan_format_elt& fmt,
                      Complex& val) const;
 
-  int scan_bracket (dstr& is, const char *pattern, std::string& val) const;
-
-  int scan_caret (dstr& is, const char *, std::string& val) const;
-
-  void scan_string (dstr& is, const textscan_format_elt& fmt,
+  int scan_bracket (delimited_stream& is, const char *pattern,
                     std::string& val) const;
 
-  void scan_cstring (dstr& is, const textscan_format_elt& fmt,
+  int scan_caret (delimited_stream& is, const char *, std::string& val) const;
+
+  void scan_string (delimited_stream& is, const textscan_format_elt& fmt,
+                    std::string& val) const;
+
+  void scan_cstring (delimited_stream& is, const textscan_format_elt& fmt,
                      std::string& val) const;
 
-  void scan_qstring (dstr& is, const textscan_format_elt& fmt,
+  void scan_qstring (delimited_stream& is, const textscan_format_elt& fmt,
                      std::string& val);
 
   // Helper methods.
-  std::string read_until (dstr& is, const Cell& delimiters,
+  std::string read_until (delimited_stream& is, const Cell& delimiters,
                           const std::string& ends) const;
 
-  int lookahead (dstr& is, const Cell& targets, int max_len,
+  int lookahead (delimited_stream& is, const Cell& targets, int max_len,
                  bool case_sensitive = true) const;
 
-  char *get_field (dstr& isp, unsigned int width) const;
+  char *get_field (delimited_stream& isp, unsigned int width) const;
 
-  bool match_literal (dstr& isp, const textscan_format_elt& elem);
+  bool match_literal (delimited_stream& isp, const textscan_format_elt& elem);
 
-  int  skip_whitespace (dstr& is, bool EOLstop = false);
+  int  skip_whitespace (delimited_stream& is, bool EOLstop = false);
 
-  int  skip_delim (dstr& is);
+  int  skip_delim (delimited_stream& is);
 
   bool is_delim (unsigned char ch) const
   {
     return ((delim_table.length () == 0
              && (isspace (ch) || ch == eol1 || ch == eol2))
             || delim_table[ch] != '\0');
   }
 
