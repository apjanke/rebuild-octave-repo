# HG changeset patch
# User Jacob Dawid <jacob.dawid@gmail.com>
# Date 1342707220 14400
#      Thu Jul 19 10:13:40 2012 -0400
# Branch gui
# Node ID 4daed35ff7764d29e8338907089a0698f65ad5b8
# Parent  a6c44c28dabe50b792e0913c292644ae5b731bcb
Added dimension column to workspace view. Using octave print-function to retrieve a value string for a variable.

* octave-main-thread.cc: Changed argv[0] to "octave".
* symbol-information.h: Added _dimension attribute and code to generate dimensions.
* workspace-model: Added a new dimensioncolumn to the model.

diff --git a/gui/src/octave-adapter/octave-main-thread.cc b/gui/src/octave-adapter/octave-main-thread.cc
--- a/gui/src/octave-adapter/octave-main-thread.cc
+++ b/gui/src/octave-adapter/octave-main-thread.cc
@@ -22,12 +22,12 @@ octave_main_thread::octave_main_thread (
 {
 }
 
 void
 octave_main_thread::run ()
 {
   setlocale(LC_ALL, "en_US.UTF-8");
   int argc = 1;
-  const char *argv[] = { "" };
+  const char *argv[] = { "octave" };
   emit ready();
   octave_main (argc, (char **) argv, 0);
 }
diff --git a/gui/src/symbol-information.h b/gui/src/symbol-information.h
--- a/gui/src/symbol-information.h
+++ b/gui/src/symbol-information.h
@@ -16,16 +16,18 @@
  */
 
 #ifndef SYMBOLINFORMATION_H
 #define SYMBOLINFORMATION_H
 
 #include <QString>
 #include <QHash>
 
+#include <sstream>
+
 // Octave includes
 #undef PACKAGE_BUGREPORT
 #undef PACKAGE_NAME
 #undef PACKAGE_STRING
 #undef PACKAGE_TARNAME
 #undef PACKAGE_VERSION
 #undef PACKAGE_URL
 #include "octave/config.h"
@@ -74,35 +76,37 @@ typedef struct symbol_information
     global      = 1,
     persistent  = 2,
     hidden      = 3
   };
 
   QString _symbol;
   QString _type;
   QString _value;
+  QString _dimension;
   Scope   _scope;
 
   /** Hashes the symbol information for quickly comparing it. */
   int
   hash () const
   {
-    return qHash (_symbol) + qHash (_type) + qHash (_value) + (int)_scope;
+    return qHash (_symbol) + qHash (_type) + qHash (_value) + qHash (_dimension) + (int)_scope;
   }
 
   /** Compares two symbol information objects. */
   bool
   equals (const symbol_information& other) const
   {
     if (hash () == other.hash ())
       {
         return _symbol == other._symbol
             && _type   == other._type
             && _value  == other._value
-            && _scope  == other._scope;
+            && _scope  == other._scope
+            && _dimension == other._dimension;
       }
   }
 
   /** Extracts meta information from a given symbol record. */
   bool
   from_symbol_record (const symbol_table::symbol_record& symbol_record)
   {
     if (symbol_record.is_local () && !symbol_record.is_global () && !symbol_record.is_hidden ())
@@ -112,44 +116,34 @@ typedef struct symbol_information
     else if (symbol_record.is_persistent ())
       _scope = persistent;
     else if (symbol_record.is_hidden ())
       _scope = hidden;
 
     _symbol = QString (symbol_record.name ().c_str ());
     _type   = QString (symbol_record.varval ().type_name ().c_str ());
     octave_value ov = symbol_record.varval ();
+    std::stringstream buffer;
+    ov.print (buffer, true);
+    _value  = QString::fromStdString (buffer.str ());
+    _value.replace("\n", " ");
 
-    // For every type, convert to a human readable string.
-    if (ov.is_sq_string ())
-      _value = QString ("\'%1\'").arg (ov.string_value ().c_str ());
-    else if (ov.is_dq_string ())
-      _value = QString ("\"%1\"").arg (ov.string_value ().c_str ());
-    else if (ov.is_real_scalar () && ! ov.is_bool_type ())
-      _value = QString ("%1").arg (ov.scalar_value ());
-    else if (ov.is_complex_scalar ())
-      _value = QString ("%1 + %2i").arg (ov.scalar_value ())
-                                   .arg (ov.complex_value ().imag ());
+    if (ov.is_string ())
+      _dimension = QString ("%1").arg (ov.string_value ().length ());
     else if (ov.is_range ())
-      _value =  QString ("%1 : %2 : %3").arg (ov.range_value ().base ())
-                                        .arg (ov.range_value ().inc ())
-                                        .arg (ov.range_value ().limit ());
-    else if (ov.is_matrix_type ())
-      _value = QString ("%1x%2").arg (ov.rows ())
-                                .arg (ov.columns ());
-    else if (ov.is_cell ())
-      _value = QString ("%1x%2").arg (ov.rows ())
-                                .arg (ov.columns ());
-    else if (ov.is_bool_type ())
-      _value = ov.bool_value () ? QString ("true") : QString ("false");
+      _dimension =  QString ("%1 : %2 : %3").arg (ov.range_value ().base ())
+                                            .arg (ov.range_value ().inc ())
+                                            .arg (ov.range_value ().limit ());
+    else if (ov.is_matrix_type () || ov.is_cell ())
+      _dimension = QString ("%1x%2").arg (ov.rows ())
+                                    .arg (ov.columns ());
     else if (ov.is_function_handle ())
-      _value = QString ("FIXME: function handle found"); // See code for func2str for a possible solution
+      _dimension = QString ("func handle"); // See code for func2str for a possible solution
     else if (ov.is_inline_function ())
-      _value = QString ("FIXME: inline function found"); // See code for formula for a possible solution
+      _dimension = QString ("inline func"); // See code for formula for a possible solution
     else
-      _value = QString ("<Type not recognized>");
+      _dimension = "1";
 
-    _value.replace("\n", "\\n");
     return true;
   }
 } symbol_information;
 
 #endif // SYMBOLINFORMATION_H
diff --git a/gui/src/workspace-model.cc b/gui/src/workspace-model.cc
--- a/gui/src/workspace-model.cc
+++ b/gui/src/workspace-model.cc
@@ -19,17 +19,17 @@
 #include <QTreeWidget>
 #include <QTime>
 #include "octave-link.h"
 
 workspace_model::workspace_model(QObject *parent)
   : QAbstractItemModel(parent), octave_event_observer ()
 {
   QList<QVariant> rootData;
-  rootData << tr ("Name") << tr ("Type") << tr ("Value");
+  rootData << tr ("Name") << tr ("Type") << tr("Dimension") << tr ("Value");
   _rootItem = new tree_item(rootData);
 
   insert_top_level_item(0, new tree_item ("Local"));
   insert_top_level_item(1, new tree_item ("Global"));
   insert_top_level_item(2, new tree_item ("Persistent"));
   insert_top_level_item(3, new tree_item ("Hidden"));
 
   connect(&_update_workspace_model_timer,
@@ -77,17 +77,18 @@ workspace_model::event_accepted (octave_
       top_level_item (3)->delete_child_items ();
 
       foreach (const symbol_information& s, _symbol_information)
         {
           tree_item *child = new tree_item ();
 
           child->set_data (0, s._symbol);
           child->set_data (1, s._type);
-          child->set_data (2, s._value);
+          child->set_data (2, s._dimension);
+          child->set_data (3, s._value);
 
           switch (s._scope)
             {
               case symbol_information::local:       top_level_item (0)->add_child (child); break;
               case symbol_information::global:      top_level_item (1)->add_child (child); break;
               case symbol_information::persistent:  top_level_item (2)->add_child (child); break;
               case symbol_information::hidden:      top_level_item (3)->add_child (child); break;
             }
diff --git a/gui/src/workspace-model.h b/gui/src/workspace-model.h
--- a/gui/src/workspace-model.h
+++ b/gui/src/workspace-model.h
@@ -32,17 +32,17 @@ class tree_item
 public:
   tree_item(const QList<QVariant> &data, tree_item *parent = 0) {
     _parent_item = parent;
     _item_data = data;
   }
 
   tree_item(QVariant data = QVariant(), tree_item *parent = 0) {
     QList<QVariant> variantList;
-    variantList << data << QVariant() << QVariant();
+    variantList << data << QVariant () << QVariant () << QVariant ();
     _parent_item = parent;
     _item_data = variantList;
   }
 
   ~tree_item() {
      qDeleteAll(_child_items);
   }
 
