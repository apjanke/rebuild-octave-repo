# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1510936615 18000
#      Fri Nov 17 11:36:55 2017 -0500
# Node ID dd810f9d26e7955ea9cebe78c50f816048b02c2f
# Parent  0dd6c909baa2add9dc9ee2a621ff214bc1229278
use m_ prefix for symbol_record class data members

* symrec.h, symrec.cc (class symbol_record::symbol_record_rep,
class symbol_record): Use m_prefix for all class data members.
(symbol_record::storage_class): Rename function from xstorage_class.
(symbol_record_rep::name, symbol_record_rep::rename): New functions.
Use them instead of accessing symbol_record_rep::m_name directly.
(class symbol_record::symbol_record_rep): Make all data members private.

diff --git a/libinterp/corefcn/symrec.cc b/libinterp/corefcn/symrec.cc
--- a/libinterp/corefcn/symrec.cc
+++ b/libinterp/corefcn/symrec.cc
@@ -59,17 +59,17 @@ namespace octave
     if (! (is_hidden () || is_inherited ())
         && sid == decl_scope ())
       {
         if (is_global ())
           unmark_global ();
 
         if (is_persistent ())
           {
-            sid->persistent_assign (name, varval ());
+            sid->persistent_assign (m_name, varval ());
 
             unmark_persistent ();
           }
 
         assign (octave_value ());
       }
   }
 
@@ -84,17 +84,17 @@ namespace octave
 
     symbol_scope *curr_scope
       = __require_current_scope__ ("symbol_record::symbol_record_rep::init_persistent");
 
     if (! is_defined ())
       {
         mark_persistent ();
 
-        assign (curr_scope->persistent_varval (name));
+        assign (curr_scope->persistent_varval (m_name));
       }
     // FIXME: this causes trouble with recursive calls.
     // else
     //   error ("unable to declare existing variable persistent");
   }
 
   void
   symbol_record::symbol_record_rep::erase_persistent (void)
@@ -105,37 +105,38 @@ namespace octave
         return;
       }
 
     unmark_persistent ();
 
     symbol_scope *curr_scope
       = __require_current_scope__ ("symbol_record::symbol_record_rep::erase_persistent");
 
-    curr_scope->erase_persistent (name);
+    curr_scope->erase_persistent (m_name);
   }
 
   symbol_record::symbol_record_rep *
   symbol_record::symbol_record_rep::dup (symbol_scope *new_scope) const
   {
     // FIXME: is this the right thing do to?
     if (auto t_fwd_rep = m_fwd_rep.lock ())
       return t_fwd_rep->dup (new_scope);
 
-    return new symbol_record_rep (new_scope, name, varval (), storage_class);
+    return new symbol_record_rep (new_scope, m_name, varval (),
+                                  m_storage_class);
   }
 
   octave_value
   symbol_record::symbol_record_rep::dump (void) const
   {
     if (auto t_fwd_rep = m_fwd_rep.lock ())
       return t_fwd_rep->dump ();
 
     std::map<std::string, octave_value> m
-      = {{ "name", name },
+      = {{ "name", m_name },
          { "local", is_local () },
          { "automatic", is_automatic () },
          { "formal", is_formal () },
          { "hidden", is_hidden () },
          { "inherited", is_inherited () },
          { "global", is_global () },
          { "persistent", is_persistent () }};
 
@@ -151,59 +152,60 @@ namespace octave
   symbol_record::symbol_record_rep::xglobal_varref (void)
   {
     if (auto t_fwd_rep = m_fwd_rep.lock ())
       return t_fwd_rep->xglobal_varref ();
 
     symbol_table& symtab
       = __get_symbol_table__ ("symbol_record::symbol_record_rep::xglobal_varref");
 
-    return symtab.global_varref (name);
+    return symtab.global_varref (m_name);
   }
 
   octave_value&
   symbol_record::symbol_record_rep::xpersistent_varref (void)
   {
     if (auto t_fwd_rep = m_fwd_rep.lock ())
       return t_fwd_rep->xpersistent_varref ();
 
     symbol_scope *curr_scope
       = __get_current_scope__ ("symbol_record::symbol_record_rep::xpersistent_varref");
 
     return (curr_scope
-            ? curr_scope->persistent_varref (name) : dummy_octave_value);
+            ? curr_scope->persistent_varref (m_name) : dummy_octave_value);
   }
 
   octave_value
   symbol_record::symbol_record_rep::xglobal_varval (void) const
   {
     if (auto t_fwd_rep = m_fwd_rep.lock ())
       return t_fwd_rep->xglobal_varval ();
 
     symbol_table& symtab
       = __get_symbol_table__ ("symbol_record::symbol_record_rep::xglobal_varval");
 
-    return symtab.global_varval (name);
+    return symtab.global_varval (m_name);
   }
 
   octave_value
   symbol_record::symbol_record_rep::xpersistent_varval (void) const
   {
     if (auto t_fwd_rep = m_fwd_rep.lock ())
       return t_fwd_rep->xpersistent_varval ();
 
     symbol_scope *curr_scope
       = __get_current_scope__ ("symbol_record::symbol_record_rep::xpersistent_varval");
 
-    return curr_scope ? curr_scope->persistent_varval (name) : octave_value ();
+    return (curr_scope
+            ? curr_scope->persistent_varval (m_name) : octave_value ());
   }
 
   symbol_record::symbol_record (void)
-    : rep (new symbol_record_rep (__get_current_scope__ ("symbol_record"),
-                                  "", octave_value (), local))
+    : m_rep (new symbol_record_rep (__get_current_scope__ ("symbol_record"),
+                                    "", octave_value (), local))
 
   { }
 
   octave_value
   symbol_record::find (const octave_value_list& args) const
   {
     octave_value retval;
 
@@ -213,33 +215,20 @@ namespace octave
     if (is_global ())
       retval = symtab.global_varval (name ());
     else
       {
         retval = varval ();
 
         if (retval.is_undefined ())
           {
-#if 0
-            // Use cached fcn_info pointer if possible.
-            if (rep->finfo)
-              retval = rep->finfo->find (args);
-            else
-#endif
-              {
-                retval = symtab.find_function (name (), args);
+            retval = symtab.find_function (name (), args);
 
-                if (retval.is_defined ())
-                  return retval;
-#if 0
-                {
-                  rep->finfo = symtab.get_fcn_info (name ());
-                }
-#endif
-              }
+            if (retval.is_defined ())
+              return retval;
           }
       }
 
     return retval;
   }
 
   octave_value symbol_record::dummy_octave_value;
 }
diff --git a/libinterp/corefcn/symrec.h b/libinterp/corefcn/symrec.h
--- a/libinterp/corefcn/symrec.h
+++ b/libinterp/corefcn/symrec.h
@@ -33,17 +33,16 @@ along with Octave; see the file COPYING.
 
 class octave_user_function;
 
 #include "ov.h"
 #include "ovl.h"
 
 namespace octave
 {
-  class fcn_info;
   class symbol_scope;
 
   class symbol_record
   {
   public:
 
     typedef size_t context_id;
 
@@ -76,21 +75,21 @@ namespace octave
   private:
 
     class symbol_record_rep
     {
     public:
 
       symbol_record_rep (symbol_scope *s, const std::string& nm,
                          const octave_value& v, unsigned int sc)
-        : m_decl_scope (s), curr_fcn (nullptr), name (nm),
-          m_fwd_rep (), value_stack (),
-          storage_class (sc), /* finfo (), */ valid (true)
+        : m_decl_scope (s), m_curr_fcn (nullptr), m_name (nm),
+          m_fwd_rep (), m_value_stack (), m_storage_class (sc),
+          m_valid (true)
       {
-        value_stack.push_back (v);
+        m_value_stack.push_back (v);
       }
 
       // No copying!
 
       symbol_record_rep (const symbol_record_rep& ov) = delete;
 
       symbol_record_rep& operator = (const symbol_record_rep&) = delete;
 
@@ -166,55 +165,55 @@ namespace octave
         context_id context = m_decl_scope ? get_decl_scope_context () : 0;
 
         if (is_global ())
           return xglobal_varref ();
         else if (is_persistent ())
           return xpersistent_varref ();
         else
           {
-            context_id n = value_stack.size ();
+            context_id n = m_value_stack.size ();
             while (n++ <= context)
-              value_stack.push_back (octave_value ());
+              m_value_stack.push_back (octave_value ());
 
-            return value_stack[context];
+            return m_value_stack[context];
           }
       }
 
       octave_value varval (void) const
       {
         if (auto t_fwd_rep = m_fwd_rep.lock ())
           return t_fwd_rep->varval ();
 
         context_id context = m_decl_scope ? get_decl_scope_context () : 0;
 
         if (is_global ())
           return xglobal_varval ();
         else if (is_persistent ())
           return xpersistent_varval ();
         else
           {
-            if (context < value_stack.size ())
-              return value_stack[context];
+            if (context < m_value_stack.size ())
+              return m_value_stack[context];
             else
               return octave_value ();
           }
       }
 
       void push_context (symbol_scope *sid)
       {
         if (auto t_fwd_rep = m_fwd_rep.lock ())
           {
             t_fwd_rep->push_context (sid);
             return;
           }
 
         if (! (is_persistent () || is_global ())
             && sid == decl_scope ())
-          value_stack.push_back (octave_value ());
+          m_value_stack.push_back (octave_value ());
       }
 
       // If pop_context returns 0, we are out of values and this element
       // of the symbol table should be deleted.  This can happen for
       // functions like
       //
       //   function foo (n)
       //     if (n > 0)
@@ -231,18 +230,18 @@ namespace octave
         if (auto t_fwd_rep = m_fwd_rep.lock ())
           return t_fwd_rep->pop_context (sid);
 
         size_t retval = 1;
 
         if (! (is_persistent () || is_global ())
             && sid == decl_scope ())
           {
-            value_stack.pop_back ();
-            retval = value_stack.size ();
+            m_value_stack.pop_back ();
+            retval = m_value_stack.size ();
           }
 
         return retval;
       }
 
       void clear (void)
       {
         if (auto t_fwd_rep = m_fwd_rep.lock ())
@@ -264,284 +263,286 @@ namespace octave
         return varval ().is_defined ();
       }
 
       bool is_valid (void) const
       {
         if (auto t_fwd_rep = m_fwd_rep.lock ())
           return t_fwd_rep->is_valid ();
 
-        return valid;
+        return m_valid;
       }
 
       bool is_variable (void) const
       {
         if (auto t_fwd_rep = m_fwd_rep.lock ())
           return t_fwd_rep->is_variable ();
 
         return (! is_local () || is_defined ());
       }
 
       bool is_local (void) const
       {
         if (auto t_fwd_rep = m_fwd_rep.lock ())
           return t_fwd_rep->is_local ();
 
-        return storage_class & local;
+        return m_storage_class & local;
       }
 
       bool is_automatic (void) const
       {
         if (auto t_fwd_rep = m_fwd_rep.lock ())
           return t_fwd_rep->is_automatic ();
 
-        return storage_class & automatic;
+        return m_storage_class & automatic;
       }
 
       bool is_formal (void) const
       {
         if (auto t_fwd_rep = m_fwd_rep.lock ())
           return t_fwd_rep->is_formal ();
 
-        return storage_class & formal;
+        return m_storage_class & formal;
       }
 
       bool is_hidden (void) const
       {
         if (auto t_fwd_rep = m_fwd_rep.lock ())
           return t_fwd_rep->is_hidden ();
 
-        return storage_class & hidden;
+        return m_storage_class & hidden;
       }
 
       bool is_inherited (void) const
       {
         if (auto t_fwd_rep = m_fwd_rep.lock ())
           return t_fwd_rep->is_inherited ();
 
-        return storage_class & inherited;
+        return m_storage_class & inherited;
       }
 
       bool is_global (void) const
       {
         if (auto t_fwd_rep = m_fwd_rep.lock ())
           return t_fwd_rep->is_global ();
 
-        return storage_class & global;
+        return m_storage_class & global;
       }
 
       bool is_persistent (void) const
       {
         if (auto t_fwd_rep = m_fwd_rep.lock ())
           return t_fwd_rep->is_persistent ();
 
-        return storage_class & persistent;
+        return m_storage_class & persistent;
       }
 
       bool is_added_static (void) const
       {
         if (auto t_fwd_rep = m_fwd_rep.lock ())
           return t_fwd_rep->is_added_static ();
 
-        return storage_class & added_static;
+        return m_storage_class & added_static;
       }
 
       void mark_local (void)
       {
         if (auto t_fwd_rep = m_fwd_rep.lock ())
           {
             t_fwd_rep->mark_local ();
             return;
           }
 
-        storage_class |= local;
+        m_storage_class |= local;
       }
 
       void mark_automatic (void)
       {
         if (auto t_fwd_rep = m_fwd_rep.lock ())
           {
             t_fwd_rep->mark_automatic ();
             return;
           }
 
-        storage_class |= automatic;
+        m_storage_class |= automatic;
       }
 
       void mark_formal (void)
       {
         if (auto t_fwd_rep = m_fwd_rep.lock ())
           {
             t_fwd_rep->mark_formal ();
             return;
           }
 
-        storage_class |= formal;
+        m_storage_class |= formal;
       }
 
       void mark_hidden (void)
       {
         if (auto t_fwd_rep = m_fwd_rep.lock ())
           {
             t_fwd_rep->mark_hidden ();
             return;
           }
 
-        storage_class |= hidden;
+        m_storage_class |= hidden;
       }
 
       void mark_inherited (void)
       {
         if (auto t_fwd_rep = m_fwd_rep.lock ())
           {
             t_fwd_rep->mark_inherited ();
             return;
           }
 
-        storage_class |= inherited;
+        m_storage_class |= inherited;
       }
 
       void mark_global (void)
       {
         if (auto t_fwd_rep = m_fwd_rep.lock ())
           {
             t_fwd_rep->mark_global ();
             return;
           }
 
         if (is_persistent ())
-          error ("can't make persistent variable %s global", name.c_str ());
+          error ("can't make persistent variable %s global", m_name.c_str ());
 
-        storage_class |= global;
+        m_storage_class |= global;
       }
 
       void mark_persistent (void)
       {
         if (auto t_fwd_rep = m_fwd_rep.lock ())
           {
             t_fwd_rep->mark_persistent ();
             return;
           }
 
         if (is_global ())
-          error ("can't make global variable %s persistent", name.c_str ());
+          error ("can't make global variable %s persistent", m_name.c_str ());
 
-        storage_class |= persistent;
+        m_storage_class |= persistent;
       }
 
       void mark_added_static (void)
       {
         if (auto t_fwd_rep = m_fwd_rep.lock ())
           {
             t_fwd_rep->mark_added_static ();
             return;
           }
 
-        storage_class |= added_static;
+        m_storage_class |= added_static;
       }
 
       void unmark_local (void)
       {
         if (auto t_fwd_rep = m_fwd_rep.lock ())
           {
             t_fwd_rep->unmark_local ();
             return;
           }
 
-        storage_class &= ~local;
+        m_storage_class &= ~local;
       }
 
       void unmark_automatic (void)
       {
         if (auto t_fwd_rep = m_fwd_rep.lock ())
           {
             t_fwd_rep->unmark_automatic ();
             return;
           }
 
-        storage_class &= ~automatic;
+        m_storage_class &= ~automatic;
       }
 
       void unmark_formal (void)
       {
         if (auto t_fwd_rep = m_fwd_rep.lock ())
           {
             t_fwd_rep->unmark_formal ();
             return;
           }
 
-        storage_class &= ~formal;
+        m_storage_class &= ~formal;
       }
 
       void unmark_hidden (void)
       {
         if (auto t_fwd_rep = m_fwd_rep.lock ())
           {
             t_fwd_rep->unmark_hidden ();
             return;
           }
 
-        storage_class &= ~hidden;
+        m_storage_class &= ~hidden;
       }
 
       void unmark_inherited (void)
       {
         if (auto t_fwd_rep = m_fwd_rep.lock ())
           {
             t_fwd_rep->unmark_inherited ();
             return;
           }
 
-        storage_class &= ~inherited;
+        m_storage_class &= ~inherited;
       }
 
       void unmark_global (void)
       {
         if (auto t_fwd_rep = m_fwd_rep.lock ())
           {
             t_fwd_rep->unmark_global ();
             return;
           }
 
-        storage_class &= ~global;
+        m_storage_class &= ~global;
       }
 
       void unmark_persistent (void)
       {
         if (auto t_fwd_rep = m_fwd_rep.lock ())
           {
             t_fwd_rep->unmark_persistent ();
             return;
           }
 
-        storage_class &= ~persistent;
+        m_storage_class &= ~persistent;
       }
 
       void unmark_added_static (void)
       {
         if (auto t_fwd_rep = m_fwd_rep.lock ())
           {
             t_fwd_rep->unmark_added_static ();
             return;
           }
 
-        storage_class &= ~added_static;
+        m_storage_class &= ~added_static;
       }
 
+      unsigned int storage_class (void) const { return m_storage_class; }
+
       void init_persistent (void);
 
       void invalidate (void)
       {
         if (auto t_fwd_rep = m_fwd_rep.lock ())
           {
             t_fwd_rep->invalidate ();
             return;
           }
 
-        valid = false;
+        m_valid = false;
       }
 
       void erase_persistent (void);
 
       symbol_scope *decl_scope (void)
       {
         if (auto t_fwd_rep = m_fwd_rep.lock ())
           return t_fwd_rep->decl_scope ();
@@ -552,48 +553,52 @@ namespace octave
       void set_curr_fcn (octave_user_function *fcn)
       {
         if (auto t_fwd_rep = m_fwd_rep.lock ())
           {
             t_fwd_rep->set_curr_fcn (fcn);
             return;
           }
 
-        curr_fcn = fcn;
+        m_curr_fcn = fcn;
       }
 
       // We don't forward more than once, so no need to forward the
       // next two.
 
       void bind_fwd_rep (const std::shared_ptr<symbol_record_rep>& fwd_rep)
       {
         m_fwd_rep = fwd_rep;
       }
 
       void unbind_fwd_rep (void) { m_fwd_rep.reset (); }
 
       symbol_record_rep * dup (symbol_scope *new_scope) const;
 
       octave_value dump (void) const;
 
+      std::string name (void) const { return m_name; }
+
+      void rename (const std::string& new_name) { m_name = new_name; }
+
+    private:
+
       symbol_scope *m_decl_scope;
 
-      octave_user_function *curr_fcn;
+      octave_user_function *m_curr_fcn;
 
-      std::string name;
+      std::string m_name;
 
       std::weak_ptr<symbol_record_rep> m_fwd_rep;
 
-      std::deque<octave_value> value_stack;
-
-      unsigned int storage_class;
+      std::deque<octave_value> m_value_stack;
 
-      //      fcn_info *finfo;
+      unsigned int m_storage_class;
 
-      bool valid;
+      bool m_valid;
 
     private:
 
       octave_value& xglobal_varref (void);
 
       octave_value& xpersistent_varref (void);
 
       octave_value xglobal_varval (void) const;
@@ -603,161 +608,160 @@ namespace octave
 
   public:
 
     symbol_record (void);
 
     symbol_record (symbol_scope *s, const std::string& nm = "",
                    const octave_value& v = octave_value (),
                    unsigned int sc = local)
-      : rep (new symbol_record_rep (s, nm, v, sc)) { }
+      : m_rep (new symbol_record_rep (s, nm, v, sc)) { }
 
     symbol_record (const symbol_record& sr) = default;
 
     symbol_record& operator = (const symbol_record& sr) = default;
 
     ~symbol_record (void) = default;
 
     symbol_record dup (symbol_scope *sid) const
     {
-      return symbol_record (rep->dup (sid));
+      return symbol_record (m_rep->dup (sid));
     }
 
-    const std::string& name (void) const { return rep->name; }
+    std::string name (void) const { return m_rep->name (); }
 
-    void rename (const std::string& new_name) { rep->name = new_name; }
+    void rename (const std::string& new_name) { m_rep->rename (new_name); }
 
     octave_value
     find (const octave_value_list& args = octave_value_list ()) const;
 
     void assign (const octave_value& value)
     {
-      rep->assign (value);
+      m_rep->assign (value);
     }
 
     void assign (octave_value::assign_op op,
                  const std::string& type,
                  const std::list<octave_value_list>& idx,
                  const octave_value& value)
     {
-      rep->assign (op, type, idx, value);
+      m_rep->assign (op, type, idx, value);
     }
 
     void assign (octave_value::assign_op op, const octave_value& value)
     {
-      rep->assign (op, value);
+      m_rep->assign (op, value);
     }
 
     void do_non_const_unary_op (octave_value::unary_op op)
     {
-      rep->do_non_const_unary_op (op);
+      m_rep->do_non_const_unary_op (op);
     }
 
     void do_non_const_unary_op (octave_value::unary_op op,
                                 const std::string& type,
                                 const std::list<octave_value_list>& idx)
     {
-      rep->do_non_const_unary_op (op, type, idx);
+      m_rep->do_non_const_unary_op (op, type, idx);
     }
 
     // Delete when deprecated varref functions are removed.
     octave_value& varref (void)
     {
-      return rep->varref ();
+      return m_rep->varref ();
     }
 
     octave_value varval (void) const
     {
-      return rep->varval ();
+      return m_rep->varval ();
     }
 
-    void push_context (symbol_scope *sid) { rep->push_context (sid); }
+    void push_context (symbol_scope *sid) { m_rep->push_context (sid); }
 
-    size_t pop_context (symbol_scope *sid) { return rep->pop_context (sid); }
+    size_t pop_context (symbol_scope *sid) { return m_rep->pop_context (sid); }
 
-    void clear (void) { rep->clear (); }
+    void clear (void) { m_rep->clear (); }
 
-    void clear (symbol_scope *sid) { rep->clear (sid); }
+    void clear (symbol_scope *sid) { m_rep->clear (sid); }
 
     bool is_defined (void) const
     {
-      return rep->is_defined ();
+      return m_rep->is_defined ();
     }
 
     bool is_undefined (void) const
     {
-      return ! rep->is_defined ();
+      return ! m_rep->is_defined ();
     }
 
     bool is_valid (void) const
     {
-      return rep->is_valid ();
+      return m_rep->is_valid ();
     }
 
     bool is_variable (void) const
     {
-      return rep->is_variable ();
+      return m_rep->is_variable ();
     }
 
-    bool is_local (void) const { return rep->is_local (); }
-    bool is_automatic (void) const { return rep->is_automatic (); }
-    bool is_formal (void) const { return rep->is_formal (); }
-    bool is_global (void) const { return rep->is_global (); }
-    bool is_hidden (void) const { return rep->is_hidden (); }
-    bool is_inherited (void) const { return rep->is_inherited (); }
-    bool is_persistent (void) const { return rep->is_persistent (); }
-    bool is_added_static (void) const { return rep->is_added_static (); }
+    bool is_local (void) const { return m_rep->is_local (); }
+    bool is_automatic (void) const { return m_rep->is_automatic (); }
+    bool is_formal (void) const { return m_rep->is_formal (); }
+    bool is_global (void) const { return m_rep->is_global (); }
+    bool is_hidden (void) const { return m_rep->is_hidden (); }
+    bool is_inherited (void) const { return m_rep->is_inherited (); }
+    bool is_persistent (void) const { return m_rep->is_persistent (); }
+    bool is_added_static (void) const { return m_rep->is_added_static (); }
 
-    void mark_local (void) { rep->mark_local (); }
-    void mark_automatic (void) { rep->mark_automatic (); }
-    void mark_formal (void) { rep->mark_formal (); }
-    void mark_hidden (void) { rep->mark_hidden (); }
-    void mark_inherited (void) { rep->mark_inherited (); }
-    void mark_global (void) { rep->mark_global (); }
-    void mark_persistent (void) { rep->mark_persistent (); }
-    void mark_added_static (void) { rep->mark_added_static (); }
+    void mark_local (void) { m_rep->mark_local (); }
+    void mark_automatic (void) { m_rep->mark_automatic (); }
+    void mark_formal (void) { m_rep->mark_formal (); }
+    void mark_hidden (void) { m_rep->mark_hidden (); }
+    void mark_inherited (void) { m_rep->mark_inherited (); }
+    void mark_global (void) { m_rep->mark_global (); }
+    void mark_persistent (void) { m_rep->mark_persistent (); }
+    void mark_added_static (void) { m_rep->mark_added_static (); }
 
-    void unmark_local (void) { rep->unmark_local (); }
-    void unmark_automatic (void) { rep->unmark_automatic (); }
-    void unmark_formal (void) { rep->unmark_formal (); }
-    void unmark_hidden (void) { rep->unmark_hidden (); }
-    void unmark_inherited (void) { rep->unmark_inherited (); }
-    void unmark_global (void) { rep->unmark_global (); }
-    void unmark_persistent (void) { rep->unmark_persistent (); }
-    void unmark_added_static (void) { rep->unmark_added_static (); }
+    void unmark_local (void) { m_rep->unmark_local (); }
+    void unmark_automatic (void) { m_rep->unmark_automatic (); }
+    void unmark_formal (void) { m_rep->unmark_formal (); }
+    void unmark_hidden (void) { m_rep->unmark_hidden (); }
+    void unmark_inherited (void) { m_rep->unmark_inherited (); }
+    void unmark_global (void) { m_rep->unmark_global (); }
+    void unmark_persistent (void) { m_rep->unmark_persistent (); }
+    void unmark_added_static (void) { m_rep->unmark_added_static (); }
 
-    void init_persistent (void) { rep->init_persistent (); }
+    void init_persistent (void) { m_rep->init_persistent (); }
 
-    void erase_persistent (void) { rep->erase_persistent (); }
+    void erase_persistent (void) { m_rep->erase_persistent (); }
 
-    void invalidate (void) { rep->invalidate (); }
+    void invalidate (void) { m_rep->invalidate (); }
 
-    symbol_scope *decl_scope (void) { return rep->decl_scope (); }
+    symbol_scope *decl_scope (void) { return m_rep->decl_scope (); }
 
-    unsigned int xstorage_class (void) const { return rep->storage_class; }
+    unsigned int storage_class (void) const { return m_rep->storage_class (); }
 
     void set_curr_fcn (octave_user_function *fcn)
     {
-      rep->set_curr_fcn (fcn);
+      m_rep->set_curr_fcn (fcn);
     }
 
     void bind_fwd_rep (const symbol_record& sr)
     {
-      rep->bind_fwd_rep (sr.rep);
+      m_rep->bind_fwd_rep (sr.m_rep);
     }
 
-    void unbind_fwd_rep (void) { rep->unbind_fwd_rep (); }
+    void unbind_fwd_rep (void) { m_rep->unbind_fwd_rep (); }
 
-    octave_value dump (void) const { return rep->dump (); }
-
-    //    const symbol_record_rep *xrep (void) const { return rep; }
+    octave_value dump (void) const { return m_rep->dump (); }
 
   private:
 
     static octave_value dummy_octave_value;
 
-    std::shared_ptr<symbol_record_rep> rep;
+    std::shared_ptr<symbol_record_rep> m_rep;
 
-    symbol_record (symbol_record_rep *new_rep) : rep (new_rep) { }
+    // NEW_REP must be dynamically allocated or nullptr.
+    symbol_record (symbol_record_rep *new_rep) : m_rep (new_rep) { }
   };
 }
 
 #endif
diff --git a/libinterp/corefcn/symscope.h b/libinterp/corefcn/symscope.h
--- a/libinterp/corefcn/symscope.h
+++ b/libinterp/corefcn/symscope.h
@@ -398,17 +398,17 @@ namespace octave
     {
       std::list<symbol_record> retval;
 
       for (const auto& nm_sr : m_symbols)
         {
           const symbol_record& sr = nm_sr.second;
 
           if ((defined_only && ! sr.is_defined ())
-              || (sr.xstorage_class () & exclude))
+              || (sr.storage_class () & exclude))
             continue;
 
           retval.push_back (sr);
         }
 
       return retval;
     }
 
