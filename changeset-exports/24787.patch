# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1519270375 18000
#      Wed Feb 21 22:32:55 2018 -0500
# Node ID 168d5b43c8404f1f1c3275a7292811cd14bc3916
# Parent  0aeef407b04ebb40735c5407cb088f89995af8cc
store scale factor in float_display_format object

* pr-flt-fmt.h (float_display_format::m_scale): New data member.
(float_display_format::scale_factor): New function.

* pr-output.h, pr-output.cc: Store scale factor in format object.
Don't pass scale factor separately in function argument lists.

diff --git a/libinterp/corefcn/pr-flt-fmt.h b/libinterp/corefcn/pr-flt-fmt.h
--- a/libinterp/corefcn/pr-flt-fmt.h
+++ b/libinterp/corefcn/pr-flt-fmt.h
@@ -140,37 +140,46 @@ public:
 
 class
 float_display_format
 {
 public:
 
   float_display_format (void) = default;
 
+  float_display_format (double scale, const float_format& real_fmt,
+                        const float_format& imag_fmt = float_format ())
+    : m_scale (scale), m_real_fmt (real_fmt), m_imag_fmt (imag_fmt)
+  { }
+
   explicit float_display_format (const float_format& real_fmt,
                                  const float_format& imag_fmt = float_format ())
-    : m_real_fmt (real_fmt), m_imag_fmt (imag_fmt)
+    : m_scale (1.0), m_real_fmt (real_fmt), m_imag_fmt (imag_fmt)
   { }
 
   float_display_format (const float_display_format&) = default;
 
   float_display_format& operator = (const float_display_format&) = default;
 
   ~float_display_format (void) = default;
 
+  double scale_factor (void) const { return m_scale; }
+
   float_format real_format (void) const { return m_real_fmt; }
 
   float_format imag_format (void) const { return m_imag_fmt; }
 
   void set_precision (int prec)
   {
     m_real_fmt.prec = prec;
     m_imag_fmt.prec = prec;
   }
 
 private:
 
+  double m_scale;
+
   float_format m_real_fmt;
 
   float_format m_imag_fmt;
 };
 
 #endif
diff --git a/libinterp/corefcn/pr-output.cc b/libinterp/corefcn/pr-output.cc
--- a/libinterp/corefcn/pr-output.cc
+++ b/libinterp/corefcn/pr-output.cc
@@ -460,18 +460,17 @@ const int pr_output_traits<float>::digit
 const int pr_output_traits<float>::max_field_width = 13;
 
 // FIXME: it would be nice to share more code among these functions,..
 
 // Works for double and float.
 
 template <typename T>
 static inline float_display_format
-make_real_format (int digits, bool inf_or_nan,
-                  bool int_only)
+make_real_format (int digits, bool inf_or_nan, bool int_only)
 {
   float_format fmt;
 
   int prec = std::min (output_precision (), pr_output_traits<T>::digits10);
 
   int fw, ld, rd;
 
   if (rat_format)
@@ -595,16 +594,19 @@ make_format (const float& f)
   return make_scalar_format (f);
 }
 
 template <typename T>
 static inline float_display_format
 make_real_matrix_format (int x_max, int x_min, bool inf_or_nan,
                          int int_or_inf_or_nan)
 {
+  T scale = ((x_max == 0 || int_or_inf_or_nan)
+             ? 1 : std::pow (10.0, calc_scale_exp (x_max - 1)));
+
   float_format fmt;
 
   int prec = std::min (output_precision (), pr_output_traits<T>::digits10);
 
   int fw, ld, rd;
 
   if (rat_format)
     {
@@ -715,57 +717,59 @@ make_real_matrix_format (int x_max, int 
       if (print_big_e)
         fmt.uppercase ();
     }
   else if (! bank_format && int_or_inf_or_nan)
     fmt = float_format (fw, rd);
   else
     fmt = float_format (fw, rd, std::ios::fixed);
 
-  return float_display_format (fmt);
+  return float_display_format (scale, fmt);
 }
 
-template <typename MT, typename ELT_T>
+template <typename MT>
 static inline float_display_format
-make_format_internal (const MT& m, ELT_T& scale)
+make_matrix_format (const MT& m)
 {
   assert (m.ndims () == 2);
 
   if (free_format)
     return float_display_format ();
 
   bool inf_or_nan = m.any_element_is_inf_or_nan ();
 
   bool int_or_inf_or_nan = m.all_elements_are_int_or_inf_or_nan ();
 
   MT m_abs = m.abs ();
+
+  typedef typename MT::element_type ELT_T;
+
   ELT_T max_abs = pr_max_internal (m_abs);
   ELT_T min_abs = pr_min_internal (m_abs);
 
   int x_max = (max_abs == 0 ? 0 : num_digits (max_abs));
 
   int x_min = (min_abs == 0 ? 0 : num_digits (min_abs));
 
-  scale = ((x_max == 0 || int_or_inf_or_nan)
-           ? 1 : std::pow (10.0, calc_scale_exp (x_max - 1)));
-
   return make_real_matrix_format<ELT_T> (x_max, x_min, inf_or_nan,
                                          int_or_inf_or_nan);
 }
 
+template <>
 float_display_format
-make_format (const Matrix& m, double& scale)
+make_format (const Matrix& m)
 {
-  return make_format_internal<Matrix, double> (m, scale);
+  return make_matrix_format (m);
 }
 
+template <>
 float_display_format
-make_format (const FloatMatrix& m, float& scale)
+make_format (const FloatMatrix& m)
 {
-  return make_format_internal<FloatMatrix, float> (m, scale);
+  return make_matrix_format (m);
 }
 
 template <typename T>
 static inline float_display_format
 make_complex_format (int x_max, int x_min, int r_x,
                      bool inf_or_nan, int int_only)
 {
   float_format r_fmt;
@@ -975,16 +979,19 @@ make_format (const std::complex<float>& 
 }
 
 template <typename T>
 static inline float_display_format
 make_complex_matrix_format (int x_max, int x_min, int r_x_max,
                             int r_x_min, bool inf_or_nan,
                             int int_or_inf_or_nan)
 {
+  T scale = ((x_max == 0 || int_or_inf_or_nan)
+             ? 1 : std::pow (10.0, calc_scale_exp (x_max - 1)));
+
   float_format r_fmt;
   float_format i_fmt;
 
   int prec = std::min (output_precision (), pr_output_traits<T>::digits10);
 
   int i_fw, r_fw, ld, rd;
 
   if (rat_format)
@@ -1135,26 +1142,29 @@ make_complex_matrix_format (int x_max, i
       i_fmt = float_format (i_fw, rd);
     }
   else
     {
       r_fmt = float_format (r_fw, rd, std::ios::fixed);
       i_fmt = float_format (i_fw, rd, std::ios::fixed);
     }
 
-  return float_display_format (r_fmt, i_fmt);
+  return float_display_format (scale, r_fmt, i_fmt);
 }
 
-template <typename CMT, typename RMT, typename ELT_T>
+template <typename CMT>
 static inline float_display_format
-make_format_internal (const CMT& cm, ELT_T& scale)
+make_complex_matrix_format (const CMT& cm)
 {
   if (free_format)
     return float_display_format ();
 
+  typedef typename CMT::real_matrix_type RMT;
+  typedef typename CMT::real_elt_type ELT_T;
+
   RMT rp = real (cm);
   RMT ip = imag (cm);
 
   bool inf_or_nan = cm.any_element_is_inf_or_nan ();
 
   bool int_or_inf_or_nan = (rp.all_elements_are_int_or_inf_or_nan ()
                             && ip.all_elements_are_int_or_inf_or_nan ());
 
@@ -1172,39 +1182,48 @@ make_format_internal (const CMT& cm, ELT
 
   int i_x_max = (i_max_abs == 0 ? 0 : num_digits (i_max_abs));
 
   int i_x_min = (i_min_abs == 0 ? 0 : num_digits (i_min_abs));
 
   int x_max = (r_x_max > i_x_max ? r_x_max : i_x_max);
   int x_min = (r_x_min > i_x_min ? r_x_min : i_x_min);
 
-  scale = ((x_max == 0 || int_or_inf_or_nan)
-           ? 1 : std::pow (10.0, calc_scale_exp (x_max - 1)));
-
   return make_complex_matrix_format<ELT_T> (x_max, x_min, r_x_max, r_x_min,
                                             inf_or_nan, int_or_inf_or_nan);
 }
 
+template <>
 float_display_format
-make_format (const ComplexMatrix& cm, double& scale)
+make_format (const ComplexMatrix& cm)
 {
-  return make_format_internal<ComplexMatrix, Matrix, double> (cm, scale);
+  return make_complex_matrix_format (cm);
 }
 
+template <>
 float_display_format
-make_format (const FloatComplexMatrix& cm, float& scale)
+make_format (const FloatComplexMatrix& cm)
 {
-  return make_format_internal<FloatComplexMatrix, FloatMatrix, float> (cm, scale);
+  return make_complex_matrix_format (cm);
+}
+
+template <>
+float_display_format
+make_format (const boolNDArray&)
+{
+  return float_display_format (float_format (1, 1));
 }
 
 template <typename T>
 static inline float_display_format
 make_range_format (int x_max, int x_min, int all_ints)
 {
+  double scale = ((x_max == 0 || all_ints)
+                  ? 1 : std::pow (10.0, calc_scale_exp (x_max - 1)));
+
   float_format fmt;
 
   int prec = std::min (output_precision (), pr_output_traits<T>::digits10);
 
   int fw, ld, rd;
 
   if (rat_format)
     {
@@ -1303,21 +1322,22 @@ make_range_format (int x_max, int x_min,
       if (print_big_e)
         fmt.uppercase ();
     }
   else if (! bank_format && all_ints)
     fmt = float_format (fw, rd);
   else
     fmt = float_format (fw, rd, std::ios::fixed);
 
-  return float_display_format (fmt);
+  return float_display_format (scale, fmt);
 }
 
+template <>
 float_display_format
-make_format (const Range& r, double& scale)
+make_format (const Range& r)
 {
   if (free_format)
     return float_display_format ();
 
   double r_min = r.base ();
   double r_max = r.limit ();
 
   if (r_max < r_min)
@@ -1331,19 +1351,16 @@ make_format (const Range& r, double& sca
 
   double max_abs = (r_max < 0 ? -r_max : r_max);
   double min_abs = (r_min < 0 ? -r_min : r_min);
 
   int x_max = (max_abs == 0 ? 0 : num_digits (max_abs));
 
   int x_min = (min_abs == 0 ? 0 : num_digits (min_abs));
 
-  scale = ((x_max == 0 || all_ints)
-           ? 1 : std::pow (10.0, calc_scale_exp (x_max - 1)));
-
   return make_range_format<double> (x_max, x_min, all_ints);
 }
 
 template <typename T>
 union equiv
 {
   T val;
   unsigned char i[sizeof (T)];
@@ -1493,37 +1510,45 @@ pr_any_float (std::ostream& os, const fl
   else if (print_eng)
     os << pr_engineering_float<T> (fmt, val);
   else
     os << pr_formatted_float<T> (fmt, val);
 }
 
 template <typename T>
 static inline void
-pr_float (std::ostream& os, const float_display_format& fmt, T val,
-          T scale = 1)
+pr_float (std::ostream& os, const float_display_format& fmt, T val)
 {
+  double scale = fmt.scale_factor ();
+
   if (Vfixed_point_format && ! print_g && scale != 1)
     val /= scale;
 
   pr_any_float (os, fmt.real_format (), val);
 }
 
 template <typename T>
 static inline void
 pr_imag_float (std::ostream& os, const float_display_format& fmt, T val)
 {
   pr_any_float (os, fmt.imag_format (), val);
 }
 
 template <typename T>
 static inline void
 pr_complex (std::ostream& os, const float_display_format& fmt,
-            const std::complex<T>& cval, T scale = 1)
+            const std::complex<T>& cval)
 {
+  // FIXME: should we range check this value?  It is stored as a double
+  // to simplify the implementation, but should always correspond to the
+  // type of value we are displaying.
+
+  double dscale = fmt.scale_factor ();
+  T scale = static_cast<T> (dscale);
+
   std::complex<T> tmp
     = ((Vfixed_point_format && ! print_g && scale != 1)
        ? cval / scale : cval);
 
   T r = tmp.real ();
 
   pr_float (os, fmt, r);
 
@@ -1583,19 +1608,18 @@ print_empty_nd_array (std::ostream& os, 
     {
       os << "[]";
 
       if (Vprint_empty_dimensions)
         os << '(' << dims.str () << ')';
     }
 }
 
-template <typename T>
 static inline void
-pr_scale_header (std::ostream& os, T scale)
+pr_scale_header (std::ostream& os, double scale)
 {
   if (Vfixed_point_format && ! print_g && scale != 1)
     {
       octave::preserve_stream_state stream_state (os);
 
       os << "  "
          << std::setw (8) << std::setprecision (1)
          << std::setiosflags (std::ios::scientific | std::ios::left)
@@ -1646,63 +1670,16 @@ pr_plus_format (std::ostream& os, const 
   if (val > T (0))
     os << plus_format_chars[0];
   else if (val < T (0))
     os << plus_format_chars[1];
   else
     os << plus_format_chars[2];
 }
 
-template <>
-float_display_format
-make_format (const Range& rng)
-{
-  double scale = 0;
-  return make_format (rng, scale);
-}
-
-template <>
-float_display_format
-make_format (const NDArray& nda)
-{
-  double scale = 0;
-  return make_format (Matrix (nda), scale);
-}
-
-template <>
-float_display_format
-make_format (const FloatNDArray& nda)
-{
-  float scale = 0;
-  return make_format (FloatMatrix (nda), scale);
-}
-
-template <>
-float_display_format
-make_format (const ComplexNDArray& nda)
-{
-  double scale = 0;
-  return make_format (ComplexMatrix (nda), scale);
-}
-
-template <>
-float_display_format
-make_format (const FloatComplexNDArray& nda)
-{
-  float scale = 0;
-  return make_format (FloatComplexMatrix (nda), scale);
-}
-
-template <>
-float_display_format
-make_format (const boolNDArray&)
-{
-  return float_display_format (float_format (1, 1));
-}
-
 // FIXME: all this mess with abs is an attempt to avoid seeing
 //
 //   warning: comparison of unsigned expression < 0 is always false
 //
 // from GCC.  Isn't there a better way?
 
 template <typename T>
 static inline T
@@ -1898,18 +1875,17 @@ octave_print_real_matrix_internal (std::
   octave_idx_type nc = m.columns ();
 
   if (nr == 0 || nc == 0)
     print_empty_matrix (os, nr, nc, pr_as_read_syntax);
   else if (plus_format && ! pr_as_read_syntax)
     pr_plus_format_matrix (os, m);
   else
     {
-      typename MT::element_type scale = 1;
-      float_display_format fmt = make_format (m, scale);
+      float_display_format fmt = make_format (m);
       int fw = fmt.real_format().fw;
       int column_width = fw + 2;
       octave_idx_type total_width = nc * column_width;
       octave_idx_type max_width = octave::command_editor::terminal_cols ();
 
       if (pr_as_read_syntax)
         max_width -= 4;
       else
@@ -1971,17 +1947,17 @@ octave_print_real_matrix_internal (std::
                     os << " ...\n";
                 }
             }
         }
       else
         {
           octave::preserve_stream_state stream_state (os);
 
-          pr_scale_header (os, scale);
+          pr_scale_header (os, fmt.scale_factor ());
 
           for (octave_idx_type col = 0; col < nc; col += inc)
             {
               octave_idx_type lim = (col + inc < nc ? col + inc : nc);
 
               pr_col_num_header (os, total_width, max_width, lim, col,
                                  extra_indent);
 
@@ -1990,17 +1966,17 @@ octave_print_real_matrix_internal (std::
                   os << std::setw (extra_indent) << "";
 
                   for (octave_idx_type j = col; j < lim; j++)
                     {
                       octave_quit ();
 
                       os << "  ";
 
-                      pr_float (os, fmt, m(i,j), scale);
+                      pr_float (os, fmt, m(i,j));
                     }
 
                   if (i < nr - 1)
                     os << "\n";
                 }
             }
         }
     }
@@ -2015,19 +1991,18 @@ octave_print_real_diag_matrix_internal (
   octave_idx_type nc = m.columns ();
 
   if (nr == 0 || nc == 0)
     print_empty_matrix (os, nr, nc, pr_as_read_syntax);
   else if (plus_format && ! pr_as_read_syntax)
     pr_plus_format_matrix (os, m);
   else
     {
-      typename DMT::element_type scale = 1;
       float_display_format fmt
-        = make_format (typename DMT::full_matrix_type (m.diag ()), scale);
+        = make_format (typename DMT::full_matrix_type (m.diag ()));
       int fw = fmt.real_format().fw;
       int column_width = fw + 2;
       octave_idx_type total_width = nc * column_width;
       octave_idx_type max_width = octave::command_editor::terminal_cols ();
 
       if (pr_as_read_syntax)
         max_width -= 4;
       else
@@ -2088,24 +2063,24 @@ octave_print_real_diag_matrix_internal (
       else
         {
           octave::preserve_stream_state stream_state (os);
 
           os << "Diagonal Matrix\n";
           if (! Vcompact_format)
             os << "\n";
 
-          pr_scale_header (os, scale);
+          pr_scale_header (os, fmt.scale_factor ());
 
           // kluge.  Get the true width of a number.
           int zero_fw;
           {
             std::ostringstream tmp_oss;
             typename DMT::element_type zero = 0;
-            pr_float (tmp_oss, fmt, zero, scale);
+            pr_float (tmp_oss, fmt, zero);
             zero_fw = tmp_oss.str ().length ();
           }
 
           for (octave_idx_type col = 0; col < nc; col += inc)
             {
               octave_idx_type lim = (col + inc < nc ? col + inc : nc);
 
               pr_col_num_header (os, total_width, max_width, lim, col,
@@ -2117,17 +2092,17 @@ octave_print_real_diag_matrix_internal (
 
                   for (octave_idx_type j = col; j < lim; j++)
                     {
                       octave_quit ();
 
                       os << "  ";
 
                       if (i == j)
-                        pr_float (os, fmt, m(i,j), scale);
+                        pr_float (os, fmt, m(i,j));
                       else
                         os << std::setw (zero_fw) << '0';
 
                     }
 
                   if (i < nr - 1)
                     os << "\n";
                 }
@@ -2311,18 +2286,17 @@ octave_print_complex_matrix_internal (st
   octave_idx_type nc = cm.columns ();
 
   if (nr == 0 || nc == 0)
     print_empty_matrix (os, nr, nc, pr_as_read_syntax);
   else if (plus_format && ! pr_as_read_syntax)
     pr_plus_format_matrix (os, cm);
   else
     {
-      typename MT::real_elt_type scale = 1;
-      float_display_format fmt = make_format (cm, scale);
+      float_display_format fmt = make_format (cm);
       int r_fw = fmt.real_format().fw;
       int i_fw = fmt.imag_format().fw;
       int column_width = i_fw + r_fw;
       column_width += (rat_format || bank_format || hex_format
                        || bit_format) ? 2 : 7;
       octave_idx_type total_width = nc * column_width;
       octave_idx_type max_width = octave::command_editor::terminal_cols ();
 
@@ -2387,17 +2361,17 @@ octave_print_complex_matrix_internal (st
                     os << " ...\n";
                 }
             }
         }
       else
         {
           octave::preserve_stream_state stream_state (os);
 
-          pr_scale_header (os, scale);
+          pr_scale_header (os, fmt.scale_factor ());
 
           for (octave_idx_type col = 0; col < nc; col += inc)
             {
               octave_idx_type lim = (col + inc < nc ? col + inc : nc);
 
               pr_col_num_header (os, total_width, max_width, lim, col,
                                  extra_indent);
 
@@ -2406,17 +2380,17 @@ octave_print_complex_matrix_internal (st
                   os << std::setw (extra_indent) << "";
 
                   for (octave_idx_type j = col; j < lim; j++)
                     {
                       octave_quit ();
 
                       os << "  ";
 
-                      pr_complex (os, fmt, cm(i,j), scale);
+                      pr_complex (os, fmt, cm(i,j));
                     }
 
                   if (i < nr - 1)
                     os << "\n";
                 }
             }
         }
     }
@@ -2431,19 +2405,18 @@ octave_print_complex_diag_matrix_interna
   octave_idx_type nc = cm.columns ();
 
   if (nr == 0 || nc == 0)
     print_empty_matrix (os, nr, nc, pr_as_read_syntax);
   else if (plus_format && ! pr_as_read_syntax)
     pr_plus_format_matrix (os, cm);
   else
     {
-      typename DMT::real_elt_type scale = 1;
       float_display_format fmt
-        = make_format (typename DMT::full_matrix_type (cm.diag ()), scale);
+        = make_format (typename DMT::full_matrix_type (cm.diag ()));
       int r_fw = fmt.real_format().fw;
       int i_fw = fmt.imag_format().fw;
       int column_width = i_fw + r_fw;
       column_width += (rat_format || bank_format || hex_format
                        || bit_format) ? 2 : 7;
       octave_idx_type total_width = nc * column_width;
       octave_idx_type max_width = octave::command_editor::terminal_cols ();
 
@@ -2507,24 +2480,24 @@ octave_print_complex_diag_matrix_interna
       else
         {
           octave::preserve_stream_state stream_state (os);
 
           os << "Diagonal Matrix\n";
           if (! Vcompact_format)
             os << "\n";
 
-          pr_scale_header (os, scale);
+          pr_scale_header (os, fmt.scale_factor ());
 
           // kluge.  Get the true width of a number.
           int zero_fw;
           {
             std::ostringstream tmp_oss;
             typename DMT::element_type zero = 0;
-            pr_complex (tmp_oss, fmt, zero, scale);
+            pr_complex (tmp_oss, fmt, zero);
             zero_fw = tmp_oss.str ().length ();
           }
 
           for (octave_idx_type col = 0; col < nc; col += inc)
             {
               octave_idx_type lim = (col + inc < nc ? col + inc : nc);
 
               pr_col_num_header (os, total_width, max_width, lim, col,
@@ -2536,17 +2509,17 @@ octave_print_complex_diag_matrix_interna
 
                   for (octave_idx_type j = col; j < lim; j++)
                     {
                       octave_quit ();
 
                       os << "  ";
 
                       if (i == j)
-                        pr_complex (os, fmt, cm(i,j), scale);
+                        pr_complex (os, fmt, cm(i,j));
                       else
                         os << std::setw (zero_fw) << '0';
                     }
 
                   if (i < nr - 1)
                     os << "\n";
                 }
             }
@@ -2772,18 +2745,17 @@ octave_print_internal (std::ostream& os,
   double increment = r.inc ();
   double limit = r.limit ();
   octave_idx_type num_elem = r.numel ();
 
   if (plus_format && ! pr_as_read_syntax)
     pr_plus_format_matrix (os, r);
   else
     {
-      double scale = 1;
-      float_display_format fmt = make_format (r, scale);
+      float_display_format fmt = make_format (r);
 
       if (pr_as_read_syntax)
         {
           if (free_format)
             {
               os << base << " : ";
               if (increment != 1)
                 os << increment << " : ";
@@ -2825,17 +2797,17 @@ octave_print_internal (std::ostream& os,
                 inc++;
             }
 
           max_width -= extra_indent;
 
           if (max_width < 0)
             max_width = 0;
 
-          pr_scale_header (os, scale);
+          pr_scale_header (os, fmt.scale_factor ());
 
           octave_idx_type col = 0;
           while (col < num_elem)
             {
               octave_idx_type lim = (col + inc < num_elem ? col + inc : num_elem);
 
               pr_col_num_header (os, total_width, max_width, lim, col,
                                  extra_indent);
@@ -2857,17 +2829,17 @@ octave_print_internal (std::ostream& os,
                       // See the comments in Range::matrix_value.
                       if ((increment > 0 && val >= limit)
                           || (increment < 0 && val <= limit))
                         val = limit;
                     }
 
                   os << "  ";
 
-                  pr_float (os, fmt, val, scale);
+                  pr_float (os, fmt, val);
                 }
 
               col += inc;
             }
         }
     }
 }
 
diff --git a/libinterp/corefcn/pr-output.h b/libinterp/corefcn/pr-output.h
--- a/libinterp/corefcn/pr-output.h
+++ b/libinterp/corefcn/pr-output.h
@@ -51,34 +51,30 @@ class boolNDArray;
 class charMatrix;
 class charNDArray;
 class PermMatrix;
 class Cell;
 class octave_value;
 
 template <typename T> class intNDArray;
 
-extern float_display_format
-make_format (const Matrix& m, double& scale);
-
-extern float_display_format
-make_format (const FloatMatrix& m, float& scale);
-
 template <typename T>
 float_display_format
-make_format (const std::complex<T>& c);
-
-extern float_display_format
-make_format (const ComplexMatrix& cm, double& scale);
+make_format (const std::complex<T>& c)
+{
+  return float_display_format ();
+}
 
-extern float_display_format
-make_format (const FloatComplexMatrix& cm, double& scale);
+template <>
+float_display_format
+make_format (const std::complex<double>& c);
 
-extern float_display_format
-make_format (const Range& r, double& scale);
+template <>
+float_display_format
+make_format (const std::complex<float>& fc);
 
 template <typename T>
 float_display_format
 make_format (const T&)
 {
   return float_display_format ();
 }
 
@@ -87,41 +83,33 @@ float_display_format
 make_format (const double& d);
 
 template <>
 float_display_format
 make_format (const float& f);
 
 template <>
 float_display_format
-make_format (const std::complex<double>& c);
-
-template <>
-float_display_format
-make_format (const std::complex<float>& fc);
-
-template <>
-float_display_format
 make_format (const Range& r);
 
 template <>
 float_display_format
-make_format (const NDArray& nda);
+make_format (const Matrix& m);
 
 template <>
 float_display_format
-make_format (const FloatNDArray& nda);
+make_format (const FloatMatrix& m);
 
 template <>
 float_display_format
-make_format (const ComplexNDArray& nda);
+make_format (const ComplexMatrix& m);
 
 template <>
 float_display_format
-make_format (const FloatComplexNDArray& nda);
+make_format (const FloatComplexMatrix& m);
 
 template <>
 float_display_format
 make_format (const boolNDArray& nda);
 
 template <>
 float_display_format
 make_format (const intNDArray<octave_int8>& nda);
