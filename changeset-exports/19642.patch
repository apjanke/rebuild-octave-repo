# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1422651974 18000
#      Fri Jan 30 16:06:14 2015 -0500
# Node ID 5d0663bff5064b97944db220c4a2cdcbd217415b
# Parent  8fe29850fb74b00751cdf41da7ef5918e85b4ffc
# Parent  a9e68144b4ae4f5955d8b6352555681fb55bd591
maint: Periodic merge of gui-release to default.

diff --git a/libgui/graphics/GLCanvas.cc b/libgui/graphics/GLCanvas.cc
--- a/libgui/graphics/GLCanvas.cc
+++ b/libgui/graphics/GLCanvas.cc
@@ -33,17 +33,17 @@ along with Octave; see the file COPYING.
 
 #include "GLCanvas.h"
 #include "gl-select.h"
 
 namespace QtHandles
 {
 
 GLCanvas::GLCanvas (QWidget* xparent, const graphics_handle& gh)
-  : QGLWidget (xparent), Canvas (gh)
+  : QGLWidget (QGLFormat(QGL::SampleBuffers), xparent), Canvas (gh)
 {
   setFocusPolicy (Qt::ClickFocus);
 }
 
 GLCanvas::~GLCanvas (void)
 {
 }
 
diff --git a/libgui/src/m-editor/file-editor-tab.cc b/libgui/src/m-editor/file-editor-tab.cc
--- a/libgui/src/m-editor/file-editor-tab.cc
+++ b/libgui/src/m-editor/file-editor-tab.cc
@@ -1043,16 +1043,28 @@ file_editor_tab::goto_line (const QWidge
           center_current_line ();
         }
     }
   else  // go to given line without dialog
     _edit_area->setCursorPosition (line-1, 0);
 }
 
 void
+file_editor_tab::move_match_brace (const QWidget *ID, bool select)
+{
+  if (ID != this)
+    return;
+
+  if (select)
+    _edit_area->selectToMatchingBrace ();
+  else
+    _edit_area->moveToMatchingBrace ();
+}
+
+void
 file_editor_tab::show_auto_completion (const QWidget *ID)
 {
   if (ID != this)
     return;
 
   QsciScintilla::AutoCompletionSource s = _edit_area->autoCompletionSource ();
   switch (s)
     {
diff --git a/libgui/src/m-editor/file-editor-tab.h b/libgui/src/m-editor/file-editor-tab.h
--- a/libgui/src/m-editor/file-editor-tab.h
+++ b/libgui/src/m-editor/file-editor-tab.h
@@ -101,16 +101,17 @@ public slots:
   void convert_eol (const QWidget *ID, QsciScintilla::EolMode);
 
   void zoom_in (const QWidget *ID);
   void zoom_out (const QWidget *ID);
   void zoom_normal (const QWidget *ID);
 
   void find (const QWidget *ID);
   void goto_line (const QWidget *ID, int line = -1);
+  void move_match_brace (const QWidget *ID, bool select);
   void show_auto_completion (const QWidget *ID);
 
   void insert_debugger_pointer (const QWidget *ID, int line = -1);
   void delete_debugger_pointer (const QWidget *ID, int line = -1);
 
   void do_breakpoint_marker (bool insert, const QWidget *ID, int line = -1);
 
   void set_modified (bool modified = true);
diff --git a/libgui/src/m-editor/file-editor.cc b/libgui/src/m-editor/file-editor.cc
--- a/libgui/src/m-editor/file-editor.cc
+++ b/libgui/src/m-editor/file-editor.cc
@@ -855,16 +855,27 @@ file_editor::request_find (bool)
 }
 
 void
 file_editor::request_goto_line (bool)
 {
   emit fetab_goto_line (_tab_widget->currentWidget ());
 }
 
+void
+file_editor::request_move_match_brace (bool)
+{
+  emit fetab_move_match_brace (_tab_widget->currentWidget (), false);
+}
+
+void
+file_editor::request_sel_match_brace (bool)
+{
+  emit fetab_move_match_brace (_tab_widget->currentWidget (), true);
+}
 
 void
 file_editor::request_completion (bool)
 {
   emit fetab_completion (_tab_widget->currentWidget ());
 }
 
 void
@@ -1397,16 +1408,23 @@ file_editor::construct (void)
           tr ("Convert Line Endings to &Mac (CR)"),
           SLOT (request_conv_eol_mac (bool)));
 
   _edit_nav_menu = editMenu->addMenu (tr ("Navi&gation"));
 
   _goto_line_action = add_action (_edit_nav_menu, QIcon (),
           tr ("Go &to Line..."), SLOT (request_goto_line (bool)));
 
+  _edit_cmd_menu->addSeparator ();
+
+  _move_to_matching_brace  = add_action (_edit_nav_menu, QIcon (),
+          tr ("Move to Matching Brace"), SLOT (request_move_match_brace (bool)));
+  _sel_to_matching_brace  = add_action (_edit_nav_menu, QIcon (),
+          tr ("Select to Matching Brace"), SLOT (request_sel_match_brace (bool)));
+
   _edit_nav_menu->addSeparator ();
 
   _next_bookmark_action =  add_action (_edit_nav_menu, QIcon (),
           tr ("&Next Bookmark"), SLOT (request_next_bookmark (bool)));
   _previous_bookmark_action =  add_action (_edit_nav_menu, QIcon (),
           tr ("Pre&vious Bookmark"), SLOT (request_previous_bookmark (bool)));
   _toggle_bookmark_action =  add_action (_edit_nav_menu, QIcon (),
           tr ("Toggle &Bookmark"), SLOT (request_toggle_bookmark (bool)));
@@ -1710,16 +1728,19 @@ file_editor::add_file_editor_tab (file_e
            f, SLOT (convert_eol (const QWidget*, QsciScintilla::EolMode)));
 
   connect (this, SIGNAL (fetab_find (const QWidget*)),
            f, SLOT (find (const QWidget*)));
 
   connect (this, SIGNAL (fetab_goto_line (const QWidget*, int)),
            f, SLOT (goto_line (const QWidget*, int)));
 
+  connect (this, SIGNAL (fetab_move_match_brace (const QWidget*, bool)),
+           f, SLOT (move_match_brace (const QWidget*, bool)));
+
   connect (this, SIGNAL (fetab_completion (const QWidget*)),
            f, SLOT (show_auto_completion (const QWidget*)));
 
   connect (this, SIGNAL (fetab_set_focus (const QWidget*)),
            f, SLOT (set_focus (const QWidget*)));
 
   connect (this, SIGNAL (fetab_insert_debugger_pointer (const QWidget*, int)),
            f, SLOT (insert_debugger_pointer (const QWidget*, int)));
@@ -1801,16 +1822,18 @@ file_editor::set_shortcuts ()
   shortcut_manager::set_shortcut (_uncomment_selection_action, "editor_edit:uncomment_selection");
 
   shortcut_manager::set_shortcut (_upper_case_action, "editor_edit:upper_case");
   shortcut_manager::set_shortcut (_lower_case_action, "editor_edit:lower_case");
   shortcut_manager::set_shortcut (_indent_selection_action, "editor_edit:indent_selection");
   shortcut_manager::set_shortcut (_unindent_selection_action, "editor_edit:unindent_selection");
   shortcut_manager::set_shortcut (_completion_action, "editor_edit:completion_list");
   shortcut_manager::set_shortcut (_goto_line_action, "editor_edit:goto_line");
+  shortcut_manager::set_shortcut (_move_to_matching_brace, "editor_edit:move_to_brace");
+  shortcut_manager::set_shortcut (_sel_to_matching_brace, "editor_edit:select_to_brace");
   shortcut_manager::set_shortcut (_toggle_bookmark_action, "editor_edit:toggle_bookmark");
   shortcut_manager::set_shortcut (_next_bookmark_action, "editor_edit:next_bookmark");
   shortcut_manager::set_shortcut (_previous_bookmark_action, "editor_edit:previous_bookmark");
   shortcut_manager::set_shortcut (_remove_bookmark_action, "editor_edit:remove_bookmark");
   shortcut_manager::set_shortcut (_preferences_action, "editor_edit:preferences");
   shortcut_manager::set_shortcut (_styles_preferences_action, "editor_edit:styles_preferences");
 
   shortcut_manager::set_shortcut (_conv_eol_windows_action, "editor_edit:conv_eol_winows");
diff --git a/libgui/src/m-editor/file-editor.h b/libgui/src/m-editor/file-editor.h
--- a/libgui/src/m-editor/file-editor.h
+++ b/libgui/src/m-editor/file-editor.h
@@ -91,16 +91,17 @@ signals:
   void fetab_remove_all_breakpoints (const QWidget* ID);
   void fetab_comment_selected_text (const QWidget* ID);
   void fetab_uncomment_selected_text (const QWidget* ID);
   void fetab_indent_selected_text (const QWidget* ID);
   void fetab_unindent_selected_text (const QWidget* ID);
   void fetab_convert_eol (const QWidget* ID, QsciScintilla::EolMode eol_mode);
   void fetab_find (const QWidget* ID);
   void fetab_goto_line (const QWidget* ID, int line = -1);
+  void fetab_move_match_brace (const QWidget* ID, bool select);
   void fetab_completion (const QWidget*);
   void fetab_insert_debugger_pointer (const QWidget* ID, int line = -1);
   void fetab_delete_debugger_pointer (const QWidget* ID, int line = -1);
   void fetab_do_breakpoint_marker (bool insert, const QWidget* ID,
                                    int line = -1);
   void fetab_set_focus (const QWidget* ID);
   void fetab_scintilla_command (const QWidget* ID, unsigned int sci_msg);
 
@@ -141,16 +142,18 @@ public slots:
   void request_save_file_as (bool);
   void request_run_file (bool);
   void request_context_run (bool);
   void request_toggle_bookmark (bool);
   void request_next_bookmark (bool);
   void request_previous_bookmark (bool);
   void request_remove_bookmark (bool);
 
+  void request_move_match_brace (bool);
+  void request_sel_match_brace (bool);
   void request_toggle_breakpoint (bool);
   void request_next_breakpoint (bool);
   void request_previous_breakpoint (bool);
   void request_remove_breakpoint (bool);
 
   void request_delete_start_word (bool);
   void request_delete_end_word (bool);
   void request_delete_start_line (bool);
@@ -300,16 +303,18 @@ private:
   QAction *_cut_line_action;
   QAction *_duplicate_selection_action;
   QAction *_transpose_line_action;
 
   QAction *_find_action;
   QAction *_goto_line_action;
   QAction *_completion_action;
 
+  QAction *_move_to_matching_brace;
+  QAction *_sel_to_matching_brace;
   QAction *_next_bookmark_action;
   QAction *_previous_bookmark_action;
   QAction *_toggle_bookmark_action;
   QAction * _remove_bookmark_action;
 
   QAction *_print_action;
   QAction *_run_action;
   QAction *_run_selection_action;
diff --git a/libgui/src/main-window.cc b/libgui/src/main-window.cc
--- a/libgui/src/main-window.cc
+++ b/libgui/src/main-window.cc
@@ -80,16 +80,17 @@ main_window::main_window (QWidget *p)
     _workspace_model (new workspace_model ()),
     status_bar (new QStatusBar ()),
     command_window (new terminal_dock_widget (this)),
     history_window (new history_dock_widget (this)),
     file_browser_window (new files_dock_widget (this)),
     doc_browser_window (new documentation_dock_widget (this)),
     editor_window (create_default_editor (this)),
     workspace_window (new workspace_view (this)),
+    _settings_dlg (0),
     find_files_dlg (0),
     release_notes_window (0),
     community_news_window (0),
     _octave_qt_link (0),
     _clipboard (QApplication::clipboard ()),
     _cmd_queue (new QStringList ()),  // no command pending
     _cmd_processing (1),
     _cmd_queue_mutex (),
@@ -145,16 +146,21 @@ main_window::~main_window (void)
       delete find_files_dlg;
       find_files_dlg = 0;
     }
   if (release_notes_window)
     {
       delete release_notes_window;
       release_notes_window = 0;
     }
+  if (_settings_dlg)
+    {
+      delete _settings_dlg;
+      _settings_dlg = 0;
+    }
   if (community_news_window)
     {
       delete community_news_window;
       community_news_window = 0;
     }
   delete _octave_qt_link;
   delete _cmd_queue;
 }
@@ -663,28 +669,41 @@ void
 main_window::open_developer_page (void)
 {
   QDesktopServices::openUrl (QUrl ("http://octave.org/get-involved.html"));
 }
 
 void
 main_window::process_settings_dialog_request (const QString& desired_tab)
 {
-  settings_dialog *settingsDialog = new settings_dialog (this, desired_tab);
-  int change_settings = settingsDialog->exec ();
-  if (change_settings == QDialog::Accepted)
-    {
-      settingsDialog->write_changed_settings ();
-      QSettings *settings = resource_manager::get_settings ();
-      if (settings)
-        emit settings_changed (settings);
+  if (_settings_dlg)  // _settings_dlg is a guarded pointer!
+    {                 // here the dialog is still open and called once again
+      if (! desired_tab.isEmpty ())
+        _settings_dlg->show_tab (desired_tab);
+      return;
     }
-  delete settingsDialog;
+
+  _settings_dlg = new settings_dialog (this, desired_tab);
+
+  connect (_settings_dlg, SIGNAL (apply_new_settings ()),
+           this, SLOT (request_reload_settings ()));
+
+  _settings_dlg->setModal (false);
+  _settings_dlg->setAttribute (Qt::WA_DeleteOnClose);
+  _settings_dlg->show ();
 }
 
+void
+main_window::request_reload_settings ()
+{
+  QSettings *settings = resource_manager::get_settings ();
+
+  if (settings)
+    emit settings_changed (settings);
+}
 
 void
 main_window::notice_settings (const QSettings *settings)
 {
   // QSettings pointer is checked before emitting.
 
   // the widget's icons (when floating)
   QString icon_set
diff --git a/libgui/src/main-window.h b/libgui/src/main-window.h
--- a/libgui/src/main-window.h
+++ b/libgui/src/main-window.h
@@ -32,16 +32,17 @@ along with Octave; see the file COPYING.
 #include <QStatusBar>
 #include <QToolBar>
 #include <QQueue>
 #include <QMdiSubWindow>
 #include <QCloseEvent>
 #include <QToolButton>
 #include <QComboBox>
 #include <QSemaphore>
+#include <QPointer>
 
 // Editor includes
 #include "file-editor-interface.h"
 
 // QTerminal includes
 #include "QTerminal.h"
 
 // Own includes
@@ -52,16 +53,18 @@ along with Octave; see the file COPYING.
 #include "history-dock-widget.h"
 #include "files-dock-widget.h"
 #include "terminal-dock-widget.h"
 #include "documentation-dock-widget.h"
 #include "octave-qt-link.h"
 #include "octave-dock-widget.h"
 #include "find-files-dialog.h"
 
+class settings_dialog;
+
 /**
  * @class MainWindow
  *
  * Represents the main window.
  */
 class main_window : public QMainWindow
 {
   Q_OBJECT
@@ -98,17 +101,17 @@ signals:
 
   void copyClipboard_signal (void);
   void pasteClipboard_signal (void);
   void selectAll_signal (void);
 
 public slots:
 
   void focus_changed (QWidget *w_old, QWidget *w_new);
-
+  void request_reload_settings ();
 
   void report_status_message (const QString& statusMessage);
   void handle_save_workspace_request (void);
   void handle_load_workspace_request (const QString& file = QString ());
   void handle_clear_command_window_request (void);
   void handle_clear_workspace_request (void);
   void handle_clear_history_request (void);
   void handle_rename_variable_request (const QString& old_name,
@@ -373,16 +376,19 @@ private:
 
   // Toolbars.
   QComboBox *_current_directory_combo_box;
   static const int current_directory_width = 300;
   static const int current_directory_max_visible = 16;
   static const int current_directory_max_count = 16;
   QLineEdit *_current_directory_line_edit;
 
+  // settings dialog as guarded pointer (set to 0 when deleted)
+  QPointer<settings_dialog> _settings_dlg;
+
   // Find files dialog
   find_files_dialog * find_files_dlg;
 
   // release notes window
   QWidget * release_notes_window;
 
   QWidget * community_news_window;
 
diff --git a/libgui/src/settings-dialog.cc b/libgui/src/settings-dialog.cc
--- a/libgui/src/settings-dialog.cc
+++ b/libgui/src/settings-dialog.cc
@@ -383,36 +383,46 @@ settings_dialog::settings_dialog (QWidge
   read_lexer_settings (lexer,settings);
   delete lexer;
   lexer = new octave_txt_lexer ();
   read_lexer_settings (lexer,settings);
   delete lexer;
 #endif
 
   // which tab is the desired one?
-  if (desired_tab.isEmpty ())
-    ui->tabWidget->setCurrentIndex (settings->value ("settings/last_tab",
-                                    0).toInt ());
-  else
-    {
-      QHash <QString, QWidget*> tab_hash;
-      tab_hash["editor"] = ui->tab_editor;
-      tab_hash["editor_styles"] = ui->tab_editor_styles;
-      ui->tabWidget->setCurrentIndex (
-        ui->tabWidget->indexOf (tab_hash.value (desired_tab)));
-    }
+  show_tab (desired_tab);
 
-
+  // connect button box signal
+  connect (ui->button_box, SIGNAL (clicked (QAbstractButton *)),
+           this,           SLOT (button_clicked (QAbstractButton *)));
 }
 
 settings_dialog::~settings_dialog ()
 {
   delete ui;
 }
 
+void
+settings_dialog::show_tab (const QString& tab)
+{
+  if (tab.isEmpty ())
+    {
+      QSettings *settings = resource_manager::get_settings ();
+      ui->tabWidget->setCurrentIndex (settings->value ("settings/last_tab",
+                                      0).toInt ());
+    }
+  else
+    {
+      QHash <QString, QWidget*> tab_hash;
+      tab_hash["editor"] = ui->tab_editor;
+      tab_hash["editor_styles"] = ui->tab_editor_styles;
+      ui->tabWidget->setCurrentIndex (
+        ui->tabWidget->indexOf (tab_hash.value (tab)));
+    }
+}
 
 #ifdef HAVE_QSCINTILLA
 int
 settings_dialog::get_valid_lexer_styles (QsciLexer *lexer, int styles[])
 {
   int max_style = 0;
   int actual_style = 0;
   while (actual_style < MaxStyleNumber && max_style < MaxLexerStyles)
@@ -941,16 +951,33 @@ settings_dialog::write_terminal_colors (
     }
   settings->sync ();
 }
 
 
 // internal slots
 
 void
+settings_dialog::button_clicked (QAbstractButton *button)
+{
+  QDialogButtonBox::ButtonRole button_role = ui->button_box->buttonRole (button);
+
+  if (button_role == QDialogButtonBox::ApplyRole ||
+      button_role == QDialogButtonBox::AcceptRole)
+    {
+      write_changed_settings ();
+      emit apply_new_settings ();
+    }
+
+  if (button_role == QDialogButtonBox::RejectRole ||
+      button_role == QDialogButtonBox::AcceptRole)
+    close ();
+}
+
+void
 settings_dialog::get_dir (QLineEdit *line_edit, const QString& title)
 {
   QString dir = QFileDialog::getExistingDirectory(this,
                 title, line_edit->text (),
                 QFileDialog::ShowDirsOnly | QFileDialog::DontResolveSymlinks);
   line_edit->setText (dir);
 }
 
diff --git a/libgui/src/settings-dialog.h b/libgui/src/settings-dialog.h
--- a/libgui/src/settings-dialog.h
+++ b/libgui/src/settings-dialog.h
@@ -39,40 +39,48 @@ namespace Ui
 }
 
 class settings_dialog:public QDialog
 {
   Q_OBJECT public:
   explicit settings_dialog (QWidget * parent,
                             const QString& desired_tab = QString ());
   ~settings_dialog ();
-  void write_changed_settings ();
+  void show_tab (const QString&);
+
+signals:
+  void apply_new_settings ();
 
 private slots:
   void get_octave_dir ();
   void get_file_browser_dir ();
   void get_dir (QLineEdit*, const QString&);
   void set_disabled_pref_file_browser_dir (bool disable);
 
+  // slots for dialog's buttons
+  void button_clicked (QAbstractButton *button);
+
   // slots for import/export-buttons of shortcut sets
   void import_shortcut_set1 ();
   void export_shortcut_set1 ();
   void import_shortcut_set2 ();
   void export_shortcut_set2 ();
 
 private:
   Ui::settings_dialog * ui;
 #ifdef HAVE_QSCINTILLA
   void read_lexer_settings (QsciLexer *lexer, QSettings *settings);
   void write_lexer_settings (QsciLexer *lexer, QSettings *settings);
   int  get_valid_lexer_styles (QsciLexer *lexer, int styles[]);
   enum { MaxLexerStyles = 64,
          MaxStyleNumber = 128 };
 #endif
 
+  void write_changed_settings ();
+
   void read_workspace_colors (QSettings *settings);
   void write_workspace_colors (QSettings *settings);
 
   void read_terminal_colors (QSettings *settings);
   void write_terminal_colors (QSettings *settings);
 
   color_picker *_widget_title_bg_color;
   color_picker *_widget_title_bg_color_active;
diff --git a/libgui/src/settings-dialog.ui b/libgui/src/settings-dialog.ui
--- a/libgui/src/settings-dialog.ui
+++ b/libgui/src/settings-dialog.ui
@@ -2268,19 +2268,19 @@
          </widget>
         </widget>
        </item>
       </layout>
      </widget>
     </widget>
    </item>
    <item>
-    <widget class="QDialogButtonBox" name="buttonBox">
+    <widget class="QDialogButtonBox" name="button_box">
      <property name="standardButtons">
-      <set>QDialogButtonBox::Cancel|QDialogButtonBox::Ok</set>
+      <set>QDialogButtonBox::Apply|QDialogButtonBox::Cancel|QDialogButtonBox::Ok</set>
      </property>
     </widget>
    </item>
   </layout>
  </widget>
  <resources/>
  <connections>
   <connection>
@@ -2455,48 +2455,16 @@
     </hint>
     <hint type="destinationlabel">
      <x>68</x>
      <y>182</y>
     </hint>
    </hints>
   </connection>
   <connection>
-   <sender>buttonBox</sender>
-   <signal>accepted()</signal>
-   <receiver>settings_dialog</receiver>
-   <slot>accept()</slot>
-   <hints>
-    <hint type="sourcelabel">
-     <x>299</x>
-     <y>366</y>
-    </hint>
-    <hint type="destinationlabel">
-     <x>299</x>
-     <y>199</y>
-    </hint>
-   </hints>
-  </connection>
-  <connection>
-   <sender>buttonBox</sender>
-   <signal>rejected()</signal>
-   <receiver>settings_dialog</receiver>
-   <slot>reject()</slot>
-   <hints>
-    <hint type="sourcelabel">
-     <x>299</x>
-     <y>366</y>
-    </hint>
-    <hint type="destinationlabel">
-     <x>299</x>
-     <y>199</y>
-    </hint>
-   </hints>
-  </connection>
-  <connection>
    <sender>useCustomFileEditor</sender>
    <signal>toggled(bool)</signal>
    <receiver>customEditorLabel</receiver>
    <slot>setEnabled(bool)</slot>
    <hints>
     <hint type="sourcelabel">
      <x>349</x>
      <y>383</y>
diff --git a/libgui/src/shortcut-manager.cc b/libgui/src/shortcut-manager.cc
--- a/libgui/src/shortcut-manager.cc
+++ b/libgui/src/shortcut-manager.cc
@@ -250,16 +250,20 @@ shortcut_manager::do_init_data ()
         QKeySequence ());
   init (tr ("Convert Line Ednings to Unix"), "editor_edit:conv_eol_unix",
         QKeySequence ());
   init (tr ("Convert Line Ednings to Mac"), "editor_edit:conv_eol_mac",
         QKeySequence ());
 
   init (tr ("Goto Line"), "editor_edit:goto_line",
         QKeySequence (ctrl + Qt::Key_G));
+  init (tr ("Move to Matching Brace"), "editor_edit:move_to_brace",
+        QKeySequence (ctrl + Qt::Key_M));
+  init (tr ("Select to Matching Brace"), "editor_edit:select_to_brace",
+        QKeySequence (ctrl_shift + Qt::Key_M));
   init (tr ("Toggle Bookmark"), "editor_edit:toggle_bookmark",
         QKeySequence (prefix + Qt::Key_F7));
   init (tr ("Next Bookmark"), "editor_edit:next_bookmark",
         QKeySequence (prefix + Qt::Key_F2));
   init (tr ("Previous Bookmark"), "editor_edit:previous_bookmark",
         QKeySequence (prefix + Qt::SHIFT + Qt::Key_F2));
   init (tr ("Remove All Bookmark"), "editor_edit:remove_bookmark",
         QKeySequence ());
diff --git a/scripts/sparse/eigs.m b/scripts/sparse/eigs.m
--- a/scripts/sparse/eigs.m
+++ b/scripts/sparse/eigs.m
@@ -227,17 +227,17 @@ function varargout = eigs (varargin)
         endif
       else
         call_eig = false;
       endif
 
       if (nargin > 2 + offset)
         tmp = varargin{3+offset};
         if (ischar (tmp) || (isnumeric (tmp) && isscalar (tmp)))
-          sigma = tmp;
+          sigma = tolower (tmp);
         else
           call_eig = false;
         endif
       endif
     endif
   endif
 
   if (call_eig)
