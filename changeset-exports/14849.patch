# HG changeset patch
# User Rik <octave@nomad.inbox5.com>
# Date 1341774045 25200
#      Sun Jul 08 12:00:45 2012 -0700
# Node ID f6d3d5b0bd4218deb04be8691e0fa733e40f3fc2
# Parent  4563d99358532978d69b0abda3c91b97e63bc454
test: Use Octave coding conventions for tests for line() and toc().

* line.m, data.cc (toc): Use Octave coding conventions for tests.

diff --git a/scripts/plot/line.m b/scripts/plot/line.m
--- a/scripts/plot/line.m
+++ b/scripts/plot/line.m
@@ -43,23 +43,23 @@ function h = line (varargin)
 
 endfunction
 
 %!demo
 %! clf
 %! x = 0:0.3:10;
 %! y1 = cos (x);
 %! y2 = sin (x);
-%! subplot (3, 1, 1)
+%! subplot (3,1,1);
 %! args = {"color", "b", "marker", "s"};
 %! line ([x(:), x(:)], [y1(:), y2(:)], args{:})
 %! title ("Test broadcasting for line()")
-%! subplot (3, 1, 2)
+%! subplot (3,1,2);
 %! line (x(:), [y1(:), y2(:)], args{:})
-%! subplot (3, 1, 3)
+%! subplot (3,1,3);
 %! line ([x(:), x(:)+pi/2], y1(:), args{:})
 %! xlim ([0 10])
 
 %!test
 %! hf = figure ("visible", "off");
 %! unwind_protect
 %!   h = line;
 %!   assert (findobj (hf, "type", "line"), h);
diff --git a/src/data.cc b/src/data.cc
--- a/src/data.cc
+++ b/src/data.cc
@@ -5769,18 +5769,18 @@ See tic.\n\
     }
 
   return retval;
 }
 
 /*
 %!shared id
 %! id = tic ();
-%!assert (isa (id, "uint64"));
-%!assert (isa (toc (id), "double"));
+%!assert (isa (id, "uint64"))
+%!assert (isa (toc (id), "double"))
 */
 
 DEFUN (cputime, args, ,
   "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {[@var{total}, @var{user}, @var{system}] =} cputime ();\n\
 Return the CPU time used by your Octave session.  The first output is\n\
 the total time spent executing your process and is equal to the sum of\n\
 second and third outputs, which are the number of CPU seconds spent\n\
