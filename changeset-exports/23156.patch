# HG changeset patch
# User CarnÃ« Draug <carandraug@octave.org>
# Date 1486323142 0
#      Sun Feb 05 19:32:22 2017 +0000
# Node ID 619eb53521bdb2fd97dbaab94069a9ebf2efb06b
# Parent  c35b258ee5a2e793528bd0adee0d1d328505ee39
null.m: handle class single in corner cases with special code paths.

diff --git a/scripts/linear-algebra/null.m b/scripts/linear-algebra/null.m
--- a/scripts/linear-algebra/null.m
+++ b/scripts/linear-algebra/null.m
@@ -39,80 +39,73 @@ function retval = null (A, tol)
 
   if (nargin < 1 || nargin > 2)
     print_usage ();
   elseif (nargin == 2 && strcmp (tol, "r"))
     error ("null: option for rational not yet implemented");
   endif
 
   if (isempty (A))
-    retval = [];
+    if (isa (A, "single"))
+      retval = single ([]);
+    else
+      retval = [];
+    endif
   else
     [U, S, V] = svd (A);
-
-    [rows, cols] = size (A);
-
-    [S_nr, S_nc] = size (S);
-
-    if (S_nr == 1 || S_nc == 1)
-      s = S(1);
-    else
-      s = diag (S);
-    endif
+    out_cls = class (V);
 
+    s = diag (S);
     if (nargin == 1)
-      if (isa (A, "single"))
-        tol = max (size (A)) * s (1) * eps ("single");
-      else
-        tol = max (size (A)) * s (1) * eps;
-      endif
-    elseif (nargin != 2)
-      print_usage ();
+      tol = max (size (A)) * s (1) * eps (out_cls);
     endif
-
     rank = sum (s > tol);
 
+    cols = columns (A);
     if (rank < cols)
       retval = V(:, rank+1:cols);
-      if (isa (A, "single"))
-        retval (abs (retval) < eps ("single")) = 0;
-      else
-        retval (abs (retval) < eps) = 0;
-      endif
+      retval(abs (retval) < eps (out_cls)) = 0;
     else
-      retval = zeros (cols, 0);
+      retval = zeros (cols, 0, out_cls);
     endif
   endif
 
 endfunction
 
 
 ## FIXME: Need some tests for 'single' variables as well
 
 %!test
 %! A = 0;
 %! assert (null (A), 1);
+%! assert (null (single (A)), single (1));
 
 %!test
 %! A = 1;
 %! assert (null (A), zeros (1,0));
 
 %!test
 %! A = [1 0; 0 1];
 %! assert (null (A), zeros (2,0));
+%! assert (null (single (A)), zeros (2, 0, "single"))
 
 %!test
 %! A = [1 0; 1 0];
 %! assert (null (A), [0 1]');
 
 %!test
 %! A = [1 1; 0 0];
-%! assert (null (A), [-1/sqrt(2) 1/sqrt(2)]', eps);
+%! assert (null (A), [-1/sqrt(2) 1/sqrt(2)]', eps)
+%! assert (null (single (A)), single ([-1/sqrt(2) 1/sqrt(2)]'), eps)
 
 %!test
 %! tol = 1e-4;
 %! A = [1 0; 0 tol-eps];
 %! assert (null (A,tol), [0; 1]);
 
 %!test
 %! tol = 1e-4;
 %! A = [1 0; 0 tol+eps];
 %! assert (null (A,tol), zeros (2,0));
+
+%!assert (null ([]), [])
+%!assert (null (single ([])), single ([]))
+%!assert (null (uint8 ([])), [])
