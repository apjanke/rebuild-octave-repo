# HG changeset patch
# User Georg Wiora
# Date 1486550058 -3600
#      Wed Feb 08 11:34:18 2017 +0100
# Node ID 5291b67ff1249d87538b3de3983ae984c6f71a9b
# Parent  99ca557fd34f989717d08d56f22e30af6d9456d9
More verbose information when inputParser fails validating argument (patch #9241)

* scripts/general/inputParser.m: Next to the invalid parameter also print the
function which caused invalidation to guide the user to fix the input.  New
regression test.

Pushed by Kai T. Ohlhus <k.ohlhus@gmail.com>.

diff --git a/scripts/general/inputParser.m b/scripts/general/inputParser.m
--- a/scripts/general/inputParser.m
+++ b/scripts/general/inputParser.m
@@ -414,18 +414,19 @@ classdef inputParser < handle
           ##       the default for the rest.
           ##    3) it's a struct with the Parameter pairs.
           if (ischar (in) || (this.StructExpand && isstruct (in)
                               && isscalar (in)))
             idx -= 1;
             vidx -= 1;
             break
           else
-            this.error (sprintf ("failed validation of %s",
-                                 toupper (opt.name)));
+            this.error (sprintf (["failed validation of %s\n", ...
+                                  "Validation function: %s"],
+                                 toupper (opt.name), disp(opt.val)));
           endif
         endif
         this.Results.(opt.name) = in;
       endwhile
 
       ## Fill in with defaults of missing Optional
       while (idx++ < nOpt)
         opt = this.Optional{idx};
@@ -498,17 +499,18 @@ classdef inputParser < handle
         error ("inputParser.add%s: argname '%s' has already been specified",
                type, name);
       endif
       this.Parameters{end+1} = name;
     endfunction
 
     function validate_arg (this, name, val, in)
         if (! val (in))
-          this.error (sprintf ("failed validation of %s", toupper (name)));
+          this.error (sprintf ("failed validation of %s with %s",
+                               toupper (name), func2str (val)));
         endif
         this.Results.(name) = in;
     endfunction
 
     function r = is_argname (this, type, name)
       if (this.CaseSensitive)
         r = isfield (this.(type), name);
         this.last_name = name;
@@ -747,8 +749,14 @@ endclassdef
 %!test
 %! p = inputParser;
 %! p.addParameter ("b", []);
 %! p.KeepUnmatched = true;
 %! p.parse ("a", 1);
 %! p.parse ("b", 1);
 %! assert (p.Results, struct ("b", 1));
 %! assert (p.Unmatched, struct ());
+
+## Test for patch #9241
+%!error<failed validation of A with ischar>
+%! p = inputParser;
+%! p.addParameter ("a", [], @ischar);
+%! p.parse ("a", 1);
