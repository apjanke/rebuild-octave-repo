# HG changeset patch
# User jwe
# Date 774730407 0
#      Wed Jul 20 18:53:27 1994 +0000
# Node ID 6898f0c9e096d763d3e56901b48a46cca2fc6910
# Parent  a01a9db8ab69d9aadd767afce2b71019437102e8
[project @ 1994-07-20 18:53:27 by jwe]

diff --git a/src/dynamic-ld.cc b/src/dynamic-ld.cc
--- a/src/dynamic-ld.cc
+++ b/src/dynamic-ld.cc
@@ -35,17 +35,20 @@ extern "C"
 #include "user-prefs.h"
 #include "octave.h"
 #include "utils.h"
 #include "error.h"
 
 void
 octave_dld_tc2_unlink_by_symbol (const char *name, int hard = 1)
 {
-  char *mangled_fcn_name = strconcat (name, "__FP13tree_constanti");
+// XXX FIXME XXX -- need to determine the name mangling scheme
+// automatically, in case it changes, or is different on different
+// systems, even if they have g++.
+  char *mangled_fcn_name = strconcat (name, "__FRC13Octave_objecti");
   int status = dld_unlink_by_symbol (mangled_fcn_name, hard);
   if (status != 0)
     dld_perror ("octave_dld_tc2_unlink_by_symbol");
   delete [] mangled_fcn_name;
 }
 
 void
 octave_dld_tc2_unlink_by_file (const char *name, int hard = 1)
@@ -58,17 +61,17 @@ octave_dld_tc2_unlink_by_file (const cha
 static void
 octave_dld_init (void)
 {
   static int initialized = 0;
 
   if (! initialized)
     {
       char *full_path = dld_find_executable (raw_prog_name);
-      if (full_path != (char *) NULL)
+      if (full_path)
 	{
 	  int status = dld_init (full_path);
 	  if (status != 0)
 	    {
 	      dld_perror ("octave_dld_tc2_and_go");
 	      error ("failed to load symbols from `%s'", full_path);
 	    }
 	  else
@@ -83,77 +86,88 @@ octave_dld_init (void)
 /*
  * Look for object in path.  It should provide a definition for the
  * function we just marked as undefined.  If we find it, we\'ll also
  * try to load the remaining undefined symbols.
  */
 static int
 octave_dld_link (const char *object)
 {
-  char *file = file_in_path (object, (char *) NULL);
+  char *file = file_in_path (object, 0);
   int status = dld_link (file);
   if (status != 0)
     dld_perror ("octave_dld_link");
     
   delete [] file;
   return status;
 }
 
 int
 octave_dld_tc2_link (const char *object)
 {
   int status = octave_dld_link (object);
   if (status == 0)
     {
-      status = octave_dld_link ("liboctave.a");
+// XXX FIXME XXX -- this obviously won't work everywhere...
+      char *octave_lib = "/home/jwe/src/octave/sun4-dld/liboctave.a";
+      status = octave_dld_link (octave_lib);
       if (status == 0)
-	octave_dld_link ("libcruft.a");
+	{
+// XXX FIXME XXX -- this obviously won't work everywhere...
+	  char *cruft_library = "/home/jwe/src/octave/sun4-dld/libcruft.a";
+	  octave_dld_link (cruft_library);
+	}
     }
   return status;
 }
 
 builtin_fcn_ptr
-octave_dld_tc2 (const char *name, const char *fcn, const char *object)
+octave_dld_tc2 (const char *name, const char *fcn)
 {
-  builtin_fcn_ptr retval = (builtin_fcn_ptr) NULL;
+  builtin_fcn_ptr retval = 0;
 
   octave_dld_init ();
 
-  char *mangled_fcn_name = strconcat (fcn, "__FP13tree_constanti");
+// XXX FIXME XXX -- need to determine the name mangling scheme
+// automatically, in case it changes, or is different on different
+// systems, even if they have g++.
+  char *mangled_fcn_name = strconcat (fcn, "__FRC13Octave_objecti");
 
 // See if the function has already been loaded.  If not, mark it as
 // undefined.
 
   if (dld_get_func (mangled_fcn_name) == 0)
     dld_create_reference (mangled_fcn_name);
 
-  int status = octave_dld_link (object);
+// XXX FIXME XXX -- this obviously won't work everywhere...
+  char *octave_dld_library = "/home/jwe/src/octave/sun4-dld/liboctdld.a";
+  int status = octave_dld_tc2_link (octave_dld_library);
   if (status == 0)
     {
 // Return a pointer to the function we just loaded.  If we can\'t find
 // it, this will return NULL.
 
       retval = (builtin_fcn_ptr) dld_get_func (mangled_fcn_name);
     }
 
   delete [] mangled_fcn_name;
 
   return retval;
     
 }
 
 Octave_object
 octave_dld_tc2_and_go (const Octave_object& args, int nargout,
-		       const char *name, const char *fcn, const char *object)
+		       const char *name, const char *fcn)
 {
   Octave_object retval;
 
-  builtin_fcn_ptr fcn_to_call = octave_dld_tc2 (name, fcn, object);
+  builtin_fcn_ptr fcn_to_call = octave_dld_tc2 (name, fcn);
 
-  if (fcn_to_call != (builtin_fcn_ptr) NULL)
+  if (fcn_to_call)
     retval = (*fcn_to_call) (args, nargout);
   else
     error ("octave_dld_tc2_and_go: failed to load `%s'", name);
 
   return retval;
 }
 
 /*
diff --git a/src/dynamic-ld.h b/src/dynamic-ld.h
--- a/src/dynamic-ld.h
+++ b/src/dynamic-ld.h
@@ -21,31 +21,28 @@ Software Foundation, 675 Mass Ave, Cambr
 
 */
 
 #if !defined (octave_dynamic_ld_h)
 #define octave_dynamic_ld_h 1
 
 #include "oct-obj.h"
 
-typedef Octave_object (*builtin_fcn_ptr) (const Octave_object&, int, int);
+typedef Octave_object (*builtin_fcn_ptr) (const Octave_object&, int);
 
 extern void octave_dld_tc2_unlink_by_symbol (const char *name, int hard = 1);
 
 extern void octave_dld_tc2_unlink_by_file (const char *name, int hard = 1);
 
-extern builtin_fcn_ptr octave_dld_tc2 (const char *name,
-				       const char *fcn,
-				       const char *object);
+extern builtin_fcn_ptr octave_dld_tc2 (const char *name, const char *fcn);
 
 extern Octave_object octave_dld_tc2_and_go (const Octave_object&,
 					    int nargout,
 					    const char *name,
-					    const char *fcn,
-					    const char *object);
+					    const char *fcn);
 
 #endif
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; page-delimiter: "^/\\*" ***
 ;;; End: ***
