# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1525324412 14400
#      Thu May 03 01:13:32 2018 -0400
# Node ID 4d7790d9793fca94d05cc67194ba357977c85cb1
# Parent  416856765a558a08e4471a8cccd76c29406ce028
use cbegin, crbegin, cend, and crend and auto decls where possible

* file-editor.cc, call-stack.cc, gtk-manager.cc, load-path.cc,
oct-map.cc, oct-stream.cc, variables.cc, ov-class.cc,
ov-fcn-handle.cc, ov-struct.cc, bp-table.cc, jit-typeinfo.cc,
pt-jit.cc: Use cbegin, crbegin, cend, crend, and auto decls where
possible.

* oct-map.h: Provide cbegin and cend methods for octave map classes.

diff --git a/libgui/src/m-editor/file-editor.cc b/libgui/src/m-editor/file-editor.cc
--- a/libgui/src/m-editor/file-editor.cc
+++ b/libgui/src/m-editor/file-editor.cc
@@ -372,19 +372,18 @@ namespace octave
 
     // save filenames (even if last session will not be restored next time)
     // together with encoding and the tab index
     QStringList fetFileNames;
     QStringList fet_encodings;
     QStringList fet_index;
 
     // save all open tabs before they are definitely closed
-    // FIXME: use cbegin and auto decl here when available.
-    for (editor_tab_map_const_iterator p = m_editor_tab_map.begin ();
-         p != m_editor_tab_map.end (); p++)
+    for (auto p = m_editor_tab_map.cbegin ();
+         p != m_editor_tab_map.cend (); p++)
       {
         QString file_name = p->first;   // get file name of tab
         if (! file_name.isEmpty ())      // do not append unnamed files
           {
             fetFileNames.append (file_name);
             fet_encodings.append (m_editor_tab_map[file_name].encoding);
             QString index;
             fet_index.append (index.setNum
@@ -945,19 +944,18 @@ namespace octave
         m_tmp_closed_files << old_name;  // for reloading if error removing
 
         if (! new_name.isEmpty ())
           m_tmp_closed_files << new_name;  // store new name
         else
           m_tmp_closed_files << ""; // no new name, just removing this file
 
         // Get and store the related encoding
-        // FIXME: use cbegin and auto decl here when available.
-        for (editor_tab_map_const_iterator p = m_editor_tab_map.begin ();
-             p != m_editor_tab_map.end (); p++)
+        for (auto p = m_editor_tab_map.cbegin ();
+             p != m_editor_tab_map.cend (); p++)
           {
             if (editor_tab == p->second.fet_ID)
               {
                 m_tmp_closed_files << p->second.encoding;
                 break;
               }
           }
       }
@@ -2313,19 +2311,18 @@ namespace octave
   {
     QDir old_dir (old_name);
 
     // Have all file editor tabs signal what their filenames are.
     m_editor_tab_map.clear ();
     emit fetab_file_name_query (nullptr);
 
     // Loop over all open files and pick those within old_dir
-    // FIXME: use cbegin and auto decl here when available.
-    for (editor_tab_map_const_iterator p = m_editor_tab_map.begin ();
-         p != m_editor_tab_map.end (); p++)
+    for (auto p = m_editor_tab_map.cbegin ();
+         p != m_editor_tab_map.cend (); p++)
       {
         QString rel_path_to_file = old_dir.relativeFilePath (p->first);
         if (rel_path_to_file.left (3) != QString ("../"))
           {
             // We directly go down from old_dir to reach our file: Our
             // file is included in the removed/renamed diectory.
             // Thus delete it.
             m_no_focus = true;  // Remember for not focussing editor
@@ -2365,19 +2362,18 @@ namespace octave
   {
     // Have all file editor tabs signal what their filenames are.
     m_editor_tab_map.clear ();
     emit fetab_file_name_query (nullptr);
 
     // Check all tabs for the given file name
     QWidget *retval = nullptr;
 
-    // FIXME: use cbegin and auto decl here when available.
-    for (editor_tab_map_const_iterator p = m_editor_tab_map.begin ();
-         p != m_editor_tab_map.end (); p++)
+    for (auto p = m_editor_tab_map.cbegin ();
+         p != m_editor_tab_map.cend (); p++)
       {
         QString tab_file = p->first;
         if (same_file (file.toStdString (), tab_file.toStdString ())
             || file == tab_file)     // needed as same_file ("","") is false.
           {
             retval = p->second.fet_ID;
             break;
           }
diff --git a/libinterp/corefcn/call-stack.cc b/libinterp/corefcn/call-stack.cc
--- a/libinterp/corefcn/call-stack.cc
+++ b/libinterp/corefcn/call-stack.cc
@@ -132,18 +132,17 @@ namespace octave
 
     // Look for the caller of dbstack.
     size_t xframe = cs[curr_frame].m_prev;
 
     bool found = false;
 
     size_t k = cs.size ();
 
-    // FIXME: use crend and auto decl here when available.
-    for (const_reverse_iterator p = cs.rbegin (); p != cs.rend (); p++)
+    for (auto p = cs.crbegin (); p != cs.crend (); p++)
       {
         octave_function *f = (*p).m_fcn;
 
         if (--k == xframe)
           found = true;
 
         if (f && f->is_user_code ())
           {
@@ -161,20 +160,19 @@ namespace octave
     return retval;
   }
 
   octave_user_code *
   call_stack::caller_user_code (size_t nskip) const
   {
     octave_user_code *retval = nullptr;
 
-    // FIXME: use cend and auto decl here when available.
-    const_iterator p = cs.end ();
+    auto p = cs.cend ();
 
-    while (p != cs.begin ())
+    while (p != cs.cbegin ())
       {
         const stack_frame& elt = *(--p);
 
         octave_function *f = elt.m_fcn;
 
         if (f && f->is_user_code ())
           {
             if (nskip > 0)
@@ -190,20 +188,19 @@ namespace octave
     return retval;
   }
 
   int
   call_stack::caller_user_code_line (void) const
   {
     int retval = -1;
 
-    // FIXME: use cend and auto decl here when available.
-    const_iterator p = cs.end ();
+    auto p = cs.cend ();
 
-    while (p != cs.begin ())
+    while (p != cs.cbegin ())
       {
         const stack_frame& elt = *(--p);
 
         octave_function *f = elt.m_fcn;
 
         if (f && f->is_user_code ())
           {
             if (elt.m_line > 0)
@@ -217,20 +214,19 @@ namespace octave
     return retval;
   }
 
   int
   call_stack::caller_user_code_column (void) const
   {
     int retval = -1;
 
-    // FIXME: use cend and auto decl here when available.
-    const_iterator p = cs.end ();
+    auto p = cs.cend ();
 
-    while (p != cs.begin ())
+    while (p != cs.cbegin ())
       {
         const stack_frame& elt = *(--p);
 
         octave_function *f = elt.m_fcn;
 
         if (f && f->is_user_code ())
           {
             if (elt.m_column)
@@ -334,20 +330,19 @@ namespace octave
     return retval;
   }
 
   bool
   call_stack::all_scripts (void) const
   {
     bool retval = true;
 
-    // FIXME: use cend and auto decl here when available.
-    const_iterator p = cs.end ();
+    auto p = cs.cend ();
 
-    while (p != cs.begin ())
+    while (p != cs.cbegin ())
       {
         const stack_frame& elt = *(--p);
 
         octave_function *f = elt.m_fcn;
 
         if (f && ! f->is_user_script ())
           {
             retval = false;
@@ -550,18 +545,17 @@ namespace octave
 
     size_t nframes = (nskip <= user_code_frames ? user_code_frames - nskip : 0);
 
     // Our list is reversed.
     curr_user_frame = nframes - curr_user_frame - 1;
 
     if (nframes > 0)
       {
-        // FIXME: use crbegin and auto decl here when available.
-        for (const_reverse_iterator p = cs.rbegin (); p != cs.rend (); p++)
+        for (auto p = cs.crbegin (); p != cs.crend (); p++)
           {
             const stack_frame& elt = *p;
 
             octave_function *f = elt.m_fcn;
 
             if (f && f->is_user_code ())
               {
                 if (nskip > 0)
diff --git a/libinterp/corefcn/gtk-manager.cc b/libinterp/corefcn/gtk-manager.cc
--- a/libinterp/corefcn/gtk-manager.cc
+++ b/libinterp/corefcn/gtk-manager.cc
@@ -84,27 +84,26 @@ namespace octave
     available_toolkits.erase (name);
 
     if (dtk == name)
       {
         if (available_toolkits.empty ())
           dtk.clear ();
         else
           {
-            // FIXME: use cbegin and auto decl here when available.
-            const_available_toolkits_iterator pa = available_toolkits.begin ();
+            auto pa = available_toolkits.cbegin ();
 
             dtk = *pa++;
 
-            while (pa != available_toolkits.end ())
+            while (pa != available_toolkits.cend ())
               {
                 std::string tk_name = *pa++;
 
                 if (tk_name == "qt"
                     || (tk_name == "fltk"
                         && (available_toolkits.find ("qt")
-                            == available_toolkits.end ())))
+                            == available_toolkits.cend ())))
                   dtk = tk_name;
               }
           }
       }
   }
 }
diff --git a/libinterp/corefcn/load-path.cc b/libinterp/corefcn/load-path.cc
--- a/libinterp/corefcn/load-path.cc
+++ b/libinterp/corefcn/load-path.cc
@@ -847,20 +847,19 @@ namespace octave
 
   // FIXME: maybe we should also maintain a map to speed up this method of access.
 
   load_path::const_dir_info_list_iterator
   load_path::find_dir_info (const std::string& dir_arg) const
   {
     std::string dir = sys::file_ops::tilde_expand (dir_arg);
 
-    // FIXME: use cbegin and auto decl here when available.
-    const_dir_info_list_iterator retval = dir_info_list.begin ();
-
-    while (retval != dir_info_list.end ())
+    auto retval = dir_info_list.cbegin ();
+
+    while (retval != dir_info_list.cend ())
       {
         if (retval->dir_name == dir)
           break;
 
         retval++;
       }
 
     return retval;
diff --git a/libinterp/corefcn/oct-map.cc b/libinterp/corefcn/oct-map.cc
--- a/libinterp/corefcn/oct-map.cc
+++ b/libinterp/corefcn/oct-map.cc
@@ -1317,23 +1317,21 @@ octave_map::delete_elements (const octav
 %! assert (fieldnames (x([1, 2], [2:5])), {"d"; "a"; "f"});
 */
 
 octave_map
 octave_map::concat (const octave_map& rb, const Array<octave_idx_type>& ra_idx)
 {
   if (nfields () == rb.nfields ())
     {
-      // FIXME: use cbegin and auto decl here when available.
-      for (const_iterator pa = begin (); pa != end (); pa++)
+      for (auto pa = cbegin (); pa != cend (); pa++)
         {
-          // FIXME: use cbegin and auto decl here when available.
-          const_iterator pb = rb.seek (key (pa));
+          auto pb = rb.seek (key (pa));
 
-          if (pb == rb.end ())
+          if (pb == rb.cend ())
             error ("field name mismatch in structure concatenation");
 
           contents(pa).insert (rb.contents (pb), ra_idx);
         }
     }
   else
     {
       dim_vector dv = dims ();
diff --git a/libinterp/corefcn/oct-map.h b/libinterp/corefcn/oct-map.h
--- a/libinterp/corefcn/oct-map.h
+++ b/libinterp/corefcn/oct-map.h
@@ -98,16 +98,19 @@ public:
   // constant iteration support. non-const iteration intentionally unsupported.
 
   typedef std::map<std::string, octave_idx_type>::const_iterator const_iterator;
   typedef const_iterator iterator;
 
   const_iterator begin (void) const { return rep->begin (); }
   const_iterator end (void) const { return rep->end (); }
 
+  const_iterator cbegin (void) const { return rep->cbegin (); }
+  const_iterator cend (void) const { return rep->cend (); }
+
   std::string key (const_iterator p) const { return p->first; }
   octave_idx_type index (const_iterator p) const { return p->second; }
 
   const_iterator seek (const std::string& k) const
   { return rep->find (k); }
 
   // high-level methods.
 
@@ -179,16 +182,19 @@ public:
   // note that both const and non-const iterators are the same.
   // The const/non-const distinction is made by the key & contents method.
   typedef octave_fields::const_iterator const_iterator;
   typedef const_iterator iterator;
 
   const_iterator begin (void) const { return xkeys.begin (); }
   const_iterator end (void) const { return xkeys.end (); }
 
+  const_iterator cbegin (void) const { return xkeys.cbegin (); }
+  const_iterator cend (void) const { return xkeys.cend (); }
+
   const_iterator seek (const std::string& k) const { return xkeys.seek (k); }
 
   std::string key (const_iterator p) const
   { return xkeys.key (p); }
   octave_idx_type index (const_iterator p) const
   { return xkeys.index (p); }
 
   const octave_value& contents (const_iterator p) const
@@ -302,16 +308,19 @@ public:
   // note that both const and non-const iterators are the same.
   // The const/non-const distinction is made by the key & contents method.
   typedef octave_fields::const_iterator const_iterator;
   typedef const_iterator iterator;
 
   const_iterator begin (void) const { return xkeys.begin (); }
   const_iterator end (void) const { return xkeys.end (); }
 
+  const_iterator cbegin (void) const { return xkeys.cbegin (); }
+  const_iterator cend (void) const { return xkeys.cend (); }
+
   const_iterator seek (const std::string& k) const { return xkeys.seek (k); }
 
   std::string key (const_iterator p) const
   { return xkeys.key (p); }
   octave_idx_type index (const_iterator p) const
   { return xkeys.index (p); }
 
   const Cell& contents (const_iterator p) const
diff --git a/libinterp/corefcn/oct-stream.cc b/libinterp/corefcn/oct-stream.cc
--- a/libinterp/corefcn/oct-stream.cc
+++ b/libinterp/corefcn/oct-stream.cc
@@ -6307,19 +6307,17 @@ namespace octave
     typedef typename DST_T::element_type dst_elt_type;
 
     DST_T conv (dim_vector (nr, nc));
 
     dst_elt_type *conv_data = conv.fortran_vec ();
 
     octave_idx_type j = 0;
 
-    // FIXME: use cbegin and auto decl here when available.
-    for (std::list<void *>::const_iterator it = input_buf_list.begin ();
-         it != input_buf_list.end (); it++)
+    for (auto it = input_buf_list.cbegin (); it != input_buf_list.cend (); it++)
       {
         SRC_T *data = static_cast<SRC_T *> (*it);
 
         if (swap || do_float_fmt_conv)
           {
             if (do_NA_conv)
               {
                 for (octave_idx_type i = 0; i < input_buf_elts && j < elts_read;
diff --git a/libinterp/corefcn/variables.cc b/libinterp/corefcn/variables.cc
--- a/libinterp/corefcn/variables.cc
+++ b/libinterp/corefcn/variables.cc
@@ -1325,18 +1325,17 @@ public:
     Cell bytes_info (len, 1);
     Cell class_info (len, 1);
     Cell global_info (len, 1);
     Cell sparse_info (len, 1);
     Cell complex_info (len, 1);
     Cell nesting_info (len, 1);
     Cell persistent_info (len, 1);
 
-    // FIXME: use cbegin and auto decl here when available.
-    std::list<symbol_info>::const_iterator p = lst.begin ();
+    auto p = lst.cbegin ();
 
     for (size_t j = 0; j < len; j++)
       {
         const symbol_info& si = *p++;
 
         octave_scalar_map ni;
 
         ni.assign ("function", caller_function_name);
diff --git a/libinterp/octave-value/ov-class.cc b/libinterp/octave-value/ov-class.cc
--- a/libinterp/octave-value/ov-class.cc
+++ b/libinterp/octave-value/ov-class.cc
@@ -841,18 +841,17 @@ octave_class::index_vector (bool require
 
 size_t
 octave_class::byte_size (void) const
 {
   // Neglect the size of the fieldnames.
 
   size_t retval = 0;
 
-  // FIXME: use cbegin and auto decl here when available.
-  for (octave_map::const_iterator it = map.begin (); it != map.end (); it++)
+  for (auto it = map.cbegin (); it != map.cend (); it++)
     {
       std::string key = map.key (it);
 
       octave_value val = octave_value (map.contents (it));
 
       retval += val.byte_size ();
     }
 
@@ -1120,18 +1119,17 @@ octave_class::clear_exemplar_map (void)
 bool
 octave_class::reconstruct_parents (void)
 {
   bool retval = true;
   bool might_have_inheritance = false;
   std::string dbgstr = "dork";
 
   // First, check to see if there might be an issue with inheritance.
-  // FIXME: use cbegin and auto decl here when available.
-  for (octave_map::const_iterator it = map.begin (); it != map.end (); it++)
+  for (auto it = map.cbegin (); it != map.cend (); it++)
     {
       std::string key = map.key (it);
       Cell        val = map.contents (it);
       if (val(0).isobject ())
         {
           dbgstr = "blork";
           if (key == val(0).class_name ())
             {
diff --git a/libinterp/octave-value/ov-fcn-handle.cc b/libinterp/octave-value/ov-fcn-handle.cc
--- a/libinterp/octave-value/ov-fcn-handle.cc
+++ b/libinterp/octave-value/ov-fcn-handle.cc
@@ -235,20 +235,19 @@ octave_fcn_handle::is_equal_to (const oc
   bool retval = fcn.is_copy_of (h.fcn) && (has_overloads == h.has_overloads);
   retval = retval && (overloads.size () == h.overloads.size ());
 
   if (retval && has_overloads)
     {
       for (int i = 0; i < btyp_num_types && retval; i++)
         retval = builtin_overloads[i].is_copy_of (h.builtin_overloads[i]);
 
-      // FIXME: use cbegin and auto decl here when available.
-      str_ov_map::const_iterator iter = overloads.begin ();
-      str_ov_map::const_iterator hiter = h.overloads.begin ();
-      for (; iter != overloads.end () && retval; iter++, hiter++)
+      auto iter = overloads.cbegin ();
+      auto hiter = h.overloads.cbegin ();
+      for (; iter != overloads.cend () && retval; iter++, hiter++)
         retval = (iter->first == hiter->first)
                  && (iter->second.is_copy_of (hiter->second));
     }
 
   return retval;
 }
 
 bool
diff --git a/libinterp/octave-value/ov-struct.cc b/libinterp/octave-value/ov-struct.cc
--- a/libinterp/octave-value/ov-struct.cc
+++ b/libinterp/octave-value/ov-struct.cc
@@ -545,18 +545,17 @@ octave_struct::do_index_op (const octave
 
 size_t
 octave_struct::byte_size (void) const
 {
   // Neglect the size of the fieldnames.
 
   size_t retval = 0;
 
-  // FIXME: use cbegin and auto decl here when available.
-  for (octave_map::const_iterator p = map.begin (); p != map.end (); p++)
+  for (auto p = map.cbegin (); p != map.cend (); p++)
     {
       std::string key = map.key (p);
 
       octave_value val = octave_value (map.contents (p));
 
       retval += val.byte_size ();
     }
 
@@ -1260,18 +1259,17 @@ octave_scalar_struct::do_index_op (const
 
 size_t
 octave_scalar_struct::byte_size (void) const
 {
   // Neglect the size of the fieldnames.
 
   size_t retval = 0;
 
-  // FIXME: use cbegin and auto decl here when available.
-  for (octave_map::const_iterator p = map.begin (); p != map.end (); p++)
+  for (auto p = map.cbegin (); p != map.cend (); p++)
     {
       std::string key = map.key (p);
 
       octave_value val = octave_value (map.contents (p));
 
       retval += val.byte_size ();
     }
 
diff --git a/libinterp/parse-tree/bp-table.cc b/libinterp/parse-tree/bp-table.cc
--- a/libinterp/parse-tree/bp-table.cc
+++ b/libinterp/parse-tree/bp-table.cc
@@ -724,19 +724,18 @@ namespace octave
 
     return retval;
   }
 
   void bp_table::remove_all_breakpoints (void)
   {
     // Odd loop structure required because delete will invalidate
     // m_bp_set iterators.
-    // FIXME: use cbegin and auto decl here when available.
-    for (const_bp_set_iterator it = m_bp_set.begin (), it_next = it;
-         it != m_bp_set.end ();
+    for (auto it = m_bp_set.cbegin (), it_next = it;
+         it != m_bp_set.cend ();
          it = it_next)
       {
         ++it_next;
         remove_all_breakpoints_in_file (*it);
       }
 
     tree_evaluator::debug_mode = bp_table::have_breakpoints () || Vdebugging;
   }
diff --git a/libinterp/parse-tree/jit-typeinfo.cc b/libinterp/parse-tree/jit-typeinfo.cc
--- a/libinterp/parse-tree/jit-typeinfo.cc
+++ b/libinterp/parse-tree/jit-typeinfo.cc
@@ -581,19 +581,17 @@ namespace octave
         rtype = m_result->packed_type (m_call_conv);
         if (sret ())
           {
             llvm_args.push_back (rtype->getPointerTo ());
             rtype = llvm::Type::getVoidTy (context);
           }
       }
 
-    // FIXME: use cbegin and auto decl here when available.
-    for (std::vector<jit_type *>::const_iterator iter = m_args.begin ();
-         iter != m_args.end (); ++iter)
+    for (auto iter = m_args.cbegin (); iter != m_args.cend (); ++iter)
       {
         jit_type *ty = *iter;
         assert (ty);
         llvm::Type *argty = ty->packed_type (m_call_conv);
         if (ty->pointer_arg (m_call_conv))
           argty = argty->getPointerTo ();
 
         llvm_args.push_back (argty);
diff --git a/libinterp/parse-tree/pt-jit.cc b/libinterp/parse-tree/pt-jit.cc
--- a/libinterp/parse-tree/pt-jit.cc
+++ b/libinterp/parse-tree/pt-jit.cc
@@ -1750,20 +1750,17 @@ namespace octave
   jit_infer::construct_ssa (void)
   {
     m_blocks.label ();
     final_block ().compute_idom (entry_block ());
     entry_block ().compute_df ();
     entry_block ().create_dom_tree ();
 
     // insert phi nodes where needed, this is done on a per variable basis
-    // FIXME: use cbegin and auto decl here when available.
-    for (variable_map::const_iterator iter = m_vmap.begin ();
-         iter != m_vmap.end ();
-         ++iter)
+    for (auto iter = m_vmap.cbegin (); iter != m_vmap.cend (); ++iter)
       {
         jit_block::df_set visited, added_phi;
         std::list<jit_block *> ssa_worklist;
         iter->second->use_blocks (visited);
         ssa_worklist.insert (ssa_worklist.begin (), visited.begin (),
                              visited.end ());
 
         while (ssa_worklist.size ())
@@ -1988,20 +1985,17 @@ namespace octave
     if (! temp.size () || ! isa<jit_error_check> (ablock.terminator ()))
       return;
 
     // FIXME: If we support try/catch or unwind_protect final_block
     //        may not be the destination
     jit_block *split = ablock.maybe_split (m_factory, m_blocks,
                                            final_block ());
     jit_terminator *term = split->terminator ();
-    // FIXME: use cbegin and auto decl here when available.
-    for (std::set<jit_value *>::const_iterator iter = temp.begin ();
-         iter != temp.end ();
-         ++iter)
+    for (auto iter = temp.cbegin (); iter != temp.cend (); ++iter)
       {
         jit_value *value = *iter;
         jit_call *release
           = m_factory.create<jit_call> (&jit_typeinfo::release, value);
         split->insert_before (term, release);
         release->infer ();
       }
   }
