# HG changeset patch
# User jwe
# Date 846800668 0
#      Thu Oct 31 22:24:28 1996 +0000
# Node ID 9c16c6c80e31dcdec6b281bebbbab1f5d7deb456
# Parent  a28ed603c65ccbb0cfbaf47161f6412ce944846e
[project @ 1996-10-31 22:22:52 by jwe]

diff --git a/ChangeLog b/ChangeLog
--- a/ChangeLog
+++ b/ChangeLog
@@ -1,11 +1,13 @@
 Thu Oct 31 13:50:06 1996  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* octMakefile.in (DISTFILES): Add NEWS.[0-9].
+	* NEWS.1: Old news.
+	* NEWS: Just keep news since last major release.
 
 Wed Oct 30 01:04:13 1996  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* Version 1.90.
 
 	* configure.in: Default is now no internal bounds checking.
 
 	* Makefile.in (all): Fix message to say 2.7.2, not 2.7.0.
diff --git a/emacs/octave.el b/emacs/octave.el
--- a/emacs/octave.el
+++ b/emacs/octave.el
@@ -1,16 +1,16 @@
 ;; octave.el --- Octave mode for GNU Emacs
 
 ;;; Copyright (C) 1996 Free Software Foundation, Inc.
 
 ;; Author: Kurt Hornik <Kurt.Hornik@ci.tuwien.ac.at>
 ;; Author: John Eaton <jwe@bevo.che.wisc.edu>
 ;; Maintainer: Kurt Hornik <Kurt.Hornik@ci.tuwien.ac.at>
-;; Version: 0.8
+;; Version: 0.8.4
 ;; Keywords: languages
 
 ;; This file is not yet a part of GNU Emacs.  It is part of Octave.
 
 ;; Octave is free software; you can redistribute it and/or modify
 ;; it under the terms of the GNU General Public License as published by
 ;; the Free Software Foundation; either version 2, or (at your option)
 ;; any later version.
@@ -29,97 +29,103 @@
 
 ;; This package provides a major mode for editing Octave code.  It knows
 ;; about Octave syntax and comments.  It also provides a major mode for
 ;; interacting with an inferior Octave process using comint, both
 ;; directly and by sending parts of a file with Octave code.
 
 ;;; Code:
 
-(defconst octave-version "0.8")
+(defconst octave-version "0.8.4")
 (defconst octave-help-address
   "Kurt.Hornik@ci.tuwien.ac.at"
   "Address for Octave mode bug reports")
 
 
 (defvar octave-mode-map nil
   "Keymap used in Octave mode.")
 (if octave-mode-map
     ()
-  (setq octave-mode-map (make-sparse-keymap))
-  (define-key octave-mode-map "`" 'octave-abbrev-start)
-  (define-key octave-mode-map ";" 'octave-electric-semi)
-  (define-key octave-mode-map " " 'octave-electric-space)
-  (define-key octave-mode-map "\n" 'octave-reindent-then-newline-and-indent)
-  (define-key octave-mode-map "\t" 'indent-according-to-mode)
-  (define-key octave-mode-map "\e\n" 'octave-split-line)  
-  (define-key octave-mode-map "\e\t" 'octave-complete-symbol)
-  (define-key octave-mode-map "\M-\C-a"	'octave-beginning-of-defun)
-  (define-key octave-mode-map "\M-\C-e" 'octave-end-of-defun)
-  (define-key octave-mode-map "\M-\C-h" 'octave-mark-defun)
-  (define-key octave-mode-map "\M-\C-q" 'octave-indent-defun)  
-  (define-key octave-mode-map "\C-c;" 'octave-comment-region)
-  (define-key octave-mode-map "\C-c:" 'octave-uncomment-region)  
-  (define-key octave-mode-map "\C-c\C-b" 'octave-submit-bug-report)
-  (define-key octave-mode-map "\C-c\C-p" 'octave-previous-code-line)
-  (define-key octave-mode-map "\C-c\C-n" 'octave-next-code-line)
-  (define-key octave-mode-map "\C-c\C-a" 'octave-beginning-of-line)
-  (define-key octave-mode-map "\C-c\C-e" 'octave-end-of-line)  
-  (define-key octave-mode-map "\C-c\M-\C-n" 'octave-forward-block)
-  (define-key octave-mode-map "\C-c\M-\C-p" 'octave-backward-block)
-  (define-key octave-mode-map "\C-c\M-\C-u" 'octave-backward-up-block)
-  (define-key octave-mode-map "\C-c\M-\C-d" 'octave-down-block)
-  (define-key octave-mode-map "\C-c\M-\C-h" 'octave-mark-block)
-  (define-key octave-mode-map "\C-c]" 'octave-close-block)
-  (define-key octave-mode-map "\C-c\C-h" 'octave-help)
-  (define-key octave-mode-map "\C-cil" 'octave-send-line)
-  (define-key octave-mode-map "\C-cib" 'octave-send-block)
-  (define-key octave-mode-map "\C-cif" 'octave-send-defun)
-  (define-key octave-mode-map "\C-cir" 'octave-send-region)  
-  (define-key octave-mode-map "\C-cis" 'octave-show-process-buffer)
-  (define-key octave-mode-map "\C-cih" 'octave-hide-process-buffer)
-  (define-key octave-mode-map "\C-cik" 'octave-kill-process))
+  (let ((map (make-sparse-keymap)))
+    (define-key map "`" 'octave-abbrev-start)
+    (define-key map ";" 'octave-electric-semi)
+    (define-key map " " 'octave-electric-space)
+    (define-key map "\n" 'octave-reindent-then-newline-and-indent)
+    (define-key map "\t" 'indent-according-to-mode)
+    (define-key map "\e\n" 'octave-indent-new-comment-line)  
+    (define-key map "\e\t" 'octave-complete-symbol)
+    (define-key map "\M-\C-a"	'octave-beginning-of-defun)
+    (define-key map "\M-\C-e" 'octave-end-of-defun)
+    (define-key map "\M-\C-h" 'octave-mark-defun)
+    (define-key map "\M-\C-q" 'octave-indent-defun)  
+    (define-key map "\C-c;" 'octave-comment-region)
+    (define-key map "\C-c:" 'octave-uncomment-region)  
+    (define-key map "\C-c\C-b" 'octave-submit-bug-report)
+    (define-key map "\C-c\C-p" 'octave-previous-code-line)
+    (define-key map "\C-c\C-n" 'octave-next-code-line)
+    (define-key map "\C-c\C-a" 'octave-beginning-of-line)
+    (define-key map "\C-c\C-e" 'octave-end-of-line)  
+    (define-key map "\C-c\M-\C-n" 'octave-forward-block)
+    (define-key map "\C-c\M-\C-p" 'octave-backward-block)
+    (define-key map "\C-c\M-\C-u" 'octave-backward-up-block)
+    (define-key map "\C-c\M-\C-d" 'octave-down-block)
+    (define-key map "\C-c\M-\C-h" 'octave-mark-block)
+    (define-key map "\C-c]" 'octave-close-block)
+    (define-key map "\C-cf" 'octave-insert-defun)
+    (define-key map "\C-c\C-h" 'octave-help)
+    (define-key map "\C-cil" 'octave-send-line)
+    (define-key map "\C-cib" 'octave-send-block)
+    (define-key map "\C-cif" 'octave-send-defun)
+    (define-key map "\C-cir" 'octave-send-region)  
+    (define-key map "\C-cis" 'octave-show-process-buffer)
+    (define-key map "\C-cih" 'octave-hide-process-buffer)
+    (define-key map "\C-cik" 'octave-kill-process)
+    (setq octave-mode-map map)))
 
 (defvar octave-mode-menu
   (list "Octave"
-	["Previous Code Line"		octave-previous-code-line t]
-	["Next Code Line"		octave-next-code-line t]
-	["Begin of Continuation"	octave-beginning-of-line t]
-	["End of Continuation"		octave-end-of-line t]	
-	"-"
-	["Next Block"			octave-forward-block t]
-	["Previous Block"		octave-backward-block t]
-	["Down Block"			octave-down-block t]
-	["Up Block"			octave-backward-up-block t]
-	["Mark Block"			octave-mark-block t]
-	["Close Block"			octave-close-block t]	
-	"-"
-	["Begin of Subprogram"		octave-beginning-of-defun t]
-	["End of Subprogram"		octave-end-of-defun t]
-	["Mark Subprogram"		octave-mark-defun t]
-	["Indent Subprogram"		octave-indent-defun t]
-	"-"
-	["Indent Line"			indent-according-to-mode t]
-	["Complete Symbol"		octave-complete-symbol t]
+	(list "Lines"
+	      ["Previous Code Line"	octave-previous-code-line t]
+	      ["Next Code Line"		octave-next-code-line t]
+	      ["Begin of Continuation"	octave-beginning-of-line t]
+	      ["End of Continuation"	octave-end-of-line t]
+	      ["Split Line at Point"	octave-indent-new-comment-line t])
+	(list "Blocks"
+	      ["Next Block"		octave-forward-block t]
+	      ["Previous Block"		octave-backward-block t]
+	      ["Down Block"		octave-down-block t]
+	      ["Up Block"		octave-backward-up-block t]
+	      ["Mark Block"		octave-mark-block t]
+	      ["Close Block"		octave-close-block t])
+	(list "Functions"
+	      ["Begin of Function"	octave-beginning-of-defun t]
+	      ["End of Function"	octave-end-of-defun t]
+	      ["Mark Function"		octave-mark-defun t]
+	      ["Indent Function"	octave-indent-defun t]
+	      ["Insert Function"	octave-insert-defun t])
+	
 	"-"
 	(list "Debug"
 	      ["Send Current Line"	octave-send-line t]
 	      ["Send Current Block"	octave-send-block t]
 	      ["Send Current Function"	octave-send-defun t]
 	      ["Send Region"		octave-send-region t]
 	      ["Show Process Buffer"	octave-show-process-buffer t]
 	      ["Hide Process Buffer"	octave-hide-process-buffer t]
 	      ["Kill Process"		octave-kill-process t])
 	"-"
+	["Indent Line"			indent-according-to-mode t]
+	["Complete Symbol"		octave-complete-symbol t]
+	"-"
 	["Toggle Abbrev Mode"		abbrev-mode t]
 	["Toggle Auto-Fill Mode"	auto-fill-mode t]
 	"-"
 	["Submit Bug Report"		octave-submit-bug-report t]
 	"-"
-	["Describe Octave Mode"		describe-mode t]
+	["Describe Octave Mode"		octave-describe-major-mode t]
 	["Lookup Octave Index"		octave-help t])
   "Menu for Octave mode.")
 
 (defvar octave-mode-abbrev-table nil
   "Abbrev table in use in Octave mode buffers.")
 (if octave-mode-abbrev-table
     ()
   (let ((ac abbrevs-changed))
@@ -169,18 +175,21 @@
   (modify-syntax-entry ?& "."   octave-mode-syntax-table)
   (modify-syntax-entry ?| "."   octave-mode-syntax-table)
   (modify-syntax-entry ?! "."   octave-mode-syntax-table)
   (modify-syntax-entry ?\\ "\\" octave-mode-syntax-table)
   (modify-syntax-entry ?\' "."  octave-mode-syntax-table)
   (modify-syntax-entry ?\` "w"  octave-mode-syntax-table)
   (modify-syntax-entry ?\" "\"" octave-mode-syntax-table)
   (modify-syntax-entry ?. "w"   octave-mode-syntax-table)
+  ;; Not sure if we should do this ...
   (modify-syntax-entry ?_ "w"   octave-mode-syntax-table)
-  (modify-syntax-entry ?\% "<"  octave-mode-syntax-table)
+  ;; Don't deal with `%' comments ...
+  ;; (modify-syntax-entry ?\% "<"  octave-mode-syntax-table)
+  (modify-syntax-entry ?\% "."  octave-mode-syntax-table)  
   (modify-syntax-entry ?\# "<"  octave-mode-syntax-table)
   (modify-syntax-entry ?\n ">"  octave-mode-syntax-table))
 
 (defvar octave-comment-start "# "
   "*String to insert to start a new comment.")
 (defvar octave-comment-column 32
   "*Column to indent in-line comments to.")
 (defvar octave-comment-start-skip "\\s<+\\s-*"
@@ -224,16 +233,22 @@ newline or `;' after an else or end keyw
     ("if" . ("else" "elseif" "end" "endif"))
     ("try" . ("catch" "end" "end_try_catch"))
     ("unwind_protect" . ("unwind_protect_cleanup" "end"
 			 "end_unwind_protect"))
     ("while" . ("end" "endwhile")))
   "Alist with Octave's begin keywords as keys and a list of the matchin
 else or end keywords as associated values.")
 
+(defvar octave-function-header-regexp
+  (concat "^\\s-*\\<\\(function\\)\\>"
+	  "\\([^=;\n]*=[ \t]*\\|[ \t]*\\)\\(\\w+\\)\\>")
+  "Regexp to match a function header.  The string `function' and its
+name are given by the first and third parenthetical grouping.")
+
 (defvar octave-continuation-offset 4
   "*Extra indentation applied to Octave continuation lines.")  
 (defvar octave-continuation-regexp
   "[^#%\n]*\\(\\\\\\|\\.\\.\\.\\)\\s-*\\(\\s<.*\\)?$")
 (defvar octave-continuation-string "\\"
   "*Character string used for Octave continuation lines.  Normally \\.")
 
 (defvar octave-reserved-words
@@ -301,29 +316,25 @@ are the same symbol.")
    (cons "\\(&\\||\\|<=\\|>=\\|==\\|<\\|>\\|!=\\|!\\)"
 	 'font-lock-reference-face)
    ;; Fontify all builtin variables.
    (cons (concat "\\<\\("
 		 (mapconcat 'identity octave-variables "\\|")
 		 "\\)\\>")
 	 'font-lock-variable-name-face)
    ;; Fontify all function declarations.
-   (list (concat "^\\s-*\\<\\(function\\)\\>"
-		 "\\([^=;\n]*=[ \t]*\\|[ \t]*\\)\\(\\w+\\)\\>")	 
+   (list octave-function-header-regexp
 	 '(1 font-lock-keyword-face)
 	 '(3 font-lock-function-name-face nil t)))
   "Additional expressions to highlight in Octave mode.")
 
 (defvar octave-imenu-generic-expression
   (list
    ;; Functions
-   (list nil
-	 (concat "^\\s-*\\<\\(function\\)\\>"
-		 "\\([^=;\n]*=[ \t]*\\|[ \t]*\\)\\(\\w+\\)\\>")
-	 3))
+   (list nil octave-function-header-regexp 3))
   "Imenu expression for Octave mode.  See `imenu-generic-expression'.")
 
 (defvar octave-help-files
   '("octave")
   "List of info files with documentation for Octave.
 Default is '(\"octave\").")
 
 (defvar octave-help-lookup-alist nil
@@ -362,17 +373,17 @@ computations.  It provides a convenient 
 solving linear and nonlinear problems numerically.  Function definitions
 can also be stored in files, and it can be used in a batch mode (which
 is why you need this mode!).
 
 The latest released version of Octave is always available via anonymous
 ftp from bevo.che.wisc.edu in the directory /pub/octave.  Complete
 source and binaries for several popular systems are available.
 
-Type `? or `\\[help-command] to display a list of built-in abbrevs for
+Type `? or `\\[help-command] to display a list of built-in abbrevs for \
 Octave keywords.
 
 Keybindings
 ===========
 
 \\{octave-mode-map}
 
 Variables you can use to customize Octave mode
@@ -395,30 +406,41 @@ octave-comment-column
 
 octave-comment-start
   String to insert to start a new comment.  Default is \"# \".
 
 octave-continuation-offset
   Extra indentation applied to Octave continuation lines.  Default is 4.
 
 octave-continuation-string
-  String used for Octave continuation lines.  Normally \"\\\".
+  String used for Octave continuation lines.  Default is a backslash.
 
 octave-fill-column
   Column beyond which automatic line-wrapping should happen.  Default is
   72.
 
 octave-help-files
   List of info files with documentation for Octave.
   Default is '(\"octave\").
 
 octave-inhibit-startup-message
   If t, no startup message is displayed when Octave mode is called.
   Default is nil.
 
+octave-send-echo-input
+  Non-nil means always display inferior-octave-buffer after sending a
+  command.
+
+octave-send-line-auto-forward
+  Non-nil means always go to the next unsent line of Octave code after
+  sending a line to the inferior process.
+
+octave-send-echo-input
+  Non-nil means echo input sent to the inferior Octave process.
+
 Turning on Octave mode runs the hook `octave-mode-hook'.
 
 To begin using this mode for all .m files that you edit, add the
 following lines to your .emacs file:
 
   (autoload 'octave-mode \"octave\" nil t)
   (setq auto-mode-alist
         (cons '(\"\\\\.m$\" . octave-mode) auto-mode-alist))
@@ -428,21 +450,21 @@ add the following lines to your .emacs f
 
   (add-hook 'octave-mode-hook
 	    (lambda ()
 	      (abbrev-mode 1)
 	      (auto-fill-mode 1)
 	      (if (eq window-system 'x)
 		  (font-lock-mode 1))))
 
-To submit a problem report, enter `\\[octave-submit-bug-report]' from an
-Octave mode buffer.  This automatically sets up a mail buffer with
-version information already added.  You just need to add a description
-of the problem, including a reproducible test case and send the
-message."
+To submit a problem report, enter `\\[octave-submit-bug-report]' from \
+an Octave mode buffer.
+This automatically sets up a mail buffer with version information
+already added.  You just need to add a description of the problem,
+including a reproducible test case and send the message."
   (interactive)
   (kill-all-local-variables)
 
   (use-local-map octave-mode-map)  
   (setq major-mode 'octave-mode)
   (setq mode-name "Octave")
   (setq local-abbrev-table octave-mode-abbrev-table)  
   (set-syntax-table octave-mode-syntax-table)
@@ -453,16 +475,18 @@ message."
   (make-local-variable 'comment-start)  
   (setq comment-start octave-comment-start)
   (make-local-variable 'comment-end)
   (setq comment-end "")
   (make-local-variable 'comment-column)
   (setq comment-column octave-comment-column)    
   (make-local-variable 'comment-start-skip)
   (setq comment-start-skip octave-comment-start-skip)
+  (make-local-variable 'comment-indent-function)
+  (setq comment-indent-function 'octave-comment-indent)
 
   (make-local-variable 'parse-sexp-ignore-comments)
   (setq parse-sexp-ignore-comments t)
   (make-local-variable 'paragraph-start)
   (setq paragraph-start (concat "\\s-*$\\|" page-delimiter))
   (make-local-variable 'paragraph-separate)
   (setq paragraph-separate paragraph-start)
   (make-local-variable 'paragraph-ignore-fill-prefix)
@@ -559,44 +583,27 @@ Any other key combination is executed no
         (list-abbrevs)
       (setq unread-command-events (list c)))))
 
 
 ;;; Comments
 (defun octave-comment-region (beg end &optional arg)
   "Comment or uncomment each line in the region.  See `comment-region'."
   (interactive "r\nP")
-  (let ((comment-start (substring octave-comment-start 0 -1)))
+  (let ((comment-start (substring octave-comment-start 0 1)))
     (comment-region beg end arg)))
   
 (defun octave-uncomment-region (beg end &optional arg)
   "Uncomment each line in the region."
   (interactive "r\nP")
   (or arg (setq arg 1))
   (octave-comment-region beg end (- arg)))
 
 
 ;;; Indentation
-(defun octave-indent-line (&optional arg)
-  "Indent current line as Octave code.
-With optional ARG, use this as offset unless this line is a comment with
-fixed goal column."
-  (interactive)
-  (or arg (setq arg 0))
-  (let ((icol (calculate-octave-indent))
-	(relpos (- (current-column) (current-indentation))))
-    (if (listp icol)
-	(setq icol (car icol))
-      (setq icol (+ icol arg)))
-    (if (< icol 0)
-	(error "Unmatched end keyword")
-      (indent-line-to icol)
-      (if (> relpos 0)
-	  (move-to-column (+ icol relpos))))))
-
 (defun calculate-octave-indent ()
   "Return appropriate indentation for current line as Octave code.
 Returns an integer (the column to indent to) unless the line is a
 comment line with fixed goal golumn.  In that case, returns a list whose
 car is the column to indent to, and whose cdr is the current indentation
 level."
   (let ((is-continuation-line
 	 (save-excursion
@@ -644,18 +651,59 @@ level."
 	     (octave-not-in-string-or-comment-p))
 	(setq icol (- icol octave-block-offset)))
        ((looking-at "\\s<\\s<\\s<\\S<")
 	(setq icol (list 0 icol)))
        ((looking-at "\\s<\\S<")
 	(setq icol (list octave-comment-column icol)))))
     icol))
 
+(defun octave-comment-indent ()
+  (if (looking-at "\\s<\\s<\\s<")
+      0
+    (if (looking-at "\\s<\\s<")
+	(calculate-octave-indent)
+      (skip-syntax-backward "\\s-")
+      (max (if (bolp) 0 (+ (current-column)))
+	   comment-column))))
+
+(defun octave-indent-line (&optional arg)
+  "Indent current line as Octave code.
+With optional ARG, use this as offset unless this line is a comment with
+fixed goal column."
+  (interactive)
+  (or arg (setq arg 0))
+  (let ((icol (calculate-octave-indent))
+	(relpos (- (current-column) (current-indentation))))
+    (if (listp icol)
+	(setq icol (car icol))
+      (setq icol (+ icol arg)))
+    (if (< icol 0)
+	(error "Unmatched end keyword")
+      (indent-line-to icol)
+      (if (> relpos 0)
+	  (move-to-column (+ icol relpos))))))
+
+(defun octave-indent-new-comment-line ()
+  "Break line at point and indent,  continuing comment if within one and
+signalling an error if within a string.  Otherwise (if within code),
+insert `octave-continuation-string' before breaking the line."
+  (interactive)
+  (delete-horizontal-space)
+  (cond
+   ((octave-in-comment-p)
+    (indent-new-comment-line))
+   ((octave-in-string-p)
+    (error "Cannot split a code line inside a string"))
+   (t
+    (insert (concat " " octave-continuation-string))
+    (octave-reindent-then-newline-and-indent))))
+
 (defun octave-indent-defun ()
-  "Properly indents the Octave subprogram which contains point."
+  "Properly indents the Octave function which contains point."
   (interactive)
   (save-excursion
     (octave-mark-defun)
     (message "Indenting function...")
     (indent-region (point) (mark) nil))
   (message "Indenting function...done."))
 
 
@@ -1150,78 +1198,116 @@ If Abbrev mode is on, expand abbrevs fir
   "Insert `;' character and reindent the line.  Insert a newline if
 `octave-auto-newline' is non-nil."
   (interactive)
   (if (not (octave-not-in-string-or-comment-p))
       (insert ";")
     (if abbrev-mode (expand-abbrev))
     (if octave-blink-matching-block
 	(octave-blink-matching-block-open))
-    (octave-indent-line)
+    (indent-according-to-mode)    
     (insert ";")
     (if octave-auto-newline
 	(newline-and-indent))))
 
 (defun octave-electric-space ()
   "Maybe expand abbrevs and blink matching block open keywords, and
 insert a space."
   (interactive)
   (setq last-command-char ? )
   (if (not (octave-not-in-string-or-comment-p))
-      (self-insert-command 1)
+      (progn
+	(indent-according-to-mode)
+	(self-insert-command 1))
     (if abbrev-mode (expand-abbrev))
     (if octave-blink-matching-block
 	(octave-blink-matching-block-open))
-    (octave-indent-line)
+    (if (save-excursion
+	  (skip-syntax-backward "\\s-")
+	  (not (bolp)))
+	(indent-according-to-mode))
     (self-insert-command 1)))
 
-(defun octave-split-line ()
-  "Break line at point and insert continuation marker and alignment"
-  (interactive)
-  (delete-horizontal-space)
-  (cond
-   ((octave-in-comment-p)
-    (octave-reindent-then-newline-and-indent)
-    (insert octave-comment-start))
-   ((octave-in-string-p)
-    (error "Cannot split a code line inside a string"))
-   (t
-    (insert (concat " " octave-continuation-string))
-    (octave-reindent-then-newline-and-indent))))
-
+(defun octave-insert-defun (name args vals)
+  "Insert a function skeleton, prompting for the function's name,
+arguments and return values (to be entered without parens)."
+  (interactive
+   (list
+    (read-from-minibuffer "Function name: "
+			  (substring (buffer-name) 0 -2))
+    (read-from-minibuffer "Arguments: ")
+    (read-from-minibuffer "Return values: ")))
+  (let ((string (format "%s %s (%s)"
+			(cond
+			 ((string-equal vals "")
+			  vals)
+			 ((string-match "[ ,]" vals)
+			  (concat " [" vals "] ="))
+			 (t
+			  (concat " " vals " =")))
+			name
+			args))
+	(prefix (concat (substring octave-comment-start 0 1)
+			octave-comment-start)))
+    (if (not (bobp)) (newline))
+    (insert "function" string)
+    (indent-according-to-mode)
+    (newline 2)
+    (insert prefix "usage: " string)
+    (reindent-then-newline-and-indent)    
+    (insert prefix)
+    (reindent-then-newline-and-indent)    
+    (insert prefix)
+    (indent-according-to-mode)
+    (save-excursion
+      (newline 2)
+      (insert "endfunction")
+      (indent-according-to-mode))))
+	      
 
 ;;; Menu
 (defun octave-add-octave-menu ()
   "Adds the `Octave' menu to the menu bar in Octave mode."
   (require 'easymenu)  
   (easy-menu-define octave-mode-menu-map octave-mode-map
 		    "Menu keymap for Octave mode." octave-mode-menu)
   (easy-menu-add octave-mode-menu-map octave-mode-map))
 
 
 ;;; Help
 (require 'info)
 
+(defun octave-describe-major-mode ()
+  "Describe the current major mode."
+  (interactive)
+  (describe-function major-mode))
+
 (defun octave-help (key)
   "Look up KEY in the function, operator and variable indices of the
 info files with documentation for Octave.
 If KEY is not a string, prompt for it with completion."
   (interactive
    (list
     (completing-read (format "Describe Octave entity: ")
-		     (setq octave-help-completion-alist
-			   (octave-help-get-completion-alist))
+		     (octave-help-get-completion-alist)
 		     nil t)))
+  (setq octave-help-index-alternatives nil)
+  (if (get-buffer "*info*")
+      (set-buffer "*info*"))
   (if (zerop (length key))
-      ()
-    (let ((alist (copy-alist octave-help-lookup-alist))
+      (Info-find-node (car octave-help-files) "Top")
+    (let ((alist (copy-alist (octave-help-get-lookup-alist)))
 	  entry matches)
-      (while (setq entry (assoc key alist))
-	(add-to-list 'matches entry)
-	(delete entry alist))
+      (while (setq entry (car alist))
+	(if (string-match key (car entry))
+	    (add-to-list 'matches entry))
+	(setq alist (cdr alist)))
+;;      (while (setq entry (assoc key alist))
+;;	(add-to-list 'matches entry)
+;;	(delete entry alist))
       (if matches
 	  (progn
 	    (setq octave-help-index-alternatives matches
 		  Info-index-alternatives matches)
 	    (Info-index-next 0))))))
 
 ;; The following three advices are really ugly.  The problem is that
 ;; Info-index-next can only cycle through matches found in ONE info
@@ -1310,19 +1396,22 @@ documentation for Octave."
 (defvar inferior-octave-program "octave")
 
 (defvar inferior-octave-prompt "\\(^octave\\(:[0-9]+\\)?\\|^\\)>+ "
   "*Regexp to match prompts for the inferior Octave process")
 
 (defvar inferior-octave-mode-map nil)
 (if inferior-octave-mode-map
     ()
-  (setq inferior-octave-mode-map (copy-keymap comint-mode-map))
-  (define-key inferior-octave-mode-map "\t" 'inferior-octave-complete))
-
+  (let ((map (copy-keymap comint-mode-map)))
+    ;; (define-key map "\t" 'inferior-octave-complete)
+    (define-key map "\t" 'comint-dynamic-complete)
+    (define-key map "\M-?" 'comint-dynamic-list-filename-completions)
+    (setq inferior-octave-mode-map map)))
+    
 (defvar inferior-octave-receive-in-progress nil)
 (defvar inferior-octave-output-list nil)
 (defvar inferior-octave-output-string nil)
 
 (defvar inferior-octave-startup-file nil
   "*Name of a file to send the contents of to the inferior Octave process
 on startup.")
 
@@ -1332,16 +1421,22 @@ process on startup.
 For example, for suppressing the startup message and using `traditional'
 mode, set this to '(\"-q\" \"--traditional\").")
 
 (defvar inferior-octave-font-lock-keywords
   (list
    (cons inferior-octave-prompt 'font-lock-type-face))
   "Additional expressions to highlight in Inferior Octave mode.")
 
+(defvar inferior-octave-dynamic-complete-functions
+  '(inferior-octave-complete comint-dynamic-complete-filename)  
+  "List of functions called to perform completion.
+This variable is used to initialise `comint-dynamic-complete-functions'
+in the Octave interaction buffer.")
+
 (defvar inferior-octave-mode-hook nil
   "*Hook to be run when Inferior Octave mode is started.")
 
 (defun inferior-octave-mode ()
   "Major mode for interacting with an inferior Octave process.
 Runs Octave as a subprocess of Emacs, with Octave I/O through an Emacs
 buffer.
 
@@ -1362,22 +1457,25 @@ Finally. `inferior-octave-mode-hook' is 
   (use-local-map inferior-octave-mode-map)
   (make-local-variable 'font-lock-defaults)
   (make-local-variable 'inferior-octave-output-list)
   (make-local-variable 'inferior-octave-receive-in-progress)  
   (setq comint-input-ring-file-name
 	(or (getenv "OCTAVE_HISTFILE") "~/.octave_hist")
 	comint-input-ring-size
 	(or (getenv "OCTAVE_HISTSIZE") 1024)
+	comint-dynamic-complete-functions
+	inferior-octave-dynamic-complete-functions
 	font-lock-defaults
 	'(inferior-octave-font-lock-keywords nil nil)
 	inferior-octave-process
 	(get-buffer-process inferior-octave-buffer)
 	inferior-octave-output-list nil
-	inferior-octave-receive-in-progress t)
+	inferior-octave-receive-in-progress t
+	comint-input-filter-functions '(inferior-octave-directory-tracker))
   (set-process-filter inferior-octave-process
 		      'inferior-octave-slurp-output)
   (while inferior-octave-receive-in-progress
     (accept-process-output inferior-octave-process))
   (if (not (bobp))
       (insert-before-markers "\n"))
   (if inferior-octave-output-list
       (insert-before-markers
@@ -1398,62 +1496,66 @@ Finally. `inferior-octave-mode-hook' is 
   (set-process-filter inferior-octave-process
 		      'inferior-octave-output-filter)
   (run-hooks 'inferior-octave-mode-hook)
   (insert-before-markers inferior-octave-output-string)  
   (comint-read-input-ring t))
 
 ;;;###autoload
 (defun inferior-octave (&optional arg)
-  "Run an inferior Octave process, with I/O through the buffer
-specified by `inferior-octave-buffer'.  If this buffer does not exist,
-it is created in inferior-octave-mode.
+  "Run an inferior Octave process, with I/O through the buffer specified
+by `inferior-octave-buffer'.  The buffer is put in Inferior Octave mode.
+See `inferior-octave-mode'.
 
-Unless ARG is non-nil, inferior-octave-buffer is switched to.
+Unless ARG is non-nil, switches to this buffer.
 
 The elements of the list `inferior-octave-startup-args' are sent as
-command line arguments to be passed to the Octave process on startup."
+command line arguments to the Octave process on startup."
   (interactive "P")
-  (if (not (comint-check-proc inferior-octave-buffer))
-      (let* ((name (substring inferior-octave-buffer 1 -1))
-	     (program (file-name-nondirectory inferior-octave-program))
-	     (switches inferior-octave-startup-args))
-	(save-excursion
-	  (set-buffer (apply 'make-comint name program nil switches))
-	  (inferior-octave-mode))))
+  (if (comint-check-proc inferior-octave-buffer)
+      ()
+    (save-excursion
+      (set-buffer
+       (apply 'make-comint
+	      (substring inferior-octave-buffer 1 -1)
+	      (file-name-nondirectory inferior-octave-program)
+	      nil
+	      inferior-octave-startup-args))
+      (inferior-octave-mode)))
   (if (not arg)
       (pop-to-buffer inferior-octave-buffer)))
 
 ;;;###autoload
 (defalias 'run-octave 'inferior-octave)
 
 (defun inferior-octave-complete ()
   "Perform completion on the Octave command preceding point.
 This is implemented using the Octave command `completion_matches' which
 is NOT available with older versions of Octave."
   (interactive)
   (let* ((end (point))
 	 (command (save-excursion
-		    (beginning-of-line)
+		    (skip-syntax-backward "\\w\\s_")
 		    (and (looking-at comint-prompt-regexp)
 			 (goto-char (match-end 0)))
 		    (buffer-substring-no-properties (point) end)))
 	 (proc (get-buffer-process inferior-octave-buffer))
 	 (filter (process-filter proc)))
     (if (string-equal command "")
-	()
+	(message "Cannot complete an empty string")
       (setq inferior-octave-output-list nil
 	    inferior-octave-receive-in-progress t)
-      (set-process-filter proc 'inferior-octave-complete-filter)
-      (set-process-filter proc 'inferior-octave-slurp-output)      
-      (comint-send-string proc (concat "completion_matches (\"" command
-				       "\");\n"))
-      (while inferior-octave-receive-in-progress
-	(accept-process-output proc))
-      (set-process-filter proc filter)      
+      (set-process-filter proc 'inferior-octave-slurp-output)
+      (unwind-protect
+	  (progn
+	    (comint-send-string proc (concat "completion_matches (\""
+					     command "\");\n"))
+	    (while inferior-octave-receive-in-progress
+	      (accept-process-output proc)))
+	(set-process-filter proc filter))
       (and inferior-octave-output-list
 	   (string-match "^\a*error:"
 			 (car inferior-octave-output-list))
 	   (error (concat "This version of Octave does not support the "
 			  "`completion_matches' command")))
       ;; Sort the list
       (setq inferior-octave-output-list
 	    (sort inferior-octave-output-list 'string-lessp))
@@ -1462,66 +1564,101 @@ is NOT available with older versions of 
 	     (y (cdr x)))
 	(while y
 	  (if (string-equal (car x) (car y))
 	      (setcdr x (setq y (cdr y)))
 	    (setq x y
 		  y (cdr y)))))
       ;; And let comint handle the rest
       (comint-dynamic-simple-complete command
-				      inferior-octave-output-list)
-      )))
+				      inferior-octave-output-list))))
 
-(defun inferior-octave-send-list-slurp-output (list)
-  "Send the elements of LIST (which have to be strings) to the Octave
-process, passing all output to the filter inferior-octave-slurp-output."
-  (let* ((proc (get-buffer-process inferior-octave-buffer))
-	 (filter (process-filter proc))
-	 string)
-    (set-process-filter proc 'inferior-octave-slurp-output)
-    (setq inferior-octave-output-list nil)
-    (while (setq string (car list))
-      (setq inferior-octave-receive-in-progress t)
-      (comint-send-string proc string)
-      (while inferior-octave-receive-in-progress
-	(accept-process-output proc))
-      (setq list (cdr list)))
-    (set-process-filter proc filter)))
+(defun octave-strip-ctrl-g (string)
+  "If STRING starts with a `^G', ring the bell and strip it."
+  (if (string-match "^\a" string)
+      (progn
+        (ding)
+        (setq string (substring string 1))))
+  string)
+
+(defun inferior-octave-output-filter (proc string)
+  "Ring Emacs bell if process output starts with an ASCII bell, and pass
+the rest to comint-output-filter."
+  (comint-output-filter proc (octave-strip-ctrl-g string)))
 
 (defun inferior-octave-slurp-output (proc string)
   "Save all output from the inferior Octave process between newlines into
 inferior-octave-output-list, the rest to inferior-octave-output-string."
   (while (string-match "\n" string)
     (setq inferior-octave-output-list
 	  (append inferior-octave-output-list
 		  (list (substring string 0 (match-beginning 0))))
 	  string (substring string (match-end 0))))
   (if (string-match inferior-octave-prompt string)
       (setq inferior-octave-output-string string
 	    inferior-octave-receive-in-progress nil)))
 
-(defun inferior-octave-output-filter (proc string)
-  "Ring Emacs bell if process output starts with an ASCII bell, and pass
-the rest to comint-output-filter."
-  (if (string-match "^\a" string)
-      (progn
-	(ding)
-	(setq string (substring string 1))))
-  (comint-output-filter proc string))
+(defun inferior-octave-send-list-slurp-output (list)
+  "Send the elements of LIST (which have to be strings) to the Octave
+process, passing all output to the filter inferior-octave-slurp-output."
+  (let* ((proc (get-buffer-process inferior-octave-buffer))
+	 (filter (process-filter proc))
+	 string)
+    (set-process-filter proc 'inferior-octave-slurp-output)
+    (setq inferior-octave-output-list nil)
+    (unwind-protect
+	(while (setq string (car list))
+	  (setq inferior-octave-receive-in-progress t)
+	  (comint-send-string proc string)
+	  (while inferior-octave-receive-in-progress
+	    (accept-process-output proc))
+	  (setq list (cdr list)))
+      (set-process-filter proc filter))))
+
+(defun inferior-octave-directory-tracker (string)
+  "Tracks cd commands issued to Octave.
+Use M-x inferior-octave-resync-dirs to resync if Emacs gets confused."
+  (if (string-match "[ \t]*cd[ \t]*\\([^ \t\n;]*\\)[ \t\n;]"
+		    string)
+      (cd (substring string (match-beginning 1) (match-end 1)))))
+
+(defun inferior-octave-resync-dirs ()
+  "Resync the buffer's idea of the current directory."
+  (interactive)
+  (inferior-octave-send-list-slurp-output '("pwd\n"))
+  (cd (car inferior-octave-output-list)))
 
 
 ;;; Communication with the inferior Octave process
-(defvar octave-echo-input t
-  "*Non-nil means echo input sent to the inferior Octave process.")
-(defvar octave-always-show t
-  "*Non-nil means display inferior-octave-buffer after sending a
+(defvar octave-send-show-buffer t
+  "*Non-nil means always display inferior-octave-buffer after sending a
 command.")
-(defvar octave-always-next t
+(defvar octave-send-line-auto-forward t
   "*Non-nil means always go to the next line of Octave code after
 sending a line to the inferior process.")
+(defvar octave-send-echo-input t
+  "*Non-nil means echo input sent to the inferior Octave process.")
+
+(defun octave-kill-process ()
+  "Kill inferior Octave process and its buffer."
+  (interactive)
+  (if inferior-octave-process
+      (comint-send-string inferior-octave-process "quit;\n"))
+  (if inferior-octave-buffer
+      (kill-buffer inferior-octave-buffer)))
+
+(defun octave-show-process-buffer ()
+  "Make sure that `inferior-octave-buffer' is displayed."
+  (interactive)
+  (display-buffer inferior-octave-buffer))
+
+(defun octave-hide-process-buffer ()
+  "Delete all windows that display `inferior-octave-buffer'."
+  (interactive)
+  (delete-windows-on inferior-octave-buffer))
 
 (defun octave-send-region (beg end)
   "Send the region to the inferior Octave process."
   (interactive "r")
   (if (not (comint-check-proc inferior-octave-buffer))
       (inferior-octave t))
   (let ((proc inferior-octave-process)
 	(string (buffer-substring beg end))
@@ -1535,88 +1672,74 @@ sending a line to the inferior process."
 		  string (substring string (match-end 0)))
 	  (setq line string string ""))
 	(setq inferior-octave-receive-in-progress t)
 	(inferior-octave-send-list-slurp-output
 	 (list (concat line "\n")))
 	(while inferior-octave-receive-in-progress
 	  (accept-process-output proc))
 	(insert-before-markers
-	 (if (string-equal string "")
-	     (mapconcat 'identity
-			(append
-			 (if octave-echo-input (list line) (list ""))
-			 inferior-octave-output-list
-			 (list inferior-octave-output-string))
-			"\n")
-	   (if octave-echo-input
-	       (concat line "\n" inferior-octave-output-string)
-	     ""))))))
-  (if octave-always-show
+	 (mapconcat 'identity
+		    (append
+		     (if octave-send-echo-input (list line) (list ""))
+		     (mapcar 'octave-strip-ctrl-g
+			     inferior-octave-output-list)
+		     (list inferior-octave-output-string))
+		    "\n")))))
+  (if octave-send-show-buffer
       (display-buffer inferior-octave-buffer)))
 
 (defun octave-send-block ()
   "Send the current block to the inferior Octave process."  
   (interactive)
   (save-excursion
     (octave-mark-block)
     (octave-send-region (point) (mark))))
 
 (defun octave-send-defun ()
   "Send the current function to the inferior Octave process."
   (interactive)
   (save-excursion
     (octave-mark-defun)
     (octave-send-region (point) (mark))))
 
-(defun octave-send-line ()
-  "Send the current line to the inferior Octave process.
-If `octave-always-next' is non-nil, go to the next code line."
-  (interactive)
-  (let ((beg (octave-point 'bol))
-	(end (octave-point 'eol)))
-    (if octave-always-next
-	(octave-next-code-line 1))
-    (octave-send-region beg end)))
+(defun octave-send-line (&optional arg)
+  "Send the current code line to the inferior Octave process.
+With positive prefix ARG, send that many lines.
+If `octave-send-line-auto-forward' is non-nil, go to the next unsent
+code line."
+  (interactive "P")
+  (or arg (setq arg 1))
+  (if (> arg 0)
+      (let (beg end)
+	(beginning-of-line)
+	(setq beg (point))
+	(octave-next-code-line (- arg 1))
+	(end-of-line)
+	(setq end (point))
+	(if octave-send-line-auto-forward
+	    (octave-next-code-line 1))
+	(octave-send-region beg end))))
 
-(defun octave-eval-last-sexp (arg)
-  "Evaluate Octave sexp before point; print value in minibuffer.
-With argument, print output into current buffer."
-  (interactive "P")
-  (let ((standard-output (if arg (current-buffer) t))
-	(opoint (point)))
-    ;; FIXME
-    ))
-
-(defun octave-start-process ()
-  "Start inferior Octave process, displaying its buffer it
-`octave-always-show' is non-nil."
+(defun octave-eval-print-last-sexp ()
+  "Evaluate Octave sexp before point; print value into current buffer."
   (interactive)
-  (inferior-octave t)
-  (if octave-always-show
-      (display-buffer inferior-octave-buffer)))
-
-(defun octave-kill-process ()
-  "Kill inferior Octave process and its buffer."
-  (interactive)
-  (if inferior-octave-process
-      (comint-send-string inferior-octave-process "quit;\n"))
-  (if inferior-octave-buffer
-      (kill-buffer inferior-octave-buffer)))
-
-(defun octave-show-process-buffer ()
-  "Make sure that `inferior-octave-buffer' is displayed."
-  (interactive)
-  (display-buffer inferior-octave-buffer))
-
-(defun octave-hide-process-buffer ()
-  "Delete all windows that display `inferior-octave-buffer'."
-  (interactive)
-  (delete-windows-on inferior-octave-buffer))
-
+  (let ((standard-output (current-buffer))
+	(print-escape-newlines nil)
+	(opoint (point)))
+    (terpri)
+    (prin1    
+     (save-excursion
+       (forward-sexp -1)
+       (inferior-octave-send-list-slurp-output
+	(list (concat (buffer-substring-no-properties (point) opoint)
+		      "\n")))
+       (mapconcat 'identity inferior-octave-output-list "\n")))
+    (terpri)))
+    
 
 ;;; Bug reporting
 (defun octave-submit-bug-report ()
   "Submit a bug report on Octave mode via mail."
   (interactive)
   (require 'reporter)
   (and
    (y-or-n-p "Do you want to submit a bug report? ")
@@ -1628,17 +1751,20 @@ With argument, print output into current
      'octave-blink-matching-block
      'octave-block-offset
      'octave-comment-column
      'octave-comment-start     
      'octave-continuation-offset
      'octave-continuation-string
      'octave-fill-column
      'octave-inhibit-startup-message
-     'octave-help-files))))
+     'octave-help-files
+     'octave-send-echo-input
+     'octave-send-line-auto-forward
+     'octave-send-show-buffer))))
 
 ;;; provide ourself
 
 (provide 'octave)
 
 ;; Compile this file when saving it:
 
 ;;; Local Variables:
