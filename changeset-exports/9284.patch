# HG changeset patch
# User Robert T. Short <octave@phaselockedsystems.com>
# Date 1243829491 25200
#      Sun May 31 21:11:31 2009 -0700
# Node ID 567e3e4ab74debb5753c14eb50c7925ca8fd9fac
# Parent  38ad8c99d6a2ddcf4db4ccc854cdd54a1606969f
fix up examples/@polynomial

diff --git a/ChangeLog b/ChangeLog
--- a/ChangeLog
+++ b/ChangeLog
@@ -1,8 +1,15 @@
+2009-06-02  Robert T. Short  <octave@phaselockedsystems.com>
+
+	* examples/@polynomial: Remove tabs from all functions so
+	documentation looks right.  Fix a bunch of methods
+	that didn't work.  Add a method referred to in the docs
+	that didn't exist.
+
 2009-05-26  John W. Eaton  <jwe@octave.org>
 
 	* src/dirfns.cc (Fpathsep): Allow path separator to be set.
 
 2009-03-17  Thomas Weber  <thomas.weber.mail at gmail.com>
 
         * configure.in: fix typo with regards to termios.h
 
diff --git a/examples/@polynomial/Makefile.in b/examples/@polynomial/Makefile.in
--- a/examples/@polynomial/Makefile.in
+++ b/examples/@polynomial/Makefile.in
@@ -46,16 +46,17 @@ SOURCES = \
   double.m \
   end.m \
   get.m \
   mtimes.m \
   plot.m \
   polynomial.m \
   polynomial_superiorto.m \
   polyval.m \
+  roots.m \
   set.m \
   subsasgn.m \
   subsref.m
 
 DISTFILES = $(addprefix $(srcdir)/, Makefile.in $(SOURCES))
 
 FCN_FILES = $(addprefix $(srcdir)/, $(SOURCES))
 FCN_FILES_NO_DIR = $(notdir $(FCN_FILES))
diff --git a/examples/@polynomial/display.m b/examples/@polynomial/display.m
--- a/examples/@polynomial/display.m
+++ b/examples/@polynomial/display.m
@@ -1,33 +1,32 @@
 function display (p)
   a = p.poly;
   first = true;
   fprintf("%s =", inputname(1));
   for i = 1 : length (a);
     if (a(i) != 0)
       if (first)
-	first = false;
+        first = false;
       elseif (a(i) > 0)
-	fprintf (" +");
+        fprintf (" +");
       endif
       if (a(i) < 0)
-	fprintf (" -");
+        fprintf (" -");
       endif
       if (i == 1)
-	fprintf (" %g", abs (a(i)));
+        fprintf (" %g", abs (a(i)));
       elseif (abs(a(i)) != 1)
-	fprintf (" %g *", abs (a(i)));
+        fprintf (" %g *", abs (a(i)));
       endif
       if (i > 1)
-	fprintf (" X");
+        fprintf (" X");
       endif
       if (i > 2)
-	fprintf (" ^ %d", i - 1);
+        fprintf (" ^ %d", i - 1);
       endif
     endif
   endfor
   if (first)
     fprintf(" 0");
   endif
   fprintf("\n");
 endfunction
-
diff --git a/examples/@polynomial/end.m b/examples/@polynomial/end.m
--- a/examples/@polynomial/end.m
+++ b/examples/@polynomial/end.m
@@ -1,11 +1,13 @@
 function r = end (obj, index_pos, num_indices)
-  dv = size (obj.x);
-  for i = (num_indices + 1) : length (dv)
-    dv(num_indices) *= dv(i);
-  endfor
-  if (index_pos <= length (dv))
-    r = dv (index_pos);
-  elseif
-    r = 1;
+
+  if ( num_indices!=1 )
+    error ("polynomial object may only have one index")
   endif
+  
+  if ( (index_pos<1) || (index_pos>length(obj.poly)) )
+    error ("subscript out of range")
+  end
+
+  r = length(obj.poly);
+
 endfunction
diff --git a/examples/@polynomial/get.m b/examples/@polynomial/get.m
--- a/examples/@polynomial/get.m
+++ b/examples/@polynomial/get.m
@@ -1,18 +1,18 @@
 function s = get (p, f)
   if (nargin == 1)
     s.poly = p.poly;
   elseif (nargin == 2)
     if (ischar (f))
       switch (f)
-	case "poly"
-	  s = p.poly;
-	otherwise
-	  error ("get: invalid property %s", f);
+        case "poly"
+          s = p.poly;
+        otherwise
+          error ("get: invalid property %s", f);
       endswitch
     else
       error ("get: expecting the property to be a string");
     endif
   else
     print_usage ();
   endif
 endfunction
diff --git a/examples/@polynomial/mtimes.m b/examples/@polynomial/mtimes.m
--- a/examples/@polynomial/mtimes.m
+++ b/examples/@polynomial/mtimes.m
@@ -1,5 +1,3 @@
 function y = mtimes (a, b)
-  ap = double (a);
-  bp = double (b);
-  y = polynomial (filter (ap, 1, [bp(:).', zeros(1, length(bp) - 1)]));
+  y = polynomial (conv (double(a),double(b)));
 endfunction
\ No newline at end of file
diff --git a/examples/@polynomial/polynomial.m b/examples/@polynomial/polynomial.m
--- a/examples/@polynomial/polynomial.m
+++ b/examples/@polynomial/polynomial.m
@@ -1,28 +1,29 @@
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} polynomial ()
 ## @deftypefnx {Function File} {} polynomial (@var{a})
 ## Creates a polynomial object representing the polynomial
 ##
 ## @example
 ## a0 + a1 * x + a2 * x^2 + @dots{} + an * x^n
 ## @end example
+##
+## from a vector of coefficients [a0 a1 a2 ... an].
 ## @end deftypefn
 
 function p = polynomial (a)
   if (nargin == 0)
-    p.poly = [];
+    p.poly = [0];
     p = class (p, "polynomial");
   elseif (nargin == 1)
     if (strcmp (class (a), "polynomial"))
       p = a;
     elseif (isvector (a) && isreal (a))
-      p.poly = a(:)';
+      p.poly = a(:).';
       p = class (p, "polynomial");
     else
-      error ("polynomial: expecting real or complex vector");
+      error ("polynomial: expecting real vector");
     endif
   else
     print_usage ();
   endif
-  superiorto ("double");
 endfunction
diff --git a/examples/@polynomial/polynomial_superiorto.m b/examples/@polynomial/polynomial_superiorto.m
--- a/examples/@polynomial/polynomial_superiorto.m
+++ b/examples/@polynomial/polynomial_superiorto.m
@@ -1,18 +1,30 @@
+## -*- texinfo -*-
+## @deftypefn {Function File} {} polynomial ()
+## @deftypefnx {Function File} {} polynomial (@var{a})
+## Creates a polynomial object representing the polynomial
+##
+## @example
+## a0 + a1 * x + a2 * x^2 + @dots{} + an * x^n
+## @end example
+##
+## from a vector of coefficients [a0 a1 a2 ... an].
+## @end deftypefn
+
 function p = polynomial (a)
   if (nargin == 0)
-    p.poly = [];
+    p.poly = [0];
     p = class (p, "polynomial");
   elseif (nargin == 1)
     if (strcmp (class (a), "polynomial"))
       p = a;
     elseif (isvector (a) && isreal (a))
-      p.poly = a(:)';
+      p.poly = a(:).';
       p = class (p, "polynomial");
     else
-      error ("polynomial: expecting real or complex vector");
+      error ("polynomial: expecting real vector");
     endif
   else
     print_usage ();
   endif
   superiorto ("double");
 endfunction
diff --git a/examples/@polynomial/polyval.m b/examples/@polynomial/polyval.m
--- a/examples/@polynomial/polyval.m
+++ b/examples/@polynomial/polyval.m
@@ -1,7 +1,7 @@
 function [y, dy] = polyval (p, varargin)
   if (nargout == 2)
-    [y, dy] = polyval (p.poly, varargin{:});
+    [y, dy] = polyval (fliplr(p.poly), varargin{:});
   else
-    y = polyval (p.poly, varargin{:});
+    y = polyval (fliplr(p.poly), varargin{:});
   endif
 endfunction
diff --git a/examples/@polynomial/roots.m b/examples/@polynomial/roots.m
new file mode 100644
--- /dev/null
+++ b/examples/@polynomial/roots.m
@@ -0,0 +1,3 @@
+function y = roots (p)
+  y = roots(fliplr(p.poly));
+endfunction
\ No newline at end of file
diff --git a/examples/@polynomial/set.m b/examples/@polynomial/set.m
--- a/examples/@polynomial/set.m
+++ b/examples/@polynomial/set.m
@@ -4,17 +4,17 @@ function s = set (p, varargin)
     error ("set: expecting property/value pairs");
   endif
   while (length (varargin) > 1)
     prop = varargin{1};
     val = varargin{2};
     varargin(1:2) = [];
     if (ischar (prop) && strcmp (prop, "poly"))
       if (isvector (val) && isreal (val))
-	s.poly = val(:)';
+        s.poly = val(:).';
       else
-	error ("set: expecting the value to be a real vector");
+        error ("set: expecting the value to be a real vector");
       endif
     else
       error ("set: invalid property of polynomial class");
     endif
   endwhile
-endfunction
\ No newline at end of file
+endfunction
diff --git a/examples/@polynomial/subsasgn.m b/examples/@polynomial/subsasgn.m
--- a/examples/@polynomial/subsasgn.m
+++ b/examples/@polynomial/subsasgn.m
@@ -1,12 +1,20 @@
-function s = subsasgn (s, index, val)
+function p = subsasgn (p, index, val)
+  index.type
+  index.subs
   switch (index.type)
     case "()"
-      if (! isnumeric (val) || iscomplex(val) ||any (val(:)) >= 2.^ s.m || 
-	  any (val(:)) < 0 || any (val(:) != fix(val(:))))
-	error ("subsasgn: value must be an array of real integers between 0 and 2.^m - 1");
+      ind = index.subs;
+      if ( (any (ind{:}>length(p.poly)))
+        || (any (ind{:}<0)) )
+        error ("subsasgn: subscript out of range");
       endif
-      s.x = subsasgn (s.x, index, double (val));
+      p.poly(ind{:}) = val;
     case "."
-      error ("subsagn: can not set properties of a galois field directly");
+      fld = index.subs;
+      if (strcmp (fld, "poly"))
+        p.poly = val;
+      else
+        error ("@polynomial/subsref: invalid property \"%s\"", fld);
+      endif
   endswitch
 endfunction
diff --git a/examples/@polynomial/subsref.m b/examples/@polynomial/subsref.m
--- a/examples/@polynomial/subsref.m
+++ b/examples/@polynomial/subsref.m
@@ -4,15 +4,14 @@ function b = subsref (a, s)
       ind = s.subs;
       b = polyval (fliplr(a.poly), ind{:});
     case "{}"
       ind = s.subs;
       b = polynomial (a.poly(ind{:}));
     case "."
       fld = s.subs;
       if (strcmp (fld, "poly"))
-	b = a.poly;
+        b = a.poly;
       else
-	error ("@polynomial/subsref: invalid property \"%s\"",
-	       fld);
+        error ("@polynomial/subsref: invalid property \"%s\"", fld);
       endif
   endswitch
 endfunction
