# HG changeset patch
# User Rik <rik@octave.org>
# Date 1487890539 28800
#      Thu Feb 23 14:55:39 2017 -0800
# Node ID 4b642b593ec20c20a86620a89d67cf83488f6848
# Parent  a88575e874810140f76143f10d4481fe9fc60701
maint: Indent foreach blocks in Qt GUI code for readability.

* ButtonGroup.cc, Container.cc, Figure.cc, GenericEventNotify.h, Menu.cc,
MouseModeActionGroup.cc, Panel.cc, QtHandlesUtils.cc, __init_qt__.cc,
file-editor.cc, octave-qscintilla.cc:
Indent foreach blocks in Qt GUI code for readability.

diff --git a/libgui/graphics/ButtonGroup.cc b/libgui/graphics/ButtonGroup.cc
--- a/libgui/graphics/ButtonGroup.cc
+++ b/libgui/graphics/ButtonGroup.cc
@@ -134,19 +134,19 @@ namespace QtHandles
     m_buttongroup->addButton (m_hiddenbutton);
 
     m_container = new Container (frame);
     m_container->canvas (m_handle);
 
     if (frame->hasMouseTracking ())
       {
         foreach (QWidget* w, frame->findChildren<QWidget*> ())
-        { w->setMouseTracking (true); }
+          w->setMouseTracking (true);
         foreach (QWidget* w, buttongroup->findChildren<QWidget*> ())
-        { w->setMouseTracking (true); }
+          w->setMouseTracking (true);
       }
 
     QString title = Utils::fromStdString (pp.get_title ());
     if (! title.isEmpty ())
       {
         m_title = new QLabel (title, frame);
         m_title->setAutoFillBackground (true);
         m_title->setContentsMargins (4, 0, 4, 0);
diff --git a/libgui/graphics/Container.cc b/libgui/graphics/Container.cc
--- a/libgui/graphics/Container.cc
+++ b/libgui/graphics/Container.cc
@@ -76,36 +76,36 @@ namespace QtHandles
   Container::resizeEvent (QResizeEvent* /* event */)
   {
     if (m_canvas)
       m_canvas->qWidget ()->setGeometry (0, 0, width (), height ());
 
     gh_manager::auto_lock lock;
 
     foreach (QObject* qObj, children ())
-    {
-      if (qObj->isWidgetType ())
-        {
-          Object* obj = Object::fromQObject (qObj);
+      {
+        if (qObj->isWidgetType ())
+          {
+            Object* obj = Object::fromQObject (qObj);
 
-          if (obj)
-            {
-              graphics_object go = obj->object ();
+            if (obj)
+              {
+                graphics_object go = obj->object ();
 
-              if (go.valid_object ())
-                {
-                  Matrix bb = go.get_properties ().get_boundingbox (false);
+                if (go.valid_object ())
+                  {
+                    Matrix bb = go.get_properties ().get_boundingbox (false);
 
-                  obj->qWidget<QWidget> ()
-                  ->setGeometry (octave::math::round (bb(0)), octave::math::round (bb(1)),
-                                 octave::math::round (bb(2)), octave::math::round (bb(3)));
-                }
-            }
-        }
-    }
+                    obj->qWidget<QWidget> ()->setGeometry (
+                      octave::math::round (bb(0)), octave::math::round (bb(1)),
+                      octave::math::round (bb(2)), octave::math::round (bb(3)));
+                  }
+              }
+          }
+      }
   }
 
   void
   Container::childEvent (QChildEvent* xevent)
   {
     if (xevent->child ()->isWidgetType ())
       qobject_cast<QWidget*> (xevent->child ())->setMouseTracking (
         hasMouseTracking ());
diff --git a/libgui/graphics/Figure.cc b/libgui/graphics/Figure.cc
--- a/libgui/graphics/Figure.cc
+++ b/libgui/graphics/Figure.cc
@@ -367,26 +367,26 @@ namespace QtHandles
     if (canvas)
       {
         canvas->redraw ();
         //canvas->setMouseMode (RotateMode);
       }
 
     foreach (QFrame* frame,
              qWidget<QWidget> ()->findChildren<QFrame*> ())
-    {
-      if (frame->objectName () == "UIPanel"
-          || frame->objectName () == "UIButtonGroup")
-        {
-          Object* obj = Object::fromQObject (frame);
+      {
+        if (frame->objectName () == "UIPanel"
+            || frame->objectName () == "UIButtonGroup")
+          {
+            Object* obj = Object::fromQObject (frame);
 
-          if (obj)
-            obj->slotRedraw ();
-        }
-    }
+            if (obj)
+              obj->slotRedraw ();
+          }
+      }
 
     updateFigureToolBarAndMenuBar ();
   }
 
   void
   Figure::print (const QString& file_cmd, const QString& term)
   {
     Canvas* canvas = m_container->canvas (m_handle);
@@ -1019,12 +1019,12 @@ namespace QtHandles
 
   void
   Figure::enableMouseTracking (void)
   {
     // Enable mouse tracking on every widgets
     m_container->setMouseTracking (true);
     m_container->canvas (m_handle)->qWidget ()->setMouseTracking (true);
     foreach (QWidget* w, m_container->findChildren<QWidget*> ())
-    { w->setMouseTracking (true); }
+      w->setMouseTracking (true);
   }
 
 }
diff --git a/libgui/graphics/GenericEventNotify.h b/libgui/graphics/GenericEventNotify.h
--- a/libgui/graphics/GenericEventNotify.h
+++ b/libgui/graphics/GenericEventNotify.h
@@ -64,27 +64,28 @@ namespace QtHandles
     virtual void eventNotifyAfter (QObject* obj, QEvent* evt) = 0;
   };
 
   inline
   bool GenericEventNotifySender::notifyReceiversBefore (QObject* obj,
       QEvent* evt)
   {
     foreach (GenericEventNotifyReceiver* r, m_receivers)
-    if (r->eventNotifyBefore (obj, evt))
-      return true;
+      if (r->eventNotifyBefore (obj, evt))
+        return true;
+
     return false;
   }
 
   inline
   void GenericEventNotifySender::notifyReceiversAfter (QObject* obj,
       QEvent* evt)
   {
     foreach (GenericEventNotifyReceiver* r, m_receivers)
-    r->eventNotifyAfter (obj, evt);
+      r->eventNotifyAfter (obj, evt);
   }
 
 #define DECLARE_GENERICEVENTNOTIFY_SENDER(T,B) \
 class T : public B, public GenericEventNotifySender \
 { \
 public: \
   T (QWidget* xparent) : B (xparent), GenericEventNotifySender () { } \
   ~ T (void) = default; \
diff --git a/libgui/graphics/Menu.cc b/libgui/graphics/Menu.cc
--- a/libgui/graphics/Menu.cc
+++ b/libgui/graphics/Menu.cc
@@ -110,35 +110,38 @@ namespace QtHandles
           {
             if (m_separator)
               m_parent->insertAction (0, m_separator);
             m_parent->insertAction (0, action);
 
             int count = 0;
 
             foreach (QAction* a, m_parent->actions ())
-            if (! a->isSeparator () && a->objectName () != "builtinMenu")
-              count++;
+              if (! a->isSeparator () && a->objectName () != "builtinMenu")
+                count++;
+
             up.get_property ("position").set
             (octave_value (static_cast<double> (count)), true, false);
           }
         else
           {
 
             int count = 0;
             QAction* before = 0;
 
             foreach (QAction* a, m_parent->actions ())
-            if (! a->isSeparator () && a->objectName () != "builtinMenu")
               {
-                count++;
-                if (pos <= count)
+                if (! a->isSeparator () && a->objectName () != "builtinMenu")
                   {
-                    before = a;
-                    break;
+                    count++;
+                    if (pos <= count)
+                      {
+                        before = a;
+                        break;
+                      }
                   }
               }
 
             if (m_separator)
               m_parent->insertAction (before, m_separator);
             m_parent->insertAction (before, action);
 
             if (before)
@@ -225,23 +228,25 @@ namespace QtHandles
           int pos = static_cast<int> (up.get_position ());
           QAction* before = 0;
 
           if (pos > 0)
             {
               int count = 0;
 
               foreach (QAction* a, m_parent->actions ())
-              if (! a->isSeparator () && a->objectName () != "builtinMenu")
                 {
-                  count++;
-                  if (pos <= count)
+                  if (! a->isSeparator () && a->objectName () != "builtinMenu")
                     {
-                      before = a;
-                      break;
+                      count++;
+                      if (pos <= count)
+                        {
+                          before = a;
+                          break;
+                        }
                     }
                 }
             }
 
           if (m_separator)
             m_parent->insertAction (before, m_separator);
 
           m_parent->insertAction (before, action);
@@ -293,35 +298,35 @@ namespace QtHandles
   void
   Menu::updateSiblingPositions (void)
   {
     if (m_parent)
       {
         double count = 1.0;
 
         foreach (QAction* a, m_parent->actions ())
-        {
-          if (! a->isSeparator () && a->objectName () != "builtinMenu")
-            {
-              Object* aObj = Object::fromQObject (a);
+          {
+            if (! a->isSeparator () && a->objectName () != "builtinMenu")
+              {
+                Object* aObj = Object::fromQObject (a);
 
-              if (aObj)
-                {
-                  graphics_object go = aObj->object ();
+                if (aObj)
+                  {
+                    graphics_object go = aObj->object ();
 
-                  // Probably overkill as a uimenu child can only be another
-                  // uimenu object.
-                  if (go.isa ("uimenu"))
-                    {
-                      uimenu::properties& up = Utils::properties<uimenu> (go);
+                    // Probably overkill as a uimenu child can only be another
+                    // uimenu object.
+                    if (go.isa ("uimenu"))
+                      {
+                        uimenu::properties& up = Utils::properties<uimenu> (go);
 
-                      up.get_property ("position").set
-                      (octave_value (count), true, false);
-                    }
-                }
+                        up.get_property ("position").set
+                        (octave_value (count), true, false);
+                      }
+                  }
 
-              count++;
-            }
-        }
+                count++;
+              }
+          }
       }
   }
 
 }
diff --git a/libgui/graphics/MouseModeActionGroup.cc b/libgui/graphics/MouseModeActionGroup.cc
--- a/libgui/graphics/MouseModeActionGroup.cc
+++ b/libgui/graphics/MouseModeActionGroup.cc
@@ -49,20 +49,20 @@ namespace QtHandles
     m_actions.append (new QAction (QIcon (":/images/pan.png"),
                                    tr ("Pan"), this));
     m_actions.append (new QAction (QIcon::fromTheme ("insert-text"),
                                    tr ("Insert Text"), this));
     m_actions.append (new QAction (QIcon (":/images/select.png"),
                                    tr ("Select"), this));
 
     foreach (QAction* a, m_actions)
-    {
-      a->setCheckable (true);
-      connect (a, SIGNAL (toggled (bool)), this, SLOT (actionToggled (bool)));
-    }
+      {
+        a->setCheckable (true);
+        connect (a, SIGNAL (toggled (bool)), this, SLOT (actionToggled (bool)));
+      }
   }
 
   MouseModeActionGroup::~MouseModeActionGroup (void)
   { }
 
   void
   MouseModeActionGroup::actionToggled (bool checked)
   {
diff --git a/libgui/graphics/Panel.cc b/libgui/graphics/Panel.cc
--- a/libgui/graphics/Panel.cc
+++ b/libgui/graphics/Panel.cc
@@ -117,17 +117,17 @@ namespace QtHandles
     frame->setPalette (pal);
 
     m_container = new Container (frame);
     m_container->canvas (m_handle);
 
     if (frame->hasMouseTracking ())
       {
         foreach (QWidget* w, frame->findChildren<QWidget*> ())
-        { w->setMouseTracking (true); }
+          w->setMouseTracking (true);
       }
 
     QString title = Utils::fromStdString (pp.get_title ());
     if (! title.isEmpty ())
       {
         m_title = new QLabel (title, frame);
         m_title->setAutoFillBackground (true);
         m_title->setContentsMargins (4, 0, 4, 0);
diff --git a/libgui/graphics/QtHandlesUtils.cc b/libgui/graphics/QtHandlesUtils.cc
--- a/libgui/graphics/QtHandlesUtils.cc
+++ b/libgui/graphics/QtHandlesUtils.cc
@@ -73,17 +73,17 @@ namespace QtHandles
 
     string_vector
     toStringVector (const QStringList& l)
     {
       string_vector v (l.length ());
       int i = 0;
 
       foreach (const QString& s, l)
-      v[i++] = toStdString (s);
+        v[i++] = toStdString (s);
 
       return v;
     }
 
     Cell toCellString (const QStringList& l)
     {
       QStringList tmp = l;
 
diff --git a/libgui/graphics/__init_qt__.cc b/libgui/graphics/__init_qt__.cc
--- a/libgui/graphics/__init_qt__.cc
+++ b/libgui/graphics/__init_qt__.cc
@@ -232,23 +232,23 @@ DEFUN (__uigetfile_qt__, args, , "")
 
       if (! files.isEmpty ())
         {
           Cell cFiles (1, files.length ());
           QString dirName;
           int i = 0;
 
           foreach (const QString& s, files)
-          {
-            QFileInfo fi (s);
+            {
+              QFileInfo fi (s);
 
-            if (dirName.isEmpty ())
-              dirName = appendDirSep (fi.canonicalPath ());
-            cFiles(i++) = toStdString (fi.fileName ());
-          }
+              if (dirName.isEmpty ())
+                dirName = appendDirSep (fi.canonicalPath ());
+              cFiles(i++) = toStdString (fi.fileName ());
+            }
 
           retval(0) = cFiles;
           retval(1) = toStdString (dirName);
           if (! filter.isEmpty ())
             retval(2) = static_cast<double> (filterSpecs.indexOf (filter) + 1);
         }
     }
   else
diff --git a/libgui/src/m-editor/file-editor.cc b/libgui/src/m-editor/file-editor.cc
--- a/libgui/src/m-editor/file-editor.cc
+++ b/libgui/src/m-editor/file-editor.cc
@@ -2383,19 +2383,17 @@ file_editor::dragEnterEvent (QDragEnterE
 }
 
 void
 file_editor::dropEvent (QDropEvent *e)
 {
   if (e->mimeData ()->hasUrls ())
     {
       foreach (QUrl url, e->mimeData ()->urls ())
-      {
         request_open_file (url.toLocalFile ());
-      }
     }
 }
 
 // handler for the close event
 void
 file_editor::closeEvent (QCloseEvent *e)
 {
   QSettings *settings = resource_manager::get_settings ();
diff --git a/libgui/src/m-editor/octave-qscintilla.cc b/libgui/src/m-editor/octave-qscintilla.cc
--- a/libgui/src/m-editor/octave-qscintilla.cc
+++ b/libgui/src/m-editor/octave-qscintilla.cc
@@ -247,17 +247,17 @@ octave_qscintilla::contextMenuEvent (QCo
 #if defined (HAVE_QSCI_VERSION_2_6_0)
   else
     {
       // remove all standard actions from scintilla
       QList<QAction *> all_actions = context_menu->actions ();
       QAction* a;
 
       foreach (a, all_actions)
-      context_menu->removeAction (a);
+        context_menu->removeAction (a);
 
       a = context_menu->addAction (tr ("dbstop if ..."), this,
                                    SLOT (contextmenu_break_condition (bool)));
       a->setData (local_pos);
     }
 #endif
 
   // finaly show the menu
