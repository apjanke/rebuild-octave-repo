# HG changeset patch
# User jwe
# Date 935176010 0
#      Fri Aug 20 19:06:50 1999 +0000
# Node ID eaa639880b51e961af56a63d6c4bcea7389d4b20
# Parent  49bec5dee6165ef8502aa2a643e44543dac4c6a7
[project @ 1999-08-20 19:06:48 by jwe]
idx-vector.cc

diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,13 @@
+Fri Aug 20 07:58:00 1999  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* idx-vector.cc (intcmp): Declare args as const void *, not int *,
+	then cast to const int * to compare.
+
 Fri Jul 16 11:23:51 1999  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* DAEFunc.h: Remove useless preprocessor conditional.
 
 Thu Jul 15 14:10:33 1999  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* cmd-edit.cc (command_editor::do_decode_prompt_string):
 	Use octave_time object instead of time_t.
diff --git a/liboctave/idx-vector.cc b/liboctave/idx-vector.cc
--- a/liboctave/idx-vector.cc
+++ b/liboctave/idx-vector.cc
@@ -453,19 +453,19 @@ IDX_VEC_REP::checkelem (int n) const
       (*current_liboctave_error_handler) ("idx-vector: index out of range");
       return 0;
     }
 
   return elem (n);
 }
 
 static inline int
-intcmp (int *ii, int *jj)
+intcmp (const void *ii, const void *jj)
 {
-  return (*ii - *jj);
+  return (*(static_cast<const int *> (ii)) - *(static_cast<const int *> (jj)));
 }
 
 static inline void
 sort_data (int *d, int l)
 {
   qsort (d, l, sizeof (int), intcmp);
 }
 
diff --git a/liboctave/mx-inlines.cc b/liboctave/mx-inlines.cc
--- a/liboctave/mx-inlines.cc
+++ b/liboctave/mx-inlines.cc
@@ -24,30 +24,29 @@ Software Foundation, 59 Temple Place - S
 #define octave_mx_inlines_h 1
 
 #include <cstddef>
 
 #include "oct-cmplx.h"
 
 #define VS_OP_FCN(F, OP) \
   template <class R, class V, class S> \
-  static inline void \
+  inline void \
   F ## _vs (R *r, const V *v, size_t n, S s) \
   { \
     for (size_t i = 0; i < n; i++) \
       r[i] = v[i] OP s; \
   }
 
 VS_OP_FCN (add,      +)
 VS_OP_FCN (subtract, -)
 VS_OP_FCN (multiply, *)
 VS_OP_FCN (divide,   /)
 
 #define VS_OP(F, OP, R, V, S) \
-  extern template void F ## _vs (R *, const V *, size_t, S); \
   static inline R * \
   F (const V *v, size_t n, S s) \
   { \
     R *r = 0; \
     if (n > 0) \
       { \
 	r = new R [n]; \
 	F ## _vs (r, v, n, s); \
@@ -63,30 +62,29 @@ VS_OP_FCN (divide,   /)
 
 VS_OPS (double,  double,  double)
 VS_OPS (Complex, double,  Complex)
 VS_OPS (Complex, Complex, double)
 VS_OPS (Complex, Complex, Complex)
 
 #define SV_OP_FCN(F, OP) \
   template <class R, class S, class V> \
-  static inline void \
+  inline void \
   F ## _sv (R *r, S s, const V *v, size_t n) \
   { \
     for (size_t i = 0; i < n; i++) \
       r[i] = s OP v[i]; \
   } \
 
 SV_OP_FCN (add,      +)
 SV_OP_FCN (subtract, -)
 SV_OP_FCN (multiply, *)
 SV_OP_FCN (divide,   /)
 
 #define SV_OP(F, OP, R, S, V) \
-  extern template void F ## _sv (R *, S, const V *, size_t); \
   static inline R * \
   F (S s, const V *v, size_t n) \
   { \
     R *r = 0; \
     if (n > 0) \
       { \
 	r = new R [n]; \
         F ## _sv (r, s, v, n); \
@@ -102,30 +100,29 @@ SV_OP_FCN (divide,   /)
 
 SV_OPS (double,  double,  double)
 SV_OPS (Complex, double,  Complex)
 SV_OPS (Complex, Complex, double)
 SV_OPS (Complex, Complex, Complex)
 
 #define VV_OP_FCN(F, OP) \
   template <class R, class T1, class T2> \
-  static inline void \
+  inline void \
   F ## _vv (R *r, const T1 *v1, const T2 *v2, size_t n) \
   { \
     for (size_t i = 0; i < n; i++) \
       r[i] = v1[i] OP v2[i]; \
   } \
 
 VV_OP_FCN (add,      +)
 VV_OP_FCN (subtract, -)
 VV_OP_FCN (multiply, *)
 VV_OP_FCN (divide,   /)
 
 #define VV_OP(F, OP, R, T1, T2) \
-  extern template void F ## _vv (R *, const T1 *, const T2 *, size_t); \
   static inline R * \
   F (const T1 *v1, const T2 *v2, size_t n) \
   { \
     R *r = 0; \
     if (n > 0) \
       { \
 	r = new R [n]; \
 	F ## _vv (r, v1, v2, n); \
