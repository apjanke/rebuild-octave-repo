# HG changeset patch
# User dbateman
# Date 1174507983 0
#      Wed Mar 21 20:13:03 2007 +0000
# Node ID 6ff2d413cf58dffbfe2a0ba75bc557398676a0bd
# Parent  1a59ba7d32f0d9f2dce428fbd9467e7b93a2311e
[project @ 2007-03-21 20:13:03 by dbateman]

diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,12 +1,13 @@
-2007-03-20  David Bateman  <dbateman@free.fr>
+2007-03-21  David Bateman  <dbateman@free.fr>
 
 	* plot/__go_draw_axes__.m: Handle some colors with older gnuplot.
-
+	* testfun/speed.m: Documentation and example fix.
+	
 2007-03-21  John W. Eaton  <jwe@octave.org>
 
 	* plot/subplot.m: If we find an existing subplot region, set
 	it to be the "currentaxes" property for the current figure.
 	Delete old axes objects if the new axes object overlaps the old.
 
 2007-03-20  David Bateman  <dbateman@free.fr>
 
diff --git a/scripts/testfun/speed.m b/scripts/testfun/speed.m
--- a/scripts/testfun/speed.m
+++ b/scripts/testfun/speed.m
@@ -46,18 +46,19 @@
 ## An alternative expression to evaluate, so the speed of the two
 ## can be compared. Default is @code{[]}.
 ##
 ## @item @var{tol}
 ## If @var{tol} is @code{Inf}, then no comparison will be made between the
 ## results of expression @var{f} and expression @var{f2}.  Otherwise,
 ## expression @var{f} should produce a value @var{v} and expression @var{f2} 
 ## should produce a value @var{v2}, and these shall be compared using 
-## @code{assert(@var{v},@var{v2},@var{tol})}. The default is
-## @code{eps}.
+## @code{assert(@var{v},@var{v2},@var{tol})}. If @var{tol} is positive,
+## the tolerance is assumed to be absolutr. If @var{tol} is negative,
+## the tolerance is assumed to be relative. The default is @code{eps}.
 ##
 ## @item @var{order}
 ## The time complexity of the expression @code{O(a n^p)}.  This
 ## is a structure with fields @code{a} and @code{p}.
 ##
 ## @item @var{n}
 ## The values @var{n} for which the expression was calculated and the
 ## the execution time was greater than zero.
@@ -117,19 +118,19 @@
 ## 
 ## A more complex example, if you had an original version of @code{xcorr}
 ## using for loops and another version using an FFT, you could compare the
 ## run speed for various lags as follows, or for a fixed lag with varying
 ## vector lengths as follows:
 ##
 ## @example
 ##   speed("v=xcorr(x,n)", "x=rand(128,1);", 100, ...
-##         "v2=xcorr_orig(x,n)", 100*eps,'rel')
+##         "v2=xcorr_orig(x,n)", -100*eps)
 ##   speed("v=xcorr(x,15)", "x=rand(20+n,1);", 100, ...
-##         "v2=xcorr_orig(x,n)", 100*eps,'rel')
+##         "v2=xcorr_orig(x,n)", -100*eps)
 ## @end example
 ##
 ## Assuming one of the two versions is in @var{xcorr_orig}, this would
 ## would compare their speed and their output values.  Note that the
 ## FFT version is not exact, so we specify an acceptable tolerance on
 ## the comparison @code{100*eps}, and the errors should be computed
 ## relatively, as @code{abs((@var{x} - @var{y})./@var{y})} rather than 
 ## absolutely as @code{abs(@var{x} - @var{y})}.
@@ -310,21 +311,20 @@ endfunction
 %!
 %!  disp("-----------------------");
 %!  type build_orig;
 %!  disp("-----------------------");
 %!  type build;
 %!  disp("-----------------------");
 %!
 %!  disp("Preallocated vector test.\nThis takes a little while...");
-%!  speed('build', 'build_orig', 1000, 'v=n;');
+%!  speed('build(n)', '', 1000, 'build_orig(n)');
 %!  clear build build_orig
 %!  disp("Note how much faster it is to pre-allocate a vector.");
 %!  disp("Notice the peak speedup ratio.");
-%!  clear build build_orig
 %! endif
 
 %!demo if 1
 %!  function x = build_orig(n)
 %!    for i=0:n-1, x([1:10]+i*10) = 1:10; endfor
 %!  endfunction
 %!  function x = build(n)
 %!    idx = [1:10]';
@@ -338,14 +338,14 @@ endfunction
 %!
 %!  disp("-----------------------");
 %!  type build_orig;
 %!  disp("-----------------------");
 %!  type build;
 %!  disp("-----------------------");
 %!
 %!  disp("Vectorized test. This takes a little while...");
-%!  speed('build', 'build_orig', 1000, 'v=n;');
+%!  speed('build(n)', '', 1000, 'build_orig(n)');
 %!  clear build build_orig
 %!  disp("-----------------------");
 %!  disp("This time, the for loop is done away with entirely.");
 %!  disp("Notice how much bigger the speedup is then in example 1.");
 %! endif
