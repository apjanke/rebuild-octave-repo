# HG changeset patch
# User Kai T. Ohlhus <k.ohlhus@gmail.com>
# Date 1415634219 -3600
#      Mon Nov 10 16:43:39 2014 +0100
# Node ID 36d1f379a4f03dc9f95d0d4c380bca7407bef7b7
# Parent  9f8ec58b5c74ad13757acc4952f10e552c3d293e
Faddeeva.cc: Fix compilation warnings.

Faddeeva.cc (FADDEEVA(Dawson)): Avoid shadowing variable 'x2'.
Faddeeva.cc (erfcx_y100): Replace old-style cast operator with C++ static_cast.
Faddeeva.cc (w_im_y100): Replace old-style cast operator with C++ static_cast.

diff --git a/liboctave/cruft/Faddeeva/Faddeeva.cc b/liboctave/cruft/Faddeeva/Faddeeva.cc
--- a/liboctave/cruft/Faddeeva/Faddeeva.cc
+++ b/liboctave/cruft/Faddeeva/Faddeeva.cc
@@ -560,18 +560,18 @@ cmplx FADDEEVA(Dawson)(cmplx z, double r
      
      Re dawson(x + iy) = [1 + y^2 (1 + y^2/2 - (xy)^2/3)] / (2x)
      Im dawson(x + iy) = y [ -1 - 2/3 y^2 + y^4/15 (2x^2 - 4) ] / (2x^2 - 1)
 
  */
  taylor_realaxis:
   {
     double x2 = x*x;
+    double y2 = y*y;
     if (x2 > 1600) { // |x| > 40
-      double y2 = y*y;
       if (x2 > 25e14) {// |x| > 5e7
         double xy2 = (x*y)*(x*y);
         return C((0.5 + y2 * (0.5 + 0.25*y2
                               - 0.16666666666666666667*xy2)) / x,
                  y * (-1 + y2 * (-0.66666666666666666667
                                  + 0.13333333333333333333*xy2
                                  - 0.26666666666666666667*y2))
                  / (2*x2 - 1));
@@ -579,17 +579,16 @@ cmplx FADDEEVA(Dawson)(cmplx z, double r
       return (1. / (-15 + x2*(90 + x2*(-60 + 8*x2)))) *
         C(x * (33 + x2 * (-28 + 4*x2)
                + y2 * (18 - 4*x2 + 4*y2)),
           y * (-15 + x2 * (24 - 4*x2)
                + y2 * (4*x2 - 10 - 4*y2)));
     }
     else {
       double D = spi2 * FADDEEVA(w_im)(x);
-      double x2 = x*x, y2 = y*y;
       return C
         (D + y2 * (D + x - 2*D*x2)
          + y2*y2 * (D * (0.5 - x2 * (2 - 0.66666666666666666667*x2))
                     + x * (0.83333333333333333333
                            - 0.33333333333333333333 * x2)),
          y * (1 - 2*D*x
               + y2 * 0.66666666666666666667 * (1 - x2 - D*x * (3 - 2*x2))
               + y2*y2 * (0.26666666666666666667 -
@@ -1005,17 +1004,17 @@ cmplx FADDEEVA(w)(cmplx z, double relerr
 
    Uses a look-up table of 100 different Chebyshev polynomials
    for y intervals [0,0.01], [0.01,0.02], ...., [0.99,1], generated
    with the help of Maple and a little shell script.   This allows
    the Chebyshev polynomials to be of significantly lower degree (about 1/4)
    compared to fitting the whole [0,1] interval with a single polynomial. */
 static double erfcx_y100(double y100)
 {
-  switch ((int) y100) {
+  switch (static_cast<int> (y100)) {
 case 0: {
 double t = 2*y100 - 1;
 return 0.70878032454106438663e-3 + (0.71234091047026302958e-3 + (0.35779077297597742384e-5 + (0.17403143962587937815e-7 + (0.81710660047307788845e-10 + (0.36885022360434957634e-12 + 0.15917038551111111111e-14 * t) * t) * t) * t) * t) * t;
 }
 case 1: {
 double t = 2*y100 - 3;
 return 0.21479143208285144230e-2 + (0.72686402367379996033e-3 + (0.36843175430938995552e-5 + (0.18071841272149201685e-7 + (0.85496449296040325555e-10 + (0.38852037518534291510e-12 + 0.16868473576888888889e-14 * t) * t) * t) * t) * t) * t;
 }
@@ -1449,17 +1448,17 @@ double FADDEEVA_RE(erfcx)(double x)
 /* Given y100=100*y, where y = 1/(1+x) for x >= 0, compute w_im(x).
 
    Uses a look-up table of 100 different Chebyshev polynomials
    for y intervals [0,0.01], [0.01,0.02], ...., [0.99,1], generated
    with the help of Maple and a little shell script.   This allows
    the Chebyshev polynomials to be of significantly lower degree (about 1/30)
    compared to fitting the whole [0,1] interval with a single polynomial. */
 static double w_im_y100(double y100, double x) {
-  switch ((int) y100) {
+  switch (static_cast<int> (y100)) {
     case 0: {
       double t = 2*y100 - 1;
       return 0.28351593328822191546e-2 + (0.28494783221378400759e-2 + (0.14427470563276734183e-4 + (0.10939723080231588129e-6 + (0.92474307943275042045e-9 + (0.89128907666450075245e-11 + 0.92974121935111111110e-13 * t) * t) * t) * t) * t) * t;
     }
     case 1: {
       double t = 2*y100 - 3;
       return 0.85927161243940350562e-2 + (0.29085312941641339862e-2 + (0.15106783707725582090e-4 + (0.11716709978531327367e-6 + (0.10197387816021040024e-8 + (0.10122678863073360769e-10 + 0.10917479678400000000e-12 * t) * t) * t) * t) * t) * t;
     }
