# HG changeset patch
# User jwe
# Date 1179774766 0
#      Mon May 21 19:12:46 2007 +0000
# Node ID c18ed0e7ee41641a25483031e6438752b31d8656
# Parent  de8a8ba43848f97450c400613080cc4f82344be2
[project @ 2007-05-21 19:12:46 by jwe]

diff --git a/doc/ChangeLog b/doc/ChangeLog
--- a/doc/ChangeLog
+++ b/doc/ChangeLog
@@ -1,8 +1,13 @@
+2007-05-21  Søren Hauberg  <hauberg@gmail.com>
+
+        * interpreter/stmt.txi: Describe cell array cases for the switch
+	statement.  Minor layout changes.
+
 2007-05-19  David Bateman  <dbatemna@free.fr>
 
 	* interpreter/func.txi: Additional documentation for function
 	locking, dispatch and autoloading.
 
 2007-05-16  Søren Hauberg  <hauberg@gmail.com>
 
 	* interpreter/expr.txi: Improve docs.
diff --git a/doc/interpreter/stmt.txi b/doc/interpreter/stmt.txi
--- a/doc/interpreter/stmt.txi
+++ b/doc/interpreter/stmt.txi
@@ -66,18 +66,18 @@ endif
 @noindent
 @var{condition} is an expression that controls what the rest of the
 statement will do.  The @var{then-body} is executed only if
 @var{condition} is true.
 
 The condition in an @code{if} statement is considered true if its value
 is non-zero, and false if its value is zero.  If the value of the
 conditional expression in an @code{if} statement is a vector or a
-matrix, it is considered true only if @emph{all} of the elements are
-non-zero.
+matrix, it is considered true only if it is non-empty and @emph{all}
+of the elements are non-zero.
 
 The second form of an if statement looks like this:
 
 @example
 @group
 if (@var{condition})
   @var{then-body}
 else
@@ -257,16 +257,31 @@ endswitch
 @noindent
 where @var{label} can be any expression. However, duplicate
 @var{label} values are not detected, and only the @var{command_list}
 corresponding to the first match will be executed. For the
 @code{switch} statement to be meaningful at least one
 @code{case @var{label} @var{command_list}} clause must be present,
 while the @code{otherwise @var{command_list}} clause is optional.
 
+If @var{label} is a cell array the corresponding @var{command_list}
+is executed if @emph{any} of the elements of the cell array match
+@var{expression}. As an example, the following program will print
+@samp{Variable is either 6 or 7}.
+
+@example
+A = 7;
+switch A
+  case @{ 6, 7 @}
+    printf ("variable is either 6 or 7\n");
+  otherwise
+    printf ("variable is neither 6 nor 7\n");
+endswitch
+@end example
+
 As with all other specific @code{end} keywords, @code{endswitch} may be
 replaced by @code{end}, but you can get better diagnostics if you use
 the specific forms.
 
 @c Strings can be matched
 
 One advantage of using the @code{switch} statement compared to using
 @code{if} statements is that the @var{label}s can be strings. If an
@@ -292,24 +307,24 @@ endswitch
 
 @menu
 * Notes for the C programmer::  
 @end menu
 
 @node Notes for the C programmer
 @subsection Notes for the C programmer
 
-The @code{switch} statement is also used in the widely used C
+The @code{switch} statement is also available in the widely used C
 programming language. There are, however, some differences
 between the statement in Octave and C
 
 @itemize @bullet
 @item
 Cases are exclusive, so they don't `fall through' as do the cases
-in the switch statement of the C language.
+in the @code{switch} statement of the C language.
 
 @item
 The @var{command_list} elements are not optional.  Making the list
 optional would have meant requiring a separator between the label and
 the command list.  Otherwise, things like
 
 @example
 @group
@@ -328,17 +343,28 @@ switch (foo)
   case (1)
   case (2)
     doit ();
   @dots{}
 @end group
 @end example
 
 @noindent
-particularly for C programmers.
+particularly for C programmers. If @code{doit()} should be executed if
+@var{foo} is either @code{1} or @code{2}, the above code should be
+written with a cell array like this
+
+@example
+@group
+switch (foo)
+  case @{ 1, 2 @}
+    doit ();
+  @dots{}
+@end group
+@end example
 @end itemize
 
 @node The while Statement
 @section The @code{while} Statement
 @cindex @code{while} statement
 @cindex @code{endwhile} statement
 @cindex loop
 @cindex body of a loop
@@ -347,17 +373,17 @@ In programming, a @dfn{loop} means a par
 be) executed two or more times in succession.
 
 The @code{while} statement is the simplest looping statement in Octave.
 It repeatedly executes a statement as long as a condition is true.  As
 with the condition in an @code{if} statement, the condition in a
 @code{while} statement is considered true if its value is non-zero, and
 false if its value is zero.  If the value of the conditional expression
 in a @code{while} statement is a vector or a matrix, it is considered
-true only if @emph{all} of the elements are non-zero.
+true only if it is non-empty and @emph{all} of the elements are non-zero.
 
 Octave's @code{while} statement looks like this:
 
 @example
 @group
 while (@var{condition})
   @var{body}
 endwhile
@@ -412,17 +438,17 @@ simple.
 The @code{do-until} statement is similar to the @code{while} statement,
 except that it repeatedly executes a statement until a condition becomes
 true, and the test of the condition is at the end of the loop, so the
 body of the loop is always executed at least once.  As with the
 condition in an @code{if} statement, the condition in a @code{do-until}
 statement is considered true if its value is non-zero, and false if its
 value is zero.  If the value of the conditional expression in a
 @code{do-until} statement is a vector or a matrix, it is considered 
-true only if @emph{all} of the elements are non-zero.
+true only if it is non-empty and @emph{all} of the elements are non-zero.
 
 Octave's @code{do-until} statement looks like this:
 
 @example
 @group
 do
   @var{body}
 until (@var{condition})
@@ -468,17 +494,17 @@ endfor
 @end group
 @end example
 
 @noindent
 where @var{body} stands for any statement or list of statements,
 @var{expression} is any valid expression, and @var{var} may take several
 forms.  Usually it is a simple variable name or an indexed variable.  If
 the value of @var{expression} is a structure, @var{var} may also be a
-list.  @xref{Looping Over Structure Elements}, below.
+vector with two elements.  @xref{Looping Over Structure Elements}, below.
 
 The assignment expression in the @code{for} statement works a bit
 differently than Octave's normal assignment statement.  Instead of
 assigning the complete result of the expression, it assigns each column
 of the expression to @var{var} in turn.  If @var{expression} is a range,
 a row vector, or a scalar, the value of @var{var} will be a scalar each
 time the loop body is executed.  If @var{var} is a column vector or a
 matrix, @var{var} will be a column vector each time the loop body is
@@ -597,17 +623,17 @@ endfor
      @print{} 
      @print{} key = c
      @print{} val = string
 @end group
 @end example
 
 The elements are not accessed in any particular order.  If you need to
 cycle through the list in a particular way, you will have to use the
-function @code{struct_elements} and sort the list yourself.
+function @code{fieldnames} and sort the list yourself.
 
 The @var{key} variable may also be omitted.  If it is, the brackets are
 also optional.  This is useful for cycling through the values of all the
 structure elements when the names of the elements do not need to be
 known.
 
 @node The break Statement
 @section The @code{break} Statement
@@ -730,17 +756,17 @@ unwind_protect
   @var{body}
 unwind_protect_cleanup
   @var{cleanup}
 end_unwind_protect
 @end group
 @end example
 
 @noindent
-Where @var{body} and @var{cleanup} are both optional and may contain any
+where @var{body} and @var{cleanup} are both optional and may contain any
 Octave expressions or commands.  The statements in @var{cleanup} are 
 guaranteed to be executed regardless of how control exits @var{body}.
 
 This is useful to protect temporary changes to global variables from
 possible errors.  For example, the following code will always restore
 the original value of the global variable @code{frobnositcate}
 even if an error occurs while performing the indexing operation.
 
@@ -751,16 +777,17 @@ unwind_protect
   frobnosticate = true;
   @dots{}
 unwind_protect_cleanup
   frobnosticate = save_frobnosticate;
 end_unwind_protect
 @end group
 @end example
 
+@noindent
 Without @code{unwind_protect}, the value of @var{frobnosticate}
 would not be restored if an error occurs while performing the indexing
 operation because evaluation would stop at the point of the error and
 the statement to restore the value would not be executed.
 
 @node The try Statement
 @section The @code{try} Statement
 @cindex @code{try} statement
@@ -777,17 +804,18 @@ The general form of a @code{try} block l
 try
   @var{body}
 catch
   @var{cleanup}
 end_try_catch
 @end group
 @end example
 
-Where @var{body} and @var{cleanup} are both optional and may contain any
+@noindent
+where @var{body} and @var{cleanup} are both optional and may contain any
 Octave expressions or commands.  The statements in @var{cleanup} are
 only executed if an error occurs in @var{body}.
 
 No warnings or error messages are printed while @var{body} is
 executing.  If an error does occur during the execution of @var{body},
 @var{cleanup} can use the function @code{lasterr} to access the text
 of the message that would have been printed.  This is the same
 as @code{eval (@var{try}, @var{catch})} but it is more efficient since
@@ -820,17 +848,17 @@ the lines
 x = long_variable_name ...
     + longer_variable_name \
     - 42
 @end group
 @end example
 
 @noindent
 form a single statement.  The backslash character on the second line
-above is interpreted a continuation character, @emph{not} as a division
+above is interpreted as a continuation character, @emph{not} as a division
 operator.
 
 For continuation lines that do not occur inside string constants,
 whitespace and comments may appear between the continuation marker and
 the newline character.  For example, the statement
 
 @example
 @group
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,13 @@
+2007-05-21  Søren Hauberg  <soren@hauberg.org>
+
+	* help.cc (Fautoload): Doc fix.
+	* variables.cc (Fiscommand): Doc fix.
+
 2007-05-19  David Bateman  <dbatemna@free.fr>
 
 	* ov-fcn-inline.cc (Fvectorize): Doc fix.
 
 2007-05-16  Søren Hauberg  <soren@hauberg.org>
 
 	* ov.cc (Fsubsref, Fsubsasgn): Doc fix.
 
diff --git a/src/parse.y b/src/parse.y
--- a/src/parse.y
+++ b/src/parse.y
@@ -3518,23 +3518,23 @@ to use\n\
 autoload (\"foo\",\n\
           fullfile (fileparts (mfilename (\"fullpath\")),\n\
                     \"bar.oct\"));\n\
 @end example\n\
 \n\
 Uses like\n\
 \n\
 @example\n\
-autoload (\"foo\", file_in_loadpth (\"bar.oct\"))\n\
+autoload (\"foo\", file_in_loadpath (\"bar.oct\"))\n\
 @end example\n\
 \n\
 @noindent\n\
 are strongly discouraged.\n\
 \n\
-With no arguments, return a structure containing the curre autoload map.\n\
+With no arguments, return a structure containing the current autoload map.\n\
 @seealso{PKG_ADD}\n\
 @end deftypefn")
 {
   octave_value retval;
 
   int nargin = args.length ();
 
   if (nargin == 0)
diff --git a/src/variables.cc b/src/variables.cc
--- a/src/variables.cc
+++ b/src/variables.cc
@@ -230,17 +230,17 @@ is_command_name (const std::string& s)
   return retval;
 }
 
 DEFCMD (iscommand, args, ,
 "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} iscommand (@var{name})\n\
 Return true if @var{name} is a command style function.  If @var{name}\n\
 is omitted, return a list of identifiers which are marked as commands with\n\
-mark_as_command.\n\
+@code{mark_as_command}.\n\
 @seealso{mark_as_command, unmark_command}\n\
 @end deftypefn")
 {
   octave_value retval;
 
   int nargin = args.length ();
 
   if (nargin == 0)
