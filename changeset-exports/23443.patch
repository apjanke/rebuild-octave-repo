# HG changeset patch
# User Rik <rik@octave.org>
# Date 1493225848 25200
#      Wed Apr 26 09:57:28 2017 -0700
# Node ID 3f1bf237908b75b41feab4bbd2c8790cca98efe3
# Parent  53f5f8231c371de425f03801c946860f245be94e
maint: Eliminate <cfloat.h> header from liboctave files.

* build-aux/mk-opts.pl: Remove "#include <cfloat>" from script which creates *-opts.h

* Array-util.cc, Array-util.h, Array.cc, Array.h, CColVector.h,
CDiagMatrix.h, CMatrix.cc, CMatrix.h, CNDArray.cc, CNDArray.h, CRowVector.h,
CSparse.cc, CSparse.h, MSparse.h, Matrix.h, Range.cc, Sparse.h, boolMatrix.h,
boolNDArray.h, boolSparse.h, chMatrix.h, chNDArray.h, dColVector.h,
dDiagMatrix.h, dMatrix.cc, dMatrix.h, dNDArray.cc, dNDArray.h, dRowVector.h,
dSparse.cc, dSparse.h, dim-vector.cc, dim-vector.h, fCColVector.h,
fCDiagMatrix.h, fCMatrix.cc, fCMatrix.h, fCNDArray.cc, fCNDArray.h,
fCRowVector.h, fColVector.h, fDiagMatrix.h, fMatrix.cc, fMatrix.h, fNDArray.cc,
fNDArray.h, fRowVector.h, int16NDArray.h, int32NDArray.h, int64NDArray.h,
int8NDArray.h, intNDArray.h, uint16NDArray.h, uint32NDArray.h, uint64NDArray.h,
uint8NDArray.h, CollocWt.cc, DASPK.cc, DASPK.h, DASRT.cc, DASRT.h, DASSL.cc,
DASSL.h, LSODE.cc, LSODE.h, Quad.h, eigs-base.cc, eigs-base.h, lo-mappers.cc,
lo-mappers.h, oct-norm.cc, lo-ieee.cc, lo-utils.cc, lo-utils.h, oct-refcount.h:
Remove "#include <cfloat>".  Add "#include <limits>" if necessary.  Remove
redundant #includes.  Alphabetize #includes.

diff --git a/build-aux/mk-opts.pl b/build-aux/mk-opts.pl
--- a/build-aux/mk-opts.pl
+++ b/build-aux/mk-opts.pl
@@ -369,17 +369,16 @@ sub emit_opt_class_header
 
   print <<"_END_EMIT_OPT_CLASS_HEADER_";
 // DO NOT EDIT!
 // Generated automatically from $DEFN_FILE.
 
 #if ! defined (octave_${CLASS_NAME}_h)
 #define octave_${CLASS_NAME}_h 1
 
-#include <cfloat>
 #include <cmath>
 
 #include <limits>
 
 $INCLUDE
 
 class
 $CLASS_NAME
diff --git a/liboctave/array/Array-util.cc b/liboctave/array/Array-util.cc
--- a/liboctave/array/Array-util.cc
+++ b/liboctave/array/Array-util.cc
@@ -21,17 +21,16 @@ along with Octave; see the file COPYING.
 
 */
 
 #if defined (HAVE_CONFIG_H)
 #  include "config.h"
 #endif
 
 #include "Array-util.h"
-#include "dim-vector.h"
 #include "lo-error.h"
 #include "oct-locbuf.h"
 
 bool
 index_in_bounds (const Array<octave_idx_type>& ra_idx,
                  const dim_vector& dimensions)
 {
   bool retval = true;
diff --git a/liboctave/array/Array-util.h b/liboctave/array/Array-util.h
--- a/liboctave/array/Array-util.h
+++ b/liboctave/array/Array-util.h
@@ -21,18 +21,16 @@ along with Octave; see the file COPYING.
 */
 
 #if ! defined (octave_Array_util_h)
 #define octave_Array_util_h 1
 
 #include "octave-config.h"
 
 #include "Array.h"
-#include "dim-vector.h"
-#include "idx-vector.h"
 #include "lo-array-errwarn.h"
 
 extern OCTAVE_API bool index_in_bounds (const Array<octave_idx_type>& ra_idx,
                                         const dim_vector& dimensions);
 
 extern OCTAVE_API void increment_index (Array<octave_idx_type>& ra_idx,
                                         const dim_vector& dimensions,
                                         int start_dimension = 0);
diff --git a/liboctave/array/Array.cc b/liboctave/array/Array.cc
--- a/liboctave/array/Array.cc
+++ b/liboctave/array/Array.cc
@@ -22,28 +22,20 @@ along with Octave; see the file COPYING.
 <http://www.gnu.org/licenses/>.
 
 */
 
 // This file should not include config.h.  It is only included in other
 // C++ source files that should have included config.h before including
 // this file.
 
-#include <cassert>
-
 #include <iostream>
-#include <sstream>
-#include <vector>
-#include <algorithm>
-#include <new>
-
+
+#include "Array-util.h"
 #include "Array.h"
-#include "Array-util.h"
-#include "idx-vector.h"
-#include "lo-error.h"
 #include "lo-mappers.h"
 #include "oct-locbuf.h"
 
 // One dimensional array class.  Handles the reference counting for
 // all the derived classes.
 
 template <typename T>
 typename Array<T>::ArrayRep *
diff --git a/liboctave/array/Array.h b/liboctave/array/Array.h
--- a/liboctave/array/Array.h
+++ b/liboctave/array/Array.h
@@ -28,25 +28,26 @@ along with Octave; see the file COPYING.
 
 #include "octave-config.h"
 
 #include <cassert>
 #include <cstddef>
 
 #include <algorithm>
 #include <iosfwd>
+#include <string>
 
 #include "dim-vector.h"
 #include "idx-vector.h"
 #include "lo-error.h"
 #include "lo-traits.h"
 #include "lo-utils.h"
+#include "oct-refcount.h"
 #include "oct-sort.h"
 #include "quit.h"
-#include "oct-refcount.h"
 
 //! N Dimensional Array with copy-on-write semantics.
 /*!
     The Array class is at the root of Octave.  It provides a container
     with an arbitrary number of dimensions.  The operator () provides
     access to individual elements via subscript and linear indexing.
     Indexing starts at 0.  Arrays are column-major order as in Fortran.
 
diff --git a/liboctave/array/CColVector.h b/liboctave/array/CColVector.h
--- a/liboctave/array/CColVector.h
+++ b/liboctave/array/CColVector.h
@@ -22,17 +22,16 @@ along with Octave; see the file COPYING.
 */
 
 #if ! defined (octave_CColVector_h)
 #define octave_CColVector_h 1
 
 #include "octave-config.h"
 
 #include "MArray.h"
-
 #include "mx-defs.h"
 
 class
 OCTAVE_API
 ComplexColumnVector : public MArray<Complex>
 {
   friend class ComplexMatrix;
   friend class ComplexRowVector;
diff --git a/liboctave/array/CDiagMatrix.h b/liboctave/array/CDiagMatrix.h
--- a/liboctave/array/CDiagMatrix.h
+++ b/liboctave/array/CDiagMatrix.h
@@ -20,24 +20,22 @@ along with Octave; see the file COPYING.
 
 */
 
 #if ! defined (octave_CDiagMatrix_h)
 #define octave_CDiagMatrix_h 1
 
 #include "octave-config.h"
 
-#include "MDiagArray2.h"
-
-#include "dRowVector.h"
+#include "CColVector.h"
 #include "CRowVector.h"
+#include "DET.h"
+#include "MDiagArray2.h"
 #include "dColVector.h"
-#include "CColVector.h"
-#include "DET.h"
-
+#include "dRowVector.h"
 #include "mx-defs.h"
 
 class
 OCTAVE_API
 ComplexDiagMatrix : public MDiagArray2<Complex>
 {
 public:
 
diff --git a/liboctave/array/CMatrix.cc b/liboctave/array/CMatrix.cc
--- a/liboctave/array/CMatrix.cc
+++ b/liboctave/array/CMatrix.cc
@@ -22,54 +22,51 @@ along with Octave; see the file COPYING.
 <http://www.gnu.org/licenses/>.
 
 */
 
 #if defined (HAVE_CONFIG_H)
 #  include "config.h"
 #endif
 
-#include <cfloat>
-
+#include <algorithm>
+#include <complex>
 #include <iostream>
-#include <vector>
-
-// FIXME
-#include <sys/types.h>
+#include <limits>
 
 #include "Array-util.h"
+#include "CDiagMatrix.h"
+#include "CMatrix.h"
+#include "CNDArray.h"
+#include "CRowVector.h"
+#include "DET.h"
 #include "boolMatrix.h"
 #include "chMatrix.h"
 #include "chol.h"
+#include "dDiagMatrix.h"
 #include "dMatrix.h"
-#include "CMatrix.h"
-#include "CNDArray.h"
-#include "CRowVector.h"
 #include "dRowVector.h"
-#include "CDiagMatrix.h"
-#include "dDiagMatrix.h"
-#include "schur.h"
-#include "svd.h"
-#include "DET.h"
 #include "functor.h"
 #include "lo-blas-proto.h"
 #include "lo-error.h"
 #include "lo-ieee.h"
 #include "lo-lapack-proto.h"
 #include "lo-mappers.h"
 #include "lo-utils.h"
 #include "mx-cm-dm.h"
 #include "mx-cm-s.h"
 #include "mx-dm-cm.h"
 #include "mx-inlines.cc"
 #include "mx-op-defs.h"
 #include "oct-cmplx.h"
 #include "oct-fftw.h"
 #include "oct-locbuf.h"
 #include "oct-norm.h"
+#include "schur.h"
+#include "svd.h"
 
 static const Complex Complex_NaN_result (octave::numeric_limits<double>::NaN (),
                                          octave::numeric_limits<double>::NaN ());
 
 // Complex Matrix class
 
 ComplexMatrix::ComplexMatrix (const Matrix& a)
   : ComplexNDArray (a)
diff --git a/liboctave/array/CMatrix.h b/liboctave/array/CMatrix.h
--- a/liboctave/array/CMatrix.h
+++ b/liboctave/array/CMatrix.h
@@ -20,25 +20,24 @@ along with Octave; see the file COPYING.
 
 */
 
 #if ! defined (octave_CMatrix_h)
 #define octave_CMatrix_h 1
 
 #include "octave-config.h"
 
+#include "CNDArray.h"
+#include "DET.h"
 #include "MArray.h"
 #include "MDiagArray2.h"
 #include "MatrixType.h"
-#include "CNDArray.h"
-
 #include "mx-defs.h"
 #include "mx-op-decl.h"
 #include "oct-cmplx.h"
-#include "DET.h"
 
 class
 OCTAVE_API
 ComplexMatrix : public ComplexNDArray
 {
 public:
 
   typedef ComplexColumnVector column_vector_type;
diff --git a/liboctave/array/CNDArray.cc b/liboctave/array/CNDArray.cc
--- a/liboctave/array/CNDArray.cc
+++ b/liboctave/array/CNDArray.cc
@@ -21,29 +21,28 @@ along with Octave; see the file COPYING.
 <http://www.gnu.org/licenses/>.
 
 */
 
 #if defined (HAVE_CONFIG_H)
 #  include "config.h"
 #endif
 
-#include <cfloat>
-
-#include <vector>
+#include <complex>
+#include <iostream>
 
 #include "Array-util.h"
 #include "CNDArray.h"
 #include "f77-fcn.h"
 #include "functor.h"
 #include "lo-ieee.h"
 #include "lo-mappers.h"
 #include "mx-base.h"
+#include "mx-cnda-s.h"
 #include "mx-op-defs.h"
-#include "mx-cnda-s.h"
 #include "oct-fftw.h"
 #include "oct-locbuf.h"
 
 #include "bsxfun-defs.cc"
 
 ComplexNDArray::ComplexNDArray (const charNDArray& a)
   : MArray<Complex> (a.dims ())
 {
diff --git a/liboctave/array/CNDArray.h b/liboctave/array/CNDArray.h
--- a/liboctave/array/CNDArray.h
+++ b/liboctave/array/CNDArray.h
@@ -21,20 +21,19 @@ along with Octave; see the file COPYING.
 */
 
 #if ! defined (octave_CNDArray_h)
 #define octave_CNDArray_h 1
 
 #include "octave-config.h"
 
 #include "MArray.h"
-
+#include "bsxfun-decl.h"
 #include "mx-defs.h"
 #include "mx-op-decl.h"
-#include "bsxfun-decl.h"
 
 class
 OCTAVE_API
 ComplexNDArray : public MArray<Complex>
 {
 public:
 
   ComplexNDArray (void) : MArray<Complex> () { }
diff --git a/liboctave/array/CRowVector.h b/liboctave/array/CRowVector.h
--- a/liboctave/array/CRowVector.h
+++ b/liboctave/array/CRowVector.h
@@ -22,17 +22,16 @@ along with Octave; see the file COPYING.
 
 #if ! defined (octave_CRowVector_h)
 #define octave_CRowVector_h 1
 
 #include "octave-config.h"
 
 #include "MArray.h"
 #include "dRowVector.h"
-
 #include "mx-defs.h"
 
 class
 OCTAVE_API
 ComplexRowVector : public MArray<Complex>
 {
   friend class ComplexColumnVector;
 
diff --git a/liboctave/array/CSparse.cc b/liboctave/array/CSparse.cc
--- a/liboctave/array/CSparse.cc
+++ b/liboctave/array/CSparse.cc
@@ -21,20 +21,18 @@ along with Octave; see the file COPYING.
 <http://www.gnu.org/licenses/>.
 
 */
 
 #if defined (HAVE_CONFIG_H)
 #  include "config.h"
 #endif
 
-#include <cfloat>
-
+#include <complex>
 #include <iostream>
-#include <vector>
 
 #include "quit.h"
 #include "lo-ieee.h"
 #include "lo-mappers.h"
 #include "f77-fcn.h"
 #include "dRowVector.h"
 #include "lo-lapack-proto.h"
 #include "mx-m-cs.h"
diff --git a/liboctave/array/CSparse.h b/liboctave/array/CSparse.h
--- a/liboctave/array/CSparse.h
+++ b/liboctave/array/CSparse.h
@@ -21,30 +21,27 @@ along with Octave; see the file COPYING.
 
 */
 
 #if ! defined (octave_CSparse_h)
 #define octave_CSparse_h 1
 
 #include "octave-config.h"
 
-#include "dMatrix.h"
-#include "dNDArray.h"
+#include "CColVector.h"
 #include "CMatrix.h"
 #include "CNDArray.h"
-#include "dColVector.h"
-#include "CColVector.h"
-#include "oct-cmplx.h"
-
 #include "DET.h"
 #include "MSparse.h"
-
+#include "MatrixType.h"
 #include "Sparse-op-decls.h"
-
-#include "MatrixType.h"
+#include "dColVector.h"
+#include "dMatrix.h"
+#include "dNDArray.h"
+#include "oct-cmplx.h"
 
 class PermMatrix;
 class DiagMatrix;
 class ComplexDiagMatrix;
 class SparseMatrix;
 class SparseBoolMatrix;
 
 class
diff --git a/liboctave/array/MSparse.h b/liboctave/array/MSparse.h
--- a/liboctave/array/MSparse.h
+++ b/liboctave/array/MSparse.h
@@ -21,21 +21,21 @@ along with Octave; see the file COPYING.
 
 */
 
 #if ! defined (octave_MSparse_h)
 #define octave_MSparse_h 1
 
 #include "octave-config.h"
 
-#include "quit.h"
-#include "lo-error.h"
+#include "Array-util.h"
+#include "MArray.h"
 #include "Sparse.h"
-#include "MArray.h"
-#include "Array-util.h"
+#include "lo-error.h"
+#include "quit.h"
 
 
 // Two dimensional sparse array with math ops.
 template <typename T>
 class
 MSparse : public Sparse<T>
 {
 public:
diff --git a/liboctave/array/Matrix.h b/liboctave/array/Matrix.h
--- a/liboctave/array/Matrix.h
+++ b/liboctave/array/Matrix.h
@@ -25,14 +25,12 @@ along with Octave; see the file COPYING.
 // represented by some sort of inheritance tree...
 
 #if ! defined (octave_Matrix_h)
 #define octave_Matrix_h 1
 
 #include "octave-config.h"
 
 #include "mx-base.h"
-
 #include "mx-ext.h"
-
 #include "mx-ops.h"
 
 #endif
diff --git a/liboctave/array/Range.cc b/liboctave/array/Range.cc
--- a/liboctave/array/Range.cc
+++ b/liboctave/array/Range.cc
@@ -19,27 +19,27 @@ along with Octave; see the file COPYING.
 <http://www.gnu.org/licenses/>.
 
 */
 
 #if defined (HAVE_CONFIG_H)
 #  include "config.h"
 #endif
 
-#include <cfloat>
+#include <cmath>
 
 #include <iostream>
 #include <limits>
 
+#include "Array-util.h"
 #include "Range.h"
 #include "lo-error.h"
 #include "lo-mappers.h"
 #include "lo-math.h"
 #include "lo-utils.h"
-#include "Array-util.h"
 
 bool
 Range::all_elements_are_ints (void) const
 {
   // If the base and increment are ints, the final value in the range
   // will also be an integer, even if the limit is not.  If there is one
   // or fewer elements only the base needs to be an integer
 
diff --git a/liboctave/array/Sparse.h b/liboctave/array/Sparse.h
--- a/liboctave/array/Sparse.h
+++ b/liboctave/array/Sparse.h
@@ -1,9 +1,8 @@
-// Template sparse classes
 /*
 
 Copyright (C) 2004-2017 David Bateman
 Copyright (C) 1998-2004 Andy Adler
 Copyright (C) 2010 VZLU Prague
 
 This file is part of Octave.
 
@@ -28,22 +27,19 @@ along with Octave; see the file COPYING.
 
 #include "octave-config.h"
 
 #include <cassert>
 #include <cstddef>
 
 #include <algorithm>
 #include <iosfwd>
+#include <string>
 
 #include "Array.h"
-#include "dim-vector.h"
-#include "lo-error.h"
-#include "lo-utils.h"
-#include "oct-sort.h"
 
 class idx_vector;
 class PermMatrix;
 
 // Two dimensional sparse class.  Handles the reference counting for
 // all the derived classes.
 
 template <typename T>
diff --git a/liboctave/array/boolMatrix.h b/liboctave/array/boolMatrix.h
--- a/liboctave/array/boolMatrix.h
+++ b/liboctave/array/boolMatrix.h
@@ -23,17 +23,16 @@ along with Octave; see the file COPYING.
 
 #if ! defined (octave_boolMatrix_h)
 #define octave_boolMatrix_h 1
 
 #include "octave-config.h"
 
 #include "Array.h"
 #include "boolNDArray.h"
-
 #include "mx-defs.h"
 #include "mx-op-decl.h"
 
 class
 OCTAVE_API
 boolMatrix : public boolNDArray
 {
 public:
diff --git a/liboctave/array/boolNDArray.h b/liboctave/array/boolNDArray.h
--- a/liboctave/array/boolNDArray.h
+++ b/liboctave/array/boolNDArray.h
@@ -21,20 +21,19 @@ along with Octave; see the file COPYING.
 */
 
 #if ! defined (octave_boolNDArray_h)
 #define octave_boolNDArray_h 1
 
 #include "octave-config.h"
 
 #include "Array.h"
-
+#include "bsxfun-decl.h"
 #include "mx-defs.h"
 #include "mx-op-decl.h"
-#include "bsxfun-decl.h"
 
 class
 OCTAVE_API
 boolNDArray : public Array<bool>
 {
 public:
 
   typedef boolMatrix matrix_type;
diff --git a/liboctave/array/boolSparse.h b/liboctave/array/boolSparse.h
--- a/liboctave/array/boolSparse.h
+++ b/liboctave/array/boolSparse.h
@@ -21,24 +21,22 @@ along with Octave; see the file COPYING.
 
 */
 
 #if ! defined (octave_boolSparse_h)
 #define octave_boolSparse_h 1
 
 #include "octave-config.h"
 
+#include "MSparse.h"
+#include "PermMatrix.h"
+#include "Sparse-op-decls.h"
 #include "Sparse.h"
-#include "MSparse.h"
-
 #include "boolMatrix.h"
 #include "boolNDArray.h"
-#include "PermMatrix.h"
-
-#include "Sparse-op-decls.h"
 
 class SparseMatrix;
 
 class
 OCTAVE_API
 SparseBoolMatrix : public Sparse<bool>
 {
 public:
diff --git a/liboctave/array/chMatrix.h b/liboctave/array/chMatrix.h
--- a/liboctave/array/chMatrix.h
+++ b/liboctave/array/chMatrix.h
@@ -25,17 +25,16 @@ along with Octave; see the file COPYING.
 #define octave_chMatrix_h 1
 
 #include "octave-config.h"
 
 #include <string>
 
 #include "Array.h"
 #include "chNDArray.h"
-
 #include "mx-defs.h"
 #include "mx-op-decl.h"
 #include "str-vec.h"
 
 class
 OCTAVE_API
 charMatrix : public charNDArray
 {
diff --git a/liboctave/array/chNDArray.h b/liboctave/array/chNDArray.h
--- a/liboctave/array/chNDArray.h
+++ b/liboctave/array/chNDArray.h
@@ -20,23 +20,20 @@ along with Octave; see the file COPYING.
 
 */
 
 #if ! defined (octave_chNDArray_h)
 #define octave_chNDArray_h 1
 
 #include "octave-config.h"
 
-#include <string>
-
 #include "Array.h"
-
+#include "bsxfun-decl.h"
 #include "mx-defs.h"
 #include "mx-op-decl.h"
-#include "bsxfun-decl.h"
 #include "str-vec.h"
 
 class
 OCTAVE_API
 charNDArray : public Array<char>
 {
 public:
 
diff --git a/liboctave/array/dColVector.h b/liboctave/array/dColVector.h
--- a/liboctave/array/dColVector.h
+++ b/liboctave/array/dColVector.h
@@ -22,17 +22,16 @@ along with Octave; see the file COPYING.
 */
 
 #if ! defined (octave_dColVector_h)
 #define octave_dColVector_h 1
 
 #include "octave-config.h"
 
 #include "MArray.h"
-
 #include "mx-defs.h"
 
 class
 OCTAVE_API
 ColumnVector : public MArray<double>
 {
 public:
 
diff --git a/liboctave/array/dDiagMatrix.h b/liboctave/array/dDiagMatrix.h
--- a/liboctave/array/dDiagMatrix.h
+++ b/liboctave/array/dDiagMatrix.h
@@ -20,22 +20,20 @@ along with Octave; see the file COPYING.
 
 */
 
 #if ! defined (octave_dDiagMatrix_h)
 #define octave_dDiagMatrix_h 1
 
 #include "octave-config.h"
 
+#include "DET.h"
 #include "MDiagArray2.h"
-
+#include "dColVector.h"
 #include "dRowVector.h"
-#include "dColVector.h"
-#include "DET.h"
-
 #include "mx-defs.h"
 
 class
 OCTAVE_API
 DiagMatrix : public MDiagArray2<double>
 {
 public:
 
diff --git a/liboctave/array/dMatrix.cc b/liboctave/array/dMatrix.cc
--- a/liboctave/array/dMatrix.cc
+++ b/liboctave/array/dMatrix.cc
@@ -22,52 +22,51 @@ along with Octave; see the file COPYING.
 <http://www.gnu.org/licenses/>.
 
 */
 
 #if defined (HAVE_CONFIG_H)
 #  include "config.h"
 #endif
 
-#include <cfloat>
-
+#include <algorithm>
 #include <iostream>
-#include <vector>
+#include <limits>
 
 #include "Array-util.h"
+#include "CColVector.h"
+#include "CMatrix.h"
+#include "DET.h"
+#include "PermMatrix.h"
+#include "boolMatrix.h"
 #include "byte-swap.h"
-#include "boolMatrix.h"
 #include "chMatrix.h"
 #include "chol.h"
-#include "dMatrix.h"
+#include "dColVector.h"
 #include "dDiagMatrix.h"
-#include "CMatrix.h"
-#include "dColVector.h"
+#include "dMatrix.h"
 #include "dRowVector.h"
-#include "CColVector.h"
-#include "PermMatrix.h"
-#include "DET.h"
-#include "schur.h"
-#include "svd.h"
 #include "functor.h"
 #include "lo-blas-proto.h"
 #include "lo-error.h"
 #include "lo-ieee.h"
 #include "lo-lapack-proto.h"
 #include "lo-mappers.h"
 #include "lo-utils.h"
-#include "mx-m-dm.h"
 #include "mx-dm-m.h"
 #include "mx-inlines.cc"
+#include "mx-m-dm.h"
 #include "mx-op-defs.h"
 #include "oct-cmplx.h"
 #include "oct-fftw.h"
 #include "oct-locbuf.h"
 #include "oct-norm.h"
 #include "quit.h"
+#include "schur.h"
+#include "svd.h"
 
 // Matrix class.
 
 Matrix::Matrix (const RowVector& rv)
   : NDArray (rv)
 { }
 
 Matrix::Matrix (const ColumnVector& cv)
diff --git a/liboctave/array/dMatrix.h b/liboctave/array/dMatrix.h
--- a/liboctave/array/dMatrix.h
+++ b/liboctave/array/dMatrix.h
@@ -20,24 +20,23 @@ along with Octave; see the file COPYING.
 
 */
 
 #if ! defined (octave_dMatrix_h)
 #define octave_dMatrix_h 1
 
 #include "octave-config.h"
 
-#include "dNDArray.h"
+#include "DET.h"
 #include "MArray.h"
 #include "MDiagArray2.h"
 #include "MatrixType.h"
-
+#include "dNDArray.h"
 #include "mx-defs.h"
 #include "mx-op-decl.h"
-#include "DET.h"
 
 class
 OCTAVE_API
 Matrix : public NDArray
 {
 public:
 
   typedef ColumnVector column_vector_type;
diff --git a/liboctave/array/dNDArray.cc b/liboctave/array/dNDArray.cc
--- a/liboctave/array/dNDArray.cc
+++ b/liboctave/array/dNDArray.cc
@@ -21,19 +21,18 @@ along with Octave; see the file COPYING.
 <http://www.gnu.org/licenses/>.
 
 */
 
 #if defined (HAVE_CONFIG_H)
 #  include "config.h"
 #endif
 
-#include <cfloat>
-
-#include <vector>
+#include <iostream>
+#include <limits>
 
 #include "Array-util.h"
 #include "dNDArray.h"
 #include "f77-fcn.h"
 #include "functor.h"
 #include "lo-error.h"
 #include "lo-ieee.h"
 #include "lo-mappers.h"
diff --git a/liboctave/array/dNDArray.h b/liboctave/array/dNDArray.h
--- a/liboctave/array/dNDArray.h
+++ b/liboctave/array/dNDArray.h
@@ -21,20 +21,19 @@ along with Octave; see the file COPYING.
 */
 
 #if ! defined (octave_dNDArray_h)
 #define octave_dNDArray_h 1
 
 #include "octave-config.h"
 
 #include "MArray.h"
-
+#include "bsxfun-decl.h"
 #include "mx-defs.h"
 #include "mx-op-decl.h"
-#include "bsxfun-decl.h"
 
 template <typename T> class intNDArray;
 
 class
 OCTAVE_API
 NDArray : public MArray<double>
 {
 public:
diff --git a/liboctave/array/dRowVector.h b/liboctave/array/dRowVector.h
--- a/liboctave/array/dRowVector.h
+++ b/liboctave/array/dRowVector.h
@@ -21,17 +21,16 @@ along with Octave; see the file COPYING.
 */
 
 #if ! defined (octave_dRowVector_h)
 #define octave_dRowVector_h 1
 
 #include "octave-config.h"
 
 #include "MArray.h"
-
 #include "mx-defs.h"
 
 class
 OCTAVE_API
 RowVector : public MArray<double>
 {
 public:
 
diff --git a/liboctave/array/dSparse.cc b/liboctave/array/dSparse.cc
--- a/liboctave/array/dSparse.cc
+++ b/liboctave/array/dSparse.cc
@@ -21,21 +21,17 @@ along with Octave; see the file COPYING.
 <http://www.gnu.org/licenses/>.
 
 */
 
 #if defined (HAVE_CONFIG_H)
 #  include "config.h"
 #endif
 
-#include <cfloat>
-
 #include <iostream>
-#include <vector>
-#include <functional>
 
 #include "quit.h"
 #include "lo-ieee.h"
 #include "lo-lapack-proto.h"
 #include "lo-mappers.h"
 #include "dRowVector.h"
 #include "oct-locbuf.h"
 
diff --git a/liboctave/array/dSparse.h b/liboctave/array/dSparse.h
--- a/liboctave/array/dSparse.h
+++ b/liboctave/array/dSparse.h
@@ -21,28 +21,25 @@ along with Octave; see the file COPYING.
 
 */
 
 #if ! defined (octave_dSparse_h)
 #define octave_dSparse_h 1
 
 #include "octave-config.h"
 
+#include "CColVector.h"
+#include "CMatrix.h"
+#include "DET.h"
+#include "MSparse.h"
+#include "MatrixType.h"
+#include "Sparse-op-decls.h"
+#include "dColVector.h"
 #include "dMatrix.h"
 #include "dNDArray.h"
-#include "CMatrix.h"
-#include "dColVector.h"
-#include "CColVector.h"
-
-#include "DET.h"
-#include "MSparse.h"
-
-#include "Sparse-op-decls.h"
-
-#include "MatrixType.h"
 
 class PermMatrix;
 class DiagMatrix;
 class SparseComplexMatrix;
 class SparseBoolMatrix;
 
 class
 OCTAVE_API
diff --git a/liboctave/array/dim-vector.cc b/liboctave/array/dim-vector.cc
--- a/liboctave/array/dim-vector.cc
+++ b/liboctave/array/dim-vector.cc
@@ -20,20 +20,19 @@ along with Octave; see the file COPYING.
 <http://www.gnu.org/licenses/>.
 
 */
 
 #if defined (HAVE_CONFIG_H)
 #  include "config.h"
 #endif
 
+#include <limits>
+#include <new>
 #include <sstream>
-#include <limits>
-#include <string>
-#include <new>
 
 #include "dim-vector.h"
 
 octave_idx_type *
 dim_vector::nil_rep (void)
 {
   static dim_vector zv (0, 0);
   return zv.rep;
diff --git a/liboctave/array/dim-vector.h b/liboctave/array/dim-vector.h
--- a/liboctave/array/dim-vector.h
+++ b/liboctave/array/dim-vector.h
@@ -27,17 +27,16 @@ along with Octave; see the file COPYING.
 #include "octave-config.h"
 
 #include <cassert>
 
 #include <algorithm>
 #include <initializer_list>
 #include <string>
 
-#include "lo-error.h"
 #include "oct-refcount.h"
 
 //! Vector representing the dimensions (size) of an Array.
 /*!
   A dim_vector is used to represent dimensions of an Array.  It is used
   on its constructor to specify its size, or when reshaping it.
 
   @code{.cc}
diff --git a/liboctave/array/fCColVector.h b/liboctave/array/fCColVector.h
--- a/liboctave/array/fCColVector.h
+++ b/liboctave/array/fCColVector.h
@@ -22,17 +22,16 @@ along with Octave; see the file COPYING.
 */
 
 #if ! defined (octave_fCColVector_h)
 #define octave_fCColVector_h 1
 
 #include "octave-config.h"
 
 #include "MArray.h"
-
 #include "mx-defs.h"
 
 class
 OCTAVE_API
 FloatComplexColumnVector : public MArray<FloatComplex>
 {
   friend class FloatComplexMatrix;
   friend class FloatComplexRowVector;
diff --git a/liboctave/array/fCDiagMatrix.h b/liboctave/array/fCDiagMatrix.h
--- a/liboctave/array/fCDiagMatrix.h
+++ b/liboctave/array/fCDiagMatrix.h
@@ -20,24 +20,22 @@ along with Octave; see the file COPYING.
 
 */
 
 #if ! defined (octave_fCDiagMatrix_h)
 #define octave_fCDiagMatrix_h 1
 
 #include "octave-config.h"
 
+#include "DET.h"
 #include "MDiagArray2.h"
-
-#include "fRowVector.h"
+#include "fCColVector.h"
 #include "fCRowVector.h"
 #include "fColVector.h"
-#include "fCColVector.h"
-#include "DET.h"
-
+#include "fRowVector.h"
 #include "mx-defs.h"
 
 class
 OCTAVE_API
 FloatComplexDiagMatrix : public MDiagArray2<FloatComplex>
 {
 public:
 
diff --git a/liboctave/array/fCMatrix.cc b/liboctave/array/fCMatrix.cc
--- a/liboctave/array/fCMatrix.cc
+++ b/liboctave/array/fCMatrix.cc
@@ -22,52 +22,49 @@ along with Octave; see the file COPYING.
 <http://www.gnu.org/licenses/>.
 
 */
 
 #if defined (HAVE_CONFIG_H)
 #  include "config.h"
 #endif
 
-#include <cfloat>
-
+#include <algorithm>
+#include <complex>
 #include <iostream>
-#include <vector>
-
-// FIXME
-#include <sys/types.h>
+#include <limits>
 
 #include "Array-util.h"
 #include "DET.h"
 #include "boolMatrix.h"
 #include "chMatrix.h"
 #include "chol.h"
+#include "fCColVector.h"
+#include "fCDiagMatrix.h"
 #include "fCMatrix.h"
 #include "fCNDArray.h"
-#include "fCDiagMatrix.h"
-#include "fCColVector.h"
 #include "fCRowVector.h"
-#include "schur.h"
-#include "svd.h"
 #include "functor.h"
 #include "lo-blas-proto.h"
 #include "lo-error.h"
 #include "lo-ieee.h"
 #include "lo-lapack-proto.h"
 #include "lo-mappers.h"
 #include "lo-utils.h"
 #include "mx-fcm-fdm.h"
 #include "mx-fcm-fs.h"
 #include "mx-fdm-fcm.h"
 #include "mx-inlines.cc"
 #include "mx-op-defs.h"
 #include "oct-cmplx.h"
 #include "oct-fftw.h"
 #include "oct-locbuf.h"
 #include "oct-norm.h"
+#include "schur.h"
+#include "svd.h"
 
 static const FloatComplex FloatComplex_NaN_result (octave::numeric_limits<float>::NaN (),
                                                    octave::numeric_limits<float>::NaN ());
 
 // FloatComplex Matrix class
 
 FloatComplexMatrix::FloatComplexMatrix (const FloatMatrix& a)
   : FloatComplexNDArray (a)
diff --git a/liboctave/array/fCMatrix.h b/liboctave/array/fCMatrix.h
--- a/liboctave/array/fCMatrix.h
+++ b/liboctave/array/fCMatrix.h
@@ -20,25 +20,24 @@ along with Octave; see the file COPYING.
 
 */
 
 #if ! defined (octave_fCMatrix_h)
 #define octave_fCMatrix_h 1
 
 #include "octave-config.h"
 
-#include "fCNDArray.h"
+#include "DET.h"
 #include "MArray.h"
 #include "MDiagArray2.h"
 #include "MatrixType.h"
-
+#include "fCNDArray.h"
 #include "mx-defs.h"
 #include "mx-op-decl.h"
 #include "oct-cmplx.h"
-#include "DET.h"
 
 class
 OCTAVE_API
 FloatComplexMatrix : public FloatComplexNDArray
 {
 public:
 
   typedef FloatComplexColumnVector column_vector_type;
diff --git a/liboctave/array/fCNDArray.cc b/liboctave/array/fCNDArray.cc
--- a/liboctave/array/fCNDArray.cc
+++ b/liboctave/array/fCNDArray.cc
@@ -21,19 +21,18 @@ along with Octave; see the file COPYING.
 <http://www.gnu.org/licenses/>.
 
 */
 
 #if defined (HAVE_CONFIG_H)
 #  include "config.h"
 #endif
 
-#include <cfloat>
-
-#include <vector>
+#include <complex>
+#include <iostream>
 
 #include "Array-util.h"
 #include "f77-fcn.h"
 #include "fCNDArray.h"
 #include "functor.h"
 #include "lo-ieee.h"
 #include "lo-mappers.h"
 #include "mx-base.h"
diff --git a/liboctave/array/fCNDArray.h b/liboctave/array/fCNDArray.h
--- a/liboctave/array/fCNDArray.h
+++ b/liboctave/array/fCNDArray.h
@@ -21,20 +21,19 @@ along with Octave; see the file COPYING.
 */
 
 #if ! defined (octave_fCNDArray_h)
 #define octave_fCNDArray_h 1
 
 #include "octave-config.h"
 
 #include "MArray.h"
-
+#include "bsxfun-decl.h"
 #include "mx-defs.h"
 #include "mx-op-decl.h"
-#include "bsxfun-decl.h"
 
 class
 OCTAVE_API
 FloatComplexNDArray : public MArray<FloatComplex>
 {
 public:
 
   FloatComplexNDArray (void) : MArray<FloatComplex> () { }
diff --git a/liboctave/array/fCRowVector.h b/liboctave/array/fCRowVector.h
--- a/liboctave/array/fCRowVector.h
+++ b/liboctave/array/fCRowVector.h
@@ -22,17 +22,16 @@ along with Octave; see the file COPYING.
 
 #if ! defined (octave_fCRowVector_h)
 #define octave_fCRowVector_h 1
 
 #include "octave-config.h"
 
 #include "MArray.h"
 #include "fRowVector.h"
-
 #include "mx-defs.h"
 
 class
 OCTAVE_API
 FloatComplexRowVector : public MArray<FloatComplex>
 {
   friend class FloatComplexColumnVector;
 
diff --git a/liboctave/array/fColVector.h b/liboctave/array/fColVector.h
--- a/liboctave/array/fColVector.h
+++ b/liboctave/array/fColVector.h
@@ -22,17 +22,16 @@ along with Octave; see the file COPYING.
 */
 
 #if ! defined (octave_fColVector_h)
 #define octave_fColVector_h 1
 
 #include "octave-config.h"
 
 #include "MArray.h"
-
 #include "mx-defs.h"
 
 class
 OCTAVE_API
 FloatColumnVector : public MArray<float>
 {
 public:
 
diff --git a/liboctave/array/fDiagMatrix.h b/liboctave/array/fDiagMatrix.h
--- a/liboctave/array/fDiagMatrix.h
+++ b/liboctave/array/fDiagMatrix.h
@@ -20,22 +20,20 @@ along with Octave; see the file COPYING.
 
 */
 
 #if ! defined (octave_fDiagMatrix_h)
 #define octave_fDiagMatrix_h 1
 
 #include "octave-config.h"
 
+#include "DET.h"
 #include "MDiagArray2.h"
-
+#include "fColVector.h"
 #include "fRowVector.h"
-#include "fColVector.h"
-#include "DET.h"
-
 #include "mx-defs.h"
 
 class
 OCTAVE_API
 FloatDiagMatrix : public MDiagArray2<float>
 {
 public:
 
diff --git a/liboctave/array/fMatrix.cc b/liboctave/array/fMatrix.cc
--- a/liboctave/array/fMatrix.cc
+++ b/liboctave/array/fMatrix.cc
@@ -22,54 +22,53 @@ along with Octave; see the file COPYING.
 <http://www.gnu.org/licenses/>.
 
 */
 
 #if defined (HAVE_CONFIG_H)
 #  include "config.h"
 #endif
 
-#include <cfloat>
-
+#include <algorithm>
 #include <iostream>
-#include <vector>
-
-#include "fNDArray.h"
+#include <limits>
+
 #include "Array-util.h"
+#include "DET.h"
+#include "PermMatrix.h"
 #include "boolMatrix.h"
+#include "byte-swap.h"
 #include "chMatrix.h"
 #include "chol.h"
-#include "fMatrix.h"
-#include "fDiagMatrix.h"
+#include "fCColVector.h"
 #include "fCMatrix.h"
 #include "fColVector.h"
+#include "fDiagMatrix.h"
+#include "fMatrix.h"
+#include "fMatrix.h"
+#include "fNDArray.h"
 #include "fRowVector.h"
-#include "fCColVector.h"
-#include "PermMatrix.h"
-#include "DET.h"
-#include "byte-swap.h"
-#include "fMatrix.h"
-#include "schur.h"
-#include "svd.h"
 #include "functor.h"
 #include "lo-blas-proto.h"
 #include "lo-error.h"
 #include "lo-ieee.h"
 #include "lo-lapack-proto.h"
 #include "lo-mappers.h"
 #include "lo-utils.h"
 #include "mx-fdm-fm.h"
 #include "mx-fm-fdm.h"
 #include "mx-inlines.cc"
 #include "mx-op-defs.h"
 #include "oct-cmplx.h"
 #include "oct-fftw.h"
 #include "oct-locbuf.h"
 #include "oct-norm.h"
 #include "quit.h"
+#include "schur.h"
+#include "svd.h"
 
 // Matrix class.
 
 FloatMatrix::FloatMatrix (const FloatRowVector& rv)
   : FloatNDArray (rv)
 { }
 
 FloatMatrix::FloatMatrix (const FloatColumnVector& cv)
diff --git a/liboctave/array/fMatrix.h b/liboctave/array/fMatrix.h
--- a/liboctave/array/fMatrix.h
+++ b/liboctave/array/fMatrix.h
@@ -20,24 +20,23 @@ along with Octave; see the file COPYING.
 
 */
 
 #if ! defined (octave_fMatrix_h)
 #define octave_fMatrix_h 1
 
 #include "octave-config.h"
 
-#include "fNDArray.h"
+#include "DET.h"
 #include "MArray.h"
 #include "MDiagArray2.h"
 #include "MatrixType.h"
-
+#include "fNDArray.h"
 #include "mx-defs.h"
 #include "mx-op-decl.h"
-#include "DET.h"
 
 class
 OCTAVE_API
 FloatMatrix : public FloatNDArray
 {
 public:
 
   typedef FloatColumnVector column_vector_type;
diff --git a/liboctave/array/fNDArray.cc b/liboctave/array/fNDArray.cc
--- a/liboctave/array/fNDArray.cc
+++ b/liboctave/array/fNDArray.cc
@@ -21,19 +21,18 @@ along with Octave; see the file COPYING.
 <http://www.gnu.org/licenses/>.
 
 */
 
 #if defined (HAVE_CONFIG_H)
 #  include "config.h"
 #endif
 
-#include <cfloat>
-
-#include <vector>
+#include <iostream>
+#include <limits>
 
 #include "Array-util.h"
 #include "f77-fcn.h"
 #include "fNDArray.h"
 #include "functor.h"
 #include "lo-error.h"
 #include "lo-ieee.h"
 #include "lo-mappers.h"
diff --git a/liboctave/array/fNDArray.h b/liboctave/array/fNDArray.h
--- a/liboctave/array/fNDArray.h
+++ b/liboctave/array/fNDArray.h
@@ -21,20 +21,19 @@ along with Octave; see the file COPYING.
 */
 
 #if ! defined (octave_fNDArray_h)
 #define octave_fNDArray_h 1
 
 #include "octave-config.h"
 
 #include "MArray.h"
-
+#include "bsxfun-decl.h"
 #include "mx-defs.h"
 #include "mx-op-decl.h"
-#include "bsxfun-decl.h"
 
 template <typename T> class intNDArray;
 
 class
 OCTAVE_API
 FloatNDArray : public MArray<float>
 {
 public:
diff --git a/liboctave/array/fRowVector.h b/liboctave/array/fRowVector.h
--- a/liboctave/array/fRowVector.h
+++ b/liboctave/array/fRowVector.h
@@ -21,17 +21,16 @@ along with Octave; see the file COPYING.
 */
 
 #if ! defined (octave_fRowVector_h)
 #define octave_fRowVector_h 1
 
 #include "octave-config.h"
 
 #include "MArray.h"
-
 #include "mx-defs.h"
 
 class
 OCTAVE_API
 FloatRowVector : public MArray<float>
 {
 public:
 
diff --git a/liboctave/array/int16NDArray.h b/liboctave/array/int16NDArray.h
--- a/liboctave/array/int16NDArray.h
+++ b/liboctave/array/int16NDArray.h
@@ -20,20 +20,20 @@ along with Octave; see the file COPYING.
 
 */
 
 #if ! defined (octave_int16NDArray_h)
 #define octave_int16NDArray_h 1
 
 #include "octave-config.h"
 
+#include "bsxfun-decl.h"
 #include "intNDArray.h"
 #include "mx-op-decl.h"
 #include "oct-inttypes-fwd.h"
-#include "bsxfun-decl.h"
 
 typedef intNDArray<octave_int16> int16NDArray;
 
 NDS_CMP_OP_DECLS (int16NDArray, octave_int16, OCTAVE_API)
 NDS_BOOL_OP_DECLS (int16NDArray, octave_int16, OCTAVE_API)
 
 SND_CMP_OP_DECLS (octave_int16, int16NDArray, OCTAVE_API)
 SND_BOOL_OP_DECLS (octave_int16, int16NDArray, OCTAVE_API)
diff --git a/liboctave/array/int32NDArray.h b/liboctave/array/int32NDArray.h
--- a/liboctave/array/int32NDArray.h
+++ b/liboctave/array/int32NDArray.h
@@ -20,20 +20,20 @@ along with Octave; see the file COPYING.
 
 */
 
 #if ! defined (octave_int32NDArray_h)
 #define octave_int32NDArray_h 1
 
 #include "octave-config.h"
 
+#include "bsxfun-decl.h"
 #include "intNDArray.h"
 #include "mx-op-decl.h"
 #include "oct-inttypes-fwd.h"
-#include "bsxfun-decl.h"
 
 typedef intNDArray<octave_int32> int32NDArray;
 
 NDS_CMP_OP_DECLS (int32NDArray, octave_int32, OCTAVE_API)
 NDS_BOOL_OP_DECLS (int32NDArray, octave_int32, OCTAVE_API)
 
 SND_CMP_OP_DECLS (octave_int32, int32NDArray, OCTAVE_API)
 SND_BOOL_OP_DECLS (octave_int32, int32NDArray, OCTAVE_API)
diff --git a/liboctave/array/int64NDArray.h b/liboctave/array/int64NDArray.h
--- a/liboctave/array/int64NDArray.h
+++ b/liboctave/array/int64NDArray.h
@@ -20,20 +20,20 @@ along with Octave; see the file COPYING.
 
 */
 
 #if ! defined (octave_int64NDArray_h)
 #define octave_int64NDArray_h 1
 
 #include "octave-config.h"
 
+#include "bsxfun-decl.h"
 #include "intNDArray.h"
 #include "mx-op-decl.h"
 #include "oct-inttypes-fwd.h"
-#include "bsxfun-decl.h"
 
 typedef intNDArray<octave_int64> int64NDArray;
 
 NDS_CMP_OP_DECLS (int64NDArray, octave_int64, OCTAVE_API)
 NDS_BOOL_OP_DECLS (int64NDArray, octave_int64, OCTAVE_API)
 
 SND_CMP_OP_DECLS (octave_int64, int64NDArray, OCTAVE_API)
 SND_BOOL_OP_DECLS (octave_int64, int64NDArray, OCTAVE_API)
diff --git a/liboctave/array/int8NDArray.h b/liboctave/array/int8NDArray.h
--- a/liboctave/array/int8NDArray.h
+++ b/liboctave/array/int8NDArray.h
@@ -20,20 +20,20 @@ along with Octave; see the file COPYING.
 
 */
 
 #if ! defined (octave_int8NDArray_h)
 #define octave_int8NDArray_h 1
 
 #include "octave-config.h"
 
+#include "bsxfun-decl.h"
 #include "intNDArray.h"
 #include "mx-op-decl.h"
 #include "oct-inttypes-fwd.h"
-#include "bsxfun-decl.h"
 
 typedef intNDArray<octave_int8> int8NDArray;
 
 NDS_CMP_OP_DECLS (int8NDArray, octave_int8, OCTAVE_API)
 NDS_BOOL_OP_DECLS (int8NDArray, octave_int8, OCTAVE_API)
 
 SND_CMP_OP_DECLS (octave_int8, int8NDArray, OCTAVE_API)
 SND_BOOL_OP_DECLS (octave_int8, int8NDArray, OCTAVE_API)
diff --git a/liboctave/array/intNDArray.h b/liboctave/array/intNDArray.h
--- a/liboctave/array/intNDArray.h
+++ b/liboctave/array/intNDArray.h
@@ -22,16 +22,17 @@ along with Octave; see the file COPYING.
 
 #if ! defined (octave_intNDArray_h)
 #define octave_intNDArray_h 1
 
 #include "octave-config.h"
 
 #include "MArray.h"
 #include "boolNDArray.h"
+
 class NDArray;
 
 template <typename T>
 class
 intNDArray : public MArray<T>
 {
 public:
 
diff --git a/liboctave/array/uint16NDArray.h b/liboctave/array/uint16NDArray.h
--- a/liboctave/array/uint16NDArray.h
+++ b/liboctave/array/uint16NDArray.h
@@ -20,20 +20,20 @@ along with Octave; see the file COPYING.
 
 */
 
 #if ! defined (octave_uint16NDArray_h)
 #define octave_uint16NDArray_h 1
 
 #include "octave-config.h"
 
+#include "bsxfun-decl.h"
 #include "intNDArray.h"
 #include "mx-op-decl.h"
 #include "oct-inttypes-fwd.h"
-#include "bsxfun-decl.h"
 
 typedef intNDArray<octave_uint16> uint16NDArray;
 
 NDS_CMP_OP_DECLS (uint16NDArray, octave_uint16, OCTAVE_API)
 NDS_BOOL_OP_DECLS (uint16NDArray, octave_uint16, OCTAVE_API)
 
 SND_CMP_OP_DECLS (octave_uint16, uint16NDArray, OCTAVE_API)
 SND_BOOL_OP_DECLS (octave_uint16, uint16NDArray, OCTAVE_API)
diff --git a/liboctave/array/uint32NDArray.h b/liboctave/array/uint32NDArray.h
--- a/liboctave/array/uint32NDArray.h
+++ b/liboctave/array/uint32NDArray.h
@@ -20,20 +20,20 @@ along with Octave; see the file COPYING.
 
 */
 
 #if ! defined (octave_uint32NDArray_h)
 #define octave_uint32NDArray_h 1
 
 #include "octave-config.h"
 
+#include "bsxfun-decl.h"
 #include "intNDArray.h"
 #include "mx-op-decl.h"
 #include "oct-inttypes-fwd.h"
-#include "bsxfun-decl.h"
 
 typedef intNDArray<octave_uint32> uint32NDArray;
 
 NDS_CMP_OP_DECLS (uint32NDArray, octave_uint32, OCTAVE_API)
 NDS_BOOL_OP_DECLS (uint32NDArray, octave_uint32, OCTAVE_API)
 
 SND_CMP_OP_DECLS (octave_uint32, uint32NDArray, OCTAVE_API)
 SND_BOOL_OP_DECLS (octave_uint32, uint32NDArray, OCTAVE_API)
diff --git a/liboctave/array/uint64NDArray.h b/liboctave/array/uint64NDArray.h
--- a/liboctave/array/uint64NDArray.h
+++ b/liboctave/array/uint64NDArray.h
@@ -20,20 +20,20 @@ along with Octave; see the file COPYING.
 
 */
 
 #if ! defined (octave_uint64NDArray_h)
 #define octave_uint64NDArray_h 1
 
 #include "octave-config.h"
 
+#include "bsxfun-decl.h"
 #include "intNDArray.h"
 #include "mx-op-decl.h"
 #include "oct-inttypes-fwd.h"
-#include "bsxfun-decl.h"
 
 typedef intNDArray<octave_uint64> uint64NDArray;
 
 NDS_CMP_OP_DECLS (uint64NDArray, octave_uint64, OCTAVE_API)
 NDS_BOOL_OP_DECLS (uint64NDArray, octave_uint64, OCTAVE_API)
 
 SND_CMP_OP_DECLS (octave_uint64, uint64NDArray, OCTAVE_API)
 SND_BOOL_OP_DECLS (octave_uint64, uint64NDArray, OCTAVE_API)
diff --git a/liboctave/array/uint8NDArray.h b/liboctave/array/uint8NDArray.h
--- a/liboctave/array/uint8NDArray.h
+++ b/liboctave/array/uint8NDArray.h
@@ -20,20 +20,20 @@ along with Octave; see the file COPYING.
 
 */
 
 #if ! defined (octave_uint8NDArray_h)
 #define octave_uint8NDArray_h 1
 
 #include "octave-config.h"
 
+#include "bsxfun-decl.h"
 #include "intNDArray.h"
 #include "mx-op-decl.h"
 #include "oct-inttypes-fwd.h"
-#include "bsxfun-decl.h"
 
 typedef intNDArray<octave_uint8> uint8NDArray;
 
 NDS_CMP_OP_DECLS (uint8NDArray, octave_uint8, OCTAVE_API)
 NDS_BOOL_OP_DECLS (uint8NDArray, octave_uint8, OCTAVE_API)
 
 SND_CMP_OP_DECLS (octave_uint8, uint8NDArray, OCTAVE_API)
 SND_BOOL_OP_DECLS (octave_uint8, uint8NDArray, OCTAVE_API)
diff --git a/liboctave/numeric/CollocWt.cc b/liboctave/numeric/CollocWt.cc
--- a/liboctave/numeric/CollocWt.cc
+++ b/liboctave/numeric/CollocWt.cc
@@ -20,18 +20,17 @@ along with Octave; see the file COPYING.
 
 */
 
 #if defined (HAVE_CONFIG_H)
 #  include "config.h"
 #endif
 
 #include <iostream>
-
-#include <cfloat>
+#include <limits>
 
 #include "CollocWt.h"
 #include "f77-fcn.h"
 #include "lo-error.h"
 
 // The following routines jcobi, dif, and dfopr are based on the code
 // found in Villadsen, J. and M. L. Michelsen, Solution of Differential
 // Equation Models by Polynomial Approximation, Prentice-Hall (1978)
diff --git a/liboctave/numeric/DASPK.cc b/liboctave/numeric/DASPK.cc
--- a/liboctave/numeric/DASPK.cc
+++ b/liboctave/numeric/DASPK.cc
@@ -19,18 +19,16 @@ along with Octave; see the file COPYING.
 <http://www.gnu.org/licenses/>.
 
 */
 
 #if defined (HAVE_CONFIG_H)
 #  include "config.h"
 #endif
 
-#include <cfloat>
-
 #include <sstream>
 
 #include "DASPK.h"
 #include "f77-fcn.h"
 #include "lo-error.h"
 #include "lo-math.h"
 #include "quit.h"
 
diff --git a/liboctave/numeric/DASPK.h b/liboctave/numeric/DASPK.h
--- a/liboctave/numeric/DASPK.h
+++ b/liboctave/numeric/DASPK.h
@@ -20,17 +20,17 @@ along with Octave; see the file COPYING.
 
 */
 
 #if ! defined (octave_DASPK_h)
 #define octave_DASPK_h 1
 
 #include "octave-config.h"
 
-#include <cfloat>
+#include <string>
 
 #include "DASPK-opts.h"
 
 class
 OCTAVE_API
 DASPK : public DAE, public DASPK_options
 {
 public:
diff --git a/liboctave/numeric/DASRT.cc b/liboctave/numeric/DASRT.cc
--- a/liboctave/numeric/DASRT.cc
+++ b/liboctave/numeric/DASRT.cc
@@ -19,18 +19,16 @@ along with Octave; see the file COPYING.
 <http://www.gnu.org/licenses/>.
 
 */
 
 #if defined (HAVE_CONFIG_H)
 #  include "config.h"
 #endif
 
-#include <cfloat>
-
 #include <sstream>
 
 #include "DASRT.h"
 #include "f77-fcn.h"
 #include "lo-error.h"
 #include "lo-math.h"
 #include "quit.h"
 
diff --git a/liboctave/numeric/DASRT.h b/liboctave/numeric/DASRT.h
--- a/liboctave/numeric/DASRT.h
+++ b/liboctave/numeric/DASRT.h
@@ -20,17 +20,17 @@ along with Octave; see the file COPYING.
 
 */
 
 #if ! defined (octave_DASRT_h)
 #define octave_DASRT_h 1
 
 #include "octave-config.h"
 
-#include <cfloat>
+#include <string>
 
 #include "DASRT-opts.h"
 
 class
 DASRT_result
 {
 public:
 
diff --git a/liboctave/numeric/DASSL.cc b/liboctave/numeric/DASSL.cc
--- a/liboctave/numeric/DASSL.cc
+++ b/liboctave/numeric/DASSL.cc
@@ -19,18 +19,16 @@ along with Octave; see the file COPYING.
 <http://www.gnu.org/licenses/>.
 
 */
 
 #if defined (HAVE_CONFIG_H)
 #  include "config.h"
 #endif
 
-#include <cfloat>
-
 #include <sstream>
 
 #include "DASSL.h"
 #include "f77-fcn.h"
 #include "lo-error.h"
 #include "lo-math.h"
 #include "quit.h"
 
diff --git a/liboctave/numeric/DASSL.h b/liboctave/numeric/DASSL.h
--- a/liboctave/numeric/DASSL.h
+++ b/liboctave/numeric/DASSL.h
@@ -20,17 +20,17 @@ along with Octave; see the file COPYING.
 
 */
 
 #if ! defined (octave_DASSL_h)
 #define octave_DASSL_h 1
 
 #include "octave-config.h"
 
-#include <cfloat>
+#include <string>
 
 #include "DASSL-opts.h"
 
 class
 OCTAVE_API
 DASSL : public DAE, public DASSL_options
 {
 public:
diff --git a/liboctave/numeric/LSODE.cc b/liboctave/numeric/LSODE.cc
--- a/liboctave/numeric/LSODE.cc
+++ b/liboctave/numeric/LSODE.cc
@@ -19,18 +19,16 @@ along with Octave; see the file COPYING.
 <http://www.gnu.org/licenses/>.
 
 */
 
 #if defined (HAVE_CONFIG_H)
 #  include "config.h"
 #endif
 
-#include <cfloat>
-
 #include <sstream>
 
 #include "LSODE.h"
 #include "f77-fcn.h"
 #include "lo-error.h"
 #include "lo-math.h"
 #include "quit.h"
 
diff --git a/liboctave/numeric/LSODE.h b/liboctave/numeric/LSODE.h
--- a/liboctave/numeric/LSODE.h
+++ b/liboctave/numeric/LSODE.h
@@ -20,17 +20,17 @@ along with Octave; see the file COPYING.
 
 */
 
 #if ! defined (octave_LSODE_h)
 #define octave_LSODE_h 1
 
 #include "octave-config.h"
 
-#include <cfloat>
+#include <string>
 
 #include "LSODE-opts.h"
 
 class
 OCTAVE_API
 LSODE : public ODE, public LSODE_options
 {
 public:
diff --git a/liboctave/numeric/Quad.h b/liboctave/numeric/Quad.h
--- a/liboctave/numeric/Quad.h
+++ b/liboctave/numeric/Quad.h
@@ -20,18 +20,16 @@ along with Octave; see the file COPYING.
 
 */
 
 #if ! defined (octave_Quad_h)
 #define octave_Quad_h 1
 
 #include "octave-config.h"
 
-#include <cfloat>
-
 #include "dColVector.h"
 #include "fColVector.h"
 
 typedef double (*integrand_fcn) (double x);
 typedef float (*float_integrand_fcn) (float x);
 
 // FIXME: would be nice to not have to have this global variable.
 // Nonzero means an error occurred in the calculation of the integrand
diff --git a/liboctave/numeric/eigs-base.cc b/liboctave/numeric/eigs-base.cc
--- a/liboctave/numeric/eigs-base.cc
+++ b/liboctave/numeric/eigs-base.cc
@@ -19,30 +19,28 @@ along with Octave; see the file COPYING.
 <http://www.gnu.org/licenses/>.
 
 */
 
 #if defined (HAVE_CONFIG_H)
 #  include "config.h"
 #endif
 
-#include <cfloat>
 #include <cmath>
-#include <vector>
 #include <iostream>
 
 #include "CSparse.h"
-#include "lu.h"
 #include "MatrixType.h"
 #include "chol.h"
 #include "dSparse.h"
 #include "eigs-base.h"
 #include "f77-fcn.h"
 #include "lo-arpack-proto.h"
 #include "lo-blas-proto.h"
+#include "lu.h"
 #include "mx-ops.h"
 #include "oct-locbuf.h"
 #include "oct-rand.h"
 #include "quit.h"
 #include "sparse-chol.h"
 #include "sparse-lu.h"
 
 #if defined (HAVE_ARPACK)
diff --git a/liboctave/numeric/eigs-base.h b/liboctave/numeric/eigs-base.h
--- a/liboctave/numeric/eigs-base.h
+++ b/liboctave/numeric/eigs-base.h
@@ -21,16 +21,17 @@ along with Octave; see the file COPYING.
 */
 
 #if ! defined (octave_eigs_base_h)
 #define octave_eigs_base_h 1
 
 #include "octave-config.h"
 
 #include <iosfwd>
+#include <string>
 
 #include "oct-cmplx.h"
 
 class ColumnVector;
 class ComplexColumnVector;
 class Matrix;
 class ComplexMatrix;
 
diff --git a/liboctave/numeric/lo-mappers.cc b/liboctave/numeric/lo-mappers.cc
--- a/liboctave/numeric/lo-mappers.cc
+++ b/liboctave/numeric/lo-mappers.cc
@@ -20,18 +20,16 @@ along with Octave; see the file COPYING.
 <http://www.gnu.org/licenses/>.
 
 */
 
 #if defined (HAVE_CONFIG_H)
 #  include "config.h"
 #endif
 
-#include <cfloat>
-
 #include "lo-error.h"
 #include "lo-ieee.h"
 #include "lo-mappers.h"
 #include "lo-math.h"
 #include "lo-specfun.h"
 #include "lo-utils.h"
 #include "math-wrappers.h"
 #include "oct-cmplx.h"
diff --git a/liboctave/numeric/lo-mappers.h b/liboctave/numeric/lo-mappers.h
--- a/liboctave/numeric/lo-mappers.h
+++ b/liboctave/numeric/lo-mappers.h
@@ -23,20 +23,20 @@ along with Octave; see the file COPYING.
 
 #if ! defined (octave_lo_mappers_h)
 #define octave_lo_mappers_h 1
 
 #include "octave-config.h"
 
 #include <limits>
 
+#include "lo-ieee.h"
+#include "lo-math.h"
 #include "oct-cmplx.h"
 #include "oct-inttypes-fwd.h"
-#include "lo-math.h"
-#include "lo-ieee.h"
 
 namespace octave
 {
   namespace math
   {
     extern OCTAVE_API bool is_NA (double x);
     extern OCTAVE_API bool is_NA (float x);
 
diff --git a/liboctave/numeric/oct-norm.cc b/liboctave/numeric/oct-norm.cc
--- a/liboctave/numeric/oct-norm.cc
+++ b/liboctave/numeric/oct-norm.cc
@@ -21,21 +21,19 @@ along with Octave; see the file COPYING.
 */
 
 // author: Jaroslav Hajek <highegg@gmail.com>
 
 #if defined (HAVE_CONFIG_H)
 #  include "config.h"
 #endif
 
-#include <cassert>
-#include <cfloat>
 #include <cmath>
 
-#include <iostream>
+#include <limits>
 #include <vector>
 
 #include "Array-util.h"
 #include "Array.h"
 #include "CColVector.h"
 #include "CMatrix.h"
 #include "CRowVector.h"
 #include "CSparse.h"
diff --git a/liboctave/util/lo-ieee.cc b/liboctave/util/lo-ieee.cc
--- a/liboctave/util/lo-ieee.cc
+++ b/liboctave/util/lo-ieee.cc
@@ -19,19 +19,17 @@ along with Octave; see the file COPYING.
 <http://www.gnu.org/licenses/>.
 
 */
 
 #if defined (HAVE_CONFIG_H)
 #  include "config.h"
 #endif
 
-#include <cfloat>
 #include <cmath>
-#include <cstdlib>
 
 #include <limits>
 
 static double lo_inf;
 static double lo_nan;
 static double lo_na;
 
 static float lo_float_inf;
diff --git a/liboctave/util/lo-utils.cc b/liboctave/util/lo-utils.cc
--- a/liboctave/util/lo-utils.cc
+++ b/liboctave/util/lo-utils.cc
@@ -1,9 +1,8 @@
-// utils.cc
 /*
 
 Copyright (C) 1996-2017 John W. Eaton
 
 This file is part of Octave.
 
 Octave is free software; you can redistribute it and/or modify it
 under the terms of the GNU General Public License as published by
@@ -20,22 +19,20 @@ along with Octave; see the file COPYING.
 <http://www.gnu.org/licenses/>.
 
 */
 
 #if defined (HAVE_CONFIG_H)
 #  include "config.h"
 #endif
 
-#include <cctype>
 #include <cstdlib>
-#include <cstdio>
 #include <cstring>
-#include <cfloat>
 
+#include <complex>
 #include <limits>
 #include <string>
 
 #include "quit.h"
 
 #include "lo-error.h"
 #include "lo-ieee.h"
 #include "lo-mappers.h"
diff --git a/liboctave/util/lo-utils.h b/liboctave/util/lo-utils.h
--- a/liboctave/util/lo-utils.h
+++ b/liboctave/util/lo-utils.h
@@ -25,20 +25,19 @@ along with Octave; see the file COPYING.
 
 #include "octave-config.h"
 
 #include <cstdio>
 
 #include <iostream>
 #include <string>
 
-#include "quit.h"
-
 #include "lo-cutils.h"
 #include "oct-cmplx.h"
+#include "quit.h"
 
 // Generic any/all test functionality with arbitrary predicate.
 
 template <typename F, typename T, bool zero>
 bool
 any_all_test (F fcn, const T *m, octave_idx_type len)
 {
   octave_idx_type i;
diff --git a/liboctave/util/oct-refcount.h b/liboctave/util/oct-refcount.h
--- a/liboctave/util/oct-refcount.h
+++ b/liboctave/util/oct-refcount.h
@@ -20,18 +20,16 @@ along with Octave; see the file COPYING.
 
 */
 
 #if ! defined (octave_oct_refcount_h)
 #define octave_oct_refcount_h 1
 
 #include "octave-config.h"
 
-#include "octave-config.h"
-
 #if (defined (OCTAVE_ENABLE_ATOMIC_REFCOUNT) \
      && (defined (__GNUC__) || defined (_MSC_VER)))
 
 #  if defined (__GNUC__)
 
 #    define OCTAVE_ATOMIC_INCREMENT(x) __sync_add_and_fetch (x,  1)
 #    define OCTAVE_ATOMIC_DECREMENT(x) __sync_add_and_fetch (x, -1)
 #    define OCTAVE_ATOMIC_POST_INCREMENT(x) __sync_fetch_and_add (x,  1)
