# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1328733748 18000
#      Wed Feb 08 15:42:28 2012 -0500
# Branch stable
# Node ID acc26b860afa76f3dc131975b0f29b0681fcfcd5
# Parent  2cd56a5e3a66f70336e91269adf311d6606a5a68
fix indexed assignment bug (bug #35482)

* pt-idx.cc (make_value_list): New argument, rvalue.
Only require object to be defined if rvalue is true.
(tree_index_expression::lvalue): Call make_value_list with rvalue
argument set to false.  New test.

diff --git a/src/pt-idx.cc b/src/pt-idx.cc
--- a/src/pt-idx.cc
+++ b/src/pt-idx.cc
@@ -172,23 +172,23 @@ make_subs_cell (tree_argument_list *args
         }
     }
 
   return retval;
 }
 
 static inline octave_value_list
 make_value_list (tree_argument_list *args, const string_vector& arg_nm,
-                 const octave_value *object)
+                 const octave_value *object, bool rvalue = true)
 {
   octave_value_list retval;
 
   if (args)
     {
-      if (object && args->has_magic_end () && object->is_undefined ())
+      if (rvalue && object && args->has_magic_end () && object->is_undefined ())
         gripe_invalid_inquiry_subscript ();
       else
         retval = args->convert_to_const_vector (object);
     }
 
   if (! error_state)
     {
       octave_idx_type n = retval.length ();
@@ -471,17 +471,17 @@ tree_index_expression::lvalue (void)
           if (error_state)
             break;
 
           switch (type[i])
             {
             case '(':
               {
                 octave_value_list tidx
-                  = make_value_list (*p_args, *p_arg_nm, &tmp);
+                  = make_value_list (*p_args, *p_arg_nm, &tmp, false);
 
                 idx.push_back (tidx);
 
                 if (i < n - 1)
                   {
                     if (type[i+1] == '.')
                       {
                         tmpidx.push_back (tidx);
@@ -491,17 +491,17 @@ tree_index_expression::lvalue (void)
                       error ("() must be followed by . or close the index chain");
                   }
               }
               break;
 
             case '{':
               {
                 octave_value_list tidx
-                  = make_value_list (*p_args, *p_arg_nm, &tmp);
+                  = make_value_list (*p_args, *p_arg_nm, &tmp, false);
 
                 if (tmp.is_undefined ())
                   {
                     if (tidx.has_magic_colon ())
                       gripe_invalid_inquiry_subscript ();
                     else
                       tmp = Cell ();
                   }
@@ -596,16 +596,28 @@ tree_index_expression::lvalue (void)
 
     }
 
   return retval;
 }
 
 /*
 %!test
+%! clear x
+%! clear y
+%! y = 3;
+%! x(y(end)) = 1;
+%! assert (x, [0, 0, 1]);
+%! clear x
+%! clear y
+%! y = {3};
+%! x(y{end}) = 1;
+%! assert (x, [0, 0, 1]);
+
+%!test
 %! x = {1, 2, 3};
 %! [x{:}] = deal (4, 5, 6);
 %! assert (x, {4, 5, 6});
 
 %!test
 %! [x.a, x.b.c] = deal (1, 2);
 %! assert (x.a == 1 && x.b.c == 2);
 
