# HG changeset patch
# User Jacob Dawid <jacob.dawid@googlemail.com>
# Date 1313534170 -7200
#      Wed Aug 17 00:36:10 2011 +0200
# Node ID fd31226d4c3a5a1b688d6a6a92a199d1196cd99b
# Parent  ac9ef5a29460122ad043533278b3f025ddbad9ec
Proxy settings can now be configured.

diff --git a/gui/src/MainWindow.cpp b/gui/src/MainWindow.cpp
--- a/gui/src/MainWindow.cpp
+++ b/gui/src/MainWindow.cpp
@@ -175,16 +175,17 @@ MainWindow::openOctaveForgePage ()
 }
 
 void
 MainWindow::processSettingsDialogRequest ()
 {
   SettingsDialog settingsDialog (this);
   settingsDialog.exec ();
   emit settingsChanged ();
+  ResourceManager::instance ()->updateNetworkSettings ();
 }
 
 void
 MainWindow::showAboutOctave ()
 {
   QString message =
       "GNU Octave\n"
       "Copyright (C) 2009 John W. Eaton and others.\n"
diff --git a/gui/src/OctaveGUI.cpp b/gui/src/OctaveGUI.cpp
--- a/gui/src/OctaveGUI.cpp
+++ b/gui/src/OctaveGUI.cpp
@@ -34,12 +34,13 @@ main (int argc, char *argv[])
   QSettings *settings = ResourceManager::instance ()->settings ();
   QString language = settings->value ("language").toString ();
 
   QString translatorFile = ResourceManager::instance ()->findTranslatorFile (language);
   QTranslator translator;
   translator.load (translatorFile);
   application.installTranslator (&translator);
 
+  ResourceManager::instance ()->updateNetworkSettings ();
   MainWindow w;
   w.show ();
   return application.exec ();
 }
diff --git a/gui/src/ResourceManager.cpp b/gui/src/ResourceManager.cpp
--- a/gui/src/ResourceManager.cpp
+++ b/gui/src/ResourceManager.cpp
@@ -13,16 +13,17 @@
  * GNU General Public License for more details.
  *
  * You should have received a copy of the GNU General Public License
  * along with this program.  If not, see <http://www.gnu.org/licenses/>.
  */
 
 #include "ResourceManager.h"
 #include <QFile>
+#include <QNetworkProxy>
 
 ResourceManager ResourceManager::m_singleton;
 
 ResourceManager::ResourceManager ()
 {
   m_settings = 0;
   QDesktopServices desktopServices;
   m_homePath = desktopServices.storageLocation (QDesktopServices::HomeLocation);
@@ -58,8 +59,48 @@ ResourceManager::setSettings (QString fi
 }
 
 QString
 ResourceManager::findTranslatorFile (QString language)
 {
   // TODO: Quick hack to be able to test language files.
   return QString("../languages/%1.qm").arg(language);
 }
+
+void
+ResourceManager::updateNetworkSettings ()
+{
+  QNetworkProxy::ProxyType proxyType = QNetworkProxy::NoProxy;
+  if (m_settings->value ("useProxyServer").toBool ())
+    {
+      QString proxyTypeString = m_settings->value ("proxyType").toString ();
+      if (proxyTypeString == "NoProxy")
+        {
+          proxyType = QNetworkProxy::NoProxy;
+        }
+      else if (proxyTypeString == "DefaultProxy")
+        {
+          proxyType = QNetworkProxy::DefaultProxy;
+        }
+      else if (proxyTypeString == "Socks5Proxy")
+        {
+          proxyType = QNetworkProxy::Socks5Proxy;
+        }
+      else if (proxyTypeString == "HttpProxy")
+        {
+          proxyType = QNetworkProxy::HttpProxy;
+        }
+      else if (proxyTypeString == "HttpCachingProxy")
+        {
+          proxyType = QNetworkProxy::HttpCachingProxy;
+        }
+      else if (proxyTypeString == "FtpCachingProxy")
+        {
+          proxyType = QNetworkProxy::FtpCachingProxy;
+        }
+    }
+
+  QNetworkProxy proxy;
+  proxy.setType (proxyType);
+  proxy.setHostName (m_settings->value ("proxyHostName").toString ());
+  proxy.setPort (m_settings->value ("proxyPort").toInt ());
+  QNetworkProxy::setApplicationProxy (proxy);
+}
diff --git a/gui/src/ResourceManager.h b/gui/src/ResourceManager.h
--- a/gui/src/ResourceManager.h
+++ b/gui/src/ResourceManager.h
@@ -32,16 +32,18 @@ public:
   {
     return &m_singleton;
   }
 
   QSettings *settings ();
   QString homePath ();
   void setSettings (QString file);
   QString findTranslatorFile (QString language);
+  void updateNetworkSettings ();
+
 private:
   ResourceManager ();
 
   QSettings *m_settings;
   QString m_homePath;
   static ResourceManager m_singleton;
 };
 
diff --git a/gui/src/SettingsDialog.cpp b/gui/src/SettingsDialog.cpp
--- a/gui/src/SettingsDialog.cpp
+++ b/gui/src/SettingsDialog.cpp
@@ -17,16 +17,28 @@ QDialog (parent), ui (new Ui::SettingsDi
   ui->useCustomFileEditor->setChecked (settings->value ("useCustomFileEditor").toBool ());
   ui->customFileEditor->setText (settings->value ("customFileEditor").toString ());
   ui->showFilenames->setChecked (settings->value ("showFilenames").toBool());
   ui->showFileSize->setChecked (settings->value ("showFileSize").toBool());
   ui->showFileType->setChecked (settings->value ("showFileType").toBool());
   ui->showLastModified->setChecked (settings->value ("showLastModified").toBool());
   ui->showHiddenFiles->setChecked (settings->value ("showHiddenFiles").toBool());
   ui->useAlternatingRowColors->setChecked (settings->value ("useAlternatingRowColors").toBool());
+  ui->useProxyServer->setChecked (settings->value ("useProxyServer").toBool ());
+  ui->proxyHostName->setText (settings->value ("proxyHostName").toString ());
+
+  int currentIndex = 0;
+  QString proxyTypeString = settings->value ("proxyType").toString ();
+  while ( (currentIndex < ui->proxyType->count ()) && (ui->proxyType->currentText () != proxyTypeString))
+    {
+      currentIndex++;
+      ui->proxyType->setCurrentIndex (currentIndex);
+    }
+
+  ui->proxyPort->setText (settings->value ("proxyPort").toString ());
 }
 
 SettingsDialog::~SettingsDialog ()
 {
   QSettings *settings = ResourceManager::instance ()->settings ();
   settings->setValue ("connectOnStartup", ui->connectOnStartup->isChecked ());
   settings->setValue ("showMessageOfTheDay", ui->showMessageOfTheDay->isChecked ());
   settings->setValue ("showTopic", ui->showTopic->isChecked ());
@@ -35,10 +47,14 @@ SettingsDialog::~SettingsDialog ()
   settings->setValue ("useCustomFileEditor", ui->useCustomFileEditor->isChecked ());
   settings->setValue ("customFileEditor", ui->customFileEditor->text ());
   settings->setValue ("showFilenames", ui->showFilenames->isChecked ());
   settings->setValue ("showFileSize", ui->showFileSize->isChecked ());
   settings->setValue ("showFileType", ui->showFileType->isChecked ());
   settings->setValue ("showLastModified", ui->showLastModified->isChecked ());
   settings->setValue ("showHiddenFiles", ui->showHiddenFiles->isChecked ());
   settings->setValue ("useAlternatingRowColors", ui->useAlternatingRowColors->isChecked ());
+  settings->setValue ("useProxyServer", ui->useProxyServer->isChecked ());
+  settings->setValue ("proxyType", ui->proxyType->currentText ());
+  settings->setValue ("proxyHostName", ui->proxyHostName->text ());
+  settings->setValue ("proxyPort", ui->proxyPort->text ());
   delete ui;
 }
