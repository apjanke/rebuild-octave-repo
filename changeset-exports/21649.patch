# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1461791820 14400
#      Wed Apr 27 17:17:00 2016 -0400
# Node ID 0822917dfcf52b43cc1f53d744d4e5ab841ab894
# Parent  1eabc3e24a532f5d5e03e4a46c8eefe92a483512
* ops.h, op-int.h: Style fixes.

diff --git a/libinterp/operators/op-int.h b/libinterp/operators/op-int.h
--- a/libinterp/operators/op-int.h
+++ b/libinterp/operators/op-int.h
@@ -25,49 +25,53 @@ along with Octave; see the file COPYING.
 
 #include "octave-config.h"
 
 #include "quit.h"
 #include "bsxfun.h"
 
 #define DEFINTBINOP_OP(name, t1, t2, op, t3) \
   static octave_value \
-  CONCAT2(oct_binop_, name) (const octave_base_value& a1, const octave_base_value& a2) \
+  CONCAT2 (oct_binop_, name) (const octave_base_value& a1, \
+                              const octave_base_value& a2) \
   { \
     const octave_ ## t1& v1 = dynamic_cast<const octave_ ## t1&> (a1); \
     const octave_ ## t2& v2 = dynamic_cast<const octave_ ## t2&> (a2); \
     octave_value retval = octave_value \
       (v1.t1 ## _value () op v2.t2 ## _value ()); \
     return retval; \
   }
 
 #define DEFINTNDBINOP_OP(name, t1, t2, e1, e2, op, t3) \
   static octave_value \
-  CONCAT2(oct_binop_, name) (const octave_base_value& a1, const octave_base_value& a2) \
+  CONCAT2 (oct_binop_, name) (const octave_base_value& a1, \
+                              const octave_base_value& a2) \
   { \
     const octave_ ## t1& v1 = dynamic_cast<const octave_ ## t1&> (a1); \
     const octave_ ## t2& v2 = dynamic_cast<const octave_ ## t2&> (a2); \
     octave_value retval = octave_value \
       (v1.e1 ## _value () op v2.e2 ## _value ()); \
     return retval; \
   }
 
 #define DEFINTBINOP_FN(name, t1, t2, f, t3, op) \
   static octave_value \
-  CONCAT2(oct_binop_, name) (const octave_base_value& a1, const octave_base_value& a2) \
+  CONCAT2 (oct_binop_, name) (const octave_base_value& a1, \
+                              const octave_base_value& a2) \
   { \
     const octave_ ## t1& v1 = dynamic_cast<const octave_ ## t1&> (a1); \
     const octave_ ## t2& v2 = dynamic_cast<const octave_ ## t2&> (a2); \
     octave_value retval = octave_value (f (v1.t1 ## _value (), v2.t2 ## _value ())); \
     return retval; \
   }
 
-#define DEFINTNDBINOP_FN(name, t1, t2, e1, e2, f, t3, op)       \
+#define DEFINTNDBINOP_FN(name, t1, t2, e1, e2, f, t3, op) \
   static octave_value \
-  CONCAT2(oct_binop_, name) (const octave_base_value& a1, const octave_base_value& a2) \
+  CONCAT2 (oct_binop_, name) (const octave_base_value& a1, \
+                              const octave_base_value& a2) \
   { \
     const octave_ ## t1& v1 = dynamic_cast<const octave_ ## t1&> (a1); \
     const octave_ ## t2& v2 = dynamic_cast<const octave_ ## t2&> (a2); \
     octave_value retval = octave_value (f (v1.e1 ## _value (), v2.e2 ## _value ())); \
     return retval; \
   }
 
 #define OCTAVE_CONCAT_FN2(T1, T2) \
@@ -178,17 +182,17 @@ along with Octave; see the file COPYING.
   } \
   DEFUNOP_OP (s_transpose, TYPE ## _scalar, /* no-op */) \
   DEFUNOP_OP (s_hermitian, TYPE ## _scalar, /* no-op */) \
  \
   DEFNCUNOP_METHOD (s_incr, TYPE ## _scalar, increment) \
   DEFNCUNOP_METHOD (s_decr, TYPE ## _scalar, decrement)
 
 // scalar by scalar ops.
-#define OCTAVE_SS_INT_ARITH_OPS(PFX, T1, T2, T3)        \
+#define OCTAVE_SS_INT_ARITH_OPS(PFX, T1, T2, T3) \
  \
   DEFINTBINOP_OP (PFX ## _add, T1 ## scalar, T2 ## scalar, +, T3) \
   DEFINTBINOP_OP (PFX ## _sub, T1 ## scalar, T2 ## scalar, -, T3) \
   DEFINTBINOP_OP (PFX ## _mul, T1 ## scalar, T2 ## scalar, *, T3) \
  \
   DEFBINOP (PFX ## _div, T1 ## scalar, T2 ## scalar) \
   { \
     const octave_ ## T1 ## scalar& v1 = dynamic_cast<const octave_ ## T1 ## scalar&> (a1); \
@@ -210,17 +214,17 @@ along with Octave; see the file COPYING.
  \
     if (! v1.T1 ## scalar_value ()) \
       warn_divide_by_zero (); \
  \
     octave_value retval = octave_value (v2.T2 ## scalar_value () / v1.T1 ## scalar_value ()); \
     return retval; \
   } \
  \
-  DEFINTBINOP_OP (PFX ## _el_mul, T1 ## scalar, T2 ## scalar, *, T3)    \
+  DEFINTBINOP_OP (PFX ## _el_mul, T1 ## scalar, T2 ## scalar, *, T3) \
  \
   DEFBINOP (PFX ## _el_div, T1 ## scalar, T2 ## scalar) \
   { \
     const octave_ ## T1 ## scalar& v1 = dynamic_cast<const octave_ ## T1 ## scalar&> (a1); \
     const octave_ ## T2 ## scalar& v2 = dynamic_cast<const octave_ ## T2 ## scalar&> (a2); \
  \
     if (! v2.T2 ## scalar_value ()) \
       warn_divide_by_zero (); \
@@ -526,17 +530,17 @@ along with Octave; see the file COPYING.
   } \
  \
   DEFINTNDBINOP_FN (PFX ## _el_pow, TM ## matrix, TS ## scalar, TM ## array, TS ## scalar, elem_xpow, TI, .^) \
  \
   DEFBINOP (PFX ## _el_ldiv, TM ## matrix, TS ## scalar) \
   { \
     const octave_ ## TM ## matrix& v1 = dynamic_cast<const octave_ ## TM ## matrix&> (a1); \
     const octave_ ## TS ## scalar& v2 = dynamic_cast<const octave_ ## TS ## scalar&> (a2); \
-    \
+ \
     octave_value retval = v2.TS ## scalar_value () / v1.TM ## array_value (); \
     return retval; \
   }
 
 #define OCTAVE_MS_INT_CMP_OPS(PFX, TM, TS) \
   DEFNDBINOP_FN (PFX ## _lt, TM ## matrix, TS ## scalar, TM ## array, TS ## scalar, mx_el_lt) \
   DEFNDBINOP_FN (PFX ## _le, TM ## matrix, TS ## scalar, TM ## array, TS ## scalar, mx_el_le) \
   DEFNDBINOP_FN (PFX ## _eq, TM ## matrix, TS ## scalar, TM ## array, TS ## scalar, mx_el_eq) \
@@ -561,61 +565,61 @@ along with Octave; see the file COPYING.
 
 #define OCTAVE_MS_POW_OPS(T1, T2) \
 octave_value elem_xpow (T1 ## NDArray a, octave_ ## T2 b) \
 { \
   T1 ## NDArray result (a.dims ()); \
   for (int i = 0; i < a.numel (); i++) \
     { \
       OCTAVE_QUIT; \
-      result (i) = pow (a(i), b);               \
+      result (i) = pow (a(i), b); \
     } \
   return octave_value (result); \
 } \
 \
 octave_value elem_xpow (T1 ## NDArray a, double b) \
 { \
   T1 ## NDArray result (a.dims ()); \
   for (int i = 0; i < a.numel (); i++) \
     { \
       OCTAVE_QUIT; \
-      result (i) = pow (a(i), b);               \
+      result (i) = pow (a(i), b); \
     } \
   return octave_value (result); \
 } \
 \
 octave_value elem_xpow (NDArray a, octave_ ## T2 b) \
 { \
   T2 ## NDArray result (a.dims ()); \
   for (int i = 0; i < a.numel (); i++) \
     { \
       OCTAVE_QUIT; \
-      result (i) = pow (a(i), b);               \
+      result (i) = pow (a(i), b); \
     } \
   return octave_value (result); \
 } \
 \
 octave_value elem_xpow (T1 ## NDArray a, float b) \
 { \
   T1 ## NDArray result (a.dims ()); \
   for (int i = 0; i < a.numel (); i++) \
     { \
       OCTAVE_QUIT; \
-      result (i) = powf (a(i), b);              \
+      result (i) = powf (a(i), b); \
     } \
   return octave_value (result); \
 } \
 \
 octave_value elem_xpow (FloatNDArray a, octave_ ## T2 b) \
 { \
   T2 ## NDArray result (a.dims ()); \
   for (int i = 0; i < a.numel (); i++) \
     { \
       OCTAVE_QUIT; \
-      result (i) = powf (a(i), b);              \
+      result (i) = powf (a(i), b); \
     } \
   return octave_value (result); \
 }
 
 
 #define OCTAVE_MS_INT_OPS(TYPE) \
   OCTAVE_MS_POW_OPS (TYPE, TYPE) \
   OCTAVE_MS_INT_ARITH_OPS (ms, TYPE ## _, TYPE ## _, TYPE) \
@@ -660,17 +664,17 @@ octave_value elem_xpow (FloatNDArray a, 
     return octave_value (v.TYPE ## _array_value ().transpose ()); \
   } \
  \
   DEFNCUNOP_METHOD (m_incr, TYPE ## _matrix, increment) \
   DEFNCUNOP_METHOD (m_decr, TYPE ## _matrix, decrement) \
   DEFNCUNOP_METHOD (m_changesign, TYPE ## _matrix, changesign)
 
 // matrix by matrix ops.
-#define OCTAVE_MM_INT_ARITH_OPS(PFX, T1, T2, T3)        \
+#define OCTAVE_MM_INT_ARITH_OPS(PFX, T1, T2, T3) \
  \
   DEFINTNDBINOP_OP (PFX ## _add, T1 ## matrix, T2 ## matrix, T1 ## array, T2 ## array, +, T3) \
   DEFINTNDBINOP_OP (PFX ## _sub, T1 ## matrix, T2 ## matrix, T1 ## array, T2 ## array, -, T3) \
  \
   /* DEFBINOP_OP (PFX ## _mul, T1 ## matrix, T2 ## matrix, *) */ \
   /* DEFBINOP_FN (PFX ## _div, T1 ## matrix, T2 ## matrix, xdiv) */ \
  \
   DEFBINOPX (PFX ## _pow, T1 ## matrix, T2 ## matrix) \
@@ -685,17 +689,17 @@ octave_value elem_xpow (FloatNDArray a, 
   DEFINTNDBINOP_FN (PFX ## _el_div, T1 ## matrix, T2 ## matrix, T1 ## array, T2 ## array, quotient, T3, ./) \
  \
   DEFINTNDBINOP_FN (PFX ## _el_pow, T1 ## matrix, T2 ## matrix, T1 ## array, T2 ## array, elem_xpow, T3, .^) \
  \
   DEFBINOP (PFX ## _el_ldiv, T1 ## matrix, T2 ## matrix) \
   { \
     const octave_ ## T1 ## matrix& v1 = dynamic_cast<const octave_ ## T1 ## matrix&> (a1); \
     const octave_ ## T2 ## matrix& v2 = dynamic_cast<const octave_ ## T2 ## matrix&> (a2); \
-    \
+ \
     octave_value retval = octave_value (quotient (v2.T2 ## array_value (), v1.T1 ## array_value ())); \
     return retval; \
   }
 
 #define OCTAVE_MM_INT_CMP_OPS(PFX, T1, T2) \
   DEFNDBINOP_FN (PFX ## _lt, T1 ## matrix, T2 ## matrix, T1 ## array, T2 ## array, mx_el_lt) \
   DEFNDBINOP_FN (PFX ## _le, T1 ## matrix, T2 ## matrix, T1 ## array, T2 ## array, mx_el_le) \
   DEFNDBINOP_FN (PFX ## _eq, T1 ## matrix, T2 ## matrix, T1 ## array, T2 ## array, mx_el_eq) \
@@ -724,17 +728,17 @@ octave_value elem_xpow (FloatNDArray a, 
   octave_value \
   elem_xpow (const T1 ## NDArray& a, const T2 ## NDArray& b) \
   { \
     dim_vector a_dims = a.dims (); \
     dim_vector b_dims = b.dims (); \
     if (a_dims != b_dims) \
       { \
         if (! is_valid_bsxfun ("operator .^", a_dims, b_dims)) \
-          err_nonconformant ("operator .^", a_dims, b_dims);  \
+          err_nonconformant ("operator .^", a_dims, b_dims); \
  \
         return bsxfun_pow (a, b); \
       } \
     T1 ## NDArray result (a_dims); \
     for (int i = 0; i < a.numel (); i++) \
       { \
         OCTAVE_QUIT; \
         result (i) = pow (a(i), b(i)); \
@@ -745,17 +749,17 @@ octave_value elem_xpow (FloatNDArray a, 
   octave_value \
   elem_xpow (const T1 ## NDArray& a, const NDArray& b) \
   { \
     dim_vector a_dims = a.dims (); \
     dim_vector b_dims = b.dims (); \
     if (a_dims != b_dims) \
       { \
         if (! is_valid_bsxfun ("operator .^", a_dims, b_dims)) \
-          err_nonconformant ("operator .^", a_dims, b_dims);  \
+          err_nonconformant ("operator .^", a_dims, b_dims); \
  \
         return bsxfun_pow (a, b); \
       } \
     T1 ## NDArray result (a_dims); \
     for (int i = 0; i < a.numel (); i++) \
       { \
         OCTAVE_QUIT; \
         result (i) = pow (a(i), b(i)); \
@@ -923,20 +927,20 @@ octave_value elem_xpow (FloatNDArray a, 
 
 #define OCTAVE_INSTALL_SS_INT_BOOL_OPS(PFX, T1, T2) \
   INSTALL_BINOP (op_el_and, octave_ ## T1 ## scalar, octave_ ## T2 ## scalar, PFX ## _el_and); \
   INSTALL_BINOP (op_el_or, octave_ ## T1 ## scalar, octave_ ## T2 ## scalar, PFX ## _el_or);
 
 #define OCTAVE_INSTALL_SS_INT_OPS(TYPE) \
   OCTAVE_INSTALL_S_INT_UNOPS (TYPE) \
   OCTAVE_INSTALL_SS_INT_ARITH_OPS (ss, TYPE ## _, TYPE ## _) \
-  OCTAVE_INSTALL_SS_INT_ARITH_OPS (ssx, TYPE ## _, )         \
-  OCTAVE_INSTALL_SS_INT_ARITH_OPS (sxs,  , TYPE ## _)        \
-  OCTAVE_INSTALL_SS_INT_ARITH_OPS (ssfx, TYPE ## _, float_)          \
-  OCTAVE_INSTALL_SS_INT_ARITH_OPS (sfxs,  float_, TYPE ## _)         \
+  OCTAVE_INSTALL_SS_INT_ARITH_OPS (ssx, TYPE ## _, ) \
+  OCTAVE_INSTALL_SS_INT_ARITH_OPS (sxs,  , TYPE ## _) \
+  OCTAVE_INSTALL_SS_INT_ARITH_OPS (ssfx, TYPE ## _, float_) \
+  OCTAVE_INSTALL_SS_INT_ARITH_OPS (sfxs,  float_, TYPE ## _) \
   OCTAVE_INSTALL_SS_INT_CMP_OPS (ss, TYPE ## _, TYPE ## _) \
   OCTAVE_INSTALL_SS_INT_CMP_OPS (sx, TYPE ## _, ) \
   OCTAVE_INSTALL_SS_INT_CMP_OPS (xs, , TYPE ## _) \
   OCTAVE_INSTALL_SS_INT_CMP_OPS (sfx, TYPE ## _, float_) \
   OCTAVE_INSTALL_SS_INT_CMP_OPS (fxs, float_, TYPE ## _) \
   OCTAVE_INSTALL_SS_INT_BOOL_OPS (ss, TYPE ## _, TYPE ## _) \
   OCTAVE_INSTALL_SS_INT_BOOL_OPS (sx, TYPE ## _, ) \
   OCTAVE_INSTALL_SS_INT_BOOL_OPS (xs, , TYPE ## _) \
@@ -971,20 +975,20 @@ octave_value elem_xpow (FloatNDArray a, 
 #define OCTAVE_INSTALL_SM_INT_BOOL_OPS(PFX, T1, T2) \
   INSTALL_BINOP (op_el_and, octave_ ## T1 ## scalar, octave_ ## T2 ## matrix, PFX ## _el_and); \
   INSTALL_BINOP (op_el_or, octave_ ## T1 ## scalar, octave_ ## T2 ## matrix, PFX ## _el_or); \
   INSTALL_BINOP (op_el_and_not, octave_ ## T1 ## scalar, octave_ ## T2 ## matrix, PFX ## _el_and_not); \
   INSTALL_BINOP (op_el_or_not, octave_ ## T1 ## scalar, octave_ ## T2 ## matrix, PFX ## _el_or_not);
 
 #define OCTAVE_INSTALL_SM_INT_OPS(TYPE) \
   OCTAVE_INSTALL_SM_INT_ARITH_OPS (sm, TYPE ## _, TYPE ## _) \
-  OCTAVE_INSTALL_SM_INT_ARITH_OPS (smx, TYPE ## _, )         \
-  OCTAVE_INSTALL_SM_INT_ARITH_OPS (sxm, , TYPE ## _)         \
-  OCTAVE_INSTALL_SM_INT_ARITH_OPS (smfx, TYPE ## _, float_)          \
-  OCTAVE_INSTALL_SM_INT_ARITH_OPS (sfxm, float_, TYPE ## _)          \
+  OCTAVE_INSTALL_SM_INT_ARITH_OPS (smx, TYPE ## _, ) \
+  OCTAVE_INSTALL_SM_INT_ARITH_OPS (sxm, , TYPE ## _) \
+  OCTAVE_INSTALL_SM_INT_ARITH_OPS (smfx, TYPE ## _, float_) \
+  OCTAVE_INSTALL_SM_INT_ARITH_OPS (sfxm, float_, TYPE ## _) \
   OCTAVE_INSTALL_SM_INT_CMP_OPS (sm, TYPE ## _, TYPE ## _) \
   OCTAVE_INSTALL_SM_INT_CMP_OPS (xm, , TYPE ## _) \
   OCTAVE_INSTALL_SM_INT_CMP_OPS (smx, TYPE ## _, ) \
   OCTAVE_INSTALL_SM_INT_CMP_OPS (fxm, float_, TYPE ## _) \
   OCTAVE_INSTALL_SM_INT_CMP_OPS (smfx, TYPE ## _, float_) \
   OCTAVE_INSTALL_SM_INT_BOOL_OPS (sm, TYPE ## _, TYPE ## _) \
   OCTAVE_INSTALL_SM_INT_BOOL_OPS (xm, , TYPE ## _) \
   OCTAVE_INSTALL_SM_INT_BOOL_OPS (smx, TYPE ## _, ) \
@@ -1033,19 +1037,19 @@ octave_value elem_xpow (FloatNDArray a, 
   INSTALL_ASSIGNOP (op_add_eq, octave_ ## TLHS ## matrix, octave_ ## TRHS ## scalar, PFX ## _assign_add) \
   INSTALL_ASSIGNOP (op_sub_eq, octave_ ## TLHS ## matrix, octave_ ## TRHS ## scalar, PFX ## _assign_sub) \
   INSTALL_ASSIGNOP (op_mul_eq, octave_ ## TLHS ## matrix, octave_ ## TRHS ## scalar, PFX ## _assign_mul) \
   INSTALL_ASSIGNOP (op_div_eq, octave_ ## TLHS ## matrix, octave_ ## TRHS ## scalar, PFX ## _assign_div)
 
 #define OCTAVE_INSTALL_MS_INT_OPS(TYPE) \
   OCTAVE_INSTALL_MS_INT_ARITH_OPS (ms, TYPE ## _, TYPE ## _) \
   OCTAVE_INSTALL_MS_INT_ARITH_OPS (msx, TYPE ## _, ) \
-  OCTAVE_INSTALL_MS_INT_ARITH_OPS (mxs, , TYPE ## _)       \
+  OCTAVE_INSTALL_MS_INT_ARITH_OPS (mxs, , TYPE ## _) \
   OCTAVE_INSTALL_MS_INT_ARITH_OPS (msfx, TYPE ## _, float_) \
-  OCTAVE_INSTALL_MS_INT_ARITH_OPS (mfxs, float_, TYPE ## _)        \
+  OCTAVE_INSTALL_MS_INT_ARITH_OPS (mfxs, float_, TYPE ## _) \
   OCTAVE_INSTALL_MS_INT_CMP_OPS (ms, TYPE ## _, TYPE ## _) \
   OCTAVE_INSTALL_MS_INT_CMP_OPS (mx, TYPE ## _, ) \
   OCTAVE_INSTALL_MS_INT_CMP_OPS (mxs, , TYPE ## _) \
   OCTAVE_INSTALL_MS_INT_CMP_OPS (mfx, TYPE ## _, float_) \
   OCTAVE_INSTALL_MS_INT_CMP_OPS (mfxs, float_, TYPE ## _) \
   OCTAVE_INSTALL_MS_INT_BOOL_OPS (ms, TYPE ## _, TYPE ## _) \
   OCTAVE_INSTALL_MS_INT_BOOL_OPS (mx, TYPE ## _, ) \
   OCTAVE_INSTALL_MS_INT_BOOL_OPS (mxs, , TYPE ## _) \
@@ -1064,17 +1068,17 @@ octave_value elem_xpow (FloatNDArray a, 
   INSTALL_UNOP (op_uminus, octave_ ## TYPE ## _matrix, m_uminus); \
   INSTALL_UNOP (op_transpose, octave_ ## TYPE ## _matrix, m_transpose); \
   INSTALL_UNOP (op_hermitian, octave_ ## TYPE ## _matrix, m_transpose); \
  \
   INSTALL_NCUNOP (op_incr, octave_ ## TYPE ## _matrix, m_incr); \
   INSTALL_NCUNOP (op_decr, octave_ ## TYPE ## _matrix, m_decr); \
   INSTALL_NCUNOP (op_uminus, octave_ ## TYPE ## _matrix, m_changesign);
 
-#define OCTAVE_INSTALL_MM_INT_ARITH_OPS(PFX, T1, T2)                    \
+#define OCTAVE_INSTALL_MM_INT_ARITH_OPS(PFX, T1, T2) \
   INSTALL_BINOP (op_add, octave_ ## T1 ## matrix, octave_ ## T2 ## matrix, PFX ## _add); \
   INSTALL_BINOP (op_sub, octave_ ## T1 ## matrix, octave_ ## T2 ## matrix, PFX ## _sub); \
   /* INSTALL_BINOP (op_mul, octave_ ## T1 ## matrix, octave_ ## T2 ## matrix, PFX ## _mul); */ \
   /* INSTALL_BINOP (op_div, octave_ ## T1 ## matrix, octave_ ## T2 ## matrix, PFX ## _div); */ \
   INSTALL_BINOP (op_pow, octave_ ## T1 ## matrix, octave_ ## T2 ## matrix, PFX ## _pow); \
   /* INSTALL_BINOP (op_ldiv, octave_ ## T1 ## _matrix, octave_ ## T2 ## _matrix, mm_ldiv); */ \
   INSTALL_BINOP (op_el_mul, octave_ ## T1 ## matrix, octave_ ## T2 ## matrix, PFX ## _el_mul); \
   INSTALL_BINOP (op_el_div, octave_ ## T1 ## matrix, octave_ ## T2 ## matrix, PFX ## _el_div); \
@@ -1105,19 +1109,19 @@ octave_value elem_xpow (FloatNDArray a, 
   INSTALL_ASSIGNOP (op_sub_eq, octave_ ## TLHS ## matrix, octave_ ## TRHS ## matrix, PFX ## _assign_sub) \
   INSTALL_ASSIGNOP (op_el_mul_eq, octave_ ## TLHS ## matrix, octave_ ## TRHS ## matrix, PFX ## _assign_el_mul) \
   INSTALL_ASSIGNOP (op_el_div_eq, octave_ ## TLHS ## matrix, octave_ ## TRHS ## matrix, PFX ## _assign_el_div)
 
 #define OCTAVE_INSTALL_MM_INT_OPS(TYPE) \
   OCTAVE_INSTALL_M_INT_UNOPS (TYPE) \
   OCTAVE_INSTALL_MM_INT_ARITH_OPS (mm, TYPE ##_, TYPE ## _) \
   OCTAVE_INSTALL_MM_INT_ARITH_OPS (mmx, TYPE ##_, ) \
-  OCTAVE_INSTALL_MM_INT_ARITH_OPS (mxm, , TYPE ##_)        \
+  OCTAVE_INSTALL_MM_INT_ARITH_OPS (mxm, , TYPE ##_) \
   OCTAVE_INSTALL_MM_INT_ARITH_OPS (mmfx, TYPE ##_, float_) \
-  OCTAVE_INSTALL_MM_INT_ARITH_OPS (mfxm, float_, TYPE ##_)         \
+  OCTAVE_INSTALL_MM_INT_ARITH_OPS (mfxm, float_, TYPE ##_) \
   OCTAVE_INSTALL_MM_INT_CMP_OPS (mm, TYPE ## _, TYPE ## _) \
   OCTAVE_INSTALL_MM_INT_CMP_OPS (mmx, TYPE ## _, ) \
   OCTAVE_INSTALL_MM_INT_CMP_OPS (mxm, , TYPE ## _) \
   OCTAVE_INSTALL_MM_INT_CMP_OPS (mmfx, TYPE ## _, float_) \
   OCTAVE_INSTALL_MM_INT_CMP_OPS (mfxm, float_, TYPE ## _) \
   OCTAVE_INSTALL_MM_INT_BOOL_OPS (mm, TYPE ## _, TYPE ## _) \
   OCTAVE_INSTALL_MM_INT_BOOL_OPS (mmx, TYPE ## _, ) \
   OCTAVE_INSTALL_MM_INT_BOOL_OPS (mxm, , TYPE ## _) \
diff --git a/libinterp/operators/ops.h b/libinterp/operators/ops.h
--- a/libinterp/operators/ops.h
+++ b/libinterp/operators/ops.h
@@ -24,389 +24,414 @@ along with Octave; see the file COPYING.
 #if ! defined (octave_ops_h)
 #define octave_ops_h 1
 
 #include "octave-config.h"
 
 #include "Array-util.h"
 
 // Concatenation macros that enforce argument prescan
-#define CONCAT2X(x,y) x ## y
-#define CONCAT2(x,y) CONCAT2X(x,y)
+#define CONCAT2X(x, y) x ## y
+#define CONCAT2(x, y) CONCAT2X (x, y)
 
-#define CONCAT3X(x,y,z) x ## y ## z
-#define CONCAT3(x,y,z) CONCAT3X(x,y,z)
+#define CONCAT3X(x, y, z) x ## y ## z
+#define CONCAT3(x, y, z) CONCAT3X (x, y, z)
 
 extern void install_ops (void);
 
 #define INSTALL_UNOP(op, t, f) \
   octave_value_typeinfo::register_unary_op \
-    (octave_value::op, t::static_type_id (), CONCAT2(oct_unop_, f));
+    (octave_value::op, t::static_type_id (), CONCAT2 (oct_unop_, f));
 
 #define INSTALL_NCUNOP(op, t, f) \
   octave_value_typeinfo::register_non_const_unary_op \
-    (octave_value::op, t::static_type_id (), CONCAT2(oct_unop_, f));
+    (octave_value::op, t::static_type_id (), CONCAT2 (oct_unop_, f));
 
 #define INSTALL_BINOP(op, t1, t2, f) \
   octave_value_typeinfo::register_binary_op \
     (octave_value::op, t1::static_type_id (), t2::static_type_id (), \
-     CONCAT2(oct_binop_, f));
+     CONCAT2 (oct_binop_, f));
 
 #define INSTALL_CATOP(t1, t2, f) \
   octave_value_typeinfo::register_cat_op \
-    (t1::static_type_id (), t2::static_type_id (), CONCAT2(oct_catop_, f));
+    (t1::static_type_id (), t2::static_type_id (), CONCAT2 (oct_catop_, f));
 
 #define INSTALL_ASSIGNOP(op, t1, t2, f) \
   octave_value_typeinfo::register_assign_op \
     (octave_value::op, t1::static_type_id (), t2::static_type_id (), \
-     CONCAT2(oct_assignop_, f));
+     CONCAT2 (oct_assignop_, f));
 
 #define INSTALL_ASSIGNANYOP(op, t1, f) \
   octave_value_typeinfo::register_assignany_op \
-    (octave_value::op, t1::static_type_id (), CONCAT2(oct_assignop_, f));
+    (octave_value::op, t1::static_type_id (), CONCAT2 (oct_assignop_, f));
 
 #define INSTALL_ASSIGNCONV(t1, t2, tr) \
   octave_value_typeinfo::register_pref_assign_conv \
     (t1::static_type_id (), t2::static_type_id (), tr::static_type_id ());
 
 #define INSTALL_CONVOP(t1, t2, f) \
   octave_value_typeinfo::register_type_conv_op \
-    (t1::static_type_id (), t2::static_type_id (), CONCAT2(oct_conv_, f));
+    (t1::static_type_id (), t2::static_type_id (), CONCAT2 (oct_conv_, f));
 
 #define INSTALL_WIDENOP(t1, t2, f) \
   octave_value_typeinfo::register_widening_op \
-    (t1::static_type_id (), t2::static_type_id (), CONCAT2(oct_conv_, f));
+    (t1::static_type_id (), t2::static_type_id (), CONCAT2 (oct_conv_, f));
 
 #define DEFASSIGNOP(name, t1, t2) \
   static octave_value \
-  CONCAT2(oct_assignop_, name) (octave_base_value& a1, \
-                                const octave_value_list& idx, \
-                                const octave_base_value& a2)
+  CONCAT2 (oct_assignop_, name) (octave_base_value& a1, \
+                                 const octave_value_list& idx, \
+                                 const octave_base_value& a2)
 
 #define DEFASSIGNOP_FN(name, t1, t2, f) \
   static octave_value \
-  CONCAT2(oct_assignop_, name) (octave_base_value& a1, \
-                                const octave_value_list& idx, \
-                                const octave_base_value& a2) \
+  CONCAT2 (oct_assignop_, name) (octave_base_value& a1, \
+                                 const octave_value_list& idx, \
+                                 const octave_base_value& a2) \
   { \
-    CONCAT2(octave_, t1)& v1 = dynamic_cast<CONCAT2(octave_, t1)&> (a1); \
-    const CONCAT2(octave_, t2)& v2 = dynamic_cast<const CONCAT2(octave_, t2)&> (a2); \
+    CONCAT2 (octave_, t1)& v1 = dynamic_cast<CONCAT2 (octave_, t1)&> (a1); \
+    const CONCAT2 (octave_, t2)& v2 = dynamic_cast<const CONCAT2 (octave_, t2)&> (a2); \
  \
-    v1.f (idx, v2.CONCAT2(t1, _value) ()); \
+    v1.f (idx, v2.CONCAT2 (t1, _value) ()); \
     return octave_value (); \
   }
 
 #define DEFNULLASSIGNOP_FN(name, t, f) \
   static octave_value \
-  CONCAT2(oct_assignop_, name) (octave_base_value& a, \
-                                const octave_value_list& idx, \
-                                const octave_base_value&) \
+  CONCAT2 (oct_assignop_, name) (octave_base_value& a, \
+                                 const octave_value_list& idx, \
+                                 const octave_base_value&) \
   { \
-    CONCAT2(octave_, t)& v = dynamic_cast<CONCAT2(octave_, t)&> (a); \
+    CONCAT2 (octave_, t)& v = dynamic_cast<CONCAT2 (octave_, t)&> (a); \
  \
     v.f (idx); \
     return octave_value (); \
   }
 
 #define DEFNDASSIGNOP_FN(name, t1, t2, e, f) \
   static octave_value \
-  CONCAT2(oct_assignop_, name) (octave_base_value& a1, \
-                                const octave_value_list& idx, \
-                                const octave_base_value& a2) \
+  CONCAT2 (oct_assignop_, name) (octave_base_value& a1, \
+                                 const octave_value_list& idx, \
+                                 const octave_base_value& a2) \
   { \
-    CONCAT2(octave_, t1)& v1 = dynamic_cast<CONCAT2(octave_, t1)&> (a1); \
-    const CONCAT2(octave_, t2)& v2 = dynamic_cast<const CONCAT2(octave_, t2)&> (a2); \
+    CONCAT2 (octave_, t1)& v1 = dynamic_cast<CONCAT2 (octave_, t1)&> (a1); \
+    const CONCAT2 (octave_, t2)& v2 = dynamic_cast<const CONCAT2 (octave_, t2)&> (a2); \
  \
-    v1.f (idx, v2.CONCAT2(e, _value) ()); \
+    v1.f (idx, v2.CONCAT2 (e, _value) ()); \
     return octave_value (); \
   }
 
 // FIXME: the following currently don't handle index.
 #define DEFNDASSIGNOP_OP(name, t1, t2, f, op) \
   static octave_value \
-  CONCAT2(oct_assignop_, name) (octave_base_value& a1, \
-                                const octave_value_list& idx, \
-                                const octave_base_value& a2) \
+  CONCAT2 (oct_assignop_, name) (octave_base_value& a1, \
+                                 const octave_value_list& idx, \
+                                 const octave_base_value& a2) \
   { \
-    CONCAT2(octave_, t1)& v1 = dynamic_cast<CONCAT2(octave_, t1)&> (a1); \
-    const CONCAT2(octave_, t2)& v2 = dynamic_cast<const CONCAT2(octave_, t2)&> (a2); \
+    CONCAT2 (octave_, t1)& v1 = dynamic_cast<CONCAT2 (octave_, t1)&> (a1); \
+    const CONCAT2 (octave_, t2)& v2 = dynamic_cast<const CONCAT2 (octave_, t2)&> (a2); \
  \
     assert (idx.empty ()); \
-    v1.matrix_ref () op v2.CONCAT2(f, _value) (); \
+    v1.matrix_ref () op v2.CONCAT2 (f, _value) (); \
  \
     return octave_value (); \
   }
 
 #define DEFNDASSIGNOP_FNOP(name, t1, t2, f, fnop) \
   static octave_value \
-  CONCAT2(oct_assignop_, name) (octave_base_value& a1, \
-                                const octave_value_list& idx, \
-                                const octave_base_value& a2) \
+  CONCAT2 (oct_assignop_, name) (octave_base_value& a1, \
+                                 const octave_value_list& idx, \
+                                 const octave_base_value& a2) \
   { \
-    CONCAT2(octave_, t1)& v1 = dynamic_cast<CONCAT2(octave_, t1)&> (a1); \
-    const CONCAT2(octave_, t2)& v2 = dynamic_cast<const CONCAT2(octave_, t2)&> (a2); \
+    CONCAT2 (octave_, t1)& v1 = dynamic_cast<CONCAT2 (octave_, t1)&> (a1); \
+    const CONCAT2 (octave_, t2)& v2 = dynamic_cast<const CONCAT2 (octave_, t2)&> (a2); \
  \
     assert (idx.empty ()); \
-    fnop (v1.matrix_ref (), v2.CONCAT2(f, _value) ()); \
+    fnop (v1.matrix_ref (), v2.CONCAT2 (f, _value) ()); \
  \
     return octave_value (); \
   }
 
 #define DEFASSIGNANYOP_FN(name, t1, f) \
   static octave_value \
-  CONCAT2(oct_assignop_, name) (octave_base_value& a1, \
-                                const octave_value_list& idx, \
-                                const octave_value& a2) \
+  CONCAT2 (oct_assignop_, name) (octave_base_value& a1, \
+                                 const octave_value_list& idx, \
+                                 const octave_value& a2) \
   { \
-    CONCAT2(octave_, t1)& v1 = dynamic_cast<CONCAT2(octave_, t1)&> (a1); \
+    CONCAT2 (octave_, t1)& v1 = dynamic_cast<CONCAT2 (octave_, t1)&> (a1); \
  \
     v1.f (idx, a2); \
     return octave_value (); \
   }
 
 #define CONVDECL(name) \
   static octave_base_value * \
-  CONCAT2(oct_conv_, name) (const octave_base_value& a)
+  CONCAT2 (oct_conv_, name) (const octave_base_value& a)
 
 #define CONVDECLX(name) \
   static octave_base_value * \
-  CONCAT2(oct_conv_, name) (const octave_base_value&)
+  CONCAT2 (oct_conv_, name) (const octave_base_value&)
 
 #define DEFCONV(name, a_dummy, b_dummy) \
   CONVDECL (name)
 
 #define DEFCONVFNX(name, tfrom, ovtto, tto, e) \
   CONVDECL (name) \
   { \
-    const CONCAT2(octave_, tfrom)& v = dynamic_cast<const CONCAT2(octave_, tfrom)&> (a); \
+    const CONCAT2 (octave_, tfrom)& v = dynamic_cast<const CONCAT2 (octave_, tfrom)&> (a); \
  \
-    return new CONCAT2(octave_, ovtto) (CONCAT2(tto, NDArray) (v.CONCAT2(e, array_value) ())); \
+    return new CONCAT2 (octave_, ovtto) (CONCAT2 (tto, NDArray) (v.CONCAT2 (e, array_value) ())); \
   }
 
 #define DEFCONVFNX2(name, tfrom, ovtto, e) \
   CONVDECL (name) \
   { \
-    const CONCAT2(octave_, tfrom)& v = dynamic_cast<const CONCAT2(octave_, tfrom)&> (a); \
+    const CONCAT2 (octave_, tfrom)& v = dynamic_cast<const CONCAT2 (octave_, tfrom)&> (a); \
  \
-    return new CONCAT2(octave_, ovtto) (v.CONCAT2(e, array_value) ()); \
+    return new CONCAT2 (octave_, ovtto) (v.CONCAT2 (e, array_value) ()); \
   }
 
 #define DEFDBLCONVFN(name, ovtfrom, e) \
   CONVDECL (name) \
   { \
-    const CONCAT2(octave_, ovtfrom)& v = dynamic_cast<const CONCAT2(octave_, ovtfrom)&> (a); \
+    const CONCAT2 (octave_, ovtfrom)& v = dynamic_cast<const CONCAT2 (octave_, ovtfrom)&> (a); \
  \
-    return new octave_matrix (NDArray (v.CONCAT2(e, _value) ())); \
+    return new octave_matrix (NDArray (v.CONCAT2 (e, _value) ())); \
   }
 
 #define DEFFLTCONVFN(name, ovtfrom, e) \
   CONVDECL (name) \
   { \
-    const CONCAT2(octave_, ovtfrom)& v = dynamic_cast<const CONCAT2(octave_, ovtfrom)&> (a); \
+    const CONCAT2 (octave_, ovtfrom)& v = dynamic_cast<const CONCAT2 (octave_, ovtfrom)&> (a); \
  \
-    return new octave_float_matrix (FloatNDArray (v.CONCAT2(e, _value) ())); \
+    return new octave_float_matrix (FloatNDArray (v.CONCAT2 (e, _value) ())); \
   }
 
 #define DEFSTRINTCONVFN(name, tto) \
-  DEFCONVFNX(name, char_matrix_str, CONCAT2(tto, _matrix), tto, char_)
+  DEFCONVFNX(name, char_matrix_str, CONCAT2 (tto, _matrix), tto, char_)
 
 #define DEFSTRDBLCONVFN(name, tfrom) \
   DEFCONVFNX(name, tfrom, matrix, , char_)
 
 #define DEFSTRFLTCONVFN(name, tfrom) \
   DEFCONVFNX(name, tfrom, float_matrix, Float, char_)
 
 #define DEFCONVFN(name, tfrom, tto) \
-  DEFCONVFNX2 (name, tfrom, CONCAT2(tto, _matrix), CONCAT2(tto, _))
+  DEFCONVFNX2 (name, tfrom, CONCAT2 (tto, _matrix), CONCAT2 (tto, _))
 
 #define DEFCONVFN2(name, tfrom, sm, tto) \
-  DEFCONVFNX2 (name, CONCAT3(tfrom, _, sm), CONCAT2(tto, _matrix), CONCAT2(tto, _))
+  DEFCONVFNX2 (name, CONCAT3 (tfrom, _, sm), CONCAT2 (tto, _matrix), CONCAT2 (tto, _))
 
 #define DEFUNOPX(name, t) \
   static octave_value \
-  CONCAT2(oct_unop_, name) (const octave_base_value&)
+  CONCAT2 (oct_unop_, name) (const octave_base_value&)
 
 #define DEFUNOP(name, t) \
   static octave_value \
-  CONCAT2(oct_unop_, name) (const octave_base_value& a)
+  CONCAT2 (oct_unop_, name) (const octave_base_value& a)
 
 #define DEFUNOP_OP(name, t, op) \
   static octave_value \
-  CONCAT2(oct_unop_, name) (const octave_base_value& a) \
+  CONCAT2 (oct_unop_, name) (const octave_base_value& a) \
   { \
-    const CONCAT2(octave_, t)& v = dynamic_cast<const CONCAT2(octave_, t)&> (a); \
-    return octave_value (op v.CONCAT2(t, _value) ()); \
+    const CONCAT2 (octave_, t)& v = dynamic_cast<const CONCAT2 (octave_, t)&> (a); \
+    return octave_value (op v.CONCAT2 (t, _value) ()); \
   }
 
 #define DEFNDUNOP_OP(name, t, e, op) \
   static octave_value \
-  CONCAT2(oct_unop_, name) (const octave_base_value& a) \
+  CONCAT2 (oct_unop_, name) (const octave_base_value& a) \
   { \
-    const CONCAT2(octave_, t)& v = dynamic_cast<const CONCAT2(octave_, t)&> (a); \
-    return octave_value (op v.CONCAT2(e, _value) ()); \
+    const CONCAT2 (octave_, t)& v = dynamic_cast<const CONCAT2 (octave_, t)&> (a); \
+    return octave_value (op v.CONCAT2 (e, _value) ()); \
   }
 
 // FIXME: in some cases, the constructor isn't necessary.
 
 #define DEFUNOP_FN(name, t, f) \
   static octave_value \
-  CONCAT2(oct_unop_, name) (const octave_base_value& a) \
+  CONCAT2 (oct_unop_, name) (const octave_base_value& a) \
   { \
-    const CONCAT2(octave_, t)& v = dynamic_cast<const CONCAT2(octave_, t)&> (a); \
-    return octave_value (f (v.CONCAT2(t, _value) ())); \
+    const CONCAT2 (octave_, t)& v = dynamic_cast<const CONCAT2 (octave_, t)&> (a); \
+    return octave_value (f (v.CONCAT2 (t, _value) ())); \
   }
 
 #define DEFNDUNOP_FN(name, t, e, f) \
   static octave_value \
-  CONCAT2(oct_unop_, name) (const octave_base_value& a) \
+  CONCAT2 (oct_unop_, name) (const octave_base_value& a) \
   { \
-    const CONCAT2(octave_, t)& v = dynamic_cast<const CONCAT2(octave_, t)&> (a); \
-    return octave_value (f (v.CONCAT2(e, _value) ())); \
+    const CONCAT2 (octave_, t)& v = dynamic_cast<const CONCAT2 (octave_, t)&> (a); \
+    return octave_value (f (v.CONCAT2 (e, _value) ())); \
   }
 
 #define DEFNCUNOP_METHOD(name, t, method) \
   static void \
-  CONCAT2(oct_unop_, name) (octave_base_value& a) \
+  CONCAT2 (oct_unop_, name) (octave_base_value& a) \
   { \
-    CONCAT2(octave_, t)& v = dynamic_cast<CONCAT2(octave_, t)&> (a); \
+    CONCAT2 (octave_, t)& v = dynamic_cast<CONCAT2 (octave_, t)&> (a); \
     v.method (); \
   }
 
 #define DEFBINOPX(name, t1, t2) \
   static octave_value \
-  CONCAT2(oct_binop_, name) (const octave_base_value&, const octave_base_value&)
+  CONCAT2 (oct_binop_, name) (const octave_base_value&, \
+                              const octave_base_value&)
 
 #define DEFBINOP(name, t1, t2) \
   static octave_value \
-  CONCAT2(oct_binop_, name) (const octave_base_value& a1, const octave_base_value& a2)
+  CONCAT2 (oct_binop_, name) (const octave_base_value& a1, \
+                              const octave_base_value& a2)
 
 #define DEFBINOP_OP(name, t1, t2, op) \
   static octave_value \
-  CONCAT2(oct_binop_, name) (const octave_base_value& a1, const octave_base_value& a2) \
+  CONCAT2 (oct_binop_, name) (const octave_base_value& a1, \
+                              const octave_base_value& a2) \
   { \
-    const CONCAT2(octave_, t1)& v1 = dynamic_cast<const CONCAT2(octave_, t1)&> (a1); \
-    const CONCAT2(octave_, t2)& v2 = dynamic_cast<const CONCAT2(octave_, t2)&> (a2); \
+    const CONCAT2 (octave_, t1)& v1 = dynamic_cast<const CONCAT2 (octave_, t1)&> (a1); \
+    const CONCAT2 (octave_, t2)& v2 = dynamic_cast<const CONCAT2 (octave_, t2)&> (a2); \
+ \
     return octave_value \
-      (v1.CONCAT2(t1, _value) () op v2.CONCAT2(t2, _value) ()); \
+      (v1.CONCAT2 (t1, _value) () op v2.CONCAT2 (t2, _value) ()); \
   }
 
 #define DEFCMPLXCMPOP_OP(name, t1, t2, op) \
   static octave_value \
-  CONCAT2(oct_binop_, name) (const octave_base_value& a1, const octave_base_value& a2) \
+  CONCAT2 (oct_binop_, name) (const octave_base_value& a1, \
+                              const octave_base_value& a2) \
   { \
-    const CONCAT2(octave_, t1)& v1 = dynamic_cast<const CONCAT2(octave_, t1)&> (a1); \
-    const CONCAT2(octave_, t2)& v2 = dynamic_cast<const CONCAT2(octave_, t2)&> (a2); \
+    const CONCAT2 (octave_, t1)& v1 = dynamic_cast<const CONCAT2 (octave_, t1)&> (a1); \
+    const CONCAT2 (octave_, t2)& v2 = dynamic_cast<const CONCAT2 (octave_, t2)&> (a2); \
+ \
     warn_complex_cmp (); \
+ \
     return octave_value \
-      (v1.CONCAT2(t1, _value) () op v2.CONCAT2(t2, _value) ()); \
+      (v1.CONCAT2 (t1, _value) () op v2.CONCAT2 (t2, _value) ()); \
   }
 
 #define DEFSCALARBOOLOP_OP(name, t1, t2, op) \
   static octave_value \
-  CONCAT2(oct_binop_, name) (const octave_base_value& a1, const octave_base_value& a2) \
+  CONCAT2 (oct_binop_, name) (const octave_base_value& a1, \
+                              const octave_base_value& a2) \
   { \
-    const CONCAT2(octave_, t1)& v1 = dynamic_cast<const CONCAT2(octave_, t1)&> (a1); \
-    const CONCAT2(octave_, t2)& v2 = dynamic_cast<const CONCAT2(octave_, t2)&> (a2); \
-    if (xisnan (v1.CONCAT2(t1, _value) ()) || xisnan (v2.CONCAT2(t2, _value) ())) \
+    const CONCAT2 (octave_, t1)& v1 = dynamic_cast<const CONCAT2 (octave_, t1)&> (a1); \
+    const CONCAT2 (octave_, t2)& v2 = dynamic_cast<const CONCAT2 (octave_, t2)&> (a2); \
+ \
+    if (xisnan (v1.CONCAT2 (t1, _value) ()) || xisnan (v2.CONCAT2 (t2, _value) ())) \
       err_nan_to_logical_conversion (); \
  \
     return octave_value \
-      (v1.CONCAT2(t1, _value) () op v2.CONCAT2(t2, _value) ()); \
+      (v1.CONCAT2 (t1, _value) () op v2.CONCAT2 (t2, _value) ()); \
   }
 
 #define DEFNDBINOP_OP(name, t1, t2, e1, e2, op) \
   static octave_value \
-  CONCAT2(oct_binop_, name) (const octave_base_value& a1, const octave_base_value& a2) \
+  CONCAT2 (oct_binop_, name) (const octave_base_value& a1, \
+                              const octave_base_value& a2) \
   { \
-    const CONCAT2(octave_, t1)& v1 = dynamic_cast<const CONCAT2(octave_, t1)&> (a1); \
-    const CONCAT2(octave_, t2)& v2 = dynamic_cast<const CONCAT2(octave_, t2)&> (a2); \
+    const CONCAT2 (octave_, t1)& v1 = dynamic_cast<const CONCAT2 (octave_, t1)&> (a1); \
+    const CONCAT2 (octave_, t2)& v2 = dynamic_cast<const CONCAT2 (octave_, t2)&> (a2); \
+ \
     return octave_value \
-      (v1.CONCAT2(e1, _value) () op v2.CONCAT2(e2, _value) ()); \
+      (v1.CONCAT2 (e1, _value) () op v2.CONCAT2 (e2, _value) ()); \
   }
 
 // FIXME: in some cases, the constructor isn't necessary.
 
 #define DEFBINOP_FN(name, t1, t2, f) \
   static octave_value \
-  CONCAT2(oct_binop_, name) (const octave_base_value& a1, const octave_base_value& a2) \
+  CONCAT2 (oct_binop_, name) (const octave_base_value& a1, \
+                              const octave_base_value& a2) \
   { \
-    const CONCAT2(octave_, t1)& v1 = dynamic_cast<const CONCAT2(octave_, t1)&> (a1); \
-    const CONCAT2(octave_, t2)& v2 = dynamic_cast<const CONCAT2(octave_, t2)&> (a2); \
-    return octave_value (f (v1.CONCAT2(t1, _value) (), v2.CONCAT2(t2, _value) ())); \
+    const CONCAT2 (octave_, t1)& v1 = dynamic_cast<const CONCAT2 (octave_, t1)&> (a1); \
+    const CONCAT2 (octave_, t2)& v2 = dynamic_cast<const CONCAT2 (octave_, t2)&> (a2); \
+ \
+    return octave_value (f (v1.CONCAT2 (t1, _value) (), v2.CONCAT2 (t2, _value) ())); \
   }
 
 #define DEFNDBINOP_FN(name, t1, t2, e1, e2, f) \
   static octave_value \
-  CONCAT2(oct_binop_, name) (const octave_base_value& a1, const octave_base_value& a2) \
+  CONCAT2 (oct_binop_, name) (const octave_base_value& a1, \
+                              const octave_base_value& a2) \
   { \
-    const CONCAT2(octave_, t1)& v1 = dynamic_cast<const CONCAT2(octave_, t1)&> (a1); \
-    const CONCAT2(octave_, t2)& v2 = dynamic_cast<const CONCAT2(octave_, t2)&> (a2); \
-    return octave_value (f (v1.CONCAT2(e1, _value) (), v2.CONCAT2(e2, _value) ())); \
+    const CONCAT2 (octave_, t1)& v1 = dynamic_cast<const CONCAT2 (octave_, t1)&> (a1); \
+    const CONCAT2 (octave_, t2)& v2 = dynamic_cast<const CONCAT2 (octave_, t2)&> (a2); \
+ \
+    return octave_value (f (v1.CONCAT2 (e1, _value) (), v2.CONCAT2 (e2, _value) ())); \
   }
 
 #define DEFNDCMPLXCMPOP_FN(name, t1, t2, e1, e2, f) \
   static octave_value \
-  CONCAT2(oct_binop_, name) (const octave_base_value& a1, const octave_base_value& a2) \
+  CONCAT2 (oct_binop_, name) (const octave_base_value& a1, \
+                              const octave_base_value& a2) \
   { \
-    const CONCAT2(octave_, t1)& v1 = dynamic_cast<const CONCAT2(octave_, t1)&> (a1); \
-    const CONCAT2(octave_, t2)& v2 = dynamic_cast<const CONCAT2(octave_, t2)&> (a2); \
-    return octave_value (f (v1.CONCAT2(e1, _value) (), v2.CONCAT2(e2, _value) ())); \
+    const CONCAT2 (octave_, t1)& v1 = dynamic_cast<const CONCAT2 (octave_, t1)&> (a1); \
+    const CONCAT2 (octave_, t2)& v2 = dynamic_cast<const CONCAT2 (octave_, t2)&> (a2); \
+ \
+    return octave_value (f (v1.CONCAT2 (e1, _value) (), v2.CONCAT2 (e2, _value) ())); \
   }
 
 #define DEFCATOPX(name, t1, t2) \
   static octave_value \
-  CONCAT2(oct_catop_, name) (octave_base_value&, const octave_base_value&, \
-                             const Array<octave_idx_type>& ra_idx)
+  CONCAT2 (oct_catop_, name) (octave_base_value&, const octave_base_value&, \
+                              const Array<octave_idx_type>& ra_idx)
 
-#define DEFCATOP(name, t1, t2)  \
+#define DEFCATOP(name, t1, t2) \
   static octave_value \
-  CONCAT2(oct_catop_, name) (octave_base_value& a1, const octave_base_value& a2, \
-                             const Array<octave_idx_type>& ra_idx)
+  CONCAT2 (oct_catop_, name) (octave_base_value& a1, \
+                              const octave_base_value& a2, \
+                              const Array<octave_idx_type>& ra_idx)
 
 // FIXME: in some cases, the constructor isn't necessary.
 
 #define DEFCATOP_FN(name, t1, t2, f) \
   static octave_value \
-  CONCAT2(oct_catop_, name) (octave_base_value& a1, const octave_base_value& a2, \
-                             const Array<octave_idx_type>& ra_idx) \
+  CONCAT2 (oct_catop_, name) (octave_base_value& a1, \
+                              const octave_base_value& a2, \
+                              const Array<octave_idx_type>& ra_idx) \
   { \
-    CONCAT2(octave_, t1)& v1 = dynamic_cast<CONCAT2(octave_, t1)&> (a1); \
-    const CONCAT2(octave_, t2)& v2 = dynamic_cast<const CONCAT2(octave_, t2)&> (a2); \
-    return octave_value (v1.CONCAT2(t1, _value) () . f (v2.CONCAT2(t2, _value) (), ra_idx)); \
+    CONCAT2 (octave_, t1)& v1 = dynamic_cast<CONCAT2 (octave_, t1)&> (a1); \
+    const CONCAT2 (octave_, t2)& v2 = dynamic_cast<const CONCAT2 (octave_, t2)&> (a2); \
+ \
+    return octave_value (v1.CONCAT2 (t1, _value) () . f (v2.CONCAT2 (t2, _value) (), ra_idx)); \
   }
 
 #define DEFNDCATOP_FN(name, t1, t2, e1, e2, f) \
   static octave_value \
-  CONCAT2(oct_catop_, name) (octave_base_value& a1, const octave_base_value& a2, \
-                             const Array<octave_idx_type>& ra_idx) \
+  CONCAT2 (oct_catop_, name) (octave_base_value& a1, \
+                              const octave_base_value& a2, \
+                              const Array<octave_idx_type>& ra_idx) \
   { \
-    CONCAT2(octave_, t1)& v1 = dynamic_cast<CONCAT2(octave_, t1)&> (a1); \
-    const CONCAT2(octave_, t2)& v2 = dynamic_cast<const CONCAT2(octave_, t2)&> (a2); \
-    return octave_value (v1.CONCAT2(e1, _value) () . f (v2.CONCAT2(e2, _value) (), ra_idx)); \
+    CONCAT2 (octave_, t1)& v1 = dynamic_cast<CONCAT2 (octave_, t1)&> (a1); \
+    const CONCAT2 (octave_, t2)& v2 = dynamic_cast<const CONCAT2 (octave_, t2)&> (a2); \
+ \
+    return octave_value (v1.CONCAT2 (e1, _value) () . f (v2.CONCAT2 (e2, _value) (), ra_idx)); \
   }
 
 #define DEFNDCHARCATOP_FN(name, t1, t2, f) \
   static octave_value \
-  CONCAT2(oct_catop_, name) (octave_base_value& a1, const octave_base_value& a2, \
-                             const Array<octave_idx_type>& ra_idx) \
+  CONCAT2 (oct_catop_, name) (octave_base_value& a1, \
+                              const octave_base_value& a2, \
+                              const Array<octave_idx_type>& ra_idx) \
   { \
-    CONCAT2(octave_, t1)& v1 = dynamic_cast<CONCAT2(octave_, t1)&> (a1); \
-    const CONCAT2(octave_, t2)& v2 = dynamic_cast<const CONCAT2(octave_, t2)&> (a2); \
+    CONCAT2 (octave_, t1)& v1 = dynamic_cast<CONCAT2 (octave_, t1)&> (a1); \
+    const CONCAT2 (octave_, t2)& v2 = dynamic_cast<const CONCAT2 (octave_, t2)&> (a2); \
  \
     return octave_value (v1.char_array_value () . f (v2.char_array_value (), ra_idx), \
                          ((a1.is_sq_string () || a2.is_sq_string ()) \
                           ? '\'' : '"')); \
   }
 
 // For compatibility, the second arg is always converted to the type
 // of the first.  Hmm.
 
 #define DEFNDCATOP_FN2(name, t1, t2, tc1, tc2, e1, e2, f) \
   static octave_value \
-  CONCAT2(oct_catop_, name) (octave_base_value& a1, const octave_base_value& a2, \
-                             const Array<octave_idx_type>& ra_idx) \
+  CONCAT2 (oct_catop_, name) (octave_base_value& a1, \
+                              const octave_base_value& a2, \
+                              const Array<octave_idx_type>& ra_idx) \
   { \
-    CONCAT2(octave_, t1)& v1 = dynamic_cast<CONCAT2(octave_, t1)&> (a1); \
-    const CONCAT2(octave_, t2)& v2 = dynamic_cast<const CONCAT2(octave_, t2)&> (a2); \
-    return octave_value (tc1 (v1.CONCAT2(e1, _value) ()) . f (tc2 (v2.CONCAT2(e2, _value) ()), ra_idx)); \
+    CONCAT2 (octave_, t1)& v1 = dynamic_cast<CONCAT2 (octave_, t1)&> (a1); \
+    const CONCAT2 (octave_, t2)& v2 = dynamic_cast<const CONCAT2 (octave_, t2)&> (a2); \
+ \
+    return octave_value (tc1 (v1.CONCAT2 (e1, _value) ()) . f (tc2 (v2.CONCAT2 (e2, _value) ()), ra_idx)); \
   }
 
 #endif
