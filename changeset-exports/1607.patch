# HG changeset patch
# User jwe
# Date 815317416 0
#      Thu Nov 02 13:03:36 1995 +0000
# Node ID 795527e9db1982a062cd2f573b3321a890339ff9
# Parent  2d0541468991a1e84e52acd855b64c8bcaf953bd
[project @ 1995-11-02 13:03:36 by jwe]

diff --git a/src/parse.y b/src/parse.y
--- a/src/parse.y
+++ b/src/parse.y
@@ -128,16 +128,19 @@ static int check_end (token *tok, token:
 // Try to figure out early if an expression should become an
 // assignment to the builtin variable ans.
 static tree_expression *maybe_convert_to_ans_assign (tree_expression *expr);
 
 // Maybe print a warning if an assignment expression is used as the
 // test in a logical expression.
 static void maybe_warn_assign_as_truth_value (tree_expression *expr);
 
+// Build a constant.
+static tree_constant *make_constant (int op, token *tok_val);
+
 // Build a binary expression.
 static tree_expression *make_binary_op
 	 (int op, tree_expression *op1,	token *tok_val, tree_expression *op2);
 
 // Build a prefix expression.
 static tree_expression *make_prefix_op
 	 (int op, tree_identifier *op1, token *tok_val);
 
@@ -829,30 +832,21 @@ simple_expr	: simple_expr1
 		  { $$ = make_binary_op (EXPR_OR_OR, $1, $2, $3); }
 		| simple_expr EXPR_AND simple_expr
 		  { $$ = make_binary_op (EXPR_AND, $1, $2, $3); }
 		| simple_expr EXPR_OR simple_expr
 		  { $$ = make_binary_op (EXPR_OR, $1, $2, $3); }
 		;
 
 simple_expr1	: NUM
-		  {
-		    tree_constant *tmp = new tree_constant ($1->number ());
-		    tmp->stash_original_text ($1->text_rep ());
-		    $$ = tmp;
-		  }
+		  { $$ = make_constant (NUM, $1); }
 		| IMAG_NUM
-		  {
-		    Complex c (0.0, $1->number ());
-		    tree_constant *tmp = new tree_constant (c);
-		    tmp->stash_original_text ($1->text_rep ());
-		    $$ = tmp;
-		  }
+		  { $$ = make_constant (IMAG_NUM, $1); }
 		| TEXT
-		  { $$ = new tree_constant ($1->string ()); }
+		  { $$ = make_constant (TEXT, $1); }
 		| '(' expression ')'
 		  {
 		    $2->in_parens++;
 		    $$ = $2;
 		  }
 		| word_list_cmd
 		  { $$ = $1; }
 		| variable
@@ -898,22 +892,22 @@ word_list_cmd	: identifier word_list
 		  {
 		    $$ = new tree_index_expression
 			   ($1, $2, $1->line (), $1->column ());
 		  }
 		;
 
 word_list	: TEXT
 		  {
-		    tree_constant *tmp = new tree_constant ($1->string ());
+		    tree_constant *tmp = make_constant (TEXT, $1);
 		    $$ = new tree_argument_list (tmp);
 		  }
 		| word_list TEXT
 		  {
-		    tree_constant *tmp = new tree_constant ($2->string ());
+		    tree_constant *tmp = make_constant (TEXT, $2);
 		    $1->append (tmp);
 		  }
 		;
 
 // This is truly disgusting.
 
 g_symtab	: // empty
 		  { curr_sym_tab = global_sym_tab; }
@@ -1007,17 +1001,17 @@ func_def2	: identifier safe local_symtab
 		    $4->stash_function_name (id_name);
 
 		    if (reading_fcn_file)
 		      {
 			if (strcmp (curr_fcn_file_name, id_name) != 0)
 			  {
 			    if (user_pref.warn_function_name_clash)
 			      warning ("function name `%s' does not agree\
- with function file name `%s.m'", id_name, curr_fcn_file_name);
+ with function file name `%s'", id_name, curr_fcn_file_full_name);
 
 			    global_sym_tab->rename (id_name,
 						    curr_fcn_file_name);
 
 			    if (error_state)
 			      ABORT_PARSE;
 
 			    id_name = $1->name ();
@@ -1026,20 +1020,21 @@ func_def2	: identifier safe local_symtab
 			$4->stash_function_name (id_name);
 			$4->stash_fcn_file_name ();
 			$4->stash_fcn_file_time (time (0));
 			$4->mark_as_system_fcn_file ();
 		      }
 		    else if (! (input_from_tmp_history_file
 				|| input_from_startup_file)
 			     && reading_script_file
+			     && curr_fcn_file_name
 			     && strcmp (curr_fcn_file_name, id_name) == 0)
 		      {
 			warning ("function `%s' defined within\
- script file `%s.m'", id_name, curr_fcn_file_name);
+ script file `%s'", id_name, curr_fcn_file_full_name);
 		      }
 
 		    top_level_sym_tab->clear (id_name);
 
 		    $1->define ($4);
 		    $1->document (help_buf);
 
 		    $$ = $4;
@@ -1241,17 +1236,17 @@ yyerror (char *s)
 {
   char *line = current_input_line;
   int err_col = current_input_column - 1;
 
   ostrstream output_buf;
 
   if (reading_fcn_file || reading_script_file)
     output_buf << "parse error near line " << input_line_number
-	       << " of file " << curr_fcn_file_name << ".m:";
+	       << " of file " << curr_fcn_file_full_name;
   else
     output_buf << "parse error:";
 
   if (s && strcmp (s, "parse error") != 0)
     output_buf << "\n\n  " << s;
 
   output_buf << "\n\n";
 
@@ -1407,17 +1402,20 @@ maybe_convert_to_ans_assign (tree_expres
     {
       // XXX FIXME XXX -- making ans_id static, passing its address to
       // tree_simple_assignment_expression along with a flag to not
       // delete it seems to create a memory leak.  Hmm.
 
       static symbol_record *sr = global_sym_tab->lookup ("ans", 1, 0);
       tree_identifier *ans_id = new tree_identifier (sr);
 
-      return new tree_simple_assignment_expression (ans_id, expr, 0, 1);
+      int l = expr->line ();
+      int c = expr->column ();
+
+      return new tree_simple_assignment_expression (ans_id, expr, 0, 1, l, c);
     }
 }
 
 // Maybe print a warning if an assignment expression is used as the
 // test in a logical expression.
 
 static void
 maybe_warn_assign_as_truth_value (tree_expression *expr)
@@ -1425,16 +1423,53 @@ maybe_warn_assign_as_truth_value (tree_e
   if (user_pref.warn_assign_as_truth_value
       && expr->is_assignment_expression ()
       && expr->in_parens < 2)
     {
       warning ("suggest parenthesis around assignment used as truth value");
     }
 }
 
+// Make a constant.
+
+static tree_constant *
+make_constant (int op, token *tok_val)
+{
+  int l = tok_val->line ();
+  int c = tok_val->column ();
+
+  tree_constant *retval;
+
+  switch (op)
+    {
+    case NUM:
+      retval = new tree_constant (tok_val->number (), l, c);
+      retval->stash_original_text (tok_val->text_rep ());
+      break;
+
+    case IMAG_NUM:
+      {
+	Complex C (0.0, tok_val->number ());
+	retval = new tree_constant (C, l, c);
+	retval->stash_original_text (tok_val->text_rep ());
+      }
+      break;
+
+    case TEXT:
+      retval = new tree_constant (tok_val->string (), l, c);
+      break;
+
+    default:
+      panic_impossible ();
+      break;
+    }
+
+  return retval;
+}
+
 // Build a binary expression.
 
 static tree_expression *
 make_binary_op (int op, tree_expression *op1, token *tok_val,
 		tree_expression *op2)
 {
   tree_expression::type t;
   switch (op)
@@ -1687,21 +1722,14 @@ make_index_expression (tree_indirect_ref
 }
 
 static void
 maybe_warn_missing_semi (tree_statement_list *t)
 {
   if (defining_func && user_pref.warn_missing_semicolon)
     {
       tree_statement *tmp = t->rear();
+
       if (tmp->is_expression ())
-	{
-	  char *fname = input_from_command_line_file
-	    ? curr_fcn_file_name : fcn_file_in_path (curr_fcn_file_name);
-
-	  warning ("missing semicolon near line %d, column %d in file `%s'",
-		   tmp->line (), tmp->column (), fname);
-
-	  if (fname != curr_fcn_file_name)
-	    delete [] fname;
-	}
+	warning ("missing semicolon near line %d, column %d in file `%s'",
+		 tmp->line (), tmp->column (), curr_fcn_file_full_name);
     }
 }
