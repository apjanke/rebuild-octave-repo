# HG changeset patch
# User jwe
# Date 752187987 0
#      Mon Nov 01 21:06:27 1993 +0000
# Node ID 6259f4ed7285f3cff28f4da1260c55f38a488f64
# Parent  b6b4d8c513fec54fdcba4610626b31e4ec25c20b
[project @ 1993-11-01 21:06:27 by jwe]
(DiagMatrix::row): Make it work for nr == nc case.
(DiagMatrix::column): Likewise.
(ComplexDiagMatrix::row): Likewise.
(ComplexDiagMatrix::column): Likewise.
(DiagMatrix::operator <<): Print spaces between elements.
(ComplexDiagMatrix::operator <<): Likewise.

diff --git a/liboctave/DiagMatrix.cc b/liboctave/DiagMatrix.cc
--- a/liboctave/DiagMatrix.cc
+++ b/liboctave/DiagMatrix.cc
@@ -329,18 +329,17 @@ DiagMatrix::extract (int r1, int c1, int
 
 RowVector
 DiagMatrix::row (int i) const
 {
   if (i < 0 || i >= nr)
     FAIL;
 
   RowVector retval (nc, 0.0);
-  if (nr < nc ||
-      (nr > nc && i < nc))
+  if (nr <= nc || (nr > nc && i < nc))
     retval.data [i] = data[i];
 
   return retval;
 }
 
 RowVector
 DiagMatrix::row (char *s) const
 {
@@ -358,18 +357,17 @@ DiagMatrix::row (char *s) const
 
 ColumnVector
 DiagMatrix::column (int i) const
 {
   if (i < 0 || i >= nc)
     FAIL;
 
   ColumnVector retval (nr, 0.0);
-  if (nr > nc ||
-      (nr < nc && i < nr))
+  if (nr >= nc || (nr < nc && i < nr))
     retval.data [i] = data[i];
 
   return retval;
 }
 
 ColumnVector
 DiagMatrix::column (char *s) const
 {
@@ -897,19 +895,19 @@ operator << (ostream& os, const DiagMatr
 {
   double ZERO = 0.0;
 //  int field_width = os.precision () + 7;
   for (int i = 0; i < a.nr; i++)
     {
       for (int j = 0; j < a.nc; j++)
 	{
 	  if (i == j)
-	    os << /* setw (field_width) << */ a.data[i];
+	    os << " " /* setw (field_width) */ << a.data[i];
 	  else
-	    os << /* setw (field_width) << */ ZERO;
+	    os << " " /* setw (field_width) */ << ZERO;
 	}
       os << "\n";
     }
   return os;
 }
 
 /*
  * Complex Diagonal Matrix class
@@ -1435,18 +1433,17 @@ ComplexDiagMatrix::extract (int r1, int 
 
 ComplexRowVector
 ComplexDiagMatrix::row (int i) const
 {
   if (i < 0 || i >= nr)
     FAIL;
 
   ComplexRowVector retval (nc, 0.0);
-  if (nr < nc ||
-      (nr > nc && i < nc))
+  if (nr <= nc || (nr > nc && i < nc))
     retval.data [i] = data[i];
 
   return retval;
 }
 
 ComplexRowVector
 ComplexDiagMatrix::row (char *s) const
 {
@@ -1464,18 +1461,17 @@ ComplexDiagMatrix::row (char *s) const
 
 ComplexColumnVector
 ComplexDiagMatrix::column (int i) const
 {
   if (i < 0 || i >= nc)
     FAIL;
 
   ComplexColumnVector retval (nr, 0.0);
-  if (nr > nc ||
-      (nr < nc && i < nr))
+  if (nr >= nc || (nr < nc && i < nr))
     retval.data [i] = data[i];
 
   return retval;
 }
 
 ComplexColumnVector
 ComplexDiagMatrix::column (char *s) const
 {
@@ -2052,19 +2048,19 @@ operator << (ostream& os, const ComplexD
 {
   Complex ZERO (0.0);
 //  int field_width = os.precision () + 7;
   for (int i = 0; i < a.nr; i++)
     {
       for (int j = 0; j < a.nc; j++)
 	{
 	  if (i == j)
-	    os << /* setw (field_width) << */ a.data[i];
+	    os << " " /* setw (field_width) */ << a.data[i];
 	  else
-	    os << /* setw (field_width) << */ ZERO;
+	    os << " " /* setw (field_width) */ << ZERO;
 	}
       os << "\n";
     }
   return os;
 }
 
 /*
 ;;; Local Variables: ***
