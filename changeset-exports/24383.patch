# HG changeset patch
# User Rik <rik@octave.org>
# Date 1512669390 28800
#      Thu Dec 07 09:56:30 2017 -0800
# Node ID 2798d4bd71479b15b8aa4b1eefb9c8cba41d8f27
# Parent  51a1d6c84d0c0e18a69c3e735c15e11273fe301a
# Parent  b71ba49473f4f749c8b92cd6c10b7ef2a1fa3ff2
maint: merge stable to default.

diff --git a/scripts/plot/draw/private/__quiver__.m b/scripts/plot/draw/private/__quiver__.m
--- a/scripts/plot/draw/private/__quiver__.m
+++ b/scripts/plot/draw/private/__quiver__.m
@@ -144,20 +144,22 @@ function hg = __quiver__ (varargin)
     vv = s * v;
     if (is3d)
       ww = s * w;
     endif
   endif
 
   hstate = get (hax, "nextplot");
   unwind_protect
-
     if (have_line_spec)
       ls = linespec.linestyle;
       lc = linespec.color;
+      if (isempty (lc))
+        lc = __next_line_color__ ();
+      endif
     else
       ls = "-";
       lc = __next_line_color__ ();
     endif
 
     ## Must occur after __next_line_color__ in order to work correctly.
     hg = hggroup ();
     if (is3d)
@@ -225,19 +227,21 @@ function hg = __quiver__ (varargin)
     else
       xarrw1 = xtmp + vv(:) * arrowsize / 3;
       xarrw2 = xtmp - vv(:) * arrowsize / 3;
       yarrw1 = ytmp - uu(:) * arrowsize / 3;
       yarrw2 = ytmp + uu(:) * arrowsize / 3;
     endif
 
     ## Draw arrowhead as one line object
+
+    ## Arrowhead is constructed, but NOT displayed, when marker is present.
     if (have_line_spec)
       if (! isempty (linespec.marker) && ! strcmp (linespec.marker, "none"))
-        ls = "none";  # No arrowhead drawn when marker present
+        ls = "none";
       endif
     endif
 
     if (is3d)
       h2 = plot3 ([xarrw1.'; xend.'; xarrw2.'; NaN(1, length (x))](:),
                   [yarrw1.'; yend.'; yarrw2.'; NaN(1, length (y))](:),
                   [zarrw1.'; zend.'; zarrw2.'; NaN(1, length (z))](:),
                   "linestyle", ls, "color", lc, "parent", hg);
@@ -249,22 +253,24 @@ function hg = __quiver__ (varargin)
 
     ## Draw arrow base marker as a third line object
     if (! have_line_spec || isempty (linespec.marker))
       mk = "none";
     else
       mk = linespec.marker;
     endif
     if (is3d)
-      h3 = plot3 (x, y, z, "linestyle", "none", "marker", mk, "parent", hg);
+      h3 = plot3 (x, y, z, "linestyle", "none", "color", lc, "marker", mk,
+                           "parent", hg);
     else
-      h3 = plot (x, y, "linestyle", "none", "marker", mk, "parent", hg);
+      h3 = plot (x, y, "linestyle", "none", "color", lc, "marker", mk,
+                 "parent", hg);
     endif
     if (have_filled)
-      set (h3, "markerfacecolor", get (h1, "color"));
+      set (h3, "markerfacecolor", lc);
     endif
 
     ## Set up the hggroup properties and listeners
     if (autoscale)
       addproperty ("autoscale", hg, "radio", "{on}|off", "on");
       addproperty ("autoscalefactor", hg, "data", autoscale);
     else
       addproperty ("autoscale", hg, "radio", "{on}|off", "off");
diff --git a/scripts/plot/draw/quiver.m b/scripts/plot/draw/quiver.m
--- a/scripts/plot/draw/quiver.m
+++ b/scripts/plot/draw/quiver.m
@@ -22,33 +22,36 @@
 ## @deftypefnx {} {} quiver (@dots{}, @var{s})
 ## @deftypefnx {} {} quiver (@dots{}, @var{style})
 ## @deftypefnx {} {} quiver (@dots{}, "filled")
 ## @deftypefnx {} {} quiver (@var{hax}, @dots{})
 ## @deftypefnx {} {@var{h} =} quiver (@dots{})
 ##
 ## Plot a 2-D vector field with arrows.
 ##
-## Plot the (@var{u}, @var{v}) components of a vector field in
-## an (@var{x}, @var{y}) meshgrid.  If the grid is uniform then @var{x} and
-## @var{y} can be specified as vectors.
+## Plot the (@var{u}, @var{v}) components of a vector field at the grid points
+## defined by (@var{x}, @var{y}).  If the grid is uniform then @var{x} and
+## @var{y} can be specified as vectors and @code{meshgrid} is used to create
+## the 2-D grid.
 ##
-## If @var{x} and @var{y} are undefined they are assumed to be
+## If @var{x} and @var{y} are not given they are assumed to be
 ## @code{(1:@var{m}, 1:@var{n})} where
 ## @code{[@var{m}, @var{n}] = size (@var{u})}.
 ##
-## The variable @var{s} is a scalar defining a scaling factor to use for
-## the arrows of the field relative to the mesh spacing.  A value of 0
+## The optional input @var{s} is a scalar defining a scaling factor to use for
+## the arrows of the field relative to the mesh spacing.  A value of 1.0 will
+## result in the longest vector exactly filling one grid square.  A value of 0
 ## disables all scaling.  The default value is 0.9.
 ##
 ## The style to use for the plot can be defined with a line style @var{style}
-## of the same format as the @code{plot} command.
-## If a marker is specified then markers at the grid points of the vectors are
-## drawn rather than arrows.  If the argument @qcode{"filled"} is given then
-## the markers are filled.
+## of the same format as the @code{plot} command.  If a marker is specified
+## then the markers are drawn at the origin of the vectors (which are the grid
+## points defined by @var{x} and @var{y}).  When a marker is specified, the
+## arrowhead is not drawn.  If the argument @qcode{"filled"} is given then the
+## markers are filled.
 ##
 ## If the first argument @var{hax} is an axes handle, then plot into this axis,
 ## rather than the current axes returned by @code{gca}.
 ##
 ## The optional return value @var{h} is a graphics handle to a quiver object.
 ## A quiver object regroups the components of the quiver plot (body, arrow,
 ## and marker), and allows them to be changed together.
 ##
@@ -99,17 +102,30 @@ function h = quiver (varargin)
 
 endfunction
 
 
 %!demo
 %! clf;
 %! [x,y] = meshgrid (1:2:20);
 %! h = quiver (x,y, sin (2*pi*x/10), sin (2*pi*y/10));
-%! title ("quiver plot");
+%! title ("quiver() plot w/arrowheads (default)");
+
+%!demo
+%! clf;
+%! [x,y] = meshgrid (1:2:20);
+%! h = quiver (x,y, sin (2*pi*x/10), sin (2*pi*y/10), "o");
+%! title ("quiver() plot w/origin markers");
+
+%!demo
+%! clf;
+%! [x,y] = meshgrid (1:2:20);
+%! h = quiver (x,y, sin (2*pi*x/10), sin (2*pi*y/10));
+%! set (h, "marker", "o");
+%! title ("quiver() plot w/origin markers and arrowheads");
 
 %!demo
 %! clf;
 %! x = linspace (0, 3, 80);
 %! y = sin (2*pi*x);
 %! theta = 2*pi*x + pi/2;
 %! quiver (x, y, sin (theta)/10, cos (theta)/10, 0.4);
 %! axis equal tight;
diff --git a/scripts/plot/draw/quiver3.m b/scripts/plot/draw/quiver3.m
--- a/scripts/plot/draw/quiver3.m
+++ b/scripts/plot/draw/quiver3.m
@@ -22,32 +22,36 @@
 ## @deftypefnx {} {} quiver3 (@dots{}, @var{s})
 ## @deftypefnx {} {} quiver3 (@dots{}, @var{style})
 ## @deftypefnx {} {} quiver3 (@dots{}, "filled")
 ## @deftypefnx {} {} quiver3 (@var{hax}, @dots{})
 ## @deftypefnx {} {@var{h} =} quiver3 (@dots{})
 ##
 ## Plot a 3-D vector field with arrows.
 ##
-## Plot the (@var{u}, @var{v}, @var{w}) components of a vector field in
-## an (@var{x}, @var{y}, @var{z}) meshgrid.  If the grid is uniform then
-## @var{x}, @var{y}, and @var{z} can be specified as vectors.
+## Plot the (@var{u}, @var{v}, @var{w}) components of a vector field at the
+## grid points defined by (@var{x}, @var{y}, @var{z}).  If the grid is uniform
+## then @var{x}, @var{y}, and @var{z} can be specified as vectors and
+## @code{meshgrid} is used to create the 3-D grid.
 ##
-## If @var{x}, @var{y}, and @var{z} are undefined they are assumed to be
-## @code{(1:@var{m}, 1:@var{n}, 1:@var{p})} where @code{[@var{m}, @var{n}] =
-## size (@var{u})} and @code{@var{p} = max (size (@var{w}))}.
+## If @var{x}, @var{y}, and @var{z} are not given they are assumed to be
+## @code{(1:@var{m}, 1:@var{n}, 1:@var{p})} where
+## @code{[@var{m}, @var{n}] = size (@var{u})} and
+## @code{@var{p} = max (size (@var{w}))}.
 ##
-## The variable @var{s} is a scalar defining a scaling factor to use for
-## the arrows of the field relative to the mesh spacing.  A value of 0
+## The optional input @var{s} is a scalar defining a scaling factor to use for
+## the arrows of the field relative to the mesh spacing.  A value of 1.0 will
+## result in the longest vector exactly filling one grid cube.  A value of 0
 ## disables all scaling.  The default value is 0.9.
 ##
 ## The style to use for the plot can be defined with a line style @var{style}
-## of the same format as the @code{plot} command.
-## If a marker is specified then markers at the grid points of the vectors are
-## drawn rather than arrows.  If the argument @qcode{"filled"} is given then
+## of the same format as the @code{plot} command.  If a marker is specified
+## then the markers are drawn at the origin of the vectors (which are the grid
+## points defined by @var{x}, @var{y}, @var{z}).  When a marker is specified,
+## the arrowhead is not drawn.  If the argument @qcode{"filled"} is given then
 ## the markers are filled.
 ##
 ## If the first argument @var{hax} is an axes handle, then plot into this axis,
 ## rather than the current axes returned by @code{gca}.
 ##
 ## The optional return value @var{h} is a graphics handle to a quiver object.
 ## A quiver object regroups the components of the quiver plot (body, arrow,
 ## and marker), and allows them to be changed together.
@@ -104,23 +108,23 @@ endfunction
 %! colormap ("default");
 %! [x, y, z] = peaks (25);
 %! surf (x, y, z);
 %! hold on;
 %! [u, v, w] = surfnorm (x, y, z / 10);
 %! h = quiver3 (x, y, z, u, v, w);
 %! set (h, "maxheadsize", 0.25);
 %! hold off;
-%! title ("quiver3 of surface normals to peaks() function");
+%! title ("quiver3() of surface normals to peaks() function");
 
 %!demo
 %! clf;
 %! colormap ("default");
 %! [x, y, z] = peaks (25);
 %! surf (x, y, z);
 %! hold on;
 %! [u, v, w] = surfnorm (x, y, z / 10);
 %! h = quiver3 (x, y, z, u, v, w);
 %! set (h, "maxheadsize", 0.25);
 %! hold off;
 %! shading interp;
-%! title ({"quiver3 of surface normals to peaks() function"; ...
+%! title ({"quiver3() of surface normals to peaks() function"; ...
 %!         'shading "interp"'});
