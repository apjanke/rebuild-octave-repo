# HG changeset patch
# User jwe
# Date 1093375966 0
#      Tue Aug 24 19:32:46 2004 +0000
# Node ID 954cc2ba6a4968e9e4b1706000e81c419d89decb
# Parent  22388c7625a0353c3048049c9216ad8d8dd3b04c
[project @ 2004-08-24 19:30:31 by jwe]

diff --git a/liboctave/CNDArray.cc b/liboctave/CNDArray.cc
--- a/liboctave/CNDArray.cc
+++ b/liboctave/CNDArray.cc
@@ -653,36 +653,36 @@ ComplexNDArray::sum (int dim) const
   MX_ND_COMPLEX_OP_REDUCTION (+= elem (iter_idx), Complex (0, 0));
 }
 
 ComplexNDArray
 concat (const ComplexNDArray& ra, const ComplexNDArray& rb, 
 	const Array<int>& ra_idx)
 {
   ComplexNDArray retval (ra);
-  if (ra.numel () > 0)
+  if (rb.numel () > 0)
     retval.insert (rb, ra_idx);
   return retval;
 }
 
 ComplexNDArray
 concat (const ComplexNDArray& ra, const NDArray& rb, const Array<int>& ra_idx)
 {
   ComplexNDArray retval (ra);
   ComplexNDArray tmp (rb);
-  if (ra.numel () > 0)
+  if (rb.numel () > 0)
     retval.insert (tmp, ra_idx);
   return retval;
 }
 
 ComplexNDArray
 concat (const NDArray& ra, const ComplexNDArray& rb, const Array<int>& ra_idx)
 {
   ComplexNDArray retval (ra);
-  if (ra.numel () > 0)
+  if (rb.numel () > 0)
     retval.insert (rb, ra_idx);
   return retval;
 }
 
 static const Complex Complex_NaN_result (octave_NaN, octave_NaN);
 
 ComplexNDArray
 ComplexNDArray::max (int dim) const
diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,20 @@
+2004-08-24  David Bateman  <dbateman@free.fr>
+
+	* chNDArray.cc (concat): Check whether matrix to be inserted is
+	empty instead of checking final matrix.
+	* dNDArray.cc (concat): Likewise.
+	* CNDArray.cc (concat): Likewise.
+
+2004-08-23  David Bateman  <dbateman@free.fr>
+
+        * dim-vector.h (dim_vector::concat): Correct incrementation for
+	non-existent dimensions.
+
 2004-08-09  John W. Eaton  <jwe@octave.org>
 
 	* idx-vector.h (idx_vector::idx_vector_rep::tree_to_mat_idx
 	(const octave_int<U>&)): New member function. 
 	(idx_vector::idx_vector_rep::tree_to_mat_idx (double, bool&),
 	idx_vector::idx_vector_rep::tree_to_mat_idx (int)):
 	Now member functions instead of static in idx-vector.cc.
 	(idx_vector::idx_vector_rep::idx_vector_rep (const octave_int<U>&),
diff --git a/liboctave/chNDArray.cc b/liboctave/chNDArray.cc
--- a/liboctave/chNDArray.cc
+++ b/liboctave/chNDArray.cc
@@ -48,29 +48,29 @@ charNDArray::any (int dim) const
 {
   MX_ND_ANY_ALL_REDUCTION (MX_ND_ANY_EVAL (elem (iter_idx) != ' '), false);
 }
 
 charNDArray
 concat (const charNDArray& ra, const charNDArray& rb, const Array<int>& ra_idx)
 {
   charNDArray retval (ra);
-  if (ra.numel () > 0)
+  if (rb.numel () > 0)
     retval.insert (rb, ra_idx);
   return retval;
 }
 
 charNDArray
 concat (const charNDArray& ra, const NDArray& rb, const Array<int>& ra_idx)
 {
   charNDArray retval (ra);
   charNDArray tmp (rb.dims ());
   int nel = rb.numel ();
 
-  if (ra.numel () == 0)
+  if (rb.numel () == 0)
     return retval;
 
   for (int i = 0; i < nel; i++)
     {
       double d = rb.elem (i);
 
       if (xisnan (d))
 	{
@@ -119,16 +119,19 @@ concat (const NDArray& ra, const charNDA
 	    // XXX FIXME XXX -- is there something
 	    // better we could do? Should we warn the user?
 	    ival = 0;
 
 	  retval.elem (i) = static_cast<char>(ival);
 	}
     }
 
+  if (rb.numel () == 0)
+    return retval;
+
   retval.insert (rb, ra_idx);
   return retval;
 }
 
 charNDArray&
 charNDArray::insert (const charNDArray& a, int r, int c)
 {
   Array<char>::insert (a, r, c);
diff --git a/liboctave/dNDArray.cc b/liboctave/dNDArray.cc
--- a/liboctave/dNDArray.cc
+++ b/liboctave/dNDArray.cc
@@ -791,17 +791,17 @@ NDArray::min (ArrayN<int>& idx_arg, int 
 
   return result;
 }
 
 NDArray
 concat (const NDArray& ra, const NDArray& rb, const Array<int>& ra_idx)
 {
   NDArray retval (ra);
-  if (ra.numel () > 0)
+  if (rb.numel () > 0)
     retval.insert (rb, ra_idx);
   return retval;
 }
 
 NDArray
 real (const ComplexNDArray& a)
 {
   int a_len = a.length ();
diff --git a/liboctave/dim-vector.h b/liboctave/dim-vector.h
--- a/liboctave/dim-vector.h
+++ b/liboctave/dim-vector.h
@@ -417,17 +417,17 @@ public:
 
 	if (--old_rep->count <= 0)
 	  delete old_rep;
       }
   
     // Larger or equal since dim has been decremented by one.
 
     if (dim >= nb)
-      elem (dim) = elem (dim)++;
+      elem (dim)++;
     else
       elem (dim) += dvb(dim);
 
     return true;
   }
 };
 
 static inline bool
