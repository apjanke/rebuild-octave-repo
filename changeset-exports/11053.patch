# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1285779463 14400
#      Wed Sep 29 12:57:43 2010 -0400
# Node ID c33b7054f1f96e49526c6f46b5129923d5a7a770
# Parent  b099acf06b556e807caea8a0d6e621da3d35277c
in recent Octave_map -> octave_scalar_map changes, use GETFIELD to access map elements, not CONTENTS

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,16 @@
+2010-09-29  John W. Eaton  <jwe@octave.org>
+
+	* DLD-FUNCTIONS/__glpk__.cc (OCTAVE_GLPK_GET_REAL_PARAM,
+	OCTAVE_GLPK_GET_INT_PARAM): Use GETFIELD to access map fields,
+	not CONTENTS.
+	* DLD-FUNCTIONS/amd.cc (Famd): Likewise.
+	* DLD-FUNCTIONS/luinc.cc (Fluinc): Likewise.
+
 2010-09-29  John W. Eaton  <jwe@octave.org>
 
 	* DLD-FUNCTIONS/urlwrite.cc (F__ftp_dir__): Use octave_scalar_map
 	instead of Octave_map.
 
 2010-09-29  John W. Eaton  <jwe@octave.org>
 
 	* DLD-FUNCTIONS/luinc.cc (Fluinc): Use octave_scalar_map
diff --git a/src/DLD-FUNCTIONS/__glpk__.cc b/src/DLD-FUNCTIONS/__glpk__.cc
--- a/src/DLD-FUNCTIONS/__glpk__.cc
+++ b/src/DLD-FUNCTIONS/__glpk__.cc
@@ -413,17 +413,17 @@ glpk (int sense, int n, int m, double *c
    return errnum;
 }
 
 #endif
 
 #define OCTAVE_GLPK_GET_REAL_PARAM(NAME, IDX) \
   do \
     { \
-      octave_value tmp = PARAM.contents (NAME); \
+      octave_value tmp = PARAM.getfield (NAME); \
  \
       if (tmp.is_defined ()) \
         { \
           if (! tmp.is_empty ()) \
             { \
               lpxRealParam[IDX] = tmp.scalar_value (); \
  \
               if (error_state) \
@@ -439,17 +439,17 @@ glpk (int sense, int n, int m, double *c
             } \
         } \
     } \
   while (0)
 
 #define OCTAVE_GLPK_GET_INT_PARAM(NAME, VAL) \
   do \
     { \
-      octave_value tmp = PARAM.contents (NAME); \
+      octave_value tmp = PARAM.getfield (NAME); \
  \
       if (tmp.is_defined ()) \
         { \
           if (! tmp.is_empty ()) \
             { \
               VAL = tmp.int_value (); \
  \
               if (error_state) \
diff --git a/src/DLD-FUNCTIONS/amd.cc b/src/DLD-FUNCTIONS/amd.cc
--- a/src/DLD-FUNCTIONS/amd.cc
+++ b/src/DLD-FUNCTIONS/amd.cc
@@ -139,21 +139,21 @@ The author of the code itself is Timothy
           if (nargin > 1)
             {
               octave_scalar_map arg1 = args(1).scalar_map_value ();
           
               if (!error_state)
                 {
                   octave_value tmp;
 
-                  tmp = arg1.contents ("dense");
+                  tmp = arg1.getfield ("dense");
                   if (tmp.is_defined ())
                     Control[AMD_DENSE] = tmp.double_value ();
 
-                  tmp = arg1.contents ("aggressive");
+                  tmp = arg1.getfield ("aggressive");
                   if (tmp.is_defined ())
                     Control[AMD_AGGRESSIVE] = tmp.double_value ();
                 }
               else
                 error ("amd: options argument must be a scalar structure");
             }
 
           if (!error_state)
diff --git a/src/DLD-FUNCTIONS/luinc.cc b/src/DLD-FUNCTIONS/luinc.cc
--- a/src/DLD-FUNCTIONS/luinc.cc
+++ b/src/DLD-FUNCTIONS/luinc.cc
@@ -122,37 +122,37 @@ Given the string argument 'vector', @dfn
       else if (args(1).is_map ())
         {
           octave_scalar_map map = args(1).scalar_map_value ();
 
           if (! error_state)
             {
               octave_value tmp;
 
-              tmp = map.contents ("droptol");
+              tmp = map.getfield ("droptol");
               if (tmp.is_defined ())
                 droptol = tmp.double_value ();
 
-              tmp = map.contents ("milu");
+              tmp = map.getfield ("milu");
               if (tmp.is_defined ())
                 {
                   double val = tmp.double_value ();
 
                   milu = (val == 0. ? false : true);
                 }
 
-              tmp = map.contents ("udiag");
+              tmp = map.getfield ("udiag");
               if (tmp.is_defined ())
                 {
                   double val = tmp.double_value ();
 
                   udiag = (val == 0. ? false : true);
                 }
 
-              tmp = map.contents ("thresh");
+              tmp = map.getfield ("thresh");
               if (tmp.is_defined ())
                 {
                   thresh = tmp.matrix_value ();
 
                   if (thresh.nelem () == 1)
                     {
                       thresh.resize(1,2);
                       thresh(1) = thresh(0);
