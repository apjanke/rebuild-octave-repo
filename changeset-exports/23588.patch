# HG changeset patch
# User Rik <rik@octave.org>
# Date 1497383022 25200
#      Tue Jun 13 12:43:42 2017 -0700
# Node ID 0549061d35b9c0cb99e779d2f500697cabf38ead
# Parent  0c468af9dc0009cc2324fcb3d941c5cff0ed893a
maint: Deprecate is_sorted and replace with issorted.

* ov.h (is_sorted): Use OCTAVE_DEPRECATED macro around function.
* ov.h (issorted): New function.

* Array.h (is_sorted): Use OCTAVE_DEPRECATED macro around function.
* Array.h (issorted): New function.

* Range.h (is_sorted): Use OCTAVE_DEPRECATED macro around function.
* Range.h (issorted): New function.

* oct-sort.h (is_sorted): Use OCTAVE_DEPRECATED macro around function.
* oct-sort.h (issorted): New function.

* data.cc, __ode15__.cc, ov-base-diag.h, ov-base-mat.h, ov-base-scalar.h,
ov-base-sparse.h, ov-base.cc, ov-base.h, ov-cell.cc, ov-cell.h, ov-lazy-idx.cc,
ov-lazy-idx.h, ov-perm.h, ov-range.h, ov-re-mat.cc, ov-re-mat.h, Array-d.cc,
Array-f.cc, Array.cc, Range.cc, oct-sort.cc:
Replace instances of is_sorted with issorted.

diff --git a/libinterp/corefcn/data.cc b/libinterp/corefcn/data.cc
--- a/libinterp/corefcn/data.cc
+++ b/libinterp/corefcn/data.cc
@@ -6778,17 +6778,17 @@ This function does not support sparse ma
 
       retval = arg.is_sorted_rows (smode) != UNSORTED;
     }
   else
     {
       if (! arg.dims ().is_vector ())
         error ("issorted: needs a vector");
 
-      retval = args(0).is_sorted (smode) != UNSORTED;
+      retval = args(0).issorted (smode) != UNSORTED;
     }
 
   return retval;
 }
 
 /*
 %!shared sm, um, sv, uv
 %! sm = [1, 2; 3, 4];
diff --git a/libinterp/dldfcn/__ode15__.cc b/libinterp/dldfcn/__ode15__.cc
--- a/libinterp/dldfcn/__ode15__.cc
+++ b/libinterp/dldfcn/__ode15__.cc
@@ -1141,17 +1141,17 @@ Undocumented internal function.
     = args(1).xvector_value ("__ode15__: TRANGE must be a vector of numbers");
 
   int numt = tspan.numel ();
 
   realtype t0 = tspan (0);
 
   if (numt < 2)
     error ("__ode15__: TRANGE must contain at least 2 elements");
-  else if (! tspan.is_sorted () || tspan(0) == tspan(numt - 1))
+  else if (! tspan.issorted () || tspan(0) == tspan(numt - 1))
     error ("__ode15__: TRANGE must be strictly monotonic");
 
   // input y0 and yp0
   ColumnVector y0
     = args(2).xvector_value ("__ode15__: initial state y0 must be a vector");
 
   ColumnVector yp0
     = args(3).xvector_value ("__ode15__: initial state yp0 must be a vector");
diff --git a/libinterp/octave-value/ov-base-diag.h b/libinterp/octave-value/ov-base-diag.h
--- a/libinterp/octave-value/ov-base-diag.h
+++ b/libinterp/octave-value/ov-base-diag.h
@@ -107,18 +107,18 @@ public:
   octave_value diag (octave_idx_type k = 0) const;
 
   octave_value sort (octave_idx_type dim = 0, sortmode mode = ASCENDING) const
   { return to_dense ().sort (dim, mode); }
   octave_value sort (Array<octave_idx_type> &sidx, octave_idx_type dim = 0,
                      sortmode mode = ASCENDING) const
   { return to_dense ().sort (sidx, dim, mode); }
 
-  sortmode is_sorted (sortmode mode = UNSORTED) const
-  { return to_dense ().is_sorted (mode); }
+  sortmode issorted (sortmode mode = UNSORTED) const
+  { return to_dense ().issorted (mode); }
 
   Array<octave_idx_type> sort_rows_idx (sortmode mode = ASCENDING) const
   { return to_dense ().sort_rows_idx (mode); }
 
   sortmode is_sorted_rows (sortmode mode = UNSORTED) const
   { return to_dense ().is_sorted_rows (mode); }
 
   bool is_matrix_type (void) const { return true; }
diff --git a/libinterp/octave-value/ov-base-mat.h b/libinterp/octave-value/ov-base-mat.h
--- a/libinterp/octave-value/ov-base-mat.h
+++ b/libinterp/octave-value/ov-base-mat.h
@@ -131,18 +131,18 @@ public:
   { return octave_value (matrix.diag (m, n)); }
 
   octave_value sort (octave_idx_type dim = 0, sortmode mode = ASCENDING) const
   { return octave_value (matrix.sort (dim, mode)); }
   octave_value sort (Array<octave_idx_type> &sidx, octave_idx_type dim = 0,
                      sortmode mode = ASCENDING) const
   { return octave_value (matrix.sort (sidx, dim, mode)); }
 
-  sortmode is_sorted (sortmode mode = UNSORTED) const
-  { return matrix.is_sorted (mode); }
+  sortmode issorted (sortmode mode = UNSORTED) const
+  { return matrix.issorted (mode); }
 
   Array<octave_idx_type> sort_rows_idx (sortmode mode = ASCENDING) const
   { return matrix.sort_rows_idx (mode); }
 
   sortmode is_sorted_rows (sortmode mode = UNSORTED) const
   { return matrix.is_sorted_rows (mode); }
 
   bool is_matrix_type (void) const { return true; }
diff --git a/libinterp/octave-value/ov-base-scalar.h b/libinterp/octave-value/ov-base-scalar.h
--- a/libinterp/octave-value/ov-base-scalar.h
+++ b/libinterp/octave-value/ov-base-scalar.h
@@ -103,17 +103,17 @@ public:
   octave_value sort (Array<octave_idx_type> &sidx, octave_idx_type,
                      sortmode) const
   {
     sidx.resize (dim_vector (1, 1));
     sidx(0) = 0;
     return octave_value (scalar);
   }
 
-  sortmode is_sorted (sortmode mode = UNSORTED) const
+  sortmode issorted (sortmode mode = UNSORTED) const
   { return mode ? mode : ASCENDING; }
 
   Array<octave_idx_type> sort_rows_idx (sortmode) const
   {
     return Array<octave_idx_type> (dim_vector (1, 1),
                                    static_cast<octave_idx_type> (0));
   }
 
diff --git a/libinterp/octave-value/ov-base-sparse.h b/libinterp/octave-value/ov-base-sparse.h
--- a/libinterp/octave-value/ov-base-sparse.h
+++ b/libinterp/octave-value/ov-base-sparse.h
@@ -126,18 +126,18 @@ public:
   { return octave_value (matrix.diag (k)); }
 
   octave_value sort (octave_idx_type dim = 0, sortmode mode = ASCENDING) const
   { return octave_value (matrix.sort (dim, mode)); }
   octave_value sort (Array<octave_idx_type> &sidx, octave_idx_type dim = 0,
                      sortmode mode = ASCENDING) const
   { return octave_value (matrix.sort (sidx, dim, mode)); }
 
-  sortmode is_sorted (sortmode mode = UNSORTED) const
-  { return full_value ().is_sorted (mode); }
+  sortmode issorted (sortmode mode = UNSORTED) const
+  { return full_value ().issorted (mode); }
 
   MatrixType matrix_type (void) const { return typ; }
   MatrixType matrix_type (const MatrixType& _typ) const
   { MatrixType ret = typ; typ = _typ; return ret; }
 
   bool is_matrix_type (void) const { return true; }
 
   bool isnumeric (void) const { return true; }
diff --git a/libinterp/octave-value/ov-base.cc b/libinterp/octave-value/ov-base.cc
--- a/libinterp/octave-value/ov-base.cc
+++ b/libinterp/octave-value/ov-base.cc
@@ -1027,19 +1027,19 @@ octave_base_value::sort (octave_idx_type
 octave_value
 octave_base_value::sort (Array<octave_idx_type> &,
                          octave_idx_type, sortmode) const
 {
   err_wrong_type_arg ("octave_base_value::sort ()", type_name ());
 }
 
 sortmode
-octave_base_value::is_sorted (sortmode) const
+octave_base_value::issorted (sortmode) const
 {
-  err_wrong_type_arg ("octave_base_value::is_sorted ()", type_name ());
+  err_wrong_type_arg ("octave_base_value::issorted ()", type_name ());
 }
 
 Array<octave_idx_type>
 octave_base_value::sort_rows_idx (sortmode) const
 {
   err_wrong_type_arg ("octave_base_value::sort_rows_idx ()", type_name ());
 }
 
diff --git a/libinterp/octave-value/ov-base.h b/libinterp/octave-value/ov-base.h
--- a/libinterp/octave-value/ov-base.h
+++ b/libinterp/octave-value/ov-base.h
@@ -670,17 +670,17 @@ public:
   virtual octave_value diag (octave_idx_type m, octave_idx_type n) const;
 
   virtual octave_value sort (octave_idx_type dim = 0,
                              sortmode mode = ASCENDING) const;
   virtual octave_value sort (Array<octave_idx_type> &sidx,
                              octave_idx_type dim = 0,
                              sortmode mode = ASCENDING) const;
 
-  virtual sortmode is_sorted (sortmode mode = UNSORTED) const;
+  virtual sortmode issorted (sortmode mode = UNSORTED) const;
 
   virtual Array<octave_idx_type>
   sort_rows_idx (sortmode mode = ASCENDING) const;
 
   virtual sortmode is_sorted_rows (sortmode mode = UNSORTED) const;
 
   virtual void lock (void);
 
diff --git a/libinterp/octave-value/ov-cell.cc b/libinterp/octave-value/ov-cell.cc
--- a/libinterp/octave-value/ov-cell.cc
+++ b/libinterp/octave-value/ov-cell.cc
@@ -484,26 +484,26 @@ octave_cell::sort (Array<octave_idx_type
 
   // We already have the cache.
   retval = new octave_cell (tmp);
 
   return retval;
 }
 
 sortmode
-octave_cell::is_sorted (sortmode mode) const
+octave_cell::issorted (sortmode mode) const
 {
   sortmode retval = UNSORTED;
 
   if (! iscellstr ())
     error ("issorted: A is not a cell array of strings");
 
   Array<std::string> tmp = cellstr_value ();
 
-  retval = tmp.is_sorted (mode);
+  retval = tmp.issorted (mode);
 
   return retval;
 }
 
 Array<octave_idx_type>
 octave_cell::sort_rows_idx (sortmode mode) const
 {
   Array<octave_idx_type> retval;
diff --git a/libinterp/octave-value/ov-cell.h b/libinterp/octave-value/ov-cell.h
--- a/libinterp/octave-value/ov-cell.h
+++ b/libinterp/octave-value/ov-cell.h
@@ -98,17 +98,17 @@ public:
 
   size_t byte_size (void) const;
 
   octave_value sort (octave_idx_type dim = 0, sortmode mode = ASCENDING) const;
 
   octave_value sort (Array<octave_idx_type> &sidx, octave_idx_type dim = 0,
                      sortmode mode = ASCENDING) const;
 
-  sortmode is_sorted (sortmode mode = UNSORTED) const;
+  sortmode issorted (sortmode mode = UNSORTED) const;
 
   Array<octave_idx_type> sort_rows_idx (sortmode mode = ASCENDING) const;
 
   sortmode is_sorted_rows (sortmode mode = UNSORTED) const;
 
   bool is_matrix_type (void) const { return false; }
 
   bool isnumeric (void) const { return false; }
diff --git a/libinterp/octave-value/ov-lazy-idx.cc b/libinterp/octave-value/ov-lazy-idx.cc
--- a/libinterp/octave-value/ov-lazy-idx.cc
+++ b/libinterp/octave-value/ov-lazy-idx.cc
@@ -123,31 +123,31 @@ octave_lazy_index::sort (Array<octave_id
       && (dim >= 0 && dim <= 1) && odims(1-dim) == 1)
     return index_vector ().sorted (sidx);
   else
     return idx_vector (index.as_array ().sort (sidx, dim, mode),
                        index.extent (0));
 }
 
 sortmode
-octave_lazy_index::is_sorted (sortmode mode) const
+octave_lazy_index::issorted (sortmode mode) const
 {
   if (index.is_range ())
     {
       // Avoid the array conversion.
       octave_idx_type inc = index.increment ();
       if (inc == 0)
         return (mode == UNSORTED ? ASCENDING : mode);
       else if (inc > 0)
         return (mode == DESCENDING ? UNSORTED : ASCENDING);
       else
         return (mode == ASCENDING ? UNSORTED : DESCENDING);
     }
   else
-    return index.as_array ().is_sorted (mode);
+    return index.as_array ().issorted (mode);
 }
 
 Array<octave_idx_type>
 octave_lazy_index::sort_rows_idx (sortmode mode) const
 {
   return index.as_array ().sort_rows_idx (mode);
 }
 
diff --git a/libinterp/octave-value/ov-lazy-idx.h b/libinterp/octave-value/ov-lazy-idx.h
--- a/libinterp/octave-value/ov-lazy-idx.h
+++ b/libinterp/octave-value/ov-lazy-idx.h
@@ -107,17 +107,17 @@ public:
   MatrixType matrix_type (const MatrixType& _typ) const
   { return make_value ().matrix_type (_typ); }
 
   octave_value sort (octave_idx_type dim = 0, sortmode mode = ASCENDING) const;
 
   octave_value sort (Array<octave_idx_type> &sidx, octave_idx_type dim = 0,
                      sortmode mode = ASCENDING) const;
 
-  sortmode is_sorted (sortmode mode = UNSORTED) const;
+  sortmode issorted (sortmode mode = UNSORTED) const;
 
   Array<octave_idx_type> sort_rows_idx (sortmode mode = ASCENDING) const;
 
   sortmode is_sorted_rows (sortmode mode = UNSORTED) const;
 
   bool is_matrix_type (void) const { return true; }
 
   bool isnumeric (void) const { return true; }
diff --git a/libinterp/octave-value/ov-perm.h b/libinterp/octave-value/ov-perm.h
--- a/libinterp/octave-value/ov-perm.h
+++ b/libinterp/octave-value/ov-perm.h
@@ -90,18 +90,18 @@ public:
   { return to_dense () .diag (k); }
 
   octave_value sort (octave_idx_type dim = 0, sortmode mode = ASCENDING) const
   { return to_dense ().sort (dim, mode); }
   octave_value sort (Array<octave_idx_type> &sidx, octave_idx_type dim = 0,
                      sortmode mode = ASCENDING) const
   { return to_dense ().sort (sidx, dim, mode); }
 
-  sortmode is_sorted (sortmode mode = UNSORTED) const
-  { return to_dense ().is_sorted (mode); }
+  sortmode issorted (sortmode mode = UNSORTED) const
+  { return to_dense ().issorted (mode); }
 
   Array<octave_idx_type> sort_rows_idx (sortmode mode = ASCENDING) const
   { return to_dense ().sort_rows_idx (mode); }
 
   sortmode is_sorted_rows (sortmode mode = UNSORTED) const
   { return to_dense ().is_sorted_rows (mode); }
 
   builtin_type_t builtin_type (void) const { return btyp_double; }
diff --git a/libinterp/octave-value/ov-range.h b/libinterp/octave-value/ov-range.h
--- a/libinterp/octave-value/ov-range.h
+++ b/libinterp/octave-value/ov-range.h
@@ -141,18 +141,18 @@ public:
 
   octave_value sort (octave_idx_type dim = 0, sortmode mode = ASCENDING) const
   { return range.sort (dim, mode); }
 
   octave_value sort (Array<octave_idx_type>& sidx, octave_idx_type dim = 0,
                      sortmode mode = ASCENDING) const
   { return range.sort (sidx, dim, mode); }
 
-  sortmode is_sorted (sortmode mode = UNSORTED) const
-  { return range.is_sorted (mode); }
+  sortmode issorted (sortmode mode = UNSORTED) const
+  { return range.issorted (mode); }
 
   Array<octave_idx_type> sort_rows_idx (sortmode) const
   { return Array<octave_idx_type> (dim_vector (1, 0)); }
 
   sortmode is_sorted_rows (sortmode mode = UNSORTED) const
   { return mode ? mode : ASCENDING; }
 
   builtin_type_t builtin_type (void) const { return btyp_double; }
diff --git a/libinterp/octave-value/ov-re-mat.cc b/libinterp/octave-value/ov-re-mat.cc
--- a/libinterp/octave-value/ov-re-mat.cc
+++ b/libinterp/octave-value/ov-re-mat.cc
@@ -380,26 +380,26 @@ octave_matrix::sort (Array<octave_idx_ty
       // generally more efficient.
       return octave_lazy_index (*idx_cache).sort (sidx, dim, mode);
     }
   else
     return octave_base_matrix<NDArray>::sort (sidx, dim, mode);
 }
 
 sortmode
-octave_matrix::is_sorted (sortmode mode) const
+octave_matrix::issorted (sortmode mode) const
 {
   if (idx_cache)
     {
       // This is a valid index matrix, so check via integers because it's
       // generally more efficient.
-      return idx_cache->as_array ().is_sorted (mode);
+      return idx_cache->as_array ().issorted (mode);
     }
   else
-    return octave_base_matrix<NDArray>::is_sorted (mode);
+    return octave_base_matrix<NDArray>::issorted (mode);
 }
 Array<octave_idx_type>
 octave_matrix::sort_rows_idx (sortmode mode) const
 {
   if (idx_cache)
     {
       // This is a valid index matrix, so sort via integers because it's
       // generally more efficient.
diff --git a/libinterp/octave-value/ov-re-mat.h b/libinterp/octave-value/ov-re-mat.h
--- a/libinterp/octave-value/ov-re-mat.h
+++ b/libinterp/octave-value/ov-re-mat.h
@@ -195,17 +195,17 @@ public:
   octave_value reshape (const dim_vector& new_dims) const;
 
   octave_value squeeze (void) const;
 
   octave_value sort (octave_idx_type dim = 0, sortmode mode = ASCENDING) const;
   octave_value sort (Array<octave_idx_type> &sidx, octave_idx_type dim = 0,
                      sortmode mode = ASCENDING) const;
 
-  sortmode is_sorted (sortmode mode = UNSORTED) const;
+  sortmode issorted (sortmode mode = UNSORTED) const;
 
   Array<octave_idx_type> sort_rows_idx (sortmode mode = ASCENDING) const;
 
   sortmode is_sorted_rows (sortmode mode = UNSORTED) const;
 
   // Use matrix_ref here to clear index cache.
   void increment (void) { matrix_ref () += 1.0; }
 
diff --git a/libinterp/octave-value/ov.h b/libinterp/octave-value/ov.h
--- a/libinterp/octave-value/ov.h
+++ b/libinterp/octave-value/ov.h
@@ -1353,18 +1353,22 @@ public:
   { return rep->diag (m, n); }
 
   octave_value sort (octave_idx_type dim = 0, sortmode mode = ASCENDING) const
   { return rep->sort (dim, mode); }
   octave_value sort (Array<octave_idx_type> &sidx, octave_idx_type dim = 0,
                      sortmode mode = ASCENDING) const
   { return rep->sort (sidx, dim, mode); }
 
+  sortmode issorted (sortmode mode = UNSORTED) const
+  { return rep->issorted (mode); }
+
+  OCTAVE_DEPRECATED ("use 'issorted' instead")
   sortmode is_sorted (sortmode mode = UNSORTED) const
-  { return rep->is_sorted (mode); }
+  { return rep->issorted (mode); }
 
   Array<octave_idx_type> sort_rows_idx (sortmode mode = ASCENDING) const
   { return rep->sort_rows_idx (mode); }
 
   sortmode is_sorted_rows (sortmode mode = UNSORTED) const
   { return rep->is_sorted_rows (mode); }
 
   void lock (void) { rep->lock (); }
diff --git a/liboctave/array/Array-d.cc b/liboctave/array/Array-d.cc
--- a/liboctave/array/Array-d.cc
+++ b/liboctave/array/Array-d.cc
@@ -90,17 +90,17 @@ safe_comparator (sortmode mode, const Ar
   return result;
 }
 
 // The default solution using NaN-safe comparator is OK, but almost twice as
 // slow than this code.
 template <>
 OCTAVE_API
 sortmode
-Array<double>::is_sorted (sortmode mode) const
+Array<double>::issorted (sortmode mode) const
 {
   octave_idx_type n = numel ();
 
   const double *el = data ();
 
   if (n <= 1)
     return mode ? mode : ASCENDING;
 
diff --git a/liboctave/array/Array-f.cc b/liboctave/array/Array-f.cc
--- a/liboctave/array/Array-f.cc
+++ b/liboctave/array/Array-f.cc
@@ -90,17 +90,17 @@ safe_comparator (sortmode mode, const Ar
   return result;
 }
 
 // The default solution using NaN-safe comparator is OK, but almost twice as
 // slow than this code.
 template <>
 OCTAVE_API
 sortmode
-Array<float>::is_sorted (sortmode mode) const
+Array<float>::issorted (sortmode mode) const
 {
   octave_idx_type n = numel ();
 
   const float *el = data ();
 
   if (n <= 1)
     return mode ? mode : ASCENDING;
 
diff --git a/liboctave/array/Array.cc b/liboctave/array/Array.cc
--- a/liboctave/array/Array.cc
+++ b/liboctave/array/Array.cc
@@ -2026,17 +2026,17 @@ safe_comparator (sortmode mode, const Ar
   else if (mode == DESCENDING)
     return octave_sort<T>::descending_compare;
   else
     return 0;
 }
 
 template <typename T>
 sortmode
-Array<T>::is_sorted (sortmode mode) const
+Array<T>::issorted (sortmode mode) const
 {
   octave_sort<T> lsort;
 
   octave_idx_type n = numel ();
 
   if (n <= 1)
     return mode ? mode : ASCENDING;
 
@@ -2051,17 +2051,17 @@ Array<T>::is_sorted (sortmode mode) cons
       else
         mode = ASCENDING;
     }
 
   if (mode != UNSORTED)
     {
       lsort.set_compare (safe_comparator (mode, *this, false));
 
-      if (! lsort.is_sorted (data (), n))
+      if (! lsort.issorted (data (), n))
         mode = UNSORTED;
     }
 
   return mode;
 
 }
 
 template <typename T>
@@ -2187,17 +2187,17 @@ Array<T>::lookup (const Array<T>& values
   // This determines the split ratio between the O(M*log2(N)) and O(M+N)
   // algorithms.
   static const double ratio = 1.0;
   sortmode vmode = UNSORTED;
 
   // Attempt the O(M+N) algorithm if M is large enough.
   if (nval > ratio * n / octave::math::log2 (n + 1.0))
     {
-      vmode = values.is_sorted ();
+      vmode = values.issorted ();
       // The table must not contain a NaN.
       if ((vmode == ASCENDING && sort_isnan<T> (values(nval-1)))
           || (vmode == DESCENDING && sort_isnan<T> (values(0))))
         vmode = UNSORTED;
     }
 
   if (vmode != UNSORTED)
     lsort.lookup_sorted (data (), n, values.data (), nval,
@@ -2457,17 +2457,17 @@ Array<T>::nth_element (const idx_vector&
   }                                                                     \
   template <> Array<T>                                                  \
   Array<T>::sort (Array<octave_idx_type> &sidx, int, sortmode) const    \
   {                                                                     \
     sidx = Array<octave_idx_type> ();                                   \
     return *this;                                                       \
   }                                                                     \
   template <> sortmode                                                  \
-  Array<T>::is_sorted (sortmode) const                                  \
+  Array<T>::issorted (sortmode) const                                  \
   {                                                                     \
     return UNSORTED;                                                    \
   }                                                                     \
   Array<T>::compare_fcn_type                                            \
   safe_comparator (sortmode, const Array<T>&, bool)                     \
   {                                                                     \
     return 0;                                                           \
   }                                                                     \
diff --git a/liboctave/array/Array.h b/liboctave/array/Array.h
--- a/liboctave/array/Array.h
+++ b/liboctave/array/Array.h
@@ -697,17 +697,21 @@ public:
   //! anywhere else.
   void * mex_get_data (void) const { return const_cast<T *> (data ()); }
 
   Array<T> sort (int dim = 0, sortmode mode = ASCENDING) const;
   Array<T> sort (Array<octave_idx_type> &sidx, int dim = 0,
                  sortmode mode = ASCENDING) const;
 
   //! Ordering is auto-detected or can be specified.
-  sortmode is_sorted (sortmode mode = UNSORTED) const;
+  sortmode issorted (sortmode mode = UNSORTED) const;
+
+  OCTAVE_DEPRECATED ("use 'issorted' instead")
+  sortmode is_sorted (sortmode mode = UNSORTED) const
+  { return issorted (mode); }
 
   //! Sort by rows returns only indices.
   Array<octave_idx_type> sort_rows_idx (sortmode mode = ASCENDING) const;
 
   //! Ordering is auto-detected or can be specified.
   sortmode is_sorted_rows (sortmode mode = UNSORTED) const;
 
   //! @brief Do a binary lookup in a sorted array.  Must not contain NaNs.
diff --git a/liboctave/array/Range.cc b/liboctave/array/Range.cc
--- a/liboctave/array/Range.cc
+++ b/liboctave/array/Range.cc
@@ -282,17 +282,17 @@ Range::sort (Array<octave_idx_type>& sid
     }
   else if (dim != 0)
     (*current_liboctave_error_handler) ("Range::sort: invalid dimension");
 
   return retval;
 }
 
 sortmode
-Range::is_sorted (sortmode mode) const
+Range::issorted (sortmode mode) const
 {
   if (rng_numel > 1 && rng_inc > 0)
     mode = (mode == DESCENDING) ? UNSORTED : ASCENDING;
   else if (rng_numel > 1 && rng_inc < 0)
     mode = (mode == ASCENDING) ? UNSORTED : DESCENDING;
   else
     mode = (mode ? mode : ASCENDING);
 
diff --git a/liboctave/array/Range.h b/liboctave/array/Range.h
--- a/liboctave/array/Range.h
+++ b/liboctave/array/Range.h
@@ -102,17 +102,21 @@ public:
 
   Matrix diag (octave_idx_type k = 0) const;
 
   Range sort (octave_idx_type dim = 0, sortmode mode = ASCENDING) const;
 
   Range sort (Array<octave_idx_type>& sidx, octave_idx_type dim = 0,
               sortmode mode = ASCENDING) const;
 
-  sortmode is_sorted (sortmode mode = ASCENDING) const;
+  sortmode issorted (sortmode mode = ASCENDING) const;
+
+  OCTAVE_DEPRECATED ("use 'issorted' instead")
+  sortmode is_sorted (sortmode mode = ASCENDING) const
+  { return issorted (mode); }
 
   // Support for single-index subscripting, without generating matrix cache.
 
   double checkelem (octave_idx_type i) const;
 
   double elem (octave_idx_type i) const;
 
   double operator () (octave_idx_type i) const { return elem (i); }
diff --git a/liboctave/util/oct-sort.cc b/liboctave/util/oct-sort.cc
--- a/liboctave/util/oct-sort.cc
+++ b/liboctave/util/oct-sort.cc
@@ -1535,17 +1535,17 @@ octave_sort<T>::sort (T *data, octave_id
 #endif
       if (compare)
         sort (data, idx, nel, compare);
 }
 
 template <typename T>
 template <typename Comp>
 bool
-octave_sort<T>::is_sorted (const T *data, octave_idx_type nel, Comp comp)
+octave_sort<T>::issorted (const T *data, octave_idx_type nel, Comp comp)
 {
   const T *end = data + nel;
   if (data != end)
     {
       const T *next = data;
       while (++next != end)
         {
           if (comp (*next, *data))
@@ -1555,31 +1555,31 @@ octave_sort<T>::is_sorted (const T *data
       data = next;
     }
 
   return data == end;
 }
 
 template <typename T>
 bool
-octave_sort<T>::is_sorted (const T *data, octave_idx_type nel)
+octave_sort<T>::issorted (const T *data, octave_idx_type nel)
 {
   bool retval = false;
 #if defined (INLINE_ASCENDING_SORT)
   if (compare == ascending_compare)
-    retval = is_sorted (data, nel, std::less<T> ());
+    retval = issorted (data, nel, std::less<T> ());
   else
 #endif
 #if defined (INLINE_DESCENDING_SORT)
     if (compare == descending_compare)
-      retval = is_sorted (data, nel, std::greater<T> ());
+      retval = issorted (data, nel, std::greater<T> ());
     else
 #endif
       if (compare)
-        retval = is_sorted (data, nel, compare);
+        retval = issorted (data, nel, compare);
 
   return retval;
 }
 
 // FIXME: is there really no way to make this local to the following function?
 struct sortrows_run_t
 {
   sortrows_run_t (octave_idx_type c, octave_idx_type o, octave_idx_type n)
@@ -1711,17 +1711,17 @@ octave_sort<T>::is_sorted_rows (const T 
           else
             {
               sorted = false;
               break;
             }
         }
       else
         // The final column - use fast code.
-        sorted = is_sorted (lo, n, comp);
+        sorted = issorted (lo, n, comp);
     }
 
   return sorted;
 }
 
 template <typename T>
 bool
 octave_sort<T>::is_sorted_rows (const T *data, octave_idx_type rows,
diff --git a/liboctave/util/oct-sort.h b/liboctave/util/oct-sort.h
--- a/liboctave/util/oct-sort.h
+++ b/liboctave/util/oct-sort.h
@@ -131,17 +131,21 @@ public:
 
   // Sort an array in-place.
   void sort (T *data, octave_idx_type nel);
 
   // Ditto, but also permute the passed indices (may not be valid indices).
   void sort (T *data, octave_idx_type *idx, octave_idx_type nel);
 
   // Check whether an array is sorted.
-  bool is_sorted (const T *data, octave_idx_type nel);
+  bool issorted (const T *data, octave_idx_type nel);
+
+  OCTAVE_DEPRECATED ("use 'issorted' instead")
+  bool is_sorted (const T *data, octave_idx_type nel)
+  { return issorted (data, nel); }
 
   // Sort a matrix by rows, return a permutation
   // vector.
   void sort_rows (const T *data, octave_idx_type *idx,
                   octave_idx_type rows, octave_idx_type cols);
 
   // Determine whether a matrix (as a contiguous block) is sorted by rows.
   bool is_sorted_rows (const T *data,
@@ -300,17 +304,22 @@ private:
 
   template <typename Comp>
   void sort (T *data, octave_idx_type nel, Comp comp);
 
   template <typename Comp>
   void sort (T *data, octave_idx_type *idx, octave_idx_type nel, Comp comp);
 
   template <typename Comp>
-  bool is_sorted (const T *data, octave_idx_type nel, Comp comp);
+  bool issorted (const T *data, octave_idx_type nel, Comp comp);
+
+  template <typename Comp>
+  OCTAVE_DEPRECATED ("use 'issorted' instead")
+  bool is_sorted (const T *data, octave_idx_type nel, Comp comp)
+  { return issorted (data, nel, comp); }
 
   template <typename Comp>
   void sort_rows (const T *data, octave_idx_type *idx,
                   octave_idx_type rows, octave_idx_type cols,
                   Comp comp);
 
   template <typename Comp>
   bool is_sorted_rows (const T *data, octave_idx_type rows,
