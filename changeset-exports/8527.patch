# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1232056755 18000
#      Thu Jan 15 16:59:15 2009 -0500
# Node ID 6b074f37e8d76b4435dc8c1086f41f45baaf2121
# Parent  17e0ad741fac363cfe72d8b0290a6e9bc379f4e7
reshape: improve error message

diff --git a/liboctave/Array.cc b/liboctave/Array.cc
--- a/liboctave/Array.cc
+++ b/liboctave/Array.cc
@@ -437,19 +437,24 @@ Array<T>::reshape (const dim_vector& new
 {
   Array<T> retval;
 
   if (dimensions != new_dims)
     {
       if (dimensions.numel () == new_dims.numel ())
 	retval = Array<T> (*this, new_dims);
       else
-	(*current_liboctave_error_handler)
-	  ("reshape: size mismatch (%s != %s)", dimensions.str (),
-	   new_dims.str ());
+	{
+	  std::string dimensions_str = dimensions.str ();
+	  std::string new_dims_str = new_dims.str ();
+
+	  (*current_liboctave_error_handler)
+	    ("reshape: can't reshape %s array to %s array",
+	     dimensions_str.c_str (), new_dims_str.c_str ());
+	}
     }
   else
     retval = *this;
 
   return retval;
 }
 
 // Helper class for multi-d dimension permuting (generalized transpose).
diff --git a/liboctave/Sparse.cc b/liboctave/Sparse.cc
--- a/liboctave/Sparse.cc
+++ b/liboctave/Sparse.cc
@@ -791,19 +791,24 @@ Sparse<T>::reshape (const dim_vector& ne
 		kk = jj;
 		retval.xdata(j) = data(j);
 		retval.xridx(j) = ii;
 	      }
 	  for (octave_idx_type k = kk; k < new_nc; k++)
 	    retval.xcidx(k+1) = new_nnz;
 	}
       else
-	(*current_liboctave_error_handler)
-	  ("reshape: size mismatch (%s != %s)", dimensions.str (),
-	   new_dims.str ());
+	{
+	  std::string dimensions_str = dimensions.str ();
+	  std::string new_dims_str = new_dims.str ();
+
+	  (*current_liboctave_error_handler)
+	    ("reshape: can't reshape %s array to %s array",
+	     dimensions_str.c_str (), new_dims_str.c_str ());
+	}
     }
   else
     retval = *this;
 
   return retval;
 }
 
 template <class T>
diff --git a/src/data.cc b/src/data.cc
--- a/src/data.cc
+++ b/src/data.cc
@@ -4537,17 +4537,23 @@ by an empty argument.\n\
 
   octave_value arg = args(0);
 
   dim_vector dims = arg.dims ();
 
   if (new_dims.numel () == dims.numel ())
     retval = (new_dims == dims) ? arg : arg.reshape (new_dims);
   else
-    error ("reshape: size mismatch (%s != %s)", dims.str (), new_dims.str ());
+    {
+      std::string dims_str = dims.str ();
+      std::string new_dims_str = new_dims.str ();
+
+      error ("reshape: can't reshape %s array to %s array",
+	     dims_str.c_str (), new_dims_str.c_str ());
+    }
 
   return retval;
 }
 
 /*
 
 %!assert(size (reshape (ones (4, 4), 2, 8)), [2, 8])
 %!assert(size (reshape (ones (4, 4), 8, 2)), [8, 2])
