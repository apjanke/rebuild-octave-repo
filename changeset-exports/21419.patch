# HG changeset patch
# User Rik <rik@octave.org>
# Date 1457546132 28800
#      Wed Mar 09 09:55:32 2016 -0800
# Node ID 13415264b9f8b5260ad19f3ced211c4b85e7065f
# Parent  ca8450b9ef5b44ade71a11d0ad3d02146c46ad52
Fix out-of-bounds memory access in ichol, ilu (bug #46449).
Clean up code, add more comments.

* __ichol__.cc: Test for an empty column (j1 == j2) before trying to find the
row index (ridx[j1]).  Add more comments.  Rename variable param_list to
arg_list.  Capitalize Hermitian in error message.

* __ilu__.cc: Test for an empty column (j1 == j2) and raise an error about
a 0 on the diagonal.  Add more comments.  Rename variable param_list to
arg_list.  Re-arrange declaration of variables to be clearer.

diff --git a/libinterp/corefcn/__ichol__.cc b/libinterp/corefcn/__ichol__.cc
--- a/libinterp/corefcn/__ichol__.cc
+++ b/libinterp/corefcn/__ichol__.cc
@@ -47,17 +47,17 @@ Complex ichol_mult_complex (Complex a, C
 double ichol_mult_real (double a, double b)
 {
   return a * b;
 }
 
 bool ichol_checkpivot_complex (Complex pivot)
 {
   if (pivot.imag () != 0)
-    error ("ichol: non-real pivot encountered.  The matrix must be hermitian.");
+    error ("ichol: non-real pivot encountered.  The matrix must be Hermitian.");
   else if (pivot.real () < 0)
     error ("ichol: negative pivot encountered");
 
   return true;
 }
 
 bool ichol_checkpivot_real (double pivot)
 {
@@ -66,20 +66,20 @@ bool ichol_checkpivot_real (double pivot
 
   return true;
 }
 
 template <typename octave_matrix_t, typename T, T (*ichol_mult) (T, T),
           bool (*ichol_checkpivot) (T)>
 void ichol_0 (octave_matrix_t& sm, const std::string michol = "off")
 {
-
   const octave_idx_type n = sm.cols ();
   octave_idx_type j1, jend, j2, jrow, jjrow, j, jw, i, k, jj, r;
   T tl;
+
   char opt;
   enum {OFF, ON};
   if (michol == "on")
     opt = ON;
   else
     opt = OFF;
 
   // Input matrix pointers
@@ -97,25 +97,25 @@ void ichol_0 (octave_matrix_t& sm, const
   for (i = 0; i < n; i++)
     {
       iw[i] = -1;
       Llist[i] = -1;
       Lfirst[i] = -1;
       dropsums[i] = 0;
     }
 
-  // Main loop
+  // Loop over all columns
   for (k = 0; k < n; k++)
     {
       j1 = cidx[k];
       j2 = cidx[k+1];
       for (j = j1; j < j2; j++)
         iw[ridx[j]] = j;
 
-      jrow = Llist [k];
+      jrow = Llist[k];
       // Iterate over each non-zero element in the actual row.
       while (jrow != -1)
         {
           jjrow = Lfirst[jrow];
           jend = cidx[jrow+1];
           for (jj = jjrow; jj < jend; jj++)
             {
               r = ridx[jj];
@@ -143,17 +143,18 @@ void ichol_0 (octave_matrix_t& sm, const
             }
           else
             jrow = Llist[jrow];
         }
 
       if (opt == ON)
         data[j1] += dropsums[k];
 
-      if (ridx[j1] != k)
+      // Test for j1 == j2 must be first to avoid invalid ridx[j1] access
+      if (j1 == j2 || ridx[j1] != k)
         error ("ichol: encountered a pivot equal to 0");
 
       if (! ichol_checkpivot (data[j1]))
         break;
 
       data[cidx[k]] = std::sqrt (data[j1]);
 
       // Update Llist and Lfirst with the k-column information.  Also,
@@ -187,32 +188,32 @@ Undocumented internal function.\n\
 {
   std::string michol = "off";
   if (args.length ())
     michol = args(1).string_value ();
 
   // In ICHOL0 algorithm the zero-pattern of the input matrix is preserved
   // so it's structure does not change during the algorithm.  The same input
   // matrix is used to build the output matrix due to that fact.
-  octave_value_list param_list;
+  octave_value_list arg_list;
   if (! args(0).is_complex_type ())
     {
       SparseMatrix sm = args(0).sparse_matrix_value ();
-      param_list.append (sm);
-      sm = feval ("tril", param_list)(0).sparse_matrix_value ();
+      arg_list.append (sm);
+      sm = feval ("tril", arg_list)(0).sparse_matrix_value ();
       ichol_0 <SparseMatrix, double, ichol_mult_real,
                ichol_checkpivot_real> (sm, michol);
 
       return ovl (sm);
     }
   else
     {
       SparseComplexMatrix sm = args(0).sparse_complex_matrix_value ();
-      param_list.append (sm);
-      sm = feval ("tril", param_list)(0).sparse_complex_matrix_value ();
+      arg_list.append (sm);
+      sm = feval ("tril", arg_list)(0).sparse_complex_matrix_value ();
       ichol_0 <SparseComplexMatrix, Complex, ichol_mult_complex,
                ichol_checkpivot_complex> (sm, michol);
 
       return ovl (sm);
     }
 }
 
 template <typename octave_matrix_t, typename T,  T (*ichol_mult) (T, T),
@@ -428,47 +429,47 @@ Undocumented internal function.\n\
 
   // Don't repeat input validation of arguments done in ichol.m
   if (nargin >= 2)
     droptol = args(1).double_value ();
 
   if (nargin == 3)
     michol = args(2).string_value ();
 
-  octave_value_list param_list;
+  octave_value_list arg_list;
   if (! args(0).is_complex_type ())
     {
       Array <double> cols_norm;
       SparseMatrix L;
-      param_list.append (args(0).sparse_matrix_value ());
+      arg_list.append (args(0).sparse_matrix_value ());
       SparseMatrix sm_l =
-        feval ("tril", param_list)(0).sparse_matrix_value ();
-      param_list(0) = sm_l;
-      param_list(1) = 1;
-      param_list(2) = "cols";
-      cols_norm = feval ("norm", param_list)(0).vector_value ();
-      param_list.clear ();
+        feval ("tril", arg_list)(0).sparse_matrix_value ();
+      arg_list(0) = sm_l;
+      arg_list(1) = 1;
+      arg_list(2) = "cols";
+      cols_norm = feval ("norm", arg_list)(0).vector_value ();
+      arg_list.clear ();
       ichol_t <SparseMatrix,
                double, ichol_mult_real, ichol_checkpivot_real>
                (sm_l, L, cols_norm.fortran_vec (), droptol, michol);
 
       return ovl (L);
     }
   else
     {
       Array <Complex> cols_norm;
       SparseComplexMatrix L;
-      param_list.append (args(0).sparse_complex_matrix_value ());
+      arg_list.append (args(0).sparse_complex_matrix_value ());
       SparseComplexMatrix sm_l =
-        feval ("tril", param_list)(0).sparse_complex_matrix_value ();
-      param_list(0) = sm_l;
-      param_list(1) = 1;
-      param_list(2) = "cols";
-      cols_norm = feval ("norm", param_list)(0).complex_vector_value ();
-      param_list.clear ();
+        feval ("tril", arg_list)(0).sparse_complex_matrix_value ();
+      arg_list(0) = sm_l;
+      arg_list(1) = 1;
+      arg_list(2) = "cols";
+      cols_norm = feval ("norm", arg_list)(0).complex_vector_value ();
+      arg_list.clear ();
       ichol_t <SparseComplexMatrix,
                Complex, ichol_mult_complex, ichol_checkpivot_complex>
                (sm_l, L, cols_norm.fortran_vec (),
                 Complex (droptol), michol);
 
       return ovl (L);
     }
 }
diff --git a/libinterp/corefcn/__ilu__.cc b/libinterp/corefcn/__ilu__.cc
--- a/libinterp/corefcn/__ilu__.cc
+++ b/libinterp/corefcn/__ilu__.cc
@@ -26,62 +26,70 @@ along with Octave; see the file COPYING.
 #endif
 
 #include "oct-locbuf.h"
 
 #include "defun.h"
 #include "error.h"
 #include "parse.h"
 
-// That function implements the IKJ and JKI variants of Gaussian elimination to
+// This function implements the IKJ and JKI variants of Gaussian elimination to
 // perform the ILUTP decomposition.  The behavior is controlled by milu
 // parameter.  If milu = ['off'|'col'] the JKI version is performed taking
 // advantage of CCS format of the input matrix.  If milu = 'row' the input
 // matrix has to be transposed to obtain the equivalent CRS structure so we can
 // work efficiently with rows.  In this case IKJ version is used.
 template <typename octave_matrix_t, typename T>
 void ilu_0 (octave_matrix_t& sm, const std::string milu = "off")
 {
-
   const octave_idx_type n = sm.cols ();
-  OCTAVE_LOCAL_BUFFER (octave_idx_type, iw, n);
-  OCTAVE_LOCAL_BUFFER (octave_idx_type, uptr, n);
-  octave_idx_type j1, j2, jrow, jw, i, k, jj;
+  octave_idx_type j1, j2, jrow, jw, i, j, k, jj;
   T tl, r;
 
   enum {OFF, ROW, COL};
   char opt;
   if (milu == "row")
     {
       opt = ROW;
       sm = sm.transpose ();
     }
   else if (milu == "col")
     opt = COL;
   else
     opt = OFF;
 
+  // Input matrix pointers
   octave_idx_type* cidx = sm.cidx ();
   octave_idx_type* ridx = sm.ridx ();
   T* data = sm.data ();
+
+  // Working arrays
+  OCTAVE_LOCAL_BUFFER (octave_idx_type, iw, n);
+  OCTAVE_LOCAL_BUFFER (octave_idx_type, uptr, n);
+
+  // Initialize working arrays
   for (i = 0; i < n; i++)
     iw[i] = -1;
+
+  // Loop over all columns
   for (k = 0; k < n; k++)
     {
       j1 = cidx[k];
-      j2 = cidx[k+1] - 1;
-      octave_idx_type j;
-      for (j = j1; j <= j2; j++)
-        {
-          iw[ridx[j]] = j;
-        }
+      j2 = cidx[k+1];
+
+      if (j1 == j2)
+        error ("ilu: A has a zero on the diagonal");
+
+      for (j = j1; j < j2; j++)
+        iw[ridx[j]] = j;
+
       r = 0;
       j = j1;
-      jrow = ridx[j];
-      while ((jrow < k) && (j <= j2))
+      jrow = ridx[j1];
+      while ((jrow < k) && (j < j2))
         {
           if (opt == ROW)
             {
               tl = data[j] / data[uptr[jrow]];
               data[j] = tl;
             }
           for (jj = uptr[jrow] + 1; jj < cidx[jrow+1]; jj++)
             {
@@ -111,19 +119,20 @@ void ilu_0 (octave_matrix_t& sm, const s
           data[jj] /=  data[uptr[k]];
 
       if (k != jrow)
         error ("ilu: A has a zero on the diagonal");
 
       if (data[j] == T(0))
         error ("ilu: encountered a pivot equal to 0");
 
-      for (i = j1; i <= j2; i++)
+      for (i = j1; i < j2; i++)
         iw[ridx[i]] = -1;
     }
+
   if (opt == ROW)
     sm = sm.transpose ();
 }
 
 DEFUN (__ilu0__, args, ,
        "-*- texinfo -*-\n\
 @deftypefn  {} {[@var{L}, @var{U}] =} __ilu0__ (@var{A})\n\
 @deftypefnx {} {[@var{L}, @var{U}] =} __ilu0__ (@var{A}, @var{milu})\n\
@@ -136,57 +145,55 @@ Undocumented internal function.\n\
   if (nargin < 1 || nargin > 2)
     print_usage ();
 
   octave_value_list retval (2);
 
   std::string milu;
 
   // In ILU0 algorithm the zero-pattern of the input matrix is preserved so
-  // it's structure does not change during the algorithm.  The same input
+  // its structure does not change during the algorithm.  The same input
   // matrix is used to build the output matrix due to that fact.
-  octave_value_list param_list;
+  octave_value_list arg_list;
   if (! args(0).is_complex_type ())
     {
       SparseMatrix sm = args(0).sparse_matrix_value ();
       ilu_0 <SparseMatrix, double> (sm, milu);
 
-      param_list.append (sm);
-      retval(1) = feval ("triu", param_list)(0).sparse_matrix_value ();
+      arg_list.append (sm);
+      retval(1) = feval ("triu", arg_list)(0).sparse_matrix_value ();
       SparseMatrix eye =
-        feval ("speye", octave_value_list (octave_value (sm.cols ())))(0).sparse_matrix_value ();
-      param_list.append (-1);
+        feval ("speye", ovl (sm.cols ()))(0).sparse_matrix_value ();
+      arg_list.append (-1);
       retval(0) = eye +
-        feval ("tril", param_list)(0).sparse_matrix_value ();
+                  feval ("tril", arg_list)(0).sparse_matrix_value ();
     }
   else
     {
       SparseComplexMatrix sm = args(0).sparse_complex_matrix_value ();
       ilu_0 <SparseComplexMatrix, Complex> (sm, milu);
 
-      param_list.append (sm);
-      retval(1) =
-        feval ("triu", param_list)(0).sparse_complex_matrix_value ();
+      arg_list.append (sm);
+      retval(1) = feval ("triu", arg_list)(0).sparse_complex_matrix_value ();
       SparseComplexMatrix eye =
-        feval ("speye", octave_value_list (octave_value (sm.cols ())))(0).sparse_complex_matrix_value ();
-      param_list.append (-1);
-      retval(0) =
-        eye + feval ("tril", param_list)(0).sparse_complex_matrix_value ();
+        feval ("speye", ovl (sm.cols ()))(0).sparse_complex_matrix_value ();
+      arg_list.append (-1);
+      retval(0) = eye +
+                  feval ("tril", arg_list)(0).sparse_complex_matrix_value ();
     }
 
   return retval;
 }
 
 template <typename octave_matrix_t, typename T>
 void ilu_crout (octave_matrix_t& sm_l, octave_matrix_t& sm_u,
                 octave_matrix_t& L, octave_matrix_t& U, T* cols_norm,
                 T* rows_norm, const T droptol = 0,
                 const std::string milu = "off")
 {
-
   // Map the strings into chars for faster comparing inside loops
   char opt;
   enum {OFF, ROW, COL};
   if (milu == "row")
     opt = ROW;
   else if (milu == "col")
     opt = COL;
   else
@@ -197,16 +204,17 @@ void ilu_crout (octave_matrix_t& sm_l, o
 
   const octave_idx_type n = sm_u.cols ();
   sm_u = sm_u.transpose ();
 
   max_len_u = sm_u.nnz ();
   max_len_u += (0.1 * max_len_u) > n ? 0.1 * max_len_u : n;
   max_len_l = sm_l.nnz ();
   max_len_l += (0.1 * max_len_l) > n ? 0.1 * max_len_l : n;
+
   // Extract pointers to the arrays for faster access inside loops
   octave_idx_type* cidx_in_u = sm_u.cidx ();
   octave_idx_type* ridx_in_u = sm_u.ridx ();
   T* data_in_u = sm_u.data ();
   octave_idx_type* cidx_in_l = sm_l.cidx ();
   octave_idx_type* ridx_in_l = sm_l.ridx ();
   T* data_in_l = sm_l.data ();
 
@@ -230,30 +238,32 @@ void ilu_crout (octave_matrix_t& sm_l, o
   OCTAVE_LOCAL_BUFFER (T, w_data_l, n);
   OCTAVE_LOCAL_BUFFER (T, w_data_u, n);
   OCTAVE_LOCAL_BUFFER (octave_idx_type, Ufirst, n);
   OCTAVE_LOCAL_BUFFER (octave_idx_type, Lfirst, n);
   OCTAVE_LOCAL_BUFFER (T, cr_sum, n);
 
   T zero = T (0);
 
+  // Initialize working arrays 
   cidx_u[0] = cidx_in_u[0];
   cidx_l[0] = cidx_in_l[0];
   for (i = 0; i < n; i++)
     {
       w_data_u[i] = zero;
       w_data_l[i] = zero;
       cr_sum[i] = zero;
     }
 
   total_len_u = 0;
   total_len_l = 0;
   cols_list_len = 0;
   rows_list_len = 0;
 
+  // Loop over all columns
   for (k = 0; k < n; k++)
     {
       // Load the working column and working row
       for (i = cidx_in_l[k]; i < cidx_in_l[k+1]; i++)
         w_data_l[ridx_in_l[i]] = data_in_l[i];
 
       for (i = cidx_in_u[k]; i < cidx_in_u[k+1]; i++)
         w_data_u[ridx_in_u[i]] = data_in_u[i];
@@ -429,16 +439,17 @@ void ilu_crout (octave_matrix_t& sm_l, o
             }
         }
     }
 
   // Build the output matrices
   L = octave_matrix_t (n, n, total_len_l);
   U = octave_matrix_t (n, n, total_len_u);
 
+  // FIXME: Can these loops be replaced by std::copy?
   for (i = 0; i <= n; i++)
     L.cidx (i) = cidx_l[i];
 
   for (i = 0; i < total_len_l; i++)
     {
       L.ridx (i) = ridx_l[i];
       L.data (i) = data_l[i];
     }
@@ -473,66 +484,65 @@ Undocumented internal function.\n\
 
   // Don't repeat input validation of arguments done in ilu.m
   if (nargin >= 2)
     droptol = args(1).double_value ();
 
   if (nargin == 3)
     milu = args(2).string_value ();
 
-  octave_value_list param_list;
+  octave_value_list arg_list;
   if (! args(0).is_complex_type ())
     {
       Array<double> cols_norm, rows_norm;
-      param_list.append (args(0).sparse_matrix_value ());
-      SparseMatrix sm_u = feval ("triu", param_list)(0).sparse_matrix_value ();
-      param_list.append (-1);
-      SparseMatrix sm_l = feval ("tril", param_list)(0).sparse_matrix_value ();
-      param_list(1) = "rows";
-      rows_norm = feval ("norm", param_list)(0).vector_value ();
-      param_list(1) = "cols";
-      cols_norm = feval ("norm", param_list)(0).vector_value ();
-      param_list.clear ();
+      arg_list.append (args(0).sparse_matrix_value ());
+      SparseMatrix sm_u = feval ("triu", arg_list)(0).sparse_matrix_value ();
+      arg_list.append (-1);
+      SparseMatrix sm_l = feval ("tril", arg_list)(0).sparse_matrix_value ();
+      arg_list(1) = "rows";
+      rows_norm = feval ("norm", arg_list)(0).vector_value ();
+      arg_list(1) = "cols";
+      cols_norm = feval ("norm", arg_list)(0).vector_value ();
+      arg_list.clear ();
       SparseMatrix U, L;
       ilu_crout <SparseMatrix, double> (sm_l, sm_u, L, U,
                                         cols_norm.fortran_vec (),
                                         rows_norm.fortran_vec (),
                                         droptol, milu);
-      param_list.append (octave_value (L.cols ()));
-      SparseMatrix eye =
-        feval ("speye", param_list)(0).sparse_matrix_value ();
+      arg_list.append (octave_value (L.cols ()));
+      SparseMatrix eye = feval ("speye", arg_list)(0).sparse_matrix_value ();
       return ovl (L + eye, U);
     }
   else
     {
       Array<Complex> cols_norm, rows_norm;
-      param_list.append (args(0).sparse_complex_matrix_value ());
+      arg_list.append (args(0).sparse_complex_matrix_value ());
       SparseComplexMatrix sm_u =
-        feval ("triu", param_list)(0).sparse_complex_matrix_value ();
-      param_list.append (-1);
+        feval ("triu", arg_list)(0).sparse_complex_matrix_value ();
+      arg_list.append (-1);
       SparseComplexMatrix sm_l =
-        feval ("tril", param_list)(0).sparse_complex_matrix_value ();
-      param_list(1) = "rows";
-      rows_norm = feval ("norm", param_list)(0).complex_vector_value ();
-      param_list(1) = "cols";
-      cols_norm = feval ("norm", param_list)(0).complex_vector_value ();
-      param_list.clear ();
+        feval ("tril", arg_list)(0).sparse_complex_matrix_value ();
+      arg_list(1) = "rows";
+      rows_norm = feval ("norm", arg_list)(0).complex_vector_value ();
+      arg_list(1) = "cols";
+      cols_norm = feval ("norm", arg_list)(0).complex_vector_value ();
+      arg_list.clear ();
       SparseComplexMatrix U, L;
       ilu_crout < SparseComplexMatrix, Complex >
                 (sm_l, sm_u, L, U, cols_norm.fortran_vec () ,
                  rows_norm.fortran_vec (), Complex (droptol), milu);
 
-      param_list.append (octave_value (L.cols ()));
+      arg_list.append (octave_value (L.cols ()));
       SparseComplexMatrix eye =
-        feval ("speye", param_list)(0).sparse_complex_matrix_value ();
+        feval ("speye", arg_list)(0).sparse_complex_matrix_value ();
       return ovl (L + eye, U);
     }
 }
 
-// That function implements the IKJ and JKI variants of gaussian elimination
+// This function implements the IKJ and JKI variants of gaussian elimination
 // to perform the ILUTP decomposition.  The behavior is controlled by milu
 // parameter.  If milu = ['off'|'col'] the JKI version is performed taking
 // advantage of CCS format of the input matrix.  Row pivoting is performed.
 // If milu = 'row' the input matrix has to be transposed to obtain the
 // equivalent CRS structure so we can work efficiently with rows.  In that
 // case IKJ version is used and column pivoting is performed.
 
 template <typename octave_matrix_t, typename T>
@@ -548,17 +558,17 @@ void ilu_tp (octave_matrix_t& sm, octave
     opt = ROW;
   else if (milu == "col")
     opt = COL;
   else
     opt = OFF;
 
   const octave_idx_type n = sm.cols ();
 
-  // That is necessary for the JKI (milu = "row") variant.
+  // This is necessary for the JKI (milu = "row") variant.
   if (opt == ROW)
     sm = sm.transpose ();
 
   // Extract pointers to the arrays for faster access inside loops
   octave_idx_type* cidx_in = sm.cidx ();
   octave_idx_type* ridx_in = sm.ridx ();
   T* data_in = sm.data ();
   octave_idx_type jrow, i, j, k, jj, c, total_len_l, total_len_u, p_perm,
@@ -567,22 +577,24 @@ void ilu_tp (octave_matrix_t& sm, octave
 
   T tl = zero, aux, maximum;
 
   max_len_u = nnz_u;
   max_len_u += (0.1 * max_len_u) > n ? 0.1 * max_len_u : n;
   max_len_l = nnz_l;
   max_len_l += (0.1 * max_len_l) > n ? 0.1 * max_len_l : n;
 
+  // Extract pointers to the arrays for faster access inside loops
   Array <octave_idx_type> cidx_out_l (dim_vector (n + 1, 1));
   octave_idx_type* cidx_l = cidx_out_l.fortran_vec ();
   Array <octave_idx_type> ridx_out_l (dim_vector (max_len_l, 1));
   octave_idx_type* ridx_l = ridx_out_l.fortran_vec ();
   Array <T> data_out_l (dim_vector (max_len_l ,1));
   T* data_l = data_out_l.fortran_vec ();
+
   // Data for U
   Array <octave_idx_type> cidx_out_u (dim_vector (n + 1, 1));
   octave_idx_type* cidx_u = cidx_out_u.fortran_vec ();
   Array <octave_idx_type> ridx_out_u (dim_vector (max_len_u, 1));
   octave_idx_type* ridx_u = ridx_out_u.fortran_vec ();
   Array <T> data_out_u (dim_vector (max_len_u, 1));
   T* data_u = data_out_u.fortran_vec ();
 
@@ -592,31 +604,31 @@ void ilu_tp (octave_matrix_t& sm, octave
   std::set <octave_idx_type> iw_l;
   std::set <octave_idx_type> iw_u;
   std::set <octave_idx_type>::iterator it, it2;
   OCTAVE_LOCAL_BUFFER (T, w_data, n);
   OCTAVE_LOCAL_BUFFER (octave_idx_type, iperm, n);
   octave_idx_type* perm = perm_vec.fortran_vec ();
   OCTAVE_LOCAL_BUFFER (octave_idx_type, uptr, n);
 
-
+  // Initialize working and permutation arrays 
   cidx_l[0] = cidx_in[0];
   cidx_u[0] = cidx_in[0];
   for (i = 0; i < n; i++)
     {
       w_data[i] = 0;
       perm[i] = i;
       iperm[i] = i;
     }
   total_len_u = 0;
   total_len_l = 0;
 
+  // Loop over all columns
   for (k = 0; k < n; k++)
     {
-
       for (j = cidx_in[k]; j < cidx_in[k+1]; j++)
         {
           p_perm = iperm[ridx_in[j]];
           w_data[iperm[ridx_in[j]]] = data_in[j];
           if (p_perm > k)
             iw_l.insert (ridx_in[j]);
           else
             iw_u.insert (p_perm);
@@ -657,18 +669,18 @@ void ilu_tp (octave_matrix_t& sm, octave
                     {
                       if (p_perm > k)
                         iw_l.insert (ridx_l[jj]);
                       else
                         iw_u.insert (p_perm);
                     }
                 }
 
-              // Drop element from the U part in IKJ and L part in JKI
-              // variant (milu = [col|off])
+              // Drop element from the U part in IKJ
+              // and L part in JKI variant (milu = [col|off])
               if ((std::abs (w_data[jrow]) < (droptol * cols_norm[k]))
                   && (w_data[jrow] != zero))
                 {
                   if (opt == COL)
                     total_sum += partial_col_sum;
                   else if (opt == ROW)
                     total_sum += partial_row_sum;
                   w_data[jrow] = zero;
@@ -698,17 +710,17 @@ void ilu_tp (octave_matrix_t& sm, octave
               p_perm = iperm[*it];
               if (std::abs (w_data[p_perm]) > maximum)
                 {
                   maximum = std::abs (w_data[p_perm]);
                   max_ind = *it;
                   it2 = it;
                 }
             }
-          // If the pivot is not the diagonal element update all.
+          // If the pivot is not the diagonal element update all
           p_perm = iperm[max_ind];
           if (max_ind != perm[k])
             {
               iw_l.erase (it2);
               if (w_data[k] != zero)
                 iw_l.insert (perm[k]);
               else
                 iw_u.insert (k);
@@ -720,18 +732,18 @@ void ilu_tp (octave_matrix_t& sm, octave
               perm[k] = perm[p_perm];
               perm[p_perm] = c;
               w_data[k] = w_data[p_perm];
               w_data[p_perm] = aux;
             }
 
         }
 
-      // Drop elements in the L part in the IKJ and from the U part in the JKI
-      // version.
+      // Drop elements in the L part in the IKJ version,
+      // and from the U part in the JKI version.
       it = iw_l.begin ();
       while (it != iw_l.end ())
         {
           p_perm = iperm[*it];
           if (droptol > zero)
             if (std::abs (w_data[p_perm]) < (droptol * cols_norm[k]))
               {
                 if (opt != OFF)
@@ -750,18 +762,16 @@ void ilu_tp (octave_matrix_t& sm, octave
       // Compensate diagonal element.
       if (opt != OFF)
         {
           if ((total_sum > zero) && (w_data[k] == zero))
             iw_u.insert (k);
           w_data[k] += total_sum;
         }
 
-
-
       // Check if the pivot is zero and if udiag is active.
       // NOTE: If the pivot == 0 and udiag is active, then if milu = [col|row]
       //       will not preserve the row sum for that column/row.
       if (w_data[k] == zero)
         {
           if (udiag != 1)
             error ("ilu: encountered a pivot equal to 0");
 
@@ -772,17 +782,16 @@ void ilu_tp (octave_matrix_t& sm, octave
       // Scale the elements on the L part for IKJ version (milu = [col|off])
       if (opt != ROW)
         for (it = iw_l.begin (); it != iw_l.end (); ++it)
           {
             p_perm = iperm[*it];
             w_data[p_perm] = w_data[p_perm] / w_data[k];
           }
 
-
       if ((max_len_u - total_len_u) < n)
         {
           max_len_u += (0.1 * max_len_u) > n ? 0.1 * max_len_u : n;
           data_out_u.resize (dim_vector (max_len_u, 1));
           data_u = data_out_u.fortran_vec ();
           ridx_out_u.resize (dim_vector (max_len_u, 1));
           ridx_u = ridx_out_u.fortran_vec ();
         }
@@ -803,31 +812,33 @@ void ilu_tp (octave_matrix_t& sm, octave
           if (w_data[*it] != zero)
             {
               data_u[total_len_u + w_len_u] = w_data[*it];
               ridx_u[total_len_u + w_len_u] = *it;
               w_len_u++;
             }
           w_data[*it] = 0;
         }
+
       // Expand working vector into L.
       w_len_l = 0;
       for (it = iw_l.begin (); it != iw_l.end (); ++it)
         {
           p_perm = iperm[*it];
           if (w_data[p_perm] != zero)
             {
               data_l[total_len_l + w_len_l] = w_data[p_perm];
               ridx_l[total_len_l + w_len_l] = *it;
               w_len_l++;
             }
           w_data[p_perm] = 0;
         }
       total_len_u += w_len_u;
       total_len_l += w_len_l;
+
       // Check if there are too many elements to be indexed with
       // octave_idx_type type due to fill-in during the process.
       if (total_len_l < 0 || total_len_u < 0)
         error ("ilu: Integer overflow.  Too many fill-in elements in L or U");
 
       if (opt == ROW)
         uptr[k] = total_len_u - 1;
 
@@ -943,40 +954,40 @@ Undocumented internal function.\n\
     thresh = args(2).double_value ();
 
   if (nargin >= 4)
     milu = args(3).string_value ();
 
   if (nargin == 5)
     udiag = args(4).double_value ();
 
-  octave_value_list param_list;
+  octave_value_list arg_list;
   octave_idx_type nnz_u, nnz_l;
   if (! args(0).is_complex_type ())
     {
       Array <double> rc_norm;
       SparseMatrix sm = args(0).sparse_matrix_value ();
-      param_list.append (sm);
-      nnz_u =  (feval ("triu", param_list)(0).sparse_matrix_value ()).nnz ();
-      param_list.append (-1);
-      nnz_l =  (feval ("tril", param_list)(0).sparse_matrix_value ()).nnz ();
+      arg_list.append (sm);
+      nnz_u =  (feval ("triu", arg_list)(0).sparse_matrix_value ()).nnz ();
+      arg_list.append (-1);
+      nnz_l =  (feval ("tril", arg_list)(0).sparse_matrix_value ()).nnz ();
       if (milu == "row")
-        param_list (1) = "rows";
+        arg_list (1) = "rows";
       else
-        param_list (1) = "cols";
-      rc_norm = feval ("norm", param_list)(0).vector_value ();
-      param_list.clear ();
+        arg_list (1) = "cols";
+      rc_norm = feval ("norm", arg_list)(0).vector_value ();
+      arg_list.clear ();
       Array <octave_idx_type> perm (dim_vector (sm.cols (), 1));
       SparseMatrix U, L;
       ilu_tp <SparseMatrix, double> (sm, L, U, nnz_u, nnz_l,
                                      rc_norm.fortran_vec (),
                                      perm, droptol, thresh, milu, udiag);
-      param_list.append (octave_value (L.cols ()));
+      arg_list.append (octave_value (L.cols ()));
       SparseMatrix eye =
-        feval ("speye", param_list)(0).sparse_matrix_value ();
+        feval ("speye", arg_list)(0).sparse_matrix_value ();
       if (milu == "row")
         {
           if (nargout == 3)
             {
               retval(2) = eye.index (idx_vector::colon, perm);
               retval(1) = U.index (idx_vector::colon, perm);
             }
           else if (nargout == 2)
@@ -997,37 +1008,37 @@ Undocumented internal function.\n\
               retval(0) = L + eye.index (perm, idx_vector::colon);
             }
         }
     }
   else
     {
       Array <Complex> rc_norm;
       SparseComplexMatrix sm = args(0).sparse_complex_matrix_value ();
-      param_list.append (sm);
+      arg_list.append (sm);
       nnz_u =
-        feval ("triu", param_list)(0).sparse_complex_matrix_value ().nnz ();
-      param_list.append (-1);
+        feval ("triu", arg_list)(0).sparse_complex_matrix_value ().nnz ();
+      arg_list.append (-1);
       nnz_l =
-        feval ("tril", param_list)(0).sparse_complex_matrix_value ().nnz ();
+        feval ("tril", arg_list)(0).sparse_complex_matrix_value ().nnz ();
       if (milu == "row")
-        param_list(1) = "rows";
+        arg_list(1) = "rows";
       else
-        param_list(1) = "cols";
-      rc_norm = feval ("norm", param_list)(0).complex_vector_value ();
+        arg_list(1) = "cols";
+      rc_norm = feval ("norm", arg_list)(0).complex_vector_value ();
+      arg_list.clear ();
       Array <octave_idx_type> perm (dim_vector (sm.cols (), 1));
-      param_list.clear ();
       SparseComplexMatrix U, L;
       ilu_tp < SparseComplexMatrix, Complex>
               (sm, L, U, nnz_u, nnz_l, rc_norm.fortran_vec (), perm,
                Complex (droptol), Complex (thresh), milu, udiag);
 
-      param_list.append (octave_value (L.cols ()));
+      arg_list.append (octave_value (L.cols ()));
       SparseComplexMatrix eye =
-        feval ("speye", param_list)(0).sparse_complex_matrix_value ();
+        feval ("speye", arg_list)(0).sparse_complex_matrix_value ();
       if (milu == "row")
         {
           if (nargout == 3)
             {
               retval(2) = eye.index (idx_vector::colon, perm);
               retval(1) = U.index (idx_vector::colon, perm);
             }
           else if (nargout == 2)
