# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1549497888 0
#      Thu Feb 07 00:04:48 2019 +0000
# Node ID 3e1f8934c4dedf817650cfc2593776a5d4e18069
# Parent  581d01526b34d7c1a52c701e9985b33291b1d096
# Parent  c17bdf3b3841396275447af436c15bb144649680
maint: Merge stable to default.

diff --git a/libinterp/corefcn/variables.cc b/libinterp/corefcn/variables.cc
--- a/libinterp/corefcn/variables.cc
+++ b/libinterp/corefcn/variables.cc
@@ -1351,17 +1351,21 @@ Executing @code{clear foo} a second time
 %!  x = 3;
 %!  clear
 %!  assert (! exist ("x", "var"));  # x is not in the current workspace anymore
 %!  global x                        # but still lives in the global workspace
 %!  assert (exist ("x", "var"));
 %!endfunction
 
 %!test
-%! __test_clear_no_args__ ();
+%! unwind_protect
+%!   __test_clear_no_args__ ();
+%! unwind_protect_cleanup
+%!   clear -g x
+%! end_unwind_protect
 
 ## Test that multiple options cannot be given
 %!error clear -f -g
 */
 
 static std::string Vmissing_function_hook = "__unimplemented__";
 
 DEFUN (missing_function_hook, args, nargout,
diff --git a/scripts/set/ismember.m b/scripts/set/ismember.m
--- a/scripts/set/ismember.m
+++ b/scripts/set/ismember.m
@@ -41,18 +41,18 @@
 ##
 ## The inputs @var{a} and @var{s} may also be cell arrays.
 ##
 ## @example
 ## @group
 ## a = @{"abc"@};
 ## s = @{"abc", "def"@};
 ## [tf, s_idx] = ismember (a, s)
-##      @result{} tf = [1, 0]
-##      @result{} s_idx = [1, 0]
+##      @result{} tf = 1
+##      @result{} s_idx = 1
 ## @end group
 ## @end example
 ##
 ## If the optional third argument @qcode{"rows"} is given then compare rows
 ## in @var{a} with rows in @var{s}.  The inputs must be 2-D matrices with the
 ## same number of columns to use this option.
 ##
 ## @example
diff --git a/scripts/specfun/gammainc.m b/scripts/specfun/gammainc.m
--- a/scripts/specfun/gammainc.m
+++ b/scripts/specfun/gammainc.m
@@ -475,30 +475,30 @@ endfunction
 %!assert (gammainc (-10, 10, "upper"), -3.112658165341493126871616e7, ...
 %!        -2*eps)
 %!assert (gammainc (-10, 10, "scaledlower"), 0.5128019364747265, -1e-14);
 %!assert (gammainc (-10, 10, "scaledupper"), -0.5128019200000000, -1e-14);
 %!assert (gammainc (200, 201, "upper"), 0.518794309678684497, -2 * eps);
 %!assert (gammainc (200, 201, "scaledupper"),
 %!        18.4904360746560462660798514, -eps)
 ## Here we are very good (no D (x,a)) involved
-%!assert (gammainc(1000, 1000.5, "scaledlower"), 39.48467539583672271, -2*eps)
+%!assert (gammainc (1000, 1000.5, "scaledlower"), 39.48467539583672271, -2*eps)
 %!assert (gammainc (709, 1000, "upper"), 0.99999999999999999999999954358, -eps)
 
 ## Test: case 9
 %!test <47800>
 %! assert (gammainc (60, 6, "upper"), 6.18022358081160257327264261e-20,
 %!         -10*eps);
 ## Matlab is better here than Octave
 %!assert (gammainc (751, 750, "upper"), 0.4805914320558831327179457887, -12*eps)
-%!assert (gammainc (200, 200, "upper"), 0.49059658199276367497217454, -5*eps)
+%!assert (gammainc (200, 200, "upper"), 0.49059658199276367497217454, -6*eps)
 %!assert (gammainc (200, 200), 0.509403418007236325027825459574527043, -5*eps)
 %!assert (gammainc (200, 200, "scaledupper"), 17.3984438553791505135122900,
-%!       -2*eps)
-%!assert (gammainc (200, 200, "scaledlower"), 18.065406676779221643065, -7*eps)
+%!       -3*eps)
+%!assert (gammainc (200, 200, "scaledlower"), 18.065406676779221643065, -8*eps)
 %!assert (gammainc (201, 200, "upper"), 0.46249244908276709524913736667,
 %!        -7*eps)
 %!assert <*54550> (gammainc (77, 2), 1)
 
 %!assert (gammainc (77, 2, "upper"), 0, -eps)
 %!assert (gammainc (1000, 3.1), 1)
 %!assert (gammainc (1000, 3.1, "upper"), 0)
 
@@ -539,17 +539,17 @@ endfunction
 %!assert (class (gammainc (single (1), 0)) == "single")
 %!assert (class (gammainc (int8 (1), 0)) == "double")
 %!assert (class (gammainc (1, single (0))) == "single")
 %!assert (class (gammainc (1, int8 (0))) == "double")
 %!assert (class (gammainc (1, 1)) == "double")
 %!assert (class (gammainc (single (1), 1)) == "single")
 %!assert (class (gammainc (int8 (1), 1)) == "double")
 %!assert (class (gammainc (1, single (1))) == "single")
-%!assert (class (gammainc (1, int8(1))) == "double")
+%!assert (class (gammainc (1, int8 (1))) == "double")
 %!assert (class (gammainc (1, 2)) == "double")
 %!assert (class (gammainc (single (1), 2)) == "single")
 %!assert (class (gammainc (int8 (1), 2)) == "double")
 %!assert (class (gammainc (1, single (2))) == "single")
 %!assert (class (gammainc (1, int8 (2))) == "double")
 %!assert (class (gammainc (-1, 0.5)) == "double")
 %!assert (class (gammainc (single (-1), 0.5)) == "single")
 %!assert (class (gammainc (int8 (-1), 0.5)) == "double")
diff --git a/test/bug-45969.tst b/test/bug-45969.tst
--- a/test/bug-45969.tst
+++ b/test/bug-45969.tst
@@ -2,16 +2,17 @@
 %! ascii_filename = tempname ();
 %! binary_filename = tempname ();
 %! a = 2;
 %! b = 10;
 %! c = 20;
 %! f1 = @ (f, x) f (x) + a;
 %! f2 = @ (y) f1 (@ (z) z^2 + b * y, y) + c;
 %! f2_arg = 5;
+%! save_default_options ("-text", "local");
 %! unwind_protect
 %!   save (ascii_filename, "f2");
 %!   save ("-binary", binary_filename, "f2");
 %!   ascii = load (ascii_filename);
 %!   binary = load (binary_filename);
 %!   assert (f2 (f2_arg), ascii.f2 (f2_arg));
 %!   assert (f2 (f2_arg), binary.f2 (f2_arg));
 %! unwind_protect_cleanup
@@ -22,15 +23,16 @@
 %!testif HAVE_HDF5
 %! hdf5_filename = tempname ();
 %! a = 2;
 %! b = 10;
 %! c = 20;
 %! f1 = @ (f, x) f (x) + a;
 %! f2 = @ (y) f1 (@ (z) z^2 + b * y, y) + c;
 %! f2_arg = 5;
+%! save_default_options ("-text", "local");
 %! unwind_protect
 %!   save ("-hdf5", hdf5_filename, "f2");
 %!   hdf5 = load (hdf5_filename);
 %!   assert (f2 (f2_arg), hdf5.f2 (f2_arg));
 %! unwind_protect_cleanup
 %!   unlink (hdf5_filename);
 %! end_unwind_protect
