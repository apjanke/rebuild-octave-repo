# HG changeset patch
# User jwe
# Date 1025290856 0
#      Fri Jun 28 19:00:56 2002 +0000
# Node ID edd758a7ca8d006105dac65efb89afd91a5dd11a
# Parent  3030cb6cb559887ab8d3d5e7b396441c235ef74f
[project @ 2002-06-28 19:00:56 by jwe]

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,23 @@
+2002-06-28  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* pt-decl.cc (tree_static_command::eval, tree_global_command::eval):
+	Call error for any non-zero value of error_state.
+	* pt-select.cc (tree_if_command::eval): Likewise.
+	* pt-loop.cc (tree_while_command::eval_error): Don't check error_state.
+	(tree_do_until_command::eval_error): Likewise.
+	(tree_simple_for_command::eval_error): Likewise.
+	(tree_complex_for_command::eval_error): Likewise.
+	* pt-assign.cc (tree_multi_assignment::eval_error): Likewise.
+	(tree_simple_assignment::eval_error): Likewise.
+	* pt-idx.cc (tree_index_expression::eval_error): Likewise.
+	* pt-colon.cc (tree_colon_expression::eval_error): Likewise.
+	(tree_colon_expression::rvalue): Delete rendundant error_state check.
+
 2002-06-26  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* ov-mapper.cc (MAPPER_LOOP, MAPPER_LOOP_1, MAPPER_LOOP_2): New	macros.
 	(octave_mapper::apply): Use them to inline the mapper loops.
 
 	* pt-unop.cc (tree_prefix_expression::rvalue): Ensure that the
 	operand is defined for op_incr and op_decr.
 	(tree_postfix_expression::rvalue): Likewise.
diff --git a/src/pt-assign.cc b/src/pt-assign.cc
--- a/src/pt-assign.cc
+++ b/src/pt-assign.cc
@@ -147,25 +147,22 @@ tree_simple_assignment::rvalue (void)
     }
 
   return retval;
 }
 
 void
 tree_simple_assignment::eval_error (void)
 {
-  if (error_state > 0)
-    {
-      int l = line ();
-      int c = column ();
+  int l = line ();
+  int c = column ();
 
-      if (l != -1 && c != -1)
-	::error ("evaluating assignment expression near line %d, column %d",
-		 l, c);
-    }
+  if (l != -1 && c != -1)
+    ::error ("evaluating assignment expression near line %d, column %d",
+	     l, c);
 }
 
 std::string
 tree_simple_assignment::oper (void) const
 {
   return octave_value::assign_op_as_string (etype);
 }
 
@@ -296,25 +293,22 @@ tree_multi_assignment::rvalue (int)
     eval_error ();
 
   return retval;
 }
 
 void
 tree_multi_assignment::eval_error (void)
 {
-  if (error_state > 0)
-    {
-      int l = line ();
-      int c = column ();
+  int l = line ();
+  int c = column ();
 
-      if (l != -1 && c != -1)
-	::error ("evaluating assignment expression near line %d, column %d",
-		 l, c);
-    }
+  if (l != -1 && c != -1)
+    ::error ("evaluating assignment expression near line %d, column %d",
+	     l, c);
 }
 
 std::string
 tree_multi_assignment::oper (void) const
 {
   return octave_value::assign_op_as_string (etype);
 }
 
diff --git a/src/pt-binop.cc b/src/pt-binop.cc
--- a/src/pt-binop.cc
+++ b/src/pt-binop.cc
@@ -93,19 +93,18 @@ tree_binary_expression::rvalue (void)
     eval_error ();
 
   return retval;
 }
 
 void
 tree_binary_expression::eval_error (void)
 {
-  if (error_state > 0)
-    ::error ("evaluating binary operator `%s' near line %d, column %d",
-	     oper () . c_str (), line (), column ());
+  ::error ("evaluating binary operator `%s' near line %d, column %d",
+	   oper () . c_str (), line (), column ());
 }
 
 std::string
 tree_binary_expression::oper (void) const
 {
   return octave_value::binary_op_as_string (etype);
 }
 
diff --git a/src/pt-colon.cc b/src/pt-colon.cc
--- a/src/pt-colon.cc
+++ b/src/pt-colon.cc
@@ -146,36 +146,31 @@ tree_colon_expression::rvalue (void)
 	  return retval;
 	}
     }
 
   retval = octave_value (xbase, xlimit, xinc);
 
   if (error_state)
     {
-      if (error_state)
-	eval_error ();
-
-      return octave_value ();
+      retval = octave_value ();
+      eval_error ();
     }
 
   return retval;
 }
 
 void
 tree_colon_expression::eval_error (const std::string& s)
 {
-  if (error_state > 0)
-    {
-      if (! s.empty ())
-	::error ("%s", s.c_str ());
+  if (! s.empty ())
+    ::error ("%s", s.c_str ());
 
-      ::error ("evaluating colon expression near line %d column %d",
-	       line (), column ());
-    }
+  ::error ("evaluating colon expression near line %d column %d",
+	   line (), column ());
 }
 
 void
 tree_colon_expression::accept (tree_walker& tw)
 {
   tw.visit_colon_expression (*this);
 }
 
diff --git a/src/pt-decl.cc b/src/pt-decl.cc
--- a/src/pt-decl.cc
+++ b/src/pt-decl.cc
@@ -125,17 +125,17 @@ tree_global_command::eval (void)
 {
   if (init_list)
     {
       init_list->eval (do_init);
 
       initialized = true;
     }
 
-  if (error_state > 0)
+  if (error_state)
     ::error ("evaluating global command near line %d, column %d",
 	     line (), column ());
 }
 
 // Static.
 
 void
 tree_static_command::do_init (tree_decl_elt& elt)
@@ -165,17 +165,17 @@ tree_static_command::eval (void)
   // Static variables only need to be marked and initialized once.
 
   if (init_list && ! initialized)
     {
       init_list->eval (do_init);
 
       initialized = true;
 
-      if (error_state > 0)
+      if (error_state)
 	::error ("evaluating static command near line %d, column %d",
 		 line (), column ());
     }
 }
 
 static int
 initialize_global_variables (void)
 {
diff --git a/src/pt-idx.cc b/src/pt-idx.cc
--- a/src/pt-idx.cc
+++ b/src/pt-idx.cc
@@ -312,35 +312,32 @@ tree_index_expression::lvalue (void)
     }
 
   return retval;
 }
 
 void
 tree_index_expression::eval_error (void)
 {
-  if (error_state > 0)
-    {
-      int l = line ();
-      int c = column ();
+  int l = line ();
+  int c = column ();
 
-      const char *type_str;
+  const char *type_str;
 
-      if (type[0] == '.')
-	type_str = "structure reference operator";
-      else if (args.front ())
-	type_str = "index expression";
-      else
-	type_str = "expression";
+  if (type[0] == '.')
+    type_str = "structure reference operator";
+  else if (args.front ())
+    type_str = "index expression";
+  else
+    type_str = "expression";
 
-      if (l != -1 && c != -1)
-	::error ("evaluating %s near line %d, column %d", type_str, l, c);
-      else
-	::error ("evaluating %s", type_str);
-    }
+  if (l != -1 && c != -1)
+    ::error ("evaluating %s near line %d, column %d", type_str, l, c);
+  else
+    ::error ("evaluating %s", type_str);
 }
 
 void
 tree_index_expression::accept (tree_walker& tw)
 {
   tw.visit_index_expression (*this);
 }
 
diff --git a/src/pt-loop.cc b/src/pt-loop.cc
--- a/src/pt-loop.cc
+++ b/src/pt-loop.cc
@@ -115,19 +115,18 @@ tree_while_command::eval (void)
 
  cleanup:
   unwind_protect::run_frame ("while_command::eval");
 }
 
 void
 tree_while_command::eval_error (void)
 {
-  if (error_state > 0)
-    ::error ("evaluating while command near line %d, column %d",
-	     line (), column ());
+  ::error ("evaluating while command near line %d, column %d",
+	   line (), column ());
 }
 
 void
 tree_while_command::accept (tree_walker& tw)
 {
   tw.visit_while_command (*this);
 }
 
@@ -169,19 +168,18 @@ tree_do_until_command::eval (void)
 
  cleanup:
   unwind_protect::run_frame ("do_until_command::eval");
 }
 
 void
 tree_do_until_command::eval_error (void)
 {
-  if (error_state > 0)
-    ::error ("evaluating do-until command near line %d, column %d",
-	     line (), column ());
+  ::error ("evaluating do-until command near line %d, column %d",
+	   line (), column ());
 }
 
 void
 tree_do_until_command::accept (tree_walker& tw)
 {
   tw.visit_do_until_command (*this);
 }
 
@@ -394,19 +392,18 @@ tree_simple_for_command::eval (void)
 
  cleanup:
   unwind_protect::run_frame ("simple_for_command::eval");
 }
 
 void
 tree_simple_for_command::eval_error (void)
 {
-  if (error_state > 0)
-    ::error ("evaluating for command near line %d, column %d",
-	     line (), column ());
+  ::error ("evaluating for command near line %d, column %d",
+	   line (), column ());
 }
 
 void
 tree_simple_for_command::accept (tree_walker& tw)
 {
   tw.visit_simple_for_command (*this);
 }
 
@@ -502,19 +499,18 @@ tree_complex_for_command::eval (void)
 
  cleanup:
   unwind_protect::run_frame ("complex_for_command::eval");
 }
 
 void
 tree_complex_for_command::eval_error (void)
 {
-  if (error_state > 0)
-    ::error ("evaluating for command near line %d, column %d",
-	     line (), column ());
+  ::error ("evaluating for command near line %d, column %d",
+	   line (), column ());
 }
 
 void
 tree_complex_for_command::accept (tree_walker& tw)
 {
   tw.visit_complex_for_command (*this);
 }
 
diff --git a/src/pt-select.cc b/src/pt-select.cc
--- a/src/pt-select.cc
+++ b/src/pt-select.cc
@@ -98,17 +98,17 @@ tree_if_command::~tree_if_command (void)
 }
 
 void
 tree_if_command::eval (void)
 {
   if (list)
     list->eval ();
 
-  if (error_state > 0)
+  if (error_state)
     ::error ("evaluating if command near line %d, column %d",
 	     line (), column ());
 }
 
 void
 tree_if_command::accept (tree_walker& tw)
 {
   tw.visit_if_command (*this);
diff --git a/src/pt-unop.cc b/src/pt-unop.cc
--- a/src/pt-unop.cc
+++ b/src/pt-unop.cc
@@ -105,26 +105,27 @@ tree_prefix_expression::rvalue (void)
 		  retval = octave_value ();
 		  eval_error ();
 		}
 	    }
 	  else
 	    eval_error ();
 	}
     }
+  else
+    eval_error ();
 
   return retval;
 }
 
 void
 tree_prefix_expression::eval_error (void)
 {
-  if (error_state > 0)
-    ::error ("evaluating prefix operator `%s' near line %d, column %d",
-	     oper () . c_str (), line (), column ());
+  ::error ("evaluating prefix operator `%s' near line %d, column %d",
+	   oper () . c_str (), line (), column ());
 }
 
 void
 tree_prefix_expression::accept (tree_walker& tw)
 {
   tw.visit_prefix_expression (*this);
 }
 
@@ -198,19 +199,18 @@ tree_postfix_expression::rvalue (void)
     eval_error ();
 
   return retval;
 }
 
 void
 tree_postfix_expression::eval_error (void)
 {
-  if (error_state > 0)
-    ::error ("evaluating postfix operator `%s' near line %d, column %d",
-	     oper () . c_str (), line (), column ());
+  ::error ("evaluating postfix operator `%s' near line %d, column %d",
+	   oper () . c_str (), line (), column ());
 }
 
 void
 tree_postfix_expression::accept (tree_walker& tw)
 {
   tw.visit_postfix_expression (*this);
 }
 
