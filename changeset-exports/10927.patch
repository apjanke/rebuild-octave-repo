# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1283248828 -7200
#      Tue Aug 31 12:00:28 2010 +0200
# Node ID a9e9659e1dcacf476967fa548b7c0dff6f8458a0
# Parent  f687bd17ce21f663eab95f7592b9b7d5727bcae0
support file IDs in dlmread

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,12 @@
+2010-08-31  Jaroslav Hajek  <highegg@gmail.com>
+
+	* DLD-FUNCTIONS/dlmread.cc (Fdlmread): Support reading from a file ID.
+
 2010-08-31  Jaroslav Hajek  <highegg@gmail.com>
 
 	* ov-class.cc (get_current_method_class): Make it an octave_class
 	method. Return class_name as default.
 	(octave_class::dotref): Error on zero return value.
 
 2010-08-30  Ben Abbott <bpabbott@mac.com>
 
diff --git a/src/DLD-FUNCTIONS/dlmread.cc b/src/DLD-FUNCTIONS/dlmread.cc
--- a/src/DLD-FUNCTIONS/dlmread.cc
+++ b/src/DLD-FUNCTIONS/dlmread.cc
@@ -31,16 +31,17 @@ along with Octave; see the file COPYING.
 #include <cctype>
 #include <fstream>
 #include <limits>
 
 #include "file-ops.h"
 #include "lo-ieee.h"
 
 #include "defun-dld.h"
+#include "oct-stream.h"
 #include "error.h"
 #include "oct-obj.h"
 #include "utils.h"
 
 static const octave_idx_type idx_max =  std::numeric_limits<octave_idx_type>::max ();
 
 static bool
 read_cell_spec (std::istream& is, octave_idx_type& row, octave_idx_type& col)
@@ -168,48 +169,73 @@ Given two scalar arguments @var{r0} and 
 row and column of the data to be read.  These values are indexed from zero,\n\
 such that the first row corresponds to an index of zero.\n\
 \n\
 The @var{range} parameter may be a 4 element vector containing the upper\n\
 left and lower right corner @code{[@var{R0},@var{C0},@var{R1},@var{C1}]}\n\
 where the lowest index value is zero.  Alternatively, a spreadsheet style\n\
 range such as 'A2..Q15' or 'T1:AA5' can be used.  The lowest alphabetical\n\
 index 'A' refers to the first column.  The lowest row index is 1.\n\
-@seealso{csvread,dlmwrite}\n\
+\n\
+@var{file} should be a file name or file id given by @code{fopen}. In the\n\
+latter case, the file is read until end of file is reached.\n\
+@seealso{csvread,dlmwrite,fopen}\n\
 @end deftypefn")
 {
   octave_value_list retval;
 
   int nargin = args.length ();
 
   if (nargin < 1 || nargin > 4) 
     {
       print_usage ();
       return retval;
     }
 
-  if (!args(0).is_string ())
+  std::istream *input = 0;
+  std::auto_ptr<std::ifstream> input_file;
+  octave_stream input_fid;
+
+  if (args(0).is_string ())
     {
-      error ("dlmread: 1st argument must be a string");
+      // File name.
+      std::string fname (args(0).string_value ());
+      if (error_state)
+         return retval;
+
+      std::string tname = file_ops::tilde_expand (fname);
+
+      input_file = std::auto_ptr<std::ifstream> (new std::ifstream (tname.c_str ()));
+      if (input_file->bad ())
+        {
+          error ("dlmread: unable to open file `%s'", fname.c_str ());
+          return retval;
+        }
+      else
+         input = input_file.get ();
+    }
+  else if (args(0).is_scalar_type ())
+    {
+      input_fid = octave_stream_list::lookup (args(0), "dlmread");
+      if (error_state)
+         return retval;
+
+      input = input_fid.input_stream ();
+      if (! input)
+        {
+          error ("dlmread: stream not open for input");
+          return retval;
+        }
+    }
+  else
+    {
+      error ("dlmread: 1st argument must be a string or file id");
       return retval;
     }
-  
-  std::string fname (args(0).string_value ());
-  if (error_state)
-    return retval;
 
-  std::string tname = file_ops::tilde_expand (fname);
-
-  std::ifstream file (tname.c_str ());
-  if (!file)
-    {
-      error ("dlmread: unable to open file `%s'", fname.c_str ());
-      return retval;
-    }
-  
   // Set default separator.
   std::string sep;
   if (nargin > 1)
     {
       if (args(1).is_sq_string ())
         sep = do_string_escapes (args(1).string_value ());
       else
         sep = args(1).string_value ();
@@ -251,24 +277,24 @@ index 'A' refers to the first column.  T
       bool sepflag = false;
 
       octave_idx_type maxrows = r1 - r0;
 
       std::string line;
 
       // Skip the r0 leading lines as these might be a header.
       for (octave_idx_type m = 0; m < r0; m++)
-        getline (file, line);
+        getline (*input, line);
       r1 -= r0;
 
       std::istringstream tmp_stream;
 
       // Read in the data one field at a time, growing the data matrix
       // as needed.
-      while (getline (file, line))
+      while (getline (*input, line))
         {
           // Skip blank lines for compatibility.
           if (line.find_first_not_of (" \t") == std::string::npos)
             continue;
 
           // To be compatible with matlab, blank separator should
           // correspond to whitespace as delimter.
           if (!sep.length ())
