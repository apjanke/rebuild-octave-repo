# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1237293496 -3600
#      Tue Mar 17 13:38:16 2009 +0100
# Node ID 349d7516167203248b9fae25eec9e46b19ff91e7
# Parent  46a12e3f882c958b8ef581ce36e9545e47804d6e
more cosmetic adjustments to fsolve

diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -2,16 +2,17 @@ 2009-03-17  Jaroslav Hajek  <highegg@gma
 
 	* optimization/__fdjac__.m: Pass in fvec to save one evaluation.
 	* optimization/fsolve.m: Avoid redundant reevaluation when using
 	FD jacobians. Document how it can be done with user jacobians.  Make
 	first iteration special and call outputfcn after it. Skip updates
 	unless two successful iterations have occured.
 	* optimization/__dogleg__.m: Add missing alpha in the zero-gradient
 	case.
+	* optimization/fsolve.m: Remove autodg (not used), simplify.
 
 2009-03-14  Jaroslav Hajek  <highegg@gmail.com>
 
 	* statistics/base/var.m: a -> x.
 
 2009-03-13  Jaroslav Hajek  <highegg@gmail.com>
 
 	* statistics/base/mean.m: Simplify.
diff --git a/scripts/optimization/fsolve.m b/scripts/optimization/fsolve.m
--- a/scripts/optimization/fsolve.m
+++ b/scripts/optimization/fsolve.m
@@ -159,26 +159,25 @@ function [x, fvec, info, output, fjac] =
   ## prefers accuracy to performance.
 
   macheps = eps (class (x0));
 
   tolx = optimget (options, "TolX", sqrt (macheps));
   tolf = optimget (options, "TolFun", sqrt (macheps));
 
   factor = 100;
-  ## FIXME: TypicalX corresponds to user scaling (???)
-  autodg = true;
 
   niter = 1;
   nfev = 1;
 
   x = x0(:);
   info = 0;
 
   ## Initial evaluation.
+  ## Handle arbitrary shapes of x and f and remember them.
   fvec = fcn (reshape (x, xsiz));
   fsiz = size (fvec);
   fvec = fvec(:);
   fn = norm (fvec);
   m = length (fvec);
   n = length (x);
 
   if (! isempty (outfcn))
@@ -195,17 +194,16 @@ function [x, fvec, info, output, fjac] =
   endif
 
   nsuciter = 0;
 
   ## Outer loop.
   while (niter < maxiter && nfev < maxfev && ! info)
 
     ## Calculate function value and Jacobian (possibly via FD).
-    ## Handle arbitrary shapes of x and f and remember them.
     if (has_jac)
       [fvec, fjac] = fcn (reshape (x, xsiz));
       ## If the jacobian is sparse, disable Broyden updating.
       if (issparse (fjac))
         updating = false;
       endif
       fvec = fvec(:);
       nfev ++;
@@ -226,41 +224,37 @@ function [x, fvec, info, output, fjac] =
       ## just to get invariance. Original MINPACK didn't pivot either, at least
       ## when qr updating was used.
       [q, r] = qr (fjac, 0);
     endif
 
     ## Get column norms, use them as scaling factors.
     jcn = norm (fjac, 'columns').';
     if (niter == 1)
-      if (autodg)
-        dg = jcn;
-        dg(dg == 0) = 1;
-      endif
+      dg = jcn;
+      dg(dg == 0) = 1;
       xn = norm (dg .* x);
       ## FIXME: something better?
       delta = max (factor * xn, 1);
     endif
 
-    ## Rescale if necessary.
-    if (autodg)
-      ## FIXME: the original minpack used the following rescaling strategy:
-      ##   dg = max (dg, jcn);
-      ## but it seems not good if we start with a bad guess yielding jacobian
-      ## columns with large norms that later decrease, because the corresponding
-      ## variable will still be overscaled. So instead, we only give the old
-      ## scaling a small momentum, but do not honor it.
+    ## Rescale adaptively.
+    ## FIXME: the original minpack used the following rescaling strategy:
+    ##   dg = max (dg, jcn);
+    ## but it seems not good if we start with a bad guess yielding jacobian
+    ## columns with large norms that later decrease, because the corresponding
+    ## variable will still be overscaled. So instead, we only give the old
+    ## scaling a small momentum, but do not honor it.
 
-      dg = max (0.1*dg, jcn);
+    dg = max (0.1*dg, jcn);
 
-      ## It also seems that in the case of fast (and inhomogeneously) changing
-      ## jacobian, the Broyden updates are of little use, so maybe we could
-      ## skip them if a big disproportional change is expected. The question is,
-      ## of course, how to define the above terms :)
-    endif
+    ## It also seems that in the case of fast (and inhomogeneously) changing
+    ## jacobian, the Broyden updates are of little use, so maybe we could
+    ## skip them if a big disproportional change is expected. The question is,
+    ## of course, how to define the above terms :)
 
     lastratio = 0;
     nfail = 0;
     nsuc = 0;
     ## Inner loop.
     while (niter <= maxiter && nfev < maxfev && ! info)
 
       if (useqr)
