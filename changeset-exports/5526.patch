# HG changeset patch
# User jwe
# Date 1130806454 0
#      Tue Nov 01 00:54:14 2005 +0000
# Node ID 8c56849b15095736e3707d70babc5f41f539711d
# Parent  558c69736dc04cca4015e248b14a6aee7c884352
[project @ 2005-11-01 00:54:14 by jwe]

diff --git a/liboctave/CSparse.cc b/liboctave/CSparse.cc
--- a/liboctave/CSparse.cc
+++ b/liboctave/CSparse.cc
@@ -5003,17 +5003,17 @@ SparseComplexMatrix::fsolve (SparseType 
       if (typ == SparseType::Hermitian)
 	{
 #ifdef HAVE_CHOLMOD
 	  cholmod_common Common;
 	  cholmod_common *cm = &Common;
 
 	  // Setup initial parameters
 	  CHOLMOD_NAME(start) (cm);
-	  cm->prefer_zomplex = FALSE;
+	  cm->prefer_zomplex = false;
 
 	  double spu = Voctave_sparse_controls.get_key ("spumoni");
 	  if (spu == 0.)
 	    {
 	      cm->print = -1;
 	      cm->print_function = NULL;
 	    }
 	  else
@@ -5040,30 +5040,29 @@ SparseComplexMatrix::fsolve (SparseType 
 	  METIS_free   = cm->free_memory;
 	  // Turn off METIS memory guard.  It is not needed, because mxMalloc
 	  // will safely terminate the mexFunction and free any workspace
 	  // without killing all of octave.
 	  cm->metis_memory   = 0.0;
 #endif
 #endif
 #endif
-
-	  cm->final_ll = TRUE;
+	  cm->final_ll = true;
 
 	  cholmod_sparse Astore;
 	  cholmod_sparse *A = &Astore;
 	  double dummy;
 	  A->nrow = nr;
 	  A->ncol = nc;
 
 	  A->p = cidx();
 	  A->i = ridx();
 	  A->nzmax = nonzero();
-	  A->packed = TRUE;
-	  A->sorted = TRUE;
+	  A->packed = true;
+	  A->sorted = true;
 	  A->nz = NULL;
 #ifdef IDX_TYPE_LONG
 	  A->itype = CHOLMOD_LONG;
 #else
 	  A->itype = CHOLMOD_INT;
 #endif
 	  A->dtype = CHOLMOD_DOUBLE;
 	  A->stype = 1;
@@ -5272,17 +5271,17 @@ SparseComplexMatrix::fsolve (SparseType 
       if (typ == SparseType::Hermitian)
 	{
 #ifdef HAVE_CHOLMOD
 	  cholmod_common Common;
 	  cholmod_common *cm = &Common;
 
 	  // Setup initial parameters
 	  CHOLMOD_NAME(start) (cm);
-	  cm->prefer_zomplex = FALSE;
+	  cm->prefer_zomplex = false;
 
 	  double spu = Voctave_sparse_controls.get_key ("spumoni");
 	  if (spu == 0.)
 	    {
 	      cm->print = -1;
 	      cm->print_function = NULL;
 	    }
 	  else
@@ -5310,29 +5309,29 @@ SparseComplexMatrix::fsolve (SparseType 
 	  // Turn off METIS memory guard.  It is not needed, because mxMalloc
 	  // will safely terminate the mexFunction and free any workspace
 	  // without killing all of octave.
 	  cm->metis_memory   = 0.0;
 #endif
 #endif
 #endif
 
-	  cm->final_ll = TRUE;
+	  cm->final_ll = true;
 
 	  cholmod_sparse Astore;
 	  cholmod_sparse *A = &Astore;
 	  double dummy;
 	  A->nrow = nr;
 	  A->ncol = nc;
 
 	  A->p = cidx();
 	  A->i = ridx();
 	  A->nzmax = nonzero();
-	  A->packed = TRUE;
-	  A->sorted = TRUE;
+	  A->packed = true;
+	  A->sorted = true;
 	  A->nz = NULL;
 #ifdef IDX_TYPE_LONG
 	  A->itype = CHOLMOD_LONG;
 #else
 	  A->itype = CHOLMOD_INT;
 #endif
 	  A->dtype = CHOLMOD_DOUBLE;
 	  A->stype = 1;
@@ -5345,18 +5344,18 @@ SparseComplexMatrix::fsolve (SparseType 
 
 	  cholmod_sparse Bstore;
 	  cholmod_sparse *B = &Bstore;
 	  B->nrow = b.rows();
 	  B->ncol = b.cols();
 	  B->p = b.cidx();
 	  B->i = b.ridx();
 	  B->nzmax = b.nonzero();
-	  B->packed = TRUE;
-	  B->sorted = TRUE;
+	  B->packed = true;
+	  B->sorted = true;
 	  B->nz = NULL;
 #ifdef IDX_TYPE_LONG
 	  B->itype = CHOLMOD_LONG;
 #else
 	  B->itype = CHOLMOD_INT;
 #endif
 	  B->dtype = CHOLMOD_DOUBLE;
 	  B->stype = 0;
@@ -5586,17 +5585,17 @@ SparseComplexMatrix::fsolve (SparseType 
       if (typ == SparseType::Hermitian)
 	{
 #ifdef HAVE_CHOLMOD
 	  cholmod_common Common;
 	  cholmod_common *cm = &Common;
 
 	  // Setup initial parameters
 	  CHOLMOD_NAME(start) (cm);
-	  cm->prefer_zomplex = FALSE;
+	  cm->prefer_zomplex = false;
 
 	  double spu = Voctave_sparse_controls.get_key ("spumoni");
 	  if (spu == 0.)
 	    {
 	      cm->print = -1;
 	      cm->print_function = NULL;
 	    }
 	  else
@@ -5624,29 +5623,29 @@ SparseComplexMatrix::fsolve (SparseType 
 	  // Turn off METIS memory guard.  It is not needed, because mxMalloc
 	  // will safely terminate the mexFunction and free any workspace
 	  // without killing all of octave.
 	  cm->metis_memory   = 0.0;
 #endif
 #endif
 #endif
 
-	  cm->final_ll = TRUE;
+	  cm->final_ll = true;
 
 	  cholmod_sparse Astore;
 	  cholmod_sparse *A = &Astore;
 	  double dummy;
 	  A->nrow = nr;
 	  A->ncol = nc;
 
 	  A->p = cidx();
 	  A->i = ridx();
 	  A->nzmax = nonzero();
-	  A->packed = TRUE;
-	  A->sorted = TRUE;
+	  A->packed = true;
+	  A->sorted = true;
 	  A->nz = NULL;
 #ifdef IDX_TYPE_LONG
 	  A->itype = CHOLMOD_LONG;
 #else
 	  A->itype = CHOLMOD_INT;
 #endif
 	  A->dtype = CHOLMOD_DOUBLE;
 	  A->stype = 1;
@@ -5833,17 +5832,17 @@ SparseComplexMatrix::fsolve (SparseType 
       if (typ == SparseType::Hermitian)
 	{
 #ifdef HAVE_CHOLMOD
 	  cholmod_common Common;
 	  cholmod_common *cm = &Common;
 
 	  // Setup initial parameters
 	  CHOLMOD_NAME(start) (cm);
-	  cm->prefer_zomplex = FALSE;
+	  cm->prefer_zomplex = false;
 
 	  double spu = Voctave_sparse_controls.get_key ("spumoni");
 	  if (spu == 0.)
 	    {
 	      cm->print = -1;
 	      cm->print_function = NULL;
 	    }
 	  else
@@ -5871,29 +5870,29 @@ SparseComplexMatrix::fsolve (SparseType 
 	  // Turn off METIS memory guard.  It is not needed, because mxMalloc
 	  // will safely terminate the mexFunction and free any workspace
 	  // without killing all of octave.
 	  cm->metis_memory   = 0.0;
 #endif
 #endif
 #endif
 
-	  cm->final_ll = TRUE;
+	  cm->final_ll = true;
 
 	  cholmod_sparse Astore;
 	  cholmod_sparse *A = &Astore;
 	  double dummy;
 	  A->nrow = nr;
 	  A->ncol = nc;
 
 	  A->p = cidx();
 	  A->i = ridx();
 	  A->nzmax = nonzero();
-	  A->packed = TRUE;
-	  A->sorted = TRUE;
+	  A->packed = true;
+	  A->sorted = true;
 	  A->nz = NULL;
 #ifdef IDX_TYPE_LONG
 	  A->itype = CHOLMOD_LONG;
 #else
 	  A->itype = CHOLMOD_INT;
 #endif
 	  A->dtype = CHOLMOD_DOUBLE;
 	  A->stype = 1;
@@ -5906,18 +5905,18 @@ SparseComplexMatrix::fsolve (SparseType 
 
 	  cholmod_sparse Bstore;
 	  cholmod_sparse *B = &Bstore;
 	  B->nrow = b.rows();
 	  B->ncol = b.cols();
 	  B->p = b.cidx();
 	  B->i = b.ridx();
 	  B->nzmax = b.nonzero();
-	  B->packed = TRUE;
-	  B->sorted = TRUE;
+	  B->packed = true;
+	  B->sorted = true;
 	  B->nz = NULL;
 #ifdef IDX_TYPE_LONG
 	  B->itype = CHOLMOD_LONG;
 #else
 	  B->itype = CHOLMOD_INT;
 #endif
 	  B->dtype = CHOLMOD_DOUBLE;
 	  B->stype = 0;
diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,13 @@
+2005-10-31  David Bateman  <dbateman@free.fr>
+
+	* dSparse.cc, CSparse.cc: Use C++ true/false instead of
+	preprocessor defined TRUE/FALSE.
+
 2005-10-30  John W. Eaton  <jwe@octave.org>
 
 	* mx-inlines.cc (MX_ND_REDUCTION): Iterate in direction of DIM.
 	(MX_ND_CUMULATIVE_OP): Likewise.
 
 2005-10-29  John W. Eaton  <jwe@octave.org>
 
 	* mx-inlines.cc (MX_ND_REDUCTION): Avoid increment_index to speed
diff --git a/liboctave/dSparse.cc b/liboctave/dSparse.cc
--- a/liboctave/dSparse.cc
+++ b/liboctave/dSparse.cc
@@ -5222,17 +5222,17 @@ SparseMatrix::fsolve (SparseType &mattyp
       if (typ == SparseType::Hermitian)
 	{
 #ifdef HAVE_CHOLMOD
 	  cholmod_common Common;
 	  cholmod_common *cm = &Common;
 
 	  // Setup initial parameters
 	  CHOLMOD_NAME(start) (cm);
-	  cm->prefer_zomplex = FALSE;
+	  cm->prefer_zomplex = false;
 
 	  double spu = Voctave_sparse_controls.get_key ("spumoni");
 	  if (spu == 0.)
 	    {
 	      cm->print = -1;
 	      cm->print_function = NULL;
 	    }
 	  else
@@ -5260,29 +5260,29 @@ SparseMatrix::fsolve (SparseType &mattyp
 	  // Turn off METIS memory guard.  It is not needed, because mxMalloc
 	  // will safely terminate the mexFunction and free any workspace
 	  // without killing all of octave.
 	  cm->metis_memory   = 0.0;
 #endif
 #endif
 #endif
 
-	  cm->final_ll = TRUE;
+	  cm->final_ll = true;
 
 	  cholmod_sparse Astore;
 	  cholmod_sparse *A = &Astore;
 	  double dummy;
 	  A->nrow = nr;
 	  A->ncol = nc;
 
 	  A->p = cidx();
 	  A->i = ridx();
 	  A->nzmax = nonzero();
-	  A->packed = TRUE;
-	  A->sorted = TRUE;
+	  A->packed = true;
+	  A->sorted = true;
 	  A->nz = NULL;
 #ifdef IDX_TYPE_LONG
 	  A->itype = CHOLMOD_LONG;
 #else
 	  A->itype = CHOLMOD_INT;
 #endif
 	  A->dtype = CHOLMOD_DOUBLE;
 	  A->stype = 1;
@@ -5464,17 +5464,17 @@ SparseMatrix::fsolve (SparseType &mattyp
       if (typ == SparseType::Hermitian)
 	{
 #ifdef HAVE_CHOLMOD
 	  cholmod_common Common;
 	  cholmod_common *cm = &Common;
 
 	  // Setup initial parameters
 	  CHOLMOD_NAME(start) (cm);
-	  cm->prefer_zomplex = FALSE;
+	  cm->prefer_zomplex = false;
 
 	  double spu = Voctave_sparse_controls.get_key ("spumoni");
 	  if (spu == 0.)
 	    {
 	      cm->print = -1;
 	      cm->print_function = NULL;
 	    }
 	  else
@@ -5502,29 +5502,29 @@ SparseMatrix::fsolve (SparseType &mattyp
 	  // Turn off METIS memory guard.  It is not needed, because mxMalloc
 	  // will safely terminate the mexFunction and free any workspace
 	  // without killing all of octave.
 	  cm->metis_memory   = 0.0;
 #endif
 #endif
 #endif
 
-	  cm->final_ll = TRUE;
+	  cm->final_ll = true;
 
 	  cholmod_sparse Astore;
 	  cholmod_sparse *A = &Astore;
 	  double dummy;
 	  A->nrow = nr;
 	  A->ncol = nc;
 
 	  A->p = cidx();
 	  A->i = ridx();
 	  A->nzmax = nonzero();
-	  A->packed = TRUE;
-	  A->sorted = TRUE;
+	  A->packed = true;
+	  A->sorted = true;
 	  A->nz = NULL;
 #ifdef IDX_TYPE_LONG
 	  A->itype = CHOLMOD_LONG;
 #else
 	  A->itype = CHOLMOD_INT;
 #endif
 	  A->dtype = CHOLMOD_DOUBLE;
 	  A->stype = 1;
@@ -5537,18 +5537,18 @@ SparseMatrix::fsolve (SparseType &mattyp
 
 	  cholmod_sparse Bstore;
 	  cholmod_sparse *B = &Bstore;
 	  B->nrow = b.rows();
 	  B->ncol = b.cols();
 	  B->p = b.cidx();
 	  B->i = b.ridx();
 	  B->nzmax = b.nonzero();
-	  B->packed = TRUE;
-	  B->sorted = TRUE;
+	  B->packed = true;
+	  B->sorted = true;
 	  B->nz = NULL;
 #ifdef IDX_TYPE_LONG
 	  B->itype = CHOLMOD_LONG;
 #else
 	  B->itype = CHOLMOD_INT;
 #endif
 	  B->dtype = CHOLMOD_DOUBLE;
 	  B->stype = 0;
@@ -5753,17 +5753,17 @@ SparseMatrix::fsolve (SparseType &mattyp
       if (typ == SparseType::Hermitian)
 	{
 #ifdef HAVE_CHOLMOD
 	  cholmod_common Common;
 	  cholmod_common *cm = &Common;
 
 	  // Setup initial parameters
 	  CHOLMOD_NAME(start) (cm);
-	  cm->prefer_zomplex = FALSE;
+	  cm->prefer_zomplex = false;
 
 	  double spu = Voctave_sparse_controls.get_key ("spumoni");
 	  if (spu == 0.)
 	    {
 	      cm->print = -1;
 	      cm->print_function = NULL;
 	    }
 	  else
@@ -5791,29 +5791,29 @@ SparseMatrix::fsolve (SparseType &mattyp
 	  // Turn off METIS memory guard.  It is not needed, because mxMalloc
 	  // will safely terminate the mexFunction and free any workspace
 	  // without killing all of octave.
 	  cm->metis_memory   = 0.0;
 #endif
 #endif
 #endif
 
-	  cm->final_ll = TRUE;
+	  cm->final_ll = true;
 
 	  cholmod_sparse Astore;
 	  cholmod_sparse *A = &Astore;
 	  double dummy;
 	  A->nrow = nr;
 	  A->ncol = nc;
 
 	  A->p = cidx();
 	  A->i = ridx();
 	  A->nzmax = nonzero();
-	  A->packed = TRUE;
-	  A->sorted = TRUE;
+	  A->packed = true;
+	  A->sorted = true;
 	  A->nz = NULL;
 #ifdef IDX_TYPE_LONG
 	  A->itype = CHOLMOD_LONG;
 #else
 	  A->itype = CHOLMOD_INT;
 #endif
 	  A->dtype = CHOLMOD_DOUBLE;
 	  A->stype = 1;
@@ -6015,17 +6015,17 @@ SparseMatrix::fsolve (SparseType &mattyp
       if (typ == SparseType::Hermitian)
 	{
 #ifdef HAVE_CHOLMOD
 	  cholmod_common Common;
 	  cholmod_common *cm = &Common;
 
 	  // Setup initial parameters
 	  CHOLMOD_NAME(start) (cm);
-	  cm->prefer_zomplex = FALSE;
+	  cm->prefer_zomplex = false;
 
 	  double spu = Voctave_sparse_controls.get_key ("spumoni");
 	  if (spu == 0.)
 	    {
 	      cm->print = -1;
 	      cm->print_function = NULL;
 	    }
 	  else
@@ -6053,29 +6053,29 @@ SparseMatrix::fsolve (SparseType &mattyp
 	  // Turn off METIS memory guard.  It is not needed, because mxMalloc
 	  // will safely terminate the mexFunction and free any workspace
 	  // without killing all of octave.
 	  cm->metis_memory   = 0.0;
 #endif
 #endif
 #endif
 
-	  cm->final_ll = TRUE;
+	  cm->final_ll = true;
 
 	  cholmod_sparse Astore;
 	  cholmod_sparse *A = &Astore;
 	  double dummy;
 	  A->nrow = nr;
 	  A->ncol = nc;
 
 	  A->p = cidx();
 	  A->i = ridx();
 	  A->nzmax = nonzero();
-	  A->packed = TRUE;
-	  A->sorted = TRUE;
+	  A->packed = true;
+	  A->sorted = true;
 	  A->nz = NULL;
 #ifdef IDX_TYPE_LONG
 	  A->itype = CHOLMOD_LONG;
 #else
 	  A->itype = CHOLMOD_INT;
 #endif
 	  A->dtype = CHOLMOD_DOUBLE;
 	  A->stype = 1;
@@ -6088,18 +6088,18 @@ SparseMatrix::fsolve (SparseType &mattyp
 
 	  cholmod_sparse Bstore;
 	  cholmod_sparse *B = &Bstore;
 	  B->nrow = b.rows();
 	  B->ncol = b.cols();
 	  B->p = b.cidx();
 	  B->i = b.ridx();
 	  B->nzmax = b.nonzero();
-	  B->packed = TRUE;
-	  B->sorted = TRUE;
+	  B->packed = true;
+	  B->sorted = true;
 	  B->nz = NULL;
 #ifdef IDX_TYPE_LONG
 	  B->itype = CHOLMOD_LONG;
 #else
 	  B->itype = CHOLMOD_INT;
 #endif
 	  B->dtype = CHOLMOD_DOUBLE;
 	  B->stype = 0;
