# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1479348196 18000
#      Wed Nov 16 21:03:16 2016 -0500
# Node ID 9c666100416702b3b5d58ef93da54025250244fa
# Parent  e58879c649b5b5d82a694aaa8b2df98fc68c7713
error if break statement is in script file separate from loop (bug #39168)

* pt-eval.cc (tree_evaluator::visit_break_command):
Error if break command is outside of loop.
* oct-parse.in.yy (base_parser::make_break_command): Likewise.

* fminunc.m, fsolve.m: Outside of loop, use return instead of break.

diff --git a/libinterp/parse-tree/oct-parse.in.yy b/libinterp/parse-tree/oct-parse.in.yy
--- a/libinterp/parse-tree/oct-parse.in.yy
+++ b/libinterp/parse-tree/oct-parse.in.yy
@@ -1171,17 +1171,20 @@ loop_command    : WHILE stash_comment ex
                   }
                 ;
 
 // =======
 // Jumping
 // =======
 
 jump_command    : BREAK
-                  { $$ = parser.make_break_command ($1); }
+                  {
+                    if (! ($$ = parser.make_break_command ($1)))
+                      YYABORT;
+                  }
                 | CONTINUE
                   { $$ = parser.make_continue_command ($1); }
                 | FUNC_RET
                   { $$ = parser.make_return_command ($1); }
                 ;
 
 // ==========
 // Exceptions
@@ -2782,17 +2785,23 @@ namespace octave
   // Build a break command.
 
   tree_command *
   base_parser::make_break_command (token *break_tok)
   {
     int l = break_tok->line ();
     int c = break_tok->column ();
 
-    return new tree_break_command (l, c);
+    if (! lexer.looping)
+      {
+        bison_error ("break must appear in a loop in the same file as loop command");
+        return 0;
+      }
+    else
+      return new tree_break_command (l, c);
   }
 
   // Build a continue command.
 
   tree_command *
   base_parser::make_continue_command (token *continue_tok)
   {
     int l = continue_tok->line ();
diff --git a/libinterp/parse-tree/pt-eval.cc b/libinterp/parse-tree/pt-eval.cc
--- a/libinterp/parse-tree/pt-eval.cc
+++ b/libinterp/parse-tree/pt-eval.cc
@@ -93,19 +93,20 @@ namespace octave
   }
 
   void
   tree_evaluator::visit_break_command (tree_break_command& cmd)
   {
     if (debug_mode)
       do_breakpoint (cmd.is_breakpoint (true));
 
-    if (statement_context == function || statement_context == script
-        || in_loop_command)
+    if (in_loop_command)
       tree_break_command::breaking = 1;
+    else
+      error ("break must appear in a loop in the same file as loop command");
   }
 
   void
   tree_evaluator::visit_colon_expression (tree_colon_expression&)
   {
     panic_impossible ();
   }
 
diff --git a/scripts/optimization/fminunc.m b/scripts/optimization/fminunc.m
--- a/scripts/optimization/fminunc.m
+++ b/scripts/optimization/fminunc.m
@@ -165,17 +165,17 @@ function [x, fval, info, output, grad, h
     optimvalues.iter = niter;
     optimvalues.funccount = nfev;
     optimvalues.fval = fval;
     optimvalues.searchdirection = zeros (n, 1);
     state = "init";
     stop = outfcn (x, optimvalues, state);
     if (stop)
       info = -1;
-      break;
+      return;
     endif
   endif
 
   if (isa (x0, "single") || isa (fval, "single"))
     macheps = eps ("single");
   else
     macheps = eps ("double");
   endif
diff --git a/scripts/optimization/fsolve.m b/scripts/optimization/fsolve.m
--- a/scripts/optimization/fsolve.m
+++ b/scripts/optimization/fsolve.m
@@ -212,17 +212,17 @@ function [x, fvec, info, output, fjac] =
     optimvalues.iter = niter;
     optimvalues.funccount = nfev;
     optimvalues.fval = fn;
     optimvalues.searchdirection = zeros (n, 1);
     state = 'init';
     stop = outfcn (x, optimvalues, state);
     if (stop)
       info = -1;
-      break;
+      return;
     endif
   endif
 
   if (isa (x0, "single") || isa (fvec, "single"))
     macheps = eps ("single");
   else
     macheps = eps ("double");
   endif
