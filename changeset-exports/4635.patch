# HG changeset patch
# User jwe
# Date 1069292903 0
#      Thu Nov 20 01:48:23 2003 +0000
# Node ID f2cd320cbf6e5deae9f684416613a94eaa6ea221
# Parent  79fe96966ca017751c22fac5b68ced95d8c31cf3
[project @ 2003-11-20 01:48:23 by jwe]

diff --git a/liboctave/Array-util.cc b/liboctave/Array-util.cc
--- a/liboctave/Array-util.cc
+++ b/liboctave/Array-util.cc
@@ -89,22 +89,24 @@ get_scalar_idx (Array<int>& idx, dim_vec
 	}
     }
   return retval;
 }
 
 int
 num_ones (const Array<int>& ra_idx)
 {
-  int retval (0);
+  int retval = 0;
+
   for (int i = 0; i < ra_idx.length (); i++)
     {
       if (ra_idx (i) == 1)
 	retval++;
     }
+
   return retval;
 }
 
 bool
 is_scalar (const dim_vector& dim)
 {
   bool retval = true;
 
diff --git a/liboctave/Array.cc b/liboctave/Array.cc
--- a/liboctave/Array.cc
+++ b/liboctave/Array.cc
@@ -1442,17 +1442,17 @@ Array<T>::maybe_delete_elements (Array<i
       int non_col_dim = lhs_dims (non_col);
 
       ra_idx(non_col).sort (true);
 
       int num_to_delete = ra_idx(non_col).length (lhs_dims (non_col));
 
       if (num_to_delete > 0)
 	{
-	  int temp = num_ones (lhs_dims);
+	  int temp = lhs_dims.num_ones ();
 
 	  if (non_col_dim == 1)
 	    temp--;
 
 	  if (temp == n_idx - 1 && num_to_delete == non_col_dim)
 	    {
 	      // We have A with (1x1x4), where A(1,:,1:4)
 	      // Delete all (0x0x0)
@@ -2683,140 +2683,132 @@ assignN (Array<LT>& lhs, const Array<RT>
 	      increment_index (result_idx, frozen_len);
 	    }
 	}
     }
   else if (rhs_dims.length () > 1)
     {
       // RHS is matrix or higher dimension.
 
-      // Subtracting number of dimensions of length 1 will catch
-      // cases where: A(2,1,2)=3  A(:,1,:)=[2,3;4,5]
-
-      if (rhs_dims.length ()
-	  != num_ones (idx_is_colon_equiv) - num_ones (lhs_dims))
+      bool dim_ok = true;
+
+      int jj = 0;
+
+      // Check that RHS dimensions are the same length as the
+      // corresponding LHS dimensions.
+
+      int rhs_dims_len = rhs_dims.length ();
+
+      for (int j = 0; j < idx_is_colon.length (); j++)
 	{
-	  (*current_liboctave_error_handler)
-	    ("dimensions do not match in matrix assignment");
+	  if (idx_is_colon(j))
+	    {
+	      if (jj > rhs_dims_len || rhs_dims(jj) < lhs_dims(j))
+		{
+		  dim_ok = false;
+
+		  break;
+		}
+
+	      jj++;
+	    }
 	}
+
+      if (! dim_ok)
+	(*current_liboctave_error_handler)
+	  ("subscripted assignment dimension mismatch");
       else
 	{
-	  bool dim_ok = true;
-
-	  int jj = 0;
-
-	  // Check that RHS dimensions are the same length as the
-	  // corresponding LHS dimensions.
-
-	  for (int j = 0; j < idx_is_colon.length (); j++)
+	  dim_vector new_dims;
+	  new_dims.resize (n_idx);
+
+	  bool resize = false;
+
+	  int ii = 0;
+
+	  // Update idx vectors.
+
+	  for (int i = 0; i < n_idx; i++)
 	    {
-	      if (idx_is_colon(j) || idx_is_colon_equiv(j))
+	      if (idx(i).is_colon ())
 		{
-		  if (rhs_dims(jj) < lhs_dims(j))
-		    {
-		      dim_ok = false;
-
-		      break;
-		    }
-
-		  jj++;
+		  // Add appropriate idx_vector to idx(i) since
+		  // index with : contains no indexes.
+
+		  frozen_len(i)
+		    = lhs_dims(i) > rhs_dims(ii) ? lhs_dims(i) : rhs_dims(ii);
+
+		  new_dims(i)
+		    = lhs_dims(i) > rhs_dims(ii) ? lhs_dims(i) : rhs_dims(ii);
+
+		  ii++;
+
+		  Range idxrange (1, frozen_len(i), 1);
+
+		  idx_vector idxv (idxrange);
+
+		  idx(i) = idxv;
 		}
-	    }
-
-	  if (! dim_ok)
-	    (*current_liboctave_error_handler)
-	      ("subscripted assignment dimension mismatch");
-	  else
-	    {
-	      dim_vector new_dims;
-	      new_dims.resize (n_idx);
-
-	      bool resize = false;
-
-	      int ii = 0;
-
-	      // Update idx vectors.
-
-	      for (int i = 0; i < n_idx; i++)
+	      else
 		{
-		  if (idx(i).is_colon ())
-		    {
-		      // Add appropriate idx_vector to idx(i) since
-		      // index with : contains no indexes.
-
-		      frozen_len(i) = lhs_dims(i) > rhs_dims(ii) ? lhs_dims(i) : rhs_dims(ii);
-
-		      new_dims(i) = lhs_dims(i) > rhs_dims(ii) ? lhs_dims(i) : rhs_dims(ii);
-
-		      ii++;
-
-		      Range idxrange (1, frozen_len(i), 1);
-
-		      idx_vector idxv (idxrange);
-
-		      idx(i) = idxv;
-		    }
-		  else
-		    {
-		      new_dims(i) = lhs_dims(i) > idx(i).max () + 1 ? lhs_dims(i) : idx(i).max () + 1;
-
-		      if (frozen_len(i) > 1)
-			ii++;
-		    }
-		  if (new_dims(i) != lhs_dims(i))
-		    resize = true;
-		}
-
-	      // Resize LHS if dimensions have changed.
-
-	      if (resize)
-		{
-		  lhs.resize (new_dims, rfv);
-
-		  lhs_dims = lhs.dims ();
+		  new_dims(i) = lhs_dims(i) > idx(i).max () + 1 ? lhs_dims(i) : idx(i).max () + 1;
+
+		  if (frozen_len(i) > 1)
+		    ii++;
 		}
-
-	      // Number of elements which need to be set.
-
-	      int n = Array<LT>::get_size (frozen_len);
-
-	      Array<int> result_idx (lhs_dims.length (), 0);
-	      Array<int> elt_idx;
-
-	      Array<int> result_rhs_idx (rhs_dims.length (), 0);
-
-	      dim_vector frozen_rhs;
-	      frozen_rhs.resize (rhs_dims.length ());
-
-	      for (int i = 0; i < rhs_dims.length (); i++)
-		frozen_rhs(i) = rhs_dims(i);
-
-	      dim_vector lhs_inc;
-	      lhs_inc.resize (lhs_dims.length ());
-
-	      for (int i = 0; i < lhs_dims.length (); i++)
-		lhs_inc(i) = lhs_dims(i) + 1;
-
-	      for (int i = 0; i < n; i++)
+	      if (new_dims(i) != lhs_dims(i))
+		resize = true;
+	    }
+
+	  // Resize LHS if dimensions have changed.
+
+	  if (resize)
+	    {
+	      lhs.resize (new_dims, rfv);
+
+	      lhs_dims = lhs.dims ();
+	    }
+
+	  // Number of elements which need to be set.
+
+	  int n = Array<LT>::get_size (frozen_len);
+
+	  Array<int> result_idx (lhs_dims.length (), 0);
+	  Array<int> elt_idx;
+
+	  Array<int> result_rhs_idx (rhs_dims.length (), 0);
+
+	  dim_vector frozen_rhs;
+	  frozen_rhs.resize (rhs_dims.length ());
+
+	  for (int i = 0; i < rhs_dims.length (); i++)
+	    frozen_rhs(i) = rhs_dims(i);
+
+	  dim_vector lhs_inc;
+	  lhs_inc.resize (lhs_dims.length ());
+
+	  for (int i = 0; i < lhs_dims.length (); i++)
+	    lhs_inc(i) = lhs_dims(i) + 1;
+
+	  for (int i = 0; i < n; i++)
+	    {
+	      elt_idx = get_elt_idx (idx, result_idx);
+
+	      if (index_in_bounds (elt_idx, lhs_inc))
 		{
-		  elt_idx = get_elt_idx (idx, result_idx);
-
-		  if (index_in_bounds (elt_idx, lhs_inc))
-		    {
-		      int s = compute_index (result_rhs_idx,rhs_dims);
-
-		      lhs.checkelem (elt_idx) = rhs.elem (s);
-
-		      increment_index (result_rhs_idx, frozen_rhs);
-		    }
-		  else
-		    lhs.checkelem (elt_idx) = rfv;
-
-		  increment_index (result_idx, frozen_len);
+		  int s = compute_index (result_rhs_idx,rhs_dims);
+
+		  lhs.checkelem (elt_idx) = rhs.elem (s);
+
+		  increment_index (result_rhs_idx, frozen_rhs);
 		}
+	      else
+		lhs.checkelem (elt_idx) = rfv;
+
+	      increment_index (result_idx, frozen_len);
 	    }
 	}
     }
   else if (idx_is_empty)
     {
       // Assignment to matrix with at least one empty index.
 
       if (! rhs_is_empty || ! rhs_is_scalar)
diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,10 +1,16 @@
 2003-11-19  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
+	* dim-vector.h (dim_vector::num_ones): New function.
+	* Array.cc (maybe_delete_elements): Use it instead of
+	num_ones (const Array<int>&).
+
+	* Array.cc (assignN): Omit dubious check of singleton dimensions.
+
 	* dNDArray.cc (NDArray::all_elements_are_int_or_inf_or_nan,
 	NDArray::any_element_is_inf_or_nan, NDArray::too_large_for_float):
 	New functions.
 	* dNDArray.h: Provide decls.
 
 	* dMatrix.h (Matrix::any_element_is_negative,
 	Matrix::any_element_is_inf_or_nan, Matrix::too_large_for_float,
 	Matrix::all_elements_are_int_or_inf_or_nan, Matrix::all_integers):
diff --git a/liboctave/dim-vector.h b/liboctave/dim-vector.h
--- a/liboctave/dim-vector.h
+++ b/liboctave/dim-vector.h
@@ -249,16 +249,28 @@ public:
 	    retval = true;
 	    break;
 	  }
       }
 
     return retval;
   }
 
+  int
+  num_ones (void) const
+  {
+    int retval = 0;
+
+    for (int i = 0; i < length (); i++)
+      if (elem (i) == 1)
+	retval++;
+
+    return retval;
+  }
+
   // This is the number of elements that a matrix with this dimension
   // vector would have, NOT the number of dimensions (elements in the
   // dimension vector).
 
   int numel (void) const
   {
     int n_dims = length ();
 
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,10 +1,13 @@
 2003-11-19  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
+	* ls-mat5.cc (read_mat5_binary_element, save_mat5_binary_element):
+	Handle N-d arrays.
+
 	* lex.l (next_token_is_index_op): New function.
 	(handle_close_bracket): Use it.
 
 	* ls-hdf5.cc, ls-mat-ascii.cc, ls-mat4.cc, ls-mat5.cc,
 	ls-oct-ascii.cc, ls-oct-binary.cc, ls-utils.cc, ls-hdf5.h,
 	ls-mat-ascii.h, ls-mat4.h, ls-mat5.h, ls-oct-ascii.h,
 	ls-oct-binary.h, ls-utils.h: New files, extracted from load-save.cc.
 	* Makefile.in: Add them to the appropriate lists.
