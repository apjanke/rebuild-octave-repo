# HG changeset patch
# User Jordi Guti√©rrez Hermoso <jordigh@gmail.com>
# Date 1311810433 18000
#      Wed Jul 27 18:47:13 2011 -0500
# Node ID 503865c2e542ae1b37b2be715d4d36346436b7a8
# Parent  8edece28cf4da09ac8eb89db6a22f5b1de8b4f2a
strfns.cc: Return empty string in strvcat if called sans arguments (bug #33533)

diff --git a/src/strfns.cc b/src/strfns.cc
--- a/src/strfns.cc
+++ b/src/strfns.cc
@@ -165,16 +165,17 @@ char ([97, 98, 99], \"\", @{\"98\", \"99
 */
 
 DEFUN (strvcat, args, ,
   "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {} strvcat (@var{x})\n\
 @deftypefnx {Built-in Function} {} strvcat (@var{x}, @dots{})\n\
 @deftypefnx {Built-in Function} {} strvcat (@var{s1}, @var{s2}, @dots{})\n\
 @deftypefnx {Built-in Function} {} strvcat (@var{cell_array})\n\
+@deftypefnx {Built-in Function} {} strvcat ()\n\
 Create a character array from one or more numeric matrices, character\n\
 matrices, or cell arrays.  Arguments are concatenated vertically.\n\
 The returned values are padded with blanks as needed to make each row\n\
 of the string array have the same length.  Unlike @code{char}, empty\n\
 strings are removed and will not appear in the output.\n\
 \n\
 For numerical input, each element is converted\n\
 to the corresponding ASCII character.  A range error results if an input\n\
@@ -191,16 +192,19 @@ strvcat ([97, 98, 99], \"\", @{\"98\", \
      @result{} [\"abc    \"\n\
          \"98     \"\n\
          \"99     \"\n\
          \"d      \"\n\
          \"str1   \"\n\
          \"half   \"]\n\
 @end group\n\
 @end example\n\
+\n\
+For compatibility with @sc{Matlab}, calling @code{strvcat} without arguments\n\
+returns the empty string.\n\
 @seealso{char, strcat, cstrcat}\n\
 @end deftypefn")
 {
   octave_value retval;
 
   int nargin = args.length ();
 
   if (nargin > 0)
@@ -268,17 +272,17 @@ strvcat ([97, 98, 99], \"\", @{\"98\", \
                     }
                 }
             }
         }
 
       retval = octave_value (result, '\'');
     }
   else
-    print_usage ();
+    retval = octave_value ("");
 
   return retval;
 }
 
 /*
 %!error <Invalid call to strvcat> strvcat()
 %!assert (strvcat (""), "");
 %!assert (strvcat (100) == "d");
