# HG changeset patch
# User Rik <rik@octave.org>
# Date 1497971601 25200
#      Tue Jun 20 08:13:21 2017 -0700
# Node ID 7b187892a25a2f139122b0b2328dae8ddaba3e23
# Parent  aabf6cd222ac66e931a2f1eabb40d6a8276dd689
Use trig functions for complex inputs from C++ std library.
These functions are guaranteed to be part of C++11 standard library.

* configure.ac: Remove OCTAVE_CHECK_FUNC_COMPLEX for acos, acosh, asin, asinh,
atan, atanh.

* acinclude.m4: Remove macro OCTAVE_CHECK_FUNC_COMPLEX.

* lo-mappers.cc: Delegate to std::acos, std::asin, std::atan.

* lo-specfun.cc: Delegate to std::acosh, std::asinh, std::atanh.

diff --git a/configure.ac b/configure.ac
--- a/configure.ac
+++ b/configure.ac
@@ -2410,25 +2410,16 @@ AC_CHECK_FUNCS([getpgrp getpid getppid g
 AC_CHECK_FUNCS([isascii kill])
 AC_CHECK_FUNCS([lgamma_r lgammaf_r])
 AC_CHECK_FUNCS([realpath resolvepath])
 AC_CHECK_FUNCS([select setgrent setpwent setsid siglongjmp strsignal])
 AC_CHECK_FUNCS([tcgetattr tcsetattr toascii])
 AC_CHECK_FUNCS([umask waitpid])
 AC_CHECK_FUNCS([_getch _kbhit])
 
-## Look in <complex> for C++ variants of math functions that we need.
-
-OCTAVE_CHECK_FUNC_COMPLEX(acos)
-OCTAVE_CHECK_FUNC_COMPLEX(acosh)
-OCTAVE_CHECK_FUNC_COMPLEX(asin)
-OCTAVE_CHECK_FUNC_COMPLEX(asinh)
-OCTAVE_CHECK_FUNC_COMPLEX(atan)
-OCTAVE_CHECK_FUNC_COMPLEX(atanh)
-
 ## Check for math defines such as M_LN2 in math.h
 AC_CACHE_CHECK([for MATH DEFINES in math.h],
   [octave_cv_header_math_defines],
   [AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[
     #include <math.h>
     ]], [[
     double x = M_LN2;]])],
     octave_cv_header_math_defines=yes,
diff --git a/liboctave/numeric/lo-mappers.cc b/liboctave/numeric/lo-mappers.cc
--- a/liboctave/numeric/lo-mappers.cc
+++ b/liboctave/numeric/lo-mappers.cc
@@ -75,156 +75,60 @@ namespace octave
     is_NaN_or_NA (const FloatComplex& x)
     {
       return (isnan (std::real (x)) || isnan (std::imag (x)));
     }
 
     Complex
     acos (const Complex& x)
     {
-#if defined (HAVE_COMPLEX_STD_ACOS)
       Complex y = std::acos (x);
 
       if (std::imag (x) == 0.0 && std::real (x) > 1.0)
         return std::conj (y);
       else
         return y;
-#else
-      static Complex i (0, 1);
-
-      Complex tmp;
-
-      if (std::imag (x) == 0.0)
-        {
-          // If the imaginary part of X is 0, then avoid generating an
-          // imaginary part of -0 for the expression 1-x*x.
-          // This chooses the same phase of the branch cut as Matlab.
-          double xr = std::real (x);
-          tmp = Complex (1.0 - xr*xr);
-        }
-      else
-        tmp = 1.0 - x*x;
-
-      return -i * log (x + i * std::sqrt (tmp));
-#endif
     }
 
     FloatComplex
     acos (const FloatComplex& x)
     {
-#if defined (HAVE_COMPLEX_STD_ACOS)
       FloatComplex y = std::acos (x);
 
       if (std::imag (x) == 0.0f && std::real (x) > 1.0f)
         return std::conj (y);
       else
         return y;
-#else
-      static FloatComplex i (0, 1);
-
-      FloatComplex tmp;
-
-      if (std::imag (x) == 0.0f)
-        {
-          // If the imaginary part of X is 0, then avoid generating an
-          // imaginary part of -0 for the expression 1-x*x.
-          // This chooses the same phase of the branch cut as Matlab.
-          float xr = std::real (x);
-          tmp = FloatComplex (1.0f - xr*xr);
-        }
-      else
-        tmp = 1.0f - x*x;
-
-      return -i * log (x + i * std::sqrt (tmp));
-#endif
     }
 
     Complex
     asin (const Complex& x)
     {
-#if defined (HAVE_COMPLEX_STD_ASIN)
       Complex y = std::asin (x);
 
       if (std::imag (x) == 0.0 && std::real (x) > 1.0)
         return std::conj (y);
       else
         return y;
-#else
-      static Complex i (0, 1);
-
-      Complex tmp;
-
-      if (std::imag (x) == 0.0)
-        {
-          // If the imaginary part of X is 0, then avoid generating an
-          // imaginary part of -0 for the expression 1-x*x.
-          // This chooses the same phase of the branch cut as Matlab.
-          double xr = std::real (x);
-          tmp = Complex (1.0 - xr*xr);
-        }
-      else
-        tmp = 1.0 - x*x;
-
-      return -i * log (i*x + std::sqrt (tmp));
-#endif
     }
 
     FloatComplex
     asin (const FloatComplex& x)
     {
-#if defined (HAVE_COMPLEX_STD_ASIN)
       FloatComplex y = std::asin (x);
 
       if (std::imag (x) == 0.0f && std::real (x) > 1.0f)
         return std::conj (y);
       else
         return y;
-#else
-      static FloatComplex i (0, 1);
-
-      FloatComplex tmp;
-
-      if (std::imag (x) == 0.0f)
-        {
-          // If the imaginary part of X is 0, then avoid generating an
-          // imaginary part of -0 for the expression 1-x*x.
-          // This chooses the same phase of the branch cut as Matlab.
-          float xr = std::real (x);
-          tmp = FloatComplex (1.0f - xr*xr);
-        }
-      else
-        tmp = 1.0f - x*x;
-
-      return -i * log (i*x + std::sqrt (tmp));
-#endif
     }
 
-    Complex
-    atan (const Complex& x)
-    {
-#if defined (HAVE_COMPLEX_STD_ATAN)
-      return std::atan (x);
-#else
-      static Complex i (0, 1);
-
-      return i * log ((i + x) / (i - x)) / 2.0;
-#endif
-    }
+    Complex atan (const Complex& x) { return std::atan (x); }
 
-    FloatComplex
-    atan (const FloatComplex& x)
-    {
-#if defined (HAVE_COMPLEX_STD_ATAN)
-      return std::atan (x);
-#else
-      static FloatComplex i (0, 1);
-
-      return i * log ((i + x) / (i - x)) / 2.0f;
-#endif
-    }
+    FloatComplex atan (const FloatComplex& x) { return std::atan (x); }
 
     double log2 (double x) { return std::log2 (x); }
     float log2 (float x) { return std::log2f (x); }
 
     Complex
     log2 (const Complex& x)
     {
 #if defined (M_LN2)
diff --git a/liboctave/numeric/lo-specfun.cc b/liboctave/numeric/lo-specfun.cc
--- a/liboctave/numeric/lo-specfun.cc
+++ b/liboctave/numeric/lo-specfun.cc
@@ -60,83 +60,35 @@ along with Octave; see the file COPYING.
 namespace octave
 {
   namespace math
   {
     double acosh (double x) { return std::acosh (x); }
 
     float acosh (float x) { return std::acoshf (x); }
 
-    Complex
-    acosh (const Complex& x)
-    {
-#if defined (HAVE_COMPLEX_STD_ACOSH)
-      return std::acosh (x);
-#else
-      return log (x + sqrt (x + 1.0) * sqrt (x - 1.0));
-#endif
-    }
-
-    FloatComplex
-    acosh (const FloatComplex& x)
-    {
-#if defined (HAVE_COMPLEX_STD_ACOSH)
-      return std::acosh (x);
-#else
-      return log (x + sqrt (x + 1.0f) * sqrt (x - 1.0f));
-#endif
-    }
+    Complex acosh (const Complex& x) { return std::acosh (x); }
+
+    FloatComplex acosh (const FloatComplex& x) { return std::acosh (x); }
 
     double asinh (double x) { return std::asinh (x); }
 
     float asinh (float x) { return std::asinhf (x); }
 
-    Complex
-    asinh (const Complex& x)
-    {
-#if defined (HAVE_COMPLEX_STD_ASINH)
-      return std::asinh (x);
-#else
-      return log (x + sqrt (x*x + 1.0));
-#endif
-    }
-
-    FloatComplex
-    asinh (const FloatComplex& x)
-    {
-#if defined (HAVE_COMPLEX_STD_ASINH)
-      return std::asinh (x);
-#else
-      return log (x + sqrt (x*x + 1.0f));
-#endif
-    }
+    Complex asinh (const Complex& x) { return std::asinh (x); }
+
+    FloatComplex asinh (const FloatComplex& x) { return std::asinh (x); }
 
     double atanh (double x) { return std::atanh (x); }
 
     float atanh (float x) { return std::atanhf (x); }
 
-    Complex
-    atanh (const Complex& x)
-    {
-#if defined (HAVE_COMPLEX_STD_ATANH)
-      return std::atanh (x);
-#else
-      return log ((1.0 + x) / (1.0 - x)) / 2.0;
-#endif
-    }
-
-    FloatComplex
-    atanh (const FloatComplex& x)
-    {
-#if defined (HAVE_COMPLEX_STD_ATANH)
-      return std::atanh (x);
-#else
-      return log ((1.0f + x) / (1.0f - x)) / 2.0f;
-#endif
-    }
+    Complex atanh (const Complex& x) { return std::atanh (x); }
+
+    FloatComplex atanh (const FloatComplex& x) { return std::atanh (x); }
 
     double erf (double x) { return std::erf (x); }
 
     float erf (float x) { return std::erff (x); }
 
     // Complex error function from the Faddeeva package
     Complex
     erf (const Complex& x)
diff --git a/m4/acinclude.m4 b/m4/acinclude.m4
--- a/m4/acinclude.m4
+++ b/m4/acinclude.m4
@@ -264,44 +264,16 @@ AC_DEFUN([OCTAVE_CHECK_FFTW_THREADS], [
     AC_DEFINE([HAVE_]m4_toupper([$1])[_THREADS], 1,
       [Define to 1 if ]m4_toupper([$1])[ has multi-threading support.])
   fi
   CPPFLAGS="$ac_octave_save_CPPFLAGS"
   LDFLAGS="$ac_octave_save_LDFLAGS"
   LIBS="$ac_octave_save_LIBS"
 ])
 dnl
-dnl Check whether a complex-valued function is available in <complex>.
-dnl Will define HAVE_COMPLEX_STD_FUNC if the function is available in the
-dnl std namespace and is callable on both std::complex<double> and
-dnl std::complex<float>.  The return type of the function is expected to
-dnl be of the same std::complex<T> type.
-dnl
-AC_DEFUN([OCTAVE_CHECK_FUNC_COMPLEX], [
-  ac_safe=`echo "$1" | $SED 'y% ./+-:=%___p___%'`
-
-  AC_CACHE_CHECK([for std::$1 in <complex>],
-    [octave_cv_func_complex_std_$ac_safe],
-    [AC_LANG_PUSH(C++)
-    AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[
-        #include <complex>
-        ]], [[
-        std::complex<double> z = std::$1 (std::complex<double> (1.0, 1.0));
-        std::complex<float>  c = std::$1 (std::complex<float>  (1.0, 1.0));
-        ]])],
-      [eval "octave_cv_func_complex_std_$ac_safe=yes"],
-      [eval "octave_cv_func_complex_std_$ac_safe=no"])
-    AC_LANG_POP(C++)
-  ])
-  if eval "test \"`echo '$octave_cv_func_complex_std_'$ac_safe`\" = yes"; then
-    AC_DEFINE(AS_TR_CPP([[HAVE_COMPLEX_STD_][$1]]), 1,
-      [Define to 1 if <complex> provides std::$1(std::complex<T>).])
-  fi
-])
-dnl
 dnl Check if Fortran compiler has the intrinsic function ISNAN.
 dnl
 AC_DEFUN([OCTAVE_CHECK_FUNC_FORTRAN_ISNAN], [
   AC_CACHE_CHECK([whether $F77 has the intrinsic function ISNAN],
     [octave_cv_func_fortran_isnan],
     [AC_LANG_PUSH(Fortran 77)
     AC_COMPILE_IFELSE([[
       program foo
