# HG changeset patch
# User Rik <rdrider0-list@yahoo.com>
# Date 1263450166 28800
#      Wed Jan 13 22:22:46 2010 -0800
# Node ID 0e71ead7359da5272cffba1d7c3b7c4ba6706f73
# Parent  8b4e3388a25412f8e5d351fd70c293d71985f34a
Use CALL XSTOPX instead of STOP in Fortran ranlib routines

New call allows Octave's error handler to intercept otherwise
fatal errors in Fortran code

diff --git a/libcruft/ChangeLog b/libcruft/ChangeLog
--- a/libcruft/ChangeLog
+++ b/libcruft/ChangeLog
@@ -1,8 +1,18 @@
+2009-01-13  Rik <octave@nomad.inbox5.com>
+
+	* ranlib/advnst.f ranlib/genbet.f ranlib/genchi.f ranlib/genexp.f
+	ranlib/genf.f ranlib/gengam.f ranlib/genmul.f ranlib/gennch.f
+	ranlib/gennf.f ranlib/gennor.f ranlib/genunf.f ranlib/getcgn.f
+	ranlib/getsd.f ranlib/ignbin.f ranlib/ignnbn.f ranlib/ignpoi.f
+	ranlib/ignuin.f ranlib/initgn.f ranlib/mltmod.f ranlib/setant.f
+	ranlib/setgmn.f ranlib/setsd.f: call XSTOPX instead of STOP so Octave's
+	error handler can intercept errors in Fortran code
+
 2010-01-07  Jaroslav Hajek  <highegg@gmail.com>
 
 	* misc/quit.cc (octave_rethrow_exception): Set octave_interrupt_state
 	to -1 when throwing octave_interrupt_exception.
 
 2010-01-05  John W. Eaton  <jwe@octave.org>
 
 	* Makefile.am (AM_CPPFLAGS): New variable.
diff --git a/libcruft/ranlib/advnst.f b/libcruft/ranlib/advnst.f
--- a/libcruft/ranlib/advnst.f
+++ b/libcruft/ranlib/advnst.f
@@ -55,17 +55,18 @@ C     ..
 C     .. Save statement ..
       SAVE /globe/
 C     ..
 C     .. Executable Statements ..
 C     Abort unless random number generator initialized
       IF (qrgnin()) GO TO 10
       WRITE (*,*) ' ADVNST called before random number generator ',
      +  ' initialized -- abort!'
-      STOP ' ADVNST called before random number generator initialized'
+      CALL XSTOPX
+     + (' ADVNST called before random number generator initialized')
 
    10 CALL getcgn(g)
 C
       ib1 = a1
       ib2 = a2
       DO 20,i = 1,k
           ib1 = mltmod(ib1,ib1,m1)
           ib2 = mltmod(ib2,ib2,m2)
diff --git a/libcruft/ranlib/genbet.f b/libcruft/ranlib/genbet.f
--- a/libcruft/ranlib/genbet.f
+++ b/libcruft/ranlib/genbet.f
@@ -72,17 +72,17 @@ C     JJV changed these to ridiculous va
 C     ..
 C     .. Executable Statements ..
       qsame = (olda.EQ.aa) .AND. (oldb.EQ.bb)
       IF (qsame) GO TO 20
 C     JJV added small minimum for small log problem in calc of W
       IF (.NOT. (aa.LT.minlog.OR.bb.LT.minlog)) GO TO 10
       WRITE (*,*) ' AA or BB < ',minlog,' in GENBET - Abort!'
       WRITE (*,*) ' AA: ',aa,' BB ',bb
-      STOP ' AA or BB too small in GENBET - Abort!'
+      CALL XSTOPX (' AA or BB too small in GENBET - Abort!')
 
    10 olda = aa
       oldb = bb
    20 IF (.NOT. (min(aa,bb).GT.1.0)) GO TO 100
 
 
 C     Alborithm BB
 
diff --git a/libcruft/ranlib/genchi.f b/libcruft/ranlib/genchi.f
--- a/libcruft/ranlib/genchi.f
+++ b/libcruft/ranlib/genchi.f
@@ -34,16 +34,16 @@ C      REAL gengam
 C      EXTERNAL gengam
       REAL sgamma
       EXTERNAL sgamma
 C     ..
 C     .. Executable Statements ..
       IF (.NOT. (df.LE.0.0)) GO TO 10
       WRITE (*,*) 'DF <= 0 in GENCHI - ABORT'
       WRITE (*,*) 'Value of DF: ',df
-      STOP 'DF <= 0 in GENCHI - ABORT'
+      CALL XSTOPX ('DF <= 0 in GENCHI - ABORT')
 
 C     JJV changed this to call sgamma directly
 C   10 genchi = 2.0*gengam(1.0,df/2.0)
  10   genchi = 2.0*sgamma(df/2.0)
       RETURN
 
       END
diff --git a/libcruft/ranlib/genexp.f b/libcruft/ranlib/genexp.f
--- a/libcruft/ranlib/genexp.f
+++ b/libcruft/ranlib/genexp.f
@@ -47,14 +47,14 @@ C     .. External Functions ..
       REAL sexpo
       EXTERNAL sexpo
 C     ..
 C     .. Executable Statements ..
 C     JJV added check to ensure AV >= 0.0 
       IF (av.GE.0.0) GO TO 10
       WRITE (*,*) 'AV < 0.0 in GENEXP - ABORT'
       WRITE (*,*) 'Value of AV: ',av
-      STOP 'AV < 0.0 in GENEXP - ABORT'
+      CALL XSTOPX ('AV < 0.0 in GENEXP - ABORT')
 
  10   genexp = sexpo()*av
       RETURN
 
       END
diff --git a/libcruft/ranlib/genf.f b/libcruft/ranlib/genf.f
--- a/libcruft/ranlib/genf.f
+++ b/libcruft/ranlib/genf.f
@@ -42,17 +42,17 @@ C      REAL genchi
 C      EXTERNAL genchi
       REAL sgamma
       EXTERNAL sgamma
 C     ..
 C     .. Executable Statements ..
       IF (.NOT. (dfn.LE.0.0.OR.dfd.LE.0.0)) GO TO 10
       WRITE (*,*) 'Degrees of freedom nonpositive in GENF - abort!'
       WRITE (*,*) 'DFN value: ',dfn,'DFD value: ',dfd
-      STOP 'Degrees of freedom nonpositive in GENF - abort!'
+      CALL XSTOPX ('Degrees of freedom nonpositive in GENF - abort!')
 
  10   xnum = 2.0*sgamma(dfn/2.0)/dfn
 
 C      GENF = ( GENCHI( DFN ) / DFN ) / ( GENCHI( DFD ) / DFD )
       xden = 2.0*sgamma(dfd/2.0)/dfd
 C     JJV changed constant so that it will not underflow at compile time
 C     JJV while not slowing generator by using double precision or logs.
 C      IF (.NOT. (xden.LE. (1.0E-38*xnum))) GO TO 20
diff --git a/libcruft/ranlib/gengam.f b/libcruft/ranlib/gengam.f
--- a/libcruft/ranlib/gengam.f
+++ b/libcruft/ranlib/gengam.f
@@ -56,16 +56,17 @@ C     .. External Functions ..
 C     ..
 C     .. Executable Statements ..
 
 C     JJV added argument value checker
       IF ( a.GT.0.0 .AND. r.GT.0.0 ) GO TO 10
       WRITE (*,*) 'In GENGAM - Either (1) Location param A <= 0.0 or'
       WRITE (*,*) '(2) Shape param R <= 0.0 - ABORT!'
       WRITE (*,*) 'A value: ',a,'R value: ',r
-      STOP 'Location or shape param out of range in GENGAM - ABORT!'
+      CALL XSTOPX
+     + ('Location or shape param out of range in GENGAM - ABORT!')
 C     JJV end addition
 
  10   gengam = sgamma(r)/a
 C      gengam = gengam/a
       RETURN
 
       END
diff --git a/libcruft/ranlib/genmul.f b/libcruft/ranlib/genmul.f
--- a/libcruft/ranlib/genmul.f
+++ b/libcruft/ranlib/genmul.f
@@ -54,25 +54,25 @@ C     .. External Functions ..
       EXTERNAL ignbin
 C     ..
 C     .. Intrinsic Functions ..
       INTRINSIC abs
 C     ..
 C     .. Executable Statements ..
 
 C     Check Arguments
-      IF (n.LT.0) STOP 'N < 0 in GENMUL'
-      IF (ncat.LE.1) STOP 'NCAT <= 1 in GENMUL'
+      IF (n.LT.0) CALL XSTOPX ('N < 0 in GENMUL')
+      IF (ncat.LE.1) CALL XSTOPX ('NCAT <= 1 in GENMUL')
       ptot = 0.0
       DO 10,i = 1,ncat - 1
-          IF (p(i).LT.0.0) STOP 'Some P(i) < 0 in GENMUL'
-          IF (p(i).GT.1.0) STOP 'Some P(i) > 1 in GENMUL'
+          IF (p(i).LT.0.0) CALL XSTOPX ('Some P(i) < 0 in GENMUL')
+          IF (p(i).GT.1.0) CALL XSTOPX ('Some P(i) > 1 in GENMUL')
           ptot = ptot + p(i)
    10 CONTINUE
-      IF (ptot.GT.0.99999) STOP 'Sum of P(i) > 1 in GENMUL'
+      IF (ptot.GT.0.99999) CALL XSTOPX ('Sum of P(i) > 1 in GENMUL')
 
 C     Initialize variables
       ntot = n
       sum = 1.0
       DO 20,i = 1,ncat
           ix(i) = 0
    20 CONTINUE
 
diff --git a/libcruft/ranlib/gennch.f b/libcruft/ranlib/gennch.f
--- a/libcruft/ranlib/gennch.f
+++ b/libcruft/ranlib/gennch.f
@@ -47,17 +47,17 @@ C     ..
 C     .. Intrinsic Functions ..
       INTRINSIC sqrt
 C     ..
 C     JJV changed abort to df < 1, and added case: df = 1 
 C     .. Executable Statements ..
       IF (.NOT. (df.LT.1.0.OR.xnonc.LT.0.0)) GO TO 10
       WRITE (*,*) 'DF < 1 or XNONC < 0 in GENNCH - ABORT'
       WRITE (*,*) 'Value of DF: ',df,' Value of XNONC',xnonc
-      STOP 'DF < 1 or XNONC < 0 in GENNCH - ABORT'
+      CALL XSTOPX ('DF < 1 or XNONC < 0 in GENNCH - ABORT')
 
 C     JJV changed this to call SGAMMA and SNORM directly
 C      gennch = genchi(df-1.0) + gennor(sqrt(xnonc),1.0)**2
 
  10   IF (df.GE.1.000001) GO TO 20
 C     JJV case DF = 1.0
       gennch = (snorm() + sqrt(xnonc))**2
       GO TO 30
diff --git a/libcruft/ranlib/gennf.f b/libcruft/ranlib/gennf.f
--- a/libcruft/ranlib/gennf.f
+++ b/libcruft/ranlib/gennf.f
@@ -56,17 +56,19 @@ C     JJV changed the argument checker t
 C     JJV in the same way as GENNCH was changed.
       qcond = dfn .LT. 1.0 .OR. dfd .LE. 0.0 .OR. xnonc .LT. 0.0
       IF (.NOT. (qcond)) GO TO 10
       WRITE (*,*) 'In GENNF - Either (1) Numerator DF < 1.0 or'
       WRITE (*,*) '(2) Denominator DF <= 0.0 or '
       WRITE (*,*) '(3) Noncentrality parameter < 0.0'
       WRITE (*,*) 'DFN value: ',dfn,'DFD value: ',dfd,'XNONC value: ',
      +  xnonc
-      STOP 'Degrees of freedom or noncent param out of range in GENNF'
+
+      CALL XSTOPX
+     + ('Degrees of freedom or noncent param out of range in GENNF')
 
 C      GENNF = ( GENNCH( DFN, XNONC ) / DFN ) / ( GENCHI( DFD ) / DFD )
 C     JJV changed this to call SGAMMA and SNORM directly
 C     xnum = gennch(dfn,xnonc)/dfn
  10   IF (dfn.GE.1.000001) GO TO 20
 C     JJV case dfn = 1.0 - here I am treating dfn as exactly 1.0
       xnum = (snorm() + sqrt(xnonc))**2
       GO TO 30
diff --git a/libcruft/ranlib/gennor.f b/libcruft/ranlib/gennor.f
--- a/libcruft/ranlib/gennor.f
+++ b/libcruft/ranlib/gennor.f
@@ -48,14 +48,14 @@ C     .. External Functions ..
       REAL snorm
       EXTERNAL snorm
 C     ..
 C     .. Executable Statements ..
 C     JJV added check to ensure SD >= 0.0 
       IF (sd.GE.0.0) GO TO 10
       WRITE (*,*) 'SD < 0.0 in GENNOR - ABORT'
       WRITE (*,*) 'Value of SD: ',sd
-      STOP 'SD < 0.0 in GENNOR - ABORT'
+      CALL XSTOPX ('SD < 0.0 in GENNOR - ABORT')
 
  10   gennor = sd*snorm() + av
       RETURN
 
       END
diff --git a/libcruft/ranlib/genunf.f b/libcruft/ranlib/genunf.f
--- a/libcruft/ranlib/genunf.f
+++ b/libcruft/ranlib/genunf.f
@@ -28,15 +28,15 @@ C     ..
 C     .. External Functions ..
       REAL ranf
       EXTERNAL ranf
 C     ..
 C     .. Executable Statements ..
       IF (.NOT. (low.GT.high)) GO TO 10
       WRITE (*,*) 'LOW > HIGH in GENUNF: LOW ',low,' HIGH: ',high
       WRITE (*,*) 'Abort'
-      STOP 'LOW > High in GENUNF - Abort'
+      CALL XSTOPX ('LOW > High in GENUNF - Abort')
 
    10 genunf = low + (high-low)*ranf()
 
       RETURN
 
       END
diff --git a/libcruft/ranlib/getcgn.f b/libcruft/ranlib/getcgn.f
--- a/libcruft/ranlib/getcgn.f
+++ b/libcruft/ranlib/getcgn.f
@@ -42,14 +42,14 @@ C                    INTEGER G
 C
 C**********************************************************************
 C
 C     Abort if generator number out of range
 C
       IF (.NOT. (g.LT.0.OR.g.GT.numg)) GO TO 10
       WRITE (*,*) ' Generator number out of range in SETCGN:',
      +  ' Legal range is 1 to ',numg,' -- ABORT!'
-      STOP ' Generator number out of range in SETCGN'
+      CALL XSTOPX (' Generator number out of range in SETCGN')
 
    10 curntg = g
       RETURN
 
       END
diff --git a/libcruft/ranlib/getsd.f b/libcruft/ranlib/getsd.f
--- a/libcruft/ranlib/getsd.f
+++ b/libcruft/ranlib/getsd.f
@@ -57,16 +57,17 @@ C     ..
 C     .. Save statement ..
       SAVE /globe/
 C     ..
 C     .. Executable Statements ..
 C     Abort unless random number generator initialized
       IF (qrgnin()) GO TO 10
       WRITE (*,*) ' GETSD called before random number generator ',
      +  ' initialized -- abort!'
-      STOP ' GETSD called before random number generator initialized'
+      CALL XSTOPX 
+     + (' GETSD called before random number generator initialized')
 
    10 CALL getcgn(g)
       iseed1 = cg1(g)
       iseed2 = cg2(g)
       RETURN
 
       END
diff --git a/libcruft/ranlib/ignbin.f b/libcruft/ranlib/ignbin.f
--- a/libcruft/ranlib/ignbin.f
+++ b/libcruft/ranlib/ignbin.f
@@ -183,22 +183,22 @@ C     .. Executable Statements ..
 C
 C*****SETUP, PERFORM ONLY WHEN PARAMETERS CHANGE
 C
 
 C     JJV added the argument checker - involved only renaming 10
 C     JJV and 20 to the checkers and adding checkers
 C     JJV Only remaining problem - if called initially with the
 C     JJV initial values of psave and nsave, it will hang
- 10   IF (pp.LT.0.0) STOP 'PP < 0.0 in IGNBIN - ABORT!'
-      IF (pp.GT.1.0) STOP 'PP > 1.0 in IGNBIN - ABORT!'
+ 10   IF (pp.LT.0.0) CALL XSTOPX ('PP < 0.0 in IGNBIN - ABORT!')
+      IF (pp.GT.1.0) CALL XSTOPX ('PP > 1.0 in IGNBIN - ABORT!')
       psave = pp
       p = amin1(psave,1.-psave)
       q = 1. - p
- 20   IF (n.LT.0) STOP 'N < 0 in IGNBIN - ABORT!'
+ 20   IF (n.LT.0) CALL XSTOPX ('N < 0 in IGNBIN - ABORT!')
       xnp = n*p
       nsave = n
       IF (xnp.LT.30.) GO TO 140
       ffm = xnp + p
       m = ffm
       fm = m
       xnpq = xnp*q
       p1 = int(2.195*sqrt(xnpq)-4.6*q) + 0.5
diff --git a/libcruft/ranlib/ignnbn.f b/libcruft/ranlib/ignnbn.f
--- a/libcruft/ranlib/ignnbn.f
+++ b/libcruft/ranlib/ignnbn.f
@@ -54,19 +54,19 @@ C      EXTERNAL gengam,ignpoi
       EXTERNAL sgamma,ignpoi
 C     ..
 C     .. Intrinsic Functions ..
       INTRINSIC real
 C     ..
 C     .. Executable Statements ..
 C     Check Arguments
 C     JJV changed argumnet checker to abort if N <= 0
-      IF (n.LE.0) STOP 'N <= 0 in IGNNBN'
-      IF (p.LE.0.0) STOP 'P <= 0.0 in IGNNBN'
-      IF (p.GE.1.0) STOP 'P >= 1.0 in IGNNBN'
+      IF (n.LE.0) CALL XSTOPX ('N <= 0 in IGNNBN')
+      IF (p.LE.0.0) CALL XSTOPX ('P <= 0.0 in IGNNBN')
+      IF (p.GE.1.0) CALL XSTOPX ('P >= 1.0 in IGNNBN')
 
 C     Generate Y, a random gamma (n,(1-p)/p) variable
 C     JJV Note: the above parametrization is consistent with Devroye,
 C     JJV       but gamma (p/(1-p),n) is the equivalent in our code
  10   r = real(n)
       a = p/ (1.0-p)
 C      y = gengam(a,r)
       y = sgamma(r)/a
diff --git a/libcruft/ranlib/ignpoi.f b/libcruft/ranlib/ignpoi.f
--- a/libcruft/ranlib/ignpoi.f
+++ b/libcruft/ranlib/ignpoi.f
@@ -232,17 +232,17 @@ C     C A S E  B. (START NEW TABLE AND C
 C
 C     JJV changed MUPREV assignment from 0.0 to initial value
   120 muprev = -1.0E37
       IF (mu.EQ.muold) GO TO 130
 C     JJV added argument checker here
       IF (mu.GE.0.0) GO TO 125
       WRITE (*,*) 'MU < 0 in IGNPOI - ABORT'
       WRITE (*,*) 'Value of MU: ',mu
-      STOP 'MU < 0 in IGNPOI - ABORT'
+      CALL XSTOPX ('MU < 0 in IGNPOI - ABORT')
 C     JJV added line label here
  125  muold = mu
       m = max0(1,ifix(mu))
       l = 0
       p = exp(-mu)
       q = p
       p0 = p
 C
diff --git a/libcruft/ranlib/ignuin.f b/libcruft/ranlib/ignuin.f
--- a/libcruft/ranlib/ignuin.f
+++ b/libcruft/ranlib/ignuin.f
@@ -83,13 +83,13 @@ C     integral multiple of the number in
       WRITE (*,*) err1
       GO TO 100
 
 C     TO ABORT-PROGRAM
    90 WRITE (*,*) err2
   100 WRITE (*,*) ' LOW: ',low,' HIGH: ',high
       WRITE (*,*) ' Abort on Fatal ERROR'
       IF (.NOT. (err.EQ.1)) GO TO 110
-      STOP 'LOW > HIGH in IGNUIN'
+      CALL XSTOPX ('LOW > HIGH in IGNUIN')
 
-  110 STOP ' ( HIGH - LOW ) > 2,147,483,561 in IGNUIN'
+  110 CALL XSTOPX (' ( HIGH - LOW ) > 2,147,483,561 in IGNUIN')
 
   120 END
diff --git a/libcruft/ranlib/initgn.f b/libcruft/ranlib/initgn.f
--- a/libcruft/ranlib/initgn.f
+++ b/libcruft/ranlib/initgn.f
@@ -61,32 +61,33 @@ C     ..
 C     .. Save statement ..
       SAVE /globe/
 C     ..
 C     .. Executable Statements ..
 C     Abort unless random number generator initialized
       IF (qrgnin()) GO TO 10
       WRITE (*,*) ' INITGN called before random number generator ',
      +  ' initialized -- abort!'
-      STOP ' INITGN called before random number generator initialized'
+      CALL XSTOPX 
+     + (' INITGN called before random number generator initialized')
 
    10 CALL getcgn(g)
       IF ((-1).NE. (isdtyp)) GO TO 20
       lg1(g) = ig1(g)
       lg2(g) = ig2(g)
       GO TO 50
 
    20 IF ((0).NE. (isdtyp)) GO TO 30
       CONTINUE
       GO TO 50
 C     do nothing
    30 IF ((1).NE. (isdtyp)) GO TO 40
       lg1(g) = mltmod(a1w,lg1(g),m1)
       lg2(g) = mltmod(a2w,lg2(g),m2)
       GO TO 50
 
-   40 STOP 'ISDTYP NOT IN RANGE'
+   40 CALL XSTOPX ('ISDTYP NOT IN RANGE')
 
    50 cg1(g) = lg1(g)
       cg2(g) = lg2(g)
       RETURN
 
       END
diff --git a/libcruft/ranlib/mltmod.f b/libcruft/ranlib/mltmod.f
--- a/libcruft/ranlib/mltmod.f
+++ b/libcruft/ranlib/mltmod.f
@@ -34,17 +34,17 @@ C     .. Executable Statements ..
 C
 C     H = 2**((b-2)/2) where b = 32 because we are using a 32 bit
 C      machine. On a different machine recompute H
 C
       IF (.NOT. (a.LE.0.OR.a.GE.m.OR.s.LE.0.OR.s.GE.m)) GO TO 10
       WRITE (*,*) ' A, M, S out of order in MLTMOD - ABORT!'
       WRITE (*,*) ' A = ',a,' S = ',s,' M = ',m
       WRITE (*,*) ' MLTMOD requires: 0 < A < M; 0 < S < M'
-      STOP ' A, M, S out of order in MLTMOD - ABORT!'
+      CALL XSTOPX (' A, M, S out of order in MLTMOD - ABORT!')
 
    10 IF (.NOT. (a.LT.h)) GO TO 20
       a0 = a
       p = 0
       GO TO 120
 
    20 a1 = a/h
       a0 = a - h*a1
diff --git a/libcruft/ranlib/setant.f b/libcruft/ranlib/setant.f
--- a/libcruft/ranlib/setant.f
+++ b/libcruft/ranlib/setant.f
@@ -60,15 +60,16 @@ C     ..
 C     .. Save statement ..
       SAVE /globe/
 C     ..
 C     .. Executable Statements ..
 C     Abort unless random number generator initialized
       IF (qrgnin()) GO TO 10
       WRITE (*,*) ' SETANT called before random number generator ',
      +  ' initialized -- abort!'
-      STOP ' SETANT called before random number generator initialized'
+      CALL XSTOPX
+     + (' SETANT called before random number generator initialized')
 
    10 CALL getcgn(g)
       qanti(g) = qvalue
       RETURN
 
       END
diff --git a/libcruft/ranlib/setgmn.f b/libcruft/ranlib/setgmn.f
--- a/libcruft/ranlib/setgmn.f
+++ b/libcruft/ranlib/setgmn.f
@@ -63,34 +63,34 @@ C     ..
 C     .. Executable Statements ..
 C
 C
 C     TEST THE INPUT
 C
       IF (.NOT. (p.LE.0)) GO TO 10
       WRITE (*,*) 'P nonpositive in SETGMN'
       WRITE (*,*) 'Value of P: ',p
-      STOP 'P nonpositive in SETGMN'
+      CALL XSTOPX ('P nonpositive in SETGMN')
 
    10 parm(1) = p
 C
 C     PUT P AND MEANV INTO PARM
 C
       DO 20,i = 2,p + 1
           parm(i) = meanv(i-1)
    20 CONTINUE
 C
 C      Cholesky decomposition to find A s.t. trans(A)*(A) = COVM
 C
 C      CALL spofa(covm,p,p,info)
 C      CALL spofa(covm,ldcovm,p,info)
       CALL spotrf ( 'Upper', p, covm, ldcovm, info)
       IF (.NOT. (info.NE.0)) GO TO 30
       WRITE (*,*) ' COVM not positive definite in SETGMN'
-      STOP ' COVM not positive definite in SETGMN'
+      CALL XSTOPX (' COVM not positive definite in SETGMN')
 
    30 icount = p + 1
 C
 C     PUT UPPER HALF OF A, WHICH IS NOW THE CHOLESKY FACTOR, INTO PARM
 C          COVM(1,1) = PARM(P+2)
 C          COVM(1,2) = PARM(P+3)
 C                    :
 C          COVM(1,P) = PARM(2P+1)
diff --git a/libcruft/ranlib/setsd.f b/libcruft/ranlib/setsd.f
--- a/libcruft/ranlib/setsd.f
+++ b/libcruft/ranlib/setsd.f
@@ -57,17 +57,18 @@ C     ..
 C     .. Save statement ..
       SAVE /globe/
 C     ..
 C     .. Executable Statements ..
 C     Abort unless random number generator initialized
       IF (qrgnin()) GO TO 10
       WRITE (*,*) ' SETSD called before random number generator ',
      +  ' initialized -- abort!'
-      STOP ' SETSD called before random number generator initialized'
+      CALL XSTOPX 
+     + (' SETSD called before random number generator initialized')
 
    10 CALL getcgn(g)
       ig1(g) = iseed1
       ig2(g) = iseed2
       CALL initgn(-1)
       RETURN
 
       END
