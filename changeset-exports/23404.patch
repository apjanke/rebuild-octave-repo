# HG changeset patch
# User Torsten <mttl@mailbox.org>
# Date 1492457335 -7200
#      Mon Apr 17 21:28:55 2017 +0200
# Node ID 314ac710f2aec6fca635db7c9978b61e1bf8bcde
# Parent  fee5312256790fad657ac256cbe8833b4a39be3d
highlight error messages in gui and provide links to open files (bug #35619)

* QTerminal.cc (handleCustomContextMenuReques): use method via selecting the
  message only in windows

* Filter.cpp (Filter::HotSpot::type(), Filter::HotSpot::setType): make Type
  a type in Filter, not in HotSpot;
  (RegExpFilter::RegExpFilter) create a filter with the corresponding type
  instead of different filters for different types;
  (RegExpFilter::HotSpot::HotSpot): A found hot spot is created with the types
  of the filter that found that hot spot;
  (RegExpFilter::process): remove some old debug message, which were already
  commented out, call newHotSpot with type as new parameter;
  (RegExpFilter::newHotSpot, UrlFilter::newHotSpot): new parameter type;
  (UrlFilter::process): derive this method for UrlFilter, too, allowing
  to connect signals for opening files later on;
  (UrlFilter::HotSpot::HotSpot): no extra action here, get type from filter;
  (UrlFilter::HotSpot::urlType): add new url type;
  (UrlFilter::HotSpot::activate): depending on link type, open link as before
  or call method for opening the file mentioned in the link;
  (UrlFilter::ErrorLinkRegExp): const defined reg. expression for error link;
  (UrlFilter::UrlFilter): set reg. expression depending on type;
  (UrlFilter::HotSpot::actions): in a case of a file link, only prepare
  an open, but no copy action for the context menu;
  (UrlFilter::request_open_file): method emitting the signal to the main window
  for opening the desired file at desired line;

  * Filter.h: make Filter class inherit from QObject for using singals, move
    enum Type from HotSpot to Filter and add the types Error and ErrorLink,
    Filter and Filter::HotSpot ctors with type parameter, add file opening
    signal to RegExpFilter and FilterObject, add Q_OBJECT directives, add
    method to FilterObject returning the instance variable _urlObject, add
    new urlType ErrorLink, add own process method and open file slot to
    UrlFilter, FilterObject: open file slot only emitting open file singal

  * QUnixTerminalImpl.cpp (ctor): initialize instance variable _parent;
    (initialize): add new filters for errors and for links to related files,
    connect latters signal to the appropriate main windows slot;

  * QUnixTerminalImpl.h: add instance variable _parent for signal connections

  * TerminalView.cpp (paintFilters): underline Link and ErrorLink, draw
    rectangle with transparency for Error and LinkError;
    (mousePressEvent, mouseMoveEvent): treat Link and ErrorLink the same way

diff --git a/libgui/qterminal/libqterminal/QTerminal.cc b/libgui/qterminal/libqterminal/QTerminal.cc
--- a/libgui/qterminal/libqterminal/QTerminal.cc
+++ b/libgui/qterminal/libqterminal/QTerminal.cc
@@ -94,16 +94,19 @@ void
 QTerminal::handleCustomContextMenuRequested (const QPoint& at)
   {
     QClipboard * cb = QApplication::clipboard ();
     QString selected_text = selectedText();
     bool has_selected_text = ! selected_text.isEmpty ();
 
     _edit_action->setVisible (false);
 
+#if defined (Q_OS_WIN32)
+    // include this when in windows because there is no filter for
+    // detecting links and error messages yet
     if (has_selected_text)
       {
         QRegExp file ("(?:[ \\t]+)(\\S+) at line (\\d+) column (?:\\d+)");
 
         int pos = file.indexIn (selected_text);
 
         if (pos > -1)
           {
@@ -114,16 +117,17 @@ QTerminal::handleCustomContextMenuReques
             _edit_action->setText (tr ("Edit %1 at line %2")
                                    .arg (file_name).arg (line));
 
             QStringList data;
             data << file_name << line;
             _edit_action->setData (data);
           }
       }
+#endif
 
     _paste_action->setEnabled (cb->text().length() > 0);
     _copy_action->setEnabled (has_selected_text);
 
     // Get the actions of any hotspots the filters may have found
     QList<QAction*> actions = get_hotspot_actions (at);
     if (actions.length ())
       _contextMenu->addSeparator ();
diff --git a/libgui/qterminal/libqterminal/unix/Filter.cpp b/libgui/qterminal/libqterminal/unix/Filter.cpp
--- a/libgui/qterminal/libqterminal/unix/Filter.cpp
+++ b/libgui/qterminal/libqterminal/unix/Filter.cpp
@@ -1,12 +1,13 @@
 /*
     Copyright (C) 2007, 2013 by Robert Knight <robertknight@gmail.com>
 
     Rewritten for QT4 by e_k <e_k at users.sourceforge.net>, Copyright (C)2008
+    Adoption to octave by Torsten <mttl@mailbox.org>, Copyright (c) 2017
 
     This program is free software; you can redistribute it and/or modify
     it under the terms of the GNU General Public License as published by
     the Free Software Foundation; either version 2 of the License, or
     (at your option) any later version.
 
     This program is distributed in the hope that it will be useful,
     but WITHOUT ANY WARRANTY; without even the implied warranty of
@@ -312,33 +313,35 @@ int Filter::HotSpot::endLine() const
 int Filter::HotSpot::startColumn() const
 {
     return _startColumn;
 }
 int Filter::HotSpot::endColumn() const
 {
     return _endColumn;
 }
-Filter::HotSpot::Type Filter::HotSpot::type() const
+Filter::Type Filter::HotSpot::type() const
 {
     return _type;
 }
-void Filter::HotSpot::setType(Type type)
+void Filter::HotSpot::setType(Filter::Type type)
 {
     _type = type;
 }
 
-RegExpFilter::RegExpFilter()
+RegExpFilter::RegExpFilter(Type t)
+    : _type (t)
 {
 }
 
-RegExpFilter::HotSpot::HotSpot(int startLine,int startColumn,int endLine,int endColumn)
+RegExpFilter::HotSpot::HotSpot(int startLine,int startColumn,
+                               int endLine,int endColumn, Filter::Type t)
     : Filter::HotSpot(startLine,startColumn,endLine,endColumn)
 {
-    setType(Marker);
+    setType(t);
 }
 
 void RegExpFilter::HotSpot::activate(QObject*)
 {
 }
 
 void RegExpFilter::HotSpot::setCapturedTexts(const QStringList& texts)
 {
@@ -387,50 +390,100 @@ void RegExpFilter::process()
             int endColumn = 0;
 
 
             //kDebug() << "pos from " << pos << " to " << pos + _searchText.matchedLength();
 
             getLineColumn(pos,startLine,startColumn);
             getLineColumn(pos + _searchText.matchedLength(),endLine,endColumn);
 
-            //kDebug() << "start " << startLine << " / " << startColumn;
-            //kDebug() << "end " << endLine << " / " << endColumn;
-
             RegExpFilter::HotSpot* spot = newHotSpot(startLine,startColumn,
-                                           endLine,endColumn);
+                                           endLine,endColumn,_type);
             spot->setCapturedTexts(_searchText.capturedTexts());
 
             addHotSpot( spot );
             pos += _searchText.matchedLength();
 
             // if matchedLength == 0, the program will get stuck in an infinite loop
             Q_ASSERT( _searchText.matchedLength() > 0 );
         }
     }
 }
 
 RegExpFilter::HotSpot* RegExpFilter::newHotSpot(int startLine,int startColumn,
-                                                int endLine,int endColumn)
+                                                int endLine,int endColumn,
+                                                Filter::Type t)
 {
     return new RegExpFilter::HotSpot(startLine,startColumn,
-                                                  endLine,endColumn);
+                                     endLine,endColumn, t);
 }
-RegExpFilter::HotSpot* UrlFilter::newHotSpot(int startLine,int startColumn,int endLine,
-                                                    int endColumn)
+UrlFilter::HotSpot* UrlFilter::newHotSpot(int startLine,int startColumn,int endLine,
+                                                    int endColumn, Filter::Type t)
 {
     return new UrlFilter::HotSpot(startLine,startColumn,
-                                               endLine,endColumn);
+                                               endLine,endColumn,t);
 }
-UrlFilter::HotSpot::HotSpot(int startLine,int startColumn,int endLine,int endColumn)
-: RegExpFilter::HotSpot(startLine,startColumn,endLine,endColumn)
+
+void UrlFilter::process()
+{
+    int pos = 0;
+    const QString* text = buffer();
+
+    Q_ASSERT( text );
+
+    // ignore any regular expressions which match an empty string.
+    // otherwise the while loop below will run indefinitely
+    static const QString emptyString("");
+    if ( _searchText.exactMatch(emptyString) )
+        return;
+
+    while(pos >= 0)
+    {
+        pos = _searchText.indexIn(*text,pos);
+
+        if ( pos >= 0 )
+        {
+
+            int startLine = 0;
+            int endLine = 0;
+            int startColumn = 0;
+            int endColumn = 0;
+
+
+            //kDebug() << "pos from " << pos << " to " << pos + _searchText.matchedLength();
+
+            getLineColumn(pos,startLine,startColumn);
+            getLineColumn(pos + _searchText.matchedLength(),endLine,endColumn);
+
+            UrlFilter::HotSpot* spot = newHotSpot(startLine,startColumn,
+                                           endLine,endColumn,_type);
+            spot->setCapturedTexts(_searchText.capturedTexts());
+
+            // Connect the signal of the urlobject to the slot of the filter;
+            // the filter is then signaling to the main window
+            connect (spot->get_urlObject (),
+                     SIGNAL (request_open_file_signal (const QString&, int)),
+                     this, SLOT (request_open_file (const QString&, int)));
+
+            addHotSpot( spot );
+            pos += _searchText.matchedLength();
+
+            // if matchedLength == 0, the program will get stuck in an infinite loop
+            Q_ASSERT( _searchText.matchedLength() > 0 );
+        }
+    }
+}
+
+UrlFilter::HotSpot::HotSpot(int startLine,int startColumn,
+                            int endLine,int endColumn,Type t)
+: RegExpFilter::HotSpot(startLine,startColumn,endLine,endColumn,t)
 , _urlObject(new FilterObject(this))
 {
-    setType(Link);
 }
+
 QString UrlFilter::HotSpot::tooltip() const
 {
     QString url = capturedTexts().first();
 
     const UrlType kind = urlType();
 
     if ( kind == StandardUrl )
         return QString();
@@ -442,16 +495,18 @@ QString UrlFilter::HotSpot::tooltip() co
 UrlFilter::HotSpot::UrlType UrlFilter::HotSpot::urlType() const
 {
     QString url = capturedTexts().first();
 
     if ( FullUrlRegExp.exactMatch(url) )
         return StandardUrl;
     else if ( EmailAddressRegExp.exactMatch(url) )
         return Email;
+    else if ( ErrorLinkRegExp.exactMatch(url) )
+        return ErrorLink;
     else
         return Unknown;
 }
 
 void UrlFilter::HotSpot::activate(QObject* object)
 {
     QString url = capturedTexts().first();
 
@@ -478,40 +533,61 @@ void UrlFilter::HotSpot::activate(QObjec
                 url.prepend("http://");
             }
         }
         else if ( kind == Email )
         {
             url.prepend("mailto:");
         }
 
-        QDesktopServices::openUrl (QUrl (url));
+        if (kind == ErrorLink)
+          {
+            int pos = ErrorLinkRegExp.indexIn (url);
+            if (pos > -1)
+              {
+                QString file_name = ErrorLinkRegExp.cap (1);
+                QString line = ErrorLinkRegExp.cap (2);
+
+                // call the urlobject's method for opening a file; this
+                // method then signals to the filter
+                _urlObject->request_open_file (file_name, line.toInt ());
+              }
+          }
+        else
+          {
+            QDesktopServices::openUrl (QUrl (url));
+          }
     }
 }
 
 // Note:  Altering these regular expressions can have a major effect on the performance of the filters
 // used for finding URLs in the text, especially if they are very general and could match very long
 // pieces of text.
 // Please be careful when altering them.
 
 //regexp matches:
 // full url:
 // protocolname:// or www. followed by anything other than whitespaces, <, >, ' or ", and ends before whitespaces, <, >, ', ", ], !, comma and dot
 const QRegExp UrlFilter::FullUrlRegExp("(www\\.(?!\\.)|[a-z][a-z0-9+.-]*://)[^\\s<>'\"]+[^!,\\.\\s<>'\"\\]]");
 // email address:
 // [word chars, dots or dashes]@[word chars, dots or dashes].[word chars]
 const QRegExp UrlFilter::EmailAddressRegExp("\\b(\\w|\\.|-)+@(\\w|\\.|-)+\\.\\w+\\b");
-
 // matches full url or email address
 const QRegExp UrlFilter::CompleteUrlRegExp('('+FullUrlRegExp.pattern()+'|'+
                                             EmailAddressRegExp.pattern()+')');
+// error link
+const QRegExp UrlFilter::ErrorLinkRegExp("(\\S+) at line (\\d+) column (?:\\d+)");
 
-UrlFilter::UrlFilter()
+UrlFilter::UrlFilter (Type t)
+    : RegExpFilter (t)
 {
-    setRegExp( CompleteUrlRegExp );
+    if (_type == ErrorLink)
+      setRegExp (ErrorLinkRegExp);
+    else
+      setRegExp (CompleteUrlRegExp);
 }
 UrlFilter::HotSpot::~HotSpot()
 {
     delete _urlObject;
 }
 void FilterObject::activated()
 {
     _filter->activate(sender());
@@ -520,37 +596,58 @@ QList<QAction*> UrlFilter::HotSpot::acti
 {
     QList<QAction*> list;
 
     const UrlType kind = urlType();
 
     QAction* openAction = new QAction(_urlObject);
     QAction* copyAction = new QAction(_urlObject);;
 
-    Q_ASSERT( kind == StandardUrl || kind == Email );
+    Q_ASSERT (kind == StandardUrl || kind == Email || kind == ErrorLink);
 
     if ( kind == StandardUrl )
     {
-        openAction->setText(("Open Link"));
-        copyAction->setText(("Copy Link Address"));
+        openAction->setText(tr ("Open Link"));
+        copyAction->setText(tr ("Copy Link Address"));
     }
     else if ( kind == Email )
     {
-        openAction->setText(("Send Email To..."));
-        copyAction->setText(("Copy Email Address"));
+        openAction->setText(tr ("Send Email To..."));
+        copyAction->setText(tr ("Copy Email Address"));
+    }
+    else if ( kind == ErrorLink )
+    {
+      QString url = capturedTexts().first();
+      int pos = ErrorLinkRegExp.indexIn (url);
+      if (pos >= 0)
+        {
+          QString file_name = ErrorLinkRegExp.cap (1);
+          QString line = ErrorLinkRegExp.cap (2);
+          openAction->setText(tr ("Edit %1 at line %2")
+                              .arg (file_name).arg (line));
+        }
     }
 
     // object names are set here so that the hotspot performs the
     // correct action when activated() is called with the triggered
     // action passed as a parameter.
     openAction->setObjectName("open-action");
     copyAction->setObjectName("copy-action");
 
     QObject::connect( openAction , SIGNAL(triggered()) , _urlObject , SLOT(activated()) );
-    QObject::connect( copyAction , SIGNAL(triggered()) , _urlObject , SLOT(activated()) );
+    list << openAction;
 
-    list << openAction;
-    list << copyAction;
-
+    if (kind != ErrorLink)
+      {
+        QObject::connect ( copyAction , SIGNAL(triggered()) ,
+                           _urlObject , SLOT(activated()) );
+        list << copyAction;
+      }
     return list;
 }
 
+void
+UrlFilter::request_open_file (const QString& file, int line)
+{
+  emit request_open_file_signal (file, line);
+}
+
 //#include "moc_Filter.cpp"
diff --git a/libgui/qterminal/libqterminal/unix/Filter.h b/libgui/qterminal/libqterminal/unix/Filter.h
--- a/libgui/qterminal/libqterminal/unix/Filter.h
+++ b/libgui/qterminal/libqterminal/unix/Filter.h
@@ -1,12 +1,13 @@
 /*
     Copyright (C) 2007, 2013 by Robert Knight <robertknight@gmail.com>
 
     Rewritten for QT4 by e_k <e_k at users.sourceforge.net>, Copyright (C)2008
+    Adoption to octave by Torsten <mttl@mailbox.org>, Copyright (c) 2017
 
     This program is free software; you can redistribute it and/or modify
     it under the terms of the GNU General Public License as published by
     the Free Software Foundation; either version 2 of the License, or
     (at your option) any later version.
 
     This program is distributed in the hope that it will be useful,
     but WITHOUT ANY WARRANTY; without even the implied warranty of
@@ -46,51 +47,58 @@
  * Hotspots may have more than one action, in which case the list of actions can be obtained using the
  * actions() method.
  *
  * Different subclasses of filter will return different types of hotspot.
  * Subclasses must reimplement the process() method to examine a block of text and identify sections of interest.
  * When processing the text they should create instances of Filter::HotSpot subclasses for sections of interest
  * and add them to the filter's list of hotspots using addHotSpot()
  */
-class Filter
+class Filter : public QObject
 {
+
+   Q_OBJECT
+
 public:
     /**
     * Represents an area of text which matched the pattern a particular filter has been looking for.
     *
     * Each hotspot has a type identifier associated with it ( such as a link or a highlighted section ),
     * and an action.  When the user performs some activity such as a mouse-click in a hotspot area ( the exact
     * action will depend on what is displaying the block of text which the filter is processing ), the hotspot's
     * activate() method should be called.  Depending on the type of hotspot this will trigger a suitable response.
     *
     * For example, if a hotspot represents a URL then a suitable action would be opening that URL in a web browser.
     * Hotspots may have more than one action, in which case the list of actions can be obtained using the
     * actions() method.  These actions may then be displayed in a popup menu or toolbar for example.
     */
-    class HotSpot
+
+    enum Type
     {
+      // the type of the hotspot is not specified
+      NotSpecified,
+      // this hotspot represents a clickable link
+      Link,
+      // this hotspot represents a marker
+      Marker,
+      Error,
+      ErrorLink
+    };
+
+    class HotSpot : public QObject
+    {
+
     public:
        /**
         * Constructs a new hotspot which covers the area from (@p startLine,@p startColumn) to (@p endLine,@p endColumn)
         * in a block of text.
         */
        HotSpot(int startLine , int startColumn , int endLine , int endColumn);
        virtual ~HotSpot();
 
-       enum Type
-       {
-            // the type of the hotspot is not specified
-            NotSpecified,
-            // this hotspot represents a clickable link
-            Link,
-            // this hotspot represents a marker
-            Marker
-       };
-
        /** Returns the line when the hotspot area starts */
        int startLine() const;
        /** Returns the line where the hotspot area ends */
        int endLine() const;
        /** Returns the column on startLine() where the hotspot area starts */
        int startColumn() const;
        /** Returns the column on endLine() where the hotspot area ends */
        int endColumn() const;
@@ -185,37 +193,41 @@ private:
  * A filter which searches for sections of text matching a regular expression and creates a new RegExpFilter::HotSpot
  * instance for them.
  *
  * Subclasses can reimplement newHotSpot() to return custom hotspot types when matches for the regular expression
  * are found.
  */
 class RegExpFilter : public Filter
 {
+
+   Q_OBJECT
+
 public:
     /**
      * Type of hotspot created by RegExpFilter.  The capturedTexts() method can be used to find the text
      * matched by the filter's regular expression.
      */
     class HotSpot : public Filter::HotSpot
     {
     public:
-        HotSpot(int startLine, int startColumn, int endLine , int endColumn);
+        HotSpot(int startLine, int startColumn,
+                int endLine , int endColumn, Filter::Type);
         virtual void activate(QObject* object = 0);
 
         /** Sets the captured texts associated with this hotspot */
         void setCapturedTexts(const QStringList& texts);
         /** Returns the texts found by the filter when matching the filter's regular expression */
         QStringList capturedTexts() const;
-    private:
+     private:
         QStringList _capturedTexts;
     };
 
     /** Constructs a new regular expression filter */
-    RegExpFilter();
+    RegExpFilter (Type);
 
     /**
      * Sets the regular expression which the filter searches for in blocks of text.
      *
      * Regular expressions which match the empty string are treated as not matching
      * anything.
      */
     void setRegExp(const QRegExp& text);
@@ -225,84 +237,105 @@ public:
     /**
      * Reimplemented to search the filter's text buffer for text matching regExp()
      *
      * If regexp matches the empty string, then process() will return immediately
      * without finding results.
      */
     virtual void process();
 
+signals:
+
+    void request_open_file_signal (const QString&, int);
+
 protected:
     /**
      * Called when a match for the regular expression is encountered.  Subclasses should reimplement this
      * to return custom hotspot types
      */
     virtual RegExpFilter::HotSpot* newHotSpot(int startLine,int startColumn,
-                                    int endLine,int endColumn);
+                                    int endLine,int endColumn, Type);
+    Type _type;
 
-private:
     QRegExp _searchText;
 };
 
 class FilterObject;
 
 /** A filter which matches URLs in blocks of text */
 class UrlFilter : public RegExpFilter
 {
+
+   Q_OBJECT
+
 public:
     /**
      * Hotspot type created by UrlFilter instances.  The activate() method opens a web browser
      * at the given URL when called.
      */
     class HotSpot : public RegExpFilter::HotSpot
     {
     public:
-        HotSpot(int startLine,int startColumn,int endLine,int endColumn);
+        HotSpot(int startLine,int startColumn,int endLine,int endColumn,Type t);
         virtual ~HotSpot();
 
         virtual QList<QAction*> actions();
 
         /**
          * Open a web browser at the current URL.  The url itself can be determined using
          * the capturedTexts() method.
          */
         virtual void activate(QObject* object = 0);
 
         virtual QString tooltip() const;
+
+        FilterObject* get_urlObject () { return _urlObject; }
+
     private:
         enum UrlType
         {
             StandardUrl,
             Email,
+            ErrorLink,
             Unknown
         };
         UrlType urlType() const;
 
         FilterObject* _urlObject;
     };
 
-    UrlFilter();
+    UrlFilter (Type t = Link);
+
+    virtual void process();
+
+public slots:
+    void request_open_file (const QString&, int);
 
 protected:
-    virtual RegExpFilter::HotSpot* newHotSpot(int,int,int,int);
+    virtual HotSpot* newHotSpot(int,int,int,int,Type);
 
 private:
 
     static const QRegExp FullUrlRegExp;
     static const QRegExp EmailAddressRegExp;
+    static const QRegExp ErrorLinkRegExp;
 
     // combined OR of FullUrlRegExp and EmailAddressRegExp
     static const QRegExp CompleteUrlRegExp;
 };
 
 class FilterObject : public QObject
 {
 Q_OBJECT
 public:
     FilterObject(Filter::HotSpot* filter) : _filter(filter) {}
+    void request_open_file (const QString& file, int line)
+      { emit request_open_file_signal (file, line); }
+signals:
+    void request_open_file_signal (const QString&, int);
 private slots:
     void activated();
 private:
     Filter::HotSpot* _filter;
 };
 
 /**
  * A chain which allows a group of filters to be processed as one.
diff --git a/libgui/qterminal/libqterminal/unix/QUnixTerminalImpl.cpp b/libgui/qterminal/libqterminal/unix/QUnixTerminalImpl.cpp
--- a/libgui/qterminal/libqterminal/unix/QUnixTerminalImpl.cpp
+++ b/libgui/qterminal/libqterminal/unix/QUnixTerminalImpl.cpp
@@ -19,18 +19,20 @@
 
 #include <QDebug>
 
 #include "unix/QUnixTerminalImpl.h"
 #include "unix/kpty.h"
 
 #include <termios.h>
 
-QUnixTerminalImpl::QUnixTerminalImpl(QWidget *parent)
-    : QTerminal(parent) {
+QUnixTerminalImpl::QUnixTerminalImpl(QWidget *p)
+    : QTerminal(p),
+      _parent (p)
+{
     setMinimumSize(300, 200);
     initialize();
 }
 
 void QUnixTerminalImpl::initialize()
 {
     m_terminalView = new TerminalView(this);
     m_terminalView->setKeyboardCursorShape(TerminalView::UnderlineCursor);
@@ -41,16 +43,26 @@ void QUnixTerminalImpl::initialize()
     m_terminalView->setTripleClickMode(TerminalView::SelectWholeLine);
     m_terminalView->setTerminalSizeStartup(true);
     m_terminalView->setSize(80, 40);
     m_terminalView->setScrollBarPosition(TerminalView::ScrollBarRight);
 
     UrlFilter *url_filter = new UrlFilter();
     m_terminalView->filterChain ()->addFilter (url_filter);
 
+    RegExpFilter *error_filter = new RegExpFilter (Filter::Type::Error);
+    error_filter->setRegExp (QRegExp ("error:"));
+    m_terminalView->filterChain ()->addFilter (error_filter);
+
+    UrlFilter *file_filter = new UrlFilter (Filter::Type::ErrorLink);
+    m_terminalView->filterChain ()->addFilter (file_filter);
+
+    connect (file_filter, SIGNAL (request_open_file_signal (const QString&, int)),
+             _parent, SLOT (edit_mfile (const QString&, int)));
+
     connect(m_terminalView, SIGNAL(customContextMenuRequested(QPoint)),
             this, SLOT(handleCustomContextMenuRequested(QPoint)));
 
     connect (m_terminalView, SIGNAL (interrupt_signal (void)),
              this, SLOT (terminal_interrupt ()));
 
 #ifdef Q_OS_MAC
     QFont font = QFont("Monaco");
diff --git a/libgui/qterminal/libqterminal/unix/QUnixTerminalImpl.h b/libgui/qterminal/libqterminal/unix/QUnixTerminalImpl.h
--- a/libgui/qterminal/libqterminal/unix/QUnixTerminalImpl.h
+++ b/libgui/qterminal/libqterminal/unix/QUnixTerminalImpl.h
@@ -64,11 +64,12 @@ protected:
 private:
     void initialize();
     void connectToPty();
 
     TerminalView *m_terminalView;
     TerminalModel *m_terminalModel;
     KPty *m_kpty;
     bool _extra_interrupt;
+    QWidget *_parent;
 };
 
 #endif // Q_UNIXTERMINALIMPL
diff --git a/libgui/qterminal/libqterminal/unix/TerminalView.cpp b/libgui/qterminal/libqterminal/unix/TerminalView.cpp
--- a/libgui/qterminal/libqterminal/unix/TerminalView.cpp
+++ b/libgui/qterminal/libqterminal/unix/TerminalView.cpp
@@ -1189,36 +1189,43 @@ void TerminalView::paintFilters(QPainter
           // moving the mouse outside a link could still leave it underlined
           // because the check below for the position of the cursor
           // finds it on the border of the target area
           QRect r;
           r.setCoords( startColumn*_fontWidth + 1, line*_fontHeight + 1,
                        endColumn*_fontWidth - 1, (line+1)*_fontHeight - 1 );
 
           // Underline link hotspots
-          if ( spot->type() == Filter::HotSpot::Link )
+          if ( spot->type() == Filter::Link ||
+               spot->type() == Filter::ErrorLink)
             {
               QFontMetrics metrics(font());
 
               // find the baseline (which is the invisible line that the characters in the font sit on,
               // with some having tails dangling below)
               int baseline = r.bottom() - metrics.descent();
               // find the position of the underline below that
               int underlinePos = baseline + metrics.underlinePos();
 
               if ( r.contains( mapFromGlobal(QCursor::pos()) ) )
                 painter.drawLine( r.left() , underlinePos ,
                                   r.right() , underlinePos );
             }
           // Marker hotspots simply have a transparent rectanglular shape
           // drawn on top of them
-          else if ( spot->type() == Filter::HotSpot::Marker )
+          else if ( spot->type() == Filter::Error )
             {
               //TODO - Do not use a hardcoded colour for this
-              painter.fillRect(r,QBrush(QColor(255,0,0,120)));
+              painter.fillRect(r,QBrush(QColor(255,0,0,96)));
+            }
+
+          if ( spot->type() == Filter::ErrorLink )
+            {
+              //TODO - Do not use a hardcoded colour for this
+              painter.fillRect(r,QBrush(QColor(255,0,0,96)));
             }
         }
     }
 }
 void TerminalView::drawContents(QPainter &paint, const QRect &rect)
 {
   //qDebug("%s %d drawContents and rect x=%d y=%d w=%d h=%d", __FILE__, __LINE__, rect.x(), rect.y(),rect.width(),rect.height());
 
@@ -1559,17 +1566,18 @@ void TerminalView::mousePressEvent(QMous
   int charColumn;
   getCharacterPosition(ev->pos(),charLine,charColumn);
   QPoint pos = QPoint(charColumn,charLine);
 
   if ( ev->button() == Qt::LeftButton)
     {
 
       Filter::HotSpot* spot = _filterChain->hotSpotAt(charLine,charColumn);
-      if ( spot && spot->type() == Filter::HotSpot::Link)
+      if ( spot &&
+          (spot->type() == Filter::Link || spot->type() == Filter::ErrorLink))
         {
           QList<QAction*> actions = spot->actions ();
           if (actions.length ())
             actions.at (0)->activate (QAction::Trigger);
           return;
         }
 
       _lineSelectionMode = false;
@@ -1651,17 +1659,18 @@ void TerminalView::mouseMoveEvent(QMouse
   int charLine = 0;
   int charColumn = 0;
 
   getCharacterPosition(ev->pos(),charLine,charColumn);
 
   // handle filters
   // change link hot-spot appearance on mouse-over
   Filter::HotSpot* spot = _filterChain->hotSpotAt(charLine,charColumn);
-  if ( spot && spot->type() == Filter::HotSpot::Link)
+  if ( spot &&
+      (spot->type() == Filter::Link || spot->type() == Filter::ErrorLink))
     {
       // change mouse cursor when mouse is over links
       if (! _mouseOverHotspotArea.isValid())
         setCursor (Qt::PointingHandCursor);
 
       QRect previousHotspotArea = _mouseOverHotspotArea;
       _mouseOverHotspotArea.setCoords( qMin(spot->startColumn() , spot->endColumn()) * _fontWidth,
                                        spot->startLine() * _fontHeight,
