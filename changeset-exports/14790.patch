# HG changeset patch
# User David Bateman <dbateman@free.fr>
# Date 1340303073 14400
#      Thu Jun 21 14:24:33 2012 -0400
# Branch stable
# Node ID b8041f48b0ff690968dcd515170f3eb20af2e359
# Parent  62219ea36f05c5b8f5c141f7f503970bc6a11cd6
Return sparse column vectors when the indexing allows it (bug #36656)

* Sparse.cc (Sparse<T>::index): Return a column vector when it's known
  to be the desired output. Add a test

diff --git a/liboctave/Sparse.cc b/liboctave/Sparse.cc
--- a/liboctave/Sparse.cc
+++ b/liboctave/Sparse.cc
@@ -1577,16 +1577,20 @@ Sparse<T>::index (const idx_vector& idx_
               copy_or_memcpy (nzj, ridx () + ljj, retval.ridx () + lj);
             }
         }
     }
   else if (nc == 1 && idx_j.is_colon_equiv (nc) && idx_i.is_vector ())
     {
       // It's actually vector indexing. The 1D index is specialized for that.
       retval = index (idx_i);
+
+      // If nr == 1 then the vector indexing will return a column vector!!
+      if (nr == 1)
+        retval.transpose();
     }
   else if (idx_i.is_scalar ())
     {
       octave_idx_type ii = idx_i(0);
       retval = Sparse<T> (1, m);
       OCTAVE_LOCAL_BUFFER (octave_idx_type, ij, m);
       for (octave_idx_type j = 0; j < m; j++)
         {
@@ -2737,16 +2741,21 @@ bug #35570:
 
 ## Test removing columns (bug #36656)
 
 %!test
 %! s = sparse (magic (5));
 %! s(:,2:4) = [];
 %! assert (s, sparse (magic (5)(:, [1,5])));
 
+%!test
+%! s = sparse([], [], [], 1, 1);
+%! s(1,:) = [];
+%! assert (s, sparse ([], [], [], 0, 1));
+
 */
 
 template <class T>
 void
 Sparse<T>::print_info (std::ostream& os, const std::string& prefix) const
 {
   os << prefix << "rep address: " << rep << "\n"
      << prefix << "rep->nzmx:   " << rep->nzmx  << "\n"
