# HG changeset patch
# User Rik <rik@octave.org>
# Date 1419224451 28800
#      Sun Dec 21 21:00:51 2014 -0800
# Node ID 82f2a3437e02f1a2a883a02e1b449b1b158035b3
# Parent  c029983a038955bb696955b84cc11a4a713f276c
Fix tempname so it prioritizes user input dir rather than TMPDIR (bug #43844).

* file-ops.cc (octave_tempnam): Use C++ std::string functions to check
if function's dir argument has been overwritten by TMPDIR environment variable.
If it has, replace the TMPDIR string with the the function's dir argument.

* file-io.cc (Ftempname): Add BIST tests for correct behavior.

diff --git a/libinterp/corefcn/file-io.cc b/libinterp/corefcn/file-io.cc
--- a/libinterp/corefcn/file-io.cc
+++ b/libinterp/corefcn/file-io.cc
@@ -1978,16 +1978,64 @@ see @code{tmpfile}.\n\
       retval = octave_tempnam (dir, pfx);
     }
   else
     print_usage ();
 
   return retval;
 }
 
+/*
+%!test
+%! if (ispc ())
+%!   envname = "TMP";
+%! else
+%!   envname = "TMPDIR";
+%! endif
+%! envdir = getenv (envname);
+%! unsetenv (envname);
+%! unwind_protect
+%!   ## Test 0-argument form
+%!   fname = tempname ();
+%!   [tmpdir, tmpfname] = fileparts (fname); 
+%!   assert (tmpdir, P_tmpdir);
+%!   assert (tmpfname (1:4), "oct-");
+%!   ## Test 1-argument form 
+%!   tmp_tmpdir = [P_tmpdir filesep() substr(tmpfname, -5)];
+%!   mkdir (tmp_tmpdir) || error ("Unable to create tmp dir");
+%!   setenv (envname, P_tmpdir);
+%!   fname = tempname (tmp_tmpdir);
+%!   [tmpdir, tmpfname] = fileparts (fname); 
+%!   assert (tmpdir, tmp_tmpdir);
+%!   assert (tmpfname (1:4), "oct-");
+%!   ## Test 1-argument form w/null tmpdir
+%!   fname = tempname ("");
+%!   [tmpdir, tmpfname] = fileparts (fname); 
+%!   assert (tmpdir, P_tmpdir);
+%!   assert (tmpfname (1:4), "oct-");
+%!   ## Test 2-argument form 
+%!   fname = tempname (tmp_tmpdir, "pfx-");
+%!   [tmpdir, tmpfname] = fileparts (fname); 
+%!   assert (tmpdir, tmp_tmpdir);
+%!   assert (tmpfname (1:4), "pfx-");
+%!   ## Test 2-argument form w/null prefix
+%!   fname = tempname (tmp_tmpdir, "");
+%!   [tmpdir, tmpfname] = fileparts (fname); 
+%!   assert (tmpdir, tmp_tmpdir);
+%!   assert (tmpfname (1:4), "file");
+%! unwind_protect_cleanup
+%!   rmdir (tmp_tmpdir);
+%!   if (isempty (envdir))
+%!     unsetenv (envname);
+%!   else
+%!     setenv (envname, envdir);
+%!   endif
+%! end_unwind_protect
+*/
+
 DEFUN (tmpfile, args, ,
        "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {[@var{fid}, @var{msg}] =} tmpfile ()\n\
 Return the file ID corresponding to a new temporary file with a unique\n\
 name.\n\
 \n\
 The file is opened in binary read/write (@qcode{\"w+b\"}) mode and will be\n\
 deleted automatically when it is closed or when Octave exits.\n\
diff --git a/liboctave/system/file-ops.cc b/liboctave/system/file-ops.cc
--- a/liboctave/system/file-ops.cc
+++ b/liboctave/system/file-ops.cc
@@ -682,18 +682,36 @@ octave_tempnam (const std::string& dir, 
 
   const char *ppfx = pfx.empty () ? 0 : pfx.c_str ();
 
   char *tmp = tempnam (pdir, ppfx);
 
   if (tmp)
     {
       retval = tmp;
+      free (tmp);
 
-      free (tmp);
+      if (! dir.empty ())
+        {
+          // Check that environment variable hasn't overridden dir argument
+          size_t pos = retval.rfind (file_ops::dir_sep_char ());
+          std::string tmpdir = retval.substr (0, pos);  
+          std::string dirarg = dir;
+          if (*dirarg.rbegin () == file_ops::dir_sep_char ())
+            dirarg.erase (--dirarg.end ());
+
+          if (tmpdir != dirarg)
+          {
+            // A different TMPDIR was used.
+            // Replace TMPDIR with given dir if is valid
+            file_stat fs (dirarg, false);
+            if (fs && fs.is_dir ())
+              retval.replace (0, pos, dirarg);
+          }
+        }
     }
   else
     msg = gnulib::strerror (errno);
 
   return retval;
 }
 
 std::string
