# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1283337665 -7200
#      Wed Sep 01 12:41:05 2010 +0200
# Node ID f42e8c6196c36f22e0754e62db9b0306f06692e3
# Parent  1d761a30c3fb5338c6e739b13549c959c5f4bd74
tweaks in concatenation of empty structs

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,17 @@
+2010-09-01  Jaroslav Hajek  <highegg@gmail.com>
+
+	* oct-map.cc (octave_map::cat): Search first for an index with 
+	nonzero nfields and use it for comparisons.
+	(permute_to_correct_order1): New overloaded helper func.
+	(permute_to_correct_order): use it here. Pass the index here.
+	* pt-mat.cc (single_type_concat): Don't subst 0x0 for all empty
+	arrays. Use the respective cat() capability instead.
+
 2010-09-01  Jaroslav Hajek  <highegg@gmail.com>
 
 	* DLD-FUNCTIONS/dlmread.cc (Fdlmread): Support "emptyvalue" option.
 	Fix condition for terminating read.
 
 2010-08-31  Jaroslav Hajek  <highegg@gmail.com>
 
 	* DLD-FUNCTIONS/dlmread.cc (Fdlmread): Support reading from a file ID.
diff --git a/src/oct-map.cc b/src/oct-map.cc
--- a/src/oct-map.cc
+++ b/src/oct-map.cc
@@ -613,28 +613,49 @@ octave_map::do_cat (int dim, octave_idx_
         field_list[i] = map_list[i].xvals[j];
 
       retval.xvals.push_back (Array<octave_value>::cat (dim, n, field_list));
       if (j == 0)
         retval.dimensions = retval.xvals[j].dims ();
     }
 }
 
+// This is just a wrapper.
+void permute_to_correct_order1 (const octave_scalar_map& ref, const octave_scalar_map& src,
+                                octave_scalar_map& dest, Array<octave_idx_type>& perm)
+{
+  dest = src.orderfields (ref, perm);
+}
+
+// In non-scalar case, we also promote empty structs without fields.
+void permute_to_correct_order1 (const octave_map& ref, const octave_map& src,
+                                octave_map& dest, Array<octave_idx_type>& perm)
+{
+  if (src.nfields () == 0 && src.is_empty ())
+     dest = octave_map (src.dims (), ref.keys ());
+  else
+     dest = src.orderfields (ref, perm);
+}
+
 template <class map>
 static void
 permute_to_correct_order (octave_idx_type n, octave_idx_type nf,
-                          const map *map_list, map *new_map_list)
+                          octave_idx_type idx, const map *map_list, 
+                          map *new_map_list)
 {
-  new_map_list[0] = map_list[0];
+  new_map_list[idx] = map_list[idx];
 
   Array<octave_idx_type> perm (1, nf);
 
-  for (octave_idx_type i = 1; i < n; i++)
+  for (octave_idx_type i = 0; i < n; i++)
     {
-      new_map_list[i] = map_list[i].orderfields (map_list[0], perm);
+      if (i == idx)
+         continue;
+
+      permute_to_correct_order1 (map_list[idx], map_list[i], new_map_list[i], perm);
 
       if (error_state)
         {
           // Use liboctave exception to be consistent.
           (*current_liboctave_error_handler)
             ("cat: field names mismatch in concatenating structs");
           break;
         }
@@ -650,37 +671,46 @@ octave_map::cat (int dim, octave_idx_typ
   if (dim == -1 || dim == -2)
     dim = -dim - 1;
   else if (dim < 0)
     (*current_liboctave_error_handler)
       ("cat: invalid dimension");
 
   if (n > 0)
     {
-      retval.xkeys = map_list[0].xkeys;
-      octave_idx_type nf = map_list[0].nfields ();
+      octave_idx_type idx, nf = 0;
+      for (idx = 0; idx < n; idx++)
+        {
+          nf = map_list[idx].nfields ();
+          if (nf > 0)
+            {
+              retval.xkeys = map_list[idx].xkeys;
+              break;
+            }
+        }
+
       if (nf > 0)
         {
           // Try the fast case.
           bool all_same = true;
-          for (octave_idx_type i = 1; i < n; i++)
+          for (octave_idx_type i = 0; i < n; i++)
             {
-              all_same = map_list[0].xkeys.is_same (map_list[i].xkeys);
+              all_same = map_list[idx].xkeys.is_same (map_list[i].xkeys);
               if (! all_same)
                 break;
             }
 
           if (all_same)
             do_cat (dim, n, map_list, retval);
           else
             {
               // permute all structures to common order.
               OCTAVE_LOCAL_BUFFER (octave_scalar_map, new_map_list, n);
 
-              permute_to_correct_order (n, nf, map_list, new_map_list);
+              permute_to_correct_order (n, nf, idx, map_list, new_map_list);
 
               do_cat (dim, n, new_map_list, retval);
             }
 
         }
       else
         {
           dim_vector& rd = retval.dimensions;
@@ -696,45 +726,53 @@ octave_map::cat (int dim, octave_idx_typ
 }
 
 octave_map
 octave_map::cat (int dim, octave_idx_type n, const octave_map *map_list)
 {
   octave_map retval;
   if (n > 0)
     {
-      retval.xkeys = map_list[0].xkeys;
-      octave_idx_type nf = map_list[0].nfields ();
+      octave_idx_type idx, nf = 0;
+      for (idx = 0; idx < n; idx++)
+        {
+          nf = map_list[idx].nfields ();
+          if (nf > 0)
+            {
+              retval.xkeys = map_list[idx].xkeys;
+              break;
+            }
+        }
 
       // Try the fast case.
       bool all_same = true;
-      for (octave_idx_type i = 1; i < n; i++)
+      for (octave_idx_type i = 0; i < n; i++)
         {
-          all_same = map_list[0].xkeys.is_same (map_list[i].xkeys);
+          all_same = map_list[idx].xkeys.is_same (map_list[i].xkeys);
           if (! all_same)
             break;
         }
 
       if (all_same)
         do_cat (dim, n, map_list, retval);
       else
         {
           // permute all structures to correct order.
           OCTAVE_LOCAL_BUFFER (octave_map, new_map_list, n);
 
-          permute_to_correct_order (n, nf, map_list, new_map_list);
+          permute_to_correct_order (n, nf, idx, map_list, new_map_list);
 
           if (nf > 0)
             do_cat (dim, n, new_map_list, retval);
           else
             {
               // Use dummy arrays. FIXME: Need(?) a better solution.
               OCTAVE_LOCAL_BUFFER (Array<char>, dummy, n);
               for (octave_idx_type i = 0; i < n; i++)
-                dummy[i].clear (map_list[0].dimensions);
+                dummy[i].clear (map_list[i].dimensions);
               Array<char>::cat (dim, n, dummy);
             }
         }
 
       retval.optimize_dimensions ();
     }
 
   return retval;
diff --git a/src/pt-mat.cc b/src/pt-mat.cc
--- a/src/pt-mat.cc
+++ b/src/pt-mat.cc
@@ -696,24 +696,22 @@ single_type_concat (Array<T>& result,
       OCTAVE_LOCAL_BUFFER (Array<T>, array_list, ncols);
 
       for (tm_row_const::iterator q = row.begin ();
            q != row.end () && ! error_state;
            q++)
         {
           octave_quit ();
 
-          // Use 0x0 in place of all empty arrays to allow looser rules.
-          if (! q->is_empty ())
-            array_list[i] = octave_value_extract<TYPE> (*q);
+          array_list[i] = octave_value_extract<TYPE> (*q);
           i++;
         }
 
       if (! error_state)
-        result = Array<T>::cat (1, ncols, array_list);
+        result = Array<T>::cat (-2, ncols, array_list);
     }
   else
     {
       result = Array<T> (dv);
       single_type_concat<TYPE> (result, tmp);
     }
 }
 
@@ -741,30 +739,26 @@ single_type_concat (Sparse<T>& result,
       OCTAVE_LOCAL_BUFFER (Sparse<T>, sparse_list, ncols);
 
       for (tm_row_const::iterator q = row.begin ();
            q != row.end () && ! error_state;
            q++)
         {
           octave_quit ();
 
-          // Use 0x0 in place of all empty arrays to allow looser rules.
-          if (! q->is_empty ())
-            sparse_list[i] = octave_value_extract<TYPE> (*q);
+          sparse_list[i] = octave_value_extract<TYPE> (*q);
           i++;
         }
 
-      Sparse<T> stmp = Sparse<T>::cat (1, ncols, sparse_list);
-      // Use 0x0 in place of all empty arrays to allow looser rules.
-      if (! stmp.is_empty ())
-        sparse_row_list[j] = stmp;
+      Sparse<T> stmp = Sparse<T>::cat (-2, ncols, sparse_list);
+      sparse_row_list[j] = stmp;
       j++;
     }
 
-  result = Sparse<T>::cat (0, nrows, sparse_row_list);
+  result = Sparse<T>::cat (-1, nrows, sparse_row_list);
 }
 
 template<class MAP>
 static void 
 single_type_concat (octave_map& result,
                     const dim_vector& dv,
                     tm_const& tmp)
 {
@@ -783,31 +777,26 @@ single_type_concat (octave_map& result,
       OCTAVE_LOCAL_BUFFER (MAP, map_list, ncols);
 
       for (tm_row_const::iterator q = row.begin ();
            q != row.end () && ! error_state;
            q++)
         {
           octave_quit ();
 
-          // Use 0x0 in place of all empty arrays to allow looser rules.
-          // If MAP is octave_scalar_map, the condition is vacuously true.
-          if (! q->is_empty ())
-            map_list[i] = octave_value_extract<MAP> (*q);
+          map_list[i] = octave_value_extract<MAP> (*q);
           i++;
         }
 
-      octave_map mtmp = octave_map::cat (1, ncols, map_list);
-      // Use 0x0 in place of all empty arrays to allow looser rules.
-      if (! mtmp.is_empty ())
-        map_row_list[j] = mtmp;
+      octave_map mtmp = octave_map::cat (-2, ncols, map_list);
+      map_row_list[j] = mtmp;
       j++;
     }
 
-  result = octave_map::cat (0, nrows, map_row_list);
+  result = octave_map::cat (-1, nrows, map_row_list);
 }
 
 template<class TYPE>
 static octave_value 
 do_single_type_concat (const dim_vector& dv,
                        tm_const& tmp)
 {
   TYPE result;
