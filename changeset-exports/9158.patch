# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1240983874 -7200
#      Wed Apr 29 07:44:34 2009 +0200
# Node ID 48ee8c73ff386dd3f5e500b31c0477bf0b51fcbf
# Parent  fce7315c1eee9b53046b36b3b3fdf7c751e5225f
info about ranges

diff --git a/doc/ChangeLog b/doc/ChangeLog
--- a/doc/ChangeLog
+++ b/doc/ChangeLog
@@ -1,8 +1,12 @@
+2009-04-29  Jaroslav Hajek  <highegg@gmail.com>
+
+	* interpreter/numbers.txi: Update info on ranges.
+
 2009-04-26  Rik  <rdrider0-list@yahoo.com>
 	* interpreter/arith.txi: Update section 17.3 (Trigonometry) of arith.txi
 
 2009-04-24  Rik  <rdrider0-list@yahoo.com>
 	* interpreter/arith.txi: Update section 17.2 (Complex Arithmetic) of
 	arith.txi
 	Use Tex in more of the doc strings for pretty printing in pdf format.
 
diff --git a/doc/interpreter/numbers.txi b/doc/interpreter/numbers.txi
--- a/doc/interpreter/numbers.txi
+++ b/doc/interpreter/numbers.txi
@@ -398,16 +398,35 @@ 80,000 bytes of storage on a typical 32-
 Note that the upper (or lower, if the increment is negative) bound on
 the range is not always included in the set of values, and that ranges
 defined by floating point values can produce surprising results because
 Octave uses floating point arithmetic to compute the values in the
 range.  If it is important to include the endpoints of a range and the
 number of elements is known, you should use the @code{linspace} function
 instead (@pxref{Special Utility Matrices}).
 
+When adding a scalar to a range, subtracting a scalar from it (or subtracting a
+range from a scalar) and multiplying by scalar, Octave will attempt to avoid
+unpacking the range and keep the result as a range, too, if it can determine
+that it is safe to do so. For instance, doing
+
+@example
+a = 2*(1:1e7) - 1;
+@end example
+
+will produce the same result as @samp{1:2:2e7-1}, but without ever forming a
+vector with ten million elements.
+
+Using zero as an increment in the colon notation, as @samp{1:0:1} is not
+allowed, because a division by zero would occur in determining the number of
+range elements. However, ranges with zero increment (i.e. all elements equal)
+are useful, especially in indexing, and Octave allows them to be constructed
+using the built-in function @dfn{ones}. Note that because a range must be a row
+vector, @samp{ones (1, 10)} produces a range, while @samp{ones (10, 1)} does not.
+
 When Octave parses a range expression, it examines the elements of the
 expression to determine whether they are all constants.  If they are, it
 replaces the range expression with a single range constant.
 
 @node Single Precision Data Types
 @section Single Precision Data Types
 
 Octave includes support for single precision data types, and most of the
