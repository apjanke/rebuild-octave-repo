# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1498058981 14400
#      Wed Jun 21 11:29:41 2017 -0400
# Node ID 2d4a7ae1f6cdc8637e5de5bc6f43233c750725cd
# Parent  a835c62d30019f024bdd7bc699ff215a3d432a48
store directory and package names in function when function is parsed

* symtab.h, symtab.cc (symbol_table::scope::stash_dir_name_for_subfunctions):
Delete obsolete function.

* lex.h, lex.ll (lexical_feedback::dir_name,
lexical_feedback::package_name): New data members.
(lexical_feedback::lexical_feedback): Initialize.
(lexical_feedback::reset): Reset.

* oct-parse.in.yy (base_parser::frob_function): Store directory and
package names in function when function is parsed.
(F__parse_file__): Perform tilde expansion on file name.

diff --git a/libinterp/corefcn/symtab.cc b/libinterp/corefcn/symtab.cc
--- a/libinterp/corefcn/symtab.cc
+++ b/libinterp/corefcn/symtab.cc
@@ -1801,28 +1801,16 @@ symbol_table::scope::find_subfunction (c
 
   if (m_parent)
     return m_parent->find_subfunction (name);
 
   return octave_value ();
 }
 
 void
-symbol_table::scope::stash_dir_name_for_subfunctions (const std::string& dir_name)
-{
-  for (const auto& nm_sf : m_subfunctions)
-    {
-      octave_user_function *fcn = nm_sf.second.user_function_value ();
-
-      if (fcn)
-        fcn->stash_dir_name (dir_name);
-    }
-}
-
-void
 symbol_table::scope::mark_subfunctions_in_scope_as_private (const std::string& class_name)
 {
   for (auto& nm_sf : m_subfunctions)
     {
       octave_function *fcn = nm_sf.second.function_value ();
 
       if (fcn)
         fcn->mark_as_private_function (class_name);
diff --git a/libinterp/corefcn/symtab.h b/libinterp/corefcn/symtab.h
--- a/libinterp/corefcn/symtab.h
+++ b/libinterp/corefcn/symtab.h
@@ -2001,18 +2001,16 @@ public:
       return m_subfunctions;
     }
 
     void erase_subfunctions (void)
     {
       m_subfunctions.clear ();
     }
 
-    void stash_dir_name_for_subfunctions (const std::string& dir_name);
-
     void mark_subfunctions_in_scope_as_private (const std::string& class_name);
 
     std::list<workspace_element> workspace_info (void) const;
 
     void dump (std::ostream& os);
 
     std::string name (void) const { return m_name; }
 
diff --git a/libinterp/parse-tree/lex.h b/libinterp/parse-tree/lex.h
--- a/libinterp/parse-tree/lex.h
+++ b/libinterp/parse-tree/lex.h
@@ -275,19 +275,20 @@ namespace octave
         reading_fcn_file (false), reading_script_file (false),
         reading_classdef_file (false),
         input_line_number (1), current_input_column (1),
         bracketflag (0), braceflag (0),
         looping (0), defining_func (0), looking_at_function_handle (0),
         block_comment_nesting_level (0), command_arg_paren_count (0),
         token_count (0), current_input_line (), comment_text (),
         help_text (), string_text (), string_line (0), string_column (0),
-        fcn_file_name (), fcn_file_full_name (), looking_at_object_index (),
-        parsed_function_name (), pending_local_variables (),
-        symtab_context (), nesting_level (), tokens ()
+        fcn_file_name (), fcn_file_full_name (), dir_name (),
+        package_name (), looking_at_object_index (), parsed_function_name (),
+        pending_local_variables (), symtab_context (), nesting_level (),
+        tokens ()
     {
       init ();
     }
 
     // No copying!
 
     lexical_feedback (const lexical_feedback&) = delete;
 
@@ -434,16 +435,22 @@ namespace octave
     int string_column;
 
     // Simple name of function file we are reading.
     std::string fcn_file_name;
 
     // Full name of file we are reading.
     std::string fcn_file_full_name;
 
+    // Directory name where this file was found.  May be relative.
+    std::string dir_name;
+
+    // Name of +package containing this file, if any.
+    std::string package_name;
+
     // if the front of the list is true, the closest paren, brace, or
     // bracket nesting is an index for an object.
     std::list<bool> looking_at_object_index;
 
     // if the top of the stack is true, then we've already seen the name
     // of the current function.  should only matter if
     // current_function_level > 0
     std::stack<bool> parsed_function_name;
diff --git a/libinterp/parse-tree/lex.ll b/libinterp/parse-tree/lex.ll
--- a/libinterp/parse-tree/lex.ll
+++ b/libinterp/parse-tree/lex.ll
@@ -2174,16 +2174,18 @@ namespace octave
     current_input_line = "";
     comment_text = "";
     help_text = "";
     string_text = "";
     string_line = 0;
     string_column = 0;
     fcn_file_name = "";
     fcn_file_full_name = "";
+    dir_name = "";
+    package_name = "";
     looking_at_object_index.clear ();
     looking_at_object_index.push_front (false);
 
     while (! parsed_function_name.empty ())
       parsed_function_name.pop ();
 
     pending_local_variables.clear ();
     symtab_context.clear ();
diff --git a/libinterp/parse-tree/oct-parse.in.yy b/libinterp/parse-tree/oct-parse.in.yy
--- a/libinterp/parse-tree/oct-parse.in.yy
+++ b/libinterp/parse-tree/oct-parse.in.yy
@@ -3320,16 +3320,18 @@ namespace octave
       }
 
     if (lexer.reading_fcn_file || lexer.reading_classdef_file || autoloading)
       {
         octave::sys::time now;
 
         fcn->stash_fcn_file_name (lexer.fcn_file_full_name);
         fcn->stash_fcn_file_time (now);
+        fcn->stash_dir_name (lexer.dir_name);
+        fcn->stash_package_name (lexer.package_name);
         fcn->mark_as_system_fcn_file ();
 
         if (fcn_file_from_relative_lookup)
           fcn->mark_relative ();
 
         if (curr_fcn_depth > 1 || parsing_subfunctions)
           {
             fcn->stash_parent_fcn_name (lexer.fcn_file_name);
@@ -4373,20 +4375,20 @@ static void
 safe_fclose (FILE *f)
 {
   if (f)
     fclose (static_cast<FILE *> (f));
 }
 
 static octave_value
 parse_fcn_file (const std::string& full_file, const std::string& file,
-                const std::string& dispatch_type,
-                const std::string& package_name,
-                bool require_file, bool force_script, bool autoload,
-                bool relative_lookup, const std::string& warn_for)
+                const std::string& dir_name, const std::string& dispatch_type,
+                const std::string& package_name, bool require_file,
+                bool force_script, bool autoload, bool relative_lookup,
+                const std::string& warn_for)
 {
   octave_value retval;
 
   octave::unwind_protect frame;
 
   octave_function *fcn_ptr = 0;
 
   // Open function file and parse.
@@ -4417,16 +4419,18 @@ parse_fcn_file (const std::string& full_
       parser.fcn_file_from_relative_lookup = relative_lookup;
 
       parser.lexer.force_script = force_script;
       parser.lexer.prep_for_file ();
       parser.lexer.parsing_class_method = ! dispatch_type.empty ();
 
       parser.lexer.fcn_file_name = file;
       parser.lexer.fcn_file_full_name = full_file;
+      parser.lexer.dir_name = dir_name;
+      parser.lexer.package_name = package_name;
 
       int status = parser.run ();
 
       fcn_ptr = parser.primary_fcn_ptr;
 
       if (status == 0)
         {
           if (parser.lexer.reading_classdef_file
@@ -4506,18 +4510,18 @@ namespace octave
           file = file.substr (pos+1);
       }
 
     if (! file.empty ())
       {
         symbol_found = true;
 
         octave_value ov_fcn
-          = parse_fcn_file (full_file, file, "", "", true, false, false, false,
-                            "");
+          = parse_fcn_file (full_file, file, "", "", "", true,
+                            false, false, false, "");
 
         if (ov_fcn.is_defined ())
           {
             octave_function *fcn = ov_fcn.function_value ();
 
             if (fcn)
               retval = fcn->doc_string ();
           }
@@ -4572,17 +4576,18 @@ namespace octave
     for (const auto& fcn_fname : autoload_map)
       if (nm == fcn_fname.second)
         names.append (fcn_fname.first);
 
     return names;
   }
 
   octave_value
-  load_fcn_from_file (const std::string& file_name, const std::string& dir_name,
+  load_fcn_from_file (const std::string& file_name,
+                      const std::string& dir_name,
                       const std::string& dispatch_type,
                       const std::string& package_name,
                       const std::string& fcn_name, bool autoload)
   {
     octave_value retval;
 
     octave::unwind_protect frame;
 
@@ -4630,19 +4635,19 @@ namespace octave
     else if (len > 4 && file.substr (len-4, len-1) == ".mex")
       {
         // Temporarily load m-file version of mex-file, if it exists,
         // to get the help-string to use.
 
         std::string doc_string;
 
         octave_value ov_fcn
-          = parse_fcn_file (file.substr (0, len - 2), nm, dispatch_type,
-                            package_name, false, autoload, autoload,
-                            relative_lookup, "");
+          = parse_fcn_file (file.substr (0, len - 2), nm, dir_name,
+                            dispatch_type, package_name, false,
+                            autoload, autoload, relative_lookup, "");
 
         if (ov_fcn.is_defined ())
           {
             octave_function *tmpfcn = ov_fcn.function_value ();
 
             if (tmpfcn)
               doc_string = tmpfcn->doc_string ();
           }
@@ -4654,37 +4659,19 @@ namespace octave
           {
             tmpfcn->document (doc_string);
 
             retval = octave_value (tmpfcn);
           }
       }
     else if (len > 2)
       {
-        retval = parse_fcn_file (file, nm, dispatch_type, package_name, true,
-                                 autoload, autoload, relative_lookup, "");
-      }
-
-    if (retval.is_defined ())
-      {
-        octave_function *tmpfcn = retval.function_value ();
-
-        if (tmpfcn)
-          {
-            tmpfcn->stash_dir_name (dir_name);
-            tmpfcn->stash_package_name (package_name);
-
-            if (tmpfcn->is_user_function ())
-              {
-                symbol_table::scope *scope = tmpfcn->scope ();
-
-                if (scope)
-                  scope->stash_dir_name_for_subfunctions (dir_name);
-              }
-          }
+        retval = parse_fcn_file (file, nm, dir_name, dispatch_type,
+                                 package_name, true, autoload, autoload,
+                                 relative_lookup, "");
       }
 
     return retval;
   }
 }
 
 DEFMETHOD (autoload, interp, args, ,
            doc: /* -*- texinfo -*-
@@ -4848,16 +4835,21 @@ namespace octave
     //
     // (for example).
 
     static std::map<std::string, int> source_call_depth;
 
     std::string file_full_name
       = octave::sys::file_ops::tilde_expand (file_name);
 
+    size_t pos
+      = file_full_name.find_last_of (octave::sys::file_ops::dir_sep_str ());
+
+    std::string dir_name = file_full_name.substr (0, pos);
+
     file_full_name = octave::sys::env::make_absolute (file_full_name);
 
     octave::unwind_protect frame;
 
     if (source_call_depth.find (file_full_name) == source_call_depth.end ())
       source_call_depth[file_full_name] = -1;
 
     frame.protect_var (source_call_depth[file_full_name]);
@@ -4917,19 +4909,19 @@ namespace octave
 
     // If no symbol of this name, or the symbol is for a different
     // file, load.
 
     if (ov_code.is_undefined ())
       {
         try
           {
-            ov_code = parse_fcn_file (file_full_name, file_name, "", "",
-                                      require_file, true, false, false,
-                                      warn_for);
+            ov_code = parse_fcn_file (file_full_name, file_name, dir_name,
+                                      "", "", require_file, true, false,
+                                      false, warn_for);
           }
         catch (octave::execution_exception& e)
           {
             error (e, "source: error sourcing file '%s'",
                    file_full_name.c_str ());
           }
       }
 
@@ -5821,33 +5813,41 @@ Undocumented internal function.
 
   int nargin = args.length ();
 
   if (nargin < 1 || nargin > 2)
     print_usage ();
 
   std::string file = args(0).xstring_value ("__parse_file__: expecting filename as argument");
 
-  std::string full_file = octave::sys::env::make_absolute (file);
+  std::string full_file
+      = octave::sys::file_ops::tilde_expand (file);
+
+  full_file = octave::sys::env::make_absolute (full_file);
+
+  std::string dir_name;
 
   size_t file_len = file.length ();
 
   if ((file_len > 4 && file.substr (file_len-4) == ".oct")
       || (file_len > 4 && file.substr (file_len-4) == ".mex")
       || (file_len > 2 && file.substr (file_len-2) == ".m"))
     {
       file = octave::sys::env::base_pathname (file);
       file = file.substr (0, file.find_last_of ('.'));
 
       size_t pos = file.find_last_of (octave::sys::file_ops::dir_sep_str ());
       if (pos != std::string::npos)
-        file = file.substr (pos+1);
+        {
+          dir_name = file.substr (0, pos);
+          file = file.substr (pos+1);
+        }
     }
 
   if (nargin == 2)
     octave_stdout << "parsing " << full_file << std::endl;
 
   octave_value ov_fcn
-    = parse_fcn_file (full_file, file, "", "", true, false, false,
-                      false, "__parse_file__");
+    = parse_fcn_file (full_file, file, dir_name, "", "", true, false,
+                      false, false, "__parse_file__");
 
   return retval;
 }
