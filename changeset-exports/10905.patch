# HG changeset patch
# User Rik <octave@nomad.inbox5.com>
# Date 1282420954 25200
#      Sat Aug 21 13:02:34 2010 -0700
# Node ID 9ee5a0a1b93df20fa335d0552efbf7931f8dd008
# Parent  69a2e9ccb2fb53cf02d9a1be55640ac90e892722
Return permutation vector from QR as a row, not column, vector.
Fixes Bug #30832.

diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,14 @@
+2010-08-21  Rik <octave@nomad.inbox5.com>
+
+	* CmplxQRP.cc, CmplxQRP.h, dbleQRP.cc, dbleQRP.h, fCmplxQRP.cc,
+	fCmplxQRP.h, floatQRP.cc, floatQRP.h: Declare Pvec as RowVector,
+	not ColumnVector.  Bug #30832.
+
 2010-08-18  Jaroslav Hajek  <highegg@gmail.com>
 
 	* mx-inlines.cc (mx_inline_all_finite): New check.
 	* Sparse-op-defs.h (SPARSE_SMS_BIN_OP_1, SPARSE_SMS_BIN_OP_2,
 	SPARSE_SSM_BIN_OP_1, SPARSE_SSM_BIN_OP_2): Use unchecked access where
 	appropriate.
 	(SPARSE_SMM_BIN_OP_1, SPARSE_MSM_BIN_OP_1): Simplify.
 	(SPARSE_SMM_BIN_OP_2, SPARSE_MSM_BIN_OP_2): Use optimized code path
diff --git a/liboctave/CmplxQRP.cc b/liboctave/CmplxQRP.cc
--- a/liboctave/CmplxQRP.cc
+++ b/liboctave/CmplxQRP.cc
@@ -92,15 +92,15 @@ ComplexQRP::init (const ComplexMatrix& a
 
   jpvt -= static_cast<octave_idx_type> (1);
   p = PermMatrix (jpvt, true);
 
 
   form (n, afact, tau, qr_type);
 }
 
-ColumnVector
+RowVector
 ComplexQRP::Pvec (void) const
 {
   Array<double> pa (p.pvec ());
-  ColumnVector pv (MArray<double> (pa) + 1.0);
+  RowVector pv (MArray<double> (pa) + 1.0);
   return pv;
 }
diff --git a/liboctave/CmplxQRP.h b/liboctave/CmplxQRP.h
--- a/liboctave/CmplxQRP.h
+++ b/liboctave/CmplxQRP.h
@@ -53,17 +53,17 @@ public:
     }
 
   ~ComplexQRP (void) { }
 
   void init (const ComplexMatrix&, qr_type_t = qr_type_std);
 
   PermMatrix P (void) const { return p; }
 
-  ColumnVector Pvec (void) const;
+  RowVector Pvec (void) const;
 
   friend std::ostream&  operator << (std::ostream&, const ComplexQRP&);
 
 private:
 
   PermMatrix p;
 };
 
diff --git a/liboctave/dbleQRP.cc b/liboctave/dbleQRP.cc
--- a/liboctave/dbleQRP.cc
+++ b/liboctave/dbleQRP.cc
@@ -90,15 +90,15 @@ QRP::init (const Matrix& a, qr_type_t qr
 
   jpvt -= static_cast<octave_idx_type> (1);
   p = PermMatrix (jpvt, true);
 
 
   form (n, afact, tau, qr_type);
 }
 
-ColumnVector
+RowVector
 QRP::Pvec (void) const
 {
   Array<double> pa (p.pvec ());
-  ColumnVector pv (MArray<double> (pa) + 1.0);
+  RowVector pv (MArray<double> (pa) + 1.0);
   return pv;
 }
diff --git a/liboctave/dbleQRP.h b/liboctave/dbleQRP.h
--- a/liboctave/dbleQRP.h
+++ b/liboctave/dbleQRP.h
@@ -54,17 +54,17 @@ public:
     }
 
   ~QRP (void) { }
 
   void init (const Matrix&, qr_type_t = qr_type_std);
 
   PermMatrix P (void) const { return p; }
 
-  ColumnVector Pvec (void) const;
+  RowVector Pvec (void) const;
 
   friend std::ostream&  operator << (std::ostream&, const QRP&);
 
 protected:
 
   PermMatrix p;
 };
 
diff --git a/liboctave/fCmplxQRP.cc b/liboctave/fCmplxQRP.cc
--- a/liboctave/fCmplxQRP.cc
+++ b/liboctave/fCmplxQRP.cc
@@ -92,15 +92,15 @@ FloatComplexQRP::init (const FloatComple
 
   jpvt -= static_cast<octave_idx_type> (1);
   p = PermMatrix (jpvt, true);
 
 
   form (n, afact, tau, qr_type);
 }
 
-FloatColumnVector
+FloatRowVector 
 FloatComplexQRP::Pvec (void) const
 {
   Array<float> pa (p.pvec ());
-  FloatColumnVector pv (MArray<float> (pa) + 1.0f);
+  FloatRowVector pv (MArray<float> (pa) + 1.0f);
   return pv;
 }
diff --git a/liboctave/fCmplxQRP.h b/liboctave/fCmplxQRP.h
--- a/liboctave/fCmplxQRP.h
+++ b/liboctave/fCmplxQRP.h
@@ -53,17 +53,17 @@ public:
     }
 
   ~FloatComplexQRP (void) { }
 
   void init (const FloatComplexMatrix&, qr_type_t = qr_type_std);
 
   PermMatrix P (void) const { return p; }
 
-  FloatColumnVector Pvec (void) const;
+  FloatRowVector Pvec (void) const;
 
   friend std::ostream&  operator << (std::ostream&, const FloatComplexQRP&);
 
 private:
 
   PermMatrix p;
 };
 
diff --git a/liboctave/floatQRP.cc b/liboctave/floatQRP.cc
--- a/liboctave/floatQRP.cc
+++ b/liboctave/floatQRP.cc
@@ -90,15 +90,15 @@ FloatQRP::init (const FloatMatrix& a, qr
 
   jpvt -= static_cast<octave_idx_type> (1);
   p = PermMatrix (jpvt, true);
 
 
   form (n, afact, tau, qr_type);
 }
 
-FloatColumnVector
+FloatRowVector 
 FloatQRP::Pvec (void) const
 {
   Array<float> pa (p.pvec ());
-  FloatColumnVector pv (MArray<float> (pa) + 1.0f);
+  FloatRowVector pv (MArray<float> (pa) + 1.0f);
   return pv;
 }
diff --git a/liboctave/floatQRP.h b/liboctave/floatQRP.h
--- a/liboctave/floatQRP.h
+++ b/liboctave/floatQRP.h
@@ -54,17 +54,17 @@ public:
     }
 
   ~FloatQRP (void) { }
 
   void init (const FloatMatrix&, qr_type_t = qr_type_std);
 
   PermMatrix P (void) const { return p; }
 
-  FloatColumnVector Pvec (void) const;
+  FloatRowVector Pvec (void) const;
 
   friend std::ostream&  operator << (std::ostream&, const FloatQRP&);
 
 protected:
 
   PermMatrix p;
 };
 
