# HG changeset patch
# User Rik <rik@octave.org>
# Date 1479270325 28800
#      Tue Nov 15 20:25:25 2016 -0800
# Node ID 4a31bd79d7e8d87403d07c8abb8503e88831f2b2
# Parent  ff1a99201ca98718a4a73625326a9129c0cc2439
maint: Correct spacing around if and opening parentheses of condition.

* cellfun.cc (Fcellfun, Farrayfun): Remove double space to opening parenthesis.

* CMatrix.cc, fCMatrix.cc (rcond): Remove double space to opening parenthesis.

diff --git a/libinterp/corefcn/cellfun.cc b/libinterp/corefcn/cellfun.cc
--- a/libinterp/corefcn/cellfun.cc
+++ b/libinterp/corefcn/cellfun.cc
@@ -566,19 +566,19 @@ v = cellfun (@@det, a); # faster
 
           const octave_value_list tmp
             = get_output_list (count, nargout, inputlist, func,
                                error_handler);
 
           if (nargout > 0 && tmp.length () < nargout)
             error ("cellfun: function returned fewer than nargout values");
 
-          if  (nargout > 0
-               || (nargout == 0
-                   && tmp.length () > 0 && tmp(0).is_defined ()))
+          if (nargout > 0
+              || (nargout == 0
+                  && tmp.length () > 0 && tmp(0).is_defined ()))
             {
               int num_to_copy = tmp.length ();
 
               if (num_to_copy > nargout1)
                 num_to_copy = nargout1;
 
               if (count == 0)
                 {
@@ -647,19 +647,19 @@ v = cellfun (@@det, a); # faster
 
           const octave_value_list tmp
             = get_output_list (count, nargout, inputlist, func,
                                error_handler);
 
           if (nargout > 0 && tmp.length () < nargout)
             error ("cellfun: function returned fewer than nargout values");
 
-          if  (nargout > 0
-               || (nargout == 0
-                   && tmp.length () > 0 && tmp(0).is_defined ()))
+          if (nargout > 0
+              || (nargout == 0
+                  && tmp.length () > 0 && tmp(0).is_defined ()))
             {
               int num_to_copy = tmp.length ();
 
               if (num_to_copy > nargout1)
                 num_to_copy = nargout1;
 
               if (num_to_copy > 0)
                 have_some_output = true;
@@ -1250,19 +1250,19 @@ arrayfun (@@str2num, [1234],
               const octave_value_list tmp
                 = get_output_list (count, nargout, inputlist, func,
                                    error_handler);
 
               if (nargout > 0 && tmp.length () < nargout)
                 error_with_id ("Octave:invalid-fun-call",
                                "arrayfun: function returned fewer than nargout values");
 
-              if  (nargout > 0
-                   || (nargout == 0
-                       && tmp.length () > 0 && tmp(0).is_defined ()))
+              if (nargout > 0
+                  || (nargout == 0
+                      && tmp.length () > 0 && tmp(0).is_defined ()))
                 {
                   int num_to_copy = tmp.length ();
 
                   if (num_to_copy > nargout1)
                     num_to_copy = nargout1;
 
                   if (count == 0)
                     {
@@ -1342,19 +1342,19 @@ arrayfun (@@str2num, [1234],
               const octave_value_list tmp
                 = get_output_list (count, nargout, inputlist, func,
                                    error_handler);
 
               if (nargout > 0 && tmp.length () < nargout)
                 error_with_id ("Octave:invalid-fun-call",
                                "arrayfun: function returned fewer than nargout values");
 
-              if  (nargout > 0
-                   || (nargout == 0
-                       && tmp.length () > 0 && tmp(0).is_defined ()))
+              if (nargout > 0
+                  || (nargout == 0
+                      && tmp.length () > 0 && tmp(0).is_defined ()))
                 {
                   int num_to_copy = tmp.length ();
 
                   if (num_to_copy > nargout1)
                     num_to_copy = nargout1;
 
                   if (num_to_copy > 0)
                     have_some_output = true;
diff --git a/liboctave/array/CMatrix.cc b/liboctave/array/CMatrix.cc
--- a/liboctave/array/CMatrix.cc
+++ b/liboctave/array/CMatrix.cc
@@ -1502,17 +1502,17 @@ ComplexMatrix::rcond (MatrixType &mattyp
                                      F77_DBLE_CMPLX_ARG (pz), prz, info
                                      F77_CHAR_ARG_LEN (1)
                                      F77_CHAR_ARG_LEN (1)
                                      F77_CHAR_ARG_LEN (1)));
 
           if (info != 0)
             rcon = 0;
         }
-      else if  (typ == MatrixType::Permuted_Upper)
+      else if (typ == MatrixType::Permuted_Upper)
         (*current_liboctave_error_handler)
           ("permuted triangular matrix not implemented");
       else if (typ == MatrixType::Lower)
         {
           const Complex *tmp_data = fortran_vec ();
           octave_idx_type info = 0;
           char norm = '1';
           char uplo = 'L';
diff --git a/liboctave/array/fCMatrix.cc b/liboctave/array/fCMatrix.cc
--- a/liboctave/array/fCMatrix.cc
+++ b/liboctave/array/fCMatrix.cc
@@ -1501,17 +1501,17 @@ FloatComplexMatrix::rcond (MatrixType &m
                                      F77_CMPLX_ARG (pz), prz, info
                                      F77_CHAR_ARG_LEN (1)
                                      F77_CHAR_ARG_LEN (1)
                                      F77_CHAR_ARG_LEN (1)));
 
           if (info != 0)
             rcon = 0;
         }
-      else if  (typ == MatrixType::Permuted_Upper)
+      else if (typ == MatrixType::Permuted_Upper)
         (*current_liboctave_error_handler)
           ("permuted triangular matrix not implemented");
       else if (typ == MatrixType::Lower)
         {
           const FloatComplex *tmp_data = fortran_vec ();
           octave_idx_type info = 0;
           char norm = '1';
           char uplo = 'L';
