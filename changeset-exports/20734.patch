# HG changeset patch
# User Rik <rik@octave.org>
# Date 1448248542 28800
#      Sun Nov 22 19:15:42 2015 -0800
# Node ID e44d904ac52506042d1390c650a98b28a75cbb6b
# Parent  c6464d78da6916dd32be2a7878e741649808bf8a
Add new functions deg2rad and rad2deg to core (bug #46340).

* NEWS: Announce new functions.

* scripts/general/deg2rad.m, scripts/general/rad2deg.m: New functions.

* scripts/general/module.mk: Add new functions to build system.

* arith.txi: Add new functions to Trigonometry subchapter of manual.

diff --git a/NEWS b/NEWS
--- a/NEWS
+++ b/NEWS
@@ -55,17 +55,18 @@ Summary of important user-visible change
  ** The quadl function now uses an absolute, rather than relative, tolerance
     for Matlab compatibility.  The default tolerance is 1e-6 which may result
     in lower precision results than previous versions of Octave which used
     eps as the relative tolerance.  The quadl function has also been extended
     to return a second output with the total number of function evaluations.
 
  ** Other new functions added in 4.2:
 
-      psi
+      psi         rad2deg
+      deg2rad
       odeset
       odeget
       ode45
 
  ** Deprecated functions.
 
     The following functions have been deprecated in Octave 4.2 and will
     be removed from Octave 4.6 (or whatever version is the second major
diff --git a/doc/interpreter/arith.txi b/doc/interpreter/arith.txi
--- a/doc/interpreter/arith.txi
+++ b/doc/interpreter/arith.txi
@@ -106,22 +106,18 @@ defined as @code{sqrt (-1)}.
 Octave provides the following trigonometric functions where angles are
 specified in radians.  To convert from degrees to radians multiply by
 @tex
 $\pi/180$
 @end tex
 @ifnottex
 @code{pi/180}
 @end ifnottex
-(e.g., @code{sin (30 * pi/180)} returns the sine of 30 degrees).  As
-an alternative, Octave provides a number of trigonometric functions
-which work directly on an argument specified in degrees.  These functions
-are named after the base trigonometric function with a @samp{d} suffix.  For
-example, @code{sin} expects an angle in radians while @code{sind} expects an
-angle in degrees.
+or use the @code{deg2rad} function.  For example, @code{sin (30 * pi/180)}
+returns the sine of 30 degrees.  As an alternative, Octave provides a number of trigonometric functions which work directly on an argument specified in degrees.  These functions are named after the base trigonometric function with a @samp{d} suffix.  As an example, @code{sin} expects an angle in radians while @code{sind} expects an angle in degrees.
 
 Octave uses the C library trigonometric functions.  It is expected that these
 functions are defined by the ISO/IEC 9899 Standard.  This Standard is available
 at: @url{http://www.open-std.org/jtc1/sc22/wg14/www/docs/n1124.pdf}.
 Section F.9.1 deals with the trigonometric functions.  The behavior of most of
 the functions is relatively straightforward.  However, there are some
 exceptions to the standard behavior.  Many of the exceptions involve the
 behavior for -0.  The most complex case is atan2.  Octave exactly implements
@@ -131,16 +127,19 @@ the behavior given in the Standard.  Inc
 @end tex
 @ifnottex
 @code{atan2(+- 0, 0)} returns @code{+- pi}.
 @end ifnottex
 
 It should be noted that @sc{matlab} uses different definitions which apparently
 do not distinguish -0.
 
+@DOCSTRING(deg2rad)
+@DOCSTRING(rad2deg)
+
 @DOCSTRING(sin)
 @DOCSTRING(cos)
 @DOCSTRING(tan)
 @DOCSTRING(sec)
 @DOCSTRING(csc)
 @DOCSTRING(cot)
 
 @DOCSTRING(asin)
diff --git a/scripts/general/deg2rad.m b/scripts/general/deg2rad.m
new file mode 100644
--- /dev/null
+++ b/scripts/general/deg2rad.m
@@ -0,0 +1,67 @@
+## Copyright (C) 2015 Rik Wehbring
+##
+## This file is part of Octave.
+##
+## Octave is free software; you can redistribute it and/or modify it
+## under the terms of the GNU General Public License as published by
+## the Free Software Foundation; either version 3 of the License, or (at
+## your option) any later version.
+##
+## Octave is distributed in the hope that it will be useful, but
+## WITHOUT ANY WARRANTY; without even the implied warranty of
+## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+## General Public License for more details.
+##
+## You should have received a copy of the GNU General Public License
+## along with Octave; see the file COPYING.  If not, see
+## <http://www.gnu.org/licenses/>.
+
+## -*- texinfo -*-
+## @deftypefn {Function File} {@var{rad} =} deg2rad (@var{deg})
+##
+## Convert degrees to radians.
+##
+## The input @var{deg} must be a scalar, vector, or N-dimensional array of
+## double or single floating point values.  @var{deg} may be complex in which
+## case the real and imaginary components are converted separately.
+##
+## The output @var{rad} is the same size and shape as @var{deg} with degrees
+## converted to radians using the conversion constant @code{pi/180}.
+##
+## Example:
+##
+## @example
+## @group
+## deg2rad ([0, 90, 180, 270, 360])
+##   @result{}  0.00000   1.57080   3.14159   4.71239   6.28319
+## @end group
+## @end example
+## @seealso{rad2deg}
+## @end deftypefn
+
+function rad = deg2rad (deg)
+
+  if (nargin != 1)
+    print_usage ();
+  endif
+
+  if (! isfloat (deg))
+    error ("deg2rad: DEG must be a floating point class (double or single)");
+  endif
+
+  rad = deg * (pi / 180);
+
+endfunction
+
+
+%!assert (deg2rad (0), 0)
+%!assert (deg2rad (90), pi/2)
+%!assert (deg2rad (180), pi)
+%!assert (deg2rad ([0, 90, 180, 270, 360]), pi*[0, 1/2, 1, 3/2, 2])
+
+## Test input validation
+%!error deg2rad ()
+%!error deg2rad (1, 2)
+%!error <DEG must be a floating point class> deg2rad (uint8 (1))
+%!error <DEG must be a floating point class> deg2rad ("A")
+
diff --git a/scripts/general/module.mk b/scripts/general/module.mk
--- a/scripts/general/module.mk
+++ b/scripts/general/module.mk
@@ -21,16 +21,17 @@ scripts_general_FCN_FILES = \
   scripts/general/chop.m \
   scripts/general/circshift.m \
   scripts/general/common_size.m \
   scripts/general/cplxpair.m \
   scripts/general/cumtrapz.m \
   scripts/general/curl.m \
   scripts/general/dblquad.m \
   scripts/general/deal.m \
+  scripts/general/deg2rad.m \
   scripts/general/del2.m \
   scripts/general/display.m \
   scripts/general/divergence.m \
   scripts/general/fieldnames.m \
   scripts/general/flip.m \
   scripts/general/flipdim.m \
   scripts/general/fliplr.m \
   scripts/general/flipud.m \
@@ -60,16 +61,17 @@ scripts_general_FCN_FILES = \
   scripts/general/postpad.m \
   scripts/general/prepad.m \
   scripts/general/profexplore.m \
   scripts/general/profile.m \
   scripts/general/profshow.m \
   scripts/general/quadgk.m \
   scripts/general/quadl.m \
   scripts/general/quadv.m \
+  scripts/general/rad2deg.m \
   scripts/general/randi.m \
   scripts/general/rat.m \
   scripts/general/repmat.m \
   scripts/general/rot90.m \
   scripts/general/rotdim.m \
   scripts/general/saveobj.m \
   scripts/general/shift.m \
   scripts/general/shiftdim.m \
diff --git a/scripts/general/rad2deg.m b/scripts/general/rad2deg.m
new file mode 100644
--- /dev/null
+++ b/scripts/general/rad2deg.m
@@ -0,0 +1,67 @@
+## Copyright (C) 2015 Rik Wehbring
+##
+## This file is part of Octave.
+##
+## Octave is free software; you can redistribute it and/or modify it
+## under the terms of the GNU General Public License as published by
+## the Free Software Foundation; either version 3 of the License, or (at
+## your option) any later version.
+##
+## Octave is distributed in the hope that it will be useful, but
+## WITHOUT ANY WARRANTY; without even the implied warranty of
+## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+## General Public License for more details.
+##
+## You should have received a copy of the GNU General Public License
+## along with Octave; see the file COPYING.  If not, see
+## <http://www.gnu.org/licenses/>.
+
+## -*- texinfo -*-
+## @deftypefn {Function File} {@var{deg} =} rad2deg (@var{rad})
+##
+## Convert radians to degrees.
+##
+## The input @var{rad} must be a scalar, vector, or N-dimensional array of
+## double or single floating point values.  @var{rad} may be complex in which
+## case the real and imaginary components are converted separately.
+##
+## The output @var{deg} is the same size and shape as @var{rad} with radians
+## converted to degrees using the conversion constant @code{180/pi}.
+##
+## Example:
+##
+## @example
+## @group
+## rad2deg ([0, pi/2, pi, 3/2*pi, 2*pi])
+##   @result{}  0    90   180   270   360
+## @end group
+## @end example
+## @seealso{deg2rad}
+## @end deftypefn
+
+function deg = rad2deg (rad)
+
+  if (nargin != 1)
+    print_usage ();
+  endif
+
+  if (! isfloat (rad))
+    error ("rad2deg: RAD must be a floating point class (double or single)");
+  endif
+
+  deg = rad * (180/pi);
+
+endfunction
+
+
+%!assert (rad2deg (0), 0)
+%!assert (rad2deg (pi/2), 90)
+%!assert (rad2deg (pi), 180)
+%!assert (rad2deg (pi*[0, 1/2, 1, 3/2, 2]), [0, 90, 180, 270, 360])
+
+## Test input validation
+%!error rad2deg ()
+%!error rad2deg (1, 2)
+%!error <RAD must be a floating point class> rad2deg (uint8 (1))
+%!error <RAD must be a floating point class> rad2deg ("A")
+
