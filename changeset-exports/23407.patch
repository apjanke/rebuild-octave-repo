# HG changeset patch
# User Andreas Stahel <Andreas.Stahel@bfh.ch>
# Date 1492509870 -7200
#      Tue Apr 18 12:04:30 2017 +0200
# Node ID e265ae9e7a6ca04b704bc44f0bee10281600dce5
# Parent  aab07d7e98be8c472ee0f0b511bb8a1b39b1ac86
Fix hermite cubic interpolation in ode23

* scripts/ode/private/runge_kutta_interpolate.m : fix indices of derivatives being
  passed to the cubic interpolation algorithm.

* scripts/ode/ode23.m : add a test to check for accuracy of interpolated values.

diff --git a/scripts/ode/ode23.m b/scripts/ode/ode23.m
--- a/scripts/ode/ode23.m
+++ b/scripts/ode/ode23.m
@@ -408,16 +408,20 @@ endfunction
 %!test  # AbsTol option
 %! opt = odeset ("AbsTol", 1e-5);
 %! sol = ode23 (@fpol, [0 2], [2 0], opt);
 %! assert ([sol.x(end); sol.y(:,end)], [2; fref'], 1e-3);
 %!test  # AbsTol and RelTol option
 %! opt = odeset ("AbsTol", 1e-8, "RelTol", 1e-8);
 %! sol = ode23 (@fpol, [0 2], [2 0], opt);
 %! assert ([sol.x(end); sol.y(:,end)], [2; fref'], 1e-3);
+%!test # hermite_cubic_interpolation
+%! opt = odeset ("RelTol", 1e-8, "NormControl", "on");
+%! [t,sol] = ode23(@(t,x)[x(2);x(1)],linspace(0,1),[1;0],opt);
+%! assert(max(abs(sol(:,1)-cosh(t))),0,1e-6)
 %!test  # RelTol and NormControl option -- higher accuracy
 %! opt = odeset ("RelTol", 1e-8, "NormControl", "on");
 %! sol = ode23 (@fpol, [0 2], [2 0], opt);
 %! assert ([sol.x(end); sol.y(:,end)], [2; fref'], 1e-4);
 %!test  # Keeps initial values while integrating
 %! opt = odeset ("NonNegative", 2);
 %! sol = ode23 (@fpol, [0 2], [2 0], opt);
 %! assert ([sol.x(end); sol.y(:,end)], [2; 2; 0], 1e-1);
diff --git a/scripts/ode/private/runge_kutta_interpolate.m b/scripts/ode/private/runge_kutta_interpolate.m
--- a/scripts/ode/private/runge_kutta_interpolate.m
+++ b/scripts/ode/private/runge_kutta_interpolate.m
@@ -67,18 +67,18 @@ endfunction
 ## The function below can be used in an ODE solver to interpolate the
 ## solution at the time t_out using 3rd order Hermite interpolation.
 function x_out = hermite_cubic_interpolation (t, x, der, t_out)
 
   dt = (t(2) - t(1));
   s = (t_out - t(1)) / dt;
   x_out = ((1 + 2*s) .* (1-s).^2) .* x(:,1) + ...
           (s .* (1-s).^2 * dt   ) .* der(:,1) + ...
-          ((3-2*s) .* s.^2      ) .* x(:,2) + ...
-          ((s-1) .* s.^2   * dt ) .* der(:,2);
+          ((3-2*s) .* s.^2      ) .* x(:,end) + ...
+          ((s-1) .* s.^2   * dt ) .* der(:,end);
 
 endfunction
 
 ## The function below can be used in an ODE solver to interpolate the
 ## solution at the time t_out using 4th order Hermite interpolation.
 function x_out = hermite_quartic_interpolation (t, x, der, t_out)
 
   persistent coefs_u_half = ...
