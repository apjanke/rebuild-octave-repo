# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1382988740 14400
#      Mon Oct 28 15:32:20 2013 -0400
# Node ID 136a9e27256ed54fe554e8953be03fe5205c8288
# Parent  d029ef208e4a0c9e1ab862310856c3213f40d62d
automatically locate wrapper binary on Windows systems (bug #40381)

* main.in.cc (w32_get_octave_home): New function.
(get_octave_home): Call it if OCTAVE_HOME is not found in the
environment.

diff --git a/src/main.in.cc b/src/main.in.cc
--- a/src/main.in.cc
+++ b/src/main.in.cc
@@ -37,16 +37,76 @@ along with Octave; see the file COPYING.
 
 #include <algorithm>
 #include <iostream>
 #include <string>
 
 // From gnulib, so OK for Windows too.
 #include <unistd.h>
 
+#if defined (__WIN32__) && ! defined (_POSIX_VERSION)
+
+#define WIN32_LEAN_AND_MEAN
+#include <tlhelp32.h>
+
+static std::string
+w32_get_octave_home (void)
+{
+  std::string retval;
+
+  std::string bin_dir;
+
+  HANDLE h = CreateToolhelp32Snapshot (TH32CS_SNAPMODULE
+#ifdef TH32CS_SNAPMODULE32
+                                       | TH32CS_SNAPMODULE32
+#endif
+                                       , 0);
+
+  if (h != INVALID_HANDLE_VALUE)
+    {
+      MODULEENTRY32 mod_info;
+
+      ZeroMemory (&mod_info, sizeof (mod_info));
+      mod_info.dwSize = sizeof (mod_info);
+
+      if (Module32First (h, &mod_info))
+        {
+          do
+            {
+              std::string mod_name (mod_info.szModule);
+
+              if (mod_name.find ("octave") != std::string::npos)
+                {
+                  bin_dir = mod_info.szExePath;
+
+                  if (bin_dir[bin_dir.length () - 1] != '\\')
+                    bin_dir.append (1, '\\');
+
+                  break;
+                }
+            }
+          while (Module32Next (h, &mod_info));
+       }
+
+      CloseHandle (h);
+    }
+
+  if (! bin_dir.empty ())
+    {
+      size_t pos = bin_dir.rfind ("\\bin\\");
+
+      if (pos != std::string::npos)
+        retval = bin_dir.substr (0, pos);
+    }
+
+  return retval;
+}
+
+#endif
+
 #if ! defined (__WIN32__) && ! defined (__CYGWIN__)
 
 #include <sys/types.h>
 #include <signal.h>
 #include <fcntl.h>
 
 // This is a liboctave header, but it doesn't include any other Octave
 // headers or declare any functions that are defined in liboctave.
@@ -257,16 +317,21 @@ octave_getenv (const std::string& name)
   return value ? value : "";
 }
 
 static std::string
 get_octave_home (void)
 {
   std::string oh = octave_getenv ("OCTAVE_HOME");
 
+#if defined (__WIN32__) && ! defined (_POSIX_VERSION)
+  if (oh.empty ())
+    oh = w32_get_octave_home ();
+#endif
+
   return oh.empty () ? std::string (OCTAVE_PREFIX) : oh;
 }
 
 static std::string
 subst_octave_home (const std::string& s)
 {
   std::string retval;
 
