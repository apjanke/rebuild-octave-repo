# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1227618295 -3600
#      Tue Nov 25 14:04:55 2008 +0100
# Node ID 8302788f09dbc901e58148d5e07d3979ae39a343
# Parent  c777f3ce02d87e6ddd0818b0b3a02efd82c502b9
fix empty matrix handling in switch statement

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,15 @@
+2008-11-25  Jaroslav Hajek  <highegg@gmail.com>
+
+	* ov.cc (octave_value::is_equal): New member function.
+	* ov.h: Declare it.
+	* pt-select.cc (tree_switch_case::label_matches): Call
+	octave_value::is_equal.
+
 2008-11-25  Jaroslav Hajek  <highegg@gmail.com>
 
 	* ov-base.h (octave_base_value::type_conv_info): New class.
 	* ov-base.h, ov-bool-mat.cc, ov-bool-mat.h, ov-bool-sparse.cc,
 	ov-bool-sparse.h, ov-bool.cc, ov-bool.h, ov-complex.cc, ov-complex.h,
 	ov-cx-mat.cc, ov-cx-mat.h, ov-null-mat.cc, ov-null-mat.h,
 	ov-range.cc, ov-range.h, ov-re-mat.cc, ov-re-mat.h, ov-scalar.cc,
 	ov-scalar.h, ov-str-mat.cc, ov-str-mat.h, ov.h:
diff --git a/src/ov.cc b/src/ov.cc
--- a/src/ov.cc
+++ b/src/ov.cc
@@ -1218,16 +1218,35 @@ octave_value::size (void) const
   Matrix retval (1, n_dims);
 
   while (n_dims--)
     retval(n_dims) = dv(n_dims);
 
   return retval;
 }
 
+bool
+octave_value::is_equal (const octave_value& test) const
+{
+  bool retval = false;
+
+  // If there is no op_eq for these types, we can't compare values.
+
+  if (rows () == test.rows () && columns () == test.columns ())
+    {
+      octave_value tmp = do_binary_op (octave_value::op_eq, *this, test);
+
+      // Empty array also means a match.
+      if (! error_state && tmp.is_defined ())
+	retval = tmp.is_true () || tmp.is_empty ();
+    }
+
+  return retval;
+}
+
 Cell
 octave_value::cell_value (void) const
 {
   return rep->cell_value ();
 }
 
 // Define the idx_type_value function here instead of in ov.h to avoid
 // needing definitions for the SIZEOF_X macros in ov.h.
diff --git a/src/ov.h b/src/ov.h
--- a/src/ov.h
+++ b/src/ov.h
@@ -569,16 +569,20 @@ public:
   bool valid_as_zero_index (void) const
     { return rep->valid_as_zero_index (); }
 
   // Does this constant correspond to a truth value?
 
   bool is_true (void) const
     { return rep->is_true (); }
 
+  // Do two constants match (in a switch statement)?
+  
+  bool is_equal (const octave_value&) const;
+
   // Are the dimensions of this constant zero by zero?
 
   bool is_zero_by_zero (void) const
     { return (rows () == 0 && columns () == 0); }
 
   bool is_constant (void) const
     { return rep->is_constant (); }
 
diff --git a/src/pt-select.cc b/src/pt-select.cc
--- a/src/pt-select.cc
+++ b/src/pt-select.cc
@@ -147,64 +147,43 @@ tree_if_command::accept (tree_walker& tw
 tree_switch_case::~tree_switch_case (void)
 {
   delete label;
   delete list;
   delete lead_comm;
 }
 
 
-// Compare two octave values, returning true if equal, false if not
-// FIXME --- should be member or friend of octave_value class.
-
-static bool
-equal (const octave_value& val, const octave_value& test)
-{
-  bool retval = false;
-
-  // If there is no op_eq for these types, we can't compare values.
-
-  if (val.rows () == test.rows () && val.columns () == test.columns ())
-    {
-      octave_value tmp = do_binary_op (octave_value::op_eq, val, test);
-
-      if (! error_state && tmp.is_defined ())
-	retval = tmp.is_true ();
-    }
-
-  return retval;
-}
-
 bool
 tree_switch_case::label_matches (const octave_value& val)
 {
   octave_value label_value = label->rvalue ();
 
   if (! error_state && label_value.is_defined() )
     {
       if (label_value.is_cell ())
 	{
 	  Cell cell (label_value.cell_value ());
 
 	  for (octave_idx_type i = 0; i < cell.rows (); i++)
 	    {
 	      for (octave_idx_type j = 0; j < cell.columns (); j++)
 		{
-		  bool match = equal (val, cell(i,j));
+		  bool match = val.is_equal (cell(i,j));
 
 		  if (error_state)
 		    return false;
 		  else if (match)
 		    return true;
 		}
 	    }
 	}
       else
 	{
-	  bool match = equal (val, label_value);
+	  bool match = val.is_equal (label_value);
 
 	  if (error_state)
 	    return false;
 	  else
 	    return match;
 	}
     }
 
