# HG changeset patch
# User jwe
# Date 1025804303 0
#      Thu Jul 04 17:38:23 2002 +0000
# Node ID e2290bf911f063d8fed3b48aba02e76130bf5c40
# Parent  826092b5665effbfd673aae034a8a89e6f2014c5
[project @ 2002-07-04 17:38:22 by jwe]

diff --git a/doc/interpreter/basics.txi b/doc/interpreter/basics.txi
--- a/doc/interpreter/basics.txi
+++ b/doc/interpreter/basics.txi
@@ -811,17 +811,17 @@ the arguments are available in the built
 @xref{Command Line Options}.  For example, the following program will
 reproduce the command line that is used to execute it.
 
 @example
 @group
 #! /bin/octave -qf
 printf ("%s", program_name);
 for i = 1:nargin
-  printf (" %s", argv{i});
+  printf (" %s", argv@{i@});
 endfor
 printf ("\n");
 @end group
 @end example
 
 @node Comments,  , Executable Octave Programs, Getting Started
 @section Comments in Octave Programs
 @cindex @samp{#}
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,10 +1,30 @@
+2002-07-04  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* lex.l (EL): Warn that `...' is deprecated.
+
+	* ov-usr-fcn.cc (octave_user_function::varargout_to_vr_val,
+	octave_user_function::has_varargout): New functions.
+	(Fvr_val): Ensure varargout is not defined.
+	(octave_user_function::do_multi_index_op): Copy values from
+	varargout here.
+
 2002-07-03  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
+	* ov-usr-fcn.h (octave_user_function::varargin_sr): New data member.
+	* ov-usr-fcn.cc (octave_user_function::octave_user_function):
+	Initialize it.
+	(bind_automatic_vars): Handle varargin.  Change	all callers.
+
+	* octave.gperf: Handle varargin and varargout as keywords.
+	* lex.l (is_keyword): Likewise.
+	(IDENT): Move all actions into handle_identifier.
+	(handle_identifier): Now takes no args.
+
 	* lex.l (EL): Return VARARGIN or VARARGOUT, not ELLIPSIS.
 	* parse.y (param_list): Use VARARGIN instead of ELLIPSIS.
 	(return_list): Use VARARGOUT instead of ELLIPSIS.
 
 	* data.cc (make_diag const octave_value&, const octave_value&):
 	Allow first arg to be 1x0 or 0x1.
 
 2002-07-02  John W. Eaton  <jwe@bevo.che.wisc.edu>
diff --git a/src/lex.l b/src/lex.l
--- a/src/lex.l
+++ b/src/lex.l
@@ -183,17 +183,17 @@ static void grab_help_text (void);
 static bool match_any (char c, const char *s);
 static bool next_token_is_sep_op (void);
 static bool next_token_is_bin_op (bool spc_prev);
 static bool next_token_is_postfix_unary_op (bool spc_prev);
 static std::string strip_trailing_whitespace (char *s);
 static void handle_number (void);
 static int handle_string (char delim, int text_style = 0);
 static int handle_close_bracket (int spc_gobbled);
-static int handle_identifier (const std::string& tok, int spc_gobbled);
+static int handle_identifier (void);
 static bool have_continuation (bool trailing_comments_ok = true);
 static bool have_ellipsis_continuation (bool trailing_comments_ok = true);
 static void scan_for_comments (const char *);
 static yum_yum eat_whitespace (void);
 static yum_yum eat_continuation (void);
 static void maybe_warn_separator_insert (char sep);
 static void gripe_single_quote_string (void);
 
@@ -476,19 +476,25 @@ NUMBER	(({D}+\.?{D}*{EXPON}?)|(\.{D}+{EX
 
 %{
 // An ellipsis not at the end of a line is not a continuation, but
 // does have another meaning.
 %}
 
 {EL} {
     if (lexer_flags.looking_at_parameter_list)
-      return VARARGIN;
+      {
+	warning ("`...' is deprecated; use varargin instead");
+	return VARARGIN;
+      }
     else if (lexer_flags.looking_at_return_list)
-      return VARARGOUT;
+      {
+	warning ("`...' is deprecated; use varargout instead");
+	return VARARGOUT;
+      }
     else
       return LEXICAL_ERROR;
   }
 
 %{
 // End of file.
 %}
 
@@ -497,21 +503,17 @@ NUMBER	(({D}+\.?{D}*{EXPON}?)|(\.{D}+{EX
   }
 
 %{
 // Identifiers.  Truncate the token at the first space or tab but
 // don't write directly on yytext.
 %}
 
 {IDENT}{S}* {
-    std::string tok = strip_trailing_whitespace (yytext);
-    int c = yytext[yyleng-1];
-    int cont_is_spc = eat_continuation ();
-    int spc_gobbled = (cont_is_spc || c == ' ' || c == '\t');
-    return handle_identifier (tok, spc_gobbled);
+    return handle_identifier ();
   }
 
 %{
 // A new line character.  New line characters inside matrix constants
 // are handled by the <MATRIX> start state code above.  If closest
 // nesting is inside parentheses, don't return a row separator.
 %}
 
@@ -1161,16 +1163,26 @@ is_keyword (const std::string& s)
 	      yylval.tok_val = new token ("stdin", l, c);
 	  }
 	  break;
 
         case magic_line_kw:
 	  yylval.tok_val = new token (static_cast<double> (l), "", l, c);
 	  break;
 
+	case varargin_kw:
+	  if (! lexer_flags.looking_at_parameter_list)
+	    return 0;
+	  break;
+
+	case varargout_kw:
+	  if (! lexer_flags.looking_at_return_list)
+	    return 0;
+	  break;
+
 	default:
 	  panic_impossible ();
 	}
 
       if (! yylval.tok_val)
 	yylval.tok_val = new token (l, c);
 
       token_stack.push (yylval.tok_val);
@@ -2170,18 +2182,26 @@ maybe_unput_comma (int spc_gobbled)
 	}
     }
 }
 
 // Figure out exactly what kind of token to return when we have seen
 // an identifier.  Handles keywords.
 
 static int
-handle_identifier (const std::string& tok, int spc_gobbled)
+handle_identifier (void)
 {
+  std::string tok = strip_trailing_whitespace (yytext);
+
+  int c = yytext[yyleng-1];
+
+  int cont_is_spc = eat_continuation ();
+
+  int spc_gobbled = (cont_is_spc || c == ' ' || c == '\t');
+
   // It is almost always an error for an identifier to be followed
   // directly by another identifier.  Special cases are handled
   // below.
 
   lexer_flags.cant_be_identifier = true;
 
   // If we are expecting a structure element, avoid recognizing
   // keywords and other special names and return STRUCT_ELT, which is
diff --git a/src/octave.gperf b/src/octave.gperf
--- a/src/octave.gperf
+++ b/src/octave.gperf
@@ -30,16 +30,18 @@ enum octave_kw_id
   replot_kw,
   return_kw,
   static_kw,
   switch_kw,
   try_kw,
   until_kw,
   unwind_protect_kw,
   unwind_protect_cleanup_kw,
+  varargin_kw,
+  varargout_kw,
   while_kw
 };
 
 %}
 struct octave_kw { const char *name; int tok; octave_kw_id kw_id; };
 %%
 all_va_args, ALL_VA_ARGS, all_va_args_kw
 break, BREAK, break_kw
@@ -67,11 +69,13 @@ otherwise, OTHERWISE, otherwise_kw
 replot, PLOT, replot_kw
 return, FUNC_RET, return_kw
 static, STATIC, static_kw
 switch, SWITCH, switch_kw
 try, TRY, try_kw
 until, UNTIL, until_kw
 unwind_protect, UNWIND, unwind_protect_kw
 unwind_protect_cleanup, CLEANUP, unwind_protect_cleanup_kw
+varargin, VARARGIN, varargin_kw
+varargout, VARARGOUT, varargout_kw
 while, WHILE, while_kw
 __FILE__, TEXT, magic_file_kw
 __LINE__, NUM, magic_line_kw
diff --git a/src/ov-usr-fcn.cc b/src/ov-usr-fcn.cc
--- a/src/ov-usr-fcn.cc
+++ b/src/ov-usr-fcn.cc
@@ -26,16 +26,17 @@ Software Foundation, 59 Temple Place - S
 
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
 #include "str-vec.h"
 
 #include <defaults.h>
+#include "Cell.h"
 #include "defun.h"
 #include "error.h"
 #include "input.h"
 #include "oct-obj.h"
 #include "ov-usr-fcn.h"
 #include "ov.h"
 #include "pager.h"
 #include "pt-jump.h"
@@ -78,17 +79,17 @@ octave_user_function::octave_user_functi
     param_list (pl), ret_list (rl), cmd_list (cl),
     sym_tab (st), lead_comm (), trail_comm (),
     file_name (), fcn_name (),
     t_parsed (static_cast<time_t> (0)),
     t_checked (static_cast<time_t> (0)),
     system_fcn_file (false), call_depth (0),
     num_named_args (0), args_passed (), num_args_passed (0),
     curr_va_arg_number (0), vr_list (0), symtab_entry (0),
-    argn_sr (0), nargin_sr (0), nargout_sr (0)
+    argn_sr (0), nargin_sr (0), nargout_sr (0), varargin_sr (0)
 {
   install_automatic_vars ();
 
   if (param_list)
     {
       num_named_args = param_list->length ();
       curr_va_arg_number = num_named_args;
     }
@@ -197,16 +198,62 @@ void
 octave_user_function::octave_vr_val (const octave_value& val)
 {
   assert (vr_list);
 
   vr_list->append (val);
 }
 
 void
+octave_user_function::varargout_to_vr_val (void)
+{
+  assert (vr_list && vr_list->empty ());
+
+  symbol_record *sr = sym_tab->lookup ("varargout");
+
+  if (sr && sr->is_variable ())
+    {
+      octave_value v = sr->def ();
+
+      Cell c = v.cell_value ();
+
+      if (! error_state)
+	{
+	  // XXX FIXME XXX -- should varargout be required to be a
+	  // cell array with a single row or column?  If not, should
+	  // we have a cleaner way of doing this operation?
+
+	  int n = c.length ();
+
+	  const octave_value *d = c.data ();
+
+	  for (int i = 0; i < n; i++)
+	    vr_list->append (d[i]);
+	}
+      else
+	error ("expecting varargout to be a cell array object");
+    }
+}
+
+bool
+octave_user_function::has_varargout (void) const
+{
+  bool retval = false;
+
+  if (takes_var_return ())
+    {
+      symbol_record *sr = sym_tab->lookup ("varargout");
+
+      retval = (sr && sr->is_variable ());
+    }
+
+  return retval;
+}
+
+void
 octave_user_function::stash_function_name (const std::string& s)
 {
   fcn_name = s;
 }
 
 // For unwind protect.
 
 static void
@@ -388,17 +435,17 @@ octave_user_function::do_multi_index_op 
 
   unwind_protect::add (clear_param_list, ret_list);
 
   // The following code is in a separate scope to avoid warnings from
   // G++ about `goto abort' crossing the initialization of some
   // variables.
 
   {
-    bind_automatic_vars (arg_names, nargin, nargout);
+    bind_automatic_vars (arg_names, nargin, nargout, octave_all_va_args ());
 
     bool echo_commands = (Vecho_executing_commands & ECHO_FUNCTIONS);
 
     if (echo_commands)
       print_code_function_header ();
 
     // Evaluate the commands that make up the function.
 
@@ -434,16 +481,19 @@ octave_user_function::do_multi_index_op 
 	if (Vdefine_all_return_values)
 	  {
 	    octave_value tmp = builtin_any_variable ("default_return_value");
 
 	    if (tmp.is_defined ())
 	      ret_list->initialize_undefined_elements (tmp);
 	  }
 
+	if (has_varargout ())
+	  varargout_to_vr_val ();
+
 	retval = ret_list->convert_to_const_vector (vr_list);
       }
     else if (Vreturn_last_computed_value)
       retval(0) = last_computed_value;
   }
 
  abort:
   unwind_protect::run_frame ("func_eval");
@@ -506,27 +556,43 @@ octave_user_function::print_code_functio
 }
 
 void
 octave_user_function::install_automatic_vars (void)
 {
   argn_sr = sym_tab->lookup ("argn", true);
   nargin_sr = sym_tab->lookup ("nargin", true);
   nargout_sr = sym_tab->lookup ("nargout", true);
+
+  if (takes_varargs ())
+    varargin_sr = sym_tab->lookup ("varargin", true);
 }
 
 void
 octave_user_function::bind_automatic_vars
-  (const string_vector& arg_names, int nargin, int nargout)
+  (const string_vector& arg_names, int nargin, int nargout,
+   const octave_value_list& va_args)
 {
   if (! arg_names.empty ())
     argn_sr->define (arg_names);
 
   nargin_sr->define (static_cast<double> (nargin));
   nargout_sr->define (static_cast<double> (nargout));
+
+  if (takes_varargs ())
+    {
+      int n = va_args.length ();
+
+      Cell varargin (1, n);
+
+      for (int i = 0; i < n; i++)
+	varargin(0,i) = va_args(i);
+
+      varargin_sr->define (varargin);
+    }
 }
 
 DEFUNX ("va_arg", Fva_arg, args, ,
   "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} va_arg ()\n\
 Return the value of the next available argument and move the internal\n\
 pointer to the next argument.  It is an error to call @code{va_arg}\n\
 when ther eare no more arguments available, or in a function that\n\
@@ -606,17 +672,19 @@ been declared to return an unspecified n
   octave_value_list retval;
 
   int nargin = args.length ();
 
   if (nargin == 1)
     {
       if (curr_function)
 	{
-	  if (curr_function->takes_var_return ())
+	  if (curr_function->has_varargout ())
+	    ::error ("vr_val and varargout cannot both be used in the same function");
+	  else if (curr_function->takes_var_return ())
 	    curr_function->octave_vr_val (args(0));
 	  else
 	    {
 	      ::error ("vr_val only valid within function declared to");
 	      ::error ("produce a variable number of values");
 	    }
 	}
       else
diff --git a/src/ov-usr-fcn.h b/src/ov-usr-fcn.h
--- a/src/ov-usr-fcn.h
+++ b/src/ov-usr-fcn.h
@@ -107,16 +107,20 @@ public:
   octave_value octave_va_arg (void);
 
   octave_value_list octave_all_va_args (void);
 
   bool takes_var_return (void) const;
 
   void octave_vr_val (const octave_value& val);
 
+  void varargout_to_vr_val (void);
+
+  bool has_varargout (void) const;
+
   void stash_function_name (const std::string& s);
 
   std::string function_name (void)
     { return fcn_name; }
 
   void save_args_passed (const octave_value_list& args)
     {
       if (call_depth > 1)
@@ -228,24 +232,27 @@ private:
   symbol_record *argn_sr;
 
   // The symbol record for nargin in the local symbol table.
   symbol_record *nargin_sr;
 
   // The symbol record for nargout in the local symbol table.
   symbol_record *nargout_sr;
 
+  // The symbol record for varargin in the local symbol table.
+  symbol_record *varargin_sr;
+
   void print_code_function_header (void);
 
   void print_code_function_trailer (void);
 
   void install_automatic_vars (void);
 
   void bind_automatic_vars (const string_vector& arg_names, int nargin,
-			    int nargout);
+			    int nargout, const octave_value_list& va_args);
 
   DECLARE_OV_TYPEID_FUNCTIONS_AND_DATA
 
   DECLARE_OCTAVE_ALLOCATOR
 };
 
 #endif
 
