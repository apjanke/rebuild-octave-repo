# HG changeset patch
# User CarnÃ« Draug <carandraug@octave.org>
# Date 1471176586 -3600
#      Sun Aug 14 13:09:46 2016 +0100
# Node ID 0c0de2205d3899d79fa8a885cb36a0031bc7cf2b
# Parent  f7ff29ff2763d75db55a712add4f1773154c34df
utils.h: deprecated out of date arg_is_empty function.

* libinterp/corefcn/utils.h, libinterp/corefcn/utils.cc: this function
"documentation" no longer matches its behaviour.  It's still used in Octave
by checking a returned int, but the function now returns a bool and does
the same as octave_value.is_empty ().  Deprecate in favout of it.
*  det.cc, hess.cc, inv.cc, lu.cc, pinv.cc, sylvester.cc, chol.cc,
qz.cc: replace use of empty_arg with octave_value::is_empty.
* qr.cc: different becase it was only checking '< 0' which was always
false.  Simply remove check and go through the normal code path, even if
it was empty.  Add tests.

diff --git a/libinterp/corefcn/det.cc b/libinterp/corefcn/det.cc
--- a/libinterp/corefcn/det.cc
+++ b/libinterp/corefcn/det.cc
@@ -25,17 +25,16 @@ along with Octave; see the file COPYING.
 #endif
 
 #include "DET.h"
 
 #include "defun.h"
 #include "error.h"
 #include "errwarn.h"
 #include "ovl.h"
-#include "utils.h"
 #include "ops.h"
 
 #include "ov-re-mat.h"
 #include "ov-cx-mat.h"
 #include "ov-flt-re-mat.h"
 #include "ov-flt-cx-mat.h"
 #include "ov-re-diag.h"
 #include "ov-cx-diag.h"
@@ -65,29 +64,20 @@ For that, use any of the condition numbe
 @seealso{cond, condest, rcond}
 @end deftypefn */)
 {
   if (args.length () != 1)
     print_usage ();
 
   octave_value arg = args(0);
 
-  octave_idx_type nr = arg.rows ();
-  octave_idx_type nc = arg.columns ();
-
-  if (nr == 0 && nc == 0)
+  if (arg.is_empty ())
     return ovl (1.0);
 
-  int arg_is_empty = empty_arg ("det", nr, nc);
-  if (arg_is_empty < 0)
-    return ovl ();
-  if (arg_is_empty > 0)
-    return ovl (1.0);
-
-  if (nr != nc)
+  if (arg.rows () != arg.columns ())
     err_square_matrix_required ("det", "A");
 
   octave_value_list retval (2);
 
   bool isfloat = arg.is_single_type ();
 
   if (arg.is_diag_matrix ())
     {
diff --git a/libinterp/corefcn/hess.cc b/libinterp/corefcn/hess.cc
--- a/libinterp/corefcn/hess.cc
+++ b/libinterp/corefcn/hess.cc
@@ -25,17 +25,16 @@ along with Octave; see the file COPYING.
 #endif
 
 #include "hess.h"
 
 #include "defun.h"
 #include "error.h"
 #include "errwarn.h"
 #include "ovl.h"
-#include "utils.h"
 
 DEFUN (hess, args, nargout,
        doc: /* -*- texinfo -*-
 @deftypefn  {} {@var{H} =} hess (@var{A})
 @deftypefnx {} {[@var{P}, @var{H}] =} hess (@var{A})
 @cindex Hessenberg decomposition
 Compute the Hessenberg decomposition of the matrix @var{A}.
 
@@ -61,27 +60,20 @@ IEEE Transactions on Automatic Control, 
 @seealso{eig, chol, lu, qr, qz, schur, svd}
 @end deftypefn */)
 {
   if (args.length () != 1)
     print_usage ();
 
   octave_value arg = args(0);
 
-  octave_idx_type nr = arg.rows ();
-  octave_idx_type nc = arg.columns ();
-
-  int arg_is_empty = empty_arg ("hess", nr, nc);
-
-  if (arg_is_empty < 0)
-    return ovl ();
-  else if (arg_is_empty > 0)
+  if (arg.is_empty ())
     return octave_value_list (2, Matrix ());
 
-  if (nr != nc)
+  if (arg.rows () != arg.columns ())
     err_square_matrix_required ("hess", "A");
 
   octave_value_list retval;
 
   if (arg.is_single_type ())
     {
       if (arg.is_real_type ())
         {
diff --git a/libinterp/corefcn/inv.cc b/libinterp/corefcn/inv.cc
--- a/libinterp/corefcn/inv.cc
+++ b/libinterp/corefcn/inv.cc
@@ -29,17 +29,16 @@ along with Octave; see the file COPYING.
 #include "errwarn.h"
 #include "ovl.h"
 #include "ops.h"
 #include "ov-re-diag.h"
 #include "ov-cx-diag.h"
 #include "ov-flt-re-diag.h"
 #include "ov-flt-cx-diag.h"
 #include "ov-perm.h"
-#include "utils.h"
 
 DEFUN (inv, args, nargout,
        doc: /* -*- texinfo -*-
 @deftypefn  {} {@var{x} =} inv (@var{A})
 @deftypefnx {} {[@var{x}, @var{rcond}] =} inv (@var{A})
 Compute the inverse of the square matrix @var{A}.
 
 Return an estimate of the reciprocal condition number if requested,
@@ -58,27 +57,20 @@ sparse matrix if possible.
 @seealso{ldivide, rdivide}
 @end deftypefn */)
 {
   if (args.length () != 1)
     print_usage ();
 
   octave_value arg = args(0);
 
-  octave_idx_type nr = arg.rows ();
-  octave_idx_type nc = arg.columns ();
-
-  int arg_is_empty = empty_arg ("inverse", nr, nc);
-
-  if (arg_is_empty < 0)
-    return ovl ();
-  else if (arg_is_empty > 0)
+  if (arg.is_empty ())
     return ovl (Matrix ());
 
-  if (nr != nc)
+  if (arg.rows () != arg.columns ())
     err_square_matrix_required ("inverse", "A");
 
   octave_value result;
   octave_idx_type info;
   double rcond = 0.0;
   float frcond = 0.0;
   bool isfloat = arg.is_single_type ();
 
diff --git a/libinterp/corefcn/lu.cc b/libinterp/corefcn/lu.cc
--- a/libinterp/corefcn/lu.cc
+++ b/libinterp/corefcn/lu.cc
@@ -26,17 +26,16 @@ along with Octave; see the file COPYING.
 
 #include "lu.h"
 #include "sparse-lu.h"
 
 #include "defun.h"
 #include "error.h"
 #include "errwarn.h"
 #include "ovl.h"
-#include "utils.h"
 #include "ov-re-sparse.h"
 #include "ov-cx-sparse.h"
 
 template <typename MT>
 static octave_value
 get_lu_l (const octave::math::lu<MT>& fact)
 {
   MT L = fact.L ();
@@ -181,23 +180,19 @@ permutation information.
   octave_value_list retval;
   bool scale = (nargout == 5);
 
   octave_value arg = args(0);
 
   octave_idx_type nr = arg.rows ();
   octave_idx_type nc = arg.columns ();
 
-  int arg_is_empty = empty_arg ("lu", nr, nc);
-
   if (issparse)
     {
-      if (arg_is_empty < 0)
-        return ovl ();
-      else if (arg_is_empty > 0)
+      if (arg.is_empty ())
         return octave_value_list (5, SparseMatrix ());
 
       if (arg.is_real_type ())
         {
           SparseMatrix m = arg.sparse_matrix_value ();
 
           if (nargout < 4)
             {
@@ -325,19 +320,17 @@ permutation information.
             }
 
         }
       else
         err_wrong_type_arg ("lu", arg);
     }
   else
     {
-      if (arg_is_empty < 0)
-        return ovl ();
-      else if (arg_is_empty > 0)
+      if (arg.is_empty ())
         return octave_value_list (3, Matrix ());
 
       if (arg.is_real_type ())
         {
           if (arg.is_single_type ())
             {
               FloatMatrix m = arg.float_matrix_value ();
 
diff --git a/libinterp/corefcn/pinv.cc b/libinterp/corefcn/pinv.cc
--- a/libinterp/corefcn/pinv.cc
+++ b/libinterp/corefcn/pinv.cc
@@ -23,17 +23,16 @@ along with Octave; see the file COPYING.
 #if defined (HAVE_CONFIG_H)
 #  include "config.h"
 #endif
 
 #include "defun.h"
 #include "error.h"
 #include "errwarn.h"
 #include "ovl.h"
-#include "utils.h"
 #include "ops.h"
 #include "ov-re-diag.h"
 #include "ov-cx-diag.h"
 #include "ov-flt-re-diag.h"
 #include "ov-flt-cx-diag.h"
 #include "ov-perm.h"
 
 DEFUN (pinv, args, ,
@@ -56,21 +55,17 @@ where @code{sigma_max (@var{x})} is the 
 {
   int nargin = args.length ();
 
   if (nargin < 1 || nargin > 2)
     print_usage ();
 
   octave_value arg = args(0);
 
-  int arg_is_empty = empty_arg ("pinv", arg.rows (), arg.columns ());
-
-  if (arg_is_empty < 0)
-    return ovl ();
-  else if (arg_is_empty > 0)
+  if (arg.is_empty ())
     return ovl (Matrix ());
 
   octave_value retval;
 
   bool isfloat = arg.is_single_type ();
 
   if (arg.is_diag_matrix ())
     {
diff --git a/libinterp/corefcn/qz.cc b/libinterp/corefcn/qz.cc
--- a/libinterp/corefcn/qz.cc
+++ b/libinterp/corefcn/qz.cc
@@ -292,24 +292,17 @@ compatibility with @sc{matlab}.
 #if defined (DEBUG)
   std::cout << "argument 1 dimensions: ("
             << nn << "," << args(0).columns () << ")"
             << std::endl;
 #endif
 
   octave_value_list retval;
 
-  int arg_is_empty = empty_arg ("qz", nn, args(0).columns ());
-
-  if (arg_is_empty < 0)
-    {
-      warn_empty_arg ("qz: parameter 1");
-      return retval;
-    }
-  else if (arg_is_empty > 0)
+  if (args(0).is_empty ())
     {
       warn_empty_arg ("qz: parameter 1; continuing");
       return octave_value_list (2, Matrix ());
     }
   else if (args(0).columns () != nn)
     err_square_matrix_required ("qz", "A");
 
   // Argument 1: dimensions look good; get the value.
diff --git a/libinterp/corefcn/sylvester.cc b/libinterp/corefcn/sylvester.cc
--- a/libinterp/corefcn/sylvester.cc
+++ b/libinterp/corefcn/sylvester.cc
@@ -25,17 +25,16 @@ along with Octave; see the file COPYING.
 #if defined (HAVE_CONFIG_H)
 #  include "config.h"
 #endif
 
 #include "defun.h"
 #include "error.h"
 #include "errwarn.h"
 #include "ovl.h"
-#include "utils.h"
 
 DEFUN (sylvester, args, ,
        doc: /* -*- texinfo -*-
 @deftypefn {} {@var{X} =} sylvester (@var{A}, @var{B}, @var{C})
 Solve the Sylvester equation
 @tex
 $$
  A X + X B = C
@@ -73,31 +72,27 @@ sylvester ([1, 2; 3, 4], [5, 6; 7, 8], [
   octave_idx_type a_nc = arg_a.columns ();
 
   octave_idx_type b_nr = arg_b.rows ();
   octave_idx_type b_nc = arg_b.columns ();
 
   octave_idx_type c_nr = arg_c.rows ();
   octave_idx_type c_nc = arg_c.columns ();
 
-  int arg_a_is_empty = empty_arg ("sylvester", a_nr, a_nc);
-  int arg_b_is_empty = empty_arg ("sylvester", b_nr, b_nc);
-  int arg_c_is_empty = empty_arg ("sylvester", c_nr, c_nc);
-
   bool isfloat = arg_a.is_single_type ()
                  || arg_b.is_single_type ()
                  || arg_c.is_single_type ();
 
-  if (arg_a_is_empty > 0 && arg_b_is_empty > 0 && arg_c_is_empty > 0)
-    if (isfloat)
-      return ovl (FloatMatrix ());
-    else
-      return ovl (Matrix ());
-  else if (arg_a_is_empty || arg_b_is_empty || arg_c_is_empty)
-    return retval;
+  if (arg_a.is_empty () || arg_b.is_empty () || arg_c.is_empty ())
+    {
+      if (isfloat)
+        return ovl (FloatMatrix ());
+      else
+        return ovl (Matrix ());
+    }
 
   // Arguments are not empty, so check for correct dimensions.
 
   if (a_nr != a_nc)
     err_square_matrix_required ("sylvester", "A");
   if (b_nr != b_nc)
     err_square_matrix_required ("sylvester", "B");
   if (a_nr != c_nr || b_nr != c_nc)
diff --git a/libinterp/corefcn/utils.cc b/libinterp/corefcn/utils.cc
--- a/libinterp/corefcn/utils.cc
+++ b/libinterp/corefcn/utils.cc
@@ -230,19 +230,16 @@ keyword_almost_match (const char * const
 done:
 
   delete [] kw;
   delete [] to_match;
 
   return status;
 }
 
-// Return nonzero if either NR or NC is zero.
-// Return -1 if this should be considered fatal; return 1 if this is ok.
-
 int
 empty_arg (const char * /* name */, octave_idx_type nr, octave_idx_type nc)
 {
   return (nr == 0 || nc == 0);
 }
 
 // See if the given file is in the path.
 
diff --git a/libinterp/corefcn/utils.h b/libinterp/corefcn/utils.h
--- a/libinterp/corefcn/utils.h
+++ b/libinterp/corefcn/utils.h
@@ -49,16 +49,17 @@ extern OCTINTERP_API int almost_match (c
                                        int min_match_len = 1,
                                        int case_sens = 1);
 
 extern OCTINTERP_API int
 keyword_almost_match (const char * const *std, int *min_len,
                       const std::string& s, int min_toks_to_match,
                       int max_toks);
 
+OCTAVE_DEPRECATED ("use 'octave_value::is_empty' instead")
 extern OCTINTERP_API int empty_arg (const char *name, octave_idx_type nr,
                                     octave_idx_type nc);
 
 extern OCTINTERP_API std::string
 search_path_for_file (const std::string&, const string_vector&);
 
 extern OCTINTERP_API string_vector
 search_path_for_all_files (const std::string&, const string_vector&);
diff --git a/libinterp/dldfcn/chol.cc b/libinterp/dldfcn/chol.cc
--- a/libinterp/dldfcn/chol.cc
+++ b/libinterp/dldfcn/chol.cc
@@ -34,17 +34,16 @@ along with Octave; see the file COPYING.
 #include "sparse-util.h"
 
 #include "ov-re-sparse.h"
 #include "ov-cx-sparse.h"
 #include "defun-dld.h"
 #include "error.h"
 #include "errwarn.h"
 #include "ovl.h"
-#include "utils.h"
 
 #include "oct-string.h"
 
 template <typename CHOLT>
 static octave_value
 get_chol (const CHOLT& fact)
 {
   return octave_value (fact.chol_matrix());
@@ -174,24 +173,17 @@ sparse matrices.
         LLt = false;
       else
         error ("chol: optional argument must be one of \"vector\", \"lower\", or \"upper\"");
     }
 
   octave_value_list retval;
   octave_value arg = args(0);
 
-  octave_idx_type nr = arg.rows ();
-  octave_idx_type nc = arg.columns ();
-
-  int arg_is_empty = empty_arg ("chol", nr, nc);
-
-  if (arg_is_empty < 0)
-    return ovl ();
-  if (arg_is_empty > 0)
+  if (arg.is_empty ())
     return ovl (Matrix ());
 
   if (arg.is_sparse_type ())
     {
       octave_idx_type info;
       bool natural = (nargout != 3);
       bool force = nargout > 1;
 
diff --git a/libinterp/dldfcn/qr.cc b/libinterp/dldfcn/qr.cc
--- a/libinterp/dldfcn/qr.cc
+++ b/libinterp/dldfcn/qr.cc
@@ -29,17 +29,16 @@ along with Octave; see the file COPYING.
 #include "qr.h"
 #include "qrp.h"
 #include "sparse-qr.h"
 
 #include "defun-dld.h"
 #include "error.h"
 #include "errwarn.h"
 #include "ovl.h"
-#include "utils.h"
 
 template <typename MT>
 static octave_value
 get_qr_r (const octave::math::qr<MT>& fact)
 {
   MT R = fact.R ();
   if (R.is_square () && fact.regular ())
     return octave_value (R, MatrixType (MatrixType::Upper));
@@ -220,21 +219,16 @@ permutation vector instead of a permutat
 
   if (nargin < 1 || nargin > 3)
     print_usage ();
 
   octave_value_list retval;
 
   octave_value arg = args(0);
 
-  int arg_is_empty = empty_arg ("qr", arg.rows (), arg.columns ());
-
-  if (arg_is_empty < 0)
-    return retval;
-
   bool economy = false;
   bool is_cmplx = false;
   bool have_b = 0;
   bool vector_p = 0;
 
   if (arg.is_complex_type ())
     is_cmplx = true;
   if (nargin > 1)
@@ -568,16 +562,21 @@ permutation vector instead of a permutat
 %! b = [1, 3, 2; 1, i, 0; 3, 0, 2];
 %!
 %! [q, r] = qr (a);
 %! [c, re] = qr (a, b);
 %!
 %! assert (r, re, sqrt (eps));
 %! assert (q'*b, c, sqrt (eps));
 
+%!test
+%! assert (qr (zeros (0, 0)), zeros (0, 0))
+%! assert (qr (zeros (1, 0)), zeros (1, 0))
+%! assert (qr (zeros (0, 1)), zeros (0, 1))
+
 %!error qr ()
 %!error qr ([1, 2; 3, 4], 0, 2)
 
 %!function retval = __testqr (q, r, a, p)
 %!  tol = 100*eps (class (q));
 %!  retval = 0;
 %!  if (nargin == 3)
 %!    n1 = norm (q*r - a);
