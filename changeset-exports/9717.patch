# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1255351255 -7200
#      Mon Oct 12 14:40:55 2009 +0200
# Node ID 4fd71e87512046f1d4ce7c3c8f64a7c29d05f99f
# Parent  d33a318c1de45067edcbcc013b9cf5bd4682cf03
update NEWS

diff --git a/NEWS b/NEWS
--- a/NEWS
+++ b/NEWS
@@ -76,47 +76,16 @@ Summary of important user-visible change
 
  ** As a side effect of code refactoring in liboctave, the binary logical operations
     are now more easily amenable to compiler optimizations and are thus significantly
     faster.
 
  ** Octave now allows user-defined subsasgn methods to optimize out redundant copies.
     For more information, see the manual.
 
- ** When evaluating nested expressions, Octave will now make some attempts to
-    reuse temporary arrays instead of allocating new one for each result.
-    For instance, the expression
-    
-      -(2*a + b)
-
-    where a and b are arrays, will now be done like this:
-
-      allocate c
-      for all i: c(i) = 2*a(i)
-      for all i: c(i) = c(i) + b(i)
-      for all i: c(i) = -c(i)
-      c is the result
-
-    previously, a new temporary was allocated for each intermediary result
-
-      allocate c
-      for all i: c(i) = 2*a(i)
-      allocate d
-      for all i: d(i) = c(i) + b(i)
-      deallocate c
-      allocate e
-      for all i: e(i) = -d(i)
-      deallocate d
-      e is the result
-    
-    This will result in memory saving and less allocations, as well as a modest
-    performance improvement on most platforms.
-    Currently, only temporaries on the left-hand side of the operator can be reused,
-    as well as temporaries subject to unary operators - and !.
-
  ** More efficient matrix division handling. Octave is now able to handle the expressions
     
        M' \ v
        M.' \ v
        v / M 
 
     (M is a matrix and v is a vector) more efficiently in certain cases. 
     In particular, if M is triangular, all three expressions will be handled by a single call to 
@@ -137,16 +106,22 @@ Summary of important user-visible change
       complex (RM) * CM,
 
     depending on the dimensions. The 1st form requires more temporaries and copying,
     but halves the count of FLOPs, which normally brings better performance if
     RM has enough rows. Previously, the 2nd form was always used.
 
     Matrix division is similarly affected. 
 
+ ** More efficient handling of triangular matrix factors returned from factorizations.
+    The functions for computing QR, LU and Cholesky factorizations will now automatically
+    return the triangular matrix factors with proper internal matrix_type set, so that it
+    won't need to be computed when the matrix is used for division.
+
+
 Summary of important user-visible changes for version 3.2:
 ---------------------------------------------------------
 
  ** Compatibility with Matlab graphics has been improved.
 
     The hggroup object and associated listener callback functions have
     been added allowing the inclusion of group objects.  Data sources
     have been added to these group objects such that
