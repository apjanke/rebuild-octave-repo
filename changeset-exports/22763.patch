# HG changeset patch
# User Rik <rik@octave.org>
# Date 1479156539 28800
#      Mon Nov 14 12:48:59 2016 -0800
# Node ID 57e82b74f89b8d2c844c2b151317dfbacfa1e539
# Parent  c4d80b9d28986a74335f08111c531d3cf9f0eaaf
# Parent  1c67938a15f10305ce080f8100507f1de4259c78
maint: Periodic merge of stable to default.

diff --git a/.hgtags b/.hgtags
--- a/.hgtags
+++ b/.hgtags
@@ -101,8 +101,9 @@ a58d5e6df908199c4aea83f78077b81289d2a0ad
 2b66f30a0de7a09801c2a3566021cde7e194d3d3 rc-4-0-1-4
 5162cdfb56d8e31ad00dc260a26d1c92c69c2acf release-4-0-1
 acaf1e137c5e6f201a6689a99a6568d0dfe9e9ed release-4-0-2
 00f7b278defd1b6b911cde1ff20390fb298f4c5b release-4-0-3
 b8eeca55fa8113853a19b1b1ab4d0bb6471dea18 rc-4-2-0-1
 9d50627498141d150755d18ab8e71a3220e40147 rc-4-2-0-2
 96817eafc7997e19a1f89873c05098e08fea1c02 rc-4-2-0-3
 69ac19073ae630b276ff7788b78f72782f281657 rc-4-2-0-4
+708a4fcb73820484a3af94dd4d18453c4d9b29c9 release-4-2-0
diff --git a/configure.ac b/configure.ac
--- a/configure.ac
+++ b/configure.ac
@@ -28,17 +28,17 @@ OCTAVE_MAJOR_VERSION=4
 OCTAVE_MINOR_VERSION=3
 OCTAVE_PATCH_VERSION=0+
 
 dnl PACKAGE_VERSION is set by the AC_INIT VERSION arg
 OCTAVE_VERSION="$PACKAGE_VERSION"
 
 OCTAVE_COPYRIGHT="Copyright (C) 2016 John W. Eaton and others."
 
-OCTAVE_RELEASE_DATE="2016-11-08"
+OCTAVE_RELEASE_DATE="2016-11-13"
 
 ## The "API version" is used as a way of checking that interfaces in the
 ## liboctave and libinterp libraries haven't changed in a backwardly
 ## incompatible way when loading .oct files.  A better way to do that is
 ## with library versioning, but not all systems support that.
 ## NOTE: This macro will be removed in a future version of Octave.  If
 ## you insist on checking for features using a version number, use the
 ## OCTAVE_MAJOR_VERSION, OCTAVE_MINOR_VERSION, and
diff --git a/libinterp/corefcn/data.cc b/libinterp/corefcn/data.cc
--- a/libinterp/corefcn/data.cc
+++ b/libinterp/corefcn/data.cc
@@ -3272,16 +3272,58 @@ Octave are double precision floating poi
 @end deftypefn */)
 {
   if (args.length () != 1)
     print_usage ();
 
   return ovl (args(0).is_integer_type ());
 }
 
+/*
+%!assert (isinteger (int8 (16)))
+%!assert (isinteger (int16 (16)))
+%!assert (isinteger (int32 (16)))
+%!assert (isinteger (int64 (16)))
+
+%!assert (isinteger (uint8 (16)))
+%!assert (isinteger (uint16 (16)))
+%!assert (isinteger (uint32 (16)))
+%!assert (isinteger (uint64 (16)))
+
+%!assert (isinteger (intmax ("int8")))
+%!assert (isinteger (intmax ("int16")))
+%!assert (isinteger (intmax ("int32")))
+%!assert (isinteger (intmax ("int64")))
+
+%!assert (isinteger (intmax ("uint8")))
+%!assert (isinteger (intmax ("uint16")))
+%!assert (isinteger (intmax ("uint32")))
+%!assert (isinteger (intmax ("uint64")))
+
+%!assert (isinteger (intmin ("int8")))
+%!assert (isinteger (intmin ("int16")))
+%!assert (isinteger (intmin ("int32")))
+%!assert (isinteger (intmin ("int64")))
+
+%!assert (isinteger (intmin ("uint8")))
+%!assert (isinteger (intmin ("uint16")))
+%!assert (isinteger (intmin ("uint32")))
+%!assert (isinteger (intmin ("uint64")))
+
+%!assert (isinteger (uint8 ([1:10])))
+%!assert (isinteger (uint8 ([1:10; 1:10])))
+
+%!assert (! isinteger (16))
+%!assert (! isinteger ("parrot"))
+%!assert (! isinteger ([1, 2, 3]))
+
+%!error isinteger ()
+%!error isinteger ("multiple", "parameters")
+*/
+
 DEFUN (iscomplex, args, ,
        doc: /* -*- texinfo -*-
 @deftypefn {} {} iscomplex (@var{x})
 Return true if @var{x} is a complex-valued numeric object.
 @seealso{isreal, isnumeric, islogical, ischar, isfloat, isa}
 @end deftypefn */)
 {
   if (args.length () != 1)
diff --git a/libinterp/corefcn/toplev.cc b/libinterp/corefcn/toplev.cc
--- a/libinterp/corefcn/toplev.cc
+++ b/libinterp/corefcn/toplev.cc
@@ -662,22 +662,22 @@ specified option.
   else
     retval = ovl (config);
 
   return retval;
 }
 
 /*
 %!assert (ischar (__octave_config_info__ ("version")))
+%!assert (__octave_config_info__ ("version"), OCTAVE_VERSION ())
 %!test
 %! x = __octave_config_info__ ();
 %! assert (isstruct (x));
 %! assert (! isempty (x));
-
-%!assert (__octave_config_info__ ("fftw_version"), __octave_config_info__ ("fftwf_version"))
+%! assert (x.version, OCTAVE_VERSION ());
 
 %!error __octave_config_info__ (1, 2)
 */
 
 #if defined (__GNUG__) && defined (DEBUG_NEW_DELETE)
 
 int debug_new_delete = 0;
 
diff --git a/scripts/plot/appearance/datetick.m b/scripts/plot/appearance/datetick.m
--- a/scripts/plot/appearance/datetick.m
+++ b/scripts/plot/appearance/datetick.m
@@ -192,44 +192,47 @@ function __datetick__ (varargin)
         scl = 1 / 24;
       endif
       sep = __calc_tick_sep__ (xmin / scl , xmax / scl);
       xmin = sep * floor (xmin / scl / sep);
       xmax = sep * ceil (xmax / scl / sep);
       nticks = (xmax - xmin) / sep + 1;
       xmin *= scl;
       xmax *= scl;
+      ticks = xmin + [0 : nticks - 1] / (nticks - 1) * (xmax - xmin);
     else
       [ymin, mmin, dmin] = datevec (xmin);
       [ymax, mmax, dmax] = datevec (xmax);
       minyear = ymin + (mmin - 1) / 12 + (dmin - 1) / 12 / 30;
       maxyear = ymax + (mmax - 1) / 12 + (dmax - 1) / 12 / 30;
       minmonth = mmin + (dmin - 1) / 30;
       maxmonth = (ymax  - ymin) * 12 + mmax + (dmax - 1) / 30;
 
       if (maxmonth - minmonth < N)
         sep = __calc_tick_sep__ (xmin, xmax);
         xmin = sep * floor (xmin / sep);
         xmax = sep * ceil (xmax / sep);
         nticks = (xmax - xmin) / sep + 1;
         ticks = xmin + [0 : nticks - 1] / (nticks - 1) * (xmax - xmin);
       elseif (maxyear - minyear < N)
         sep = __calc_tick_sep__ (minmonth, maxmonth);
+        minyear = floor (minyear);
         minmonth = sep * floor (minmonth / sep);
+        minmonth = ifelse (minmonth == 0, 1, minmonth);
         maxmonth = sep * ceil (maxmonth / sep);
-        xmin = datenum (ymin, minmonth, 1);
-        tick_years = datevec (datenum (floor (minyear), minmonth:maxmonth, 1))(:,1)';
-        tick_month = 12 - mod (-(minmonth:maxmonth), 12);
-        ticks = xmin + [0 cumsum(eomday(tick_years, tick_month))(sep:sep:end)];
+        rangemonth = (minmonth:sep:maxmonth)';
+        ticks = datenum ([repmat(minyear, size(rangemonth)), ...
+                          rangemonth, ...
+                          ones(size (rangemonth))]);
       else
-        sep = __calc_tick_sep__ (minyear , maxyear);
-        xmin = datenum (sep * floor (minyear / sep), 1, 1);
-        xmax = datenum (sep * ceil (maxyear / sep), 1, 1);
-        nticks = ceil (maxyear / sep) - floor (minyear / sep) + 1;
-        ticks = xmin + [0 : nticks - 1] / (nticks - 1) * (xmax - xmin);
+        sep = __calc_tick_sep__ (minyear, maxyear);
+        minyear = sep * floor (minyear / sep);
+        maxyear = sep * ceil (maxyear / sep);
+        rangeyear = (minyear:sep:maxyear)';
+        ticks = datenum ([rangeyear, ones(rows(rangeyear),2)]);
       endif
     endif
   endif
 
   if (isempty (form))
     r = max (ticks) - min (ticks);
     if (r < 10/60/24)
       ## minutes and seconds
