# HG changeset patch
# User jwe
# Date 949099732 0
#      Fri Jan 28 22:48:52 2000 +0000
# Node ID 17261f602206466a75a787284939dfd401749269
# Parent  2c7524ffdbf54381a68d94d3a909333b4422880a
[project @ 2000-01-28 22:48:51 by jwe]

diff --git a/liboctave/Array2.h b/liboctave/Array2.h
--- a/liboctave/Array2.h
+++ b/liboctave/Array2.h
@@ -38,22 +38,20 @@ Software Foundation, 59 Temple Place - S
 
 class idx_vector;
 
 // Two dimensional array class.
 
 template <class T>
 class Array2 : public Array<T>
 {
-private:
+protected:
 
   int get_size (int r, int c) const;
 
-protected:
-
   Array2 (T *d, int n, int m) : Array<T> (d, get_size (n, m))
     {
       d1 = n;
       d2 = m;
       set_max_indices (2);
     }
 
 public:
diff --git a/liboctave/Array3.cc b/liboctave/Array3.cc
--- a/liboctave/Array3.cc
+++ b/liboctave/Array3.cc
@@ -61,17 +61,19 @@ Array3<T>::resize (int r, int c, int p)
   ArrayRep *old_rep = rep;
   const T *old_data = data ();
 
   int old_d1 = dim1 ();
   int old_d2 = dim2 ();
   int old_d3 = dim3 ();
   int old_len = length ();
 
-  rep = new ArrayRep (r*c*p);
+  int ts = get_size (get_size (r, c), p);
+
+  rep = new ArrayRep (ts);
 
   d1 = r;
   d2 = c;
   d3 = p;
 
   if (old_data && old_len > 0)
     {
       int min_r = old_d1 < r ? old_d1 : r;
@@ -106,17 +108,19 @@ Array3<T>::resize (int r, int c, int p, 
   const T *old_data = data ();
 
   int old_d1 = dim1 ();
   int old_d2 = dim2 ();
   int old_d3 = dim3 ();
 
   int old_len = length ();
 
-  rep = new ArrayRep (r*c*p);
+  int ts = get_size (get_size (r, c), p);
+
+  rep = new ArrayRep (ts);
 
   d1 = r;
   d2 = c;
   d3 = p;
 
   int min_r = old_d1 < r ? old_d1 : r;
   int min_c = old_d2 < c ? old_d2 : c;
   int min_p = old_d3 < p ? old_d3 : p;
diff --git a/liboctave/Array3.h b/liboctave/Array3.h
--- a/liboctave/Array3.h
+++ b/liboctave/Array3.h
@@ -40,33 +40,33 @@ class idx_vector;
 
 template <class T>
 class Array3 : public Array2<T>
 {
 protected:
 
   int d3;
 
-  Array3 (T *d, int n, int m, int k) : Array2<T> (d, n, m*k)
+  Array3 (T *d, int n, int m, int k) : Array2<T> (d, n, get_size (m, k))
     {
       d2 = m;
       d3 = k;
       set_max_indices (3);
     }
 
 public:
 
   Array3 (void) : Array2<T> ()
     {
       d2 = 0;
       d3 = 0;
       set_max_indices (3);
     }
 
-  Array3 (int n, int m, int k) : Array2<T> (n, m*k)
+  Array3 (int n, int m, int k) : Array2<T> (n, get_size (m, k))
     {
       d2 = m;
       d3 = k;
       set_max_indices (3);
     }
 
   Array3 (int n, int m, int k, const T& val) : Array2<T> (n, m*k, val)
     {
diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,10 +1,14 @@
 2000-01-28  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
+	* Array2.h (Array2<T>::get_size): Now protected instead of private.
+	* Array3.h, Array3.cc: Use it in constructors and resize methods
+	to get total size to be allocated.
+
 	* DASSL.cc (DASSL::integrate): Declare do_restart and save_output
 	as bool, not int.
 
 2000-01-26  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* Array2-idx.h (assign (Array2<LT>& lhs, const Array2<RT>& rhs)): 
 	Allow A(idx) = RHS if idx is a boolean index with the same shape
 	as A, even when do_fortran_indexing is not enabled.
