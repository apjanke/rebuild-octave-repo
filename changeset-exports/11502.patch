# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1294906600 18000
#      Thu Jan 13 03:16:40 2011 -0500
# Node ID 4638800cd660d2e19b2e767d620197b35fccabc1
# Parent  331fcc41ca234ad4a05ab958ec7029afcb2ccfcb
delete data pointer members from liboctave ODE/DAE classes; make destuctors virtual in ODE/DAE base classes

diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,38 @@
+2011-01-13  John W. Eaton  <jwe@octave.org>
+
+	* DAE.h (DAE::~DAE): Now virtual.
+	* DAERT.h (DAERT::~DAERT): Likewise.
+	* ODE.h (ODE::~ODE): Likewise.
+	* DAEFunc.h (DAEFunc::~DAEFunc): Likewise.
+	* DAERTFunc.h (DAEFunc::~DAEFunc): Likewise.
+	* ODEFunc.h (ODE::~ODE): Likewise.
+	* ODESFunc.h (ODESFunc::~ODESFunc): Likewise.
+
+	* LSODE.h (class LSODE): Delete pointer data members.
+	(LSODE::LSODE): Initialize all data members in initialization lists.
+	* LSODE.cc (LSODE::integrate): Extract pointers to data from
+	array data members at each call.
+
+	* DASPK.h (class DASPK): Delete pointer data members.
+	(DASPK::DASPK): Initialize all data members in initialization lists.
+	* DASPK.cc (DASPK::integrate): Extract pointers to data from
+	array data members at each call.
+
+	* DASSL.h (class DASSL): Delete pointer data members.
+	(DASSL::DASSL): Initialize all data members in initialization lists.
+	* DASSL.cc (DASSL::integrate): Extract pointers to data from
+	array data members at each call.
+
+	* DASRT.h (class DASRT): Delete pointer data members.
+	(DASRT::DASRT): Initialize all data members in initialization lists.
+	* DASRT.cc (DASRT::integrate): Extract pointers to data from
+	array data members at each call.
+
 2011-01-13  John W. Eaton  <jwe@octave.org>
 
 	* kpse.cc (struct str_llist_elt, struct cache_entry):
 	Explicitly define constructor and destructor.
 
 	* Quad.h (Quad::Quad, IndefQuad::IndefQuad,
 	FloatIndefQuad::FloatIndefQuad): Initialize all data members in
 	initialization lists.
diff --git a/liboctave/DASPK.cc b/liboctave/DASPK.cc
--- a/liboctave/DASPK.cc
+++ b/liboctave/DASPK.cc
@@ -68,17 +68,18 @@ extern "C"
 }
 
 static DAEFunc::DAERHSFunc user_fun;
 static DAEFunc::DAEJacFunc user_jac;
 static octave_idx_type nn;
 
 static octave_idx_type
 ddaspk_f (const double& time, const double *state, const double *deriv,
-          const double&, double *delta, octave_idx_type& ires, double *, octave_idx_type *)
+          const double&, double *delta, octave_idx_type& ires, double *,
+          octave_idx_type *)
 {
   BEGIN_INTERRUPT_WITH_EXCEPTIONS;
 
   ColumnVector tmp_deriv (nn);
   ColumnVector tmp_state (nn);
   ColumnVector tmp_delta (nn);
 
   for (octave_idx_type i = 0; i < nn; i++)
@@ -166,35 +167,30 @@ DASPK::do_integrate (double tout)
 
       initialized = true;
 
       info.resize (20, 1);
 
       for (octave_idx_type i = 0; i < 20; i++)
         info(i) = 0;
 
-      pinfo = info.fortran_vec ();
-
       octave_idx_type n = size ();
 
       nn = n;
 
       info(0) = 0;
 
       if (stop_time_set)
         {
           rwork(0) = stop_time;
           info(3) = 1;
         }
       else
         info(3) = 0;
 
-      px = x.fortran_vec ();
-      pxdot = xdot.fortran_vec ();
-
       // DAEFunc
 
       user_fun = DAEFunc::function ();
       user_jac = DAEFunc::jacobian_function ();
 
       if (user_fun)
         {
           octave_idx_type ires = 0;
@@ -235,19 +231,16 @@ DASPK::do_integrate (double tout)
 
       lrw = 50 + 9*n + n*n;
       if (eavfet == 1)
         lrw += n;
 
       iwork.resize (liw, 1);
       rwork.resize (lrw, 1);
 
-      piwork = iwork.fortran_vec ();
-      prwork = rwork.fortran_vec ();
-
       // DASPK_options
 
       abs_tol = absolute_tolerance ();
       rel_tol = relative_tolerance ();
 
       octave_idx_type abs_tol_len = abs_tol.length ();
       octave_idx_type rel_tol_len = rel_tol.length ();
 
@@ -263,19 +256,16 @@ DASPK::do_integrate (double tout)
         {
           (*current_liboctave_error_handler)
             ("daspk: inconsistent sizes for tolerance arrays");
 
           integration_error = true;
           return retval;
         }
 
-      pabs_tol = abs_tol.fortran_vec ();
-      prel_tol = rel_tol.fortran_vec ();
-
       double hmax = maximum_step_size ();
       if (hmax >= 0.0)
         {
           rwork(1) = hmax;
           info(6) = 1;
         }
       else
         info(6) = 0;
@@ -455,18 +445,29 @@ DASPK::do_integrate (double tout)
           break;
         }
 
       DASPK_options::reset = false;
 
       restart = false;
     }
 
-  static double *dummy = 0;
-  static octave_idx_type *idummy = 0;
+  double *px = x.fortran_vec ();
+  double *pxdot = xdot.fortran_vec ();
+
+  octave_idx_type *pinfo = info.fortran_vec ();
+
+  double *prel_tol = rel_tol.fortran_vec ();
+  double *pabs_tol = abs_tol.fortran_vec ();
+
+  double *prwork = rwork.fortran_vec ();
+  octave_idx_type *piwork = iwork.fortran_vec ();
+
+  double *dummy = 0;
+  octave_idx_type *idummy = 0;
 
   F77_XFCN (ddaspk, DDASPK, (ddaspk_f, nn, t, px, pxdot, tout, pinfo,
                              prel_tol, pabs_tol, istate, prwork, lrw,
                              piwork, liw, dummy, idummy, ddaspk_j,
                              ddaspk_psol));
 
   switch (istate)
     {
diff --git a/liboctave/DASPK.h b/liboctave/DASPK.h
--- a/liboctave/DASPK.h
+++ b/liboctave/DASPK.h
@@ -30,24 +30,29 @@ along with Octave; see the file COPYING.
 #include "lo-math.h"
 
 class
 OCTAVE_API
 DASPK : public DAE, public DASPK_options
 {
 public:
 
-  DASPK (void) : DAE (), DASPK_options (), initialized (false) { }
+  DASPK (void)
+    : DAE (), DASPK_options (), initialized (false), liw (0), lrw (0),
+      info (), iwork (), rwork (), abs_tol (), rel_tol () { }
 
   DASPK (const ColumnVector& s, double tm, DAEFunc& f)
-    : DAE (s, tm, f), DASPK_options (), initialized (false) { }
+    : DAE (s, tm, f), DASPK_options (), initialized (false), liw (0),
+      lrw (0), info (), iwork (), rwork (), abs_tol (), rel_tol () { }
 
   DASPK (const ColumnVector& s, const ColumnVector& deriv,
          double tm, DAEFunc& f)
-    : DAE (s, deriv, tm, f), DASPK_options (), initialized (false) { }
+    : DAE (s, deriv, tm, f), DASPK_options (), initialized (false),
+      liw (0), lrw (0), info (), iwork (), rwork (), abs_tol (),
+      rel_tol () { }
 
   ~DASPK (void) { }
 
   ColumnVector do_integrate (double t);
 
   Matrix do_integrate (const ColumnVector& tout);
 
   Matrix do_integrate (const ColumnVector& tout, const ColumnVector& tcrit); 
@@ -68,19 +73,11 @@ private:
 
   Array<octave_idx_type> info;
   Array<octave_idx_type> iwork;
 
   Array<double> rwork;
 
   Array<double> abs_tol;
   Array<double> rel_tol;
-
-  double *px;
-  double *pxdot;
-  double *pabs_tol;
-  double *prel_tol;
-  octave_idx_type *pinfo;
-  octave_idx_type *piwork;
-  double *prwork;
 };
 
 #endif
diff --git a/liboctave/DASRT.cc b/liboctave/DASRT.cc
--- a/liboctave/DASRT.cc
+++ b/liboctave/DASRT.cc
@@ -166,18 +166,16 @@ DASRT::integrate (double tout)
 
       initialized = true;
 
       info.resize (15, 1);
 
       for (octave_idx_type i = 0; i < 15; i++)
         info(i) = 0;
 
-      pinfo = info.fortran_vec ();
-
       octave_idx_type n = size ();
 
       nn = n;
 
       // DAERTFunc
 
       user_csub = DAERTFunc::constraint_function ();
 
@@ -217,22 +215,16 @@ DASRT::integrate (double tout)
       if (stop_time_set)
         {
           info(3) = 1;
           rwork(0) = stop_time;
         }
       else
         info(3) = 0;
 
-      px = x.fortran_vec ();
-      pxdot = xdot.fortran_vec ();
-
-      piwork = iwork.fortran_vec ();
-      prwork = rwork.fortran_vec ();
-
       restart = false;
 
       // DAEFunc
 
       user_fsub = DAEFunc::function ();
       user_jsub = DAEFunc::jacobian_function ();
 
       if (user_fsub)
@@ -260,18 +252,16 @@ DASRT::integrate (double tout)
         }
 
       info(4) = user_jsub ? 1 : 0;
 
       DAEFunc::reset = false;
 
       jroot.resize (ng, 1, 1);
 
-      pjroot = jroot.fortran_vec ();
-
       DAERTFunc::reset = false;
 
       // DASRT_options
 
       double mss = maximum_step_size ();
       if (mss >= 0.0)
         {
           rwork(1) = mss;
@@ -315,24 +305,34 @@ DASRT::integrate (double tout)
         {
           (*current_liboctave_error_handler)
             ("dasrt: inconsistent sizes for tolerance arrays");
 
           integration_error = true;
           return;
         }
 
-      pabs_tol = abs_tol.fortran_vec ();
-      prel_tol = rel_tol.fortran_vec ();
-
       DASRT_options::reset = false;
     }
 
-  static double *dummy = 0;
-  static octave_idx_type *idummy = 0;
+  double *px = x.fortran_vec ();
+  double *pxdot = xdot.fortran_vec ();
+
+  octave_idx_type *pinfo = info.fortran_vec ();
+
+  double *prel_tol = rel_tol.fortran_vec ();
+  double *pabs_tol = abs_tol.fortran_vec ();
+
+  double *prwork = rwork.fortran_vec ();
+  octave_idx_type *piwork = iwork.fortran_vec ();
+
+  octave_idx_type *pjroot = jroot.fortran_vec ();
+
+  double *dummy = 0;
+  octave_idx_type *idummy = 0;
 
   F77_XFCN (ddasrt, DDASRT, (ddasrt_f, nn, t, px, pxdot, tout, pinfo,
                              prel_tol, pabs_tol, istate, prwork, lrw,
                              piwork, liw, dummy, idummy, ddasrt_j,
                              ddasrt_g, ng, pjroot));
 
   switch (istate)
     {
diff --git a/liboctave/DASRT.h b/liboctave/DASRT.h
--- a/liboctave/DASRT.h
+++ b/liboctave/DASRT.h
@@ -28,17 +28,18 @@ along with Octave; see the file COPYING.
 #include "DASRT-opts.h"
 #include "lo-math.h"
 
 class
 DASRT_result
 {
 public:
 
-  DASRT_result (void) { }
+  DASRT_result (void)
+    : x (), xdot (), t () { }
 
   DASRT_result (const Matrix& xx, const Matrix& xxdot, const ColumnVector& tt)
     : x (xx), xdot (xxdot), t (tt) { }
 
   DASRT_result (const DASRT_result& r)
     : x (r.x), xdot (r.xdot), t (r.t) { }
 
   DASRT_result& operator = (const DASRT_result& r)
@@ -66,24 +67,34 @@ private:
 };
 
 class
 OCTAVE_API
 DASRT : public DAERT, public DASRT_options
 {
 public:
 
-  DASRT (void) : DAERT (), DASRT_options (), initialized (false) { }
+  DASRT (void)
+    : DAERT (), DASRT_options (), initialized (false),
+      liw (0), lrw (0), ng (0), info (), iwork (), jroot (), rwork (),
+      abs_tol (), rel_tol ()
+    { }
 
   DASRT (const ColumnVector& s, double tm, DAERTFunc& f)
-    : DAERT (s, tm, f), DASRT_options (), initialized (false) { }
+    : DAERT (s, tm, f), DASRT_options (), initialized (false),
+      liw (0), lrw (0), ng (0), info (), iwork (), jroot (), rwork (),
+      abs_tol (), rel_tol ()
+    { }
 
   DASRT (const ColumnVector& s, const ColumnVector& deriv,
          double tm, DAERTFunc& f)
-    : DAERT (s, deriv, tm, f), DASRT_options (), initialized (false) { }
+    : DAERT (s, deriv, tm, f), DASRT_options (), initialized (false),
+      liw (0), lrw (0), ng (0), info (), iwork (), jroot (), rwork (),
+      abs_tol (), rel_tol ()
+    { }
 
   ~DASRT (void) { }
 
   DASRT_result integrate (const ColumnVector& tout);
 
   DASRT_result integrate (const ColumnVector& tout,
                           const ColumnVector& tcrit); 
 
@@ -102,21 +113,12 @@ private:
   Array<octave_idx_type> iwork;
   Array<octave_idx_type> jroot;
 
   Array<double> rwork;
 
   Array<double> abs_tol;
   Array<double> rel_tol;
 
-  double *px;
-  double *pxdot;
-  double *pabs_tol;
-  double *prel_tol;
-  octave_idx_type *pinfo;
-  octave_idx_type *piwork;
-  double *prwork;
-  octave_idx_type *pjroot;
-
   void integrate (double t);
 };
 
 #endif
diff --git a/liboctave/DASSL.cc b/liboctave/DASSL.cc
--- a/liboctave/DASSL.cc
+++ b/liboctave/DASSL.cc
@@ -138,18 +138,16 @@ DASSL::do_integrate (double tout)
 
       initialized = true;
 
       info.resize (15, 1);
 
       for (octave_idx_type i = 0; i < 15; i++)
         info(i) = 0;
 
-      pinfo = info.fortran_vec ();
-
       octave_idx_type n = size ();
 
       liw = 21 + n;
       lrw = 40 + 9*n + n*n;
 
       nn = n;
 
       iwork.resize (liw, 1);
@@ -160,22 +158,16 @@ DASSL::do_integrate (double tout)
       if (stop_time_set)
         {
           rwork(0) = stop_time;
           info(3) = 1;
         }
       else
         info(3) = 0;
 
-      px = x.fortran_vec ();
-      pxdot = xdot.fortran_vec ();
-
-      piwork = iwork.fortran_vec ();
-      prwork = rwork.fortran_vec ();
-
       restart = false;
 
       // DAEFunc
 
       user_fun = DAEFunc::function ();
       user_jac = DAEFunc::jacobian_function ();
 
       if (user_fun)
@@ -240,17 +232,17 @@ DASSL::do_integrate (double tout)
           if (maxord > 0 && maxord < 6)
             {
               info(8) = 1;
               iwork(2) = maxord;
             }
           else
             {
               (*current_liboctave_error_handler)
-                ("dassl: invalid value for maximum order");
+                ("dassl: invalid value for maximum order: %d", maxord);
               integration_error = true;
               return retval;
             }
         }
 
       octave_idx_type enc = enforce_nonnegativity_constraints ();
       info(9) = enc ? 1 : 0;
 
@@ -275,24 +267,32 @@ DASSL::do_integrate (double tout)
         {
           (*current_liboctave_error_handler)
             ("dassl: inconsistent sizes for tolerance arrays");
 
           integration_error = true;
           return retval;
         }
 
-      pabs_tol = abs_tol.fortran_vec ();
-      prel_tol = rel_tol.fortran_vec ();
-
       DASSL_options::reset = false;
     }
 
-  static double *dummy = 0;
-  static octave_idx_type *idummy = 0;
+  double *px = x.fortran_vec ();
+  double *pxdot = xdot.fortran_vec ();
+
+  octave_idx_type *pinfo = info.fortran_vec ();
+
+  double *prel_tol = rel_tol.fortran_vec ();
+  double *pabs_tol = abs_tol.fortran_vec ();
+
+  double *prwork = rwork.fortran_vec ();
+  octave_idx_type *piwork = iwork.fortran_vec ();
+
+  double *dummy = 0;
+  octave_idx_type *idummy = 0;
 
   F77_XFCN (ddassl, DDASSL, (ddassl_f, nn, t, px, pxdot, tout, pinfo,
                              prel_tol, pabs_tol, istate, prwork, lrw,
                              piwork, liw, dummy, idummy, ddassl_j));
 
   switch (istate)
     {
     case 1: // A step was successfully taken in intermediate-output
diff --git a/liboctave/DASSL.h b/liboctave/DASSL.h
--- a/liboctave/DASSL.h
+++ b/liboctave/DASSL.h
@@ -30,24 +30,29 @@ along with Octave; see the file COPYING.
 #include "lo-math.h"
 
 class
 OCTAVE_API
 DASSL : public DAE, public DASSL_options
 {
 public:
 
-  DASSL (void) : DAE (), DASSL_options (), initialized (false) { }
+  DASSL (void)
+    : DAE (), DASSL_options (), initialized (false), liw (0), lrw (0),
+      info (), iwork (), rwork (), abs_tol (), rel_tol () { }
 
   DASSL (const ColumnVector& s, double tm, DAEFunc& f)
-    : DAE (s, tm, f), DASSL_options (), initialized (false) { }
+    : DAE (s, tm, f), DASSL_options (), initialized (false), liw (0),
+      lrw (0), info (), iwork (), rwork (), abs_tol (), rel_tol () { }
 
   DASSL (const ColumnVector& s, const ColumnVector& deriv,
          double tm, DAEFunc& f)
-    : DAE (s, deriv, tm, f), DASSL_options (), initialized (false) { }
+    : DAE (s, deriv, tm, f), DASSL_options (), initialized (false),
+      liw (0), lrw (0), info (), iwork (), rwork (), abs_tol (),
+      rel_tol () { }
 
   ~DASSL (void) { }
 
   ColumnVector do_integrate (double t);
 
   Matrix do_integrate (const ColumnVector& tout);
 
   Matrix do_integrate (const ColumnVector& tout, const ColumnVector& tcrit); 
@@ -68,19 +73,11 @@ private:
 
   Array<octave_idx_type> info;
   Array<octave_idx_type> iwork;
 
   Array<double> rwork;
 
   Array<double> abs_tol;
   Array<double> rel_tol;
-
-  double *px;
-  double *pxdot;
-  double *pabs_tol;
-  double *prel_tol;
-  octave_idx_type *pinfo;
-  octave_idx_type *piwork;
-  double *prwork;
 };
 
 #endif
diff --git a/liboctave/LSODE.cc b/liboctave/LSODE.cc
--- a/liboctave/LSODE.cc
+++ b/liboctave/LSODE.cc
@@ -188,21 +188,16 @@ LSODE::do_integrate (double tout)
           rwork(0) = stop_time;
           iopt = 1;
         }
       else
         {
           itask = 1;
         }
 
-      px = x.fortran_vec ();
-
-      piwork = iwork.fortran_vec ();
-      prwork = rwork.fortran_vec ();
-
       restart = false;
 
       // ODEFunc
 
       // NOTE: this won't work if LSODE passes copies of the state vector.
       //       In that case we have to create a temporary vector object
       //       and copy.
 
@@ -267,21 +262,26 @@ LSODE::do_integrate (double tout)
 
       octave_idx_type sl = step_limit ();
       if (sl > 0)
         {
           iwork(5) = sl;
           iopt = 1;
         }
 
-      pabs_tol = abs_tol.fortran_vec ();
-
       LSODE_options::reset = false;
     }
 
+  double *px = x.fortran_vec ();
+
+  double *pabs_tol = abs_tol.fortran_vec ();
+
+  octave_idx_type *piwork = iwork.fortran_vec ();
+  double *prwork = rwork.fortran_vec ();
+
   F77_XFCN (dlsode, DLSODE, (lsode_f, nn, px, t, tout, itol, rel_tol,
                              pabs_tol, itask, istate, iopt, prwork, lrw,
                              piwork, liw, lsode_j, method_flag));
 
   switch (istate)
     {
     case 1:  // prior to initial integration step.
     case 2:  // lsode was successful.
diff --git a/liboctave/LSODE.h b/liboctave/LSODE.h
--- a/liboctave/LSODE.h
+++ b/liboctave/LSODE.h
@@ -30,20 +30,25 @@ along with Octave; see the file COPYING.
 #include "lo-math.h"
 
 class
 OCTAVE_API
 LSODE : public ODE, public LSODE_options
 {
 public:
 
-  LSODE (void) : ODE (), LSODE_options (), initialized (false) { }
+  LSODE (void)
+    : ODE (), LSODE_options (), initialized (false), method_flag (0),
+      maxord (0), itask (0), iopt (0), itol (0), liw (0), lrw (0),
+      iwork (), rwork (), rel_tol (0.0), abs_tol () { }
 
   LSODE (const ColumnVector& s, double tm, const ODEFunc& f)
-    : ODE (s, tm, f), LSODE_options (), initialized (false) { }
+    : ODE (s, tm, f), LSODE_options (), initialized (false), method_flag (0),
+      maxord (0), itask (0), iopt (0), itol (0), liw (0), lrw (0),
+      iwork (), rwork (), rel_tol (0.0), abs_tol () { }
 
   ~LSODE (void) { }
 
   ColumnVector do_integrate (double t);
 
   Matrix do_integrate (const ColumnVector& tout);
 
   Matrix do_integrate (const ColumnVector& tout, const ColumnVector& tcrit);
@@ -64,16 +69,11 @@ private:
   octave_idx_type lrw;
 
   Array<octave_idx_type> iwork;
   Array<double> rwork;
 
   double rel_tol;
 
   Array<double> abs_tol;
-
-  double *px;
-  double *pabs_tol;
-  octave_idx_type *piwork;
-  double *prwork;
 };
 
 #endif
diff --git a/liboctave/ODES.h b/liboctave/ODES.h
--- a/liboctave/ODES.h
+++ b/liboctave/ODES.h
@@ -27,28 +27,28 @@ along with Octave; see the file COPYING.
 #include "base-de.h"
 
 class
 ODES : public base_diff_eqn, public ODESFunc
 {
 public:
 
   ODES (void)
-    : base_diff_eqn (), ODESFunc (), theta () { }
+    : base_diff_eqn (), ODESFunc (), xdot (), theta () { }
 
   ODES (const ColumnVector& s, double tm, ODESFunc& f)
     : base_diff_eqn (s, tm), ODESFunc (f), xdot (s.length (), 0.0), theta () { }
 
   ODES (const ColumnVector& s, const ColumnVector& xtheta, double tm,
         ODESFunc& f)
     : base_diff_eqn (s, tm), ODESFunc (f), xdot (s.length (), 0.0),
       theta (xtheta) { }
 
   ODES (const ODES& a)
-    : base_diff_eqn (a), ODESFunc (a), theta (a.theta) { }
+    : base_diff_eqn (a), ODESFunc (a), xdot (a.xdot), theta (a.theta) { }
 
   ODES& operator = (const ODES& a)
     {
       if (this != &a)
         {
           base_diff_eqn::operator = (a);
           ODESFunc::operator = (a);
 
