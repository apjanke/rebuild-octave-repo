# HG changeset patch
# User jwe
# Date 1168931032 0
#      Tue Jan 16 07:03:52 2007 +0000
# Node ID 64bad7c6a6077e751390ab1c3ff2a89722306788
# Parent  b84b59b614c580c8518506ab2c1fceedfda0d42b
[project @ 2007-01-16 07:03:51 by jwe]

diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,15 @@
+2007-01-16  John W. Eaton  <jwe@octave.org>
+
+	* dSparse.cc: Fix dgbtrf decl for --enable-64.
+	(SparseMatrix::bsolve): Fix call to dgbtrf for --enable-64
+
+	* oct-fftw.h (fftw_planner): Provide decl.
+
 2007-01-11  Michael Goffioul  <michael.goffioul@swing.be>
 
 	* Makefile.in (LINK_DEPS): Include $(CAMD_LIBS) in the list.
 
 2007-01-10  John W. Eaton  <jwe@octave.org>
 
 	* oct-sparse.h: Use HAVE_CHOLMOD_CHOLMOD_H, not
 	HAVE_UMFPACK_CHOLMOD_H for case of "cholmod/cholmod.h".
diff --git a/liboctave/dSparse.cc b/liboctave/dSparse.cc
--- a/liboctave/dSparse.cc
+++ b/liboctave/dSparse.cc
@@ -54,18 +54,20 @@ Boston, MA 02110-1301, USA.
 #ifndef USE_QRSOLVE
 #include "sparse-dmsolve.cc"
 #endif
 
 // Fortran functions we call.
 extern "C"
 {
   F77_RET_T
-  F77_FUNC (dgbtrf, DGBTRF) (const octave_idx_type&, const int&, const octave_idx_type&, 
-			     const octave_idx_type&, double*, const octave_idx_type&, octave_idx_type*, octave_idx_type&);
+  F77_FUNC (dgbtrf, DGBTRF) (const octave_idx_type&, const octave_idx_type&,
+			     const octave_idx_type&, const octave_idx_type&,
+			     double*, const octave_idx_type&,
+			     octave_idx_type*, octave_idx_type&);
 
   F77_RET_T
   F77_FUNC (dgbtrs, DGBTRS) (F77_CONST_CHAR_ARG_DECL, const octave_idx_type&,
 			     const octave_idx_type&, const octave_idx_type&, const octave_idx_type&, 
 			     const double*, const octave_idx_type&,
 			     const octave_idx_type*, double*, const octave_idx_type&, octave_idx_type&
 			     F77_CHAR_ARG_LEN_DECL);
 
@@ -4531,19 +4533,19 @@ SparseMatrix::bsolve (MatrixType &mattyp
 		    }
 		}
 	    }
 	}
 
       if (typ == MatrixType::Banded)
 	{
 	  // Create the storage for the banded form of the sparse matrix
-	  int n_upper = mattype.nupper ();
-	  int n_lower = mattype.nlower ();
-	  int ldm = n_upper + 2 * n_lower + 1;
+	  octave_idx_type n_upper = mattype.nupper ();
+	  octave_idx_type n_lower = mattype.nlower ();
+	  octave_idx_type ldm = n_upper + 2 * n_lower + 1;
 
 	  Matrix m_band (ldm, nc);
 	  double *tmp_data = m_band.fortran_vec ();
 	      
 	  if (! mattype.is_dense ()) 
 	    {
 	      octave_idx_type ii = 0;
 
@@ -4687,18 +4689,18 @@ SparseMatrix::bsolve (MatrixType &mattyp
   else
     {
       // Print spparms("spumoni") info if requested
       volatile int typ = mattype.type ();
       mattype.info ();
 
       if (typ == MatrixType::Banded_Hermitian)
 	{
-	  int n_lower = mattype.nlower ();
-	  int ldm = n_lower + 1;
+	  octave_idx_type n_lower = mattype.nlower ();
+	  octave_idx_type ldm = n_lower + 1;
 
 	  Matrix m_band (ldm, nc);
 	  double *tmp_data = m_band.fortran_vec ();
 	      
 	  if (! mattype.is_dense ()) 
 	    {
 	      octave_idx_type ii = 0;
 
@@ -5201,19 +5203,19 @@ SparseMatrix::bsolve (MatrixType &mattyp
 		    }
 		}
 	    }
 	}
 
       if (typ == MatrixType::Banded)
 	{
 	  // Create the storage for the banded form of the sparse matrix
-	  int n_upper = mattype.nupper ();
-	  int n_lower = mattype.nlower ();
-	  int ldm = n_upper + 2 * n_lower + 1;
+	  octave_idx_type n_upper = mattype.nupper ();
+	  octave_idx_type n_lower = mattype.nlower ();
+	  octave_idx_type ldm = n_upper + 2 * n_lower + 1;
 
 	  Matrix m_band (ldm, nc);
 	  double *tmp_data = m_band.fortran_vec ();
 	      
 	  if (! mattype.is_dense ()) 
 	    {
 	      octave_idx_type ii = 0;
 
@@ -5385,18 +5387,18 @@ SparseMatrix::bsolve (MatrixType &mattyp
   else
     {
       // Print spparms("spumoni") info if requested
       volatile int typ = mattype.type ();
       mattype.info ();
 
       if (typ == MatrixType::Banded_Hermitian)
 	{
-	  int n_lower = mattype.nlower ();
-	  int ldm = n_lower + 1;
+	  octave_idx_type n_lower = mattype.nlower ();
+	  octave_idx_type ldm = n_lower + 1;
 
 	  Matrix m_band (ldm, nc);
 	  double *tmp_data = m_band.fortran_vec ();
 	      
 	  if (! mattype.is_dense ()) 
 	    {
 	      octave_idx_type ii = 0;
 
@@ -5579,19 +5581,19 @@ SparseMatrix::bsolve (MatrixType &mattyp
 		    }
 		}
 	    }
 	}
 
       if (typ == MatrixType::Banded)
 	{
 	  // Create the storage for the banded form of the sparse matrix
-	  int n_upper = mattype.nupper ();
-	  int n_lower = mattype.nlower ();
-	  int ldm = n_upper + 2 * n_lower + 1;
+	  octave_idx_type n_upper = mattype.nupper ();
+	  octave_idx_type n_lower = mattype.nlower ();
+	  octave_idx_type ldm = n_upper + 2 * n_lower + 1;
 
 	  Matrix m_band (ldm, nc);
 	  double *tmp_data = m_band.fortran_vec ();
 	      
 	  if (! mattype.is_dense ()) 
 	    {
 	      octave_idx_type ii = 0;
 
diff --git a/liboctave/oct-fftw.h b/liboctave/oct-fftw.h
--- a/liboctave/oct-fftw.h
+++ b/liboctave/oct-fftw.h
@@ -99,16 +99,19 @@ private:
   octave_idx_type rh;
 
   // dims
   dim_vector rn;
 
   bool rsimd_align;
 };
 
+// FIXME -- maybe octave_fftw_planner should be a singleton object?
+extern octave_fftw_planner fftw_planner;
+
 class
 octave_fftw
 {
 public:
   static int fft (const double *in, Complex *out, size_t npts, 
 		  size_t nsamples = 1, octave_idx_type stride = 1, octave_idx_type dist = -1);
   static int fft (const Complex *in, Complex *out, size_t npts, 
 		  size_t nsamples = 1, octave_idx_type stride = 1, octave_idx_type dist = -1);
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,15 @@
+2007-01-16  John W. Eaton  <jwe@octave.org>
+
+	* DLD-FUNCTIONS/__pchip_deriv__.cc: Fix dpchim decl for --enable-64.
+	(F__pchip_deriv__): Fix call to dpchim for --enable-64.
+
+	* DLD-FUNCTIONS/fftw.cc: Delete decl for fftw_planner.
+
 2007-01-11  Michael Goffioul  <michael.goffioul@swing.be>
 
 	* load-path.h (class load_path): Tag with OCTINTERP_API.
 
 	* ls-oct-binary.cc (read_binary_data): Use unsigned char, not
 	char, for reading flags and data types.
 
 2007-01-10  Luis F. Ortiz  <lortiz@interactivesupercomputing.com>
diff --git a/src/DLD-FUNCTIONS/__pchip_deriv__.cc b/src/DLD-FUNCTIONS/__pchip_deriv__.cc
--- a/src/DLD-FUNCTIONS/__pchip_deriv__.cc
+++ b/src/DLD-FUNCTIONS/__pchip_deriv__.cc
@@ -29,19 +29,20 @@ 02110-1301, USA.
 #include "error.h"
 #include "gripes.h"
 #include "oct-obj.h"
 #include "utils.h"
 #include "f77-fcn.h"
 
 extern "C"
 {
-  extern int F77_FUNC (dpchim, DPCHIM)
-    (const int &n, double *x, double *f, double *d, const int &incfd,
-     int *ierr);
+  F77_RET_T
+  F77_FUNC (dpchim, DPCHIM) (const octave_idx_type& n, double *x, double *f,
+			     double *d, const octave_idx_type &incfd,
+			     octave_idx_type *ierr);
 }
 
 DEFUN_DLD(__pchip_deriv__, args, ,
   "-*- texinfo -*-\n\
 @deftypefn {Loadable Function} {} __pchip_deriv__ (@var{x}, @var{y})\n\
 Wrapper for SLATEC/PCHIP function DPCHIM to calculate the derivates for\n\
 piecewise polynomials.  You should be using @code{pchip} function instead.\n\
 @end deftypefn")
@@ -49,31 +50,31 @@ piecewise polynomials.  You should be us
   octave_value retval;
   const int nargin = args.length ();
 
   if (nargin == 2)
     {
       ColumnVector xvec (args(0).vector_value ());
       Matrix ymat (args(1).matrix_value ());
 
-      int nx = xvec.length ();
-      int nyr = ymat.rows ();
-      int nyc = ymat.columns ();
+      octave_idx_type nx = xvec.length ();
+      octave_idx_type nyr = ymat.rows ();
+      octave_idx_type nyc = ymat.columns ();
 
       if (nx != nyr)
         {
           error ("number of rows for x and y must match");
           return retval;
         }
 
       ColumnVector dvec (nx), yvec (nx);
       Matrix dmat (nyr, nyc);
 
-      int ierr;
-      const int incfd = 1;
+      octave_idx_type ierr;
+      const octave_idx_type incfd = 1;
       for (int c = 0; c < nyc; c++)
         {
           for (int r = 0; r < nx; r++)
 	    yvec(r) = ymat(r,c);
 
           F77_FUNC (dpchim, DPCHIM) (nx, xvec.fortran_vec (), 
 				     yvec.fortran_vec (), 
 				     dvec.fortran_vec (), incfd, &ierr);
diff --git a/src/DLD-FUNCTIONS/fftw.cc b/src/DLD-FUNCTIONS/fftw.cc
--- a/src/DLD-FUNCTIONS/fftw.cc
+++ b/src/DLD-FUNCTIONS/fftw.cc
@@ -29,18 +29,16 @@ 02110-1301, USA.
 #include "ov.h"
 #include "defun-dld.h"
 #include "error.h"
 
 #if defined (HAVE_FFTW3)
 #include "oct-fftw.h"
 #endif
 
-extern octave_fftw_planner fftw_planner;
-
 DEFUN_DLD (fftw, args, ,
   "-*- texinfo -*-\n\
 @deftypefn {Loadable Function} {@var{method} =} fftw ('planner')\n\
 @deftypefnx {Loadable Function} {} fftw ('planner', @var{method})\n\
 @deftypefnx {Loadable Function} {@var{wisdom} =} fftw ('dwisdom')\n\
 @deftypefnx {Loadable Function} {@var{wisdom} =} fftw ('dwisdom', @var{wisdom})\n\
 \n\
 Manage FFTW wisdom data. Wisdom data can be used to significantly\n\
