# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1264032275 18000
#      Wed Jan 20 19:04:35 2010 -0500
# Node ID 4c0cdbe0acca8df849d3253a603ce9b4495c45b2
# Parent  cf17f22f1fd40e44d56e063ae9d7c0dcc86cc1fb
remove Emacs local-variable settings from liboctave source files

diff --git a/liboctave/Array-C.cc b/liboctave/Array-C.cc
--- a/liboctave/Array-C.cc
+++ b/liboctave/Array-C.cc
@@ -100,14 +100,8 @@ template OCTAVE_API std::ostream& operat
 
 #include "DiagArray2.h"
 #include "DiagArray2.cc"
 
 #ifdef _MSC_VER
 template class OCTAVE_API DiagArray2<Complex>::Proxy;
 #endif
 template class OCTAVE_API DiagArray2<Complex>;
-
-/*
-;;; Local Variables: ***
-;;; mode: C++ ***
-;;; End: ***
-*/
diff --git a/liboctave/Array-b.cc b/liboctave/Array-b.cc
--- a/liboctave/Array-b.cc
+++ b/liboctave/Array-b.cc
@@ -113,14 +113,8 @@ INSTANTIATE_ARRAY (bool, OCTAVE_API);
 template class OCTAVE_API Array2<bool>;
 
 template OCTAVE_API std::ostream& operator << (std::ostream&, const Array<bool>&);
 
 #include "DiagArray2.h"
 #include "DiagArray2.cc"
 
 template class OCTAVE_API DiagArray2<bool>;
-
-/*
-;;; Local Variables: ***
-;;; mode: C++ ***
-;;; End: ***
-*/
diff --git a/liboctave/Array-ch.cc b/liboctave/Array-ch.cc
--- a/liboctave/Array-ch.cc
+++ b/liboctave/Array-ch.cc
@@ -40,14 +40,8 @@ INSTANTIATE_ARRAY (char, OCTAVE_API);
 template class OCTAVE_API Array2<char>;
 
 template OCTAVE_API std::ostream& operator << (std::ostream&, const Array<char>&);
 
 #include "DiagArray2.h"
 #include "DiagArray2.cc"
 
 template class OCTAVE_API DiagArray2<char>;
-
-/*
-;;; Local Variables: ***
-;;; mode: C++ ***
-;;; End: ***
-*/
diff --git a/liboctave/Array-d.cc b/liboctave/Array-d.cc
--- a/liboctave/Array-d.cc
+++ b/liboctave/Array-d.cc
@@ -167,14 +167,8 @@ template OCTAVE_API std::ostream& operat
 
 #include "DiagArray2.h"
 #include "DiagArray2.cc"
 
 #ifdef _MSC_VER
 template class OCTAVE_API DiagArray2<double>::Proxy;
 #endif
 template class OCTAVE_API DiagArray2<double>;
-
-/*
-;;; Local Variables: ***
-;;; mode: C++ ***
-;;; End: ***
-*/
diff --git a/liboctave/Array-f.cc b/liboctave/Array-f.cc
--- a/liboctave/Array-f.cc
+++ b/liboctave/Array-f.cc
@@ -167,14 +167,8 @@ template OCTAVE_API std::ostream& operat
 
 #include "DiagArray2.h"
 #include "DiagArray2.cc"
 
 #ifdef _MSC_VER
 template class OCTAVE_API DiagArray2<float>::Proxy;
 #endif
 template class OCTAVE_API DiagArray2<float>;
-
-/*
-;;; Local Variables: ***
-;;; mode: C++ ***
-;;; End: ***
-*/
diff --git a/liboctave/Array-fC.cc b/liboctave/Array-fC.cc
--- a/liboctave/Array-fC.cc
+++ b/liboctave/Array-fC.cc
@@ -101,14 +101,8 @@ template OCTAVE_API std::ostream& operat
 
 #include "DiagArray2.h"
 #include "DiagArray2.cc"
 
 #ifdef _MSC_VER
 template class OCTAVE_API DiagArray2<FloatComplex>::Proxy;
 #endif
 template class OCTAVE_API DiagArray2<FloatComplex>;
-
-/*
-;;; Local Variables: ***
-;;; mode: C++ ***
-;;; End: ***
-*/
diff --git a/liboctave/Array-i.cc b/liboctave/Array-i.cc
--- a/liboctave/Array-i.cc
+++ b/liboctave/Array-i.cc
@@ -71,14 +71,8 @@ INSTANTIATE_ARRAY (octave_uint64, OCTAVE
 #include "Array2.h"
 
 template class OCTAVE_API Array2<int>;
 
 #include "DiagArray2.h"
 #include "DiagArray2.cc"
 
 template class OCTAVE_API DiagArray2<int>;
-
-/*
-;;; Local Variables: ***
-;;; mode: C++ ***
-;;; End: ***
-*/
diff --git a/liboctave/Array-idx-vec.cc b/liboctave/Array-idx-vec.cc
--- a/liboctave/Array-idx-vec.cc
+++ b/liboctave/Array-idx-vec.cc
@@ -29,14 +29,8 @@ along with Octave; see the file COPYING.
 #include "idx-vector.h"
 
 #include "Array.h"
 #include "Array.cc"
 
 NO_INSTANTIATE_ARRAY_SORT (idx_vector);
 
 INSTANTIATE_ARRAY (idx_vector, OCTAVE_API);
-
-/*
-;;; Local Variables: ***
-;;; mode: C++ ***
-;;; End: ***
-*/
diff --git a/liboctave/Array-s.cc b/liboctave/Array-s.cc
--- a/liboctave/Array-s.cc
+++ b/liboctave/Array-s.cc
@@ -41,14 +41,8 @@ INSTANTIATE_ARRAY (short, OCTAVE_API);
 #include "Array2.h"
 
 template class Array2<short>;
 
 #include "DiagArray2.h"
 #include "DiagArray2.cc"
 
 template class DiagArray2<short>;
-
-/*
-;;; Local Variables: ***
-;;; mode: C++ ***
-;;; End: ***
-*/
diff --git a/liboctave/Array-str.cc b/liboctave/Array-str.cc
--- a/liboctave/Array-str.cc
+++ b/liboctave/Array-str.cc
@@ -30,14 +30,8 @@ along with Octave; see the file COPYING.
 
 #include "Array.h"
 #include "Array.cc"
 #include "oct-sort.cc"
 
 INSTANTIATE_ARRAY_SORT (std::string);
 
 INSTANTIATE_ARRAY (std::string, OCTAVE_API);
-
-/*
-;;; Local Variables: ***
-;;; mode: C++ ***
-;;; End: ***
-*/
diff --git a/liboctave/Array-util.cc b/liboctave/Array-util.cc
--- a/liboctave/Array-util.cc
+++ b/liboctave/Array-util.cc
@@ -646,14 +646,8 @@ gripe_nonconformant (const char *op, dim
 {
   std::string op1_dims_str = op1_dims.str ();
   std::string op2_dims_str = op2_dims.str ();
 
   (*current_liboctave_error_handler)
     ("%s: nonconformant arguments (op1 is %s, op2 is %s)",
      op, op1_dims_str.c_str (), op2_dims_str.c_str ());
 }
-
-/*
-;;; Local Variables: ***
-;;; mode: C++ ***
-;;; End: ***
-*/
diff --git a/liboctave/Array-util.h b/liboctave/Array-util.h
--- a/liboctave/Array-util.h
+++ b/liboctave/Array-util.h
@@ -98,14 +98,8 @@ extern void OCTAVE_API gripe_nonconforma
 extern void OCTAVE_API gripe_nonconformant (const char *op, int op1_nr, int op1_nc,
 				 int op2_nr, int op2_nc);
 
 
 extern void OCTAVE_API gripe_nonconformant (const char *op, dim_vector& op1_dims,
 				 dim_vector& op2_dims);
 
 #endif
-
-/*
-;;; Local Variables: ***
-;;; mode: C++ ***
-;;; End: ***
-*/
diff --git a/liboctave/Array-voidp.cc b/liboctave/Array-voidp.cc
--- a/liboctave/Array-voidp.cc
+++ b/liboctave/Array-voidp.cc
@@ -37,14 +37,8 @@ INSTANTIATE_ARRAY (void *, OCTAVE_API);
 
 #include "Array2.h"
 
 template class OCTAVE_API Array2<void *>;
 
 #include "Array3.h"
 
 template class OCTAVE_API Array3<void *>;
-
-/*
-;;; Local Variables: ***
-;;; mode: C++ ***
-;;; End: ***
-*/
diff --git a/liboctave/Array.cc b/liboctave/Array.cc
--- a/liboctave/Array.cc
+++ b/liboctave/Array.cc
@@ -2673,14 +2673,8 @@ operator << (std::ostream& os, const Arr
 	      if (i != m - 1)
 		increment_index (ra_idx, a_dims, 2);
             }
         }
     }
 
   return os;
 }
-
-/*
-;;; Local Variables: ***
-;;; mode: C++ ***
-;;; End: ***
-*/
diff --git a/liboctave/Array.h b/liboctave/Array.h
--- a/liboctave/Array.h
+++ b/liboctave/Array.h
@@ -725,14 +725,8 @@ public:
     { return ArrayClass::xelem (ra_idx); }
 };
 
 template <class T>
 std::ostream&
 operator << (std::ostream& os, const Array<T>& a);
 
 #endif
-
-/*
-;;; Local Variables: ***
-;;; mode: C++ ***
-;;; End: ***
-*/
diff --git a/liboctave/Array2.h b/liboctave/Array2.h
--- a/liboctave/Array2.h
+++ b/liboctave/Array2.h
@@ -154,14 +154,8 @@ public:
 
   template <class U>
   Array2<U>
   map (U (&fcn) (const T&)) const
   { return Array<T>::template map<U> (fcn); }
 };
 
 #endif
-
-/*
-;;; Local Variables: ***
-;;; mode: C++ ***
-;;; End: ***
-*/
diff --git a/liboctave/Array3.h b/liboctave/Array3.h
--- a/liboctave/Array3.h
+++ b/liboctave/Array3.h
@@ -84,14 +84,8 @@ public:
 		 sortmode mode = ASCENDING) const
     {
       Array<T> tmp = Array<T>::sort (sidx, dim, mode);
       return Array3<T> (tmp, tmp.rows (), tmp.columns (), tmp.pages ());
     }
 };
 
 #endif
-
-/*
-;;; Local Variables: ***
-;;; mode: C++ ***
-;;; End: ***
-*/
diff --git a/liboctave/ArrayN.h b/liboctave/ArrayN.h
--- a/liboctave/ArrayN.h
+++ b/liboctave/ArrayN.h
@@ -29,14 +29,8 @@ along with Octave; see the file COPYING.
 #define ArrayN Array
 
 // If we're with GNU C++, issue a warning.
 #ifdef __GNUC__
 #warning Using ArrayN<T> is deprecated. Use Array<T> directly.
 #endif
 
 #endif
-
-/*
-;;; Local Variables: ***
-;;; mode: C++ ***
-;;; End: ***
-*/
diff --git a/liboctave/CColVector.cc b/liboctave/CColVector.cc
--- a/liboctave/CColVector.cc
+++ b/liboctave/CColVector.cc
@@ -518,14 +518,8 @@ operator >> (std::istream& is, ComplexCo
           if (is)
             a.elem (i) = tmp;
           else
             break;
         }
     }
   return is;
 }
-
-/*
-;;; Local Variables: ***
-;;; mode: C++ ***
-;;; End: ***
-*/
diff --git a/liboctave/CColVector.h b/liboctave/CColVector.h
--- a/liboctave/CColVector.h
+++ b/liboctave/CColVector.h
@@ -127,14 +127,8 @@ public:
 private:
 
   ComplexColumnVector (Complex *d, octave_idx_type l) : MArray<Complex> (d, l) { }
 };
 
 MARRAY_FORWARD_DEFS (MArray, ComplexColumnVector, Complex)
 
 #endif
-
-/*
-;;; Local Variables: ***
-;;; mode: C++ ***
-;;; End: ***
-*/
diff --git a/liboctave/CDiagMatrix.cc b/liboctave/CDiagMatrix.cc
--- a/liboctave/CDiagMatrix.cc
+++ b/liboctave/CDiagMatrix.cc
@@ -575,14 +575,8 @@ operator << (std::ostream& os, const Com
 	    os << " " /* setw (field_width) */ << a.elem (i, i);
 	  else
 	    os << " " /* setw (field_width) */ << ZERO;
 	}
       os << "\n";
     }
   return os;
 }
-
-/*
-;;; Local Variables: ***
-;;; mode: C++ ***
-;;; End: ***
-*/
diff --git a/liboctave/CDiagMatrix.h b/liboctave/CDiagMatrix.h
--- a/liboctave/CDiagMatrix.h
+++ b/liboctave/CDiagMatrix.h
@@ -151,14 +151,8 @@ OCTAVE_API ComplexDiagMatrix
 operator * (const ComplexDiagMatrix& a, const DiagMatrix& b);
 
 OCTAVE_API ComplexDiagMatrix
 operator * (const DiagMatrix& a, const ComplexDiagMatrix& b);
 
 MDIAGARRAY2_FORWARD_DEFS (MDiagArray2, ComplexDiagMatrix, Complex)
 
 #endif
-
-/*
-;;; Local Variables: ***
-;;; mode: C++ ***
-;;; End: ***
-*/
diff --git a/liboctave/CMatrix.cc b/liboctave/CMatrix.cc
--- a/liboctave/CMatrix.cc
+++ b/liboctave/CMatrix.cc
@@ -4088,14 +4088,8 @@ ComplexMatrix linspace (const ComplexCol
 MS_CMP_OPS (ComplexMatrix, Complex)
 MS_BOOL_OPS (ComplexMatrix, Complex)
 
 SM_CMP_OPS (Complex, ComplexMatrix)
 SM_BOOL_OPS (Complex, ComplexMatrix)
 
 MM_CMP_OPS (ComplexMatrix, ComplexMatrix)
 MM_BOOL_OPS (ComplexMatrix, ComplexMatrix)
-
-/*
-;;; Local Variables: ***
-;;; mode: C++ ***
-;;; End: ***
-*/
diff --git a/liboctave/CMatrix.h b/liboctave/CMatrix.h
--- a/liboctave/CMatrix.h
+++ b/liboctave/CMatrix.h
@@ -426,14 +426,8 @@ SM_CMP_OP_DECLS (Complex, ComplexMatrix,
 SM_BOOL_OP_DECLS (Complex, ComplexMatrix, OCTAVE_API)
 
 MM_CMP_OP_DECLS (ComplexMatrix, ComplexMatrix, OCTAVE_API)
 MM_BOOL_OP_DECLS (ComplexMatrix, ComplexMatrix, OCTAVE_API)
 
 MARRAY_FORWARD_DEFS (MArray2, ComplexMatrix, Complex)
 
 #endif
-
-/*
-;;; Local Variables: ***
-;;; mode: C++ ***
-;;; End: ***
-*/
diff --git a/liboctave/CNDArray.cc b/liboctave/CNDArray.cc
--- a/liboctave/CNDArray.cc
+++ b/liboctave/CNDArray.cc
@@ -976,14 +976,8 @@ ComplexNDArray& operator /= (ComplexNDAr
     do_ms_inplace_op<ComplexNDArray, double> (a, s, mx_inline_div2);
   return a;
 }
 
 BSXFUN_STDOP_DEFS_MXLOOP (ComplexNDArray)
 BSXFUN_STDREL_DEFS_MXLOOP (ComplexNDArray)
 
 BSXFUN_OP_DEF_MXLOOP (pow, ComplexNDArray, mx_inline_pow)
-
-/*
-;;; Local Variables: ***
-;;; mode: C++ ***
-;;; End: ***
-*/
diff --git a/liboctave/CNDArray.h b/liboctave/CNDArray.h
--- a/liboctave/CNDArray.h
+++ b/liboctave/CNDArray.h
@@ -179,14 +179,8 @@ extern OCTAVE_API ComplexNDArray& operat
 extern OCTAVE_API ComplexNDArray& operator /= (ComplexNDArray& a, double s);
 
 BSXFUN_STDOP_DECLS (ComplexNDArray, OCTAVE_API)
 BSXFUN_STDREL_DECLS (ComplexNDArray, OCTAVE_API)
 
 BSXFUN_OP_DECL (pow, ComplexNDArray, OCTAVE_API)
 
 #endif
-
-/*
-;;; Local Variables: ***
-;;; mode: C++ ***
-;;; End: ***
-*/
diff --git a/liboctave/CRowVector.cc b/liboctave/CRowVector.cc
--- a/liboctave/CRowVector.cc
+++ b/liboctave/CRowVector.cc
@@ -477,14 +477,8 @@ linspace (const Complex& x1, const Compl
   Complex delta = (x2 - x1) / (n - 1.0);
   retval(0) = x1;
   for (octave_idx_type i = 1; i < n-1; i++)
     retval(i) = x1 + static_cast<double> (i)*delta;
   retval(n-1) = x2;
 
   return retval;
 }
-
-/*
-;;; Local Variables: ***
-;;; mode: C++ ***
-;;; End: ***
-*/
diff --git a/liboctave/CRowVector.h b/liboctave/CRowVector.h
--- a/liboctave/CRowVector.h
+++ b/liboctave/CRowVector.h
@@ -119,14 +119,8 @@ Complex operator * (const ComplexRowVect
 
 // other operations
 
 OCTAVE_API ComplexRowVector linspace (const Complex& x1, const Complex& x2, octave_idx_type n);
 
 MARRAY_FORWARD_DEFS (MArray, ComplexRowVector, Complex)
 
 #endif
-
-/*
-;;; Local Variables: ***
-;;; mode: C++ ***
-;;; End: ***
-*/
diff --git a/liboctave/CSparse.cc b/liboctave/CSparse.cc
--- a/liboctave/CSparse.cc
+++ b/liboctave/CSparse.cc
@@ -7895,14 +7895,8 @@ SPARSE_SMS_BOOL_OPS (SparseComplexMatrix
 
 SPARSE_SSM_CMP_OPS (Complex, 0.0, real, SparseComplexMatrix, 
 		   0.0, real)
 SPARSE_SSM_BOOL_OPS (Complex, SparseComplexMatrix, 0.0)
 
 SPARSE_SMSM_CMP_OPS (SparseComplexMatrix, 0.0, real, SparseComplexMatrix, 
 		     0.0, real)
 SPARSE_SMSM_BOOL_OPS (SparseComplexMatrix, SparseComplexMatrix, 0.0)
-
-/*
-;;; Local Variables: ***
-;;; mode: C++ ***
-;;; End: ***
-*/
diff --git a/liboctave/CSparse.h b/liboctave/CSparse.h
--- a/liboctave/CSparse.h
+++ b/liboctave/CSparse.h
@@ -524,14 +524,8 @@ SPARSE_FORWARD_DEFS (MSparse, SparseComp
 
 #ifdef IDX_TYPE_LONG
 #define UMFPACK_ZNAME(name) umfpack_zl_ ## name
 #else
 #define UMFPACK_ZNAME(name) umfpack_zi_ ## name
 #endif
 
 #endif
-
-/*
-;;; Local Variables: ***
-;;; mode: C++ ***
-;;; End: ***
-*/
diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,92 @@
+2010-01-20  John W. Eaton  <jwe@octave.org>
+
+	* Array-C.cc, Array-b.cc, Array-ch.cc, Array-d.cc, Array-f.cc,
+	Array-fC.cc, Array-i.cc, Array-idx-vec.cc, Array-s.cc,
+	Array-str.cc, Array-util.cc, Array-voidp.cc, Array.cc,
+	CColVector.cc, CDiagMatrix.cc, CMatrix.cc, CNDArray.cc,
+	CRowVector.cc, CSparse.cc, CmplxAEPBAL.cc, CmplxCHOL.cc,
+	CmplxGEPBAL.cc, CmplxHESS.cc, CmplxLU.cc, CmplxQR.cc,
+	CmplxQRP.cc, CmplxSCHUR.cc, CmplxSVD.cc, CollocWt.cc, DASPK.cc,
+	DASRT.cc, DASSL.cc, DiagArray2.cc, EIG.cc, LSODE.cc,
+	MArray-C.cc, MArray-ch.cc, MArray-d.cc, MArray-f.cc,
+	MArray-fC.cc, MArray-i.cc, MArray-s.cc, MArray.cc, MArray2.cc,
+	MArrayN.cc, MDiagArray2.cc, MSparse-C.cc, MSparse-d.cc,
+	MSparse.cc, MatrixType.cc, ODES.cc, Quad.cc, Range.cc,
+	Sparse-C.cc, Sparse-b.cc, Sparse-d.cc, Sparse.cc,
+	SparseCmplxCHOL.cc, SparseCmplxLU.cc, SparseCmplxQR.cc,
+	SparseQR.cc, SparsedbleCHOL.cc, SparsedbleLU.cc, base-lu.cc,
+	boolMatrix.cc, boolNDArray.cc, boolSparse.cc, chMatrix.cc,
+	chNDArray.cc, cmd-edit.cc, cmd-hist.cc, dColVector.cc,
+	dDiagMatrix.cc, dMatrix.cc, dNDArray.cc, dRowVector.cc,
+	dSparse.cc, data-conv.cc, dbleAEPBAL.cc, dbleCHOL.cc,
+	dbleGEPBAL.cc, dbleHESS.cc, dbleLU.cc, dbleQR.cc, dbleQRP.cc,
+	dbleSCHUR.cc, dbleSVD.cc, dir-ops.cc, eigs-base.cc,
+	fCColVector.cc, fCDiagMatrix.cc, fCMatrix.cc, fCNDArray.cc,
+	fCRowVector.cc, fCmplxAEPBAL.cc, fCmplxCHOL.cc, fCmplxGEPBAL.cc,
+	fCmplxHESS.cc, fCmplxLU.cc, fCmplxQR.cc, fCmplxQRP.cc,
+	fCmplxSCHUR.cc, fCmplxSVD.cc, fColVector.cc, fDiagMatrix.cc,
+	fEIG.cc, fMatrix.cc, fNDArray.cc, fRowVector.cc, file-ops.cc,
+	file-stat.cc, floatAEPBAL.cc, floatCHOL.cc, floatGEPBAL.cc,
+	floatHESS.cc, floatLU.cc, floatQR.cc, floatQRP.cc,
+	floatSCHUR.cc, floatSVD.cc, glob-match.cc, idx-vector.cc,
+	int16NDArray.cc, int32NDArray.cc, int64NDArray.cc,
+	int8NDArray.cc, intNDArray.cc, kpse.cc, lo-ieee.cc,
+	lo-mappers.cc, lo-specfun.cc, lo-sysdep.cc, lo-utils.cc,
+	mach-info.cc, mx-inlines.cc, oct-alloc.cc, oct-env.cc,
+	oct-fftw.cc, oct-group.cc, oct-inttypes.cc, oct-md5.cc,
+	oct-passwd.cc, oct-rand.cc, oct-shlib.cc, oct-sort.cc,
+	oct-spparms.cc, oct-syscalls.cc, oct-time.cc, oct-uname.cc,
+	pathsearch.cc, prog-args.cc, regex-match.cc,
+	sparse-base-chol.cc, sparse-base-lu.cc, sparse-dmsolve.cc,
+	sparse-sort.cc, sparse-util.cc, str-vec.cc, uint16NDArray.cc,
+	uint32NDArray.cc, uint64NDArray.cc, uint8NDArray.cc,
+	f2c-main.c, lo-cieee.c, lo-cutils.c, oct-getopt.c,
+	oct-rl-edit.c, oct-rl-hist.c, randgamma.c, randmtzig.c,
+	randpoisson.c, Array-util.h, Array.h, Array2.h, Array3.h,
+	ArrayN.h, CColVector.h, CDiagMatrix.h, CMatrix.h, CNDArray.h,
+	CRowVector.h, CSparse.h, CmplxAEPBAL.h, CmplxCHOL.h,
+	CmplxGEPBAL.h, CmplxHESS.h, CmplxLU.h, CmplxQR.h, CmplxQRP.h,
+	CmplxSCHUR.h, CmplxSVD.h, CollocWt.h, DAE.h, DAEFunc.h, DAERT.h,
+	DAERTFunc.h, DASPK.h, DASRT.h, DASSL.h, DiagArray2.h, EIG.h,
+	LSODE.h, MArray.h, MArray2.h, MArrayN.h, MDiagArray2.h,
+	MSparse-defs.h, MSparse.h, Matrix.h, MatrixType.h, ODE.h,
+	ODEFunc.h, ODES.h, ODESFunc.h, Quad.h, Range.h,
+	Sparse-op-defs.h, Sparse.h, SparseCmplxCHOL.h, SparseCmplxLU.h,
+	SparseCmplxQR.h, SparseQR.h, SparsedbleCHOL.h, SparsedbleLU.h,
+	base-dae.h, base-de.h, base-lu.h, base-min.h, boolMatrix.h,
+	boolNDArray.h, boolSparse.h, byte-swap.h, chMatrix.h,
+	chNDArray.h, cmd-edit.h, cmd-hist.h, dColVector.h,
+	dDiagMatrix.h, dMatrix.h, dNDArray.h, dRowVector.h, dSparse.h,
+	data-conv.h, dbleAEPBAL.h, dbleCHOL.h, dbleGEPBAL.h, dbleHESS.h,
+	dbleLU.h, dbleQR.h, dbleQRP.h, dbleSCHUR.h, dbleSVD.h,
+	dir-ops.h, fCColVector.h, fCDiagMatrix.h, fCMatrix.h,
+	fCNDArray.h, fCRowVector.h, fCmplxAEPBAL.h, fCmplxCHOL.h,
+	fCmplxGEPBAL.h, fCmplxHESS.h, fCmplxLU.h, fCmplxQR.h,
+	fCmplxQRP.h, fCmplxSCHUR.h, fCmplxSVD.h, fColVector.h,
+	fDiagMatrix.h, fEIG.h, fMatrix.h, fNDArray.h, fRowVector.h,
+	file-ops.h, file-stat.h, floatAEPBAL.h, floatCHOL.h,
+	floatGEPBAL.h, floatHESS.h, floatLU.h, floatQR.h, floatQRP.h,
+	floatSCHUR.h, floatSVD.h, functor.h, glob-match.h, idx-vector.h,
+	int16NDArray.h, int32NDArray.h, int64NDArray.h, int8NDArray.h,
+	intNDArray.h, kpse-xfns.h, lo-ieee.h, lo-mappers.h, lo-math.h,
+	lo-specfun.h, lo-sysdep.h, lo-traits.h, lo-utils.h, mach-info.h,
+	mx-base.h, mx-defs.h, mx-ext.h, mx-op-defs.h, oct-alloc.h,
+	oct-cmplx.h, oct-env.h, oct-fftw.h, oct-getopt.h, oct-group.h,
+	oct-inttypes.h, oct-md5.h, oct-passwd.h, oct-rand.h,
+	oct-rl-edit.h, oct-rl-hist.h, oct-shlib.h, oct-sort.h,
+	oct-spparms.h, oct-syscalls.h, oct-time.h, oct-uname.h,
+	pathlen.h, pathsearch.h, prog-args.h, randgamma.h, randmtzig.h,
+	randpoisson.h, regex-match.h, sparse-base-chol.h,
+	sparse-base-lu.h, sparse-sort.h, sparse-util.h, statdefs.h,
+	str-vec.h, sun-utils.h, sysdir.h, systime.h, syswait.h,
+	uint16NDArray.h, uint32NDArray.h, uint64NDArray.h,
+	uint8NDArray.h: Remove Emacs local-variables settings.
+
 2010-01-20  Jaroslav Hajek  <highegg@gmail.com>
 
 	* boolNDArray.cc (boolNDArray::cumsum): Sum directly in double to
 	avoid a copy.
 
 2010-01-20  John W. Eaton  <jwe@octave.org>
 
 	* dim-vector.h: Style fixes.  Remove Emacs local variables block.
diff --git a/liboctave/CmplxAEPBAL.cc b/liboctave/CmplxAEPBAL.cc
--- a/liboctave/CmplxAEPBAL.cc
+++ b/liboctave/CmplxAEPBAL.cc
@@ -96,14 +96,8 @@ ComplexAEPBALANCE::balancing_matrix (voi
 			     F77_CONST_CHAR_ARG2 (&side, 1),
 			     n, ilo, ihi, pscale, n,
 			     p_balancing_mat, n, info
 			     F77_CHAR_ARG_LEN (1)
 			     F77_CHAR_ARG_LEN (1)));
 
   return balancing_mat;
 }
-
-/*
-;;; Local Variables: ***
-;;; mode: C++ ***
-;;; End: ***
-*/
diff --git a/liboctave/CmplxAEPBAL.h b/liboctave/CmplxAEPBAL.h
--- a/liboctave/CmplxAEPBAL.h
+++ b/liboctave/CmplxAEPBAL.h
@@ -45,14 +45,8 @@ public:
 
   ComplexAEPBALANCE (const ComplexAEPBALANCE& a) 
     : base_aepbal<ComplexMatrix, ColumnVector> (a) { }
 
   ComplexMatrix balancing_matrix (void) const;
 };
 
 #endif
-
-/*
-;;; Local Variables: ***
-;;; mode: C++ ***
-;;; End: ***
-*/
diff --git a/liboctave/CmplxCHOL.cc b/liboctave/CmplxCHOL.cc
--- a/liboctave/CmplxCHOL.cc
+++ b/liboctave/CmplxCHOL.cc
@@ -434,14 +434,8 @@ ComplexCHOL::shift_sym (octave_idx_type 
 
 #endif
 
 ComplexMatrix
 chol2inv (const ComplexMatrix& r)
 {
   return chol2inv_internal (r);
 }
-
-/*
-;;; Local Variables: ***
-;;; mode: C++ ***
-;;; End: ***
-*/
diff --git a/liboctave/CmplxCHOL.h b/liboctave/CmplxCHOL.h
--- a/liboctave/CmplxCHOL.h
+++ b/liboctave/CmplxCHOL.h
@@ -86,14 +86,8 @@ private:
   double xrcond;
 
   octave_idx_type init (const ComplexMatrix& a, bool calc_cond);
 };
 
 ComplexMatrix OCTAVE_API chol2inv (const ComplexMatrix& r);
 
 #endif
-
-/*
-;;; Local Variables: ***
-;;; mode: C++ ***
-;;; End: ***
-*/
diff --git a/liboctave/CmplxGEPBAL.cc b/liboctave/CmplxGEPBAL.cc
--- a/liboctave/CmplxGEPBAL.cc
+++ b/liboctave/CmplxGEPBAL.cc
@@ -118,14 +118,8 @@ ComplexGEPBALANCE::init (const ComplexMa
 			     F77_CONST_CHAR_ARG2 ("R", 1),
 			     n, ilo, ihi, plscale, prscale,
 			     n, p_balancing_mat2, n, info
 			     F77_CHAR_ARG_LEN (1)
 			     F77_CHAR_ARG_LEN (1)));
 
   return info;
 }
-
-/*
-;;; Local Variables: ***
-;;; mode: C++ ***
-;;; End: ***
-*/
diff --git a/liboctave/CmplxGEPBAL.h b/liboctave/CmplxGEPBAL.h
--- a/liboctave/CmplxGEPBAL.h
+++ b/liboctave/CmplxGEPBAL.h
@@ -78,14 +78,8 @@ private:
   Matrix balancing_mat;
   Matrix balancing_mat2;
 
   octave_idx_type init (const ComplexMatrix& a, const ComplexMatrix& b, 
 			const std::string& balance_job);
 };
 
 #endif
-
-/*
-;;; Local Variables: ***
-;;; mode: C++ ***
-;;; End: ***
-*/
diff --git a/liboctave/CmplxHESS.cc b/liboctave/CmplxHESS.cc
--- a/liboctave/CmplxHESS.cc
+++ b/liboctave/CmplxHESS.cc
@@ -114,14 +114,8 @@ ComplexHESS::init (const ComplexMatrix& 
 
   if (n > 2)
     for (octave_idx_type j = 0; j < a_nc; j++)
       for (octave_idx_type i = j+2; i < a_nr; i++)
 	hess_mat.elem (i, j) = 0;
 
   return info;
 }
-
-/*
-;;; Local Variables: ***
-;;; mode: C++ ***
-;;; End: ***
-*/
diff --git a/liboctave/CmplxHESS.h b/liboctave/CmplxHESS.h
--- a/liboctave/CmplxHESS.h
+++ b/liboctave/CmplxHESS.h
@@ -68,14 +68,8 @@ private:
 
   ComplexMatrix hess_mat;
   ComplexMatrix unitary_hess_mat;
 
   octave_idx_type init (const ComplexMatrix& a);
 };
 
 #endif
-
-/*
-;;; Local Variables: ***
-;;; mode: C++ ***
-;;; End: ***
-*/
diff --git a/liboctave/CmplxLU.cc b/liboctave/CmplxLU.cc
--- a/liboctave/CmplxLU.cc
+++ b/liboctave/CmplxLU.cc
@@ -203,14 +203,8 @@ void ComplexLU::update_piv (const Comple
 }
 
 void ComplexLU::update_piv (const ComplexMatrix&, const ComplexMatrix&)
 {
   (*current_liboctave_error_handler) ("luupdate: not available in this version");
 }
 
 #endif
-
-/*
-;;; Local Variables: ***
-;;; mode: C++ ***
-;;; End: ***
-*/
diff --git a/liboctave/CmplxLU.h b/liboctave/CmplxLU.h
--- a/liboctave/CmplxLU.h
+++ b/liboctave/CmplxLU.h
@@ -61,14 +61,8 @@ public:
   void update (const ComplexMatrix& u, const ComplexMatrix& v);
 
   void update_piv (const ComplexColumnVector& u, const ComplexColumnVector& v);
 
   void update_piv (const ComplexMatrix& u, const ComplexMatrix& v);
 };
 
 #endif
-
-/*
-;;; Local Variables: ***
-;;; mode: C++ ***
-;;; End: ***
-*/
diff --git a/liboctave/CmplxQR.cc b/liboctave/CmplxQR.cc
--- a/liboctave/CmplxQR.cc
+++ b/liboctave/CmplxQR.cc
@@ -684,14 +684,8 @@ ComplexQR::shift_cols (octave_idx_type i
     (*current_liboctave_error_handler) ("qrshift: index out of range");
   else
     {
       init (::shift_cols (q*r, i, j), get_type ());
     }
 }
 
 #endif
-
-/*
-;;; Local Variables: ***
-;;; mode: C++ ***
-;;; End: ***
-*/
diff --git a/liboctave/CmplxQR.h b/liboctave/CmplxQR.h
--- a/liboctave/CmplxQR.h
+++ b/liboctave/CmplxQR.h
@@ -70,14 +70,8 @@ public:
 
 protected:
 
   void form (octave_idx_type n, ComplexMatrix& afact, 
              Complex *tau, qr_type_t qr_type);
 };
 
 #endif
-
-/*
-;;; Local Variables: ***
-;;; mode: C++ ***
-;;; End: ***
-*/
diff --git a/liboctave/CmplxQRP.cc b/liboctave/CmplxQRP.cc
--- a/liboctave/CmplxQRP.cc
+++ b/liboctave/CmplxQRP.cc
@@ -98,14 +98,8 @@ ComplexQRP::init (const ComplexMatrix& a
 
 ColumnVector
 ComplexQRP::Pvec (void) const
 {
   Array<double> pa (p.pvec ());
   ColumnVector pv (MArray<double> (pa) + 1.0);
   return pv;
 }
-
-/*
-;;; Local Variables: ***
-;;; mode: C++ ***
-;;; End: ***
-*/
diff --git a/liboctave/CmplxQRP.h b/liboctave/CmplxQRP.h
--- a/liboctave/CmplxQRP.h
+++ b/liboctave/CmplxQRP.h
@@ -63,14 +63,8 @@ public:
   friend std::ostream&  operator << (std::ostream&, const ComplexQRP&);
 
 private:
 
   PermMatrix p;
 };
 
 #endif
-
-/*
-;;; Local Variables: ***
-;;; mode: C++ ***
-;;; End: ***
-*/
diff --git a/liboctave/CmplxSCHUR.cc b/liboctave/CmplxSCHUR.cc
--- a/liboctave/CmplxSCHUR.cc
+++ b/liboctave/CmplxSCHUR.cc
@@ -129,14 +129,8 @@ ComplexSCHUR::init (const ComplexMatrix&
 			     n, s, n, sdim, pw, q, n, rconde, rcondv,
 			     pwork, lwork, prwork, pbwork, info
 			     F77_CHAR_ARG_LEN (1)
 			     F77_CHAR_ARG_LEN (1)
 			     F77_CHAR_ARG_LEN (1)));
 
   return info;
 }
-
-/*
-;;; Local Variables: ***
-;;; mode: C++ ***
-;;; End: ***
-*/
diff --git a/liboctave/CmplxSCHUR.h b/liboctave/CmplxSCHUR.h
--- a/liboctave/CmplxSCHUR.h
+++ b/liboctave/CmplxSCHUR.h
@@ -75,14 +75,8 @@ private:
   ComplexMatrix unitary_mat;
 
   select_function selector;
 
   octave_idx_type init (const ComplexMatrix& a, const std::string& ord, bool calc_unitary);
 };
 
 #endif
-
-/*
-;;; Local Variables: ***
-;;; mode: C++ ***
-;;; End: ***
-*/
diff --git a/liboctave/CmplxSVD.cc b/liboctave/CmplxSVD.cc
--- a/liboctave/CmplxSVD.cc
+++ b/liboctave/CmplxSVD.cc
@@ -160,14 +160,8 @@ ComplexSVD::init (const ComplexMatrix& a
 			     F77_CHAR_ARG_LEN (1)
 			     F77_CHAR_ARG_LEN (1)));
 
   if (! (jobv == 'N' || jobv == 'O'))
     right_sm = right_sm.hermitian ();
 
   return info;
 }
-
-/*
-;;; Local Variables: ***
-;;; mode: C++ ***
-;;; End: ***
-*/
diff --git a/liboctave/CmplxSVD.h b/liboctave/CmplxSVD.h
--- a/liboctave/CmplxSVD.h
+++ b/liboctave/CmplxSVD.h
@@ -82,14 +82,8 @@ private:
   DiagMatrix sigma;
   ComplexMatrix left_sm;
   ComplexMatrix right_sm;
 
   octave_idx_type init (const ComplexMatrix& a, SVD::type svd_type = SVD::std);
 };
 
 #endif
-
-/*
-;;; Local Variables: ***
-;;; mode: C++ ***
-;;; End: ***
-*/
diff --git a/liboctave/CollocWt.cc b/liboctave/CollocWt.cc
--- a/liboctave/CollocWt.cc
+++ b/liboctave/CollocWt.cc
@@ -180,14 +180,8 @@ operator << (std::ostream& os, const Col
   os << a.Alpha << " " << a.Beta << "\n\n"
      << a.r << "\n\n"
      << a.q << "\n\n"
      << a.A << "\n"
      << a.B << "\n";
 
   return os;
 }
-
-/*
-;;; Local Variables: ***
-;;; mode: C++ ***
-;;; End: ***
-*/
diff --git a/liboctave/CollocWt.h b/liboctave/CollocWt.h
--- a/liboctave/CollocWt.h
+++ b/liboctave/CollocWt.h
@@ -181,14 +181,8 @@ protected:
   int initialized;
 
   void init (void);
 
   void error (const char *msg);
 };
 
 #endif
-
-/*
-;;; Local Variables: ***
-;;; mode: C++ ***
-;;; End: ***
-*/
diff --git a/liboctave/DAE.h b/liboctave/DAE.h
--- a/liboctave/DAE.h
+++ b/liboctave/DAE.h
@@ -55,14 +55,8 @@ public:
 	}
       return *this;
     }
 
   ~DAE (void) { }
 };
 
 #endif
-
-/*
-;;; Local Variables: ***
-;;; mode: C++ ***
-;;; End: ***
-*/
diff --git a/liboctave/DAEFunc.h b/liboctave/DAEFunc.h
--- a/liboctave/DAEFunc.h
+++ b/liboctave/DAEFunc.h
@@ -96,14 +96,8 @@ protected:
   // after any internal data has changed.  Derived classes may use
   // this information (and change it) to know when to (re)initialize
   // their own internal data related to this object.
 
   bool reset;
 };
 
 #endif
-
-/*
-;;; Local Variables: ***
-;;; mode: C++ ***
-;;; End: ***
-*/
diff --git a/liboctave/DAERT.h b/liboctave/DAERT.h
--- a/liboctave/DAERT.h
+++ b/liboctave/DAERT.h
@@ -61,14 +61,8 @@ public:
   void initialize (const ColumnVector& xx, const ColumnVector& xxdot,
 		   double tt)
     {
       base_diff_alg_eqn::initialize (xx, xxdot, tt);
     }
 };
 
 #endif
-
-/*
-;;; Local Variables: ***
-;;; mode: C++ ***
-;;; End: ***
-*/
diff --git a/liboctave/DAERTFunc.h b/liboctave/DAERTFunc.h
--- a/liboctave/DAERTFunc.h
+++ b/liboctave/DAERTFunc.h
@@ -80,14 +80,8 @@ protected:
   // after any internal data has changed.  Derived classes may use
   // this information (and change it) to know when to (re)initialize
   // their own internal data related to this object.
 
   bool reset;
 };
 
 #endif
-
-/*
-;;; Local Variables: ***
-;;; mode: C++ ***
-;;; End: ***
-*/
diff --git a/liboctave/DASPK.cc b/liboctave/DASPK.cc
--- a/liboctave/DASPK.cc
+++ b/liboctave/DASPK.cc
@@ -767,14 +767,8 @@ DASPK::error_message (void) const
 
     default:
       retval = "unknown error state";
       break;
     }
 
   return retval;
 }
-
-/*
-;;; Local Variables: ***
-;;; mode: C++ ***
-;;; End: ***
-*/
diff --git a/liboctave/DASPK.h b/liboctave/DASPK.h
--- a/liboctave/DASPK.h
+++ b/liboctave/DASPK.h
@@ -79,14 +79,8 @@ private:
   double *pabs_tol;
   double *prel_tol;
   octave_idx_type *pinfo;
   octave_idx_type *piwork;
   double *prwork;
 };
 
 #endif
-
-/*
-;;; Local Variables: ***
-;;; mode: C++ ***
-;;; End: ***
-*/
diff --git a/liboctave/DASRT.cc b/liboctave/DASRT.cc
--- a/liboctave/DASRT.cc
+++ b/liboctave/DASRT.cc
@@ -634,14 +634,8 @@ DASRT::error_message (void) const
 
     default:
       retval = "unknown error state";
       break;
     }
 
   return retval;
 }
-
-/*
-;;; Local Variables: ***
-;;; mode: C++ ***
-;;; End: ***
-*/
diff --git a/liboctave/DASRT.h b/liboctave/DASRT.h
--- a/liboctave/DASRT.h
+++ b/liboctave/DASRT.h
@@ -115,14 +115,8 @@ private:
   octave_idx_type *piwork;
   double *prwork;
   octave_idx_type *pjroot;
 
   void integrate (double t);
 };
 
 #endif
-
-/*
-;;; Local Variables: ***
-;;; mode: C++ ***
-;;; End: ***
-*/
diff --git a/liboctave/DASSL.cc b/liboctave/DASSL.cc
--- a/liboctave/DASSL.cc
+++ b/liboctave/DASSL.cc
@@ -569,14 +569,8 @@ DASSL::error_message (void) const
 
     default:
       retval = "unknown error state";
       break;
     }
 
   return retval;
 }
-
-/*
-;;; Local Variables: ***
-;;; mode: C++ ***
-;;; End: ***
-*/
diff --git a/liboctave/DASSL.h b/liboctave/DASSL.h
--- a/liboctave/DASSL.h
+++ b/liboctave/DASSL.h
@@ -79,14 +79,8 @@ private:
   double *pabs_tol;
   double *prel_tol;
   octave_idx_type *pinfo;
   octave_idx_type *piwork;
   double *prwork;
 };
 
 #endif
-
-/*
-;;; Local Variables: ***
-;;; mode: C++ ***
-;;; End: ***
-*/
diff --git a/liboctave/DiagArray2.cc b/liboctave/DiagArray2.cc
--- a/liboctave/DiagArray2.cc
+++ b/liboctave/DiagArray2.cc
@@ -171,14 +171,8 @@ template <class T>
 DiagArray2<T>::operator Array2<T> (void) const
 {
   Array2<T> result (dim1 (), dim2 ());
   for (octave_idx_type i = 0, len = length (); i < len; i++)
     result.xelem (i, i) = dgelem (i);
 
   return result;
 }
-
-/*
-;;; Local Variables: ***
-;;; mode: C++ ***
-;;; End: ***
-*/
diff --git a/liboctave/DiagArray2.h b/liboctave/DiagArray2.h
--- a/liboctave/DiagArray2.h
+++ b/liboctave/DiagArray2.h
@@ -227,14 +227,8 @@ public:
 
   T *fortran_vec (void) { return Array<T>::fortran_vec (); }
 
   void print_info (std::ostream& os, const std::string& prefix) const
     { Array<T>::print_info (os, prefix); }
 };
 
 #endif
-
-/*
-;;; Local Variables: ***
-;;; mode: C++ ***
-;;; End: ***
-*/
diff --git a/liboctave/EIG.cc b/liboctave/EIG.cc
--- a/liboctave/EIG.cc
+++ b/liboctave/EIG.cc
@@ -857,14 +857,8 @@ EIG::hermitian_init (const ComplexMatrix
       lambda = ComplexColumnVector (wr);
       v = calc_ev ? ComplexMatrix (atmp) : ComplexMatrix ();
     }
   else
     (*current_liboctave_error_handler) ("zhegv workspace query failed");
 
   return info;
 }
-
-/*
-;;; Local Variables: ***
-;;; mode: C++ ***
-;;; End: ***
-*/
diff --git a/liboctave/EIG.h b/liboctave/EIG.h
--- a/liboctave/EIG.h
+++ b/liboctave/EIG.h
@@ -99,14 +99,8 @@ private:
 
   octave_idx_type symmetric_init (const Matrix& a, bool calc_eigenvectors);
   octave_idx_type symmetric_init (const Matrix& a, const Matrix& b, bool calc_eigenvectors);
   octave_idx_type hermitian_init (const ComplexMatrix& a, bool calc_eigenvectors);
   octave_idx_type hermitian_init (const ComplexMatrix& a, const ComplexMatrix& b, bool calc_eigenvectors);
 };
 
 #endif
-
-/*
-;;; Local Variables: ***
-;;; mode: C++ ***
-;;; End: ***
-*/
diff --git a/liboctave/LSODE.cc b/liboctave/LSODE.cc
--- a/liboctave/LSODE.cc
+++ b/liboctave/LSODE.cc
@@ -492,14 +492,8 @@ LSODE::do_integrate (const ColumnVector&
 
 	  if (integration_error)
 	    return retval;
 	}
     }
 
   return retval;
 }
-
-/*
-;;; Local Variables: ***
-;;; mode: C++ ***
-;;; End: ***
-*/
diff --git a/liboctave/LSODE.h b/liboctave/LSODE.h
--- a/liboctave/LSODE.h
+++ b/liboctave/LSODE.h
@@ -72,14 +72,8 @@ private:
 
   double *px;
   double *pabs_tol;
   octave_idx_type *piwork;
   double *prwork;
 };
 
 #endif
-
-/*
-;;; Local Variables: ***
-;;; mode: C++ ***
-;;; End: ***
-*/
diff --git a/liboctave/MArray-C.cc b/liboctave/MArray-C.cc
--- a/liboctave/MArray-C.cc
+++ b/liboctave/MArray-C.cc
@@ -61,14 +61,8 @@ template class OCTAVE_API MArrayN<Comple
 INSTANTIATE_MARRAYN_FRIENDS (Complex, OCTAVE_API)
 
 #include "MDiagArray2.h"
 #include "MDiagArray2.cc"
 
 template class OCTAVE_API MDiagArray2<Complex>;
 
 INSTANTIATE_MDIAGARRAY2_FRIENDS (Complex, OCTAVE_API)
-
-/*
-;;; Local Variables: ***
-;;; mode: C++ ***
-;;; End: ***
-*/
diff --git a/liboctave/MArray-ch.cc b/liboctave/MArray-ch.cc
--- a/liboctave/MArray-ch.cc
+++ b/liboctave/MArray-ch.cc
@@ -41,14 +41,8 @@ template class OCTAVE_API MArray2<char>;
 INSTANTIATE_MARRAY2_FRIENDS (char, OCTAVE_API)
 
 #include "MDiagArray2.h"
 #include "MDiagArray2.cc"
 
 template class OCTAVE_API MDiagArray2<char>;
 
 INSTANTIATE_MDIAGARRAY2_FRIENDS (char, OCTAVE_API)
-
-/*
-;;; Local Variables: ***
-;;; mode: C++ ***
-;;; End: ***
-*/
diff --git a/liboctave/MArray-d.cc b/liboctave/MArray-d.cc
--- a/liboctave/MArray-d.cc
+++ b/liboctave/MArray-d.cc
@@ -58,14 +58,8 @@ template class OCTAVE_API MArrayN<double
 INSTANTIATE_MARRAYN_FRIENDS (double, OCTAVE_API)
 
 #include "MDiagArray2.h"
 #include "MDiagArray2.cc"
 
 template class OCTAVE_API MDiagArray2<double>;
 
 INSTANTIATE_MDIAGARRAY2_FRIENDS (double, OCTAVE_API)
-
-/*
-;;; Local Variables: ***
-;;; mode: C++ ***
-;;; End: ***
-*/
diff --git a/liboctave/MArray-f.cc b/liboctave/MArray-f.cc
--- a/liboctave/MArray-f.cc
+++ b/liboctave/MArray-f.cc
@@ -59,14 +59,8 @@ template class OCTAVE_API MArrayN<float>
 INSTANTIATE_MARRAYN_FRIENDS (float, OCTAVE_API)
 
 #include "MDiagArray2.h"
 #include "MDiagArray2.cc"
 
 template class OCTAVE_API MDiagArray2<float>;
 
 INSTANTIATE_MDIAGARRAY2_FRIENDS (float, OCTAVE_API)
-
-/*
-;;; Local Variables: ***
-;;; mode: C++ ***
-;;; End: ***
-*/
diff --git a/liboctave/MArray-fC.cc b/liboctave/MArray-fC.cc
--- a/liboctave/MArray-fC.cc
+++ b/liboctave/MArray-fC.cc
@@ -61,14 +61,8 @@ template class OCTAVE_API MArrayN<FloatC
 INSTANTIATE_MARRAYN_FRIENDS (FloatComplex, OCTAVE_API)
 
 #include "MDiagArray2.h"
 #include "MDiagArray2.cc"
 
 template class OCTAVE_API MDiagArray2<FloatComplex>;
 
 INSTANTIATE_MDIAGARRAY2_FRIENDS (FloatComplex, OCTAVE_API)
-
-/*
-;;; Local Variables: ***
-;;; mode: C++ ***
-;;; End: ***
-*/
diff --git a/liboctave/MArray-i.cc b/liboctave/MArray-i.cc
--- a/liboctave/MArray-i.cc
+++ b/liboctave/MArray-i.cc
@@ -92,14 +92,8 @@ INSTANTIATE_MARRAYN_FRIENDS (octave_uint
 INSTANTIATE_MARRAYN_FRIENDS (octave_uint64, OCTAVE_API)
 
 #include "MDiagArray2.h"
 #include "MDiagArray2.cc"
 
 template class OCTAVE_API MDiagArray2<int>;
 
 INSTANTIATE_MDIAGARRAY2_FRIENDS (int, OCTAVE_API)
-
-/*
-;;; Local Variables: ***
-;;; mode: C++ ***
-;;; End: ***
-*/
diff --git a/liboctave/MArray-s.cc b/liboctave/MArray-s.cc
--- a/liboctave/MArray-s.cc
+++ b/liboctave/MArray-s.cc
@@ -41,14 +41,8 @@ template class OCTAVE_API MArray2<short>
 INSTANTIATE_MARRAY2_FRIENDS (short, OCTAVE_API)
 
 #include "MDiagArray2.h"
 #include "MDiagArray2.cc"
 
 template class OCTAVE_API MDiagArray2<short>;
 
 INSTANTIATE_MDIAGARRAY2_FRIENDS (short, OCTAVE_API)
-
-/*
-;;; Local Variables: ***
-;;; mode: C++ ***
-;;; End: ***
-*/
diff --git a/liboctave/MArray.cc b/liboctave/MArray.cc
--- a/liboctave/MArray.cc
+++ b/liboctave/MArray.cc
@@ -201,14 +201,8 @@ operator + (const MArray<T>& a)
 }
 
 template <class T>
 MArray<T>
 operator - (const MArray<T>& a)
 {
   return do_mx_unary_op<MArray<T>, MArray<T> > (a, mx_inline_uminus); 
 }
-
-/*
-;;; Local Variables: ***
-;;; mode: C++ ***
-;;; End: ***
-*/
diff --git a/liboctave/MArray.h b/liboctave/MArray.h
--- a/liboctave/MArray.h
+++ b/liboctave/MArray.h
@@ -89,14 +89,8 @@ public:
 
   // Currently, the OPS functions don't need to be friends, but that
   // may change.
 
   // MARRAY_OPS_FRIEND_DECLS (MArray)
 };
 
 #endif
-
-/*
-;;; Local Variables: ***
-;;; mode: C++ ***
-;;; End: ***
-*/
diff --git a/liboctave/MArray2.cc b/liboctave/MArray2.cc
--- a/liboctave/MArray2.cc
+++ b/liboctave/MArray2.cc
@@ -181,14 +181,8 @@ operator + (const MArray2<T>& a)
 }
 
 template <class T>
 MArray2<T>
 operator - (const MArray2<T>& a)
 {
   return do_mx_unary_op<MArray2<T>, MArray2<T> > (a, mx_inline_uminus); 
 }
-
-/*
-;;; Local Variables: ***
-;;; mode: C++ ***
-;;; End: ***
-*/
diff --git a/liboctave/MArray2.h b/liboctave/MArray2.h
--- a/liboctave/MArray2.h
+++ b/liboctave/MArray2.h
@@ -100,14 +100,8 @@ public:
 
   // Currently, the OPS functions don't need to be friends, but that
   // may change.
 
   // MARRAY_OPS_FRIEND_DECLS (MArray2)
 };
 
 #endif
-
-/*
-;;; Local Variables: ***
-;;; mode: C++ ***
-;;; End: ***
-*/
diff --git a/liboctave/MArrayN.cc b/liboctave/MArrayN.cc
--- a/liboctave/MArrayN.cc
+++ b/liboctave/MArrayN.cc
@@ -244,14 +244,8 @@ operator + (const MArrayN<T>& a)
 }
 
 template <class T>
 MArrayN<T>
 operator - (const MArrayN<T>& a)
 {
   return do_mx_unary_op<MArrayN<T>, MArrayN<T> > (a, mx_inline_uminus); 
 }
-
-/*
-;;; Local Variables: ***
-;;; mode: C++ ***
-;;; End: ***
-*/
diff --git a/liboctave/MArrayN.h b/liboctave/MArrayN.h
--- a/liboctave/MArrayN.h
+++ b/liboctave/MArrayN.h
@@ -92,14 +92,8 @@ public:
   void idx_add (const idx_vector& idx, T val);
 
   void idx_add (const idx_vector& idx, const MArrayN<T>& vals);
 
   void changesign (void);
 };
 
 #endif
-
-/*
-;;; Local Variables: ***
-;;; mode: C++ ***
-;;; End: ***
-*/
diff --git a/liboctave/MDiagArray2.cc b/liboctave/MDiagArray2.cc
--- a/liboctave/MDiagArray2.cc
+++ b/liboctave/MDiagArray2.cc
@@ -120,14 +120,8 @@ operator + (const MDiagArray2<T>& a)
 }
 
 template <class T>
 MDiagArray2<T>
 operator - (const MDiagArray2<T>& a)
 {
   return do_mx_unary_op<MDiagArray2<T>, MDiagArray2<T> > (a, mx_inline_uminus); 
 }
-
-/*
-;;; Local Variables: ***
-;;; mode: C++ ***
-;;; End: ***
-*/
diff --git a/liboctave/MDiagArray2.h b/liboctave/MDiagArray2.h
--- a/liboctave/MDiagArray2.h
+++ b/liboctave/MDiagArray2.h
@@ -105,14 +105,8 @@ public:
   // Currently, the OPS functions don't need to be friends, but that
   // may change.
 
   // MDIAGARRAY2_OPS_FRIEND_DECLS (MDiagArray2)
 
 };
 
 #endif
-
-/*
-;;; Local Variables: ***
-;;; mode: C++ ***
-;;; End: ***
-*/
diff --git a/liboctave/MSparse-C.cc b/liboctave/MSparse-C.cc
--- a/liboctave/MSparse-C.cc
+++ b/liboctave/MSparse-C.cc
@@ -28,14 +28,8 @@ along with Octave; see the file COPYING.
 #include "oct-cmplx.h"
 
 #include "MSparse.h"
 #include "MSparse.cc"
 
 template class OCTAVE_API MSparse<Complex>;
 
 INSTANTIATE_SPARSE_FRIENDS (Complex, OCTAVE_API);
-
-/*
-;;; Local Variables: ***
-;;; mode: C++ ***
-;;; End: ***
-*/
diff --git a/liboctave/MSparse-d.cc b/liboctave/MSparse-d.cc
--- a/liboctave/MSparse-d.cc
+++ b/liboctave/MSparse-d.cc
@@ -26,14 +26,8 @@ along with Octave; see the file COPYING.
 #endif
 
 #include "MSparse.h"
 #include "MSparse.cc"
 
 template class OCTAVE_API MSparse<double>;
 
 INSTANTIATE_SPARSE_FRIENDS (double, OCTAVE_API);
-
-/*
-;;; Local Variables: ***
-;;; mode: C++ ***
-;;; End: ***
-*/
diff --git a/liboctave/MSparse-defs.h b/liboctave/MSparse-defs.h
--- a/liboctave/MSparse-defs.h
+++ b/liboctave/MSparse-defs.h
@@ -206,14 +206,8 @@ along with Octave; see the file COPYING.
     (R, F, T, , T, dynamic_cast<const B<T>&>, R)	\
  \
   SPARSE_AA_BINOP_FWD_DEFS \
     (R, T, dynamic_cast<const B<T>&>, R, dynamic_cast<const B<T>&>, R)
 
 // Now we have all the definitions we need.
 
 #endif
-
-/*
-;;; Local Variables: ***
-;;; mode: C++ ***
-;;; End: ***
-*/
diff --git a/liboctave/MSparse.cc b/liboctave/MSparse.cc
--- a/liboctave/MSparse.cc
+++ b/liboctave/MSparse.cc
@@ -627,14 +627,8 @@ MSparse<T>
 operator - (const MSparse<T>& a)
 {
   MSparse<T> retval (a);
   octave_idx_type nz = a.nnz ();
   for (octave_idx_type i = 0; i < nz; i++)
     retval.data(i) = - retval.data(i);
   return retval;
 }
-
-/*
-;;; Local Variables: ***
-;;; mode: C++ ***
-;;; End: ***
-*/
diff --git a/liboctave/MSparse.h b/liboctave/MSparse.h
--- a/liboctave/MSparse.h
+++ b/liboctave/MSparse.h
@@ -130,14 +130,8 @@ public:
 
   // Currently, the OPS functions don't need to be friends, but that
   // may change.
 
   // SPARSE_OPS_FRIEND_DECLS (MSparse, MArray2)
 };
 
 #endif
-
-/*
-;;; Local Variables: ***
-;;; mode: C++ ***
-;;; End: ***
-*/
diff --git a/liboctave/Matrix.h b/liboctave/Matrix.h
--- a/liboctave/Matrix.h
+++ b/liboctave/Matrix.h
@@ -30,14 +30,8 @@ along with Octave; see the file COPYING.
 
 #include "mx-base.h"
 
 #include "mx-ext.h"
 
 #include "mx-ops.h"
 
 #endif
-
-/*
-;;; Local Variables: ***
-;;; mode: C++ ***
-;;; End: ***
-*/
diff --git a/liboctave/MatrixType.cc b/liboctave/MatrixType.cc
--- a/liboctave/MatrixType.cc
+++ b/liboctave/MatrixType.cc
@@ -1264,15 +1264,8 @@ MatrixType::transpose (void) const
   else if (typ == MatrixType::Banded)
     {
       retval.upper_band = lower_band;
       retval.lower_band = upper_band;
     }
 
   return retval;
 }
-
-/*
-;;; Local Variables: ***
-;;; mode: C++ ***
-;;; End: ***
-*/
-
diff --git a/liboctave/MatrixType.h b/liboctave/MatrixType.h
--- a/liboctave/MatrixType.h
+++ b/liboctave/MatrixType.h
@@ -175,14 +175,8 @@ private:
   octave_idx_type lower_band;
   bool dense;
   bool full;
   octave_idx_type nperm;
   octave_idx_type *perm;
 };
 
 #endif
-
-/*
-;;; Local Variables: ***
-;;; mode: C++ ***
-;;; End: ***
-*/
diff --git a/liboctave/ODE.h b/liboctave/ODE.h
--- a/liboctave/ODE.h
+++ b/liboctave/ODE.h
@@ -108,14 +108,8 @@ public:
 			    const ColumnVector& ttcrit)
     {
       initialize (x0, t0);
       return do_integrate (tt, ttcrit);
     }
 };
 
 #endif
-
-/*
-;;; Local Variables: ***
-;;; mode: C++ ***
-;;; End: ***
-*/
diff --git a/liboctave/ODEFunc.h b/liboctave/ODEFunc.h
--- a/liboctave/ODEFunc.h
+++ b/liboctave/ODEFunc.h
@@ -87,14 +87,8 @@ protected:
   // after any internal data has changed.  Derived classes may use
   // this information (and change it) to know when to (re)initialize
   // their own internal data related to this object.
 
   bool reset;
 };
 
 #endif
-
-/*
-;;; Local Variables: ***
-;;; mode: C++ ***
-;;; End: ***
-*/
diff --git a/liboctave/ODES.cc b/liboctave/ODES.cc
--- a/liboctave/ODES.cc
+++ b/liboctave/ODES.cc
@@ -37,14 +37,8 @@ ODES::initialize (const ColumnVector& xx
 void
 ODES::initialize (const ColumnVector& xx, double tt,
 		  const ColumnVector& xtheta)
 {
   base_diff_eqn::initialize (xx, tt);
   xdot = ColumnVector (xx.length (), 0.0);
   theta = xtheta;
 }
-
-/*
-;;; Local Variables: ***
-;;; mode: C++ ***
-;;; End: ***
-*/
diff --git a/liboctave/ODES.h b/liboctave/ODES.h
--- a/liboctave/ODES.h
+++ b/liboctave/ODES.h
@@ -72,14 +72,8 @@ protected:
   // State vector time derivatives.
   ColumnVector xdot;
 
   // Parameter vector.
   ColumnVector theta;
 };
 
 #endif
-
-/*
-;;; Local Variables: ***
-;;; mode: C++ ***
-;;; End: ***
-*/
diff --git a/liboctave/ODESFunc.h b/liboctave/ODESFunc.h
--- a/liboctave/ODESFunc.h
+++ b/liboctave/ODESFunc.h
@@ -100,18 +100,8 @@ public:
 protected:
 
   ODES_fsub fsub;
   ODES_bsub bsub;
   ODES_jsub jsub;
 };
 
 #endif
-
-/*
-;;; Local Variables: ***
-;;; mode: C++ ***
-;;; End: ***
-*/
-
-
-
-
diff --git a/liboctave/Quad.cc b/liboctave/Quad.cc
--- a/liboctave/Quad.cc
+++ b/liboctave/Quad.cc
@@ -290,14 +290,8 @@ FloatIndefQuad::do_integrate (octave_idx
   float rel_tol = single_precision_relative_tolerance ();
 
   F77_XFCN (qagi, QAGI, (float_user_function, bound, inf, abs_tol, rel_tol,
 			 result, abserr, neval, ier, leniw, lenw,
 			 last, piwork, pwork));
 
   return result;
 }
-
-/*
-;;; Local Variables: ***
-;;; mode: C++ ***
-;;; End: ***
-*/
diff --git a/liboctave/Quad.h b/liboctave/Quad.h
--- a/liboctave/Quad.h
+++ b/liboctave/Quad.h
@@ -240,14 +240,8 @@ FloatIndefQuad : public Quad
  private:
 
   float bound;
   IntegralType type;
   int integration_error;
 };
 
 #endif
-
-/*
-;;; Local Variables: ***
-;;; mode: C++ ***
-;;; End: ***
-*/
diff --git a/liboctave/Range.cc b/liboctave/Range.cc
--- a/liboctave/Range.cc
+++ b/liboctave/Range.cc
@@ -504,14 +504,8 @@ Range::nelem_internal (void) const
 	    n_elt++;
 	}
 
       retval = (n_elt >= std::numeric_limits<octave_idx_type>::max () - 1) ? -1 : n_elt;
     }
 
   return retval;
 }
-
-/*
-;;; Local Variables: ***
-;;; mode: C++ ***
-;;; End: ***
-*/
diff --git a/liboctave/Range.h b/liboctave/Range.h
--- a/liboctave/Range.h
+++ b/liboctave/Range.h
@@ -158,14 +158,8 @@ extern OCTAVE_API Range operator - (doub
 
 extern OCTAVE_API Range operator - (const Range& r, double x);
 
 extern OCTAVE_API Range operator * (double x, const Range& r);
 
 extern OCTAVE_API Range operator * (const Range& r, double x);
 
 #endif
-
-/*
-;;; Local Variables: ***
-;;; mode: C++ ***
-;;; End: ***
-*/
diff --git a/liboctave/Sparse-C.cc b/liboctave/Sparse-C.cc
--- a/liboctave/Sparse-C.cc
+++ b/liboctave/Sparse-C.cc
@@ -59,14 +59,8 @@ sparse_descending_compare<Complex> (cons
 
 INSTANTIATE_SPARSE_AND_ASSIGN (Complex, OCTAVE_API);
 
 INSTANTIATE_SPARSE_ASSIGN (Complex, double, OCTAVE_API);
 
 #if 0
 template std::ostream& operator << (std::ostream&, const Sparse<Complex>&);
 #endif
-
-/*
-;;; Local Variables: ***
-;;; mode: C++ ***
-;;; End: ***
-*/
diff --git a/liboctave/Sparse-b.cc b/liboctave/Sparse-b.cc
--- a/liboctave/Sparse-b.cc
+++ b/liboctave/Sparse-b.cc
@@ -30,14 +30,8 @@ along with Octave; see the file COPYING.
 #include "Sparse.h"
 #include "Sparse.cc"
 
 INSTANTIATE_SPARSE_AND_ASSIGN (bool, OCTAVE_API);
 
 #if 0
 template std::ostream& operator << (std::ostream&, const Sparse<bool>&);
 #endif
-
-/*
-;;; Local Variables: ***
-;;; mode: C++ ***
-;;; End: ***
-*/
diff --git a/liboctave/Sparse-d.cc b/liboctave/Sparse-d.cc
--- a/liboctave/Sparse-d.cc
+++ b/liboctave/Sparse-d.cc
@@ -45,14 +45,8 @@ sparse_descending_compare<double> (doubl
   return (xisnan (a) || (a > b));
 }
 
 INSTANTIATE_SPARSE_AND_ASSIGN (double, OCTAVE_API);
 
 #if 0
 template std::ostream& operator << (std::ostream&, const Sparse<double>&);
 #endif
-
-/*
-;;; Local Variables: ***
-;;; mode: C++ ***
-;;; End: ***
-*/
diff --git a/liboctave/Sparse-op-defs.h b/liboctave/Sparse-op-defs.h
--- a/liboctave/Sparse-op-defs.h
+++ b/liboctave/Sparse-op-defs.h
@@ -2141,14 +2141,8 @@ along with Octave; see the file COPYING.
               for (octave_idx_type k = 0 ; k < nr; k++) \
                 retval.xelem (k,col) += tmpval * m.elem(k,i); \
             } \
         } \
       return retval; \
     }
 
 #endif
-
-/*
-;;; Local Variables: ***
-;;; mode: C++ ***
-;;; End: ***
-*/
diff --git a/liboctave/Sparse.cc b/liboctave/Sparse.cc
--- a/liboctave/Sparse.cc
+++ b/liboctave/Sparse.cc
@@ -3691,14 +3691,8 @@ Sparse<T>::print_info (std::ostream& os,
      << prefix << "rep->nzmx:   " << rep->nzmx  << "\n"
      << prefix << "rep->nrows:  " << rep->nrows << "\n"
      << prefix << "rep->ncols:  " << rep->ncols << "\n"
      << prefix << "rep->data:   " << static_cast<void *> (rep->d) << "\n"
      << prefix << "rep->ridx:   " << static_cast<void *> (rep->r) << "\n"
      << prefix << "rep->cidx:   " << static_cast<void *> (rep->c) << "\n"
      << prefix << "rep->count:  " << rep->count << "\n";
 }
-
-/*
-;;; Local Variables: ***
-;;; mode: C++ ***
-;;; End: ***
-*/
diff --git a/liboctave/Sparse.h b/liboctave/Sparse.h
--- a/liboctave/Sparse.h
+++ b/liboctave/Sparse.h
@@ -691,14 +691,8 @@ read_sparse_matrix (std::istream& is, Sp
 #define INSTANTIATE_SPARSE(T, API) \
   template class API Sparse<T>;
 
 #define INSTANTIATE_SPARSE_AND_ASSIGN(T, API) \
   INSTANTIATE_SPARSE (T, API); \
   INSTANTIATE_SPARSE_ASSIGN (T, T, API)
 
 #endif
-
-/*
-;;; Local Variables: ***
-;;; mode: C++ ***
-;;; End: ***
-*/
diff --git a/liboctave/SparseCmplxCHOL.cc b/liboctave/SparseCmplxCHOL.cc
--- a/liboctave/SparseCmplxCHOL.cc
+++ b/liboctave/SparseCmplxCHOL.cc
@@ -63,14 +63,8 @@ chol2inv (const SparseComplexMatrix& r)
 	(*current_liboctave_error_handler) 
 	  ("spchol2inv requires triangular matrix");
     }
   else
     (*current_liboctave_error_handler) ("spchol2inv requires square matrix");
 
   return retval;
 }
-
-/*
-;;; Local Variables: ***
-;;; mode: C++ ***
-;;; End: ***
-*/
diff --git a/liboctave/SparseCmplxCHOL.h b/liboctave/SparseCmplxCHOL.h
--- a/liboctave/SparseCmplxCHOL.h
+++ b/liboctave/SparseCmplxCHOL.h
@@ -91,14 +91,8 @@ public:
   SparseComplexMatrix inverse (void) const
     { return sparse_base_chol<SparseComplexMatrix, Complex, 
 	SparseMatrix>:: inverse (); }
 };
 
 SparseComplexMatrix OCTAVE_API chol2inv (const SparseComplexMatrix& r);
 
 #endif
-
-/*
-;;; Local Variables: ***
-;;; mode: C++ ***
-;;; End: ***
-*/
diff --git a/liboctave/SparseCmplxLU.cc b/liboctave/SparseCmplxLU.cc
--- a/liboctave/SparseCmplxLU.cc
+++ b/liboctave/SparseCmplxLU.cc
@@ -472,15 +472,8 @@ SparseComplexLU::SparseComplexLU (const 
       if (udiag)
 	(*current_liboctave_error_handler) 
 	  ("Option udiag of incomplete LU not implemented");   
     }
 #else
   (*current_liboctave_error_handler) ("UMFPACK not installed");
 #endif
 }
-
-/*
-;;; Local Variables: ***
-;;; mode: C++ ***
-;;; End: ***
-*/
-
diff --git a/liboctave/SparseCmplxLU.h b/liboctave/SparseCmplxLU.h
--- a/liboctave/SparseCmplxLU.h
+++ b/liboctave/SparseCmplxLU.h
@@ -59,14 +59,8 @@ public:
 
       return *this;
     }
 
   ~SparseComplexLU (void) { }
 };
 
 #endif
-
-/*
-;;; Local Variables: ***
-;;; mode: C++ ***
-;;; End: ***
-*/
diff --git a/liboctave/SparseCmplxQR.cc b/liboctave/SparseCmplxQR.cc
--- a/liboctave/SparseCmplxQR.cc
+++ b/liboctave/SparseCmplxQR.cc
@@ -889,14 +889,8 @@ qrsolve (const SparseComplexMatrix &a, c
 }
 
 ComplexMatrix 
 qrsolve (const SparseComplexMatrix &a, const MArray2<Complex> &b, 
 	 octave_idx_type &info)
 {
   return qrsolve (a, ComplexMatrix (b), info);
 }
-
-/*
-;;; Local Variables: ***
-;;; mode: C++ ***
-;;; End: ***
-*/
diff --git a/liboctave/SparseCmplxQR.h b/liboctave/SparseCmplxQR.h
--- a/liboctave/SparseCmplxQR.h
+++ b/liboctave/SparseCmplxQR.h
@@ -164,14 +164,8 @@ extern ComplexMatrix qrsolve (const Spar
 extern ComplexMatrix qrsolve (const SparseComplexMatrix &a, 
 			      const MArray2<Complex> &b, 
 			      octave_idx_type &info);
 
 extern SparseComplexMatrix qrsolve (const SparseComplexMatrix &a, 
 				    const SparseComplexMatrix &b,
 				    octave_idx_type &info);
 #endif
-
-/*
-;;; Local Variables: ***
-;;; mode: C++ ***
-;;; End: ***
-*/
diff --git a/liboctave/SparseQR.cc b/liboctave/SparseQR.cc
--- a/liboctave/SparseQR.cc
+++ b/liboctave/SparseQR.cc
@@ -905,15 +905,8 @@ qrsolve(const SparseMatrix &a, const MAr
 }
 
 ComplexMatrix 
 qrsolve(const SparseMatrix &a, const MArray2<Complex> &b, 
 	octave_idx_type &info)
 { 
   return qrsolve (a, ComplexMatrix (b), info);
 }
-
-
-/*
-;;; Local Variables: ***
-;;; mode: C++ ***
-;;; End: ***
-*/
diff --git a/liboctave/SparseQR.h b/liboctave/SparseQR.h
--- a/liboctave/SparseQR.h
+++ b/liboctave/SparseQR.h
@@ -157,14 +157,8 @@ extern ComplexMatrix qrsolve (const Spar
 extern ComplexMatrix qrsolve (const SparseMatrix &a, const MArray2<Complex> &b, 
 			      octave_idx_type &info);
 
 extern SparseComplexMatrix qrsolve (const SparseMatrix &a, 
 				    const SparseComplexMatrix &b,
 				    octave_idx_type &info);
 
 #endif
-
-/*
-;;; Local Variables: ***
-;;; mode: C++ ***
-;;; End: ***
-*/
diff --git a/liboctave/SparsedbleCHOL.cc b/liboctave/SparsedbleCHOL.cc
--- a/liboctave/SparsedbleCHOL.cc
+++ b/liboctave/SparsedbleCHOL.cc
@@ -63,14 +63,8 @@ chol2inv (const SparseMatrix& r)
 	(*current_liboctave_error_handler) 
 	  ("spchol2inv requires triangular matrix");
     }
   else
     (*current_liboctave_error_handler) ("spchol2inv requires square matrix");
 
   return retval;
 }
-
-/*
-;;; Local Variables: ***
-;;; mode: C++ ***
-;;; End: ***
-*/
diff --git a/liboctave/SparsedbleCHOL.h b/liboctave/SparsedbleCHOL.h
--- a/liboctave/SparsedbleCHOL.h
+++ b/liboctave/SparsedbleCHOL.h
@@ -79,14 +79,8 @@ public:
   SparseMatrix inverse (void) const
    { return sparse_base_chol<SparseMatrix, double, SparseMatrix>:: 
        inverse (); }
 };
 
 SparseMatrix OCTAVE_API chol2inv (const SparseMatrix& r);
 
 #endif
-
-/*
-;;; Local Variables: ***
-;;; mode: C++ ***
-;;; End: ***
-*/
diff --git a/liboctave/SparsedbleLU.cc b/liboctave/SparsedbleLU.cc
--- a/liboctave/SparsedbleLU.cc
+++ b/liboctave/SparsedbleLU.cc
@@ -450,15 +450,8 @@ SparseLU::SparseLU (const SparseMatrix& 
       if (udiag)
 	(*current_liboctave_error_handler) 
 	  ("Option udiag of incomplete LU not implemented");   
     }
 #else
   (*current_liboctave_error_handler) ("UMFPACK not installed");
 #endif
 }
-
-/*
-;;; Local Variables: ***
-;;; mode: C++ ***
-;;; End: ***
-*/
-
diff --git a/liboctave/SparsedbleLU.h b/liboctave/SparsedbleLU.h
--- a/liboctave/SparsedbleLU.h
+++ b/liboctave/SparsedbleLU.h
@@ -55,14 +55,8 @@ public:
 
       return *this;
     }
 
   ~SparseLU (void) { }
 };
 
 #endif
-
-/*
-;;; Local Variables: ***
-;;; mode: C++ ***
-;;; End: ***
-*/
diff --git a/liboctave/base-dae.h b/liboctave/base-dae.h
--- a/liboctave/base-dae.h
+++ b/liboctave/base-dae.h
@@ -71,14 +71,8 @@ public:
   ColumnVector state_derivative (void) { return xdot; }
 
 protected:
 
   ColumnVector xdot;
 };
 
 #endif
-
-/*
-;;; Local Variables: ***
-;;; mode: C++ ***
-;;; End: ***
-*/
diff --git a/liboctave/base-de.h b/liboctave/base-de.h
--- a/liboctave/base-de.h
+++ b/liboctave/base-de.h
@@ -112,14 +112,8 @@ protected:
   bool restart;
 
   bool integration_error;
 
   octave_idx_type istate;
 };
 
 #endif
-
-/*
-;;; Local Variables: ***
-;;; mode: C++ ***
-;;; End: ***
-*/
diff --git a/liboctave/base-lu.cc b/liboctave/base-lu.cc
--- a/liboctave/base-lu.cc
+++ b/liboctave/base-lu.cc
@@ -178,14 +178,8 @@ base_lu<lu_type>::regular (void) const
     if (a_fact(i, i) == lu_elt_type ())
       {
         retval = false;
         break;
       }
 
   return true;
 }
-
-/*
-;;; Local Variables: ***
-;;; mode: C++ ***
-;;; End: ***
-*/
diff --git a/liboctave/base-lu.h b/liboctave/base-lu.h
--- a/liboctave/base-lu.h
+++ b/liboctave/base-lu.h
@@ -75,14 +75,8 @@ public:
 protected:
 
   Array<octave_idx_type> getp (void) const;
   lu_type a_fact, l_fact;
   Array<octave_idx_type> ipvt;
 };
 
 #endif
-
-/*
-;;; Local Variables: ***
-;;; mode: C++ ***
-;;; End: ***
-*/
diff --git a/liboctave/base-min.h b/liboctave/base-min.h
--- a/liboctave/base-min.h
+++ b/liboctave/base-min.h
@@ -117,14 +117,8 @@ public:
   octave_idx_type size (void) const { return x.capacity (); }
 
 protected:
 
   ColumnVector x;
 };
 
 #endif
-
-/*
-;;; Local Variables: ***
-;;; mode: C++ ***
-;;; End: ***
-*/
diff --git a/liboctave/boolMatrix.cc b/liboctave/boolMatrix.cc
--- a/liboctave/boolMatrix.cc
+++ b/liboctave/boolMatrix.cc
@@ -99,14 +99,8 @@ boolMatrix::any (int dim) const
 {
   return do_mx_red_op<boolMatrix, bool> (*this, dim, mx_inline_any);
 }
 
 MM_BOOL_OPS (boolMatrix, boolMatrix)
 MS_BOOL_OPS (boolMatrix, bool)
 SM_BOOL_OPS (bool, boolMatrix)
 MM_CMP_OPS (boolMatrix, boolMatrix)
-
-/*
-;;; Local Variables: ***
-;;; mode: C++ ***
-;;; End: ***
-*/
diff --git a/liboctave/boolMatrix.h b/liboctave/boolMatrix.h
--- a/liboctave/boolMatrix.h
+++ b/liboctave/boolMatrix.h
@@ -84,14 +84,8 @@ private:
 };
 
 MM_BOOL_OP_DECLS (boolMatrix, boolMatrix, OCTAVE_API)
 MS_BOOL_OP_DECLS (boolMatrix, bool, OCTAVE_API)
 SM_BOOL_OP_DECLS (bool, boolMatrix, OCTAVE_API)
 MM_CMP_OP_DECLS (boolMatrix, boolMatrix, OCTAVE_API)
 
 #endif
-
-/*
-;;; Local Variables: ***
-;;; mode: C++ ***
-;;; End: ***
-*/
diff --git a/liboctave/boolNDArray.cc b/liboctave/boolNDArray.cc
--- a/liboctave/boolNDArray.cc
+++ b/liboctave/boolNDArray.cc
@@ -184,14 +184,8 @@ mx_el_or_assign (boolNDArray& a, const b
   else
     do_mm_inplace_op<boolNDArray, boolNDArray> (a, b, mx_inline_or2, "operator |=");
 
   return a;
 }
 
 BSXFUN_OP_DEF_MXLOOP (and, boolNDArray, mx_inline_and)
 BSXFUN_OP_DEF_MXLOOP (or, boolNDArray, mx_inline_or)
-
-/*
-;;; Local Variables: ***
-;;; mode: C++ ***
-;;; End: ***
-*/
diff --git a/liboctave/boolNDArray.h b/liboctave/boolNDArray.h
--- a/liboctave/boolNDArray.h
+++ b/liboctave/boolNDArray.h
@@ -121,14 +121,8 @@ extern OCTAVE_API boolNDArray&
 mx_el_and_assign (boolNDArray& m, const boolNDArray& a);
 extern OCTAVE_API boolNDArray& 
 mx_el_or_assign (boolNDArray& m, const boolNDArray& a);
 
 BSXFUN_OP_DECL (and, boolNDArray, OCTAVE_API);
 BSXFUN_OP_DECL (or, boolNDArray, OCTAVE_API);
 
 #endif
-
-/*
-;;; Local Variables: ***
-;;; mode: C++ ***
-;;; End: ***
-*/
diff --git a/liboctave/boolSparse.cc b/liboctave/boolSparse.cc
--- a/liboctave/boolSparse.cc
+++ b/liboctave/boolSparse.cc
@@ -230,15 +230,8 @@ SparseBoolMatrix::ipermute (const Array<
 SPARSE_SMS_EQNE_OPS (SparseBoolMatrix, false, , bool, false, )
 SPARSE_SMS_BOOL_OPS (SparseBoolMatrix, bool, false)
 
 SPARSE_SSM_EQNE_OPS (bool, false, , SparseBoolMatrix, false, )
 SPARSE_SSM_BOOL_OPS (bool, SparseBoolMatrix, false)
 
 SPARSE_SMSM_EQNE_OPS (SparseBoolMatrix, false, , SparseBoolMatrix, false, )
 SPARSE_SMSM_BOOL_OPS (SparseBoolMatrix, SparseBoolMatrix, false)
-
-
-/*
-;;; Local Variables: ***
-;;; mode: C++ ***
-;;; End: ***
-*/
diff --git a/liboctave/boolSparse.h b/liboctave/boolSparse.h
--- a/liboctave/boolSparse.h
+++ b/liboctave/boolSparse.h
@@ -126,14 +126,8 @@ SPARSE_SMS_BOOL_OP_DECLS (SparseBoolMatr
 
 SPARSE_SSM_EQNE_OP_DECLS (bool, SparseBoolMatrix, OCTAVE_API)
 SPARSE_SSM_BOOL_OP_DECLS (bool, SparseBoolMatrix, OCTAVE_API)
 
 SPARSE_SMSM_EQNE_OP_DECLS (SparseBoolMatrix, SparseBoolMatrix, OCTAVE_API)
 SPARSE_SMSM_BOOL_OP_DECLS (SparseBoolMatrix, SparseBoolMatrix, OCTAVE_API)
 
 #endif
-
-/*
-;;; Local Variables: ***
-;;; mode: C++ ***
-;;; End: ***
-*/
diff --git a/liboctave/byte-swap.h b/liboctave/byte-swap.h
--- a/liboctave/byte-swap.h
+++ b/liboctave/byte-swap.h
@@ -90,14 +90,8 @@ swap_bytes (volatile void *ptr, int len)
 
 template <>
 inline void
 swap_bytes<1> (volatile void *, int)
 {
 }
 
 #endif
-
-/*
-;;; Local Variables: ***
-;;; mode: C++ ***
-;;; End: ***
-*/
diff --git a/liboctave/chMatrix.cc b/liboctave/chMatrix.cc
--- a/liboctave/chMatrix.cc
+++ b/liboctave/chMatrix.cc
@@ -217,14 +217,8 @@ charMatrix::any (int dim) const
 MS_CMP_OPS (charMatrix, char)
 MS_BOOL_OPS (charMatrix, char)
 
 SM_CMP_OPS (char, charMatrix)
 SM_BOOL_OPS (char, charMatrix)
 
 MM_CMP_OPS (charMatrix, charMatrix)
 MM_BOOL_OPS (charMatrix, charMatrix)
-
-/*
-;;; Local Variables: ***
-;;; mode: C++ ***
-;;; End: ***
-*/
diff --git a/liboctave/chMatrix.h b/liboctave/chMatrix.h
--- a/liboctave/chMatrix.h
+++ b/liboctave/chMatrix.h
@@ -100,14 +100,8 @@ SM_CMP_OP_DECLS (char, charMatrix, OCTAV
 SM_BOOL_OP_DECLS (char, charMatrix, OCTAVE_API)
 
 MM_CMP_OP_DECLS (charMatrix, charMatrix, OCTAVE_API)
 MM_BOOL_OP_DECLS (charMatrix, charMatrix, OCTAVE_API)
 
 MARRAY_FORWARD_DEFS (MArray2, charMatrix, char)
 
 #endif
-
-/*
-;;; Local Variables: ***
-;;; mode: C++ ***
-;;; End: ***
-*/
diff --git a/liboctave/chNDArray.cc b/liboctave/chNDArray.cc
--- a/liboctave/chNDArray.cc
+++ b/liboctave/chNDArray.cc
@@ -159,14 +159,8 @@ NDS_BOOL_OPS (charNDArray, char)
 
 SND_CMP_OPS (char, charNDArray)
 SND_BOOL_OPS (char, charNDArray)
 
 NDND_CMP_OPS (charNDArray, charNDArray)
 NDND_BOOL_OPS (charNDArray, charNDArray)
 
 BSXFUN_STDREL_DEFS_MXLOOP (charNDArray)
-
-/*
-;;; Local Variables: ***
-;;; mode: C++ ***
-;;; End: ***
-*/
diff --git a/liboctave/chNDArray.h b/liboctave/chNDArray.h
--- a/liboctave/chNDArray.h
+++ b/liboctave/chNDArray.h
@@ -110,14 +110,8 @@ SND_BOOL_OP_DECLS (char, charNDArray, OC
 NDND_CMP_OP_DECLS (charNDArray, charNDArray, OCTAVE_API)
 NDND_BOOL_OP_DECLS (charNDArray, charNDArray, OCTAVE_API)
 
 MARRAY_FORWARD_DEFS (MArrayN, charNDArray, char)
 
 BSXFUN_STDREL_DECLS (charNDArray, OCTAVE_API)
 
 #endif
-
-/*
-;;; Local Variables: ***
-;;; mode: C++ ***
-;;; End: ***
-*/
diff --git a/liboctave/cmd-edit.cc b/liboctave/cmd-edit.cc
--- a/liboctave/cmd-edit.cc
+++ b/liboctave/cmd-edit.cc
@@ -1547,14 +1547,8 @@ command_editor::error (int err_num)
   current_liboctave_error_handler ("%s", strerror (err_num));
 }
 
 void
 command_editor::error (const std::string& s)
 {
   current_liboctave_error_handler ("%s", s.c_str ());
 }
-
-/*
-;;; Local Variables: ***
-;;; mode: C++ ***
-;;; End: ***
-*/
diff --git a/liboctave/cmd-edit.h b/liboctave/cmd-edit.h
--- a/liboctave/cmd-edit.h
+++ b/liboctave/cmd-edit.h
@@ -290,14 +290,8 @@ protected:
 
   void error (const std::string&);
 
   // The current command number.
   int command_number;
 };
 
 #endif
-
-/*
-;;; Local Variables: ***
-;;; mode: C++ ***
-;;; End: ***
-*/
diff --git a/liboctave/cmd-hist.cc b/liboctave/cmd-hist.cc
--- a/liboctave/cmd-hist.cc
+++ b/liboctave/cmd-hist.cc
@@ -816,14 +816,8 @@ command_history::error (int err_num)
   (*current_liboctave_error_handler) ("%s", strerror (err_num));
 }
 
 void
 command_history::error (const std::string& s)
 {
   (*current_liboctave_error_handler) ("%s", s.c_str ());
 }
-
-/*
-;;; Local Variables: ***
-;;; mode: C++ ***
-;;; End: ***
-*/
diff --git a/liboctave/cmd-hist.h b/liboctave/cmd-hist.h
--- a/liboctave/cmd-hist.h
+++ b/liboctave/cmd-hist.h
@@ -194,14 +194,8 @@ protected:
   // The default history file.
   std::string xfile;
 
   // The number of lines of history to save.
   int xsize;
 };
 
 #endif
-
-/*
-;;; Local Variables: ***
-;;; mode: C++ ***
-;;; End: ***
-*/
diff --git a/liboctave/dColVector.cc b/liboctave/dColVector.cc
--- a/liboctave/dColVector.cc
+++ b/liboctave/dColVector.cc
@@ -315,14 +315,8 @@ operator >> (std::istream& is, ColumnVec
           if (is)
             a.elem (i) = tmp;
           else
             break;
         }
     }
   return is;
 }
-
-/*
-;;; Local Variables: ***
-;;; mode: C++ ***
-;;; End: ***
-*/
diff --git a/liboctave/dColVector.h b/liboctave/dColVector.h
--- a/liboctave/dColVector.h
+++ b/liboctave/dColVector.h
@@ -101,14 +101,8 @@ private:
 // Publish externally used friend functions.
 
 extern OCTAVE_API ColumnVector real (const ComplexColumnVector& a);
 extern OCTAVE_API ColumnVector imag (const ComplexColumnVector& a);
 
 MARRAY_FORWARD_DEFS (MArray, ColumnVector, double)
 
 #endif
-
-/*
-;;; Local Variables: ***
-;;; mode: C++ ***
-;;; End: ***
-*/
diff --git a/liboctave/dDiagMatrix.cc b/liboctave/dDiagMatrix.cc
--- a/liboctave/dDiagMatrix.cc
+++ b/liboctave/dDiagMatrix.cc
@@ -394,14 +394,8 @@ operator << (std::ostream& os, const Dia
 	    os << " " /* setw (field_width) */ << a.elem (i, i);
 	  else
 	    os << " " /* setw (field_width) */ << 0.0;
 	}
       os << "\n";
     }
   return os;
 }
-
-/*
-;;; Local Variables: ***
-;;; mode: C++ ***
-;;; End: ***
-*/
diff --git a/liboctave/dDiagMatrix.h b/liboctave/dDiagMatrix.h
--- a/liboctave/dDiagMatrix.h
+++ b/liboctave/dDiagMatrix.h
@@ -119,14 +119,8 @@ OCTAVE_API DiagMatrix imag (const Comple
 // diagonal matrix by diagonal matrix -> diagonal matrix operations
 
 OCTAVE_API DiagMatrix
 operator * (const DiagMatrix& a, const DiagMatrix& b);
 
 MDIAGARRAY2_FORWARD_DEFS (MDiagArray2, DiagMatrix, double)
 
 #endif
-
-/*
-;;; Local Variables: ***
-;;; mode: C++ ***
-;;; End: ***
-*/
diff --git a/liboctave/dMatrix.cc b/liboctave/dMatrix.cc
--- a/liboctave/dMatrix.cc
+++ b/liboctave/dMatrix.cc
@@ -3453,14 +3453,8 @@ Matrix linspace (const ColumnVector& x1,
 MS_CMP_OPS (Matrix, double)
 MS_BOOL_OPS (Matrix, double)
 
 SM_CMP_OPS (double, Matrix)
 SM_BOOL_OPS (double, Matrix)
 
 MM_CMP_OPS (Matrix, Matrix)
 MM_BOOL_OPS (Matrix, Matrix)
-
-/*
-;;; Local Variables: ***
-;;; mode: C++ ***
-;;; End: ***
-*/
diff --git a/liboctave/dMatrix.h b/liboctave/dMatrix.h
--- a/liboctave/dMatrix.h
+++ b/liboctave/dMatrix.h
@@ -374,14 +374,8 @@ MM_CMP_OP_DECLS (Matrix, Matrix, OCTAVE_
 MM_BOOL_OP_DECLS (Matrix, Matrix, OCTAVE_API)
 
 MARRAY_FORWARD_DEFS (MArray2, Matrix, double)
 
 template <class T>
 void read_int (std::istream& is, bool swap_bytes, T& val);
 
 #endif
-
-/*
-;;; Local Variables: ***
-;;; mode: C++ ***
-;;; End: ***
-*/
diff --git a/liboctave/dNDArray.cc b/liboctave/dNDArray.cc
--- a/liboctave/dNDArray.cc
+++ b/liboctave/dNDArray.cc
@@ -1027,14 +1027,8 @@ NDND_CMP_OPS (NDArray, NDArray)
 NDND_BOOL_OPS (NDArray, NDArray)
 
 BSXFUN_STDOP_DEFS_MXLOOP (NDArray)
 BSXFUN_STDREL_DEFS_MXLOOP (NDArray)
 
 BSXFUN_OP_DEF_MXLOOP (pow, NDArray, mx_inline_pow)
 BSXFUN_OP2_DEF_MXLOOP (pow, ComplexNDArray, ComplexNDArray, 
                        NDArray, mx_inline_pow)
-
-/*
-;;; Local Variables: ***
-;;; mode: C++ ***
-;;; End: ***
-*/
diff --git a/liboctave/dNDArray.h b/liboctave/dNDArray.h
--- a/liboctave/dNDArray.h
+++ b/liboctave/dNDArray.h
@@ -192,14 +192,8 @@ MARRAY_FORWARD_DEFS (MArrayN, NDArray, d
 BSXFUN_STDOP_DECLS (NDArray, OCTAVE_API)
 BSXFUN_STDREL_DECLS (NDArray, OCTAVE_API)
 
 BSXFUN_OP_DECL (pow, NDArray, OCTAVE_API)
 BSXFUN_OP2_DECL (pow, ComplexNDArray, ComplexNDArray, 
                  NDArray, OCTAVE_API)
 
 #endif
-
-/*
-;;; Local Variables: ***
-;;; mode: C++ ***
-;;; End: ***
-*/
diff --git a/liboctave/dRowVector.cc b/liboctave/dRowVector.cc
--- a/liboctave/dRowVector.cc
+++ b/liboctave/dRowVector.cc
@@ -332,14 +332,8 @@ operator * (const RowVector& v, const Co
 }
 
 Complex
 operator * (const RowVector& v, const ComplexColumnVector& a)
 {
   ComplexRowVector tmp (v);
   return tmp * a;
 }
-
-/*
-;;; Local Variables: ***
-;;; mode: C++ ***
-;;; End: ***
-*/
diff --git a/liboctave/dRowVector.h b/liboctave/dRowVector.h
--- a/liboctave/dRowVector.h
+++ b/liboctave/dRowVector.h
@@ -102,14 +102,8 @@ Complex OCTAVE_API operator * (const Row
 
 // other operations
 
 OCTAVE_API RowVector linspace (double x1, double x2, octave_idx_type n);
 
 MARRAY_FORWARD_DEFS (MArray, RowVector, double)
 
 #endif
-
-/*
-;;; Local Variables: ***
-;;; mode: C++ ***
-;;; End: ***
-*/
diff --git a/liboctave/dSparse.cc b/liboctave/dSparse.cc
--- a/liboctave/dSparse.cc
+++ b/liboctave/dSparse.cc
@@ -8028,14 +8028,8 @@ max (const SparseMatrix& a, const Sparse
 SPARSE_SMS_CMP_OPS (SparseMatrix, 0.0, , double, 0.0, )
 SPARSE_SMS_BOOL_OPS (SparseMatrix, double, 0.0)
 
 SPARSE_SSM_CMP_OPS (double, 0.0, , SparseMatrix, 0.0, )
 SPARSE_SSM_BOOL_OPS (double, SparseMatrix, 0.0)
 
 SPARSE_SMSM_CMP_OPS (SparseMatrix, 0.0, , SparseMatrix, 0.0, )
 SPARSE_SMSM_BOOL_OPS (SparseMatrix, SparseMatrix, 0.0)
-
-/*
-;;; Local Variables: ***
-;;; mode: C++ ***
-;;; End: ***
-*/
diff --git a/liboctave/dSparse.h b/liboctave/dSparse.h
--- a/liboctave/dSparse.h
+++ b/liboctave/dSparse.h
@@ -479,14 +479,8 @@ SPARSE_FORWARD_DEFS (MSparse, SparseMatr
 
 #ifdef IDX_TYPE_LONG
 #define UMFPACK_DNAME(name) umfpack_dl_ ## name
 #else
 #define UMFPACK_DNAME(name) umfpack_di_ ## name
 #endif
 
 #endif
-
-/*
-;;; Local Variables: ***
-;;; mode: C++ ***
-;;; End: ***
-*/
diff --git a/liboctave/data-conv.cc b/liboctave/data-conv.cc
--- a/liboctave/data-conv.cc
+++ b/liboctave/data-conv.cc
@@ -1206,14 +1206,8 @@ write_floats (std::ostream& os, const fl
       break;
 
     default:
       (*current_liboctave_error_handler)
 	("unrecognized data format requested");
       break;
     }
 }
-
-/*
-;;; Local Variables: ***
-;;; mode: C++ ***
-;;; End: ***
-*/
diff --git a/liboctave/data-conv.h b/liboctave/data-conv.h
--- a/liboctave/data-conv.h
+++ b/liboctave/data-conv.h
@@ -117,14 +117,8 @@ write_doubles (std::ostream& os, const d
 
 extern OCTAVE_API void
 read_floats (std::istream& is, float *data, save_type type, int len,
 	      bool swap, oct_mach_info::float_format fmt);
 extern OCTAVE_API void
 write_floats (std::ostream& os, const float *data, save_type type, int len);
 
 #endif
-
-/*
-;;; Local Variables: ***
-;;; mode: C++ ***
-;;; End: ***
-*/
diff --git a/liboctave/dbleAEPBAL.cc b/liboctave/dbleAEPBAL.cc
--- a/liboctave/dbleAEPBAL.cc
+++ b/liboctave/dbleAEPBAL.cc
@@ -94,14 +94,8 @@ AEPBALANCE::balancing_matrix (void) cons
 			     F77_CONST_CHAR_ARG2 (&side, 1),
 			     n, ilo, ihi, pscale, n,
 			     p_balancing_mat, n, info
 			     F77_CHAR_ARG_LEN (1)
 			     F77_CHAR_ARG_LEN (1)));
 
   return balancing_mat;
 }
-
-/*
-;;; Local Variables: ***
-;;; mode: C++ ***
-;;; End: ***
-*/
diff --git a/liboctave/dbleAEPBAL.h b/liboctave/dbleAEPBAL.h
--- a/liboctave/dbleAEPBAL.h
+++ b/liboctave/dbleAEPBAL.h
@@ -45,14 +45,8 @@ public:
 
   AEPBALANCE (const AEPBALANCE& a) 
     : base_aepbal<Matrix, ColumnVector> (a) { }
 
   Matrix balancing_matrix (void) const;
 };
 
 #endif
-
-/*
-;;; Local Variables: ***
-;;; mode: C++ ***
-;;; End: ***
-*/
diff --git a/liboctave/dbleCHOL.cc b/liboctave/dbleCHOL.cc
--- a/liboctave/dbleCHOL.cc
+++ b/liboctave/dbleCHOL.cc
@@ -435,14 +435,8 @@ CHOL::shift_sym (octave_idx_type i, octa
 
 #endif
 
 Matrix
 chol2inv (const Matrix& r)
 {
   return chol2inv_internal (r);
 }
-
-/*
-;;; Local Variables: ***
-;;; mode: C++ ***
-;;; End: ***
-*/
diff --git a/liboctave/dbleCHOL.h b/liboctave/dbleCHOL.h
--- a/liboctave/dbleCHOL.h
+++ b/liboctave/dbleCHOL.h
@@ -83,14 +83,8 @@ private:
   double xrcond;
 
   octave_idx_type init (const Matrix& a, bool calc_cond);
 };
 
 Matrix OCTAVE_API chol2inv (const Matrix& r);
 
 #endif
-
-/*
-;;; Local Variables: ***
-;;; mode: C++ ***
-;;; End: ***
-*/
diff --git a/liboctave/dbleGEPBAL.cc b/liboctave/dbleGEPBAL.cc
--- a/liboctave/dbleGEPBAL.cc
+++ b/liboctave/dbleGEPBAL.cc
@@ -118,14 +118,8 @@ GEPBALANCE::init (const Matrix& a, const
 			     F77_CONST_CHAR_ARG2 ("R", 1),
 			     n, ilo, ihi, plscale, prscale,
 			     n, p_balancing_mat2, n, info
 			     F77_CHAR_ARG_LEN (1)
 			     F77_CHAR_ARG_LEN (1)));
 
   return info;
 }
-
-/*
-;;; Local Variables: ***
-;;; mode: C++ ***
-;;; End: ***
-*/
diff --git a/liboctave/dbleGEPBAL.h b/liboctave/dbleGEPBAL.h
--- a/liboctave/dbleGEPBAL.h
+++ b/liboctave/dbleGEPBAL.h
@@ -77,14 +77,8 @@ private:
   Matrix balancing_mat;
   Matrix balancing_mat2;
 
   octave_idx_type init (const Matrix& a, const Matrix& b, 
 			const std::string& balance_job);
 };
 
 #endif
-
-/*
-;;; Local Variables: ***
-;;; mode: C++ ***
-;;; End: ***
-*/
diff --git a/liboctave/dbleHESS.cc b/liboctave/dbleHESS.cc
--- a/liboctave/dbleHESS.cc
+++ b/liboctave/dbleHESS.cc
@@ -115,14 +115,8 @@ HESS::init (const Matrix& a)
 
   if (n > 2)
     for (octave_idx_type j = 0; j < a_nc; j++)
       for (octave_idx_type i = j+2; i < a_nr; i++)
 	hess_mat.elem (i, j) = 0;
 
   return info;
 }
-
-/*
-;;; Local Variables: ***
-;;; mode: C++ ***
-;;; End: ***
-*/
diff --git a/liboctave/dbleHESS.h b/liboctave/dbleHESS.h
--- a/liboctave/dbleHESS.h
+++ b/liboctave/dbleHESS.h
@@ -65,14 +65,8 @@ private:
 
   Matrix hess_mat;
   Matrix unitary_hess_mat;
 
   octave_idx_type init (const Matrix& a);
 };
 
 #endif
-
-/*
-;;; Local Variables: ***
-;;; mode: C++ ***
-;;; End: ***
-*/
diff --git a/liboctave/dbleLU.cc b/liboctave/dbleLU.cc
--- a/liboctave/dbleLU.cc
+++ b/liboctave/dbleLU.cc
@@ -203,14 +203,8 @@ void LU::update_piv (const ColumnVector&
 }
 
 void LU::update_piv (const Matrix&, const Matrix&)
 {
   (*current_liboctave_error_handler) ("luupdate: not available in this version");
 }
 
 #endif
-
-/*
-;;; Local Variables: ***
-;;; mode: C++ ***
-;;; End: ***
-*/
diff --git a/liboctave/dbleLU.h b/liboctave/dbleLU.h
--- a/liboctave/dbleLU.h
+++ b/liboctave/dbleLU.h
@@ -57,14 +57,8 @@ public:
   void update (const Matrix& u, const Matrix& v);
 
   void update_piv (const ColumnVector& u, const ColumnVector& v);
 
   void update_piv (const Matrix& u, const Matrix& v);
 };
 
 #endif
-
-/*
-;;; Local Variables: ***
-;;; mode: C++ ***
-;;; End: ***
-*/
diff --git a/liboctave/dbleQR.cc b/liboctave/dbleQR.cc
--- a/liboctave/dbleQR.cc
+++ b/liboctave/dbleQR.cc
@@ -692,14 +692,8 @@ void warn_qrupdate_once (void)
          "simply update the matrix and recalculate factorizations.\n"
          "To use fast algorithms, link Octave with the qrupdate library.\n"
          "See <http://sourceforge.net/projects/qrupdate>.\n");
       warned = true;
     }
 }
 
 #endif
-
-/*
-;;; Local Variables: ***
-;;; mode: C++ ***
-;;; End: ***
-*/
diff --git a/liboctave/dbleQR.h b/liboctave/dbleQR.h
--- a/liboctave/dbleQR.h
+++ b/liboctave/dbleQR.h
@@ -76,14 +76,8 @@ public:
 
 protected:
 
   void form (octave_idx_type n, Matrix& afact, 
              double *tau, qr_type_t qr_type);
 };
 
 #endif
-
-/*
-;;; Local Variables: ***
-;;; mode: C++ ***
-;;; End: ***
-*/
diff --git a/liboctave/dbleQRP.cc b/liboctave/dbleQRP.cc
--- a/liboctave/dbleQRP.cc
+++ b/liboctave/dbleQRP.cc
@@ -96,14 +96,8 @@ QRP::init (const Matrix& a, qr_type_t qr
 
 ColumnVector
 QRP::Pvec (void) const
 {
   Array<double> pa (p.pvec ());
   ColumnVector pv (MArray<double> (pa) + 1.0);
   return pv;
 }
-
-/*
-;;; Local Variables: ***
-;;; mode: C++ ***
-;;; End: ***
-*/
diff --git a/liboctave/dbleQRP.h b/liboctave/dbleQRP.h
--- a/liboctave/dbleQRP.h
+++ b/liboctave/dbleQRP.h
@@ -64,14 +64,8 @@ public:
   friend std::ostream&  operator << (std::ostream&, const QRP&);
 
 protected:
 
   PermMatrix p;
 };
 
 #endif
-
-/*
-;;; Local Variables: ***
-;;; mode: C++ ***
-;;; End: ***
-*/
diff --git a/liboctave/dbleSCHUR.cc b/liboctave/dbleSCHUR.cc
--- a/liboctave/dbleSCHUR.cc
+++ b/liboctave/dbleSCHUR.cc
@@ -143,14 +143,8 @@ SCHUR::init (const Matrix& a, const std:
 std::ostream&
 operator << (std::ostream& os, const SCHUR& a)
 {
   os << a.schur_matrix () << "\n";
   os << a.unitary_matrix () << "\n";
 
   return os;
 }
-
-/*
-;;; Local Variables: ***
-;;; mode: C++ ***
-;;; End: ***
-*/
diff --git a/liboctave/dbleSCHUR.h b/liboctave/dbleSCHUR.h
--- a/liboctave/dbleSCHUR.h
+++ b/liboctave/dbleSCHUR.h
@@ -74,14 +74,8 @@ private:
   Matrix unitary_mat;
 
   select_function selector;
 
   octave_idx_type init (const Matrix& a, const std::string& ord, bool calc_unitary);
 };
 
 #endif
-
-/*
-;;; Local Variables: ***
-;;; mode: C++ ***
-;;; End: ***
-*/
diff --git a/liboctave/dbleSVD.cc b/liboctave/dbleSVD.cc
--- a/liboctave/dbleSVD.cc
+++ b/liboctave/dbleSVD.cc
@@ -164,14 +164,8 @@ std::ostream&
 operator << (std::ostream& os, const SVD& a)
 {
   os << a.left_singular_matrix () << "\n";
   os << a.singular_values () << "\n";
   os << a.right_singular_matrix () << "\n";
 
   return os;
 }
-
-/*
-;;; Local Variables: ***
-;;; mode: C++ ***
-;;; End: ***
-*/
diff --git a/liboctave/dbleSVD.h b/liboctave/dbleSVD.h
--- a/liboctave/dbleSVD.h
+++ b/liboctave/dbleSVD.h
@@ -85,14 +85,8 @@ private:
   DiagMatrix sigma;
   Matrix left_sm;
   Matrix right_sm;
 
   octave_idx_type init (const Matrix& a, type svd_type = std);
 };
 
 #endif
-
-/*
-;;; Local Variables: ***
-;;; mode: C++ ***
-;;; End: ***
-*/
diff --git a/liboctave/dir-ops.cc b/liboctave/dir-ops.cc
--- a/liboctave/dir-ops.cc
+++ b/liboctave/dir-ops.cc
@@ -106,14 +106,8 @@ dir_entry::close (void)
 void
 dir_entry::copy (const dir_entry& de)
 {
   name = de.name;
   dir = de.dir;
   fail = de.fail;
   errmsg = de.errmsg;
 }
-
-/*
-;;; Local Variables: ***
-;;; mode: C++ ***
-;;; End: ***
-*/
diff --git a/liboctave/dir-ops.h b/liboctave/dir-ops.h
--- a/liboctave/dir-ops.h
+++ b/liboctave/dir-ops.h
@@ -78,14 +78,8 @@ private:
 
   // If a failure occurs, this contains the system error text.
   std::string errmsg;
 
   void copy (const dir_entry&);
 };
 
 #endif
-
-/*
-;;; Local Variables: ***
-;;; mode: C++ ***
-;;; End: ***
-*/
diff --git a/liboctave/eigs-base.cc b/liboctave/eigs-base.cc
--- a/liboctave/eigs-base.cc
+++ b/liboctave/eigs-base.cc
@@ -3827,14 +3827,8 @@ utsolve (const SparseMatrix&, const Colu
 template static ComplexMatrix
 utsolve (const ComplexMatrix&, const ColumnVector&, const ComplexMatrix&);
 
 template static Matrix
 utsolve (const Matrix&, const ColumnVector&, const Matrix&);
 #endif
 
 #endif
-
-/*
-;;; Local Variables: ***
-;;; mode: C++ ***
-;;; End: ***
-*/
diff --git a/liboctave/f2c-main.c b/liboctave/f2c-main.c
--- a/liboctave/f2c-main.c
+++ b/liboctave/f2c-main.c
@@ -28,15 +28,8 @@ along with Octave; see the file COPYING.
    This function should never be called. */
 
 #ifdef F77_DUMMY_MAIN
 #  ifdef __cplusplus
 extern "C"
 #  endif
 int F77_DUMMY_MAIN() { assert(0); return 1; }
 #endif
-
-/*
-;;; Local Variables: ***
-;;; mode: C++ ***
-;;; End: ***
-*/
-
diff --git a/liboctave/fCColVector.cc b/liboctave/fCColVector.cc
--- a/liboctave/fCColVector.cc
+++ b/liboctave/fCColVector.cc
@@ -518,14 +518,8 @@ operator >> (std::istream& is, FloatComp
           if (is)
             a.elem (i) = tmp;
           else
             break;
         }
     }
   return is;
 }
-
-/*
-;;; Local Variables: ***
-;;; mode: C++ ***
-;;; End: ***
-*/
diff --git a/liboctave/fCColVector.h b/liboctave/fCColVector.h
--- a/liboctave/fCColVector.h
+++ b/liboctave/fCColVector.h
@@ -127,14 +127,8 @@ public:
 private:
 
   FloatComplexColumnVector (FloatComplex *d, octave_idx_type l) : MArray<FloatComplex> (d, l) { }
 };
 
 MARRAY_FORWARD_DEFS (MArray, FloatComplexColumnVector, FloatComplex)
 
 #endif
-
-/*
-;;; Local Variables: ***
-;;; mode: C++ ***
-;;; End: ***
-*/
diff --git a/liboctave/fCDiagMatrix.cc b/liboctave/fCDiagMatrix.cc
--- a/liboctave/fCDiagMatrix.cc
+++ b/liboctave/fCDiagMatrix.cc
@@ -575,14 +575,8 @@ operator << (std::ostream& os, const Flo
 	    os << " " /* setw (field_width) */ << a.elem (i, i);
 	  else
 	    os << " " /* setw (field_width) */ << ZERO;
 	}
       os << "\n";
     }
   return os;
 }
-
-/*
-;;; Local Variables: ***
-;;; mode: C++ ***
-;;; End: ***
-*/
diff --git a/liboctave/fCDiagMatrix.h b/liboctave/fCDiagMatrix.h
--- a/liboctave/fCDiagMatrix.h
+++ b/liboctave/fCDiagMatrix.h
@@ -151,14 +151,8 @@ OCTAVE_API FloatComplexDiagMatrix
 operator * (const FloatComplexDiagMatrix& a, const FloatDiagMatrix& b);
 
 OCTAVE_API FloatComplexDiagMatrix
 operator * (const FloatDiagMatrix& a, const FloatComplexDiagMatrix& b);
 
 MDIAGARRAY2_FORWARD_DEFS (MDiagArray2, FloatComplexDiagMatrix, FloatComplex)
 
 #endif
-
-/*
-;;; Local Variables: ***
-;;; mode: C++ ***
-;;; End: ***
-*/
diff --git a/liboctave/fCMatrix.cc b/liboctave/fCMatrix.cc
--- a/liboctave/fCMatrix.cc
+++ b/liboctave/fCMatrix.cc
@@ -4081,14 +4081,8 @@ FloatComplexMatrix linspace (const Float
 MS_CMP_OPS (FloatComplexMatrix, FloatComplex)
 MS_BOOL_OPS (FloatComplexMatrix, FloatComplex)
 
 SM_CMP_OPS (FloatComplex, FloatComplexMatrix)
 SM_BOOL_OPS (FloatComplex, FloatComplexMatrix)
 
 MM_CMP_OPS (FloatComplexMatrix, FloatComplexMatrix)
 MM_BOOL_OPS (FloatComplexMatrix, FloatComplexMatrix)
-
-/*
-;;; Local Variables: ***
-;;; mode: C++ ***
-;;; End: ***
-*/
diff --git a/liboctave/fCMatrix.h b/liboctave/fCMatrix.h
--- a/liboctave/fCMatrix.h
+++ b/liboctave/fCMatrix.h
@@ -425,14 +425,8 @@ SM_CMP_OP_DECLS (FloatComplex, FloatComp
 SM_BOOL_OP_DECLS (FloatComplex, FloatComplexMatrix, OCTAVE_API)
 
 MM_CMP_OP_DECLS (FloatComplexMatrix, FloatComplexMatrix, OCTAVE_API)
 MM_BOOL_OP_DECLS (FloatComplexMatrix, FloatComplexMatrix, OCTAVE_API)
 
 MARRAY_FORWARD_DEFS (MArray2, FloatComplexMatrix, FloatComplex)
 
 #endif
-
-/*
-;;; Local Variables: ***
-;;; mode: C++ ***
-;;; End: ***
-*/
diff --git a/liboctave/fCNDArray.cc b/liboctave/fCNDArray.cc
--- a/liboctave/fCNDArray.cc
+++ b/liboctave/fCNDArray.cc
@@ -971,14 +971,8 @@ FloatComplexNDArray& operator /= (FloatC
     do_ms_inplace_op<FloatComplexNDArray, float> (a, s, mx_inline_div2);
   return a;
 }
 
 BSXFUN_STDOP_DEFS_MXLOOP (FloatComplexNDArray)
 BSXFUN_STDREL_DEFS_MXLOOP (FloatComplexNDArray)
 
 BSXFUN_OP_DEF_MXLOOP (pow, FloatComplexNDArray, mx_inline_pow)
-
-/*
-;;; Local Variables: ***
-;;; mode: C++ ***
-;;; End: ***
-*/
diff --git a/liboctave/fCNDArray.h b/liboctave/fCNDArray.h
--- a/liboctave/fCNDArray.h
+++ b/liboctave/fCNDArray.h
@@ -179,14 +179,8 @@ extern OCTAVE_API FloatComplexNDArray& o
 extern OCTAVE_API FloatComplexNDArray& operator /= (FloatComplexNDArray& a, float s);
 
 BSXFUN_STDOP_DECLS (FloatComplexNDArray, OCTAVE_API)
 BSXFUN_STDREL_DECLS (FloatComplexNDArray, OCTAVE_API)
 
 BSXFUN_OP_DECL (pow, FloatComplexNDArray, OCTAVE_API)
 
 #endif
-
-/*
-;;; Local Variables: ***
-;;; mode: C++ ***
-;;; End: ***
-*/
diff --git a/liboctave/fCRowVector.cc b/liboctave/fCRowVector.cc
--- a/liboctave/fCRowVector.cc
+++ b/liboctave/fCRowVector.cc
@@ -477,14 +477,8 @@ linspace (const FloatComplex& x1, const 
   FloatComplex delta = (x2 - x1) / (n - 1.0f);
   retval(0) = x1;
   for (octave_idx_type i = 1; i < n-1; i++)
     retval(i) = x1 + static_cast<float> (i)*delta;
   retval(n-1) = x2;
 
   return retval;
 }
-
-/*
-;;; Local Variables: ***
-;;; mode: C++ ***
-;;; End: ***
-*/
diff --git a/liboctave/fCRowVector.h b/liboctave/fCRowVector.h
--- a/liboctave/fCRowVector.h
+++ b/liboctave/fCRowVector.h
@@ -119,14 +119,8 @@ FloatComplex operator * (const FloatComp
 
 // other operations
 
 OCTAVE_API FloatComplexRowVector linspace (const FloatComplex& x1, const FloatComplex& x2, octave_idx_type n);
 
 MARRAY_FORWARD_DEFS (MArray, FloatComplexRowVector, FloatComplex)
 
 #endif
-
-/*
-;;; Local Variables: ***
-;;; mode: C++ ***
-;;; End: ***
-*/
diff --git a/liboctave/fCmplxAEPBAL.cc b/liboctave/fCmplxAEPBAL.cc
--- a/liboctave/fCmplxAEPBAL.cc
+++ b/liboctave/fCmplxAEPBAL.cc
@@ -96,14 +96,8 @@ FloatComplexAEPBALANCE::balancing_matrix
 			     F77_CONST_CHAR_ARG2 (&side, 1),
 			     n, ilo, ihi, pscale, n,
 			     p_balancing_mat, n, info
 			     F77_CHAR_ARG_LEN (1)
 			     F77_CHAR_ARG_LEN (1)));
 
   return balancing_mat;
 }
-
-/*
-;;; Local Variables: ***
-;;; mode: C++ ***
-;;; End: ***
-*/
diff --git a/liboctave/fCmplxAEPBAL.h b/liboctave/fCmplxAEPBAL.h
--- a/liboctave/fCmplxAEPBAL.h
+++ b/liboctave/fCmplxAEPBAL.h
@@ -45,14 +45,8 @@ public:
 
   FloatComplexAEPBALANCE (const FloatComplexAEPBALANCE& a) 
     : base_aepbal<FloatComplexMatrix, FloatColumnVector> (a) { }
 
   FloatComplexMatrix balancing_matrix (void) const;
 };
 
 #endif
-
-/*
-;;; Local Variables: ***
-;;; mode: C++ ***
-;;; End: ***
-*/
diff --git a/liboctave/fCmplxCHOL.cc b/liboctave/fCmplxCHOL.cc
--- a/liboctave/fCmplxCHOL.cc
+++ b/liboctave/fCmplxCHOL.cc
@@ -434,14 +434,8 @@ FloatComplexCHOL::shift_sym (octave_idx_
 
 #endif
 
 FloatComplexMatrix
 chol2inv (const FloatComplexMatrix& r)
 {
   return chol2inv_internal (r);
 }
-
-/*
-;;; Local Variables: ***
-;;; mode: C++ ***
-;;; End: ***
-*/
diff --git a/liboctave/fCmplxCHOL.h b/liboctave/fCmplxCHOL.h
--- a/liboctave/fCmplxCHOL.h
+++ b/liboctave/fCmplxCHOL.h
@@ -86,14 +86,8 @@ private:
   float xrcond;
 
   octave_idx_type init (const FloatComplexMatrix& a, bool calc_cond);
 };
 
 FloatComplexMatrix OCTAVE_API chol2inv (const FloatComplexMatrix& r);
 
 #endif
-
-/*
-;;; Local Variables: ***
-;;; mode: C++ ***
-;;; End: ***
-*/
diff --git a/liboctave/fCmplxGEPBAL.cc b/liboctave/fCmplxGEPBAL.cc
--- a/liboctave/fCmplxGEPBAL.cc
+++ b/liboctave/fCmplxGEPBAL.cc
@@ -118,14 +118,8 @@ FloatComplexGEPBALANCE::init (const Floa
 			     F77_CONST_CHAR_ARG2 ("R", 1),
 			     n, ilo, ihi, plscale, prscale,
 			     n, p_balancing_mat2, n, info
 			     F77_CHAR_ARG_LEN (1)
 			     F77_CHAR_ARG_LEN (1)));
 
   return info;
 }
-
-/*
-;;; Local Variables: ***
-;;; mode: C++ ***
-;;; End: ***
-*/
diff --git a/liboctave/fCmplxGEPBAL.h b/liboctave/fCmplxGEPBAL.h
--- a/liboctave/fCmplxGEPBAL.h
+++ b/liboctave/fCmplxGEPBAL.h
@@ -78,14 +78,8 @@ private:
   FloatMatrix balancing_mat;
   FloatMatrix balancing_mat2;
 
   octave_idx_type init (const FloatComplexMatrix& a, const FloatComplexMatrix& b, 
 			const std::string& balance_job);
 };
 
 #endif
-
-/*
-;;; Local Variables: ***
-;;; mode: C++ ***
-;;; End: ***
-*/
diff --git a/liboctave/fCmplxHESS.cc b/liboctave/fCmplxHESS.cc
--- a/liboctave/fCmplxHESS.cc
+++ b/liboctave/fCmplxHESS.cc
@@ -114,14 +114,8 @@ FloatComplexHESS::init (const FloatCompl
 
   if (n > 2)
     for (octave_idx_type j = 0; j < a_nc; j++)
       for (octave_idx_type i = j+2; i < a_nr; i++)
 	hess_mat.elem (i, j) = 0;
 
   return info;
 }
-
-/*
-;;; Local Variables: ***
-;;; mode: C++ ***
-;;; End: ***
-*/
diff --git a/liboctave/fCmplxHESS.h b/liboctave/fCmplxHESS.h
--- a/liboctave/fCmplxHESS.h
+++ b/liboctave/fCmplxHESS.h
@@ -68,14 +68,8 @@ private:
 
   FloatComplexMatrix hess_mat;
   FloatComplexMatrix unitary_hess_mat;
 
   octave_idx_type init (const FloatComplexMatrix& a);
 };
 
 #endif
-
-/*
-;;; Local Variables: ***
-;;; mode: C++ ***
-;;; End: ***
-*/
diff --git a/liboctave/fCmplxLU.cc b/liboctave/fCmplxLU.cc
--- a/liboctave/fCmplxLU.cc
+++ b/liboctave/fCmplxLU.cc
@@ -203,14 +203,8 @@ void FloatComplexLU::update_piv (const F
 }
 
 void FloatComplexLU::update_piv (const FloatComplexMatrix&, const FloatComplexMatrix&)
 {
   (*current_liboctave_error_handler) ("luupdate: not available in this version");
 }
 
 #endif
-
-/*
-;;; Local Variables: ***
-;;; mode: C++ ***
-;;; End: ***
-*/
diff --git a/liboctave/fCmplxLU.h b/liboctave/fCmplxLU.h
--- a/liboctave/fCmplxLU.h
+++ b/liboctave/fCmplxLU.h
@@ -61,14 +61,8 @@ public:
   void update (const FloatComplexMatrix& u, const FloatComplexMatrix& v);
 
   void update_piv (const FloatComplexColumnVector& u, const FloatComplexColumnVector& v);
 
   void update_piv (const FloatComplexMatrix& u, const FloatComplexMatrix& v);
 };
 
 #endif
-
-/*
-;;; Local Variables: ***
-;;; mode: C++ ***
-;;; End: ***
-*/
diff --git a/liboctave/fCmplxQR.cc b/liboctave/fCmplxQR.cc
--- a/liboctave/fCmplxQR.cc
+++ b/liboctave/fCmplxQR.cc
@@ -683,14 +683,8 @@ FloatComplexQR::shift_cols (octave_idx_t
     (*current_liboctave_error_handler) ("qrshift: index out of range");
   else
     {
       init (::shift_cols (q*r, i, j), get_type ());
     }
 }
 
 #endif
-
-/*
-;;; Local Variables: ***
-;;; mode: C++ ***
-;;; End: ***
-*/
diff --git a/liboctave/fCmplxQR.h b/liboctave/fCmplxQR.h
--- a/liboctave/fCmplxQR.h
+++ b/liboctave/fCmplxQR.h
@@ -71,14 +71,8 @@ public:
 
 protected:
 
   void form (octave_idx_type n, FloatComplexMatrix& afact, 
              FloatComplex *tau, qr_type_t qr_type);
 };
 
 #endif
-
-/*
-;;; Local Variables: ***
-;;; mode: C++ ***
-;;; End: ***
-*/
diff --git a/liboctave/fCmplxQRP.cc b/liboctave/fCmplxQRP.cc
--- a/liboctave/fCmplxQRP.cc
+++ b/liboctave/fCmplxQRP.cc
@@ -98,14 +98,8 @@ FloatComplexQRP::init (const FloatComple
 
 FloatColumnVector
 FloatComplexQRP::Pvec (void) const
 {
   Array<float> pa (p.pvec ());
   FloatColumnVector pv (MArray<float> (pa) + 1.0f);
   return pv;
 }
-
-/*
-;;; Local Variables: ***
-;;; mode: C++ ***
-;;; End: ***
-*/
diff --git a/liboctave/fCmplxQRP.h b/liboctave/fCmplxQRP.h
--- a/liboctave/fCmplxQRP.h
+++ b/liboctave/fCmplxQRP.h
@@ -63,14 +63,8 @@ public:
   friend std::ostream&  operator << (std::ostream&, const FloatComplexQRP&);
 
 private:
 
   PermMatrix p;
 };
 
 #endif
-
-/*
-;;; Local Variables: ***
-;;; mode: C++ ***
-;;; End: ***
-*/
diff --git a/liboctave/fCmplxSCHUR.cc b/liboctave/fCmplxSCHUR.cc
--- a/liboctave/fCmplxSCHUR.cc
+++ b/liboctave/fCmplxSCHUR.cc
@@ -129,14 +129,8 @@ FloatComplexSCHUR::init (const FloatComp
 			     n, s, n, sdim, pw, q, n, rconde, rcondv,
 			     pwork, lwork, prwork, pbwork, info
 			     F77_CHAR_ARG_LEN (1)
 			     F77_CHAR_ARG_LEN (1)
 			     F77_CHAR_ARG_LEN (1)));
 
   return info;
 }
-
-/*
-;;; Local Variables: ***
-;;; mode: C++ ***
-;;; End: ***
-*/
diff --git a/liboctave/fCmplxSCHUR.h b/liboctave/fCmplxSCHUR.h
--- a/liboctave/fCmplxSCHUR.h
+++ b/liboctave/fCmplxSCHUR.h
@@ -75,14 +75,8 @@ private:
   FloatComplexMatrix unitary_mat;
 
   select_function selector;
 
   octave_idx_type init (const FloatComplexMatrix& a, const std::string& ord, bool calc_unitary);
 };
 
 #endif
-
-/*
-;;; Local Variables: ***
-;;; mode: C++ ***
-;;; End: ***
-*/
diff --git a/liboctave/fCmplxSVD.cc b/liboctave/fCmplxSVD.cc
--- a/liboctave/fCmplxSVD.cc
+++ b/liboctave/fCmplxSVD.cc
@@ -160,14 +160,8 @@ FloatComplexSVD::init (const FloatComple
 			     F77_CHAR_ARG_LEN (1)
 			     F77_CHAR_ARG_LEN (1)));
 
   if (! (jobv == 'N' || jobv == 'O'))
     right_sm = right_sm.hermitian ();
 
   return info;
 }
-
-/*
-;;; Local Variables: ***
-;;; mode: C++ ***
-;;; End: ***
-*/
diff --git a/liboctave/fCmplxSVD.h b/liboctave/fCmplxSVD.h
--- a/liboctave/fCmplxSVD.h
+++ b/liboctave/fCmplxSVD.h
@@ -82,14 +82,8 @@ private:
   FloatDiagMatrix sigma;
   FloatComplexMatrix left_sm;
   FloatComplexMatrix right_sm;
 
   octave_idx_type init (const FloatComplexMatrix& a, SVD::type svd_type = SVD::std);
 };
 
 #endif
-
-/*
-;;; Local Variables: ***
-;;; mode: C++ ***
-;;; End: ***
-*/
diff --git a/liboctave/fColVector.cc b/liboctave/fColVector.cc
--- a/liboctave/fColVector.cc
+++ b/liboctave/fColVector.cc
@@ -315,14 +315,8 @@ operator >> (std::istream& is, FloatColu
           if (is)
             a.elem (i) = tmp;
           else
             break;
         }
     }
   return is;
 }
-
-/*
-;;; Local Variables: ***
-;;; mode: C++ ***
-;;; End: ***
-*/
diff --git a/liboctave/fColVector.h b/liboctave/fColVector.h
--- a/liboctave/fColVector.h
+++ b/liboctave/fColVector.h
@@ -101,14 +101,8 @@ private:
 // Publish externally used friend functions.
 
 extern OCTAVE_API FloatColumnVector real (const FloatComplexColumnVector& a);
 extern OCTAVE_API FloatColumnVector imag (const FloatComplexColumnVector& a);
 
 MARRAY_FORWARD_DEFS (MArray, FloatColumnVector, float)
 
 #endif
-
-/*
-;;; Local Variables: ***
-;;; mode: C++ ***
-;;; End: ***
-*/
diff --git a/liboctave/fDiagMatrix.cc b/liboctave/fDiagMatrix.cc
--- a/liboctave/fDiagMatrix.cc
+++ b/liboctave/fDiagMatrix.cc
@@ -394,14 +394,8 @@ operator << (std::ostream& os, const Flo
 	    os << " " /* setw (field_width) */ << a.elem (i, i);
 	  else
 	    os << " " /* setw (field_width) */ << 0.0;
 	}
       os << "\n";
     }
   return os;
 }
-
-/*
-;;; Local Variables: ***
-;;; mode: C++ ***
-;;; End: ***
-*/
diff --git a/liboctave/fDiagMatrix.h b/liboctave/fDiagMatrix.h
--- a/liboctave/fDiagMatrix.h
+++ b/liboctave/fDiagMatrix.h
@@ -119,14 +119,8 @@ OCTAVE_API FloatDiagMatrix imag (const F
 // diagonal matrix by diagonal matrix -> diagonal matrix operations
 
 OCTAVE_API FloatDiagMatrix
 operator * (const FloatDiagMatrix& a, const FloatDiagMatrix& b);
 
 MDIAGARRAY2_FORWARD_DEFS (MDiagArray2, FloatDiagMatrix, float)
 
 #endif
-
-/*
-;;; Local Variables: ***
-;;; mode: C++ ***
-;;; End: ***
-*/
diff --git a/liboctave/fEIG.cc b/liboctave/fEIG.cc
--- a/liboctave/fEIG.cc
+++ b/liboctave/fEIG.cc
@@ -855,14 +855,8 @@ FloatEIG::hermitian_init (const FloatCom
       lambda = FloatComplexColumnVector (wr);
       v = calc_ev ? FloatComplexMatrix (atmp) : FloatComplexMatrix ();
     }
   else
     (*current_liboctave_error_handler) ("zhegv workspace query failed");
 
   return info;
 }
-
-/*
-;;; Local Variables: ***
-;;; mode: C++ ***
-;;; End: ***
-*/
diff --git a/liboctave/fEIG.h b/liboctave/fEIG.h
--- a/liboctave/fEIG.h
+++ b/liboctave/fEIG.h
@@ -99,14 +99,8 @@ private:
 
   octave_idx_type symmetric_init (const FloatMatrix& a, bool calc_eigenvectors);
   octave_idx_type symmetric_init (const FloatMatrix& a, const FloatMatrix& b, bool calc_eigenvectors);
   octave_idx_type hermitian_init (const FloatComplexMatrix& a, bool calc_eigenvectors);
   octave_idx_type hermitian_init (const FloatComplexMatrix& a, const FloatComplexMatrix& b, bool calc_eigenvectors);
 };
 
 #endif
-
-/*
-;;; Local Variables: ***
-;;; mode: C++ ***
-;;; End: ***
-*/
diff --git a/liboctave/fMatrix.cc b/liboctave/fMatrix.cc
--- a/liboctave/fMatrix.cc
+++ b/liboctave/fMatrix.cc
@@ -3452,14 +3452,8 @@ FloatMatrix linspace (const FloatColumnV
 MS_CMP_OPS (FloatMatrix, float)
 MS_BOOL_OPS (FloatMatrix, float)
 
 SM_CMP_OPS (float, FloatMatrix)
 SM_BOOL_OPS (float, FloatMatrix)
 
 MM_CMP_OPS (FloatMatrix, FloatMatrix)
 MM_BOOL_OPS (FloatMatrix, FloatMatrix)
-
-/*
-;;; Local Variables: ***
-;;; mode: C++ ***
-;;; End: ***
-*/
diff --git a/liboctave/fMatrix.h b/liboctave/fMatrix.h
--- a/liboctave/fMatrix.h
+++ b/liboctave/fMatrix.h
@@ -375,14 +375,8 @@ MM_CMP_OP_DECLS (FloatMatrix, FloatMatri
 MM_BOOL_OP_DECLS (FloatMatrix, FloatMatrix, OCTAVE_API)
 
 MARRAY_FORWARD_DEFS (MArray2, FloatMatrix, float)
 
 template <class T>
 void read_int (std::istream& is, bool swap_bytes, T& val);
 
 #endif
-
-/*
-;;; Local Variables: ***
-;;; mode: C++ ***
-;;; End: ***
-*/
diff --git a/liboctave/fNDArray.cc b/liboctave/fNDArray.cc
--- a/liboctave/fNDArray.cc
+++ b/liboctave/fNDArray.cc
@@ -985,14 +985,8 @@ NDND_CMP_OPS (FloatNDArray, FloatNDArray
 NDND_BOOL_OPS (FloatNDArray, FloatNDArray)
 
 BSXFUN_STDOP_DEFS_MXLOOP (FloatNDArray)
 BSXFUN_STDREL_DEFS_MXLOOP (FloatNDArray)
 
 BSXFUN_OP_DEF_MXLOOP (pow, FloatNDArray, mx_inline_pow)
 BSXFUN_OP2_DEF_MXLOOP (pow, FloatComplexNDArray, FloatComplexNDArray, 
                        FloatNDArray, mx_inline_pow)
-
-/*
-;;; Local Variables: ***
-;;; mode: C++ ***
-;;; End: ***
-*/
diff --git a/liboctave/fNDArray.h b/liboctave/fNDArray.h
--- a/liboctave/fNDArray.h
+++ b/liboctave/fNDArray.h
@@ -189,14 +189,8 @@ MARRAY_FORWARD_DEFS (MArrayN, FloatNDArr
 BSXFUN_STDOP_DECLS (FloatNDArray, OCTAVE_API)
 BSXFUN_STDREL_DECLS (FloatNDArray, OCTAVE_API)
 
 BSXFUN_OP_DECL (pow, FloatNDArray, OCTAVE_API)
 BSXFUN_OP2_DECL (pow, FloatComplexNDArray, FloatComplexNDArray, 
                  FloatNDArray, OCTAVE_API)
 
 #endif
-
-/*
-;;; Local Variables: ***
-;;; mode: C++ ***
-;;; End: ***
-*/
diff --git a/liboctave/fRowVector.cc b/liboctave/fRowVector.cc
--- a/liboctave/fRowVector.cc
+++ b/liboctave/fRowVector.cc
@@ -332,14 +332,8 @@ operator * (const FloatRowVector& v, con
 }
 
 FloatComplex
 operator * (const FloatRowVector& v, const FloatComplexColumnVector& a)
 {
   FloatComplexRowVector tmp (v);
   return tmp * a;
 }
-
-/*
-;;; Local Variables: ***
-;;; mode: C++ ***
-;;; End: ***
-*/
diff --git a/liboctave/fRowVector.h b/liboctave/fRowVector.h
--- a/liboctave/fRowVector.h
+++ b/liboctave/fRowVector.h
@@ -102,14 +102,8 @@ Complex OCTAVE_API operator * (const Flo
 
 // other operations
 
 OCTAVE_API FloatRowVector linspace (float x1, float x2, octave_idx_type n);
 
 MARRAY_FORWARD_DEFS (MArray, FloatRowVector, float)
 
 #endif
-
-/*
-;;; Local Variables: ***
-;;; mode: C++ ***
-;;; End: ***
-*/
diff --git a/liboctave/file-ops.cc b/liboctave/file-ops.cc
--- a/liboctave/file-ops.cc
+++ b/liboctave/file-ops.cc
@@ -852,14 +852,8 @@ std::string
 file_ops::concat (const std::string& dir, const std::string& file)
 {
   return dir.empty ()
     ? file
     : (is_dir_sep (dir[dir.length()-1])
        ? dir + file
        : dir + file_ops::dir_sep_char () + file);
 }
-
-/*
-;;; Local Variables: ***
-;;; mode: C++ ***
-;;; End: ***
-*/
diff --git a/liboctave/file-ops.h b/liboctave/file-ops.h
--- a/liboctave/file-ops.h
+++ b/liboctave/file-ops.h
@@ -184,14 +184,8 @@ private:
 
     char xdir_sep_char;
     std::string xdir_sep_str;
     std::string xdir_sep_chars;
   };
 };
 
 #endif
-
-/*
-;;; Local Variables: ***
-;;; mode: C++ ***
-;;; End: ***
-*/
diff --git a/liboctave/file-stat.cc b/liboctave/file-stat.cc
--- a/liboctave/file-stat.cc
+++ b/liboctave/file-stat.cc
@@ -286,14 +286,8 @@ file_fstat::update_internal (bool force)
 #if defined (HAVE_STRUCT_STAT_ST_BLOCKS)
 	  fs_blocks = buf.st_blocks;
 #endif
 	}
 
       initialized = true;
     }
 }
-
-/*
-;;; Local Variables: ***
-;;; mode: C++ ***
-;;; End: ***
-*/
diff --git a/liboctave/file-stat.h b/liboctave/file-stat.h
--- a/liboctave/file-stat.h
+++ b/liboctave/file-stat.h
@@ -310,14 +310,8 @@ private:
 
   // Open file descriptor.
   int fid;
 
   void update_internal (bool force = false);
 };
 
 #endif
-
-/*
-;;; Local Variables: ***
-;;; mode: C++ ***
-;;; End: ***
-*/
diff --git a/liboctave/floatAEPBAL.cc b/liboctave/floatAEPBAL.cc
--- a/liboctave/floatAEPBAL.cc
+++ b/liboctave/floatAEPBAL.cc
@@ -95,14 +95,8 @@ FloatAEPBALANCE::balancing_matrix (void)
 			     F77_CONST_CHAR_ARG2 (&side, 1),
 			     n, ilo, ihi, pscale, n,
 			     p_balancing_mat, n, info
 			     F77_CHAR_ARG_LEN (1)
 			     F77_CHAR_ARG_LEN (1)));
 
   return balancing_mat;
 }
-
-/*
-;;; Local Variables: ***
-;;; mode: C++ ***
-;;; End: ***
-*/
diff --git a/liboctave/floatAEPBAL.h b/liboctave/floatAEPBAL.h
--- a/liboctave/floatAEPBAL.h
+++ b/liboctave/floatAEPBAL.h
@@ -45,14 +45,8 @@ public:
 
   FloatAEPBALANCE (const FloatAEPBALANCE& a) 
     : base_aepbal<FloatMatrix, FloatColumnVector> (a) { }
 
   FloatMatrix balancing_matrix (void) const;
 };
 
 #endif
-
-/*
-;;; Local Variables: ***
-;;; mode: C++ ***
-;;; End: ***
-*/
diff --git a/liboctave/floatCHOL.cc b/liboctave/floatCHOL.cc
--- a/liboctave/floatCHOL.cc
+++ b/liboctave/floatCHOL.cc
@@ -435,14 +435,8 @@ FloatCHOL::shift_sym (octave_idx_type i,
 
 #endif
 
 FloatMatrix
 chol2inv (const FloatMatrix& r)
 {
   return chol2inv_internal (r);
 }
-
-/*
-;;; Local Variables: ***
-;;; mode: C++ ***
-;;; End: ***
-*/
diff --git a/liboctave/floatCHOL.h b/liboctave/floatCHOL.h
--- a/liboctave/floatCHOL.h
+++ b/liboctave/floatCHOL.h
@@ -83,14 +83,8 @@ private:
   float xrcond;
 
   octave_idx_type init (const FloatMatrix& a, bool calc_cond);
 };
 
 FloatMatrix OCTAVE_API chol2inv (const FloatMatrix& r);
 
 #endif
-
-/*
-;;; Local Variables: ***
-;;; mode: C++ ***
-;;; End: ***
-*/
diff --git a/liboctave/floatGEPBAL.cc b/liboctave/floatGEPBAL.cc
--- a/liboctave/floatGEPBAL.cc
+++ b/liboctave/floatGEPBAL.cc
@@ -118,14 +118,8 @@ FloatGEPBALANCE::init (const FloatMatrix
 			     F77_CONST_CHAR_ARG2 ("R", 1),
 			     n, ilo, ihi, plscale, prscale,
 			     n, p_balancing_mat2, n, info
 			     F77_CHAR_ARG_LEN (1)
 			     F77_CHAR_ARG_LEN (1)));
 
   return info;
 }
-
-/*
-;;; Local Variables: ***
-;;; mode: C++ ***
-;;; End: ***
-*/
diff --git a/liboctave/floatGEPBAL.h b/liboctave/floatGEPBAL.h
--- a/liboctave/floatGEPBAL.h
+++ b/liboctave/floatGEPBAL.h
@@ -77,14 +77,8 @@ private:
   FloatMatrix balancing_mat;
   FloatMatrix balancing_mat2;
 
   octave_idx_type init (const FloatMatrix& a, const FloatMatrix& b, 
 			const std::string& balance_job);
 };
 
 #endif
-
-/*
-;;; Local Variables: ***
-;;; mode: C++ ***
-;;; End: ***
-*/
diff --git a/liboctave/floatHESS.cc b/liboctave/floatHESS.cc
--- a/liboctave/floatHESS.cc
+++ b/liboctave/floatHESS.cc
@@ -115,14 +115,8 @@ FloatHESS::init (const FloatMatrix& a)
 
   if (n > 2)
     for (octave_idx_type j = 0; j < a_nc; j++)
       for (octave_idx_type i = j+2; i < a_nr; i++)
 	hess_mat.elem (i, j) = 0;
 
   return info;
 }
-
-/*
-;;; Local Variables: ***
-;;; mode: C++ ***
-;;; End: ***
-*/
diff --git a/liboctave/floatHESS.h b/liboctave/floatHESS.h
--- a/liboctave/floatHESS.h
+++ b/liboctave/floatHESS.h
@@ -65,14 +65,8 @@ private:
 
   FloatMatrix hess_mat;
   FloatMatrix unitary_hess_mat;
 
   octave_idx_type init (const FloatMatrix& a);
 };
 
 #endif
-
-/*
-;;; Local Variables: ***
-;;; mode: C++ ***
-;;; End: ***
-*/
diff --git a/liboctave/floatLU.cc b/liboctave/floatLU.cc
--- a/liboctave/floatLU.cc
+++ b/liboctave/floatLU.cc
@@ -203,14 +203,8 @@ void FloatLU::update_piv (const FloatCol
 }
 
 void FloatLU::update_piv (const FloatMatrix&, const FloatMatrix&)
 {
   (*current_liboctave_error_handler) ("luupdate: not available in this version");
 }
 
 #endif
-
-/*
-;;; Local Variables: ***
-;;; mode: C++ ***
-;;; End: ***
-*/
diff --git a/liboctave/floatLU.h b/liboctave/floatLU.h
--- a/liboctave/floatLU.h
+++ b/liboctave/floatLU.h
@@ -59,14 +59,8 @@ public:
   void update (const FloatMatrix& u, const FloatMatrix& v);
 
   void update_piv (const FloatColumnVector& u, const FloatColumnVector& v);
 
   void update_piv (const FloatMatrix& u, const FloatMatrix& v);
 };
 
 #endif
-
-/*
-;;; Local Variables: ***
-;;; mode: C++ ***
-;;; End: ***
-*/
diff --git a/liboctave/floatQR.cc b/liboctave/floatQR.cc
--- a/liboctave/floatQR.cc
+++ b/liboctave/floatQR.cc
@@ -678,15 +678,8 @@ FloatQR::shift_cols (octave_idx_type i, 
     (*current_liboctave_error_handler) ("qrshift: index out of range");
   else
     {
       init (::shift_cols (q*r, i, j), get_type ());
     }
 }
 
 #endif
-
-
-/*
-;;; Local Variables: ***
-;;; mode: C++ ***
-;;; End: ***
-*/
diff --git a/liboctave/floatQR.h b/liboctave/floatQR.h
--- a/liboctave/floatQR.h
+++ b/liboctave/floatQR.h
@@ -69,14 +69,8 @@ public:
 
 protected:
 
   void form (octave_idx_type n, FloatMatrix& afact, 
              float *tau, qr_type_t qr_type);
 };
 
 #endif
-
-/*
-;;; Local Variables: ***
-;;; mode: C++ ***
-;;; End: ***
-*/
diff --git a/liboctave/floatQRP.cc b/liboctave/floatQRP.cc
--- a/liboctave/floatQRP.cc
+++ b/liboctave/floatQRP.cc
@@ -96,13 +96,8 @@ FloatQRP::init (const FloatMatrix& a, qr
 
 FloatColumnVector
 FloatQRP::Pvec (void) const
 {
   Array<float> pa (p.pvec ());
   FloatColumnVector pv (MArray<float> (pa) + 1.0f);
   return pv;
 }
-/*
-;;; Local Variables: ***
-;;; mode: C++ ***
-;;; End: ***
-*/
diff --git a/liboctave/floatQRP.h b/liboctave/floatQRP.h
--- a/liboctave/floatQRP.h
+++ b/liboctave/floatQRP.h
@@ -64,14 +64,8 @@ public:
   friend std::ostream&  operator << (std::ostream&, const FloatQRP&);
 
 protected:
 
   PermMatrix p;
 };
 
 #endif
-
-/*
-;;; Local Variables: ***
-;;; mode: C++ ***
-;;; End: ***
-*/
diff --git a/liboctave/floatSCHUR.cc b/liboctave/floatSCHUR.cc
--- a/liboctave/floatSCHUR.cc
+++ b/liboctave/floatSCHUR.cc
@@ -143,14 +143,8 @@ FloatSCHUR::init (const FloatMatrix& a, 
 std::ostream&
 operator << (std::ostream& os, const FloatSCHUR& a)
 {
   os << a.schur_matrix () << "\n";
   os << a.unitary_matrix () << "\n";
 
   return os;
 }
-
-/*
-;;; Local Variables: ***
-;;; mode: C++ ***
-;;; End: ***
-*/
diff --git a/liboctave/floatSCHUR.h b/liboctave/floatSCHUR.h
--- a/liboctave/floatSCHUR.h
+++ b/liboctave/floatSCHUR.h
@@ -74,14 +74,8 @@ private:
   FloatMatrix unitary_mat;
 
   select_function selector;
 
   octave_idx_type init (const FloatMatrix& a, const std::string& ord, bool calc_unitary);
 };
 
 #endif
-
-/*
-;;; Local Variables: ***
-;;; mode: C++ ***
-;;; End: ***
-*/
diff --git a/liboctave/floatSVD.cc b/liboctave/floatSVD.cc
--- a/liboctave/floatSVD.cc
+++ b/liboctave/floatSVD.cc
@@ -164,14 +164,8 @@ std::ostream&
 operator << (std::ostream& os, const FloatSVD& a)
 {
   os << a.left_singular_matrix () << "\n";
   os << a.singular_values () << "\n";
   os << a.right_singular_matrix () << "\n";
 
   return os;
 }
-
-/*
-;;; Local Variables: ***
-;;; mode: C++ ***
-;;; End: ***
-*/
diff --git a/liboctave/floatSVD.h b/liboctave/floatSVD.h
--- a/liboctave/floatSVD.h
+++ b/liboctave/floatSVD.h
@@ -79,14 +79,8 @@ private:
   FloatDiagMatrix sigma;
   FloatMatrix left_sm;
   FloatMatrix right_sm;
 
   octave_idx_type init (const FloatMatrix& a, SVD::type svd_type = SVD::std);
 };
 
 #endif
-
-/*
-;;; Local Variables: ***
-;;; mode: C++ ***
-;;; End: ***
-*/
diff --git a/liboctave/functor.h b/liboctave/functor.h
--- a/liboctave/functor.h
+++ b/liboctave/functor.h
@@ -68,14 +68,8 @@ func_ptr (RT (*f) (PT))
 template <typename CT, typename RT, typename PT>
 functor_with_conversion<CT, RT, PT>
 func_ptr_with_conversion (RT (*f) (PT))
 {
   return functor_with_conversion<CT, RT, PT> (f);
 }
 
 #endif
-
-/*
-;;; Local Variables: ***
-;;; mode: C++ ***
-;;; End: ***
-*/
diff --git a/liboctave/glob-match.cc b/liboctave/glob-match.cc
--- a/liboctave/glob-match.cc
+++ b/liboctave/glob-match.cc
@@ -52,15 +52,8 @@ glob_match::opts_to_fnmatch_flags (unsig
   if (xopts & noescape)
     retval |= FNM_NOESCAPE;
 
   if (xopts & period)
     retval |= FNM_PERIOD;
 
   return retval;
 }
-
-/*
-;;; Local Variables: ***
-;;; mode: C++ ***
-;;; End: ***
-*/
-
diff --git a/liboctave/glob-match.h b/liboctave/glob-match.h
--- a/liboctave/glob-match.h
+++ b/liboctave/glob-match.h
@@ -94,14 +94,8 @@ private:
 
   // Option flags.
   int fnmatch_flags;
 
   int opts_to_fnmatch_flags (unsigned int xopts) const;
 };
 
 #endif
-
-/*
-;;; Local Variables: ***
-;;; mode: C++ ***
-;;; End: ***
-*/
diff --git a/liboctave/idx-vector.cc b/liboctave/idx-vector.cc
--- a/liboctave/idx-vector.cc
+++ b/liboctave/idx-vector.cc
@@ -944,14 +944,8 @@ INSTANTIATE_SCALAR_VECTOR_REP_CONST (dou
 INSTANTIATE_SCALAR_VECTOR_REP_CONST (octave_int8)
 INSTANTIATE_SCALAR_VECTOR_REP_CONST (octave_int16)
 INSTANTIATE_SCALAR_VECTOR_REP_CONST (octave_int32)
 INSTANTIATE_SCALAR_VECTOR_REP_CONST (octave_int64)
 INSTANTIATE_SCALAR_VECTOR_REP_CONST (octave_uint8)
 INSTANTIATE_SCALAR_VECTOR_REP_CONST (octave_uint16)
 INSTANTIATE_SCALAR_VECTOR_REP_CONST (octave_uint32)
 INSTANTIATE_SCALAR_VECTOR_REP_CONST (octave_uint64)
-
-/*
-;;; Local Variables: ***
-;;; mode: C++ ***
-;;; End: ***
-*/
diff --git a/liboctave/idx-vector.h b/liboctave/idx-vector.h
--- a/liboctave/idx-vector.h
+++ b/liboctave/idx-vector.h
@@ -969,14 +969,8 @@ public:
   
 private:
 
   idx_base_rep *rep;
 
 };
 
 #endif
-
-/*
-;;; Local Variables: ***
-;;; mode: C++ ***
-;;; End: ***
-*/
diff --git a/liboctave/int16NDArray.cc b/liboctave/int16NDArray.cc
--- a/liboctave/int16NDArray.cc
+++ b/liboctave/int16NDArray.cc
@@ -49,14 +49,8 @@ SND_BOOL_OPS (octave_int16, int16NDArray
 
 NDND_CMP_OPS (int16NDArray, int16NDArray)
 NDND_BOOL_OPS (int16NDArray, int16NDArray)
 
 MINMAX_FCNS (int16)
 
 BSXFUN_STDOP_DEFS_MXLOOP (int16NDArray)
 BSXFUN_STDREL_DEFS_MXLOOP (int16NDArray)
-
-/*
-;;; Local Variables: ***
-;;; mode: C++ ***
-;;; End: ***
-*/
diff --git a/liboctave/int16NDArray.h b/liboctave/int16NDArray.h
--- a/liboctave/int16NDArray.h
+++ b/liboctave/int16NDArray.h
@@ -42,14 +42,8 @@ NDND_BOOL_OP_DECLS (int16NDArray, int16N
 MARRAY_FORWARD_DEFS (MArrayN, int16NDArray, octave_int16)
 
 MINMAX_DECLS (int16)
 
 BSXFUN_STDOP_DECLS (int16NDArray, OCTAVE_API)
 BSXFUN_STDREL_DECLS (int16NDArray, OCTAVE_API)
 
 #endif
-
-/*
-;;; Local Variables: ***
-;;; mode: C++ ***
-;;; End: ***
-*/
diff --git a/liboctave/int32NDArray.cc b/liboctave/int32NDArray.cc
--- a/liboctave/int32NDArray.cc
+++ b/liboctave/int32NDArray.cc
@@ -49,14 +49,8 @@ SND_BOOL_OPS (octave_int32, int32NDArray
 
 NDND_CMP_OPS (int32NDArray, int32NDArray)
 NDND_BOOL_OPS (int32NDArray, int32NDArray)
 
 MINMAX_FCNS (int32)
 
 BSXFUN_STDOP_DEFS_MXLOOP (int32NDArray)
 BSXFUN_STDREL_DEFS_MXLOOP (int32NDArray)
-
-/*
-;;; Local Variables: ***
-;;; mode: C++ ***
-;;; End: ***
-*/
diff --git a/liboctave/int32NDArray.h b/liboctave/int32NDArray.h
--- a/liboctave/int32NDArray.h
+++ b/liboctave/int32NDArray.h
@@ -42,14 +42,8 @@ NDND_BOOL_OP_DECLS (int32NDArray, int32N
 MARRAY_FORWARD_DEFS (MArrayN, int32NDArray, octave_int32)
 
 MINMAX_DECLS (int32)
 
 BSXFUN_STDOP_DECLS (int32NDArray, OCTAVE_API)
 BSXFUN_STDREL_DECLS (int32NDArray, OCTAVE_API)
 
 #endif
-
-/*
-;;; Local Variables: ***
-;;; mode: C++ ***
-;;; End: ***
-*/
diff --git a/liboctave/int64NDArray.cc b/liboctave/int64NDArray.cc
--- a/liboctave/int64NDArray.cc
+++ b/liboctave/int64NDArray.cc
@@ -49,14 +49,8 @@ SND_BOOL_OPS (octave_int64, int64NDArray
 
 NDND_CMP_OPS (int64NDArray, int64NDArray)
 NDND_BOOL_OPS (int64NDArray, int64NDArray)
 
 MINMAX_FCNS (int64)
 
 BSXFUN_STDOP_DEFS_MXLOOP (int64NDArray)
 BSXFUN_STDREL_DEFS_MXLOOP (int64NDArray)
-
-/*
-;;; Local Variables: ***
-;;; mode: C++ ***
-;;; End: ***
-*/
diff --git a/liboctave/int64NDArray.h b/liboctave/int64NDArray.h
--- a/liboctave/int64NDArray.h
+++ b/liboctave/int64NDArray.h
@@ -42,14 +42,8 @@ NDND_BOOL_OP_DECLS (int64NDArray, int64N
 MARRAY_FORWARD_DEFS (MArrayN, int64NDArray, octave_int64)
 
 MINMAX_DECLS (int64)
 
 BSXFUN_STDOP_DECLS (int64NDArray, OCTAVE_API)
 BSXFUN_STDREL_DECLS (int64NDArray, OCTAVE_API)
 
 #endif
-
-/*
-;;; Local Variables: ***
-;;; mode: C++ ***
-;;; End: ***
-*/
diff --git a/liboctave/int8NDArray.cc b/liboctave/int8NDArray.cc
--- a/liboctave/int8NDArray.cc
+++ b/liboctave/int8NDArray.cc
@@ -49,14 +49,8 @@ SND_BOOL_OPS (octave_int8, int8NDArray)
 
 NDND_CMP_OPS (int8NDArray, int8NDArray)
 NDND_BOOL_OPS (int8NDArray, int8NDArray)
 
 MINMAX_FCNS (int8)
 
 BSXFUN_STDOP_DEFS_MXLOOP (int8NDArray)
 BSXFUN_STDREL_DEFS_MXLOOP (int8NDArray)
-
-/*
-;;; Local Variables: ***
-;;; mode: C++ ***
-;;; End: ***
-*/
diff --git a/liboctave/int8NDArray.h b/liboctave/int8NDArray.h
--- a/liboctave/int8NDArray.h
+++ b/liboctave/int8NDArray.h
@@ -42,14 +42,8 @@ NDND_BOOL_OP_DECLS (int8NDArray, int8NDA
 MARRAY_FORWARD_DEFS (MArrayN, int8NDArray, octave_int8)
 
 MINMAX_DECLS (int8)
 
 BSXFUN_STDOP_DECLS (int8NDArray, OCTAVE_API)
 BSXFUN_STDREL_DECLS (int8NDArray, OCTAVE_API)
 
 #endif
-
-/*
-;;; Local Variables: ***
-;;; mode: C++ ***
-;;; End: ***
-*/
diff --git a/liboctave/intNDArray.cc b/liboctave/intNDArray.cc
--- a/liboctave/intNDArray.cc
+++ b/liboctave/intNDArray.cc
@@ -279,14 +279,8 @@ intNDArray<T>::cummin (Array<octave_idx_
 }
 
 template <class T>
 intNDArray<T>
 intNDArray<T>::diff (octave_idx_type order, int dim) const
 {
   return do_mx_diff_op<intNDArray<T> > (*this, dim, order, mx_inline_diff);
 }
-
-/*
-;;; Local Variables: ***
-;;; mode: C++ ***
-;;; End: ***
-*/
diff --git a/liboctave/intNDArray.h b/liboctave/intNDArray.h
--- a/liboctave/intNDArray.h
+++ b/liboctave/intNDArray.h
@@ -125,14 +125,8 @@ protected:
 
 template <class T>
 std::ostream& operator << (std::ostream& os, const intNDArray<T>& a);
 
 template <class T>
 std::istream& operator >> (std::istream& is, intNDArray<T>& a);
 
 #endif
-
-/*
-;;; Local Variables: ***
-;;; mode: C++ ***
-;;; End: ***
-*/
diff --git a/liboctave/kpse-xfns.h b/liboctave/kpse-xfns.h
--- a/liboctave/kpse-xfns.h
+++ b/liboctave/kpse-xfns.h
@@ -58,14 +58,8 @@ extern "C" {
 
 extern const char *octave_basename (const char *name);
 
 #ifdef __cplusplus
 }
 #endif
 
 #endif
-
-/*
-;;; Local Variables: ***
-;;; mode: C ***
-;;; End: ***
-*/
diff --git a/liboctave/kpse.cc b/liboctave/kpse.cc
--- a/liboctave/kpse.cc
+++ b/liboctave/kpse.cc
@@ -2639,14 +2639,8 @@ kpse_var_expand (const std::string& src)
 	    }
 	}
       else
 	expansion += src[i];
     }
 
   return expansion;
 }
-
-/*
-;;; Local Variables: ***
-;;; mode: C++ ***
-;;; End: ***
-*/
diff --git a/liboctave/lo-cieee.c b/liboctave/lo-cieee.c
--- a/liboctave/lo-cieee.c
+++ b/liboctave/lo-cieee.c
@@ -315,14 +315,8 @@ int
 #elif defined (copysign)
   return (copysign (1.0, x) < 0);
 #elif defined (HAVE_COPYSIGN)
   return (x < 0 || copysign (1.0, x) < 0);
 #else
   return x < 0;
 #endif
 }
-
-/*
-;;; Local Variables: ***
-;;; mode: C++ ***
-;;; End: ***
-*/
diff --git a/liboctave/lo-cutils.c b/liboctave/lo-cutils.c
--- a/liboctave/lo-cutils.c
+++ b/liboctave/lo-cutils.c
@@ -120,14 +120,8 @@ octave_w32_library_search (HINSTANCE han
 }
 #endif
 
 OCTAVE_API pid_t
 octave_waitpid (pid_t pid, int *status, int options)
 {
   return WAITPID (pid, status, options);
 }
-
-/*
-;;; Local Variables: ***
-;;; mode: C++ ***
-;;; End: ***
-*/
diff --git a/liboctave/lo-ieee.cc b/liboctave/lo-ieee.cc
--- a/liboctave/lo-ieee.cc
+++ b/liboctave/lo-ieee.cc
@@ -164,14 +164,8 @@ octave_ieee_init (void)
       // experiment with building Octave on a system without IEEE
       // floating point should be capable of removing this check and
       // the configure test.
       (*current_liboctave_error_handler)
 	("lo_ieee_init: floating point format is not IEEE!  Maybe DLAMCH is miscompiled, or you are using some strange system without IEEE floating point math?");
       abort ();
     }
 }
-
-/*
-;;; Local Variables: ***
-;;; mode: C++ ***
-;;; End: ***
-*/
diff --git a/liboctave/lo-ieee.h b/liboctave/lo-ieee.h
--- a/liboctave/lo-ieee.h
+++ b/liboctave/lo-ieee.h
@@ -126,14 +126,8 @@ extern OCTAVE_API int __lo_ieee_float_si
 #define lo_ieee_is_NA(x) (sizeof (x) == sizeof (float) ? \
 			  __lo_ieee_float_is_NA (x) : __lo_ieee_is_NA (x))
 #define lo_ieee_is_NaN_or_NA(x) (sizeof (x) == sizeof (float) ? \
 			  __lo_ieee_float_is_NaN_or_NA (x) : __lo_ieee_is_NaN_or_NA (x))
 #define lo_ieee_signbit(x) (sizeof (x) == sizeof (float) ? \
 			  __lo_ieee_float_signbit (x) : __lo_ieee_signbit (x))
 
 #endif
-
-/*
-;;; Local Variables: ***
-;;; mode: C++ ***
-;;; End: ***
-*/
diff --git a/liboctave/lo-mappers.cc b/liboctave/lo-mappers.cc
--- a/liboctave/lo-mappers.cc
+++ b/liboctave/lo-mappers.cc
@@ -726,14 +726,8 @@ Complex rc_sqrt (double x)
 {
   return x < 0.0 ? Complex (0.0, sqrt (-x)) : Complex (sqrt (x));
 }
 
 FloatComplex rc_sqrt (float x)
 {
   return x < 0.0f ? FloatComplex (0.0f, sqrtf (-x)) : FloatComplex (sqrtf (x));
 }
-
-/*
-;;; Local Variables: ***
-;;; mode: C++ ***
-;;; End: ***
-*/
diff --git a/liboctave/lo-mappers.h b/liboctave/lo-mappers.h
--- a/liboctave/lo-mappers.h
+++ b/liboctave/lo-mappers.h
@@ -196,14 +196,8 @@ extern OCTAVE_API FloatComplex rc_log (f
 extern OCTAVE_API Complex rc_log2 (double);
 extern OCTAVE_API FloatComplex rc_log2 (float);
 extern OCTAVE_API Complex rc_log10 (double);
 extern OCTAVE_API FloatComplex rc_log10 (float);
 extern OCTAVE_API Complex rc_sqrt (double);
 extern OCTAVE_API FloatComplex rc_sqrt (float);
 
 #endif
-
-/*
-;;; Local Variables: ***
-;;; mode: C++ ***
-;;; End: ***
-*/
diff --git a/liboctave/lo-math.h b/liboctave/lo-math.h
--- a/liboctave/lo-math.h
+++ b/liboctave/lo-math.h
@@ -33,14 +33,8 @@ along with Octave; see the file COPYING.
 #include <math.h>
 #endif
 
 #if defined (HAVE_SUNMATH_H)
 #include <sunmath.h>
 #endif
 
 #endif
-
-/*
-;;; Local Variables: ***
-;;; mode: C++ ***
-;;; End: ***
-*/
diff --git a/liboctave/lo-specfun.cc b/liboctave/lo-specfun.cc
--- a/liboctave/lo-specfun.cc
+++ b/liboctave/lo-specfun.cc
@@ -3167,14 +3167,8 @@ double erfinv (double x)
 {
   return do_erfinv (x, true);
 }
 
 float erfinv (float x)
 {
   return do_erfinv (x, false); 
 }
-
-/*
-;;; Local Variables: ***
-;;; mode: C++ ***
-;;; End: ***
-*/
diff --git a/liboctave/lo-specfun.h b/liboctave/lo-specfun.h
--- a/liboctave/lo-specfun.h
+++ b/liboctave/lo-specfun.h
@@ -582,15 +582,8 @@ inline float gammainc (float x, float a)
 
 extern OCTAVE_API Complex rc_log1p (double);
 extern OCTAVE_API FloatComplex rc_log1p (float);
 
 extern OCTAVE_API double erfinv (double x);
 extern OCTAVE_API float erfinv (float x);
 
 #endif
-
-/*
-;;; Local Variables: ***
-;;; mode: C ***
-;;; page-delimiter: "^/\\*" ***
-;;; End: ***
-*/
diff --git a/liboctave/lo-sysdep.cc b/liboctave/lo-sysdep.cc
--- a/liboctave/lo-sysdep.cc
+++ b/liboctave/lo-sysdep.cc
@@ -236,14 +236,8 @@ readdir (DIR *d)
 	return 0;
     }
   d->d.d_name = d->fd.cFileName;
   d->dirty = 0;
   return &(d->d);
 }
 
 #endif
- 
-/*
-;;; Local Variables: ***
-;;; mode: C++ ***
-;;; End: ***
-*/
diff --git a/liboctave/lo-sysdep.h b/liboctave/lo-sysdep.h
--- a/liboctave/lo-sysdep.h
+++ b/liboctave/lo-sysdep.h
@@ -58,14 +58,8 @@ typedef struct __DIR DIR;
 extern DIR* opendir (const char *name);
 extern void rewinddir (DIR *d);
 extern void closedir (DIR *d);
 extern struct direct *readdir (DIR *d);
 
 #endif
 
 #endif
-
-/*
-;;; Local Variables: ***
-;;; mode: C++ ***
-;;; End: ***
-*/
diff --git a/liboctave/lo-traits.h b/liboctave/lo-traits.h
--- a/liboctave/lo-traits.h
+++ b/liboctave/lo-traits.h
@@ -146,15 +146,8 @@ public:
 template<template<typename> class TemplatedClass, typename T, typename S>
 class subst_template_param<TemplatedClass, TemplatedClass<T>, S>
 {
 public:
   typedef TemplatedClass<S> type;
 };
 
 #endif
-
-/*
-;;; Local Variables: ***
-;;; mode: C ***
-;;; page-delimiter: "^/\\*" ***
-;;; End: ***
-*/
diff --git a/liboctave/lo-utils.cc b/liboctave/lo-utils.cc
--- a/liboctave/lo-utils.cc
+++ b/liboctave/lo-utils.cc
@@ -581,14 +581,8 @@ void
 octave_write_float_complex (std::ostream& os, const FloatComplex& c)
 {
   os << "(";
   octave_write_float (os, real (c));
   os << ",";
   octave_write_float (os, imag (c));
   os << ")";
 }
-
-/*
-;;; Local Variables: ***
-;;; mode: C++ ***
-;;; End: ***
-*/
diff --git a/liboctave/lo-utils.h b/liboctave/lo-utils.h
--- a/liboctave/lo-utils.h
+++ b/liboctave/lo-utils.h
@@ -110,14 +110,8 @@ extern OCTAVE_API void octave_write_floa
 #include <windows.h>
 extern "C" OCTAVE_API void * octave_w32_library_search (HINSTANCE handle, const char *name);
 #undef min
 #undef max
 #endif
 #endif
 
 extern "C" OCTAVE_API pid_t octave_waitpid (pid_t pid, int *status, int options);
-
-/*
-;;; Local Variables: ***
-;;; mode: C++ ***
-;;; End: ***
-*/
diff --git a/liboctave/mach-info.cc b/liboctave/mach-info.cc
--- a/liboctave/mach-info.cc
+++ b/liboctave/mach-info.cc
@@ -250,14 +250,8 @@ oct_mach_info::float_format_as_string (f
       break;
 
     default:
       break;
     }
 
   return retval;
 }
-
-/*
-;;; Local Variables: ***
-;;; mode: C++ ***
-;;; End: ***
-*/
diff --git a/liboctave/mach-info.h b/liboctave/mach-info.h
--- a/liboctave/mach-info.h
+++ b/liboctave/mach-info.h
@@ -75,14 +75,8 @@ private:
   // No copying!
 
   oct_mach_info (const oct_mach_info&);
 
   oct_mach_info& operator = (const oct_mach_info&);
 };
 
 #endif
-
-/*
-;;; Local Variables: ***
-;;; mode: C++ ***
-;;; End: ***
-*/
diff --git a/liboctave/mx-base.h b/liboctave/mx-base.h
--- a/liboctave/mx-base.h
+++ b/liboctave/mx-base.h
@@ -82,14 +82,8 @@ along with Octave; see the file COPYING.
 #include "int64NDArray.h"
 
 #include "uint8NDArray.h"
 #include "uint16NDArray.h"
 #include "uint32NDArray.h"
 #include "uint64NDArray.h"
 
 #endif
-
-/*
-;;; Local Variables: ***
-;;; mode: C++ ***
-;;; End: ***
-*/
diff --git a/liboctave/mx-defs.h b/liboctave/mx-defs.h
--- a/liboctave/mx-defs.h
+++ b/liboctave/mx-defs.h
@@ -138,14 +138,8 @@ get_blas_char (blas_trans_type transt)
 {
   return static_cast<char> (transt);
 }
 
 
 #endif
 
 #endif
-
-/*
-;;; Local Variables: ***
-;;; mode: C++ ***
-;;; End: ***
-*/
diff --git a/liboctave/mx-ext.h b/liboctave/mx-ext.h
--- a/liboctave/mx-ext.h
+++ b/liboctave/mx-ext.h
@@ -74,14 +74,8 @@ along with Octave; see the file COPYING.
 
 #include "dbleQR.h"
 #include "CmplxQR.h"
 
 #include "dbleQRP.h"
 #include "CmplxQRP.h"
 
 #endif
-
-/*
-;;; Local Variables: ***
-;;; mode: C++ ***
-;;; End: ***
-*/
diff --git a/liboctave/mx-inlines.cc b/liboctave/mx-inlines.cc
--- a/liboctave/mx-inlines.cc
+++ b/liboctave/mx-inlines.cc
@@ -1380,14 +1380,8 @@ mx_inline_xsum (const T *v, T *r,
 
   for (octave_idx_type i = 0; i < m; i++)
     r[i] += e[i];
 }
 
 OP_RED_FCNN (mx_inline_xsum, T, T)
 
 #endif
-
-/*
-;;; Local Variables: ***
-;;; mode: C++ ***
-;;; End: ***
-*/
diff --git a/liboctave/mx-op-defs.h b/liboctave/mx-op-defs.h
--- a/liboctave/mx-op-defs.h
+++ b/liboctave/mx-op-defs.h
@@ -628,15 +628,8 @@ M operator * (const M& x, const PM& p) \
 #define NDND_MAPPER_BODY(R, NAME) \
   R retval (dims ()); \
   octave_idx_type n = numel (); \
   for (octave_idx_type i = 0; i < n; i++) \
     retval.xelem (i) = NAME (elem (i)); \
   return retval;
 
 #endif
-
-
-/*
-;;; Local Variables: ***
-;;; mode: C++ ***
-;;; End: ***
-*/
diff --git a/liboctave/oct-alloc.cc b/liboctave/oct-alloc.cc
--- a/liboctave/oct-alloc.cc
+++ b/liboctave/oct-alloc.cc
@@ -98,14 +98,8 @@ octave_allocator::grow (void)
       if (f)
 	f ();
 
       retval = false;
     }
 
   return retval;
 }
-
-/*
-;;; Local Variables: ***
-;;; mode: C++ ***
-;;; End: ***
-*/
diff --git a/liboctave/oct-alloc.h b/liboctave/oct-alloc.h
--- a/liboctave/oct-alloc.h
+++ b/liboctave/oct-alloc.h
@@ -83,14 +83,8 @@ private:
 
 #define DEFINE_OCTAVE_ALLOCATOR(t) \
   octave_allocator t::allocator (sizeof (t))
 
 #define DEFINE_OCTAVE_ALLOCATOR2(t, s) \
   octave_allocator t::allocator (sizeof (t), s)
 
 #endif
-
-/*
-;;; Local Variables: ***
-;;; mode: C++ ***
-;;; End: ***
-*/
diff --git a/liboctave/oct-cmplx.h b/liboctave/oct-cmplx.h
--- a/liboctave/oct-cmplx.h
+++ b/liboctave/oct-cmplx.h
@@ -76,14 +76,8 @@ inline bool operator OP (T a, const std:
 }
 
 DEF_COMPLEXR_COMP (>, >)
 DEF_COMPLEXR_COMP (<, <)
 DEF_COMPLEXR_COMP (<=, <)
 DEF_COMPLEXR_COMP (>=, >)
 
 #endif
-
-/*
-;;; Local Variables: ***
-;;; mode: C++ ***
-;;; End: ***
-*/
diff --git a/liboctave/oct-env.cc b/liboctave/oct-env.cc
--- a/liboctave/oct-env.cc
+++ b/liboctave/oct-env.cc
@@ -537,14 +537,8 @@ octave_env::error (int err_num) const
   (*current_liboctave_error_handler) ("%s", strerror (err_num));
 }
 
 void
 octave_env::error (const std::string& s) const
 {
   (*current_liboctave_error_handler) ("%s", s.c_str ());
 }
-
-/*
-;;; Local Variables: ***
-;;; mode: C++ ***
-;;; End: ***
-*/
diff --git a/liboctave/oct-env.h b/liboctave/oct-env.h
--- a/liboctave/oct-env.h
+++ b/liboctave/oct-env.h
@@ -131,14 +131,8 @@ private:
   mutable std::string program_invocation_name;
 
   mutable std::string user_name;
 
   mutable std::string host_name;
 };
 
 #endif
-
-/*
-;;; Local Variables: ***
-;;; mode: C++ ***
-;;; End: ***
-*/
diff --git a/liboctave/oct-fftw.cc b/liboctave/oct-fftw.cc
--- a/liboctave/oct-fftw.cc
+++ b/liboctave/oct-fftw.cc
@@ -1015,15 +1015,8 @@ octave_fftw::ifftNd (const FloatComplex 
   const FloatComplex scale = npts;
   for (size_t i = 0; i < npts; i++)
     out[i] /= scale;
 
   return 0;
 }
 
 #endif
-
-/*
-;;; Local Variables: ***
-;;; mode: C++ ***
-;;; End: ***
-*/
-
diff --git a/liboctave/oct-fftw.h b/liboctave/oct-fftw.h
--- a/liboctave/oct-fftw.h
+++ b/liboctave/oct-fftw.h
@@ -328,15 +328,8 @@ private:
   octave_fftw (void);
   octave_fftw (const octave_fftw&);
   octave_fftw& operator = (const octave_fftw&);
 };
 
 #endif
 
 #endif
-
-/*
-;;; Local Variables: ***
-;;; mode: C++ ***
-;;; End: ***
-*/
-
diff --git a/liboctave/oct-getopt.c b/liboctave/oct-getopt.c
--- a/liboctave/oct-getopt.c
+++ b/liboctave/oct-getopt.c
@@ -33,15 +33,8 @@ octave_getopt (int argc, char *const *ar
 }
 
 int
 octave_getopt_long (int argc, char *const *argv, const char *options,
 		    const struct option *long_options, int *opt_index)
 {
   return getopt_long (argc, argv, options, long_options, opt_index);
 }
-
-
-/*
-;;; Local Variables: ***
-;;; mode: C++ ***
-;;; End: ***
-*/
diff --git a/liboctave/oct-getopt.h b/liboctave/oct-getopt.h
--- a/liboctave/oct-getopt.h
+++ b/liboctave/oct-getopt.h
@@ -39,14 +39,8 @@ extern char *optarg;
 
 extern int optind;
 
 #ifdef __cplusplus
 }
 #endif
 
 #endif
-
-/*
-;;; Local Variables: ***
-;;; mode: C++ ***
-;;; End: ***
-*/
diff --git a/liboctave/oct-group.cc b/liboctave/oct-group.cc
--- a/liboctave/oct-group.cc
+++ b/liboctave/oct-group.cc
@@ -218,14 +218,8 @@ octave_group::octave_group (void *p, std
 #endif
 }
 
 void
 octave_group::gripe_invalid (void) const
 {
   (*current_liboctave_error_handler) ("invalid group object");
 }
-
-/*
-;;; Local Variables: ***
-;;; mode: C++ ***
-;;; End: ***
-*/
diff --git a/liboctave/oct-group.h b/liboctave/oct-group.h
--- a/liboctave/oct-group.h
+++ b/liboctave/oct-group.h
@@ -107,14 +107,8 @@ private:
   // This is how we will create an octave_group object from a pointer
   // to a struct group.
   octave_group (void *p, std::string& msg);
 
   void gripe_invalid (void) const;
 };
 
 #endif
-
-/*
-;;; Local Variables: ***
-;;; mode: C++ ***
-;;; End: ***
-*/
diff --git a/liboctave/oct-inttypes.cc b/liboctave/oct-inttypes.cc
--- a/liboctave/oct-inttypes.cc
+++ b/liboctave/oct-inttypes.cc
@@ -646,14 +646,8 @@ INSTANTIATE_INTTYPE (uint64_t);
 %!test
 %! wstate = warning("query", "Octave:int-convert-overflow");
 %! warning("on", "Octave:int-convert-overflow");
 %! fail("int32(-2**31-0.5)","warning",".*")
 %! warning(wstate.state, "Octave:int-convert-overflow");
 %!assert((int64(2**62)+1)**1, int64(2**62)+1)
 %!assert((int64(2**30)+1)**2, int64(2**60+2**31) + 1)
 */
-
-/*
-;;; Local Variables: ***
-;;; mode: C++ ***
-;;; End: ***
-*/
diff --git a/liboctave/oct-inttypes.h b/liboctave/oct-inttypes.h
--- a/liboctave/oct-inttypes.h
+++ b/liboctave/oct-inttypes.h
@@ -1102,14 +1102,8 @@ template <class T>
 octave_int<T>
 xmin (const octave_int<T>& x, const octave_int<T>& y)
 {
   const T xv = x.value (), yv = y.value ();
   return octave_int<T> (xv <= yv ? xv : yv); 
 }
 
 #endif
-
-/*
-;;; Local Variables: ***
-;;; mode: C++ ***
-;;; End: ***
-*/
diff --git a/liboctave/oct-md5.cc b/liboctave/oct-md5.cc
--- a/liboctave/oct-md5.cc
+++ b/liboctave/oct-md5.cc
@@ -71,14 +71,8 @@ oct_md5_file (const std::string file)
         (*current_liboctave_error_handler) ("internal error in md5_stream");
     }
   else
     (*current_liboctave_error_handler) ("unable to open file `%s' for reading",
                                         file.c_str());
 
   return retval;
 }
-	  
-/*
-;;; Local Variables: ***
-;;; mode: C++ ***
-;;; End: ***
-*/
diff --git a/liboctave/oct-md5.h b/liboctave/oct-md5.h
--- a/liboctave/oct-md5.h
+++ b/liboctave/oct-md5.h
@@ -18,14 +18,8 @@ You should have received a copy of the G
 along with Octave; see the file COPYING.  If not, see
 <http://www.gnu.org/licenses/>.
 
 */
 
 extern OCTAVE_API std::string oct_md5 (const std::string str);
 
 extern OCTAVE_API std::string oct_md5_file (const std::string file);
-	  
-/*
-;;; Local Variables: ***
-;;; mode: C++ ***
-;;; End: ***
-*/
diff --git a/liboctave/oct-passwd.cc b/liboctave/oct-passwd.cc
--- a/liboctave/oct-passwd.cc
+++ b/liboctave/oct-passwd.cc
@@ -224,14 +224,8 @@ octave_passwd::octave_passwd (void *p, s
 #endif
 }
 
 void
 octave_passwd::gripe_invalid (void) const
 {
   (*current_liboctave_error_handler) ("invalid password object");
 }
-
-/*
-;;; Local Variables: ***
-;;; mode: C++ ***
-;;; End: ***
-*/
diff --git a/liboctave/oct-passwd.h b/liboctave/oct-passwd.h
--- a/liboctave/oct-passwd.h
+++ b/liboctave/oct-passwd.h
@@ -127,14 +127,8 @@ private:
   // This is how we will create an octave_passwd object from a pointer
   // to a struct passwd.
   octave_passwd (void *p, std::string& msg);
 
   void gripe_invalid (void) const;
 };
 
 #endif
-
-/*
-;;; Local Variables: ***
-;;; mode: C++ ***
-;;; End: ***
-*/
diff --git a/liboctave/oct-rand.cc b/liboctave/oct-rand.cc
--- a/liboctave/oct-rand.cc
+++ b/liboctave/oct-rand.cc
@@ -652,14 +652,8 @@ octave_rand::fill (octave_idx_type len, 
 	("rand: invalid distribution ID = %d", current_distribution);
       break;
     }
 
   save_state ();
 
   return;
 }
-
-/*
-;;; Local Variables: ***
-;;; mode: C++ ***
-;;; End: ***
-*/
diff --git a/liboctave/oct-rand.h b/liboctave/oct-rand.h
--- a/liboctave/oct-rand.h
+++ b/liboctave/oct-rand.h
@@ -224,14 +224,8 @@ private:
   void set_internal_state (const ColumnVector& s);
 
   void switch_to_generator (int dist);
 
   void fill (octave_idx_type len, double *v, double a);
 };
 
 #endif
-
-/*
-;;; Local Variables: ***
-;;; mode: C++ ***
-;;; End: ***
-*/
diff --git a/liboctave/oct-rl-edit.c b/liboctave/oct-rl-edit.c
--- a/liboctave/oct-rl-edit.c
+++ b/liboctave/oct-rl-edit.c
@@ -377,14 +377,8 @@ octave_rl_ctrl (char c)
 
 char
 octave_rl_meta (char c)
 {
   return META (c);
 }
 
 #endif
-
-/*
-;;; Local Variables: ***
-;;; mode: C++ ***
-;;; End: ***
-*/
diff --git a/liboctave/oct-rl-edit.h b/liboctave/oct-rl-edit.h
--- a/liboctave/oct-rl-edit.h
+++ b/liboctave/oct-rl-edit.h
@@ -144,14 +144,8 @@ extern char octave_rl_ctrl (char);
 
 extern char octave_rl_meta (char);
 
 #ifdef __cplusplus
 }
 #endif
 
 #endif
-
-/*
-;;; Local Variables: ***
-;;; mode: C++ ***
-;;; End: ***
-*/
diff --git a/liboctave/oct-rl-hist.c b/liboctave/oct-rl-hist.c
--- a/liboctave/oct-rl-hist.c
+++ b/liboctave/oct-rl-hist.c
@@ -235,14 +235,8 @@ octave_replace_history_entry (int which,
       if (discard->line)
 	free (discard->line);
 
       free (discard);
     }
 }
 
 #endif
-
-/*
-;;; Local Variables: ***
-;;; mode: C++ ***
-;;; End: ***
-*/
diff --git a/liboctave/oct-rl-hist.h b/liboctave/oct-rl-hist.h
--- a/liboctave/oct-rl-hist.h
+++ b/liboctave/oct-rl-hist.h
@@ -68,14 +68,8 @@ extern char **octave_history_list (int, 
 
 extern void octave_replace_history_entry (int, const char *);
 
 #ifdef __cplusplus
 }
 #endif
 
 #endif
-
-/*
-;;; Local Variables: ***
-;;; mode: C++ ***
-;;; End: ***
-*/
diff --git a/liboctave/oct-shlib.cc b/liboctave/oct-shlib.cc
--- a/liboctave/oct-shlib.cc
+++ b/liboctave/oct-shlib.cc
@@ -514,14 +514,8 @@ octave_shlib::shlib_rep::new_instance (c
 #elif defined (HAVE_DYLD_API)
   return new octave_dyld_shlib (f);
 #else
   (*current_liboctave_error_handler)
     ("no API for dynamic loading is available");
   return new shlib_rep ();
 #endif
 }
-
-/*
-;;; Local Variables: ***
-;;; mode: C++ ***
-;;; End: ***
-*/
diff --git a/liboctave/oct-shlib.h b/liboctave/oct-shlib.h
--- a/liboctave/oct-shlib.h
+++ b/liboctave/oct-shlib.h
@@ -184,14 +184,8 @@ public:
     { return rep->time_loaded (); }
 
 private:
 
   shlib_rep *rep;
 };
 
 #endif
-
-/*
-;;; Local Variables: ***
-;;; mode: C++ ***
-;;; End: ***
-*/
diff --git a/liboctave/oct-sort.cc b/liboctave/oct-sort.cc
--- a/liboctave/oct-sort.cc
+++ b/liboctave/oct-sort.cc
@@ -1948,14 +1948,8 @@ octave_sort<T>::ascending_compare (typen
 
 template <class T>
 bool 
 octave_sort<T>::descending_compare (typename ref_param<T>::type x,
 				    typename ref_param<T>::type y)
 {
   return x > y;
 }
-
-/*
-;;; Local Variables: ***
-;;; mode: C++ ***
-;;; End: ***
-*/
diff --git a/liboctave/oct-sort.h b/liboctave/oct-sort.h
--- a/liboctave/oct-sort.h
+++ b/liboctave/oct-sort.h
@@ -327,14 +327,8 @@ template <class T>
 class
 vec_index
 {
 public:
   T vec;
   octave_idx_type indx;
 };
 #endif
-
-/*
-;;; Local Variables: ***
-;;; mode: C++ ***
-;;; End: ***
-*/
diff --git a/liboctave/oct-spparms.cc b/liboctave/oct-spparms.cc
--- a/liboctave/oct-spparms.cc
+++ b/liboctave/oct-spparms.cc
@@ -218,14 +218,8 @@ octave_sparse_params::do_get_key (const 
 
 void
 octave_sparse_params::do_print_info (std::ostream& os,
 				     const std::string& prefix) const
 {
   for (int i = 0; i < OCTAVE_SPARSE_CONTROLS_SIZE; i++)
     os << prefix << keys(i) << ": " << params(i) << "\n";
 }
-
-/*
-;;; Local Variables: ***
-;;; mode: C++ ***
-;;; End: ***
-*/
diff --git a/liboctave/oct-spparms.h b/liboctave/oct-spparms.h
--- a/liboctave/oct-spparms.h
+++ b/liboctave/oct-spparms.h
@@ -112,14 +112,8 @@ private:
   double do_get_bandden (void);
 
   void do_print_info (std::ostream& os, const std::string& prefix) const;
   
   void init_keys (void);
 };
 
 #endif
-
-/*
-;;; Local Variables: ***
-;;; mode: C++ ***
-;;; End: ***
-*/
diff --git a/liboctave/oct-syscalls.cc b/liboctave/oct-syscalls.cc
--- a/liboctave/oct-syscalls.cc
+++ b/liboctave/oct-syscalls.cc
@@ -446,14 +446,8 @@ octave_syscalls::popen2 (const std::stri
       ::close (child_stdin[1]);
     }
   else
     msg = "popen2: pipe creation failed -- " + msg;
 
   return -1;
 #endif
 }
-
-/*
-;;; Local Variables: ***
-;;; mode: C++ ***
-;;; End: ***
-*/
diff --git a/liboctave/oct-syscalls.h b/liboctave/oct-syscalls.h
--- a/liboctave/oct-syscalls.h
+++ b/liboctave/oct-syscalls.h
@@ -69,14 +69,8 @@ octave_syscalls
   static int kill (pid_t, int, std::string&);
 
   static pid_t popen2 (const std::string&, const string_vector&, bool, int *);
   static pid_t popen2 (const std::string&, const string_vector&, bool, int *, std::string&);
   static pid_t popen2 (const std::string&, const string_vector&, bool, int *, std::string&, bool &interactive);
 };
 
 #endif
-
-/*
-;;; Local Variables: ***
-;;; mode: C++ ***
-;;; End: ***
-*/
diff --git a/liboctave/oct-time.cc b/liboctave/oct-time.cc
--- a/liboctave/oct-time.cc
+++ b/liboctave/oct-time.cc
@@ -300,14 +300,8 @@ octave_strptime::init (const std::string
   delete [] p;
 
   octave_base_tm::init (&t);
 
 #if defined (HAVE_STRUCT_TM_TM_ZONE)
   delete [] ps;
 #endif
 }
-
-/*
-;;; Local Variables: ***
-;;; mode: C++ ***
-;;; End: ***
-*/
diff --git a/liboctave/oct-time.h b/liboctave/oct-time.h
--- a/liboctave/oct-time.h
+++ b/liboctave/oct-time.h
@@ -352,14 +352,8 @@ public:
 private:
 
   int nchars;
 
   void init (const std::string& str, const std::string& fmt);
 };
 
 #endif
-
-/*
-;;; Local Variables: ***
-;;; mode: C++ ***
-;;; End: ***
-*/
diff --git a/liboctave/oct-uname.cc b/liboctave/oct-uname.cc
--- a/liboctave/oct-uname.cc
+++ b/liboctave/oct-uname.cc
@@ -51,14 +51,8 @@ octave_uname::init (void)
       utsname_sysname = unm.sysname;
       utsname_nodename = unm.nodename;
       utsname_release = unm.release;
       utsname_version = unm.version;
       utsname_machine = unm.machine;
     }
 #endif
 }
-
-/*
-;;; Local Variables: ***
-;;; mode: C++ ***
-;;; End: ***
-*/
diff --git a/liboctave/oct-uname.h b/liboctave/oct-uname.h
--- a/liboctave/oct-uname.h
+++ b/liboctave/oct-uname.h
@@ -85,14 +85,8 @@ private:
 
   std::string msg;
   int err;
 
   void init (void);
 };
 
 #endif
-
-/*
-;;; Local Variables: ***
-;;; mode: C++ ***
-;;; End: ***
-*/
diff --git a/liboctave/pathlen.h b/liboctave/pathlen.h
--- a/liboctave/pathlen.h
+++ b/liboctave/pathlen.h
@@ -27,14 +27,8 @@ along with Octave; see the file COPYING.
 #include <sys/param.h>
 #endif
 
 #ifndef MAXPATHLEN
 #define MAXPATHLEN 1024
 #endif
 
 #endif
-
-/*
-;;; Local Variables: ***
-;;; mode: C++ ***
-;;; End: ***
-*/
diff --git a/liboctave/pathsearch.cc b/liboctave/pathsearch.cc
--- a/liboctave/pathsearch.cc
+++ b/liboctave/pathsearch.cc
@@ -164,14 +164,8 @@ dir_path::init (void)
 
   kpse_path_iterator pi (p);
 
   for (int i = 0; i < count; i++)
     pv[i] = *pi++;
 
   initialized = true;
 }
-
-/*
-;;; Local Variables: ***
-;;; mode: C++ ***
-;;; End: ***
-*/
diff --git a/liboctave/pathsearch.h b/liboctave/pathsearch.h
--- a/liboctave/pathsearch.h
+++ b/liboctave/pathsearch.h
@@ -164,14 +164,8 @@ private:
 
     char xpath_sep_char;
 
     std::string xpath_sep_str;
   };
 };
 
 #endif
-
-/*
-;;; Local Variables: ***
-;;; mode: C++ ***
-;;; End: ***
-*/
diff --git a/liboctave/prog-args.cc b/liboctave/prog-args.cc
--- a/liboctave/prog-args.cc
+++ b/liboctave/prog-args.cc
@@ -55,14 +55,8 @@ prog_args::optind (void)
 // start over on the next call, but it may not be portable.  See the
 // comments in getopt.c for more information.
 
 void
 prog_args::init (void)
 {
   ::optind = 0;
 }
-
-/*
-;;; Local Variables: ***
-;;; mode: C++ ***
-;;; End: ***
-*/
diff --git a/liboctave/prog-args.h b/liboctave/prog-args.h
--- a/liboctave/prog-args.h
+++ b/liboctave/prog-args.h
@@ -78,14 +78,8 @@ private:
   void init (void);
 
   prog_args (const prog_args&);
 
   prog_args& operator = (const prog_args&);
 };
 
 #endif
-
-/*
-;;; Local Variables: ***
-;;; mode: C++ ***
-;;; End: ***
-*/
diff --git a/liboctave/randgamma.c b/liboctave/randgamma.c
--- a/liboctave/randgamma.c
+++ b/liboctave/randgamma.c
@@ -136,14 +136,8 @@ oct_fill_randg (double a, octave_idx_typ
 
 double 
 oct_randg (double a)
 {
   double ret;
   oct_fill_randg(a,1,&ret);
   return ret;
 }
-
-/*
-;;; Local Variables: ***
-;;; mode: C ***
-;;; End: ***
-*/
diff --git a/liboctave/randgamma.h b/liboctave/randgamma.h
--- a/liboctave/randgamma.h
+++ b/liboctave/randgamma.h
@@ -31,14 +31,8 @@ extern "C" {
 
 extern double oct_randg (double a);
 extern void oct_fill_randg (double a, octave_idx_type n, double *p);
 
 #ifdef  __cplusplus
 }
 #endif
 #endif
-
-/*
-;;; Local Variables: ***
-;;; mode: C ***
-;;; End: ***
-*/
diff --git a/liboctave/randmtzig.c b/liboctave/randmtzig.c
--- a/liboctave/randmtzig.c
+++ b/liboctave/randmtzig.c
@@ -696,14 +696,8 @@ oct_fill_randn (octave_idx_type n, doubl
 
 void 
 oct_fill_rande (octave_idx_type n, double *p)
 {
   octave_idx_type i;
   for (i = 0; i < n; i++) 
     p[i] = oct_rande();
 }
-
-/*
-;;; Local Variables: ***
-;;; mode: C ***
-;;; End: ***
-*/
diff --git a/liboctave/randmtzig.h b/liboctave/randmtzig.h
--- a/liboctave/randmtzig.h
+++ b/liboctave/randmtzig.h
@@ -86,15 +86,8 @@ extern double oct_rande (void);
 extern void oct_fill_randu (octave_idx_type n, double *p);
 extern void oct_fill_randn (octave_idx_type n, double *p);
 extern void oct_fill_rande (octave_idx_type n, double *p);
 
 #ifdef  __cplusplus
 }
 #endif
 #endif
-
-/*
-;;; Local Variables: ***
-;;; mode: C ***
-;;; End: ***
-*/
-
diff --git a/liboctave/randpoisson.c b/liboctave/randpoisson.c
--- a/liboctave/randpoisson.c
+++ b/liboctave/randpoisson.c
@@ -458,14 +458,8 @@ oct_randp (double L)
     ret = NAN;
   } else {
     /* normal approximation: from Phys. Rev. D (1994) v50 p1284 */
     ret = floor(RNOR*sqrt(L) + L + 0.5);
     if (ret < 0.0) ret = 0.0; /* will probably never happen */
   }
   return ret;
 }
-
-/*
-;;; Local Variables: ***
-;;; mode: C ***
-;;; End: ***
-*/
diff --git a/liboctave/randpoisson.h b/liboctave/randpoisson.h
--- a/liboctave/randpoisson.h
+++ b/liboctave/randpoisson.h
@@ -31,15 +31,8 @@ extern "C" {
 
 extern double oct_randp (double L);
 extern void oct_fill_randp (double L, octave_idx_type n, double *p);
 
 #ifdef  __cplusplus
 }
 #endif
 #endif
-
-/*
-;;; Local Variables: ***
-;;; mode: C ***
-;;; End: ***
-*/
-
diff --git a/liboctave/regex-match.cc b/liboctave/regex-match.cc
--- a/liboctave/regex-match.cc
+++ b/liboctave/regex-match.cc
@@ -142,16 +142,8 @@ regex_match::match (const string_vector&
 
   Array<bool> retval (n);
 
   for (int i = 0; i < n; i++)
     retval(i) = match (s[i]);
 
   return retval;
 }
-
-
-/*
-;;; Local Variables: ***
-;;; mode: C++ ***
-;;; End: ***
-*/
-
diff --git a/liboctave/regex-match.h b/liboctave/regex-match.h
--- a/liboctave/regex-match.h
+++ b/liboctave/regex-match.h
@@ -77,14 +77,8 @@ private:
 
 #if HAVE_REGEX
   regex_t *compiled;
 #endif
 
 };
 
 #endif
-
-/*
-;;; Local Variables: ***
-;;; mode: C++ ***
-;;; End: ***
-*/
diff --git a/liboctave/sparse-base-chol.cc b/liboctave/sparse-base-chol.cc
--- a/liboctave/sparse-base-chol.cc
+++ b/liboctave/sparse-base-chol.cc
@@ -284,14 +284,8 @@ sparse_base_chol<chol_type, chol_elt, p_
       p_type Qc = Q();
       retval = Qc * linv * linv.hermitian() * Qc.transpose();
     }
   else
     retval = linv * linv.hermitian ();
 #endif
   return retval;
 }
-
-/*
-;;; Local Variables: ***
-;;; mode: C++ ***
-;;; End: ***
-*/
diff --git a/liboctave/sparse-base-chol.h b/liboctave/sparse-base-chol.h
--- a/liboctave/sparse-base-chol.h
+++ b/liboctave/sparse-base-chol.h
@@ -183,14 +183,8 @@ public:
     { return rep->is_positive_definite(); }
 
   double rcond (void) const { return rep->rcond(); }
 
   chol_type inverse (void) const;
 };
 
 #endif
-
-/*
-;;; Local Variables: ***
-;;; mode: C++ ***
-;;; End: ***
-*/
diff --git a/liboctave/sparse-base-lu.cc b/liboctave/sparse-base-lu.cc
--- a/liboctave/sparse-base-lu.cc
+++ b/liboctave/sparse-base-lu.cc
@@ -139,14 +139,8 @@ sparse_base_lu <lu_type, lu_elt_type, p_
 }
 
 template <class lu_type, class lu_elt_type, class p_type, class p_elt_type>
 PermMatrix
 sparse_base_lu <lu_type, lu_elt_type, p_type, p_elt_type> :: Pc_mat (void) const
 {
   return PermMatrix (Q, true);
 }
-
-/*
-;;; Local Variables: ***
-;;; mode: C++ ***
-;;; End: ***
-*/
diff --git a/liboctave/sparse-base-lu.h b/liboctave/sparse-base-lu.h
--- a/liboctave/sparse-base-lu.h
+++ b/liboctave/sparse-base-lu.h
@@ -88,14 +88,8 @@ protected:
 
   double cond;
 
   MArray<octave_idx_type> P;
   MArray<octave_idx_type> Q;
 };
 
 #endif
-
-/*
-;;; Local Variables: ***
-;;; mode: C++ ***
-;;; End: ***
-*/
diff --git a/liboctave/sparse-dmsolve.cc b/liboctave/sparse-dmsolve.cc
--- a/liboctave/sparse-dmsolve.cc
+++ b/liboctave/sparse-dmsolve.cc
@@ -505,14 +505,8 @@ dmsolve (const SparseMatrix &a, const Sp
 extern SparseComplexMatrix
 dmsolve (const SparseComplexMatrix &a, const SparseMatrix &b, 
 	 octave_idx_type &info);
 
 extern SparseComplexMatrix
 dmsolve (const SparseComplexMatrix &a, const SparseComplexMatrix &b, 
 	 octave_idx_type &info);
 #endif
-
-/*
-;;; Local Variables: ***
-;;; mode: C++ ***
-;;; End: ***
-*/
diff --git a/liboctave/sparse-sort.cc b/liboctave/sparse-sort.cc
--- a/liboctave/sparse-sort.cc
+++ b/liboctave/sparse-sort.cc
@@ -56,14 +56,8 @@ template class octave_sort<octave_sparse
 bool
 octave_idx_vector_comp (octave_idx_vector_sort* i,
 			octave_idx_vector_sort* j)
 {
   return (i->i < j->i);
 }
 
 template class octave_sort<octave_idx_vector_sort *>;
-
-/*
-;;; Local Variables: ***
-;;; mode: C++ ***
-;;; End: ***
-*/
diff --git a/liboctave/sparse-sort.h b/liboctave/sparse-sort.h
--- a/liboctave/sparse-sort.h
+++ b/liboctave/sparse-sort.h
@@ -45,14 +45,8 @@ public:
   octave_idx_type i;
   octave_idx_type idx;
 };
 
 bool octave_idx_vector_comp (octave_idx_vector_sort* i,
 			     octave_idx_vector_sort* j);
 
 #endif
-
-/*
-;;; Local Variables: ***
-;;; mode: C++ ***
-;;; End: ***
-*/
diff --git a/liboctave/sparse-util.cc b/liboctave/sparse-util.cc
--- a/liboctave/sparse-util.cc
+++ b/liboctave/sparse-util.cc
@@ -112,14 +112,8 @@ sparse_indices_ok (octave_idx_type *r, o
 
 	      jold = c[j];
 	    }
 	}
     }
 
   return true;
 }
-
-/*
-;;; Local Variables: ***
-;;; mode: C++ ***
-;;; End: ***
-*/
diff --git a/liboctave/sparse-util.h b/liboctave/sparse-util.h
--- a/liboctave/sparse-util.h
+++ b/liboctave/sparse-util.h
@@ -32,14 +32,8 @@ extern OCTAVE_API void SparseCholError (
 extern OCTAVE_API int SparseCholPrint (const char *fmt, ...);
 
 extern OCTAVE_API bool
 sparse_indices_ok (octave_idx_type *r, octave_idx_type *c,
 		   octave_idx_type nrows, octave_idx_type ncols,
 		   octave_idx_type nnz);
 
 #endif
-
-/*
-;;; Local Variables: ***
-;;; mode: C++ ***
-;;; End: ***
-*/
diff --git a/liboctave/statdefs.h b/liboctave/statdefs.h
--- a/liboctave/statdefs.h
+++ b/liboctave/statdefs.h
@@ -66,14 +66,8 @@ along with Octave; see the file COPYING.
 #define S_ISNWK(m) (((m) & S_IFMT) == S_IFNWK)
 #endif
 
 #ifndef S_ISLNK
 #undef HAVE_LSTAT
 #endif
 
 #endif
-
-/*
-;;; Local Variables: ***
-;;; mode: C ***
-;;; End: ***
-*/
diff --git a/liboctave/str-vec.cc b/liboctave/str-vec.cc
--- a/liboctave/str-vec.cc
+++ b/liboctave/str-vec.cc
@@ -258,14 +258,8 @@ string_vector::list_in_columns (std::ost
 	    os << " ";
 	  pos += max_name_length;
 	}
       os << "\n";
     }
 
   return os;
 }
-
-/*
-;;; Local Variables: ***
-;;; mode: C++ ***
-;;; End: ***
-*/
diff --git a/liboctave/str-vec.h b/liboctave/str-vec.h
--- a/liboctave/str-vec.h
+++ b/liboctave/str-vec.h
@@ -98,14 +98,8 @@ public:
   char **c_str_vec (void) const;
 
   static void delete_c_str_vec (const char * const*);
 
   std::ostream& list_in_columns (std::ostream&, int width = 0) const;
 };
 
 #endif
-
-/*
-;;; Local Variables: ***
-;;; mode: C++ ***
-;;; End: ***
-*/
diff --git a/liboctave/sun-utils.h b/liboctave/sun-utils.h
--- a/liboctave/sun-utils.h
+++ b/liboctave/sun-utils.h
@@ -55,15 +55,8 @@ assign_double (double *unaligned_ptr, do
   union d2i *p = (union d2i *) unaligned_ptr;
 
   p->i[0] = v->i[0];
   p->i[1] = v->i[1];
 }
 
 #endif
 #endif
-
-/*
-;;; Local Variables: ***
-;;; mode: C ***
-;;; page-delimiter: "^/\\*" ***
-;;; End: ***
-*/
diff --git a/liboctave/sysdir.h b/liboctave/sysdir.h
--- a/liboctave/sysdir.h
+++ b/liboctave/sysdir.h
@@ -47,14 +47,8 @@ along with Octave; see the file COPYING.
 #include <sys/dir.h>
 #endif
 #if defined (HAVE_NDIR_H)
 #include <ndir.h>
 #endif
 #endif
 
 #endif
-
-/*
-;;; Local Variables: ***
-;;; mode: C++ ***
-;;; End: ***
-*/
diff --git a/liboctave/systime.h b/liboctave/systime.h
--- a/liboctave/systime.h
+++ b/liboctave/systime.h
@@ -30,14 +30,8 @@ along with Octave; see the file COPYING.
 #ifdef HAVE_SYS_TIME_H
 #include <sys/time.h>
 #else
 #include <time.h>
 #endif
 #endif
 
 #endif
-
-/*
-;;; Local Variables: ***
-;;; mode: C++ ***
-;;; End: ***
-*/
diff --git a/liboctave/syswait.h b/liboctave/syswait.h
--- a/liboctave/syswait.h
+++ b/liboctave/syswait.h
@@ -84,14 +84,8 @@ extern "C" {
 #define WAITPID(a, b, c) waitpid (a, b, c)
 #endif
 
 #ifdef __cplusplus
 }
 #endif
 
 #endif
-
-/*
-;;; Local Variables: ***
-;;; mode: C++ ***
-;;; End: ***
-*/
diff --git a/liboctave/uint16NDArray.cc b/liboctave/uint16NDArray.cc
--- a/liboctave/uint16NDArray.cc
+++ b/liboctave/uint16NDArray.cc
@@ -49,14 +49,8 @@ SND_BOOL_OPS (octave_uint16, uint16NDArr
 
 NDND_CMP_OPS (uint16NDArray, uint16NDArray)
 NDND_BOOL_OPS (uint16NDArray, uint16NDArray)
 
 MINMAX_FCNS (uint16)
 
 BSXFUN_STDOP_DEFS_MXLOOP (uint16NDArray)
 BSXFUN_STDREL_DEFS_MXLOOP (uint16NDArray)
-
-/*
-;;; Local Variables: ***
-;;; mode: C++ ***
-;;; End: ***
-*/
diff --git a/liboctave/uint16NDArray.h b/liboctave/uint16NDArray.h
--- a/liboctave/uint16NDArray.h
+++ b/liboctave/uint16NDArray.h
@@ -42,14 +42,8 @@ NDND_BOOL_OP_DECLS (uint16NDArray, uint1
 MARRAY_FORWARD_DEFS (MArrayN, uint16NDArray, octave_uint16)
 
 MINMAX_DECLS (uint16)
 
 BSXFUN_STDOP_DECLS (uint16NDArray, OCTAVE_API)
 BSXFUN_STDREL_DECLS (uint16NDArray, OCTAVE_API)
 
 #endif
-
-/*
-;;; Local Variables: ***
-;;; mode: C++ ***
-;;; End: ***
-*/
diff --git a/liboctave/uint32NDArray.cc b/liboctave/uint32NDArray.cc
--- a/liboctave/uint32NDArray.cc
+++ b/liboctave/uint32NDArray.cc
@@ -49,14 +49,8 @@ SND_BOOL_OPS (octave_uint32, uint32NDArr
 
 NDND_CMP_OPS (uint32NDArray, uint32NDArray)
 NDND_BOOL_OPS (uint32NDArray, uint32NDArray)
 
 MINMAX_FCNS (uint32)
 
 BSXFUN_STDOP_DEFS_MXLOOP (uint32NDArray)
 BSXFUN_STDREL_DEFS_MXLOOP (uint32NDArray)
-
-/*
-;;; Local Variables: ***
-;;; mode: C++ ***
-;;; End: ***
-*/
diff --git a/liboctave/uint32NDArray.h b/liboctave/uint32NDArray.h
--- a/liboctave/uint32NDArray.h
+++ b/liboctave/uint32NDArray.h
@@ -42,14 +42,8 @@ NDND_BOOL_OP_DECLS (uint32NDArray, uint3
 MARRAY_FORWARD_DEFS (MArrayN, uint32NDArray, octave_uint32)
 
 MINMAX_DECLS (uint32)
 
 BSXFUN_STDOP_DECLS (uint32NDArray, OCTAVE_API)
 BSXFUN_STDREL_DECLS (uint32NDArray, OCTAVE_API)
 
 #endif
-
-/*
-;;; Local Variables: ***
-;;; mode: C++ ***
-;;; End: ***
-*/
diff --git a/liboctave/uint64NDArray.cc b/liboctave/uint64NDArray.cc
--- a/liboctave/uint64NDArray.cc
+++ b/liboctave/uint64NDArray.cc
@@ -49,14 +49,8 @@ SND_BOOL_OPS (octave_uint64, uint64NDArr
 
 NDND_CMP_OPS (uint64NDArray, uint64NDArray)
 NDND_BOOL_OPS (uint64NDArray, uint64NDArray)
 
 MINMAX_FCNS (uint64)
 
 BSXFUN_STDOP_DEFS_MXLOOP (uint64NDArray)
 BSXFUN_STDREL_DEFS_MXLOOP (uint64NDArray)
-
-/*
-;;; Local Variables: ***
-;;; mode: C++ ***
-;;; End: ***
-*/
diff --git a/liboctave/uint64NDArray.h b/liboctave/uint64NDArray.h
--- a/liboctave/uint64NDArray.h
+++ b/liboctave/uint64NDArray.h
@@ -42,14 +42,8 @@ NDND_BOOL_OP_DECLS (uint64NDArray, uint6
 MARRAY_FORWARD_DEFS (MArrayN, uint64NDArray, octave_uint64)
 
 MINMAX_DECLS (uint64)
 
 BSXFUN_STDOP_DECLS (uint64NDArray, OCTAVE_API)
 BSXFUN_STDREL_DECLS (uint64NDArray, OCTAVE_API)
 
 #endif
-
-/*
-;;; Local Variables: ***
-;;; mode: C++ ***
-;;; End: ***
-*/
diff --git a/liboctave/uint8NDArray.cc b/liboctave/uint8NDArray.cc
--- a/liboctave/uint8NDArray.cc
+++ b/liboctave/uint8NDArray.cc
@@ -49,14 +49,8 @@ SND_BOOL_OPS (octave_uint8, uint8NDArray
 
 NDND_CMP_OPS (uint8NDArray, uint8NDArray)
 NDND_BOOL_OPS (uint8NDArray, uint8NDArray)
 
 MINMAX_FCNS (uint8)
 
 BSXFUN_STDOP_DEFS_MXLOOP (uint8NDArray)
 BSXFUN_STDREL_DEFS_MXLOOP (uint8NDArray)
-
-/*
-;;; Local Variables: ***
-;;; mode: C++ ***
-;;; End: ***
-*/
diff --git a/liboctave/uint8NDArray.h b/liboctave/uint8NDArray.h
--- a/liboctave/uint8NDArray.h
+++ b/liboctave/uint8NDArray.h
@@ -42,14 +42,8 @@ NDND_BOOL_OP_DECLS (uint8NDArray, uint8N
 MARRAY_FORWARD_DEFS (MArrayN, uint8NDArray, octave_uint8)
 
 MINMAX_DECLS (uint8)
 
 BSXFUN_STDOP_DECLS (uint8NDArray, OCTAVE_API)
 BSXFUN_STDREL_DECLS (uint8NDArray, OCTAVE_API)
 
 #endif
-
-/*
-;;; Local Variables: ***
-;;; mode: C++ ***
-;;; End: ***
-*/
