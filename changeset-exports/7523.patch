# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1203929090 18000
#      Mon Feb 25 03:44:50 2008 -0500
# Node ID f2000f1971ab6499e94ba0af41782e2563fb2fd0
# Parent  8a6965a011764c14a5d33e15d498453c3613fe3b
new row_vector_property class

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,17 @@
+2008-02-25  John W. Eaton  <jwe@octave.org>
+
+	* graphics.h.in, graphics.cc (class row_vector_property): New class.	
+	(axes::properties): xlim, ylim, zlim, clim, alim, xtick, ytick,
+	ztick properties are now row_vector_property objects instead of
+	array_property objects.
+	* genprops.awk: Special case row_vector_property in the same way
+	as array_property.
+
 2008-02-22  John W. Eaton  <jwe@octave.org>
 
 	* DLD-FUNCTIONS/ccolamd.cc, DLD-FUNCTIONS/colamd.cc,
 	DLD-FUNCTIONS/convhulln.cc, DLD-FUNCTIONS/dmperm.cc,
 	DLD-FUNCTIONS/qz.cc, DLD-FUNCTIONS/regexp.cc,
 	DLD-FUNCTIONS/symbfact.cc, zfstream.h, zfstream.cc:
 	Use 0 instead of NULL.
 
diff --git a/src/genprops.awk b/src/genprops.awk
--- a/src/genprops.awk
+++ b/src/genprops.awk
@@ -239,17 +239,19 @@ function emit_declarations ()
 
   if (idx > 0)
     print "\npublic:\n";
 
   for (i = 1; i <= idx; i++)
   {
     if (emit_get[i])
     {
-      if (type[i] == "array_property" || type[i] == "any_property")
+      if (type[i] == "array_property" \
+	  || type[i] == "row_vector_property" \
+	  || type[i] == "any_property")
         emit_get_accessor(i, "octave_value", "get");
       else if (type[i] == "handle_property")
         emit_get_accessor(i, "graphics_handle", "handle_value");
       else if (type[i] == "string_property")
         emit_get_accessor(i, "std::string", "string_value");
       else if (type[i] == "double_property")
         emit_get_accessor(i, "double", "double_value");
       else if (type[i] == "data_property")
diff --git a/src/graphics.cc b/src/graphics.cc
--- a/src/graphics.cc
+++ b/src/graphics.cc
@@ -486,16 +486,46 @@ array_property::validate (const octave_v
           }
       else
         return true;
     }
 
   return xok;
 }
 
+bool
+row_vector_property::validate (const octave_value& v)
+{
+  bool xok = false;
+
+  // FIXME: should we always support []?
+  if (v.is_empty () && v.is_double_type ())
+    return true;
+
+  // check value type
+  if (type_constraints.size () > 0)
+    {
+      for (std::list<std::string>::const_iterator it = type_constraints.begin ();
+           ! xok && it != type_constraints.end (); ++it)
+        if ((*it) == v.type_name ())
+          xok = true;
+    }
+  else
+    xok = v.is_double_type ();
+
+  if (xok)
+    {
+      dim_vector vdims = v.dims ();
+
+      xok = vdims.length () != 2 || (vdims(0) != 1 && vdims(1) != 1);
+    }
+
+  return xok;
+}
+
 void
 handle_property::set (const octave_value& v)
 {
   double dv = v.double_value ();
 
   if (! error_state)
     {
       graphics_handle gh = gh_manager::lookup (dv);
diff --git a/src/graphics.h.in b/src/graphics.h.in
--- a/src/graphics.h.in
+++ b/src/graphics.h.in
@@ -712,22 +712,58 @@ public:
     {
       set (val);
       return *this;
     }
 
 private:
   OCTINTERP_API bool validate (const octave_value& v);
 
-private:
+protected:
   octave_value data;
   std::list<std::string> type_constraints;
   std::list<dim_vector> size_constraints;
 };
 
+class row_vector_property : public array_property
+{
+public:
+  row_vector_property (const std::string& nm, const graphics_handle& h,
+		       const octave_value& m)
+    : array_property (nm, h, m) { }
+
+  void set (const octave_value& v)
+    {
+      array_property::set (v);
+
+      if (! error_state)
+	{
+	  dim_vector dv = data.dims ();
+
+	  if (dv(0) > 1 && dv(1) == 1)
+	    {
+	      int tmp = dv(0);
+	      dv(0) = dv(1);
+	      dv(1) = tmp;
+
+	      data = data.reshape (dv);
+	    }
+	}
+    }
+
+  row_vector_property& operator = (const octave_value& val)
+    {
+      set (val);
+      return *this;
+    }
+
+private:
+  OCTINTERP_API bool validate (const octave_value& v);
+};
+
 // ---------------------------------------------------------------------
 
 class data_property : public base_property
 {
 public:
   data_property (void)
     : base_property ("", graphics_handle ()) { }
 
@@ -2325,38 +2361,38 @@ public:
       bool_property box , "on"
       bool_property key , "off"
       bool_property keybox , "off"
       double_property keypos , 1
       array_property colororder , default_colororder ()
       array_property dataaspectratio m , Matrix (1, 3, 1.0)
       radio_property dataaspectratiomode , "{auto}|manual"
       radio_property layer , "{bottom}|top"
-      array_property xlim mu , default_lim ()
-      array_property ylim mu , default_lim ()
-      array_property zlim mu , default_lim ()
-      array_property clim m , default_lim ()
-      array_property alim m , default_lim ()
+      row_vector_property xlim mu , default_lim ()
+      row_vector_property ylim mu , default_lim ()
+      row_vector_property zlim mu , default_lim ()
+      row_vector_property clim m , default_lim ()
+      row_vector_property alim m , default_lim ()
       radio_property xlimmode al , "{auto}|manual"
       radio_property ylimmode al , "{auto}|manual"
       radio_property zlimmode al , "{auto}|manual"
       radio_property climmode al , "{auto}|manual"
       radio_property alimmode    , "{auto}|manual"
       mutable handle_property xlabel GSO , graphics_handle ()
       mutable handle_property ylabel GSO , graphics_handle ()
       mutable handle_property zlabel GSO , graphics_handle ()
       bool_property xgrid , "off"
       bool_property ygrid , "off"
       bool_property zgrid , "off"
       bool_property xminorgrid , "off"
       bool_property yminorgrid , "off"
       bool_property zminorgrid , "off"
-      array_property xtick m , Matrix ()
-      array_property ytick m , Matrix ()
-      array_property ztick m , Matrix ()
+      row_vector_property xtick m , Matrix ()
+      row_vector_property ytick m , Matrix ()
+      row_vector_property ztick m , Matrix ()
       radio_property xtickmode , "{auto}|manual"
       radio_property ytickmode , "{auto}|manual"
       radio_property ztickmode , "{auto}|manual"
       bool_property xminortick , "off"
       bool_property yminortick , "off"
       bool_property zminortick , "off"
       // FIXME: should be kind of string array
       any_property xticklabel m , ""
@@ -2424,21 +2460,16 @@ public:
     void init (void)
       {
         position.add_constraint (dim_vector (1, 4));
 	position.add_constraint (dim_vector (0, 0));
         outerposition.add_constraint (dim_vector (1, 4));
         colororder.add_constraint (dim_vector (-1, 3));
         dataaspectratio.add_constraint (dim_vector (1, 3));
         plotboxaspectratio.add_constraint (dim_vector (1, 3));
-        xlim.add_constraint (dim_vector (1, 2));
-        ylim.add_constraint (dim_vector (1, 2));
-        zlim.add_constraint (dim_vector (1, 2));
-        clim.add_constraint (dim_vector (1, 2));
-	alim.add_constraint (dim_vector (1, 2));
         xtick.add_constraint (dim_vector (1, -1));
         ytick.add_constraint (dim_vector (1, -1));
         ztick.add_constraint (dim_vector (1, -1));
         Matrix vw (1, 2, 0);
         vw(1) = 90;
         view = vw;
         view.add_constraint (dim_vector (1, 2));
 	cameraposition.add_constraint (dim_vector (1, 3));
