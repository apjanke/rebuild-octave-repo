# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1295625921 18000
#      Fri Jan 21 11:05:21 2011 -0500
# Node ID a9cf422ed849ac6f4efe4b9cec03b3ec7e2a51fd
# Parent  5ec6aa05638dd34b09a4ec4bb32803a0d6e2b583
avoid apparent bug in ATLAS versions of CHERK/ZHERK

diff --git a/liboctave/CMatrix.cc b/liboctave/CMatrix.cc
--- a/liboctave/CMatrix.cc
+++ b/liboctave/CMatrix.cc
@@ -3749,17 +3749,22 @@ xgemm (const ComplexMatrix& a, const Com
   else
     {
       if (a_nr == 0 || a_nc == 0 || b_nc == 0)
         retval = ComplexMatrix (a_nr, b_nc, 0.0);
       else if (a.data () == b.data () && a_nr == b_nc && tra != trb)
         {
           octave_idx_type lda = a.rows ();
 
-          retval = ComplexMatrix (a_nr, b_nc);
+          // FIXME -- looking at the reference BLAS, it appears that it
+          // should not be necessary to initialize the output matrix if
+          // BETA is 0 in the call to ZHERK, but ATLAS appears to
+          // use the result matrix before zeroing the elements.
+
+          retval = ComplexMatrix (a_nr, b_nc, 0.0);
           Complex *c = retval.fortran_vec ();
 
           const char ctra = get_blas_trans_arg (tra, cja);
           if (cja || cjb)
             {
               F77_XFCN (zherk, ZHERK, (F77_CONST_CHAR_ARG2 ("U", 1),
                                        F77_CONST_CHAR_ARG2 (&ctra, 1),
                                        a_nr, a_nc, 1.0,
diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,13 @@
+2011-01-21  John W. Eaton  <jwe@octave.org>
+
+	* CMatrix.cc (xgemm): Initialize output matrix for call to ZHERK.
+	* fCMatrix.cc (xgemm): Initialize output matrix for call to CHERK.
+
 2011-01-20  John W. Eaton  <jwe@octave.org>
 
 	* Array-b.cc, Array-d.cc, Array-f.cc, Array-util.cc,
 	Array-util.h, Array.cc, Array.h, Array3.h, CColVector.cc,
 	CColVector.h, CDiagMatrix.cc, CDiagMatrix.h, CMatrix.cc,
 	CMatrix.h, CNDArray.cc, CNDArray.h, CSparse.cc, CSparse.h,
 	CmplxAEPBAL.cc, CmplxAEPBAL.h, CmplxCHOL.cc, CmplxGEPBAL.cc,
 	CmplxGEPBAL.h, CmplxHESS.cc, CmplxLU.h, CmplxQR.cc, CmplxQR.h,
diff --git a/liboctave/fCMatrix.cc b/liboctave/fCMatrix.cc
--- a/liboctave/fCMatrix.cc
+++ b/liboctave/fCMatrix.cc
@@ -3745,17 +3745,22 @@ xgemm (const FloatComplexMatrix& a, cons
   else
     {
       if (a_nr == 0 || a_nc == 0 || b_nc == 0)
         retval = FloatComplexMatrix (a_nr, b_nc, 0.0);
       else if (a.data () == b.data () && a_nr == b_nc && tra != trb)
         {
           octave_idx_type lda = a.rows ();
 
-          retval = FloatComplexMatrix (a_nr, b_nc);
+          // FIXME -- looking at the reference BLAS, it appears that it
+          // should not be necessary to initialize the output matrix if
+          // BETA is 0 in the call to CHERK, but ATLAS appears to
+          // use the result matrix before zeroing the elements.
+
+          retval = FloatComplexMatrix (a_nr, b_nc, 0.0);
           FloatComplex *c = retval.fortran_vec ();
 
           const char ctra = get_blas_trans_arg (tra, cja);
           if (cja || cjb)
             {
               F77_XFCN (cherk, CHERK, (F77_CONST_CHAR_ARG2 ("U", 1),
                                        F77_CONST_CHAR_ARG2 (&ctra, 1),
                                        a_nr, a_nc, 1.0,
