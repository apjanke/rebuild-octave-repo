# HG changeset patch
# User Torsten <ttl@justmail.de>
# Date 1381493557 -7200
#      Fri Oct 11 14:12:37 2013 +0200
# Node ID 99ffa521ecec47c07f9d2f091c19c9ba797ceea5
# Parent  811019b9ef578f8684a5b4cae3d6447773fa31bd
Add possibility to edit the function related to the actual keyword in editor

* octave-qscintilla.cc(get_actual_word): new internal function;
  (context_help_doc): uses new function get_actual_word;
  (contextMenuEvent): new context menu for editing function of actual keyword
  (context_edit): function for edit action in editor file menu;
  (contextmenu_edit): new slot for context menu;
* octave-qscintilla.h: new functions context_edit, contextmenu_edit,
  get_actual_word

* file-editor-tab.cc(context_edit): new slot for editor menu action
* file-editor-tab.h: new slot context_edit

* file-editor.cc(request_context_edit): new slot for file menu entry;
  (construct): new entry in file menu for editing function of actual keyword;
  (add_file_editor_tab): connect new signal fetab_context_edit to the new
  slot context_edit in file_editor_tab;
  (set_shortcuts): enable/disable new shortcut when editor focus changes
  (check_actions): enable/disable new action depending on existing tabs
* file-editor.h: new signal fetab_context_edit, new slot request_context_edit,
  new edit function action

diff --git a/libgui/src/m-editor/file-editor-tab.cc b/libgui/src/m-editor/file-editor-tab.cc
--- a/libgui/src/m-editor/file-editor-tab.cc
+++ b/libgui/src/m-editor/file-editor-tab.cc
@@ -413,16 +413,25 @@ file_editor_tab::context_help (const QWi
 {
   if (ID != this)
     return;
 
   _edit_area->context_help_doc (doc);
 }
 
 void
+file_editor_tab::context_edit (const QWidget *ID)
+{
+  if (ID != this)
+    return;
+
+  _edit_area->context_edit ();
+}
+
+void
 file_editor_tab::save_file (const QWidget *ID)
 {
   if (ID != this)
     return;
 
   save_file (_file_name);
 }
 void
diff --git a/libgui/src/m-editor/file-editor-tab.h b/libgui/src/m-editor/file-editor-tab.h
--- a/libgui/src/m-editor/file-editor-tab.h
+++ b/libgui/src/m-editor/file-editor-tab.h
@@ -66,16 +66,17 @@ public slots:
 
   void set_focus (const QWidget *ID);
   void undo (const QWidget *ID);
   void redo (const QWidget *ID);
   void copy (const QWidget *ID);
   void cut (const QWidget *ID);
   void paste (const QWidget *ID);
   void context_help (const QWidget *ID, bool);
+  void context_edit (const QWidget *ID);
   void save_file (const QWidget *ID);
   void save_file (const QWidget *ID, const QString& fileName,
                   bool remove_on_success);
   void save_file_as (const QWidget *ID);
   void print_file (const QWidget *ID);
   void run_file (const QWidget *ID);
   void toggle_bookmark (const QWidget *ID);
   void next_bookmark (const QWidget *ID);
diff --git a/libgui/src/m-editor/file-editor.cc b/libgui/src/m-editor/file-editor.cc
--- a/libgui/src/m-editor/file-editor.cc
+++ b/libgui/src/m-editor/file-editor.cc
@@ -473,16 +473,22 @@ file_editor::request_context_help (bool)
 }
 void
 file_editor::request_context_doc (bool)
 {
   emit fetab_context_help (_tab_widget->currentWidget (), true);
 }
 
 void
+file_editor::request_context_edit (bool)
+{
+  emit fetab_context_edit (_tab_widget->currentWidget ());
+}
+
+void
 file_editor::request_save_file (void)
 {
   emit fetab_save_file (_tab_widget->currentWidget ());
 }
 
 void
 file_editor::request_save_file_as (void)
 {
@@ -872,17 +878,20 @@ file_editor::construct (void)
 
   _mru_file_menu = new QMenu (tr ("&Recent Editor Files"), fileMenu);
   for (int i = 0; i < MaxMRUFiles; ++i)
     _mru_file_menu->addAction (_mru_file_actions[i]);
 
   fileMenu->addAction (new_action);
   fileMenu->addAction (open_action);
   fileMenu->addMenu (_mru_file_menu);
-
+  fileMenu->addSeparator ();
+  _context_edit_action =
+    fileMenu->addAction (QIcon (), tr ("&Edit Function"),
+                         this, SLOT (request_context_edit (bool)));
   fileMenu->addSeparator ();
   fileMenu->addAction (_save_action);
   fileMenu->addAction (_save_as_action);
 
   fileMenu->addSeparator ();
   _close_action =
       fileMenu->addAction (QIcon::fromTheme("window-close",
                                   QIcon (":/actions/icons/fileclose.png")),
@@ -1125,16 +1134,19 @@ file_editor::add_file_editor_tab (file_e
            f, SLOT (cut (const QWidget*)));
 
   connect (this, SIGNAL (fetab_paste (const QWidget*)),
            f, SLOT (paste (const QWidget*)));
 
   connect (this, SIGNAL (fetab_context_help (const QWidget*, bool)),
            f, SLOT (context_help (const QWidget*, bool)));
 
+  connect (this, SIGNAL (fetab_context_edit (const QWidget*)),
+           f, SLOT (context_edit (const QWidget*)));
+
   connect (this, SIGNAL (fetab_save_file (const QWidget*)),
            f, SLOT (save_file (const QWidget*)));
 
   connect (this, SIGNAL (fetab_save_file_as (const QWidget*)),
            f, SLOT (save_file_as (const QWidget*)));
 
   connect (this, SIGNAL (fetab_print_file (const QWidget*)),
            f, SLOT (print_file (const QWidget*)));
@@ -1236,16 +1248,17 @@ file_editor::set_shortcuts (bool set)
 
       _next_bookmark_action->setShortcut (Qt::Key_F2);
       _previous_bookmark_action->setShortcut (Qt::SHIFT + Qt::Key_F2);
       _toggle_bookmark_action->setShortcut (Qt::Key_F7);
 
       _print_action->setShortcut (QKeySequence::Print);
       _run_action->setShortcut (Qt::ControlModifier+ Qt::Key_R);
 
+      _context_edit_action->setShortcut (Qt::ControlModifier + Qt::Key_E);
       _save_action->setShortcut (QKeySequence::Save);
       _save_as_action->setShortcut (QKeySequence::SaveAs);
       _close_action->setShortcut (QKeySequence::Close);
 
       _redo_action->setShortcut (QKeySequence::Redo);
       _undo_action->setShortcut (QKeySequence::Undo);
     }
   else
@@ -1265,16 +1278,17 @@ file_editor::set_shortcuts (bool set)
 
       _next_bookmark_action->setShortcut (no_key);
       _previous_bookmark_action->setShortcut (no_key);
       _toggle_bookmark_action->setShortcut (no_key);
 
       _print_action->setShortcut (no_key);
       _run_action->setShortcut (no_key);
 
+      _context_edit_action->setShortcut (no_key);
       _save_action->setShortcut (no_key);
       _save_as_action->setShortcut (no_key);
       _close_action->setShortcut (no_key);
 
       _redo_action->setShortcut (no_key);
       _undo_action->setShortcut (no_key);
     }
 }
@@ -1298,16 +1312,17 @@ file_editor::check_actions ()
 
   _next_bookmark_action->setEnabled (have_tabs);
   _previous_bookmark_action->setEnabled (have_tabs);
   _toggle_bookmark_action->setEnabled (have_tabs);
 
   _print_action->setEnabled (have_tabs);
   _run_action->setEnabled (have_tabs);
 
+  _context_edit_action->setEnabled (have_tabs);
   _save_action->setEnabled (have_tabs);
   _save_as_action->setEnabled (have_tabs);
   _close_action->setEnabled (have_tabs);
   _close_all_action->setEnabled (have_tabs);
   _close_others_action->setEnabled (have_tabs && _tab_widget->count () > 1);
 
   _undo_action->setEnabled (have_tabs);
   _redo_action->setEnabled (have_tabs);
diff --git a/libgui/src/m-editor/file-editor.h b/libgui/src/m-editor/file-editor.h
--- a/libgui/src/m-editor/file-editor.h
+++ b/libgui/src/m-editor/file-editor.h
@@ -70,16 +70,17 @@ signals:
   // No fetab_open, functionality in editor
   // No fetab_new, functionality in editor
   void fetab_undo (const QWidget* ID);
   void fetab_redo (const QWidget* ID);
   void fetab_copy (const QWidget* ID);
   void fetab_cut (const QWidget* ID);
   void fetab_paste (const QWidget* ID);
   void fetab_context_help (const QWidget* ID, bool);
+  void fetab_context_edit (const QWidget* ID);
   void fetab_save_file (const QWidget* ID);
   void fetab_save_file_as (const QWidget* ID);
   void fetab_print_file (const QWidget* ID);
   void fetab_run_file (const QWidget* ID);
   void fetab_toggle_bookmark (const QWidget* ID);
   void fetab_next_bookmark (const QWidget* ID);
   void fetab_previous_bookmark (const QWidget* ID);
   void fetab_remove_bookmark (const QWidget* ID);
@@ -112,16 +113,17 @@ public slots:
 
   void request_undo (void);
   void request_redo (void);
   void request_copy (void);
   void request_cut (void);
   void request_paste (void);
   void request_context_help (bool);
   void request_context_doc (bool);
+  void request_context_edit (bool);
   void request_save_file (void);
   void request_save_file_as (void);
   void request_run_file (void);
   void request_toggle_bookmark (void);
   void request_next_bookmark (void);
   void request_previous_bookmark (void);
   void request_remove_bookmark (void);
 
@@ -202,16 +204,17 @@ private:
   QAction *_next_bookmark_action;
   QAction *_previous_bookmark_action;
   QAction *_toggle_bookmark_action;
   QAction * _remove_bookmark_action;
 
   QAction *_print_action;
   QAction *_run_action;
 
+  QAction *_context_edit_action;
   QAction *_save_action;
   QAction *_save_as_action;
   QAction *_close_action;
   QAction *_close_all_action;
   QAction *_close_others_action;
 
   QAction *_redo_action;
   QAction *_undo_action;
diff --git a/libgui/src/m-editor/octave-qscintilla.cc b/libgui/src/m-editor/octave-qscintilla.cc
--- a/libgui/src/m-editor/octave-qscintilla.cc
+++ b/libgui/src/m-editor/octave-qscintilla.cc
@@ -47,29 +47,44 @@ octave_qscintilla::get_global_textcursor
   long point_x  = SendScintilla
                     (QsciScintillaBase::SCI_POINTXFROMPOSITION,0,position);
   long point_y  = SendScintilla
                     (QsciScintillaBase::SCI_POINTYFROMPOSITION,0,position);
   *local_pos = QPoint (point_x,point_y);  // local cursor position
   *global_pos = mapToGlobal (*local_pos); // global position of cursor
 }
 
-// call documentation or help on the current word
-void
-octave_qscintilla::context_help_doc (bool documentation)
+// determine the actual word and whether we are in an octave or matlab script
+bool
+octave_qscintilla::get_actual_word ()
 {
   QPoint global_pos, local_pos;
   get_global_textcursor_pos (&global_pos, &local_pos);
   _word_at_cursor = wordAtPoint (local_pos);
   QString lexer_name = lexer ()->lexer ();
-  if ((lexer_name == "octave" || lexer_name == "matlab")
-                              && !_word_at_cursor.isEmpty ())
+  return ((lexer_name == "octave" || lexer_name == "matlab")
+          && !_word_at_cursor.isEmpty ());
+}
+
+// call documentation or help on the current word
+void
+octave_qscintilla::context_help_doc (bool documentation)
+{
+  if (get_actual_word ())
     contextmenu_help_doc (documentation);
 }
 
+// call edit the function related to the current word
+void
+octave_qscintilla::context_edit ()
+{
+  if (get_actual_word ())
+    contextmenu_edit (true);
+}
+
 #ifdef HAVE_QSCI_VERSION_2_6_0
 // context menu requested
 void
 octave_qscintilla::contextMenuEvent (QContextMenuEvent *e)
 {
   QMenu *context_menu = createStandardContextMenu ( );  // standard menu
 
   // the menu's position
@@ -99,16 +114,18 @@ octave_qscintilla::contextMenuEvent (QCo
   if (lexer_name == "octave" || lexer_name == "matlab")
     {
       _word_at_cursor = wordAtPoint (local_pos);
       if (!_word_at_cursor.isEmpty ())
         context_menu->addAction (tr ("Help on") + " " + _word_at_cursor,
                                 this, SLOT (contextmenu_help (bool)));
         context_menu->addAction (tr ("Documentation on") + " " + _word_at_cursor,
                                 this, SLOT (contextmenu_doc (bool)));
+        context_menu->addAction (tr ("Edit") + " " + _word_at_cursor,
+                                this, SLOT (contextmenu_edit (bool)));
     }
 
   // finaly show the menu
   context_menu->exec (global_pos);
 }
 #endif
 
 
@@ -131,9 +148,15 @@ octave_qscintilla::contextmenu_help_doc 
   QString command;
   if (documentation)
     command = "doc ";
   else
     command = "help ";
   emit execute_command_in_terminal_signal (command + _word_at_cursor);
 }
 
+void
+octave_qscintilla::contextmenu_edit (bool)
+{
+  emit execute_command_in_terminal_signal (QString("edit ") + _word_at_cursor);
+}
+
 #endif
diff --git a/libgui/src/m-editor/octave-qscintilla.h b/libgui/src/m-editor/octave-qscintilla.h
--- a/libgui/src/m-editor/octave-qscintilla.h
+++ b/libgui/src/m-editor/octave-qscintilla.h
@@ -37,27 +37,30 @@ public:
 
   octave_qscintilla (QWidget *p);
   ~octave_qscintilla ();
 
 #ifdef HAVE_QSCI_VERSION_2_6_0
   virtual void contextMenuEvent (QContextMenuEvent *e);
 #endif
   void context_help_doc (bool);
+  void context_edit ();
+  void get_global_textcursor_pos (QPoint *global_pos, QPoint *local_pos);
+  bool get_actual_word ();
 
 signals:
 
   void execute_command_in_terminal_signal (const QString&);
 
 private slots:
 
   void contextmenu_help (bool);
   void contextmenu_doc (bool);
   void contextmenu_help_doc (bool);
-  void get_global_textcursor_pos (QPoint *global_pos, QPoint *local_pos);
+  void contextmenu_edit (bool);
 
 private:
 
   QString _word_at_cursor;
 
 };
 
 #endif
