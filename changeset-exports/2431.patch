# HG changeset patch
# User jwe
# Date 846304741 0
#      Sat Oct 26 04:39:01 1996 +0000
# Node ID 8426659cd60e70f8b8687ab942cc6ff8cc1003fd
# Parent  47cc2a839994235cc9c461a57d235b58c64371b0
[project @ 1996-10-26 04:37:45 by jwe]

diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,10 +1,16 @@
 Fri Oct 25 01:24:51 1996  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
+	* str-vec.h (str_vec_compare): Declare args as const void *, then
+	cast them to const string * in the body of the function.
+
+	* file-ops.cc (file_stat::mode_as_string): Explicitly construct
+	string from buf.
+
 	* Array3.h (Array3::checkelem): Tag bogus return value with
 	GCC_ATTRIBUTE_UNUSED.
 	* Array2.h (Array2::checkelem): Likewise.
 	
 Thu Oct 24 19:40:36 1996  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* Quad.h (Quad): Define virtual destructor.
 
diff --git a/liboctave/file-ops.cc b/liboctave/file-ops.cc
--- a/liboctave/file-ops.cc
+++ b/liboctave/file-ops.cc
@@ -95,17 +95,17 @@ string
 file_stat::mode_as_string (void) const
 {
   char buf[11];
 
   mode_string (fs_mode, buf);
 
   buf[10] = '\0';
 
-  return buf;
+  return string (buf);
 }
 
 // Private stuff:
 
 void
 file_stat::update_internal (bool force)
 {
   if (! initialized || force)
diff --git a/liboctave/str-vec.h b/liboctave/str-vec.h
--- a/liboctave/str-vec.h
+++ b/liboctave/str-vec.h
@@ -25,18 +25,21 @@ Software Foundation, 59 Temple Place - S
 
 class ostream;
 
 #include <string>
 
 #include "Array.h"
 
 static int
-str_vec_compare (const string *a, const string *b)
+str_vec_compare (const void *a_arg, const void *b_arg)
 {
+  const string *a = (const string *) a_arg;
+  const string *b = (const string *) b_arg;
+
   return a->compare (*b);
 }
 
 class
 string_vector : public Array<string>
 {
 public:
 
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,10 +1,22 @@
 Fri Oct 25 01:10:51 1996  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
+	* ov-ch-mat.h (octave_char_matrix::any): Return 0.0 instead of false.
+	(octave_char_matrix::all): Likewise.
+
+	* input.cc (Fecho): When binding value of echo_executing_commands,
+	cast ECHO_* to double.
+
+	* sighandlers.cc (octave_child_list::do_remove): Delete unused
+	variable `enlarge'.
+
+	* pt-const.h (tree_constant::tree_constant (const tree_constant&)):
+	Don't pass arg to tree_fvc constructor.
+
 	* resource.cc (getrusage): [HAVE_GETRUSAGE && RUSAGE_TIMES_ONLY]:
 	Only fill in time values.
 
 Thu Oct 24 20:37:28 1996  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* parse.y: Comment out the %expect declaration so byacc can
 	compile this file.
 	(if_cmd_list): Add missing semicolon.
diff --git a/src/input.cc b/src/input.cc
--- a/src/input.cc
+++ b/src/input.cc
@@ -1153,44 +1153,49 @@ Without any arguments, toggle the curren
     return retval;
 
   switch (argc)
     {
     case 1:
       {
 	if ((Vecho_executing_commands & ECHO_SCRIPTS)
 	    || (Vecho_executing_commands & ECHO_FUNCTIONS))
-	  bind_builtin_variable ("echo_executing_commands", ECHO_OFF);
+	  bind_builtin_variable ("echo_executing_commands",
+				 (double) ECHO_OFF);
 	else
-	  bind_builtin_variable ("echo_executing_commands", ECHO_SCRIPTS);
+	  bind_builtin_variable ("echo_executing_commands",
+				 (double) ECHO_SCRIPTS);
       }
       break;
 
     case 2:
       {
 	string arg = argv[1];
 
 	if (arg == "on")
-	  bind_builtin_variable ("echo_executing_commands", ECHO_SCRIPTS);
+	  bind_builtin_variable ("echo_executing_commands",
+				 (double) ECHO_SCRIPTS);
 	else if (arg == "off")
-	  bind_builtin_variable ("echo_executing_commands", ECHO_OFF);
+	  bind_builtin_variable ("echo_executing_commands",
+				 (double) ECHO_OFF);
 	else
 	  print_usage ("echo");
       }
       break;
 
     case 3:
       {
 	string arg = argv[1];
 
 	if (arg == "on" && argv[2] == "all")
 	  bind_builtin_variable ("echo_executing_commands",
-				 (ECHO_SCRIPTS | ECHO_FUNCTIONS));
+				 (double) (ECHO_SCRIPTS | ECHO_FUNCTIONS));
 	else if (arg == "off" && argv[2] == "all")
-	  bind_builtin_variable ("echo_executing_commands", ECHO_OFF);
+	  bind_builtin_variable ("echo_executing_commands",
+				 (double) ECHO_OFF);
 	else
 	  print_usage ("echo");
       }
       break;
 
     default:
       print_usage ("echo");
       break;
diff --git a/src/ov-ch-mat.h b/src/ov-ch-mat.h
--- a/src/ov-ch-mat.h
+++ b/src/ov-ch-mat.h
@@ -82,18 +82,18 @@ public:
   int rows (void) const { return matrix.rows (); }
   int columns (void) const { return matrix.columns (); }
 
   bool is_defined (void) const { return true; }
 
   bool is_char_matrix (void) const { return true; }
 
   // XXX FIXME XXX
-  octave_value all (void) const { return false; }
-  octave_value any (void) const { return false; }
+  octave_value all (void) const { return 0.0; }
+  octave_value any (void) const { return 0.0; }
 
   bool is_real_type (void) const { return true; }
 
   bool is_matrix_type (void) const { return true; }
 
   bool is_numeric_type (void) const { return true; }
 
   bool valid_as_scalar_index (void) const;
diff --git a/src/pt-const.h b/src/pt-const.h
--- a/src/pt-const.h
+++ b/src/pt-const.h
@@ -137,17 +137,17 @@ public:
 
   tree_constant (tree_constant::all_va_args, int l = -1, int c = -1)
     : tree_fvc (l, c), val (octave_value::all_va_args_t), orig_text () { }
 
   tree_constant (const octave_value& v, int l = -1, int c = -1)
     : tree_fvc (l, c), val (v), orig_text () { }
 
   tree_constant (const tree_constant& a)
-    : tree_fvc (a), val (a.val), orig_text () { }
+    : tree_fvc (), val (a.val), orig_text () { }
 
   ~tree_constant (void) { }
 
   tree_constant& operator = (const tree_constant& a)
     {
       if (this != &a)
 	{
 	  tree_fvc::operator = (a);
diff --git a/src/sighandlers.cc b/src/sighandlers.cc
--- a/src/sighandlers.cc
+++ b/src/sighandlers.cc
@@ -503,18 +503,16 @@ octave_child_list::insert (pid_t pid, oc
     panic_impossible ();
 }
 
 void
 octave_child_list::do_remove (pid_t pid)
 {
   // Mark the record for PID invalid.
 
-  bool enlarge = true;
-
   for (int i = 0; i < curr_len; i++)
     {
       octave_child& tmp = list (i);
 
       if (tmp.pid == pid)
 	{
 	  tmp.pid = -1;
 	  break;
