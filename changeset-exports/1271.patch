# HG changeset patch
# User jwe
# Date 798409401 0
#      Thu Apr 20 20:23:21 1995 +0000
# Node ID ffecaa9b9892566836168c1ffab2769a3630e113
# Parent  0a5e9e8892a0687d2b430a226a5ada6ea695d8b8
[project @ 1995-04-20 20:23:21 by jwe]

diff --git a/src/variables.cc b/src/variables.cc
--- a/src/variables.cc
+++ b/src/variables.cc
@@ -302,17 +302,17 @@ subst_octave_home (char *s)
       int len_retval = len_s + count * grow_size;
 
       retval = new char [len_retval+1];
 
       char *p1 = s;
       char *p2 = p1;
       char *pdest = retval;
 
-// Is this really a good way to do this?
+      // Is this really a good way to do this?
 
       while (count >= 0)
 	{
 	  p2 = strstr (p1, prefix);
 	  
 	  if (! p2)
 	    {
 	      memcpy (pdest, p1, strlen (p1)+1);
@@ -639,18 +639,18 @@ parse_fcn_file (int exec_script, char *f
   reading_fcn_file = 1;
   input_line_number = 0;
   current_input_column = 1;
 
   FILE *ffile = get_input_from_file (ff, 0);
 
   if (ffile)
     {
-// Check to see if this file defines a function or is just a list of
-// commands.
+      // Check to see if this file defines a function or is just a
+      // list of commands.
 
       char *tmp_help_txt = gobble_leading_white_space (ffile);
 
       if (is_function_file (ffile))
 	{
 	  unwind_protect_int (echo_input);
 	  unwind_protect_int (saving_history);
 	  unwind_protect_int (reading_fcn_file);
@@ -679,18 +679,23 @@ parse_fcn_file (int exec_script, char *f
 	  if (status != 0)
 	    {
 	      error ("parse error while reading function file %s", ff);
 	      global_sym_tab->clear (curr_fcn_file_name);
 	    }
 	}
       else if (exec_script)
 	{
-// The value of `reading_fcn_file' will be restored to the proper value
-// when we unwind from this frame.
+	  // We don't need this now.
+
+	  delete [] tmp_help_txt;
+
+	  // The value of `reading_fcn_file' will be restored to the
+	  // proper value when we unwind from this frame.
+
 	  reading_fcn_file = old_reading_fcn_file_state;
 
 	  unwind_protect_int (reading_script_file);
 	  reading_script_file = 1;
 
 	  parse_and_execute (ffile, 1);
 
 	  script_file_executed = 1;
@@ -705,17 +710,17 @@ parse_fcn_file (int exec_script, char *f
 
 static int
 load_fcn_from_file (symbol_record *sym_rec, int exec_script)
 {
   int script_file_executed = 0;
 
   char *nm = sym_rec->name ();
 
-// This is needed by yyparse.
+  // This is needed by yyparse.
 
   curr_fcn_file_name = nm;
 
 #ifdef WITH_DLD
 
   if (load_octave_oct_file (nm))
     {
       force_link_to_function (nm);
@@ -738,37 +743,37 @@ load_fcn_from_file (symbol_record *sym_r
     }
 
   return script_file_executed;
 }
 
 int
 lookup (symbol_record *sym_rec, int exec_script)
 {
-  int script_file_executed = 0;
+  int script_executed = 0;
 
   if (! sym_rec->is_linked_to_global ())
     {
       if (sym_rec->is_defined ())
 	{
 	  if (sym_rec->is_function () && symbol_out_of_date (sym_rec))
-	    script_file_executed = load_fcn_from_file (sym_rec, exec_script);
+	    script_executed = load_fcn_from_file (sym_rec, exec_script);
 	}
       else if (! sym_rec->is_formal_parameter ())
 	{
 	  link_to_builtin_or_function (sym_rec);
-	  
+
 	  if (! sym_rec->is_defined ())
-	    script_file_executed = load_fcn_from_file (sym_rec, exec_script);
+	    script_executed = load_fcn_from_file (sym_rec, exec_script);
 	  else if (sym_rec->is_function () && symbol_out_of_date (sym_rec))
-	    script_file_executed = load_fcn_from_file (sym_rec, exec_script);
+	    script_executed = load_fcn_from_file (sym_rec, exec_script);
 	}
     }
 
-  return script_file_executed;
+  return script_executed;
 }
 
 // Get the symbol record for the given name that is visible in the
 // current scope.  Reread any function definitions that appear to be
 // out of date.  If a function is available in a file but is not
 // currently loaded, this will load it and insert the name in the
 // current symbol table.
 
@@ -803,17 +808,17 @@ get_help_from_file (const char *path)
 // Look for the given name in the global symbol table.  If it refers
 // to a string, return a new copy.  If not, return 0;
 
 char *
 builtin_string_variable (const char *name)
 {
   symbol_record *sr = global_sym_tab->lookup (name, 0, 0);
 
-// It is a prorgramming error to look for builtins that aren't.
+  // It is a prorgramming error to look for builtins that aren't.
 
   assert (sr);
 
   char *retval = 0;
 
   tree_fvc *defn = sr->def ();
 
   if (defn)
@@ -837,17 +842,17 @@ builtin_string_variable (const char *nam
 // return -1. 
 
 int
 builtin_real_scalar_variable (const char *name, double& d)
 {
   int status = -1;
   symbol_record *sr = global_sym_tab->lookup (name, 0, 0);
 
-// It is a prorgramming error to look for builtins that aren't.
+  // It is a prorgramming error to look for builtins that aren't.
 
   assert (sr);
 
   tree_fvc *defn = sr->def ();
 
   if (defn)
     {
       tree_constant val = defn->eval (0);
@@ -866,17 +871,17 @@ builtin_real_scalar_variable (const char
 
 tree_constant
 builtin_any_variable (const char *name)
 {
   tree_constant retval;
 
   symbol_record *sr = global_sym_tab->lookup (name, 0, 0);
 
-// It is a prorgramming error to look for builtins that aren't.
+  // It is a prorgramming error to look for builtins that aren't.
 
   assert (sr);
 
   tree_fvc *defn = sr->def ();
 
   if (defn)
     retval = defn->eval (0);
 
@@ -898,33 +903,34 @@ link_to_global_variable (symbol_record *
   symbol_record *gsr = global_sym_tab->lookup (sr->name (), 1, 0);
 
   if (sr->is_formal_parameter ())
     {
       error ("can't make function parameter `%s' global", sr->name ());
       return;
     }
 
-// There must be a better way to do this.   XXX FIXME XXX
+  // There must be a better way to do this.   XXX FIXME XXX
 
   if (sr->is_variable ())
     {
-// Would be nice not to have this cast.  XXX FIXME XXX
+      // Would be nice not to have this cast.  XXX FIXME XXX
+
       tree_constant *tmp = (tree_constant *) sr->def ();
       if (tmp)
 	tmp = new tree_constant (*tmp);
       else
 	tmp = new tree_constant ();
       gsr->define (tmp);
     }
   else
     sr->clear ();
 
-// If the global symbol is currently defined as a function, we need to
-// hide it with a variable.
+  // If the global symbol is currently defined as a function, we need
+  // to hide it with a variable.
 
   if (gsr->is_function ())
     gsr->define ((tree_constant *) 0);
 
   sr->alias (gsr, 1);
   sr->mark_as_linked_to_global ();
 }
 
@@ -990,33 +996,33 @@ make_name_list (void)
   int ffl_len = 0;
 
   char **key = 0;
   char **glb = 0;
   char **top = 0;
   char **lcl = 0;
   char **ffl = 0;
 
-// Each of these functions returns a new vector of pointers to new
-// strings.
+  // Each of these functions returns a new vector of pointers to new
+  // strings.
 
   key = names (keyword_help (), key_len);
   glb = global_sym_tab->list (glb_len);
   top = top_level_sym_tab->list (top_len);
   if (top_level_sym_tab != curr_sym_tab)
     lcl = curr_sym_tab->list (lcl_len);
   ffl = get_fcn_file_names (ffl_len, 1);
 
   int total_len = key_len + glb_len + top_len + lcl_len + ffl_len;
 
   char **list = new char * [total_len+1];
   
-// Put all the symbols in one big list.  Only copy pointers, not the
-// strings they point to, then only delete the original array of
-// pointers, and not the strings they point to.
+  // Put all the symbols in one big list.  Only copy pointers, not the
+  // strings they point to, then only delete the original array of
+  // pointers, and not the strings they point to.
 
   int j = 0;
   int i = 0;
   for (i = 0; i < key_len; i++)
     list[j++] = key[i];
 
   for (i = 0; i < glb_len; i++)
     list[j++] = glb[i];
@@ -1186,18 +1192,18 @@ do_who (int argc, char **argv, int nargo
       else if (strcmp (*argv, "-variables") == 0 || strcmp (*argv, "-v") == 0)
 	show_variables++;
       else if (*argv[0] == '-')
 	warning ("%s: unrecognized option `%s'", my_name, *argv);
       else
 	break;
     }
 
-// If the user specified -l and nothing else, show variables.  If
-// evaluating this at the top level, also show functions.
+  // If the user specified -l and nothing else, show variables.  If
+  // evaluating this at the top level, also show functions.
 
   if (show_verbose && ! (show_builtins || show_functions || show_variables))
     {
       show_functions = (curr_sym_tab == top_level_sym_tab);
       show_variables = 1;
     }
 
   ostrstream output_buf;
@@ -1426,26 +1432,26 @@ bind_ans (const tree_constant& val, int 
 
 void
 bind_builtin_variable (const char *varname, tree_constant *val,
 		       int protect, int eternal, sv_Function sv_fcn,
 		       const char *help)
 {
   symbol_record *sr = global_sym_tab->lookup (varname, 1, 0);
 
-// It is a programming error for a builtin symbol to be missing.
-// Besides, we just inserted it, so it must be there.
+  // It is a programming error for a builtin symbol to be missing.
+  // Besides, we just inserted it, so it must be there.
 
   assert (sr);
 
   sr->unprotect ();
 
-// Must do this before define, since define will call the special
-// variable function only if it knows about it, and it needs to, so
-// that user prefs can be properly initialized.
+  // Must do this before define, since define will call the special
+  // variable function only if it knows about it, and it needs to, so
+  // that user prefs can be properly initialized.
 
   if (sv_fcn)
     sr->set_sv_function (sv_fcn);
 
   sr->define_builtin_var (val);
 
   if (protect)
     sr->protect ();
@@ -1455,18 +1461,18 @@ bind_builtin_variable (const char *varna
 
   if (help)
     sr->document (help);    
 }
 
 void
 install_builtin_variables (void)
 {
-// XXX FIXME XX -- these should probably be moved to where they
-// logically belong instead of being all grouped here.
+  // XXX FIXME XX -- these should probably be moved to where they
+  // logically belong instead of being all grouped here.
 
   DEFVAR ("EDITOR", SBV_EDITOR, editor, 0, 0, 1, sv_editor,
     "name of the editor to be invoked by the edit_history command");
 
   DEFVAR ("I", SBV_I, Complex (0.0, 1.0), 0, 1, 1, 0,
     "sqrt (-1)");
 
   DEFVAR ("Inf", SBV_Inf, octave_Inf, 0, 1, 1, 0,
@@ -1716,19 +1722,19 @@ With -x, exclude the named variables")
 {
   Octave_object retval;
 
   DEFINE_ARGV("clear");
 
   argc--;
   argv++;
 
-// Always clear the local table, but don't clear currently compiled
-// functions unless we are at the top level.  (Allowing that to happen
-// inside functions would result in pretty odd behavior...)
+  // Always clear the local table, but don't clear currently compiled
+  // functions unless we are at the top level.  (Allowing that to
+  // happen inside functions would result in pretty odd behavior...)
 
   int clear_user_functions = (curr_sym_tab == top_level_sym_tab);
 
   if (argc == 0)
     {
       curr_sym_tab->clear ();
       global_sym_tab->clear (clear_user_functions);
     }
