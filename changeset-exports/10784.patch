# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1278963138 -7200
#      Mon Jul 12 21:32:18 2010 +0200
# Node ID ca2df6737d6b54d63d95d53cc4b26aaf8ac36fe1
# Parent  fc9e07fdf9c222f3d8054453c174eed08f1c0074
generalize cell2mat optimization to n dimensions

diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,8 +1,13 @@
+2010-07-12  Jaroslav Hajek  <highegg@gmail.com>
+
+	* general/cell2mat.m: Optimize so as to minimize the number of
+	concats.
+
 2010-07-12  John W. Eaton  <jwe@octave.org>
 
 	* general/display.m: Print usage message if nargin != 1.
 	Bug #30421.
 
 2010-07-09  Thorsten Meyer  <thorsten.meyier@gmx.de>
 
 	* general/interp2.m: improve input argument handling and
diff --git a/scripts/general/cell2mat.m b/scripts/general/cell2mat.m
--- a/scripts/general/cell2mat.m
+++ b/scripts/general/cell2mat.m
@@ -1,9 +1,10 @@
 ## Copyright (C) 2005, 2006, 2007, 2008 Laurent Mazet
+## Copyright (C) 2010 Jaroslav Hajek
 ##
 ## This file is part of Octave.
 ##
 ## Octave is free software; you can redistribute it and/or modify it
 ## under the terms of the GNU General Public License as published by
 ## the Free Software Foundation; either version 3 of the License, or (at
 ## your option) any later version.
 ##
@@ -44,45 +45,38 @@ function m = cell2mat (c)
   validc = cellfun (@iscell, c);
 
   if (! all (valid(:)) && ! all (validc(:)))
     error ("cell2mat: wrong type elements or mixed cells and matrices");
   endif
 
   if (nb == 0)
     m = [];
-  elseif (ndims (c) == 2)
-    ## 2d case optimized
-    [nr, nc] = size (c);
-    if (nc > nr)
-      c1 = cell (nr, 1);
-      for i = 1 : nr
-        c1{i} = [c{i,:}];
-      endfor
-      m = vertcat (c1 {:});
-    else
-      c1 = cell (nc, 1);
-      for i = 1 : nc
-        c1{i} = vertcat (c{:,i});
-      endfor
-      m = [c1{:}];
-    endif
   else
-    ## n dimensions case
-    for k = ndims (c):-1:2,
-      sz = size (c);
-      sz(k) = 1;
-      c1 = cell (sz);
-      n1 = prod (sz);
-      for i = 1:n1
-        c1{i} = cat (k, c{i:n1:end});
-      endfor
-      c = c1;
+    ## The goal is to minimize the total number of cat() calls.
+    ## The dimensions can be concatenated along in arbitrary order.
+    ## The numbers of concatenations are:
+    ## n / d1
+    ## n / (d1 * d2)
+    ## n / (d1 * d2 * d3)
+    ## etc.
+    ## This is minimized if d1 >= d2 >= d3... 
+
+    sc = size (c);
+    nd = ndims (c);
+    [~, isc] = sort (sc);
+    for idim = isc
+      if (sc(idim) == 1)
+        continue;
+      endif
+      xdim = [1:idim-1, idim+1:nd];
+      cc = num2cell (c, xdim);
+      c = cellfun (@cat, {idim}, cc{:}, "uniformoutput", false);
     endfor
-    m = cat (1, c1{:});
+    m = c{1};
   endif
 
 endfunction
 
 ## Tests
 %!shared C, D, E, F
 %! C = {[1], [2 3 4]; [5; 9], [6 7 8; 10 11 12]};
 %! D = C; D(:,:,2) = C;
