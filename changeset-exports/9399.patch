# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1245993208 -7200
#      Fri Jun 26 07:13:28 2009 +0200
# Node ID a5f6b5800f86916118a4da69ca67580b67bccce6
# Parent  684312a5291c48ab5fd24b38fe6e07ccf291338e
fix bug in recursive lookup

diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,13 @@
+2009-06-26  Jaroslav Hajek  <highegg@gmail.com>
+
+	* oct-sort.cc (octave_sort<T>::lookup_merge<Comp>): Fix lower-part
+	recursion.
+
 2009-06-24  Alexander Barth  <barth.alexander@gmail.com>
 
 	* eigs-base.cc (EigsRealSymmetricMatrix,
 	EigsRealSymmetricMatrixShift, EigsRealSymmetricFunc,
 	EigsRealNonSymmetricMatrix, EigsRealNonSymmetricMatrixShift,
 	EigsRealNonSymmetricFunc, EigsComplexNonSymmetricMatrix,
 	EigsComplexNonSymmetricMatrixShift, EigsComplexNonSymmetricFunc):
 	Use octave_idx_type for parameters of type LOGICAL in ARPACK.
diff --git a/liboctave/oct-sort.cc b/liboctave/oct-sort.cc
--- a/liboctave/oct-sort.cc
+++ b/liboctave/oct-sort.cc
@@ -1856,27 +1856,27 @@ begin:
               // growth, which is dangerous. Instead, we recursively run the
               // smaller half, and simulate a tail call for the rest using
               // goto.
               octave_idx_type k = nvalues / 2;
               idx[k] = lookup_impl (data, lo, hi, values[k], comp);
               if (idx[k] - lo <= hi - idx[k])
                 {
                   // The smaller portion is run recursively.
-                  lookup_merge (data, idx[k], k, values, k, idx, comp);
+                  lookup_merge (data, lo, idx[k], values, k, idx, comp);
                   // Simulate a tail call.
                   lo = idx[k];
                   values += k; nvalues -= k; idx += k;
                   goto begin;
                 }
               else
                 {
                   // The smaller portion is run recursively.
                   lookup_merge (data, idx[k], hi, 
-                                values + k, nvalues - k, idx, comp);
+                                values + k, nvalues - k, idx + k, comp);
                   // Simulate a tail call.
                   hi = idx[k];
                   nvalues = k;
                   goto begin;
                 }
               break;
             }
         }
diff --git a/scripts/general/interp2.m b/scripts/general/interp2.m
--- a/scripts/general/interp2.m
+++ b/scripts/general/interp2.m
@@ -202,16 +202,21 @@ function ZI = interp2 (varargin)
       if (columns (Y) != 1)
         Y = Y.';
       endif
     endif
 
     xidx = lookup (X, XI, "lr");
     yidx = lookup (Y, YI, "lr");
 
+    if (min (xidx) <= 0)
+      save bad_data X XI
+    endif
+
+
     if (strcmp (method, "linear"))
       ## each quad satisfies the equation z(x,y)=a+b*x+c*y+d*xy
       ##
       ## a-b
       ## | |
       ## c-d
       a = Z(1:(zr - 1), 1:(zc - 1));
       b = Z(1:(zr - 1), 2:zc) - a;
