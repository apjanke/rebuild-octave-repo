# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1345738688 14400
#      Thu Aug 23 12:18:08 2012 -0400
# Node ID a83b7b2f95eef833de412f3155241d8a64e1e127
# Parent  61822c866ba1a01d5dd3ee62dd0c81389b729282
avoid C-style cast warnings from GCC for wait-related macros

* lo-utils.h (octave_wait): New class.
* lo-cutils.h, lo-cutils.c (octave_wifexited, octave_wexitstatus,
octave_wifsignaled, octave_wtermsig, octave_wcoredump,
octave_wifstopped, octave_wstopsig, octave_wifcontinued):
New functions.
* toplev.cc, pager.cc, syscalls.cc: Use octave_wait functions instead
of WIFEXITED, WEXITSTATUS, WIFSIGNALED, WTERMSIG, WCOREDUMP,
WIFSTOPPED, WSTOPSIG, WIFCONTINUED macros.

diff --git a/libinterp/corefcn/syscalls.cc b/libinterp/corefcn/syscalls.cc
--- a/libinterp/corefcn/syscalls.cc
+++ b/libinterp/corefcn/syscalls.cc
@@ -1371,228 +1371,196 @@ information about the subprocess that ex
 DEFUNX ("WIFEXITED", FWIFEXITED, args, ,
   "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} WIFEXITED (@var{status})\n\
 Given @var{status} from a call to @code{waitpid}, return true if the\n\
 child terminated normally.\n\
 @seealso{waitpid, WEXITSTATUS, WIFSIGNALED, WTERMSIG, WCOREDUMP, WIFSTOPPED, WSTOPSIG, WIFCONTINUED}\n\
 @end deftypefn")
 {
-  octave_value retval = 0.0;
+  octave_value retval = false;
 
-#if defined (WIFEXITED)
   if (args.length () == 1)
     {
       int status = args(0).int_value ();
 
       if (! error_state)
-        retval = WIFEXITED (status);
+        retval = octave_wait::ifexited (status);
       else
         error ("WIFEXITED: STATUS must be an integer");
     }
-#else
-  warning ("WIFEXITED always returns false in this version of Octave");
-#endif
 
   return retval;
 }
 
 DEFUNX ("WEXITSTATUS", FWEXITSTATUS, args, ,
   "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} WEXITSTATUS (@var{status})\n\
 Given @var{status} from a call to @code{waitpid}, return the exit\n\
 status of the child.  This function should only be employed if\n\
 @code{WIFEXITED} returned true.\n\
 @seealso{waitpid, WIFEXITED, WIFSIGNALED, WTERMSIG, WCOREDUMP, WIFSTOPPED, WSTOPSIG, WIFCONTINUED}\n\
 @end deftypefn")
 {
-  octave_value retval = 0.0;
+  octave_value retval = 0;
 
-#if defined (WEXITSTATUS)
   if (args.length () == 1)
     {
       int status = args(0).int_value ();
 
       if (! error_state)
-        retval = WEXITSTATUS (status);
+        retval = octave_wait::exitstatus (status);
       else
         error ("WEXITSTATUS: STATUS must be an integer");
     }
-#else
-  warning ("WEXITSTATUS always returns false in this version of Octave");
-#endif
 
   return retval;
 }
 
 DEFUNX ("WIFSIGNALED", FWIFSIGNALED, args, ,
   "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} WIFSIGNALED (@var{status})\n\
 Given @var{status} from a call to @code{waitpid}, return true if the\n\
 child process was terminated by a signal.\n\
 @seealso{waitpid, WIFEXITED, WEXITSTATUS, WTERMSIG, WCOREDUMP, WIFSTOPPED, WSTOPSIG, WIFCONTINUED}\n\
 @end deftypefn")
 {
-  octave_value retval = 0.0;
+  octave_value retval = false;
 
-#if defined (WIFSIGNALED)
   if (args.length () == 1)
     {
       int status = args(0).int_value ();
 
       if (! error_state)
-        retval = WIFSIGNALED (status);
+        retval = octave_wait::ifsignaled (status);
       else
         error ("WIFSIGNALED: STATUS must be an integer");
     }
-#else
-  warning ("WIFSIGNALED always returns false in this version of Octave");
-#endif
 
   return retval;
 }
 
 DEFUNX ("WTERMSIG", FWTERMSIG, args, ,
   "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} WTERMSIG (@var{status})\n\
 Given @var{status} from a call to @code{waitpid}, return the number of\n\
 the signal that caused the child process to terminate.  This function\n\
 should only be employed if @code{WIFSIGNALED} returned true.\n\
 @seealso{waitpid, WIFEXITED, WEXITSTATUS, WIFSIGNALED, WCOREDUMP, WIFSTOPPED, WSTOPSIG, WIFCONTINUED}\n\
 @end deftypefn")
 {
-  octave_value retval = 0.0;
+  octave_value retval = 0;
 
-#if defined (WTERMSIG)
   if (args.length () == 1)
     {
       int status = args(0).int_value ();
 
       if (! error_state)
-        retval = WTERMSIG (status);
+        retval = octave_wait::termsig (status);
       else
         error ("WTERMSIG: STATUS must be an integer");
     }
-#else
-  warning ("WTERMSIG always returns false in this version of Octave");
-#endif
 
   return retval;
 }
 
 DEFUNX ("WCOREDUMP", FWCOREDUMP, args, ,
   "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} WCOREDUMP (@var{status})\n\
 Given @var{status} from a call to @code{waitpid}, return true if the\n\
 child produced a core dump.  This function should only be employed if\n\
 @code{WIFSIGNALED} returned true.  The macro used to implement this\n\
 function is not specified in POSIX.1-2001 and is not available on some\n\
 Unix implementations (e.g., AIX, SunOS).\n\
 @seealso{waitpid, WIFEXITED, WEXITSTATUS, WIFSIGNALED, WTERMSIG, WIFSTOPPED, WSTOPSIG, WIFCONTINUED}\n\
 @end deftypefn")
 {
-  octave_value retval = 0.0;
+  octave_value retval = false;
 
-#if defined (WCOREDUMP)
   if (args.length () == 1)
     {
       int status = args(0).int_value ();
 
       if (! error_state)
-        retval = WCOREDUMP (status);
+        retval = octave_wait::coredump (status);
       else
         error ("WCOREDUMP: STATUS must be an integer");
     }
-#else
-  warning ("WCOREDUMP always returns false in this version of Octave");
-#endif
 
   return retval;
 }
 
 DEFUNX ("WIFSTOPPED", FWIFSTOPPED, args, ,
   "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} WIFSTOPPED (@var{status})\n\
 Given @var{status} from a call to @code{waitpid}, return true if the\n\
 child process was stopped by delivery of a signal; this is only\n\
 possible if the call was done using @code{WUNTRACED} or when the child\n\
 is being traced (see ptrace(2)).\n\
 @seealso{waitpid, WIFEXITED, WEXITSTATUS, WIFSIGNALED, WTERMSIG, WCOREDUMP, WSTOPSIG, WIFCONTINUED}\n\
 @end deftypefn")
 {
-  octave_value retval = 0.0;
+  octave_value retval = false;
 
-#if defined (WIFSTOPPED)
   if (args.length () == 1)
     {
       int status = args(0).int_value ();
 
       if (! error_state)
-        retval = WIFSTOPPED (status);
+        retval = octave_wait::ifstopped (status);
       else
         error ("WIFSTOPPED: STATUS must be an integer");
     }
-#else
-  warning ("WIFSTOPPED always returns false in this version of Octave");
-#endif
 
   return retval;
 }
 
 DEFUNX ("WSTOPSIG", FWSTOPSIG, args, ,
   "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} WSTOPSIG (@var{status})\n\
 Given @var{status} from a call to @code{waitpid}, return the number of\n\
 the signal which caused the child to stop.  This function should only\n\
 be employed if @code{WIFSTOPPED} returned true.\n\
 @seealso{waitpid, WIFEXITED, WEXITSTATUS, WIFSIGNALED, WTERMSIG, WCOREDUMP, WIFSTOPPED, WIFCONTINUED}\n\
 @end deftypefn")
 {
-  octave_value retval = 0.0;
+  octave_value retval = 0;
 
-#if defined (WSTOPSIG)
   if (args.length () == 1)
     {
       int status = args(0).int_value ();
 
       if (! error_state)
-        retval = WSTOPSIG (status);
+        retval = octave_wait::stopsig (status);
       else
         error ("WSTOPSIG: STATUS must be an integer");
     }
-#else
-  warning ("WSTOPSIG always returns false in this version of Octave");
-#endif
 
   return retval;
 }
 
 DEFUNX ("WIFCONTINUED", FWIFCONTINUED, args, ,
   "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} WIFCONTINUED (@var{status})\n\
 Given @var{status} from a call to @code{waitpid}, return true if the\n\
 child process was resumed by delivery of @code{SIGCONT}.\n\
 @seealso{waitpid, WIFEXITED, WEXITSTATUS, WIFSIGNALED, WTERMSIG, WCOREDUMP, WIFSTOPPED, WSTOPSIG}\n\
 @end deftypefn")
 {
-  octave_value retval = 0.0;
+  octave_value retval = false;
 
-#if defined (WIFCONTINUED)
   if (args.length () == 1)
     {
       int status = args(0).int_value ();
 
       if (! error_state)
-        retval = WIFCONTINUED (status);
+        retval = octave_wait::ifcontinued (status);
       else
         error ("WIFCONTINUED: STATUS must be an integer");
     }
-#else
-  warning ("WIFCONTINUED always returns false in this version of Octave");
-#endif
 
   return retval;
 }
 
 DEFUNX ("canonicalize_file_name", Fcanonicalize_file_name, args, ,
   "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {[@var{cname}, @var{status}, @var{msg}] =} canonicalize_file_name (@var{fname})\n\
 Return the canonical name of file @var{fname}.  If the file does not exist\n\
diff --git a/libinterp/interpfcn/pager.cc b/libinterp/interpfcn/pager.cc
--- a/libinterp/interpfcn/pager.cc
+++ b/libinterp/interpfcn/pager.cc
@@ -103,17 +103,17 @@ clear_external_pager (void)
 
 static bool
 pager_event_handler (pid_t pid, int status)
 {
   bool retval = false;
 
   if (pid > 0)
     {
-      if (WIFEXITED (status) || WIFSIGNALLED (status))
+      if (octave_wait::ifexited (status) || octave_wait::ifsignaled (status))
         {
           // Avoid warning() since that will put us back in the pager,
           // which would be bad news.
 
           std::cerr << "warning: connection to external pager lost (pid = "
                     << pid << ")" << std::endl;
           std::cerr << "warning: flushing pending output (please wait)"
                     << std::endl;
diff --git a/libinterp/interpfcn/toplev.cc b/libinterp/interpfcn/toplev.cc
--- a/libinterp/interpfcn/toplev.cc
+++ b/libinterp/interpfcn/toplev.cc
@@ -803,18 +803,18 @@ run_command_and_return_output (const std
                 }
               else
                 break;
             }
         }
 
       int cmd_status = cmd->close ();
 
-      if (WIFEXITED (cmd_status))
-        cmd_status = WEXITSTATUS (cmd_status);
+      if (octave_wait::ifexited (cmd_status))
+        cmd_status = octave_wait::exitstatus (cmd_status);
       else
         cmd_status = 127;
 
       retval(1) = output_buf.str ();
       retval(0) = cmd_status;
     }
   else
     error ("unable to start subprocess for `%s'", cmd_str.c_str ());
@@ -983,18 +983,18 @@ command shell that is started to run the
             {
               int status = system (cmd_str.c_str ());
 
               // The value in status is as returned by waitpid.  If
               // the process exited normally, extract the actual exit
               // status of the command.  Otherwise, return 127 as a
               // failure code.
 
-              if (WIFEXITED (status))
-                status = WEXITSTATUS (status);
+              if (octave_wait::ifexited (status))
+                status = octave_wait::exitstatus (status);
 
               retval(0) = status;
             }
         }
       else
         error ("system: expecting string as first argument");
     }
   else
diff --git a/liboctave/lo-cutils.c b/liboctave/lo-cutils.c
--- a/liboctave/lo-cutils.c
+++ b/liboctave/lo-cutils.c
@@ -71,8 +71,120 @@ octave_w32_library_search (HINSTANCE han
 }
 #endif
 
 OCTAVE_API pid_t
 octave_waitpid (pid_t pid, int *status, int options)
 {
   return WAITPID (pid, status, options);
 }
+
+OCTAVE_API int octave_wifexited (int status)
+{
+  int retval = 0;
+
+#if defined (WIFEXITED)
+  retval = WIFEXITED (status);
+#else
+  (*liboctave_warning_handler)
+    ("WIFEXITED always returns false in this version of Octave");
+#endif
+
+  return retval;
+}
+
+OCTAVE_API int octave_wexitstatus (int status)
+{
+  int retval = 0;
+
+#if defined (WEXITSTATUS)
+  retval = WEXITSTATUS (status);
+#else
+  (*liboctave_warning_handler)
+    ("WEXITSTATUS always returns 0 in this version of Octave");
+#endif
+
+  return retval;
+}
+
+OCTAVE_API int octave_wifsignaled (int status)
+{
+  int retval = 0;
+
+#if defined (WIFSIGNALED)
+  retval = WIFSIGNALED (status);
+#else
+  (*liboctave_warning_handler)
+    ("WIFSIGNALED always returns false in this version of Octave");
+#endif
+
+  return retval;
+}
+
+OCTAVE_API int octave_wtermsig (int status)
+{
+  int retval = 0;
+
+#if defined (WTERMSIG)
+  retval = WTERMSIG (status);
+#else
+  (*liboctave_warning_handler)
+    ("WTERMSIG always returns 0 in this version of Octave");
+#endif
+
+  return retval;
+}
+
+OCTAVE_API int octave_wcoredump (int status)
+{
+  int retval = 0;
+
+#if defined (WCOREDUMP)
+  retval = WCOREDUMP (status);
+#else
+  (*liboctave_warning_handler)
+    ("WCOREDUMP always returns false in this version of Octave");
+#endif
+
+  return retval;
+}
+
+OCTAVE_API int octave_wifstopped (int status)
+{
+  int retval = 0;
+
+#if defined (WIFSTOPPED)
+  retval = WIFSTOPPED (status);
+#else
+  (*liboctave_warning_handler)
+    ("WIFSTOPPED always returns false in this version of Octave");
+#endif
+
+  return retval;
+}
+
+OCTAVE_API int octave_wstopsig (int status)
+{
+  int retval = 0;
+
+#if defined (WSTOPSIG)
+  retval = WSTOPSIG (status);
+#else
+  (*liboctave_warning_handler)
+    ("WSTOPSIG always returns 0 in this version of Octave");
+#endif
+
+  return retval;
+}
+
+OCTAVE_API int octave_wifcontinued (int status)
+{
+  int retval = 0;
+
+#if defined (WIFCONTINUED)
+  retval = WIFCONTINUED (status);
+#else
+  (*liboctave_warning_handler)
+    ("WIFCONTINUED always returns false in this version of Octave");
+#endif
+
+  return retval;
+}
diff --git a/liboctave/lo-cutils.h b/liboctave/lo-cutils.h
--- a/liboctave/lo-cutils.h
+++ b/liboctave/lo-cutils.h
@@ -45,13 +45,22 @@ octave_strncasecmp (const char *s1, cons
 #ifdef HAVE_LOADLIBRARY_API
 OCTAVE_API void *
 octave_w32_library_search (HINSTANCE handle, const char *name);
 #endif
 
 OCTAVE_API pid_t
 octave_waitpid (pid_t pid, int *status, int options);
 
+OCTAVE_API int octave_wifexited (int status);
+OCTAVE_API int octave_wexitstatus (int status);
+OCTAVE_API int octave_wifsignaled (int status);
+OCTAVE_API int octave_wtermsig (int status);
+OCTAVE_API int octave_wcoredump (int status);
+OCTAVE_API int octave_wifstopped (int status);
+OCTAVE_API int octave_wstopsig (int status);
+OCTAVE_API int octave_wifcontinued (int status);
+
 #ifdef __cplusplus
 }
 #endif
 
 #endif
diff --git a/liboctave/lo-utils.h b/liboctave/lo-utils.h
--- a/liboctave/lo-utils.h
+++ b/liboctave/lo-utils.h
@@ -130,9 +130,57 @@ extern OCTAVE_API void
 octave_write_complex (std::ostream& os, const Complex& cval);
 
 extern OCTAVE_API void
 octave_write_float (std::ostream& os, float dval);
 
 extern OCTAVE_API void
 octave_write_float_complex (std::ostream& os, const FloatComplex& cval);
 
+// Maybe this is overkill, but it allos
+
+class
+octave_wait
+{
+public:
+
+  static bool ifexited (int status)
+  {
+    return octave_wifexited (status);
+  }
+
+  static int exitstatus (int status)
+  {
+    return octave_wexitstatus (status);
+  }
+
+  static bool ifsignaled (int status)
+  {
+    return octave_wifsignaled (status);
+  }
+
+  static int termsig (int status)
+  {
+    return octave_wtermsig (status);
+  }
+
+  static bool coredump (int status)
+  {
+    return octave_wcoredump (status);
+  }
+
+  static bool ifstopped (int status)
+  {
+    return octave_wifstopped (status);
+  }
+
+  static int stopsig (int status)
+  {
+    return octave_wstopsig (status);
+  }
+
+  static bool ifcontinued (int status)
+  {
+    return octave_wifcontinued (status);
+  }
+};
+
 #endif
