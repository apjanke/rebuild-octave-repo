# HG changeset patch
# User jwe
# Date 815286254 0
#      Thu Nov 02 04:24:14 1995 +0000
# Node ID 8dc3bdef46e27103475fd52cb0569f7c7fab17e6
# Parent  3d5663b7fc54e4c1eef182be37c57e2f30c4b874
[project @ 1995-11-02 04:22:59 by jwe]

diff --git a/scripts/Makefile.in b/scripts/Makefile.in
--- a/scripts/Makefile.in
+++ b/scripts/Makefile.in
@@ -20,17 +20,17 @@ INSTALL = @INSTALL@
 INSTALL_PROGRAM = @INSTALL_PROGRAM@
 INSTALL_DATA = @INSTALL_DATA@
 
 SOURCES = # *.m
 
 DISTFILES = Makefile.in $(SOURCES) configure.in configure \
 	mkinstalldirs
 
-SUBDIRS = audio control elfun general image linear-algebra \
+SUBDIRS = control elfun general image linear-algebra \
 	miscellaneous plot polynomial set signal specfun \
 	special-matrix startup statistics strings time
 
 DISTSUBDIRS = $(SUBDIRS)
 
 FCN_FILES = # $(wildcard $(srcdir)/*.m)
 FCN_FILES_NO_DIR = # $(notdir $(FCN_FILES))
 
diff --git a/src/filter.cc b/src/filter.cc
--- a/src/filter.cc
+++ b/src/filter.cc
@@ -1,23 +1,58 @@
 // f-filter.cc						-*- C++ -*-
+/*
+
+Copyright (C) 1993, 1994, 1995 John W. Eaton
+
+This file is part of Octave.
+
+Octave is free software; you can redistribute it and/or modify it
+under the terms of the GNU General Public License as published by the
+Free Software Foundation; either version 2, or (at your option) any
+later version.
+
+Octave is distributed in the hope that it will be useful, but WITHOUT
+ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+for more details.
+
+You should have received a copy of the GNU General Public License
+along with Octave; see the file COPYING.  If not, write to the Free
+Software Foundation, 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
+
+*/
 
 // Based on Tony Richardson's filter.m.
 //
 // Originally translated to C++ by KH (Kurt.Hornik@ci.tuwien.ac.at)
 // with help from Fritz Leisch and Andreas Weingessel on Oct 20, 1994.
 //
 // Rewritten to use templates to handle both real and complex cases by
 // jwe, Wed Nov  1 19:15:29 1995.
 
-#include "config.h"
+#ifdef HAVE_CONFIG_H
+#include <config.h>
+#endif
+
+#include "Array.h"
+#include "CColVector.h"
+#include "dColVector.h"
+
 #include "defun-dld.h"
+#include "error.h"
 #include "tree-const.h"
 #include "help.h"
 
+extern Array<double>
+filter (Array<double>&, Array<double>&, Array<double>&);
+
+extern Array<Complex>
+filter (Array<Complex>&, Array<Complex>&, Array<Complex>&);
+
 template <class T>
 Array<T>
 filter (Array<T>& b, Array<T>& a, Array<T>& x, Array<T>& si)
 {
   Array<T> y;
 
   int a_len  = a.length ();
   int b_len  = b.length ();
@@ -91,42 +126,36 @@ filter (Array<T>& b, Array<T>& a, Array<
 	}
     }
   else
     y = b.elem (0) * x;
 
   return y;
 }
 
+extern Array<double>
+filter (Array<double>&, Array<double>&, Array<double>&, Array<double>&);
+
+extern Array<Complex>
+filter (Array<Complex>&, Array<Complex>&, Array<Complex>&, Array<Complex>&);
+
 template <class T>
 Array<T>
 filter (Array<T>& b, Array<T>& a, Array<T>& x)
 {
   int a_len = a.length ();
   int b_len = b.length ();
 
   int si_len = (a_len > b_len ? a_len : b_len) - 1;
 
   Array<T> si (si_len, 0.0);
 
   return filter (b, a, x, si);
 }
 
-extern Array<double>
-filter (Array<double>&, Array<double>&, Array<double>&, Array<double>&);
-
-extern Array<double>
-filter (Array<double>&, Array<double>&, Array<double>&);
-
-extern Array<Complex>
-filter (Array<Complex>&, Array<Complex>&, Array<Complex>&, Array<Complex>&);
-
-extern Array<Complex>
-filter (Array<Complex>&, Array<Complex>&, Array<Complex>&);
-
 DEFUN_DLD_BUILTIN ("filter", Ffilter, Sfilter, 10,
   "usage: [y [, sf]] = filter (b, a, x [, si])\n\
 \n\
 y = filter (b, a, x) returns the solution to the following linear,\n\
 time-invariant difference equation:\n\
 \n\
   a[1] y[n] + ... + a[la] y[n-la+1] = b[1] x[n] + ... + b[lb] x[n-lb+1],\n\
 where la = length (a) and lb = length (b).\n\
@@ -242,17 +271,17 @@ implementation.")
 	    }
 	}
       else
 	error (errmsg);
     }
 
   return retval;
 }
-      
+
 template Array<double>
 filter (Array<double>&, Array<double>&, Array<double>&, Array<double>&);
 
 template Array<double>
 filter (Array<double>&, Array<double>&, Array<double>&);
 
 template Array<Complex>
 filter (Array<Complex>&, Array<Complex>&, Array<Complex>&, Array<Complex>&);
