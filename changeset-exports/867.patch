# HG changeset patch
# User jwe
# Date 783786002 0
#      Wed Nov 02 14:20:02 1994 +0000
# Node ID b6b78f85743ab9b851c6667a53b38e76b9b414b7
# Parent  f02ec9f8de652d5a84c303fdb9715f9b9ac2e6d0
[project @ 1994-11-02 14:20:02 by jwe]

diff --git a/src/help.cc b/src/help.cc
--- a/src/help.cc
+++ b/src/help.cc
@@ -434,17 +434,17 @@ simple_help (void)
 
 #ifdef LIST_SYMBOLS
 #undef LIST_SYMBOLS
 #endif
 #define LIST_SYMBOLS(type, msg) \
   do \
     { \
       int count; \
-      char **names = global_sym_tab->list (count, 1, type); \
+      char **names = global_sym_tab->list (count, 0, 0, 1, type); \
       display_symtab_names (output_buf, names, count, msg); \
       char **ptr = names; \
       while (*ptr) \
         delete [] *ptr++; \
       delete [] names; \
     } \
   while (0)
 
diff --git a/src/load-save.cc b/src/load-save.cc
--- a/src/load-save.cc
+++ b/src/load-save.cc
@@ -1351,79 +1351,90 @@ read_ascii_data (istream& is, const char
 
 // Extract one value (scalar, matrix, string, etc.) from stream IS and
 // place it in TC, returning the name of the variable.  If the value
 // is tagged as global in the file, return nonzero in GLOBAL.  If SWAP
 // is nonzero, swap bytes after reading.
 //
 // The data is expected to be in the following format:
 //
-// object               type            bytes
-// ------               ----            -----
-// magic number         string             10
+// Header (one per file):
+// =====================
 //
-// float format         integer             1  
+//   object               type            bytes
+//   ------               ----            -----
+//   magic number         string             10
 //
-// name_length          integer             4
+//   float format         integer             1  
+//
 //
-// name                 string    name_length
+// Data (one set for each item):
+// ============================
 //
-// doc_length           integer             4
+//   object               type            bytes
+//   ------               ----            -----
+//   name_length          integer             4
 //
-// doc                  string     doc_length
+//   name                 string    name_length
 //
-// global flag          integer             1
+//   doc_length           integer             4
+//
+//   doc                  string     doc_length
 //
-// data type            integer             1
+//   global flag          integer             1
 //
-// data:
-//   scalar             real                8
+//   data type            integer             1
 //
-//   complex scalar     complex            16
+//   data (one of):
+//
+//     scalar:
+//       data             real                8
 //
-//   matrix:
-//     rows             integer             4
-//     columns          integer             4
-//     data             real            r*c*8
+//     complex scalar:
+//       data             complex            16
+//
+//     matrix:
+//       rows             integer             4
+//       columns          integer             4
+//       data             real            r*c*8
 //
-//   complex matrix:
-//     rows             integer             4
-//     columns          integer             4
-//     data             complex        r*c*16
+//     complex matrix:
+//       rows             integer             4
+//       columns          integer             4
+//       data             complex        r*c*16
 //
-//   string:
-//     length           int                 4
-//     data             string         length
+//     string:
+//       length           int                 4
+//       data             string         length
 //
-//   range:
-//     base             real                8
-//     limit            real                8
-//     increment        real                8
+//     range:
+//       base             real                8
+//       limit            real                8
+//       increment        real                8
 //
 // FILENAME is used for error messages.
 
 static char *
 read_binary_data (istream& is, int swap, floating_point_format fmt,
 		  const char *filename, int& global,
 		  tree_constant& tc, char *&doc)
 {
   char tmp = 0;
 
   FOUR_BYTE_INT name_len = 0, doc_len = 0;
   char *name = 0;
 
   doc = 0;
 
+// We expect to fail here, at the beginning of a record, so not being
+// able to read another name should not result in an error.
+
   is.read (&name_len, 4);
   if (! is)
-    {
-      if (! is.eof ())
-	goto data_read_error;
-      return 0;
-    }
+    return 0;
   if (swap)
     swap_4_bytes ((char *) &name_len);
 
   name = new char [name_len+1];
   name[name_len] = '\0';
   if (! is.read (name, name_len))
     goto data_read_error;
 
@@ -1969,18 +1980,20 @@ do_load (istream& stream, const char *or
 	  name = read_mat_binary_data (stream, orig_fname, tc);
 	  break;
 
 	default:
 	  gripe_unrecognized_data_fmt ("load");
 	  break;
 	}
 
-      if (error_state || stream.eof ())
+      if (error_state || stream.eof () || ! name)
 	{
+	  delete [] name;
+	  delete [] doc;
 	  break;
 	}
       else if (! error_state && name)
 	{
 	  if (tc.is_defined ())
 	    {
 	      if (argc == 0 || matches_patterns (argv, argc, name))
 		{
@@ -2011,16 +2024,18 @@ do_load (istream& stream, const char *or
 	    error ("load: unable to load variable `%s'", name);
 	}
       else
 	{
 	  if (count == 0)
 	    error ("load: are you sure `%s' is an Octave data file?",
 		   orig_fname);
 
+	  delete [] name;
+	  delete [] doc;
 	  break;
 	}
 
       delete [] name;
       delete [] doc;
     }
 
   if (list_only && count)
diff --git a/src/symtab.cc b/src/symtab.cc
--- a/src/symtab.cc
+++ b/src/symtab.cc
@@ -968,56 +968,75 @@ pstrcmp (char **a, char **b)
 }
 
 static inline int
 symbol_record_info_cmp (symbol_record_info *a, symbol_record_info *b)
 {
   return strcmp (a->name (), b->name ());
 }
 
+static int
+matches_patterns (const char *name, char **pats, int npats)
+{
+  while (npats-- > 0)
+    {
+      if (fnmatch (*pats, name, __FNM_FLAGS) == 0)
+	return 1;
+
+      pats++;
+    }
+
+  return 0;
+}
+
 // This function should probably share code with symbol_table::list.
 // XXX FIXME XXX
 
 symbol_record_info *
-symbol_table::long_list (int& count, int sort, unsigned type,
-			 unsigned scope) const 
+symbol_table::long_list (int& count, char **pats, int npats, int sort,
+			 unsigned type, unsigned scope) const 
 {
   count = 0;
   int n = size ();
   if (n == 0)
     return 0;
 
   symbol_record_info *symbols = new symbol_record_info [n+1];
   for (int i = 0; i < HASH_TABLE_SIZE; i++)
     {
       symbol_record *ptr = table[i].next ();
       while (ptr)
 	{
 	  assert (count < n);
+
 	  unsigned my_scope = ptr->is_linked_to_global () + 1; // Tricky...
+
 	  unsigned my_type = ptr->type ();
-	  if ((type & my_type) && (scope & my_scope))
-	    {
-	      symbols[count++] = symbol_record_info (*ptr);
-	    }
+
+	  char *my_name = ptr->name ();
+
+	  if ((type & my_type) && (scope & my_scope)
+	      && (npats == 0 || matches_patterns (my_name, pats, npats)))
+	    symbols[count++] = symbol_record_info (*ptr);
+
 	  ptr = ptr->next ();
 	}
     }
   symbols[count] = symbol_record_info ();
 
   if (sort && symbols)
     qsort ((void *) symbols, count, sizeof (symbol_record_info),
 	   (int (*)(const void*, const void*)) symbol_record_info_cmp);
 
   return symbols;
 }
 
 char **
-symbol_table::list (int& count, int sort, unsigned type,
-		    unsigned scope) const
+symbol_table::list (int& count, char **pats, int npats, int sort,
+		    unsigned type, unsigned scope) const
 {
   count = 0;
   int n = size ();
   if (n == 0)
     return 0;
 
   char **symbols = new char * [n+1];
   for (int i = 0; i < HASH_TABLE_SIZE; i++)
@@ -1026,17 +1045,20 @@ symbol_table::list (int& count, int sort
       while (ptr)
 	{
 	  assert (count < n);
 
 	  unsigned my_scope = ptr->is_linked_to_global () + 1; // Tricky...
 
 	  unsigned my_type = ptr->type ();
 
-	  if ((type & my_type) && (scope & my_scope))
+	  char *my_name = ptr->name ();
+
+	  if ((type & my_type) && (scope & my_scope)
+	      && (npats == 0 || matches_patterns (my_name, pats, npats)))
 	    symbols[count++] = strsave (ptr->name ());
 
 	  ptr = ptr->next ();
 	}
     }
   symbols[count] = 0;
 
   if (sort && symbols)
diff --git a/src/symtab.h b/src/symtab.h
--- a/src/symtab.h
+++ b/src/symtab.h
@@ -292,22 +292,23 @@ public:
 
   void rename (const char *old_name, const char *new_name);
 
   void clear (int clear_user_functions = 1);
   int clear (const char *nm, int clear_user_functions = 1);
 
   int size (void) const;
 
-  symbol_record_info *long_list (int& count, int sort = 0,
+  symbol_record_info *long_list (int& count, char **pats = 0,
+				 int npats = 0, int sort = 0,
 				 unsigned type = SYMTAB_ALL_TYPES,
 				 unsigned scope = SYMTAB_ALL_SCOPES) const;
 
-  char **list (int& count, int sort = 0,
-	       unsigned type = SYMTAB_ALL_TYPES,
+  char **list (int& count, char **pats = 0, int npats = 0,
+	       int sort = 0, unsigned type = SYMTAB_ALL_TYPES,
 	       unsigned scope = SYMTAB_ALL_SCOPES) const;
 
   symbol_record **glob (int& count, char *pat = "*",
 			unsigned type = SYMTAB_ALL_TYPES,
 			unsigned scope = SYMTAB_ALL_SCOPES) const;
 
   void push_context (void);
   void pop_context (void);
diff --git a/src/variables.cc b/src/variables.cc
--- a/src/variables.cc
+++ b/src/variables.cc
@@ -962,40 +962,40 @@ print_long_listing (ostrstream& output_b
   while (ptr->is_defined ())
     {
       print_symbol_info_line (output_buf, *ptr);
       ptr++;
     }
 }
 
 static int
-maybe_list (const char *header, ostrstream& output_buf,
-	    int show_verbose, symbol_table *sym_tab, unsigned type,
-	    unsigned scope)
+maybe_list (const char *header, char **argv, int argc,
+	    ostrstream& output_buf, int show_verbose, symbol_table
+	    *sym_tab, unsigned type, unsigned scope)
 {
   int count;
   int status = 0;
   if (show_verbose)
     {
       symbol_record_info *symbols;
-      symbols = sym_tab->long_list (count, 1, type, scope);
+      symbols = sym_tab->long_list (count, argv, argc, 1, type, scope);
       if (symbols && count > 0)
 	{
 	  output_buf << "\n" << header << "\n\n"
 		     << "prot  type               rows   cols  name\n"
 		     << "====  ====               ====   ====  ====\n";
 
 	  print_long_listing (output_buf, symbols);
 	  status = 1;
 	}
       delete [] symbols;
     }
   else
     {
-      char **symbols = sym_tab->list (count, 1, type, scope);
+      char **symbols = sym_tab->list (count, argv, argc, 1, type, scope);
       if (symbols && count > 0)
 	{
 	  output_buf << "\n" << header << "\n\n";
 	  list_in_columns (output_buf, symbols);
 	  status = 1;
 	}
       delete [] symbols;
     }
@@ -1052,80 +1052,83 @@ do_who (int argc, char **argv, int nargo
   char *my_name = argv[0];
 
   if (argc > 1)
     {
       show_functions = 0;
       show_variables = 0;
     }
 
-  for (int i = 1; i < argc; i++)
+  while (--argc > 0)
     {
       argv++;
+
       if (strcmp (*argv, "-all") == 0 || strcmp (*argv, "-a") == 0)
 	{
 	  show_builtins++;
 	  show_functions++;
 	  show_variables++;	  
 	}
       else if (strcmp (*argv, "-builtins") == 0 || strcmp (*argv, "-b") == 0)
 	show_builtins++;
       else if (strcmp (*argv, "-functions") == 0 || strcmp (*argv, "-f") == 0)
 	show_functions++;
       else if (strcmp (*argv, "-long") == 0 || strcmp (*argv, "-l") == 0)
 	show_verbose++;
       else if (strcmp (*argv, "-variables") == 0 || strcmp (*argv, "-v") == 0)
 	show_variables++;
+      else if (*argv[0] == '-')
+	warning ("%s: unrecognized option `%s'", my_name, *argv);
       else
-	warning ("%s: unrecognized option `%s'", my_name, *argv);
+	break;
     }
 
 // If the user specified -l and nothing else, show variables.  If
 // evaluating this at the top level, also show functions.
 
   if (show_verbose && ! (show_builtins || show_functions || show_variables))
     {
       show_functions = (curr_sym_tab == top_level_sym_tab);
       show_variables = 1;
     }
 
   ostrstream output_buf;
   int pad_after = 0;
 
   if (show_builtins)
     {
-      pad_after += maybe_list ("*** built-in variables:",
+      pad_after += maybe_list ("*** built-in variables:", argv, argc,
 			       output_buf, show_verbose, global_sym_tab,
 			       symbol_def::BUILTIN_VARIABLE,
 			       SYMTAB_ALL_SCOPES);
 
-      pad_after += maybe_list ("*** built-in functions:",
+      pad_after += maybe_list ("*** built-in functions:", argv, argc,
 			       output_buf, show_verbose, global_sym_tab,
 			       symbol_def::BUILTIN_FUNCTION,
 			       SYMTAB_ALL_SCOPES);
     }
 
   if (show_functions)
     {
       pad_after += maybe_list ("*** currently compiled functions:",
-			       output_buf, show_verbose, global_sym_tab,
-			       symbol_def::USER_FUNCTION,
+			       argv, argc, output_buf, show_verbose,
+			       global_sym_tab, symbol_def::USER_FUNCTION,
 			       SYMTAB_ALL_SCOPES);
     }
 
   if (show_variables)
     {
-      pad_after += maybe_list ("*** local user variables:",
+      pad_after += maybe_list ("*** local user variables:", argv, argc,
 			       output_buf, show_verbose, curr_sym_tab,
 			       symbol_def::USER_VARIABLE,
 			       SYMTAB_LOCAL_SCOPE); 
 
       pad_after += maybe_list ("*** globally visible user variables:",
-			       output_buf, show_verbose, curr_sym_tab,
-			       symbol_def::USER_VARIABLE,
+			       argv, argc, output_buf, show_verbose,
+			       curr_sym_tab, symbol_def::USER_VARIABLE,
 			       SYMTAB_GLOBAL_SCOPE);
     }
 
   if (pad_after)
     output_buf << "\n";
 
   output_buf << ends;
   maybe_page_output (output_buf);
