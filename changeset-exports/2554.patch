# HG changeset patch
# User jwe
# Date 848540586 0
#      Thu Nov 21 01:43:06 1996 +0000
# Node ID f7e3d23f0a8fcbbeee151578a6eee1132875c373
# Parent  f57c52dcd5ed4d7514145aa3ae85abb6950de244
[project @ 1996-11-21 01:41:57 by jwe]

diff --git a/ChangeLog b/ChangeLog
--- a/ChangeLog
+++ b/ChangeLog
@@ -1,10 +1,12 @@
 Wed Nov 20 00:33:03 1996  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
+	* Version 1.93.
+
 	* aclocal.m4 (OCTAVE_STRUCT_GR_PASSWD): New macro.
 	* configure.in: Use it.
 	* acconfig.h (HAVE_GR_PASSWD): Add undef.
 
 Tue Nov 19 23:10:01 1996  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* Makeconf.in (INCFLAGS): Add libcruft/misc directory.
 
diff --git a/NEWS b/NEWS
--- a/NEWS
+++ b/NEWS
@@ -162,16 +162,20 @@ Summary of changes for version 2.0:
     version 1.14.5 of GNU bash.
 
   * In prompt strings, `\H' expands to the whole host name.
 
   * New built-in variable `beep_on_error'.  If nonzero, Octave will try
     to ring your terminal's bell before printing an error message.
     The default value is 0.
 
+  * For functions defined from files, the type command now prints the
+    text of the file.  You can still get the text reconstructed from
+    the parse tree by using the new option -t (-transformed).
+
   * New command-line argument --traditional sets the following
     preference variables for compatibility with Matlab:
 
       PS1                           = ">> "
       PS2                           = ""
       beep_on_error                 = 1
       default_save_format           = "mat-binary"
       define_all_return_values      = 1
@@ -324,22 +328,37 @@ Summary of changes for version 2.0:
       getuid   -- return the real user id of the current process
       getgid   -- return the real group id of the current process
       geteuid  -- return the effective user id of the current process
       getegid  -- return the effective group id of the current process
       pipe     -- create an interprocess channel
 
   * Other new functions:
 
-      tmpnam              -- replaces octave_tmp_file_name
-      atexit              -- register functions to be called when Octave exits
-      putenv              -- define an environment variable
-      meshgrid            -- compatible with Matlab's meshgrid function
+      commutation_matrix  -- compute special matrix form
+      duplication_matrix  -- compute special matrix form
+      common_size.m       -- bring arguments to a common size
+      completion_matches  -- perform command completion on string
       tilde_expand        -- perform tilde expansion on string
-      completion_matches  -- perform command completion on string
+
+      meshgrid  -- compatible with Matlab's meshgrid function
+      tmpnam    -- replaces octave_tmp_file_name
+      atexit    -- register functions to be called when Octave exits
+      putenv    -- define an environment variable
+      bincoeff  -- compute binomial coefficients
+      nextpow2  -- compute the next power of 2 greater than a number
+      detrend   -- remove a best fit polynomial from data
+      erfinv    -- inverse error function
+      shift     -- perform a circular shift on the elements of a matrix
+      pow2      -- compute 2 .^ x
+      log2      -- compute base 2 logarithms
+      diff      -- compute differences of matrix elements
+      vech      -- stack columns of a matrix below the diagonal
+      vec       -- stack columns of a matrix to form a vector
+      xor       -- compute exclusive or
 
   * Functions for getting info from the password database on Unix systems:
 
       getpwent  -- read entry from password-file stream, opening if necessary
       getpwuid  -- search for password entry with matching user ID
       getpwnam  -- search for password entry with matching username
       setpwent  -- rewind the password-file stream
       endpwent  -- close the password-file stream
diff --git a/doc/ChangeLog b/doc/ChangeLog
--- a/doc/ChangeLog
+++ b/doc/ChangeLog
@@ -1,8 +1,12 @@
+Wed Nov 20 01:00:50 1996  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* Version 1.93.
+
 Thu Nov 14 00:07:25 1996  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* faq/Makefile.in (FAQ.dvi): Use $(TEXI2DVI), not just texi2dvi.
 	* interpreter/Makefile.in (octave.dvi): Likewise.
 	* liboctave/Makefile.in (liboctave.dvi): Likewise.
 
 	* Version 1.92.
 
diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,8 +1,12 @@
+Wed Nov 20 01:00:24 1996  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* Version 1.93.
+
 Tue Nov 19 15:13:35 1996  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* linear-algebra/commutation_matrix.m, linear-algebra/cross.m,
 	linear-algebra/duplication_matrix.m, linear-algebra/vec.m,
 	linear-algebra/vech.m: New files from Kurt Hornik.
 
 	* general/nextpow2.m, general/shift.m, general/diff.m,
 	general/common_size.m: New files from Kurt Hornik.
diff --git a/scripts/specfun/gammai.m b/scripts/specfun/gammai.m
--- a/scripts/specfun/gammai.m
+++ b/scripts/specfun/gammai.m
@@ -88,9 +88,9 @@ function y = gammai (a, x)
       n = n + 1;
     endwhile
     y(k) = 1 - exp (-x(k) + a(k) .* log (x(k))) .* c_new ...
 	./ gamma (a(k));
   endif
   
   y = reshape (y, r, c);
 
-endfunction
\ No newline at end of file
+endfunction
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,10 +1,31 @@
 Wed Nov 20 00:35:57 1996  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
+	* sighandlers.h (struct octave_interrupt_handler): Provide
+	forward declaration here.
+	* sighandlers.cc (octave_interrupt_handler): New struct.
+	(octave_catch_interrupts): Rename from catch_interrupts.
+	(octave_ignore_interrupts, octave_set_interrupt_handler):
+	New functions.
+	* help.cc, oct-hist.cc, pager.cc, toplev.cc: Use new functions for
+	handling interrupts so that we can hide the details of whether or
+	not we have to deal with SIGBREAK.
+
+	* pt-plot.cc [! HAVE_POSIX_SIGNALS] (open_plot_stream):
+	Simply ignore and restore the interrupt handler here.
+
+	* sighandlers.cc (MAYBE_REINSTALL_SIGHANDLER): New macro.  Use it
+	instead of always checking MUST_REINSTALL_SIGHANDLERS everywhere.
+	(sigchld_handler): If octave_child_list is empty, wait for any
+	child, but don't hang, and don't collect status info.
+	[__EMX__] (sigchld_handler): Save and restore handlers for SIGINT,
+	SIGBREAK, and SIGCHLD.  Ignore them while waiting on children.
+	(install_signal_handlers): If SIGBREAK exists, handle it like SIGINT.
+
 	* toplev.cc [USE_READLINE] (clean_up_and_exit):
 	Call rl_deprep_terminal() to restore terminal settings.
 
 	* sysdep.cc [__EMX__ && OS2] (Fextproc): New command.
 	[__EMX__ && OS2] (FEXTPROC): Alias for Fextproc.
 
 	* Version 1.93.
 
diff --git a/src/help.cc b/src/help.cc
--- a/src/help.cc
+++ b/src/help.cc
@@ -547,22 +547,22 @@ try_info (const string& nm)
 
   if (nm.length () > 0)
     cmd_buf << " --index-search " << nm;
 
   cmd_buf << ends;
 
   cmd_str = cmd_buf.str ();
 
-  volatile sig_handler *old_sigint_handler;
-  old_sigint_handler = octave_set_signal_handler (SIGINT, SIG_IGN);
+  volatile octave_interrupt_handler *old_interrupt_handler
+    = octave_ignore_interrupts ();
 
   status = system (cmd_str);
 
-  octave_set_signal_handler (SIGINT, old_sigint_handler);
+  octave_set_interrupt_handler (old_interrupt_handler);
 
   if ((status & 0xff) == 0)
     status = (signed char) ((status & 0xff00) >> 8);
   else
     status = 127;
 
   return status;
 }
diff --git a/src/oct-hist.cc b/src/oct-hist.cc
--- a/src/oct-hist.cc
+++ b/src/oct-hist.cc
@@ -422,22 +422,22 @@ do_edit_history (int argc, const string_
 
   string cmd = Veditor;
   cmd.append (" ");
   cmd.append (name);
 
   // Ignore interrupts while we are off editing commands.  Should we
   // maybe avoid using system()?
 
-  volatile sig_handler *saved_sigint_handler
-    = octave_set_signal_handler (SIGINT, SIG_IGN);
+  volatile octave_interrupt_handler *old_interrupt_handler
+    = octave_ignore_interrupts ();
 
   system (cmd.c_str ());
 
-  octave_set_signal_handler (SIGINT, saved_sigint_handler);
+  octave_set_interrupt_handler (old_interrupt_handler);
 
   // Write the commands to the history file since parse_and_execute
   // disables command line history while it executes.
 
   fstream file (name.c_str (), ios::in);
 
   char *line;
   int first = 1;
diff --git a/src/pager.cc b/src/pager.cc
--- a/src/pager.cc
+++ b/src/pager.cc
@@ -67,36 +67,36 @@ static string Vpager_binary;
 // as it is available.  Otherwise, it is buffered and only sent to the
 // pager when it is time to print another prompt.
 static bool Vpage_output_immediately;
 
 // TRUE means all output intended for the screen should be passed
 // through the pager.
 static bool Vpage_screen_output;
 
-static sig_handler *saved_sigint_handler = 0;
+static octave_interrupt_handler *saved_interrupt_handler = 0;
 
 static int really_flush_to_pager = 0;
 
 static int flushing_output_to_pager = 0;
 
 static void
 clear_external_pager (void)
 {
   octave_child_list::remove (octave_pager_pid);
 
   octave_pager_pid = -1;
 
   delete external_pager;
   external_pager = 0;
 
-  if (saved_sigint_handler)
+  if (saved_interrupt_handler)
     {
-      octave_set_signal_handler (SIGINT, saved_sigint_handler);
-      saved_sigint_handler = 0;
+      octave_set_interrupt_handler (saved_interrupt_handler);
+      saved_interrupt_handler = 0;
     }
 }
 
 static void
 pager_death_handler (pid_t pid, int status)
 {
   if (pid > 0)
     {
@@ -131,18 +131,17 @@ do_sync (const char *msg, bool bypass_pa
       else
 	{
 	  if (! external_pager)
 	    {
 	      string pgr = Vpager_binary;
 
 	      if (! pgr.empty ())
 		{
-		  saved_sigint_handler
-		    = octave_set_signal_handler (SIGINT, SIG_IGN);
+		  saved_interrupt_handler = octave_ignore_interrupts ();
 
 		  external_pager = new oprocstream (pgr.c_str ());
 
 		  if (external_pager)
 		    {
 		      octave_pager_pid = external_pager->pid ();
 
 		      octave_child_list::insert (octave_pager_pid,
diff --git a/src/sighandlers.cc b/src/sighandlers.cc
--- a/src/sighandlers.cc
+++ b/src/sighandlers.cc
@@ -66,40 +66,70 @@ static sigset_t octave_signal_mask;
 #endif
 
 #if RETSIGTYPE == void
 #define SIGHANDLER_RETURN(status) return
 #else
 #define SIGHANDLER_RETURN(status) return status
 #endif
 
+#if defined (MUST_REINSTALL_SIGHANDLERS)
+#define MAYBE_REINSTALL_SIGHANDLER(sig, handler) \
+  octave_set_signal_handler (sig, handler)
+#else
+#define MAYBE_REINSTALL_SIGHANDLER(sig, handler) \
+  do { } while (0)
+#endif
+
+#if defined (__EMX__)
+#define MAYBE_UNBLOCK_SIGNAL(sig) \
+  octave_set_signal_handler (sig, SIG_ACK)
+#else
+#define MAYBE_UNBLOCK_SIGNAL(sig) \
+  do { } while (0)
+#endif
+
 void
 octave_save_signal_mask (void)
 {
 #if defined (HAVE_POSIX_SIGNALS)
   sigprocmask (0, 0, &octave_signal_mask);
 #endif
 }
 
 void
 octave_restore_signal_mask (void)
 {
 #if defined (HAVE_POSIX_SIGNALS)
   sigprocmask (SIG_SETMASK, &octave_signal_mask, 0);
 #endif
 }
 
+struct
+octave_interrupt_handler
+{
+#ifdef SIGINT
+  sig_handler *int_handler;
+#endif
+
+#ifdef SIGBREAK
+  sig_handler *brk_handler;
+#endif
+};
+
+static octave_interrupt_handler the_interrupt_handler;
+
 static void
 my_friendly_exit (const char *sig_name, int sig_number)
 {
   static bool been_there_done_that = false;
 
   if (been_there_done_that)
     {
-#ifdef SIGABRT
+#if defined (SIGABRT)
       octave_set_signal_handler (SIGABRT, SIG_DFL);
 #endif
 
       error ("attempted clean up seems to have failed -- aborting...");
 
       abort ();
     }
   else
@@ -154,118 +184,190 @@ generic_sig_handler (int sig)
   SIGHANDLER_RETURN (0);
 }
 
 // Handle SIGCHLD.
 
 static RETSIGTYPE
 sigchld_handler (int /* sig */)
 {
+#if defined (__EMX__)
+  volatile octave_interrupt_handler *saved_interrupt_handler
+     = octave_ignore_interrupts ();
+
+  volatile sig_handler *saved_sigchld_handler
+    = octave_set_sighanlder (SIGCHLD, SIG_IGN);
+#endif
+
   int n = octave_child_list::length ();
 
-  for (int i = 0; i < n; i++)
+  if (n == 0)
     {
-      octave_child& elt = octave_child_list::elem (i);
+      waitpid (-1, 0, WNOHANG);
+    }
+  else
+    {
+      for (int i = 0; i < n; i++)
+	{
+	  octave_child& elt = octave_child_list::elem (i);
 
-      pid_t pid = elt.pid;
-
-      if (pid > 0)
-	{
-	  int status;
+	  pid_t pid = elt.pid;
 
-	  if (waitpid (pid, &status, WNOHANG) > 0)
+	  if (pid > 0)
 	    {
-	      elt.pid = -1;
+	      int status;
+
+	      if (waitpid (pid, &status, WNOHANG) > 0)
+		{
+		  elt.pid = -1;
 
-	      octave_child::dead_child_handler f = elt.handler;
+		  octave_child::dead_child_handler f = elt.handler;
 
-	      if (f)
-		f (pid, status);
+		  if (f)
+		    f (pid, status);
 
-	      break;
+		  break;
+		}
 	    }
 	}
     }
 
-#ifdef MUST_REINSTALL_SIGHANDLERS
-  octave_set_signal_handler (SIGCHLD, sigchld_handler);
+#if defined (__EMX__)
+  octave_set_inerrupt_handler (saved_interrupt_handler);
+
+  octave_set_signal_handler (SIGCHLD, saved_sigchld_handler);
 #endif
 
+  MAYBE_UNBLOCK_SIGNAL (SIGCHLD);
+
+  MAYBE_REINSTALL_SIGHANDLER (SIGCHLD, sigchld_handler);
+
   SIGHANDLER_RETURN (0);
 }
 
 #if defined (__alpha__)
 static RETSIGTYPE
 sigfpe_handler (int /* sig */)
 {
-#ifdef MUST_REINSTALL_SIGHANDLERS
-  octave_set_signal_handler (SIGFPE, sigfpe_handler);
-#endif
+  MAYBE_UNBLOCK_SIGNAL (SIGFPE);
+
+  MAYBE_REINSTALL_SIGHANDLER (SIGFPE, sigfpe_handler);
 
   error ("floating point exception -- trying to return to prompt");
 
   if (can_interrupt)
     {
       jump_to_top_level ();
       panic_impossible ();
     }
 
   SIGHANDLER_RETURN (0);
 }
 #endif
 
 // Handle SIGINT by restarting the parser (see octave.cc).
+//
+// This also has to work for SIGBREAK (on systems that have it), so we
+// use the value of sig, instead of just assuming that it is called
+// for SIGINT only.
 
 static RETSIGTYPE
-sigint_handler (int /* sig */)
+sigint_handler (int sig)
 {
-#ifdef MUST_REINSTALL_SIGHANDLERS
-  octave_set_signal_handler (SIGINT, sigint_handler);
-#endif
+  MAYBE_UNBLOCK_SIGNAL (sig);
+
+  MAYBE_REINSTALL_SIGHANDLER (sig, sigint_handler);
 
   if (can_interrupt)
     {
       jump_to_top_level ();
       panic_impossible ();
     }
 
   SIGHANDLER_RETURN (0);
 }
 
 static RETSIGTYPE
 sigpipe_handler (int /* sig */)
 {
-#ifdef MUST_REINSTALL_SIGHANDLERS
-  octave_set_signal_handler (SIGPIPE, sigpipe_handler);
-#endif
+  MAYBE_UNBLOCK_SIGNAL (SIGPIPE);
+
+  MAYBE_REINSTALL_SIGHANDLER (SIGPIPE, sigpipe_handler);
 
   if (pipe_handler_error_count++ == 0)
     warning ("broken pipe");
 
   // Don't loop forever on account of this.
 
   if (pipe_handler_error_count  > 100)
     jump_to_top_level ();
 
   SIGHANDLER_RETURN (0);
 }
 
 void
-catch_interrupts (void)
+octave_catch_interrupts (void)
+{
+#ifdef SIGINT
+  octave_set_signal_handler (SIGINT, sigint_handler);
+
+  the_interrupt_handler.int_handler = sigint_handler;
+#endif
+
+#ifdef SIGBREAK
+  octave_set_signal_handler (SIGBREAK, sigint_handler);
+
+  the_interrupt_handler.brk_handler = sigint_handler;
+#endif
+}
+
+octave_interrupt_handler *
+octave_ignore_interrupts (void)
 {
-  octave_set_signal_handler (SIGINT, sigint_handler);
+#ifdef SIGINT
+  the_interrupt_handler.int_handler
+    = octave_set_signal_handler (SIGINT, SIG_IGN);
+#endif
+
+#ifdef SIGBREAK
+  the_interrupt_handler.int_handler
+    = octave_set_signal_handler (SIGBREAK, SIG_IGN);
+#endif
+  
+  return &the_interrupt_handler;
+}
+
+octave_interrupt_handler *
+octave_set_interrupt_handler (const volatile octave_interrupt_handler *h)
+{
+  if (h)
+    {
+#ifdef SIGINT
+      the_interrupt_handler.int_handler
+	= octave_set_signal_handler (SIGINT, h->int_handler);
+#endif
+
+#ifdef SIGBREAK
+      the_interrupt_handler.int_handler
+	= octave_set_signal_handler (SIGBREAK, h->brk_handler);
+#endif
+    }
+  
+  return &the_interrupt_handler;
 }
 
 // Install all the handlers for the signals we might care about.
 
 void
 install_signal_handlers (void)
 {
   set_new_handler (octave_new_handler);
 
+  octave_catch_interrupts ();
+
 #ifdef SIGABRT
   octave_set_signal_handler (SIGABRT, generic_sig_handler);
 #endif
 
 #ifdef SIGALRM
   octave_set_signal_handler (SIGALRM, generic_sig_handler);
 #endif
 
@@ -292,20 +394,16 @@ install_signal_handlers (void)
 #ifdef SIGHUP
   octave_set_signal_handler (SIGHUP, generic_sig_handler);
 #endif
 
 #ifdef SIGILL
   octave_set_signal_handler (SIGILL, generic_sig_handler);
 #endif
 
-#ifdef SIGINT
-  octave_set_signal_handler (SIGINT, sigint_handler);
-#endif
-
 #ifdef SIGIOT
   octave_set_signal_handler (SIGIOT, generic_sig_handler);
 #endif
 
 #ifdef SIGLOST
   octave_set_signal_handler (SIGLOST, generic_sig_handler);
 #endif
 
diff --git a/src/sighandlers.h b/src/sighandlers.h
--- a/src/sighandlers.h
+++ b/src/sighandlers.h
@@ -34,28 +34,38 @@ Software Foundation, 59 Temple Place - S
 #define RETSIGTYPE void
 #endif
 #ifndef BADSIG
 #define BADSIG (RETSIGTYPE (*)(int))-1
 #endif
 
 typedef RETSIGTYPE sig_handler (int);
 
+// All we need to do is declare pointers to this, so we don't need to
+// have the whole declaration here.
+
+struct octave_interrupt_handler;
+
 // Nonzero means we have already printed a message for this series of
 // SIGPIPES.  We assume that the writer will eventually give up.
 extern int pipe_handler_error_count;
 
 // Nonzero means we can be interrupted.
 extern int can_interrupt;
 
 extern sig_handler *octave_set_signal_handler (int, sig_handler *);
 
 extern void install_signal_handlers (void);
 
-extern void catch_interrupts (void);
+extern void octave_catch_interrupts (void);
+
+extern octave_interrupt_handler *octave_ignore_interrupts (void);
+
+extern octave_interrupt_handler *
+octave_set_interrupt_handler (const volatile octave_interrupt_handler *);
 
 extern void octave_save_signal_mask (void);
 
 extern void octave_restore_signal_mask (void);
 
 // extern void ignore_sigchld (void);
 
 // This is taken directly from Emacs 19:
diff --git a/src/toplev.cc b/src/toplev.cc
--- a/src/toplev.cc
+++ b/src/toplev.cc
@@ -230,17 +230,17 @@ main_loop (void)
 
       cout << "\n";
 
       octave_restore_signal_mask ();
     }
 
   can_interrupt = 1;
 
-  catch_interrupts ();
+  octave_catch_interrupts ();
 
   // The big loop.
 
   int retval;
   do
     {
       curr_sym_tab = top_level_sym_tab;
 
diff --git a/test/ChangeLog b/test/ChangeLog
--- a/test/ChangeLog
+++ b/test/ChangeLog
@@ -1,8 +1,12 @@
+Wed Nov 20 01:00:02 1996  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* Version 1.93.
+
 Thu Nov 14 00:05:57 1996  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* Version 1.92
 
 Thu Nov  7 12:43:03 1996  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* Version 1.91.
 
