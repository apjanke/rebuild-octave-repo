# HG changeset patch
# User Rik <rik@octave.org>
# Date 1450131379 28800
#      Mon Dec 14 14:16:19 2015 -0800
# Node ID e528d7ab1cad94ade5801e398ffefd3b6ce56b3e
# Parent  384ff5aa9437fcb83d89d541cf4111f70acfcc33
rand.cc: Overhaul file to make use of new C++ archetype.

* rand.cc (do_rand): Declare variables as late as possible.  Eliminate '{', '}'
around code blocks with a single statement.  Delete else statement when first of
if statement is error().  Delete unused goto label "done:".
* rand.cc (Frand, Frandn, Frande): Simplify code to single line.
* rand.cc (Frandg, Frandp): Don't use retval.  Delete else statement when first of
if statement is error().
* rand.cc (Frandperm): Delete unused retval variable.

diff --git a/libinterp/corefcn/rand.cc b/libinterp/corefcn/rand.cc
--- a/libinterp/corefcn/rand.cc
+++ b/libinterp/corefcn/rand.cc
@@ -52,29 +52,20 @@ along with Octave; see the file COPYING.
 %! ## Flag whether the statistical tests should be run in "make check" or not
 %! __random_statistical_tests__ = 0;
 */
 
 static octave_value
 do_rand (const octave_value_list& args, int nargin, const char *fcn,
          const std::string& distribution, bool additional_arg = false)
 {
-  octave_value retval;
   NDArray a;
   int idx = 0;
-  dim_vector dims;
   bool is_single = false;
 
-  unwind_protect frame;
-  // Restore current distribution on any exit.
-  frame.add_fcn (octave_rand::distribution,
-                 octave_rand::distribution ());
-
-  octave_rand::distribution (distribution);
-
   if (nargin > 0 && args(nargin-1).is_string ())
     {
       std::string s_arg = args(nargin-1).string_value ();
 
       if (s_arg == "single")
         {
           is_single = true;
           nargin--;
@@ -93,118 +84,107 @@ do_rand (const octave_value_list& args, 
         {
           a = args(0).xarray_value ("%s: dimension must be a scalar integer", fcn);
 
           idx++;
           nargin--;
         }
     }
 
+  octave_value retval;
+  dim_vector dims;
+
+  unwind_protect frame;
+  // Restore current distribution on any exit.
+  frame.add_fcn (octave_rand::distribution,
+                 octave_rand::distribution ());
+
+  octave_rand::distribution (distribution);
+
   switch (nargin)
     {
     case 0:
       {
         if (additional_arg)
           dims = a.dims ();
         else
           {
             dims.resize (2);
 
             dims(0) = 1;
             dims(1) = 1;
           }
+
         goto gen_matrix;
       }
       break;
 
     case 1:
       {
         octave_value tmp = args(idx);
 
         if (tmp.is_string ())
           {
             std::string s_arg = tmp.string_value ();
 
             if (s_arg == "dist")
-              {
-                retval = octave_rand::distribution ();
-              }
+              retval = octave_rand::distribution ();
             else if (s_arg == "seed")
-              {
-                retval = octave_rand::seed ();
-              }
+              retval = octave_rand::seed ();
             else if (s_arg == "state" || s_arg == "twister")
-              {
-                retval = octave_rand::state (fcn);
-              }
+              retval = octave_rand::state (fcn);
             else if (s_arg == "uniform")
-              {
-                octave_rand::uniform_distribution ();
-              }
+              octave_rand::uniform_distribution ();
             else if (s_arg == "normal")
-              {
-                octave_rand::normal_distribution ();
-              }
+              octave_rand::normal_distribution ();
             else if (s_arg == "exponential")
-              {
-                octave_rand::exponential_distribution ();
-              }
+              octave_rand::exponential_distribution ();
             else if (s_arg == "poisson")
-              {
-                octave_rand::poisson_distribution ();
-              }
+              octave_rand::poisson_distribution ();
             else if (s_arg == "gamma")
-              {
-                octave_rand::gamma_distribution ();
-              }
+              octave_rand::gamma_distribution ();
             else
               error ("%s: unrecognized string argument", fcn);
           }
         else if (tmp.is_scalar_type ())
           {
             double dval = tmp.double_value ();
 
             if (xisnan (dval))
               error ("%s: NaN is invalid matrix dimension", fcn);
-            else
-              {
-                dims.resize (2);
+
+            dims.resize (2);
 
-                dims(0) = NINTbig (tmp.double_value ());
-                dims(1) = NINTbig (tmp.double_value ());
+            dims(0) = NINTbig (tmp.double_value ());
+            dims(1) = NINTbig (tmp.double_value ());
 
-                goto gen_matrix;
-              }
+            goto gen_matrix;
           }
         else if (tmp.is_range ())
           {
             Range r = tmp.range_value ();
 
-            if (r.all_elements_are_ints ())
-              {
-                octave_idx_type n = r.numel ();
+            if (! r.all_elements_are_ints ())
+              error ("%s: all elements of range must be integers", fcn);
 
-                dims.resize (n);
+            octave_idx_type n = r.numel ();
 
-                octave_idx_type base = NINTbig (r.base ());
-                octave_idx_type incr = NINTbig (r.inc ());
+            dims.resize (n);
 
-                for (octave_idx_type i = 0; i < n; i++)
-                  {
-                    // Negative dimensions are treated as zero for Matlab
-                    // compatibility
-                    dims(i) = base >= 0 ? base : 0;
-                    base += incr;
-                  }
+            octave_idx_type base = NINTbig (r.base ());
+            octave_idx_type incr = NINTbig (r.inc ());
 
-                goto gen_matrix;
-
+            for (octave_idx_type i = 0; i < n; i++)
+              {
+                // Negative dimensions treated as zero for Matlab compatibility
+                dims(i) = base >= 0 ? base : 0;
+                base += incr;
               }
-            else
-              error ("%s: all elements of range must be integers", fcn);
+
+            goto gen_matrix;
           }
         else if (tmp.is_matrix_type ())
           {
             Array<int> iv;
 
             try
               {
                 iv = tmp.int_vector_value (true);
@@ -215,18 +195,17 @@ do_rand (const octave_value_list& args, 
               }
 
             octave_idx_type len = iv.numel ();
 
             dims.resize (len);
 
             for (octave_idx_type i = 0; i < len; i++)
               {
-                // Negative dimensions are treated as zero for Matlab
-                // compatibility
+                // Negative dimensions treated as zero for Matlab compatibility
                 octave_idx_type elt = iv(i);
                 dims(i) = elt >=0 ? elt : 0;
               }
 
             goto gen_matrix;
           }
         else
           {
@@ -277,28 +256,27 @@ do_rand (const octave_value_list& args, 
         else
           {
             dims.resize (nargin);
 
             for (int i = 0; i < nargin; i++)
               {
                 octave_idx_type elt = args(idx+i).xint_value ("%s: dimension must be a scalar or array of integers", fcn);
 
-                // Negative is zero for Matlab compatibility
+                // Negative dimensions treated as zero for Matlab compatibility
                 dims(i) = elt >= 0 ? elt : 0;
               }
 
             goto gen_matrix;
           }
       }
       break;
     }
 
-done:
-
+  // No "goto gen_matrix" in code path.  Must be done.
   return retval;
 
 gen_matrix:
 
   dims.chop_trailing_singletons ();
 
   if (is_single)
     {
@@ -309,18 +287,20 @@ gen_matrix:
           else
             {
               if (a.dims () != dims)
                 error ("%s: mismatch in argument size", fcn);
 
               octave_idx_type len = a.numel ();
               FloatNDArray m (dims);
               float *v = m.fortran_vec ();
+
               for (octave_idx_type i = 0; i < len; i++)
                 v[i] = octave_rand::float_scalar (a(i));
+
               return m;
             }
         }
       else
         return octave_rand::float_nd_array (dims);
     }
   else
     {
@@ -331,18 +311,20 @@ gen_matrix:
           else
             {
               if (a.dims () != dims)
                 error ("%s: mismatch in argument size", fcn);
 
               octave_idx_type len = a.numel ();
               NDArray m (dims);
               double *v = m.fortran_vec ();
+
               for (octave_idx_type i = 0; i < len; i++)
                 v[i] = octave_rand::scalar (a(i));
+
               return m;
             }
         }
       else
         return octave_rand::nd_array (dims);
     }
 }
 
@@ -430,23 +412,17 @@ The state or seed of the generator can b
 the @qcode{\"reset\"} keyword.\n\
 \n\
 The class of the value returned can be controlled by a trailing\n\
 @qcode{\"double\"} or @qcode{\"single\"} argument.  These are the only valid\n\
 classes.\n\
 @seealso{randn, rande, randg, randp}\n\
 @end deftypefn")
 {
-  octave_value retval;
-
-  int nargin = args.length ();
-
-  retval = do_rand (args, nargin, "rand", "uniform");
-
-  return retval;
+  return do_rand (args, args.length (), "rand", "uniform");
 }
 
 // FIXME: The old generator (selected when "seed" is set) will not
 // work properly if compiled to use 64-bit integers.
 
 /*
 %!test  # "state" can be a scalar
 %! rand ("state", 12);  x = rand (1,4);
@@ -559,23 +535,17 @@ classes.\n\
 Reference: @nospell{G. Marsaglia and W.W. Tsang},\n\
 @cite{Ziggurat Method for Generating Random Variables},\n\
 J. Statistical Software, vol 5, 2000,\n\
 @url{http://www.jstatsoft.org/v05/i08/}\n\
 \n\
 @seealso{rand, rande, randg, randp}\n\
 @end deftypefn")
 {
-  octave_value retval;
-
-  int nargin = args.length ();
-
-  retval = do_rand (args, nargin, "randn", "normal");
-
-  return retval;
+  return do_rand (args, args.length (), "randn", "normal");
 }
 
 /*
 %!test
 %! ## Test fixed state
 %! randn ("state", 1);
 %! assert (randn (1, 6), [-2.666521678978671 -0.7381719971724564 1.507903992673601 0.6019427189162239 -0.450661261143348 -0.7054431351574116], 1e-6);
 %!test
@@ -631,23 +601,17 @@ classes.\n\
 Reference: @nospell{G. Marsaglia and W.W. Tsang},\n\
 @cite{Ziggurat Method for Generating Random Variables},\n\
 J. Statistical Software, vol 5, 2000,\n\
 @url{http://www.jstatsoft.org/v05/i08/}\n\
 \n\
 @seealso{rand, randn, randg, randp}\n\
 @end deftypefn")
 {
-  octave_value retval;
-
-  int nargin = args.length ();
-
-  retval = do_rand (args, nargin, "rande", "exponential");
-
-  return retval;
+  return do_rand (args, args.length (), "rande", "exponential");
 }
 
 /*
 %!test
 %! ## Test fixed state
 %! rande ("state", 1);
 %! assert (rande (1, 6), [3.602973885835625 0.1386190677555021 0.6743112889616958 0.4512830847258422 0.7255744741233175 0.3415969205292291], 1e-6);
 %!test
@@ -773,26 +737,22 @@ r = r / sum (r)\n\
 @end table\n\
 \n\
 The class of the value returned can be controlled by a trailing\n\
 @qcode{\"double\"} or @qcode{\"single\"} argument.  These are the only valid\n\
 classes.\n\
 @seealso{rand, randn, rande, randp}\n\
 @end deftypefn")
 {
-  octave_value retval;
-
   int nargin = args.length ();
 
   if (nargin < 1)
     error ("randg: insufficient arguments");
-  else
-    retval = do_rand (args, nargin, "randg", "gamma", true);
 
-  return retval;
+  return do_rand (args, nargin, "randg", "gamma", true);
 }
 
 /*
 %!test
 %! randg ("state", 12)
 %! assert (randg ([-inf, -1, 0, inf, nan]), [nan, nan, nan, nan, nan]); # *** Please report
 
 %!test
@@ -1002,26 +962,22 @@ Physical Review D 50 p1284, 1994.\n\
 @end table\n\
 \n\
 The class of the value returned can be controlled by a trailing\n\
 @qcode{\"double\"} or @qcode{\"single\"} argument.  These are the only valid\n\
 classes.\n\
 @seealso{rand, randn, rande, randg}\n\
 @end deftypefn")
 {
-  octave_value retval;
-
   int nargin = args.length ();
 
   if (nargin < 1)
     error ("randp: insufficient arguments");
-  else
-    retval = do_rand (args, nargin, "randp", "poisson", true);
 
-  return retval;
+  return do_rand (args, nargin, "randp", "poisson", true);
 }
 
 /*
 %!test
 %! randp ("state", 12);
 %! assert (randp ([-inf, -1, 0, inf, nan]), [nan, nan, 0, nan, nan]);   # *** Please report
 %!test
 %! ## Test fixed state
@@ -1116,18 +1072,16 @@ replacement from @code{1:@var{n}}.\n\
 \n\
 The complexity is O(@var{n}) in memory and O(@var{m}) in time, unless\n\
 @var{m} < @var{n}/5, in which case O(@var{m}) memory is used as well.  The\n\
 randomization is performed using rand().  All permutations are equally\n\
 likely.\n\
 @seealso{perms}\n\
 @end deftypefn")
 {
-  octave_value retval;
-
 #ifdef USE_UNORDERED_MAP_WITH_TR1
 using std::tr1::unordered_map;
 #else
 using std::unordered_map;
 #endif
 
   int nargin = args.length ();
 
@@ -1194,17 +1148,16 @@ using std::unordered_map;
                 map[k] = k;
 
               std::swap (ivec[i], map[k]);
             }
         }
     }
   else
     {
-
       // Perform the Knuth shuffle of the first m entries
       for (octave_idx_type i = 0; i < m; i++)
         {
           octave_idx_type k = i +
             gnulib::floor (rvec[i] * (n - i));
           std::swap (ivec[i], ivec[k]);
         }
     }
