# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1363728533 14400
#      Tue Mar 19 17:28:53 2013 -0400
# Node ID 0ce49f9fb1713c74bc988b7aa7a4b9707de5ef95
# Parent  bef822a80ffbac86e6100588c49bc555a232e0c4
"\n" is the new empty string (bug #38552)

* input.cc (last_debugging_command): Initialize to "\n".
(octave_gets): Reset last_debugging_command to "\n", not "".
Take "\n" to mean 'no input' instead of "".

diff --git a/libinterp/interpfcn/input.cc b/libinterp/interpfcn/input.cc
--- a/libinterp/interpfcn/input.cc
+++ b/libinterp/interpfcn/input.cc
@@ -107,17 +107,17 @@ bool octave_completion_matches_called = 
 // the next user prompt.
 bool Vdrawnow_requested = false;
 
 // TRUE if we are in debugging mode.
 bool Vdebugging = false;
 
 // If we are in debugging mode, this is the last command entered, so
 // that we can repeat the previous command if the user just types RET.
-static std::string last_debugging_command;
+static std::string last_debugging_command = "\n";
 
 // TRUE if we are running in the Emacs GUD mode.
 static bool Vgud_mode = false;
 
 // The filemarker used to separate filenames from subfunction names
 char Vfilemarker = '>';
 
 void
@@ -210,33 +210,33 @@ octave_base_reader::octave_gets (bool& e
   octave_diary_stream::reset ();
 
   octave_diary << prompt;
 
   retval = interactive_input (prompt, eof);
 
   // There is no need to update the load_path cache if there is no
   // user input.
-  if (! retval.empty ()
+  if (retval != "\n"
       && retval.find_first_not_of (" \t\n\r") != std::string::npos)
     {
       load_path::update ();
 
       if (Vdebugging)
         last_debugging_command = retval;
       else
-        last_debugging_command = std::string ();
+        last_debugging_command = "\n";
     }
   else if (Vdebugging)
     {
       retval = last_debugging_command;
       history_skip_auto_repeated_debugging_command = true;
     }
 
-  if (! retval.empty ())
+  if (retval != "\n")
     {
       if (! history_skip_auto_repeated_debugging_command)
         command_history::add (retval);
 
       octave_diary << retval;
 
       if (retval[retval.length () - 1] != '\n')
         octave_diary << "\n";
