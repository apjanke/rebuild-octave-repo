# HG changeset patch
# User Rik <rdrider0-list@yahoo.com>
# Date 1238708733 25200
#      Thu Apr 02 14:45:33 2009 -0700
# Node ID ec41eabf449992ee55d80834bcfcab6106987531
# Parent  4d610aba734715efb7c7f003ea70f22f5014b922
Cleanup documentation files dynamic.texi, testfun.texi, tips.texi

diff --git a/doc/interpreter/dynamic.txi b/doc/interpreter/dynamic.txi
--- a/doc/interpreter/dynamic.txi
+++ b/doc/interpreter/dynamic.txi
@@ -350,17 +350,17 @@ listed below.
 @node Character Strings in Oct-Files
 @subsection Character Strings in Oct-Files
 
 In Octave a character string is just a special @code{Array} class.
 Consider the example 
 
 @longexamplefile{stringdemo.cc}
 
-An example of the of the use of this function is
+An example of the use of this function is
 
 @example
 @group
 s0 = ["First String"; "Second String"];
 [s1,s2] = stringdemo (s0)
 @result{} s1 = Second String
         First String
 
@@ -936,17 +936,17 @@ extern "C"
 Calling Fortran code however can pose some difficulties.  This is due to
 differences in the manner in compilers treat the linking of Fortran code
 with C or C++ code.  Octave supplies a number of macros that allow
 consistent behavior across a number of compilers.
 
 The underlying Fortran code should use the @code{XSTOPX} function to
 replace the Fortran @code{STOP} function.  @code{XSTOPX} uses the Octave
 exception handler to treat failing cases in the fortran code
-explicitly.  Note that Octave supplies its own replacement blas
+explicitly.  Note that Octave supplies its own replacement @sc{blas}
 @code{XERBLA} function, which uses @code{XSTOPX}.
 
 If the underlying code calls @code{XSTOPX}, then the @code{F77_XFCN}
 macro should be used to call the underlying fortran function.  The Fortran
 exception state can then be checked with the global variable
 @code{f77_exception_encountered}.  If @code{XSTOPX} will not be called,
 then the @code{F77_FCN} macro should be used instead to call the Fortran
 code.
@@ -1013,17 +1013,17 @@ of input arguments before using them to 
 argument.  However, it some case this might not be sufficient as the
 underlying code imposes further constraints.  For example an external
 function call might be undefined if the input arguments are not
 integers, or if one of the arguments is zero.  Therefore, oct-files often
 need additional input parameter checking.
 
 There are several functions within Octave that might be useful for the
 purposes of parameter checking.  These include the methods of the
-octave_value class like @code{is_real_matrix}, etc, but equally include
+octave_value class like @code{is_real_matrix}, etc., but equally include
 more specialized functions.  Some of the more common ones are
 demonstrated in the following example
 
 @longexamplefile{paramdemo.cc}
 
 @noindent
 and an example of its use is
 
@@ -1083,17 +1083,17 @@ The disadvantage of this is that if the 
 memory internally, then this memory might be lost during an interrupt,
 without being deallocated.  Therefore, ideally Octave itself should
 allocate any memory that is needed by the foreign code, with either the
 fortran_vec method or the @code{OCTAVE_LOCAL_BUFFER} macro.
 
 The Octave unwind_protect mechanism (@ref{The @code{unwind_protect} Statement})
 can also be used in oct-files.  In conjunction with the exception
 handling of Octave, it is important to enforce that certain code is run
-to allow variables, etc to be restored even if an exception occurs.  An
+to allow variables, etc. to be restored even if an exception occurs.  An
 example of the use of this mechanism is
 
 @longexamplefile{unwinddemo.cc}
 
 As can be seen in the example
 
 @example
 @group
@@ -1289,17 +1289,17 @@ myfunc2()
 @end group
 @end example
 
 @noindent
 the behavior of the mex-file can be altered depending on the functions
 name.
 
 Allow the user should only include @code{mex.h} in their code, Octave
-declares additional functions, typedefs, etc, available to the user to
+declares additional functions, typedefs, etc., available to the user to
 write mex-files in the headers @code{mexproto.h} and @code{mxarray.h}.
 
 @node Working with Matrices and Arrays in Mex-Files
 @subsection Working with Matrices and Arrays in Mex-Files
 
 The basic mex type of all variables is @code{mxArray}.  All variables,
 such as matrices, cell arrays or structures are all stored in this basic
 type, and this type serves basically the same purpose as the
@@ -1331,24 +1331,24 @@ UINT32_T *pr;
 dims = (mwSize *) mxMalloc (2 * sizeof(mwSize));
 dims[0] = 2;
 dims[1] = 2;
 m = mxCreateNumericArray (2, dims, mxUINT32_CLASS, mxREAL);
 pr =  = (UINT32_T *) mxGetData (m);
 @end group
 @end example
 
-There are also the functions @code{mxSetPr}, etc, that perform the
+There are also the functions @code{mxSetPr}, etc., that perform the
 inverse, and set the data of an Array to use the block of memory pointed
 to by the argument of @code{mxSetPr}.
 
 Note the type @code{mwSize} used above, and @code{mwIndex} are defined
 as the native precision of the indexing in Octave on the platform on
-which the mex-file is built. This allows both 32- and 64-bit platforms
-to support mex-files. @code{mwSize} is used to define array dimension
+which the mex-file is built.  This allows both 32- and 64-bit platforms
+to support mex-files.  @code{mwSize} is used to define array dimension
 and maximum number or elements, while @code{mwIndex} is used to define
 indexing into arrays.
 
 An example that demonstration how to work with arbitrary real or complex
 double precision arrays is given by the file @file{mypow2.c} as given
 below.
 
 @longexamplefile{mypow2.c}
@@ -1422,17 +1422,17 @@ b1 =  1
 b2 =
 
    1   2
 
 b3 = test
 @end group
 @end example
 
-Note in the example the use of the @code{mxDuplicateArry} function.  This
+Note in the example the use of the @code{mxDuplicateArray} function.  This
 is needed as the @code{mxArray} pointer returned by @code{mxGetCell}
 might be deallocated.  The inverse function to @code{mxGetCell} is
 @code{mcSetCell} and is defined as
 
 @example
 void mxSetCell (mxArray *ptr, int idx, mxArray *val);
 @end example
 
@@ -1635,21 +1635,21 @@ command like
 Hello Octave world!
   11 12
   21 22
 $
 @end group
 @end example
 
 Note that the application @code{hello} will be dynamically linked
-against the octave libraries and any octave support libraries. The above
-allows the Octave math libraries to be used by an application. It does
+against the octave libraries and any octave support libraries.  The above
+allows the Octave math libraries to be used by an application.  It does
 not however allow the script files, oct-files or builtin functions of
-Octave to be used by the application. To do that the Octave interpreter
-needs to be initialized first. An example of how to do this can then be
+Octave to be used by the application.  To do that the Octave interpreter
+needs to be initialized first.  An example of how to do this can then be
 seen in the code
 
 @examplefile{embedded.cc}
 
 @noindent
 which is compiled and run as before as a standalone application with
 
 @example
diff --git a/doc/interpreter/testfun.txi b/doc/interpreter/testfun.txi
--- a/doc/interpreter/testfun.txi
+++ b/doc/interpreter/testfun.txi
@@ -30,18 +30,18 @@ and demonstration code in the source cod
 @end menu
 
 @node Test Functions
 @section Test Functions
 
 @DOCSTRING(test)
 
 @code{test} scans the named script file looking for lines which
-start with @code{%!}. The prefix is stripped off and the rest of the
-line is processed through the Octave interpreter. If the code
+start with @code{%!}.  The prefix is stripped off and the rest of the
+line is processed through the Octave interpreter.  If the code
 generates an error, then the test is said to fail.
 
 Since @code{eval()} will stop at the first error it encounters, you must
 divide your tests up into blocks, with anything in a separate
 block evaluated separately.  Blocks are introduced by the keyword
 @code{test} immediately following the @code{%!}.  For example,
 
 @example
@@ -86,17 +86,17 @@ with @code{assert} the previous test is 
 @group
    %!test
    %! @var{a} = [1, 2, 3; 4, 5, 6]; @var{b} = [1; 2];
    %! assert (kron (@var{b}, @var{a}), [ @var{a}; 2*@var{a} ]);
 @end group
 @end example
 
 @code{assert} can accept a tolerance so that you can compare results
-absolutely or relatively. For example, the following all succeed:
+absolutely or relatively.  For example, the following all succeed:
 
 @example
 @group
    %!test assert (1+eps, 1, 2*eps)          # absolute error
    %!test assert (100+100*eps, 100, -2*eps) # relative error
 @end group
 @end example
 
@@ -125,18 +125,20 @@ which is equivalent to:
 
 Sometimes during development there is a test that should work but is
 known to fail.  You still want to leave the test in because when the
 final code is ready the test should pass, but you may not be able to
 fix it immediately.  To avoid unnecessary bug reports for these known
 failures, mark the block with @code{xtest} rather than @code{test}:
 
 @example
+@group
    %!xtest assert (1==0)
    %!xtest fail ('success=1','error'))
+@end group
 @end example
 
 Another use of @code{xtest} is for statistical tests which should
 pass most of the time but are known to fail occasionally.
 
 Each block is evaluated in its own function environment, which means
 that variables defined in one block are not automatically shared
 with other blocks.  If you do want to share variables, then you
@@ -177,17 +179,17 @@ Error and warning blocks are like test b
 if the code generates an error.  You can check the text of the error
 is correct using an optional regular expression @code{<pattern>}.  
 For example:
 
 @example
    %!error <passes!> error('this test passes!');
 @end example
 
-If the code doesn't generate an error, the test fails. For example,
+If the code doesn't generate an error, the test fails.  For example,
 
 @example
    %!error "this is an error because it succeeds.";
 @end example
 
 produces
 
 @example
@@ -195,18 +197,18 @@ produces
    ***** error "this is an error because it succeeds.";
    !!!!! test failed: no error
 @end group
 @end example
 
 It is important to automate the tests as much as possible, however
 some tests require user interaction.  These can be isolated into
 demo blocks, which if you are in batch mode, are only run when 
-called with @code{demo} or @code{verbose}. The code is displayed before
-it is executed. For example,
+called with @code{demo} or @code{verbose}.  The code is displayed before
+it is executed.  For example,
 
 @example
 @group
    %!demo
    %! @var{t}=[0:0.01:2*pi]; @var{x}=sin(@var{t});
    %! plot(@var{t},@var{x});
    %! you should now see a sine wave in your figure window
 @end group
@@ -256,17 +258,17 @@ comment: ignore everything within the bl
 declares variables for use in multiple tests
 @item %!function
 defines a function value for a shared variable
 @item %!assert (x, y, tol)
 shorthand for %!test assert (x, y, tol)
 @end table
 
 You can also create test scripts for builtins and your own C++
-functions. Just put a file of the function name on your path without
+functions.  Just put a file of the function name on your path without
 any extension and it will be picked up by the test procedure.  You
 can even embed tests directly in your C++ code:
 
 @example
 @group
    #if 0
    %!test disp('this is a test')
    #endif
diff --git a/doc/interpreter/tips.txi b/doc/interpreter/tips.txi
--- a/doc/interpreter/tips.txi
+++ b/doc/interpreter/tips.txi
@@ -284,19 +284,19 @@ Just about every Octave function ought t
 @samp{Keywords} header comment lines.  Use the others if they are
 appropriate.  You can also put in header lines with other header
 names---they have no standard meanings, so they can't do any harm.
 
 @node Documentation Tips
 @section Tips for Documentation Strings
 
 As noted above, documentation is typically in a commented header block
-on an Octave function following the copyright statement. The help string
+on an Octave function following the copyright statement.  The help string
 shown above is an unformatted string and will be displayed as is by
-Octave. Here are some tips for the writing of documentation strings.
+Octave.  Here are some tips for the writing of documentation strings.
 
 @itemize @bullet
 @item
 Every command, function, or variable intended for users to know about
 should have a documentation string.
 
 @item
 An internal variable or subroutine of an Octave program might as well have
@@ -447,24 +447,24 @@ Text area for html only
 @@tex
 text for TeX only
 @@end tex
 @@end iftex
 @end group
 @end example
 
 Note that often TeX output can be used in html documents and so often
-the @code{@@ifhtml} blocks are unnecessary. If no specific output
+the @code{@@ifhtml} blocks are unnecessary.  If no specific output
 processor is chosen, by default, the text goes into all output
-processors. It is usual to have the above blocks in pairs to allow the
+processors.  It is usual to have the above blocks in pairs to allow the
 same information to be conveyed in all output formats, but with a
 different markup.
 
 Another important feature of Texinfo that is often used in Octave help
-strings is the @code{@@example} environment. An example of its use is
+strings is the @code{@@example} environment.  An example of its use is
 
 @example
 @group
 @@example
 @@group
 @@code@{2 * 2@}
 @@result@{@} 4
 @@end group
@@ -481,66 +481,66 @@ which produces
 @end group
 @end example
 
 The @code{@@group} block prevents the example from being split across a
 page boundary, while the @code{@@result@{@}} macro produces a right
 arrow signifying the result of a command. 
 
 In many cases a function has multiple ways in which it can be called,
-and the @code{@@deftypefnx} macro can be used to give alternatives. For
+and the @code{@@deftypefnx} macro can be used to give alternatives.  For
 example
 
 @example
 @group
 -*- texinfo -*-
 @@deftypefn@{Function File@} @{@@var@{a@} = @} fn (@@var@{x@}, @dots{})
 @@deftypefnx@{Function File@} @{@@var@{a@} = @} fn (@@var@{y@}, @dots{})
 Help text in Texinfo format.
 @@end deftypefn
 @end group
 @end example
 
 Many complete examples of Texinfo documentation can be taken from the
-help strings for the Octave functions themselves. A relatively complete
-example of which is the @code{nchoosek} function. The Texinfo
+help strings for the Octave functions themselves.  A relatively complete
+example of which is the @code{nchoosek} function.  The Texinfo
 documentation string of @code{nchoosek} is
 
 @example
 @group
 -*- texinfo -*-
 @@deftypefn @{Function File@} @{@} nchoosek (@@var@{n@}, @@var@{k@})
 
 Compute the binomial coefficient or all combinations of 
-@@var@{n@}. If @@var@{n@} is a scalar then, calculate the
+@@var@{n@}.  If @@var@{n@} is a scalar then, calculate the
 binomial coefficient of @@var@{n@} and @@var@{k@}, defined as
 
 @@iftex
 @@tex
 $$
  @{n \choose k@} = @{n (n-1) (n-2) \cdots (n-k+1) \over k!@}
 $$
 @@end tex
 @@end iftex
 @@ifinfo
 
 @@example
 @@group
  /   \
- | n |    n (n-1) (n-2) ... (n-k+1)
+ | n |    n (n-1) (n-2) @dots{} (n-k+1)
  |   |  = -------------------------
  | k |               k!
  \   /
 @@end group
 @@end example
 @@end ifinfo
 
 If @@var@{n@} is a vector, this generates all combinations
 of the elements of @@var@{n@}, taken @@var@{k@} at a time,
-one row per combination. The resulting @@var@{c@} has size
+one row per combination.  The resulting @@var@{c@} has size
 @@code@{[nchoosek (length (@@var@{n@}),@@var@{k@}), @@var@{k@}]@}.
 
 @@seealso@{bincoeff@}
 @@end deftypefn
 @end group
 @end example
 
 which demonstrates most of the concepts discussed above.
@@ -553,24 +553,24 @@ This documentation string renders as
 @example
 @group
  -- Function File: C = nchoosek (N, K)
      Compute the binomial coefficient or all combinations
      of N.  If N is a scalar then, calculate the binomial
      coefficient of N and K, defined as
 
            /   \
-           | n |    n (n-1) (n-2) ... (n-k+1)       n!
+           | n |    n (n-1) (n-2) @dots{} (n-k+1)       n!
            |   |  = ------------------------- =  ---------
            | k |               k!                k! (n-k)!
            \   /
 
      If N is a vector generate all combinations of the
      elements of N, taken K at a time, one row per
-     combination. The resulting C has size `[nchoosek
+     combination.  The resulting C has size `[nchoosek
      (length (N), K), K]'.
 
 
      See also: bincoeff.
 @end group
 @end example
 
 using info, whereas in a printed documentation using TeX it will appear
@@ -584,16 +584,16 @@ of @var{n} and @var{k}, defined as
 
 @tex
 $$
  {n \choose k} = {n (n-1) (n-2) \cdots (n-k+1) \over k!}
 $$
 @end tex
 
 If @var{n} is a vector generate all combinations of the elements
-of @var{n}, taken @var{k} at a time, one row per combination. The 
+of @var{n}, taken @var{k} at a time, one row per combination.  The 
 resulting @var{c} has size @code{[nchoosek (length (@var{n}), 
 @var{k}), @var{k}]}.
 
 @seealso{bincoeff}
 @end deftypefn
 
 @end iftex
diff --git a/scripts/miscellaneous/mkoctfile.m b/scripts/miscellaneous/mkoctfile.m
--- a/scripts/miscellaneous/mkoctfile.m
+++ b/scripts/miscellaneous/mkoctfile.m
@@ -99,17 +99,17 @@
 ## @itemx --strip
 ## Strip the output file.
 ##
 ## @item -v
 ## @itemx --verbose
 ## Echo commands as they are executed.
 ##
 ## @item file
-## The file to compile or link.  Recognised file types are
+## The file to compile or link.  Recognized file types are
 ##
 ## @example
 ## @group
 ##                   .c    C source
 ##                   .cc   C++ source
 ##                   .C    C++ source
 ##                   .cpp  C++ source
 ##                   .f    Fortran source
