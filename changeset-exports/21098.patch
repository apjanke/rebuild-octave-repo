# HG changeset patch
# User Lachlan Andrew <lachlanbis@gmail.com>
# Date 1450228199 -39600
#      Wed Dec 16 12:09:59 2015 +1100
# Node ID 99d373870017255e86fc167251ef7a12c15484fb
# Parent  87b3348d8d76a4cbf63d2829750d3ebeb998756f
Fix assigning to trailing singletons for structs and cell (bug #39789, bug #35841)

* Array.cc (index (Array<idx_vector> ia, bool, T)):
Only return empty array if resized dimension mismatches ia.

* ov-struct.cc (subsasgn): Remove workaround for index(_,_,_) returning an
empty array for trailing singletons introduced to solve bug #35841.

* index.tst: Add tests for bug #35841, #39789.

diff --git a/libinterp/octave-value/ov-struct.cc b/libinterp/octave-value/ov-struct.cc
--- a/libinterp/octave-value/ov-struct.cc
+++ b/libinterp/octave-value/ov-struct.cc
@@ -312,20 +312,16 @@ octave_struct::subsasgn (const std::stri
                 std::string next_type = type.substr (2);
 
                 Cell tmpc (1, 1);
                 octave_map::iterator pkey = map.seek (key);
                 if (pkey != map.end ())
                   {
                     map.contents (pkey).make_unique ();
                     tmpc = map.contents (pkey).index (idx.front (), true);
-                    // See bug #35841, assigning to struct with trailing
-                    // singleton dimensions.
-                    if (tmpc.is_empty ())
-                      tmpc = Cell (1,1);
                   }
 
                 // FIXME: better code reuse?
                 //        cf. octave_cell::subsasgn and the case below.
                 if (tmpc.numel () == 1)
                   {
                     octave_value& tmp = tmpc(0);
 
@@ -450,18 +446,17 @@ octave_struct::subsasgn (const std::stri
                 retval = octave_value (this);
               }
             else
               {
                 const octave_map& cmap =
                   const_cast<const octave_map &> (map);
                 // cast to const reference, avoid forced key insertion.
                 if (idxf.all_scalars ()
-                    || cmap.contents (key).index (idxf, true).numel ()
-                    <= 1)
+                    || cmap.contents (key).index (idxf, true).numel () == 1)
                   {
                     map.assign (idxf,
                                 key, Cell (t_rhs.storable_value ()));
 
                     count++;
                     retval = octave_value (this);
                   }
                 else
diff --git a/liboctave/array/Array.cc b/liboctave/array/Array.cc
--- a/liboctave/array/Array.cc
+++ b/liboctave/array/Array.cc
@@ -1110,30 +1110,31 @@ Array<T>::index (const Array<idx_vector>
                  bool resize_ok, const T& rfv) const
 {
   Array<T> tmp = *this;
   if (resize_ok)
     {
       int ial = ia.numel ();
       dim_vector dv = dimensions.redim (ial);
       dim_vector dvx = dim_vector::alloc (ial);
-      for (int i = 0; i < ial; i++) dvx(i) = ia(i).extent (dv(i));
+      for (int i = 0; i < ial; i++)
+        dvx(i) = ia(i).extent (dv(i));
       if (! (dvx == dv))
         {
           bool all_scalars = true;
           for (int i = 0; i < ial; i++)
             all_scalars = all_scalars && ia(i).is_scalar ();
           if (all_scalars)
             return Array<T> (dim_vector (1, 1), rfv);
           else
             tmp.resize (dvx, rfv);
+
+          if (tmp.dimensions != dvx)
+            return Array<T> ();
         }
-
-      if (tmp.dimensions != dvx)
-        return Array<T> ();
     }
 
   return tmp.index (ia);
 }
 
 
 template <class T>
 void
diff --git a/test/index.tst b/test/index.tst
--- a/test/index.tst
+++ b/test/index.tst
@@ -571,8 +571,18 @@
 %!shared abc, z
 %! abc = [1 2];
 %!error <abc\(0\+1i\): subscripts must be real>     abc(i)
 %! abc = [1 2; 3 4];
 %!error <abc\(1\+0i\): subscripts must be real>     abc(complex(1))
 %!error <abc\(1\+0.5i,_\): subscripts must be real> abc(1+0.5*i,3)
 %!error <abc\(_,0-2i\): subscripts must be real>   abc(2,0-2*i)
 
+## bug #35841 
+%!test
+%! a(1,1,1).b(1) = 2;
+%! a(1,1,1).b(1) = 3;
+
+## bug #39789 
+%!test
+%! c = cell(1,1,1);
+%! c{1,1,1} = zeros(5, 2);
+%! c{1,1,1}(:, 1) = 1;
