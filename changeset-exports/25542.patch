# HG changeset patch
# User Mike Miller <mtmiller@octave.org>
# Date 1530559292 25200
#      Mon Jul 02 12:21:32 2018 -0700
# Branch stable
# Node ID e5208e98ab92c4ad079b7044ee95185ca144cd5c
# Parent  60e89abe0e611ab50280e9c4dab2c53e4a7f0bfa
fix ambiguous overload build error on Solaris (bug #54217)

* __betainc__.cc (F__betainc__): Use octave::math::exp2 instead of pow.
* __gammainc__.cc (F__gammainc__): Likewise.
* __expint__.cc (F__expint__): Likewise.  Drop unnecessary call to floor
with integer arithmetic.

diff --git a/libinterp/corefcn/__betainc__.cc b/libinterp/corefcn/__betainc__.cc
--- a/libinterp/corefcn/__betainc__.cc
+++ b/libinterp/corefcn/__betainc__.cc
@@ -72,17 +72,17 @@ Continued fraction for incomplete beta f
         a = args(1).float_array_value ();
 
       if (numel_b == 1)
         b = FloatNDArray (output_dv, args(2).float_scalar_value ());
       else
         b = args(2).float_array_value ();
 
       // Initialize variables used in algorithm
-      static const float tiny = pow (2, -50);
+      static const float tiny = octave::math::exp2 (-50.0f);
       static const float eps = std::numeric_limits<float>::epsilon ();
       float xj, x2, y, Cj, Dj, aj, bj, Deltaj, alpha_j, beta_j;
       int j, maxit;
       maxit = 200;
 
       // Loop over all elements
       for (octave_idx_type i = 0; i < len; ++i)
         {
@@ -143,17 +143,17 @@ Continued fraction for incomplete beta f
         a = args(1).array_value ();
 
       if (numel_b == 1)
         b = NDArray (output_dv, args(2).scalar_value ());
       else
         b = args(2).array_value ();
 
       // Initialize variables used in algorithm
-      static const double tiny = pow (2, -100);
+      static const double tiny = octave::math::exp2 (-100.0);
       static const double eps = std::numeric_limits<double>::epsilon ();
       double xj, x2, y, Cj, Dj, aj, bj, Deltaj, alpha_j, beta_j;
       int j, maxit;
       maxit = 200;
 
       // Loop over all elements
       for (octave_idx_type i = 0; i < len; ++i)
         {
diff --git a/libinterp/corefcn/__expint__.cc b/libinterp/corefcn/__expint__.cc
--- a/libinterp/corefcn/__expint__.cc
+++ b/libinterp/corefcn/__expint__.cc
@@ -56,17 +56,17 @@ Continued fraction expansion for the exp
       FloatComplexNDArray x;
 
       if (numel_x == 1)
         x = FloatComplexNDArray (output_dv, args(0).float_complex_value ());
       else
         x = args(0).float_complex_array_value ();
 
       // Initialize variables used in algorithm
-      static const FloatComplex tiny = pow (2, -50);
+      static const FloatComplex tiny = octave::math::exp2 (-50.0f);
       static const float eps = std::numeric_limits<float>::epsilon ();
       const FloatComplex cone (1.0, 0.0);
       const FloatComplex czero (0.0, 0.0);
       const int maxit = 100;
 
       // Loop over all elements
       for (octave_idx_type i = 0; i < numel_x; ++i)
         {
@@ -90,17 +90,17 @@ Continued fraction expansion for the exp
               if (Dj == czero)
                 Dj = tiny;
               Cj = beta_j + alpha_j / Cj;
               if (Cj == czero)
                 Cj = tiny;
               Dj = cone / Dj;
               Deltaj = Cj * Dj;
               y *= Deltaj;
-              alpha_j = floor ((j + 1) / 2);
+              alpha_j = (j + 1) / 2;
               if ((j % 2) == 0)
                 beta_j = xj;
               else
                 beta_j = cone;
               j++;
             }
 
           output(i) = y;
@@ -114,17 +114,17 @@ Continued fraction expansion for the exp
       ComplexNDArray x;
 
       if (numel_x == 1)
         x = ComplexNDArray (output_dv, args(0).complex_value ());
       else
         x = args(0).complex_array_value ();
 
       // Initialize variables used in algorithm
-      static const Complex tiny = pow (2, -100);
+      static const Complex tiny = octave::math::exp2 (-100.0);
       static const double eps = std::numeric_limits<double>::epsilon ();
       const Complex cone (1.0, 0.0);
       const Complex czero (0.0, 0.0);
       const int maxit = 200;
 
       // Loop over all scenarios
       for (octave_idx_type i = 0; i < numel_x; ++i)
         {
@@ -148,17 +148,17 @@ Continued fraction expansion for the exp
               if (Dj == czero)
                 Dj = tiny;
               Cj = beta_j + alpha_j / Cj;
               if (Cj == czero)
                 Cj = tiny;
               Dj = cone / Dj;
               Deltaj = Cj * Dj;
               y *= Deltaj;
-              alpha_j = floor ((j + 1) / 2);
+              alpha_j = (j + 1) / 2;
               if ((j % 2) == 0)
                 beta_j = xj;
               else
                 beta_j = cone;
               j++;
             }
 
           output(i) = y;
diff --git a/libinterp/corefcn/__gammainc__.cc b/libinterp/corefcn/__gammainc__.cc
--- a/libinterp/corefcn/__gammainc__.cc
+++ b/libinterp/corefcn/__gammainc__.cc
@@ -64,17 +64,17 @@ Continued fraction for incomplete gamma 
         x = args(0).float_array_value ();
 
       if (numel_a == 1)
         a = FloatNDArray (output_dv, args(1).float_scalar_value ());
       else
         a = args(1).float_array_value ();
 
       // Initialize variables used in algorithm
-      static const float tiny = pow (2, -50);
+      static const float tiny = octave::math::exp2 (-50.0f);
       static const float eps = std::numeric_limits<float>::epsilon();
       float y, Cj, Dj, bj, aj, Deltaj;
       int j, maxit;
       maxit = 200;
 
       // Loop over all elements
       for (octave_idx_type i = 0; i < len; ++i)
         {
@@ -119,17 +119,17 @@ Continued fraction for incomplete gamma 
         x = args(0).array_value ();
 
       if (numel_a == 1)
         a = NDArray (output_dv, args(1).scalar_value ());
       else
         a = args(1).array_value ();
 
       // Initialize variables used in algorithm
-      static const double tiny = pow (2, -100);
+      static const double tiny = octave::math::exp2 (-100.0);
       static const double eps = std::numeric_limits<double>::epsilon();
       double y, Cj, Dj, bj, aj, Deltaj;
       int j, maxit;
       maxit = 200;
 
       // Loop over all elements
       for (octave_idx_type i = 0; i < len; ++i)
         {
