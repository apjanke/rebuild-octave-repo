# HG changeset patch
# User Rik <rik@octave.org>
# Date 1429588162 25200
#      Mon Apr 20 20:49:22 2015 -0700
# Node ID 82b4fb8b8a2822ef2d2ae1e6e546f118bcbd20f7
# Parent  5a47178626482b882f2c56eca2c028f1d7721e37
# Parent  248f2f2e7d4872466ee478b51debc63d56c8353d
maint: Merge away accidental head.

diff --git a/libgui/graphics/Canvas.cc b/libgui/graphics/Canvas.cc
--- a/libgui/graphics/Canvas.cc
+++ b/libgui/graphics/Canvas.cc
@@ -109,16 +109,21 @@ Canvas::print (const QString& file_cmd, 
   if (obj.valid_object ())
     {
       graphics_object figObj (obj.get_ancestor ("figure"));
 
       gl2ps_print (figObj, file_cmd.toStdString (), term.toStdString ());
     }
 }
 
+/*
+   Two updateCurrentPoint() routines are required:
+   1) Used for QMouseEvents where cursor position data is in callback from Qt.
+   2) Used for QKeyEvents where cursor position must be determined.
+*/
 void
 Canvas::updateCurrentPoint(const graphics_object& fig,
                            const graphics_object& obj, QMouseEvent* event)
 {
   gh_manager::auto_lock lock;
 
   gh_manager::post_set (fig.get_handle (), "currentpoint",
                         Utils::figureCurrentPoint (fig, event), false);
@@ -148,16 +153,56 @@ Canvas::updateCurrentPoint(const graphic
 
           gh_manager::post_set (childObj.get_handle (), "currentpoint", cp,
                                 false);
         }
     }
 }
 
 void
+Canvas::updateCurrentPoint(const graphics_object& fig,
+                           const graphics_object& obj)
+{
+  gh_manager::auto_lock lock;
+
+  gh_manager::post_set (fig.get_handle (), "currentpoint",
+                        Utils::figureCurrentPoint (fig), false);
+
+  Matrix children = obj.get_properties ().get_children ();
+  octave_idx_type num_children = children.numel ();
+
+  for (int i = 0; i < num_children; i++)
+    {
+      graphics_object childObj (gh_manager::get_object (children(i)));
+
+      if (childObj.isa ("axes"))
+        {
+          // FIXME: QCursor::pos() may give inaccurate results with asynchronous
+          //        window systems like X11 over ssh.
+          QWidget *w = qWidget ();
+          QPoint p = w->mapFromGlobal (QCursor::pos ());
+          axes::properties& ap = Utils::properties<axes> (childObj);
+          Matrix x_zlim = ap.get_transform_zlim ();
+          graphics_xform x_form = ap.get_transform ();
+
+          ColumnVector p1 = x_form.untransform (p.x (), p.y (), x_zlim(0));
+          ColumnVector p2 = x_form.untransform (p.x (), p.y (), x_zlim(1));
+
+          Matrix cp (2, 3, 0.0);
+
+          cp(0,0) = p1(0); cp(0,1) = p1(1); cp(0,2) = p1(2);
+          cp(1,0) = p2(0); cp(1,1) = p2(1); cp(1,2) = p2(2);
+
+          gh_manager::post_set (childObj.get_handle (), "currentpoint", cp,
+                                false);
+        }
+    }
+}
+
+void
 Canvas::annotation_callback (const octave_value_list& args)
 {
   Ffeval (ovl ("annotation").append (args));
 
   redraw ();
 }
   
 void
@@ -881,16 +926,26 @@ Canvas::canvasWheelEvent (QWheelEvent* e
     }
 }
 
 bool
 Canvas::canvasKeyPressEvent (QKeyEvent* event)
 {
   if (m_eventMask & KeyPress)
     {
+      gh_manager::auto_lock lock;
+      graphics_object obj = gh_manager::get_object (m_handle);
+
+      if (obj.valid_object ())
+        {
+          graphics_object figObj (obj.get_ancestor ("figure"));
+
+          updateCurrentPoint (figObj, obj);
+        }
+
       octave_scalar_map eventData = Utils::makeKeyEventStruct (event);
 
       gh_manager::post_set (m_handle, "currentcharacter",
                             eventData.getfield ("Character"), false);
       gh_manager::post_callback (m_handle, "keypressfcn", eventData);
 
       return true;
     }
diff --git a/libgui/graphics/Canvas.h b/libgui/graphics/Canvas.h
--- a/libgui/graphics/Canvas.h
+++ b/libgui/graphics/Canvas.h
@@ -97,16 +97,18 @@ protected:
   void canvasMousePressEvent (QMouseEvent* event);
   void canvasMouseReleaseEvent (QMouseEvent* event);
   void canvasWheelEvent (QWheelEvent* event);
   bool canvasKeyPressEvent (QKeyEvent* event);
   bool canvasKeyReleaseEvent (QKeyEvent* event);
 
   void updateCurrentPoint (const graphics_object& fig,
                            const graphics_object& obj, QMouseEvent *event);
+  void updateCurrentPoint (const graphics_object& fig,
+                           const graphics_object& obj);
 
   void annotation_callback (const octave_value_list& args);
 
 private:
   graphics_handle m_handle;
   bool m_redrawBlocked;
   MouseMode m_mouseMode;
   bool m_clickMode;              // True: ZoomIn, False: ZoomOut
diff --git a/libgui/graphics/QtHandlesUtils.cc b/libgui/graphics/QtHandlesUtils.cc
--- a/libgui/graphics/QtHandlesUtils.cc
+++ b/libgui/graphics/QtHandlesUtils.cc
@@ -188,32 +188,59 @@ figureSelectionType (QMouseEvent* event,
           else if (mods == Qt::ControlModifier)
             return std::string ("alt");
         }
     }
 
   return std::string ("normal");
 }
 
+/*
+   Two figureCurrentPoint() routines are required:
+   1) Used for QMouseEvents where cursor position data is in callback from Qt.
+   2) Used for QKeyEvents where cursor position must be determined.
+*/
 Matrix
 figureCurrentPoint (const graphics_object& fig, QMouseEvent* event)
 {
   Object* tkFig = Backend::toolkitObject (fig);
 
   if (tkFig)
     {
       Container* c = tkFig->innerContainer ();
 
       if (c)
         {
           QPoint qp = c->mapFromGlobal (event->globalPos ());
 
-          return
-            tkFig->properties<figure> ().map_from_boundingbox (qp.x (),
-                                                               qp.y ());
+          return tkFig->properties<figure> ().map_from_boundingbox (qp.x (),
+                                                                    qp.y ());
+        }
+    }
+
+  return Matrix (1, 2, 0.0);
+}
+
+Matrix
+figureCurrentPoint (const graphics_object& fig)
+{
+  Object* tkFig = Backend::toolkitObject (fig);
+
+  if (tkFig)
+    {
+      Container* c = tkFig->innerContainer ();
+
+      if (c)
+        {
+          // FIXME: QCursor::pos() may give inaccurate results with asynchronous
+          //        window systems like X11 over ssh.
+          QPoint qp = c->mapFromGlobal (QCursor::pos ());
+
+          return tkFig->properties<figure> ().map_from_boundingbox (qp.x (),
+                                                                    qp.y ());
         }
     }
 
   return Matrix (1, 2, 0.0);
 }
 
 Qt::Alignment
 fromHVAlign (const caseless_str& halign, const caseless_str& valign)
diff --git a/libgui/graphics/QtHandlesUtils.h b/libgui/graphics/QtHandlesUtils.h
--- a/libgui/graphics/QtHandlesUtils.h
+++ b/libgui/graphics/QtHandlesUtils.h
@@ -57,16 +57,17 @@ namespace Utils
 
   Qt::Alignment fromHVAlign (const caseless_str& halign,
                              const caseless_str& valign);
 
   std::string figureSelectionType (QMouseEvent* event,
                                    bool isDoubleClick = false);
 
   Matrix figureCurrentPoint (const graphics_object& fig, QMouseEvent* event);
+  Matrix figureCurrentPoint (const graphics_object& fig);
 
   template <class T>
   inline typename T::properties&
   properties (graphics_object obj)
     { return dynamic_cast<typename T::properties&> (obj.get_properties ()); }
 
   template <class T>
   inline typename T::properties&
