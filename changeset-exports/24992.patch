# HG changeset patch
# User Guillaume Flandin
# Date 1522084679 14400
#      Mon Mar 26 13:17:59 2018 -0400
# Branch stable
# Node ID 3d5a3907770869d25f96bb20ef4ef69f0eab2ddd
# Parent  831389905438d01f419282cd9025e10a6914b6a1
avoid some warnings from old versions of makeinfo (bug #53479)

* bicg.m, bicgstab.m, cgs.m, gmres.m, pcg.m, tfqmr.m:
Remove space between Texinfo macro name and argument list.

diff --git a/scripts/sparse/bicg.m b/scripts/sparse/bicg.m
--- a/scripts/sparse/bicg.m
+++ b/scripts/sparse/bicg.m
@@ -160,17 +160,17 @@
 ## @end example
 ##
 ## @sc{Example 6:} @code{bicg} with functions as preconditioners
 ##
 ## @example
 ## x = bicg (Afun, b, 1e-6, n, M1fun, M2fun)
 ## @end example
 ##
-## @sc{Example 7:} @code {bicg} with as input a function requiring an argument
+## @sc{Example 7:} @code{bicg} with as input a function requiring an argument
 ##
 ## @example
 ## @group
 ## function y = Ap (A, x, string, z) # compute A^z * x or (A^z)' * x
 ##    y = x;
 ##    if (strcmp (string, "notransp"))
 ##      for i = 1:z
 ##        y = A * y;
diff --git a/scripts/sparse/bicgstab.m b/scripts/sparse/bicgstab.m
--- a/scripts/sparse/bicgstab.m
+++ b/scripts/sparse/bicgstab.m
@@ -47,17 +47,17 @@
 ## @item @var{maxit} the maximum number of outer iterations, if not given or
 ## set to [] the default value @code{min (20, numel (b))} is used.
 ##
 ## @item @var{M1}, @var{M2} are the preconditioners.  The preconditioner
 ## @var{M} is given as @code{@var{M} = @var{M1} * @var{M2}}.
 ## Both @var{M1} and @var{M2} can be passed as a matrix or as a function
 ## handle or inline function @code{g} such that
 ## @code{g(@var{x}) = @var{M1} \ @var{x}} or
-## @code {g(@var{x}) = @var{M2} \ @var{x}}.
+## @code{g(@var{x}) = @var{M2} \ @var{x}}.
 ## The techinque used is the right preconditioning, i.e., it is
 ## solved @code{@var{A} * inv (@var{M}) * @var{y} = @var{b}} and then
 ## @code{@var{x} = inv (@var{M}) * @var{y}}.
 ##
 ## @item @var{x0} the initial guess, if not given or set to [] the default
 ## value @code{zeros (size (@var{b}))} is used.
 ##
 ## @end itemize
@@ -153,17 +153,17 @@
 ## @end example
 ##
 ## @sc{Example 6:} @code{bicgstab} with functions as preconditioners
 ##
 ## @example
 ## x = bicgstab (Afun, b, 1e-6, n, M1fun, M2fun)
 ## @end example
 ##
-## @sc{Example 7:} @code {bicgstab} with as input a function requiring
+## @sc{Example 7:} @code{bicgstab} with as input a function requiring
 ## an argument
 ##
 ## @example
 ## @group
 ## function y = Ap (A, x, z) # compute A^z * x
 ##    y = x;
 ##    for i = 1:z
 ##      y = A * y;
diff --git a/scripts/sparse/cgs.m b/scripts/sparse/cgs.m
--- a/scripts/sparse/cgs.m
+++ b/scripts/sparse/cgs.m
@@ -142,17 +142,17 @@
 ## @end example
 ##
 ## @sc{Example 6:} @code{cgs} with functions as preconditioners
 ##
 ## @example
 ## x = cgs (Afun, b, 1e-6, n, M1fun, M2fun)
 ## @end example
 ##
-## @sc{Example 7:} @code {cgs} with as input a function requiring an argument
+## @sc{Example 7:} @code{cgs} with as input a function requiring an argument
 ##
 ## @example
 ## @group
 ## function y = Ap (A, x, z) # compute A^z * x
 ##    y = x;
 ##    for i = 1:z
 ##      y = A * y;
 ##    endfor
diff --git a/scripts/sparse/gmres.m b/scripts/sparse/gmres.m
--- a/scripts/sparse/gmres.m
+++ b/scripts/sparse/gmres.m
@@ -185,17 +185,17 @@
 ## @end example
 ##
 ## @sc{Example 7:} @code{gmres} with functions as preconditioners
 ##
 ## @example
 ## x = gmres (Afun, b, 1e-6, n, M1fun, M2fun)
 ## @end example
 ##
-## @sc{Example 8:} @code {gmres} with as input a function requiring an argument
+## @sc{Example 8:} @code{gmres} with as input a function requiring an argument
 ##
 ## @example
 ## @group
 ##   function y = Ap (A, x, p) # compute A^p * x
 ##      y = x;
 ##      for i = 1:p
 ##        y = A * y;
 ##      endfor
diff --git a/scripts/sparse/pcg.m b/scripts/sparse/pcg.m
--- a/scripts/sparse/pcg.m
+++ b/scripts/sparse/pcg.m
@@ -48,17 +48,17 @@
 ## If @var{tol} is omitted or empty, then a tolerance of 1e-6 is used.
 ##
 ## @item
 ## @var{maxit} is the maximum allowed number of iterations; if @var{maxit}
 ## is omitted or empty then a value of 20 is used.
 ##
 ## @item
 ## @var{m} is a HPD preconditioning matrix.  For any decomposition
-## @code{@var{m} = @var{p1} * @var {p2}} such that
+## @code{@var{m} = @var{p1} * @var{p2}} such that
 ## @w{@code{inv (@var{p1}) * @var{A} * inv (@var{p2})}} is HPD, the
 ## conjugate gradient method is formally applied to the linear system
 ## @w{@code{inv (@var{p1}) * @var{A} * inv (@var{p2}) * @var{y} = inv
 ## (@var{p1}) * @var{b}}},
 ## with @code{@var{x} = inv (@var{p2}) * @var{y}} (split preconditioning).
 ## In practice, at each iteration of the conjugate gradient method a
 ## linear system with matrix @var{m} is solved with @code{mldivide}.
 ## If a particular factorization
diff --git a/scripts/sparse/tfqmr.m b/scripts/sparse/tfqmr.m
--- a/scripts/sparse/tfqmr.m
+++ b/scripts/sparse/tfqmr.m
@@ -43,17 +43,17 @@
 ## number is odd or even, is considered as iteration in @code{tfqmr} the
 ## entire odd-even cycle.  That is, to make an entire iteration, the algorithm
 ## performs two sub-iterations: the odd one and the even one.
 ##
 ## @item @var{M1}, @var{M2} are the preconditioners.  The preconditioner
 ## @var{M} is given as @code{M = M1 * M2}.
 ## Both @var{M1} and @var{M2} can be passed as a matrix or as a function
 ## handle or inline function @code{g} such that @code{g(x) = M1 \ x} or
-## @code {g(x) = M2 \ x}.
+## @code{g(x) = M2 \ x}.
 ## The technique used is the rigth-preconditioning, i.e., it is solved
 ## @code{A*inv(M)*y = b} and then @code{x = inv(M)*y}, instead of
 ## @code{A x = b}.
 ##
 ## @item @var{x0} the initial guess, if not given or set to [] the default
 ## value @code{zeros (size (b))} is used.
 ##
 ## @end itemize
