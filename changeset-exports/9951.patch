# HG changeset patch
# User Shai Ayal <shaiay@users.sourceforge.net>
# Date 1260391778 18000
#      Wed Dec 09 15:49:38 2009 -0500
# Node ID d64d15e12e6bfdbcb030b296dc8f805bd549918e
# Parent  7dedfd70dd9f45031dd7ef845c8059f8045202b3
print immediately in fltk backend

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,16 @@
+2009-12-09  John W. Eaton  <jwe@octave.org>
+
+	* DLD-FUNCTIONS/fltk_backend.cc: Style fixes.
+
+2009-12-09  Shai Ayal  <shaiay@users.sourceforge.net>
+
+	* DLD-FUNCTIONS/fltk_backend.cc (plot_window::print): Print immediatly.
+
 2009-12-09  John W. Eaton  <jwe@octave.org>
 
 	* gl2ps-renderer.cc (draw_pixels): New template function.
 	(opengl_renderer::draw_pixels): Use it.
 
 2009-12-09  Shai Ayal  <shaiay@users.sourceforge.net>
 
 	* gl2ps.c, gl2ps.h: Use upstream version gl2ps-1.3.5-svn-20091202.
diff --git a/src/DLD-FUNCTIONS/fltk_backend.cc b/src/DLD-FUNCTIONS/fltk_backend.cc
--- a/src/DLD-FUNCTIONS/fltk_backend.cc
+++ b/src/DLD-FUNCTIONS/fltk_backend.cc
@@ -62,16 +62,19 @@ To initialize:
 #include "gl-render.h"
 #include "gl2ps-renderer.h"
 #include "graphics.h"
 #include "parse.h"
 #include "variables.h"
 
 #define FLTK_BACKEND_NAME "fltk"
 
+// Give FLTK no more than 0.01 sec to do its stuff.
+static double fltk_maxtime = 1e-2;
+
 const char* help_text = "\
 Keyboard Shortcuts\n\
 a - autoscale\n\
 g - toggle grid\n\
 \n\
 Mouse\n\
 left drag - pan\n\
 mouse wheel - zoom\n\
@@ -82,17 +85,17 @@ left double click - autoscale\n\
 
 class OpenGL_fltk : public Fl_Gl_Window
 {
 public:
   OpenGL_fltk (int xx, int yy, int ww, int hh, double num)
     : Fl_Gl_Window (xx, yy, ww, hh, 0), number (num), in_zoom (false),
       print_filename ("")
   {
-    // ask for double buffering and a depth buffer
+    // Ask for double buffering and a depth buffer.
     mode (FL_DEPTH | FL_DOUBLE);
   }
 
   ~OpenGL_fltk (void) { }
 
   void zoom (bool z) 
   {
     in_zoom = z;
@@ -207,17 +210,17 @@ private:
 	window ()->cursor (FL_CURSOR_DEFAULT);
 	return 1;
       }
 
     return retval;
   }
 };
 
-// Parameter controlling how fast we zoom when using the scrool wheel
+// Parameter controlling how fast we zoom when using the scrool wheel.
 static double wheel_zoom_speed = 0.05;
 
 class plot_window : public Fl_Window
 {
 public:
   plot_window (int _x, int _y, int _w, int _h, figure::properties& _fp)
     : Fl_Window (_x, _y, _w, _h, "octave"), fp (_fp)
   {
@@ -259,17 +262,17 @@ public:
 		   status_h, "");
 
       status->textcolor (FL_BLACK);
       status->color (FL_GRAY);
       status->textfont (FL_COURIER);
       status->textsize (10);
       status->box (FL_ENGRAVED_BOX);
 
-      //This allows us to have a valid OpenGL context right away
+      // This allows us to have a valid OpenGL context right away.
       canvas->mode (FL_DEPTH | FL_DOUBLE );
       show ();
       canvas->show ();
       canvas->make_current ();
     }
     end ();
 
     status->show ();
@@ -288,46 +291,52 @@ public:
   {
     canvas->hide ();
     status->hide ();
     this->hide ();
     delete canvas;
     delete status;
   }
 
-  // FIXME -- this could change
+  // FIXME -- this could change.
   double number (void) { return fp.get___myhandle__ ().value (); }
 
   void print (const std::string& fname)
   {
     canvas->print (fname);
+
+    // Print immediately so the output file will exist when the drawnow
+    // command is done.
+    mark_modified ();
+    Fl::wait (fltk_maxtime);
   }
 
   void mark_modified (void)
   {
     damage (FL_DAMAGE_ALL);
     canvas->damage (FL_DAMAGE_ALL);
   }
 
 private:
-  // figure properties
+
+  // Figure properties.
   figure::properties& fp;
 
-  // status area height
+  // Status area height.
   static const int status_h = 20;
 
-  // window callback
+  // Window callback.
   static void window_close (Fl_Widget*, void* data)
   {
     octave_value_list args;
     args(0) = static_cast<plot_window*> (data)->number ();
     feval ("close", args);
   }
 
-  // button callbacks
+  // Button callbacks.
   static void button_callback (Fl_Widget* ww, void* data)
   {
     static_cast<plot_window*> (data)->button_press (ww);
   }
 
   void button_press (Fl_Widget* widg)
   {
     if (widg == autoscale)
@@ -455,17 +464,17 @@ private:
   int handle (int event)
   {
     static int px0,py0;
     static graphics_object ax0;
 
 
     int retval = Fl_Window::handle (event);
 
-    // we only handle events which are in the canvas area
+    // We only handle events which are in the canvas area.
     if (Fl::event_y () >= h() - status_h)
       return retval;
 
     switch (event)
       {
       case FL_KEYDOWN:
 	switch(Fl::event_key ())
 	  {
@@ -535,21 +544,21 @@ private:
 	  graphics_object ax = 
 	    gh_manager::get_object (pixel2axes_or_ca (Fl::event_x (), 
 						      Fl::event_y ()));                                                                      
           if (ax && ax.isa ("axes"))
             {
               axes::properties& ap = 
 		dynamic_cast<axes::properties&> (ax.get_properties ());
               
-              // Determine if we're zooming in or out
+              // Determine if we're zooming in or out.
               const double factor = 
 		(Fl::event_dy () > 0) ? 1.0 + wheel_zoom_speed : 1.0 - wheel_zoom_speed;
               
-              // Get the point we're zooming about
+              // Get the point we're zooming about.
               double x1, y1;
               pixel2pos (ax, Fl::event_x (), Fl::event_y (), x1, y1);
               
               ap.zoom_about_point (x1, y1, factor, false);
               mark_modified ();
             }
 	}
       return 1;
@@ -567,17 +576,17 @@ private:
 		    ap.set_ylimmode("auto");
 		    ap.set_zlimmode("auto");
 		    mark_modified ();
 		  }
 	      }
 	  }
 	if (Fl::event_button () == 3)
 	  {
-	    // end of drag -- zoom
+	    // End of drag -- zoom.
 	    if (canvas->zoom ())
 	      {
 		canvas->zoom (false);
 		double x0,y0,x1,y1;
 		if (ax0 && ax0.isa ("axes"))
 		  {
 		    axes::properties& ap =
 		      dynamic_cast<axes::properties&> (ax0.get_properties ());
@@ -698,17 +707,17 @@ private:
   static figure_manager *instance;
 
   figure_manager (void) { }
 
   // No copying!
   figure_manager (const figure_manager&);
   figure_manager& operator = (const figure_manager&);
 
-  // singelton -- hide all of the above
+  // Singelton -- hide all of the above.
 
   static int curr_index;
   typedef std::map<int, plot_window*> window_map;
   typedef window_map::iterator wm_iterator;;
   window_map windows;
 
   static std::string fltk_idx_header;
 
@@ -838,18 +847,16 @@ private:
 };
 
 figure_manager *figure_manager::instance = 0;
 
 std::string figure_manager::fltk_idx_header="fltk index=";
 int figure_manager::curr_index = 1;
 
 static bool backend_registered = false;
-// give FLTK no more than 0.01 sec to do it's stuff
-static double fltk_maxtime = 1e-2;
 
 static int
 __fltk_redraw__ (void)
 {
   if (backend_registered)
     {
       // we scan all figures and add those which use FLTK as a backend
       graphics_object obj = gh_manager::get_object (0);
@@ -931,17 +938,17 @@ public:
 
   Matrix get_canvas_size (const graphics_handle& fh) const
   {
     return figure_manager::get_size (fh);
   }
 
   double get_screen_resolution (void) const
   {
-    // FLTK doesn't give this info
+    // FLTK doesn't give this info.
     return 72.0;
   }
 
   Matrix get_screen_size (void) const
   {
     Matrix sz (1, 2, 0.0);
     sz(0) = Fl::w ();
     sz(1) = Fl::h ();
@@ -951,17 +958,18 @@ public:
 
 DEFUN_DLD (__fltk_redraw__, , , "")
 {
   __fltk_redraw__ ();
 
   return octave_value ();
 }
 
-// call this to init the fltk backend
+// Initialize the fltk backend.
+
 DEFUN_DLD (__init_fltk__, , , "")
 {
   if (! backend_registered)
     {
       mlock ();
 
       graphics_backend::register_backend (new fltk_backend);
       backend_registered = true;
@@ -971,17 +979,18 @@ DEFUN_DLD (__init_fltk__, , , "")
       feval ("add_input_event_hook", args, 0);
     }
 
   octave_value retval;
   return retval;
 }
 
 
-// call this to delete the fltk backend
+// Delete the fltk backend.
+
 DEFUN_DLD (__remove_fltk__, , , "")
 {
   if (backend_registered)
     {
       munlock ("__init_fltk__");
 
       figure_manager::close_all ();
       graphics_backend::unregister_backend (FLTK_BACKEND_NAME);
@@ -1002,40 +1011,40 @@ DEFUN_DLD (__remove_fltk__, , , "")
 
 DEFUN_DLD (__fltk_maxtime__, args, ,"")
 {
   octave_value retval = fltk_maxtime;
 
   if (args.length () == 1)
     {
       if (args(0).is_real_scalar ())
-      fltk_maxtime = args(0).double_value ();
-    else
-      error ("argument must be a real scalar");
+        fltk_maxtime = args(0).double_value ();
+      else
+        error ("argument must be a real scalar");
     }
 
   return retval;
 }
 
 DEFUN_DLD (fltk_mouse_wheel_zoom, args, ,
-"-*- texinfo -*-\n\
+  "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} fltk_mouse_wheel_zoom ([@var{speed}])\n\
 Returns the current mouse wheel zoom factor in the fltk backend.  If\n\
 the @var{speed} argument is given, set the mouse zoom factor to this\n\
 value.\n\
 @end deftypefn")
 {
   octave_value retval = wheel_zoom_speed;
 
   if (args.length () == 1)
     {
       if (args(0).is_real_scalar ())
-      wheel_zoom_speed = args(0).double_value ();
-    else
-      error ("argument must be a real scalar");
+        wheel_zoom_speed = args(0).double_value ();
+      else
+        error ("argument must be a real scalar");
     }
 
   return retval;
 }
 
 #endif
 
 /*
