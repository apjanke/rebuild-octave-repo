# HG changeset patch
# User Jacob Dawid <jacob.dawid@googlemail.com>
# Date 1303071122 -7200
#      Sun Apr 17 22:12:02 2011 +0200
# Node ID 3542af417878c768c1039674e1257f04205e2ec1
# Parent  661f66fb26a7365e422c39a02b8abb8d4d7b5b18
Added buttons to load, save and clear the workspace. Double-clicking an item in the history list will now send the command to the console.

diff --git a/gui//src/HistoryDockWidget.cpp b/gui//src/HistoryDockWidget.cpp
--- a/gui//src/HistoryDockWidget.cpp
+++ b/gui//src/HistoryDockWidget.cpp
@@ -20,35 +20,42 @@
 #include <QHBoxLayout>
 
 HistoryDockWidget::HistoryDockWidget(QWidget *parent)
     : QDockWidget(parent) {
     setObjectName("HistoryDockWidget");
     construct();
 }
 
+void HistoryDockWidget::handleListViewItemDoubleClicked(QModelIndex modelIndex) {
+    QString command = m_historyListModel->data(modelIndex, 0).toString();
+    emit commandDoubleClicked(command);
+}
+
 void HistoryDockWidget::construct() {
     m_historyListModel = new QStringListModel();
     m_historyListView = new QListView(this);
     m_historyListView->setModel(m_historyListModel);
     m_historyListView->setAlternatingRowColors(true);
-
+    m_historyListView->setEditTriggers(QAbstractItemView::NoEditTriggers);
     QHBoxLayout *layout = new QHBoxLayout();
 
     setWindowTitle("Command History");
     setWidget(new QWidget());
 
     layout->addWidget(m_historyListView);
     layout->setMargin(2);
 
     widget()->setLayout(layout);
+    connect(m_historyListView, SIGNAL(doubleClicked(QModelIndex)), this, SLOT(handleListViewItemDoubleClicked(QModelIndex)));
 }
 
 void HistoryDockWidget::updateHistory(string_vector historyEntries) {
     QStringList stringList = m_historyListModel->stringList();
     for(size_t i = 0; i < historyEntries.length(); i++) {
         QString command(historyEntries[i].c_str());
-        if(!command.startsWith("#"))
-            stringList.push_front(QString("%1: ").arg(stringList.size() + 1) + command);
+        if(!command.startsWith("#")) {
+            stringList.push_front(command);
+        }
     }
     m_historyListModel->setStringList(stringList);
     emit information("History updated.");
 }
diff --git a/gui//src/HistoryDockWidget.h b/gui//src/HistoryDockWidget.h
--- a/gui//src/HistoryDockWidget.h
+++ b/gui//src/HistoryDockWidget.h
@@ -36,16 +36,20 @@
 class HistoryDockWidget : public QDockWidget {
     Q_OBJECT
 public:
     HistoryDockWidget(QWidget *parent = 0);
     void updateHistory(string_vector historyEntries);
 
 signals:
     void information(QString message);
+    void commandDoubleClicked(QString command);
+
+private slots:
+    void handleListViewItemDoubleClicked(QModelIndex modelIndex);
 
 private:
     void construct();
     QListView *m_historyListView;
     QStringListModel *m_historyListModel;
 };
 
 #endif // HISTORYDOCKWIDGET_H
diff --git a/gui//src/MainWindow.cpp b/gui//src/MainWindow.cpp
--- a/gui//src/MainWindow.cpp
+++ b/gui//src/MainWindow.cpp
@@ -57,16 +57,32 @@ void MainWindow::handleOpenFileRequest(Q
 void MainWindow::reportStatusMessage(QString statusMessage) {
     m_statusBar->showMessage(statusMessage, 1000);
 }
 
 void MainWindow::openWebPage(QString url) {
     m_browserWidget->load(QUrl(url));
 }
 
+void MainWindow::handleSaveWorkspaceRequest() {
+    // TODO: Handle saving of workspace.
+}
+
+void MainWindow::handleLoadWorkspaceRequest() {
+    // TODO: Handle loading of workspace.
+}
+
+void MainWindow::handleClearWorkspaceRequest() {
+    // TODO: Handle clearing of workspace.
+}
+
+void MainWindow::handleCommandDoubleClicked(QString command) {
+    m_octaveTerminal->sendText(command);
+}
+
 void MainWindow::closeEvent(QCloseEvent *closeEvent) {
     m_isRunning = false;
     reportStatusMessage("Saving data and shutting down.");
     writeSettings();
 
     m_octaveCallbackThread->terminate();
     m_octaveCallbackThread->wait();
 
@@ -118,16 +134,20 @@ void MainWindow::constructWindow() {
     addDockWidget(Qt::LeftDockWidgetArea, m_historyDockWidget);
     addDockWidget(Qt::RightDockWidgetArea, m_filesDockWidget);
     setStatusBar(m_statusBar);
 
     readSettings();
 
     connect(m_filesDockWidget, SIGNAL(openFile(QString)), this, SLOT(handleOpenFileRequest(QString)));
     connect(m_historyDockWidget, SIGNAL(information(QString)), this, SLOT(reportStatusMessage(QString)));
+    connect(m_historyDockWidget, SIGNAL(commandDoubleClicked(QString)), this, SLOT(handleCommandDoubleClicked(QString)));
+    connect(m_variablesDockWidget, SIGNAL(saveWorkspace()), this, SLOT(handleSaveWorkspaceRequest()));
+    connect(m_variablesDockWidget, SIGNAL(loadWorkspace()), this, SLOT(handleLoadWorkspaceRequest()));
+    connect(m_variablesDockWidget, SIGNAL(clearWorkspace()), this, SLOT(handleClearWorkspaceRequest()));
 
     openWebPage("http://www.gnu.org/software/octave/doc/interpreter/");
     m_serviceWidget->load(QUrl("http://savannah.gnu.org/bugs/?group=octave"));
 }
 
 void MainWindow::establishOctaveLink() {
     m_octaveMainThread = new OctaveMainThread(this);
     m_octaveMainThread->start();
diff --git a/gui//src/MainWindow.h b/gui//src/MainWindow.h
--- a/gui//src/MainWindow.h
+++ b/gui//src/MainWindow.h
@@ -95,16 +95,20 @@ public:
     VariablesDockWidget *variablesDockWidget() { return m_variablesDockWidget; }
     HistoryDockWidget *historyDockWidget() { return m_historyDockWidget; }
     FilesDockWidget *filesDockWidget() { return m_filesDockWidget; }
 
 public slots:
     void handleOpenFileRequest(QString fileName);
     void reportStatusMessage(QString statusMessage);
     void openWebPage(QString url);
+    void handleSaveWorkspaceRequest();
+    void handleLoadWorkspaceRequest();
+    void handleClearWorkspaceRequest();
+    void handleCommandDoubleClicked(QString command);
 
 protected:
     void closeEvent(QCloseEvent *closeEvent);
     void readSettings();
     void writeSettings();
 
 private:
     void constructWindow();
diff --git a/gui//src/VariablesDockWidget.cpp b/gui//src/VariablesDockWidget.cpp
--- a/gui//src/VariablesDockWidget.cpp
+++ b/gui//src/VariablesDockWidget.cpp
@@ -1,34 +1,52 @@
 #include "VariablesDockWidget.h"
 #include <QHBoxLayout>
+#include <QVBoxLayout>
+#include <QPushButton>
 
 VariablesDockWidget::VariablesDockWidget(QWidget *parent)
     : QDockWidget(parent) {
     setObjectName("VariablesDockWidget");
     construct();
 }
 
 void VariablesDockWidget::construct() {
     m_updateSemaphore = new QSemaphore(1);
     QStringList headerLabels;
     headerLabels << "Name" << "Type" << "Value";
     m_variablesTreeWidget = new QTreeWidget(this);
     m_variablesTreeWidget->setHeaderHidden(false);
     m_variablesTreeWidget->setHeaderLabels(headerLabels);
-    QHBoxLayout *layout = new QHBoxLayout();
+    QVBoxLayout *layout = new QVBoxLayout();
 
     setWindowTitle("Workspace");
     setWidget(new QWidget());
 
     layout->addWidget(m_variablesTreeWidget);
-    layout->setMargin(2);
+    QWidget *buttonBar = new QWidget(this);
+    layout->addWidget(buttonBar);
 
+        QHBoxLayout *buttonBarLayout = new QHBoxLayout();
+        QPushButton *saveWorkspaceButton = new QPushButton("Save", buttonBar);
+        QPushButton *loadWorkspaceButton = new QPushButton("Load", buttonBar);
+        QPushButton *clearWorkspaceButton = new QPushButton("Clear", buttonBar);
+        buttonBarLayout->addWidget(saveWorkspaceButton);
+        buttonBarLayout->addWidget(loadWorkspaceButton);
+        buttonBarLayout->addWidget(clearWorkspaceButton);
+        buttonBarLayout->setMargin(2);
+        buttonBar->setLayout(buttonBarLayout);
+
+    layout->setMargin(2);
     widget()->setLayout(layout);
 
+    connect(saveWorkspaceButton, SIGNAL(clicked()), this, SLOT(emitSaveWorkspace()));
+    connect(loadWorkspaceButton, SIGNAL(clicked()), this, SLOT(emitLoadWorkspace()));
+    connect(clearWorkspaceButton, SIGNAL(clicked()), this, SLOT(emitClearWorkspace()));
+
     QTreeWidgetItem *treeWidgetItem = new QTreeWidgetItem();
     treeWidgetItem->setData(0, 0, QString("Local"));
     m_variablesTreeWidget->insertTopLevelItem(0, treeWidgetItem);
 
     treeWidgetItem = new QTreeWidgetItem();
     treeWidgetItem->setData(0, 0, QString("Global"));
     m_variablesTreeWidget->insertTopLevelItem(1, treeWidgetItem);
 
@@ -37,17 +55,17 @@ void VariablesDockWidget::construct() {
     m_variablesTreeWidget->insertTopLevelItem(2, treeWidgetItem);
 
     treeWidgetItem = new QTreeWidgetItem();
     treeWidgetItem->setData(0, 0, QString("Hidden"));
     m_variablesTreeWidget->insertTopLevelItem(3, treeWidgetItem);
 
     m_variablesTreeWidget->expandAll();
     m_variablesTreeWidget->setAlternatingRowColors(true);
-    m_variablesTreeWidget->setAnimated(true);
+    m_variablesTreeWidget->setAnimated(true);    
 }
 
 void VariablesDockWidget::updateTreeEntry(QTreeWidgetItem *treeItem, SymbolRecord symbolRecord) {
     treeItem->setData(0, 0, QString(symbolRecord.name().c_str()));
     treeItem->setData(1, 0, QString(symbolRecord.varval().type_name().c_str()));
     treeItem->setData(2, 0, OctaveLink::octaveValueAsQString(symbolRecord.varval()));
 }
 
@@ -131,8 +149,20 @@ void VariablesDockWidget::updateScope(in
 
         if(!existsInVariableList) {
             topLevelItem->removeChild(child);
             delete child;
             i--;
         }
     }
 }
+
+void VariablesDockWidget::emitSaveWorkspace() {
+    emit saveWorkspace();
+}
+
+void VariablesDockWidget::emitLoadWorkspace() {
+    emit loadWorkspace();
+}
+
+void VariablesDockWidget::emitClearWorkspace() {
+    emit clearWorkspace();
+}
diff --git a/gui//src/VariablesDockWidget.h b/gui//src/VariablesDockWidget.h
--- a/gui//src/VariablesDockWidget.h
+++ b/gui//src/VariablesDockWidget.h
@@ -3,20 +3,31 @@
 
 #include <QDockWidget>
 #include <QTreeWidget>
 #include <QSemaphore>
 #include "OctaveLink.h"
 
 class VariablesDockWidget : public QDockWidget
 {
+    Q_OBJECT
 public:
     VariablesDockWidget(QWidget *parent = 0);
     void setVariablesList(QList<SymbolRecord> symbolTable);
 
+signals:
+    void saveWorkspace();
+    void loadWorkspace();
+    void clearWorkspace();
+
+private slots:
+    void emitSaveWorkspace();
+    void emitLoadWorkspace();
+    void emitClearWorkspace();
+
 private:
     void construct();
     void updateTreeEntry(QTreeWidgetItem *treeItem, SymbolRecord symbolRecord);
     void updateScope(int topLevelItemIndex, QList<SymbolRecord> symbolTable);
     QTreeWidget *m_variablesTreeWidget;
     QSemaphore *m_updateSemaphore;
 };
 
