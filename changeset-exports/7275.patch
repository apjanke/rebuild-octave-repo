# HG changeset patch
# User jwe
# Date 1197312877 0
#      Mon Dec 10 18:54:37 2007 +0000
# Node ID c099705f1aa78e45b97d42476c626061ec7ea600
# Parent  44fdc33e5207dd2932fc4c70e2190a34a9594132
[project @ 2007-12-10 18:54:37 by jwe]

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,10 +1,16 @@
 2007-12-10  John W. Eaton  <jwe@octave.org>
 
+	* OPERATORS/op-cm-s.cc: Define function for el_mul with
+	DEFNDBINOP_OP, not DEFBINOP_OP.
+
+	* OPERATORS/op-s-cm.cc: Define functions for el_and and el_or
+	operators with DEFNDBINOP_FN.
+
 	* oct-hist.cc (default_history_file): Use file_ops::concat.
 	* load-path.cc (dir_info::initialize, dir_info::get_file_list,
 	load_path::do_find_fcn, load_path::do_find_file, genpath,
 	execute_pkg_add_or_del, load_path::do_find_first_of,
 	load_path::do_find_all_first_of): Likewise.
 
 	* help.cc (Flookfor): Avoid doubling directory separator.
 	* dirfns.cc (Fmkdir): Likewise.
diff --git a/src/OPERATORS/op-cm-s.cc b/src/OPERATORS/op-cm-s.cc
--- a/src/OPERATORS/op-cm-s.cc
+++ b/src/OPERATORS/op-cm-s.cc
@@ -75,17 +75,17 @@ DEFBINOP (ldiv, complex_matrix, scalar)
 
 DEFNDBINOP_FN (lt, complex_matrix, scalar, complex_array, scalar, mx_el_lt)
 DEFNDBINOP_FN (le, complex_matrix, scalar, complex_array, scalar, mx_el_le)
 DEFNDBINOP_FN (eq, complex_matrix, scalar, complex_array, scalar, mx_el_eq)
 DEFNDBINOP_FN (ge, complex_matrix, scalar, complex_array, scalar, mx_el_ge)
 DEFNDBINOP_FN (gt, complex_matrix, scalar, complex_array, scalar, mx_el_gt)
 DEFNDBINOP_FN (ne, complex_matrix, scalar, complex_array, scalar, mx_el_ne)
 
-DEFBINOP_OP (el_mul, complex_matrix, scalar, *)
+DEFNDBINOP_OP (el_mul, complex_matrix, scalar, complex_array, scalar, *)
 
 DEFBINOP (el_div, complex_matrix, scalar)
 {
   CAST_BINOP_ARGS (const octave_complex_matrix&, const octave_scalar&);
 
   double d = v2.double_value ();
 
   if (d == 0.0)
diff --git a/src/OPERATORS/op-s-cm.cc b/src/OPERATORS/op-s-cm.cc
--- a/src/OPERATORS/op-s-cm.cc
+++ b/src/OPERATORS/op-s-cm.cc
@@ -93,29 +93,18 @@ DEFBINOP (el_ldiv, scalar, complex_matri
   double d = v1.double_value ();
 
   if (d == 0.0)
     gripe_divide_by_zero ();
 
   return octave_value (v2.complex_array_value () / d);
 }
 
-DEFBINOP (el_and, scalar, complex_matrix)
-{
-  CAST_BINOP_ARGS (const octave_scalar&, const octave_complex_matrix&);
-
-  return mx_el_and (v1.double_value (), v2.complex_array_value ());
-}
-
-DEFBINOP (el_or, scalar, complex_matrix)
-{
-  CAST_BINOP_ARGS (const octave_scalar&, const octave_complex_matrix&);
-
-  return mx_el_or (v1.double_value (), v2.complex_array_value ());
-}
+DEFNDBINOP_FN (el_and, scalar, complex_matrix, scalar, complex_array, mx_el_and)
+DEFNDBINOP_FN (el_or,  scalar, complex_matrix, scalar, complex_array, mx_el_or)
 
 DEFNDCATOP_FN (s_cm, scalar, complex_matrix, array, complex_array, concat)
 
 DEFCONV (complex_matrix_conv, scalar, complex_matrix)
 {
   CAST_CONV_ARG (const octave_scalar&);
 
   return new octave_complex_matrix (ComplexMatrix (v.matrix_value ()));
