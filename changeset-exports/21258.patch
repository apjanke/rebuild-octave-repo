# HG changeset patch
# User Lachlan Andrew <lachlanbis@gmail.com>
# Date 1455274701 -39600
#      Fri Feb 12 21:58:21 2016 +1100
# Node ID b248c28d9a7bcd68fee1e57f9ae227344e178271
# Parent  af8118df8292158073998ab2d532049c1c4d42e7
Make dbstatus return correct filename and function name (bug #41540).

* debug.cc (Fdebugstatus): call octave_canonicalize_file_name.

* debug.cc (get_breakpoint_list): Use bp_set instead of f->name() to
  get class names.  Use Vfilemarker only if breakpoint not in main cmds

* debug.cc (do_add_breakpoint_1): Replace '>' by Vfilemarker.

diff --git a/libinterp/corefcn/debug.cc b/libinterp/corefcn/debug.cc
--- a/libinterp/corefcn/debug.cc
+++ b/libinterp/corefcn/debug.cc
@@ -31,16 +31,17 @@ along with Octave; see the file COPYING.
 #include <set>
 #include <string>
 
 #include "file-stat.h"
 #include "singleton-cleanup.h"
 
 #include "defun.h"
 #include "error.h"
+#include "file-ops.h"
 #include "help.h"
 #include "input.h"
 #include "pager.h"
 #include "octave-link.h"
 #include "ovl.h"
 #include "utils.h"
 #include "parse.h"
 #include "symtab.h"
@@ -575,17 +576,17 @@ bp_table::do_add_breakpoint_1 (octave_us
 
       for (intmap_iterator p = retval.begin (); p != retval.end (); p++)
         {
           if (p->second != 0)
             {
               // normalise to store only the file name.
               // otherwise, there can be an entry for both file>subfunction and
               // file, which causes a crash on  dbclear all
-              const char *s = strchr (fname.c_str (), '>');
+              const char *s = strchr (fname.c_str (), Vfilemarker);
               if (s)
                 bp_set.insert (fname.substr (0, s - fname.c_str ()));
               else
                 bp_set.insert (fname);
               found = true;
               break;
             }
         }
@@ -869,22 +870,17 @@ bp_table::do_get_breakpoint_list (const 
 
               // FIXME: move the operation on cmds to the
               //        tree_statement_list class?
               if (cmds)
                 {
                   std::list<bp_type> bkpts = cmds->breakpoints_and_conds ();
 
                   if (!bkpts.empty ())
-                    {
-                      if (f->name () == *it)
-                        retval[f->name ()] = bkpts;
-                      else
-                        retval[*it + ">" + f->name ()] = bkpts;
-                    }
+                    retval[*it] = bkpts;
                 }
 
               // look for breakpoints in subfunctions
               const std::list<std::string> subf_nm = f->subfunction_names ();
 
               std::map<std::string, octave_value> subf = f->subfunctions ();
 
               for (std::list<std::string>::const_iterator p = subf_nm.begin ();
@@ -899,20 +895,17 @@ bp_table::do_get_breakpoint_list (const 
 
                       cmds = ff->body ();
                       if (cmds)
                         {
                           std::list<bp_type> bkpts
                                              = cmds->breakpoints_and_conds ();
 
                           if (!bkpts.empty ())
-                            {
-                              std::string name = f->name () + ">" + ff->name ();
-                              retval[name] = bkpts;
-                            }
+                            retval[*it + Vfilemarker + ff->name ()] = bkpts;
                         }
                     }
                 }
             }
         }
     }
 
   return retval;
@@ -1424,20 +1417,21 @@ false, there is no \"errs\" field.  The 
       Cell file  (dim_vector (count, 1));
       Cell line  (dim_vector (count, 1));
       Cell cond  (dim_vector (count, 1));
 
       for (bp_table::const_fname_bp_map_iterator it = bp_list.begin ();
            it != bp_list.end (); it++)
         {
           std::string filename = it->first;
-          const char *sub_fun = strchr (filename.c_str (), '>');
+          const char *sub_fun = strchr (filename.c_str (), Vfilemarker);
           if (sub_fun)
             filename = filename.substr(0, sub_fun - filename.c_str ());
-          octave_value path_name = do_which (filename);
+          octave_value path_name = octave_canonicalize_file_name
+	                           (do_which (filename));
 
           for (std::list<bp_type>::const_iterator j = it->second.begin ();
                j != it->second.end (); j++)
             {
               names(i) = it->first;
               file(i) = path_name;
               line(i) = octave_value (j->line);
               cond(i) = octave_value (j->cond);
@@ -1465,16 +1459,32 @@ false, there is no \"errs\" field.  The 
             }
             retval = octave_value (outer);
         }
 
       return retval;
     }
 }
 
+/*
+%!test
+%! dbstop @ftp/dir;
+%! dbstop @audioplayer/set 70;
+%! dbstop quantile>__quantile__;
+%! dbstop ls;
+%! a = dbstatus;
+%! assert (a(1).name, "@audioplayer/set>setproperty")
+%! assert (a(2).name, "@ftp/dir")
+%! assert (a(3).name, "ls")
+%! assert (a(4).name, "quantile>__quantile__")
+%! assert (a(2).file(end-10:end), "/@ftp/dir.m");
+%!test
+%! dbclear all  % ensure no bp left for future tests, even if the above fails
+*/
+
 DEFUN (dbwhere, , ,
        "-*- texinfo -*-\n\
 @deftypefn {} {} dbwhere\n\
 In debugging mode, report the current file and line number where execution\n\
 is stopped.\n\
 @seealso{dbstack, dblist, dbstatus, dbcont, dbstep, dbup, dbdown}\n\
 @end deftypefn")
 {
