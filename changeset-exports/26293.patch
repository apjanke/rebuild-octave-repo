# HG changeset patch
# User Rik <rik@octave.org>
# Date 1545596179 28800
#      Sun Dec 23 12:16:19 2018 -0800
# Branch stable
# Node ID 095eb3a04f43237cb426090c903cc456ce9e68c4
# Parent  d00577d95369d8de648b6350a96027a44f1dbedc
doc: grammarcheck m-file scripts ahead of 5.0 release.

* flip.m, convhull.m, inputParser.m, inputname.m, mkoctfile.m, line.m, datestr.m:
grammarcheck m-file scripts ahead of 5.0 release.

diff --git a/scripts/general/flip.m b/scripts/general/flip.m
--- a/scripts/general/flip.m
+++ b/scripts/general/flip.m
@@ -23,17 +23,16 @@
 ## Return a copy of array @var{x} flipped across dimension @var{dim}.
 ##
 ## If @var{dim} is unspecified it defaults to the first non-singleton
 ## dimension.
 ##
 ## Examples:
 ##
 ## @example
-## @group
 ## ## row vector
 ## flip ([1  2  3  4])
 ##       @result{}  4  3  2  1
 ##
 ## ## column vector
 ## flip ([1; 2; 3; 4])
 ##       @result{}  4
 ##           3
@@ -44,17 +43,16 @@
 ## flip ([1 2; 3 4])
 ##       @result{}  3  4
 ##           1  2
 ##
 ## ## 2-D matrix along dimension 2
 ## flip ([1 2; 3 4], 2)
 ##       @result{}  2  1
 ##           4  3
-## @end group
 ## @end example
 ##
 ## @seealso{fliplr, flipud, rot90, rotdim, permute, transpose}
 ## @end deftypefn
 
 ## Author: David Bateman, Jaroslav Hajek
 
 function y = flip (x, dim)
diff --git a/scripts/geometry/convhull.m b/scripts/geometry/convhull.m
--- a/scripts/geometry/convhull.m
+++ b/scripts/geometry/convhull.m
@@ -21,17 +21,17 @@
 ## @deftypefnx {} {@var{H} =} convhull (@var{x}, @var{y}, @var{z})
 ## @deftypefnx {} {@var{H} =} convhull (@var{x})
 ## @deftypefnx {} {@var{H} =} convhull (@dots{}, @var{options})
 ## @deftypefnx {} {[@var{H}, @var{V}] =} convhull (@dots{})
 ## Compute the convex hull of a 2-D or 3-D set of points.
 ##
 ## The hull @var{H} is a linear index vector into the original set of points
 ## that specifies which points form the enclosing hull.  For 2-D inputs only,
-## the output is ordered in a counter-clockwise manner around the hull.
+## the output is ordered in a counterclockwise manner around the hull.
 ##
 ## The input @var{x} may also be a matrix with two or three columns where the
 ## first column contains x-data, the second y-data, and the optional third
 ## column contains z-data.
 ##
 ## An optional final argument, which must be a string or cell array of strings,
 ## contains options passed to the underlying qhull command.
 ## See the documentation for the Qhull library for details
diff --git a/scripts/miscellaneous/inputParser.m b/scripts/miscellaneous/inputParser.m
--- a/scripts/miscellaneous/inputParser.m
+++ b/scripts/miscellaneous/inputParser.m
@@ -19,41 +19,41 @@
 ## -*- texinfo -*-
 ## @deftypefn {} {@var{p} =} inputParser ()
 ## Create object @var{p} of the inputParser class.
 ##
 ## This class is designed to allow easy parsing of function arguments.  The
 ## class supports four types of arguments:
 ##
 ## @enumerate
-## @item mandatory (see @command{addRequired});
+## @item mandatory (see @code{addRequired});
 ##
-## @item optional (see @command{addOptional});
+## @item optional (see @code{addOptional});
 ##
-## @item named (see @command{addParameter});
+## @item named (see @code{addParameter});
 ##
-## @item switch (see @command{addSwitch}).
+## @item switch (see @code{addSwitch}).
 ## @end enumerate
 ##
 ## After defining the function API with these methods, the supplied arguments
-## can be parsed with the @command{parse} method and the parsing results
-## accessed with the @command{Results} accessor.
+## can be parsed with the @code{parse} method and the parsing results
+## accessed with the @code{Results} accessor.
 ##
 ## @end deftypefn
 ## @deftypefn {} {} inputParser.Parameters
 ## Return list of parameter names already defined.
 ##
 ## @end deftypefn
 ## @deftypefn {} {} inputParser.Results
 ## Return structure with argument names as fieldnames and corresponding values.
 ##
 ## @end deftypefn
 ## @deftypefn {} {} inputParser.Unmatched
-## Return structure similar to @command{Results}, but for unmatched parameters.
-## See the @command{KeepUnmatched} property.
+## Return structure similar to @code{Results}, but for unmatched parameters.
+## See the @code{KeepUnmatched} property.
 ##
 ## @end deftypefn
 ## @deftypefn {} {} inputParser.UsingDefaults
 ## Return cell array with the names of arguments that are using default values.
 ##
 ## @end deftypefn
 ## @deftypefn {} {} inputParser.CaseSensitive = @var{boolean}
 ## Set whether matching of argument names should be case sensitive.  Defaults
@@ -63,19 +63,19 @@
 ## @deftypefn {} {} inputParser.FunctionName = @var{name}
 ## Set function name to be used in error messages; Defaults to empty string.
 ##
 ## @end deftypefn
 ## @deftypefn {} {} inputParser.KeepUnmatched = @var{boolean}
 ## Set whether an error should be given for non-defined arguments.  Defaults to
 ## false.  If set to true, the extra arguments can be accessed through
 ## @code{Unmatched} after the @code{parse} method.  Note that since
-## @command{Switch} and @command{Parameter} arguments can be mixed, it is
+## @code{Switch} and @code{Parameter} arguments can be mixed, it is
 ## not possible to know the unmatched type.  If argument is found unmatched
-## it is assumed to be of the @command{Parameter} type and it is expected to
+## it is assumed to be of the @code{Parameter} type and it is expected to
 ## be followed by a value.
 ##
 ## @end deftypefn
 ## @deftypefn {} {} inputParser.StructExpand = @var{boolean}
 ## Set whether a structure can be passed to the function instead of
 ## parameter/value pairs.  Defaults to true.
 ##
 ## The following example shows how to use this class:
@@ -124,47 +124,47 @@
 ##
 ## ## following returns an error since not all optional arguments,
 ## ## `path' and `mat', were given before the named argument `type'.
 ## check ("mech", "~/dev", "type", "linear");
 ## @end group
 ## @end example
 ##
 ## @emph{Note 1}: A function can have any mixture of the four API types but
-## they must appear in a specific order.  @command{Required} arguments must be
-## first and can be followed by any @command{Optional} arguments.  Only
-## the @command{Parameter} and @command{Switch} arguments may be mixed
+## they must appear in a specific order.  @code{Required} arguments must be
+## first and can be followed by any @code{Optional} arguments.  Only
+## the @code{Parameter} and @code{Switch} arguments may be mixed
 ## together and they must appear at the end.
 ##
-## @emph{Note 2}: If both @command{Optional} and @command{Parameter} arguments
+## @emph{Note 2}: If both @code{Optional} and @code{Parameter} arguments
 ## are mixed in a function API then once a string Optional argument fails to
-## validate it will be considered the end of the @command{Optional}
+## validate it will be considered the end of the @code{Optional}
 ## arguments.  The remaining arguments will be compared against any
-## @command{Parameter} or @command{Switch} arguments.
+## @code{Parameter} or @code{Switch} arguments.
 ##
 ## @seealso{nargin, validateattributes, validatestring, varargin}
 ## @end deftypefn
 
 ## -*- texinfo -*-
 ## @deftypefn  {} {} addOptional (@var{argname}, @var{default})
 ## @deftypefnx {} {} addOptional (@var{argname}, @var{default}, @var{validator})
 ## Add new optional argument to the object @var{parser} of the class
 ## inputParser to implement an ordered arguments type of API
 ##
 ## @var{argname} must be a string with the name of the new argument.  The order
-## in which new arguments are added with @command{addOptional}, represents the
+## in which new arguments are added with @code{addOptional}, represents the
 ## expected order of arguments.
 ##
 ## @var{default} will be the value used when the argument is not specified.
 ##
 ## @var{validator} is an optional anonymous function to validate the given
 ## values for the argument with name @var{argname}.  Alternatively, a
 ## function name can be used.
 ##
-## See @command{help inputParser} for examples.
+## See @code{help inputParser} for examples.
 ##
 ## @emph{Note}: if a string argument does not validate, it will be considered a
 ## ParamValue key.  If an optional argument is not given a validator, anything
 ## will be valid, and so any string will be considered will be the value of the
 ## optional argument (in @sc{matlab}, if no validator is given and argument is
 ## a string it will also be considered a ParamValue key).
 ##
 ## @end deftypefn
@@ -178,51 +178,51 @@
 ## @var{argname} must be a string with the name of the new parameter.
 ##
 ## @var{default} will be the value used when the parameter is not specified.
 ##
 ## @var{validator} is an optional function handle to validate the given values
 ## for the parameter with name @var{argname}.  Alternatively, a function name
 ## can be used.
 ##
-## See @command{help inputParser} for examples.
+## See @code{help inputParser} for examples.
 ##
 ## @end deftypefn
 
 ## -*- texinfo -*-
 ## @deftypefn  {} {} addParamValue (@var{argname}, @var{default})
 ## @deftypefnx {} {} addParamValue (@var{argname}, @var{default}, @var{validator})
 ## Add new parameter to the object @var{parser} of the class inputParser to
 ## implement a name/value pair type of API.
 ##
-## This is an alias for @command{addParameter} method without the
+## This is an alias for @code{addParameter} method without the
 ## @qcode{"PartialMatchPriority"} option.  See it for the help text.
 ##
 ## @end deftypefn
 
 ## -*- texinfo -*-
 ## @deftypefn  {} {} addRequired (@var{argname})
 ## @deftypefnx {} {} addRequired (@var{argname}, @var{validator})
 ## Add new mandatory argument to the object @var{parser} of inputParser class.
 ##
 ## This method belongs to the inputParser class and implements an ordered
 ## arguments type of API.
 ##
 ## @var{argname} must be a string with the name of the new argument.  The order
-## in which new arguments are added with @command{addrequired}, represents the
+## in which new arguments are added with @code{addrequired}, represents the
 ## expected order of arguments.
 ##
 ## @var{validator} is an optional function handle to validate the given values
 ## for the argument with name @var{argname}.  Alternatively, a function name
 ## can be used.
 ##
-## See @command{help inputParser} for examples.
+## See @code{help inputParser} for examples.
 ##
 ## @emph{Note}: this can be used together with the other type of arguments but
-## it must be the first (see @command{@@inputParser}).
+## it must be the first (see @code{@@inputParser}).
 ##
 ## @end deftypefn
 
 ## -*- texinfo -*-
 ## @deftypefn {} {} addSwitch (@var{argname})
 ## Add new switch type of argument to the object @var{parser} of inputParser
 ## class.
 ##
@@ -231,27 +231,27 @@
 ##
 ## @var{argname} must be a string with the name of the new argument.  Arguments
 ## of this type can be specified at the end, after @code{Required} and
 ## @code{Optional}, and mixed between the @code{Parameter}.  They default to
 ## false.  If one of the arguments supplied is a string like @var{argname},
 ## then after parsing the value of @var{parse}.Results.@var{argname} will be
 ## true.
 ##
-## See @command{help inputParser} for examples.
+## See @code{help inputParser} for examples.
 ##
 ## @end deftypefn
 
 ## -*- texinfo -*-
 ## @deftypefn {} {} parse (@var{varargin})
 ## Parses and validates list of arguments according to object @var{parser} of
 ## the class inputParser.
 ##
-## After parsing, the results can be accessed with the @command{Results}
-## accessor.  See @command{help inputParser} for a more complete description.
+## After parsing, the results can be accessed with the @code{Results}
+## accessor.  See @code{help inputParser} for a more complete description.
 ##
 ## @end deftypefn
 
 ## Author: Carnë Draug <carandraug@octave.org>
 
 classdef inputParser < handle
   properties
     ## FIXME: set input checking for these properties
diff --git a/scripts/miscellaneous/inputname.m b/scripts/miscellaneous/inputname.m
--- a/scripts/miscellaneous/inputname.m
+++ b/scripts/miscellaneous/inputname.m
@@ -15,17 +15,17 @@
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <https://www.gnu.org/licenses/>.
 ##
 ## Original version by Paul Kienzle distributed as free software in the
 ## public domain.
 
 ## -*- texinfo -*-
-## @deftypefn {} {} inputname (@var{n})
+## @deftypefn  {} {} inputname (@var{n})
 ## @deftypefnx {} {} inputname (@var{n}, @var{ids_only})
 ## Return the name of the @var{n}-th argument to the calling function.
 ##
 ## If the argument is not a simple variable name, return an empty string.  As
 ## an example, a reference to a field in a structure such as @code{s.field} is
 ## not a simple name and will return @qcode{""}.
 ##
 ## @code{inputname} is only useful within a function.  When used at the command
diff --git a/scripts/miscellaneous/mkoctfile.m b/scripts/miscellaneous/mkoctfile.m
--- a/scripts/miscellaneous/mkoctfile.m
+++ b/scripts/miscellaneous/mkoctfile.m
@@ -102,41 +102,44 @@
 ##    INCFLAGS                    XTRA_CXXFLAGS
 ##    INCLUDEDIR
 ## @end example
 ##
 ## Octave configuration variables as above, but currently unused by
 ## @code{mkoctfile}.
 ##
 ## @example
+## @group
 ##    AR
 ##    DEPEND_EXTRA_SED_PATTERN
 ##    DEPEND_FLAGS
 ##    FFTW3F_LDFLAGS
 ##    FFTW3F_LIBS
 ##    FFTW3_LDFLAGS
 ##    FFTW3_LIBS
 ##    FFTW_LIBS
 ##    FLIBS
 ##    LIBS
 ##    RANLIB
 ##    READLINE_LIBS
+## @end group
 ## @end example
 ##
 ## Octave configuration variables that are provided for informational
 ## purposes only.  Except for @samp{OCTAVE_HOME} and @samp{OCTAVE_EXEC_HOME},
 ## users may not override these variables.
 ##
-## If @env{OCTAVE_HOME} or @env{OCTAVE_EXEC_HOME} are set in the environment,
-## then other variables are adjusted accordingly with @env{OCTAVE_HOME} or
-## @env{OCTAVE_EXEC_HOME} substituted for the original value of the directory
-## specified by the @samp{--prefix} or @samp{--exec-prefix} options that were
-## used when Octave was configured.
+## If @w{@env{OCTAVE_HOME}} or @w{@env{OCTAVE_EXEC_HOME}} are set in the
+## environment, then other variables are adjusted accordingly with
+## @w{@env{OCTAVE_HOME}} or @w{@env{OCTAVE_EXEC_HOME}} substituted for the
+## original value of the directory specified by the @option{--prefix} or
+## @option{--exec-prefix} options that were used when Octave was configured.
 ##
 ## @example
+## @group
 ##    API_VERSION                 LOCALFCNFILEDIR
 ##    ARCHLIBDIR                  LOCALOCTFILEDIR
 ##    BINDIR                      LOCALSTARTUPFILEDIR
 ##    CANONICAL_HOST_TYPE         LOCALVERARCHLIBDIR
 ##    DATADIR                     LOCALVERFCNFILEDIR
 ##    DATAROOTDIR                 LOCALVEROCTFILEDIR
 ##    DEFAULT_PAGER               MAN1DIR
 ##    EXEC_PREFIX                 MAN1EXT
@@ -145,16 +148,17 @@
 ##    IMAGEDIR                    OCTAVE_HOME
 ##    INFODIR                     OCTDATADIR
 ##    INFOFILE                    OCTDOCDIR
 ##    LIBEXECDIR                  OCTFILEDIR
 ##    LOCALAPIARCHLIBDIR          OCTFONTSDIR
 ##    LOCALAPIFCNFILEDIR          STARTUPFILEDIR
 ##    LOCALAPIOCTFILEDIR          VERSION
 ##    LOCALARCHLIBDIR
+## @end group
 ## @end example
 ##
 ## @item --link-stand-alone
 ## Link a stand-alone executable file.
 ##
 ## @item --mex
 ## Assume we are creating a MEX file.  Set the default output extension to
 ## ".mex".
diff --git a/scripts/plot/draw/line.m b/scripts/plot/draw/line.m
--- a/scripts/plot/draw/line.m
+++ b/scripts/plot/draw/line.m
@@ -28,17 +28,17 @@
 ## Create a line object from @var{x} and @var{y} (and possibly @var{z}) and
 ## insert it in the current axes.
 ##
 ## In the standard calling form the data @var{x}, @var{y}, and @var{z} may be
 ## scalars, vectors, or matrices.  In the case of matrix inputs, @code{line}
 ## will attempt to orient scalars and vectors so the results can be plotted.
 ## This requires that one of the dimensions of the vector match either the
 ## number of rows or the number of columns of the matrix.
-## 
+##
 ## In the low-level calling form (50% higher performance) where the data is
 ## specified by name (@code{line ("xdata", @var{x}, @dots{})}) the data must be
 ## vectors.  If no data is specified (@code{line ()}) then
 ## @w{@code{@var{x} == @var{y} = [0, 1]}}.
 ##
 ## Multiple property-value pairs may be specified for the line object, but they
 ## must appear in pairs.
 ##
diff --git a/scripts/time/datestr.m b/scripts/time/datestr.m
--- a/scripts/time/datestr.m
+++ b/scripts/time/datestr.m
@@ -19,17 +19,17 @@
 ## -*- texinfo -*-
 ## @deftypefn  {} {@var{str} =} datestr (@var{date})
 ## @deftypefnx {} {@var{str} =} datestr (@var{date}, @var{f})
 ## @deftypefnx {} {@var{str} =} datestr (@var{date}, @var{f}, @var{p})
 ## Format the given date/time according to the format @var{f} and return
 ## the result in @var{str}.
 ##
 ## @var{date} is a serial date number (see @code{datenum}), a date vector (see
-## @code{datevec}), or a a string or cell array of strings. In the latter case,
+## @code{datevec}), or a string or cell array of strings.  In the latter case,
 ## it is passed to @code{datevec} to guess the input date format.
 ##
 ## @var{f} can be an integer which corresponds to one of the codes in the table
 ## below, or a date format string.
 ##
 ## @var{p} is the year at the start of the century in which two-digit years are
 ## to be interpreted in.  If not specified, it defaults to the current year
 ## minus 50.
