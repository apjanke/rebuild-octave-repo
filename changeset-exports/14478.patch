# HG changeset patch
# User Rik <octave@nomad.inbox5.com>
# Date 1331941866 25200
#      Fri Mar 16 16:51:06 2012 -0700
# Branch stable
# Node ID e995b1c97e13203544a50f10b1b956a7fa09fd3e
# Parent  21ac4b576003cfee0d571d257a4c7f64bec408b0
Fix regression in bin2dec which did not allow space-separated input.

* base2dec.m: Squeeze spaces from input before applying algorithm.

* bin2dec.m: Add tests for using spaces in binary number.

diff --git a/scripts/strings/base2dec.m b/scripts/strings/base2dec.m
--- a/scripts/strings/base2dec.m
+++ b/scripts/strings/base2dec.m
@@ -76,18 +76,37 @@ function out = base2dec (s, base)
   elseif (! isscalar (base))
     error ("base2dec: cannot convert from several bases at once");
   elseif (base < 2 || base > length (symbols))
     error ("base2dec: BASE must be between 2 and 36, or a string of symbols");
   else
     s = toupper (s);
   endif
 
-  ## Right justify the values before anything else.
-  s = strjust (s, "right");
+  ## Right justify the values and squeeze out any spaces.
+  ## This looks complicated, but indexing solution is very fast
+  ## compared to alternatives which use cellstr or cellfun or looping.
+  [nr, nc] = size (s);
+  if (nc > 1)   # Bug #35621
+    s = s.';
+    nonbl = s != " ";
+    num_nonbl = sum (nonbl);
+    nc = max (num_nonbl);
+    num_blank = nc - num_nonbl;
+    R = repmat ([1 2; 0 0], 1, nr);
+    R(2, 1:2:2*nr) = num_blank;
+    R(2, 2:2:2*nr) = num_nonbl;
+    idx = repelems ([false, true], R);
+    idx = reshape (idx, nc, nr);
+    
+    ## Create a blank matrix and position the nonblank characters.
+    s2 = repmat (" ", nc, nr);
+    s2(idx) = s(nonbl);
+    s = s2.';
+  endif
 
   ## Lookup value of symbols in symbol table, with invalid symbols
   ## evaluating to NaN and space evaluating to 0.
   table = NaN (1, 256);
   table(toascii (symbols(1:base))) = 0 : base-1;
   table(toascii (" ")) = 0;
   s = reshape (table(toascii (s)), size (s));
 
diff --git a/scripts/strings/bin2dec.m b/scripts/strings/bin2dec.m
--- a/scripts/strings/bin2dec.m
+++ b/scripts/strings/bin2dec.m
@@ -23,16 +23,26 @@
 ##
 ## @example
 ## @group
 ## bin2dec ("1110")
 ##      @result{} 14
 ## @end group
 ## @end example
 ##
+## Spaces are ignored during conversion and may be used to make the binary
+## number more readable.
+##
+## @example
+## @group
+## bin2dec ("1000 0001")
+##      @result{} 129
+## @end group
+## @end example
+##
 ## If @var{s} is a string matrix, return a column vector with one converted
 ## number per row of @var{s}; Invalid rows evaluate to NaN@.
 ##
 ## If @var{s} is a cell array of strings, return a column vector with one
 ## converted number per cell element in @var{s}.
 ## @seealso{dec2bin, base2dec, hex2dec}
 ## @end deftypefn
 
@@ -49,14 +59,16 @@ function d = bin2dec (s)
 
 endfunction
 
 
 %!assert(bin2dec ("0000"), 0);
 %!assert(bin2dec ("1110"), 14);
 %!assert(bin2dec ("11111111111111111111111111111111111111111111111111111"), 2^53-1);
 %!assert(bin2dec ({"1110", "1111"}), [14; 15]);
+%!assert (bin2dec ("1 0 1"), 5)
+%!assert (bin2dec (char ("1 0 1", "   1111")), [5; 15]);
 
 %%Test input validation
 %!error bin2dec ();
 %!error bin2dec (1);
 %!error bin2dec ("1", 2);
 
