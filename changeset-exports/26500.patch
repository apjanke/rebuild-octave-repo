# HG changeset patch
# User Rik <rik@octave.org>
# Date 1546994684 28800
#      Tue Jan 08 16:44:44 2019 -0800
# Branch stable
# Node ID d76f9e42290ad998673e29d6e58e0e787384cd3c
# Parent  9326e683c3a4cea24c5d190df8a175321e1ecf94
oct-stream.cc: Fix static analyzer detected issues (bug #55347).

* oct-stream.cc (scanf_format_list::finish_conversion): Pass width by value,
not reference.
* oct-stream.cc (printf_format_list::printf_format_list): Pass argument to
process_conversion in the correct order of "modifier", "type" (accidentally
reversed, but apparently no error).
* oct-stream.cc (textscan_format_list::finish_conversion): Pass width, prec,
and bitwidth argument by value rather than reference.
* oct-stream.cc (textscan_format_list::read_first_row): Remove unneeded
variable progress.
* oct-stream.cc (textscan::do_scan): Enclose expression that is the subject of
+= operator in parentheses for clarity.
* oct-stream.cc (textscan::read_double): Remove three useless test on
"width_left".

diff --git a/libinterp/corefcn/oct-stream.cc b/libinterp/corefcn/oct-stream.cc
--- a/libinterp/corefcn/oct-stream.cc
+++ b/libinterp/corefcn/oct-stream.cc
@@ -353,17 +353,17 @@ namespace octave
     void add_elt_to_list (int width, bool discard, char type, char modifier,
                           const std::string& char_class = "");
 
     void process_conversion (const std::string& s, size_t& i, size_t n,
                              int& width, bool& discard, char& type,
                              char& modifier);
 
     int finish_conversion (const std::string& s, size_t& i, size_t n,
-                           int& width, bool discard, char& type,
+                           int width, bool discard, char& type,
                            char modifier);
   };
 
   scanf_format_list::scanf_format_list (const std::string& s)
     : nconv (0), curr_idx (0), fmt_elts (), buf ()
   {
     size_t n = s.length ();
 
@@ -564,17 +564,17 @@ namespace octave
           break;
       }
 
     nconv = -1;
   }
 
   int
   scanf_format_list::finish_conversion (const std::string& s, size_t& i,
-                                        size_t n, int& width, bool discard,
+                                        size_t n, int width, bool discard,
                                         char& type, char modifier)
   {
     int retval = 0;
 
     std::string char_class;
 
     size_t beg_idx = std::string::npos;
     size_t end_idx = std::string::npos;
@@ -885,17 +885,17 @@ namespace octave
 
             switch (s[i])
               {
               case '%':
                 {
                   if (empty_buf)
                     {
                       process_conversion (s, i, n, args, flags, fw, prec,
-                                          type, modifier);
+                                          modifier, type);
 
                       // If there is nothing in the buffer, then
                       // add_elt_to_list must have just been called, so we
                       // are already done with the current element and we
                       // don't need to call add_elt_to_list if this is our
                       // last trip through the loop.
 
                       have_more = (buf.tellp () != 0);
@@ -1751,17 +1751,17 @@ namespace octave
                           char type,
                           const std::string& char_class = std::string ());
 
     void process_conversion (const std::string& s, size_t& i, size_t n);
 
     std::string parse_char_class (const std::string& pattern) const;
 
     int finish_conversion (const std::string& s, size_t& i, size_t n,
-                           unsigned int& width, int& prec, int& bitwidth,
+                           unsigned int width, int prec, int bitwidth,
                            octave_value& val_type,
                            bool discard, char& type);
   };
 
   // Main class to implement textscan.  Read data and parse it
   // according to a format.
   //
   // The calling sequence is
@@ -2328,18 +2328,18 @@ namespace octave
 
     retval.resize (out);
 
     return retval;
   }
 
   int
   textscan_format_list::finish_conversion (const std::string& s, size_t& i,
-                                           size_t n, unsigned int& width,
-                                           int& prec, int& bitwidth,
+                                           size_t n, unsigned int width,
+                                           int prec, int bitwidth,
                                            octave_value& val_type, bool discard,
                                            char& type)
   {
     int retval = 0;
 
     std::string char_class;
 
     size_t beg_idx = std::string::npos;
@@ -2452,17 +2452,16 @@ namespace octave
     int retval = 0;
 
     // read line, creating output_container as we go
     while (! ds.eof ())
       {
         bool already_skipped_delim = false;
         ts.skip_whitespace (ds);
         ds.progress_benchmark ();
-        bool progress = false;
         ts.scan_complex (ds, *fmt_elts[0], val);
         if (ds.fail ())
           {
             ds.clear (ds.rdstate () & ~std::ios::failbit);
 
             if (ds.eof ())
               break;
 
@@ -2487,17 +2486,17 @@ namespace octave
         else
           val_type = octave_value (ComplexNDArray (dv, val));
 
         output_container.push_back (val_type);
 
         if (! already_skipped_delim)
           ts.skip_delim (ds);
 
-        if (! progress && ds.no_progress ())
+        if (ds.no_progress ())
           break;
 
         nconv++;
       }
 
     output_container.pop_front (); // discard empty element from constructor
 
     // Create fmt_list now that the size is known
@@ -2638,17 +2637,17 @@ namespace octave
 
     // Read the data.  This is the main loop.
     if (! err)
       {
         for (/* row set ~30 lines above */; row < ntimes || ntimes == -1; row++)
           {
             if (row == 0 || row >= size)
               {
-                size += size+1;
+                size += (size+1);
                 for (auto& col : out)
                   col = col.resize (dim_vector (size, 1), 0);
               }
 
             row_idx(0) = row;
             err = read_format_once (is, fmt_list, out, row_idx, done_after);
 
             if ((err & ~1) > 0 || ! is || (lines >= ntimes && ntimes > -1))
@@ -2781,18 +2780,17 @@ namespace octave
 
     // Read fractional part, up to specified precision
     if (ch == '.' && width_left)
       {
         double multiplier = 1;
         int precision = fmt.prec;
         int i;
 
-        if (width_left)
-          width_left--;                // Consider width of '.'
+        width_left--;                  // Consider width of '.'
 
         if (precision == -1)
           precision = 1<<30;           // FIXME: Should be MAXINT
 
         if (! valid)                   // if there was nothing before '.'...
           is.get ();                   // ...ch was a "peek", not "get".
 
         for (i = 0; i < precision; i++)
@@ -2830,26 +2828,24 @@ namespace octave
         if (ch1 == '-' || ch1 == '+' || (ch1 >= '0' && ch1 <= '9'))
           {
             // if 1.0e+$ or some such, this will set failbit, as we want
             width_left--;                         // count "E"
             int exp = 0;
             int exp_sign = 1;
             if (ch1 == '+')
               {
-                if (width_left)
-                  width_left--;
+                width_left--;
                 is.get ();
               }
             else if (ch1 == '-')
               {
+                width_left--;
                 exp_sign = -1;
                 is.get ();
-                if (width_left)
-                  width_left--;
               }
             valid = false;
             while (width_left-- && is && (ch = is.get ()) >= '0' && ch <= '9')
               {
                 exp = exp*10 + ch - '0';
                 valid = true;
               }
             width_left++;
