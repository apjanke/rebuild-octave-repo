# HG changeset patch
# User Rik <octave@nomad.inbox5.com>
# Date 1323890926 28800
#      Wed Dec 14 11:28:46 2011 -0800
# Branch stable
# Node ID b5a8e245b4eb8180a8cf2adf9663bfddc3c2670a
# Parent  fafd2f45bfa5db941b6212ef5d7b453324e844bf
Change phrasing to more assertive error() messages in debug commands

* debug.cc: Change phrasing to more assertive error() messages in debug commands

diff --git a/src/debug.cc b/src/debug.cc
--- a/src/debug.cc
+++ b/src/debug.cc
@@ -303,17 +303,17 @@ bp_table::do_add_breakpoint (const std::
                     {
                       bp_set.insert (fname);
                     }
                 }
             }
         }
     }
   else
-    error ("add_breakpoint: unable to find the function requested\n");
+    error ("add_breakpoint: unable to find the requested function\n");
 
   tree_evaluator::debug_mode = bp_table::have_breakpoints () || Vdebugging;
 
   return retval;
 }
 
 
 int
@@ -358,17 +358,17 @@ bp_table::do_remove_breakpoint (const st
                     bp_set.erase (it);
 
                 }
 
               retval = results.length ();
             }
         }
       else
-        error ("remove_breakpoint: unable to find the function requested\n");
+        error ("remove_breakpoint: unable to find the requested function\n");
     }
 
   tree_evaluator::debug_mode = bp_table::have_breakpoints () || Vdebugging;
 
   return retval;
 }
 
 
@@ -398,17 +398,17 @@ bp_table::do_remove_all_breakpoints_in_f
           bp_set_iterator it = bp_set.find (fname);
           if (it != bp_set.end ())
             bp_set.erase (it);
 
         }
     }
   else if (! silent)
     error ("remove_all_breakpoint_in_file: "
-           "unable to find the function requested\n");
+           "unable to find the requested function\n");
 
   tree_evaluator::debug_mode = bp_table::have_breakpoints () || Vdebugging;
 
   return retval;
 }
 
 void
 bp_table::do_remove_all_breakpoints (void)
@@ -735,17 +735,17 @@ execution is stopped.\n\
               if (! line.empty ())
                 octave_stdout << l << ": " << line << std::endl;
             }
         }
       else
         octave_stdout << " <unknown line>" << std::endl;
     }
   else
-    error ("dbwhere: must be inside of a user function to use dbwhere\n");
+    error ("dbwhere: must be inside a user function to use dbwhere\n");
 
   return retval;
 }
 
 // Copied and modified from the do_type command in help.cc
 // Maybe we could share some code?
 void
 do_dbtype (std::ostream& os, const std::string& name, int start, int end)
@@ -814,17 +814,17 @@ with line numbers.\n\
       switch (nargin)
         {
         case 0: // dbtype
           dbg_fcn = get_user_code ();
 
           if (dbg_fcn)
             do_dbtype (octave_stdout, dbg_fcn->name (), 0, INT_MAX);
           else
-            error ("dbtype: must be in a user function to give no arguments to dbtype\n");
+            error ("dbtype: must be inside a user function to give no arguments to dbtype\n");
           break;
 
         case 1: // (dbtype func) || (dbtype start:end)
           dbg_fcn = get_user_code (argv[1]);
 
           if (dbg_fcn)
             do_dbtype (octave_stdout, dbg_fcn->name (), 0, INT_MAX);
           else
@@ -926,17 +926,17 @@ do_dbstack (const octave_value_list& arg
           n = atoi (s_arg.c_str ());
         }
       else
         n = args(0).int_value ();
 
       if (n > 0)
         nskip = n;
       else
-        error ("dbstack: expecting N to be a nonnegative integer");
+        error ("dbstack: N must be a non-negative integer");
     }
 
   if (! error_state)
     {
       octave_map stk = octave_call_stack::backtrace (nskip, curr_frame);
 
       if (nargout == 0)
         {
@@ -1159,17 +1159,17 @@ execution to continue until the current 
                           tree_evaluator::dbstep_flag = n;
                         }
                       else
                         error ("dbstep: invalid argument");
                     }
                 }
             }
           else
-            error ("dbstep: expecting character string as argument");
+            error ("dbstep: input argument must be a character string");
         }
       else
         {
           Vdebugging = false;
 
           tree_evaluator::dbstep_flag = 1;
         }
     }
