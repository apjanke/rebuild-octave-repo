# HG changeset patch
# User jwe
# Date 863726575 0
#      Thu May 15 20:02:55 1997 +0000
# Node ID b9c107cbe388335aa8675285aa95b5543b46556f
# Parent  ebbc34ff7f66d9593fe016a8ad36d68834e5fcd4
[project @ 1997-05-15 20:01:00 by jwe]

diff --git a/src/Makefile.in b/src/Makefile.in
--- a/src/Makefile.in
+++ b/src/Makefile.in
@@ -63,30 +63,29 @@ ifeq ($(OCTAVE_LITE), true)
 else
   DLD_STATIC_OBJ := $(DLD_OBJ)
 endif
 
 OV_INCLUDES := ov-re-mat.h ov-cx-mat.h ov-ch-mat.h \
 	ov-list.h ov-struct.h ov-scalar.h ov-range.h \
 	ov-complex.h ov-va-args.h ov-colon.h ov-base.h \
 	ov-str-mat.h ov-bool-mat.h ov-bool.h ov-file.h ov.h \
-	ov-typeinfo.h
+	ov-fcn.h ov-builtin.h ov-mapper.h ov-usr-fcn.h ov-typeinfo.h
 
 PT_INCLUDES := pt-base.h pt-cmd.h \
 	pt-const.h pt-exp-base.h pt-exp.h pt-id.h pt-indir.h \
-	pt-mat.h pt-misc.h pt-mvr-base.h pt-mvr.h \
-	pt-plot.h pt-pr-code.h pt-walk.h 
+	pt-mat.h pt-misc.h pt-plot.h pt-pr-code.h pt-walk.h 
 
 INCLUDES := BaseSLList.h Map.h SLList.h SLStack.h Stack.h defun-dld.h \
 	defun-int.h defun.h dirfns.h dynamic-ld.h error.h file-io.h \
 	fn-cache.h gripes.h help.h input.h lex.h load-save.h \
-	oct-builtin.h oct-fcn.h oct-fstrm.h oct-hist.h oct-iostrm.h \
-	oct-map.h oct-mapper.h oct-obj.h oct-prcstrm.h oct-procbuf.h \
-	oct-stdstrm.h oct-stream.h oct-strstrm.h oct-sym.h \
-	oct-usr-fcn.h oct-var-ref.h oct.h ops.h pager.h parse.h \
+	oct-fstrm.h oct-hist.h oct-iostrm.h \
+	oct-map.h oct-obj.h oct-prcstrm.h oct-procbuf.h \
+	oct-stdstrm.h oct-stream.h oct-strstrm.h \
+	oct-var-ref.h oct.h ops.h pager.h parse.h \
 	pr-output.h procstream.h sighandlers.h symtab.h sysdep.h \
 	systime.h syswait.h token.h toplev.h unwind-prot.h utils.h \
 	variables.h version.h xdiv.h xpow.h $(OV_INCLUDES) $(PT_INCLUDES)
 
 TI_XSRC := Array-oc.cc Array-os.cc Array-tc.cc Map-fnc.cc \
 	Map-tc.cc SLList-expr.cc SLList-misc.cc SLList-plot.cc \
 	SLList-tc.cc SLList-tm.cc SLStack-i.cc SLStack-pc.cc \
 	SLStack-str.cc SLStack-sym.cc SLStack-tok.cc \
@@ -102,34 +101,34 @@ OP_XSRC := op-b-b.cc op-bm-bm.cc op-cm-c
 	op-fil-m.cc op-fil-s.cc op-fil-lis.cc op-fil-rec.cc \
 	op-fil-str.cc
 
 OP_SRC := $(addprefix OPERATORS/, $(OP_XSRC))
 
 OV_SRC := ov-base.cc ov-ch-mat.cc ov-list.cc ov-re-mat.cc \
 	ov-cx-mat.cc ov-range.cc ov-scalar.cc ov-complex.cc \
 	ov-str-mat.cc ov-struct.cc ov-va-args.cc ov-colon.cc \
-	ov-bool-mat.cc ov-bool.cc ov-file.cc ov.cc ov-typeinfo.cc 
+	ov-bool-mat.cc ov-bool.cc ov-file.cc ov.cc ov-fcn.cc \
+	ov-builtin.cc ov-mapper.cc ov-usr-fcn.cc ov-typeinfo.cc
 
 PT_SRC := pt-base.cc pt-cmd.cc pt-const.cc pt-exp-base.cc \
 	pt-exp.cc pt-id.cc pt-indir.cc pt-mat.cc pt-misc.cc \
-	pt-mvr-base.cc pt-mvr.cc pt-plot.cc pt-pr-code.cc 
+	pt-plot.cc pt-pr-code.cc 
 
 SOURCES := BaseSLList.cc Map.cc SLList.cc SLStack.cc Stack.cc \
-	data.cc defaults.cc dirfns.cc dynamic-ld.cc error.cc \
-	file-io.cc fn-cache.cc gripes.cc help.cc input.cc lex.l \
-	load-save.cc mappers.cc oct-fstrm.cc oct-hist.cc \
+	data.cc defaults.cc defun.cc dirfns.cc dynamic-ld.cc \
+	error.cc file-io.cc fn-cache.cc gripes.cc help.cc input.cc \
+	lex.l load-save.cc mappers.cc oct-fstrm.cc oct-hist.cc \
 	oct-iostrm.cc oct-map.cc oct-obj.cc oct-prcstrm.cc \
 	oct-procbuf.cc oct-stdstrm.cc oct-stream.cc oct-strstrm.cc \
 	oct-var-ref.cc pager.cc parse.y pr-output.cc procstream.cc \
 	sighandlers.cc strcasecmp.c strncase.c strfns.cc \
 	strftime.c symtab.cc syscalls.cc sysdep.cc token.cc \
 	toplev.cc unwind-prot.cc utils.cc variables.cc xdiv.cc \
-	xpow.cc oct-fcn.cc oct-builtin.cc oct-mapper.cc \
-	oct-usr-fcn.cc \
+	xpow.cc \
 	$(OP_SRC) $(OV_SRC) $(PT_SRC) $(TI_SRC)
 
 OBJECTS_4 := $(notdir $(SOURCES))
 OBJECTS_3 := $(patsubst %.l, %.o, $(OBJECTS_4))
 OBJECTS_2 := $(patsubst %.y, %.o, $(OBJECTS_3))
 OBJECTS_1 := $(patsubst %.c, %.o, $(OBJECTS_2))
 OBJECTS := $(patsubst %.cc, %.o, $(OBJECTS_1))
 
@@ -379,17 +378,17 @@ bin-dist:
 	if [ -n "$(BINDISTLIBS)" ]; then \
 	  echo $(BINDISTLIBS) >> ../`cat ../.fname`/LIBRARIES ; \
 	fi
 .PHONY: bin-dist
 
 # Special rules -- these files need special things to be defined.
 
 parse.cc : parse.y
-	@echo "expect 12 shift/reduce conflicts"
+	@echo "expect 10 shift/reduce conflicts"
 	$(YACC) $(YFLAGS) $<
 	@$(top_srcdir)/move-if-change y.tab.c $(@F)
 
 lex.cc : lex.l
 	$(LEX) $(LFLAGS) $< > $(@F)
 
 defaults.h: defaults.h.in ../Makeconf Makefile
 	@$(do-subst-default-vals)
diff --git a/src/symtab.cc b/src/symtab.cc
--- a/src/symtab.cc
+++ b/src/symtab.cc
@@ -29,49 +29,47 @@ Software Foundation, 59 Temple Place - S
 #endif
 
 #include <cctype>
 
 #include "glob-match.h"
 #include "str-vec.h"
 
 #include "error.h"
-#include "oct-fcn.h"
-#include "oct-sym.h"
 #include "oct-var-ref.h"
+#include "ov.h"
 #include "symtab.h"
 #include "utils.h"
 #include "variables.h"
 
 // Variables and functions.
 
-symbol_def::symbol_def (octave_symbol *sym, unsigned int sym_type)
+symbol_def::symbol_def (void)
 {
   init_state ();
-  definition = sym;
+}
+
+symbol_def::symbol_def (const octave_value& val, unsigned int sym_type)
+{
+  init_state ();
+  definition = val;
   type = sym_type;
 }
 
 void
 symbol_def::init_state (void)
 {
   type = UNKNOWN;
   eternal = 0;
   read_only = 0;
 
-  definition = 0;
   next_elem = 0;
   count = 0;
 }
 
-symbol_def::~symbol_def (void)
-{
-  delete definition;
-}
-
 bool
 symbol_def::is_variable (void) const
 {
   return (type & USER_VARIABLE || type & BUILTIN_VARIABLE);
 }
 
 bool
 symbol_def::is_function (void) const
@@ -118,19 +116,19 @@ symbol_def::is_builtin_function (void) c
 // XXX FIXME XXX
 bool
 symbol_def::is_map_element (const string& /* elts */) const
 {
   return false;
 }
 
 void
-symbol_def::define (octave_symbol *s, unsigned int sym_type)
+symbol_def::define (const octave_value& val, unsigned int sym_type)
 {
-  definition = s;
+  definition = val;
 
   type = sym_type;
 }
 
 void
 symbol_def::protect (void)
 {
   read_only = 1;
@@ -144,18 +142,18 @@ symbol_def::unprotect (void)
 }
 
 void
 symbol_def::make_eternal (void)
 {
   eternal = 1;
 }
 
-octave_symbol *
-symbol_def::def (void) const
+octave_value&
+symbol_def::def (void)
 {
   return definition;
 }
 
 string
 symbol_def::help (void) const
 {
   return help_string;
@@ -216,20 +214,22 @@ string
 symbol_record::help (void) const
 {
   string retval;
   if (definition)
     retval = definition->help ();
   return retval;
 }
 
-octave_symbol *
-symbol_record::def (void) const
+octave_value&
+symbol_record::def (void)
 {
-  return definition ? definition->def () : false;
+  static octave_value foo;
+
+  return definition ? definition->def () : foo;
 }
 
 void
 symbol_record::rename (const string& new_name)
 {
   if (! read_only_error ("rename"))
     nm = new_name;
 }
@@ -292,17 +292,17 @@ unsigned int
 symbol_record::type (void) const
 {
   return definition ? definition->type : false;
 }
 
 bool
 symbol_record::is_defined (void) const
 {
-  return definition ? (definition->def () != 0) : false;
+  return (definition != 0);
 }
 
 bool
 symbol_record::is_read_only (void) const
 {
   return definition ? definition->read_only : false;
 }
 
@@ -366,17 +366,17 @@ symbol_record::define (const octave_valu
 	{
 	  push_def (new symbol_def ());
 	  definition->count = 1;
 	}
 
       if (definition->symbol_type () == symbol_def::BUILTIN_VARIABLE)
 	sym_type = symbol_def::BUILTIN_VARIABLE;
 
-      definition->define (new octave_value (v), sym_type);
+      definition->define (v, sym_type);
     }
 
   return retval;
 }
 
 int
 symbol_record::define_builtin_var (const octave_value& v)
 {
@@ -401,18 +401,17 @@ symbol_record::define_as_fcn (const octa
     }
 
   if (is_function ())
     {
       symbol_def *old_def = pop_def ();
       maybe_delete (old_def);
     }
 
-  push_def (new symbol_def (new octave_value (v),
-			    symbol_def::BUILTIN_FUNCTION));
+  push_def (new symbol_def (v, symbol_def::BUILTIN_FUNCTION));
 
   definition->count = 1;
 
   return 1;
 }
 
 int
 symbol_record::define (octave_function *f, unsigned int sym_type)
@@ -427,17 +426,19 @@ symbol_record::define (octave_function *
     }
 
   if (is_function ())
     {
       symbol_def *old_def = pop_def ();
       maybe_delete (old_def);
     }
 
-  push_def (new symbol_def (f, sym_type));
+  octave_value tmp (f);
+
+  push_def (new symbol_def (tmp, sym_type));
 
   definition->count = 1;
 
   return 1;
 }
 
 void
 symbol_record::document (const string& h)
@@ -497,73 +498,74 @@ bool
 symbol_record::is_formal_parameter (void) const
 {
   return formal_param;
 }
 
 void
 symbol_record::mark_as_linked_to_global (void)
 {
-  linked_to_global = 1;
+  if (is_formal_parameter ())
+    error ("can't make function parameter `%s' global", nm.c_str ());
+  else if (is_static ())
+    error ("can't make static variable `%s' global", nm.c_str ());
+  else
+    linked_to_global = 1;
 }
 
 bool
 symbol_record::is_linked_to_global (void) const
 {
   return linked_to_global;
 }
 
 void
 symbol_record::mark_as_static (void)
 {
   if (is_linked_to_global ())
-    error ("can't make global variable static");
+    error ("can't make global variable `%s' static", nm.c_str ());
   else if (is_formal_parameter ())
-    error ("can't make formal parameter static");
+    error ("can't make formal parameter `%s' static", nm.c_str ());
   else
     tagged_static = 1;
 }
 
 bool
 symbol_record::is_static (void) const
 {
   return tagged_static;
 }
 
-octave_value
-symbol_record::variable_value (void) const
+octave_value&
+symbol_record::variable_value (void)
 {
-  octave_value retval;
+  static octave_value foo;
 
-  if (is_variable ())
-    {
-      octave_symbol *tmp = def ();
-      retval = tmp->eval ();
-    }
-
-  return retval;
+  return is_variable () ? def () : foo;
 }
 
 octave_variable_reference
 symbol_record::variable_reference (void)
 {
   if (is_function ())
     clear ();
 
   if (! is_defined ())
     {
       if (! (is_formal_parameter () || is_linked_to_global ()))
 	link_to_builtin_variable (this);
 
       if (! is_defined ())
-	define (octave_value ());
+	{
+	  octave_value tmp;
+	  define (tmp);
+	}
     }
 
-  return octave_variable_reference
-    (static_cast<octave_value *> (def ()), sv_fcn);
+  return octave_variable_reference (&(def ()), sv_fcn);
 }
 
 symbol_record *
 symbol_record::next (void) const
 {
   return next_elem;
 }
 
@@ -657,33 +659,29 @@ symbol_record::pop_def (void)
 
 // A structure for handling verbose information about a symbol_record.
 
 symbol_record_info::symbol_record_info (void)
   : initialized (0), nr (-1), nc (-1), type (symbol_def::UNKNOWN),
     hides (SR_INFO_NONE), eternal (0), read_only (0), nm (),
     const_type () { }
 
-symbol_record_info::symbol_record_info (const symbol_record& sr)
+symbol_record_info::symbol_record_info (symbol_record& sr)
   : initialized (0), nr (-1), nc (-1), type (sr.type ()),
     hides (SR_INFO_NONE), eternal (0), read_only (0), nm (),
     const_type ()
 {
   if (sr.is_variable () && sr.is_defined ())
     {
-      // Would be nice to avoid this cast.  XXX FIXME XXX
-
-      octave_symbol *tmp = sr.def ();
+      octave_value tmp = sr.def ();
 
-      octave_value vtmp = tmp->eval ();
+      const_type = tmp.type_name ();
 
-      const_type = vtmp.type_name ();
-
-      nr = vtmp.rows ();
-      nc = vtmp.columns ();
+      nr = tmp.rows ();
+      nc = tmp.columns ();
 
       symbol_def *sr_def = sr.definition;
       symbol_def *hidden_def = sr_def->next_elem;
 
       if (hidden_def)
 	{
 	  if (hidden_def->is_user_function ())
 	    hides = SR_INFO_USER_FUNCTION;
diff --git a/src/symtab.h b/src/symtab.h
--- a/src/symtab.h
+++ b/src/symtab.h
@@ -28,23 +28,22 @@ Software Foundation, 59 Temple Place - S
 #endif
 
 #include <string>
 
 #include "SLStack.h"
 
 #include "str-vec.h"
 
+#include "ov.h"
+
 // Must be multiple of 2.
 #define HASH_TABLE_SIZE 1024
 #define HASH_MASK (HASH_TABLE_SIZE - 1)
 
-class octave_symbol;
-class octave_function;
-class octave_value;
 class octave_variable_reference;
 
 class string_vector;
 
 class symbol_def;
 class symbol_record;
 class symbol_record_info;
 class symbol_table;
@@ -53,37 +52,39 @@ class symbol_table;
 
 class symbol_def
 {
   friend class symbol_record;
   friend class symbol_record_info;
 
 public:
 
-  symbol_def (octave_symbol *sym = 0, unsigned int sym_type = 0);
+  symbol_def (void);
 
-  ~symbol_def (void);
+  symbol_def (const octave_value& val, unsigned int sym_type = 0);
+
+  ~symbol_def (void) { }
 
   bool is_variable (void) const;
   bool is_function (void) const;
   bool is_text_function (void) const;
   bool is_mapper_function (void) const;
   bool is_user_variable (void) const;
   bool is_user_function (void) const;
   bool is_builtin_variable (void) const;
   bool is_builtin_function (void) const;
   bool is_map_element (const string& elts) const;
 
-  void define (octave_symbol *sym, unsigned int sym_type);
+  void define (const octave_value& val, unsigned int sym_type);
 
   void protect (void);
   void unprotect (void);
   void make_eternal (void);
 
-  octave_symbol *def (void) const;
+  octave_value& def (void);
   string help (void) const;
   void document (const string& h);
 
   enum TYPE
     {
       UNKNOWN = 0,
       USER_FUNCTION = 1,
       USER_VARIABLE = 2,
@@ -99,17 +100,17 @@ public:
 
 private:
 
   unsigned int type : 6;
   unsigned int eternal : 1;
   unsigned int read_only : 1;
 
   string help_string;
-  octave_symbol *definition;
+  octave_value definition;
   symbol_def *next_elem;
   int count;
 
   void init_state (void);
 
   symbol_def (const symbol_def& sd);
   symbol_def& operator = (const symbol_def& sd);
 };
@@ -127,17 +128,18 @@ public:
 
   symbol_record (void);
   symbol_record (const string& n, symbol_record *nxt = 0);
 
   ~symbol_record (void) { }
 
   string name (void) const;
   string help (void) const; 
-  octave_symbol *def (void) const;
+
+  octave_value& def (void);
 
   void rename (const string& new_name);
 
   bool is_function (void) const;
   bool is_user_function (void) const;
   bool is_text_function (void) const;
   bool is_mapper_function (void) const;
   bool is_builtin_function (void) const;
@@ -177,17 +179,17 @@ public:
   bool is_formal_parameter (void) const;
 
   void mark_as_linked_to_global (void);
   bool is_linked_to_global (void) const;
 
   void mark_as_static (void);
   bool is_static (void) const;
 
-  octave_value variable_value (void) const;
+  octave_value& variable_value (void);
   octave_variable_reference variable_reference (void);
 
   symbol_record *next (void) const;
 
   void chain (symbol_record *s);
 
   void push_context (void);
   void pop_context (void);
@@ -221,17 +223,17 @@ private:
 // A structure for handling verbose information about a symbol_record.
 
 class
 symbol_record_info
 {
 public:
 
   symbol_record_info (void);
-  symbol_record_info (const symbol_record& s);
+  symbol_record_info (symbol_record& s);
 
   symbol_record_info (const symbol_record_info& s);
 
   ~symbol_record_info (void) { }
 
   symbol_record_info& operator = (const symbol_record_info& s);
 
   bool is_defined (void) const;
diff --git a/src/variables.cc b/src/variables.cc
--- a/src/variables.cc
+++ b/src/variables.cc
@@ -58,19 +58,18 @@ Software Foundation, 59 Temple Place - S
 #include "fn-cache.h"
 #include "gripes.h"
 #include "help.h"
 #include "input.h"
 #include "lex.h"
 #include "sysdep.h"
 #include "oct-hist.h"
 #include "oct-map.h"
-#include "oct-mapper.h"
+#include "ov-mapper.h"
 #include "oct-obj.h"
-#include "oct-sym.h"
 #include "ov.h"
 #include "pager.h"
 #include "parse.h"
 #include "pt-id.h"
 #include "pt-indir.h"
 #include "symtab.h"
 #include "toplev.h"
 #include "unwind-prot.h"
@@ -170,20 +169,20 @@ bool
 is_globally_visible (const string& name)
 {
   symbol_record *sr = curr_sym_tab->lookup (name);
   return (sr && sr->is_linked_to_global ());
 }
 
 // Is this octave_value a valid function?
 
-octave_symbol *
+octave_function *
 is_valid_function (const octave_value& arg, const string& warn_for, bool warn)
 {
-  octave_symbol *ans = 0;
+  octave_function *ans = 0;
 
   string fcn_name;
 
   if (arg.is_string ())
     fcn_name = arg.string_value ();
 
   if (fcn_name.empty () || error_state)
     {
@@ -194,35 +193,38 @@ is_valid_function (const octave_value& a
     }
 
   symbol_record *sr = 0;
 
   if (! fcn_name.empty ())
     sr = lookup_by_name (fcn_name);
 
   if (sr)
-    ans = sr->def ();
+    {
+      octave_value tmp = sr->def ();
+      ans = tmp.function_value (true);
+    }
 
   if (! sr || ! ans || ! sr->is_function ())
     {
       if (warn)
 	error ("%s: the symbol `%s' is not valid as a function",
 	       warn_for.c_str (), fcn_name.c_str ());
       ans = 0;
     }
 
   return ans;
 }
 
-octave_symbol *
+octave_function *
 extract_function (const octave_value& arg, const string& warn_for,
 		  const string& fname, const string& header,
 		  const string& trailer)
 {
-  octave_symbol *retval = 0;
+  octave_function *retval = 0;
 
   retval = is_valid_function (arg, warn_for, 0);
 
   if (! retval)
     {
       string s = arg.string_value ();
 
       string cmd = header;
@@ -327,38 +329,33 @@ generate_struct_completions (const strin
 
   symbol_record *sr = curr_sym_tab->lookup (id);
 
   if (! sr)
     sr = global_sym_tab->lookup (id);
 
   if (sr && sr->is_defined ())
     {
-      octave_symbol *tmp = sr->def ();
-
-      octave_value vtmp;
-
-      if (tmp->is_constant ())
-	vtmp = tmp->eval ();
+      octave_value tmp = sr->def ();
 
       // XXX FIXME XXX -- make this work for all types that can do
       // structure reference operations.
-      if (vtmp.is_map ())
+      if (tmp.is_map ())
 	{
 	  for (int i = 1; i < elts.length (); i++)
 	    {
-	      vtmp = vtmp.do_struct_elt_index_op (elts[i], true);
+	      tmp = tmp.do_struct_elt_index_op (elts[i], true);
 
-	      if (! vtmp.is_map ())
+	      if (! tmp.is_map ())
 		break;
 	    }
 
-	  if (vtmp.is_map ())
+	  if (tmp.is_map ())
 	    {
-	      Octave_map m = vtmp.map_value ();
+	      Octave_map m = tmp.map_value ();
 
 	      names = m.make_name_list ();
 	    }
 	}
     }
 
   return names;
 }
@@ -374,33 +371,28 @@ looks_like_struct (const string& text)
 
   symbol_record *sr = curr_sym_tab->lookup (id);
 
   if (! sr)
     sr = global_sym_tab->lookup (id);
 
   if (sr && sr->is_defined ())
     {
-      octave_symbol *tmp = sr->def ();
-
-      octave_value vtmp;
-
-      if (tmp->is_constant ())
-	vtmp = tmp->eval ();
+      octave_value tmp = sr->def ();
 
       // XXX FIXME XXX -- should this work for all types that can do
       // structure reference operations?
 
-      if (vtmp.is_map ())
+      if (tmp.is_map ())
 	{
 	  for (int i = 1; i < elts.length (); i++)
 	    {
-	      vtmp = vtmp.do_struct_elt_index_op (elts[i], true);
+	      tmp = tmp.do_struct_elt_index_op (elts[i], true);
 
-	      if (! vtmp.is_map ())
+	      if (! tmp.is_map ())
 		{
 		  retval = false;
 		  break;
 		}
 	    }
 	}
       else
 	retval = false;
@@ -533,32 +525,37 @@ returns:\n\
 
 static bool
 symbol_out_of_date (symbol_record *sr)
 {
   bool retval = false;
 
   if (Vignore_function_time_stamp != 2 && sr)
     {
-      octave_symbol *ans = sr->def ();
-      if (ans)
+      octave_value ans = sr->def ();
+
+      if (! Vignore_function_time_stamp && ans.is_defined ())
 	{
-	  string ff = ans->fcn_file_name ();
-	  if (! ff.empty ()
-	      && ! (Vignore_function_time_stamp
-		    && ans->is_system_fcn_file ()))
+	  octave_function *tmp = ans.function_value (true);
+
+	  if (tmp && tmp->is_system_fcn_file ())
 	    {
-	      time_t tp = ans->time_parsed ();
+	      string ff = tmp->fcn_file_name ();
 
-	      string fname = fcn_file_in_path (ff);
+	      if (! ff.empty ())
+		{
+		  time_t tp = tmp->time_parsed ();
 
-	      int status = file_stat::is_newer (fname, tp);
+		  string fname = fcn_file_in_path (ff);
+
+		  int status = file_stat::is_newer (fname, tp);
 
-	      if (status > 0)
-		retval = true;
+		  if (status > 0)
+		    retval = true;
+		}
 	    }
 	}
     }
 
   return retval;
 }
 
 static bool
@@ -940,21 +937,19 @@ octave_value
 get_global_value (const string& nm)
 {
   octave_value retval;
 
   symbol_record *sr = global_sym_tab->lookup (nm);
 
   if (sr)
     {
-      octave_symbol *sr_def = sr->def ();
+      octave_value sr_def = sr->def ();
 
-      if (sr_def)
-	retval  = sr_def->eval ();
-      else
+      if (sr_def.is_undefined ())
 	error ("get_global_by_name: undefined symbol `%s'", nm.c_str ());
     }
   else
     error ("get_global_by_name: unknown symbol `%s'", nm.c_str ());
 
   return retval;
 }
 
@@ -1002,25 +997,20 @@ builtin_string_variable (const string& n
   symbol_record *sr = global_sym_tab->lookup (name);
 
   // It is a prorgramming error to look for builtins that aren't.
 
   assert (sr);
 
   string retval;
 
-  octave_symbol *defn = sr->def ();
+  octave_value val = sr->def ();
 
-  if (defn)
-    {
-      octave_value val = defn->eval ();
-
-      if (! error_state && val.is_string ())
-	retval = val.string_value ();
-    }
+  if (! error_state && val.is_string ())
+    retval = val.string_value ();
 
   return retval;
 }
 
 // Look for the given name in the global symbol table.  If it refers
 // to a real scalar, place the value in d and return 1.  Otherwise,
 // return 0.
 
@@ -1029,105 +1019,75 @@ builtin_real_scalar_variable (const stri
 {
   int status = 0;
   symbol_record *sr = global_sym_tab->lookup (name);
 
   // It is a prorgramming error to look for builtins that aren't.
 
   assert (sr);
 
-  octave_symbol *defn = sr->def ();
-
-  if (defn)
-    {
-      octave_value val = defn->eval ();
+  octave_value val = sr->def ();
 
-      if (! error_state && val.is_scalar_type ())
-	{
-	  d = val.double_value ();
-	  status = 1;
-	}
+  if (! error_state && val.is_scalar_type ())
+    {
+      d = val.double_value ();
+      status = 1;
     }
 
   return status;
 }
 
 // Look for the given name in the global symbol table.
 
 octave_value
 builtin_any_variable (const string& name)
 {
-  octave_value retval;
-
   symbol_record *sr = global_sym_tab->lookup (name);
 
   // It is a prorgramming error to look for builtins that aren't.
 
   assert (sr);
 
-  octave_symbol *defn = sr->def ();
-
-  if (defn)
-    retval = defn->eval ();
-
-  return retval;
+  return sr->def ();
 }
 
 // Global stuff and links to builtin variables and functions.
 
 // Make the definition of the symbol record sr be the same as the
 // definition of the global variable of the same name, creating it if
 // it doesn't already exist.
 
 void
 link_to_global_variable (symbol_record *sr)
 {
-  if (sr->is_linked_to_global ())
-    return;
-
-  string nm = sr->name ();
-
-  symbol_record *gsr = global_sym_tab->lookup (nm, true);
-
-  if (sr->is_formal_parameter ())
+  if (! sr->is_linked_to_global ())
     {
-      error ("can't make function parameter `%s' global", nm.c_str ());
-      return;
-    }
+      sr->mark_as_linked_to_global ();
 
-  if (sr->is_static ())
-    {
-      error ("can't make static variable `%s' global", nm.c_str ());
-      return;
-    }
+      if (! error_state)
+	{
+	  string nm = sr->name ();
 
-  // There must be a better way to do this.   XXX FIXME XXX
+	  symbol_record *gsr = global_sym_tab->lookup (nm, true);
+
+	  // There must be a better way to do this.   XXX FIXME XXX
 
-  if (sr->is_variable ())
-    {
-      octave_symbol *tmp = sr->def ();
+	  if (sr->is_variable ())
+	    gsr->define (sr->def ());
+	  else
+	    sr->clear ();
 
-      octave_value vtmp;
+	  // Make sure this symbol is a variable.
 
-      if (tmp)
-	vtmp = tmp->eval ();
+	  if (! gsr->is_variable ())
+	    gsr->define (octave_value ());
 
-      gsr->define (vtmp);
+	  sr->alias (gsr, 1);
+	}
     }
-  else
-    sr->clear ();
-
-  // If the global symbol is currently defined as a function, we need
-  // to hide it with a variable.
-
-  if (gsr->is_function ())
-    gsr->define (octave_value ());
-
-  sr->alias (gsr, 1);
-  sr->mark_as_linked_to_global ();
 }
 
 // Make the definition of the symbol record sr be the same as the
 // definition of the builtin variable of the same name.
 
 void
 link_to_builtin_variable (symbol_record *sr)
 {
@@ -1497,104 +1457,16 @@ character, but may not be combined.")
   if (error_state)
     return retval;
 
   retval = do_who (argc, argv);
 
   return retval;
 }
 
-// Install variables and functions in the symbol tables.
-
-void
-install_builtin_mapper (octave_mapper *mf)
-{
-  symbol_record *sym_rec = global_sym_tab->lookup (mf->name (), true);
-
-  unsigned int t
-    = symbol_def::BUILTIN_FUNCTION | symbol_def::MAPPER_FUNCTION;
-
-  sym_rec->unprotect ();
-  sym_rec->define (mf, t);
-  sym_rec->document (mf->doc_string ());
-  sym_rec->make_eternal ();
-  sym_rec->protect ();
-}
-
-void
-install_builtin_function (octave_builtin *f, bool is_text_fcn)
-{
-  symbol_record *sym_rec = global_sym_tab->lookup (f->name (), true);
-
-  unsigned int t
-    = symbol_def::BUILTIN_FUNCTION | symbol_def::MAPPER_FUNCTION;
-
-  if (is_text_fcn)
-    t |= symbol_def::TEXT_FUNCTION;
-
-  sym_rec->unprotect ();
-  sym_rec->define (f, t);
-  sym_rec->document (f->doc_string ());
-  sym_rec->make_eternal ();
-  sym_rec->protect ();
-}
-
-void
-install_builtin_variable (const string& name, const octave_value& value,
-			  bool install_as_function, bool protect,
-			  bool eternal, symbol_record::sv_function sv_fcn,
-			  const string& help_string)
-{
-  if (install_as_function)
-    install_builtin_variable_as_function (name, value, protect,
-					  eternal, help_string);
-  else
-    bind_builtin_variable (name, value, protect, eternal,
-			   sv_fcn, help_string);
-}
-
-void
-install_builtin_variable_as_function (const string& name,
-				      const octave_value& val,
-				      bool protect, bool eternal,
-				      const string& help)
-{
-  symbol_record *sym_rec = global_sym_tab->lookup (name, true);
-  sym_rec->unprotect ();
-
-  string tmp_help = help.empty () ? sym_rec->help () : help;
-
-  sym_rec->define_as_fcn (val);
-
-  sym_rec->document (tmp_help);
-
-  if (protect)
-    sym_rec->protect ();
-
-  if (eternal)
-    sym_rec->make_eternal ();
-}
-
-void
-alias_builtin (const string& alias, const string& name)
-{
-  symbol_record *sr_name = global_sym_tab->lookup (name);
-
-  if (! sr_name)
-    panic ("can't alias to undefined name!");
-
-  symbol_record *sr_alias = global_sym_tab->lookup (alias, true);
-
-  if (sr_alias)
-    sr_alias->alias (sr_name);
-  else
-    panic ("can't find symbol record for builtin function `%s'",
-	   alias.c_str ());
-}
-
 // Defining variables.
 
 void
 bind_ans (const octave_value& val, bool print)
 {
   static symbol_record *sr = global_sym_tab->lookup ("ans", true);
 
   sr->define (val);
diff --git a/src/variables.h b/src/variables.h
--- a/src/variables.h
+++ b/src/variables.h
@@ -18,31 +18,32 @@ You should have received a copy of the G
 along with Octave; see the file COPYING.  If not, write to the Free
 Software Foundation, 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 
 */
 
 #if !defined (octave_variables_h)
 #define octave_variables_h 1
 
-class octave_symbol;
+class octave_function;
 class symbol_record;
 class symbol_table;
 
 class tree_identifier;
 class tree_indirect_ref;
 class octave_value;
 class octave_value_list;
 class octave_builtin;
 class octave_mapper;
 class string_vector;
 
 #include <string>
 
 #include "ov.h"
+#include "ov-builtin.h"
 #include "symtab.h"
 
 typedef octave_value_list (*Octave_builtin_fcn)(const octave_value_list&, int);
 
 extern void initialize_symbol_tables (void);
 
 extern bool lookup (symbol_record *s, bool exec_script = true);
 
@@ -66,56 +67,36 @@ extern void link_to_builtin_or_function 
 extern void force_link_to_function (const string&);
 
 extern bool is_builtin_variable (const string&);
 extern bool is_text_function_name (const string&);
 extern bool is_mapper_function_name (const string&);
 extern bool is_builtin_function_name (const string&);
 extern bool is_globally_visible (const string&);
 
-extern octave_symbol *
+extern octave_function *
 is_valid_function (const octave_value&, const string&, bool warn = false); 
 
-extern octave_symbol *
+extern octave_function *
 extract_function (const octave_value& arg, const string& warn_for,
 		  const string& fname, const string& header,
 		  const string& trailer);
 
 extern string_vector
 get_struct_elts (const string& text);
 
 extern bool
 looks_like_struct (const string& text);
 
 extern string_vector
 generate_struct_completions (const string& text, string& prefix,
 			     string& hint);
 
 extern string_vector make_name_list (void);
 
-extern void
-install_builtin_mapper (octave_mapper *mf);
-
-extern void
-install_builtin_function (octave_builtin *f, bool is_text_fcn = false);
-
-extern void
-install_builtin_variable (const string& n, const octave_value& v,
-			  bool iaf, bool p, bool e,
-			  symbol_record::sv_function svf, const string& h);
-
-extern void
-install_builtin_variable_as_function (const string& name,
-				      const octave_value& val,
-				      bool protect = false,
-				      bool eternal = false,
-				      const string& help = string ());
-
-extern void alias_builtin (const string& alias, const string& name);
-
 extern void bind_ans (const octave_value& val, bool print);
 
 extern void bind_global_error_variable (void);
 
 extern void clear_global_error_variable (void *);
 
 extern void
 bind_builtin_variable (const string&, const octave_value&,
