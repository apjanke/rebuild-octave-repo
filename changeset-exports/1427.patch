# HG changeset patch
# User jwe
# Date 811482676 0
#      Tue Sep 19 03:51:16 1995 +0000
# Node ID a2305feef016f5c8260f843c884952ad3f51f300
# Parent  29f274b42cb1fc19cd3fa271a620e6c56ea5078e
[project @ 1995-09-19 03:51:16 by jwe]

diff --git a/src/load-save.cc b/src/load-save.cc
--- a/src/load-save.cc
+++ b/src/load-save.cc
@@ -1209,36 +1209,57 @@ extract_keyword (istream& is, char *keyw
 //         | global <typename>
 //
 //  <typename> : scalar
 //             | complex scalar
 //             | matrix
 //             | complex matrix
 //             | string
 //             | range
+//             | string array
 //
 //  <info> : <matrix info>
 //         | <string info>
+//         | <string array info>
 //
 //  <matrix info> : # rows: <integer>
-//                | # columns: <integer>
+//                : # columns: <integer>
 //
-//  <string info> : # len: <integer>
+//  <string info> : # length: <integer>
+//
+//  <string array info> : # elements: <integer>
+//                      : # length: <integer> (once before each string)
 //
 // Formatted ASCII data follows the header.
 //
 // Example:
 //
 //  # name: foo
 //  # type: matrix
 //  # rows: 2
 //  # columns: 2
 //    2  4
 //    1  3
 //
+// Example:
+//
+//  # name: foo
+//  # type: string array
+//  # elements: 5
+//  # length: 4
+//  this
+//  # length: 2
+//  is
+//  # length: 1
+//  a
+//  # length: 6
+//  string
+//  # length: 5
+//  array
+//
 // XXX FIXME XXX -- this format is fairly rigid, and doesn't allow for
 // arbitrary comments, etc.  Someone should fix that.
 
 static char *
 read_ascii_data (istream& is, const char *filename, int& global,
 		 tree_constant& tc)
 {
   // Read name for this entry or break on EOF.
@@ -1337,16 +1358,47 @@ read_ascii_data (istream& is, const char
 	      if (is)
 		tc = tmp;
 	      else
 		error ("load: failed to load complex matrix constant");
 	    }
 	  else
 	    error ("load: failed to extract number of rows and columns");
 	}
+      else if (strncmp (ptr, "string array", 12) == 0)
+	{
+	  int elements;
+	  if (extract_keyword (is, "elements", elements) && elements > 0)
+	    {
+	      Octave_str_obj s (elements);
+	      for (int i = 0; i < elements; i++)
+		{
+		  int len;
+		  if (extract_keyword (is, "length", len) && len > 0)
+		    {
+		      char *tmp = new char [len];
+		      if (! is.read (tmp, len))
+			{
+			  error ("load: failed to load string constant");
+			  break;
+			}
+		      else
+			s.elem (i).assign (tmp, len);
+		      delete [] tmp;
+		    }
+		  else
+		    error ("load: failed to extract string length for element %d", i+1);
+		}
+
+	      if (! error_state)
+		tc = s;
+	    }
+	  else
+	    error ("load: failed to extract number of string elements");
+	}
       else if (strncmp (ptr, "string", 6) == 0)
 	{
 	  int len;
 	  if (extract_keyword (is, "length", len) && len > 0)
 	    {
 	      char *tmp = new char [len+1];
 	      is.get (tmp, len+1, EOF);
 	      if (is)
@@ -1442,16 +1494,23 @@ read_ascii_data (istream& is, const char
 //       length           int                 4
 //       data             string         length
 //
 //     range:
 //       base             real                8
 //       limit            real                8
 //       increment        real                8
 //
+//     string array
+//       elements         int                 4
+//
+//       for each element:
+//         length         int                 4
+//         data           string         length
+//
 // FILENAME is used for error messages.
 
 static char *
 read_binary_data (istream& is, int swap, floating_point_format fmt,
 		  const char *filename, int& global,
 		  tree_constant& tc, char *&doc)
 {
   char tmp = 0;
@@ -1564,19 +1623,17 @@ read_binary_data (istream& is, int swap,
 	if (error_state || ! is)
 	  goto data_read_error;
 	tc = m;
       }
       break;
 
     case 5:
       {
-	int nr = tc.rows ();
-	int nc = tc.columns ();
-	FOUR_BYTE_INT len = nr * nc;
+	FOUR_BYTE_INT len;
 	if (! is.read (&len, 4))
 	  goto data_read_error;
 	if (swap)
 	  swap_4_bytes ((char *) &len);
 	char *s = new char [len+1];
 	if (! is.read (s, len))
 	  {
 	    delete [] s;
@@ -1604,16 +1661,44 @@ read_binary_data (istream& is, int swap,
 	  goto data_read_error;
 	if (swap)
 	  swap_8_bytes ((char *) &inc);
 	Range r (bas, lim, inc);
 	tc = r;
       }
       break;
 
+    case 7:
+      {
+	FOUR_BYTE_INT elements;
+	if (! is.read (&elements, 4))
+	  goto data_read_error;
+	if (swap)
+	  swap_4_bytes ((char *) &elements);
+	Octave_str_obj s (elements);
+	for (int i = 0; i < elements; i++)
+	  {
+	    FOUR_BYTE_INT len;
+	    if (! is.read (&len, 4))
+	      goto data_read_error;
+	    if (swap)
+	      swap_4_bytes ((char *) &len);
+	    char *tmp = new char [len];
+	    if (! is.read (tmp, len))
+	      {
+		delete [] tmp;
+		goto data_read_error;
+	      }
+	    s.elem (i).assign (tmp, len);
+	    delete [] tmp;
+	  }
+	tc = s;
+      }
+      break;
+
     default:
     data_read_error:
       error ("load: trouble reading binary file `%s'", filename);
       delete [] name;
       name = 0;
       break;
     }
 
@@ -1861,19 +1946,17 @@ read_mat_binary_data (istream& is, const
 	for (int i = 0; i < nr; i++)
 	  ctmp.elem (i, j) = Complex (re.elem (i, j), im.elem (i, j));
 
       tc = ctmp;
     }
   else
     tc = re;
 
-  // XXX FIXME XXX -- this needs to change once strings really work.
-
-  if (type == 1 && nr == 1)
+  if (type == 1)
     tc = tc.convert_to_str ();
 
   return name;
 
  data_read_error:
   error ("load: trouble reading binary file `%s'", filename);
   delete [] name;
   return 0;
@@ -2296,17 +2379,17 @@ get_save_type (double max_val, double mi
   else if (max_val < 2147483648 && min_val > -2147483648)
     st = LS_INT;
 
   return st;
 }
 
 // Save the data from TC along with the corresponding NAME, help
 // string DOC, and global flag MARK_AS_GLOBAL on stream OS in the
-// binary format described above for load_binary_data.
+// binary format described above for read_binary_data.
 
 static int
 save_binary_data (ostream& os, const tree_constant& tc, char *name,
 		  char *doc, int mark_as_global, int save_as_floats) 
 {
   int fail = 0;
 
   FOUR_BYTE_INT name_len = 0;
@@ -2403,24 +2486,28 @@ save_binary_data (ostream& os, const tre
 	  if (all_parts_int (m, max_val, min_val))
 	    st = get_save_type (max_val, min_val);
 	}
       const Complex *mtmp = m.data ();
       write_doubles (os, (const double *) mtmp, st, 2*len);
     }
   else if (tc.is_string ())
     {
-      tmp = 5;
+      tmp = 7;
       os.write (&tmp, 1);
-      int nr = tc.rows ();
-      int nc = tc.columns ();
-      FOUR_BYTE_INT len = nr * nc;
-      os.write (&len, 4);
-      const char *s = tc.string_value ();
-      os.write (s, len);
+      FOUR_BYTE_INT nr = tc.rows ();
+      os.write (&nr, 4);
+      Octave_str_obj s = tc.all_strings ();
+      for (int i = 0; i < nr; i++)
+	{
+	  FOUR_BYTE_INT len = s.elem (i).length ();
+	  os.write (&len, 4);
+	  const char *tmp = s.elem (i).data ();
+	  os.write (tmp, len);
+	}
     }
   else if (tc.is_range ())
     {
       tmp = 6;
       os.write (&tmp, 1);
       tmp = (char) LS_DOUBLE;
       os.write (&tmp, 1);
       Range r = tc.range_value ();
@@ -2706,20 +2793,27 @@ save_ascii_data (ostream& os, const tree
       ComplexMatrix tmp = tc.complex_matrix_value ();
       if (strip_nan_and_inf)
 	tmp = strip_infnan (tmp);
 
       os << tmp;
     }
   else if (tc.is_string ())
     {
-      ascii_save_type (os, "string", mark_as_global);
-      const char *tmp = tc.string_value ();
-      os << "# length: " << strlen (tmp) << "\n"
-	 << tmp << "\n";
+      ascii_save_type (os, "string array", mark_as_global);
+      Octave_str_obj tmp = tc.all_strings ();
+      int elements = tmp.length ();
+      os << "# elements: " << elements << "\n";
+      for (int i = 0; i < elements; i++)
+	{
+	  int len = tmp.elem (i).length ();
+	  os << "# length: " << len << "\n";
+	  os.write (tmp.elem (i).data (), len);
+	  os << "\n";
+	}
     }
   else if (tc.is_range ())
     {
       ascii_save_type (os, "range", mark_as_global);
       Range tmp = tc.range_value ();
       os << "# base, limit, increment\n"
 	 << tmp.base () << " "
 	 << tmp.limit () << " "
