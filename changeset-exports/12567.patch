# HG changeset patch
# User Rik <octave@nomad.inbox5.com>
# Date 1301714358 25200
#      Fri Apr 01 20:19:18 2011 -0700
# Node ID cc8ccdfec424b013d0f885919afb53d8394cb6d4
# Parent  3b0eb443c5199da7d0e97e043c24c80a89269db7
Remove archaic 3-input argument form of diag function.

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,13 @@
+2011-04-01  Rik  <octave@nomad.inbox5.com>
+
+	* data.cc (diag): Remove archaic 3-input argument form of function.
+	Add all calling forms of function to docstring.
+
 2011-04-01  Rik  <octave@nomad.inbox5.com>
 
 	* DLD-FUNCTIONS/filter.cc: Fix orientation of initial conditions vector
 	(bug #32741).  Revamp test vectors.
 
 2011-04-01  Rik  <octave@nomad.inbox5.com>
 
 	* DLD-FUNCTIONS/__fltk_uigetfile__.cc, DLD-FUNCTIONS/__init_fltk__.cc:
diff --git a/src/data.cc b/src/data.cc
--- a/src/data.cc
+++ b/src/data.cc
@@ -1219,17 +1219,20 @@ See @code{sum} for an explanation of the
 
 %!assert (cumsum (single([1, 2; 3, 4]), 1), single([1, 2; 4, 6]));
 %!assert (cumsum (single([1, 2; 3, 4]), 2), single([1, 3; 3, 7]));
 
  */
 
 DEFUN (diag, args, ,
   "-*- texinfo -*-\n\
-@deftypefn {Built-in Function} {} diag (@var{v}, @var{k})\n\
+@deftypefn  {Built-in Function} {@var{M} =} diag (@var{v})\n\
+@deftypefnx {Built-in Function} {@var{M} =} diag (@var{v}, @var{k})\n\
+@deftypefnx {Built-in Function} {@var{v} =} diag (@var{M})\n\
+@deftypefnx {Built-in Function} {@var{v} =} diag (@var{M}, @var{k})\n\
 Return a diagonal matrix with vector @var{v} on diagonal @var{k}.  The\n\
 second argument is optional.  If it is positive, the vector is placed on\n\
 the @var{k}-th super-diagonal.  If it is negative, it is placed on the\n\
 @var{-k}-th sub-diagonal.  The default value of @var{k} is 0, and the\n\
 vector is placed on the main diagonal.  For example:\n\
 \n\
 @example\n\
 @group\n\
@@ -1256,30 +1259,16 @@ Given a matrix argument, instead of a ve
     {
       octave_idx_type k = args(1).int_value ();
 
       if (error_state)
         error ("diag: invalid argument K");
       else
         retval = args(0).diag(k);
     }
-  else if (nargin == 3)
-    {
-      octave_value arg0 = args(0);
-      if (arg0.ndims () == 2 && (args(0).rows () == 1 || args(0).columns () == 1))
-        {
-          octave_idx_type m = args(1).int_value (), n = args(2).int_value ();
-          if (! error_state)
-            retval = arg0.diag ().resize (dim_vector (m, n));
-          else
-            error ("diag: invalid dimensions");
-        }
-      else
-        error ("diag: V must be a vector");
-    }
   else
     print_usage ();
 
   return retval;
 }
 
 /*
 
@@ -1287,16 +1276,17 @@ Given a matrix argument, instead of a ve
 %!assert(diag ([1; 2; 3], 1), [0, 1, 0, 0; 0, 0, 2, 0; 0, 0, 0, 3; 0, 0, 0, 0]);
 %!assert(diag ([1; 2; 3], 2), [0, 0, 1, 0, 0; 0, 0, 0, 2, 0; 0, 0, 0, 0, 3; 0, 0, 0, 0, 0; 0, 0, 0, 0, 0]);
 %!assert(diag ([1; 2; 3],-1), [0, 0, 0, 0; 1, 0, 0, 0; 0, 2, 0, 0; 0, 0, 3, 0]);
 %!assert(diag ([1; 2; 3],-2), [0, 0, 0, 0, 0; 0, 0, 0, 0, 0; 1, 0, 0, 0, 0; 0, 2, 0, 0, 0; 0, 0, 3, 0, 0]);
 
 %!assert(diag ([1, 0, 0; 0, 2, 0; 0, 0, 3]), [1; 2; 3]);
 %!assert(diag ([0, 1, 0, 0; 0, 0, 2, 0; 0, 0, 0, 3; 0, 0, 0, 0], 1), [1; 2; 3]);
 %!assert(diag ([0, 0, 0, 0; 1, 0, 0, 0; 0, 2, 0, 0; 0, 0, 3, 0], -1), [1; 2; 3]);
+%!assert(diag (ones(1, 0), 2), zeros (2));
 
 %!assert(full (diag (single([1; 2; 3]))), single([1, 0, 0; 0, 2, 0; 0, 0, 3]));
 %!assert(diag (single([1; 2; 3]), 1), single([0, 1, 0, 0; 0, 0, 2, 0; 0, 0, 0, 3; 0, 0, 0, 0]));
 %!assert(diag (single([1; 2; 3]), 2), single([0, 0, 1, 0, 0; 0, 0, 0, 2, 0; 0, 0, 0, 0, 3; 0, 0, 0, 0, 0; 0, 0, 0, 0, 0]));
 %!assert(diag (single([1; 2; 3]),-1), single([0, 0, 0, 0; 1, 0, 0, 0; 0, 2, 0, 0; 0, 0, 3, 0]));
 %!assert(diag (single([1; 2; 3]),-2), single([0, 0, 0, 0, 0; 0, 0, 0, 0, 0; 1, 0, 0, 0, 0; 0, 2, 0, 0, 0; 0, 0, 3, 0, 0]));
 
 %!assert(diag (single([1, 0, 0; 0, 2, 0; 0, 0, 3])), single([1; 2; 3]));
@@ -1309,16 +1299,17 @@ Given a matrix argument, instead of a ve
 %!assert(diag (int8([1; 2; 3]),-1), int8([0, 0, 0, 0; 1, 0, 0, 0; 0, 2, 0, 0; 0, 0, 3, 0]));
 %!assert(diag (int8([1; 2; 3]),-2), int8([0, 0, 0, 0, 0; 0, 0, 0, 0, 0; 1, 0, 0, 0, 0; 0, 2, 0, 0, 0; 0, 0, 3, 0, 0]));
 
 %!assert(diag (int8([1, 0, 0; 0, 2, 0; 0, 0, 3])), int8([1; 2; 3]));
 %!assert(diag (int8([0, 1, 0, 0; 0, 0, 2, 0; 0, 0, 0, 3; 0, 0, 0, 0]), 1), int8([1; 2; 3]));
 %!assert(diag (int8([0, 0, 0, 0; 1, 0, 0, 0; 0, 2, 0, 0; 0, 0, 3, 0]), -1), int8([1; 2; 3]));
 
 %!error <Invalid call to diag.*> diag ();
+%!error <Invalid call to diag.*> diag (ones(3, 1),0,1);
 
  */
 
 DEFUN (prod, args, ,
   "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {} prod (@var{x})\n\
 @deftypefnx {Built-in Function} {} prod (@var{x}, @var{dim})\n\
 Product of elements along dimension @var{dim}.  If @var{dim} is\n\
diff --git a/test/ChangeLog b/test/ChangeLog
--- a/test/ChangeLog
+++ b/test/ChangeLog
@@ -1,8 +1,13 @@
+2011-04-01  Rik  <octave@nomad.inbox5.com>
+
+	* test_diag_perm.m: Update diag tests to reflect removal of archaic
+	3-input form of diag().
+
 2011-03-18  Rik  <octave@nomad.inbox5.com>
 
 	* test_parser.m: Add operatore precedence tests.
 
 2011-03-01  Rik  <octave@nomad.inbox5.com>
 
 	* test/test_index-wfi-t.m: Use modern warning function
 	rather than deprecated built-in variable to set warning state.
diff --git a/test/test_diag_perm.m b/test/test_diag_perm.m
--- a/test/test_diag_perm.m
+++ b/test/test_diag_perm.m
@@ -155,33 +155,33 @@
 %! assert (A / Dc, A ./ repmat (scalefact, m, 1));
 
 ## arithmetic
 %!test
 %! m = 9;
 %! n = 7;
 %! mn = min (m, n);
 %! d1 = rand (mn, 1) + I () * rand (mn, 1);
-%! D1 = diag (d1, m, n);
+%! D1 = resize (diag (d1), m, n);
 %! d2 = rand (mn, 1);
-%! D2 = diag (d2, m, n);
+%! D2 = resize (diag (d2), m, n);
 %! D1D2 = D1 + D2;
 %! assert (typeinfo (D1D2), "complex diagonal matrix");
 %! assert (diag (D1D2), d1 + d2);
 %! D1D2 = D2.' * D1;
 %! assert (typeinfo (D1D2), "complex diagonal matrix");
 %! assert (diag (D1D2), d1 .* d2);
 
 ## slicing
 %!test
 %! m = 13;
 %! n = 6;
 %! mn = min (m, n);
 %! d = rand (mn, 1);
-%! D = diag (d, m, n);
+%! D = resize (diag (d), m, n);
 %! Dslice = D (1:(m-3), 1:(n-2));
 %! assert (typeinfo (Dslice), "diagonal matrix");
 
 ## preserve dense matrix structure when scaling
 %!assert (typeinfo (rand (8) * (3 * eye (8))), "matrix");
 %!assert (typeinfo ((3 * eye (8)) * rand (8)), "matrix");
 
 ## preserve sparse matrix structure when scaling
@@ -213,17 +213,17 @@
 %! Dr(n-1, n-1) = 0;
 %! assert (full (Dr \ A), full (A) ./ repmat (scalefact, 1, n));
 
 ## narrow sparse inverse row scaling
 %!test
 %! n = 8;
 %! A = sprand (n, n, .5);
 %! scalefact = rand (n-2, 1);
-%! Dr = diag (scalefact, n, n-2);
+%! Dr = resize (diag (scalefact), n, n-2);
 %! assert (full (Dr \ A), Dr \ full(A))
 
 ## sparse inverse column scaling with a zero factor
 %!test
 %! n = 11;
 %! A = sprand (n, n, .5);
 %! scalefact = rand (1, n);
 %! Dc = diag (scalefact);
@@ -231,17 +231,17 @@
 %! Dc(n-1, n-1) = 0;
 %! assert (full (A / Dc), full(A) / Dc)
 
 ## short sparse inverse column scaling
 %!test
 %! n = 7;
 %! A = sprand (n, n, .5);
 %! scalefact = rand (1, n-2) + I () * rand(1, n-2);
-%! Dc = diag (scalefact, n-2, n);
+%! Dc = resize (diag (scalefact), n-2, n);
 %! assert (full (A / Dc), full(A) / Dc)
 
 ## adding sparse and diagonal stays sparse
 %!test
 %! n = 9;
 %! A = sprand (n, n, .5);
 %! D = 2 * eye (n);
 %! assert (typeinfo (A + D), "sparse matrix")
