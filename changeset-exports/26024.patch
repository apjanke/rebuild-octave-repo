# HG changeset patch
# User Pantxo Diribarne <pantxo.diribarne@gmail.com>
# Date 1541359543 -3600
#      Sun Nov 04 20:25:43 2018 +0100
# Node ID 80c8062e855a3a86cccbda5d91f853214440dddb
# Parent  afadaafd88a2795347041543e80695f8502116ac
Allow uicontrol focus to be set from the interpreter (bug #54942)

* graphics.in.h (uicontrol::properties::__focus__): New bool property.

* BaseControl.cc (BaseControl::BaseControl) Give focus to newly created widget.
  (BaseControl::update): When __focus__ property changes, set widget focus
  accordingly.
  (BaseControl::eventFilter): Update __focus__ property when focus changes.

* uicontrol.m: Make use of __focus__ to implement the missing focus option.
  Update documentation.

diff --git a/libgui/graphics/BaseControl.cc b/libgui/graphics/BaseControl.cc
--- a/libgui/graphics/BaseControl.cc
+++ b/libgui/graphics/BaseControl.cc
@@ -87,16 +87,17 @@ namespace QtHandles
 
     w->setPalette (p);
   }
 
   BaseControl::BaseControl (const graphics_object& go, QWidget *w)
     : Object (go, w), m_normalizedFont (false), m_keyPressHandlerDefined (false)
   {
     init (w);
+    w->setFocus ();
   }
 
   void
   BaseControl::init (QWidget *w, bool callBase)
   {
     if (callBase)
       Object::init (w, callBase);
 
@@ -166,16 +167,23 @@ namespace QtHandles
       case base_properties::ID_VISIBLE:
         w->setVisible (up.is_visible ());
         break;
 
       case uicontrol::properties::ID_KEYPRESSFCN:
         m_keyPressHandlerDefined = ! up.get_keypressfcn ().isempty ();
         break;
 
+      case uicontrol::properties::ID___FOCUS__:
+        if (up.is___focus__ ())
+          w->setFocus ();
+        else
+          w->clearFocus ();
+        break;
+
       default:
         break;
       }
   }
 
   bool
   BaseControl::eventFilter (QObject *watched, QEvent *xevent)
   {
@@ -198,17 +206,17 @@ namespace QtHandles
           QMouseEvent *m = dynamic_cast<QMouseEvent *> (xevent);
           graphics_object go = object ();
           uicontrol::properties& up = Utils::properties<uicontrol> (go);
           graphics_object fig = go.get_ancestor ("figure");
           if (fig)
             {
               gh_manager::post_set (fig.get_handle (), "currentobject",
                                     m_handle.value (), false);
-              
+
               if (m->button () != Qt::LeftButton || ! up.enable_is ("on"))
                 {
                   gh_manager::post_set (fig.get_handle (), "selectiontype",
                                         Utils::figureSelectionType (m), false);
                   gh_manager::post_set (fig.get_handle (), "currentpoint",
                                         Utils::figureCurrentPoint (fig, m),
                                         false);
                   gh_manager::post_callback (fig.get_handle (),
@@ -261,16 +269,24 @@ namespace QtHandles
             graphics_object fig = object ().get_ancestor ("figure");
 
             gh_manager::post_set (fig.get_handle (), "currentcharacter",
                                   keyData.getfield ("Character"), false);
             gh_manager::post_callback (m_handle, "keypressfcn", keyData);
           }
         break;
 
+      case QEvent::FocusIn:
+        gh_manager::post_set (m_handle, "__focus__", "on", false);
+        break;
+
+      case QEvent::FocusOut:
+        gh_manager::post_set (m_handle, "__focus__", "off", false);
+        break;
+
       default:
         break;
       }
 
     return Object::eventFilter (watched, xevent);
   }
 
 }
diff --git a/libinterp/corefcn/graphics.in.h b/libinterp/corefcn/graphics.in.h
--- a/libinterp/corefcn/graphics.in.h
+++ b/libinterp/corefcn/graphics.in.h
@@ -5459,16 +5459,17 @@ public:
       string_array_property string u , ""
       radio_property style S , "{pushbutton}|togglebutton|radiobutton|checkbox|edit|text|slider|frame|listbox|popupmenu"
       string_property tooltipstring , ""
       radio_property units u , "normalized|inches|centimeters|points|{pixels}|characters"
       row_vector_property value , Matrix (1, 1, 0.0)
       radio_property verticalalignment , "top|{middle}|bottom"
 
       // Octave-specific properties
+      bool_property __focus__ h , "on"
       any_property __object__ h , Matrix ()
     END_PROPERTIES
 
   private:
     std::string cached_units;
 
   protected:
     void init (void)
diff --git a/scripts/gui/uicontrol.m b/scripts/gui/uicontrol.m
--- a/scripts/gui/uicontrol.m
+++ b/scripts/gui/uicontrol.m
@@ -92,27 +92,28 @@
 ##                    "position", [10 60 300 40]);
 ## ## Create a checkbox
 ## c1 = uicontrol (f, "style", "checkbox", "string", "a checkbox", ...
 ##                    "position", [10 120 150 40]);
 ## @end group
 ## @end example
 ##
 ## When called with a single argument @var{h} which is a handle to an existing
-## uicontrol object, switch the focus to the specified uicontrol.  This
-## functionality is not currently implemented.
+## uicontrol object, switch the keyboard focus to the specified
+## uicontrol.  As a result, the uicontrol object will receive keyboard
+## events that can be processed using the "keypressfcn" callback.
 ## @seealso{figure, uipanel}
 ## @end deftypefn
 
 ## Author: goffioul
 
 function hui = uicontrol (varargin)
 
   if (nargin == 1 && isgraphics (varargin{1}, "uicontrol"))
-    warning ("uicontrol: focusing not implemented yet");
+    set (varargin{1}, "__focus__", "on");
     return;
   endif
 
   [h, args] = __uiobject_split_args__ ("uicontrol", varargin,
                                        {"figure", "uipanel", "uibuttongroup"});
   htmp = __go_uicontrol__ (h, args{:});
 
   if (nargout > 0)
