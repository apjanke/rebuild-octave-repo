# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1531465053 14400
#      Fri Jul 13 02:57:33 2018 -0400
# Node ID a8325f2361c7154bad76625cd8f4cea1cb0448b0
# Parent  9ea68b9e277b1aadfcf31e96ac6a1a981ebe5b6c
define xerbla in C++

* xerbla.cc: Rename from xerbla.c.  Include lo-blas-proto.h for xerbla
prototype instead of repeating declaration here.  Use iostream instead
of stdio.  Use nullptr instead of NULL.  Delete unneeded prototype for
octave_set_xerbla_handler.
(xerbla): Pass info by reference instead of pointer.
(octave_set_xerbla_handler): Declare extern "C".

* liboctave/external/blas-xtra/module.mk: Update.

diff --git a/liboctave/external/blas-xtra/module.mk b/liboctave/external/blas-xtra/module.mk
--- a/liboctave/external/blas-xtra/module.mk
+++ b/liboctave/external/blas-xtra/module.mk
@@ -20,17 +20,17 @@ EXTERNAL_SOURCES += \
   %reldir%/cconv2.f \
   %reldir%/csconv2.f \
   %reldir%/dconv2.f \
   %reldir%/sconv2.f \
   %reldir%/zconv2.f \
   %reldir%/zdconv2.f
 
 XERBLA_SRC = \
-  %reldir%/xerbla.c
+  %reldir%/xerbla.cc
 
 %canon_reldir%_libxerbla_la_SOURCES = $(XERBLA_SRC)
 
 %canon_reldir%_libxerbla_la_CPPFLAGS = \
   $(liboctave_liboctave_la_CPPFLAGS)
 
 if AMCOND_BUILD_EXTERNAL_LIBXERBLA
   octlib_LTLIBRARIES += %reldir%/libxerbla.la
diff --git a/liboctave/external/blas-xtra/xerbla.c b/liboctave/external/blas-xtra/xerbla.cc
rename from liboctave/external/blas-xtra/xerbla.c
rename to liboctave/external/blas-xtra/xerbla.cc
--- a/liboctave/external/blas-xtra/xerbla.c
+++ b/liboctave/external/blas-xtra/xerbla.cc
@@ -19,17 +19,17 @@ along with Octave; see the file COPYING.
 <https://www.gnu.org/licenses/>.
 
 */
 
 #if defined (HAVE_CONFIG_H)
 #  include "config.h"
 #endif
 
-#include <stdio.h>
+#include <iostream>
 
 #include "f77-fcn.h"
 #include "lo-blas-proto.h"
 
 typedef void (*xerbla_handler_fptr) (void);
 
 /* Pointer to function to call to handle error.  In the Octave
    interpreter we set this to a function that throws an exception and
@@ -38,38 +38,35 @@ typedef void (*xerbla_handler_fptr) (voi
 
    We must use a function pointer instead of simply calling error
    directly here because this function is called by LAPACK and BLAS
    subroutines.  To build shared libraries of those packages on Windows
    requires that all symbols be known when the shared library is
    constructed.  If we call error directly, that would mean that the
    BLAS and LAPACK libraries would have to depend on Octave...  */
 
-static xerbla_handler_fptr xerbla_handler = NULL;
+static xerbla_handler_fptr xerbla_handler = nullptr;
 
-/* Prototype to stop -Wmissing-prototypes from triggering */
-void octave_set_xerbla_handler (xerbla_handler_fptr fcn);
-
-void
+extern "C" void
 octave_set_xerbla_handler (xerbla_handler_fptr fcn)
 {
   xerbla_handler = fcn;
 }
 
 /* Replacement for BLAS and LAPACK XERBLA subroutine that calls an
    optionally installed handler function.  */
 
 F77_RET_T
 F77_FUNC (xerbla, XERBLA) (F77_CONST_CHAR_ARG_DEF (s_arg, len),
-                           const F77_INT *info
+                           const F77_INT& info
                            F77_CHAR_ARG_LEN_DEF (len))
 {
   const char *s = F77_CHAR_ARG_USE (s_arg);
   int slen = F77_CHAR_ARG_LEN_USE (s_arg, len);
 
-  fprintf (stderr, "%.*s: parameter number %ld is invalid\n", slen, s,
-           (long) (*info));
+  std::cerr << std::string (s, slen) << ": parameter number " << info
+            << " is invalid" << std::endl;
 
    if (xerbla_handler)
      (*xerbla_handler) ();
 
   F77_RETURN (0)
 }
