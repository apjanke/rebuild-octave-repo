# HG changeset patch
# User jwe
# Date 1162932739 0
#      Tue Nov 07 20:52:19 2006 +0000
# Node ID e8868fde0fc5ce0d99ffea041de31d1c8bb4b44b
# Parent  47f0cab13a0275ffa30cf692ee21507a77bfbb69
[project @ 2006-11-07 20:52:18 by jwe]

diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,8 +1,12 @@
+2006-11-07  John W. Eaton  <jwe@octave.org>
+
+	* startup/main-rcfile: Conditionally set PAGER_FLAGS.
+
 2006-11-06  Søren Hauberg  <soren@hauberg.org>
 
 	* pkg/pkg.m (extract_pkg): No need to pass "dotexceptnewline"
 	option to regexp.
 
 	* image/__img__.m: Send "set size ratio -1" before plotting.
 
 2006-11-03  Bill Denney  <denney@seas.upenn.edu>
diff --git a/scripts/startup/main-rcfile b/scripts/startup/main-rcfile
--- a/scripts/startup/main-rcfile
+++ b/scripts/startup/main-rcfile
@@ -4,8 +4,12 @@
 ## time Octave starts for every user at this site.
 
 ## Configure readline using the file inputrc in the Octave startup
 ## directory.
 
 read_readline_init_file (sprintf ("%s%s%s",
 				  octave_config_info ("startupfiledir"),
 				  filesep, "inputrc"));
+
+if (strcmp (PAGER (), "less") && isempty (getenv ("LESS")))
+  PAGER_FLAGS ('-e -X -P"-- less ?pB(%pB\\%):--. (f)orward, (b)ack, (q)uit$"');
+endif
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,18 @@
+2006-11-07  John W. Eaton  <jwe@octave.org>
+
+	* utils.cc (file_in_path): Don't unconditionally return "".
+
+	* pager.cc (default_pager): Don't append options here.
+	(pager_command): New function.
+	(do_sync): Use it.
+	(VPAGER_FLAGS): New variable.
+	(FPAGER_FLAGS): New function.
+
 2006-11-06  John W. Eaton  <jwe@octave.org>
 
 	* oct-hist.cc (default_history_file): If env_file is not empty,
 	just accept it rather than checking to see if it exists.
 
 2006-11-03  Bill Denney  <denney@seas.upenn.edu>
 
 	* help.cc (keywords): Document try and unwind_protect.
diff --git a/src/pager.cc b/src/pager.cc
--- a/src/pager.cc
+++ b/src/pager.cc
@@ -59,37 +59,28 @@ static std::ofstream external_diary_file
 
 static std::string
 default_pager (void)
 {
   std::string pager_binary = octave_env::getenv ("PAGER");
 
 #ifdef OCTAVE_DEFAULT_PAGER
   if (pager_binary.empty ())
-    {
-      pager_binary = std::string (OCTAVE_DEFAULT_PAGER);
-
-      if (pager_binary == "less")
-	{
-	  pager_binary.append (" -e");
-
-	  std::string lessflags = octave_env::getenv ("LESS");
-	  if (lessflags.empty ())
-	    pager_binary.append
-	      (" -X -P'-- less ?pB(%pB\\%):--. (f)orward, (b)ack, (q)uit$'");
-	}
-    }
+    pager_binary = OCTAVE_DEFAULT_PAGER;
 #endif
 
   return pager_binary;
 }
 
 // The shell command to run as the pager.
 static std::string VPAGER = default_pager ();
 
+// The options to pass to the pager.
+static std::string VPAGER_FLAGS;
+
 // TRUE means that if output is going to the pager, it is sent as soon
 // as it is available.  Otherwise, it is buffered and only sent to the
 // pager when it is time to print another prompt.
 static bool Vpage_output_immediately = false;
 
 // TRUE means all output intended for the screen should be passed
 // through the pager.
 static bool Vpage_screen_output = true;
@@ -132,31 +123,42 @@ pager_event_handler (pid_t pid, int stat
 
 	  retval = true;
 	}
     }
 
   return retval;
 }
 
+static std::string
+pager_command (void)
+{
+  std::string cmd = VPAGER;
+
+  if (! (cmd.empty () || VPAGER_FLAGS.empty ()))
+    cmd += " " + VPAGER_FLAGS;
+
+  return cmd;
+}
+
 static void
 do_sync (const char *msg, int len, bool bypass_pager)
 {
   if (msg && len > 0)
     {
       if (bypass_pager)
 	{
 	  std::cout.write (msg, len);
 	  std::cout.flush ();
 	}
       else
 	{
 	  if (! external_pager)
 	    {
-	      std::string pgr = VPAGER;
+	      std::string pgr = pager_command ();
 
 	      if (! pgr.empty ())
 		{
 		  external_pager = new oprocstream (pgr.c_str ());
 
 		  if (external_pager)
 		    octave_child_list::insert (external_pager->pid (),
 					       pager_event_handler);
@@ -571,19 +573,31 @@ DEFUN (PAGER, args, nargout,
   "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {@var{val} =} PAGER ()\n\
 @deftypefnx {Built-in Function} {@var{old_val} =} PAGER (@var{new_val})\n\
 Query or set the internal variable that specifies the program to use\n\
 to display terminal output on your system.  The default value is\n\
 normally @code{\"less\"}, @code{\"more\"}, or\n\
 @code{\"pg\"}, depending on what programs are installed on your system.\n\
 @xref{Installation}.\n\
-@seealso{page_screen_output, page_output_immediately}\n\
+@seealso{more, page_screen_output, page_output_immediately, PAGER_FLAGS}\n\
 @end deftypefn")
 {
   return SET_NONEMPTY_INTERNAL_STRING_VARIABLE (PAGER);
 }
 
+DEFUN (PAGER_FLAGS, args, nargout,
+  "-*- texinfo -*-\n\
+@deftypefn {Built-in Function} {@var{val} =} PAGER_FLAGS ()\n\
+@deftypefnx {Built-in Function} {@var{old_val} =} PAGER_FLAGS (@var{new_val})\n\
+Query or set the internal variable that specifies the options to pass\n\
+to the pager.\n\
+@seealso{PAGER}\n\
+@end deftypefn")
+{
+  return SET_NONEMPTY_INTERNAL_STRING_VARIABLE (PAGER_FLAGS);
+}
+
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
diff --git a/src/utils.cc b/src/utils.cc
--- a/src/utils.cc
+++ b/src/utils.cc
@@ -394,18 +394,16 @@ name in the path.  If no files are found
 std::string
 file_in_path (const std::string& name, const std::string& suffix)
 {
   std::string nm = name;
 
   if (! suffix.empty ())
     nm.append (suffix);
 
-  return std::string ();
-
   return octave_env::make_absolute
     (load_path::find_file (nm), octave_env::getcwd ());
 }
 
 // See if there is an function file in the path.  If so, return the
 // full path to the file.
 
 std::string
