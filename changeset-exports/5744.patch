# HG changeset patch
# User jwe
# Date 1144352315 0
#      Thu Apr 06 19:38:35 2006 +0000
# Node ID 1c36a2e822664c0d0f8749dcee8df778907f9b94
# Parent  a527e0f77aa5351370baaf78f391da76b11affb6
[project @ 2006-04-06 19:38:34 by jwe]

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,12 +1,15 @@
 2006-04-06  John W. Eaton  <jwe@octave.org>
 
-	* parse.y (Fmfilename): If no function is on the call stack check
-	to see whether we are reading a script file.
+	* parse.y (parse_and_execute, parse_fcn_file):
+	Create octave_script_function object and push it on the call stack. 
+
+	* parse.y (Fmfilename): Check for script or user function file on
+	call stack.
 
 	* ov-builtin.cc (octave_builtin::do_multi_index_op):
 	Use octave_call_stack instead of curr_function to save pointer to
 	current function.
 	* ov-mapper.cc (octave_mapper::do_multi_index_op): Likewise.
 	* ov-usr-fcn.cc (octave_user_function::do_multi_index_op): Likewise.
 
 	* pt-bp.h (MAYBE_DO_BREAKPOINT): Use octave_call_stack instead of
@@ -29,22 +32,25 @@ 2006-04-06  John W. Eaton  <jwe@octave.o
 
 	* variables.cc (do_who): Use octave_call_stack instead of
 	curr_caller_function to get pointer to calling function.
 	* input.cc (get_user_input): Likewise.
 	* error.cc (pr_where): Likewise.  No need for curr_function now.
 	* parse.y (Fmfilename): Likewise.  Check for scripting language
 	caller, not any calling function.
 
-2006-04-05  John W. Eaton  <jwe@octave.org>
+	* ov-usr-fcn.h (octave_user_script): New class.
+	* ov-fcn.h (octave_function::is_user_script): New virtual function.
 
 	* toplev.h, toplev.cc (octave_call_stack): New class.
 
 	* debug.cc (Fdbwhere): Use get_user_function here.
 
+2006-04-05  John W. Eaton  <jwe@octave.org>
+
 	* Makefile.in (mk-pkg-add): Use mfilename to simplify.
 	(PKG_ADD): Don't pass --prefix arg to mk-pkg-add.
 	(PKG_ADD.inst): Delete target.
 	(clean): Don't remove PKG_ADD.inst.
 	(install-oct): Don't depend on PKG_ADD.inst.  Install PKG_ADD, not
 	PKG_ADD.inst.
 
 	* parse.y (Fmfilename): New function.
diff --git a/src/debug.cc b/src/debug.cc
--- a/src/debug.cc
+++ b/src/debug.cc
@@ -54,17 +54,17 @@ 02110-1301, USA.
 // current call stack.
 
 static octave_user_function *
 get_user_function (std::string fname = "")
 {
   octave_user_function *dbg_fcn = 0;
 
   if (fname == "")
-    dbg_fcn = octave_call_stack::caller_script ();
+    dbg_fcn = octave_call_stack::caller_user_function ();
   else
     {
       symbol_record *ptr = curr_sym_tab->lookup (fname);
 
       if (ptr && ptr->is_user_function ())
 	{
 	  octave_value tmp = ptr->def ();
 	  dbg_fcn = dynamic_cast<octave_user_function *> (tmp.function_value ());
diff --git a/src/error.cc b/src/error.cc
--- a/src/error.cc
+++ b/src/error.cc
@@ -373,17 +373,18 @@ pr_where (const char *name, bool print_c
 {
   if (curr_statement)
     {
       std::string nm;
 
       int l = -1;
       int c = -1;
 
-      octave_user_function *fcn = octave_call_stack::caller_script ();
+      octave_function *fcn
+	= octave_call_stack::caller_user_script_or_function ();
 
       if (fcn)
 	{
 	  nm = fcn->fcn_file_name ();
 
 	  if (nm.empty ())
 	    nm = fcn->name ();
 
@@ -540,17 +541,17 @@ warning_1 (const char *id, const char *f
 	pr_where ("warning", false);
 
       vwarning ("warning", id, fmt, args);
 
       warning_state = 1;
 
       if ((interactive || forced_interactive)
 	  && Vdebug_on_warning
-	  && octave_call_stack::caller_script ())
+	  && octave_call_stack::caller_user_script_or_function ())
 	{
 	  unwind_protect_bool (Vdebug_on_warning);
 	  Vdebug_on_warning = false;
 
 	  do_keyboard (octave_value_list ());
 
 	  unwind_protect::run ();
 	}
@@ -579,17 +580,17 @@ static void
 error_2 (const char *id, const char *fmt, va_list args)
 {
   int init_state = error_state;
 
   error_1 (std::cerr, "error", id, fmt, args);
 
   if ((interactive || forced_interactive)
       && Vdebug_on_error && init_state == 0
-      && octave_call_stack::caller_script ())
+      && octave_call_stack::caller_user_script_or_function ())
     {
       unwind_protect_bool (Vdebug_on_error);
       Vdebug_on_error = false;
 
       pr_where ("error");
 
       error_state = 0;
 
diff --git a/src/input.cc b/src/input.cc
--- a/src/input.cc
+++ b/src/input.cc
@@ -542,17 +542,18 @@ get_user_input (const octave_value_list&
   if (nargin == 2)
     read_as_string++;
 
   std::string nm;
   int line = -1;
 
   if (debug)
     {
-      octave_user_function *caller = octave_call_stack::caller_script ();
+      octave_function *caller
+	= octave_call_stack::caller_user_script_or_function ();
 
       if (caller)
 	{
 	  nm = caller->fcn_file_name ();
 
 	  if (nm.empty ())
 	    nm = caller->name ();
 
diff --git a/src/ov-fcn.h b/src/ov-fcn.h
--- a/src/ov-fcn.h
+++ b/src/ov-fcn.h
@@ -65,16 +65,18 @@ public:
   virtual octave_time time_parsed (void) const
     { return octave_time (static_cast<time_t> (0)); }
 
   virtual octave_time time_checked (void) const
     { return octave_time (static_cast<time_t> (0)); }
 
   virtual bool is_nested_function (void) const { return false; }
 
+  virtual bool is_user_script (void) const { return false; }
+
   virtual bool is_user_function (void) const { return false; }
 
   virtual bool takes_varargs (void) const { return false; }
 
   virtual void octave_va_start (void) { }
 
   virtual octave_value octave_va_arg (void) { return octave_value (); }
 
diff --git a/src/ov-usr-fcn.cc b/src/ov-usr-fcn.cc
--- a/src/ov-usr-fcn.cc
+++ b/src/ov-usr-fcn.cc
@@ -54,16 +54,22 @@ static int Vmax_recursion_depth;
 // User defined functions.
 
 DEFINE_OCTAVE_ALLOCATOR (octave_user_function);
 
 DEFINE_OV_TYPEID_FUNCTIONS_AND_DATA (octave_user_function,
 				     "user-defined function",
 				     "user-defined function");
 
+DEFINE_OCTAVE_ALLOCATOR (octave_user_script);
+
+DEFINE_OV_TYPEID_FUNCTIONS_AND_DATA (octave_user_script,
+				     "user-defined script",
+				     "user-defined script");
+
 // Ugh.  This really needs to be simplified (code/data?
 // extrinsic/intrinsic state?).
 
 octave_user_function::octave_user_function
   (tree_parameter_list *pl, tree_parameter_list *rl,
    tree_statement_list *cl, symbol_table *st)
   : octave_function (std::string (), std::string ()),
     param_list (pl), ret_list (rl), cmd_list (cl),
@@ -741,17 +747,17 @@ has not been declared to take a variable
     }
 
   octave_value_list retval;
 
   int nargin = args.length ();
 
   if (nargin == 0)
     {
-      octave_function *fcn = octave_call_stack::caller_script ();
+      octave_user_function *fcn = octave_call_stack::caller_user_function ();
 
       if (fcn)
 	{
 	  if (fcn->takes_varargs ())
 	    retval = fcn->octave_va_arg ();
 	  else
 	    {
 	      ::error ("va_arg only valid within function taking variable");
@@ -785,17 +791,17 @@ that has not been declared to take a var
     }
 
   octave_value_list retval;
 
   int nargin = args.length ();
 
   if (nargin == 0)
     {
-      octave_function *fcn = octave_call_stack::caller_script ();
+      octave_user_function *fcn = octave_call_stack::caller_user_function ();
 
       if (fcn)
 	{
 	  if (fcn->takes_varargs ())
 	    fcn->octave_va_start ();
 	  else
 	    {
 	      ::error ("va_start only valid within function taking variable");
@@ -831,17 +837,17 @@ been declared to return an unspecified n
     }
 
   octave_value_list retval;
 
   int nargin = args.length ();
 
   if (nargin == 1)
     {
-      octave_function *fcn = octave_call_stack::caller_script ();
+      octave_user_function *fcn = octave_call_stack::caller_user_function ();
 
       if (fcn)
 	{
 	  if (fcn->has_varargout ())
 	    ::error ("vr_val and varargout cannot both be used in the same function");
 	  else if (fcn->takes_var_return ())
 	    fcn->octave_vr_val (args(0));
 	  else
diff --git a/src/ov-usr-fcn.h b/src/ov-usr-fcn.h
--- a/src/ov-usr-fcn.h
+++ b/src/ov-usr-fcn.h
@@ -39,17 +39,57 @@ class string_vector;
 class octave_value;
 class tree_parameter_list;
 class tree_statement_list;
 class tree_va_return_list;
 class tree_walker;
 class symbol_table;
 class symbol_record;
 
-// Builtin functions.
+// Scripts.
+
+class
+octave_user_script : public octave_function
+{
+public:
+
+  octave_user_script (void) { }
+
+  octave_user_script (const std::string& fnm, const std::string& nm,
+		      const std::string& ds)
+    : octave_function (nm, ds), file_name (fnm) { }
+
+  ~octave_user_script (void) { }
+
+  // Scripts and user functions are both considered "scripts" because
+  // they are written in Octave's scripting language.
+
+  bool is_user_script (void) const { return true; }
+
+  void stash_fcn_file_name (const std::string& nm) { file_name = nm; }
+
+  std::string fcn_file_name (void) const { return file_name; }
+
+private:
+
+  // The name of the file we parsed
+  std::string file_name;
+
+  // No copying!
+
+  octave_user_script (const octave_user_script& f);
+
+  octave_user_script& operator = (const octave_user_script& f);
+
+  DECLARE_OCTAVE_ALLOCATOR
+
+  DECLARE_OV_TYPEID_FUNCTIONS_AND_DATA
+};
+
+// User-defined functions.
 
 class
 octave_user_function : public octave_function
 {
 public:
 
   octave_user_function (tree_parameter_list *pl = 0,
 			tree_parameter_list *rl = 0,
diff --git a/src/parse.y b/src/parse.y
--- a/src/parse.y
+++ b/src/parse.y
@@ -2992,16 +2992,20 @@ parse_and_execute (const std::string& s,
   curr_fcn_file_full_name = s;
 
   FILE *f = get_input_from_file (s, 0);
 
   if (f)
     {
       unwind_protect::add (safe_fclose, f);
 
+      octave_user_script *script = new octave_user_script (s, s, "");
+      octave_call_stack::push (script);
+      unwind_protect::add (octave_call_stack::unwind_pop_script, 0);
+
       unwind_protect_int (input_line_number);
       unwind_protect_int (current_input_column);
 
       input_line_number = 0;
       current_input_column = 1;
 
       if (verbose)
 	{
@@ -3372,16 +3376,20 @@ parse_fcn_file (const std::string& ff, b
 
 	  Vsaving_history = false;
 	  reading_script_file = true;
 
 	  unwind_protect::add (clear_current_script_file_name, 0);
 
 	  bind_builtin_variable ("current_script_file_name", ff);
 
+	  octave_user_script *script = new octave_user_script (ff, ff, "");
+	  octave_call_stack::push (script);
+	  unwind_protect::add (octave_call_stack::unwind_pop_script, 0);
+
 	  parse_and_execute (ffile);
 
 	  script_file_executed = true;
 	}
     }
   else
     error ("no such file, `%s'", ff.c_str ());
 
@@ -3614,49 +3622,27 @@ of the file name and the extension.\n\
 
       if (error_state)
 	{
 	  error ("mfilename: expecting argument to be a character string");
 	  return retval;
 	}
     }
 
-  // XXX FIXME XXX -- the logic below fails for the following
-  // situation, because script files are not functions that can be
-  // entered into the call stack.
-  //
-  // foo.m:
-  // -----
-  //   function foo ()
-  //     bar;
-  //
-  // bar.m:
-  // -----
-  //   mfilename ();
-  //
-  // foo ()
-  //    ==> foo
-  //
-  // though it should report "bar".  Perhaps we need a dummy function
-  // object that can be used for scripts to at least hold file names
-  // and some other information so we could store it on the call stack.
-
   std::string fname;
 
-  octave_user_function *fcn = octave_call_stack::caller_script ();
+  octave_function *fcn = octave_call_stack::caller_user_script_or_function ();
 
   if (fcn)
     {
       fname = fcn->fcn_file_name ();
 
       if (fname.empty ())
         fname = fcn->name ();
     }
-  else if (reading_script_file)
-    fname = curr_fcn_file_full_name;
 
   if (arg == "fullpathext")
     retval = fname;
   else
     {
       size_t pos = fname.rfind ('.');
 
       fname = (pos != NPOS) ? fname.substr (0, pos) : fname;
diff --git a/src/toplev.cc b/src/toplev.cc
--- a/src/toplev.cc
+++ b/src/toplev.cc
@@ -104,18 +104,37 @@ octave_call_stack::do_caller (void)
     {
       iterator p = cs.begin ();
       retval = *++p;
     }
 
   return retval;
 }
 
+octave_user_script *
+octave_call_stack::do_caller_user_script (void)
+{
+  octave_user_script *retval = 0;
+
+  for (iterator p = cs.begin (); p != cs.end (); p++)
+    {
+      octave_function *f = *p;
+
+      if (f && f->is_user_script ())
+	{
+	  retval = dynamic_cast<octave_user_script *> (f);
+	  break;
+	}
+    }
+
+  return retval;
+}
+
 octave_user_function *
-octave_call_stack::do_caller_script (void)
+octave_call_stack::do_caller_user_function (void)
 {
   octave_user_function *retval = 0;
 
   for (iterator p = cs.begin (); p != cs.end (); p++)
     {
       octave_function *f = *p;
 
       if (f && f->is_user_function ())
@@ -123,16 +142,44 @@ octave_call_stack::do_caller_script (voi
 	  retval = dynamic_cast<octave_user_function *> (f);
 	  break;
 	}
     }
 
   return retval;
 }
 
+octave_function *
+octave_call_stack::do_caller_user_script_or_function (void)
+{
+  octave_function *retval = 0;
+
+  for (iterator p = cs.begin (); p != cs.end (); p++)
+    {
+      octave_function *f = *p;
+
+      if (f && (f->is_user_script () || f->is_user_function ()))
+	{
+	  retval = f;
+	  break;
+	}
+    }
+
+  return retval;
+}
+
+void
+octave_call_stack::unwind_pop_script (void *)
+{
+  octave_function *f = top ();
+  pop ();
+  assert (f && f->is_user_script ());
+  delete f;
+}
+
 static void
 recover_from_exception (void)
 {
   can_interrupt = true;
   octave_interrupt_immediately = 0;
   octave_interrupt_state = 0;
   octave_signal_caught = 0;
   octave_allocation_error = 0;
diff --git a/src/toplev.h b/src/toplev.h
--- a/src/toplev.h
+++ b/src/toplev.h
@@ -27,17 +27,17 @@ 02110-1301, USA.
 #include <cstdio>
 
 #include <list>
 #include <string>
 
 class octave_value;
 class octave_value_list;
 class octave_function;
-class octave_user_function;
+class octave_user_script;
 class tree_statement_list;
 class charMatrix;
 
 extern void
 clean_up_and_exit (int) GCC_ATTR_NORETURN;
 
 extern int main_loop (void);
 
@@ -81,70 +81,92 @@ public:
 
 	retval = false;
       }
 
     return retval;
   }
 
   // Current function (top of stack).
-  static octave_function *current (void)
-  {
-    return instance_ok () ? instance->do_current (): 0;
-  }
+  static octave_function *current (void) { return top (); }
 
   // Caller function, may be built-in.
   static octave_function *caller (void)
   {
     return instance_ok () ? instance->do_caller (): 0;
   }
 
-  // First scripting language function on the stack.
-  static octave_user_function *caller_script (void)
+  // First script on the stack.
+  static octave_user_script *caller_script (void)
   {
-    return instance_ok () ? instance->do_caller_script (): 0;
+    return instance_ok () ? instance->do_caller_user_script (): 0;
+  }
+
+  // First user-defined function on the stack.
+  static octave_user_function *caller_user_function (void)
+  {
+    return instance_ok () ? instance->do_caller_user_function (): 0;
+  }
+
+  // First user-defined function on the stack.
+  static octave_function *caller_user_script_or_function (void)
+  {
+    return instance_ok () ? instance->do_caller_user_script_or_function (): 0;
   }
 
   static void push (octave_function *f)
   {
     if (instance_ok ())
       instance->do_push (f);
   }
 
+  static octave_function *top (void)
+  {
+    return instance_ok () ? instance->do_top (): 0;
+  }
+
   static void pop (void)
   {
     if (instance_ok ())
       instance->do_pop ();
   }
   
   // A function for popping the top of the call stack that is suitable
   // for use as an unwind_protect handler.
   static void unwind_pop (void *) { pop (); }
 
+  // A function for popping an octave_user_script from the top of the
+  // call stack that is suitable for use as an unwind_protect handler.
+  static void unwind_pop_script (void *);
+
   static void clear (void)
   {
     if (instance_ok ())
       instance->do_clear ();
   }
   
 private:
 
   // The current call stack.
   std::list<octave_function *> cs;
 
   static octave_call_stack *instance;
 
-  octave_function *do_current (void) { return cs.empty () ? 0 : cs.front (); }
-
   octave_function *do_caller (void);
 
-  octave_user_function *do_caller_script (void);
+  octave_user_script *do_caller_user_script (void);
+
+  octave_user_function *do_caller_user_function (void);
+
+  octave_function *do_caller_user_script_or_function (void);
 
   void do_push (octave_function *f) { cs.push_front (f); }
 
+  octave_function *do_top (void) { return cs.empty () ? 0 : cs.front (); }
+
   void do_pop (void)
   {
     if (! cs.empty ())
       cs.pop_front ();
   }
 
   void do_clear (void) { cs.clear (); }
 };
diff --git a/src/variables.cc b/src/variables.cc
--- a/src/variables.cc
+++ b/src/variables.cc
@@ -1941,17 +1941,17 @@ then lock in the current function.\n\
 
       if (! error_state)
 	mlock (name);
       else
 	error ("mlock: expecting argument to be a function name");
     }
   else if (args.length () == 0)
     {
-      octave_user_function *fcn = octave_call_stack::caller_script ();
+      octave_user_function *fcn = octave_call_stack::caller_user_function ();
 
       if (fcn)
         mlock (fcn->name ());
       else
         error ("mlock: invalid use outside a function");
     }
   else
     print_usage ("mlock");
@@ -1975,17 +1975,17 @@ then unlock the current function.\n\
 
       if (! error_state)
         munlock (name);
       else
 	error ("munlock: expecting argument to be a function name");
     }
   else if (args.length () == 0)
     {
-      octave_user_function *fcn = octave_call_stack::caller_script ();
+      octave_user_function *fcn = octave_call_stack::caller_user_function ();
 
       if (fcn)
         mlock (fcn->name ());
       else
         error ("munlock: invalid use outside a function");
     }
   else
     print_usage ("munlock");
@@ -2010,17 +2010,17 @@ then return true if the current function
 
       if (! error_state)
         retval = mislocked (name);
       else
 	error ("mislocked: expecting argument to be a function name");
     }
   else if (args.length () == 0)
     {
-      octave_user_function *fcn = octave_call_stack::caller_script ();
+      octave_user_function *fcn = octave_call_stack::caller_user_function ();
 
       if (fcn)
         retval = mislocked (fcn->name ());
       else
         error ("mislocked: invalid use outside a function");
     }
   else
     print_usage ("mislocked");
